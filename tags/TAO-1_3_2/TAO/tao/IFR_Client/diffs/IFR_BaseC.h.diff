--- orig/IFR_BaseC.h	Sat Mar 16 01:41:17 2002
+++ IFR_BaseC.h	Sat Mar 16 01:30:49 2002
@@ -1,6 +1,6 @@
 // -*- C++ -*-
 //
-// $Id$
+// $Id$
 
 // ****  Code generated by the The ACE ORB (TAO) IDL Compiler ****
 // TAO and the TAO IDL Compiler have been developed by:
@@ -19,17 +19,19 @@
 // Information about TAO is available at:
 //     http://www.cs.wustl.edu/~schmidt/TAO.html
 
-#ifndef _TAO_IDL_ORIG_IFR_BASEC_H_
-#define _TAO_IDL_ORIG_IFR_BASEC_H_
+#ifndef _TAO_IDL_IFR_BASEC_H_
+#define _TAO_IDL_IFR_BASEC_H_
 
 #include "ace/pre.h"
-#include "tao/corba.h"
+#include "ifr_client_export.h"
 
 #if !defined (ACE_LACKS_PRAGMA_ONCE)
 # pragma once
 #endif /* ACE_LACKS_PRAGMA_ONCE */
 
-#include "ifr_client_export.h"
+#include "tao/Remote_Object_Proxy_Impl.h"
+#include "tao/Object.h"
+#include "tao/Any.h"
 
 #if defined (TAO_EXPORT_MACRO)
 #undef TAO_EXPORT_MACRO
@@ -54,62 +56,11 @@
 #pragma option push -w-rvl -w-rch -w-ccc -w-inl
 #endif /* __BORLANDC__ */
 
-TAO_NAMESPACE  CORBA
-{
-  typedef char * Identifier;
-  typedef CORBA::String_var Identifier_var;
-  typedef CORBA::String_out Identifier_out;
-  TAO_NAMESPACE_STORAGE_CLASS ::CORBA::TypeCode_ptr _tc_Identifier;
-  
-  typedef char * ScopedName;
-  typedef CORBA::String_var ScopedName_var;
-  typedef CORBA::String_out ScopedName_out;
-  TAO_NAMESPACE_STORAGE_CLASS ::CORBA::TypeCode_ptr _tc_ScopedName;
-  
-  typedef char * RepositoryId;
-  typedef CORBA::String_var RepositoryId_var;
-  typedef CORBA::String_out RepositoryId_out;
-  TAO_NAMESPACE_STORAGE_CLASS ::CORBA::TypeCode_ptr _tc_RepositoryId;
-  
-  enum DefinitionKind
-  {
-    dk_none,
-    dk_all,
-    dk_Attribute,
-    dk_Constant,
-    dk_Exception,
-    dk_Interface,
-    dk_Module,
-    dk_Operation,
-    dk_Typedef,
-    dk_Alias,
-    dk_Struct,
-    dk_Union,
-    dk_Enum,
-    dk_Primitive,
-    dk_String,
-    dk_Sequence,
-    dk_Array,
-    dk_Repository,
-    dk_Wstring,
-    dk_Fixed,
-    dk_Value,
-    dk_ValueBox,
-    dk_ValueMember,
-    dk_Native,
-    dk_AbstractInterface,
-    dk_LocalInterface
-  };
-  
-  typedef DefinitionKind &DefinitionKind_out;
-  TAO_NAMESPACE_STORAGE_CLASS ::CORBA::TypeCode_ptr _tc_DefinitionKind;
-  
   
 #if !defined (_CORBA_IROBJECT___PTR_CH_)
 #define _CORBA_IROBJECT___PTR_CH_
   
-  class IRObject;
-  typedef IRObject *IRObject_ptr;
+class CORBA_IRObject;
   
 #endif /* end #if !defined */
   
@@ -117,43 +68,43 @@
 #if !defined (_CORBA_IROBJECT___VAR_CH_)
 #define _CORBA_IROBJECT___VAR_CH_
   
-  class TAO_IFR_Client_Export IRObject_var : public TAO_Base_var
+class TAO_IFR_Client_Export CORBA_IRObject_var : public TAO_Base_var
   {
   public:
-    IRObject_var (void); // default constructor
-    IRObject_var (IRObject_ptr p) : ptr_ (p) {} 
-    IRObject_var (const IRObject_var &); // copy constructor
-    ~IRObject_var (void); // destructor
+  CORBA_IRObject_var (void); // default constructor
+  CORBA_IRObject_var (CORBA_IRObject_ptr p) : ptr_ (p) {}
+  CORBA_IRObject_var (const CORBA_IRObject_var &); // copy constructor
+  ~CORBA_IRObject_var (void); // destructor
     
-    IRObject_var &operator= (IRObject_ptr);
-    IRObject_var &operator= (const IRObject_var &);
-    IRObject_ptr operator-> (void) const;
+  CORBA_IRObject_var &operator= (CORBA_IRObject_ptr);
+  CORBA_IRObject_var &operator= (const CORBA_IRObject_var &);
+  CORBA_IRObject_ptr operator-> (void) const;
     
-    operator const IRObject_ptr &() const;
-    operator IRObject_ptr &();
+  operator const CORBA_IRObject_ptr &() const;
+  operator CORBA_IRObject_ptr &();
     // in, inout, out, _retn 
-    IRObject_ptr in (void) const;
-    IRObject_ptr &inout (void);
-    IRObject_ptr &out (void);
-    IRObject_ptr _retn (void);
-    IRObject_ptr ptr (void) const;
+  CORBA_IRObject_ptr in (void) const;
+  CORBA_IRObject_ptr &inout (void);
+  CORBA_IRObject_ptr &out (void);
+  CORBA_IRObject_ptr _retn (void);
+  CORBA_IRObject_ptr ptr (void) const;
     
     // Hooks used by template sequence and object manager classes
     // for non-defined forward declared interfaces.
-    static IRObject_ptr tao_duplicate (IRObject_ptr);
-    static void tao_release (IRObject_ptr);
-    static IRObject_ptr tao_nil (void);
-    static IRObject_ptr tao_narrow (
+  static CORBA_IRObject_ptr tao_duplicate (CORBA_IRObject_ptr);
+  static void tao_release (CORBA_IRObject_ptr);
+  static CORBA_IRObject_ptr tao_nil (void);
+  static CORBA_IRObject_ptr tao_narrow (
         CORBA::Object *
         ACE_ENV_ARG_DECL_NOT_USED
       );
     static CORBA::Object * tao_upcast (void *);
   
   private:
-    IRObject_ptr ptr_;
+  CORBA_IRObject_ptr ptr_;
     // Unimplemented - prevents widening assignment.
-    IRObject_var (const TAO_Base_var &rhs);
-    IRObject_var &operator= (const TAO_Base_var &rhs);
+  CORBA_IRObject_var (const TAO_Base_var &rhs);
+  CORBA_IRObject_var &operator= (const TAO_Base_var &rhs);
   };
 
 
@@ -163,123 +114,115 @@
 #if !defined (_CORBA_IROBJECT___OUT_CH_)
 #define _CORBA_IROBJECT___OUT_CH_
   
-  class TAO_IFR_Client_Export IRObject_out
+class TAO_IFR_Client_Export CORBA_IRObject_out
   {
   public:
-    IRObject_out (IRObject_ptr &);
-    IRObject_out (IRObject_var &);
-    IRObject_out (const IRObject_out &);
-    IRObject_out &operator= (const IRObject_out &);
-    IRObject_out &operator= (const IRObject_var &);
-    IRObject_out &operator= (IRObject_ptr);
-    operator IRObject_ptr &();
-    IRObject_ptr &ptr (void);
-    IRObject_ptr operator-> (void);
+  CORBA_IRObject_out (CORBA_IRObject_ptr &);
+  CORBA_IRObject_out (CORBA_IRObject_var &);
+  CORBA_IRObject_out (const CORBA_IRObject_out &);
+  CORBA_IRObject_out &operator= (const CORBA_IRObject_out &);
+  CORBA_IRObject_out &operator= (const CORBA_IRObject_var &);
+  CORBA_IRObject_out &operator= (CORBA_IRObject_ptr);
+  operator CORBA_IRObject_ptr &();
+  CORBA_IRObject_ptr &ptr (void);
+  CORBA_IRObject_ptr operator-> (void);
   
   private:
-    IRObject_ptr &ptr_;
+  CORBA_IRObject_ptr &ptr_;
   };
   
   
 #endif /* end #if !defined */
   
-  // *************************************************************
-  // CORBA::IRObject
-  // TAO_IDL - Generated from
-  // be/be_visitor_interface/interface_ch.cpp:106
-  // *************************************************************
-  
   
 #if !defined (_CORBA_IROBJECT_CH_)
 #define _CORBA_IROBJECT_CH_
   
-  // Forward Classes Declaration.
-  class _TAO_IRObject_Proxy_Impl;
-  class _TAO_IRObject_Remote_Proxy_Impl;
-  class _TAO_IRObject_Proxy_Broker;
-  class _TAO_IRObject_Remote_Proxy_Broker;
+// Forward Classes Declaration
+class _TAO_CORBA_IRObject_Proxy_Impl;
+class _TAO_CORBA_IRObject_Remote_Proxy_Impl;
+class _TAO_CORBA_IRObject_Proxy_Broker;
+class _TAO_CORBA_IRObject_Remote_Proxy_Broker;
   
-  class TAO_IFR_Client_Export IRObject
+class TAO_IFR_Client_Export CORBA_IRObject
     : public virtual CORBA_Object
   {
   public:
   #if !defined(__GNUC__) || !defined (ACE_HAS_GNUG_PRE_2_8)
-    typedef IRObject_ptr _ptr_type;
-    typedef IRObject_var _var_type;
+  typedef CORBA_IRObject_ptr _ptr_type;
+  typedef CORBA_IRObject_var _var_type;
   #endif /* ! __GNUC__ || g++ >= 2.8 */
 
     static int _tao_class_id;
     
-    // The static operations.
-    static IRObject_ptr _duplicate (IRObject_ptr obj);
+  // the static operations
+  static CORBA_IRObject_ptr _duplicate (CORBA_IRObject_ptr obj);
     
-    static IRObject_ptr _narrow (
+  static CORBA_IRObject_ptr _narrow (
         CORBA::Object_ptr obj
-        ACE_ENV_ARG_DECL_WITH_DEFAULTS
-      );
+      ACE_ENV_ARG_DECL_WITH_DEFAULTS);
     
-    static IRObject_ptr _unchecked_narrow (
+
+  static CORBA_IRObject_ptr _unchecked_narrow (
         CORBA::Object_ptr obj
-        ACE_ENV_ARG_DECL_WITH_DEFAULTS
-      );
+      ACE_ENV_ARG_DECL_WITH_DEFAULTS);
     
-    static IRObject_ptr _nil (void)
+
+  static CORBA_IRObject_ptr _nil (void)
       {
-        return (IRObject_ptr)0;
+      return (CORBA_IRObject_ptr)0;
       }
     
     static void _tao_any_destructor (void*);
     
-    virtual ::CORBA::DefinitionKind def_kind (
+  virtual CORBA::DefinitionKind def_kind (
+      ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)
         
-        ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS
-      )
       ACE_THROW_SPEC ((
         CORBA::SystemException
       ));
     
     virtual void destroy (
+      ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)
         
-        ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS
-      )
       ACE_THROW_SPEC ((
         CORBA::SystemException
       ));
     
     virtual CORBA::Boolean _is_a (
         const CORBA::Char *type_id
-        ACE_ENV_ARG_DECL_WITH_DEFAULTS
-      );
+      ACE_ENV_ARG_DECL_WITH_DEFAULTS);
+
     
     virtual void *_tao_QueryInterface (ptr_arith_t type);
     
     virtual const char* _interface_repository_id (void) const;
 
   private:
-    _TAO_IRObject_Proxy_Broker *the_TAO_IRObject_Proxy_Broker_;
+  _TAO_CORBA_IRObject_Proxy_Broker *the_TAO_CORBA_IRObject_Proxy_Broker_;
     
   protected:
-    IRObject (int collocated = 0);
+  CORBA_IRObject (int collocated = 0);
     
-    // These methods travese the inheritance tree and set the
+  // This methods travese the inheritance tree and set the
     // parents piece of the given class in the right mode
     virtual void CORBA_IRObject_setup_collocation (int collocated);
     
-    IRObject (
+  CORBA_IRObject (
         TAO_Stub *objref, 
         CORBA::Boolean _tao_collocated = 0,
         TAO_Abstract_ServantBase *servant = 0
       );
     
-    friend class _TAO_IRObject_Remote_Proxy_Impl;
-    friend class _TAO_IRObject_ThruPOA_Proxy_Impl;
-    friend class _TAO_IRObject_Direct_Proxy_Impl;
+  friend class _TAO_CORBA_IRObject_Remote_Proxy_Impl;
+  friend class _TAO_CORBA_IRObject_ThruPOA_Proxy_Impl;
+  friend class _TAO_CORBA_IRObject_Direct_Proxy_Impl;
     
-    virtual ~IRObject (void);
+  virtual ~CORBA_IRObject (void);
   
   private:
-    IRObject (const IRObject &);
-    void operator= (const IRObject &);
+  CORBA_IRObject (const CORBA_IRObject &);
+  void operator= (const CORBA_IRObject &);
   };
   
   // The Proxy Implementations are used by each interface to
@@ -291,12 +234,12 @@
   //                    Base Proxy Impl. Declaration
   //
   
-  class TAO_IFR_Client_Export _TAO_IRObject_Proxy_Impl
+class TAO_IFR_Client_Export _TAO_CORBA_IRObject_Proxy_Impl
     : public virtual TAO_Object_Proxy_Impl
   {
   public:
-    virtual ~_TAO_IRObject_Proxy_Impl (void) { }
-    virtual ::CORBA::DefinitionKind def_kind (
+  virtual ~_TAO_CORBA_IRObject_Proxy_Impl (void) { }
+  virtual CORBA::DefinitionKind def_kind (
         CORBA_Object *_collocated_tao_target_
         ACE_ENV_ARG_DECL
       )
@@ -314,7 +257,7 @@
     
     
   protected:
-    _TAO_IRObject_Proxy_Impl (void);
+  _TAO_CORBA_IRObject_Proxy_Impl (void);
   };
   
   //
@@ -326,15 +269,15 @@
   //                Remote Proxy Impl. Declaration
   //
   
-  class TAO_IFR_Client_Export _TAO_IRObject_Remote_Proxy_Impl
-    : public virtual _TAO_IRObject_Proxy_Impl,
+class TAO_IFR_Client_Export _TAO_CORBA_IRObject_Remote_Proxy_Impl
+  : public virtual _TAO_CORBA_IRObject_Proxy_Impl,
       public virtual TAO_Remote_Object_Proxy_Impl
   {
   public:
-    _TAO_IRObject_Remote_Proxy_Impl (void);
+  _TAO_CORBA_IRObject_Remote_Proxy_Impl (void);
     
-    virtual ~_TAO_IRObject_Remote_Proxy_Impl (void) { }
-    virtual ::CORBA::DefinitionKind def_kind (
+  virtual ~_TAO_CORBA_IRObject_Remote_Proxy_Impl (void) { }
+  virtual CORBA::DefinitionKind def_kind (
         CORBA_Object *_collocated_tao_target_
         ACE_ENV_ARG_DECL
       )
@@ -367,17 +310,17 @@
   //                 Base Proxy Broker Declaration 
   //
   
-    class TAO_IFR_Client_Export _TAO_IRObject_Proxy_Broker
+class TAO_IFR_Client_Export _TAO_CORBA_IRObject_Proxy_Broker
   {
   public:
-    virtual ~_TAO_IRObject_Proxy_Broker (void);
-    virtual _TAO_IRObject_Proxy_Impl &select_proxy (
-        IRObject *object
+  virtual ~_TAO_CORBA_IRObject_Proxy_Broker (void);
+  virtual _TAO_CORBA_IRObject_Proxy_Impl &select_proxy (
+      CORBA_IRObject *object
         ACE_ENV_ARG_DECL_WITH_DEFAULTS
       ) = 0;
     
   protected:
-    _TAO_IRObject_Proxy_Broker (void);
+  _TAO_CORBA_IRObject_Proxy_Broker (void);
     
   };
   
@@ -390,27 +333,27 @@
   //                 Remote Proxy Broker Declaration 
   //
   
-  class TAO_IFR_Client_Export _TAO_IRObject_Remote_Proxy_Broker
-    : public virtual _TAO_IRObject_Proxy_Broker
+class TAO_IFR_Client_Export _TAO_CORBA_IRObject_Remote_Proxy_Broker
+  : public virtual _TAO_CORBA_IRObject_Proxy_Broker
   {
   public: 
-    _TAO_IRObject_Remote_Proxy_Broker (void);
+  _TAO_CORBA_IRObject_Remote_Proxy_Broker (void);
     
-    virtual ~_TAO_IRObject_Remote_Proxy_Broker (void);
+  virtual ~_TAO_CORBA_IRObject_Remote_Proxy_Broker (void);
     
-    virtual _TAO_IRObject_Proxy_Impl &select_proxy (
-        IRObject *object
+  virtual _TAO_CORBA_IRObject_Proxy_Impl &select_proxy (
+      CORBA_IRObject *object
         ACE_ENV_ARG_DECL
       );
     
   private:
-    _TAO_IRObject_Remote_Proxy_Impl remote_proxy_impl_;
+    _TAO_CORBA_IRObject_Remote_Proxy_Impl remote_proxy_impl_;
   
   public:
     // This member function is used to get an handle to the unique instance
     // of the Remote Proxy Broker that is available for a given
     // interface.
-    static _TAO_IRObject_Remote_Proxy_Broker *the_TAO_IRObject_Remote_Proxy_Broker (void);
+    static _TAO_CORBA_IRObject_Remote_Proxy_Broker *the_TAO_CORBA_IRObject_Remote_Proxy_Broker (void);
   };
   
   //
@@ -420,142 +363,48 @@
   
 #endif /* end #if !defined */
   
-  TAO_NAMESPACE_STORAGE_CLASS ::CORBA::TypeCode_ptr _tc_IRObject;
-  
-  typedef char * VersionSpec;
-  typedef CORBA::String_var VersionSpec_var;
-  typedef CORBA::String_out VersionSpec_out;
-  TAO_NAMESPACE_STORAGE_CLASS ::CORBA::TypeCode_ptr _tc_VersionSpec;
-  
-  class Contained;
-  
-#if !defined (_CORBA_CONTAINED___PTR_CH_)
-#define _CORBA_CONTAINED___PTR_CH_
-  
-  typedef Contained *Contained_ptr;
-  
-#endif /* end #if !defined */
-  
-  
-#if !defined (_CORBA_CONTAINED___VAR_CH_)
-#define _CORBA_CONTAINED___VAR_CH_
-  
-  class TAO_IFR_Client_Export Contained_var : public TAO_Base_var
-  {
-  public:
-    Contained_var (void); // default constructor
-    Contained_var (Contained_ptr p) : ptr_ (p) {} 
-    Contained_var (const Contained_var &); // copy constructor
-    ~Contained_var (void); // destructor
-    
-    Contained_var &operator= (Contained_ptr);
-    Contained_var &operator= (const Contained_var &);
-    Contained_ptr operator-> (void) const;
-    
-    operator const Contained_ptr &() const;
-    operator Contained_ptr &();
-    // in, inout, out, _retn 
-    Contained_ptr in (void) const;
-    Contained_ptr &inout (void);
-    Contained_ptr &out (void);
-    Contained_ptr _retn (void);
-    Contained_ptr ptr (void) const;
-    
-    // Hooks used by template sequence and object manager classes
-    // for non-defined forward declared interfaces.
-    static Contained_ptr tao_duplicate (Contained_ptr);
-    static void tao_release (Contained_ptr);
-    static Contained_ptr tao_nil (void);
-    static Contained_ptr tao_narrow (
-        CORBA::Object *
-        ACE_ENV_ARG_DECL_NOT_USED
-      );
-    static CORBA::Object * tao_upcast (void *);
-  
-  private:
-    Contained_ptr ptr_;
-    // Unimplemented - prevents widening assignment.
-    Contained_var (const TAO_Base_var &rhs);
-    Contained_var &operator= (const TAO_Base_var &rhs);
-  };
-
-
-#endif /* end #if !defined */
-  
-  
-#if !defined (_CORBA_CONTAINED___OUT_CH_)
-#define _CORBA_CONTAINED___OUT_CH_
-  
-  class TAO_IFR_Client_Export Contained_out
-  {
-  public:
-    Contained_out (Contained_ptr &);
-    Contained_out (Contained_var &);
-    Contained_out (const Contained_out &);
-    Contained_out &operator= (const Contained_out &);
-    Contained_out &operator= (const Contained_var &);
-    Contained_out &operator= (Contained_ptr);
-    operator Contained_ptr &();
-    Contained_ptr &ptr (void);
-    Contained_ptr operator-> (void);
-  
-  private:
-    Contained_ptr &ptr_;
-  };
-  
-  
-#endif /* end #if !defined */
-  
-  class Repository;
-  
-#if !defined (_CORBA_REPOSITORY___PTR_CH_)
-#define _CORBA_REPOSITORY___PTR_CH_
-  
-  typedef Repository *Repository_ptr;
-  
-#endif /* end #if !defined */
-  
+  class CORBA_Repository;
   
 #if !defined (_CORBA_REPOSITORY___VAR_CH_)
 #define _CORBA_REPOSITORY___VAR_CH_
   
-  class TAO_IFR_Client_Export Repository_var : public TAO_Base_var
+  class TAO_IFR_Client_Export CORBA_Repository_var : public TAO_Base_var
   {
   public:
-    Repository_var (void); // default constructor
-    Repository_var (Repository_ptr p) : ptr_ (p) {} 
-    Repository_var (const Repository_var &); // copy constructor
-    ~Repository_var (void); // destructor
+    CORBA_Repository_var (void); // default constructor
+    CORBA_Repository_var (CORBA_Repository_ptr p) : ptr_ (p) {}
+    CORBA_Repository_var (const CORBA_Repository_var &); // copy constructor
+    ~CORBA_Repository_var (void); // destructor
     
-    Repository_var &operator= (Repository_ptr);
-    Repository_var &operator= (const Repository_var &);
-    Repository_ptr operator-> (void) const;
+    CORBA_Repository_var &operator= (CORBA_Repository_ptr);
+    CORBA_Repository_var &operator= (const CORBA_Repository_var &);
+    CORBA_Repository_ptr operator-> (void) const;
     
-    operator const Repository_ptr &() const;
-    operator Repository_ptr &();
+    operator const CORBA_Repository_ptr &() const;
+    operator CORBA_Repository_ptr &();
     // in, inout, out, _retn 
-    Repository_ptr in (void) const;
-    Repository_ptr &inout (void);
-    Repository_ptr &out (void);
-    Repository_ptr _retn (void);
-    Repository_ptr ptr (void) const;
+    CORBA_Repository_ptr in (void) const;
+    CORBA_Repository_ptr &inout (void);
+    CORBA_Repository_ptr &out (void);
+    CORBA_Repository_ptr _retn (void);
+    CORBA_Repository_ptr ptr (void) const;
     
     // Hooks used by template sequence and object manager classes
     // for non-defined forward declared interfaces.
-    static Repository_ptr tao_duplicate (Repository_ptr);
-    static void tao_release (Repository_ptr);
-    static Repository_ptr tao_nil (void);
-    static Repository_ptr tao_narrow (
+    static CORBA_Repository_ptr tao_duplicate (CORBA_Repository_ptr);
+    static void tao_release (CORBA_Repository_ptr);
+    static CORBA_Repository_ptr tao_nil (void);
+    static CORBA_Repository_ptr tao_narrow (
         CORBA::Object *
         ACE_ENV_ARG_DECL_NOT_USED
       );
     static CORBA::Object * tao_upcast (void *);
   
   private:
-    Repository_ptr ptr_;
+    CORBA_Repository_ptr ptr_;
     // Unimplemented - prevents widening assignment.
-    Repository_var (const TAO_Base_var &rhs);
-    Repository_var &operator= (const TAO_Base_var &rhs);
+    CORBA_Repository_var (const TAO_Base_var &rhs);
+    CORBA_Repository_var &operator= (const TAO_Base_var &rhs);
   };
 
 
@@ -565,32 +414,32 @@
 #if !defined (_CORBA_REPOSITORY___OUT_CH_)
 #define _CORBA_REPOSITORY___OUT_CH_
   
-  class TAO_IFR_Client_Export Repository_out
+  class TAO_IFR_Client_Export CORBA_Repository_out
   {
   public:
-    Repository_out (Repository_ptr &);
-    Repository_out (Repository_var &);
-    Repository_out (const Repository_out &);
-    Repository_out &operator= (const Repository_out &);
-    Repository_out &operator= (const Repository_var &);
-    Repository_out &operator= (Repository_ptr);
-    operator Repository_ptr &();
-    Repository_ptr &ptr (void);
-    Repository_ptr operator-> (void);
+    CORBA_Repository_out (CORBA_Repository_ptr &);
+    CORBA_Repository_out (CORBA_Repository_var &);
+    CORBA_Repository_out (const CORBA_Repository_out &);
+    CORBA_Repository_out &operator= (const CORBA_Repository_out &);
+    CORBA_Repository_out &operator= (const CORBA_Repository_var &);
+    CORBA_Repository_out &operator= (CORBA_Repository_ptr);
+    operator CORBA_Repository_ptr &();
+    CORBA_Repository_ptr &ptr (void);
+    CORBA_Repository_ptr operator-> (void);
   
   private:
-    Repository_ptr &ptr_;
+    CORBA_Repository_ptr &ptr_;
   };
   
   
 #endif /* end #if !defined */
   
-  class Container;
+  class CORBA_Container;
   
 #if !defined (_CORBA_CONTAINER___PTR_CH_)
 #define _CORBA_CONTAINER___PTR_CH_
   
-  typedef Container *Container_ptr;
+  typedef CORBA_Container *CORBA_Container_ptr;
   
 #endif /* end #if !defined */
   
@@ -598,43 +447,43 @@
 #if !defined (_CORBA_CONTAINER___VAR_CH_)
 #define _CORBA_CONTAINER___VAR_CH_
   
-  class TAO_IFR_Client_Export Container_var : public TAO_Base_var
+  class TAO_IFR_Client_Export CORBA_Container_var : public TAO_Base_var
   {
   public:
-    Container_var (void); // default constructor
-    Container_var (Container_ptr p) : ptr_ (p) {} 
-    Container_var (const Container_var &); // copy constructor
-    ~Container_var (void); // destructor
+    CORBA_Container_var (void); // default constructor
+    CORBA_Container_var (CORBA_Container_ptr p) : ptr_ (p) {}
+    CORBA_Container_var (const CORBA_Container_var &); // copy constructor
+    ~CORBA_Container_var (void); // destructor
     
-    Container_var &operator= (Container_ptr);
-    Container_var &operator= (const Container_var &);
-    Container_ptr operator-> (void) const;
+    CORBA_Container_var &operator= (CORBA_Container_ptr);
+    CORBA_Container_var &operator= (const CORBA_Container_var &);
+    CORBA_Container_ptr operator-> (void) const;
     
-    operator const Container_ptr &() const;
-    operator Container_ptr &();
+    operator const CORBA_Container_ptr &() const;
+    operator CORBA_Container_ptr &();
     // in, inout, out, _retn 
-    Container_ptr in (void) const;
-    Container_ptr &inout (void);
-    Container_ptr &out (void);
-    Container_ptr _retn (void);
-    Container_ptr ptr (void) const;
+    CORBA_Container_ptr in (void) const;
+    CORBA_Container_ptr &inout (void);
+    CORBA_Container_ptr &out (void);
+    CORBA_Container_ptr _retn (void);
+    CORBA_Container_ptr ptr (void) const;
     
     // Hooks used by template sequence and object manager classes
     // for non-defined forward declared interfaces.
-    static Container_ptr tao_duplicate (Container_ptr);
-    static void tao_release (Container_ptr);
-    static Container_ptr tao_nil (void);
-    static Container_ptr tao_narrow (
+    static CORBA_Container_ptr tao_duplicate (CORBA_Container_ptr);
+    static void tao_release (CORBA_Container_ptr);
+    static CORBA_Container_ptr tao_nil (void);
+    static CORBA_Container_ptr tao_narrow (
         CORBA::Object *
         ACE_ENV_ARG_DECL_NOT_USED
       );
     static CORBA::Object * tao_upcast (void *);
   
   private:
-    Container_ptr ptr_;
+    CORBA_Container_ptr ptr_;
     // Unimplemented - prevents widening assignment.
-    Container_var (const TAO_Base_var &rhs);
-    Container_var &operator= (const TAO_Base_var &rhs);
+    CORBA_Container_var (const TAO_Base_var &rhs);
+    CORBA_Container_var &operator= (const TAO_Base_var &rhs);
   };
 
 
@@ -644,21 +493,21 @@
 #if !defined (_CORBA_CONTAINER___OUT_CH_)
 #define _CORBA_CONTAINER___OUT_CH_
   
-  class TAO_IFR_Client_Export Container_out
+  class TAO_IFR_Client_Export CORBA_Container_out
   {
   public:
-    Container_out (Container_ptr &);
-    Container_out (Container_var &);
-    Container_out (const Container_out &);
-    Container_out &operator= (const Container_out &);
-    Container_out &operator= (const Container_var &);
-    Container_out &operator= (Container_ptr);
-    operator Container_ptr &();
-    Container_ptr &ptr (void);
-    Container_ptr operator-> (void);
+    CORBA_Container_out (CORBA_Container_ptr &);
+    CORBA_Container_out (CORBA_Container_var &);
+    CORBA_Container_out (const CORBA_Container_out &);
+    CORBA_Container_out &operator= (const CORBA_Container_out &);
+    CORBA_Container_out &operator= (const CORBA_Container_var &);
+    CORBA_Container_out &operator= (CORBA_Container_ptr);
+    operator CORBA_Container_ptr &();
+    CORBA_Container_ptr &ptr (void);
+    CORBA_Container_ptr operator-> (void);
   
   private:
-    Container_ptr &ptr_;
+    CORBA_Container_ptr &ptr_;
   };
   
   
@@ -668,8 +517,8 @@
 #if !defined (_CORBA_CONTAINED___PTR_CH_)
 #define _CORBA_CONTAINED___PTR_CH_
   
-  class Contained;
-  typedef Contained *Contained_ptr;
+  class CORBA_Contained;
+  typedef CORBA_Contained *CORBA_Contained_ptr;
   
 #endif /* end #if !defined */
   
@@ -677,43 +526,43 @@
 #if !defined (_CORBA_CONTAINED___VAR_CH_)
 #define _CORBA_CONTAINED___VAR_CH_
   
-  class TAO_IFR_Client_Export Contained_var : public TAO_Base_var
+  class TAO_IFR_Client_Export CORBA_Contained_var : public TAO_Base_var
   {
   public:
-    Contained_var (void); // default constructor
-    Contained_var (Contained_ptr p) : ptr_ (p) {} 
-    Contained_var (const Contained_var &); // copy constructor
-    ~Contained_var (void); // destructor
+    CORBA_Contained_var (void); // default constructor
+    CORBA_Contained_var (CORBA_Contained_ptr p) : ptr_ (p) {}
+    CORBA_Contained_var (const CORBA_Contained_var &); // copy constructor
+    ~CORBA_Contained_var (void); // destructor
     
-    Contained_var &operator= (Contained_ptr);
-    Contained_var &operator= (const Contained_var &);
-    Contained_ptr operator-> (void) const;
+    CORBA_Contained_var &operator= (CORBA_Contained_ptr);
+    CORBA_Contained_var &operator= (const CORBA_Contained_var &);
+    CORBA_Contained_ptr operator-> (void) const;
     
-    operator const Contained_ptr &() const;
-    operator Contained_ptr &();
+    operator const CORBA_Contained_ptr &() const;
+    operator CORBA_Contained_ptr &();
     // in, inout, out, _retn 
-    Contained_ptr in (void) const;
-    Contained_ptr &inout (void);
-    Contained_ptr &out (void);
-    Contained_ptr _retn (void);
-    Contained_ptr ptr (void) const;
+    CORBA_Contained_ptr in (void) const;
+    CORBA_Contained_ptr &inout (void);
+    CORBA_Contained_ptr &out (void);
+    CORBA_Contained_ptr _retn (void);
+    CORBA_Contained_ptr ptr (void) const;
     
     // Hooks used by template sequence and object manager classes
     // for non-defined forward declared interfaces.
-    static Contained_ptr tao_duplicate (Contained_ptr);
-    static void tao_release (Contained_ptr);
-    static Contained_ptr tao_nil (void);
-    static Contained_ptr tao_narrow (
+    static CORBA_Contained_ptr tao_duplicate (CORBA_Contained_ptr);
+    static void tao_release (CORBA_Contained_ptr);
+    static CORBA_Contained_ptr tao_nil (void);
+    static CORBA_Contained_ptr tao_narrow (
         CORBA::Object *
         ACE_ENV_ARG_DECL_NOT_USED
       );
     static CORBA::Object * tao_upcast (void *);
   
   private:
-    Contained_ptr ptr_;
+    CORBA_Contained_ptr ptr_;
     // Unimplemented - prevents widening assignment.
-    Contained_var (const TAO_Base_var &rhs);
-    Contained_var &operator= (const TAO_Base_var &rhs);
+    CORBA_Contained_var (const TAO_Base_var &rhs);
+    CORBA_Contained_var &operator= (const TAO_Base_var &rhs);
   };
 
 
@@ -723,141 +572,129 @@
 #if !defined (_CORBA_CONTAINED___OUT_CH_)
 #define _CORBA_CONTAINED___OUT_CH_
   
-  class TAO_IFR_Client_Export Contained_out
+  class TAO_IFR_Client_Export CORBA_Contained_out
   {
   public:
-    Contained_out (Contained_ptr &);
-    Contained_out (Contained_var &);
-    Contained_out (const Contained_out &);
-    Contained_out &operator= (const Contained_out &);
-    Contained_out &operator= (const Contained_var &);
-    Contained_out &operator= (Contained_ptr);
-    operator Contained_ptr &();
-    Contained_ptr &ptr (void);
-    Contained_ptr operator-> (void);
+    CORBA_Contained_out (CORBA_Contained_ptr &);
+    CORBA_Contained_out (CORBA_Contained_var &);
+    CORBA_Contained_out (const CORBA_Contained_out &);
+    CORBA_Contained_out &operator= (const CORBA_Contained_out &);
+    CORBA_Contained_out &operator= (const CORBA_Contained_var &);
+    CORBA_Contained_out &operator= (CORBA_Contained_ptr);
+    operator CORBA_Contained_ptr &();
+    CORBA_Contained_ptr &ptr (void);
+    CORBA_Contained_ptr operator-> (void);
   
   private:
-    Contained_ptr &ptr_;
+    CORBA_Contained_ptr &ptr_;
   };
   
   
 #endif /* end #if !defined */
   
-  // *************************************************************
-  // CORBA::Contained
-  // TAO_IDL - Generated from
-  // be/be_visitor_interface/interface_ch.cpp:106
-  // *************************************************************
-  
   
 #if !defined (_CORBA_CONTAINED_CH_)
 #define _CORBA_CONTAINED_CH_
   
-  // Forward Classes Declaration.
-  class _TAO_Contained_Proxy_Impl;
-  class _TAO_Contained_Remote_Proxy_Impl;
-  class _TAO_Contained_Proxy_Broker;
-  class _TAO_Contained_Remote_Proxy_Broker;
+  // Forward Classes Declaration
+  class _TAO_CORBA_Contained_Proxy_Impl;
+  class _TAO_CORBA_Contained_Remote_Proxy_Impl;
+  class _TAO_CORBA_Contained_Proxy_Broker;
+  class _TAO_CORBA_Contained_Remote_Proxy_Broker;
   
-  class TAO_IFR_Client_Export Contained
-    : public virtual CORBA::IRObject
+  class TAO_IFR_Client_Export CORBA_Contained
+    : public virtual CORBA_IRObject
   {
   public:
   #if !defined(__GNUC__) || !defined (ACE_HAS_GNUG_PRE_2_8)
-    typedef Contained_ptr _ptr_type;
-    typedef Contained_var _var_type;
+    typedef CORBA_Contained_ptr _ptr_type;
+    typedef CORBA_Contained_var _var_type;
   #endif /* ! __GNUC__ || g++ >= 2.8 */
 
     static int _tao_class_id;
     
-    // The static operations.
-    static Contained_ptr _duplicate (Contained_ptr obj);
+    // the static operations
+    static CORBA_Contained_ptr _duplicate (CORBA_Contained_ptr obj);
     
-    static Contained_ptr _narrow (
+    static CORBA_Contained_ptr _narrow (
         CORBA::Object_ptr obj
-        ACE_ENV_ARG_DECL_WITH_DEFAULTS
-      );
+        ACE_ENV_ARG_DECL_WITH_DEFAULTS);
     
-    static Contained_ptr _unchecked_narrow (
+
+    static CORBA_Contained_ptr _unchecked_narrow (
         CORBA::Object_ptr obj
-        ACE_ENV_ARG_DECL_WITH_DEFAULTS
-      );
+        ACE_ENV_ARG_DECL_WITH_DEFAULTS);
     
-    static Contained_ptr _nil (void)
+
+    static CORBA_Contained_ptr _nil (void)
       {
-        return (Contained_ptr)0;
+        return (CORBA_Contained_ptr)0;
       }
     
     static void _tao_any_destructor (void*);
     
     virtual char * id (
+        ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)
         
-        ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS
-      )
       ACE_THROW_SPEC ((
         CORBA::SystemException
       ));
     
     virtual void id (
         const char * id
-        ACE_ENV_ARG_DECL_WITH_DEFAULTS
-      )
+        ACE_ENV_ARG_DECL_WITH_DEFAULTS)
+
       ACE_THROW_SPEC ((
         CORBA::SystemException
       ));
     
     virtual char * name (
+        ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)
         
-        ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS
-      )
       ACE_THROW_SPEC ((
         CORBA::SystemException
       ));
     
     virtual void name (
         const char * name
-        ACE_ENV_ARG_DECL_WITH_DEFAULTS
-      )
+        ACE_ENV_ARG_DECL_WITH_DEFAULTS)
+
       ACE_THROW_SPEC ((
         CORBA::SystemException
       ));
     
     virtual char * version (
+        ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)
         
-        ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS
-      )
       ACE_THROW_SPEC ((
         CORBA::SystemException
       ));
     
     virtual void version (
         const char * version
-        ACE_ENV_ARG_DECL_WITH_DEFAULTS
-      )
+        ACE_ENV_ARG_DECL_WITH_DEFAULTS)
+
       ACE_THROW_SPEC ((
         CORBA::SystemException
       ));
     
-    virtual ::CORBA::Container_ptr defined_in (
+    virtual CORBA_Container_ptr defined_in (
+        ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)
         
-        ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS
-      )
       ACE_THROW_SPEC ((
         CORBA::SystemException
       ));
     
     virtual char * absolute_name (
+        ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)
         
-        ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS
-      )
       ACE_THROW_SPEC ((
         CORBA::SystemException
       ));
     
-    virtual ::CORBA::Repository_ptr containing_repository (
+    virtual CORBA_Repository_ptr containing_repository (
+        ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)
         
-        ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS
-      )
       ACE_THROW_SPEC ((
         CORBA::SystemException
       ));
@@ -874,7 +711,7 @@
 
       static void _tao_any_destructor (void*);
       
-      ACE_NESTED_CLASS (CORBA, DefinitionKind) kind;
+      CORBA::DefinitionKind kind;
       CORBA::Any value;
       
     };
@@ -927,60 +764,59 @@
       void operator= (const Description_var &);
     };
     
-    static ::CORBA::TypeCode_ptr _tc_Description;
+    static CORBA::TypeCode_ptr _tc_Description;
     
-    virtual ::CORBA::Contained::Description * describe (
+    virtual CORBA_Contained::Description * describe (
+        ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)
         
-        ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS
-      )
       ACE_THROW_SPEC ((
         CORBA::SystemException
       ));
     
     virtual void move (
-        CORBA::Container_ptr new_container,
+        CORBA_Container_ptr new_container,
         const char * new_name,
         const char * new_version
-        ACE_ENV_ARG_DECL_WITH_DEFAULTS
-      )
+        ACE_ENV_ARG_DECL_WITH_DEFAULTS)
+
       ACE_THROW_SPEC ((
         CORBA::SystemException
       ));
     
     virtual CORBA::Boolean _is_a (
         const CORBA::Char *type_id
-        ACE_ENV_ARG_DECL_WITH_DEFAULTS
-      );
+        ACE_ENV_ARG_DECL_WITH_DEFAULTS);
+
     
     virtual void *_tao_QueryInterface (ptr_arith_t type);
     
     virtual const char* _interface_repository_id (void) const;
 
   private:
-    _TAO_Contained_Proxy_Broker *the_TAO_Contained_Proxy_Broker_;
+    _TAO_CORBA_Contained_Proxy_Broker *the_TAO_CORBA_Contained_Proxy_Broker_;
     
   protected:
-    Contained (int collocated = 0);
+    CORBA_Contained (int collocated = 0);
     
-    // These methods travese the inheritance tree and set the
+    // This methods travese the inheritance tree and set the
     // parents piece of the given class in the right mode
     virtual void CORBA_Contained_setup_collocation (int collocated);
     
-    Contained (
+    CORBA_Contained (
         TAO_Stub *objref, 
         CORBA::Boolean _tao_collocated = 0,
         TAO_Abstract_ServantBase *servant = 0
       );
     
-    friend class _TAO_Contained_Remote_Proxy_Impl;
-    friend class _TAO_Contained_ThruPOA_Proxy_Impl;
-    friend class _TAO_Contained_Direct_Proxy_Impl;
+    friend class _TAO_CORBA_Contained_Remote_Proxy_Impl;
+    friend class _TAO_CORBA_Contained_ThruPOA_Proxy_Impl;
+    friend class _TAO_CORBA_Contained_Direct_Proxy_Impl;
     
-    virtual ~Contained (void);
+    virtual ~CORBA_Contained (void);
   
   private:
-    Contained (const Contained &);
-    void operator= (const Contained &);
+    CORBA_Contained (const CORBA_Contained &);
+    void operator= (const CORBA_Contained &);
   };
   
   // The Proxy Implementations are used by each interface to
@@ -992,11 +828,11 @@
   //                    Base Proxy Impl. Declaration
   //
   
-  class TAO_IFR_Client_Export _TAO_Contained_Proxy_Impl
-    : public virtual CORBA::_TAO_IRObject_Proxy_Impl
+  class TAO_IFR_Client_Export _TAO_CORBA_Contained_Proxy_Impl
+    : public virtual _TAO_CORBA_IRObject_Proxy_Impl
   {
   public:
-    virtual ~_TAO_Contained_Proxy_Impl (void) { }
+    virtual ~_TAO_CORBA_Contained_Proxy_Impl (void) { }
     virtual char * id (
         CORBA_Object *_collocated_tao_target_
         ACE_ENV_ARG_DECL
@@ -1048,7 +884,7 @@
         CORBA::SystemException
       )) = 0;
     
-    virtual ::CORBA::Container_ptr defined_in (
+    virtual CORBA_Container_ptr defined_in (
         CORBA_Object *_collocated_tao_target_
         ACE_ENV_ARG_DECL
       )
@@ -1064,7 +900,7 @@
         CORBA::SystemException
       )) = 0;
     
-    virtual ::CORBA::Repository_ptr containing_repository (
+    virtual CORBA_Repository_ptr containing_repository (
         CORBA_Object *_collocated_tao_target_
         ACE_ENV_ARG_DECL
       )
@@ -1072,7 +908,7 @@
         CORBA::SystemException
       )) = 0;
     
-    virtual ::CORBA::Contained::Description * describe (
+    virtual CORBA_Contained::Description * describe (
         CORBA_Object *_collocated_tao_target_
         ACE_ENV_ARG_DECL
       )
@@ -1082,7 +918,7 @@
     
     virtual void move (
         CORBA_Object *_collocated_tao_target_,
-        CORBA::Container_ptr new_container,
+        CORBA_Container_ptr new_container,
         const char * new_name,
         const char * new_version
         ACE_ENV_ARG_DECL
@@ -1093,7 +929,7 @@
     
     
   protected:
-    _TAO_Contained_Proxy_Impl (void);
+    _TAO_CORBA_Contained_Proxy_Impl (void);
   };
   
   //
@@ -1105,15 +941,15 @@
   //                Remote Proxy Impl. Declaration
   //
   
-  class TAO_IFR_Client_Export _TAO_Contained_Remote_Proxy_Impl
-    : public virtual _TAO_Contained_Proxy_Impl,
+  class TAO_IFR_Client_Export _TAO_CORBA_Contained_Remote_Proxy_Impl
+    : public virtual _TAO_CORBA_Contained_Proxy_Impl,
       public virtual TAO_Remote_Object_Proxy_Impl,
-      public virtual CORBA::_TAO_IRObject_Remote_Proxy_Impl
+      public virtual _TAO_CORBA_IRObject_Remote_Proxy_Impl
   {
   public:
-    _TAO_Contained_Remote_Proxy_Impl (void);
+    _TAO_CORBA_Contained_Remote_Proxy_Impl (void);
     
-    virtual ~_TAO_Contained_Remote_Proxy_Impl (void) { }
+    virtual ~_TAO_CORBA_Contained_Remote_Proxy_Impl (void) { }
     virtual char * id (
         CORBA_Object *_collocated_tao_target_
         ACE_ENV_ARG_DECL
@@ -1165,7 +1001,7 @@
         CORBA::SystemException
       ));
     
-    virtual ::CORBA::Container_ptr defined_in (
+    virtual CORBA_Container_ptr defined_in (
         CORBA_Object *_collocated_tao_target_
         ACE_ENV_ARG_DECL
       )
@@ -1181,7 +1017,7 @@
         CORBA::SystemException
       ));
     
-    virtual ::CORBA::Repository_ptr containing_repository (
+    virtual CORBA_Repository_ptr containing_repository (
         CORBA_Object *_collocated_tao_target_
         ACE_ENV_ARG_DECL
       )
@@ -1189,7 +1025,7 @@
         CORBA::SystemException
       ));
     
-    virtual ::CORBA::Contained::Description * describe (
+    virtual CORBA_Contained::Description * describe (
         CORBA_Object *_collocated_tao_target_
         ACE_ENV_ARG_DECL
       )
@@ -1199,7 +1035,7 @@
     
     virtual void move (
         CORBA_Object *_collocated_tao_target_,
-        CORBA::Container_ptr new_container,
+        CORBA_Container_ptr new_container,
         const char * new_name,
         const char * new_version
         ACE_ENV_ARG_DECL
@@ -1225,17 +1061,17 @@
   //                 Base Proxy Broker Declaration 
   //
   
-    class TAO_IFR_Client_Export _TAO_Contained_Proxy_Broker
+    class TAO_IFR_Client_Export _TAO_CORBA_Contained_Proxy_Broker
   {
   public:
-    virtual ~_TAO_Contained_Proxy_Broker (void);
-    virtual _TAO_Contained_Proxy_Impl &select_proxy (
-        Contained *object
+    virtual ~_TAO_CORBA_Contained_Proxy_Broker (void);
+    virtual _TAO_CORBA_Contained_Proxy_Impl &select_proxy (
+        CORBA_Contained *object
         ACE_ENV_ARG_DECL_WITH_DEFAULTS
       ) = 0;
     
   protected:
-    _TAO_Contained_Proxy_Broker (void);
+    _TAO_CORBA_Contained_Proxy_Broker (void);
     
   };
   
@@ -1248,27 +1084,27 @@
   //                 Remote Proxy Broker Declaration 
   //
   
-  class TAO_IFR_Client_Export _TAO_Contained_Remote_Proxy_Broker
-    : public virtual _TAO_Contained_Proxy_Broker
+  class TAO_IFR_Client_Export _TAO_CORBA_Contained_Remote_Proxy_Broker
+    : public virtual _TAO_CORBA_Contained_Proxy_Broker
   {
   public: 
-    _TAO_Contained_Remote_Proxy_Broker (void);
+    _TAO_CORBA_Contained_Remote_Proxy_Broker (void);
     
-    virtual ~_TAO_Contained_Remote_Proxy_Broker (void);
+    virtual ~_TAO_CORBA_Contained_Remote_Proxy_Broker (void);
     
-    virtual _TAO_Contained_Proxy_Impl &select_proxy (
-        Contained *object
+    virtual _TAO_CORBA_Contained_Proxy_Impl &select_proxy (
+        CORBA_Contained *object
         ACE_ENV_ARG_DECL
       );
     
   private:
-    _TAO_Contained_Remote_Proxy_Impl remote_proxy_impl_;
+      _TAO_CORBA_Contained_Remote_Proxy_Impl remote_proxy_impl_;
   
   public:
     // This member function is used to get an handle to the unique instance
     // of the Remote Proxy Broker that is available for a given
     // interface.
-    static _TAO_Contained_Remote_Proxy_Broker *the_TAO_Contained_Remote_Proxy_Broker (void);
+      static _TAO_CORBA_Contained_Remote_Proxy_Broker *the_TAO_CORBA_Contained_Remote_Proxy_Broker (void);
   };
   
   //
@@ -1278,8 +1114,6 @@
   
 #endif /* end #if !defined */
   
-  TAO_NAMESPACE_STORAGE_CLASS ::CORBA::TypeCode_ptr _tc_Contained;
-  
   
 #if !defined (TAO_USE_SEQUENCE_TEMPLATES)
   
@@ -1296,7 +1130,7 @@
     _TAO_Unbounded_Object_Sequence_CORBA_ContainedSeq (
         CORBA::ULong maximum,
         CORBA::ULong length,
-        Contained* *value,
+          CORBA_Contained* *value,
         CORBA::Boolean release = 0
       );
     _TAO_Unbounded_Object_Sequence_CORBA_ContainedSeq (
@@ -1308,17 +1142,17 @@
     virtual ~_TAO_Unbounded_Object_Sequence_CORBA_ContainedSeq (void);
     
     // = Accessors.
-    TAO_Object_Manager<CORBA::Contained,CORBA::Contained_var> operator[] (CORBA::ULong index) const;
+      TAO_Object_Manager<CORBA_Contained,CORBA_Contained_var> operator[] (CORBA::ULong index) const;
     
     // = Static operations.
-    static Contained **allocbuf (CORBA::ULong nelems);
-    static void freebuf (Contained **buffer);
+      static CORBA_Contained **allocbuf (CORBA::ULong nelems);
+      static void freebuf (CORBA_Contained **buffer);
     
     // Implement the TAO_Base_Sequence methods (see Sequence.h)
     virtual void _allocate_buffer (CORBA::ULong length);
     virtual void _deallocate_buffer (void);
-    Contained* *get_buffer (CORBA::Boolean orphan = 0);
-    const Contained* *get_buffer (void) const;
+      CORBA_Contained* *get_buffer (CORBA::Boolean orphan = 0);
+      const CORBA_Contained* *get_buffer (void) const;
     virtual void _shrink_buffer (
         CORBA::ULong nl,
         CORBA::ULong ol
@@ -1327,8 +1161,8 @@
     virtual void _downcast (
         void* target,
         CORBA_Object *src
-        ACE_ENV_ARG_DECL_WITH_DEFAULTS
-      );
+          ACE_ENV_ARG_DECL_WITH_DEFAULTS);
+
     virtual CORBA_Object* _upcast (void *src) const;
   };
   
@@ -1340,35 +1174,35 @@
 #if !defined (_CORBA_CONTAINEDSEQ_CH_)
 #define _CORBA_CONTAINEDSEQ_CH_
   
-  class ContainedSeq;
-  class ContainedSeq_var;
+    class CORBA_ContainedSeq;
+    class CORBA_ContainedSeq_var;
   
   // *************************************************************
-  // ContainedSeq
+    // CORBA_ContainedSeq
   // *************************************************************
   
-  class TAO_IFR_Client_Export ContainedSeq : public 
+    class TAO_IFR_Client_Export CORBA_ContainedSeq : public
 #if !defined (TAO_USE_SEQUENCE_TEMPLATES)
   _TAO_Unbounded_Object_Sequence_CORBA_ContainedSeq
 #else /* TAO_USE_SEQUENCE_TEMPLATES */
-  TAO_Unbounded_Object_Sequence<Contained,Contained_var>
+    TAO_Unbounded_Object_Sequence<CORBA_Contained,CORBA_Contained_var>
 #endif /* !TAO_USE_SEQUENCE_TEMPLATES */ 
   {
   public:
-    ContainedSeq (void); // default ctor
-    ContainedSeq (CORBA::ULong max); // uses max size
-    ContainedSeq (
+      CORBA_ContainedSeq (void); // default ctor
+      CORBA_ContainedSeq (CORBA::ULong max); // uses max size
+      CORBA_ContainedSeq (
         CORBA::ULong max, 
         CORBA::ULong length, 
-        Contained_ptr *buffer, 
+          CORBA_Contained_ptr *buffer,
         CORBA::Boolean release = 0
       );
-    ContainedSeq (const ContainedSeq &); // copy ctor
-    ~ContainedSeq (void);
+      CORBA_ContainedSeq (const CORBA_ContainedSeq &); // copy ctor
+      ~CORBA_ContainedSeq (void);
     static void _tao_any_destructor (void*);
     
 #if !defined(__GNUC__) || !defined (ACE_HAS_GNUG_PRE_2_8)
-    typedef ContainedSeq_var _var_type;
+      typedef CORBA_ContainedSeq_var _var_type;
 #endif /* ! __GNUC__ || g++ >= 2.8 */
     
     
@@ -1381,38 +1215,38 @@
 #define _CORBA_CONTAINEDSEQ___VAR_CH_
   
   // *************************************************************
-  // class CORBA::ContainedSeq_var
+    // class CORBA_ContainedSeq_var
   // *************************************************************
   
-  class TAO_IFR_Client_Export ContainedSeq_var
+    class TAO_IFR_Client_Export CORBA_ContainedSeq_var
   {
   public:
-    ContainedSeq_var (void);
-    ContainedSeq_var (ContainedSeq *);
-    ContainedSeq_var (const ContainedSeq_var &);
-    ~ContainedSeq_var (void);
+      CORBA_ContainedSeq_var (void);
+      CORBA_ContainedSeq_var (CORBA_ContainedSeq *);
+      CORBA_ContainedSeq_var (const CORBA_ContainedSeq_var &);
+      ~CORBA_ContainedSeq_var (void);
     
-    ContainedSeq_var &operator= (ContainedSeq *);
-    ContainedSeq_var &operator= (const ContainedSeq_var &);
-    ContainedSeq *operator-> (void);
-    const ContainedSeq *operator-> (void) const;
+      CORBA_ContainedSeq_var &operator= (CORBA_ContainedSeq *);
+      CORBA_ContainedSeq_var &operator= (const CORBA_ContainedSeq_var &);
+      CORBA_ContainedSeq *operator-> (void);
+      const CORBA_ContainedSeq *operator-> (void) const;
     
-    operator const ContainedSeq &() const;
-    operator ContainedSeq &();
-    operator ContainedSeq &() const;
-    operator ContainedSeq *&(); // variable-size base types only
+      operator const CORBA_ContainedSeq &() const;
+      operator CORBA_ContainedSeq &();
+      operator CORBA_ContainedSeq &() const;
+      operator CORBA_ContainedSeq *&(); // variable-size base types only
     
-    TAO_Object_Manager<Contained, Contained_var> operator[] (CORBA::ULong index);
+      TAO_Object_Manager<CORBA_Contained, CORBA_Contained_var> operator[] (CORBA::ULong index);
     
     // in, inout, out, _retn 
-    const ContainedSeq &in (void) const;
-    ContainedSeq &inout (void);
-    ContainedSeq *&out (void);
-    ContainedSeq *_retn (void);
-    ContainedSeq *ptr (void) const;
+      const CORBA_ContainedSeq &in (void) const;
+      CORBA_ContainedSeq &inout (void);
+      CORBA_ContainedSeq *&out (void);
+      CORBA_ContainedSeq *_retn (void);
+      CORBA_ContainedSeq *ptr (void) const;
   
   private:
-    ContainedSeq *ptr_;
+      CORBA_ContainedSeq *ptr_;
   };
   
   
@@ -1422,36 +1256,34 @@
 #if !defined (_CORBA_CONTAINEDSEQ___OUT_CH_)
 #define _CORBA_CONTAINEDSEQ___OUT_CH_
   
-  class TAO_IFR_Client_Export ContainedSeq_out
+    class TAO_IFR_Client_Export CORBA_ContainedSeq_out
   {
   public:
-    ContainedSeq_out (ContainedSeq *&);
-    ContainedSeq_out (ContainedSeq_var &);
-    ContainedSeq_out (const ContainedSeq_out &);
-    ContainedSeq_out &operator= (const ContainedSeq_out &);
-    ContainedSeq_out &operator= (ContainedSeq *);
-    operator ContainedSeq *&();
-    ContainedSeq *&ptr (void);
-    ContainedSeq *operator-> (void);
-    TAO_Object_Manager<Contained, Contained_var> operator[] (CORBA::ULong index);
+      CORBA_ContainedSeq_out (CORBA_ContainedSeq *&);
+      CORBA_ContainedSeq_out (CORBA_ContainedSeq_var &);
+      CORBA_ContainedSeq_out (const CORBA_ContainedSeq_out &);
+      CORBA_ContainedSeq_out &operator= (const CORBA_ContainedSeq_out &);
+      CORBA_ContainedSeq_out &operator= (CORBA_ContainedSeq *);
+      operator CORBA_ContainedSeq *&();
+      CORBA_ContainedSeq *&ptr (void);
+      CORBA_ContainedSeq *operator-> (void);
+      TAO_Object_Manager<CORBA_Contained, CORBA_Contained_var> operator[] (CORBA::ULong index);
   
   private:
-    ContainedSeq *&ptr_;
+      CORBA_ContainedSeq *&ptr_;
     // Assignment from T_var not allowed.
-    void operator= (const ContainedSeq_var &);
+      void operator= (const CORBA_ContainedSeq_var &);
   };
   
   
 #endif /* end #if !defined */
   
-  TAO_NAMESPACE_STORAGE_CLASS ::CORBA::TypeCode_ptr _tc_ContainedSeq;
-  
-  class ModuleDef;
+    class CORBA_ModuleDef;
   
 #if !defined (_CORBA_MODULEDEF___PTR_CH_)
 #define _CORBA_MODULEDEF___PTR_CH_
   
-  typedef ModuleDef *ModuleDef_ptr;
+    typedef CORBA_ModuleDef *CORBA_ModuleDef_ptr;
   
 #endif /* end #if !defined */
   
@@ -1459,43 +1291,43 @@
 #if !defined (_CORBA_MODULEDEF___VAR_CH_)
 #define _CORBA_MODULEDEF___VAR_CH_
   
-  class TAO_IFR_Client_Export ModuleDef_var : public TAO_Base_var
+    class TAO_IFR_Client_Export CORBA_ModuleDef_var : public TAO_Base_var
   {
   public:
-    ModuleDef_var (void); // default constructor
-    ModuleDef_var (ModuleDef_ptr p) : ptr_ (p) {} 
-    ModuleDef_var (const ModuleDef_var &); // copy constructor
-    ~ModuleDef_var (void); // destructor
+      CORBA_ModuleDef_var (void); // default constructor
+      CORBA_ModuleDef_var (CORBA_ModuleDef_ptr p) : ptr_ (p) {}
+      CORBA_ModuleDef_var (const CORBA_ModuleDef_var &); // copy constructor
+      ~CORBA_ModuleDef_var (void); // destructor
     
-    ModuleDef_var &operator= (ModuleDef_ptr);
-    ModuleDef_var &operator= (const ModuleDef_var &);
-    ModuleDef_ptr operator-> (void) const;
+      CORBA_ModuleDef_var &operator= (CORBA_ModuleDef_ptr);
+      CORBA_ModuleDef_var &operator= (const CORBA_ModuleDef_var &);
+      CORBA_ModuleDef_ptr operator-> (void) const;
     
-    operator const ModuleDef_ptr &() const;
-    operator ModuleDef_ptr &();
+      operator const CORBA_ModuleDef_ptr &() const;
+      operator CORBA_ModuleDef_ptr &();
     // in, inout, out, _retn 
-    ModuleDef_ptr in (void) const;
-    ModuleDef_ptr &inout (void);
-    ModuleDef_ptr &out (void);
-    ModuleDef_ptr _retn (void);
-    ModuleDef_ptr ptr (void) const;
+      CORBA_ModuleDef_ptr in (void) const;
+      CORBA_ModuleDef_ptr &inout (void);
+      CORBA_ModuleDef_ptr &out (void);
+      CORBA_ModuleDef_ptr _retn (void);
+      CORBA_ModuleDef_ptr ptr (void) const;
     
     // Hooks used by template sequence and object manager classes
     // for non-defined forward declared interfaces.
-    static ModuleDef_ptr tao_duplicate (ModuleDef_ptr);
-    static void tao_release (ModuleDef_ptr);
-    static ModuleDef_ptr tao_nil (void);
-    static ModuleDef_ptr tao_narrow (
+      static CORBA_ModuleDef_ptr tao_duplicate (CORBA_ModuleDef_ptr);
+      static void tao_release (CORBA_ModuleDef_ptr);
+      static CORBA_ModuleDef_ptr tao_nil (void);
+      static CORBA_ModuleDef_ptr tao_narrow (
         CORBA::Object *
         ACE_ENV_ARG_DECL_NOT_USED
       );
     static CORBA::Object * tao_upcast (void *);
   
   private:
-    ModuleDef_ptr ptr_;
+      CORBA_ModuleDef_ptr ptr_;
     // Unimplemented - prevents widening assignment.
-    ModuleDef_var (const TAO_Base_var &rhs);
-    ModuleDef_var &operator= (const TAO_Base_var &rhs);
+      CORBA_ModuleDef_var (const TAO_Base_var &rhs);
+      CORBA_ModuleDef_var &operator= (const TAO_Base_var &rhs);
   };
 
 
@@ -1505,32 +1337,32 @@
 #if !defined (_CORBA_MODULEDEF___OUT_CH_)
 #define _CORBA_MODULEDEF___OUT_CH_
   
-  class TAO_IFR_Client_Export ModuleDef_out
+    class TAO_IFR_Client_Export CORBA_ModuleDef_out
   {
   public:
-    ModuleDef_out (ModuleDef_ptr &);
-    ModuleDef_out (ModuleDef_var &);
-    ModuleDef_out (const ModuleDef_out &);
-    ModuleDef_out &operator= (const ModuleDef_out &);
-    ModuleDef_out &operator= (const ModuleDef_var &);
-    ModuleDef_out &operator= (ModuleDef_ptr);
-    operator ModuleDef_ptr &();
-    ModuleDef_ptr &ptr (void);
-    ModuleDef_ptr operator-> (void);
+      CORBA_ModuleDef_out (CORBA_ModuleDef_ptr &);
+      CORBA_ModuleDef_out (CORBA_ModuleDef_var &);
+      CORBA_ModuleDef_out (const CORBA_ModuleDef_out &);
+      CORBA_ModuleDef_out &operator= (const CORBA_ModuleDef_out &);
+      CORBA_ModuleDef_out &operator= (const CORBA_ModuleDef_var &);
+      CORBA_ModuleDef_out &operator= (CORBA_ModuleDef_ptr);
+      operator CORBA_ModuleDef_ptr &();
+      CORBA_ModuleDef_ptr &ptr (void);
+      CORBA_ModuleDef_ptr operator-> (void);
   
   private:
-    ModuleDef_ptr &ptr_;
+      CORBA_ModuleDef_ptr &ptr_;
   };
   
   
 #endif /* end #if !defined */
   
-  class ConstantDef;
+    class CORBA_ConstantDef;
   
 #if !defined (_CORBA_CONSTANTDEF___PTR_CH_)
 #define _CORBA_CONSTANTDEF___PTR_CH_
   
-  typedef ConstantDef *ConstantDef_ptr;
+    typedef CORBA_ConstantDef *CORBA_ConstantDef_ptr;
   
 #endif /* end #if !defined */
   
@@ -1538,43 +1370,43 @@
 #if !defined (_CORBA_CONSTANTDEF___VAR_CH_)
 #define _CORBA_CONSTANTDEF___VAR_CH_
   
-  class TAO_IFR_Client_Export ConstantDef_var : public TAO_Base_var
+    class TAO_IFR_Client_Export CORBA_ConstantDef_var : public TAO_Base_var
   {
   public:
-    ConstantDef_var (void); // default constructor
-    ConstantDef_var (ConstantDef_ptr p) : ptr_ (p) {} 
-    ConstantDef_var (const ConstantDef_var &); // copy constructor
-    ~ConstantDef_var (void); // destructor
+      CORBA_ConstantDef_var (void); // default constructor
+      CORBA_ConstantDef_var (CORBA_ConstantDef_ptr p) : ptr_ (p) {}
+      CORBA_ConstantDef_var (const CORBA_ConstantDef_var &); // copy constructor
+      ~CORBA_ConstantDef_var (void); // destructor
     
-    ConstantDef_var &operator= (ConstantDef_ptr);
-    ConstantDef_var &operator= (const ConstantDef_var &);
-    ConstantDef_ptr operator-> (void) const;
+      CORBA_ConstantDef_var &operator= (CORBA_ConstantDef_ptr);
+      CORBA_ConstantDef_var &operator= (const CORBA_ConstantDef_var &);
+      CORBA_ConstantDef_ptr operator-> (void) const;
     
-    operator const ConstantDef_ptr &() const;
-    operator ConstantDef_ptr &();
+      operator const CORBA_ConstantDef_ptr &() const;
+      operator CORBA_ConstantDef_ptr &();
     // in, inout, out, _retn 
-    ConstantDef_ptr in (void) const;
-    ConstantDef_ptr &inout (void);
-    ConstantDef_ptr &out (void);
-    ConstantDef_ptr _retn (void);
-    ConstantDef_ptr ptr (void) const;
+      CORBA_ConstantDef_ptr in (void) const;
+      CORBA_ConstantDef_ptr &inout (void);
+      CORBA_ConstantDef_ptr &out (void);
+      CORBA_ConstantDef_ptr _retn (void);
+      CORBA_ConstantDef_ptr ptr (void) const;
     
     // Hooks used by template sequence and object manager classes
     // for non-defined forward declared interfaces.
-    static ConstantDef_ptr tao_duplicate (ConstantDef_ptr);
-    static void tao_release (ConstantDef_ptr);
-    static ConstantDef_ptr tao_nil (void);
-    static ConstantDef_ptr tao_narrow (
+      static CORBA_ConstantDef_ptr tao_duplicate (CORBA_ConstantDef_ptr);
+      static void tao_release (CORBA_ConstantDef_ptr);
+      static CORBA_ConstantDef_ptr tao_nil (void);
+      static CORBA_ConstantDef_ptr tao_narrow (
         CORBA::Object *
         ACE_ENV_ARG_DECL_NOT_USED
       );
     static CORBA::Object * tao_upcast (void *);
   
   private:
-    ConstantDef_ptr ptr_;
+      CORBA_ConstantDef_ptr ptr_;
     // Unimplemented - prevents widening assignment.
-    ConstantDef_var (const TAO_Base_var &rhs);
-    ConstantDef_var &operator= (const TAO_Base_var &rhs);
+      CORBA_ConstantDef_var (const TAO_Base_var &rhs);
+      CORBA_ConstantDef_var &operator= (const TAO_Base_var &rhs);
   };
 
 
@@ -1584,32 +1416,32 @@
 #if !defined (_CORBA_CONSTANTDEF___OUT_CH_)
 #define _CORBA_CONSTANTDEF___OUT_CH_
   
-  class TAO_IFR_Client_Export ConstantDef_out
+    class TAO_IFR_Client_Export CORBA_ConstantDef_out
   {
   public:
-    ConstantDef_out (ConstantDef_ptr &);
-    ConstantDef_out (ConstantDef_var &);
-    ConstantDef_out (const ConstantDef_out &);
-    ConstantDef_out &operator= (const ConstantDef_out &);
-    ConstantDef_out &operator= (const ConstantDef_var &);
-    ConstantDef_out &operator= (ConstantDef_ptr);
-    operator ConstantDef_ptr &();
-    ConstantDef_ptr &ptr (void);
-    ConstantDef_ptr operator-> (void);
+      CORBA_ConstantDef_out (CORBA_ConstantDef_ptr &);
+      CORBA_ConstantDef_out (CORBA_ConstantDef_var &);
+      CORBA_ConstantDef_out (const CORBA_ConstantDef_out &);
+      CORBA_ConstantDef_out &operator= (const CORBA_ConstantDef_out &);
+      CORBA_ConstantDef_out &operator= (const CORBA_ConstantDef_var &);
+      CORBA_ConstantDef_out &operator= (CORBA_ConstantDef_ptr);
+      operator CORBA_ConstantDef_ptr &();
+      CORBA_ConstantDef_ptr &ptr (void);
+      CORBA_ConstantDef_ptr operator-> (void);
   
   private:
-    ConstantDef_ptr &ptr_;
+      CORBA_ConstantDef_ptr &ptr_;
   };
   
   
 #endif /* end #if !defined */
   
-  class IDLType;
+    class CORBA_IDLType;
   
 #if !defined (_CORBA_IDLTYPE___PTR_CH_)
 #define _CORBA_IDLTYPE___PTR_CH_
   
-  typedef IDLType *IDLType_ptr;
+    typedef CORBA_IDLType *CORBA_IDLType_ptr;
   
 #endif /* end #if !defined */
   
@@ -1617,43 +1449,43 @@
 #if !defined (_CORBA_IDLTYPE___VAR_CH_)
 #define _CORBA_IDLTYPE___VAR_CH_
   
-  class TAO_IFR_Client_Export IDLType_var : public TAO_Base_var
+    class TAO_IFR_Client_Export CORBA_IDLType_var : public TAO_Base_var
   {
   public:
-    IDLType_var (void); // default constructor
-    IDLType_var (IDLType_ptr p) : ptr_ (p) {} 
-    IDLType_var (const IDLType_var &); // copy constructor
-    ~IDLType_var (void); // destructor
+      CORBA_IDLType_var (void); // default constructor
+      CORBA_IDLType_var (CORBA_IDLType_ptr p) : ptr_ (p) {}
+      CORBA_IDLType_var (const CORBA_IDLType_var &); // copy constructor
+      ~CORBA_IDLType_var (void); // destructor
     
-    IDLType_var &operator= (IDLType_ptr);
-    IDLType_var &operator= (const IDLType_var &);
-    IDLType_ptr operator-> (void) const;
+      CORBA_IDLType_var &operator= (CORBA_IDLType_ptr);
+      CORBA_IDLType_var &operator= (const CORBA_IDLType_var &);
+      CORBA_IDLType_ptr operator-> (void) const;
     
-    operator const IDLType_ptr &() const;
-    operator IDLType_ptr &();
+      operator const CORBA_IDLType_ptr &() const;
+      operator CORBA_IDLType_ptr &();
     // in, inout, out, _retn 
-    IDLType_ptr in (void) const;
-    IDLType_ptr &inout (void);
-    IDLType_ptr &out (void);
-    IDLType_ptr _retn (void);
-    IDLType_ptr ptr (void) const;
+      CORBA_IDLType_ptr in (void) const;
+      CORBA_IDLType_ptr &inout (void);
+      CORBA_IDLType_ptr &out (void);
+      CORBA_IDLType_ptr _retn (void);
+      CORBA_IDLType_ptr ptr (void) const;
     
     // Hooks used by template sequence and object manager classes
     // for non-defined forward declared interfaces.
-    static IDLType_ptr tao_duplicate (IDLType_ptr);
-    static void tao_release (IDLType_ptr);
-    static IDLType_ptr tao_nil (void);
-    static IDLType_ptr tao_narrow (
+      static CORBA_IDLType_ptr tao_duplicate (CORBA_IDLType_ptr);
+      static void tao_release (CORBA_IDLType_ptr);
+      static CORBA_IDLType_ptr tao_nil (void);
+      static CORBA_IDLType_ptr tao_narrow (
         CORBA::Object *
         ACE_ENV_ARG_DECL_NOT_USED
       );
     static CORBA::Object * tao_upcast (void *);
   
   private:
-    IDLType_ptr ptr_;
+      CORBA_IDLType_ptr ptr_;
     // Unimplemented - prevents widening assignment.
-    IDLType_var (const TAO_Base_var &rhs);
-    IDLType_var &operator= (const TAO_Base_var &rhs);
+      CORBA_IDLType_var (const TAO_Base_var &rhs);
+      CORBA_IDLType_var &operator= (const TAO_Base_var &rhs);
   };
 
 
@@ -1663,32 +1495,32 @@
 #if !defined (_CORBA_IDLTYPE___OUT_CH_)
 #define _CORBA_IDLTYPE___OUT_CH_
   
-  class TAO_IFR_Client_Export IDLType_out
+    class TAO_IFR_Client_Export CORBA_IDLType_out
   {
   public:
-    IDLType_out (IDLType_ptr &);
-    IDLType_out (IDLType_var &);
-    IDLType_out (const IDLType_out &);
-    IDLType_out &operator= (const IDLType_out &);
-    IDLType_out &operator= (const IDLType_var &);
-    IDLType_out &operator= (IDLType_ptr);
-    operator IDLType_ptr &();
-    IDLType_ptr &ptr (void);
-    IDLType_ptr operator-> (void);
+      CORBA_IDLType_out (CORBA_IDLType_ptr &);
+      CORBA_IDLType_out (CORBA_IDLType_var &);
+      CORBA_IDLType_out (const CORBA_IDLType_out &);
+      CORBA_IDLType_out &operator= (const CORBA_IDLType_out &);
+      CORBA_IDLType_out &operator= (const CORBA_IDLType_var &);
+      CORBA_IDLType_out &operator= (CORBA_IDLType_ptr);
+      operator CORBA_IDLType_ptr &();
+      CORBA_IDLType_ptr &ptr (void);
+      CORBA_IDLType_ptr operator-> (void);
   
   private:
-    IDLType_ptr &ptr_;
+      CORBA_IDLType_ptr &ptr_;
   };
   
   
 #endif /* end #if !defined */
   
-  class StructDef;
+    class CORBA_StructDef;
   
 #if !defined (_CORBA_STRUCTDEF___PTR_CH_)
 #define _CORBA_STRUCTDEF___PTR_CH_
   
-  typedef StructDef *StructDef_ptr;
+    typedef CORBA_StructDef *CORBA_StructDef_ptr;
   
 #endif /* end #if !defined */
   
@@ -1696,43 +1528,43 @@
 #if !defined (_CORBA_STRUCTDEF___VAR_CH_)
 #define _CORBA_STRUCTDEF___VAR_CH_
   
-  class TAO_IFR_Client_Export StructDef_var : public TAO_Base_var
+    class TAO_IFR_Client_Export CORBA_StructDef_var : public TAO_Base_var
   {
   public:
-    StructDef_var (void); // default constructor
-    StructDef_var (StructDef_ptr p) : ptr_ (p) {} 
-    StructDef_var (const StructDef_var &); // copy constructor
-    ~StructDef_var (void); // destructor
+      CORBA_StructDef_var (void); // default constructor
+      CORBA_StructDef_var (CORBA_StructDef_ptr p) : ptr_ (p) {}
+      CORBA_StructDef_var (const CORBA_StructDef_var &); // copy constructor
+      ~CORBA_StructDef_var (void); // destructor
     
-    StructDef_var &operator= (StructDef_ptr);
-    StructDef_var &operator= (const StructDef_var &);
-    StructDef_ptr operator-> (void) const;
+      CORBA_StructDef_var &operator= (CORBA_StructDef_ptr);
+      CORBA_StructDef_var &operator= (const CORBA_StructDef_var &);
+      CORBA_StructDef_ptr operator-> (void) const;
     
-    operator const StructDef_ptr &() const;
-    operator StructDef_ptr &();
+      operator const CORBA_StructDef_ptr &() const;
+      operator CORBA_StructDef_ptr &();
     // in, inout, out, _retn 
-    StructDef_ptr in (void) const;
-    StructDef_ptr &inout (void);
-    StructDef_ptr &out (void);
-    StructDef_ptr _retn (void);
-    StructDef_ptr ptr (void) const;
+      CORBA_StructDef_ptr in (void) const;
+      CORBA_StructDef_ptr &inout (void);
+      CORBA_StructDef_ptr &out (void);
+      CORBA_StructDef_ptr _retn (void);
+      CORBA_StructDef_ptr ptr (void) const;
     
     // Hooks used by template sequence and object manager classes
     // for non-defined forward declared interfaces.
-    static StructDef_ptr tao_duplicate (StructDef_ptr);
-    static void tao_release (StructDef_ptr);
-    static StructDef_ptr tao_nil (void);
-    static StructDef_ptr tao_narrow (
+      static CORBA_StructDef_ptr tao_duplicate (CORBA_StructDef_ptr);
+      static void tao_release (CORBA_StructDef_ptr);
+      static CORBA_StructDef_ptr tao_nil (void);
+      static CORBA_StructDef_ptr tao_narrow (
         CORBA::Object *
         ACE_ENV_ARG_DECL_NOT_USED
       );
     static CORBA::Object * tao_upcast (void *);
   
   private:
-    StructDef_ptr ptr_;
+      CORBA_StructDef_ptr ptr_;
     // Unimplemented - prevents widening assignment.
-    StructDef_var (const TAO_Base_var &rhs);
-    StructDef_var &operator= (const TAO_Base_var &rhs);
+      CORBA_StructDef_var (const TAO_Base_var &rhs);
+      CORBA_StructDef_var &operator= (const TAO_Base_var &rhs);
   };
 
 
@@ -1742,32 +1574,32 @@
 #if !defined (_CORBA_STRUCTDEF___OUT_CH_)
 #define _CORBA_STRUCTDEF___OUT_CH_
   
-  class TAO_IFR_Client_Export StructDef_out
+    class TAO_IFR_Client_Export CORBA_StructDef_out
   {
   public:
-    StructDef_out (StructDef_ptr &);
-    StructDef_out (StructDef_var &);
-    StructDef_out (const StructDef_out &);
-    StructDef_out &operator= (const StructDef_out &);
-    StructDef_out &operator= (const StructDef_var &);
-    StructDef_out &operator= (StructDef_ptr);
-    operator StructDef_ptr &();
-    StructDef_ptr &ptr (void);
-    StructDef_ptr operator-> (void);
+      CORBA_StructDef_out (CORBA_StructDef_ptr &);
+      CORBA_StructDef_out (CORBA_StructDef_var &);
+      CORBA_StructDef_out (const CORBA_StructDef_out &);
+      CORBA_StructDef_out &operator= (const CORBA_StructDef_out &);
+      CORBA_StructDef_out &operator= (const CORBA_StructDef_var &);
+      CORBA_StructDef_out &operator= (CORBA_StructDef_ptr);
+      operator CORBA_StructDef_ptr &();
+      CORBA_StructDef_ptr &ptr (void);
+      CORBA_StructDef_ptr operator-> (void);
   
   private:
-    StructDef_ptr &ptr_;
+      CORBA_StructDef_ptr &ptr_;
   };
   
   
 #endif /* end #if !defined */
   
-  class UnionDef;
+    class CORBA_UnionDef;
   
 #if !defined (_CORBA_UNIONDEF___PTR_CH_)
 #define _CORBA_UNIONDEF___PTR_CH_
   
-  typedef UnionDef *UnionDef_ptr;
+    typedef CORBA_UnionDef *CORBA_UnionDef_ptr;
   
 #endif /* end #if !defined */
   
@@ -1775,43 +1607,43 @@
 #if !defined (_CORBA_UNIONDEF___VAR_CH_)
 #define _CORBA_UNIONDEF___VAR_CH_
   
-  class TAO_IFR_Client_Export UnionDef_var : public TAO_Base_var
+    class TAO_IFR_Client_Export CORBA_UnionDef_var : public TAO_Base_var
   {
   public:
-    UnionDef_var (void); // default constructor
-    UnionDef_var (UnionDef_ptr p) : ptr_ (p) {} 
-    UnionDef_var (const UnionDef_var &); // copy constructor
-    ~UnionDef_var (void); // destructor
+      CORBA_UnionDef_var (void); // default constructor
+      CORBA_UnionDef_var (CORBA_UnionDef_ptr p) : ptr_ (p) {}
+      CORBA_UnionDef_var (const CORBA_UnionDef_var &); // copy constructor
+      ~CORBA_UnionDef_var (void); // destructor
     
-    UnionDef_var &operator= (UnionDef_ptr);
-    UnionDef_var &operator= (const UnionDef_var &);
-    UnionDef_ptr operator-> (void) const;
+      CORBA_UnionDef_var &operator= (CORBA_UnionDef_ptr);
+      CORBA_UnionDef_var &operator= (const CORBA_UnionDef_var &);
+      CORBA_UnionDef_ptr operator-> (void) const;
     
-    operator const UnionDef_ptr &() const;
-    operator UnionDef_ptr &();
+      operator const CORBA_UnionDef_ptr &() const;
+      operator CORBA_UnionDef_ptr &();
     // in, inout, out, _retn 
-    UnionDef_ptr in (void) const;
-    UnionDef_ptr &inout (void);
-    UnionDef_ptr &out (void);
-    UnionDef_ptr _retn (void);
-    UnionDef_ptr ptr (void) const;
+      CORBA_UnionDef_ptr in (void) const;
+      CORBA_UnionDef_ptr &inout (void);
+      CORBA_UnionDef_ptr &out (void);
+      CORBA_UnionDef_ptr _retn (void);
+      CORBA_UnionDef_ptr ptr (void) const;
     
     // Hooks used by template sequence and object manager classes
     // for non-defined forward declared interfaces.
-    static UnionDef_ptr tao_duplicate (UnionDef_ptr);
-    static void tao_release (UnionDef_ptr);
-    static UnionDef_ptr tao_nil (void);
-    static UnionDef_ptr tao_narrow (
+      static CORBA_UnionDef_ptr tao_duplicate (CORBA_UnionDef_ptr);
+      static void tao_release (CORBA_UnionDef_ptr);
+      static CORBA_UnionDef_ptr tao_nil (void);
+      static CORBA_UnionDef_ptr tao_narrow (
         CORBA::Object *
         ACE_ENV_ARG_DECL_NOT_USED
       );
     static CORBA::Object * tao_upcast (void *);
   
   private:
-    UnionDef_ptr ptr_;
+      CORBA_UnionDef_ptr ptr_;
     // Unimplemented - prevents widening assignment.
-    UnionDef_var (const TAO_Base_var &rhs);
-    UnionDef_var &operator= (const TAO_Base_var &rhs);
+      CORBA_UnionDef_var (const TAO_Base_var &rhs);
+      CORBA_UnionDef_var &operator= (const TAO_Base_var &rhs);
   };
 
 
@@ -1821,32 +1653,32 @@
 #if !defined (_CORBA_UNIONDEF___OUT_CH_)
 #define _CORBA_UNIONDEF___OUT_CH_
   
-  class TAO_IFR_Client_Export UnionDef_out
+    class TAO_IFR_Client_Export CORBA_UnionDef_out
   {
   public:
-    UnionDef_out (UnionDef_ptr &);
-    UnionDef_out (UnionDef_var &);
-    UnionDef_out (const UnionDef_out &);
-    UnionDef_out &operator= (const UnionDef_out &);
-    UnionDef_out &operator= (const UnionDef_var &);
-    UnionDef_out &operator= (UnionDef_ptr);
-    operator UnionDef_ptr &();
-    UnionDef_ptr &ptr (void);
-    UnionDef_ptr operator-> (void);
+      CORBA_UnionDef_out (CORBA_UnionDef_ptr &);
+      CORBA_UnionDef_out (CORBA_UnionDef_var &);
+      CORBA_UnionDef_out (const CORBA_UnionDef_out &);
+      CORBA_UnionDef_out &operator= (const CORBA_UnionDef_out &);
+      CORBA_UnionDef_out &operator= (const CORBA_UnionDef_var &);
+      CORBA_UnionDef_out &operator= (CORBA_UnionDef_ptr);
+      operator CORBA_UnionDef_ptr &();
+      CORBA_UnionDef_ptr &ptr (void);
+      CORBA_UnionDef_ptr operator-> (void);
   
   private:
-    UnionDef_ptr &ptr_;
+      CORBA_UnionDef_ptr &ptr_;
   };
   
   
 #endif /* end #if !defined */
   
-  class EnumDef;
+    class CORBA_EnumDef;
   
 #if !defined (_CORBA_ENUMDEF___PTR_CH_)
 #define _CORBA_ENUMDEF___PTR_CH_
   
-  typedef EnumDef *EnumDef_ptr;
+    typedef CORBA_EnumDef *CORBA_EnumDef_ptr;
   
 #endif /* end #if !defined */
   
@@ -1854,43 +1686,43 @@
 #if !defined (_CORBA_ENUMDEF___VAR_CH_)
 #define _CORBA_ENUMDEF___VAR_CH_
   
-  class TAO_IFR_Client_Export EnumDef_var : public TAO_Base_var
+    class TAO_IFR_Client_Export CORBA_EnumDef_var : public TAO_Base_var
   {
   public:
-    EnumDef_var (void); // default constructor
-    EnumDef_var (EnumDef_ptr p) : ptr_ (p) {} 
-    EnumDef_var (const EnumDef_var &); // copy constructor
-    ~EnumDef_var (void); // destructor
+      CORBA_EnumDef_var (void); // default constructor
+      CORBA_EnumDef_var (CORBA_EnumDef_ptr p) : ptr_ (p) {}
+      CORBA_EnumDef_var (const CORBA_EnumDef_var &); // copy constructor
+      ~CORBA_EnumDef_var (void); // destructor
     
-    EnumDef_var &operator= (EnumDef_ptr);
-    EnumDef_var &operator= (const EnumDef_var &);
-    EnumDef_ptr operator-> (void) const;
+      CORBA_EnumDef_var &operator= (CORBA_EnumDef_ptr);
+      CORBA_EnumDef_var &operator= (const CORBA_EnumDef_var &);
+      CORBA_EnumDef_ptr operator-> (void) const;
     
-    operator const EnumDef_ptr &() const;
-    operator EnumDef_ptr &();
+      operator const CORBA_EnumDef_ptr &() const;
+      operator CORBA_EnumDef_ptr &();
     // in, inout, out, _retn 
-    EnumDef_ptr in (void) const;
-    EnumDef_ptr &inout (void);
-    EnumDef_ptr &out (void);
-    EnumDef_ptr _retn (void);
-    EnumDef_ptr ptr (void) const;
+      CORBA_EnumDef_ptr in (void) const;
+      CORBA_EnumDef_ptr &inout (void);
+      CORBA_EnumDef_ptr &out (void);
+      CORBA_EnumDef_ptr _retn (void);
+      CORBA_EnumDef_ptr ptr (void) const;
     
     // Hooks used by template sequence and object manager classes
     // for non-defined forward declared interfaces.
-    static EnumDef_ptr tao_duplicate (EnumDef_ptr);
-    static void tao_release (EnumDef_ptr);
-    static EnumDef_ptr tao_nil (void);
-    static EnumDef_ptr tao_narrow (
+      static CORBA_EnumDef_ptr tao_duplicate (CORBA_EnumDef_ptr);
+      static void tao_release (CORBA_EnumDef_ptr);
+      static CORBA_EnumDef_ptr tao_nil (void);
+      static CORBA_EnumDef_ptr tao_narrow (
         CORBA::Object *
         ACE_ENV_ARG_DECL_NOT_USED
       );
     static CORBA::Object * tao_upcast (void *);
   
   private:
-    EnumDef_ptr ptr_;
+      CORBA_EnumDef_ptr ptr_;
     // Unimplemented - prevents widening assignment.
-    EnumDef_var (const TAO_Base_var &rhs);
-    EnumDef_var &operator= (const TAO_Base_var &rhs);
+      CORBA_EnumDef_var (const TAO_Base_var &rhs);
+      CORBA_EnumDef_var &operator= (const TAO_Base_var &rhs);
   };
 
 
@@ -1900,32 +1732,32 @@
 #if !defined (_CORBA_ENUMDEF___OUT_CH_)
 #define _CORBA_ENUMDEF___OUT_CH_
   
-  class TAO_IFR_Client_Export EnumDef_out
+    class TAO_IFR_Client_Export CORBA_EnumDef_out
   {
   public:
-    EnumDef_out (EnumDef_ptr &);
-    EnumDef_out (EnumDef_var &);
-    EnumDef_out (const EnumDef_out &);
-    EnumDef_out &operator= (const EnumDef_out &);
-    EnumDef_out &operator= (const EnumDef_var &);
-    EnumDef_out &operator= (EnumDef_ptr);
-    operator EnumDef_ptr &();
-    EnumDef_ptr &ptr (void);
-    EnumDef_ptr operator-> (void);
+      CORBA_EnumDef_out (CORBA_EnumDef_ptr &);
+      CORBA_EnumDef_out (CORBA_EnumDef_var &);
+      CORBA_EnumDef_out (const CORBA_EnumDef_out &);
+      CORBA_EnumDef_out &operator= (const CORBA_EnumDef_out &);
+      CORBA_EnumDef_out &operator= (const CORBA_EnumDef_var &);
+      CORBA_EnumDef_out &operator= (CORBA_EnumDef_ptr);
+      operator CORBA_EnumDef_ptr &();
+      CORBA_EnumDef_ptr &ptr (void);
+      CORBA_EnumDef_ptr operator-> (void);
   
   private:
-    EnumDef_ptr &ptr_;
+      CORBA_EnumDef_ptr &ptr_;
   };
   
   
 #endif /* end #if !defined */
   
-  class AliasDef;
+    class CORBA_AliasDef;
   
 #if !defined (_CORBA_ALIASDEF___PTR_CH_)
 #define _CORBA_ALIASDEF___PTR_CH_
   
-  typedef AliasDef *AliasDef_ptr;
+    typedef CORBA_AliasDef *CORBA_AliasDef_ptr;
   
 #endif /* end #if !defined */
   
@@ -1933,43 +1765,43 @@
 #if !defined (_CORBA_ALIASDEF___VAR_CH_)
 #define _CORBA_ALIASDEF___VAR_CH_
   
-  class TAO_IFR_Client_Export AliasDef_var : public TAO_Base_var
+    class TAO_IFR_Client_Export CORBA_AliasDef_var : public TAO_Base_var
   {
   public:
-    AliasDef_var (void); // default constructor
-    AliasDef_var (AliasDef_ptr p) : ptr_ (p) {} 
-    AliasDef_var (const AliasDef_var &); // copy constructor
-    ~AliasDef_var (void); // destructor
+      CORBA_AliasDef_var (void); // default constructor
+      CORBA_AliasDef_var (CORBA_AliasDef_ptr p) : ptr_ (p) {}
+      CORBA_AliasDef_var (const CORBA_AliasDef_var &); // copy constructor
+      ~CORBA_AliasDef_var (void); // destructor
     
-    AliasDef_var &operator= (AliasDef_ptr);
-    AliasDef_var &operator= (const AliasDef_var &);
-    AliasDef_ptr operator-> (void) const;
+      CORBA_AliasDef_var &operator= (CORBA_AliasDef_ptr);
+      CORBA_AliasDef_var &operator= (const CORBA_AliasDef_var &);
+      CORBA_AliasDef_ptr operator-> (void) const;
     
-    operator const AliasDef_ptr &() const;
-    operator AliasDef_ptr &();
+      operator const CORBA_AliasDef_ptr &() const;
+      operator CORBA_AliasDef_ptr &();
     // in, inout, out, _retn 
-    AliasDef_ptr in (void) const;
-    AliasDef_ptr &inout (void);
-    AliasDef_ptr &out (void);
-    AliasDef_ptr _retn (void);
-    AliasDef_ptr ptr (void) const;
+      CORBA_AliasDef_ptr in (void) const;
+      CORBA_AliasDef_ptr &inout (void);
+      CORBA_AliasDef_ptr &out (void);
+      CORBA_AliasDef_ptr _retn (void);
+      CORBA_AliasDef_ptr ptr (void) const;
     
     // Hooks used by template sequence and object manager classes
     // for non-defined forward declared interfaces.
-    static AliasDef_ptr tao_duplicate (AliasDef_ptr);
-    static void tao_release (AliasDef_ptr);
-    static AliasDef_ptr tao_nil (void);
-    static AliasDef_ptr tao_narrow (
+      static CORBA_AliasDef_ptr tao_duplicate (CORBA_AliasDef_ptr);
+      static void tao_release (CORBA_AliasDef_ptr);
+      static CORBA_AliasDef_ptr tao_nil (void);
+      static CORBA_AliasDef_ptr tao_narrow (
         CORBA::Object *
         ACE_ENV_ARG_DECL_NOT_USED
       );
     static CORBA::Object * tao_upcast (void *);
   
   private:
-    AliasDef_ptr ptr_;
+      CORBA_AliasDef_ptr ptr_;
     // Unimplemented - prevents widening assignment.
-    AliasDef_var (const TAO_Base_var &rhs);
-    AliasDef_var &operator= (const TAO_Base_var &rhs);
+      CORBA_AliasDef_var (const TAO_Base_var &rhs);
+      CORBA_AliasDef_var &operator= (const TAO_Base_var &rhs);
   };
 
 
@@ -1979,32 +1811,32 @@
 #if !defined (_CORBA_ALIASDEF___OUT_CH_)
 #define _CORBA_ALIASDEF___OUT_CH_
   
-  class TAO_IFR_Client_Export AliasDef_out
+    class TAO_IFR_Client_Export CORBA_AliasDef_out
   {
   public:
-    AliasDef_out (AliasDef_ptr &);
-    AliasDef_out (AliasDef_var &);
-    AliasDef_out (const AliasDef_out &);
-    AliasDef_out &operator= (const AliasDef_out &);
-    AliasDef_out &operator= (const AliasDef_var &);
-    AliasDef_out &operator= (AliasDef_ptr);
-    operator AliasDef_ptr &();
-    AliasDef_ptr &ptr (void);
-    AliasDef_ptr operator-> (void);
+      CORBA_AliasDef_out (CORBA_AliasDef_ptr &);
+      CORBA_AliasDef_out (CORBA_AliasDef_var &);
+      CORBA_AliasDef_out (const CORBA_AliasDef_out &);
+      CORBA_AliasDef_out &operator= (const CORBA_AliasDef_out &);
+      CORBA_AliasDef_out &operator= (const CORBA_AliasDef_var &);
+      CORBA_AliasDef_out &operator= (CORBA_AliasDef_ptr);
+      operator CORBA_AliasDef_ptr &();
+      CORBA_AliasDef_ptr &ptr (void);
+      CORBA_AliasDef_ptr operator-> (void);
   
   private:
-    AliasDef_ptr &ptr_;
+      CORBA_AliasDef_ptr &ptr_;
   };
   
   
 #endif /* end #if !defined */
   
-  class InterfaceDef;
+    class CORBA_InterfaceDef;
   
 #if !defined (_CORBA_INTERFACEDEF___PTR_CH_)
 #define _CORBA_INTERFACEDEF___PTR_CH_
   
-  typedef InterfaceDef *InterfaceDef_ptr;
+    typedef CORBA_InterfaceDef *CORBA_InterfaceDef_ptr;
   
 #endif /* end #if !defined */
   
@@ -2012,43 +1844,43 @@
 #if !defined (_CORBA_INTERFACEDEF___VAR_CH_)
 #define _CORBA_INTERFACEDEF___VAR_CH_
   
-  class TAO_IFR_Client_Export InterfaceDef_var : public TAO_Base_var
+    class TAO_IFR_Client_Export CORBA_InterfaceDef_var : public TAO_Base_var
   {
   public:
-    InterfaceDef_var (void); // default constructor
-    InterfaceDef_var (InterfaceDef_ptr p) : ptr_ (p) {} 
-    InterfaceDef_var (const InterfaceDef_var &); // copy constructor
-    ~InterfaceDef_var (void); // destructor
+      CORBA_InterfaceDef_var (void); // default constructor
+      CORBA_InterfaceDef_var (CORBA_InterfaceDef_ptr p) : ptr_ (p) {}
+      CORBA_InterfaceDef_var (const CORBA_InterfaceDef_var &); // copy constructor
+      ~CORBA_InterfaceDef_var (void); // destructor
     
-    InterfaceDef_var &operator= (InterfaceDef_ptr);
-    InterfaceDef_var &operator= (const InterfaceDef_var &);
-    InterfaceDef_ptr operator-> (void) const;
+      CORBA_InterfaceDef_var &operator= (CORBA_InterfaceDef_ptr);
+      CORBA_InterfaceDef_var &operator= (const CORBA_InterfaceDef_var &);
+      CORBA_InterfaceDef_ptr operator-> (void) const;
     
-    operator const InterfaceDef_ptr &() const;
-    operator InterfaceDef_ptr &();
+      operator const CORBA_InterfaceDef_ptr &() const;
+      operator CORBA_InterfaceDef_ptr &();
     // in, inout, out, _retn 
-    InterfaceDef_ptr in (void) const;
-    InterfaceDef_ptr &inout (void);
-    InterfaceDef_ptr &out (void);
-    InterfaceDef_ptr _retn (void);
-    InterfaceDef_ptr ptr (void) const;
+      CORBA_InterfaceDef_ptr in (void) const;
+      CORBA_InterfaceDef_ptr &inout (void);
+      CORBA_InterfaceDef_ptr &out (void);
+      CORBA_InterfaceDef_ptr _retn (void);
+      CORBA_InterfaceDef_ptr ptr (void) const;
     
     // Hooks used by template sequence and object manager classes
     // for non-defined forward declared interfaces.
-    static InterfaceDef_ptr tao_duplicate (InterfaceDef_ptr);
-    static void tao_release (InterfaceDef_ptr);
-    static InterfaceDef_ptr tao_nil (void);
-    static InterfaceDef_ptr tao_narrow (
+      static CORBA_InterfaceDef_ptr tao_duplicate (CORBA_InterfaceDef_ptr);
+      static void tao_release (CORBA_InterfaceDef_ptr);
+      static CORBA_InterfaceDef_ptr tao_nil (void);
+      static CORBA_InterfaceDef_ptr tao_narrow (
         CORBA::Object *
         ACE_ENV_ARG_DECL_NOT_USED
       );
     static CORBA::Object * tao_upcast (void *);
   
   private:
-    InterfaceDef_ptr ptr_;
+      CORBA_InterfaceDef_ptr ptr_;
     // Unimplemented - prevents widening assignment.
-    InterfaceDef_var (const TAO_Base_var &rhs);
-    InterfaceDef_var &operator= (const TAO_Base_var &rhs);
+      CORBA_InterfaceDef_var (const TAO_Base_var &rhs);
+      CORBA_InterfaceDef_var &operator= (const TAO_Base_var &rhs);
   };
 
 
@@ -2058,21 +1890,21 @@
 #if !defined (_CORBA_INTERFACEDEF___OUT_CH_)
 #define _CORBA_INTERFACEDEF___OUT_CH_
   
-  class TAO_IFR_Client_Export InterfaceDef_out
+    class TAO_IFR_Client_Export CORBA_InterfaceDef_out
   {
   public:
-    InterfaceDef_out (InterfaceDef_ptr &);
-    InterfaceDef_out (InterfaceDef_var &);
-    InterfaceDef_out (const InterfaceDef_out &);
-    InterfaceDef_out &operator= (const InterfaceDef_out &);
-    InterfaceDef_out &operator= (const InterfaceDef_var &);
-    InterfaceDef_out &operator= (InterfaceDef_ptr);
-    operator InterfaceDef_ptr &();
-    InterfaceDef_ptr &ptr (void);
-    InterfaceDef_ptr operator-> (void);
+      CORBA_InterfaceDef_out (CORBA_InterfaceDef_ptr &);
+      CORBA_InterfaceDef_out (CORBA_InterfaceDef_var &);
+      CORBA_InterfaceDef_out (const CORBA_InterfaceDef_out &);
+      CORBA_InterfaceDef_out &operator= (const CORBA_InterfaceDef_out &);
+      CORBA_InterfaceDef_out &operator= (const CORBA_InterfaceDef_var &);
+      CORBA_InterfaceDef_out &operator= (CORBA_InterfaceDef_ptr);
+      operator CORBA_InterfaceDef_ptr &();
+      CORBA_InterfaceDef_ptr &ptr (void);
+      CORBA_InterfaceDef_ptr operator-> (void);
   
   private:
-    InterfaceDef_ptr &ptr_;
+      CORBA_InterfaceDef_ptr &ptr_;
   };
   
   
@@ -2094,7 +1926,7 @@
     _TAO_Unbounded_Object_Sequence_CORBA_InterfaceDefSeq (
         CORBA::ULong maximum,
         CORBA::ULong length,
-        InterfaceDef* *value,
+          CORBA_InterfaceDef* *value,
         CORBA::Boolean release = 0
       );
     _TAO_Unbounded_Object_Sequence_CORBA_InterfaceDefSeq (
@@ -2106,17 +1938,17 @@
     virtual ~_TAO_Unbounded_Object_Sequence_CORBA_InterfaceDefSeq (void);
     
     // = Accessors.
-    TAO_Object_Manager<CORBA::InterfaceDef,CORBA::InterfaceDef_var> operator[] (CORBA::ULong index) const;
+      TAO_Object_Manager<CORBA_InterfaceDef,CORBA_InterfaceDef_var> operator[] (CORBA::ULong index) const;
     
     // = Static operations.
-    static InterfaceDef **allocbuf (CORBA::ULong nelems);
-    static void freebuf (InterfaceDef **buffer);
+      static CORBA_InterfaceDef **allocbuf (CORBA::ULong nelems);
+      static void freebuf (CORBA_InterfaceDef **buffer);
     
     // Implement the TAO_Base_Sequence methods (see Sequence.h)
     virtual void _allocate_buffer (CORBA::ULong length);
     virtual void _deallocate_buffer (void);
-    InterfaceDef* *get_buffer (CORBA::Boolean orphan = 0);
-    const InterfaceDef* *get_buffer (void) const;
+      CORBA_InterfaceDef* *get_buffer (CORBA::Boolean orphan = 0);
+      const CORBA_InterfaceDef* *get_buffer (void) const;
     virtual void _shrink_buffer (
         CORBA::ULong nl,
         CORBA::ULong ol
@@ -2125,8 +1957,8 @@
     virtual void _downcast (
         void* target,
         CORBA_Object *src
-        ACE_ENV_ARG_DECL_WITH_DEFAULTS
-      );
+          ACE_ENV_ARG_DECL_WITH_DEFAULTS);
+
     virtual CORBA_Object* _upcast (void *src) const;
   };
   
@@ -2138,35 +1970,35 @@
 #if !defined (_CORBA_INTERFACEDEFSEQ_CH_)
 #define _CORBA_INTERFACEDEFSEQ_CH_
   
-  class InterfaceDefSeq;
-  class InterfaceDefSeq_var;
+    class CORBA_InterfaceDefSeq;
+    class CORBA_InterfaceDefSeq_var;
   
   // *************************************************************
-  // InterfaceDefSeq
+    // CORBA_InterfaceDefSeq
   // *************************************************************
   
-  class TAO_IFR_Client_Export InterfaceDefSeq : public 
+    class TAO_IFR_Client_Export CORBA_InterfaceDefSeq : public
 #if !defined (TAO_USE_SEQUENCE_TEMPLATES)
   _TAO_Unbounded_Object_Sequence_CORBA_InterfaceDefSeq
 #else /* TAO_USE_SEQUENCE_TEMPLATES */
-  TAO_Unbounded_Object_Sequence<InterfaceDef,InterfaceDef_var>
+    TAO_Unbounded_Object_Sequence<CORBA_InterfaceDef,CORBA_InterfaceDef_var>
 #endif /* !TAO_USE_SEQUENCE_TEMPLATES */ 
   {
   public:
-    InterfaceDefSeq (void); // default ctor
-    InterfaceDefSeq (CORBA::ULong max); // uses max size
-    InterfaceDefSeq (
+      CORBA_InterfaceDefSeq (void); // default ctor
+      CORBA_InterfaceDefSeq (CORBA::ULong max); // uses max size
+      CORBA_InterfaceDefSeq (
         CORBA::ULong max, 
         CORBA::ULong length, 
-        InterfaceDef_ptr *buffer, 
+          CORBA_InterfaceDef_ptr *buffer,
         CORBA::Boolean release = 0
       );
-    InterfaceDefSeq (const InterfaceDefSeq &); // copy ctor
-    ~InterfaceDefSeq (void);
+      CORBA_InterfaceDefSeq (const CORBA_InterfaceDefSeq &); // copy ctor
+      ~CORBA_InterfaceDefSeq (void);
     static void _tao_any_destructor (void*);
     
 #if !defined(__GNUC__) || !defined (ACE_HAS_GNUG_PRE_2_8)
-    typedef InterfaceDefSeq_var _var_type;
+      typedef CORBA_InterfaceDefSeq_var _var_type;
 #endif /* ! __GNUC__ || g++ >= 2.8 */
     
     
@@ -2179,38 +2011,38 @@
 #define _CORBA_INTERFACEDEFSEQ___VAR_CH_
   
   // *************************************************************
-  // class CORBA::InterfaceDefSeq_var
+    // class CORBA_InterfaceDefSeq_var
   // *************************************************************
   
-  class TAO_IFR_Client_Export InterfaceDefSeq_var
+    class TAO_IFR_Client_Export CORBA_InterfaceDefSeq_var
   {
   public:
-    InterfaceDefSeq_var (void);
-    InterfaceDefSeq_var (InterfaceDefSeq *);
-    InterfaceDefSeq_var (const InterfaceDefSeq_var &);
-    ~InterfaceDefSeq_var (void);
+      CORBA_InterfaceDefSeq_var (void);
+      CORBA_InterfaceDefSeq_var (CORBA_InterfaceDefSeq *);
+      CORBA_InterfaceDefSeq_var (const CORBA_InterfaceDefSeq_var &);
+      ~CORBA_InterfaceDefSeq_var (void);
     
-    InterfaceDefSeq_var &operator= (InterfaceDefSeq *);
-    InterfaceDefSeq_var &operator= (const InterfaceDefSeq_var &);
-    InterfaceDefSeq *operator-> (void);
-    const InterfaceDefSeq *operator-> (void) const;
+      CORBA_InterfaceDefSeq_var &operator= (CORBA_InterfaceDefSeq *);
+      CORBA_InterfaceDefSeq_var &operator= (const CORBA_InterfaceDefSeq_var &);
+      CORBA_InterfaceDefSeq *operator-> (void);
+      const CORBA_InterfaceDefSeq *operator-> (void) const;
     
-    operator const InterfaceDefSeq &() const;
-    operator InterfaceDefSeq &();
-    operator InterfaceDefSeq &() const;
-    operator InterfaceDefSeq *&(); // variable-size base types only
+      operator const CORBA_InterfaceDefSeq &() const;
+      operator CORBA_InterfaceDefSeq &();
+      operator CORBA_InterfaceDefSeq &() const;
+      operator CORBA_InterfaceDefSeq *&(); // variable-size base types only
     
-    TAO_Object_Manager<InterfaceDef, InterfaceDef_var> operator[] (CORBA::ULong index);
+      TAO_Object_Manager<CORBA_InterfaceDef, CORBA_InterfaceDef_var> operator[] (CORBA::ULong index);
     
     // in, inout, out, _retn 
-    const InterfaceDefSeq &in (void) const;
-    InterfaceDefSeq &inout (void);
-    InterfaceDefSeq *&out (void);
-    InterfaceDefSeq *_retn (void);
-    InterfaceDefSeq *ptr (void) const;
+      const CORBA_InterfaceDefSeq &in (void) const;
+      CORBA_InterfaceDefSeq &inout (void);
+      CORBA_InterfaceDefSeq *&out (void);
+      CORBA_InterfaceDefSeq *_retn (void);
+      CORBA_InterfaceDefSeq *ptr (void) const;
   
   private:
-    InterfaceDefSeq *ptr_;
+      CORBA_InterfaceDefSeq *ptr_;
   };
   
   
@@ -2220,36 +2052,34 @@
 #if !defined (_CORBA_INTERFACEDEFSEQ___OUT_CH_)
 #define _CORBA_INTERFACEDEFSEQ___OUT_CH_
   
-  class TAO_IFR_Client_Export InterfaceDefSeq_out
+    class TAO_IFR_Client_Export CORBA_InterfaceDefSeq_out
   {
   public:
-    InterfaceDefSeq_out (InterfaceDefSeq *&);
-    InterfaceDefSeq_out (InterfaceDefSeq_var &);
-    InterfaceDefSeq_out (const InterfaceDefSeq_out &);
-    InterfaceDefSeq_out &operator= (const InterfaceDefSeq_out &);
-    InterfaceDefSeq_out &operator= (InterfaceDefSeq *);
-    operator InterfaceDefSeq *&();
-    InterfaceDefSeq *&ptr (void);
-    InterfaceDefSeq *operator-> (void);
-    TAO_Object_Manager<InterfaceDef, InterfaceDef_var> operator[] (CORBA::ULong index);
+      CORBA_InterfaceDefSeq_out (CORBA_InterfaceDefSeq *&);
+      CORBA_InterfaceDefSeq_out (CORBA_InterfaceDefSeq_var &);
+      CORBA_InterfaceDefSeq_out (const CORBA_InterfaceDefSeq_out &);
+      CORBA_InterfaceDefSeq_out &operator= (const CORBA_InterfaceDefSeq_out &);
+      CORBA_InterfaceDefSeq_out &operator= (CORBA_InterfaceDefSeq *);
+      operator CORBA_InterfaceDefSeq *&();
+      CORBA_InterfaceDefSeq *&ptr (void);
+      CORBA_InterfaceDefSeq *operator-> (void);
+      TAO_Object_Manager<CORBA_InterfaceDef, CORBA_InterfaceDef_var> operator[] (CORBA::ULong index);
   
   private:
-    InterfaceDefSeq *&ptr_;
+      CORBA_InterfaceDefSeq *&ptr_;
     // Assignment from T_var not allowed.
-    void operator= (const InterfaceDefSeq_var &);
+      void operator= (const CORBA_InterfaceDefSeq_var &);
   };
   
   
 #endif /* end #if !defined */
   
-  TAO_NAMESPACE_STORAGE_CLASS ::CORBA::TypeCode_ptr _tc_InterfaceDefSeq;
-  
-  class ExceptionDef;
+    class CORBA_ExceptionDef;
   
 #if !defined (_CORBA_EXCEPTIONDEF___PTR_CH_)
 #define _CORBA_EXCEPTIONDEF___PTR_CH_
   
-  typedef ExceptionDef *ExceptionDef_ptr;
+    typedef CORBA_ExceptionDef *CORBA_ExceptionDef_ptr;
   
 #endif /* end #if !defined */
   
@@ -2257,43 +2087,43 @@
 #if !defined (_CORBA_EXCEPTIONDEF___VAR_CH_)
 #define _CORBA_EXCEPTIONDEF___VAR_CH_
   
-  class TAO_IFR_Client_Export ExceptionDef_var : public TAO_Base_var
+    class TAO_IFR_Client_Export CORBA_ExceptionDef_var : public TAO_Base_var
   {
   public:
-    ExceptionDef_var (void); // default constructor
-    ExceptionDef_var (ExceptionDef_ptr p) : ptr_ (p) {} 
-    ExceptionDef_var (const ExceptionDef_var &); // copy constructor
-    ~ExceptionDef_var (void); // destructor
+      CORBA_ExceptionDef_var (void); // default constructor
+      CORBA_ExceptionDef_var (CORBA_ExceptionDef_ptr p) : ptr_ (p) {}
+      CORBA_ExceptionDef_var (const CORBA_ExceptionDef_var &); // copy constructor
+      ~CORBA_ExceptionDef_var (void); // destructor
     
-    ExceptionDef_var &operator= (ExceptionDef_ptr);
-    ExceptionDef_var &operator= (const ExceptionDef_var &);
-    ExceptionDef_ptr operator-> (void) const;
+      CORBA_ExceptionDef_var &operator= (CORBA_ExceptionDef_ptr);
+      CORBA_ExceptionDef_var &operator= (const CORBA_ExceptionDef_var &);
+      CORBA_ExceptionDef_ptr operator-> (void) const;
     
-    operator const ExceptionDef_ptr &() const;
-    operator ExceptionDef_ptr &();
+      operator const CORBA_ExceptionDef_ptr &() const;
+      operator CORBA_ExceptionDef_ptr &();
     // in, inout, out, _retn 
-    ExceptionDef_ptr in (void) const;
-    ExceptionDef_ptr &inout (void);
-    ExceptionDef_ptr &out (void);
-    ExceptionDef_ptr _retn (void);
-    ExceptionDef_ptr ptr (void) const;
+      CORBA_ExceptionDef_ptr in (void) const;
+      CORBA_ExceptionDef_ptr &inout (void);
+      CORBA_ExceptionDef_ptr &out (void);
+      CORBA_ExceptionDef_ptr _retn (void);
+      CORBA_ExceptionDef_ptr ptr (void) const;
     
     // Hooks used by template sequence and object manager classes
     // for non-defined forward declared interfaces.
-    static ExceptionDef_ptr tao_duplicate (ExceptionDef_ptr);
-    static void tao_release (ExceptionDef_ptr);
-    static ExceptionDef_ptr tao_nil (void);
-    static ExceptionDef_ptr tao_narrow (
+      static CORBA_ExceptionDef_ptr tao_duplicate (CORBA_ExceptionDef_ptr);
+      static void tao_release (CORBA_ExceptionDef_ptr);
+      static CORBA_ExceptionDef_ptr tao_nil (void);
+      static CORBA_ExceptionDef_ptr tao_narrow (
         CORBA::Object *
         ACE_ENV_ARG_DECL_NOT_USED
       );
     static CORBA::Object * tao_upcast (void *);
   
   private:
-    ExceptionDef_ptr ptr_;
+      CORBA_ExceptionDef_ptr ptr_;
     // Unimplemented - prevents widening assignment.
-    ExceptionDef_var (const TAO_Base_var &rhs);
-    ExceptionDef_var &operator= (const TAO_Base_var &rhs);
+      CORBA_ExceptionDef_var (const TAO_Base_var &rhs);
+      CORBA_ExceptionDef_var &operator= (const TAO_Base_var &rhs);
   };
 
 
@@ -2303,32 +2133,32 @@
 #if !defined (_CORBA_EXCEPTIONDEF___OUT_CH_)
 #define _CORBA_EXCEPTIONDEF___OUT_CH_
   
-  class TAO_IFR_Client_Export ExceptionDef_out
+    class TAO_IFR_Client_Export CORBA_ExceptionDef_out
   {
   public:
-    ExceptionDef_out (ExceptionDef_ptr &);
-    ExceptionDef_out (ExceptionDef_var &);
-    ExceptionDef_out (const ExceptionDef_out &);
-    ExceptionDef_out &operator= (const ExceptionDef_out &);
-    ExceptionDef_out &operator= (const ExceptionDef_var &);
-    ExceptionDef_out &operator= (ExceptionDef_ptr);
-    operator ExceptionDef_ptr &();
-    ExceptionDef_ptr &ptr (void);
-    ExceptionDef_ptr operator-> (void);
+      CORBA_ExceptionDef_out (CORBA_ExceptionDef_ptr &);
+      CORBA_ExceptionDef_out (CORBA_ExceptionDef_var &);
+      CORBA_ExceptionDef_out (const CORBA_ExceptionDef_out &);
+      CORBA_ExceptionDef_out &operator= (const CORBA_ExceptionDef_out &);
+      CORBA_ExceptionDef_out &operator= (const CORBA_ExceptionDef_var &);
+      CORBA_ExceptionDef_out &operator= (CORBA_ExceptionDef_ptr);
+      operator CORBA_ExceptionDef_ptr &();
+      CORBA_ExceptionDef_ptr &ptr (void);
+      CORBA_ExceptionDef_ptr operator-> (void);
   
   private:
-    ExceptionDef_ptr &ptr_;
+      CORBA_ExceptionDef_ptr &ptr_;
   };
   
   
 #endif /* end #if !defined */
   
-  class NativeDef;
+    class CORBA_NativeDef;
   
 #if !defined (_CORBA_NATIVEDEF___PTR_CH_)
 #define _CORBA_NATIVEDEF___PTR_CH_
   
-  typedef NativeDef *NativeDef_ptr;
+    typedef CORBA_NativeDef *CORBA_NativeDef_ptr;
   
 #endif /* end #if !defined */
   
@@ -2336,43 +2166,43 @@
 #if !defined (_CORBA_NATIVEDEF___VAR_CH_)
 #define _CORBA_NATIVEDEF___VAR_CH_
   
-  class TAO_IFR_Client_Export NativeDef_var : public TAO_Base_var
+    class TAO_IFR_Client_Export CORBA_NativeDef_var : public TAO_Base_var
   {
   public:
-    NativeDef_var (void); // default constructor
-    NativeDef_var (NativeDef_ptr p) : ptr_ (p) {} 
-    NativeDef_var (const NativeDef_var &); // copy constructor
-    ~NativeDef_var (void); // destructor
+      CORBA_NativeDef_var (void); // default constructor
+      CORBA_NativeDef_var (CORBA_NativeDef_ptr p) : ptr_ (p) {}
+      CORBA_NativeDef_var (const CORBA_NativeDef_var &); // copy constructor
+      ~CORBA_NativeDef_var (void); // destructor
     
-    NativeDef_var &operator= (NativeDef_ptr);
-    NativeDef_var &operator= (const NativeDef_var &);
-    NativeDef_ptr operator-> (void) const;
+      CORBA_NativeDef_var &operator= (CORBA_NativeDef_ptr);
+      CORBA_NativeDef_var &operator= (const CORBA_NativeDef_var &);
+      CORBA_NativeDef_ptr operator-> (void) const;
     
-    operator const NativeDef_ptr &() const;
-    operator NativeDef_ptr &();
+      operator const CORBA_NativeDef_ptr &() const;
+      operator CORBA_NativeDef_ptr &();
     // in, inout, out, _retn 
-    NativeDef_ptr in (void) const;
-    NativeDef_ptr &inout (void);
-    NativeDef_ptr &out (void);
-    NativeDef_ptr _retn (void);
-    NativeDef_ptr ptr (void) const;
+      CORBA_NativeDef_ptr in (void) const;
+      CORBA_NativeDef_ptr &inout (void);
+      CORBA_NativeDef_ptr &out (void);
+      CORBA_NativeDef_ptr _retn (void);
+      CORBA_NativeDef_ptr ptr (void) const;
     
     // Hooks used by template sequence and object manager classes
     // for non-defined forward declared interfaces.
-    static NativeDef_ptr tao_duplicate (NativeDef_ptr);
-    static void tao_release (NativeDef_ptr);
-    static NativeDef_ptr tao_nil (void);
-    static NativeDef_ptr tao_narrow (
+      static CORBA_NativeDef_ptr tao_duplicate (CORBA_NativeDef_ptr);
+      static void tao_release (CORBA_NativeDef_ptr);
+      static CORBA_NativeDef_ptr tao_nil (void);
+      static CORBA_NativeDef_ptr tao_narrow (
         CORBA::Object *
         ACE_ENV_ARG_DECL_NOT_USED
       );
     static CORBA::Object * tao_upcast (void *);
   
   private:
-    NativeDef_ptr ptr_;
+      CORBA_NativeDef_ptr ptr_;
     // Unimplemented - prevents widening assignment.
-    NativeDef_var (const TAO_Base_var &rhs);
-    NativeDef_var &operator= (const TAO_Base_var &rhs);
+      CORBA_NativeDef_var (const TAO_Base_var &rhs);
+      CORBA_NativeDef_var &operator= (const TAO_Base_var &rhs);
   };
 
 
@@ -2382,32 +2212,32 @@
 #if !defined (_CORBA_NATIVEDEF___OUT_CH_)
 #define _CORBA_NATIVEDEF___OUT_CH_
   
-  class TAO_IFR_Client_Export NativeDef_out
+    class TAO_IFR_Client_Export CORBA_NativeDef_out
   {
   public:
-    NativeDef_out (NativeDef_ptr &);
-    NativeDef_out (NativeDef_var &);
-    NativeDef_out (const NativeDef_out &);
-    NativeDef_out &operator= (const NativeDef_out &);
-    NativeDef_out &operator= (const NativeDef_var &);
-    NativeDef_out &operator= (NativeDef_ptr);
-    operator NativeDef_ptr &();
-    NativeDef_ptr &ptr (void);
-    NativeDef_ptr operator-> (void);
+      CORBA_NativeDef_out (CORBA_NativeDef_ptr &);
+      CORBA_NativeDef_out (CORBA_NativeDef_var &);
+      CORBA_NativeDef_out (const CORBA_NativeDef_out &);
+      CORBA_NativeDef_out &operator= (const CORBA_NativeDef_out &);
+      CORBA_NativeDef_out &operator= (const CORBA_NativeDef_var &);
+      CORBA_NativeDef_out &operator= (CORBA_NativeDef_ptr);
+      operator CORBA_NativeDef_ptr &();
+      CORBA_NativeDef_ptr &ptr (void);
+      CORBA_NativeDef_ptr operator-> (void);
   
   private:
-    NativeDef_ptr &ptr_;
+      CORBA_NativeDef_ptr &ptr_;
   };
   
   
 #endif /* end #if !defined */
   
-  class ValueDef;
+    class CORBA_ValueDef;
   
 #if !defined (_CORBA_VALUEDEF___PTR_CH_)
 #define _CORBA_VALUEDEF___PTR_CH_
   
-  typedef ValueDef *ValueDef_ptr;
+    typedef CORBA_ValueDef *CORBA_ValueDef_ptr;
   
 #endif /* end #if !defined */
   
@@ -2415,43 +2245,43 @@
 #if !defined (_CORBA_VALUEDEF___VAR_CH_)
 #define _CORBA_VALUEDEF___VAR_CH_
   
-  class TAO_IFR_Client_Export ValueDef_var : public TAO_Base_var
+    class TAO_IFR_Client_Export CORBA_ValueDef_var : public TAO_Base_var
   {
   public:
-    ValueDef_var (void); // default constructor
-    ValueDef_var (ValueDef_ptr p) : ptr_ (p) {} 
-    ValueDef_var (const ValueDef_var &); // copy constructor
-    ~ValueDef_var (void); // destructor
+      CORBA_ValueDef_var (void); // default constructor
+      CORBA_ValueDef_var (CORBA_ValueDef_ptr p) : ptr_ (p) {}
+      CORBA_ValueDef_var (const CORBA_ValueDef_var &); // copy constructor
+      ~CORBA_ValueDef_var (void); // destructor
     
-    ValueDef_var &operator= (ValueDef_ptr);
-    ValueDef_var &operator= (const ValueDef_var &);
-    ValueDef_ptr operator-> (void) const;
+      CORBA_ValueDef_var &operator= (CORBA_ValueDef_ptr);
+      CORBA_ValueDef_var &operator= (const CORBA_ValueDef_var &);
+      CORBA_ValueDef_ptr operator-> (void) const;
     
-    operator const ValueDef_ptr &() const;
-    operator ValueDef_ptr &();
+      operator const CORBA_ValueDef_ptr &() const;
+      operator CORBA_ValueDef_ptr &();
     // in, inout, out, _retn 
-    ValueDef_ptr in (void) const;
-    ValueDef_ptr &inout (void);
-    ValueDef_ptr &out (void);
-    ValueDef_ptr _retn (void);
-    ValueDef_ptr ptr (void) const;
+      CORBA_ValueDef_ptr in (void) const;
+      CORBA_ValueDef_ptr &inout (void);
+      CORBA_ValueDef_ptr &out (void);
+      CORBA_ValueDef_ptr _retn (void);
+      CORBA_ValueDef_ptr ptr (void) const;
     
     // Hooks used by template sequence and object manager classes
     // for non-defined forward declared interfaces.
-    static ValueDef_ptr tao_duplicate (ValueDef_ptr);
-    static void tao_release (ValueDef_ptr);
-    static ValueDef_ptr tao_nil (void);
-    static ValueDef_ptr tao_narrow (
+      static CORBA_ValueDef_ptr tao_duplicate (CORBA_ValueDef_ptr);
+      static void tao_release (CORBA_ValueDef_ptr);
+      static CORBA_ValueDef_ptr tao_nil (void);
+      static CORBA_ValueDef_ptr tao_narrow (
         CORBA::Object *
         ACE_ENV_ARG_DECL_NOT_USED
       );
     static CORBA::Object * tao_upcast (void *);
   
   private:
-    ValueDef_ptr ptr_;
+      CORBA_ValueDef_ptr ptr_;
     // Unimplemented - prevents widening assignment.
-    ValueDef_var (const TAO_Base_var &rhs);
-    ValueDef_var &operator= (const TAO_Base_var &rhs);
+      CORBA_ValueDef_var (const TAO_Base_var &rhs);
+      CORBA_ValueDef_var &operator= (const TAO_Base_var &rhs);
   };
 
 
@@ -2461,21 +2291,21 @@
 #if !defined (_CORBA_VALUEDEF___OUT_CH_)
 #define _CORBA_VALUEDEF___OUT_CH_
   
-  class TAO_IFR_Client_Export ValueDef_out
+    class TAO_IFR_Client_Export CORBA_ValueDef_out
   {
   public:
-    ValueDef_out (ValueDef_ptr &);
-    ValueDef_out (ValueDef_var &);
-    ValueDef_out (const ValueDef_out &);
-    ValueDef_out &operator= (const ValueDef_out &);
-    ValueDef_out &operator= (const ValueDef_var &);
-    ValueDef_out &operator= (ValueDef_ptr);
-    operator ValueDef_ptr &();
-    ValueDef_ptr &ptr (void);
-    ValueDef_ptr operator-> (void);
+      CORBA_ValueDef_out (CORBA_ValueDef_ptr &);
+      CORBA_ValueDef_out (CORBA_ValueDef_var &);
+      CORBA_ValueDef_out (const CORBA_ValueDef_out &);
+      CORBA_ValueDef_out &operator= (const CORBA_ValueDef_out &);
+      CORBA_ValueDef_out &operator= (const CORBA_ValueDef_var &);
+      CORBA_ValueDef_out &operator= (CORBA_ValueDef_ptr);
+      operator CORBA_ValueDef_ptr &();
+      CORBA_ValueDef_ptr &ptr (void);
+      CORBA_ValueDef_ptr operator-> (void);
   
   private:
-    ValueDef_ptr &ptr_;
+      CORBA_ValueDef_ptr &ptr_;
   };
   
   
@@ -2497,7 +2327,7 @@
     _TAO_Unbounded_Object_Sequence_CORBA_ValueDefSeq (
         CORBA::ULong maximum,
         CORBA::ULong length,
-        ValueDef* *value,
+          CORBA_ValueDef* *value,
         CORBA::Boolean release = 0
       );
     _TAO_Unbounded_Object_Sequence_CORBA_ValueDefSeq (
@@ -2509,17 +2339,17 @@
     virtual ~_TAO_Unbounded_Object_Sequence_CORBA_ValueDefSeq (void);
     
     // = Accessors.
-    TAO_Object_Manager<CORBA::ValueDef,CORBA::ValueDef_var> operator[] (CORBA::ULong index) const;
+      TAO_Object_Manager<CORBA_ValueDef,CORBA_ValueDef_var> operator[] (CORBA::ULong index) const;
     
     // = Static operations.
-    static ValueDef **allocbuf (CORBA::ULong nelems);
-    static void freebuf (ValueDef **buffer);
+      static CORBA_ValueDef **allocbuf (CORBA::ULong nelems);
+      static void freebuf (CORBA_ValueDef **buffer);
     
     // Implement the TAO_Base_Sequence methods (see Sequence.h)
     virtual void _allocate_buffer (CORBA::ULong length);
     virtual void _deallocate_buffer (void);
-    ValueDef* *get_buffer (CORBA::Boolean orphan = 0);
-    const ValueDef* *get_buffer (void) const;
+      CORBA_ValueDef* *get_buffer (CORBA::Boolean orphan = 0);
+      const CORBA_ValueDef* *get_buffer (void) const;
     virtual void _shrink_buffer (
         CORBA::ULong nl,
         CORBA::ULong ol
@@ -2528,8 +2358,8 @@
     virtual void _downcast (
         void* target,
         CORBA_Object *src
-        ACE_ENV_ARG_DECL_WITH_DEFAULTS
-      );
+          ACE_ENV_ARG_DECL_WITH_DEFAULTS);
+
     virtual CORBA_Object* _upcast (void *src) const;
   };
   
@@ -2541,35 +2371,35 @@
 #if !defined (_CORBA_VALUEDEFSEQ_CH_)
 #define _CORBA_VALUEDEFSEQ_CH_
   
-  class ValueDefSeq;
-  class ValueDefSeq_var;
+    class CORBA_ValueDefSeq;
+    class CORBA_ValueDefSeq_var;
   
   // *************************************************************
-  // ValueDefSeq
+    // CORBA_ValueDefSeq
   // *************************************************************
   
-  class TAO_IFR_Client_Export ValueDefSeq : public 
+    class TAO_IFR_Client_Export CORBA_ValueDefSeq : public
 #if !defined (TAO_USE_SEQUENCE_TEMPLATES)
   _TAO_Unbounded_Object_Sequence_CORBA_ValueDefSeq
 #else /* TAO_USE_SEQUENCE_TEMPLATES */
-  TAO_Unbounded_Object_Sequence<ValueDef,ValueDef_var>
+    TAO_Unbounded_Object_Sequence<CORBA_ValueDef,CORBA_ValueDef_var>
 #endif /* !TAO_USE_SEQUENCE_TEMPLATES */ 
   {
   public:
-    ValueDefSeq (void); // default ctor
-    ValueDefSeq (CORBA::ULong max); // uses max size
-    ValueDefSeq (
+      CORBA_ValueDefSeq (void); // default ctor
+      CORBA_ValueDefSeq (CORBA::ULong max); // uses max size
+      CORBA_ValueDefSeq (
         CORBA::ULong max, 
         CORBA::ULong length, 
-        ValueDef_ptr *buffer, 
+          CORBA_ValueDef_ptr *buffer,
         CORBA::Boolean release = 0
       );
-    ValueDefSeq (const ValueDefSeq &); // copy ctor
-    ~ValueDefSeq (void);
+      CORBA_ValueDefSeq (const CORBA_ValueDefSeq &); // copy ctor
+      ~CORBA_ValueDefSeq (void);
     static void _tao_any_destructor (void*);
     
 #if !defined(__GNUC__) || !defined (ACE_HAS_GNUG_PRE_2_8)
-    typedef ValueDefSeq_var _var_type;
+      typedef CORBA_ValueDefSeq_var _var_type;
 #endif /* ! __GNUC__ || g++ >= 2.8 */
     
     
@@ -2582,38 +2412,38 @@
 #define _CORBA_VALUEDEFSEQ___VAR_CH_
   
   // *************************************************************
-  // class CORBA::ValueDefSeq_var
+    // class CORBA_ValueDefSeq_var
   // *************************************************************
   
-  class TAO_IFR_Client_Export ValueDefSeq_var
+    class TAO_IFR_Client_Export CORBA_ValueDefSeq_var
   {
   public:
-    ValueDefSeq_var (void);
-    ValueDefSeq_var (ValueDefSeq *);
-    ValueDefSeq_var (const ValueDefSeq_var &);
-    ~ValueDefSeq_var (void);
+      CORBA_ValueDefSeq_var (void);
+      CORBA_ValueDefSeq_var (CORBA_ValueDefSeq *);
+      CORBA_ValueDefSeq_var (const CORBA_ValueDefSeq_var &);
+      ~CORBA_ValueDefSeq_var (void);
     
-    ValueDefSeq_var &operator= (ValueDefSeq *);
-    ValueDefSeq_var &operator= (const ValueDefSeq_var &);
-    ValueDefSeq *operator-> (void);
-    const ValueDefSeq *operator-> (void) const;
+      CORBA_ValueDefSeq_var &operator= (CORBA_ValueDefSeq *);
+      CORBA_ValueDefSeq_var &operator= (const CORBA_ValueDefSeq_var &);
+      CORBA_ValueDefSeq *operator-> (void);
+      const CORBA_ValueDefSeq *operator-> (void) const;
     
-    operator const ValueDefSeq &() const;
-    operator ValueDefSeq &();
-    operator ValueDefSeq &() const;
-    operator ValueDefSeq *&(); // variable-size base types only
+      operator const CORBA_ValueDefSeq &() const;
+      operator CORBA_ValueDefSeq &();
+      operator CORBA_ValueDefSeq &() const;
+      operator CORBA_ValueDefSeq *&(); // variable-size base types only
     
-    TAO_Object_Manager<ValueDef, ValueDef_var> operator[] (CORBA::ULong index);
+      TAO_Object_Manager<CORBA_ValueDef, CORBA_ValueDef_var> operator[] (CORBA::ULong index);
     
     // in, inout, out, _retn 
-    const ValueDefSeq &in (void) const;
-    ValueDefSeq &inout (void);
-    ValueDefSeq *&out (void);
-    ValueDefSeq *_retn (void);
-    ValueDefSeq *ptr (void) const;
+      const CORBA_ValueDefSeq &in (void) const;
+      CORBA_ValueDefSeq &inout (void);
+      CORBA_ValueDefSeq *&out (void);
+      CORBA_ValueDefSeq *_retn (void);
+      CORBA_ValueDefSeq *ptr (void) const;
   
   private:
-    ValueDefSeq *ptr_;
+      CORBA_ValueDefSeq *ptr_;
   };
   
   
@@ -2623,36 +2453,34 @@
 #if !defined (_CORBA_VALUEDEFSEQ___OUT_CH_)
 #define _CORBA_VALUEDEFSEQ___OUT_CH_
   
-  class TAO_IFR_Client_Export ValueDefSeq_out
+    class TAO_IFR_Client_Export CORBA_ValueDefSeq_out
   {
   public:
-    ValueDefSeq_out (ValueDefSeq *&);
-    ValueDefSeq_out (ValueDefSeq_var &);
-    ValueDefSeq_out (const ValueDefSeq_out &);
-    ValueDefSeq_out &operator= (const ValueDefSeq_out &);
-    ValueDefSeq_out &operator= (ValueDefSeq *);
-    operator ValueDefSeq *&();
-    ValueDefSeq *&ptr (void);
-    ValueDefSeq *operator-> (void);
-    TAO_Object_Manager<ValueDef, ValueDef_var> operator[] (CORBA::ULong index);
+      CORBA_ValueDefSeq_out (CORBA_ValueDefSeq *&);
+      CORBA_ValueDefSeq_out (CORBA_ValueDefSeq_var &);
+      CORBA_ValueDefSeq_out (const CORBA_ValueDefSeq_out &);
+      CORBA_ValueDefSeq_out &operator= (const CORBA_ValueDefSeq_out &);
+      CORBA_ValueDefSeq_out &operator= (CORBA_ValueDefSeq *);
+      operator CORBA_ValueDefSeq *&();
+      CORBA_ValueDefSeq *&ptr (void);
+      CORBA_ValueDefSeq *operator-> (void);
+      TAO_Object_Manager<CORBA_ValueDef, CORBA_ValueDef_var> operator[] (CORBA::ULong index);
   
   private:
-    ValueDefSeq *&ptr_;
+      CORBA_ValueDefSeq *&ptr_;
     // Assignment from T_var not allowed.
-    void operator= (const ValueDefSeq_var &);
+      void operator= (const CORBA_ValueDefSeq_var &);
   };
   
   
 #endif /* end #if !defined */
   
-  TAO_NAMESPACE_STORAGE_CLASS ::CORBA::TypeCode_ptr _tc_ValueDefSeq;
-  
-  class ValueBoxDef;
+    class CORBA_ValueBoxDef;
   
 #if !defined (_CORBA_VALUEBOXDEF___PTR_CH_)
 #define _CORBA_VALUEBOXDEF___PTR_CH_
   
-  typedef ValueBoxDef *ValueBoxDef_ptr;
+    typedef CORBA_ValueBoxDef *CORBA_ValueBoxDef_ptr;
   
 #endif /* end #if !defined */
   
@@ -2660,43 +2488,43 @@
 #if !defined (_CORBA_VALUEBOXDEF___VAR_CH_)
 #define _CORBA_VALUEBOXDEF___VAR_CH_
   
-  class TAO_IFR_Client_Export ValueBoxDef_var : public TAO_Base_var
+    class TAO_IFR_Client_Export CORBA_ValueBoxDef_var : public TAO_Base_var
   {
   public:
-    ValueBoxDef_var (void); // default constructor
-    ValueBoxDef_var (ValueBoxDef_ptr p) : ptr_ (p) {} 
-    ValueBoxDef_var (const ValueBoxDef_var &); // copy constructor
-    ~ValueBoxDef_var (void); // destructor
+      CORBA_ValueBoxDef_var (void); // default constructor
+      CORBA_ValueBoxDef_var (CORBA_ValueBoxDef_ptr p) : ptr_ (p) {}
+      CORBA_ValueBoxDef_var (const CORBA_ValueBoxDef_var &); // copy constructor
+      ~CORBA_ValueBoxDef_var (void); // destructor
     
-    ValueBoxDef_var &operator= (ValueBoxDef_ptr);
-    ValueBoxDef_var &operator= (const ValueBoxDef_var &);
-    ValueBoxDef_ptr operator-> (void) const;
+      CORBA_ValueBoxDef_var &operator= (CORBA_ValueBoxDef_ptr);
+      CORBA_ValueBoxDef_var &operator= (const CORBA_ValueBoxDef_var &);
+      CORBA_ValueBoxDef_ptr operator-> (void) const;
     
-    operator const ValueBoxDef_ptr &() const;
-    operator ValueBoxDef_ptr &();
+      operator const CORBA_ValueBoxDef_ptr &() const;
+      operator CORBA_ValueBoxDef_ptr &();
     // in, inout, out, _retn 
-    ValueBoxDef_ptr in (void) const;
-    ValueBoxDef_ptr &inout (void);
-    ValueBoxDef_ptr &out (void);
-    ValueBoxDef_ptr _retn (void);
-    ValueBoxDef_ptr ptr (void) const;
+      CORBA_ValueBoxDef_ptr in (void) const;
+      CORBA_ValueBoxDef_ptr &inout (void);
+      CORBA_ValueBoxDef_ptr &out (void);
+      CORBA_ValueBoxDef_ptr _retn (void);
+      CORBA_ValueBoxDef_ptr ptr (void) const;
     
     // Hooks used by template sequence and object manager classes
     // for non-defined forward declared interfaces.
-    static ValueBoxDef_ptr tao_duplicate (ValueBoxDef_ptr);
-    static void tao_release (ValueBoxDef_ptr);
-    static ValueBoxDef_ptr tao_nil (void);
-    static ValueBoxDef_ptr tao_narrow (
+      static CORBA_ValueBoxDef_ptr tao_duplicate (CORBA_ValueBoxDef_ptr);
+      static void tao_release (CORBA_ValueBoxDef_ptr);
+      static CORBA_ValueBoxDef_ptr tao_nil (void);
+      static CORBA_ValueBoxDef_ptr tao_narrow (
         CORBA::Object *
         ACE_ENV_ARG_DECL_NOT_USED
       );
     static CORBA::Object * tao_upcast (void *);
   
   private:
-    ValueBoxDef_ptr ptr_;
+      CORBA_ValueBoxDef_ptr ptr_;
     // Unimplemented - prevents widening assignment.
-    ValueBoxDef_var (const TAO_Base_var &rhs);
-    ValueBoxDef_var &operator= (const TAO_Base_var &rhs);
+      CORBA_ValueBoxDef_var (const TAO_Base_var &rhs);
+      CORBA_ValueBoxDef_var &operator= (const TAO_Base_var &rhs);
   };
 
 
@@ -2706,32 +2534,32 @@
 #if !defined (_CORBA_VALUEBOXDEF___OUT_CH_)
 #define _CORBA_VALUEBOXDEF___OUT_CH_
   
-  class TAO_IFR_Client_Export ValueBoxDef_out
+    class TAO_IFR_Client_Export CORBA_ValueBoxDef_out
   {
   public:
-    ValueBoxDef_out (ValueBoxDef_ptr &);
-    ValueBoxDef_out (ValueBoxDef_var &);
-    ValueBoxDef_out (const ValueBoxDef_out &);
-    ValueBoxDef_out &operator= (const ValueBoxDef_out &);
-    ValueBoxDef_out &operator= (const ValueBoxDef_var &);
-    ValueBoxDef_out &operator= (ValueBoxDef_ptr);
-    operator ValueBoxDef_ptr &();
-    ValueBoxDef_ptr &ptr (void);
-    ValueBoxDef_ptr operator-> (void);
+      CORBA_ValueBoxDef_out (CORBA_ValueBoxDef_ptr &);
+      CORBA_ValueBoxDef_out (CORBA_ValueBoxDef_var &);
+      CORBA_ValueBoxDef_out (const CORBA_ValueBoxDef_out &);
+      CORBA_ValueBoxDef_out &operator= (const CORBA_ValueBoxDef_out &);
+      CORBA_ValueBoxDef_out &operator= (const CORBA_ValueBoxDef_var &);
+      CORBA_ValueBoxDef_out &operator= (CORBA_ValueBoxDef_ptr);
+      operator CORBA_ValueBoxDef_ptr &();
+      CORBA_ValueBoxDef_ptr &ptr (void);
+      CORBA_ValueBoxDef_ptr operator-> (void);
   
   private:
-    ValueBoxDef_ptr &ptr_;
+      CORBA_ValueBoxDef_ptr &ptr_;
   };
   
   
 #endif /* end #if !defined */
   
-  class AbstractInterfaceDef;
+    class CORBA_AbstractInterfaceDef;
   
 #if !defined (_CORBA_ABSTRACTINTERFACEDEF___PTR_CH_)
 #define _CORBA_ABSTRACTINTERFACEDEF___PTR_CH_
   
-  typedef AbstractInterfaceDef *AbstractInterfaceDef_ptr;
+    typedef CORBA_AbstractInterfaceDef *CORBA_AbstractInterfaceDef_ptr;
   
 #endif /* end #if !defined */
   
@@ -2739,43 +2567,43 @@
 #if !defined (_CORBA_ABSTRACTINTERFACEDEF___VAR_CH_)
 #define _CORBA_ABSTRACTINTERFACEDEF___VAR_CH_
   
-  class TAO_IFR_Client_Export AbstractInterfaceDef_var : public TAO_Base_var
+    class TAO_IFR_Client_Export CORBA_AbstractInterfaceDef_var : public TAO_Base_var
   {
   public:
-    AbstractInterfaceDef_var (void); // default constructor
-    AbstractInterfaceDef_var (AbstractInterfaceDef_ptr p) : ptr_ (p) {} 
-    AbstractInterfaceDef_var (const AbstractInterfaceDef_var &); // copy constructor
-    ~AbstractInterfaceDef_var (void); // destructor
+      CORBA_AbstractInterfaceDef_var (void); // default constructor
+      CORBA_AbstractInterfaceDef_var (CORBA_AbstractInterfaceDef_ptr p) : ptr_ (p) {}
+      CORBA_AbstractInterfaceDef_var (const CORBA_AbstractInterfaceDef_var &); // copy constructor
+      ~CORBA_AbstractInterfaceDef_var (void); // destructor
     
-    AbstractInterfaceDef_var &operator= (AbstractInterfaceDef_ptr);
-    AbstractInterfaceDef_var &operator= (const AbstractInterfaceDef_var &);
-    AbstractInterfaceDef_ptr operator-> (void) const;
+      CORBA_AbstractInterfaceDef_var &operator= (CORBA_AbstractInterfaceDef_ptr);
+      CORBA_AbstractInterfaceDef_var &operator= (const CORBA_AbstractInterfaceDef_var &);
+      CORBA_AbstractInterfaceDef_ptr operator-> (void) const;
     
-    operator const AbstractInterfaceDef_ptr &() const;
-    operator AbstractInterfaceDef_ptr &();
+      operator const CORBA_AbstractInterfaceDef_ptr &() const;
+      operator CORBA_AbstractInterfaceDef_ptr &();
     // in, inout, out, _retn 
-    AbstractInterfaceDef_ptr in (void) const;
-    AbstractInterfaceDef_ptr &inout (void);
-    AbstractInterfaceDef_ptr &out (void);
-    AbstractInterfaceDef_ptr _retn (void);
-    AbstractInterfaceDef_ptr ptr (void) const;
+      CORBA_AbstractInterfaceDef_ptr in (void) const;
+      CORBA_AbstractInterfaceDef_ptr &inout (void);
+      CORBA_AbstractInterfaceDef_ptr &out (void);
+      CORBA_AbstractInterfaceDef_ptr _retn (void);
+      CORBA_AbstractInterfaceDef_ptr ptr (void) const;
     
     // Hooks used by template sequence and object manager classes
     // for non-defined forward declared interfaces.
-    static AbstractInterfaceDef_ptr tao_duplicate (AbstractInterfaceDef_ptr);
-    static void tao_release (AbstractInterfaceDef_ptr);
-    static AbstractInterfaceDef_ptr tao_nil (void);
-    static AbstractInterfaceDef_ptr tao_narrow (
+      static CORBA_AbstractInterfaceDef_ptr tao_duplicate (CORBA_AbstractInterfaceDef_ptr);
+      static void tao_release (CORBA_AbstractInterfaceDef_ptr);
+      static CORBA_AbstractInterfaceDef_ptr tao_nil (void);
+      static CORBA_AbstractInterfaceDef_ptr tao_narrow (
         CORBA::Object *
         ACE_ENV_ARG_DECL_NOT_USED
       );
     static CORBA::Object * tao_upcast (void *);
   
   private:
-    AbstractInterfaceDef_ptr ptr_;
+      CORBA_AbstractInterfaceDef_ptr ptr_;
     // Unimplemented - prevents widening assignment.
-    AbstractInterfaceDef_var (const TAO_Base_var &rhs);
-    AbstractInterfaceDef_var &operator= (const TAO_Base_var &rhs);
+      CORBA_AbstractInterfaceDef_var (const TAO_Base_var &rhs);
+      CORBA_AbstractInterfaceDef_var &operator= (const TAO_Base_var &rhs);
   };
 
 
@@ -2785,21 +2613,21 @@
 #if !defined (_CORBA_ABSTRACTINTERFACEDEF___OUT_CH_)
 #define _CORBA_ABSTRACTINTERFACEDEF___OUT_CH_
   
-  class TAO_IFR_Client_Export AbstractInterfaceDef_out
+    class TAO_IFR_Client_Export CORBA_AbstractInterfaceDef_out
   {
   public:
-    AbstractInterfaceDef_out (AbstractInterfaceDef_ptr &);
-    AbstractInterfaceDef_out (AbstractInterfaceDef_var &);
-    AbstractInterfaceDef_out (const AbstractInterfaceDef_out &);
-    AbstractInterfaceDef_out &operator= (const AbstractInterfaceDef_out &);
-    AbstractInterfaceDef_out &operator= (const AbstractInterfaceDef_var &);
-    AbstractInterfaceDef_out &operator= (AbstractInterfaceDef_ptr);
-    operator AbstractInterfaceDef_ptr &();
-    AbstractInterfaceDef_ptr &ptr (void);
-    AbstractInterfaceDef_ptr operator-> (void);
+      CORBA_AbstractInterfaceDef_out (CORBA_AbstractInterfaceDef_ptr &);
+      CORBA_AbstractInterfaceDef_out (CORBA_AbstractInterfaceDef_var &);
+      CORBA_AbstractInterfaceDef_out (const CORBA_AbstractInterfaceDef_out &);
+      CORBA_AbstractInterfaceDef_out &operator= (const CORBA_AbstractInterfaceDef_out &);
+      CORBA_AbstractInterfaceDef_out &operator= (const CORBA_AbstractInterfaceDef_var &);
+      CORBA_AbstractInterfaceDef_out &operator= (CORBA_AbstractInterfaceDef_ptr);
+      operator CORBA_AbstractInterfaceDef_ptr &();
+      CORBA_AbstractInterfaceDef_ptr &ptr (void);
+      CORBA_AbstractInterfaceDef_ptr operator-> (void);
   
   private:
-    AbstractInterfaceDef_ptr &ptr_;
+      CORBA_AbstractInterfaceDef_ptr &ptr_;
   };
   
   
@@ -2821,7 +2649,7 @@
     _TAO_Unbounded_Object_Sequence_CORBA_AbstractInterfaceDefSeq (
         CORBA::ULong maximum,
         CORBA::ULong length,
-        AbstractInterfaceDef* *value,
+          CORBA_AbstractInterfaceDef* *value,
         CORBA::Boolean release = 0
       );
     _TAO_Unbounded_Object_Sequence_CORBA_AbstractInterfaceDefSeq (
@@ -2833,17 +2661,17 @@
     virtual ~_TAO_Unbounded_Object_Sequence_CORBA_AbstractInterfaceDefSeq (void);
     
     // = Accessors.
-    TAO_Object_Manager<CORBA::AbstractInterfaceDef,CORBA::AbstractInterfaceDef_var> operator[] (CORBA::ULong index) const;
+      TAO_Object_Manager<CORBA_AbstractInterfaceDef,CORBA_AbstractInterfaceDef_var> operator[] (CORBA::ULong index) const;
     
     // = Static operations.
-    static AbstractInterfaceDef **allocbuf (CORBA::ULong nelems);
-    static void freebuf (AbstractInterfaceDef **buffer);
+      static CORBA_AbstractInterfaceDef **allocbuf (CORBA::ULong nelems);
+      static void freebuf (CORBA_AbstractInterfaceDef **buffer);
     
     // Implement the TAO_Base_Sequence methods (see Sequence.h)
     virtual void _allocate_buffer (CORBA::ULong length);
     virtual void _deallocate_buffer (void);
-    AbstractInterfaceDef* *get_buffer (CORBA::Boolean orphan = 0);
-    const AbstractInterfaceDef* *get_buffer (void) const;
+      CORBA_AbstractInterfaceDef* *get_buffer (CORBA::Boolean orphan = 0);
+      const CORBA_AbstractInterfaceDef* *get_buffer (void) const;
     virtual void _shrink_buffer (
         CORBA::ULong nl,
         CORBA::ULong ol
@@ -2852,8 +2680,8 @@
     virtual void _downcast (
         void* target,
         CORBA_Object *src
-        ACE_ENV_ARG_DECL_WITH_DEFAULTS
-      );
+          ACE_ENV_ARG_DECL_WITH_DEFAULTS);
+
     virtual CORBA_Object* _upcast (void *src) const;
   };
   
@@ -2865,35 +2693,35 @@
 #if !defined (_CORBA_ABSTRACTINTERFACEDEFSEQ_CH_)
 #define _CORBA_ABSTRACTINTERFACEDEFSEQ_CH_
   
-  class AbstractInterfaceDefSeq;
-  class AbstractInterfaceDefSeq_var;
+    class CORBA_AbstractInterfaceDefSeq;
+    class CORBA_AbstractInterfaceDefSeq_var;
   
   // *************************************************************
-  // AbstractInterfaceDefSeq
+    // CORBA_AbstractInterfaceDefSeq
   // *************************************************************
   
-  class TAO_IFR_Client_Export AbstractInterfaceDefSeq : public 
+    class TAO_IFR_Client_Export CORBA_AbstractInterfaceDefSeq : public
 #if !defined (TAO_USE_SEQUENCE_TEMPLATES)
   _TAO_Unbounded_Object_Sequence_CORBA_AbstractInterfaceDefSeq
 #else /* TAO_USE_SEQUENCE_TEMPLATES */
-  TAO_Unbounded_Object_Sequence<AbstractInterfaceDef,AbstractInterfaceDef_var>
+    TAO_Unbounded_Object_Sequence<CORBA_AbstractInterfaceDef,CORBA_AbstractInterfaceDef_var>
 #endif /* !TAO_USE_SEQUENCE_TEMPLATES */ 
   {
   public:
-    AbstractInterfaceDefSeq (void); // default ctor
-    AbstractInterfaceDefSeq (CORBA::ULong max); // uses max size
-    AbstractInterfaceDefSeq (
+      CORBA_AbstractInterfaceDefSeq (void); // default ctor
+      CORBA_AbstractInterfaceDefSeq (CORBA::ULong max); // uses max size
+      CORBA_AbstractInterfaceDefSeq (
         CORBA::ULong max, 
         CORBA::ULong length, 
-        AbstractInterfaceDef_ptr *buffer, 
+          CORBA_AbstractInterfaceDef_ptr *buffer,
         CORBA::Boolean release = 0
       );
-    AbstractInterfaceDefSeq (const AbstractInterfaceDefSeq &); // copy ctor
-    ~AbstractInterfaceDefSeq (void);
+      CORBA_AbstractInterfaceDefSeq (const CORBA_AbstractInterfaceDefSeq &); // copy ctor
+      ~CORBA_AbstractInterfaceDefSeq (void);
     static void _tao_any_destructor (void*);
     
 #if !defined(__GNUC__) || !defined (ACE_HAS_GNUG_PRE_2_8)
-    typedef AbstractInterfaceDefSeq_var _var_type;
+      typedef CORBA_AbstractInterfaceDefSeq_var _var_type;
 #endif /* ! __GNUC__ || g++ >= 2.8 */
     
     
@@ -2906,38 +2734,38 @@
 #define _CORBA_ABSTRACTINTERFACEDEFSEQ___VAR_CH_
   
   // *************************************************************
-  // class CORBA::AbstractInterfaceDefSeq_var
+    // class CORBA_AbstractInterfaceDefSeq_var
   // *************************************************************
   
-  class TAO_IFR_Client_Export AbstractInterfaceDefSeq_var
+    class TAO_IFR_Client_Export CORBA_AbstractInterfaceDefSeq_var
   {
   public:
-    AbstractInterfaceDefSeq_var (void);
-    AbstractInterfaceDefSeq_var (AbstractInterfaceDefSeq *);
-    AbstractInterfaceDefSeq_var (const AbstractInterfaceDefSeq_var &);
-    ~AbstractInterfaceDefSeq_var (void);
+      CORBA_AbstractInterfaceDefSeq_var (void);
+      CORBA_AbstractInterfaceDefSeq_var (CORBA_AbstractInterfaceDefSeq *);
+      CORBA_AbstractInterfaceDefSeq_var (const CORBA_AbstractInterfaceDefSeq_var &);
+      ~CORBA_AbstractInterfaceDefSeq_var (void);
     
-    AbstractInterfaceDefSeq_var &operator= (AbstractInterfaceDefSeq *);
-    AbstractInterfaceDefSeq_var &operator= (const AbstractInterfaceDefSeq_var &);
-    AbstractInterfaceDefSeq *operator-> (void);
-    const AbstractInterfaceDefSeq *operator-> (void) const;
+      CORBA_AbstractInterfaceDefSeq_var &operator= (CORBA_AbstractInterfaceDefSeq *);
+      CORBA_AbstractInterfaceDefSeq_var &operator= (const CORBA_AbstractInterfaceDefSeq_var &);
+      CORBA_AbstractInterfaceDefSeq *operator-> (void);
+      const CORBA_AbstractInterfaceDefSeq *operator-> (void) const;
     
-    operator const AbstractInterfaceDefSeq &() const;
-    operator AbstractInterfaceDefSeq &();
-    operator AbstractInterfaceDefSeq &() const;
-    operator AbstractInterfaceDefSeq *&(); // variable-size base types only
+      operator const CORBA_AbstractInterfaceDefSeq &() const;
+      operator CORBA_AbstractInterfaceDefSeq &();
+      operator CORBA_AbstractInterfaceDefSeq &() const;
+      operator CORBA_AbstractInterfaceDefSeq *&(); // variable-size base types only
     
-    TAO_Object_Manager<AbstractInterfaceDef, AbstractInterfaceDef_var> operator[] (CORBA::ULong index);
+      TAO_Object_Manager<CORBA_AbstractInterfaceDef, CORBA_AbstractInterfaceDef_var> operator[] (CORBA::ULong index);
     
     // in, inout, out, _retn 
-    const AbstractInterfaceDefSeq &in (void) const;
-    AbstractInterfaceDefSeq &inout (void);
-    AbstractInterfaceDefSeq *&out (void);
-    AbstractInterfaceDefSeq *_retn (void);
-    AbstractInterfaceDefSeq *ptr (void) const;
+      const CORBA_AbstractInterfaceDefSeq &in (void) const;
+      CORBA_AbstractInterfaceDefSeq &inout (void);
+      CORBA_AbstractInterfaceDefSeq *&out (void);
+      CORBA_AbstractInterfaceDefSeq *_retn (void);
+      CORBA_AbstractInterfaceDefSeq *ptr (void) const;
   
   private:
-    AbstractInterfaceDefSeq *ptr_;
+      CORBA_AbstractInterfaceDefSeq *ptr_;
   };
   
   
@@ -2947,36 +2775,34 @@
 #if !defined (_CORBA_ABSTRACTINTERFACEDEFSEQ___OUT_CH_)
 #define _CORBA_ABSTRACTINTERFACEDEFSEQ___OUT_CH_
   
-  class TAO_IFR_Client_Export AbstractInterfaceDefSeq_out
+    class TAO_IFR_Client_Export CORBA_AbstractInterfaceDefSeq_out
   {
   public:
-    AbstractInterfaceDefSeq_out (AbstractInterfaceDefSeq *&);
-    AbstractInterfaceDefSeq_out (AbstractInterfaceDefSeq_var &);
-    AbstractInterfaceDefSeq_out (const AbstractInterfaceDefSeq_out &);
-    AbstractInterfaceDefSeq_out &operator= (const AbstractInterfaceDefSeq_out &);
-    AbstractInterfaceDefSeq_out &operator= (AbstractInterfaceDefSeq *);
-    operator AbstractInterfaceDefSeq *&();
-    AbstractInterfaceDefSeq *&ptr (void);
-    AbstractInterfaceDefSeq *operator-> (void);
-    TAO_Object_Manager<AbstractInterfaceDef, AbstractInterfaceDef_var> operator[] (CORBA::ULong index);
+      CORBA_AbstractInterfaceDefSeq_out (CORBA_AbstractInterfaceDefSeq *&);
+      CORBA_AbstractInterfaceDefSeq_out (CORBA_AbstractInterfaceDefSeq_var &);
+      CORBA_AbstractInterfaceDefSeq_out (const CORBA_AbstractInterfaceDefSeq_out &);
+      CORBA_AbstractInterfaceDefSeq_out &operator= (const CORBA_AbstractInterfaceDefSeq_out &);
+      CORBA_AbstractInterfaceDefSeq_out &operator= (CORBA_AbstractInterfaceDefSeq *);
+      operator CORBA_AbstractInterfaceDefSeq *&();
+      CORBA_AbstractInterfaceDefSeq *&ptr (void);
+      CORBA_AbstractInterfaceDefSeq *operator-> (void);
+      TAO_Object_Manager<CORBA_AbstractInterfaceDef, CORBA_AbstractInterfaceDef_var> operator[] (CORBA::ULong index);
   
   private:
-    AbstractInterfaceDefSeq *&ptr_;
+      CORBA_AbstractInterfaceDefSeq *&ptr_;
     // Assignment from T_var not allowed.
-    void operator= (const AbstractInterfaceDefSeq_var &);
+      void operator= (const CORBA_AbstractInterfaceDefSeq_var &);
   };
   
   
 #endif /* end #if !defined */
   
-  TAO_NAMESPACE_STORAGE_CLASS ::CORBA::TypeCode_ptr _tc_AbstractInterfaceDefSeq;
-  
-  class LocalInterfaceDef;
+    class CORBA_LocalInterfaceDef;
   
 #if !defined (_CORBA_LOCALINTERFACEDEF___PTR_CH_)
 #define _CORBA_LOCALINTERFACEDEF___PTR_CH_
   
-  typedef LocalInterfaceDef *LocalInterfaceDef_ptr;
+    typedef CORBA_LocalInterfaceDef *CORBA_LocalInterfaceDef_ptr;
   
 #endif /* end #if !defined */
   
@@ -2984,43 +2810,43 @@
 #if !defined (_CORBA_LOCALINTERFACEDEF___VAR_CH_)
 #define _CORBA_LOCALINTERFACEDEF___VAR_CH_
   
-  class TAO_IFR_Client_Export LocalInterfaceDef_var : public TAO_Base_var
+    class TAO_IFR_Client_Export CORBA_LocalInterfaceDef_var : public TAO_Base_var
   {
   public:
-    LocalInterfaceDef_var (void); // default constructor
-    LocalInterfaceDef_var (LocalInterfaceDef_ptr p) : ptr_ (p) {} 
-    LocalInterfaceDef_var (const LocalInterfaceDef_var &); // copy constructor
-    ~LocalInterfaceDef_var (void); // destructor
+      CORBA_LocalInterfaceDef_var (void); // default constructor
+      CORBA_LocalInterfaceDef_var (CORBA_LocalInterfaceDef_ptr p) : ptr_ (p) {}
+      CORBA_LocalInterfaceDef_var (const CORBA_LocalInterfaceDef_var &); // copy constructor
+      ~CORBA_LocalInterfaceDef_var (void); // destructor
     
-    LocalInterfaceDef_var &operator= (LocalInterfaceDef_ptr);
-    LocalInterfaceDef_var &operator= (const LocalInterfaceDef_var &);
-    LocalInterfaceDef_ptr operator-> (void) const;
+      CORBA_LocalInterfaceDef_var &operator= (CORBA_LocalInterfaceDef_ptr);
+      CORBA_LocalInterfaceDef_var &operator= (const CORBA_LocalInterfaceDef_var &);
+      CORBA_LocalInterfaceDef_ptr operator-> (void) const;
     
-    operator const LocalInterfaceDef_ptr &() const;
-    operator LocalInterfaceDef_ptr &();
+      operator const CORBA_LocalInterfaceDef_ptr &() const;
+      operator CORBA_LocalInterfaceDef_ptr &();
     // in, inout, out, _retn 
-    LocalInterfaceDef_ptr in (void) const;
-    LocalInterfaceDef_ptr &inout (void);
-    LocalInterfaceDef_ptr &out (void);
-    LocalInterfaceDef_ptr _retn (void);
-    LocalInterfaceDef_ptr ptr (void) const;
+      CORBA_LocalInterfaceDef_ptr in (void) const;
+      CORBA_LocalInterfaceDef_ptr &inout (void);
+      CORBA_LocalInterfaceDef_ptr &out (void);
+      CORBA_LocalInterfaceDef_ptr _retn (void);
+      CORBA_LocalInterfaceDef_ptr ptr (void) const;
     
     // Hooks used by template sequence and object manager classes
     // for non-defined forward declared interfaces.
-    static LocalInterfaceDef_ptr tao_duplicate (LocalInterfaceDef_ptr);
-    static void tao_release (LocalInterfaceDef_ptr);
-    static LocalInterfaceDef_ptr tao_nil (void);
-    static LocalInterfaceDef_ptr tao_narrow (
+      static CORBA_LocalInterfaceDef_ptr tao_duplicate (CORBA_LocalInterfaceDef_ptr);
+      static void tao_release (CORBA_LocalInterfaceDef_ptr);
+      static CORBA_LocalInterfaceDef_ptr tao_nil (void);
+      static CORBA_LocalInterfaceDef_ptr tao_narrow (
         CORBA::Object *
         ACE_ENV_ARG_DECL_NOT_USED
       );
     static CORBA::Object * tao_upcast (void *);
   
   private:
-    LocalInterfaceDef_ptr ptr_;
+      CORBA_LocalInterfaceDef_ptr ptr_;
     // Unimplemented - prevents widening assignment.
-    LocalInterfaceDef_var (const TAO_Base_var &rhs);
-    LocalInterfaceDef_var &operator= (const TAO_Base_var &rhs);
+      CORBA_LocalInterfaceDef_var (const TAO_Base_var &rhs);
+      CORBA_LocalInterfaceDef_var &operator= (const TAO_Base_var &rhs);
   };
 
 
@@ -3030,21 +2856,21 @@
 #if !defined (_CORBA_LOCALINTERFACEDEF___OUT_CH_)
 #define _CORBA_LOCALINTERFACEDEF___OUT_CH_
   
-  class TAO_IFR_Client_Export LocalInterfaceDef_out
+    class TAO_IFR_Client_Export CORBA_LocalInterfaceDef_out
   {
   public:
-    LocalInterfaceDef_out (LocalInterfaceDef_ptr &);
-    LocalInterfaceDef_out (LocalInterfaceDef_var &);
-    LocalInterfaceDef_out (const LocalInterfaceDef_out &);
-    LocalInterfaceDef_out &operator= (const LocalInterfaceDef_out &);
-    LocalInterfaceDef_out &operator= (const LocalInterfaceDef_var &);
-    LocalInterfaceDef_out &operator= (LocalInterfaceDef_ptr);
-    operator LocalInterfaceDef_ptr &();
-    LocalInterfaceDef_ptr &ptr (void);
-    LocalInterfaceDef_ptr operator-> (void);
+      CORBA_LocalInterfaceDef_out (CORBA_LocalInterfaceDef_ptr &);
+      CORBA_LocalInterfaceDef_out (CORBA_LocalInterfaceDef_var &);
+      CORBA_LocalInterfaceDef_out (const CORBA_LocalInterfaceDef_out &);
+      CORBA_LocalInterfaceDef_out &operator= (const CORBA_LocalInterfaceDef_out &);
+      CORBA_LocalInterfaceDef_out &operator= (const CORBA_LocalInterfaceDef_var &);
+      CORBA_LocalInterfaceDef_out &operator= (CORBA_LocalInterfaceDef_ptr);
+      operator CORBA_LocalInterfaceDef_ptr &();
+      CORBA_LocalInterfaceDef_ptr &ptr (void);
+      CORBA_LocalInterfaceDef_ptr operator-> (void);
   
   private:
-    LocalInterfaceDef_ptr &ptr_;
+      CORBA_LocalInterfaceDef_ptr &ptr_;
   };
   
   
@@ -3066,7 +2892,7 @@
     _TAO_Unbounded_Object_Sequence_CORBA_LocalInterfaceDefSeq (
         CORBA::ULong maximum,
         CORBA::ULong length,
-        LocalInterfaceDef* *value,
+          CORBA_LocalInterfaceDef* *value,
         CORBA::Boolean release = 0
       );
     _TAO_Unbounded_Object_Sequence_CORBA_LocalInterfaceDefSeq (
@@ -3078,17 +2904,17 @@
     virtual ~_TAO_Unbounded_Object_Sequence_CORBA_LocalInterfaceDefSeq (void);
     
     // = Accessors.
-    TAO_Object_Manager<CORBA::LocalInterfaceDef,CORBA::LocalInterfaceDef_var> operator[] (CORBA::ULong index) const;
+      TAO_Object_Manager<CORBA_LocalInterfaceDef,CORBA_LocalInterfaceDef_var> operator[] (CORBA::ULong index) const;
     
     // = Static operations.
-    static LocalInterfaceDef **allocbuf (CORBA::ULong nelems);
-    static void freebuf (LocalInterfaceDef **buffer);
+      static CORBA_LocalInterfaceDef **allocbuf (CORBA::ULong nelems);
+      static void freebuf (CORBA_LocalInterfaceDef **buffer);
     
     // Implement the TAO_Base_Sequence methods (see Sequence.h)
     virtual void _allocate_buffer (CORBA::ULong length);
     virtual void _deallocate_buffer (void);
-    LocalInterfaceDef* *get_buffer (CORBA::Boolean orphan = 0);
-    const LocalInterfaceDef* *get_buffer (void) const;
+      CORBA_LocalInterfaceDef* *get_buffer (CORBA::Boolean orphan = 0);
+      const CORBA_LocalInterfaceDef* *get_buffer (void) const;
     virtual void _shrink_buffer (
         CORBA::ULong nl,
         CORBA::ULong ol
@@ -3097,8 +2923,8 @@
     virtual void _downcast (
         void* target,
         CORBA_Object *src
-        ACE_ENV_ARG_DECL_WITH_DEFAULTS
-      );
+          ACE_ENV_ARG_DECL_WITH_DEFAULTS);
+
     virtual CORBA_Object* _upcast (void *src) const;
   };
   
@@ -3110,35 +2936,35 @@
 #if !defined (_CORBA_LOCALINTERFACEDEFSEQ_CH_)
 #define _CORBA_LOCALINTERFACEDEFSEQ_CH_
   
-  class LocalInterfaceDefSeq;
-  class LocalInterfaceDefSeq_var;
+    class CORBA_LocalInterfaceDefSeq;
+    class CORBA_LocalInterfaceDefSeq_var;
   
   // *************************************************************
-  // LocalInterfaceDefSeq
+    // CORBA_LocalInterfaceDefSeq
   // *************************************************************
   
-  class TAO_IFR_Client_Export LocalInterfaceDefSeq : public 
+    class TAO_IFR_Client_Export CORBA_LocalInterfaceDefSeq : public
 #if !defined (TAO_USE_SEQUENCE_TEMPLATES)
   _TAO_Unbounded_Object_Sequence_CORBA_LocalInterfaceDefSeq
 #else /* TAO_USE_SEQUENCE_TEMPLATES */
-  TAO_Unbounded_Object_Sequence<LocalInterfaceDef,LocalInterfaceDef_var>
+    TAO_Unbounded_Object_Sequence<CORBA_LocalInterfaceDef,CORBA_LocalInterfaceDef_var>
 #endif /* !TAO_USE_SEQUENCE_TEMPLATES */ 
   {
   public:
-    LocalInterfaceDefSeq (void); // default ctor
-    LocalInterfaceDefSeq (CORBA::ULong max); // uses max size
-    LocalInterfaceDefSeq (
+      CORBA_LocalInterfaceDefSeq (void); // default ctor
+      CORBA_LocalInterfaceDefSeq (CORBA::ULong max); // uses max size
+      CORBA_LocalInterfaceDefSeq (
         CORBA::ULong max, 
         CORBA::ULong length, 
-        LocalInterfaceDef_ptr *buffer, 
+          CORBA_LocalInterfaceDef_ptr *buffer,
         CORBA::Boolean release = 0
       );
-    LocalInterfaceDefSeq (const LocalInterfaceDefSeq &); // copy ctor
-    ~LocalInterfaceDefSeq (void);
+      CORBA_LocalInterfaceDefSeq (const CORBA_LocalInterfaceDefSeq &); // copy ctor
+      ~CORBA_LocalInterfaceDefSeq (void);
     static void _tao_any_destructor (void*);
     
 #if !defined(__GNUC__) || !defined (ACE_HAS_GNUG_PRE_2_8)
-    typedef LocalInterfaceDefSeq_var _var_type;
+      typedef CORBA_LocalInterfaceDefSeq_var _var_type;
 #endif /* ! __GNUC__ || g++ >= 2.8 */
     
     
@@ -3151,38 +2977,38 @@
 #define _CORBA_LOCALINTERFACEDEFSEQ___VAR_CH_
   
   // *************************************************************
-  // class CORBA::LocalInterfaceDefSeq_var
+    // class CORBA_LocalInterfaceDefSeq_var
   // *************************************************************
   
-  class TAO_IFR_Client_Export LocalInterfaceDefSeq_var
+    class TAO_IFR_Client_Export CORBA_LocalInterfaceDefSeq_var
   {
   public:
-    LocalInterfaceDefSeq_var (void);
-    LocalInterfaceDefSeq_var (LocalInterfaceDefSeq *);
-    LocalInterfaceDefSeq_var (const LocalInterfaceDefSeq_var &);
-    ~LocalInterfaceDefSeq_var (void);
+      CORBA_LocalInterfaceDefSeq_var (void);
+      CORBA_LocalInterfaceDefSeq_var (CORBA_LocalInterfaceDefSeq *);
+      CORBA_LocalInterfaceDefSeq_var (const CORBA_LocalInterfaceDefSeq_var &);
+      ~CORBA_LocalInterfaceDefSeq_var (void);
     
-    LocalInterfaceDefSeq_var &operator= (LocalInterfaceDefSeq *);
-    LocalInterfaceDefSeq_var &operator= (const LocalInterfaceDefSeq_var &);
-    LocalInterfaceDefSeq *operator-> (void);
-    const LocalInterfaceDefSeq *operator-> (void) const;
+      CORBA_LocalInterfaceDefSeq_var &operator= (CORBA_LocalInterfaceDefSeq *);
+      CORBA_LocalInterfaceDefSeq_var &operator= (const CORBA_LocalInterfaceDefSeq_var &);
+      CORBA_LocalInterfaceDefSeq *operator-> (void);
+      const CORBA_LocalInterfaceDefSeq *operator-> (void) const;
     
-    operator const LocalInterfaceDefSeq &() const;
-    operator LocalInterfaceDefSeq &();
-    operator LocalInterfaceDefSeq &() const;
-    operator LocalInterfaceDefSeq *&(); // variable-size base types only
+      operator const CORBA_LocalInterfaceDefSeq &() const;
+      operator CORBA_LocalInterfaceDefSeq &();
+      operator CORBA_LocalInterfaceDefSeq &() const;
+      operator CORBA_LocalInterfaceDefSeq *&(); // variable-size base types only
     
-    TAO_Object_Manager<LocalInterfaceDef, LocalInterfaceDef_var> operator[] (CORBA::ULong index);
+      TAO_Object_Manager<CORBA_LocalInterfaceDef, CORBA_LocalInterfaceDef_var> operator[] (CORBA::ULong index);
     
     // in, inout, out, _retn 
-    const LocalInterfaceDefSeq &in (void) const;
-    LocalInterfaceDefSeq &inout (void);
-    LocalInterfaceDefSeq *&out (void);
-    LocalInterfaceDefSeq *_retn (void);
-    LocalInterfaceDefSeq *ptr (void) const;
+      const CORBA_LocalInterfaceDefSeq &in (void) const;
+      CORBA_LocalInterfaceDefSeq &inout (void);
+      CORBA_LocalInterfaceDefSeq *&out (void);
+      CORBA_LocalInterfaceDefSeq *_retn (void);
+      CORBA_LocalInterfaceDefSeq *ptr (void) const;
   
   private:
-    LocalInterfaceDefSeq *ptr_;
+      CORBA_LocalInterfaceDefSeq *ptr_;
   };
   
   
@@ -3192,105 +3018,101 @@
 #if !defined (_CORBA_LOCALINTERFACEDEFSEQ___OUT_CH_)
 #define _CORBA_LOCALINTERFACEDEFSEQ___OUT_CH_
   
-  class TAO_IFR_Client_Export LocalInterfaceDefSeq_out
+    class TAO_IFR_Client_Export CORBA_LocalInterfaceDefSeq_out
   {
   public:
-    LocalInterfaceDefSeq_out (LocalInterfaceDefSeq *&);
-    LocalInterfaceDefSeq_out (LocalInterfaceDefSeq_var &);
-    LocalInterfaceDefSeq_out (const LocalInterfaceDefSeq_out &);
-    LocalInterfaceDefSeq_out &operator= (const LocalInterfaceDefSeq_out &);
-    LocalInterfaceDefSeq_out &operator= (LocalInterfaceDefSeq *);
-    operator LocalInterfaceDefSeq *&();
-    LocalInterfaceDefSeq *&ptr (void);
-    LocalInterfaceDefSeq *operator-> (void);
-    TAO_Object_Manager<LocalInterfaceDef, LocalInterfaceDef_var> operator[] (CORBA::ULong index);
+      CORBA_LocalInterfaceDefSeq_out (CORBA_LocalInterfaceDefSeq *&);
+      CORBA_LocalInterfaceDefSeq_out (CORBA_LocalInterfaceDefSeq_var &);
+      CORBA_LocalInterfaceDefSeq_out (const CORBA_LocalInterfaceDefSeq_out &);
+      CORBA_LocalInterfaceDefSeq_out &operator= (const CORBA_LocalInterfaceDefSeq_out &);
+      CORBA_LocalInterfaceDefSeq_out &operator= (CORBA_LocalInterfaceDefSeq *);
+      operator CORBA_LocalInterfaceDefSeq *&();
+      CORBA_LocalInterfaceDefSeq *&ptr (void);
+      CORBA_LocalInterfaceDefSeq *operator-> (void);
+      TAO_Object_Manager<CORBA_LocalInterfaceDef, CORBA_LocalInterfaceDef_var> operator[] (CORBA::ULong index);
   
   private:
-    LocalInterfaceDefSeq *&ptr_;
+      CORBA_LocalInterfaceDefSeq *&ptr_;
     // Assignment from T_var not allowed.
-    void operator= (const LocalInterfaceDefSeq_var &);
+      void operator= (const CORBA_LocalInterfaceDefSeq_var &);
   };
   
   
 #endif /* end #if !defined */
   
-  TAO_NAMESPACE_STORAGE_CLASS ::CORBA::TypeCode_ptr _tc_LocalInterfaceDefSeq;
-  
-  struct StructMember;
-  class StructMember_var;
+    struct CORBA_StructMember;
+    class CORBA_StructMember_var;
   
-  struct TAO_IFR_Client_Export StructMember
+    struct TAO_IFR_Client_Export CORBA_StructMember
   {
     
 #if !defined(__GNUC__) || !defined (ACE_HAS_GNUG_PRE_2_8)
-    typedef StructMember_var _var_type;
+      typedef CORBA_StructMember_var _var_type;
 #endif /* ! __GNUC__ || g++ >= 2.8 */
 
     static void _tao_any_destructor (void*);
     
     TAO_String_Manager name;
     CORBA::TypeCode_var type;
-    ACE_NESTED_CLASS (CORBA, IDLType_var) type_def;
+      CORBA_IDLType_var type_def;
     
   };
   
-  class TAO_IFR_Client_Export StructMember_var
+    class TAO_IFR_Client_Export CORBA_StructMember_var
   {
   public:
-    StructMember_var (void);
-    StructMember_var (StructMember *);
-    StructMember_var (const StructMember_var &);
-    ~StructMember_var (void);
+      CORBA_StructMember_var (void);
+      CORBA_StructMember_var (CORBA_StructMember *);
+      CORBA_StructMember_var (const CORBA_StructMember_var &);
+      ~CORBA_StructMember_var (void);
     
-    StructMember_var &operator= (StructMember *);
-    StructMember_var &operator= (const StructMember_var &);
-    StructMember *operator-> (void);
-    const StructMember *operator-> (void) const;
+      CORBA_StructMember_var &operator= (CORBA_StructMember *);
+      CORBA_StructMember_var &operator= (const CORBA_StructMember_var &);
+      CORBA_StructMember *operator-> (void);
+      const CORBA_StructMember *operator-> (void) const;
     
-    operator const StructMember &() const;
-    operator StructMember &();
-    operator StructMember &() const;
+      operator const CORBA_StructMember &() const;
+      operator CORBA_StructMember &();
+      operator CORBA_StructMember &() const;
     // Variable-size types only.
-    operator StructMember *&();
+      operator CORBA_StructMember *&();
     
     // in, inout, out, _retn 
-    const StructMember &in (void) const;
-    StructMember &inout (void);
-    StructMember *&out (void);
-    StructMember *_retn (void);
-    StructMember *ptr (void) const;
+      const CORBA_StructMember &in (void) const;
+      CORBA_StructMember &inout (void);
+      CORBA_StructMember *&out (void);
+      CORBA_StructMember *_retn (void);
+      CORBA_StructMember *ptr (void) const;
   
   private:
-    StructMember *ptr_;
+      CORBA_StructMember *ptr_;
   };
   
-  class TAO_IFR_Client_Export StructMember_out
+    class TAO_IFR_Client_Export CORBA_StructMember_out
   {
   public:
-    StructMember_out (StructMember *&);
-    StructMember_out (StructMember_var &);
-    StructMember_out (const StructMember_out &);
-    StructMember_out &operator= (const StructMember_out &);
-    StructMember_out &operator= (StructMember *);
-    operator StructMember *&();
-    StructMember *&ptr (void);
-    StructMember *operator-> (void);
+      CORBA_StructMember_out (CORBA_StructMember *&);
+      CORBA_StructMember_out (CORBA_StructMember_var &);
+      CORBA_StructMember_out (const CORBA_StructMember_out &);
+      CORBA_StructMember_out &operator= (const CORBA_StructMember_out &);
+      CORBA_StructMember_out &operator= (CORBA_StructMember *);
+      operator CORBA_StructMember *&();
+      CORBA_StructMember *&ptr (void);
+      CORBA_StructMember *operator-> (void);
     
   private:
-    StructMember *&ptr_;
+      CORBA_StructMember *&ptr_;
     // Assignment from T_var not allowed.
-    void operator= (const StructMember_var &);
+      void operator= (const CORBA_StructMember_var &);
   };
   
-  TAO_NAMESPACE_STORAGE_CLASS ::CORBA::TypeCode_ptr _tc_StructMember;
-  
   
 #if !defined (TAO_USE_SEQUENCE_TEMPLATES)
   
 #if !defined (__TAO_UNBOUNDED_SEQUENCE_CORBA_STRUCTMEMBERSEQ_CH_)
 #define __TAO_UNBOUNDED_SEQUENCE_CORBA_STRUCTMEMBERSEQ_CH_
   
-  class TAO_EXPORT_MACRO _TAO_Unbounded_Sequence_CORBA_StructMemberSeq
+    class TAO_EXPORT_NESTED_MACRO _TAO_Unbounded_Sequence_CORBA_StructMemberSeq
     : public TAO_Unbounded_Base_Sequence
   {
   public:
@@ -3300,7 +3122,7 @@
     _TAO_Unbounded_Sequence_CORBA_StructMemberSeq (
         CORBA::ULong maximum,
         CORBA::ULong length,
-        StructMember *data,
+          CORBA_StructMember *data,
         CORBA::Boolean release = 0
       );
     _TAO_Unbounded_Sequence_CORBA_StructMemberSeq (
@@ -3312,22 +3134,22 @@
     virtual ~_TAO_Unbounded_Sequence_CORBA_StructMemberSeq (void);
     
     // = Accessors.
-    StructMember &operator[] (CORBA::ULong i);
-    const StructMember &operator[] (CORBA::ULong i) const;
+      CORBA_StructMember &operator[] (CORBA::ULong i);
+      const CORBA_StructMember &operator[] (CORBA::ULong i) const;
     
     // = Static operations.
-    static StructMember *allocbuf (CORBA::ULong size);
-    static void freebuf (StructMember *buffer);
+      static CORBA_StructMember *allocbuf (CORBA::ULong size);
+      static void freebuf (CORBA_StructMember *buffer);
     
     // Implement the TAO_Base_Sequence methods (see Sequence.h)
     virtual void _allocate_buffer (CORBA::ULong length);
     virtual void _deallocate_buffer (void);
-    StructMember *get_buffer (CORBA::Boolean orphan = 0);
-    const StructMember *get_buffer (void) const;
+      CORBA_StructMember *get_buffer (CORBA::Boolean orphan = 0);
+      const CORBA_StructMember *get_buffer (void) const;
     void replace (
         CORBA::ULong max,
         CORBA::ULong length,
-        StructMember *data,
+          CORBA_StructMember *data,
         CORBA::Boolean release
       );
   };
@@ -3340,35 +3162,35 @@
 #if !defined (_CORBA_STRUCTMEMBERSEQ_CH_)
 #define _CORBA_STRUCTMEMBERSEQ_CH_
   
-  class StructMemberSeq;
-  class StructMemberSeq_var;
+    class CORBA_StructMemberSeq;
+    class CORBA_StructMemberSeq_var;
   
   // *************************************************************
-  // StructMemberSeq
+    // CORBA_StructMemberSeq
   // *************************************************************
   
-  class TAO_IFR_Client_Export StructMemberSeq : public 
+    class TAO_IFR_Client_Export CORBA_StructMemberSeq : public
 #if !defined (TAO_USE_SEQUENCE_TEMPLATES)
   _TAO_Unbounded_Sequence_CORBA_StructMemberSeq
 #else /* TAO_USE_SEQUENCE_TEMPLATES */
-  TAO_Unbounded_Sequence<StructMember>
+    TAO_Unbounded_Sequence<CORBA_StructMember>
 #endif /* !TAO_USE_SEQUENCE_TEMPLATES */ 
   {
   public:
-    StructMemberSeq (void); // default ctor
-    StructMemberSeq (CORBA::ULong max); // uses max size
-    StructMemberSeq (
+      CORBA_StructMemberSeq (void); // default ctor
+      CORBA_StructMemberSeq (CORBA::ULong max); // uses max size
+      CORBA_StructMemberSeq (
         CORBA::ULong max, 
         CORBA::ULong length, 
-        StructMember *buffer, 
+          CORBA_StructMember *buffer,
         CORBA::Boolean release = 0
       );
-    StructMemberSeq (const StructMemberSeq &); // copy ctor
-    ~StructMemberSeq (void);
+      CORBA_StructMemberSeq (const CORBA_StructMemberSeq &); // copy ctor
+      ~CORBA_StructMemberSeq (void);
     static void _tao_any_destructor (void*);
     
 #if !defined(__GNUC__) || !defined (ACE_HAS_GNUG_PRE_2_8)
-    typedef StructMemberSeq_var _var_type;
+      typedef CORBA_StructMemberSeq_var _var_type;
 #endif /* ! __GNUC__ || g++ >= 2.8 */
     
     
@@ -3381,39 +3203,39 @@
 #define _CORBA_STRUCTMEMBERSEQ___VAR_CH_
   
   // *************************************************************
-  // class CORBA::StructMemberSeq_var
+    // class CORBA_StructMemberSeq_var
   // *************************************************************
   
-  class TAO_IFR_Client_Export StructMemberSeq_var
+    class TAO_IFR_Client_Export CORBA_StructMemberSeq_var
   {
   public:
-    StructMemberSeq_var (void);
-    StructMemberSeq_var (StructMemberSeq *);
-    StructMemberSeq_var (const StructMemberSeq_var &);
-    ~StructMemberSeq_var (void);
-    
-    StructMemberSeq_var &operator= (StructMemberSeq *);
-    StructMemberSeq_var &operator= (const StructMemberSeq_var &);
-    StructMemberSeq *operator-> (void);
-    const StructMemberSeq *operator-> (void) const;
-    
-    operator const StructMemberSeq &() const;
-    operator StructMemberSeq &();
-    operator StructMemberSeq &() const;
-    operator StructMemberSeq *&(); // variable-size base types only
+      CORBA_StructMemberSeq_var (void);
+      CORBA_StructMemberSeq_var (CORBA_StructMemberSeq *);
+      CORBA_StructMemberSeq_var (const CORBA_StructMemberSeq_var &);
+      ~CORBA_StructMemberSeq_var (void);
+
+      CORBA_StructMemberSeq_var &operator= (CORBA_StructMemberSeq *);
+      CORBA_StructMemberSeq_var &operator= (const CORBA_StructMemberSeq_var &);
+      CORBA_StructMemberSeq *operator-> (void);
+      const CORBA_StructMemberSeq *operator-> (void) const;
+
+      operator const CORBA_StructMemberSeq &() const;
+      operator CORBA_StructMemberSeq &();
+      operator CORBA_StructMemberSeq &() const;
+      operator CORBA_StructMemberSeq *&(); // variable-size base types only
     
-    StructMember & operator[] (CORBA::ULong index);
-    const StructMember & operator[] (CORBA::ULong index) const;
+      CORBA_StructMember & operator[] (CORBA::ULong index);
+      const CORBA_StructMember & operator[] (CORBA::ULong index) const;
     
     // in, inout, out, _retn 
-    const StructMemberSeq &in (void) const;
-    StructMemberSeq &inout (void);
-    StructMemberSeq *&out (void);
-    StructMemberSeq *_retn (void);
-    StructMemberSeq *ptr (void) const;
+      const CORBA_StructMemberSeq &in (void) const;
+      CORBA_StructMemberSeq &inout (void);
+      CORBA_StructMemberSeq *&out (void);
+      CORBA_StructMemberSeq *_retn (void);
+      CORBA_StructMemberSeq *ptr (void) const;
   
   private:
-    StructMemberSeq *ptr_;
+      CORBA_StructMemberSeq *ptr_;
   };
   
   
@@ -3423,104 +3245,100 @@
 #if !defined (_CORBA_STRUCTMEMBERSEQ___OUT_CH_)
 #define _CORBA_STRUCTMEMBERSEQ___OUT_CH_
   
-  class TAO_IFR_Client_Export StructMemberSeq_out
+    class TAO_IFR_Client_Export CORBA_StructMemberSeq_out
   {
   public:
-    StructMemberSeq_out (StructMemberSeq *&);
-    StructMemberSeq_out (StructMemberSeq_var &);
-    StructMemberSeq_out (const StructMemberSeq_out &);
-    StructMemberSeq_out &operator= (const StructMemberSeq_out &);
-    StructMemberSeq_out &operator= (StructMemberSeq *);
-    operator StructMemberSeq *&();
-    StructMemberSeq *&ptr (void);
-    StructMemberSeq *operator-> (void);
-    StructMember & operator[] (CORBA::ULong index);
+      CORBA_StructMemberSeq_out (CORBA_StructMemberSeq *&);
+      CORBA_StructMemberSeq_out (CORBA_StructMemberSeq_var &);
+      CORBA_StructMemberSeq_out (const CORBA_StructMemberSeq_out &);
+      CORBA_StructMemberSeq_out &operator= (const CORBA_StructMemberSeq_out &);
+      CORBA_StructMemberSeq_out &operator= (CORBA_StructMemberSeq *);
+      operator CORBA_StructMemberSeq *&();
+      CORBA_StructMemberSeq *&ptr (void);
+      CORBA_StructMemberSeq *operator-> (void);
+      CORBA_StructMember & operator[] (CORBA::ULong index);
   
   private:
-    StructMemberSeq *&ptr_;
+      CORBA_StructMemberSeq *&ptr_;
     // Assignment from T_var not allowed.
-    void operator= (const StructMemberSeq_var &);
+      void operator= (const CORBA_StructMemberSeq_var &);
   };
   
   
 #endif /* end #if !defined */
   
-  TAO_NAMESPACE_STORAGE_CLASS ::CORBA::TypeCode_ptr _tc_StructMemberSeq;
+    struct CORBA_Initializer;
+    class CORBA_Initializer_var;
   
-  struct Initializer;
-  class Initializer_var;
-  
-  struct TAO_IFR_Client_Export Initializer
+    struct TAO_IFR_Client_Export CORBA_Initializer
   {
     
 #if !defined(__GNUC__) || !defined (ACE_HAS_GNUG_PRE_2_8)
-    typedef Initializer_var _var_type;
+      typedef CORBA_Initializer_var _var_type;
 #endif /* ! __GNUC__ || g++ >= 2.8 */
 
     static void _tao_any_destructor (void*);
     
-    ACE_NESTED_CLASS (CORBA, StructMemberSeq) members;
+      CORBA_StructMemberSeq members;
     TAO_String_Manager name;
     
   };
   
-  class TAO_IFR_Client_Export Initializer_var
+    class TAO_IFR_Client_Export CORBA_Initializer_var
   {
   public:
-    Initializer_var (void);
-    Initializer_var (Initializer *);
-    Initializer_var (const Initializer_var &);
-    ~Initializer_var (void);
-    
-    Initializer_var &operator= (Initializer *);
-    Initializer_var &operator= (const Initializer_var &);
-    Initializer *operator-> (void);
-    const Initializer *operator-> (void) const;
-    
-    operator const Initializer &() const;
-    operator Initializer &();
-    operator Initializer &() const;
+      CORBA_Initializer_var (void);
+      CORBA_Initializer_var (CORBA_Initializer *);
+      CORBA_Initializer_var (const CORBA_Initializer_var &);
+      ~CORBA_Initializer_var (void);
+
+      CORBA_Initializer_var &operator= (CORBA_Initializer *);
+      CORBA_Initializer_var &operator= (const CORBA_Initializer_var &);
+      CORBA_Initializer *operator-> (void);
+      const CORBA_Initializer *operator-> (void) const;
+
+      operator const CORBA_Initializer &() const;
+      operator CORBA_Initializer &();
+      operator CORBA_Initializer &() const;
     // Variable-size types only.
-    operator Initializer *&();
+      operator CORBA_Initializer *&();
     
     // in, inout, out, _retn 
-    const Initializer &in (void) const;
-    Initializer &inout (void);
-    Initializer *&out (void);
-    Initializer *_retn (void);
-    Initializer *ptr (void) const;
+      const CORBA_Initializer &in (void) const;
+      CORBA_Initializer &inout (void);
+      CORBA_Initializer *&out (void);
+      CORBA_Initializer *_retn (void);
+      CORBA_Initializer *ptr (void) const;
   
   private:
-    Initializer *ptr_;
+      CORBA_Initializer *ptr_;
   };
   
-  class TAO_IFR_Client_Export Initializer_out
+    class TAO_IFR_Client_Export CORBA_Initializer_out
   {
   public:
-    Initializer_out (Initializer *&);
-    Initializer_out (Initializer_var &);
-    Initializer_out (const Initializer_out &);
-    Initializer_out &operator= (const Initializer_out &);
-    Initializer_out &operator= (Initializer *);
-    operator Initializer *&();
-    Initializer *&ptr (void);
-    Initializer *operator-> (void);
+      CORBA_Initializer_out (CORBA_Initializer *&);
+      CORBA_Initializer_out (CORBA_Initializer_var &);
+      CORBA_Initializer_out (const CORBA_Initializer_out &);
+      CORBA_Initializer_out &operator= (const CORBA_Initializer_out &);
+      CORBA_Initializer_out &operator= (CORBA_Initializer *);
+      operator CORBA_Initializer *&();
+      CORBA_Initializer *&ptr (void);
+      CORBA_Initializer *operator-> (void);
     
   private:
-    Initializer *&ptr_;
+      CORBA_Initializer *&ptr_;
     // Assignment from T_var not allowed.
-    void operator= (const Initializer_var &);
+      void operator= (const CORBA_Initializer_var &);
   };
   
-  TAO_NAMESPACE_STORAGE_CLASS ::CORBA::TypeCode_ptr _tc_Initializer;
-  
   
 #if !defined (TAO_USE_SEQUENCE_TEMPLATES)
   
 #if !defined (__TAO_UNBOUNDED_SEQUENCE_CORBA_INITIALIZERSEQ_CH_)
 #define __TAO_UNBOUNDED_SEQUENCE_CORBA_INITIALIZERSEQ_CH_
   
-  class TAO_EXPORT_MACRO _TAO_Unbounded_Sequence_CORBA_InitializerSeq
+    class TAO_EXPORT_NESTED_MACRO _TAO_Unbounded_Sequence_CORBA_InitializerSeq
     : public TAO_Unbounded_Base_Sequence
   {
   public:
@@ -3530,7 +3348,7 @@
     _TAO_Unbounded_Sequence_CORBA_InitializerSeq (
         CORBA::ULong maximum,
         CORBA::ULong length,
-        Initializer *data,
+          CORBA_Initializer *data,
         CORBA::Boolean release = 0
       );
     _TAO_Unbounded_Sequence_CORBA_InitializerSeq (
@@ -3542,22 +3360,22 @@
     virtual ~_TAO_Unbounded_Sequence_CORBA_InitializerSeq (void);
     
     // = Accessors.
-    Initializer &operator[] (CORBA::ULong i);
-    const Initializer &operator[] (CORBA::ULong i) const;
+      CORBA_Initializer &operator[] (CORBA::ULong i);
+      const CORBA_Initializer &operator[] (CORBA::ULong i) const;
     
     // = Static operations.
-    static Initializer *allocbuf (CORBA::ULong size);
-    static void freebuf (Initializer *buffer);
+      static CORBA_Initializer *allocbuf (CORBA::ULong size);
+      static void freebuf (CORBA_Initializer *buffer);
     
     // Implement the TAO_Base_Sequence methods (see Sequence.h)
     virtual void _allocate_buffer (CORBA::ULong length);
     virtual void _deallocate_buffer (void);
-    Initializer *get_buffer (CORBA::Boolean orphan = 0);
-    const Initializer *get_buffer (void) const;
+      CORBA_Initializer *get_buffer (CORBA::Boolean orphan = 0);
+      const CORBA_Initializer *get_buffer (void) const;
     void replace (
         CORBA::ULong max,
         CORBA::ULong length,
-        Initializer *data,
+          CORBA_Initializer *data,
         CORBA::Boolean release
       );
   };
@@ -3570,35 +3388,35 @@
 #if !defined (_CORBA_INITIALIZERSEQ_CH_)
 #define _CORBA_INITIALIZERSEQ_CH_
   
-  class InitializerSeq;
-  class InitializerSeq_var;
+    class CORBA_InitializerSeq;
+    class CORBA_InitializerSeq_var;
   
   // *************************************************************
-  // InitializerSeq
+    // CORBA_InitializerSeq
   // *************************************************************
   
-  class TAO_IFR_Client_Export InitializerSeq : public 
+    class TAO_IFR_Client_Export CORBA_InitializerSeq : public
 #if !defined (TAO_USE_SEQUENCE_TEMPLATES)
   _TAO_Unbounded_Sequence_CORBA_InitializerSeq
 #else /* TAO_USE_SEQUENCE_TEMPLATES */
-  TAO_Unbounded_Sequence<Initializer>
+    TAO_Unbounded_Sequence<CORBA_Initializer>
 #endif /* !TAO_USE_SEQUENCE_TEMPLATES */ 
   {
   public:
-    InitializerSeq (void); // default ctor
-    InitializerSeq (CORBA::ULong max); // uses max size
-    InitializerSeq (
+      CORBA_InitializerSeq (void); // default ctor
+      CORBA_InitializerSeq (CORBA::ULong max); // uses max size
+      CORBA_InitializerSeq (
         CORBA::ULong max, 
         CORBA::ULong length, 
-        Initializer *buffer, 
+          CORBA_Initializer *buffer,
         CORBA::Boolean release = 0
       );
-    InitializerSeq (const InitializerSeq &); // copy ctor
-    ~InitializerSeq (void);
+      CORBA_InitializerSeq (const CORBA_InitializerSeq &); // copy ctor
+      ~CORBA_InitializerSeq (void);
     static void _tao_any_destructor (void*);
     
 #if !defined(__GNUC__) || !defined (ACE_HAS_GNUG_PRE_2_8)
-    typedef InitializerSeq_var _var_type;
+      typedef CORBA_InitializerSeq_var _var_type;
 #endif /* ! __GNUC__ || g++ >= 2.8 */
     
     
@@ -3611,39 +3429,39 @@
 #define _CORBA_INITIALIZERSEQ___VAR_CH_
   
   // *************************************************************
-  // class CORBA::InitializerSeq_var
+    // class CORBA_InitializerSeq_var
   // *************************************************************
   
-  class TAO_IFR_Client_Export InitializerSeq_var
+    class TAO_IFR_Client_Export CORBA_InitializerSeq_var
   {
   public:
-    InitializerSeq_var (void);
-    InitializerSeq_var (InitializerSeq *);
-    InitializerSeq_var (const InitializerSeq_var &);
-    ~InitializerSeq_var (void);
-    
-    InitializerSeq_var &operator= (InitializerSeq *);
-    InitializerSeq_var &operator= (const InitializerSeq_var &);
-    InitializerSeq *operator-> (void);
-    const InitializerSeq *operator-> (void) const;
-    
-    operator const InitializerSeq &() const;
-    operator InitializerSeq &();
-    operator InitializerSeq &() const;
-    operator InitializerSeq *&(); // variable-size base types only
+      CORBA_InitializerSeq_var (void);
+      CORBA_InitializerSeq_var (CORBA_InitializerSeq *);
+      CORBA_InitializerSeq_var (const CORBA_InitializerSeq_var &);
+      ~CORBA_InitializerSeq_var (void);
+
+      CORBA_InitializerSeq_var &operator= (CORBA_InitializerSeq *);
+      CORBA_InitializerSeq_var &operator= (const CORBA_InitializerSeq_var &);
+      CORBA_InitializerSeq *operator-> (void);
+      const CORBA_InitializerSeq *operator-> (void) const;
     
-    Initializer & operator[] (CORBA::ULong index);
-    const Initializer & operator[] (CORBA::ULong index) const;
+      operator const CORBA_InitializerSeq &() const;
+      operator CORBA_InitializerSeq &();
+      operator CORBA_InitializerSeq &() const;
+      operator CORBA_InitializerSeq *&(); // variable-size base types only
+
+      CORBA_Initializer & operator[] (CORBA::ULong index);
+      const CORBA_Initializer & operator[] (CORBA::ULong index) const;
     
     // in, inout, out, _retn 
-    const InitializerSeq &in (void) const;
-    InitializerSeq &inout (void);
-    InitializerSeq *&out (void);
-    InitializerSeq *_retn (void);
-    InitializerSeq *ptr (void) const;
+      const CORBA_InitializerSeq &in (void) const;
+      CORBA_InitializerSeq &inout (void);
+      CORBA_InitializerSeq *&out (void);
+      CORBA_InitializerSeq *_retn (void);
+      CORBA_InitializerSeq *ptr (void) const;
   
   private:
-    InitializerSeq *ptr_;
+      CORBA_InitializerSeq *ptr_;
   };
   
   
@@ -3653,38 +3471,36 @@
 #if !defined (_CORBA_INITIALIZERSEQ___OUT_CH_)
 #define _CORBA_INITIALIZERSEQ___OUT_CH_
   
-  class TAO_IFR_Client_Export InitializerSeq_out
+    class TAO_IFR_Client_Export CORBA_InitializerSeq_out
   {
   public:
-    InitializerSeq_out (InitializerSeq *&);
-    InitializerSeq_out (InitializerSeq_var &);
-    InitializerSeq_out (const InitializerSeq_out &);
-    InitializerSeq_out &operator= (const InitializerSeq_out &);
-    InitializerSeq_out &operator= (InitializerSeq *);
-    operator InitializerSeq *&();
-    InitializerSeq *&ptr (void);
-    InitializerSeq *operator-> (void);
-    Initializer & operator[] (CORBA::ULong index);
+      CORBA_InitializerSeq_out (CORBA_InitializerSeq *&);
+      CORBA_InitializerSeq_out (CORBA_InitializerSeq_var &);
+      CORBA_InitializerSeq_out (const CORBA_InitializerSeq_out &);
+      CORBA_InitializerSeq_out &operator= (const CORBA_InitializerSeq_out &);
+      CORBA_InitializerSeq_out &operator= (CORBA_InitializerSeq *);
+      operator CORBA_InitializerSeq *&();
+      CORBA_InitializerSeq *&ptr (void);
+      CORBA_InitializerSeq *operator-> (void);
+      CORBA_Initializer & operator[] (CORBA::ULong index);
   
   private:
-    InitializerSeq *&ptr_;
+      CORBA_InitializerSeq *&ptr_;
     // Assignment from T_var not allowed.
-    void operator= (const InitializerSeq_var &);
+      void operator= (const CORBA_InitializerSeq_var &);
   };
   
   
 #endif /* end #if !defined */
   
-  TAO_NAMESPACE_STORAGE_CLASS ::CORBA::TypeCode_ptr _tc_InitializerSeq;
-  
-  struct UnionMember;
-  class UnionMember_var;
+    struct CORBA_UnionMember;
+    class CORBA_UnionMember_var;
   
-  struct TAO_IFR_Client_Export UnionMember
+    struct TAO_IFR_Client_Export CORBA_UnionMember
   {
     
 #if !defined(__GNUC__) || !defined (ACE_HAS_GNUG_PRE_2_8)
-    typedef UnionMember_var _var_type;
+      typedef CORBA_UnionMember_var _var_type;
 #endif /* ! __GNUC__ || g++ >= 2.8 */
 
     static void _tao_any_destructor (void*);
@@ -3692,67 +3508,65 @@
     TAO_String_Manager name;
     CORBA::Any label;
     CORBA::TypeCode_var type;
-    ACE_NESTED_CLASS (CORBA, IDLType_var) type_def;
+      CORBA_IDLType_var type_def;
     
   };
   
-  class TAO_IFR_Client_Export UnionMember_var
+    class TAO_IFR_Client_Export CORBA_UnionMember_var
   {
   public:
-    UnionMember_var (void);
-    UnionMember_var (UnionMember *);
-    UnionMember_var (const UnionMember_var &);
-    ~UnionMember_var (void);
+      CORBA_UnionMember_var (void);
+      CORBA_UnionMember_var (CORBA_UnionMember *);
+      CORBA_UnionMember_var (const CORBA_UnionMember_var &);
+      ~CORBA_UnionMember_var (void);
     
-    UnionMember_var &operator= (UnionMember *);
-    UnionMember_var &operator= (const UnionMember_var &);
-    UnionMember *operator-> (void);
-    const UnionMember *operator-> (void) const;
+      CORBA_UnionMember_var &operator= (CORBA_UnionMember *);
+      CORBA_UnionMember_var &operator= (const CORBA_UnionMember_var &);
+      CORBA_UnionMember *operator-> (void);
+      const CORBA_UnionMember *operator-> (void) const;
     
-    operator const UnionMember &() const;
-    operator UnionMember &();
-    operator UnionMember &() const;
+      operator const CORBA_UnionMember &() const;
+      operator CORBA_UnionMember &();
+      operator CORBA_UnionMember &() const;
     // Variable-size types only.
-    operator UnionMember *&();
+      operator CORBA_UnionMember *&();
     
     // in, inout, out, _retn 
-    const UnionMember &in (void) const;
-    UnionMember &inout (void);
-    UnionMember *&out (void);
-    UnionMember *_retn (void);
-    UnionMember *ptr (void) const;
+      const CORBA_UnionMember &in (void) const;
+      CORBA_UnionMember &inout (void);
+      CORBA_UnionMember *&out (void);
+      CORBA_UnionMember *_retn (void);
+      CORBA_UnionMember *ptr (void) const;
   
   private:
-    UnionMember *ptr_;
+      CORBA_UnionMember *ptr_;
   };
   
-  class TAO_IFR_Client_Export UnionMember_out
+    class TAO_IFR_Client_Export CORBA_UnionMember_out
   {
   public:
-    UnionMember_out (UnionMember *&);
-    UnionMember_out (UnionMember_var &);
-    UnionMember_out (const UnionMember_out &);
-    UnionMember_out &operator= (const UnionMember_out &);
-    UnionMember_out &operator= (UnionMember *);
-    operator UnionMember *&();
-    UnionMember *&ptr (void);
-    UnionMember *operator-> (void);
+      CORBA_UnionMember_out (CORBA_UnionMember *&);
+      CORBA_UnionMember_out (CORBA_UnionMember_var &);
+      CORBA_UnionMember_out (const CORBA_UnionMember_out &);
+      CORBA_UnionMember_out &operator= (const CORBA_UnionMember_out &);
+      CORBA_UnionMember_out &operator= (CORBA_UnionMember *);
+      operator CORBA_UnionMember *&();
+      CORBA_UnionMember *&ptr (void);
+      CORBA_UnionMember *operator-> (void);
     
   private:
-    UnionMember *&ptr_;
+      CORBA_UnionMember *&ptr_;
     // Assignment from T_var not allowed.
-    void operator= (const UnionMember_var &);
+      void operator= (const CORBA_UnionMember_var &);
   };
   
-  TAO_NAMESPACE_STORAGE_CLASS ::CORBA::TypeCode_ptr _tc_UnionMember;
-  
   
 #if !defined (TAO_USE_SEQUENCE_TEMPLATES)
   
 #if !defined (__TAO_UNBOUNDED_SEQUENCE_CORBA_UNIONMEMBERSEQ_CH_)
 #define __TAO_UNBOUNDED_SEQUENCE_CORBA_UNIONMEMBERSEQ_CH_
   
-  class TAO_EXPORT_MACRO _TAO_Unbounded_Sequence_CORBA_UnionMemberSeq
+    class TAO_EXPORT_NESTED_MACRO _TAO_Unbounded_Sequence_CORBA_UnionMemberSeq
     : public TAO_Unbounded_Base_Sequence
   {
   public:
@@ -3762,7 +3576,7 @@
     _TAO_Unbounded_Sequence_CORBA_UnionMemberSeq (
         CORBA::ULong maximum,
         CORBA::ULong length,
-        UnionMember *data,
+          CORBA_UnionMember *data,
         CORBA::Boolean release = 0
       );
     _TAO_Unbounded_Sequence_CORBA_UnionMemberSeq (
@@ -3774,22 +3588,22 @@
     virtual ~_TAO_Unbounded_Sequence_CORBA_UnionMemberSeq (void);
     
     // = Accessors.
-    UnionMember &operator[] (CORBA::ULong i);
-    const UnionMember &operator[] (CORBA::ULong i) const;
+      CORBA_UnionMember &operator[] (CORBA::ULong i);
+      const CORBA_UnionMember &operator[] (CORBA::ULong i) const;
     
     // = Static operations.
-    static UnionMember *allocbuf (CORBA::ULong size);
-    static void freebuf (UnionMember *buffer);
+      static CORBA_UnionMember *allocbuf (CORBA::ULong size);
+      static void freebuf (CORBA_UnionMember *buffer);
     
     // Implement the TAO_Base_Sequence methods (see Sequence.h)
     virtual void _allocate_buffer (CORBA::ULong length);
     virtual void _deallocate_buffer (void);
-    UnionMember *get_buffer (CORBA::Boolean orphan = 0);
-    const UnionMember *get_buffer (void) const;
+      CORBA_UnionMember *get_buffer (CORBA::Boolean orphan = 0);
+      const CORBA_UnionMember *get_buffer (void) const;
     void replace (
         CORBA::ULong max,
         CORBA::ULong length,
-        UnionMember *data,
+          CORBA_UnionMember *data,
         CORBA::Boolean release
       );
   };
@@ -3802,35 +3616,35 @@
 #if !defined (_CORBA_UNIONMEMBERSEQ_CH_)
 #define _CORBA_UNIONMEMBERSEQ_CH_
   
-  class UnionMemberSeq;
-  class UnionMemberSeq_var;
+    class CORBA_UnionMemberSeq;
+    class CORBA_UnionMemberSeq_var;
   
   // *************************************************************
-  // UnionMemberSeq
+    // CORBA_UnionMemberSeq
   // *************************************************************
   
-  class TAO_IFR_Client_Export UnionMemberSeq : public 
+    class TAO_IFR_Client_Export CORBA_UnionMemberSeq : public
 #if !defined (TAO_USE_SEQUENCE_TEMPLATES)
   _TAO_Unbounded_Sequence_CORBA_UnionMemberSeq
 #else /* TAO_USE_SEQUENCE_TEMPLATES */
-  TAO_Unbounded_Sequence<UnionMember>
+    TAO_Unbounded_Sequence<CORBA_UnionMember>
 #endif /* !TAO_USE_SEQUENCE_TEMPLATES */ 
   {
   public:
-    UnionMemberSeq (void); // default ctor
-    UnionMemberSeq (CORBA::ULong max); // uses max size
-    UnionMemberSeq (
+      CORBA_UnionMemberSeq (void); // default ctor
+      CORBA_UnionMemberSeq (CORBA::ULong max); // uses max size
+      CORBA_UnionMemberSeq (
         CORBA::ULong max, 
         CORBA::ULong length, 
-        UnionMember *buffer, 
+          CORBA_UnionMember *buffer,
         CORBA::Boolean release = 0
       );
-    UnionMemberSeq (const UnionMemberSeq &); // copy ctor
-    ~UnionMemberSeq (void);
+      CORBA_UnionMemberSeq (const CORBA_UnionMemberSeq &); // copy ctor
+      ~CORBA_UnionMemberSeq (void);
     static void _tao_any_destructor (void*);
     
 #if !defined(__GNUC__) || !defined (ACE_HAS_GNUG_PRE_2_8)
-    typedef UnionMemberSeq_var _var_type;
+      typedef CORBA_UnionMemberSeq_var _var_type;
 #endif /* ! __GNUC__ || g++ >= 2.8 */
     
     
@@ -3843,39 +3657,39 @@
 #define _CORBA_UNIONMEMBERSEQ___VAR_CH_
   
   // *************************************************************
-  // class CORBA::UnionMemberSeq_var
+    // class CORBA_UnionMemberSeq_var
   // *************************************************************
   
-  class TAO_IFR_Client_Export UnionMemberSeq_var
+    class TAO_IFR_Client_Export CORBA_UnionMemberSeq_var
   {
   public:
-    UnionMemberSeq_var (void);
-    UnionMemberSeq_var (UnionMemberSeq *);
-    UnionMemberSeq_var (const UnionMemberSeq_var &);
-    ~UnionMemberSeq_var (void);
-    
-    UnionMemberSeq_var &operator= (UnionMemberSeq *);
-    UnionMemberSeq_var &operator= (const UnionMemberSeq_var &);
-    UnionMemberSeq *operator-> (void);
-    const UnionMemberSeq *operator-> (void) const;
-    
-    operator const UnionMemberSeq &() const;
-    operator UnionMemberSeq &();
-    operator UnionMemberSeq &() const;
-    operator UnionMemberSeq *&(); // variable-size base types only
+      CORBA_UnionMemberSeq_var (void);
+      CORBA_UnionMemberSeq_var (CORBA_UnionMemberSeq *);
+      CORBA_UnionMemberSeq_var (const CORBA_UnionMemberSeq_var &);
+      ~CORBA_UnionMemberSeq_var (void);
+
+      CORBA_UnionMemberSeq_var &operator= (CORBA_UnionMemberSeq *);
+      CORBA_UnionMemberSeq_var &operator= (const CORBA_UnionMemberSeq_var &);
+      CORBA_UnionMemberSeq *operator-> (void);
+      const CORBA_UnionMemberSeq *operator-> (void) const;
+
+      operator const CORBA_UnionMemberSeq &() const;
+      operator CORBA_UnionMemberSeq &();
+      operator CORBA_UnionMemberSeq &() const;
+      operator CORBA_UnionMemberSeq *&(); // variable-size base types only
     
-    UnionMember & operator[] (CORBA::ULong index);
-    const UnionMember & operator[] (CORBA::ULong index) const;
+      CORBA_UnionMember & operator[] (CORBA::ULong index);
+      const CORBA_UnionMember & operator[] (CORBA::ULong index) const;
     
     // in, inout, out, _retn 
-    const UnionMemberSeq &in (void) const;
-    UnionMemberSeq &inout (void);
-    UnionMemberSeq *&out (void);
-    UnionMemberSeq *_retn (void);
-    UnionMemberSeq *ptr (void) const;
+      const CORBA_UnionMemberSeq &in (void) const;
+      CORBA_UnionMemberSeq &inout (void);
+      CORBA_UnionMemberSeq *&out (void);
+      CORBA_UnionMemberSeq *_retn (void);
+      CORBA_UnionMemberSeq *ptr (void) const;
   
   private:
-    UnionMemberSeq *ptr_;
+      CORBA_UnionMemberSeq *ptr_;
   };
   
   
@@ -3885,42 +3699,40 @@
 #if !defined (_CORBA_UNIONMEMBERSEQ___OUT_CH_)
 #define _CORBA_UNIONMEMBERSEQ___OUT_CH_
   
-  class TAO_IFR_Client_Export UnionMemberSeq_out
+    class TAO_IFR_Client_Export CORBA_UnionMemberSeq_out
   {
   public:
-    UnionMemberSeq_out (UnionMemberSeq *&);
-    UnionMemberSeq_out (UnionMemberSeq_var &);
-    UnionMemberSeq_out (const UnionMemberSeq_out &);
-    UnionMemberSeq_out &operator= (const UnionMemberSeq_out &);
-    UnionMemberSeq_out &operator= (UnionMemberSeq *);
-    operator UnionMemberSeq *&();
-    UnionMemberSeq *&ptr (void);
-    UnionMemberSeq *operator-> (void);
-    UnionMember & operator[] (CORBA::ULong index);
+      CORBA_UnionMemberSeq_out (CORBA_UnionMemberSeq *&);
+      CORBA_UnionMemberSeq_out (CORBA_UnionMemberSeq_var &);
+      CORBA_UnionMemberSeq_out (const CORBA_UnionMemberSeq_out &);
+      CORBA_UnionMemberSeq_out &operator= (const CORBA_UnionMemberSeq_out &);
+      CORBA_UnionMemberSeq_out &operator= (CORBA_UnionMemberSeq *);
+      operator CORBA_UnionMemberSeq *&();
+      CORBA_UnionMemberSeq *&ptr (void);
+      CORBA_UnionMemberSeq *operator-> (void);
+      CORBA_UnionMember & operator[] (CORBA::ULong index);
   
   private:
-    UnionMemberSeq *&ptr_;
+      CORBA_UnionMemberSeq *&ptr_;
     // Assignment from T_var not allowed.
-    void operator= (const UnionMemberSeq_var &);
+      void operator= (const CORBA_UnionMemberSeq_var &);
   };
   
   
 #endif /* end #if !defined */
   
-  TAO_NAMESPACE_STORAGE_CLASS ::CORBA::TypeCode_ptr _tc_UnionMemberSeq;
-  
   
 #if !defined (_CORBA_ENUMMEMBERSEQ_CH_)
 #define _CORBA_ENUMMEMBERSEQ_CH_
   
-  class EnumMemberSeq;
-  class EnumMemberSeq_var;
+    class CORBA_EnumMemberSeq;
+    class CORBA_EnumMemberSeq_var;
   
   // *************************************************************
-  // EnumMemberSeq
+    // CORBA_EnumMemberSeq
   // *************************************************************
   
-  class TAO_IFR_Client_Export EnumMemberSeq : public 
+    class TAO_IFR_Client_Export CORBA_EnumMemberSeq : public
 #if !defined (TAO_USE_SEQUENCE_TEMPLATES)
   TAO_Unbounded_String_Sequence
 #else /* TAO_USE_SEQUENCE_TEMPLATES */
@@ -3928,20 +3740,20 @@
 #endif /* !TAO_USE_SEQUENCE_TEMPLATES */ 
   {
   public:
-    EnumMemberSeq (void); // default ctor
-    EnumMemberSeq (CORBA::ULong max); // uses max size
-    EnumMemberSeq (
+      CORBA_EnumMemberSeq (void); // default ctor
+      CORBA_EnumMemberSeq (CORBA::ULong max); // uses max size
+      CORBA_EnumMemberSeq (
         CORBA::ULong max, 
         CORBA::ULong length, 
         char * *buffer, 
         CORBA::Boolean release = 0
       );
-    EnumMemberSeq (const EnumMemberSeq &); // copy ctor
-    ~EnumMemberSeq (void);
+      CORBA_EnumMemberSeq (const CORBA_EnumMemberSeq &); // copy ctor
+      ~CORBA_EnumMemberSeq (void);
     static void _tao_any_destructor (void*);
     
 #if !defined(__GNUC__) || !defined (ACE_HAS_GNUG_PRE_2_8)
-    typedef EnumMemberSeq_var _var_type;
+      typedef CORBA_EnumMemberSeq_var _var_type;
 #endif /* ! __GNUC__ || g++ >= 2.8 */
     
     
@@ -3954,38 +3766,38 @@
 #define _CORBA_ENUMMEMBERSEQ___VAR_CH_
   
   // *************************************************************
-  // class CORBA::EnumMemberSeq_var
+    // class CORBA_EnumMemberSeq_var
   // *************************************************************
   
-  class TAO_IFR_Client_Export EnumMemberSeq_var
+    class TAO_IFR_Client_Export CORBA_EnumMemberSeq_var
   {
   public:
-    EnumMemberSeq_var (void);
-    EnumMemberSeq_var (EnumMemberSeq *);
-    EnumMemberSeq_var (const EnumMemberSeq_var &);
-    ~EnumMemberSeq_var (void);
-    
-    EnumMemberSeq_var &operator= (EnumMemberSeq *);
-    EnumMemberSeq_var &operator= (const EnumMemberSeq_var &);
-    EnumMemberSeq *operator-> (void);
-    const EnumMemberSeq *operator-> (void) const;
-    
-    operator const EnumMemberSeq &() const;
-    operator EnumMemberSeq &();
-    operator EnumMemberSeq &() const;
-    operator EnumMemberSeq *&(); // variable-size base types only
+      CORBA_EnumMemberSeq_var (void);
+      CORBA_EnumMemberSeq_var (CORBA_EnumMemberSeq *);
+      CORBA_EnumMemberSeq_var (const CORBA_EnumMemberSeq_var &);
+      ~CORBA_EnumMemberSeq_var (void);
+
+      CORBA_EnumMemberSeq_var &operator= (CORBA_EnumMemberSeq *);
+      CORBA_EnumMemberSeq_var &operator= (const CORBA_EnumMemberSeq_var &);
+      CORBA_EnumMemberSeq *operator-> (void);
+      const CORBA_EnumMemberSeq *operator-> (void) const;
+
+      operator const CORBA_EnumMemberSeq &() const;
+      operator CORBA_EnumMemberSeq &();
+      operator CORBA_EnumMemberSeq &() const;
+      operator CORBA_EnumMemberSeq *&(); // variable-size base types only
     
     TAO_SeqElem_String_Manager operator[] (CORBA::ULong index);
     
     // in, inout, out, _retn 
-    const EnumMemberSeq &in (void) const;
-    EnumMemberSeq &inout (void);
-    EnumMemberSeq *&out (void);
-    EnumMemberSeq *_retn (void);
-    EnumMemberSeq *ptr (void) const;
+      const CORBA_EnumMemberSeq &in (void) const;
+      CORBA_EnumMemberSeq &inout (void);
+      CORBA_EnumMemberSeq *&out (void);
+      CORBA_EnumMemberSeq *_retn (void);
+      CORBA_EnumMemberSeq *ptr (void) const;
   
   private:
-    EnumMemberSeq *ptr_;
+      CORBA_EnumMemberSeq *ptr_;
   };
   
   
@@ -3995,180 +3807,93 @@
 #if !defined (_CORBA_ENUMMEMBERSEQ___OUT_CH_)
 #define _CORBA_ENUMMEMBERSEQ___OUT_CH_
   
-  class TAO_IFR_Client_Export EnumMemberSeq_out
+    class TAO_IFR_Client_Export CORBA_EnumMemberSeq_out
   {
   public:
-    EnumMemberSeq_out (EnumMemberSeq *&);
-    EnumMemberSeq_out (EnumMemberSeq_var &);
-    EnumMemberSeq_out (const EnumMemberSeq_out &);
-    EnumMemberSeq_out &operator= (const EnumMemberSeq_out &);
-    EnumMemberSeq_out &operator= (EnumMemberSeq *);
-    operator EnumMemberSeq *&();
-    EnumMemberSeq *&ptr (void);
-    EnumMemberSeq *operator-> (void);
+      CORBA_EnumMemberSeq_out (CORBA_EnumMemberSeq *&);
+      CORBA_EnumMemberSeq_out (CORBA_EnumMemberSeq_var &);
+      CORBA_EnumMemberSeq_out (const CORBA_EnumMemberSeq_out &);
+      CORBA_EnumMemberSeq_out &operator= (const CORBA_EnumMemberSeq_out &);
+      CORBA_EnumMemberSeq_out &operator= (CORBA_EnumMemberSeq *);
+      operator CORBA_EnumMemberSeq *&();
+      CORBA_EnumMemberSeq *&ptr (void);
+      CORBA_EnumMemberSeq *operator-> (void);
     TAO_SeqElem_String_Manager operator[] (CORBA::ULong index);
   
   private:
-    EnumMemberSeq *&ptr_;
+      CORBA_EnumMemberSeq *&ptr_;
     // Assignment from T_var not allowed.
-    void operator= (const EnumMemberSeq_var &);
-  };
-  
-  
-#endif /* end #if !defined */
-  
-  TAO_NAMESPACE_STORAGE_CLASS ::CORBA::TypeCode_ptr _tc_EnumMemberSeq;
-  
-  
-#if !defined (_CORBA_CONTAINER___PTR_CH_)
-#define _CORBA_CONTAINER___PTR_CH_
-  
-  class Container;
-  typedef Container *Container_ptr;
-  
-#endif /* end #if !defined */
-  
-  
-#if !defined (_CORBA_CONTAINER___VAR_CH_)
-#define _CORBA_CONTAINER___VAR_CH_
-  
-  class TAO_IFR_Client_Export Container_var : public TAO_Base_var
-  {
-  public:
-    Container_var (void); // default constructor
-    Container_var (Container_ptr p) : ptr_ (p) {} 
-    Container_var (const Container_var &); // copy constructor
-    ~Container_var (void); // destructor
-    
-    Container_var &operator= (Container_ptr);
-    Container_var &operator= (const Container_var &);
-    Container_ptr operator-> (void) const;
-    
-    operator const Container_ptr &() const;
-    operator Container_ptr &();
-    // in, inout, out, _retn 
-    Container_ptr in (void) const;
-    Container_ptr &inout (void);
-    Container_ptr &out (void);
-    Container_ptr _retn (void);
-    Container_ptr ptr (void) const;
-    
-    // Hooks used by template sequence and object manager classes
-    // for non-defined forward declared interfaces.
-    static Container_ptr tao_duplicate (Container_ptr);
-    static void tao_release (Container_ptr);
-    static Container_ptr tao_nil (void);
-    static Container_ptr tao_narrow (
-        CORBA::Object *
-        ACE_ENV_ARG_DECL_NOT_USED
-      );
-    static CORBA::Object * tao_upcast (void *);
-  
-  private:
-    Container_ptr ptr_;
-    // Unimplemented - prevents widening assignment.
-    Container_var (const TAO_Base_var &rhs);
-    Container_var &operator= (const TAO_Base_var &rhs);
+      void operator= (const CORBA_EnumMemberSeq_var &);
   };
 
 
 #endif /* end #if !defined */
   
   
-#if !defined (_CORBA_CONTAINER___OUT_CH_)
-#define _CORBA_CONTAINER___OUT_CH_
-  
-  class TAO_IFR_Client_Export Container_out
-  {
-  public:
-    Container_out (Container_ptr &);
-    Container_out (Container_var &);
-    Container_out (const Container_out &);
-    Container_out &operator= (const Container_out &);
-    Container_out &operator= (const Container_var &);
-    Container_out &operator= (Container_ptr);
-    operator Container_ptr &();
-    Container_ptr &ptr (void);
-    Container_ptr operator-> (void);
-  
-  private:
-    Container_ptr &ptr_;
-  };
-  
-  
-#endif /* end #if !defined */
-  
-  // *************************************************************
-  // CORBA::Container
-  // TAO_IDL - Generated from
-  // be/be_visitor_interface/interface_ch.cpp:106
-  // *************************************************************
-  
-  
 #if !defined (_CORBA_CONTAINER_CH_)
 #define _CORBA_CONTAINER_CH_
   
-  // Forward Classes Declaration.
-  class _TAO_Container_Proxy_Impl;
-  class _TAO_Container_Remote_Proxy_Impl;
-  class _TAO_Container_Proxy_Broker;
-  class _TAO_Container_Remote_Proxy_Broker;
+    // Forward Classes Declaration
+    class _TAO_CORBA_Container_Proxy_Impl;
+    class _TAO_CORBA_Container_Remote_Proxy_Impl;
+    class _TAO_CORBA_Container_Proxy_Broker;
+    class _TAO_CORBA_Container_Remote_Proxy_Broker;
   
-  class TAO_IFR_Client_Export Container
-    : public virtual CORBA::IRObject
+    class TAO_IFR_Client_Export CORBA_Container
+      : public virtual CORBA_IRObject
   {
   public:
   #if !defined(__GNUC__) || !defined (ACE_HAS_GNUG_PRE_2_8)
-    typedef Container_ptr _ptr_type;
-    typedef Container_var _var_type;
+      typedef CORBA_Container_ptr _ptr_type;
+      typedef CORBA_Container_var _var_type;
   #endif /* ! __GNUC__ || g++ >= 2.8 */
 
     static int _tao_class_id;
     
-    // The static operations.
-    static Container_ptr _duplicate (Container_ptr obj);
+      // the static operations
+      static CORBA_Container_ptr _duplicate (CORBA_Container_ptr obj);
     
-    static Container_ptr _narrow (
+      static CORBA_Container_ptr _narrow (
         CORBA::Object_ptr obj
-        ACE_ENV_ARG_DECL_WITH_DEFAULTS
-      );
+          ACE_ENV_ARG_DECL_WITH_DEFAULTS);
     
-    static Container_ptr _unchecked_narrow (
+
+      static CORBA_Container_ptr _unchecked_narrow (
         CORBA::Object_ptr obj
-        ACE_ENV_ARG_DECL_WITH_DEFAULTS
-      );
+          ACE_ENV_ARG_DECL_WITH_DEFAULTS);
     
-    static Container_ptr _nil (void)
+
+      static CORBA_Container_ptr _nil (void)
       {
-        return (Container_ptr)0;
+          return (CORBA_Container_ptr)0;
       }
     
     static void _tao_any_destructor (void*);
     
-    virtual ::CORBA::Contained_ptr lookup (
+      virtual CORBA_Contained_ptr lookup (
         const char * search_name
-        ACE_ENV_ARG_DECL_WITH_DEFAULTS
-      )
+          ACE_ENV_ARG_DECL_WITH_DEFAULTS)
+
       ACE_THROW_SPEC ((
         CORBA::SystemException
       ));
     
-    virtual ::CORBA::ContainedSeq * contents (
+      virtual CORBA_ContainedSeq * contents (
         CORBA::DefinitionKind limit_type,
         CORBA::Boolean exclude_inherited
-        ACE_ENV_ARG_DECL_WITH_DEFAULTS
-      )
+          ACE_ENV_ARG_DECL_WITH_DEFAULTS)
+
       ACE_THROW_SPEC ((
         CORBA::SystemException
       ));
     
-    virtual ::CORBA::ContainedSeq * lookup_name (
+      virtual CORBA_ContainedSeq * lookup_name (
         const char * search_name,
         CORBA::Long levels_to_search,
         CORBA::DefinitionKind limit_type,
         CORBA::Boolean exclude_inherited
-        ACE_ENV_ARG_DECL_WITH_DEFAULTS
-      )
+          ACE_ENV_ARG_DECL_WITH_DEFAULTS)
+
       ACE_THROW_SPEC ((
         CORBA::SystemException
       ));
@@ -4185,8 +3910,8 @@
 
       static void _tao_any_destructor (void*);
       
-      ACE_NESTED_CLASS (CORBA, Contained_var) contained_object;
-      ACE_NESTED_CLASS (CORBA, DefinitionKind) kind;
+        CORBA_Contained_var contained_object;
+        CORBA::DefinitionKind kind;
       CORBA::Any value;
       
     };
@@ -4239,7 +3964,7 @@
       void operator= (const Description_var &);
     };
     
-    static ::CORBA::TypeCode_ptr _tc_Description;
+      static CORBA::TypeCode_ptr _tc_Description;
     
     
 #if !defined (TAO_USE_SEQUENCE_TEMPLATES)
@@ -4247,7 +3972,7 @@
 #if !defined (__TAO_UNBOUNDED_SEQUENCE_CORBA_CONTAINER_DESCRIPTIONSEQ_CH_)
 #define __TAO_UNBOUNDED_SEQUENCE_CORBA_CONTAINER_DESCRIPTIONSEQ_CH_
     
-    class TAO_EXPORT_MACRO _TAO_Unbounded_Sequence_CORBA_Container_DescriptionSeq
+      class TAO_EXPORT_NESTED_MACRO _TAO_Unbounded_Sequence_CORBA_Container_DescriptionSeq
       : public TAO_Unbounded_Base_Sequence
     {
     public:
@@ -4338,7 +4063,7 @@
 #define _CORBA_CONTAINER_DESCRIPTIONSEQ___VAR_CH_
     
     // *************************************************************
-    // class CORBA::Container::DescriptionSeq_var
+      // class CORBA_Container::DescriptionSeq_var
     // *************************************************************
     
     class TAO_IFR_Client_Export DescriptionSeq_var
@@ -4402,201 +4127,201 @@
     
 #endif /* end #if !defined */
     
-    static ::CORBA::TypeCode_ptr _tc_DescriptionSeq;
+      static CORBA::TypeCode_ptr _tc_DescriptionSeq;
     
-    virtual ::CORBA::Container::DescriptionSeq * describe_contents (
+      virtual CORBA_Container::DescriptionSeq * describe_contents (
         CORBA::DefinitionKind limit_type,
         CORBA::Boolean exclude_inherited,
         CORBA::Long max_returned_objs
-        ACE_ENV_ARG_DECL_WITH_DEFAULTS
-      )
+          ACE_ENV_ARG_DECL_WITH_DEFAULTS)
+
       ACE_THROW_SPEC ((
         CORBA::SystemException
       ));
     
-    virtual ::CORBA::ModuleDef_ptr create_module (
+      virtual CORBA_ModuleDef_ptr create_module (
         const char * id,
         const char * name,
         const char * version
-        ACE_ENV_ARG_DECL_WITH_DEFAULTS
-      )
+          ACE_ENV_ARG_DECL_WITH_DEFAULTS)
+
       ACE_THROW_SPEC ((
         CORBA::SystemException
       ));
     
-    virtual ::CORBA::ConstantDef_ptr create_constant (
+      virtual CORBA_ConstantDef_ptr create_constant (
         const char * id,
         const char * name,
         const char * version,
-        CORBA::IDLType_ptr type,
+          CORBA_IDLType_ptr type,
         const CORBA::Any & value
-        ACE_ENV_ARG_DECL_WITH_DEFAULTS
-      )
+          ACE_ENV_ARG_DECL_WITH_DEFAULTS)
+
       ACE_THROW_SPEC ((
         CORBA::SystemException
       ));
     
-    virtual ::CORBA::StructDef_ptr create_struct (
+      virtual CORBA_StructDef_ptr create_struct (
         const char * id,
         const char * name,
         const char * version,
-        const CORBA::StructMemberSeq & members
-        ACE_ENV_ARG_DECL_WITH_DEFAULTS
-      )
+          const CORBA_StructMemberSeq & members
+          ACE_ENV_ARG_DECL_WITH_DEFAULTS)
+
       ACE_THROW_SPEC ((
         CORBA::SystemException
       ));
     
-    virtual ::CORBA::UnionDef_ptr create_union (
+      virtual CORBA_UnionDef_ptr create_union (
         const char * id,
         const char * name,
         const char * version,
-        CORBA::IDLType_ptr discriminator_type,
-        const CORBA::UnionMemberSeq & members
-        ACE_ENV_ARG_DECL_WITH_DEFAULTS
-      )
+          CORBA_IDLType_ptr discriminator_type,
+          const CORBA_UnionMemberSeq & members
+          ACE_ENV_ARG_DECL_WITH_DEFAULTS)
+
       ACE_THROW_SPEC ((
         CORBA::SystemException
       ));
     
-    virtual ::CORBA::EnumDef_ptr create_enum (
+      virtual CORBA_EnumDef_ptr create_enum (
         const char * id,
         const char * name,
         const char * version,
-        const CORBA::EnumMemberSeq & members
-        ACE_ENV_ARG_DECL_WITH_DEFAULTS
-      )
+          const CORBA_EnumMemberSeq & members
+          ACE_ENV_ARG_DECL_WITH_DEFAULTS)
+
       ACE_THROW_SPEC ((
         CORBA::SystemException
       ));
     
-    virtual ::CORBA::AliasDef_ptr create_alias (
+      virtual CORBA_AliasDef_ptr create_alias (
         const char * id,
         const char * name,
         const char * version,
-        CORBA::IDLType_ptr original_type
-        ACE_ENV_ARG_DECL_WITH_DEFAULTS
-      )
+          CORBA_IDLType_ptr original_type
+          ACE_ENV_ARG_DECL_WITH_DEFAULTS)
+
       ACE_THROW_SPEC ((
         CORBA::SystemException
       ));
     
-    virtual ::CORBA::InterfaceDef_ptr create_interface (
+      virtual CORBA_InterfaceDef_ptr create_interface (
         const char * id,
         const char * name,
         const char * version,
-        const CORBA::InterfaceDefSeq & base_interfaces
-        ACE_ENV_ARG_DECL_WITH_DEFAULTS
-      )
+          const CORBA_InterfaceDefSeq & base_interfaces
+          ACE_ENV_ARG_DECL_WITH_DEFAULTS)
+
       ACE_THROW_SPEC ((
         CORBA::SystemException
       ));
     
-    virtual ::CORBA::ValueDef_ptr create_value (
+      virtual CORBA_ValueDef_ptr create_value (
         const char * id,
         const char * name,
         const char * version,
         CORBA::Boolean is_custom,
         CORBA::Boolean is_abstract,
-        CORBA::ValueDef_ptr base_value,
+          CORBA_ValueDef_ptr base_value,
         CORBA::Boolean is_truncatable,
-        const CORBA::ValueDefSeq & abstract_base_values,
-        const CORBA::InterfaceDefSeq & supported_interfaces,
-        const CORBA::InitializerSeq & initializers
-        ACE_ENV_ARG_DECL_WITH_DEFAULTS
-      )
+          const CORBA_ValueDefSeq & abstract_base_values,
+          const CORBA_InterfaceDefSeq & supported_interfaces,
+          const CORBA_InitializerSeq & initializers
+          ACE_ENV_ARG_DECL_WITH_DEFAULTS)
+
       ACE_THROW_SPEC ((
         CORBA::SystemException
       ));
     
-    virtual ::CORBA::ValueBoxDef_ptr create_value_box (
+      virtual CORBA_ValueBoxDef_ptr create_value_box (
         const char * id,
         const char * name,
         const char * version,
-        CORBA::IDLType_ptr original_type_def
-        ACE_ENV_ARG_DECL_WITH_DEFAULTS
-      )
+          CORBA_IDLType_ptr original_type_def
+          ACE_ENV_ARG_DECL_WITH_DEFAULTS)
+
       ACE_THROW_SPEC ((
         CORBA::SystemException
       ));
     
-    virtual ::CORBA::ExceptionDef_ptr create_exception (
+      virtual CORBA_ExceptionDef_ptr create_exception (
         const char * id,
         const char * name,
         const char * version,
-        const CORBA::StructMemberSeq & members
-        ACE_ENV_ARG_DECL_WITH_DEFAULTS
-      )
+          const CORBA_StructMemberSeq & members
+          ACE_ENV_ARG_DECL_WITH_DEFAULTS)
+
       ACE_THROW_SPEC ((
         CORBA::SystemException
       ));
     
-    virtual ::CORBA::NativeDef_ptr create_native (
+      virtual CORBA_NativeDef_ptr create_native (
         const char * id,
         const char * name,
         const char * version
-        ACE_ENV_ARG_DECL_WITH_DEFAULTS
-      )
+          ACE_ENV_ARG_DECL_WITH_DEFAULTS)
+
       ACE_THROW_SPEC ((
         CORBA::SystemException
       ));
     
-    virtual ::CORBA::AbstractInterfaceDef_ptr create_abstract_interface (
+      virtual CORBA_AbstractInterfaceDef_ptr create_abstract_interface (
         const char * id,
         const char * name,
         const char * version,
-        const CORBA::AbstractInterfaceDefSeq & base_interfaces
-        ACE_ENV_ARG_DECL_WITH_DEFAULTS
-      )
+          const CORBA_AbstractInterfaceDefSeq & base_interfaces
+          ACE_ENV_ARG_DECL_WITH_DEFAULTS)
+
       ACE_THROW_SPEC ((
         CORBA::SystemException
       ));
     
-    virtual ::CORBA::LocalInterfaceDef_ptr create_local_interface (
+      virtual CORBA_LocalInterfaceDef_ptr create_local_interface (
         const char * id,
         const char * name,
         const char * version,
-        const CORBA::InterfaceDefSeq & base_interfaces
-        ACE_ENV_ARG_DECL_WITH_DEFAULTS
-      )
+          const CORBA_InterfaceDefSeq & base_interfaces
+          ACE_ENV_ARG_DECL_WITH_DEFAULTS)
+
       ACE_THROW_SPEC ((
         CORBA::SystemException
       ));
     
     virtual CORBA::Boolean _is_a (
         const CORBA::Char *type_id
-        ACE_ENV_ARG_DECL_WITH_DEFAULTS
-      );
+          ACE_ENV_ARG_DECL_WITH_DEFAULTS);
+
     
     virtual void *_tao_QueryInterface (ptr_arith_t type);
     
     virtual const char* _interface_repository_id (void) const;
 
   private:
-    _TAO_Container_Proxy_Broker *the_TAO_Container_Proxy_Broker_;
+      _TAO_CORBA_Container_Proxy_Broker *the_TAO_CORBA_Container_Proxy_Broker_;
     
   protected:
-    Container (int collocated = 0);
+      CORBA_Container (int collocated = 0);
     
-    // These methods travese the inheritance tree and set the
+      // This methods travese the inheritance tree and set the
     // parents piece of the given class in the right mode
     virtual void CORBA_Container_setup_collocation (int collocated);
     
-    Container (
+      CORBA_Container (
         TAO_Stub *objref, 
         CORBA::Boolean _tao_collocated = 0,
         TAO_Abstract_ServantBase *servant = 0
       );
     
-    friend class _TAO_Container_Remote_Proxy_Impl;
-    friend class _TAO_Container_ThruPOA_Proxy_Impl;
-    friend class _TAO_Container_Direct_Proxy_Impl;
+      friend class _TAO_CORBA_Container_Remote_Proxy_Impl;
+      friend class _TAO_CORBA_Container_ThruPOA_Proxy_Impl;
+      friend class _TAO_CORBA_Container_Direct_Proxy_Impl;
     
-    virtual ~Container (void);
+      virtual ~CORBA_Container (void);
   
   private:
-    Container (const Container &);
-    void operator= (const Container &);
+      CORBA_Container (const CORBA_Container &);
+      void operator= (const CORBA_Container &);
   };
   
   // The Proxy Implementations are used by each interface to
@@ -4608,12 +4333,12 @@
   //                    Base Proxy Impl. Declaration
   //
   
-  class TAO_IFR_Client_Export _TAO_Container_Proxy_Impl
-    : public virtual CORBA::_TAO_IRObject_Proxy_Impl
+    class TAO_IFR_Client_Export _TAO_CORBA_Container_Proxy_Impl
+      : public virtual _TAO_CORBA_IRObject_Proxy_Impl
   {
   public:
-    virtual ~_TAO_Container_Proxy_Impl (void) { }
-    virtual ::CORBA::Contained_ptr lookup (
+      virtual ~_TAO_CORBA_Container_Proxy_Impl (void) { }
+      virtual CORBA_Contained_ptr lookup (
         CORBA_Object *_collocated_tao_target_,
         const char * search_name
         ACE_ENV_ARG_DECL
@@ -4622,7 +4347,7 @@
         CORBA::SystemException
       )) = 0;
     
-    virtual ::CORBA::ContainedSeq * contents (
+      virtual CORBA_ContainedSeq * contents (
         CORBA_Object *_collocated_tao_target_,
         CORBA::DefinitionKind limit_type,
         CORBA::Boolean exclude_inherited
@@ -4632,7 +4357,7 @@
         CORBA::SystemException
       )) = 0;
     
-    virtual ::CORBA::ContainedSeq * lookup_name (
+      virtual CORBA_ContainedSeq * lookup_name (
         CORBA_Object *_collocated_tao_target_,
         const char * search_name,
         CORBA::Long levels_to_search,
@@ -4644,7 +4369,7 @@
         CORBA::SystemException
       )) = 0;
     
-    virtual ::CORBA::Container::DescriptionSeq * describe_contents (
+      virtual CORBA_Container::DescriptionSeq * describe_contents (
         CORBA_Object *_collocated_tao_target_,
         CORBA::DefinitionKind limit_type,
         CORBA::Boolean exclude_inherited,
@@ -4655,7 +4380,7 @@
         CORBA::SystemException
       )) = 0;
     
-    virtual ::CORBA::ModuleDef_ptr create_module (
+      virtual CORBA_ModuleDef_ptr create_module (
         CORBA_Object *_collocated_tao_target_,
         const char * id,
         const char * name,
@@ -4666,12 +4391,12 @@
         CORBA::SystemException
       )) = 0;
     
-    virtual ::CORBA::ConstantDef_ptr create_constant (
+      virtual CORBA_ConstantDef_ptr create_constant (
         CORBA_Object *_collocated_tao_target_,
         const char * id,
         const char * name,
         const char * version,
-        CORBA::IDLType_ptr type,
+          CORBA_IDLType_ptr type,
         const CORBA::Any & value
         ACE_ENV_ARG_DECL
       )
@@ -4679,110 +4404,110 @@
         CORBA::SystemException
       )) = 0;
     
-    virtual ::CORBA::StructDef_ptr create_struct (
+      virtual CORBA_StructDef_ptr create_struct (
         CORBA_Object *_collocated_tao_target_,
         const char * id,
         const char * name,
         const char * version,
-        const CORBA::StructMemberSeq & members
+          const CORBA_StructMemberSeq & members
         ACE_ENV_ARG_DECL
       )
       ACE_THROW_SPEC ((
         CORBA::SystemException
       )) = 0;
     
-    virtual ::CORBA::UnionDef_ptr create_union (
+      virtual CORBA_UnionDef_ptr create_union (
         CORBA_Object *_collocated_tao_target_,
         const char * id,
         const char * name,
         const char * version,
-        CORBA::IDLType_ptr discriminator_type,
-        const CORBA::UnionMemberSeq & members
+          CORBA_IDLType_ptr discriminator_type,
+          const CORBA_UnionMemberSeq & members
         ACE_ENV_ARG_DECL
       )
       ACE_THROW_SPEC ((
         CORBA::SystemException
       )) = 0;
     
-    virtual ::CORBA::EnumDef_ptr create_enum (
+      virtual CORBA_EnumDef_ptr create_enum (
         CORBA_Object *_collocated_tao_target_,
         const char * id,
         const char * name,
         const char * version,
-        const CORBA::EnumMemberSeq & members
+          const CORBA_EnumMemberSeq & members
         ACE_ENV_ARG_DECL
       )
       ACE_THROW_SPEC ((
         CORBA::SystemException
       )) = 0;
     
-    virtual ::CORBA::AliasDef_ptr create_alias (
+      virtual CORBA_AliasDef_ptr create_alias (
         CORBA_Object *_collocated_tao_target_,
         const char * id,
         const char * name,
         const char * version,
-        CORBA::IDLType_ptr original_type
+          CORBA_IDLType_ptr original_type
         ACE_ENV_ARG_DECL
       )
       ACE_THROW_SPEC ((
         CORBA::SystemException
       )) = 0;
     
-    virtual ::CORBA::InterfaceDef_ptr create_interface (
+      virtual CORBA_InterfaceDef_ptr create_interface (
         CORBA_Object *_collocated_tao_target_,
         const char * id,
         const char * name,
         const char * version,
-        const CORBA::InterfaceDefSeq & base_interfaces
+          const CORBA_InterfaceDefSeq & base_interfaces
         ACE_ENV_ARG_DECL
       )
       ACE_THROW_SPEC ((
         CORBA::SystemException
       )) = 0;
     
-    virtual ::CORBA::ValueDef_ptr create_value (
+      virtual CORBA_ValueDef_ptr create_value (
         CORBA_Object *_collocated_tao_target_,
         const char * id,
         const char * name,
         const char * version,
         CORBA::Boolean is_custom,
         CORBA::Boolean is_abstract,
-        CORBA::ValueDef_ptr base_value,
+          CORBA_ValueDef_ptr base_value,
         CORBA::Boolean is_truncatable,
-        const CORBA::ValueDefSeq & abstract_base_values,
-        const CORBA::InterfaceDefSeq & supported_interfaces,
-        const CORBA::InitializerSeq & initializers
+          const CORBA_ValueDefSeq & abstract_base_values,
+          const CORBA_InterfaceDefSeq & supported_interfaces,
+          const CORBA_InitializerSeq & initializers
         ACE_ENV_ARG_DECL
       )
       ACE_THROW_SPEC ((
         CORBA::SystemException
       )) = 0;
     
-    virtual ::CORBA::ValueBoxDef_ptr create_value_box (
+      virtual CORBA_ValueBoxDef_ptr create_value_box (
         CORBA_Object *_collocated_tao_target_,
         const char * id,
         const char * name,
         const char * version,
-        CORBA::IDLType_ptr original_type_def
+          CORBA_IDLType_ptr original_type_def
         ACE_ENV_ARG_DECL
       )
       ACE_THROW_SPEC ((
         CORBA::SystemException
       )) = 0;
     
-    virtual ::CORBA::ExceptionDef_ptr create_exception (
+      virtual CORBA_ExceptionDef_ptr create_exception (
         CORBA_Object *_collocated_tao_target_,
         const char * id,
         const char * name,
         const char * version,
-        const CORBA::StructMemberSeq & members
+          const CORBA_StructMemberSeq & members
         ACE_ENV_ARG_DECL
       )
       ACE_THROW_SPEC ((
         CORBA::SystemException
       )) = 0;
     
-    virtual ::CORBA::NativeDef_ptr create_native (
+      virtual CORBA_NativeDef_ptr create_native (
         CORBA_Object *_collocated_tao_target_,
         const char * id,
         const char * name,
@@ -4793,24 +4518,24 @@
         CORBA::SystemException
       )) = 0;
     
-    virtual ::CORBA::AbstractInterfaceDef_ptr create_abstract_interface (
+      virtual CORBA_AbstractInterfaceDef_ptr create_abstract_interface (
         CORBA_Object *_collocated_tao_target_,
         const char * id,
         const char * name,
         const char * version,
-        const CORBA::AbstractInterfaceDefSeq & base_interfaces
+          const CORBA_AbstractInterfaceDefSeq & base_interfaces
         ACE_ENV_ARG_DECL
       )
       ACE_THROW_SPEC ((
         CORBA::SystemException
       )) = 0;
     
-    virtual ::CORBA::LocalInterfaceDef_ptr create_local_interface (
+      virtual CORBA_LocalInterfaceDef_ptr create_local_interface (
         CORBA_Object *_collocated_tao_target_,
         const char * id,
         const char * name,
         const char * version,
-        const CORBA::InterfaceDefSeq & base_interfaces
+          const CORBA_InterfaceDefSeq & base_interfaces
         ACE_ENV_ARG_DECL
       )
       ACE_THROW_SPEC ((
@@ -4819,7 +4544,7 @@
     
     
   protected:
-    _TAO_Container_Proxy_Impl (void);
+      _TAO_CORBA_Container_Proxy_Impl (void);
   };
   
   //
@@ -4831,16 +4556,16 @@
   //                Remote Proxy Impl. Declaration
   //
   
-  class TAO_IFR_Client_Export _TAO_Container_Remote_Proxy_Impl
-    : public virtual _TAO_Container_Proxy_Impl,
+    class TAO_IFR_Client_Export _TAO_CORBA_Container_Remote_Proxy_Impl
+      : public virtual _TAO_CORBA_Container_Proxy_Impl,
       public virtual TAO_Remote_Object_Proxy_Impl,
-      public virtual CORBA::_TAO_IRObject_Remote_Proxy_Impl
+        public virtual _TAO_CORBA_IRObject_Remote_Proxy_Impl
   {
   public:
-    _TAO_Container_Remote_Proxy_Impl (void);
+      _TAO_CORBA_Container_Remote_Proxy_Impl (void);
     
-    virtual ~_TAO_Container_Remote_Proxy_Impl (void) { }
-    virtual ::CORBA::Contained_ptr lookup (
+      virtual ~_TAO_CORBA_Container_Remote_Proxy_Impl (void) { }
+      virtual CORBA_Contained_ptr lookup (
         CORBA_Object *_collocated_tao_target_,
         const char * search_name
         ACE_ENV_ARG_DECL
@@ -4849,7 +4574,7 @@
         CORBA::SystemException
       ));
     
-    virtual ::CORBA::ContainedSeq * contents (
+      virtual CORBA_ContainedSeq * contents (
         CORBA_Object *_collocated_tao_target_,
         CORBA::DefinitionKind limit_type,
         CORBA::Boolean exclude_inherited
@@ -4859,7 +4584,7 @@
         CORBA::SystemException
       ));
     
-    virtual ::CORBA::ContainedSeq * lookup_name (
+      virtual CORBA_ContainedSeq * lookup_name (
         CORBA_Object *_collocated_tao_target_,
         const char * search_name,
         CORBA::Long levels_to_search,
@@ -4871,7 +4596,7 @@
         CORBA::SystemException
       ));
     
-    virtual ::CORBA::Container::DescriptionSeq * describe_contents (
+      virtual CORBA_Container::DescriptionSeq * describe_contents (
         CORBA_Object *_collocated_tao_target_,
         CORBA::DefinitionKind limit_type,
         CORBA::Boolean exclude_inherited,
@@ -4882,7 +4607,7 @@
         CORBA::SystemException
       ));
     
-    virtual ::CORBA::ModuleDef_ptr create_module (
+      virtual CORBA_ModuleDef_ptr create_module (
         CORBA_Object *_collocated_tao_target_,
         const char * id,
         const char * name,
@@ -4893,12 +4618,12 @@
         CORBA::SystemException
       ));
     
-    virtual ::CORBA::ConstantDef_ptr create_constant (
+      virtual CORBA_ConstantDef_ptr create_constant (
         CORBA_Object *_collocated_tao_target_,
         const char * id,
         const char * name,
         const char * version,
-        CORBA::IDLType_ptr type,
+          CORBA_IDLType_ptr type,
         const CORBA::Any & value
         ACE_ENV_ARG_DECL
       )
@@ -4906,110 +4631,110 @@
         CORBA::SystemException
       ));
     
-    virtual ::CORBA::StructDef_ptr create_struct (
+      virtual CORBA_StructDef_ptr create_struct (
         CORBA_Object *_collocated_tao_target_,
         const char * id,
         const char * name,
         const char * version,
-        const CORBA::StructMemberSeq & members
+          const CORBA_StructMemberSeq & members
         ACE_ENV_ARG_DECL
       )
       ACE_THROW_SPEC ((
         CORBA::SystemException
       ));
     
-    virtual ::CORBA::UnionDef_ptr create_union (
+      virtual CORBA_UnionDef_ptr create_union (
         CORBA_Object *_collocated_tao_target_,
         const char * id,
         const char * name,
         const char * version,
-        CORBA::IDLType_ptr discriminator_type,
-        const CORBA::UnionMemberSeq & members
+          CORBA_IDLType_ptr discriminator_type,
+          const CORBA_UnionMemberSeq & members
         ACE_ENV_ARG_DECL
       )
       ACE_THROW_SPEC ((
         CORBA::SystemException
       ));
     
-    virtual ::CORBA::EnumDef_ptr create_enum (
+      virtual CORBA_EnumDef_ptr create_enum (
         CORBA_Object *_collocated_tao_target_,
         const char * id,
         const char * name,
         const char * version,
-        const CORBA::EnumMemberSeq & members
+          const CORBA_EnumMemberSeq & members
         ACE_ENV_ARG_DECL
       )
       ACE_THROW_SPEC ((
         CORBA::SystemException
       ));
     
-    virtual ::CORBA::AliasDef_ptr create_alias (
+      virtual CORBA_AliasDef_ptr create_alias (
         CORBA_Object *_collocated_tao_target_,
         const char * id,
         const char * name,
         const char * version,
-        CORBA::IDLType_ptr original_type
+          CORBA_IDLType_ptr original_type
         ACE_ENV_ARG_DECL
       )
       ACE_THROW_SPEC ((
         CORBA::SystemException
       ));
     
-    virtual ::CORBA::InterfaceDef_ptr create_interface (
+      virtual CORBA_InterfaceDef_ptr create_interface (
         CORBA_Object *_collocated_tao_target_,
         const char * id,
         const char * name,
         const char * version,
-        const CORBA::InterfaceDefSeq & base_interfaces
+          const CORBA_InterfaceDefSeq & base_interfaces
         ACE_ENV_ARG_DECL
       )
       ACE_THROW_SPEC ((
         CORBA::SystemException
       ));
     
-    virtual ::CORBA::ValueDef_ptr create_value (
+      virtual CORBA_ValueDef_ptr create_value (
         CORBA_Object *_collocated_tao_target_,
         const char * id,
         const char * name,
         const char * version,
         CORBA::Boolean is_custom,
         CORBA::Boolean is_abstract,
-        CORBA::ValueDef_ptr base_value,
+          CORBA_ValueDef_ptr base_value,
         CORBA::Boolean is_truncatable,
-        const CORBA::ValueDefSeq & abstract_base_values,
-        const CORBA::InterfaceDefSeq & supported_interfaces,
-        const CORBA::InitializerSeq & initializers
+          const CORBA_ValueDefSeq & abstract_base_values,
+          const CORBA_InterfaceDefSeq & supported_interfaces,
+          const CORBA_InitializerSeq & initializers
         ACE_ENV_ARG_DECL
       )
       ACE_THROW_SPEC ((
         CORBA::SystemException
       ));
     
-    virtual ::CORBA::ValueBoxDef_ptr create_value_box (
+      virtual CORBA_ValueBoxDef_ptr create_value_box (
         CORBA_Object *_collocated_tao_target_,
         const char * id,
         const char * name,
         const char * version,
-        CORBA::IDLType_ptr original_type_def
+          CORBA_IDLType_ptr original_type_def
         ACE_ENV_ARG_DECL
       )
       ACE_THROW_SPEC ((
         CORBA::SystemException
       ));
     
-    virtual ::CORBA::ExceptionDef_ptr create_exception (
+      virtual CORBA_ExceptionDef_ptr create_exception (
         CORBA_Object *_collocated_tao_target_,
         const char * id,
         const char * name,
         const char * version,
-        const CORBA::StructMemberSeq & members
+          const CORBA_StructMemberSeq & members
         ACE_ENV_ARG_DECL
       )
       ACE_THROW_SPEC ((
         CORBA::SystemException
       ));
     
-    virtual ::CORBA::NativeDef_ptr create_native (
+      virtual CORBA_NativeDef_ptr create_native (
         CORBA_Object *_collocated_tao_target_,
         const char * id,
         const char * name,
@@ -5020,24 +4745,24 @@
         CORBA::SystemException
       ));
     
-    virtual ::CORBA::AbstractInterfaceDef_ptr create_abstract_interface (
+      virtual CORBA_AbstractInterfaceDef_ptr create_abstract_interface (
         CORBA_Object *_collocated_tao_target_,
         const char * id,
         const char * name,
         const char * version,
-        const CORBA::AbstractInterfaceDefSeq & base_interfaces
+          const CORBA_AbstractInterfaceDefSeq & base_interfaces
         ACE_ENV_ARG_DECL
       )
       ACE_THROW_SPEC ((
         CORBA::SystemException
       ));
     
-    virtual ::CORBA::LocalInterfaceDef_ptr create_local_interface (
+      virtual CORBA_LocalInterfaceDef_ptr create_local_interface (
         CORBA_Object *_collocated_tao_target_,
         const char * id,
         const char * name,
         const char * version,
-        const CORBA::InterfaceDefSeq & base_interfaces
+          const CORBA_InterfaceDefSeq & base_interfaces
         ACE_ENV_ARG_DECL
       )
       ACE_THROW_SPEC ((
@@ -5061,17 +4786,17 @@
   //                 Base Proxy Broker Declaration 
   //
   
-    class TAO_IFR_Client_Export _TAO_Container_Proxy_Broker
+        class TAO_IFR_Client_Export _TAO_CORBA_Container_Proxy_Broker
   {
   public:
-    virtual ~_TAO_Container_Proxy_Broker (void);
-    virtual _TAO_Container_Proxy_Impl &select_proxy (
-        Container *object
+      virtual ~_TAO_CORBA_Container_Proxy_Broker (void);
+      virtual _TAO_CORBA_Container_Proxy_Impl &select_proxy (
+          CORBA_Container *object
         ACE_ENV_ARG_DECL_WITH_DEFAULTS
       ) = 0;
     
   protected:
-    _TAO_Container_Proxy_Broker (void);
+      _TAO_CORBA_Container_Proxy_Broker (void);
     
   };
   
@@ -5084,27 +4809,27 @@
   //                 Remote Proxy Broker Declaration 
   //
   
-  class TAO_IFR_Client_Export _TAO_Container_Remote_Proxy_Broker
-    : public virtual _TAO_Container_Proxy_Broker
+    class TAO_IFR_Client_Export _TAO_CORBA_Container_Remote_Proxy_Broker
+      : public virtual _TAO_CORBA_Container_Proxy_Broker
   {
   public: 
-    _TAO_Container_Remote_Proxy_Broker (void);
+      _TAO_CORBA_Container_Remote_Proxy_Broker (void);
     
-    virtual ~_TAO_Container_Remote_Proxy_Broker (void);
+      virtual ~_TAO_CORBA_Container_Remote_Proxy_Broker (void);
     
-    virtual _TAO_Container_Proxy_Impl &select_proxy (
-        Container *object
+      virtual _TAO_CORBA_Container_Proxy_Impl &select_proxy (
+          CORBA_Container *object
         ACE_ENV_ARG_DECL
       );
     
   private:
-    _TAO_Container_Remote_Proxy_Impl remote_proxy_impl_;
+        _TAO_CORBA_Container_Remote_Proxy_Impl remote_proxy_impl_;
   
   public:
     // This member function is used to get an handle to the unique instance
     // of the Remote Proxy Broker that is available for a given
     // interface.
-    static _TAO_Container_Remote_Proxy_Broker *the_TAO_Container_Remote_Proxy_Broker (void);
+        static _TAO_CORBA_Container_Remote_Proxy_Broker *the_TAO_CORBA_Container_Remote_Proxy_Broker (void);
   };
   
   //
@@ -5114,176 +4839,87 @@
   
 #endif /* end #if !defined */
   
-  TAO_NAMESPACE_STORAGE_CLASS ::CORBA::TypeCode_ptr _tc_Container;
-  
-  
-#if !defined (_CORBA_IDLTYPE___PTR_CH_)
-#define _CORBA_IDLTYPE___PTR_CH_
-  
-  class IDLType;
-  typedef IDLType *IDLType_ptr;
-  
-#endif /* end #if !defined */
-  
-  
-#if !defined (_CORBA_IDLTYPE___VAR_CH_)
-#define _CORBA_IDLTYPE___VAR_CH_
-  
-  class TAO_IFR_Client_Export IDLType_var : public TAO_Base_var
-  {
-  public:
-    IDLType_var (void); // default constructor
-    IDLType_var (IDLType_ptr p) : ptr_ (p) {} 
-    IDLType_var (const IDLType_var &); // copy constructor
-    ~IDLType_var (void); // destructor
-    
-    IDLType_var &operator= (IDLType_ptr);
-    IDLType_var &operator= (const IDLType_var &);
-    IDLType_ptr operator-> (void) const;
-    
-    operator const IDLType_ptr &() const;
-    operator IDLType_ptr &();
-    // in, inout, out, _retn 
-    IDLType_ptr in (void) const;
-    IDLType_ptr &inout (void);
-    IDLType_ptr &out (void);
-    IDLType_ptr _retn (void);
-    IDLType_ptr ptr (void) const;
-    
-    // Hooks used by template sequence and object manager classes
-    // for non-defined forward declared interfaces.
-    static IDLType_ptr tao_duplicate (IDLType_ptr);
-    static void tao_release (IDLType_ptr);
-    static IDLType_ptr tao_nil (void);
-    static IDLType_ptr tao_narrow (
-        CORBA::Object *
-        ACE_ENV_ARG_DECL_NOT_USED
-      );
-    static CORBA::Object * tao_upcast (void *);
-  
-  private:
-    IDLType_ptr ptr_;
-    // Unimplemented - prevents widening assignment.
-    IDLType_var (const TAO_Base_var &rhs);
-    IDLType_var &operator= (const TAO_Base_var &rhs);
-  };
-
-
-#endif /* end #if !defined */
-  
-  
-#if !defined (_CORBA_IDLTYPE___OUT_CH_)
-#define _CORBA_IDLTYPE___OUT_CH_
-  
-  class TAO_IFR_Client_Export IDLType_out
-  {
-  public:
-    IDLType_out (IDLType_ptr &);
-    IDLType_out (IDLType_var &);
-    IDLType_out (const IDLType_out &);
-    IDLType_out &operator= (const IDLType_out &);
-    IDLType_out &operator= (const IDLType_var &);
-    IDLType_out &operator= (IDLType_ptr);
-    operator IDLType_ptr &();
-    IDLType_ptr &ptr (void);
-    IDLType_ptr operator-> (void);
-  
-  private:
-    IDLType_ptr &ptr_;
-  };
-  
-  
-#endif /* end #if !defined */
-  
-  // *************************************************************
-  // CORBA::IDLType
-  // TAO_IDL - Generated from
-  // be/be_visitor_interface/interface_ch.cpp:106
-  // *************************************************************
-  
-  
 #if !defined (_CORBA_IDLTYPE_CH_)
 #define _CORBA_IDLTYPE_CH_
   
-  // Forward Classes Declaration.
-  class _TAO_IDLType_Proxy_Impl;
-  class _TAO_IDLType_Remote_Proxy_Impl;
-  class _TAO_IDLType_Proxy_Broker;
-  class _TAO_IDLType_Remote_Proxy_Broker;
+      // Forward Classes Declaration
+      class _TAO_CORBA_IDLType_Proxy_Impl;
+      class _TAO_CORBA_IDLType_Remote_Proxy_Impl;
+      class _TAO_CORBA_IDLType_Proxy_Broker;
+      class _TAO_CORBA_IDLType_Remote_Proxy_Broker;
   
-  class TAO_IFR_Client_Export IDLType
-    : public virtual CORBA::IRObject
+      class TAO_IFR_Client_Export CORBA_IDLType
+        : public virtual CORBA_IRObject
   {
   public:
   #if !defined(__GNUC__) || !defined (ACE_HAS_GNUG_PRE_2_8)
-    typedef IDLType_ptr _ptr_type;
-    typedef IDLType_var _var_type;
+        typedef CORBA_IDLType_ptr _ptr_type;
+        typedef CORBA_IDLType_var _var_type;
   #endif /* ! __GNUC__ || g++ >= 2.8 */
 
     static int _tao_class_id;
     
-    // The static operations.
-    static IDLType_ptr _duplicate (IDLType_ptr obj);
+        // the static operations
+        static CORBA_IDLType_ptr _duplicate (CORBA_IDLType_ptr obj);
     
-    static IDLType_ptr _narrow (
+        static CORBA_IDLType_ptr _narrow (
         CORBA::Object_ptr obj
-        ACE_ENV_ARG_DECL_WITH_DEFAULTS
-      );
+            ACE_ENV_ARG_DECL_WITH_DEFAULTS);
+
     
-    static IDLType_ptr _unchecked_narrow (
+        static CORBA_IDLType_ptr _unchecked_narrow (
         CORBA::Object_ptr obj
-        ACE_ENV_ARG_DECL_WITH_DEFAULTS
-      );
+            ACE_ENV_ARG_DECL_WITH_DEFAULTS);
+
     
-    static IDLType_ptr _nil (void)
+        static CORBA_IDLType_ptr _nil (void)
       {
-        return (IDLType_ptr)0;
+            return (CORBA_IDLType_ptr)0;
       }
     
     static void _tao_any_destructor (void*);
     
     virtual CORBA::TypeCode_ptr type (
+            ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)
         
-        ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS
-      )
       ACE_THROW_SPEC ((
         CORBA::SystemException
       ));
     
     virtual CORBA::Boolean _is_a (
         const CORBA::Char *type_id
-        ACE_ENV_ARG_DECL_WITH_DEFAULTS
-      );
+            ACE_ENV_ARG_DECL_WITH_DEFAULTS);
+
     
     virtual void *_tao_QueryInterface (ptr_arith_t type);
     
     virtual const char* _interface_repository_id (void) const;
 
   private:
-    _TAO_IDLType_Proxy_Broker *the_TAO_IDLType_Proxy_Broker_;
+        _TAO_CORBA_IDLType_Proxy_Broker *the_TAO_CORBA_IDLType_Proxy_Broker_;
     
   protected:
-    IDLType (int collocated = 0);
+        CORBA_IDLType (int collocated = 0);
     
-    // These methods travese the inheritance tree and set the
+        // This methods travese the inheritance tree and set the
     // parents piece of the given class in the right mode
     virtual void CORBA_IDLType_setup_collocation (int collocated);
     
-    IDLType (
+        CORBA_IDLType (
         TAO_Stub *objref, 
         CORBA::Boolean _tao_collocated = 0,
         TAO_Abstract_ServantBase *servant = 0
       );
     
-    friend class _TAO_IDLType_Remote_Proxy_Impl;
-    friend class _TAO_IDLType_ThruPOA_Proxy_Impl;
-    friend class _TAO_IDLType_Direct_Proxy_Impl;
+        friend class _TAO_CORBA_IDLType_Remote_Proxy_Impl;
+        friend class _TAO_CORBA_IDLType_ThruPOA_Proxy_Impl;
+        friend class _TAO_CORBA_IDLType_Direct_Proxy_Impl;
     
-    virtual ~IDLType (void);
+        virtual ~CORBA_IDLType (void);
   
   private:
-    IDLType (const IDLType &);
-    void operator= (const IDLType &);
+        CORBA_IDLType (const CORBA_IDLType &);
+        void operator= (const CORBA_IDLType &);
   };
   
   // The Proxy Implementations are used by each interface to
@@ -5295,11 +4931,11 @@
   //                    Base Proxy Impl. Declaration
   //
   
-  class TAO_IFR_Client_Export _TAO_IDLType_Proxy_Impl
-    : public virtual CORBA::_TAO_IRObject_Proxy_Impl
+      class TAO_IFR_Client_Export _TAO_CORBA_IDLType_Proxy_Impl
+        : public virtual _TAO_CORBA_IRObject_Proxy_Impl
   {
   public:
-    virtual ~_TAO_IDLType_Proxy_Impl (void) { }
+        virtual ~_TAO_CORBA_IDLType_Proxy_Impl (void) { }
     virtual CORBA::TypeCode_ptr type (
         CORBA_Object *_collocated_tao_target_
         ACE_ENV_ARG_DECL
@@ -5310,7 +4946,7 @@
     
     
   protected:
-    _TAO_IDLType_Proxy_Impl (void);
+        _TAO_CORBA_IDLType_Proxy_Impl (void);
   };
   
   //
@@ -5322,15 +4958,15 @@
   //                Remote Proxy Impl. Declaration
   //
   
-  class TAO_IFR_Client_Export _TAO_IDLType_Remote_Proxy_Impl
-    : public virtual _TAO_IDLType_Proxy_Impl,
+      class TAO_IFR_Client_Export _TAO_CORBA_IDLType_Remote_Proxy_Impl
+        : public virtual _TAO_CORBA_IDLType_Proxy_Impl,
       public virtual TAO_Remote_Object_Proxy_Impl,
-      public virtual CORBA::_TAO_IRObject_Remote_Proxy_Impl
+          public virtual _TAO_CORBA_IRObject_Remote_Proxy_Impl
   {
   public:
-    _TAO_IDLType_Remote_Proxy_Impl (void);
+        _TAO_CORBA_IDLType_Remote_Proxy_Impl (void);
     
-    virtual ~_TAO_IDLType_Remote_Proxy_Impl (void) { }
+        virtual ~_TAO_CORBA_IDLType_Remote_Proxy_Impl (void) { }
     virtual CORBA::TypeCode_ptr type (
         CORBA_Object *_collocated_tao_target_
         ACE_ENV_ARG_DECL
@@ -5356,17 +4992,17 @@
   //                 Base Proxy Broker Declaration 
   //
   
-    class TAO_IFR_Client_Export _TAO_IDLType_Proxy_Broker
+            class TAO_IFR_Client_Export _TAO_CORBA_IDLType_Proxy_Broker
   {
   public:
-    virtual ~_TAO_IDLType_Proxy_Broker (void);
-    virtual _TAO_IDLType_Proxy_Impl &select_proxy (
-        IDLType *object
+        virtual ~_TAO_CORBA_IDLType_Proxy_Broker (void);
+        virtual _TAO_CORBA_IDLType_Proxy_Impl &select_proxy (
+            CORBA_IDLType *object
         ACE_ENV_ARG_DECL_WITH_DEFAULTS
       ) = 0;
     
   protected:
-    _TAO_IDLType_Proxy_Broker (void);
+        _TAO_CORBA_IDLType_Proxy_Broker (void);
     
   };
   
@@ -5379,27 +5015,27 @@
   //                 Remote Proxy Broker Declaration 
   //
   
-  class TAO_IFR_Client_Export _TAO_IDLType_Remote_Proxy_Broker
-    : public virtual _TAO_IDLType_Proxy_Broker
+      class TAO_IFR_Client_Export _TAO_CORBA_IDLType_Remote_Proxy_Broker
+        : public virtual _TAO_CORBA_IDLType_Proxy_Broker
   {
   public: 
-    _TAO_IDLType_Remote_Proxy_Broker (void);
+        _TAO_CORBA_IDLType_Remote_Proxy_Broker (void);
     
-    virtual ~_TAO_IDLType_Remote_Proxy_Broker (void);
+        virtual ~_TAO_CORBA_IDLType_Remote_Proxy_Broker (void);
     
-    virtual _TAO_IDLType_Proxy_Impl &select_proxy (
-        IDLType *object
+        virtual _TAO_CORBA_IDLType_Proxy_Impl &select_proxy (
+            CORBA_IDLType *object
         ACE_ENV_ARG_DECL
       );
     
   private:
-    _TAO_IDLType_Remote_Proxy_Impl remote_proxy_impl_;
+          _TAO_CORBA_IDLType_Remote_Proxy_Impl remote_proxy_impl_;
   
   public:
     // This member function is used to get an handle to the unique instance
     // of the Remote Proxy Broker that is available for a given
     // interface.
-    static _TAO_IDLType_Remote_Proxy_Broker *the_TAO_IDLType_Remote_Proxy_Broker (void);
+          static _TAO_CORBA_IDLType_Remote_Proxy_Broker *the_TAO_CORBA_IDLType_Remote_Proxy_Broker (void);
   };
   
   //
@@ -5409,14 +5045,12 @@
   
 #endif /* end #if !defined */
   
-  TAO_NAMESPACE_STORAGE_CLASS ::CORBA::TypeCode_ptr _tc_IDLType;
-  
   
 #if !defined (_CORBA_TYPEDEFDEF___PTR_CH_)
 #define _CORBA_TYPEDEFDEF___PTR_CH_
   
-  class TypedefDef;
-  typedef TypedefDef *TypedefDef_ptr;
+        class CORBA_TypedefDef;
+        typedef CORBA_TypedefDef *CORBA_TypedefDef_ptr;
   
 #endif /* end #if !defined */
   
@@ -5424,43 +5058,43 @@
 #if !defined (_CORBA_TYPEDEFDEF___VAR_CH_)
 #define _CORBA_TYPEDEFDEF___VAR_CH_
   
-  class TAO_IFR_Client_Export TypedefDef_var : public TAO_Base_var
+        class TAO_IFR_Client_Export CORBA_TypedefDef_var : public TAO_Base_var
   {
   public:
-    TypedefDef_var (void); // default constructor
-    TypedefDef_var (TypedefDef_ptr p) : ptr_ (p) {} 
-    TypedefDef_var (const TypedefDef_var &); // copy constructor
-    ~TypedefDef_var (void); // destructor
+          CORBA_TypedefDef_var (void); // default constructor
+          CORBA_TypedefDef_var (CORBA_TypedefDef_ptr p) : ptr_ (p) {}
+          CORBA_TypedefDef_var (const CORBA_TypedefDef_var &); // copy constructor
+          ~CORBA_TypedefDef_var (void); // destructor
     
-    TypedefDef_var &operator= (TypedefDef_ptr);
-    TypedefDef_var &operator= (const TypedefDef_var &);
-    TypedefDef_ptr operator-> (void) const;
+          CORBA_TypedefDef_var &operator= (CORBA_TypedefDef_ptr);
+          CORBA_TypedefDef_var &operator= (const CORBA_TypedefDef_var &);
+          CORBA_TypedefDef_ptr operator-> (void) const;
     
-    operator const TypedefDef_ptr &() const;
-    operator TypedefDef_ptr &();
+          operator const CORBA_TypedefDef_ptr &() const;
+          operator CORBA_TypedefDef_ptr &();
     // in, inout, out, _retn 
-    TypedefDef_ptr in (void) const;
-    TypedefDef_ptr &inout (void);
-    TypedefDef_ptr &out (void);
-    TypedefDef_ptr _retn (void);
-    TypedefDef_ptr ptr (void) const;
+          CORBA_TypedefDef_ptr in (void) const;
+          CORBA_TypedefDef_ptr &inout (void);
+          CORBA_TypedefDef_ptr &out (void);
+          CORBA_TypedefDef_ptr _retn (void);
+          CORBA_TypedefDef_ptr ptr (void) const;
     
     // Hooks used by template sequence and object manager classes
     // for non-defined forward declared interfaces.
-    static TypedefDef_ptr tao_duplicate (TypedefDef_ptr);
-    static void tao_release (TypedefDef_ptr);
-    static TypedefDef_ptr tao_nil (void);
-    static TypedefDef_ptr tao_narrow (
+          static CORBA_TypedefDef_ptr tao_duplicate (CORBA_TypedefDef_ptr);
+          static void tao_release (CORBA_TypedefDef_ptr);
+          static CORBA_TypedefDef_ptr tao_nil (void);
+          static CORBA_TypedefDef_ptr tao_narrow (
         CORBA::Object *
         ACE_ENV_ARG_DECL_NOT_USED
       );
     static CORBA::Object * tao_upcast (void *);
   
   private:
-    TypedefDef_ptr ptr_;
+          CORBA_TypedefDef_ptr ptr_;
     // Unimplemented - prevents widening assignment.
-    TypedefDef_var (const TAO_Base_var &rhs);
-    TypedefDef_var &operator= (const TAO_Base_var &rhs);
+          CORBA_TypedefDef_var (const TAO_Base_var &rhs);
+          CORBA_TypedefDef_var &operator= (const TAO_Base_var &rhs);
   };
 
 
@@ -5470,108 +5104,102 @@
 #if !defined (_CORBA_TYPEDEFDEF___OUT_CH_)
 #define _CORBA_TYPEDEFDEF___OUT_CH_
   
-  class TAO_IFR_Client_Export TypedefDef_out
+        class TAO_IFR_Client_Export CORBA_TypedefDef_out
   {
   public:
-    TypedefDef_out (TypedefDef_ptr &);
-    TypedefDef_out (TypedefDef_var &);
-    TypedefDef_out (const TypedefDef_out &);
-    TypedefDef_out &operator= (const TypedefDef_out &);
-    TypedefDef_out &operator= (const TypedefDef_var &);
-    TypedefDef_out &operator= (TypedefDef_ptr);
-    operator TypedefDef_ptr &();
-    TypedefDef_ptr &ptr (void);
-    TypedefDef_ptr operator-> (void);
+          CORBA_TypedefDef_out (CORBA_TypedefDef_ptr &);
+          CORBA_TypedefDef_out (CORBA_TypedefDef_var &);
+          CORBA_TypedefDef_out (const CORBA_TypedefDef_out &);
+          CORBA_TypedefDef_out &operator= (const CORBA_TypedefDef_out &);
+          CORBA_TypedefDef_out &operator= (const CORBA_TypedefDef_var &);
+          CORBA_TypedefDef_out &operator= (CORBA_TypedefDef_ptr);
+          operator CORBA_TypedefDef_ptr &();
+          CORBA_TypedefDef_ptr &ptr (void);
+          CORBA_TypedefDef_ptr operator-> (void);
   
   private:
-    TypedefDef_ptr &ptr_;
+          CORBA_TypedefDef_ptr &ptr_;
   };
   
   
 #endif /* end #if !defined */
   
-  // *************************************************************
-  // CORBA::TypedefDef
-  // TAO_IDL - Generated from
-  // be/be_visitor_interface/interface_ch.cpp:106
-  // *************************************************************
-  
   
 #if !defined (_CORBA_TYPEDEFDEF_CH_)
 #define _CORBA_TYPEDEFDEF_CH_
   
-  // Forward Classes Declaration.
-  class _TAO_TypedefDef_Proxy_Impl;
-  class _TAO_TypedefDef_Remote_Proxy_Impl;
-  class _TAO_TypedefDef_Proxy_Broker;
-  class _TAO_TypedefDef_Remote_Proxy_Broker;
-  
-  class TAO_IFR_Client_Export TypedefDef
-    : public virtual CORBA::Contained,
-      public virtual CORBA::IDLType
+        // Forward Classes Declaration
+        class _TAO_CORBA_TypedefDef_Proxy_Impl;
+        class _TAO_CORBA_TypedefDef_Remote_Proxy_Impl;
+        class _TAO_CORBA_TypedefDef_Proxy_Broker;
+        class _TAO_CORBA_TypedefDef_Remote_Proxy_Broker;
+
+        class TAO_IFR_Client_Export CORBA_TypedefDef
+          : public virtual CORBA_Contained,
+            public virtual CORBA_IDLType
   {
   public:
   #if !defined(__GNUC__) || !defined (ACE_HAS_GNUG_PRE_2_8)
-    typedef TypedefDef_ptr _ptr_type;
-    typedef TypedefDef_var _var_type;
+          typedef CORBA_TypedefDef_ptr _ptr_type;
+          typedef CORBA_TypedefDef_var _var_type;
   #endif /* ! __GNUC__ || g++ >= 2.8 */
 
     static int _tao_class_id;
     
-    // The static operations.
-    static TypedefDef_ptr _duplicate (TypedefDef_ptr obj);
+          // the static operations
+          static CORBA_TypedefDef_ptr _duplicate (CORBA_TypedefDef_ptr obj);
     
-    static TypedefDef_ptr _narrow (
+          static CORBA_TypedefDef_ptr _narrow (
         CORBA::Object_ptr obj
-        ACE_ENV_ARG_DECL_WITH_DEFAULTS
-      );
+              ACE_ENV_ARG_DECL_WITH_DEFAULTS);
     
-    static TypedefDef_ptr _unchecked_narrow (
+
+          static CORBA_TypedefDef_ptr _unchecked_narrow (
         CORBA::Object_ptr obj
-        ACE_ENV_ARG_DECL_WITH_DEFAULTS
-      );
+              ACE_ENV_ARG_DECL_WITH_DEFAULTS);
+
     
-    static TypedefDef_ptr _nil (void)
+          static CORBA_TypedefDef_ptr _nil (void)
       {
-        return (TypedefDef_ptr)0;
+              return (CORBA_TypedefDef_ptr)0;
       }
     
     static void _tao_any_destructor (void*);
     
     virtual CORBA::Boolean _is_a (
         const CORBA::Char *type_id
-        ACE_ENV_ARG_DECL_WITH_DEFAULTS
-      );
+              ACE_ENV_ARG_DECL_WITH_DEFAULTS);
+
     
     virtual void *_tao_QueryInterface (ptr_arith_t type);
     
     virtual const char* _interface_repository_id (void) const;
 
   private:
-    _TAO_TypedefDef_Proxy_Broker *the_TAO_TypedefDef_Proxy_Broker_;
+          _TAO_CORBA_TypedefDef_Proxy_Broker *the_TAO_CORBA_TypedefDef_Proxy_Broker_;
     
   protected:
-    TypedefDef (int collocated = 0);
+          CORBA_TypedefDef (int collocated = 0);
     
-    // These methods travese the inheritance tree and set the
+          // This methods travese the inheritance tree and set the
     // parents piece of the given class in the right mode
     virtual void CORBA_TypedefDef_setup_collocation (int collocated);
     
-    TypedefDef (
+          CORBA_TypedefDef (
         TAO_Stub *objref, 
         CORBA::Boolean _tao_collocated = 0,
         TAO_Abstract_ServantBase *servant = 0
       );
     
-    friend class _TAO_TypedefDef_Remote_Proxy_Impl;
-    friend class _TAO_TypedefDef_ThruPOA_Proxy_Impl;
-    friend class _TAO_TypedefDef_Direct_Proxy_Impl;
+          friend class _TAO_CORBA_TypedefDef_Remote_Proxy_Impl;
+          friend class _TAO_CORBA_TypedefDef_ThruPOA_Proxy_Impl;
+          friend class _TAO_CORBA_TypedefDef_Direct_Proxy_Impl;
     
-    virtual ~TypedefDef (void);
+          virtual ~CORBA_TypedefDef (void);
   
   private:
-    TypedefDef (const TypedefDef &);
-    void operator= (const TypedefDef &);
+          CORBA_TypedefDef (const CORBA_TypedefDef &);
+          void operator= (const CORBA_TypedefDef &);
   };
   
   // The Proxy Implementations are used by each interface to
@@ -5583,15 +5211,15 @@
   //                    Base Proxy Impl. Declaration
   //
   
-  class TAO_IFR_Client_Export _TAO_TypedefDef_Proxy_Impl
-    : public virtual CORBA::_TAO_Contained_Proxy_Impl, 
-      public virtual CORBA::_TAO_IDLType_Proxy_Impl
+        class TAO_IFR_Client_Export _TAO_CORBA_TypedefDef_Proxy_Impl
+          : public virtual _TAO_CORBA_Contained_Proxy_Impl,
+            public virtual _TAO_CORBA_IDLType_Proxy_Impl
   {
   public:
-    virtual ~_TAO_TypedefDef_Proxy_Impl (void) { }
+          virtual ~_TAO_CORBA_TypedefDef_Proxy_Impl (void) { }
     
   protected:
-    _TAO_TypedefDef_Proxy_Impl (void);
+          _TAO_CORBA_TypedefDef_Proxy_Impl (void);
   };
   
   //
@@ -5603,16 +5231,16 @@
   //                Remote Proxy Impl. Declaration
   //
   
-  class TAO_IFR_Client_Export _TAO_TypedefDef_Remote_Proxy_Impl
-    : public virtual _TAO_TypedefDef_Proxy_Impl,
+        class TAO_IFR_Client_Export _TAO_CORBA_TypedefDef_Remote_Proxy_Impl
+          : public virtual _TAO_CORBA_TypedefDef_Proxy_Impl,
       public virtual TAO_Remote_Object_Proxy_Impl,
-      public virtual CORBA::_TAO_Contained_Remote_Proxy_Impl, 
-      public virtual CORBA::_TAO_IDLType_Remote_Proxy_Impl
+            public virtual _TAO_CORBA_Contained_Remote_Proxy_Impl,
+            public virtual _TAO_CORBA_IDLType_Remote_Proxy_Impl
   {
   public:
-    _TAO_TypedefDef_Remote_Proxy_Impl (void);
+          _TAO_CORBA_TypedefDef_Remote_Proxy_Impl (void);
     
-    virtual ~_TAO_TypedefDef_Remote_Proxy_Impl (void) { }
+          virtual ~_TAO_CORBA_TypedefDef_Remote_Proxy_Impl (void) { }
     
   };
   
@@ -5630,17 +5258,17 @@
   //                 Base Proxy Broker Declaration 
   //
   
-    class TAO_IFR_Client_Export _TAO_TypedefDef_Proxy_Broker
+                class TAO_IFR_Client_Export _TAO_CORBA_TypedefDef_Proxy_Broker
   {
   public:
-    virtual ~_TAO_TypedefDef_Proxy_Broker (void);
-    virtual _TAO_TypedefDef_Proxy_Impl &select_proxy (
-        TypedefDef *object
+          virtual ~_TAO_CORBA_TypedefDef_Proxy_Broker (void);
+          virtual _TAO_CORBA_TypedefDef_Proxy_Impl &select_proxy (
+              CORBA_TypedefDef *object
         ACE_ENV_ARG_DECL_WITH_DEFAULTS
       ) = 0;
     
   protected:
-    _TAO_TypedefDef_Proxy_Broker (void);
+          _TAO_CORBA_TypedefDef_Proxy_Broker (void);
     
   };
   
@@ -5653,27 +5281,27 @@
   //                 Remote Proxy Broker Declaration 
   //
   
-  class TAO_IFR_Client_Export _TAO_TypedefDef_Remote_Proxy_Broker
-    : public virtual _TAO_TypedefDef_Proxy_Broker
+        class TAO_IFR_Client_Export _TAO_CORBA_TypedefDef_Remote_Proxy_Broker
+          : public virtual _TAO_CORBA_TypedefDef_Proxy_Broker
   {
   public: 
-    _TAO_TypedefDef_Remote_Proxy_Broker (void);
+          _TAO_CORBA_TypedefDef_Remote_Proxy_Broker (void);
     
-    virtual ~_TAO_TypedefDef_Remote_Proxy_Broker (void);
+          virtual ~_TAO_CORBA_TypedefDef_Remote_Proxy_Broker (void);
     
-    virtual _TAO_TypedefDef_Proxy_Impl &select_proxy (
-        TypedefDef *object
+          virtual _TAO_CORBA_TypedefDef_Proxy_Impl &select_proxy (
+              CORBA_TypedefDef *object
         ACE_ENV_ARG_DECL
       );
     
   private:
-    _TAO_TypedefDef_Remote_Proxy_Impl remote_proxy_impl_;
+            _TAO_CORBA_TypedefDef_Remote_Proxy_Impl remote_proxy_impl_;
   
   public:
     // This member function is used to get an handle to the unique instance
     // of the Remote Proxy Broker that is available for a given
     // interface.
-    static _TAO_TypedefDef_Remote_Proxy_Broker *the_TAO_TypedefDef_Remote_Proxy_Broker (void);
+            static _TAO_CORBA_TypedefDef_Remote_Proxy_Broker *the_TAO_CORBA_TypedefDef_Remote_Proxy_Broker (void);
   };
   
   //
@@ -5683,16 +5311,14 @@
   
 #endif /* end #if !defined */
   
-  TAO_NAMESPACE_STORAGE_CLASS ::CORBA::TypeCode_ptr _tc_TypedefDef;
+          struct CORBA_TypeDescription;
+          class CORBA_TypeDescription_var;
   
-  struct TypeDescription;
-  class TypeDescription_var;
-  
-  struct TAO_IFR_Client_Export TypeDescription
+          struct TAO_IFR_Client_Export CORBA_TypeDescription
   {
     
 #if !defined(__GNUC__) || !defined (ACE_HAS_GNUG_PRE_2_8)
-    typedef TypeDescription_var _var_type;
+            typedef CORBA_TypeDescription_var _var_type;
 #endif /* ! __GNUC__ || g++ >= 2.8 */
 
     static void _tao_any_destructor (void*);
@@ -5705,111 +5331,105 @@
     
   };
   
-  class TAO_IFR_Client_Export TypeDescription_var
+          class TAO_IFR_Client_Export CORBA_TypeDescription_var
   {
   public:
-    TypeDescription_var (void);
-    TypeDescription_var (TypeDescription *);
-    TypeDescription_var (const TypeDescription_var &);
-    ~TypeDescription_var (void);
-    
-    TypeDescription_var &operator= (TypeDescription *);
-    TypeDescription_var &operator= (const TypeDescription_var &);
-    TypeDescription *operator-> (void);
-    const TypeDescription *operator-> (void) const;
-    
-    operator const TypeDescription &() const;
-    operator TypeDescription &();
-    operator TypeDescription &() const;
+            CORBA_TypeDescription_var (void);
+            CORBA_TypeDescription_var (CORBA_TypeDescription *);
+            CORBA_TypeDescription_var (const CORBA_TypeDescription_var &);
+            ~CORBA_TypeDescription_var (void);
+
+            CORBA_TypeDescription_var &operator= (CORBA_TypeDescription *);
+            CORBA_TypeDescription_var &operator= (const CORBA_TypeDescription_var &);
+            CORBA_TypeDescription *operator-> (void);
+            const CORBA_TypeDescription *operator-> (void) const;
+
+            operator const CORBA_TypeDescription &() const;
+            operator CORBA_TypeDescription &();
+            operator CORBA_TypeDescription &() const;
     // Variable-size types only.
-    operator TypeDescription *&();
+            operator CORBA_TypeDescription *&();
     
     // in, inout, out, _retn 
-    const TypeDescription &in (void) const;
-    TypeDescription &inout (void);
-    TypeDescription *&out (void);
-    TypeDescription *_retn (void);
-    TypeDescription *ptr (void) const;
+            const CORBA_TypeDescription &in (void) const;
+            CORBA_TypeDescription &inout (void);
+            CORBA_TypeDescription *&out (void);
+            CORBA_TypeDescription *_retn (void);
+            CORBA_TypeDescription *ptr (void) const;
   
   private:
-    TypeDescription *ptr_;
+            CORBA_TypeDescription *ptr_;
   };
   
-  class TAO_IFR_Client_Export TypeDescription_out
+          class TAO_IFR_Client_Export CORBA_TypeDescription_out
   {
   public:
-    TypeDescription_out (TypeDescription *&);
-    TypeDescription_out (TypeDescription_var &);
-    TypeDescription_out (const TypeDescription_out &);
-    TypeDescription_out &operator= (const TypeDescription_out &);
-    TypeDescription_out &operator= (TypeDescription *);
-    operator TypeDescription *&();
-    TypeDescription *&ptr (void);
-    TypeDescription *operator-> (void);
+            CORBA_TypeDescription_out (CORBA_TypeDescription *&);
+            CORBA_TypeDescription_out (CORBA_TypeDescription_var &);
+            CORBA_TypeDescription_out (const CORBA_TypeDescription_out &);
+            CORBA_TypeDescription_out &operator= (const CORBA_TypeDescription_out &);
+            CORBA_TypeDescription_out &operator= (CORBA_TypeDescription *);
+            operator CORBA_TypeDescription *&();
+            CORBA_TypeDescription *&ptr (void);
+            CORBA_TypeDescription *operator-> (void);
     
   private:
-    TypeDescription *&ptr_;
+            CORBA_TypeDescription *&ptr_;
     // Assignment from T_var not allowed.
-    void operator= (const TypeDescription_var &);
+            void operator= (const CORBA_TypeDescription_var &);
   };
   
-  TAO_NAMESPACE_STORAGE_CLASS ::CORBA::TypeCode_ptr _tc_TypeDescription;
-  
-  
-}
-TAO_NAMESPACE_CLOSE // module CORBA
-
 // Proxy Broker Factory function pointer declarations.
 
 extern TAO_IFR_Client_Export
-CORBA::_TAO_IRObject_Proxy_Broker *
-(*CORBA__TAO_IRObject_Proxy_Broker_Factory_function_pointer) (
+          _TAO_CORBA_IRObject_Proxy_Broker *
+          (*_TAO_CORBA_IRObject_Proxy_Broker_Factory_function_pointer) (
     CORBA::Object_ptr obj
   );
 
 extern TAO_IFR_Client_Export
-CORBA::_TAO_Contained_Proxy_Broker *
-(*CORBA__TAO_Contained_Proxy_Broker_Factory_function_pointer) (
+          _TAO_CORBA_Contained_Proxy_Broker *
+          (*_TAO_CORBA_Contained_Proxy_Broker_Factory_function_pointer) (
     CORBA::Object_ptr obj
   );
 
 extern TAO_IFR_Client_Export
-CORBA::_TAO_Container_Proxy_Broker *
-(*CORBA__TAO_Container_Proxy_Broker_Factory_function_pointer) (
+          _TAO_CORBA_Container_Proxy_Broker *
+          (*_TAO_CORBA_Container_Proxy_Broker_Factory_function_pointer) (
     CORBA::Object_ptr obj
   );
 
 extern TAO_IFR_Client_Export
-CORBA::_TAO_IDLType_Proxy_Broker *
-(*CORBA__TAO_IDLType_Proxy_Broker_Factory_function_pointer) (
+          _TAO_CORBA_IDLType_Proxy_Broker *
+          (*_TAO_CORBA_IDLType_Proxy_Broker_Factory_function_pointer) (
     CORBA::Object_ptr obj
   );
 
 extern TAO_IFR_Client_Export
-CORBA::_TAO_TypedefDef_Proxy_Broker *
-(*CORBA__TAO_TypedefDef_Proxy_Broker_Factory_function_pointer) (
+          _TAO_CORBA_TypedefDef_Proxy_Broker *
+          (*_TAO_CORBA_TypedefDef_Proxy_Broker_Factory_function_pointer) (
     CORBA::Object_ptr obj
   );
 
 // External declarations for undefined interface
-// CORBA::Repository
+          // CORBA_Repository
 TAO_IFR_Client_Export
-CORBA::Repository_ptr
+          CORBA_Repository_ptr
 tao_CORBA_Repository_duplicate (
-    CORBA::Repository_ptr
+              CORBA_Repository_ptr
   );
 TAO_IFR_Client_Export
 void
 tao_CORBA_Repository_release (
-    CORBA::Repository_ptr
+              CORBA_Repository_ptr
   );
 TAO_IFR_Client_Export
-CORBA::Repository_ptr
+          CORBA_Repository_ptr
 tao_CORBA_Repository_nil (
     void
   );
 TAO_IFR_Client_Export
-CORBA::Repository_ptr
+          CORBA_Repository_ptr
 tao_CORBA_Repository_narrow (
     CORBA::Object *
     ACE_ENV_ARG_DECL_NOT_USED
@@ -5821,24 +5441,24 @@
   );
 
 // External declarations for undefined interface
-// CORBA::ModuleDef
+          // CORBA_ModuleDef
 TAO_IFR_Client_Export
-CORBA::ModuleDef_ptr
+          CORBA_ModuleDef_ptr
 tao_CORBA_ModuleDef_duplicate (
-    CORBA::ModuleDef_ptr
+              CORBA_ModuleDef_ptr
   );
 TAO_IFR_Client_Export
 void
 tao_CORBA_ModuleDef_release (
-    CORBA::ModuleDef_ptr
+              CORBA_ModuleDef_ptr
   );
 TAO_IFR_Client_Export
-CORBA::ModuleDef_ptr
+          CORBA_ModuleDef_ptr
 tao_CORBA_ModuleDef_nil (
     void
   );
 TAO_IFR_Client_Export
-CORBA::ModuleDef_ptr
+          CORBA_ModuleDef_ptr
 tao_CORBA_ModuleDef_narrow (
     CORBA::Object *
     ACE_ENV_ARG_DECL_NOT_USED
@@ -5850,24 +5470,24 @@
   );
 
 // External declarations for undefined interface
-// CORBA::ConstantDef
+          // CORBA_ConstantDef
 TAO_IFR_Client_Export
-CORBA::ConstantDef_ptr
+          CORBA_ConstantDef_ptr
 tao_CORBA_ConstantDef_duplicate (
-    CORBA::ConstantDef_ptr
+              CORBA_ConstantDef_ptr
   );
 TAO_IFR_Client_Export
 void
 tao_CORBA_ConstantDef_release (
-    CORBA::ConstantDef_ptr
+              CORBA_ConstantDef_ptr
   );
 TAO_IFR_Client_Export
-CORBA::ConstantDef_ptr
+          CORBA_ConstantDef_ptr
 tao_CORBA_ConstantDef_nil (
     void
   );
 TAO_IFR_Client_Export
-CORBA::ConstantDef_ptr
+          CORBA_ConstantDef_ptr
 tao_CORBA_ConstantDef_narrow (
     CORBA::Object *
     ACE_ENV_ARG_DECL_NOT_USED
@@ -5879,24 +5499,24 @@
   );
 
 // External declarations for undefined interface
-// CORBA::StructDef
+          // CORBA_StructDef
 TAO_IFR_Client_Export
-CORBA::StructDef_ptr
+          CORBA_StructDef_ptr
 tao_CORBA_StructDef_duplicate (
-    CORBA::StructDef_ptr
+              CORBA_StructDef_ptr
   );
 TAO_IFR_Client_Export
 void
 tao_CORBA_StructDef_release (
-    CORBA::StructDef_ptr
+              CORBA_StructDef_ptr
   );
 TAO_IFR_Client_Export
-CORBA::StructDef_ptr
+          CORBA_StructDef_ptr
 tao_CORBA_StructDef_nil (
     void
   );
 TAO_IFR_Client_Export
-CORBA::StructDef_ptr
+          CORBA_StructDef_ptr
 tao_CORBA_StructDef_narrow (
     CORBA::Object *
     ACE_ENV_ARG_DECL_NOT_USED
@@ -5908,24 +5528,24 @@
   );
 
 // External declarations for undefined interface
-// CORBA::UnionDef
+          // CORBA_UnionDef
 TAO_IFR_Client_Export
-CORBA::UnionDef_ptr
+          CORBA_UnionDef_ptr
 tao_CORBA_UnionDef_duplicate (
-    CORBA::UnionDef_ptr
+              CORBA_UnionDef_ptr
   );
 TAO_IFR_Client_Export
 void
 tao_CORBA_UnionDef_release (
-    CORBA::UnionDef_ptr
+              CORBA_UnionDef_ptr
   );
 TAO_IFR_Client_Export
-CORBA::UnionDef_ptr
+          CORBA_UnionDef_ptr
 tao_CORBA_UnionDef_nil (
     void
   );
 TAO_IFR_Client_Export
-CORBA::UnionDef_ptr
+          CORBA_UnionDef_ptr
 tao_CORBA_UnionDef_narrow (
     CORBA::Object *
     ACE_ENV_ARG_DECL_NOT_USED
@@ -5937,24 +5557,24 @@
   );
 
 // External declarations for undefined interface
-// CORBA::EnumDef
+          // CORBA_EnumDef
 TAO_IFR_Client_Export
-CORBA::EnumDef_ptr
+          CORBA_EnumDef_ptr
 tao_CORBA_EnumDef_duplicate (
-    CORBA::EnumDef_ptr
+              CORBA_EnumDef_ptr
   );
 TAO_IFR_Client_Export
 void
 tao_CORBA_EnumDef_release (
-    CORBA::EnumDef_ptr
+              CORBA_EnumDef_ptr
   );
 TAO_IFR_Client_Export
-CORBA::EnumDef_ptr
+          CORBA_EnumDef_ptr
 tao_CORBA_EnumDef_nil (
     void
   );
 TAO_IFR_Client_Export
-CORBA::EnumDef_ptr
+          CORBA_EnumDef_ptr
 tao_CORBA_EnumDef_narrow (
     CORBA::Object *
     ACE_ENV_ARG_DECL_NOT_USED
@@ -5966,24 +5586,24 @@
   );
 
 // External declarations for undefined interface
-// CORBA::AliasDef
+          // CORBA_AliasDef
 TAO_IFR_Client_Export
-CORBA::AliasDef_ptr
+          CORBA_AliasDef_ptr
 tao_CORBA_AliasDef_duplicate (
-    CORBA::AliasDef_ptr
+              CORBA_AliasDef_ptr
   );
 TAO_IFR_Client_Export
 void
 tao_CORBA_AliasDef_release (
-    CORBA::AliasDef_ptr
+              CORBA_AliasDef_ptr
   );
 TAO_IFR_Client_Export
-CORBA::AliasDef_ptr
+          CORBA_AliasDef_ptr
 tao_CORBA_AliasDef_nil (
     void
   );
 TAO_IFR_Client_Export
-CORBA::AliasDef_ptr
+          CORBA_AliasDef_ptr
 tao_CORBA_AliasDef_narrow (
     CORBA::Object *
     ACE_ENV_ARG_DECL_NOT_USED
@@ -5995,24 +5615,24 @@
   );
 
 // External declarations for undefined interface
-// CORBA::InterfaceDef
+          // CORBA_InterfaceDef
 TAO_IFR_Client_Export
-CORBA::InterfaceDef_ptr
+          CORBA_InterfaceDef_ptr
 tao_CORBA_InterfaceDef_duplicate (
-    CORBA::InterfaceDef_ptr
+              CORBA_InterfaceDef_ptr
   );
 TAO_IFR_Client_Export
 void
 tao_CORBA_InterfaceDef_release (
-    CORBA::InterfaceDef_ptr
+              CORBA_InterfaceDef_ptr
   );
 TAO_IFR_Client_Export
-CORBA::InterfaceDef_ptr
+          CORBA_InterfaceDef_ptr
 tao_CORBA_InterfaceDef_nil (
     void
   );
 TAO_IFR_Client_Export
-CORBA::InterfaceDef_ptr
+          CORBA_InterfaceDef_ptr
 tao_CORBA_InterfaceDef_narrow (
     CORBA::Object *
     ACE_ENV_ARG_DECL_NOT_USED
@@ -6024,24 +5644,24 @@
   );
 
 // External declarations for undefined interface
-// CORBA::ExceptionDef
+          // CORBA_ExceptionDef
 TAO_IFR_Client_Export
-CORBA::ExceptionDef_ptr
+          CORBA_ExceptionDef_ptr
 tao_CORBA_ExceptionDef_duplicate (
-    CORBA::ExceptionDef_ptr
+              CORBA_ExceptionDef_ptr
   );
 TAO_IFR_Client_Export
 void
 tao_CORBA_ExceptionDef_release (
-    CORBA::ExceptionDef_ptr
+              CORBA_ExceptionDef_ptr
   );
 TAO_IFR_Client_Export
-CORBA::ExceptionDef_ptr
+          CORBA_ExceptionDef_ptr
 tao_CORBA_ExceptionDef_nil (
     void
   );
 TAO_IFR_Client_Export
-CORBA::ExceptionDef_ptr
+          CORBA_ExceptionDef_ptr
 tao_CORBA_ExceptionDef_narrow (
     CORBA::Object *
     ACE_ENV_ARG_DECL_NOT_USED
@@ -6053,24 +5673,24 @@
   );
 
 // External declarations for undefined interface
-// CORBA::NativeDef
+          // CORBA_NativeDef
 TAO_IFR_Client_Export
-CORBA::NativeDef_ptr
+          CORBA_NativeDef_ptr
 tao_CORBA_NativeDef_duplicate (
-    CORBA::NativeDef_ptr
+              CORBA_NativeDef_ptr
   );
 TAO_IFR_Client_Export
 void
 tao_CORBA_NativeDef_release (
-    CORBA::NativeDef_ptr
+              CORBA_NativeDef_ptr
   );
 TAO_IFR_Client_Export
-CORBA::NativeDef_ptr
+          CORBA_NativeDef_ptr
 tao_CORBA_NativeDef_nil (
     void
   );
 TAO_IFR_Client_Export
-CORBA::NativeDef_ptr
+          CORBA_NativeDef_ptr
 tao_CORBA_NativeDef_narrow (
     CORBA::Object *
     ACE_ENV_ARG_DECL_NOT_USED
@@ -6082,24 +5702,24 @@
   );
 
 // External declarations for undefined interface
-// CORBA::ValueDef
+          // CORBA_ValueDef
 TAO_IFR_Client_Export
-CORBA::ValueDef_ptr
+          CORBA_ValueDef_ptr
 tao_CORBA_ValueDef_duplicate (
-    CORBA::ValueDef_ptr
+              CORBA_ValueDef_ptr
   );
 TAO_IFR_Client_Export
 void
 tao_CORBA_ValueDef_release (
-    CORBA::ValueDef_ptr
+              CORBA_ValueDef_ptr
   );
 TAO_IFR_Client_Export
-CORBA::ValueDef_ptr
+          CORBA_ValueDef_ptr
 tao_CORBA_ValueDef_nil (
     void
   );
 TAO_IFR_Client_Export
-CORBA::ValueDef_ptr
+          CORBA_ValueDef_ptr
 tao_CORBA_ValueDef_narrow (
     CORBA::Object *
     ACE_ENV_ARG_DECL_NOT_USED
@@ -6111,24 +5731,24 @@
   );
 
 // External declarations for undefined interface
-// CORBA::ValueBoxDef
+          // CORBA_ValueBoxDef
 TAO_IFR_Client_Export
-CORBA::ValueBoxDef_ptr
+          CORBA_ValueBoxDef_ptr
 tao_CORBA_ValueBoxDef_duplicate (
-    CORBA::ValueBoxDef_ptr
+              CORBA_ValueBoxDef_ptr
   );
 TAO_IFR_Client_Export
 void
 tao_CORBA_ValueBoxDef_release (
-    CORBA::ValueBoxDef_ptr
+              CORBA_ValueBoxDef_ptr
   );
 TAO_IFR_Client_Export
-CORBA::ValueBoxDef_ptr
+          CORBA_ValueBoxDef_ptr
 tao_CORBA_ValueBoxDef_nil (
     void
   );
 TAO_IFR_Client_Export
-CORBA::ValueBoxDef_ptr
+          CORBA_ValueBoxDef_ptr
 tao_CORBA_ValueBoxDef_narrow (
     CORBA::Object *
     ACE_ENV_ARG_DECL_NOT_USED
@@ -6140,24 +5760,24 @@
   );
 
 // External declarations for undefined interface
-// CORBA::AbstractInterfaceDef
+          // CORBA_AbstractInterfaceDef
 TAO_IFR_Client_Export
-CORBA::AbstractInterfaceDef_ptr
+          CORBA_AbstractInterfaceDef_ptr
 tao_CORBA_AbstractInterfaceDef_duplicate (
-    CORBA::AbstractInterfaceDef_ptr
+              CORBA_AbstractInterfaceDef_ptr
   );
 TAO_IFR_Client_Export
 void
 tao_CORBA_AbstractInterfaceDef_release (
-    CORBA::AbstractInterfaceDef_ptr
+              CORBA_AbstractInterfaceDef_ptr
   );
 TAO_IFR_Client_Export
-CORBA::AbstractInterfaceDef_ptr
+          CORBA_AbstractInterfaceDef_ptr
 tao_CORBA_AbstractInterfaceDef_nil (
     void
   );
 TAO_IFR_Client_Export
-CORBA::AbstractInterfaceDef_ptr
+          CORBA_AbstractInterfaceDef_ptr
 tao_CORBA_AbstractInterfaceDef_narrow (
     CORBA::Object *
     ACE_ENV_ARG_DECL_NOT_USED
@@ -6169,24 +5789,24 @@
   );
 
 // External declarations for undefined interface
-// CORBA::LocalInterfaceDef
+          // CORBA_LocalInterfaceDef
 TAO_IFR_Client_Export
-CORBA::LocalInterfaceDef_ptr
+          CORBA_LocalInterfaceDef_ptr
 tao_CORBA_LocalInterfaceDef_duplicate (
-    CORBA::LocalInterfaceDef_ptr
+              CORBA_LocalInterfaceDef_ptr
   );
 TAO_IFR_Client_Export
 void
 tao_CORBA_LocalInterfaceDef_release (
-    CORBA::LocalInterfaceDef_ptr
+              CORBA_LocalInterfaceDef_ptr
   );
 TAO_IFR_Client_Export
-CORBA::LocalInterfaceDef_ptr
+          CORBA_LocalInterfaceDef_ptr
 tao_CORBA_LocalInterfaceDef_nil (
     void
   );
 TAO_IFR_Client_Export
-CORBA::LocalInterfaceDef_ptr
+          CORBA_LocalInterfaceDef_ptr
 tao_CORBA_LocalInterfaceDef_narrow (
     CORBA::Object *
     ACE_ENV_ARG_DECL_NOT_USED
@@ -6199,293 +5819,288 @@
 
 TAO_IFR_Client_Export void operator<<= (CORBA::Any &, CORBA::DefinitionKind);
 TAO_IFR_Client_Export CORBA::Boolean operator>>= (const CORBA::Any &, CORBA::DefinitionKind &);
-// Any operators for interface CORBA::IRObject
-TAO_IFR_Client_Export void operator<<= (CORBA::Any &, CORBA::IRObject_ptr); // copying
-TAO_IFR_Client_Export void operator<<= (CORBA::Any &, CORBA::IRObject_ptr *); // non-copying
-TAO_IFR_Client_Export CORBA::Boolean operator>>= (const CORBA::Any &, CORBA::IRObject_ptr &);
-// Any operators for interface CORBA::Repository
-TAO_IFR_Client_Export void operator<<= (CORBA::Any &, CORBA::Repository_ptr);
-TAO_IFR_Client_Export CORBA::Boolean operator>>= (const CORBA::Any &, CORBA::Repository *&);
-// Any operators for interface CORBA::Contained
-TAO_IFR_Client_Export void operator<<= (CORBA::Any &, CORBA::Contained_ptr); // copying
-TAO_IFR_Client_Export void operator<<= (CORBA::Any &, CORBA::Contained_ptr *); // non-copying
-TAO_IFR_Client_Export CORBA::Boolean operator>>= (const CORBA::Any &, CORBA::Contained_ptr &);
-TAO_IFR_Client_Export void operator<<= (CORBA::Any &, const CORBA::Contained::Description &); // copying version
-TAO_IFR_Client_Export void operator<<= (CORBA::Any &, CORBA::Contained::Description*); // noncopying version
-TAO_IFR_Client_Export CORBA::Boolean operator>>= (const CORBA::Any &, CORBA::Contained::Description *&); // deprecated
-TAO_IFR_Client_Export CORBA::Boolean operator>>= (const CORBA::Any &, const CORBA::Contained::Description *&);
-TAO_IFR_Client_Export void operator<<= (CORBA::Any &, const CORBA::ContainedSeq &); // copying version
-TAO_IFR_Client_Export void operator<<= (CORBA::Any &, CORBA::ContainedSeq*); // noncopying version
-TAO_IFR_Client_Export CORBA::Boolean operator>>= (const CORBA::Any &, CORBA::ContainedSeq *&); // deprecated
-TAO_IFR_Client_Export CORBA::Boolean operator>>= (const CORBA::Any &, const CORBA::ContainedSeq *&);
-// Any operators for interface CORBA::ModuleDef
-TAO_IFR_Client_Export void operator<<= (CORBA::Any &, CORBA::ModuleDef_ptr);
-TAO_IFR_Client_Export CORBA::Boolean operator>>= (const CORBA::Any &, CORBA::ModuleDef *&);
-// Any operators for interface CORBA::ConstantDef
-TAO_IFR_Client_Export void operator<<= (CORBA::Any &, CORBA::ConstantDef_ptr);
-TAO_IFR_Client_Export CORBA::Boolean operator>>= (const CORBA::Any &, CORBA::ConstantDef *&);
-// Any operators for interface CORBA::StructDef
-TAO_IFR_Client_Export void operator<<= (CORBA::Any &, CORBA::StructDef_ptr);
-TAO_IFR_Client_Export CORBA::Boolean operator>>= (const CORBA::Any &, CORBA::StructDef *&);
-// Any operators for interface CORBA::UnionDef
-TAO_IFR_Client_Export void operator<<= (CORBA::Any &, CORBA::UnionDef_ptr);
-TAO_IFR_Client_Export CORBA::Boolean operator>>= (const CORBA::Any &, CORBA::UnionDef *&);
-// Any operators for interface CORBA::EnumDef
-TAO_IFR_Client_Export void operator<<= (CORBA::Any &, CORBA::EnumDef_ptr);
-TAO_IFR_Client_Export CORBA::Boolean operator>>= (const CORBA::Any &, CORBA::EnumDef *&);
-// Any operators for interface CORBA::AliasDef
-TAO_IFR_Client_Export void operator<<= (CORBA::Any &, CORBA::AliasDef_ptr);
-TAO_IFR_Client_Export CORBA::Boolean operator>>= (const CORBA::Any &, CORBA::AliasDef *&);
-// Any operators for interface CORBA::InterfaceDef
-TAO_IFR_Client_Export void operator<<= (CORBA::Any &, CORBA::InterfaceDef_ptr);
-TAO_IFR_Client_Export CORBA::Boolean operator>>= (const CORBA::Any &, CORBA::InterfaceDef *&);
-TAO_IFR_Client_Export void operator<<= (CORBA::Any &, const CORBA::InterfaceDefSeq &); // copying version
-TAO_IFR_Client_Export void operator<<= (CORBA::Any &, CORBA::InterfaceDefSeq*); // noncopying version
-TAO_IFR_Client_Export CORBA::Boolean operator>>= (const CORBA::Any &, CORBA::InterfaceDefSeq *&); // deprecated
-TAO_IFR_Client_Export CORBA::Boolean operator>>= (const CORBA::Any &, const CORBA::InterfaceDefSeq *&);
-// Any operators for interface CORBA::ExceptionDef
-TAO_IFR_Client_Export void operator<<= (CORBA::Any &, CORBA::ExceptionDef_ptr);
-TAO_IFR_Client_Export CORBA::Boolean operator>>= (const CORBA::Any &, CORBA::ExceptionDef *&);
-// Any operators for interface CORBA::NativeDef
-TAO_IFR_Client_Export void operator<<= (CORBA::Any &, CORBA::NativeDef_ptr);
-TAO_IFR_Client_Export CORBA::Boolean operator>>= (const CORBA::Any &, CORBA::NativeDef *&);
-// Any operators for interface CORBA::ValueDef
-TAO_IFR_Client_Export void operator<<= (CORBA::Any &, CORBA::ValueDef_ptr);
-TAO_IFR_Client_Export CORBA::Boolean operator>>= (const CORBA::Any &, CORBA::ValueDef *&);
-TAO_IFR_Client_Export void operator<<= (CORBA::Any &, const CORBA::ValueDefSeq &); // copying version
-TAO_IFR_Client_Export void operator<<= (CORBA::Any &, CORBA::ValueDefSeq*); // noncopying version
-TAO_IFR_Client_Export CORBA::Boolean operator>>= (const CORBA::Any &, CORBA::ValueDefSeq *&); // deprecated
-TAO_IFR_Client_Export CORBA::Boolean operator>>= (const CORBA::Any &, const CORBA::ValueDefSeq *&);
-// Any operators for interface CORBA::ValueBoxDef
-TAO_IFR_Client_Export void operator<<= (CORBA::Any &, CORBA::ValueBoxDef_ptr);
-TAO_IFR_Client_Export CORBA::Boolean operator>>= (const CORBA::Any &, CORBA::ValueBoxDef *&);
-// Any operators for interface CORBA::AbstractInterfaceDef
-TAO_IFR_Client_Export void operator<<= (CORBA::Any &, CORBA::AbstractInterfaceDef_ptr);
-TAO_IFR_Client_Export CORBA::Boolean operator>>= (const CORBA::Any &, CORBA::AbstractInterfaceDef *&);
-TAO_IFR_Client_Export void operator<<= (CORBA::Any &, const CORBA::AbstractInterfaceDefSeq &); // copying version
-TAO_IFR_Client_Export void operator<<= (CORBA::Any &, CORBA::AbstractInterfaceDefSeq*); // noncopying version
-TAO_IFR_Client_Export CORBA::Boolean operator>>= (const CORBA::Any &, CORBA::AbstractInterfaceDefSeq *&); // deprecated
-TAO_IFR_Client_Export CORBA::Boolean operator>>= (const CORBA::Any &, const CORBA::AbstractInterfaceDefSeq *&);
-// Any operators for interface CORBA::LocalInterfaceDef
-TAO_IFR_Client_Export void operator<<= (CORBA::Any &, CORBA::LocalInterfaceDef_ptr);
-TAO_IFR_Client_Export CORBA::Boolean operator>>= (const CORBA::Any &, CORBA::LocalInterfaceDef *&);
-TAO_IFR_Client_Export void operator<<= (CORBA::Any &, const CORBA::LocalInterfaceDefSeq &); // copying version
-TAO_IFR_Client_Export void operator<<= (CORBA::Any &, CORBA::LocalInterfaceDefSeq*); // noncopying version
-TAO_IFR_Client_Export CORBA::Boolean operator>>= (const CORBA::Any &, CORBA::LocalInterfaceDefSeq *&); // deprecated
-TAO_IFR_Client_Export CORBA::Boolean operator>>= (const CORBA::Any &, const CORBA::LocalInterfaceDefSeq *&);
-TAO_IFR_Client_Export void operator<<= (CORBA::Any &, const CORBA::StructMember &); // copying version
-TAO_IFR_Client_Export void operator<<= (CORBA::Any &, CORBA::StructMember*); // noncopying version
-TAO_IFR_Client_Export CORBA::Boolean operator>>= (const CORBA::Any &, CORBA::StructMember *&); // deprecated
-TAO_IFR_Client_Export CORBA::Boolean operator>>= (const CORBA::Any &, const CORBA::StructMember *&);
-TAO_IFR_Client_Export void operator<<= (CORBA::Any &, const CORBA::StructMemberSeq &); // copying version
-TAO_IFR_Client_Export void operator<<= (CORBA::Any &, CORBA::StructMemberSeq*); // noncopying version
-TAO_IFR_Client_Export CORBA::Boolean operator>>= (const CORBA::Any &, CORBA::StructMemberSeq *&); // deprecated
-TAO_IFR_Client_Export CORBA::Boolean operator>>= (const CORBA::Any &, const CORBA::StructMemberSeq *&);
-TAO_IFR_Client_Export void operator<<= (CORBA::Any &, const CORBA::Initializer &); // copying version
-TAO_IFR_Client_Export void operator<<= (CORBA::Any &, CORBA::Initializer*); // noncopying version
-TAO_IFR_Client_Export CORBA::Boolean operator>>= (const CORBA::Any &, CORBA::Initializer *&); // deprecated
-TAO_IFR_Client_Export CORBA::Boolean operator>>= (const CORBA::Any &, const CORBA::Initializer *&);
-TAO_IFR_Client_Export void operator<<= (CORBA::Any &, const CORBA::InitializerSeq &); // copying version
-TAO_IFR_Client_Export void operator<<= (CORBA::Any &, CORBA::InitializerSeq*); // noncopying version
-TAO_IFR_Client_Export CORBA::Boolean operator>>= (const CORBA::Any &, CORBA::InitializerSeq *&); // deprecated
-TAO_IFR_Client_Export CORBA::Boolean operator>>= (const CORBA::Any &, const CORBA::InitializerSeq *&);
-TAO_IFR_Client_Export void operator<<= (CORBA::Any &, const CORBA::UnionMember &); // copying version
-TAO_IFR_Client_Export void operator<<= (CORBA::Any &, CORBA::UnionMember*); // noncopying version
-TAO_IFR_Client_Export CORBA::Boolean operator>>= (const CORBA::Any &, CORBA::UnionMember *&); // deprecated
-TAO_IFR_Client_Export CORBA::Boolean operator>>= (const CORBA::Any &, const CORBA::UnionMember *&);
-TAO_IFR_Client_Export void operator<<= (CORBA::Any &, const CORBA::UnionMemberSeq &); // copying version
-TAO_IFR_Client_Export void operator<<= (CORBA::Any &, CORBA::UnionMemberSeq*); // noncopying version
-TAO_IFR_Client_Export CORBA::Boolean operator>>= (const CORBA::Any &, CORBA::UnionMemberSeq *&); // deprecated
-TAO_IFR_Client_Export CORBA::Boolean operator>>= (const CORBA::Any &, const CORBA::UnionMemberSeq *&);
-TAO_IFR_Client_Export void operator<<= (CORBA::Any &, const CORBA::EnumMemberSeq &); // copying version
-TAO_IFR_Client_Export void operator<<= (CORBA::Any &, CORBA::EnumMemberSeq*); // noncopying version
-TAO_IFR_Client_Export CORBA::Boolean operator>>= (const CORBA::Any &, CORBA::EnumMemberSeq *&); // deprecated
-TAO_IFR_Client_Export CORBA::Boolean operator>>= (const CORBA::Any &, const CORBA::EnumMemberSeq *&);
-// Any operators for interface CORBA::Container
-TAO_IFR_Client_Export void operator<<= (CORBA::Any &, CORBA::Container_ptr); // copying
-TAO_IFR_Client_Export void operator<<= (CORBA::Any &, CORBA::Container_ptr *); // non-copying
-TAO_IFR_Client_Export CORBA::Boolean operator>>= (const CORBA::Any &, CORBA::Container_ptr &);
-TAO_IFR_Client_Export void operator<<= (CORBA::Any &, const CORBA::Container::Description &); // copying version
-TAO_IFR_Client_Export void operator<<= (CORBA::Any &, CORBA::Container::Description*); // noncopying version
-TAO_IFR_Client_Export CORBA::Boolean operator>>= (const CORBA::Any &, CORBA::Container::Description *&); // deprecated
-TAO_IFR_Client_Export CORBA::Boolean operator>>= (const CORBA::Any &, const CORBA::Container::Description *&);
-TAO_IFR_Client_Export void operator<<= (CORBA::Any &, const CORBA::Container::DescriptionSeq &); // copying version
-TAO_IFR_Client_Export void operator<<= (CORBA::Any &, CORBA::Container::DescriptionSeq*); // noncopying version
-TAO_IFR_Client_Export CORBA::Boolean operator>>= (const CORBA::Any &, CORBA::Container::DescriptionSeq *&); // deprecated
-TAO_IFR_Client_Export CORBA::Boolean operator>>= (const CORBA::Any &, const CORBA::Container::DescriptionSeq *&);
-// Any operators for interface CORBA::IDLType
-TAO_IFR_Client_Export void operator<<= (CORBA::Any &, CORBA::IDLType_ptr); // copying
-TAO_IFR_Client_Export void operator<<= (CORBA::Any &, CORBA::IDLType_ptr *); // non-copying
-TAO_IFR_Client_Export CORBA::Boolean operator>>= (const CORBA::Any &, CORBA::IDLType_ptr &);
-// Any operators for interface CORBA::TypedefDef
-TAO_IFR_Client_Export void operator<<= (CORBA::Any &, CORBA::TypedefDef_ptr); // copying
-TAO_IFR_Client_Export void operator<<= (CORBA::Any &, CORBA::TypedefDef_ptr *); // non-copying
-TAO_IFR_Client_Export CORBA::Boolean operator>>= (const CORBA::Any &, CORBA::TypedefDef_ptr &);
-TAO_IFR_Client_Export void operator<<= (CORBA::Any &, const CORBA::TypeDescription &); // copying version
-TAO_IFR_Client_Export void operator<<= (CORBA::Any &, CORBA::TypeDescription*); // noncopying version
-TAO_IFR_Client_Export CORBA::Boolean operator>>= (const CORBA::Any &, CORBA::TypeDescription *&); // deprecated
-TAO_IFR_Client_Export CORBA::Boolean operator>>= (const CORBA::Any &, const CORBA::TypeDescription *&);
+          // Any operators for interface CORBA_IRObject
+          TAO_IFR_Client_Export void operator<<= (CORBA::Any &, CORBA_IRObject_ptr);
+          TAO_IFR_Client_Export CORBA::Boolean operator>>= (const CORBA::Any &, CORBA_IRObject *&);
+          // Any operators for interface CORBA_Repository
+          TAO_IFR_Client_Export void operator<<= (CORBA::Any &, CORBA_Repository_ptr);
+          TAO_IFR_Client_Export CORBA::Boolean operator>>= (const CORBA::Any &, CORBA_Repository *&);
+          // Any operators for interface CORBA_Contained
+          TAO_IFR_Client_Export void operator<<= (CORBA::Any &, CORBA_Contained_ptr);
+          TAO_IFR_Client_Export CORBA::Boolean operator>>= (const CORBA::Any &, CORBA_Contained *&);
+          TAO_IFR_Client_Export void operator<<= (CORBA::Any &, const CORBA_Contained::Description &); // copying version
+          TAO_IFR_Client_Export void operator<<= (CORBA::Any &, CORBA_Contained::Description*); // noncopying version
+          TAO_IFR_Client_Export CORBA::Boolean operator>>= (const CORBA::Any &, CORBA_Contained::Description *&); // deprecated
+TAO_IFR_Client_Export CORBA::Boolean operator>>= (const CORBA::Any &, const CORBA_Contained::Description *&);
+                    TAO_IFR_Client_Export void operator<<= (CORBA::Any &, const CORBA_ContainedSeq &); // copying version
+          TAO_IFR_Client_Export void operator<<= (CORBA::Any &, CORBA_ContainedSeq*); // noncopying version
+          TAO_IFR_Client_Export CORBA::Boolean operator>>= (const CORBA::Any &, CORBA_ContainedSeq *&); // deprecated
+TAO_IFR_Client_Export CORBA::Boolean operator>>= (const CORBA::Any &, const CORBA_ContainedSeq *&);
+          // Any operators for interface CORBA_ModuleDef
+          TAO_IFR_Client_Export void operator<<= (CORBA::Any &, CORBA_ModuleDef_ptr);
+          TAO_IFR_Client_Export CORBA::Boolean operator>>= (const CORBA::Any &, CORBA_ModuleDef *&);
+          // Any operators for interface CORBA_ConstantDef
+          TAO_IFR_Client_Export void operator<<= (CORBA::Any &, CORBA_ConstantDef_ptr);
+          TAO_IFR_Client_Export CORBA::Boolean operator>>= (const CORBA::Any &, CORBA_ConstantDef *&);
+          // Any operators for interface CORBA_StructDef
+          TAO_IFR_Client_Export void operator<<= (CORBA::Any &, CORBA_StructDef_ptr);
+          TAO_IFR_Client_Export CORBA::Boolean operator>>= (const CORBA::Any &, CORBA_StructDef *&);
+          // Any operators for interface CORBA_UnionDef
+          TAO_IFR_Client_Export void operator<<= (CORBA::Any &, CORBA_UnionDef_ptr);
+          TAO_IFR_Client_Export CORBA::Boolean operator>>= (const CORBA::Any &, CORBA_UnionDef *&);
+          // Any operators for interface CORBA_EnumDef
+          TAO_IFR_Client_Export void operator<<= (CORBA::Any &, CORBA_EnumDef_ptr);
+          TAO_IFR_Client_Export CORBA::Boolean operator>>= (const CORBA::Any &, CORBA_EnumDef *&);
+          // Any operators for interface CORBA_AliasDef
+          TAO_IFR_Client_Export void operator<<= (CORBA::Any &, CORBA_AliasDef_ptr);
+          TAO_IFR_Client_Export CORBA::Boolean operator>>= (const CORBA::Any &, CORBA_AliasDef *&);
+          // Any operators for interface CORBA_InterfaceDef
+          TAO_IFR_Client_Export void operator<<= (CORBA::Any &, CORBA_InterfaceDef_ptr);
+          TAO_IFR_Client_Export CORBA::Boolean operator>>= (const CORBA::Any &, CORBA_InterfaceDef *&);
+                    TAO_IFR_Client_Export void operator<<= (CORBA::Any &, const CORBA_InterfaceDefSeq &); // copying version
+          TAO_IFR_Client_Export void operator<<= (CORBA::Any &, CORBA_InterfaceDefSeq*); // noncopying version
+          TAO_IFR_Client_Export CORBA::Boolean operator>>= (const CORBA::Any &, CORBA_InterfaceDefSeq *&); // deprecated
+TAO_IFR_Client_Export CORBA::Boolean operator>>= (const CORBA::Any &, const CORBA_InterfaceDefSeq *&);
+          // Any operators for interface CORBA_ExceptionDef
+          TAO_IFR_Client_Export void operator<<= (CORBA::Any &, CORBA_ExceptionDef_ptr);
+          TAO_IFR_Client_Export CORBA::Boolean operator>>= (const CORBA::Any &, CORBA_ExceptionDef *&);
+          // Any operators for interface CORBA_NativeDef
+          TAO_IFR_Client_Export void operator<<= (CORBA::Any &, CORBA_NativeDef_ptr);
+          TAO_IFR_Client_Export CORBA::Boolean operator>>= (const CORBA::Any &, CORBA_NativeDef *&);
+          // Any operators for interface CORBA_ValueDef
+          TAO_IFR_Client_Export void operator<<= (CORBA::Any &, CORBA_ValueDef_ptr);
+          TAO_IFR_Client_Export CORBA::Boolean operator>>= (const CORBA::Any &, CORBA_ValueDef *&);
+                    TAO_IFR_Client_Export void operator<<= (CORBA::Any &, const CORBA_ValueDefSeq &); // copying version
+          TAO_IFR_Client_Export void operator<<= (CORBA::Any &, CORBA_ValueDefSeq*); // noncopying version
+          TAO_IFR_Client_Export CORBA::Boolean operator>>= (const CORBA::Any &, CORBA_ValueDefSeq *&); // deprecated
+TAO_IFR_Client_Export CORBA::Boolean operator>>= (const CORBA::Any &, const CORBA_ValueDefSeq *&);
+          // Any operators for interface CORBA_ValueBoxDef
+          TAO_IFR_Client_Export void operator<<= (CORBA::Any &, CORBA_ValueBoxDef_ptr);
+          TAO_IFR_Client_Export CORBA::Boolean operator>>= (const CORBA::Any &, CORBA_ValueBoxDef *&);
+          // Any operators for interface CORBA_AbstractInterfaceDef
+          TAO_IFR_Client_Export void operator<<= (CORBA::Any &, CORBA_AbstractInterfaceDef_ptr);
+          TAO_IFR_Client_Export CORBA::Boolean operator>>= (const CORBA::Any &, CORBA_AbstractInterfaceDef *&);
+                    TAO_IFR_Client_Export void operator<<= (CORBA::Any &, const CORBA_AbstractInterfaceDefSeq &); // copying version
+          TAO_IFR_Client_Export void operator<<= (CORBA::Any &, CORBA_AbstractInterfaceDefSeq*); // noncopying version
+          TAO_IFR_Client_Export CORBA::Boolean operator>>= (const CORBA::Any &, CORBA_AbstractInterfaceDefSeq *&); // deprecated
+TAO_IFR_Client_Export CORBA::Boolean operator>>= (const CORBA::Any &, const CORBA_AbstractInterfaceDefSeq *&);
+          // Any operators for interface CORBA_LocalInterfaceDef
+          TAO_IFR_Client_Export void operator<<= (CORBA::Any &, CORBA_LocalInterfaceDef_ptr);
+          TAO_IFR_Client_Export CORBA::Boolean operator>>= (const CORBA::Any &, CORBA_LocalInterfaceDef *&);
+                    TAO_IFR_Client_Export void operator<<= (CORBA::Any &, const CORBA_LocalInterfaceDefSeq &); // copying version
+          TAO_IFR_Client_Export void operator<<= (CORBA::Any &, CORBA_LocalInterfaceDefSeq*); // noncopying version
+          TAO_IFR_Client_Export CORBA::Boolean operator>>= (const CORBA::Any &, CORBA_LocalInterfaceDefSeq *&); // deprecated
+TAO_IFR_Client_Export CORBA::Boolean operator>>= (const CORBA::Any &, const CORBA_LocalInterfaceDefSeq *&);
+          TAO_IFR_Client_Export void operator<<= (CORBA::Any &, const CORBA_StructMember &); // copying version
+          TAO_IFR_Client_Export void operator<<= (CORBA::Any &, CORBA_StructMember*); // noncopying version
+          TAO_IFR_Client_Export CORBA::Boolean operator>>= (const CORBA::Any &, CORBA_StructMember *&); // deprecated
+TAO_IFR_Client_Export CORBA::Boolean operator>>= (const CORBA::Any &, const CORBA_StructMember *&);
+                    TAO_IFR_Client_Export void operator<<= (CORBA::Any &, const CORBA_StructMemberSeq &); // copying version
+          TAO_IFR_Client_Export void operator<<= (CORBA::Any &, CORBA_StructMemberSeq*); // noncopying version
+          TAO_IFR_Client_Export CORBA::Boolean operator>>= (const CORBA::Any &, CORBA_StructMemberSeq *&); // deprecated
+TAO_IFR_Client_Export CORBA::Boolean operator>>= (const CORBA::Any &, const CORBA_StructMemberSeq *&);
+          TAO_IFR_Client_Export void operator<<= (CORBA::Any &, const CORBA_Initializer &); // copying version
+          TAO_IFR_Client_Export void operator<<= (CORBA::Any &, CORBA_Initializer*); // noncopying version
+          TAO_IFR_Client_Export CORBA::Boolean operator>>= (const CORBA::Any &, CORBA_Initializer *&); // deprecated
+TAO_IFR_Client_Export CORBA::Boolean operator>>= (const CORBA::Any &, const CORBA_Initializer *&);
+                    TAO_IFR_Client_Export void operator<<= (CORBA::Any &, const CORBA_InitializerSeq &); // copying version
+          TAO_IFR_Client_Export void operator<<= (CORBA::Any &, CORBA_InitializerSeq*); // noncopying version
+          TAO_IFR_Client_Export CORBA::Boolean operator>>= (const CORBA::Any &, CORBA_InitializerSeq *&); // deprecated
+TAO_IFR_Client_Export CORBA::Boolean operator>>= (const CORBA::Any &, const CORBA_InitializerSeq *&);
+          TAO_IFR_Client_Export void operator<<= (CORBA::Any &, const CORBA_UnionMember &); // copying version
+          TAO_IFR_Client_Export void operator<<= (CORBA::Any &, CORBA_UnionMember*); // noncopying version
+          TAO_IFR_Client_Export CORBA::Boolean operator>>= (const CORBA::Any &, CORBA_UnionMember *&); // deprecated
+TAO_IFR_Client_Export CORBA::Boolean operator>>= (const CORBA::Any &, const CORBA_UnionMember *&);
+                    TAO_IFR_Client_Export void operator<<= (CORBA::Any &, const CORBA_UnionMemberSeq &); // copying version
+          TAO_IFR_Client_Export void operator<<= (CORBA::Any &, CORBA_UnionMemberSeq*); // noncopying version
+          TAO_IFR_Client_Export CORBA::Boolean operator>>= (const CORBA::Any &, CORBA_UnionMemberSeq *&); // deprecated
+TAO_IFR_Client_Export CORBA::Boolean operator>>= (const CORBA::Any &, const CORBA_UnionMemberSeq *&);
+                    TAO_IFR_Client_Export void operator<<= (CORBA::Any &, const CORBA_EnumMemberSeq &); // copying version
+          TAO_IFR_Client_Export void operator<<= (CORBA::Any &, CORBA_EnumMemberSeq*); // noncopying version
+          TAO_IFR_Client_Export CORBA::Boolean operator>>= (const CORBA::Any &, CORBA_EnumMemberSeq *&); // deprecated
+TAO_IFR_Client_Export CORBA::Boolean operator>>= (const CORBA::Any &, const CORBA_EnumMemberSeq *&);
+          // Any operators for interface CORBA_Container
+          TAO_IFR_Client_Export void operator<<= (CORBA::Any &, CORBA_Container_ptr);
+          TAO_IFR_Client_Export CORBA::Boolean operator>>= (const CORBA::Any &, CORBA_Container *&);
+          TAO_IFR_Client_Export void operator<<= (CORBA::Any &, const CORBA_Container::Description &); // copying version
+          TAO_IFR_Client_Export void operator<<= (CORBA::Any &, CORBA_Container::Description*); // noncopying version
+          TAO_IFR_Client_Export CORBA::Boolean operator>>= (const CORBA::Any &, CORBA_Container::Description *&); // deprecated
+TAO_IFR_Client_Export CORBA::Boolean operator>>= (const CORBA::Any &, const CORBA_Container::Description *&);
+                    TAO_IFR_Client_Export void operator<<= (CORBA::Any &, const CORBA_Container::DescriptionSeq &); // copying version
+          TAO_IFR_Client_Export void operator<<= (CORBA::Any &, CORBA_Container::DescriptionSeq*); // noncopying version
+          TAO_IFR_Client_Export CORBA::Boolean operator>>= (const CORBA::Any &, CORBA_Container::DescriptionSeq *&); // deprecated
+TAO_IFR_Client_Export CORBA::Boolean operator>>= (const CORBA::Any &, const CORBA_Container::DescriptionSeq *&);
+          // Any operators for interface CORBA_IDLType
+          TAO_IFR_Client_Export void operator<<= (CORBA::Any &, CORBA_IDLType_ptr);
+          TAO_IFR_Client_Export CORBA::Boolean operator>>= (const CORBA::Any &, CORBA_IDLType *&);
+          // Any operators for interface CORBA_TypedefDef
+          TAO_IFR_Client_Export void operator<<= (CORBA::Any &, CORBA_TypedefDef_ptr);
+          TAO_IFR_Client_Export CORBA::Boolean operator>>= (const CORBA::Any &, CORBA_TypedefDef *&);
+          TAO_IFR_Client_Export void operator<<= (CORBA::Any &, const CORBA_TypeDescription &); // copying version
+          TAO_IFR_Client_Export void operator<<= (CORBA::Any &, CORBA_TypeDescription*); // noncopying version
+          TAO_IFR_Client_Export CORBA::Boolean operator>>= (const CORBA::Any &, CORBA_TypeDescription *&); // deprecated
+TAO_IFR_Client_Export CORBA::Boolean operator>>= (const CORBA::Any &, const CORBA_TypeDescription *&);
 
 #ifndef __ACE_INLINE__
 
 TAO_IFR_Client_Export CORBA::Boolean operator<< (TAO_OutputCDR &, const CORBA::DefinitionKind &); // 
 TAO_IFR_Client_Export CORBA::Boolean operator>> (TAO_InputCDR &, CORBA::DefinitionKind &);
-TAO_IFR_Client_Export CORBA::Boolean operator<< (TAO_OutputCDR &, const CORBA::IRObject_ptr );
-TAO_IFR_Client_Export CORBA::Boolean operator>> (TAO_InputCDR &, CORBA::IRObject_ptr &);
-TAO_IFR_Client_Export CORBA::Boolean operator<< (TAO_OutputCDR &, const CORBA::Repository_ptr );
-TAO_IFR_Client_Export CORBA::Boolean operator>> (TAO_InputCDR &, CORBA::Repository_ptr &);
-TAO_IFR_Client_Export CORBA::Boolean operator<< (TAO_OutputCDR &, const CORBA::Contained_ptr );
-TAO_IFR_Client_Export CORBA::Boolean operator>> (TAO_InputCDR &, CORBA::Contained_ptr &);
-TAO_IFR_Client_Export CORBA::Boolean operator<< (TAO_OutputCDR &, const CORBA::Contained::Description &);
-TAO_IFR_Client_Export CORBA::Boolean operator>> (TAO_InputCDR &, CORBA::Contained::Description &);
+          TAO_IFR_Client_Export CORBA::Boolean operator<< (TAO_OutputCDR &, const CORBA_IRObject_ptr );
+          TAO_IFR_Client_Export CORBA::Boolean operator>> (TAO_InputCDR &, CORBA_IRObject_ptr &);
+          TAO_IFR_Client_Export CORBA::Boolean operator<< (TAO_OutputCDR &, const CORBA_Repository_ptr );
+          TAO_IFR_Client_Export CORBA::Boolean operator>> (TAO_InputCDR &, CORBA_Repository_ptr &);
+          TAO_IFR_Client_Export CORBA::Boolean operator<< (TAO_OutputCDR &, const CORBA_Contained_ptr );
+          TAO_IFR_Client_Export CORBA::Boolean operator>> (TAO_InputCDR &, CORBA_Contained_ptr &);
+          TAO_IFR_Client_Export CORBA::Boolean operator<< (TAO_OutputCDR &, const CORBA_Contained::Description &);
+          TAO_IFR_Client_Export CORBA::Boolean operator>> (TAO_InputCDR &, CORBA_Contained::Description &);
 
 #if !defined _TAO_CDR_OP_CORBA_ContainedSeq_H_
 #define _TAO_CDR_OP_CORBA_ContainedSeq_H_
 
 TAO_IFR_Client_Export CORBA::Boolean operator<< (
     TAO_OutputCDR &,
-    const CORBA::ContainedSeq &
+              const CORBA_ContainedSeq &
   );
 TAO_IFR_Client_Export CORBA::Boolean operator>> (
     TAO_InputCDR &,
-    CORBA::ContainedSeq &
+              CORBA_ContainedSeq &
   );
 
 #endif /* _TAO_CDR_OP_CORBA_ContainedSeq_H_ */
 
-TAO_IFR_Client_Export CORBA::Boolean operator<< (TAO_OutputCDR &, const CORBA::ModuleDef_ptr );
-TAO_IFR_Client_Export CORBA::Boolean operator>> (TAO_InputCDR &, CORBA::ModuleDef_ptr &);
-TAO_IFR_Client_Export CORBA::Boolean operator<< (TAO_OutputCDR &, const CORBA::ConstantDef_ptr );
-TAO_IFR_Client_Export CORBA::Boolean operator>> (TAO_InputCDR &, CORBA::ConstantDef_ptr &);
-TAO_IFR_Client_Export CORBA::Boolean operator<< (TAO_OutputCDR &, const CORBA::StructDef_ptr );
-TAO_IFR_Client_Export CORBA::Boolean operator>> (TAO_InputCDR &, CORBA::StructDef_ptr &);
-TAO_IFR_Client_Export CORBA::Boolean operator<< (TAO_OutputCDR &, const CORBA::UnionDef_ptr );
-TAO_IFR_Client_Export CORBA::Boolean operator>> (TAO_InputCDR &, CORBA::UnionDef_ptr &);
-TAO_IFR_Client_Export CORBA::Boolean operator<< (TAO_OutputCDR &, const CORBA::EnumDef_ptr );
-TAO_IFR_Client_Export CORBA::Boolean operator>> (TAO_InputCDR &, CORBA::EnumDef_ptr &);
-TAO_IFR_Client_Export CORBA::Boolean operator<< (TAO_OutputCDR &, const CORBA::AliasDef_ptr );
-TAO_IFR_Client_Export CORBA::Boolean operator>> (TAO_InputCDR &, CORBA::AliasDef_ptr &);
-TAO_IFR_Client_Export CORBA::Boolean operator<< (TAO_OutputCDR &, const CORBA::InterfaceDef_ptr );
-TAO_IFR_Client_Export CORBA::Boolean operator>> (TAO_InputCDR &, CORBA::InterfaceDef_ptr &);
+          TAO_IFR_Client_Export CORBA::Boolean operator<< (TAO_OutputCDR &, const CORBA_ModuleDef_ptr );
+          TAO_IFR_Client_Export CORBA::Boolean operator>> (TAO_InputCDR &, CORBA_ModuleDef_ptr &);
+          TAO_IFR_Client_Export CORBA::Boolean operator<< (TAO_OutputCDR &, const CORBA_ConstantDef_ptr );
+          TAO_IFR_Client_Export CORBA::Boolean operator>> (TAO_InputCDR &, CORBA_ConstantDef_ptr &);
+          TAO_IFR_Client_Export CORBA::Boolean operator<< (TAO_OutputCDR &, const CORBA_StructDef_ptr );
+          TAO_IFR_Client_Export CORBA::Boolean operator>> (TAO_InputCDR &, CORBA_StructDef_ptr &);
+          TAO_IFR_Client_Export CORBA::Boolean operator<< (TAO_OutputCDR &, const CORBA_UnionDef_ptr );
+          TAO_IFR_Client_Export CORBA::Boolean operator>> (TAO_InputCDR &, CORBA_UnionDef_ptr &);
+          TAO_IFR_Client_Export CORBA::Boolean operator<< (TAO_OutputCDR &, const CORBA_EnumDef_ptr );
+          TAO_IFR_Client_Export CORBA::Boolean operator>> (TAO_InputCDR &, CORBA_EnumDef_ptr &);
+          TAO_IFR_Client_Export CORBA::Boolean operator<< (TAO_OutputCDR &, const CORBA_AliasDef_ptr );
+          TAO_IFR_Client_Export CORBA::Boolean operator>> (TAO_InputCDR &, CORBA_AliasDef_ptr &);
+          TAO_IFR_Client_Export CORBA::Boolean operator<< (TAO_OutputCDR &, const CORBA_InterfaceDef_ptr );
+          TAO_IFR_Client_Export CORBA::Boolean operator>> (TAO_InputCDR &, CORBA_InterfaceDef_ptr &);
 
 #if !defined _TAO_CDR_OP_CORBA_InterfaceDefSeq_H_
 #define _TAO_CDR_OP_CORBA_InterfaceDefSeq_H_
 
 TAO_IFR_Client_Export CORBA::Boolean operator<< (
     TAO_OutputCDR &,
-    const CORBA::InterfaceDefSeq &
+              const CORBA_InterfaceDefSeq &
   );
 TAO_IFR_Client_Export CORBA::Boolean operator>> (
     TAO_InputCDR &,
-    CORBA::InterfaceDefSeq &
+              CORBA_InterfaceDefSeq &
   );
 
 #endif /* _TAO_CDR_OP_CORBA_InterfaceDefSeq_H_ */
 
-TAO_IFR_Client_Export CORBA::Boolean operator<< (TAO_OutputCDR &, const CORBA::ExceptionDef_ptr );
-TAO_IFR_Client_Export CORBA::Boolean operator>> (TAO_InputCDR &, CORBA::ExceptionDef_ptr &);
-TAO_IFR_Client_Export CORBA::Boolean operator<< (TAO_OutputCDR &, const CORBA::NativeDef_ptr );
-TAO_IFR_Client_Export CORBA::Boolean operator>> (TAO_InputCDR &, CORBA::NativeDef_ptr &);
-TAO_IFR_Client_Export CORBA::Boolean operator<< (TAO_OutputCDR &, const CORBA::ValueDef_ptr );
-TAO_IFR_Client_Export CORBA::Boolean operator>> (TAO_InputCDR &, CORBA::ValueDef_ptr &);
+          TAO_IFR_Client_Export CORBA::Boolean operator<< (TAO_OutputCDR &, const CORBA_ExceptionDef_ptr );
+          TAO_IFR_Client_Export CORBA::Boolean operator>> (TAO_InputCDR &, CORBA_ExceptionDef_ptr &);
+          TAO_IFR_Client_Export CORBA::Boolean operator<< (TAO_OutputCDR &, const CORBA_NativeDef_ptr );
+          TAO_IFR_Client_Export CORBA::Boolean operator>> (TAO_InputCDR &, CORBA_NativeDef_ptr &);
+          TAO_IFR_Client_Export CORBA::Boolean operator<< (TAO_OutputCDR &, const CORBA_ValueDef_ptr );
+          TAO_IFR_Client_Export CORBA::Boolean operator>> (TAO_InputCDR &, CORBA_ValueDef_ptr &);
 
 #if !defined _TAO_CDR_OP_CORBA_ValueDefSeq_H_
 #define _TAO_CDR_OP_CORBA_ValueDefSeq_H_
 
 TAO_IFR_Client_Export CORBA::Boolean operator<< (
     TAO_OutputCDR &,
-    const CORBA::ValueDefSeq &
+              const CORBA_ValueDefSeq &
   );
 TAO_IFR_Client_Export CORBA::Boolean operator>> (
     TAO_InputCDR &,
-    CORBA::ValueDefSeq &
+              CORBA_ValueDefSeq &
   );
 
 #endif /* _TAO_CDR_OP_CORBA_ValueDefSeq_H_ */
 
-TAO_IFR_Client_Export CORBA::Boolean operator<< (TAO_OutputCDR &, const CORBA::ValueBoxDef_ptr );
-TAO_IFR_Client_Export CORBA::Boolean operator>> (TAO_InputCDR &, CORBA::ValueBoxDef_ptr &);
-TAO_IFR_Client_Export CORBA::Boolean operator<< (TAO_OutputCDR &, const CORBA::AbstractInterfaceDef_ptr );
-TAO_IFR_Client_Export CORBA::Boolean operator>> (TAO_InputCDR &, CORBA::AbstractInterfaceDef_ptr &);
+          TAO_IFR_Client_Export CORBA::Boolean operator<< (TAO_OutputCDR &, const CORBA_ValueBoxDef_ptr );
+          TAO_IFR_Client_Export CORBA::Boolean operator>> (TAO_InputCDR &, CORBA_ValueBoxDef_ptr &);
+          TAO_IFR_Client_Export CORBA::Boolean operator<< (TAO_OutputCDR &, const CORBA_AbstractInterfaceDef_ptr );
+          TAO_IFR_Client_Export CORBA::Boolean operator>> (TAO_InputCDR &, CORBA_AbstractInterfaceDef_ptr &);
 
 #if !defined _TAO_CDR_OP_CORBA_AbstractInterfaceDefSeq_H_
 #define _TAO_CDR_OP_CORBA_AbstractInterfaceDefSeq_H_
 
 TAO_IFR_Client_Export CORBA::Boolean operator<< (
     TAO_OutputCDR &,
-    const CORBA::AbstractInterfaceDefSeq &
+              const CORBA_AbstractInterfaceDefSeq &
   );
 TAO_IFR_Client_Export CORBA::Boolean operator>> (
     TAO_InputCDR &,
-    CORBA::AbstractInterfaceDefSeq &
+              CORBA_AbstractInterfaceDefSeq &
   );
 
 #endif /* _TAO_CDR_OP_CORBA_AbstractInterfaceDefSeq_H_ */
 
-TAO_IFR_Client_Export CORBA::Boolean operator<< (TAO_OutputCDR &, const CORBA::LocalInterfaceDef_ptr );
-TAO_IFR_Client_Export CORBA::Boolean operator>> (TAO_InputCDR &, CORBA::LocalInterfaceDef_ptr &);
+          TAO_IFR_Client_Export CORBA::Boolean operator<< (TAO_OutputCDR &, const CORBA_LocalInterfaceDef_ptr );
+          TAO_IFR_Client_Export CORBA::Boolean operator>> (TAO_InputCDR &, CORBA_LocalInterfaceDef_ptr &);
 
 #if !defined _TAO_CDR_OP_CORBA_LocalInterfaceDefSeq_H_
 #define _TAO_CDR_OP_CORBA_LocalInterfaceDefSeq_H_
 
 TAO_IFR_Client_Export CORBA::Boolean operator<< (
     TAO_OutputCDR &,
-    const CORBA::LocalInterfaceDefSeq &
+              const CORBA_LocalInterfaceDefSeq &
   );
 TAO_IFR_Client_Export CORBA::Boolean operator>> (
     TAO_InputCDR &,
-    CORBA::LocalInterfaceDefSeq &
+              CORBA_LocalInterfaceDefSeq &
   );
 
 #endif /* _TAO_CDR_OP_CORBA_LocalInterfaceDefSeq_H_ */
 
-TAO_IFR_Client_Export CORBA::Boolean operator<< (TAO_OutputCDR &, const CORBA::StructMember &);
-TAO_IFR_Client_Export CORBA::Boolean operator>> (TAO_InputCDR &, CORBA::StructMember &);
+          TAO_IFR_Client_Export CORBA::Boolean operator<< (TAO_OutputCDR &, const CORBA_StructMember &);
+          TAO_IFR_Client_Export CORBA::Boolean operator>> (TAO_InputCDR &, CORBA_StructMember &);
 
 #if !defined _TAO_CDR_OP_CORBA_StructMemberSeq_H_
 #define _TAO_CDR_OP_CORBA_StructMemberSeq_H_
 
 TAO_IFR_Client_Export CORBA::Boolean operator<< (
     TAO_OutputCDR &,
-    const CORBA::StructMemberSeq &
+              const CORBA_StructMemberSeq &
   );
 TAO_IFR_Client_Export CORBA::Boolean operator>> (
     TAO_InputCDR &,
-    CORBA::StructMemberSeq &
+              CORBA_StructMemberSeq &
   );
 
 #endif /* _TAO_CDR_OP_CORBA_StructMemberSeq_H_ */
 
-TAO_IFR_Client_Export CORBA::Boolean operator<< (TAO_OutputCDR &, const CORBA::Initializer &);
-TAO_IFR_Client_Export CORBA::Boolean operator>> (TAO_InputCDR &, CORBA::Initializer &);
+          TAO_IFR_Client_Export CORBA::Boolean operator<< (TAO_OutputCDR &, const CORBA_Initializer &);
+          TAO_IFR_Client_Export CORBA::Boolean operator>> (TAO_InputCDR &, CORBA_Initializer &);
 
 #if !defined _TAO_CDR_OP_CORBA_InitializerSeq_H_
 #define _TAO_CDR_OP_CORBA_InitializerSeq_H_
 
 TAO_IFR_Client_Export CORBA::Boolean operator<< (
     TAO_OutputCDR &,
-    const CORBA::InitializerSeq &
+              const CORBA_InitializerSeq &
   );
 TAO_IFR_Client_Export CORBA::Boolean operator>> (
     TAO_InputCDR &,
-    CORBA::InitializerSeq &
+              CORBA_InitializerSeq &
   );
 
 #endif /* _TAO_CDR_OP_CORBA_InitializerSeq_H_ */
 
-TAO_IFR_Client_Export CORBA::Boolean operator<< (TAO_OutputCDR &, const CORBA::UnionMember &);
-TAO_IFR_Client_Export CORBA::Boolean operator>> (TAO_InputCDR &, CORBA::UnionMember &);
+          TAO_IFR_Client_Export CORBA::Boolean operator<< (TAO_OutputCDR &, const CORBA_UnionMember &);
+          TAO_IFR_Client_Export CORBA::Boolean operator>> (TAO_InputCDR &, CORBA_UnionMember &);
 
 #if !defined _TAO_CDR_OP_CORBA_UnionMemberSeq_H_
 #define _TAO_CDR_OP_CORBA_UnionMemberSeq_H_
 
 TAO_IFR_Client_Export CORBA::Boolean operator<< (
     TAO_OutputCDR &,
-    const CORBA::UnionMemberSeq &
+              const CORBA_UnionMemberSeq &
   );
 TAO_IFR_Client_Export CORBA::Boolean operator>> (
     TAO_InputCDR &,
-    CORBA::UnionMemberSeq &
+              CORBA_UnionMemberSeq &
   );
 
 #endif /* _TAO_CDR_OP_CORBA_UnionMemberSeq_H_ */
@@ -6496,40 +6111,40 @@
 
 TAO_IFR_Client_Export CORBA::Boolean operator<< (
     TAO_OutputCDR &,
-    const CORBA::EnumMemberSeq &
+              const CORBA_EnumMemberSeq &
   );
 TAO_IFR_Client_Export CORBA::Boolean operator>> (
     TAO_InputCDR &,
-    CORBA::EnumMemberSeq &
+              CORBA_EnumMemberSeq &
   );
 
 #endif /* _TAO_CDR_OP_CORBA_EnumMemberSeq_H_ */
 
-TAO_IFR_Client_Export CORBA::Boolean operator<< (TAO_OutputCDR &, const CORBA::Container_ptr );
-TAO_IFR_Client_Export CORBA::Boolean operator>> (TAO_InputCDR &, CORBA::Container_ptr &);
-TAO_IFR_Client_Export CORBA::Boolean operator<< (TAO_OutputCDR &, const CORBA::Container::Description &);
-TAO_IFR_Client_Export CORBA::Boolean operator>> (TAO_InputCDR &, CORBA::Container::Description &);
+          TAO_IFR_Client_Export CORBA::Boolean operator<< (TAO_OutputCDR &, const CORBA_Container_ptr );
+          TAO_IFR_Client_Export CORBA::Boolean operator>> (TAO_InputCDR &, CORBA_Container_ptr &);
+          TAO_IFR_Client_Export CORBA::Boolean operator<< (TAO_OutputCDR &, const CORBA_Container::Description &);
+          TAO_IFR_Client_Export CORBA::Boolean operator>> (TAO_InputCDR &, CORBA_Container::Description &);
 
 #if !defined _TAO_CDR_OP_CORBA_Container_DescriptionSeq_H_
 #define _TAO_CDR_OP_CORBA_Container_DescriptionSeq_H_
 
 TAO_IFR_Client_Export CORBA::Boolean operator<< (
     TAO_OutputCDR &,
-    const CORBA::Container::DescriptionSeq &
+              const CORBA_Container::DescriptionSeq &
   );
 TAO_IFR_Client_Export CORBA::Boolean operator>> (
     TAO_InputCDR &,
-    CORBA::Container::DescriptionSeq &
+              CORBA_Container::DescriptionSeq &
   );
 
 #endif /* _TAO_CDR_OP_CORBA_Container_DescriptionSeq_H_ */
 
-TAO_IFR_Client_Export CORBA::Boolean operator<< (TAO_OutputCDR &, const CORBA::IDLType_ptr );
-TAO_IFR_Client_Export CORBA::Boolean operator>> (TAO_InputCDR &, CORBA::IDLType_ptr &);
-TAO_IFR_Client_Export CORBA::Boolean operator<< (TAO_OutputCDR &, const CORBA::TypedefDef_ptr );
-TAO_IFR_Client_Export CORBA::Boolean operator>> (TAO_InputCDR &, CORBA::TypedefDef_ptr &);
-TAO_IFR_Client_Export CORBA::Boolean operator<< (TAO_OutputCDR &, const CORBA::TypeDescription &);
-TAO_IFR_Client_Export CORBA::Boolean operator>> (TAO_InputCDR &, CORBA::TypeDescription &);
+          TAO_IFR_Client_Export CORBA::Boolean operator<< (TAO_OutputCDR &, const CORBA_IDLType_ptr );
+          TAO_IFR_Client_Export CORBA::Boolean operator>> (TAO_InputCDR &, CORBA_IDLType_ptr &);
+          TAO_IFR_Client_Export CORBA::Boolean operator<< (TAO_OutputCDR &, const CORBA_TypedefDef_ptr );
+          TAO_IFR_Client_Export CORBA::Boolean operator>> (TAO_InputCDR &, CORBA_TypedefDef_ptr &);
+          TAO_IFR_Client_Export CORBA::Boolean operator<< (TAO_OutputCDR &, const CORBA_TypeDescription &);
+          TAO_IFR_Client_Export CORBA::Boolean operator>> (TAO_InputCDR &, CORBA_TypeDescription &);
 
 #endif /* __ACE_INLINE__ */
 
