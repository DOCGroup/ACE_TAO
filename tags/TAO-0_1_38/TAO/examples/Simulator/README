$Id$

Documentation for the Simulator/DOVE demo

Purpose: To show how the event service can be used to as a media to 
         transport monitoring events including data. Also to 
         show how objects implemented in Java can access/can be accessed
         by TAO objects.
         An other purpose is also to show the feasability of
         the DOVE framework as mentioned in 
         "http://wwww.cs.wustl.edu/~schmidt/dove.html".

Application: Using the Event Service as distribution media, event 
             consumers and event suppliers are needed. The central
             element in the Event Service is a so called, event channel.
             The event channel transports events from suppliers to
             consumers. Filtering can be activated.
             The mapping to DOVE is the following: 
             Event Channel - DOVE Agent
             Event Consumer - DOVE Browser and/or DOVE MIB
             Event Supplier - Monitored Application (here 
                              an object supplying recorded scheduling 
                              and dummy information)


Implementation:
             The events contain structs with avionics information.
             They are supllied by sensors of an avionic and are
             consumed by the DOVE Browser, an JAVA applet running on 
             a different machine and/or location. The collected metrics are displayed in
             JAVA Beans. A object called DOVE Management Information
             Base connects to the same Event Channel. The MIB analyses the 
             the data field in the event. The field is a CORBA::Any,
             so no assumptions can be made about the kind of data in 
             the event. The analysed Any is then printed into a file.

             A C++ Supplier pushes events containing a
             navigation or weapons struct to the Event Service.
             The latency and other machine metrics are read from
             a file, which contains recorded scheduling information.
             The Event Service  dispatches the events to any number of
             DOVE Browsers/MIBs which are implemented using JAVA/C++. 
             The DOVE Browser extracts the data of the structs and dispatches
             it to various Visualization Components.


For more informations refer to:
	$TAO_ROOT/docs/releasenotes/index.html


Requirements: 
           * C++ compiler
		   * Java JDK 1,1,x
		   * ACE/TAO environment, 
		   * Visibroker 3.2 for Java
		   

!!RELEASE CHANGES: 
	- the file make.bat is in this directory just for test purposes.
	  It is used to switch from the Visibroker environment to the JDK 1.2
	  envrionment. So don't worry about it, you won't need it.

	- the file ss has been moved one level up and it got
	  renamed to "start_services". So use it to start the 
	  naming and event service.

	- it is no longer required to start the scheduling service

Parts of the Demo:

	* DOVE Browser (implemented in Java using Visibroker 3.2 for Java)

	* Event Supplier, can be seen as a monitored object, called
	  DOVE Application (implemented in C++ using TAO)

	* DOVE MIB, storing event data on persistent storage and keeping
	  track of statistical data (implemented in C++ using TAO)

Files:
	Common:
        NavWeap.idl - IDL definition of the Weapons and Navigation struct
        README - this readme file


	Event Supplier: (in directory  $TAO_ROOT/orbsvcs/tests/Simulator/Event_Supplier/)
        Event_Sup.cpp - Event Supplier
        Event_Sup.h   - Event Supplier class definition
        Makefile      - Event Supplier Makefile
		(Event_Con.cpp, Event_Con.h - Event Consumer for testing)
		svc.conf - helper file


	DOVEBrowswer: (in directory  $TAO_ROOT/orbsvcs/tests/Simulator/DOVEBrowser/)
		AnswerEvent.java  - Having my own Events
		AnswerListener.java - Listener for these Events
		DataHandler.java  - Base class for all Data Handlers
		DemoCore.java - Core of the Demo to connect Observables with Observers
		DemoObservable.java - Base class for Observables
		DoubleVisComp.java  - Visualization Component (will be a JavaBean) for Doubles
		DOVEBrowser.java - Wrapper around DemoCore
		NS_Resolve.java  - Resolving the inital reference to the Naming Service
		NavWeapDataHandler.java  - Specialized Data Handler for Navigation and Weapon data
		NavigationVisComp.java - Visualization Component (... JavaBean) for Navigation data
		ObservablesDialog.java - Dialog window for connecting Observables with OBservers
		Properties.java	- constant definitons
		PushConsumer.java - Event Service Push Consumer
		PushConsumerFactory.java - Factory for the Consumer
		Queue.java - Queue for the DoubleVisComp 
		VisComp.java - Base class for the Visualization Components
		WeaponsVisComp.java - Visualization Component for Weapons
	

	DOVE MIB: (in directory  $TAO_ROOT/orbsvcs/tests/Simulator/DOVEMIB/)
		DOVEMIB.[cpp,h] - Core routines, connection to the Event Channel
		Node.[cpp,h] - Nodes used by the AnyAnalyser
		AnyAnalyser.[cpp,h] - Anaylser for CORBA anys, storing the contained types on 
						persistent storage
		NodeVisitor.h - base class definition of a Visitor
		PrintVisistor.[cpp,h] - Able to print a given tree of type nodes, which is
						generated by the Anyanalyser


Compiling:
	Common:
		"make sure that the following definition is in the 
			$TAO_ROOT/orbsvcs/orbsvcs/RtecEventComm.idl"
              
		struct EventData {
			any any_value;
		};

		"compile $TAO_ROOT/orbsvcs/orbsvcs"
		"compile $TAO_ROOT/orbsvcs/Event_Service"
		"compile $TAO_ROOT/orbsvcs/Naming_Service"
		"compile $TAO_ROOT/orbsvcs/Scheduling_Service"

		! Note: Make sure to recompile RtecEventChannelAdmin.idl!

	Supplier: 

		cp ../NavWeap.idl .

		make




    DOVE Browser: 
		cp ../NavWeap.idl .
		cp $TAO_ROOT/orbsvcs/orbsvcs/CosNaming.idl .
		cp $TAO_ROOT/orbsvcs/orbsvcs/CosTimeBase.idl . 
		cp $TAO_ROOT/orbsvcs/orbsvcs/RtecEventChannelAdmin.idl . 
		cp $TAO_ROOT/orbsvcs/orbsvcs/RtecEventComm.idl . 
		cp $TAO_ROOT/orbsvcs/orbsvcs/RtecScheduler.idl .
		idl2java *.idl

		vbjc *.java


	DOVE MIB:
		cp ../NavWeap.idl .
			
		make

       
Starting:
	Start in the following order on different ORB ports:
		* Naming Service
		* Event Service

		You can use "start_services" on Unix machines. The
		script is located in $TAO_ROOT/orbsvcs/tests.

	Supplier:
		Event_Sup -ORBport 10040 -f MLF.dat -m 1000

		// -m 1000 for 1000 events sent by the supplier
		// -f MLF.dat to read scheduling data from this file as input 


	DOVE Browser:
		vbj DOVEBrowser
                (also supported: vbj DOVEBrowser -ORBnameserviceior <IOR> ) 

		or

                gatekeeper
		cd /visigenic/vbroker/lib
		jar xf vbjorb.jar
 		jar xf vbjtools.jar
		"setting the Naming Service IOR in the DOVEBrowser.html file"
		appletviewer DOVEBrowser.html
                


	DOVE MIB:
		DOVEMIB -ORBport 10041 -f myfile -m 100

		// -m 100 for storing the next 100 events
		// -f myfile for the name of the file in which it will be stored
