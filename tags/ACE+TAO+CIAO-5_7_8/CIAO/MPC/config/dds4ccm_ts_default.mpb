// $Id$

feature(dds4ccm_opendds) : dds4ccm, dcps_ts_defaults, dcps {
  Define_Custom(DDSGenerator) : TypeSupport {
    keyword opendds_ts_flags = commandflags
  }
}

feature(dds4ccm_splice) : dds4ccm, splice_ts_defaults {
  Define_Custom(DDSGenerator) : SpliceTypeSupport {
    keyword opendds_ts_flags = commandflags
  }
}

feature(dds4ccm_ndds) : dds4ccm, ndds_ts_defaults, nddslib {
  Define_Custom(DDSGenerator) : NDDSTypeSupport {
    commandflags += -typeSequenceSuffix RTISeq -enableEscapeChar -verbosity 1
  }

  dynamicflags += NDDS_USER_DLL_EXPORT

  verbatim(gnuace, macros) {
    override no_hidden_visibility = 1
    override no_strict_aliasing = 1
  }
}

feature(!dds4ccm_opendds) {
  // this allows the user's project to reference opendds_ts_flags,
  // which will simply be ignored
  Define_Custom(DummyTypeSupport) {
    keyword opendds_ts_flags
  }
}

feature(!dds4ccm_opendds, !dds4ccm_ndds, !dds4ccm_splice) {
  Define_Custom(DDSGenerator) {
  }
}

