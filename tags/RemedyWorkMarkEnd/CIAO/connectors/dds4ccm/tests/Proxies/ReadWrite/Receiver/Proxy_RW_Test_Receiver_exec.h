// -*- C++ -*-
// $Id$

/**
 * Code generated by the The ACE ORB (TAO) IDL Compiler v1.8.3
 * TAO and the TAO IDL Compiler have been developed by:
 *       Center for Distributed Object Computing
 *       Washington University
 *       St. Louis, MO
 *       USA
 *       http://www.cs.wustl.edu/~schmidt/doc-center.html
 * and
 *       Distributed Object Computing Laboratory
 *       University of California at Irvine
 *       Irvine, CA
 *       USA
 * and
 *       Institute for Software Integrated Systems
 *       Vanderbilt University
 *       Nashville, TN
 *       USA
 *       http://www.isis.vanderbilt.edu/
 *
 * Information about TAO is available at:
 *     http://www.cs.wustl.edu/~schmidt/TAO.html
 **/
#ifndef CIAO_PROXY_RW_TEST_RECEIVER_EXEC_IWMK2R_H_
#define CIAO_PROXY_RW_TEST_RECEIVER_EXEC_IWMK2R_H_

#include /**/ "ace/pre.h"

#include "Proxy_RW_Test_ReceiverEC.h"

#if !defined (ACE_LACKS_PRAGMA_ONCE)
# pragma once
#endif /* ACE_LACKS_PRAGMA_ONCE */

#include /**/ "Receiver_exec_export.h"
#include "tao/LocalObject.h"

#include "Connector/Proxy_RW_Test_Connector_conn.h"

namespace CIAO_Proxy_RW_Test_Receiver_Impl
{
  class Receiver_exec_i;

  /**
   * LastSampleChecker
   */
  class LastSampleChecker
    : public ACE_Event_Handler
  {
  public:
    LastSampleChecker (Receiver_exec_i &callback,
                       const ::ReaderStarter::assignment &task,
                       const ::CORBA::UShort &iterations);

    virtual ~LastSampleChecker (void);

    virtual int handle_timeout (const ACE_Time_Value &tv,
                                const void *arg);
  private:
    Receiver_exec_i &callback_;
    const ::ReaderStarter::assignment task_;
    const ::CORBA::UShort iterations_;

  };

  /**
   * Start Handler using IDL Proxy to Read
   */

  class StartHandlerIdlProxyRead :
    public ACE_Event_Handler
  {
  public:
    StartHandlerIdlProxyRead (Receiver_exec_i &callback);
    virtual int handle_exception (ACE_HANDLE fc = ACE_INVALID_HANDLE);
  private:
    Receiver_exec_i &callback_;
  };

  /**
   * Start Handler using IDL Proxy to Take
   */

  class StartHandlerIdlProxyTake :
    public ACE_Event_Handler
  {
  public:
    StartHandlerIdlProxyTake (Receiver_exec_i &callback);
    virtual int handle_exception (ACE_HANDLE fc = ACE_INVALID_HANDLE);
  private:
    Receiver_exec_i &callback_;
  };

  /**
   * Provider Executor Implementation Class: info_out_data_listener_exec_i
   */

  class info_out_data_listener_exec_i
    : public virtual ::Proxy_RW_Test::ProxyReadWriteTestConnector::CCM_Listener,
      public virtual ::CORBA::LocalObject
  {
  public:
    info_out_data_listener_exec_i (
      ::Proxy_RW_Test::CCM_Receiver_Context_ptr ctx);
    virtual ~info_out_data_listener_exec_i (void);

    //@{
    /** Operations and attributes from ::Proxy_RW_Test::ProxyReadWriteTestConnector::Listener. */

    virtual
    void on_one_data (const ::ProxyReadWriteTest & datum,
    const ::CCM_DDS::ReadInfo & info);

    virtual
    void on_many_data (const ::ProxyReadWriteTestSeq & data,
    const ::CCM_DDS::ReadInfoSeq & infos);
    //@}

  private:
    ::Proxy_RW_Test::CCM_Receiver_Context_var ciao_context_;
  };

  /**
   * Provider Executor Implementation Class: info_out_status_exec_i
   */

  class info_out_status_exec_i
    : public virtual ::CCM_DDS::CCM_PortStatusListener,
      public virtual ::CORBA::LocalObject
  {
  public:
    info_out_status_exec_i (
      ::Proxy_RW_Test::CCM_Receiver_Context_ptr ctx);
    virtual ~info_out_status_exec_i (void);

    //@{
    /** Operations and attributes from ::CCM_DDS::PortStatusListener. */

    virtual
    void on_requested_deadline_missed (::DDS::DataReader_ptr the_reader,
    const ::DDS::RequestedDeadlineMissedStatus & status);

    virtual
    void on_sample_lost (::DDS::DataReader_ptr the_reader,
    const ::DDS::SampleLostStatus & status);
    //@}

  private:
    ::Proxy_RW_Test::CCM_Receiver_Context_var ciao_context_;
  };

  /**
   * Provider Executor Implementation Class: reader_start_exec_i
   */

  class reader_start_exec_i
    : public virtual ::CCM_ReaderStarter,
      public virtual ::CORBA::LocalObject
  {
  public:
    reader_start_exec_i (
      ::Proxy_RW_Test::CCM_Receiver_Context_ptr ctx,
      Receiver_exec_i &callback);
    virtual ~reader_start_exec_i (void);

    //@{
    /** Operations and attributes from ::ReaderStarter. */

    virtual
    void start_read (::ReaderStarter::assignment task);

    virtual
    void set_reader_properties (::CORBA::UShort nr_keys,
    ::CORBA::UShort nr_iterations);
    //@}

  private:
    ::Proxy_RW_Test::CCM_Receiver_Context_var ciao_context_;
    Receiver_exec_i &callback_;
  };

  /**
   * Component Executor Implementation Class: Receiver_exec_i
   */

  class Receiver_exec_i
    : public virtual Receiver_Exec,
      public virtual ::CORBA::LocalObject
  {
  public:
    typedef ::CIAO_Proxy_RW_Test_ProxyReadWriteTestConnector_DDS_Event_Impl
            ::ProxyReadWriteTest_DDS_Traits::typed_reader_type
            TypedDataReader;

    Receiver_exec_i (void);
    virtual ~Receiver_exec_i (void);

    //@{
    /** Supported operations and attributes. */

    //@}

    //@{
    /** Component attributes and port operations. */

    virtual ::Proxy_RW_Test::ProxyReadWriteTestConnector::CCM_Listener_ptr
    get_info_out_data_listener (void);

    virtual ::CCM_DDS::CCM_PortStatusListener_ptr
    get_info_out_status (void);

    virtual ::CCM_ReaderStarter_ptr
    get_reader_start (void);
    //@}

    //@{
    /** Operations from Components::SessionComponent. */
    virtual void set_session_context (::Components::SessionContext_ptr ctx);
    virtual void configuration_complete (void);
    virtual void ccm_activate (void);
    virtual void ccm_passivate (void);
    virtual void ccm_remove (void);
    //@}

    //@{
    /** User defined public operations. */
    void keys (::CORBA::UShort keys);
    void iterations (::CORBA::UShort iterations);

    bool check_last (const ::CORBA::UShort &iteration_to_check);

    void start_task (::ReaderStarter::assignment task);
    void start_read (::ReaderStarter::assignment task);
    void start_read_using_idl_proxy (void);
    void start_take_using_idl_proxy (void);

    //@}

  private:
    ::Proxy_RW_Test::CCM_Receiver_Context_var ciao_context_;

    //@{
    /** Component attributes. */
    ::Proxy_RW_Test::ProxyReadWriteTestConnector::CCM_Listener_var ciao_info_out_data_listener_;
    ::CCM_DDS::CCM_PortStatusListener_var ciao_info_out_status_;
    ::CCM_ReaderStarter_var ciao_reader_start_;
    //@}

    //@{
    /** User defined members. */
    ::CORBA::UShort iterations_;
    ::CORBA::UShort keys_;

    StartHandlerIdlProxyRead *rh_idl_read_;
    StartHandlerIdlProxyTake *rh_idl_take_;

    LastSampleChecker * checker_;
    //@}

    //@{
    /** User defined private operations. */
    void check_samples (const ProxyReadWriteTestSeq & data,
                        ::ReaderStarter::assignment task);

    void schedule_timer (void);
    TypedDataReader::_ptr_type get_typed_idl_reader (void);
    //@}

    /// Get the ACE_Reactor
    ACE_Reactor* reactor (void);
  };

  extern "C" RECEIVER_EXEC_Export ::Components::EnterpriseComponent_ptr
  create_Proxy_RW_Test_Receiver_Impl (void);
}

#include /**/ "ace/post.h"

#endif /* ifndef */
