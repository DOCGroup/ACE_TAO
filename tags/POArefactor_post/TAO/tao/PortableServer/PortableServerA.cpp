// -*- C++ -*-
//
// $Id$

// ****  Code generated by the The ACE ORB (TAO) IDL Compiler ****
// TAO and the TAO IDL Compiler have been developed by:
//       Center for Distributed Object Computing
//       Washington University
//       St. Louis, MO
//       USA
//       http://www.cs.wustl.edu/~schmidt/doc-center.html
// and
//       Distributed Object Computing Laboratory
//       University of California at Irvine
//       Irvine, CA
//       USA
//       http://doc.ece.uci.edu/
// and
//       Institute for Software Integrated Systems
//       Vanderbilt University
//       Nashville, TN
//       USA
//       http://www.isis.vanderbilt.edu/
//
// Information about TAO is available at:
//     http://www.cs.wustl.edu/~schmidt/TAO.html

#include "PortableServer.h"
#include "tao/Typecode.h"
#include "tao/CDR.h"
#include "tao/Any.h"
#include "tao/Any_Impl_T.h"
#include "tao/Any_Dual_Impl_T.h"

// TAO_IDL - Generated from
// be\be_visitor_typecode/typecode_defn.cpp:295

static const CORBA::Long _oc_PortableServer_POAList[] =
{
    TAO_ENCAP_BYTE_ORDER, // byte order
  39,
  ACE_NTOHL (0x49444c3a), 
  ACE_NTOHL (0x6f6d672e), 
  ACE_NTOHL (0x6f72672f), 
  ACE_NTOHL (0x506f7274), 
  ACE_NTOHL (0x61626c65), 
  ACE_NTOHL (0x53657276), 
  ACE_NTOHL (0x65722f50), 
  ACE_NTOHL (0x4f414c69), 
  ACE_NTOHL (0x73743a31), 
  ACE_NTOHL (0x2e300000),  // repository ID = IDL:omg.org/PortableServer/POAList:1.0
    8,
  ACE_NTOHL (0x504f414c), 
  ACE_NTOHL (0x69737400),  // name = POAList
    CORBA::tk_sequence, // typecode kind
  8, // encapsulation length
    TAO_ENCAP_BYTE_ORDER, // byte order
    0U,

};

static CORBA::TypeCode _tc_TAO_tc_PortableServer_POAList (
    CORBA::tk_alias,
    sizeof (_oc_PortableServer_POAList),
    (char *) &_oc_PortableServer_POAList,
    0,
    0
  );

namespace PortableServer
{
  ::CORBA::TypeCode_ptr _tc_POAList =
    &_tc_TAO_tc_PortableServer_POAList;
}

#if (TAO_HAS_MINIMUM_POA == 0)

// TAO_IDL - Generated from
// be\be_visitor_typecode/typecode_defn.cpp:295

static const CORBA::Long _oc_PortableServer_POA[] =
{
    TAO_ENCAP_BYTE_ORDER, // byte order
  35,
  ACE_NTOHL (0x49444c3a), 
  ACE_NTOHL (0x6f6d672e), 
  ACE_NTOHL (0x6f72672f), 
  ACE_NTOHL (0x506f7274), 
  ACE_NTOHL (0x61626c65), 
  ACE_NTOHL (0x53657276), 
  ACE_NTOHL (0x65722f50), 
  ACE_NTOHL (0x4f413a32), 
  ACE_NTOHL (0x2e330000),  // repository ID = IDL:omg.org/PortableServer/POA:2.3
    4,
  ACE_NTOHL (0x504f4100),  // name = POA
  };

static CORBA::TypeCode _tc_TAO_tc_PortableServer_POA (
    CORBA::tk_objref,
    sizeof (_oc_PortableServer_POA),
    (char *) &_oc_PortableServer_POA,
    0,
    0
  );

namespace PortableServer
{
  ::CORBA::TypeCode_ptr _tc_POA =
    &_tc_TAO_tc_PortableServer_POA;
}

// TAO_IDL - Generated from 
// be\be_visitor_sequence/any_op_cs.cpp:54



ACE_TEMPLATE_SPECIALIZATION
CORBA::Boolean
TAO::Any_Dual_Impl_T<PortableServer::POAList>::marshal_value (TAO_OutputCDR &)
{
  return false;
}

ACE_TEMPLATE_SPECIALIZATION
CORBA::Boolean
TAO::Any_Dual_Impl_T<PortableServer::POAList>::demarshal_value (TAO_InputCDR &)
{
  return false;
}// Copying insertion.
void operator<<= (
    CORBA::Any &_tao_any,
    const PortableServer::POAList &_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<PortableServer::POAList>::insert_copy (
      _tao_any,
      PortableServer::POAList::_tao_any_destructor,
      PortableServer::_tc_POAList,
      _tao_elem
    );
}

// Non-copying insertion.
void operator<<= (
    CORBA::Any &_tao_any,
    PortableServer::POAList *_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<PortableServer::POAList>::insert (
      _tao_any,
      PortableServer::POAList::_tao_any_destructor,
      PortableServer::_tc_POAList,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
CORBA::Boolean operator>>= (
    const CORBA::Any &_tao_any,
    PortableServer::POAList *&_tao_elem
  )
{
  return _tao_any >>= const_cast<
      const PortableServer::POAList *&> (
      _tao_elem
    );
}

// Extraction to const pointer.
CORBA::Boolean operator>>= (
    const CORBA::Any &_tao_any,
    const PortableServer::POAList *&_tao_elem
  )
{
  return
    TAO::Any_Dual_Impl_T<PortableServer::POAList>::extract (
        _tao_any,
        PortableServer::POAList::_tao_any_destructor,
        PortableServer::_tc_POAList,
        _tao_elem
      );
}

#endif /* TAO_HAS_MINIMUM_CORBA == 0 */

// TAO_IDL - Generated from
// be\be_visitor_interface/any_op_cs.cpp:50

ACE_TEMPLATE_SPECIALIZATION
CORBA::Boolean
TAO::Any_Impl_T<PortableServer::POA>::to_object (
    CORBA::Object_ptr &_tao_elem
  ) const
{
  _tao_elem = CORBA::Object::_duplicate (this->value_);
  return 1;
}

ACE_TEMPLATE_SPECIALIZATION
CORBA::Boolean
TAO::Any_Impl_T<PortableServer::POA>::marshal_value (TAO_OutputCDR &)
{
  return false;
}

ACE_TEMPLATE_SPECIALIZATION
CORBA::Boolean
TAO::Any_Impl_T<PortableServer::POA>::demarshal_value (TAO_InputCDR &)
{
  return false;
}

// Copying insertion.
void
operator<<= (
    CORBA::Any &_tao_any,
    PortableServer::POA_ptr _tao_elem
  )
{
  PortableServer::POA_ptr _tao_objptr =
    PortableServer::POA::_duplicate (_tao_elem);
  _tao_any <<= &_tao_objptr;
}

// Non-copying insertion.
void
operator<<= (
    CORBA::Any &_tao_any,
    PortableServer::POA_ptr *_tao_elem
  )
{
  TAO::Any_Impl_T<PortableServer::POA>::insert (
      _tao_any,
      PortableServer::POA::_tao_any_destructor,
      PortableServer::_tc_POA,
      *_tao_elem
    );
}

CORBA::Boolean
operator>>= (
    const CORBA::Any &_tao_any,
    PortableServer::POA_ptr &_tao_elem
  )
{
  return
    TAO::Any_Impl_T<PortableServer::POA>::extract (
        _tao_any,
        PortableServer::POA::_tao_any_destructor,
        PortableServer::_tc_POA,
        _tao_elem
      );
}

// TAO_IDL - Generated from 
// be\be_visitor_exception/any_op_cs.cpp:50

ACE_TEMPLATE_SPECIALIZATION
CORBA::Boolean
TAO::Any_Dual_Impl_T<PortableServer::POA::AdapterAlreadyExists>::marshal_value (TAO_OutputCDR &)
{
  return false;
}

ACE_TEMPLATE_SPECIALIZATION
CORBA::Boolean
TAO::Any_Dual_Impl_T<PortableServer::POA::AdapterAlreadyExists>::demarshal_value (TAO_InputCDR &)
{
  return false;
}

// Copying insertion.
void operator<<= (
    CORBA::Any &_tao_any,
    const PortableServer::POA::AdapterAlreadyExists &_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<PortableServer::POA::AdapterAlreadyExists>::insert_copy (
      _tao_any,
      PortableServer::POA::AdapterAlreadyExists::_tao_any_destructor,
      PortableServer::POA::_tc_AdapterAlreadyExists,
      _tao_elem
    );
}

// Non-copying insertion.
void operator<<= (
    CORBA::Any &_tao_any,
    PortableServer::POA::AdapterAlreadyExists *_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<PortableServer::POA::AdapterAlreadyExists>::insert (
      _tao_any,
      PortableServer::POA::AdapterAlreadyExists::_tao_any_destructor,
      PortableServer::POA::_tc_AdapterAlreadyExists,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
CORBA::Boolean operator>>= (
    const CORBA::Any &_tao_any,
    PortableServer::POA::AdapterAlreadyExists *&_tao_elem
  )
{
  return _tao_any >>= const_cast<
      const PortableServer::POA::AdapterAlreadyExists *&> (
      _tao_elem
    );
}

// Extraction to const pointer.
CORBA::Boolean operator>>= (
    const CORBA::Any &_tao_any,
    const PortableServer::POA::AdapterAlreadyExists *&_tao_elem
  )
{
  return
    TAO::Any_Dual_Impl_T<PortableServer::POA::AdapterAlreadyExists>::extract (
        _tao_any,
        PortableServer::POA::AdapterAlreadyExists::_tao_any_destructor,
        PortableServer::POA::_tc_AdapterAlreadyExists,
        _tao_elem
      );
}

// TAO_IDL - Generated from 
// be\be_visitor_exception/any_op_cs.cpp:50

ACE_TEMPLATE_SPECIALIZATION
CORBA::Boolean
TAO::Any_Dual_Impl_T<PortableServer::POA::AdapterNonExistent>::marshal_value (TAO_OutputCDR &)
{
  return false;
}

ACE_TEMPLATE_SPECIALIZATION
CORBA::Boolean
TAO::Any_Dual_Impl_T<PortableServer::POA::AdapterNonExistent>::demarshal_value (TAO_InputCDR &)
{
  return false;
}

// Copying insertion.
void operator<<= (
    CORBA::Any &_tao_any,
    const PortableServer::POA::AdapterNonExistent &_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<PortableServer::POA::AdapterNonExistent>::insert_copy (
      _tao_any,
      PortableServer::POA::AdapterNonExistent::_tao_any_destructor,
      PortableServer::POA::_tc_AdapterNonExistent,
      _tao_elem
    );
}

// Non-copying insertion.
void operator<<= (
    CORBA::Any &_tao_any,
    PortableServer::POA::AdapterNonExistent *_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<PortableServer::POA::AdapterNonExistent>::insert (
      _tao_any,
      PortableServer::POA::AdapterNonExistent::_tao_any_destructor,
      PortableServer::POA::_tc_AdapterNonExistent,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
CORBA::Boolean operator>>= (
    const CORBA::Any &_tao_any,
    PortableServer::POA::AdapterNonExistent *&_tao_elem
  )
{
  return _tao_any >>= const_cast<
      const PortableServer::POA::AdapterNonExistent *&> (
      _tao_elem
    );
}

// Extraction to const pointer.
CORBA::Boolean operator>>= (
    const CORBA::Any &_tao_any,
    const PortableServer::POA::AdapterNonExistent *&_tao_elem
  )
{
  return
    TAO::Any_Dual_Impl_T<PortableServer::POA::AdapterNonExistent>::extract (
        _tao_any,
        PortableServer::POA::AdapterNonExistent::_tao_any_destructor,
        PortableServer::POA::_tc_AdapterNonExistent,
        _tao_elem
      );
}

// TAO_IDL - Generated from 
// be\be_visitor_exception/any_op_cs.cpp:50

ACE_TEMPLATE_SPECIALIZATION
CORBA::Boolean
TAO::Any_Dual_Impl_T<PortableServer::POA::InvalidPolicy>::marshal_value (TAO_OutputCDR &)
{
  return false;
}

ACE_TEMPLATE_SPECIALIZATION
CORBA::Boolean
TAO::Any_Dual_Impl_T<PortableServer::POA::InvalidPolicy>::demarshal_value (TAO_InputCDR &)
{
  return false;
}

// Copying insertion.
void operator<<= (
    CORBA::Any &_tao_any,
    const PortableServer::POA::InvalidPolicy &_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<PortableServer::POA::InvalidPolicy>::insert_copy (
      _tao_any,
      PortableServer::POA::InvalidPolicy::_tao_any_destructor,
      PortableServer::POA::_tc_InvalidPolicy,
      _tao_elem
    );
}

// Non-copying insertion.
void operator<<= (
    CORBA::Any &_tao_any,
    PortableServer::POA::InvalidPolicy *_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<PortableServer::POA::InvalidPolicy>::insert (
      _tao_any,
      PortableServer::POA::InvalidPolicy::_tao_any_destructor,
      PortableServer::POA::_tc_InvalidPolicy,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
CORBA::Boolean operator>>= (
    const CORBA::Any &_tao_any,
    PortableServer::POA::InvalidPolicy *&_tao_elem
  )
{
  return _tao_any >>= const_cast<
      const PortableServer::POA::InvalidPolicy *&> (
      _tao_elem
    );
}

// Extraction to const pointer.
CORBA::Boolean operator>>= (
    const CORBA::Any &_tao_any,
    const PortableServer::POA::InvalidPolicy *&_tao_elem
  )
{
  return
    TAO::Any_Dual_Impl_T<PortableServer::POA::InvalidPolicy>::extract (
        _tao_any,
        PortableServer::POA::InvalidPolicy::_tao_any_destructor,
        PortableServer::POA::_tc_InvalidPolicy,
        _tao_elem
      );
}

// TAO_IDL - Generated from 
// be\be_visitor_exception/any_op_cs.cpp:50

#if (TAO_HAS_MINIMUM_POA == 0)

ACE_TEMPLATE_SPECIALIZATION
CORBA::Boolean
TAO::Any_Dual_Impl_T<PortableServer::POA::NoServant>::marshal_value (TAO_OutputCDR &)
{
  return false;
}

ACE_TEMPLATE_SPECIALIZATION
CORBA::Boolean
TAO::Any_Dual_Impl_T<PortableServer::POA::NoServant>::demarshal_value (TAO_InputCDR &)
{
  return false;
}

// Copying insertion.
void operator<<= (
    CORBA::Any &_tao_any,
    const PortableServer::POA::NoServant &_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<PortableServer::POA::NoServant>::insert_copy (
      _tao_any,
      PortableServer::POA::NoServant::_tao_any_destructor,
      PortableServer::POA::_tc_NoServant,
      _tao_elem
    );
}

// Non-copying insertion.
void operator<<= (
    CORBA::Any &_tao_any,
    PortableServer::POA::NoServant *_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<PortableServer::POA::NoServant>::insert (
      _tao_any,
      PortableServer::POA::NoServant::_tao_any_destructor,
      PortableServer::POA::_tc_NoServant,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
CORBA::Boolean operator>>= (
    const CORBA::Any &_tao_any,
    PortableServer::POA::NoServant *&_tao_elem
  )
{
  return _tao_any >>= const_cast<
      const PortableServer::POA::NoServant *&> (
      _tao_elem
    );
}

// Extraction to const pointer.
CORBA::Boolean operator>>= (
    const CORBA::Any &_tao_any,
    const PortableServer::POA::NoServant *&_tao_elem
  )
{
  return
    TAO::Any_Dual_Impl_T<PortableServer::POA::NoServant>::extract (
        _tao_any,
        PortableServer::POA::NoServant::_tao_any_destructor,
        PortableServer::POA::_tc_NoServant,
        _tao_elem
      );
}

#endif /* TAO_HAS_MINIMUM_CORBA == 0 */

// TAO_IDL - Generated from 
// be\be_visitor_exception/any_op_cs.cpp:50

ACE_TEMPLATE_SPECIALIZATION
CORBA::Boolean
TAO::Any_Dual_Impl_T<PortableServer::POA::ObjectAlreadyActive>::marshal_value (TAO_OutputCDR &)
{
  return false;
}

ACE_TEMPLATE_SPECIALIZATION
CORBA::Boolean
TAO::Any_Dual_Impl_T<PortableServer::POA::ObjectAlreadyActive>::demarshal_value (TAO_InputCDR &)
{
  return false;
}

// Copying insertion.
void operator<<= (
    CORBA::Any &_tao_any,
    const PortableServer::POA::ObjectAlreadyActive &_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<PortableServer::POA::ObjectAlreadyActive>::insert_copy (
      _tao_any,
      PortableServer::POA::ObjectAlreadyActive::_tao_any_destructor,
      PortableServer::POA::_tc_ObjectAlreadyActive,
      _tao_elem
    );
}

// Non-copying insertion.
void operator<<= (
    CORBA::Any &_tao_any,
    PortableServer::POA::ObjectAlreadyActive *_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<PortableServer::POA::ObjectAlreadyActive>::insert (
      _tao_any,
      PortableServer::POA::ObjectAlreadyActive::_tao_any_destructor,
      PortableServer::POA::_tc_ObjectAlreadyActive,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
CORBA::Boolean operator>>= (
    const CORBA::Any &_tao_any,
    PortableServer::POA::ObjectAlreadyActive *&_tao_elem
  )
{
  return _tao_any >>= const_cast<
      const PortableServer::POA::ObjectAlreadyActive *&> (
      _tao_elem
    );
}

// Extraction to const pointer.
CORBA::Boolean operator>>= (
    const CORBA::Any &_tao_any,
    const PortableServer::POA::ObjectAlreadyActive *&_tao_elem
  )
{
  return
    TAO::Any_Dual_Impl_T<PortableServer::POA::ObjectAlreadyActive>::extract (
        _tao_any,
        PortableServer::POA::ObjectAlreadyActive::_tao_any_destructor,
        PortableServer::POA::_tc_ObjectAlreadyActive,
        _tao_elem
      );
}

// TAO_IDL - Generated from 
// be\be_visitor_exception/any_op_cs.cpp:50

ACE_TEMPLATE_SPECIALIZATION
CORBA::Boolean
TAO::Any_Dual_Impl_T<PortableServer::POA::ObjectNotActive>::marshal_value (TAO_OutputCDR &)
{
  return false;
}

ACE_TEMPLATE_SPECIALIZATION
CORBA::Boolean
TAO::Any_Dual_Impl_T<PortableServer::POA::ObjectNotActive>::demarshal_value (TAO_InputCDR &)
{
  return false;
}

// Copying insertion.
void operator<<= (
    CORBA::Any &_tao_any,
    const PortableServer::POA::ObjectNotActive &_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<PortableServer::POA::ObjectNotActive>::insert_copy (
      _tao_any,
      PortableServer::POA::ObjectNotActive::_tao_any_destructor,
      PortableServer::POA::_tc_ObjectNotActive,
      _tao_elem
    );
}

// Non-copying insertion.
void operator<<= (
    CORBA::Any &_tao_any,
    PortableServer::POA::ObjectNotActive *_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<PortableServer::POA::ObjectNotActive>::insert (
      _tao_any,
      PortableServer::POA::ObjectNotActive::_tao_any_destructor,
      PortableServer::POA::_tc_ObjectNotActive,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
CORBA::Boolean operator>>= (
    const CORBA::Any &_tao_any,
    PortableServer::POA::ObjectNotActive *&_tao_elem
  )
{
  return _tao_any >>= const_cast<
      const PortableServer::POA::ObjectNotActive *&> (
      _tao_elem
    );
}

// Extraction to const pointer.
CORBA::Boolean operator>>= (
    const CORBA::Any &_tao_any,
    const PortableServer::POA::ObjectNotActive *&_tao_elem
  )
{
  return
    TAO::Any_Dual_Impl_T<PortableServer::POA::ObjectNotActive>::extract (
        _tao_any,
        PortableServer::POA::ObjectNotActive::_tao_any_destructor,
        PortableServer::POA::_tc_ObjectNotActive,
        _tao_elem
      );
}

// TAO_IDL - Generated from 
// be\be_visitor_exception/any_op_cs.cpp:50

ACE_TEMPLATE_SPECIALIZATION
CORBA::Boolean
TAO::Any_Dual_Impl_T<PortableServer::POA::ServantAlreadyActive>::marshal_value (TAO_OutputCDR &)
{
  return false;
}

ACE_TEMPLATE_SPECIALIZATION
CORBA::Boolean
TAO::Any_Dual_Impl_T<PortableServer::POA::ServantAlreadyActive>::demarshal_value (TAO_InputCDR &)
{
  return false;
}

// Copying insertion.
void operator<<= (
    CORBA::Any &_tao_any,
    const PortableServer::POA::ServantAlreadyActive &_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<PortableServer::POA::ServantAlreadyActive>::insert_copy (
      _tao_any,
      PortableServer::POA::ServantAlreadyActive::_tao_any_destructor,
      PortableServer::POA::_tc_ServantAlreadyActive,
      _tao_elem
    );
}

// Non-copying insertion.
void operator<<= (
    CORBA::Any &_tao_any,
    PortableServer::POA::ServantAlreadyActive *_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<PortableServer::POA::ServantAlreadyActive>::insert (
      _tao_any,
      PortableServer::POA::ServantAlreadyActive::_tao_any_destructor,
      PortableServer::POA::_tc_ServantAlreadyActive,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
CORBA::Boolean operator>>= (
    const CORBA::Any &_tao_any,
    PortableServer::POA::ServantAlreadyActive *&_tao_elem
  )
{
  return _tao_any >>= const_cast<
      const PortableServer::POA::ServantAlreadyActive *&> (
      _tao_elem
    );
}

// Extraction to const pointer.
CORBA::Boolean operator>>= (
    const CORBA::Any &_tao_any,
    const PortableServer::POA::ServantAlreadyActive *&_tao_elem
  )
{
  return
    TAO::Any_Dual_Impl_T<PortableServer::POA::ServantAlreadyActive>::extract (
        _tao_any,
        PortableServer::POA::ServantAlreadyActive::_tao_any_destructor,
        PortableServer::POA::_tc_ServantAlreadyActive,
        _tao_elem
      );
}

// TAO_IDL - Generated from 
// be\be_visitor_exception/any_op_cs.cpp:50

ACE_TEMPLATE_SPECIALIZATION
CORBA::Boolean
TAO::Any_Dual_Impl_T<PortableServer::POA::ServantNotActive>::marshal_value (TAO_OutputCDR &)
{
  return false;
}

ACE_TEMPLATE_SPECIALIZATION
CORBA::Boolean
TAO::Any_Dual_Impl_T<PortableServer::POA::ServantNotActive>::demarshal_value (TAO_InputCDR &)
{
  return false;
}

// Copying insertion.
void operator<<= (
    CORBA::Any &_tao_any,
    const PortableServer::POA::ServantNotActive &_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<PortableServer::POA::ServantNotActive>::insert_copy (
      _tao_any,
      PortableServer::POA::ServantNotActive::_tao_any_destructor,
      PortableServer::POA::_tc_ServantNotActive,
      _tao_elem
    );
}

// Non-copying insertion.
void operator<<= (
    CORBA::Any &_tao_any,
    PortableServer::POA::ServantNotActive *_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<PortableServer::POA::ServantNotActive>::insert (
      _tao_any,
      PortableServer::POA::ServantNotActive::_tao_any_destructor,
      PortableServer::POA::_tc_ServantNotActive,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
CORBA::Boolean operator>>= (
    const CORBA::Any &_tao_any,
    PortableServer::POA::ServantNotActive *&_tao_elem
  )
{
  return _tao_any >>= const_cast<
      const PortableServer::POA::ServantNotActive *&> (
      _tao_elem
    );
}

// Extraction to const pointer.
CORBA::Boolean operator>>= (
    const CORBA::Any &_tao_any,
    const PortableServer::POA::ServantNotActive *&_tao_elem
  )
{
  return
    TAO::Any_Dual_Impl_T<PortableServer::POA::ServantNotActive>::extract (
        _tao_any,
        PortableServer::POA::ServantNotActive::_tao_any_destructor,
        PortableServer::POA::_tc_ServantNotActive,
        _tao_elem
      );
}

// TAO_IDL - Generated from 
// be\be_visitor_exception/any_op_cs.cpp:50

ACE_TEMPLATE_SPECIALIZATION
CORBA::Boolean
TAO::Any_Dual_Impl_T<PortableServer::POA::WrongAdapter>::marshal_value (TAO_OutputCDR &)
{
  return false;
}

ACE_TEMPLATE_SPECIALIZATION
CORBA::Boolean
TAO::Any_Dual_Impl_T<PortableServer::POA::WrongAdapter>::demarshal_value (TAO_InputCDR &)
{
  return false;
}

// Copying insertion.
void operator<<= (
    CORBA::Any &_tao_any,
    const PortableServer::POA::WrongAdapter &_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<PortableServer::POA::WrongAdapter>::insert_copy (
      _tao_any,
      PortableServer::POA::WrongAdapter::_tao_any_destructor,
      PortableServer::POA::_tc_WrongAdapter,
      _tao_elem
    );
}

// Non-copying insertion.
void operator<<= (
    CORBA::Any &_tao_any,
    PortableServer::POA::WrongAdapter *_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<PortableServer::POA::WrongAdapter>::insert (
      _tao_any,
      PortableServer::POA::WrongAdapter::_tao_any_destructor,
      PortableServer::POA::_tc_WrongAdapter,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
CORBA::Boolean operator>>= (
    const CORBA::Any &_tao_any,
    PortableServer::POA::WrongAdapter *&_tao_elem
  )
{
  return _tao_any >>= const_cast<
      const PortableServer::POA::WrongAdapter *&> (
      _tao_elem
    );
}

// Extraction to const pointer.
CORBA::Boolean operator>>= (
    const CORBA::Any &_tao_any,
    const PortableServer::POA::WrongAdapter *&_tao_elem
  )
{
  return
    TAO::Any_Dual_Impl_T<PortableServer::POA::WrongAdapter>::extract (
        _tao_any,
        PortableServer::POA::WrongAdapter::_tao_any_destructor,
        PortableServer::POA::_tc_WrongAdapter,
        _tao_elem
      );
}

// TAO_IDL - Generated from 
// be\be_visitor_exception/any_op_cs.cpp:50

ACE_TEMPLATE_SPECIALIZATION
CORBA::Boolean
TAO::Any_Dual_Impl_T<PortableServer::POA::WrongPolicy>::marshal_value (TAO_OutputCDR &)
{
  return false;
}

ACE_TEMPLATE_SPECIALIZATION
CORBA::Boolean
TAO::Any_Dual_Impl_T<PortableServer::POA::WrongPolicy>::demarshal_value (TAO_InputCDR &)
{
  return false;
}

// Copying insertion.
void operator<<= (
    CORBA::Any &_tao_any,
    const PortableServer::POA::WrongPolicy &_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<PortableServer::POA::WrongPolicy>::insert_copy (
      _tao_any,
      PortableServer::POA::WrongPolicy::_tao_any_destructor,
      PortableServer::POA::_tc_WrongPolicy,
      _tao_elem
    );
}

// Non-copying insertion.
void operator<<= (
    CORBA::Any &_tao_any,
    PortableServer::POA::WrongPolicy *_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<PortableServer::POA::WrongPolicy>::insert (
      _tao_any,
      PortableServer::POA::WrongPolicy::_tao_any_destructor,
      PortableServer::POA::_tc_WrongPolicy,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
CORBA::Boolean operator>>= (
    const CORBA::Any &_tao_any,
    PortableServer::POA::WrongPolicy *&_tao_elem
  )
{
  return _tao_any >>= const_cast<
      const PortableServer::POA::WrongPolicy *&> (
      _tao_elem
    );
}

// Extraction to const pointer.
CORBA::Boolean operator>>= (
    const CORBA::Any &_tao_any,
    const PortableServer::POA::WrongPolicy *&_tao_elem
  )
{
  return
    TAO::Any_Dual_Impl_T<PortableServer::POA::WrongPolicy>::extract (
        _tao_any,
        PortableServer::POA::WrongPolicy::_tao_any_destructor,
        PortableServer::POA::_tc_WrongPolicy,
        _tao_elem
      );
}

#if defined (ACE_HAS_EXPLICIT_TEMPLATE_INSTANTIATION)

  template class
    TAO::Any_Dual_Impl_T<
        PortableServer::POA::AdapterAlreadyExists
      >;

  template class
    TAO::Any_Dual_Impl_T<
        PortableServer::POA::AdapterNonExistent
      >;

  template class
    TAO::Any_Dual_Impl_T<
        PortableServer::POA::InvalidPolicy
      >;

#if (TAO_HAS_MINIMUM_POA == 0)

  template class
    TAO::Any_Dual_Impl_T<
        PortableServer::POA::NoServant
      >;

#endif /* TAO_HAS_MINIMUM_CORBA == 0 */

  template class
    TAO::Any_Dual_Impl_T<
        PortableServer::POA::ObjectAlreadyActive
      >;

  template class
    TAO::Any_Dual_Impl_T<
        PortableServer::POA::ObjectNotActive
      >;

  template class
    TAO::Any_Dual_Impl_T<
        PortableServer::POA::ServantAlreadyActive
      >;

  template class
    TAO::Any_Dual_Impl_T<
        PortableServer::POA::ServantNotActive
      >;

  template class
    TAO::Any_Dual_Impl_T<
        PortableServer::POA::WrongAdapter
      >;

  template class
    TAO::Any_Dual_Impl_T<
        PortableServer::POA::WrongPolicy
      >;

  template class
    TAO::Any_Impl_T<
        PortableServer::POA
      >;

  template class
    TAO::Any_Dual_Impl_T<
        PortableServer::POAList
      >;

#elif defined (ACE_HAS_TEMPLATE_INSTANTIATION_PRAGMA)

# pragma instantiate \
    TAO::Any_Dual_Impl_T< \
        PortableServer::POA::AdapterAlreadyExists \
      >

# pragma instantiate \
    TAO::Any_Dual_Impl_T< \
        PortableServer::POA::AdapterNonExistent \
      >

# pragma instantiate \
    TAO::Any_Dual_Impl_T< \
        PortableServer::POA::InvalidPolicy \
      >

#if (TAO_HAS_MINIMUM_POA == 0)

# pragma instantiate \
    TAO::Any_Dual_Impl_T< \
        PortableServer::POA::NoServant \
      >

#endif /* TAO_HAS_MINIMUM_CORBA == 0 */

# pragma instantiate \
    TAO::Any_Dual_Impl_T< \
        PortableServer::POA::ObjectAlreadyActive \
      >

# pragma instantiate \
    TAO::Any_Dual_Impl_T< \
        PortableServer::POA::ObjectNotActive \
      >

# pragma instantiate \
    TAO::Any_Dual_Impl_T< \
        PortableServer::POA::ServantAlreadyActive \
      >

# pragma instantiate \
    TAO::Any_Dual_Impl_T< \
        PortableServer::POA::ServantNotActive \
      >

# pragma instantiate \
    TAO::Any_Dual_Impl_T< \
        PortableServer::POA::WrongAdapter \
      >

# pragma instantiate \
    TAO::Any_Dual_Impl_T< \
        PortableServer::POA::WrongPolicy \
      >

# pragma instantiate \
    TAO::Any_Impl_T< \
        PortableServer::POA \
      >

# pragma instantiate \
    TAO::Any_Dual_Impl_T< \
        PortableServer::POAList \
      >

#endif /* !ACE_HAS_EXPLICIT_TEMPLATE_INSTANTIATION */ 
