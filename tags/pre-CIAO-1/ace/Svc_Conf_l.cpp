#define ACE_YY_NO_UNPUT
/* A lexical scanner generated by flex */

/* Scanner skeleton version:
 * $Header$
 */

#define FLEX_SCANNER
#define ACE_YY_FLEX_MAJOR_VERSION 2
#define ACE_YY_FLEX_MINOR_VERSION 5

/* cfront 1.2 defines "c_plusplus" instead of "__cplusplus" */
#ifdef c_plusplus
#ifndef __cplusplus
#define __cplusplus
#endif
#endif


#ifdef __cplusplus

#include "ace/OS.h"
#include "ace/Object_Manager.h"

/* Use prototypes in function declarations. */
#define ACE_YY_USE_PROTOS

/* The "const" storage-class-modifier is valid. */
#define ACE_YY_USE_CONST

#else   /* ! __cplusplus */

#if __STDC__

#define ACE_YY_USE_PROTOS
#define ACE_YY_USE_CONST

#endif  /* __STDC__ */
#endif  /* ! __cplusplus */

#if (ACE_USES_CLASSIC_SVC_CONF == 1)

#ifdef __TURBOC__
 #pragma warn -rch
 #pragma warn -use
#include /**/ <io.h>
#include /**/ <stdlib.h>
#define ACE_YY_USE_CONST
#define ACE_YY_USE_PROTOS
#endif

#ifdef ACE_YY_USE_CONST
#define ace_yyconst const
#else
#define ace_yyconst
#endif


#ifdef ACE_YY_USE_PROTOS
#define ACE_YY_PROTO(proto) proto
#else
#define ACE_YY_PROTO(proto) ()
#endif

/* Returned upon end-of-file. */
#define ACE_YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define ACE_YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN ace_yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The ACE_YYSTATE alias is for lex
 * compatibility.
 */
#define ACE_YY_START ((ace_yy_start - 1) / 2)
#define ACE_YYSTATE ACE_YY_START

/* Action number for EOF rule of a given start state. */
#define ACE_YY_STATE_EOF(state) (ACE_YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define ACE_YY_NEW_FILE ace_yyrestart( ace_yyin )

#define ACE_YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#define ACE_YY_BUF_SIZE 16384

typedef struct ace_yy_buffer_state *ACE_YY_BUFFER_STATE;

extern int ace_yyleng;
extern FILE *ace_yyin, *ace_yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

/* The funky do-while in the following #define is used to turn the definition
 * int a single C statement (which needs a semi-colon terminator).  This
 * avoids problems with code like:
 *
 *      if ( condition_holds )
 *              ace_yyless( 5 );
 *      else
 *              do_something_else();
 *
 * Prior to using the do-while the compiler would get upset at the
 * "else" because it interpreted the "if" statement as being all
 * done when it reached the ';' after the ace_yyless() call.
 */

/* Return all but the first 'n' matched characters back to the input stream. */

#define ace_yyless(n) \
        do \
                { \
                /* Undo effects of setting up ace_yytext. */ \
                *ace_yy_cp = ace_yy_hold_char; \
                ACE_YY_RESTORE_ACE_YY_MORE_OFFSET \
                ace_yy_c_buf_p = ace_yy_cp = ace_yy_bp + n - ACE_YY_MORE_ADJ; \
                ACE_YY_DO_BEFORE_ACTION; /* set up ace_yytext again */ \
                } \
        while ( 0 )

#if 0
#define unput(c) ace_yyunput( c, ace_yytext_ptr )
#endif /* 0 */

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */
typedef unsigned int ace_yy_size_t;


struct ace_yy_buffer_state
        {
        FILE *ace_yy_input_file;

        ACE_TCHAR *ace_yy_ch_buf;       /* input buffer */
        ACE_TCHAR *ace_yy_buf_pos;      /* current position in input buffer */

        /* Size of input buffer in bytes, not including room for EOB
         * characters.
         */
        ace_yy_size_t ace_yy_buf_size;

        /* Number of characters read into ace_yy_ch_buf, not including EOB
         * characters.
         */
        int ace_yy_n_chars;

        /* Whether we "own" the buffer - i.e., we know we created it,
         * and can realloc() it to grow it, and should free() it to
         * delete it.
         */
        int ace_yy_is_our_buffer;

        /* Whether this is an "interactive" input source; if so, and
         * if we're using stdio for input, then we want to use getc()
         * instead of fread(), to make sure we stop fetching input after
         * each newline.
         */
        int ace_yy_is_interactive;

        /* Whether we're considered to be at the beginning of a line.
         * If so, '^' rules will be active on the next match, otherwise
         * not.
         */
        int ace_yy_at_bol;

        /* Whether to try to fill the input buffer when we reach the
         * end of it.
         */
        int ace_yy_fill_buffer;

        int ace_yy_buffer_status;
#define ACE_YY_BUFFER_NEW 0
#define ACE_YY_BUFFER_NORMAL 1
        /* When an EOF's been seen but there's still some text to process
         * then we mark the buffer as ACE_YY_EOF_PENDING, to indicate that we
         * shouldn't try reading from the input source any more.  We might
         * still have a bunch of tokens to match, though, because of
         * possible backing-up.
         *
         * When we actually see the EOF, we change the status to "new"
         * (via ace_yyrestart()), so that the user can continue scanning by
         * just pointing ace_yyin at a new input file.
         */
#define ACE_YY_BUFFER_EOF_PENDING 2
        };

static ACE_YY_BUFFER_STATE ace_yy_current_buffer = 0;

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 */
#define ACE_YY_CURRENT_BUFFER ace_yy_current_buffer


/* ace_yy_hold_char holds the character lost when ace_yytext is formed. */
static ACE_TCHAR ace_yy_hold_char;

static int ace_yy_n_chars;              /* number of characters read into ace_yy_ch_buf */


int ace_yyleng;

/* Points to current character in buffer. */
static ACE_TCHAR *ace_yy_c_buf_p = (ACE_TCHAR *) 0;
static int ace_yy_init = 1;             /* whether we need to initialize */
static int ace_yy_start = 0;    /* start state number */

/* Flag which is used to allow ace_yywrap()'s to do buffer switches
 * instead of setting up a fresh ace_yyin.  A bit of a hack ...
 */
static int ace_yy_did_buffer_switch_on_eof;

void ace_yyrestart ACE_YY_PROTO(( FILE *input_file ));

void ace_yy_switch_to_buffer ACE_YY_PROTO(( ACE_YY_BUFFER_STATE new_buffer ));
void ace_yy_load_buffer_state ACE_YY_PROTO(( void ));
ACE_YY_BUFFER_STATE ace_yy_create_buffer ACE_YY_PROTO(( FILE *file, int size ));
void ace_yy_delete_buffer ACE_YY_PROTO(( ACE_YY_BUFFER_STATE b ));
void ace_yy_init_buffer ACE_YY_PROTO(( ACE_YY_BUFFER_STATE b, FILE *file ));
void ace_yy_flush_buffer ACE_YY_PROTO(( ACE_YY_BUFFER_STATE b ));
#define ACE_YY_FLUSH_BUFFER ace_yy_flush_buffer( ace_yy_current_buffer )

ACE_YY_BUFFER_STATE ace_yy_scan_buffer ACE_YY_PROTO(( ACE_TCHAR *base, ace_yy_size_t size ));
ACE_YY_BUFFER_STATE ace_yy_scan_string ACE_YY_PROTO(( ace_yyconst ACE_TCHAR *ace_yy_str ));
ACE_YY_BUFFER_STATE ace_yy_scan_bytes ACE_YY_PROTO(( ace_yyconst ACE_TCHAR *bytes, int len ));

static void *ace_yy_flex_alloc ACE_YY_PROTO(( ace_yy_size_t ));
static void *ace_yy_flex_realloc ACE_YY_PROTO(( void *, ace_yy_size_t ));
static void ace_yy_flex_free ACE_YY_PROTO(( void * ));

#define ace_yy_new_buffer ace_yy_create_buffer

#define ace_yy_set_interactive(is_interactive) \
        { \
        if ( ! ace_yy_current_buffer ) \
                ace_yy_current_buffer = ace_yy_create_buffer( ace_yyin, ACE_YY_BUF_SIZE ); \
        ace_yy_current_buffer->ace_yy_is_interactive = is_interactive; \
        }

#define ace_yy_set_bol(at_bol) \
        { \
        if ( ! ace_yy_current_buffer ) \
                ace_yy_current_buffer = ace_yy_create_buffer( ace_yyin, ACE_YY_BUF_SIZE ); \
        ace_yy_current_buffer->ace_yy_at_bol = at_bol; \
        }

#define ACE_YY_AT_BOL() (ace_yy_current_buffer->ace_yy_at_bol)

typedef ACE_TCHAR ACE_YY_CHAR;
FILE *ace_yyin = (FILE *) 0, *ace_yyout = (FILE *) 0;
typedef int ace_yy_state_type;
extern ACE_TCHAR *ace_yytext;
#define ace_yytext_ptr ace_yytext

static ace_yy_state_type ace_yy_get_previous_state ACE_YY_PROTO(( void ));
static ace_yy_state_type ace_yy_try_NUL_trans ACE_YY_PROTO(( ace_yy_state_type current_state ));
static int ace_yy_get_next_buffer ACE_YY_PROTO(( void ));
static void ace_yy_fatal_error ACE_YY_PROTO(( ace_yyconst ACE_TCHAR msg[] ));

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up ace_yytext.
 */
#define ACE_YY_DO_BEFORE_ACTION \
        ace_yytext_ptr = ace_yy_bp; \
        ace_yyleng = (int) (ace_yy_cp - ace_yy_bp); \
        ace_yy_hold_char = *ace_yy_cp; \
        *ace_yy_cp = '\0'; \
        ace_yy_c_buf_p = ace_yy_cp;

#define ACE_YY_NUM_RULES 26
#define ACE_YY_END_OF_BUFFER 27
static ace_yyconst short int ace_yy_accept[108] =
    {   0,
        0,    0,    0,    0,    0,    0,   27,   25,   22,   24,
       23,   25,   21,   25,   15,   16,   14,   21,   13,   20,
       20,   20,   20,   20,   20,   20,   20,   20,   17,   18,
       25,   22,    0,   19,   21,    0,    0,   19,   20,   20,
       20,   20,   20,   20,   20,   20,   20,   20,    0,    1,
       20,   20,   20,   20,   20,   20,   20,   20,   20,   20,
       20,   20,   20,   20,   20,   20,   20,   20,   20,   20,
       20,   20,   20,   20,   20,   20,   20,   20,   20,   20,
       20,   20,   20,    8,   10,   20,   11,   20,   20,    6,
        5,    3,    7,   20,   20,    2,   20,    4,   20,   12,

       20,   20,   20,   20,   20,    9,    0
    } ;

static ace_yyconst int ace_yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    5,    6,    7,    8,    6,    9,    6,   10,   11,
       12,   13,    6,    6,   14,   14,   14,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   16,    6,    6,
        6,    6,    6,    6,   17,   18,   18,   18,   19,   18,
       18,   18,   18,   18,   18,   18,   20,   18,   21,   18,
       18,   22,   23,   24,   18,   18,   18,   18,   18,   18,
        6,   14,    6,    6,   25,    6,   26,   27,   28,   29,

       30,   18,   18,   18,   31,   32,   18,   33,   34,   35,
       36,   37,   18,   38,   39,   40,   41,   42,   18,   18,
       43,   18,   44,    6,   45,   14,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static ace_yyconst int ace_yy_meta[46] =
    {   0,
        1,    1,    1,    1,    2,    2,    2,    2,    3,    2,
        2,    2,    2,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    2,    2
    } ;

static ace_yyconst short int ace_yy_base[113] =
    {   0,
        0,  127,    0,  118,    0,  117,  124,  438,   44,  438,
      438,  115,  100,   93,  438,  438,  438,   86,  438,   38,
       39,   42,   48,   51,   54,   60,   64,   68,  438,  438,
       98,   81,   86,   82,   72,   71,   71,   61,   76,   82,
       90,   91,  101,  104,  105,  114,  118,  124,   58,  438,
      133,  136,  145,  148,  151,  157,  166,  167,  175,  179,
      183,  189,  197,  203,  207,  216,  215,  219,  228,  227,
      231,  237,  250,  254,  262,  263,  272,  273,  282,  283,
      286,  292,  301,  302,  311,  314,  315,  323,  324,  332,
      333,  336,  344,  345,  348,  354,  362,  363,  366,  372,

      375,  381,  384,  387,  390,  396,  438,  429,   56,  431,
       47,  434
    } ;

static ace_yyconst short int ace_yy_def[113] =
    {   0,
      107,    1,    1,    1,    1,    1,  107,  107,  107,  107,
      107,  108,  109,  110,  107,  107,  107,  109,  107,  111,
      111,  111,  111,  111,  111,  111,  111,  111,  107,  107,
      112,  107,  108,  108,  109,  109,  110,  110,  111,  111,
      111,  111,  111,  111,  111,  111,  111,  111,  112,  107,
      111,  111,  111,  111,  111,  111,  111,  111,  111,  111,
      111,  111,  111,  111,  111,  111,  111,  111,  111,  111,
      111,  111,  111,  111,  111,  111,  111,  111,  111,  111,
      111,  111,  111,  111,  111,  111,  111,  111,  111,  111,
      111,  111,  111,  111,  111,  111,  111,  111,  111,  111,

      111,  111,  111,  111,  111,  111,    0,  107,  107,  107,
      107,  107
    } ;

static ace_yyconst short int ace_yy_nxt[484] =
    {   0,
        8,    9,   10,   11,    9,    8,   12,    8,   13,   14,
       15,   16,   17,   18,   18,   19,   20,   20,   20,   21,
       20,   20,   22,   20,   23,   24,   20,   20,   25,   20,
       26,   20,   20,   20,   20,   20,   20,   27,   28,   20,
       20,   20,   20,   29,   30,   32,   35,   35,   32,   39,
       35,   35,   35,   36,   36,   35,   35,   36,   35,   35,
       50,   35,   35,  107,   35,   41,   36,   35,   35,   36,
       38,   42,   35,   35,   40,   36,   35,   35,   43,   36,
       38,   35,   32,   36,   35,   32,  107,  107,   34,   35,
       35,  107,   34,   46,   45,   35,   44,  107,   35,   35,

       50,  107,   38,   35,   35,  107,  107,   47,   48,   35,
       51,   52,   35,   35,   35,   36,  107,   35,   35,  107,
      107,   34,   35,  107,   31,   31,   35,   35,   53,  107,
       56,   35,   35,  107,   31,  107,  107,   35,   55,  107,
       54,   35,  107,   59,   35,  107,   35,   57,  107,   35,
      107,  107,   58,   35,   63,   60,   35,  107,   35,   35,
      107,   35,   61,  107,   35,   35,  107,  107,  107,  107,
       35,  107,  107,   62,   35,   35,   66,  107,   65,   35,
       35,  107,  107,   35,   67,  107,   64,   35,   35,  107,
      107,   35,   35,  107,  107,  107,   35,   35,  107,  107,

      107,   68,   35,  107,  107,   35,  107,   69,   71,  107,
       35,   35,  107,   74,   70,   35,   35,  107,  107,   72,
       35,   73,  107,   35,   35,  107,  107,   35,   35,   35,
      107,  107,   35,   75,  107,   35,   35,  107,  107,   35,
       35,   35,  107,  107,   35,   35,  107,  107,   76,   77,
       35,  107,  107,  107,   78,  107,   82,   81,   35,  107,
       79,   80,   35,   35,  107,  107,   83,   35,  107,  107,
       35,   35,  107,   85,  107,   35,   35,  107,  107,   84,
       35,   35,  107,  107,  107,   35,   35,  107,  107,   86,
       35,   35,   87,  107,   35,   35,   35,  107,  107,   35,

       35,  107,   88,   89,  107,   35,  107,  107,  107,   35,
       35,   90,   91,   92,   35,   35,  107,  107,  107,   35,
      107,  107,   35,   35,   35,   93,  107,   35,   35,  107,
      107,   35,   35,  107,  107,   94,   35,   35,  107,  107,
       35,   35,  107,   95,   35,   35,   35,  107,  107,   35,
       96,  107,   35,   35,  107,  107,   35,   35,   35,  107,
      107,   35,   35,  107,  107,   97,  107,   35,  107,  107,
       35,   35,   99,   98,   35,   35,   35,  107,  107,   35,
       35,  107,  107,   35,  107,   35,  101,  107,   35,   35,
      107,  100,   35,  107,   35,   35,  107,   35,   35,  107,

       35,  102,  107,   35,   35,  107,  107,  107,  107,   35,
      107,  107,  103,  104,  105,  107,  107,  107,  107,  107,
      107,  107,  107,  107,  107,  107,  107,  107,  107,  106,
       33,   33,   37,   37,   49,   49,   49,    7,  107,  107,
      107,  107,  107,  107,  107,  107,  107,  107,  107,  107,
      107,  107,  107,  107,  107,  107,  107,  107,  107,  107,
      107,  107,  107,  107,  107,  107,  107,  107,  107,  107,
      107,  107,  107,  107,  107,  107,  107,  107,  107,  107,
      107,  107,  107
    } ;

static ace_yyconst short int ace_yy_chk[484] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    9,   20,   21,    9,  111,
       22,   20,   21,   20,   21,   22,   23,   22,  109,   24,
       49,   23,   25,   23,   24,   22,   24,   25,   26,   25,
       38,   22,   27,   26,   21,   26,   28,   27,   24,   27,
       37,   28,   32,   28,   39,   32,   36,   35,   34,   39,
       40,   39,   33,   27,   26,   40,   25,   40,   41,   42,

       31,   18,   14,   41,   42,   41,   42,   28,   28,   43,
       40,   41,   44,   45,   43,   13,   43,   44,   45,   44,
       45,   12,   46,    7,    6,    4,   47,   46,   42,   46,
       45,   47,   48,   47,    2,    0,    0,   48,   44,   48,
       43,   51,    0,   47,   52,    0,   51,   46,   51,   52,
        0,   52,   46,   53,   52,   47,   54,    0,   53,   55,
       53,   54,   48,   54,   55,   56,   55,    0,    0,    0,
       56,    0,   56,   51,   57,   58,   55,    0,   54,   57,
       58,   57,   58,   59,   56,    0,   53,   60,   59,    0,
       59,   61,   60,    0,   60,    0,   61,   62,   61,    0,

        0,   57,   62,    0,   62,   63,    0,   58,   60,    0,
       63,   64,   63,   63,   59,   65,   64,    0,   64,   61,
       65,   62,   65,   67,   66,    0,    0,   68,   67,   66,
       67,   66,   68,   64,   68,   70,   69,    0,    0,   71,
       70,   69,   70,   69,   71,   72,   71,    0,   65,   66,
       72,    0,   72,    0,   67,    0,   71,   70,   73,    0,
       68,   69,   74,   73,    0,   73,   72,   74,    0,   74,
       75,   76,    0,   74,    0,   75,   76,   75,   76,   73,
       77,   78,    0,    0,    0,   77,   78,   77,   78,   75,
       79,   80,   76,    0,   81,   79,   80,   79,   80,   81,

       82,   81,   77,   78,    0,   82,    0,   82,    0,   83,
       84,   79,   80,   81,   83,   84,   83,   84,    0,   85,
        0,    0,   86,   87,   85,   82,   85,   86,   87,   86,
       87,   88,   89,    0,    0,   83,   88,   89,   88,   89,
       90,   91,    0,   86,   92,   90,   91,   90,   91,   92,
       88,   92,   93,   94,    0,    0,   95,   93,   94,   93,
       94,   95,   96,   95,    0,   89,    0,   96,    0,   96,
       97,   98,   95,   94,   99,   97,   98,   97,   98,   99,
      100,   99,    0,  101,    0,  100,   99,  100,  101,  102,
      101,   97,  103,    0,  102,  104,  102,  103,  105,  103,

      104,  101,  104,  105,  106,  105,    0,    0,    0,  106,
        0,  106,  102,  103,  104,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  105,
      108,  108,  110,  110,  112,  112,  112,  107,  107,  107,
      107,  107,  107,  107,  107,  107,  107,  107,  107,  107,
      107,  107,  107,  107,  107,  107,  107,  107,  107,  107,
      107,  107,  107,  107,  107,  107,  107,  107,  107,  107,
      107,  107,  107,  107,  107,  107,  107,  107,  107,  107,
      107,  107,  107
    } ;

static ace_yy_state_type ace_yy_last_accepting_state;
static ACE_TCHAR *ace_yy_last_accepting_cpos;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define ace_yymore() ace_yymore_used_but_not_detected
#define ACE_YY_MORE_ADJ 0
#define ACE_YY_RESTORE_ACE_YY_MORE_OFFSET
ACE_TCHAR *ace_yytext;
#define INITIAL 0
// $Id$
// Sample lexical analysis for regular expression subset.  Must be
// compiled with FLEX and an ANSI C++ compiler.

// Lexical tokens values defined by YACC.
#include "ace/Svc_Conf.h"
#include "ace/Svc_Conf_Tokens.h"
#include "ace/Svc_Conf_Lexer_Guard.h"

ACE_RCSID (ace,
           Svc_Conf_l,
           "$Id$")

// Keeps track of the current line for debugging output.
int ace_yylineno = 1;

#define token(x)  x
#define PARAMETERS 1

#define NORMAL 2


/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef ACE_YY_SKIP_ACE_YYWRAP
#ifdef __cplusplus
extern "C" int ace_yywrap ACE_YY_PROTO(( void ));
#else
extern int ace_yywrap ACE_YY_PROTO(( void ));
#endif
#endif

#ifndef ACE_YY_NO_UNPUT
static void ace_yyunput ACE_YY_PROTO(( int c, ACE_TCHAR *buf_ptr ));
#endif

#ifndef ace_yytext_ptr
static void ace_yy_flex_strncpy ACE_YY_PROTO(( ACE_TCHAR *, ace_yyconst ACE_TCHAR *, int ));
#endif

#ifdef ACE_YY_NEED_STRLEN
static int ace_yy_flex_strlen ACE_YY_PROTO(( ace_yyconst ACE_TCHAR * ));
#endif

#ifndef ACE_YY_NO_INPUT
#ifdef __cplusplus
static int ace_yyinput ACE_YY_PROTO(( void ));
#else
static int input ACE_YY_PROTO(( void ));
#endif
#endif

#if ACE_YY_STACK_USED
static int ace_yy_start_stack_ptr = 0;
static int ace_yy_start_stack_depth = 0;
static int *ace_yy_start_stack = 0;
#ifndef ACE_YY_NO_PUSH_STATE
static void ace_yy_push_state ACE_YY_PROTO(( int new_state ));
#endif
#ifndef ACE_YY_NO_POP_STATE
static void ace_yy_pop_state ACE_YY_PROTO(( void ));
#endif
#ifndef ACE_YY_NO_TOP_STATE
static int ace_yy_top_state ACE_YY_PROTO(( void ));
#endif

#else
#define ACE_YY_NO_PUSH_STATE 1
#define ACE_YY_NO_POP_STATE 1
#define ACE_YY_NO_TOP_STATE 1
#endif

#ifdef ACE_YY_MALLOC_DECL
ACE_YY_MALLOC_DECL
#else
#if __STDC__
#ifndef __cplusplus
#include /**/ <stdlib.h>
#endif
#else
/* Just try to get by without declaring the routines.  This will fail
 * miserably on non-ANSI systems for which sizeof(size_t) != sizeof(int)
 * or sizeof(void*) != sizeof(int).
 */
#endif
#endif

/* Amount of stuff to slurp up with each read. */
#ifndef ACE_YY_READ_BUF_SIZE
#define ACE_YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */

#ifndef ACE_SVC_CONF_ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ACE_SVC_CONF_ECHO (void) fwrite( ace_yytext, ace_yyleng, 1, ace_yyout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or ACE_YY_NULL,
 * is returned in "result".
 */
#ifndef ACE_YY_INPUT
#define ACE_YY_INPUT(buf,result,max_size) \
        if ( ace_yy_current_buffer->ace_yy_is_interactive ) \
                { \
                int c = '*', n; \
                for ( n = 0; n < max_size && \
                             (c = getc( ace_yyin )) != EOF && c != '\n'; ++n ) \
                        buf[n] = (ACE_TCHAR) c; \
                if ( c == '\n' ) \
                        buf[n++] = (ACE_TCHAR) c; \
                if ( c == EOF && ferror( ace_yyin ) ) \
                        ACE_YY_FATAL_ERROR(ACE_LIB_TEXT( "input in flex scanner failed") ); \
                result = n; \
                } \
        else if ( ((result = fread( buf, sizeof (ACE_TCHAR), max_size, ace_yyin )) == 0) \
                  && ferror( ace_yyin ) ) \
                ACE_YY_FATAL_ERROR(ACE_LIB_TEXT("input in flex scanner failed") );
#endif

/* No semi-colon after return; correct usage is to write "ace_yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef ace_yyterminate
#define ace_yyterminate() return ACE_YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef ACE_YY_START_STACK_INCR
#define ACE_YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef ACE_YY_FATAL_ERROR
#define ACE_YY_FATAL_ERROR(msg) ace_yy_fatal_error( msg )
#endif

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef ACE_YY_DECL
#define ACE_YY_DECL int ace_yylex ACE_YY_PROTO(( void ))
#endif

/* Code executed at the beginning of each rule, after ace_yytext and ace_yyleng
 * have been set up.
 */
#ifndef ACE_YY_USER_ACTION
#define ACE_YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef ACE_YY_BREAK
#define ACE_YY_BREAK break;
#endif

#define ACE_YY_RULE_SETUP \
        if ( ace_yyleng > 0 ) \
                ace_yy_current_buffer->ace_yy_at_bol = \
                                (ace_yytext[ace_yyleng - 1] == '\n'); \
        ACE_YY_USER_ACTION

ACE_YY_DECL
        {
          ACE_MT (ACE_GUARD_RETURN (ACE_SYNCH_RECURSIVE_MUTEX,
                                    ace_mon,
                                    *ACE_Static_Object_Lock::instance (),
                                    -1));

          ACE_Svc_Conf_Lexer_Guard ace_lexer_guard (ACE_SVC_CONF_PARAM);

        register ace_yy_state_type ace_yy_current_state;
        register ACE_TCHAR *ace_yy_cp=0, *ace_yy_bp=0;
        register int ace_yy_act;




        if ( ace_yy_init )
                {
                ace_yy_init = 0;

#ifdef ACE_YY_USER_INIT
                ACE_YY_USER_INIT;
#endif

                if ( ! ace_yy_start )
                        ace_yy_start = 1;       /* first start state */

                if ( ! ace_yyin )
                        ace_yyin = stdin;

                if ( ! ace_yyout )
                        ace_yyout = stdout;

                if ( ! ace_yy_current_buffer )
                        ace_yy_current_buffer =
                                ace_yy_create_buffer( ace_yyin, ACE_YY_BUF_SIZE );

                ace_yy_load_buffer_state();
                }

        while ( 1 )             /* loops until end-of-file is reached */
                {
                ace_yy_cp = ace_yy_c_buf_p;

                /* Support of ace_yytext. */
                *ace_yy_cp = ace_yy_hold_char;

                /* ace_yy_bp points to the position in ace_yy_ch_buf of the start of
                 * the current run.
                 */
                ace_yy_bp = ace_yy_cp;

                ace_yy_current_state = ace_yy_start;
                ace_yy_current_state += ACE_YY_AT_BOL();
ace_yy_match:
                do
                        {
                        register ACE_YY_CHAR ace_yy_c = ace_yy_ec[ACE_YY_SC_TO_UI(*ace_yy_cp)];
                        if ( ace_yy_accept[ace_yy_current_state] )
                                {
                                ace_yy_last_accepting_state = ace_yy_current_state;
                                ace_yy_last_accepting_cpos = ace_yy_cp;
                                }
                        while ( ace_yy_chk[ace_yy_base[ace_yy_current_state] + ace_yy_c] != ace_yy_current_state )
                                {
                                ace_yy_current_state = (int) ace_yy_def[ace_yy_current_state];
                                if ( ace_yy_current_state >= 108 )
                                        ace_yy_c = ace_yy_meta[(unsigned int) ace_yy_c];
                                }
                        ace_yy_current_state = ace_yy_nxt[ace_yy_base[ace_yy_current_state] + (unsigned int) ace_yy_c];
                        ++ace_yy_cp;
                        }
                while ( ace_yy_base[ace_yy_current_state] != 438 );

ace_yy_find_action:
                ace_yy_act = ace_yy_accept[ace_yy_current_state];
                if ( ace_yy_act == 0 )
                        { /* have to back up */
                        ace_yy_cp = ace_yy_last_accepting_cpos;
                        ace_yy_current_state = ace_yy_last_accepting_state;
                        ace_yy_act = ace_yy_accept[ace_yy_current_state];
                        }

                ACE_YY_DO_BEFORE_ACTION;


do_action:      /* This label is used only to access EOF actions. */


                switch ( ace_yy_act )
        { /* beginning of action switch */
                        case 0: /* must back up */
                        /* undo the effects of ACE_YY_DO_BEFORE_ACTION */
                        *ace_yy_cp = ace_yy_hold_char;
                        ace_yy_cp = ace_yy_last_accepting_cpos;
                        ace_yy_current_state = ace_yy_last_accepting_state;
                        goto ace_yy_find_action;

case 1:
*ace_yy_cp = ace_yy_hold_char; /* undo effects of setting up ace_yytext */
ace_yy_c_buf_p = ace_yy_cp -= 1;
ACE_YY_DO_BEFORE_ACTION; /* set up ace_yytext again */
ACE_YY_RULE_SETUP
; /* EMPTY */
        ACE_YY_BREAK
case 2:
ACE_YY_RULE_SETUP
{ return token (ACE_DYNAMIC); }
        //      ACE_YY_BREAK
case 3:
ACE_YY_RULE_SETUP
{ return token (ACE_STATIC); }
        //      ACE_YY_BREAK
case 4:
ACE_YY_RULE_SETUP
{ return token (ACE_SUSPEND); }
        //      ACE_YY_BREAK
case 5:
ACE_YY_RULE_SETUP
{ return token (ACE_RESUME); }
        //      ACE_YY_BREAK
case 6:
ACE_YY_RULE_SETUP
{ return token (ACE_REMOVE); }
        //      ACE_YY_BREAK
case 7:
ACE_YY_RULE_SETUP
{ return token (ACE_USTREAM); }
        //      ACE_YY_BREAK
case 8:
ACE_YY_RULE_SETUP
{ return token (ACE_MODULE_T); }
        //      ACE_YY_BREAK
case 9:
ACE_YY_RULE_SETUP
{ return token (ACE_SVC_OBJ_T); }
        //      ACE_YY_BREAK
case 10:
ACE_YY_RULE_SETUP
{ return token (ACE_STREAM_T); }
        //      ACE_YY_BREAK
case 11:
ACE_YY_RULE_SETUP
{ return token (ACE_ACTIVE); }
        //      ACE_YY_BREAK
case 12:
ACE_YY_RULE_SETUP
{ return token (ACE_INACTIVE); }
        //      ACE_YY_BREAK
case 13:
ACE_YY_RULE_SETUP
{ return token (':'); }
        //      ACE_YY_BREAK
case 14:
ACE_YY_RULE_SETUP
{ return token ('*'); }
        //      ACE_YY_BREAK
case 15:
ACE_YY_RULE_SETUP
{ return token ('('); }
        //      ACE_YY_BREAK
case 16:
ACE_YY_RULE_SETUP
{ return token (')'); }
        //      ACE_YY_BREAK
case 17:
ACE_YY_RULE_SETUP
{ return token ('{'); }
        //      ACE_YY_BREAK
case 18:
ACE_YY_RULE_SETUP
{ return token ('}'); }
        //      ACE_YY_BREAK
case 19:
ACE_YY_RULE_SETUP
{
                        // Check for first type of string, i.e.,
                        // "double quotes" delimited.
                        ACE_TCHAR *s = ACE_OS::strrchr (ace_yytext, '"');
                        if (s == 0)
                          // Check for second type of string, i.e.,
                          // 'single quotes' delimited.
                          s = ACE_OS::strrchr (ace_yytext, '\'');

                        ACE_ASSERT (s != 0);
                        // Eliminate the opening and closing double or
                        // single quotes.
                        *s = '\0';
                        ace_yyleng -= 1;
                        ace_yylval->ident_ = ACE_SVC_CONF_PARAM->obstack.copy (ace_yytext + 1, ace_yyleng);
                        return token (ACE_STRING); }
//      ACE_YY_BREAK
case 20:
ACE_YY_RULE_SETUP
{
                        ace_yylval->ident_ = ACE_SVC_CONF_PARAM->obstack.copy (ace_yytext, ace_yyleng);
                        return token (ACE_IDENT);
                      }
//      ACE_YY_BREAK
case 21:
ACE_YY_RULE_SETUP
{
                        ace_yylval->ident_ = ACE_SVC_CONF_PARAM->obstack.copy (ace_yytext, ace_yyleng);
                        return token (ACE_PATHNAME);
                      }
//      ACE_YY_BREAK
case 22:
ACE_YY_RULE_SETUP
; /* EMPTY */
        ACE_YY_BREAK
case 23:
ACE_YY_RULE_SETUP
; /* EMPTY */
        ACE_YY_BREAK
case 24:
ACE_YY_RULE_SETUP
{ ACE_SVC_CONF_PARAM->yylineno++; ace_yylineno++; }
        ACE_YY_BREAK
case 25:
ACE_YY_RULE_SETUP
{
                         ACE_ERROR ((LM_ERROR,
                                     ACE_LIB_TEXT ("unknown character = (%d"),
                                                   *ace_yytext));
                        if (ACE_OS::ace_isprint (*ace_yytext))
                          ACE_ERROR ((LM_ERROR, ACE_LIB_TEXT ("|%c"), *ace_yytext));
                        ACE_ERROR ((LM_ERROR, ACE_LIB_TEXT (")\n")));
                      }
        ACE_YY_BREAK
case ACE_YY_STATE_EOF(INITIAL):
case ACE_YY_STATE_EOF(PARAMETERS):
case ACE_YY_STATE_EOF(NORMAL):
{ ace_yyterminate(); }
//      ACE_YY_BREAK
case 26:
ACE_YY_RULE_SETUP
ACE_SVC_CONF_ECHO;
        ACE_YY_BREAK

        case ACE_YY_END_OF_BUFFER:
                {
                /* Amount of text matched not including the EOB ACE_TCHAR. */
                int ace_yy_amount_of_matched_text = (int) (ace_yy_cp - ace_yytext_ptr) - 1;

                /* Undo the effects of ACE_YY_DO_BEFORE_ACTION. */
                *ace_yy_cp = ace_yy_hold_char;
                ACE_YY_RESTORE_ACE_YY_MORE_OFFSET

                if ( ace_yy_current_buffer->ace_yy_buffer_status == ACE_YY_BUFFER_NEW )
                        {
                        /* We're scanning a new file or input source.  It's
                         * possible that this happened because the user
                         * just pointed ace_yyin at a new source and called
                         * ace_yylex().  If so, then we have to assure
                         * consistency between ace_yy_current_buffer and our
                         * globals.  Here is the right place to do so, because
                         * this is the first action (other than possibly a
                         * back-up) that will match for the new input source.
                         */
                        ace_yy_n_chars = ace_yy_current_buffer->ace_yy_n_chars;
                        ace_yy_current_buffer->ace_yy_input_file = ace_yyin;
                        ace_yy_current_buffer->ace_yy_buffer_status = ACE_YY_BUFFER_NORMAL;
                        }

                /* Note that here we test for ace_yy_c_buf_p "<=" to the position
                 * of the first EOB in the buffer, since ace_yy_c_buf_p will
                 * already have been incremented past the NUL character
                 * (since all states make transitions on EOB to the
                 * end-of-buffer state).  Contrast this with the test
                 * in input().
                 */
                if ( ace_yy_c_buf_p <= &ace_yy_current_buffer->ace_yy_ch_buf[ace_yy_n_chars] )
                        { /* This was really a NUL. */
                        ace_yy_state_type ace_yy_next_state;

                        ace_yy_c_buf_p = ace_yytext_ptr + ace_yy_amount_of_matched_text;

                        ace_yy_current_state = ace_yy_get_previous_state();

                        /* Okay, we're now positioned to make the NUL
                         * transition.  We couldn't have
                         * ace_yy_get_previous_state() go ahead and do it
                         * for us because it doesn't know how to deal
                         * with the possibility of jamming (and we don't
                         * want to build jamming into it because then it
                         * will run more slowly).
                         */

                        ace_yy_next_state = ace_yy_try_NUL_trans( ace_yy_current_state );

                        ace_yy_bp = ace_yytext_ptr + ACE_YY_MORE_ADJ;

                        if ( ace_yy_next_state )
                                {
                                /* Consume the NUL. */
                                ace_yy_cp = ++ace_yy_c_buf_p;
                                ace_yy_current_state = ace_yy_next_state;
                                goto ace_yy_match;
                                }

                        else
                                {
                                ace_yy_cp = ace_yy_c_buf_p;
                                goto ace_yy_find_action;
                                }
                        }

                else switch ( ace_yy_get_next_buffer() )
                        {
                        case EOB_ACT_END_OF_FILE:
                                {
                                ace_yy_did_buffer_switch_on_eof = 0;

                                if ( ace_yywrap() )
                                        {
                                        /* Note: because we've taken care in
                                         * ace_yy_get_next_buffer() to have set up
                                         * ace_yytext, we can now set up
                                         * ace_yy_c_buf_p so that if some total
                                         * hoser (like flex itself) wants to
                                         * call the scanner after we return the
                                         * ACE_YY_NULL, it'll still work - another
                                         * ACE_YY_NULL will get returned.
                                         */
                                        ace_yy_c_buf_p = ace_yytext_ptr + ACE_YY_MORE_ADJ;

                                        ace_yy_act = ACE_YY_STATE_EOF(ACE_YY_START);
                                        goto do_action;
                                        }

                                else
                                        {
                                        if ( ! ace_yy_did_buffer_switch_on_eof )
                                                ACE_YY_NEW_FILE;
                                        }
                                break;
                                }

                        case EOB_ACT_CONTINUE_SCAN:
                                ace_yy_c_buf_p =
                                        ace_yytext_ptr + ace_yy_amount_of_matched_text;

                                ace_yy_current_state = ace_yy_get_previous_state();

                                ace_yy_cp = ace_yy_c_buf_p;
                                ace_yy_bp = ace_yytext_ptr + ACE_YY_MORE_ADJ;
                                goto ace_yy_match;

                        case EOB_ACT_LAST_MATCH:
                                ace_yy_c_buf_p =
                                &ace_yy_current_buffer->ace_yy_ch_buf[ace_yy_n_chars];

                                ace_yy_current_state = ace_yy_get_previous_state();

                                ace_yy_cp = ace_yy_c_buf_p;
                                ace_yy_bp = ace_yytext_ptr + ACE_YY_MORE_ADJ;
                                goto ace_yy_find_action;
                        }
                break;
                }

        default:
                ACE_YY_FATAL_ERROR(
                        ACE_LIB_TEXT("fatal flex scanner internal error--no action found") );
        } /* end of action switch */
                } /* end of scanning one token */
        } /* end of ace_yylex */


/* ace_yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *      EOB_ACT_LAST_MATCH -
 *      EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *      EOB_ACT_END_OF_FILE - end of file
 */

static int ace_yy_get_next_buffer()
        {
        register ACE_TCHAR *dest = ace_yy_current_buffer->ace_yy_ch_buf;
        register ACE_TCHAR *source = ace_yytext_ptr;
        register int number_to_move, i;
        int ret_val;

        if ( ace_yy_c_buf_p > &ace_yy_current_buffer->ace_yy_ch_buf[ace_yy_n_chars + 1] )
                ACE_YY_FATAL_ERROR(
                ACE_LIB_TEXT("fatal flex scanner internal error--end of buffer missed") );

        if ( ace_yy_current_buffer->ace_yy_fill_buffer == 0 )
                { /* Don't try to fill the buffer, so this is an EOF. */
                if ( ace_yy_c_buf_p - ace_yytext_ptr - ACE_YY_MORE_ADJ == 1 )
                        {
                        /* We matched a single character, the EOB, so
                         * treat this as a final EOF.
                         */
                        return EOB_ACT_END_OF_FILE;
                        }

                else
                        {
                        /* We matched some text prior to the EOB, first
                         * process it.
                         */
                        return EOB_ACT_LAST_MATCH;
                        }
                }

        /* Try to read more data. */

        /* First move last chars to start of buffer. */
        number_to_move = (int) (ace_yy_c_buf_p - ace_yytext_ptr) - 1;

        for ( i = 0; i < number_to_move; ++i )
                *(dest++) = *(source++);

        if ( ace_yy_current_buffer->ace_yy_buffer_status == ACE_YY_BUFFER_EOF_PENDING )
                /* don't do the read, it's not guaranteed to return an EOF,
                 * just force an EOF
                 */
                ace_yy_current_buffer->ace_yy_n_chars = ace_yy_n_chars = 0;

        else
                {
                int num_to_read =
                        ace_yy_current_buffer->ace_yy_buf_size - number_to_move - 1;

                while ( num_to_read <= 0 )
                        { /* Not enough room in the buffer - grow it. */
#ifdef ACE_YY_USES_REJECT
                          ACE_YY_FATAL_ERROR(ACE_LIB_TEXT(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT") );
#else

                        /* just a shorter name for the current buffer */
                        ACE_YY_BUFFER_STATE b = ace_yy_current_buffer;

                        int ace_yy_c_buf_p_offset =
                                (int) (ace_yy_c_buf_p - b->ace_yy_ch_buf);

                        if ( b->ace_yy_is_our_buffer )
                                {
                                int new_size = b->ace_yy_buf_size * 2;

                                if ( new_size <= 0 )
                                        b->ace_yy_buf_size += b->ace_yy_buf_size / 8;
                                else
                                        b->ace_yy_buf_size *= 2;

                                b->ace_yy_ch_buf = (ACE_TCHAR *)
                                        /* Include room in for 2 EOB chars. */
                                        ace_yy_flex_realloc( (void *) b->ace_yy_ch_buf,
                                                      (b->ace_yy_buf_size + 2)*sizeof(ACE_TCHAR));
                                }
                        else
                                /* Can't grow it, we don't own it. */
                                b->ace_yy_ch_buf = 0;

                        if ( ! b->ace_yy_ch_buf )
                          ACE_YY_FATAL_ERROR(ACE_LIB_TEXT(
                                "fatal error - scanner input buffer overflow") );

                        ace_yy_c_buf_p = &b->ace_yy_ch_buf[ace_yy_c_buf_p_offset];

                        num_to_read = ace_yy_current_buffer->ace_yy_buf_size -
                                                number_to_move - 1;
#endif
                        }

                if ( num_to_read * sizeof (ACE_TCHAR) > ACE_YY_READ_BUF_SIZE )
                        num_to_read = ACE_YY_READ_BUF_SIZE/sizeof (ACE_TCHAR);

                /* Read in more data. */
                ACE_YY_INPUT( (&ace_yy_current_buffer->ace_yy_ch_buf[number_to_move]),
                        ace_yy_n_chars, num_to_read );

                ace_yy_current_buffer->ace_yy_n_chars = ace_yy_n_chars;
                }

        if ( ace_yy_n_chars == 0 )
                {
                if ( number_to_move == ACE_YY_MORE_ADJ )
                        {
                        ret_val = EOB_ACT_END_OF_FILE;
                        ace_yyrestart( ace_yyin );
                        }

                else
                        {
                        ret_val = EOB_ACT_LAST_MATCH;
                        ace_yy_current_buffer->ace_yy_buffer_status =
                                ACE_YY_BUFFER_EOF_PENDING;
                        }
                }

        else
                ret_val = EOB_ACT_CONTINUE_SCAN;

        ace_yy_n_chars += number_to_move;
        ace_yy_current_buffer->ace_yy_ch_buf[ace_yy_n_chars] = ACE_YY_END_OF_BUFFER_CHAR;
        ace_yy_current_buffer->ace_yy_ch_buf[ace_yy_n_chars + 1] = ACE_YY_END_OF_BUFFER_CHAR;

        ace_yytext_ptr = &ace_yy_current_buffer->ace_yy_ch_buf[0];

        return ret_val;
        }


/* ace_yy_get_previous_state - get the state just before the EOB ACE_TCHAR was reached */

static ace_yy_state_type ace_yy_get_previous_state()
        {
        register ace_yy_state_type ace_yy_current_state;
        register ACE_TCHAR *ace_yy_cp;

        ace_yy_current_state = ace_yy_start;
        ace_yy_current_state += ACE_YY_AT_BOL();

        for ( ace_yy_cp = ace_yytext_ptr + ACE_YY_MORE_ADJ; ace_yy_cp < ace_yy_c_buf_p; ++ace_yy_cp )
                {
                register ACE_YY_CHAR ace_yy_c = (*ace_yy_cp ? ace_yy_ec[ACE_YY_SC_TO_UI(*ace_yy_cp)] : 1);
                if ( ace_yy_accept[ace_yy_current_state] )
                        {
                        ace_yy_last_accepting_state = ace_yy_current_state;
                        ace_yy_last_accepting_cpos = ace_yy_cp;
                        }
                while ( ace_yy_chk[ace_yy_base[ace_yy_current_state] + ace_yy_c] != ace_yy_current_state )
                        {
                        ace_yy_current_state = (int) ace_yy_def[ace_yy_current_state];
                        if ( ace_yy_current_state >= 108 )
                                ace_yy_c = ace_yy_meta[(unsigned int) ace_yy_c];
                        }
                ace_yy_current_state = ace_yy_nxt[ace_yy_base[ace_yy_current_state] + (unsigned int) ace_yy_c];
                }

        return ace_yy_current_state;
        }


/* ace_yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *      next_state = ace_yy_try_NUL_trans( current_state );
 */

#ifdef ACE_YY_USE_PROTOS
static ace_yy_state_type ace_yy_try_NUL_trans( ace_yy_state_type ace_yy_current_state )
#else
static ace_yy_state_type ace_yy_try_NUL_trans( ace_yy_current_state )
ace_yy_state_type ace_yy_current_state;
#endif
        {
        register int ace_yy_is_jam;
        register ACE_TCHAR *ace_yy_cp = ace_yy_c_buf_p;

        register ACE_YY_CHAR ace_yy_c = 1;
        if ( ace_yy_accept[ace_yy_current_state] )
                {
                ace_yy_last_accepting_state = ace_yy_current_state;
                ace_yy_last_accepting_cpos = ace_yy_cp;
                }
        while ( ace_yy_chk[ace_yy_base[ace_yy_current_state] + ace_yy_c] != ace_yy_current_state )
                {
                ace_yy_current_state = (int) ace_yy_def[ace_yy_current_state];
                if ( ace_yy_current_state >= 108 )
                        ace_yy_c = ace_yy_meta[(unsigned int) ace_yy_c];
                }
        ace_yy_current_state = ace_yy_nxt[ace_yy_base[ace_yy_current_state] + (unsigned int) ace_yy_c];
        ace_yy_is_jam = (ace_yy_current_state == 107);

        return ace_yy_is_jam ? 0 : ace_yy_current_state;
        }


#ifndef ACE_YY_NO_UNPUT
#ifdef ACE_YY_USE_PROTOS
static void ace_yyunput( int c, register ACE_TCHAR *ace_yy_bp )
#else
static void ace_yyunput( c, ace_yy_bp )
int c;
register ACE_TCHAR *ace_yy_bp;
#endif
        {
        register ACE_TCHAR *ace_yy_cp = ace_yy_c_buf_p;

        /* undo effects of setting up ace_yytext */
        *ace_yy_cp = ace_yy_hold_char;

        if ( ace_yy_cp < ace_yy_current_buffer->ace_yy_ch_buf + 2 )
                { /* need to shift things up to make room */
                /* +2 for EOB chars. */
                register int number_to_move = ace_yy_n_chars + 2;
                register ACE_TCHAR *dest = &ace_yy_current_buffer->ace_yy_ch_buf[
                                        ace_yy_current_buffer->ace_yy_buf_size + 2];
                register ACE_TCHAR *source =
                                &ace_yy_current_buffer->ace_yy_ch_buf[number_to_move];

                while ( source > ace_yy_current_buffer->ace_yy_ch_buf )
                        *--dest = *--source;

                ace_yy_cp += (int) (dest - source);
                ace_yy_bp += (int) (dest - source);
                ace_yy_current_buffer->ace_yy_n_chars =
                        ace_yy_n_chars = ace_yy_current_buffer->ace_yy_buf_size;

                if ( ace_yy_cp < ace_yy_current_buffer->ace_yy_ch_buf + 2 )
                        ACE_YY_FATAL_ERROR(ACE_LIB_TEXT( "flex scanner push-back overflow") );
                }

        *--ace_yy_cp = (ACE_TCHAR) c;


        ace_yytext_ptr = ace_yy_bp;
        ace_yy_hold_char = *ace_yy_cp;
        ace_yy_c_buf_p = ace_yy_cp;
        }
#endif  /* ifndef ACE_YY_NO_UNPUT */


#ifdef __cplusplus
static int ace_yyinput()
#else
static int input()
#endif
        {
        int c;

        *ace_yy_c_buf_p = ace_yy_hold_char;

        if ( *ace_yy_c_buf_p == ACE_YY_END_OF_BUFFER_CHAR )
                {
                /* ace_yy_c_buf_p now points to the character we want to return.
                 * If this occurs *before* the EOB characters, then it's a
                 * valid NUL; if not, then we've hit the end of the buffer.
                 */
                if ( ace_yy_c_buf_p < &ace_yy_current_buffer->ace_yy_ch_buf[ace_yy_n_chars] )
                        /* This was really a NUL. */
                        *ace_yy_c_buf_p = '\0';

                else
                        { /* need more input */
                        int offset = ace_yy_c_buf_p - ace_yytext_ptr;
                        ++ace_yy_c_buf_p;

                        switch ( ace_yy_get_next_buffer() )
                                {
                                case EOB_ACT_LAST_MATCH:
                                        /* This happens because ace_yy_g_n_b()
                                         * sees that we've accumulated a
                                         * token and flags that we need to
                                         * try matching the token before
                                         * proceeding.  But for input(),
                                         * there's no matching to consider.
                                         * So convert the EOB_ACT_LAST_MATCH
                                         * to EOB_ACT_END_OF_FILE.
                                         */

                                        /* Reset buffer status. */
                                        ace_yyrestart( ace_yyin );

                                        /* fall through */

                                case EOB_ACT_END_OF_FILE:
                                        {
                                        if ( ace_yywrap() )
                                                return EOF;

                                        if ( ! ace_yy_did_buffer_switch_on_eof )
                                                ACE_YY_NEW_FILE;
#ifdef __cplusplus
                                        return ace_yyinput();
#else
                                        return input();
#endif
                                        }

                                case EOB_ACT_CONTINUE_SCAN:
                                        ace_yy_c_buf_p = ace_yytext_ptr + offset;
                                        break;
                                }
                        }
                }

        c = *(unsigned char *) ace_yy_c_buf_p;  /* cast for 8-bit char's */
        *ace_yy_c_buf_p = '\0'; /* preserve ace_yytext */
        ace_yy_hold_char = *++ace_yy_c_buf_p;

        ace_yy_current_buffer->ace_yy_at_bol = (c == '\n');

        return c;
        }


#ifdef ACE_YY_USE_PROTOS
void ace_yyrestart( FILE *input_file )
#else
void ace_yyrestart( input_file )
FILE *input_file;
#endif
        {
        if ( ! ace_yy_current_buffer )
                ace_yy_current_buffer = ace_yy_create_buffer( ace_yyin, ACE_YY_BUF_SIZE );

        ace_yy_init_buffer( ace_yy_current_buffer, input_file );
        ace_yy_load_buffer_state();
        }


#ifdef ACE_YY_USE_PROTOS
void ace_yy_switch_to_buffer( ACE_YY_BUFFER_STATE new_buffer )
#else
void ace_yy_switch_to_buffer( new_buffer )
ACE_YY_BUFFER_STATE new_buffer;
#endif
        {
        if ( ace_yy_current_buffer == new_buffer )
                return;

        if ( ace_yy_current_buffer )
                {
                /* Flush out information for old buffer. */
                *ace_yy_c_buf_p = ace_yy_hold_char;
                ace_yy_current_buffer->ace_yy_buf_pos = ace_yy_c_buf_p;
                ace_yy_current_buffer->ace_yy_n_chars = ace_yy_n_chars;
                }

        ace_yy_current_buffer = new_buffer;
        ace_yy_load_buffer_state();

        /* We don't actually know whether we did this switch during
         * EOF (ace_yywrap()) processing, but the only time this flag
         * is looked at is after ace_yywrap() is called, so it's safe
         * to go ahead and always set it.
         */
        ace_yy_did_buffer_switch_on_eof = 1;
        }


#ifdef ACE_YY_USE_PROTOS
void ace_yy_load_buffer_state( void )
#else
void ace_yy_load_buffer_state()
#endif
        {
        ace_yy_n_chars = ace_yy_current_buffer->ace_yy_n_chars;
        ace_yytext_ptr = ace_yy_c_buf_p = ace_yy_current_buffer->ace_yy_buf_pos;
        ace_yyin = ace_yy_current_buffer->ace_yy_input_file;
        ace_yy_hold_char = *ace_yy_c_buf_p;
        }


#ifdef ACE_YY_USE_PROTOS
ACE_YY_BUFFER_STATE ace_yy_create_buffer( FILE *file, int size )
#else
ACE_YY_BUFFER_STATE ace_yy_create_buffer( file, size )
FILE *file;
int size;
#endif
        {
        ACE_YY_BUFFER_STATE b;

        b = (ACE_YY_BUFFER_STATE) ace_yy_flex_alloc( sizeof( struct ace_yy_buffer_state ) );
        if ( ! b )
                ACE_YY_FATAL_ERROR(ACE_LIB_TEXT( "out of dynamic memory in ace_yy_create_buffer()") );

        b->ace_yy_buf_size = size;

        /* ace_yy_ch_buf has to be 2 characters longer than the size given because
         * we need to put in 2 end-of-buffer characters.
         */
        b->ace_yy_ch_buf = (ACE_TCHAR *) ace_yy_flex_alloc( (b->ace_yy_buf_size + 2 ) * sizeof (ACE_TCHAR));
        if ( ! b->ace_yy_ch_buf )
                ACE_YY_FATAL_ERROR(ACE_LIB_TEXT( "out of dynamic memory in ace_yy_create_buffer()") );

        b->ace_yy_is_our_buffer = 1;

        ace_yy_init_buffer( b, file );

        return b;
        }


#ifdef ACE_YY_USE_PROTOS
void ace_yy_delete_buffer( ACE_YY_BUFFER_STATE b )
#else
void ace_yy_delete_buffer( b )
ACE_YY_BUFFER_STATE b;
#endif
        {
        if ( ! b )
                return;

        if ( b == ace_yy_current_buffer )
                ace_yy_current_buffer = (ACE_YY_BUFFER_STATE) 0;

        if ( b->ace_yy_is_our_buffer )
                ace_yy_flex_free( (void *) b->ace_yy_ch_buf );

        ace_yy_flex_free( (void *) b );
        }

#ifndef ACE_YY_ALWAYS_INTERACTIVE
#ifndef ACE_YY_NEVER_INTERACTIVE
extern int nop_isatty ACE_YY_PROTO(( int ));
#endif
#endif

#ifndef ACE_YY_ALWAYS_INTERACTIVE
#ifndef ACE_YY_NEVER_INTERACTIVE
extern int nop_isatty ACE_YY_PROTO(( int ));
#endif
#endif

#ifdef ACE_YY_USE_PROTOS
void ace_yy_init_buffer( ACE_YY_BUFFER_STATE b, FILE *file )
#else
void ace_yy_init_buffer( b, file )
ACE_YY_BUFFER_STATE b;
FILE *file;
#endif


        {
        ace_yy_flush_buffer( b );

        b->ace_yy_input_file = file;
        b->ace_yy_fill_buffer = 1;

#if ACE_YY_ALWAYS_INTERACTIVE
        b->ace_yy_is_interactive = 1;
#else
#if ACE_YY_NEVER_INTERACTIVE
        b->ace_yy_is_interactive = 0;
#else
        b->ace_yy_is_interactive = file ? (ACE_OS::isatty( fileno (file) ) > 0) : 0;
#endif
#endif
        }


#ifdef ACE_YY_USE_PROTOS
void ace_yy_flush_buffer( ACE_YY_BUFFER_STATE b )
#else
void ace_yy_flush_buffer( b )
ACE_YY_BUFFER_STATE b;
#endif

        {
        if ( ! b )
                return;

        b->ace_yy_n_chars = 0;

        /* We always need two end-of-buffer characters.  The first causes
         * a transition to the end-of-buffer state.  The second causes
         * a jam in that state.
         */
        b->ace_yy_ch_buf[0] = ACE_YY_END_OF_BUFFER_CHAR;
        b->ace_yy_ch_buf[1] = ACE_YY_END_OF_BUFFER_CHAR;

        b->ace_yy_buf_pos = &b->ace_yy_ch_buf[0];

        b->ace_yy_at_bol = 1;
        b->ace_yy_buffer_status = ACE_YY_BUFFER_NEW;

        if ( b == ace_yy_current_buffer )
                ace_yy_load_buffer_state();
        }


#ifndef ACE_YY_NO_SCAN_BUFFER
#ifdef ACE_YY_USE_PROTOS
ACE_YY_BUFFER_STATE ace_yy_scan_buffer( ACE_TCHAR *base, ace_yy_size_t size )
#else
ACE_YY_BUFFER_STATE ace_yy_scan_buffer( base, size )
ACE_TCHAR *base;
ace_yy_size_t size;
#endif
        {
        ACE_YY_BUFFER_STATE b;

        if ( size < 2 ||
             base[size-2] != ACE_YY_END_OF_BUFFER_CHAR ||
             base[size-1] != ACE_YY_END_OF_BUFFER_CHAR )
                /* They forgot to leave room for the EOB's. */
                return 0;

        b = (ACE_YY_BUFFER_STATE) ace_yy_flex_alloc( sizeof( struct ace_yy_buffer_state ) );
        if ( ! b )
                ACE_YY_FATAL_ERROR(ACE_LIB_TEXT( "out of dynamic memory in ace_yy_scan_buffer()" ));

        b->ace_yy_buf_size = size - 2;  /* "- 2" to take care of EOB's */
        b->ace_yy_buf_pos = b->ace_yy_ch_buf = base;
        b->ace_yy_is_our_buffer = 0;
        b->ace_yy_input_file = 0;
        b->ace_yy_n_chars = b->ace_yy_buf_size;
        b->ace_yy_is_interactive = 0;
        b->ace_yy_at_bol = 1;
        b->ace_yy_fill_buffer = 0;
        b->ace_yy_buffer_status = ACE_YY_BUFFER_NEW;

        ace_yy_switch_to_buffer( b );

        return b;
        }
#endif


#ifndef ACE_YY_NO_SCAN_STRING
#ifdef ACE_YY_USE_PROTOS
ACE_YY_BUFFER_STATE ace_yy_scan_string( ace_yyconst ACE_TCHAR *ace_yy_str )
#else
ACE_YY_BUFFER_STATE ace_yy_scan_string( ace_yy_str )
ace_yyconst ACE_TCHAR *ace_yy_str;
#endif
        {
        int len;
        for ( len = 0; ace_yy_str[len]; ++len )
                ;

        return ace_yy_scan_bytes( ace_yy_str, len );
        }
#endif


#ifndef ACE_YY_NO_SCAN_BYTES
#ifdef ACE_YY_USE_PROTOS
ACE_YY_BUFFER_STATE ace_yy_scan_bytes( ace_yyconst ACE_TCHAR *bytes, int len )
#else
ACE_YY_BUFFER_STATE ace_yy_scan_bytes( bytes, len )
ace_yyconst ACE_TCHAR *bytes;
int len;
#endif
        {
        ACE_YY_BUFFER_STATE b;
        ACE_TCHAR *buf;
        ace_yy_size_t n;
        int i;

        /* Get memory for full buffer, including space for trailing EOB's. */
        n = len + 2;
        buf = (ACE_TCHAR *) ace_yy_flex_alloc( n * sizeof (ACE_TCHAR));
        if ( ! buf )
                ACE_YY_FATAL_ERROR(ACE_LIB_TEXT( "out of dynamic memory in ace_yy_scan_bytes()" ));

        for ( i = 0; i < len; ++i )
                buf[i] = bytes[i];

        buf[len] = buf[len+1] = ACE_YY_END_OF_BUFFER_CHAR;

        b = ace_yy_scan_buffer( buf, n );
        if ( ! b )
                ACE_YY_FATAL_ERROR(ACE_LIB_TEXT( "bad buffer in ace_yy_scan_bytes()") );

        /* It's okay to grow etc. this buffer, and we should throw it
         * away when we're done.
         */
        b->ace_yy_is_our_buffer = 1;

        return b;
        }
#endif


#ifndef ACE_YY_NO_PUSH_STATE
#ifdef ACE_YY_USE_PROTOS
static void ace_yy_push_state( int new_state )
#else
static void ace_yy_push_state( new_state )
int new_state;
#endif
        {
        if ( ace_yy_start_stack_ptr >= ace_yy_start_stack_depth )
                {
                ace_yy_size_t new_size;

                ace_yy_start_stack_depth += ACE_YY_START_STACK_INCR;
                new_size = ace_yy_start_stack_depth * sizeof( int );

                if ( ! ace_yy_start_stack )
                        ace_yy_start_stack = (int *) ace_yy_flex_alloc( new_size );

                else
                        ace_yy_start_stack = (int *) ace_yy_flex_realloc(
                                        (void *) ace_yy_start_stack, new_size );

                if ( ! ace_yy_start_stack )
                  ACE_YY_FATAL_ERROR(ACE_LIB_TEXT(
                        "out of memory expanding start-condition stack" ));
                }

        ace_yy_start_stack[ace_yy_start_stack_ptr++] = ACE_YY_START;

        BEGIN(new_state);
        }
#endif


#ifndef ACE_YY_NO_POP_STATE
static void ace_yy_pop_state()
        {
        if ( --ace_yy_start_stack_ptr < 0 )
                ACE_YY_FATAL_ERROR(ACE_LIB_TEXT( "start-condition stack underflow" ));

        BEGIN(ace_yy_start_stack[ace_yy_start_stack_ptr]);
        }
#endif


#ifndef ACE_YY_NO_TOP_STATE
static int ace_yy_top_state()
        {
        return ace_yy_start_stack[ace_yy_start_stack_ptr - 1];
        }
#endif

#ifndef ACE_YY_EXIT_FAILURE
#define ACE_YY_EXIT_FAILURE 2
#endif

#ifdef ACE_YY_USE_PROTOS
static void ace_yy_fatal_error( ace_yyconst ACE_TCHAR msg[] )
#else
static void ace_yy_fatal_error( msg )
ACE_TCHAR msg[];
#endif
        {
        (void) ACE_OS::fprintf( stderr, ACE_LIB_TEXT("%s\n"), msg );
        exit( ACE_YY_EXIT_FAILURE );
        }



/* Redefine ace_yyless() so it works in section 3 code. */

#undef ace_yyless
#define ace_yyless(n) \
        do \
                { \
                /* Undo effects of setting up ace_yytext. */ \
                ace_yytext[ace_yyleng] = ace_yy_hold_char; \
                ace_yy_c_buf_p = ace_yytext + n; \
                ace_yy_hold_char = *ace_yy_c_buf_p; \
                *ace_yy_c_buf_p = '\0'; \
                ace_yyleng = n; \
                } \
        while ( 0 )


/* Internal utility routines. */

#ifndef ace_yytext_ptr
#ifdef ACE_YY_USE_PROTOS
static void ace_yy_flex_strncpy( ACE_TCHAR *s1, ace_yyconst ACE_TCHAR *s2, int n )
#else
static void ace_yy_flex_strncpy( s1, s2, n )
ACE_TCHAR *s1;
ace_yyconst ACE_TCHAR *s2;
int n;
#endif
        {
        register int i;
        for ( i = 0; i < n; ++i )
                s1[i] = s2[i];
        }
#endif

#ifdef ACE_YY_NEED_STRLEN
#ifdef ACE_YY_USE_PROTOS
static int ace_yy_flex_strlen( ace_yyconst ACE_TCHAR *s )
#else
static int ace_yy_flex_strlen( s )
ace_yyconst ACE_TCHAR *s;
#endif
        {
        register int n;
        for ( n = 0; s[n]; ++n )
                ;

        return n;
        }
#endif


#ifdef ACE_YY_USE_PROTOS
static void *ace_yy_flex_alloc( ace_yy_size_t size )
#else
static void *ace_yy_flex_alloc( size )
ace_yy_size_t size;
#endif
        {
        return (void *) malloc( size );
        }

#ifdef ACE_YY_USE_PROTOS
static void *ace_yy_flex_realloc( void *ptr, ace_yy_size_t size )
#else
static void *ace_yy_flex_realloc( ptr, size )
void *ptr;
ace_yy_size_t size;
#endif
        {
        /* The cast to (char *) in the following accommodates both
         * implementations that use char* generic pointers, and those
         * that use void* generic pointers.  It works with the latter
         * because both ANSI C and C++ allow castless assignment from
         * any pointer type to void*, and deal with argument conversions
         * as though doing an assignment.
         */
        return (void *) realloc( (char *) ptr, size );
        }

#ifdef ACE_YY_USE_PROTOS
static void ace_yy_flex_free( void *ptr )
#else
static void ace_yy_flex_free( ptr )
void *ptr;
#endif
        {
        free( ACE_MALLOC_T (ptr) );
        }

#if ACE_YY_MAIN
int main()
        {
        ace_yylex();
        return 0;
}
#endif

int
ace_yywrap (void)
{
  ACE_OS::fflush (ace_yyin);
  ace_yytext[0] = '#';
  ace_yyleng = 0;

  return 1;
}

void
ace_yy_push_buffer (FILE *file, ace_yy_buffer_state *&buffer)
{
  // External synchronization is required.

  if (buffer == 0)
    buffer = ace_yy_create_buffer (file, ACE_YY_BUF_SIZE);

  ace_yy_switch_to_buffer (buffer);
}

void
ace_yy_push_buffer (const ACE_TCHAR *directive, ace_yy_buffer_state *&buffer)
{
  // External synchronization is required.

  // ace_yyparse() may invoke ace_yylex() multiple times when parsing
  // a single directive.  Prevent a new buffer from created during
  // each call to ace_yylex().
  if (ACE_YY_CURRENT_BUFFER != 0
      && directive == ACE_YY_CURRENT_BUFFER->ace_yy_ch_buf)
    return;

  if (buffer == 0)
    {
      // ace_yy_scan_string() already switches the buffer so there is
      // no need to explicitly make the switch.
      buffer = ace_yy_scan_string (directive);
    }
  else
    ace_yy_switch_to_buffer (buffer);
}

void
ace_yy_pop_buffer (ace_yy_buffer_state *buffer)
{
  // External synchronization is required.

  ace_yy_switch_to_buffer (buffer);
}

#endif /* ACE_USES_CLASSIC_SVC_CONF = 1 */
