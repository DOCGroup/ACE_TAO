--- orig/IFR_ComponentsC.cpp	Sat Mar 16 01:47:43 2002
+++ IFR_ComponentsC.cpp	Sat Mar 16 01:52:45 2002
@@ -1,6 +1,6 @@
 // -*- C++ -*-
 //
-// $Id$
+// $Id$
 
 // ****  Code generated by the The ACE ORB (TAO) IDL Compiler ****
 // TAO and the TAO IDL Compiler have been developed by:
@@ -32,188 +32,13 @@
 #endif  /* TAO_HAS_INTERCEPTORS == 1 */
 
 #if defined (__BORLANDC__)
-#pragma option -w-rvl -w-rch -w-ccc -w-aus -w-sig
+#pragma option -w-rvl -w-rch -w-ccc -w-aus
 #endif /* __BORLANDC__ */
 
 #if !defined (__ACE_INLINE__)
 #include "IFR_ComponentsC.i"
 #endif /* !defined INLINE */
 
-static const CORBA::Long _oc_IR_DefinitionKind[] =
-{
-  TAO_ENCAP_BYTE_ORDER, // byte order
-  34,
-  ACE_NTOHL (0x49444c3a), 
-  ACE_NTOHL (0x6f6d672e), 
-  ACE_NTOHL (0x6f72672f), 
-  ACE_NTOHL (0x49522f44), 
-  ACE_NTOHL (0x6566696e), 
-  ACE_NTOHL (0x6974696f), 
-  ACE_NTOHL (0x6e4b696e), 
-  ACE_NTOHL (0x643a312e), 
-  ACE_NTOHL (0x30000000),  // repository ID = IDL:omg.org/IR/DefinitionKind:1.0
-  15,
-  ACE_NTOHL (0x44656669), 
-  ACE_NTOHL (0x6e697469), 
-  ACE_NTOHL (0x6f6e4b69), 
-  ACE_NTOHL (0x6e640000),  // name = DefinitionKind
-  34, // member count
-  8,
-  ACE_NTOHL (0x646b5f6e), 
-  ACE_NTOHL (0x6f6e6500),  // name = dk_none
-  7,
-  ACE_NTOHL (0x646b5f61), 
-  ACE_NTOHL (0x6c6c0000),  // name = dk_all
-  13,
-  ACE_NTOHL (0x646b5f41), 
-  ACE_NTOHL (0x74747269), 
-  ACE_NTOHL (0x62757465), 
-  ACE_NTOHL (0x0),  // name = dk_Attribute
-  12,
-  ACE_NTOHL (0x646b5f43), 
-  ACE_NTOHL (0x6f6e7374), 
-  ACE_NTOHL (0x616e7400),  // name = dk_Constant
-  13,
-  ACE_NTOHL (0x646b5f45), 
-  ACE_NTOHL (0x78636570), 
-  ACE_NTOHL (0x74696f6e), 
-  ACE_NTOHL (0x0),  // name = dk_Exception
-  13,
-  ACE_NTOHL (0x646b5f49), 
-  ACE_NTOHL (0x6e746572), 
-  ACE_NTOHL (0x66616365), 
-  ACE_NTOHL (0x0),  // name = dk_Interface
-  10,
-  ACE_NTOHL (0x646b5f4d), 
-  ACE_NTOHL (0x6f64756c), 
-  ACE_NTOHL (0x65000000),  // name = dk_Module
-  13,
-  ACE_NTOHL (0x646b5f4f), 
-  ACE_NTOHL (0x70657261), 
-  ACE_NTOHL (0x74696f6e), 
-  ACE_NTOHL (0x0),  // name = dk_Operation
-  11,
-  ACE_NTOHL (0x646b5f54), 
-  ACE_NTOHL (0x79706564), 
-  ACE_NTOHL (0x65660000),  // name = dk_Typedef
-  9,
-  ACE_NTOHL (0x646b5f41), 
-  ACE_NTOHL (0x6c696173), 
-  ACE_NTOHL (0x0),  // name = dk_Alias
-  10,
-  ACE_NTOHL (0x646b5f53), 
-  ACE_NTOHL (0x74727563), 
-  ACE_NTOHL (0x74000000),  // name = dk_Struct
-  9,
-  ACE_NTOHL (0x646b5f55), 
-  ACE_NTOHL (0x6e696f6e), 
-  ACE_NTOHL (0x0),  // name = dk_Union
-  8,
-  ACE_NTOHL (0x646b5f45), 
-  ACE_NTOHL (0x6e756d00),  // name = dk_Enum
-  13,
-  ACE_NTOHL (0x646b5f50), 
-  ACE_NTOHL (0x72696d69), 
-  ACE_NTOHL (0x74697665), 
-  ACE_NTOHL (0x0),  // name = dk_Primitive
-  10,
-  ACE_NTOHL (0x646b5f53), 
-  ACE_NTOHL (0x7472696e), 
-  ACE_NTOHL (0x67000000),  // name = dk_String
-  12,
-  ACE_NTOHL (0x646b5f53), 
-  ACE_NTOHL (0x65717565), 
-  ACE_NTOHL (0x6e636500),  // name = dk_Sequence
-  9,
-  ACE_NTOHL (0x646b5f41), 
-  ACE_NTOHL (0x72726179), 
-  ACE_NTOHL (0x0),  // name = dk_Array
-  14,
-  ACE_NTOHL (0x646b5f52), 
-  ACE_NTOHL (0x65706f73), 
-  ACE_NTOHL (0x69746f72), 
-  ACE_NTOHL (0x79000000),  // name = dk_Repository
-  11,
-  ACE_NTOHL (0x646b5f57), 
-  ACE_NTOHL (0x73747269), 
-  ACE_NTOHL (0x6e670000),  // name = dk_Wstring
-  9,
-  ACE_NTOHL (0x646b5f46), 
-  ACE_NTOHL (0x69786564), 
-  ACE_NTOHL (0x0),  // name = dk_Fixed
-  9,
-  ACE_NTOHL (0x646b5f56), 
-  ACE_NTOHL (0x616c7565), 
-  ACE_NTOHL (0x0),  // name = dk_Value
-  12,
-  ACE_NTOHL (0x646b5f56), 
-  ACE_NTOHL (0x616c7565), 
-  ACE_NTOHL (0x426f7800),  // name = dk_ValueBox
-  15,
-  ACE_NTOHL (0x646b5f56), 
-  ACE_NTOHL (0x616c7565), 
-  ACE_NTOHL (0x4d656d62), 
-  ACE_NTOHL (0x65720000),  // name = dk_ValueMember
-  10,
-  ACE_NTOHL (0x646b5f4e), 
-  ACE_NTOHL (0x61746976), 
-  ACE_NTOHL (0x65000000),  // name = dk_Native
-  13,
-  ACE_NTOHL (0x646b5f43), 
-  ACE_NTOHL (0x6f6d706f), 
-  ACE_NTOHL (0x6e656e74), 
-  ACE_NTOHL (0x0),  // name = dk_Component
-  8,
-  ACE_NTOHL (0x646b5f48), 
-  ACE_NTOHL (0x6f6d6500),  // name = dk_Home
-  11,
-  ACE_NTOHL (0x646b5f46), 
-  ACE_NTOHL (0x6163746f), 
-  ACE_NTOHL (0x72790000),  // name = dk_Factory
-  10,
-  ACE_NTOHL (0x646b5f46), 
-  ACE_NTOHL (0x696e6465), 
-  ACE_NTOHL (0x72000000),  // name = dk_Finder
-  14,
-  ACE_NTOHL (0x646b5f50), 
-  ACE_NTOHL (0x72696d61), 
-  ACE_NTOHL (0x72794b65), 
-  ACE_NTOHL (0x79000000),  // name = dk_PrimaryKey
-  9,
-  ACE_NTOHL (0x646b5f45), 
-  ACE_NTOHL (0x6d697473), 
-  ACE_NTOHL (0x0),  // name = dk_Emits
-  13,
-  ACE_NTOHL (0x646b5f50), 
-  ACE_NTOHL (0x75626c69), 
-  ACE_NTOHL (0x73686573), 
-  ACE_NTOHL (0x0),  // name = dk_Publishes
-  12,
-  ACE_NTOHL (0x646b5f43), 
-  ACE_NTOHL (0x6f6e7375), 
-  ACE_NTOHL (0x6d657300),  // name = dk_Consumes
-  12,
-  ACE_NTOHL (0x646b5f50), 
-  ACE_NTOHL (0x726f7669), 
-  ACE_NTOHL (0x64657300),  // name = dk_Provides
-  8,
-  ACE_NTOHL (0x646b5f55), 
-  ACE_NTOHL (0x73657300),  // name = dk_Uses
-};
-
-static CORBA::TypeCode _tc_TAO_tc_IR_DefinitionKind (
-    CORBA::tk_enum,
-    sizeof (_oc_IR_DefinitionKind),
-    (char *) &_oc_IR_DefinitionKind,
-    0,
-    sizeof (IR::DefinitionKind)
-  );
-
-TAO_NAMESPACE_TYPE (CORBA::TypeCode_ptr)
-TAO_NAMESPACE_BEGIN (IR)
-TAO_NAMESPACE_DEFINE (::CORBA::TypeCode_ptr, _tc_DefinitionKind, &_tc_TAO_tc_IR_DefinitionKind)
-TAO_NAMESPACE_END
-
 static const CORBA::Long _oc_IR_Identifier[] =
 {
   TAO_ENCAP_BYTE_ORDER, // byte order
@@ -244,7 +69,7 @@
 
 TAO_NAMESPACE_TYPE (CORBA::TypeCode_ptr)
 TAO_NAMESPACE_BEGIN (IR)
-TAO_NAMESPACE_DEFINE (::CORBA::TypeCode_ptr, _tc_Identifier, &_tc_TAO_tc_IR_Identifier)
+TAO_NAMESPACE_DEFINE (CORBA::TypeCode_ptr, _tc_Identifier, &_tc_TAO_tc_IR_Identifier)
 TAO_NAMESPACE_END
 
 static const CORBA::Long _oc_IR_ScopedName[] =
@@ -277,7 +102,7 @@
 
 TAO_NAMESPACE_TYPE (CORBA::TypeCode_ptr)
 TAO_NAMESPACE_BEGIN (IR)
-TAO_NAMESPACE_DEFINE (::CORBA::TypeCode_ptr, _tc_ScopedName, &_tc_TAO_tc_IR_ScopedName)
+TAO_NAMESPACE_DEFINE (CORBA::TypeCode_ptr, _tc_ScopedName, &_tc_TAO_tc_IR_ScopedName)
 TAO_NAMESPACE_END
 
 static const CORBA::Long _oc_IR_RepositoryId[] =
@@ -311,7 +136,7 @@
 
 TAO_NAMESPACE_TYPE (CORBA::TypeCode_ptr)
 TAO_NAMESPACE_BEGIN (IR)
-TAO_NAMESPACE_DEFINE (::CORBA::TypeCode_ptr, _tc_RepositoryId, &_tc_TAO_tc_IR_RepositoryId)
+TAO_NAMESPACE_DEFINE (CORBA::TypeCode_ptr, _tc_RepositoryId, &_tc_TAO_tc_IR_RepositoryId)
 TAO_NAMESPACE_END
 
 
@@ -417,7 +242,7 @@
 
 TAO_NAMESPACE_TYPE (CORBA::TypeCode_ptr)
 TAO_NAMESPACE_BEGIN (IR)
-TAO_NAMESPACE_DEFINE (::CORBA::TypeCode_ptr, _tc_RepositoryIdSeq, &_tc_TAO_tc_IR_RepositoryIdSeq)
+TAO_NAMESPACE_DEFINE (CORBA::TypeCode_ptr, _tc_RepositoryIdSeq, &_tc_TAO_tc_IR_RepositoryIdSeq)
 TAO_NAMESPACE_END
 
 static const CORBA::Long _oc_IR_VersionSpec[] =
@@ -450,7 +275,7 @@
 
 TAO_NAMESPACE_TYPE (CORBA::TypeCode_ptr)
 TAO_NAMESPACE_BEGIN (IR)
-TAO_NAMESPACE_DEFINE (::CORBA::TypeCode_ptr, _tc_VersionSpec, &_tc_TAO_tc_IR_VersionSpec)
+TAO_NAMESPACE_DEFINE (CORBA::TypeCode_ptr, _tc_VersionSpec, &_tc_TAO_tc_IR_VersionSpec)
 TAO_NAMESPACE_END
 
 
@@ -647,7 +472,7 @@
 
 TAO_NAMESPACE_TYPE (CORBA::TypeCode_ptr)
 TAO_NAMESPACE_BEGIN (IR)
-TAO_NAMESPACE_DEFINE (::CORBA::TypeCode_ptr, _tc_ComponentDefSeq, &_tc_TAO_tc_IR_ComponentDefSeq)
+TAO_NAMESPACE_DEFINE (CORBA::TypeCode_ptr, _tc_ComponentDefSeq, &_tc_TAO_tc_IR_ComponentDefSeq)
 TAO_NAMESPACE_END
 
 
@@ -843,7 +668,7 @@
 
 TAO_NAMESPACE_TYPE (CORBA::TypeCode_ptr)
 TAO_NAMESPACE_BEGIN (IR)
-TAO_NAMESPACE_DEFINE (::CORBA::TypeCode_ptr, _tc_ProvidesDefSeq, &_tc_TAO_tc_IR_ProvidesDefSeq)
+TAO_NAMESPACE_DEFINE (CORBA::TypeCode_ptr, _tc_ProvidesDefSeq, &_tc_TAO_tc_IR_ProvidesDefSeq)
 TAO_NAMESPACE_END
 
 
@@ -1035,7 +860,7 @@
 
 TAO_NAMESPACE_TYPE (CORBA::TypeCode_ptr)
 TAO_NAMESPACE_BEGIN (IR)
-TAO_NAMESPACE_DEFINE (::CORBA::TypeCode_ptr, _tc_UsesDefSeq, &_tc_TAO_tc_IR_UsesDefSeq)
+TAO_NAMESPACE_DEFINE (CORBA::TypeCode_ptr, _tc_UsesDefSeq, &_tc_TAO_tc_IR_UsesDefSeq)
 TAO_NAMESPACE_END
 
 
@@ -1227,7 +1052,7 @@
 
 TAO_NAMESPACE_TYPE (CORBA::TypeCode_ptr)
 TAO_NAMESPACE_BEGIN (IR)
-TAO_NAMESPACE_DEFINE (::CORBA::TypeCode_ptr, _tc_HomeDefSeq, &_tc_TAO_tc_IR_HomeDefSeq)
+TAO_NAMESPACE_DEFINE (CORBA::TypeCode_ptr, _tc_HomeDefSeq, &_tc_TAO_tc_IR_HomeDefSeq)
 TAO_NAMESPACE_END
 
 
@@ -1420,7 +1245,7 @@
 
 TAO_NAMESPACE_TYPE (CORBA::TypeCode_ptr)
 TAO_NAMESPACE_BEGIN (IR)
-TAO_NAMESPACE_DEFINE (::CORBA::TypeCode_ptr, _tc_EmitsDefSeq, &_tc_TAO_tc_IR_EmitsDefSeq)
+TAO_NAMESPACE_DEFINE (CORBA::TypeCode_ptr, _tc_EmitsDefSeq, &_tc_TAO_tc_IR_EmitsDefSeq)
 TAO_NAMESPACE_END
 
 
@@ -1617,7 +1442,7 @@
 
 TAO_NAMESPACE_TYPE (CORBA::TypeCode_ptr)
 TAO_NAMESPACE_BEGIN (IR)
-TAO_NAMESPACE_DEFINE (::CORBA::TypeCode_ptr, _tc_PublishesDefSeq, &_tc_TAO_tc_IR_PublishesDefSeq)
+TAO_NAMESPACE_DEFINE (CORBA::TypeCode_ptr, _tc_PublishesDefSeq, &_tc_TAO_tc_IR_PublishesDefSeq)
 TAO_NAMESPACE_END
 
 
@@ -1813,7 +1638,7 @@
 
 TAO_NAMESPACE_TYPE (CORBA::TypeCode_ptr)
 TAO_NAMESPACE_BEGIN (IR)
-TAO_NAMESPACE_DEFINE (::CORBA::TypeCode_ptr, _tc_ConsumesDefSeq, &_tc_TAO_tc_IR_ConsumesDefSeq)
+TAO_NAMESPACE_DEFINE (CORBA::TypeCode_ptr, _tc_ConsumesDefSeq, &_tc_TAO_tc_IR_ConsumesDefSeq)
 TAO_NAMESPACE_END
 
 
@@ -2009,7 +1834,7 @@
 
 TAO_NAMESPACE_TYPE (CORBA::TypeCode_ptr)
 TAO_NAMESPACE_BEGIN (IR)
-TAO_NAMESPACE_DEFINE (::CORBA::TypeCode_ptr, _tc_FactoryDefSeq, &_tc_TAO_tc_IR_FactoryDefSeq)
+TAO_NAMESPACE_DEFINE (CORBA::TypeCode_ptr, _tc_FactoryDefSeq, &_tc_TAO_tc_IR_FactoryDefSeq)
 TAO_NAMESPACE_END
 
 
@@ -2204,15 +2029,9 @@
 
 TAO_NAMESPACE_TYPE (CORBA::TypeCode_ptr)
 TAO_NAMESPACE_BEGIN (IR)
-TAO_NAMESPACE_DEFINE (::CORBA::TypeCode_ptr, _tc_FinderDefSeq, &_tc_TAO_tc_IR_FinderDefSeq)
+TAO_NAMESPACE_DEFINE (CORBA::TypeCode_ptr, _tc_FinderDefSeq, &_tc_TAO_tc_IR_FinderDefSeq)
 TAO_NAMESPACE_END
 
-
-// TAO_IDL - Generated from 
-// be/be_visitor_interface/interface_cs.cpp:67
-
-int IR::ComponentRepository::_tao_class_id = 0;
-
 IR::ComponentRepository_ptr
 tao_IR_ComponentRepository_duplicate (
     IR::ComponentRepository_ptr p
@@ -2256,10 +2075,10 @@
   return *tmp;
 }
 
+int IR::ComponentRepository::_tao_class_id = 0;
+
 // *************************************************************
-// IR::ComponentRepository_var
-// TAO_IDL - Generated from
-// be/be_interface.cpp:654
+// Operations for class IR::ComponentRepository_var
 // *************************************************************
 
 IR::ComponentRepository_var::ComponentRepository_var (void) // default constructor
@@ -2382,9 +2201,7 @@
 }
 
 // *************************************************************
-// IR::ComponentRepository_out
-// TAO_IDL - Generated from
-// be/be_interface.cpp:932
+// Operations for class IR::ComponentRepository_out
 // *************************************************************
 
 IR::ComponentRepository_out::ComponentRepository_out (ComponentRepository_ptr &p)
@@ -2454,16 +2271,23 @@
       const char * name,
       const char * version,
       IR::ComponentDef_ptr base_component,
-      const CORBA::InterfaceDefSeq & supports_interfaces ACE_ENV_ARG_DECL_WITH_DEFAULTS
-    );
+      const CORBA_InterfaceDefSeq & supports_interfaces
+      ACE_ENV_ARG_DECL_WITH_DEFAULTS);
+
+
+  virtual Dynamic::ParameterList * arguments (
+      ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)
 
-  virtual Dynamic::ParameterList * arguments (ACE_ENV_SINGLE_ARG_DECL)
     ACE_THROW_SPEC ((CORBA::SystemException));
   
-  virtual Dynamic::ExceptionList * exceptions (ACE_ENV_SINGLE_ARG_DECL)
+  virtual Dynamic::ExceptionList * exceptions (
+      ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)
+
     ACE_THROW_SPEC ((CORBA::SystemException));
   
-  virtual CORBA::Any * result (ACE_ENV_SINGLE_ARG_DECL)
+  virtual CORBA::Any * result (
+      ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)
+
     ACE_THROW_SPEC ((CORBA::SystemException));
 
   void result (IR::ComponentDef_ptr result);
@@ -2476,7 +2300,7 @@
   const char * name_;
   const char * version_;
   IR::ComponentDef_ptr base_component_;
-  const CORBA::InterfaceDefSeq & supports_interfaces_;
+  const CORBA_InterfaceDefSeq & supports_interfaces_;
   IR::ComponentDef_ptr _result;
 };
 
@@ -2487,7 +2311,8 @@
     const char * name,
     const char * version,
     IR::ComponentDef_ptr base_component,
-    const CORBA::InterfaceDefSeq & supports_interfaces ACE_ENV_ARG_DECL_NOT_USED    
+    const CORBA_InterfaceDefSeq & supports_interfaces
+    ACE_ENV_ARG_DECL_NOT_USED
   )
   : TAO_ClientRequestInfo_i (_tao_invocation, _tao_target),
     id_ (id),
@@ -2542,6 +2367,7 @@
   return exception_list;
 }
 
+
 CORBA::Any * 
 TAO_ClientRequestInfo_IR_ComponentRepository_create_component::result (ACE_ENV_SINGLE_ARG_DECL)
   ACE_THROW_SPEC ((CORBA::SystemException))
@@ -2559,7 +2385,7 @@
 }
 
 void 
-TAO_ClientRequestInfo_IR_ComponentRepository_create_component::result (::IR::ComponentDef_ptr result)
+TAO_ClientRequestInfo_IR_ComponentRepository_create_component::result (IR::ComponentDef_ptr result)
 {
   // update the result 
   this->_result = result;
@@ -2576,16 +2402,23 @@
       const char * version,
       IR::HomeDef_ptr base_home,
       IR::ComponentDef_ptr managed_component,
-      CORBA::ValueDef_ptr primary_key ACE_ENV_ARG_DECL_WITH_DEFAULTS
-    );
+      CORBA_ValueDef_ptr primary_key
+      ACE_ENV_ARG_DECL_WITH_DEFAULTS);
+
+
+  virtual Dynamic::ParameterList * arguments (
+      ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)
 
-  virtual Dynamic::ParameterList * arguments (ACE_ENV_SINGLE_ARG_DECL)
     ACE_THROW_SPEC ((CORBA::SystemException));
   
-  virtual Dynamic::ExceptionList * exceptions (ACE_ENV_SINGLE_ARG_DECL)
+  virtual Dynamic::ExceptionList * exceptions (
+      ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)
+
     ACE_THROW_SPEC ((CORBA::SystemException));
   
-  virtual CORBA::Any * result (ACE_ENV_SINGLE_ARG_DECL)
+  virtual CORBA::Any * result (
+      ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)
+
     ACE_THROW_SPEC ((CORBA::SystemException));
 
   void result (IR::HomeDef_ptr result);
@@ -2599,7 +2432,7 @@
   const char * version_;
   IR::HomeDef_ptr base_home_;
   IR::ComponentDef_ptr managed_component_;
-  CORBA::ValueDef_ptr primary_key_;
+  CORBA_ValueDef_ptr primary_key_;
   IR::HomeDef_ptr _result;
 };
 
@@ -2611,7 +2444,8 @@
     const char * version,
     IR::HomeDef_ptr base_home,
     IR::ComponentDef_ptr managed_component,
-    CORBA::ValueDef_ptr primary_key ACE_ENV_ARG_DECL_NOT_USED    
+    CORBA_ValueDef_ptr primary_key
+    ACE_ENV_ARG_DECL_NOT_USED
   )
   : TAO_ClientRequestInfo_i (_tao_invocation, _tao_target),
     id_ (id),
@@ -2670,6 +2504,7 @@
   return exception_list;
 }
 
+
 CORBA::Any * 
 TAO_ClientRequestInfo_IR_ComponentRepository_create_home::result (ACE_ENV_SINGLE_ARG_DECL)
   ACE_THROW_SPEC ((CORBA::SystemException))
@@ -2687,7 +2522,7 @@
 }
 
 void 
-TAO_ClientRequestInfo_IR_ComponentRepository_create_home::result (::IR::HomeDef_ptr result)
+TAO_ClientRequestInfo_IR_ComponentRepository_create_home::result (IR::HomeDef_ptr result)
 {
   // update the result 
   this->_result = result;
@@ -2707,13 +2542,13 @@
 
 // Remote Implementation of the IDL interface methods
 
-::IR::ComponentDef_ptr IR::_TAO_ComponentRepository_Remote_Proxy_Impl::create_component (
+IR::ComponentDef_ptr IR::_TAO_ComponentRepository_Remote_Proxy_Impl::create_component (
     CORBA_Object *_collocated_tao_target_,
     const char * id,
     const char * name,
     const char * version,
     IR::ComponentDef_ptr base_component,
-    const CORBA::InterfaceDefSeq & supports_interfaces
+    const CORBA_InterfaceDefSeq & supports_interfaces
     ACE_ENV_ARG_DECL
   )
   ACE_THROW_SPEC ((
@@ -2721,20 +2556,20 @@
   ))
 {
   
-  IR::ComponentDef_var _tao_retval (IR::ComponentDef::_nil ());
-
+  IR::ComponentDef_ptr _tao_retval = IR::ComponentDef::_nil ();
+  IR::ComponentDef_var _tao_safe_retval (_tao_retval);
 
   
   TAO_Stub *istub = _collocated_tao_target_->_stubobj ();
   if (istub == 0)
-    ACE_THROW_RETURN (CORBA::INTERNAL (),_tao_retval._retn ());
+    ACE_THROW_RETURN (CORBA::INTERNAL (), 0);
 
   
   TAO_GIOP_Twoway_Invocation _tao_call (
       istub,
       "create_component",
       16,
-      5,
+      1,
       istub->orb_core ()
     );
   
@@ -2754,29 +2589,30 @@
       _invoke_status = TAO_INVOKE_EXCEPTION;
       
 #if TAO_HAS_INTERCEPTORS == 1
-      TAO_ClientRequestInfo_IR_ComponentRepository_create_component _tao_ri (
+      TAO_ClientRequestInfo_IR_ComponentRepository_create_component ri (
         &_tao_call,
         _collocated_tao_target_,
         id,
         name,
         version,
         base_component,
-        supports_interfaces ACE_ENV_ARG_PARAMETER
+        supports_interfaces
+        ACE_ENV_ARG_PARAMETER
       );
-            ACE_CHECK_RETURN (_tao_retval._retn ());
+      ACE_CHECK_RETURN (0);
 
 #endif /* TAO_HAS_INTERCEPTORS */
       
       
       CORBA::Short _tao_response_flag = TAO_TWOWAY_RESPONSE_FLAG;
-      TAO_INTERCEPTOR (_tao_ri.response_expected (1));
+      TAO_INTERCEPTOR (ri.response_expected (1));
       
 #if TAO_HAS_INTERCEPTORS == 1
       
       ACE_TRY
         {
           _tao_vfr.send_request (
-            &_tao_ri
+            &ri
             ACE_ENV_ARG_PARAMETER
           );
           ACE_TRY_CHECK;
@@ -2790,13 +2626,13 @@
 #endif /* TAO_HAS_INTERCEPTORS */
           
           _tao_call.start (ACE_ENV_SINGLE_ARG_PARAMETER);
-                    TAO_INTERCEPTOR_CHECK_RETURN (_tao_retval._retn ());
+          TAO_INTERCEPTOR_CHECK_RETURN (0);
 
           _tao_call.prepare_header (
               ACE_static_cast (CORBA::Octet, _tao_response_flag)
               ACE_ENV_ARG_PARAMETER
             );
-                    TAO_INTERCEPTOR_CHECK_RETURN (_tao_retval._retn ());
+          TAO_INTERCEPTOR_CHECK_RETURN (0);
 
           TAO_OutputCDR &_tao_out = _tao_call.out_stream ();
           if (!(
@@ -2813,7 +2649,7 @@
             
           _invoke_status =
             _tao_call.invoke (0, 0 ACE_ENV_ARG_PARAMETER);
-                    TAO_INTERCEPTOR_CHECK_RETURN (_tao_retval._retn ());
+          TAO_INTERCEPTOR_CHECK_RETURN (0);
 
           if (_invoke_status == TAO_INVOKE_EXCEPTION)
             {
@@ -2826,9 +2662,9 @@
           else if (_invoke_status == TAO_INVOKE_RESTART)
             {
               TAO_INTERCEPTOR (
-                _tao_ri.reply_status (_invoke_status);
+                ri.reply_status (_invoke_status);
                 _tao_vfr.receive_other (
-                  &_tao_ri
+                  &ri
                   ACE_ENV_ARG_PARAMETER
                 );
                 ACE_TRY_CHECK;
@@ -2839,7 +2675,7 @@
           
           TAO_InputCDR &_tao_in = _tao_call.inp_stream ();
           if (!(
-                            (_tao_in >> _tao_retval.inout ())
+                            (_tao_in >> _tao_safe_retval.inout ())
               ))
             {
               TAO_INTERCEPTOR_THROW_RETURN (
@@ -2850,13 +2686,13 @@
             }
           
 #if TAO_HAS_INTERCEPTORS == 1
-          ::IR::ComponentDef_ptr _tao_retval_info = _tao_retval._retn ();
-          _tao_ri.result (_tao_retval_info);
-          _tao_retval = _tao_retval_info;
+          IR::ComponentDef_ptr _tao_retval_info = _tao_safe_retval._retn ();
+          ri.result (_tao_retval_info);
+          _tao_safe_retval = _tao_retval_info;
           
-          _tao_ri.reply_status (_invoke_status);
+          ri.reply_status (_invoke_status);
           _tao_vfr.receive_reply (
-            &_tao_ri
+            &ri
             ACE_ENV_ARG_PARAMETER
           );
           ACE_TRY_CHECK;
@@ -2864,15 +2700,15 @@
       }
     ACE_CATCHANY
       {
-        _tao_ri.exception (&ACE_ANY_EXCEPTION);
+        ri.exception (&ACE_ANY_EXCEPTION);
         _tao_vfr.receive_exception (
-          &_tao_ri
+          &ri
           ACE_ENV_ARG_PARAMETER
         );
         ACE_TRY_CHECK;
         
         PortableInterceptor::ReplyStatus _tao_status =
-          _tao_ri.reply_status (ACE_ENV_SINGLE_ARG_PARAMETER);
+          ri.reply_status (ACE_ENV_SINGLE_ARG_PARAMETER);
         ACE_TRY_CHECK;
         
         if (_tao_status == PortableInterceptor::SYSTEM_EXCEPTION
@@ -2880,11 +2716,11 @@
           ACE_RE_THROW;
       }
     ACE_ENDTRY;
-        ACE_CHECK_RETURN (_tao_retval._retn ());
+    ACE_CHECK_RETURN (0);
 
     PortableInterceptor::ReplyStatus _tao_status =
-      _tao_ri.reply_status (ACE_ENV_SINGLE_ARG_PARAMETER);
-        ACE_CHECK_RETURN (_tao_retval._retn ());
+      ri.reply_status (ACE_ENV_SINGLE_ARG_PARAMETER);
+    ACE_CHECK_RETURN (0);
 
     if (_tao_status == PortableInterceptor::LOCATION_FORWARD
         || _tao_status == PortableInterceptor::TRANSPORT_RETRY)
@@ -2894,17 +2730,17 @@
     
     break;
   }
-return _tao_retval._retn ();
+return _tao_safe_retval._retn ();
 }
 
-::IR::HomeDef_ptr IR::_TAO_ComponentRepository_Remote_Proxy_Impl::create_home (
+IR::HomeDef_ptr IR::_TAO_ComponentRepository_Remote_Proxy_Impl::create_home (
     CORBA_Object *_collocated_tao_target_,
     const char * id,
     const char * name,
     const char * version,
     IR::HomeDef_ptr base_home,
     IR::ComponentDef_ptr managed_component,
-    CORBA::ValueDef_ptr primary_key
+    CORBA_ValueDef_ptr primary_key
     ACE_ENV_ARG_DECL
   )
   ACE_THROW_SPEC ((
@@ -2912,20 +2748,20 @@
   ))
 {
   
-  IR::HomeDef_var _tao_retval (IR::HomeDef::_nil ());
-
+  IR::HomeDef_ptr _tao_retval = IR::HomeDef::_nil ();
+  IR::HomeDef_var _tao_safe_retval (_tao_retval);
 
   
   TAO_Stub *istub = _collocated_tao_target_->_stubobj ();
   if (istub == 0)
-    ACE_THROW_RETURN (CORBA::INTERNAL (),_tao_retval._retn ());
+    ACE_THROW_RETURN (CORBA::INTERNAL (), 0);
 
   
   TAO_GIOP_Twoway_Invocation _tao_call (
       istub,
       "create_home",
       11,
-      6,
+      1,
       istub->orb_core ()
     );
   
@@ -2945,7 +2781,7 @@
       _invoke_status = TAO_INVOKE_EXCEPTION;
       
 #if TAO_HAS_INTERCEPTORS == 1
-      TAO_ClientRequestInfo_IR_ComponentRepository_create_home _tao_ri (
+      TAO_ClientRequestInfo_IR_ComponentRepository_create_home ri (
         &_tao_call,
         _collocated_tao_target_,
         id,
@@ -2953,22 +2789,23 @@
         version,
         base_home,
         managed_component,
-        primary_key ACE_ENV_ARG_PARAMETER
+        primary_key
+        ACE_ENV_ARG_PARAMETER
       );
-            ACE_CHECK_RETURN (_tao_retval._retn ());
+      ACE_CHECK_RETURN (0);
 
 #endif /* TAO_HAS_INTERCEPTORS */
       
       
       CORBA::Short _tao_response_flag = TAO_TWOWAY_RESPONSE_FLAG;
-      TAO_INTERCEPTOR (_tao_ri.response_expected (1));
+      TAO_INTERCEPTOR (ri.response_expected (1));
       
 #if TAO_HAS_INTERCEPTORS == 1
       
       ACE_TRY
         {
           _tao_vfr.send_request (
-            &_tao_ri
+            &ri
             ACE_ENV_ARG_PARAMETER
           );
           ACE_TRY_CHECK;
@@ -2982,13 +2819,13 @@
 #endif /* TAO_HAS_INTERCEPTORS */
           
           _tao_call.start (ACE_ENV_SINGLE_ARG_PARAMETER);
-                    TAO_INTERCEPTOR_CHECK_RETURN (_tao_retval._retn ());
+          TAO_INTERCEPTOR_CHECK_RETURN (0);
 
           _tao_call.prepare_header (
               ACE_static_cast (CORBA::Octet, _tao_response_flag)
               ACE_ENV_ARG_PARAMETER
             );
-                    TAO_INTERCEPTOR_CHECK_RETURN (_tao_retval._retn ());
+          TAO_INTERCEPTOR_CHECK_RETURN (0);
 
           TAO_OutputCDR &_tao_out = _tao_call.out_stream ();
           if (!(
@@ -3006,7 +2843,7 @@
             
           _invoke_status =
             _tao_call.invoke (0, 0 ACE_ENV_ARG_PARAMETER);
-                    TAO_INTERCEPTOR_CHECK_RETURN (_tao_retval._retn ());
+          TAO_INTERCEPTOR_CHECK_RETURN (0);
 
           if (_invoke_status == TAO_INVOKE_EXCEPTION)
             {
@@ -3019,9 +2856,9 @@
           else if (_invoke_status == TAO_INVOKE_RESTART)
             {
               TAO_INTERCEPTOR (
-                _tao_ri.reply_status (_invoke_status);
+                ri.reply_status (_invoke_status);
                 _tao_vfr.receive_other (
-                  &_tao_ri
+                  &ri
                   ACE_ENV_ARG_PARAMETER
                 );
                 ACE_TRY_CHECK;
@@ -3032,7 +2869,7 @@
           
           TAO_InputCDR &_tao_in = _tao_call.inp_stream ();
           if (!(
-                            (_tao_in >> _tao_retval.inout ())
+                            (_tao_in >> _tao_safe_retval.inout ())
               ))
             {
               TAO_INTERCEPTOR_THROW_RETURN (
@@ -3043,13 +2880,13 @@
             }
           
 #if TAO_HAS_INTERCEPTORS == 1
-          ::IR::HomeDef_ptr _tao_retval_info = _tao_retval._retn ();
-          _tao_ri.result (_tao_retval_info);
-          _tao_retval = _tao_retval_info;
+          IR::HomeDef_ptr _tao_retval_info = _tao_safe_retval._retn ();
+          ri.result (_tao_retval_info);
+          _tao_safe_retval = _tao_retval_info;
           
-          _tao_ri.reply_status (_invoke_status);
+          ri.reply_status (_invoke_status);
           _tao_vfr.receive_reply (
-            &_tao_ri
+            &ri
             ACE_ENV_ARG_PARAMETER
           );
           ACE_TRY_CHECK;
@@ -3057,15 +2894,15 @@
       }
     ACE_CATCHANY
       {
-        _tao_ri.exception (&ACE_ANY_EXCEPTION);
+        ri.exception (&ACE_ANY_EXCEPTION);
         _tao_vfr.receive_exception (
-          &_tao_ri
+          &ri
           ACE_ENV_ARG_PARAMETER
         );
         ACE_TRY_CHECK;
         
         PortableInterceptor::ReplyStatus _tao_status =
-          _tao_ri.reply_status (ACE_ENV_SINGLE_ARG_PARAMETER);
+          ri.reply_status (ACE_ENV_SINGLE_ARG_PARAMETER);
         ACE_TRY_CHECK;
         
         if (_tao_status == PortableInterceptor::SYSTEM_EXCEPTION
@@ -3073,11 +2910,11 @@
           ACE_RE_THROW;
       }
     ACE_ENDTRY;
-        ACE_CHECK_RETURN (_tao_retval._retn ());
+    ACE_CHECK_RETURN (0);
 
     PortableInterceptor::ReplyStatus _tao_status =
-      _tao_ri.reply_status (ACE_ENV_SINGLE_ARG_PARAMETER);
-        ACE_CHECK_RETURN (_tao_retval._retn ());
+      ri.reply_status (ACE_ENV_SINGLE_ARG_PARAMETER);
+    ACE_CHECK_RETURN (0);
 
     if (_tao_status == PortableInterceptor::LOCATION_FORWARD
         || _tao_status == PortableInterceptor::TRANSPORT_RETRY)
@@ -3087,7 +2924,7 @@
     
     break;
   }
-return _tao_retval._retn ();
+return _tao_safe_retval._retn ();
 }
 
 
@@ -3143,14 +2980,13 @@
 ///////////////////////////////////////////////////////////////////////
 
 
-// TAO_IDL - Generated from 
-// be/be_visitor_interface/interface_cs.cpp:198
-
+// default constructor
 IR::ComponentRepository::ComponentRepository (int collocated)
 {
   this->IR_ComponentRepository_setup_collocation (collocated);
 }
 
+// destructor
 IR::ComponentRepository::~ComponentRepository (void)
 {}
 
@@ -3190,8 +3026,7 @@
   return ComponentRepository::_unchecked_narrow (obj ACE_ENV_ARG_PARAMETER);
 }
 
-IR::ComponentRepository_ptr 
-IR::ComponentRepository::_unchecked_narrow (
+IR::ComponentRepository_ptr IR::ComponentRepository::_unchecked_narrow (
     CORBA::Object_ptr obj
     ACE_ENV_ARG_DECL_NOT_USED
   )
@@ -3208,8 +3043,7 @@
       if (
           !CORBA::is_nil (stub->servant_orb_var ().ptr ()) &&
           stub->servant_orb_var ()->orb_core ()->optimize_collocation_objects () &&
-          obj->_is_collocated () &&
-          IR__TAO_ComponentRepository_Proxy_Broker_Factory_function_pointer != 0
+          obj->_is_collocated () &&IR__TAO_ComponentRepository_Proxy_Broker_Factory_function_pointer != 0
         )
         {
           ACE_NEW_RETURN (
@@ -3217,25 +3051,12 @@
               ::IR::ComponentRepository (
                   stub,
                   1,
-                  obj->_servant ()
-                ),
-              ComponentRepository::_nil ()
-            );
-        }
+            obj->_servant ()),
       
-      if (CORBA::is_nil (default_proxy))
-        {
-          ACE_NEW_RETURN (
-              default_proxy,
-              ::IR::ComponentRepository (
-                  stub,
-                  0,
-                  obj->_servant ()
-                ),
-              ComponentRepository::_nil ()
-            );
+          ComponentRepository::_nil ());
         }
-      
+      if (CORBA::is_nil (default_proxy))
+        ACE_NEW_RETURN (default_proxy, ::IR::ComponentRepository (stub, 0, obj->_servant ()), ComponentRepository::_nil ());
       return default_proxy;
     }
   else 
@@ -3284,37 +3105,37 @@
     retv = ACE_reinterpret_cast (void*, this);
   else if (type == ACE_reinterpret_cast
     (ptr_arith_t,
-      &::CORBA::Repository::_tao_class_id))
+      &CORBA_Repository::_tao_class_id))
     retv = ACE_reinterpret_cast
       (
         void *,
         ACE_static_cast
           (
-            CORBA::Repository_ptr,
+            CORBA_Repository_ptr,
             this
           )
       );
   else if (type == ACE_reinterpret_cast
     (ptr_arith_t,
-      &::CORBA::Container::_tao_class_id))
+      &CORBA_Container::_tao_class_id))
     retv = ACE_reinterpret_cast
       (
         void *,
         ACE_static_cast
           (
-            CORBA::Container_ptr,
+            CORBA_Container_ptr,
             this
           )
       );
   else if (type == ACE_reinterpret_cast
     (ptr_arith_t,
-      &::CORBA::IRObject::_tao_class_id))
+      &CORBA_IRObject::_tao_class_id))
     retv = ACE_reinterpret_cast
       (
         void *,
         ACE_static_cast
           (
-            CORBA::IRObject_ptr,
+            CORBA_IRObject_ptr,
             this
           )
       );
@@ -3332,12 +3153,12 @@
   return "IDL:omg.org/IR/ComponentRepository:1.0";
 }
 
-::IR::ComponentDef_ptr IR::ComponentRepository::create_component (
+IR::ComponentDef_ptr IR::ComponentRepository::create_component (
     const char * id,
     const char * name,
     const char * version,
     IR::ComponentDef_ptr base_component,
-    const CORBA::InterfaceDefSeq & supports_interfaces
+    const CORBA_InterfaceDefSeq & supports_interfaces
     ACE_ENV_ARG_DECL
   )
   ACE_THROW_SPEC ((
@@ -3354,17 +3175,18 @@
       name,
       version,
       base_component,
-      supports_interfaces ACE_ENV_ARG_PARAMETER
+      supports_interfaces
+      ACE_ENV_ARG_PARAMETER
     );
 }
 
-::IR::HomeDef_ptr IR::ComponentRepository::create_home (
+IR::HomeDef_ptr IR::ComponentRepository::create_home (
     const char * id,
     const char * name,
     const char * version,
     IR::HomeDef_ptr base_home,
     IR::ComponentDef_ptr managed_component,
-    CORBA::ValueDef_ptr primary_key
+    CORBA_ValueDef_ptr primary_key
     ACE_ENV_ARG_DECL
   )
   ACE_THROW_SPEC ((
@@ -3382,7 +3204,8 @@
       version,
       base_home,
       managed_component,
-      primary_key ACE_ENV_ARG_PARAMETER
+      primary_key
+      ACE_ENV_ARG_PARAMETER
     );
 }
 
@@ -3418,15 +3241,9 @@
 
 TAO_NAMESPACE_TYPE (CORBA::TypeCode_ptr)
 TAO_NAMESPACE_BEGIN (IR)
-TAO_NAMESPACE_DEFINE (::CORBA::TypeCode_ptr, _tc_ComponentRepository, &_tc_TAO_tc_IR_ComponentRepository)
+TAO_NAMESPACE_DEFINE (CORBA::TypeCode_ptr, _tc_ComponentRepository, &_tc_TAO_tc_IR_ComponentRepository)
 TAO_NAMESPACE_END
 
-
-// TAO_IDL - Generated from 
-// be/be_visitor_interface/interface_cs.cpp:67
-
-int IR::ProvidesDef::_tao_class_id = 0;
-
 IR::ProvidesDef_ptr
 tao_IR_ProvidesDef_duplicate (
     IR::ProvidesDef_ptr p
@@ -3470,10 +3287,10 @@
   return *tmp;
 }
 
+int IR::ProvidesDef::_tao_class_id = 0;
+
 // *************************************************************
-// IR::ProvidesDef_var
-// TAO_IDL - Generated from
-// be/be_interface.cpp:654
+// Operations for class IR::ProvidesDef_var
 // *************************************************************
 
 IR::ProvidesDef_var::ProvidesDef_var (void) // default constructor
@@ -3596,9 +3413,7 @@
 }
 
 // *************************************************************
-// IR::ProvidesDef_out
-// TAO_IDL - Generated from
-// be/be_interface.cpp:932
+// Operations for class IR::ProvidesDef_out
 // *************************************************************
 
 IR::ProvidesDef_out::ProvidesDef_out (ProvidesDef_ptr &p)
@@ -3663,30 +3478,38 @@
 public:
   TAO_ClientRequestInfo_IR_ProvidesDef_interface_type_get (
       TAO_GIOP_Invocation *_tao_invocation,
-      CORBA::Object_ptr _tao_target ACE_ENV_ARG_DECL_WITH_DEFAULTS
-    );
+      CORBA::Object_ptr _tao_target
+      ACE_ENV_ARG_DECL_WITH_DEFAULTS);
+
+
+  virtual Dynamic::ParameterList * arguments (
+      ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)
 
-  virtual Dynamic::ParameterList * arguments (ACE_ENV_SINGLE_ARG_DECL)
     ACE_THROW_SPEC ((CORBA::SystemException));
   
-  virtual Dynamic::ExceptionList * exceptions (ACE_ENV_SINGLE_ARG_DECL)
+  virtual Dynamic::ExceptionList * exceptions (
+      ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)
+
     ACE_THROW_SPEC ((CORBA::SystemException));
   
-  virtual CORBA::Any * result (ACE_ENV_SINGLE_ARG_DECL)
+  virtual CORBA::Any * result (
+      ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)
+
     ACE_THROW_SPEC ((CORBA::SystemException));
 
-  void result (CORBA::InterfaceDef_ptr result);
+  void result (CORBA_InterfaceDef_ptr result);
 
 private:
   TAO_ClientRequestInfo_IR_ProvidesDef_interface_type_get (const TAO_ClientRequestInfo_IR_ProvidesDef_interface_type_get &);
   void operator= (const TAO_ClientRequestInfo_IR_ProvidesDef_interface_type_get &);
 
-  CORBA::InterfaceDef_ptr _result;
+  CORBA_InterfaceDef_ptr _result;
 };
 
 TAO_ClientRequestInfo_IR_ProvidesDef_interface_type_get::TAO_ClientRequestInfo_IR_ProvidesDef_interface_type_get (
     TAO_GIOP_Invocation *_tao_invocation,
-    CORBA::Object_ptr _tao_target ACE_ENV_ARG_DECL_NOT_USED    
+    CORBA::Object_ptr _tao_target
+    ACE_ENV_ARG_DECL_NOT_USED
   )
   : TAO_ClientRequestInfo_i (_tao_invocation, _tao_target)
 {}
@@ -3701,7 +3524,6 @@
   ACE_CHECK_RETURN (0);
   
   return parameter_list;
-
 }
 
 Dynamic::ExceptionList *
@@ -3716,6 +3538,7 @@
   return exception_list;
 }
 
+
 CORBA::Any * 
 TAO_ClientRequestInfo_IR_ProvidesDef_interface_type_get::result (ACE_ENV_SINGLE_ARG_DECL)
   ACE_THROW_SPEC ((CORBA::SystemException))
@@ -3733,7 +3556,7 @@
 }
 
 void 
-TAO_ClientRequestInfo_IR_ProvidesDef_interface_type_get::result (::CORBA::InterfaceDef_ptr result)
+TAO_ClientRequestInfo_IR_ProvidesDef_interface_type_get::result (CORBA_InterfaceDef_ptr result)
 {
   // update the result 
   this->_result = result;
@@ -3753,7 +3576,7 @@
 
 // Remote Implementation of the IDL interface methods
 
-::CORBA::InterfaceDef_ptr IR::_TAO_ProvidesDef_Remote_Proxy_Impl::interface_type (
+CORBA_InterfaceDef_ptr IR::_TAO_ProvidesDef_Remote_Proxy_Impl::interface_type (
     CORBA_Object *_collocated_tao_target_
     ACE_ENV_ARG_DECL
   )
@@ -3762,13 +3585,13 @@
   ))
 {
   
-  CORBA::InterfaceDef_var _tao_retval (CORBA::InterfaceDef::_nil ());
-
+  CORBA_InterfaceDef_ptr _tao_retval = CORBA_InterfaceDef::_nil ();
+  CORBA_InterfaceDef_var _tao_safe_retval (_tao_retval);
 
   
   TAO_Stub *istub = _collocated_tao_target_->_stubobj ();
   if (istub == 0)
-    ACE_THROW_RETURN (CORBA::INTERNAL (),_tao_retval._retn ());
+    ACE_THROW_RETURN (CORBA::INTERNAL (), 0);
 
   
   TAO_GIOP_Twoway_Invocation _tao_call (
@@ -3795,24 +3618,25 @@
       _invoke_status = TAO_INVOKE_EXCEPTION;
       
 #if TAO_HAS_INTERCEPTORS == 1
-      TAO_ClientRequestInfo_IR_ProvidesDef_interface_type_get _tao_ri (
+      TAO_ClientRequestInfo_IR_ProvidesDef_interface_type_get ri (
         &_tao_call,
-        _collocated_tao_target_ ACE_ENV_ARG_PARAMETER
+        _collocated_tao_target_
+        ACE_ENV_ARG_PARAMETER
       );
-            ACE_CHECK_RETURN (_tao_retval._retn ());
+      ACE_CHECK_RETURN (0);
 
 #endif /* TAO_HAS_INTERCEPTORS */
       
       
       CORBA::Short _tao_response_flag = TAO_TWOWAY_RESPONSE_FLAG;
-      TAO_INTERCEPTOR (_tao_ri.response_expected (1));
+      TAO_INTERCEPTOR (ri.response_expected (1));
       
 #if TAO_HAS_INTERCEPTORS == 1
       
       ACE_TRY
         {
           _tao_vfr.send_request (
-            &_tao_ri
+            &ri
             ACE_ENV_ARG_PARAMETER
           );
           ACE_TRY_CHECK;
@@ -3826,17 +3650,17 @@
 #endif /* TAO_HAS_INTERCEPTORS */
           
           _tao_call.start (ACE_ENV_SINGLE_ARG_PARAMETER);
-                    TAO_INTERCEPTOR_CHECK_RETURN (_tao_retval._retn ());
+          TAO_INTERCEPTOR_CHECK_RETURN (0);
 
           _tao_call.prepare_header (
               ACE_static_cast (CORBA::Octet, _tao_response_flag)
               ACE_ENV_ARG_PARAMETER
             );
-                    TAO_INTERCEPTOR_CHECK_RETURN (_tao_retval._retn ());
+          TAO_INTERCEPTOR_CHECK_RETURN (0);
 
           _invoke_status =
             _tao_call.invoke (0, 0 ACE_ENV_ARG_PARAMETER);
-                    TAO_INTERCEPTOR_CHECK_RETURN (_tao_retval._retn ());
+          TAO_INTERCEPTOR_CHECK_RETURN (0);
 
           if (_invoke_status == TAO_INVOKE_EXCEPTION)
             {
@@ -3849,9 +3673,9 @@
           else if (_invoke_status == TAO_INVOKE_RESTART)
             {
               TAO_INTERCEPTOR (
-                _tao_ri.reply_status (_invoke_status);
+                ri.reply_status (_invoke_status);
                 _tao_vfr.receive_other (
-                  &_tao_ri
+                  &ri
                   ACE_ENV_ARG_PARAMETER
                 );
                 ACE_TRY_CHECK;
@@ -3862,7 +3686,7 @@
           
           TAO_InputCDR &_tao_in = _tao_call.inp_stream ();
           if (!(
-                            (_tao_in >> _tao_retval.inout ())
+                            (_tao_in >> _tao_safe_retval.inout ())
               ))
             {
               TAO_INTERCEPTOR_THROW_RETURN (
@@ -3873,13 +3697,13 @@
             }
           
 #if TAO_HAS_INTERCEPTORS == 1
-          ::CORBA::InterfaceDef_ptr _tao_retval_info = _tao_retval._retn ();
-          _tao_ri.result (_tao_retval_info);
-          _tao_retval = _tao_retval_info;
+          CORBA_InterfaceDef_ptr _tao_retval_info = _tao_safe_retval._retn ();
+          ri.result (_tao_retval_info);
+          _tao_safe_retval = _tao_retval_info;
           
-          _tao_ri.reply_status (_invoke_status);
+          ri.reply_status (_invoke_status);
           _tao_vfr.receive_reply (
-            &_tao_ri
+            &ri
             ACE_ENV_ARG_PARAMETER
           );
           ACE_TRY_CHECK;
@@ -3887,15 +3711,15 @@
       }
     ACE_CATCHANY
       {
-        _tao_ri.exception (&ACE_ANY_EXCEPTION);
+        ri.exception (&ACE_ANY_EXCEPTION);
         _tao_vfr.receive_exception (
-          &_tao_ri
+          &ri
           ACE_ENV_ARG_PARAMETER
         );
         ACE_TRY_CHECK;
         
         PortableInterceptor::ReplyStatus _tao_status =
-          _tao_ri.reply_status (ACE_ENV_SINGLE_ARG_PARAMETER);
+          ri.reply_status (ACE_ENV_SINGLE_ARG_PARAMETER);
         ACE_TRY_CHECK;
         
         if (_tao_status == PortableInterceptor::SYSTEM_EXCEPTION
@@ -3903,11 +3727,11 @@
           ACE_RE_THROW;
       }
     ACE_ENDTRY;
-        ACE_CHECK_RETURN (_tao_retval._retn ());
+    ACE_CHECK_RETURN (0);
 
     PortableInterceptor::ReplyStatus _tao_status =
-      _tao_ri.reply_status (ACE_ENV_SINGLE_ARG_PARAMETER);
-        ACE_CHECK_RETURN (_tao_retval._retn ());
+      ri.reply_status (ACE_ENV_SINGLE_ARG_PARAMETER);
+    ACE_CHECK_RETURN (0);
 
     if (_tao_status == PortableInterceptor::LOCATION_FORWARD
         || _tao_status == PortableInterceptor::TRANSPORT_RETRY)
@@ -3917,7 +3741,7 @@
     
     break;
   }
-return _tao_retval._retn ();
+return _tao_safe_retval._retn ();
 }
 
 
@@ -3973,14 +3797,13 @@
 ///////////////////////////////////////////////////////////////////////
 
 
-// TAO_IDL - Generated from 
-// be/be_visitor_interface/interface_cs.cpp:198
-
+// default constructor
 IR::ProvidesDef::ProvidesDef (int collocated)
 {
   this->IR_ProvidesDef_setup_collocation (collocated);
 }
 
+// destructor
 IR::ProvidesDef::~ProvidesDef (void)
 {}
 
@@ -4020,8 +3843,7 @@
   return ProvidesDef::_unchecked_narrow (obj ACE_ENV_ARG_PARAMETER);
 }
 
-IR::ProvidesDef_ptr 
-IR::ProvidesDef::_unchecked_narrow (
+IR::ProvidesDef_ptr IR::ProvidesDef::_unchecked_narrow (
     CORBA::Object_ptr obj
     ACE_ENV_ARG_DECL_NOT_USED
   )
@@ -4038,8 +3860,7 @@
       if (
           !CORBA::is_nil (stub->servant_orb_var ().ptr ()) &&
           stub->servant_orb_var ()->orb_core ()->optimize_collocation_objects () &&
-          obj->_is_collocated () &&
-          IR__TAO_ProvidesDef_Proxy_Broker_Factory_function_pointer != 0
+          obj->_is_collocated () &&IR__TAO_ProvidesDef_Proxy_Broker_Factory_function_pointer != 0
         )
         {
           ACE_NEW_RETURN (
@@ -4047,25 +3868,12 @@
               ::IR::ProvidesDef (
                   stub,
                   1,
-                  obj->_servant ()
-                ),
-              ProvidesDef::_nil ()
-            );
-        }
+            obj->_servant ()),
       
-      if (CORBA::is_nil (default_proxy))
-        {
-          ACE_NEW_RETURN (
-              default_proxy,
-              ::IR::ProvidesDef (
-                  stub,
-                  0,
-                  obj->_servant ()
-                ),
-              ProvidesDef::_nil ()
-            );
+          ProvidesDef::_nil ());
         }
-      
+      if (CORBA::is_nil (default_proxy))
+        ACE_NEW_RETURN (default_proxy, ::IR::ProvidesDef (stub, 0, obj->_servant ()), ProvidesDef::_nil ());
       return default_proxy;
     }
   else 
@@ -4113,25 +3921,25 @@
     retv = ACE_reinterpret_cast (void*, this);
   else if (type == ACE_reinterpret_cast
     (ptr_arith_t,
-      &::CORBA::Contained::_tao_class_id))
+      &CORBA_Contained::_tao_class_id))
     retv = ACE_reinterpret_cast
       (
         void *,
         ACE_static_cast
           (
-            CORBA::Contained_ptr,
+            CORBA_Contained_ptr,
             this
           )
       );
   else if (type == ACE_reinterpret_cast
     (ptr_arith_t,
-      &::CORBA::IRObject::_tao_class_id))
+      &CORBA_IRObject::_tao_class_id))
     retv = ACE_reinterpret_cast
       (
         void *,
         ACE_static_cast
           (
-            CORBA::IRObject_ptr,
+            CORBA_IRObject_ptr,
             this
           )
       );
@@ -4149,8 +3957,7 @@
   return "IDL:omg.org/IR/ProvidesDef:1.0";
 }
 
-::CORBA::InterfaceDef_ptr IR::ProvidesDef::interface_type (
-    
+CORBA_InterfaceDef_ptr IR::ProvidesDef::interface_type (
     ACE_ENV_SINGLE_ARG_DECL
   )
   ACE_THROW_SPEC ((
@@ -4162,7 +3969,8 @@
   ACE_CHECK_RETURN (0);
   
   return proxy.interface_type (
-      this ACE_ENV_ARG_PARAMETER
+      this
+      ACE_ENV_ARG_PARAMETER
     );
 }
 
@@ -4194,7 +4002,7 @@
 
 TAO_NAMESPACE_TYPE (CORBA::TypeCode_ptr)
 TAO_NAMESPACE_BEGIN (IR)
-TAO_NAMESPACE_DEFINE (::CORBA::TypeCode_ptr, _tc_ProvidesDef, &_tc_TAO_tc_IR_ProvidesDef)
+TAO_NAMESPACE_DEFINE (CORBA::TypeCode_ptr, _tc_ProvidesDef, &_tc_TAO_tc_IR_ProvidesDef)
 TAO_NAMESPACE_END
 
 static const CORBA::Long _oc_IR_ProvidesDescription[] =
@@ -4266,8 +4074,26 @@
   ACE_NTOHL (0x64656669), 
   ACE_NTOHL (0x6e65645f), 
   ACE_NTOHL (0x696e0000),  // name = defined_in
-  0xffffffff, // indirection
-  0xffffffa0, // negative offset (-96)
+  CORBA::tk_alias, // typecode kind for typedefs
+  68, // encapsulation length
+    TAO_ENCAP_BYTE_ORDER, // byte order
+    32,
+    ACE_NTOHL (0x49444c3a),
+    ACE_NTOHL (0x6f6d672e),
+    ACE_NTOHL (0x6f72672f),
+    ACE_NTOHL (0x49522f52),
+    ACE_NTOHL (0x65706f73),
+    ACE_NTOHL (0x69746f72),
+    ACE_NTOHL (0x7949643a),
+    ACE_NTOHL (0x312e3000),  // repository ID = IDL:omg.org/IR/RepositoryId:1.0
+    13,
+    ACE_NTOHL (0x5265706f),
+    ACE_NTOHL (0x7369746f),
+    ACE_NTOHL (0x72794964),
+    ACE_NTOHL (0x0),  // name = RepositoryId
+    CORBA::tk_string,
+    0U, // string length
+
   8,
   ACE_NTOHL (0x76657273), 
   ACE_NTOHL (0x696f6e00),  // name = version
@@ -4326,7 +4152,7 @@
 
 TAO_NAMESPACE_TYPE (CORBA::TypeCode_ptr)
 TAO_NAMESPACE_BEGIN (IR)
-TAO_NAMESPACE_DEFINE (::CORBA::TypeCode_ptr, _tc_ProvidesDescription, &_tc_TAO_tc_IR_ProvidesDescription)
+TAO_NAMESPACE_DEFINE (CORBA::TypeCode_ptr, _tc_ProvidesDescription, &_tc_TAO_tc_IR_ProvidesDescription)
 TAO_NAMESPACE_END
 
 void IR::ProvidesDescription::_tao_any_destructor (void *_tao_void_pointer)
@@ -4335,12 +4161,6 @@
   delete tmp;
 }
 
-
-// TAO_IDL - Generated from 
-// be/be_visitor_interface/interface_cs.cpp:67
-
-int IR::UsesDef::_tao_class_id = 0;
-
 IR::UsesDef_ptr
 tao_IR_UsesDef_duplicate (
     IR::UsesDef_ptr p
@@ -4384,10 +4204,10 @@
   return *tmp;
 }
 
+int IR::UsesDef::_tao_class_id = 0;
+
 // *************************************************************
-// IR::UsesDef_var
-// TAO_IDL - Generated from
-// be/be_interface.cpp:654
+// Operations for class IR::UsesDef_var
 // *************************************************************
 
 IR::UsesDef_var::UsesDef_var (void) // default constructor
@@ -4510,9 +4330,7 @@
 }
 
 // *************************************************************
-// IR::UsesDef_out
-// TAO_IDL - Generated from
-// be/be_interface.cpp:932
+// Operations for class IR::UsesDef_out
 // *************************************************************
 
 IR::UsesDef_out::UsesDef_out (UsesDef_ptr &p)
@@ -4577,30 +4395,38 @@
 public:
   TAO_ClientRequestInfo_IR_UsesDef_interface_type_get (
       TAO_GIOP_Invocation *_tao_invocation,
-      CORBA::Object_ptr _tao_target ACE_ENV_ARG_DECL_WITH_DEFAULTS
-    );
+      CORBA::Object_ptr _tao_target
+      ACE_ENV_ARG_DECL_WITH_DEFAULTS);
+
+
+  virtual Dynamic::ParameterList * arguments (
+      ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)
 
-  virtual Dynamic::ParameterList * arguments (ACE_ENV_SINGLE_ARG_DECL)
     ACE_THROW_SPEC ((CORBA::SystemException));
   
-  virtual Dynamic::ExceptionList * exceptions (ACE_ENV_SINGLE_ARG_DECL)
+  virtual Dynamic::ExceptionList * exceptions (
+      ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)
+
     ACE_THROW_SPEC ((CORBA::SystemException));
   
-  virtual CORBA::Any * result (ACE_ENV_SINGLE_ARG_DECL)
+  virtual CORBA::Any * result (
+      ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)
+
     ACE_THROW_SPEC ((CORBA::SystemException));
 
-  void result (CORBA::InterfaceDef_ptr result);
+  void result (CORBA_InterfaceDef_ptr result);
 
 private:
   TAO_ClientRequestInfo_IR_UsesDef_interface_type_get (const TAO_ClientRequestInfo_IR_UsesDef_interface_type_get &);
   void operator= (const TAO_ClientRequestInfo_IR_UsesDef_interface_type_get &);
 
-  CORBA::InterfaceDef_ptr _result;
+  CORBA_InterfaceDef_ptr _result;
 };
 
 TAO_ClientRequestInfo_IR_UsesDef_interface_type_get::TAO_ClientRequestInfo_IR_UsesDef_interface_type_get (
     TAO_GIOP_Invocation *_tao_invocation,
-    CORBA::Object_ptr _tao_target ACE_ENV_ARG_DECL_NOT_USED    
+    CORBA::Object_ptr _tao_target
+    ACE_ENV_ARG_DECL_NOT_USED
   )
   : TAO_ClientRequestInfo_i (_tao_invocation, _tao_target)
 {}
@@ -4615,7 +4441,6 @@
   ACE_CHECK_RETURN (0);
   
   return parameter_list;
-
 }
 
 Dynamic::ExceptionList *
@@ -4630,6 +4455,7 @@
   return exception_list;
 }
 
+
 CORBA::Any * 
 TAO_ClientRequestInfo_IR_UsesDef_interface_type_get::result (ACE_ENV_SINGLE_ARG_DECL)
   ACE_THROW_SPEC ((CORBA::SystemException))
@@ -4647,7 +4473,7 @@
 }
 
 void 
-TAO_ClientRequestInfo_IR_UsesDef_interface_type_get::result (::CORBA::InterfaceDef_ptr result)
+TAO_ClientRequestInfo_IR_UsesDef_interface_type_get::result (CORBA_InterfaceDef_ptr result)
 {
   // update the result 
   this->_result = result;
@@ -4658,16 +4484,23 @@
 public:
   TAO_ClientRequestInfo_IR_UsesDef_is_multiple_get (
       TAO_GIOP_Invocation *_tao_invocation,
-      CORBA::Object_ptr _tao_target ACE_ENV_ARG_DECL_WITH_DEFAULTS
-    );
+      CORBA::Object_ptr _tao_target
+      ACE_ENV_ARG_DECL_WITH_DEFAULTS);
+
+
+  virtual Dynamic::ParameterList * arguments (
+      ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)
 
-  virtual Dynamic::ParameterList * arguments (ACE_ENV_SINGLE_ARG_DECL)
     ACE_THROW_SPEC ((CORBA::SystemException));
   
-  virtual Dynamic::ExceptionList * exceptions (ACE_ENV_SINGLE_ARG_DECL)
+  virtual Dynamic::ExceptionList * exceptions (
+      ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)
+
     ACE_THROW_SPEC ((CORBA::SystemException));
   
-  virtual CORBA::Any * result (ACE_ENV_SINGLE_ARG_DECL)
+  virtual CORBA::Any * result (
+      ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)
+
     ACE_THROW_SPEC ((CORBA::SystemException));
 
   void result (CORBA::Boolean result);
@@ -4681,7 +4514,8 @@
 
 TAO_ClientRequestInfo_IR_UsesDef_is_multiple_get::TAO_ClientRequestInfo_IR_UsesDef_is_multiple_get (
     TAO_GIOP_Invocation *_tao_invocation,
-    CORBA::Object_ptr _tao_target ACE_ENV_ARG_DECL_NOT_USED    
+    CORBA::Object_ptr _tao_target
+    ACE_ENV_ARG_DECL_NOT_USED
   )
   : TAO_ClientRequestInfo_i (_tao_invocation, _tao_target)
 {}
@@ -4696,7 +4530,6 @@
   ACE_CHECK_RETURN (0);
   
   return parameter_list;
-
 }
 
 Dynamic::ExceptionList *
@@ -4711,6 +4544,7 @@
   return exception_list;
 }
 
+
 CORBA::Any * 
 TAO_ClientRequestInfo_IR_UsesDef_is_multiple_get::result (ACE_ENV_SINGLE_ARG_DECL)
   ACE_THROW_SPEC ((CORBA::SystemException))
@@ -4748,7 +4582,7 @@
 
 // Remote Implementation of the IDL interface methods
 
-::CORBA::InterfaceDef_ptr IR::_TAO_UsesDef_Remote_Proxy_Impl::interface_type (
+CORBA_InterfaceDef_ptr IR::_TAO_UsesDef_Remote_Proxy_Impl::interface_type (
     CORBA_Object *_collocated_tao_target_
     ACE_ENV_ARG_DECL
   )
@@ -4757,13 +4591,13 @@
   ))
 {
   
-  CORBA::InterfaceDef_var _tao_retval (CORBA::InterfaceDef::_nil ());
-
+  CORBA_InterfaceDef_ptr _tao_retval = CORBA_InterfaceDef::_nil ();
+  CORBA_InterfaceDef_var _tao_safe_retval (_tao_retval);
 
   
   TAO_Stub *istub = _collocated_tao_target_->_stubobj ();
   if (istub == 0)
-    ACE_THROW_RETURN (CORBA::INTERNAL (),_tao_retval._retn ());
+    ACE_THROW_RETURN (CORBA::INTERNAL (), 0);
 
   
   TAO_GIOP_Twoway_Invocation _tao_call (
@@ -4790,24 +4624,25 @@
       _invoke_status = TAO_INVOKE_EXCEPTION;
       
 #if TAO_HAS_INTERCEPTORS == 1
-      TAO_ClientRequestInfo_IR_UsesDef_interface_type_get _tao_ri (
+      TAO_ClientRequestInfo_IR_UsesDef_interface_type_get ri (
         &_tao_call,
-        _collocated_tao_target_ ACE_ENV_ARG_PARAMETER
+        _collocated_tao_target_
+        ACE_ENV_ARG_PARAMETER
       );
-            ACE_CHECK_RETURN (_tao_retval._retn ());
+      ACE_CHECK_RETURN (0);
 
 #endif /* TAO_HAS_INTERCEPTORS */
       
       
       CORBA::Short _tao_response_flag = TAO_TWOWAY_RESPONSE_FLAG;
-      TAO_INTERCEPTOR (_tao_ri.response_expected (1));
+      TAO_INTERCEPTOR (ri.response_expected (1));
       
 #if TAO_HAS_INTERCEPTORS == 1
       
       ACE_TRY
         {
           _tao_vfr.send_request (
-            &_tao_ri
+            &ri
             ACE_ENV_ARG_PARAMETER
           );
           ACE_TRY_CHECK;
@@ -4821,17 +4656,17 @@
 #endif /* TAO_HAS_INTERCEPTORS */
           
           _tao_call.start (ACE_ENV_SINGLE_ARG_PARAMETER);
-                    TAO_INTERCEPTOR_CHECK_RETURN (_tao_retval._retn ());
+          TAO_INTERCEPTOR_CHECK_RETURN (0);
 
           _tao_call.prepare_header (
               ACE_static_cast (CORBA::Octet, _tao_response_flag)
               ACE_ENV_ARG_PARAMETER
             );
-                    TAO_INTERCEPTOR_CHECK_RETURN (_tao_retval._retn ());
+          TAO_INTERCEPTOR_CHECK_RETURN (0);
 
           _invoke_status =
             _tao_call.invoke (0, 0 ACE_ENV_ARG_PARAMETER);
-                    TAO_INTERCEPTOR_CHECK_RETURN (_tao_retval._retn ());
+          TAO_INTERCEPTOR_CHECK_RETURN (0);
 
           if (_invoke_status == TAO_INVOKE_EXCEPTION)
             {
@@ -4844,9 +4679,9 @@
           else if (_invoke_status == TAO_INVOKE_RESTART)
             {
               TAO_INTERCEPTOR (
-                _tao_ri.reply_status (_invoke_status);
+                ri.reply_status (_invoke_status);
                 _tao_vfr.receive_other (
-                  &_tao_ri
+                  &ri
                   ACE_ENV_ARG_PARAMETER
                 );
                 ACE_TRY_CHECK;
@@ -4857,7 +4692,7 @@
           
           TAO_InputCDR &_tao_in = _tao_call.inp_stream ();
           if (!(
-                            (_tao_in >> _tao_retval.inout ())
+                            (_tao_in >> _tao_safe_retval.inout ())
               ))
             {
               TAO_INTERCEPTOR_THROW_RETURN (
@@ -4868,13 +4703,13 @@
             }
           
 #if TAO_HAS_INTERCEPTORS == 1
-          ::CORBA::InterfaceDef_ptr _tao_retval_info = _tao_retval._retn ();
-          _tao_ri.result (_tao_retval_info);
-          _tao_retval = _tao_retval_info;
+          CORBA_InterfaceDef_ptr _tao_retval_info = _tao_safe_retval._retn ();
+          ri.result (_tao_retval_info);
+          _tao_safe_retval = _tao_retval_info;
           
-          _tao_ri.reply_status (_invoke_status);
+          ri.reply_status (_invoke_status);
           _tao_vfr.receive_reply (
-            &_tao_ri
+            &ri
             ACE_ENV_ARG_PARAMETER
           );
           ACE_TRY_CHECK;
@@ -4882,15 +4717,15 @@
       }
     ACE_CATCHANY
       {
-        _tao_ri.exception (&ACE_ANY_EXCEPTION);
+        ri.exception (&ACE_ANY_EXCEPTION);
         _tao_vfr.receive_exception (
-          &_tao_ri
+          &ri
           ACE_ENV_ARG_PARAMETER
         );
         ACE_TRY_CHECK;
         
         PortableInterceptor::ReplyStatus _tao_status =
-          _tao_ri.reply_status (ACE_ENV_SINGLE_ARG_PARAMETER);
+          ri.reply_status (ACE_ENV_SINGLE_ARG_PARAMETER);
         ACE_TRY_CHECK;
         
         if (_tao_status == PortableInterceptor::SYSTEM_EXCEPTION
@@ -4898,11 +4733,11 @@
           ACE_RE_THROW;
       }
     ACE_ENDTRY;
-        ACE_CHECK_RETURN (_tao_retval._retn ());
+    ACE_CHECK_RETURN (0);
 
     PortableInterceptor::ReplyStatus _tao_status =
-      _tao_ri.reply_status (ACE_ENV_SINGLE_ARG_PARAMETER);
-        ACE_CHECK_RETURN (_tao_retval._retn ());
+      ri.reply_status (ACE_ENV_SINGLE_ARG_PARAMETER);
+    ACE_CHECK_RETURN (0);
 
     if (_tao_status == PortableInterceptor::LOCATION_FORWARD
         || _tao_status == PortableInterceptor::TRANSPORT_RETRY)
@@ -4912,7 +4747,7 @@
     
     break;
   }
-return _tao_retval._retn ();
+return _tao_safe_retval._retn ();
 }
 
 CORBA::Boolean IR::_TAO_UsesDef_Remote_Proxy_Impl::is_multiple (
@@ -4956,9 +4791,10 @@
       _invoke_status = TAO_INVOKE_EXCEPTION;
       
 #if TAO_HAS_INTERCEPTORS == 1
-      TAO_ClientRequestInfo_IR_UsesDef_is_multiple_get _tao_ri (
+      TAO_ClientRequestInfo_IR_UsesDef_is_multiple_get ri (
         &_tao_call,
-        _collocated_tao_target_ ACE_ENV_ARG_PARAMETER
+        _collocated_tao_target_
+        ACE_ENV_ARG_PARAMETER
       );
             ACE_CHECK_RETURN (_tao_retval);
 
@@ -4966,14 +4802,14 @@
       
       
       CORBA::Short _tao_response_flag = TAO_TWOWAY_RESPONSE_FLAG;
-      TAO_INTERCEPTOR (_tao_ri.response_expected (1));
+      TAO_INTERCEPTOR (ri.response_expected (1));
       
 #if TAO_HAS_INTERCEPTORS == 1
       
       ACE_TRY
         {
           _tao_vfr.send_request (
-            &_tao_ri
+            &ri
             ACE_ENV_ARG_PARAMETER
           );
           ACE_TRY_CHECK;
@@ -5010,9 +4846,9 @@
           else if (_invoke_status == TAO_INVOKE_RESTART)
             {
               TAO_INTERCEPTOR (
-                _tao_ri.reply_status (_invoke_status);
+                ri.reply_status (_invoke_status);
                 _tao_vfr.receive_other (
-                  &_tao_ri
+                  &ri
                   ACE_ENV_ARG_PARAMETER
                 );
                 ACE_TRY_CHECK;
@@ -5035,11 +4871,11 @@
           
 #if TAO_HAS_INTERCEPTORS == 1
           CORBA::Boolean _tao_retval_info = _tao_retval;
-          _tao_ri.result (_tao_retval_info);
+          ri.result (_tao_retval_info);
           
-          _tao_ri.reply_status (_invoke_status);
+          ri.reply_status (_invoke_status);
           _tao_vfr.receive_reply (
-            &_tao_ri
+            &ri
             ACE_ENV_ARG_PARAMETER
           );
           ACE_TRY_CHECK;
@@ -5047,15 +4883,15 @@
       }
     ACE_CATCHANY
       {
-        _tao_ri.exception (&ACE_ANY_EXCEPTION);
+        ri.exception (&ACE_ANY_EXCEPTION);
         _tao_vfr.receive_exception (
-          &_tao_ri
+          &ri
           ACE_ENV_ARG_PARAMETER
         );
         ACE_TRY_CHECK;
         
         PortableInterceptor::ReplyStatus _tao_status =
-          _tao_ri.reply_status (ACE_ENV_SINGLE_ARG_PARAMETER);
+          ri.reply_status (ACE_ENV_SINGLE_ARG_PARAMETER);
         ACE_TRY_CHECK;
         
         if (_tao_status == PortableInterceptor::SYSTEM_EXCEPTION
@@ -5066,7 +4902,7 @@
         ACE_CHECK_RETURN (_tao_retval);
 
     PortableInterceptor::ReplyStatus _tao_status =
-      _tao_ri.reply_status (ACE_ENV_SINGLE_ARG_PARAMETER);
+      ri.reply_status (ACE_ENV_SINGLE_ARG_PARAMETER);
         ACE_CHECK_RETURN (_tao_retval);
 
     if (_tao_status == PortableInterceptor::LOCATION_FORWARD
@@ -5133,14 +4969,13 @@
 ///////////////////////////////////////////////////////////////////////
 
 
-// TAO_IDL - Generated from 
-// be/be_visitor_interface/interface_cs.cpp:198
-
+// default constructor
 IR::UsesDef::UsesDef (int collocated)
 {
   this->IR_UsesDef_setup_collocation (collocated);
 }
 
+// destructor
 IR::UsesDef::~UsesDef (void)
 {}
 
@@ -5180,8 +5015,7 @@
   return UsesDef::_unchecked_narrow (obj ACE_ENV_ARG_PARAMETER);
 }
 
-IR::UsesDef_ptr 
-IR::UsesDef::_unchecked_narrow (
+IR::UsesDef_ptr IR::UsesDef::_unchecked_narrow (
     CORBA::Object_ptr obj
     ACE_ENV_ARG_DECL_NOT_USED
   )
@@ -5198,8 +5032,7 @@
       if (
           !CORBA::is_nil (stub->servant_orb_var ().ptr ()) &&
           stub->servant_orb_var ()->orb_core ()->optimize_collocation_objects () &&
-          obj->_is_collocated () &&
-          IR__TAO_UsesDef_Proxy_Broker_Factory_function_pointer != 0
+          obj->_is_collocated () &&IR__TAO_UsesDef_Proxy_Broker_Factory_function_pointer != 0
         )
         {
           ACE_NEW_RETURN (
@@ -5207,25 +5040,12 @@
               ::IR::UsesDef (
                   stub,
                   1,
-                  obj->_servant ()
-                ),
-              UsesDef::_nil ()
-            );
-        }
+            obj->_servant ()),
       
-      if (CORBA::is_nil (default_proxy))
-        {
-          ACE_NEW_RETURN (
-              default_proxy,
-              ::IR::UsesDef (
-                  stub,
-                  0,
-                  obj->_servant ()
-                ),
-              UsesDef::_nil ()
-            );
+          UsesDef::_nil ());
         }
-      
+      if (CORBA::is_nil (default_proxy))
+        ACE_NEW_RETURN (default_proxy, ::IR::UsesDef (stub, 0, obj->_servant ()), UsesDef::_nil ());
       return default_proxy;
     }
   else 
@@ -5273,25 +5093,25 @@
     retv = ACE_reinterpret_cast (void*, this);
   else if (type == ACE_reinterpret_cast
     (ptr_arith_t,
-      &::CORBA::Contained::_tao_class_id))
+      &CORBA_Contained::_tao_class_id))
     retv = ACE_reinterpret_cast
       (
         void *,
         ACE_static_cast
           (
-            CORBA::Contained_ptr,
+            CORBA_Contained_ptr,
             this
           )
       );
   else if (type == ACE_reinterpret_cast
     (ptr_arith_t,
-      &::CORBA::IRObject::_tao_class_id))
+      &CORBA_IRObject::_tao_class_id))
     retv = ACE_reinterpret_cast
       (
         void *,
         ACE_static_cast
           (
-            CORBA::IRObject_ptr,
+            CORBA_IRObject_ptr,
             this
           )
       );
@@ -5309,8 +5129,7 @@
   return "IDL:omg.org/IR/UsesDef:1.0";
 }
 
-::CORBA::InterfaceDef_ptr IR::UsesDef::interface_type (
-    
+CORBA_InterfaceDef_ptr IR::UsesDef::interface_type (
     ACE_ENV_SINGLE_ARG_DECL
   )
   ACE_THROW_SPEC ((
@@ -5322,12 +5141,12 @@
   ACE_CHECK_RETURN (0);
   
   return proxy.interface_type (
-      this ACE_ENV_ARG_PARAMETER
+      this
+      ACE_ENV_ARG_PARAMETER
     );
 }
 
 CORBA::Boolean IR::UsesDef::is_multiple (
-    
     ACE_ENV_SINGLE_ARG_DECL
   )
   ACE_THROW_SPEC ((
@@ -5339,7 +5158,8 @@
   ACE_CHECK_RETURN (0);
   
   return proxy.is_multiple (
-      this ACE_ENV_ARG_PARAMETER
+      this
+      ACE_ENV_ARG_PARAMETER
     );
 }
 
@@ -5369,7 +5189,7 @@
 
 TAO_NAMESPACE_TYPE (CORBA::TypeCode_ptr)
 TAO_NAMESPACE_BEGIN (IR)
-TAO_NAMESPACE_DEFINE (::CORBA::TypeCode_ptr, _tc_UsesDef, &_tc_TAO_tc_IR_UsesDef)
+TAO_NAMESPACE_DEFINE (CORBA::TypeCode_ptr, _tc_UsesDef, &_tc_TAO_tc_IR_UsesDef)
 TAO_NAMESPACE_END
 
 static const CORBA::Long _oc_IR_UsesDescription[] =
@@ -5439,8 +5259,26 @@
   ACE_NTOHL (0x64656669), 
   ACE_NTOHL (0x6e65645f), 
   ACE_NTOHL (0x696e0000),  // name = defined_in
-  0xffffffff, // indirection
-  0xffffffa0, // negative offset (-96)
+  CORBA::tk_alias, // typecode kind for typedefs
+  68, // encapsulation length
+    TAO_ENCAP_BYTE_ORDER, // byte order
+    32,
+    ACE_NTOHL (0x49444c3a),
+    ACE_NTOHL (0x6f6d672e),
+    ACE_NTOHL (0x6f72672f),
+    ACE_NTOHL (0x49522f52),
+    ACE_NTOHL (0x65706f73),
+    ACE_NTOHL (0x69746f72),
+    ACE_NTOHL (0x7949643a),
+    ACE_NTOHL (0x312e3000),  // repository ID = IDL:omg.org/IR/RepositoryId:1.0
+    13,
+    ACE_NTOHL (0x5265706f),
+    ACE_NTOHL (0x7369746f),
+    ACE_NTOHL (0x72794964),
+    ACE_NTOHL (0x0),  // name = RepositoryId
+    CORBA::tk_string,
+    0U, // string length
+
   8,
   ACE_NTOHL (0x76657273), 
   ACE_NTOHL (0x696f6e00),  // name = version
@@ -5505,7 +5343,7 @@
 
 TAO_NAMESPACE_TYPE (CORBA::TypeCode_ptr)
 TAO_NAMESPACE_BEGIN (IR)
-TAO_NAMESPACE_DEFINE (::CORBA::TypeCode_ptr, _tc_UsesDescription, &_tc_TAO_tc_IR_UsesDescription)
+TAO_NAMESPACE_DEFINE (CORBA::TypeCode_ptr, _tc_UsesDescription, &_tc_TAO_tc_IR_UsesDescription)
 TAO_NAMESPACE_END
 
 void IR::UsesDescription::_tao_any_destructor (void *_tao_void_pointer)
@@ -5629,10 +5467,10 @@
   ACE_NTOHL (0x44657363), 
   ACE_NTOHL (0x53657100),  // name = ProvidesDescSeq
   CORBA::tk_sequence, // typecode kind
-  460, // encapsulation length
+  528, // encapsulation length
     TAO_ENCAP_BYTE_ORDER, // byte order
     CORBA::tk_struct, // typecode kind
-    444, // encapsulation length
+    512, // encapsulation length
       TAO_ENCAP_BYTE_ORDER, // byte order
       39,
       ACE_NTOHL (0x49444c3a), 
@@ -5700,22 +5538,40 @@
       ACE_NTOHL (0x64656669), 
       ACE_NTOHL (0x6e65645f), 
       ACE_NTOHL (0x696e0000),  // name = defined_in
-      0xffffffff, // indirection
-      0xffffffa0, // negative offset (-96)
-      8,
-      ACE_NTOHL (0x76657273), 
-      ACE_NTOHL (0x696f6e00),  // name = version
       CORBA::tk_alias, // typecode kind for typedefs
-      64, // encapsulation length
+      68, // encapsulation length
         TAO_ENCAP_BYTE_ORDER, // byte order
-        31,
+        32,
         ACE_NTOHL (0x49444c3a), 
         ACE_NTOHL (0x6f6d672e), 
         ACE_NTOHL (0x6f72672f), 
-        ACE_NTOHL (0x49522f56), 
-        ACE_NTOHL (0x65727369), 
-        ACE_NTOHL (0x6f6e5370), 
-        ACE_NTOHL (0x65633a31), 
+        ACE_NTOHL (0x49522f52),
+        ACE_NTOHL (0x65706f73),
+        ACE_NTOHL (0x69746f72),
+        ACE_NTOHL (0x7949643a),
+        ACE_NTOHL (0x312e3000),  // repository ID = IDL:omg.org/IR/RepositoryId:1.0
+        13,
+        ACE_NTOHL (0x5265706f),
+        ACE_NTOHL (0x7369746f),
+        ACE_NTOHL (0x72794964),
+        ACE_NTOHL (0x0),  // name = RepositoryId
+        CORBA::tk_string,
+        0U, // string length
+
+      8,
+      ACE_NTOHL (0x76657273),
+      ACE_NTOHL (0x696f6e00),  // name = version
+      CORBA::tk_alias, // typecode kind for typedefs
+      64, // encapsulation length
+        TAO_ENCAP_BYTE_ORDER, // byte order
+        31,
+        ACE_NTOHL (0x49444c3a),
+        ACE_NTOHL (0x6f6d672e),
+        ACE_NTOHL (0x6f72672f),
+        ACE_NTOHL (0x49522f56),
+        ACE_NTOHL (0x65727369),
+        ACE_NTOHL (0x6f6e5370),
+        ACE_NTOHL (0x65633a31),
         ACE_NTOHL (0x2e300000),  // repository ID = IDL:omg.org/IR/VersionSpec:1.0
         12,
         ACE_NTOHL (0x56657273), 
@@ -5763,7 +5619,7 @@
 
 TAO_NAMESPACE_TYPE (CORBA::TypeCode_ptr)
 TAO_NAMESPACE_BEGIN (IR)
-TAO_NAMESPACE_DEFINE (::CORBA::TypeCode_ptr, _tc_ProvidesDescSeq, &_tc_TAO_tc_IR_ProvidesDescSeq)
+TAO_NAMESPACE_DEFINE (CORBA::TypeCode_ptr, _tc_ProvidesDescSeq, &_tc_TAO_tc_IR_ProvidesDescSeq)
 TAO_NAMESPACE_END
 
 
@@ -5879,10 +5735,10 @@
   ACE_NTOHL (0x44657363), 
   ACE_NTOHL (0x53657100),  // name = UsesDescSeq
   CORBA::tk_sequence, // typecode kind
-  472, // encapsulation length
+  540, // encapsulation length
     TAO_ENCAP_BYTE_ORDER, // byte order
     CORBA::tk_struct, // typecode kind
-    456, // encapsulation length
+    524, // encapsulation length
       TAO_ENCAP_BYTE_ORDER, // byte order
       35,
       ACE_NTOHL (0x49444c3a), 
@@ -5948,8 +5804,26 @@
       ACE_NTOHL (0x64656669), 
       ACE_NTOHL (0x6e65645f), 
       ACE_NTOHL (0x696e0000),  // name = defined_in
-      0xffffffff, // indirection
-      0xffffffa0, // negative offset (-96)
+      CORBA::tk_alias, // typecode kind for typedefs
+      68, // encapsulation length
+        TAO_ENCAP_BYTE_ORDER, // byte order
+        32,
+        ACE_NTOHL (0x49444c3a),
+        ACE_NTOHL (0x6f6d672e),
+        ACE_NTOHL (0x6f72672f),
+        ACE_NTOHL (0x49522f52),
+        ACE_NTOHL (0x65706f73),
+        ACE_NTOHL (0x69746f72),
+        ACE_NTOHL (0x7949643a),
+        ACE_NTOHL (0x312e3000),  // repository ID = IDL:omg.org/IR/RepositoryId:1.0
+        13,
+        ACE_NTOHL (0x5265706f),
+        ACE_NTOHL (0x7369746f),
+        ACE_NTOHL (0x72794964),
+        ACE_NTOHL (0x0),  // name = RepositoryId
+        CORBA::tk_string,
+        0U, // string length
+
       8,
       ACE_NTOHL (0x76657273), 
       ACE_NTOHL (0x696f6e00),  // name = version
@@ -6017,15 +5891,9 @@
 
 TAO_NAMESPACE_TYPE (CORBA::TypeCode_ptr)
 TAO_NAMESPACE_BEGIN (IR)
-TAO_NAMESPACE_DEFINE (::CORBA::TypeCode_ptr, _tc_UsesDescSeq, &_tc_TAO_tc_IR_UsesDescSeq)
+TAO_NAMESPACE_DEFINE (CORBA::TypeCode_ptr, _tc_UsesDescSeq, &_tc_TAO_tc_IR_UsesDescSeq)
 TAO_NAMESPACE_END
 
-
-// TAO_IDL - Generated from 
-// be/be_visitor_interface/interface_cs.cpp:67
-
-int IR::EventDef::_tao_class_id = 0;
-
 IR::EventDef_ptr
 tao_IR_EventDef_duplicate (
     IR::EventDef_ptr p
@@ -6069,10 +5937,10 @@
   return *tmp;
 }
 
+int IR::EventDef::_tao_class_id = 0;
+
 // *************************************************************
-// IR::EventDef_var
-// TAO_IDL - Generated from
-// be/be_interface.cpp:654
+// Operations for class IR::EventDef_var
 // *************************************************************
 
 IR::EventDef_var::EventDef_var (void) // default constructor
@@ -6195,9 +6063,7 @@
 }
 
 // *************************************************************
-// IR::EventDef_out
-// TAO_IDL - Generated from
-// be/be_interface.cpp:932
+// Operations for class IR::EventDef_out
 // *************************************************************
 
 IR::EventDef_out::EventDef_out (EventDef_ptr &p)
@@ -6263,16 +6129,23 @@
   TAO_ClientRequestInfo_IR_EventDef_is_a (
       TAO_GIOP_Invocation *_tao_invocation,
       CORBA::Object_ptr _tao_target,
-      const char * event_id ACE_ENV_ARG_DECL_WITH_DEFAULTS
-    );
+      const char * event_id
+      ACE_ENV_ARG_DECL_WITH_DEFAULTS);
+
+
+  virtual Dynamic::ParameterList * arguments (
+      ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)
 
-  virtual Dynamic::ParameterList * arguments (ACE_ENV_SINGLE_ARG_DECL)
     ACE_THROW_SPEC ((CORBA::SystemException));
   
-  virtual Dynamic::ExceptionList * exceptions (ACE_ENV_SINGLE_ARG_DECL)
+  virtual Dynamic::ExceptionList * exceptions (
+      ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)
+
     ACE_THROW_SPEC ((CORBA::SystemException));
   
-  virtual CORBA::Any * result (ACE_ENV_SINGLE_ARG_DECL)
+  virtual CORBA::Any * result (
+      ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)
+
     ACE_THROW_SPEC ((CORBA::SystemException));
 
   void result (CORBA::Boolean result);
@@ -6288,7 +6161,8 @@
 TAO_ClientRequestInfo_IR_EventDef_is_a::TAO_ClientRequestInfo_IR_EventDef_is_a (
     TAO_GIOP_Invocation *_tao_invocation,
     CORBA::Object_ptr _tao_target,
-    const char * event_id ACE_ENV_ARG_DECL_NOT_USED    
+    const char * event_id
+    ACE_ENV_ARG_DECL_NOT_USED
   )
   : TAO_ClientRequestInfo_i (_tao_invocation, _tao_target),
     event_id_ (event_id)
@@ -6327,6 +6201,7 @@
   return exception_list;
 }
 
+
 CORBA::Any * 
 TAO_ClientRequestInfo_IR_EventDef_is_a::result (ACE_ENV_SINGLE_ARG_DECL)
   ACE_THROW_SPEC ((CORBA::SystemException))
@@ -6355,30 +6230,38 @@
 public:
   TAO_ClientRequestInfo_IR_EventDef_event_get (
       TAO_GIOP_Invocation *_tao_invocation,
-      CORBA::Object_ptr _tao_target ACE_ENV_ARG_DECL_WITH_DEFAULTS
-    );
+      CORBA::Object_ptr _tao_target
+      ACE_ENV_ARG_DECL_WITH_DEFAULTS);
+
+
+  virtual Dynamic::ParameterList * arguments (
+      ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)
 
-  virtual Dynamic::ParameterList * arguments (ACE_ENV_SINGLE_ARG_DECL)
     ACE_THROW_SPEC ((CORBA::SystemException));
   
-  virtual Dynamic::ExceptionList * exceptions (ACE_ENV_SINGLE_ARG_DECL)
+  virtual Dynamic::ExceptionList * exceptions (
+      ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)
+
     ACE_THROW_SPEC ((CORBA::SystemException));
   
-  virtual CORBA::Any * result (ACE_ENV_SINGLE_ARG_DECL)
+  virtual CORBA::Any * result (
+      ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)
+
     ACE_THROW_SPEC ((CORBA::SystemException));
 
-  void result (CORBA::ValueDef_ptr result);
+  void result (CORBA_ValueDef_ptr result);
 
 private:
   TAO_ClientRequestInfo_IR_EventDef_event_get (const TAO_ClientRequestInfo_IR_EventDef_event_get &);
   void operator= (const TAO_ClientRequestInfo_IR_EventDef_event_get &);
 
-  CORBA::ValueDef_ptr _result;
+  CORBA_ValueDef_ptr _result;
 };
 
 TAO_ClientRequestInfo_IR_EventDef_event_get::TAO_ClientRequestInfo_IR_EventDef_event_get (
     TAO_GIOP_Invocation *_tao_invocation,
-    CORBA::Object_ptr _tao_target ACE_ENV_ARG_DECL_NOT_USED    
+    CORBA::Object_ptr _tao_target
+    ACE_ENV_ARG_DECL_NOT_USED
   )
   : TAO_ClientRequestInfo_i (_tao_invocation, _tao_target)
 {}
@@ -6393,7 +6276,6 @@
   ACE_CHECK_RETURN (0);
   
   return parameter_list;
-
 }
 
 Dynamic::ExceptionList *
@@ -6408,6 +6290,7 @@
   return exception_list;
 }
 
+
 CORBA::Any * 
 TAO_ClientRequestInfo_IR_EventDef_event_get::result (ACE_ENV_SINGLE_ARG_DECL)
   ACE_THROW_SPEC ((CORBA::SystemException))
@@ -6425,7 +6308,7 @@
 }
 
 void 
-TAO_ClientRequestInfo_IR_EventDef_event_get::result (::CORBA::ValueDef_ptr result)
+TAO_ClientRequestInfo_IR_EventDef_event_get::result (CORBA_ValueDef_ptr result)
 {
   // update the result 
   this->_result = result;
@@ -6487,10 +6370,11 @@
       _invoke_status = TAO_INVOKE_EXCEPTION;
       
 #if TAO_HAS_INTERCEPTORS == 1
-      TAO_ClientRequestInfo_IR_EventDef_is_a _tao_ri (
+      TAO_ClientRequestInfo_IR_EventDef_is_a ri (
         &_tao_call,
         _collocated_tao_target_,
-        event_id ACE_ENV_ARG_PARAMETER
+        event_id
+        ACE_ENV_ARG_PARAMETER
       );
             ACE_CHECK_RETURN (_tao_retval);
 
@@ -6498,14 +6382,14 @@
       
       
       CORBA::Short _tao_response_flag = TAO_TWOWAY_RESPONSE_FLAG;
-      TAO_INTERCEPTOR (_tao_ri.response_expected (1));
+      TAO_INTERCEPTOR (ri.response_expected (1));
       
 #if TAO_HAS_INTERCEPTORS == 1
       
       ACE_TRY
         {
           _tao_vfr.send_request (
-            &_tao_ri
+            &ri
             ACE_ENV_ARG_PARAMETER
           );
           ACE_TRY_CHECK;
@@ -6551,9 +6435,9 @@
           else if (_invoke_status == TAO_INVOKE_RESTART)
             {
               TAO_INTERCEPTOR (
-                _tao_ri.reply_status (_invoke_status);
+                ri.reply_status (_invoke_status);
                 _tao_vfr.receive_other (
-                  &_tao_ri
+                  &ri
                   ACE_ENV_ARG_PARAMETER
                 );
                 ACE_TRY_CHECK;
@@ -6576,11 +6460,11 @@
           
 #if TAO_HAS_INTERCEPTORS == 1
           CORBA::Boolean _tao_retval_info = _tao_retval;
-          _tao_ri.result (_tao_retval_info);
+          ri.result (_tao_retval_info);
           
-          _tao_ri.reply_status (_invoke_status);
+          ri.reply_status (_invoke_status);
           _tao_vfr.receive_reply (
-            &_tao_ri
+            &ri
             ACE_ENV_ARG_PARAMETER
           );
           ACE_TRY_CHECK;
@@ -6588,15 +6472,15 @@
       }
     ACE_CATCHANY
       {
-        _tao_ri.exception (&ACE_ANY_EXCEPTION);
+        ri.exception (&ACE_ANY_EXCEPTION);
         _tao_vfr.receive_exception (
-          &_tao_ri
+          &ri
           ACE_ENV_ARG_PARAMETER
         );
         ACE_TRY_CHECK;
         
         PortableInterceptor::ReplyStatus _tao_status =
-          _tao_ri.reply_status (ACE_ENV_SINGLE_ARG_PARAMETER);
+          ri.reply_status (ACE_ENV_SINGLE_ARG_PARAMETER);
         ACE_TRY_CHECK;
         
         if (_tao_status == PortableInterceptor::SYSTEM_EXCEPTION
@@ -6607,7 +6491,7 @@
         ACE_CHECK_RETURN (_tao_retval);
 
     PortableInterceptor::ReplyStatus _tao_status =
-      _tao_ri.reply_status (ACE_ENV_SINGLE_ARG_PARAMETER);
+      ri.reply_status (ACE_ENV_SINGLE_ARG_PARAMETER);
         ACE_CHECK_RETURN (_tao_retval);
 
     if (_tao_status == PortableInterceptor::LOCATION_FORWARD
@@ -6621,7 +6505,7 @@
 return _tao_retval;
 }
 
-::CORBA::ValueDef_ptr IR::_TAO_EventDef_Remote_Proxy_Impl::event (
+CORBA_ValueDef_ptr IR::_TAO_EventDef_Remote_Proxy_Impl::event (
     CORBA_Object *_collocated_tao_target_
     ACE_ENV_ARG_DECL
   )
@@ -6630,13 +6514,13 @@
   ))
 {
   
-  CORBA::ValueDef_var _tao_retval (CORBA::ValueDef::_nil ());
-
+  CORBA_ValueDef_ptr _tao_retval = CORBA_ValueDef::_nil ();
+  CORBA_ValueDef_var _tao_safe_retval (_tao_retval);
 
   
   TAO_Stub *istub = _collocated_tao_target_->_stubobj ();
   if (istub == 0)
-    ACE_THROW_RETURN (CORBA::INTERNAL (),_tao_retval._retn ());
+    ACE_THROW_RETURN (CORBA::INTERNAL (), 0);
 
   
   TAO_GIOP_Twoway_Invocation _tao_call (
@@ -6663,24 +6547,25 @@
       _invoke_status = TAO_INVOKE_EXCEPTION;
       
 #if TAO_HAS_INTERCEPTORS == 1
-      TAO_ClientRequestInfo_IR_EventDef_event_get _tao_ri (
+      TAO_ClientRequestInfo_IR_EventDef_event_get ri (
         &_tao_call,
-        _collocated_tao_target_ ACE_ENV_ARG_PARAMETER
+        _collocated_tao_target_
+        ACE_ENV_ARG_PARAMETER
       );
-            ACE_CHECK_RETURN (_tao_retval._retn ());
+      ACE_CHECK_RETURN (0);
 
 #endif /* TAO_HAS_INTERCEPTORS */
       
       
       CORBA::Short _tao_response_flag = TAO_TWOWAY_RESPONSE_FLAG;
-      TAO_INTERCEPTOR (_tao_ri.response_expected (1));
+      TAO_INTERCEPTOR (ri.response_expected (1));
       
 #if TAO_HAS_INTERCEPTORS == 1
       
       ACE_TRY
         {
           _tao_vfr.send_request (
-            &_tao_ri
+            &ri
             ACE_ENV_ARG_PARAMETER
           );
           ACE_TRY_CHECK;
@@ -6694,17 +6579,17 @@
 #endif /* TAO_HAS_INTERCEPTORS */
           
           _tao_call.start (ACE_ENV_SINGLE_ARG_PARAMETER);
-                    TAO_INTERCEPTOR_CHECK_RETURN (_tao_retval._retn ());
+          TAO_INTERCEPTOR_CHECK_RETURN (0);
 
           _tao_call.prepare_header (
               ACE_static_cast (CORBA::Octet, _tao_response_flag)
               ACE_ENV_ARG_PARAMETER
             );
-                    TAO_INTERCEPTOR_CHECK_RETURN (_tao_retval._retn ());
+          TAO_INTERCEPTOR_CHECK_RETURN (0);
 
           _invoke_status =
             _tao_call.invoke (0, 0 ACE_ENV_ARG_PARAMETER);
-                    TAO_INTERCEPTOR_CHECK_RETURN (_tao_retval._retn ());
+          TAO_INTERCEPTOR_CHECK_RETURN (0);
 
           if (_invoke_status == TAO_INVOKE_EXCEPTION)
             {
@@ -6717,9 +6602,9 @@
           else if (_invoke_status == TAO_INVOKE_RESTART)
             {
               TAO_INTERCEPTOR (
-                _tao_ri.reply_status (_invoke_status);
+                ri.reply_status (_invoke_status);
                 _tao_vfr.receive_other (
-                  &_tao_ri
+                  &ri
                   ACE_ENV_ARG_PARAMETER
                 );
                 ACE_TRY_CHECK;
@@ -6730,7 +6615,7 @@
           
           TAO_InputCDR &_tao_in = _tao_call.inp_stream ();
           if (!(
-                            (_tao_in >> _tao_retval.inout ())
+                            (_tao_in >> _tao_safe_retval.inout ())
               ))
             {
               TAO_INTERCEPTOR_THROW_RETURN (
@@ -6741,13 +6626,13 @@
             }
           
 #if TAO_HAS_INTERCEPTORS == 1
-          ::CORBA::ValueDef_ptr _tao_retval_info = _tao_retval._retn ();
-          _tao_ri.result (_tao_retval_info);
-          _tao_retval = _tao_retval_info;
+          CORBA_ValueDef_ptr _tao_retval_info = _tao_safe_retval._retn ();
+          ri.result (_tao_retval_info);
+          _tao_safe_retval = _tao_retval_info;
           
-          _tao_ri.reply_status (_invoke_status);
+          ri.reply_status (_invoke_status);
           _tao_vfr.receive_reply (
-            &_tao_ri
+            &ri
             ACE_ENV_ARG_PARAMETER
           );
           ACE_TRY_CHECK;
@@ -6755,15 +6640,15 @@
       }
     ACE_CATCHANY
       {
-        _tao_ri.exception (&ACE_ANY_EXCEPTION);
+        ri.exception (&ACE_ANY_EXCEPTION);
         _tao_vfr.receive_exception (
-          &_tao_ri
+          &ri
           ACE_ENV_ARG_PARAMETER
         );
         ACE_TRY_CHECK;
         
         PortableInterceptor::ReplyStatus _tao_status =
-          _tao_ri.reply_status (ACE_ENV_SINGLE_ARG_PARAMETER);
+          ri.reply_status (ACE_ENV_SINGLE_ARG_PARAMETER);
         ACE_TRY_CHECK;
         
         if (_tao_status == PortableInterceptor::SYSTEM_EXCEPTION
@@ -6771,11 +6656,11 @@
           ACE_RE_THROW;
       }
     ACE_ENDTRY;
-        ACE_CHECK_RETURN (_tao_retval._retn ());
+    ACE_CHECK_RETURN (0);
 
     PortableInterceptor::ReplyStatus _tao_status =
-      _tao_ri.reply_status (ACE_ENV_SINGLE_ARG_PARAMETER);
-        ACE_CHECK_RETURN (_tao_retval._retn ());
+      ri.reply_status (ACE_ENV_SINGLE_ARG_PARAMETER);
+    ACE_CHECK_RETURN (0);
 
     if (_tao_status == PortableInterceptor::LOCATION_FORWARD
         || _tao_status == PortableInterceptor::TRANSPORT_RETRY)
@@ -6785,7 +6670,7 @@
     
     break;
   }
-return _tao_retval._retn ();
+return _tao_safe_retval._retn ();
 }
 
 
@@ -6841,14 +6726,13 @@
 ///////////////////////////////////////////////////////////////////////
 
 
-// TAO_IDL - Generated from 
-// be/be_visitor_interface/interface_cs.cpp:198
-
+// default constructor
 IR::EventDef::EventDef (int collocated)
 {
   this->IR_EventDef_setup_collocation (collocated);
 }
 
+// destructor
 IR::EventDef::~EventDef (void)
 {}
 
@@ -6888,8 +6772,7 @@
   return EventDef::_unchecked_narrow (obj ACE_ENV_ARG_PARAMETER);
 }
 
-IR::EventDef_ptr 
-IR::EventDef::_unchecked_narrow (
+IR::EventDef_ptr IR::EventDef::_unchecked_narrow (
     CORBA::Object_ptr obj
     ACE_ENV_ARG_DECL_NOT_USED
   )
@@ -6906,8 +6789,7 @@
       if (
           !CORBA::is_nil (stub->servant_orb_var ().ptr ()) &&
           stub->servant_orb_var ()->orb_core ()->optimize_collocation_objects () &&
-          obj->_is_collocated () &&
-          IR__TAO_EventDef_Proxy_Broker_Factory_function_pointer != 0
+          obj->_is_collocated () &&IR__TAO_EventDef_Proxy_Broker_Factory_function_pointer != 0
         )
         {
           ACE_NEW_RETURN (
@@ -6915,25 +6797,12 @@
               ::IR::EventDef (
                   stub,
                   1,
-                  obj->_servant ()
-                ),
-              EventDef::_nil ()
-            );
-        }
+            obj->_servant ()),
       
-      if (CORBA::is_nil (default_proxy))
-        {
-          ACE_NEW_RETURN (
-              default_proxy,
-              ::IR::EventDef (
-                  stub,
-                  0,
-                  obj->_servant ()
-                ),
-              EventDef::_nil ()
-            );
+          EventDef::_nil ());
         }
-      
+      if (CORBA::is_nil (default_proxy))
+        ACE_NEW_RETURN (default_proxy, ::IR::EventDef (stub, 0, obj->_servant ()), EventDef::_nil ());
       return default_proxy;
     }
   else 
@@ -6981,25 +6850,25 @@
     retv = ACE_reinterpret_cast (void*, this);
   else if (type == ACE_reinterpret_cast
     (ptr_arith_t,
-      &::CORBA::Contained::_tao_class_id))
+      &CORBA_Contained::_tao_class_id))
     retv = ACE_reinterpret_cast
       (
         void *,
         ACE_static_cast
           (
-            CORBA::Contained_ptr,
+            CORBA_Contained_ptr,
             this
           )
       );
   else if (type == ACE_reinterpret_cast
     (ptr_arith_t,
-      &::CORBA::IRObject::_tao_class_id))
+      &CORBA_IRObject::_tao_class_id))
     retv = ACE_reinterpret_cast
       (
         void *,
         ACE_static_cast
           (
-            CORBA::IRObject_ptr,
+            CORBA_IRObject_ptr,
             this
           )
       );
@@ -7031,12 +6900,12 @@
   
   return proxy.is_a (
       this,
-      event_id ACE_ENV_ARG_PARAMETER
+      event_id
+      ACE_ENV_ARG_PARAMETER
     );
 }
 
-::CORBA::ValueDef_ptr IR::EventDef::event (
-    
+CORBA_ValueDef_ptr IR::EventDef::event (
     ACE_ENV_SINGLE_ARG_DECL
   )
   ACE_THROW_SPEC ((
@@ -7048,7 +6917,8 @@
   ACE_CHECK_RETURN (0);
   
   return proxy.event (
-      this ACE_ENV_ARG_PARAMETER
+      this
+      ACE_ENV_ARG_PARAMETER
     );
 }
 
@@ -7079,7 +6949,7 @@
 
 TAO_NAMESPACE_TYPE (CORBA::TypeCode_ptr)
 TAO_NAMESPACE_BEGIN (IR)
-TAO_NAMESPACE_DEFINE (::CORBA::TypeCode_ptr, _tc_EventDef, &_tc_TAO_tc_IR_EventDef)
+TAO_NAMESPACE_DEFINE (CORBA::TypeCode_ptr, _tc_EventDef, &_tc_TAO_tc_IR_EventDef)
 TAO_NAMESPACE_END
 
 static const CORBA::Long _oc_IR_EventDescription[] =
@@ -7150,8 +7020,26 @@
   ACE_NTOHL (0x64656669), 
   ACE_NTOHL (0x6e65645f), 
   ACE_NTOHL (0x696e0000),  // name = defined_in
-  0xffffffff, // indirection
-  0xffffffa0, // negative offset (-96)
+  CORBA::tk_alias, // typecode kind for typedefs
+  68, // encapsulation length
+    TAO_ENCAP_BYTE_ORDER, // byte order
+    32,
+    ACE_NTOHL (0x49444c3a),
+    ACE_NTOHL (0x6f6d672e),
+    ACE_NTOHL (0x6f72672f),
+    ACE_NTOHL (0x49522f52),
+    ACE_NTOHL (0x65706f73),
+    ACE_NTOHL (0x69746f72),
+    ACE_NTOHL (0x7949643a),
+    ACE_NTOHL (0x312e3000),  // repository ID = IDL:omg.org/IR/RepositoryId:1.0
+    13,
+    ACE_NTOHL (0x5265706f),
+    ACE_NTOHL (0x7369746f),
+    ACE_NTOHL (0x72794964),
+    ACE_NTOHL (0x0),  // name = RepositoryId
+    CORBA::tk_string,
+    0U, // string length
+
   8,
   ACE_NTOHL (0x76657273), 
   ACE_NTOHL (0x696f6e00),  // name = version
@@ -7206,7 +7094,7 @@
 
 TAO_NAMESPACE_TYPE (CORBA::TypeCode_ptr)
 TAO_NAMESPACE_BEGIN (IR)
-TAO_NAMESPACE_DEFINE (::CORBA::TypeCode_ptr, _tc_EventDescription, &_tc_TAO_tc_IR_EventDescription)
+TAO_NAMESPACE_DEFINE (CORBA::TypeCode_ptr, _tc_EventDescription, &_tc_TAO_tc_IR_EventDescription)
 TAO_NAMESPACE_END
 
 void IR::EventDescription::_tao_any_destructor (void *_tao_void_pointer)
@@ -7215,12 +7103,6 @@
   delete tmp;
 }
 
-
-// TAO_IDL - Generated from 
-// be/be_visitor_interface/interface_cs.cpp:67
-
-int IR::EmitsDef::_tao_class_id = 0;
-
 IR::EmitsDef_ptr
 tao_IR_EmitsDef_duplicate (
     IR::EmitsDef_ptr p
@@ -7264,10 +7146,10 @@
   return *tmp;
 }
 
+int IR::EmitsDef::_tao_class_id = 0;
+
 // *************************************************************
-// IR::EmitsDef_var
-// TAO_IDL - Generated from
-// be/be_interface.cpp:654
+// Operations for class IR::EmitsDef_var
 // *************************************************************
 
 IR::EmitsDef_var::EmitsDef_var (void) // default constructor
@@ -7390,9 +7272,7 @@
 }
 
 // *************************************************************
-// IR::EmitsDef_out
-// TAO_IDL - Generated from
-// be/be_interface.cpp:932
+// Operations for class IR::EmitsDef_out
 // *************************************************************
 
 IR::EmitsDef_out::EmitsDef_out (EmitsDef_ptr &p)
@@ -7519,14 +7399,13 @@
 ///////////////////////////////////////////////////////////////////////
 
 
-// TAO_IDL - Generated from 
-// be/be_visitor_interface/interface_cs.cpp:198
-
+// default constructor
 IR::EmitsDef::EmitsDef (int collocated)
 {
   this->IR_EmitsDef_setup_collocation (collocated);
 }
 
+// destructor
 IR::EmitsDef::~EmitsDef (void)
 {}
 
@@ -7566,8 +7445,7 @@
   return EmitsDef::_unchecked_narrow (obj ACE_ENV_ARG_PARAMETER);
 }
 
-IR::EmitsDef_ptr 
-IR::EmitsDef::_unchecked_narrow (
+IR::EmitsDef_ptr IR::EmitsDef::_unchecked_narrow (
     CORBA::Object_ptr obj
     ACE_ENV_ARG_DECL_NOT_USED
   )
@@ -7584,8 +7462,7 @@
       if (
           !CORBA::is_nil (stub->servant_orb_var ().ptr ()) &&
           stub->servant_orb_var ()->orb_core ()->optimize_collocation_objects () &&
-          obj->_is_collocated () &&
-          IR__TAO_EmitsDef_Proxy_Broker_Factory_function_pointer != 0
+          obj->_is_collocated () &&IR__TAO_EmitsDef_Proxy_Broker_Factory_function_pointer != 0
         )
         {
           ACE_NEW_RETURN (
@@ -7593,25 +7470,12 @@
               ::IR::EmitsDef (
                   stub,
                   1,
-                  obj->_servant ()
-                ),
-              EmitsDef::_nil ()
-            );
-        }
+            obj->_servant ()),
       
-      if (CORBA::is_nil (default_proxy))
-        {
-          ACE_NEW_RETURN (
-              default_proxy,
-              ::IR::EmitsDef (
-                  stub,
-                  0,
-                  obj->_servant ()
-                ),
-              EmitsDef::_nil ()
-            );
+          EmitsDef::_nil ());
         }
-      
+      if (CORBA::is_nil (default_proxy))
+        ACE_NEW_RETURN (default_proxy, ::IR::EmitsDef (stub, 0, obj->_servant ()), EmitsDef::_nil ());
       return default_proxy;
     }
   else 
@@ -7672,25 +7536,25 @@
       );
   else if (type == ACE_reinterpret_cast
     (ptr_arith_t,
-      &::CORBA::Contained::_tao_class_id))
+      &CORBA_Contained::_tao_class_id))
     retv = ACE_reinterpret_cast
       (
         void *,
         ACE_static_cast
           (
-            CORBA::Contained_ptr,
+            CORBA_Contained_ptr,
             this
           )
       );
   else if (type == ACE_reinterpret_cast
     (ptr_arith_t,
-      &::CORBA::IRObject::_tao_class_id))
+      &CORBA_IRObject::_tao_class_id))
     retv = ACE_reinterpret_cast
       (
         void *,
         ACE_static_cast
           (
-            CORBA::IRObject_ptr,
+            CORBA_IRObject_ptr,
             this
           )
       );
@@ -7735,15 +7599,9 @@
 
 TAO_NAMESPACE_TYPE (CORBA::TypeCode_ptr)
 TAO_NAMESPACE_BEGIN (IR)
-TAO_NAMESPACE_DEFINE (::CORBA::TypeCode_ptr, _tc_EmitsDef, &_tc_TAO_tc_IR_EmitsDef)
+TAO_NAMESPACE_DEFINE (CORBA::TypeCode_ptr, _tc_EmitsDef, &_tc_TAO_tc_IR_EmitsDef)
 TAO_NAMESPACE_END
 
-
-// TAO_IDL - Generated from 
-// be/be_visitor_interface/interface_cs.cpp:67
-
-int IR::PublishesDef::_tao_class_id = 0;
-
 IR::PublishesDef_ptr
 tao_IR_PublishesDef_duplicate (
     IR::PublishesDef_ptr p
@@ -7787,10 +7645,10 @@
   return *tmp;
 }
 
+int IR::PublishesDef::_tao_class_id = 0;
+
 // *************************************************************
-// IR::PublishesDef_var
-// TAO_IDL - Generated from
-// be/be_interface.cpp:654
+// Operations for class IR::PublishesDef_var
 // *************************************************************
 
 IR::PublishesDef_var::PublishesDef_var (void) // default constructor
@@ -7913,9 +7771,7 @@
 }
 
 // *************************************************************
-// IR::PublishesDef_out
-// TAO_IDL - Generated from
-// be/be_interface.cpp:932
+// Operations for class IR::PublishesDef_out
 // *************************************************************
 
 IR::PublishesDef_out::PublishesDef_out (PublishesDef_ptr &p)
@@ -8042,14 +7898,13 @@
 ///////////////////////////////////////////////////////////////////////
 
 
-// TAO_IDL - Generated from 
-// be/be_visitor_interface/interface_cs.cpp:198
-
+// default constructor
 IR::PublishesDef::PublishesDef (int collocated)
 {
   this->IR_PublishesDef_setup_collocation (collocated);
 }
 
+// destructor
 IR::PublishesDef::~PublishesDef (void)
 {}
 
@@ -8089,8 +7944,7 @@
   return PublishesDef::_unchecked_narrow (obj ACE_ENV_ARG_PARAMETER);
 }
 
-IR::PublishesDef_ptr 
-IR::PublishesDef::_unchecked_narrow (
+IR::PublishesDef_ptr IR::PublishesDef::_unchecked_narrow (
     CORBA::Object_ptr obj
     ACE_ENV_ARG_DECL_NOT_USED
   )
@@ -8107,8 +7961,7 @@
       if (
           !CORBA::is_nil (stub->servant_orb_var ().ptr ()) &&
           stub->servant_orb_var ()->orb_core ()->optimize_collocation_objects () &&
-          obj->_is_collocated () &&
-          IR__TAO_PublishesDef_Proxy_Broker_Factory_function_pointer != 0
+          obj->_is_collocated () &&IR__TAO_PublishesDef_Proxy_Broker_Factory_function_pointer != 0
         )
         {
           ACE_NEW_RETURN (
@@ -8116,25 +7969,12 @@
               ::IR::PublishesDef (
                   stub,
                   1,
-                  obj->_servant ()
-                ),
-              PublishesDef::_nil ()
-            );
-        }
+            obj->_servant ()),
       
-      if (CORBA::is_nil (default_proxy))
-        {
-          ACE_NEW_RETURN (
-              default_proxy,
-              ::IR::PublishesDef (
-                  stub,
-                  0,
-                  obj->_servant ()
-                ),
-              PublishesDef::_nil ()
-            );
+          PublishesDef::_nil ());
         }
-      
+      if (CORBA::is_nil (default_proxy))
+        ACE_NEW_RETURN (default_proxy, ::IR::PublishesDef (stub, 0, obj->_servant ()), PublishesDef::_nil ());
       return default_proxy;
     }
   else 
@@ -8195,25 +8035,25 @@
       );
   else if (type == ACE_reinterpret_cast
     (ptr_arith_t,
-      &::CORBA::Contained::_tao_class_id))
+      &CORBA_Contained::_tao_class_id))
     retv = ACE_reinterpret_cast
       (
         void *,
         ACE_static_cast
           (
-            CORBA::Contained_ptr,
+            CORBA_Contained_ptr,
             this
           )
       );
   else if (type == ACE_reinterpret_cast
     (ptr_arith_t,
-      &::CORBA::IRObject::_tao_class_id))
+      &CORBA_IRObject::_tao_class_id))
     retv = ACE_reinterpret_cast
       (
         void *,
         ACE_static_cast
           (
-            CORBA::IRObject_ptr,
+            CORBA_IRObject_ptr,
             this
           )
       );
@@ -8260,15 +8100,9 @@
 
 TAO_NAMESPACE_TYPE (CORBA::TypeCode_ptr)
 TAO_NAMESPACE_BEGIN (IR)
-TAO_NAMESPACE_DEFINE (::CORBA::TypeCode_ptr, _tc_PublishesDef, &_tc_TAO_tc_IR_PublishesDef)
+TAO_NAMESPACE_DEFINE (CORBA::TypeCode_ptr, _tc_PublishesDef, &_tc_TAO_tc_IR_PublishesDef)
 TAO_NAMESPACE_END
 
-
-// TAO_IDL - Generated from 
-// be/be_visitor_interface/interface_cs.cpp:67
-
-int IR::ConsumesDef::_tao_class_id = 0;
-
 IR::ConsumesDef_ptr
 tao_IR_ConsumesDef_duplicate (
     IR::ConsumesDef_ptr p
@@ -8312,10 +8146,10 @@
   return *tmp;
 }
 
+int IR::ConsumesDef::_tao_class_id = 0;
+
 // *************************************************************
-// IR::ConsumesDef_var
-// TAO_IDL - Generated from
-// be/be_interface.cpp:654
+// Operations for class IR::ConsumesDef_var
 // *************************************************************
 
 IR::ConsumesDef_var::ConsumesDef_var (void) // default constructor
@@ -8438,9 +8272,7 @@
 }
 
 // *************************************************************
-// IR::ConsumesDef_out
-// TAO_IDL - Generated from
-// be/be_interface.cpp:932
+// Operations for class IR::ConsumesDef_out
 // *************************************************************
 
 IR::ConsumesDef_out::ConsumesDef_out (ConsumesDef_ptr &p)
@@ -8567,14 +8399,13 @@
 ///////////////////////////////////////////////////////////////////////
 
 
-// TAO_IDL - Generated from 
-// be/be_visitor_interface/interface_cs.cpp:198
-
+// default constructor
 IR::ConsumesDef::ConsumesDef (int collocated)
 {
   this->IR_ConsumesDef_setup_collocation (collocated);
 }
 
+// destructor
 IR::ConsumesDef::~ConsumesDef (void)
 {}
 
@@ -8614,8 +8445,7 @@
   return ConsumesDef::_unchecked_narrow (obj ACE_ENV_ARG_PARAMETER);
 }
 
-IR::ConsumesDef_ptr 
-IR::ConsumesDef::_unchecked_narrow (
+IR::ConsumesDef_ptr IR::ConsumesDef::_unchecked_narrow (
     CORBA::Object_ptr obj
     ACE_ENV_ARG_DECL_NOT_USED
   )
@@ -8632,8 +8462,7 @@
       if (
           !CORBA::is_nil (stub->servant_orb_var ().ptr ()) &&
           stub->servant_orb_var ()->orb_core ()->optimize_collocation_objects () &&
-          obj->_is_collocated () &&
-          IR__TAO_ConsumesDef_Proxy_Broker_Factory_function_pointer != 0
+          obj->_is_collocated () &&IR__TAO_ConsumesDef_Proxy_Broker_Factory_function_pointer != 0
         )
         {
           ACE_NEW_RETURN (
@@ -8641,25 +8470,12 @@
               ::IR::ConsumesDef (
                   stub,
                   1,
-                  obj->_servant ()
-                ),
-              ConsumesDef::_nil ()
-            );
-        }
+            obj->_servant ()),
       
-      if (CORBA::is_nil (default_proxy))
-        {
-          ACE_NEW_RETURN (
-              default_proxy,
-              ::IR::ConsumesDef (
-                  stub,
-                  0,
-                  obj->_servant ()
-                ),
-              ConsumesDef::_nil ()
-            );
+          ConsumesDef::_nil ());
         }
-      
+      if (CORBA::is_nil (default_proxy))
+        ACE_NEW_RETURN (default_proxy, ::IR::ConsumesDef (stub, 0, obj->_servant ()), ConsumesDef::_nil ());
       return default_proxy;
     }
   else 
@@ -8720,25 +8536,25 @@
       );
   else if (type == ACE_reinterpret_cast
     (ptr_arith_t,
-      &::CORBA::Contained::_tao_class_id))
+      &CORBA_Contained::_tao_class_id))
     retv = ACE_reinterpret_cast
       (
         void *,
         ACE_static_cast
           (
-            CORBA::Contained_ptr,
+            CORBA_Contained_ptr,
             this
           )
       );
   else if (type == ACE_reinterpret_cast
     (ptr_arith_t,
-      &::CORBA::IRObject::_tao_class_id))
+      &CORBA_IRObject::_tao_class_id))
     retv = ACE_reinterpret_cast
       (
         void *,
         ACE_static_cast
           (
-            CORBA::IRObject_ptr,
+            CORBA_IRObject_ptr,
             this
           )
       );
@@ -8784,15 +8600,9 @@
 
 TAO_NAMESPACE_TYPE (CORBA::TypeCode_ptr)
 TAO_NAMESPACE_BEGIN (IR)
-TAO_NAMESPACE_DEFINE (::CORBA::TypeCode_ptr, _tc_ConsumesDef, &_tc_TAO_tc_IR_ConsumesDef)
+TAO_NAMESPACE_DEFINE (CORBA::TypeCode_ptr, _tc_ConsumesDef, &_tc_TAO_tc_IR_ConsumesDef)
 TAO_NAMESPACE_END
 
-
-// TAO_IDL - Generated from 
-// be/be_visitor_interface/interface_cs.cpp:67
-
-int IR::ComponentDef::_tao_class_id = 0;
-
 IR::ComponentDef_ptr
 tao_IR_ComponentDef_duplicate (
     IR::ComponentDef_ptr p
@@ -8836,10 +8646,10 @@
   return *tmp;
 }
 
+int IR::ComponentDef::_tao_class_id = 0;
+
 // *************************************************************
-// IR::ComponentDef_var
-// TAO_IDL - Generated from
-// be/be_interface.cpp:654
+// Operations for class IR::ComponentDef_var
 // *************************************************************
 
 IR::ComponentDef_var::ComponentDef_var (void) // default constructor
@@ -8962,9 +8772,7 @@
 }
 
 // *************************************************************
-// IR::ComponentDef_out
-// TAO_IDL - Generated from
-// be/be_interface.cpp:932
+// Operations for class IR::ComponentDef_out
 // *************************************************************
 
 IR::ComponentDef_out::ComponentDef_out (ComponentDef_ptr &p)
@@ -9029,30 +8837,38 @@
 public:
   TAO_ClientRequestInfo_IR_ComponentDef_supported_interfaces_get (
       TAO_GIOP_Invocation *_tao_invocation,
-      CORBA::Object_ptr _tao_target ACE_ENV_ARG_DECL_WITH_DEFAULTS
-    );
+      CORBA::Object_ptr _tao_target
+      ACE_ENV_ARG_DECL_WITH_DEFAULTS);
+
+
+  virtual Dynamic::ParameterList * arguments (
+      ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)
 
-  virtual Dynamic::ParameterList * arguments (ACE_ENV_SINGLE_ARG_DECL)
     ACE_THROW_SPEC ((CORBA::SystemException));
   
-  virtual Dynamic::ExceptionList * exceptions (ACE_ENV_SINGLE_ARG_DECL)
+  virtual Dynamic::ExceptionList * exceptions (
+      ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)
+
     ACE_THROW_SPEC ((CORBA::SystemException));
   
-  virtual CORBA::Any * result (ACE_ENV_SINGLE_ARG_DECL)
+  virtual CORBA::Any * result (
+      ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)
+
     ACE_THROW_SPEC ((CORBA::SystemException));
 
-  void result (CORBA::InterfaceDefSeq * result);
+  void result (CORBA_InterfaceDefSeq * result);
 
 private:
   TAO_ClientRequestInfo_IR_ComponentDef_supported_interfaces_get (const TAO_ClientRequestInfo_IR_ComponentDef_supported_interfaces_get &);
   void operator= (const TAO_ClientRequestInfo_IR_ComponentDef_supported_interfaces_get &);
 
-  CORBA::InterfaceDefSeq * _result;
+  CORBA_InterfaceDefSeq * _result;
 };
 
 TAO_ClientRequestInfo_IR_ComponentDef_supported_interfaces_get::TAO_ClientRequestInfo_IR_ComponentDef_supported_interfaces_get (
     TAO_GIOP_Invocation *_tao_invocation,
-    CORBA::Object_ptr _tao_target ACE_ENV_ARG_DECL_NOT_USED    
+    CORBA::Object_ptr _tao_target
+    ACE_ENV_ARG_DECL_NOT_USED
   )
   : TAO_ClientRequestInfo_i (_tao_invocation, _tao_target)
 {}
@@ -9067,7 +8883,6 @@
   ACE_CHECK_RETURN (0);
   
   return parameter_list;
-
 }
 
 Dynamic::ExceptionList *
@@ -9082,6 +8897,7 @@
   return exception_list;
 }
 
+
 CORBA::Any * 
 TAO_ClientRequestInfo_IR_ComponentDef_supported_interfaces_get::result (ACE_ENV_SINGLE_ARG_DECL)
   ACE_THROW_SPEC ((CORBA::SystemException))
@@ -9099,7 +8915,7 @@
 }
 
 void 
-TAO_ClientRequestInfo_IR_ComponentDef_supported_interfaces_get::result (::CORBA::InterfaceDefSeq * result)
+TAO_ClientRequestInfo_IR_ComponentDef_supported_interfaces_get::result (CORBA_InterfaceDefSeq * result)
 {
   // update the result 
   this->_result = result;
@@ -9111,30 +8927,38 @@
   TAO_ClientRequestInfo_IR_ComponentDef_supported_interfaces_set (
       TAO_GIOP_Invocation *_tao_invocation,
       CORBA::Object_ptr _tao_target,
-      const CORBA::InterfaceDefSeq & supported_interfaces ACE_ENV_ARG_DECL_WITH_DEFAULTS
-    );
+      const CORBA_InterfaceDefSeq & supported_interfaces
+      ACE_ENV_ARG_DECL_WITH_DEFAULTS);
+
+
+  virtual Dynamic::ParameterList * arguments (
+      ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)
 
-  virtual Dynamic::ParameterList * arguments (ACE_ENV_SINGLE_ARG_DECL)
     ACE_THROW_SPEC ((CORBA::SystemException));
   
-  virtual Dynamic::ExceptionList * exceptions (ACE_ENV_SINGLE_ARG_DECL)
+  virtual Dynamic::ExceptionList * exceptions (
+      ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)
+
     ACE_THROW_SPEC ((CORBA::SystemException));
   
-  virtual CORBA::Any * result (ACE_ENV_SINGLE_ARG_DECL)
+  virtual CORBA::Any * result (
+      ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)
+
     ACE_THROW_SPEC ((CORBA::SystemException));
 
 private:
   TAO_ClientRequestInfo_IR_ComponentDef_supported_interfaces_set (const TAO_ClientRequestInfo_IR_ComponentDef_supported_interfaces_set &);
   void operator= (const TAO_ClientRequestInfo_IR_ComponentDef_supported_interfaces_set &);
 
-  const CORBA::InterfaceDefSeq & supported_interfaces_;
+  const CORBA_InterfaceDefSeq & supported_interfaces_;
   
 };
 
 TAO_ClientRequestInfo_IR_ComponentDef_supported_interfaces_set::TAO_ClientRequestInfo_IR_ComponentDef_supported_interfaces_set (
     TAO_GIOP_Invocation *_tao_invocation,
     CORBA::Object_ptr _tao_target,
-    const CORBA::InterfaceDefSeq & supported_interfaces ACE_ENV_ARG_DECL_NOT_USED    
+    const CORBA_InterfaceDefSeq & supported_interfaces
+    ACE_ENV_ARG_DECL_NOT_USED
   )
   : TAO_ClientRequestInfo_i (_tao_invocation, _tao_target),
     supported_interfaces_ (supported_interfaces)
@@ -9173,6 +8997,7 @@
   return exception_list;
 }
 
+
 CORBA::Any * 
 TAO_ClientRequestInfo_IR_ComponentDef_supported_interfaces_set::result (ACE_ENV_SINGLE_ARG_DECL)
   ACE_THROW_SPEC ((CORBA::SystemException))
@@ -9191,16 +9016,23 @@
 public:
   TAO_ClientRequestInfo_IR_ComponentDef_base_component_get (
       TAO_GIOP_Invocation *_tao_invocation,
-      CORBA::Object_ptr _tao_target ACE_ENV_ARG_DECL_WITH_DEFAULTS
-    );
+      CORBA::Object_ptr _tao_target
+      ACE_ENV_ARG_DECL_WITH_DEFAULTS);
+
+
+  virtual Dynamic::ParameterList * arguments (
+      ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)
 
-  virtual Dynamic::ParameterList * arguments (ACE_ENV_SINGLE_ARG_DECL)
     ACE_THROW_SPEC ((CORBA::SystemException));
   
-  virtual Dynamic::ExceptionList * exceptions (ACE_ENV_SINGLE_ARG_DECL)
+  virtual Dynamic::ExceptionList * exceptions (
+      ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)
+
     ACE_THROW_SPEC ((CORBA::SystemException));
   
-  virtual CORBA::Any * result (ACE_ENV_SINGLE_ARG_DECL)
+  virtual CORBA::Any * result (
+      ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)
+
     ACE_THROW_SPEC ((CORBA::SystemException));
 
   void result (IR::ComponentDef_ptr result);
@@ -9214,7 +9046,8 @@
 
 TAO_ClientRequestInfo_IR_ComponentDef_base_component_get::TAO_ClientRequestInfo_IR_ComponentDef_base_component_get (
     TAO_GIOP_Invocation *_tao_invocation,
-    CORBA::Object_ptr _tao_target ACE_ENV_ARG_DECL_NOT_USED    
+    CORBA::Object_ptr _tao_target
+    ACE_ENV_ARG_DECL_NOT_USED
   )
   : TAO_ClientRequestInfo_i (_tao_invocation, _tao_target)
 {}
@@ -9229,7 +9062,6 @@
   ACE_CHECK_RETURN (0);
   
   return parameter_list;
-
 }
 
 Dynamic::ExceptionList *
@@ -9244,6 +9076,7 @@
   return exception_list;
 }
 
+
 CORBA::Any * 
 TAO_ClientRequestInfo_IR_ComponentDef_base_component_get::result (ACE_ENV_SINGLE_ARG_DECL)
   ACE_THROW_SPEC ((CORBA::SystemException))
@@ -9261,7 +9094,7 @@
 }
 
 void 
-TAO_ClientRequestInfo_IR_ComponentDef_base_component_get::result (::IR::ComponentDef_ptr result)
+TAO_ClientRequestInfo_IR_ComponentDef_base_component_get::result (IR::ComponentDef_ptr result)
 {
   // update the result 
   this->_result = result;
@@ -9272,16 +9105,23 @@
 public:
   TAO_ClientRequestInfo_IR_ComponentDef_provides_interfaces_get (
       TAO_GIOP_Invocation *_tao_invocation,
-      CORBA::Object_ptr _tao_target ACE_ENV_ARG_DECL_WITH_DEFAULTS
-    );
+      CORBA::Object_ptr _tao_target
+      ACE_ENV_ARG_DECL_WITH_DEFAULTS);
+
+
+  virtual Dynamic::ParameterList * arguments (
+      ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)
 
-  virtual Dynamic::ParameterList * arguments (ACE_ENV_SINGLE_ARG_DECL)
     ACE_THROW_SPEC ((CORBA::SystemException));
   
-  virtual Dynamic::ExceptionList * exceptions (ACE_ENV_SINGLE_ARG_DECL)
+  virtual Dynamic::ExceptionList * exceptions (
+      ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)
+
     ACE_THROW_SPEC ((CORBA::SystemException));
   
-  virtual CORBA::Any * result (ACE_ENV_SINGLE_ARG_DECL)
+  virtual CORBA::Any * result (
+      ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)
+
     ACE_THROW_SPEC ((CORBA::SystemException));
 
   void result (IR::ProvidesDefSeq * result);
@@ -9295,7 +9135,8 @@
 
 TAO_ClientRequestInfo_IR_ComponentDef_provides_interfaces_get::TAO_ClientRequestInfo_IR_ComponentDef_provides_interfaces_get (
     TAO_GIOP_Invocation *_tao_invocation,
-    CORBA::Object_ptr _tao_target ACE_ENV_ARG_DECL_NOT_USED    
+    CORBA::Object_ptr _tao_target
+    ACE_ENV_ARG_DECL_NOT_USED
   )
   : TAO_ClientRequestInfo_i (_tao_invocation, _tao_target)
 {}
@@ -9310,7 +9151,6 @@
   ACE_CHECK_RETURN (0);
   
   return parameter_list;
-
 }
 
 Dynamic::ExceptionList *
@@ -9325,6 +9165,7 @@
   return exception_list;
 }
 
+
 CORBA::Any * 
 TAO_ClientRequestInfo_IR_ComponentDef_provides_interfaces_get::result (ACE_ENV_SINGLE_ARG_DECL)
   ACE_THROW_SPEC ((CORBA::SystemException))
@@ -9342,7 +9183,7 @@
 }
 
 void 
-TAO_ClientRequestInfo_IR_ComponentDef_provides_interfaces_get::result (::IR::ProvidesDefSeq * result)
+TAO_ClientRequestInfo_IR_ComponentDef_provides_interfaces_get::result (IR::ProvidesDefSeq * result)
 {
   // update the result 
   this->_result = result;
@@ -9353,16 +9194,23 @@
 public:
   TAO_ClientRequestInfo_IR_ComponentDef_uses_interfaces_get (
       TAO_GIOP_Invocation *_tao_invocation,
-      CORBA::Object_ptr _tao_target ACE_ENV_ARG_DECL_WITH_DEFAULTS
-    );
+      CORBA::Object_ptr _tao_target
+      ACE_ENV_ARG_DECL_WITH_DEFAULTS);
+
+
+  virtual Dynamic::ParameterList * arguments (
+      ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)
 
-  virtual Dynamic::ParameterList * arguments (ACE_ENV_SINGLE_ARG_DECL)
     ACE_THROW_SPEC ((CORBA::SystemException));
   
-  virtual Dynamic::ExceptionList * exceptions (ACE_ENV_SINGLE_ARG_DECL)
+  virtual Dynamic::ExceptionList * exceptions (
+      ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)
+
     ACE_THROW_SPEC ((CORBA::SystemException));
   
-  virtual CORBA::Any * result (ACE_ENV_SINGLE_ARG_DECL)
+  virtual CORBA::Any * result (
+      ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)
+
     ACE_THROW_SPEC ((CORBA::SystemException));
 
   void result (IR::UsesDefSeq * result);
@@ -9376,7 +9224,8 @@
 
 TAO_ClientRequestInfo_IR_ComponentDef_uses_interfaces_get::TAO_ClientRequestInfo_IR_ComponentDef_uses_interfaces_get (
     TAO_GIOP_Invocation *_tao_invocation,
-    CORBA::Object_ptr _tao_target ACE_ENV_ARG_DECL_NOT_USED    
+    CORBA::Object_ptr _tao_target
+    ACE_ENV_ARG_DECL_NOT_USED
   )
   : TAO_ClientRequestInfo_i (_tao_invocation, _tao_target)
 {}
@@ -9391,7 +9240,6 @@
   ACE_CHECK_RETURN (0);
   
   return parameter_list;
-
 }
 
 Dynamic::ExceptionList *
@@ -9406,6 +9254,7 @@
   return exception_list;
 }
 
+
 CORBA::Any * 
 TAO_ClientRequestInfo_IR_ComponentDef_uses_interfaces_get::result (ACE_ENV_SINGLE_ARG_DECL)
   ACE_THROW_SPEC ((CORBA::SystemException))
@@ -9423,7 +9272,7 @@
 }
 
 void 
-TAO_ClientRequestInfo_IR_ComponentDef_uses_interfaces_get::result (::IR::UsesDefSeq * result)
+TAO_ClientRequestInfo_IR_ComponentDef_uses_interfaces_get::result (IR::UsesDefSeq * result)
 {
   // update the result 
   this->_result = result;
@@ -9434,16 +9283,23 @@
 public:
   TAO_ClientRequestInfo_IR_ComponentDef_emits_events_get (
       TAO_GIOP_Invocation *_tao_invocation,
-      CORBA::Object_ptr _tao_target ACE_ENV_ARG_DECL_WITH_DEFAULTS
-    );
+      CORBA::Object_ptr _tao_target
+      ACE_ENV_ARG_DECL_WITH_DEFAULTS);
+
+
+  virtual Dynamic::ParameterList * arguments (
+      ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)
 
-  virtual Dynamic::ParameterList * arguments (ACE_ENV_SINGLE_ARG_DECL)
     ACE_THROW_SPEC ((CORBA::SystemException));
   
-  virtual Dynamic::ExceptionList * exceptions (ACE_ENV_SINGLE_ARG_DECL)
+  virtual Dynamic::ExceptionList * exceptions (
+      ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)
+
     ACE_THROW_SPEC ((CORBA::SystemException));
   
-  virtual CORBA::Any * result (ACE_ENV_SINGLE_ARG_DECL)
+  virtual CORBA::Any * result (
+      ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)
+
     ACE_THROW_SPEC ((CORBA::SystemException));
 
   void result (IR::EmitsDefSeq * result);
@@ -9457,7 +9313,8 @@
 
 TAO_ClientRequestInfo_IR_ComponentDef_emits_events_get::TAO_ClientRequestInfo_IR_ComponentDef_emits_events_get (
     TAO_GIOP_Invocation *_tao_invocation,
-    CORBA::Object_ptr _tao_target ACE_ENV_ARG_DECL_NOT_USED    
+    CORBA::Object_ptr _tao_target
+    ACE_ENV_ARG_DECL_NOT_USED
   )
   : TAO_ClientRequestInfo_i (_tao_invocation, _tao_target)
 {}
@@ -9472,7 +9329,6 @@
   ACE_CHECK_RETURN (0);
   
   return parameter_list;
-
 }
 
 Dynamic::ExceptionList *
@@ -9487,6 +9343,7 @@
   return exception_list;
 }
 
+
 CORBA::Any * 
 TAO_ClientRequestInfo_IR_ComponentDef_emits_events_get::result (ACE_ENV_SINGLE_ARG_DECL)
   ACE_THROW_SPEC ((CORBA::SystemException))
@@ -9504,7 +9361,7 @@
 }
 
 void 
-TAO_ClientRequestInfo_IR_ComponentDef_emits_events_get::result (::IR::EmitsDefSeq * result)
+TAO_ClientRequestInfo_IR_ComponentDef_emits_events_get::result (IR::EmitsDefSeq * result)
 {
   // update the result 
   this->_result = result;
@@ -9515,16 +9372,23 @@
 public:
   TAO_ClientRequestInfo_IR_ComponentDef_publishes_events_get (
       TAO_GIOP_Invocation *_tao_invocation,
-      CORBA::Object_ptr _tao_target ACE_ENV_ARG_DECL_WITH_DEFAULTS
-    );
+      CORBA::Object_ptr _tao_target
+      ACE_ENV_ARG_DECL_WITH_DEFAULTS);
+
+
+  virtual Dynamic::ParameterList * arguments (
+      ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)
 
-  virtual Dynamic::ParameterList * arguments (ACE_ENV_SINGLE_ARG_DECL)
     ACE_THROW_SPEC ((CORBA::SystemException));
   
-  virtual Dynamic::ExceptionList * exceptions (ACE_ENV_SINGLE_ARG_DECL)
+  virtual Dynamic::ExceptionList * exceptions (
+      ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)
+
     ACE_THROW_SPEC ((CORBA::SystemException));
   
-  virtual CORBA::Any * result (ACE_ENV_SINGLE_ARG_DECL)
+  virtual CORBA::Any * result (
+      ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)
+
     ACE_THROW_SPEC ((CORBA::SystemException));
 
   void result (IR::PublishesDefSeq * result);
@@ -9538,7 +9402,8 @@
 
 TAO_ClientRequestInfo_IR_ComponentDef_publishes_events_get::TAO_ClientRequestInfo_IR_ComponentDef_publishes_events_get (
     TAO_GIOP_Invocation *_tao_invocation,
-    CORBA::Object_ptr _tao_target ACE_ENV_ARG_DECL_NOT_USED    
+    CORBA::Object_ptr _tao_target
+    ACE_ENV_ARG_DECL_NOT_USED
   )
   : TAO_ClientRequestInfo_i (_tao_invocation, _tao_target)
 {}
@@ -9553,7 +9418,6 @@
   ACE_CHECK_RETURN (0);
   
   return parameter_list;
-
 }
 
 Dynamic::ExceptionList *
@@ -9568,6 +9432,7 @@
   return exception_list;
 }
 
+
 CORBA::Any * 
 TAO_ClientRequestInfo_IR_ComponentDef_publishes_events_get::result (ACE_ENV_SINGLE_ARG_DECL)
   ACE_THROW_SPEC ((CORBA::SystemException))
@@ -9585,7 +9450,7 @@
 }
 
 void 
-TAO_ClientRequestInfo_IR_ComponentDef_publishes_events_get::result (::IR::PublishesDefSeq * result)
+TAO_ClientRequestInfo_IR_ComponentDef_publishes_events_get::result (IR::PublishesDefSeq * result)
 {
   // update the result 
   this->_result = result;
@@ -9596,16 +9461,23 @@
 public:
   TAO_ClientRequestInfo_IR_ComponentDef_consumes_events_get (
       TAO_GIOP_Invocation *_tao_invocation,
-      CORBA::Object_ptr _tao_target ACE_ENV_ARG_DECL_WITH_DEFAULTS
-    );
+      CORBA::Object_ptr _tao_target
+      ACE_ENV_ARG_DECL_WITH_DEFAULTS);
+
+
+  virtual Dynamic::ParameterList * arguments (
+      ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)
 
-  virtual Dynamic::ParameterList * arguments (ACE_ENV_SINGLE_ARG_DECL)
     ACE_THROW_SPEC ((CORBA::SystemException));
   
-  virtual Dynamic::ExceptionList * exceptions (ACE_ENV_SINGLE_ARG_DECL)
+  virtual Dynamic::ExceptionList * exceptions (
+      ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)
+
     ACE_THROW_SPEC ((CORBA::SystemException));
   
-  virtual CORBA::Any * result (ACE_ENV_SINGLE_ARG_DECL)
+  virtual CORBA::Any * result (
+      ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)
+
     ACE_THROW_SPEC ((CORBA::SystemException));
 
   void result (IR::ConsumesDefSeq * result);
@@ -9619,7 +9491,8 @@
 
 TAO_ClientRequestInfo_IR_ComponentDef_consumes_events_get::TAO_ClientRequestInfo_IR_ComponentDef_consumes_events_get (
     TAO_GIOP_Invocation *_tao_invocation,
-    CORBA::Object_ptr _tao_target ACE_ENV_ARG_DECL_NOT_USED    
+    CORBA::Object_ptr _tao_target
+    ACE_ENV_ARG_DECL_NOT_USED
   )
   : TAO_ClientRequestInfo_i (_tao_invocation, _tao_target)
 {}
@@ -9634,7 +9507,6 @@
   ACE_CHECK_RETURN (0);
   
   return parameter_list;
-
 }
 
 Dynamic::ExceptionList *
@@ -9649,6 +9521,7 @@
   return exception_list;
 }
 
+
 CORBA::Any * 
 TAO_ClientRequestInfo_IR_ComponentDef_consumes_events_get::result (ACE_ENV_SINGLE_ARG_DECL)
   ACE_THROW_SPEC ((CORBA::SystemException))
@@ -9666,7 +9539,7 @@
 }
 
 void 
-TAO_ClientRequestInfo_IR_ComponentDef_consumes_events_get::result (::IR::ConsumesDefSeq * result)
+TAO_ClientRequestInfo_IR_ComponentDef_consumes_events_get::result (IR::ConsumesDefSeq * result)
 {
   // update the result 
   this->_result = result;
@@ -9677,16 +9550,23 @@
 public:
   TAO_ClientRequestInfo_IR_ComponentDef_is_basic_get (
       TAO_GIOP_Invocation *_tao_invocation,
-      CORBA::Object_ptr _tao_target ACE_ENV_ARG_DECL_WITH_DEFAULTS
-    );
+      CORBA::Object_ptr _tao_target
+      ACE_ENV_ARG_DECL_WITH_DEFAULTS);
+
+
+  virtual Dynamic::ParameterList * arguments (
+      ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)
 
-  virtual Dynamic::ParameterList * arguments (ACE_ENV_SINGLE_ARG_DECL)
     ACE_THROW_SPEC ((CORBA::SystemException));
   
-  virtual Dynamic::ExceptionList * exceptions (ACE_ENV_SINGLE_ARG_DECL)
+  virtual Dynamic::ExceptionList * exceptions (
+      ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)
+
     ACE_THROW_SPEC ((CORBA::SystemException));
   
-  virtual CORBA::Any * result (ACE_ENV_SINGLE_ARG_DECL)
+  virtual CORBA::Any * result (
+      ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)
+
     ACE_THROW_SPEC ((CORBA::SystemException));
 
   void result (CORBA::Boolean result);
@@ -9700,7 +9580,8 @@
 
 TAO_ClientRequestInfo_IR_ComponentDef_is_basic_get::TAO_ClientRequestInfo_IR_ComponentDef_is_basic_get (
     TAO_GIOP_Invocation *_tao_invocation,
-    CORBA::Object_ptr _tao_target ACE_ENV_ARG_DECL_NOT_USED    
+    CORBA::Object_ptr _tao_target
+    ACE_ENV_ARG_DECL_NOT_USED
   )
   : TAO_ClientRequestInfo_i (_tao_invocation, _tao_target)
 {}
@@ -9715,7 +9596,6 @@
   ACE_CHECK_RETURN (0);
   
   return parameter_list;
-
 }
 
 Dynamic::ExceptionList *
@@ -9730,6 +9610,7 @@
   return exception_list;
 }
 
+
 CORBA::Any * 
 TAO_ClientRequestInfo_IR_ComponentDef_is_basic_get::result (ACE_ENV_SINGLE_ARG_DECL)
   ACE_THROW_SPEC ((CORBA::SystemException))
@@ -9762,16 +9643,23 @@
       const char * id,
       const char * name,
       const char * version,
-      CORBA::InterfaceDef_ptr interface_type ACE_ENV_ARG_DECL_WITH_DEFAULTS
-    );
+      CORBA_InterfaceDef_ptr interface_type
+      ACE_ENV_ARG_DECL_WITH_DEFAULTS);
+
+
+  virtual Dynamic::ParameterList * arguments (
+      ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)
 
-  virtual Dynamic::ParameterList * arguments (ACE_ENV_SINGLE_ARG_DECL)
     ACE_THROW_SPEC ((CORBA::SystemException));
   
-  virtual Dynamic::ExceptionList * exceptions (ACE_ENV_SINGLE_ARG_DECL)
+  virtual Dynamic::ExceptionList * exceptions (
+      ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)
+
     ACE_THROW_SPEC ((CORBA::SystemException));
   
-  virtual CORBA::Any * result (ACE_ENV_SINGLE_ARG_DECL)
+  virtual CORBA::Any * result (
+      ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)
+
     ACE_THROW_SPEC ((CORBA::SystemException));
 
   void result (IR::ProvidesDef_ptr result);
@@ -9783,7 +9671,7 @@
   const char * id_;
   const char * name_;
   const char * version_;
-  CORBA::InterfaceDef_ptr interface_type_;
+  CORBA_InterfaceDef_ptr interface_type_;
   IR::ProvidesDef_ptr _result;
 };
 
@@ -9793,7 +9681,8 @@
     const char * id,
     const char * name,
     const char * version,
-    CORBA::InterfaceDef_ptr interface_type ACE_ENV_ARG_DECL_NOT_USED    
+    CORBA_InterfaceDef_ptr interface_type
+    ACE_ENV_ARG_DECL_NOT_USED
   )
   : TAO_ClientRequestInfo_i (_tao_invocation, _tao_target),
     id_ (id),
@@ -9844,6 +9733,7 @@
   return exception_list;
 }
 
+
 CORBA::Any * 
 TAO_ClientRequestInfo_IR_ComponentDef_create_provides::result (ACE_ENV_SINGLE_ARG_DECL)
   ACE_THROW_SPEC ((CORBA::SystemException))
@@ -9861,7 +9751,7 @@
 }
 
 void 
-TAO_ClientRequestInfo_IR_ComponentDef_create_provides::result (::IR::ProvidesDef_ptr result)
+TAO_ClientRequestInfo_IR_ComponentDef_create_provides::result (IR::ProvidesDef_ptr result)
 {
   // update the result 
   this->_result = result;
@@ -9876,17 +9766,24 @@
       const char * id,
       const char * name,
       const char * version,
-      CORBA::InterfaceDef_ptr interface_type,
-      const CORBA::Boolean & is_multiple ACE_ENV_ARG_DECL_WITH_DEFAULTS
-    );
+      CORBA_InterfaceDef_ptr interface_type,
+      const CORBA::Boolean & is_multiple
+      ACE_ENV_ARG_DECL_WITH_DEFAULTS);
+
+
+  virtual Dynamic::ParameterList * arguments (
+      ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)
 
-  virtual Dynamic::ParameterList * arguments (ACE_ENV_SINGLE_ARG_DECL)
     ACE_THROW_SPEC ((CORBA::SystemException));
   
-  virtual Dynamic::ExceptionList * exceptions (ACE_ENV_SINGLE_ARG_DECL)
+  virtual Dynamic::ExceptionList * exceptions (
+      ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)
+
     ACE_THROW_SPEC ((CORBA::SystemException));
   
-  virtual CORBA::Any * result (ACE_ENV_SINGLE_ARG_DECL)
+  virtual CORBA::Any * result (
+      ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)
+
     ACE_THROW_SPEC ((CORBA::SystemException));
 
   void result (IR::UsesDef_ptr result);
@@ -9898,7 +9795,7 @@
   const char * id_;
   const char * name_;
   const char * version_;
-  CORBA::InterfaceDef_ptr interface_type_;
+  CORBA_InterfaceDef_ptr interface_type_;
   const CORBA::Boolean & is_multiple_;
   IR::UsesDef_ptr _result;
 };
@@ -9909,8 +9806,9 @@
     const char * id,
     const char * name,
     const char * version,
-    CORBA::InterfaceDef_ptr interface_type,
-    const CORBA::Boolean & is_multiple ACE_ENV_ARG_DECL_NOT_USED    
+    CORBA_InterfaceDef_ptr interface_type,
+    const CORBA::Boolean & is_multiple
+    ACE_ENV_ARG_DECL_NOT_USED
   )
   : TAO_ClientRequestInfo_i (_tao_invocation, _tao_target),
     id_ (id),
@@ -9965,6 +9863,7 @@
   return exception_list;
 }
 
+
 CORBA::Any * 
 TAO_ClientRequestInfo_IR_ComponentDef_create_uses::result (ACE_ENV_SINGLE_ARG_DECL)
   ACE_THROW_SPEC ((CORBA::SystemException))
@@ -9982,7 +9881,7 @@
 }
 
 void 
-TAO_ClientRequestInfo_IR_ComponentDef_create_uses::result (::IR::UsesDef_ptr result)
+TAO_ClientRequestInfo_IR_ComponentDef_create_uses::result (IR::UsesDef_ptr result)
 {
   // update the result 
   this->_result = result;
@@ -9997,16 +9896,23 @@
       const char * id,
       const char * name,
       const char * version,
-      CORBA::ValueDef_ptr value ACE_ENV_ARG_DECL_WITH_DEFAULTS
-    );
+      CORBA_ValueDef_ptr value
+      ACE_ENV_ARG_DECL_WITH_DEFAULTS);
+
+
+  virtual Dynamic::ParameterList * arguments (
+      ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)
 
-  virtual Dynamic::ParameterList * arguments (ACE_ENV_SINGLE_ARG_DECL)
     ACE_THROW_SPEC ((CORBA::SystemException));
   
-  virtual Dynamic::ExceptionList * exceptions (ACE_ENV_SINGLE_ARG_DECL)
+  virtual Dynamic::ExceptionList * exceptions (
+      ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)
+
     ACE_THROW_SPEC ((CORBA::SystemException));
   
-  virtual CORBA::Any * result (ACE_ENV_SINGLE_ARG_DECL)
+  virtual CORBA::Any * result (
+      ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)
+
     ACE_THROW_SPEC ((CORBA::SystemException));
 
   void result (IR::EmitsDef_ptr result);
@@ -10018,7 +9924,7 @@
   const char * id_;
   const char * name_;
   const char * version_;
-  CORBA::ValueDef_ptr value_;
+  CORBA_ValueDef_ptr value_;
   IR::EmitsDef_ptr _result;
 };
 
@@ -10028,7 +9934,8 @@
     const char * id,
     const char * name,
     const char * version,
-    CORBA::ValueDef_ptr value ACE_ENV_ARG_DECL_NOT_USED    
+    CORBA_ValueDef_ptr value
+    ACE_ENV_ARG_DECL_NOT_USED
   )
   : TAO_ClientRequestInfo_i (_tao_invocation, _tao_target),
     id_ (id),
@@ -10079,6 +9986,7 @@
   return exception_list;
 }
 
+
 CORBA::Any * 
 TAO_ClientRequestInfo_IR_ComponentDef_create_emits::result (ACE_ENV_SINGLE_ARG_DECL)
   ACE_THROW_SPEC ((CORBA::SystemException))
@@ -10096,7 +10004,7 @@
 }
 
 void 
-TAO_ClientRequestInfo_IR_ComponentDef_create_emits::result (::IR::EmitsDef_ptr result)
+TAO_ClientRequestInfo_IR_ComponentDef_create_emits::result (IR::EmitsDef_ptr result)
 {
   // update the result 
   this->_result = result;
@@ -10111,16 +10019,23 @@
       const char * id,
       const char * name,
       const char * version,
-      CORBA::ValueDef_ptr value ACE_ENV_ARG_DECL_WITH_DEFAULTS
-    );
+      CORBA_ValueDef_ptr value
+      ACE_ENV_ARG_DECL_WITH_DEFAULTS);
+
+
+  virtual Dynamic::ParameterList * arguments (
+      ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)
 
-  virtual Dynamic::ParameterList * arguments (ACE_ENV_SINGLE_ARG_DECL)
     ACE_THROW_SPEC ((CORBA::SystemException));
   
-  virtual Dynamic::ExceptionList * exceptions (ACE_ENV_SINGLE_ARG_DECL)
+  virtual Dynamic::ExceptionList * exceptions (
+      ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)
+
     ACE_THROW_SPEC ((CORBA::SystemException));
   
-  virtual CORBA::Any * result (ACE_ENV_SINGLE_ARG_DECL)
+  virtual CORBA::Any * result (
+      ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)
+
     ACE_THROW_SPEC ((CORBA::SystemException));
 
   void result (IR::PublishesDef_ptr result);
@@ -10132,7 +10047,7 @@
   const char * id_;
   const char * name_;
   const char * version_;
-  CORBA::ValueDef_ptr value_;
+  CORBA_ValueDef_ptr value_;
   IR::PublishesDef_ptr _result;
 };
 
@@ -10142,7 +10057,8 @@
     const char * id,
     const char * name,
     const char * version,
-    CORBA::ValueDef_ptr value ACE_ENV_ARG_DECL_NOT_USED    
+    CORBA_ValueDef_ptr value
+    ACE_ENV_ARG_DECL_NOT_USED
   )
   : TAO_ClientRequestInfo_i (_tao_invocation, _tao_target),
     id_ (id),
@@ -10193,6 +10109,7 @@
   return exception_list;
 }
 
+
 CORBA::Any * 
 TAO_ClientRequestInfo_IR_ComponentDef_create_publishes::result (ACE_ENV_SINGLE_ARG_DECL)
   ACE_THROW_SPEC ((CORBA::SystemException))
@@ -10210,7 +10127,7 @@
 }
 
 void 
-TAO_ClientRequestInfo_IR_ComponentDef_create_publishes::result (::IR::PublishesDef_ptr result)
+TAO_ClientRequestInfo_IR_ComponentDef_create_publishes::result (IR::PublishesDef_ptr result)
 {
   // update the result 
   this->_result = result;
@@ -10225,16 +10142,23 @@
       const char * id,
       const char * name,
       const char * version,
-      CORBA::ValueDef_ptr value ACE_ENV_ARG_DECL_WITH_DEFAULTS
-    );
+      CORBA_ValueDef_ptr value
+      ACE_ENV_ARG_DECL_WITH_DEFAULTS);
+
+
+  virtual Dynamic::ParameterList * arguments (
+      ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)
 
-  virtual Dynamic::ParameterList * arguments (ACE_ENV_SINGLE_ARG_DECL)
     ACE_THROW_SPEC ((CORBA::SystemException));
   
-  virtual Dynamic::ExceptionList * exceptions (ACE_ENV_SINGLE_ARG_DECL)
+  virtual Dynamic::ExceptionList * exceptions (
+      ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)
+
     ACE_THROW_SPEC ((CORBA::SystemException));
   
-  virtual CORBA::Any * result (ACE_ENV_SINGLE_ARG_DECL)
+  virtual CORBA::Any * result (
+      ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)
+
     ACE_THROW_SPEC ((CORBA::SystemException));
 
   void result (IR::ConsumesDef_ptr result);
@@ -10246,7 +10170,7 @@
   const char * id_;
   const char * name_;
   const char * version_;
-  CORBA::ValueDef_ptr value_;
+  CORBA_ValueDef_ptr value_;
   IR::ConsumesDef_ptr _result;
 };
 
@@ -10256,7 +10180,8 @@
     const char * id,
     const char * name,
     const char * version,
-    CORBA::ValueDef_ptr value ACE_ENV_ARG_DECL_NOT_USED    
+    CORBA_ValueDef_ptr value
+    ACE_ENV_ARG_DECL_NOT_USED
   )
   : TAO_ClientRequestInfo_i (_tao_invocation, _tao_target),
     id_ (id),
@@ -10307,6 +10232,7 @@
   return exception_list;
 }
 
+
 CORBA::Any * 
 TAO_ClientRequestInfo_IR_ComponentDef_create_consumes::result (ACE_ENV_SINGLE_ARG_DECL)
   ACE_THROW_SPEC ((CORBA::SystemException))
@@ -10324,7 +10250,7 @@
 }
 
 void 
-TAO_ClientRequestInfo_IR_ComponentDef_create_consumes::result (::IR::ConsumesDef_ptr result)
+TAO_ClientRequestInfo_IR_ComponentDef_create_consumes::result (IR::ConsumesDef_ptr result)
 {
   // update the result 
   this->_result = result;
@@ -10344,7 +10270,7 @@
 
 // Remote Implementation of the IDL interface methods
 
-::CORBA::InterfaceDefSeq * IR::_TAO_ComponentDef_Remote_Proxy_Impl::supported_interfaces (
+CORBA_InterfaceDefSeq * IR::_TAO_ComponentDef_Remote_Proxy_Impl::supported_interfaces (
     CORBA_Object *_collocated_tao_target_
     ACE_ENV_ARG_DECL
   )
@@ -10353,19 +10279,16 @@
   ))
 {
   
-  CORBA::InterfaceDefSeq_var _tao_retval;
+  CORBA_InterfaceDefSeq *_tao_retval = 0;
 
   
   TAO_Stub *istub = _collocated_tao_target_->_stubobj ();
   if (istub == 0)
-    ACE_THROW_RETURN (CORBA::INTERNAL (),_tao_retval._retn ());
+    ACE_THROW_RETURN (CORBA::INTERNAL (), 0);
 
   
-  {
-    CORBA::InterfaceDefSeq *tmp;
-    ACE_NEW_RETURN (tmp, CORBA::InterfaceDefSeq, _tao_retval._retn ());
-    _tao_retval = tmp;
-  }
+  ACE_NEW_RETURN (_tao_retval, CORBA_InterfaceDefSeq, _tao_retval);
+  CORBA_InterfaceDefSeq_var _tao_safe_retval (_tao_retval);
   TAO_GIOP_Twoway_Invocation _tao_call (
       istub,
       "_get_supported_interfaces",
@@ -10390,24 +10313,25 @@
       _invoke_status = TAO_INVOKE_EXCEPTION;
       
 #if TAO_HAS_INTERCEPTORS == 1
-      TAO_ClientRequestInfo_IR_ComponentDef_supported_interfaces_get _tao_ri (
+      TAO_ClientRequestInfo_IR_ComponentDef_supported_interfaces_get ri (
         &_tao_call,
-        _collocated_tao_target_ ACE_ENV_ARG_PARAMETER
+        _collocated_tao_target_
+        ACE_ENV_ARG_PARAMETER
       );
-            ACE_CHECK_RETURN (_tao_retval._retn ());
+      ACE_CHECK_RETURN (0);
 
 #endif /* TAO_HAS_INTERCEPTORS */
       
       
       CORBA::Short _tao_response_flag = TAO_TWOWAY_RESPONSE_FLAG;
-      TAO_INTERCEPTOR (_tao_ri.response_expected (1));
+      TAO_INTERCEPTOR (ri.response_expected (1));
       
 #if TAO_HAS_INTERCEPTORS == 1
       
       ACE_TRY
         {
           _tao_vfr.send_request (
-            &_tao_ri
+            &ri
             ACE_ENV_ARG_PARAMETER
           );
           ACE_TRY_CHECK;
@@ -10421,17 +10345,17 @@
 #endif /* TAO_HAS_INTERCEPTORS */
           
           _tao_call.start (ACE_ENV_SINGLE_ARG_PARAMETER);
-                    TAO_INTERCEPTOR_CHECK_RETURN (_tao_retval._retn ());
+          TAO_INTERCEPTOR_CHECK_RETURN (0);
 
           _tao_call.prepare_header (
               ACE_static_cast (CORBA::Octet, _tao_response_flag)
               ACE_ENV_ARG_PARAMETER
             );
-                    TAO_INTERCEPTOR_CHECK_RETURN (_tao_retval._retn ());
+          TAO_INTERCEPTOR_CHECK_RETURN (0);
 
           _invoke_status =
             _tao_call.invoke (0, 0 ACE_ENV_ARG_PARAMETER);
-                    TAO_INTERCEPTOR_CHECK_RETURN (_tao_retval._retn ());
+          TAO_INTERCEPTOR_CHECK_RETURN (0);
 
           if (_invoke_status == TAO_INVOKE_EXCEPTION)
             {
@@ -10444,9 +10368,9 @@
           else if (_invoke_status == TAO_INVOKE_RESTART)
             {
               TAO_INTERCEPTOR (
-                _tao_ri.reply_status (_invoke_status);
+                ri.reply_status (_invoke_status);
                 _tao_vfr.receive_other (
-                  &_tao_ri
+                  &ri
                   ACE_ENV_ARG_PARAMETER
                 );
                 ACE_TRY_CHECK;
@@ -10457,7 +10381,7 @@
           
           TAO_InputCDR &_tao_in = _tao_call.inp_stream ();
           if (!(
-                            (_tao_in >> _tao_retval.inout ())
+                            (_tao_in >> _tao_safe_retval.inout ())
               ))
             {
               TAO_INTERCEPTOR_THROW_RETURN (
@@ -10468,13 +10392,13 @@
             }
           
 #if TAO_HAS_INTERCEPTORS == 1
-          ::CORBA::InterfaceDefSeq * _tao_retval_info = _tao_retval._retn ();
-          _tao_ri.result (_tao_retval_info);
-          _tao_retval = _tao_retval_info;
+          CORBA_InterfaceDefSeq * _tao_retval_info = _tao_safe_retval._retn ();
+          ri.result (_tao_retval_info);
+          _tao_safe_retval = _tao_retval_info;
           
-          _tao_ri.reply_status (_invoke_status);
+          ri.reply_status (_invoke_status);
           _tao_vfr.receive_reply (
-            &_tao_ri
+            &ri
             ACE_ENV_ARG_PARAMETER
           );
           ACE_TRY_CHECK;
@@ -10482,15 +10406,15 @@
       }
     ACE_CATCHANY
       {
-        _tao_ri.exception (&ACE_ANY_EXCEPTION);
+        ri.exception (&ACE_ANY_EXCEPTION);
         _tao_vfr.receive_exception (
-          &_tao_ri
+          &ri
           ACE_ENV_ARG_PARAMETER
         );
         ACE_TRY_CHECK;
         
         PortableInterceptor::ReplyStatus _tao_status =
-          _tao_ri.reply_status (ACE_ENV_SINGLE_ARG_PARAMETER);
+          ri.reply_status (ACE_ENV_SINGLE_ARG_PARAMETER);
         ACE_TRY_CHECK;
         
         if (_tao_status == PortableInterceptor::SYSTEM_EXCEPTION
@@ -10498,11 +10422,11 @@
           ACE_RE_THROW;
       }
     ACE_ENDTRY;
-        ACE_CHECK_RETURN (_tao_retval._retn ());
+    ACE_CHECK_RETURN (0);
 
     PortableInterceptor::ReplyStatus _tao_status =
-      _tao_ri.reply_status (ACE_ENV_SINGLE_ARG_PARAMETER);
-        ACE_CHECK_RETURN (_tao_retval._retn ());
+      ri.reply_status (ACE_ENV_SINGLE_ARG_PARAMETER);
+    ACE_CHECK_RETURN (0);
 
     if (_tao_status == PortableInterceptor::LOCATION_FORWARD
         || _tao_status == PortableInterceptor::TRANSPORT_RETRY)
@@ -10512,12 +10436,12 @@
     
     break;
   }
-return _tao_retval._retn ();
+return _tao_safe_retval._retn ();
 }
 
 void IR::_TAO_ComponentDef_Remote_Proxy_Impl::supported_interfaces (
     CORBA_Object *_collocated_tao_target_,
-    const CORBA::InterfaceDefSeq & supported_interfaces
+    const CORBA_InterfaceDefSeq & supported_interfaces
     ACE_ENV_ARG_DECL
   )
   ACE_THROW_SPEC ((
@@ -10557,10 +10481,11 @@
       _invoke_status = TAO_INVOKE_EXCEPTION;
       
 #if TAO_HAS_INTERCEPTORS == 1
-      TAO_ClientRequestInfo_IR_ComponentDef_supported_interfaces_set _tao_ri (
+      TAO_ClientRequestInfo_IR_ComponentDef_supported_interfaces_set ri (
         &_tao_call,
         _collocated_tao_target_,
-        supported_interfaces ACE_ENV_ARG_PARAMETER
+        supported_interfaces
+        ACE_ENV_ARG_PARAMETER
       );
             ACE_CHECK;
 
@@ -10568,14 +10493,14 @@
       
       
       CORBA::Short _tao_response_flag = TAO_TWOWAY_RESPONSE_FLAG;
-      TAO_INTERCEPTOR (_tao_ri.response_expected (1));
+      TAO_INTERCEPTOR (ri.response_expected (1));
       
 #if TAO_HAS_INTERCEPTORS == 1
       
       ACE_TRY
         {
           _tao_vfr.send_request (
-            &_tao_ri
+            &ri
             ACE_ENV_ARG_PARAMETER
           );
           ACE_TRY_CHECK;
@@ -10619,9 +10544,9 @@
           else if (_invoke_status == TAO_INVOKE_RESTART)
             {
               TAO_INTERCEPTOR (
-                _tao_ri.reply_status (_invoke_status);
+                ri.reply_status (_invoke_status);
                 _tao_vfr.receive_other (
-                  &_tao_ri
+                  &ri
                   ACE_ENV_ARG_PARAMETER
                 );
                 ACE_TRY_CHECK;
@@ -10633,9 +10558,9 @@
           
 #if TAO_HAS_INTERCEPTORS == 1
           
-          _tao_ri.reply_status (_invoke_status);
+          ri.reply_status (_invoke_status);
           _tao_vfr.receive_reply (
-            &_tao_ri
+            &ri
             ACE_ENV_ARG_PARAMETER
           );
           ACE_TRY_CHECK;
@@ -10643,15 +10568,15 @@
       }
     ACE_CATCHANY
       {
-        _tao_ri.exception (&ACE_ANY_EXCEPTION);
+        ri.exception (&ACE_ANY_EXCEPTION);
         _tao_vfr.receive_exception (
-          &_tao_ri
+          &ri
           ACE_ENV_ARG_PARAMETER
         );
         ACE_TRY_CHECK;
         
         PortableInterceptor::ReplyStatus _tao_status =
-          _tao_ri.reply_status (ACE_ENV_SINGLE_ARG_PARAMETER);
+          ri.reply_status (ACE_ENV_SINGLE_ARG_PARAMETER);
         ACE_TRY_CHECK;
         
         if (_tao_status == PortableInterceptor::SYSTEM_EXCEPTION
@@ -10662,7 +10587,7 @@
         ACE_CHECK;
 
     PortableInterceptor::ReplyStatus _tao_status =
-      _tao_ri.reply_status (ACE_ENV_SINGLE_ARG_PARAMETER);
+      ri.reply_status (ACE_ENV_SINGLE_ARG_PARAMETER);
         ACE_CHECK;
 
     if (_tao_status == PortableInterceptor::LOCATION_FORWARD
@@ -10676,7 +10601,7 @@
 
 }
 
-::IR::ComponentDef_ptr IR::_TAO_ComponentDef_Remote_Proxy_Impl::base_component (
+IR::ComponentDef_ptr IR::_TAO_ComponentDef_Remote_Proxy_Impl::base_component (
     CORBA_Object *_collocated_tao_target_
     ACE_ENV_ARG_DECL
   )
@@ -10685,13 +10610,13 @@
   ))
 {
   
-  IR::ComponentDef_var _tao_retval (IR::ComponentDef::_nil ());
-
+  IR::ComponentDef_ptr _tao_retval = IR::ComponentDef::_nil ();
+  IR::ComponentDef_var _tao_safe_retval (_tao_retval);
 
   
   TAO_Stub *istub = _collocated_tao_target_->_stubobj ();
   if (istub == 0)
-    ACE_THROW_RETURN (CORBA::INTERNAL (),_tao_retval._retn ());
+    ACE_THROW_RETURN (CORBA::INTERNAL (), 0);
 
   
   TAO_GIOP_Twoway_Invocation _tao_call (
@@ -10718,24 +10643,25 @@
       _invoke_status = TAO_INVOKE_EXCEPTION;
       
 #if TAO_HAS_INTERCEPTORS == 1
-      TAO_ClientRequestInfo_IR_ComponentDef_base_component_get _tao_ri (
+      TAO_ClientRequestInfo_IR_ComponentDef_base_component_get ri (
         &_tao_call,
-        _collocated_tao_target_ ACE_ENV_ARG_PARAMETER
+        _collocated_tao_target_
+        ACE_ENV_ARG_PARAMETER
       );
-            ACE_CHECK_RETURN (_tao_retval._retn ());
+      ACE_CHECK_RETURN (0);
 
 #endif /* TAO_HAS_INTERCEPTORS */
       
       
       CORBA::Short _tao_response_flag = TAO_TWOWAY_RESPONSE_FLAG;
-      TAO_INTERCEPTOR (_tao_ri.response_expected (1));
+      TAO_INTERCEPTOR (ri.response_expected (1));
       
 #if TAO_HAS_INTERCEPTORS == 1
       
       ACE_TRY
         {
           _tao_vfr.send_request (
-            &_tao_ri
+            &ri
             ACE_ENV_ARG_PARAMETER
           );
           ACE_TRY_CHECK;
@@ -10749,17 +10675,17 @@
 #endif /* TAO_HAS_INTERCEPTORS */
           
           _tao_call.start (ACE_ENV_SINGLE_ARG_PARAMETER);
-                    TAO_INTERCEPTOR_CHECK_RETURN (_tao_retval._retn ());
+          TAO_INTERCEPTOR_CHECK_RETURN (0);
 
           _tao_call.prepare_header (
               ACE_static_cast (CORBA::Octet, _tao_response_flag)
               ACE_ENV_ARG_PARAMETER
             );
-                    TAO_INTERCEPTOR_CHECK_RETURN (_tao_retval._retn ());
+          TAO_INTERCEPTOR_CHECK_RETURN (0);
 
           _invoke_status =
             _tao_call.invoke (0, 0 ACE_ENV_ARG_PARAMETER);
-                    TAO_INTERCEPTOR_CHECK_RETURN (_tao_retval._retn ());
+          TAO_INTERCEPTOR_CHECK_RETURN (0);
 
           if (_invoke_status == TAO_INVOKE_EXCEPTION)
             {
@@ -10772,9 +10698,9 @@
           else if (_invoke_status == TAO_INVOKE_RESTART)
             {
               TAO_INTERCEPTOR (
-                _tao_ri.reply_status (_invoke_status);
+                ri.reply_status (_invoke_status);
                 _tao_vfr.receive_other (
-                  &_tao_ri
+                  &ri
                   ACE_ENV_ARG_PARAMETER
                 );
                 ACE_TRY_CHECK;
@@ -10785,7 +10711,7 @@
           
           TAO_InputCDR &_tao_in = _tao_call.inp_stream ();
           if (!(
-                            (_tao_in >> _tao_retval.inout ())
+                            (_tao_in >> _tao_safe_retval.inout ())
               ))
             {
               TAO_INTERCEPTOR_THROW_RETURN (
@@ -10796,13 +10722,13 @@
             }
           
 #if TAO_HAS_INTERCEPTORS == 1
-          ::IR::ComponentDef_ptr _tao_retval_info = _tao_retval._retn ();
-          _tao_ri.result (_tao_retval_info);
-          _tao_retval = _tao_retval_info;
+          IR::ComponentDef_ptr _tao_retval_info = _tao_safe_retval._retn ();
+          ri.result (_tao_retval_info);
+          _tao_safe_retval = _tao_retval_info;
           
-          _tao_ri.reply_status (_invoke_status);
+          ri.reply_status (_invoke_status);
           _tao_vfr.receive_reply (
-            &_tao_ri
+            &ri
             ACE_ENV_ARG_PARAMETER
           );
           ACE_TRY_CHECK;
@@ -10810,15 +10736,15 @@
       }
     ACE_CATCHANY
       {
-        _tao_ri.exception (&ACE_ANY_EXCEPTION);
+        ri.exception (&ACE_ANY_EXCEPTION);
         _tao_vfr.receive_exception (
-          &_tao_ri
+          &ri
           ACE_ENV_ARG_PARAMETER
         );
         ACE_TRY_CHECK;
         
         PortableInterceptor::ReplyStatus _tao_status =
-          _tao_ri.reply_status (ACE_ENV_SINGLE_ARG_PARAMETER);
+          ri.reply_status (ACE_ENV_SINGLE_ARG_PARAMETER);
         ACE_TRY_CHECK;
         
         if (_tao_status == PortableInterceptor::SYSTEM_EXCEPTION
@@ -10826,11 +10752,11 @@
           ACE_RE_THROW;
       }
     ACE_ENDTRY;
-        ACE_CHECK_RETURN (_tao_retval._retn ());
+    ACE_CHECK_RETURN (0);
 
     PortableInterceptor::ReplyStatus _tao_status =
-      _tao_ri.reply_status (ACE_ENV_SINGLE_ARG_PARAMETER);
-        ACE_CHECK_RETURN (_tao_retval._retn ());
+      ri.reply_status (ACE_ENV_SINGLE_ARG_PARAMETER);
+    ACE_CHECK_RETURN (0);
 
     if (_tao_status == PortableInterceptor::LOCATION_FORWARD
         || _tao_status == PortableInterceptor::TRANSPORT_RETRY)
@@ -10840,10 +10766,10 @@
     
     break;
   }
-return _tao_retval._retn ();
+return _tao_safe_retval._retn ();
 }
 
-::IR::ProvidesDefSeq * IR::_TAO_ComponentDef_Remote_Proxy_Impl::provides_interfaces (
+IR::ProvidesDefSeq * IR::_TAO_ComponentDef_Remote_Proxy_Impl::provides_interfaces (
     CORBA_Object *_collocated_tao_target_
     ACE_ENV_ARG_DECL
   )
@@ -10852,19 +10778,16 @@
   ))
 {
   
-  IR::ProvidesDefSeq_var _tao_retval;
+  IR::ProvidesDefSeq *_tao_retval = 0;
 
   
   TAO_Stub *istub = _collocated_tao_target_->_stubobj ();
   if (istub == 0)
-    ACE_THROW_RETURN (CORBA::INTERNAL (),_tao_retval._retn ());
+    ACE_THROW_RETURN (CORBA::INTERNAL (), 0);
 
   
-  {
-    IR::ProvidesDefSeq *tmp;
-    ACE_NEW_RETURN (tmp, IR::ProvidesDefSeq, _tao_retval._retn ());
-    _tao_retval = tmp;
-  }
+  ACE_NEW_RETURN (_tao_retval, IR::ProvidesDefSeq, _tao_retval);
+  IR::ProvidesDefSeq_var _tao_safe_retval (_tao_retval);
   TAO_GIOP_Twoway_Invocation _tao_call (
       istub,
       "_get_provides_interfaces",
@@ -10889,24 +10812,25 @@
       _invoke_status = TAO_INVOKE_EXCEPTION;
       
 #if TAO_HAS_INTERCEPTORS == 1
-      TAO_ClientRequestInfo_IR_ComponentDef_provides_interfaces_get _tao_ri (
+      TAO_ClientRequestInfo_IR_ComponentDef_provides_interfaces_get ri (
         &_tao_call,
-        _collocated_tao_target_ ACE_ENV_ARG_PARAMETER
+        _collocated_tao_target_
+        ACE_ENV_ARG_PARAMETER
       );
-            ACE_CHECK_RETURN (_tao_retval._retn ());
+      ACE_CHECK_RETURN (0);
 
 #endif /* TAO_HAS_INTERCEPTORS */
       
       
       CORBA::Short _tao_response_flag = TAO_TWOWAY_RESPONSE_FLAG;
-      TAO_INTERCEPTOR (_tao_ri.response_expected (1));
+      TAO_INTERCEPTOR (ri.response_expected (1));
       
 #if TAO_HAS_INTERCEPTORS == 1
       
       ACE_TRY
         {
           _tao_vfr.send_request (
-            &_tao_ri
+            &ri
             ACE_ENV_ARG_PARAMETER
           );
           ACE_TRY_CHECK;
@@ -10920,17 +10844,17 @@
 #endif /* TAO_HAS_INTERCEPTORS */
           
           _tao_call.start (ACE_ENV_SINGLE_ARG_PARAMETER);
-                    TAO_INTERCEPTOR_CHECK_RETURN (_tao_retval._retn ());
+          TAO_INTERCEPTOR_CHECK_RETURN (0);
 
           _tao_call.prepare_header (
               ACE_static_cast (CORBA::Octet, _tao_response_flag)
               ACE_ENV_ARG_PARAMETER
             );
-                    TAO_INTERCEPTOR_CHECK_RETURN (_tao_retval._retn ());
+          TAO_INTERCEPTOR_CHECK_RETURN (0);
 
           _invoke_status =
             _tao_call.invoke (0, 0 ACE_ENV_ARG_PARAMETER);
-                    TAO_INTERCEPTOR_CHECK_RETURN (_tao_retval._retn ());
+          TAO_INTERCEPTOR_CHECK_RETURN (0);
 
           if (_invoke_status == TAO_INVOKE_EXCEPTION)
             {
@@ -10943,9 +10867,9 @@
           else if (_invoke_status == TAO_INVOKE_RESTART)
             {
               TAO_INTERCEPTOR (
-                _tao_ri.reply_status (_invoke_status);
+                ri.reply_status (_invoke_status);
                 _tao_vfr.receive_other (
-                  &_tao_ri
+                  &ri
                   ACE_ENV_ARG_PARAMETER
                 );
                 ACE_TRY_CHECK;
@@ -10956,7 +10880,7 @@
           
           TAO_InputCDR &_tao_in = _tao_call.inp_stream ();
           if (!(
-                            (_tao_in >> _tao_retval.inout ())
+                            (_tao_in >> _tao_safe_retval.inout ())
               ))
             {
               TAO_INTERCEPTOR_THROW_RETURN (
@@ -10967,13 +10891,13 @@
             }
           
 #if TAO_HAS_INTERCEPTORS == 1
-          ::IR::ProvidesDefSeq * _tao_retval_info = _tao_retval._retn ();
-          _tao_ri.result (_tao_retval_info);
-          _tao_retval = _tao_retval_info;
+          IR::ProvidesDefSeq * _tao_retval_info = _tao_safe_retval._retn ();
+          ri.result (_tao_retval_info);
+          _tao_safe_retval = _tao_retval_info;
           
-          _tao_ri.reply_status (_invoke_status);
+          ri.reply_status (_invoke_status);
           _tao_vfr.receive_reply (
-            &_tao_ri
+            &ri
             ACE_ENV_ARG_PARAMETER
           );
           ACE_TRY_CHECK;
@@ -10981,15 +10905,15 @@
       }
     ACE_CATCHANY
       {
-        _tao_ri.exception (&ACE_ANY_EXCEPTION);
+        ri.exception (&ACE_ANY_EXCEPTION);
         _tao_vfr.receive_exception (
-          &_tao_ri
+          &ri
           ACE_ENV_ARG_PARAMETER
         );
         ACE_TRY_CHECK;
         
         PortableInterceptor::ReplyStatus _tao_status =
-          _tao_ri.reply_status (ACE_ENV_SINGLE_ARG_PARAMETER);
+          ri.reply_status (ACE_ENV_SINGLE_ARG_PARAMETER);
         ACE_TRY_CHECK;
         
         if (_tao_status == PortableInterceptor::SYSTEM_EXCEPTION
@@ -10997,11 +10921,11 @@
           ACE_RE_THROW;
       }
     ACE_ENDTRY;
-        ACE_CHECK_RETURN (_tao_retval._retn ());
+    ACE_CHECK_RETURN (0);
 
     PortableInterceptor::ReplyStatus _tao_status =
-      _tao_ri.reply_status (ACE_ENV_SINGLE_ARG_PARAMETER);
-        ACE_CHECK_RETURN (_tao_retval._retn ());
+      ri.reply_status (ACE_ENV_SINGLE_ARG_PARAMETER);
+    ACE_CHECK_RETURN (0);
 
     if (_tao_status == PortableInterceptor::LOCATION_FORWARD
         || _tao_status == PortableInterceptor::TRANSPORT_RETRY)
@@ -11011,10 +10935,10 @@
     
     break;
   }
-return _tao_retval._retn ();
+return _tao_safe_retval._retn ();
 }
 
-::IR::UsesDefSeq * IR::_TAO_ComponentDef_Remote_Proxy_Impl::uses_interfaces (
+IR::UsesDefSeq * IR::_TAO_ComponentDef_Remote_Proxy_Impl::uses_interfaces (
     CORBA_Object *_collocated_tao_target_
     ACE_ENV_ARG_DECL
   )
@@ -11023,19 +10947,16 @@
   ))
 {
   
-  IR::UsesDefSeq_var _tao_retval;
+  IR::UsesDefSeq *_tao_retval = 0;
 
   
   TAO_Stub *istub = _collocated_tao_target_->_stubobj ();
   if (istub == 0)
-    ACE_THROW_RETURN (CORBA::INTERNAL (),_tao_retval._retn ());
+    ACE_THROW_RETURN (CORBA::INTERNAL (), 0);
 
   
-  {
-    IR::UsesDefSeq *tmp;
-    ACE_NEW_RETURN (tmp, IR::UsesDefSeq, _tao_retval._retn ());
-    _tao_retval = tmp;
-  }
+  ACE_NEW_RETURN (_tao_retval, IR::UsesDefSeq, _tao_retval);
+  IR::UsesDefSeq_var _tao_safe_retval (_tao_retval);
   TAO_GIOP_Twoway_Invocation _tao_call (
       istub,
       "_get_uses_interfaces",
@@ -11060,24 +10981,25 @@
       _invoke_status = TAO_INVOKE_EXCEPTION;
       
 #if TAO_HAS_INTERCEPTORS == 1
-      TAO_ClientRequestInfo_IR_ComponentDef_uses_interfaces_get _tao_ri (
+      TAO_ClientRequestInfo_IR_ComponentDef_uses_interfaces_get ri (
         &_tao_call,
-        _collocated_tao_target_ ACE_ENV_ARG_PARAMETER
+        _collocated_tao_target_
+        ACE_ENV_ARG_PARAMETER
       );
-            ACE_CHECK_RETURN (_tao_retval._retn ());
+      ACE_CHECK_RETURN (0);
 
 #endif /* TAO_HAS_INTERCEPTORS */
       
       
       CORBA::Short _tao_response_flag = TAO_TWOWAY_RESPONSE_FLAG;
-      TAO_INTERCEPTOR (_tao_ri.response_expected (1));
+      TAO_INTERCEPTOR (ri.response_expected (1));
       
 #if TAO_HAS_INTERCEPTORS == 1
       
       ACE_TRY
         {
           _tao_vfr.send_request (
-            &_tao_ri
+            &ri
             ACE_ENV_ARG_PARAMETER
           );
           ACE_TRY_CHECK;
@@ -11091,17 +11013,17 @@
 #endif /* TAO_HAS_INTERCEPTORS */
           
           _tao_call.start (ACE_ENV_SINGLE_ARG_PARAMETER);
-                    TAO_INTERCEPTOR_CHECK_RETURN (_tao_retval._retn ());
+          TAO_INTERCEPTOR_CHECK_RETURN (0);
 
           _tao_call.prepare_header (
               ACE_static_cast (CORBA::Octet, _tao_response_flag)
               ACE_ENV_ARG_PARAMETER
             );
-                    TAO_INTERCEPTOR_CHECK_RETURN (_tao_retval._retn ());
+          TAO_INTERCEPTOR_CHECK_RETURN (0);
 
           _invoke_status =
             _tao_call.invoke (0, 0 ACE_ENV_ARG_PARAMETER);
-                    TAO_INTERCEPTOR_CHECK_RETURN (_tao_retval._retn ());
+          TAO_INTERCEPTOR_CHECK_RETURN (0);
 
           if (_invoke_status == TAO_INVOKE_EXCEPTION)
             {
@@ -11114,9 +11036,9 @@
           else if (_invoke_status == TAO_INVOKE_RESTART)
             {
               TAO_INTERCEPTOR (
-                _tao_ri.reply_status (_invoke_status);
+                ri.reply_status (_invoke_status);
                 _tao_vfr.receive_other (
-                  &_tao_ri
+                  &ri
                   ACE_ENV_ARG_PARAMETER
                 );
                 ACE_TRY_CHECK;
@@ -11127,7 +11049,7 @@
           
           TAO_InputCDR &_tao_in = _tao_call.inp_stream ();
           if (!(
-                            (_tao_in >> _tao_retval.inout ())
+                            (_tao_in >> _tao_safe_retval.inout ())
               ))
             {
               TAO_INTERCEPTOR_THROW_RETURN (
@@ -11138,13 +11060,13 @@
             }
           
 #if TAO_HAS_INTERCEPTORS == 1
-          ::IR::UsesDefSeq * _tao_retval_info = _tao_retval._retn ();
-          _tao_ri.result (_tao_retval_info);
-          _tao_retval = _tao_retval_info;
+          IR::UsesDefSeq * _tao_retval_info = _tao_safe_retval._retn ();
+          ri.result (_tao_retval_info);
+          _tao_safe_retval = _tao_retval_info;
           
-          _tao_ri.reply_status (_invoke_status);
+          ri.reply_status (_invoke_status);
           _tao_vfr.receive_reply (
-            &_tao_ri
+            &ri
             ACE_ENV_ARG_PARAMETER
           );
           ACE_TRY_CHECK;
@@ -11152,15 +11074,15 @@
       }
     ACE_CATCHANY
       {
-        _tao_ri.exception (&ACE_ANY_EXCEPTION);
+        ri.exception (&ACE_ANY_EXCEPTION);
         _tao_vfr.receive_exception (
-          &_tao_ri
+          &ri
           ACE_ENV_ARG_PARAMETER
         );
         ACE_TRY_CHECK;
         
         PortableInterceptor::ReplyStatus _tao_status =
-          _tao_ri.reply_status (ACE_ENV_SINGLE_ARG_PARAMETER);
+          ri.reply_status (ACE_ENV_SINGLE_ARG_PARAMETER);
         ACE_TRY_CHECK;
         
         if (_tao_status == PortableInterceptor::SYSTEM_EXCEPTION
@@ -11168,11 +11090,11 @@
           ACE_RE_THROW;
       }
     ACE_ENDTRY;
-        ACE_CHECK_RETURN (_tao_retval._retn ());
+    ACE_CHECK_RETURN (0);
 
     PortableInterceptor::ReplyStatus _tao_status =
-      _tao_ri.reply_status (ACE_ENV_SINGLE_ARG_PARAMETER);
-        ACE_CHECK_RETURN (_tao_retval._retn ());
+      ri.reply_status (ACE_ENV_SINGLE_ARG_PARAMETER);
+    ACE_CHECK_RETURN (0);
 
     if (_tao_status == PortableInterceptor::LOCATION_FORWARD
         || _tao_status == PortableInterceptor::TRANSPORT_RETRY)
@@ -11182,10 +11104,10 @@
     
     break;
   }
-return _tao_retval._retn ();
+return _tao_safe_retval._retn ();
 }
 
-::IR::EmitsDefSeq * IR::_TAO_ComponentDef_Remote_Proxy_Impl::emits_events (
+IR::EmitsDefSeq * IR::_TAO_ComponentDef_Remote_Proxy_Impl::emits_events (
     CORBA_Object *_collocated_tao_target_
     ACE_ENV_ARG_DECL
   )
@@ -11194,19 +11116,16 @@
   ))
 {
   
-  IR::EmitsDefSeq_var _tao_retval;
+  IR::EmitsDefSeq *_tao_retval = 0;
 
   
   TAO_Stub *istub = _collocated_tao_target_->_stubobj ();
   if (istub == 0)
-    ACE_THROW_RETURN (CORBA::INTERNAL (),_tao_retval._retn ());
+    ACE_THROW_RETURN (CORBA::INTERNAL (), 0);
 
   
-  {
-    IR::EmitsDefSeq *tmp;
-    ACE_NEW_RETURN (tmp, IR::EmitsDefSeq, _tao_retval._retn ());
-    _tao_retval = tmp;
-  }
+  ACE_NEW_RETURN (_tao_retval, IR::EmitsDefSeq, _tao_retval);
+  IR::EmitsDefSeq_var _tao_safe_retval (_tao_retval);
   TAO_GIOP_Twoway_Invocation _tao_call (
       istub,
       "_get_emits_events",
@@ -11231,24 +11150,25 @@
       _invoke_status = TAO_INVOKE_EXCEPTION;
       
 #if TAO_HAS_INTERCEPTORS == 1
-      TAO_ClientRequestInfo_IR_ComponentDef_emits_events_get _tao_ri (
+      TAO_ClientRequestInfo_IR_ComponentDef_emits_events_get ri (
         &_tao_call,
-        _collocated_tao_target_ ACE_ENV_ARG_PARAMETER
+        _collocated_tao_target_
+        ACE_ENV_ARG_PARAMETER
       );
-            ACE_CHECK_RETURN (_tao_retval._retn ());
+      ACE_CHECK_RETURN (0);
 
 #endif /* TAO_HAS_INTERCEPTORS */
       
       
       CORBA::Short _tao_response_flag = TAO_TWOWAY_RESPONSE_FLAG;
-      TAO_INTERCEPTOR (_tao_ri.response_expected (1));
+      TAO_INTERCEPTOR (ri.response_expected (1));
       
 #if TAO_HAS_INTERCEPTORS == 1
       
       ACE_TRY
         {
           _tao_vfr.send_request (
-            &_tao_ri
+            &ri
             ACE_ENV_ARG_PARAMETER
           );
           ACE_TRY_CHECK;
@@ -11262,17 +11182,17 @@
 #endif /* TAO_HAS_INTERCEPTORS */
           
           _tao_call.start (ACE_ENV_SINGLE_ARG_PARAMETER);
-                    TAO_INTERCEPTOR_CHECK_RETURN (_tao_retval._retn ());
+          TAO_INTERCEPTOR_CHECK_RETURN (0);
 
           _tao_call.prepare_header (
               ACE_static_cast (CORBA::Octet, _tao_response_flag)
               ACE_ENV_ARG_PARAMETER
             );
-                    TAO_INTERCEPTOR_CHECK_RETURN (_tao_retval._retn ());
+          TAO_INTERCEPTOR_CHECK_RETURN (0);
 
           _invoke_status =
             _tao_call.invoke (0, 0 ACE_ENV_ARG_PARAMETER);
-                    TAO_INTERCEPTOR_CHECK_RETURN (_tao_retval._retn ());
+          TAO_INTERCEPTOR_CHECK_RETURN (0);
 
           if (_invoke_status == TAO_INVOKE_EXCEPTION)
             {
@@ -11285,9 +11205,9 @@
           else if (_invoke_status == TAO_INVOKE_RESTART)
             {
               TAO_INTERCEPTOR (
-                _tao_ri.reply_status (_invoke_status);
+                ri.reply_status (_invoke_status);
                 _tao_vfr.receive_other (
-                  &_tao_ri
+                  &ri
                   ACE_ENV_ARG_PARAMETER
                 );
                 ACE_TRY_CHECK;
@@ -11298,7 +11218,7 @@
           
           TAO_InputCDR &_tao_in = _tao_call.inp_stream ();
           if (!(
-                            (_tao_in >> _tao_retval.inout ())
+                            (_tao_in >> _tao_safe_retval.inout ())
               ))
             {
               TAO_INTERCEPTOR_THROW_RETURN (
@@ -11309,13 +11229,13 @@
             }
           
 #if TAO_HAS_INTERCEPTORS == 1
-          ::IR::EmitsDefSeq * _tao_retval_info = _tao_retval._retn ();
-          _tao_ri.result (_tao_retval_info);
-          _tao_retval = _tao_retval_info;
+          IR::EmitsDefSeq * _tao_retval_info = _tao_safe_retval._retn ();
+          ri.result (_tao_retval_info);
+          _tao_safe_retval = _tao_retval_info;
           
-          _tao_ri.reply_status (_invoke_status);
+          ri.reply_status (_invoke_status);
           _tao_vfr.receive_reply (
-            &_tao_ri
+            &ri
             ACE_ENV_ARG_PARAMETER
           );
           ACE_TRY_CHECK;
@@ -11323,15 +11243,15 @@
       }
     ACE_CATCHANY
       {
-        _tao_ri.exception (&ACE_ANY_EXCEPTION);
+        ri.exception (&ACE_ANY_EXCEPTION);
         _tao_vfr.receive_exception (
-          &_tao_ri
+          &ri
           ACE_ENV_ARG_PARAMETER
         );
         ACE_TRY_CHECK;
         
         PortableInterceptor::ReplyStatus _tao_status =
-          _tao_ri.reply_status (ACE_ENV_SINGLE_ARG_PARAMETER);
+          ri.reply_status (ACE_ENV_SINGLE_ARG_PARAMETER);
         ACE_TRY_CHECK;
         
         if (_tao_status == PortableInterceptor::SYSTEM_EXCEPTION
@@ -11339,11 +11259,11 @@
           ACE_RE_THROW;
       }
     ACE_ENDTRY;
-        ACE_CHECK_RETURN (_tao_retval._retn ());
+    ACE_CHECK_RETURN (0);
 
     PortableInterceptor::ReplyStatus _tao_status =
-      _tao_ri.reply_status (ACE_ENV_SINGLE_ARG_PARAMETER);
-        ACE_CHECK_RETURN (_tao_retval._retn ());
+      ri.reply_status (ACE_ENV_SINGLE_ARG_PARAMETER);
+    ACE_CHECK_RETURN (0);
 
     if (_tao_status == PortableInterceptor::LOCATION_FORWARD
         || _tao_status == PortableInterceptor::TRANSPORT_RETRY)
@@ -11353,10 +11273,10 @@
     
     break;
   }
-return _tao_retval._retn ();
+return _tao_safe_retval._retn ();
 }
 
-::IR::PublishesDefSeq * IR::_TAO_ComponentDef_Remote_Proxy_Impl::publishes_events (
+IR::PublishesDefSeq * IR::_TAO_ComponentDef_Remote_Proxy_Impl::publishes_events (
     CORBA_Object *_collocated_tao_target_
     ACE_ENV_ARG_DECL
   )
@@ -11365,19 +11285,16 @@
   ))
 {
   
-  IR::PublishesDefSeq_var _tao_retval;
+  IR::PublishesDefSeq *_tao_retval = 0;
 
   
   TAO_Stub *istub = _collocated_tao_target_->_stubobj ();
   if (istub == 0)
-    ACE_THROW_RETURN (CORBA::INTERNAL (),_tao_retval._retn ());
+    ACE_THROW_RETURN (CORBA::INTERNAL (), 0);
 
   
-  {
-    IR::PublishesDefSeq *tmp;
-    ACE_NEW_RETURN (tmp, IR::PublishesDefSeq, _tao_retval._retn ());
-    _tao_retval = tmp;
-  }
+  ACE_NEW_RETURN (_tao_retval, IR::PublishesDefSeq, _tao_retval);
+  IR::PublishesDefSeq_var _tao_safe_retval (_tao_retval);
   TAO_GIOP_Twoway_Invocation _tao_call (
       istub,
       "_get_publishes_events",
@@ -11402,24 +11319,25 @@
       _invoke_status = TAO_INVOKE_EXCEPTION;
       
 #if TAO_HAS_INTERCEPTORS == 1
-      TAO_ClientRequestInfo_IR_ComponentDef_publishes_events_get _tao_ri (
+      TAO_ClientRequestInfo_IR_ComponentDef_publishes_events_get ri (
         &_tao_call,
-        _collocated_tao_target_ ACE_ENV_ARG_PARAMETER
+        _collocated_tao_target_
+        ACE_ENV_ARG_PARAMETER
       );
-            ACE_CHECK_RETURN (_tao_retval._retn ());
+      ACE_CHECK_RETURN (0);
 
 #endif /* TAO_HAS_INTERCEPTORS */
       
       
       CORBA::Short _tao_response_flag = TAO_TWOWAY_RESPONSE_FLAG;
-      TAO_INTERCEPTOR (_tao_ri.response_expected (1));
+      TAO_INTERCEPTOR (ri.response_expected (1));
       
 #if TAO_HAS_INTERCEPTORS == 1
       
       ACE_TRY
         {
           _tao_vfr.send_request (
-            &_tao_ri
+            &ri
             ACE_ENV_ARG_PARAMETER
           );
           ACE_TRY_CHECK;
@@ -11433,17 +11351,17 @@
 #endif /* TAO_HAS_INTERCEPTORS */
           
           _tao_call.start (ACE_ENV_SINGLE_ARG_PARAMETER);
-                    TAO_INTERCEPTOR_CHECK_RETURN (_tao_retval._retn ());
+          TAO_INTERCEPTOR_CHECK_RETURN (0);
 
           _tao_call.prepare_header (
               ACE_static_cast (CORBA::Octet, _tao_response_flag)
               ACE_ENV_ARG_PARAMETER
             );
-                    TAO_INTERCEPTOR_CHECK_RETURN (_tao_retval._retn ());
+          TAO_INTERCEPTOR_CHECK_RETURN (0);
 
           _invoke_status =
             _tao_call.invoke (0, 0 ACE_ENV_ARG_PARAMETER);
-                    TAO_INTERCEPTOR_CHECK_RETURN (_tao_retval._retn ());
+          TAO_INTERCEPTOR_CHECK_RETURN (0);
 
           if (_invoke_status == TAO_INVOKE_EXCEPTION)
             {
@@ -11456,9 +11374,9 @@
           else if (_invoke_status == TAO_INVOKE_RESTART)
             {
               TAO_INTERCEPTOR (
-                _tao_ri.reply_status (_invoke_status);
+                ri.reply_status (_invoke_status);
                 _tao_vfr.receive_other (
-                  &_tao_ri
+                  &ri
                   ACE_ENV_ARG_PARAMETER
                 );
                 ACE_TRY_CHECK;
@@ -11469,7 +11387,7 @@
           
           TAO_InputCDR &_tao_in = _tao_call.inp_stream ();
           if (!(
-                            (_tao_in >> _tao_retval.inout ())
+                            (_tao_in >> _tao_safe_retval.inout ())
               ))
             {
               TAO_INTERCEPTOR_THROW_RETURN (
@@ -11480,13 +11398,13 @@
             }
           
 #if TAO_HAS_INTERCEPTORS == 1
-          ::IR::PublishesDefSeq * _tao_retval_info = _tao_retval._retn ();
-          _tao_ri.result (_tao_retval_info);
-          _tao_retval = _tao_retval_info;
+          IR::PublishesDefSeq * _tao_retval_info = _tao_safe_retval._retn ();
+          ri.result (_tao_retval_info);
+          _tao_safe_retval = _tao_retval_info;
           
-          _tao_ri.reply_status (_invoke_status);
+          ri.reply_status (_invoke_status);
           _tao_vfr.receive_reply (
-            &_tao_ri
+            &ri
             ACE_ENV_ARG_PARAMETER
           );
           ACE_TRY_CHECK;
@@ -11494,15 +11412,15 @@
       }
     ACE_CATCHANY
       {
-        _tao_ri.exception (&ACE_ANY_EXCEPTION);
+        ri.exception (&ACE_ANY_EXCEPTION);
         _tao_vfr.receive_exception (
-          &_tao_ri
+          &ri
           ACE_ENV_ARG_PARAMETER
         );
         ACE_TRY_CHECK;
         
         PortableInterceptor::ReplyStatus _tao_status =
-          _tao_ri.reply_status (ACE_ENV_SINGLE_ARG_PARAMETER);
+          ri.reply_status (ACE_ENV_SINGLE_ARG_PARAMETER);
         ACE_TRY_CHECK;
         
         if (_tao_status == PortableInterceptor::SYSTEM_EXCEPTION
@@ -11510,11 +11428,11 @@
           ACE_RE_THROW;
       }
     ACE_ENDTRY;
-        ACE_CHECK_RETURN (_tao_retval._retn ());
+    ACE_CHECK_RETURN (0);
 
     PortableInterceptor::ReplyStatus _tao_status =
-      _tao_ri.reply_status (ACE_ENV_SINGLE_ARG_PARAMETER);
-        ACE_CHECK_RETURN (_tao_retval._retn ());
+      ri.reply_status (ACE_ENV_SINGLE_ARG_PARAMETER);
+    ACE_CHECK_RETURN (0);
 
     if (_tao_status == PortableInterceptor::LOCATION_FORWARD
         || _tao_status == PortableInterceptor::TRANSPORT_RETRY)
@@ -11524,10 +11442,10 @@
     
     break;
   }
-return _tao_retval._retn ();
+return _tao_safe_retval._retn ();
 }
 
-::IR::ConsumesDefSeq * IR::_TAO_ComponentDef_Remote_Proxy_Impl::consumes_events (
+IR::ConsumesDefSeq * IR::_TAO_ComponentDef_Remote_Proxy_Impl::consumes_events (
     CORBA_Object *_collocated_tao_target_
     ACE_ENV_ARG_DECL
   )
@@ -11536,19 +11454,16 @@
   ))
 {
   
-  IR::ConsumesDefSeq_var _tao_retval;
+  IR::ConsumesDefSeq *_tao_retval = 0;
 
   
   TAO_Stub *istub = _collocated_tao_target_->_stubobj ();
   if (istub == 0)
-    ACE_THROW_RETURN (CORBA::INTERNAL (),_tao_retval._retn ());
+    ACE_THROW_RETURN (CORBA::INTERNAL (), 0);
 
   
-  {
-    IR::ConsumesDefSeq *tmp;
-    ACE_NEW_RETURN (tmp, IR::ConsumesDefSeq, _tao_retval._retn ());
-    _tao_retval = tmp;
-  }
+  ACE_NEW_RETURN (_tao_retval, IR::ConsumesDefSeq, _tao_retval);
+  IR::ConsumesDefSeq_var _tao_safe_retval (_tao_retval);
   TAO_GIOP_Twoway_Invocation _tao_call (
       istub,
       "_get_consumes_events",
@@ -11573,24 +11488,25 @@
       _invoke_status = TAO_INVOKE_EXCEPTION;
       
 #if TAO_HAS_INTERCEPTORS == 1
-      TAO_ClientRequestInfo_IR_ComponentDef_consumes_events_get _tao_ri (
+      TAO_ClientRequestInfo_IR_ComponentDef_consumes_events_get ri (
         &_tao_call,
-        _collocated_tao_target_ ACE_ENV_ARG_PARAMETER
+        _collocated_tao_target_
+        ACE_ENV_ARG_PARAMETER
       );
-            ACE_CHECK_RETURN (_tao_retval._retn ());
+      ACE_CHECK_RETURN (0);
 
 #endif /* TAO_HAS_INTERCEPTORS */
       
       
       CORBA::Short _tao_response_flag = TAO_TWOWAY_RESPONSE_FLAG;
-      TAO_INTERCEPTOR (_tao_ri.response_expected (1));
+      TAO_INTERCEPTOR (ri.response_expected (1));
       
 #if TAO_HAS_INTERCEPTORS == 1
       
       ACE_TRY
         {
           _tao_vfr.send_request (
-            &_tao_ri
+            &ri
             ACE_ENV_ARG_PARAMETER
           );
           ACE_TRY_CHECK;
@@ -11604,17 +11520,17 @@
 #endif /* TAO_HAS_INTERCEPTORS */
           
           _tao_call.start (ACE_ENV_SINGLE_ARG_PARAMETER);
-                    TAO_INTERCEPTOR_CHECK_RETURN (_tao_retval._retn ());
+          TAO_INTERCEPTOR_CHECK_RETURN (0);
 
           _tao_call.prepare_header (
               ACE_static_cast (CORBA::Octet, _tao_response_flag)
               ACE_ENV_ARG_PARAMETER
             );
-                    TAO_INTERCEPTOR_CHECK_RETURN (_tao_retval._retn ());
+          TAO_INTERCEPTOR_CHECK_RETURN (0);
 
           _invoke_status =
             _tao_call.invoke (0, 0 ACE_ENV_ARG_PARAMETER);
-                    TAO_INTERCEPTOR_CHECK_RETURN (_tao_retval._retn ());
+          TAO_INTERCEPTOR_CHECK_RETURN (0);
 
           if (_invoke_status == TAO_INVOKE_EXCEPTION)
             {
@@ -11627,9 +11543,9 @@
           else if (_invoke_status == TAO_INVOKE_RESTART)
             {
               TAO_INTERCEPTOR (
-                _tao_ri.reply_status (_invoke_status);
+                ri.reply_status (_invoke_status);
                 _tao_vfr.receive_other (
-                  &_tao_ri
+                  &ri
                   ACE_ENV_ARG_PARAMETER
                 );
                 ACE_TRY_CHECK;
@@ -11640,7 +11556,7 @@
           
           TAO_InputCDR &_tao_in = _tao_call.inp_stream ();
           if (!(
-                            (_tao_in >> _tao_retval.inout ())
+                            (_tao_in >> _tao_safe_retval.inout ())
               ))
             {
               TAO_INTERCEPTOR_THROW_RETURN (
@@ -11651,13 +11567,13 @@
             }
           
 #if TAO_HAS_INTERCEPTORS == 1
-          ::IR::ConsumesDefSeq * _tao_retval_info = _tao_retval._retn ();
-          _tao_ri.result (_tao_retval_info);
-          _tao_retval = _tao_retval_info;
+          IR::ConsumesDefSeq * _tao_retval_info = _tao_safe_retval._retn ();
+          ri.result (_tao_retval_info);
+          _tao_safe_retval = _tao_retval_info;
           
-          _tao_ri.reply_status (_invoke_status);
+          ri.reply_status (_invoke_status);
           _tao_vfr.receive_reply (
-            &_tao_ri
+            &ri
             ACE_ENV_ARG_PARAMETER
           );
           ACE_TRY_CHECK;
@@ -11665,15 +11581,15 @@
       }
     ACE_CATCHANY
       {
-        _tao_ri.exception (&ACE_ANY_EXCEPTION);
+        ri.exception (&ACE_ANY_EXCEPTION);
         _tao_vfr.receive_exception (
-          &_tao_ri
+          &ri
           ACE_ENV_ARG_PARAMETER
         );
         ACE_TRY_CHECK;
         
         PortableInterceptor::ReplyStatus _tao_status =
-          _tao_ri.reply_status (ACE_ENV_SINGLE_ARG_PARAMETER);
+          ri.reply_status (ACE_ENV_SINGLE_ARG_PARAMETER);
         ACE_TRY_CHECK;
         
         if (_tao_status == PortableInterceptor::SYSTEM_EXCEPTION
@@ -11681,11 +11597,11 @@
           ACE_RE_THROW;
       }
     ACE_ENDTRY;
-        ACE_CHECK_RETURN (_tao_retval._retn ());
+    ACE_CHECK_RETURN (0);
 
     PortableInterceptor::ReplyStatus _tao_status =
-      _tao_ri.reply_status (ACE_ENV_SINGLE_ARG_PARAMETER);
-        ACE_CHECK_RETURN (_tao_retval._retn ());
+      ri.reply_status (ACE_ENV_SINGLE_ARG_PARAMETER);
+    ACE_CHECK_RETURN (0);
 
     if (_tao_status == PortableInterceptor::LOCATION_FORWARD
         || _tao_status == PortableInterceptor::TRANSPORT_RETRY)
@@ -11695,7 +11611,7 @@
     
     break;
   }
-return _tao_retval._retn ();
+return _tao_safe_retval._retn ();
 }
 
 CORBA::Boolean IR::_TAO_ComponentDef_Remote_Proxy_Impl::is_basic (
@@ -11739,9 +11655,10 @@
       _invoke_status = TAO_INVOKE_EXCEPTION;
       
 #if TAO_HAS_INTERCEPTORS == 1
-      TAO_ClientRequestInfo_IR_ComponentDef_is_basic_get _tao_ri (
+      TAO_ClientRequestInfo_IR_ComponentDef_is_basic_get ri (
         &_tao_call,
-        _collocated_tao_target_ ACE_ENV_ARG_PARAMETER
+        _collocated_tao_target_
+        ACE_ENV_ARG_PARAMETER
       );
             ACE_CHECK_RETURN (_tao_retval);
 
@@ -11749,14 +11666,14 @@
       
       
       CORBA::Short _tao_response_flag = TAO_TWOWAY_RESPONSE_FLAG;
-      TAO_INTERCEPTOR (_tao_ri.response_expected (1));
+      TAO_INTERCEPTOR (ri.response_expected (1));
       
 #if TAO_HAS_INTERCEPTORS == 1
       
       ACE_TRY
         {
           _tao_vfr.send_request (
-            &_tao_ri
+            &ri
             ACE_ENV_ARG_PARAMETER
           );
           ACE_TRY_CHECK;
@@ -11793,9 +11710,9 @@
           else if (_invoke_status == TAO_INVOKE_RESTART)
             {
               TAO_INTERCEPTOR (
-                _tao_ri.reply_status (_invoke_status);
+                ri.reply_status (_invoke_status);
                 _tao_vfr.receive_other (
-                  &_tao_ri
+                  &ri
                   ACE_ENV_ARG_PARAMETER
                 );
                 ACE_TRY_CHECK;
@@ -11818,11 +11735,11 @@
           
 #if TAO_HAS_INTERCEPTORS == 1
           CORBA::Boolean _tao_retval_info = _tao_retval;
-          _tao_ri.result (_tao_retval_info);
+          ri.result (_tao_retval_info);
           
-          _tao_ri.reply_status (_invoke_status);
+          ri.reply_status (_invoke_status);
           _tao_vfr.receive_reply (
-            &_tao_ri
+            &ri
             ACE_ENV_ARG_PARAMETER
           );
           ACE_TRY_CHECK;
@@ -11830,15 +11747,15 @@
       }
     ACE_CATCHANY
       {
-        _tao_ri.exception (&ACE_ANY_EXCEPTION);
+        ri.exception (&ACE_ANY_EXCEPTION);
         _tao_vfr.receive_exception (
-          &_tao_ri
+          &ri
           ACE_ENV_ARG_PARAMETER
         );
         ACE_TRY_CHECK;
         
         PortableInterceptor::ReplyStatus _tao_status =
-          _tao_ri.reply_status (ACE_ENV_SINGLE_ARG_PARAMETER);
+          ri.reply_status (ACE_ENV_SINGLE_ARG_PARAMETER);
         ACE_TRY_CHECK;
         
         if (_tao_status == PortableInterceptor::SYSTEM_EXCEPTION
@@ -11849,7 +11766,7 @@
         ACE_CHECK_RETURN (_tao_retval);
 
     PortableInterceptor::ReplyStatus _tao_status =
-      _tao_ri.reply_status (ACE_ENV_SINGLE_ARG_PARAMETER);
+      ri.reply_status (ACE_ENV_SINGLE_ARG_PARAMETER);
         ACE_CHECK_RETURN (_tao_retval);
 
     if (_tao_status == PortableInterceptor::LOCATION_FORWARD
@@ -11863,12 +11780,12 @@
 return _tao_retval;
 }
 
-::IR::ProvidesDef_ptr IR::_TAO_ComponentDef_Remote_Proxy_Impl::create_provides (
+IR::ProvidesDef_ptr IR::_TAO_ComponentDef_Remote_Proxy_Impl::create_provides (
     CORBA_Object *_collocated_tao_target_,
     const char * id,
     const char * name,
     const char * version,
-    CORBA::InterfaceDef_ptr interface_type
+    CORBA_InterfaceDef_ptr interface_type
     ACE_ENV_ARG_DECL
   )
   ACE_THROW_SPEC ((
@@ -11876,20 +11793,20 @@
   ))
 {
   
-  IR::ProvidesDef_var _tao_retval (IR::ProvidesDef::_nil ());
-
+  IR::ProvidesDef_ptr _tao_retval = IR::ProvidesDef::_nil ();
+  IR::ProvidesDef_var _tao_safe_retval (_tao_retval);
 
   
   TAO_Stub *istub = _collocated_tao_target_->_stubobj ();
   if (istub == 0)
-    ACE_THROW_RETURN (CORBA::INTERNAL (),_tao_retval._retn ());
+    ACE_THROW_RETURN (CORBA::INTERNAL (), 0);
 
   
   TAO_GIOP_Twoway_Invocation _tao_call (
       istub,
       "create_provides",
       15,
-      4,
+      1,
       istub->orb_core ()
     );
   
@@ -11909,28 +11826,29 @@
       _invoke_status = TAO_INVOKE_EXCEPTION;
       
 #if TAO_HAS_INTERCEPTORS == 1
-      TAO_ClientRequestInfo_IR_ComponentDef_create_provides _tao_ri (
+      TAO_ClientRequestInfo_IR_ComponentDef_create_provides ri (
         &_tao_call,
         _collocated_tao_target_,
         id,
         name,
         version,
-        interface_type ACE_ENV_ARG_PARAMETER
+        interface_type
+        ACE_ENV_ARG_PARAMETER
       );
-            ACE_CHECK_RETURN (_tao_retval._retn ());
+      ACE_CHECK_RETURN (0);
 
 #endif /* TAO_HAS_INTERCEPTORS */
       
       
       CORBA::Short _tao_response_flag = TAO_TWOWAY_RESPONSE_FLAG;
-      TAO_INTERCEPTOR (_tao_ri.response_expected (1));
+      TAO_INTERCEPTOR (ri.response_expected (1));
       
 #if TAO_HAS_INTERCEPTORS == 1
       
       ACE_TRY
         {
           _tao_vfr.send_request (
-            &_tao_ri
+            &ri
             ACE_ENV_ARG_PARAMETER
           );
           ACE_TRY_CHECK;
@@ -11944,13 +11862,13 @@
 #endif /* TAO_HAS_INTERCEPTORS */
           
           _tao_call.start (ACE_ENV_SINGLE_ARG_PARAMETER);
-                    TAO_INTERCEPTOR_CHECK_RETURN (_tao_retval._retn ());
+          TAO_INTERCEPTOR_CHECK_RETURN (0);
 
           _tao_call.prepare_header (
               ACE_static_cast (CORBA::Octet, _tao_response_flag)
               ACE_ENV_ARG_PARAMETER
             );
-                    TAO_INTERCEPTOR_CHECK_RETURN (_tao_retval._retn ());
+          TAO_INTERCEPTOR_CHECK_RETURN (0);
 
           TAO_OutputCDR &_tao_out = _tao_call.out_stream ();
           if (!(
@@ -11966,7 +11884,7 @@
             
           _invoke_status =
             _tao_call.invoke (0, 0 ACE_ENV_ARG_PARAMETER);
-                    TAO_INTERCEPTOR_CHECK_RETURN (_tao_retval._retn ());
+          TAO_INTERCEPTOR_CHECK_RETURN (0);
 
           if (_invoke_status == TAO_INVOKE_EXCEPTION)
             {
@@ -11979,9 +11897,9 @@
           else if (_invoke_status == TAO_INVOKE_RESTART)
             {
               TAO_INTERCEPTOR (
-                _tao_ri.reply_status (_invoke_status);
+                ri.reply_status (_invoke_status);
                 _tao_vfr.receive_other (
-                  &_tao_ri
+                  &ri
                   ACE_ENV_ARG_PARAMETER
                 );
                 ACE_TRY_CHECK;
@@ -11992,7 +11910,7 @@
           
           TAO_InputCDR &_tao_in = _tao_call.inp_stream ();
           if (!(
-                            (_tao_in >> _tao_retval.inout ())
+                            (_tao_in >> _tao_safe_retval.inout ())
               ))
             {
               TAO_INTERCEPTOR_THROW_RETURN (
@@ -12003,13 +11921,13 @@
             }
           
 #if TAO_HAS_INTERCEPTORS == 1
-          ::IR::ProvidesDef_ptr _tao_retval_info = _tao_retval._retn ();
-          _tao_ri.result (_tao_retval_info);
-          _tao_retval = _tao_retval_info;
+          IR::ProvidesDef_ptr _tao_retval_info = _tao_safe_retval._retn ();
+          ri.result (_tao_retval_info);
+          _tao_safe_retval = _tao_retval_info;
           
-          _tao_ri.reply_status (_invoke_status);
+          ri.reply_status (_invoke_status);
           _tao_vfr.receive_reply (
-            &_tao_ri
+            &ri
             ACE_ENV_ARG_PARAMETER
           );
           ACE_TRY_CHECK;
@@ -12017,15 +11935,15 @@
       }
     ACE_CATCHANY
       {
-        _tao_ri.exception (&ACE_ANY_EXCEPTION);
+        ri.exception (&ACE_ANY_EXCEPTION);
         _tao_vfr.receive_exception (
-          &_tao_ri
+          &ri
           ACE_ENV_ARG_PARAMETER
         );
         ACE_TRY_CHECK;
         
         PortableInterceptor::ReplyStatus _tao_status =
-          _tao_ri.reply_status (ACE_ENV_SINGLE_ARG_PARAMETER);
+          ri.reply_status (ACE_ENV_SINGLE_ARG_PARAMETER);
         ACE_TRY_CHECK;
         
         if (_tao_status == PortableInterceptor::SYSTEM_EXCEPTION
@@ -12033,11 +11951,11 @@
           ACE_RE_THROW;
       }
     ACE_ENDTRY;
-        ACE_CHECK_RETURN (_tao_retval._retn ());
+    ACE_CHECK_RETURN (0);
 
     PortableInterceptor::ReplyStatus _tao_status =
-      _tao_ri.reply_status (ACE_ENV_SINGLE_ARG_PARAMETER);
-        ACE_CHECK_RETURN (_tao_retval._retn ());
+      ri.reply_status (ACE_ENV_SINGLE_ARG_PARAMETER);
+    ACE_CHECK_RETURN (0);
 
     if (_tao_status == PortableInterceptor::LOCATION_FORWARD
         || _tao_status == PortableInterceptor::TRANSPORT_RETRY)
@@ -12047,15 +11965,15 @@
     
     break;
   }
-return _tao_retval._retn ();
+return _tao_safe_retval._retn ();
 }
 
-::IR::UsesDef_ptr IR::_TAO_ComponentDef_Remote_Proxy_Impl::create_uses (
+IR::UsesDef_ptr IR::_TAO_ComponentDef_Remote_Proxy_Impl::create_uses (
     CORBA_Object *_collocated_tao_target_,
     const char * id,
     const char * name,
     const char * version,
-    CORBA::InterfaceDef_ptr interface_type,
+    CORBA_InterfaceDef_ptr interface_type,
     CORBA::Boolean is_multiple
     ACE_ENV_ARG_DECL
   )
@@ -12064,20 +11982,20 @@
   ))
 {
   
-  IR::UsesDef_var _tao_retval (IR::UsesDef::_nil ());
-
+  IR::UsesDef_ptr _tao_retval = IR::UsesDef::_nil ();
+  IR::UsesDef_var _tao_safe_retval (_tao_retval);
 
   
   TAO_Stub *istub = _collocated_tao_target_->_stubobj ();
   if (istub == 0)
-    ACE_THROW_RETURN (CORBA::INTERNAL (),_tao_retval._retn ());
+    ACE_THROW_RETURN (CORBA::INTERNAL (), 0);
 
   
   TAO_GIOP_Twoway_Invocation _tao_call (
       istub,
       "create_uses",
       11,
-      5,
+      1,
       istub->orb_core ()
     );
   
@@ -12097,29 +12015,30 @@
       _invoke_status = TAO_INVOKE_EXCEPTION;
       
 #if TAO_HAS_INTERCEPTORS == 1
-      TAO_ClientRequestInfo_IR_ComponentDef_create_uses _tao_ri (
+      TAO_ClientRequestInfo_IR_ComponentDef_create_uses ri (
         &_tao_call,
         _collocated_tao_target_,
         id,
         name,
         version,
         interface_type,
-        is_multiple ACE_ENV_ARG_PARAMETER
+        is_multiple
+        ACE_ENV_ARG_PARAMETER
       );
-            ACE_CHECK_RETURN (_tao_retval._retn ());
+      ACE_CHECK_RETURN (0);
 
 #endif /* TAO_HAS_INTERCEPTORS */
       
       
       CORBA::Short _tao_response_flag = TAO_TWOWAY_RESPONSE_FLAG;
-      TAO_INTERCEPTOR (_tao_ri.response_expected (1));
+      TAO_INTERCEPTOR (ri.response_expected (1));
       
 #if TAO_HAS_INTERCEPTORS == 1
       
       ACE_TRY
         {
           _tao_vfr.send_request (
-            &_tao_ri
+            &ri
             ACE_ENV_ARG_PARAMETER
           );
           ACE_TRY_CHECK;
@@ -12133,13 +12052,13 @@
 #endif /* TAO_HAS_INTERCEPTORS */
           
           _tao_call.start (ACE_ENV_SINGLE_ARG_PARAMETER);
-                    TAO_INTERCEPTOR_CHECK_RETURN (_tao_retval._retn ());
+          TAO_INTERCEPTOR_CHECK_RETURN (0);
 
           _tao_call.prepare_header (
               ACE_static_cast (CORBA::Octet, _tao_response_flag)
               ACE_ENV_ARG_PARAMETER
             );
-                    TAO_INTERCEPTOR_CHECK_RETURN (_tao_retval._retn ());
+          TAO_INTERCEPTOR_CHECK_RETURN (0);
 
           TAO_OutputCDR &_tao_out = _tao_call.out_stream ();
           if (!(
@@ -12156,7 +12075,7 @@
             
           _invoke_status =
             _tao_call.invoke (0, 0 ACE_ENV_ARG_PARAMETER);
-                    TAO_INTERCEPTOR_CHECK_RETURN (_tao_retval._retn ());
+          TAO_INTERCEPTOR_CHECK_RETURN (0);
 
           if (_invoke_status == TAO_INVOKE_EXCEPTION)
             {
@@ -12169,9 +12088,9 @@
           else if (_invoke_status == TAO_INVOKE_RESTART)
             {
               TAO_INTERCEPTOR (
-                _tao_ri.reply_status (_invoke_status);
+                ri.reply_status (_invoke_status);
                 _tao_vfr.receive_other (
-                  &_tao_ri
+                  &ri
                   ACE_ENV_ARG_PARAMETER
                 );
                 ACE_TRY_CHECK;
@@ -12182,7 +12101,7 @@
           
           TAO_InputCDR &_tao_in = _tao_call.inp_stream ();
           if (!(
-                            (_tao_in >> _tao_retval.inout ())
+                            (_tao_in >> _tao_safe_retval.inout ())
               ))
             {
               TAO_INTERCEPTOR_THROW_RETURN (
@@ -12193,13 +12112,13 @@
             }
           
 #if TAO_HAS_INTERCEPTORS == 1
-          ::IR::UsesDef_ptr _tao_retval_info = _tao_retval._retn ();
-          _tao_ri.result (_tao_retval_info);
-          _tao_retval = _tao_retval_info;
+          IR::UsesDef_ptr _tao_retval_info = _tao_safe_retval._retn ();
+          ri.result (_tao_retval_info);
+          _tao_safe_retval = _tao_retval_info;
           
-          _tao_ri.reply_status (_invoke_status);
+          ri.reply_status (_invoke_status);
           _tao_vfr.receive_reply (
-            &_tao_ri
+            &ri
             ACE_ENV_ARG_PARAMETER
           );
           ACE_TRY_CHECK;
@@ -12207,15 +12126,15 @@
       }
     ACE_CATCHANY
       {
-        _tao_ri.exception (&ACE_ANY_EXCEPTION);
+        ri.exception (&ACE_ANY_EXCEPTION);
         _tao_vfr.receive_exception (
-          &_tao_ri
+          &ri
           ACE_ENV_ARG_PARAMETER
         );
         ACE_TRY_CHECK;
         
         PortableInterceptor::ReplyStatus _tao_status =
-          _tao_ri.reply_status (ACE_ENV_SINGLE_ARG_PARAMETER);
+          ri.reply_status (ACE_ENV_SINGLE_ARG_PARAMETER);
         ACE_TRY_CHECK;
         
         if (_tao_status == PortableInterceptor::SYSTEM_EXCEPTION
@@ -12223,11 +12142,11 @@
           ACE_RE_THROW;
       }
     ACE_ENDTRY;
-        ACE_CHECK_RETURN (_tao_retval._retn ());
+    ACE_CHECK_RETURN (0);
 
     PortableInterceptor::ReplyStatus _tao_status =
-      _tao_ri.reply_status (ACE_ENV_SINGLE_ARG_PARAMETER);
-        ACE_CHECK_RETURN (_tao_retval._retn ());
+      ri.reply_status (ACE_ENV_SINGLE_ARG_PARAMETER);
+    ACE_CHECK_RETURN (0);
 
     if (_tao_status == PortableInterceptor::LOCATION_FORWARD
         || _tao_status == PortableInterceptor::TRANSPORT_RETRY)
@@ -12237,15 +12156,15 @@
     
     break;
   }
-return _tao_retval._retn ();
+return _tao_safe_retval._retn ();
 }
 
-::IR::EmitsDef_ptr IR::_TAO_ComponentDef_Remote_Proxy_Impl::create_emits (
+IR::EmitsDef_ptr IR::_TAO_ComponentDef_Remote_Proxy_Impl::create_emits (
     CORBA_Object *_collocated_tao_target_,
     const char * id,
     const char * name,
     const char * version,
-    CORBA::ValueDef_ptr value
+    CORBA_ValueDef_ptr value
     ACE_ENV_ARG_DECL
   )
   ACE_THROW_SPEC ((
@@ -12253,20 +12172,20 @@
   ))
 {
   
-  IR::EmitsDef_var _tao_retval (IR::EmitsDef::_nil ());
-
+  IR::EmitsDef_ptr _tao_retval = IR::EmitsDef::_nil ();
+  IR::EmitsDef_var _tao_safe_retval (_tao_retval);
 
   
   TAO_Stub *istub = _collocated_tao_target_->_stubobj ();
   if (istub == 0)
-    ACE_THROW_RETURN (CORBA::INTERNAL (),_tao_retval._retn ());
+    ACE_THROW_RETURN (CORBA::INTERNAL (), 0);
 
   
   TAO_GIOP_Twoway_Invocation _tao_call (
       istub,
       "create_emits",
       12,
-      4,
+      1,
       istub->orb_core ()
     );
   
@@ -12286,28 +12205,29 @@
       _invoke_status = TAO_INVOKE_EXCEPTION;
       
 #if TAO_HAS_INTERCEPTORS == 1
-      TAO_ClientRequestInfo_IR_ComponentDef_create_emits _tao_ri (
+      TAO_ClientRequestInfo_IR_ComponentDef_create_emits ri (
         &_tao_call,
         _collocated_tao_target_,
         id,
         name,
         version,
-        value ACE_ENV_ARG_PARAMETER
+        value
+        ACE_ENV_ARG_PARAMETER
       );
-            ACE_CHECK_RETURN (_tao_retval._retn ());
+      ACE_CHECK_RETURN (0);
 
 #endif /* TAO_HAS_INTERCEPTORS */
       
       
       CORBA::Short _tao_response_flag = TAO_TWOWAY_RESPONSE_FLAG;
-      TAO_INTERCEPTOR (_tao_ri.response_expected (1));
+      TAO_INTERCEPTOR (ri.response_expected (1));
       
 #if TAO_HAS_INTERCEPTORS == 1
       
       ACE_TRY
         {
           _tao_vfr.send_request (
-            &_tao_ri
+            &ri
             ACE_ENV_ARG_PARAMETER
           );
           ACE_TRY_CHECK;
@@ -12321,13 +12241,13 @@
 #endif /* TAO_HAS_INTERCEPTORS */
           
           _tao_call.start (ACE_ENV_SINGLE_ARG_PARAMETER);
-                    TAO_INTERCEPTOR_CHECK_RETURN (_tao_retval._retn ());
+          TAO_INTERCEPTOR_CHECK_RETURN (0);
 
           _tao_call.prepare_header (
               ACE_static_cast (CORBA::Octet, _tao_response_flag)
               ACE_ENV_ARG_PARAMETER
             );
-                    TAO_INTERCEPTOR_CHECK_RETURN (_tao_retval._retn ());
+          TAO_INTERCEPTOR_CHECK_RETURN (0);
 
           TAO_OutputCDR &_tao_out = _tao_call.out_stream ();
           if (!(
@@ -12343,7 +12263,7 @@
             
           _invoke_status =
             _tao_call.invoke (0, 0 ACE_ENV_ARG_PARAMETER);
-                    TAO_INTERCEPTOR_CHECK_RETURN (_tao_retval._retn ());
+          TAO_INTERCEPTOR_CHECK_RETURN (0);
 
           if (_invoke_status == TAO_INVOKE_EXCEPTION)
             {
@@ -12356,9 +12276,9 @@
           else if (_invoke_status == TAO_INVOKE_RESTART)
             {
               TAO_INTERCEPTOR (
-                _tao_ri.reply_status (_invoke_status);
+                ri.reply_status (_invoke_status);
                 _tao_vfr.receive_other (
-                  &_tao_ri
+                  &ri
                   ACE_ENV_ARG_PARAMETER
                 );
                 ACE_TRY_CHECK;
@@ -12369,7 +12289,7 @@
           
           TAO_InputCDR &_tao_in = _tao_call.inp_stream ();
           if (!(
-                            (_tao_in >> _tao_retval.inout ())
+                            (_tao_in >> _tao_safe_retval.inout ())
               ))
             {
               TAO_INTERCEPTOR_THROW_RETURN (
@@ -12380,13 +12300,13 @@
             }
           
 #if TAO_HAS_INTERCEPTORS == 1
-          ::IR::EmitsDef_ptr _tao_retval_info = _tao_retval._retn ();
-          _tao_ri.result (_tao_retval_info);
-          _tao_retval = _tao_retval_info;
+          IR::EmitsDef_ptr _tao_retval_info = _tao_safe_retval._retn ();
+          ri.result (_tao_retval_info);
+          _tao_safe_retval = _tao_retval_info;
           
-          _tao_ri.reply_status (_invoke_status);
+          ri.reply_status (_invoke_status);
           _tao_vfr.receive_reply (
-            &_tao_ri
+            &ri
             ACE_ENV_ARG_PARAMETER
           );
           ACE_TRY_CHECK;
@@ -12394,15 +12314,15 @@
       }
     ACE_CATCHANY
       {
-        _tao_ri.exception (&ACE_ANY_EXCEPTION);
+        ri.exception (&ACE_ANY_EXCEPTION);
         _tao_vfr.receive_exception (
-          &_tao_ri
+          &ri
           ACE_ENV_ARG_PARAMETER
         );
         ACE_TRY_CHECK;
         
         PortableInterceptor::ReplyStatus _tao_status =
-          _tao_ri.reply_status (ACE_ENV_SINGLE_ARG_PARAMETER);
+          ri.reply_status (ACE_ENV_SINGLE_ARG_PARAMETER);
         ACE_TRY_CHECK;
         
         if (_tao_status == PortableInterceptor::SYSTEM_EXCEPTION
@@ -12410,11 +12330,11 @@
           ACE_RE_THROW;
       }
     ACE_ENDTRY;
-        ACE_CHECK_RETURN (_tao_retval._retn ());
+    ACE_CHECK_RETURN (0);
 
     PortableInterceptor::ReplyStatus _tao_status =
-      _tao_ri.reply_status (ACE_ENV_SINGLE_ARG_PARAMETER);
-        ACE_CHECK_RETURN (_tao_retval._retn ());
+      ri.reply_status (ACE_ENV_SINGLE_ARG_PARAMETER);
+    ACE_CHECK_RETURN (0);
 
     if (_tao_status == PortableInterceptor::LOCATION_FORWARD
         || _tao_status == PortableInterceptor::TRANSPORT_RETRY)
@@ -12424,15 +12344,15 @@
     
     break;
   }
-return _tao_retval._retn ();
+return _tao_safe_retval._retn ();
 }
 
-::IR::PublishesDef_ptr IR::_TAO_ComponentDef_Remote_Proxy_Impl::create_publishes (
+IR::PublishesDef_ptr IR::_TAO_ComponentDef_Remote_Proxy_Impl::create_publishes (
     CORBA_Object *_collocated_tao_target_,
     const char * id,
     const char * name,
     const char * version,
-    CORBA::ValueDef_ptr value
+    CORBA_ValueDef_ptr value
     ACE_ENV_ARG_DECL
   )
   ACE_THROW_SPEC ((
@@ -12440,20 +12360,20 @@
   ))
 {
   
-  IR::PublishesDef_var _tao_retval (IR::PublishesDef::_nil ());
-
+  IR::PublishesDef_ptr _tao_retval = IR::PublishesDef::_nil ();
+  IR::PublishesDef_var _tao_safe_retval (_tao_retval);
 
   
   TAO_Stub *istub = _collocated_tao_target_->_stubobj ();
   if (istub == 0)
-    ACE_THROW_RETURN (CORBA::INTERNAL (),_tao_retval._retn ());
+    ACE_THROW_RETURN (CORBA::INTERNAL (), 0);
 
   
   TAO_GIOP_Twoway_Invocation _tao_call (
       istub,
       "create_publishes",
       16,
-      4,
+      1,
       istub->orb_core ()
     );
   
@@ -12473,28 +12393,29 @@
       _invoke_status = TAO_INVOKE_EXCEPTION;
       
 #if TAO_HAS_INTERCEPTORS == 1
-      TAO_ClientRequestInfo_IR_ComponentDef_create_publishes _tao_ri (
+      TAO_ClientRequestInfo_IR_ComponentDef_create_publishes ri (
         &_tao_call,
         _collocated_tao_target_,
         id,
         name,
         version,
-        value ACE_ENV_ARG_PARAMETER
+        value
+        ACE_ENV_ARG_PARAMETER
       );
-            ACE_CHECK_RETURN (_tao_retval._retn ());
+      ACE_CHECK_RETURN (0);
 
 #endif /* TAO_HAS_INTERCEPTORS */
       
       
       CORBA::Short _tao_response_flag = TAO_TWOWAY_RESPONSE_FLAG;
-      TAO_INTERCEPTOR (_tao_ri.response_expected (1));
+      TAO_INTERCEPTOR (ri.response_expected (1));
       
 #if TAO_HAS_INTERCEPTORS == 1
       
       ACE_TRY
         {
           _tao_vfr.send_request (
-            &_tao_ri
+            &ri
             ACE_ENV_ARG_PARAMETER
           );
           ACE_TRY_CHECK;
@@ -12508,13 +12429,13 @@
 #endif /* TAO_HAS_INTERCEPTORS */
           
           _tao_call.start (ACE_ENV_SINGLE_ARG_PARAMETER);
-                    TAO_INTERCEPTOR_CHECK_RETURN (_tao_retval._retn ());
+          TAO_INTERCEPTOR_CHECK_RETURN (0);
 
           _tao_call.prepare_header (
               ACE_static_cast (CORBA::Octet, _tao_response_flag)
               ACE_ENV_ARG_PARAMETER
             );
-                    TAO_INTERCEPTOR_CHECK_RETURN (_tao_retval._retn ());
+          TAO_INTERCEPTOR_CHECK_RETURN (0);
 
           TAO_OutputCDR &_tao_out = _tao_call.out_stream ();
           if (!(
@@ -12530,7 +12451,7 @@
             
           _invoke_status =
             _tao_call.invoke (0, 0 ACE_ENV_ARG_PARAMETER);
-                    TAO_INTERCEPTOR_CHECK_RETURN (_tao_retval._retn ());
+          TAO_INTERCEPTOR_CHECK_RETURN (0);
 
           if (_invoke_status == TAO_INVOKE_EXCEPTION)
             {
@@ -12543,9 +12464,9 @@
           else if (_invoke_status == TAO_INVOKE_RESTART)
             {
               TAO_INTERCEPTOR (
-                _tao_ri.reply_status (_invoke_status);
+                ri.reply_status (_invoke_status);
                 _tao_vfr.receive_other (
-                  &_tao_ri
+                  &ri
                   ACE_ENV_ARG_PARAMETER
                 );
                 ACE_TRY_CHECK;
@@ -12556,7 +12477,7 @@
           
           TAO_InputCDR &_tao_in = _tao_call.inp_stream ();
           if (!(
-                            (_tao_in >> _tao_retval.inout ())
+                            (_tao_in >> _tao_safe_retval.inout ())
               ))
             {
               TAO_INTERCEPTOR_THROW_RETURN (
@@ -12567,13 +12488,13 @@
             }
           
 #if TAO_HAS_INTERCEPTORS == 1
-          ::IR::PublishesDef_ptr _tao_retval_info = _tao_retval._retn ();
-          _tao_ri.result (_tao_retval_info);
-          _tao_retval = _tao_retval_info;
+          IR::PublishesDef_ptr _tao_retval_info = _tao_safe_retval._retn ();
+          ri.result (_tao_retval_info);
+          _tao_safe_retval = _tao_retval_info;
           
-          _tao_ri.reply_status (_invoke_status);
+          ri.reply_status (_invoke_status);
           _tao_vfr.receive_reply (
-            &_tao_ri
+            &ri
             ACE_ENV_ARG_PARAMETER
           );
           ACE_TRY_CHECK;
@@ -12581,15 +12502,15 @@
       }
     ACE_CATCHANY
       {
-        _tao_ri.exception (&ACE_ANY_EXCEPTION);
+        ri.exception (&ACE_ANY_EXCEPTION);
         _tao_vfr.receive_exception (
-          &_tao_ri
+          &ri
           ACE_ENV_ARG_PARAMETER
         );
         ACE_TRY_CHECK;
         
         PortableInterceptor::ReplyStatus _tao_status =
-          _tao_ri.reply_status (ACE_ENV_SINGLE_ARG_PARAMETER);
+          ri.reply_status (ACE_ENV_SINGLE_ARG_PARAMETER);
         ACE_TRY_CHECK;
         
         if (_tao_status == PortableInterceptor::SYSTEM_EXCEPTION
@@ -12597,11 +12518,11 @@
           ACE_RE_THROW;
       }
     ACE_ENDTRY;
-        ACE_CHECK_RETURN (_tao_retval._retn ());
+    ACE_CHECK_RETURN (0);
 
     PortableInterceptor::ReplyStatus _tao_status =
-      _tao_ri.reply_status (ACE_ENV_SINGLE_ARG_PARAMETER);
-        ACE_CHECK_RETURN (_tao_retval._retn ());
+      ri.reply_status (ACE_ENV_SINGLE_ARG_PARAMETER);
+    ACE_CHECK_RETURN (0);
 
     if (_tao_status == PortableInterceptor::LOCATION_FORWARD
         || _tao_status == PortableInterceptor::TRANSPORT_RETRY)
@@ -12611,15 +12532,15 @@
     
     break;
   }
-return _tao_retval._retn ();
+return _tao_safe_retval._retn ();
 }
 
-::IR::ConsumesDef_ptr IR::_TAO_ComponentDef_Remote_Proxy_Impl::create_consumes (
+IR::ConsumesDef_ptr IR::_TAO_ComponentDef_Remote_Proxy_Impl::create_consumes (
     CORBA_Object *_collocated_tao_target_,
     const char * id,
     const char * name,
     const char * version,
-    CORBA::ValueDef_ptr value
+    CORBA_ValueDef_ptr value
     ACE_ENV_ARG_DECL
   )
   ACE_THROW_SPEC ((
@@ -12627,20 +12548,20 @@
   ))
 {
   
-  IR::ConsumesDef_var _tao_retval (IR::ConsumesDef::_nil ());
-
+  IR::ConsumesDef_ptr _tao_retval = IR::ConsumesDef::_nil ();
+  IR::ConsumesDef_var _tao_safe_retval (_tao_retval);
 
   
   TAO_Stub *istub = _collocated_tao_target_->_stubobj ();
   if (istub == 0)
-    ACE_THROW_RETURN (CORBA::INTERNAL (),_tao_retval._retn ());
+    ACE_THROW_RETURN (CORBA::INTERNAL (), 0);
 
   
   TAO_GIOP_Twoway_Invocation _tao_call (
       istub,
       "create_consumes",
       15,
-      4,
+      1,
       istub->orb_core ()
     );
   
@@ -12660,28 +12581,29 @@
       _invoke_status = TAO_INVOKE_EXCEPTION;
       
 #if TAO_HAS_INTERCEPTORS == 1
-      TAO_ClientRequestInfo_IR_ComponentDef_create_consumes _tao_ri (
+      TAO_ClientRequestInfo_IR_ComponentDef_create_consumes ri (
         &_tao_call,
         _collocated_tao_target_,
         id,
         name,
         version,
-        value ACE_ENV_ARG_PARAMETER
+        value
+        ACE_ENV_ARG_PARAMETER
       );
-            ACE_CHECK_RETURN (_tao_retval._retn ());
+      ACE_CHECK_RETURN (0);
 
 #endif /* TAO_HAS_INTERCEPTORS */
       
       
       CORBA::Short _tao_response_flag = TAO_TWOWAY_RESPONSE_FLAG;
-      TAO_INTERCEPTOR (_tao_ri.response_expected (1));
+      TAO_INTERCEPTOR (ri.response_expected (1));
       
 #if TAO_HAS_INTERCEPTORS == 1
       
       ACE_TRY
         {
           _tao_vfr.send_request (
-            &_tao_ri
+            &ri
             ACE_ENV_ARG_PARAMETER
           );
           ACE_TRY_CHECK;
@@ -12695,13 +12617,13 @@
 #endif /* TAO_HAS_INTERCEPTORS */
           
           _tao_call.start (ACE_ENV_SINGLE_ARG_PARAMETER);
-                    TAO_INTERCEPTOR_CHECK_RETURN (_tao_retval._retn ());
+          TAO_INTERCEPTOR_CHECK_RETURN (0);
 
           _tao_call.prepare_header (
               ACE_static_cast (CORBA::Octet, _tao_response_flag)
               ACE_ENV_ARG_PARAMETER
             );
-                    TAO_INTERCEPTOR_CHECK_RETURN (_tao_retval._retn ());
+          TAO_INTERCEPTOR_CHECK_RETURN (0);
 
           TAO_OutputCDR &_tao_out = _tao_call.out_stream ();
           if (!(
@@ -12717,7 +12639,7 @@
             
           _invoke_status =
             _tao_call.invoke (0, 0 ACE_ENV_ARG_PARAMETER);
-                    TAO_INTERCEPTOR_CHECK_RETURN (_tao_retval._retn ());
+          TAO_INTERCEPTOR_CHECK_RETURN (0);
 
           if (_invoke_status == TAO_INVOKE_EXCEPTION)
             {
@@ -12730,9 +12652,9 @@
           else if (_invoke_status == TAO_INVOKE_RESTART)
             {
               TAO_INTERCEPTOR (
-                _tao_ri.reply_status (_invoke_status);
+                ri.reply_status (_invoke_status);
                 _tao_vfr.receive_other (
-                  &_tao_ri
+                  &ri
                   ACE_ENV_ARG_PARAMETER
                 );
                 ACE_TRY_CHECK;
@@ -12743,7 +12665,7 @@
           
           TAO_InputCDR &_tao_in = _tao_call.inp_stream ();
           if (!(
-                            (_tao_in >> _tao_retval.inout ())
+                            (_tao_in >> _tao_safe_retval.inout ())
               ))
             {
               TAO_INTERCEPTOR_THROW_RETURN (
@@ -12754,13 +12676,13 @@
             }
           
 #if TAO_HAS_INTERCEPTORS == 1
-          ::IR::ConsumesDef_ptr _tao_retval_info = _tao_retval._retn ();
-          _tao_ri.result (_tao_retval_info);
-          _tao_retval = _tao_retval_info;
+          IR::ConsumesDef_ptr _tao_retval_info = _tao_safe_retval._retn ();
+          ri.result (_tao_retval_info);
+          _tao_safe_retval = _tao_retval_info;
           
-          _tao_ri.reply_status (_invoke_status);
+          ri.reply_status (_invoke_status);
           _tao_vfr.receive_reply (
-            &_tao_ri
+            &ri
             ACE_ENV_ARG_PARAMETER
           );
           ACE_TRY_CHECK;
@@ -12768,15 +12690,15 @@
       }
     ACE_CATCHANY
       {
-        _tao_ri.exception (&ACE_ANY_EXCEPTION);
+        ri.exception (&ACE_ANY_EXCEPTION);
         _tao_vfr.receive_exception (
-          &_tao_ri
+          &ri
           ACE_ENV_ARG_PARAMETER
         );
         ACE_TRY_CHECK;
         
         PortableInterceptor::ReplyStatus _tao_status =
-          _tao_ri.reply_status (ACE_ENV_SINGLE_ARG_PARAMETER);
+          ri.reply_status (ACE_ENV_SINGLE_ARG_PARAMETER);
         ACE_TRY_CHECK;
         
         if (_tao_status == PortableInterceptor::SYSTEM_EXCEPTION
@@ -12784,11 +12706,11 @@
           ACE_RE_THROW;
       }
     ACE_ENDTRY;
-        ACE_CHECK_RETURN (_tao_retval._retn ());
+    ACE_CHECK_RETURN (0);
 
     PortableInterceptor::ReplyStatus _tao_status =
-      _tao_ri.reply_status (ACE_ENV_SINGLE_ARG_PARAMETER);
-        ACE_CHECK_RETURN (_tao_retval._retn ());
+      ri.reply_status (ACE_ENV_SINGLE_ARG_PARAMETER);
+    ACE_CHECK_RETURN (0);
 
     if (_tao_status == PortableInterceptor::LOCATION_FORWARD
         || _tao_status == PortableInterceptor::TRANSPORT_RETRY)
@@ -12798,7 +12720,7 @@
     
     break;
   }
-return _tao_retval._retn ();
+return _tao_safe_retval._retn ();
 }
 
 
@@ -12854,14 +12776,13 @@
 ///////////////////////////////////////////////////////////////////////
 
 
-// TAO_IDL - Generated from 
-// be/be_visitor_interface/interface_cs.cpp:198
-
+// default constructor
 IR::ComponentDef::ComponentDef (int collocated)
 {
   this->IR_ComponentDef_setup_collocation (collocated);
 }
 
+// destructor
 IR::ComponentDef::~ComponentDef (void)
 {}
 
@@ -12901,8 +12822,7 @@
   return ComponentDef::_unchecked_narrow (obj ACE_ENV_ARG_PARAMETER);
 }
 
-IR::ComponentDef_ptr 
-IR::ComponentDef::_unchecked_narrow (
+IR::ComponentDef_ptr IR::ComponentDef::_unchecked_narrow (
     CORBA::Object_ptr obj
     ACE_ENV_ARG_DECL_NOT_USED
   )
@@ -12919,8 +12839,7 @@
       if (
           !CORBA::is_nil (stub->servant_orb_var ().ptr ()) &&
           stub->servant_orb_var ()->orb_core ()->optimize_collocation_objects () &&
-          obj->_is_collocated () &&
-          IR__TAO_ComponentDef_Proxy_Broker_Factory_function_pointer != 0
+          obj->_is_collocated () &&IR__TAO_ComponentDef_Proxy_Broker_Factory_function_pointer != 0
         )
         {
           ACE_NEW_RETURN (
@@ -12928,25 +12847,12 @@
               ::IR::ComponentDef (
                   stub,
                   1,
-                  obj->_servant ()
-                ),
-              ComponentDef::_nil ()
-            );
-        }
+            obj->_servant ()),
       
-      if (CORBA::is_nil (default_proxy))
-        {
-          ACE_NEW_RETURN (
-              default_proxy,
-              ::IR::ComponentDef (
-                  stub,
-                  0,
-                  obj->_servant ()
-                ),
-              ComponentDef::_nil ()
-            );
+          ComponentDef::_nil ());
         }
-      
+      if (CORBA::is_nil (default_proxy))
+        ACE_NEW_RETURN (default_proxy, ::IR::ComponentDef (stub, 0, obj->_servant ()), ComponentDef::_nil ());
       return default_proxy;
     }
   else 
@@ -12997,61 +12903,61 @@
     retv = ACE_reinterpret_cast (void*, this);
   else if (type == ACE_reinterpret_cast
     (ptr_arith_t,
-      &::CORBA::InterfaceDef::_tao_class_id))
+      &CORBA_InterfaceDef::_tao_class_id))
     retv = ACE_reinterpret_cast
       (
         void *,
         ACE_static_cast
           (
-            CORBA::InterfaceDef_ptr,
+            CORBA_InterfaceDef_ptr,
             this
           )
       );
   else if (type == ACE_reinterpret_cast
     (ptr_arith_t,
-      &::CORBA::Container::_tao_class_id))
+      &CORBA_Container::_tao_class_id))
     retv = ACE_reinterpret_cast
       (
         void *,
         ACE_static_cast
           (
-            CORBA::Container_ptr,
+            CORBA_Container_ptr,
             this
           )
       );
   else if (type == ACE_reinterpret_cast
     (ptr_arith_t,
-      &::CORBA::Contained::_tao_class_id))
+      &CORBA_Contained::_tao_class_id))
     retv = ACE_reinterpret_cast
       (
         void *,
         ACE_static_cast
           (
-            CORBA::Contained_ptr,
+            CORBA_Contained_ptr,
             this
           )
       );
   else if (type == ACE_reinterpret_cast
     (ptr_arith_t,
-      &::CORBA::IDLType::_tao_class_id))
+      &CORBA_IDLType::_tao_class_id))
     retv = ACE_reinterpret_cast
       (
         void *,
         ACE_static_cast
           (
-            CORBA::IDLType_ptr,
+            CORBA_IDLType_ptr,
             this
           )
       );
   else if (type == ACE_reinterpret_cast
     (ptr_arith_t,
-      &::CORBA::IRObject::_tao_class_id))
+      &CORBA_IRObject::_tao_class_id))
     retv = ACE_reinterpret_cast
       (
         void *,
         ACE_static_cast
           (
-            CORBA::IRObject_ptr,
+            CORBA_IRObject_ptr,
             this
           )
       );
@@ -13069,8 +12975,7 @@
   return "IDL:omg.org/IR/ComponentDef:1.0";
 }
 
-::CORBA::InterfaceDefSeq * IR::ComponentDef::supported_interfaces (
-    
+CORBA_InterfaceDefSeq * IR::ComponentDef::supported_interfaces (
     ACE_ENV_SINGLE_ARG_DECL
   )
   ACE_THROW_SPEC ((
@@ -13082,12 +12987,13 @@
   ACE_CHECK_RETURN (0);
   
   return proxy.supported_interfaces (
-      this ACE_ENV_ARG_PARAMETER
+      this
+      ACE_ENV_ARG_PARAMETER
     );
 }
 
 void IR::ComponentDef::supported_interfaces (
-    const CORBA::InterfaceDefSeq & supported_interfaces
+    const CORBA_InterfaceDefSeq & supported_interfaces
     ACE_ENV_ARG_DECL
   )
   ACE_THROW_SPEC ((
@@ -13100,12 +13006,12 @@
   
   proxy.supported_interfaces (
       this,
-      supported_interfaces ACE_ENV_ARG_PARAMETER
+      supported_interfaces
+      ACE_ENV_ARG_PARAMETER
     );
 }
 
-::IR::ComponentDef_ptr IR::ComponentDef::base_component (
-    
+IR::ComponentDef_ptr IR::ComponentDef::base_component (
     ACE_ENV_SINGLE_ARG_DECL
   )
   ACE_THROW_SPEC ((
@@ -13117,12 +13023,12 @@
   ACE_CHECK_RETURN (0);
   
   return proxy.base_component (
-      this ACE_ENV_ARG_PARAMETER
+      this
+      ACE_ENV_ARG_PARAMETER
     );
 }
 
-::IR::ProvidesDefSeq * IR::ComponentDef::provides_interfaces (
-    
+IR::ProvidesDefSeq * IR::ComponentDef::provides_interfaces (
     ACE_ENV_SINGLE_ARG_DECL
   )
   ACE_THROW_SPEC ((
@@ -13134,12 +13040,12 @@
   ACE_CHECK_RETURN (0);
   
   return proxy.provides_interfaces (
-      this ACE_ENV_ARG_PARAMETER
+      this
+      ACE_ENV_ARG_PARAMETER
     );
 }
 
-::IR::UsesDefSeq * IR::ComponentDef::uses_interfaces (
-    
+IR::UsesDefSeq * IR::ComponentDef::uses_interfaces (
     ACE_ENV_SINGLE_ARG_DECL
   )
   ACE_THROW_SPEC ((
@@ -13151,12 +13057,12 @@
   ACE_CHECK_RETURN (0);
   
   return proxy.uses_interfaces (
-      this ACE_ENV_ARG_PARAMETER
+      this
+      ACE_ENV_ARG_PARAMETER
     );
 }
 
-::IR::EmitsDefSeq * IR::ComponentDef::emits_events (
-    
+IR::EmitsDefSeq * IR::ComponentDef::emits_events (
     ACE_ENV_SINGLE_ARG_DECL
   )
   ACE_THROW_SPEC ((
@@ -13168,12 +13074,12 @@
   ACE_CHECK_RETURN (0);
   
   return proxy.emits_events (
-      this ACE_ENV_ARG_PARAMETER
+      this
+      ACE_ENV_ARG_PARAMETER
     );
 }
 
-::IR::PublishesDefSeq * IR::ComponentDef::publishes_events (
-    
+IR::PublishesDefSeq * IR::ComponentDef::publishes_events (
     ACE_ENV_SINGLE_ARG_DECL
   )
   ACE_THROW_SPEC ((
@@ -13185,12 +13091,12 @@
   ACE_CHECK_RETURN (0);
   
   return proxy.publishes_events (
-      this ACE_ENV_ARG_PARAMETER
+      this
+      ACE_ENV_ARG_PARAMETER
     );
 }
 
-::IR::ConsumesDefSeq * IR::ComponentDef::consumes_events (
-    
+IR::ConsumesDefSeq * IR::ComponentDef::consumes_events (
     ACE_ENV_SINGLE_ARG_DECL
   )
   ACE_THROW_SPEC ((
@@ -13202,12 +13108,12 @@
   ACE_CHECK_RETURN (0);
   
   return proxy.consumes_events (
-      this ACE_ENV_ARG_PARAMETER
+      this
+      ACE_ENV_ARG_PARAMETER
     );
 }
 
 CORBA::Boolean IR::ComponentDef::is_basic (
-    
     ACE_ENV_SINGLE_ARG_DECL
   )
   ACE_THROW_SPEC ((
@@ -13219,15 +13125,16 @@
   ACE_CHECK_RETURN (0);
   
   return proxy.is_basic (
-      this ACE_ENV_ARG_PARAMETER
+      this
+      ACE_ENV_ARG_PARAMETER
     );
 }
 
-::IR::ProvidesDef_ptr IR::ComponentDef::create_provides (
+IR::ProvidesDef_ptr IR::ComponentDef::create_provides (
     const char * id,
     const char * name,
     const char * version,
-    CORBA::InterfaceDef_ptr interface_type
+    CORBA_InterfaceDef_ptr interface_type
     ACE_ENV_ARG_DECL
   )
   ACE_THROW_SPEC ((
@@ -13243,15 +13150,16 @@
       id,
       name,
       version,
-      interface_type ACE_ENV_ARG_PARAMETER
+      interface_type
+      ACE_ENV_ARG_PARAMETER
     );
 }
 
-::IR::UsesDef_ptr IR::ComponentDef::create_uses (
+IR::UsesDef_ptr IR::ComponentDef::create_uses (
     const char * id,
     const char * name,
     const char * version,
-    CORBA::InterfaceDef_ptr interface_type,
+    CORBA_InterfaceDef_ptr interface_type,
     CORBA::Boolean is_multiple
     ACE_ENV_ARG_DECL
   )
@@ -13269,15 +13177,16 @@
       name,
       version,
       interface_type,
-      is_multiple ACE_ENV_ARG_PARAMETER
+      is_multiple
+      ACE_ENV_ARG_PARAMETER
     );
 }
 
-::IR::EmitsDef_ptr IR::ComponentDef::create_emits (
+IR::EmitsDef_ptr IR::ComponentDef::create_emits (
     const char * id,
     const char * name,
     const char * version,
-    CORBA::ValueDef_ptr value
+    CORBA_ValueDef_ptr value
     ACE_ENV_ARG_DECL
   )
   ACE_THROW_SPEC ((
@@ -13293,15 +13202,16 @@
       id,
       name,
       version,
-      value ACE_ENV_ARG_PARAMETER
+      value
+      ACE_ENV_ARG_PARAMETER
     );
 }
 
-::IR::PublishesDef_ptr IR::ComponentDef::create_publishes (
+IR::PublishesDef_ptr IR::ComponentDef::create_publishes (
     const char * id,
     const char * name,
     const char * version,
-    CORBA::ValueDef_ptr value
+    CORBA_ValueDef_ptr value
     ACE_ENV_ARG_DECL
   )
   ACE_THROW_SPEC ((
@@ -13317,15 +13227,16 @@
       id,
       name,
       version,
-      value ACE_ENV_ARG_PARAMETER
+      value
+      ACE_ENV_ARG_PARAMETER
     );
 }
 
-::IR::ConsumesDef_ptr IR::ComponentDef::create_consumes (
+IR::ConsumesDef_ptr IR::ComponentDef::create_consumes (
     const char * id,
     const char * name,
     const char * version,
-    CORBA::ValueDef_ptr value
+    CORBA_ValueDef_ptr value
     ACE_ENV_ARG_DECL
   )
   ACE_THROW_SPEC ((
@@ -13341,7 +13252,8 @@
       id,
       name,
       version,
-      value ACE_ENV_ARG_PARAMETER
+      value
+      ACE_ENV_ARG_PARAMETER
     );
 }
 
@@ -13374,7 +13286,7 @@
 
 TAO_NAMESPACE_TYPE (CORBA::TypeCode_ptr)
 TAO_NAMESPACE_BEGIN (IR)
-TAO_NAMESPACE_DEFINE (::CORBA::TypeCode_ptr, _tc_ComponentDef, &_tc_TAO_tc_IR_ComponentDef)
+TAO_NAMESPACE_DEFINE (CORBA::TypeCode_ptr, _tc_ComponentDef, &_tc_TAO_tc_IR_ComponentDef)
 TAO_NAMESPACE_END
 
 static const CORBA::Long _oc_IR_ComponentDescription[] =
@@ -13447,8 +13359,26 @@
   ACE_NTOHL (0x64656669), 
   ACE_NTOHL (0x6e65645f), 
   ACE_NTOHL (0x696e0000),  // name = defined_in
-  0xffffffff, // indirection
-  0xffffffa0, // negative offset (-96)
+  CORBA::tk_alias, // typecode kind for typedefs
+  68, // encapsulation length
+    TAO_ENCAP_BYTE_ORDER, // byte order
+    32,
+    ACE_NTOHL (0x49444c3a),
+    ACE_NTOHL (0x6f6d672e),
+    ACE_NTOHL (0x6f72672f),
+    ACE_NTOHL (0x49522f52),
+    ACE_NTOHL (0x65706f73),
+    ACE_NTOHL (0x69746f72),
+    ACE_NTOHL (0x7949643a),
+    ACE_NTOHL (0x312e3000),  // repository ID = IDL:omg.org/IR/RepositoryId:1.0
+    13,
+    ACE_NTOHL (0x5265706f),
+    ACE_NTOHL (0x7369746f),
+    ACE_NTOHL (0x72794964),
+    ACE_NTOHL (0x0),  // name = RepositoryId
+    CORBA::tk_string,
+    0U, // string length
+
   8,
   ACE_NTOHL (0x76657273), 
   ACE_NTOHL (0x696f6e00),  // name = version
@@ -13476,8 +13406,26 @@
   ACE_NTOHL (0x5f636f6d), 
   ACE_NTOHL (0x706f6e65), 
   ACE_NTOHL (0x6e740000),  // name = base_component
-  0xffffffff, // indirection
-  0xffffff30, // negative offset (-208)
+  CORBA::tk_alias, // typecode kind for typedefs
+  68, // encapsulation length
+    TAO_ENCAP_BYTE_ORDER, // byte order
+    32,
+    ACE_NTOHL (0x49444c3a),
+    ACE_NTOHL (0x6f6d672e),
+    ACE_NTOHL (0x6f72672f),
+    ACE_NTOHL (0x49522f52),
+    ACE_NTOHL (0x65706f73),
+    ACE_NTOHL (0x69746f72),
+    ACE_NTOHL (0x7949643a),
+    ACE_NTOHL (0x312e3000),  // repository ID = IDL:omg.org/IR/RepositoryId:1.0
+    13,
+    ACE_NTOHL (0x5265706f),
+    ACE_NTOHL (0x7369746f),
+    ACE_NTOHL (0x72794964),
+    ACE_NTOHL (0x0),  // name = RepositoryId
+    CORBA::tk_string,
+    0U, // string length
+
   20,
   ACE_NTOHL (0x73757070), 
   ACE_NTOHL (0x6f727473), 
@@ -13485,7 +13433,7 @@
   ACE_NTOHL (0x65726661), 
   ACE_NTOHL (0x63657300),  // name = supports_interfaces
   CORBA::tk_alias, // typecode kind for typedefs
-  88, // encapsulation length
+  156, // encapsulation length
     TAO_ENCAP_BYTE_ORDER, // byte order
     35,
     ACE_NTOHL (0x49444c3a), 
@@ -13503,10 +13451,28 @@
     ACE_NTOHL (0x72794964), 
     ACE_NTOHL (0x53657100),  // name = RepositoryIdSeq
     CORBA::tk_sequence, // typecode kind
-    16, // encapsulation length
+    84, // encapsulation length
+      TAO_ENCAP_BYTE_ORDER, // byte order
+      CORBA::tk_alias, // typecode kind for typedefs
+      68, // encapsulation length
       TAO_ENCAP_BYTE_ORDER, // byte order
-      0xffffffff, // indirection
-      0xfffffebc, // negative offset (-324)
+        32,
+        ACE_NTOHL (0x49444c3a),
+        ACE_NTOHL (0x6f6d672e),
+        ACE_NTOHL (0x6f72672f),
+        ACE_NTOHL (0x49522f52),
+        ACE_NTOHL (0x65706f73),
+        ACE_NTOHL (0x69746f72),
+        ACE_NTOHL (0x7949643a),
+        ACE_NTOHL (0x312e3000),  // repository ID = IDL:omg.org/IR/RepositoryId:1.0
+        13,
+        ACE_NTOHL (0x5265706f),
+        ACE_NTOHL (0x7369746f),
+        ACE_NTOHL (0x72794964),
+        ACE_NTOHL (0x0),  // name = RepositoryId
+        CORBA::tk_string,
+        0U, // string length
+
       0U,
 
 
@@ -13604,7 +13570,7 @@
   ACE_NTOHL (0x69627574), 
   ACE_NTOHL (0x65730000),  // name = attributes
   CORBA::tk_alias, // typecode kind for typedefs
-  612, // encapsulation length
+  1852, // encapsulation length
     TAO_ENCAP_BYTE_ORDER, // byte order
     41,
     ACE_NTOHL (0x49444c3a), 
@@ -13625,10 +13591,10 @@
     ACE_NTOHL (0x696f6e53), 
     ACE_NTOHL (0x65710000),  // name = AttrDescriptionSeq
     CORBA::tk_sequence, // typecode kind
-    528, // encapsulation length
+    1768, // encapsulation length
       TAO_ENCAP_BYTE_ORDER, // byte order
       CORBA::tk_struct, // typecode kind
-      512, // encapsulation length
+      1752, // encapsulation length
         TAO_ENCAP_BYTE_ORDER, // byte order
         43,
         ACE_NTOHL (0x49444c3a), 
@@ -13649,7 +13615,7 @@
         ACE_NTOHL (0x63726970), 
         ACE_NTOHL (0x74696f6e), 
         ACE_NTOHL (0x0),  // name = AttributeDescription
-        6, // member count
+        8, // member count
         5,
         ACE_NTOHL (0x6e616d65), 
         ACE_NTOHL (0x0),  // name = name
@@ -13700,8 +13666,27 @@
         ACE_NTOHL (0x64656669), 
         ACE_NTOHL (0x6e65645f), 
         ACE_NTOHL (0x696e0000),  // name = defined_in
-        0xffffffff, // indirection
-        0xffffff9c, // negative offset (-100)
+        CORBA::tk_alias, // typecode kind for typedefs
+        72, // encapsulation length
+          TAO_ENCAP_BYTE_ORDER, // byte order
+          35,
+          ACE_NTOHL (0x49444c3a),
+          ACE_NTOHL (0x6f6d672e),
+          ACE_NTOHL (0x6f72672f),
+          ACE_NTOHL (0x434f5242),
+          ACE_NTOHL (0x412f5265),
+          ACE_NTOHL (0x706f7369),
+          ACE_NTOHL (0x746f7279),
+          ACE_NTOHL (0x49643a31),
+          ACE_NTOHL (0x2e300000),  // repository ID = IDL:omg.org/CORBA/RepositoryId:1.0
+          13,
+          ACE_NTOHL (0x5265706f),
+          ACE_NTOHL (0x7369746f),
+          ACE_NTOHL (0x72794964),
+          ACE_NTOHL (0x0),  // name = RepositoryId
+        CORBA::tk_string,
+        0U, // string length
+
         8,
         ACE_NTOHL (0x76657273), 
         ACE_NTOHL (0x696f6e00),  // name = version
@@ -13762,289 +13747,591 @@
           ACE_NTOHL (0x444f4e4c), 
           ACE_NTOHL (0x59000000),  // name = ATTR_READONLY
 
-
-      0U,
-
-
-  13,
-  ACE_NTOHL (0x656d6974), 
-  ACE_NTOHL (0x735f6576), 
-  ACE_NTOHL (0x656e7473), 
-  ACE_NTOHL (0x0),  // name = emits_events
+        15,
+        ACE_NTOHL (0x6765745f),
+        ACE_NTOHL (0x65786365),
+        ACE_NTOHL (0x7074696f),
+        ACE_NTOHL (0x6e730000),  // name = get_exceptions
   CORBA::tk_alias, // typecode kind for typedefs
-  132, // encapsulation length
+        556, // encapsulation length
     TAO_ENCAP_BYTE_ORDER, // byte order
-    31,
+          40,
     ACE_NTOHL (0x49444c3a), 
     ACE_NTOHL (0x6f6d672e), 
     ACE_NTOHL (0x6f72672f), 
-    ACE_NTOHL (0x49522f45), 
-    ACE_NTOHL (0x6d697473), 
-    ACE_NTOHL (0x44656653), 
-    ACE_NTOHL (0x65713a31), 
-    ACE_NTOHL (0x2e300000),  // repository ID = IDL:omg.org/IR/EmitsDefSeq:1.0
-    12,
-    ACE_NTOHL (0x456d6974), 
-    ACE_NTOHL (0x73446566), 
-    ACE_NTOHL (0x53657100),  // name = EmitsDefSeq
+          ACE_NTOHL (0x434f5242),
+          ACE_NTOHL (0x412f4578),
+          ACE_NTOHL (0x63446573),
+          ACE_NTOHL (0x63726970),
+          ACE_NTOHL (0x74696f6e),
+          ACE_NTOHL (0x5365713a),
+          ACE_NTOHL (0x312e3000),  // repository ID = IDL:omg.org/CORBA/ExcDescriptionSeq:1.0
+          18,
+          ACE_NTOHL (0x45786344),
+          ACE_NTOHL (0x65736372),
+          ACE_NTOHL (0x69707469),
+          ACE_NTOHL (0x6f6e5365),
+          ACE_NTOHL (0x71000000),  // name = ExcDescriptionSeq
     CORBA::tk_sequence, // typecode kind
-    68, // encapsulation length
+          476, // encapsulation length
       TAO_ENCAP_BYTE_ORDER, // byte order
-      CORBA::tk_objref, // typecode kind
-      52, // encapsulation length
+            CORBA::tk_struct, // typecode kind
+            460, // encapsulation length
         TAO_ENCAP_BYTE_ORDER, // byte order
-        28,
+              43,
         ACE_NTOHL (0x49444c3a), 
         ACE_NTOHL (0x6f6d672e), 
         ACE_NTOHL (0x6f72672f), 
-        ACE_NTOHL (0x49522f45), 
-        ACE_NTOHL (0x6d697473), 
-        ACE_NTOHL (0x4465663a), 
-        ACE_NTOHL (0x312e3000),  // repository ID = IDL:omg.org/IR/EmitsDef:1.0
-        9,
-        ACE_NTOHL (0x456d6974), 
-        ACE_NTOHL (0x73446566), 
-        ACE_NTOHL (0x0),  // name = EmitsDef
-
-      0U,
-
+              ACE_NTOHL (0x434f5242),
+              ACE_NTOHL (0x412f4578),
+              ACE_NTOHL (0x63657074),
+              ACE_NTOHL (0x696f6e44),
+              ACE_NTOHL (0x65736372),
+              ACE_NTOHL (0x69707469),
+              ACE_NTOHL (0x6f6e3a31),
+              ACE_NTOHL (0x2e300000),  // repository ID = IDL:omg.org/CORBA/ExceptionDescription:1.0
+              21,
+              ACE_NTOHL (0x45786365),
+              ACE_NTOHL (0x7074696f),
+              ACE_NTOHL (0x6e446573),
+              ACE_NTOHL (0x63726970),
+              ACE_NTOHL (0x74696f6e),
+              ACE_NTOHL (0x0),  // name = ExceptionDescription
+              5, // member count
+              5,
+              ACE_NTOHL (0x6e616d65),
+              ACE_NTOHL (0x0),  // name = name
+  CORBA::tk_alias, // typecode kind for typedefs
+              68, // encapsulation length
+    TAO_ENCAP_BYTE_ORDER, // byte order
+                33,
+    ACE_NTOHL (0x49444c3a),
+    ACE_NTOHL (0x6f6d672e),
+    ACE_NTOHL (0x6f72672f),
+                ACE_NTOHL (0x434f5242),
+                ACE_NTOHL (0x412f4964),
+                ACE_NTOHL (0x656e7469),
+                ACE_NTOHL (0x66696572),
+                ACE_NTOHL (0x3a312e30),
+                ACE_NTOHL (0x0),  // repository ID = IDL:omg.org/CORBA/Identifier:1.0
+                11,
+                ACE_NTOHL (0x4964656e),
+                ACE_NTOHL (0x74696669),
+                ACE_NTOHL (0x65720000),  // name = Identifier
+                CORBA::tk_string,
+                0U, // string length
 
-  17,
-  ACE_NTOHL (0x7075626c), 
-  ACE_NTOHL (0x69736865), 
-  ACE_NTOHL (0x735f6576), 
-  ACE_NTOHL (0x656e7473), 
-  ACE_NTOHL (0x0),  // name = publishes_events
+              3,
+              ACE_NTOHL (0x69640000),  // name = id
   CORBA::tk_alias, // typecode kind for typedefs
-  148, // encapsulation length
+              72, // encapsulation length
     TAO_ENCAP_BYTE_ORDER, // byte order
     35,
     ACE_NTOHL (0x49444c3a), 
     ACE_NTOHL (0x6f6d672e), 
     ACE_NTOHL (0x6f72672f), 
-    ACE_NTOHL (0x49522f50), 
-    ACE_NTOHL (0x75626c69), 
-    ACE_NTOHL (0x73686573), 
-    ACE_NTOHL (0x44656653), 
-    ACE_NTOHL (0x65713a31), 
-    ACE_NTOHL (0x2e300000),  // repository ID = IDL:omg.org/IR/PublishesDefSeq:1.0
-    16,
-    ACE_NTOHL (0x5075626c), 
-    ACE_NTOHL (0x69736865), 
-    ACE_NTOHL (0x73446566), 
-    ACE_NTOHL (0x53657100),  // name = PublishesDefSeq
-    CORBA::tk_sequence, // typecode kind
-    76, // encapsulation length
-      TAO_ENCAP_BYTE_ORDER, // byte order
-      CORBA::tk_objref, // typecode kind
-      60, // encapsulation length
+                ACE_NTOHL (0x434f5242),
+                ACE_NTOHL (0x412f5265),
+                ACE_NTOHL (0x706f7369),
+                ACE_NTOHL (0x746f7279),
+                ACE_NTOHL (0x49643a31),
+                ACE_NTOHL (0x2e300000),  // repository ID = IDL:omg.org/CORBA/RepositoryId:1.0
+        13,
+                ACE_NTOHL (0x5265706f),
+                ACE_NTOHL (0x7369746f),
+                ACE_NTOHL (0x72794964),
+                ACE_NTOHL (0x0),  // name = RepositoryId
+                CORBA::tk_string,
+                0U, // string length
+
+              11,
+              ACE_NTOHL (0x64656669),
+              ACE_NTOHL (0x6e65645f),
+              ACE_NTOHL (0x696e0000),  // name = defined_in
+  CORBA::tk_alias, // typecode kind for typedefs
+              72, // encapsulation length
         TAO_ENCAP_BYTE_ORDER, // byte order
-        32,
+                35,
         ACE_NTOHL (0x49444c3a), 
         ACE_NTOHL (0x6f6d672e), 
         ACE_NTOHL (0x6f72672f), 
-        ACE_NTOHL (0x49522f50), 
-        ACE_NTOHL (0x75626c69), 
-        ACE_NTOHL (0x73686573), 
-        ACE_NTOHL (0x4465663a), 
-        ACE_NTOHL (0x312e3000),  // repository ID = IDL:omg.org/IR/PublishesDef:1.0
+                ACE_NTOHL (0x434f5242),
+                ACE_NTOHL (0x412f5265),
+                ACE_NTOHL (0x706f7369),
+                ACE_NTOHL (0x746f7279),
+                ACE_NTOHL (0x49643a31),
+                ACE_NTOHL (0x2e300000),  // repository ID = IDL:omg.org/CORBA/RepositoryId:1.0
         13,
-        ACE_NTOHL (0x5075626c), 
-        ACE_NTOHL (0x69736865), 
-        ACE_NTOHL (0x73446566), 
-        ACE_NTOHL (0x0),  // name = PublishesDef
+                ACE_NTOHL (0x5265706f),
+                ACE_NTOHL (0x7369746f),
+                ACE_NTOHL (0x72794964),
+                ACE_NTOHL (0x0),  // name = RepositoryId
+                CORBA::tk_string,
+                0U, // string length
+
+              8,
+              ACE_NTOHL (0x76657273),
+              ACE_NTOHL (0x696f6e00),  // name = version
+              CORBA::tk_alias, // typecode kind for typedefs
+              68, // encapsulation length
+                TAO_ENCAP_BYTE_ORDER, // byte order
+                34,
+                ACE_NTOHL (0x49444c3a),
+                ACE_NTOHL (0x6f6d672e),
+                ACE_NTOHL (0x6f72672f),
+                ACE_NTOHL (0x434f5242),
+                ACE_NTOHL (0x412f5665),
+                ACE_NTOHL (0x7273696f),
+                ACE_NTOHL (0x6e537065),
+                ACE_NTOHL (0x633a312e),
+                ACE_NTOHL (0x30000000),  // repository ID = IDL:omg.org/CORBA/VersionSpec:1.0
+                12,
+                ACE_NTOHL (0x56657273),
+                ACE_NTOHL (0x696f6e53),
+                ACE_NTOHL (0x70656300),  // name = VersionSpec
+                CORBA::tk_string,
+                0U, // string length
+
+              5,
+              ACE_NTOHL (0x74797065),
+              ACE_NTOHL (0x0),  // name = type
+              CORBA::tk_TypeCode,
+
 
       0U,
 
 
-  16,
-  ACE_NTOHL (0x636f6e73), 
-  ACE_NTOHL (0x756d6573), 
-  ACE_NTOHL (0x5f657665), 
-  ACE_NTOHL (0x6e747300),  // name = consumes_events
+        15,
+        ACE_NTOHL (0x7075745f),
+        ACE_NTOHL (0x65786365),
+        ACE_NTOHL (0x7074696f),
+        ACE_NTOHL (0x6e730000),  // name = put_exceptions
   CORBA::tk_alias, // typecode kind for typedefs
-  144, // encapsulation length
+        556, // encapsulation length
     TAO_ENCAP_BYTE_ORDER, // byte order
-    34,
+          40,
     ACE_NTOHL (0x49444c3a), 
     ACE_NTOHL (0x6f6d672e), 
     ACE_NTOHL (0x6f72672f), 
-    ACE_NTOHL (0x49522f43), 
-    ACE_NTOHL (0x6f6e7375), 
-    ACE_NTOHL (0x6d657344), 
-    ACE_NTOHL (0x65665365), 
-    ACE_NTOHL (0x713a312e), 
-    ACE_NTOHL (0x30000000),  // repository ID = IDL:omg.org/IR/ConsumesDefSeq:1.0
-    15,
-    ACE_NTOHL (0x436f6e73), 
-    ACE_NTOHL (0x756d6573), 
-    ACE_NTOHL (0x44656653), 
-    ACE_NTOHL (0x65710000),  // name = ConsumesDefSeq
+          ACE_NTOHL (0x434f5242),
+          ACE_NTOHL (0x412f4578),
+          ACE_NTOHL (0x63446573),
+          ACE_NTOHL (0x63726970),
+          ACE_NTOHL (0x74696f6e),
+          ACE_NTOHL (0x5365713a),
+          ACE_NTOHL (0x312e3000),  // repository ID = IDL:omg.org/CORBA/ExcDescriptionSeq:1.0
+          18,
+          ACE_NTOHL (0x45786344),
+          ACE_NTOHL (0x65736372),
+          ACE_NTOHL (0x69707469),
+          ACE_NTOHL (0x6f6e5365),
+          ACE_NTOHL (0x71000000),  // name = ExcDescriptionSeq
     CORBA::tk_sequence, // typecode kind
-    72, // encapsulation length
+          476, // encapsulation length
       TAO_ENCAP_BYTE_ORDER, // byte order
-      CORBA::tk_objref, // typecode kind
-      56, // encapsulation length
+            CORBA::tk_struct, // typecode kind
+            460, // encapsulation length
         TAO_ENCAP_BYTE_ORDER, // byte order
-        31,
+              43,
         ACE_NTOHL (0x49444c3a), 
         ACE_NTOHL (0x6f6d672e), 
         ACE_NTOHL (0x6f72672f), 
-        ACE_NTOHL (0x49522f43), 
-        ACE_NTOHL (0x6f6e7375), 
-        ACE_NTOHL (0x6d657344), 
-        ACE_NTOHL (0x65663a31), 
-        ACE_NTOHL (0x2e300000),  // repository ID = IDL:omg.org/IR/ConsumesDef:1.0
-        12,
-        ACE_NTOHL (0x436f6e73), 
-        ACE_NTOHL (0x756d6573), 
-        ACE_NTOHL (0x44656600),  // name = ConsumesDef
-
-      0U,
-
-
-  9,
-  ACE_NTOHL (0x69735f62), 
-  ACE_NTOHL (0x61736963), 
-  ACE_NTOHL (0x0),  // name = is_basic
-  CORBA::tk_boolean,
-
-};
-
-static CORBA::TypeCode _tc_TAO_tc_IR_ComponentDescription (
-    CORBA::tk_struct,
-    sizeof (_oc_IR_ComponentDescription),
-    (char *) &_oc_IR_ComponentDescription,
-    0,
-    sizeof (IR::ComponentDescription)
-  );
-
-TAO_NAMESPACE_TYPE (CORBA::TypeCode_ptr)
-TAO_NAMESPACE_BEGIN (IR)
-TAO_NAMESPACE_DEFINE (::CORBA::TypeCode_ptr, _tc_ComponentDescription, &_tc_TAO_tc_IR_ComponentDescription)
-TAO_NAMESPACE_END
-
-void IR::ComponentDescription::_tao_any_destructor (void *_tao_void_pointer)
-{
-  ComponentDescription *tmp = ACE_static_cast (ComponentDescription*, _tao_void_pointer);
-  delete tmp;
-}
-
-
-// TAO_IDL - Generated from 
-// be/be_visitor_interface/interface_cs.cpp:67
-
-int IR::PrimaryKeyDef::_tao_class_id = 0;
-
-IR::PrimaryKeyDef_ptr
-tao_IR_PrimaryKeyDef_duplicate (
-    IR::PrimaryKeyDef_ptr p
-  )
-{
-  return IR::PrimaryKeyDef::_duplicate (p);
-}
-
-void
-tao_IR_PrimaryKeyDef_release (
-    IR::PrimaryKeyDef_ptr p
-  )
-{
-  CORBA::release (p);
-}
-
-IR::PrimaryKeyDef_ptr
-tao_IR_PrimaryKeyDef_nil (
-    void
-  )
-{
-  return IR::PrimaryKeyDef::_nil ();
-}
+              ACE_NTOHL (0x434f5242),
+              ACE_NTOHL (0x412f4578),
+              ACE_NTOHL (0x63657074),
+              ACE_NTOHL (0x696f6e44),
+              ACE_NTOHL (0x65736372),
+              ACE_NTOHL (0x69707469),
+              ACE_NTOHL (0x6f6e3a31),
+              ACE_NTOHL (0x2e300000),  // repository ID = IDL:omg.org/CORBA/ExceptionDescription:1.0
+              21,
+              ACE_NTOHL (0x45786365),
+              ACE_NTOHL (0x7074696f),
+              ACE_NTOHL (0x6e446573),
+              ACE_NTOHL (0x63726970),
+              ACE_NTOHL (0x74696f6e),
+              ACE_NTOHL (0x0),  // name = ExceptionDescription
+              5, // member count
+              5,
+              ACE_NTOHL (0x6e616d65),
+              ACE_NTOHL (0x0),  // name = name
+              CORBA::tk_alias, // typecode kind for typedefs
+              68, // encapsulation length
+                TAO_ENCAP_BYTE_ORDER, // byte order
+                33,
+                ACE_NTOHL (0x49444c3a),
+                ACE_NTOHL (0x6f6d672e),
+                ACE_NTOHL (0x6f72672f),
+                ACE_NTOHL (0x434f5242),
+                ACE_NTOHL (0x412f4964),
+                ACE_NTOHL (0x656e7469),
+                ACE_NTOHL (0x66696572),
+                ACE_NTOHL (0x3a312e30),
+                ACE_NTOHL (0x0),  // repository ID = IDL:omg.org/CORBA/Identifier:1.0
+                11,
+                ACE_NTOHL (0x4964656e),
+                ACE_NTOHL (0x74696669),
+                ACE_NTOHL (0x65720000),  // name = Identifier
+                CORBA::tk_string,
+                0U, // string length
 
-IR::PrimaryKeyDef_ptr
-tao_IR_PrimaryKeyDef_narrow (
-    CORBA::Object *p
-    ACE_ENV_ARG_DECL
-  )
-{
-  return IR::PrimaryKeyDef::_narrow (p ACE_ENV_ARG_PARAMETER);
-}
+              3,
+              ACE_NTOHL (0x69640000),  // name = id
+              CORBA::tk_alias, // typecode kind for typedefs
+              72, // encapsulation length
+                TAO_ENCAP_BYTE_ORDER, // byte order
+                35,
+                ACE_NTOHL (0x49444c3a),
+                ACE_NTOHL (0x6f6d672e),
+                ACE_NTOHL (0x6f72672f),
+                ACE_NTOHL (0x434f5242),
+                ACE_NTOHL (0x412f5265),
+                ACE_NTOHL (0x706f7369),
+                ACE_NTOHL (0x746f7279),
+                ACE_NTOHL (0x49643a31),
+                ACE_NTOHL (0x2e300000),  // repository ID = IDL:omg.org/CORBA/RepositoryId:1.0
+                13,
+                ACE_NTOHL (0x5265706f),
+                ACE_NTOHL (0x7369746f),
+                ACE_NTOHL (0x72794964),
+                ACE_NTOHL (0x0),  // name = RepositoryId
+                CORBA::tk_string,
+                0U, // string length
 
-CORBA::Object *
-tao_IR_PrimaryKeyDef_upcast (
-    void *src
-  )
-{
-  IR::PrimaryKeyDef **tmp =
-    ACE_static_cast (IR::PrimaryKeyDef **, src);
-  return *tmp;
-}
+              11,
+              ACE_NTOHL (0x64656669),
+              ACE_NTOHL (0x6e65645f),
+              ACE_NTOHL (0x696e0000),  // name = defined_in
+              CORBA::tk_alias, // typecode kind for typedefs
+              72, // encapsulation length
+                TAO_ENCAP_BYTE_ORDER, // byte order
+                35,
+                ACE_NTOHL (0x49444c3a),
+                ACE_NTOHL (0x6f6d672e),
+                ACE_NTOHL (0x6f72672f),
+                ACE_NTOHL (0x434f5242),
+                ACE_NTOHL (0x412f5265),
+                ACE_NTOHL (0x706f7369),
+                ACE_NTOHL (0x746f7279),
+                ACE_NTOHL (0x49643a31),
+                ACE_NTOHL (0x2e300000),  // repository ID = IDL:omg.org/CORBA/RepositoryId:1.0
+                13,
+                ACE_NTOHL (0x5265706f),
+                ACE_NTOHL (0x7369746f),
+                ACE_NTOHL (0x72794964),
+                ACE_NTOHL (0x0),  // name = RepositoryId
+                CORBA::tk_string,
+                0U, // string length
 
-// *************************************************************
-// IR::PrimaryKeyDef_var
-// TAO_IDL - Generated from
-// be/be_interface.cpp:654
-// *************************************************************
+              8,
+              ACE_NTOHL (0x76657273),
+              ACE_NTOHL (0x696f6e00),  // name = version
+              CORBA::tk_alias, // typecode kind for typedefs
+              68, // encapsulation length
+                TAO_ENCAP_BYTE_ORDER, // byte order
+                34,
+                ACE_NTOHL (0x49444c3a),
+                ACE_NTOHL (0x6f6d672e),
+                ACE_NTOHL (0x6f72672f),
+                ACE_NTOHL (0x434f5242),
+                ACE_NTOHL (0x412f5665),
+                ACE_NTOHL (0x7273696f),
+                ACE_NTOHL (0x6e537065),
+                ACE_NTOHL (0x633a312e),
+                ACE_NTOHL (0x30000000),  // repository ID = IDL:omg.org/CORBA/VersionSpec:1.0
+                12,
+                ACE_NTOHL (0x56657273),
+                ACE_NTOHL (0x696f6e53),
+                ACE_NTOHL (0x70656300),  // name = VersionSpec
+                CORBA::tk_string,
+                0U, // string length
 
-IR::PrimaryKeyDef_var::PrimaryKeyDef_var (void) // default constructor
-  : ptr_ (PrimaryKeyDef::_nil ())
-{}
+              5,
+              ACE_NTOHL (0x74797065),
+              ACE_NTOHL (0x0),  // name = type
+              CORBA::tk_TypeCode,
 
-::IR::PrimaryKeyDef_ptr
-IR::PrimaryKeyDef_var::ptr (void) const
-{
-  return this->ptr_;
-}
 
-IR::PrimaryKeyDef_var::PrimaryKeyDef_var (const ::IR::PrimaryKeyDef_var &p) // copy constructor
-  : TAO_Base_var (),
-    ptr_ (PrimaryKeyDef::_duplicate (p.ptr ()))
-{}
+            0U,
 
-IR::PrimaryKeyDef_var::~PrimaryKeyDef_var (void) // destructor
-{
-  CORBA::release (this->ptr_);
-}
 
-IR::PrimaryKeyDef_var &
-IR::PrimaryKeyDef_var::operator= (PrimaryKeyDef_ptr p)
-{
-  CORBA::release (this->ptr_);
-  this->ptr_ = p;
-  return *this;
-}
 
-IR::PrimaryKeyDef_var &
-IR::PrimaryKeyDef_var::operator= (const ::IR::PrimaryKeyDef_var &p)
-{
-  if (this != &p)
-  {
-    CORBA::release (this->ptr_);
-    this->ptr_ = ::IR::PrimaryKeyDef::_duplicate (p.ptr ());
-  }
-  return *this;
-}
+      0U,
 
-IR::PrimaryKeyDef_var::operator const ::IR::PrimaryKeyDef_ptr &() const // cast
-{
-  return this->ptr_;
-}
 
-IR::PrimaryKeyDef_var::operator ::IR::PrimaryKeyDef_ptr &() // cast 
-{
-  return this->ptr_;
-}
+  13,
+  ACE_NTOHL (0x656d6974),
+  ACE_NTOHL (0x735f6576),
+  ACE_NTOHL (0x656e7473),
+  ACE_NTOHL (0x0),  // name = emits_events
+  CORBA::tk_alias, // typecode kind for typedefs
+  132, // encapsulation length
+    TAO_ENCAP_BYTE_ORDER, // byte order
+    31,
+    ACE_NTOHL (0x49444c3a),
+    ACE_NTOHL (0x6f6d672e),
+    ACE_NTOHL (0x6f72672f),
+    ACE_NTOHL (0x49522f45),
+    ACE_NTOHL (0x6d697473),
+    ACE_NTOHL (0x44656653),
+    ACE_NTOHL (0x65713a31),
+    ACE_NTOHL (0x2e300000),  // repository ID = IDL:omg.org/IR/EmitsDefSeq:1.0
+    12,
+    ACE_NTOHL (0x456d6974),
+    ACE_NTOHL (0x73446566),
+    ACE_NTOHL (0x53657100),  // name = EmitsDefSeq
+    CORBA::tk_sequence, // typecode kind
+    68, // encapsulation length
+      TAO_ENCAP_BYTE_ORDER, // byte order
+      CORBA::tk_objref, // typecode kind
+      52, // encapsulation length
+        TAO_ENCAP_BYTE_ORDER, // byte order
+        28,
+        ACE_NTOHL (0x49444c3a),
+        ACE_NTOHL (0x6f6d672e),
+        ACE_NTOHL (0x6f72672f),
+        ACE_NTOHL (0x49522f45),
+        ACE_NTOHL (0x6d697473),
+        ACE_NTOHL (0x4465663a),
+        ACE_NTOHL (0x312e3000),  // repository ID = IDL:omg.org/IR/EmitsDef:1.0
+        9,
+        ACE_NTOHL (0x456d6974),
+        ACE_NTOHL (0x73446566),
+        ACE_NTOHL (0x0),  // name = EmitsDef
 
-::IR::PrimaryKeyDef_ptr
-IR::PrimaryKeyDef_var::operator-> (void) const
-{
-  return this->ptr_;
-}
+      0U,
 
-::IR::PrimaryKeyDef_ptr
-IR::PrimaryKeyDef_var::in (void) const
-{
-  return this->ptr_;
-}
+
+  17,
+  ACE_NTOHL (0x7075626c),
+  ACE_NTOHL (0x69736865),
+  ACE_NTOHL (0x735f6576),
+  ACE_NTOHL (0x656e7473),
+  ACE_NTOHL (0x0),  // name = publishes_events
+  CORBA::tk_alias, // typecode kind for typedefs
+  148, // encapsulation length
+    TAO_ENCAP_BYTE_ORDER, // byte order
+    35,
+    ACE_NTOHL (0x49444c3a),
+    ACE_NTOHL (0x6f6d672e),
+    ACE_NTOHL (0x6f72672f),
+    ACE_NTOHL (0x49522f50),
+    ACE_NTOHL (0x75626c69),
+    ACE_NTOHL (0x73686573),
+    ACE_NTOHL (0x44656653),
+    ACE_NTOHL (0x65713a31),
+    ACE_NTOHL (0x2e300000),  // repository ID = IDL:omg.org/IR/PublishesDefSeq:1.0
+    16,
+    ACE_NTOHL (0x5075626c),
+    ACE_NTOHL (0x69736865),
+    ACE_NTOHL (0x73446566),
+    ACE_NTOHL (0x53657100),  // name = PublishesDefSeq
+    CORBA::tk_sequence, // typecode kind
+    76, // encapsulation length
+      TAO_ENCAP_BYTE_ORDER, // byte order
+      CORBA::tk_objref, // typecode kind
+      60, // encapsulation length
+        TAO_ENCAP_BYTE_ORDER, // byte order
+        32,
+        ACE_NTOHL (0x49444c3a),
+        ACE_NTOHL (0x6f6d672e),
+        ACE_NTOHL (0x6f72672f),
+        ACE_NTOHL (0x49522f50),
+        ACE_NTOHL (0x75626c69),
+        ACE_NTOHL (0x73686573),
+        ACE_NTOHL (0x4465663a),
+        ACE_NTOHL (0x312e3000),  // repository ID = IDL:omg.org/IR/PublishesDef:1.0
+        13,
+        ACE_NTOHL (0x5075626c),
+        ACE_NTOHL (0x69736865),
+        ACE_NTOHL (0x73446566),
+        ACE_NTOHL (0x0),  // name = PublishesDef
+
+      0U,
+
+
+  16,
+  ACE_NTOHL (0x636f6e73),
+  ACE_NTOHL (0x756d6573),
+  ACE_NTOHL (0x5f657665),
+  ACE_NTOHL (0x6e747300),  // name = consumes_events
+  CORBA::tk_alias, // typecode kind for typedefs
+  144, // encapsulation length
+    TAO_ENCAP_BYTE_ORDER, // byte order
+    34,
+    ACE_NTOHL (0x49444c3a),
+    ACE_NTOHL (0x6f6d672e),
+    ACE_NTOHL (0x6f72672f),
+    ACE_NTOHL (0x49522f43),
+    ACE_NTOHL (0x6f6e7375),
+    ACE_NTOHL (0x6d657344),
+    ACE_NTOHL (0x65665365),
+    ACE_NTOHL (0x713a312e),
+    ACE_NTOHL (0x30000000),  // repository ID = IDL:omg.org/IR/ConsumesDefSeq:1.0
+    15,
+    ACE_NTOHL (0x436f6e73),
+    ACE_NTOHL (0x756d6573),
+    ACE_NTOHL (0x44656653),
+    ACE_NTOHL (0x65710000),  // name = ConsumesDefSeq
+    CORBA::tk_sequence, // typecode kind
+    72, // encapsulation length
+      TAO_ENCAP_BYTE_ORDER, // byte order
+      CORBA::tk_objref, // typecode kind
+      56, // encapsulation length
+        TAO_ENCAP_BYTE_ORDER, // byte order
+        31,
+        ACE_NTOHL (0x49444c3a),
+        ACE_NTOHL (0x6f6d672e),
+        ACE_NTOHL (0x6f72672f),
+        ACE_NTOHL (0x49522f43),
+        ACE_NTOHL (0x6f6e7375),
+        ACE_NTOHL (0x6d657344),
+        ACE_NTOHL (0x65663a31),
+        ACE_NTOHL (0x2e300000),  // repository ID = IDL:omg.org/IR/ConsumesDef:1.0
+        12,
+        ACE_NTOHL (0x436f6e73),
+        ACE_NTOHL (0x756d6573),
+        ACE_NTOHL (0x44656600),  // name = ConsumesDef
+
+      0U,
+
+
+  9,
+  ACE_NTOHL (0x69735f62),
+  ACE_NTOHL (0x61736963),
+  ACE_NTOHL (0x0),  // name = is_basic
+  CORBA::tk_boolean,
+
+};
+
+static CORBA::TypeCode _tc_TAO_tc_IR_ComponentDescription (
+    CORBA::tk_struct,
+    sizeof (_oc_IR_ComponentDescription),
+    (char *) &_oc_IR_ComponentDescription,
+    0,
+    sizeof (IR::ComponentDescription)
+  );
+
+TAO_NAMESPACE_TYPE (CORBA::TypeCode_ptr)
+TAO_NAMESPACE_BEGIN (IR)
+TAO_NAMESPACE_DEFINE (CORBA::TypeCode_ptr, _tc_ComponentDescription, &_tc_TAO_tc_IR_ComponentDescription)
+TAO_NAMESPACE_END
+
+void IR::ComponentDescription::_tao_any_destructor (void *_tao_void_pointer)
+{
+  ComponentDescription *tmp = ACE_static_cast (ComponentDescription*, _tao_void_pointer);
+  delete tmp;
+}
+
+IR::PrimaryKeyDef_ptr
+tao_IR_PrimaryKeyDef_duplicate (
+    IR::PrimaryKeyDef_ptr p
+  )
+{
+  return IR::PrimaryKeyDef::_duplicate (p);
+}
+
+void
+tao_IR_PrimaryKeyDef_release (
+    IR::PrimaryKeyDef_ptr p
+  )
+{
+  CORBA::release (p);
+}
+
+IR::PrimaryKeyDef_ptr
+tao_IR_PrimaryKeyDef_nil (
+    void
+  )
+{
+  return IR::PrimaryKeyDef::_nil ();
+}
+
+IR::PrimaryKeyDef_ptr
+tao_IR_PrimaryKeyDef_narrow (
+    CORBA::Object *p
+    ACE_ENV_ARG_DECL
+  )
+{
+  return IR::PrimaryKeyDef::_narrow (p ACE_ENV_ARG_PARAMETER);
+}
+
+CORBA::Object *
+tao_IR_PrimaryKeyDef_upcast (
+    void *src
+  )
+{
+  IR::PrimaryKeyDef **tmp =
+    ACE_static_cast (IR::PrimaryKeyDef **, src);
+  return *tmp;
+}
+
+int IR::PrimaryKeyDef::_tao_class_id = 0;
+
+// *************************************************************
+// Operations for class IR::PrimaryKeyDef_var
+// *************************************************************
+
+IR::PrimaryKeyDef_var::PrimaryKeyDef_var (void) // default constructor
+  : ptr_ (PrimaryKeyDef::_nil ())
+{}
+
+::IR::PrimaryKeyDef_ptr
+IR::PrimaryKeyDef_var::ptr (void) const
+{
+  return this->ptr_;
+}
+
+IR::PrimaryKeyDef_var::PrimaryKeyDef_var (const ::IR::PrimaryKeyDef_var &p) // copy constructor
+  : TAO_Base_var (),
+    ptr_ (PrimaryKeyDef::_duplicate (p.ptr ()))
+{}
+
+IR::PrimaryKeyDef_var::~PrimaryKeyDef_var (void) // destructor
+{
+  CORBA::release (this->ptr_);
+}
+
+IR::PrimaryKeyDef_var &
+IR::PrimaryKeyDef_var::operator= (PrimaryKeyDef_ptr p)
+{
+  CORBA::release (this->ptr_);
+  this->ptr_ = p;
+  return *this;
+}
+
+IR::PrimaryKeyDef_var &
+IR::PrimaryKeyDef_var::operator= (const ::IR::PrimaryKeyDef_var &p)
+{
+  if (this != &p)
+  {
+    CORBA::release (this->ptr_);
+    this->ptr_ = ::IR::PrimaryKeyDef::_duplicate (p.ptr ());
+  }
+  return *this;
+}
+
+IR::PrimaryKeyDef_var::operator const ::IR::PrimaryKeyDef_ptr &() const // cast
+{
+  return this->ptr_;
+}
+
+IR::PrimaryKeyDef_var::operator ::IR::PrimaryKeyDef_ptr &() // cast
+{
+  return this->ptr_;
+}
+
+::IR::PrimaryKeyDef_ptr
+IR::PrimaryKeyDef_var::operator-> (void) const
+{
+  return this->ptr_;
+}
+
+::IR::PrimaryKeyDef_ptr
+IR::PrimaryKeyDef_var::in (void) const
+{
+  return this->ptr_;
+}
 
 ::IR::PrimaryKeyDef_ptr &
 IR::PrimaryKeyDef_var::inout (void)
@@ -14105,9 +14392,7 @@
 }
 
 // *************************************************************
-// IR::PrimaryKeyDef_out
-// TAO_IDL - Generated from
-// be/be_interface.cpp:932
+// Operations for class IR::PrimaryKeyDef_out
 // *************************************************************
 
 IR::PrimaryKeyDef_out::PrimaryKeyDef_out (PrimaryKeyDef_ptr &p)
@@ -14173,16 +14458,23 @@
   TAO_ClientRequestInfo_IR_PrimaryKeyDef_is_a (
       TAO_GIOP_Invocation *_tao_invocation,
       CORBA::Object_ptr _tao_target,
-      const char * primary_key_id ACE_ENV_ARG_DECL_WITH_DEFAULTS
-    );
+      const char * primary_key_id
+      ACE_ENV_ARG_DECL_WITH_DEFAULTS);
+
+
+  virtual Dynamic::ParameterList * arguments (
+      ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)
 
-  virtual Dynamic::ParameterList * arguments (ACE_ENV_SINGLE_ARG_DECL)
     ACE_THROW_SPEC ((CORBA::SystemException));
   
-  virtual Dynamic::ExceptionList * exceptions (ACE_ENV_SINGLE_ARG_DECL)
+  virtual Dynamic::ExceptionList * exceptions (
+      ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)
+
     ACE_THROW_SPEC ((CORBA::SystemException));
   
-  virtual CORBA::Any * result (ACE_ENV_SINGLE_ARG_DECL)
+  virtual CORBA::Any * result (
+      ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)
+
     ACE_THROW_SPEC ((CORBA::SystemException));
 
   void result (CORBA::Boolean result);
@@ -14198,7 +14490,8 @@
 TAO_ClientRequestInfo_IR_PrimaryKeyDef_is_a::TAO_ClientRequestInfo_IR_PrimaryKeyDef_is_a (
     TAO_GIOP_Invocation *_tao_invocation,
     CORBA::Object_ptr _tao_target,
-    const char * primary_key_id ACE_ENV_ARG_DECL_NOT_USED    
+    const char * primary_key_id
+    ACE_ENV_ARG_DECL_NOT_USED
   )
   : TAO_ClientRequestInfo_i (_tao_invocation, _tao_target),
     primary_key_id_ (primary_key_id)
@@ -14237,6 +14530,7 @@
   return exception_list;
 }
 
+
 CORBA::Any * 
 TAO_ClientRequestInfo_IR_PrimaryKeyDef_is_a::result (ACE_ENV_SINGLE_ARG_DECL)
   ACE_THROW_SPEC ((CORBA::SystemException))
@@ -14265,30 +14559,38 @@
 public:
   TAO_ClientRequestInfo_IR_PrimaryKeyDef_primary_key_get (
       TAO_GIOP_Invocation *_tao_invocation,
-      CORBA::Object_ptr _tao_target ACE_ENV_ARG_DECL_WITH_DEFAULTS
-    );
+      CORBA::Object_ptr _tao_target
+      ACE_ENV_ARG_DECL_WITH_DEFAULTS);
+
+
+  virtual Dynamic::ParameterList * arguments (
+      ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)
 
-  virtual Dynamic::ParameterList * arguments (ACE_ENV_SINGLE_ARG_DECL)
     ACE_THROW_SPEC ((CORBA::SystemException));
   
-  virtual Dynamic::ExceptionList * exceptions (ACE_ENV_SINGLE_ARG_DECL)
+  virtual Dynamic::ExceptionList * exceptions (
+      ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)
+
     ACE_THROW_SPEC ((CORBA::SystemException));
   
-  virtual CORBA::Any * result (ACE_ENV_SINGLE_ARG_DECL)
+  virtual CORBA::Any * result (
+      ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)
+
     ACE_THROW_SPEC ((CORBA::SystemException));
 
-  void result (CORBA::ValueDef_ptr result);
+  void result (CORBA_ValueDef_ptr result);
 
 private:
   TAO_ClientRequestInfo_IR_PrimaryKeyDef_primary_key_get (const TAO_ClientRequestInfo_IR_PrimaryKeyDef_primary_key_get &);
   void operator= (const TAO_ClientRequestInfo_IR_PrimaryKeyDef_primary_key_get &);
 
-  CORBA::ValueDef_ptr _result;
+  CORBA_ValueDef_ptr _result;
 };
 
 TAO_ClientRequestInfo_IR_PrimaryKeyDef_primary_key_get::TAO_ClientRequestInfo_IR_PrimaryKeyDef_primary_key_get (
     TAO_GIOP_Invocation *_tao_invocation,
-    CORBA::Object_ptr _tao_target ACE_ENV_ARG_DECL_NOT_USED    
+    CORBA::Object_ptr _tao_target
+    ACE_ENV_ARG_DECL_NOT_USED
   )
   : TAO_ClientRequestInfo_i (_tao_invocation, _tao_target)
 {}
@@ -14303,7 +14605,6 @@
   ACE_CHECK_RETURN (0);
   
   return parameter_list;
-
 }
 
 Dynamic::ExceptionList *
@@ -14318,6 +14619,7 @@
   return exception_list;
 }
 
+
 CORBA::Any * 
 TAO_ClientRequestInfo_IR_PrimaryKeyDef_primary_key_get::result (ACE_ENV_SINGLE_ARG_DECL)
   ACE_THROW_SPEC ((CORBA::SystemException))
@@ -14335,7 +14637,7 @@
 }
 
 void 
-TAO_ClientRequestInfo_IR_PrimaryKeyDef_primary_key_get::result (::CORBA::ValueDef_ptr result)
+TAO_ClientRequestInfo_IR_PrimaryKeyDef_primary_key_get::result (CORBA_ValueDef_ptr result)
 {
   // update the result 
   this->_result = result;
@@ -14397,10 +14699,11 @@
       _invoke_status = TAO_INVOKE_EXCEPTION;
       
 #if TAO_HAS_INTERCEPTORS == 1
-      TAO_ClientRequestInfo_IR_PrimaryKeyDef_is_a _tao_ri (
+      TAO_ClientRequestInfo_IR_PrimaryKeyDef_is_a ri (
         &_tao_call,
         _collocated_tao_target_,
-        primary_key_id ACE_ENV_ARG_PARAMETER
+        primary_key_id
+        ACE_ENV_ARG_PARAMETER
       );
             ACE_CHECK_RETURN (_tao_retval);
 
@@ -14408,14 +14711,14 @@
       
       
       CORBA::Short _tao_response_flag = TAO_TWOWAY_RESPONSE_FLAG;
-      TAO_INTERCEPTOR (_tao_ri.response_expected (1));
+      TAO_INTERCEPTOR (ri.response_expected (1));
       
 #if TAO_HAS_INTERCEPTORS == 1
       
       ACE_TRY
         {
           _tao_vfr.send_request (
-            &_tao_ri
+            &ri
             ACE_ENV_ARG_PARAMETER
           );
           ACE_TRY_CHECK;
@@ -14461,9 +14764,9 @@
           else if (_invoke_status == TAO_INVOKE_RESTART)
             {
               TAO_INTERCEPTOR (
-                _tao_ri.reply_status (_invoke_status);
+                ri.reply_status (_invoke_status);
                 _tao_vfr.receive_other (
-                  &_tao_ri
+                  &ri
                   ACE_ENV_ARG_PARAMETER
                 );
                 ACE_TRY_CHECK;
@@ -14486,11 +14789,11 @@
           
 #if TAO_HAS_INTERCEPTORS == 1
           CORBA::Boolean _tao_retval_info = _tao_retval;
-          _tao_ri.result (_tao_retval_info);
+          ri.result (_tao_retval_info);
           
-          _tao_ri.reply_status (_invoke_status);
+          ri.reply_status (_invoke_status);
           _tao_vfr.receive_reply (
-            &_tao_ri
+            &ri
             ACE_ENV_ARG_PARAMETER
           );
           ACE_TRY_CHECK;
@@ -14498,15 +14801,15 @@
       }
     ACE_CATCHANY
       {
-        _tao_ri.exception (&ACE_ANY_EXCEPTION);
+        ri.exception (&ACE_ANY_EXCEPTION);
         _tao_vfr.receive_exception (
-          &_tao_ri
+          &ri
           ACE_ENV_ARG_PARAMETER
         );
         ACE_TRY_CHECK;
         
         PortableInterceptor::ReplyStatus _tao_status =
-          _tao_ri.reply_status (ACE_ENV_SINGLE_ARG_PARAMETER);
+          ri.reply_status (ACE_ENV_SINGLE_ARG_PARAMETER);
         ACE_TRY_CHECK;
         
         if (_tao_status == PortableInterceptor::SYSTEM_EXCEPTION
@@ -14517,7 +14820,7 @@
         ACE_CHECK_RETURN (_tao_retval);
 
     PortableInterceptor::ReplyStatus _tao_status =
-      _tao_ri.reply_status (ACE_ENV_SINGLE_ARG_PARAMETER);
+      ri.reply_status (ACE_ENV_SINGLE_ARG_PARAMETER);
         ACE_CHECK_RETURN (_tao_retval);
 
     if (_tao_status == PortableInterceptor::LOCATION_FORWARD
@@ -14531,7 +14834,7 @@
 return _tao_retval;
 }
 
-::CORBA::ValueDef_ptr IR::_TAO_PrimaryKeyDef_Remote_Proxy_Impl::primary_key (
+CORBA_ValueDef_ptr IR::_TAO_PrimaryKeyDef_Remote_Proxy_Impl::primary_key (
     CORBA_Object *_collocated_tao_target_
     ACE_ENV_ARG_DECL
   )
@@ -14540,13 +14843,13 @@
   ))
 {
   
-  CORBA::ValueDef_var _tao_retval (CORBA::ValueDef::_nil ());
-
+  CORBA_ValueDef_ptr _tao_retval = CORBA_ValueDef::_nil ();
+  CORBA_ValueDef_var _tao_safe_retval (_tao_retval);
 
   
   TAO_Stub *istub = _collocated_tao_target_->_stubobj ();
   if (istub == 0)
-    ACE_THROW_RETURN (CORBA::INTERNAL (),_tao_retval._retn ());
+    ACE_THROW_RETURN (CORBA::INTERNAL (), 0);
 
   
   TAO_GIOP_Twoway_Invocation _tao_call (
@@ -14573,24 +14876,25 @@
       _invoke_status = TAO_INVOKE_EXCEPTION;
       
 #if TAO_HAS_INTERCEPTORS == 1
-      TAO_ClientRequestInfo_IR_PrimaryKeyDef_primary_key_get _tao_ri (
+      TAO_ClientRequestInfo_IR_PrimaryKeyDef_primary_key_get ri (
         &_tao_call,
-        _collocated_tao_target_ ACE_ENV_ARG_PARAMETER
+        _collocated_tao_target_
+        ACE_ENV_ARG_PARAMETER
       );
-            ACE_CHECK_RETURN (_tao_retval._retn ());
+      ACE_CHECK_RETURN (0);
 
 #endif /* TAO_HAS_INTERCEPTORS */
       
       
       CORBA::Short _tao_response_flag = TAO_TWOWAY_RESPONSE_FLAG;
-      TAO_INTERCEPTOR (_tao_ri.response_expected (1));
+      TAO_INTERCEPTOR (ri.response_expected (1));
       
 #if TAO_HAS_INTERCEPTORS == 1
       
       ACE_TRY
         {
           _tao_vfr.send_request (
-            &_tao_ri
+            &ri
             ACE_ENV_ARG_PARAMETER
           );
           ACE_TRY_CHECK;
@@ -14604,17 +14908,17 @@
 #endif /* TAO_HAS_INTERCEPTORS */
           
           _tao_call.start (ACE_ENV_SINGLE_ARG_PARAMETER);
-                    TAO_INTERCEPTOR_CHECK_RETURN (_tao_retval._retn ());
+          TAO_INTERCEPTOR_CHECK_RETURN (0);
 
           _tao_call.prepare_header (
               ACE_static_cast (CORBA::Octet, _tao_response_flag)
               ACE_ENV_ARG_PARAMETER
             );
-                    TAO_INTERCEPTOR_CHECK_RETURN (_tao_retval._retn ());
+          TAO_INTERCEPTOR_CHECK_RETURN (0);
 
           _invoke_status =
             _tao_call.invoke (0, 0 ACE_ENV_ARG_PARAMETER);
-                    TAO_INTERCEPTOR_CHECK_RETURN (_tao_retval._retn ());
+          TAO_INTERCEPTOR_CHECK_RETURN (0);
 
           if (_invoke_status == TAO_INVOKE_EXCEPTION)
             {
@@ -14627,9 +14931,9 @@
           else if (_invoke_status == TAO_INVOKE_RESTART)
             {
               TAO_INTERCEPTOR (
-                _tao_ri.reply_status (_invoke_status);
+                ri.reply_status (_invoke_status);
                 _tao_vfr.receive_other (
-                  &_tao_ri
+                  &ri
                   ACE_ENV_ARG_PARAMETER
                 );
                 ACE_TRY_CHECK;
@@ -14640,7 +14944,7 @@
           
           TAO_InputCDR &_tao_in = _tao_call.inp_stream ();
           if (!(
-                            (_tao_in >> _tao_retval.inout ())
+                            (_tao_in >> _tao_safe_retval.inout ())
               ))
             {
               TAO_INTERCEPTOR_THROW_RETURN (
@@ -14651,13 +14955,13 @@
             }
           
 #if TAO_HAS_INTERCEPTORS == 1
-          ::CORBA::ValueDef_ptr _tao_retval_info = _tao_retval._retn ();
-          _tao_ri.result (_tao_retval_info);
-          _tao_retval = _tao_retval_info;
+          CORBA_ValueDef_ptr _tao_retval_info = _tao_safe_retval._retn ();
+          ri.result (_tao_retval_info);
+          _tao_safe_retval = _tao_retval_info;
           
-          _tao_ri.reply_status (_invoke_status);
+          ri.reply_status (_invoke_status);
           _tao_vfr.receive_reply (
-            &_tao_ri
+            &ri
             ACE_ENV_ARG_PARAMETER
           );
           ACE_TRY_CHECK;
@@ -14665,15 +14969,15 @@
       }
     ACE_CATCHANY
       {
-        _tao_ri.exception (&ACE_ANY_EXCEPTION);
+        ri.exception (&ACE_ANY_EXCEPTION);
         _tao_vfr.receive_exception (
-          &_tao_ri
+          &ri
           ACE_ENV_ARG_PARAMETER
         );
         ACE_TRY_CHECK;
         
         PortableInterceptor::ReplyStatus _tao_status =
-          _tao_ri.reply_status (ACE_ENV_SINGLE_ARG_PARAMETER);
+          ri.reply_status (ACE_ENV_SINGLE_ARG_PARAMETER);
         ACE_TRY_CHECK;
         
         if (_tao_status == PortableInterceptor::SYSTEM_EXCEPTION
@@ -14681,11 +14985,11 @@
           ACE_RE_THROW;
       }
     ACE_ENDTRY;
-        ACE_CHECK_RETURN (_tao_retval._retn ());
+    ACE_CHECK_RETURN (0);
 
     PortableInterceptor::ReplyStatus _tao_status =
-      _tao_ri.reply_status (ACE_ENV_SINGLE_ARG_PARAMETER);
-        ACE_CHECK_RETURN (_tao_retval._retn ());
+      ri.reply_status (ACE_ENV_SINGLE_ARG_PARAMETER);
+    ACE_CHECK_RETURN (0);
 
     if (_tao_status == PortableInterceptor::LOCATION_FORWARD
         || _tao_status == PortableInterceptor::TRANSPORT_RETRY)
@@ -14695,7 +14999,7 @@
     
     break;
   }
-return _tao_retval._retn ();
+return _tao_safe_retval._retn ();
 }
 
 
@@ -14751,14 +15055,13 @@
 ///////////////////////////////////////////////////////////////////////
 
 
-// TAO_IDL - Generated from 
-// be/be_visitor_interface/interface_cs.cpp:198
-
+// default constructor
 IR::PrimaryKeyDef::PrimaryKeyDef (int collocated)
 {
   this->IR_PrimaryKeyDef_setup_collocation (collocated);
 }
 
+// destructor
 IR::PrimaryKeyDef::~PrimaryKeyDef (void)
 {}
 
@@ -14798,8 +15101,7 @@
   return PrimaryKeyDef::_unchecked_narrow (obj ACE_ENV_ARG_PARAMETER);
 }
 
-IR::PrimaryKeyDef_ptr 
-IR::PrimaryKeyDef::_unchecked_narrow (
+IR::PrimaryKeyDef_ptr IR::PrimaryKeyDef::_unchecked_narrow (
     CORBA::Object_ptr obj
     ACE_ENV_ARG_DECL_NOT_USED
   )
@@ -14816,8 +15118,7 @@
       if (
           !CORBA::is_nil (stub->servant_orb_var ().ptr ()) &&
           stub->servant_orb_var ()->orb_core ()->optimize_collocation_objects () &&
-          obj->_is_collocated () &&
-          IR__TAO_PrimaryKeyDef_Proxy_Broker_Factory_function_pointer != 0
+          obj->_is_collocated () &&IR__TAO_PrimaryKeyDef_Proxy_Broker_Factory_function_pointer != 0
         )
         {
           ACE_NEW_RETURN (
@@ -14825,25 +15126,12 @@
               ::IR::PrimaryKeyDef (
                   stub,
                   1,
-                  obj->_servant ()
-                ),
-              PrimaryKeyDef::_nil ()
-            );
-        }
+            obj->_servant ()),
       
-      if (CORBA::is_nil (default_proxy))
-        {
-          ACE_NEW_RETURN (
-              default_proxy,
-              ::IR::PrimaryKeyDef (
-                  stub,
-                  0,
-                  obj->_servant ()
-                ),
-              PrimaryKeyDef::_nil ()
-            );
+          PrimaryKeyDef::_nil ());
         }
-      
+      if (CORBA::is_nil (default_proxy))
+        ACE_NEW_RETURN (default_proxy, ::IR::PrimaryKeyDef (stub, 0, obj->_servant ()), PrimaryKeyDef::_nil ());
       return default_proxy;
     }
   else 
@@ -14891,25 +15179,25 @@
     retv = ACE_reinterpret_cast (void*, this);
   else if (type == ACE_reinterpret_cast
     (ptr_arith_t,
-      &::CORBA::Contained::_tao_class_id))
+      &CORBA_Contained::_tao_class_id))
     retv = ACE_reinterpret_cast
       (
         void *,
         ACE_static_cast
           (
-            CORBA::Contained_ptr,
+            CORBA_Contained_ptr,
             this
           )
       );
   else if (type == ACE_reinterpret_cast
     (ptr_arith_t,
-      &::CORBA::IRObject::_tao_class_id))
+      &CORBA_IRObject::_tao_class_id))
     retv = ACE_reinterpret_cast
       (
         void *,
         ACE_static_cast
           (
-            CORBA::IRObject_ptr,
+            CORBA_IRObject_ptr,
             this
           )
       );
@@ -14941,12 +15229,12 @@
   
   return proxy.is_a (
       this,
-      primary_key_id ACE_ENV_ARG_PARAMETER
+      primary_key_id
+      ACE_ENV_ARG_PARAMETER
     );
 }
 
-::CORBA::ValueDef_ptr IR::PrimaryKeyDef::primary_key (
-    
+CORBA_ValueDef_ptr IR::PrimaryKeyDef::primary_key (
     ACE_ENV_SINGLE_ARG_DECL
   )
   ACE_THROW_SPEC ((
@@ -14958,7 +15246,8 @@
   ACE_CHECK_RETURN (0);
   
   return proxy.primary_key (
-      this ACE_ENV_ARG_PARAMETER
+      this
+      ACE_ENV_ARG_PARAMETER
     );
 }
 
@@ -14992,7 +15281,7 @@
 
 TAO_NAMESPACE_TYPE (CORBA::TypeCode_ptr)
 TAO_NAMESPACE_BEGIN (IR)
-TAO_NAMESPACE_DEFINE (::CORBA::TypeCode_ptr, _tc_PrimaryKeyDef, &_tc_TAO_tc_IR_PrimaryKeyDef)
+TAO_NAMESPACE_DEFINE (CORBA::TypeCode_ptr, _tc_PrimaryKeyDef, &_tc_TAO_tc_IR_PrimaryKeyDef)
 TAO_NAMESPACE_END
 
 static const CORBA::Long _oc_IR_PrimaryKeyDescription[] =
@@ -15066,8 +15355,26 @@
   ACE_NTOHL (0x64656669), 
   ACE_NTOHL (0x6e65645f), 
   ACE_NTOHL (0x696e0000),  // name = defined_in
-  0xffffffff, // indirection
-  0xffffffa0, // negative offset (-96)
+  CORBA::tk_alias, // typecode kind for typedefs
+  68, // encapsulation length
+    TAO_ENCAP_BYTE_ORDER, // byte order
+    32,
+    ACE_NTOHL (0x49444c3a),
+    ACE_NTOHL (0x6f6d672e),
+    ACE_NTOHL (0x6f72672f),
+    ACE_NTOHL (0x49522f52),
+    ACE_NTOHL (0x65706f73),
+    ACE_NTOHL (0x69746f72),
+    ACE_NTOHL (0x7949643a),
+    ACE_NTOHL (0x312e3000),  // repository ID = IDL:omg.org/IR/RepositoryId:1.0
+    13,
+    ACE_NTOHL (0x5265706f),
+    ACE_NTOHL (0x7369746f),
+    ACE_NTOHL (0x72794964),
+    ACE_NTOHL (0x0),  // name = RepositoryId
+    CORBA::tk_string,
+    0U, // string length
+
   8,
   ACE_NTOHL (0x76657273), 
   ACE_NTOHL (0x696f6e00),  // name = version
@@ -15123,7 +15430,7 @@
 
 TAO_NAMESPACE_TYPE (CORBA::TypeCode_ptr)
 TAO_NAMESPACE_BEGIN (IR)
-TAO_NAMESPACE_DEFINE (::CORBA::TypeCode_ptr, _tc_PrimaryKeyDescription, &_tc_TAO_tc_IR_PrimaryKeyDescription)
+TAO_NAMESPACE_DEFINE (CORBA::TypeCode_ptr, _tc_PrimaryKeyDescription, &_tc_TAO_tc_IR_PrimaryKeyDescription)
 TAO_NAMESPACE_END
 
 void IR::PrimaryKeyDescription::_tao_any_destructor (void *_tao_void_pointer)
@@ -15132,12 +15439,6 @@
   delete tmp;
 }
 
-
-// TAO_IDL - Generated from 
-// be/be_visitor_interface/interface_cs.cpp:67
-
-int IR::FactoryDef::_tao_class_id = 0;
-
 IR::FactoryDef_ptr
 tao_IR_FactoryDef_duplicate (
     IR::FactoryDef_ptr p
@@ -15181,10 +15482,10 @@
   return *tmp;
 }
 
+int IR::FactoryDef::_tao_class_id = 0;
+
 // *************************************************************
-// IR::FactoryDef_var
-// TAO_IDL - Generated from
-// be/be_interface.cpp:654
+// Operations for class IR::FactoryDef_var
 // *************************************************************
 
 IR::FactoryDef_var::FactoryDef_var (void) // default constructor
@@ -15307,9 +15608,7 @@
 }
 
 // *************************************************************
-// IR::FactoryDef_out
-// TAO_IDL - Generated from
-// be/be_interface.cpp:932
+// Operations for class IR::FactoryDef_out
 // *************************************************************
 
 IR::FactoryDef_out::FactoryDef_out (FactoryDef_ptr &p)
@@ -15436,14 +15735,13 @@
 ///////////////////////////////////////////////////////////////////////
 
 
-// TAO_IDL - Generated from 
-// be/be_visitor_interface/interface_cs.cpp:198
-
+// default constructor
 IR::FactoryDef::FactoryDef (int collocated)
 {
   this->IR_FactoryDef_setup_collocation (collocated);
 }
 
+// destructor
 IR::FactoryDef::~FactoryDef (void)
 {}
 
@@ -15483,8 +15781,7 @@
   return FactoryDef::_unchecked_narrow (obj ACE_ENV_ARG_PARAMETER);
 }
 
-IR::FactoryDef_ptr 
-IR::FactoryDef::_unchecked_narrow (
+IR::FactoryDef_ptr IR::FactoryDef::_unchecked_narrow (
     CORBA::Object_ptr obj
     ACE_ENV_ARG_DECL_NOT_USED
   )
@@ -15501,8 +15798,7 @@
       if (
           !CORBA::is_nil (stub->servant_orb_var ().ptr ()) &&
           stub->servant_orb_var ()->orb_core ()->optimize_collocation_objects () &&
-          obj->_is_collocated () &&
-          IR__TAO_FactoryDef_Proxy_Broker_Factory_function_pointer != 0
+          obj->_is_collocated () &&IR__TAO_FactoryDef_Proxy_Broker_Factory_function_pointer != 0
         )
         {
           ACE_NEW_RETURN (
@@ -15510,25 +15806,12 @@
               ::IR::FactoryDef (
                   stub,
                   1,
-                  obj->_servant ()
-                ),
-              FactoryDef::_nil ()
-            );
-        }
+            obj->_servant ()),
       
-      if (CORBA::is_nil (default_proxy))
-        {
-          ACE_NEW_RETURN (
-              default_proxy,
-              ::IR::FactoryDef (
-                  stub,
-                  0,
-                  obj->_servant ()
-                ),
-              FactoryDef::_nil ()
-            );
+          FactoryDef::_nil ());
         }
-      
+      if (CORBA::is_nil (default_proxy))
+        ACE_NEW_RETURN (default_proxy, ::IR::FactoryDef (stub, 0, obj->_servant ()), FactoryDef::_nil ());
       return default_proxy;
     }
   else 
@@ -15577,37 +15860,37 @@
     retv = ACE_reinterpret_cast (void*, this);
   else if (type == ACE_reinterpret_cast
     (ptr_arith_t,
-      &::CORBA::OperationDef::_tao_class_id))
+      &CORBA_OperationDef::_tao_class_id))
     retv = ACE_reinterpret_cast
       (
         void *,
         ACE_static_cast
           (
-            CORBA::OperationDef_ptr,
+            CORBA_OperationDef_ptr,
             this
           )
       );
   else if (type == ACE_reinterpret_cast
     (ptr_arith_t,
-      &::CORBA::Contained::_tao_class_id))
+      &CORBA_Contained::_tao_class_id))
     retv = ACE_reinterpret_cast
       (
         void *,
         ACE_static_cast
           (
-            CORBA::Contained_ptr,
+            CORBA_Contained_ptr,
             this
           )
       );
   else if (type == ACE_reinterpret_cast
     (ptr_arith_t,
-      &::CORBA::IRObject::_tao_class_id))
+      &CORBA_IRObject::_tao_class_id))
     retv = ACE_reinterpret_cast
       (
         void *,
         ACE_static_cast
           (
-            CORBA::IRObject_ptr,
+            CORBA_IRObject_ptr,
             this
           )
       );
@@ -15653,15 +15936,9 @@
 
 TAO_NAMESPACE_TYPE (CORBA::TypeCode_ptr)
 TAO_NAMESPACE_BEGIN (IR)
-TAO_NAMESPACE_DEFINE (::CORBA::TypeCode_ptr, _tc_FactoryDef, &_tc_TAO_tc_IR_FactoryDef)
+TAO_NAMESPACE_DEFINE (CORBA::TypeCode_ptr, _tc_FactoryDef, &_tc_TAO_tc_IR_FactoryDef)
 TAO_NAMESPACE_END
 
-
-// TAO_IDL - Generated from 
-// be/be_visitor_interface/interface_cs.cpp:67
-
-int IR::FinderDef::_tao_class_id = 0;
-
 IR::FinderDef_ptr
 tao_IR_FinderDef_duplicate (
     IR::FinderDef_ptr p
@@ -15705,10 +15982,10 @@
   return *tmp;
 }
 
+int IR::FinderDef::_tao_class_id = 0;
+
 // *************************************************************
-// IR::FinderDef_var
-// TAO_IDL - Generated from
-// be/be_interface.cpp:654
+// Operations for class IR::FinderDef_var
 // *************************************************************
 
 IR::FinderDef_var::FinderDef_var (void) // default constructor
@@ -15831,9 +16108,7 @@
 }
 
 // *************************************************************
-// IR::FinderDef_out
-// TAO_IDL - Generated from
-// be/be_interface.cpp:932
+// Operations for class IR::FinderDef_out
 // *************************************************************
 
 IR::FinderDef_out::FinderDef_out (FinderDef_ptr &p)
@@ -15960,14 +16235,13 @@
 ///////////////////////////////////////////////////////////////////////
 
 
-// TAO_IDL - Generated from 
-// be/be_visitor_interface/interface_cs.cpp:198
-
+// default constructor
 IR::FinderDef::FinderDef (int collocated)
 {
   this->IR_FinderDef_setup_collocation (collocated);
 }
 
+// destructor
 IR::FinderDef::~FinderDef (void)
 {}
 
@@ -16007,8 +16281,7 @@
   return FinderDef::_unchecked_narrow (obj ACE_ENV_ARG_PARAMETER);
 }
 
-IR::FinderDef_ptr 
-IR::FinderDef::_unchecked_narrow (
+IR::FinderDef_ptr IR::FinderDef::_unchecked_narrow (
     CORBA::Object_ptr obj
     ACE_ENV_ARG_DECL_NOT_USED
   )
@@ -16025,8 +16298,7 @@
       if (
           !CORBA::is_nil (stub->servant_orb_var ().ptr ()) &&
           stub->servant_orb_var ()->orb_core ()->optimize_collocation_objects () &&
-          obj->_is_collocated () &&
-          IR__TAO_FinderDef_Proxy_Broker_Factory_function_pointer != 0
+          obj->_is_collocated () &&IR__TAO_FinderDef_Proxy_Broker_Factory_function_pointer != 0
         )
         {
           ACE_NEW_RETURN (
@@ -16034,25 +16306,12 @@
               ::IR::FinderDef (
                   stub,
                   1,
-                  obj->_servant ()
-                ),
-              FinderDef::_nil ()
-            );
-        }
+            obj->_servant ()),
       
-      if (CORBA::is_nil (default_proxy))
-        {
-          ACE_NEW_RETURN (
-              default_proxy,
-              ::IR::FinderDef (
-                  stub,
-                  0,
-                  obj->_servant ()
-                ),
-              FinderDef::_nil ()
-            );
+          FinderDef::_nil ());
         }
-      
+      if (CORBA::is_nil (default_proxy))
+        ACE_NEW_RETURN (default_proxy, ::IR::FinderDef (stub, 0, obj->_servant ()), FinderDef::_nil ());
       return default_proxy;
     }
   else 
@@ -16101,37 +16360,37 @@
     retv = ACE_reinterpret_cast (void*, this);
   else if (type == ACE_reinterpret_cast
     (ptr_arith_t,
-      &::CORBA::OperationDef::_tao_class_id))
+      &CORBA_OperationDef::_tao_class_id))
     retv = ACE_reinterpret_cast
       (
         void *,
         ACE_static_cast
           (
-            CORBA::OperationDef_ptr,
+            CORBA_OperationDef_ptr,
             this
           )
       );
   else if (type == ACE_reinterpret_cast
     (ptr_arith_t,
-      &::CORBA::Contained::_tao_class_id))
+      &CORBA_Contained::_tao_class_id))
     retv = ACE_reinterpret_cast
       (
         void *,
         ACE_static_cast
           (
-            CORBA::Contained_ptr,
+            CORBA_Contained_ptr,
             this
           )
       );
   else if (type == ACE_reinterpret_cast
     (ptr_arith_t,
-      &::CORBA::IRObject::_tao_class_id))
+      &CORBA_IRObject::_tao_class_id))
     retv = ACE_reinterpret_cast
       (
         void *,
         ACE_static_cast
           (
-            CORBA::IRObject_ptr,
+            CORBA_IRObject_ptr,
             this
           )
       );
@@ -16177,15 +16436,9 @@
 
 TAO_NAMESPACE_TYPE (CORBA::TypeCode_ptr)
 TAO_NAMESPACE_BEGIN (IR)
-TAO_NAMESPACE_DEFINE (::CORBA::TypeCode_ptr, _tc_FinderDef, &_tc_TAO_tc_IR_FinderDef)
+TAO_NAMESPACE_DEFINE (CORBA::TypeCode_ptr, _tc_FinderDef, &_tc_TAO_tc_IR_FinderDef)
 TAO_NAMESPACE_END
 
-
-// TAO_IDL - Generated from 
-// be/be_visitor_interface/interface_cs.cpp:67
-
-int IR::HomeDef::_tao_class_id = 0;
-
 IR::HomeDef_ptr
 tao_IR_HomeDef_duplicate (
     IR::HomeDef_ptr p
@@ -16229,10 +16482,10 @@
   return *tmp;
 }
 
+int IR::HomeDef::_tao_class_id = 0;
+
 // *************************************************************
-// IR::HomeDef_var
-// TAO_IDL - Generated from
-// be/be_interface.cpp:654
+// Operations for class IR::HomeDef_var
 // *************************************************************
 
 IR::HomeDef_var::HomeDef_var (void) // default constructor
@@ -16355,9 +16608,7 @@
 }
 
 // *************************************************************
-// IR::HomeDef_out
-// TAO_IDL - Generated from
-// be/be_interface.cpp:932
+// Operations for class IR::HomeDef_out
 // *************************************************************
 
 IR::HomeDef_out::HomeDef_out (HomeDef_ptr &p)
@@ -16422,16 +16673,23 @@
 public:
   TAO_ClientRequestInfo_IR_HomeDef_base_home_get (
       TAO_GIOP_Invocation *_tao_invocation,
-      CORBA::Object_ptr _tao_target ACE_ENV_ARG_DECL_WITH_DEFAULTS
-    );
+      CORBA::Object_ptr _tao_target
+      ACE_ENV_ARG_DECL_WITH_DEFAULTS);
+
+
+  virtual Dynamic::ParameterList * arguments (
+      ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)
 
-  virtual Dynamic::ParameterList * arguments (ACE_ENV_SINGLE_ARG_DECL)
     ACE_THROW_SPEC ((CORBA::SystemException));
   
-  virtual Dynamic::ExceptionList * exceptions (ACE_ENV_SINGLE_ARG_DECL)
+  virtual Dynamic::ExceptionList * exceptions (
+      ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)
+
     ACE_THROW_SPEC ((CORBA::SystemException));
   
-  virtual CORBA::Any * result (ACE_ENV_SINGLE_ARG_DECL)
+  virtual CORBA::Any * result (
+      ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)
+
     ACE_THROW_SPEC ((CORBA::SystemException));
 
   void result (IR::HomeDef_ptr result);
@@ -16445,7 +16703,8 @@
 
 TAO_ClientRequestInfo_IR_HomeDef_base_home_get::TAO_ClientRequestInfo_IR_HomeDef_base_home_get (
     TAO_GIOP_Invocation *_tao_invocation,
-    CORBA::Object_ptr _tao_target ACE_ENV_ARG_DECL_NOT_USED    
+    CORBA::Object_ptr _tao_target
+    ACE_ENV_ARG_DECL_NOT_USED
   )
   : TAO_ClientRequestInfo_i (_tao_invocation, _tao_target)
 {}
@@ -16460,7 +16719,6 @@
   ACE_CHECK_RETURN (0);
   
   return parameter_list;
-
 }
 
 Dynamic::ExceptionList *
@@ -16475,6 +16733,7 @@
   return exception_list;
 }
 
+
 CORBA::Any * 
 TAO_ClientRequestInfo_IR_HomeDef_base_home_get::result (ACE_ENV_SINGLE_ARG_DECL)
   ACE_THROW_SPEC ((CORBA::SystemException))
@@ -16492,7 +16751,7 @@
 }
 
 void 
-TAO_ClientRequestInfo_IR_HomeDef_base_home_get::result (::IR::HomeDef_ptr result)
+TAO_ClientRequestInfo_IR_HomeDef_base_home_get::result (IR::HomeDef_ptr result)
 {
   // update the result 
   this->_result = result;
@@ -16503,16 +16762,23 @@
 public:
   TAO_ClientRequestInfo_IR_HomeDef_managed_component_get (
       TAO_GIOP_Invocation *_tao_invocation,
-      CORBA::Object_ptr _tao_target ACE_ENV_ARG_DECL_WITH_DEFAULTS
-    );
+      CORBA::Object_ptr _tao_target
+      ACE_ENV_ARG_DECL_WITH_DEFAULTS);
+
+
+  virtual Dynamic::ParameterList * arguments (
+      ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)
 
-  virtual Dynamic::ParameterList * arguments (ACE_ENV_SINGLE_ARG_DECL)
     ACE_THROW_SPEC ((CORBA::SystemException));
   
-  virtual Dynamic::ExceptionList * exceptions (ACE_ENV_SINGLE_ARG_DECL)
+  virtual Dynamic::ExceptionList * exceptions (
+      ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)
+
     ACE_THROW_SPEC ((CORBA::SystemException));
   
-  virtual CORBA::Any * result (ACE_ENV_SINGLE_ARG_DECL)
+  virtual CORBA::Any * result (
+      ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)
+
     ACE_THROW_SPEC ((CORBA::SystemException));
 
   void result (IR::ComponentDef_ptr result);
@@ -16526,7 +16792,8 @@
 
 TAO_ClientRequestInfo_IR_HomeDef_managed_component_get::TAO_ClientRequestInfo_IR_HomeDef_managed_component_get (
     TAO_GIOP_Invocation *_tao_invocation,
-    CORBA::Object_ptr _tao_target ACE_ENV_ARG_DECL_NOT_USED    
+    CORBA::Object_ptr _tao_target
+    ACE_ENV_ARG_DECL_NOT_USED
   )
   : TAO_ClientRequestInfo_i (_tao_invocation, _tao_target)
 {}
@@ -16541,7 +16808,6 @@
   ACE_CHECK_RETURN (0);
   
   return parameter_list;
-
 }
 
 Dynamic::ExceptionList *
@@ -16556,6 +16822,7 @@
   return exception_list;
 }
 
+
 CORBA::Any * 
 TAO_ClientRequestInfo_IR_HomeDef_managed_component_get::result (ACE_ENV_SINGLE_ARG_DECL)
   ACE_THROW_SPEC ((CORBA::SystemException))
@@ -16573,7 +16840,7 @@
 }
 
 void 
-TAO_ClientRequestInfo_IR_HomeDef_managed_component_get::result (::IR::ComponentDef_ptr result)
+TAO_ClientRequestInfo_IR_HomeDef_managed_component_get::result (IR::ComponentDef_ptr result)
 {
   // update the result 
   this->_result = result;
@@ -16584,16 +16851,23 @@
 public:
   TAO_ClientRequestInfo_IR_HomeDef_primary_key_get (
       TAO_GIOP_Invocation *_tao_invocation,
-      CORBA::Object_ptr _tao_target ACE_ENV_ARG_DECL_WITH_DEFAULTS
-    );
+      CORBA::Object_ptr _tao_target
+      ACE_ENV_ARG_DECL_WITH_DEFAULTS);
+
+
+  virtual Dynamic::ParameterList * arguments (
+      ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)
 
-  virtual Dynamic::ParameterList * arguments (ACE_ENV_SINGLE_ARG_DECL)
     ACE_THROW_SPEC ((CORBA::SystemException));
   
-  virtual Dynamic::ExceptionList * exceptions (ACE_ENV_SINGLE_ARG_DECL)
+  virtual Dynamic::ExceptionList * exceptions (
+      ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)
+
     ACE_THROW_SPEC ((CORBA::SystemException));
   
-  virtual CORBA::Any * result (ACE_ENV_SINGLE_ARG_DECL)
+  virtual CORBA::Any * result (
+      ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)
+
     ACE_THROW_SPEC ((CORBA::SystemException));
 
   void result (IR::PrimaryKeyDef_ptr result);
@@ -16607,7 +16881,8 @@
 
 TAO_ClientRequestInfo_IR_HomeDef_primary_key_get::TAO_ClientRequestInfo_IR_HomeDef_primary_key_get (
     TAO_GIOP_Invocation *_tao_invocation,
-    CORBA::Object_ptr _tao_target ACE_ENV_ARG_DECL_NOT_USED    
+    CORBA::Object_ptr _tao_target
+    ACE_ENV_ARG_DECL_NOT_USED
   )
   : TAO_ClientRequestInfo_i (_tao_invocation, _tao_target)
 {}
@@ -16622,7 +16897,6 @@
   ACE_CHECK_RETURN (0);
   
   return parameter_list;
-
 }
 
 Dynamic::ExceptionList *
@@ -16637,6 +16911,7 @@
   return exception_list;
 }
 
+
 CORBA::Any * 
 TAO_ClientRequestInfo_IR_HomeDef_primary_key_get::result (ACE_ENV_SINGLE_ARG_DECL)
   ACE_THROW_SPEC ((CORBA::SystemException))
@@ -16654,7 +16929,7 @@
 }
 
 void 
-TAO_ClientRequestInfo_IR_HomeDef_primary_key_get::result (::IR::PrimaryKeyDef_ptr result)
+TAO_ClientRequestInfo_IR_HomeDef_primary_key_get::result (IR::PrimaryKeyDef_ptr result)
 {
   // update the result 
   this->_result = result;
@@ -16665,16 +16940,23 @@
 public:
   TAO_ClientRequestInfo_IR_HomeDef_factories_get (
       TAO_GIOP_Invocation *_tao_invocation,
-      CORBA::Object_ptr _tao_target ACE_ENV_ARG_DECL_WITH_DEFAULTS
-    );
+      CORBA::Object_ptr _tao_target
+      ACE_ENV_ARG_DECL_WITH_DEFAULTS);
+
+
+  virtual Dynamic::ParameterList * arguments (
+      ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)
 
-  virtual Dynamic::ParameterList * arguments (ACE_ENV_SINGLE_ARG_DECL)
     ACE_THROW_SPEC ((CORBA::SystemException));
   
-  virtual Dynamic::ExceptionList * exceptions (ACE_ENV_SINGLE_ARG_DECL)
+  virtual Dynamic::ExceptionList * exceptions (
+      ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)
+
     ACE_THROW_SPEC ((CORBA::SystemException));
   
-  virtual CORBA::Any * result (ACE_ENV_SINGLE_ARG_DECL)
+  virtual CORBA::Any * result (
+      ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)
+
     ACE_THROW_SPEC ((CORBA::SystemException));
 
   void result (IR::FactoryDefSeq * result);
@@ -16688,7 +16970,8 @@
 
 TAO_ClientRequestInfo_IR_HomeDef_factories_get::TAO_ClientRequestInfo_IR_HomeDef_factories_get (
     TAO_GIOP_Invocation *_tao_invocation,
-    CORBA::Object_ptr _tao_target ACE_ENV_ARG_DECL_NOT_USED    
+    CORBA::Object_ptr _tao_target
+    ACE_ENV_ARG_DECL_NOT_USED
   )
   : TAO_ClientRequestInfo_i (_tao_invocation, _tao_target)
 {}
@@ -16703,7 +16986,6 @@
   ACE_CHECK_RETURN (0);
   
   return parameter_list;
-
 }
 
 Dynamic::ExceptionList *
@@ -16718,6 +17000,7 @@
   return exception_list;
 }
 
+
 CORBA::Any * 
 TAO_ClientRequestInfo_IR_HomeDef_factories_get::result (ACE_ENV_SINGLE_ARG_DECL)
   ACE_THROW_SPEC ((CORBA::SystemException))
@@ -16735,7 +17018,7 @@
 }
 
 void 
-TAO_ClientRequestInfo_IR_HomeDef_factories_get::result (::IR::FactoryDefSeq * result)
+TAO_ClientRequestInfo_IR_HomeDef_factories_get::result (IR::FactoryDefSeq * result)
 {
   // update the result 
   this->_result = result;
@@ -16746,16 +17029,23 @@
 public:
   TAO_ClientRequestInfo_IR_HomeDef_finders_get (
       TAO_GIOP_Invocation *_tao_invocation,
-      CORBA::Object_ptr _tao_target ACE_ENV_ARG_DECL_WITH_DEFAULTS
-    );
+      CORBA::Object_ptr _tao_target
+      ACE_ENV_ARG_DECL_WITH_DEFAULTS);
+
+
+  virtual Dynamic::ParameterList * arguments (
+      ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)
 
-  virtual Dynamic::ParameterList * arguments (ACE_ENV_SINGLE_ARG_DECL)
     ACE_THROW_SPEC ((CORBA::SystemException));
   
-  virtual Dynamic::ExceptionList * exceptions (ACE_ENV_SINGLE_ARG_DECL)
+  virtual Dynamic::ExceptionList * exceptions (
+      ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)
+
     ACE_THROW_SPEC ((CORBA::SystemException));
   
-  virtual CORBA::Any * result (ACE_ENV_SINGLE_ARG_DECL)
+  virtual CORBA::Any * result (
+      ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)
+
     ACE_THROW_SPEC ((CORBA::SystemException));
 
   void result (IR::FinderDefSeq * result);
@@ -16769,7 +17059,8 @@
 
 TAO_ClientRequestInfo_IR_HomeDef_finders_get::TAO_ClientRequestInfo_IR_HomeDef_finders_get (
     TAO_GIOP_Invocation *_tao_invocation,
-    CORBA::Object_ptr _tao_target ACE_ENV_ARG_DECL_NOT_USED    
+    CORBA::Object_ptr _tao_target
+    ACE_ENV_ARG_DECL_NOT_USED
   )
   : TAO_ClientRequestInfo_i (_tao_invocation, _tao_target)
 {}
@@ -16784,7 +17075,6 @@
   ACE_CHECK_RETURN (0);
   
   return parameter_list;
-
 }
 
 Dynamic::ExceptionList *
@@ -16799,6 +17089,7 @@
   return exception_list;
 }
 
+
 CORBA::Any * 
 TAO_ClientRequestInfo_IR_HomeDef_finders_get::result (ACE_ENV_SINGLE_ARG_DECL)
   ACE_THROW_SPEC ((CORBA::SystemException))
@@ -16816,7 +17107,7 @@
 }
 
 void 
-TAO_ClientRequestInfo_IR_HomeDef_finders_get::result (::IR::FinderDefSeq * result)
+TAO_ClientRequestInfo_IR_HomeDef_finders_get::result (IR::FinderDefSeq * result)
 {
   // update the result 
   this->_result = result;
@@ -16827,16 +17118,23 @@
 public:
   TAO_ClientRequestInfo_IR_HomeDef_is_basic_get (
       TAO_GIOP_Invocation *_tao_invocation,
-      CORBA::Object_ptr _tao_target ACE_ENV_ARG_DECL_WITH_DEFAULTS
-    );
+      CORBA::Object_ptr _tao_target
+      ACE_ENV_ARG_DECL_WITH_DEFAULTS);
+
+
+  virtual Dynamic::ParameterList * arguments (
+      ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)
 
-  virtual Dynamic::ParameterList * arguments (ACE_ENV_SINGLE_ARG_DECL)
     ACE_THROW_SPEC ((CORBA::SystemException));
   
-  virtual Dynamic::ExceptionList * exceptions (ACE_ENV_SINGLE_ARG_DECL)
+  virtual Dynamic::ExceptionList * exceptions (
+      ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)
+
     ACE_THROW_SPEC ((CORBA::SystemException));
   
-  virtual CORBA::Any * result (ACE_ENV_SINGLE_ARG_DECL)
+  virtual CORBA::Any * result (
+      ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)
+
     ACE_THROW_SPEC ((CORBA::SystemException));
 
   void result (CORBA::Boolean result);
@@ -16850,7 +17148,8 @@
 
 TAO_ClientRequestInfo_IR_HomeDef_is_basic_get::TAO_ClientRequestInfo_IR_HomeDef_is_basic_get (
     TAO_GIOP_Invocation *_tao_invocation,
-    CORBA::Object_ptr _tao_target ACE_ENV_ARG_DECL_NOT_USED    
+    CORBA::Object_ptr _tao_target
+    ACE_ENV_ARG_DECL_NOT_USED
   )
   : TAO_ClientRequestInfo_i (_tao_invocation, _tao_target)
 {}
@@ -16865,7 +17164,6 @@
   ACE_CHECK_RETURN (0);
   
   return parameter_list;
-
 }
 
 Dynamic::ExceptionList *
@@ -16880,6 +17178,7 @@
   return exception_list;
 }
 
+
 CORBA::Any * 
 TAO_ClientRequestInfo_IR_HomeDef_is_basic_get::result (ACE_ENV_SINGLE_ARG_DECL)
   ACE_THROW_SPEC ((CORBA::SystemException))
@@ -16912,16 +17211,23 @@
       const char * id,
       const char * name,
       const char * version,
-      CORBA::ValueDef_ptr primary_key ACE_ENV_ARG_DECL_WITH_DEFAULTS
-    );
+      CORBA_ValueDef_ptr primary_key
+      ACE_ENV_ARG_DECL_WITH_DEFAULTS);
+
+
+  virtual Dynamic::ParameterList * arguments (
+      ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)
 
-  virtual Dynamic::ParameterList * arguments (ACE_ENV_SINGLE_ARG_DECL)
     ACE_THROW_SPEC ((CORBA::SystemException));
   
-  virtual Dynamic::ExceptionList * exceptions (ACE_ENV_SINGLE_ARG_DECL)
+  virtual Dynamic::ExceptionList * exceptions (
+      ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)
+
     ACE_THROW_SPEC ((CORBA::SystemException));
   
-  virtual CORBA::Any * result (ACE_ENV_SINGLE_ARG_DECL)
+  virtual CORBA::Any * result (
+      ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)
+
     ACE_THROW_SPEC ((CORBA::SystemException));
 
   void result (IR::PrimaryKeyDef_ptr result);
@@ -16933,7 +17239,7 @@
   const char * id_;
   const char * name_;
   const char * version_;
-  CORBA::ValueDef_ptr primary_key_;
+  CORBA_ValueDef_ptr primary_key_;
   IR::PrimaryKeyDef_ptr _result;
 };
 
@@ -16943,7 +17249,8 @@
     const char * id,
     const char * name,
     const char * version,
-    CORBA::ValueDef_ptr primary_key ACE_ENV_ARG_DECL_NOT_USED    
+    CORBA_ValueDef_ptr primary_key
+    ACE_ENV_ARG_DECL_NOT_USED
   )
   : TAO_ClientRequestInfo_i (_tao_invocation, _tao_target),
     id_ (id),
@@ -16994,6 +17301,7 @@
   return exception_list;
 }
 
+
 CORBA::Any * 
 TAO_ClientRequestInfo_IR_HomeDef_create_primary_key::result (ACE_ENV_SINGLE_ARG_DECL)
   ACE_THROW_SPEC ((CORBA::SystemException))
@@ -17011,7 +17319,7 @@
 }
 
 void 
-TAO_ClientRequestInfo_IR_HomeDef_create_primary_key::result (::IR::PrimaryKeyDef_ptr result)
+TAO_ClientRequestInfo_IR_HomeDef_create_primary_key::result (IR::PrimaryKeyDef_ptr result)
 {
   // update the result 
   this->_result = result;
@@ -17026,17 +17334,24 @@
       const char * id,
       const char * name,
       const char * version,
-      const CORBA::ParDescriptionSeq & params,
-      const CORBA::ExceptionDefSeq & exceptions ACE_ENV_ARG_DECL_WITH_DEFAULTS
-    );
+      const CORBA_ParDescriptionSeq & params,
+      const CORBA_ExceptionDefSeq & exceptions
+      ACE_ENV_ARG_DECL_WITH_DEFAULTS);
+
+
+  virtual Dynamic::ParameterList * arguments (
+      ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)
 
-  virtual Dynamic::ParameterList * arguments (ACE_ENV_SINGLE_ARG_DECL)
     ACE_THROW_SPEC ((CORBA::SystemException));
   
-  virtual Dynamic::ExceptionList * exceptions (ACE_ENV_SINGLE_ARG_DECL)
+  virtual Dynamic::ExceptionList * exceptions (
+      ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)
+
     ACE_THROW_SPEC ((CORBA::SystemException));
   
-  virtual CORBA::Any * result (ACE_ENV_SINGLE_ARG_DECL)
+  virtual CORBA::Any * result (
+      ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)
+
     ACE_THROW_SPEC ((CORBA::SystemException));
 
   void result (IR::FactoryDef_ptr result);
@@ -17048,8 +17363,8 @@
   const char * id_;
   const char * name_;
   const char * version_;
-  const CORBA::ParDescriptionSeq & params_;
-  const CORBA::ExceptionDefSeq & exceptions_;
+  const CORBA_ParDescriptionSeq & params_;
+  const CORBA_ExceptionDefSeq & exceptions_;
   IR::FactoryDef_ptr _result;
 };
 
@@ -17059,8 +17374,9 @@
     const char * id,
     const char * name,
     const char * version,
-    const CORBA::ParDescriptionSeq & params,
-    const CORBA::ExceptionDefSeq & exceptions ACE_ENV_ARG_DECL_NOT_USED    
+    const CORBA_ParDescriptionSeq & params,
+    const CORBA_ExceptionDefSeq & exceptions
+    ACE_ENV_ARG_DECL_NOT_USED
   )
   : TAO_ClientRequestInfo_i (_tao_invocation, _tao_target),
     id_ (id),
@@ -17115,6 +17431,7 @@
   return exception_list;
 }
 
+
 CORBA::Any * 
 TAO_ClientRequestInfo_IR_HomeDef_create_factory::result (ACE_ENV_SINGLE_ARG_DECL)
   ACE_THROW_SPEC ((CORBA::SystemException))
@@ -17132,7 +17449,7 @@
 }
 
 void 
-TAO_ClientRequestInfo_IR_HomeDef_create_factory::result (::IR::FactoryDef_ptr result)
+TAO_ClientRequestInfo_IR_HomeDef_create_factory::result (IR::FactoryDef_ptr result)
 {
   // update the result 
   this->_result = result;
@@ -17147,17 +17464,24 @@
       const char * id,
       const char * name,
       const char * version,
-      const CORBA::ParDescriptionSeq & params,
-      const CORBA::ExceptionDefSeq & exceptions ACE_ENV_ARG_DECL_WITH_DEFAULTS
-    );
+      const CORBA_ParDescriptionSeq & params,
+      const CORBA_ExceptionDefSeq & exceptions
+      ACE_ENV_ARG_DECL_WITH_DEFAULTS);
+
+
+  virtual Dynamic::ParameterList * arguments (
+      ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)
 
-  virtual Dynamic::ParameterList * arguments (ACE_ENV_SINGLE_ARG_DECL)
     ACE_THROW_SPEC ((CORBA::SystemException));
   
-  virtual Dynamic::ExceptionList * exceptions (ACE_ENV_SINGLE_ARG_DECL)
+  virtual Dynamic::ExceptionList * exceptions (
+      ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)
+
     ACE_THROW_SPEC ((CORBA::SystemException));
   
-  virtual CORBA::Any * result (ACE_ENV_SINGLE_ARG_DECL)
+  virtual CORBA::Any * result (
+      ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)
+
     ACE_THROW_SPEC ((CORBA::SystemException));
 
   void result (IR::FinderDef_ptr result);
@@ -17169,8 +17493,8 @@
   const char * id_;
   const char * name_;
   const char * version_;
-  const CORBA::ParDescriptionSeq & params_;
-  const CORBA::ExceptionDefSeq & exceptions_;
+  const CORBA_ParDescriptionSeq & params_;
+  const CORBA_ExceptionDefSeq & exceptions_;
   IR::FinderDef_ptr _result;
 };
 
@@ -17180,8 +17504,9 @@
     const char * id,
     const char * name,
     const char * version,
-    const CORBA::ParDescriptionSeq & params,
-    const CORBA::ExceptionDefSeq & exceptions ACE_ENV_ARG_DECL_NOT_USED    
+    const CORBA_ParDescriptionSeq & params,
+    const CORBA_ExceptionDefSeq & exceptions
+    ACE_ENV_ARG_DECL_NOT_USED
   )
   : TAO_ClientRequestInfo_i (_tao_invocation, _tao_target),
     id_ (id),
@@ -17236,6 +17561,7 @@
   return exception_list;
 }
 
+
 CORBA::Any * 
 TAO_ClientRequestInfo_IR_HomeDef_create_finder::result (ACE_ENV_SINGLE_ARG_DECL)
   ACE_THROW_SPEC ((CORBA::SystemException))
@@ -17253,7 +17579,7 @@
 }
 
 void 
-TAO_ClientRequestInfo_IR_HomeDef_create_finder::result (::IR::FinderDef_ptr result)
+TAO_ClientRequestInfo_IR_HomeDef_create_finder::result (IR::FinderDef_ptr result)
 {
   // update the result 
   this->_result = result;
@@ -17273,7 +17599,7 @@
 
 // Remote Implementation of the IDL interface methods
 
-::IR::HomeDef_ptr IR::_TAO_HomeDef_Remote_Proxy_Impl::base_home (
+IR::HomeDef_ptr IR::_TAO_HomeDef_Remote_Proxy_Impl::base_home (
     CORBA_Object *_collocated_tao_target_
     ACE_ENV_ARG_DECL
   )
@@ -17282,13 +17608,13 @@
   ))
 {
   
-  IR::HomeDef_var _tao_retval (IR::HomeDef::_nil ());
-
+  IR::HomeDef_ptr _tao_retval = IR::HomeDef::_nil ();
+  IR::HomeDef_var _tao_safe_retval (_tao_retval);
 
   
   TAO_Stub *istub = _collocated_tao_target_->_stubobj ();
   if (istub == 0)
-    ACE_THROW_RETURN (CORBA::INTERNAL (),_tao_retval._retn ());
+    ACE_THROW_RETURN (CORBA::INTERNAL (), 0);
 
   
   TAO_GIOP_Twoway_Invocation _tao_call (
@@ -17315,24 +17641,25 @@
       _invoke_status = TAO_INVOKE_EXCEPTION;
       
 #if TAO_HAS_INTERCEPTORS == 1
-      TAO_ClientRequestInfo_IR_HomeDef_base_home_get _tao_ri (
+      TAO_ClientRequestInfo_IR_HomeDef_base_home_get ri (
         &_tao_call,
-        _collocated_tao_target_ ACE_ENV_ARG_PARAMETER
+        _collocated_tao_target_
+        ACE_ENV_ARG_PARAMETER
       );
-            ACE_CHECK_RETURN (_tao_retval._retn ());
+      ACE_CHECK_RETURN (0);
 
 #endif /* TAO_HAS_INTERCEPTORS */
       
       
       CORBA::Short _tao_response_flag = TAO_TWOWAY_RESPONSE_FLAG;
-      TAO_INTERCEPTOR (_tao_ri.response_expected (1));
+      TAO_INTERCEPTOR (ri.response_expected (1));
       
 #if TAO_HAS_INTERCEPTORS == 1
       
       ACE_TRY
         {
           _tao_vfr.send_request (
-            &_tao_ri
+            &ri
             ACE_ENV_ARG_PARAMETER
           );
           ACE_TRY_CHECK;
@@ -17346,17 +17673,17 @@
 #endif /* TAO_HAS_INTERCEPTORS */
           
           _tao_call.start (ACE_ENV_SINGLE_ARG_PARAMETER);
-                    TAO_INTERCEPTOR_CHECK_RETURN (_tao_retval._retn ());
+          TAO_INTERCEPTOR_CHECK_RETURN (0);
 
           _tao_call.prepare_header (
               ACE_static_cast (CORBA::Octet, _tao_response_flag)
               ACE_ENV_ARG_PARAMETER
             );
-                    TAO_INTERCEPTOR_CHECK_RETURN (_tao_retval._retn ());
+          TAO_INTERCEPTOR_CHECK_RETURN (0);
 
           _invoke_status =
             _tao_call.invoke (0, 0 ACE_ENV_ARG_PARAMETER);
-                    TAO_INTERCEPTOR_CHECK_RETURN (_tao_retval._retn ());
+          TAO_INTERCEPTOR_CHECK_RETURN (0);
 
           if (_invoke_status == TAO_INVOKE_EXCEPTION)
             {
@@ -17369,9 +17696,9 @@
           else if (_invoke_status == TAO_INVOKE_RESTART)
             {
               TAO_INTERCEPTOR (
-                _tao_ri.reply_status (_invoke_status);
+                ri.reply_status (_invoke_status);
                 _tao_vfr.receive_other (
-                  &_tao_ri
+                  &ri
                   ACE_ENV_ARG_PARAMETER
                 );
                 ACE_TRY_CHECK;
@@ -17382,7 +17709,7 @@
           
           TAO_InputCDR &_tao_in = _tao_call.inp_stream ();
           if (!(
-                            (_tao_in >> _tao_retval.inout ())
+                            (_tao_in >> _tao_safe_retval.inout ())
               ))
             {
               TAO_INTERCEPTOR_THROW_RETURN (
@@ -17393,13 +17720,13 @@
             }
           
 #if TAO_HAS_INTERCEPTORS == 1
-          ::IR::HomeDef_ptr _tao_retval_info = _tao_retval._retn ();
-          _tao_ri.result (_tao_retval_info);
-          _tao_retval = _tao_retval_info;
+          IR::HomeDef_ptr _tao_retval_info = _tao_safe_retval._retn ();
+          ri.result (_tao_retval_info);
+          _tao_safe_retval = _tao_retval_info;
           
-          _tao_ri.reply_status (_invoke_status);
+          ri.reply_status (_invoke_status);
           _tao_vfr.receive_reply (
-            &_tao_ri
+            &ri
             ACE_ENV_ARG_PARAMETER
           );
           ACE_TRY_CHECK;
@@ -17407,15 +17734,15 @@
       }
     ACE_CATCHANY
       {
-        _tao_ri.exception (&ACE_ANY_EXCEPTION);
+        ri.exception (&ACE_ANY_EXCEPTION);
         _tao_vfr.receive_exception (
-          &_tao_ri
+          &ri
           ACE_ENV_ARG_PARAMETER
         );
         ACE_TRY_CHECK;
         
         PortableInterceptor::ReplyStatus _tao_status =
-          _tao_ri.reply_status (ACE_ENV_SINGLE_ARG_PARAMETER);
+          ri.reply_status (ACE_ENV_SINGLE_ARG_PARAMETER);
         ACE_TRY_CHECK;
         
         if (_tao_status == PortableInterceptor::SYSTEM_EXCEPTION
@@ -17423,11 +17750,11 @@
           ACE_RE_THROW;
       }
     ACE_ENDTRY;
-        ACE_CHECK_RETURN (_tao_retval._retn ());
+    ACE_CHECK_RETURN (0);
 
     PortableInterceptor::ReplyStatus _tao_status =
-      _tao_ri.reply_status (ACE_ENV_SINGLE_ARG_PARAMETER);
-        ACE_CHECK_RETURN (_tao_retval._retn ());
+      ri.reply_status (ACE_ENV_SINGLE_ARG_PARAMETER);
+    ACE_CHECK_RETURN (0);
 
     if (_tao_status == PortableInterceptor::LOCATION_FORWARD
         || _tao_status == PortableInterceptor::TRANSPORT_RETRY)
@@ -17437,10 +17764,10 @@
     
     break;
   }
-return _tao_retval._retn ();
+return _tao_safe_retval._retn ();
 }
 
-::IR::ComponentDef_ptr IR::_TAO_HomeDef_Remote_Proxy_Impl::managed_component (
+IR::ComponentDef_ptr IR::_TAO_HomeDef_Remote_Proxy_Impl::managed_component (
     CORBA_Object *_collocated_tao_target_
     ACE_ENV_ARG_DECL
   )
@@ -17449,13 +17776,13 @@
   ))
 {
   
-  IR::ComponentDef_var _tao_retval (IR::ComponentDef::_nil ());
-
+  IR::ComponentDef_ptr _tao_retval = IR::ComponentDef::_nil ();
+  IR::ComponentDef_var _tao_safe_retval (_tao_retval);
 
   
   TAO_Stub *istub = _collocated_tao_target_->_stubobj ();
   if (istub == 0)
-    ACE_THROW_RETURN (CORBA::INTERNAL (),_tao_retval._retn ());
+    ACE_THROW_RETURN (CORBA::INTERNAL (), 0);
 
   
   TAO_GIOP_Twoway_Invocation _tao_call (
@@ -17482,24 +17809,25 @@
       _invoke_status = TAO_INVOKE_EXCEPTION;
       
 #if TAO_HAS_INTERCEPTORS == 1
-      TAO_ClientRequestInfo_IR_HomeDef_managed_component_get _tao_ri (
+      TAO_ClientRequestInfo_IR_HomeDef_managed_component_get ri (
         &_tao_call,
-        _collocated_tao_target_ ACE_ENV_ARG_PARAMETER
+        _collocated_tao_target_
+        ACE_ENV_ARG_PARAMETER
       );
-            ACE_CHECK_RETURN (_tao_retval._retn ());
+      ACE_CHECK_RETURN (0);
 
 #endif /* TAO_HAS_INTERCEPTORS */
       
       
       CORBA::Short _tao_response_flag = TAO_TWOWAY_RESPONSE_FLAG;
-      TAO_INTERCEPTOR (_tao_ri.response_expected (1));
+      TAO_INTERCEPTOR (ri.response_expected (1));
       
 #if TAO_HAS_INTERCEPTORS == 1
       
       ACE_TRY
         {
           _tao_vfr.send_request (
-            &_tao_ri
+            &ri
             ACE_ENV_ARG_PARAMETER
           );
           ACE_TRY_CHECK;
@@ -17513,17 +17841,17 @@
 #endif /* TAO_HAS_INTERCEPTORS */
           
           _tao_call.start (ACE_ENV_SINGLE_ARG_PARAMETER);
-                    TAO_INTERCEPTOR_CHECK_RETURN (_tao_retval._retn ());
+          TAO_INTERCEPTOR_CHECK_RETURN (0);
 
           _tao_call.prepare_header (
               ACE_static_cast (CORBA::Octet, _tao_response_flag)
               ACE_ENV_ARG_PARAMETER
             );
-                    TAO_INTERCEPTOR_CHECK_RETURN (_tao_retval._retn ());
+          TAO_INTERCEPTOR_CHECK_RETURN (0);
 
           _invoke_status =
             _tao_call.invoke (0, 0 ACE_ENV_ARG_PARAMETER);
-                    TAO_INTERCEPTOR_CHECK_RETURN (_tao_retval._retn ());
+          TAO_INTERCEPTOR_CHECK_RETURN (0);
 
           if (_invoke_status == TAO_INVOKE_EXCEPTION)
             {
@@ -17536,9 +17864,9 @@
           else if (_invoke_status == TAO_INVOKE_RESTART)
             {
               TAO_INTERCEPTOR (
-                _tao_ri.reply_status (_invoke_status);
+                ri.reply_status (_invoke_status);
                 _tao_vfr.receive_other (
-                  &_tao_ri
+                  &ri
                   ACE_ENV_ARG_PARAMETER
                 );
                 ACE_TRY_CHECK;
@@ -17549,7 +17877,7 @@
           
           TAO_InputCDR &_tao_in = _tao_call.inp_stream ();
           if (!(
-                            (_tao_in >> _tao_retval.inout ())
+                            (_tao_in >> _tao_safe_retval.inout ())
               ))
             {
               TAO_INTERCEPTOR_THROW_RETURN (
@@ -17560,13 +17888,13 @@
             }
           
 #if TAO_HAS_INTERCEPTORS == 1
-          ::IR::ComponentDef_ptr _tao_retval_info = _tao_retval._retn ();
-          _tao_ri.result (_tao_retval_info);
-          _tao_retval = _tao_retval_info;
+          IR::ComponentDef_ptr _tao_retval_info = _tao_safe_retval._retn ();
+          ri.result (_tao_retval_info);
+          _tao_safe_retval = _tao_retval_info;
           
-          _tao_ri.reply_status (_invoke_status);
+          ri.reply_status (_invoke_status);
           _tao_vfr.receive_reply (
-            &_tao_ri
+            &ri
             ACE_ENV_ARG_PARAMETER
           );
           ACE_TRY_CHECK;
@@ -17574,15 +17902,15 @@
       }
     ACE_CATCHANY
       {
-        _tao_ri.exception (&ACE_ANY_EXCEPTION);
+        ri.exception (&ACE_ANY_EXCEPTION);
         _tao_vfr.receive_exception (
-          &_tao_ri
+          &ri
           ACE_ENV_ARG_PARAMETER
         );
         ACE_TRY_CHECK;
         
         PortableInterceptor::ReplyStatus _tao_status =
-          _tao_ri.reply_status (ACE_ENV_SINGLE_ARG_PARAMETER);
+          ri.reply_status (ACE_ENV_SINGLE_ARG_PARAMETER);
         ACE_TRY_CHECK;
         
         if (_tao_status == PortableInterceptor::SYSTEM_EXCEPTION
@@ -17590,11 +17918,11 @@
           ACE_RE_THROW;
       }
     ACE_ENDTRY;
-        ACE_CHECK_RETURN (_tao_retval._retn ());
+    ACE_CHECK_RETURN (0);
 
     PortableInterceptor::ReplyStatus _tao_status =
-      _tao_ri.reply_status (ACE_ENV_SINGLE_ARG_PARAMETER);
-        ACE_CHECK_RETURN (_tao_retval._retn ());
+      ri.reply_status (ACE_ENV_SINGLE_ARG_PARAMETER);
+    ACE_CHECK_RETURN (0);
 
     if (_tao_status == PortableInterceptor::LOCATION_FORWARD
         || _tao_status == PortableInterceptor::TRANSPORT_RETRY)
@@ -17604,10 +17932,10 @@
     
     break;
   }
-return _tao_retval._retn ();
+return _tao_safe_retval._retn ();
 }
 
-::IR::PrimaryKeyDef_ptr IR::_TAO_HomeDef_Remote_Proxy_Impl::primary_key (
+IR::PrimaryKeyDef_ptr IR::_TAO_HomeDef_Remote_Proxy_Impl::primary_key (
     CORBA_Object *_collocated_tao_target_
     ACE_ENV_ARG_DECL
   )
@@ -17616,13 +17944,13 @@
   ))
 {
   
-  IR::PrimaryKeyDef_var _tao_retval (IR::PrimaryKeyDef::_nil ());
-
+  IR::PrimaryKeyDef_ptr _tao_retval = IR::PrimaryKeyDef::_nil ();
+  IR::PrimaryKeyDef_var _tao_safe_retval (_tao_retval);
 
   
   TAO_Stub *istub = _collocated_tao_target_->_stubobj ();
   if (istub == 0)
-    ACE_THROW_RETURN (CORBA::INTERNAL (),_tao_retval._retn ());
+    ACE_THROW_RETURN (CORBA::INTERNAL (), 0);
 
   
   TAO_GIOP_Twoway_Invocation _tao_call (
@@ -17649,24 +17977,25 @@
       _invoke_status = TAO_INVOKE_EXCEPTION;
       
 #if TAO_HAS_INTERCEPTORS == 1
-      TAO_ClientRequestInfo_IR_HomeDef_primary_key_get _tao_ri (
+      TAO_ClientRequestInfo_IR_HomeDef_primary_key_get ri (
         &_tao_call,
-        _collocated_tao_target_ ACE_ENV_ARG_PARAMETER
+        _collocated_tao_target_
+        ACE_ENV_ARG_PARAMETER
       );
-            ACE_CHECK_RETURN (_tao_retval._retn ());
+      ACE_CHECK_RETURN (0);
 
 #endif /* TAO_HAS_INTERCEPTORS */
       
       
       CORBA::Short _tao_response_flag = TAO_TWOWAY_RESPONSE_FLAG;
-      TAO_INTERCEPTOR (_tao_ri.response_expected (1));
+      TAO_INTERCEPTOR (ri.response_expected (1));
       
 #if TAO_HAS_INTERCEPTORS == 1
       
       ACE_TRY
         {
           _tao_vfr.send_request (
-            &_tao_ri
+            &ri
             ACE_ENV_ARG_PARAMETER
           );
           ACE_TRY_CHECK;
@@ -17680,17 +18009,17 @@
 #endif /* TAO_HAS_INTERCEPTORS */
           
           _tao_call.start (ACE_ENV_SINGLE_ARG_PARAMETER);
-                    TAO_INTERCEPTOR_CHECK_RETURN (_tao_retval._retn ());
+          TAO_INTERCEPTOR_CHECK_RETURN (0);
 
           _tao_call.prepare_header (
               ACE_static_cast (CORBA::Octet, _tao_response_flag)
               ACE_ENV_ARG_PARAMETER
             );
-                    TAO_INTERCEPTOR_CHECK_RETURN (_tao_retval._retn ());
+          TAO_INTERCEPTOR_CHECK_RETURN (0);
 
           _invoke_status =
             _tao_call.invoke (0, 0 ACE_ENV_ARG_PARAMETER);
-                    TAO_INTERCEPTOR_CHECK_RETURN (_tao_retval._retn ());
+          TAO_INTERCEPTOR_CHECK_RETURN (0);
 
           if (_invoke_status == TAO_INVOKE_EXCEPTION)
             {
@@ -17703,9 +18032,9 @@
           else if (_invoke_status == TAO_INVOKE_RESTART)
             {
               TAO_INTERCEPTOR (
-                _tao_ri.reply_status (_invoke_status);
+                ri.reply_status (_invoke_status);
                 _tao_vfr.receive_other (
-                  &_tao_ri
+                  &ri
                   ACE_ENV_ARG_PARAMETER
                 );
                 ACE_TRY_CHECK;
@@ -17716,7 +18045,7 @@
           
           TAO_InputCDR &_tao_in = _tao_call.inp_stream ();
           if (!(
-                            (_tao_in >> _tao_retval.inout ())
+                            (_tao_in >> _tao_safe_retval.inout ())
               ))
             {
               TAO_INTERCEPTOR_THROW_RETURN (
@@ -17727,13 +18056,13 @@
             }
           
 #if TAO_HAS_INTERCEPTORS == 1
-          ::IR::PrimaryKeyDef_ptr _tao_retval_info = _tao_retval._retn ();
-          _tao_ri.result (_tao_retval_info);
-          _tao_retval = _tao_retval_info;
+          IR::PrimaryKeyDef_ptr _tao_retval_info = _tao_safe_retval._retn ();
+          ri.result (_tao_retval_info);
+          _tao_safe_retval = _tao_retval_info;
           
-          _tao_ri.reply_status (_invoke_status);
+          ri.reply_status (_invoke_status);
           _tao_vfr.receive_reply (
-            &_tao_ri
+            &ri
             ACE_ENV_ARG_PARAMETER
           );
           ACE_TRY_CHECK;
@@ -17741,15 +18070,15 @@
       }
     ACE_CATCHANY
       {
-        _tao_ri.exception (&ACE_ANY_EXCEPTION);
+        ri.exception (&ACE_ANY_EXCEPTION);
         _tao_vfr.receive_exception (
-          &_tao_ri
+          &ri
           ACE_ENV_ARG_PARAMETER
         );
         ACE_TRY_CHECK;
         
         PortableInterceptor::ReplyStatus _tao_status =
-          _tao_ri.reply_status (ACE_ENV_SINGLE_ARG_PARAMETER);
+          ri.reply_status (ACE_ENV_SINGLE_ARG_PARAMETER);
         ACE_TRY_CHECK;
         
         if (_tao_status == PortableInterceptor::SYSTEM_EXCEPTION
@@ -17757,11 +18086,11 @@
           ACE_RE_THROW;
       }
     ACE_ENDTRY;
-        ACE_CHECK_RETURN (_tao_retval._retn ());
+    ACE_CHECK_RETURN (0);
 
     PortableInterceptor::ReplyStatus _tao_status =
-      _tao_ri.reply_status (ACE_ENV_SINGLE_ARG_PARAMETER);
-        ACE_CHECK_RETURN (_tao_retval._retn ());
+      ri.reply_status (ACE_ENV_SINGLE_ARG_PARAMETER);
+    ACE_CHECK_RETURN (0);
 
     if (_tao_status == PortableInterceptor::LOCATION_FORWARD
         || _tao_status == PortableInterceptor::TRANSPORT_RETRY)
@@ -17771,10 +18100,10 @@
     
     break;
   }
-return _tao_retval._retn ();
+return _tao_safe_retval._retn ();
 }
 
-::IR::FactoryDefSeq * IR::_TAO_HomeDef_Remote_Proxy_Impl::factories (
+IR::FactoryDefSeq * IR::_TAO_HomeDef_Remote_Proxy_Impl::factories (
     CORBA_Object *_collocated_tao_target_
     ACE_ENV_ARG_DECL
   )
@@ -17783,19 +18112,16 @@
   ))
 {
   
-  IR::FactoryDefSeq_var _tao_retval;
+  IR::FactoryDefSeq *_tao_retval = 0;
 
   
   TAO_Stub *istub = _collocated_tao_target_->_stubobj ();
   if (istub == 0)
-    ACE_THROW_RETURN (CORBA::INTERNAL (),_tao_retval._retn ());
+    ACE_THROW_RETURN (CORBA::INTERNAL (), 0);
 
   
-  {
-    IR::FactoryDefSeq *tmp;
-    ACE_NEW_RETURN (tmp, IR::FactoryDefSeq, _tao_retval._retn ());
-    _tao_retval = tmp;
-  }
+  ACE_NEW_RETURN (_tao_retval, IR::FactoryDefSeq, _tao_retval);
+  IR::FactoryDefSeq_var _tao_safe_retval (_tao_retval);
   TAO_GIOP_Twoway_Invocation _tao_call (
       istub,
       "_get_factories",
@@ -17820,24 +18146,25 @@
       _invoke_status = TAO_INVOKE_EXCEPTION;
       
 #if TAO_HAS_INTERCEPTORS == 1
-      TAO_ClientRequestInfo_IR_HomeDef_factories_get _tao_ri (
+      TAO_ClientRequestInfo_IR_HomeDef_factories_get ri (
         &_tao_call,
-        _collocated_tao_target_ ACE_ENV_ARG_PARAMETER
+        _collocated_tao_target_
+        ACE_ENV_ARG_PARAMETER
       );
-            ACE_CHECK_RETURN (_tao_retval._retn ());
+      ACE_CHECK_RETURN (0);
 
 #endif /* TAO_HAS_INTERCEPTORS */
       
       
       CORBA::Short _tao_response_flag = TAO_TWOWAY_RESPONSE_FLAG;
-      TAO_INTERCEPTOR (_tao_ri.response_expected (1));
+      TAO_INTERCEPTOR (ri.response_expected (1));
       
 #if TAO_HAS_INTERCEPTORS == 1
       
       ACE_TRY
         {
           _tao_vfr.send_request (
-            &_tao_ri
+            &ri
             ACE_ENV_ARG_PARAMETER
           );
           ACE_TRY_CHECK;
@@ -17851,17 +18178,17 @@
 #endif /* TAO_HAS_INTERCEPTORS */
           
           _tao_call.start (ACE_ENV_SINGLE_ARG_PARAMETER);
-                    TAO_INTERCEPTOR_CHECK_RETURN (_tao_retval._retn ());
+          TAO_INTERCEPTOR_CHECK_RETURN (0);
 
           _tao_call.prepare_header (
               ACE_static_cast (CORBA::Octet, _tao_response_flag)
               ACE_ENV_ARG_PARAMETER
             );
-                    TAO_INTERCEPTOR_CHECK_RETURN (_tao_retval._retn ());
+          TAO_INTERCEPTOR_CHECK_RETURN (0);
 
           _invoke_status =
             _tao_call.invoke (0, 0 ACE_ENV_ARG_PARAMETER);
-                    TAO_INTERCEPTOR_CHECK_RETURN (_tao_retval._retn ());
+          TAO_INTERCEPTOR_CHECK_RETURN (0);
 
           if (_invoke_status == TAO_INVOKE_EXCEPTION)
             {
@@ -17874,9 +18201,9 @@
           else if (_invoke_status == TAO_INVOKE_RESTART)
             {
               TAO_INTERCEPTOR (
-                _tao_ri.reply_status (_invoke_status);
+                ri.reply_status (_invoke_status);
                 _tao_vfr.receive_other (
-                  &_tao_ri
+                  &ri
                   ACE_ENV_ARG_PARAMETER
                 );
                 ACE_TRY_CHECK;
@@ -17887,7 +18214,7 @@
           
           TAO_InputCDR &_tao_in = _tao_call.inp_stream ();
           if (!(
-                            (_tao_in >> _tao_retval.inout ())
+                            (_tao_in >> _tao_safe_retval.inout ())
               ))
             {
               TAO_INTERCEPTOR_THROW_RETURN (
@@ -17898,13 +18225,13 @@
             }
           
 #if TAO_HAS_INTERCEPTORS == 1
-          ::IR::FactoryDefSeq * _tao_retval_info = _tao_retval._retn ();
-          _tao_ri.result (_tao_retval_info);
-          _tao_retval = _tao_retval_info;
+          IR::FactoryDefSeq * _tao_retval_info = _tao_safe_retval._retn ();
+          ri.result (_tao_retval_info);
+          _tao_safe_retval = _tao_retval_info;
           
-          _tao_ri.reply_status (_invoke_status);
+          ri.reply_status (_invoke_status);
           _tao_vfr.receive_reply (
-            &_tao_ri
+            &ri
             ACE_ENV_ARG_PARAMETER
           );
           ACE_TRY_CHECK;
@@ -17912,15 +18239,15 @@
       }
     ACE_CATCHANY
       {
-        _tao_ri.exception (&ACE_ANY_EXCEPTION);
+        ri.exception (&ACE_ANY_EXCEPTION);
         _tao_vfr.receive_exception (
-          &_tao_ri
+          &ri
           ACE_ENV_ARG_PARAMETER
         );
         ACE_TRY_CHECK;
         
         PortableInterceptor::ReplyStatus _tao_status =
-          _tao_ri.reply_status (ACE_ENV_SINGLE_ARG_PARAMETER);
+          ri.reply_status (ACE_ENV_SINGLE_ARG_PARAMETER);
         ACE_TRY_CHECK;
         
         if (_tao_status == PortableInterceptor::SYSTEM_EXCEPTION
@@ -17928,11 +18255,11 @@
           ACE_RE_THROW;
       }
     ACE_ENDTRY;
-        ACE_CHECK_RETURN (_tao_retval._retn ());
+    ACE_CHECK_RETURN (0);
 
     PortableInterceptor::ReplyStatus _tao_status =
-      _tao_ri.reply_status (ACE_ENV_SINGLE_ARG_PARAMETER);
-        ACE_CHECK_RETURN (_tao_retval._retn ());
+      ri.reply_status (ACE_ENV_SINGLE_ARG_PARAMETER);
+    ACE_CHECK_RETURN (0);
 
     if (_tao_status == PortableInterceptor::LOCATION_FORWARD
         || _tao_status == PortableInterceptor::TRANSPORT_RETRY)
@@ -17942,10 +18269,10 @@
     
     break;
   }
-return _tao_retval._retn ();
+return _tao_safe_retval._retn ();
 }
 
-::IR::FinderDefSeq * IR::_TAO_HomeDef_Remote_Proxy_Impl::finders (
+IR::FinderDefSeq * IR::_TAO_HomeDef_Remote_Proxy_Impl::finders (
     CORBA_Object *_collocated_tao_target_
     ACE_ENV_ARG_DECL
   )
@@ -17954,19 +18281,16 @@
   ))
 {
   
-  IR::FinderDefSeq_var _tao_retval;
+  IR::FinderDefSeq *_tao_retval = 0;
 
   
   TAO_Stub *istub = _collocated_tao_target_->_stubobj ();
   if (istub == 0)
-    ACE_THROW_RETURN (CORBA::INTERNAL (),_tao_retval._retn ());
+    ACE_THROW_RETURN (CORBA::INTERNAL (), 0);
 
   
-  {
-    IR::FinderDefSeq *tmp;
-    ACE_NEW_RETURN (tmp, IR::FinderDefSeq, _tao_retval._retn ());
-    _tao_retval = tmp;
-  }
+  ACE_NEW_RETURN (_tao_retval, IR::FinderDefSeq, _tao_retval);
+  IR::FinderDefSeq_var _tao_safe_retval (_tao_retval);
   TAO_GIOP_Twoway_Invocation _tao_call (
       istub,
       "_get_finders",
@@ -17991,24 +18315,25 @@
       _invoke_status = TAO_INVOKE_EXCEPTION;
       
 #if TAO_HAS_INTERCEPTORS == 1
-      TAO_ClientRequestInfo_IR_HomeDef_finders_get _tao_ri (
+      TAO_ClientRequestInfo_IR_HomeDef_finders_get ri (
         &_tao_call,
-        _collocated_tao_target_ ACE_ENV_ARG_PARAMETER
+        _collocated_tao_target_
+        ACE_ENV_ARG_PARAMETER
       );
-            ACE_CHECK_RETURN (_tao_retval._retn ());
+      ACE_CHECK_RETURN (0);
 
 #endif /* TAO_HAS_INTERCEPTORS */
       
       
       CORBA::Short _tao_response_flag = TAO_TWOWAY_RESPONSE_FLAG;
-      TAO_INTERCEPTOR (_tao_ri.response_expected (1));
+      TAO_INTERCEPTOR (ri.response_expected (1));
       
 #if TAO_HAS_INTERCEPTORS == 1
       
       ACE_TRY
         {
           _tao_vfr.send_request (
-            &_tao_ri
+            &ri
             ACE_ENV_ARG_PARAMETER
           );
           ACE_TRY_CHECK;
@@ -18022,17 +18347,17 @@
 #endif /* TAO_HAS_INTERCEPTORS */
           
           _tao_call.start (ACE_ENV_SINGLE_ARG_PARAMETER);
-                    TAO_INTERCEPTOR_CHECK_RETURN (_tao_retval._retn ());
+          TAO_INTERCEPTOR_CHECK_RETURN (0);
 
           _tao_call.prepare_header (
               ACE_static_cast (CORBA::Octet, _tao_response_flag)
               ACE_ENV_ARG_PARAMETER
             );
-                    TAO_INTERCEPTOR_CHECK_RETURN (_tao_retval._retn ());
+          TAO_INTERCEPTOR_CHECK_RETURN (0);
 
           _invoke_status =
             _tao_call.invoke (0, 0 ACE_ENV_ARG_PARAMETER);
-                    TAO_INTERCEPTOR_CHECK_RETURN (_tao_retval._retn ());
+          TAO_INTERCEPTOR_CHECK_RETURN (0);
 
           if (_invoke_status == TAO_INVOKE_EXCEPTION)
             {
@@ -18045,9 +18370,9 @@
           else if (_invoke_status == TAO_INVOKE_RESTART)
             {
               TAO_INTERCEPTOR (
-                _tao_ri.reply_status (_invoke_status);
+                ri.reply_status (_invoke_status);
                 _tao_vfr.receive_other (
-                  &_tao_ri
+                  &ri
                   ACE_ENV_ARG_PARAMETER
                 );
                 ACE_TRY_CHECK;
@@ -18058,7 +18383,7 @@
           
           TAO_InputCDR &_tao_in = _tao_call.inp_stream ();
           if (!(
-                            (_tao_in >> _tao_retval.inout ())
+                            (_tao_in >> _tao_safe_retval.inout ())
               ))
             {
               TAO_INTERCEPTOR_THROW_RETURN (
@@ -18069,13 +18394,13 @@
             }
           
 #if TAO_HAS_INTERCEPTORS == 1
-          ::IR::FinderDefSeq * _tao_retval_info = _tao_retval._retn ();
-          _tao_ri.result (_tao_retval_info);
-          _tao_retval = _tao_retval_info;
+          IR::FinderDefSeq * _tao_retval_info = _tao_safe_retval._retn ();
+          ri.result (_tao_retval_info);
+          _tao_safe_retval = _tao_retval_info;
           
-          _tao_ri.reply_status (_invoke_status);
+          ri.reply_status (_invoke_status);
           _tao_vfr.receive_reply (
-            &_tao_ri
+            &ri
             ACE_ENV_ARG_PARAMETER
           );
           ACE_TRY_CHECK;
@@ -18083,15 +18408,15 @@
       }
     ACE_CATCHANY
       {
-        _tao_ri.exception (&ACE_ANY_EXCEPTION);
+        ri.exception (&ACE_ANY_EXCEPTION);
         _tao_vfr.receive_exception (
-          &_tao_ri
+          &ri
           ACE_ENV_ARG_PARAMETER
         );
         ACE_TRY_CHECK;
         
         PortableInterceptor::ReplyStatus _tao_status =
-          _tao_ri.reply_status (ACE_ENV_SINGLE_ARG_PARAMETER);
+          ri.reply_status (ACE_ENV_SINGLE_ARG_PARAMETER);
         ACE_TRY_CHECK;
         
         if (_tao_status == PortableInterceptor::SYSTEM_EXCEPTION
@@ -18099,11 +18424,11 @@
           ACE_RE_THROW;
       }
     ACE_ENDTRY;
-        ACE_CHECK_RETURN (_tao_retval._retn ());
+    ACE_CHECK_RETURN (0);
 
     PortableInterceptor::ReplyStatus _tao_status =
-      _tao_ri.reply_status (ACE_ENV_SINGLE_ARG_PARAMETER);
-        ACE_CHECK_RETURN (_tao_retval._retn ());
+      ri.reply_status (ACE_ENV_SINGLE_ARG_PARAMETER);
+    ACE_CHECK_RETURN (0);
 
     if (_tao_status == PortableInterceptor::LOCATION_FORWARD
         || _tao_status == PortableInterceptor::TRANSPORT_RETRY)
@@ -18113,7 +18438,7 @@
     
     break;
   }
-return _tao_retval._retn ();
+return _tao_safe_retval._retn ();
 }
 
 CORBA::Boolean IR::_TAO_HomeDef_Remote_Proxy_Impl::is_basic (
@@ -18157,9 +18482,10 @@
       _invoke_status = TAO_INVOKE_EXCEPTION;
       
 #if TAO_HAS_INTERCEPTORS == 1
-      TAO_ClientRequestInfo_IR_HomeDef_is_basic_get _tao_ri (
+      TAO_ClientRequestInfo_IR_HomeDef_is_basic_get ri (
         &_tao_call,
-        _collocated_tao_target_ ACE_ENV_ARG_PARAMETER
+        _collocated_tao_target_
+        ACE_ENV_ARG_PARAMETER
       );
             ACE_CHECK_RETURN (_tao_retval);
 
@@ -18167,14 +18493,14 @@
       
       
       CORBA::Short _tao_response_flag = TAO_TWOWAY_RESPONSE_FLAG;
-      TAO_INTERCEPTOR (_tao_ri.response_expected (1));
+      TAO_INTERCEPTOR (ri.response_expected (1));
       
 #if TAO_HAS_INTERCEPTORS == 1
       
       ACE_TRY
         {
           _tao_vfr.send_request (
-            &_tao_ri
+            &ri
             ACE_ENV_ARG_PARAMETER
           );
           ACE_TRY_CHECK;
@@ -18211,9 +18537,9 @@
           else if (_invoke_status == TAO_INVOKE_RESTART)
             {
               TAO_INTERCEPTOR (
-                _tao_ri.reply_status (_invoke_status);
+                ri.reply_status (_invoke_status);
                 _tao_vfr.receive_other (
-                  &_tao_ri
+                  &ri
                   ACE_ENV_ARG_PARAMETER
                 );
                 ACE_TRY_CHECK;
@@ -18236,11 +18562,11 @@
           
 #if TAO_HAS_INTERCEPTORS == 1
           CORBA::Boolean _tao_retval_info = _tao_retval;
-          _tao_ri.result (_tao_retval_info);
+          ri.result (_tao_retval_info);
           
-          _tao_ri.reply_status (_invoke_status);
+          ri.reply_status (_invoke_status);
           _tao_vfr.receive_reply (
-            &_tao_ri
+            &ri
             ACE_ENV_ARG_PARAMETER
           );
           ACE_TRY_CHECK;
@@ -18248,15 +18574,15 @@
       }
     ACE_CATCHANY
       {
-        _tao_ri.exception (&ACE_ANY_EXCEPTION);
+        ri.exception (&ACE_ANY_EXCEPTION);
         _tao_vfr.receive_exception (
-          &_tao_ri
+          &ri
           ACE_ENV_ARG_PARAMETER
         );
         ACE_TRY_CHECK;
         
         PortableInterceptor::ReplyStatus _tao_status =
-          _tao_ri.reply_status (ACE_ENV_SINGLE_ARG_PARAMETER);
+          ri.reply_status (ACE_ENV_SINGLE_ARG_PARAMETER);
         ACE_TRY_CHECK;
         
         if (_tao_status == PortableInterceptor::SYSTEM_EXCEPTION
@@ -18267,7 +18593,7 @@
         ACE_CHECK_RETURN (_tao_retval);
 
     PortableInterceptor::ReplyStatus _tao_status =
-      _tao_ri.reply_status (ACE_ENV_SINGLE_ARG_PARAMETER);
+      ri.reply_status (ACE_ENV_SINGLE_ARG_PARAMETER);
         ACE_CHECK_RETURN (_tao_retval);
 
     if (_tao_status == PortableInterceptor::LOCATION_FORWARD
@@ -18281,12 +18607,12 @@
 return _tao_retval;
 }
 
-::IR::PrimaryKeyDef_ptr IR::_TAO_HomeDef_Remote_Proxy_Impl::create_primary_key (
+IR::PrimaryKeyDef_ptr IR::_TAO_HomeDef_Remote_Proxy_Impl::create_primary_key (
     CORBA_Object *_collocated_tao_target_,
     const char * id,
     const char * name,
     const char * version,
-    CORBA::ValueDef_ptr primary_key
+    CORBA_ValueDef_ptr primary_key
     ACE_ENV_ARG_DECL
   )
   ACE_THROW_SPEC ((
@@ -18294,20 +18620,20 @@
   ))
 {
   
-  IR::PrimaryKeyDef_var _tao_retval (IR::PrimaryKeyDef::_nil ());
-
+  IR::PrimaryKeyDef_ptr _tao_retval = IR::PrimaryKeyDef::_nil ();
+  IR::PrimaryKeyDef_var _tao_safe_retval (_tao_retval);
 
   
   TAO_Stub *istub = _collocated_tao_target_->_stubobj ();
   if (istub == 0)
-    ACE_THROW_RETURN (CORBA::INTERNAL (),_tao_retval._retn ());
+    ACE_THROW_RETURN (CORBA::INTERNAL (), 0);
 
   
   TAO_GIOP_Twoway_Invocation _tao_call (
       istub,
       "create_primary_key",
       18,
-      4,
+      1,
       istub->orb_core ()
     );
   
@@ -18327,28 +18653,29 @@
       _invoke_status = TAO_INVOKE_EXCEPTION;
       
 #if TAO_HAS_INTERCEPTORS == 1
-      TAO_ClientRequestInfo_IR_HomeDef_create_primary_key _tao_ri (
+      TAO_ClientRequestInfo_IR_HomeDef_create_primary_key ri (
         &_tao_call,
         _collocated_tao_target_,
         id,
         name,
         version,
-        primary_key ACE_ENV_ARG_PARAMETER
+        primary_key
+        ACE_ENV_ARG_PARAMETER
       );
-            ACE_CHECK_RETURN (_tao_retval._retn ());
+      ACE_CHECK_RETURN (0);
 
 #endif /* TAO_HAS_INTERCEPTORS */
       
       
       CORBA::Short _tao_response_flag = TAO_TWOWAY_RESPONSE_FLAG;
-      TAO_INTERCEPTOR (_tao_ri.response_expected (1));
+      TAO_INTERCEPTOR (ri.response_expected (1));
       
 #if TAO_HAS_INTERCEPTORS == 1
       
       ACE_TRY
         {
           _tao_vfr.send_request (
-            &_tao_ri
+            &ri
             ACE_ENV_ARG_PARAMETER
           );
           ACE_TRY_CHECK;
@@ -18362,13 +18689,13 @@
 #endif /* TAO_HAS_INTERCEPTORS */
           
           _tao_call.start (ACE_ENV_SINGLE_ARG_PARAMETER);
-                    TAO_INTERCEPTOR_CHECK_RETURN (_tao_retval._retn ());
+          TAO_INTERCEPTOR_CHECK_RETURN (0);
 
           _tao_call.prepare_header (
               ACE_static_cast (CORBA::Octet, _tao_response_flag)
               ACE_ENV_ARG_PARAMETER
             );
-                    TAO_INTERCEPTOR_CHECK_RETURN (_tao_retval._retn ());
+          TAO_INTERCEPTOR_CHECK_RETURN (0);
 
           TAO_OutputCDR &_tao_out = _tao_call.out_stream ();
           if (!(
@@ -18384,7 +18711,7 @@
             
           _invoke_status =
             _tao_call.invoke (0, 0 ACE_ENV_ARG_PARAMETER);
-                    TAO_INTERCEPTOR_CHECK_RETURN (_tao_retval._retn ());
+          TAO_INTERCEPTOR_CHECK_RETURN (0);
 
           if (_invoke_status == TAO_INVOKE_EXCEPTION)
             {
@@ -18397,9 +18724,9 @@
           else if (_invoke_status == TAO_INVOKE_RESTART)
             {
               TAO_INTERCEPTOR (
-                _tao_ri.reply_status (_invoke_status);
+                ri.reply_status (_invoke_status);
                 _tao_vfr.receive_other (
-                  &_tao_ri
+                  &ri
                   ACE_ENV_ARG_PARAMETER
                 );
                 ACE_TRY_CHECK;
@@ -18410,7 +18737,7 @@
           
           TAO_InputCDR &_tao_in = _tao_call.inp_stream ();
           if (!(
-                            (_tao_in >> _tao_retval.inout ())
+                            (_tao_in >> _tao_safe_retval.inout ())
               ))
             {
               TAO_INTERCEPTOR_THROW_RETURN (
@@ -18421,13 +18748,13 @@
             }
           
 #if TAO_HAS_INTERCEPTORS == 1
-          ::IR::PrimaryKeyDef_ptr _tao_retval_info = _tao_retval._retn ();
-          _tao_ri.result (_tao_retval_info);
-          _tao_retval = _tao_retval_info;
+          IR::PrimaryKeyDef_ptr _tao_retval_info = _tao_safe_retval._retn ();
+          ri.result (_tao_retval_info);
+          _tao_safe_retval = _tao_retval_info;
           
-          _tao_ri.reply_status (_invoke_status);
+          ri.reply_status (_invoke_status);
           _tao_vfr.receive_reply (
-            &_tao_ri
+            &ri
             ACE_ENV_ARG_PARAMETER
           );
           ACE_TRY_CHECK;
@@ -18435,15 +18762,15 @@
       }
     ACE_CATCHANY
       {
-        _tao_ri.exception (&ACE_ANY_EXCEPTION);
+        ri.exception (&ACE_ANY_EXCEPTION);
         _tao_vfr.receive_exception (
-          &_tao_ri
+          &ri
           ACE_ENV_ARG_PARAMETER
         );
         ACE_TRY_CHECK;
         
         PortableInterceptor::ReplyStatus _tao_status =
-          _tao_ri.reply_status (ACE_ENV_SINGLE_ARG_PARAMETER);
+          ri.reply_status (ACE_ENV_SINGLE_ARG_PARAMETER);
         ACE_TRY_CHECK;
         
         if (_tao_status == PortableInterceptor::SYSTEM_EXCEPTION
@@ -18451,11 +18778,11 @@
           ACE_RE_THROW;
       }
     ACE_ENDTRY;
-        ACE_CHECK_RETURN (_tao_retval._retn ());
+    ACE_CHECK_RETURN (0);
 
     PortableInterceptor::ReplyStatus _tao_status =
-      _tao_ri.reply_status (ACE_ENV_SINGLE_ARG_PARAMETER);
-        ACE_CHECK_RETURN (_tao_retval._retn ());
+      ri.reply_status (ACE_ENV_SINGLE_ARG_PARAMETER);
+    ACE_CHECK_RETURN (0);
 
     if (_tao_status == PortableInterceptor::LOCATION_FORWARD
         || _tao_status == PortableInterceptor::TRANSPORT_RETRY)
@@ -18465,16 +18792,16 @@
     
     break;
   }
-return _tao_retval._retn ();
+return _tao_safe_retval._retn ();
 }
 
-::IR::FactoryDef_ptr IR::_TAO_HomeDef_Remote_Proxy_Impl::create_factory (
+IR::FactoryDef_ptr IR::_TAO_HomeDef_Remote_Proxy_Impl::create_factory (
     CORBA_Object *_collocated_tao_target_,
     const char * id,
     const char * name,
     const char * version,
-    const CORBA::ParDescriptionSeq & params,
-    const CORBA::ExceptionDefSeq & exceptions
+    const CORBA_ParDescriptionSeq & params,
+    const CORBA_ExceptionDefSeq & exceptions
     ACE_ENV_ARG_DECL
   )
   ACE_THROW_SPEC ((
@@ -18482,20 +18809,20 @@
   ))
 {
   
-  IR::FactoryDef_var _tao_retval (IR::FactoryDef::_nil ());
-
+  IR::FactoryDef_ptr _tao_retval = IR::FactoryDef::_nil ();
+  IR::FactoryDef_var _tao_safe_retval (_tao_retval);
 
   
   TAO_Stub *istub = _collocated_tao_target_->_stubobj ();
   if (istub == 0)
-    ACE_THROW_RETURN (CORBA::INTERNAL (),_tao_retval._retn ());
+    ACE_THROW_RETURN (CORBA::INTERNAL (), 0);
 
   
   TAO_GIOP_Twoway_Invocation _tao_call (
       istub,
       "create_factory",
       14,
-      5,
+      1,
       istub->orb_core ()
     );
   
@@ -18515,29 +18842,30 @@
       _invoke_status = TAO_INVOKE_EXCEPTION;
       
 #if TAO_HAS_INTERCEPTORS == 1
-      TAO_ClientRequestInfo_IR_HomeDef_create_factory _tao_ri (
+      TAO_ClientRequestInfo_IR_HomeDef_create_factory ri (
         &_tao_call,
         _collocated_tao_target_,
         id,
         name,
         version,
         params,
-        exceptions ACE_ENV_ARG_PARAMETER
+        exceptions
+        ACE_ENV_ARG_PARAMETER
       );
-            ACE_CHECK_RETURN (_tao_retval._retn ());
+      ACE_CHECK_RETURN (0);
 
 #endif /* TAO_HAS_INTERCEPTORS */
       
       
       CORBA::Short _tao_response_flag = TAO_TWOWAY_RESPONSE_FLAG;
-      TAO_INTERCEPTOR (_tao_ri.response_expected (1));
+      TAO_INTERCEPTOR (ri.response_expected (1));
       
 #if TAO_HAS_INTERCEPTORS == 1
       
       ACE_TRY
         {
           _tao_vfr.send_request (
-            &_tao_ri
+            &ri
             ACE_ENV_ARG_PARAMETER
           );
           ACE_TRY_CHECK;
@@ -18551,13 +18879,13 @@
 #endif /* TAO_HAS_INTERCEPTORS */
           
           _tao_call.start (ACE_ENV_SINGLE_ARG_PARAMETER);
-                    TAO_INTERCEPTOR_CHECK_RETURN (_tao_retval._retn ());
+          TAO_INTERCEPTOR_CHECK_RETURN (0);
 
           _tao_call.prepare_header (
               ACE_static_cast (CORBA::Octet, _tao_response_flag)
               ACE_ENV_ARG_PARAMETER
             );
-                    TAO_INTERCEPTOR_CHECK_RETURN (_tao_retval._retn ());
+          TAO_INTERCEPTOR_CHECK_RETURN (0);
 
           TAO_OutputCDR &_tao_out = _tao_call.out_stream ();
           if (!(
@@ -18574,7 +18902,7 @@
             
           _invoke_status =
             _tao_call.invoke (0, 0 ACE_ENV_ARG_PARAMETER);
-                    TAO_INTERCEPTOR_CHECK_RETURN (_tao_retval._retn ());
+          TAO_INTERCEPTOR_CHECK_RETURN (0);
 
           if (_invoke_status == TAO_INVOKE_EXCEPTION)
             {
@@ -18587,9 +18915,9 @@
           else if (_invoke_status == TAO_INVOKE_RESTART)
             {
               TAO_INTERCEPTOR (
-                _tao_ri.reply_status (_invoke_status);
+                ri.reply_status (_invoke_status);
                 _tao_vfr.receive_other (
-                  &_tao_ri
+                  &ri
                   ACE_ENV_ARG_PARAMETER
                 );
                 ACE_TRY_CHECK;
@@ -18600,7 +18928,7 @@
           
           TAO_InputCDR &_tao_in = _tao_call.inp_stream ();
           if (!(
-                            (_tao_in >> _tao_retval.inout ())
+                            (_tao_in >> _tao_safe_retval.inout ())
               ))
             {
               TAO_INTERCEPTOR_THROW_RETURN (
@@ -18611,13 +18939,13 @@
             }
           
 #if TAO_HAS_INTERCEPTORS == 1
-          ::IR::FactoryDef_ptr _tao_retval_info = _tao_retval._retn ();
-          _tao_ri.result (_tao_retval_info);
-          _tao_retval = _tao_retval_info;
+          IR::FactoryDef_ptr _tao_retval_info = _tao_safe_retval._retn ();
+          ri.result (_tao_retval_info);
+          _tao_safe_retval = _tao_retval_info;
           
-          _tao_ri.reply_status (_invoke_status);
+          ri.reply_status (_invoke_status);
           _tao_vfr.receive_reply (
-            &_tao_ri
+            &ri
             ACE_ENV_ARG_PARAMETER
           );
           ACE_TRY_CHECK;
@@ -18625,15 +18953,15 @@
       }
     ACE_CATCHANY
       {
-        _tao_ri.exception (&ACE_ANY_EXCEPTION);
+        ri.exception (&ACE_ANY_EXCEPTION);
         _tao_vfr.receive_exception (
-          &_tao_ri
+          &ri
           ACE_ENV_ARG_PARAMETER
         );
         ACE_TRY_CHECK;
         
         PortableInterceptor::ReplyStatus _tao_status =
-          _tao_ri.reply_status (ACE_ENV_SINGLE_ARG_PARAMETER);
+          ri.reply_status (ACE_ENV_SINGLE_ARG_PARAMETER);
         ACE_TRY_CHECK;
         
         if (_tao_status == PortableInterceptor::SYSTEM_EXCEPTION
@@ -18641,11 +18969,11 @@
           ACE_RE_THROW;
       }
     ACE_ENDTRY;
-        ACE_CHECK_RETURN (_tao_retval._retn ());
+    ACE_CHECK_RETURN (0);
 
     PortableInterceptor::ReplyStatus _tao_status =
-      _tao_ri.reply_status (ACE_ENV_SINGLE_ARG_PARAMETER);
-        ACE_CHECK_RETURN (_tao_retval._retn ());
+      ri.reply_status (ACE_ENV_SINGLE_ARG_PARAMETER);
+    ACE_CHECK_RETURN (0);
 
     if (_tao_status == PortableInterceptor::LOCATION_FORWARD
         || _tao_status == PortableInterceptor::TRANSPORT_RETRY)
@@ -18655,16 +18983,16 @@
     
     break;
   }
-return _tao_retval._retn ();
+return _tao_safe_retval._retn ();
 }
 
-::IR::FinderDef_ptr IR::_TAO_HomeDef_Remote_Proxy_Impl::create_finder (
+IR::FinderDef_ptr IR::_TAO_HomeDef_Remote_Proxy_Impl::create_finder (
     CORBA_Object *_collocated_tao_target_,
     const char * id,
     const char * name,
     const char * version,
-    const CORBA::ParDescriptionSeq & params,
-    const CORBA::ExceptionDefSeq & exceptions
+    const CORBA_ParDescriptionSeq & params,
+    const CORBA_ExceptionDefSeq & exceptions
     ACE_ENV_ARG_DECL
   )
   ACE_THROW_SPEC ((
@@ -18672,20 +19000,20 @@
   ))
 {
   
-  IR::FinderDef_var _tao_retval (IR::FinderDef::_nil ());
-
+  IR::FinderDef_ptr _tao_retval = IR::FinderDef::_nil ();
+  IR::FinderDef_var _tao_safe_retval (_tao_retval);
 
   
   TAO_Stub *istub = _collocated_tao_target_->_stubobj ();
   if (istub == 0)
-    ACE_THROW_RETURN (CORBA::INTERNAL (),_tao_retval._retn ());
+    ACE_THROW_RETURN (CORBA::INTERNAL (), 0);
 
   
   TAO_GIOP_Twoway_Invocation _tao_call (
       istub,
       "create_finder",
       13,
-      5,
+      1,
       istub->orb_core ()
     );
   
@@ -18705,29 +19033,30 @@
       _invoke_status = TAO_INVOKE_EXCEPTION;
       
 #if TAO_HAS_INTERCEPTORS == 1
-      TAO_ClientRequestInfo_IR_HomeDef_create_finder _tao_ri (
+      TAO_ClientRequestInfo_IR_HomeDef_create_finder ri (
         &_tao_call,
         _collocated_tao_target_,
         id,
         name,
         version,
         params,
-        exceptions ACE_ENV_ARG_PARAMETER
+        exceptions
+        ACE_ENV_ARG_PARAMETER
       );
-            ACE_CHECK_RETURN (_tao_retval._retn ());
+      ACE_CHECK_RETURN (0);
 
 #endif /* TAO_HAS_INTERCEPTORS */
       
       
       CORBA::Short _tao_response_flag = TAO_TWOWAY_RESPONSE_FLAG;
-      TAO_INTERCEPTOR (_tao_ri.response_expected (1));
+      TAO_INTERCEPTOR (ri.response_expected (1));
       
 #if TAO_HAS_INTERCEPTORS == 1
       
       ACE_TRY
         {
           _tao_vfr.send_request (
-            &_tao_ri
+            &ri
             ACE_ENV_ARG_PARAMETER
           );
           ACE_TRY_CHECK;
@@ -18741,13 +19070,13 @@
 #endif /* TAO_HAS_INTERCEPTORS */
           
           _tao_call.start (ACE_ENV_SINGLE_ARG_PARAMETER);
-                    TAO_INTERCEPTOR_CHECK_RETURN (_tao_retval._retn ());
+          TAO_INTERCEPTOR_CHECK_RETURN (0);
 
           _tao_call.prepare_header (
               ACE_static_cast (CORBA::Octet, _tao_response_flag)
               ACE_ENV_ARG_PARAMETER
             );
-                    TAO_INTERCEPTOR_CHECK_RETURN (_tao_retval._retn ());
+          TAO_INTERCEPTOR_CHECK_RETURN (0);
 
           TAO_OutputCDR &_tao_out = _tao_call.out_stream ();
           if (!(
@@ -18764,7 +19093,7 @@
             
           _invoke_status =
             _tao_call.invoke (0, 0 ACE_ENV_ARG_PARAMETER);
-                    TAO_INTERCEPTOR_CHECK_RETURN (_tao_retval._retn ());
+          TAO_INTERCEPTOR_CHECK_RETURN (0);
 
           if (_invoke_status == TAO_INVOKE_EXCEPTION)
             {
@@ -18777,9 +19106,9 @@
           else if (_invoke_status == TAO_INVOKE_RESTART)
             {
               TAO_INTERCEPTOR (
-                _tao_ri.reply_status (_invoke_status);
+                ri.reply_status (_invoke_status);
                 _tao_vfr.receive_other (
-                  &_tao_ri
+                  &ri
                   ACE_ENV_ARG_PARAMETER
                 );
                 ACE_TRY_CHECK;
@@ -18790,7 +19119,7 @@
           
           TAO_InputCDR &_tao_in = _tao_call.inp_stream ();
           if (!(
-                            (_tao_in >> _tao_retval.inout ())
+                            (_tao_in >> _tao_safe_retval.inout ())
               ))
             {
               TAO_INTERCEPTOR_THROW_RETURN (
@@ -18801,13 +19130,13 @@
             }
           
 #if TAO_HAS_INTERCEPTORS == 1
-          ::IR::FinderDef_ptr _tao_retval_info = _tao_retval._retn ();
-          _tao_ri.result (_tao_retval_info);
-          _tao_retval = _tao_retval_info;
+          IR::FinderDef_ptr _tao_retval_info = _tao_safe_retval._retn ();
+          ri.result (_tao_retval_info);
+          _tao_safe_retval = _tao_retval_info;
           
-          _tao_ri.reply_status (_invoke_status);
+          ri.reply_status (_invoke_status);
           _tao_vfr.receive_reply (
-            &_tao_ri
+            &ri
             ACE_ENV_ARG_PARAMETER
           );
           ACE_TRY_CHECK;
@@ -18815,15 +19144,15 @@
       }
     ACE_CATCHANY
       {
-        _tao_ri.exception (&ACE_ANY_EXCEPTION);
+        ri.exception (&ACE_ANY_EXCEPTION);
         _tao_vfr.receive_exception (
-          &_tao_ri
+          &ri
           ACE_ENV_ARG_PARAMETER
         );
         ACE_TRY_CHECK;
         
         PortableInterceptor::ReplyStatus _tao_status =
-          _tao_ri.reply_status (ACE_ENV_SINGLE_ARG_PARAMETER);
+          ri.reply_status (ACE_ENV_SINGLE_ARG_PARAMETER);
         ACE_TRY_CHECK;
         
         if (_tao_status == PortableInterceptor::SYSTEM_EXCEPTION
@@ -18831,11 +19160,11 @@
           ACE_RE_THROW;
       }
     ACE_ENDTRY;
-        ACE_CHECK_RETURN (_tao_retval._retn ());
+    ACE_CHECK_RETURN (0);
 
     PortableInterceptor::ReplyStatus _tao_status =
-      _tao_ri.reply_status (ACE_ENV_SINGLE_ARG_PARAMETER);
-        ACE_CHECK_RETURN (_tao_retval._retn ());
+      ri.reply_status (ACE_ENV_SINGLE_ARG_PARAMETER);
+    ACE_CHECK_RETURN (0);
 
     if (_tao_status == PortableInterceptor::LOCATION_FORWARD
         || _tao_status == PortableInterceptor::TRANSPORT_RETRY)
@@ -18845,7 +19174,7 @@
     
     break;
   }
-return _tao_retval._retn ();
+return _tao_safe_retval._retn ();
 }
 
 
@@ -18901,14 +19230,13 @@
 ///////////////////////////////////////////////////////////////////////
 
 
-// TAO_IDL - Generated from 
-// be/be_visitor_interface/interface_cs.cpp:198
-
+// default constructor
 IR::HomeDef::HomeDef (int collocated)
 {
   this->IR_HomeDef_setup_collocation (collocated);
 }
 
+// destructor
 IR::HomeDef::~HomeDef (void)
 {}
 
@@ -18948,8 +19276,7 @@
   return HomeDef::_unchecked_narrow (obj ACE_ENV_ARG_PARAMETER);
 }
 
-IR::HomeDef_ptr 
-IR::HomeDef::_unchecked_narrow (
+IR::HomeDef_ptr IR::HomeDef::_unchecked_narrow (
     CORBA::Object_ptr obj
     ACE_ENV_ARG_DECL_NOT_USED
   )
@@ -18966,8 +19293,7 @@
       if (
           !CORBA::is_nil (stub->servant_orb_var ().ptr ()) &&
           stub->servant_orb_var ()->orb_core ()->optimize_collocation_objects () &&
-          obj->_is_collocated () &&
-          IR__TAO_HomeDef_Proxy_Broker_Factory_function_pointer != 0
+          obj->_is_collocated () &&IR__TAO_HomeDef_Proxy_Broker_Factory_function_pointer != 0
         )
         {
           ACE_NEW_RETURN (
@@ -18975,25 +19301,12 @@
               ::IR::HomeDef (
                   stub,
                   1,
-                  obj->_servant ()
-                ),
-              HomeDef::_nil ()
-            );
-        }
+            obj->_servant ()),
       
-      if (CORBA::is_nil (default_proxy))
-        {
-          ACE_NEW_RETURN (
-              default_proxy,
-              ::IR::HomeDef (
-                  stub,
-                  0,
-                  obj->_servant ()
-                ),
-              HomeDef::_nil ()
-            );
+          HomeDef::_nil ());
         }
-      
+      if (CORBA::is_nil (default_proxy))
+        ACE_NEW_RETURN (default_proxy, ::IR::HomeDef (stub, 0, obj->_servant ()), HomeDef::_nil ());
       return default_proxy;
     }
   else 
@@ -19044,61 +19357,61 @@
     retv = ACE_reinterpret_cast (void*, this);
   else if (type == ACE_reinterpret_cast
     (ptr_arith_t,
-      &::CORBA::InterfaceDef::_tao_class_id))
+      &CORBA_InterfaceDef::_tao_class_id))
     retv = ACE_reinterpret_cast
       (
         void *,
         ACE_static_cast
           (
-            CORBA::InterfaceDef_ptr,
+            CORBA_InterfaceDef_ptr,
             this
           )
       );
   else if (type == ACE_reinterpret_cast
     (ptr_arith_t,
-      &::CORBA::Container::_tao_class_id))
+      &CORBA_Container::_tao_class_id))
     retv = ACE_reinterpret_cast
       (
         void *,
         ACE_static_cast
           (
-            CORBA::Container_ptr,
+            CORBA_Container_ptr,
             this
           )
       );
   else if (type == ACE_reinterpret_cast
     (ptr_arith_t,
-      &::CORBA::Contained::_tao_class_id))
+      &CORBA_Contained::_tao_class_id))
     retv = ACE_reinterpret_cast
       (
         void *,
         ACE_static_cast
           (
-            CORBA::Contained_ptr,
+            CORBA_Contained_ptr,
             this
           )
       );
   else if (type == ACE_reinterpret_cast
     (ptr_arith_t,
-      &::CORBA::IDLType::_tao_class_id))
+      &CORBA_IDLType::_tao_class_id))
     retv = ACE_reinterpret_cast
       (
         void *,
         ACE_static_cast
           (
-            CORBA::IDLType_ptr,
+            CORBA_IDLType_ptr,
             this
           )
       );
   else if (type == ACE_reinterpret_cast
     (ptr_arith_t,
-      &::CORBA::IRObject::_tao_class_id))
+      &CORBA_IRObject::_tao_class_id))
     retv = ACE_reinterpret_cast
       (
         void *,
         ACE_static_cast
           (
-            CORBA::IRObject_ptr,
+            CORBA_IRObject_ptr,
             this
           )
       );
@@ -19116,8 +19429,7 @@
   return "IDL:omg.org/IR/HomeDef:1.0";
 }
 
-::IR::HomeDef_ptr IR::HomeDef::base_home (
-    
+IR::HomeDef_ptr IR::HomeDef::base_home (
     ACE_ENV_SINGLE_ARG_DECL
   )
   ACE_THROW_SPEC ((
@@ -19129,12 +19441,12 @@
   ACE_CHECK_RETURN (0);
   
   return proxy.base_home (
-      this ACE_ENV_ARG_PARAMETER
+      this
+      ACE_ENV_ARG_PARAMETER
     );
 }
 
-::IR::ComponentDef_ptr IR::HomeDef::managed_component (
-    
+IR::ComponentDef_ptr IR::HomeDef::managed_component (
     ACE_ENV_SINGLE_ARG_DECL
   )
   ACE_THROW_SPEC ((
@@ -19146,12 +19458,12 @@
   ACE_CHECK_RETURN (0);
   
   return proxy.managed_component (
-      this ACE_ENV_ARG_PARAMETER
+      this
+      ACE_ENV_ARG_PARAMETER
     );
 }
 
-::IR::PrimaryKeyDef_ptr IR::HomeDef::primary_key (
-    
+IR::PrimaryKeyDef_ptr IR::HomeDef::primary_key (
     ACE_ENV_SINGLE_ARG_DECL
   )
   ACE_THROW_SPEC ((
@@ -19163,12 +19475,12 @@
   ACE_CHECK_RETURN (0);
   
   return proxy.primary_key (
-      this ACE_ENV_ARG_PARAMETER
+      this
+      ACE_ENV_ARG_PARAMETER
     );
 }
 
-::IR::FactoryDefSeq * IR::HomeDef::factories (
-    
+IR::FactoryDefSeq * IR::HomeDef::factories (
     ACE_ENV_SINGLE_ARG_DECL
   )
   ACE_THROW_SPEC ((
@@ -19180,12 +19492,12 @@
   ACE_CHECK_RETURN (0);
   
   return proxy.factories (
-      this ACE_ENV_ARG_PARAMETER
+      this
+      ACE_ENV_ARG_PARAMETER
     );
 }
 
-::IR::FinderDefSeq * IR::HomeDef::finders (
-    
+IR::FinderDefSeq * IR::HomeDef::finders (
     ACE_ENV_SINGLE_ARG_DECL
   )
   ACE_THROW_SPEC ((
@@ -19197,12 +19509,12 @@
   ACE_CHECK_RETURN (0);
   
   return proxy.finders (
-      this ACE_ENV_ARG_PARAMETER
+      this
+      ACE_ENV_ARG_PARAMETER
     );
 }
 
 CORBA::Boolean IR::HomeDef::is_basic (
-    
     ACE_ENV_SINGLE_ARG_DECL
   )
   ACE_THROW_SPEC ((
@@ -19214,15 +19526,16 @@
   ACE_CHECK_RETURN (0);
   
   return proxy.is_basic (
-      this ACE_ENV_ARG_PARAMETER
+      this
+      ACE_ENV_ARG_PARAMETER
     );
 }
 
-::IR::PrimaryKeyDef_ptr IR::HomeDef::create_primary_key (
+IR::PrimaryKeyDef_ptr IR::HomeDef::create_primary_key (
     const char * id,
     const char * name,
     const char * version,
-    CORBA::ValueDef_ptr primary_key
+    CORBA_ValueDef_ptr primary_key
     ACE_ENV_ARG_DECL
   )
   ACE_THROW_SPEC ((
@@ -19238,16 +19551,17 @@
       id,
       name,
       version,
-      primary_key ACE_ENV_ARG_PARAMETER
+      primary_key
+      ACE_ENV_ARG_PARAMETER
     );
 }
 
-::IR::FactoryDef_ptr IR::HomeDef::create_factory (
+IR::FactoryDef_ptr IR::HomeDef::create_factory (
     const char * id,
     const char * name,
     const char * version,
-    const CORBA::ParDescriptionSeq & params,
-    const CORBA::ExceptionDefSeq & exceptions
+    const CORBA_ParDescriptionSeq & params,
+    const CORBA_ExceptionDefSeq & exceptions
     ACE_ENV_ARG_DECL
   )
   ACE_THROW_SPEC ((
@@ -19264,16 +19578,17 @@
       name,
       version,
       params,
-      exceptions ACE_ENV_ARG_PARAMETER
+      exceptions
+      ACE_ENV_ARG_PARAMETER
     );
 }
 
-::IR::FinderDef_ptr IR::HomeDef::create_finder (
+IR::FinderDef_ptr IR::HomeDef::create_finder (
     const char * id,
     const char * name,
     const char * version,
-    const CORBA::ParDescriptionSeq & params,
-    const CORBA::ExceptionDefSeq & exceptions
+    const CORBA_ParDescriptionSeq & params,
+    const CORBA_ExceptionDefSeq & exceptions
     ACE_ENV_ARG_DECL
   )
   ACE_THROW_SPEC ((
@@ -19290,7 +19605,8 @@
       name,
       version,
       params,
-      exceptions ACE_ENV_ARG_PARAMETER
+      exceptions
+      ACE_ENV_ARG_PARAMETER
     );
 }
 
@@ -19301,62 +19617,365 @@
   ACE_NTOHL (0x49444c3a), 
   ACE_NTOHL (0x6f6d672e), 
   ACE_NTOHL (0x6f72672f), 
-  ACE_NTOHL (0x49522f48), 
-  ACE_NTOHL (0x6f6d6544), 
-  ACE_NTOHL (0x65663a31), 
-  ACE_NTOHL (0x2e300000),  // repository ID = IDL:omg.org/IR/HomeDef:1.0
-  8,
-  ACE_NTOHL (0x486f6d65), 
-  ACE_NTOHL (0x44656600),  // name = HomeDef
-};
+  ACE_NTOHL (0x49522f48),
+  ACE_NTOHL (0x6f6d6544),
+  ACE_NTOHL (0x65663a31),
+  ACE_NTOHL (0x2e300000),  // repository ID = IDL:omg.org/IR/HomeDef:1.0
+  8,
+  ACE_NTOHL (0x486f6d65),
+  ACE_NTOHL (0x44656600),  // name = HomeDef
+};
+
+static CORBA::TypeCode _tc_TAO_tc_IR_HomeDef (
+    CORBA::tk_objref,
+    sizeof (_oc_IR_HomeDef),
+    (char *) &_oc_IR_HomeDef,
+    0,
+    sizeof (IR::HomeDef)
+  );
+
+TAO_NAMESPACE_TYPE (CORBA::TypeCode_ptr)
+TAO_NAMESPACE_BEGIN (IR)
+TAO_NAMESPACE_DEFINE (CORBA::TypeCode_ptr, _tc_HomeDef, &_tc_TAO_tc_IR_HomeDef)
+TAO_NAMESPACE_END
+
+static const CORBA::Long _oc_IR_HomeDescription[] =
+{
+  TAO_ENCAP_BYTE_ORDER, // byte order
+  35,
+  ACE_NTOHL (0x49444c3a),
+  ACE_NTOHL (0x6f6d672e),
+  ACE_NTOHL (0x6f72672f),
+  ACE_NTOHL (0x49522f48),
+  ACE_NTOHL (0x6f6d6544),
+  ACE_NTOHL (0x65736372),
+  ACE_NTOHL (0x69707469),
+  ACE_NTOHL (0x6f6e3a31),
+  ACE_NTOHL (0x2e300000),  // repository ID = IDL:omg.org/IR/HomeDescription:1.0
+  16,
+  ACE_NTOHL (0x486f6d65),
+  ACE_NTOHL (0x44657363),
+  ACE_NTOHL (0x72697074),
+  ACE_NTOHL (0x696f6e00),  // name = HomeDescription
+  12, // member count
+  5,
+  ACE_NTOHL (0x6e616d65),
+  ACE_NTOHL (0x0),  // name = name
+  CORBA::tk_alias, // typecode kind for typedefs
+  64, // encapsulation length
+    TAO_ENCAP_BYTE_ORDER, // byte order
+    30,
+    ACE_NTOHL (0x49444c3a),
+    ACE_NTOHL (0x6f6d672e),
+    ACE_NTOHL (0x6f72672f),
+    ACE_NTOHL (0x49522f49),
+    ACE_NTOHL (0x64656e74),
+    ACE_NTOHL (0x69666965),
+    ACE_NTOHL (0x723a312e),
+    ACE_NTOHL (0x30000000),  // repository ID = IDL:omg.org/IR/Identifier:1.0
+    11,
+    ACE_NTOHL (0x4964656e),
+    ACE_NTOHL (0x74696669),
+    ACE_NTOHL (0x65720000),  // name = Identifier
+    CORBA::tk_string,
+    0U, // string length
+
+  3,
+  ACE_NTOHL (0x69640000),  // name = id
+  CORBA::tk_alias, // typecode kind for typedefs
+  68, // encapsulation length
+    TAO_ENCAP_BYTE_ORDER, // byte order
+    32,
+    ACE_NTOHL (0x49444c3a),
+    ACE_NTOHL (0x6f6d672e),
+    ACE_NTOHL (0x6f72672f),
+    ACE_NTOHL (0x49522f52),
+    ACE_NTOHL (0x65706f73),
+    ACE_NTOHL (0x69746f72),
+    ACE_NTOHL (0x7949643a),
+    ACE_NTOHL (0x312e3000),  // repository ID = IDL:omg.org/IR/RepositoryId:1.0
+    13,
+    ACE_NTOHL (0x5265706f),
+    ACE_NTOHL (0x7369746f),
+    ACE_NTOHL (0x72794964),
+    ACE_NTOHL (0x0),  // name = RepositoryId
+    CORBA::tk_string,
+    0U, // string length
+
+  11,
+  ACE_NTOHL (0x64656669),
+  ACE_NTOHL (0x6e65645f),
+  ACE_NTOHL (0x696e0000),  // name = defined_in
+  CORBA::tk_alias, // typecode kind for typedefs
+  68, // encapsulation length
+    TAO_ENCAP_BYTE_ORDER, // byte order
+    32,
+    ACE_NTOHL (0x49444c3a),
+    ACE_NTOHL (0x6f6d672e),
+    ACE_NTOHL (0x6f72672f),
+    ACE_NTOHL (0x49522f52),
+    ACE_NTOHL (0x65706f73),
+    ACE_NTOHL (0x69746f72),
+    ACE_NTOHL (0x7949643a),
+    ACE_NTOHL (0x312e3000),  // repository ID = IDL:omg.org/IR/RepositoryId:1.0
+    13,
+    ACE_NTOHL (0x5265706f),
+    ACE_NTOHL (0x7369746f),
+    ACE_NTOHL (0x72794964),
+    ACE_NTOHL (0x0),  // name = RepositoryId
+    CORBA::tk_string,
+    0U, // string length
+
+  8,
+  ACE_NTOHL (0x76657273),
+  ACE_NTOHL (0x696f6e00),  // name = version
+  CORBA::tk_alias, // typecode kind for typedefs
+  64, // encapsulation length
+    TAO_ENCAP_BYTE_ORDER, // byte order
+    31,
+    ACE_NTOHL (0x49444c3a),
+    ACE_NTOHL (0x6f6d672e),
+    ACE_NTOHL (0x6f72672f),
+    ACE_NTOHL (0x49522f56),
+    ACE_NTOHL (0x65727369),
+    ACE_NTOHL (0x6f6e5370),
+    ACE_NTOHL (0x65633a31),
+    ACE_NTOHL (0x2e300000),  // repository ID = IDL:omg.org/IR/VersionSpec:1.0
+    12,
+    ACE_NTOHL (0x56657273),
+    ACE_NTOHL (0x696f6e53),
+    ACE_NTOHL (0x70656300),  // name = VersionSpec
+    CORBA::tk_string,
+    0U, // string length
+
+  10,
+  ACE_NTOHL (0x62617365),
+  ACE_NTOHL (0x5f686f6d),
+  ACE_NTOHL (0x65000000),  // name = base_home
+  CORBA::tk_alias, // typecode kind for typedefs
+  68, // encapsulation length
+    TAO_ENCAP_BYTE_ORDER, // byte order
+    32,
+    ACE_NTOHL (0x49444c3a),
+    ACE_NTOHL (0x6f6d672e),
+    ACE_NTOHL (0x6f72672f),
+    ACE_NTOHL (0x49522f52),
+    ACE_NTOHL (0x65706f73),
+    ACE_NTOHL (0x69746f72),
+    ACE_NTOHL (0x7949643a),
+    ACE_NTOHL (0x312e3000),  // repository ID = IDL:omg.org/IR/RepositoryId:1.0
+    13,
+    ACE_NTOHL (0x5265706f),
+    ACE_NTOHL (0x7369746f),
+    ACE_NTOHL (0x72794964),
+    ACE_NTOHL (0x0),  // name = RepositoryId
+    CORBA::tk_string,
+    0U, // string length
+
+  18,
+  ACE_NTOHL (0x6d616e61),
+  ACE_NTOHL (0x6765645f),
+  ACE_NTOHL (0x636f6d70),
+  ACE_NTOHL (0x6f6e656e),
+  ACE_NTOHL (0x74000000),  // name = managed_component
+  CORBA::tk_alias, // typecode kind for typedefs
+  68, // encapsulation length
+    TAO_ENCAP_BYTE_ORDER, // byte order
+    32,
+    ACE_NTOHL (0x49444c3a),
+    ACE_NTOHL (0x6f6d672e),
+    ACE_NTOHL (0x6f72672f),
+    ACE_NTOHL (0x49522f52),
+    ACE_NTOHL (0x65706f73),
+    ACE_NTOHL (0x69746f72),
+    ACE_NTOHL (0x7949643a),
+    ACE_NTOHL (0x312e3000),  // repository ID = IDL:omg.org/IR/RepositoryId:1.0
+    13,
+    ACE_NTOHL (0x5265706f),
+    ACE_NTOHL (0x7369746f),
+    ACE_NTOHL (0x72794964),
+    ACE_NTOHL (0x0),  // name = RepositoryId
+    CORBA::tk_string,
+    0U, // string length
+
+  16,
+  ACE_NTOHL (0x7072696d),
+  ACE_NTOHL (0x6172795f),
+  ACE_NTOHL (0x6b65795f),
+  ACE_NTOHL (0x64656600),  // name = primary_key_def
+  CORBA::tk_objref, // typecode kind
+  64, // encapsulation length
+    TAO_ENCAP_BYTE_ORDER, // byte order
+    33,
+    ACE_NTOHL (0x49444c3a),
+    ACE_NTOHL (0x6f6d672e),
+    ACE_NTOHL (0x6f72672f),
+    ACE_NTOHL (0x49522f50),
+    ACE_NTOHL (0x72696d61),
+    ACE_NTOHL (0x72794b65),
+    ACE_NTOHL (0x79446566),
+    ACE_NTOHL (0x3a312e30),
+    ACE_NTOHL (0x0),  // repository ID = IDL:omg.org/IR/PrimaryKeyDef:1.0
+    14,
+    ACE_NTOHL (0x5072696d),
+    ACE_NTOHL (0x6172794b),
+    ACE_NTOHL (0x65794465),
+    ACE_NTOHL (0x66000000),  // name = PrimaryKeyDef
+
+  10,
+  ACE_NTOHL (0x66616374),
+  ACE_NTOHL (0x6f726965),
+  ACE_NTOHL (0x73000000),  // name = factories
+  CORBA::tk_alias, // typecode kind for typedefs
+  144, // encapsulation length
+    TAO_ENCAP_BYTE_ORDER, // byte order
+    33,
+    ACE_NTOHL (0x49444c3a),
+    ACE_NTOHL (0x6f6d672e),
+    ACE_NTOHL (0x6f72672f),
+    ACE_NTOHL (0x49522f46),
+    ACE_NTOHL (0x6163746f),
+    ACE_NTOHL (0x72794465),
+    ACE_NTOHL (0x66536571),
+    ACE_NTOHL (0x3a312e30),
+    ACE_NTOHL (0x0),  // repository ID = IDL:omg.org/IR/FactoryDefSeq:1.0
+    14,
+    ACE_NTOHL (0x46616374),
+    ACE_NTOHL (0x6f727944),
+    ACE_NTOHL (0x65665365),
+    ACE_NTOHL (0x71000000),  // name = FactoryDefSeq
+    CORBA::tk_sequence, // typecode kind
+    72, // encapsulation length
+      TAO_ENCAP_BYTE_ORDER, // byte order
+      CORBA::tk_objref, // typecode kind
+      56, // encapsulation length
+        TAO_ENCAP_BYTE_ORDER, // byte order
+        30,
+        ACE_NTOHL (0x49444c3a),
+        ACE_NTOHL (0x6f6d672e),
+        ACE_NTOHL (0x6f72672f),
+        ACE_NTOHL (0x49522f46),
+        ACE_NTOHL (0x6163746f),
+        ACE_NTOHL (0x72794465),
+        ACE_NTOHL (0x663a312e),
+        ACE_NTOHL (0x30000000),  // repository ID = IDL:omg.org/IR/FactoryDef:1.0
+        11,
+        ACE_NTOHL (0x46616374),
+        ACE_NTOHL (0x6f727944),
+        ACE_NTOHL (0x65660000),  // name = FactoryDef
+
+      0U,
+
+
+  8,
+  ACE_NTOHL (0x66696e64),
+  ACE_NTOHL (0x65727300),  // name = finders
+  CORBA::tk_alias, // typecode kind for typedefs
+  140, // encapsulation length
+  TAO_ENCAP_BYTE_ORDER, // byte order
+    32,
+  ACE_NTOHL (0x49444c3a),
+  ACE_NTOHL (0x6f6d672e),
+  ACE_NTOHL (0x6f72672f),
+    ACE_NTOHL (0x49522f46),
+    ACE_NTOHL (0x696e6465),
+    ACE_NTOHL (0x72446566),
+    ACE_NTOHL (0x5365713a),
+    ACE_NTOHL (0x312e3000),  // repository ID = IDL:omg.org/IR/FinderDefSeq:1.0
+    13,
+    ACE_NTOHL (0x46696e64),
+    ACE_NTOHL (0x65724465),
+    ACE_NTOHL (0x66536571),
+    ACE_NTOHL (0x0),  // name = FinderDefSeq
+    CORBA::tk_sequence, // typecode kind
+    72, // encapsulation length
+      TAO_ENCAP_BYTE_ORDER, // byte order
+      CORBA::tk_objref, // typecode kind
+      56, // encapsulation length
+        TAO_ENCAP_BYTE_ORDER, // byte order
+        29,
+        ACE_NTOHL (0x49444c3a),
+        ACE_NTOHL (0x6f6d672e),
+        ACE_NTOHL (0x6f72672f),
+        ACE_NTOHL (0x49522f46),
+        ACE_NTOHL (0x696e6465),
+        ACE_NTOHL (0x72446566),
+        ACE_NTOHL (0x3a312e30),
+        ACE_NTOHL (0x0),  // repository ID = IDL:omg.org/IR/FinderDef:1.0
+        10,
+        ACE_NTOHL (0x46696e64),
+        ACE_NTOHL (0x65724465),
+        ACE_NTOHL (0x66000000),  // name = FinderDef
 
-static CORBA::TypeCode _tc_TAO_tc_IR_HomeDef (
-    CORBA::tk_objref,
-    sizeof (_oc_IR_HomeDef),
-    (char *) &_oc_IR_HomeDef,
-    0,
-    sizeof (IR::HomeDef)
-  );
+      0U,
 
-TAO_NAMESPACE_TYPE (CORBA::TypeCode_ptr)
-TAO_NAMESPACE_BEGIN (IR)
-TAO_NAMESPACE_DEFINE (::CORBA::TypeCode_ptr, _tc_HomeDef, &_tc_TAO_tc_IR_HomeDef)
-TAO_NAMESPACE_END
 
-static const CORBA::Long _oc_IR_HomeDescription[] =
-{
+  11,
+  ACE_NTOHL (0x6f706572),
+  ACE_NTOHL (0x6174696f),
+  ACE_NTOHL (0x6e730000),  // name = operations
+  CORBA::tk_alias, // typecode kind for typedefs
+  2036, // encapsulation length
   TAO_ENCAP_BYTE_ORDER, // byte order
-  35,
+    39,
   ACE_NTOHL (0x49444c3a), 
   ACE_NTOHL (0x6f6d672e), 
   ACE_NTOHL (0x6f72672f), 
-  ACE_NTOHL (0x49522f48), 
-  ACE_NTOHL (0x6f6d6544), 
+    ACE_NTOHL (0x434f5242),
+    ACE_NTOHL (0x412f4f70),
+    ACE_NTOHL (0x44657363),
+    ACE_NTOHL (0x72697074),
+    ACE_NTOHL (0x696f6e53),
+    ACE_NTOHL (0x65713a31),
+    ACE_NTOHL (0x2e300000),  // repository ID = IDL:omg.org/CORBA/OpDescriptionSeq:1.0
+    17,
+    ACE_NTOHL (0x4f704465),
+    ACE_NTOHL (0x73637269),
+    ACE_NTOHL (0x7074696f),
+    ACE_NTOHL (0x6e536571),
+    ACE_NTOHL (0x0),  // name = OpDescriptionSeq
+    CORBA::tk_sequence, // typecode kind
+    1956, // encapsulation length
+      TAO_ENCAP_BYTE_ORDER, // byte order
+      CORBA::tk_struct, // typecode kind
+      1940, // encapsulation length
+        TAO_ENCAP_BYTE_ORDER, // byte order
+        43,
+        ACE_NTOHL (0x49444c3a),
+        ACE_NTOHL (0x6f6d672e),
+        ACE_NTOHL (0x6f72672f),
+        ACE_NTOHL (0x434f5242),
+        ACE_NTOHL (0x412f4f70),
+        ACE_NTOHL (0x65726174),
+        ACE_NTOHL (0x696f6e44),
   ACE_NTOHL (0x65736372), 
   ACE_NTOHL (0x69707469), 
   ACE_NTOHL (0x6f6e3a31), 
-  ACE_NTOHL (0x2e300000),  // repository ID = IDL:omg.org/IR/HomeDescription:1.0
-  16,
-  ACE_NTOHL (0x486f6d65), 
-  ACE_NTOHL (0x44657363), 
-  ACE_NTOHL (0x72697074), 
-  ACE_NTOHL (0x696f6e00),  // name = HomeDescription
-  12, // member count
+        ACE_NTOHL (0x2e300000),  // repository ID = IDL:omg.org/CORBA/OperationDescription:1.0
+        21,
+        ACE_NTOHL (0x4f706572),
+        ACE_NTOHL (0x6174696f),
+        ACE_NTOHL (0x6e446573),
+        ACE_NTOHL (0x63726970),
+        ACE_NTOHL (0x74696f6e),
+        ACE_NTOHL (0x0),  // name = OperationDescription
+        9, // member count
   5,
   ACE_NTOHL (0x6e616d65), 
   ACE_NTOHL (0x0),  // name = name
   CORBA::tk_alias, // typecode kind for typedefs
-  64, // encapsulation length
+        68, // encapsulation length
     TAO_ENCAP_BYTE_ORDER, // byte order
-    30,
+          33,
     ACE_NTOHL (0x49444c3a), 
     ACE_NTOHL (0x6f6d672e), 
     ACE_NTOHL (0x6f72672f), 
-    ACE_NTOHL (0x49522f49), 
-    ACE_NTOHL (0x64656e74), 
-    ACE_NTOHL (0x69666965), 
-    ACE_NTOHL (0x723a312e), 
-    ACE_NTOHL (0x30000000),  // repository ID = IDL:omg.org/IR/Identifier:1.0
+          ACE_NTOHL (0x434f5242),
+          ACE_NTOHL (0x412f4964),
+          ACE_NTOHL (0x656e7469),
+          ACE_NTOHL (0x66696572),
+          ACE_NTOHL (0x3a312e30),
+          ACE_NTOHL (0x0),  // repository ID = IDL:omg.org/CORBA/Identifier:1.0
     11,
     ACE_NTOHL (0x4964656e), 
     ACE_NTOHL (0x74696669), 
@@ -19367,17 +19986,43 @@
   3,
   ACE_NTOHL (0x69640000),  // name = id
   CORBA::tk_alias, // typecode kind for typedefs
-  68, // encapsulation length
+        72, // encapsulation length
     TAO_ENCAP_BYTE_ORDER, // byte order
-    32,
+          35,
     ACE_NTOHL (0x49444c3a), 
     ACE_NTOHL (0x6f6d672e), 
     ACE_NTOHL (0x6f72672f), 
-    ACE_NTOHL (0x49522f52), 
-    ACE_NTOHL (0x65706f73), 
-    ACE_NTOHL (0x69746f72), 
-    ACE_NTOHL (0x7949643a), 
-    ACE_NTOHL (0x312e3000),  // repository ID = IDL:omg.org/IR/RepositoryId:1.0
+          ACE_NTOHL (0x434f5242),
+          ACE_NTOHL (0x412f5265),
+          ACE_NTOHL (0x706f7369),
+          ACE_NTOHL (0x746f7279),
+          ACE_NTOHL (0x49643a31),
+          ACE_NTOHL (0x2e300000),  // repository ID = IDL:omg.org/CORBA/RepositoryId:1.0
+    13,
+    ACE_NTOHL (0x5265706f),
+    ACE_NTOHL (0x7369746f),
+    ACE_NTOHL (0x72794964),
+    ACE_NTOHL (0x0),  // name = RepositoryId
+    CORBA::tk_string,
+    0U, // string length
+
+  11,
+  ACE_NTOHL (0x64656669),
+  ACE_NTOHL (0x6e65645f),
+  ACE_NTOHL (0x696e0000),  // name = defined_in
+  CORBA::tk_alias, // typecode kind for typedefs
+        72, // encapsulation length
+    TAO_ENCAP_BYTE_ORDER, // byte order
+          35,
+    ACE_NTOHL (0x49444c3a),
+    ACE_NTOHL (0x6f6d672e),
+    ACE_NTOHL (0x6f72672f),
+          ACE_NTOHL (0x434f5242),
+          ACE_NTOHL (0x412f5265),
+          ACE_NTOHL (0x706f7369),
+          ACE_NTOHL (0x746f7279),
+          ACE_NTOHL (0x49643a31),
+          ACE_NTOHL (0x2e300000),  // repository ID = IDL:omg.org/CORBA/RepositoryId:1.0
     13,
     ACE_NTOHL (0x5265706f), 
     ACE_NTOHL (0x7369746f), 
@@ -19386,210 +20031,321 @@
     CORBA::tk_string, 
     0U, // string length
 
+  8,
+  ACE_NTOHL (0x76657273),
+  ACE_NTOHL (0x696f6e00),  // name = version
+  CORBA::tk_alias, // typecode kind for typedefs
+        68, // encapsulation length
+    TAO_ENCAP_BYTE_ORDER, // byte order
+          34,
+    ACE_NTOHL (0x49444c3a),
+    ACE_NTOHL (0x6f6d672e),
+    ACE_NTOHL (0x6f72672f),
+          ACE_NTOHL (0x434f5242),
+          ACE_NTOHL (0x412f5665),
+          ACE_NTOHL (0x7273696f),
+          ACE_NTOHL (0x6e537065),
+          ACE_NTOHL (0x633a312e),
+          ACE_NTOHL (0x30000000),  // repository ID = IDL:omg.org/CORBA/VersionSpec:1.0
+    12,
+    ACE_NTOHL (0x56657273),
+    ACE_NTOHL (0x696f6e53),
+    ACE_NTOHL (0x70656300),  // name = VersionSpec
+    CORBA::tk_string,
+    0U, // string length
+
+        7,
+        ACE_NTOHL (0x72657375),
+        ACE_NTOHL (0x6c740000),  // name = result
+        CORBA::tk_TypeCode,
+
+        5,
+        ACE_NTOHL (0x6d6f6465),
+        ACE_NTOHL (0x0),  // name = mode
+        CORBA::tk_enum, // typecode kind
+        100, // encapsulation length
+          TAO_ENCAP_BYTE_ORDER, // byte order
+          36,
+          ACE_NTOHL (0x49444c3a),
+          ACE_NTOHL (0x6f6d672e),
+          ACE_NTOHL (0x6f72672f),
+          ACE_NTOHL (0x434f5242),
+          ACE_NTOHL (0x412f4f70),
+          ACE_NTOHL (0x65726174),
+          ACE_NTOHL (0x696f6e4d),
+          ACE_NTOHL (0x6f64653a),
+          ACE_NTOHL (0x312e3000),  // repository ID = IDL:omg.org/CORBA/OperationMode:1.0
+          14,
+          ACE_NTOHL (0x4f706572),
+          ACE_NTOHL (0x6174696f),
+          ACE_NTOHL (0x6e4d6f64),
+          ACE_NTOHL (0x65000000),  // name = OperationMode
+          2, // member count
+  10,
+          ACE_NTOHL (0x4f505f4e),
+          ACE_NTOHL (0x4f524d41),
+          ACE_NTOHL (0x4c000000),  // name = OP_NORMAL
+          10,
+          ACE_NTOHL (0x4f505f4f),
+          ACE_NTOHL (0x4e455741),
+          ACE_NTOHL (0x59000000),  // name = OP_ONEWAY
+
+        9,
+        ACE_NTOHL (0x636f6e74),
+        ACE_NTOHL (0x65787473),
+        ACE_NTOHL (0x0),  // name = contexts
+        CORBA::tk_alias, // typecode kind for typedefs
+        236, // encapsulation length
+          TAO_ENCAP_BYTE_ORDER, // byte order
+          35,
+          ACE_NTOHL (0x49444c3a),
+          ACE_NTOHL (0x6f6d672e),
+          ACE_NTOHL (0x6f72672f),
+          ACE_NTOHL (0x434f5242),
+          ACE_NTOHL (0x412f436f),
+          ACE_NTOHL (0x6e746578),
+          ACE_NTOHL (0x74496453),
+          ACE_NTOHL (0x65713a31),
+          ACE_NTOHL (0x2e300000),  // repository ID = IDL:omg.org/CORBA/ContextIdSeq:1.0
+          13,
+          ACE_NTOHL (0x436f6e74),
+          ACE_NTOHL (0x65787449),
+          ACE_NTOHL (0x64536571),
+          ACE_NTOHL (0x0),  // name = ContextIdSeq
+          CORBA::tk_sequence, // typecode kind
+          164, // encapsulation length
+            TAO_ENCAP_BYTE_ORDER, // byte order
+            CORBA::tk_alias, // typecode kind for typedefs
+            148, // encapsulation length
+              TAO_ENCAP_BYTE_ORDER, // byte order
+              40,
+              ACE_NTOHL (0x49444c3a),
+              ACE_NTOHL (0x6f6d672e),
+              ACE_NTOHL (0x6f72672f),
+              ACE_NTOHL (0x434f5242),
+              ACE_NTOHL (0x412f436f),
+              ACE_NTOHL (0x6e746578),
+              ACE_NTOHL (0x74496465),
+              ACE_NTOHL (0x6e746966),
+              ACE_NTOHL (0x6965723a),
+              ACE_NTOHL (0x312e3000),  // repository ID = IDL:omg.org/CORBA/ContextIdentifier:1.0
+              18,
+              ACE_NTOHL (0x436f6e74),
+              ACE_NTOHL (0x65787449),
+              ACE_NTOHL (0x64656e74),
+              ACE_NTOHL (0x69666965),
+              ACE_NTOHL (0x72000000),  // name = ContextIdentifier
+  CORBA::tk_alias, // typecode kind for typedefs
+  68, // encapsulation length
+    TAO_ENCAP_BYTE_ORDER, // byte order
+                33,
+    ACE_NTOHL (0x49444c3a),
+    ACE_NTOHL (0x6f6d672e),
+    ACE_NTOHL (0x6f72672f),
+                ACE_NTOHL (0x434f5242),
+                ACE_NTOHL (0x412f4964),
+                ACE_NTOHL (0x656e7469),
+                ACE_NTOHL (0x66696572),
+                ACE_NTOHL (0x3a312e30),
+                ACE_NTOHL (0x0),  // repository ID = IDL:omg.org/CORBA/Identifier:1.0
+                11,
+                ACE_NTOHL (0x4964656e),
+                ACE_NTOHL (0x74696669),
+                ACE_NTOHL (0x65720000),  // name = Identifier
+    CORBA::tk_string,
+    0U, // string length
+
+
+            0U,
+
+
   11,
-  ACE_NTOHL (0x64656669), 
-  ACE_NTOHL (0x6e65645f), 
-  ACE_NTOHL (0x696e0000),  // name = defined_in
-  0xffffffff, // indirection
-  0xffffffa0, // negative offset (-96)
-  8,
-  ACE_NTOHL (0x76657273), 
-  ACE_NTOHL (0x696f6e00),  // name = version
+        ACE_NTOHL (0x70617261),
+        ACE_NTOHL (0x6d657465),
+        ACE_NTOHL (0x72730000),  // name = parameters
   CORBA::tk_alias, // typecode kind for typedefs
-  64, // encapsulation length
+        496, // encapsulation length
     TAO_ENCAP_BYTE_ORDER, // byte order
-    31,
+          40,
     ACE_NTOHL (0x49444c3a), 
     ACE_NTOHL (0x6f6d672e), 
     ACE_NTOHL (0x6f72672f), 
-    ACE_NTOHL (0x49522f56), 
-    ACE_NTOHL (0x65727369), 
-    ACE_NTOHL (0x6f6e5370), 
-    ACE_NTOHL (0x65633a31), 
-    ACE_NTOHL (0x2e300000),  // repository ID = IDL:omg.org/IR/VersionSpec:1.0
-    12,
-    ACE_NTOHL (0x56657273), 
-    ACE_NTOHL (0x696f6e53), 
-    ACE_NTOHL (0x70656300),  // name = VersionSpec
-    CORBA::tk_string, 
-    0U, // string length
-
-  10,
-  ACE_NTOHL (0x62617365), 
-  ACE_NTOHL (0x5f686f6d), 
-  ACE_NTOHL (0x65000000),  // name = base_home
-  0xffffffff, // indirection
-  0xffffff34, // negative offset (-204)
+          ACE_NTOHL (0x434f5242),
+          ACE_NTOHL (0x412f5061),
+          ACE_NTOHL (0x72446573),
+          ACE_NTOHL (0x63726970),
+          ACE_NTOHL (0x74696f6e),
+          ACE_NTOHL (0x5365713a),
+          ACE_NTOHL (0x312e3000),  // repository ID = IDL:omg.org/CORBA/ParDescriptionSeq:1.0
   18,
-  ACE_NTOHL (0x6d616e61), 
-  ACE_NTOHL (0x6765645f), 
-  ACE_NTOHL (0x636f6d70), 
-  ACE_NTOHL (0x6f6e656e), 
-  ACE_NTOHL (0x74000000),  // name = managed_component
-  0xffffffff, // indirection
-  0xffffff14, // negative offset (-236)
-  16,
-  ACE_NTOHL (0x7072696d), 
-  ACE_NTOHL (0x6172795f), 
-  ACE_NTOHL (0x6b65795f), 
-  ACE_NTOHL (0x64656600),  // name = primary_key_def
-  CORBA::tk_objref, // typecode kind
-  64, // encapsulation length
+          ACE_NTOHL (0x50617244),
+          ACE_NTOHL (0x65736372),
+          ACE_NTOHL (0x69707469),
+          ACE_NTOHL (0x6f6e5365),
+          ACE_NTOHL (0x71000000),  // name = ParDescriptionSeq
+          CORBA::tk_sequence, // typecode kind
+          416, // encapsulation length
     TAO_ENCAP_BYTE_ORDER, // byte order
-    33,
+            CORBA::tk_struct, // typecode kind
+            400, // encapsulation length
+              TAO_ENCAP_BYTE_ORDER, // byte order
+              43,
     ACE_NTOHL (0x49444c3a), 
     ACE_NTOHL (0x6f6d672e), 
     ACE_NTOHL (0x6f72672f), 
-    ACE_NTOHL (0x49522f50), 
-    ACE_NTOHL (0x72696d61), 
-    ACE_NTOHL (0x72794b65), 
-    ACE_NTOHL (0x79446566), 
-    ACE_NTOHL (0x3a312e30), 
-    ACE_NTOHL (0x0),  // repository ID = IDL:omg.org/IR/PrimaryKeyDef:1.0
-    14,
-    ACE_NTOHL (0x5072696d), 
-    ACE_NTOHL (0x6172794b), 
-    ACE_NTOHL (0x65794465), 
-    ACE_NTOHL (0x66000000),  // name = PrimaryKeyDef
-
-  10,
-  ACE_NTOHL (0x66616374), 
-  ACE_NTOHL (0x6f726965), 
-  ACE_NTOHL (0x73000000),  // name = factories
+              ACE_NTOHL (0x434f5242),
+              ACE_NTOHL (0x412f5061),
+              ACE_NTOHL (0x72616d65),
+              ACE_NTOHL (0x74657244),
+              ACE_NTOHL (0x65736372),
+              ACE_NTOHL (0x69707469),
+              ACE_NTOHL (0x6f6e3a31),
+              ACE_NTOHL (0x2e300000),  // repository ID = IDL:omg.org/CORBA/ParameterDescription:1.0
+              21,
+              ACE_NTOHL (0x50617261),
+              ACE_NTOHL (0x6d657465),
+              ACE_NTOHL (0x72446573),
+              ACE_NTOHL (0x63726970),
+              ACE_NTOHL (0x74696f6e),
+              ACE_NTOHL (0x0),  // name = ParameterDescription
+              4, // member count
+              5,
+              ACE_NTOHL (0x6e616d65),
+              ACE_NTOHL (0x0),  // name = name
   CORBA::tk_alias, // typecode kind for typedefs
-  144, // encapsulation length
+              68, // encapsulation length
     TAO_ENCAP_BYTE_ORDER, // byte order
     33,
     ACE_NTOHL (0x49444c3a), 
     ACE_NTOHL (0x6f6d672e), 
     ACE_NTOHL (0x6f72672f), 
-    ACE_NTOHL (0x49522f46), 
-    ACE_NTOHL (0x6163746f), 
-    ACE_NTOHL (0x72794465), 
-    ACE_NTOHL (0x66536571), 
+                ACE_NTOHL (0x434f5242),
+                ACE_NTOHL (0x412f4964),
+                ACE_NTOHL (0x656e7469),
+                ACE_NTOHL (0x66696572),
     ACE_NTOHL (0x3a312e30), 
-    ACE_NTOHL (0x0),  // repository ID = IDL:omg.org/IR/FactoryDefSeq:1.0
-    14,
-    ACE_NTOHL (0x46616374), 
-    ACE_NTOHL (0x6f727944), 
-    ACE_NTOHL (0x65665365), 
-    ACE_NTOHL (0x71000000),  // name = FactoryDefSeq
-    CORBA::tk_sequence, // typecode kind
-    72, // encapsulation length
-      TAO_ENCAP_BYTE_ORDER, // byte order
-      CORBA::tk_objref, // typecode kind
-      56, // encapsulation length
-        TAO_ENCAP_BYTE_ORDER, // byte order
-        30,
-        ACE_NTOHL (0x49444c3a), 
-        ACE_NTOHL (0x6f6d672e), 
-        ACE_NTOHL (0x6f72672f), 
-        ACE_NTOHL (0x49522f46), 
-        ACE_NTOHL (0x6163746f), 
-        ACE_NTOHL (0x72794465), 
-        ACE_NTOHL (0x663a312e), 
-        ACE_NTOHL (0x30000000),  // repository ID = IDL:omg.org/IR/FactoryDef:1.0
+                ACE_NTOHL (0x0),  // repository ID = IDL:omg.org/CORBA/Identifier:1.0
         11,
-        ACE_NTOHL (0x46616374), 
-        ACE_NTOHL (0x6f727944), 
-        ACE_NTOHL (0x65660000),  // name = FactoryDef
-
-      0U,
+                ACE_NTOHL (0x4964656e),
+                ACE_NTOHL (0x74696669),
+                ACE_NTOHL (0x65720000),  // name = Identifier
+                CORBA::tk_string,
+                0U, // string length
 
+              5,
+              ACE_NTOHL (0x74797065),
+              ACE_NTOHL (0x0),  // name = type
+              CORBA::tk_TypeCode,
 
-  8,
-  ACE_NTOHL (0x66696e64), 
-  ACE_NTOHL (0x65727300),  // name = finders
-  CORBA::tk_alias, // typecode kind for typedefs
-  140, // encapsulation length
+              9,
+              ACE_NTOHL (0x74797065),
+              ACE_NTOHL (0x5f646566),
+              ACE_NTOHL (0x0),  // name = type_def
+              CORBA::tk_objref, // typecode kind
+              52, // encapsulation length
     TAO_ENCAP_BYTE_ORDER, // byte order
-    32,
+                30,
     ACE_NTOHL (0x49444c3a), 
     ACE_NTOHL (0x6f6d672e), 
     ACE_NTOHL (0x6f72672f), 
-    ACE_NTOHL (0x49522f46), 
-    ACE_NTOHL (0x696e6465), 
-    ACE_NTOHL (0x72446566), 
-    ACE_NTOHL (0x5365713a), 
-    ACE_NTOHL (0x312e3000),  // repository ID = IDL:omg.org/IR/FinderDefSeq:1.0
-    13,
-    ACE_NTOHL (0x46696e64), 
-    ACE_NTOHL (0x65724465), 
-    ACE_NTOHL (0x66536571), 
-    ACE_NTOHL (0x0),  // name = FinderDefSeq
-    CORBA::tk_sequence, // typecode kind
-    72, // encapsulation length
-      TAO_ENCAP_BYTE_ORDER, // byte order
-      CORBA::tk_objref, // typecode kind
-      56, // encapsulation length
+                ACE_NTOHL (0x434f5242),
+                ACE_NTOHL (0x412f4944),
+                ACE_NTOHL (0x4c547970),
+                ACE_NTOHL (0x653a312e),
+                ACE_NTOHL (0x30000000),  // repository ID = IDL:omg.org/CORBA/IDLType:1.0
+                8,
+                ACE_NTOHL (0x49444c54),
+                ACE_NTOHL (0x79706500),  // name = IDLType
+
+              5,
+              ACE_NTOHL (0x6d6f6465),
+              ACE_NTOHL (0x0),  // name = mode
+              CORBA::tk_enum, // typecode kind
+              116, // encapsulation length
         TAO_ENCAP_BYTE_ORDER, // byte order
-        29,
+                36,
         ACE_NTOHL (0x49444c3a), 
         ACE_NTOHL (0x6f6d672e), 
         ACE_NTOHL (0x6f72672f), 
-        ACE_NTOHL (0x49522f46), 
-        ACE_NTOHL (0x696e6465), 
-        ACE_NTOHL (0x72446566), 
-        ACE_NTOHL (0x3a312e30), 
-        ACE_NTOHL (0x0),  // repository ID = IDL:omg.org/IR/FinderDef:1.0
+                ACE_NTOHL (0x434f5242),
+                ACE_NTOHL (0x412f5061),
+                ACE_NTOHL (0x72616d65),
+                ACE_NTOHL (0x7465724d),
+                ACE_NTOHL (0x6f64653a),
+                ACE_NTOHL (0x312e3000),  // repository ID = IDL:omg.org/CORBA/ParameterMode:1.0
+                14,
+                ACE_NTOHL (0x50617261),
+                ACE_NTOHL (0x6d657465),
+                ACE_NTOHL (0x724d6f64),
+                ACE_NTOHL (0x65000000),  // name = ParameterMode
+                3, // member count
+                9,
+                ACE_NTOHL (0x50415241),
+                ACE_NTOHL (0x4d5f494e),
+                ACE_NTOHL (0x0),  // name = PARAM_IN
         10,
-        ACE_NTOHL (0x46696e64), 
-        ACE_NTOHL (0x65724465), 
-        ACE_NTOHL (0x66000000),  // name = FinderDef
+                ACE_NTOHL (0x50415241),
+                ACE_NTOHL (0x4d5f4f55),
+                ACE_NTOHL (0x54000000),  // name = PARAM_OUT
+                12,
+                ACE_NTOHL (0x50415241),
+                ACE_NTOHL (0x4d5f494e),
+                ACE_NTOHL (0x4f555400),  // name = PARAM_INOUT
+
 
       0U,
 
 
   11,
-  ACE_NTOHL (0x6f706572), 
-  ACE_NTOHL (0x6174696f), 
-  ACE_NTOHL (0x6e730000),  // name = operations
+        ACE_NTOHL (0x65786365),
+        ACE_NTOHL (0x7074696f),
+        ACE_NTOHL (0x6e730000),  // name = exceptions
   CORBA::tk_alias, // typecode kind for typedefs
-  1548, // encapsulation length
+        556, // encapsulation length
     TAO_ENCAP_BYTE_ORDER, // byte order
-    39,
+          40,
     ACE_NTOHL (0x49444c3a), 
     ACE_NTOHL (0x6f6d672e), 
     ACE_NTOHL (0x6f72672f), 
     ACE_NTOHL (0x434f5242), 
-    ACE_NTOHL (0x412f4f70), 
-    ACE_NTOHL (0x44657363), 
-    ACE_NTOHL (0x72697074), 
-    ACE_NTOHL (0x696f6e53), 
-    ACE_NTOHL (0x65713a31), 
-    ACE_NTOHL (0x2e300000),  // repository ID = IDL:omg.org/CORBA/OpDescriptionSeq:1.0
-    17,
-    ACE_NTOHL (0x4f704465), 
-    ACE_NTOHL (0x73637269), 
-    ACE_NTOHL (0x7074696f), 
-    ACE_NTOHL (0x6e536571), 
-    ACE_NTOHL (0x0),  // name = OpDescriptionSeq
+          ACE_NTOHL (0x412f4578),
+          ACE_NTOHL (0x63446573),
+          ACE_NTOHL (0x63726970),
+          ACE_NTOHL (0x74696f6e),
+          ACE_NTOHL (0x5365713a),
+          ACE_NTOHL (0x312e3000),  // repository ID = IDL:omg.org/CORBA/ExcDescriptionSeq:1.0
+          18,
+          ACE_NTOHL (0x45786344),
+          ACE_NTOHL (0x65736372),
+          ACE_NTOHL (0x69707469),
+          ACE_NTOHL (0x6f6e5365),
+          ACE_NTOHL (0x71000000),  // name = ExcDescriptionSeq
     CORBA::tk_sequence, // typecode kind
-    1468, // encapsulation length
+          476, // encapsulation length
       TAO_ENCAP_BYTE_ORDER, // byte order
       CORBA::tk_struct, // typecode kind
-      1452, // encapsulation length
+            460, // encapsulation length
         TAO_ENCAP_BYTE_ORDER, // byte order
         43,
         ACE_NTOHL (0x49444c3a), 
         ACE_NTOHL (0x6f6d672e), 
         ACE_NTOHL (0x6f72672f), 
         ACE_NTOHL (0x434f5242), 
-        ACE_NTOHL (0x412f4f70), 
-        ACE_NTOHL (0x65726174), 
+              ACE_NTOHL (0x412f4578),
+              ACE_NTOHL (0x63657074),
         ACE_NTOHL (0x696f6e44), 
         ACE_NTOHL (0x65736372), 
         ACE_NTOHL (0x69707469), 
         ACE_NTOHL (0x6f6e3a31), 
-        ACE_NTOHL (0x2e300000),  // repository ID = IDL:omg.org/CORBA/OperationDescription:1.0
+              ACE_NTOHL (0x2e300000),  // repository ID = IDL:omg.org/CORBA/ExceptionDescription:1.0
         21,
-        ACE_NTOHL (0x4f706572), 
-        ACE_NTOHL (0x6174696f), 
+              ACE_NTOHL (0x45786365),
+              ACE_NTOHL (0x7074696f),
         ACE_NTOHL (0x6e446573), 
         ACE_NTOHL (0x63726970), 
         ACE_NTOHL (0x74696f6e), 
-        ACE_NTOHL (0x0),  // name = OperationDescription
-        9, // member count
+              ACE_NTOHL (0x0),  // name = ExceptionDescription
+              5, // member count
         5,
         ACE_NTOHL (0x6e616d65), 
         ACE_NTOHL (0x0),  // name = name
@@ -19640,8 +20396,27 @@
         ACE_NTOHL (0x64656669), 
         ACE_NTOHL (0x6e65645f), 
         ACE_NTOHL (0x696e0000),  // name = defined_in
-        0xffffffff, // indirection
-        0xffffff9c, // negative offset (-100)
+              CORBA::tk_alias, // typecode kind for typedefs
+              72, // encapsulation length
+          TAO_ENCAP_BYTE_ORDER, // byte order
+                35,
+          ACE_NTOHL (0x49444c3a),
+          ACE_NTOHL (0x6f6d672e),
+          ACE_NTOHL (0x6f72672f),
+          ACE_NTOHL (0x434f5242),
+                ACE_NTOHL (0x412f5265),
+                ACE_NTOHL (0x706f7369),
+                ACE_NTOHL (0x746f7279),
+                ACE_NTOHL (0x49643a31),
+                ACE_NTOHL (0x2e300000),  // repository ID = IDL:omg.org/CORBA/RepositoryId:1.0
+                13,
+                ACE_NTOHL (0x5265706f),
+                ACE_NTOHL (0x7369746f),
+                ACE_NTOHL (0x72794964),
+                ACE_NTOHL (0x0),  // name = RepositoryId
+                CORBA::tk_string,
+                0U, // string length
+
         8,
         ACE_NTOHL (0x76657273), 
         ACE_NTOHL (0x696f6e00),  // name = version
@@ -19665,218 +20440,208 @@
           CORBA::tk_string, 
           0U, // string length
 
-        7,
-        ACE_NTOHL (0x72657375), 
-        ACE_NTOHL (0x6c740000),  // name = result
+              5,
+              ACE_NTOHL (0x74797065),
+              ACE_NTOHL (0x0),  // name = type
         CORBA::tk_TypeCode,
 
-        5,
-        ACE_NTOHL (0x6d6f6465), 
-        ACE_NTOHL (0x0),  // name = mode
-        CORBA::tk_enum, // typecode kind
-        100, // encapsulation length
-          TAO_ENCAP_BYTE_ORDER, // byte order
-          36,
-          ACE_NTOHL (0x49444c3a), 
-          ACE_NTOHL (0x6f6d672e), 
-          ACE_NTOHL (0x6f72672f), 
-          ACE_NTOHL (0x434f5242), 
-          ACE_NTOHL (0x412f4f70), 
-          ACE_NTOHL (0x65726174), 
-          ACE_NTOHL (0x696f6e4d), 
-          ACE_NTOHL (0x6f64653a), 
-          ACE_NTOHL (0x312e3000),  // repository ID = IDL:omg.org/CORBA/OperationMode:1.0
-          14,
-          ACE_NTOHL (0x4f706572), 
-          ACE_NTOHL (0x6174696f), 
-          ACE_NTOHL (0x6e4d6f64), 
-          ACE_NTOHL (0x65000000),  // name = OperationMode
-          2, // member count
-          10,
-          ACE_NTOHL (0x4f505f4e), 
-          ACE_NTOHL (0x4f524d41), 
-          ACE_NTOHL (0x4c000000),  // name = OP_NORMAL
-          10,
-          ACE_NTOHL (0x4f505f4f), 
-          ACE_NTOHL (0x4e455741), 
-          ACE_NTOHL (0x59000000),  // name = OP_ONEWAY
 
-        9,
-        ACE_NTOHL (0x636f6e74), 
-        ACE_NTOHL (0x65787473), 
-        ACE_NTOHL (0x0),  // name = contexts
-        CORBA::tk_alias, // typecode kind for typedefs
-        168, // encapsulation length
-          TAO_ENCAP_BYTE_ORDER, // byte order
-          35,
-          ACE_NTOHL (0x49444c3a), 
-          ACE_NTOHL (0x6f6d672e), 
-          ACE_NTOHL (0x6f72672f), 
-          ACE_NTOHL (0x434f5242), 
-          ACE_NTOHL (0x412f436f), 
-          ACE_NTOHL (0x6e746578), 
-          ACE_NTOHL (0x74496453), 
-          ACE_NTOHL (0x65713a31), 
-          ACE_NTOHL (0x2e300000),  // repository ID = IDL:omg.org/CORBA/ContextIdSeq:1.0
-          13,
-          ACE_NTOHL (0x436f6e74), 
-          ACE_NTOHL (0x65787449), 
-          ACE_NTOHL (0x64536571), 
-          ACE_NTOHL (0x0),  // name = ContextIdSeq
-          CORBA::tk_sequence, // typecode kind
-          96, // encapsulation length
-            TAO_ENCAP_BYTE_ORDER, // byte order
-            CORBA::tk_alias, // typecode kind for typedefs
-            80, // encapsulation length
-              TAO_ENCAP_BYTE_ORDER, // byte order
-              40,
-              ACE_NTOHL (0x49444c3a), 
-              ACE_NTOHL (0x6f6d672e), 
-              ACE_NTOHL (0x6f72672f), 
-              ACE_NTOHL (0x434f5242), 
-              ACE_NTOHL (0x412f436f), 
-              ACE_NTOHL (0x6e746578), 
-              ACE_NTOHL (0x74496465), 
-              ACE_NTOHL (0x6e746966), 
-              ACE_NTOHL (0x6965723a), 
-              ACE_NTOHL (0x312e3000),  // repository ID = IDL:omg.org/CORBA/ContextIdentifier:1.0
-              18,
-              ACE_NTOHL (0x436f6e74), 
-              ACE_NTOHL (0x65787449), 
-              ACE_NTOHL (0x64656e74), 
-              ACE_NTOHL (0x69666965), 
-              ACE_NTOHL (0x72000000),  // name = ContextIdentifier
-              0xffffffff, // indirection
-              0xfffffdac, // negative offset (-596)
+            0U,
+
+
 
             0U,
 
 
         11,
-        ACE_NTOHL (0x70617261), 
-        ACE_NTOHL (0x6d657465), 
-        ACE_NTOHL (0x72730000),  // name = parameters
+  ACE_NTOHL (0x61747472),
+  ACE_NTOHL (0x69627574),
+  ACE_NTOHL (0x65730000),  // name = attributes
         CORBA::tk_alias, // typecode kind for typedefs
-        428, // encapsulation length
+  1852, // encapsulation length
           TAO_ENCAP_BYTE_ORDER, // byte order
-          40,
+    41,
           ACE_NTOHL (0x49444c3a), 
           ACE_NTOHL (0x6f6d672e), 
           ACE_NTOHL (0x6f72672f), 
           ACE_NTOHL (0x434f5242), 
-          ACE_NTOHL (0x412f5061), 
-          ACE_NTOHL (0x72446573), 
-          ACE_NTOHL (0x63726970), 
-          ACE_NTOHL (0x74696f6e), 
-          ACE_NTOHL (0x5365713a), 
-          ACE_NTOHL (0x312e3000),  // repository ID = IDL:omg.org/CORBA/ParDescriptionSeq:1.0
-          18,
-          ACE_NTOHL (0x50617244), 
-          ACE_NTOHL (0x65736372), 
-          ACE_NTOHL (0x69707469), 
-          ACE_NTOHL (0x6f6e5365), 
-          ACE_NTOHL (0x71000000),  // name = ParDescriptionSeq
+    ACE_NTOHL (0x412f4174),
+    ACE_NTOHL (0x74724465),
+    ACE_NTOHL (0x73637269),
+    ACE_NTOHL (0x7074696f),
+    ACE_NTOHL (0x6e536571),
+    ACE_NTOHL (0x3a312e30),
+    ACE_NTOHL (0x0),  // repository ID = IDL:omg.org/CORBA/AttrDescriptionSeq:1.0
+    19,
+    ACE_NTOHL (0x41747472),
+    ACE_NTOHL (0x44657363),
+    ACE_NTOHL (0x72697074),
+    ACE_NTOHL (0x696f6e53),
+    ACE_NTOHL (0x65710000),  // name = AttrDescriptionSeq
           CORBA::tk_sequence, // typecode kind
-          348, // encapsulation length
+    1768, // encapsulation length
             TAO_ENCAP_BYTE_ORDER, // byte order
             CORBA::tk_struct, // typecode kind
-            332, // encapsulation length
+      1752, // encapsulation length
               TAO_ENCAP_BYTE_ORDER, // byte order
               43,
               ACE_NTOHL (0x49444c3a), 
               ACE_NTOHL (0x6f6d672e), 
               ACE_NTOHL (0x6f72672f), 
               ACE_NTOHL (0x434f5242), 
-              ACE_NTOHL (0x412f5061), 
-              ACE_NTOHL (0x72616d65), 
-              ACE_NTOHL (0x74657244), 
+        ACE_NTOHL (0x412f4174),
+        ACE_NTOHL (0x74726962),
+        ACE_NTOHL (0x75746544),
               ACE_NTOHL (0x65736372), 
               ACE_NTOHL (0x69707469), 
               ACE_NTOHL (0x6f6e3a31), 
-              ACE_NTOHL (0x2e300000),  // repository ID = IDL:omg.org/CORBA/ParameterDescription:1.0
+        ACE_NTOHL (0x2e300000),  // repository ID = IDL:omg.org/CORBA/AttributeDescription:1.0
               21,
-              ACE_NTOHL (0x50617261), 
-              ACE_NTOHL (0x6d657465), 
-              ACE_NTOHL (0x72446573), 
+        ACE_NTOHL (0x41747472),
+        ACE_NTOHL (0x69627574),
+        ACE_NTOHL (0x65446573),
               ACE_NTOHL (0x63726970), 
               ACE_NTOHL (0x74696f6e), 
-              ACE_NTOHL (0x0),  // name = ParameterDescription
-              4, // member count
+        ACE_NTOHL (0x0),  // name = AttributeDescription
+        8, // member count
               5,
               ACE_NTOHL (0x6e616d65), 
               ACE_NTOHL (0x0),  // name = name
-              0xffffffff, // indirection
-              0xfffffccc, // negative offset (-820)
-              5,
-              ACE_NTOHL (0x74797065), 
-              ACE_NTOHL (0x0),  // name = type
-              CORBA::tk_TypeCode,
+        CORBA::tk_alias, // typecode kind for typedefs
+        68, // encapsulation length
+          TAO_ENCAP_BYTE_ORDER, // byte order
+          33,
+          ACE_NTOHL (0x49444c3a),
+          ACE_NTOHL (0x6f6d672e),
+          ACE_NTOHL (0x6f72672f),
+          ACE_NTOHL (0x434f5242),
+          ACE_NTOHL (0x412f4964),
+          ACE_NTOHL (0x656e7469),
+          ACE_NTOHL (0x66696572),
+          ACE_NTOHL (0x3a312e30),
+          ACE_NTOHL (0x0),  // repository ID = IDL:omg.org/CORBA/Identifier:1.0
+          11,
+          ACE_NTOHL (0x4964656e),
+          ACE_NTOHL (0x74696669),
+          ACE_NTOHL (0x65720000),  // name = Identifier
+              CORBA::tk_string,
+              0U, // string length
 
-              9,
-              ACE_NTOHL (0x74797065), 
-              ACE_NTOHL (0x5f646566), 
-              ACE_NTOHL (0x0),  // name = type_def
-              CORBA::tk_objref, // typecode kind
-              52, // encapsulation length
+        3,
+        ACE_NTOHL (0x69640000),  // name = id
+        CORBA::tk_alias, // typecode kind for typedefs
+        72, // encapsulation length
                 TAO_ENCAP_BYTE_ORDER, // byte order
-                30,
+          35,
                 ACE_NTOHL (0x49444c3a), 
                 ACE_NTOHL (0x6f6d672e), 
                 ACE_NTOHL (0x6f72672f), 
                 ACE_NTOHL (0x434f5242), 
-                ACE_NTOHL (0x412f4944), 
-                ACE_NTOHL (0x4c547970), 
-                ACE_NTOHL (0x653a312e), 
-                ACE_NTOHL (0x30000000),  // repository ID = IDL:omg.org/CORBA/IDLType:1.0
+          ACE_NTOHL (0x412f5265),
+          ACE_NTOHL (0x706f7369),
+          ACE_NTOHL (0x746f7279),
+          ACE_NTOHL (0x49643a31),
+          ACE_NTOHL (0x2e300000),  // repository ID = IDL:omg.org/CORBA/RepositoryId:1.0
+          13,
+          ACE_NTOHL (0x5265706f),
+          ACE_NTOHL (0x7369746f),
+          ACE_NTOHL (0x72794964),
+          ACE_NTOHL (0x0),  // name = RepositoryId
+          CORBA::tk_string,
+          0U, // string length
+
+        11,
+        ACE_NTOHL (0x64656669),
+        ACE_NTOHL (0x6e65645f),
+        ACE_NTOHL (0x696e0000),  // name = defined_in
+        CORBA::tk_alias, // typecode kind for typedefs
+        72, // encapsulation length
+          TAO_ENCAP_BYTE_ORDER, // byte order
+          35,
+          ACE_NTOHL (0x49444c3a),
+          ACE_NTOHL (0x6f6d672e),
+          ACE_NTOHL (0x6f72672f),
+                ACE_NTOHL (0x434f5242),
+          ACE_NTOHL (0x412f5265),
+          ACE_NTOHL (0x706f7369),
+          ACE_NTOHL (0x746f7279),
+          ACE_NTOHL (0x49643a31),
+          ACE_NTOHL (0x2e300000),  // repository ID = IDL:omg.org/CORBA/RepositoryId:1.0
+          13,
+          ACE_NTOHL (0x5265706f),
+          ACE_NTOHL (0x7369746f),
+          ACE_NTOHL (0x72794964),
+          ACE_NTOHL (0x0),  // name = RepositoryId
+          CORBA::tk_string,
+          0U, // string length
+
                 8,
-                ACE_NTOHL (0x49444c54), 
-                ACE_NTOHL (0x79706500),  // name = IDLType
+        ACE_NTOHL (0x76657273),
+        ACE_NTOHL (0x696f6e00),  // name = version
+        CORBA::tk_alias, // typecode kind for typedefs
+        68, // encapsulation length
+                TAO_ENCAP_BYTE_ORDER, // byte order
+          34,
+                ACE_NTOHL (0x49444c3a),
+                ACE_NTOHL (0x6f6d672e),
+                ACE_NTOHL (0x6f72672f),
+                ACE_NTOHL (0x434f5242),
+          ACE_NTOHL (0x412f5665),
+          ACE_NTOHL (0x7273696f),
+          ACE_NTOHL (0x6e537065),
+          ACE_NTOHL (0x633a312e),
+          ACE_NTOHL (0x30000000),  // repository ID = IDL:omg.org/CORBA/VersionSpec:1.0
+                12,
+          ACE_NTOHL (0x56657273),
+          ACE_NTOHL (0x696f6e53),
+          ACE_NTOHL (0x70656300),  // name = VersionSpec
+          CORBA::tk_string,
+          0U, // string length
+
+        5,
+        ACE_NTOHL (0x74797065),
+        ACE_NTOHL (0x0),  // name = type
+        CORBA::tk_TypeCode,
 
               5,
               ACE_NTOHL (0x6d6f6465), 
               ACE_NTOHL (0x0),  // name = mode
               CORBA::tk_enum, // typecode kind
-              116, // encapsulation length
+        104, // encapsulation length
                 TAO_ENCAP_BYTE_ORDER, // byte order
                 36,
                 ACE_NTOHL (0x49444c3a), 
                 ACE_NTOHL (0x6f6d672e), 
                 ACE_NTOHL (0x6f72672f), 
                 ACE_NTOHL (0x434f5242), 
-                ACE_NTOHL (0x412f5061), 
-                ACE_NTOHL (0x72616d65), 
-                ACE_NTOHL (0x7465724d), 
+          ACE_NTOHL (0x412f4174),
+          ACE_NTOHL (0x74726962),
+          ACE_NTOHL (0x7574654d),
                 ACE_NTOHL (0x6f64653a), 
-                ACE_NTOHL (0x312e3000),  // repository ID = IDL:omg.org/CORBA/ParameterMode:1.0
+          ACE_NTOHL (0x312e3000),  // repository ID = IDL:omg.org/CORBA/AttributeMode:1.0
                 14,
-                ACE_NTOHL (0x50617261), 
-                ACE_NTOHL (0x6d657465), 
-                ACE_NTOHL (0x724d6f64), 
-                ACE_NTOHL (0x65000000),  // name = ParameterMode
-                3, // member count
-                9,
-                ACE_NTOHL (0x50415241), 
-                ACE_NTOHL (0x4d5f494e), 
-                ACE_NTOHL (0x0),  // name = PARAM_IN
-                10,
-                ACE_NTOHL (0x50415241), 
-                ACE_NTOHL (0x4d5f4f55), 
-                ACE_NTOHL (0x54000000),  // name = PARAM_OUT
+          ACE_NTOHL (0x41747472),
+          ACE_NTOHL (0x69627574),
+          ACE_NTOHL (0x654d6f64),
+          ACE_NTOHL (0x65000000),  // name = AttributeMode
+          2, // member count
                 12,
-                ACE_NTOHL (0x50415241), 
-                ACE_NTOHL (0x4d5f494e), 
-                ACE_NTOHL (0x4f555400),  // name = PARAM_INOUT
-
-
-            0U,
-
+          ACE_NTOHL (0x41545452),
+          ACE_NTOHL (0x5f4e4f52),
+          ACE_NTOHL (0x4d414c00),  // name = ATTR_NORMAL
+          14,
+          ACE_NTOHL (0x41545452),
+          ACE_NTOHL (0x5f524541),
+          ACE_NTOHL (0x444f4e4c),
+          ACE_NTOHL (0x59000000),  // name = ATTR_READONLY
 
-        11,
+        15,
+        ACE_NTOHL (0x6765745f),
         ACE_NTOHL (0x65786365), 
         ACE_NTOHL (0x7074696f), 
-        ACE_NTOHL (0x6e730000),  // name = exceptions
+        ACE_NTOHL (0x6e730000),  // name = get_exceptions
         CORBA::tk_alias, // typecode kind for typedefs
-        276, // encapsulation length
+        556, // encapsulation length
           TAO_ENCAP_BYTE_ORDER, // byte order
           40,
           ACE_NTOHL (0x49444c3a), 
@@ -19896,10 +20661,10 @@
           ACE_NTOHL (0x6f6e5365), 
           ACE_NTOHL (0x71000000),  // name = ExcDescriptionSeq
           CORBA::tk_sequence, // typecode kind
-          196, // encapsulation length
+          476, // encapsulation length
             TAO_ENCAP_BYTE_ORDER, // byte order
             CORBA::tk_struct, // typecode kind
-            180, // encapsulation length
+            460, // encapsulation length
               TAO_ENCAP_BYTE_ORDER, // byte order
               43,
               ACE_NTOHL (0x49444c3a), 
@@ -19924,23 +20689,97 @@
               5,
               ACE_NTOHL (0x6e616d65), 
               ACE_NTOHL (0x0),  // name = name
-              0xffffffff, // indirection
-              0xfffffb08, // negative offset (-1272)
+              CORBA::tk_alias, // typecode kind for typedefs
+              68, // encapsulation length
+                TAO_ENCAP_BYTE_ORDER, // byte order
+                33,
+                ACE_NTOHL (0x49444c3a),
+                ACE_NTOHL (0x6f6d672e),
+                ACE_NTOHL (0x6f72672f),
+                ACE_NTOHL (0x434f5242),
+                ACE_NTOHL (0x412f4964),
+                ACE_NTOHL (0x656e7469),
+                ACE_NTOHL (0x66696572),
+                ACE_NTOHL (0x3a312e30),
+                ACE_NTOHL (0x0),  // repository ID = IDL:omg.org/CORBA/Identifier:1.0
+                11,
+                ACE_NTOHL (0x4964656e),
+                ACE_NTOHL (0x74696669),
+                ACE_NTOHL (0x65720000),  // name = Identifier
+              CORBA::tk_string,
+              0U, // string length
+
               3,
               ACE_NTOHL (0x69640000),  // name = id
-              0xffffffff, // indirection
-              0xfffffb4c, // negative offset (-1204)
+              CORBA::tk_alias, // typecode kind for typedefs
+              72, // encapsulation length
+                TAO_ENCAP_BYTE_ORDER, // byte order
+                35,
+                ACE_NTOHL (0x49444c3a),
+                ACE_NTOHL (0x6f6d672e),
+                ACE_NTOHL (0x6f72672f),
+                ACE_NTOHL (0x434f5242),
+                ACE_NTOHL (0x412f5265),
+                ACE_NTOHL (0x706f7369),
+                ACE_NTOHL (0x746f7279),
+                ACE_NTOHL (0x49643a31),
+                ACE_NTOHL (0x2e300000),  // repository ID = IDL:omg.org/CORBA/RepositoryId:1.0
+                13,
+                ACE_NTOHL (0x5265706f),
+                ACE_NTOHL (0x7369746f),
+                ACE_NTOHL (0x72794964),
+                ACE_NTOHL (0x0),  // name = RepositoryId
+              CORBA::tk_string,
+              0U, // string length
+
               11,
               ACE_NTOHL (0x64656669), 
               ACE_NTOHL (0x6e65645f), 
               ACE_NTOHL (0x696e0000),  // name = defined_in
-              0xffffffff, // indirection
-              0xfffffb34, // negative offset (-1228)
+              CORBA::tk_alias, // typecode kind for typedefs
+              72, // encapsulation length
+                TAO_ENCAP_BYTE_ORDER, // byte order
+                35,
+                ACE_NTOHL (0x49444c3a),
+                ACE_NTOHL (0x6f6d672e),
+                ACE_NTOHL (0x6f72672f),
+                ACE_NTOHL (0x434f5242),
+                ACE_NTOHL (0x412f5265),
+                ACE_NTOHL (0x706f7369),
+                ACE_NTOHL (0x746f7279),
+                ACE_NTOHL (0x49643a31),
+                ACE_NTOHL (0x2e300000),  // repository ID = IDL:omg.org/CORBA/RepositoryId:1.0
+                13,
+                ACE_NTOHL (0x5265706f),
+                ACE_NTOHL (0x7369746f),
+                ACE_NTOHL (0x72794964),
+                ACE_NTOHL (0x0),  // name = RepositoryId
+              CORBA::tk_string,
+              0U, // string length
+
               8,
               ACE_NTOHL (0x76657273), 
               ACE_NTOHL (0x696f6e00),  // name = version
-              0xffffffff, // indirection
-              0xfffffb94, // negative offset (-1132)
+              CORBA::tk_alias, // typecode kind for typedefs
+              68, // encapsulation length
+                TAO_ENCAP_BYTE_ORDER, // byte order
+                34,
+                ACE_NTOHL (0x49444c3a),
+                ACE_NTOHL (0x6f6d672e),
+                ACE_NTOHL (0x6f72672f),
+                ACE_NTOHL (0x434f5242),
+                ACE_NTOHL (0x412f5665),
+                ACE_NTOHL (0x7273696f),
+                ACE_NTOHL (0x6e537065),
+                ACE_NTOHL (0x633a312e),
+                ACE_NTOHL (0x30000000),  // repository ID = IDL:omg.org/CORBA/VersionSpec:1.0
+                12,
+                ACE_NTOHL (0x56657273),
+                ACE_NTOHL (0x696f6e53),
+                ACE_NTOHL (0x70656300),  // name = VersionSpec
+              CORBA::tk_string,
+              0U, // string length
+
               5,
               ACE_NTOHL (0x74797065), 
               ACE_NTOHL (0x0),  // name = type
@@ -19950,117 +20789,159 @@
             0U,
 
 
-
-      0U,
-
-
-  11,
-  ACE_NTOHL (0x61747472), 
-  ACE_NTOHL (0x69627574), 
-  ACE_NTOHL (0x65730000),  // name = attributes
+        15,
+        ACE_NTOHL (0x7075745f),
+        ACE_NTOHL (0x65786365),
+        ACE_NTOHL (0x7074696f),
+        ACE_NTOHL (0x6e730000),  // name = put_exceptions
   CORBA::tk_alias, // typecode kind for typedefs
-  404, // encapsulation length
+        556, // encapsulation length
     TAO_ENCAP_BYTE_ORDER, // byte order
-    41,
+          40,
     ACE_NTOHL (0x49444c3a), 
     ACE_NTOHL (0x6f6d672e), 
     ACE_NTOHL (0x6f72672f), 
     ACE_NTOHL (0x434f5242), 
-    ACE_NTOHL (0x412f4174), 
-    ACE_NTOHL (0x74724465), 
-    ACE_NTOHL (0x73637269), 
-    ACE_NTOHL (0x7074696f), 
-    ACE_NTOHL (0x6e536571), 
-    ACE_NTOHL (0x3a312e30), 
-    ACE_NTOHL (0x0),  // repository ID = IDL:omg.org/CORBA/AttrDescriptionSeq:1.0
-    19,
-    ACE_NTOHL (0x41747472), 
-    ACE_NTOHL (0x44657363), 
-    ACE_NTOHL (0x72697074), 
-    ACE_NTOHL (0x696f6e53), 
-    ACE_NTOHL (0x65710000),  // name = AttrDescriptionSeq
+          ACE_NTOHL (0x412f4578),
+          ACE_NTOHL (0x63446573),
+          ACE_NTOHL (0x63726970),
+          ACE_NTOHL (0x74696f6e),
+          ACE_NTOHL (0x5365713a),
+          ACE_NTOHL (0x312e3000),  // repository ID = IDL:omg.org/CORBA/ExcDescriptionSeq:1.0
+          18,
+          ACE_NTOHL (0x45786344),
+          ACE_NTOHL (0x65736372),
+          ACE_NTOHL (0x69707469),
+          ACE_NTOHL (0x6f6e5365),
+          ACE_NTOHL (0x71000000),  // name = ExcDescriptionSeq
     CORBA::tk_sequence, // typecode kind
-    320, // encapsulation length
+          476, // encapsulation length
       TAO_ENCAP_BYTE_ORDER, // byte order
       CORBA::tk_struct, // typecode kind
-      304, // encapsulation length
+            460, // encapsulation length
         TAO_ENCAP_BYTE_ORDER, // byte order
         43,
         ACE_NTOHL (0x49444c3a), 
         ACE_NTOHL (0x6f6d672e), 
         ACE_NTOHL (0x6f72672f), 
         ACE_NTOHL (0x434f5242), 
-        ACE_NTOHL (0x412f4174), 
-        ACE_NTOHL (0x74726962), 
-        ACE_NTOHL (0x75746544), 
+              ACE_NTOHL (0x412f4578),
+              ACE_NTOHL (0x63657074),
+              ACE_NTOHL (0x696f6e44),
         ACE_NTOHL (0x65736372), 
         ACE_NTOHL (0x69707469), 
         ACE_NTOHL (0x6f6e3a31), 
-        ACE_NTOHL (0x2e300000),  // repository ID = IDL:omg.org/CORBA/AttributeDescription:1.0
+              ACE_NTOHL (0x2e300000),  // repository ID = IDL:omg.org/CORBA/ExceptionDescription:1.0
         21,
-        ACE_NTOHL (0x41747472), 
-        ACE_NTOHL (0x69627574), 
-        ACE_NTOHL (0x65446573), 
+              ACE_NTOHL (0x45786365),
+              ACE_NTOHL (0x7074696f),
+              ACE_NTOHL (0x6e446573),
         ACE_NTOHL (0x63726970), 
         ACE_NTOHL (0x74696f6e), 
-        ACE_NTOHL (0x0),  // name = AttributeDescription
-        6, // member count
+              ACE_NTOHL (0x0),  // name = ExceptionDescription
+              5, // member count
         5,
         ACE_NTOHL (0x6e616d65), 
         ACE_NTOHL (0x0),  // name = name
-        0xffffffff, // indirection
-        0xfffff9d4, // negative offset (-1580)
+              CORBA::tk_alias, // typecode kind for typedefs
+              68, // encapsulation length
+                TAO_ENCAP_BYTE_ORDER, // byte order
+                33,
+                ACE_NTOHL (0x49444c3a),
+                ACE_NTOHL (0x6f6d672e),
+                ACE_NTOHL (0x6f72672f),
+                ACE_NTOHL (0x434f5242),
+                ACE_NTOHL (0x412f4964),
+                ACE_NTOHL (0x656e7469),
+                ACE_NTOHL (0x66696572),
+                ACE_NTOHL (0x3a312e30),
+                ACE_NTOHL (0x0),  // repository ID = IDL:omg.org/CORBA/Identifier:1.0
+                11,
+                ACE_NTOHL (0x4964656e),
+                ACE_NTOHL (0x74696669),
+                ACE_NTOHL (0x65720000),  // name = Identifier
+        CORBA::tk_string,
+        0U, // string length
+
         3,
         ACE_NTOHL (0x69640000),  // name = id
-        0xffffffff, // indirection
-        0xfffffa18, // negative offset (-1512)
+              CORBA::tk_alias, // typecode kind for typedefs
+              72, // encapsulation length
+                TAO_ENCAP_BYTE_ORDER, // byte order
+                35,
+                ACE_NTOHL (0x49444c3a),
+                ACE_NTOHL (0x6f6d672e),
+                ACE_NTOHL (0x6f72672f),
+                ACE_NTOHL (0x434f5242),
+                ACE_NTOHL (0x412f5265),
+                ACE_NTOHL (0x706f7369),
+                ACE_NTOHL (0x746f7279),
+                ACE_NTOHL (0x49643a31),
+                ACE_NTOHL (0x2e300000),  // repository ID = IDL:omg.org/CORBA/RepositoryId:1.0
+                13,
+                ACE_NTOHL (0x5265706f),
+                ACE_NTOHL (0x7369746f),
+                ACE_NTOHL (0x72794964),
+                ACE_NTOHL (0x0),  // name = RepositoryId
+        CORBA::tk_string,
+        0U, // string length
+
         11,
         ACE_NTOHL (0x64656669), 
         ACE_NTOHL (0x6e65645f), 
         ACE_NTOHL (0x696e0000),  // name = defined_in
-        0xffffffff, // indirection
-        0xfffffa00, // negative offset (-1536)
+              CORBA::tk_alias, // typecode kind for typedefs
+              72, // encapsulation length
+                TAO_ENCAP_BYTE_ORDER, // byte order
+                35,
+                ACE_NTOHL (0x49444c3a),
+                ACE_NTOHL (0x6f6d672e),
+                ACE_NTOHL (0x6f72672f),
+                ACE_NTOHL (0x434f5242),
+                ACE_NTOHL (0x412f5265),
+                ACE_NTOHL (0x706f7369),
+                ACE_NTOHL (0x746f7279),
+                ACE_NTOHL (0x49643a31),
+                ACE_NTOHL (0x2e300000),  // repository ID = IDL:omg.org/CORBA/RepositoryId:1.0
+                13,
+                ACE_NTOHL (0x5265706f),
+                ACE_NTOHL (0x7369746f),
+                ACE_NTOHL (0x72794964),
+                ACE_NTOHL (0x0),  // name = RepositoryId
+        CORBA::tk_string,
+        0U, // string length
+
         8,
         ACE_NTOHL (0x76657273), 
         ACE_NTOHL (0x696f6e00),  // name = version
-        0xffffffff, // indirection
-        0xfffffa60, // negative offset (-1440)
-        5,
-        ACE_NTOHL (0x74797065), 
-        ACE_NTOHL (0x0),  // name = type
-        CORBA::tk_TypeCode,
-
-        5,
-        ACE_NTOHL (0x6d6f6465), 
-        ACE_NTOHL (0x0),  // name = mode
-        CORBA::tk_enum, // typecode kind
-        104, // encapsulation length
+              CORBA::tk_alias, // typecode kind for typedefs
+              68, // encapsulation length
           TAO_ENCAP_BYTE_ORDER, // byte order
-          36,
+                34,
           ACE_NTOHL (0x49444c3a), 
           ACE_NTOHL (0x6f6d672e), 
           ACE_NTOHL (0x6f72672f), 
           ACE_NTOHL (0x434f5242), 
-          ACE_NTOHL (0x412f4174), 
-          ACE_NTOHL (0x74726962), 
-          ACE_NTOHL (0x7574654d), 
-          ACE_NTOHL (0x6f64653a), 
-          ACE_NTOHL (0x312e3000),  // repository ID = IDL:omg.org/CORBA/AttributeMode:1.0
-          14,
-          ACE_NTOHL (0x41747472), 
-          ACE_NTOHL (0x69627574), 
-          ACE_NTOHL (0x654d6f64), 
-          ACE_NTOHL (0x65000000),  // name = AttributeMode
-          2, // member count
+                ACE_NTOHL (0x412f5665),
+                ACE_NTOHL (0x7273696f),
+                ACE_NTOHL (0x6e537065),
+                ACE_NTOHL (0x633a312e),
+                ACE_NTOHL (0x30000000),  // repository ID = IDL:omg.org/CORBA/VersionSpec:1.0
           12,
-          ACE_NTOHL (0x41545452), 
-          ACE_NTOHL (0x5f4e4f52), 
-          ACE_NTOHL (0x4d414c00),  // name = ATTR_NORMAL
-          14,
-          ACE_NTOHL (0x41545452), 
-          ACE_NTOHL (0x5f524541), 
-          ACE_NTOHL (0x444f4e4c), 
-          ACE_NTOHL (0x59000000),  // name = ATTR_READONLY
+                ACE_NTOHL (0x56657273),
+                ACE_NTOHL (0x696f6e53),
+                ACE_NTOHL (0x70656300),  // name = VersionSpec
+        CORBA::tk_string,
+        0U, // string length
+
+        5,
+        ACE_NTOHL (0x74797065),
+        ACE_NTOHL (0x0),  // name = type
+        CORBA::tk_TypeCode,
+
+
+            0U,
+
 
 
       0U,
@@ -20084,7 +20965,7 @@
 
 TAO_NAMESPACE_TYPE (CORBA::TypeCode_ptr)
 TAO_NAMESPACE_BEGIN (IR)
-TAO_NAMESPACE_DEFINE (::CORBA::TypeCode_ptr, _tc_HomeDescription, &_tc_TAO_tc_IR_HomeDescription)
+TAO_NAMESPACE_DEFINE (CORBA::TypeCode_ptr, _tc_HomeDescription, &_tc_TAO_tc_IR_HomeDescription)
 TAO_NAMESPACE_END
 
 void IR::HomeDescription::_tao_any_destructor (void *_tao_void_pointer)
@@ -20093,58 +20974,12 @@
   delete tmp;
 }
 
-void operator<<= (CORBA::Any &_tao_any, IR::DefinitionKind _tao_elem)
-{
-  TAO_OutputCDR stream;
-  stream << _tao_elem;
-  _tao_any._tao_replace (
-      IR::_tc_DefinitionKind,
-      TAO_ENCAP_BYTE_ORDER,
-      stream.begin ()
-    );
-}
-
-CORBA::Boolean operator>>= (const CORBA::Any &_tao_any, IR::DefinitionKind &_tao_elem)
-{
-  ACE_TRY_NEW_ENV
-  {
-    CORBA::TypeCode_var type = _tao_any.type ();
-    
-    CORBA::Boolean result = type->equivalent (IR::_tc_DefinitionKind ACE_ENV_ARG_PARAMETER);
-    ACE_TRY_CHECK;
-    
-    if (!result)
-      return 0; // not equivalent
-    
-    TAO_InputCDR stream (
-        _tao_any._tao_get_cdr (),
-        _tao_any._tao_byte_order ()
-      );
-    if (stream >> _tao_elem)
-    {
-      return 1;
-    }
-  }
-  ACE_CATCHANY
-  {
-    return 0;
-  }
-  ACE_ENDTRY;
-  return 0;
-}
-
-
-// TAO_IDL - Generated from 
-// be/be_visitor_sequence/any_op_cs.cpp:61
-
-// Copying insertion.
 void operator<<= (
     CORBA::Any &_tao_any,
     const IR::RepositoryIdSeq &_tao_elem
-  )
+  ) // copying
 {
   TAO_OutputCDR stream;
-  
   if (stream << _tao_elem)
     {
       _tao_any._tao_replace (
@@ -20155,16 +20990,10 @@
     }
 }
 
-// Non-copying insertion.
-void operator<<= (
-    CORBA::Any &_tao_any,
-    IR::RepositoryIdSeq *_tao_elem
-  )
+void operator<<= (CORBA::Any &_tao_any, IR::RepositoryIdSeq *_tao_elem) // non copying
 {
   TAO_OutputCDR stream;
-  
-  if (stream << *_tao_elem)
-    {
+  stream << *_tao_elem;
       _tao_any._tao_replace (
           IR::_tc_RepositoryIdSeq,
           TAO_ENCAP_BYTE_ORDER,
@@ -20174,13 +21003,8 @@
           IR::RepositoryIdSeq::_tao_any_destructor
         );
     }
-}
 
-// Extraction to non-const pointer (deprecated).
-CORBA::Boolean operator>>= (
-    const CORBA::Any &_tao_any,
-    IR::RepositoryIdSeq *&_tao_elem
-  )
+CORBA::Boolean operator>>= (const CORBA::Any &_tao_any, IR::RepositoryIdSeq *&_tao_elem)
 {
   return _tao_any >>= ACE_const_cast(
       const IR::RepositoryIdSeq*&,
@@ -20188,29 +21012,18 @@
     );
 }
 
-// Extraction to const pointer.
-CORBA::Boolean operator>>= (
-    const CORBA::Any &_tao_any,
-    const IR::RepositoryIdSeq *&_tao_elem
-  )
+CORBA::Boolean operator>>= (const CORBA::Any &_tao_any, const IR::RepositoryIdSeq *&_tao_elem)
 {
   _tao_elem = 0;
-  
   ACE_TRY_NEW_ENV
   {
     CORBA::TypeCode_var type = _tao_any.type ();
     
-    CORBA::Boolean result =
-      type->equivalent (
-          IR::_tc_RepositoryIdSeq
-          ACE_ENV_ARG_PARAMETER
-        );
+    CORBA::Boolean result = type->equivalent (IR::_tc_RepositoryIdSeq ACE_ENV_ARG_PARAMETER);
     ACE_TRY_CHECK;
     
     if (!result)
-      {
         return 0; // not equivalent
-      }
     
     if (_tao_any.any_owns_data ())
       {
@@ -20218,23 +21031,16 @@
             const IR::RepositoryIdSeq*,
             _tao_any.value ()
           );
-        
         return 1;
       }
     else
       {
-        IR::RepositoryIdSeq *tmp = 0;
-        ACE_NEW_RETURN (
-            tmp,
-            IR::RepositoryIdSeq,
-            0
-          );
-        
+      IR::RepositoryIdSeq *tmp;
+      ACE_NEW_RETURN (tmp, IR::RepositoryIdSeq, 0);
         TAO_InputCDR stream (
             _tao_any._tao_get_cdr (),
             _tao_any._tao_byte_order ()
           );
-        
         if (stream >> *tmp)
           {
             ((CORBA::Any *)&_tao_any)->_tao_replace (
@@ -20243,7 +21049,6 @@
                 ACE_static_cast (void *, tmp),
                 IR::RepositoryIdSeq::_tao_any_destructor
               );
-            
             _tao_elem = tmp;
             return 1;
           }
@@ -20257,22 +21062,15 @@
   {
   }
   ACE_ENDTRY;
-  
   return 0;
 }
 
-
-// TAO_IDL - Generated from 
-// be/be_visitor_sequence/any_op_cs.cpp:61
-
-// Copying insertion.
 void operator<<= (
     CORBA::Any &_tao_any,
     const IR::ComponentDefSeq &_tao_elem
-  )
+  ) // copying
 {
   TAO_OutputCDR stream;
-  
   if (stream << _tao_elem)
     {
       _tao_any._tao_replace (
@@ -20283,16 +21081,10 @@
     }
 }
 
-// Non-copying insertion.
-void operator<<= (
-    CORBA::Any &_tao_any,
-    IR::ComponentDefSeq *_tao_elem
-  )
+void operator<<= (CORBA::Any &_tao_any, IR::ComponentDefSeq *_tao_elem) // non copying
 {
   TAO_OutputCDR stream;
-  
-  if (stream << *_tao_elem)
-    {
+  stream << *_tao_elem;
       _tao_any._tao_replace (
           IR::_tc_ComponentDefSeq,
           TAO_ENCAP_BYTE_ORDER,
@@ -20302,13 +21094,8 @@
           IR::ComponentDefSeq::_tao_any_destructor
         );
     }
-}
 
-// Extraction to non-const pointer (deprecated).
-CORBA::Boolean operator>>= (
-    const CORBA::Any &_tao_any,
-    IR::ComponentDefSeq *&_tao_elem
-  )
+CORBA::Boolean operator>>= (const CORBA::Any &_tao_any, IR::ComponentDefSeq *&_tao_elem)
 {
   return _tao_any >>= ACE_const_cast(
       const IR::ComponentDefSeq*&,
@@ -20316,29 +21103,18 @@
     );
 }
 
-// Extraction to const pointer.
-CORBA::Boolean operator>>= (
-    const CORBA::Any &_tao_any,
-    const IR::ComponentDefSeq *&_tao_elem
-  )
+CORBA::Boolean operator>>= (const CORBA::Any &_tao_any, const IR::ComponentDefSeq *&_tao_elem)
 {
   _tao_elem = 0;
-  
   ACE_TRY_NEW_ENV
   {
     CORBA::TypeCode_var type = _tao_any.type ();
     
-    CORBA::Boolean result =
-      type->equivalent (
-          IR::_tc_ComponentDefSeq
-          ACE_ENV_ARG_PARAMETER
-        );
+    CORBA::Boolean result = type->equivalent (IR::_tc_ComponentDefSeq ACE_ENV_ARG_PARAMETER);
     ACE_TRY_CHECK;
     
     if (!result)
-      {
         return 0; // not equivalent
-      }
     
     if (_tao_any.any_owns_data ())
       {
@@ -20346,23 +21122,16 @@
             const IR::ComponentDefSeq*,
             _tao_any.value ()
           );
-        
         return 1;
       }
     else
       {
-        IR::ComponentDefSeq *tmp = 0;
-        ACE_NEW_RETURN (
-            tmp,
-            IR::ComponentDefSeq,
-            0
-          );
-        
+      IR::ComponentDefSeq *tmp;
+      ACE_NEW_RETURN (tmp, IR::ComponentDefSeq, 0);
         TAO_InputCDR stream (
             _tao_any._tao_get_cdr (),
             _tao_any._tao_byte_order ()
           );
-        
         if (stream >> *tmp)
           {
             ((CORBA::Any *)&_tao_any)->_tao_replace (
@@ -20371,7 +21140,6 @@
                 ACE_static_cast (void *, tmp),
                 IR::ComponentDefSeq::_tao_any_destructor
               );
-            
             _tao_elem = tmp;
             return 1;
           }
@@ -20385,22 +21153,15 @@
   {
   }
   ACE_ENDTRY;
-  
   return 0;
 }
 
-
-// TAO_IDL - Generated from 
-// be/be_visitor_sequence/any_op_cs.cpp:61
-
-// Copying insertion.
 void operator<<= (
     CORBA::Any &_tao_any,
     const IR::ProvidesDefSeq &_tao_elem
-  )
+  ) // copying
 {
   TAO_OutputCDR stream;
-  
   if (stream << _tao_elem)
     {
       _tao_any._tao_replace (
@@ -20411,16 +21172,10 @@
     }
 }
 
-// Non-copying insertion.
-void operator<<= (
-    CORBA::Any &_tao_any,
-    IR::ProvidesDefSeq *_tao_elem
-  )
+void operator<<= (CORBA::Any &_tao_any, IR::ProvidesDefSeq *_tao_elem) // non copying
 {
   TAO_OutputCDR stream;
-  
-  if (stream << *_tao_elem)
-    {
+  stream << *_tao_elem;
       _tao_any._tao_replace (
           IR::_tc_ProvidesDefSeq,
           TAO_ENCAP_BYTE_ORDER,
@@ -20430,13 +21185,8 @@
           IR::ProvidesDefSeq::_tao_any_destructor
         );
     }
-}
 
-// Extraction to non-const pointer (deprecated).
-CORBA::Boolean operator>>= (
-    const CORBA::Any &_tao_any,
-    IR::ProvidesDefSeq *&_tao_elem
-  )
+CORBA::Boolean operator>>= (const CORBA::Any &_tao_any, IR::ProvidesDefSeq *&_tao_elem)
 {
   return _tao_any >>= ACE_const_cast(
       const IR::ProvidesDefSeq*&,
@@ -20444,29 +21194,18 @@
     );
 }
 
-// Extraction to const pointer.
-CORBA::Boolean operator>>= (
-    const CORBA::Any &_tao_any,
-    const IR::ProvidesDefSeq *&_tao_elem
-  )
+CORBA::Boolean operator>>= (const CORBA::Any &_tao_any, const IR::ProvidesDefSeq *&_tao_elem)
 {
   _tao_elem = 0;
-  
   ACE_TRY_NEW_ENV
   {
     CORBA::TypeCode_var type = _tao_any.type ();
     
-    CORBA::Boolean result =
-      type->equivalent (
-          IR::_tc_ProvidesDefSeq
-          ACE_ENV_ARG_PARAMETER
-        );
+    CORBA::Boolean result = type->equivalent (IR::_tc_ProvidesDefSeq ACE_ENV_ARG_PARAMETER);
     ACE_TRY_CHECK;
     
     if (!result)
-      {
         return 0; // not equivalent
-      }
     
     if (_tao_any.any_owns_data ())
       {
@@ -20474,23 +21213,16 @@
             const IR::ProvidesDefSeq*,
             _tao_any.value ()
           );
-        
         return 1;
       }
     else
       {
-        IR::ProvidesDefSeq *tmp = 0;
-        ACE_NEW_RETURN (
-            tmp,
-            IR::ProvidesDefSeq,
-            0
-          );
-        
+      IR::ProvidesDefSeq *tmp;
+      ACE_NEW_RETURN (tmp, IR::ProvidesDefSeq, 0);
         TAO_InputCDR stream (
             _tao_any._tao_get_cdr (),
             _tao_any._tao_byte_order ()
           );
-        
         if (stream >> *tmp)
           {
             ((CORBA::Any *)&_tao_any)->_tao_replace (
@@ -20499,7 +21231,6 @@
                 ACE_static_cast (void *, tmp),
                 IR::ProvidesDefSeq::_tao_any_destructor
               );
-            
             _tao_elem = tmp;
             return 1;
           }
@@ -20513,22 +21244,15 @@
   {
   }
   ACE_ENDTRY;
-  
   return 0;
 }
 
-
-// TAO_IDL - Generated from 
-// be/be_visitor_sequence/any_op_cs.cpp:61
-
-// Copying insertion.
 void operator<<= (
     CORBA::Any &_tao_any,
     const IR::UsesDefSeq &_tao_elem
-  )
+  ) // copying
 {
   TAO_OutputCDR stream;
-  
   if (stream << _tao_elem)
     {
       _tao_any._tao_replace (
@@ -20539,16 +21263,10 @@
     }
 }
 
-// Non-copying insertion.
-void operator<<= (
-    CORBA::Any &_tao_any,
-    IR::UsesDefSeq *_tao_elem
-  )
+void operator<<= (CORBA::Any &_tao_any, IR::UsesDefSeq *_tao_elem) // non copying
 {
   TAO_OutputCDR stream;
-  
-  if (stream << *_tao_elem)
-    {
+  stream << *_tao_elem;
       _tao_any._tao_replace (
           IR::_tc_UsesDefSeq,
           TAO_ENCAP_BYTE_ORDER,
@@ -20558,13 +21276,8 @@
           IR::UsesDefSeq::_tao_any_destructor
         );
     }
-}
 
-// Extraction to non-const pointer (deprecated).
-CORBA::Boolean operator>>= (
-    const CORBA::Any &_tao_any,
-    IR::UsesDefSeq *&_tao_elem
-  )
+CORBA::Boolean operator>>= (const CORBA::Any &_tao_any, IR::UsesDefSeq *&_tao_elem)
 {
   return _tao_any >>= ACE_const_cast(
       const IR::UsesDefSeq*&,
@@ -20572,29 +21285,18 @@
     );
 }
 
-// Extraction to const pointer.
-CORBA::Boolean operator>>= (
-    const CORBA::Any &_tao_any,
-    const IR::UsesDefSeq *&_tao_elem
-  )
+CORBA::Boolean operator>>= (const CORBA::Any &_tao_any, const IR::UsesDefSeq *&_tao_elem)
 {
   _tao_elem = 0;
-  
   ACE_TRY_NEW_ENV
   {
     CORBA::TypeCode_var type = _tao_any.type ();
     
-    CORBA::Boolean result =
-      type->equivalent (
-          IR::_tc_UsesDefSeq
-          ACE_ENV_ARG_PARAMETER
-        );
+    CORBA::Boolean result = type->equivalent (IR::_tc_UsesDefSeq ACE_ENV_ARG_PARAMETER);
     ACE_TRY_CHECK;
     
     if (!result)
-      {
         return 0; // not equivalent
-      }
     
     if (_tao_any.any_owns_data ())
       {
@@ -20602,23 +21304,16 @@
             const IR::UsesDefSeq*,
             _tao_any.value ()
           );
-        
         return 1;
       }
     else
       {
-        IR::UsesDefSeq *tmp = 0;
-        ACE_NEW_RETURN (
-            tmp,
-            IR::UsesDefSeq,
-            0
-          );
-        
+      IR::UsesDefSeq *tmp;
+      ACE_NEW_RETURN (tmp, IR::UsesDefSeq, 0);
         TAO_InputCDR stream (
             _tao_any._tao_get_cdr (),
             _tao_any._tao_byte_order ()
           );
-        
         if (stream >> *tmp)
           {
             ((CORBA::Any *)&_tao_any)->_tao_replace (
@@ -20627,7 +21322,6 @@
                 ACE_static_cast (void *, tmp),
                 IR::UsesDefSeq::_tao_any_destructor
               );
-            
             _tao_elem = tmp;
             return 1;
           }
@@ -20641,22 +21335,15 @@
   {
   }
   ACE_ENDTRY;
-  
   return 0;
 }
 
-
-// TAO_IDL - Generated from 
-// be/be_visitor_sequence/any_op_cs.cpp:61
-
-// Copying insertion.
 void operator<<= (
     CORBA::Any &_tao_any,
     const IR::HomeDefSeq &_tao_elem
-  )
+  ) // copying
 {
   TAO_OutputCDR stream;
-  
   if (stream << _tao_elem)
     {
       _tao_any._tao_replace (
@@ -20667,16 +21354,10 @@
     }
 }
 
-// Non-copying insertion.
-void operator<<= (
-    CORBA::Any &_tao_any,
-    IR::HomeDefSeq *_tao_elem
-  )
+void operator<<= (CORBA::Any &_tao_any, IR::HomeDefSeq *_tao_elem) // non copying
 {
   TAO_OutputCDR stream;
-  
-  if (stream << *_tao_elem)
-    {
+  stream << *_tao_elem;
       _tao_any._tao_replace (
           IR::_tc_HomeDefSeq,
           TAO_ENCAP_BYTE_ORDER,
@@ -20686,13 +21367,8 @@
           IR::HomeDefSeq::_tao_any_destructor
         );
     }
-}
 
-// Extraction to non-const pointer (deprecated).
-CORBA::Boolean operator>>= (
-    const CORBA::Any &_tao_any,
-    IR::HomeDefSeq *&_tao_elem
-  )
+CORBA::Boolean operator>>= (const CORBA::Any &_tao_any, IR::HomeDefSeq *&_tao_elem)
 {
   return _tao_any >>= ACE_const_cast(
       const IR::HomeDefSeq*&,
@@ -20700,29 +21376,18 @@
     );
 }
 
-// Extraction to const pointer.
-CORBA::Boolean operator>>= (
-    const CORBA::Any &_tao_any,
-    const IR::HomeDefSeq *&_tao_elem
-  )
+CORBA::Boolean operator>>= (const CORBA::Any &_tao_any, const IR::HomeDefSeq *&_tao_elem)
 {
   _tao_elem = 0;
-  
   ACE_TRY_NEW_ENV
   {
     CORBA::TypeCode_var type = _tao_any.type ();
     
-    CORBA::Boolean result =
-      type->equivalent (
-          IR::_tc_HomeDefSeq
-          ACE_ENV_ARG_PARAMETER
-        );
+    CORBA::Boolean result = type->equivalent (IR::_tc_HomeDefSeq ACE_ENV_ARG_PARAMETER);
     ACE_TRY_CHECK;
     
     if (!result)
-      {
         return 0; // not equivalent
-      }
     
     if (_tao_any.any_owns_data ())
       {
@@ -20730,23 +21395,16 @@
             const IR::HomeDefSeq*,
             _tao_any.value ()
           );
-        
         return 1;
       }
     else
       {
-        IR::HomeDefSeq *tmp = 0;
-        ACE_NEW_RETURN (
-            tmp,
-            IR::HomeDefSeq,
-            0
-          );
-        
+      IR::HomeDefSeq *tmp;
+      ACE_NEW_RETURN (tmp, IR::HomeDefSeq, 0);
         TAO_InputCDR stream (
             _tao_any._tao_get_cdr (),
             _tao_any._tao_byte_order ()
           );
-        
         if (stream >> *tmp)
           {
             ((CORBA::Any *)&_tao_any)->_tao_replace (
@@ -20755,7 +21413,6 @@
                 ACE_static_cast (void *, tmp),
                 IR::HomeDefSeq::_tao_any_destructor
               );
-            
             _tao_elem = tmp;
             return 1;
           }
@@ -20769,22 +21426,15 @@
   {
   }
   ACE_ENDTRY;
-  
   return 0;
 }
 
-
-// TAO_IDL - Generated from 
-// be/be_visitor_sequence/any_op_cs.cpp:61
-
-// Copying insertion.
 void operator<<= (
     CORBA::Any &_tao_any,
     const IR::EmitsDefSeq &_tao_elem
-  )
+  ) // copying
 {
   TAO_OutputCDR stream;
-  
   if (stream << _tao_elem)
     {
       _tao_any._tao_replace (
@@ -20795,16 +21445,10 @@
     }
 }
 
-// Non-copying insertion.
-void operator<<= (
-    CORBA::Any &_tao_any,
-    IR::EmitsDefSeq *_tao_elem
-  )
+void operator<<= (CORBA::Any &_tao_any, IR::EmitsDefSeq *_tao_elem) // non copying
 {
   TAO_OutputCDR stream;
-  
-  if (stream << *_tao_elem)
-    {
+  stream << *_tao_elem;
       _tao_any._tao_replace (
           IR::_tc_EmitsDefSeq,
           TAO_ENCAP_BYTE_ORDER,
@@ -20814,13 +21458,8 @@
           IR::EmitsDefSeq::_tao_any_destructor
         );
     }
-}
 
-// Extraction to non-const pointer (deprecated).
-CORBA::Boolean operator>>= (
-    const CORBA::Any &_tao_any,
-    IR::EmitsDefSeq *&_tao_elem
-  )
+CORBA::Boolean operator>>= (const CORBA::Any &_tao_any, IR::EmitsDefSeq *&_tao_elem)
 {
   return _tao_any >>= ACE_const_cast(
       const IR::EmitsDefSeq*&,
@@ -20828,29 +21467,18 @@
     );
 }
 
-// Extraction to const pointer.
-CORBA::Boolean operator>>= (
-    const CORBA::Any &_tao_any,
-    const IR::EmitsDefSeq *&_tao_elem
-  )
+CORBA::Boolean operator>>= (const CORBA::Any &_tao_any, const IR::EmitsDefSeq *&_tao_elem)
 {
   _tao_elem = 0;
-  
   ACE_TRY_NEW_ENV
   {
     CORBA::TypeCode_var type = _tao_any.type ();
     
-    CORBA::Boolean result =
-      type->equivalent (
-          IR::_tc_EmitsDefSeq
-          ACE_ENV_ARG_PARAMETER
-        );
+    CORBA::Boolean result = type->equivalent (IR::_tc_EmitsDefSeq ACE_ENV_ARG_PARAMETER);
     ACE_TRY_CHECK;
     
     if (!result)
-      {
         return 0; // not equivalent
-      }
     
     if (_tao_any.any_owns_data ())
       {
@@ -20858,23 +21486,16 @@
             const IR::EmitsDefSeq*,
             _tao_any.value ()
           );
-        
         return 1;
       }
     else
       {
-        IR::EmitsDefSeq *tmp = 0;
-        ACE_NEW_RETURN (
-            tmp,
-            IR::EmitsDefSeq,
-            0
-          );
-        
+      IR::EmitsDefSeq *tmp;
+      ACE_NEW_RETURN (tmp, IR::EmitsDefSeq, 0);
         TAO_InputCDR stream (
             _tao_any._tao_get_cdr (),
             _tao_any._tao_byte_order ()
           );
-        
         if (stream >> *tmp)
           {
             ((CORBA::Any *)&_tao_any)->_tao_replace (
@@ -20883,7 +21504,6 @@
                 ACE_static_cast (void *, tmp),
                 IR::EmitsDefSeq::_tao_any_destructor
               );
-            
             _tao_elem = tmp;
             return 1;
           }
@@ -20897,22 +21517,15 @@
   {
   }
   ACE_ENDTRY;
-  
   return 0;
 }
 
-
-// TAO_IDL - Generated from 
-// be/be_visitor_sequence/any_op_cs.cpp:61
-
-// Copying insertion.
 void operator<<= (
     CORBA::Any &_tao_any,
     const IR::PublishesDefSeq &_tao_elem
-  )
+  ) // copying
 {
   TAO_OutputCDR stream;
-  
   if (stream << _tao_elem)
     {
       _tao_any._tao_replace (
@@ -20921,18 +21534,12 @@
           stream.begin ()
         );
     }
-}
-
-// Non-copying insertion.
-void operator<<= (
-    CORBA::Any &_tao_any,
-    IR::PublishesDefSeq *_tao_elem
-  )
-{
-  TAO_OutputCDR stream;
+}
   
-  if (stream << *_tao_elem)
+void operator<<= (CORBA::Any &_tao_any, IR::PublishesDefSeq *_tao_elem) // non copying
     {
+  TAO_OutputCDR stream;
+  stream << *_tao_elem;
       _tao_any._tao_replace (
           IR::_tc_PublishesDefSeq,
           TAO_ENCAP_BYTE_ORDER,
@@ -20942,13 +21549,8 @@
           IR::PublishesDefSeq::_tao_any_destructor
         );
     }
-}
 
-// Extraction to non-const pointer (deprecated).
-CORBA::Boolean operator>>= (
-    const CORBA::Any &_tao_any,
-    IR::PublishesDefSeq *&_tao_elem
-  )
+CORBA::Boolean operator>>= (const CORBA::Any &_tao_any, IR::PublishesDefSeq *&_tao_elem)
 {
   return _tao_any >>= ACE_const_cast(
       const IR::PublishesDefSeq*&,
@@ -20956,29 +21558,18 @@
     );
 }
 
-// Extraction to const pointer.
-CORBA::Boolean operator>>= (
-    const CORBA::Any &_tao_any,
-    const IR::PublishesDefSeq *&_tao_elem
-  )
+CORBA::Boolean operator>>= (const CORBA::Any &_tao_any, const IR::PublishesDefSeq *&_tao_elem)
 {
   _tao_elem = 0;
-  
   ACE_TRY_NEW_ENV
   {
     CORBA::TypeCode_var type = _tao_any.type ();
     
-    CORBA::Boolean result =
-      type->equivalent (
-          IR::_tc_PublishesDefSeq
-          ACE_ENV_ARG_PARAMETER
-        );
+    CORBA::Boolean result = type->equivalent (IR::_tc_PublishesDefSeq ACE_ENV_ARG_PARAMETER);
     ACE_TRY_CHECK;
     
     if (!result)
-      {
         return 0; // not equivalent
-      }
     
     if (_tao_any.any_owns_data ())
       {
@@ -20986,23 +21577,16 @@
             const IR::PublishesDefSeq*,
             _tao_any.value ()
           );
-        
         return 1;
       }
     else
       {
-        IR::PublishesDefSeq *tmp = 0;
-        ACE_NEW_RETURN (
-            tmp,
-            IR::PublishesDefSeq,
-            0
-          );
-        
+      IR::PublishesDefSeq *tmp;
+      ACE_NEW_RETURN (tmp, IR::PublishesDefSeq, 0);
         TAO_InputCDR stream (
             _tao_any._tao_get_cdr (),
             _tao_any._tao_byte_order ()
           );
-        
         if (stream >> *tmp)
           {
             ((CORBA::Any *)&_tao_any)->_tao_replace (
@@ -21011,7 +21595,6 @@
                 ACE_static_cast (void *, tmp),
                 IR::PublishesDefSeq::_tao_any_destructor
               );
-            
             _tao_elem = tmp;
             return 1;
           }
@@ -21025,22 +21608,15 @@
   {
   }
   ACE_ENDTRY;
-  
   return 0;
 }
 
-
-// TAO_IDL - Generated from 
-// be/be_visitor_sequence/any_op_cs.cpp:61
-
-// Copying insertion.
 void operator<<= (
     CORBA::Any &_tao_any,
     const IR::ConsumesDefSeq &_tao_elem
-  )
+  ) // copying
 {
   TAO_OutputCDR stream;
-  
   if (stream << _tao_elem)
     {
       _tao_any._tao_replace (
@@ -21051,16 +21627,10 @@
     }
 }
 
-// Non-copying insertion.
-void operator<<= (
-    CORBA::Any &_tao_any,
-    IR::ConsumesDefSeq *_tao_elem
-  )
+void operator<<= (CORBA::Any &_tao_any, IR::ConsumesDefSeq *_tao_elem) // non copying
 {
   TAO_OutputCDR stream;
-  
-  if (stream << *_tao_elem)
-    {
+  stream << *_tao_elem;
       _tao_any._tao_replace (
           IR::_tc_ConsumesDefSeq,
           TAO_ENCAP_BYTE_ORDER,
@@ -21070,13 +21640,8 @@
           IR::ConsumesDefSeq::_tao_any_destructor
         );
     }
-}
 
-// Extraction to non-const pointer (deprecated).
-CORBA::Boolean operator>>= (
-    const CORBA::Any &_tao_any,
-    IR::ConsumesDefSeq *&_tao_elem
-  )
+CORBA::Boolean operator>>= (const CORBA::Any &_tao_any, IR::ConsumesDefSeq *&_tao_elem)
 {
   return _tao_any >>= ACE_const_cast(
       const IR::ConsumesDefSeq*&,
@@ -21084,29 +21649,18 @@
     );
 }
 
-// Extraction to const pointer.
-CORBA::Boolean operator>>= (
-    const CORBA::Any &_tao_any,
-    const IR::ConsumesDefSeq *&_tao_elem
-  )
+CORBA::Boolean operator>>= (const CORBA::Any &_tao_any, const IR::ConsumesDefSeq *&_tao_elem)
 {
   _tao_elem = 0;
-  
   ACE_TRY_NEW_ENV
   {
     CORBA::TypeCode_var type = _tao_any.type ();
     
-    CORBA::Boolean result =
-      type->equivalent (
-          IR::_tc_ConsumesDefSeq
-          ACE_ENV_ARG_PARAMETER
-        );
+    CORBA::Boolean result = type->equivalent (IR::_tc_ConsumesDefSeq ACE_ENV_ARG_PARAMETER);
     ACE_TRY_CHECK;
     
     if (!result)
-      {
         return 0; // not equivalent
-      }
     
     if (_tao_any.any_owns_data ())
       {
@@ -21114,23 +21668,16 @@
             const IR::ConsumesDefSeq*,
             _tao_any.value ()
           );
-        
         return 1;
       }
     else
       {
-        IR::ConsumesDefSeq *tmp = 0;
-        ACE_NEW_RETURN (
-            tmp,
-            IR::ConsumesDefSeq,
-            0
-          );
-        
+      IR::ConsumesDefSeq *tmp;
+      ACE_NEW_RETURN (tmp, IR::ConsumesDefSeq, 0);
         TAO_InputCDR stream (
             _tao_any._tao_get_cdr (),
             _tao_any._tao_byte_order ()
           );
-        
         if (stream >> *tmp)
           {
             ((CORBA::Any *)&_tao_any)->_tao_replace (
@@ -21139,7 +21686,6 @@
                 ACE_static_cast (void *, tmp),
                 IR::ConsumesDefSeq::_tao_any_destructor
               );
-            
             _tao_elem = tmp;
             return 1;
           }
@@ -21153,22 +21699,15 @@
   {
   }
   ACE_ENDTRY;
-  
   return 0;
 }
 
-
-// TAO_IDL - Generated from 
-// be/be_visitor_sequence/any_op_cs.cpp:61
-
-// Copying insertion.
 void operator<<= (
     CORBA::Any &_tao_any,
     const IR::FactoryDefSeq &_tao_elem
-  )
+  ) // copying
 {
   TAO_OutputCDR stream;
-  
   if (stream << _tao_elem)
     {
       _tao_any._tao_replace (
@@ -21179,16 +21718,10 @@
     }
 }
 
-// Non-copying insertion.
-void operator<<= (
-    CORBA::Any &_tao_any,
-    IR::FactoryDefSeq *_tao_elem
-  )
+void operator<<= (CORBA::Any &_tao_any, IR::FactoryDefSeq *_tao_elem) // non copying
 {
   TAO_OutputCDR stream;
-  
-  if (stream << *_tao_elem)
-    {
+  stream << *_tao_elem;
       _tao_any._tao_replace (
           IR::_tc_FactoryDefSeq,
           TAO_ENCAP_BYTE_ORDER,
@@ -21198,13 +21731,8 @@
           IR::FactoryDefSeq::_tao_any_destructor
         );
     }
-}
 
-// Extraction to non-const pointer (deprecated).
-CORBA::Boolean operator>>= (
-    const CORBA::Any &_tao_any,
-    IR::FactoryDefSeq *&_tao_elem
-  )
+CORBA::Boolean operator>>= (const CORBA::Any &_tao_any, IR::FactoryDefSeq *&_tao_elem)
 {
   return _tao_any >>= ACE_const_cast(
       const IR::FactoryDefSeq*&,
@@ -21212,29 +21740,18 @@
     );
 }
 
-// Extraction to const pointer.
-CORBA::Boolean operator>>= (
-    const CORBA::Any &_tao_any,
-    const IR::FactoryDefSeq *&_tao_elem
-  )
+CORBA::Boolean operator>>= (const CORBA::Any &_tao_any, const IR::FactoryDefSeq *&_tao_elem)
 {
   _tao_elem = 0;
-  
   ACE_TRY_NEW_ENV
   {
     CORBA::TypeCode_var type = _tao_any.type ();
     
-    CORBA::Boolean result =
-      type->equivalent (
-          IR::_tc_FactoryDefSeq
-          ACE_ENV_ARG_PARAMETER
-        );
+    CORBA::Boolean result = type->equivalent (IR::_tc_FactoryDefSeq ACE_ENV_ARG_PARAMETER);
     ACE_TRY_CHECK;
     
     if (!result)
-      {
         return 0; // not equivalent
-      }
     
     if (_tao_any.any_owns_data ())
       {
@@ -21242,23 +21759,16 @@
             const IR::FactoryDefSeq*,
             _tao_any.value ()
           );
-        
         return 1;
       }
     else
       {
-        IR::FactoryDefSeq *tmp = 0;
-        ACE_NEW_RETURN (
-            tmp,
-            IR::FactoryDefSeq,
-            0
-          );
-        
+      IR::FactoryDefSeq *tmp;
+      ACE_NEW_RETURN (tmp, IR::FactoryDefSeq, 0);
         TAO_InputCDR stream (
             _tao_any._tao_get_cdr (),
             _tao_any._tao_byte_order ()
           );
-        
         if (stream >> *tmp)
           {
             ((CORBA::Any *)&_tao_any)->_tao_replace (
@@ -21267,7 +21777,6 @@
                 ACE_static_cast (void *, tmp),
                 IR::FactoryDefSeq::_tao_any_destructor
               );
-            
             _tao_elem = tmp;
             return 1;
           }
@@ -21281,22 +21790,15 @@
   {
   }
   ACE_ENDTRY;
-  
   return 0;
 }
 
-
-// TAO_IDL - Generated from 
-// be/be_visitor_sequence/any_op_cs.cpp:61
-
-// Copying insertion.
 void operator<<= (
     CORBA::Any &_tao_any,
     const IR::FinderDefSeq &_tao_elem
-  )
+  ) // copying
 {
   TAO_OutputCDR stream;
-  
   if (stream << _tao_elem)
     {
       _tao_any._tao_replace (
@@ -21307,16 +21809,10 @@
     }
 }
 
-// Non-copying insertion.
-void operator<<= (
-    CORBA::Any &_tao_any,
-    IR::FinderDefSeq *_tao_elem
-  )
+void operator<<= (CORBA::Any &_tao_any, IR::FinderDefSeq *_tao_elem) // non copying
 {
   TAO_OutputCDR stream;
-  
-  if (stream << *_tao_elem)
-    {
+  stream << *_tao_elem;
       _tao_any._tao_replace (
           IR::_tc_FinderDefSeq,
           TAO_ENCAP_BYTE_ORDER,
@@ -21326,13 +21822,8 @@
           IR::FinderDefSeq::_tao_any_destructor
         );
     }
-}
 
-// Extraction to non-const pointer (deprecated).
-CORBA::Boolean operator>>= (
-    const CORBA::Any &_tao_any,
-    IR::FinderDefSeq *&_tao_elem
-  )
+CORBA::Boolean operator>>= (const CORBA::Any &_tao_any, IR::FinderDefSeq *&_tao_elem)
 {
   return _tao_any >>= ACE_const_cast(
       const IR::FinderDefSeq*&,
@@ -21340,29 +21831,18 @@
     );
 }
 
-// Extraction to const pointer.
-CORBA::Boolean operator>>= (
-    const CORBA::Any &_tao_any,
-    const IR::FinderDefSeq *&_tao_elem
-  )
+CORBA::Boolean operator>>= (const CORBA::Any &_tao_any, const IR::FinderDefSeq *&_tao_elem)
 {
   _tao_elem = 0;
-  
   ACE_TRY_NEW_ENV
   {
     CORBA::TypeCode_var type = _tao_any.type ();
     
-    CORBA::Boolean result =
-      type->equivalent (
-          IR::_tc_FinderDefSeq
-          ACE_ENV_ARG_PARAMETER
-        );
+    CORBA::Boolean result = type->equivalent (IR::_tc_FinderDefSeq ACE_ENV_ARG_PARAMETER);
     ACE_TRY_CHECK;
     
     if (!result)
-      {
         return 0; // not equivalent
-      }
     
     if (_tao_any.any_owns_data ())
       {
@@ -21370,23 +21850,16 @@
             const IR::FinderDefSeq*,
             _tao_any.value ()
           );
-        
         return 1;
       }
     else
       {
-        IR::FinderDefSeq *tmp = 0;
-        ACE_NEW_RETURN (
-            tmp,
-            IR::FinderDefSeq,
-            0
-          );
-        
+      IR::FinderDefSeq *tmp;
+      ACE_NEW_RETURN (tmp, IR::FinderDefSeq, 0);
         TAO_InputCDR stream (
             _tao_any._tao_get_cdr (),
             _tao_any._tao_byte_order ()
           );
-        
         if (stream >> *tmp)
           {
             ((CORBA::Any *)&_tao_any)->_tao_replace (
@@ -21395,7 +21868,6 @@
                 ACE_static_cast (void *, tmp),
                 IR::FinderDefSeq::_tao_any_destructor
               );
-            
             _tao_elem = tmp;
             return 1;
           }
@@ -21409,21 +21881,12 @@
   {
   }
   ACE_ENDTRY;
-  
   return 0;
 }
 
-
-// TAO_IDL - Generated from 
-// be/be_visitor_interface/any_op_cs.cpp:60
-
-void operator<<= (
-    CORBA::Any &_tao_any,
-    IR::ComponentRepository_ptr _tao_elem
-  )
+void operator<<= (CORBA::Any &_tao_any, IR::ComponentRepository_ptr _tao_elem)
 {
   TAO_OutputCDR stream;
-  
   if (stream << _tao_elem)
     {
       _tao_any._tao_replace (
@@ -21437,53 +21900,23 @@
     }
 }
 
-void operator<<= (
-    CORBA::Any &_tao_any,
-    IR::ComponentRepository_ptr *_tao_elem
-  )
-{
-  TAO_OutputCDR stream;
-  
-  if (stream << *_tao_elem)
-    {
-      _tao_any._tao_replace (
-          IR::_tc_ComponentRepository, 
-          TAO_ENCAP_BYTE_ORDER,
-          stream.begin (),
-          1,
-          *_tao_elem,
-          IR::ComponentRepository::_tao_any_destructor
-        );
-    }
-}
-
-CORBA::Boolean operator>>= (
-    const CORBA::Any &_tao_any,
-    IR::ComponentRepository_ptr &_tao_elem
-  )
+CORBA::Boolean operator>>= (const CORBA::Any &_tao_any, IR::ComponentRepository_ptr &_tao_elem)
 {
   ACE_TRY_NEW_ENV
   {
     _tao_elem = IR::ComponentRepository::_nil ();
     CORBA::TypeCode_var type = _tao_any.type ();
     
-    CORBA::Boolean result =
-      type->equivalent (
-          IR::_tc_ComponentRepository
-          ACE_ENV_ARG_PARAMETER
-        );
+    CORBA::Boolean result = type->equivalent (IR::_tc_ComponentRepository ACE_ENV_ARG_PARAMETER);
     ACE_TRY_CHECK;
     
     if (!result)
-      {
         return 0; // not equivalent
-      }
     
     TAO_InputCDR stream (
         _tao_any._tao_get_cdr (),
         _tao_any._tao_byte_order ()
       );
-    
     if (stream >> _tao_elem)
       {
         ((CORBA::Any *)&_tao_any)->_tao_replace (
@@ -21492,15 +21925,15 @@
             _tao_elem,
             IR::ComponentRepository::_tao_any_destructor
           );
-        
         return 1;
       }
   }
   ACE_CATCHANY
   {
+    _tao_elem = IR::ComponentRepository::_nil ();
+    return 0;
   }
   ACE_ENDTRY;
-  
   _tao_elem = IR::ComponentRepository::_nil ();
   return 0;
 }
@@ -21512,17 +21945,9 @@
 #  pragma instantiate TAO_Object_Manager<IR::ComponentRepository,IR::ComponentRepository_var>
 #endif /* ACE_HAS_EXPLICIT_TEMPLATE_INSTANTIATION */
 
-
-// TAO_IDL - Generated from 
-// be/be_visitor_interface/any_op_cs.cpp:60
-
-void operator<<= (
-    CORBA::Any &_tao_any,
-    IR::ProvidesDef_ptr _tao_elem
-  )
+void operator<<= (CORBA::Any &_tao_any, IR::ProvidesDef_ptr _tao_elem)
 {
   TAO_OutputCDR stream;
-  
   if (stream << _tao_elem)
     {
       _tao_any._tao_replace (
@@ -21536,53 +21961,23 @@
     }
 }
 
-void operator<<= (
-    CORBA::Any &_tao_any,
-    IR::ProvidesDef_ptr *_tao_elem
-  )
-{
-  TAO_OutputCDR stream;
-  
-  if (stream << *_tao_elem)
-    {
-      _tao_any._tao_replace (
-          IR::_tc_ProvidesDef, 
-          TAO_ENCAP_BYTE_ORDER,
-          stream.begin (),
-          1,
-          *_tao_elem,
-          IR::ProvidesDef::_tao_any_destructor
-        );
-    }
-}
-
-CORBA::Boolean operator>>= (
-    const CORBA::Any &_tao_any,
-    IR::ProvidesDef_ptr &_tao_elem
-  )
+CORBA::Boolean operator>>= (const CORBA::Any &_tao_any, IR::ProvidesDef_ptr &_tao_elem)
 {
   ACE_TRY_NEW_ENV
   {
     _tao_elem = IR::ProvidesDef::_nil ();
     CORBA::TypeCode_var type = _tao_any.type ();
     
-    CORBA::Boolean result =
-      type->equivalent (
-          IR::_tc_ProvidesDef
-          ACE_ENV_ARG_PARAMETER
-        );
+    CORBA::Boolean result = type->equivalent (IR::_tc_ProvidesDef ACE_ENV_ARG_PARAMETER);
     ACE_TRY_CHECK;
     
     if (!result)
-      {
         return 0; // not equivalent
-      }
     
     TAO_InputCDR stream (
         _tao_any._tao_get_cdr (),
         _tao_any._tao_byte_order ()
       );
-    
     if (stream >> _tao_elem)
       {
         ((CORBA::Any *)&_tao_any)->_tao_replace (
@@ -21591,15 +21986,15 @@
             _tao_elem,
             IR::ProvidesDef::_tao_any_destructor
           );
-        
         return 1;
       }
   }
   ACE_CATCHANY
   {
+    _tao_elem = IR::ProvidesDef::_nil ();
+    return 0;
   }
   ACE_ENDTRY;
-  
   _tao_elem = IR::ProvidesDef::_nil ();
   return 0;
 }
@@ -21611,38 +22006,21 @@
 #  pragma instantiate TAO_Object_Manager<IR::ProvidesDef,IR::ProvidesDef_var>
 #endif /* ACE_HAS_EXPLICIT_TEMPLATE_INSTANTIATION */
 
-
-// TAO_IDL - Generated from 
-// be/be_visitor_structure/any_op_cs.cpp:58
-
-// Copying insertion.
-void operator<<= (
-    CORBA::Any &_tao_any,
-    const IR::ProvidesDescription &_tao_elem
-  )
+void operator<<= (CORBA::Any &_tao_any, const IR::ProvidesDescription &_tao_elem) // copying
 {
   TAO_OutputCDR stream;
-  
-  if (stream << _tao_elem)
-    {
+  stream << _tao_elem;
       _tao_any._tao_replace (
           IR::_tc_ProvidesDescription,
           TAO_ENCAP_BYTE_ORDER,
           stream.begin ()
         );
     }
-}
 
-// Non-copying insertion.
-void operator<<= (
-    CORBA::Any &_tao_any,
-    IR::ProvidesDescription *_tao_elem
-  )
+void operator<<= (CORBA::Any &_tao_any, IR::ProvidesDescription *_tao_elem) // non copying
 {
   TAO_OutputCDR stream;
-  
-  if (stream << *_tao_elem)
-    {
+  stream << *_tao_elem;
       _tao_any._tao_replace (
           IR::_tc_ProvidesDescription,
           TAO_ENCAP_BYTE_ORDER,
@@ -21652,43 +22030,24 @@
           IR::ProvidesDescription::_tao_any_destructor
         );
     }
-}
 
-// Extraction to non-const pointer (deprecated).
-CORBA::Boolean operator>>= (
-    const CORBA::Any &_tao_any,
-    IR::ProvidesDescription *&_tao_elem
-  )
+CORBA::Boolean operator>>= (const CORBA::Any &_tao_any, IR::ProvidesDescription *&_tao_elem)
 {
-  return _tao_any >>= ACE_const_cast (
-      const IR::ProvidesDescription *&,
-      _tao_elem
-    );
+  return _tao_any >>= ACE_const_cast(const IR::ProvidesDescription*&,_tao_elem);
 }
 
-// Extraction to const pointer.
-CORBA::Boolean operator>>= (
-    const CORBA::Any &_tao_any,
-    const IR::ProvidesDescription *&_tao_elem
-  )
+CORBA::Boolean operator>>= (const CORBA::Any &_tao_any, const IR::ProvidesDescription *&_tao_elem)
 {
   _tao_elem = 0;
-  
   ACE_TRY_NEW_ENV
   {
     CORBA::TypeCode_var type = _tao_any.type ();
     
-    CORBA::Boolean result =
-      type->equivalent (
-          IR::_tc_ProvidesDescription
-          ACE_ENV_ARG_PARAMETER
-        );
+    CORBA::Boolean result = type->equivalent (IR::_tc_ProvidesDescription ACE_ENV_ARG_PARAMETER);
     ACE_TRY_CHECK;
     
-    if (result == 0)
-      {
+    if (!result)
         return 0; // not equivalent
-      }
     
     if (_tao_any.any_owns_data ())
       {
@@ -21696,23 +22055,16 @@
             const IR::ProvidesDescription*,
             _tao_any.value ()
           );
-        
         return 1;
       }
     else
       {
         IR::ProvidesDescription *tmp;
-        ACE_NEW_RETURN (
-            tmp,
-            IR::ProvidesDescription,
-            0
-          );
-        
+      ACE_NEW_RETURN (tmp, IR::ProvidesDescription, 0);
         TAO_InputCDR stream (
             _tao_any._tao_get_cdr (),
             _tao_any._tao_byte_order ()
           );
-        
         if (stream >> *tmp)
           {
             ((CORBA::Any *)&_tao_any)->_tao_replace (
@@ -21721,7 +22073,6 @@
                 ACE_static_cast (void *, tmp),
                 IR::ProvidesDescription::_tao_any_destructor
               );
-            
             _tao_elem = tmp;
             return 1;
           }
@@ -21735,21 +22086,12 @@
   {
   }
   ACE_ENDTRY;
-  
   return 0;
 }
 
-
-// TAO_IDL - Generated from 
-// be/be_visitor_interface/any_op_cs.cpp:60
-
-void operator<<= (
-    CORBA::Any &_tao_any,
-    IR::UsesDef_ptr _tao_elem
-  )
+void operator<<= (CORBA::Any &_tao_any, IR::UsesDef_ptr _tao_elem)
 {
   TAO_OutputCDR stream;
-  
   if (stream << _tao_elem)
     {
       _tao_any._tao_replace (
@@ -21763,53 +22105,23 @@
     }
 }
 
-void operator<<= (
-    CORBA::Any &_tao_any,
-    IR::UsesDef_ptr *_tao_elem
-  )
-{
-  TAO_OutputCDR stream;
-  
-  if (stream << *_tao_elem)
-    {
-      _tao_any._tao_replace (
-          IR::_tc_UsesDef, 
-          TAO_ENCAP_BYTE_ORDER,
-          stream.begin (),
-          1,
-          *_tao_elem,
-          IR::UsesDef::_tao_any_destructor
-        );
-    }
-}
-
-CORBA::Boolean operator>>= (
-    const CORBA::Any &_tao_any,
-    IR::UsesDef_ptr &_tao_elem
-  )
+CORBA::Boolean operator>>= (const CORBA::Any &_tao_any, IR::UsesDef_ptr &_tao_elem)
 {
   ACE_TRY_NEW_ENV
   {
     _tao_elem = IR::UsesDef::_nil ();
     CORBA::TypeCode_var type = _tao_any.type ();
     
-    CORBA::Boolean result =
-      type->equivalent (
-          IR::_tc_UsesDef
-          ACE_ENV_ARG_PARAMETER
-        );
+    CORBA::Boolean result = type->equivalent (IR::_tc_UsesDef ACE_ENV_ARG_PARAMETER);
     ACE_TRY_CHECK;
     
     if (!result)
-      {
         return 0; // not equivalent
-      }
     
     TAO_InputCDR stream (
         _tao_any._tao_get_cdr (),
         _tao_any._tao_byte_order ()
       );
-    
     if (stream >> _tao_elem)
       {
         ((CORBA::Any *)&_tao_any)->_tao_replace (
@@ -21818,15 +22130,15 @@
             _tao_elem,
             IR::UsesDef::_tao_any_destructor
           );
-        
         return 1;
       }
   }
   ACE_CATCHANY
   {
+    _tao_elem = IR::UsesDef::_nil ();
+    return 0;
   }
   ACE_ENDTRY;
-  
   _tao_elem = IR::UsesDef::_nil ();
   return 0;
 }
@@ -21838,38 +22150,21 @@
 #  pragma instantiate TAO_Object_Manager<IR::UsesDef,IR::UsesDef_var>
 #endif /* ACE_HAS_EXPLICIT_TEMPLATE_INSTANTIATION */
 
-
-// TAO_IDL - Generated from 
-// be/be_visitor_structure/any_op_cs.cpp:58
-
-// Copying insertion.
-void operator<<= (
-    CORBA::Any &_tao_any,
-    const IR::UsesDescription &_tao_elem
-  )
+void operator<<= (CORBA::Any &_tao_any, const IR::UsesDescription &_tao_elem) // copying
 {
   TAO_OutputCDR stream;
-  
-  if (stream << _tao_elem)
-    {
+  stream << _tao_elem;
       _tao_any._tao_replace (
           IR::_tc_UsesDescription,
           TAO_ENCAP_BYTE_ORDER,
           stream.begin ()
         );
     }
-}
 
-// Non-copying insertion.
-void operator<<= (
-    CORBA::Any &_tao_any,
-    IR::UsesDescription *_tao_elem
-  )
+void operator<<= (CORBA::Any &_tao_any, IR::UsesDescription *_tao_elem) // non copying
 {
   TAO_OutputCDR stream;
-  
-  if (stream << *_tao_elem)
-    {
+  stream << *_tao_elem;
       _tao_any._tao_replace (
           IR::_tc_UsesDescription,
           TAO_ENCAP_BYTE_ORDER,
@@ -21879,43 +22174,24 @@
           IR::UsesDescription::_tao_any_destructor
         );
     }
-}
 
-// Extraction to non-const pointer (deprecated).
-CORBA::Boolean operator>>= (
-    const CORBA::Any &_tao_any,
-    IR::UsesDescription *&_tao_elem
-  )
+CORBA::Boolean operator>>= (const CORBA::Any &_tao_any, IR::UsesDescription *&_tao_elem)
 {
-  return _tao_any >>= ACE_const_cast (
-      const IR::UsesDescription *&,
-      _tao_elem
-    );
+  return _tao_any >>= ACE_const_cast(const IR::UsesDescription*&,_tao_elem);
 }
 
-// Extraction to const pointer.
-CORBA::Boolean operator>>= (
-    const CORBA::Any &_tao_any,
-    const IR::UsesDescription *&_tao_elem
-  )
+CORBA::Boolean operator>>= (const CORBA::Any &_tao_any, const IR::UsesDescription *&_tao_elem)
 {
   _tao_elem = 0;
-  
   ACE_TRY_NEW_ENV
   {
     CORBA::TypeCode_var type = _tao_any.type ();
-    
-    CORBA::Boolean result =
-      type->equivalent (
-          IR::_tc_UsesDescription
-          ACE_ENV_ARG_PARAMETER
-        );
+
+    CORBA::Boolean result = type->equivalent (IR::_tc_UsesDescription ACE_ENV_ARG_PARAMETER);
     ACE_TRY_CHECK;
     
-    if (result == 0)
-      {
+    if (!result)
         return 0; // not equivalent
-      }
     
     if (_tao_any.any_owns_data ())
       {
@@ -21923,23 +22199,16 @@
             const IR::UsesDescription*,
             _tao_any.value ()
           );
-        
         return 1;
       }
     else
       {
         IR::UsesDescription *tmp;
-        ACE_NEW_RETURN (
-            tmp,
-            IR::UsesDescription,
-            0
-          );
-        
+      ACE_NEW_RETURN (tmp, IR::UsesDescription, 0);
         TAO_InputCDR stream (
             _tao_any._tao_get_cdr (),
             _tao_any._tao_byte_order ()
           );
-        
         if (stream >> *tmp)
           {
             ((CORBA::Any *)&_tao_any)->_tao_replace (
@@ -21948,7 +22217,6 @@
                 ACE_static_cast (void *, tmp),
                 IR::UsesDescription::_tao_any_destructor
               );
-            
             _tao_elem = tmp;
             return 1;
           }
@@ -21962,22 +22230,15 @@
   {
   }
   ACE_ENDTRY;
-  
   return 0;
 }
 
-
-// TAO_IDL - Generated from 
-// be/be_visitor_sequence/any_op_cs.cpp:61
-
-// Copying insertion.
 void operator<<= (
     CORBA::Any &_tao_any,
     const IR::ProvidesDescSeq &_tao_elem
-  )
+  ) // copying
 {
   TAO_OutputCDR stream;
-  
   if (stream << _tao_elem)
     {
       _tao_any._tao_replace (
@@ -21988,16 +22249,10 @@
     }
 }
 
-// Non-copying insertion.
-void operator<<= (
-    CORBA::Any &_tao_any,
-    IR::ProvidesDescSeq *_tao_elem
-  )
+void operator<<= (CORBA::Any &_tao_any, IR::ProvidesDescSeq *_tao_elem) // non copying
 {
   TAO_OutputCDR stream;
-  
-  if (stream << *_tao_elem)
-    {
+  stream << *_tao_elem;
       _tao_any._tao_replace (
           IR::_tc_ProvidesDescSeq,
           TAO_ENCAP_BYTE_ORDER,
@@ -22007,13 +22262,8 @@
           IR::ProvidesDescSeq::_tao_any_destructor
         );
     }
-}
 
-// Extraction to non-const pointer (deprecated).
-CORBA::Boolean operator>>= (
-    const CORBA::Any &_tao_any,
-    IR::ProvidesDescSeq *&_tao_elem
-  )
+CORBA::Boolean operator>>= (const CORBA::Any &_tao_any, IR::ProvidesDescSeq *&_tao_elem)
 {
   return _tao_any >>= ACE_const_cast(
       const IR::ProvidesDescSeq*&,
@@ -22021,29 +22271,18 @@
     );
 }
 
-// Extraction to const pointer.
-CORBA::Boolean operator>>= (
-    const CORBA::Any &_tao_any,
-    const IR::ProvidesDescSeq *&_tao_elem
-  )
+CORBA::Boolean operator>>= (const CORBA::Any &_tao_any, const IR::ProvidesDescSeq *&_tao_elem)
 {
   _tao_elem = 0;
-  
   ACE_TRY_NEW_ENV
   {
     CORBA::TypeCode_var type = _tao_any.type ();
     
-    CORBA::Boolean result =
-      type->equivalent (
-          IR::_tc_ProvidesDescSeq
-          ACE_ENV_ARG_PARAMETER
-        );
+    CORBA::Boolean result = type->equivalent (IR::_tc_ProvidesDescSeq ACE_ENV_ARG_PARAMETER);
     ACE_TRY_CHECK;
     
     if (!result)
-      {
         return 0; // not equivalent
-      }
     
     if (_tao_any.any_owns_data ())
       {
@@ -22051,23 +22290,16 @@
             const IR::ProvidesDescSeq*,
             _tao_any.value ()
           );
-        
         return 1;
       }
     else
       {
-        IR::ProvidesDescSeq *tmp = 0;
-        ACE_NEW_RETURN (
-            tmp,
-            IR::ProvidesDescSeq,
-            0
-          );
-        
+      IR::ProvidesDescSeq *tmp;
+      ACE_NEW_RETURN (tmp, IR::ProvidesDescSeq, 0);
         TAO_InputCDR stream (
             _tao_any._tao_get_cdr (),
             _tao_any._tao_byte_order ()
           );
-        
         if (stream >> *tmp)
           {
             ((CORBA::Any *)&_tao_any)->_tao_replace (
@@ -22076,7 +22308,6 @@
                 ACE_static_cast (void *, tmp),
                 IR::ProvidesDescSeq::_tao_any_destructor
               );
-            
             _tao_elem = tmp;
             return 1;
           }
@@ -22090,22 +22321,15 @@
   {
   }
   ACE_ENDTRY;
-  
   return 0;
 }
 
-
-// TAO_IDL - Generated from 
-// be/be_visitor_sequence/any_op_cs.cpp:61
-
-// Copying insertion.
 void operator<<= (
     CORBA::Any &_tao_any,
     const IR::UsesDescSeq &_tao_elem
-  )
+  ) // copying
 {
   TAO_OutputCDR stream;
-  
   if (stream << _tao_elem)
     {
       _tao_any._tao_replace (
@@ -22116,16 +22340,10 @@
     }
 }
 
-// Non-copying insertion.
-void operator<<= (
-    CORBA::Any &_tao_any,
-    IR::UsesDescSeq *_tao_elem
-  )
+void operator<<= (CORBA::Any &_tao_any, IR::UsesDescSeq *_tao_elem) // non copying
 {
   TAO_OutputCDR stream;
-  
-  if (stream << *_tao_elem)
-    {
+  stream << *_tao_elem;
       _tao_any._tao_replace (
           IR::_tc_UsesDescSeq,
           TAO_ENCAP_BYTE_ORDER,
@@ -22135,13 +22353,8 @@
           IR::UsesDescSeq::_tao_any_destructor
         );
     }
-}
 
-// Extraction to non-const pointer (deprecated).
-CORBA::Boolean operator>>= (
-    const CORBA::Any &_tao_any,
-    IR::UsesDescSeq *&_tao_elem
-  )
+CORBA::Boolean operator>>= (const CORBA::Any &_tao_any, IR::UsesDescSeq *&_tao_elem)
 {
   return _tao_any >>= ACE_const_cast(
       const IR::UsesDescSeq*&,
@@ -22149,29 +22362,18 @@
     );
 }
 
-// Extraction to const pointer.
-CORBA::Boolean operator>>= (
-    const CORBA::Any &_tao_any,
-    const IR::UsesDescSeq *&_tao_elem
-  )
+CORBA::Boolean operator>>= (const CORBA::Any &_tao_any, const IR::UsesDescSeq *&_tao_elem)
 {
   _tao_elem = 0;
-  
   ACE_TRY_NEW_ENV
   {
     CORBA::TypeCode_var type = _tao_any.type ();
     
-    CORBA::Boolean result =
-      type->equivalent (
-          IR::_tc_UsesDescSeq
-          ACE_ENV_ARG_PARAMETER
-        );
+    CORBA::Boolean result = type->equivalent (IR::_tc_UsesDescSeq ACE_ENV_ARG_PARAMETER);
     ACE_TRY_CHECK;
     
     if (!result)
-      {
         return 0; // not equivalent
-      }
     
     if (_tao_any.any_owns_data ())
       {
@@ -22179,23 +22381,16 @@
             const IR::UsesDescSeq*,
             _tao_any.value ()
           );
-        
         return 1;
       }
     else
       {
-        IR::UsesDescSeq *tmp = 0;
-        ACE_NEW_RETURN (
-            tmp,
-            IR::UsesDescSeq,
-            0
-          );
-        
+      IR::UsesDescSeq *tmp;
+      ACE_NEW_RETURN (tmp, IR::UsesDescSeq, 0);
         TAO_InputCDR stream (
             _tao_any._tao_get_cdr (),
             _tao_any._tao_byte_order ()
           );
-        
         if (stream >> *tmp)
           {
             ((CORBA::Any *)&_tao_any)->_tao_replace (
@@ -22204,7 +22399,6 @@
                 ACE_static_cast (void *, tmp),
                 IR::UsesDescSeq::_tao_any_destructor
               );
-            
             _tao_elem = tmp;
             return 1;
           }
@@ -22218,21 +22412,12 @@
   {
   }
   ACE_ENDTRY;
-  
   return 0;
 }
 
-
-// TAO_IDL - Generated from 
-// be/be_visitor_interface/any_op_cs.cpp:60
-
-void operator<<= (
-    CORBA::Any &_tao_any,
-    IR::EventDef_ptr _tao_elem
-  )
+void operator<<= (CORBA::Any &_tao_any, IR::EventDef_ptr _tao_elem)
 {
   TAO_OutputCDR stream;
-  
   if (stream << _tao_elem)
     {
       _tao_any._tao_replace (
@@ -22246,53 +22431,23 @@
     }
 }
 
-void operator<<= (
-    CORBA::Any &_tao_any,
-    IR::EventDef_ptr *_tao_elem
-  )
-{
-  TAO_OutputCDR stream;
-  
-  if (stream << *_tao_elem)
-    {
-      _tao_any._tao_replace (
-          IR::_tc_EventDef, 
-          TAO_ENCAP_BYTE_ORDER,
-          stream.begin (),
-          1,
-          *_tao_elem,
-          IR::EventDef::_tao_any_destructor
-        );
-    }
-}
-
-CORBA::Boolean operator>>= (
-    const CORBA::Any &_tao_any,
-    IR::EventDef_ptr &_tao_elem
-  )
+CORBA::Boolean operator>>= (const CORBA::Any &_tao_any, IR::EventDef_ptr &_tao_elem)
 {
   ACE_TRY_NEW_ENV
   {
     _tao_elem = IR::EventDef::_nil ();
     CORBA::TypeCode_var type = _tao_any.type ();
     
-    CORBA::Boolean result =
-      type->equivalent (
-          IR::_tc_EventDef
-          ACE_ENV_ARG_PARAMETER
-        );
+    CORBA::Boolean result = type->equivalent (IR::_tc_EventDef ACE_ENV_ARG_PARAMETER);
     ACE_TRY_CHECK;
     
     if (!result)
-      {
         return 0; // not equivalent
-      }
     
     TAO_InputCDR stream (
         _tao_any._tao_get_cdr (),
         _tao_any._tao_byte_order ()
       );
-    
     if (stream >> _tao_elem)
       {
         ((CORBA::Any *)&_tao_any)->_tao_replace (
@@ -22301,15 +22456,15 @@
             _tao_elem,
             IR::EventDef::_tao_any_destructor
           );
-        
         return 1;
       }
   }
   ACE_CATCHANY
   {
+    _tao_elem = IR::EventDef::_nil ();
+    return 0;
   }
   ACE_ENDTRY;
-  
   _tao_elem = IR::EventDef::_nil ();
   return 0;
 }
@@ -22321,38 +22476,21 @@
 #  pragma instantiate TAO_Object_Manager<IR::EventDef,IR::EventDef_var>
 #endif /* ACE_HAS_EXPLICIT_TEMPLATE_INSTANTIATION */
 
-
-// TAO_IDL - Generated from 
-// be/be_visitor_structure/any_op_cs.cpp:58
-
-// Copying insertion.
-void operator<<= (
-    CORBA::Any &_tao_any,
-    const IR::EventDescription &_tao_elem
-  )
+void operator<<= (CORBA::Any &_tao_any, const IR::EventDescription &_tao_elem) // copying
 {
   TAO_OutputCDR stream;
-  
-  if (stream << _tao_elem)
-    {
+  stream << _tao_elem;
       _tao_any._tao_replace (
           IR::_tc_EventDescription,
           TAO_ENCAP_BYTE_ORDER,
           stream.begin ()
         );
     }
-}
 
-// Non-copying insertion.
-void operator<<= (
-    CORBA::Any &_tao_any,
-    IR::EventDescription *_tao_elem
-  )
+void operator<<= (CORBA::Any &_tao_any, IR::EventDescription *_tao_elem) // non copying
 {
   TAO_OutputCDR stream;
-  
-  if (stream << *_tao_elem)
-    {
+  stream << *_tao_elem;
       _tao_any._tao_replace (
           IR::_tc_EventDescription,
           TAO_ENCAP_BYTE_ORDER,
@@ -22362,43 +22500,24 @@
           IR::EventDescription::_tao_any_destructor
         );
     }
-}
 
-// Extraction to non-const pointer (deprecated).
-CORBA::Boolean operator>>= (
-    const CORBA::Any &_tao_any,
-    IR::EventDescription *&_tao_elem
-  )
+CORBA::Boolean operator>>= (const CORBA::Any &_tao_any, IR::EventDescription *&_tao_elem)
 {
-  return _tao_any >>= ACE_const_cast (
-      const IR::EventDescription *&,
-      _tao_elem
-    );
+  return _tao_any >>= ACE_const_cast(const IR::EventDescription*&,_tao_elem);
 }
 
-// Extraction to const pointer.
-CORBA::Boolean operator>>= (
-    const CORBA::Any &_tao_any,
-    const IR::EventDescription *&_tao_elem
-  )
+CORBA::Boolean operator>>= (const CORBA::Any &_tao_any, const IR::EventDescription *&_tao_elem)
 {
   _tao_elem = 0;
-  
   ACE_TRY_NEW_ENV
   {
     CORBA::TypeCode_var type = _tao_any.type ();
     
-    CORBA::Boolean result =
-      type->equivalent (
-          IR::_tc_EventDescription
-          ACE_ENV_ARG_PARAMETER
-        );
+    CORBA::Boolean result = type->equivalent (IR::_tc_EventDescription ACE_ENV_ARG_PARAMETER);
     ACE_TRY_CHECK;
     
-    if (result == 0)
-      {
+    if (!result)
         return 0; // not equivalent
-      }
     
     if (_tao_any.any_owns_data ())
       {
@@ -22406,23 +22525,16 @@
             const IR::EventDescription*,
             _tao_any.value ()
           );
-        
         return 1;
       }
     else
       {
         IR::EventDescription *tmp;
-        ACE_NEW_RETURN (
-            tmp,
-            IR::EventDescription,
-            0
-          );
-        
+      ACE_NEW_RETURN (tmp, IR::EventDescription, 0);
         TAO_InputCDR stream (
             _tao_any._tao_get_cdr (),
             _tao_any._tao_byte_order ()
           );
-        
         if (stream >> *tmp)
           {
             ((CORBA::Any *)&_tao_any)->_tao_replace (
@@ -22431,7 +22543,6 @@
                 ACE_static_cast (void *, tmp),
                 IR::EventDescription::_tao_any_destructor
               );
-            
             _tao_elem = tmp;
             return 1;
           }
@@ -22445,21 +22556,12 @@
   {
   }
   ACE_ENDTRY;
-  
   return 0;
 }
 
-
-// TAO_IDL - Generated from 
-// be/be_visitor_interface/any_op_cs.cpp:60
-
-void operator<<= (
-    CORBA::Any &_tao_any,
-    IR::EmitsDef_ptr _tao_elem
-  )
+void operator<<= (CORBA::Any &_tao_any, IR::EmitsDef_ptr _tao_elem)
 {
   TAO_OutputCDR stream;
-  
   if (stream << _tao_elem)
     {
       _tao_any._tao_replace (
@@ -22473,53 +22575,23 @@
     }
 }
 
-void operator<<= (
-    CORBA::Any &_tao_any,
-    IR::EmitsDef_ptr *_tao_elem
-  )
-{
-  TAO_OutputCDR stream;
-  
-  if (stream << *_tao_elem)
-    {
-      _tao_any._tao_replace (
-          IR::_tc_EmitsDef, 
-          TAO_ENCAP_BYTE_ORDER,
-          stream.begin (),
-          1,
-          *_tao_elem,
-          IR::EmitsDef::_tao_any_destructor
-        );
-    }
-}
-
-CORBA::Boolean operator>>= (
-    const CORBA::Any &_tao_any,
-    IR::EmitsDef_ptr &_tao_elem
-  )
+CORBA::Boolean operator>>= (const CORBA::Any &_tao_any, IR::EmitsDef_ptr &_tao_elem)
 {
   ACE_TRY_NEW_ENV
   {
     _tao_elem = IR::EmitsDef::_nil ();
     CORBA::TypeCode_var type = _tao_any.type ();
     
-    CORBA::Boolean result =
-      type->equivalent (
-          IR::_tc_EmitsDef
-          ACE_ENV_ARG_PARAMETER
-        );
+    CORBA::Boolean result = type->equivalent (IR::_tc_EmitsDef ACE_ENV_ARG_PARAMETER);
     ACE_TRY_CHECK;
     
     if (!result)
-      {
         return 0; // not equivalent
-      }
     
     TAO_InputCDR stream (
         _tao_any._tao_get_cdr (),
         _tao_any._tao_byte_order ()
       );
-    
     if (stream >> _tao_elem)
       {
         ((CORBA::Any *)&_tao_any)->_tao_replace (
@@ -22528,15 +22600,15 @@
             _tao_elem,
             IR::EmitsDef::_tao_any_destructor
           );
-        
         return 1;
       }
   }
   ACE_CATCHANY
   {
+    _tao_elem = IR::EmitsDef::_nil ();
+    return 0;
   }
   ACE_ENDTRY;
-  
   _tao_elem = IR::EmitsDef::_nil ();
   return 0;
 }
@@ -22548,17 +22620,9 @@
 #  pragma instantiate TAO_Object_Manager<IR::EmitsDef,IR::EmitsDef_var>
 #endif /* ACE_HAS_EXPLICIT_TEMPLATE_INSTANTIATION */
 
-
-// TAO_IDL - Generated from 
-// be/be_visitor_interface/any_op_cs.cpp:60
-
-void operator<<= (
-    CORBA::Any &_tao_any,
-    IR::PublishesDef_ptr _tao_elem
-  )
+void operator<<= (CORBA::Any &_tao_any, IR::PublishesDef_ptr _tao_elem)
 {
   TAO_OutputCDR stream;
-  
   if (stream << _tao_elem)
     {
       _tao_any._tao_replace (
@@ -22572,53 +22636,23 @@
     }
 }
 
-void operator<<= (
-    CORBA::Any &_tao_any,
-    IR::PublishesDef_ptr *_tao_elem
-  )
-{
-  TAO_OutputCDR stream;
-  
-  if (stream << *_tao_elem)
-    {
-      _tao_any._tao_replace (
-          IR::_tc_PublishesDef, 
-          TAO_ENCAP_BYTE_ORDER,
-          stream.begin (),
-          1,
-          *_tao_elem,
-          IR::PublishesDef::_tao_any_destructor
-        );
-    }
-}
-
-CORBA::Boolean operator>>= (
-    const CORBA::Any &_tao_any,
-    IR::PublishesDef_ptr &_tao_elem
-  )
+CORBA::Boolean operator>>= (const CORBA::Any &_tao_any, IR::PublishesDef_ptr &_tao_elem)
 {
   ACE_TRY_NEW_ENV
   {
     _tao_elem = IR::PublishesDef::_nil ();
     CORBA::TypeCode_var type = _tao_any.type ();
     
-    CORBA::Boolean result =
-      type->equivalent (
-          IR::_tc_PublishesDef
-          ACE_ENV_ARG_PARAMETER
-        );
+    CORBA::Boolean result = type->equivalent (IR::_tc_PublishesDef ACE_ENV_ARG_PARAMETER);
     ACE_TRY_CHECK;
     
     if (!result)
-      {
         return 0; // not equivalent
-      }
     
     TAO_InputCDR stream (
         _tao_any._tao_get_cdr (),
         _tao_any._tao_byte_order ()
       );
-    
     if (stream >> _tao_elem)
       {
         ((CORBA::Any *)&_tao_any)->_tao_replace (
@@ -22627,15 +22661,15 @@
             _tao_elem,
             IR::PublishesDef::_tao_any_destructor
           );
-        
         return 1;
       }
   }
   ACE_CATCHANY
   {
+    _tao_elem = IR::PublishesDef::_nil ();
+    return 0;
   }
   ACE_ENDTRY;
-  
   _tao_elem = IR::PublishesDef::_nil ();
   return 0;
 }
@@ -22647,17 +22681,9 @@
 #  pragma instantiate TAO_Object_Manager<IR::PublishesDef,IR::PublishesDef_var>
 #endif /* ACE_HAS_EXPLICIT_TEMPLATE_INSTANTIATION */
 
-
-// TAO_IDL - Generated from 
-// be/be_visitor_interface/any_op_cs.cpp:60
-
-void operator<<= (
-    CORBA::Any &_tao_any,
-    IR::ConsumesDef_ptr _tao_elem
-  )
+void operator<<= (CORBA::Any &_tao_any, IR::ConsumesDef_ptr _tao_elem)
 {
   TAO_OutputCDR stream;
-  
   if (stream << _tao_elem)
     {
       _tao_any._tao_replace (
@@ -22671,53 +22697,23 @@
     }
 }
 
-void operator<<= (
-    CORBA::Any &_tao_any,
-    IR::ConsumesDef_ptr *_tao_elem
-  )
-{
-  TAO_OutputCDR stream;
-  
-  if (stream << *_tao_elem)
-    {
-      _tao_any._tao_replace (
-          IR::_tc_ConsumesDef, 
-          TAO_ENCAP_BYTE_ORDER,
-          stream.begin (),
-          1,
-          *_tao_elem,
-          IR::ConsumesDef::_tao_any_destructor
-        );
-    }
-}
-
-CORBA::Boolean operator>>= (
-    const CORBA::Any &_tao_any,
-    IR::ConsumesDef_ptr &_tao_elem
-  )
+CORBA::Boolean operator>>= (const CORBA::Any &_tao_any, IR::ConsumesDef_ptr &_tao_elem)
 {
   ACE_TRY_NEW_ENV
   {
     _tao_elem = IR::ConsumesDef::_nil ();
     CORBA::TypeCode_var type = _tao_any.type ();
     
-    CORBA::Boolean result =
-      type->equivalent (
-          IR::_tc_ConsumesDef
-          ACE_ENV_ARG_PARAMETER
-        );
+    CORBA::Boolean result = type->equivalent (IR::_tc_ConsumesDef ACE_ENV_ARG_PARAMETER);
     ACE_TRY_CHECK;
     
     if (!result)
-      {
         return 0; // not equivalent
-      }
     
     TAO_InputCDR stream (
         _tao_any._tao_get_cdr (),
         _tao_any._tao_byte_order ()
       );
-    
     if (stream >> _tao_elem)
       {
         ((CORBA::Any *)&_tao_any)->_tao_replace (
@@ -22726,15 +22722,15 @@
             _tao_elem,
             IR::ConsumesDef::_tao_any_destructor
           );
-        
         return 1;
       }
   }
   ACE_CATCHANY
   {
+    _tao_elem = IR::ConsumesDef::_nil ();
+    return 0;
   }
   ACE_ENDTRY;
-  
   _tao_elem = IR::ConsumesDef::_nil ();
   return 0;
 }
@@ -22746,17 +22742,9 @@
 #  pragma instantiate TAO_Object_Manager<IR::ConsumesDef,IR::ConsumesDef_var>
 #endif /* ACE_HAS_EXPLICIT_TEMPLATE_INSTANTIATION */
 
-
-// TAO_IDL - Generated from 
-// be/be_visitor_interface/any_op_cs.cpp:60
-
-void operator<<= (
-    CORBA::Any &_tao_any,
-    IR::ComponentDef_ptr _tao_elem
-  )
+void operator<<= (CORBA::Any &_tao_any, IR::ComponentDef_ptr _tao_elem)
 {
   TAO_OutputCDR stream;
-  
   if (stream << _tao_elem)
     {
       _tao_any._tao_replace (
@@ -22770,53 +22758,23 @@
     }
 }
 
-void operator<<= (
-    CORBA::Any &_tao_any,
-    IR::ComponentDef_ptr *_tao_elem
-  )
-{
-  TAO_OutputCDR stream;
-  
-  if (stream << *_tao_elem)
-    {
-      _tao_any._tao_replace (
-          IR::_tc_ComponentDef, 
-          TAO_ENCAP_BYTE_ORDER,
-          stream.begin (),
-          1,
-          *_tao_elem,
-          IR::ComponentDef::_tao_any_destructor
-        );
-    }
-}
-
-CORBA::Boolean operator>>= (
-    const CORBA::Any &_tao_any,
-    IR::ComponentDef_ptr &_tao_elem
-  )
+CORBA::Boolean operator>>= (const CORBA::Any &_tao_any, IR::ComponentDef_ptr &_tao_elem)
 {
   ACE_TRY_NEW_ENV
   {
     _tao_elem = IR::ComponentDef::_nil ();
     CORBA::TypeCode_var type = _tao_any.type ();
     
-    CORBA::Boolean result =
-      type->equivalent (
-          IR::_tc_ComponentDef
-          ACE_ENV_ARG_PARAMETER
-        );
+    CORBA::Boolean result = type->equivalent (IR::_tc_ComponentDef ACE_ENV_ARG_PARAMETER);
     ACE_TRY_CHECK;
     
     if (!result)
-      {
         return 0; // not equivalent
-      }
     
     TAO_InputCDR stream (
         _tao_any._tao_get_cdr (),
         _tao_any._tao_byte_order ()
       );
-    
     if (stream >> _tao_elem)
       {
         ((CORBA::Any *)&_tao_any)->_tao_replace (
@@ -22825,15 +22783,15 @@
             _tao_elem,
             IR::ComponentDef::_tao_any_destructor
           );
-        
         return 1;
       }
   }
   ACE_CATCHANY
   {
+    _tao_elem = IR::ComponentDef::_nil ();
+    return 0;
   }
   ACE_ENDTRY;
-  
   _tao_elem = IR::ComponentDef::_nil ();
   return 0;
 }
@@ -22845,38 +22803,21 @@
 #  pragma instantiate TAO_Object_Manager<IR::ComponentDef,IR::ComponentDef_var>
 #endif /* ACE_HAS_EXPLICIT_TEMPLATE_INSTANTIATION */
 
-
-// TAO_IDL - Generated from 
-// be/be_visitor_structure/any_op_cs.cpp:58
-
-// Copying insertion.
-void operator<<= (
-    CORBA::Any &_tao_any,
-    const IR::ComponentDescription &_tao_elem
-  )
+void operator<<= (CORBA::Any &_tao_any, const IR::ComponentDescription &_tao_elem) // copying
 {
   TAO_OutputCDR stream;
-  
-  if (stream << _tao_elem)
-    {
+  stream << _tao_elem;
       _tao_any._tao_replace (
           IR::_tc_ComponentDescription,
           TAO_ENCAP_BYTE_ORDER,
           stream.begin ()
         );
     }
-}
 
-// Non-copying insertion.
-void operator<<= (
-    CORBA::Any &_tao_any,
-    IR::ComponentDescription *_tao_elem
-  )
+void operator<<= (CORBA::Any &_tao_any, IR::ComponentDescription *_tao_elem) // non copying
 {
   TAO_OutputCDR stream;
-  
-  if (stream << *_tao_elem)
-    {
+  stream << *_tao_elem;
       _tao_any._tao_replace (
           IR::_tc_ComponentDescription,
           TAO_ENCAP_BYTE_ORDER,
@@ -22886,43 +22827,24 @@
           IR::ComponentDescription::_tao_any_destructor
         );
     }
-}
 
-// Extraction to non-const pointer (deprecated).
-CORBA::Boolean operator>>= (
-    const CORBA::Any &_tao_any,
-    IR::ComponentDescription *&_tao_elem
-  )
+CORBA::Boolean operator>>= (const CORBA::Any &_tao_any, IR::ComponentDescription *&_tao_elem)
 {
-  return _tao_any >>= ACE_const_cast (
-      const IR::ComponentDescription *&,
-      _tao_elem
-    );
+  return _tao_any >>= ACE_const_cast(const IR::ComponentDescription*&,_tao_elem);
 }
 
-// Extraction to const pointer.
-CORBA::Boolean operator>>= (
-    const CORBA::Any &_tao_any,
-    const IR::ComponentDescription *&_tao_elem
-  )
+CORBA::Boolean operator>>= (const CORBA::Any &_tao_any, const IR::ComponentDescription *&_tao_elem)
 {
   _tao_elem = 0;
-  
   ACE_TRY_NEW_ENV
   {
     CORBA::TypeCode_var type = _tao_any.type ();
     
-    CORBA::Boolean result =
-      type->equivalent (
-          IR::_tc_ComponentDescription
-          ACE_ENV_ARG_PARAMETER
-        );
+    CORBA::Boolean result = type->equivalent (IR::_tc_ComponentDescription ACE_ENV_ARG_PARAMETER);
     ACE_TRY_CHECK;
     
-    if (result == 0)
-      {
+    if (!result)
         return 0; // not equivalent
-      }
     
     if (_tao_any.any_owns_data ())
       {
@@ -22930,23 +22852,16 @@
             const IR::ComponentDescription*,
             _tao_any.value ()
           );
-        
         return 1;
       }
     else
       {
         IR::ComponentDescription *tmp;
-        ACE_NEW_RETURN (
-            tmp,
-            IR::ComponentDescription,
-            0
-          );
-        
+      ACE_NEW_RETURN (tmp, IR::ComponentDescription, 0);
         TAO_InputCDR stream (
             _tao_any._tao_get_cdr (),
             _tao_any._tao_byte_order ()
           );
-        
         if (stream >> *tmp)
           {
             ((CORBA::Any *)&_tao_any)->_tao_replace (
@@ -22955,7 +22870,6 @@
                 ACE_static_cast (void *, tmp),
                 IR::ComponentDescription::_tao_any_destructor
               );
-            
             _tao_elem = tmp;
             return 1;
           }
@@ -22969,21 +22883,12 @@
   {
   }
   ACE_ENDTRY;
-  
   return 0;
 }
 
-
-// TAO_IDL - Generated from 
-// be/be_visitor_interface/any_op_cs.cpp:60
-
-void operator<<= (
-    CORBA::Any &_tao_any,
-    IR::PrimaryKeyDef_ptr _tao_elem
-  )
+void operator<<= (CORBA::Any &_tao_any, IR::PrimaryKeyDef_ptr _tao_elem)
 {
   TAO_OutputCDR stream;
-  
   if (stream << _tao_elem)
     {
       _tao_any._tao_replace (
@@ -22997,53 +22902,23 @@
     }
 }
 
-void operator<<= (
-    CORBA::Any &_tao_any,
-    IR::PrimaryKeyDef_ptr *_tao_elem
-  )
-{
-  TAO_OutputCDR stream;
-  
-  if (stream << *_tao_elem)
-    {
-      _tao_any._tao_replace (
-          IR::_tc_PrimaryKeyDef, 
-          TAO_ENCAP_BYTE_ORDER,
-          stream.begin (),
-          1,
-          *_tao_elem,
-          IR::PrimaryKeyDef::_tao_any_destructor
-        );
-    }
-}
-
-CORBA::Boolean operator>>= (
-    const CORBA::Any &_tao_any,
-    IR::PrimaryKeyDef_ptr &_tao_elem
-  )
+CORBA::Boolean operator>>= (const CORBA::Any &_tao_any, IR::PrimaryKeyDef_ptr &_tao_elem)
 {
   ACE_TRY_NEW_ENV
   {
     _tao_elem = IR::PrimaryKeyDef::_nil ();
     CORBA::TypeCode_var type = _tao_any.type ();
     
-    CORBA::Boolean result =
-      type->equivalent (
-          IR::_tc_PrimaryKeyDef
-          ACE_ENV_ARG_PARAMETER
-        );
+    CORBA::Boolean result = type->equivalent (IR::_tc_PrimaryKeyDef ACE_ENV_ARG_PARAMETER);
     ACE_TRY_CHECK;
     
     if (!result)
-      {
         return 0; // not equivalent
-      }
     
     TAO_InputCDR stream (
         _tao_any._tao_get_cdr (),
         _tao_any._tao_byte_order ()
       );
-    
     if (stream >> _tao_elem)
       {
         ((CORBA::Any *)&_tao_any)->_tao_replace (
@@ -23052,15 +22927,15 @@
             _tao_elem,
             IR::PrimaryKeyDef::_tao_any_destructor
           );
-        
         return 1;
       }
   }
   ACE_CATCHANY
   {
+    _tao_elem = IR::PrimaryKeyDef::_nil ();
+    return 0;
   }
   ACE_ENDTRY;
-  
   _tao_elem = IR::PrimaryKeyDef::_nil ();
   return 0;
 }
@@ -23072,38 +22947,21 @@
 #  pragma instantiate TAO_Object_Manager<IR::PrimaryKeyDef,IR::PrimaryKeyDef_var>
 #endif /* ACE_HAS_EXPLICIT_TEMPLATE_INSTANTIATION */
 
-
-// TAO_IDL - Generated from 
-// be/be_visitor_structure/any_op_cs.cpp:58
-
-// Copying insertion.
-void operator<<= (
-    CORBA::Any &_tao_any,
-    const IR::PrimaryKeyDescription &_tao_elem
-  )
+void operator<<= (CORBA::Any &_tao_any, const IR::PrimaryKeyDescription &_tao_elem) // copying
 {
   TAO_OutputCDR stream;
-  
-  if (stream << _tao_elem)
-    {
+  stream << _tao_elem;
       _tao_any._tao_replace (
           IR::_tc_PrimaryKeyDescription,
           TAO_ENCAP_BYTE_ORDER,
           stream.begin ()
         );
     }
-}
 
-// Non-copying insertion.
-void operator<<= (
-    CORBA::Any &_tao_any,
-    IR::PrimaryKeyDescription *_tao_elem
-  )
+void operator<<= (CORBA::Any &_tao_any, IR::PrimaryKeyDescription *_tao_elem) // non copying
 {
   TAO_OutputCDR stream;
-  
-  if (stream << *_tao_elem)
-    {
+  stream << *_tao_elem;
       _tao_any._tao_replace (
           IR::_tc_PrimaryKeyDescription,
           TAO_ENCAP_BYTE_ORDER,
@@ -23113,43 +22971,24 @@
           IR::PrimaryKeyDescription::_tao_any_destructor
         );
     }
-}
 
-// Extraction to non-const pointer (deprecated).
-CORBA::Boolean operator>>= (
-    const CORBA::Any &_tao_any,
-    IR::PrimaryKeyDescription *&_tao_elem
-  )
+CORBA::Boolean operator>>= (const CORBA::Any &_tao_any, IR::PrimaryKeyDescription *&_tao_elem)
 {
-  return _tao_any >>= ACE_const_cast (
-      const IR::PrimaryKeyDescription *&,
-      _tao_elem
-    );
+  return _tao_any >>= ACE_const_cast(const IR::PrimaryKeyDescription*&,_tao_elem);
 }
 
-// Extraction to const pointer.
-CORBA::Boolean operator>>= (
-    const CORBA::Any &_tao_any,
-    const IR::PrimaryKeyDescription *&_tao_elem
-  )
+CORBA::Boolean operator>>= (const CORBA::Any &_tao_any, const IR::PrimaryKeyDescription *&_tao_elem)
 {
   _tao_elem = 0;
-  
   ACE_TRY_NEW_ENV
   {
     CORBA::TypeCode_var type = _tao_any.type ();
     
-    CORBA::Boolean result =
-      type->equivalent (
-          IR::_tc_PrimaryKeyDescription
-          ACE_ENV_ARG_PARAMETER
-        );
+    CORBA::Boolean result = type->equivalent (IR::_tc_PrimaryKeyDescription ACE_ENV_ARG_PARAMETER);
     ACE_TRY_CHECK;
     
-    if (result == 0)
-      {
+    if (!result)
         return 0; // not equivalent
-      }
     
     if (_tao_any.any_owns_data ())
       {
@@ -23157,23 +22996,16 @@
             const IR::PrimaryKeyDescription*,
             _tao_any.value ()
           );
-        
         return 1;
       }
     else
       {
         IR::PrimaryKeyDescription *tmp;
-        ACE_NEW_RETURN (
-            tmp,
-            IR::PrimaryKeyDescription,
-            0
-          );
-        
+      ACE_NEW_RETURN (tmp, IR::PrimaryKeyDescription, 0);
         TAO_InputCDR stream (
             _tao_any._tao_get_cdr (),
             _tao_any._tao_byte_order ()
           );
-        
         if (stream >> *tmp)
           {
             ((CORBA::Any *)&_tao_any)->_tao_replace (
@@ -23182,7 +23014,6 @@
                 ACE_static_cast (void *, tmp),
                 IR::PrimaryKeyDescription::_tao_any_destructor
               );
-            
             _tao_elem = tmp;
             return 1;
           }
@@ -23196,21 +23027,12 @@
   {
   }
   ACE_ENDTRY;
-  
   return 0;
 }
 
-
-// TAO_IDL - Generated from 
-// be/be_visitor_interface/any_op_cs.cpp:60
-
-void operator<<= (
-    CORBA::Any &_tao_any,
-    IR::FactoryDef_ptr _tao_elem
-  )
+void operator<<= (CORBA::Any &_tao_any, IR::FactoryDef_ptr _tao_elem)
 {
   TAO_OutputCDR stream;
-  
   if (stream << _tao_elem)
     {
       _tao_any._tao_replace (
@@ -23224,53 +23046,23 @@
     }
 }
 
-void operator<<= (
-    CORBA::Any &_tao_any,
-    IR::FactoryDef_ptr *_tao_elem
-  )
-{
-  TAO_OutputCDR stream;
-  
-  if (stream << *_tao_elem)
-    {
-      _tao_any._tao_replace (
-          IR::_tc_FactoryDef, 
-          TAO_ENCAP_BYTE_ORDER,
-          stream.begin (),
-          1,
-          *_tao_elem,
-          IR::FactoryDef::_tao_any_destructor
-        );
-    }
-}
-
-CORBA::Boolean operator>>= (
-    const CORBA::Any &_tao_any,
-    IR::FactoryDef_ptr &_tao_elem
-  )
+CORBA::Boolean operator>>= (const CORBA::Any &_tao_any, IR::FactoryDef_ptr &_tao_elem)
 {
   ACE_TRY_NEW_ENV
   {
     _tao_elem = IR::FactoryDef::_nil ();
     CORBA::TypeCode_var type = _tao_any.type ();
     
-    CORBA::Boolean result =
-      type->equivalent (
-          IR::_tc_FactoryDef
-          ACE_ENV_ARG_PARAMETER
-        );
+    CORBA::Boolean result = type->equivalent (IR::_tc_FactoryDef ACE_ENV_ARG_PARAMETER);
     ACE_TRY_CHECK;
     
     if (!result)
-      {
         return 0; // not equivalent
-      }
     
     TAO_InputCDR stream (
         _tao_any._tao_get_cdr (),
         _tao_any._tao_byte_order ()
       );
-    
     if (stream >> _tao_elem)
       {
         ((CORBA::Any *)&_tao_any)->_tao_replace (
@@ -23279,15 +23071,15 @@
             _tao_elem,
             IR::FactoryDef::_tao_any_destructor
           );
-        
         return 1;
       }
   }
   ACE_CATCHANY
   {
+    _tao_elem = IR::FactoryDef::_nil ();
+    return 0;
   }
   ACE_ENDTRY;
-  
   _tao_elem = IR::FactoryDef::_nil ();
   return 0;
 }
@@ -23299,17 +23091,9 @@
 #  pragma instantiate TAO_Object_Manager<IR::FactoryDef,IR::FactoryDef_var>
 #endif /* ACE_HAS_EXPLICIT_TEMPLATE_INSTANTIATION */
 
-
-// TAO_IDL - Generated from 
-// be/be_visitor_interface/any_op_cs.cpp:60
-
-void operator<<= (
-    CORBA::Any &_tao_any,
-    IR::FinderDef_ptr _tao_elem
-  )
+void operator<<= (CORBA::Any &_tao_any, IR::FinderDef_ptr _tao_elem)
 {
   TAO_OutputCDR stream;
-  
   if (stream << _tao_elem)
     {
       _tao_any._tao_replace (
@@ -23323,53 +23107,23 @@
     }
 }
 
-void operator<<= (
-    CORBA::Any &_tao_any,
-    IR::FinderDef_ptr *_tao_elem
-  )
-{
-  TAO_OutputCDR stream;
-  
-  if (stream << *_tao_elem)
-    {
-      _tao_any._tao_replace (
-          IR::_tc_FinderDef, 
-          TAO_ENCAP_BYTE_ORDER,
-          stream.begin (),
-          1,
-          *_tao_elem,
-          IR::FinderDef::_tao_any_destructor
-        );
-    }
-}
-
-CORBA::Boolean operator>>= (
-    const CORBA::Any &_tao_any,
-    IR::FinderDef_ptr &_tao_elem
-  )
+CORBA::Boolean operator>>= (const CORBA::Any &_tao_any, IR::FinderDef_ptr &_tao_elem)
 {
   ACE_TRY_NEW_ENV
   {
     _tao_elem = IR::FinderDef::_nil ();
     CORBA::TypeCode_var type = _tao_any.type ();
     
-    CORBA::Boolean result =
-      type->equivalent (
-          IR::_tc_FinderDef
-          ACE_ENV_ARG_PARAMETER
-        );
+    CORBA::Boolean result = type->equivalent (IR::_tc_FinderDef ACE_ENV_ARG_PARAMETER);
     ACE_TRY_CHECK;
     
     if (!result)
-      {
         return 0; // not equivalent
-      }
     
     TAO_InputCDR stream (
         _tao_any._tao_get_cdr (),
         _tao_any._tao_byte_order ()
       );
-    
     if (stream >> _tao_elem)
       {
         ((CORBA::Any *)&_tao_any)->_tao_replace (
@@ -23378,15 +23132,15 @@
             _tao_elem,
             IR::FinderDef::_tao_any_destructor
           );
-        
         return 1;
       }
   }
   ACE_CATCHANY
   {
+    _tao_elem = IR::FinderDef::_nil ();
+    return 0;
   }
   ACE_ENDTRY;
-  
   _tao_elem = IR::FinderDef::_nil ();
   return 0;
 }
@@ -23398,17 +23152,9 @@
 #  pragma instantiate TAO_Object_Manager<IR::FinderDef,IR::FinderDef_var>
 #endif /* ACE_HAS_EXPLICIT_TEMPLATE_INSTANTIATION */
 
-
-// TAO_IDL - Generated from 
-// be/be_visitor_interface/any_op_cs.cpp:60
-
-void operator<<= (
-    CORBA::Any &_tao_any,
-    IR::HomeDef_ptr _tao_elem
-  )
+void operator<<= (CORBA::Any &_tao_any, IR::HomeDef_ptr _tao_elem)
 {
   TAO_OutputCDR stream;
-  
   if (stream << _tao_elem)
     {
       _tao_any._tao_replace (
@@ -23422,53 +23168,23 @@
     }
 }
 
-void operator<<= (
-    CORBA::Any &_tao_any,
-    IR::HomeDef_ptr *_tao_elem
-  )
-{
-  TAO_OutputCDR stream;
-  
-  if (stream << *_tao_elem)
-    {
-      _tao_any._tao_replace (
-          IR::_tc_HomeDef, 
-          TAO_ENCAP_BYTE_ORDER,
-          stream.begin (),
-          1,
-          *_tao_elem,
-          IR::HomeDef::_tao_any_destructor
-        );
-    }
-}
-
-CORBA::Boolean operator>>= (
-    const CORBA::Any &_tao_any,
-    IR::HomeDef_ptr &_tao_elem
-  )
+CORBA::Boolean operator>>= (const CORBA::Any &_tao_any, IR::HomeDef_ptr &_tao_elem)
 {
   ACE_TRY_NEW_ENV
   {
     _tao_elem = IR::HomeDef::_nil ();
     CORBA::TypeCode_var type = _tao_any.type ();
     
-    CORBA::Boolean result =
-      type->equivalent (
-          IR::_tc_HomeDef
-          ACE_ENV_ARG_PARAMETER
-        );
+    CORBA::Boolean result = type->equivalent (IR::_tc_HomeDef ACE_ENV_ARG_PARAMETER);
     ACE_TRY_CHECK;
     
     if (!result)
-      {
         return 0; // not equivalent
-      }
     
     TAO_InputCDR stream (
         _tao_any._tao_get_cdr (),
         _tao_any._tao_byte_order ()
       );
-    
     if (stream >> _tao_elem)
       {
         ((CORBA::Any *)&_tao_any)->_tao_replace (
@@ -23477,15 +23193,15 @@
             _tao_elem,
             IR::HomeDef::_tao_any_destructor
           );
-        
         return 1;
       }
   }
   ACE_CATCHANY
   {
+    _tao_elem = IR::HomeDef::_nil ();
+    return 0;
   }
   ACE_ENDTRY;
-  
   _tao_elem = IR::HomeDef::_nil ();
   return 0;
 }
@@ -23497,38 +23213,21 @@
 #  pragma instantiate TAO_Object_Manager<IR::HomeDef,IR::HomeDef_var>
 #endif /* ACE_HAS_EXPLICIT_TEMPLATE_INSTANTIATION */
 
-
-// TAO_IDL - Generated from 
-// be/be_visitor_structure/any_op_cs.cpp:58
-
-// Copying insertion.
-void operator<<= (
-    CORBA::Any &_tao_any,
-    const IR::HomeDescription &_tao_elem
-  )
+void operator<<= (CORBA::Any &_tao_any, const IR::HomeDescription &_tao_elem) // copying
 {
   TAO_OutputCDR stream;
-  
-  if (stream << _tao_elem)
-    {
+  stream << _tao_elem;
       _tao_any._tao_replace (
           IR::_tc_HomeDescription,
           TAO_ENCAP_BYTE_ORDER,
           stream.begin ()
         );
     }
-}
 
-// Non-copying insertion.
-void operator<<= (
-    CORBA::Any &_tao_any,
-    IR::HomeDescription *_tao_elem
-  )
+void operator<<= (CORBA::Any &_tao_any, IR::HomeDescription *_tao_elem) // non copying
 {
   TAO_OutputCDR stream;
-  
-  if (stream << *_tao_elem)
-    {
+  stream << *_tao_elem;
       _tao_any._tao_replace (
           IR::_tc_HomeDescription,
           TAO_ENCAP_BYTE_ORDER,
@@ -23538,43 +23237,24 @@
           IR::HomeDescription::_tao_any_destructor
         );
     }
-}
 
-// Extraction to non-const pointer (deprecated).
-CORBA::Boolean operator>>= (
-    const CORBA::Any &_tao_any,
-    IR::HomeDescription *&_tao_elem
-  )
+CORBA::Boolean operator>>= (const CORBA::Any &_tao_any, IR::HomeDescription *&_tao_elem)
 {
-  return _tao_any >>= ACE_const_cast (
-      const IR::HomeDescription *&,
-      _tao_elem
-    );
+  return _tao_any >>= ACE_const_cast(const IR::HomeDescription*&,_tao_elem);
 }
 
-// Extraction to const pointer.
-CORBA::Boolean operator>>= (
-    const CORBA::Any &_tao_any,
-    const IR::HomeDescription *&_tao_elem
-  )
+CORBA::Boolean operator>>= (const CORBA::Any &_tao_any, const IR::HomeDescription *&_tao_elem)
 {
   _tao_elem = 0;
-  
   ACE_TRY_NEW_ENV
   {
     CORBA::TypeCode_var type = _tao_any.type ();
     
-    CORBA::Boolean result =
-      type->equivalent (
-          IR::_tc_HomeDescription
-          ACE_ENV_ARG_PARAMETER
-        );
+    CORBA::Boolean result = type->equivalent (IR::_tc_HomeDescription ACE_ENV_ARG_PARAMETER);
     ACE_TRY_CHECK;
     
-    if (result == 0)
-      {
+    if (!result)
         return 0; // not equivalent
-      }
     
     if (_tao_any.any_owns_data ())
       {
@@ -23582,23 +23262,16 @@
             const IR::HomeDescription*,
             _tao_any.value ()
           );
-        
         return 1;
       }
     else
       {
         IR::HomeDescription *tmp;
-        ACE_NEW_RETURN (
-            tmp,
-            IR::HomeDescription,
-            0
-          );
-        
+      ACE_NEW_RETURN (tmp, IR::HomeDescription, 0);
         TAO_InputCDR stream (
             _tao_any._tao_get_cdr (),
             _tao_any._tao_byte_order ()
           );
-        
         if (stream >> *tmp)
           {
             ((CORBA::Any *)&_tao_any)->_tao_replace (
@@ -23607,7 +23280,6 @@
                 ACE_static_cast (void *, tmp),
                 IR::HomeDescription::_tao_any_destructor
               );
-            
             _tao_elem = tmp;
             return 1;
           }
@@ -23621,7 +23293,6 @@
   {
   }
   ACE_ENDTRY;
-  
   return 0;
 }
 
@@ -23656,11 +23327,6 @@
     // If length is 0 we return true.
     if (0 >= _tao_seq_len) 
       return 1;
-    // Add a check to the length of the sequence
-    // to make sure it does not exceed the length
-    // of the stream. (See bug 58.)
-    if (_tao_seq_len > strm.length())
-      return 0;
     // retrieve all the elements
     CORBA::Boolean _tao_marshal_flag = 1;
     for (CORBA::ULong i = 0; i < _tao_sequence.length () && _tao_marshal_flag; i++)
@@ -23703,11 +23369,6 @@
     // If length is 0 we return true.
     if (0 >= _tao_seq_len) 
       return 1;
-    // Add a check to the length of the sequence
-    // to make sure it does not exceed the length
-    // of the stream. (See bug 58.)
-    if (_tao_seq_len > strm.length())
-      return 0;
     // retrieve all the elements
     CORBA::Boolean _tao_marshal_flag = 1;
     for (CORBA::ULong i = 0; i < _tao_sequence.length () && _tao_marshal_flag; i++)
@@ -23750,11 +23411,6 @@
     // If length is 0 we return true.
     if (0 >= _tao_seq_len) 
       return 1;
-    // Add a check to the length of the sequence
-    // to make sure it does not exceed the length
-    // of the stream. (See bug 58.)
-    if (_tao_seq_len > strm.length())
-      return 0;
     // retrieve all the elements
     CORBA::Boolean _tao_marshal_flag = 1;
     for (CORBA::ULong i = 0; i < _tao_sequence.length () && _tao_marshal_flag; i++)
@@ -23797,11 +23453,6 @@
     // If length is 0 we return true.
     if (0 >= _tao_seq_len) 
       return 1;
-    // Add a check to the length of the sequence
-    // to make sure it does not exceed the length
-    // of the stream. (See bug 58.)
-    if (_tao_seq_len > strm.length())
-      return 0;
     // retrieve all the elements
     CORBA::Boolean _tao_marshal_flag = 1;
     for (CORBA::ULong i = 0; i < _tao_sequence.length () && _tao_marshal_flag; i++)
@@ -23844,11 +23495,6 @@
     // If length is 0 we return true.
     if (0 >= _tao_seq_len) 
       return 1;
-    // Add a check to the length of the sequence
-    // to make sure it does not exceed the length
-    // of the stream. (See bug 58.)
-    if (_tao_seq_len > strm.length())
-      return 0;
     // retrieve all the elements
     CORBA::Boolean _tao_marshal_flag = 1;
     for (CORBA::ULong i = 0; i < _tao_sequence.length () && _tao_marshal_flag; i++)
@@ -23891,11 +23537,6 @@
     // If length is 0 we return true.
     if (0 >= _tao_seq_len) 
       return 1;
-    // Add a check to the length of the sequence
-    // to make sure it does not exceed the length
-    // of the stream. (See bug 58.)
-    if (_tao_seq_len > strm.length())
-      return 0;
     // retrieve all the elements
     CORBA::Boolean _tao_marshal_flag = 1;
     for (CORBA::ULong i = 0; i < _tao_sequence.length () && _tao_marshal_flag; i++)
@@ -23938,11 +23579,6 @@
     // If length is 0 we return true.
     if (0 >= _tao_seq_len) 
       return 1;
-    // Add a check to the length of the sequence
-    // to make sure it does not exceed the length
-    // of the stream. (See bug 58.)
-    if (_tao_seq_len > strm.length())
-      return 0;
     // retrieve all the elements
     CORBA::Boolean _tao_marshal_flag = 1;
     for (CORBA::ULong i = 0; i < _tao_sequence.length () && _tao_marshal_flag; i++)
@@ -23985,11 +23621,6 @@
     // If length is 0 we return true.
     if (0 >= _tao_seq_len) 
       return 1;
-    // Add a check to the length of the sequence
-    // to make sure it does not exceed the length
-    // of the stream. (See bug 58.)
-    if (_tao_seq_len > strm.length())
-      return 0;
     // retrieve all the elements
     CORBA::Boolean _tao_marshal_flag = 1;
     for (CORBA::ULong i = 0; i < _tao_sequence.length () && _tao_marshal_flag; i++)
@@ -24032,11 +23663,6 @@
     // If length is 0 we return true.
     if (0 >= _tao_seq_len) 
       return 1;
-    // Add a check to the length of the sequence
-    // to make sure it does not exceed the length
-    // of the stream. (See bug 58.)
-    if (_tao_seq_len > strm.length())
-      return 0;
     // retrieve all the elements
     CORBA::Boolean _tao_marshal_flag = 1;
     for (CORBA::ULong i = 0; i < _tao_sequence.length () && _tao_marshal_flag; i++)
@@ -24079,11 +23705,6 @@
     // If length is 0 we return true.
     if (0 >= _tao_seq_len) 
       return 1;
-    // Add a check to the length of the sequence
-    // to make sure it does not exceed the length
-    // of the stream. (See bug 58.)
-    if (_tao_seq_len > strm.length())
-      return 0;
     // retrieve all the elements
     CORBA::Boolean _tao_marshal_flag = 1;
     for (CORBA::ULong i = 0; i < _tao_sequence.length () && _tao_marshal_flag; i++)
@@ -24234,11 +23855,6 @@
     // If length is 0 we return true.
     if (0 >= _tao_seq_len) 
       return 1;
-    // Add a check to the length of the sequence
-    // to make sure it does not exceed the length
-    // of the stream. (See bug 58.)
-    if (_tao_seq_len > strm.length())
-      return 0;
     // retrieve all the elements
     CORBA::Boolean _tao_marshal_flag = 1;
     for (CORBA::ULong i = 0; i < _tao_sequence.length () && _tao_marshal_flag; i++)
@@ -24281,11 +23897,6 @@
     // If length is 0 we return true.
     if (0 >= _tao_seq_len) 
       return 1;
-    // Add a check to the length of the sequence
-    // to make sure it does not exceed the length
-    // of the stream. (See bug 58.)
-    if (_tao_seq_len > strm.length())
-      return 0;
     // retrieve all the elements
     CORBA::Boolean _tao_marshal_flag = 1;
     for (CORBA::ULong i = 0; i < _tao_sequence.length () && _tao_marshal_flag; i++)
@@ -24620,4 +24231,3 @@
   ACE_ENDTRY;
   return 0;
 }
-
