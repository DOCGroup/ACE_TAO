project : acelib, taoversion {
  tao        = 1
  includes  += $(TAO_ROOT) $(TAO_ROOT)/tao
  sharedname = TAO
  libflags  += TAO_AS_STATIC_LIBS
  dllflags   = TAO_BUILD_DLL

  // Override the defaults due to the
  // existence of orb.idl
  IDL_Files {
  }

  Source_Files(TAO_COMPONENTS) {
    Pluggable_Protocols {
      Transport_Acceptor.cpp
      Transport_Connector.cpp
      Transport.cpp
      Incoming_Message_Queue.cpp
      Notify_Handler.cpp
      Resume_Handle.cpp
      Profile.cpp
      Endpoint.cpp
      Connector_Registry.cpp
      Connection_Handler.cpp
      Acceptor_Registry.cpp
      Protocol_Factory.cpp
      Acceptor_Filter.cpp
      iiop_endpoints.cpp
      IIOP_Factory.cpp
      IIOP_Lite_Factory.cpp
      IIOP_Profile.cpp
      IIOP_Transport.cpp
      IIOP_Connector.cpp
      IIOP_Acceptor.cpp
      IIOP_Connection_Handler.cpp
      IIOP_Endpoint.cpp
      IIOPC.cpp
    }

    Pluggable_Messaging {
      Pluggable_Messaging.cpp
      Pluggable_Messaging_Utils.cpp
      GIOP_Message_Base.cpp
      GIOP_Message_Lite.cpp
      GIOP_Message_Generator_Parser.cpp
      GIOP_Message_Generator_Parser_10.cpp
      GIOP_Message_Generator_Parser_11.cpp
      GIOP_Message_Generator_Parser_12.cpp
      GIOP_Message_Generator_Parser_Impl.cpp
      GIOP_Utils.cpp
      GIOP_Message_Locate_Header.cpp
      target_specification.cpp
      GIOP_Message_State.cpp
      GIOP_Message_Version.cpp
      Tagged_Profile.cpp
    }
    Default_Resources {
      default_client.cpp
      default_server.cpp
      default_resource.cpp
      xt_resource.cpp
      qt_resource.cpp
    }
    Interpretive_Marshaling {
      append.cpp
      Marshal.cpp
      skip.cpp
    }
    IDL_Compiler {
      Managed_Types.cpp
    }
    ORB_Core {
      Any.cpp
      CORBA_String.cpp
      CurrentC.cpp
      Exception.cpp
      WrongTransactionC.cpp
      Environment.cpp
      Object.cpp
      LocalObject.cpp
      ObjectIDList.cpp
      ORB.cpp
      corbafwd.cpp
      Policy_ForwardC.cpp
      PolicyC.cpp
      Policy_Validator.cpp
      Encodable.cpp
      Abstract_Servant_Base.cpp
      Object_Proxy_Broker.cpp
      Remote_Object_Proxy_Broker.cpp
      Object_Proxy_Impl.cpp
      Remote_Object_Proxy_Impl.cpp
      DomainC.cpp
      TimeBaseC.cpp
      Principal.cpp
      Sequence.cpp
      MProfile.cpp
      Stub.cpp
      Typecode.cpp
      AbstractBase.cpp
      ValueBase.cpp
      ValueFactory.cpp
      ValueFactory_Map.cpp
      CDR.cpp
      Client_Strategy_Factory.cpp
      debug.cpp
      Object_KeyC.cpp
      Protocols_Hooks.cpp
      Default_Protocols_Hooks.cpp
      Messaging_SyncScopeC.cpp
      Invocation.cpp
      Invocation_Endpoint_Selectors.cpp
      Asynch_Invocation.cpp
      operation_details.cpp
      ClientRequestInfo.cpp
      ClientRequestInfo_i.cpp
      RequestInfo_Util.cpp
      ClientInterceptorAdapter.cpp
      ObjectReferenceTemplateC.cpp
      PortableInterceptorC.cpp
      PICurrent.cpp
      PICurrent_ORBInitializer.cpp
      DynamicC.cpp
      OctetSeqC.cpp
      StringSeqC.cpp
      ORB_Core.cpp
      Collocation_Resolver.cpp
      Default_Collocation_Resolver.cpp
      Stub_Factory.cpp
      ORB_Table.cpp
      LF_Follower.cpp
      LF_Follower_Auto_Ptr.cpp
      LF_Follower_Auto_Adder.cpp
      Leader_Follower.cpp
      Leader_Follower_Flushing_Strategy.cpp
      LF_Event.cpp
      LF_Event_Binder.cpp
      LF_Event_Loop_Thread_Helper.cpp
      LF_Strategy.cpp
      LF_Strategy_Complete.cpp
      params.cpp
      Resource_Factory.cpp
      Server_Strategy_Factory.cpp
      Sync_Strategies.cpp
      TAO_Internal.cpp
      TAO_Server_Request.cpp
      Typecode_Constants.cpp
      TypeCodeFactory_Adapter.cpp
      Wait_Strategy.cpp
      Wait_On_Read.cpp
      Wait_On_Reactor.cpp
      Wait_On_Leader_Follower.cpp
      Transport_Mux_Strategy.cpp
      Exclusive_TMS.cpp
      Muxed_TMS.cpp
      Reply_Dispatcher.cpp
      Synch_Reply_Dispatcher.cpp
      Synch_Refcountable.cpp
      Asynch_Reply_Dispatcher_Base.cpp
      IOPC.cpp
      PollableC.cpp
      CONV_FRAMEC.cpp
      Tagged_Components.cpp
      Service_Context.cpp
      GIOPC.cpp
      BoundsC.cpp
      TAOC.cpp
      Object_Loader.cpp
      TAO_Singleton_Manager.cpp
      DLL_ORB.cpp
      Adapter.cpp
      Services_Activate.cpp
      Service_Callbacks.cpp
      Parser_Registry.cpp
      IOR_Parser.cpp
      DLL_Parser.cpp
      FILE_Parser.cpp
      CORBALOC_Parser.cpp
      CORBANAME_Parser.cpp
      MCAST_Parser.cpp
      Bind_Dispatcher_Guard.cpp
      Fault_Tolerance_Service.cpp
      Interceptor_List.cpp
      IFR_Client_Adapter.cpp
      ORBInitInfo.cpp
      ORBInitializer_Registry.cpp
      PolicyFactory_Registry.cpp
      Cache_Entries.cpp
      Base_Transport_Property.cpp
      Transport_Cache_Manager.cpp
      Cleanup_Func_Registry.cpp
      Transport_Descriptor_Interface.cpp
      Object_Ref_Table.cpp
      BiDir_Adapter.cpp
      CodecFactory.cpp
      CodecFactory_ORBInitializer.cpp
      CDR_Encaps_Codec.cpp
      Endpoint_Selector_Factory.cpp
      Flushing_Strategy.cpp
      Block_Flushing_Strategy.cpp
      Reactive_Flushing_Strategy.cpp
      Connect_Strategy.cpp
      Blocked_Connect_Strategy.cpp
      Reactive_Connect_Strategy.cpp
      LF_Connect_Strategy.cpp
      Queued_Message.cpp
      Synch_Queued_Message.cpp
      Asynch_Queued_Message.cpp
      Transport_Timer.cpp
      Connection_Purging_Strategy.cpp
      LRU_Connection_Purging_Strategy.cpp
      Policy_Set.cpp
      Default_Endpoint_Selector_Factory.cpp
      Thread_Lane_Resources.cpp
      Thread_Lane_Resources_Manager.cpp
      Default_Thread_Lane_Resources_Manager.cpp
      Default_Stub_Factory.cpp
      Request_Dispatcher.cpp
      Policy_Manager.cpp
      Buffering_Constraint_Policy.cpp
      Messaging_PolicyValueC.cpp
      Services.cpp
      NVList.cpp
      IFR_TypeCodes.cpp
      Dynamic_Adapter.cpp
    }
  }
}
