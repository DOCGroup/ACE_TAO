// $Id$

// ******  Code generated by the The ACE ORB (TAO) IDL Compiler *******
// TAO ORB and the TAO IDL Compiler have been developed by Washington 
// University Computer Science's Distributed Object Computing Group.
//
// Information on TAO is available at
//                 http://www.cs.wustl.edu/~schmidt/TAO.html

// *************************************************************
// Inline operations for class TAO_ObjectKey
// *************************************************************

ACE_INLINE
TAO_ObjectKey::TAO_ObjectKey (void)
{
}

ACE_INLINE
TAO_ObjectKey::TAO_ObjectKey (CORBA::ULong max)
  :  TAO_Unbounded_Sequence<CORBA::Octet> (max)
{
}

ACE_INLINE
TAO_ObjectKey::TAO_ObjectKey (CORBA::ULong max,
                                CORBA::ULong length,
                                CORBA::Octet *data,
                                CORBA::Boolean release)
  :  TAO_Unbounded_Sequence<CORBA::Octet> (max, length, data, release)
{
}

ACE_INLINE
TAO_ObjectKey::TAO_ObjectKey (const TAO_ObjectKey &rhs)
  :  TAO_Unbounded_Sequence<CORBA::Octet> (rhs)
{
}

ACE_INLINE TAO_ObjectKey&
TAO_ObjectKey::operator= (const TAO_ObjectKey &rhs)
{
  if (this == &rhs)
    return *this;

  TAO_Unbounded_Sequence<CORBA::Octet>::operator= (rhs);
  return *this;
}

// *************************************************************
// Inline operations for class TAO_ObjectKey_var
// *************************************************************

ACE_INLINE
TAO_ObjectKey_var::TAO_ObjectKey_var (void) // default constructor
	: ptr_ (0)
{}

ACE_INLINE
TAO_ObjectKey_var::TAO_ObjectKey_var (TAO_ObjectKey *p)
	: ptr_ (p)
{}

ACE_INLINE
TAO_ObjectKey_var::TAO_ObjectKey_var (const TAO_ObjectKey_var &p) // copy constructor
{
  if (p.ptr_)
    ACE_NEW (this->ptr_, 
             TAO_ObjectKey(*p.ptr_));
  else
    this->ptr_ = 0;
}

ACE_INLINE
TAO_ObjectKey_var::~TAO_ObjectKey_var (void) // destructor
{
  delete this->ptr_;
}

ACE_INLINE TAO_ObjectKey_var &
TAO_ObjectKey_var::operator= (TAO_ObjectKey *p)
{
  delete this->ptr_;
  this->ptr_ = p;
  return *this;
}

ACE_INLINE TAO_ObjectKey_var &
TAO_ObjectKey_var::operator= (const TAO_ObjectKey_var &p) // deep copy
{
  if (this != &p)
  {
    delete this->ptr_;
    ACE_NEW_RETURN (this->ptr_, 
                    TAO_ObjectKey (*p.ptr_), 
		    *this);
  }
  return *this;
}

ACE_INLINE const TAO_ObjectKey *
TAO_ObjectKey_var::operator-> (void) const
{
  return this->ptr_;
}

ACE_INLINE TAO_ObjectKey *
TAO_ObjectKey_var::operator-> (void)
{
  return this->ptr_;
}

ACE_INLINE 
TAO_ObjectKey_var::operator const TAO_ObjectKey &() const // cast
{
  return *this->ptr_;
}

ACE_INLINE 
TAO_ObjectKey_var::operator TAO_ObjectKey &() // cast 
{
  return *this->ptr_;
}

ACE_INLINE 
TAO_ObjectKey_var::operator TAO_ObjectKey &() const// cast 
{
  return *this->ptr_;
}

ACE_INLINE CORBA::Octet &
TAO_ObjectKey_var::operator[] (CORBA::ULong slot)
{
  return this->ptr_->operator[] (slot);
}

ACE_INLINE const TAO_ObjectKey &
TAO_ObjectKey_var::in (void) const
{
  return *this->ptr_;
}

ACE_INLINE TAO_ObjectKey &
TAO_ObjectKey_var::inout (void)
{
  return *this->ptr_;
}

// mapping for variable size 
ACE_INLINE TAO_ObjectKey *&
TAO_ObjectKey_var::out (void)
{
  delete this->ptr_;
  this->ptr_ = 0;
  return this->ptr_;
}

ACE_INLINE TAO_ObjectKey *
TAO_ObjectKey_var::_retn (void)
{
  TAO_ObjectKey *tmp = this->ptr_;
  this->ptr_ = 0;
  return tmp;
}

ACE_INLINE TAO_ObjectKey *
TAO_ObjectKey_var::ptr (void) const
{
  return this->ptr_;
}

// *************************************************************
// Inline operations for class TAO_ObjectKey_out
// *************************************************************

ACE_INLINE
TAO_ObjectKey_out::TAO_ObjectKey_out (TAO_ObjectKey *&p)
	: ptr_ (p)
{
  this->ptr_ = 0;
}

ACE_INLINE
TAO_ObjectKey_out::TAO_ObjectKey_out (TAO_ObjectKey_var &p) // constructor from _var
	: ptr_ (p.out ())
{
  delete this->ptr_;
  this->ptr_ = 0;
}

ACE_INLINE
TAO_ObjectKey_out::TAO_ObjectKey_out (TAO_ObjectKey_out &p) // copy constructor
	: ptr_ (p.ptr_)
{}

ACE_INLINE TAO_ObjectKey_out &
TAO_ObjectKey_out::operator= (TAO_ObjectKey_out &p)
{
  this->ptr_ = p.ptr_;
  return *this;
}

ACE_INLINE TAO_ObjectKey_out &
TAO_ObjectKey_out::operator= (TAO_ObjectKey *p)
{
  this->ptr_ = p;
  return *this;
}

ACE_INLINE 
TAO_ObjectKey_out::operator TAO_ObjectKey *&() // cast
{
  return this->ptr_;
}

ACE_INLINE TAO_ObjectKey *&
TAO_ObjectKey_out::ptr (void) // ptr
{
  return this->ptr_;
}

ACE_INLINE TAO_ObjectKey *
TAO_ObjectKey_out::operator-> (void)
{
  return this->ptr_;
}

ACE_INLINE CORBA::Octet &
TAO_ObjectKey_out::operator[] (CORBA::ULong slot)
{
  return this->ptr_->operator[] (slot);
}

