// -*- C++ -*-
// $Id$

/**
 * Code generated by the The ACE ORB (TAO) IDL Compiler v2.0.4
 * TAO and the TAO IDL Compiler have been developed by:
 *       Center for Distributed Object Computing
 *       Washington University
 *       St. Louis, MO
 *       USA
 *       http://www.cs.wustl.edu/~schmidt/doc-center.html
 * and
 *       Distributed Object Computing Laboratory
 *       University of California at Irvine
 *       Irvine, CA
 *       USA
 * and
 *       Institute for Software Integrated Systems
 *       Vanderbilt University
 *       Nashville, TN
 *       USA
 *       http://www.isis.vanderbilt.edu/
 *
 * Information about TAO is available at:
 *     http://www.cs.wustl.edu/~schmidt/TAO.html
 **/
#ifndef CIAO_UL_RESETTOPIC_RECEIVER_EXEC_WHDIFX_H_
#define CIAO_UL_RESETTOPIC_RECEIVER_EXEC_WHDIFX_H_

#include /**/ "ace/pre.h"

#include "UL_ResetTopic_ReceiverEC.h"

#if !defined (ACE_LACKS_PRAGMA_ONCE)
# pragma once
#endif /* ACE_LACKS_PRAGMA_ONCE */

#include /**/ "Receiver_exec_export.h"
#include "tao/LocalObject.h"

namespace CIAO_UL_ResetTopic_Receiver_Impl
{
  typedef ACE_Atomic_Op <TAO_SYNCH_MUTEX, CORBA::Boolean> Atomic_Boolean;

  /**
   * Provider Executor Implementation Class: info_out_state_data_listener_exec_i
   */

  class info_out_state_data_listener_exec_i
    : public virtual ::UL_ResetTopic::UL_ResetTopicTestConnector::CCM_StateListener,
      public virtual ::CORBA::LocalObject
  {
  public:
    info_out_state_data_listener_exec_i (
      ::UL_ResetTopic::CCM_Receiver_Context_ptr ctx,
      Atomic_Boolean &samples_received);
    virtual ~info_out_state_data_listener_exec_i (void);

    /** @name Operations and attributes from UL_ResetTopic::UL_ResetTopicTestConnector::StateListener */
    //@{

    virtual
    void on_creation (
      const ::UL_ResetTopicTest & datum,
      const ::CCM_DDS::ReadInfo & info);

    virtual
    void on_one_update (
      const ::UL_ResetTopicTest & datum,
      const ::CCM_DDS::ReadInfo & info);

    virtual
    void on_many_updates (
      const ::UL_ResetTopicTestSeq & data,
      const ::CCM_DDS::ReadInfoSeq & infos);

    virtual
    void on_deletion (
      const ::UL_ResetTopicTest & datum,
      const ::CCM_DDS::ReadInfo & info);
    //@}

  private:
    ::UL_ResetTopic::CCM_Receiver_Context_var ciao_context_;
    Atomic_Boolean &samples_received_;
  };

  /**
   * Provider Executor Implementation Class: info_out_state_status_exec_i
   */

  class info_out_state_status_exec_i
    : public virtual ::CCM_DDS::CCM_PortStatusListener,
      public virtual ::CORBA::LocalObject
  {
  public:
    info_out_state_status_exec_i (
      ::UL_ResetTopic::CCM_Receiver_Context_ptr ctx);
    virtual ~info_out_state_status_exec_i (void);

    /** @name Operations and attributes from CCM_DDS::PortStatusListener */
    //@{

    virtual
    void on_requested_deadline_missed (
      ::DDS::DataReader_ptr the_reader,
      const ::DDS::RequestedDeadlineMissedStatus & status);

    virtual
    void on_sample_lost (
      ::DDS::DataReader_ptr the_reader,
      const ::DDS::SampleLostStatus & status);
    //@}

  private:
    ::UL_ResetTopic::CCM_Receiver_Context_var ciao_context_;
  };

  /**
   * Component Executor Implementation Class: Receiver_exec_i
   */

  class Receiver_exec_i
    : public virtual Receiver_Exec,
      public virtual ::CORBA::LocalObject
  {
  public:
    Receiver_exec_i (void);
    virtual ~Receiver_exec_i (void);

    /** @name Supported operations and attributes. */
    //@{

    virtual void set_new_topic (
      const char * topic_name);

    //@}

    /** @name Component attributes and port operations. */
    //@{

    virtual ::UL_ResetTopic::UL_ResetTopicTestConnector::CCM_StateListener_ptr
    get_info_out_state_data_listener (void);

    virtual ::CCM_DDS::CCM_PortStatusListener_ptr
    get_info_out_state_status (void);

    virtual ::CORBA::UShort iterations (
      void);

    virtual void iterations (
      ::CORBA::UShort iterations);
    //@}

    /** @name Operations from Components::SessionComponent. */
    //@{
    virtual void set_session_context (::Components::SessionContext_ptr ctx);
    virtual void configuration_complete (void);
    virtual void ccm_activate (void);
    virtual void ccm_passivate (void);
    virtual void ccm_remove (void);
    //@}

    /** @name User defined public operations. */
    //@{

    //@}

  private:
    ::UL_ResetTopic::CCM_Receiver_Context_var ciao_context_;

    /** @name Component attributes. */
    //@{
    ::UL_ResetTopic::UL_ResetTopicTestConnector::CCM_StateListener_var ciao_info_out_state_data_listener_;
    ::CCM_DDS::CCM_PortStatusListener_var ciao_info_out_state_status_;

    ::CORBA::UShort iterations_;
    //@}

    /** @name User defined members. */
    //@{
    Atomic_Boolean samples_received_;
    //@}

    /** @name User defined private operations. */
    //@{
    void set_new_topic (::CORBA::Object_ptr cmp,
                        const char * topic_name);

    //@}
  };

  extern "C" RECEIVER_EXEC_Export ::Components::EnterpriseComponent_ptr
  create_UL_ResetTopic_Receiver_Impl (void);
}

#include /**/ "ace/post.h"

#endif /* ifndef */
