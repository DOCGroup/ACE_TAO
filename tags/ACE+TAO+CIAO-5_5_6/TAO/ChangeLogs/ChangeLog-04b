Thu Dec 30 12:53:48 2004  Chris Cleeland  <cleeland@ociweb.com>

	* NEWS: Updated to include latest release news.

Tue Dec 28 19:49:00 2004  Balachandran Natarajan  <bala@dre.vanderbilt.edu>

	* Release:

	  Updated the name of the target for generating the textual
	  version of TAO-INSTALL.html file.

Mon Dec 27 16:02:20 2004  Trevor Fields  <fields_t@ociweb.com>

        * orbsvcs/tests/FaultTolerance/IOGR/run_test.pl:

          Increased the timeout for waiting for the manager (to short for
          windows machines).

Sat Dec 25 20:53:25 2004  Balachandran Natarajan  <bala@dre.vanderbilt.edu>

 	* Release:

	  Added INSTALL target which generates textual version of
	  TAO-INSTAll.html and some autoconf files for the release.

Sat Dec 25 15:12:36 2004  Balachandran Natarajan  <bala@dre.vanderbilt.edu>

 	* interop-tests/wchar/client.cpp:
	* interop-tests/wchar/server.cpp:

	  Removed ace/streams.h inclusion which seems to be triggering
	  problems on SuSe. This exclusion should be okay as the file
	  seems to compile fine without these inclusions.

Thu Dec 23 16:35:22 2004  Balachandran Natarajan  <bala@dre.vanderbilt.edu>

 	* orbsvcs/tests/InterfaceRepo/Application_Test/ifr_dii_client.cpp:

	  Fixed warnings in VC6 builds.

Thu Dec 23 14:44:36 2004  Balachandran Natarajan  <bala@dre.vanderbilt.edu>

	* orbsvcs/orbsvcs/Notify/EventTypeSeq.cpp:

	  A more portable fix for warnings, errors and other compiler
	  oddities.

Wed Dec 22 11:38:23 2004  Trevor Fields  <fields_t@ociweb.com>

        * orbsvcs/tests/AVStreams/Full_Profile/run_test.pl:
        * orbsvcs/tests/AVStreams/Multicast/run_test.pl:

          The size of the test date file generated was incorrect for all
          platforms.  It assumed a 64KB maximum packet size which is
          incorrect for windows and some additional platforms.

        * orbsvcs/tests/AVStreams/Full_Profile/server.cpp:

          Fixed copy and paste error in error message.

Wed Dec 22 08:10:47 2004  Chad Elliott  <elliott_c@ociweb.com>

        * orbsvcs/orbsvcs/FTORB.mpc:

          The FT_ClientORB and FT_ServerORB require interceptors to function
          properly.

        * orbsvcs/tests/FaultTolerance/GroupRef_Manipulation/GroupRef_Manipulation.mpc:

          The interceptors setting is taken care in the ftclientorb and
          ftserverorb base projects.  So, it is no longer necessary to set
          it here.

Tue Dec 21 12:37:42 2004  Chad Elliott  <elliott_c@ociweb.com>

        * orbsvcs/ImplRepo_Service/Activator_Options.h:
        * orbsvcs/ImplRepo_Service/Activator_Options.cpp:
        * orbsvcs/ImplRepo_Service/ImR_Activator_i.cpp:
        * orbsvcs/ImplRepo_Service/ImR_Locator_i.cpp:
        * orbsvcs/ImplRepo_Service/Locator_Options.h:
        * orbsvcs/ImplRepo_Service/Locator_Options.cpp:

          Due to some peculiarity of gcc 2.95.3, I have changed the cmdline
          methods to return const char* instead of const ACE_CString&.  This
          alleviates a core dump.

        * orbsvcs/examples/ImR/Combined_Service/start_all.conf:

          Start the locator on localhost only as that is all that is
          necessary.

Tue Dec 21 09:49:50 2004  Chad Elliott  <elliott_c@ociweb.com>

        * orbsvcs/orbsvcs/Notify/EventTypeSeq.cpp:
        * orbsvcs/orbsvcs/Notify/Topology_Object.cpp:

          My previous change broke the Borland build.  I have spread the
          initialization to, hopefully, the right places to make all
          compilers happy.

Tue Dec 21 06:41:23 2004  Chad Elliott  <elliott_c@ociweb.com>

        * orbsvcs/orbsvcs/Notify/EventTypeSeq.cpp:

          VC6 has a problem with the fully qualified name on
          Topology_Savable.  So, I have removed the TAO_Notify namespace.

Tue Dec 21 04:33:58 2004  Balachandran Natarajan  <bala@dre.vanderbilt.edu>

        * Release:

          Added proper tabs.

Mon Dec 20 21:12:24 2004  Douglas C. Schmidt  <schmidt@cs.wustl.edu>

        * orbsvcs/orbsvcs/Notify/Notify_Constraint_Visitors.cpp:
          There were several minor bugs in the Notification Service that
          were causing filters that dealt with sequences or arrays to
          fail.  Here's a summary of the fixes:

          In TAO_Notify_Constraint_Visitor::visit_special()

          1. Aliases are now stripped from the TypeCode in visit_special()

          2. The TAO_ETCL_LENGTH is now processed so that it unpacks
             sequences and checks for the real length.  The previous
             method was just using the TypeCode::length(), which returns 0 for
             unconstrained variable length structures.

          TAO_Notify_Constraint_Visitor::sequence_does_contain() now
          unpacks the sequence being checked and determines the type of
          the contained value.  Previously, the type being checked was the
          type of the sequence itself (which is always
          CORBA::tk_sequence).

          TAO_Notify_Constraint_Visitor::simple_type_match() now actually
          returns a value of true if the types match.  Previously, it was
          just returning false if the types didn't match and then falling
          through to the next case.

          Thanks to William Nagel <bill@stagelogic.com> for these fixes!

Mon Dec 20 14:05:39 2004  Chad Elliott  <elliott_c@ociweb.com>

        * orbsvcs/examples/ImR/Combined_Service/run_test.pl:

          Fixed the process cleanup to avoid leaking the test_server.

Mon Dec 20 12:22:38 2004  Chad Elliott  <elliott_c@ociweb.com>

        * tests/Muxed_GIOP_Versions/server.cpp:

          Increase the amout of time that the server runs the ORB event loop
          in order to allow the last client to complete.

Mon Dec 20 09:34:08 2004  Chad Elliott  <elliott_c@ociweb.com>

        * orbsvcs/tests/Bug_1436_Regression/run_test.pl:

          Removed an extra kill of the tao_ifr exe (which was causing a
          timeout error to be printed).

Sun Dec 19 14:50:08 2004  Balachandran Natarajan  <bala@dre.vanderbilt.edu>

        * orbsvcs/orbsvcs/Notify/EventTypeSeq.cpp:

          Fixed the warning about not completely initializing all the
          virtual base classes.

        * orbsvcs/orbsvcs/Notify/Topology_Object.h:

          Cosmetoc fixes.

Sat Dec 18 20:08:53 2004  J.T. Conklin  <jtc@acorntoolworks.com>

        * orbsvcs/tests/Log/Basic_Log_Test/Basic_Log_Test.cpp:

          Changed BasicLog_Test::test_log_destroy() to explicitly catch
          CORBA::OBJECT_NOT_EXIST, the expected results of this test; and
          to invoke ACE_PRINT_EXCEPTION() for unexpected exceptions only.
          This avoids false positives on the nightly scoreboard.

Sat Dec 18 09:56:04 2004  Olli Savia  <ops@iki.fi>

        * tao/Exception.h:
        * tao/RTScheduling/Current.cpp:
        * tao/SystemException.h:
        * tao/SystemException.cpp:
        * tests/RTScheduling/Scheduling_Interceptor/test_client.cpp:
        * tests/RTScheduling/Thread_Cancel/Thread_Task.cpp:
          Replaced __Lynx__ macro with
          ACE_HAS_PREDEFINED_THREAD_CANCELLED_MACRO macro. This makes code
          maintenace easier across different LynxOS versions.

Sat Dec 18 01:08:42 2004  Balachandran Natarajan  <bala@dre.vanderbilt.edu>

        * Release:

          Added missing tabs.

Fri Dec 17 13:03:03 2004  Chad Elliott  <elliott_c@ociweb.com>

        * orbsvcs/tests/Bug_1395_Regression/Test_i.cpp:
        * orbsvcs/tests/Bug_1395_Regression/run_test.pl:

          Fixed this test to restart the server after restarting the
          locator so that the server can find the locator's new IOR.

        * orbsvcs/tests/Bug_1436_Regression/run_test.pl:
        * orbsvcs/tests/Bug_1437_Regression/run_test.pl:

          Fixed some bugs in my file handle dup'ing code.

Fri Dec 17 10:38:53 2004  Chad Elliott  <elliott_c@ociweb.com>

        * orbsvcs/tests/Bug_1436_Regression/run_test.pl:

          Redirect STDERR in the perl script to ensure that the test works
          on all platforms.

        * orbsvcs/tests/FaultTolerance/GroupRef_Manipulation/Server_Request_Interceptor.cpp:

          Fixed a misspelling in some error messages.

        * tao/IFR_Client/IFR_Client_Adapter_Impl.cpp:

          Replaced a missing switch statement to convert a ParameterMode
          enum into the corresponding enum for NVList.

Fri Dec 17 08:47:05 2004  Chad Elliott  <elliott_c@ociweb.com>

        * orbsvcs/tests/Bug_1437_Regression/run_test.pl:

          Rewrote the tao_imr section to use perl to redirect the tao_imr
          output and keyed the success of the test off of the return value
          of tao_imr instead of parsing the output.

Fri Dec 17 08:15:18 2004  Chad Elliott  <elliott_c@ociweb.com>

        * orbsvcs/IFR_Service/be_global.cpp:

          During construction of BE_GlobalData, set preserve_cpp_keywords on
          the idl_global to true.  It is set to false during FE
          initialization.

Fri Dec 17 06:45:19 2004  Chad Elliott  <elliott_c@ociweb.com>

        * orbsvcs/IFR_Service/drv_args.cpp:
        * orbsvcs/IFR_Service/drv_preproc.cpp:
        * orbsvcs/IFR_Service/tao_idl.cpp:

          Created IFR_Service counterparts to these files that only #include
          the original from TAO_IDL.  This has been brought about due to the
          differences between BE_GlobalData from the TAO_IDL_BE and the
          TAO_IFR_BE.  VPATH, which was previously used, causes the object
          files from these files to be taken from the TAO_IDL build which
          do not work when tao_ifr is created from them.  See the comment in
          each of these files for more detail.

        * orbsvcs/IFR_Service/IFR_Service.mpc:

          Removed the VPATH portion and changed to reference the new files
          instead of the ones from TAO_IDL.

Thu Dec 16 09:41:35 2004  Chad Elliott  <elliott_c@ociweb.com>

        * examples/Simple/time-date/svc.conf:

          Removed the ./ from the Time_Date library.  This caused problems
          on Windows and with the run_test.pl it is not necessary.

Wed Dec 15 14:14:22 2004  Chad Elliott  <elliott_c@ociweb.com>

        * orbsvcs/IFR_Service/ifr_adding_visitor_structure.cpp:

          Remove build warnings from gcc 2.95.3.

Wed Dec 15 11:37:50 2004  Jeff Parsons <j.parsons@vanderbilt.edu>

        * orbsvcs/tests/Bug_1393_Regression/run_test.pl:

          My previous checkin

          Tue Dec  7 16:35:59 2004  Jeff Parsons <j.parsons@vanderbilt.edu>

          actually fixed the path to tao_idl (which was also incorrect).
          This fix changes the path to tao_ifr, as the above entry stated.

Wed Dec 15 10:14:12 UTC 2004  Johnny Willemsen  <jwillemsen@remedy.nl>

        * TAO_IDL/include/idl_uns_long.h:
          Fixed incorrect defines

Wed Dec 15 09:52:12 UTC 2004  Johnny Willemsen  <jwillemsen@remedy.nl>

        * tao/Any_Basic_Impl_T.cpp:
          Replaced include of Exception.h with SystemException.h to get
          CORBA::MARSHAL. Thanks to Jules Colding <jules@tdcadsl.dk>
          for reporting this

Tue Dec 14 17:38:16 2004  Arvind S. Krishna  <arvindk@dre.vanderbilt.edu>

        * performance-tests/Latency/Collocation/Client_Task.cpp:
        * performance-tests/Latency/Collocation/Client_Task.h:
        * performance-tests/Latency/Collocation/Server_Task.h:
        * performance-tests/Latency/Collocation/Server_Task.cpp:
        * performance-tests/Latency/Collocation/Collocated_Test.cpp:
        * performance-tests/Latency/Collocation/run_test.pl

          Fixed this test to directly obtain the reference of the remote
          object than from a file. Also removed passing unnecessary ORB
          references around. Added run_test.pl to run the test.

Tue Dec 14 14:55:00 2004  Greg Bostrom <greg.bostrom@hp.com>

        * TAO_IDL/include/idl_uns_long.h:

          New file.
          Define the idl_uns_long type to be either
          'unsigned long long' or
          'unsigned long'
          depending upon what the platform will support.

        * TAO_IDL/ast/ast_expression.cpp:
        * TAO_IDL/ast/ast_generator.cpp:
        * TAO_IDL/be/be_expression.cpp:
        * TAO_IDL/be/be_generator.cpp:
        * TAO_IDL/be_include/be_expression.h:
        * TAO_IDL/be_include/be_generator.h:
        * TAO_IDL/fe/idl.ll:
        * TAO_IDL/fe/idl.yy:
        * TAO_IDL/fe/lex.yy.cpp:
        * TAO_IDL/fe/y.tab.cpp:
        * TAO_IDL/fe/y.tab.h:
        * TAO_IDL/include/ast_expression.h:
        * TAO_IDL/include/ast_generator.h:
        * TAO_IDL/util/utl_global.cpp:

          Replace ACE_UINT64 definintions with the idl_uns_long type.

Tue Dec 14 13:50:14 2004  Chad Elliott  <elliott_c@ociweb.com>

        * orbsvcs/orbsvcs/Notify/Admin.h:
        * orbsvcs/orbsvcs/Notify/Admin.cpp:
        * orbsvcs/orbsvcs/Notify/EventChannel.h:
        * orbsvcs/orbsvcs/Notify/EventChannel.cpp:
        * orbsvcs/orbsvcs/Notify/ProxyConsumer.h:
        * orbsvcs/orbsvcs/Notify/ProxyConsumer.cpp:
        * orbsvcs/orbsvcs/Notify/ProxySupplier.h:
        * orbsvcs/orbsvcs/Notify/ProxySupplier.cpp:
        * orbsvcs/orbsvcs/Notify/Topology_Object.h:
        * orbsvcs/orbsvcs/Notify/Topology_Object.cpp:

          Reverting the change from "Fri Dec  3 11:34:37 2004" as it
          fundamentally broke the notification service.  I added a simpler
          fix for vc6 build problems.

Tue Dec 14 19:25:12 UTC 2004  Johnny Willemsen  <jwillemsen@remedy.nl>

        * docs/implrepo/index.html:
          Corrected link to stable Doxygen documentation and added a
          link for the last night documentation

Tue Dec 14 14:10:00 UTC 2004  Simon Massey  <sma@prismtech.com>

        * TAO/orbsvcs/IFR_Service/ifr_adding_visitor_structure.cpp
        * TAO/orbsvcs/orbsvcs/Makefile.am
        + TAO/orbsvcs/orbsvcs/IFRService/RecursDef_i.h
        + TAO/orbsvcs/orbsvcs/IFRService/RecursDef_i.cpp
        * TAO/orbsvcs/orbsvcs/IFRService/StructDef_i.cpp
        * TAO/orbsvcs/orbsvcs/IFRService/UnionDef_i.cpp

          Fixed bugzilla 1997 - IFR_Service - Does not cater for
                         embedded sequences of enclosing structs

Mon Dec 13 18:08:21 2004  Jeff Parsons <j.parsons@vanderbilt.edu>

        * TAO_IDL/be/be_visitor_sequence.cpp:
        * TAO_IDL/be/be_visitor_sequence/cdr_op_cs.cpp:
        * TAO_IDL/be_include/be_visitor_sequence/cdr_op_cs.h:

          Added some missing virtual visit_* methods for sequences
          of eventtypes, components and homes. Thanks to Gary Duzan
          <gduzan@bbn.com> for reporting the marhshaling exception
          with sequences of eventtypes.

Mon Dec 13 18:12:00 2004  Balachandran Natarajan  <bala@dre.vanderbilt.edu>

        * Release:

          Fixed a typo.

Mon Dec 13 11:58:49 2004  Chad Elliott  <elliott_c@ociweb.com>

        * interop-tests/wchar/client.cpp:

          Avoid build warnings from vc71 about mixing CORBA::Boolean and
          int.

        * orbsvcs/orbsvcs/Event/ECG_CDR_Message_Receiver.cpp:
        * orbsvcs/orbsvcs/Event/ECG_CDR_Message_Sender.cpp:
        * orbsvcs/orbsvcs/Event/ECG_Complex_Address_Server.cpp:
        * orbsvcs/orbsvcs/Event/ECG_Mcast_Gateway.cpp:
        * orbsvcs/orbsvcs/Event/ECG_Simple_Mcast_EH.cpp:
        * orbsvcs/orbsvcs/Event/ECG_UDP_EH.cpp:
        * orbsvcs/orbsvcs/Event/ECG_UDP_Receiver.i:
        * orbsvcs/orbsvcs/Event/ECG_UDP_Receiver.cpp:
        * orbsvcs/orbsvcs/Event/EC_Gateway_IIOP_Factory.cpp:

          Added missing \n from many ACE_ERROR and ACE_DEBUG messages.

        * orbsvcs/orbsvcs/Event/EC_Reactive_ConsumerControl.cpp:
        * orbsvcs/orbsvcs/Event/EC_Reactive_SupplierControl.cpp:

          Fixed a bug where the timer would not get canceled in the shutdown
          method as it should.

        * orbsvcs/orbsvcs/Notify/Structured/RT_StructuredProxyPushSupplier.h:
        * orbsvcs/orbsvcs/Notify/Structured/RT_StructuredProxyPushSupplier.cpp:

          Renamed the deliver request method as it is not called by anything
          that I could find.  This eliminates a warning about virtual method
          hiding.

        * orbsvcs/tests/Bug_1393_Regression/Bug_1393_Regression.mpc:

          Avoid pulling in the idl files (if any are left around from the
          previous test run).

        * orbsvcs/tests/Bug_1393_Regression/run_test.pl:

          Use the -Sc option and delete the .inl files when the test is
          done.

Mon Dec 13 13:37:12 UTC 2004  Johnny Willemsen  <jwillemsen@remedy.nl>

        * orbsvcs/IFR_Service/diffs/*.diff:
          Removed all these files, they are not needed anymore and if needed
          they should not be here but with the IFRService library

Mon Dec 13 11:22:12 UTC 2004  Johnny Willemsen  <jwillemsen@remedy.nl>

        * tao/PortableServer/PolicyS.{h,cpp,inl}:
        * tao/PortableServer/PolicyS_T.{h,cpp,inl}:
          Regenerated

Mon Dec 13 08:42:12 UTC 2004  Johnny Willemsen  <jwillemsen@remedy.nl>

        * orbsvcs/tests/BiDir_CORBALOC/TimeServer.cpp:
          Fixed compile problem in emulated exception case

Mon Dec 13 04:35:19 2004  Balachandran Natarajan  <bala@dre.vanderbilt.edu>

        * Release:

          Removed referebcs to old files and added autoconf specific files
          into the release.

Sun Dec 12 19:18:12 UTC 2004  Johnny Willemsen  <jwillemsen@remedy.nl>

        * orbsvcs/tests/BiDir_CORBALOC/TimeServer.cpp:
          Fixed implicit conversion warning

Sun Dec 12 19:06:12 UTC 2004  Johnny Willemsen  <jwillemsen@remedy.nl>

        * tao/PI_Forward.pidl:
          Don't use -GA, the generated C.cpp don't contain anything when
          this option is used, so just no need

        * tao/PI_ForwardC.{h,cpp,inl}:
          Regenerated

        * tao/PI_ForwardA.cpp:
          Removed

        * tao/tao.mpc:
        * tao/Makefile.am:
          Updated

Sun Dec 12 18:51:12 UTC 2004  Johnny Willemsen  <jwillemsen@remedy.nl>

        * tao/IFR_Service/IFR_BaseA.cpp:
        * tao/IFR_Service/IFR_BaseC.{h,cpp,i,inl}:
        * tao/IFR_Service/IFR_BasicA.cpp:
        * tao/IFR_Service/IFR_BasicC.{h,cpp,i,inl}:
        * tao/IFR_Service/IFR_ComponentsA.cpp:
        * tao/IFR_Service/IFR_ComponentsC.{h,cpp,i,inl}:
        * tao/IFR_Service/IFR_ExtendedA.cpp:
        * tao/IFR_Service/IFR_ExtendedC.{h,cpp,i,inl}:
          Regenerated and replace .i file with .inl variant

        * tao/Makefile.am:
          Updated because of change above

        * orbsvcs/orbsvcs/IFRService/IFR_BaseS.{h,cpp,i,inl}:
        * orbsvcs/orbsvcs/IFRService/IFR_BaseS_T.{h,cpp,i,inl}:
        * orbsvcs/orbsvcs/IFRService/IFR_BasicS.{h,cpp,i,inl}:
        * orbsvcs/orbsvcs/IFRService/IFR_BasicS_T.{h,cpp,i,inl}:
        * orbsvcs/orbsvcs/IFRService/IFR_ComponentsS.{h,cpp,i,inl}:
        * orbsvcs/orbsvcs/IFRService/IFR_ComponentsS_T.{h,cpp,i,inl}:
        * orbsvcs/orbsvcs/IFRService/IFR_ExtendedS.{h,cpp,i,inl}:
        * orbsvcs/orbsvcs/IFRService/IFR_ExtendedS_T.{h,cpp,i,inl}:
          Regenerated and replace .i file with .inl variant

        * orbsvcs/orbsvcs/Makefile.am:
          Updated because of change above

Sun Dec 12 17:37:12 UTC 2004  Johnny Willemsen  <jwillemsen@remedy.nl>

        * orbsvcs/tests/BiDir_CORBALOC/TimeServer.cpp:
          Fixed compile problem in emulated exception case

Sun Dec 12 13:28:12 UTC 2004  Johnny Willemsen  <jwillemsen@remedy.nl>

        * tao/ServicesC.{h,cpp,i,inl}:
        * tao/ServicesS.{h,cpp,i,inl}:
        * tao/ServicesS_T.{h,cpp,i,inl}:
        * tao/DomainA.cpp:
          Regenerated and replace .i file with .inl variant

        * tao/Makefile.am:
          Updated because of change above

Sun Dec 12 13:01:12 UTC 2004  Johnny Willemsen  <jwillemsen@remedy.nl>

        * tao/StringSeqC.{h,cpp}:
        * tao/StringSeqA.cpp:
          Regenerated

Sun Dec 12 10:53:12 UTC 2004  Johnny Willemsen  <jwillemsen@remedy.nl>

        * tao/DomainC.{h,cpp,i,inl}:
        * tao/DomainA.cpp:
          Regenerated and replace .i file with .inl variant

        * tao/Makefile.am:
          Updated because of change above

Sun Dec 12 10:45:12 UTC 2004  Johnny Willemsen  <jwillemsen@remedy.nl>

        * tao/Profile.cpp:
          Added include of PolicyC.h to fix compile problems in minimum
          builds.

Sat Dec 11 14:07:42 2004  Jeff Parsons <j.parsons@vanderbilt.edu>

        * TAO_IDL/be/be_visitor_operation/operation.cpp:

          Fixed generation of typenames in the template parameter
          of the TAO::Arg_Traits<> instantiations for operation
          parameters and return types to consistently use the
          global "::" prefix to scoped names. to be absolutely
          sure there will never be an ambiguity. Thanks to
          Johnny Willemsen <jwillemsen@rememdy.nl> for pointing
          out a case that was missed - a typedef of a predefined type.

Sat Dec 11 17:51:12 UTC 2004  Johnny Willemsen  <jwillemsen@remedy.nl>

        * tao/Messaging_PolicyValueC.{h,cpp,i,inl}:
        * tao/Messaging_PolicyValueA.cpp:
          Regenerated and replace .i file with .inl variant

        * tao/Makefile.am:
          Updated because of change above

Sat Dec 11 17:10:57 2004  Balachandran Natarajan  <bala@dre.vanderbilt.edu>

        * orbsvcs/tests/BiDir_CORBALOC/BiDirCORBALOC.mpc:
        * orbsvcs/tests/BiDir_CORBALOC/README:
        * orbsvcs/tests/BiDir_CORBALOC/TimeModule.idl:
        * orbsvcs/tests/BiDir_CORBALOC/TimeServer.cpp:
        * orbsvcs/tests/BiDir_CORBALOC/run_test.pl:

          A new test for testing BiDirGIOP with CORBALOC URL's. Wanted to
          have a unit test for this for a long time.

Sat Dec 11 16:14:12 UTC 2004  Johnny Willemsen  <jwillemsen@remedy.nl>

        * tao/LongDoubleSeq.pidl:
        * tao/LongLongSeq.pidl:
          Updated regeneration instructions

        * tao/LongDoubleSeqA.cpp
        * tao/LongDoubleSeqC.{h,cpp}:
        * tao/LongLongSeqA.cpp
        * tao/LongLongSeqC.{h,cpp}:
          Regenerated

Sat Dec 11 16:09:12 UTC 2004  Johnny Willemsen  <jwillemsen@remedy.nl>

        * tao/DoubleSeq.pidl:
          Updated regeneration instructions

        * tao/DoubleSeqA.cpp
        * tao/DoubleSeqC.{h,cpp}:
          Regenerated

Sat Dec 11 16:05:12 UTC 2004  Johnny Willemsen  <jwillemsen@remedy.nl>

        * tao/PortableInterceptor.pidl:
          Updated regeneration instructions

        * tao/PortableInterceptorA.cpp:
        * tao/PortableInterceptorC.{h,cpp,i,inl}:
          Regenerated and replace .i file with .inl variant

        * tao/Makefile.am:
          Updated because of changes above

        * tao/diffs/PortableInterceptor.diff:
          Updated

Sat Dec 11 15:10:12 UTC 2004  Johnny Willemsen  <jwillemsen@remedy.nl>

        * tao/AnySeq.pidl:
          Updated regeneration instructions

        * tao/AnySeqA.cpp
        * tao/AnySeqC.{h,cpp}:
          Regenerated

Sat Dec 11 14:29:12 UTC 2004  Johnny Willemsen  <jwillemsen@remedy.nl>

        * tao/ObjectIdList.pidl:
          Updated regeneration instructions

        * tao/ObjectIdListC.{h,cpp,inl,i}:
          Regenerated and replace .i file with .inl variant

        * tao/ObjectIdListA.cpp:
          New generated file

        * tao/tao.mpc:
          Added ObjectIdListA.cpp

        * tao/Makefile.am:
          Updated because of changes above

Sat Dec 11 14:12:12 UTC 2004  Johnny Willemsen  <jwillemsen@remedy.nl>

        * tao/PI_Forward.pidl:
          Updated regeneration instructions

        * tao/PI_ForwardC.{h,cpp,inl}:
          Regenerated

        * tao/PI_ForwardA.cpp:
          New generated file

        * tao/Policy.pidl:
          Updated regeneration instructions

        * tao/PI_ForwardA.cpp:
        * tao/PI_ForwardC.{h,cpp,i,inl}:
          Regenerated and replace .i file with .inl variant

        * tao/tao.mpc:
          Added PI_ForwardA.cpp

        * tao/diffs/Policy.diff:
          Updated

        * tao/Makefile.am:
          Updated because of changes above

Fri Dec 10 13:35:36 2004  Jeff Parsons <j.parsons@vanderbilt.edu>

        * orbsvcs/orbsvcs/IFRService/Contained_i.cpp:

          Put back exception throw removed in

          Fri Dec 10 10:40:30 2004  Jeff Parsons <j.parsons@vanderbilt.edu>

          since there is a use case where it is not redundant.

Fri Dec 10 18:42:12 UTC 2004  Johnny Willemsen  <jwillemsen@remedy.nl>

        * tao/Object_KeyC.cpp:
          Regenerated after the changes of Jeff below

Fri Dec 10 12:29:34 2004  Jeff Parsons <j.parsons@vanderbilt.edu>

        * TAO_IDL/be/be_visitor_sequence/cdr_op_cs.cpp:

          - Changed C-style cast to const_cast in generated code for
            optimized handling of octet sequences.

          - Changed generated local variable name from 'oseq' to
            '_tao_octet_seq' to minimize the chance of name clashes.

          - Removed alternate code generation that had a guard for
            VC 5 only, since we no longer support that version.

Fri Dec 10 17:45:12 UTC 2004  Johnny Willemsen  <jwillemsen@remedy.nl>

        * tao/Object_KeyC.{h,cpp,i,inl}:
          Regenerated and replace .i file with .inl variant

        * tao/Makefile.am:
          Updated because of change above

        * tao/Object_Key.pidl:
          Mention the diff to apply

        * tao/diffs/Object_Key.diff:
          Manual diff that must be applied after regeneration

Fri Dec 10 10:40:30 2004  Jeff Parsons <j.parsons@vanderbilt.edu>

        * orbsvcs/IFR_Service/IFR_Server.cpp:

          Removed unnecessary text output.

        * orbsvcs/IFR_Service/IFR_Service.cpp:

          Cosmetic changes to code formatting.

        * orbsvcs/orbsvcs/IFRService/Contained_i.cpp:

          Removed redundant exception throw of BAD_PARAM - it is
          already done by a previous function call.

        * orbsvcs/orbsvcs/IFRService/IFR_Service_Utils.cpp:

          Added logical OR of OMGVMCID to the minor code of a
          BAD_PARAM exception throw, as has been done for all other
          such CORBA system exception throws in TAO.

Fri Dec 10 09:39:12 UTC 2004  Johnny Willemsen  <jwillemsen@remedy.nl>

        * tao/Dynamic.pidl:
          Added include of orb.idl again, it is needed at this moment
          to get CORBA::Typecode

Fri Dec 10 09:18:12 UTC 2004  Johnny Willemsen  <jwillemsen@remedy.nl>

        * docs/Options.html:
          Fixed wrong reference between parts of this document

Fri Dec 10 08:42:12 UTC 2004  Johnny Willemsen  <jwillemsen@remedy.nl>

        * tao_targets.GNU:
        * taoconfig.mk:
          Removed these files, not needed anymore

        * Release
          Removed the files above

Fri Dec 10 08:36:12 UTC 2004  Johnny Willemsen  <jwillemsen@remedy.nl>

        * tao/ParameterModeS.h:
          Added this file

        * tao/Makefile.am:
          Added ParameterModeS.h

Thu Dec  9 12:37:31 2004  Jeff Parsons <j.parsons@vanderbilt.edu>

        * tao/IFR_Client/IFR_Components.pidl:

          Moved the "omg.org" typeprefix directive from the ComponentIR
          module to the enclosing CORBA module.  This move does not affect
          any of the C++ generated code, but it eliminates an error when
          the IFR loader is loading this file into the repository. Seeing
          the CORBA module without a typeprefix gives it a repository id
          (which we don't generate for modules in C++) that doesn't
          include the prefix. The IFR loader looks up this id in the
          repository, doesn't find it (one including the prefix is already
          there) and so tries to create an entry for the module again.
          This causes a BAD_PARAM exception to be thrown due to the
          resulting local name clash. Thanks to Arjun Thounaojam
          <arjun.thounaojam@wipro.com> for reporting the problem when
          loading the file into the repository for use with CorbaScript.

Thu Dec  9 18:39:12 UTC 2004  Johnny Willemsen  <jwillemsen@remedy.nl>

        * tao/ParameterMode.pidl:
          Moved the enum ParameterMode to its own file

        * tao/orb.idl:
          Removed enum ParameterMode and include ParameterMode.pidl

        * tao/ParameterMode.{h,cpp}:
          Removed these files

        * tao/ParameterModeC.{h,cpp}:
          Added new generated files

        * tao/DomainC.cpp:
          Removed include of ParameterMode.cpp, it is not needed and will be
          gone with the next regeneration

        * tao/Dynamic_Parameter.pidl:
          Added include of ParameterMode.pidl and removed include of orb.idl

        * tao/Dynamic_ParameterC.{h,cpp,i,inl}:
        * tao/Dynamic_ParameterA.cpp:
          Regenerated and replaced i with inl file

        * tao/Makefile.am:
          Updated for changes above

        * tao/tao.mpc:
          Updated for changes above

        * tao/IFR_Client/IFR_Basic.pidl:
          Added include of ParameterMode.pidl

        * tao/IFR_Client/IFR_BasicC.h:
          Replaced include ParameterMode.h with ParameterModeC.h

        * TAO_IDL/ast/ast_decl.cpp:
        * TAO_IDL/be/be_codegen.cpp:
        * TAO_IDL/include/idl_global.h:
        * TAO_IDL/util/utl_global.cpp:
          Removed special handling of ParameterMode, it is now in a separate
          pidl file and included in orb.idl. Normal users could just use orb.idl
          but if you are worried about your footprint, include
          ParameterMode.pidl directly.

Thu Dec  9 07:33:16 2004  Chad Elliott  <elliott_c@ociweb.com>

        * orbsvcs/tests/InterfaceRepo/Application_Test/ifr_dii_client.cpp:

          Replaced TRUE with true.

Thu Dec  9 12:15:12 UTC 2004  Johnny Willemsen  <jwillemsen@remedy.nl>

        * tao/RTPortableServer/RTPortableServerC.{h,cpp,i,inl}:
        * tao/RTPortableServer/RTPortableServerA.cpp:
          Regenerated and replace .i file with .inl variant

        * tao/Makefile.am:
          Updated because of change above

Wed Dec  8 17:11:57 2004  Jeff Parsons <j.parsons@vanderbilt.edu>

        * TAO_IDL/be/be_visitor_module/module.cpp:

          Cosmetic change to source code.

        * TAO_IDL/util/utl_scope.cpp:

          Fixed a situation where a variable holding the number of
          members in a scope's 'referenced' list could be mistakenly
          incremented, leading to access of a garbage member of the
          list later on. This situation occurred when checking the
          list in preparation to add the implied-IDL valuetype
          exception holder of an interface which was forward
          declared in a previously opened module.

Wed Dec  8 20:03:12 UTC 2004  Johnny Willemsen  <jwillemsen@remedy.nl>

        * tao/DynamicC.{h,cpp,i,inl}:
        * tao/DynamicA.cpp:
          Regenerated and replace .i file with .inl variant

        * tao/Makefile.am:
          Updated because of change above

        * tao/Dynamic.pidl:
          Removed include of orb.idl, it is not needed and only results in
          a lot of extra includes which where not also previously not in the
          generated files

Wed Dec  8 18:23:12 UTC 2004  Johnny Willemsen  <jwillemsen@remedy.nl>

        * tao/PollableC.{h,cpp,i,inl}:
        * tao/PollableS.{h,cpp,i,inl}:
        * tao/PollableS_T.{h,cpp,i,inl}:
          Regenerated and replace .i file with .inl variant

        * tao/Makefile.am:
          Updated because of change above

Wed Dec  8 16:28:12 UTC 2004  Johnny Willemsen  <jwillemsen@remedy.nl>

        * tao/LongSeqA.cpp:
        * tao/LongSeqC.{h,cpp,inl}:
          Regenerated

Wed Dec  8 16:15:12 UTC 2004  Johnny Willemsen  <jwillemsen@remedy.nl>

        * tao/GIOPC.{h,cpp,i,inl}:
        * tao/GIOPS.{h,cpp,i,inl}:
        * tao/GIOPS_T.{h,cpp,i,inl}:
        * tao/GIOPA.cpp:
          Regenerated and replace .i file with .inl variant

        * tao/Makefile.am:
          Updated because of change above

        * tao/diffs/GIOP.*.diff:
          Removed these files, no diffs are needed anymore

Wed Dec  8 08:00:35 2004  J.T. Conklin  <jtc@acorntoolworks.com>

        * orbsvcs/Logging_Service/Basic_Logging_Service/Basic_Logging_Service.cpp:
        * orbsvcs/Logging_Service/Event_Logging_Service/Event_Logging_Service.cpp:
        * orbsvcs/Logging_Service/Notify_Logging_Service/Notify_Logging_Service.cpp:
          Added #include "ace/OS_NS_stdio.h" and "ace/OS_NS_unistd.h" to
          bring declarations into scope for noinline builds.

Wed Dec  8 15:53:12 UTC 2004  Johnny Willemsen  <jwillemsen@remedy.nl>

        * tao/CONV_FRAMEC.{h,cpp,i,inl}:
        * tao/CONV_FRAMES.{h,cpp,i,inl}:
        * tao/CONV_FRAMES_T.{h,cpp,i,inl}:
        * tao/CONV_FRAMEA.cpp:
          Regenerated and replace .i file with .inl variant

        * tao/Makefile.am:
          Updated because of change above

        * tao/diffs/CONV_FRAME.diff:
          Removed these files, no diffs are needed anymore

        * tao/CONV_FRAME.pidl:
          Removed instructions about applying patches, not needed anymore

Wed Dec  8 15:41:12 UTC 2004  Johnny Willemsen  <jwillemsen@remedy.nl>

        * tao/TimeBaseC.{h,cpp,i,inl}:
        * tao/TimeBaseS.{h,cpp,i,inl}:
        * tao/TimeBaseS_T.{h,cpp,i,inl}:
        * tao/TimeBaseA.cpp:
          Regenerated and replace .i file with .inl variant

        * tao/Makefile.am:
          Updated because of change above

        * tao/diffs/TimeBase.*.diff:
          Removed these files, no diffs are needed anymore

        * tao/TimeBase.pidl:
          Removed instructions about applying patches, not needed anymore

Wed Dec  8 15:28:12 UTC 2004  Johnny Willemsen  <jwillemsen@remedy.nl>

        * tao/TAOC.{h,cpp,i,inl}:
        * tao/TAOA.cpp:
          Regenerated and replace .i file with .inl variant

        * tao/Makefile.am:
          Updated because of change above

        * tao/diffs/TAO.diff:
          Removed this file, no diffs are needed anymore

        * tao/TAO.pidl:
          Removed instructions about applying patches, not needed anymore

Wed Dec  8 11:42:12 UTC 2004  Johnny Willemsen  <jwillemsen@remedy.nl>

        * tao/CurrentC.{h,cpp,i,inl}:
        * tao/CurrentA.cpp:
          Regenerated and replace .i file with .inl variant

        * tao/Makefile.am:
          Updated because of change above

        * tao/diffs/Current.diff:
          Removed this file, no diffs are needed anymore

Wed Dec  8 08:04:32 2004  Jeff Parsons <j.parsons@vanderbilt.edu>

        * orbsvcs/tests/Application_Test/ifr_dii_client.cpp:
        * orbsvcs/tests/Application_Test/test_i.cpp:

          Fixed some unused arg warnings.

Wed Dec  8 11:42:12 UTC 2004  Johnny Willemsen  <jwillemsen@remedy.nl>

        * tao/WrongTransactionC.{h,cpp,i,inl}:
        * tao/WrongTransactionA.cpp:
          Regenerated and replace .i file with .inl variant

        * tao/Makefile.am:
          Updated because of change above

Wed Dec  8 11:04:12 UTC 2004  Johnny Willemsen  <jwillemsen@remedy.nl>

        * tao/FloatSeqC.{h,cpp,i,inl}:
        * tao/FloatSeqA.cpp:
          Regenerated and replace .i file with .inl variant

        * tao/Makefile.am:
          Updated because of change above

Tue Dec  7 21:55:44 2004  J.T. Conklin  <jtc@acorntoolworks.com>

        * orbsvcs/Logging_Service/Basic_Logging_Service/Basic_Logging_Service.cpp:
        * orbsvcs/Logging_Service/Basic_Logging_Service/Basic_Logging_Service.h:
        * orbsvcs/Logging_Service/Event_Logging_Service/Event_Logging_Service.cpp:
        * orbsvcs/Logging_Service/Event_Logging_Service/Event_Logging_Service.h:
        * orbsvcs/Logging_Service/Notify_Logging_Service/Notify_Logging_Service.cpp:
        * orbsvcs/Logging_Service/Notify_Logging_Service/Notify_Logging_Service.h:

          Added command line options for writing factory IOR to a file;
          writing proces ID to a file; whether, and if so, what name to
          use to register with the Naming Service.

Tue Dec  7 18:16:14 2004  Jeff Parsons <j.parsons@vanderbilt.edu>

        * orbsvcs/tests/InterfaceRepo/Application_Test/ifr_dii_client.cpp:
        * orbsvcs/tests/InterfaceRepo/Application_Test/ifr_dii_client.h:
        * orbsvcs/tests/InterfaceRepo/Application_Test/server.cpp:
        * orbsvcs/tests/InterfaceRepo/Application_Test/test_i.cpp:
        * orbsvcs/tests/InterfaceRepo/IDL3_Test/client.cpp:
        * orbsvcs/tests/InterfaceRepo/IDL3_Test/idl3_client.cpp:
        * orbsvcs/tests/InterfaceRepo/IDL3_Test/run_test.pl:
        * orbsvcs/tests/InterfaceRepo/IDL3_Test/test.idl:
        * orbsvcs/tests/InterfaceRepo/IFR_Test/Admin_Client.cpp:
        * orbsvcs/tests/InterfaceRepo/IFR_Test/client.cpp:
        * orbsvcs/tests/InterfaceRepo/Latency_Test/Latency_Query_Client.cpp:
        * orbsvcs/tests/InterfaceRepo/Latency_Test/Latency_Query_Client.h:
        * orbsvcs/tests/InterfaceRepo/Latency_Test/client.cpp:
        * orbsvcs/tests/InterfaceRepo/Persistence_Test/Ptest.cpp:
        * orbsvcs/tests/InterfaceRepo/Persistence_Test/run_test.pl:
        * orbsvcs/tests/InterfaceRepo/Persistence_Test/test.cpp:

          Changes to IFR test code and to associated perl scripts to both
          fix bugs in test executions and minimize output for successful
          test executions. These changes are in preparation for adding
          the tests to the list of automatically executed tests in our
          nightly builds.

Tue Dec  7 18:10:05 2004  Jeff Parsons <j.parsons@vanderbilt.edu>

        * orbsvcs/orbsvcs/IFRService/Contained_i.cpp:
        * orbsvcs/orbsvcs/IFRService/Container_i.cpp:
        * orbsvcs/orbsvcs/IFRService/Container_i.h:
        * orbsvcs/orbsvcs/IFRService/IFR_Service_Utils.cpp:
        * orbsvcs/orbsvcs/IFRService/IFR_Service_Utils.h:
        * orbsvcs/IFR_Service/IFR_Server.cpp:
        * orbsvcs/IFR_Service/IFR_Service.cpp:

          Fixes to the Contained::move() method implementation,
          and changes to eliminate the output of the IFR's IOR
          upon startup - for automatic execution of IFR tests,
          we don't want so much extranious output.

Tue Dec  7 13:14:17 2004  Greg Bostrom <greg.bostrom@hp.com>

        * TAO_IDL/ast/ast_decl.cpp
        * TAO_IDL/be/be_array.cpp
        * TAO_IDL/be/be_attribute.cpp
        * TAO_IDL/be/be_codegen.cpp
        * TAO_IDL/be/be_decl.cpp
        * TAO_IDL/be/be_enum.cpp
        * TAO_IDL/be/be_exception.cpp
        * TAO_IDL/be/be_home.cpp
        * TAO_IDL/be/be_interface.cpp
        * TAO_IDL/be/be_operation.cpp
        * TAO_IDL/be/be_predefined_type.cpp
        * TAO_IDL/be/be_sequence.cpp
        * TAO_IDL/be/be_string.cpp
        * TAO_IDL/be/be_structure.cpp
        * TAO_IDL/be/be_union.cpp
        * TAO_IDL/be/be_valuetype.cpp
        * TAO_IDL/be/be_visitor_amh_pre_proc.cpp
        * TAO_IDL/be/be_visitor_root/root_ch.cpp
        * TAO_IDL/be_include/be_codegen.h
        * TAO_IDL/fe/y.tab.cpp
        * TAO_IDL/include/idl_global.h
        * TAO_IDL/tao_idl.cpp
        * TAO_IDL/util/utl_global.cpp
        * TAO_IDL/util/utl_scope.cpp

          Replace the UINT64 bit masks and bit flags with the bool type.

          old: ACE_UINT64 foo_seen_;
          new: bool       foo_seen_;

          old: ACE_SET_BITS (idl_global->decls_seen_info_,
                      idl_global->decls_seen_masks.foo_seen_);
          new: idl_global->foo_seen_ = true;

          old: if (ACE_BIT_ENABLED (idl_global->decls_seen_info_,
                             idl_global->decls_seen_masks.foo_seen_)
          new: if (idl_global->foo_seen_)

          This fix closes [BUGID:1665] by removing 'unsigned long long' usage.

Tue Dec  7 16:39:33 2004  Jeff Parsons <j.parsons@vanderbilt.edu>

        * TAO_IDL/fe/idl.yy:
        * TAO_IDL/fe/y.tab.cpp:
        * TAO_IDL/include/idl_global.h:
        * TAO_IDL/util/utl_global.cpp:
        * orbsvcs/IFR_Service/be_init.cpp:

          Created a flag in the IDL front end global data class,
          set by the tao_ifr backend, to be used as an additional
          check to decide whether to generate the AST nodes
          associated with 'uses multiple'. These 'implied IDL'
          declarations should not go into the IFR.

Tue Dec  7 16:35:59 2004  Jeff Parsons <j.parsons@vanderbilt.edu>

        * orbsvcs/tests/Bug_1393_Regression/run_test.pl:

          Fixed perl script to look for the tao_ifr executable in
          ACE_ROOT/bin.

Tue Dec  7 15:36:04 2004  Jeff Parsons <j.parsons@vanderbilt.edu>

        * TAO_IDL/asts/ast_root.cpp:

          Reverted the quickfix below in

          Tue Dec  7 14:57:26 2004  Jeff Parsons <j.parsons@vanderbilt.edu>

        * TAO_IDL/util/utl_scope.cpp:

          Fixed error in populating the scope member that holds pointers
          to the nodes referenced in the scope. In many cases the
          referenced nodes were getting added twice for each call.

Tue Dec  7 14:57:26 2004  Jeff Parsons <j.parsons@vanderbilt.edu>

        * TAO_IDL/ast/ast_root.cpp:

          Reverted a previous change to the cleanup in global scope
          between processing of multiple IDL files. This is a quick
          fix to get the IDL importer (tao_picml) working for a
          CoSMIC release. When there is time, I'll track down the
          actual source of the problem.

Tue Dec  7 20:10:12 UTC 2004  Johnny Willemsen  <jwillemsen@remedy.nl>

        * tao/Messaging_SyncScopeC.{h,cpp,i,inl}:
          Regenerated and replace .i file with .inl variant

        * tao/Makefile.am:
          Updated because of change above

Tue Dec  7 18:41:12 UTC 2004  Johnny Willemsen  <jwillemsen@remedy.nl>

        * tao/Makefile.am:
          Updated BoundsC.i and BooleanSeqC.i to their new .inl versions

Tue Dec  7 18:40:12 UTC 2004  Johnny Willemsen  <jwillemsen@remedy.nl>

        * tao/BoundsA.cpp:
        * tao/BoundsC.{h,cpp,i,inl}:

Tue Dec  7 18:32:12 UTC 2004  Johnny Willemsen  <jwillemsen@remedy.nl>

        * tao/BooleanSeqA.cpp:
        * tao/BooleanSeqC.{h,cpp,i,inl}:
          Regenerated and replace .i file with .inl variant

Tue Dec  7 18:19:12 UTC 2004  Johnny Willemsen  <jwillemsen@remedy.nl>

        * tao/IORInterceptor/IORInterceptor.pidl:
          Added -Sc to the options for the regeneration

        * tao/IORInterceptor/IORInterceptorC.cpp:
          Regenerated

Tue Dec  7 12:13:40 2004  Chad Elliott  <elliott_c@ociweb.com>

        * orbsvcs/orbsvcs/Notify/EventChannel.cpp:

          Fixed the last of the vc6 build problems.

Tue Dec  7 18:05:12 UTC 2004  Johnny Willemsen  <jwillemsen@remedy.nl>

        * tao/IORInterceptor/IORInfo.pidl:
          Added -Sc to the options for the regeneration

        * tao/IORInterceptor/IORInfoC.cpp:
          Regenerated

Mon Dec  6 23:08:12 2004  J.T. Conklin  <jtc@acorntoolworks.com>

        * orbsvcs/Logging_Service/Notify_Logging_Service/Notify_Logging_Service.cpp:
        * orbsvcs/Logging_Service/Notify_Logging_Service/Notify_Logging_Service.h:

          Changed to use NamingContext instead of NamingContextExt.

        * orbsvcs/Notify_Service/Notify_Service.cpp:
        * orbsvcs/Notify_Service/Notify_Service.h:

          Removed TAO_NOTIFY_USE_NAMING_CONTEXT conditionals to use the
          NamingContext instead of the NamingContextExt interface.  Since
          use of the latter doesn't buy us anything (and costs a little),
          we use the "least common subset" to maximize interoperablity.

Tue Dec  7 08:31:17 2004  Chad Elliott  <elliott_c@ociweb.com>

        * tao/BiDir_GIOP/BiDirGIOP.cpp:

          Added a missing ACE_ENV_ARG_DECL to the load_policy_validators
          method.  This will fix non-native exception builds.

Tue Dec  7 08:12:22 2004  Jeff Parsons <j.parsons@vanderbilt.edu>

        * TAO_IDL/be/be_codegen.cpp:

          Fixed logic in the decision to generate an include of
          tao/Typecode.h. An extra set of parenthese was needed to
          take into account the relative precedence of '&&' and '||'.
          Thanks to Johnny Willemsen <jwillemsen@remedy,nl> for
          reporting the unnecessary include in
          tao/IORInterceptor/IORInfoC.cpp.

Tue Dec  7 12:51:12 UTC 2004  Johnny Willemsen  <jwillemsen@remedy.nl>

        * tao/ObjRefTemplate/Default_ORTC.cpp:
          Regenerated this file with the latest version of the TAO_IDL
          compiler

Tue Dec  7 10:08:12 UTC 2004  Johnny Willemsen  <jwillemsen@remedy.nl>

        * tests/BiDirectional_MultipleORB/destroy.mpc:
          Added missing Id tag

Mon Dec  6 16:00:46 2004  Iliyan Jeliazkov  <jeliazkov_i@ociweb.com>

          This change solves a problem with the bi-dir policy
          validators, in the context of multiple ORBs by
          eliminating cached, ORB-specific state in the
          TAO_BiDirGIOP_Loader singleton. Thus it also
          eliminates the possibility for a race condition
          between two threads that my be creating and
          destroying ORB instances simultaneously.

        * tao/BiDir_Adapter.h:

          Changed the method decl to support passing up any exceptions for
          platforms that do not support them natively.

        * tao/BiDir_GIOP/BiDirGIOP.h:
        * tao/BiDir_GIOP/BiDirGIOP.cpp:

          Removed state, represented by the bi-dir policy validator
          instance, which was carried around in the Loader even
          after the corresponding ORB was destructed. This caused
          problems in processes with >1 ORB, where the new ORB was
          re-using an validator instance, associated with another ORB.
          In certain cases that validator was also already deleted.
          Now a bi-dir policy validator gets instantiated and
          registered during the call to
          TAO_BiDirGIOP_Loader::load_policy_validators,
          instead of piggy-backing on register_orb_initializer and
          caching it.

        * tao/ORB_Core.h:
        * tao/ORB_Core.cpp:
        * tao/Policy_Validator.h:
        * tao/Policy_Validator.cpp:

           Provided accessor for the ORB reference to enable the
           bi-dir policy validator instantiation in
           TAO_BiDirGIOP_Loader::load_policy_validators

        * tao/PortableServer/POA_Policy_Set.cpp:

          Changed the invocation of the method to pass up any exceptions on
          platforms that do not support them natively.

        * tests/BiDirectional_MultipleORB/README:
        * tests/BiDirectional_MultipleORB/destroy.mpc:
        * tests/BiDirectional_MultipleORB/destroy.cpp:
        * tests/BiDirectional_MultipleORB/run_test.pl:

          This is a test that creates a bidir GIOP policy
          for a POA and then attempts to repeat this, after first
          destructing and re-creating the ORB. This used to fail
          by breaking an assertion, because the second ORB was
          tryig to register a policy validator object instance,
          which lingered since the time the first ORB was created.
          In some cases it broke with SEGV, as when trying to access
          a previously deleted bi-dir policy validator.

Mon Dec  6 13:14:32 2004  Jeff Parsons <j.parsons@vanderbilt.edu>

        * orbsvcs/IFR_Service/IFR_Service.mpc:

          Removed inherited .mpb files iortable, svc_utils, and
          typecodefactory, since they are already pulled in by
          ifrservice. Also added empty IDL_Files block. Because
          of all the inherited .mpb files, any IDL file in the
          directory will automatically get added to the build
          during regeneration, even though there is no need in
          this particular case. Sometimes I have IDL files in
          this directory for debugging purposes, and it was
          easier to add the empty block than to try and refactor
          the inherited .mpb files.

Mon Dec  6 12:50:17 2004  Chad Elliott  <elliott_c@ociweb.com>


        * tests/TestUtils/TestCombinedThreads.h:
        * tests/TestUtils/TestCombinedThreads.cpp:
        * tests/TestUtils/TestUtils.mpc:

          Removed my TestUtils library as it is completely out-of-date and
          no longer useful.

Mon Dec  6 10:23:31 2004  Chad Elliott  <elliott_c@ociweb.com>

        * interop-tests/wchar/client.cpp:
        * interop-tests/wchar/server.cpp:

          Fixed build problems when native exceptions are disabled.

        * interop-tests/wchar/interop_wchar.mpc:

          Added exename to each mpc project.

Mon Dec  6 06:51:53 2004  Chad Elliott  <elliott_c@ociweb.com>

        * orbsvcs/orbsvcs/Notify/EventChannel.cpp:

          Added a missing namespace for the Topology_Object.

Mon Dec  6 09:41:12 UTC 2004 Johnny Willemsen  <jwillemsen@remedy.nl>

        * tao/CharSeqC.{h,cpp,inl}:
        * tao/CharSeqS.h:
          Regenerated these files with the latest version of the TAO_IDL
          compiler.

Mon Dec  6 10:23:12 UTC 2004 Johnny Willemsen  <jwillemsen@remedy.nl>

        * tao/ObjRefTemplate/ObjectReferenceTemplateC.cpp:
          Regenerated this file with the latest version of the IDL compiler

Sat Dec  4 20:40:10 2004 Yan Dai  <dai_y@ociweb.com>

       * TAO/interop-tests/wchar/server.cpp
         TAO/interop-tests/wchar/client.cpp

         Merged OCI's changes that have additional test to send seq of
         struct containing wstring to the server and fixed compilation
         errors with wchar enabled on windows.

Fri Dec  3 21:54:22 2004  J.T. Conklin  <jtc@acorntoolworks.com>

        * orbsvcs/Notify_Service/Notify_Service.cpp:
        * orbsvcs/orbsvcs/FtRtEvent/Utils/FTEC_Gateway.cpp:
        * orbsvcs/orbsvcs/Log/LogRecordStore_persist.cpp:
        * orbsvcs/orbsvcs/Notify/Consumer.cpp:
        * orbsvcs/tests/HTIOP/Hello/server.cpp:
        * orbsvcs/tests/Notify/XML_Persistence/main.cpp:

          Changed #include "orbsvcs/orbsvcs/..." to #include "orbsvcs/..."
          in files where it was missed or was inadvertantly reintroduced.

Fri Dec  3 20:06:37 2004  J.T. Conklin  <jtc@acorntoolworks.com>

        * configure.ac:

          Changed to call ACE_WITH_SSL instead of explicitly setting
          BUILD_SLL false.

Fri Dec  3 18:32:19 2004  J.T. Conklin  <jtc@acorntoolworks.com>

        * tao/Makefile.am:

          Update to account for recent ObjRefTemplate changes.

Sat Dec  4 00:17:31 2004  Balachandran Natarajan  <bala@dre.vanderbilt.edu>

        * tao/IIOP_Endpoint.cpp:
        * tao/Strategies/SCIOP_Endpoint.cpp

          Fixed a logic error while trying to parse the string passed in
          for PreferredInterfaces option. The parsing introduced a loop
          for endpoints created which were not part of the "destination"
          in the ORBPreferredInterface option. Thanks to Theckla Louchios
          <theckla.louchois@lmco.com> for reporting the problem.

Fri Dec  3 11:34:37 2004  Dale Wilson  <wilson_d@ociweb.com>

        * orbsvcs/orbsvcs/Notify/Admin.h:
        * orbsvcs/orbsvcs/Notify/Admin.cpp:
        * orbsvcs/orbsvcs/Notify/EventChannel.h:
        * orbsvcs/orbsvcs/Notify/EventChannel.cpp:
        * orbsvcs/orbsvcs/Notify/ProxyConsumer.h:
        * orbsvcs/orbsvcs/Notify/ProxyConsumer.cpp:
        * orbsvcs/orbsvcs/Notify/ProxySupplier.h:
        * orbsvcs/orbsvcs/Notify/ProxySupplier.cpp:
        * orbsvcs/orbsvcs/Notify/Topology_Object.h:
        * orbsvcs/orbsvcs/Notify/Topology_Object.cpp:
          To the extent possible:
          Avoid overloading the init method name -- use
          other names.
          Make the init method(s) non-virtual.
          AFAIK the only one "questionable" usage is:
          TAO_Notify_Supplier_Admin and TAO_Notify_Consumer_Admin
          override the non-virtual init method in TAO_Notify_Admin.

Fri Dec  3 09:20:38 2004  J.T. Conklin  <jtc@acorntoolworks.com>

        * orbsvcs/Logging_Service/Notify_Logging_Service/Makefile.am:

          Updated.

        * orbsvcs/Logging_Service/Notify_Logging_Service/Notify_Logging_Service.cpp:
          Removed unnecessary/unused #include "tao/IORTable/IORTable.h".

        * orbsvcs/Logging_Service/Notify_Logging_Service/Notify_Logging_Service.mpc:
          Removed inheritance from iortable.

Fri Dec  3 09:13:46 2004  Dale Wilson  <wilson_d@ociweb.com>

        * orbsvcs/orbsvcs/Notify/Admin.cpp:
        * orbsvcs/orbsvcs/Notify/EventChannel.cpp:
        * orbsvcs/orbsvcs/Notify/ProxyConsumer.cpp:
        * orbsvcs/orbsvcs/Notify/ProxySupplier.cpp:
        * orbsvcs/orbsvcs/Notify/Topology_Object.h:
        * orbsvcs/orbsvcs/Notify/Topology_Object.cpp:
          One more pass at the "init" method.  This time to make VC6 happy.

Fri Dec  3 09:50:27 2004  Jeff Parsons <j.parsons@vanderbilt.edu>

        * TAO_IDL/be/be_visitor_exception/exception_cs.cpp:
        * TAO_IDL/be/be_visitor_valuetype/valuetype_cs.cpp:
        * TAO_IDL/be/be_visitor_valuetype/valuetype_init_cs.cpp:

          Regarding the generated _downcast() method for exceptions,
          valuetypes and value factories, since we are using
          dynamic_cast<> now for these, the existing checks for nil
          or the string compares of repo ids are unnecessary, and have
          been removed.

Fri Dec  3 15:21:12 UTC 2004  Johnny Willemsen  <jwillemsen@remedy.nl>

        * orbsvcs/examples/ORT/ObjectReferenceFactory.idl:
          Include the ObjectReferenceTemplate_include.pidl file instead of
          ObjectReferenceTemplate.pidl.

Fri Dec  3 15:16:12 UTC 2004  Johnny Willemsen  <jwillemsen@remedy.nl>

        * orbsvcs/orbsvcs/LB_ORT.idl:
        * tests/ORT/ObjectReferenceFactory.idl:
          Include the ObjectReferenceTemplate_include.pidl file instead of
          ObjectReferenceTemplate.pidl.

Fri Dec  3 14:33:12 UTC 2004  Johnny Willemsen  <jwillemsen@remedy.nl>

        * tao/Acceptor_Impl.cpp:
          Updated some debug statements so that formatting is consistent

Fri Dec  3 13:59:12 UTC 2004  Johnny Willemsen  <jwillemsen@remedy.nl>

        * orbsvcs/tests/AVStreams/Simple_Three_Stage/sender.cpp:
          Use LM_ERROR in the error that the input file cannot be opened

Fri Dec  3 12:54:12 UTC 2004  Johnny Willemsen  <jwillemsen@remedy.nl>

        * tao/ObjRefTemplate/ObjectReferenceTemplate_include.pidl:
          New file that users of this library can include

        * tao/ObjRefTemplate/ObjectReferenceTemplate_includeC.h:
        * tao/ObjRefTemplate/ObjectReferenceTemplate_includeS.h:
          New files

        * tao/ObjRefTemplate/Default_ORT.pidl:
        * tao/IORInterceptor/IORInfo.pidl:
          Include the ObjectReferenceTemplate_include file

        * tao/ObjRefTemplate/Default_ORTC.{h,cpp,inl}:
        * tao/IORInterceptor/IORInfoC.{h,cpp,inl}:
        * tao/IORInterceptor/IORInterceptor.{h,cpp,inl}:
          Regenerated

        * tao/ObjRefTemplate/Default_ORTA.cpp:
          New file containing typecodes and any operators

        * tao/ObjRefTemplate/ObjectReferenceTemplate.{h,cpp,i}:
          Removed empty inline file and updated cpp,h file

        * tao/ObjRefTemplate/ObjectReferenceTemplateC.{h,cpp,inl}:
          Regenerated

        * tao/ObjRefTemplate/ORT_Adapter_Impl.h:
        * tao/IORInterceptor/IORInfo.h:
        * tao/IORInterceptor/ObjectReferenceTemplate_i.h:
          Removed deprecated _msc_ver checks

Fri Dec  3 05:19:23 2004  Balachandran Natarajan  <bala@dre.vanderbilt.edu>

        * tao/ObjRefTemplate/ObjectReferenceTemplate.h:

          New file that needs to be included by clients.

        * tao/ObjRefTemplate/Default_ORTC.h:
        * tao/ObjRefTemplate/ObjectReferenceTemplateC.cpp:
        * tao/ObjRefTemplate/ObjectReferenceTemplateC.h:
        * tao/ObjRefTemplate/ObjectReferenceTemplateC.inl:

          Included the above file.

        * tao/ObjRefTemplate/ORT_Adapter_Factory_Impl.h:

          Added a safe #define for including ObjectReferenceTemplateC.h.

Thu Dec  2 21:21:47 2004  Jeff Parsons <j.parsons@vanderbilt.edu>

        * TAO_IDL/be/be_argument.cpp:
        * TAO_IDLbe/be_visitor_interface/base_proxy_impl_ch.cpp:
        * TAO_IDLbe/be_visitor_interface/direct_proxy_impl_sh.cpp:
        * TAO_IDLbe/be_visitor_interface/direct_proxy_impl_ss.cpp:
        * TAO_IDLbe/be_visitor_interface/interceptors_cs.cpp:
        * TAO_IDLbe/be_visitor_interface/interceptors_ss.cpp:
        * TAO_IDLbe/be_visitor_interface/interface_cs.cpp:
        * TAO_IDLbe/be_visitor_interface/interface_ss.cpp:
        * TAO_IDLbe/be_visitor_interface/remote_proxy_impl_cs.cpp:

          Fixed mistake in generated code where we were instantiating
          an Abstract_Invocation_Adapter when regenerating an operation
          in a concrete interface or component which is from an
          inherited or supported abstract interface. Also made a
          change to mark the argument types of such operations so
          that the TAO::Arg_Traits<> specializations for them can
          be regenerated as well.

Thu Dec  2 13:11:22 2004  Dale Wilson  <wilson_d@ociweb.com>

        * orbsvcs/orbsvcs/Notify/Topology_Object.h:
          Restore the "unnecessary" virtual inheritence and added a note
          indicating why it's there (to suppress a warning from HP ACC)

Thu Dec  2 10:51:34 2004  Jeff Parsons <j.parsons@vanderbilt.edu>

        * TAO_IDL/be/be_visitor_interface/strategized_proxy_broker_ss.cpp:

          Added generation of namespace 'TAO' to the generation of 'VMCID'
          added in

          Thu Dec  2 13:06:48 2004  Balachandran Natarajan  <bala@dre.vanderbilt.edu>

Thu Dec  2 13:06:48 2004  Balachandran Natarajan  <bala@dre.vanderbilt.edu>

        * TAO_IDL/be/be_visitor_interface/strategized_proxy_broker_ss.cpp:

          Used VMCID while trying to propogate system exception with minor
          code.

Wed Dec  1 12:00:40 2004  J.T. Conklin  <jtc@acorntoolworks.com>

        * orbsvcs/tests/FaultTolerance/GroupRef_Manipulation/run_test.pl:

          Correct typo in client's server IOR parameter.

Wed Dec  1 11:38:57 2004  J.T. Conklin  <jtc@acorntoolworks.com>

        * orbsvcs/orbsvcs/Makefile.am:

          Update.

        * orbsvcs/orbsvcs/FTORB.mpc:

          Added PortableGroup_Simple_export.h, PortableGroup_Simple_DSS_T.h
          to Header_Files; PortableGroup_Simple_DSS_T.inl to Inline_Files;
          and PortableGroup_Simple_DSS_T.cpp to Template_Files so headers
          will be installed.

Wed Dec  1 19:29:32 2004  Balachandran Natarajan  <bala@dre.vanderbilt.edu>

        * tao/SystemException.cpp:

          Moved some of the minor code changes from Johnn's branch to the
          main trunk. The minor code specification was slightly out of
          whack with the CORBA specification.

Wed Dec  1 17:19:39 2004  Balachandran Natarajan  <bala@dre.vanderbilt.edu>

        * TAO_IDL/be/be_visitor_interface/strategized_proxy_broker_ss.cpp:

          Added minor code while throwing BAD_OPERATION exception in
          conformance with the CORBA spec.

        * tao/IIOP_Endpoint.cpp:

          Removed a weird DEBUG statemnet.

        * tao/SystemException.cpp:

          Added a minor code lookup table for BAD_OPERATION.

Wed Dec  1 16:30:00 UTC 2004  Simon Massey  <sma@prismtech.com>

        * TAO/TAO_IDL/util/utl_global.cpp

          Fixed bugzilla 1995 - TAO_IDL Compiler - Memory buffer
          overflow & File handle resource leak

Wed Dec  1 15:30:00 UTC 2004  Simon Massey  <sma@prismtech.com>

        * TAO/orbsvcs/orbsvcs/IFRService/AliasDef_i.cpp
        * TAO/orbsvcs/orbsvcs/IFRService/StructDef_i.cpp
        * TAO/orbsvcs/orbsvcs/IFRService/UnionDef_i.cpp

          Fixed bugzilla 1996 - IFR - Dereferencing NULL pointer
          when compound object has been deleted.  Thanks to Johnny
          Willemsen <jwillemsen@remedy.nl> for pointing out emulated
          exceptions were wrongly used in the previous fix.

Wed Dec  1 14:00:00 UTC 2004  Simon Massey  <sma@prismtech.com>

        * TAO/orbsvcs/orbsvcs/IFRService/AliasDef_i.cpp
        * TAO/orbsvcs/orbsvcs/IFRService/StructDef_i.cpp
        * TAO/orbsvcs/orbsvcs/IFRService/UnionDef_i.cpp

          Fixed bugzilla 1996 - IFR - Dereferencing NULL pointer
          when compound object has been deleted

Wed Dec  1 07:18:37 2004  Chad Elliott  <elliott_c@ociweb.com>

        * orbsvcs/tests/FT_App/FT_Client.cpp:
        * orbsvcs/tests/FT_App/FT_TestReplica_i.cpp:

          Fixed build warnings about mismatch parameter types with
          fprintf.

Tue Nov 30 16:33:08 2004  J.T. Conklin  <jtc@acorntoolworks.com>

        * orbsvcs/orbsvcs/Makefile.am:

          Add replace_key.cpp to FTRT_EventChannel sources.

Tue Nov 30 11:42:50 2004  Jeff Parsons <j.parsons@vanderbilt.edu>

        * tao/Any_Arg_Traits.h:

          New file, containing template specializations of the
          stub and skeleton arg traits classes for CORBA::Any.
          These specializations were formerly in generated code.

        * TAO_IDL/be/be_codegen.cpp:
        * TAO_IDL/be/be_decl.cpp:
        * TAO_IDL/be/be_visitor_arg_traits.cpp:
        * TAO_IDL/be_include/be_visitor_arg_traits.h:
        * TAO_IDL/include/idl_global.h:
        * TAO_IDL/util/utl_global.cpp:

          Added check for an Any used as an operation parameter, and
          code to include the new file above if one is seen. This
          was the only predefined type for which arg traits class
          specializations were generated, so the
          visit_predefined_type() method was removed from the
          arg traits visitor, defaulting execution to the base
          class method which is a no-op. Thanks to Greg Bostrum
          <greg.bostrom@hp.com> for reporting a problem with code
          generation in the Notification Service when multiple IDL
          file are passed to the IDL compiler on a single command
          line. After processing each file, all nodes in the AST
          are destroyed except for the predefined types, and now,
          at least for the arg traits, all predefined types are
          handled the same. This fix closes [BUGID:1978].

Tue Nov 30 11:15:29 2004  Dale Wilson  <wilson_d@ociweb.com>

        * orbsvcs/orbsvcs/Notify/ProxyConsumer.h:
        * orbsvcs/orbsvcs/Notify/ProxyConsumer.cpp:
          Missing namespace qualifier on argument.

        * orbsvcs/orbsvcs/Notify/EventTypeSeq.h:
        * orbsvcs/orbsvcs/Notify/EventTypeSeq.cpp:
        * orbsvcs/orbsvcs/Notify/ProxyConsumer_T.cpp:
        * orbsvcs/orbsvcs/Notify/ConsumerAdmin.cpp:
        * orbsvcs/orbsvcs/Notify/ProxySupplier_T.cpp:
        * orbsvcs/orbsvcs/Notify/Admin.cpp:
          Replace another overloading of the init method name
          with a unique and more descriptive name.

        * orbsvcs/orbsvcs/Notify/Consumer.cpp:
        * orbsvcs/orbsvcs/Notify/Any/ProxyPushConsumer.cpp:
        * orbsvcs/orbsvcs/Notify/Reconnection_Registry.cpp:
        * orbsvcs/orbsvcs/Notify/Routing_Slip.cpp:
        * orbsvcs/orbsvcs/Notify/XML_Loader.cpp:
        * orbsvcs/orbsvcs/Notify/SupplierAdmin.cpp:
          BCB6 builds complaining about undefined "ex" in ACE_TRY_NEW_ENV{ ... }ACE_CATCHANY
          s/ACE_TRY_NEW_ENV/ACE_DECLARE_NEW_ENV;ACE_TRY/

        * orbsvcs/orbsvcs/Notify/Structured/RT_StructuredProxyPushSupplier.cpp:
          Unused ENV argument

        * orbsvcs/orbsvcs/Notify/Topology_Object.h:
          Remove unnecessary virtual inheritence

Tue Nov 30 09:53:57 2004  Chad Elliott  <elliott_c@ociweb.com>

        * orbsvcs/orbsvcs/Notify/Admin.cpp:
        * orbsvcs/orbsvcs/Notify/EventChannel.cpp:
        * orbsvcs/orbsvcs/Notify/ProxyConsumer.cpp:
        * orbsvcs/orbsvcs/Notify/ProxySupplier.cpp:
        * orbsvcs/orbsvcs/Notify/Topology_Object.h:
        * orbsvcs/orbsvcs/Notify/Topology_Object.cpp:

          Renamed the init method in Topology_Object to initialize to avoid
          ambiguity with the TAO_NotifyProxyConsumer init method.

        * orbsvcs/orbsvcs/Notify/XML_Saver.cpp:

          Changed the fprintf format from %d to %ld for the long int
          parameter.

Tue Nov 30 08:38:12 UTC 2004  Martin Corino  <mcorino@remedy.nl>

        * orbsvcs/tests/FT_App/FT_Client.cpp:
          Fixed compile problems.

Mon Nov 29 21:57:06 MST 2004  Scott Harris <harris_s@ociweb.com>

        * examples/Load_Balancing_persistent/Identity_Client.cpp:
        * examples/Load_Balancing_persistent/Load_Balancer_i.cpp:
        * orbsvcs/orbsvcs/HTIOP/HTIOP_Acceptor.cpp:
        * orbsvcs/orbsvcs/HTIOP/HTIOP_Transport.cpp:
        * orbsvcs/orbsvcs/PortableGroup/UIPMC_Acceptor.cpp:

          Removed extra commas after ACE_TEXT macros that should
          not have been there because the strings should have
          been concatenated.  Originally found a bad log output
          and searched for other similar problems.

Mon Nov 29 16:45:00 2004 Huang-Ming Huang <hh1@cse.wustl.edu>
        * orbsvcs/orbsvcs/FtRtEvent/EventChannel/GroupInfoPublisher.cpp
          Fixed problem when the immediate successor of the primary crashes. Thanks
          to Thia Chang Chao <tchangch@dso.org.sg> for reporting the bug.

Mon Nov 29 14:44:16 2004  Dale Wilson  <wilson_d@ociweb.com>

        * orbsvcs/orbsvcs/Notify/Admin.h:
        * orbsvcs/orbsvcs/Notify/Admin.cpp:
        * orbsvcs/orbsvcs/Notify/EventChannel.h:
        * orbsvcs/orbsvcs/Notify/EventChannel.cpp:
          Another instance of the ambiguous init method.

Mon Nov 29 13:23:14 2004  Dale Wilson  <wilson_d@ociweb.com>

        * orbsvcs/orbsvcs/Notify/Admin.cpp:
        * orbsvcs/orbsvcs/Notify/EventChannel.cpp:
        * orbsvcs/orbsvcs/Notify/ProxyConsumer.h:
        * orbsvcs/orbsvcs/Notify/ProxyConsumer.cpp:
        * orbsvcs/orbsvcs/Notify/ProxySupplier.cpp:
        * orbsvcs/orbsvcs/Notify/Topology_Object.h:
        * orbsvcs/orbsvcs/Notify/Topology_Object.cpp:
          Ambiguous resolution of init method.  Some compilers
          don't notice that the base class method is hidden
          (intentionally) by the derived class method.

Mon Nov 29 17:45:55 2004  Balachandran Natarajan  <bala@dre.vanderbilt.edu>

        * tao/IIOP_Endpoint.cpp:
        * tao/IIOP_Endpoint.h:

          Added a bool which holds the  details of when the endpoint is
          encodable. For example, endpoints created by RTCORBA for
          multiple priorities need to be encoded whereas endpoints created
          for preffered netwroks need not be encoded.

        * tao/IIOP_Profile.cpp:

          Check the status of the bool before encoding th eendpoint.

        * tao/Strategies/SCIOP_Endpoint.cpp:
        * tao/Strategies/SCIOP_Endpoint.h:
        * tao/Strategies/SCIOP_Profile.cpp:

          Repeat the above changes for SCIOP.

Mon Nov 29 07:19:16 2004  Ciju John  <john_c@ociweb.com>

        * orbsvcs/tests/Notify/Discarding/run_test.pl:
          Increased startup time for sequence server as tests on
          some machines were failing.

Mon Nov 29 13:15:12 UTC 2004  Martin Corino  <mcorino@remedy.nl>

        * orbsvcs/tests/FT_App/FT_ReplicationManagerController.cpp:
        * orbsvcs/tests/FT_App/StubFaultNotifier.cpp:
        * orbsvcs/tests/FT_App/ReplicationManagerFaultConsumerAdapter.cpp:
        * orbsvcs/tests/FT_App/FT_Creator.h:
        * orbsvcs/tests/FT_App/FT_Creator.cpp:
        * orbsvcs/tests/FT_App/FT_Client.cpp:
        * orbsvcs/tests/FT_App/FT_TestReplica_i.cpp:
        * orbsvcs/tests/FT_App/StubFaultAnalyzer.cpp:
          Fixed problems with use of iostreams for
          ACE_LACKS_IOSTREAM_TOTALLY builds (VxWorks DIAB).

        * orbsvcs/tests/FT_App/StubFaultConsumer.cpp:
        * orbsvcs/tests/FT_App/StubFaultConsumer.h:
          Fixed problems with use of iostreams for
          ACE_LACKS_IOSTREAM_TOTALLY builds (VxWorks DIAB).
          Also fixed incorrect use of 'throw' instead of ACE_THROW_SPEC.

Mon Nov 29 13:10:12 UTC 2004  Johnny Willemsen  <jwillemsen@remedy.nl>

        * orbsvcs/orbsvcs/AV/pluggable_av_log:
          Removed this file, it is a partly changelog that is really ancient

Mon Nov 29 12:39:13 2004  Balachandran Natarajan  <bala@dre.vanderbilt.edu>

        * tao/IIOP_Endpoint.cpp:
        * tao/Strategies/SCIOP_Endpoint.cpp:

          Fixed a stupid typo which resulted in some tests failing in the
          daily builds.  Thanks to Johnny for pointing me to the builds.

Mon Nov 29 10:00:12 UTC 2004  Johnny Willemsen  <jwillemsen@remedy.nl>

        * orbsvcs/tests/Interoperable_Naming/ncontextext_client_i.cpp:
          Replaced cout with ACE_ERROR

Sun Nov 28 18:30:12 UTC 2004  Johnny Willemsen  <jwillemsen@remedy.nl>

        * orbsvcs/tests/Notify/Sequence_Multi_Filter/Sequence_Supplier.cpp:
          Replaced fprintf to stdout with ACE_DEBUG to be more portable

Sun Nov 28 18:21:12 UTC 2004  Johnny Willemsen  <jwillemsen@remedy.nl>

        * orbsvcs/tests/RTCosScheduling/server.cpp:
          Replaced NULL with 0, more portable. Also replaced ofstream usage
          with fopen/fprintf to write the IOR to disk.

Sun Nov 28 18:16:12 UTC 2004  Johnny Willemsen  <jwillemsen@remedy.nl>

        * orbsvcs/tests/RTCosScheduling/Object1_i.{h,cpp}:
          Replaced throw with ACE_THROW_SPEC to fix compile problems with
          building without native excption support

Sun Nov 28 18:00:30 2004  Balachandran Natarajan  <bala@dre.vanderbilt.edu>

        * tao/IORInterceptor/IORInterceptor.pidl:

          Added some documentation for applying diffs.

        * tao/IORInterceptor/IORInterceptorC.h:

          Cosmetic hand craft to minimize the number of lines of diffs.

        * tao/IORInterceptor/diff/IORInterceptor.diff:

          New file for maintenence.

Sun Nov 28 17:41:37 2004  Balachandran Natarajan  <bala@dre.vanderbilt.edu>

        * tao/IORInterceptor/IORInterceptor.h:

          A new header file which can be included by trhe applications to
          pull in IORInterceptor symbols even in static mode.

        * tao/IORInterceptor/IORInterceptorC.cpp:
        * tao/IORInterceptor/IORInterceptorC.h:

          Regenerated the files with our standard  trick to prevent
          applications including this file directly.

        * tao/IORInterceptor/IORInterceptor_Adapter_Factory_Impl.cpp:
        * tao/IORInterceptor/IORInterceptor_Adapter_Factory_Impl.h:
        * tao/IORInterceptor/IORInterceptor_Adapter_Impl.h:
        * tao/IORInterceptor/IORInterceptor_List.h:

          Reduced inter-header dependancies.

        * orbsvcs/examples/ORT/Server_IORInterceptor.h:
        * orbsvcs/orbsvcs/LoadBalancing/LB_IORInterceptor.h:
        * tests/ORT/ORT_test_IORInterceptor.h:
        * tests/Portable_Interceptors/IORInterceptor/FOO_IORInterceptor.h:
        * tests/Portable_Interceptors/PolicyFactory/IORInterceptor.h:

          #included IORInterceptor.h

Sun Nov 28 15:14:12 UTC 2004  Martin Corino  <mcorino@remedy.nl>

        * examples/Simple/grid/Grid_Client_i.cpp:
        * orbsvcs/examples/LoadBalancing/client.cpp:
          Fixed problems with use of iostreams for
          ACE_LACKS_IOSTREAM_TOTALLY builds (VxWorks DIAB).

Sun Nov 28 15:07:12 UTC 2004  Johnny Willemsen  <jwillemsen@remedy.nl>

        * orbsvcs/tests/Notify/notify_tests.GNU:
          Removed this file, it is not needed anymore with MPC

Sun Nov 28 15:02:12 UTC 2004  Martin Corino  <mcorino@remedy.nl>

        * examples/Simulator/Event_Supplier/Event_Con.cpp:
          Fixed problems with use of iostreams for
          ACE_LACKS_IOSTREAM_TOTALLY builds (VxWorks DIAB).

Sun Nov 28 11:11:12 UTC 2004  Johnny Willemsen  <jwillemsen@remedy.nl>

        * orbsvcs/orbsvcs/Notify/Topology_Object.h:
          Don't mix virtual and non-virtual inheritance, use virtual for both
          bases, fixes HPUX warnings

Sun Nov 28 11:09:12 UTC 2004  Johnny Willemsen  <jwillemsen@remedy.nl>

        * orbsvcs/orbsvcs/Notify/notify_persist_export.h:
          Fixed this file for static builds

        * orbsvcs/orbsvcs/CosNotification.mpc:
          Removed commented out stuff

Sun Nov 28 11:02:12 UTC 2004  Johnny Willemsen  <jwillemsen@remedy.nl>

        * orbsvcs/tests/Notify/PluggableTopology/Test_Saver.cpp:
          Added include of OS_NS_stdio.h to get fprintf

Sun Nov 28 06:10:36 2004  Balachandran Natarajan  <bala@dre.vanderbilt.edu>

        * docs/Options.html (scenario):

          Documentation for the options.

Sat Nov 27 23:44:56 2004  Ciju John  <john_c@ociweb.com>

        * orbsvcs/Notify/Standard_Event_Persistence.h:
        * orbsvcs/Notify/XML_Topology_Factory.h
          Moved ACE_FACTORY_DECLARE to within TAO_NOTIFY namespace.

        * orbsvcs/Notify/Structured/RT_StructuredProxyPushSupplier.cpp:
        * orbsvcs/Notify/Structured/RT_StructuredProxyPushSupplier.h:
          Added dummy method to remove warnings 'hidden overloaded
          virtual method'.

Sun Nov 28 05:14:24 2004  Balachandran Natarajan  <bala@dre.vanderbilt.edu>

        * tao/Connector_Registry.cpp:

          Used an auto_ptr <> instead of using delete's in the error
          paths.

        The following checkin adds a simple command line option which
        allows configuring the client ORB during initializing with a
        capability to choose preferred interface(s). This is very useful
        for clients on a multihomed hosts, allowing clients to choose
        specific interfaces/networks to communicate with a remote
        target. This capability comes through two options
        -ORBPreferredInterfaces, and
        -ORBEnforcePreferredInterfaces. Please see docs/Options.html for
        more details.

        * tao/Endpoint.h:

          Cosmetic fixes.

        * tao/IIOP_Connection_Handler.cpp:

          Added a debug statement

        * tao/IIOP_Connector.cpp:

          Used the local addr for connect () instead of using the default
          ACE_Addr::sap_any.

        * tao/IIOP_Endpoint.cpp:
        * tao/IIOP_Endpoint.h:

          Added preferred_interfaces (), and a copy constructor. The
          former is used to parse the option and store the preferred path
          for every target end point. A list of preferred paths are
          organized as multiple endpoints (with same target) with different
          preferred networks stringed through the next_ pointer. This
          allows the Invocation code path to pick things through its
          iteration process.

        * tao/IIOP_Profile.cpp:

          Called TAO_IIOP_Endpoint::preferred_interfaces () from within
          decode_profile ().

        * tao/IIOP_Profile.h:

          Added documentation.

        * tao/ORB_Core.cpp:

          Added the two new options.

        * tao/params.cpp:
        * tao/params.h:

          Stored the options.

        * tao/Strategies/SCIOP_Connection_Handler.cpp:
        * tao/Strategies/SCIOP_Connector.cpp:
        * tao/Strategies/SCIOP_Endpoint.cpp:
        * tao/Strategies/SCIOP_Endpoint.h:
        * tao/Strategies/SCIOP_Profile.cpp:
        * tao/Strategies/SCIOP_Profile.h:

          Cut and pasted the changes from IIOP for SCIOP. There is too
          much of similar code out here. We can do some nice
          implementation inheritance to save some footprint.

          Thanks to LMCO EAGAN, for motivating to address this issue in
          TAO.

Sat Nov 27 12:52:57 2004  Ciju John  <john_c@ociweb.com>

        * orbsvcs/orbsvcs/Notify/XML_Loader.h:
        * orbsvcs/orbsvcs/Notify/XML_Saver.cpp:
        * orbsvcs/orbsvcs/Notify/XML_Saver.h:
        * orbsvcs/tests/Notify/PluggableTopology/Test_Saver.cpp:
        * orbsvcs/tests/Notify/Sequence_Multi_Filter/Sequence_Supplier.cpp:
          Fixed problems with use of iostreams for
          ACE_LACKS_IOSTREAM_TOTALLY builds (VxWorks DIAB).

Sat Nov 27 14:34:12 UTC 2004  Martin Corino  <mcorino@remedy.nl>

        * utils/examples/mfc/client.cpp:
          Fixed problems with use of iostreams for
          ACE_LACKS_IOSTREAM_TOTALLY builds (VxWorks DIAB).

Sat Nov 27 14:26:12 UTC 2004  Martin Corino  <mcorino@remedy.nl>

        * utils/performance-tests/Cubit/TAO/MT_Cubit/server.cpp:
          Fixed problems with use of iostreams for
          ACE_LACKS_IOSTREAM_TOTALLY builds (VxWorks DIAB).

Sat Nov 27 14:19:12 UTC 2004  Martin Corino  <mcorino@remedy.nl>

        * utils/catior/catior.cpp:
          Fixed incompatibility with ACE_LACKS_IOSTREAM_TOTALLY builds
          (VxWorks DIAB).

Fri Nov 26 17:49:48 2004  J.T. Conklin  <jtc@acorntoolworks.com>

        * orbsvcs/tests/Log/Basic_Log_Test/run_test.pl:

          New file.

Fri Nov 26 17:53:13 2004  Balachandran Natarajan  <bala@dre.vanderbilt.edu>

        * TAO-INSTALL.html:

          Removed references to TAOACE.dsw. They are no longer available
          in the repository.

Fri Nov 26 14:19:12 UTC 2004  Johnny Willemsen  <jwillemsen@remedy.nl>

        * orbsvcs/orbsvcs/Event/ECG_Complex_Address_Server.cpp:
          Fixed compile problem

Fri Nov 26 10:28:12 UTC 2004  Johnny Willemsen  <jwillemsen@remedy.nl>

        * tests/Bug_1535_Regression/Bug_1535_Regression.mpc:
          Add minimum_corba as base project, instead of adding
          avoids += minimum_corba, the base does just the same and
          make it a little bit better maintainable in the future

Fri Nov 26 09:58:12 UTC 2004  Martin Corino  <mcorino@remedy.nl>

        * orbsvcs/orbsvcs/Event/ECG_Complex_Address_server.cpp:
          Changed use of iostreams to ACE_DEBUG because of compile problems
          with ACE_LACKS_IOSTREAMS_TOTALLY (VxWorks).

Fri Nov 26 09:43:12 UTC 2004  Johnny Willemsen  <jwillemsen@remedy.nl>

        * TAO-INSTALL.html:
          Fixed link to acedefaults.mpb

Fri Nov 26 07:23:12 UTC 2004  Johnny Willemsen  <jwillemsen@remedy.nl>

        * orbsvcs/tests/Log/Basic_Log_Test/Basic_Log_Test.cpp:
          Fixed compile problem in emulated exception builds

Thu Nov 25 13:42:03 2004  Jeff Parsons <j.parsons@vanderbilt.edu>

        * TAO_IDL/be/be_argument.cpp:

          Changed marking of argument types as 'seen in operation'
          only if the argument node is created in the main file.
          This change eliminates problematic generation of arg
          template class specializations in a file other than
          the one in which the type is actually used as an operation
          parameter. Thanks again to Johnny Willemsen
          <jwillemsen@remedy.nl> for reporting the scoreboard error
          in compilation of the DsLogAdmin library that uncovered
          the problem.

Thu Nov 25 09:53:37 2004  J.T. Conklin  <jtc@acorntoolworks.com>

        * orbsvcs/tests/Log/Basic_Log_Test/Basic_Log_Test.cpp:
        * orbsvcs/tests/Log/Basic_Log_Test/Basic_Log_Test.h:

          Pass argc and argv to parse_args() method instead of stashing
          them away in local instance variables before calling ORB_init.
          This allows us to pass ORB options (-ORBInitRef, etc.) on the
          command line.

Thu Nov 25 09:15:39 2004  J.T. Conklin  <jtc@acorntoolworks.com>

        * orbsvcs/examples/Log/Event/Log_Event.mpc:
        * orbsvcs/examples/Log/Notify/Log_Notify.mpc:
        * orbsvcs/examples/Log/RTEvent/Log_RTEvent.mpc:

          Changed exename definitions from consumer and supplier to
          Event_Consumer, Event_Supplier, etc. to match description
          in the README files.

Wed Nov 24 21:21:50 2004  J.T. Conklin  <jtc@acorntoolworks.com>

        * orbsvcs/examples/Log/README:

          Convert from DOS to UNIX text format.

Wed Nov 24 18:38:29 2004  J.T. Conklin  <jtc@acorntoolworks.com>

        * orbsvcs/tests/Log/Basic_Log_Test/Log_Basic_Log_Test.mpc:

          Added exename definition.

Wed Nov 24 17:08:25 2004  J.T. Conklin  <jtc@acorntoolworks.com>

        * orbsvcs/tests/FaultTolerance/GroupRef_Manipulation/run_test.pl:
        * orbsvcs/tests/FaultTolerance/IOGRManipulation/run_test.pl:

          New files.

Wed Nov 24 17:01:22 2004  J.T. Conklin  <jtc@acorntoolworks.com>

        * orbsvcs/TAO_Service/README:

          Update to reflect fact that services have been refactored
          into stub, skeleton, and implementation/service libraries.

Wed Nov 24 14:35:35 2004  Jeff Parsons <j.parsons@vanderbilt.edu>

        * TAO_IDL/be/be_codegen.cpp:

          Removed generation of all ACE and TAO file includes in the
          skeleton source file if there is no non-local interface seen
          in the IDL file. Thanks once again to Johnny Willemsen
          <jwillemsen@remedy.nl> for making the suggestion.

Wed Nov 24 13:44:00 2004  Chad Elliott  <elliott_c@ociweb.com>

        * orbsvcs/orbsvcs/Notify/Standard_Event_Persistence.h:
        * orbsvcs/orbsvcs/Notify/Standard_Event_Persistence.cpp:
        * orbsvcs/orbsvcs/Notify/XML_Topology_Factory.h:
        * orbsvcs/orbsvcs/Notify/XML_Topology_Factory.cpp:

          Moved the ACE_FACTORY_DECLARE out of the .cpp into the .h.

Wed Nov 24 13:16:59 2004  Chad Elliott  <elliott_c@ociweb.com>

        * performance-tests/Protocols/sender.cpp:

          Added a static_cast to double to silence vc71.

Wed Nov 24 19:06:12 UTC 2004  Johnny Willemsen  <jwillemsen@remedy.nl>

        * TAO_IDL/be/be_global.cpp:
          Fixed typo in explanation of -GI commandline option

Wed Nov 24 18:53:12 UTC 2004  Johnny Willemsen  <jwillemsen@remedy.nl>

        * orbsvcs/orbsvcs/Notify/Notify_Constraint_Visitors.cpp
          The TAO_ETCL_Literal_Constraint constructor accepts an Any*, so
          instead of passing an Any_var, use .ptr() to pass an Any*.

Wed Nov 24 08:06:14 2004  J.T. Conklin  <jtc@acorntoolworks.com>

        * orbsvcs/orbsvcs/Makefile.am:

          Updated.

        * orbsvcs/orbsvcs/SSLIOP/SSLIOP_EVP_PKEY.cpp:
        * orbsvcs/orbsvcs/SSLIOP/params_dup.c:
        * orbsvcs/orbsvcs/SSLIOP/params_dup.h:

          OpenSSL's DHparams_dup() and DSAparams_dup() macros contain
          casts that are invalid C++.  Added C wrapper functions that
          allow them to be called from C++.  Changed SSLIOP_EVP_PKEY.cpp
          to call the wrappers instead of the macros.

Wed Nov 24 10:02:12 2004  Jeff Parsons <j.parsons@vanderbilt.edu>

        * TAO_IDL/be/be_codegen.cpp:

          Made generation of POA-related includes in the skeleton header
          file, and includes of AMI and AMH related files, conditional
          depending on whether a non-local interface has been seen
          in the IDL file. Thanks again to Johnny Willemsen
          <jwillemsen@remedy.nl> for making the suggestion.

Wed Nov 24 08:07:21 2004  Jeff Parsons <j.parsons@vanderbilt.edu>

        * TAO_IDL/be/be_codegen.cpp:

          Removed generation of ace/config-all.h include in the
          skeleton source file, since it is already pulled in by
          the stub header file.

        * TAO_IDL/be/be_visitor_root/root_sth.cpp:
        * TAO_IDL/be/be_visitor_interface/tie_si.cpp:

          Removed generation of TAO_HAS_USING_KEYWORD guards - it is
          a legacy of the days when we supported platforms without
          namespaces.

          Thanks to Johhny Willemsen <jwillemsen@remedy.nl> for
          pointing out the above redundant code generation.

Wed Nov 24 14:03:11 2004  Martin Corino  <mcorino@remedy.nl>

        * orbsvcs/orbsvcs/CosLoadBalancing.idl:
        * orbsvcs/examples/LoadBalancing/RPS_Monitor.h:
        * orbsvcs/orbsvcs/LoadBalancing/LB_CPU_Load_Average_Monitor.cpp:
        * orbsvcs/orbsvcs/LoadBalancing/LB_CPU_Load_Average_Monitor.h:
        * orbsvcs/orbsvcs/LoadBalancing/LB_CPU_Utilization_Monitor.cpp:
        * orbsvcs/orbsvcs/LoadBalancing/LB_CPU_Utilization_Monitor.h:
        * orbsvcs/performance-tests/LoadBalancing/LBPerf/RPS/RPS_Monitor.h:
        * orbsvcs/tests/LoadBalancing/LoadMonitor/CPU/client.cpp:

          Changed CosLoadBalancing::CPU to CosLoadBalancing::LoadAverage because
          of nameclash with CPU macro in VxWorks builds (which is absolutely essential
          there:-).

Tue Nov 23 21:34:11 2004  Ossama Othman  <ossama@dre.vanderbilt.edu>

        * tao/CDR_Encaps_Codec.cpp (encode_value):

          Fixed a memory leak that occured when the CORBA::Any being
          marshaled into the CDR encapsulation didn't contain a populated
          ACE_Message_Block.  Thanks to Lothar Werzinger <lothar at xcerla
          dot com> for reporting the leak.

Tue Nov 23 11:45:27 2004  J.T. Conklin  <jtc@acorntoolworks.com>

        * orbsvcs/orbsvcs/Makefile.am:

          Update for new Notification Service implementation.

Tue Nov 23 13:33:35 2004  Dale Wilson  <wilson_d@ociweb.com>

        * orbsvcs/orbsvcs/Notify/Any/ProxyPushConsumer.h:
        * orbsvcs/orbsvcs/Notify/Any/ProxyPushConsumer.cpp:
        * orbsvcs/orbsvcs/Notify/Object.h:
        * orbsvcs/orbsvcs/Notify/Object.cpp:
        * orbsvcs/orbsvcs/Notify/Sequence/SequenceProxyPushConsumer.h:
        * orbsvcs/orbsvcs/Notify/Sequence/SequenceProxyPushConsumer.cpp:
        * orbsvcs/orbsvcs/Notify/Structured/StructuredProxyPushConsumer.h:
        * orbsvcs/orbsvcs/Notify/Structured/StructuredProxyPushConsumer.cpp:
        * orbsvcs/orbsvcs/Notify/Topology_Object.cpp:
          Diamond inheritance is bad news.
          Diamond inheritence mixed with templates, and child classes
          overloading (not overriding) base class methods (mea culpa) is
          really bad news.  Thanks to a suggestion by Chad I got rid of
          the method overload.  That should make the various compilers
          that care about such things happier.

Tue Nov 23 11:30:53 2004  J.T. Conklin  <jtc@acorntoolworks.com>

        * orbsvcs/tests/FaultTolerance/IOGR/run_test.pl:

          New file.

Tue Nov 23 10:43:59 2004  Jeff Parsons <j.parsons@vanderbilt.edu>

        * TAO_IDL/ast/ast_root.cpp:

          Fixed off-by-one error in cleanup of global scope between
          processing multiple IDL files on the command line. We
          were leaving one extra member of the name-reference list
          hanging around (in addtion to the predefined types, which
          persist through the entire execution).

        * TAO_IDL/be/be_codegen.cpp:

          Fixed the logic that decides whether or not to generate an
          #include of Typecode.h in the *C.cpp file, meshing with
          other logic that decides about generating the same include
          in the *C.h or *A.cpp files. Thanks to Johnny Willemsen
          <jwillemsen@remedy.nl> for pointing out the extra
          #include in IORInterceptorC.cpp.

Tue Nov 23 06:46:10 2004  Chad Elliott  <elliott_c@ociweb.com>

        * tao/Object_SArgument_T.h:
        * tao/Var_Size_SArgument_T.h:

          Removed semi-colons from the ending brace for namespaces.

Tue Nov 23 07:25:12 UTC 2004  Johnny Willemsen  <jwillemsen@remedy.nl>

        * orbsvcs/orbsvcs/Notify/Method_Request_Event.cpp (event):
          Removed ACE_INLINE, that shouldn't be used in a cpp file, this also
          fixes a fuzz error

Mon Nov 22 20:15:47 2004  Dale Wilson  <wilson_d@ociweb.com>

        * orbsvcs/orbsvcs/Notify/Reconnection_Registry.cpp:
          s/'/"/ on #include statement

Mon Nov 22 16:37:15 2004  Chad Elliott  <elliott_c@ociweb.com>

        * TAO_IDL/ast/ast_decl.cpp:
        * TAO_IDL/include/ast_decl.h:

          Changed the set_prefix_with_typeprefix and prefix methods to take
          const char* to avoid warnings with some compilers.

Mon Nov 22 19:17:12 UTC 2004  Johnny Willemsen  <jwillemsen@remedy.nl>

        * orbsvcs/orbsvcs/Log/Log_Constraint_Visitors.cpp:
          The TAO_ETCL_Literal_Constraint constructor accepts an Any*, so
          instead of passing an Any_var, use .ptr() to pass an Any*.

Mon Nov 22 12:53:42 2004  Chad Elliott  <elliott_c@ociweb.com>

        * tests/AMI_Buffering/client.cpp:

          Increased the amount of time allowed to elapse in all tests
          to account for differences in OS schedulers.

Mon Nov 22 18:46:12 UTC 2004  Johnny Willemsen  <jwillemsen@remedy.nl>

        * orbsvcs/orbsvcs/ETCL/ETCL_Constraint.h:
          Added explicit to all constructors of TAO_ETCL_Literal_Constraint.

Mon Nov 22 11:57:49 2004  Ciju John  <john_c@ociweb.com>

        * orbsvcs/orbsvcs/Notify/Persistent_File_Allocator.cpp:
        * orbsvcs/orbsvcs/Notify/Random_File.cpp:
        * orbsvcs/orbsvcs/Notify/Reconnection_Registry.cpp:
        * orbsvcs/orbsvcs/Notify/Routing_Slip.h:
        * orbsvcs/orbsvcs/Notify/Routing_Slip_Queue.h:
        * orbsvcs/orbsvcs/Notify/Save_Persist_Worker_T.cpp:
        * orbsvcs/orbsvcs/Notify/Topology_Loader.h:
        * orbsvcs/orbsvcs/Notify/Topology_Object.h
        * orbsvcs/orbsvcs/Notify/XML_Loader.cpp:
        * orbsvcs/tests/Notify/PluggableTopology/PlugTop.mpc:
        * orbsvcs/tests/Notify/PluggableTopology/main.cpp:
        * orbsvcs/tests/Notify/Reconnecting/Consumer.cpp:
        * orbsvcs/tests/Notify/Reconnecting/Reconnecting.mpc:
        * orbsvcs/tests/Notify/Reconnecting/Supplier.cpp:
        * orbsvcs/tests/Notify/XML_Persistence/XML_Persistence.mpc
        * orbsvcs/tests/Notify/XML_Persistence/main.cpp
        * performance-tests/AMI_Latency/Roundtrip.h:
        * performance-tests/AMI_Latency/Roundtrip_Handler.h:
        * performance-tests/DII_Latency/Roundtrip.h:
        * performance-tests/DSI_Latency/Roundtrip.h:
        * performance-tests/Deferred_Latency/Roundtrip.h:
        * performance-tests/Single_Threaded_Latency/Roundtrip.h:
        * performance-tests/Thread_Per_Connection_Latency/Client_Task.h:
        * performance-tests/Thread_Per_Connection_Latency/Roundtrip.h:
        * performance-tests/Thread_Pool_Latency/Client_Task.h:
        * performance-tests/Thread_Pool_Latency/Roundtrip.h:
          Fixed fuzz.pl caught inconsistencies.

Mon Nov 22 11:23:00 2004  Huang-Ming Huang <hh1@cse.wustl.edu>

        * orbsvcs/orbsvcs/FtRtEvent/EventChannel/Dynamic_Bitset.h
        * orbsvcs/orbsvcs/FtRtEvent/EventChannel/Dynamic_Bitset.inl
          Fixed memcpy() undefined problem in VxWorks5.5.1_PPC85XX_DIAB
          platform.

        * orbsvcs/orbsvcs/FtRtEvent/EventChannel/IOGR_Maker.cpp
        * orbsvcs/orbsvcs/FtRtEvent/EventChannel/replace_key.cpp
          Moved replace_key() from IOGR_Maker.cpp to replace_key.cpp
          to avoid compiler error in VxWorks5.5.1_PPC85XX_DIAB platform.

Mon Nov 22 11:02:46 2004  Ciju John  <john_c@ociweb.com>

        * orbsvcs/orbsvcs/Notify/Topology_Object.cpp:
          Added explict initializer in copy constructor.

Mon Nov 22 10:32:26 2004  Dale Wilson  <wilson_d@ociweb.com>

        * orbsvcs/orbsvcs/Notify/Method_Request_Dispatch.cpp:
          gcc2.95 warns about possible uninitialized variable.
          Make it obvious that it's initialized.

        * orbsvcs/orbsvcs/Notify/Sequence/SequencePushConsumer.cpp:
          Argument decl./defn. mismatch: CORBA::Boolean vs bool

Mon Nov 22 10:20:49 2004  Dale Wilson  <wilson_d@ociweb.com>

        * orbsvcs/orbsvcs/Notify/Proxy.cpp:
        * orbsvcs/orbsvcs/Notify/Sequence/SequencePushConsumer.cpp:
          More const vs non const arguments.

Mon Nov 22 10:05:01 2004  Dale Wilson  <wilson_d@ociweb.com>

        * orbsvcs/orbsvcs/Notify/Routing_Slip_Persistence_Manager.h:
        * orbsvcs/orbsvcs/Notify/Routing_Slip_Persistence_Manager.cpp:
          Function declaration: void foo (const size_t xyzzy);  the
          const is unnecessary (at best it's an implementation detail
          that doesn't need to be declared.)  TRU64 compiler was complaining
          (rightly) when the implementation omitted the const. Remove
          the const from the declaration.  Repeat as necessary.

Mon Nov 22 09:44:07 2004  Dale Wilson  <wilson_d@ociweb.com>

        * orbsvcs/orbsvcs/Notify/Admin.cpp:
        * orbsvcs/orbsvcs/Notify/EventChannel.cpp:
        * orbsvcs/orbsvcs/Notify/ProxyConsumer.cpp:
        * orbsvcs/orbsvcs/Notify/ProxySupplier.cpp:
          Derived class explicitly calling base class method confuses
          VC6 when namespace is involved.
          "Reword" the calls in hopes of unconfusing it.

Mon Nov 22 15:37:12 UTC 2004  Johnny Willemsen  <jwillemsen@remedy.nl>

        * docs/tutorials/Quoter/RT_Event_Service/client.cpp:
          Added include of Exception.h to get Corba exception streaming
          operator. Fixes compile problems with the Borland compiler.

Mon Nov 22 09:29:54 2004  Jeff Parsons <j.parsons@vanderbilt.edu>

        * TAO_IDL/be/be_interface.cpp (copy_ctor_helper):

          When generating the call to the Messaging::ReplyHandler
          base class constructor for AMI reply handler classes,
          added the ACE_NESTED_CLASS macro wrapper to work around
          a VC6 compiler bug. Thanks to Johnny Willemsen
          <jwillemsen@rememdy.nl> for reporting the problem.

        * TAO_IDL/be/be_visitor_operation/operation_ss.cpp:

          Fixed indentation in code generation.

Mon Nov 22 09:05:41 2004  Dale Wilson  <wilson_d@ociweb.com>

        * orbsvcs/orbsvcs/Notify/Event.cpp:
          Bad initializer for reliability_ property.

        * orbsvcs/orbsvcs/Notify/Method_Request_Dispatch.inl:
        * orbsvcs/orbsvcs/Notify/Method_Request_Event.cpp:
          Misplaced method definition.

Mon Nov 22 08:44:08 2004  Dale Wilson  <wilson_d@ociweb.com>

        * orbsvcs/orbsvcs/Notify/Method_Request_Dispatch.inl:
          Misplaced method definition.

Mon Nov 22 07:54:06 2004  Ciju John  <john_c@ociweb.com>

        * orbsvcs/orbsvcs/Notify/Any/ProxyPushConsumer.cpp
        * orbsvcs/orbsvcs/Notify/Any/ProxyPushConsumer.h
        * orbsvcs/Notify/Sequence/SequenceProxyPushConsumer.cpp
        * orbsvcs/Notify/Sequence/SequenceProxyPushConsumer.h
        * orbsvcs/Notify/Structured/StructuredProxyPushConsumer.cpp
        * orbsvcs/Notify/Structured/StructuredProxyPushConsumer.h
          ACE environment parameters were missing.

Sun Nov 21 20:42:59 2004  Ciju John  <john_c@ociweb.com>

        * notify_serv.mpb:
          event_serv dependency was missing.

Sun Nov 21 15:56:48 2004  Dale Wilson  <wilson_d@ociweb.com>

        * orbsvcs/orbsvcs/Notify/Any/ProxyPushConsumer.h:
        * orbsvcs/orbsvcs/Notify/Any/ProxyPushConsumer.cpp:

        * orbsvcs/orbsvcs/Notify/Sequence/SequenceProxyPushConsumer.h:
        * orbsvcs/orbsvcs/Notify/Sequence/SequenceProxyPushConsumer.cpp:

        * orbsvcs/orbsvcs/Notify/Structured/StructuredProxyPushConsumer.h:
        * orbsvcs/orbsvcs/Notify/Structured/StructuredProxyPushConsumer.cpp:
          Explicitly override init method in order to direct it down the
          correct leg of the diamond inheritence tree.

Sun Nov 21 11:48:50 2004  Dale Wilson  <wilson_d@ociweb.com>

        * orbsvcs/orbsvcs/FtRtEvent/EventChannel/Request_Context_Repository.cpp:
          Unused ENV parameter

Sun Nov 21 11:43:00 2004  Dale Wilson  <wilson_d@ociweb.com>

        * orbsvcs/orbsvcs/Notify/Admin.cpp:
        * orbsvcs/orbsvcs/Notify/Any/AnyEvent.cpp:
        * orbsvcs/orbsvcs/Notify/Consumer.cpp:
        * orbsvcs/orbsvcs/Notify/EventTypeSeq.cpp:
          Unused ENV parameters

        * orbsvcs/orbsvcs/Notify/Method_Request_Event.cpp:
          method was defined in both .i and .cpp


Sat Nov 20 09:45:44 2004  Carlos O'Ryan  <coryan@atdesk.com>

        * tests/Sequence_Unit_Tests/run_test.pl:
        * tests/Sequence_Unit_Tests/Sequence_Unit_Tests.mpc:
        * tests/Sequence_Unit_Tests/object_reference_sequence_element_ut.cpp:
          New unit test for elements in object reference sequences
          (i.e. the class returned by operator[])

        * tests/Sequence_Unit_Tests/object_reference_sequence_element.hpp:
          The class returned by operator[] in sequences of object
          references.

        * tests/Sequence_Unit_Tests/mock_reference.hpp:
        * tests/Sequence_Unit_Tests/mock_reference.cpp:
          Mock object reference class.  Implements the right interface,
          but it is not truly an object reference, makes it *much* easier
          to write real unit tests.

        * tests/Sequence_Unit_Tests/object_reference_traits.hpp:
        * tests/Sequence_Unit_Tests/testing_object_reference_traits.hpp:
          Implement traits for object references.  Like all the other
          traits in the sequences the goal is to encapsulate sources of
          variation away from the generic_sequence class.

        * tests/Sequence_Unit_Tests/string_sequence_element.hpp:
        * tests/Sequence_Unit_Tests/string_sequence_element_ut.cpp:
        * tests/Sequence_Unit_Tests/string_sequence_tester.hpp:
          Reimplemented string_sequence_element using String_var rather
          than explicit calls to duplicate(), I think this is more elegant
          and easier to understand.  I also believe it makes it easier to
          review and verify that the "same semantics as T_var"
          requirements are met.  Unfortunately it degrades the ability to
          perform certain tests, as some calls to duplicate() are not
          going through the mock interfaces.

        * tests/Sequence_Unit_Tests/testing_counters.hpp:
          Cosmetic fixes.

Fri Nov 19 17:55:00 2004 Huang-Ming Huang <hh1@cse.wustl.edu>

        * orbsvcs\orbsvcs\FtRtEvent\EventChannel\Dynamic_Bitset.h
          Remove include <memory.h>

        * orbsvcs\orbsvcs\FtRtEvent\EventChannel\FtEventServiceInterceptor.cpp
          Changed to use ACE_OS::strdup() instead of strdup() in standard C library.

        * orbsvcs\orbsvcs\FtRtEvent\EventChannel\GroupInfoPublisher.h
        * orbsvcs\orbsvcs\FtRtEvent\EventChannel\GroupInfoPublisher.cpp
          Changed to use plain pointer instead of auto_ptr<> as function return type.

        * orbsvcs\orbsvcs\FtRtEvent\EventChannel\Request_Context_Repository.cpp
          Fixed the problem of getting corrent object id. Thanks to  Thia Chang Chao
          <tchangch@dso.org.sg> for reporting the problem.

        * orbsvcs\orbsvcs\FtRtEvent\Utils\UUID.cpp
          Fixed warning in g++ 3.3.


Thu Nov 18 12:39:59 2004  Ciju John  <john_c@ociweb.com>

        * TAO-INSTALL.html:
          Fixed a older cvs conflict entry.

        * tao/UTF16_BOM_Factory.cpp
        * tao/Messaging/Asynch_Invocation.cpp
          Fixed explict template initiation compile failures.

        * MakeProjectCreator/config/notify.mpb
        * MakeProjectCreator/config/notify_serv.mpb
          Notification modules rename updates.

        * orbsvcs/tests/Notify/Reconnecting
        * orbsvcs/tests/Notify/XML_Persistence
        * orbsvcs/tests/Notify/ThreadPool
        * orbsvcs/tests/Notify/Lanes
          New Notification tests being added.

Fri Oct 29 10:53:56 2004  Dale Wilson  <wilson_d@ociweb.com>

        * orbsvcs/Notify_Service/Notify_Service.cpp:
          Don't write IOR file until Notification Service
          is *really* ready to run.

        * orbsvcs/orbsvcs/Notify/Admin.cpp:
        * orbsvcs/orbsvcs/Notify/Builder.cpp:
        * orbsvcs/orbsvcs/Notify/Consumer.cpp:
        * orbsvcs/orbsvcs/Notify/Delivery_Request.h:
        * orbsvcs/orbsvcs/Notify/Delivery_Request.inl:
        * orbsvcs/orbsvcs/Notify/EventChannelFactory.h:
        * orbsvcs/orbsvcs/Notify/EventChannelFactory.cpp:
        * orbsvcs/orbsvcs/Notify/Method_Request_Lookup.cpp:
        * orbsvcs/orbsvcs/Notify/Persistent_File_Allocator.h:
        * orbsvcs/orbsvcs/Notify/Persistent_File_Allocator.cpp:
        * orbsvcs/orbsvcs/Notify/ProxyConsumer.cpp:
        * orbsvcs/orbsvcs/Notify/Random_File.cpp:
        * orbsvcs/orbsvcs/Notify/Reconnection_Registry.cpp:
        * orbsvcs/orbsvcs/Notify/Routing_Slip.h:
        * orbsvcs/orbsvcs/Notify/Routing_Slip.cpp:
        * orbsvcs/orbsvcs/Notify/Routing_Slip_Queue.cpp:

        * orbsvcs/orbsvcs/Notify/Any/PushConsumer.cpp:
        * orbsvcs/orbsvcs/Notify/Sequence/SequencePushConsumer.h:
        * orbsvcs/orbsvcs/Notify/Sequence/SequencePushConsumer.cpp:
        * orbsvcs/orbsvcs/Notify/Structured/StructuredPushConsumer.cpp:

          Add Event reloading and restarting.  Passes Reconnection test.
          There is a lot of debug output still turned on so some housecleaning
          is definately in order.


        * orbsvcs/tests/Notify/Reconnecting/Consumer.cpp:
        * orbsvcs/tests/Notify/Reconnecting/Supplier.cpp:
          Add additional diagnostic information to track down problems
          revealed by test.


Wed Oct 27 11:59:01 2004  Dale Wilson  <wilson_d@ociweb.com>

        * orbsvcs/orbsvcs/CosNotification.mpc:

        * orbsvcs/orbsvcs/Notify/Admin.h:
        * orbsvcs/orbsvcs/Notify/Admin.inl:
        * orbsvcs/orbsvcs/Notify/Admin.cpp:
        * orbsvcs/orbsvcs/Notify/Bit_Vector.h:
        * orbsvcs/orbsvcs/Notify/Bit_Vector.cpp:
        * orbsvcs/orbsvcs/Notify/Consumer.cpp:
        * orbsvcs/orbsvcs/Notify/ConsumerAdmin.h:
        * orbsvcs/orbsvcs/Notify/ConsumerAdmin.cpp:
        * orbsvcs/orbsvcs/Notify/Delivery_Request.h:
        * orbsvcs/orbsvcs/Notify/Delivery_Request.inl:
        * orbsvcs/orbsvcs/Notify/Delivery_Request.cpp:
        * orbsvcs/orbsvcs/Notify/Event.h:
        * orbsvcs/orbsvcs/Notify/Event.inl:
        * orbsvcs/orbsvcs/Notify/EventChannel.h:
        * orbsvcs/orbsvcs/Notify/EventChannel.cpp:
        * orbsvcs/orbsvcs/Notify/EventChannelFactory.h:
        * orbsvcs/orbsvcs/Notify/EventChannelFactory.cpp:
        * orbsvcs/orbsvcs/Notify/EventType.h:
        * orbsvcs/orbsvcs/Notify/EventType.cpp:
        * orbsvcs/orbsvcs/Notify/EventTypeSeq.h:
        * orbsvcs/orbsvcs/Notify/EventTypeSeq.cpp:
        * orbsvcs/orbsvcs/Notify/Event_Persistence_Factory.h:
        * orbsvcs/orbsvcs/Notify/Event_Persistence_Strategy.h:
        * orbsvcs/orbsvcs/Notify/FilterAdmin.h:
        * orbsvcs/orbsvcs/Notify/FilterAdmin.cpp:
        * orbsvcs/orbsvcs/Notify/Method_Request.h:
        * orbsvcs/orbsvcs/Notify/Method_Request.cpp:
        * orbsvcs/orbsvcs/Notify/Method_Request_Dispatch.h:
        * orbsvcs/orbsvcs/Notify/Method_Request_Dispatch.cpp:
        * orbsvcs/orbsvcs/Notify/Method_Request_Event.h:
        * orbsvcs/orbsvcs/Notify/Method_Request_Event.inl:
        * orbsvcs/orbsvcs/Notify/Method_Request_Event.cpp:
        * orbsvcs/orbsvcs/Notify/Method_Request_Lookup.h:
        * orbsvcs/orbsvcs/Notify/Method_Request_Lookup.cpp:
        * orbsvcs/orbsvcs/Notify/Name_Value_Pair.h:
        * orbsvcs/orbsvcs/Notify/Name_Value_Pair.cpp:
        * orbsvcs/orbsvcs/Notify/Object.h:
        * orbsvcs/orbsvcs/Notify/Object.cpp:
        * orbsvcs/orbsvcs/Notify/POA_Helper.h:
        * orbsvcs/orbsvcs/Notify/POA_Helper.cpp:
        * orbsvcs/orbsvcs/Notify/Persistent_File_Allocator.h:
        * orbsvcs/orbsvcs/Notify/Persistent_File_Allocator.cpp:
        * orbsvcs/orbsvcs/Notify/Proxy.h:
        * orbsvcs/orbsvcs/Notify/Proxy.cpp:
        * orbsvcs/orbsvcs/Notify/ProxyConsumer.h:
        * orbsvcs/orbsvcs/Notify/ProxyConsumer.cpp:
        * orbsvcs/orbsvcs/Notify/ProxySupplier.cpp:
        * orbsvcs/orbsvcs/Notify/Random_File.h:
        * orbsvcs/orbsvcs/Notify/Random_File.cpp:
        * orbsvcs/orbsvcs/Notify/Reconnect_Worker_T.h:
        * orbsvcs/orbsvcs/Notify/Reconnect_Worker_T.cpp:
        * orbsvcs/orbsvcs/Notify/Reconnection_Registry.h:
        * orbsvcs/orbsvcs/Notify/Reconnection_Registry.cpp:
        * orbsvcs/orbsvcs/Notify/Refcountable_Guard_T.inl:
        * orbsvcs/orbsvcs/Notify/Routing_Slip.h:
        * orbsvcs/orbsvcs/Notify/Routing_Slip.inl:
        * orbsvcs/orbsvcs/Notify/Routing_Slip.cpp:
        * orbsvcs/orbsvcs/Notify/Routing_Slip_Persistence_Manager.h:
        * orbsvcs/orbsvcs/Notify/Routing_Slip_Persistence_Manager.cpp:
        * orbsvcs/orbsvcs/Notify/Routing_Slip_Queue.h:
        * orbsvcs/orbsvcs/Notify/Routing_Slip_Queue.inl:
        * orbsvcs/orbsvcs/Notify/Routing_Slip_Queue.cpp:
        * orbsvcs/orbsvcs/Notify/Save_Persist_Worker_T.h:
        * orbsvcs/orbsvcs/Notify/Save_Persist_Worker_T.cpp:
        * orbsvcs/orbsvcs/Notify/Standard_Event_Persistence.h:
        * orbsvcs/orbsvcs/Notify/Standard_Event_Persistence.cpp:
        * orbsvcs/orbsvcs/Notify/SupplierAdmin.h:
        * orbsvcs/orbsvcs/Notify/SupplierAdmin.cpp:
        * orbsvcs/orbsvcs/Notify/Topology_Factory.h:
        * orbsvcs/orbsvcs/Notify/Topology_Loader.h:
        * orbsvcs/orbsvcs/Notify/Topology_Loader.cpp:
        * orbsvcs/orbsvcs/Notify/Topology_Object.h:
        * orbsvcs/orbsvcs/Notify/Topology_Object.inl:
        * orbsvcs/orbsvcs/Notify/Topology_Object.cpp:
        * orbsvcs/orbsvcs/Notify/Topology_Saver.h:
        * orbsvcs/orbsvcs/Notify/Topology_Saver.cpp:
        * orbsvcs/orbsvcs/Notify/XML_Loader.h:
        * orbsvcs/orbsvcs/Notify/XML_Loader.cpp:
        * orbsvcs/orbsvcs/Notify/XML_Saver.h:
        * orbsvcs/orbsvcs/Notify/XML_Saver.cpp:
        * orbsvcs/orbsvcs/Notify/XML_Topology_Factory.h:
        * orbsvcs/orbsvcs/Notify/XML_Topology_Factory.cpp:

        * orbsvcs/orbsvcs/Notify/Any/ProxyPushConsumer.h:
        * orbsvcs/orbsvcs/Notify/Any/ProxyPushConsumer.cpp:
        * orbsvcs/orbsvcs/Notify/Any/ProxyPushSupplier.h:
        * orbsvcs/orbsvcs/Notify/Any/ProxyPushSupplier.cpp:

        * orbsvcs/orbsvcs/Notify/Sequence/SequenceProxyPushConsumer.h:
        * orbsvcs/orbsvcs/Notify/Sequence/SequenceProxyPushConsumer.cpp:
        * orbsvcs/orbsvcs/Notify/Sequence/SequenceProxyPushSupplier.h:
        * orbsvcs/orbsvcs/Notify/Sequence/SequenceProxyPushSupplier.cpp:

        * orbsvcs/orbsvcs/Notify/Structured/StructuredProxyPushConsumer.h:
        * orbsvcs/orbsvcs/Notify/Structured/StructuredProxyPushConsumer.cpp:
        * orbsvcs/orbsvcs/Notify/Structured/StructuredProxyPushSupplier.h:
        * orbsvcs/orbsvcs/Notify/Structured/StructuredProxyPushSupplier.cpp:

        * orbsvcs/tests/Notify/PluggableTopology/Test_Saver.h:
        * orbsvcs/tests/Notify/PluggableTopology/Test_Saver.cpp:
        * orbsvcs/tests/Notify/PluggableTopology/Test_Topology_Factory.h:
        * orbsvcs/tests/Notify/PluggableTopology/Test_Topology_Factory.cpp:

        * orbsvcs/tests/Notify/Reconnecting/Consumer.cpp:
        * orbsvcs/tests/Notify/Reconnecting/Supplier.cpp:
        * orbsvcs/tests/Notify/Reconnecting/event.conf:
        * orbsvcs/tests/Notify/Reconnecting/ns_mt.conf:
        * orbsvcs/tests/Notify/Reconnecting/ns_mt_both.conf:
        * orbsvcs/tests/Notify/Reconnecting/ns_mt_topo.conf:
        * orbsvcs/tests/Notify/Reconnecting/ns_st.conf:
        * orbsvcs/tests/Notify/Reconnecting/ns_st_both.conf:
        * orbsvcs/tests/Notify/Reconnecting/ns_st_topo.conf:

        * orbsvcs/tests/Notify/Unit/TestBasicTypes.cpp:

          Rename namespace used in OCI reliable notification service work
          from TAO_NOTIFY to TAO_Notify (note case).
          Integrate event reliability.
          Status: Normal event delivery still works.
          Reliable event delivery being tested.
          Reload events after failure, not merged yet.


Mon Oct 25 20:41:00 2004  Dale Wilson  <wilson_d@ociweb.com>

        * orbsvcs/orbsvcs/CosNotification.mpc:
        * orbsvcs/orbsvcs/Notify/Any/AnyEvent.h:
        * orbsvcs/orbsvcs/Notify/Any/AnyEvent.cpp:
        * orbsvcs/orbsvcs/Notify/Buffering_Strategy.h:
        * orbsvcs/orbsvcs/Notify/Buffering_Strategy.cpp:
        * orbsvcs/orbsvcs/Notify/Consumer.h:
        * orbsvcs/orbsvcs/Notify/Consumer.cpp:
        * orbsvcs/orbsvcs/Notify/Event.h:
        * orbsvcs/orbsvcs/Notify/Event.inl:
        * orbsvcs/orbsvcs/Notify/Method_Request.h:
        * orbsvcs/orbsvcs/Notify/Method_Request.inl:
        * orbsvcs/orbsvcs/Notify/Method_Request.cpp:
        * orbsvcs/orbsvcs/Notify/Method_Request_Dispatch.h:
        * orbsvcs/orbsvcs/Notify/Method_Request_Dispatch.inl:
        * orbsvcs/orbsvcs/Notify/Method_Request_Dispatch.cpp:
        * orbsvcs/orbsvcs/Notify/Method_Request_Event.h:
        * orbsvcs/orbsvcs/Notify/Method_Request_Event.cpp:
        * orbsvcs/orbsvcs/Notify/Method_Request_Lookup.h:
        * orbsvcs/orbsvcs/Notify/Method_Request_Lookup.cpp:
        * orbsvcs/orbsvcs/Notify/Method_Request_Shutdown.h:
        * orbsvcs/orbsvcs/Notify/Method_Request_Shutdown.cpp:
        * orbsvcs/orbsvcs/Notify/Method_Request_Updates.h:
        * orbsvcs/orbsvcs/Notify/Method_Request_Updates.cpp:
        * orbsvcs/orbsvcs/Notify/ProxySupplier.h:
        * orbsvcs/orbsvcs/Notify/ProxySupplier.cpp:
        * orbsvcs/orbsvcs/Notify/Reactive_Task.h:
        * orbsvcs/orbsvcs/Notify/Reactive_Task.cpp:
        * orbsvcs/orbsvcs/Notify/Routing_Slip.h:
        * orbsvcs/orbsvcs/Notify/Routing_Slip.cpp:
        * orbsvcs/orbsvcs/Notify/Sequence/Batch_Buffering_Strategy.cpp:
        * orbsvcs/orbsvcs/Notify/Sequence/SequencePushConsumer.h:
        * orbsvcs/orbsvcs/Notify/Sequence/SequencePushConsumer.cpp:
        * orbsvcs/orbsvcs/Notify/Structured/RT_StructuredProxyPushSupplier.h:
        * orbsvcs/orbsvcs/Notify/Structured/RT_StructuredProxyPushSupplier.cpp:
        * orbsvcs/orbsvcs/Notify/Structured/StructuredEvent.h:
        * orbsvcs/orbsvcs/Notify/Structured/StructuredEvent.cpp:
        * orbsvcs/orbsvcs/Notify/ThreadPool_Task.h:
        * orbsvcs/orbsvcs/Notify/ThreadPool_Task.cpp:
        * orbsvcs/orbsvcs/Notify/Worker_Task.h:
          Rename Method_Request classes for consistency and self-documentation.
          Naming convention:
          Base classes have no suffix (i.e. TAO_Notify_Method_Request)
          Uncopied classes (on stack) keep their No_Copy suffix.
          Copied classes (on heap) have a _Queueable suffix.



        * orbsvcs/orbsvcs/Notify/Method_Request_Dispatch_Base.h:
        * orbsvcs/orbsvcs/Notify/Method_Request_Dispatch_Base.inl:
        * orbsvcs/orbsvcs/Notify/Method_Request_Dispatch_Base.cpp:
        * orbsvcs/orbsvcs/Notify/Method_Request_Lookup_Base.h:
        * orbsvcs/orbsvcs/Notify/Method_Request_Lookup_Base.inl:
        * orbsvcs/orbsvcs/Notify/Method_Request_Lookup_Base.cpp:
          Removed these files.

Mon Oct 25 14:51:09 2004  Dale Wilson  <wilson_d@ociweb.com>

        * orbsvcs/orbsvcs/CosNotification.mpc:
          CosNotification_Serv: Add dependancy on svc_utils
          CosNotification_Serv: Add Method_Dispatch_Base and Method_Lookup_Base

        * orbsvcs/orbsvcs/Notify/Admin.cpp:
        * orbsvcs/orbsvcs/Notify/ConsumerAdmin.cpp:
        * orbsvcs/orbsvcs/Notify/EventChannel.cpp:
        * orbsvcs/orbsvcs/Notify/EventChannelFactory.cpp:
        * orbsvcs/orbsvcs/Notify/EventTypeSeq.cpp:
        * orbsvcs/orbsvcs/Notify/Persistent_File_Allocator.cpp:
        * orbsvcs/orbsvcs/Notify/Random_File.cpp:
        * orbsvcs/orbsvcs/Notify/Routing_Slip.cpp:
        * orbsvcs/orbsvcs/Notify/Routing_Slip_Queue.cpp:
        * orbsvcs/orbsvcs/Notify/XML_Loader.cpp:
          Use "DEBUG_LEVEL" to enable "local debug messages" consistently.

        * orbsvcs/orbsvcs/Notify/Name_Value_Pair.h:
        * orbsvcs/orbsvcs/Notify/Topology_Saver.h:
          Change export library name.

        * orbsvcs/orbsvcs/Notify/Consumer.h:
        * orbsvcs/orbsvcs/Notify/Consumer.inl:
        * orbsvcs/orbsvcs/Notify/Consumer.cpp:
        * orbsvcs/orbsvcs/Notify/Delivery_Request.cpp:
        * orbsvcs/orbsvcs/Notify/Event.h:
        * orbsvcs/orbsvcs/Notify/Event.inl:
        * orbsvcs/orbsvcs/Notify/Event.cpp:
        * orbsvcs/orbsvcs/Notify/Method_Request.h:
        * orbsvcs/orbsvcs/Notify/Method_Request.inl:
        * orbsvcs/orbsvcs/Notify/Method_Request.cpp:
        * orbsvcs/orbsvcs/Notify/Method_Request_Dispatch.h:
        * orbsvcs/orbsvcs/Notify/Method_Request_Dispatch.cpp:
        * orbsvcs/orbsvcs/Notify/Method_Request_Dispatch_Base.h:
        * orbsvcs/orbsvcs/Notify/Method_Request_Dispatch_Base.inl:
        * orbsvcs/orbsvcs/Notify/Method_Request_Dispatch_Base.cpp:
        * orbsvcs/orbsvcs/Notify/Method_Request_Event.h:
        * orbsvcs/orbsvcs/Notify/Method_Request_Event.cpp:
        * orbsvcs/orbsvcs/Notify/Method_Request_Lookup.cpp:
        * orbsvcs/orbsvcs/Notify/Method_Request_Lookup_Base.cpp:
        * orbsvcs/orbsvcs/Notify/ProxySupplier.h:
        * orbsvcs/orbsvcs/Notify/ProxySupplier.cpp:
        * orbsvcs/orbsvcs/Notify/Reactive_Task.h:
        * orbsvcs/orbsvcs/Notify/Reactive_Task.cpp:
        * orbsvcs/orbsvcs/Notify/SupplierAdmin.cpp:
        * orbsvcs/orbsvcs/Notify/ThreadPool_Task.h:
        * orbsvcs/orbsvcs/Notify/ThreadPool_Task.cpp:
        * orbsvcs/orbsvcs/Notify/Worker_Task.h:
        * orbsvcs/orbsvcs/Notify/Any/AnyEvent.h:
        * orbsvcs/orbsvcs/Notify/Any/AnyEvent.cpp:
        * orbsvcs/orbsvcs/Notify/Any/CosEC_ProxyPushConsumer.h:
        * orbsvcs/orbsvcs/Notify/Any/CosEC_ProxyPushConsumer.cpp:
        * orbsvcs/orbsvcs/Notify/Any/CosEC_ProxyPushSupplier.h:
        * orbsvcs/orbsvcs/Notify/Any/ProxyPushConsumer.h:
        * orbsvcs/orbsvcs/Notify/Any/ProxyPushConsumer.cpp:
        * orbsvcs/orbsvcs/Notify/Any/ProxyPushSupplier.h:
        * orbsvcs/orbsvcs/Notify/Any/PushConsumer.h:
        * orbsvcs/orbsvcs/Notify/Any/PushConsumer.cpp:
        * orbsvcs/orbsvcs/Notify/Any/PushSupplier.h:
        * orbsvcs/orbsvcs/Notify/Sequence/Batch_Buffering_Strategy.h:
        * orbsvcs/orbsvcs/Notify/Sequence/SequenceProxyPushConsumer.h:
        * orbsvcs/orbsvcs/Notify/Sequence/SequenceProxyPushSupplier.h:
        * orbsvcs/orbsvcs/Notify/Sequence/SequencePushConsumer.h:
        * orbsvcs/orbsvcs/Notify/Sequence/SequencePushConsumer.cpp:
        * orbsvcs/orbsvcs/Notify/Sequence/SequencePushSupplier.h:
        * orbsvcs/orbsvcs/Notify/Structured/RT_StructuredProxyPushSupplier.h:
        * orbsvcs/orbsvcs/Notify/Structured/RT_StructuredProxyPushSupplier.cpp:
        * orbsvcs/orbsvcs/Notify/Structured/StructuredEvent.h:
        * orbsvcs/orbsvcs/Notify/Structured/StructuredEvent.cpp:
        * orbsvcs/orbsvcs/Notify/Structured/StructuredProxyPushConsumer.h:
        * orbsvcs/orbsvcs/Notify/Structured/StructuredProxyPushSupplier.h:
        * orbsvcs/orbsvcs/Notify/Structured/StructuredPushConsumer.h:
        * orbsvcs/orbsvcs/Notify/Structured/StructuredPushConsumer.cpp:
        * orbsvcs/orbsvcs/Notify/Structured/StructuredPushSupplier.h:
          Create a common base class for Method_Requests that deal with events.
          Use it instead of the *Dispatch_T and *Lookup_T templates.
          Use inheritance and virtual methods rather than function overloading
          to distinguish copied events from uncopied events.  This allowed a lot
          of duplicate code to be removed (not to mention the duplicate template
          expansions) and avoided the need to do everything twice in the routing slip
          family of objects.

          The event now "knows" whether it's been copied to the heap.  The copy_on_heap
          method is supported by all events and returns a pointer to the copied event.
          As a side effect this eliminates the possibility that multiple heap copies
          of the event will be created (the TAO_Notify_Method_Request_No_Copy_Ex may
          have avoided multiple copies but it was hard to tell.)
          Because the ACE Refcounted_Auto_Ptr is not very smart, I switched to using
          TAO_Notify_Refcount_Guard_T which is smarter, but strangely named.  I also beefed
          up *Refcount_Guard" to allow null construction (for inclusion in collections) and
          semantically correct copies.  The result is that there is no need for all the refcount
          pointers an event to be aware of each other.  It is safe to create a new refcount pointer
          given only a pointer to the heap-copy of the event.

          Change the event delivery logic in the consumer so that a delivery failure can
          cause an event to be kept on a queue for the consumer rather than discarding the
          event and deleting the consumer.  This will be needed to support persistent events.
          An unfortunate side effect is I used a simple queue rather than a Buffering_Strategy
          to hold these events pending delivery.  As a result there are cases in which the
          delivery policy specified by QoS parameters may not work exactly right.  This can
          be fixed in the future by adding the missing functionality to Buffering Strategy.

          Status as of this checkin:  The notification service and the RT notification service
          build without warnings (with or without simulated exceptions) All tests passed by
          the DOC group head branch also pass with these changes.

        * orbsvcs/tests/Notify/Basic/MultiTypes.cpp:
          It was spinning waiting for incoming messages.  I made it wait instead.
          I also added a comment about a potential timing problem that showed up
          during debugging.  This will not happen in a "real" test so I didn't fix it.

        * orbsvcs/tests/Notify/Blocking/notify.conf:
          Fix trailing 'x' (also done in head branch)

Wed Oct 20 11:38:11 2004  Dale Wilson  <wilson_d@ociweb.com>

        * orbsvcs/orbsvcs/Notify/Refcountable_Guard_T.h:
        * orbsvcs/orbsvcs/Notify/Refcountable_Guard_T.inl:
          Add copy constructor and operator =.

Tue Oct 19 10:43:28 2004  Dale Wilson  <wilson_d@ociweb.com>

        * orbsvcs/orbsvcs/Notify/Method_Request_Dispatch_T.h:
        * orbsvcs/orbsvcs/Notify/Method_Request_Dispatch_T.inl:
        * orbsvcs/orbsvcs/Notify/Method_Request_Dispatch_T.cpp:
        * orbsvcs/orbsvcs/Notify/Method_Request_Lookup_T.h:
        * orbsvcs/orbsvcs/Notify/Method_Request_Lookup_T.inl:
        * orbsvcs/orbsvcs/Notify/Method_Request_Lookup_T.cpp:
          Removed these files.
          Replacing template-based with inheritence-based copy managament.
          The problem with a template based approach (other than the
          obscurity of overloading methods based on raw vs smart
          pointer (some comments would have been nice!)) is the
          source code explosion.  Because the distinction
          between Event * and Event_var is meaningful, every stage of the
          process has to provide (at least) two methods to preserve this
          distinction even when this stage doesn't care.
          This became a problem in adding event persistence because it
          meant that the event persistence stuff would also have to preserve
          this "state-by-pointer-type" info.

        * orbsvcs/orbsvcs/Notify/Method_Request_Dispatch_Base.h:
        * orbsvcs/orbsvcs/Notify/Method_Request_Dispatch_Base.inl:
        * orbsvcs/orbsvcs/Notify/Method_Request_Dispatch_Base.cpp:
        * orbsvcs/orbsvcs/Notify/Method_Request_Lookup_Base.h:
        * orbsvcs/orbsvcs/Notify/Method_Request_Lookup_Base.inl:
        * orbsvcs/orbsvcs/Notify/Method_Request_Lookup_Base.cpp:
          Added these files.


        * orbsvcs/orbsvcs/Notify/Method_Request_Dispatch.h:
        * orbsvcs/orbsvcs/Notify/Method_Request_Dispatch.cpp:
        * orbsvcs/orbsvcs/Notify/Method_Request_Lookup.h:
        * orbsvcs/orbsvcs/Notify/Method_Request_Lookup.cpp:
          Now derived from *_Base rather than _T<x,x,x,x>


        * orbsvcs/orbsvcs/Notify/Any/AnyEvent.h:
        * orbsvcs/orbsvcs/Notify/Any/AnyEvent.cpp:
        * orbsvcs/orbsvcs/Notify/Structured/StructuredEvent.h:
        * orbsvcs/orbsvcs/Notify/Structured/StructuredEvent.cpp:
        * orbsvcs/orbsvcs/Notify/Event.h:
        * orbsvcs/orbsvcs/Notify/Event.inl:
        * orbsvcs/orbsvcs/Notify/Event.cpp:
          The distinction that the templates were attempting to preserve
          was whether or not the event had been copied to the heap.
          The goal was to keep the event on the stack as long as possible,
          but make a copy on the heap when it became necessary to queue the
          event for later processing or for another thread.

          This is now handled by providing a virtual "Event::copy_on_heap" method.
          A event on the stack makes a copy and returns a pointer to it.
          A event on the heap just returns a pointer to itself.

        * orbsvcs/orbsvcs/Notify/Refcountable_Guard_T.h:
        * orbsvcs/orbsvcs/Notify/Refcountable_Guard_T.inl:
          The pointer to events was based on Refcountable_Auto_Ptr which is
          not smart enough to have two pointers to the same object unless one
          was created from the other.  Event was changed to be a Refcountable
          object and Refcountable_Guard was extended to allow null pointers,
          thereby allowing it to be contained in a collection.  Asserts protect
          null Refcountable_Guards from misuse.

        * orbsvcs/orbsvcs/Notify/Consumer.h:
        * orbsvcs/orbsvcs/Notify/Consumer.inl:
        * orbsvcs/orbsvcs/Notify/Consumer.cpp:
        * orbsvcs/orbsvcs/Notify/Proxy.h:
        * orbsvcs/orbsvcs/Notify/Proxy.inl:
        * orbsvcs/orbsvcs/Notify/ProxySupplier.h:
        * orbsvcs/orbsvcs/Notify/ProxySupplier.cpp:
        * orbsvcs/orbsvcs/Notify/Sequence/SequencePushConsumer.h:
        * orbsvcs/orbsvcs/Notify/Sequence/SequencePushConsumer.cpp:
        * orbsvcs/orbsvcs/Notify/Structured/StructuredPushConsumer.h:
        * orbsvcs/orbsvcs/Notify/Structured/StructuredPushConsumer.cpp:
          Eliminate overridden-by-pointer-type methods that are
          no longer needed.  Use copy_on_heap when necessary.


Mon Oct 18 15:21:49 2004  Dale Wilson  <wilson_d@ociweb.com>

        * orbsvcs/orbsvcs/Notify/Buffering_Strategy.h:
        * orbsvcs/orbsvcs/Notify/Builder.h:
        * orbsvcs/orbsvcs/Notify/EventChannel.h:
          Build issues.

Mon Oct 18 10:29:48 2004  Dale Wilson  <wilson_d@ociweb.com>

        * orbsvcs/orbsvcs/Notify/Any/AnyEvent.inl:
        * orbsvcs/orbsvcs/Notify/Any/CosEC_ProxyPushConsumer.inl:
        * orbsvcs/orbsvcs/Notify/Any/CosEC_ProxyPushSupplier.inl:
        * orbsvcs/orbsvcs/Notify/Any/ProxyPushConsumer.inl:
        * orbsvcs/orbsvcs/Notify/Any/ProxyPushSupplier.inl:
        * orbsvcs/orbsvcs/Notify/Any/PushConsumer.inl:
        * orbsvcs/orbsvcs/Notify/Any/PushSupplier.inl:
        * orbsvcs/orbsvcs/Notify/RT_Builder.inl:
        * orbsvcs/orbsvcs/Notify/RT_Factory.inl:
        * orbsvcs/orbsvcs/Notify/RT_Notify_Service.inl:
        * orbsvcs/orbsvcs/Notify/RT_POA_Helper.inl:
        * orbsvcs/orbsvcs/Notify/RT_Properties.inl:
        * orbsvcs/orbsvcs/Notify/Sequence/Batch_Buffering_Strategy.inl:
        * orbsvcs/orbsvcs/Notify/Sequence/SequenceProxyPushConsumer.inl:
        * orbsvcs/orbsvcs/Notify/Sequence/SequenceProxyPushSupplier.inl:
        * orbsvcs/orbsvcs/Notify/Sequence/SequencePushConsumer.inl:
        * orbsvcs/orbsvcs/Notify/Sequence/SequencePushSupplier.inl:
        * orbsvcs/orbsvcs/Notify/Structured/StructuredProxyPushConsumer.inl:
        * orbsvcs/orbsvcs/Notify/Structured/StructuredProxyPushSupplier.inl:
        * orbsvcs/orbsvcs/Notify/Structured/StructuredPushConsumer.inl:
        * orbsvcs/orbsvcs/Notify/Structured/StructuredPushSupplier.inl:
          .inl's should not include their own .h

Mon Oct 18 10:11:47 2004  Dale Wilson  <wilson_d@ociweb.com>

        * orbsvcs/orbsvcs/Notify/Bit_Vector.h:
        * orbsvcs/orbsvcs/Notify/Routing_Slip_Persistence_Manager.h:
        * orbsvcs/orbsvcs/Notify/Routing_Slip_Queue.h:
        * orbsvcs/orbsvcs/Notify/Standard_Event_Persistence.h:
        * orbsvcs/orbsvcs/Notify/Standard_Event_Persistence.cpp:
          Change export library name

        * orbsvcs/orbsvcs/Notify/Delivery_Request.h:
        * orbsvcs/orbsvcs/Notify/Delivery_Request.cpp:
          Change export library name
          Use 1.4 naming convention for pointers.


        * orbsvcs/orbsvcs/Notify/Persistent_File_Allocator.h:
          Change export library name
          Use renamed Random_File.


        * orbsvcs/orbsvcs/Notify/Find_Worker_T.h:
        * orbsvcs/orbsvcs/Notify/Find_Worker_T.cpp:
          Make it const correct.

        * orbsvcs/orbsvcs/Notify/Topology_Object.h:
        * orbsvcs/orbsvcs/Notify/Topology_Object.cpp:
          Use V1.4 naming convention for object id.



        * orbsvcs/orbsvcs/Notify/Structured/RT_StructuredProxyPushSupplier.inl:
        * orbsvcs/orbsvcs/Notify/Structured/StructuredEvent.inl:
          .inl's should not include their own .h


Tue Oct 12 14:10:43 2004  Dale Wilson  <wilson_d@ociweb.com>

        * orbsvcs/orbsvcs/Notify/Delivery_Request.inl:
        * orbsvcs/orbsvcs/Notify/Routing_Slip.inl:
          Pick up Event Persistence files missed during
          previous merge.

        * orbsvcs/orbsvcs/Notify/Random_File.h:
        * orbsvcs/orbsvcs/Notify/Random_File.cpp:
          Rename Persistent_File->Random_File

        * orbsvcs/orbsvcs/Notify/Delivery_Method.h:
        * orbsvcs/orbsvcs/Notify/Delivery_Method.cpp:
        * orbsvcs/orbsvcs/Notify/Delivery_Method_Dispatch.h:
        * orbsvcs/orbsvcs/Notify/Delivery_Method_Dispatch.cpp:
        * orbsvcs/orbsvcs/Notify/Delivery_Method_Lookup.h:
        * orbsvcs/orbsvcs/Notify/Delivery_Method_Lookup.cpp:
        * orbsvcs/orbsvcs/Notify/Persistent_File.h:
        * orbsvcs/orbsvcs/Notify/Persistent_File.cpp:

          Removed these files.


Mon Oct 11 14:39:15 2004  Dale Wilson  <wilson_d@ociweb.com>

        * orbsvcs/tests/Notify/Unit/Notify_Unit.mpc:
        * orbsvcs/tests/Notify/Unit/TestBasic.h:
        * orbsvcs/tests/Notify/Unit/TestBasic.cpp:
        * orbsvcs/tests/Notify/Unit/TestBasicTypes.h:
        * orbsvcs/tests/Notify/Unit/TestBasicTypes.cpp:
        * orbsvcs/tests/Notify/Unit/TestBuilder.h:
        * orbsvcs/tests/Notify/Unit/TestBuilder.cpp:
        * orbsvcs/tests/Notify/Unit/TestQoS.h:
        * orbsvcs/tests/Notify/Unit/TestQoS.cpp:
        * orbsvcs/tests/Notify/Unit/UnitTester.h:
        * orbsvcs/tests/Notify/Unit/main.cpp:
        * orbsvcs/tests/Notify/Unit/readme:
        * orbsvcs/tests/Notify/Unit/run_test.pl:
        * orbsvcs/tests/Notify/Unit/start_ns.pl:
          Copy Unit test from OCI branch.  Needs work.
Thu Oct  7 09:40:51 2004  Dale Wilson  <wilson_d@ociweb.com>

        * ChangeLog_pnotify:

        * docs/notification/reliability.html:

        * orbsvcs/orbsvcs/CosNotification.mpc:
        * orbsvcs/orbsvcs/Notify/Admin.h:
        * orbsvcs/orbsvcs/Notify/Admin.inl:
        * orbsvcs/orbsvcs/Notify/Admin.cpp:
        * orbsvcs/orbsvcs/Notify/AdminProperties.h:
        * orbsvcs/orbsvcs/Notify/AdminProperties.inl:
        * orbsvcs/orbsvcs/Notify/AdminProperties.cpp:
        * orbsvcs/orbsvcs/Notify/AllocTracker.h:
        * orbsvcs/orbsvcs/Notify/Bit_Vector.h:
        * orbsvcs/orbsvcs/Notify/Bit_Vector.cpp:
        * orbsvcs/orbsvcs/Notify/Builder.h:
        * orbsvcs/orbsvcs/Notify/Builder.cpp:
        * orbsvcs/orbsvcs/Notify/ConsumerAdmin.h:
        * orbsvcs/orbsvcs/Notify/ConsumerAdmin.cpp:
        * orbsvcs/orbsvcs/Notify/CosNotify_Service.cpp:
        * orbsvcs/orbsvcs/Notify/Delivery_Method.h:
        * orbsvcs/orbsvcs/Notify/Delivery_Method.cpp:
        * orbsvcs/orbsvcs/Notify/Delivery_Method_Dispatch.h:
        * orbsvcs/orbsvcs/Notify/Delivery_Method_Dispatch.cpp:
        * orbsvcs/orbsvcs/Notify/Delivery_Method_Lookup.h:
        * orbsvcs/orbsvcs/Notify/Delivery_Method_Lookup.cpp:
        * orbsvcs/orbsvcs/Notify/Delivery_Request.h:
        * orbsvcs/orbsvcs/Notify/Delivery_Request.cpp:
        * orbsvcs/orbsvcs/Notify/EventChannel.h:
        * orbsvcs/orbsvcs/Notify/EventChannel.cpp:
        * orbsvcs/orbsvcs/Notify/EventChannelFactory.h:
        * orbsvcs/orbsvcs/Notify/EventChannelFactory.cpp:
        * orbsvcs/orbsvcs/Notify/EventType.h:
        * orbsvcs/orbsvcs/Notify/EventType.cpp:
        * orbsvcs/orbsvcs/Notify/EventTypeSeq.h:
        * orbsvcs/orbsvcs/Notify/EventTypeSeq.cpp:
        * orbsvcs/orbsvcs/Notify/Event_Manager.cpp:
        * orbsvcs/orbsvcs/Notify/Event_Persistence_Factory.h:
        * orbsvcs/orbsvcs/Notify/Event_Persistence_Strategy.h:
        * orbsvcs/orbsvcs/Notify/FilterAdmin.h:
        * orbsvcs/orbsvcs/Notify/FilterAdmin.cpp:
        * orbsvcs/orbsvcs/Notify/ID_Factory.h:
        * orbsvcs/orbsvcs/Notify/ID_Factory.inl:
        * orbsvcs/orbsvcs/Notify/ID_Factory.cpp:
        * orbsvcs/orbsvcs/Notify/Name_Value_Pair.h:
        * orbsvcs/orbsvcs/Notify/Name_Value_Pair.inl:
        * orbsvcs/orbsvcs/Notify/Name_Value_Pair.cpp:
        * orbsvcs/orbsvcs/Notify/Object.h:
        * orbsvcs/orbsvcs/Notify/Object.inl:
        * orbsvcs/orbsvcs/Notify/Object.cpp:
        * orbsvcs/orbsvcs/Notify/POA_Helper.h:
        * orbsvcs/orbsvcs/Notify/POA_Helper.cpp:
        * orbsvcs/orbsvcs/Notify/Peer.h:
        * orbsvcs/orbsvcs/Notify/Persistent_File.h:
        * orbsvcs/orbsvcs/Notify/Persistent_File.cpp:
        * orbsvcs/orbsvcs/Notify/Persistent_File_Allocator.h:
        * orbsvcs/orbsvcs/Notify/Persistent_File_Allocator.cpp:
        * orbsvcs/orbsvcs/Notify/Properties.h:
        * orbsvcs/orbsvcs/Notify/Properties.inl:
        * orbsvcs/orbsvcs/Notify/PropertySeq.h:
        * orbsvcs/orbsvcs/Notify/PropertySeq.inl:
        * orbsvcs/orbsvcs/Notify/PropertySeq.cpp:
        * orbsvcs/orbsvcs/Notify/Property_Boolean.h:
        * orbsvcs/orbsvcs/Notify/Property_Boolean.inl:
        * orbsvcs/orbsvcs/Notify/Property_T.h:
        * orbsvcs/orbsvcs/Notify/Property_T.inl:
        * orbsvcs/orbsvcs/Notify/Proxy.h:
        * orbsvcs/orbsvcs/Notify/Proxy.cpp:
        * orbsvcs/orbsvcs/Notify/ProxyConsumer.cpp:
        * orbsvcs/orbsvcs/Notify/ProxySupplier.h:
        * orbsvcs/orbsvcs/Notify/ProxySupplier.cpp:
        * orbsvcs/orbsvcs/Notify/ProxySupplier_T.cpp:
        * orbsvcs/orbsvcs/Notify/Proxy_T.cpp:
        * orbsvcs/orbsvcs/Notify/QoSProperties.h:
        * orbsvcs/orbsvcs/Notify/QoSProperties.inl:
        * orbsvcs/orbsvcs/Notify/QoSProperties.cpp:
        * orbsvcs/orbsvcs/Notify/Reconnect_Worker_T.h:
        * orbsvcs/orbsvcs/Notify/Reconnect_Worker_T.cpp:
        * orbsvcs/orbsvcs/Notify/Reconnection_Registry.h:
        * orbsvcs/orbsvcs/Notify/Reconnection_Registry.inl:
        * orbsvcs/orbsvcs/Notify/Reconnection_Registry.cpp:
        * orbsvcs/orbsvcs/Notify/Routing_Slip.h:
        * orbsvcs/orbsvcs/Notify/Routing_Slip.cpp:
        * orbsvcs/orbsvcs/Notify/Routing_Slip_Persistence_Manager.h:
        * orbsvcs/orbsvcs/Notify/Routing_Slip_Persistence_Manager.cpp:
        * orbsvcs/orbsvcs/Notify/Routing_Slip_Queue.h:
        * orbsvcs/orbsvcs/Notify/Routing_Slip_Queue.cpp:
        * orbsvcs/orbsvcs/Notify/Save_Persist_Worker_T.h:
        * orbsvcs/orbsvcs/Notify/Save_Persist_Worker_T.cpp:
        * orbsvcs/orbsvcs/Notify/Standard_Event_Persistence.h:
        * orbsvcs/orbsvcs/Notify/Standard_Event_Persistence.cpp:

        * orbsvcs/orbsvcs/Notify/SupplierAdmin.h:
        * orbsvcs/orbsvcs/Notify/SupplierAdmin.cpp:
        * orbsvcs/orbsvcs/Notify/Topology_Factory.h:
        * orbsvcs/orbsvcs/Notify/Topology_Loader.h:
        * orbsvcs/orbsvcs/Notify/Topology_Loader.cpp:
        * orbsvcs/orbsvcs/Notify/Topology_Object.h:
        * orbsvcs/orbsvcs/Notify/Topology_Object.inl:
        * orbsvcs/orbsvcs/Notify/Topology_Object.cpp:
        * orbsvcs/orbsvcs/Notify/Topology_Saver.h:
        * orbsvcs/orbsvcs/Notify/Topology_Saver.cpp:
        * orbsvcs/orbsvcs/Notify/XML_Loader.h:
        * orbsvcs/orbsvcs/Notify/XML_Loader.cpp:
        * orbsvcs/orbsvcs/Notify/XML_Saver.h:
        * orbsvcs/orbsvcs/Notify/XML_Saver.cpp:
        * orbsvcs/orbsvcs/Notify/XML_Topology_Factory.h:
        * orbsvcs/orbsvcs/Notify/XML_Topology_Factory.cpp:
        * orbsvcs/orbsvcs/Notify/notify_persist_export.h:
        * orbsvcs/orbsvcs/Notify/Any/CosEC_ProxyPushConsumer.h:
        * orbsvcs/orbsvcs/Notify/Any/CosEC_ProxyPushConsumer.cpp:
        * orbsvcs/orbsvcs/Notify/Any/CosEC_ProxyPushSupplier.h:
        * orbsvcs/orbsvcs/Notify/Any/CosEC_ProxyPushSupplier.cpp:
        * orbsvcs/orbsvcs/Notify/Any/ProxyPushConsumer.h:
        * orbsvcs/orbsvcs/Notify/Any/ProxyPushConsumer.cpp:
        * orbsvcs/orbsvcs/Notify/Any/ProxyPushSupplier.h:
        * orbsvcs/orbsvcs/Notify/Any/ProxyPushSupplier.cpp:
        * orbsvcs/orbsvcs/Notify/Any/PushConsumer.h:
        * orbsvcs/orbsvcs/Notify/Any/PushConsumer.cpp:
        * orbsvcs/orbsvcs/Notify/Any/PushSupplier.h:
        * orbsvcs/orbsvcs/Notify/Any/PushSupplier.cpp:

        * orbsvcs/orbsvcs/Notify/Sequence/SequenceProxyPushConsumer.h:
        * orbsvcs/orbsvcs/Notify/Sequence/SequenceProxyPushConsumer.cpp:
        * orbsvcs/orbsvcs/Notify/Sequence/SequenceProxyPushSupplier.h:
        * orbsvcs/orbsvcs/Notify/Sequence/SequenceProxyPushSupplier.cpp:
        * orbsvcs/orbsvcs/Notify/Sequence/SequencePushConsumer.h:
        * orbsvcs/orbsvcs/Notify/Sequence/SequencePushConsumer.cpp:
        * orbsvcs/orbsvcs/Notify/Sequence/SequencePushSupplier.h:
        * orbsvcs/orbsvcs/Notify/Sequence/SequencePushSupplier.cpp:

        * orbsvcs/orbsvcs/Notify/Structured/StructuredProxyPushConsumer.h:
        * orbsvcs/orbsvcs/Notify/Structured/StructuredProxyPushConsumer.cpp:
        * orbsvcs/orbsvcs/Notify/Structured/StructuredProxyPushSupplier.h:
        * orbsvcs/orbsvcs/Notify/Structured/StructuredProxyPushSupplier.cpp:
        * orbsvcs/orbsvcs/Notify/Structured/StructuredPushConsumer.h:
        * orbsvcs/orbsvcs/Notify/Structured/StructuredPushConsumer.cpp:
        * orbsvcs/orbsvcs/Notify/Structured/StructuredPushSupplier.h:
        * orbsvcs/orbsvcs/Notify/Structured/StructuredPushSupplier.cpp:

        * orbsvcs/orbsvcs/NotifyExt.idl:

        * orbsvcs/tests/Notify/PluggableTopology/PlugTop.mpc:
        * orbsvcs/tests/Notify/PluggableTopology/Test_Saver.h:
        * orbsvcs/tests/Notify/PluggableTopology/Test_Saver.cpp:
        * orbsvcs/tests/Notify/PluggableTopology/Test_Topology_Factory.h:
        * orbsvcs/tests/Notify/PluggableTopology/Test_Topology_Factory.cpp:
        * orbsvcs/tests/Notify/PluggableTopology/main.cpp:
        * orbsvcs/tests/Notify/PluggableTopology/plugtop_export.h:
        * orbsvcs/tests/Notify/PluggableTopology/plugtop_ns.conf:

        * orbsvcs/tests/Notify/Reconnecting/Consumer.h:
        * orbsvcs/tests/Notify/Reconnecting/Consumer.cpp:
        * orbsvcs/tests/Notify/Reconnecting/README:
        * orbsvcs/tests/Notify/Reconnecting/Reconnecting.mpc:
        * orbsvcs/tests/Notify/Reconnecting/Supplier.h:
        * orbsvcs/tests/Notify/Reconnecting/Supplier.cpp:
        * orbsvcs/tests/Notify/Reconnecting/event.conf:
        * orbsvcs/tests/Notify/Reconnecting/ns_mt.conf:
        * orbsvcs/tests/Notify/Reconnecting/ns_mt_both.conf:
        * orbsvcs/tests/Notify/Reconnecting/ns_mt_topo.conf:
        * orbsvcs/tests/Notify/Reconnecting/ns_st.conf:
        * orbsvcs/tests/Notify/Reconnecting/ns_st_both.conf:
        * orbsvcs/tests/Notify/Reconnecting/ns_st_topo.conf:
        * orbsvcs/tests/Notify/Reconnecting/run_test.pl:

        * orbsvcs/tests/Notify/XML_Persistence/XML_Persistence.mpc:
        * orbsvcs/tests/Notify/XML_Persistence/main.cpp:
        * orbsvcs/tests/Notify/XML_Persistence/run_test.pl:
        * orbsvcs/tests/Notify/XML_Persistence/svc.conf:

        * orbsvcs/tests/Notify/lib/Periodic_Consumer.cpp:

        Merge OCI's Notification Service Changes into DOC group.
        Connectivity (i.e. topology) persistence is working
        Event persistence is not, yet.

Fri Nov 19 12:46:00 2004    Gary Maxey  <gary.maxey@hp.com>

        * tests/CodeSets/simple/run_test.pl
        * tests/Connect_Strategy_Test/run_test.pl
        * tests/Crashed_Callback/run_test.pl
        * tests/Crash_On_Write/run_test.pl
        * tests/Forwarding/run_test.pl
        * tests/ICMG_Any_Bug/run_test.pl
        * tests/MProfile_Connection_Timeout/run_test.pl
        * tests/MT_Server/run_test.pl
        * tests/Multiple/run_test.pl
        * tests/NestedUpcall/MT_Client_Test/run_test.pl
        * tests/NestedUpcall/Simple/run_test.pl
        * tests/NestedUpcall/Triangle_Test/run_test.pl
        * tests/Nested_Upcall_Crash/run_test.pl
        * tests/No_Server_MT_Connect_Test/run_test.pl
        * tests/Objref_Sequence_Test/run_test.pl
        * tests/OBV/Any/run_test.pl
        * tests/OBV/Collocated/Forward/run_test.pl
        * tests/OBV/Factory/run_test.pl
        * tests/OBV/Forward/run_test.pl
        * tests/OBV/Supports/run_test.pl
        * tests/OBV/TC_Alignment/run_test.pl
        * tests/Portable_Interceptors/AMI/run_test.pl
        * tests/Server_Connection_Purging/run_test.pl
        * tests/Server_Port_Zero/run_test.pl
        * tests/Single_Read/run_test.pl
        * tests/Smart_Proxies/Benchmark/run_test.pl
        * tests/Smart_Proxies/On_Demand/run_test.pl
        * tests/Smart_Proxies/Policy/run_test.pl
        * tests/Smart_Proxies/run_test.pl
        * tests/Strategies/run_test.pl
        * tests/Timed_Buffered_Oneways/run_test.pl
        * tests/Timeout/run_test.pl
        * tests/Two_Objects/run_test.pl

          Use variable from Run_Tests.pm to specify timeout for
          process startup.

Fri Nov 19 14:44:12 2004  Jeff Parsons <j.parsons@vanderbilt.edu>

        * TAO_IDL/be/be_visitor_ccm_pre_proc.cpp:

          Changed call passing scope to use existing local variable
          rather than accessing the scope again.

        * TAO_IDL/be/be_interface.cpp:
        * TAO_IDL/be/be_visitor_amh_pre_proc.cpp:
        * TAO_IDL/be/be_visitor_ami_pre_proc.cpp:

          Fixed several errors in the computation of repository ids for
          AMI/AMH reply handlers/exception holders. Thanks to Carlos
          O'Ryan <coryan@atdesk.com> for reporting the problem with
          AMI reply handler repo ids.

        * tests/IDL_Test/main.cpp:
        * tests/IDL_Test/nested_scope.idl:

          Added test code contributed by Carlos O'Ryan for the
          problem he reported. These fixes close [BUGID:1985].

Fri Nov 19 10:59:00 2004    Gary Maxey  <gary.maxey@hp.com>

        * utils/catior/catior.cpp

          Add ability to decode two new profile types (NSKFS and
          NSKPW).

Fri Nov 19 10:55:03 2004    Gary Maxey  <gary.maxey@hp.com>

        * tao/Any_Basic_Impl.cpp

          In switch statements do not include case for CORBA::tk_ulonglong
          when ACE_LACKS_LONGLONG_T.

        * tao/Any_Basic_Impl.h

          Leave "CORBA::ULongLong ull" out of "u_" union when
          ACE_LACKS_LONGLONG_T.

        * tao/IIOP_Transport.cpp

          In TAO_IIOP_Transport::send, added debug statement for send
          failure so can see errno which becomes unavailable at higher
          levels.

        * tao/orbconf.h

          Conditionally compile constants for Tandem pluggable
          protocols.

Fri Nov 19 10:52:03 2004  Chad Elliott  <elliott_c@ociweb.com>

        * performance-tests/Latency/DII/run_test.pl:
        * performance-tests/Latency/DSI/run_test.pl:
        * performance-tests/Latency/Deferred/run_test.pl:
        * performance-tests/Latency/Thread_Pool/run_test.pl:

          Increased the timeouts to allow for slower machines.

        * examples/POA/Explicit_Activation/alternate.conf.xml:
        * examples/Quoter/client.conf:
        * examples/Quoter/client.conf.xml:
        * examples/Quoter/server.conf:
        * examples/Quoter/server.conf.xml:
        * orbsvcs/tests/AVStreams/Multicast/components_svc.conf.xml:
        * performance-tests/Cubit/TAO/MT_Cubit/svc.conf:
        * performance-tests/Cubit/TAO/MT_Cubit/svc.conf.xml:
        * performance-tests/Latency/DII/svc.conf.xml:
        * performance-tests/Latency/DSI/svc.conf:
        * performance-tests/Latency/DSI/svc.conf.xml:
        * performance-tests/Latency/Deferred/svc.conf:
        * performance-tests/Latency/Deferred/svc.conf.xml:
        * performance-tests/Sequence_Latency/DII/svc.conf.xml:
        * performance-tests/Sequence_Latency/DSI/svc.conf:
        * performance-tests/Sequence_Latency/DSI/svc.conf.xml:
        * performance-tests/Sequence_Latency/Deferred/svc.conf:
        * performance-tests/Sequence_Latency/Deferred/svc.conf.xml:
        * performance-tests/Sequence_Latency/Single_Threaded/svc.conf.xml:
        * performance-tests/Throughput/svc.conf:
        * performance-tests/Throughput/svc.conf.xml:
        * tests/NestedUpcall/MT_Client_Test/client.conf:
        * tests/NestedUpcall/MT_Client_Test/client.conf.xml:

          Removed the deprecated -ORBresources configurator option.

Fri Nov 19 08:54:00 2004  Jeff Parsons <j.parsons@vanderbilt.edu>

        * TAO_IDL/be/be_home.cpp:

          Fixed call to wrong member of accessor/mutator pair
          for the seen_in_operation member of the home's
          managed component.

        * TAO_IDL/be/be_visitor_interface_fwd/any_op_ch.cpp:
        * TAO_IDL/be/be_visitor_interface_fwd/cdr_op_ch.cpp:

          Added a missing check for locality constraint in the decision
          to generate/not generate Any and CDR operators for forward
          declared interfaces to changes made to these files in

          Thu Nov 18 13:17:49 2004  Jeff Parsons <j.parsons@vanderbilt.edu>

Thu Nov 18 18:00:26 2004  Jeff Parsons <j.parsons@vanderbilt.edu>

        * tao/Object_T.cpp:

          Made the _unchecked_narrow() method more robust by moving
          the check for a local interface above the call to _stubobj().
          Then if the call returns 0, we know we have been passed a
          bogus object reference, so we can throw BAD_PARAM. Thanks
          to Bala Natarajan <bala@dre.vanderbilt.edu> for answering
          my questions about this.

        * tao/Object_T.h:

          Removed some commented out and unused code.

Thu Nov 17 15:55:00 2004  Gary Maxey  <gary.maxey@hp.com>

        * tests/Bug_1020_Basic_Regression/run_test.pl
        * tests/Bug_1020_Regression/run_test.pl
        * tests/Bug_1269_Regression/run_test.pl
        * tests/Bug_1270_Regression/run_test.pl
        * tests/Bug_1482_Regression/run_test.pl
        * tests/Bug_1551_Regression/run_test.pl
        * tests/Bug_1568_Regression/run_test.pl
        * tests/Bug_1670_Regression/run_test.pl
        * tests/Cache_Growth_Test/run_test.pl
        * tests/Hello/run_test.pl

          Use variable from Run_Tests.pm to specify timeout for
          process startup.

Thu Nov 18 17:05:39 2004  Jeff Parsons <j.parsons@vanderbilt.edu>

        * tao/Object_T.cpp:

          Fixed a bug in narrowing a local interface to a non-local
          base class. Thanks to Vincent Spano <spam.robot@go.away>
          for reporting it, and for sending in example code to
          reproduce the problem.

Thu Nov 18 13:17:49 2004  Jeff Parsons <j.parsons@vanderbilt.edu>

        * TAO_IDL/be/be_visitor_interface_fwd/any_op_ch.cpp:
        * TAO_IDL/be/be_visitor_interface_fwd/cdr_op_ch.cpp:
        * TAO_IDL/fe/idl.yy:
        * TAO_IDL/fe/y.tab.cpp:

          Removed code generation of Any and CDR operator declarations
          for undefined forward declared interfaces. Since this issue
          was last addressed, we have added other features to code
          generation that may enable us to eliminate this unnecessary
          bit of code generation.

        * TAO_IDL/include/utl_err.h:
        * TAO_IDL/util/utl_err.cpp:

          Added error for use of local type in a non-local interface's
          operation signature. Formerly we had just an ACE_DEBUG message,
          which is easily overlooked.

Thu Nov 18 19:08:12 UTC 2004  Martin Corino  <mcorino@remedy.nl>

        * rules.tao.GNU:
          Fixed correct setting of TAO_IDL_DEP for crossbuilds.

Thu Nov 18 12:44:34 2004  Chad Elliott  <elliott_c@ociweb.com>

        * tao/RTScheduling/Current.cpp:

          Changed the ACE_ERROR message such that it does not show up as an
          error on the scoreboard.

Thu Nov 18 06:00:26 2004  J.T. Conklin  <jtc@acorntoolworks.com>

        * tao/IORManipulation/IORManipulation.cpp:

          Moved explicit release of the TAO_Stub_Auto_Ptr to transfer
          "ownership" of the contained TAO_Stub to the new Object_var as
          soon as it is created.  This avoids a crash in the case where
          the Invalid_IOR exception was thrown.  At that point both
          objects assume they own the TAO_Stub, which causes it to be
          deleted twice when the stack is unwound.

Thu Nov 18 11:47:12 UTC 2004  Johnny Willemsen  <jwillemsen@remedy.nl>

        * docs/releasenotes/ec.html:
          Updated

Wed Nov 17 17:33:23 2004  Jeff Parsons <j.parsons@vanderbilt.edu>

        * TAO_IDL/be/be_visitor_ccm_pre_proc.cpp:
        * TAO_IDL/be_include/be_visitor_ccm_pre_proc.h:
        * TAO_IDL/fe/idl.yy:
        * TAO_IDL/fe/y.tab.cpp
        * TAO_IDL/include/idl_global.h:
        * TAO_IDL/util/utl_global.cpp:

          Reinstated changes of

          Tue May 11 22:28:45 2004  Jeff Parsons <j.parsons@vanderbilt.edu>

          that were reverted in

          Sun Aug 15 18:16:00 2004  Jeff Parsons <j.parsons@vanderbilt.edu>

          due to a misunderstanding about the appearance of IDL3
          "equivalent IDL" in spec-defined executor IDL.

Wed Nov 17 12:54:01 2004  Balachandran Natarajan  <bala@dre.vanderbilt.edu>

        * docs/index.html:

          Changed the name of the link used to point to ORB services
          documentation.

        * docs/orbsvcs.html:

          Pointed to the release notes for the latest information.

        * docs/releasenotes/ec.html:
        * docs/releasenotes/index.html:

          Added links to the ec_options.html and cec_options.html.

Wed Nov 17 17:13:12 UTC 2004  Martin Corino  <mcorino@remedy.nl>

        * tests/CodeSets/simple/server.cpp:
          Added missing include for stdio.

Wed Nov 17 10:47:00 2004  Jeff Parsons <j.parsons@vanderbilt.edu>

        * tests/IDL_Test/fwd.idl:

          Added IDL use cases for IDL compiler bugs fixed in

          Tue Nov 16 09:45:26 2004  Jeff Parsons <j.parsons@vanderbilt.edu>

Wed Nov 17 10:08:41 2004  Jeff Parsons <j.parsons@vanderbilt.edu>

        * tao/Any_Special_Impl_T.cpp (insert):

          Fixed cut and paste error that made the typecode buffer
          created for bounded (w)strings static, thereby using only
          the bound passed in on the initial creation for every
          subsequent one. Thanks to Jiang Wei <jiangwei_1976@yahoo.com.cn>
          for reporting the bug, and to Torsten Kuepper for spotting
          the source of the problem. This fix closes [BUGID:1975].

Tue Nov 16 14:05:33 2004  Balachandran Natarajan  <bala@dre.vanderbilt.edu>

        * tao/ORB_Core.cpp (run):

          A simple fix for thread-per-connection. Servers could crash
          randomly if the orb was shutdown during the upcall. The
          thread that was in the upcall is an ORB spawned thread. When we
          call  ORB::shutdown () from the upcall thread, the main thread
          (which is in ORB::run ()) is woken up and removed from the
          ORB. The main thread exits from the program leaving the thread
          shutting down the ORB in limbo. Bunch of allocations done by the
          main thread in the service configurator and object manager are
          all destroyed crashing the spawned thread.

          This fix addresses the above problem by making the thread in
          ORB::run () wait on Thread_Manager::wait (), if the ORB is
          shutting down and iff TPC is used.

          Thanks to Carlos O'Ryan for bringing this to my notice.

Tue Nov 16 09:45:26 2004  Jeff Parsons <j.parsons@vanderbilt.edu>

        * TAO_IDL/be/be_visitor_traits.cpp:

          Removed generation of Objref_Traits<> specialization
          declaration for non-defined forward declared interfaces.
          Since the interface is not defined, the specialization
          class is not defined in the corresponding .cpp file,
          which can lead to problems when interfaces are forward
          declared across translation units or libraries. It was
          thought previously that this declaration generation was
          needed, but perhaps recent fixes to code generation for
          non-defined forward declared interfaces has eliminated
          the need.

        * TAO_IDL/be/be_visitor_exception/ctor_assign.cpp:

          Fixed generation of exception copy constructor and
          assignment operator for exceptions to use Objref_Traits<>
          for an interface member, in case it is forward declared and
          not defined.

        * TAO_IDL/be/be_visitor_typecode/typecode_defn.cpp:

          Changed the 'size' parameter passed to the typecode
          constructor to always be 0. This parameter is not used
          in the the TypeCode class constructor, and passing it
          as 'sizeof()' causes problems when generating a typecode
          for a typedef of a forward declared undefined interface.

Tue Nov 16 13:04:12 UTC 2004  Martin Corino  <mcorino@remedy.nl>

        * tao/BoundsA.cpp:
        * tao/PolicyA.cpp:
        * tao/PortableInterceptorA.cpp:
        * tao/WrongTransactionA.cpp:
        * tao/Messaging/MessagingC.cpp:
        * tao/PortableServer/PortableServerA.cpp:
        * tao/IORManipulation/IORA.cpp:
          Fixed missing includes for f.i. VxWorks builds because of IDL
          compiler bug in case of special build configs. IDL compiler has
          also been fixed so files will be correctly regenerated next time
          (when POA refactoring is complete).

        * tao/Any.cpp:
        * tao/Codeset_Manager.cpp:
        * tao/Codeset_Translator_Factory.cpp:
        * tao/GIOPC.cpp:
        * tao/ORBInitializer_Registry.cpp:
        * tao/Transport.cpp:
        * tao/UTF16_BOM_Factory.cpp:
        * tao/Utils/RIR_Narrow.cpp:
        * tests/Bug_1361_Regression/shutdown.cpp:
        * tests/CDR/basic_types.cpp:
        * tests/CDR/growth.cpp:
        * tests/CodeSets/libs/IBM1047_ISO8859/Char_IBM1047_ISO8859_Factory.cpp:
        * tests/CodeSets/libs/IBM1047_ISO8859/Wchar_IBM1047_ISO8859_Factory.cpp:
        * tests/CodeSets/simple/client.cpp:
        * tests/CodeSets/simple/server.cpp:
        * tests/Collocation/Diamond_i.h:
        * tests/IORManipulation/IORTest.cpp:
        * tests/POA/Policies/Policies.cpp:
        * tests/Smart_Proxies/Collocation/Smart_Proxy_Impl.cpp:
          Fixed missing includes and iostream incompatibilities for
          VxWorks builds.

        * tests/Servant_To_Reference_Test/Servant_to_Reference.mpc:
          Fixed double link of Test_i.o because .h was added to
          Source_Files.

Mon Nov 15 15:06:12 UTC 2004  Johnny Willemsen  <jwillemsen@remedy.nl>

        * tests/AMH_Exceptions/AMH_Exceptions.mpc:
        * tests/AMH_Oneway/AMH_Oneway.mpc:
          Base the server on taoserver, instead of taoexe and portableserver,
          taoserver is derived from taoexe and portableserver, but also sets
          the exename to server

Sun Nov 14 14:26:18 2004  J.T. Conklin  <jtc@acorntoolworks.com>

        * configure.ac:

          Changed to use ACE_WITH_ACEXML macro instead of setting
          BUILD_ACEXML automake conditional to true.

Sun Nov 14 21:57:38 2004  Balachandran Natarajan  <bala@dre.vanderbilt.edu>

        * tests/Bug_1535_Regression/Bug_1535_Regression.mpc:

          Do not build the test when minimum_corba is enabled.

Sun Nov 14 21:38:21 2004  Balachandran Natarajan  <bala@dre.vanderbilt.edu>

        * tao/PortableServer/Object_Adapter.cpp:

Sun Nov 14 09:50:37 2004  J.T. Conklin  <jtc@acorntoolworks.com>

        * configure.ac:

          Set BUILD_ACEXML automake conditional to true.

          Added orbsvcs/ImplRepo_Service/Makefile to AC_CONFIG_FILES.

        * orbsvcs/Makefile.am:

          Added ImplRepo_Service to SUBDIRS.

        * orbsvcs/ImplRepo_Service/Makefile.am:

          Updated now that ACEXML is available for autoconf builds.

Sun Nov 14 16:51:28 2004  Martin Corino  <mcorino@remedy.nl>

        * tao/PortableServer/Object_Adapter.cpp:
          Removed leftover ACE_ENV_ARG_DECL from
          TAO_Object_Adapter::get_collocated_servant().

Sun Nov 14 05:11:42 2004  Balachandran Natarajan  <bala@dre.vanderbilt.edu>

        * tao/Utils/RIR_Narrow.cpp:

          Fixed a simple compilation error when exceptions are turned off.

Sun Nov 14 05:01:28 2004  Balachandran Natarajan  <bala@dre.vanderbilt.edu>

        * tao/PortableServer/Object_Adapter.cpp:
        * tao/PortableServer/Object_Adapter.h:

          Fix for Bug 1535. Please see

          http://deuce.doc.wustl.edu/bugzilla/show_bug.cgi?id=1535

          for details.

        * tests/Bug_1535_Regression/Bug_1535_Regression.mpc:
        * tests/Bug_1535_Regression/Test.idl:
        * tests/Bug_1535_Regression/bug_1535_regression.cpp:
        * tests/Bug_1535_Regression/run_test.pl:

          Regression test for Bug 1535.

Fri Nov 12 14:51:19 2004  Jeff Parsons <j.parsons@vanderbilt.edu>

        * TAO_IDL/be/be_visitor_typecode/typecode_defn.cpp:

          Changed behavior of typecode generation for exceptions
          to always be in the *C.cpp file. Since exceptions always
          depend on their typecodes, this gives us an opportunity
          to link the exception's typecode without linking the
          correspoding Any operators.

Fri Nov 12 14:15:49 2004  Jeff Parsons <j.parsons@vanderbilt.edu>

        * TAO_IDL/be/be_visitor_interface/amh_ss.cpp:

          In the generated _this() method for the AMH class, added
          generation of auto pointer for the created stub class, to
          make the code exception safe, similarly to what is done
          in the corresponding skeleton class. Thanks again to
          Johnny Willemsen <jwillemsen@remedy.nl> for pointing
          this out.

Fri Nov 12 08:40:53 2004  Jeff Parsons <j.parsons@vanderbilt.edu>

        * TAO_IDL/be/be_visitor_operation/amh_rh_ss.cpp:

          Added missing ACE_CHECK in generated code for operations
          of the AMH response handler. Thanks to Johnny Willemsen
          <jwillemsen@remedy.nl> for pointing out the oversight.

Thu Nov 11 22:31:12 2004  J.T. Conklin  <jtc@acorntoolworks.com>

        * orbsvcs/orbsvcs/FaultTolerance/FT_ServerRequest_Interceptor.cpp:

          Remove stray comma which resulted in truncated error message.

Thu Nov 11 19:17:36 2004  J.T. Conklin  <jtc@acorntoolworks.com>

        * orbsvcs/Event_Service/Makefile.am:

          Removed an unnecessary dependency upon the TAO_CosEvent library.

Thu Nov 11 14:33:00 2004  Gary Maxey    <gary.maxey@hp.com>

        * tao/Connector_Registry.cpp

          Fixed problem in create_profile() when there is an
          unknown profile.  The cdr.orb_core() value may be zero
          in this case.  This zero value is passed to the
          TAO_Unknown_Profile constructor where it eventually leads
          to a memory fault.

Thu Nov 11 14:55:00 2004  Jeff Parsons <j.parsons@vanderbilt.edu>

        * TAO_IDL/be/be_visitor_valuetype/field_cdr_cs.cpp:
        * TAO_IDLbe/be_visitor_valuetype/field_cs.cpp:

          In accessing or marshaling valuetype members that are interfaces
          changed calls to _duplicate() and marshal() to use the
          corresponding methods in TAO::Obref_Traits<>, in case the
          interface in question has been forward declared but not
          yet defined.

Wed Nov 10 11:25:28 2004  Jeff Parsons <j.parsons@vanderbilt.edu>

        * TAO_IDL/be/be_codegen.cpp:

          Added generation of #includes of Any.h and CDR.h in the
          *A.cpp file (if generated). This is for compilers (such
          as the Diablo VxWorks compiler) that do not include
          template source files in the corresponding template header
          files. In such a case, the files in question are not pulled
          in by Any_*_Impl_T.cpp via Any_*_Impl_T.h, as they are
          in all other cases. Thanks to
          Johnny Willemsen <jwillemsen@remedy.nl> and Martin Corino
          <mcorino@remedy.nl> for reporting these problems.

Wed Nov 10 09:46:46 2004  Jeff Parsons <j.parsons@vanderbilt.edu>

        * TAO_IDL/ast/ast_union.cpp:
        * TAO_IDLbe/be_union_branch.cpp:
        * TAO_IDLbe/be_visitor_union/union_cs.cpp:

          Changed code generation for a union default constructor to
          set the discriminator to a legal defaul value if there is
          one, and to the value of the first case label otherwise
          (previously the behavior in all cases). This new behavior
          is not required by the spec, but is more in line with the
          behavior of IDL compilers from other ORB vendors. Thanks
          to Rohan Mars <rohan_mars@yahoo.com> for sending in the
          example IDL file.

Tue Nov  9 15:35:12 UTC 2004  Johnny Willemsen  <jwillemsen@remedy.nl>

        * tao/GIOP_Utils.h:
          Added forward declaration of ACE_Time_Value, this type is used but
          not forward declared.

Tue Nov  9 08:27:30 2004  Chad Elliott  <elliott_c@ociweb.com>

        * tests/AMI_Buffering/client.cpp:

          Increased the amount of time allowed to elapse before the flush
          occurs due to differences in OS schedulers.

Tue Nov  9 07:22:46 2004  Chad Elliott  <elliott_c@ociweb.com>

        * orbsvcs/tests/HTIOP/AMI/HTIOP_AMI.mpc:
        * orbsvcs/tests/HTIOP/Hello/HTIOP_Hello.mpc:

          Ensure that symbols from the ACE_Test_Output class do not get
          exported for these exe's, they include Test_Output.cpp in the
          projects.

Mon Nov  8 12:24:15 2004  Chad Elliott  <elliott_c@ociweb.com>

        * orbsvcs/Event_Service/Event_Service.mpc:

          Removed an unnecessary dependency upon the TAO_CosEvent libraray.

Mon Nov  8 11:30:24 2004  Chad Elliott  <elliott_c@ociweb.com>

        * orbsvcs/orbsvcs/FTORB.mpc:
        * orbsvcs/orbsvcs/FtRtEvent.mpc:
        * orbsvcs/orbsvcs/PortableGroup.mpc:
        * orbsvcs/orbsvcs/PortableGroup_Simple_export.h:

          The FT_ClientORB library requires CDR insertion operators that are
          generated as part of the PortableGroup_Simple_DS.idl generation.
          In order for Windows to be able to find these symbols, they must
          be exported.  Now, the idl file is generated with an export macro
          (for use within the PortableGroup library).  But for the
          FTORB_Utils and FTRT_EventChannel libraries we do not want to
          export any of the PortableGroup_Simple_DS symbols, so we explicitly
          set the TAO_PORTABLEGROUP_SIMPLE_HAS_DLL macro to zero.  Thus, the
          symbols are exported from the PortableGroup library and no other.

Sat Nov  6 06:54:16 2004  Chad Elliott  <elliott_c@ociweb.com>

        * tao/DynamicInterface/DII_Arguments.cpp:

          Changed ACE_TRY_NEW_ENV to ACE_DECLARE_NEW_CORBA_ENV and ACE_TRY.
          The CORBA environment is used outside the scope of the try/catch.

Fri Nov  5 13:33:36 2004  Jeff Parsons <j.parsons@vanderbilt.edu>

        * TAO_IDL/be/be_visitor_exception/exception_ch.cpp:
        * TAO_IDL/be/be_visitor_exception/exception_cs.cpp:

          Added code generation for the override of the const
          version of the _downcast() method for user exceptions.
          Thanks to Simone Viani <sviani@etasistemi.it> for
          reporting the missing generated method.

Fri Nov  5 10:51:08 2004  J.T. Conklin  <jtc@acorntoolworks.com>

        * orbsvcs/orbsvcs/Makefile.am:

          Updated for new location of HTBP library.

Fri Nov  5 11:50:39 2004  Chad Elliott  <elliott_c@ociweb.com>

        * orbsvcs/orbsvcs/Log/Log_Constraint_Visitors.cpp:

          Choose .in() on the any instead of the * operator.  This will help
          Borland get past the ambiguity.

Fri Nov  5 16:14:52 2004  Balachandran Natarajan  <bala@dre.vanderbilt.edu>

        * tao/DynamicInterface/DII_Arguments.cpp (interceptor_paramlist):

          Do not insert the argument into any Any. Just call replace () to
          make a logical copy of the TAO::Any_impl.

        * tao/PortableServer/Object_Adapter.cpp:
        * tao/PortableServer/POA.cpp:

          Reorganized the lock strategy which prevents deadlocks with
          ImR. Please see

          http://groups.yahoo.com/group/tao-users/message/18317

          for the original bug report and the suggested solution from
          Bill Somerville <bill at classdesign dot com>.

Fri Nov  5 07:02:01 2004  Chad Elliott  <elliott_c@ociweb.com>

        * orbsvcs/tests/Security/Big_Request/client.cpp:
        * orbsvcs/tests/Security/Big_Request/run_test.pl:
        * orbsvcs/tests/Security/Big_Request/server.cpp:
        * orbsvcs/tests/Security/Callback/client.cpp:
        * orbsvcs/tests/Security/Callback/run_test.pl:
        * orbsvcs/tests/Security/Callback/server.cpp:
        * orbsvcs/tests/Security/Crash_Test/client.cpp:
        * orbsvcs/tests/Security/Crash_Test/run_test.pl:
        * orbsvcs/tests/Security/Crash_Test/server.cpp:
        * orbsvcs/tests/Security/Secure_Invocation/client.cpp:
        * orbsvcs/tests/Security/Secure_Invocation/run_test.pl:
        * orbsvcs/tests/Security/Secure_Invocation/server.cpp:

          Environment variables are not propagated to child processes (at
          least not Perl's Win32::Process::Create() function.  So, in each
          test process we set the SSL_CERT_FILE environment variable
          programatically using ACE_OS::putenv().  This allows these
          security tests to run on Windows.

Fri Nov  5 07:45:12 UTC 2004  Johnny Willemsen  <jwillemsen@remedy.nl>

        * TAO_IDL/be/be_global.cpp:
          When -o is specified we try to create the directory passed, the
          result is checked for errors, and EEXIST is ignored as error, but
          the Borland RTL doesn't have EEXIST, it gives EACCES in case of
          error, so just for Borland, also ignore EACCES, this is reported
          to Borland as QC 9495. This fixes the problems in our daily
          Borland builds.

Thu Nov  4 22:20:19 2004  Phil Mesnier  <mesnier_p@ociweb.com>

        * TAO/TAOACE.mwc:
          Added ../protocols, a new directory, to the workspace
          definition. See my comment in $ACE_ROOT/ChangeLog, Thu Nov  4
          22:08:40 2004  for details regarding the protocols directory.

        * TAO/orbsvcs/orbsvcs/HTIOP.mpc:
          This project was not including htbp as a base.

        * TAO/orbsvcs/tests/HTIOP/AMI/HTIOP_AMI.mpc:
        * TAO/orbsvcs/tests/HTIOP/BiDirectional/HTIOP_BiDirectional.mpc:
        * TAO/orbsvcs/tests/HTIOP/Hello/HTIOP_Hello.mpc:
          Removed HTIOP as a base project since these tests all load HTIOP
          dynamically.

Thu Nov  4 17:42:07 2004  J.T. Conklin  <jtc@acorntoolworks.com>

        * orbsvcs/orbsvcs/Log/PersistStore.cpp:

          Changed retrieve method to seek past records with non-matching
          id's.  This avoids memory leaks and is more efficient than the
          code it replaced.  Thanks to Gary Maxey <gary.maxey@hp.com> for
          reporting the problem.

Thu Nov  4 13:51:24 2004  J.T. Conklin  <jtc@acorntoolworks.com>

        * orbsvcs/orbsvcs/Makefile.am:

          Updated for recent *.mpc changes, HTIOP, etc.

        * orbsvcs/orbsvcs/FTORB.mpc:

          Added PortableGroup_Simple_DSS.h and
          FaultTolerance/FT_ORB_Utils_export.h to Header_Files.

        * orbsvcs/orbsvcs/FaultTolerance.mpc:

          Added FaultTolerance/fault_tol_export.h to Header_Files.

        * orbsvcs/orbsvcs/PortableGroup.mpc:

          Added PortableGroup/portablegroup_export.h to Header_Files.

Thu Nov  4 13:14:24 2004  Chad Elliott  <elliott_c@ociweb.com>

        * orbsvcs/tests/Security/Secure_Invocation/server.cpp:

          Moved a servant implementation object outside of a constrained
          scope so that it is still around when the POA is destroyed.

Thu Nov  4 12:35:02 2004  Jeff Parsons <j.parsons@vanderbilt.edu>

        * orbsvcs/orbsvcs/IFR_Service_Utils.cpp:

          Fixed potential memory leak in the Interface Repository which
          happens when open() is called on a just-allocated
          ACE_Configuration pointer. If the call fails, the method
          was returning without deleting the pointer. Thanks to
          Gary Maxey <gary.maxey@hp.com> for reporting the problem.

Thu Nov  4 12:09:00 2004  Jeff Parsons <j.parsons@vanderbilt.edu>

        * orbsvcs/IFR_Service/ifr_adding_visitor.cpp:

          Fixed a bug in the creation of an abstract interface entry
          in the Interface Repository. This creation requires a list
          of parents, and the list must be a CORBA sequence of
          AbstractInterfaceDef. All other interface entries need a
          sequence of InterfaceDef parents. So a separate sequence
          was declared for the purpose in the IFR loader, but the
          wrong one was getting updated with the abstract interface's
          parent info in the AST. When the correct (but uninitialized)
          sequence was passed in the IFR call, a BAD_PARAM exception
          resulted.

Wed Nov  3 06:14:08 2004  J.T. Conklin  <jtc@acorntoolworks.com>

        * orbsvcs/orbsvcs/FTORB.mpc:

          Removed PortableGroup_Simple_DSC.cpp from FT_ClientORB and
          FT_ServerORB projects, as it is already in the FTORB_Utils
          library that both depend on.

Wed Nov  3 07:15:24 2004  Chad Elliott  <elliott_c@ociweb.com>

        * orbsvcs/orbsvcs/RTCosScheduling/RTCosScheduling_ServerScheduler_i.i:

          The _hash method on CORBA::Object_var takes a CORBA::ULong which
          is always 32 bits.  Use a different macro instead of LONG_MAX
          which can be 64 bits on some platforms.

Tue Nov  2 12:28:47 2004  J.T. Conklin  <jtc@acorntoolworks.com>

        * orbsvcs/orbvcs/FT_CORBA.idl:

          Changed "orbsvcs/orbsvcs/" #include path prefix to "orbsvcs/".
          Was missed in earlier refactor.

Tue Nov  2 12:23:20 2004  Jeff Parsons <j.parsons@vanderbilt.edu>

        * TAO_IDL/be/be_interface.cpp:
        * TAO_IDL/be/be_visitor_interface/interface_ch.cpp:
        * TAO_IDL/be/be_visitor_interface/interface_cs.cpp:
        * TAO_IDL/be/be_visitor_operation/operation_ch.cpp:

          - Fixed a bug that occurs when a local interface inherits
            from one or more abstract interfaces with operations.
            The inherited operations were getting generated twice,
            once without being pure virtual as required for local
            interfaces.

          - Removed generation of the function pointer for collocation
            factory initialization when we have a local interface, since
            it's not relevant in that case.

Tue Nov  2 09:43:18 2004  J.T. Conklin  <jtc@acorntoolworks.com>

        * orbsvcs/FT_ReplicationManager/FT_ReplicationManager.mpc:

          Changed FT_ReplicationManager project to inherit from core so
          that executable is installed.

        * orbsvcs/FT_ReplicationManager/Makefile.am:
        * orbsvcs/Fault_Detector/Makefile.am:
        * orbsvcs/Fault_Notifier/Makefile.am:

          Updated to install executables.

        * orbsvcs/orbsvcs/Makefile.am:

          Updated to omit Log/PersistantStore.cpp.

Tue Nov  2 07:24:04 2004  J.T. Conklin  <jtc@acorntoolworks.com>

        * orbsvcs/orbsvcs/Log/LogRecordStore.cpp:
        * orbsvcs/orbsvcs/Log/LogRecordStore.h:

          Added new method log_record_size() which returns the size of
          the log record including the contents of the Any field.

          Changed log() and remove() methods to use log_record_size().
          The old implementation only counted the size of the LogRecord
          struct which seriously underestimates the size.

Mon Nov  1 15:18:12 UTC 2004  Johnny Willemsen  <jwillemsen@remedy.nl>

        * VERSION:
          Corrected mailing list name

Sun Oct 31 15:51:12 UTC 2004  Johnny Willemsen  <jwillemsen@remedy.nl>

        * orbsvcs/orbsvcs/Trader/Trader.cpp:
          Changed isalpha to ACE_OS::is_alpha, this is already used in another
          place in this file and fixes the compile problems on Tru64

Sat Oct 30 15:28:09 2004  Balachandran Natarajan  <bala@dre.vanderbilt.edu>

        * orbsvcs/tests/Trading/TT_Info.cpp:

          Fixed typos.

Fri Oct 29 13:31:31 2004  Chad Elliott  <elliott_c@ociweb.com>

        * performance-tests/Protocols/distributor.cpp:
        * performance-tests/Protocols/receiver.cpp:

          Getting rid of more g++ warnings.

Fri Oct 29 17:03:46 2004  Balachandran Natarajan  <bala@dre.vanderbilt.edu>

        * orbsvcs/orbsvcs/Trader/Constraint_Visitors.cpp:

          Applied a patch from Bill Somerville <bill@classdesign.com>
          which fixes an incorrect implementation of ~ (twiddle) option.

          a ~ b

          should be true if a is a substring of b, it is implemented as
          true if b is a substring of a. The OMG spec is no help, but the
          TAO TradingService docs, code comments, and other sources all
          seem to agree with this interpretation.

        * orbsvcs/tests/Trading/TT_Info.cpp:

          Enhanced the test for the above.

Fri Oct 29 10:09:56 2004  Jeff Parsons <j.parsons@vanderbilt.edu>

        * TAO_IDL/ast/ast_union.cpp:
        * TAO_IDL/ast/ast_union_branch.cpp:
        * TAO_IDL/include/ast_union.h:
        * TAO_IDL/include/ast_union_branch.h:
        * TAO_IDL/include/utl_scope.h:
        * TAO_IDL/util/utl_scope.cpp:

          When a union has an enum discriminator, each label name is
          added to an existing list of identifiers for the union
          scope, so that when a union member is added to the AST,
          we can detect a name clash between its name and a label
          name. Thanks to Bjorn Roald <bjorn.roald@kongsberg.com>
          for making a post to comp.object.corba, pointing out that
          the TAO IDL compiler accepts this kind of illegal IDL, and
          to Michi Henning <michi@triodia.com> for confirming that
          Bjorn's example IDL was indeed illegal.

Fri Oct 29 09:23:50 2004  Chad Elliott  <elliott_c@ociweb.com>

        * orbsvcs/IFR_Service/ifr_adding_visitor_structure.cpp:
        * orbsvcs/orbsvcs/FtRtEvent/EventChannel/FTEC_ProxyConsumer.cpp:
        * tests/RTCORBA/Server_Protocol/server.cpp:

          Removed build warnings from g++.

Thu Oct 28 14:46:55 2004  Phil Mesnier  <mesnier_p@ociweb.com>

        * orbsvcs/orbsvcs/HTIOP/HTIOP_Completion_Handler.cpp:
        * orbsvcs/orbsvcs/HTIOP/HTIOP_Connection_Handler.cpp:
          Addressed MSVC 6.0 compiler problem with typedef'ed templates
          declared within namespaces.

Thu Oct 28 12:01:50 2004  Phil Mesnier  <mesnier_p@ociweb.com>

        * Release (CONTROLLED_FILES):
          Added TAO/interop-tests to the set of directories to be included
          in a release. This directory is intended to hold tests that may
          be built with other ORBs to perform specific interoperability
          testing.

Thu Oct 28 10:29:56 2004  Chad Elliott  <elliott_c@ociweb.com>

        * TAO_IDL/be/be_decl.cpp:

          When assigning a value to name in be_decl::compute_flat_name, use
          strdup to allocate (as is done elsewhere).  Callers of this method
          expect memory to be allocated.

        * TAO_IDL/be/be_visitor_interface/amh_rh_ss.cpp:
        * TAO_IDL/be/be_visitor_interface/amh_sh.cpp:
        * TAO_IDL/be/be_visitor_interface/amh_si.cpp:
        * TAO_IDL/be/be_visitor_interface/amh_ss.cpp:
        * TAO_IDL/be/be_visitor_operation/amh_rh_ss.cpp:
        * TAO_IDL/be/be_visitor_operation/amh_sh.cpp:
        * TAO_IDL/be/be_visitor_operation/amh_ss.cpp:

          Use ACE_OS::free() instead of delete.  The memory was allocated by
          ACE_OS::strdup() which uses malloc.

        * TAO_IDL/include/ast_decl.h:

          #include "ace/os_include/sys/os_types.h" to ensure that size_t
          typedef is included (which is used by the DEF_NARROW_METHODS0
          macro).

        * TAO_IDL/util/utl_global.cpp:

          Initialize pre_abspath and post_abspath to avoid uninitialized
          memory reads.  Also added [] to the delete for
          pre_preproc_includes[j].

Thu Oct 28 14:45:27 2004  Balachandran Natarajan  <bala@dre.vanderbilt.edu>

        * orbsvcs/orbsvcs/Trader/Service_Type_Repository.cpp:
        * orbsvcs/orbsvcs/Trader/Trader.cpp:
        * orbsvcs/orbsvcs/Trader/Trader.h:
        * orbsvcs/orbsvcs/Trader/Trader_Interfaces.cpp:
        * orbsvcs/orbsvcs/Trader/Trader_Utils.cpp:

          Thanks to patch from Bill Somerville <bill@classdesign.com>
          which allows scoped names (::) for ServiceRepository. The change
          does the following

          (1) Addition of a static function that checks for valid service
          type names.

          (2) Addition of a static function that checks for link names
          (this implementation internally calls is_valid_property_name
          ()).

        * orbsvcs/tests/Trading/TT_Info.cpp:

          The test now checks for scoped names.

Thu Oct 28 07:39:15 2004  Chad Elliott  <elliott_c@ociweb.com>

        * performance-tests/Latency/AMI/run_test.pl:

          Increase the client timeout to allow this test to run on slower
          machines.

Thu Oct 28 06:24:10 2004  Chad Elliott  <elliott_c@ociweb.com>

        * orbsvcs/orbsvcs/HTIOP/HTIOP_Acceptor.h:
        * orbsvcs/orbsvcs/HTIOP/HTIOP_Connector.h:
        * orbsvcs/orbsvcs/HTIOP/HTIOP_Connector.cpp:
        * orbsvcs/orbsvcs/HTIOP/HTIOP_Factory.h:

          Removed more extra semi-colons.

Wed Oct 27 17:06:31 2004  Ossama Othman  <ossama@dre.vanderbilt.edu>

        * tao/Protocols_Hooks.h (keep_alive_, dont_route_, no_delay_):

          Changed these class members to be of type "int" instead of
          CORBA::Boolean.  setsockopt() expects the data types of these
          socket options to be an int, not a boolean type of size 1.  See
          Unix Network Programming: Volume 1 by Richard Stevens for
          details.

        * tao/IIOP_Connection_Handler.h:

          Nuked trailing whitespace.

        * tao/IIOP_Connection_Handler.cpp (open):
        * tao/Strategies/SCIOP_Connection_Handler.cpp (open):
        * tao/Strategies/SHMIOP_Connection_Handler.cpp (open):
        * orbsvcs/orbsvcs/SSLIOP/SSLIOP_Connection_Handler.cpp (open):

          Pass "sizeof (protocol_properties.no_delay)" rather than
          "sizeof (int)" to the set_option() method.  "sizeof (int)" is
          correct, but the corresponding variable "no_delay" in
          *_Protocol_Properties was incorrectly defined as a
          CORBA::Boolean, which resulted in data a type/size mismatch in
          the arguments passed to setsockopt().  This change prevents data
          type/size mismatches from reoccuring should the data type be
          changed in the future, even though it should remain as "int".
          Addresses a "contains uninitialised or unaddressable byte(s)"
          error exhibited by valgrind.

        * orbsvcs/orbsvcs/ESF/ESF_Copy_On_Write.cpp:

          Include "tao/Environment.h" to explicitly pull in
          CORBA::Environment class declaration.

Wed Oct 27 12:00:25 2004  Phil Mesnier  <mesnier_p@ociweb.com>

        * orbsvcs/orbsvcs/HTIOP.mpc:
          Fixed the dynamic flags for win32 builds

Wed Oct 27 11:59:43 2004  Chad Elliott  <elliott_c@ociweb.com>

        * orbsvcs/tests/EC_Throughput/run_test.pl:

          Increase the timeout for the collocated multi-threaded test.

Wed Oct 27 09:35:24 2004  Chad Elliott  <elliott_c@ociweb.com>

        * orbsvcs/orbsvcs/HTIOP/HTIOP_Transport.cpp:

          Match the template instantiation to the typedef in
          HTIOP_Transport.h.

Wed Oct 27 07:28:23 2004  J.T. Conklin  <jtc@acorntoolworks.com>

        * orbsvcs/orbsvcs/Log/Log_Constraint_Visitor.cpp:

          Changed use of Any_var to Any* in constructor to work around
          issue (bug?) in Borland compiler.

Wed Oct 27 07:22:25 2004  J.T. Conklin  <jtc@acorntoolworks.com>

        * orbsvcs/orbsvcs/Log/BasicLogFactory_i.cpp:
        * orbsvcs/orbsvcs/Log/EventLogFactory_i.cpp:
        * orbsvcs/orbsvcs/Log/LogMgr_i.cpp:
        * orbsvcs/orbsvcs/Log/LogMgr_i.h:
        * orbsvcs/orbsvcs/Log/NotifyLogFactory_i.cpp:
        * orbsvcs/orbsvcs/Log/RTEventLogFactory_i.cpp:

          Changed create() method to find a unused/unique id instead of
          simply using the last id allocated.  That could result in an
          LogIdAlreadyExists exception being thrown if the id had been
          taken for another log via create_with_id().

Wed Oct 27 09:08:15 2004  Chad Elliott  <elliott_c@ociweb.com>

        * orbsvcs/orbsvcs/HTIOP.idl:

          Removed a misleading comment.  It caused warnings with the Borland
          compiler anyway.

Wed Oct 27 09:03:24 2004  Chad Elliott  <elliott_c@ociweb.com>

        * orbsvcs/orbsvcs/HTIOP/HTIOP_Acceptor_Impl.cpp:

          Make this code compilable.  So far, I've only seen aCC attempt to
          build it.

Wed Oct 27 08:00:33 2004  Chad Elliott  <elliott_c@ociweb.com>

        * orbsvcs/orbsvcs/HTIOP/HTIOP_Acceptor.h:
        * orbsvcs/orbsvcs/HTIOP/HTIOP_Acceptor_Impl.h:
        * orbsvcs/orbsvcs/HTIOP/HTIOP_Completion_Handler.h:
        * orbsvcs/orbsvcs/HTIOP/HTIOP_Connection_Handler.h:
        * orbsvcs/orbsvcs/HTIOP/HTIOP_Connector.h:
        * orbsvcs/orbsvcs/HTIOP/HTIOP_Connector_Impl.h:
        * orbsvcs/orbsvcs/HTIOP/HTIOP_Endpoint.h:
        * orbsvcs/orbsvcs/HTIOP/HTIOP_Factory.h:
        * orbsvcs/orbsvcs/HTIOP/HTIOP_Profile.h:
        * orbsvcs/orbsvcs/HTIOP/HTIOP_Transport.h:

          Semi-colons are not required on the closing brace of a namespace
          and cause errors on a few compilers.

Wed Oct 27 07:15:25 2004  Chad Elliott  <elliott_c@ociweb.com>

        * orbsvcs/tests/HTIOP/AMI/client.cpp:
        * orbsvcs/tests/HTIOP/AMI/server.cpp:
        * orbsvcs/tests/HTIOP/AMI/simple_client.cpp:

          Removed unnessesary CORBA environment arguments from
          ACE_OS::socket_init().

        * orbsvcs/tests/HTIOP/BiDirectional/server.cpp:

          Added a necessary CORBA environment argument.

Tue Oct 26 13:42:16 2004  Jeff Parsons <j.parsons@vanderbilt.edu>

        * orbsvcs/IFR_Service/ifr_adding_visitor.cpp:
        * orbsvcs/IFR_Service/ifr_adding_visitor_structure.cpp:
        * orbsvcs//IFRService/ModuleDef_i.cpp:

          Cosmetic changes.

        * orbsvcs/orbsvcs/IFRService/Contained_i.cpp:
        * orbsvcs/orbsvcs/IFRService/Contained_i.h:
        * orbsvcs/orbsvcs/IFRService/IRObject_i.cpp:
        * orbsvcs/orbsvcs/IFRService/IRObject_i.h:

          Fixed a bug in entering a nested struct or union into the IFR.
          The IFR create_* methods for structs and unions require a
          list of members to be passed. If one of the members is also
          defined in the same scope, there is a problem because the
          scope itself hasn't been defined yet in the IFR. So an entry
          for the nested member must be created in a temporary scope
          and then moved into the proper enclosing scope once that
          scope is itself entered into the IFR. During this moving
          process, the keys of container and contained were getting
          mixed up due to a by-product of the switch to generic-servant
          implementation of the IFR a couple of years ago. Thanks to
          Simon Massey <simon.massey@prismtech.com> for reporting the
          problem and for sending in an example IDL file.

Tue Oct 26 11:14:22 2004  J.T. Conklin  <jtc@acorntoolworks.com>

        * orbsvcs/orbsvcs/Log/BasicLogFactory_i.cpp:
        * orbsvcs/orbsvcs/Log/EventLogFactory_i.cpp:
        * orbsvcs/orbsvcs/Log/LogMgr_i.cpp:
        * orbsvcs/orbsvcs/Log/LogMgr_i.h:
        * orbsvcs/orbsvcs/Log/NotifyLogFactory_i.cpp:
        * orbsvcs/orbsvcs/Log/RTEventLogFactory_i.cpp:

          Don't maintain a separate array of log id's, as it wasn't being
          updated when logs were removed, copied, etc.  Generate the list
          only when it is needed in TAO_LogMgr_i::list_logs_by_id().

Tue Oct 26 12:59:47 2004  Chad Elliott  <elliott_c@ociweb.com>

        * orbsvcs/orbsvcs/HTIOP.mpc:
        * orbsvcs/orbsvcs/HTIOP/HTIOP_Acceptor.h:
        * orbsvcs/orbsvcs/HTIOP/HTIOP_Acceptor_Impl.h:
        * orbsvcs/orbsvcs/HTIOP/HTIOP_Completion_Handler.h:
        * orbsvcs/orbsvcs/HTIOP/HTIOP_Connection_Handler.h:
        * orbsvcs/orbsvcs/HTIOP/HTIOP_Connector.h:
        * orbsvcs/orbsvcs/HTIOP/HTIOP_Connector_Impl.h:
        * orbsvcs/orbsvcs/HTIOP/HTIOP_Endpoint.h:
        * orbsvcs/orbsvcs/HTIOP/HTIOP_Factory.h:
        * orbsvcs/orbsvcs/HTIOP/HTIOP_Factory.cpp:
        * orbsvcs/orbsvcs/HTIOP/HTIOP_Profile.h:
        * orbsvcs/orbsvcs/HTIOP/HTIOP_Transport.h:
        * orbsvcs/tests/HTIOP/AMI/HTIOP_AMI.mpc:
        * orbsvcs/tests/HTIOP/BiDirectional/HTIOP_BiDirectional.mpc:
        * orbsvcs/tests/HTIOP/Hello/HTIOP_Hello.mpc:
        * orbsvcs/tests/HTIOP/Hello/Hello.h:
        * orbsvcs/tests/HTIOP/Hello/server.cpp:

          Fixed many fuzz errors.

Tue Oct 26 11:06:35 2004  Chad Elliott  <elliott_c@ociweb.com>

        * orbsvcs/IFR_Service/IFR_Service.mpc:

          Put ifr_client back in the project inheritence for the TAO_IFR_EXE
          project.  It links in the TAO_IFR_BE library which uses the
          ifr_client base project.  This will ensure that staticly built exe
          will get the right libraries at link time.

Tue Oct 26 10:47:51 2004  Phil Mesnier  <mesnier_p@ociweb.com>

        * orbsvcs/orbsvcs/HTIOP/HTIOP_Acceptor.cpp:
        * orbsvcs/orbsvcs/HTIOP/HTIOP_Acceptor_Impl.cpp:
        * orbsvcs/orbsvcs/HTIOP/HTIOP_Acceptor_Impl.h:
        * orbsvcs/orbsvcs/HTIOP/HTIOP_Completion_Handler.cpp:
        * orbsvcs/orbsvcs/HTIOP/HTIOP_Completion_Handler.h:
          Fixed the inconsistencies in the construction of connection
          handlers. The void* argument was removed from the base
          connection handler ctor, this change completes propogation of
          this removal throughout the HTIOP package. The intermediate
          completion handler is created by the acceptor, it is required to
          first parse the incoming HTTP request to determine if this is a
          new client connection, or a re-establishment of a connection
          from an earlier client. Such assessment is required since the
          proxy issuing a request may close a connection at any time, even
          one which "times out" waiting for the server to send a reply.

Tue Oct 26 10:12:38 2004  Phil Mesnier  <mesnier_p@ociweb.com>

        * orbsvcs/orbsvcs/HTIOP/HTIOP_Factory.cpp:
        * orbsvcs/orbsvcs/HTIOP/HTIOP_Factory.h:
          Fixed the service config factory declaration/definition macros
          to use the newly defined ACE_FACTORY_NAMESPACE_DEFINE to get the
          right _make_ function name.

        * tests/HTIOP/AMI/#svc.conf#:
        * tests/HTIOP/AMI/AMI.mwc:
        * tests/HTIOP/BiDirectional/BiDirectional.mwc:
          Removed redundant or inadvertantly committed files.

        * tests/HTIOP/AMI/AMI.mpc:
        * tests/HTIOP/AMI/HTIOP_AMI.mpc:
        * tests/HTIOP/BiDirectional/BiDirectional.mpc:
        * tests/HTIOP/BiDirectional/HTIOP_BiDirectional.mpc:
        * tests/HTIOP/Hello/Hello.mpc:
        * tests/HTIOP/Hello/HTIOP_Hello.mpc:
          Renamed the mpc files to avoid project name collisions.

        * tests/HTIOP/AMI/svc.conf:
        * tests/HTIOP/BiDirectional/outside.conf:
        * tests/HTIOP/Hello/outside.conf:
        * tests/HTIOP/Hello/svc.conf:
          Removed inacurate comments.

Tue Oct 26 10:02:26 2004  Chad Elliott  <elliott_c@ociweb.com>

        * orbsvcs/orbsvcs/HTIOP/HTIOP_Completion_Handler.h:
        * orbsvcs/orbsvcs/HTIOP/HTIOP_Profile.h:
        * orbsvcs/orbsvcs/HTIOP/HTIOP_Transport.h:

          Changed the include path to fix compile errors.

        * orbsvcs/orbsvcs/HTIOP/HTIOP_Endpoint.cpp:
        * orbsvcs/orbsvcs/HTIOP/HTIOP_Profile.cpp:

          Added include of ace/os_include/os_netdb.h to get MAXHOSTNAMELEN.

Mon Oct 25 23:19:41 2004  J.T. Conklin  <jtc@acorntoolworks.com>

        * orbsvcs/orbsvcs/DsLogAdmin.mpc:

          Changed DsLogAdmin_Serv project to omit Log/PersistantStore.cpp.
          As of this writing, there is no way to configure the logging
          service to use the persistant version of the log record store,
          so it only serves to bloat the shared library/DLL.

        * orbsvcs/orbsvcs/Log/Log_Constraint_Visitors.cpp:
        * orbsvcs/orbsvcs/Log/Log_Constraint_Visitors.h:

          Changed hash map to store Any_var's instead of Any pointers to
          avoid memory leak.

        * orbsvcs/orbsvcs/Log/Log_i.cpp:

          Changed TAO_Log_i::remove_old_records() to return if
          max_record_life_ == 0, which indicates infinite lifetime.

Mon Oct 25 23:30:26 2004  Phil Mesnier  <mesnier_p@ociweb.com>

        * NEWS:
          Added a comment regarding HTIOP.

Mon Oct 25 23:13:31 2004  Phil Mesnier  <mesnier_p@ociweb.com>

        * orbsvcs/orbsvcs/HTIOP:
        * orbsvcs/orbsvcs/HTIOP.mpc:
        * orbsvcs/orbsvcs/HTIOP.idl:
          A new pluggable protocol (HTTP Tunneling IOP) that works over
          HTBP. HTBP is described in $ACE_ROOT/ace/HTBP/README. HTIOP is
          described in orbsvcs/orbsvcs/HTIOP/README.txt.

        * orbsvcs/tests/HTIOP:
          A new collection of tests for exercising HTIOP.

Mon Oct 25 14:18:26 2004  Irfan Pyarali  <irfan@oomworks.com>

        * tao\RTCORBA\RT_ORBInitializer.cpp:

          Fixed the <rt_poa_factory_name_> and the
          <rt_poa_factory_directive_> from "TAO_RT_POA" to
          "TAO_RT_Object_Adapter_Factory".

        * tao\ORB_Core.cpp:

          Fixed the <poa_factory_name_> and the <poa_factory_directive_>
          from "TAO_POA" to "TAO_Object_Adapter_Factory".

        * tao/PortableServer/Object_Adapter.cpp:

          Service name of TAO_Object_Adapter_Factory was changed from
          "PortableServer" to "TAO_Object_Adapter_Factory".

        * tao/RTPortableServer/RT_Object_Adapter_Factory.cpp:

          Service name of TAO_RT_Object_Adapter_Factory was changed from
          "RTPortableServer" to "TAO_RT_Object_Adapter_Factory".

Mon Oct 25 12:48:37 2004  Jeff Parsons <j.parsons@vanderbilt.edu>

        * TAO_IDL/be/be_global.cpp:

          Changed the behavior of the -o option to create the specified
          directory if it does not already exist. Only one level of
          directory can be created with this option (any path prefix
          included must already exist). If the specified directory
          already exists, no action is taken. This fix closes
          [BUGID:291].

        * docs/releasenotes.index.html:
        * docs/compiler.html:

          Updated IDL compiler documentation with the new behavior.

Mon Oct 25 11:33:18 2004  Dale Wilson  <wilson_d@ociweb.com>

        * orbsvcs/tests/Notify/Blocking/notify.conf:
          Extra character at end of line causes "parse error"
          No newline @ end of file.

Mon Oct 25 10:04:56 2004  Jeff Parsons <j.parsons@vanderbilt.edu>

        * orbsvcs/IFR_Service/IFR_Service.mpc:

          Removed some unnecessary dependencies.

        * orbsvcs/IFR_Service/be_produce.cpp:

          Uncommented a line that creates a holding scope for
          struct/union/exception members that must be created
          before the container scope, then moved in. Thanks to
          Simon Massey <simon.massey@prismtech.com> for pointing
          out this oversight, probably a leftover of some long-
          finished debugging work.

Fri Oct 22 17:43:45 2004  Olli Savia  <ops@iki.fi>

        * tests/Param_Test/helper.cpp:
        * tests/Param_Test/options.cpp:
          Added explicit static template member instantiations.

Fri Oct 22 08:18:16 2004  Chad Elliott  <elliott_c@ociweb.com>

        * tests/Muxed_GIOP_Versions/server.cpp:

          Parameterized the number of self abuse client threads.

        * tests/Muxed_GIOP_Versions/run_test.pl:

          Cut the number of self abuse client threads from 10 to 5.  Many of
          the nightly test systems can't handle it.

Thu Oct 21 17:55:19 2004  Irfan Pyarali  <irfan@oomworks.com>

          The following changes allow the user to specify the endpoints
          that will be used by thread pools and lanes.  Previously, only
          default endpoints were supported.  With this addition, POAs that
          use thread pools will be able to support persistent references.
          Many thanks to Lothar Werzinger <lothar@xcerla.com> for helping
          with this and for providing the initial patches.

        * tao/params.{h,cpp}:

          The endpoints were stored in an unbounded queue.  Since we are
          adding the capability to specify and store endpoints for each
          thread lane, this one queue is insufficient.  One solution would
          be to have a mapping to lane id to an unbounded queue of
          endpoints.  The only drawback of this is that it would increase
          the footprint of TAO since a new kind of map would be required.
          To circumvent this issue, the map is going to be a parameterized
          with strings.  This kind of map is already used in TAO so no
          footprint increase will occur.  The endpoints will be
          concatinated into one big string, and then when needed,
          converted into an unbounded queue of endpoints.

          The following methods were effected by this change:

          - endpoints(string) is now add_endpoints().
          - endpoints(void) is now get_endpoint_set().
          - add_endpoint() is removed.
          - parse_endpoints() is now parse_and_add_endpoints()

        * tao/Acceptor_Registry.{h,cpp} (open):

          - The Acceptor Registry no longer looks up the <endpoint_set> it
          is going to use.  This set is now passed into open().

          - Evaluation and parsing of the TAO_ORBENDPOINT environment
          variable is now conducted in ORB_init() instead of in open()
          since this environment variable only effects the ORB endpoints
          of the default lane.

          - No need to call reset() on the endpoint set.  This is done
          automatically done in the destructor.

          - <ignore_address> was changed to a bool from an int.

        * tao/ORB_Core.cpp (init):

          - -ORBEndpoint and -ORBListenEndpoints options only apply to the
          default lane.

          - -ORBLaneEndpoint and -ORBLaneListenEndpoints options apply to
          the thread lanes.

          - Evaluation and parsing of the TAO_ORBENDPOINT environment
          variable is now conducted in ORB_init() instead of in the
          Acceptor Registry since this environment variable only effects
          the ORB endpoints of the default lane.

        * tao/RTPortableServer/RT_Policy_Validator.cpp:

          - TAO_POA_RT_Policy_Validator::extract_acceptor_registry() was
          flawed for thread pools with multiple lanes.  It picked the
          Acceptor Registry from the first lane on the assumption that all
          lanes had similar acceptor registries.  This assumption is no
          longer true.

          - <acceptor_registry_> is no longer kept as a member.  Also note
          that though <thread_pool_> is kept as a member, it is
          reevaluated every time policies are parsed.

          - validate_lifespan() is removed since thread pools now support
          specification of endpoint and hence persistent references.

          - In validate_server_protocol(), if the server protocol policy
          has not been specified, then add a server policy that reflects
          the protocols supported by the acceptor registries of the POA's
          thread pool.

          - In validate_server_protocol(), acceptor registries in all the
          thread lanes should be evaluated.

          - server_protocol_policy_from_thread_pool() and
          server_protocol_policy_from_acceptor_registry() were added.

        * tao/RTCORBA/Thread_Pool.cpp (open):

          Look up the endpoints for a lane. If endpoints are not specified
          for a lane, use the endpoints specified for the default lane but
          ignore their addresses. If endpoints are specified for a lane,
          use them with their addresses.

        * tao/PortableServer/Object_Adapter.cpp (open):

          Validation of Root POA policies was missing.  It was added.

        * tao/Default_Thread_Lane_Resources_Manager.cpp (open_default_resources):
        * tao/RTCORBA/RT_Thread_Lane_Resources_Manager.cpp (open_default_resources):

          Look of endpoints for the default lane is moved here instead of
          being done in the Acceptor Registry.

        * tao/Protocols_Hooks.h:
        * tao/Default_Protocols_Hooks.{h,cpp}:
        * tao/RTCORBA/RT_Protocols_Hooks.{h,cpp}:
        * tao/PortableServer/Object_Adapter.{h,cpp} (open):

          It doesn't make sense to set a server protocol policy as an ORB
          default since each POA's default server protocol should be the
          protocols supported by its Acceptor Registry.  Therefore,
          set_default_server_protocol_policy() is no longer needed and is
          removed.

        * tao/RTPortableServer/RT_POA.cpp (key_to_stub_i):

          Removal of the flawed function
          TAO_POA_RT_Policy_Validator::extract_acceptor_registry() forced
          a rewrite of some code here.

        * tao\orbconf.h (TAO_DEFAULT_LANE):

          Macro for the default lane name used when storing endpoints.

        * tao/RTCORBA/RT_Policy_i.cpp (_tao_scope):

          The TAO_POLICY_CLIENT_EXPOSED scope of PriorityModelPolicy was
          removed.  The following comment in the _tao_scope() states the
          issue correctly:

          // Note that this policy is propogated to the client even though
          // it is not specified here.  The reason for this is that the
          // server priority field is set dynamically depending on the model
          // and the servant's priority.  Therefore, it can't be simply
          // copied to the list of client exposed policies.

          So I am not sure why I added this scope back in Aug 2002.  With
          this addition, the PriorityModelPolicy gets added twice, with
          one of the additions being incorrect.

        * tao/Strategies/DIOP_Acceptor.cpp (open_default):

          ACE_DEFAULT_SERVER_PORT should not be fixed. 0 should be used,
          similar to what happens in IIOP.

        * tao/PortableServer/Object_Adapter.cpp:

          Service name of TAO_Object_Adapter_Factory was changed from
          "TAO_POA" to "PortableServer".

        * tao/RTPortableServer/RT_Object_Adapter_Factory.cpp:

          Service name of TAO_RT_Object_Adapter_Factory was changed from
          "TAO_RT_POA" to "RTPortableServer".

        * tests/RTCORBA/Server_Protocol:

          Server policy is checked at the Root POA instead of ORB default
          policies.

        * tests/RTCORBA/Persistent_IOR:

          Updated test to check that persistent POAs are properly
          supported even when being used with thread pools and lanes.

        * docs/Options.html:

          Updated documentation to explain new -ORBLaneListenEndpoints and
          -ORBLaneEndpoint options.

Thu Oct 21 13:20:59 2004  Iliyan Jeliazkov  <jeliazkov_i@ociweb.com>

       * tests/Big_Reply/Client_Task.cpp:
         Fixed a memory leak which caused the test to fail when memory
         was exausted before the test had completed.

Thu Oct 21 10:58:25 2004  Chad Elliott  <elliott_c@ociweb.com>

        * orbsvcs/LoadBalancer/LoadManager.cpp:
        * orbsvcs/LoadBalancer/LoadMonitor.cpp:

          Wait for the signal handler thread before exiting.

Thu Oct 21 10:49:40 2004  Jeff Parsons <j.parsons@vanderbilt.edu>

        * TAO_IDL/be/be_visitor_ccm_pre_proc.cpp:

          Modified generation of implied IDL for event consumer interfaces
          to always inherit from EventConsumerBase regardless of
          whether the associated eventtype is derived or not. This makes
          sense not only from the implementer's point of view, but also
          since it avoids a double chain of inheritance (eventtypes +
          interfaces). Thanks to Gary Duzan <gduzan@bbn.com> for
          reporting the bug. This fix closes [BUGID:1964] and [BUGID:1965].

Thu Oct 21 08:37:34 2004  Chad Elliott  <elliott_c@ociweb.com>

        * orbsvcs/Naming_Service/Naming_Server.cpp:
        * orbsvcs/orbsvcs/Naming/Storable_Naming_Context.cpp:
        * orbsvcs/orbsvcs/Naming/Storable_Naming_Context_Activator.h:

          Switched #includes from <> to "".

Wed Oct 20 15:41:24 MST 2004  Trevor Fields  <fields_t@ociweb.com>

        * orbsvcs/examples/ImR/Combined_Service/ImR_Combined_Service.mpc:

          Changed the projects so the ones using test.idl will not be compiled
          in parallel.

Wed Oct 20 14:25:59 2004  Iliyan Jeliazkov  <jeliazkov_i@ociweb.com>

        * orbsvcs/orbsvcs/SSLIOP/SSLIOP_Factory.h:
        * orbsvcs/orbsvcs/SSLIOP/SSLIOP_Factory.cpp:

          Windows paths often have embedded colons (':'), which causes
          problems in the case of parsing the parameters for the -SSL*
          options on that platform.

Wed Oct 20 13:55:13 2004  Chad Elliott  <elliott_c@ociweb.com>

        * orbsvcs/tests/AVStreams/Simple_Three_Stage/sender.cpp:

          Wait for the distributer to start up before beginning to send the
          test file contents.  This test still has a shutdown problem, but
          I'm not sure if it's in the distributer or the AV core.

Wed Oct 20 19:03:01 2004  Olli Savia  <ops@iki.fi>

        * examples/POA/DSI/Database_i.cpp:
        * examples/RTCORBA/Activity/Activity.cpp:
        * examples/RTCORBA/Activity/Task_Stats.cpp:
        * examples/RTScheduling/Fixed_Priority_Scheduler/test.cpp:
        * examples/RTScheduling/MIF_Scheduler/test.cpp:
        * examples/RTScheduling/Task_Stats.cpp:
        * orbsvcs/tests/AVStreams/Modify_QoS/sender.cpp:
        * orbsvcs/tests/AVStreams/Multicast/ftp.cpp:
        * orbsvcs/tests/AVStreams/Multicast/server.cpp:
        * orbsvcs/tests/AVStreams/Multicast_Full_Profile/ftp.cpp:
        * orbsvcs/tests/AVStreams/Multicast_Full_Profile/server.cpp:
        * orbsvcs/tests/AVStreams/Multiple_Flows/receiver.cpp:
        * orbsvcs/tests/AVStreams/Multiple_Flows/sender.cpp:
        * orbsvcs/tests/AVStreams/Pluggable/ftp.cpp:
        * orbsvcs/tests/AVStreams/Pluggable_Flow_Protocol/sender.cpp:
        * orbsvcs/tests/AVStreams/Simple_Three_Stage/distributer.cpp:
        * orbsvcs/tests/AVStreams/Simple_Three_Stage/sender.cpp:
        * orbsvcs/tests/AVStreams/Simple_Two_Stage/sender.cpp:
        * orbsvcs/tests/AVStreams/Simple_Two_Stage_With_QoS/sender.cpp:
        * orbsvcs/tests/Notify/lib/LookupManager.cpp:
        * orbsvcs/tests/Notify/lib/Periodic_Supplier.cpp:
        * performance-tests/Cubit/TAO/MT_Cubit/Globals.cpp:
          Added explicit static template member instantiations.

Wed Oct 20 10:28:52 2004  Chad Elliott  <elliott_c@ociweb.com>

        * orbsvcs/orbsvcs/SSLIOP/SSLIOP_Util.cpp:

          Return zero from the ACE_CHECK_RETURN.  The method returns a
          pointer and should return zero for a failure.

Wed Oct 20 10:23:49 2004  Chad Elliott  <elliott_c@ociweb.com>

        * orbsvcs/orbsvcs/SSLIOP/SSLIOP_Connection_Handler.cpp:

          Added env macros before invoking
          client_protocol_properties_at_orb_level and
          server_protocol_properties_at_orb_level.

Wed Oct 20 10:01:52 2004  Chad Elliott  <elliott_c@ociweb.com>

        * orbsvcs/orbsvcs/FtRtEvent/ClientORB/FTRT_ClientORB_Interceptor.cpp:
        * orbsvcs/orbsvcs/FtRtEvent/EventChannel/FTEC_Group_Manager.cpp:
        * orbsvcs/orbsvcs/FtRtEvent/EventChannel/ForwardCtrlServerInterceptor.cpp:
        * orbsvcs/orbsvcs/FtRtEvent/EventChannel/Replication_Service.cpp:
        * orbsvcs/orbsvcs/FtRtEvent/EventChannel/Set_Update_Interceptor.cpp:
        * orbsvcs/tests/EC_Custom_Marshal/ECM_Consumer.cpp:
        * orbsvcs/tests/EC_Custom_Marshal/ECM_Supplier.cpp:
        * orbsvcs/tests/EC_Throughput/ECT_Supplier.cpp:
        * performance-tests/Cubit/TAO/IDL_Cubit/Cubit_Client.cpp:

          Added support for when TAO_NO_COPY_OCTET_SEQUENCES is defined to
          be zero.  Certain forms of unbounded sequence constructors and
          replace methods are not available in this situation.

        * tests/OctetSeq/test_i.cpp:

          Moved variable inside TAO_NO_COPY_OCTET_SEQUENCES to avoid a build
          warning.

Wed Oct 20 06:39:07 2004  Chad Elliott  <elliott_c@ociweb.com>

        * performance-tests/Protocols/sender.cpp:

          Modified the use of ACE_UINT64_DBLCAST_ADAPTER within a debug
          message which should fix compile errors wit vc6.

Tue Oct 19 20:17:10 2004  Carlos O'Ryan  <coryan@atdesk.com>

        * tests/Sequence_Unit_Tests/Bounded_Simple_Types.cpp:
        * tests/Sequence_Unit_Tests/Bounded_String.cpp:
        * tests/Sequence_Unit_Tests/Unbounded_Simple_Types.cpp:
        * tests/Sequence_Unit_Tests/Unbounded_String.cpp:
          Fixed memory leak in the test.

        * tests/Sequence_Unit_Tests/range_checking.hpp:
          Document the range checking traits in more detail.
          Add support so users can define their own specializations (read
          documentation) for the traits at compile-time.

        * tests/Sequence_Unit_Tests/bounded_string_sequence_ut.cpp:
          Use the TAO_USER_DEFINED_SEQUENCE_RANGE_CHECKING_INCLUDE (ugh)
          to define the test version of the range_checking traits.

        * tests/Sequence_Unit_Tests/string_traits.hpp:
        * tests/Sequence_Unit_Tests/string_sequence_element.hpp:
          Remove extra traits.  There was nothing customizable, at least
          nothing that I could foresee, and it just complicated the code.

Tue Oct 19 13:56:54 2004  Jeff Parsons <j.parsons@vanderbilt.edu>

        * examples/Kokyu_dsrt_schedulers/fp_example/test_i.cpp (test_method):

          Changed an ACE_UINT64 cast to ACE_UINT32, the correct type to be
          passed to the Task_Stats utility class.

        * orbsvcs/examples/LoadBalancing/RPS_Monitor.cpp:

          Added an explicit cast to CORBA::Float to eliminate VC warnings
          about the implicit cast from unsigned long.

Tue Oct 19 12:02:04 2004  Chad Elliott  <elliott_c@ociweb.com>

        * performance-tests/Protocols/sender.cpp:

          Modified the to_seconds() function to always use the
          ACE_UINT64_DBLCAST_ADAPTER macro.  The macro should work in all
          cases including vc6.

Mon Oct 18 13:45:21 2004  Chad Elliott  <elliott_c@ociweb.com>

        * orbsvcs/orbsvcs/PortableGroup/UIPMC_Wait_Never.cpp:

          Modification to allow Mcast connections to process upcalls.

Mon Oct 18 18:28:23 2004  Olli Savia  <ops@iki.fi>

        * orbsvcs/orbsvcs/AV/AV_Core.cpp:
        * orbsvcs/orbsvcs/AV/sfp.cpp:
        * orbsvcs/tests/AVStreams/Asynch_Three_Stage/distributer.cpp:
        * orbsvcs/tests/AVStreams/Asynch_Three_Stage/sender.cpp:
        * orbsvcs/tests/AVStreams/Bidirectional_Flows/receiver.cpp:
        * orbsvcs/tests/AVStreams/Bidirectional_Flows/sender.cpp:
        * orbsvcs/tests/AVStreams/Component_Switching/distributer.cpp:
        * orbsvcs/tests/AVStreams/Component_Switching/sender.cpp:
        * orbsvcs/tests/AVStreams/Full_Profile/ftp.cpp:
        * orbsvcs/tests/AVStreams/Full_Profile/server.cpp:
          Added explicit static template member instantiations.

Sat Oct 16 18:40:59 2004  J.T. Conklin  <jtc@acorntoolworks.com>

        * orbsvcs/Logging_Service/Basic_Logging_Service/README:
        * orbsvcs/Logging_Service/Event_Logging_Service/README:
        * orbsvcs/Logging_Service/Notify_Logging_Service/README:
        * orbsvcs/Logging_Service/RTEvent_Logging_Service/README:

          Convert from DOS to UNIX text format.

Sat Oct 16 13:22:54 MST 2004 Trevor Fields  <fields_t@ociweb.com>

        * orbsvcs/ImplRepo_Service/ImplRepo_Service.mpc:
          ImR_Activator project changed to not be built when
          the ImR_Activator_IDL prerequisites are not built.

Fri Oct 15 20:37:19 2004  Balachandran Natarajan  <bala@dre.vanderbilt.edu>

        * tao/Synch_Invocation.cpp:
        * tao/Messaging/Asynch_Invocation.cpp:

          Fixed a subtle bug that prevented the service context list from
          being marshalled to the server. This was from the following
          change

          Mon Aug 23 21:40:36 2004  Balachandran Natarajan  <bala@dre.vanderbilt.edu>
          Thanks to Chad Elliott for pointing out the problem from our
          daily builds.

Fri Oct 15 13:08:06 2004  Chad Elliott  <elliott_c@ociweb.com>

        * examples/Simple/time-date/run_test.pl:

          Add '.' to the LD_LIBRARY_PATH, SHLIB_PATH, and LIBPATH to ensure
          that the client can find the Time_Date library.

Fri Oct 15 10:36:53 2004  J.T. Conklin  <jtc@acorntoolworks.com>

        * orbsvcs/orbsvcs/Makefile.am:

          Updated.

Fri Oct 15 10:53:03 2004  Jeff Parsons <j.parsons@vanderbilt.edu>

        * TAO_IDL/be_be_visitor_arg_traits.cpp:
        * TAO_IDL/be_include/be_visitor_arg_traits.h:
        * TAO_IDL/be/be_visitor_tmplinst.cpp:
        * TAO_IDL/be/be_visitor_tmplinst/arg_tmplinst.cpp:
        * TAO_IDL/be_include/be_visitor_tmplinst/arg_tmplinst.h:

          Added visit_home() method which delegates to the
          visit_interface() method. The TAO::Arg_Traits<>
          specialization was not getting done for home operations.
          Also added generation of corresponding explicit template
          instantiation.

Fri Oct 15 07:51:51 2004  J.T. Conklin  <jtc@acorntoolworks.com>

        * orbsvcs/orbsvcs/CosNaming.mpc:

          Fix tipo in last change, Naming/naming_export.h was added to
          Source_Files instead of Header_Files.

Fri Oct 15 01:46:54 2004  J.T. Conklin  <jtc@acorntoolworks.com>

        * orbsvcs/orbsvcs/CosEvent.mpc:
        * orbsvcs/orbsvcs/CosNaming.mpc:
        * orbsvcs/orbsvcs/CosNotification.mpc:
        * orbsvcs/orbsvcs/CosTrading.mpc:
        * orbsvcs/orbsvcs/DsEventLogAdmin.mpc:
        * orbsvcs/orbsvcs/DsLogAdmin.mpc:
        * orbsvcs/orbsvcs/DsNotifyLogAdmin.mpc:

          Added "*_export.h" to Header_Files for client stub libraries and
          "*_skel_export.h" to Header_Files for server skeleton libraries.

Tue Sep 28 14:13:01 2004  Yan Dai   <dai_y@ociweb.com>

        * orbsvcs/orbsvcs/Event/EC_Reactive_ConsumerControl.h:
        * orbsvcs/orbsvcs/Event/EC_Reactive_ConsumerControl.cpp:
        * orbsvcs/orbsvcs/Event/EC_Reactive_SupplierControl.h:
        * orbsvcs/orbsvcs/Event/EC_Reactive_SupplierControl.cpp:
          Correctly cancel timers in the shutdown methods. The timers
          are scheduled in the activate methods but an
          ACE_Reactor::remove_handler() call was being made rather
          than the correct ACE_Reactor::cancel_timer(). This was
          previously fixed for the CosEvent, but not for the RTEvent.
          This fixes an access violation in the orbsvcs/tests/Event/Basic
          test at shutdown on Solaris platforms.

Thu Oct 14 16:10:19 2004  Olli Savia  <ops@iki.fi>

        * orbsvcs/orbsvcs/Event/Memory_Pools.cpp:
        * orbsvcs/orbsvcs/FtRtEvent/EventChannel/GroupInfoPublisher.cpp:
        * orbsvcs/orbsvcs/IFRService/tmplinst.cpp:
          Added explicit static template member instantiations.

Wed Oct 13 13:13:39 MST 2004  Trevor Fields  <fields_t@ociweb.com>

        * orbsvcs/examples/ImR/Combined_Service/run_test.pl:
          Was incorrectly using the dynamic object names with the
          normal test.

Wed Oct 13 14:36:47 2004  Iliyan Jeliazkov  <jeliazkov_i@ociweb.com>

        * orbsvcs/orbsvcs/Shutdown_Utilities.cpp:
          Replaced an ad-hoc maximum signal number value with the NSIG
          define from signal.h.

Wed Oct 13 10:00:55 2004  Chris Cleeland  <cleeland_c@ociweb.com>

        * tests/Portable_Interceptors/Collocated/Service_Context_Manipulation/run_test.pl:
          This test will not work until a feature gets added to TAO.  But
          it's a pain to have to remember this all the time.  Therefore, I
          added an informational message to be printed by run_test.pl so
          that anybody who looks at the detailed output of the test will
          learn why it fails and, more importantly, why nobody should
          expect it to work for awhile.

Wed Oct 13 11:18:34 2004  Balachandran Natarajan  <bala@dre.vanderbilt.edu>

        * performance-tests/Protocols/sender.cpp:

          Fixed a nagging compiiler error in Win32 platforms.

Wed Oct 13 07:08:12 UTC 2004  Johnny Willemsen  <jwillemsen@remedy.nl>

        * tao/RTPortableServer/RT_Acceptor_Filters.h:
          Removed msvc specific pragma push/pop, not needed in this file

Tue Oct 12 20:10:06 MST 2004  Trevor Fields  <fields_t@ociweb.com>

        * orbsvcs/ImplRepo_Service/ImplRepo_Service.mpc:
          ImR_Locator_IDL project changed to not be built when
          the ImR_Activator_IDL prerequisites are not built.

Tue Oct 12 08:19:57 2004  Olli Savia  <ops@iki.fi>

        * tests/Typedef_String_Array/server.cpp:
          Added #include "ace/OS_NS_stdio.h" to pick ACE_OS::fopen() etc.

Mon Oct 11 18:31:10 2004  Irfan Pyarali  <irfan@oomworks.com>

        * examples/PluggableUDP/DIOP/README:

          Forgot to change TAO_TAG_UDP_PROFILE to TAO_TAG_DIOP_PROFILE in
          this file.

Mon Oct 11 17:46:48 2004  Irfan Pyarali  <irfan@oomworks.com>

        * tao/ORB_Constants.h:
        * CIAO/performance-tests/Protocols/Controller/Controller.cpp:
        * CIAO/performance-tests/Protocols/Sender/Sender_exec.cpp:
        * performance-tests/Protocols/distributor.cpp:
        * performance-tests/Protocols/sender.cpp:
        * tao/RTCORBA/RT_Policy_i.cpp:
        * tao/RTCORBA/RT_Protocols_Hooks.cpp:
        * tao/Strategies/DIOP_Acceptor.cpp:
        * tao/Strategies/DIOP_Connector.cpp:
        * tao/Strategies/DIOP_Endpoint.cpp:
        * tao/Strategies/DIOP_Factory.cpp:
        * tao/Strategies/DIOP_Profile.cpp:
        * tao/Strategies/DIOP_Transport.cpp:
        * tests/RTCORBA/Server_Protocol/server.cpp:
        * utils/catior/catior.cpp:
        * utils/nslist/nslist.cpp:

          TAO_TAG_UDP_PROFILE was changed to TAO_TAG_DIOP_PROFILE to make
          it consistent with the other profile tags.

Mon Oct 11 17:11:19 2004  Irfan Pyarali  <irfan@oomworks.com>

        * tao/RTCORBA/RT_Stub.cpp (effective_client_protocol):
        * tao/RTCORBA/RT_Invocation_Endpoint_Selectors.cpp (endpoint_from_profile):
        * tao/RTCORBA/RT_Endpoint_Utils.cpp (policy):
        * tao/Sync_Strategies.cpp (buffering_constraints_reached):

          Added expection handling code.

        * tao/ORB_Core.cpp (get_policy_including_current):

          Added missing env.

        * tao/Policy_Manager.h (PolicyManager):
        * tao/RTCORBA/RT_Stub.h (TAO_RT_Stub):
        * tao/Stub.h (TAO_Stub):

          Removed default values for environment variables in
          get_policy(), get_cached_policy(), set_policy_overrides(),
          get_policy_overrides(), effective_priority_banded_connection()
          and effective_client_protocol().

        * tao/ORB_Core.cpp (default_buffering_constraint):

          Removed this method since it is no longer used or needed.

        * tao/Strategies/DIOP_Connection_Handler.cpp (open):
        * tao/Strategies/SCIOP_Connection_Handler.cpp (open):
        * tao/Strategies/SHMIOP_Connection_Handler.cpp (open):
        * tao/Strategies/UIOP_Connection_Handler.cpp (open):
        * tao/IIOP_Connection_Handler.cpp (open):

          Added return -1 in case of exceptions.  Also figure out the
          <client> variable using the correct information.

        * tao/RTCORBA/RT_Policy_i.h (TAO_Protocol_Properties_Factory):
        * tests/Exposed_Policies/Policy_Tester.cpp (create_objects):

          Reverted change Bala made on:

          Fri Oct  1 17:25:29 2004  Balachandran Natarajan  <bala@dre.vanderbilt.edu>

          The correct change is to fix the test code in Policy_Tester.cpp.

Mon Oct 11 14:42:46 2004  Dale Wilson  <wilson_d@ociweb.com>

        * tao/Codeset_Manager.cpp:
        * tao/Codeset_Translator_Factory_T.h:
        * tao/UTF16_BOM_Factory.h:
        * tao/UTF16_BOM_Factory.cpp:
        * tao/UTF16_BOM_Translator.h:
        * tao/UTF16_BOM_Translator.cpp:
          Bugzilla 1902: The ORB released with Java JDK 1.4.x has an
          error in the way it marshals wide strings when they are
          contained in sequence of structures.  Customers were
          blaming TAO for the incompatibility.  This change
          provides a service config option to force compatibility
          with the JDK ORB.  It does not have any impact on
          compatibility or performance with other orbs.

Mon Oct 11 10:26:59 2004  Venkita Subramonian  <venkita@cs.wustl.edu>

        * orbsvcs/orbsvcs/Sched/Reconfig_Scheduler_T.{cpp,h}:
        * orbsvcs/orbsvcs/Sched/Reconfig_Sched_Utils_T.{cpp,h}:

          Added utilization bound checking to the Reconfig scheduler. If
          the total critical utilization exceeds the critical utilization
          threshold or the total non-critical utilization exceeds the
          non-critical utilization threshold, then the anomaly set is
          filled with an appropriate error message. Thanks to Honorato
          Saavedra <natodf@yahoo.com> for pointing this out.

Sat Oct  9 19:03:53 2004  Balachandran Natarajan  <bala@dre.vanderbilt.edu>

        * tests/Typedef_String_Array/testImpl.cpp:

          Fixed a warning in our daily builds.

Sat Oct  9 12:38:38 2004  Huang-Ming Huang <hh1@cs.wustl.edu>

        * orbsvcs/orbsvcs/FtRtEvent/EventChannel/FTEC_ProxyConsumer.cpp:
          Fixed incorrect use of activate_object_with_id()

        * orbsvcs/orbsvcs/FtRtEvent/EventChannel/FTEC_Event_Channel.cpp:
        * orbsvcs/orbsvcs/FtRtEvent/Utils/FTEC_Gateway.cpp:
        * orbsvcs/orbsvcs/FTRTEvent/Utils/activate_with_id.h:
          Changed the second paramter of activate_object_with_id() from
          POA_var to POA_ptr.  Thanks to Yuk Ming Kwok <mkwok@cisco.com>
          for reporting this.

Thu Oct  7 16:07:36 2004  Jeff Parsons <j.parsons@vanderbilt.edu>

        * tao/Typecode.h:

          Added patch sent in by Frank Pilhofer <fp@mc.com> that makes
          a guarded explicit template instantiation of
          TAO_Unbounded_Pseudo_Sequence<CORBA::TypeCode>, as a
          workaround for the VC 7.1 bug described in
          http://support.microsoft.com/default.aspx?scid=kb;en-us;309801.

Thu Oct  7 11:39:46 2004  Chad Elliott  <elliott_c@ociweb.com>

        * tests/Typedef_String_Array/client.cpp:
        * tests/Typedef_String_Array/run_test.pl:
        * tests/Typedef_String_Array/server.cpp:
        * tests/Typedef_String_Array/test.idl:
        * tests/Typedef_String_Array/testImpl.h:
        * tests/Typedef_String_Array/testImpl.cpp:
        * tests/Typedef_String_Array/typedef_string_array.mpc:

          Added a test for the following case:

           typedef string MyString;
           typedef MyString ArrayOfString[15];

          In the early 1.3.x days, the tao_idl compiler would not generate
          correct CDR operators that took into account the primitive base
          type of the array.

Thu Oct  7 11:25:51 2004  john_c  <john_c@ociweb>

        * TAO\tao\Object_KeyC.cpp:
          Extended 'decode_string_to_sequence' to successfully parse
          URL style IOR's generated from pre 1.4 TAO releases. Earlier
          the escape charecter was '\\' (currently '%').

Tue Oct  5 20:01:17 2004  Carlos O'Ryan  <coryan@atdesk.com>

        * tests/Sequence_Unit_Tests/string_traits_base.hpp:
          Some platforms apparently support bool, namespaces, templates
          but not wchar_t.  Sounds more likely that the platform supports
          wchar_t but the ACE configuration is out of date.  In any case,
          I tweaked the code so it would compile when ACE_HAS_WCHAR (and
          its sibling ACE_HAS_XPG4_MULTIBYTE_CHAR) are not defined.

Tue Oct  5 15:27:45 2004  Dale Wilson  <wilson_d@ociweb.com>

        * orbsvcs/orbsvcs/FtRtEvent/EventChannel/FTEC_ProxyConsumer.h:
        * orbsvcs/orbsvcs/FtRtEvent/EventChannel/Replication_Service.h:
        * orbsvcs/orbsvcs/FtRtEvent/EventChannel/Replication_Strategy.h:
          Build problems with exception=0
          Can't use ACE_ENV_ARG_DECL_WITH_DEFAULTS in function pointer typedef

Mon Oct  4 12:52:21 2004  Chad Elliott  <elliott_c@ociweb.com>

        * orbsvcs/tests/CosEvent/Basic/MT_Disconnect.h:
        * orbsvcs/tests/CosEvent/Basic/MT_Disconnect.cpp:

          Prefixed Task class with MTD_ to avoid name collisions with
          Integrity system header files.

Mon Oct  4 12:32:05 2004  Balachandran Natarajan  <bala@dre.vanderbilt.edu>

        * tao/Transport_Cache_Manager.cpp:

          Use the ORBConnectionCacheMax value within the transport cache
          manager. Added an extra check to disallow setting the value to
          0. Thanks to Vladislav Zverev <vladislav at gtss dot spb dot ru>
          for reporting the problem.

        * tao/default_resource.cpp:

          Cosmetic fix.

Mon Oct  4 11:59:43 2004  Balachandran Natarajan  <bala@dre.vanderbilt.edu>

        * orbsvcs/orbsvcs/PortableGroup/UIPMC_Wait_Never.cpp:
        * orbsvcs/orbsvcs/PortableGroup/UIPMC_Wait_Never.h:

          Replicated the changes mentioned below to the above wait
          strategy.

Sun Oct  3 20:24:51 2004  Balachandran Natarajan  <bala@dre.vanderbilt.edu>

        * tao/Wait_On_Leader_Follower.cpp:
        * tao/Wait_On_Leader_Follower.h:
        * tao/Wait_On_Reactor.cpp:
        * tao/Wait_On_Reactor.h:
        * tao/Wait_On_Read.cpp:
        * tao/Wait_On_Read.h:
        * tao/Wait_Strategy.h:

          Changed the method non_blocking () to return a boolean and
          improved its const correctness.

Sun Oct  3 19:28:08 2004  Olli Savia  <ops@iki.fi>

        * utils/catior/catior.cpp:
          Replaced isdigit() and isxdigit() with ACE versions.

Sun Oct  3 13:38:01 2004  Balachandran Natarajan  <bala@dre.vanderbilt.edu>

        * tao/Wait_Strategy.h:

          Added a new pure virtual method, can_process_upcalls ().

        * tao/Wait_On_LF_No_Upcall.cpp:
        * tao/Wait_On_LF_No_Upcall.h:
        * tao/Wait_On_Leader_Follower.cpp:
        * tao/Wait_On_Leader_Follower.h:
        * tao/Wait_On_Reactor.cpp:
        * tao/Wait_On_Reactor.h:
        * tao/Wait_On_Read.cpp:
        * tao/Wait_On_Read.h:

          Implementation for can_process_upcalls (). This method returns
          true for all the Wait strategies but for
          Wait_On_LF_No_Upcall. Only the Wait_On_LF_No_Upcall returns
          false since the semantics of the class are so.

        * tao/Connection_Handler.cpp:

          Use the can_process_upcalls () in handle_input_eh () instead of
          the checks in place there. This check invariably resulted in a
          TSS access which seem to slow down things quite a bit. This was
          based on my profiler. I am not sure whether this is going to
          show up any conclusive results in our stat pages.

        * tao/Transport.h:
        * tao/Transport.inl:

          Removed the acts_as_server () call since the functionality is
          replaced by the new pure virtual method in Wait_Strategy.

Sat Oct  2 17:03:42 2004  Balachandran Natarajan  <bala@dre.vanderbilt.edu>

        * tao/PortableServer/Default_Policy_Validator.cpp:

          Should be tha last (famous last word) of the remaining problems
          with wrong macro usage.

Sat Oct  2 16:28:06 2004  Balachandran Natarajan  <bala@dre.vanderbilt.edu>

        * performance-tests/Protocols/receiver.cpp:
        * performance-tests/Protocols/sender.cpp:
        * performance-tests/Protocols/distributor.cpp:

          Fixed completely busted usage environment macros. The builds
          should start getting cleared soon.

Sat Oct  2 13:09:00 2004  Balachandran Natarajan  <bala@dre.vanderbilt.edu>

        * orbsvcs/PSS/PSDL.mpc:

          Added requires += dummy for the following reasons (1) PSS is
          completely broken and  requires lot of work and (2) the MPC file
          has an issue which we need to report it to Chad. In the meantime
          I am commenting the test out from the builds so that we could
          save some CPU cycles for an unusable thingy.

Sat Oct  2 03:24:26 2004  Balachandran Natarajan  <bala@dre.vanderbilt.edu>

        * tao/IIOP_Connection_Handler.cpp:
        * tao/Messaging/Connection_Timeout_Policy_i.cpp:
        * tao/Messaging/Messaging_Policy_i.cpp:
        * tao/RTCORBA/RT_Protocols_Hooks.cpp:
        * tao/RTPortableServer/RT_POA.cpp:
        * tao/RTPortableServer/RT_Policy_Validator.cpp:
        * tao/RTPortableServer/RT_Servant_Dispatcher.cpp:
        * tao/Strategies/DIOP_Connection_Handler.cpp:
        * tao/Strategies/SCIOP_Connection_Handler.cpp:
        * tao/Strategies/SHMIOP_Connection_Handler.cpp:
        * tao/Strategies/UIOP_Connection_Handler.cpp:

          Calls to get_cached_policy, client_protocol_properties_at_orb_level,
          and server_protocol_properties_at_orb_level need environmnet
          variables to be passed. This should fix a bunch of compilation
          errors in builds with exceptions disabled.

Sat Oct  2 01:33:45 2004  Balachandran Natarajan  <bala@dre.vanderbilt.edu>

        * performance-tests/Protocols/sender.cpp:

          Fixed a compile error in our daily builds.

Fri Oct  1 23:06:06 2004  Balachandran Natarajan  <bala@dre.vanderbilt.edu>

        * tao/BiDir_GIOP/BiDirPolicy_Validator.cpp:

          Pass the environment variable while calling get_cached_policies
          (). This should fix compile errors in our minimum builds.

Fri Oct  1 19:48:44 2004  Balachandran Natarajan  <bala@dre.vanderbilt.edu>

        * tao/IIOP_Connection_Handler.cpp:

          Add env macros before invoking
          client_protocol_properties_at_orb_level and
          server_protocol_properties_at_orb_level.

        * tao/PortableServer/POA_Policy_Set.h:
        * tao/PortableServer/POA_Policy_Set.i:

          Added env variables get_cached_policy ().

Fri Oct  1 19:26:00 2004  Balachandran Natarajan  <bala@dre.vanderbilt.edu>

        * tao/ORB_Core.cpp:

          Cleanup from my last set of fixes.

Fri Oct  1 18:41:58 2004  Balachandran Natarajan  <bala@dre.vanderbilt.edu>

        * tao/Policy_Manager.h:
        * tao/Policy_Manager.i:
        * tao/Policy_Set.cpp:
        * tao/Policy_Set.h:

          The get_cached_policy () did not have the environment variables
          populated. This is essential to get things to be very sane.

Fri Oct  1 11:40:44 2004  J.T. Conklin  <jtc@acorntoolworks.com>

        * orbsvcs/orbsvcs/Makefile.am:

          Changed to refer to $(ACE_BUILDDIR)/Kokyu/libKokyu.la instead of
          -lKokyu.

Fri Oct  1 11:29:39 2004  J.T. Conklin  <jtc@acorntoolworks.com>

        * orbsvcs/Fault_Detector/Fault_Detector.mpc:
        * orbsvcs/Fault_Notifier/Fault_Notifier.mpc:

          Changed to inherit from core so that executables will be
          installed.

Fri Oct  1 18:22:33 2004  Balachandran Natarajan  <bala@dre.vanderbilt.edu>

        * tao/ORB_Core.cpp (get_policy_including_current):

          Some more problems that missed the last checkin.

Fri Oct  1 18:13:17 2004  Balachandran Natarajan  <bala@dre.vanderbilt.edu>

        * tao/Default_Protocols_Hooks.cpp:
        * tao/ORB_Core.cpp:
        * tao/ORB_Core.h:
        * tao/Remote_Invocation.cpp:
        * tao/Stub.cpp:

          Fixed improper use of exception macros.

Fri Oct  1 17:25:29 2004  Balachandran Natarajan  <bala@dre.vanderbilt.edu>

        * tao/RTCORBA/RT_Policy_i.h (create_transport_protocol_property):

          Made the second argument to defaul to zero. This fix may not be
          right. Need to run this by  Irfan. Until then some of the
          compilation failures will be fixed.

Thu Sep 30 17:08:43 2004  Irfan Pyarali  <irfan@oomworks.com>

        * orbsvcs/orbsvcs/SSLIOP/IIOP_SSL_Connector.cpp:

          Transport.h needs to be included.

Thu Sep 30 16:53:48 2004  Irfan Pyarali  <irfan@oomworks.com>

        * tao/Protocols_Hooks.h:

          Added export directives to the class declarations.

        * tao/Connection_Handler.{h,inl} (TAO_Connection_Handler):

          Gave the set_dscp_codepoint() method a default no-op
          implementation.  This way local protocols will not have to
          bother overwriting this method.

        * tao/Strategies/UIOP_Connection_Handler.{h,cpp}:
        * tao/Strategies/SHMIOP_Connection_Handler.{h,cpp}:

          Removed no-op implementation of set_dscp_codepoint().

        * orbsvcs/orbsvcs/SSLIOP/SSLIOP_Util.{h,cpp}:

          SSLIOP::Util::setup_handler_state no longer needed.  However, a
          helper for resolving the current is needed and was added.

        * orbsvcs/orbsvcs/PortableGroup/UIPMC_Acceptor.{h,cpp}:
        * orbsvcs/orbsvcs/PortableGroup/UIPMC_Connector.{h,cpp}:
        * orbsvcs/orbsvcs/SSLIOP/IIOP_SSL_Acceptor.{h,cpp}:
        * orbsvcs/orbsvcs/SSLIOP/IIOP_SSL_Connector.{h,cpp}:
        * orbsvcs/orbsvcs/SSLIOP/SSLIOP_Acceptor.{h,cpp}:
        * orbsvcs/orbsvcs/SSLIOP/SSLIOP_Connector.{h,cpp}:

          The void * arg parameter that was being passed to
          TAO_Creation_Strategy is no longer necessary.  Service handlers
          now figure out protocol properties when they are created.

        * orbsvcs/orbsvcs/PortableGroup/UIPMC_Connection_Handler.{h,cpp}:
        * orbsvcs/orbsvcs/SSLIOP/IIOP_SSL_Connection_Handler.{h,cpp}:
        * orbsvcs/orbsvcs/SSLIOP/SSLIOP_Connection_Handler.{h,cpp}:

          TAO_{Protocol Name}_Properties was removed.  <arg> parameter
          that was used to pass information between acceptor/connector and
          service handler was removed. open() was modified to get the
          protocol properties from the correct place.

        * orbsvcs/orbsvcs/FtRtEvent/EventChannel/Fault_Detector_Loader.cpp:

          Added missing semicolon.

Thu Sep 30 07:19:02 2004  J.T. Conklin  <jtc@acorntoolworks.com>

        * Makefile.am:

          Removed references to taoConf.

        * configure.ac:

          Removed taoConf.sh from AC_CONFIG_FILES.

        * taoConf.sh.in:

          Removed file.

Wed Sep 29 21:17:51 MST 2004  Trevor Fields <fields_t@ociweb.com>

        * tao/PortableServer/ImplRepo.pidl:
          Fixed documentation error.

        * orbsvcs/tests/ImplRepo/scale/scaletest.mpc:
        * orbsvcs/examples/ImR/Combined_Service/ImR_Combined_Service.mpc:
          Added missing Id tags.

        * orbsvcs/orbsvcs/IOR_Multicast.h:
          Added missing /**/ comments for pre.h and post.h includes.

        * orbsvcs/ImplRepo_Service/Locator_Options.cpp:
          Changed TCHAR to ACE_TCHAR.

        * orbsvcs/ImplRepo_Service/ImR_Activator_i.cpp:
          Changed error statement to avoid fuzz error.

        * orbsvcs/examples/ImR/Combined_Service/dynserver.cpp:
        * orbsvcs/examples/ImR/Combined_Service/test_server.cpp:
          Fixed fuzz errors.

        * orbsvcs/ImplRepo_Service/ImR_Locator.cpp:
          Removed unnecessary template instantiation.

Wed Sep 29 18:27:32 2004  Irfan Pyarali  <irfan@oomworks.com>

        * performance-tests/Protocols/altq.conf:

          File for setting priority queuing on a ALTQ router for DiffServ
          testing.

Wed Sep 29 17:30:25 2004  Irfan Pyarali  <irfan@oomworks.com>

          The following changes were made to accommodate the setting of
          protocol properties for non-IIOP protocols.  IIOP is part of the
          TAO library while the other protocols are part of the Strategies
          library. Protocol properties is part of RTCORBA.  Protocol
          properties for IIOP were implemented poorly and if the same
          model was followed for the other protocols, it would create a
          coupling of the RTCORBA and the Strategies libraries.

          The other major change here is how policies are retrieved.  The
          Policy Set implementation is nice and powerful, providing quick
          access to policy evaluated in the critical path.  These features
          were not being used consistently and there was a lot of code
          duplication.  These changes also clean things up.

          Also a lot of policy related code - what policies are set, when
          they are set and when they are evaluated - was also fixed.

        * tao/RTCORBA/RTCORBA.pidl:

          Added these two local interfaces:

          # UserDatagramProtocolProperties
          # StreamControlProtocolProperties.

          Updated SharedMemoryProtocolProperties to include all the TCP
          related parameters.  The implementation was also changed
          accordingly.

          Added the following methods to create the different protocol
          properties:

          # create_unix_domain_protocol_properties()
          # create_shared_memory_protocol_properties()
          # create_user_datagram_protocol_properties()
          # create_stream_control_protocol_properties()

        * tao/RTCORBA/RTCORBAC.{h,cpp}:

          Added code to match the changes in the pidl file.

        * RTCORBA/RT_ORB.{h,cpp}:

          Added code for implementing changes in the pidl file.

        * tao/RTCORBA/RT_Policy_i.{h,cpp}:

          To make things consistent, TAO_TCP_Properties,
          TAO_Unix_Domain_Properties, and TAO_SMEM_Properties were renamed
          to TAO_TCP_Protocol_Properties,
          TAO_UnixDomain_Protocol_Properties, and
          TAO_SharedMemory_Protocol_Properties respectively.  These two
          classes were added: TAO_UserDatagram_Protocol_Properties and
          TAO_StreamControl_Protocol_Properties.  Also default constructor
          parameters were removed.  If one does not know what parameters
          one of these should be created with, he should use the
          TAO_Protocol_Properties_Factory to create these classes.

          TAO_Protocol_Properties_Factory::create_transport_protocol_property()
          was changed to require that the ORB_Core is passed in since we
          need to use the user passed command line parameters to
          initialize the protocol properties.

          TAO_ServerProtocolPolicy::hook() and
          TAO_ClientProtocolPolicy::hook() were removed.

        * tao/RTCORBA/RT_Protocols_Hooks.{h,cpp}:
        * tao/Default_Protocols_Hooks.{h,cpp):
        * tao/Protocols_Hooks.{h,cpp}:

          - Removed client_protocols_hook and server_protocols_hook.
          These 'hooks' were trying to be generic across protocols, but
          really were specific to IIOP.

          - Removed update_client_protocol_properties and
          update_server_protocol_properties since they were very poorly
          written. Expanding these methods to other protocols would add a
          dependency from RTCORBA to the Strategies library.

          - Removed the set_default_policies method.  It took all the
          protocols that the ORB knows about, made client and server
          protocol properties from them and set them as default ORB
          policies.  The server protocol properties were being overridden
          in set_default_server_protocol_policy() so that only the
          protocols requested by the user are in the default protocol
          properties and not all the protocols that the ORB knows about.
          Client protocol properties were never used and were always
          ignored.  Therefore, this method was removed.  This method was
          also removed from ORB_Core::init().

          - Added the following methods and classes were added:

          # TAO_IIOP_Protocol_Properties
          # TAO_UIOP_Protocol_Properties
          # TAO_SHMIOP_Protocol_Properties
          # TAO_DIOP_Protocol_Properties
          # TAO_SCIOP_Protocol_Properties
          # client_protocol_properties_at_orb_level()
          # server_protocol_properties_at_orb_level()

          These classes and methods are used to set connection handler
          properties at creation time.  These classes and methods in the
          Protocols_Hooks allow us to decouple the RTCORBA library from
          the Strategies library.

          Also the following were added to set network priority during
          sending of packets.

          # set_client_network_priority()
          # set_server_network_priority()

        * tao/ORB_Core.{h,cpp}:

          Added the following methods:

          # get_policy() - Get a policy; first, check the ORB-level Policy
          Manager, then check the ORB defaults.

          # get_policy_including_current() - Get a policy; first, check
          the thread current, then check the ORB-level Policy Manager,
          then check the ORB defaults.

          # get_cached_policy() - Get a cached policy; first, check the
          ORB-level Policy Manager, then check the ORB defaults.

          # get_cached_policy_including_current() - Get a cached policy;
          first, check the thread current, then check the ORB-level Policy
          Manager, then check the ORB defaults.

          Removed the following custom methods that are replaced with the
          above general methods:

          # stubless_relative_roundtrip_timeout()
          # stubless_connection_timeout()
          # stubless_sync_scope()

          Also, get_protocols_hooks() was made simplier as the initiation
          of the protocols hooks was moved explicitly to
          ORB_Core::init(). This also allowed the removal of the
          environment being passed to this function.  The use of
          get_protocols_hooks() was updated in the following files:

          # IIOP_Connection_Handler.cpp
          # Remote_Invocation.cpp
          # PortableServer/Object_Adapter.cpp
          # RTCORBA/RT_Current.cpp
          # RTCORBA/RT_Invocation_Endpoint_Selectors.cpp
          # RTPortableServer/RT_Servant_Dispatcher.cpp

        * tao/Remote_Invocation.cpp:

          In send_message(), we figure out if we need to set dscp on the
          client produced network packets.  Then we ask the Connection
          Handler to go ahead and set the dscp on the socket if needed.

        * tao/IIOP_Transport.cpp:

          The following is how things used to happen:

          - First we get the client protocol properties in effect in
          TAO_IIOP_Transport::send_message() and figure out whether the
          network priority needs to be set.

          - Then just before we send the message out, we set the dcsp on
          the socket if needed.

          These steps are correct but were spread out in mutiple functions
          executed at different times.  This amount of complexity was
          unwarranted.

          All these are now down in one place:
          Remote_Invocation::send_message().

        * tao/IIOP_Connection_Handler.{h,cpp}:

          # TAO_IIOP_Properties class was removed since the
          IIOP_Properties are no longer being passed from the Connector
          and Acceptor to the Connection Handler.  Instead the protocol
          properties are retrieved when the the Connection Handler is
          created.  The previous method was flawed becaused any updates to
          the properties by the user were not considered when the protocol
          properties were set.  With this changes, any updates will get
          used.

          # update_protocol_properties() method was removed since protocol
          properties are no longer updated in this manner.

          # IPDSFIELD_DSCP_DEFAULT was moved to ORB_Constants.h since it
          is used my multiple protocols, not just IIOP.

        * tao/Acceptor_Impl.{h,cpp}:
        * tao/Connector_Impl.{h,cpp}:
        * tao/IIOP_Acceptor.{h,cpp}:
        * tao/IIOP_Connector.{h,cpp}:

          The void * arg parameter that was being passed to
          TAO_Creation_Strategy is no longer necessary.  Service handlers
          now figure out protocol properties when they are created.

        * tao/Connection_Handler.h (set_dscp_codepoint):

          Made set_dscp_codepoint() a pure virtual method in the base
          class.  Super classes for remote protocols (e.g., IIOP)
          implement this method; for local protocols this is a no-op.

        * tao/Object.{h,cpp}:
        * tao/LocalObject.{h,cpp}:
        * tao/RTCORBA/RT_Stub.{h,cpp}:

          _get_cached_policy() has added and _get_client_policy() was removed.

        * tao/Stub.{h,cpp}:

          Removed the following methods since they can be easily replace
          with one new method get_cached_policy():

          # relative_roundtrip_timeout()
          # sync_scope()
          # buffering_constraint()
          # connection_timeout()

          Also removed get_client_policy() since it was not useful.  Also,
          the get_policy() method was streamlined.

        * tao/RTCORBA/RT_Stub.{h,cpp}:

          effective_priority_banded_connection() and
          effective_client_protocol() were made private.  The user should
          simply use the get_policy() or the get_cached_policy()
          interface.  All the necessary smarts of returning the correct
          policy are now in this method.

          Specialized funtion private_connection(), client_protocol() and
          priority_banded_connection() were removed.

          Call to priority_banded_connection() was replaced by
          TAO_Stub::get_cached_policy(TAO_CACHED_POLICY_RT_PRIORITY_BANDED_CONNECTION)
          and call to client_protocol() was replaced by
          TAO_Stub::get_cached_policy(TAO_CACHED_POLICY_RT_CLIENT_PROTOCOL).

        * tao/RTPortableServer/RT_POA.cpp (server_protocol):

          This method was removed.  ORB level policies are already
          included in the POA policy set when the POA is created.
          Therefore, there is no need to check at the ORB level.

        * tao/RTPortableServer/RT_Servant_Dispatcher.cpp
          (pre_invoke_remote_request):

          Special treatment of IIOP was removed.  The code for setting up
          dscp was generalized to work with any protocol.

        * tao/orbconf.h:

          Removed several unused lierals, including
          TAO_CLIENT_PRIORITY_POLICY_TYPE,
          TAO_BUFFERING_CONSTRAINT_POLICY_TYPE,
          TAO_CONNECTION_TIMEOUT_POLICY_TYPE,
          TAO_RT_PRIORITY_MODEL_POLICY_TYPE,
          TAO_RT_THREADPOOL_POLICY_TYPE,
          TAO_RT_CLIENT_PROTOCOL_POLICY_TYPE,
          TAO_RT_PRIVATE_CONNECTION_POLICY_TYPE, and
          TAO_RT_PRIORITY_BANDED_CONNECTION_POLICY_TYPE

          TAO_RT_SERVER_PROTOCOL_POLICY_TYPE was not removed since it is
          needed for a check in the Policy Set, though it should really
          not be here though; We should find a different way to handle the
          check in the Policy Set.

        * tao/Messaging/Messaging_PolicyFactory.cpp (create_policy):
        * tao/Messaging/Messaging_ORBInitializer.cpp (register_policy_factories):

          TAO_BUFFERING_CONSTRAINT_POLICY_TYPE was replaced by
          TAO::BUFFERING_CONSTRAINT_POLICY_TYPE.

        * tao/RTCORBA/RT_Invocation_Endpoint_Selectors.cpp:

          Call to TAO_RT_Endpoint_Utils::client_protocol_policy() was
          replaced by
          TAO_RT_Endpoint_Utils::policy(TAO_CACHED_POLICY_RT_CLIENT_PROTOCOL).

          Call to rt_stub->exposed_priority_model() was replaced by
          rt_stub->get_cached_policy(TAO_CACHED_POLICY_PRIORITY_MODEL).

          Call to TAO_RT_Endpoint_Utils::priority_bands_policy() was
          replaced by
          TAO_RT_Endpoint_Utils::policy(TAO_CACHED_POLICY_RT_PRIORITY_BANDED_CONNECTION).

          Call to rt_stub->private_connection() was replaced by
          rt_stub->get_cached_policy(TAO_CACHED_POLICY_RT_PRIVATE_CONNECTION).

        * tao/RTCORBA/RT_Endpoint_Utils.{h,cpp}:

          priority_bands_policy() and client_protocol_policy() were
          replaced by one general policy() method.

        * tao/Messaging/Messaging_Policy_i.cpp (TAO_RelativeRoundtripTimeoutPolicy::hook):

          Call to orb_core->stubless_relative_roundtrip_timeout() was
          replaced by
          orb_core->get_cached_policy_including_current(TAO_CACHED_POLICY_RELATIVE_ROUNDTRIP_TIMEOUT)
          and stub->relative_roundtrip_timeout() was replaced by
          stub->get_cached_policy(TAO_CACHED_POLICY_RELATIVE_ROUNDTRIP_TIMEOUT).

        * tao/Messaging/Messaging_Policy_i.cpp (TAO_Sync_Scope_Policy::hook):

          Call to orb_core->stubless_sync_scope() was replaced by
          orb_core->get_cached_policy_including_current(TAO_CACHED_POLICY_SYNC_SCOPE)
          and call to stub->sync_scope() was replaced by
          stub->get_cached_policy (TAO_CACHED_POLICY_SYNC_SCOPE).

        * tao/Messaging/Connection_Timeout_Policy_i.cpp (hook):

          Call to orb_core->stubless_connection_timeout() was replaced by
          orb_core->get_cached_policy_including_current(TAO_CACHED_POLICY_CONNECTION_TIMEOUT)
          and stub->connection_timeout() was replaced by
          stub->get_cached_policy(TAO_CACHED_POLICY_CONNECTION_TIMEOUT).

        * tao/Sync_Strategies.cpp (buffering_constraints_reached):

          Call to stub->buffering_constraint() was replaced by
          stub->get_cached_policy(TAO_CACHED_POLICY_BUFFERING_CONSTRAINT).

        * tao/Strategies/DIOP_Connection_Handler.{h,cpp}:
        * tao/Strategies/SCIOP_Connection_Handler.{h,cpp}:
        * tao/Strategies/SHMIOP_Connection_Handler.{h,cpp}:
        * tao/Strategies/UIOP_Connection_Handler.{h,cpp}:

          TAO_{Protocol Name}_Properties was removed.  <arg> parameter
          that was used to pass information between acceptor/connector and
          service handler was removed. open() was modified to get the
          protocol properties from the correct place.
          set_dscp_codepoint() was added/modified.
          enable_network_priority() and update_protocol_properties() were
          removed.

        * tao/Strategies/DIOP_Connector.{h,cpp}:
        * tao/Strategies/SCIOP_Connector.{h,cpp}:
        * tao/Strategies/SHMIOP_Connector.{h,cpp}:
        * tao/Strategies/UIOP_Connector.{h,cpp}:
        * tao/Strategies/DIOP_Acceptor.{h,cpp}:
        * tao/Strategies/SCIOP_Acceptor.{h,cpp}:
        * tao/Strategies/SHMIOP_Acceptor.{h,cpp}:
        * tao/Strategies/UIOP_Acceptor.{h,cpp}:

          Removed init_tcp_properties.  Removed {Protocol Name}_Properties
          from both the Connector and Acceptor.  Removed passing of the
          protocol properties from the Connector and Acceptor to the
          service handler.

        * tao/Strategies/SCIOP_Connector.{h,cpp}:

          We need to specify an empty ACE_Multihomed_INET_Addr to
          connect() for it to succeed.

        * TAO/tests/RTCORBA/Server_Protocol/server_iiop_shmiop.conf:
        * TAO/tests/RTCORBA/Server_Protocol/server_iiop_uiop.conf:
        * TAO/tests/RTCORBA/Server_Protocol/run_test.pl:

          Added a couple of new conf file and updated the run_test.pl to
          extend the scenarios in this test.

        * TAO/tests/RTCORBA/Server_Protocol/server.cpp:

          Brought the printing of the protocols up-to-date.

        * TAO/tests/RTCORBA/Diffserv/README:

          Updated documentation.

        * TAO/tests/RTCORBA/Client_Protocol/server.cpp:

          create_transport_protocol_property() now needs the ORB Core.

        * TAO/performance-tests/Protocols:

          - Several changes to sender.cpp to make the test more
          comprehensive.

          - Simple run_test.pl added so that a simple version of the test
          can be executed.

Wed Sep 29 19:09:12 2004  Balachandran Natarajan  <bala@dre.vanderbilt.edu>

        * TAO_IDL/be/be_visitor_interface/interface_cs.cpp:

          Added generation of exception specification for
          ciao_postactivate () and ciao_preactivate (). This should fix
          compilation errors in the scoreboard.

Wed Sep 29 12:09:40 MST 2004  Trevor Fields  <fields_t@ociweb.com>

        * orbsvcs/ImplRepo_Service/Locator_Options.h:
          Changed to handle wide characters.

Wed Sep 29 13:12:27 2004  Iliyan Jeliazkov  <jeliazkov_i@ociweb.com>

        * orbsvcs/orbsvcs/SSLIOP/SSLIOP_Connector.h:

          There is no specific need for make_secure_profile ()
          to be virtual.

Wed Sep 29 10:12:43 2004  Jeff Parsons <j.parsons@vanderbilt.edu>

        * TAO_IDL/be/be_interface.cpp:
        * TAO_IDLbe/be_visitor_interface/interface_ch.cpp:
        * TAO_IDLbe/be_visitor_interface/interface_cs.cpp:
        * TAO_IDLbe_include/be_interface.h:

          For local interfaces that inherit directly from
          Components::SessionComponent, added code generation for
          empty implementations of ciao_preactivate() and
          ciao_postactivate(). These operations are pure virtual in
          SessionComponent, and the empty implementations allow
          developers to override or not as they choose. The only
          interfaces affected will be of the form Foo_Exec in
          executor mapping IDL generated for component Foo.

Wed Sep 29 07:31:34 2004  J.T. Conklin  <jtc@acorntoolworks.com>

        * tao/Makefile.am:

          Updated.

Wed Sep 29 10:52:12 UTC 2004  Johnny Willemsen  <jwillemsen@remedy.nl>

        * orbsvcs/tests/FT_App/FT_TestReplica_i.h:
          Fixed pre/post includes.

Wed Sep 29 07:41:12 UTC 2004  Johnny Willemsen  <jwillemsen@remedy.nl>

        * orbsvcs/orbsvcs/PortableGroup/PG_Group_Factory.h:
        * orbsvcs/orbsvcs/PortableGroup/PG_Object_Group.h:
          Fixed pre/post includes.

Tue Sep 28 20:55:26 2004  Carlos O'Ryan  <coryan@atdesk.com>

        * tests/Sequence_Unit_Tests/bounded_reference_allocation_traits.hpp:
        * tests/Sequence_Unit_Tests/bounded_value_allocation_traits.hpp:
        * tests/Sequence_Unit_Tests/unbounded_reference_allocation_traits.hpp:
        * tests/Sequence_Unit_Tests/unbounded_value_allocation_traits.hpp:
        * tests/Sequence_Unit_Tests/allocation_traits.hpp:
          Refactored each allocation trait to its own file.  Also
          eliminated some rather convoluted hierarchy between the
          reference and value allocation traits.  The code is much easier
          to understand now.

        * tests/Sequence_Unit_Tests/testing_allocation_traits.hpp:
        * tests/Sequence_Unit_Tests/bounded_basic_string_sequence.hpp:
        * tests/Sequence_Unit_Tests/bounded_value_sequence.hpp:
        * tests/Sequence_Unit_Tests/unbounded_basic_string_sequence.hpp:
        * tests/Sequence_Unit_Tests/unbounded_value_sequence.hpp:
        * tests/Sequence_Unit_Tests/testing_allocation_traits_ut.cpp:
        * tests/Sequence_Unit_Tests/unbounded_string_sequence_ut.cpp:
          Fixed the #includes and the class names.

        * tests/Sequence_Unit_Tests/bounded_value_sequence_ut.cpp:
        * tests/Sequence_Unit_Tests/unbounded_value_sequence_ut.cpp:
          Fixed the #includes, define all types based on the tested
          sequence (do you see the template code asking to be refactored?)

Tue Sep 28 20:22:16 2004  Carlos O'Ryan  <coryan@atdesk.com>

        * tests/Sequence_Unit_Tests/bounded_basic_string_sequence.hpp:
        * tests/Sequence_Unit_Tests/unbounded_basic_string_sequence.hpp:
          Refactored implementation of string sequences to a class
          template.  The character type is the template parameter.

        * tests/Sequence_Unit_Tests/string_traits.hpp:
          Fixed bug in the implementation of the string traits.  I used
          the wrong type, but it was not a problem until the wide-strings
          were tested.

        * tests/Sequence_Unit_Tests/bounded_string_sequence.hpp:
        * tests/Sequence_Unit_Tests/unbounded_string_sequence.hpp:
        * tests/Sequence_Unit_Tests/bounded_wstring_sequence.hpp:
        * tests/Sequence_Unit_Tests/unbounded_wstring_sequence.hpp:
          Implemented wrappers for the parametric string classes.

        * tests/Sequence_Unit_Tests/string_sequence_tester.hpp:
        * tests/Sequence_Unit_Tests/bounded_string_sequence_ut.cpp:
        * tests/Sequence_Unit_Tests/unbounded_string_sequence_ut.cpp:
          Re-write the unit tests as templates so we can test both regular
          and wide-character strings in the same code.  The trick was to
          provide a helper class to encapsulate comparisons, sample
          strings, etc.

Tue Sep 28 14:15:31 2004  Ossama Othman  <ossama@dre.vanderbilt.edu>

        * orbsvcs/orbsvcs/SSLIOP/SSLIOP_Connector.h:

          Updated out-of-date doxygen documentation.

Tue Sep 28 15:06:50 2004  Iliyan Jeliazkov  <jeliazkov_i@ociweb.com>

        * orbsvcs/ImplRepo_Service/ImR_Activator.idl:

          Updated to include the correct file.

Tue Sep 28 11:01:00 2004  Iliyan Jeliazkov  <jeliazkov_i@ociweb.com>

        * orbsvcs/orbsvcs/SSLIOP/SSLIOP_Connector.h:
        * orbsvcs/orbsvcs/SSLIOP/SSLIOP_Connector.cpp:

          Added a new method make_secure_profile () and restored the signature
          of make_profile () to conform to an interface defined in
          Transport_Connector.h. Added exception checking macro calls.

Mon Sep 27 21:01:12 2004  Carlos O'Ryan  <coryan@atdesk.com>

        * tests/Sequence_Unit_Tests/bounded_string_sequence.hpp:
          Implemented bounded string sequences.  Pretty easy to do
          considering all the previous refactoring.

        * tests/Sequence_Unit_Tests/Sequence_Unit_Tests.mpc:
        * tests/Sequence_Unit_Tests/Bounded_String.cpp:
          Add smoke test for bounded string sequences.

        * tests/Sequence_Unit_Tests/Sequence_Unit_Tests.mpc:
        * tests/Sequence_Unit_Tests/bounded_string_sequence_ut.cpp:
          New unit test for bounded string sequences.

        * tests/Sequence_Unit_Tests/Unbounded_String.cpp:
          Extend the smoke test for unbounded string sequences to test
          more functionality.

        * tests/Sequence_Unit_Tests/string_sequence_tester.hpp:
        * tests/Sequence_Unit_Tests/unbounded_string_sequence_ut.cpp:
          Refactored some of the tests into a common class used by bounded
          and unbounded string sequences.

        * tests/Sequence_Unit_Tests/range_checking.hpp:
          Add new operation to check when bounded sequences are extended
          beyond their maximum.  The spec only calls that "undefined
          behavior" so we let the application decide what to do.  The
          class name is all wrong now, needs to be changed.

        * tests/Sequence_Unit_Tests/allocation_traits.hpp:
          Correctly implement default_buffer_allocation() for
          reference_allocation_traits.

        * tests/Sequence_Unit_Tests/bounded_value_sequence.hpp:
          Call range_checking::check_length() before changing the length
          of a bounded sequence.

        * tests/Sequence_Unit_Tests/bounded_value_sequence_ut.cpp:
          Make sure that growing a bounded sequence beyond its maximum
          raises an exception.  This is not hard-coded behavior, it is
          implemented by the testing_range_checking specialization.

        * tests/Sequence_Unit_Tests/testing_allocation_traits.hpp:
          Reimplement the testing-mode allocation traits for sequences of
          references (strings at this point.)

        * tests/Sequence_Unit_Tests/testing_range_checking.hpp:
          Raise an exception if the length is incremented beyond the
          maximum for bounded sequences.

        * tests/Sequence_Unit_Tests/unbounded_string_sequence.hpp:
          Define all traits using value_type.

        * tests/Sequence_Unit_Tests/run_test.pl:
          Add new tests to the script.

Mon Sep 27 15:15:11 MST 2004  Trevor Fields  <fields_t@ociweb.com>

        * orbsvcs/ImplRepo_Service/INS_Locator.cpp:
        * orbsvcs/orbsvcs/IOR_Multicast.h:
          Changed tao/corba.h include to tao/ORB.h

        * tao/PortableServer/ImplRepo.pidl:
        * tao/PortableServer/ImplRepoC.h:
        * tao/PortableServer/ImplRepoC.cpp:
        * tao/PortableServer/ImplRepoC.i:
        * tao/PortableServer/ImplRepoS.h:
        * tao/PortableServer/ImplRepoS.cpp:
        * tao/PortableServer/ImplRepoS.i:
        * tao/PortableServer.mpc:
          Readded ImplRepo.pidl for the PortableServer.
          This is temporary fix and will be changed so the
          PortableServer will dynamically load the necessary
          IMR functions from a dll.

        * tao/PortableServer/ImplRepo.idl:
          Removed for above change.

Mon Sep 27 06:45:12 UTC 2004  Johnny Willemsen  <jwillemsen@remedy.nl>

        * orbsvcs/ImplRepo_Service/Activator_NT_Service.cpp:
        * orbsvcs/ImplRepo_Service/Locator_NT_Service.cpp:
          Fixed incorrect emulated exception macro usage

Mon Sep 27 06:39:12 UTC 2004  Johnny Willemsen  <jwillemsen@remedy.nl>

        * orbsvcs/ImplRepo_Service/ImplRepo_Service.mpc:
          Base ImR_Activator_Service on messaging instead of valuetype,
          messaging seems to be needed an has valuetype as its base

Mon Sep 27 06:18:12 UTC 2004  Johnny Willemsen  <jwillemsen@remedy.nl>

        * orbsvcs/ImplRepo_Service/ImplRepo_Service.mpc:
          Reverted some changes of Trevor below, messaging is dependent
          on valuetype and no need to add valuetype twice

Sun Sep 26 12:30:54 MST 2004  Trevor Fields  <fields_t@ociweb.com>

        * orbsvcs/ImplRepo_Service/ImplRepo_Service.mpc:
          Added valuetype to necessary projects for vc7.1

Sun Sep 26 19:12:12 UTC 2004  Johnny Willemsen  <jwillemsen@remedy.nl>

        * orbsvcs/ImplRepo_Service/ImplRepo_Service.mpc:
          Added valuetype base of ImR_Activator_Service

Sun Sep 26 11:13:12 2004  Carlos O'Ryan  <coryan@atdesk.com>

        * tests/Sequence_Unit_Tests/unbounded_string_sequence_ut.cpp:
          Add a number of tests.  In no particular order:
          - verify that freebuf() calls release() for each element
          - verify that operator=() works correctly.
          - verify that exceptions in allocbuf() are handled correctly in
            both the constructors, operator= and length()
          - verify that exceptions in duplicate() are handled correctly in
            both the constructors, operator= and length()
          - add tests for the multiple get_buffer() member functions
          - add tests for the multiple constructors with a buffer
          - add tests for the multiple replace() functions with a buffer

        * tests/Sequence_Unit_Tests/unbounded_string_sequence.hpp:
          Finished implementation of all methods, actually uncommented all
          the implementations, now that I have tests for them.

        * tests/Sequence_Unit_Tests/generic_sequence.hpp:
          More T to value_type changes.

        * tests/Sequence_Unit_Tests/bounded_value_sequence_ut.cpp:
        * tests/Sequence_Unit_Tests/unbounded_value_sequence_ut.cpp:
        * tests/Sequence_Unit_Tests/value_sequence_tester.hpp:
          Refactoed test for "get_buffer() const" to the shared tests.
          Also changed the test so it does not depend on having a
          constructor from buffer.

        * tests/Sequence_Unit_Tests/run_test.pl:
          The script was not detecting all (most?) errors.

Sun Sep 26 14:58:12 UTC 2004  Johnny Willemsen  <jwillemsen@remedy.nl>

        * tao/PortableServer.mpc:
          No need to list files in the IDL_Files section, the PortableServer
          directory is enough. Readded the disappeared PIDL_Files section

Sun Sep 26 14:49:12 UTC 2004  Johnny Willemsen  <jwillemsen@remedy.nl>

        * orbsvcs/orbsvcs/CosEvent/CEC_Event_Loader.cpp:
          Moved check for interface_repository out of debug level check, just
          do the debugs based on the debug level, not the functionality itself.
          This fixes bugzilla bug 1944. Thanks for Markus Stenberg
          <markus dot stenberg at conformiq dot com> for reporting this.

Sun Sep 26 14:29:12 UTC 2004  Johnny Willemsen  <jwillemsen@remedy.nl>

        * tao/Strategies/UIOP_Profile.cpp:
          Added include of os_ctype.h for isdigit to fix link errors on Tru64.
          Replaced all ACE cast macro's with their C++ versions.

Sun Sep 26 14:22:12 UTC 2004  Johnny Willemsen  <jwillemsen@remedy.nl>

        * orbsvcs/ImplRepo_Service/ImplRepo_Service.mpc:
          Added valuetype as base of ImR_Activator, this should fix the link
          errors in the windows builds. Changed ImR_Activator_IDL and
          ImR_Locator_IDL to have valuetype as base project instead of
          adding it manually to the after and libs part

Sun Sep 26 14:16:12 UTC 2004  Johnny Willemsen  <jwillemsen@remedy.nl>

        * tao/CORBALOC_Parser.h:
          Added missing /**/ before include of pre/post.h

Sun Sep 26 14:04:12 UTC 2004  Johnny Willemsen  <jwillemsen@remedy.nl>

        * orbsvcs/tests/Security/MT_SSLIOP/server.cpp:
          Fixed compile error

Sat Sep 25 21:36:55 2004  Balachandran Natarajan  <bala@dre.vanderbilt.edu>

        * tests/Sequence_Unit_Tests/string_sequence_element.hpp:

          Made a small fix for MSVC6.

Sat Sep 25 14:08:25 2004  Balachandran Natarajan  <bala@dre.vanderbilt.edu>

        * tao/PortableServer.mpc:

          Fix for the compilation errors that shows up on the
          scoreboard. This was essentially due to misuse of gendir
          keyword.

Sat Sep 25 09:54:29 2004  Carlos O'Ryan  <coryan@atdesk.com>

        * tests/Sequence_Unit_Tests/value_traits.hpp:
          Add a const_value_type typedef, just like the string_traits
          have.

        * tests/Sequence_Unit_Tests/generic_sequence.hpp:
        * tests/Sequence_Unit_Tests/bounded_value_sequence.hpp:
        * tests/Sequence_Unit_Tests/unbounded_value_sequence.hpp:
        * tests/Sequence_Unit_Tests/unbounded_string_sequence.hpp:
          Always use "value_type" in favor of "T"
          Introduce "const_value_type" to all sequences.

Fri Sep 24 13:16:44 MST 2004  Trevor Fields  <fields_t@ociweb.com>

        This is the merge of changes to the Implementation Repository into the
        DOC group repository.  The original work was done mostly by
        Justin Michel.

        * orbsvcs/ImplRepo_Service/Activator_Loader.h:
        * orbsvcs/ImplRepo_Service/Activator_Loader.cpp:
        * orbsvcs/ImplRepo_Service/Locator_Loader.h:
        * orbsvcs/ImplRepo_Service/Locator_Loader.cpp:
        * orbsvcs/ImplRepo_Service/activator_export.h:
        * orbsvcs/ImplRepo_Service/locator_export.h:
        * orbsvcs/ImplRepo_Service/utils.h:
        * orbsvcs/ImplRepo_Service/Activator_NT_Service.h:
        * orbsvcs/ImplRepo_Service/Activator_NT_Service.cpp:
        * orbsvcs/ImplRepo_Service/Activator_Options.h:
        * orbsvcs/ImplRepo_Service/Activator_Options.cpp:
        * orbsvcs/ImplRepo_Service/Adapter_Activator.h:
        * orbsvcs/ImplRepo_Service/Adapter_Activator.cpp:
        * orbsvcs/ImplRepo_Service/Forwarder.h:
        * orbsvcs/ImplRepo_Service/Forwarder.cpp:
        * orbsvcs/ImplRepo_Service/INS_Locator.h:
        * orbsvcs/ImplRepo_Service/INS_Locator.cpp:
        * orbsvcs/ImplRepo_Service/ImR_Activator.cpp:
        * orbsvcs/ImplRepo_Service/ImR_Activator_i.h:
        * orbsvcs/ImplRepo_Service/ImR_Activator_i.cpp:
        * orbsvcs/ImplRepo_Service/ImR_Locator.cpp:
        * orbsvcs/ImplRepo_Service/ImR_Locator_i.h:
        * orbsvcs/ImplRepo_Service/ImR_Locator_i.cpp:
        * orbsvcs/ImplRepo_Service/ImplRepo_Service.mpc:
        * orbsvcs/ImplRepo_Service/Iterator.h:
        * orbsvcs/ImplRepo_Service/Iterator.cpp:
        * orbsvcs/ImplRepo_Service/Locator_NT_Service.cpp:
        * orbsvcs/ImplRepo_Service/Locator_Options.h:
        * orbsvcs/ImplRepo_Service/Locator_Options.cpp:
        * orbsvcs/ImplRepo_Service/Multi_Iterator.h:
        * orbsvcs/ImplRepo_Service/Multi_Iterator.cpp:
        * orbsvcs/ImplRepo_Service/README.txt:
        * orbsvcs/ImplRepo_Service/Server_Info.h:
        * orbsvcs/ImplRepo_Service/Server_Info.cpp:
        * orbsvcs/ImplRepo_Service/Server_Repository.h:
        * orbsvcs/ImplRepo_Service/Server_Repository.cpp:
        * orbsvcs/ImplRepo_Service/XML_ContentHandler.h:
        * orbsvcs/ImplRepo_Service/XML_ContentHandler.cpp:
        * orbsvcs/ImplRepo_Service/tao_imr_i.h:
        * orbsvcs/ImplRepo_Service/tao_imr_i.cpp:

        * orbsvcs/orbsvcs/IOR_Multicast.h:
        * orbsvcs/orbsvcs/IOR_Multicast.cpp:

        * orbsvcs/tests/ImplRepo/run_test.pl:

        * tao/PortableServer/ImR_Locator.pidl:
        * tao/PortableServer/ImR_LocatorC.h:
        * tao/PortableServer/ImR_LocatorC.i:
        * tao/PortableServer/ImR_LocatorC.cpp:
        * tao/PortableServer/ImR_LocatorS.h:
        * tao/PortableServer/ImR_LocatorS.i:
        * tao/PortableServer/ImR_LocatorS.cpp:
        * tao/PortableServer/ImplRepo.pidl:
        * tao/PortableServer/ImplRepoC.h:
        * tao/PortableServer/ImplRepoC.i:
        * tao/PortableServer/ImplRepoC.cpp:
        * tao/PortableServer/ImplRepoS.h:
        * tao/PortableServer/ImplRepoS.i:
        * tao/PortableServer/ImplRepoS.cpp:

          Added support for using the ImR locator and activator services
          within the ACE Service Configurator framework. Split locator and
          activator into separate libraries and executables.

          Refactored Activator_Options and Locator_Options to facilitate
          use in separate libraries. Fixed problems with activator
          persistence including support for environment variables.

          Fixed problems with the list() operation and iterators,
          although the better solution will likely be to eliminate
          the iterators entirely.

          Simplified Service_Info class into a simple struct which
          further simplified and enhanced the startup code for
          servers. Refactored some locator servant options to throw
          NO_IMPLEMENT until the IDL is updated to correctly remove these
          operations.

          Fixed many miscellaneous bugs and performance problems.
          Removed the ready_check() feature, as the current implementation
           was broken, and the correct solution is relatively
           straightforward, and will likely be added soon.
          Fixed the broken ImR_Multicast implementation. A char* is NOT
           a string, and should never be used as such. ACE_CString or the
           equivalent is a much better choice. There are likely other
           lurking bugs of this type in ACE/TAO.
          Removed the unused logical_server from the ServerInformation
           type in ImplRepo.pidl. Also removed the Address typedef and
           changed the terminology from location to partial_ior.

        * orbsvcs/examples/ImR/Combined_Service/test.idl:
        * orbsvcs/examples/ImR/Combined_Service/ImR_Combined_Service.mpc:
        * orbsvcs/examples/ImR/Combined_Service/combined.cpp:
        * orbsvcs/examples/ImR/Combined_Service/controller.cpp:
        * orbsvcs/examples/ImR/Combined_Service/dynserver.h:
        * orbsvcs/examples/ImR/Combined_Service/dynserver.cpp:
        * orbsvcs/examples/ImR/Combined_Service/dynserver_export.h:
        * orbsvcs/examples/ImR/Combined_Service/readme:
        * orbsvcs/examples/ImR/Combined_Service/run_test.pl:
        * orbsvcs/examples/ImR/Combined_Service/service_config.idl:
        * orbsvcs/examples/ImR/Combined_Service/start_all.conf:
        * orbsvcs/examples/ImR/Combined_Service/test.cpp:
        * orbsvcs/examples/ImR/Combined_Service/test_server.cpp:

          Added an example of using ImR_Locator and ImR_Activator service
           from the ACE Service Configurator.  The test starts a locator,
           activator, and test server in one process using the service configurator
           framework. Also provides a corba-ified service configurator that can
           be controlled using the provided command line client.

        * orbsvcs/ImplRepo_Service/Repository_Configuration.h:
        * orbsvcs/ImplRepo_Service/Repository_Configuration.cpp:
        * orbsvcs/ImplRepo_Service/Server_Repository.h:
        * orbsvcs/ImplRepo_Service/Server_Repository.cpp:
        * orbsvcs/ImplRepo_Service/XML_ContentHandler.h:
        * orbsvcs/ImplRepo_Service/XML_ContentHandler.cpp:
        * tao/PortableServer/ImR_Activator.pidl:
        * tao/PortableServer/ImR_Locator.pidl:
        * tao/PortableServer/ImR_LocatorC.h:
        * tao/PortableServer/ImR_LocatorC.i:
        * tao/PortableServer/ImR_LocatorC.cpp:
        * tao/PortableServer/ImR_LocatorS.h:
        * tao/PortableServer/ImR_LocatorS.i:
        * tao/PortableServer/ImR_LocatorS.cpp:
        * tao/PortableServer/ImplRepo.pidl:
        * tao/PortableServer/ImplRepoC.h:
        * tao/PortableServer/ImplRepoC.i:
        * tao/PortableServer/ImplRepoC.cpp:
        * tao/PortableServer/ImplRepoS.h:
        * tao/PortableServer/ImplRepoS.i:
        * tao/PortableServer/ImplRepoS.cpp:

          Removed these files. Most were only necessary due to the complication of
        splitting the persistent state between the activator and locator.

        * orbsvcs/ImplRepo_Service/ImR_Activator_i.cpp (is_alive):

          Masked out all bits in the minor code except those that correspond
           to the "location".  See corbafwd.h for information about how the
           minor code is laid out.

        * orbsvcs/ImplRepo_Service/ImR_Activator_i.cpp:
        * orbsvcs/ImplRepo_Service/ImR_Locator_i.cpp:

          Fixed ORB_init calls to specify a hopefully unique ORBid
        for the activator and locator orbs.

        * orbsvcs/ImplRepo_Service/Activator_Info.h:
        * orbsvcs/ImplRepo_Service/Activator_Info.cpp:
        * orbsvcs/ImplRepo_Service/Activator_Loader.h:
        * orbsvcs/ImplRepo_Service/Activator_NT_Service.h:
        * orbsvcs/ImplRepo_Service/Activator_NT_Service.cpp:
        * orbsvcs/ImplRepo_Service/Activator_Options.h:
        * orbsvcs/ImplRepo_Service/Activator_Options.cpp:
        * orbsvcs/ImplRepo_Service/Adapter_Activator.h:
        * orbsvcs/ImplRepo_Service/Adapter_Activator.cpp:
        * orbsvcs/ImplRepo_Service/Forwarder.h:
        * orbsvcs/ImplRepo_Service/Forwarder.cpp:
        * orbsvcs/ImplRepo_Service/INS_Locator.h:
        * orbsvcs/ImplRepo_Service/INS_Locator.cpp:
        * orbsvcs/ImplRepo_Service/ImR_Activator.idl:
        * orbsvcs/ImplRepo_Service/ImR_Activator_i.h:
        * orbsvcs/ImplRepo_Service/ImR_Activator_i.cpp:
        * orbsvcs/ImplRepo_Service/ImR_Locator.idl:
        * orbsvcs/ImplRepo_Service/ImR_Locator_i.h:
        * orbsvcs/ImplRepo_Service/ImR_Locator_i.cpp:
        * orbsvcs/ImplRepo_Service/ImplRepo_Service.mpc:
        * orbsvcs/ImplRepo_Service/Iterator.h:
        * orbsvcs/ImplRepo_Service/Iterator.cpp:
        * orbsvcs/ImplRepo_Service/Locator_NT_Service.h:
        * orbsvcs/ImplRepo_Service/Locator_Options.h:
        * orbsvcs/ImplRepo_Service/Locator_Options.cpp:
        * orbsvcs/ImplRepo_Service/Locator_Repository.h:
        * orbsvcs/ImplRepo_Service/Locator_Repository.cpp:
        * orbsvcs/ImplRepo_Service/Locator_XMLHandler.h:
        * orbsvcs/ImplRepo_Service/Locator_XMLHandler.cpp:
        * orbsvcs/ImplRepo_Service/README.txt:
        * orbsvcs/ImplRepo_Service/Server_Info.h:
        * orbsvcs/ImplRepo_Service/Server_Info.cpp:
        * orbsvcs/ImplRepo_Service/activator_idl_export.h:
        * orbsvcs/ImplRepo_Service/locator_idl_export.h:
        * orbsvcs/ImplRepo_Service/repository.xml:
        * orbsvcs/ImplRepo_Service/tao_imr.cpp:
        * orbsvcs/ImplRepo_Service/tao_imr_i.h:
        * orbsvcs/ImplRepo_Service/tao_imr_i.cpp:

          Refactored ImR to move most functionality from the activator into
        the locator. All activator->locator and locator->activator interfaces
        are moved to new idl files in this directory, thereby making PortableServer
        smaller. The activator no longer has need for persistence since it's little
        more than a process launcher now. The Activator has been rewritten to use
        AMH, which allows the locator to block waiting for the servers to startup
        without wasting thread resources or inducing stack overflow.

        The locator now persists all activator and server information, and can use
        any of the three persistence formats for this.

        Added the StartLimit feature, wherein the ImR will try to start a server
        up to StartLimit times before giving up. From the point of view of tao_imr, this
        feature is called retry_count, which = start_limit - 1. The default is 0, or disabled.

        Reintroduced the ping interval command line option for the Locator. If the server
        has been pinged in the last N seconds, then it will be assumed to be still running.
        This should cut down on some potential unnecessary traffic. The default is 500ms, and
        0 can be specified to disable the verification feature. Which is nice.

        Fixed many miscellaneous bugs found while refactoring, and adding features.

        However, there are some existing know problems. Specifically the INS_Locator no
        longer seems to work, although it seems to return the same result as 1.3a before this
        merge in which it was working fine. Maybe the merge will take care of the problem.
        Also the persistent_ir test is not working. Could be related.

        * orbsvcs/tests/ImplRepo/locked/run_test.pl:
        * orbsvcs/tests/ImplRepo/run_test.pl:

          Updated to reflect new/moved command line params.

        * tao/PortableServer/ImplRepo.idl:
        * tao/PortableServer/POA.cpp:
        * tao/PortableServer/PortableServer.mpc:

          Changed to use idl instead of pidl.

        * utils/catior/catior.cpp:

          Fixed bug with crash in incorrect use of isprint()

        * orbsvcs/tests/ImplRepo/scale/client.conf:
        * orbsvcs/tests/ImplRepo/scale/client.cpp:
        * orbsvcs/tests/ImplRepo/scale/run_test.pl:
        * orbsvcs/tests/ImplRepo/scale/scaletest.mpc:
        * orbsvcs/tests/ImplRepo/scale/server.cpp:
        * orbsvcs/tests/ImplRepo/scale/server_i.h:
        * orbsvcs/tests/ImplRepo/scale/server_i.cpp:
        * orbsvcs/tests/ImplRepo/scale/test.idl:

          This new scalability test should help track down some remaining
        flaws in the ImR. It was originally submitted by SoftComputer, but
        has been extensively modified.

Fri Sep 24 12:58:37 2004  Jeff Parsons <j.parsons@vanderbilt.edu>

        * examples/Kokyu_dsrt_schedulers/mif_example/test_i.cpp:
        * examples/Kokyu_dsrt_schedulers/muf_example/test_i.cpp:
        * examples/RTScheduling/Job_i.cpp:
        * examples/RTScheduling/Fixed_Priority_Scheduler/FP_Task.cpp:
        * examples/RTScheduling/MIF_Scheduler/MIF_Task.cpp:
        * orbsvcs/performance-tests/LoadBalancing/LBPerf/RPS/RPS_Monitor.cpp:
        * orbsvcs/performance-tests/LoadBalancing/LBPerf/RPS/client.cpp:
        * orbsvcs/performance-tests/RTEvent/RTCORBA_Baseline/Roundtrip.cpp:
        * orbsvcs/tests/Log/Basic_Log_Test/Basic_Log_Test.cpp:

          Eliminated data conversion warnings on MSVC 7.1.

Fri Sep 24 12:39:19 2004  Jeff Parsons <j.parsons@vanderbilt.edu>

        * tests/Sequence_Unit_Tests/run_test.pl:

          Replacement script supplied by Carlos O'Ryan that handles
          the Windows executable file extensions.

Fri Sep 24 12:28:04 2004  Carlos O'Ryan  <coryan@atdesk.com>

        * tests/Sequence_Unit_Tests/string_sequence_element.hpp:
        * tests/Sequence_Unit_Tests/unbounded_string_sequence.hpp:
          Changed the template parameter on the string_sequence_element
          from charT to the string_traits.  With this change the
          "string_sequence_element" no longer depends on the "string"
          aspect, with suitable traits it works for object references too!
          Also, because all the types depend on the template parameter I
          have some hope of working around the MSVC6 bugs.

        * tests/Sequence_Unit_Tests/bounded_value_sequence_ut.cpp:
        * tests/Sequence_Unit_Tests/string_sequence_element_ut.cpp:
        * tests/Sequence_Unit_Tests/testing_allocation_traits_ut.cpp:
        * tests/Sequence_Unit_Tests/unbounded_string_sequence_ut.cpp:
        * tests/Sequence_Unit_Tests/unbounded_value_sequence_ut.cpp:
        * tests/Sequence_Unit_Tests/value_sequence_tester.hpp:
          Changed the unit tests so they would compile with boost-1.30.2

Fri Sep 24 11:25:18 2004  Chad Elliott  <elliott_c@ociweb.com>

        * tests/Sequence_Unit_Tests/Sequence_Unit_Tests.mpc:
        * tests/Sequence_Unit_Tests/bounded_value_sequence_ut.cpp:
        * tests/Sequence_Unit_Tests/string_sequence_element_ut.cpp:
        * tests/Sequence_Unit_Tests/testing_allocation_traits_ut.cpp:
        * tests/Sequence_Unit_Tests/unbounded_string_sequence_ut.cpp:
        * tests/Sequence_Unit_Tests/unbounded_value_sequence_ut.cpp:

          Removed the #if 0'ed main() from these cpp files and added exename
          settings to the necessary projects in the mpc file.

Fri Sep 24 11:13:30 2004  Jeff Parsons <j.parsons@vanderbilt.edu>

        * tests/Sequence_Unit_Tests/allocation_traits.hpp:

          Changed line with reinterpret_cast<> in
          unbounded_reference_allocation_traits::allocbuf() to be
          more palatable for MSVC 7.1. Thanks to Carlos O'Ryan
          <coryan@atdesk.com> for the replacement line.

Fri Sep 24 10:08:50 2004  Jeff Parsons <j.parsons@vanderbilt.edu>

        * orbsvcs/orbsvcs/AV/RTP.cpp:

          Added statc_cast<> to the last argument passed to the
          RTP_Packet constructor, to avoid loss-of-data warnings
          on MSVC 7.1.

Fri Sep 24 09:38:16 2004  Jeff Parsons <j.parsons@vanderbilt.edu>

        * tao/CORBALOC_Parser.cpp:

          Added #include of ace/os_include/os_netdb.h to pull in define of
          MAXHOSTNAMELEN for Windows platforms.

Fri Sep 24 08:58:40 2004  Iliyan Jeliazkov  <jeliazkov_i@ociweb.com>

          Added capability to use INS-style corbaloc references to specify SSLIOP
          references. This was motivated by a desire to access a naming service
          exclusively using SSLIOP, but needing to specify its endpoint to clients
          via a corbaloc-style IOR.

          This change originated in OCITAO 1.3a, and relies (and brings along with
          it) code from OCITAO that refactored the CORBALOC parser to support
          corbaloc and corbaname parsing via protocols beyond iiop. Thanks to
          Phil Mesnier and Jonathan Pollack for contributing this functionality.
          Their changes are credited accordingly in the text below.

        * orbsvcs/orbsvcs/SSLIOP/SSLIOP_Connector.h:
        * orbsvcs/orbsvcs/SSLIOP/SSLIOP_Connector.cpp:

          Added code to check for the new "ssliop:" protocol prefix and to parse
          a corbaloc-style URL with ssliop prefix.

        * orbsvcs/orbsvcs/SSLIOP/SSLIOP_Factory.cpp:

          Updated the factory to correctly recognize ssliop: and iiop: protocol
          prefixes.

        * orbsvcs/orbsvcs/SSLIOP/SSLIOP_Profile.h:
        * orbsvcs/orbsvcs/SSLIOP/SSLIOP_Profile.cpp:

          Modified to allow creation of profiles that allways use SSL (when the
          ssliop: protocol prefix is present). Such profiles will allways create
          connections with Security::NoProtection disabled.

        * orbsvcs/tests/Security/MT_SSLIOP/MT_SSLIOP.mpc:
        * orbsvcs/tests/Security/MT_SSLIOP/server.cpp:

          Added a "-i ObjectKey" option to provide an object key in the IORTable for
          the object reference, so that clients can use corbaloc object
          references like "corbaloc:ssliop:localhost:12345/ObjectKey". The intent
          was to use it in testing the working of the corbaloc:ssliop, however it
          is suiteable for more general use and that is why I left it here.

        * orbsvcs/tests/Security/ssliop_corbaloc/README:
        * orbsvcs/tests/Security/ssliop_corbaloc/client.conf:
        * orbsvcs/tests/Security/ssliop_corbaloc/client.h:
        * orbsvcs/tests/Security/ssliop_corbaloc/client.conf.xml:
        * orbsvcs/tests/Security/ssliop_corbaloc/client.cpp:
        * orbsvcs/tests/Security/ssliop_corbaloc/corbaloc_ssliop.mpc:
        * orbsvcs/tests/Security/ssliop_corbaloc/pvtkey-client.pem:
        * orbsvcs/tests/Security/ssliop_corbaloc/pvtkey.pem:
        * orbsvcs/tests/Security/ssliop_corbaloc/run_test.pl:
        * orbsvcs/tests/Security/ssliop_corbaloc/selfsigncert-client.pem:
        * orbsvcs/tests/Security/ssliop_corbaloc/selfsigncert.pem:
        * orbsvcs/tests/Security/ssliop_corbaloc/server.conf:
        * orbsvcs/tests/Security/ssliop_corbaloc/server.conf.xml:
        * orbsvcs/tests/Security/ssliop_corbaloc/test_object.idl:

          Added the test to demonstrate the use of corbaloc:ssliop-style
          object references and exclusive use of secure connection.
          Introduced client- and server-side configuration file(s) for
          the SSL-based tests, which I borrowed from
          $TAO_ROOT/orbsvcs/tests/Security/Security/MT_SSLIOP.
          Also generated a pair of private keys and the corresponding
          certificates.


        * tao/CORBALOC_Parser.h:
        * tao/CORBALOC_Parser.cpp:

          Phil Mesnier refactored CORBALOC_Parser. The goal of this effort is to
          support corbaloc and corbaname style object URLs with protocols other than those
          shipped with TAO. Now the corbaloc parser works in conjunction
          with the connector registry to allow the loaded transport
          connectors to parse out known address strings. This change works
          in conjunction with the changed TAO_Transport_Connector class,
          described below. Thanks also to Jonathan Pollack for contributing, and
          reviewing the final version.

        * tao/Connector_Registry.cpp:
        * tao/IIOP_Connector.cpp:

          Phil Mesnier added an "" to the list of valid prefixes. This allows the
          corbaloc parser code to remain clean, while still allowing corbaloc:: to
          be eqivalent to corbaloc:iiop:.

        * tao/IIOP_Profile.cpp:

          Added a better error message for the case when a port number appears
          with no host name specified. Originaly this threw and exception, but
          provided no clues why the object reference would be invalid.

        * tao/Strategies/UIOP_Connector.h:
        * tao/Strategies/UIOP_Connector.cpp:

          Phil Mesnier overode corbaloc parsing for UIOP, as it is a profile that
          may contain commas or slashes in the address, therefore it must provide
          its own implementation of corbaloc_scan method. The UIOP parser scans
          for a '|' preceeding the comma or slash.

        * tao/Strategies/UIOP_Profile.cpp:

          Phil Mesnier updated the to_string method to output a stringified object
          reference compatible with the updated corbaloc parser.

        * tao/Transport_Connector.h:
        * tao/Transport_Connector.cpp:

          Phil Mesnier added a new virtual method, corbaloc_scan, which is called by
          the corbaloc parser in order to find the end of the address specification,
          ordinarily a comma or a slash. This method is virtual so that specific
          protocols that need to have an additional adornment, or may include a comma
          or slash in a valid endpoint string, may use an alternative method to
          determine the end of the address. Ensured (in corbaloc_scan) that commas
          that appear inside object key, following a slash are not counted as
          separators between addresses.

Fri Sep 24 07:12:12 2004  Carlos O'Ryan  <coryan@atdesk.com>

        * tests/Sequence_Unit_Tests/allocation_traits.hpp:
          Add missing return statement to allocbuf() for bounded strings
          of reference-like types.  Since this code is not used yet it is
          quite cool that gcc-3.2.3 was able to pick the problem.

Fri Sep 24 10:18:24 2004    <ops@iki.fi>

        * orbsvcs/CosEvent_Service/CosEvent_Service.mpc:
          Changed order of base projects to fix linking error
          for static builds.

Thu Sep 23 22:48:14 2004  Carlos O'Ryan  <coryan@atdesk.com>

        * tests/Sequence_Unit_Tests/Sequence_Unit_Tests.mpc:
        * tests/Sequence_Unit_Tests/Unbounded_String.cpp:
        * tests/Sequence_Unit_Tests/run_test.pl:
          New smoke test to verify that unbounded string sequences compile
          across all platforms.  The test is incomplete because the
          sequences are, but there is enough code there to start shaking
          out the bugs.

Thu Sep 23 22:38:39 2004  Carlos O'Ryan  <coryan@atdesk.com>

        * tests/Sequence_Unit_Tests/bounded_value_sequence_ut.cpp:
        * tests/Sequence_Unit_Tests/string_sequence_element_ut.cpp:
        * tests/Sequence_Unit_Tests/testing_allocation_traits_ut.cpp:
        * tests/Sequence_Unit_Tests/testing_counters.hpp:
        * tests/Sequence_Unit_Tests/unbounded_string_sequence_ut.cpp:
        * tests/Sequence_Unit_Tests/unbounded_value_sequence_ut.cpp:
        * tests/Sequence_Unit_Tests/value_sequence_tester.hpp:
          The enable_shared_from_this trick was introduced in boost-1.31,
          but I do not want to force Jeff and others to move out of 1.30.2
          just to run the unit tests.  So I reimplemented the trick using
          the canonical weak_ptr<> self reference, and a static allocator
          to initialize the self reference.

Thu Sep 23 22:23:46 2004  Carlos O'Ryan  <coryan@atdesk.com>

        * tests/Sequence_Unit_Tests/testing_counters.hpp:
          Include <boost/utility.hpp> instead of <boost/noncopyable.hpp>
          as the second header only showed up in 1.31

Thu Sep 23 22:21:22 2004  Carlos O'Ryan  <coryan@atdesk.com>

        * tests/Sequence_Unit_Tests/testing_allocation_traits_ut.cpp:
          Try to work around an (apparent) MSVC7.1 problem.  It somehow
          got confused about template to template member functions.  No
          biggie, I can wrap them through an extra call, so:
            &Class::member<parameter>
          becomes
            &Class::member_parameter
          and the implementation of the last function reads:
            Class::member_parameter() {
              member<parameter>();
            }
          Thanks to Jeff Parson for testing that platform.  He also
          pointed out that he is using boost-1.30.2, so I'll use the
          backwards compatible unit test features in a future commit.

        * tests/Sequence_Unit_Tests/run_test.pl:
          Add the testing_allocation_traits_ut to the list of tests.
          Somehow I missed it earlier.

Thu Sep 23 22:14:01 2004  Carlos O'Ryan  <coryan@atdesk.com>

        * Bala found the following problems for me:

        * tests/Sequence_Unit_Tests/string_traits_base.hpp:
          I returned the result of a void function in a void function.
          Perfectly legal C++, but MSVC6 is too lame.  On the other hand I
          do not care to skip the return statement, and it is actually
          clearer written the new way.

        * tests/Sequence_Unit_Tests/string_sequence_element.hpp:
          Try to work an MSVC6 wart.  Use a base class of the traits
          instead of using the traits directly.  Slightly less elegant,
          but not the end of the world.

Thu Sep 23 19:49:12 UTC 2004  Johnny Willemsen  <jwillemsen@remedy.nl>

        * TAO_IDL/be/be_codegen.cpp:
          Removed the generation of _MSC_VER >= 1200, the oldest msvc compiler
          we now support is msvc6 and this has _MSC_VER == 1200, so these
          checks for the version are not needed. All msvc compiler we use now
          support pragma warning push/pop. This is part of the fix for bug
          1943, all generated code in the repo needs to be updated, also all
          manual written code that uses this check

Thu Sep 23 17:48:50 2004  Balachandran Natarajan  <bala@dre.vanderbilt.edu>

        * tests/Sequence_Unit_Tests/string_sequence_element.hpp:
        * tests/Sequence_Unit_Tests/string_traits_base.hpp:

          Left a couple of coments for Carlos.

Wed Sep 22 21:39:48 2004  Carlos O'Ryan  <coryan@atdesk.com>

        * tests/Sequence_Unit_Tests/unbounded_string_sequence_ut.cpp:
          Add test for freebuf(), this motivated the changes below.
          Add test for to verify that index checking works.

        * tests/Sequence_Unit_Tests/unbounded_string_sequence.hpp:
          Enable the implementation of allocbuf() and freebuf().

        * tests/Sequence_Unit_Tests/allocation_traits.hpp:
          Because freebuf() has such crazy requirements for sequences of
          reference-like types I had to implement special allocators for
          those types.  Basically they decorate the normal allocators and
          call the ::release_range() and ::zero_range() traits in the
          element type.

        * tests/Sequence_Unit_Tests/generic_sequence.hpp:
          Improved the documentation.
          Moved the zeroing-out of buffers to the allocation traits.

        * tests/Sequence_Unit_Tests/string_traits.hpp:
          Add trait to release all the strings in a (buffer) range.

Wed Sep 22 20:41:44 2004  Carlos O'Ryan  <coryan@atdesk.com>

        * tests/Sequence_Unit_Tests/Bounded_Simple_Types.cpp:
        * tests/Sequence_Unit_Tests/Unbounded_Simple_Types.cpp:
          To avoid compilation warnings on Tru64_Compaq_C++ we do not use
          explicit template intantiation, instead we just use all the
          functions.

Wed Sep 22 20:25:12 2004  Carlos O'Ryan  <coryan@atdesk.com>

        * tests/Sequence_Unit_Tests/string_sequence_element.hpp:
          Implement the type returned by the non-const operator[] in
          string sequences.  A lot of the evilness of string sequences is
          encapsulated here.

        * tests/Sequence_Unit_Tests/run_test.pl:
        * tests/Sequence_Unit_Tests/Sequence_Unit_Tests.mpc:
        * tests/Sequence_Unit_Tests/string_sequence_element_ut.cpp:
          Unit test for the previous class.

        * tests/Sequence_Unit_Tests/string_traits_base.hpp:
          Add missing #include for the string manager types.

        * tests/Sequence_Unit_Tests/unbounded_string_sequence.hpp:
          Implement the non-const operator[] to return a
          string_sequence_element<charT>.

        * tests/Sequence_Unit_Tests/run_test.pl:
        * tests/Sequence_Unit_Tests/unbounded_string_sequence_ut.cpp:
          Add more tests for copy constructors.
          Test the non-cost operator[] for sequences.
          Move the add_all() function to the end, easier to add tests that
          way.

Tue Sep 21 22:11:10 2004  Carlos O'Ryan  <coryan@atdesk.com>

        * tests/Sequence_Unit_Tests/unbounded_string_sequence.hpp:
          New file, this will implement (obviously enough) unbounded
          sequences of strings.  The implementation is incomplete, but
          enough is there to show the main ideas and start the cycle:
          write test -> get test to compile + fail -> get test to pass
          -> rinse and repeat.

        * tests/Sequence_Unit_Tests/Sequence_Unit_Tests.mpc:
        * tests/Sequence_Unit_Tests/unbounded_string_sequence_ut.cpp:
          Initial unit test for unbounded string sequences.

        * tests/Sequence_Unit_Tests/testing_counters.hpp:
          Helper classes to implement some common testing idioms, namely,
          count how many times a function is called and raise an exception
          after a prescribed number of calls.

        * tests/Sequence_Unit_Tests/string_traits.hpp:
          Implement the element manipulation traits for strings (and wide
          strings.)

        * tests/Sequence_Unit_Tests/string_traits_base.hpp:
          Isolate most of the string element manipulation traits from the
          silly CORBA names for string vs. wstring functions.  Apparently
          they forgot that C++ has overloading.

        * tests/Sequence_Unit_Tests/testing_string_traits.hpp:
          More helper classes to write unit tests related to string
          sequences.

        * tests/Sequence_Unit_Tests/testing_allocation_traits.hpp:
        * tests/Sequence_Unit_Tests/value_sequence_tester.hpp:
        * tests/Sequence_Unit_Tests/bounded_value_sequence_ut.cpp:
        * tests/Sequence_Unit_Tests/unbounded_value_sequence_ut.cpp:
          Refactored the code to use the testing_counters.hpp helpers.

        * tests/Sequence_Unit_Tests/testing_allocation_traits_ut.cpp:
          Wrote a unit test for the allocation traits used in testing.
          Normally I would not "test the test" but the helpers in
          testing_counters.hpp made it desirable to have this extra layer
          of checking.

Tue Sep 21 20:15:01 2004  Carlos O'Ryan  <coryan@atdesk.com>

        * tests/Sequence_Unit_Tests/generic_sequence.hpp:
          Refactor the code to decompose the problem a little better.
          Basically it all boils down to creating

          1) A set of traits to handle buffer allocation.  This
             encapsulates the bounded vs. unbounded aspect of a sequence.

          2) Another set trait to handle element initialization,
             copying and destruction.  This encapsulates the value
             vs. reference aspect of a sequence.

          In the process I created smaller files to hold each class.
          The traits have an extra <bool> template parameter, whose
          motivation would hopefully become clear in a second.

        * tests/Sequence_Unit_Tests/bounded_value_sequence.hpp:
          Move the implementation of bounded sequences of by-value types
          to this file.

        * tests/Sequence_Unit_Tests/bounded_value_sequence_ut.cpp:
          Unit test for bounded_value_sequence.

        * tests/Sequence_Unit_Tests/unbounded_value_sequence.hpp:
          Move the implementation of unbounded sequences of by-value types
          to this file.

        * tests/Sequence_Unit_Tests/unbounded_value_sequence_ut.cpp:
          Unit test for unbounded_value_sequence.

        * tests/Sequence_Unit_Tests/value_sequence_tester.hpp:
          Refactor common code shared by bounded_value_sequence_ut.cpp and
          unbounded_value_sequence_ut.cpp

        * tests/Sequence_Unit_Tests/testing_allocation_traits.hpp:
          Specialize the allocation traits in a form suitable for
          testing.  The unit tests make the traits raise exceptions in
          certain tests, and they can count how many times certain
          functions are called.

        * tests/Sequence_Unit_Tests/testing_range_checking.hpp:
          Specializes the range_checking traits to raise an exception when
          an out-of-range access is attempted.

        * tests/Sequence_Unit_Tests/testing_exception.hpp:
          Exception raised by the testing traits.

        * tests/Sequence_Unit_Tests/allocation_traits.hpp:
          New file, implements the allocation traits for bounded and
          unbounded sequences.

        * tests/Sequence_Unit_Tests/value_traits.hpp:
          Implement the element manipulation traits for by-value types.

        * tests/Sequence_Unit_Tests/range_checking.hpp:
          New file, implements yet another trait to control what are the
          effects of accessing an index out of range.  The default
          implementation is a no-op, but applications can specialize the
          class to throw exceptions, call abort, phone your mom and call
          you names, whatever.

        * tests/Sequence_Unit_Tests/Sequence_Unit_Tests.mpc:
        * tests/Sequence_Unit_Tests/run_test.pl:
          Removed some projects, add new ones.

        * tests/Sequence_Unit_Tests/Bounded_Primitive_Types.cpp:
        * tests/Sequence_Unit_Tests/Unbounded_Primitive_Types.cpp:
          Removed, replaced by {bounded,unbounded}_value_sequence_ut.cpp

        * tests/Sequence_Unit_Tests/Bounded_Simple_Types.cpp:
        * tests/Sequence_Unit_Tests/Unbounded_Simple_Types.cpp:
          Updated to use TAO::{bounded,unbounded}_value_sequence
          vs. TAO::{bounded,unbounded}_sequence.

        * tests/Sequence_Unit_Tests/sequence.hpp:
          Removed, replaced by {bounded,unbounded}_value_sequence.hpp

        * tests/Sequence_Unit_Tests/sequence_traits.hpp:
          Removed, the traits have been broken up in multiple files.

Tue Sep 21 20:31:43 2004  Balachandran Natarajan  <bala@dre.vanderbilt.edu>

        * orbsvcs/orbsvcs/Log/LogRecordStore_persist.cpp:
        * orbsvcs/orbsvcs/Log/LogRecordStore_persist.h:
        * orbsvcs/orbsvcs/Log/PersistStore.cpp:

          Applied patches to Logging service provided by
          Thomas Girard <thomas dot g dot girard at free.fr>.

Tue Sep 21 07:19:29 2004  J.T. Conklin  <jtc@acorntoolworks.com>

        * tao/Makefile.am:

          Updated.

Mon Sep 20 07:00:15 2004  Carlos O'Ryan  <coryan@atdesk.com>

        * tests/Sequence_Unit_Tests/Bounded_Simple_Types.cpp:
        * tests/Sequence_Unit_Tests/Unbounded_Simple_Types.cpp:
          Use the argc/argv prototype for main, apparently the ACE
          renaming of main() does not work for the other standard
          prototype for main().

Sun Sep 19 14:19:06 2004  Carlos O'Ryan  <coryan@atdesk.com>

        * tests/Sequence_Unit_Tests/README:
        * tests/Sequence_Unit_Tests/Sequence_Unit_Tests.mpc:
          Unit tests for the CORBA sequence classes, we are currently
          replacing the implementation of CORBA sequence in TAO.  In good
          TDD form I am writing the tests first, and adding them to this
          directory.
          The initial implementations will also reside in this directory
          but the plan is to move them to the library once all the
          portability bugs are cleaned up.
          If you are interested in TDD you may want to check the code to
          see how I managed to test exceptions in operator new[] without
          introducing run-time overhead.  Likewise, the user can configure
          the range checking functions in CORBA sequences.

        * tests/Sequence_Unit_Tests/sequence_traits.hpp:
          Define trait class templates to implement sequences.  These
          traits can be partially of fully specialized by the user to
          modify the default behavior.

        * tests/Sequence_Unit_Tests/generic_sequence.hpp:
          Generic sequence implementation, currently implements bounded
          and unbounded sequences of self-managed types, but I expect to
          implement all sequences using a single class.  The variations
          between all the different sequence types will be factored out to
          trait classes.

        * tests/Sequence_Unit_Tests/sequence.hpp:
          The interface for unbounded and bounded sequences of
          self-managed types.

        * tests/Sequence_Unit_Tests/Bounded_Primitive_Types.cpp:
        * tests/Sequence_Unit_Tests/Unbounded_Primitive_Types.cpp:
          Unit tests for bounded and unbounded sequences.  They are based
          on the boost unit test framework, so they only compile if boost
          is configured.

        * tests/Sequence_Unit_Tests/Bounded_Simple_Types.cpp:
        * tests/Sequence_Unit_Tests/Unbounded_Simple_Types.cpp:
          Smoke test (basic compilation) for sequences of self-managed
          types.  They compile on all platforms.

        * tests/Sequence_Unit_Tests/run_test.pl:
          Run all the tests.

Sat Sep 18 19:32:55 2004  J.T. Conklin  <jtc@acorntoolworks.com>

        * orbavcs/orbsvcs/DsLogAdmin.idl:

          Changed to include "tao/TimeBase.pidl" instead of "TimeBase.idl"
          to avoid adding an otherwise unnecessary dependency on svc_utils
          project.

Sat Sep 18 17:16:23 2004  Olli Savia  <ops@iki.fi>

        * orbsvcs/ImplRepo_Service/ImR_Activator.cpp:
        * orbsvcs/ImplRepo_Service/ImR_Locator.cpp:
          Added explicit static template member instantiations.

Fri Sep 17 19:33:42 2004  J.T. Conklin  <jtc@acorntoolworks.com>

        * orbsvcs/orbsvcs/CosEvent.mpc:
        * orbsvcs/orbsvcs/CosNaming.mpc:
        * orbsvcs/orbsvcs/CosNotification.mpc:
        * orbsvcs/orbsvcs/CosTrading.mpc:
        * orbsvcs/orbsvcs/DsEventLogAdmin.mpc:
        * orbsvcs/orbsvcs/DsLogAdmin.mpc:
        * orbsvcs/orbsvcs/DsNotifyLogAdmin.mpc:
        * orbsvcs/orbsvcs/ec_typed_events_skel.mpb:

          Changed *_Skel projects to include generated template files in
          Header_Files, Inline_Files, and Template_Files.  MPC currently
          adds them to the client library, and we'll need them here when
          MPC (or the *.mpc files, whichever is wrong) is fixed.

Fri Sep 17 15:47:14 2004  Dale Wilson  <wilson_d@ociweb.com>

        * orbsvcs/orbsvcs/FTRT_GroupManager.idl:
        * orbsvcs/orbsvcs/PortableGroup.idl:
          Rename arguments that match corba types in a case
          sensitive compare.  The compiler didn't use to catch
          these.

Fri Sep 17 10:24:13 2004  Jeff Parsons <j.parsons@vanderbilt.edu>

        * TAO_IDL/ast/ast_operation.cpp:
        * TAO_IDL/fe/idl.yy:
        * TAO_IDL/fe/y.tab.cpp:

          Added code to case-compare declaration identifiers against
          references in the same scope, using the first component
          of the scoped name used in the reference. Specifically,
          this code was added for argument identifiers - it is
          already in place for other IDL constructs such as
          struct/union/exception members and declarations inside
          an interface. Thanks to Jules Colding <jules@tdcadsl.dk>
          for reporting the lack of a name clash when an IDL
          parameter identifier differs in spelling from its type
          only by case, and for sending in an example IDL file.

Fri Sep 17 07:22:01 2004  J.T. Conklin  <jtc@acorntoolworks.com>

        * TAO_IDL/be/be_visitor_typecode/typecode_defn.cpp:

          Fixed mismatches between printf formatting directives and
          parameter types.

Fri Sep 17 08:44:44 2004  Steve Totten  <totten_s@ociweb.com>

        * tao/PortableServer/POA.cpp:
          Fixed a typo in a debug message.

        * orbsvcs/tests/ImplRepo/run_test.pl:
        * orbsvcs/tests/ImplRepo/NameService/run_test.pl:
        * orbsvcs/tests/ImplRepo/locked/run_test.pl:
        * orbsvcs/tests/InterfaceRepo/Application_Test/run_test.pl:
        * utils/nslist/run_test.pl:
          Added a call to PerlACE::Process::IgnoreExeSubDir() so
          these scripts can find the tao_imr, tao_ifr, nslist,
          etc. utilities in the $ACE_ROOT/bin directory (instead of
          looking in, for example, $ACE_ROOT/bin/Release).

Fri Sep 17 08:21:59 2004  Balachandran Natarajan  <bala@dre.vanderbilt.edu>

        * tao/Typecode.cpp:
        * tao/Typecode.h:
        * tao/Typecode.i:

          Reverted this change "Wed Sep  8 21:36:34 2004  Balachandran
          Natarajan  <bala@dre.vanderbilt.edu>". This change was causing
          more problems than I expected. TO start off the deep-copying of
          typecode seems busted. I am hesistant to spend time on this
          since bug 1637 reworks all of this anyway. If we don;t get 1637
          into the beta, I have to rethink the strategy. But the let the
          builds get better.

Thu Sep 16 20:48:33 2004  Ossama Othman  <ossama@dre.vanderbilt.edu>

        * orbsvcs/tests/Security/SecurityLevel1/README:
        * orbsvcs/tests/Security/SecurityLevel1/SLevel1_Test.idl:
        * orbsvcs/tests/Security/SecurityLevel1/SLevel1_Test_i.cpp:
        * orbsvcs/tests/Security/SecurityLevel1/SLevel1_Test_i.h:
        * orbsvcs/tests/Security/SecurityLevel1/SecurityLevel1.mpc:
        * orbsvcs/tests/Security/SecurityLevel1/ca.pem:
        * orbsvcs/tests/Security/SecurityLevel1/client.conf:
        * orbsvcs/tests/Security/SecurityLevel1/client.conf.xml:
        * orbsvcs/tests/Security/SecurityLevel1/client.cpp:
        * orbsvcs/tests/Security/SecurityLevel1/client_cert.pem:
        * orbsvcs/tests/Security/SecurityLevel1/client_key.pem:
        * orbsvcs/tests/Security/SecurityLevel1/run_test.pl:
        * orbsvcs/tests/Security/SecurityLevel1/server.conf:
        * orbsvcs/tests/Security/SecurityLevel1/server.conf.xml:
        * orbsvcs/tests/Security/SecurityLevel1/server.cpp:
        * orbsvcs/tests/Security/SecurityLevel1/server_cert.pem:
        * orbsvcs/tests/Security/SecurityLevel1/server_key.pem:

          Removed this test.  The SecurityLevel1 IDL module is no longer
          supported by TAO.  It contains a fairly useless interface.  Use
          the SecurityLevel3 API instead.

Fri Sep 17 00:11:18 2004  Olli Savia  <ops@iki.fi>

        * orbsvcs/PSS/PSDL_Scope.cpp:
        * orbsvcs/orbsvcs/Notify/Properties.cpp:
        * orbsvcs/orbsvcs/Scheduler_Factory.cpp:
          Added explicit template instantiations.

Thu Sep 16 11:49:32 2004  Jeff Parsons <j.parsons@vanderbilt.edu>

        * TAO_IDL/be/be_visitor_argument/paramlist.cpp:

          Removed code that has been long commented out.

        * TAO_IDL/be/be_visitor_traits.cpp (visit_array):

          Removed unused code to generate an #ifdef guard based on the
          unaliased type name of the array element and all the dimensions.

        * TAO_IDL/be/be_visitor_arg_traits.cpp (visit_array):

          Added generation of #ifdef guard removed from the above visitor.
          This change eliminates a compile error when two arrays with
          identical element types are both used as operation parameters.
          Thanks to Jean-Christophe Cota
          <jean-christophe.cota@eurocontrol.int> for sending in the
          example IDL file that uncovered the bug.

        * tests/IDL_Test/array.idl:

          Added interface with an operation containing parameters of
          arrays with identical element types which already existed in
          the IDL file.

Thu Sep 16 11:03:47 2004  Balachandran Natarajan  <bala@dre.vanderbilt.edu>

        * orbsvcs/tests/Miop/McastHello/README:

          Upadted it again.

        * orbsvcs/tests/Miop/McastHello/client.conf:
        * orbsvcs/tests/Miop/McastHello/server.conf:

          Removed them from the repo. We don't need two.

        * orbsvcs/tests/Miop/McastHello/client.cpp:

          Added MIOP.h

        * orbsvcs/tests/Miop/McastHello/run_test.pl:

          Removed references to the two conf files.

        * orbsvcs/tests/Miop/McastHello/svc.conf:

          Checked in a single svc.conf file.

Thu Sep 16 10:09:20 2004  Jeff Parsons <j.parsons@vanderbilt.edu>

        * TAO_IDL/util/utl_scope.cpp (lookup_by_name_local):

          Reverted inadvertent checkin that changed the scope iterator
          instantiation parameters, and added a comment about why it
          needs to be the way it is (for lookup of sequence parameter
          in the deprecated declaration of a recursive type using an
          anonymous sequence). Thanks to Johnny Willemsen
          <jwillemsen@rememdy.nl> for reporting the problem in union.idl
          of IDL_Test, which contains such a recursive union.

Thu Sep 16 09:28:10 2004  Balachandran Natarajan  <bala@dre.vanderbilt.edu>

        * orbsvcs/orbsvcs/PortableGroup/MIOP.cpp:
        * orbsvcs/orbsvcs/PortableGroup/MIOP.h:

          New file that has a magic static constructor, which when added
          to the application source will load UIPMC protocl factory for
          static builds.

        * orbsvcs/orbsvcs/PortableGroup/PortableGroup_Loader.cpp:

          Cosmetic fixes.

        * orbsvcs/tests/Miop/McastHello/server.conf:

          Commented out the dynamic parts of the service
          configurator. Just retain the static directives.

        * orbsvcs/tests/Miop/McastHello/server.cpp:

          #included MIOP.h

        * orbsvcs/tests/Miop/McastHello/README:

          Updated the file with info on static and dynamic library
          configuration of MIOP.

          Thanks to  Rob Boyer <RBOYER at euphonix dot com> for motivating
          this change.

Thu Sep 16 10:55:12 UTC 2004  Johnny Willemsen  <jwillemsen@remedy.nl>

        * tao/RTCORBA/RTCORBA.pidl:
          Zapped include of orb.idl, not needed and reduces number of manual
          patching

        * tao/RTCORBA/RTCORBAC.{h,cpp,i,inl}:
          Regenerated and manually patched

        * tao/RTCORBA/diffs/RTCORBA.diff:
          Updated

Wed Sep 15 21:25:28 2004  Jeff Parsons <j.parsons@vanderbilt.edu>

        * TAO_IDL/ast/ast_root.cpp:
        * TAO_IDL/util/utl_scope.cpp:

          Fixed cleanup of root scope between IDL files when
          multiple IDL files are passed on the command line.
          The cleanup needs to remove all declarations and
          references except those for the predefined types,
          and there was an off-by-one error.


Tue Sep 14 17:12:41 2004  J.T. Conklin  <jtc@acorntoolworks.com>

        * orbsvcs/orbsvcs/Makefile.am:

          Updated.

        * orbsvcs/orbsvcs/CosConcurrency.mpc:
        * orbsvcs/orbsvcs/CosEvent.mpc:
        * orbsvcs/orbsvcs/CosLifeCycle.mpc:
        * orbsvcs/orbsvcs/CosLoadBalancing.mpc:
        * orbsvcs/orbsvcs/CosNaming.mpc:
        * orbsvcs/orbsvcs/CosNotification.mpc:
        * orbsvcs/orbsvcs/CosProperty.mpc:
        * orbsvcs/orbsvcs/CosTime.mpc:
        * orbsvcs/orbsvcs/CosTrading.mpc:
        * orbsvcs/orbsvcs/DsEventLogAdmin.mpc:
        * orbsvcs/orbsvcs/DsLogAdmin.mpc:
        * orbsvcs/orbsvcs/DsNotifyLogAdmin.mpc:
        * orbsvcs/orbsvcs/ETCL.mpc:
        * orbsvcs/orbsvcs/FTORB.mpc:
        * orbsvcs/orbsvcs/FaultTolerance.mpc:
        * orbsvcs/orbsvcs/FtRtEvent.mpc:
        * orbsvcs/orbsvcs/IFRService.mpc:
        * orbsvcs/orbsvcs/PortableGroup.mpc:
        * orbsvcs/orbsvcs/RTCORBAEvent.mpc:
        * orbsvcs/orbsvcs/RTEvent.mpc:
        * orbsvcs/orbsvcs/RTEventLogAdmin.mpc:
        * orbsvcs/orbsvcs/RTKokyuEvent.mpc:
        * orbsvcs/orbsvcs/RTOLDEvent.mpc:
        * orbsvcs/orbsvcs/RTSched.mpc:
        * orbsvcs/orbsvcs/RTSchedEvent.mpc:
        * orbsvcs/orbsvcs/RT_Notification.mpc:
        * orbsvcs/orbsvcs/SSLIOP.mpc:
        * orbsvcs/orbsvcs/Security.mpc:
        * orbsvcs/orbsvcs/Svc_Utils.mpc:

          Added empty Inline_Files and Template_Files sections so that
          MPC doesn't decide to add unrelated files.

Tue Sep 14 13:03:54 2004  Dale Wilson  <wilson_d@ociweb.com>

        * orbsvcs/orbsvcs/CosNotifyChannelAdmin.idl:
        * orbsvcs/orbsvcs/CosNotifyComm.idl:
          Disable (via #ifdef) unimplemented "Pull" interfaces
          to reduce footprint and compilation time.

Tue Sep 14 06:27:15 2004  J.T. Conklin  <jtc@acorntoolworks.com>

        * docs/compiler.html:

          Fix typos.  Change *.i to *.inl.

Tue Sep 14 08:49:00 UTC 2004  Martin Corino  <mcorino@remedy.nl>

        * tao/orbsvcs/tests/AVStreams/Asynch_Three_Stage/input:
        * tao/orbsvcs/tests/AVStreams/Bidirectional_Flows/input:
        * tao/orbsvcs/tests/AVStreams/Component_Switching/input:
        * tao/orbsvcs/tests/AVStreams/Modify_QoS/input:
        * tao/orbsvcs/tests/AVStreams/Multiple_Flows/input:
        * tao/orbsvcs/tests/AVStreams/Pluggable_Flow_Protocol/input:
        * tao/orbsvcs/tests/AVStreams/Simple_Three_Stage/input:
        * tao/orbsvcs/tests/AVStreams/Simple_Two_Stage/input:
        * tao/orbsvcs/tests/AVStreams/Simple_Two_Stage_With_QoS/input:

          Removed achived test inputfiles because these are now generated (and
          removed) at runtime.

Tue Sep 14 08:41:00 UTC 2004  Martin Corino  <mcorino@remedy.nl>

        * bin/PerlACE/Run_test.pm:

          Added a new PerlACE::generate_test_file(<basename>, <size>) subroutine
          to be used with tests needing (large) testdata as input (like AVStreams
          tests).

        * tao/orbsvcs/tests/AVStreams/Asynch_Three_Stage/run_test.pl:
        * tao/orbsvcs/tests/AVStreams/Bidirectional_Flows/run_test.pl:
        * tao/orbsvcs/tests/AVStreams/Component_Switching/run_test.pl:
        * tao/orbsvcs/tests/AVStreams/Full_Profile/run_test.pl:
        * tao/orbsvcs/tests/AVStreams/Modify_QoS/run_test.pl:
        * tao/orbsvcs/tests/AVStreams/Multicast/run_test.pl:
        * tao/orbsvcs/tests/AVStreams/Multicast_Full_Profile/run_test.pl:
        * tao/orbsvcs/tests/AVStreams/Multiple_Flows/run_test.pl:
        * tao/orbsvcs/tests/AVStreams/Pluggable/run_test.pl:
        * tao/orbsvcs/tests/AVStreams/Pluggable_Flow_Protocol/run_test.pl:
        * tao/orbsvcs/tests/AVStreams/Simple_Three_Stage/run_test.pl:
        * tao/orbsvcs/tests/AVStreams/Simple_Two_Stage/run_test.pl:
        * tao/orbsvcs/tests/AVStreams/Simple_Two_Stage_With_QoS/run_test.pl:

          Changed to use the new PerlACE::generate_test_file() subroutine.

Mon Sep 13 15:56:53 2004  J.T. Conklin  <jtc@acorntoolworks.com>

        * orbsvcs/tests/Trading/Trading.mpc:

          Changed import_test and export_test projects to inherit from
          trading_serv.  Needed by Borland CBuilderX.

Mon Sep 13 12:18:49 2004  J.T. Conklin  <jtc@acorntoolworks.com>

        * orbsvcs/Logging_Service/Basic_Logging_Service/Makefile.am:
        * orbsvcs/Logging_Service/Event_Logging_Service/Makefile.am:
        * orbsvcs/Logging_Service/Notify_Logging_Service/Makefile.am:
        * orbsvcs/Logging_Service/RTEvent_Logging_Service/Makefile.am:

          Updated.

        * orbsvcs/Logging_Service/Basic_Logging_Service/Basic_Logging_Service.mpc:
        * orbsvcs/Logging_Service/Event_Logging_Service/Event_Logging_Service.mpc:
        * orbsvcs/Logging_Service/Notify_Logging_Service/Notify_Logging_Service.mpc:
        * orbsvcs/Logging_Service/RTEvent_Logging_Service/RTEvent_Logging_Service.mpc:

          Changed to inherit from core.mpb so services will be installed.

Mon Sep 13 12:06:20 2004  J.T. Conklin  <jtc@acorntoolworks.com>

        * orbsvcs/orbsvcs/Time/TAO_Time_Service_Clerk.h:

          Remove #include of Naming_Server.h and unused method
          name_server() to avoid introducing a dependency on the naming
          service implementation on some windows systems.

Mon Sep 13 11:47:13 2004  J.T. Conklin  <jtc@acorntoolworks.com>

        * orbsvcs/Logging_Service/Basic_Logging_Service/Makefile.am:
        * orbsvcs/Logging_Service/Event_Logging_Service/Makefile.am:
        * orbsvcs/Logging_Service/Notify_Logging_Service/Makefile.am:
        * orbsvcs/Logging_Service/RTEvent_Logging_Service/Makefile.am:
        * orbsvcs/orbsvcs/Makefile.am:

          Updated.

Mon Sep 13 06:40:36 2004  J.T. Conklin  <jtc@acorntoolworks.com>

        * orbsvcs/orbsvcs/RTEventLogAdmin.mpc:

          Changed to inherit from dslogadmin_serv.

        * orbsvcs/orbsvcs/DsLogAdmin.mpc:

          Changed to inherit from svc_utils.

Mon Sep 13 12:29:12 UTC 2004  Martin Corino  <mcorino@remedy.nl>

        * tao/orbsvcs/tests/AVStreams/Asynch_Three_Stage/run_test.pl:
        * tao/orbsvcs/tests/AVStreams/Bidirectional_Flows/run_test.pl:
        * tao/orbsvcs/tests/AVStreams/Component_Switching/run_test.pl:
        * tao/orbsvcs/tests/AVStreams/Full_Profile/run_test.pl:
        * tao/orbsvcs/tests/AVStreams/Modify_QoS/run_test.pl:
        * tao/orbsvcs/tests/AVStreams/Multicast/run_test.pl:
        * tao/orbsvcs/tests/AVStreams/Multicast_Full_Profile/run_test.pl:
        * tao/orbsvcs/tests/AVStreams/Multiple_Flows/run_test.pl:
        * tao/orbsvcs/tests/AVStreams/Pluggable/run_test.pl:
        * tao/orbsvcs/tests/AVStreams/Pluggable_Flow_Protocol/run_test.pl:
        * tao/orbsvcs/tests/AVStreams/Simple_Three_Stage/run_test.pl:
        * tao/orbsvcs/tests/AVStreams/Simple_Two_Stage/run_test.pl:
        * tao/orbsvcs/tests/AVStreams/Simple_Two_Stage_With_QoS/run_test.pl:

          Added generation of input datafiles to testscripts.
          All these scripts now generate an input file of ~100Kb when started,
          deleting the file when the test has finished.

Mon Sep 13 09:01:12 UTC 2004  Johnny Willemsen  <jwillemsen@remedy.nl>

        * tao/UShortSeqC.h:
          Explictly export the base template, to fix duplicate link errors
          when linking DsAdmin. This is a workaround for a bug in the vc7
          compiler.

Sun Sep 12 17:08:17 2004  J.T. Conklin  <jtc@acorntoolworks.com>

        * orbsvcs/Logging_Service/Basic_Logging_Service/Basic_Logging_Service.mpc:
        * orbsvcs/Logging_Service/Event_Logging_Service/Event_Logging_Service.mpc:
        * orbsvcs/Logging_Service/Notify_Logging_Service/Notify_Logging_Service.mpc:
        * orbsvcs/examples/Log/Event/Log_Event.mpc:
        * orbsvcs/examples/Log/Notify/Log_Notify.mpc:

          Update *.mpc files to reflect new libraries.

        * orbsvcs/orbsvcs/Log/BasicLogFactory_i.h:
        * orbsvcs/orbsvcs/Log/BasicLog_i.h:
        * orbsvcs/orbsvcs/Log/EventLogConsumer.h:
        * orbsvcs/orbsvcs/Log/EventLogFactory_i.h:
        * orbsvcs/orbsvcs/Log/EventLogNotification.h:
        * orbsvcs/orbsvcs/Log/EventLog_i.h:
        * orbsvcs/orbsvcs/Log/Iterator_i.h:
        * orbsvcs/orbsvcs/Log/LogMgr_i.h:
        * orbsvcs/orbsvcs/Log/LogNotification.h:
        * orbsvcs/orbsvcs/Log/LogRecordStore.h:
        * orbsvcs/orbsvcs/Log/LogRecordStore_persist.h:
        * orbsvcs/orbsvcs/Log/Log_Constraint_Interpreter.h:
        * orbsvcs/orbsvcs/Log/Log_Constraint_Visitors.h:
        * orbsvcs/orbsvcs/Log/Log_i.h:
        * orbsvcs/orbsvcs/Log/NotifyLogConsumer.h:
        * orbsvcs/orbsvcs/Log/NotifyLogFactory_i.h:
        * orbsvcs/orbsvcs/Log/NotifyLogNotification.h:
        * orbsvcs/orbsvcs/Log/NotifyLog_i.h:
        * orbsvcs/orbsvcs/Log/PersistStore.h:

          Changed #include "*_export.h" to "*_serv_export.h"; Renamed
          TAO_*_Export to TAO_*_Serv_Export.

        * orbsvcs/orbsvcs/Log/eventlog_serv_export.h:
        * orbsvcs/orbsvcs/Log/eventlog_skel_export.h:
        * orbsvcs/orbsvcs/Log/log_serv_export.h:
        * orbsvcs/orbsvcs/Log/log_skel_export.h:
        * orbsvcs/orbsvcs/Log/notifylog_serv_export.h:
        * orbsvcs/orbsvcs/Log/notifylog_skel_export.h:
        * orbsvcs/orbsvcs/DsEventLogAdmin.rc:
        * orbsvcs/orbsvcs/DsNotifyLogAdmin.rc:

          New files.

        * orbsvcs/orbsvcs/DsEventLogAdmin.mpc:

          Split Event Logging Service into three libraries:
          DsEventLogAdmin, DsEventLogAdmin_Skel, and
          DsEventLogAdmin_Serv for client stubs, servant skeletons, and
          service implementation respectively.

        * orbsvcs/orbsvcs/DsLogAdmin.mpc:

          Split Logging Service into three libraries:
          DsLogAdmin, DsLogAdmin_Skel, and DsLogAdmin_Serv for client
          stubs, servant skeletons, and service implementation
          respectively.

        * orbsvcs/orbsvcs/DsNotifyLogAdmin.mpc:

          Split Notify Logging Service into three libraries:
          DsNotifyLogAdmin, DsNotifyLogAdmin_Skel, and
          DsNotifyLogAdmin_Serv for client stubs, servant skeletons, and
          service implementation respectively.

Sun Sep 12 14:38:12 UTC 2004  Johnny Willemsen  <jwillemsen@remedy.nl>

        * tests/Leader_Followers/client.cpp:
          Changed type of the sleep_ member from u_long to long, to fix
          warnings in our HPUX 64bit build.

Sat Sep 11 19:43:40 2004  J.T. Conklin  <jtc@acorntoolworks.com>

        * orbsvcs/orbsvcs/Makefile.am:
        * orbsvcs/tests/CosEvent/Basic/Makefile.am:
        * orbsvcs/tests/FT_App/Makefile.am:
        * tao/Makefile.am:

          Updated.

Sat Sep 11 12:41:22 2004  Steve Totten  <totten_s@ociweb.com>

        * orbsvcs/tests/ImplRepo/run_test.pl:
        * orbsvcs/tests/ImplRepo/NameService/run_test.pl:
        * orbsvcs/tests/ImplRepo/locked/run_test.pl:
        * utils/nslist/run_test.pl:
          Removed some trailing blanks and tab characters from these
          files.

Sat Sep 11 12:25:07 2004  Steve Totten  <totten_s@ociweb.com>

        * orbsvcs/ImplRepo_Service/ImplRepo_Service.mpc:
        * utils/NamingViewer/NamingViewer.mpc:
        * utils/nslist/nslist.mpc:
          Modified MPC files for the following TAO utilities to make
          sure the executables are installed in $ACE_ROOT/bin:
          - tao_imr
          - nslist
          - nsdel
          - nsadd
          - NamingViewer

        * orbsvcs/tests/ImplRepo/run_test.pl:
        * orbsvcs/tests/ImplRepo/NameService/run_test.pl:
        * orbsvcs/tests/ImplRepo/locked/run_test.pl:
        * orbsvcs/tests/InterfaceRepo/Application_Test/run_test.pl:
        * utils/nslist/run_test.pl:
          Also modified various test scripts that invoke these
          utilities to get them from $ACE_ROOT/bin.

Sat Sep 11 08:47:58 2004  J.T. Conklin  <jtc@acorntoolworks.com>

        * orbsvcs/orbsvcs/Notify/Properties.h:

          Changed to use TAO_NOTIFY_SERV_SINGLETON_DECLARE.

        * orbsvcs/orbsvcs/Log/NotifyLogNotification.h:

          Removed #include of CosNamingC.h.  It isn't used, but requires
          linking with naming client library with some windows compilers.

Sat Sep 11 00:44:34 2004  Olli Savia  <ops@iki.fi>

        * TAO_IDL/ast/ast_module.cpp:
          Changed NULL to 0 to silence compile time warning.

Fri Sep 10 12:28:52 2004  J.T. Conklin  <jtc@acorntoolworks.com>

        * orbsvcs/tests/Trading/Trading.mpc:

          Changed colocated_test project to inherit from trading_serv.

          Changed import_test and export_test projects to inherit from
          portableserver.

        * orbsvcs/tests/Notify/Test_Filter/Test_Filter.mpc:

          Changed project to inherit from notification_skel.

        * orbsvcs/examples/CosEC/RtEC_Based/bin/CosEC_RtEC_Based_bin.mpc:

          Changed project to inherit from naming.

Fri Sep 10 09:06:42 2004  J.T. Conklin  <jtc@acorntoolworks.com>

        * orbsvcs/orbsvcs/ec_typed_events_serv.mpb:
        * orbsvcs/orbsvcs/ec_typed_events_skel.mpb:

          Moved dependency on dynamicinterface and ifr_client from _skel
          to _serv.

Thu Sep  9 19:26:40 2004  J.T. Conklin  <jtc@acorntoolworks.com>

        * orbsvcs/tests/CosEvent/lib/CosEvent_lib.mpc:

          Changed project to inherit from event_skel.

Thu Sep  9 19:21:21 2004  J.T. Conklin  <jtc@acorntoolworks.com>

        * orbsvcs/tests/Notify/lib/Notify_lib.mpc:

          Changed project to inherit from svc_utils.

Thu Sep  9 19:18:11 2004  J.T. Conklin  <jtc@acorntoolworks.com>

        * orbsvcs/orbsvcs/RT_Notification.mpc:

          Changed project to inherit from notify_serv.  Removed
          unused dependency on dynamicany and svc_utils.

Thu Sep  9 19:13:30 2004  J.T. Conklin  <jtc@acorntoolworks.com>

        * orbsvcs/examples/Log/Event/Log_Event.mpc:

          Changed projects to inherit from naming.

Thu Sep  9 19:09:39 2004  J.T. Conklin  <jtc@acorntoolworks.com>

        * orbsvcs/examples/CosEC/TypedSimple/CosEC_TypedSimple.mpc:

          Changed projects to inherit from event_skel and naming.

Thu Sep  9 18:46:20 2004  J.T. Conklin  <jtc@acorntoolworks.com>

        * orbsvcs/examples/CosEC/RtEC_Based/lib/CosEC_RtEC_Based_lib.mpc:

          Changed project to inherit from event_skel.

Thu Sep  9 18:30:56 2004  J.T. Conklin  <jtc@acorntoolworks.com>

        * examples/Simple/time-date/Simple_time_date.mpc:

          Changed client project to inherit from portableserver.  It
          doesn't really use it, but Simple_util.h #includes
          "PortableServer/PortableServer.h", which forces it
          to be resolved.

        * orbsvcs/examples/CosEC/Factory/CosEC_Factory.mpc:

          Added exename definitions so that programs, not libraries, are
          built.

          Added main.cpp to FactoryServer project's Source_Files.

          Changed FactoryServer project to inherit from event_serv.

Thu Sep  9 17:24:29 2004  J.T. Conklin  <jtc@acorntoolworks.com>

        * orbsvcs/orbsvcs/Notify/Notify_Extensions.h:

          Revert change:
          Wed Sep  8 12:15:18 2004  J.T. Conklin  <jtc@acorntoolworks.com>

          for this file only.  This is actually part of the notication
          client stub library.

Thu Sep  9 16:16:48 2004  Ossama Othman  <ossama@dre.vanderbilt.edu>

        * tao/ORB.cpp:
        * tao/TAO_Singleton_Manager.h:
        * tao/TAO_Singleton_Manager.cpp:

          Reintroduced TAO's unexpected exception handler.  It will be
          removed once again once the skeleton refactoring work is
          committed.

Thu Sep  9 15:57:30 2004  Ossama Othman  <ossama@dre.vanderbilt.edu>

        * tao/DLL_ORB.h:
        * tao/DLL_ORB.inl:
        * tao/DLL_ORB.cpp:

          Removed these files.  They have been deprecated for a few
          years.  See the `tests/DLL_ORB' test to get an idea of how to
          use DLL ORB functionality without explicitly linking the TAO
          library.  Thanks to Bala for the reminder.

        * tao/Makefile.am (ORB_Core):
        * tao/tao.mpc (Source_Files):

          Removed `DLL_ORB.cpp' from the source file list.

Thu Sep  9 11:53:40 2004  Jeff Parsons <j.parsons@vanderbilt.edu>

        * TAO_IDL/ast/ast_decl.cpp (version):

          Fixed logic of method that computes the version to handle
          the case where the repository ID is set with 'typeid'
          with no valid version at the end of the string.

Thu Sep  9 07:16:02 2004  J.T. Conklin  <jtc@acorntoolworks.com>

        * orbsvcs/orbsvcs/DsLogAdmin.mpc:
        * orbsvcs/orbsvcs/DsNotifyLogAdmin.mpc:

          Updated inheritance.

Thu Sep  9 07:05:20 2004  J.T. Conklin  <jtc@acorntoolworks.com>

        * orbsvcs/tests/Notify/lib/Notify_lib.mpc:

          Changed to inherit from notification_skel.

Thu Sep  9 06:46:00 2004  J.T. Conklin  <jtc@acorntoolworks.com>

        * orbsvcs/orbsvcs/CosNotification.mpc:

          Changed CosNotification_Skel project to inherit from event_skel.

Thu Sep  9 06:15:38 2004  J.T. Conklin  <jtc@acorntoolworks.com>

        * orbsvcs/FT_ReplicationManager/FT_ReplicationManager.mpc:

          Updated library project to inherit from naming_skel.

Thu Sep  9 05:49:49 2004  J.T. Conklin  <jtc@acorntoolworks.com>

        * orbsvcs/Concurrency_Service/Makefile.am:
        * orbsvcs/CosEvent_Service/Makefile.am:
        * orbsvcs/Dump_Schedule/Makefile.am:
        * orbsvcs/Event_Service/Makefile.am:
        * orbsvcs/FTRT_Event_Service/Event_Service/Makefile.am:
        * orbsvcs/FTRT_Event_Service/Factory_Service/Makefile.am:
        * orbsvcs/FTRT_Event_Service/Gateway_Service/Makefile.am:
        * orbsvcs/FT_ReplicationManager/Makefile.am:
        * orbsvcs/Fault_Detector/Makefile.am:
        * orbsvcs/Fault_Notifier/Makefile.am:
        * orbsvcs/IFR_Service/Makefile.am:
        * orbsvcs/LifeCycle_Service/Makefile.am:
        * orbsvcs/LoadBalancer/Makefile.am:
        * orbsvcs/Logging_Service/Basic_Logging_Service/Makefile.am:
        * orbsvcs/Logging_Service/Event_Logging_Service/Makefile.am:
        * orbsvcs/Logging_Service/Notify_Logging_Service/Makefile.am:
        * orbsvcs/Logging_Service/RTEvent_Logging_Service/Makefile.am:
        * orbsvcs/Naming_Service/Makefile.am:
        * orbsvcs/Notify_Service/Makefile.am:
        * orbsvcs/Scheduling_Service/Makefile.am:
        * orbsvcs/Time_Service/Makefile.am:
        * orbsvcs/Trading_Service/Makefile.am:
        * orbsvcs/orbsvcs/Makefile.am:

          Updated for orbsvcs library refactor.

Thu Sep  9 05:08:57 2004  J.T. Conklin  <jtc@acorntoolworks.com>

        * orbsvcs/orbsvcs/CosEvent.mpc:
        * orbsvcs/orbsvcs/PortableGroup.mpc:
        * orbsvcs/orbsvcs/RTSched.mpc:

          Updated.  Missing some dependencies now that naming.mpb is just
          client stub library.

Wed Sep  8 22:08:29 2004  J.T. Conklin  <jtc@acorntoolworks.com>

        * orbsvcs/Logging_Service/Basic_Logging_Service/Basic_Logging_Service.mpc:
        * orbsvcs/Logging_Service/Event_Logging_Service/Event_Logging_Service.mpc:
        * orbsvcs/Logging_Service/RTEvent_Logging_Service/RTEvent_Logging_Service.mpc:
          Added exename definition so that programs, not libraries, are built.

Wed Sep  8 21:31:40 2004  J.T. Conklin  <jtc@acorntoolworks.com>

        * orbsvcs/orbsvcs/ec_typed_events.mpb:

          Added idlflags setting for stub and skeleton export headers and
          macros.  Fixed typos in the lists of source, header, and inline
          files.

Wed Sep  8 21:36:34 2004  Balachandran Natarajan  <bala@dre.vanderbilt.edu>

        * tao/Typecode.cpp:
        * tao/Typecode.h:
        * tao/Typecode.i:

          For long we got away with wrong typecode memory
          manipulation. The fundamental problem was that somewhere
          inbetween we started manipulating the lifetimes of stack based
          typecodes that are generated in the stub and skeleton code. This
          fix basically makes sure that we don't do that. The changes are
          as follows.

          - Made _incr_ref () and _decr_ref () protected since
            clients should not be using this directly.

          - The _duplicate () will check for stack based typecodes,
            allocate a typecode off the heap if the incoming tyoecodes are
            stack based. If the typecode is heap allocated we just increment
            the refcount.

          - The _release () decrements the ref count if it is off the heap
            and is a no-op otherwise.

          The Typecode had a boolean flag orb_owns_ which was supposed to
          be used for the above, but we never used it for some reason.

        * tao/TypeCodeFactory/TypeCodeFactory_i.cpp:

          Set the orb_owns_ flag while creating a new typecode off the
          heap.

          Thanks to JT Conklin for pointing out the problem.

Wed Sep  8 12:51:53 2004  J.T. Conklin  <jtc@acorntoolworks.com>

        * orbsvcs/orbsvcs/CosEvent/CEC_TypedProxyPushConsumer.h:

          Added #include "event_serv_export.h".

Wed Sep  8 12:15:18 2004  J.T. Conklin  <jtc@acorntoolworks.com>

        * orbsvcs/orbsvcs/CosEvent/CEC_ConsumerAdmin.h:
        * orbsvcs/orbsvcs/CosEvent/CEC_ConsumerControl.h:
        * orbsvcs/orbsvcs/CosEvent/CEC_Default_Factory.cpp:
        * orbsvcs/orbsvcs/CosEvent/CEC_Default_Factory.h:
        * orbsvcs/orbsvcs/CosEvent/CEC_Dispatching.h:
        * orbsvcs/orbsvcs/CosEvent/CEC_Dispatching_Task.h:
        * orbsvcs/orbsvcs/CosEvent/CEC_EventChannel.h:
        * orbsvcs/orbsvcs/CosEvent/CEC_Event_Loader.cpp:
        * orbsvcs/orbsvcs/CosEvent/CEC_Event_Loader.h:
        * orbsvcs/orbsvcs/CosEvent/CEC_Factory.h:
        * orbsvcs/orbsvcs/CosEvent/CEC_MT_Dispatching.h:
        * orbsvcs/orbsvcs/CosEvent/CEC_ProxyPullConsumer.h:
        * orbsvcs/orbsvcs/CosEvent/CEC_ProxyPullSupplier.h:
        * orbsvcs/orbsvcs/CosEvent/CEC_ProxyPushConsumer.h:
        * orbsvcs/orbsvcs/CosEvent/CEC_ProxyPushSupplier.h:
        * orbsvcs/orbsvcs/CosEvent/CEC_Pulling_Strategy.h:
        * orbsvcs/orbsvcs/CosEvent/CEC_Reactive_ConsumerControl.h:
        * orbsvcs/orbsvcs/CosEvent/CEC_Reactive_Pulling_Strategy.h:
        * orbsvcs/orbsvcs/CosEvent/CEC_Reactive_SupplierControl.h:
        * orbsvcs/orbsvcs/CosEvent/CEC_SupplierAdmin.h:
        * orbsvcs/orbsvcs/CosEvent/CEC_SupplierControl.h:
        * orbsvcs/orbsvcs/CosEvent/CEC_TypedConsumerAdmin.h:
        * orbsvcs/orbsvcs/CosEvent/CEC_TypedEvent.h:
        * orbsvcs/orbsvcs/CosEvent/CEC_TypedEventChannel.h:
        * orbsvcs/orbsvcs/CosEvent/CEC_TypedProxyPushConsumer.h:
        * orbsvcs/orbsvcs/CosEvent/CEC_TypedSupplierAdmin.h:
        * orbsvcs/orbsvcs/Naming/Entries.h:
        * orbsvcs/orbsvcs/Naming/Hash_Naming_Context.h:
        * orbsvcs/orbsvcs/Naming/Naming_Context_Interface.h:
        * orbsvcs/orbsvcs/Naming/Naming_Loader.cpp:
        * orbsvcs/orbsvcs/Naming/Naming_Loader.h:
        * orbsvcs/orbsvcs/Naming/Naming_Server.h:
        * orbsvcs/orbsvcs/Naming/Persistent_Context_Index.h:
        * orbsvcs/orbsvcs/Naming/Persistent_Entries.h:
        * orbsvcs/orbsvcs/Naming/Persistent_Naming_Context.h:
        * orbsvcs/orbsvcs/Naming/Storable_Naming_Context.h:
        * orbsvcs/orbsvcs/Naming/Storable_Naming_Context_Activator.h:
        * orbsvcs/orbsvcs/Naming/Transient_Naming_Context.h:
        * orbsvcs/orbsvcs/Notify/Admin.h:
        * orbsvcs/orbsvcs/Notify/AdminProperties.h:
        * orbsvcs/orbsvcs/Notify/Buffering_Strategy.h:
        * orbsvcs/orbsvcs/Notify/Builder.h:
        * orbsvcs/orbsvcs/Notify/Consumer.h:
        * orbsvcs/orbsvcs/Notify/ConsumerAdmin.h:
        * orbsvcs/orbsvcs/Notify/Consumer_Map.h:
        * orbsvcs/orbsvcs/Notify/Container_T.h:
        * orbsvcs/orbsvcs/Notify/CosNotify_Initializer.h:
        * orbsvcs/orbsvcs/Notify/CosNotify_Service.cpp:
        * orbsvcs/orbsvcs/Notify/CosNotify_Service.h:
        * orbsvcs/orbsvcs/Notify/Default_Factory.cpp:
        * orbsvcs/orbsvcs/Notify/Default_Factory.h:
        * orbsvcs/orbsvcs/Notify/ETCL_Filter.h:
        * orbsvcs/orbsvcs/Notify/ETCL_FilterFactory.cpp:
        * orbsvcs/orbsvcs/Notify/ETCL_FilterFactory.h:
        * orbsvcs/orbsvcs/Notify/Event.h:
        * orbsvcs/orbsvcs/Notify/EventChannel.h:
        * orbsvcs/orbsvcs/Notify/EventChannelFactory.h:
        * orbsvcs/orbsvcs/Notify/EventType.h:
        * orbsvcs/orbsvcs/Notify/EventTypeSeq.h:
        * orbsvcs/orbsvcs/Notify/Event_Manager.h:
        * orbsvcs/orbsvcs/Notify/Event_Map_Entry_T.h:
        * orbsvcs/orbsvcs/Notify/Event_Map_T.h:
        * orbsvcs/orbsvcs/Notify/Factory.h:
        * orbsvcs/orbsvcs/Notify/FilterAdmin.h:
        * orbsvcs/orbsvcs/Notify/FilterFactory.h:
        * orbsvcs/orbsvcs/Notify/Find_Worker_T.h:
        * orbsvcs/orbsvcs/Notify/ID_Factory.h:
        * orbsvcs/orbsvcs/Notify/Method_Request.h:
        * orbsvcs/orbsvcs/Notify/Method_Request_Dispatch.h:
        * orbsvcs/orbsvcs/Notify/Method_Request_Dispatch_T.h:
        * orbsvcs/orbsvcs/Notify/Method_Request_Event.h:
        * orbsvcs/orbsvcs/Notify/Method_Request_Lookup.h:
        * orbsvcs/orbsvcs/Notify/Method_Request_Lookup_T.h:
        * orbsvcs/orbsvcs/Notify/Method_Request_Shutdown.h:
        * orbsvcs/orbsvcs/Notify/Method_Request_Updates.h:
        * orbsvcs/orbsvcs/Notify/Method_Request_Updates_T.h:
        * orbsvcs/orbsvcs/Notify/Notify_Constraint_Interpreter.h:
        * orbsvcs/orbsvcs/Notify/Notify_Constraint_Visitors.h:
        * orbsvcs/orbsvcs/Notify/Notify_Default_CO_Factory.h:
        * orbsvcs/orbsvcs/Notify/Notify_Default_Collection_Factory.h:
        * orbsvcs/orbsvcs/Notify/Notify_Default_EMO_Factory.h:
        * orbsvcs/orbsvcs/Notify/Notify_Default_POA_Factory.h:
        * orbsvcs/orbsvcs/Notify/Notify_EventChannelFactory_i.h:
        * orbsvcs/orbsvcs/Notify/Notify_Extensions.h:
        * orbsvcs/orbsvcs/Notify/Object.h:
        * orbsvcs/orbsvcs/Notify/POA_Helper.h:
        * orbsvcs/orbsvcs/Notify/Peer.h:
        * orbsvcs/orbsvcs/Notify/Properties.h:
        * orbsvcs/orbsvcs/Notify/Property.h:
        * orbsvcs/orbsvcs/Notify/PropertySeq.h:
        * orbsvcs/orbsvcs/Notify/Property_Boolean.h:
        * orbsvcs/orbsvcs/Notify/Property_T.h:
        * orbsvcs/orbsvcs/Notify/Proxy.h:
        * orbsvcs/orbsvcs/Notify/ProxyConsumer.h:
        * orbsvcs/orbsvcs/Notify/ProxyConsumer_T.h:
        * orbsvcs/orbsvcs/Notify/ProxySupplier.h:
        * orbsvcs/orbsvcs/Notify/ProxySupplier_T.h:
        * orbsvcs/orbsvcs/Notify/Proxy_T.h:
        * orbsvcs/orbsvcs/Notify/QoSProperties.h:
        * orbsvcs/orbsvcs/Notify/Reactive_Task.h:
        * orbsvcs/orbsvcs/Notify/Refcountable.h:
        * orbsvcs/orbsvcs/Notify/Refcountable_Guard_T.h:
        * orbsvcs/orbsvcs/Notify/Seq_Worker_T.h:
        * orbsvcs/orbsvcs/Notify/Service.h:
        * orbsvcs/orbsvcs/Notify/Subscription_Change_Worker.h:
        * orbsvcs/orbsvcs/Notify/Supplier.h:
        * orbsvcs/orbsvcs/Notify/SupplierAdmin.h:
        * orbsvcs/orbsvcs/Notify/Supplier_Map.h:
        * orbsvcs/orbsvcs/Notify/ThreadPool_Task.h:
        * orbsvcs/orbsvcs/Notify/Timer.h:
        * orbsvcs/orbsvcs/Notify/Timer_Queue.h:
        * orbsvcs/orbsvcs/Notify/Timer_Reactor.h:
        * orbsvcs/orbsvcs/Notify/Worker_Task.h:
        * orbsvcs/orbsvcs/Notify/Any/AnyEvent.h:
        * orbsvcs/orbsvcs/Notify/Any/CosEC_ProxyPushConsumer.h:
        * orbsvcs/orbsvcs/Notify/Any/CosEC_ProxyPushSupplier.h:
        * orbsvcs/orbsvcs/Notify/Any/ProxyPushConsumer.h:
        * orbsvcs/orbsvcs/Notify/Any/ProxyPushSupplier.h:
        * orbsvcs/orbsvcs/Notify/Any/PushConsumer.h:
        * orbsvcs/orbsvcs/Notify/Any/PushSupplier.h:
        * orbsvcs/orbsvcs/Notify/Sequence/Batch_Buffering_Strategy.h:
        * orbsvcs/orbsvcs/Notify/Sequence/SequenceProxyPushConsumer.h:
        * orbsvcs/orbsvcs/Notify/Sequence/SequenceProxyPushSupplier.h:
        * orbsvcs/orbsvcs/Notify/Sequence/SequencePushConsumer.h:
        * orbsvcs/orbsvcs/Notify/Sequence/SequencePushSupplier.h:
        * orbsvcs/orbsvcs/Notify/Structured/StructuredEvent.h:
        * orbsvcs/orbsvcs/Notify/Structured/StructuredProxyPushConsumer.h:
        * orbsvcs/orbsvcs/Notify/Structured/StructuredProxyPushSupplier.h:
        * orbsvcs/orbsvcs/Notify/Structured/StructuredPushConsumer.h:
        * orbsvcs/orbsvcs/Notify/Structured/StructuredPushSupplier.h:
        * orbsvcs/orbsvcs/Trader/Constraint_Interpreter.h:
        * orbsvcs/orbsvcs/Trader/Constraint_Nodes.h:
        * orbsvcs/orbsvcs/Trader/Constraint_Visitors.h:
        * orbsvcs/orbsvcs/Trader/Interpreter.h:
        * orbsvcs/orbsvcs/Trader/Interpreter_Utils.h:
        * orbsvcs/orbsvcs/Trader/Service_Type_Repository.h:
        * orbsvcs/orbsvcs/Trader/Trader.h:
        * orbsvcs/orbsvcs/Trader/Trader_Constraint_Visitors.h:
        * orbsvcs/orbsvcs/Trader/Trader_Utils.h:
        * orbsvcs/orbsvcs/Trader/Trading_Loader.cpp:
        * orbsvcs/orbsvcs/Trader/Trading_Loader.h:

          Changed #include "*_export.h" to "*_serv_export.h"; Renamed
          TAO_*_Export to TAO_*_Serv_Export.

        * orbsvcs/orbsvcs/CosEvent/event_serv_export.h:
        * orbsvcs/orbsvcs/Naming/naming_serv_export.h:
        * orbsvcs/orbsvcs/Notify/notify_serv_export.h:
        * orbsvcs/orbsvcs/Trader/trading_serv_export.h:

          New files.

        * orbsvcs/orbsvcs/CosEvent.mpc:
        * orbsvcs/orbsvcs/CosNaming.mpc:
        * orbsvcs/orbsvcs/CosNotification.mpc:
        * orbsvcs/orbsvcs/CosTrading.mpc:

          Changed to use different export macros service implementations.

Wed Sep  8 11:03:47 2004  J.T. Conklin  <jtc@acorntoolworks.com>

        * orbsvcs/orbsvcs/CosEvent/event_skel_export.h:
        * orbsvcs/orbsvcs/Naming/naming_skel_export.h:
        * orbsvcs/orbsvcs/Notify/notify_skel_export.h:
        * orbsvcs/orbsvcs/Trader/trading_skel_export.h:

          New files.

        * orbsvcs/orbsvcs/CosEvent.mpc:
        * orbsvcs/orbsvcs/CosNaming.mpc:
        * orbsvcs/orbsvcs/CosNotification.mpc:
        * orbsvcs/orbsvcs/CosTrading.mpc:

          Changed to use different export macros and export includes for
          stub and skeleton libraries.

Wed Sep  8 12:55:30 2004  Dale Wilson  <wilson_d@ociweb.com>

        * orbsvcs/orbsvcs/CosTrading.mpc:
          Add explicit Resource_Files sections to associate
          rc files with the correct project.

Wed Sep  8 09:53:02 2004  J.T. Conklin  <jtc@acorntoolworks.com>

        * orbsvcs/orbsvcs/LoadBalancing/LB_CPU_Load_Average_Monitor.cpp:

          Added support for getting load average on NetBSD.

Wed Sep  8 09:02:57 2004  J.T. Conklin  <jtc@acorntoolworks.com>

        * orbsvcs/orbsvcs/CosEvent.mpc:
        * orbsvcs/orbsvcs/CosNaming.mpc:
        * orbsvcs/orbsvcs/CosNotification.mpc:
        * orbsvcs/orbsvcs/CosTrading.mpc:

          Changed *_Skel project to inherit from portableserver.

Wed Sep  8 08:58:21 2004  J.T. Conklin  <jtc@acorntoolworks.com>

        * orbsvcs/orbsvcs/CosNotification.mpc:

          Fixed tipo -- the export macro was not changed when export
          header was.

Wed Sep  8 10:28:29 2004  Dale Wilson  <wilson_d@ociweb.com>

        * orbsvcs/orbsvcs/CosEvent.mpc:
        * orbsvcs/orbsvcs/CosNaming.mpc:
        * orbsvcs/orbsvcs/CosNotification.mpc:
          Add explicit Resource_Files sections to associate
          rc files with the correct project.

Wed Sep  8 10:22:39 2004  Jeff Parsons <j.parsons@vanderbilt.edu>

        * TAO_IDL/be/be_codegen.cpp:
        * TAO_IDL/be/be_visitor_root/root.cpp:

          Modified stream output to make sure a bare newline (with no
          whitespace) is added at the end of the generated source
          file containing Any operators and type codes (if the file
          is generated) both when explicit template instantiations are
          generated and when they are not. Thanks to Johnny Willemsen
          <jwillemsen@remedy.nl> for reporting the problem, for
          compilers that must have an empty newline at the end of
          each file.

Wed Sep  8 04:54:23 2004  J.T. Conklin  <jtc@acorntoolworks.com>

        * orbsvcs/orbsvcs/CosEvent.mpc:
        * orbsvcs/orbsvcs/CosNaming.mpc:
        * orbsvcs/orbsvcs/CosNotification.mpc:
        * orbsvcs/orbsvcs/CosTrading.mpc:

          Define TAO_*_BUILD_DLL macro for stub and skeleton libraries
          so that symbols will be exported for Windows builds.  I hope
          this will be enough so that separate #defines aren't needed
          for each library.  Thanks to Johnny Willemsen for help with
          this problem.

Tue Sep  7 21:48:40 2004  Ossama Othman  <ossama@dre.vanderbilt.edu>

        * tao/Utils/Server_Main.cpp:

          Removed redundant include guards around ace/Time_Value.h include
          directive.

Tue Sep  7 16:31:25 2004  J.T. Conklin  <jtc@acorntoolworks.com>

        * orbsvcs/tests/Notify/lib/EventChannel_Command.h:

          Removed #include of "orbsvcs/Notify/CosNotify_Initializer.h", as
          that requires the Notification Service implementation library to
          be pulled in.

        * orbsvcs/TAO_Service/svc.conf:
        * orbsvcs/examples/Notify/ThreadPool/notify.conf:
        * orbsvcs/tests/Notify/performance-tests/scripts/1_Path_Period_0_Lanes/cos_notify.conf:
        * orbsvcs/tests/Notify/performance-tests/scripts/1_Path_Period_0_Lanes/rt_notify.conf:
        * orbsvcs/tests/Notify/performance-tests/scripts/3_Path_Period_10ms_Lanes/cos_notify.conf:
        * orbsvcs/tests/Notify/performance-tests/scripts/3_Path_Period_10ms_Lanes/rt_notify.conf:
        * orbsvcs/tests/Notify/performance-tests/scripts/Max_Throughput/Colocated/colocated.conf:
        * orbsvcs/tests/Notify/performance-tests/scripts/Max_Throughput/Colocated_RTCORBA/colocated.conf:
        * orbsvcs/tests/Notify/performance-tests/scripts/Max_Throughput/Notify/notify.conf:
        * orbsvcs/tests/Notify/performance-tests/scripts/Max_Throughput/Notify_RTCORBA/notify.conf:
        * orbsvcs/tests/Notify/performance-tests/scripts/Paths_vs_Throughput/cos_notify.conf:
        * orbsvcs/tests/Notify/performance-tests/scripts/Paths_vs_Throughput/rt_notify.conf:

          Changed CosEvent, CosNaming, CosNotification, and CosTrading
          Service file/path names.

        * docs/tutorials/Quoter/Event_Service/Quoter_Event_Service.mpc:
        * docs/tutorials/Quoter/Simple/Impl-Repo/Quoter_Simple_Impl_Repo.mpc:
        * examples/Callback_Quoter/Callback_Quoter.mpc:
        * examples/Content_Server/SMI_Iterator/SMI_Iterator.mpc:
        * examples/Event_Comm/Event_Comm.mpc:
        * examples/Logging/Logging.mpc:
        * examples/Simple/bank/bank.mpc:
        * examples/Simple/echo/echo.mpc:
        * examples/Simple/grid/grid.mpc:
        * examples/Simple/time-date/Simple_time_date.mpc:
        * examples/Simple/time/time.mpc:
        * examples/ior_corbaloc/ior_corbaloc.mpc:
        * examples/mfc/client.mpc:
        * examples/mfc/server.mpc:
        * orbsvcs/Concurrency_Service/Concurrency_Service.mpc:
        * orbsvcs/CosEvent_Service/CosEvent_Service.mpc:
        * orbsvcs/FTRT_Event_Service/Factory_Service/FTRTEC_Factory_Service.mpc:
        * orbsvcs/FT_ReplicationManager/FT_ReplicationManager.mpc:
        * orbsvcs/Fault_Notifier/Fault_Notifier.mpc:
        * orbsvcs/LifeCycle_Service/LifeCycle_Service.mpc:
        * orbsvcs/Logging_Service/Notify_Logging_Service/Notify_Logging_Service.mpc:
        * orbsvcs/Naming_Service/Naming_Service.mpc:
        * orbsvcs/Notify_Service/Notify_Service.mpc:
        * orbsvcs/Time_Service/Time_Service.mpc:
        * orbsvcs/Trading_Service/Trading_Service.mpc:
        * orbsvcs/examples/CosEC/Factory/CosEC_Factory.mpc:
        * orbsvcs/examples/CosEC/RtEC_Based/bin/CosEC_RtEC_Based_bin.mpc:
        * orbsvcs/examples/CosEC/RtEC_Based/tests/Basic/CosEC_RtEC_Based_tests_Basic.mpc:
        * orbsvcs/examples/CosEC/RtEC_Based/tests/Multiple/CosEC_RtEC_Based_Mult.mpc:
        * orbsvcs/examples/CosEC/Simple/CosEC_Simple.mpc:
        * orbsvcs/examples/Notify/Filter/Notify_Filter.mpc:
        * orbsvcs/examples/Notify/Subscribe/Notify_Subscribe.mpc:
        * orbsvcs/orbsvcs/CosLifeCycle.mpc:
        * orbsvcs/orbsvcs/CosTime.mpc:
        * orbsvcs/orbsvcs/DsEventLogAdmin.mpc:
        * orbsvcs/tests/CosEvent/Basic/basiceventtestexe.mpb:
        * orbsvcs/tests/FT_App/FT_App.mpc:
        * orbsvcs/tests/IOR_MCast/IOR_MCast.mpc:
        * orbsvcs/tests/Interoperable_Naming/Interoperable_Naming.mpc:
        * orbsvcs/tests/Redundant_Naming/Redundant_Naming.mpc:
        * orbsvcs/tests/Simple_Naming/Simple_Naming.mpc:
        * orbsvcs/tests/Trading/Trading.mpc:
        * orbsvcs/tests/ior_corbaname/ior_corbaname.mpc:
        * performance-tests/POA/Demux/Demux.mpc:

          Update *.mpc and *.mpb files to reflect new libraries.  In many
          cases this required adding new base projects, as libraries were
          being linked in because of naming -- which was once the service
          implementation (and thus pulled in lots of other libraries) and
          is now just the Naming client stubs.

        * orbsvcs/orbsvcs/Event/Local_ESTypes.h:

          Removed #include of "orbsvcs/CosNaming.h".  The Event Service
          does not use/depend on the Naming Service.

        * orbsvcs/orbsvcs/CosEvent_Serv.rc:
        * orbsvcs/orbsvcs/CosEvent_Skel.rc:
        * orbsvcs/orbsvcs/CosNaming_Serv.rc:
        * orbsvcs/orbsvcs/CosNaming_Skel.rc:
        * orbsvcs/orbsvcs/CosNotification_Serv.rc:
        * orbsvcs/orbsvcs/CosNotification_Skel.rc:
        * orbsvcs/orbsvcs/CosTrading_Serv.rc:
        * orbsvcs/orbsvcs/CosTrading_Skel.rc:

          New files, resource files for new libraries.

        * orbsvcs/orbsvcs/ec_typed_events.mpb:

          Update to contain the additional source files, etc. for Event
          Service client stubs only.

        * orbsvcs/orbsvcs/ec_typed_events_serv.mpb:
        * orbsvcs/orbsvcs/ec_typed_events_skel.mpb:

          New files, containing the additional source files, etc. for the
          Event Service implementation and servant skeletons.

        * orbsvcs/orbsvcs/CosEvent.mpc:
          Split Event Service into three libraries:
          CosEvent, CosEvent_Skel, and CosEvent_Serv for client stubs,
          servant skeletons, and service implementation respectively.

        * orbsvcs/orbsvcs/CosNaming.mpc:
          Split Naming Service into three libraries:
          CosNaming, CosNaming_Skel, and CosNaming_Serv for client stubs,
          servant skeletons, and service implementation respectively.

        * orbsvcs/orbsvcs/CosNotification.mpc:
          Split Notification Service into three libraries:
          CosNotification, CosNotification_Skel, and CosNotification_Serv
          for client stubs, servant skeletons, and service implementation
          respectively.

        * orbsvcs/orbsvcs/CosTrading.mpc:
          Split Trading Service into three libraries:
          CosTrading, CosTrading_Skel, and CosTrading_Serv for client stubs,
          servant skeletons, and service implementation respectively.

Tue Sep  7 14:10:00 UTC 2004  Simon Massey  <simon.massey@prismtechnologies.com>

        * TAO/tao/Utils/Server_Main.cpp
          ACE_Time_Value class is used without necessary first including its
          definition in some build environments. Ensure that this class's
          header is included if it hasn't been so before this use here.

Mon Sep  6 22:59:11 2004  Ossama Othman  <ossama@dre.vanderbilt.edu>

        * TAO_IDL/be/be_codegen.cpp (gen_stub_src_includes):

          The UserException::_tao_{en,de}code() methods can throw a
          CORBA::MARSHAL exception so make sure that system exception is
          fully declared/defined by including
          "tao/SystemException.h".  However, only include
          "tao/SystemException.h" if a user exception was encountered and
          if we're not already including it in the stub header.  Thanks to
          Johnny Willemsen for reporting the problem.

Mon Sep  6 19:45:32 2004  Jeff Parsons <j.parsons@vanderbilt.edu>

        * TAO_IDL/be/be_visitor_ccm_pre_proc.cpp:
        * TAO_IDL/ast/ast_decl.cpp:

          Fixed a bug in the generation of repository ids for implied
          IDL event consumer interfaces.

Mon Sep  6 00:54:48 2004  Ossama Othman  <ossama@dre.vanderbilt.edu>

        * orbsvcs/LoadBalancer/LoadBalancer.mpc:

          For some reason this MPC file was configured to generate
          "CosLoadManager" and "CosLoadMonitor" libraries rather
          "LoadManager" and "LoadMonitor" executables, respectively; a
          complete departure from the pre-MPC "hand-written" Makefiles and
          project files.  Fixed this problem.  This should also fix the
          Load Balancer test failures in our daily automated regression
          tests.

Mon Sep  6 00:42:49 2004  Ossama Othman  <ossama@dre.vanderbilt.edu>

        * tao/Utils/Server_Main.cpp:

          Include "ace/Time_Value.h" to pull ACE_Time_Value class
          declaration.

          (Server_Main):

          Fixed emulated exception macro usage for CORBA::ORB_init()
          call within an ACE_TRY block, i.e. "ACE_TRY_CHECK", not
          "ACE_CHECK_RETURN(...)".

Sun Sep  5 22:46:13 2004  Ossama Othman  <ossama@dre.vanderbilt.edu>

        * TAO_IDL/be/be_attribute.cpp (be_attribute):

          TAO_IDL generated attribute methods currently have an exception
          specification containing CORBA::SystemException.  Make sure we
          generate a "tao/SystemException.h" include directive.

        * examples/RTScheduling/MIF_SchedulingC.h:

          Removed some lingering "_tao" prefixes in TAO::Objref_Traits<>
          traits templates.  Fixes compile-time errors.

        * orbsvcs/tests/IOR_MCast/server.cpp:
        * orbsvcs/tests/tests_svc_loader/tests_svc_loader.cpp:

          Fixed compile-time errors due to missing #include directives now
          made necessary by header reductions performed over the last few
          days.

Sun Sep  5 09:42:34 2004  Ossama Othman  <ossama@dre.vanderbilt.edu>

        * orbsvcs/orbsvcs/Time_Utilities.i:

          Include "ace/Time_Value.h" to pull in ACE_Time_Value class
          declaration.

Sun Sep  5 09:32:18 2004  Ossama Othman  <ossama@dre.vanderbilt.edu>

        * tests/CDR/basic_types.cpp:
        * tests/Connection_Failure/client.cpp:
        * tests/DynAny_Test/data.h:
        * tests/ORB_init/ORB_init.cpp:

          Added missing #include directives now needed due to included
          header reductions in tao/ORB.h.

        * tests/ORT/ObjectReferenceFactory.h (make_object):
        * tests/ORT/ObjectReferenceFactory.cpp (make_object):

          Removed exception specification.  Valuetypes in TAO_IDL
          generated stubs do not have one, nor does this test
          ObjectReferenceFactory method need one.  Fixes a compile-time
          error.

Sun Sep  5 09:21:49 2004  Ossama Othman  <ossama@dre.vanderbilt.edu>

        * orbsvcs/orbsvcs/CosEvent/CEC_Reactive_Pulling_Strategy.h:
        * orbsvcs/orbsvcs/Event/ECG_Reactive_ConsumerEC_Control.h:
        * orbsvcs/orbsvcs/Event/ECG_Reconnect_ConsumerEC_Control.h:
        * orbsvcs/orbsvcs/Event/EC_Reactive_ConsumerControl.h:
        * orbsvcs/orbsvcs/Event/EC_Reactive_SupplierControl.h:

          Added missing "tao/PolicyC.h" #include.

Sun Sep  5 03:58:20 2004  Ossama Othman  <ossama@dre.vanderbilt.edu>

        * orbsvcs/orbsvcs/Trader/Interpreter_Utils.h:

          Added missing "tao/SystemException.h" #include.

Sun Sep  5 01:42:18 2004  Ossama Othman  <ossama@dre.vanderbilt.edu>

        * tao/Stub.h (create_ior_info, get_profile_ior_info):

          Removed exception specifications from these methods.  They
          aren't needed and force an unecessary include of the heavy
          weight tao/SystemException.h header.

        * tao/Stub.cpp:

          Likewise.

        * tao/IOP_CodecC.h:
        * tao/PollableC.h:
        * tao/PortableInterceptorC.h:
        * tao/IFR_Client/IFR_BaseC.h:
        * tao/PortableServer/ImplRepoC.h:
        * tao/PortableServer/ORT_Adapter.h:

          Added missing header #includes now made necessary by header
          dependency reductions in tao/ORB.h.

Sun Sep  5 01:21:45 2004  Ossama Othman  <ossama@dre.vanderbilt.edu>

        * examples/RTScheduling/MIF_SchedulingC.h:
        * examples/RTScheduling/MIF_SchedulingC.cpp:

          Removed "tao_" prefix from methods in the TAO traits templates
          used in these sources, as was done to the other traits templates
          used throughout TAO.

Sun Sep  5 01:13:12 2004  Ossama Othman  <ossama@dre.vanderbilt.edu>

        * tao/ORB.h:

          Removed exception specifications from CORBA::ORB methods.  The
          C++ mapping no longer requires them.  This also allows for the
          removal of the "tao/SystemException.h" include which will
          improve TAO library compile times, in addition to compile times
          for TAO_IDL generated stubs for IDL that contain no operations
          (e.g. anything except for non-empty interfaces).

          Include "Policy_ForwardC.h" instead of "PolicyC.h".  The former
          is much lighter weight, and is all that is needed.

          Forward declare some types in the CORBA namespace since they are
          no longer pulled in by removed "PolicyC.h" #include.

          Include "VarOut_T.h" to pull in some necessary TAO templates.

          Corrected some Doxygen documentation.

        * tao/ORB.cpp:

          Removed exception specifications from CORBA::ORB methods in
          accordance with changes made to ORB.h.

          Removed code that initiated TAO unexpected exception handler
          registration.  See TAO_Singleton_Manager.* change description
          below for details.

        * tao/TAO_Singleton_Manager.h:
        * tao/TAO_Singleton_Manager.cpp:

          Removed code that set the TAO unexpected exception handler.  It
          is no longer needed since the C++ mapping no longer requires
          unknown C++ exceptions to be converted to the CORBA::UNKNOWN
          system exception.  It is anyway considered "bad form" to
          potentially override an application defined unexpected exception
          handler.

        * tao/ClientRequestInfo.cpp:
        * tao/FILE_Parser.cpp:
        * tao/Object.cpp:
        * tao/Object_Ref_Table.cpp:
        * tao/PolicyFactory_Registry.cpp:
        * tao/PortableInterceptorC.cpp:
        * tao/PortableInterceptorC.h:
        * tao/Stub.h:
        * tao/DynamicInterface/Server_Request.cpp:
        * tao/RTCORBA/RTCORBAC.h:
        * tao/RTCORBA/RT_ORB_Loader.cpp:
        * tao/RTCORBA/RT_Stub_Factory.cpp:
        * tao/Utils/RIR_Narrow.cpp:

          Added missing header #includes now made necessary by header
          dependency reductions in tao/ORB.h.

        * TAO_IDL/be/be_codegen.cpp (gen_stub_hdr_includes):

          Enabled/uncommented code that conditionally generates a
          "tao/SystemException.h" include for IDL that defines
          operations.  Since tao/ORB.h no longer includes
          "tao/SystemException.h", it must be included in TAO_IDL
          generated stub headers; at least until exception specifications
          are removed from IDL-based stub and skeleton operations (see Bug
          1852).

Sat Sep  4 23:30:20 2004  Ossama Othman  <ossama@dre.vanderbilt.edu>

        * tao/IORTable/IORTableC.h:
        * tao/PortableServer/ORT_Adapter_Factory.h:

          Added missing "tao/SystemException.h" include.

Fri Sep  3 13:55:53 2004  Ossama Othman  <ossama@dre.vanderbilt.edu>

        * orbsvcs/orbsvcs/Event/ECG_CDR_Message_Sender.h:

          Include "tao/SystemException.h" instead of "tao/Exception.h" to
          pull CORBA::SystemException class declaration.

        * tao/IORManipulation/IORC.h:
        * tao/IORManipulation/IORC.cpp:
        * tao/RTPortableServer/RTPortableServerC.h:
        * tao/RTPortableServer/RTPortableServerC.cpp:
        * tao/TypeCodeFactory/TypeCodeFactoryC.h:
        * tao/TypeCodeFactory/TypeCodeFactoryC.cpp:

          Removed "tao_" prefix from methods in the TAO traits templates
          used in these sources, as was done to the other traits templates
          used throughout TAO.

Fri Sep  3 13:42:16 2004  Ossama Othman  <ossama@dre.vanderbilt.edu>

        * tao/Acceptor_Registry.h (open):
        * tao/Acceptor_Registry.cpp (open):

          Removed the exception specification from this method.  It really
          isn't needed.  Removing it also allows us to avoid including
          "tao/SystemException.h" to pull in the CORBA::SystemException
          class declaration.  Fixes a compile-time error regarding
          undefined CORBA::SystemException type in header.

Fri Sep  3 14:18:35 2004  Dale Wilson  <wilson_d@ociweb.com>

        * interop-tests/wchar/interop_wchar_i.cpp:
          gcc on Tru64 is still complaining about using a
          wchar_t * where a CORBA::WChar * is expected.
          ( I wonder if this is a 32 vs 64 bit problem?)
          Try again to make it happy.

Fri Sep  3 11:54:49 2004  J.T. Conklin  <jtc@acorntoolworks.com>

        * utils/catior/Makefile.am:
        * utils/nslist/Makefile.am:

          Updated.

        * utils/catior/catior.mpc:
        * utils/nslist/nslist.mpc:

          Changed to inherit from core.mpb so utilities will be installed.

Fri Sep  3 21:46:10 2004  Olli Savia  <ops@iki.fi>

        * TAO_IDL/be/be_tmplinst.cpp:
          Use ACE_HAS_EXPLICIT_STATIC_TEMPLATE_MEMBER_INSTANTIATION
          to check if explicit template instantiation is needed.
          Thanks to Johnny Willemsen for informing me about this
          macro.

Fri Sep  3 12:41:36 2004  Jeff Parsons <j.parsons@vanderbilt.edu>

        * tao/Object_KeyC.cpp:

          Fixed hand-crafted code to compile when
          TAO_NO_COPY_OCTET_SEQUENCES is defined as 0.

Fri Sep  3 10:17:32 2004  J.T. Conklin  <jtc@acorntoolworks.com>

        * tao/Makefile.am:

          Updated to account for Ossama's Exception refactor.

Fri Sep  3 19:01:59 2004  Olli Savia  <ops@iki.fi>

        * TAO_IDL/be/be_tmplinst.cpp:
          LynxOS 3.x needs explicit template instantiation.

        * TAO_IDL/include/idl_defines.h:
          Added #include "ace/os_include/os_limits.h" to pick NFILES
          on LynxOS 3.x

Fri Sep  3 10:15:12 UTC 2004  Johnny Willemsen  <jwillemsen@remedy.nl>

        * tao/Profile.cpp:
          Fixed compile problem when TAO_NO_COPY_OCTET_SEQUENCES is defined
          to 0

Fri Sep  3 08:06:12 UTC 2004  Johnny Willemsen  <jwillemsen@remedy.nl>

        * tao/Exception.h:
          Mark TAO_DONT_CATCH with @internal

        * tao/Sequence.cpp:
          Include SystemException.h instead of Exception.h

        * tao/SystemException.cpp:
          Include OS_NS_stdio.h to get printf
        * tao/UserException.cpp:
          Include UserException.inl when not defined ACE_INLINE

Thu Sep  2 22:21:35 2004  Ossama Othman  <ossama@dre.vanderbilt.edu>

        * tao/Exception.h:
        * tao/Exception.i:
        * tao/Exception.cpp:

          Moved CORBA::SystemException and CORBA::UserException related
          code to separate files to improve compile times.

          (Exception):

          Improved exception safety by making "id_" and "name_" attributes
          CORBA::String_vars instead of "char *"s.

        * tao/SystemException.h:
        * tao/SystemException.inl:
        * tao/SystemException.cpp:

          Moved CORBA::SystemException class and related code to this set
          of files to improve compile-times of sources that don't need the
          declarations and definitions now in these files.

          (SystemException):

          Fixed problem where SystemException attributes were not
          initialized in the default constructor, as required by the C++
          mapping.

        * tao/UserException.h:
        * tao/UserException.inl:
        * tao/UserException.cpp:

          Moved CORBA::SystemException class and related code to this set
          of files.  This was done mostly for the sake of consistency
          since this is not an expensive set of sources in terms of
          compile times and footprint.

        * tao/Acceptor_Registry.cpp:
        * tao/Adapter.cpp:
        * tao/Adapter.h:
        * tao/Any_Basic_Impl.cpp:
        * tao/Any_Dual_Impl_T.cpp:
        * tao/Any_Impl.cpp:
        * tao/Any_Impl_T.cpp:
        * tao/Any_SystemException.cpp:
        * tao/Any_Unknown_IDL_Type.cpp:
        * tao/BiDir_Adapter.h:
        * tao/BoundsC.cpp:
        * tao/Buffering_Constraint_Policy.cpp:
        * tao/CDR.cpp:
        * tao/CDR_Encaps_Codec.cpp:
        * tao/CORBALOC_Parser.cpp:
        * tao/CORBANAME_Parser.cpp:
        * tao/ClientRequestInfo.inl:
        * tao/ClientRequestInfo_i.inl:
        * tao/CodecFactory.cpp:
        * tao/CodecFactory_ORBInitializer.cpp:
        * tao/Codeset_Manager.cpp:
        * tao/Connector_Registry.cpp:
        * tao/DLL_Parser.cpp:
        * tao/Default_Stub_Factory.cpp:
        * tao/Environment.cpp:
        * tao/GIOP_Message_Base.cpp:
        * tao/GIOP_Message_Generator_Parser.h:
        * tao/GIOP_Message_Generator_Parser_10.cpp:
        * tao/GIOP_Message_Lite.cpp:
        * tao/GIOP_Message_Lite.h:
        * tao/IIOP_Connector.cpp:
        * tao/IIOP_Profile.cpp:
        * tao/IORInterceptor_Adapter.h:
        * tao/IORInterceptor_Adapter_Factory.h:
        * tao/IOR_Parser.h:
        * tao/Interceptor_List.cpp:
        * tao/Invocation_Base.cpp:
        * tao/Invocation_Endpoint_Selectors.cpp:
        * tao/LocalObject.cpp:
        * tao/MProfile.cpp:
        * tao/NVList.cpp:
        * tao/ORB.cpp:
        * tao/ORB.h:
        * tao/ORBInitializer_Registry.cpp:
        * tao/Object_Loader.h:
        * tao/Object_Ref_Table.cpp:
        * tao/Object_T.cpp:
        * tao/PICurrent.cpp:
        * tao/PICurrent_ORBInitializer.cpp:
        * tao/PolicyFactory_Registry.cpp:
        * tao/Policy_ForwardA.cpp:
        * tao/Policy_Set.cpp:
        * tao/PollableC.cpp:
        * tao/Profile.cpp:
        * tao/Profile_Transport_Resolver.cpp:
        * tao/Profile_Transport_Resolver.h:
        * tao/Remote_Object_Proxy_Broker.cpp:
        * tao/RequestInfo_Util.cpp:
        * tao/Request_Dispatcher.h:
        * tao/Service_Callbacks.cpp:
        * tao/Services_Activate.h:
        * tao/Stub.cpp:
        * tao/Synch_Invocation.cpp:
        * tao/Synch_Invocation.h:
        * tao/TAO_Server_Request.cpp:
        * tao/Thread_Lane_Resources.cpp:
        * tao/Transport_Connector.cpp:
        * tao/TypeCodeFactory_Adapter.h:
        * tao/Typecode_Constants.cpp:
        * tao/WrongTransactionA.cpp:
        * tao/WrongTransactionC.cpp:
        * tao/append.cpp:
        * tao/corba.h:
        * tao/operation_details.cpp:
        * tao/operation_details.h:
        * tao/skip.cpp:
        * tao/Messaging/AMH_Response_Handler.cpp:
        * tao/PortableServer/Object_Adapter.i:
        * tao/PortableServer/POAManager.i:
        * tao/TypeCodeFactory/TypeCodeFactory_i.cpp:

          Include "tao/SystemException.h" and/or "tao/UserException.h" to
          pull in CORBA::{System,User}Exception class declaration.

        * tao/Array_VarOut_T.h:
        * tao/Array_VarOut_T.inl:
        * tao/Array_VarOut_T.cpp:
        * tao/CurrentC.cpp:
        * tao/CurrentC.h:
        * tao/DomainC.cpp:
        * tao/DomainC.h:
        * tao/Fixed_Array_Argument_T.cpp:
        * tao/IOP_CodecC.cpp:
        * tao/IOP_CodecC.h:
        * tao/ORBInitInfo.cpp:
        * tao/ORBInitInfo.h:
        * tao/Object.cpp:
        * tao/Object.h:
        * tao/Object_Argument_T.cpp:
        * tao/Objref_VarOut_T.cpp:
        * tao/Objref_VarOut_T.h:
        * tao/PolicyC.cpp:
        * tao/PolicyC.h:
        * tao/Policy_ForwardC.cpp:
        * tao/Policy_ForwardC.h:
        * tao/PortableInterceptorC.cpp:
        * tao/PortableInterceptorC.h:
        * tao/Sequence_T.cpp:
        * tao/Sequence_T.i:
        * tao/TAOC.cpp:
        * tao/TAOC.h:
        * tao/Typecode.cpp:
        * tao/Typecode.h:
        * tao/Var_Array_Argument_T.cpp:
        * tao/BiDir_GIOP/BiDirPolicyC.cpp:
        * tao/BiDir_GIOP/BiDirPolicyC.h:
        * tao/DynamicAny/DynamicAnyC.cpp:
        * tao/DynamicAny/DynamicAnyC.h:
        * tao/DynamicInterface/Context.cpp:
        * tao/DynamicInterface/ExceptionList.cpp:
        * tao/DynamicInterface/Unknown_User_Exception.cpp:
        * tao/DynamicInterface/Unknown_User_Exception.h:
        * tao/IFR_Client/IFR_BaseC.cpp:
        * tao/IFR_Client/IFR_BaseC.h:
        * tao/IFR_Client/IFR_BasicC.cpp:
        * tao/IFR_Client/IFR_BasicC.h:
        * tao/IFR_Client/IFR_ComponentsC.cpp:
        * tao/IFR_Client/IFR_ComponentsC.h:
        * tao/IFR_Client/IFR_ExtendedC.cpp:
        * tao/IFR_Client/IFR_ExtendedC.h:
        * tao/IORInterceptor/IORInfoC.cpp:
        * tao/IORInterceptor/IORInfoC.h:
        * tao/IORInterceptor/IORInterceptorC.cpp:
        * tao/IORInterceptor/IORInterceptorC.h:
        * tao/IORTable/IORTableC.cpp:
        * tao/IORTable/IORTableC.h:
        * tao/Messaging/AMH_Response_Handler.cpp:
        * tao/Messaging/MessagingC.cpp:
        * tao/Messaging/MessagingC.h:
        * tao/Messaging/Messaging_No_ImplC.cpp:
        * tao/Messaging/Messaging_No_ImplC.h:
        * tao/Messaging/Messaging_RT_PolicyC.cpp:
        * tao/Messaging/Messaging_RT_PolicyC.h:
        * tao/Messaging/Messaging_SyncScope_PolicyC.cpp:
        * tao/Messaging/Messaging_SyncScope_PolicyC.h:
        * tao/Messaging/TAO_ExtC.cpp:
        * tao/Messaging/TAO_ExtC.h:
        * tao/ObjRefTemplate/Default_ORTC.cpp:
        * tao/ObjRefTemplate/Default_ORTC.h:
        * tao/ObjRefTemplate/ObjectReferenceTemplateC.cpp:
        * tao/ObjRefTemplate/ObjectReferenceTemplateC.h:
        * tao/PortableServer/ImR_LocatorC.cpp:
        * tao/PortableServer/ImR_LocatorC.h:
        * tao/PortableServer/ImplRepoC.cpp:
        * tao/PortableServer/ImplRepoC.h:
        * tao/PortableServer/PortableServerC.cpp:
        * tao/PortableServer/PortableServerC.h:
        * tao/RTCORBA/RTCORBAC.cpp:
        * tao/RTCORBA/RTCORBAC.h:
        * tao/RTScheduling/RTSchedulerC.cpp:
        * tao/RTScheduling/RTSchedulerC.h:
        * tao/Valuetype/Sequence_T.cpp:
        * tao/Valuetype/Sequence_T.inl:
        * tao/Valuetype/ValueBase.cpp:
        * tao/Valuetype/ValueBase.h:
        * tao/Valuetype/ValueFactory.cpp:
        * tao/Valuetype/ValueFactory.h:
        * tao/Valuetype/Value_VarOut_T.cpp:
        * tao/Valuetype/Value_VarOut_T.h:

          Removed "tao_" prefix from methods in the TAO traits templates
          used in these sources.  It is redundant since the traits
          templates are TAO-specific, and in the TAO namespace.

        * tao/ORB_Core.cpp (check_shutdown):
        * tao/ORB_Core.i (check_shutdown):

          Uninlined this method so that we can avoid including
          "tao/SystemException.h" in the inline source file.

        * tao/tao.mpc:

          Added new SystemException.cpp and UserException.cpp files to the
          ORB_Core source list.

        * TAO_IDL/be/be_codegen.cpp:

          Updated conditional Exception.h header include directive to
          generate include directives for tao/SystemException.h and
          tao/UserException.h instead.  This code is still commented out,
          as it was previously, and will be enabled once we reduce
          included headers in tao/ORB.h.

        * TAO_IDL/be/be_visitor_traits.cpp:
        * TAO_IDL/be/be_visitor_array/array_ci.cpp:
        * TAO_IDL/be/be_visitor_component/component_cs.cpp:
        * TAO_IDL/be/be_visitor_field/cdr_op_cs.cpp:
        * TAO_IDL/be/be_visitor_interface/interface_cs.cpp:
        * TAO_IDL/be/be_visitor_sequence/cdr_op_cs.cpp:
        * TAO_IDL/be/be_visitor_union_branch/cdr_op_cs.cpp:
        * TAO_IDL/be/be_visitor_union_branch/public_assign_cs.cpp:
        * TAO_IDL/be/be_visitor_union_branch/public_ci.cpp:
        * TAO_IDL/be/be_visitor_valuetype/valuetype_cs.cpp:

          Removed "tao_" prefix from methods in the TAO traits templates
          and their uses generated by TAO_IDL.  It is redundant since the
          traits templates are TAO-specific, and in the TAO namespace.

Thu Sep  2 14:41:42 2004  Chris Cleeland  <cleeland_c@ociweb.com>

        * tao/Connection_Handler.cpp (handle_input_eh): Updated to be
          consistent with the OCI 1.3a version.  Somehow during the merge
          an older version from the OCI repo got in here.  Thanks to
          Johnny Willemsen for spotting this.

        * tao/default_client.cpp (parse_args): Changed ACE_LIB_TEXT usage
          to ACE_TEXT.  The merge of MT_NOUPCALL brought in uses of the
          ACE_LIB_TEXT macro.

Thu Sep  2 09:41:28 2004  Dale Wilson  <wilson_d@ociweb.com>

        * interop-tests/wchar/interop_wchar_i.cpp:
          Add a cast to keep the Tru64 compiler from complaining
          that a wchar_t * cannot be used for a
          const CORBA::WChar_T * argument.

Thu Sep  2 08:52:12 UTC 2004  Johnny Willemsen  <jwillemsen@remedy.nl>

        * tao/PortableServer/ServerRequestInfo.cpp:
          Replaced ACE cast macros with normal C++ casts

Thu Sep  2 07:22:12 UTC 2004  Johnny Willemsen  <jwillemsen@remedy.nl>

        * tao/PortableServer/Servant_Base.cpp:
          Replaced ACE cast macros with normal C++ casts

Wed Sep  1 12:55:41 2004  J.T. Conklin  <jtc@acorntoolworks.com>

        * docs/libraries.html:

          Removed duplicate DynamicInterface entry.

        * docs/orbsvcs.html:

          Fixed Sched service directory

Wed Sep  1 10:42:38 2004  Chad Elliott  <elliott_c@ociweb.com>

        * docs/cec_options.html:
        * orbsvcs/orbsvcs/CosEvent/CEC_ConsumerControl.h:
        * orbsvcs/orbsvcs/CosEvent/CEC_ConsumerControl.cpp:
        * orbsvcs/orbsvcs/CosEvent/CEC_Default_Factory.h:
        * orbsvcs/orbsvcs/CosEvent/CEC_Default_Factory.i:
        * orbsvcs/orbsvcs/CosEvent/CEC_Default_Factory.cpp:
        * orbsvcs/orbsvcs/CosEvent/CEC_Defaults.h:
        * orbsvcs/orbsvcs/CosEvent/CEC_EventChannel.h:
        * orbsvcs/orbsvcs/CosEvent/CEC_EventChannel.i:
        * orbsvcs/orbsvcs/CosEvent/CEC_EventChannel.cpp:
        * orbsvcs/orbsvcs/CosEvent/CEC_ProxyPullConsumer.cpp:
        * orbsvcs/orbsvcs/CosEvent/CEC_ProxyPullSupplier.cpp:
        * orbsvcs/orbsvcs/CosEvent/CEC_ProxyPushConsumer.cpp:
        * orbsvcs/orbsvcs/CosEvent/CEC_ProxyPushSupplier.cpp:
        * orbsvcs/orbsvcs/CosEvent/CEC_Reactive_ConsumerControl.h:
        * orbsvcs/orbsvcs/CosEvent/CEC_Reactive_ConsumerControl.cpp:
        * orbsvcs/orbsvcs/CosEvent/CEC_Reactive_Pulling_Strategy.h:
        * orbsvcs/orbsvcs/CosEvent/CEC_Reactive_Pulling_Strategy.cpp:
        * orbsvcs/orbsvcs/CosEvent/CEC_Reactive_SupplierControl.h:
        * orbsvcs/orbsvcs/CosEvent/CEC_Reactive_SupplierControl.cpp:
        * orbsvcs/orbsvcs/CosEvent/CEC_SupplierControl.h:
        * orbsvcs/orbsvcs/CosEvent/CEC_SupplierControl.cpp:

          Added a configurator option to determine the number of retries
          before removing an unresponsive consumer or supplier from the
          CosEvent Service.  This option is fully documented in
          docs/cec_options.html.

Wed Sep  1 11:36:12 UTC 2004  Johnny Willemsen  <jwillemsen@remedy.nl>

        * tao/Policy_Set.h:
          Replaced html style with doxygen style

Wed Sep  1 06:20:12 UTC 2004  Johnny Willemsen  <jwillemsen@remedy.nl>

        * tao/Transport.cpp (dump_iov):
          Reverted my change of yesterday, this is an ACE_OS::sprintf and
          no ACE_DEBUG, so %P and %t don't work.

Tue Aug 31 17:53:30 2004  J.T. Conklin  <jtc@acorntoolworks.com>

        * orbsvcs/orbsvcs/Makefile.am:

          Update after Portable Server refactor changes.

Tue Aug 31 19:01:12 UTC 2004  Johnny Willemsen  <jwillemsen@remedy.nl>

        * orbsvcs/tests/AVStreams/Full_Profile/ftp.cpp:
          When the input file cannot be opened, log an error and return -1
          instead of going on further without an input file, which results
          in strange crashes.

Tue Aug 31 10:00:48 2004  Chad Elliott  <elliott_c@ociweb.com>

        * TAO_IDL/be/be_visitor_array/array_ch.cpp:

          When an array is not nested inside a class we need to specify the
          storage type as the TAO_EXPORT_MACRO to get the functions
          required for copying, freeing, duplicating and allocating exported
          into the dll for Windows.

Tue Aug 31 14:55:12 UTC 2004  Johnny Willemsen  <jwillemsen@remedy.nl>

        * tao/GIOP_Message_Base.cpp:
          Updated some debug messages so that the formatting matches other
          messages in TAO and when the log is read, it is clear where this
          message is coming from.

Tue Aug 31 09:06:40 2004  Dale Wilson  <wilson_d@ociweb.com>

        * interop-tests/wchar/interop_wchar_i.cpp:
          Another exception emulation problem.

Tue Aug 31 13:43:12 UTC 2004  Johnny Willemsen  <jwillemsen@remedy.nl>

        * tao/Transport.cpp (dump_iov):
          Updated formatting of debug messages so that it matches other debug
          lines

Tue Aug 31 13:25:12 UTC 2004  Johnny Willemsen  <jwillemsen@remedy.nl>

        * orbsvcs/examples/ORT/run_test.pl:
          New perl script that is usefull to automatically run this example,
          the example itself it still broken, working on it but the script
          saves a lot of test time

Tue Aug 31 11:53:12 UTC 2004  Johnny Willemsen  <jwillemsen@remedy.nl>

        * tests/Big_Oneways/server.cpp:
          Added some more debug statements so that we can better track the
          steps of the server

Tue Aug 31 09:23:12 UTC 2004  Johnny Willemsen  <jwillemsen@remedy.nl>

        * docs/Options.html:
          Removed trailing " which was incorrect

Mon Aug 30 23:03:48 2004  J.T. Conklin  <jtc@acorntoolworks.com>

        * tao/Makefile.am:

          Update after Portable Server refactor changes.

Mon Aug 30 18:14:49 2004  Jeff Parsons <j.parsons@vanderbilt.edu>

        * TAO_IDL/ast/ast_expression.cpp:
        * TAO_IDL/include/ast_expression.h:
        * TAO_IDL/include/utl_err.h:
        * TAO_IDL/util/utl_err.cpp:

          Fixed handling of boolean IDL constants so that 'true' or
          'false' is generated on the rhs, instead of '0' or '1'
          as formerly. Also added a check for the use of infix
          operators in an expression with types other than integer or
          floating point, (illegal as per CORBA 3.0.3 section 3.10.2), and a
          new error to report if a violation is found. This last
          fix closes [BUGID:1682].

Mon Aug 30 12:27:38 2004  Ossama Othman  <ossama@dre.vanderbilt.edu>

        * orbsvcs/examples/Security/Send_File/README:

          Added note that "-SSLNoProtection" flag must be set when running
          IIOP client to SSLIOP server test.  Thanks to Jules Colding
          <jules at tdcadsl dot dk> for pointing out the inconsistency.

        * orbsvcs/examples/Security/Send_File/server.conf:

          Enabled "-SSLNoProtection" flag to server configuration to allow
          IIOP client to SSLIOP server test to work as documented.

Mon Aug 30 14:24:20 2004  Dale Wilson  <wilson_d@ociweb.com>

        * interop-tests/wchar/interop_wchar_i.cpp:
          Build correctly with exception emulation.

Mon Aug 30 12:19:04 2004  Chris Cleeland  <cleeland_c@ociweb.com>

        * performance-tests/Sequence_Latency/AMH_Single_Threaded/Single_Threaded.mpc:

          Reordered base projects, putting amh last, to resolve generation
          problems on RH80_Static_Core.

Mon Aug 30 15:33:12 UTC 2004  Johnny Willemsen  <jwillemsen@remedy.nl>

        * tao/Makefile.am:
          Updated this file for the moving of AMH_Response_Handler, forgot this
          file this morning

Mon Aug 30 15:29:07 2004  Balachandran Natarajan  <bala@dre.vanderbilt.edu>

        * tao/ORB.h (CORBA):

          Added documentation for run () with a timeout parameter. Thanks
          to Jules Colding <jules at tdcadsl dot dk> for motivating this.

Mon Aug 30 08:18:12 UTC 2004  Johnny Willemsen  <jwillemsen@remedy.nl>

        * tests/Big_Oneways/Session.cpp:
          When catching an exception in the svc method print out the number
          of messages sent. This test fails in some builds, maybe it is
          just taking a long time, this should give us some more info.

Mon Aug 30 08:18:12 UTC 2004  Johnny Willemsen  <jwillemsen@remedy.nl>

        * tests/Big_Twoways/Session.cpp:
          When catching an exception in the svc method print out the number
          of messages sent. This test fails in some builds, maybe it is
          just taking a long time, this should give us some more info.

Mon Aug 30 07:11:12 UTC 2004  Johnny Willemsen  <jwillemsen@remedy.nl>

        * tao/PortableServer/AMH_Response_Handler.{h,cpp}:
        * tao/Messaging/AMH_Response_Handler.{h,cpp}:
          Moved the AMH Response Handler class from PortableServer to Messaging,
          when using AMH we need Messaging because of the ExceptionHolder.
          Moving this class doesn't change anything then when you use AMH, but
          when not using AMH, the portableserver library will be smaller.

        * TAO_IDL/be/be_codegen.cpp:
          Updated include path of AMH_Response_Handler.h

Fri Aug 27 23:08:33 2004  Balachandran Natarajan  <bala@dre.vanderbilt.edu>

        * TAO_IDL/fe/idl.ll:

          Fix for BUG 1683. Jeff prepared this lex file. I just generated
          the code, and applied the patches.

        * TAO_IDL/fe/lex.yy.cpp:

          Regenerated code for the new lex file.

        * TAO_IDL/fe/lex.yy.cpp.diff:

          Another useless diff that we maintain which we cannot use! The
          above change took only 4-5 hours! Anyway, we have tested on
          Linux and things seem to be working. Let us see how other
          platforms behave.

        * TAO_IDL/util/utl_scope.cpp:

          Fixed unused variable warnings.

Fri Aug 27 13:34:58 2004  J.T. Conklin  <jtc@acorntoolworks.com>

        * utils/NamingViewer/NamingViewerDlg.cpp:

          Changed #include "Naming/Naming_Server.h" to #include
          "Naming/Naming_Client.h".

Fri Aug 27 18:33:12 UTC 2004  Johnny Willemsen  <jwillemsen@remedy.nl>

        * orbsvcs/orbsvcs/CosLoadBalancing.mpc:
          Added iorinterceptor as base project

Fri Aug 27 16:36:12 UTC 2004  Johnny Willemsen  <jwillemsen@remedy.nl>

        * tao/ObjRefTemplate/ObjectReferenceTemplate_i.cpp:
          Added .in() to silence gcc warning about better conversion

Fri Aug 27 10:07:17 2004  Jeff Parsons <j.parsons@vanderbilt.edu>

        * orbsvcs/orbsvcs/IFRService/Contained_i.cpp:
        * orbsvcs/orbsvcs/IFRService/Container_i.cpp:
        * orbsvcs/orbsvcs/IFRService/ExtValueDef_i.cpp:
        * orbsvcs/orbsvcs/IFRService/IFR_Service_Utils.cpp:
        * orbsvcs/orbsvcs/IFRService/InterfaceDef_i.cpp:
        * orbsvcs/orbsvcs/IFRService/PrimitiveDef_i.cpp:
        * orbsvcs/orbsvcs/IFRService/Repository_i.cpp:
        * orbsvcs/orbsvcs/IFRService/ValueDef_i.cpp:

          Added logical ORs of CORBA::OMGVMCID to the minor codes
          in raised exceptions. Thanks to Ossama Othman
          <ossama@dre.vanderbilt.edu> for pointing out this
          oversight.

Fri Aug 27 14:07:12 UTC 2004  Johnny Willemsen  <jwillemsen@remedy.nl>

        * orbsvcs/examples/ORT/ORT.mpc:
          Added iorinterceptor as base of the server project

        * orbsvcs/examples/ORT/Object_Factory_i.cpp:
          Commented out some code that uses a non portable way of getting
          the ORT Factory, this now doesn't work anymore. I am working on
          changing this example so that it works again, but for a day or so
          comment out the incorrect code so that we get green build results
          again

Fri Aug 27 10:19:12 UTC 2004  Johnny Willemsen  <jwillemsen@remedy.nl>

        * orbsvcs/orbsvcs/Security.mpc:
          SecurityLevel3.idl uses valuetype, so add valuetype as base
          project.

Fri Aug 27 09:58:12 UTC 2004  Johnny Willemsen  <jwillemsen@remedy.nl>

        * orbsvcs/tests/Concurrency/CC_command.cpp:
          Added #include "ace/Log_Msg.h"

Fri Aug 27 01:12:59 2004  Ossama Othman  <ossama@dre.vanderbilt.edu>

        * tao/ORB_Table.h:

          No need to include "tao/corbafwd.h".

        * tao/TC_Constants_Forward.h:

          Added missing "tao/TAO_Export.h" include.

Fri Aug 27 08:05:12 UTC 2004  Johnny Willemsen  <jwillemsen@remedy.nl>

        Integrated ORTrefactor_2 branch into main. Previously the
        PortableServer library was dependent on IORInterceptor,
        ObjRefTemplate and Valuetype, this dependency has been
        removed. PortableServer doesn't use these libs anymore, but
        IORInterceptor, ObjRefTemplate and Valuetype are now dependent on
        PortableServer. This will reduce the size of corba servers which
        don't use IORInterceptor, ObjRefTemplate and Valuetype.

        * tao/Makefile.am:
          Updated for changes below.

        Fri Aug 27 06:02:12 UTC 2004  Johnny Willemsen  <jwillemsen@remedy.nl>

        * tao/PortableServer/POA.cpp (ORT_adapter_i):
          Readded the check whether ort_adapter_ is not null, we call this
          method from _i methods and we need this check for that invocation
          path

        Thu Aug 26 17:07:52 2004  Balachandran Natarajan  <bala@dre.vanderbilt.edu>

        * tao/ObjRefTemplate/ORT_Adapter_Factory_Impl.cpp:
        * tao/ObjRefTemplate/ORT_Adapter_Factory_Impl.h:
        * tao/ObjRefTemplate/ORT_Adapter_Impl.cpp:
        * tao/PortableServer/POA.cpp:
        * tao/PortableServer/POA.i:
        * tao/PortableServer/PortableServer.pidl:

          Cosmtic changes after a review.

        Thu Aug 26 13:37:12 UTC 2004  Johnny Willemsen  <jwillemsen@remedy.nl>

        * tao/ORB_Core.cpp:
          Fix for emulated exceptions builds

        Thu Aug 26 13:27:12 UTC 2004  Johnny Willemsen  <jwillemsen@remedy.nl>

        * tao/PortableServer/POA.{h,cpp,i}:
        * tao/IORInterceptor/IORInfo.cpp:
        * tao/ObjRefTemplate/ORT_Adapter_Factory_Impl.cpp:
        * tao/ObjRefTemplate/ORT_Adapter_Impl.cpp:
          Fixes for emulated exceptions builds

        Thu Aug 26 09:05:12 UTC 2004  Johnny Willemsen  <jwillemsen@remedy.nl>

        * tao/PortableServer/POA.cpp:
          Changed invoke_key_to_helper to invoke_key_to_helper_i, this is
          always called from _i methods, and also use then
          ORT_adapter_i instead of ORT_adapter

        Thu Aug 26 08:05:12 UTC 2004  Johnny Willemsen  <jwillemsen@remedy.nl>

        * tao/PortableServer/POA.{h,cpp,i}:
          Shorted some method names, also added a get_adapter_template_i()
          with which I can try to get an ORT Adapter without that it tries to
          grep the POA lock, we also have the lock in destroy_i() and we can't
          grep it another time because it is non recursive.

        Wed Aug 25 13:14:12 UTC 2004  Johnny Willemsen  <jwillemsen@remedy.nl>

        * tao/PortableServer/POA.cpp (object_reference_template_adapter):
          When we don't have a adapter, first see if we have a factory before
          locking the POA, in case we then get called from POA::destroy_i()
          and we don't have an adapter and not factory we don't grep the lock
          and don't get a deadlock, have to solve this better, but this way I
          can continue testing

        Wed Aug 25 12:50:12 UTC 2004  Johnny Willemsen  <jwillemsen@remedy.nl>

        * tao/ORB_Core.cpp (ior_interceptor_adapter):
          Added ACE_CHECK_RETURN after the ACE_ENDTRY as last check for
          uncaught exceptions

        * tao/PortableServer/POA.cpp (object_reference_template_adapter):
          Changed logic that when adapter_name_i fails we don't have a not
          activated adapter. The guard here seems to cause a problem on Linux

        Wed Aug 25 12:35:12 UTC 2004  Johnny Willemsen  <jwillemsen@remedy.nl>

        * tao/PortableServer/POA.i:
          Added missing returns statements

        Wed Aug 25 12:32:12 UTC 2004  Johnny Willemsen  <jwillemsen@remedy.nl>

        * tao/PortableServer/POA.cpp (object_reference_template_adapter):
          Fixed for emulated exception case

        Wed Aug 25 10:12:12 UTC 2004  Johnny Willemsen  <jwillemsen@remedy.nl>

        * tao/PortableServer/POA.i:
          Removed the throw from get_obj_ref_factory() and
          get_adapter_template() when we can't retrieve these, exceptions
          are already thrown in the IORInterceptor and we call the
          get_adapter_template() also from the POA and we don't want to have
          an exception then.

        * tao/PortableServer/POA.cpp:
          In the destroy_i() check whether get_adapter_template() doesn't
          return zero, if it returns zero, then we don't have an
          adapter_template, so don't add it to the array, this can happen when
          we don't load the ORT library.
          In the object_reference_template_adapter() method use a POA Guard
          that doesn't check for closure, this method can be called by
          destroy_i() when we don't have an ORT library loaded and then we
          don't want to get an exception by the guard that we are closing

        Tue Aug 24 14:22:12 UTC 2004  Johnny Willemsen  <jwillemsen@remedy.nl>

        * tao/PortableServer/POA.cpp (destroy_i):
          Changed the logic of informing the IORInterceptors of state changed,
          first iterate through all the child_poa's, set their state to
          inactive and gather the ort adapters, then in one call inform all
          IORInterceptors, then destroy the child poa's and as last step
          destroy ourself and only notify that this poa has changed to
          non_existent, each child POA will have done this already for itself.

        Tue Aug 24 13:23:12 UTC 2004  Johnny Willemsen  <jwillemsen@remedy.nl>

        * tao/ObjRefTemplate/ORT_Adapter_Impl.{h,cpp}
        * tao/ObjRefTemplate/ObjectReferenceTemplate_i.{h,cpp}
        * tao/PortableServer/ORT_Adapter.h:
        * tao/PortableServer/POA.cpp:
          Instead of passing and storing a TAO_POA*, pass a
          PortableServer::POA_ptr, duplicate that and store it in a
          PortableServer::POA_var. At the moment the ORT adapter is then
          destructed we automatically drop the refcount on the POA and we
          don't have the risk the POA is destructed before the ORT adapter is
          destructed. There is no need anymore then for the poa() method to
          set the TAO_POA* to zero.

        Tue Aug 24 12:45:12 UTC 2004  Johnny Willemsen  <jwillemsen@remedy.nl>

        * tao/PortableServer/POA.cpp:
          Added todo with activation of ort_adapter because we hold the lock
          there

        Tue Aug 24 10:11:12 UTC 2004  Johnny Willemsen  <jwillemsen@remedy.nl>

        The ORTrefactor branch is now ORTrefactor_2 and the compile archive is
        branched now.

        * tests/Abstract_Interface/Abstract_Interface.mpc:
          Added missing base projects

        * tests/ORT/ORT.mpc:
        * tests/Portable_Interceptors/IORInterceptor/PI_IORInterceptor.mpc:
        * tests/Portable_Interceptors/ORB_Shutdown/PI_ORB_Shutdown.mpc:
          Added missing base projects and removed not needed idlflags

        * tao/PortableServer/*C.i:
          Renamed all generated .i files to .inl

        * tao/ObjRefTemplate/ObjectReferenceTemplate_*.*:
          Renamed all to ORT_*.*, moved classes to TAO namespace and shortened
          classnames

        * tao/PortableServer/POA.h:
          Make TAO_IORInfo a friend and make the methods that this class needs
          protected instead of public.

        * tao/Messaging.mpc:
          Messaging is dependent on valuetype

        Mon Aug 23 18:33:59 2004  Balachandran Natarajan  <bala@dre.vanderbilt.edu>

        * tao/Thread_Per_Connection_Handler.cpp:

          Fixed a compile error with the latest version of ACE. This has
          been fixed in the main trunk.

        * tao/IORInterceptor/IORInterceptor_List.cpp:
        * tao/IORInterceptor/IORInterceptor_List.h:
        * tao/ObjRefTemplate/ObjectReferenceTemplate_Adapter_Factory_Impl.cpp:
        * tao/ObjRefTemplate/ObjectReferenceTemplate_Adapter_Factory_Impl.h:
        * tao/ObjRefTemplate/ObjectReferenceTemplate_Adapter_Impl.cpp:
        * tao/ObjRefTemplate/ObjectReferenceTemplate_Adapter_Impl.h:
        * tao/ObjRefTemplate/ObjectReferenceTemplate_Adapter_Impl.inl:
        * tao/ObjRefTemplate/ObjectReferenceTemplate_i.cpp:
        * tao/ObjRefTemplate/ObjectReferenceTemplate_i.h:
        * tao/ObjRefTemplate/ObjectReferenceTemplate_i.inl:
        * tao/PortableServer/ObjectReferenceTemplate_Adapter.cpp:
        * tao/PortableServer/ObjectReferenceTemplate_Adapter.h:
        * tao/PortableServer/ObjectReferenceTemplate_Adapter_Factory.h:
        * tao/PortableServer/POA.cpp:
        * tao/PortableServer/POA.h:

          Added a number of comments and suggestions for Johnny. The
          significant among them are:

          - adding implementations in the TAO namespace. The TAO_* naming
            should be killed.

          - Make the names of the classes and file names shorter. The
            existing makes things harder to read and find the relation
            ships. I have done a few. I have left the rest for Johnny as
            homework :-)

        Mon Aug 23 12:26:12 UTC 2004  Johnny Willemsen  <jwillemsen@remedy.nl>

        * tao/IORInterceptor/IORInterceptor_List.cpp:
          When copying the array into the sequence to an add_ref on each of
          array members. Have to look a little bit more at this, but now the
          tests doesn't crash, but I think I maybe have a leak now somewhere.

        Fri Aug 20 14:02:12 UTC 2004  Johnny Willemsen  <jwillemsen@remedy.nl>

        * tao/PortableServer/POAManager.cpp:
          Corrected the variable to be passed

        Fri Aug 20 12:36:12 UTC 2004  Johnny Willemsen  <jwillemsen@remedy.nl>

        * tao/PortableInterceptor.pidl:
        * tao/IORInterceptor/IORInfo.pidl:
          Moved AdapterState constants from IORInfo to PortableInterceptor
          file

        * tao/PortableInterceptorC.h:
        * tao/IORInterceptor/IORInfoC.{h,cpp,inl}:
          Updated these files with changes above

        * tao/PortableServer/POA.cpp:
        * tao/PortableServer/POAManager.cpp:
          No need anymore to include IORInfoC.h to get AdapterState constants

        Fri Aug 20 12:14:12 UTC 2004  Johnny Willemsen  <jwillemsen@remedy.nl>

        * tao/PortableServer/POA.{h,cpp}:
          Include PI_ForwardC.h in header file, and PortableInterceptorC.h in
          the cpp file.

        Fri Aug 20 12:09:12 UTC 2004  Johnny Willemsen  <jwillemsen@remedy.nl>

        * tao/PortableServer/POA.cpp:
          Removed some commented out code and removed comment after include of
          IORInfoC.h, no good idea yet how to prevent this

        Fri Aug 20 12:05:12 UTC 2004  Johnny Willemsen  <jwillemsen@remedy.nl>

        * tao/PortableServer/POAManager.cpp:
          Removed not needed include of Interceptor_List

        Fri Aug 20 11:44:12 UTC 2004  Johnny Willemsen  <jwillemsen@remedy.nl>

        * tao/IORInterceptor.mpc:
          IORInterceptor is now dependent on PortableServer

        * tao/IORInterceptor_Adapter.h:
          Added several new pure virtual methods that must be implemented by
          the real adapter implementations

        * tao/ORB_Core.{h,cpp}:
          Removed ior_interceptor_list(), make ior_interceptor_adapter()
          public, the POA will just retrieve the ior_interceptor_adapter from
          the ORB core and will use it then from then.

        * tao/PortableServer.mpc:
          PortableServer is not dependent on IORInterceptor anymore.

        * tao/IORInterceptor/IORInterceptor_Adapter_Factory_Impl.cpp:
          Initialise pointer with 0.

        * tao/IORInterceptor/IORInterceptor_Adapter_Impl.{h,cpp}:
          Implemented new pure virtual methods from the base, this code was
          previously in the POA, but couples the POA to the IORInterceptor, by
          moving it here we can decouple it

        * tao/PortableServer/POA.cpp:
        * tao/PortableServer/POAManager.cpp:
          Instead of handling IORInterceptors here, just try to retrieve the
          IORInterceptor adapter from the ORB Core and pass the call to the
          adapter, this removes the dependency of the POA on IORInterceptor

        * tao/PortableServer/IORInfo.{h,cpp,inl}:
        * tao/IORInterceptor/IORInfo.{h,cpp,inl}:
          Moved this class from PortableServer to IORInterceptor, because of
          the changes above the usage of IORInfo is restricted to the
          IORInterceptor library

        Fri Aug 20 07:59:12 UTC 2004  Johnny Willemsen  <jwillemsen@remedy.nl>

        * tao/IORInterceptor/IORInterceptor.pidl:
        * tao/IORInterceptor/IORInfo.pidl:
          Moved IORInfo interface to its own file

        * tao/IORInterceptor/IORInterceptorC.{h,cpp,i}:
          Regenerated

        * tao/IORInterceptor/IORInfoC.{h,cpp,i}:
          New generated files

        * tao/PortableServer/IORInfo.h:
          Include IORInfoC.h instead of IORInterceptorC.h

        Thu Aug 19 17:58:12 UTC 2004  Johnny Willemsen  <jwillemsen@remedy.nl>

        * tao/PI_Forward.pidl:
          Moved AdapterManagerId and AdapterState typedefs to this file

        * tao/PI_ForwardC.{h,cpp,i,inl}:
          Regenerated these files, replaced .i with .inl file

        * tao/ObjRefTemplate/ObjectReferenceTemplate.pidl:
          No need to include orb.idl, removed AdapterMangerId and
          AdapterState, these moved to other places

        * tao/ObjRefTemplate/Attic/ObjectReferenceTemplate_Adapter_Impl.cpp:
          Added missing .in()

        * tao/ObjRefTemplate/ObjectReferenceTemplateC.{h,cpp,i,inl}:
          Regenerated these files, replaced .i with .inl file

        * tao/PortableServer/POA.h:
          Fixed include

        * tao/PortableServer/POA_Manager.h:
          No need to include ObjectReferenceTemplaceC.h now the typedefs are
          in PI_Forward

        * tao/IORInterceptor/IORInterceptor.pidl:
          Moved AdapterState constants to this file

        * tao/IORInterceptor/IORInterceptorC.{h,cpp,i,inl}:
          Regenerated these files

        * tao/diffs/ObjectReferenceTemplate.diff:
          No diffs need to be applied anymore, so zapped this file

        Wed Aug 18 13:33:12 UTC 2004  Johnny Willemsen  <jwillemsen@remedy.nl>

        * tao/PortableServer/POA.h:
          Removed some unneeded friends but had to make invoke_key_to_object
          public because we now need it from the ORT library, friend doesn't
          work anymore because it moved to a default servant we don't know
          anything about in this library, any other ideas?

        Wed Aug 18 12:28:12 UTC 2004  Johnny Willemsen  <jwillemsen@remedy.nl>

        * tao/IORInterceptor/IORInterceptor.pidl:
        * tao/IORInterceptor/IORInterceptorC.{h,cpp,i,inl}:
          Regenerated these files, no need to apply patches anymore, and use
          .inl file instead of .i files.

        * tao/PortableServer/ObjectReferenceTemplate_Adapter.h:
          Added typedef for a list of ORT Adapter pointers

        * tao/IORInterceptor/IORInterceptor_List.{h,cpp}:
          Removed typedef of array of ObjectReferenceTemplate*, include the
          ORT Adapter header file instead

        * tao/PorableServer.mpc:
        * tao/ObjRefTemplate.mpc:
          PortableServer library is not dependent on objreftemplate anymore
          but objreftemplate is dependent on portableserver

        * tao/ObjRefTemplate/ObjectReferneceTemplate_Adapter_Impl.{h,cpp,i}:
        * tao/ObjRefTemplate/ObjectReferenceTemplate_i.{h,cpp,i}:
          Split the adapter implementation and the ort_factory and
          ort_template. The adapter creates a TAO_ObjectReferenceTemplate
          which is a ort_template, which then also a ort_factory. The
          ort_factory can be replaced using IORInfo, for the identity methods
          the ort_template is used, until the ort_factory is changed from
          outside the ort_template is used, after that the new set one.

        Tue Aug 17 14:30:12 UTC 2004  Johnny Willemsen  <jwillemsen@remedy.nl>

          Checkin of rework until now, not happy with the interfaces yet, now
          the test app seems to work a little, I am going to review all
          changed interfaces again and improve things.

        * tao/POA.{h,cpp}:
          - Changed adapter_state_changed to use IORInterceptor_List
          functionality to call adapter_state_changed on all IORInterceptors
          - Changed access of some methods
        * tao/IORInfo.cpp:
          Commented out some add_refs on the ORT, this should be done in the
          ORT Adapter. Need to check this

        * tao/ObjRefTemplate/ObjectReferenceTemplate_Adapter_Factory.{h,cpp}:
        * tao/ObjRefTemplate/ObjectReferenceTemplate_Impl.{h,cpp,inl}:
          New files with first implementation

        Tue Aug 17 13:59:12 UTC 2004  Johnny Willemsen  <jwillemsen@remedy.nl>

        * tao/IORInterceptor/IORInterceptor_List/{h,cpp}:
          Added adapter_state_changed, this gets a normal
          TAO_ObjectReferenceTemplate_Array, converts this into a corba
          sequence and calls adapter_state_change for each interceptor.

        * tao/PortableServer/diffs/Default_ORT.diff:
          Zap this file

        Tue Aug 17 10:31:12 UTC 2004  Johnny Willemsen  <jwillemsen@remedy.nl>

        * tao/PortableServer/ObjectReferenceTemplate_Adapter.h:
        * tao/PortableServer/ObjectReferenceTemplate_Adapter_Factory.h:
          Corrected export macro

        Tue Aug 17  90:31:12 UTC 2004  Johnny Willemsen  <jwillemsen@remedy.nl>

        * tao/PortableServer/ObjectReferenceTemplate_Adapter_Factory.cpp:
          Fixed incorrect include

        * tao/PortableServer/ObjectReferenceTemplate_Adapter.h:
          - Added adapter_name as constructor argument
          - Added destroy() method, called by POA when this adapter is not
          needed anymore, adapter must do its own cleanup
          - Added activate() method with just a ORT* to activate the adapter
          with an existing factory.
          - Added get_adapter_template and get_obj_ref_factory to get the real
          servant, this is needed for the IORInterceptors

        * tao/PortableServer/POA.{h,cpp,i}:
          - Added invoke_key_to_object_helper() which will check for the ORT and
          if available will call that or will call invoke_key_to_object
          instead.
          - Added object_reference_template_adapter() which will check
          ir an ORT Adapter is already available, if not, tries to get an
          ORT Adapater Factory, if that is available, create a new ORT
          Adapter.
          - Added some doxygen grouping to group methods belonging to each other
          in one doxygen group.
          - Added ort_adapter_ member to store the ORT Adapter when we have
          retrieved one.
          - Removed set_adapter_template() from the header file, there is no
          implementation of this method and it is not needed
          - Added TAO_POA_Static_Resources to store the name of the ORT factory,
          used the TAO_ORB_Core_Static_Resources but I didn't it put it there
          because the ORB_Core doesn't need to know anything or ORT.
          - Removed old ort_template, def_ort_template and obj_ref_factory and
          its usage.

        * tao/PortableServer/Default_ORT*.*:
        * tao/PortableServer/ObjectReferenceTemplate.{h,cpp,i}:
          Removed these files, default ORT implementation is now in the ORT
          library

        Fri Aug 13 18:12:12 UTC 2004  Johnny Willemsen  <jwillemsen@remedy.nl>

        * tao/PortableServer/ObjectReferenceTemplate_Adapter.{h,cpp}
          New file with base calss for ORT Adapters

        * tao/PortableServer/ObjectReferenceTemplate_Adapter_Facotry.{h,cpp}
          New file with base calss for ORT Adapter factories

Fri Aug 27 00:25:47 2004  Ossama Othman  <ossama@dre.vanderbilt.edu>

        * tao/ORB_Constants.h:

          No need to include "tao/TAO_Export.h".

          (CORBA::OMGVMCID):

          Added documentation about how and when to use this constant.

          (TAO_DEFAULT_MINOR_CODE, TAO_MAX_MINOR_CODE):

          Deprecated these constants.  They have been replaced with
          counterparts in the TAO namespace, as described below, but still
          exist in order to maintain backward compatibility for a
          reasonable amount of time.

          Added documentation that details how TAO_DEFAULT_MINOR_CODE is
          often misused.

          (TAO::VMCID):

          New constant in the TAO namespace that replaces
          global namespace constant TAO_DEFAULT_MINOR_CODE.  The latter
          constant name was not very descriptive about what the constant
          represents.  "TAO::VMCID" is improves on that, and is also more
          consistent with OMG naming conventions.

          (TAO::MAX_MINOR_CODE):

          Moved the global namespace TAO_MAX_MINOR_CODE constant into the
          TAO namespace to be consistent with the above TAO::VMCID
          change.

          Added documentation that makes it obvious how this constant is
          determined.  Previously, a "magic number" was assigned to this
          constant (actually TAO_MAX_MINOR_CODE).  This constant is now
          defined in terms of TAO::VMCID.

          (TAO::VPVID):

          New TAO namespace constant that is TAO's OMG assigned Vendor
          PolicyType Valueset ID (VPVID).  This constant is the same as
          the VMCID, and is automatically assigned by the OMG in this
          manner when a VMCID is reserved for a given vendor (i.e TAO /
          DOC group in this case).  Please refer to the documentation for
          this constant when creating new TAO-specific CORBA::PolicyType
          values.

        * tao/Exception.cpp:

          Use new TAO::VMCID instead of the deprecated
          TAO_DEFAULT_MINOR_CODE constant.

        * tao/CORBA.pidl:

          Removed this file.  It has been deprecated for at least four
          years.

        * tao/Invocation_Endpoint_Selectors.cpp:
        * tao/Profile_Transport_Resolver.cpp:

          Corrected grammar in a comment.

        * tao/Policy_Forward.pidl:

          Added a "-*- IDL -*-" Emacs mode comment to this file so that we
          can automatically get some syntax highlighting and automatic
          indenting.

        * tao/TypeCodeFactory/TypeCodeFactory_i.cpp:

          Corrected minor codes passed to CORBA::SystemException
          constructors.  They were not logically OR-ed with the
          CORBA::OMGVMCID constant.

Fri Aug 27 00:03:51 2004  J.T. Conklin  <jtc@acorntoolworks.com>

        * orbsvcs/orbsvcs/AV/Makefile.am:
        * orbsvcs/orbsvcs/Concurrency/Makefile.am:
        * orbsvcs/orbsvcs/CosEvent/Makefile.am:
        * orbsvcs/orbsvcs/Event/Makefile.am:
        * orbsvcs/orbsvcs/Naming/Makefile.am:
        * orbsvcs/orbsvcs/Property/Makefile.am:
        * orbsvcs/orbsvcs/Sched/Makefile.am:
        * orbsvcs/orbsvcs/Time/Makefile.am:
        * orbsvcs/orbsvcs/Trader/Makefile.am:

          Removed.

        * orbsvcs/tests/Concurrency/CC_naming_service.cpp:
        * orbsvcs/tests/Concurrency/CC_test_utils.cpp:
        * orbsvcs/tests/Concurrency/CC_tests.cpp:
        * orbsvcs/tests/Time/client.cpp:

          Changed to #include "ace/Log_Msg.h"

        * examples/RTScheduling/Starter.h:
        * examples/Simple/Simple_util.h:
        * orbsvcs/examples/CosEC/RtEC_Based/tests/Multiple/Multiple.h:
        * orbsvcs/tests/Sched_Conf/Sched_Conf.cpp:

          Changed #include "orbsvcs/Naming/Naming_Utils.h" to #include
          "orbsvcs/Naming/Naming_Client.h" and
          "orbsvcs/Naming/Naming_Server.h".

        * examples/Callback_Quoter/Notifier_Input_Handler.h:
        * examples/Event_Comm/Notifier_Server.h:
        * examples/Logging/Logging_Service_i.h:
        * examples/Quoter/server.h:
        * orbsvcs/Concurrency_Service/Concurrency_Service.h:
        * orbsvcs/Naming_Service/Naming_Service.h:
        * orbsvcs/Time_Service/Clerk_i.h:
        * orbsvcs/Time_Service/Server_i.h:
        * orbsvcs/orbsvcs/Naming/Naming_Loader.h:
        * orbsvcs/orbsvcs/Time/TAO_Time_Service_Clerk.h:
        * orbsvcs/tests/Redundant_Naming/client.cpp:
        * orbsvcs/tests/Sched_Conf/Sched_Conf_Anomalies.cpp:
        * orbsvcs/tests/Sched_Conf/Sched_Conf_Runtime.cpp:
        * utils/NamingViewer/NamingViewerDlg.cpp:
        * utils/wxNamingViewer/wxNamingViewerFrame.cpp:

          Changed #include "orbsvcs/Naming/Naming_Utils.h" to #include
          "orbsvcs/Naming/Naming_Server.h".

        * orbsvcs/Logging_Service/RTEvent_Logging_Service/RTEvent_Logging_Service.h:
        * orbsvcs/examples/Callback_Quoter/Consumer_Handler.h:
        * orbsvcs/examples/Callback_Quoter/Supplier_i.h:
        * orbsvcs/examples/CosEC/Factory/FactoryDriver.h:
        * orbsvcs/examples/Event_Comm/Consumer_Handler.h:
        * orbsvcs/examples/Event_Comm/Notifier_Handler.h:
        * orbsvcs/tests/AVstreams/Asynch_Three_Stage/Connection_Manager.h:
        * orbsvcs/tests/AVstreams/Bidirectional_Flows/receiver.h:
        * orbsvcs/tests/AVstreams/Bidirectional_Flows/sender.h:
        * orbsvcs/tests/AVstreams/Component_Switching/Connection_Manager.h:
        * orbsvcs/tests/AVstreams/Full_Profile/server.h:
        * orbsvcs/tests/AVstreams/Modify_QoS/receiver.h:
        * orbsvcs/tests/AVstreams/Modify_QoS/sender.h:
        * orbsvcs/tests/AVstreams/Multicast/ftp.h:
        * orbsvcs/tests/AVstreams/Multicast/server.h:
        * orbsvcs/tests/AVstreams/Multicast_Full_Profile/ftp.h:
        * orbsvcs/tests/AVstreams/Multicast_Full_Profile/server.h:
        * orbsvcs/tests/AVstreams/Multiple_Flows/receiver.h:
        * orbsvcs/tests/AVstreams/Multiple_Flows/sender.h:
        * orbsvcs/tests/AVstreams/Pluggable/ftp.h:
        * orbsvcs/tests/AVstreams/Pluggable/server.h:
        * orbsvcs/tests/AVstreams/Pluggable_Flow_Protocol/receiver.h:
        * orbsvcs/tests/AVstreams/Pluggable_Flow_Protocol/sender.h:
        * orbsvcs/tests/AVstreams/Simple_Three_Stage/distributer.h:
        * orbsvcs/tests/AVstreams/Simple_Three_Stage/receiver.h:
        * orbsvcs/tests/AVstreams/Simple_Three_Stage/sender.h:
        * orbsvcs/tests/AVstreams/Simple_Two_Stage/receiver.h:
        * orbsvcs/tests/AVstreams/Simple_Two_Stage/sender.h:
        * orbsvcs/tests/AVstreams/Simple_Two_Stage_With_QoS/receiver.h:
        * orbsvcs/tests/AVstreams/Simple_Two_Stage_With_QoS/sender.h:
        * orbsvcs/tests/Concurrency/CC_naming_service.h:
        * orbsvcs/tests/Property/client.h:
        * orbsvcs/tests/Property/server.h:
        * orbsvcs/tests/Simple_Naming/client.h:
        * orbsvcs/tests/Time/Client_i.h:
        * examples/Logging/Logging_Test_i.h:
        * performance-tests/POA/Demux/demux_test_server.h:

          Changed #include "orbsvcs/Naming/Naming_Utils.h" to #include
          "orbsvcs/Naming/Naming_Client.h".

        * orbsvcs/orbsvcs/Makefile.am:

          Updated.

        * orbsvcs/orbsvcs/CosNaming.mpc:

          Changed Naming_Utils.{cpp,h} to Naming_{Client,Server}.{cpp,h}.

        * orbsvcs/orbsvcs/Naming/Naming_Utils.cpp:
        * orbsvcs/orbsvcs/Naming/Naming_Utils.h:

          Removed files.

        * orbsvcs/orbsvcs/Naming/Naming_Client.cpp:
        * orbsvcs/orbsvcs/Naming/Naming_Client.h:
        * orbsvcs/orbsvcs/Naming/Naming_Server.cpp:
        * orbsvcs/orbsvcs/Naming/Naming_Server.h:

          New files, split out from Naming_Utils.cpp and Naming_Utils.h so
          that it is possible to have client and server side libraries.

Thu Aug 26 22:54:37 2004  J.T. Conklin  <jtc@acorntoolworks.com>

        * tao/Current.pidl:

          Added #ifndef guard, as was done with GIOP.idl in:
          Thu Aug 26 22:54:35 2004  Jeff Parsons <j.parsons@vanderbilt.edu>

Thu Aug 26 22:48:26 2004  J.T. Conklin  <jtc@acorntoolworks.com>

        * Makefile.am:
        * configure.ac:

          Changed to enable building utils directory.

        * utils/Makefile.am:
        * utils/catior/Makefile.am:
        * utils/nslist/Makefile.am:

          New files, built with a little help from MPC.

Thu Aug 26 22:46:24 2004  J.T. Conklin  <jtc@acorntoolworks.com>

        * orbsvcs/orbsvcs/Makefile.am:

          Fixed tipo I introduced when adding Shutdown_Utilities.cpp.

Thu Aug 26 22:54:35 2004  Jeff Parsons <j.parsons@vanderbilt.edu>

        * tao/GIOP.pidl:

          Added missing #ifndef guard around the file. With recent
          changes that have tightened up redefinition checking in
          reopened modules, we were getting a redefinition error
          from GIOP.pidl being included in FT_CORBA_ORB.idl by
          two different paths and having no protection from the
          #ifndef guard. Thanks to J.T. Conklin <jtc@acorntoolworks.com>
          for reporting the problem.

Thu Aug 26 20:19:19 2004  J.T. Conklin  <jtc@acorntoolworks.com>

        * tao/Makefile.am:

          Added back includedir definition that got lost in a previous
          edit.

Thu Aug 26 22:07:30 2004  Jeff Parsons <j.parsons@vanderbilt.edu>

        * TAO_IDL/be_include/be_visitor_amh_pre_proc.h:
        * TAO_IDL/be/be_visitor_amh_pre_proc.cpp:

          Removed the overridden visit_scope() method. It does
          nothing different from the be_visitor_scope base class
          method. This closes [BUGID:1882].

Thu Aug 26 18:58:22 2004  Jeff Parsons <j.parsons@vanderbilt.edu>

        * TAO_IDL/be/be_codegen.cpp:
        * TAO_IDL/be/be_visitor_interface/interface_ih.cpp:
        * TAO_IDL/be/be_visitor_interface/interface_is.cpp:

          Fixed code generation in implementation files for local
          interfaces. Changes include:

          - inheritance from TAO_Local_RefCounted_Object instead
            of PortableServer::ServantBase.

          - no copy constructor generated.

          - tao/LocalObject.h included if local interface is seen.

        This fix closes [BUGID:1871].

Thu Aug 26 18:11:09 2004  Jeff Parsons <j.parsons@vanderbilt.edu>

        * orbsvcs/orbsvcs/IFRService/IFR_Service_Utils.cpp:

          Changed the minor code of a BAD_PARAM exception to 3
          (local name clash) from its incorrect value of 5
          (inherited name clash).

Thu Aug 26 16:37:29 2004  Dale Wilson  <wilson_d@ociweb.com>

        * interop-tests/wchar/interop_wchar.idl:
        * interop-tests/wchar/interop_wchar_i.h:
        * interop-tests/wchar/interop_wchar_i.cpp:
        * interop-tests/wchar/Client.java:
        * interop-tests/wchar/WChar_PasserImpl.java:
          Modified to test interoperability test JDK 1.4x ORB.
          The JDK ORB has trouble marshaling wide character strings
          when they are embedded in structures.
          This revised test reveals the problem so the solution
          can be tested.
          Declare/implement methods to send and receive wide
          character strings in structures and validate the
          results.
          Remove explicit references to JACOrb.

        * interop-tests/wchar/Server.java:
          Honor -o option rather than using argv[1] as IOR filename.


Thu Aug 26 16:29:53 2004  Jeff Parsons <j.parsons@vanderbilt.edu>

        * TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:
        * TAO_IDL/be/be_visitor_valuetype/valuetype_cs.cpp:
        * TAO_IDL/be/be_visitor_valuetype/valuetype_obv_ch.cpp:
        * TAO_IDL/be/be_visitor_valuetype/valuetype_obv_cs.cpp:

          Changed the check for generating _add_ref(), _remove_ref(),
          and _tao_to_value() for valuetypes from support of
          abstract interface(s) to support for any interface(s).
          For the first two methods, the generation is done to avoid
          their ambiguous inheritance. One source of inheritance
          is CORBA::ValueBase, and the other could be CORBA::Object,
          or CORBA::AbstractBase, or both. The third method is
          generated to extract a valuetype from an abstract
          interface, if it was passed by value. A valuetype could
          support a concrete interface that inherits from an
          abstract one, so again the method is necessary even if
          the valuetype supports a concrete interface.

Thu Aug 26 15:46:36 2004  Jeff Parsons <j.parsons@vanderbilt.edu>

        * TAO_IDL/ast/ast_component.cpp:
        * TAO_IDL/ast/ast_home.cpp:
        * TAO_IDL/ast/ast_interface.cpp:
        * TAO_IDL/ast/ast_valuetype.cpp:
        * TAO_IDL/include/ast_component.h:
        * TAO_IDL/include/ast_home.h:
        * TAO_IDL/include/ast_interface.h:
        * TAO_IDL/include/ast_valuetype.h:
        * TAO_IDL/include/utl_scope.h:
        * TAO_IDL/util/utl_scope.cpp:

          Made UTL_Scope::look_in_inherited() virtual and a no-op,
          while adding overrides to the appropriate AST_* classes.
          Also added a no-op look_in_supported() to UTL_Scope,
          and overrides where appropriate. Modified code in
          UTL_Scope::lookup_by_name() to call these new methods,
          and removed the check for node type, which is no longer
          needed. Thanks to Boris Kolpackov <boris@dre.vanderbilt.edu>
          for providing the IDL example that (legally) references
          by local name things declared in supported interfaces,
          base valuetypes, base components and base homes. This
          closes [BUGID:1706].

Thu Aug 26 13:48:31 2004  Jeff Parsons <j.parsons@vanderbilt.edu>

        * TAO_IDL/ast/ast_module.cpp:
        * TAO_IDL/include/ast_module.h:
        * TAO_IDL/include/utl_scope.h:

          Specialized the referenced() method for modules to
          catch redefinitions in a reopened module. Thanks to
          Boris Kolpackov <boris@dre.vanderbilt.edu> for reporting
          this bug. This fixed closes [BUGID:1695].

Thu Aug 26 12:37:45 2004  Jeff Parsons <j.parsons@vanderbilt.edu>

        * TAO_IDL/driver/drv_preproc.cpp (DRV_check_for_include):

          Added check for .pidl file included as a local filename.
          Because of lookup quirks necessary for orb.idl, the
          above case will also be found, even without a proper
          -I option, but the generated C++ include will be incorrect.
          So we add the necessary path to the .pidl filename before
          it is stored for later validation and code generation.
          This closes [BUGID:1608].

Thu Aug 26 11:22:51 2004  Jeff Parsons <j.parsons@vanderbilt.edu>

        * tests/Abstract_Interface/Abstract_Interface.mpc:

          Changed dependencies in the client project, and added
          explicit file lists to both projects.

Thu Aug 26 10:38:49 2004  Chris Cleeland  <cleeland_c@ociweb.com>

        * orbsvcs/orbsvcs/Naming/Storable_Naming_Context.h:
        * orbsvcs/orbsvcs/Naming/Storable_Naming_Context.cpp:

          Fix fuzz build complaints about returning 'int' rather than
          'bool' from operator== and operator!=.

Thu Aug 26 10:17:45 2004  Jeff Parsons <j.parsons@vanderbilt.edu>

        * TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:

          Fixed incorrect generation of base classes for C++ classes
          mapped from valuetypes, to include only the immediate
          supported abstract interfaces rather than the entire
          graph of supported abstract interfaces.

Thu Aug 26 00:17:41 2004  J.T. Conklin  <jtc@acorntoolworks.com>

        * orbsvcs/orbsvcs/Makefile.am:

          Added Shutdown_Utilities.cpp to Svc_Util libraries sources.

        * orbsvcs/tests/FaultTolerance/GroupRef_Manipulation/Makefile.am:

          Removed -Gv from IDL compiler flags.

Wed Aug 25 16:03:29 2004  Chris Cleeland  <cleeland_c@ociweb.com>

        * orbsvcs/Naming_Service/Naming_Server.cpp:
        * orbsvcs/Naming_Service/Naming_Service.cpp:
        * orbsvcs/Naming_Service/Naming_Service.h:
        * orbsvcs/orbsvcs/IOR_Multicast.cpp:
        * orbsvcs/orbsvcs/Shutdown_Utilities.cpp:
        * orbsvcs/orbsvcs/Shutdown_Utilities.h:
        * orbsvcs/orbsvcs/Svc_Utils.mpc:
        * orbsvcs/orbsvcs/Naming/Flat_File_Persistence.cpp:
        * orbsvcs/orbsvcs/Naming/Naming_Utils.cpp:
        * orbsvcs/orbsvcs/Naming/Storable_Naming_Context.cpp:
        * orbsvcs/orbsvcs/Naming/Storable_Naming_Context.h:
        * orbsvcs/orbsvcs/Naming/Storable_Naming_Context_Activator.cpp:
        * orbsvcs/orbsvcs/Naming/Storable_Naming_Context_Activator.h:
        * utils/nslist/nsadd.cpp:
        * utils/nslist/nsdel.cpp:

          Integrated many memory leak fixes for the Naming Service
          originally done in OCITAO 1.3a.  All relevant original changelog
          entries are below:

        Thu Jul 22 11:31:30 2004  Chris Cleeland  <cleeland_c@ociweb.com>

                * utils/nslist/nsdel.cpp (main):

                  Added a new option, --destroy, that can be used to destroy the
                  specified context after the unbind.  If the context is unbound
                  but not destroyed using "nsdel", then the context will leak
                  within the Naming Service because no NS client will be able to
                  resolve() to get a reference to it again.

                * orbsvcs/orbsvcs/Naming/Storable_Naming_Context.cpp
                  (TAO_Storable_Naming_Context::DTOR):

                  Corrected a problem where the file that acts as persistent
                  backing store for context information didn't get removed when
                  the context had been destroyed via the "destroy()" operation.
                  This should address [RT 4221].

        Wed Jul  7 15:41:33 2004  Chris Cleeland  <cleeland_c@ociweb.com>

                * orbsvcs/orbsvcs/Naming/Naming_Utils.cpp (TAO_Naming_Server):
                  Made deletion of servant_activator_ conditional on the
                  use_servant_activator_ member variable, since servant_activator_
                  should only have a value when use_servant_activator_ is true.
                  For safety sake, however, we now also explicitly initialize
                  servant_activator_ to zero.

                  This should fix scoreboard problems on tests that instantiate a
                  TAO_Naming_Server directly in their code rather than starting up
                  a naming service executable, such as TAO/examples/Simple/grid.

        Fri Jul  2 10:16:06 2004  Rich Seibel <seibel_r@ociweb.com>

                * utils/nslist/nsadd.cpp:
                  Integrated change from Dave Knox at Intrado Inc. to add the
                  ability to add a new context to the Naming Service.
                  At the same time, I pulled over the DOC group change to
                  automatically add any intermediate contexts.  RT4014.

                * utils/nslist/runtest.pl:
                  New test added to test the ability to use the above.

        Wed Jun 30 12:29:50 2004  Chris Cleeland  <cleeland_c@ociweb.com>

                * orbsvcs/orbsvcs/Naming/Storable_Naming_Context.cpp
                  (File_Open_Lock_and_Check::File_Open_Lock_and_Check):
                  Added an else clause to delete the file returned from
                  create_stream in case none of the other branches were executed.
                  This eliminates a continuous leak seen only using the "-u"
                  option on the Naming Service.

        Wed Jun 30 12:29:18 2004  Chris Cleeland  <cleeland_c@ociweb.com>

                * orbsvcs/orbsvcs/Naming/Naming_Utils.cpp
                  (TAO_Naming_Server::DTOR): Added an explicit delete for the
                  servant_activator_.

                * orbsvcs/orbsvcs/Naming/Storable_Naming_Context_Activator.h
                  (ServantActivator): Eliminated the inheritance from
                  TAO_RefcountedLocalObject.  The inheritance was placed there
                  with the thought that the servant would be reference counted
                  and, thus, its lifecycle magically managed.  Empirical evidence
                  shows otherwise, so we have these two changes.  This eliminates
                  a one-time 88 byte or so leak when running the Naming Service
                  with flat file persistence.

        Mon Jun 21 16:43:06 2004  Chris Cleeland  <cleeland_c@ociweb.com>

                * orbsvcs/orbsvcs/Naming/Storable_Naming_Context.cpp: Forgot to
                  update this when I did the entry below.

        Mon Jun 21 12:17:35 2004  Chris Cleeland  <cleeland_c@ociweb.com>

                * orbsvcs/orbsvcs/Naming/Storable_Naming_Context.h
                  (TAO_Storable_Naming_Context):
                * tao/ORB_Core.{h,cpp} (instance_):

                  Changed use of auto_ptr<> to ACE_Auto_Ptr<> to avoid
                  compatibility problems on VC6 platforms.

        Sun Jun 20 09:34:46 2004  Chris Cleeland  <cleeland_c@ociweb.com>

                * orbsvcs/orbsvcs/Naming/Storable_Naming_Context.cpp: More tweaks in
                  various places to use *_var's in() method in order to de-warn
                  about ambiguous conversions on certain compilers.

                * orbsvcs/tests/ImplRepo/NameService/run_test.pl: Increaed the
                  waitforfile_timed timeout value so the test could succeed on
                  slow/overloaded nightly build platforms.

        Sat Jun 19 00:21:28 2004  Chris Cleeland  <cleeland_c@ociweb.com>

                * orbsvcs/orbsvcs/Naming/Storable_Naming_Context.cpp
                  (~TAO_Storable_Naming_Context): Sigh...removed code residue from
                  debugging the problem below that was causing rampant breakage on
                  any platform that wasn't glibc-based.

        Fri Jun 18 17:34:22 2004  Chris Cleeland  <cleeland_c@ociweb.com>

                * orbsvcs/orbsvcs/Naming/Storable_Naming_Context.cpp
                  (~TAO_Storable_Naming_Context): Got rid of the call to remove
                  the file.  Having the remove in here broke persistence when all
                  the memory leaks got fixed, because upon destruction it would
                  end up removing the file for the context.  This should fix the
                  failures of the persistent variant of the Simple_Naming test.

                  A point worth noting is that I originally thought that the
                  remove() needed to be moved into a different, new method so that
                  when a context got unbound the file would get properly removed.
                  While I can find no place in the code where an unbind calls the
                  equivalent of remove(), anecdotal evidence shows that, indeed,
                  the files get removed at unbind time, and everything works the
                  way it's supposed to.  Mysterious...

        Fri Jun 18 13:52:07 2004  Chris Cleeland  <cleeland_c@ociweb.com>

                * orbsvcs/orbsvcs/IOR_Multicast.cpp (~TAO_IOR_Multicast): Changed
                  to use the leave() method, since apparently *all* unsubscribe
                  methods are deprecated.

        Fri Jun 18 13:34:01 2004  Chris Cleeland  <cleeland_c@ociweb.com>

                * orbsvcs/orbsvcs/Naming/Storable_Naming_Context.cpp: Tweaks in
                  various places to use the ORB_var's in() method in order to
                  de-warn on gcc 3.2.

                * orbsvcs/orbsvcs/IOR_Multicast.cpp (~TAO_IOR_Multicast):
                  Eliminated use of deprecated unargumented unsubscribe() call,
                  and use the correct calls instead.  This should get rid of the
                  deprecation message printed out when the naming service
                  terminates, which was also upsetting the Simple_Naming test
                  output processing script (see below).

                * orbsvcs/Naming_Service/Naming_Server.cpp (operator()): Made the
                  message only get printed out when the debug level is turned on.
                  Seems that the multithreaded version of the Simple_Naming test
                  was seeing this message, not expecting it, and declaring that
                  the test had failed.

        Thu Jun 17 18:30:52 2004  Chris Cleeland  <cleeland_c@ociweb.com>

                * orbsvcs/Naming_Service/Naming_Service.cpp (fini): Add call to
                  the naming server object's fini method so things get properly
                  removed/deallocated.

                * orbsvcs/orbsvcs/Naming/Naming_Utils.cpp (fini): Moved code that
                  was in the destructor into here in order to parallel the
                  allocation of things occurring in the init*() methods.

                  Also changed to get the reactor through orb->orb_core() rather
                  than TAO_ORB_Core_instance(), which is old and decrepit.

                  Hopefully this fixes core dumps on exit when using "-m 1".

        Tue Jun 15 17:34:42 2004  Chris Cleeland  <cleeland_c@ociweb.com>

                * orbsvcs/orbsvcs/Naming/Naming_Utils.cpp (DTOR):

                  Removed the delete of the servant activator.  Turns out that
                  reference-counting the servant activator was enough.  This
                  should fix a core dump observed in the nightly builds on exit
                  from the Naming Service.

        Mon Jun 14 13:56:22 2004  Chris Cleeland  <cleeland_c@ociweb.com>

                * orbsvcs/orbsvcs/Naming/Naming_Utils.cpp (init_with_orb):

                  Fixed message printed in exception so that it has the correct
                  class name.

        Mon Jun 14 12:22:03 2004  Chris Cleeland  <cleeland_c@ociweb.com>

                  Corrected a bunch of memory leaks throughout the naming
                  service.  Details below...

                * orbsvcs/orbsvcs/Naming/Flat_File_Persistence.cpp (close):

                  Properly close the flat file to reclaim memory allocated in the
                  system's stdio library.

                * orbsvcs/orbsvcs/Naming/Naming_Utils.cpp (init_with_orb):

                  Use auto_ptr<> to hold the persistence factory so that it gets
                  properly cleaned up.

                  The servant activator accepts and holds on to a pointer to the
                  persistence factory.  However, we don't always create a servant
                  activator.  We need to use auto_ptr<> over the persistence
                  factory to insure proper cleanup in the case of an exception or
                  in the case where we don't use use servant activator, so the
                  code is a little goofy, and we end up releasing the pointer from
                  the auto_ptr<> if the servant activator's in use.

                  There's probably a better way to handle this, such as reference
                  counting, but I wanted going for the minimal thing that worked.

                * orbsvcs/orbsvcs/Naming/Storable_Naming_Context_Activator.*:

                  Refined the role of the activator with regard to ownership of
                  and responsibility for managing the persistence factory--the
                  activator is now responsible for cleaning up the persistence
                  factory.

                  The destructor now performs its duty.

                * orbsvcs/orbsvcs/Naming/Naming_Utils.cpp (init_new_naming):

                  Change to hold the heap-allocated servant activator in a data
                  member rather than a local so that we can clean it up when we're
                  finished rather than just leak it.

                * orbsvcs/orbsvcs/Naming/Naming_Utils.cpp (DTOR):

                  Make sure everything gets cleaned up.

                * orbsvcs/orbsvcs/Naming/Storable_Naming_Context.cpp:
                * orbsvcs/orbsvcs/Naming/Storable_Naming_Context.h:

                  Discontinued use of the TAO_Persistent_*Id classes.  These
                  classes were designed and implemented to be used with the
                  Persistent store, which is memory-mapped.   Therefore, they
                  assume that some external entity will be doing any and all
                  dynamic allocations, and that they should do none lest they
                  screw it up.

                  We now have analogous TAO_Storable_*Id classes which DO assume
                  responsibility for managing their dynamically-allocated memory.
                  For the moment, since they are not used anywhere except within
                  the Storable_Naming_Context, they do not have their own files.

                * orbsvcs/orbsvcs/Naming/Storable_Naming_Context.* (gfl_):

                  Wrap in an auto_ptr<> so that the stream gets properly destroyed
                  at the proper time and doesn't leak.

                * orbsvcs/orbsvcs/Naming/Storable_Naming_Context.cpp
                  (shared_bind):

                  Capture the return from object_to_string in a String_var to
                  eliminate a leak.

                * orbsvcs/orbsvcs/Naming/Storable_Naming_Context.cpp (DTOR):
                * orbsvcs/orbsvcs/Naming/Storable_Naming_Context.cpp (recreate_all):

                  Use an auto_ptr<> to capture the values returned from
                  create_stream() so that they get properly destroyed.

                * orbsvcs/orbsvcs/Naming/Storable_Naming_Context.h (TAO_Storable_Bindings_Map):

                  Hold the ORB reference in a _var rather than a _ptr so it gets
                  properly refcounted.

                * orbsvcs/orbsvcs/Naming/Storable_Naming_Context_Activator.h:

                  Mixed-in TAO_Local_RefCounted_Object hoping that the POA called
                  the reference-counting methods, and, thus, it would insure that
                  the POA would manage the activator's instance automagically.
                  Alas, this didn't appear to work, but I can't see any harm in
                  leaving this in for now.

        Mon Jun 14 12:06:45 2004  Chris Cleeland  <cleeland_c@ociweb.com>

                * orbsvcs/Naming_Service/Naming_Service.*:

                  Added a fini() method to clean up resources acquired/allocated
                  in the init*() methods.  The onus is on the application to call
                  fini(), however.

                * orbsvcs/Naming_Service/Naming_Server.cpp (main):

                  Added call to new fini() method to insure proper cleanup.

        Mon Jun  7 11:13:44 2004  Chris Cleeland  <cleeland_c@ociweb.com>

                * orbsvcs/orbsvcs/Shutdown_Utilities.cpp:

                  Defined our own TAO_ORBSVCS_MAXSIG as "one plus the largest
                  signal number to which we pay attention", rather than using
                  SIGRTMIN.  This should be portable across all platforms.

                  Bracketed use of actual signal names in the convenience CTOR by
                  ACE_LACKS_UNIX_SIGNALS so that non-Unix platforms actually
                  compile.

        Fri Jun  4 16:16:02 2004  Chris Cleeland  <cleeland_c@ociweb.com>

                * orbsvcs/orbsvcs/Shutdown_Utilities.h:
                * orbsvcs/orbsvcs/Shutdown_Utilities.cpp:
                * orbsvcs/orbsvcs/Svc_Utils.mpc:

                  Added a new utility class to the Svc_Utils library that makes it
                  easy to have a service propertly shut itself down in response to
                  a signal.  The motivation for this was an apparent memory leak
                  in the Naming Service and the desire to use purify-like tools to
                  diagnose.  However, the service never shut itself down properly,
                  so purify would not produce a leak report.

                * orbsvcs/Naming_Service/Naming_Service.h (shutdown):
                * orbsvcs/Naming_Service/Naming_Service.cpp (shutdown):

                  Added a new method to shut down the Naming Service.

                * orbsvcs/Naming_Service/Naming_Server.cpp:

                  Added code to use the new shutdown utility classes to gracefully
                  shut down the naming service.

Wed Aug 25 15:06:35 2004  Rich Seibel <seibel_r@ociweb.com>

        * examples/PluggableUDP/tests/SimplePerformance/client.cpp:
        The test does an FPE if the time measured is smaller than
        the resolution of the Hi-Res timer.  It now tests for zero
        elapsed time and does not try to divide by zero.

Wed Aug 25 11:24:20 2004  Ossama Othman  <ossama@dre.vanderbilt.edu>

        * orbsvcs/orbsvcs/SSLIOP/SSLIOP_EVP_PKEY.cpp:

          Include <openssl/{x509,rsa,dsa,dh}.h to pull in OpenSSL function
          prototypes used in this file.  Fixes compile-time problems that
          occur when using older versions of OpenSSL.  Thanks to Chris
          Cleeland for pointing this out.

Wed Aug 25 13:11:39 2004  Jeff Parsons <j.parsons@vanderbilt.edu>

        * TAO_IDL/be/be_visitor_valuetype/field_ch.cpp:

          Fixed newline formatting of generated code.

Wed Aug 25 09:02:12 UTC 2004  Johnny Willemsen  <jwillemsen@remedy.nl>

        * orbsvcs/orbsvcs/LoadBalancing/LB_CPU_Load_Average_Monitor.cpp:
        * orbsvcs/orbsvcs/LoadBalancing/LB_CPU_Utilization_Monitor.cpp:
          Added missing sys in the include path of my change below

Wed Aug 25 07:18:12 UTC 2004  Johnny Willemsen  <jwillemsen@remedy.nl>

        * orbsvcs/orbsvcs/LoadBalancing/LB_CPU_Load_Average_Monitor.cpp:
          Instead of including sys/loadavg.h, include
          ace/os_include/os_loadavg.h

        * orbsvcs/orbsvcs/LoadBalancing/LB_CPU_Utilization_Monitor.cpp:
          Instead of including sys/loadavg.h, include
          ace/os_include/os_loadavg.h. Added include of os_pstat.h to fix
          compile error on HPUX on Itanium

Tue Aug 24 20:33:08 2004  J.T. Conklin  <jtc@acorntoolworks.com>

        * tests/RTCORBA/RTMutex/server.cpp:

          Changed test_mutex_try_lock to unlock mutex before releasing it.

Tue Aug 24 16:09:00 UTC 2004  Martin Corino <mcorino@remedy.nl>

        * docs/releasenotes/OBV.html:
        * docs/releasenotes/index.html:

          Updated documentation of valuetype support. See [Bug 1908].

Tue Aug 24 08:53:00 UTC 2004  Martin Corino <mcorino@remedy.nl>

        * docs/compiler.html:

          Removed documentation of '-Sv' option. See [Bug 1908].

Tue Aug 24 06:55:12 UTC 2004  Johnny Willemsen  <jwillemsen@remedy.nl>

        * tests/Portable_Interceptors/PolicyFactory/PI_PolicyFactory.mpc:
          Added missing base project, removed not needed idlflags

Mon Aug 23 23:27:01 2004  Ossama Othman  <ossama@dre.vanderbilt.edu>

        * Makefile.am (AUTOMAKE_OPTIONS):

          Removed required Automake version from `Makefile.am'.
          `configure.ac' already defines it.

        * configure.ac (AM_INIT_AUTOMAKE):

          Updated required version of Automake to 1.9.

Mon Aug 23 21:40:36 2004  Balachandran Natarajan  <bala@dre.vanderbilt.edu>

        * tao/Synch_Invocation.cpp:
        * tao/Messaging/Asynch_Invocation.cpp:

          Fixed a problem which used to make the client ORB hang when the
          BiDirPolicy was set and a corbaloc URL was used. The problem
          stemmed from the following

          - The reply dispatcher was bound to the table with some
            request ID.

          - When the request header was generated, the request ID was
            munged to be compliant with BiDir GIOP semantics.

          - The request could possible be sent out with a different
            request ID whose reply dispatcher could have been bounded with
            a different ID.

          The above made the client ORB hang. We now marshal the whole
          request before we bind the dispatcher, which will get us the
          right ID. This fixes the problem. After getting permissions from
          Thomas Lockhart, I will checkin the test.

          Thanks to Thomas Lockhart for reporting the problem.

Mon Aug 23 20:36:59 2004  Balachandran Natarajan  <bala@dre.vanderbilt.edu>

        * tao/Transport_Connector.cpp:

          A simple programmatic error while trying to set the type of role
          on the client caused a bunch of tests to fail. Many tests should be
          going strong after this change.

Mon Aug 23 06:40:12 UTC 2004  Johnny Willemsen  <jwillemsen@remedy.nl>

        * orbsvcs/orbsvcs/PortableGroup/PG_Object_Group.cpp:
          Fixed incorrect usage of iterator, thanks to Sebastien Roy
          <sroy@positron.qc.ca> for reporting this. This fixes bugzilla
          id [1911].

Sun Aug 22 10:04:33 2004  J.T. Conklin  <jtc@acorntoolworks.com>

        * tao/DynamicAny.mpc:

          Changed to not inherit from valuetype.

Sun Aug 22 10:19:00 UTC 2004  Johnny Willemsen  <jwillemsen@remedy.nl>

        * tao/Wait_On_LF_No_Upcall.cpp:
          Fixed compile error with Borland compiler

Sun Aug 22 09:44:00 UTC 2004  Martin Corino <mcorino@remedy.nl>

        * TAO_IDL/be/be_global.cpp:
        * TAO_IDL/include/idl_global.h:
        * TAO_IDL/util/utl_global.cpp:

          Removed all support for '-Gv' and '-Sv' valuetype switches as per
          [Bug 1908].

Fri Aug 20 13:11:38 2004  J.T. Conklin  <jtc@acorntoolworks.com>

        * orbsvcs/orbsvcs/Makefile.am:

          Updated.

        * orbsvcs/orbsvcs/ec_typed_events.mpc:

          Changed to prepend "orbsvcs/" to export include path.

Fri Aug 20 19:15:16 2004  Balachandran Natarajan  <bala@dre.vanderbilt.edu>

        * tao/Wait_On_LF_No_Upcall.cpp:
        * tao/Wait_On_LF_No_Upcall.h:

          Moved the classes within the TAO namespace. The TAO_* classes
          have to die. New classes needs to go in TAO namespace.

        * tao/Transport.cpp:
        * tao/Transport.h:
        * tao/Transport.inl:

          The Connection_Role enum is now in TAO namespace instead of the
          the global namespace.

        * tao/Acceptor_Impl.cpp:
        * tao/Transport_Connector.cpp:
        * tao/default_client.cpp:

          Changes that got propagated from above.

Fri Aug 20 10:36:57 2004  Chris Cleeland  <cleeland_c@ociweb.com>

        * tao/Wait_On_LF_No_Upcall.h: Fix fuzz build errors from missing
          /**/ on pre.h/post.h includes.

Fri Aug 19 14:57:12 UTC 2004  Johnny Willemsen  <jwillemsen@remedy.nl>

        * tests/Bug_1670_Regression/Bug_1670_Regression.mpc:
          Instead of adding -GH to the idlflags, use amh as base project, this
          does the same and is much better to maintain

Fri Aug 19 14:43:12 UTC 2004  Johnny Willemsen  <jwillemsen@remedy.nl>

        * tests/Bug_1568_Regression/Bug_1568_Regression.mpc:
          Instead of adding -GH to the idlflags, use amh as base project, this
          does the same and is much better to maintain

Fri Aug 19 10:42:12 UTC 2004  Johnny Willemsen  <jwillemsen@remedy.nl>

        * tao/Transport.h:
          Removed not allowed comma at end of enum list

Fri Aug 20 02:15:42 2004  J.T. Conklin  <jtc@acorntoolworks.com>

        * tao/Makefile.am:

          Updated to account for addition of Wait_On_LF_No_Upcall.*
          plus some improvements in MPC's automake support.

Fri Aug 20 09:27:00 UTC 2004  Martin Corino <mcorino@remedy.nl>

        * tests/ORT/ORT.mpc:
        * tests/Bug_1670_Regression/Bug_1670_Regression.mpc:
        * tests/Bug_1568_Regression/Bug_1568_Regression.mpc:
        * orbsvcs/tests/FaultTolerance/GroupRef_Manipulation/GroupRef_Manipulation.mpc:
          Removed outdated -Gv IDL option according to [Bug 1908].

Thu Aug 19 23:28:25 2004  Ossama Othman  <ossama@dre.vanderbilt.edu>

        * tao/Acceptor_Impl.cpp:

          Include "Transport.h" to pull in "TAO_SERVER_ROLE" enumeration
          member definition.

Thu Aug 19 22:00:39 2004  Ossama Othman  <ossama@dre.vanderbilt.edu>

        * orbsvcs/tests/Security/MT_IIOP_SSL/MT_IIOP_SSL.mpc:
        * orbsvcs/tests/Security/Secure_Invocation/Secure_Invocation.mpc:
        * orbsvcs/tests/Security/SecurityLevel1/SecurityLevel1.mpc:

          Fixed incorrect base project.  "orbsvcslib", not "orbsvcsexe".
          Addresses problems related to missing directories in the
          preprocessor include path.

          Removed unecessary base projects from client projects.

Thu Aug 19 16:49:24 2004  Chris Cleeland  <cleeland_c@ociweb.com>

        * tao/Wait_On_LF_No_Upcall.h:
        * tao/Wait_On_LF_No_Upcall.cpp:
        * tao/tao.mpc:

          Created new wait strategy that combines features of Wait_On_Read
          and Wait_On_Leader_Follower.  This strategy re-enters the
          leader-follower, but does not permit nested upcalls on the
          requesting thread while waiting for a reply.  Other threads are
          permitted to operate normally.  The strategy was motivated by
          the need to recognize connections opened in the client role and
          closed by the far side.  Using Wait_On_Read, the closure would
          only be recognized the next time an invocation gets made that
          goes through that connection.  Notably in the notification
          service, there is a _narrow() that causes an invocation on an
          object, and that connection never gets reused.  Thus, it sits in
          CLOSE_WAIT consuming a file descriptor for the rest of the
          process.

          Implementing this required modifications to other files to
          allocate and honor a flag set by this wait strategy.

        * docs/Options.html:

          Added documentation on the new wait strategy.

        * orbsvcs/orbsvcs/PortableGroup/UIPMC_Connection_Handler.cpp:
        * orbsvcs/orbsvcs/SSLIOP/IIOP_SSL_Connection_Handler.cpp:
        * orbsvcs/orbsvcs/SSLIOP/SSLIOP_Connection_Handler.cpp:
        * tao/Strategies/DIOP_Connection_Handler.cpp:
        * tao/Strategies/SCIOP_Connection_Handler.cpp:
        * tao/Strategies/SHMIOP_Connection_Handler.cpp:
        * tao/Strategies/UIOP_Connection_Handler.cpp:
        * tao/Transport.h:
        * tao/Transport.cpp:
        * tao/Transport.inl:
        * tao/Transport_Connector.cpp:
        * tao/Connection_Handler.h:
        * tao/Connection_Handler.inl:
        * tao/ORB_Core.h:
        * tao/ORB_Core.cpp:
        * tao/Connection_Handler.cpp:
        * tao/IIOP_Connection_Handler.cpp:
        * tao/Acceptor_Impl.cpp:
        * tao/default_client.cpp:
        * tao/default_client.h:
        * tao/Thread_Per_Connection_Handler.cpp:

          Updated to cooperate with the new wait strategy.  Note that some
          refactoring in the Connection_Handler requires changes in any
          pluggable transport's derived Connection_Handler in order to
          participate in this wait strategy.

Thu Aug 19 01:54:51 2004  Ossama Othman  <ossama@dre.vanderbilt.edu>

        * orbsvcs/orbsvcs/SSLIOP/SSLIOP_OpenSSL_st_T.inl:
        * orbsvcs/orbsvcs/SSLIOP/SSLIOP_SSL.h:

          Fixed some syntax errors that MSVC++ 6 let slip through.

Thu Aug 19 08:49:12 UTC 2004  Johnny Willemsen  <jwillemsen@remedy.nl>

        * tao/BiDir_GIOP/BiDirGIOP.h:
          Corrected comment after #endif

Thu Aug 19 08:44:12 UTC 2004  Johnny Willemsen  <jwillemsen@remedy.nl>

        * PROBLEM-REPORT-FORM:
          Ask for the default.features file used by MPC.

Wed Aug 18 23:09:29 2004  Ossama Othman  <ossama@dre.vanderbilt.edu>

        * orbsvcs/orbsvcs/SSLIOP/SSLIOP_ClientCredentials.cpp:
        * orbsvcs/orbsvcs/SSLIOP/SSLIOP_Credentials.cpp:
        * orbsvcs/orbsvcs/SSLIOP/SSLIOP_Credentials.inl:
        * orbsvcs/orbsvcs/SSLIOP/SSLIOP_OpenSSL_st_T.inl:

          Due MSVC++ 6's inability to correctly deduce the function
          template specialization to use based on the function argument,
          resort to explicitly calling the type-specific
          TAO::SSLIOP::OpenSSL trait function instead.  Once we drop
          support for MSVC++ 6, we can go back to using the function
          templates so that the code can be cleaner once again.

        * orbsvcs/orbsvcs/SSLIOP/SSLIOP_EVP_PKEY.h:
        * orbsvcs/orbsvcs/SSLIOP/SSLIOP_SSL.h:
        * orbsvcs/orbsvcs/SSLIOP/SSLIOP_X509.h:

          Added new _duplicate() static trait function.  MSVC++ 6 couldn't
          handle the function templates in the TAO::SSLIOP namespace so
          resort to reproducing code in each specialization.

        * orbsvcs/orbsvcs/SSLIOP/SSLIOP_EVP_PKEY.cpp (copy):

          Not all versions of OpenSSL declare the RSAPrivateKey_dup()
          function in the global namespace.  Remove the global "::"
          namespace qualifier to fix a compile-time error when using those
          versions of OpenSSL.

Wed Aug 18 10:41:03 2004  Jeff Parsons <j.parsons@vanderbilt.edu>

        * TAO_IDL/be/be_visitor_component/component.cpp:

          Changed context state in switch case labels to correspond with
          changes in

          Tue Aug 17 15:48:28 2004  Jeff Parsons <j.parsons@vanderbilt.edu>

Wed Aug 18 08:32:12 UTC 2004  Johnny Willemsen  <jwillemsen@remedy.nl>

        * tao/ORB_Core.h:
          Converted some old style documentation to doxygen style

Wed Aug 18 06:44:12 UTC 2004  Johnny Willemsen  <jwillemsen@remedy.nl>

        * tao/Strategies/SCIOP_Connector.{h,cpp}:
          Fixed compile errors in sctp enabled builds. Now the ATL builds
          are online again, these reported some errors.

Tue Aug 17 21:33:35 2004  J.T. Conklin  <jtc@acorntoolworks.com>

        * orbsvcs/orbsvcs/CosNaming.mpc:

          Removed explicit libs and after statements for messaging, since
          project allready inherits from messaging base project.

Tue Aug 17 21:16:44 2004  J.T. Conklin  <jtc@acorntoolworks.com>

        * orbsvcs/orbsvcs/FtRtEvent.mpc:

          Changed to inherit from corba_messaging instead of providing
          requires statement to eliminate duplicate entries in list.

        * orbsvcs/orbsvcs/RTCosScheduling.mpc:
        * orbsvcs/orbsvcs/SSLIOP.mpc:
        * orbsvcs/orbsvcs/Security.mpc:

          Changed to inherit from interceptors instead of providing
          requires statements to eliminate duplicate entries in list.

Tue Aug 17 17:32:39 2004  J.T. Conklin  <jtc@acorntoolworks.com>

        * {docs,examples,orbsvcs,performance-tests,utils}/.../*.{cpp,h,idl}:

          Changed #include <orbsvcs/orbsvcs/...> to #include <orbsvcs/...>.

Tue Aug 17 17:56:23 2004  Jeff Parsons <j.parsons@vanderbilt.edu>

        * TAO_IDL/be/be_interface.cpp:
        * TAO_IDL/be/be_visitor_component/component.cpp:
        * TAO_IDL/be/be_visitor_component/component_ch.cpp:
        * TAO_IDL/be/be_visitor_component/component_cs.cpp:
        * TAO_IDL/be/be_visitor_interface/interface_ch.cpp:
        * TAO_IDL/be/be_visitor_module/module.cpp:
        * TAO_IDL/be/be_visitor_root/root.cpp:
        * TAO_IDL/fe/fe_interface_header.cpp:
        * TAO_IDL/include/utl_err.h:
        * TAO_IDL/util/utl_err.cpp:

          Eliminated the error message generated when a component is
          supporting an abstract interface - it was mistakenly assumed
          that such a thing was barred by the spec. Once this error
          was eliminated, other changes were required to support the
          new 'feature'.

Tue Aug 17 15:48:28 2004  Jeff Parsons <j.parsons@vanderbilt.edu>

        * TAO_IDL/be/be_interface.cpp:

          Changed the logic of the check for 'mixed parentage'
          (abstract & concrete) in an interface, to return true not
          only if an interface has an immediate abstract parent (as
          before) but also if there is an abstract interface
          anywhere in its ancestry. This is necessary for skeletons-side
          code generation, since abstract interfaces have no operations
          generated on the skeleton side for children to inherit, the
          operations must be regenerated in each child.

        * TAO_IDL/be/be_visitor_interface/direct_proxy_impl_sh.cpp:
        * TAO_IDL/be/be_visitor_interface/direct_proxy_impl_ss.cpp:
        * TAO_IDL/be/be_visitor_interface/interceptors_ss.cpp:
        * TAO_IDL/be/be_visitor_interface/interface.cpp:
        * TAO_IDL/be/be_visitor_interface/interface_ch.cpp:
        * TAO_IDL/be/be_visitor_interface/interface_cs.cpp:
        * TAO_IDL/be/be_visitor_interface/interface_sh.cpp:
        * TAO_IDL/be/be_visitor_interface/interface_ss.cpp:
        * TAO_IDL/be/be_visitor_interface/thru_poa_proxy_impl_sh.cpp:
        * TAO_IDL/be/be_visitor_interface/thru_poa_proxy_impl_ss.cpp:

          For the gen_abstract_ops_helper() static method in each of the
          above visitors, changed the logic to do nothing unless the
          base interface passed to the method is abstract. The check
          has been moved here from its former location in the method
          call so operations inherited from distance abstract ancestors
          can be found and regenerated. Thanks to Markus Stenberg
          <markus.stenberg@conformiq.com> for sending in an example that
          uncovered the bug.

        * TAO_IDL/be/be_visitor_valuetype/valuetype_ci.cpp:
        * TAO_IDL/be/be_valuetype.cpp:
        * TAO_IDL/be_include/be_valuetype.h:

          Removed unused code.

Tue Aug 17 11:40:05 2004  Jeff Parsons <j.parsons@vanderbilt.edu>

        * TAO_IDL/be/be_visitor_root/root.cpp:

          Added generation of '\n' as the very last thing that
          happens in each generated file, to make absolutely
          sure every file ends with a newline (required by CVS
          and some compilers). Thanks to
          Markus Stenberg <markus.stenberg@conformiq.com> for
          reporting the problem in *S.inl when -Sp (suppression
          of thru-POA collocation code) is in effect.

Mon Aug 16 23:56:21 2004  J.T. Conklin  <jtc@acorntoolworks.com>

        * orbsvcs/orbsvcs/FtRtEvent.mpc:

          Changed FTRT_EventChannel project to inherit from core.

        * orbsvcs/orbsvcs/RTCosScheduling.mpc:

          Changed RTCosScheduling project to inherit from core.

Tue Aug 17 06:49:12 UTC 2004  Johnny Willemsen  <jwillemsen@remedy.nl>

        * TAO_IDL/be/be_visitor_ccm_pre_proc.cpp:
          Fixed member initialisation order warning

Mon Aug 16 23:35:00 2004  J.T. Conklin  <jtc@acorntoolworks.com>

        * configure.ac:

          Update to configure orbsvcs/tests/F*.

        * orbsvcs/tests/Makefile.am:

          Update to build new tests.

        * orbsvcs/tests/FT_App/Makefile.am:
        * orbsvcs/tests/FaultTolerance/Makefile.am:
        * orbsvcs/tests/FaultTolerance/GroupRef_Manipulation/Makefile.am:
        * orbsvcs/tests/FaultTolerance/IOGR/Makefile.am:
        * orbsvcs/tests/FaultTolerance/IOGRManipulation/Makefile.am:
        * orbsvcs/tests/FtRtEvent/Makefile.am:

          New files.

        * orbsvcs/orbsvcs/AV.mpc:
        * orbsvcs/orbsvcs/CosConcurrency.mpc:
        * orbsvcs/orbsvcs/CosEvent.mpc:
        * orbsvcs/orbsvcs/CosLifeCycle.mpc:
        * orbsvcs/orbsvcs/CosLoadBalancing.mpc:
        * orbsvcs/orbsvcs/CosNaming.mpc:
        * orbsvcs/orbsvcs/CosNotification.mpc:
        * orbsvcs/orbsvcs/CosProperty.mpc:
        * orbsvcs/orbsvcs/CosTime.mpc:
        * orbsvcs/orbsvcs/CosTrading.mpc:
        * orbsvcs/orbsvcs/DsEventLogAdmin.mpc:
        * orbsvcs/orbsvcs/DsLogAdmin.mpc:
        * orbsvcs/orbsvcs/DsNotifyLogAdmin.mpc:
        * orbsvcs/orbsvcs/FTORB.mpc:
        * orbsvcs/orbsvcs/FaultTolerance.mpc:
        * orbsvcs/orbsvcs/FtRtEvent.mpc:
        * orbsvcs/orbsvcs/PortableGroup.mpc:
        * orbsvcs/orbsvcs/RTCORBAEvent.mpc:
        * orbsvcs/orbsvcs/RTCosScheduling.mpc:
        * orbsvcs/orbsvcs/RTEvent.mpc:
        * orbsvcs/orbsvcs/RTEventLogAdmin.mpc:
        * orbsvcs/orbsvcs/RTSched.mpc:
        * orbsvcs/orbsvcs/RT_Notification.mpc:
        * orbsvcs/orbsvcs/SSLIOP.mpc:
        * orbsvcs/orbsvcs/Security.mpc:
        * orbsvcs/orbsvcs/Svc_Utils.mpc:

          Changed to prepend "orbsvcs/" to export include path.

        * orbsvcs/Concurrency_Service/Makefile.am:
        * orbsvcs/CosEvent_Service/Makefile.am:
        * orbsvcs/Dump_Schedule/Makefile.am:
        * orbsvcs/Event_Service/Makefile.am:
        * orbsvcs/FTRT_Event_Service/Event_Service/Makefile.am:
        * orbsvcs/FTRT_Event_Service/Factory_Service/Makefile.am:
        * orbsvcs/FTRT_Event_Service/Gateway_Service/Makefile.am:
        * orbsvcs/FT_ReplicationManager/Makefile.am:
        * orbsvcs/Fault_Detector/Makefile.am:
        * orbsvcs/Fault_Notifier/Makefile.am:
        * orbsvcs/IFR_Service/Makefile.am:
        * orbsvcs/LifeCycle_Service/Makefile.am:
        * orbsvcs/LoadBalancer/Makefile.am:
        * orbsvcs/Logging_Service/Basic_Logging_Service/Makefile.am:
        * orbsvcs/Logging_Service/Event_Logging_Service/Makefile.am:
        * orbsvcs/Logging_Service/Notify_Logging_Service/Makefile.am:
        * orbsvcs/Logging_Service/RTEvent_Logging_Service/Makefile.am:
        * orbsvcs/Naming_Service/Makefile.am:
        * orbsvcs/Notify_Service/Makefile.am:
        * orbsvcs/Scheduling_Service/Makefile.am:
        * orbsvcs/Time_Service/Makefile.am:
        * orbsvcs/Trading_Service/Makefile.am:
        * orbsvcs/orbsvcs/Makefile.am:
        * orbsvcs/performance-tests/LoadBalancing/LBPerf/RPS/Makefile.am:
        * orbsvcs/performance-tests/RTEvent/Colocated_Roundtrip/Makefile.am:
        * orbsvcs/performance-tests/RTEvent/Federated_Roundtrip/Makefile.am:
        * orbsvcs/performance-tests/RTEvent/Roundtrip/Makefile.am:
        * orbsvcs/performance-tests/RTEvent/lib/Makefile.am:
        * orbsvcs/tests/AVStreams/Asynch_Three_Stage/Makefile.am:
        * orbsvcs/tests/AVStreams/Bidirectional_Flows/Makefile.am:
        * orbsvcs/tests/AVStreams/Component_Switching/Makefile.am:
        * orbsvcs/tests/AVStreams/Full_Profile/Makefile.am:
        * orbsvcs/tests/AVStreams/Latency/Makefile.am:
        * orbsvcs/tests/AVStreams/Modify_QoS/Makefile.am:
        * orbsvcs/tests/AVStreams/Multicast/Makefile.am:
        * orbsvcs/tests/AVStreams/Multicast_Full_Profile/Makefile.am:
        * orbsvcs/tests/AVStreams/Multiple_Flows/Makefile.am:
        * orbsvcs/tests/AVStreams/Pluggable/Makefile.am:
        * orbsvcs/tests/AVStreams/Pluggable_Flow_Protocol/Makefile.am:
        * orbsvcs/tests/AVStreams/Simple_Three_Stage/Makefile.am:
        * orbsvcs/tests/AVStreams/Simple_Two_Stage/Makefile.am:
        * orbsvcs/tests/AVStreams/Simple_Two_Stage_With_QoS/Makefile.am:
        * orbsvcs/tests/Bug_1334_Regression/Makefile.am:
        * orbsvcs/tests/Concurrency/Makefile.am:
        * orbsvcs/tests/CosEvent/Basic/Makefile.am:
        * orbsvcs/tests/CosEvent/lib/Makefile.am:
        * orbsvcs/tests/EC_Custom_Marshal/Makefile.am:
        * orbsvcs/tests/EC_MT_Mcast/Makefile.am:
        * orbsvcs/tests/EC_Mcast/Makefile.am:
        * orbsvcs/tests/EC_Multiple/Makefile.am:
        * orbsvcs/tests/EC_Throughput/Makefile.am:
        * orbsvcs/tests/Event/Basic/Makefile.am:
        * orbsvcs/tests/Event/Mcast/Common/Makefile.am:
        * orbsvcs/tests/Event/Mcast/Complex/Makefile.am:
        * orbsvcs/tests/Event/Mcast/Simple/Makefile.am:
        * orbsvcs/tests/Event/Mcast/Two_Way/Makefile.am:
        * orbsvcs/tests/Event/Performance/Makefile.am:
        * orbsvcs/tests/Event/lib/Makefile.am:

          Updated to access orbsvcs headers with -I$(TAO_ROOT)/orbsvcs.:

Mon Aug 16 16:45:06 2004  J.T. Conklin  <jtc@acorntoolworks.com>

        * examples/Kokyu_dsrt_schedulers/muf_example/muf_example.mpc:

          Changed muf_client project to inherit from svc_utils.

        * {docs,examples,orbsvcs,performance-tests,utils}/.../*.{cpp,h,idl}:

          Changed #include "orbsvcs/orbsvcs/..." to #include "orbsvcs/...".

Mon Aug 16 18:14:53 2004  Jeff Parsons <j.parsons@vanderbilt.edu>

        * TAO_IDL/be/be_interface.cpp (gen_stub_ctor):

          Fixed logic in generation of constructor taking stub and
          servant, for abstract interfaces that inherit from other
          abstract interfaces.

Mon Aug 16 16:31:19 2004  Balachandran Natarajan  <bala@dre.vanderbilt.edu>

        * TAO-INSTALL.html (href):

          Addressed an additional concern from Dr. Schmidt regarding
          broken documentation.

Mon Aug 16 12:13:30 2004  Balachandran Natarajan  <bala@dre.vanderbilt.edu>

        * TAO-INSTALL.html (href):

          Fixed some notes on .sln files generated for VC71.

Sun Aug 15 18:16:00 2004  Jeff Parsons <j.parsons@vanderbilt.edu>

        * TAO_IDL/ast/ast_decl.cpp:

          Fixed minor bug in setting the default version to 1.0.

        * TAO_IDL/be/be_global.cpp:
        * TAO_IDL/be/be_produce.cpp:
        * TAO_IDL/be/be_visitor_ccm_pre_proc.cpp:
        * TAO_IDL/be_include/be_global.h:
        * TAO_IDL/be_include/be_visitor_ccm_pre_proc.h:
        * TAO_IDL/driver/drv_preproc.cpp:
        * TAO_IDL/fe/idl.yy:
        * TAO_IDL/fe/y.tab.cpp:
        * TAO_IDL/include/idl_global.h:
        * TAO_IDL/util/utl_global.cpp:

          - Moved code to create AST nodes for a struct and sequence
            implied IDL for 'uses multiple' declarations from the
            parser back to its original location in the CCM preprocessing
            visitor.

          - Added a command line option (-Sm) to suppress the CCM
            preprocessing visitor, for use on IDL files that have
            already had their CCM-related implied IDL converted explicitly.

          - Added a flag to change the way the includes orb.idl,
            Components.idl and *.pidl are handled. This flag can be set
            to modify the default behavior by a plugin back end.

Sun Aug 15 18:07:04 2004  Jeff Parsons <j.parsons@vanderbilt.edu>

        * docs/compiler.html:
        * docs/releasenotes/index.html:

          Added items for a new IDL compiler command line option -Sm, that
          disables the visitor that converts IDL3 constructs to the
          equivalent IDL2. This option is for use in IDL files where such
          conversions are already present explicitly, for example if the
          IDL file is the product of a converstion tool.

Sat Aug 14 20:21:34 2004  Ossama Othman  <ossama@dre.vanderbilt.edu>

        * orbsvcs/orbsvcs/SSLIOP/SSLIOP_OpenSSL_st_T.h (OpenSSL_traits):

          Replaced primary template definition with a forward declaration.
          OpenSSL data structure-specific traits should always
          define/specialize their own traits template.

        * orbsvcs/orbsvcs/SSLIOP/SSLIOP_EVP_PKEY.h (OpenSSL_traits):
        * orbsvcs/orbsvcs/SSLIOP/SSLIOP_SSL.h (OpenSSL_traits):
        * orbsvcs/orbsvcs/SSLIOP/SSLIOP_X509.h (OpenSSL_traits):

          More MSVC++ 6 brain damage.  MSVC++ 6 cannot handle
          initialization of a static constant variable in the structure
          declaration.  It considers non-zero initialization to be an
          improper pure function specifier despite the fact no function is
          declared in this case.  Define the constant inside an
          enumeration instead to work around the problem.

Sat Aug 14 18:17:59 2004  Jeff Parsons <j.parsons@vanderbilt.edu>

        * TAO_IDL/be/be_interface.cpp:

          In the traversal of the inheritance graph for components, changed
          the algorithm so that CCMObject is processed before the base
          component, if any. This move ensures that, in the generated
          copy constructor in the skeleton class of the equivalent interface,
          the calls to base class copy constructors will be generated in
          the correct order. For compilers that are strict about this,
          the correct order is depth-first pre-order on the inheritance
          tree.

Sat Aug 14 12:11:06 2004  Ossama Othman  <ossama@dre.vanderbilt.edu>

        * orbsvcs/orbsvcs/Event/ECG_UDP_Out_Endpoint.cpp (is_loopback):

          The "ACE_Sock_Connect" interim pseudo namespace no longer
          exists.  Use the true "ACE" C++ namespace instead.  Fixes a
          compile-time error.

Fri Aug 13 23:58:50 2004  Ossama Othman  <ossama@dre.vanderbilt.edu>

        * tao/Thread_Per_Connection_Handler.cpp (svc):

          The "ACE_Flag_Manip" pseudo namespace no longer exists, and was
          not meant to be used in the long run in this code.  Use the true
          "ACE" C++ namespace instead.

Sat Aug 14 03:32:38 2004  Balachandran Natarajan  <bala@dre.vanderbilt.edu>

        * tests/Bug_1904_Regression/test.cpp:

          Fixed warnings in the daily builds.

Fri Aug 13 11:06:43 2004  Ossama Othman  <ossama@dre.vanderbilt.edu>

        * orbsvcs/orbsvcs/SSLIOP/SSLIOP_OpenSSL_st_T.h (OpenSSL_st_var):

          The types used as template parameters for this class template do
          not inherit from a common base class so there is no need to
          inherit from TAO_Base_var and declare undefined a TAO_Base_var
          copy constructor and assignment operator to prevent widening
          assignments.

        * orbsvcs/orbsvcs/SSLIOP/SSLIOP_OpenSSL_st_T.inl (OpenSSL_st_var):

          Removed TAO_Base_var constructor call from the base member
          initializer list.  This class no longer inherits from
          TAO_Base_var.

        * orbsvcs/orbsvcs/SSLIOP/SSLIOP_Current.h (Current_var):

          Define this class in terms of the TAO::Pseudo_Var_T class
          template instead of customized class.

        * orbsvcs/orbsvcs/SSLIOP/SSLIOP_Current.cpp:

          Removed the custom TAO::SSLIOP::Current_var class definition.
          It is no longer needed.

        * orbsvsc/orbsvcs/SSLIOP/SSLIOP_Credentials.cpp:
        * orbsvsc/orbsvcs/SSLIOP/SSLIOP_OwnCredentials.cpp:
        * orbsvcs/orbsvcs/Security/SL3_CredentialsCurator.cpp:

          Added missing explicit template instantiations for
          TAO_Pseudo_Var_T template instances defined in the corresponding
          headers of these files.  Fixes link-time errors in explicit
          template instantiation builds.

Fri Aug 13 17:46:12 UTC 2004  Johnny Willemsen  <jwillemsen@remedy.nl>

        * tao/IOR_Parser.h:
          Small doxygen tag improvements

Fri Aug 13 10:25:25 2004  Ossama Othman  <ossama@dre.vanderbilt.edu>

        * orbsvcs/orbsvcs/SSLIOP/SSLIOP_OpenSSL_st_T.h (OpenSSL_traits):

          Corrected doxygen documentation for this traits structure.
          "@struct", not "@class".

Fri Aug 13 10:17:46 2004  J.T. Conklin  <jtc@acorntoolworks.com>

        * orbsvcs/orbsvcs/Makefile.am:
        * orbsvcs/orbsvcs/SSLIOP.mpc:
          Remove PIDL_Files.  Thanks to Ossama Othman who let me know that
          ssl_endpoint.pidl needn't be installed.

Fri Aug 13 09:38:24 2004  Ossama Othman  <ossama@dre.vanderbilt.edu>

        * orbsvcs/orbsvcs/SSLIOP/SSLIOP_OpenSSL_st_T.h (copy):

          Corrected function parameter.  It should have been "T const &",
          not "T *".  This should fix a Borland C++ Builder X compile-time
          problem.  Interestingly, g++ 3.4.1 did not complain about this
          problem.

Fri Aug 13 11:10:00 2004  Liang-Jui Shen <ls1@cec.wustl.edu>

        * orbsvcs/orbsvcs/Event/EC_Basic_Factory.cpp:
        * orbsvcs/orbsvcs/Event/EC_Default_Factory.cpp:
        * orbsvcs/orbsvcs/Event/EC_Null_Factory.cpp:
        * orbsvcs/orbsvcs/Event/EC_Reactive_Timeout_Generator.cpp:
        * orbsvcs/orbsvcs/Event/EC_Reactive_Timeout_Generator.h:

        My previous check-ins failed the tests. Therefore, I reverted to
        the original version.

Fri Aug 13 09:01:00 2004  J.T. Conklin  <jtc@acorntoolworks.com>

        * configure.ac:
          Update to configure orbsvcs/tests/[A-E]*.

        * orbsvcs/Makefile.am:
          Update to build tests.

        * orbsvcs/tests/Makefile.am
        * orbsvcs/tests/AVStreams/Makefile.am:
          Updated.

        * orbsvcs/tests/AVStreams/Asynch_Three_Stage/Makefile.am:
        * orbsvcs/tests/AVStreams/Bidirectional_Flows/Makefile.am:
        * orbsvcs/tests/AVStreams/Component_Switching/Makefile.am:
        * orbsvcs/tests/AVStreams/Full_Profile/Makefile.am:
        * orbsvcs/tests/AVStreams/Latency/Makefile.am:
        * orbsvcs/tests/AVStreams/Modify_QoS/Makefile.am:
        * orbsvcs/tests/AVStreams/Multicast/Makefile.am:
        * orbsvcs/tests/AVStreams/Multicast_Full_Profile/Makefile.am:
        * orbsvcs/tests/AVStreams/Multiple_Flows/Makefile.am:
        * orbsvcs/tests/AVStreams/Pluggable/Makefile.am:
        * orbsvcs/tests/AVStreams/Pluggable_Flow_Protocol/Makefile.am:
        * orbsvcs/tests/AVStreams/Simple_Three_Stage/Makefile.am:
        * orbsvcs/tests/AVStreams/Simple_Two_Stage/Makefile.am:
        * orbsvcs/tests/AVStreams/Simple_Two_Stage_With_QoS/Makefile.am:
        * orbsvcs/tests/Bug_1334_Regression/Makefile.am:
        * orbsvcs/tests/Bug_1393_Regression/Makefile.am:
        * orbsvcs/tests/Bug_1395_Regression/Makefile.am:
        * orbsvcs/tests/Bug_1630_Regression/Makefile.am:
        * orbsvcs/tests/Concurrency/Makefile.am:
        * orbsvcs/tests/CosEvent/Makefile.am:
        * orbsvcs/tests/CosEvent/Basic/Makefile.am:
        * orbsvcs/tests/CosEvent/lib/Makefile.am:
        * orbsvcs/tests/EC_Custom_Marshal/Makefile.am:
        * orbsvcs/tests/EC_MT_Mcast/Makefile.am:
        * orbsvcs/tests/EC_Mcast/Makefile.am:
        * orbsvcs/tests/EC_Multiple/Makefile.am:
        * orbsvcs/tests/EC_Throughput/Makefile.am:
        * orbsvcs/tests/Event/Makefile.am:
        * orbsvcs/tests/Event/Basic/Makefile.am:
        * orbsvcs/tests/Event/Mcast/Makefile.am:
        * orbsvcs/tests/Event/Mcast/Common/Makefile.am:
        * orbsvcs/tests/Event/Mcast/Complex/Makefile.am:
        * orbsvcs/tests/Event/Mcast/Simple/Makefile.am:
        * orbsvcs/tests/Event/Mcast/Two_Way/Makefile.am:
        * orbsvcs/tests/Event/Performance/Makefile.am:
        * orbsvcs/tests/Event/lib/Makefile.am:
          New files, built with a little help from MPC.

Fri Aug 13 09:30:54 2004  Balachandran Natarajan  <bala@dre.vanderbilt.edu>

        * orbsvcs/tests/ior_corbaname/README:

          Fixed a typo in the instructions. Thanks to TG <groth dot th at
          nord-com dot net>.

Fri Aug 13 12:48:48 2004  Simon McQueen  <sm@prismtechnologies.com>

        * TAO_IDL/fe/fe_lookup.cpp (lookup):
          Fixed warning in Linux builds.

        * tests/Bug_1904_Regression/test.mpc:
          Added missing $Id tag.

Fri Aug 13 00:46:24 2004  J.T. Conklin  <jtc@acorntoolworks.com>

        * orbsvcs/orbsvcs/Makefile.am:
          Update to account for Ossama's SSLIOP changes.

        * configure.ac:
          Update to configure orbsvcs/performance-tests/*.

        * orbsvcs/Makefile.am:
          Update to build performance-tests.

        * orbsvcs/performance-tests/Makefile.am:
        * orbsvcs/performance-tests/LoadBalancing/Makefile.am:
        * orbsvcs/performance-tests/LoadBalancing/LBPerf/Makefile.am:
        * orbsvcs/performance-tests/LoadBalancing/LBPerf/RPS/Makefile.am:
        * orbsvcs/performance-tests/RTEvent/Makefile.am:
        * orbsvcs/performance-tests/RTEvent/Colocated_Roundtrip/Makefile.am:
        * orbsvcs/performance-tests/RTEvent/Federated_Roundtrip/Makefile.am:
        * orbsvcs/performance-tests/RTEvent/RTCORBA_Baseline/Makefile.am:
        * orbsvcs/performance-tests/RTEvent/RTCORBA_Callback/Makefile.am:
        * orbsvcs/performance-tests/RTEvent/Roundtrip/Makefile.am:
        * orbsvcs/performance-tests/RTEvent/TCP_Baseline/Makefile.am:
        * orbsvcs/performance-tests/RTEvent/lib/Makefile.am:
          New files, built with a little help from MPC.

Thu Aug 12 21:00:22 2004  J.T. Conklin  <jtc@acorntoolworks.com>

        * orbsvcs/orbsvcs/Makefile.am:
        * tao/Makefile.am:
          Update, with a little help from MPC.

        * orbsvcs/orbsvcs/SSLIOP.mpc:
        * tao/BiDir_GIOP.mpc:
        * tao/Domain.mpc:
        * tao/DynamicAny.mpc:
        * tao/DynamicInterface.mpc:
        * tao/IFR_Client.mpc:
        * tao/IORInterceptor.mpc:
        * tao/IORManipulation.mpc:
        * tao/IORTable.mpc:
        * tao/Messaging.mpc:
        * tao/ObjRefTemplate.mpc:
        * tao/PortableServer.mpc:
        * tao/RTCORBA.mpc:
        * tao/RTPortableServer.mpc:
        * tao/RTScheduler.mpc:
        * tao/SmartProxies.mpc:
        * tao/Strategies.mpc:
        * tao/TypeCodeFactory.mpc:
        * tao/Utils.mpc:
        * tao/Valuetype.mpc:
        * tao/tao.mpc:
          Use new PIDL_Files custom file type so that *.pidl files are
          known to MPC.  This will be used by the automake template so
          *.pidl files are installed.

Thu Aug 12 19:21:25 2004  Ossama Othman  <ossama@dre.vanderbilt.edu>

        * orbsvcs/orbsvcs/SSLIOP.mpc:

          Removed SSLIOPS.cpp from the source file list.  No unconstrained
          interfaces are defined in the SSLIOP.idl IDL file, meaning that
          there is no need to compile and link the corresponding
          skeleton file.

Thu Aug 12 18:45:20 2004  Ossama Othman  <ossama@dre.vanderbilt.edu>

        * orbsvcs/orbsvcs/SSLIOP/SSLIOP_ClientCredentials.h

          Added new OpenSSL "SSL" data structure constructor parameter,
          and accompanying cached member.

        * orbsvcs/orbsvcs/SSLIOP/SSLIOP_ClientCredentials.cpp
          (ClientCredentials):

          Initialize new SSL data structure member with given SSL
          argument.

          (parent_credentials, client_authentication, integrity):

          Implemented these methods.

        * orbsvcs/orbsvcs/SSLIOP/SSLIOP_Connector.cpp (ssliop_connect):

          Do not widen the retrieved OwnCredentials pointer to a
          Credentials pointer.  We really want to retain the narrower
          interface for later use.  Furthermore, it is more correct to
          store an OwnCredentials reference in an endpoint rather than one
          that has been widened to a Credentials reference.

        * orbsvcs/orbsvcs/SSLIOP/SSLIOP_Current.cpp:
        * orbsvcs/orbsvcs/SSLIOP/SSLIOP_Factory.cpp:

          Cosmetic updates.

        * orbsvcs/orbsvcs/SSLIOP/SSLIOP_Current_Impl.cpp
          (client_credentials):

          Pass the underlying SSL data structur to the ClientCredentials
          constructor.

        * orbsvcs/orbsvcs/SSLIOP/SSLIOP_EVP_PKEY.cpp:
        * orbsvcs/orbsvcs/SSLIOP/SSLIOP_EVP_PKEY.h:
        * orbsvcs/orbsvcs/SSLIOP/SSLIOP_X509.cpp:
        * orbsvcs/orbsvcs/SSLIOP/SSLIOP_X509.h:

          The types that were defined in these files are now implemented
          in terms of the new TAO::SSLIOP::OpenSSL_st_T<> template.
          Reduces code duplication and maintenance burden.

        * orbsvcs/orbsvcs/SSLIOP/SSLIOP_Endpoint.h:
        * orbsvcs/orbsvcs/SSLIOP/SSLIOP_Endpoint.i:

          Cache and return an OwnCredentials reference, not a wider
          Credentials reference.  It is more correct to use the former.

        * orbsvcs/orbsvcs/SSLIOP/SSLIOP_OpenSSL_st_T.cpp:
        * orbsvcs/orbsvcs/SSLIOP/SSLIOP_OpenSSL_st_T.h:
        * orbsvcs/orbsvcs/SSLIOP/SSLIOP_OpenSSL_st_T.inl:

          New template used to implement a "_var" class for OpenSSL data
          structures such as "X509, EVP_PKEY" and "SSL".

        * orbsvcs/orbsvcs/SSLIOP/SSLIOP_OwnCredentials.h:

          Corrected typo in documentation.

        * orbsvcs/orbsvcs/SSLIOP/SSLIOP_SSL.cpp:
        * orbsvcs/orbsvcs/SSLIOP/SSLIOP_SSL.h:

          New files containing TAO::SSLIOP::SSL_var typdef and
          accompanying explicit template instantiations.

        * orbsvcs/orbsvcs/SSLIOP/SSLIOP_X509.inl:
        * orbsvcs/orbsvcs/SSLIOP/SSLIOP_EVP_PKEY.inl:

          Removed these files.  They are no longer used.

Thu Aug 12 17:52:36 2004  Ossama Othman  <ossama@dre.vanderbilt.edu>

        * orbsvcs/orbsvcs/SSLIOP/SSLIOP_Credentials.cpp (operator==):

          Cast away the const-ness of the right hand side argument before
          invoking its non-const cred_type() method.  The method in
          question doesn't modify the object so doing so is not violating
          any "immutability contract".  Fixes a compile-time error.

Thu Aug 12 17:51:52 2004  Simon McQueen  <sm@prismtechnologies.com>

        * TAO_IDL/fe/fe_lookup.cpp (lookup):
          Added test for matching string lengths to prevent incorrect
          identification of non-keyword strings as c++ keywords.

          This fixes bugzilla #1904.

        * tests/Bug_1904_Regression/test.cpp:
        * tests/Bug_1904_Regression/test.idl:
        * tests/Bug_1904_Regression/test.mpc:

          Regression test for the above.

Thu Aug 12 11:56:12 UTC 2004  Johnny Willemsen  <jwillemsen@remedy.nl>

        * tao/IIOP_Transport.cpp:
        * tao/Codeset_Manager.cpp:
          Smaller debug message formatting so that things look the same and
          that it is directly clear where the message is coming from when
          reading a log.

        * tao/IIOP_Transport.cpp (set_bidir_context_info):
          After we retrieved all listen_points check that the list is
          empty, if it is, we really have a problem and we report it.

        * tao/IIOP_Connection_Handler.cpp (process_listen_point_list):
          This method processes the listen_point_list, when we are here we
          should have a list with something in it, when the client has a
          misconfigured DNS, it can be that an empty list is send by the
          client because in TAO_IIOP_Transport::get_listen_point we only
          add endpoints there that match the local address and when we have
          misconfigured this, this check could fail and we could send an
          empty list.

Thu Aug 12 10:09:12 UTC 2004  Johnny Willemsen  <jwillemsen@remedy.nl>

        * tests/Big_Oneways/server.cpp:
        * tests/Big_Oneways/Session_Control.cpp:
          Added a few more debug lines to the shutdown process, so that we
          can see how far we get when this test fails.

Thu Aug 12 09:36:12 UTC 2004  Johnny Willemsen  <jwillemsen@remedy.nl>

        * tests/Portable_Interceptors/Collocated/Service_Context_Manipulation/Client_Task.cpp:
        * tests/Portable_Interceptors/Collocated/Service_Context_Manipulation/Server_Task.cpp:
          When catching an exception, tell whether it is in the client or
          server task. When an event loop ends, also tell which loop it is.

Thu Aug 12 09:22:12 UTC 2004  Johnny Willemsen  <jwillemsen@remedy.nl>

        * tests/AMI_Buffering/admin.cpp:
        * tests/AMI_Buffering/client.cpp:
        * tests/AMI_Buffering/server.cpp:
          When catching an exception, tell whether it is in the client,
          admin or server.

        * tests/Faults/client.cpp:
        * tests/Faults/middle.cpp:
        * tests/Faults/ping.cpp:
        * tests/Faults/server.cpp:
          When catching an exception, tell whether it is in the client,
          ping, admin or server. When an event loop ends, also tell which
          loop it is.

Wed Aug 11 22:28:47 2004  Balachandran Natarajan  <bala@dre.vanderbilt.edu>

        * orbsvcs/orbsvcs/CSI.idl:
        * orbsvcs/orbsvcs/CSIIOP.idl:
        * orbsvcs/orbsvcs/SecurityLevel3.idl:

          Fixed fuzz errors.

Wed Aug 11 18:54:35 2004  J.T. Conklin  <jtc@acorntoolworks.com>

        * orbsvcs/orbsvcs/Makefile.am:
        * tao/Makefile.am:
          Update, with help from the latest version of automake.mpd.
          Adds resource files to EXTRA_DIST, and installs *.idl files.

Wed Aug 11 15:34:59 2004  Ossama Othman  <ossama@dre.vanderbilt.edu>

        * orbsvcs/orbsvcs/SSLIOP/SSLIOP_ClientCredentials.cpp:
        * orbsvcs/orbsvcs/SSLIOP/SSLIOP_OwnCredentials.cpp:
        * orbsvcs/orbsvcs/SSLIOP/SSLIOP_TargetCredentials.cpp:

          Remove explicit namespace qualifier from base class constructor
          call in the base member initializer list due to MSVC++ 6 brain
          damage.

        * orbsvcs/orbsvcs/SSLIOP/SSLIOP_Credentials.cpp (operator==):

          Added missing SSLIOP Credentials attribute checks.

        * orbsvcs/orbsvcs/SSLIOP/SSLIOP_CredentialsAcquirer.cpp:
        * orbsvcs/orbsvcs/SSLIOP/SSLIOP_Endpoint.cpp:

          Coding style updates.

Wed Aug 11 14:54:31 2004  Balachandran Natarajan  <bala@dre.vanderbilt.edu>

        * docs/ORBEndpoint.html:

          Improved documentation with additional examples and fixed a few
          typos. Thanks to Jules Colding <jules at tdcadsl dot dk> for
          motivating this.

Wed Aug 11 09:36:16 2004  J.T. Conklin  <jtc@acorntoolworks.com>

         * docs/tutorials/Quoter/Event_Service/Quoter_Event_Service.mpc:
         * docs/tutorials/Quoter/On_Demand_Activation/Quoter_On_Demand_Activation.mpc:
         * docs/tutorials/Quoter/RT_Event_Service/Quoter_RT_Event_Service.mpc:
         * docs/tutorials/Quoter/Simple/ImprovedServer/Quoter_Simple_ImprovedServer.mpc:
         * examples/Load_Balancing_persistent/Load_Balancing_persistent.mpc:
         * examples/OBV/Typed_Events/Typed_Events.mpc:
         * examples/POA/Adapter_Activator/POA_Adapter_Activator.mpc:
         * examples/POA/DSI/POA_DSI.mpc:
         * examples/POA/Default_Servant/POA_Default_Servant.mpc:
         * examples/POA/Explicit_Activation/POA_Explicit_Activation.mpc:
         * examples/POA/FindPOA/POA_FindPOA.mpc:
         * examples/POA/Forwarding/POA_Forwarding.mpc:
         * examples/POA/Generic_Servant/POA_Generic_Servant.mpc:
         * examples/POA/Loader/POA_Loader.mpc:
         * examples/POA/NewPOA/POA_NewPOA.mpc:
         * examples/POA/On_Demand_Activation/POA_On_Demand_Activation.mpc:
         * examples/POA/On_Demand_Loading/POA_On_Demand_Loading.mpc:
         * examples/POA/POA_BiDir/POA_BiDir.mpc:
         * examples/POA/Reference_Counted_Servant/Reference_Counted_Servant.mpc:
         * examples/POA/TIE/POA_TIE.mpc:
         * examples/Quoter/Quoter.mpc:
         * examples/TypeCode_Creation/TypeCode_Creation.mpc:
         * orbsvcs/FT_ReplicationManager/FT_ReplicationManager.mpc:
         * orbsvcs/LifeCycle_Service/LifeCycle_Service.mpc:
         * orbsvcs/examples/Notify/Subscribe/Notify_Subscribe.mpc:
         * orbsvcs/examples/Notify/ThreadPool/Notify_ThreadPool.mpc:
         * orbsvcs/examples/ORT/ORT.mpc:
         * orbsvcs/orbsvcs/CosEvent.mpc:
         * orbsvcs/orbsvcs/CosLoadBalancing.mpc:
         * orbsvcs/orbsvcs/FaultTolerance.mpc:
         * orbsvcs/orbsvcs/FtRtEvent.mpc:
         * orbsvcs/performance-tests/RTEvent/Colocated_Roundtrip/Colocated_Roundtrip.mpc:
         * orbsvcs/performance-tests/RTEvent/Federated_Roundtrip/Federated_Roundtrip.mpc:
         * orbsvcs/performance-tests/RTEvent/RTCORBA_Baseline/RTCORBA_Baseline.mpc:
         * orbsvcs/performance-tests/RTEvent/RTCORBA_Callback/RTCORBA_Callback.mpc:
         * orbsvcs/performance-tests/RTEvent/Roundtrip/Roundtrip.mpc:
         * orbsvcs/performance-tests/RTEvent/TCP_Baseline/TCP_Baseline.mpc:
         * orbsvcs/performance-tests/RTEvent/lib/RTEC_Perf.mpc:
         * orbsvcs/tests/Bug_1630_Regression/test.mpc:
         * orbsvcs/tests/FT_App/FT_App.mpc:
         * orbsvcs/tests/InterfaceRepo/Application_Test/IFR_Application_Test.mpc:
         * orbsvcs/tests/InterfaceRepo/IDL3_Test/IFR_IDL3_Test.mpc:
         * orbsvcs/tests/InterfaceRepo/IFR_Test/IFR_IFR_Test.mpc:
         * orbsvcs/tests/InterfaceRepo/Persistence_Test/IFR_Persistence_Test.mpc:
         * orbsvcs/tests/Notify/performance-tests/Filter/Filter.mpc:
         * orbsvcs/tests/Notify/performance-tests/Throughput/Throughput.mpc:
         * performance-tests/Cubit/TAO/DII_Cubit/DII_Cubit.mpc:
         * performance-tests/Latency/DII/DII.mpc:
         * performance-tests/Latency/DSI/DSI.mpc:
         * performance-tests/Latency/Deferred/Deferred.mpc:
         * performance-tests/RTCorba/Multiple_Endpoints/Common/Common.mpc:
         * performance-tests/RTCorba/Multiple_Endpoints/Orb_Per_Priority/ORB_Per_Priority.mpc:
         * performance-tests/RTCorba/Oneways/Reliable/Reliable.mpc:
         * performance-tests/RTCorba/Thread_Pool/Thread_Pool.mpc:
         * performance-tests/Sequence_Latency/DII/DII.mpc:
         * performance-tests/Sequence_Latency/DSI/DSI.mpc:
         * performance-tests/Sequence_Latency/Deferred/Deferred.mpc:
         * tao/DynamicInterface.mpc:
         * tests/Bug_1636_Regression/test.mpc:
         * tests/POA/Default_Servant/Default_Servant.mpc:
         * tests/POA/MT_Servant_Locator/MT_Servant_Locator.mpc:
         * tests/RTCORBA/Diffserv/RTCORBA_Diffserv.mpc:
         * tests/RTCORBA/Explicit_Binding/RTCORBA_Explicit_Binding.mpc:
         * tests/RTCORBA/Linear_Priority/RTCORBA_Linear_Priority.mpc:
         * tests/RTCORBA/MT_Client_Protocol_Priority/RTCORBA_MT_Client_Proto_Prio.mpc:
         * tests/RTCORBA/Persistent_IOR/RTCORBA_Persistent_IOR.mpc:
         * tests/RTCORBA/Policies/Policies.mpc:
         * tests/RTCORBA/Policy_Combinations/RTCORBA_Policy_Combinations.mpc:
         * tests/RTCORBA/Priority_Inversion_With_Bands/Priority_Inversion_With_Bands.mpc:
         * tests/RTCORBA/Private_Connection/RTCORBA_Private_Connection.mpc:
         * tests/RTCORBA/Profile_And_Endpoint_Selection/PaE_Selection.mpc:
         * tests/RTCORBA/Server_Protocol/RTCORBA_Server_Protocol.mpc:
         * tests/RTCORBA/Thread_Pool/RTCORBA_Thread_Pool.mpc:

           Changed to inherit from minimum_corba instead of providing
           avoids statements to eliminate duplicate entries in list.

Wed Aug 11 13:20:12 UTC 2004  Johnny Willemsen  <jwillemsen@remedy.nl>

        * tests/Oneway_Buffering/admin.cpp:
        * tests/Oneway_Buffering/client.cpp:
        * tests/Oneway_Buffering/server.cpp:
          When catching an exception, tell whether it is in the client,
          admin or server.

Wed Aug 11 09:50:12 UTC 2004  Johnny Willemsen  <jwillemsen@remedy.nl>

        * tao/PortableServer/POA.h:
          Updated documentation to doxygen style

Wed Aug 11 09:28:12 UTC 2004  Johnny Willemsen  <jwillemsen@remedy.nl>

        * tao/PortableServer/ImplRepo.pidl:
          Updated documentation to doxygen style

Wed Aug 11 07:57:12 UTC 2004  Johnny Willemsen  <jwillemsen@remedy.nl>

        * orbsvcs/tests/Notify/Basic/Basic.mpc:
        * orbsvcs/tests/Notify/Structured_Filter/Struct_Filter.mpc:
        * orbsvcs/tests/Notify/Structured_Multi_Filter/Struct_Multi_Filter.mpc:
        * orbsvcs/tests/Notify/performance-tests/RedGreen/RedGreen.mpc:
        * orbsvcs/tests/Notify/performance-tests/Throughput/Throughput.mpc:
          Removed naming as base project, the notifytests base used is also
          based on naming

Tue Aug 10 18:33:30 2004  J.T. Conklin  <jtc@acorntoolworks.com>

        * configure.ac:
        * orbsvcs/CosEvent_Service/Makefile.am:
        * orbsvcs/Event_Service/Makefile.am:
        * orbsvcs/FTRT_Event_Service/Event_Service/Makefile.am:
        * orbsvcs/FTRT_Event_Service/Factory_Service/Makefile.am:
        * orbsvcs/FTRT_Event_Service/Gateway_Service/Makefile.am:
        * orbsvcs/FT_ReplicationManager/Makefile.am:
        * orbsvcs/Fault_Detector/Makefile.am:
        * orbsvcs/Fault_Notifier/Makefile.am:
        * orbsvcs/IFR_Service/Makefile.am:
        * orbsvcs/LifeCycle_Service/Makefile.am:
        * orbsvcs/LoadBalancer/Makefile.am:
        * orbsvcs/Logging_Service/Event_Logging_Service/Makefile.am:
        * orbsvcs/Logging_Service/Notify_Logging_Service/Makefile.am:
        * orbsvcs/Trading_Service/Makefile.am:
        * orbsvcs/orbsvcs/Makefile.am:
        * tao/Makefile.am:
          Initial support for user-configurable features (ssl, rt_corba,
          minimum_corba, etc.) with automake conditionals.  Conditional
          values are currently hard-coded in configure.ac and will have
          to be replaced by --with-* and --enable-* options.

Tue Aug 10 17:56:00 2004  Jeff Parsons <j.parsons@vanderbilt.edu>

        * TAO_IDL/be/be_interface.cpp:

          Fixed bug in the inheritance graph traversal algorithm
          that was sometimes failing to enqueue CCMObject and therefore
          also its parents Navigation, Receptacles, and Events. Thanks
          to Matthew Gillen <mgillen@bbn.com> for pointing out
          resulting runtime error in the generated skeleton operation
          table.

        * TAO_IDL/be/be_visitor_arg_traits.cpp:

          Fixed bug where the stub export macro was getting generated
          on the skeleton side.

        * TAO_IDL/be/be_visitor_component/component_sh.cpp:

          Cosmetic changes to source code.

        * TAO_IDL/be/be_visitor_interface/interface_sh.cpp:

          Removed generation of collocation classes for abstract interfaces
          in the skeleton header file, since they are not generated in
          the skeleton source file, thus causing a link error. For
          abstract interfaces, all the code related to their operations
          is duplicated in code generation for concrete interfaces
          deriving from them, at least on the skeleton side, so no code
          generation is required on the skeleton side at all for
          abstract interfaces.

        * TAO_IDL/be/be_visitor_valuetype/valuetype_ss.cpp:

          Fixed a bug in code generation of the copy constructor for
          a valuetype that supports an abstract interface.

Tue Aug 10 13:24:12 UTC 2004  Johnny Willemsen  <jwillemsen@remedy.nl>

        * tao/BiDir_GIOP/BiDirPolicy_Validator.h:
          Use unique ifdef defines

Tue Aug 10 12:54:12 UTC 2004  Johnny Willemsen  <jwillemsen@remedy.nl>

        * tests/Bug_1476_Regression/Client_Task.cpp:
        * tests/Bug_1476_Regression/Sender_i.h:
          Fixed compile errors with emulated exceptions

Tue Aug 10 10:57:12 UTC 2004  Johnny Willemsen  <jwillemsen@remedy.nl>

        * NEWS:
          Updated that the fixes for bug 1476 aren't planned anymore but
          will be visible in the x.4.3 release

Tue Aug 10 08:13:12 UTC 2004  Johnny Willemsen  <jwillemsen@remedy.nl>

        * tests/Bug_1476_Regression/*:
          New regression test for bug 1476. This tests that when using
          oneways with sync_none policy applied the ORB doesn't block
          on connection establishment. To be able to run this test you
          must have a long connection establishment time, this isn't
          the case on localhost, so run client and server far far from
          away. Because of this, this test isn't able to run in our
          daily builds.

Tue Aug 10 00:41:10 2004  Ossama Othman  <ossama@dre.vanderbilt.edu>

        * utils/nslist/nslist.cpp (display_endpoint_info):

          Fixed compile-time error.  "CORBA::is_nil()", not
          "CORBA::Object::is_nil()".

Mon Aug  9 23:31:45 2004  J.T. Conklin  <jtc@acorntoolworks.com>

        * orbsvcs/PSS/PSDL_Scope.cpp:
          Change call to ACE_OS::to_lower() to ACE_OS::ace_tolower()
          to adapt to API change.

Mon Aug  9 17:43:33 2004  Ossama Othman  <ossama@dre.vanderbilt.edu>

        * tao/Utils/Servant_Var.inl:

          Include "tao/Exception.h" to pull CORBA::Exception declaration.
          Fixes a compile-time error regarding an incomplete
          CORBA::Exception type in a catch() statement.

        * orbsvcs/orbsvcs/SSLIOP/SSLIOP_Credentials.cpp:
        * orbsvcs/orbsvcs/SSLIOP/SSLIOP_Credentials.h:
        * orbsvcs/orbsvcs/SSLIOP/SSLIOP_Credentials.inl:

          Renamed TAO::SSLIOP::Credentials class to
          TAO::SSLIOP_Credentials, i.e. moved it one namespace level up.
          Brain damaged MSVC++ 6 cannot handle calling base class
          constructors of classes declared in a nested namespace inside a
          sub-class base member initializer.

        * orbsvcs/orbsvcs/SSLIOP/SSLIOP_ClientCredentials.cpp:
        * orbsvcs/orbsvcs/SSLIOP/SSLIOP_ClientCredentials.h:
        * orbsvcs/orbsvcs/SSLIOP/SSLIOP_Endpoint.h:
        * orbsvcs/orbsvcs/SSLIOP/SSLIOP_Endpoint.i:
        * orbsvcs/orbsvcs/SSLIOP/SSLIOP_OwnCredentials.cpp:
        * orbsvcs/orbsvcs/SSLIOP/SSLIOP_OwnCredentials.h:
        * orbsvcs/orbsvcs/SSLIOP/SSLIOP_TargetCredentials.cpp:
        * orbsvcs/orbsvcs/SSLIOP/SSLIOP_TargetCredentials.h:

          Updated these sources to refer to the renamed
          TAO::SSLIOP_Credentials class.

Mon Aug  9 12:16:50 2004  Jeff Parsons <j.parsons@vanderbilt.edu>

        * tao/BD_String_Argument_T.cpp:

          Fixed incorrect placement of #if TAO_HAS_INTERCEPTORS == 1
          guard.

Mon Aug  9 15:44:12 UTC 2004  Johnny Willemsen  <jwillemsen@remedy.nl>

        * orbsvcs/orbsvcs/PortableGroup/UIPMC_Connection_Handler.cpp:
        * orbsvcs/orbsvcs/PortableGroup/UIPMC_Connector.{h,cpp}:
          Updated these files because of the interface changes of the base class

Mon Aug  9 11:51:12 UTC 2004  Johnny Willemsen  <jwillemsen@remedy.nl>

        Integration of the fixes for bug 1476. In short, when making oneway
        calls with sync_none policy applied, the ORB shouldn't block, this was
        working for all calls, except for the first call, the connection
        establishment blocked and violated the meaning of sync_none. All changes
        below are there to also don't block on the first call, but just queue
        the messages until the transport is connection. Thanks to Bala for
        helping with this.

        Fri Aug  6 15:27:12 UTC 2004  Johnny Willemsen  <jwillemsen@remedy.nl>

                * tao/IIOP_Connector:
                * tao/SCIOP_Connection:
                * tao/UIOP_Connector:
                * orbsvcs/orbsvcs/SSLIOP/IIOP_SSL_Connector.cpp:
                * orbsvcs/orbsvcs/SSLIOP/SSLIOP_Connector.cpp:
                  As last step in the make_connection register the transport with the
                  reactor when the transport is connected. When it is not connected it
                  will or happen in the Transport_Connector when there the connection
                  is established or in the Transport::post_open when the transport is
                  connected and we have outgoing data.

        Fri Aug  6 15:11:12 UTC 2004  Johnny Willemsen  <jwillemsen@remedy.nl>

                * tao/IIOP_Connector.cpp (make_connection):
                * tao/Transport_Connector.cpp (connect):
                  Corrected method name in debug statement

        Fri Aug  6 14:58:18 2004  Balachandran Natarajan  <bala@dre.vanderbilt.edu>

                * tao/IIOP_Connector.cpp:
                * tao/Transport_Connector.cpp:

                  Test for is_connected () before registration.

        Fri Aug  6 14:11:10 2004  Balachandran Natarajan  <bala@dre.vanderbilt.edu>

                * tao/IIOP_Connection_Handler.cpp:

                  Cosmetic fix.

                * tao/IIOP_Connector.cpp:

                  Register handler after the caching the transport.

                * tao/Transport.cpp:

                  Register handler if there is a non-empty queue. then call
                  schedule_wakeup (). Added locks to prevents races.

                  Removed locks from format_queue_message (), since I think its
                  not necessary.

                * tao/Transport.inl:

                  Added a lock to is_connected (). This introduces a lock on the
                  critical path. We need to think about this later.

                * tao/Transport_Connector.cpp:

                  Added code to register the handler with the reactor.

        Fri Aug  6 13:52:12 UTC 2004  Johnny Willemsen  <jwillemsen@remedy.nl>

                * tao/IIOP_Connection_Handler.cpp:
                  Removed duplicate include

                * ace/Thread_Per_Connection_Handler.cpp:
                  Corrected classname in debug statement

        Thu Aug  5 08:09:12 UTC 2004  Johnny Willemsen  <jwillemsen@remedy.nl>

                * tao/Invocation_Adapter.{h,cpp}:
                  Renamed set_sync_policy to set_response_flags, we are setting
                  the response flags using sync_policy for oneways. Also, when
                  having a twoway set the correct response_flags, this was done
                  later in the twoday invocation, but the response_flags are
                  SYNC_NONE by default, resulting that all twoways used a non
                  blocking connect. By setting the response_flags earlier, the
                  blocked member of the profile transport resolver is set
                  to the correct value

                * orbsvcs/orbsvcs/SSLIOP/SSLIOP_Connector.cpp:
                  Corrected some errors

                * tao/Transport.cpp:
                  When we are not connected, also purge us from the connection
                  cache. When we are connected, the connection closure will do this
                  but not when we are not connected. Use in recache_transport() the
                  this->purge_entry() call to reduce code duplication

                * tao/IIOP_Connector:
                * tao/SCIOP_Connection:
                * tao/UIOP_Connector:
                * orbsvcs/orbsvcs/SSLIOP_Connector.cpp:
                * orbsvcs/orbsvcs/IIOP_SSL_Connector.cpp:
                  When the connect() calls return -1, only when errno == EWOULDBLOCK
                  we wait for completion, for other errno's we have to set
                  transport to zero, because the transport is not usable in that
                  case and we just don't have a connection then.

        Wed Aug  4 09:44:12 UTC 2004  Johnny Willemsen  <jwillemsen@remedy.nl>

                * orbsvs/orbsvcs/SSLIOP/IIOP_SSL_Connector.cpp:
                * orbsvs/orbsvcs/SSLIOP/SSLIOP_Connector.{h,cpp}:
                * orbsvs/orbsvcs/SSLIOP/SSLIOP_Connection_Handler.cpp:
                  Updated for changes. These files wheren't added to my original
                  branch and they where recently changed by Ossame, so make a new
                  branch bug1476 on the head, so that I can merge all changes in one
                  action to the main

        Wed Aug  4 09:31:12 UTC 2004  Johnny Willemsen  <jwillemsen@remedy.nl>

                * tao/IIOP_Connector.cpp:
                  Fixed typo in debug line

                * tao/IIOP_Connector.h:
                  Added virtual to cancel_svc_handler() to show that this is a virtual
                  method.

                * tao/Strategies/DIOP_Connection_Handler.cpp:
                * tao/Strategies/SCIOP_Connection_Handler.cpp:
                * tao/Strategies/SHMIOP_Connection_Handler.cpp:
                * tao/Strategies/UIOP_Connection_Handler.cpp:
                * tao/Strategies/DIOP_Connector.{h,cpp}:
                * tao/Strategies/SCIOP_Connector.{h,cpp}:
                * tao/Strategies/SHMIOP_Connector.{h,cpp}:
                * tao/Strategies/UIOP_Connector.{h,cpp}:
                  Updated these protocols with all changes we did in the base classes

        Tue Aug  3 11:56:12 UTC 2004  Johnny Willemsen  <jwillemsen@remedy.nl>

                  An overview of the changes in the pluggable transport interface
                  which has to be done in all pluggable transports:
                  * Connection_Handler::open(), instead of setting just the id of the
                    transport, call transport::post_open() with the id, this will set
                    the id, mark the transport as connected, register the transport with
                    the reactor and in case there is data in the outgoing queue it
                    will also schedule the transport for output.
                  * Connection_Handler::close(), check the implementation of this
                    method, it should in most cases sufficient to just call
                    this->close_handler().
                  * Connector::make_connection(), check using the profile transport
                    resolver whether to make a blocked connect or non blocked. A non
                    blocked is done when making oneways with sync_none policy applied.
                    In case the connect returns -1 and errno == EWOULDBLOCK use the
                    base method wait_for_connection_completion to wait for the
                    connection to be established. Don't register here anymore the
                    transport with the reactor, this is already done in your derived
                    Connection_Handler::open() by calling the post_open()
                  * Connector::cancel_svc_handler, a new method that must be
                    implemented by each pluggable protocol to cancel the connection
                    handler from the connector.

        Tue Aug  3 09:45:12 UTC 2004  Johnny Willemsen  <jwillemsen@remedy.nl>

                * tao/Remove_Invocation.cpp:
                  Removed debug comment

        Tue Aug  3 09:21:12 UTC 2004  Johnny Willemsen  <jwillemsen@remedy.nl>

                * tao/Transport_Connector.{h,cpp}:
                * tao/IIOP_Connector.cpp:
                  Changed signature of wait_for_connection_completion, pass transport
                  as *&, so that is can be set to 0 when not usable and return a bool
                  whether succeeded or not.

        Tue Aug  3 08:25:12 UTC 2004  Johnny Willemsen  <jwillemsen@remedy.nl>

                * tao/Transport.h:
                  Corrected link to pluggable protocols documentation

        Mon Aug  2 18:20:12 UTC 2004  Johnny Willemsen  <jwillemsen@remedy.nl>

                * tao/Transport_Connector.cpp:
                  Added wait_for_connection_completion() which now contains the code
                  from connect that handles the waiting until the connection is
                  completed. The only thing is the result value, maybe add a bool as
                  return value and pass Transport by *&, what about that?

                * tao/IIOP_Connector.cpp:
                  Use the new Transport_Connector::wait_for_connection_completion
                  instead of doing everything here again

        Mon Aug  2 13:52:27 2004  Balachandran Natarajan  <bala@dre.vanderbilt.edu>

                * tao/Transport_Connector.cpp (connect):

                  Left some comments for Johnny.

        Mon Aug  2 09:45:36 UTC 2004  Johnny Willemsen  <jwillemsen@remedy.nl>

                * tao/Transport.h:
                  Added a todo that event_handler_i has to be renamed to event_handler

                * tao/Transport.cpp (send_message_shared_i):
                  Use ACE_ERROR for a fatal message instead of a debug

        Mon Aug  2 09:16:36 UTC 2004  Johnny Willemsen  <jwillemsen@remedy.nl>

                * tao/Transport_Connector.cpp (connect):
                  Refactored this method so that checking for errors is easier, seems
                  to me that part of this method can be factored out again and can
                  then also be called from IIOP_Connector::make_connection(). Added
                  some remarks for Bala, in case we do a wait of zero on a non
                  blocking connection, how to handle any return value?

        Mon Aug  2 07:54:36 UTC 2004  Johnny Willemsen  <jwillemsen@remedy.nl>

                * tao/Transport.{h,cpp}:
                  Changed the result value type of post_open from int to bool. In case
                  registration succeeds and we have data in our outgoing queue,
                  schedule ourselves for output.

                * tao/IIOP_Connection_Handler.cpp:
                  Check the result value of post_open. In case this fails, we return
                  -1, the setting of the state to success, is now moved after the
                  post_open.

                * tao/IIOP_Connector.cpp:
                  Added a comment for Bala. Only call check_connection_closure when
                  wait return -1.

                * tao/Transport_Connector.{h,cpp}:
                  Only when wait fails call check_connection_closure. Removed the
                  result argument from this method, the caller should only call this
                  when wait returns -1, clarified the return value meaning. Removed
                  the printing of errno when connection establishment fails, shouldn't
                  we do the same in TAO_IIOP_Connector::make_connection()?

                  Not all comments of Bala below are handled yet, handling
                  of connection failures must still be improved.

        Mon Aug  2 03:40:36 2004  Balachandran Natarajan  <bala@dre.vanderbilt.edu>

                * tao/Transport_Connector.cpp:

                  Fixed a logic error and added a few comments for Johnny.

                * tao/IIOP_Connection_Handler.cpp:
                * tao/IIOP_Connector.cpp:
                * tao/Transport.cpp:
                * tao/Transport_Connector.h:

                  More comments for Johnny.

        Fri Jul 30 10:25:12 UTC 2004  Johnny Willemsen  <jwillemsen@remedy.nl>

                * tao/Transport.cpp:
                * tao/Transport_Connector.cpp:
                * tao/IIOP_Connector.cpp:
                  Added some comments, removed commented out code

                * tao/IIOP_Connection_Handler.cpp:
                  Removed not needed include which I added during my changes but is
                  now not needed anymore

                * tao/Invocation_Endpoint_Selectors.cpp:
                  Removed comments and changed the logic of selecting an endpoint, if
                  one isn't usable not break but try the next.

        Thu Jul 29 13:35:12 UTC 2004  Johnny Willemsen  <jwillemsen@remedy.nl>

                * tao/Transport_Connector.cpp:
                  Removed not needed include

        Thu Jul 29 13:35:12 UTC 2004  Johnny Willemsen  <jwillemsen@remedy.nl>

                * tao/Transport.{h,cpp}:
                  Renamed set_connected to post_open, we do much more then just
                  setting a property. When the transport is connected we register
                  ourselves with the reactor. In case of failure we close the
                  connection. The thing to check is whether it is safe to assume that
                  we are also in the transport cache

                * tao/Transport_Connector.{h,cpp}:
                  Removed register_transport() because the transport register itselves
                  now. Also removed the calls to register_transport, we don't have to
                  register the transport as connector anymore, the transport does
                  that.

                * tao/IIOP_Connector.cpp (make_connection):
                  Removed the registration of the transport with the reactor, see
                  above. Use a ACE_Event_Handler_var to make sure that we always do
                  a remove reference on the connection handler.

                * tao/IIOP_Connection_Handler.cpp (open):
                  Call transport::post_open instead of set_connected

        Thu Jul 29 10:00:12 UTC 2004  Johnny Willemsen  <jwillemsen@remedy.nl>

                * tao/Transport.cpp (set_connected):
                  Commented out schedule_output, this doesn't work, have to think
                  about something else

                * tao/Transport_Connector.cpp (connect):
                  When we get a connected transport out of the transport cache it can
                  happen that another thread drove the reactor and set the transport
                  to connected, but then it is not registered with the reactor, so add
                  a check here that when we get a connected transport and it is not
                  registered it yet, register it.

                  In case we get a setup where the connection_handler::open() could
                  safely register it, we could remove the checks above.

        Thu Jul 29 08:44:12 UTC 2004  Johnny Willemsen  <jwillemsen@remedy.nl>

                * tao/Transport_Connector.cpp (connect):
                  Added more error handling to handle situations where connections
                  can't be established

        Wed Jul 28 15:24:12 UTC 2004  Johnny Willemsen  <jwillemsen@remedy.nl>

                * tao/Transport_Connector.{h,cpp}
                  Added pure virtual cancel_svc_handler() method which must be
                  implemented by derived connectors to cancel the passed svc_handler
                  with their base connector, the cancel on the base_connector must
                  have derived connection handler, so we just can't do it in the base.
                  Another option would be to make Transport_Connector a template which
                  gets the connection handler type as template argument.
                  Added also check_connection_closure, which is now generic and can
                  also be used from the connect() call.

                * tao/IIOP_Connector.{h,cpp}:
                  Implemented the cancel_svc_handler() and removed the
                  check_connection_closure() because it is now in the base.

        Tue Jul 27 18:12:12 UTC 2004  Johnny Willemsen  <jwillemsen@remedy.nl>

                * tao/Connection_Handler.{h,cpp}:
                  Added virtual close_handler() method, this will be called the the
                  Transport_Connector and derived classes if they want to close the
                  connection_handler, the default implementation changes the LF state
                  to closed and removes a reference from the transport

                * tao/IIOP_Connection_Handler.cpp (close):
                  Instead of modifing the LF state and removing a reference from the
                  transport, just call this->close_handler(), this calls the
                  Connection_Handler::close_handler().

                  With this we can close handlers in a generic way from the
                  Transport_Connectors.

                  When we would move a template class between
                  the ACE_Svc_Handler template and the derived connection handlers,
                  this extra template could implement the close method in a generic
                  way, this would reduce the footprint a little.

                * tao/IIO_Connector.cpp:
                  Moved docu to the correct place

        Tue Jul 27 17:26:12 UTC 2004  Johnny Willemsen  <jwillemsen@remedy.nl>

                * tao/IIOP_Connection_Handler.cpp:
                  Instead of modifying the transport in several steps, just call
                  set_connected which will do all work.

                * tao/Transport.{h,cpp,inl}:
                  Removed the is_connected accessor, made a set_connected, which will
                  set the id, set the connected_ bool and will schedule an output
                  when the queue is not empty

        Tue Jul 27 12:28:12 UTC 2004  Johnny Willemsen  <jwillemsen@remedy.nl>

                * tao/Transport.{h,cpp}:
                * tao/Synch_Invocation.cpp:
                  Renamed queue_message to format_queue_message

        Tue Jul 27 12:22:12 UTC 2004  Johnny Willemsen  <jwillemsen@remedy.nl>

                * tao/Transport.{h,cpp}:
                  Added out_stream() which returns the out_stream from the
                  messaging_object, this way the invocation classes don't need to use
                  messaging_object anymore, just get the stream from the transport

                * tao/Synch_Invocation.cpp:
                * tao/Messaging/Asynch_Invocation.cpp:
                * tao/LocateRequest_Invocation.cpp:
                  Instead of getting the out_stream from the messaging_object which is
                  retrieved from the transport, get it from the transport. This way we
                  don't have to include tao/Pluggable_Messaging.h

        Tue Jul 27 08:37:12 UTC 2004  Johnny Willemsen  <jwillemsen@remedy.nl>

                * tao/Transport_Connector.{h,cpp}:
                  Factered out the registration of the transport into
                  register_transport()

        Tue Jul 27 07:31:12 UTC 2004  Johnny Willemsen  <jwillemsen@remedy.nl>

                * tao/Sync_Invocation.cpp:
                * tao/Transport.{h,cpp}:
                  Changed queue_message so that transport does the formatting

        Tue Jul 27 02:47:18 2004  Balachandran Natarajan  <bala@dre.vanderbilt.edu>

                * tao/Synch_Invocation.cpp:

                  Left some comments for Johnny.

        Mon Jul 26 13:48:12 UTC 2004  Johnny Willemsen  <jwillemsen@remedy.nl>

                * tao/Synch_Invocation.cpp (remote_oneway):
                  When queueing the message, stream it first else we just queue no
                  message contents. The only question is how to handle the failure
                  of the streaming

        Mon Jul 26 13:09:12 UTC 2004  Johnny Willemsen  <jwillemsen@remedy.nl>

                * tao/Transport.{h,cpp}:
                  Moved cleaning up the queue out of destruction and
                  send_connection_closed_notifications_i annd into the new method
                  cleanup_queue_i which is called from these places

                * tao/IIOP_Connection_Handler.cpp:
                  Marked the transport as connected after we changed the state to
                  success

                * tao/IIOP_Connector.cpp:
                  We have to handle the timeout of wait, made an implementation, but
                  with a remark to Bala to check this, not sure if this is the correct
                  way todo.

        Mon Jul 26 11:38:41 2004  Balachandran Natarajan  <bala@dre.vanderbilt.edu>

                * tao/Transport.cpp (TAO_Transport):

                  Left a comment for Johnny.

        Mon Jul 26 11:04:12 UTC 2004  Johnny Willemsen  <jwillemsen@remedy.nl>

                * tao/Invocation_Adapter.cpp:
                  Check for blocked or not blocked connection was wrong

                * tao/Transport_Connector.cpp:
                  Corrected debug statement

        Mon Jul 26 09:24:12 UTC 2004  Johnny Willemsen  <jwillemsen@remedy.nl>

                * tao/Transport.cpp:
                  In case we destruct a not connected transport it can happen that
                  we have queued messages, zap these then from memory, we just can't
                  deliver them.

        Sat Jul 24 18:08:13 2004  Balachandran Natarajan  <bala@dre.vanderbilt.edu>

                * tao/Connect_Strategy.h:

                  Added a new wait () method which takes in a transport.

                * tao/Blocked_Connect_Strategy.cpp:
                * tao/Blocked_Connect_Strategy.h:

                  Provided a default implementation for the new wait () method.

                * tao/LF_Connect_Strategy.cpp:
                * tao/LF_Connect_Strategy.h:
                * tao/Reactive_Connect_Strategy.cpp:
                * tao/Reactive_Connect_Strategy.h:

                  Provided an implementation of the new wait () method.

                * tao/Invocation_Adapter.h:

                  Changed the setup_operation_details_i () to set_syncscope_policy
                  () since that is what it does.

                * tao/Invocation_Adapter.cpp:

                  Changed the operation name in the implementation of the above
                  method. Did a bunch of cosmetic changes to keep the line lengths
                  smaller.

                * tao/Profile_Transport_Resolver.h:
                * tao/Profile_Transport_Resolver.inl:

                  Changed the name of the connected () method as blocked
                  (). Improved const correctness so that the blocked_ data member
                  is const.

                * tao/Invocation_Endpoint_Selectors.cpp:

                  Use TAO::ProfileTransportResolver::blocked () instead of
                  TAO::ProfileTransportResolver::connected ().

                * tao/Transport_Connector.cpp:
                * tao/IIOP_Connector.cpp:

                  Made a bunch of changes to improve readability of the code. Left
                  a couple of questions for Johnny. There are a few more things
                  that need to be addressed here.

        Fri Jul 22 09:54:12 UTC 2004  Johnny Willemsen  <jwillemsen@remedy.nl>

                * tao/IIOP_Connector.cpp (make_connection):
                  Call the check_connection_closure only when we want to have a
                  connected transport, for the non-blocking case we have to do
                  something else because the return value of -1 doesn't mean there
                  always the we have a problem just establishing this connection.

                * tao/IIOP_Connector.{h,cpp} (check_connection_closure):
                  Changed method signature to have a return value

        Fri Jul 22 09:20:12 UTC 2004  Johnny Willemsen  <jwillemsen@remedy.nl>

                * tao/Transport_Connector.cpp (connect):
                  When getting a transport out of the cache, print out whether it is
                  connected or not

        Thu Jul 21 15:03:12 UTC 2004  Johnny Willemsen  <jwillemsen@remedy.nl>

                * tao/IIOP_Connector.cpp (make_connection):
                  Use timeout to change the sync_options, this way we don't change
                  the bitmask

        Thu Jul 21 14:34:12 UTC 2004  Johnny Willemsen  <jwillemsen@remedy.nl>

                * tao/ORB_Core.h:
                  Removed the transport_cache accessor method, it was just declared
                  and not implemented, the ORB_Core know nothing about this

        Thu Jul 21 13:35:12 UTC 2004  Johnny Willemsen  <jwillemsen@remedy.nl>

                * tao/Transport_Connector.cpp:
                  In case we have a not connected transport we should look if we need
                  to deliver a connected transport or not and behave accordingly to it

        Wed Jul 20 15:25:12 UTC 2004  Johnny Willemsen  <jwillemsen@remedy.nl>

                * tao/TAO_Server_Request.cpp:
                  Updated all ACE_DEBUG and ACE_ERROR macros so that the formatting of
                  messages is the same as in the rest of TAO. This makes reading the
                  logfiles much easier.

        Wed Jul 20 14:42:12 UTC 2004  Johnny Willemsen  <jwillemsen@remedy.nl>

                * tao/IIOP_Connector.cpp (make_connection):
                  Removed commented out code and only check for registration errors
                  when we are calling the register_handler().

        Wed Jul 20 11:12:12 UTC 2004  Johnny Willemsen  <jwillemsen@remedy.nl>

                * tao/Transport_Connector.cpp:
                  Changed some remarks, some are not valid, some need some more
                  clarification

                * tao/IIOP_Connector.{h,cpp}:
                  Moved the handling of connection closure to a new separate method
                  check_connection_closure(). This contains code original in
                  make_connection(). This code is dependent on the type of tranport
                  used, so it can't move into the base class.

        Thu Jul  8 14:50:12 UTC 2004  Johnny Willemsen  <jwillemsen@remedy.nl>

                * tao/IIOP_Connection_Handler.cpp (open):
                  Set the transport to connected here. We should refactor the last
                  lines of this method, these lines are copied in each different type
                  of connection_handler.

                * tao/IIOP_Connector.cpp:
                  Removed not needed code, just us is_connected() on the transport.
                  Made a remark with the registration of the wait_strategy, do we need
                  to do this here?

                * tao/Transport_Connector.cpp:
                  Use the transport->is_connected() instead of the wait of the result.

                  Thanks to Bala for getting me on the right track.

        Thu Jul  8 13:18:12 UTC 2004  Johnny Willemsen  <jwillemsen@remedy.nl>

                * tao/IIOP_Connector.cpp:
                * tao/Transport_Connector.cpp:
                  Some changes to handle the wait, but things are still not correct

                * tao/Transport.cpp:
                  Initialize is_connected+ to false

        Thu Jul  8 11:58:12 UTC 2004  Johnny Willemsen  <jwillemsen@remedy.nl>

                * tao/IIOP_Connector.cpp:
                  Added some test code for how the handle the wait result value

                * tao/Transport_Connector.cpp:
                  Added more logic what to do when a not connected transport is
                  retrieved

        Mon Jul  5 12:37:12 UTC 2004  Johnny Willemsen  <jwillemsen@remedy.nl>

                * tao/Transport.{h,cpp}:
                  Removed commented out method in the header file and give purge_entry
                  a return value, so that we can check for failure.

        Mon Jul  5 12:02:12 UTC 2004  Johnny Willemsen  <jwillemsen@remedy.nl>

                * tao/IIOP_Connector.cpp:
                * tao/Transport_Connector.cpp:
                * tao/Profile_Transport_Resolver.cpp:
                  Added some documentation and added some question to some code parts
                  to be sure that we check this

        Fri Jul  2 11:32:12 UTC 2004  Johnny Willemsen  <jwillemsen@remedy.nl>

                * tao/Invocation_Adapter.{h,cpp}:
                  Added setup_operation_details_i() which will setup the operation
                  details and determine whether we want to block until a connection
                  is ready or not, this removes duplicated code and we ony determine
                  the settings once in the invocation path.

        Thu Jul  1 12:52:12 UTC 2004  Johnny Willemsen  <jwillemsen@remedy.nl>

                * tao/Transport_Connector.{h,cpp}:
                  Removed the block argument from the make_connection and connect
                  method again, if we should get a connected transport or not can be
                  retrieved from the ProfileTransportResolver

                * tao/Transport_Connector.cpp:
                  In case we get a transport from the cache that is not connected,
                  call wait with zero time. We have to add more functionality here
                  to handle the closing of that transport, and check the
                  implementation what we do when we can't register the wait strategy
                  with the reactor

                * tao/IIOP_Connector.{h,cpp}:
                  Added better handling of blocking or non-blocking connects.

        Thu Jul  1 10:02:12 UTC 2004  Johnny Willemsen  <jwillemsen@remedy.nl>

                * tao/Transport.{h,inl}:
                  Added connection_handler accessor function and made
                  connetion_handler_i protected again

                * tao/Transport_Connector.cpp:
                  Use Transport::connection_handler instead of the _i version.

        Wed Jun 30 14:26:12 UTC 2004  Johnny Willemsen  <jwillemsen@remedy.nl>

                * tao/Profile_Transport_Resolver.{h,cpp,i}:
                  Instead of passed with each operation whether the connect should
                  block or not, we now pass a boolean with the constructor if this
                  tranport must deliver a connected transport or whether it is also
                  allowed to deliver a not connected transport. Added an accessor for
                  this member.

                * tao/Invocation_Adapter.cpp:
                * tao/Invocation_Endpoint_Selectors.{h,cpp}:
                * tao/LocateRequest_Invocation_Adapter.cpp:
                  Instead of passing the block boolean with each operation, pass it
                  with the constructor or the Profile_Transport_Resolver.

        Wed Jun 30 10:19:12 UTC 2004  Johnny Willemsen  <jwillemsen@remedy.nl>

                * tao/Synch_Invocation (remote_oneway):
                  At the top of the method we check for sync with server or sync with
                  target. In case of this we do a twoway. I don't see any reason why
                  lower in the method we check another time for sync with server, so
                  removed that check. Changed the calling of
                  Synch_Twoway_Invocation::remote_twoway(), so that we check for
                  exceptions in case of emulated exception macros. Add transport local
                  variable, so that we don't need to get it several times in one
                  method call.

                * tao/Transport.cpp (send_message_shared_i):
                  Removed queueing, it should be here, added some comments that the
                  code checking for twoways or replies should go out of here. This
                  class also got the new methods queue_message and queue_message_i
                  when it was created as branch.

        Tue Jun 20 10:10:10 UTC 2004  Johnny Willemsen  <jwillemsen@remedy.nl>

                * tao/Transport.{h,cpp}:
                  Added queue_message and queue_message_i to be able to queue a
                  message from the outside, use this method also internally.
                  Added connected_ member and accessors to indicate whether this
                  transport is connected or not

                * tao/LocateRequest_Invocation_Adapter.cpp:
                  We use the Profile_Transport_Resolver here, assume that we always
                  need to get a connected transport

Mon Aug  9 09:29:12 UTC 2004  Johnny Willemsen  <jwillemsen@remedy.nl>

        * tao/Buffer_Allocator_T.h:
          Added missing access control specifier public for the base class

Sat Aug  7 23:06:41 2004  J.T. Conklin  <jtc@acorntoolworks.com>

        * orbsvcs/orbsvcs/Makefile.am:
          Changed to introduce an intermediate dependency between the IDL
          sources and generated output files so that only one instance of
          tao_idl is spawned per input file with parallel make.

Sat Aug  7 18:08:51 2004  Balachandran Natarajan  <bala@dre.vanderbilt.edu>

        * utils/catior/catior.cpp:

          Removed direct inclusion of <ctype.h>. This file already
          includes ace/os_include/os_ctype.h. If LynxOS has problems, then
          the problem is elsewhere.

        * utils/nslist/nslist.cpp:

          Used Object::is_nil () instead of _nil ().

Fri Aug  6 15:44:50 2004  J.T. Conklin  <jtc@acorntoolworks.com>

        * orbsvcs/TAO_Service/Makefile.am:
          New file.

Fri Aug  6 12:51:33 2004  Jeff Parsons <j.parsons@vanderbilt.edu>

        * tao/Argument.cpp:
        * tao/Argument.h:
        * tao/BD_String_Argument_T.cpp:
        * tao/BD_String_Argument_T.h:
        * tao/BD_String_SArgument_T.cpp:
        * tao/BD_String_SArgument_T.h:
        * tao/Basic_Argument_T.cpp:
        * tao/Basic_Argument_T.h:
        * tao/Basic_SArgument_T.cpp:
        * tao/Basic_SArgument_T.h:
        * tao/DomainC.cpp:
        * tao/Fixed_Array_Argument_T.cpp:
        * tao/Fixed_Array_Argument_T.h:
        * tao/Fixed_Array_SArgument_T.cpp:
        * tao/Fixed_Array_SArgument_T.h:
        * tao/Fixed_Size_Argument_T.cpp:
        * tao/Fixed_Size_Argument_T.h:
        * tao/Fixed_Size_SArgument_T.cpp:
        * tao/Fixed_Size_SArgument_T.h:
        * tao/Object_Argument_T.cpp:
        * tao/Object_Argument_T.h:
        * tao/Object_SArgument_T.cpp:
        * tao/Object_SArgument_T.h:
        * tao/Special_Basic_Argument_T.cpp:
        * tao/Special_Basic_Argument_T.h:
        * tao/Special_Basic_SArgument_T.cpp:
        * tao/Special_Basic_SArgument_T.h:
        * tao/UB_String_Argument_T.cpp:
        * tao/UB_String_Argument_T.h:
        * tao/UB_String_SArgument_T.cpp:
        * tao/UB_String_SArgument_T.h:
        * tao/Var_Array_Argument_T.cpp:
        * tao/Var_Array_Argument_T.h:
        * tao/Var_Array_SArgument_T.cpp:
        * tao/Var_Array_SArgument_T.h:
        * tao/Var_Size_Argument_T.cpp:
        * tao/Var_Size_Argument_T.h:
        * tao/Var_Size_SArgument_T.cpp:
        * tao/Var_Size_SArgument_T.h:
        * tao/operation_details.cpp:
        * tao/operation_details.h:
        * tao/DynamicInterface/DII_Invocation.cpp:

          Added TAO_HAS_INTERCEPTORS == 1 guards to all interceptor-related
          operations, so code generated from IDL operations will compile
          if Any operators (used by interceptors) are suppressed in code
          generation. Thanks to Nicolas HUYNH <HUYNH_Nicolas at cena dot fr>
          for reporting the problem.

Fri Aug  6 15:45:00 UTC 2004  Simon Massey  <simon.massey@prismtechnologies.com>

        * TAO/utils/catior/catior.cpp
          Added #include <ctype.h> required for Lynxos cross build.

Fri Aug  6 08:05:25 2004  Douglas C. Schmidt  <schmidt@cs.wustl.edu>

        * orbsvcs/orbsvcs/Log/LogMgr_i.cpp (TAO_LogMgr_i): Initialize
          max_id_ to 0.  Thanks to Thomas Girard <thomas.g.girard@free.fr>
          for reporting this.

        * orbsvcs/orbsvcs/Log/NotifyLogFactory_i.cpp (create_with_id):
          Duplidate object references before putting them in the hash map.
          Thanks to Thomas Girard <thomas.g.girard@free.fr> for this fix.

Fri Aug  6 12:16:35 2004  Balachandran Natarajan  <bala@dre.vanderbilt.edu>

        * utils/nslist/nslist.cpp:

          Fixed a core dump with the Object is _nil (). Thanks to Tufan
          Oruk <toruk at usa dot net> for the patch.

Thu Aug  5 23:42:02 2004  J.T. Conklin  <jtc@acorntoolworks.com>

        * orbsvcs/orbsvcs/ec_typed_events.mpb:
          Changed to inherit from dynamicinterface and ifr_client instead
          of providing libs and after statements so that dependency chain
          is complete.

Thu Aug  5 20:20:37 2004  J.T. Conklin  <jtc@acorntoolworks.com>

        * orbsvcs/orbsvcs/Makefile.am:
          Changed custom build rules to use $(srcdir)/<input-file> so
          resulting makefiles will work on systems where make doesn't
          support VPATH.

Thu Aug  5 07:08:12 UTC 2004  Johnny Willemsen  <jwillemsen@remedy.nl>

        * examples/PluggableUDP/tests/Performance/run_test.pl:
          The client also has a servant, so we must specifiy also an
          -ORBEndPoint for the client process. This fixes bugzilla bug
          1899.

Thu Aug  5 07:01:12 UTC 2004  Johnny Willemsen  <jwillemsen@remedy.nl>

        * examples/PluggableUDP/tests/Performance/run_test.pl:
          Updated this script to use the PerlACE module, simplifies this
          script a lot.

Wed Aug  4 23:03:45 2004  Ossama Othman  <ossama@dre.vanderbilt.edu>

        * orbsvcs/orbsvcs/SSLIOP/SSLIOP_Credentials.cpp (Credentials):

          Older versions of OpenSSL didn't define the OpenSSL macro.  Use
          CRYPTO_free if OPENSSL_free isn't defined.

Wed Aug  4 22:13:19 2004  Ossama Othman  <ossama@dre.vanderbilt.edu>

        * orbsvcs/orbsvcs/Security/SL3_CredentialsCurator.cpp
          (register_acquirer_factory):

          Release the String_var containing the acquisition method Id once
          the factory is successfully registered.  Memory management
          becomes the responsiblity of the CredentialsCurator.  Fixes a
          double deletion error.

Wed Aug  4 21:23:52 2004  Ossama Othman  <ossama@dre.vanderbilt.edu>

        * tao/IIOP_Acceptor.h (BASE_ACCEPTOR, CREATION_STRATEGY):
          (CONCURRENCY_STRATEGY, ACCEPT_STRATEGY):
        * tao/IIOP_Acceptor.cpp:

          Removed the "TAO_IIOP_" prefix from these typedefs.  It was
          redundant since these typedefs are already encapsulated within
          the TAO_IIOP_Acceptor class.

        * tao/ORB_Table.cpp (get_orbs):

          Minor TAO coding convention update.

Wed Aug  4 21:16:42 2004  Ossama Othman  <ossama@dre.vanderbilt.edu>

        * orbsvcs/orbsvcs/SSLIOP/SSLIOP_ClientCredentials.cpp
          (ClientCredentials):
        * orbsvcs/orbsvcs/SSLIOP/SSLIOP_OwnCredentials.cpp
          (OwnCredentials):
        * orbsvcs/orbsvcs/SSLIOP/SSLIOP_TargetCredentials.cpp
          (TargetCredentials):

          Explicitly qualify the namespace to which the Credentials base
          class belongs to work around MSVC++ 6 namespace brain damage.

        * orbsvcs/orbsvcs/SSLIOP/SSLIOP_Connector.cpp (open, close):
          (iiop_connect):

          Wrap calls to TAO::IIOP_SSL_Connector base class methods with
          the ACE_NESTED_CLASS macro to work around MSVC++ 6 namespace
          brain damage.

Wed Aug  4 15:48:06 2004  Ossama Othman  <ossama@dre.vanderbilt.edu>

        * TAO_IDL/be/be_global.cpp (destroy):
        * TAO_IDL/driver/drv_preproc.cpp (DRV_cpp_init):

          Fixed memory leaks.

Wed Aug  4 14:10:12 UTC 2004  Johnny Willemsen  <jwillemsen@remedy.nl>

        * orbsvcs/tests/Security/MT_IIOP_SSL/run_test.pl:
          This test uses multiple clients, when a client timeouts, report
          which client this is.

Wed Aug  4 07:17:12 UTC 2004  Johnny Willemsen  <jwillemsen@remedy.nl>

        * examples/AMH/Sink_Server/Timer_Handler.h:
        * examples/AMH/Sink_Server/Client_Task.cpp:
          Removed old comments that just shouldn't be in the code anymore

Tue Aug  3 17:08:38 2004  J.T. Conklin  <jtc@acorntoolworks.com>

        * orbsvcs/orbsvcs/Makefile.am:
          Removed duplicate rules for building CosEventComm and
          CosEventChannelAdmin IDL files.
          Changed to not install headers, at least for the time
          being.

        * orbsvcs/FTRT_Event_Service/Makefile.am:
        * orbsvcs/FTRT_Event_Service/Event_Service/Makefile.am:
        * orbsvcs/FTRT_Event_Service/Factory_Service/Makefile.am:
        * orbsvcs/FTRT_Event_Service/Gateway_Service/Makefile.am:
        * orbsvcs/FT_ReplicationManager/Makefile.am:
        * orbsvcs/Fault_Detector/Makefile.am:
        * orbsvcs/Fault_Notifier/Makefile.am:
        * orbsvcs/LoadBalancer/Makefile.am:
        * orbsvcs/Logging_Service/Makefile.am:
        * orbsvcs/Logging_Service/Basic_Logging_Service/Makefile.am:
        * orbsvcs/Logging_Service/Event_Logging_Service/Makefile.am:
        * orbsvcs/Logging_Service/Notify_Logging_Service/Makefile.am:
        * orbsvcs/Logging_Service/RTEvent_Logging_Service/Makefile.am:
        * orbsvcs/Notify_Service/Makefile.am:
          New file.

        * orbsvcs/Concurrency_Service/Makefile.am:
        * orbsvcs/CosEvent_Service/Makefile.am:
        * orbsvcs/Dump_Schedule/Makefile.am:
        * orbsvcs/Event_Service/Makefile.am:
        * orbsvcs/IFR_Service/Makefile.am:
        * orbsvcs/LifeCycle_Service/Makefile.am:
        * orbsvcs/Naming_Service/Makefile.am:
        * orbsvcs/Scheduling_Service/Makefile.am:
        * orbsvcs/Time_Service/Makefile.am:
        * orbsvcs/Trading_Service/Makefile.am:
          Update, with a little help from MPC.

        * orbsvcs/Makefile.am:
          Added Concurrency, CosEvent, Dump Schedule, Event, Fault
          Detector, Fault Notifier, FT Replication Manager, FTRT Event,
          IFR, LifeCycle, Load Balancer, Logging, Naming, Notify,
          Scheduling, Time, and Trading services to list of SUBDIRS.

        * configure.ac:
          Added Concurrency, CosEvent, Dump Schedule, Event, Fault
          Detector, Fault Notifier, FT Replication Manager, FTRT Event,
          IFR, LifeCycle, Load Balancer, Logging, Naming, Notify,
          Scheduling, Time, and Trading service Makefile.am's to list of
          config files.

Tue Aug  3 16:32:56 2004  Jeff Parsons <j.parsons@vanderbilt.edu>

        * TAO_IDL/be/be_interface.cpp:

          Made the checking more strict for enqueueing abstract
          interfaces to an internally used list - abstract
          valuetypes and eventtypes were also getting put on it,
          leading to generated code that wouldn't compile. Thanks to
          Will Otte <wotte@dre.vanderbilt.edu> for pointing out
          the problem.

Tue Aug  3 13:10:04 2004  J.T. Conklin  <jtc@acorntoolworks.com>

        * orbsvcs/orbsvcs/Makefile.am:
          Update, with a little help from MPC.

        * orbsvcs/Makefile.am:
          Added orbsvcs to list of SUBDIRS.

        * configure.ac:
          Added orbsvcs/orbsvcs/Makefile to list of config files.

Tue Aug  3 08:05:20 2004  J.T. Conklin  <jtc@acorntoolworks.com>

        * orbsvcs/PSS/PSDL_Datastore.cpp:
          Fixed TAO_PSDL_Datastore::create_index_helper() where the
          ACE_NEW_RETURN macro was being ab/used for placement new.
          This caused problems for targets w/ACE_HAS_NOTHROW_NEW.
          I eliminated the error checks because this function can
          never called with a bad buffer pointer.

        * orbsvcs/PSS/Makefile.am:
          New file.

        * orbsvcs/Makefile.am:
          Update with current MPC generated file, but enable only
          PSS and TAO_Service in SUBDIRS.

        * Makefile.am:
          Added orbsvcs to SUBDIRS.

        * configure.ac:
          Added orbsvcs/{,PSS/,TAO_Service/}Makefile to list of
          config files.

Tue Aug  3 13:47:12 UTC 2004  Johnny Willemsen  <jwillemsen@remedy.nl>

        * tao/PortableServer/AMH_Response_Handler.{h,cpp}:
          Corrected the method name for decrementing the reference count
          from decr_refcount to _remove_ref. The AMH Response Handler is
          derived from TAO_Local_RefCounted_Object and this defines the
          virtual method _remove_ref, we now had two methods where the
          base method didn't know anything of the allocator. By overruling
          we also get the derived _remove_ref and use the allocator
          when needed. This fixes the crashing of the AMH Sink_Server
          example in our daily builds.

Tue Aug  3 08:34:53 2004  Jeff Parsons <j.parsons@vanderbilt.edu>

        * orbsvcs/IFR_Service/be_extern.h:
        * orbsvcs/IFR_Service/be_global.cpp:
        * orbsvcs/IFR_Service/be_global.h:
        * orbsvcs/IFR_Service/be_init.cpp:

          Changes corresponding to those in TAO_IDL_BE, made in

          Sun Aug  1 20:57:32 2004  Jeff Parsons <j.parsons@vanderbilt.edu>

Mon Aug  2 14:28:12 UTC 2004  Johnny Willemsen  <jwillemsen@remedy.nl>

        * tao/PortableServer/AMH_Response_Handler.cpp:
          Removed incorrect ACE_INLINE, fixes linker errors in the builds

Mon Aug  2 08:40:12 UTC 2004  Johnny Willemsen  <jwillemsen@remedy.nl>

        * tao/Collocated_Invocation.h:
          Doxygen fix

Mon Aug  2 07:59:12 UTC 2004  Johnny Willemsen  <jwillemsen@remedy.nl>

        * tao/Transport_Cache_Manager.cpp (is_entry_idle):
          Corrected method name in debug statement and instead of retrieving
          the recycle_state three times, get it into a local variable and use
          that for checking.

Mon Aug  2 06:46:12 UTC 2004  Johnny Willemsen  <jwillemsen@remedy.nl>

        * orbsvcs/tests/Security/MT_IIOP_SSL/test_i.cpp:
          Fixed compile error due to SSLIOP Transport name change

Sun Aug  1 23:41:50 2004  J.T. Conklin  <jtc@acorntoolworks.com>

        * tao/Makefile.am:
          Update after last change.  Fixes "make install" failure due to
          bad dependencies.

Mon Aug  2 06:34:12 UTC 2004  Johnny Willemsen  <jwillemsen@remedy.nl>

        * tao/PortableServer/AMH_Response_Handler.{h,cpp}:
          Changed this class so that AMH Response Handlers can be allocated
          with an allocator and when the reference count reaches zero we
          look if we have an allocator, if so, release from the allocator,
          else just delete

        * TAO_IDL/be/be_codegen.cpp:
        * TAO_IDL/be/be_visitor_interface/amh_rh_sh.cpp:
        * TAO_IDL/be/be_visitor_interface/amh_rh_ss.cpp:
        * TAO_IDL/be/be_visitor_operation/amh_ss.cpp:
        * TAO_IDL/be/be_visitor_tmplinst/tmplinst_ss.cpp:
          Changed the generation of the allocation of the AMH Response
          Handler so that we use an allocator.

Mon Aug  2 06:10:12 UTC 2004  Johnny Willemsen  <jwillemsen@remedy.nl>

        * tao/PortableServer/Active_Object_Map.h:
          Doxygen improvement

Sun Aug  1 22:39:44 2004  J.T. Conklin  <jtc@acorntoolworks.com>

        * tao/BiDir_GIOP.mpc:
        * tao/Domain.mpc:
        * tao/DynamicAny.mpc:
        * tao/DynamicInterface.mpc:
        * tao/IFR_Client.mpc:
        * tao/IORInterceptor.mpc:
        * tao/IORManipulation.mpc:
        * tao/IORTable.mpc:
        * tao/Messaging.mpc:
        * tao/ObjRefTemplate.mpc:
        * tao/PortableServer.mpc:
        * tao/RTCORBA.mpc:
        * tao/RTPortableServer.mpc:
        * tao/RTScheduler.mpc:
        * tao/SmartProxies.mpc:
        * tao/Strategies.mpc:
        * tao/TypeCodeFactory.mpc:
        * tao/Utils.mpc:
        * tao/Valuetype.mpc:
          Fix thinko.  When these files were moved from subdirectories, I
          first merged them into tao.mpc, which required explicit project
          names.  I didn't realize at that time that the precise name was
          significant.  This caused build failures due to bad dependencies.
          I've removed the explicit names since the projects have been
          split back into separate project files.

Sun Aug  1 21:05:59 2004  J.T. Conklin  <jtc@acorntoolworks.com>

        * TAO_IDL/Makefile.am:
          Add _LDFLAGS definitions with -version-number flag for FE and BE
          libraries.

        * tao/Makefile.am:
          Update, with a little help from MPC.

        * Makefile.am:
          Update.

        * configure.ac:
          Added.  First cut at a new configure script with bits taken from
          ACE's configure.ac and the old TAO configure.in in the CVS Attic.

Sun Aug  1 20:57:32 2004  Jeff Parsons <j.parsons@vanderbilt.edu>

        * TAO_IDL/tao_idl.cpp:
        * TAO_IDL/ast/ast_decl.cpp:
        * TAO_IDL/ast/ast_home.cpp:
        * TAO_IDL/ast/ast_root.cpp:
        * TAO_IDL/ast/ast_sequence.cpp:
        * TAO_IDL/be/be_init.cpp:
        * TAO_IDL/be_include/be_extern.h:
        * TAO_IDL/include/idl_defines.h:
        * TAO_IDL/include/idl_global.h:
        * TAO_IDL/include/utl_scope.h:
        * TAO_IDL/util/utl_global.cpp:
        * TAO_IDL/util/utl_scope.cpp:

          - Fixed bugs in cleanup between iterations in processing eacj IDL
            file in the list passed on the command line.

          - Fixed bug in checking for recursive types.

          - Fixed bug in eager calculation of the version segment of the
            repository ID.

          - Fixed bug in checking number of interfaces supported by a home.

          - Added markers in existing bit vector to keep track of which
            sequences of basic types have been referenced, and code to
            update the markers.

Sun Aug  1 16:32:56 2004  J.T. Conklin  <jtc@acorntoolworks.com>

        * TAO_IDL/Makefile.am:
          Update, with a little help from MPC.

        * TAO_IDL/ast/Makefile.am:
        * TAO_IDL/be/Makefile.am:
        * TAO_IDL/be_include/Makefile.am:
        * TAO_IDL/driver/Makefile.am:
        * TAO_IDL/fe/Makefile.am:
        * TAO_IDL/include/Makefile.am:
        * TAO_IDL/narrow/Makefile.am:
        * TAO_IDL/util/Makefile.am:
          Remove stale Makefile.am's.

Sun Aug  1 09:48:46 2004  J.T. Conklin  <jtc@acorntoolworks.com>

        * tao/BiDir_GIOP/BiDir_GIOP.mpc:
        * tao/Domain/Domain.mpc:
        * tao/DynamicAny/DynamicAny.mpc:
        * tao/DynamicInterface/DynamicInterface.mpc:
        * tao/IFR_Client/IFR_Client.mpc:
        * tao/IORInterceptor/IORInterceptor.mpc:
        * tao/IORManipulation/IORManipulation.mpc:
        * tao/IORTable/IORTable.mpc:
        * tao/Messaging/Messaging.mpc:
        * tao/ObjRefTemplate/ObjRefTemplate.mpc:
        * tao/PortableServer/PortableServer.mpc:
        * tao/RTCORBA/RTCORBA.mpc:
        * tao/RTPortableServer/RTPortableServer.mpc:
        * tao/RTScheduling/RTScheduler.mpc:
        * tao/SmartProxies/SmartProxies.mpc:
        * tao/Strategies/Strategies.mpc:
        * tao/TypeCodeFactory/TypeCodeFactory.mpc:
        * tao/Utils/Utils.mpc:
        * tao/Valuetype/Valuetype.mpc:
          Move from here...

        * tao/BiDir_GIOP.mpc:
        * tao/Domain.mpc:
        * tao/DynamicAny.mpc:
        * tao/DynamicInterface.mpc:
        * tao/IFR_Client.mpc:
        * tao/IORInterceptor.mpc:
        * tao/IORManipulation.mpc:
        * tao/IORTable.mpc:
        * tao/Messaging.mpc:
        * tao/ObjRefTemplate.mpc:
        * tao/PortableServer.mpc:
        * tao/RTCORBA.mpc:
        * tao/RTPortableServer.mpc:
        * tao/RTScheduler.mpc:
        * tao/SmartProxies.mpc:
        * tao/Strategies.mpc:
        * tao/TypeCodeFactory.mpc:
        * tao/Utils.mpc:
        * tao/Valuetype.mpc:
          ...to here.  Adapt as necessary to find source, inline, and
          template files.

Sun Aug  1 17:27:12 UTC 2004  Johnny Willemsen  <jwillemsen@remedy.nl>

        * tests/QtTests/server.cpp:
          Added missing include

Sun Aug  1 17:07:12 UTC 2004  Johnny Willemsen  <jwillemsen@remedy.nl>

        * tests/RTCORBA/Banded_Connections/server.cpp:
          When we get an exception, an internal corba error is handled
          to look if it is an permission error and a specific minor code
          is set, this fails on HPUX and then the test just uses ACE_ASSERT,
          added some more code to get some specific feedback what the
          retrieved minor code from the exception is

Sun Aug  1 08:53:48 2004  J.T. Conklin  <jtc@acorntoolworks.com>

        * tao/tao.mpc:
          Updated Header_Files, Inline_Files, and Template_Files so that
          generated project files will contain complete list for install.
          Suggested by Chad Elliot <elliot_c@ociweb.com>.

Sun Aug  1 15:42:12 UTC 2004  Johnny Willemsen  <jwillemsen@remedy.nl>

        * orbsvcs/orbsvcs/Security/SL3_CredentialsCurator.cpp:
          Fixed conversion warning by adding missing .in()

Sun Aug  1 15:34:12 UTC 2004  Johnny Willemsen  <jwillemsen@remedy.nl>

        * orbsvcs/orbsvcs/Security/SL3_SecurityCurrent_Impl.h:
        * orbsvcs/orbsvcs/SSLIOP/SSLIOP_ClientCredentials.h:
        * orbsvcs/orbsvcs/SSLIOP/SSLIOP_CredentialsAcquirer.h:
        * orbsvcs/orbsvcs/SSLIOP/SSLIOP_CredentialsAcquirerFactory.h:
        * orbsvcs/orbsvcs/SSLIOP/SSLIOP_OwnCredentials.h:
        * orbsvcs/orbsvcs/Security/SL3_CredentialsAcquirerFactory.h:
        * orbsvcs/orbsvcs/Security/SL3_CredentialsCurator.h:
        * orbsvcs/orbsvcs/Security/SL3_SecurityCurrent.h:
          Fixed fuzz errors

Sun Aug  1 15:27:12 UTC 2004  Johnny Willemsen  <jwillemsen@remedy.nl>

        * tao/Wait_Strategy.h:
        * tao/Strategies/SCIOP_Transport.h:
        * tao/Valuetype/AbstractBase.h:
          Doxygen improvement

        * tao/RTCORBA/RT_Invocation_Endpoint_Selectors.h:
          Removed not needed forward declarations

        * orbsvcs/examples/LoadBalancing/RPS_Monitor.cpp:
        * orbsvcs/examples/Log/Basic/TLS_Client.cpp:
        * orbsvcs/examples/Log/Event/Event_Supplier.cpp:
        * orbsvcs/examples/Log/Notify/Notify_Supplier.cpp:
        * orbsvcs/examples/Log/RTEvent/RTEvent_Supplier.cpp:
          Fixed vc71 conversion warnings

Sun Aug  1 08:16:27 2004  J.T. Conklin  <jtc@acorntoolworks.com>

        * orbsvcs/orbsvcs/FtRtEvent.mpc:
          Changed ftrtec_export.h to FtRtEvent/EventChannel/ftrtec_export.h
          in Header_Files.

        * tao/tao.mpc:
        * orbsvcs/performance-tests/RTEvent/lib/RTEC_Perf.mpc:
          Removed Auto_Functor.cpp from Template_Files.

        * TAO_IDL/tao_idl.1: Update to reflect current file extensions.

        * orbsvcs/orbsvcs/DsEventLogAdmin.mpc:
          Changed group name from EventLog to DsEventLogAdmin.

        * orbsvcs/orbsvcs/DsLogAdmin.mpc:
          Changed group name from Log to DsLogAdmin.

        * orbsvcs/orbsvcs/DsNotifyLogAdmin.mpc:
          Changed group name from Log to DsNotifyLogAdmin.

Sun Aug  1 09:10:39 2004  Balachandran Natarajan  <bala@dre.vanderbilt.edu>

        * ChangeLogs/ChangeLog-04a:

          Moved the contents to the new directory.

Sat Jul 31 11:14:00 2004  Ossama Othman  <ossama@dre.vanderbilt.edu>

        * TAO version 1.4.2 released.

Local Variables:
add-log-time-format: current-time-string
End:
