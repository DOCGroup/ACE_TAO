// $Id$

project(*idl): taoidldefaults, orbsvcslib {
  IDL_Files {
    FT_TestReplica.idl
  }
  custom_only = 1
}

project(*Server): taoserver, fault_tolerance, orbsvcsexe, avoids_minimum_corba, avoids_corba_e_compact, avoids_corba_e_micro {
  exename = ft_replica
  after += *idl
  Source_Files {
    FT_Replica.cpp
    FT_ReplicaFactory_i.cpp
    FT_TestReplica_i.cpp
    FT_TestReplicaS.cpp
    FT_TestReplicaC.cpp
  }
// Custom folder: test scripts
// too bad this doesn't work!
// If you omit the generic_outputext, it creates an empty folder
// if you include the generic_outputext, it tries to "build" the .pl
//    file which runs the test even when you don't want to.
//  Define_Custom(Script) {
//    inputext = .pl, .py, .rb
//    generic_outputext = .txt
//  }
//  Script_Files {
//    run_test_detector.pl
//  }

  Documentation_Files {
    README
    FT_App.mpc
    run_test_basic.pl           // can the client talk to the server
    run_test_detector.pl        // does a detector notice a server fault
    run_test_notifier.pl        // does the notification get to an analyzer
    run_test_fault_consumer.pl  // Is the notification analyzed correctly
    run_test_registry.pl        // does the stand-along factory registry work
    run_test_rmregistry.pl      // does the factory registry in the RM work
    run_test_replication_mgr.pl //
    run_test_demo.pl            // test it all together
  }

  IDL_Files {
  }
}

project(*Client): taoclient, fault_tolerance, orbsvcsexe, avoids_minimum_corba, avoids_corba_e_compact, avoids_corba_e_micro {
  exename = ft_client
  after += *idl
  Source_Files {
    FT_Client.cpp
    FT_TestReplicaC.cpp
  }
  Documentation_Files {
  }
  IDL_Files {
  }
}

project(*Notifier): taoserver, fault_tolerance, iormanip, orbsvcsexe, avoids_minimum_corba, avoids_corba_e_compact, avoids_corba_e_micro {
  exename = ft_notifier
  Source_Files {
    FTAPP_Notifier_Main.cpp
    StubFaultNotifier.cpp
  }

  // explicitly omit IDL and doc files
  IDL_Files {
  }
  Documentation_Files {
  }
}

project(*Analyzer): taoclient, fault_tolerance, notification_skel, orbsvcsexe {
  exename = ft_analyzer

  Source_Files {
    FTAPP_Analyzer_Main.cpp
    StubFaultAnalyzer.cpp
    StubFaultConsumer.cpp
    StubBatchConsumer.cpp
  }

  // explicitly omit IDL files
  IDL_Files {
  }
  Documentation_Files {
  }
}

project(*FaultConsumer): taoserver, fault_tolerance, notification_skel, orbsvcsexe, avoids_minimum_corba, avoids_corba_e_compact, avoids_corba_e_micro {
  exename = ft_fault_consumer
  libs    += TAO_ReplicationManagerLib
  after   += FT_ReplicationManager_Lib
  Source_Files {
    FTAPP_FaultConsumer_Main.cpp
    ReplicationManagerFaultConsumerAdapter.cpp
  }

  // explicitly omit IDL files
  IDL_Files {
  }
  Documentation_Files {
  }
}

project(*FactoryRegistry): taoclient, fault_tolerance, orbsvcsexe, avoids_minimum_corba, avoids_corba_e_compact, avoids_corba_e_micro {
  exename = ft_registry

  Source_Files {
    FTAPP_FactoryRegistry_Main.cpp
  }

  Header_Files {

  }
  // explicitly omit IDL files
  IDL_Files {
  }
  Documentation_Files {
  }
}

project(*Creator): taoclient, fault_tolerance, orbsvcsexe, avoids_minimum_corba, avoids_corba_e_compact, avoids_corba_e_micro {
  exename = ft_create

  Source_Files {
    FT_Creator.cpp
    TAO_Object_Group_Creator.cpp
  }

  // explicitly omit IDL files
  IDL_Files {
  }

  Documentation_Files {
  }
}

project(*RMController): taoclient, fault_tolerance, orbsvcsexe, avoids_minimum_corba, avoids_corba_e_compact, avoids_corba_e_micro {
  exename = replmgr_controller
  Source_Files {
    FT_ReplicationManagerController.cpp
  }
  // explicitly omit IDL files
  IDL_Files {
  }
  Documentation_Files {
  }
}
