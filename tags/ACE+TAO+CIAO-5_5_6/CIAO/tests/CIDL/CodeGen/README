
Code Generation Test
========================

While the tests in CIAO_ROOT/tests/IDL3 target IDL3 support
and IDL3-specific code generation in particular, the tests
in CIAO_ROOT/CIDL target CIDL features and code generated
from .cidl files. The test in this directory particularly
stresses the code generation of the CIDL compiler. This
code includes the executor mapping IDL, the servant code,
and the executor implementation code. The latter is not
fully generated of course, it's merely classes (one for
each component executor, home executor, and facet executor)
with the spec-defined operations filled in, but with the
IDL-defined operations and attributes left blank.

The IDL files in this test include most if not all of the
IDL3 features that might cause a problem in code generation -
catching operations and attributes for supported interfaces,
operations and attributes for supported interface base
classes, operations and attributes for inherited home
classes, factory and finder operations for homes and those
inherited from base homes - you get the idea. More stuff
will be added as we think of it or a problem crops up.The object
of this test is for all builds to complete successfully -
there's no execution involved, since every build is a
library, there's no executable to drive it.

Please see the README file in CIAO_ROOT for info on how
to set up builds with MPC. The builds in this test depend
directly on CIAO_Container, CIAO_Servant and CIAO_Stub,
and indirectly on everything those three depend on. There's
a list in the above mentioned README file - to build those
libraries, you'll of course need ACE (ACE_ROOT/ace), TAO
(ACE_ROOT/TAO/tao) the IDL compiler (3 builds in
ACE_ROOT/TAO/TAO_IDL) and gperf (ACE_ROOT/apps/gperf/src).

Enjoy!

Jeff