// -*- C++ -*-
//
// $Id$

//=============================================================================
/**
 *  @file   GIOPC.h
 *
 *  $Id$

 *
 * Generated from GIOP1_2.pidl, that contains a part of the new data
 * type definitions for GIOP1.2 module.
 * The code was generated by the IDL compiler and then hand-crafted
 * to reduce the includes interdependencies.
 * hand crafted by Balachandran Natarajan <bala@cs.wustl.edu>
 *
 */
//=============================================================================

// ****  Code generated by the The ACE ORB (TAO) IDL Compiler ****
// TAO and the TAO IDL Compiler have been developed by:
//       Center for Distributed Object Computing
//       Washington University
//       St. Louis, MO
//       USA
//       http://www.cs.wustl.edu/~schmidt/doc-center.html
// and
//       Distributed Object Computing Laboratory
//       University of California at Irvine
//       Irvine, CA
//       USA
//       http://doc.ece.uci.edu/
//
// Information about TAO is available at:
//     http://www.cs.wustl.edu/~schmidt/TAO.html

// Readers Note:
// This file is named GIOPC.h intentionally. Shortly the file GIOP.h
// in $TAO_ROOT/ta would dissappear giving way to new files once the
// pluggable messaging stuff is done. So I would assume that there
// should be no such name clashes.

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_codegen.cpp:151

#ifndef _TAO_IDL_ORIG_GIOPC_H_
#define _TAO_IDL_ORIG_GIOPC_H_

#include "ace/pre.h"
#include "tao/corbafwd.h"
#include "tao/IOPC.h"
#include "tao/Object_KeyC.h"

#if defined (ACE_HAS_MINIMUM_IOSTREAMH_INCLUSION)
#include "ace/streams.h"
#endif /* ACE_HAS_MINIMUM_IOSTREAMH_INCLUSION */

#if !defined (ACE_LACKS_PRAGMA_ONCE)
# pragma once
#endif /* ACE_LACKS_PRAGMA_ONCE */


#if defined (TAO_EXPORT_MACRO)
#undef TAO_EXPORT_MACRO
#endif
#define TAO_EXPORT_MACRO TAO_Export

#if defined (TAO_EXPORT_NESTED_CLASSES)
#  if defined (TAO_EXPORT_NESTED_MACRO)
#    undef TAO_EXPORT_NESTED_MACRO
#  endif /* defined (TAO_EXPORT_NESTED_MACRO) */
#  define TAO_EXPORT_NESTED_MACRO TAO_Export
#endif /* TAO_EXPORT_NESTED_CLASSES */

#if defined(_MSC_VER)
#if (_MSC_VER >= 1200)
#pragma warning(push)
#endif /* _MSC_VER >= 1200 */
#pragma warning(disable:4250)
#endif /* _MSC_VER */

#if defined (__BORLANDC__)
#pragma option push -w-rvl -w-rch -w-ccc -w-inl
#endif /* __BORLANDC__ */

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_module/module_ch.cpp:48

TAO_NAMESPACE  GIOP
{
  
  // TAO_IDL - Generated from
  // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_typedef/typedef_ch.cpp:334
  
  typedef CORBA::Short AddressingDisposition;
  typedef CORBA::Short_out AddressingDisposition_out;
  
  // TAO_IDL - Generated from
  // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_typecode/typecode_decl.cpp:44
  
  TAO_NAMESPACE_STORAGE_CLASS ::CORBA::TypeCode_ptr _tc_AddressingDisposition;
  
  // TAO_IDL - Generated from
  // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_constant/constant_ch.cpp:52
  
  const CORBA::Short KeyAddr = 0;
  
  // TAO_IDL - Generated from
  // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_constant/constant_ch.cpp:52
  
  const CORBA::Short ProfileAddr = 1;
  
  // TAO_IDL - Generated from
  // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_constant/constant_ch.cpp:52
  
  const CORBA::Short ReferenceAddr = 2;
  
  // TAO_IDL - Generated from
  // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_structure/structure_ch.cpp:49
  
  class IORAddressingInfo_var;
  
  struct TAO_Export IORAddressingInfo
  {
    typedef IORAddressingInfo_var _var_type;
    
    static void _tao_any_destructor (void *);
    CORBA::ULong selected_profile_index;
    IOP::IOR ior;
  };
  
  // TAO_IDL - Generated from
  // W:\ACE_wrappers\TAO\TAO_IDL\be\be_structure.cpp:71
  
  class TAO_Export IORAddressingInfo_var
  {
  public:
    IORAddressingInfo_var (void);
    IORAddressingInfo_var (IORAddressingInfo *);
    IORAddressingInfo_var (const IORAddressingInfo_var &);
    ~IORAddressingInfo_var (void);
    
    IORAddressingInfo_var &operator= (IORAddressingInfo *);
    IORAddressingInfo_var &operator= (const IORAddressingInfo_var &);
    IORAddressingInfo *operator-> (void);
    const IORAddressingInfo *operator-> (void) const;
    
    operator const IORAddressingInfo &() const;
    operator IORAddressingInfo &();
    operator IORAddressingInfo &() const;
    
    // Variable-size types only.
    operator IORAddressingInfo *&();
    
    // in, inout, out, _retn 
    const IORAddressingInfo &in (void) const;
    IORAddressingInfo &inout (void);
    IORAddressingInfo *&out (void);
    IORAddressingInfo *_retn (void);
    IORAddressingInfo *ptr (void) const;
  
  private:
    IORAddressingInfo *ptr_;
  };
  
  // TAO_IDL - Generated from
  // W:\ACE_wrappers\TAO\TAO_IDL\be\be_structure.cpp:445
  
  class TAO_Export IORAddressingInfo_out
  {
  public:
    IORAddressingInfo_out (IORAddressingInfo *&);
    IORAddressingInfo_out (IORAddressingInfo_var &);
    IORAddressingInfo_out (const IORAddressingInfo_out &);
    IORAddressingInfo_out &operator= (const IORAddressingInfo_out &);
    IORAddressingInfo_out &operator= (IORAddressingInfo *);
    operator IORAddressingInfo *&();
    IORAddressingInfo *&ptr (void);
    IORAddressingInfo *operator-> (void);
    
  private:
    IORAddressingInfo *&ptr_;
    // Assignment from T_var not allowed.
    void operator= (const IORAddressingInfo_var &);
  };
  
  // TAO_IDL - Generated from
  // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_typecode/typecode_decl.cpp:44
  
  TAO_NAMESPACE_STORAGE_CLASS ::CORBA::TypeCode_ptr _tc_IORAddressingInfo;
  
  // TAO_IDL - Generated from
  // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_union/union_ch.cpp:53

#if !defined (_GIOP_TARGETADDRESS_CH_)
#define _GIOP_TARGETADDRESS_CH_
  
  class TargetAddress_var;
  
  class TAO_Export TargetAddress
  {
  public:
    TargetAddress (void);
    TargetAddress (const TargetAddress &);
    ~TargetAddress (void);
    static void _tao_any_destructor (void*);
    
    TargetAddress &operator= (const TargetAddress &);
    
    // TAO_IDL - Generated from
    // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_union/discriminant_ch.cpp:115
    
    void _d (CORBA::Short);
    CORBA::Short _d (void) const;
    
    // TAO_IDL - Generated from
    // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_union/union_ch.cpp:111
    
    typedef TargetAddress_var _var_type;

    // TAO_IDL - Generated from
    // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_union_branch/public_ch.cpp:507
    
    void object_key (const TAO::ObjectKey &);
    const TAO::ObjectKey &object_key (void) const;
    TAO::ObjectKey &object_key (void);
    
    // TAO_IDL - Generated from
    // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_union_branch/public_ch.cpp:616
    
    void profile (const IOP::TaggedProfile &);
    const IOP::TaggedProfile &profile (void) const;
    IOP::TaggedProfile &profile (void);
    
    // TAO_IDL - Generated from
    // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_union_branch/public_ch.cpp:616
    
    void ior (const ACE_NESTED_CLASS (GIOP, IORAddressingInfo) &);
    const ACE_NESTED_CLASS (GIOP, IORAddressingInfo) &ior (void) const;
    ACE_NESTED_CLASS (GIOP, IORAddressingInfo) &ior (void);
    
    // TAO_IDL - Generated from
    // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_union/union_ch.cpp:145
    
    void _default (void);
  private:
    CORBA::Short disc_;
    CORBA::Short holder_;
    
    union
    {
      // TAO_IDL - Generated from
      // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_union_branch/private_ch.cpp:407
      TAO::ObjectKey *object_key_;
      // TAO_IDL - Generated from
      // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_union_branch/private_ch.cpp:482
      IOP::TaggedProfile *profile_;
      // TAO_IDL - Generated from
      // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_union_branch/private_ch.cpp:482
      ACE_NESTED_CLASS (GIOP, IORAddressingInfo) *ior_;
    } u_;
    
    // TAO extension - frees any allocated storage.
    void _reset (CORBA::Short, CORBA::Boolean /* finalize */);
  };
  
  // TAO_IDL - Generated from
  // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_typecode/typecode_decl.cpp:44
  
  TAO_NAMESPACE_STORAGE_CLASS ::CORBA::TypeCode_ptr _tc_TargetAddress;

#endif /* end #if !defined */

#if !defined (_GIOP_TARGETADDRESS___VAR_CH_)
#define _GIOP_TARGETADDRESS___VAR_CH_
  
  // TAO_IDL - Generated from
  // W:\ACE_wrappers\TAO\TAO_IDL\be\be_union.cpp:85
  
  class TAO_Export TargetAddress_var
  {
  public:
    TargetAddress_var (void);
    TargetAddress_var (TargetAddress *);
    TargetAddress_var (const TargetAddress_var &);
    ~TargetAddress_var (void);
    
    TargetAddress_var &operator= (TargetAddress *);
    TargetAddress_var &operator= (const TargetAddress_var &);
    TargetAddress *operator-> (void);
    const TargetAddress *operator-> (void) const;
    
    operator const TargetAddress &() const;
    operator TargetAddress &();
    operator TargetAddress &() const;
      // Variable size types only.
    operator TargetAddress *&();
    
    // in, inout, out, _retn 
    const TargetAddress &in (void) const;
    TargetAddress &inout (void);
    TargetAddress *&out (void);
    TargetAddress *_retn (void);
    TargetAddress *ptr (void) const;
  
  private:
    TargetAddress *ptr_;
  };

#endif /* end #if !defined */

#if !defined (_GIOP_TARGETADDRESS___OUT_CH_)
#define _GIOP_TARGETADDRESS___OUT_CH_
  
  // TAO_IDL - Generated from
  // W:\ACE_wrappers\TAO\TAO_IDL\be\be_union.cpp:475
  
  class TAO_Export TargetAddress_out
  {
  public:
    TargetAddress_out (TargetAddress *&);
    TargetAddress_out (TargetAddress_var &);
    TargetAddress_out (const TargetAddress_out &);
    TargetAddress_out &operator= (const TargetAddress_out &);
    TargetAddress_out &operator= (TargetAddress *);
    operator TargetAddress *&();
    TargetAddress *&ptr (void);
    TargetAddress *operator-> (void);
    
  private:
    TargetAddress *&ptr_;
    // assignment from T_var not allowed.
    void operator= (const TargetAddress_var &);
  };

#endif /* end #if !defined */

  // We dont have the _var _out for this struct. If need arises we can
  // add them later. For the present the Version struct alone should be
  // sufficient
  struct TAO_Export Version
  {
    static void _tao_any_destructor (void *);
    CORBA::Octet major;
    CORBA::Octet minor;
  };

  class  TAO_Export Version_var
  {
  public:
    Version_var (void);
    Version_var (Version *);
    Version_var (const Version_var &);
    // Fixed-size types only.
    Version_var (const Version &);
    ~Version_var (void);

    Version_var &operator= (Version *);
    Version_var &operator= (const Version_var &);
    // Fixed-size types only.
    Version_var &operator= (const Version &);
    Version *operator-> (void);
    const Version *operator-> (void) const;

    operator const Version &() const;
    operator Version &();
    operator Version &() const;

    // in, inout, out, _retn
    const Version &in (void) const;
    Version &inout (void);
    Version &out (void);
    Version _retn (void);
    Version *ptr (void) const;

  private:
    Version *ptr_;
  };

  typedef Version &Version_out;

  TAO_NAMESPACE_STORAGE_CLASS ::CORBA::TypeCode_ptr _tc_Version;

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_module/module_ch.cpp:67

}
TAO_NAMESPACE_CLOSE // module GIOP

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_structure/any_op_ch.cpp:52

TAO_Export void operator<<= (CORBA::Any &, const GIOP::Version &); // copying version
TAO_Export void operator<<= (CORBA::Any &, GIOP::Version*); // noncopying version
TAO_Export CORBA::Boolean operator>>= (const CORBA::Any &, GIOP::Version *&); // deprecated
TAO_Export CORBA::Boolean operator>>= (const CORBA::Any &, const GIOP::Version *&);

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_structure/any_op_ch.cpp:52

TAO_Export void operator<<= (CORBA::Any &, const GIOP::IORAddressingInfo &); // copying version
TAO_Export void operator<<= (CORBA::Any &, GIOP::IORAddressingInfo*); // noncopying version
TAO_Export CORBA::Boolean operator>>= (const CORBA::Any &, GIOP::IORAddressingInfo *&); // deprecated
TAO_Export CORBA::Boolean operator>>= (const CORBA::Any &, const GIOP::IORAddressingInfo *&);

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_union/any_op_ch.cpp:52

TAO_Export void operator<<= (CORBA::Any &, const GIOP::TargetAddress &); // copying version
TAO_Export void operator<<= (CORBA::Any &, GIOP::TargetAddress*); // noncopying version
TAO_Export CORBA::Boolean operator>>= (const CORBA::Any &, GIOP::TargetAddress *&); // deprecated
TAO_Export CORBA::Boolean operator>>= (const CORBA::Any &, const GIOP::TargetAddress *&);

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_root/cdr_op.cpp:48

#ifndef __ACE_INLINE__

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_structure/cdr_op_ch.cpp:54

TAO_Export CORBA::Boolean operator<< (TAO_OutputCDR &, const GIOP::Version &);
TAO_Export CORBA::Boolean operator>> (TAO_InputCDR &, GIOP::Version &);

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_structure/cdr_op_ch.cpp:54

TAO_Export CORBA::Boolean operator<< (TAO_OutputCDR &, const GIOP::IORAddressingInfo &);
TAO_Export CORBA::Boolean operator>> (TAO_InputCDR &, GIOP::IORAddressingInfo &);

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_union/cdr_op_ch.cpp:54

TAO_Export CORBA::Boolean operator<< (TAO_OutputCDR &, const GIOP::TargetAddress &);
TAO_Export CORBA::Boolean operator>> (TAO_InputCDR &, GIOP::TargetAddress &);

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_root/cdr_op.cpp:64

#endif /* __ACE_INLINE__ */

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_codegen.cpp:1009

#if defined (__ACE_INLINE__)
#include "GIOPC.i"
#endif /* defined INLINE */

#if defined(_MSC_VER) && (_MSC_VER >= 1200)
#pragma warning(pop)
#endif /* _MSC_VER */

#if defined (__BORLANDC__)
#pragma option pop
#endif /* __BORLANDC__ */

#include "ace/post.h"
#endif /* ifndef */

