// -*- C++ -*-
// $Id$

/**
 * Code generated by the The ACE ORB (TAO) IDL Compiler v1.8.3
 * TAO and the TAO IDL Compiler have been developed by:
 *       Center for Distributed Object Computing
 *       Washington University
 *       St. Louis, MO
 *       USA
 *       http://www.cs.wustl.edu/~schmidt/doc-center.html
 * and
 *       Distributed Object Computing Laboratory
 *       University of California at Irvine
 *       Irvine, CA
 *       USA
 * and
 *       Institute for Software Integrated Systems
 *       Vanderbilt University
 *       Nashville, TN
 *       USA
 *       http://www.isis.vanderbilt.edu/
 *
 * Information about TAO is available at:
 *     http://www.cs.wustl.edu/~schmidt/TAO.html
 **/

// TAO_IDL - Generated from
// be/be_codegen.cpp:1661

#include "InterOutArgsTA_conn_i.h"

namespace CIAO_InterOutArgsT_Sender_Impl
{
  AMI4CCM_MyFooReplyHandler_i::AMI4CCM_MyFooReplyHandler_i (
      Atomic_UShort &nr_of_received)
  : nr_of_received_(nr_of_received)

  {
  }

  AMI4CCM_MyFooReplyHandler_i::~AMI4CCM_MyFooReplyHandler_i (void)
  {
  }

  void
  AMI4CCM_MyFooReplyHandler_i::var_outs ( const char * /*answer*/,
                                  CORBA::Double d_cmd, CORBA::Long l_cmd )
  {
    if (d_cmd != 3.14)
      {
        ACE_ERROR ((LM_ERROR, "ERROR MyFoo_callback_exec_i::var_outs: "
                              "received the wrong double, expected 3.14,"
                              " received %2.2f\n",
                              d_cmd));
      }
    else if (l_cmd != 100)
      {
        ACE_ERROR ((LM_ERROR, "ERROR MyFoo_callback_exec_i::var_outs: "
                              "received the wrong double, expected 3.14,"
                              " received %lu\n",
                              l_cmd));
      }
    else
      {
        ++this->nr_of_received_;
      }
  }

  void
  AMI4CCM_MyFooReplyHandler_i::var_outs_excep (
      ::CCM_AMI::ExceptionHolder_ptr excep_holder)
  {
    excep_holder->raise_exception ();
  }

  void
  AMI4CCM_MyFooReplyHandler_i::var_div_outs (
      const InterOutArgsT::TestTopic &test_topic,
      const InterOutArgsT::TopicString &topic_str,
      const InterOutArgsT::TopicArray &topic_arr)
  {
    CORBA::Boolean error = false;
    if ((ACE_OS::strcmp (test_topic.key, "aaa") != 0) || (test_topic.x != 10))
    {
      ACE_ERROR ((LM_ERROR, "ERROR MyFoo_exec_i::var_div_outs: "
                      "received the wrong struct, "
                      "expected key 'aaa', x = 10,"
                      " received key '%C' , x = %u\n",
                      test_topic.key.in(),test_topic.x));
      error = true;
    }
    if (( ACE_OS::strcmp (topic_str.key,"bbb") != 0) ||
        (ACE_OS::strcmp (topic_str.x_str, "ccc") != 0))
    {
      ACE_ERROR ((LM_ERROR, "ERROR MyFoo_exec_i::var_div_outs: "
                      "received the wrong struct, "
                      "expected key 'bbb', x = 'ccc',"
                      " received key '%C' , x = %C\n",
                      topic_str.key.in() ,topic_str.x_str.in()));
      error = true;
    }
    if (( ACE_OS::strcmp (topic_arr.key,"ddd") != 0) ||
        (topic_arr.x_array[1] != 100))
    {
      ACE_ERROR ((LM_ERROR, "ERROR MyFoo_exec_i::var_div_outs: "
                      "received the wrong struct, "
                      "expected key 'ddd', second elem 100 ,"
                      " received key '%C', second elem %u\n",
                      topic_arr.key.in(), topic_arr.x_array[1]));
      error = true;
    }
    if (error == false)
      {
        ++this->nr_of_received_;
      }
  }

  void
  AMI4CCM_MyFooReplyHandler_i::var_div_outs_excep (::CCM_AMI::ExceptionHolder_ptr excep_holder)
  {
    excep_holder->raise_exception ();
  }

  void
  AMI4CCM_MyFooReplyHandler_i::var_div2_outs (
      const InterOutArgsT::X_Union &x_uni,
      const InterOutArgsT::test_seq &seq)
  {
    CORBA::Boolean error = false;

    if (x_uni.x_long() != 11)
      {
        ACE_ERROR ((LM_ERROR, "ERROR MyFoo_exec_i::var_div2_outs: "
                       "received the wrong union, "
                       "expected x_long = 11,"
                       " received x_long = %u\n",
                        x_uni.x_long()));
        error = true;
      }
    if (( ACE_OS::strcmp (seq[0].x_teststr, "fff") != 0) ||
        (seq[0].x_test != 12))
      {
        ACE_ERROR ((LM_ERROR, "ERROR MyFoo_exec_i::var_div2_outs: "
                   "received the wrong sequence, "
                   "expected key 'fff', x = 12,"
                   " received key '%C' , x = %u\n",
                   seq[0].x_teststr.in(),seq[0].x_test));
        error = true;
      }
    if (error == false)
      {
        ++this->nr_of_received_;
      }
  }

  void
  AMI4CCM_MyFooReplyHandler_i::var_div2_outs_excep (
      ::CCM_AMI::ExceptionHolder_ptr excep_holder)
  {
    excep_holder->raise_exception ();
  }

  void
  AMI4CCM_MyFooReplyHandler_i::enum_out (InterOutArgsT::test_enum test_enum)
  {
    if (test_enum != InterOutArgsT::ONE)

    {
      ACE_ERROR ((LM_ERROR, "ERROR MyFoo_callback_exec_i::enum_out: "
                            "received the wrong value, expected ONE,"
                            " received %u\n",
                            test_enum));
    }
  else
    {
      ++this->nr_of_received_;
    }
  }

  void
  AMI4CCM_MyFooReplyHandler_i::enum_out_excep (
      ::CCM_AMI::ExceptionHolder_ptr excep_holder)
  {
    excep_holder->raise_exception ();
  }
}
