// $Id$

// ============================================================================
//
// = LIBRARY
//    TAO/tests/IDL_Test
//
// = FILENAME
//    nested_scope.idl
//
// = DESCRIPTION
//    This file contains examples of IDL code that has 
//    caused problems in the past for the TAO IDL
//    compiler. This test is to make sure the problems
//    stay fixed.
//
// = AUTHORS
//    Jeff Parsons <parsons@cs.wustl.edu> and TAO users.
//
// ============================================================================

// Tests all the problem datatypes for repeating a scope
// name after skipping one nesting level.

module skip
{
  module hump
  {
    struct skip {short s;};      
  };
};

module u_skip
{
  module u_hump
  {
    union u_skip switch (short)
    {
      case 0: short s;
    };
  };
};

module e_skip
{
  module e_hump
  {
    exception e_skip {};
  };
};

module i_skip
{
  module i_hump
  {
    interface i_skip {};
  };
};

module pre_u_skip
{
  module pre_u_hump
  {
    typedef sequence<long> pre_u_skip;
  };
};

module pre_b_skip
{
  module pre_b_hump
  {
    typedef sequence<long, 3> pre_b_skip;
  };
};

module str_u_skip
{
  module str_u_hump
  {
    typedef sequence<string> str_u_skip;
  };
};

module str_b_skip
{
  module str_b_hump
  {
    typedef sequence<string, 3> str_b_skip;
  };
};

module wstr_u_skip
{
  module wstr_u_hump
  {
    typedef sequence<wstring> wstr_u_skip;
  };
};

module wstr_b_skip
{
  module wstr_b_hump
  {
    typedef sequence<wstring, 3> wstr_b_skip;
  };
};

interface foo {};

module obj_u_skip
{
  module obj_u_hump
  {
    typedef sequence<foo> obj_u_skip;
  };
};

module obj_b_skip
{
  module obj_b_hump
  {
    typedef sequence<foo> obj_b_skip;
  };
};



