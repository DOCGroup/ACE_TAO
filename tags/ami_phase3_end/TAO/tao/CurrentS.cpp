/* -*- C++ -*- */
// $Id$
// ******  Code generated by the The ACE ORB (TAO) IDL Compiler *******
// TAO ORB and the TAO IDL Compiler have been developed by Washington
// University Computer Science's Distributed Object Computing Group.
//
// Information on TAO is available at
//                 http://www.cs.wustl.edu/~schmidt/TAO.html

#include "tao/CurrentC.h"
#include "tao/Operation_Table.h"
#include "tao/POA_CORBA.h"
#include "tao/Server_Request.h"
#include "tao/Environment.h"
#include "tao/Typecode.h"

ACE_RCSID(tao, CurrentS, "$Id$")

POA_CORBA::Current::Current (void)
{
}

// skeleton destructor
POA_CORBA::Current::~Current (void)
{
}

CORBA::Boolean POA_CORBA::Current::_is_a (
    const char* value,
    CORBA::Environment &_tao_environment
  )
{
  if (
    (!ACE_OS::strcmp ((char *)value, "IDL:CORBA/Current:1.0")) ||
    (!ACE_OS::strcmp ((char *)value, CORBA::_tc_Object->id (_tao_environment))))
      return 1;
    else
      return 0;
}

void* POA_CORBA::Current::_downcast (
    const char* logical_type_id
  )
{
  if (ACE_OS::strcmp (logical_type_id, "IDL:CORBA/Current:1.0") == 0)
    return ACE_static_cast (POA_CORBA::Current_ptr, this);
  if (ACE_OS::strcmp (logical_type_id, "IDL:omg.org/CORBA/Object:1.0") == 0)
    return ACE_static_cast(PortableServer::Servant, this);
  return 0;
}

const char* POA_CORBA::Current::_interface_repository_id (void) const
{
  return "IDL:CORBA/Current:1.0";
}

POA_CORBA::_tao_collocated_Current::_tao_collocated_Current (
    POA_CORBA::Current_ptr  servant,
    TAO_Stub *stub
  )
  : CORBA_Current (stub, servant, 1),
    CORBA_Object (stub, servant, 1),
    servant_ (servant)
{
}

POA_CORBA::Current_ptr POA_CORBA::_tao_collocated_Current::_get_servant (void) const
{
  return this->servant_;
}

CORBA::Boolean POA_CORBA::_tao_collocated_Current::_is_a (
    const char* logical_type_id,
    CORBA::Environment &_tao_environment
  )
{
  return this->servant_->_is_a (
      logical_type_id,
      _tao_environment
    );
}


CORBA::Current*
POA_CORBA::Current::_this (CORBA_Environment &TAO_IN_ENV)
{
  TAO_Stub *stub = this->_create_stub (TAO_IN_ENV);
  if (TAO_IN_ENV.exception () != 0)
    return 0;
  return new POA_CORBA::_tao_collocated_Current (this, stub);
}
