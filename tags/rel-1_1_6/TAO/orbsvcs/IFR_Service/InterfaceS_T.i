/* -*- C++ -*- */
//$Id$

// ******  Code generated by the The ACE ORB (TAO) IDL Compiler *******
// TAO and the TAO IDL Compiler have been developed by the Center for
// Distributed Object Computing at Washington University, St. Louis.
//
// Information about TAO is available at:
//                 http://www.cs.wustl.edu/~schmidt/TAO.html


#if defined (ACE_HAS_USING_KEYWORD)
template <class T> ACE_INLINE
POA_IR::Contained_tie<T>::Contained_tie (T &t)
	: ptr_ (&t),
	  poa_ (PortableServer::POA::_nil ()),
	  rel_ (0)
{}

template <class T> ACE_INLINE
POA_IR::Contained_tie<T>::Contained_tie (T &t, PortableServer::POA_ptr poa)
	: ptr_ (&t),
	  poa_ (PortableServer::POA::_duplicate (poa)),
	  rel_ (0)
{}

template <class T> ACE_INLINE
POA_IR::Contained_tie<T>::Contained_tie (T *tp, CORBA::Boolean release)
	: ptr_ (tp),
	  poa_ (PortableServer::POA::_nil ()),
	  rel_ (release)
{}

template <class T> ACE_INLINE
POA_IR::Contained_tie<T>::Contained_tie (T *tp, PortableServer::POA_ptr poa, CORBA::Boolean release)
	: ptr_ (tp),
	  poa_ (PortableServer::POA::_duplicate (poa)),
	  rel_ (release)
{}

template <class T> ACE_INLINE
POA_IR::Contained_tie<T>::~Contained_tie (void)
{
  if (this->rel_) delete this->ptr_;
}

template <class T> ACE_INLINE T *
POA_IR::Contained_tie<T>::_tied_object (void)
{
  return this->ptr_;
}

template <class T> ACE_INLINE void
POA_IR::Contained_tie<T>::_tied_object (T &obj)
{
  if (this->rel_) delete this->ptr_;
  this->ptr_ = &obj;
  this->rel_ = 0;
}

template <class T> ACE_INLINE void
POA_IR::Contained_tie<T>::_tied_object (T *obj, CORBA::Boolean release)
{
  if (this->rel_) delete this->ptr_;
  this->ptr_ = obj;
  this->rel_ = release;
}

template <class T> ACE_INLINE CORBA::Boolean
POA_IR::Contained_tie<T>::_is_owner (void)
{
  return this->rel_;
}

template <class T> ACE_INLINE void
POA_IR::Contained_tie<T>::_is_owner (CORBA::Boolean b)
{
  this->rel_ = b;
}

template <class T> ACE_INLINE PortableServer::POA_ptr
POA_IR::Contained_tie<T>::_default_POA (CORBA::Environment &env)
{
  if (!CORBA::is_nil (this->poa_.in ()))
    return PortableServer::POA::_duplicate (this->poa_.in ());

  return this->Contained::_default_POA (env);
}

template <class T> ACE_INLINE
char * POA_IR::Contained_tie<T>::id  (
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->id (
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
void POA_IR::Contained_tie<T>::id  (
    const char * id,
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  this->ptr_->id (
    id,
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
char * POA_IR::Contained_tie<T>::name  (
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->name (
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
void POA_IR::Contained_tie<T>::name  (
    const char * name,
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  this->ptr_->name (
    name,
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
char * POA_IR::Contained_tie<T>::version  (
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->version (
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
void POA_IR::Contained_tie<T>::version  (
    const char * version,
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  this->ptr_->version (
    version,
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
IR::Container_ptr POA_IR::Contained_tie<T>::defined_in  (
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->defined_in (
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
char * POA_IR::Contained_tie<T>::absolute_name  (
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->absolute_name (
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
IR::Repository_ptr POA_IR::Contained_tie<T>::containing_repository  (
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->containing_repository (
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
IR::Contained::Description * POA_IR::Contained_tie<T>::describe  (
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->describe (
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
void POA_IR::Contained_tie<T>::move  (
    IR::Container_ptr new_container,
    const char * new_name,
    const char * new_version,
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  this->ptr_->move (
    new_container,
    new_name,
    new_version,
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
IR::DefinitionKind POA_IR::Contained_tie<T>::def_kind  (
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->def_kind (
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
void POA_IR::Contained_tie<T>::destroy  (
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  this->ptr_->destroy (
    ACE_TRY_ENV
  );
}

#endif /* ACE_HAS_USING_KEYWORD */

#if defined (ACE_HAS_USING_KEYWORD)
template <class T> ACE_INLINE
POA_IR::Container_tie<T>::Container_tie (T &t)
	: ptr_ (&t),
	  poa_ (PortableServer::POA::_nil ()),
	  rel_ (0)
{}

template <class T> ACE_INLINE
POA_IR::Container_tie<T>::Container_tie (T &t, PortableServer::POA_ptr poa)
	: ptr_ (&t),
	  poa_ (PortableServer::POA::_duplicate (poa)),
	  rel_ (0)
{}

template <class T> ACE_INLINE
POA_IR::Container_tie<T>::Container_tie (T *tp, CORBA::Boolean release)
	: ptr_ (tp),
	  poa_ (PortableServer::POA::_nil ()),
	  rel_ (release)
{}

template <class T> ACE_INLINE
POA_IR::Container_tie<T>::Container_tie (T *tp, PortableServer::POA_ptr poa, CORBA::Boolean release)
	: ptr_ (tp),
	  poa_ (PortableServer::POA::_duplicate (poa)),
	  rel_ (release)
{}

template <class T> ACE_INLINE
POA_IR::Container_tie<T>::~Container_tie (void)
{
  if (this->rel_) delete this->ptr_;
}

template <class T> ACE_INLINE T *
POA_IR::Container_tie<T>::_tied_object (void)
{
  return this->ptr_;
}

template <class T> ACE_INLINE void
POA_IR::Container_tie<T>::_tied_object (T &obj)
{
  if (this->rel_) delete this->ptr_;
  this->ptr_ = &obj;
  this->rel_ = 0;
}

template <class T> ACE_INLINE void
POA_IR::Container_tie<T>::_tied_object (T *obj, CORBA::Boolean release)
{
  if (this->rel_) delete this->ptr_;
  this->ptr_ = obj;
  this->rel_ = release;
}

template <class T> ACE_INLINE CORBA::Boolean
POA_IR::Container_tie<T>::_is_owner (void)
{
  return this->rel_;
}

template <class T> ACE_INLINE void
POA_IR::Container_tie<T>::_is_owner (CORBA::Boolean b)
{
  this->rel_ = b;
}

template <class T> ACE_INLINE PortableServer::POA_ptr
POA_IR::Container_tie<T>::_default_POA (CORBA::Environment &env)
{
  if (!CORBA::is_nil (this->poa_.in ()))
    return PortableServer::POA::_duplicate (this->poa_.in ());

  return this->Container::_default_POA (env);
}

template <class T> ACE_INLINE
IR::Contained_ptr POA_IR::Container_tie<T>::lookup  (
    const char * search_name,
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->lookup (
    search_name,
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
IR::ContainedSeq * POA_IR::Container_tie<T>::contents  (
    IR::DefinitionKind limit_type,
    CORBA::Boolean exclude_inherited,
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->contents (
    limit_type,
    exclude_inherited,
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
IR::ContainedSeq * POA_IR::Container_tie<T>::lookup_name  (
    const char * search_name,
    CORBA::Long levels_to_search,
    IR::DefinitionKind limit_type,
    CORBA::Boolean exclude_inherited,
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->lookup_name (
    search_name,
    levels_to_search,
    limit_type,
    exclude_inherited,
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
IR::Container::DescriptionSeq * POA_IR::Container_tie<T>::describe_contents  (
    IR::DefinitionKind limit_type,
    CORBA::Boolean exclude_inherited,
    CORBA::Long max_returned_objs,
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->describe_contents (
    limit_type,
    exclude_inherited,
    max_returned_objs,
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
IR::ModuleDef_ptr POA_IR::Container_tie<T>::create_module  (
    const char * id,
    const char * name,
    const char * version,
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->create_module (
    id,
    name,
    version,
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
IR::ConstantDef_ptr POA_IR::Container_tie<T>::create_constant  (
    const char * id,
    const char * name,
    const char * version,
    IR::IDLType_ptr type,
    const CORBA::Any & value,
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->create_constant (
    id,
    name,
    version,
    type,
    value,
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
IR::StructDef_ptr POA_IR::Container_tie<T>::create_struct  (
    const char * id,
    const char * name,
    const char * version,
    const IR::StructMemberSeq & members,
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->create_struct (
    id,
    name,
    version,
    members,
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
IR::UnionDef_ptr POA_IR::Container_tie<T>::create_union  (
    const char * id,
    const char * name,
    const char * version,
    IR::IDLType_ptr discriminator_type,
    const IR::UnionMemberSeq & members,
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->create_union (
    id,
    name,
    version,
    discriminator_type,
    members,
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
IR::EnumDef_ptr POA_IR::Container_tie<T>::create_enum  (
    const char * id,
    const char * name,
    const char * version,
    const IR::EnumMemberSeq & members,
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->create_enum (
    id,
    name,
    version,
    members,
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
IR::AliasDef_ptr POA_IR::Container_tie<T>::create_alias  (
    const char * id,
    const char * name,
    const char * version,
    IR::IDLType_ptr original_type,
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->create_alias (
    id,
    name,
    version,
    original_type,
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
IR::InterfaceDef_ptr POA_IR::Container_tie<T>::create_interface  (
    const char * id,
    const char * name,
    const char * version,
    const IR::InterfaceDefSeq & base_interfaces,
    CORBA::Boolean is_abstract,
    CORBA::Boolean is_local,
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->create_interface (
    id,
    name,
    version,
    base_interfaces,
    is_abstract,
    is_local,
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
IR::ValueDef_ptr POA_IR::Container_tie<T>::create_value  (
    const char * id,
    const char * name,
    const char * version,
    CORBA::Boolean is_custom,
    CORBA::Boolean is_abstract,
    IR::ValueDef_ptr base_value,
    CORBA::Boolean is_truncatable,
    const IR::ValueDefSeq & abstract_base_values,
    const IR::InterfaceDefSeq & supported_interfaces,
    const IR::InitializerSeq & initializers,
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->create_value (
    id,
    name,
    version,
    is_custom,
    is_abstract,
    base_value,
    is_truncatable,
    abstract_base_values,
    supported_interfaces,
    initializers,
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
IR::ValueBoxDef_ptr POA_IR::Container_tie<T>::create_value_box  (
    const char * id,
    const char * name,
    const char * version,
    IR::IDLType_ptr original_type_def,
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->create_value_box (
    id,
    name,
    version,
    original_type_def,
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
IR::ExceptionDef_ptr POA_IR::Container_tie<T>::create_exception  (
    const char * id,
    const char * name,
    const char * version,
    const IR::StructMemberSeq & members,
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->create_exception (
    id,
    name,
    version,
    members,
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
IR::NativeDef_ptr POA_IR::Container_tie<T>::create_native  (
    const char * id,
    const char * name,
    const char * version,
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->create_native (
    id,
    name,
    version,
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
IR::DefinitionKind POA_IR::Container_tie<T>::def_kind  (
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->def_kind (
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
void POA_IR::Container_tie<T>::destroy  (
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  this->ptr_->destroy (
    ACE_TRY_ENV
  );
}

#endif /* ACE_HAS_USING_KEYWORD */

#if defined (ACE_HAS_USING_KEYWORD)
template <class T> ACE_INLINE
POA_IR::IDLType_tie<T>::IDLType_tie (T &t)
	: ptr_ (&t),
	  poa_ (PortableServer::POA::_nil ()),
	  rel_ (0)
{}

template <class T> ACE_INLINE
POA_IR::IDLType_tie<T>::IDLType_tie (T &t, PortableServer::POA_ptr poa)
	: ptr_ (&t),
	  poa_ (PortableServer::POA::_duplicate (poa)),
	  rel_ (0)
{}

template <class T> ACE_INLINE
POA_IR::IDLType_tie<T>::IDLType_tie (T *tp, CORBA::Boolean release)
	: ptr_ (tp),
	  poa_ (PortableServer::POA::_nil ()),
	  rel_ (release)
{}

template <class T> ACE_INLINE
POA_IR::IDLType_tie<T>::IDLType_tie (T *tp, PortableServer::POA_ptr poa, CORBA::Boolean release)
	: ptr_ (tp),
	  poa_ (PortableServer::POA::_duplicate (poa)),
	  rel_ (release)
{}

template <class T> ACE_INLINE
POA_IR::IDLType_tie<T>::~IDLType_tie (void)
{
  if (this->rel_) delete this->ptr_;
}

template <class T> ACE_INLINE T *
POA_IR::IDLType_tie<T>::_tied_object (void)
{
  return this->ptr_;
}

template <class T> ACE_INLINE void
POA_IR::IDLType_tie<T>::_tied_object (T &obj)
{
  if (this->rel_) delete this->ptr_;
  this->ptr_ = &obj;
  this->rel_ = 0;
}

template <class T> ACE_INLINE void
POA_IR::IDLType_tie<T>::_tied_object (T *obj, CORBA::Boolean release)
{
  if (this->rel_) delete this->ptr_;
  this->ptr_ = obj;
  this->rel_ = release;
}

template <class T> ACE_INLINE CORBA::Boolean
POA_IR::IDLType_tie<T>::_is_owner (void)
{
  return this->rel_;
}

template <class T> ACE_INLINE void
POA_IR::IDLType_tie<T>::_is_owner (CORBA::Boolean b)
{
  this->rel_ = b;
}

template <class T> ACE_INLINE PortableServer::POA_ptr
POA_IR::IDLType_tie<T>::_default_POA (CORBA::Environment &env)
{
  if (!CORBA::is_nil (this->poa_.in ()))
    return PortableServer::POA::_duplicate (this->poa_.in ());

  return this->IDLType::_default_POA (env);
}

template <class T> ACE_INLINE
CORBA::TypeCode_ptr POA_IR::IDLType_tie<T>::type  (
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->type (
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
IR::DefinitionKind POA_IR::IDLType_tie<T>::def_kind  (
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->def_kind (
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
void POA_IR::IDLType_tie<T>::destroy  (
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  this->ptr_->destroy (
    ACE_TRY_ENV
  );
}

#endif /* ACE_HAS_USING_KEYWORD */

#if defined (ACE_HAS_USING_KEYWORD)
template <class T> ACE_INLINE
POA_IR::Repository_tie<T>::Repository_tie (T &t)
	: ptr_ (&t),
	  poa_ (PortableServer::POA::_nil ()),
	  rel_ (0)
{}

template <class T> ACE_INLINE
POA_IR::Repository_tie<T>::Repository_tie (T &t, PortableServer::POA_ptr poa)
	: ptr_ (&t),
	  poa_ (PortableServer::POA::_duplicate (poa)),
	  rel_ (0)
{}

template <class T> ACE_INLINE
POA_IR::Repository_tie<T>::Repository_tie (T *tp, CORBA::Boolean release)
	: ptr_ (tp),
	  poa_ (PortableServer::POA::_nil ()),
	  rel_ (release)
{}

template <class T> ACE_INLINE
POA_IR::Repository_tie<T>::Repository_tie (T *tp, PortableServer::POA_ptr poa, CORBA::Boolean release)
	: ptr_ (tp),
	  poa_ (PortableServer::POA::_duplicate (poa)),
	  rel_ (release)
{}

template <class T> ACE_INLINE
POA_IR::Repository_tie<T>::~Repository_tie (void)
{
  if (this->rel_) delete this->ptr_;
}

template <class T> ACE_INLINE T *
POA_IR::Repository_tie<T>::_tied_object (void)
{
  return this->ptr_;
}

template <class T> ACE_INLINE void
POA_IR::Repository_tie<T>::_tied_object (T &obj)
{
  if (this->rel_) delete this->ptr_;
  this->ptr_ = &obj;
  this->rel_ = 0;
}

template <class T> ACE_INLINE void
POA_IR::Repository_tie<T>::_tied_object (T *obj, CORBA::Boolean release)
{
  if (this->rel_) delete this->ptr_;
  this->ptr_ = obj;
  this->rel_ = release;
}

template <class T> ACE_INLINE CORBA::Boolean
POA_IR::Repository_tie<T>::_is_owner (void)
{
  return this->rel_;
}

template <class T> ACE_INLINE void
POA_IR::Repository_tie<T>::_is_owner (CORBA::Boolean b)
{
  this->rel_ = b;
}

template <class T> ACE_INLINE PortableServer::POA_ptr
POA_IR::Repository_tie<T>::_default_POA (CORBA::Environment &env)
{
  if (!CORBA::is_nil (this->poa_.in ()))
    return PortableServer::POA::_duplicate (this->poa_.in ());

  return this->Repository::_default_POA (env);
}

template <class T> ACE_INLINE
IR::Contained_ptr POA_IR::Repository_tie<T>::lookup_id  (
    const char * search_id,
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->lookup_id (
    search_id,
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
CORBA::TypeCode_ptr POA_IR::Repository_tie<T>::get_canonical_typecode  (
    CORBA::TypeCode_ptr tc,
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->get_canonical_typecode (
    tc,
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
IR::PrimitiveDef_ptr POA_IR::Repository_tie<T>::get_primitive  (
    IR::PrimitiveKind kind,
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->get_primitive (
    kind,
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
IR::StringDef_ptr POA_IR::Repository_tie<T>::create_string  (
    CORBA::ULong bound,
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->create_string (
    bound,
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
IR::WstringDef_ptr POA_IR::Repository_tie<T>::create_wstring  (
    CORBA::ULong bound,
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->create_wstring (
    bound,
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
IR::SequenceDef_ptr POA_IR::Repository_tie<T>::create_sequence  (
    CORBA::ULong bound,
    IR::IDLType_ptr element_type,
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->create_sequence (
    bound,
    element_type,
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
IR::ArrayDef_ptr POA_IR::Repository_tie<T>::create_array  (
    CORBA::ULong length,
    IR::IDLType_ptr element_type,
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->create_array (
    length,
    element_type,
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
IR::FixedDef_ptr POA_IR::Repository_tie<T>::create_fixed  (
    CORBA::UShort digits,
    CORBA::Short scale,
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->create_fixed (
    digits,
    scale,
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
IR::Contained_ptr POA_IR::Repository_tie<T>::lookup  (
    const char * search_name,
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->lookup (
    search_name,
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
IR::ContainedSeq * POA_IR::Repository_tie<T>::contents  (
    IR::DefinitionKind limit_type,
    CORBA::Boolean exclude_inherited,
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->contents (
    limit_type,
    exclude_inherited,
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
IR::ContainedSeq * POA_IR::Repository_tie<T>::lookup_name  (
    const char * search_name,
    CORBA::Long levels_to_search,
    IR::DefinitionKind limit_type,
    CORBA::Boolean exclude_inherited,
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->lookup_name (
    search_name,
    levels_to_search,
    limit_type,
    exclude_inherited,
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
IR::Container::DescriptionSeq * POA_IR::Repository_tie<T>::describe_contents  (
    IR::DefinitionKind limit_type,
    CORBA::Boolean exclude_inherited,
    CORBA::Long max_returned_objs,
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->describe_contents (
    limit_type,
    exclude_inherited,
    max_returned_objs,
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
IR::ModuleDef_ptr POA_IR::Repository_tie<T>::create_module  (
    const char * id,
    const char * name,
    const char * version,
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->create_module (
    id,
    name,
    version,
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
IR::ConstantDef_ptr POA_IR::Repository_tie<T>::create_constant  (
    const char * id,
    const char * name,
    const char * version,
    IR::IDLType_ptr type,
    const CORBA::Any & value,
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->create_constant (
    id,
    name,
    version,
    type,
    value,
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
IR::StructDef_ptr POA_IR::Repository_tie<T>::create_struct  (
    const char * id,
    const char * name,
    const char * version,
    const IR::StructMemberSeq & members,
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->create_struct (
    id,
    name,
    version,
    members,
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
IR::UnionDef_ptr POA_IR::Repository_tie<T>::create_union  (
    const char * id,
    const char * name,
    const char * version,
    IR::IDLType_ptr discriminator_type,
    const IR::UnionMemberSeq & members,
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->create_union (
    id,
    name,
    version,
    discriminator_type,
    members,
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
IR::EnumDef_ptr POA_IR::Repository_tie<T>::create_enum  (
    const char * id,
    const char * name,
    const char * version,
    const IR::EnumMemberSeq & members,
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->create_enum (
    id,
    name,
    version,
    members,
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
IR::AliasDef_ptr POA_IR::Repository_tie<T>::create_alias  (
    const char * id,
    const char * name,
    const char * version,
    IR::IDLType_ptr original_type,
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->create_alias (
    id,
    name,
    version,
    original_type,
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
IR::InterfaceDef_ptr POA_IR::Repository_tie<T>::create_interface  (
    const char * id,
    const char * name,
    const char * version,
    const IR::InterfaceDefSeq & base_interfaces,
    CORBA::Boolean is_abstract,
    CORBA::Boolean is_local,
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->create_interface (
    id,
    name,
    version,
    base_interfaces,
    is_abstract,
    is_local,
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
IR::ValueDef_ptr POA_IR::Repository_tie<T>::create_value  (
    const char * id,
    const char * name,
    const char * version,
    CORBA::Boolean is_custom,
    CORBA::Boolean is_abstract,
    IR::ValueDef_ptr base_value,
    CORBA::Boolean is_truncatable,
    const IR::ValueDefSeq & abstract_base_values,
    const IR::InterfaceDefSeq & supported_interfaces,
    const IR::InitializerSeq & initializers,
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->create_value (
    id,
    name,
    version,
    is_custom,
    is_abstract,
    base_value,
    is_truncatable,
    abstract_base_values,
    supported_interfaces,
    initializers,
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
IR::ValueBoxDef_ptr POA_IR::Repository_tie<T>::create_value_box  (
    const char * id,
    const char * name,
    const char * version,
    IR::IDLType_ptr original_type_def,
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->create_value_box (
    id,
    name,
    version,
    original_type_def,
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
IR::ExceptionDef_ptr POA_IR::Repository_tie<T>::create_exception  (
    const char * id,
    const char * name,
    const char * version,
    const IR::StructMemberSeq & members,
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->create_exception (
    id,
    name,
    version,
    members,
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
IR::NativeDef_ptr POA_IR::Repository_tie<T>::create_native  (
    const char * id,
    const char * name,
    const char * version,
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->create_native (
    id,
    name,
    version,
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
IR::DefinitionKind POA_IR::Repository_tie<T>::def_kind  (
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->def_kind (
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
void POA_IR::Repository_tie<T>::destroy  (
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  this->ptr_->destroy (
    ACE_TRY_ENV
  );
}

#endif /* ACE_HAS_USING_KEYWORD */

#if defined (ACE_HAS_USING_KEYWORD)
template <class T> ACE_INLINE
POA_IR::ComponentRepository_tie<T>::ComponentRepository_tie (T &t)
	: ptr_ (&t),
	  poa_ (PortableServer::POA::_nil ()),
	  rel_ (0)
{}

template <class T> ACE_INLINE
POA_IR::ComponentRepository_tie<T>::ComponentRepository_tie (T &t, PortableServer::POA_ptr poa)
	: ptr_ (&t),
	  poa_ (PortableServer::POA::_duplicate (poa)),
	  rel_ (0)
{}

template <class T> ACE_INLINE
POA_IR::ComponentRepository_tie<T>::ComponentRepository_tie (T *tp, CORBA::Boolean release)
	: ptr_ (tp),
	  poa_ (PortableServer::POA::_nil ()),
	  rel_ (release)
{}

template <class T> ACE_INLINE
POA_IR::ComponentRepository_tie<T>::ComponentRepository_tie (T *tp, PortableServer::POA_ptr poa, CORBA::Boolean release)
	: ptr_ (tp),
	  poa_ (PortableServer::POA::_duplicate (poa)),
	  rel_ (release)
{}

template <class T> ACE_INLINE
POA_IR::ComponentRepository_tie<T>::~ComponentRepository_tie (void)
{
  if (this->rel_) delete this->ptr_;
}

template <class T> ACE_INLINE T *
POA_IR::ComponentRepository_tie<T>::_tied_object (void)
{
  return this->ptr_;
}

template <class T> ACE_INLINE void
POA_IR::ComponentRepository_tie<T>::_tied_object (T &obj)
{
  if (this->rel_) delete this->ptr_;
  this->ptr_ = &obj;
  this->rel_ = 0;
}

template <class T> ACE_INLINE void
POA_IR::ComponentRepository_tie<T>::_tied_object (T *obj, CORBA::Boolean release)
{
  if (this->rel_) delete this->ptr_;
  this->ptr_ = obj;
  this->rel_ = release;
}

template <class T> ACE_INLINE CORBA::Boolean
POA_IR::ComponentRepository_tie<T>::_is_owner (void)
{
  return this->rel_;
}

template <class T> ACE_INLINE void
POA_IR::ComponentRepository_tie<T>::_is_owner (CORBA::Boolean b)
{
  this->rel_ = b;
}

template <class T> ACE_INLINE PortableServer::POA_ptr
POA_IR::ComponentRepository_tie<T>::_default_POA (CORBA::Environment &env)
{
  if (!CORBA::is_nil (this->poa_.in ()))
    return PortableServer::POA::_duplicate (this->poa_.in ());

  return this->ComponentRepository::_default_POA (env);
}

template <class T> ACE_INLINE
IR::ComponentDef_ptr POA_IR::ComponentRepository_tie<T>::create_component  (
    const char * id,
    const char * name,
    const char * version,
    IR::ComponentDef_ptr base_component,
    const IR::InterfaceDefSeq & supports_interfaces,
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->create_component (
    id,
    name,
    version,
    base_component,
    supports_interfaces,
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
IR::HomeDef_ptr POA_IR::ComponentRepository_tie<T>::create_home  (
    const char * id,
    const char * name,
    const char * version,
    IR::HomeDef_ptr base_home,
    IR::ComponentDef_ptr managed_component,
    IR::ValueDef_ptr primary_key,
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->create_home (
    id,
    name,
    version,
    base_home,
    managed_component,
    primary_key,
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
IR::Contained_ptr POA_IR::ComponentRepository_tie<T>::lookup_id  (
    const char * search_id,
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->lookup_id (
    search_id,
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
CORBA::TypeCode_ptr POA_IR::ComponentRepository_tie<T>::get_canonical_typecode  (
    CORBA::TypeCode_ptr tc,
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->get_canonical_typecode (
    tc,
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
IR::PrimitiveDef_ptr POA_IR::ComponentRepository_tie<T>::get_primitive  (
    IR::PrimitiveKind kind,
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->get_primitive (
    kind,
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
IR::StringDef_ptr POA_IR::ComponentRepository_tie<T>::create_string  (
    CORBA::ULong bound,
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->create_string (
    bound,
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
IR::WstringDef_ptr POA_IR::ComponentRepository_tie<T>::create_wstring  (
    CORBA::ULong bound,
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->create_wstring (
    bound,
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
IR::SequenceDef_ptr POA_IR::ComponentRepository_tie<T>::create_sequence  (
    CORBA::ULong bound,
    IR::IDLType_ptr element_type,
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->create_sequence (
    bound,
    element_type,
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
IR::ArrayDef_ptr POA_IR::ComponentRepository_tie<T>::create_array  (
    CORBA::ULong length,
    IR::IDLType_ptr element_type,
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->create_array (
    length,
    element_type,
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
IR::FixedDef_ptr POA_IR::ComponentRepository_tie<T>::create_fixed  (
    CORBA::UShort digits,
    CORBA::Short scale,
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->create_fixed (
    digits,
    scale,
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
IR::Contained_ptr POA_IR::ComponentRepository_tie<T>::lookup  (
    const char * search_name,
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->lookup (
    search_name,
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
IR::ContainedSeq * POA_IR::ComponentRepository_tie<T>::contents  (
    IR::DefinitionKind limit_type,
    CORBA::Boolean exclude_inherited,
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->contents (
    limit_type,
    exclude_inherited,
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
IR::ContainedSeq * POA_IR::ComponentRepository_tie<T>::lookup_name  (
    const char * search_name,
    CORBA::Long levels_to_search,
    IR::DefinitionKind limit_type,
    CORBA::Boolean exclude_inherited,
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->lookup_name (
    search_name,
    levels_to_search,
    limit_type,
    exclude_inherited,
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
IR::Container::DescriptionSeq * POA_IR::ComponentRepository_tie<T>::describe_contents  (
    IR::DefinitionKind limit_type,
    CORBA::Boolean exclude_inherited,
    CORBA::Long max_returned_objs,
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->describe_contents (
    limit_type,
    exclude_inherited,
    max_returned_objs,
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
IR::ModuleDef_ptr POA_IR::ComponentRepository_tie<T>::create_module  (
    const char * id,
    const char * name,
    const char * version,
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->create_module (
    id,
    name,
    version,
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
IR::ConstantDef_ptr POA_IR::ComponentRepository_tie<T>::create_constant  (
    const char * id,
    const char * name,
    const char * version,
    IR::IDLType_ptr type,
    const CORBA::Any & value,
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->create_constant (
    id,
    name,
    version,
    type,
    value,
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
IR::StructDef_ptr POA_IR::ComponentRepository_tie<T>::create_struct  (
    const char * id,
    const char * name,
    const char * version,
    const IR::StructMemberSeq & members,
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->create_struct (
    id,
    name,
    version,
    members,
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
IR::UnionDef_ptr POA_IR::ComponentRepository_tie<T>::create_union  (
    const char * id,
    const char * name,
    const char * version,
    IR::IDLType_ptr discriminator_type,
    const IR::UnionMemberSeq & members,
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->create_union (
    id,
    name,
    version,
    discriminator_type,
    members,
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
IR::EnumDef_ptr POA_IR::ComponentRepository_tie<T>::create_enum  (
    const char * id,
    const char * name,
    const char * version,
    const IR::EnumMemberSeq & members,
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->create_enum (
    id,
    name,
    version,
    members,
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
IR::AliasDef_ptr POA_IR::ComponentRepository_tie<T>::create_alias  (
    const char * id,
    const char * name,
    const char * version,
    IR::IDLType_ptr original_type,
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->create_alias (
    id,
    name,
    version,
    original_type,
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
IR::InterfaceDef_ptr POA_IR::ComponentRepository_tie<T>::create_interface  (
    const char * id,
    const char * name,
    const char * version,
    const IR::InterfaceDefSeq & base_interfaces,
    CORBA::Boolean is_abstract,
    CORBA::Boolean is_local,
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->create_interface (
    id,
    name,
    version,
    base_interfaces,
    is_abstract,
    is_local,
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
IR::ValueDef_ptr POA_IR::ComponentRepository_tie<T>::create_value  (
    const char * id,
    const char * name,
    const char * version,
    CORBA::Boolean is_custom,
    CORBA::Boolean is_abstract,
    IR::ValueDef_ptr base_value,
    CORBA::Boolean is_truncatable,
    const IR::ValueDefSeq & abstract_base_values,
    const IR::InterfaceDefSeq & supported_interfaces,
    const IR::InitializerSeq & initializers,
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->create_value (
    id,
    name,
    version,
    is_custom,
    is_abstract,
    base_value,
    is_truncatable,
    abstract_base_values,
    supported_interfaces,
    initializers,
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
IR::ValueBoxDef_ptr POA_IR::ComponentRepository_tie<T>::create_value_box  (
    const char * id,
    const char * name,
    const char * version,
    IR::IDLType_ptr original_type_def,
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->create_value_box (
    id,
    name,
    version,
    original_type_def,
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
IR::ExceptionDef_ptr POA_IR::ComponentRepository_tie<T>::create_exception  (
    const char * id,
    const char * name,
    const char * version,
    const IR::StructMemberSeq & members,
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->create_exception (
    id,
    name,
    version,
    members,
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
IR::NativeDef_ptr POA_IR::ComponentRepository_tie<T>::create_native  (
    const char * id,
    const char * name,
    const char * version,
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->create_native (
    id,
    name,
    version,
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
IR::DefinitionKind POA_IR::ComponentRepository_tie<T>::def_kind  (
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->def_kind (
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
void POA_IR::ComponentRepository_tie<T>::destroy  (
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  this->ptr_->destroy (
    ACE_TRY_ENV
  );
}

#endif /* ACE_HAS_USING_KEYWORD */

#if defined (ACE_HAS_USING_KEYWORD)
template <class T> ACE_INLINE
POA_IR::ModuleDef_tie<T>::ModuleDef_tie (T &t)
	: ptr_ (&t),
	  poa_ (PortableServer::POA::_nil ()),
	  rel_ (0)
{}

template <class T> ACE_INLINE
POA_IR::ModuleDef_tie<T>::ModuleDef_tie (T &t, PortableServer::POA_ptr poa)
	: ptr_ (&t),
	  poa_ (PortableServer::POA::_duplicate (poa)),
	  rel_ (0)
{}

template <class T> ACE_INLINE
POA_IR::ModuleDef_tie<T>::ModuleDef_tie (T *tp, CORBA::Boolean release)
	: ptr_ (tp),
	  poa_ (PortableServer::POA::_nil ()),
	  rel_ (release)
{}

template <class T> ACE_INLINE
POA_IR::ModuleDef_tie<T>::ModuleDef_tie (T *tp, PortableServer::POA_ptr poa, CORBA::Boolean release)
	: ptr_ (tp),
	  poa_ (PortableServer::POA::_duplicate (poa)),
	  rel_ (release)
{}

template <class T> ACE_INLINE
POA_IR::ModuleDef_tie<T>::~ModuleDef_tie (void)
{
  if (this->rel_) delete this->ptr_;
}

template <class T> ACE_INLINE T *
POA_IR::ModuleDef_tie<T>::_tied_object (void)
{
  return this->ptr_;
}

template <class T> ACE_INLINE void
POA_IR::ModuleDef_tie<T>::_tied_object (T &obj)
{
  if (this->rel_) delete this->ptr_;
  this->ptr_ = &obj;
  this->rel_ = 0;
}

template <class T> ACE_INLINE void
POA_IR::ModuleDef_tie<T>::_tied_object (T *obj, CORBA::Boolean release)
{
  if (this->rel_) delete this->ptr_;
  this->ptr_ = obj;
  this->rel_ = release;
}

template <class T> ACE_INLINE CORBA::Boolean
POA_IR::ModuleDef_tie<T>::_is_owner (void)
{
  return this->rel_;
}

template <class T> ACE_INLINE void
POA_IR::ModuleDef_tie<T>::_is_owner (CORBA::Boolean b)
{
  this->rel_ = b;
}

template <class T> ACE_INLINE PortableServer::POA_ptr
POA_IR::ModuleDef_tie<T>::_default_POA (CORBA::Environment &env)
{
  if (!CORBA::is_nil (this->poa_.in ()))
    return PortableServer::POA::_duplicate (this->poa_.in ());

  return this->ModuleDef::_default_POA (env);
}

template <class T> ACE_INLINE
IR::Contained_ptr POA_IR::ModuleDef_tie<T>::lookup  (
    const char * search_name,
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->lookup (
    search_name,
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
IR::ContainedSeq * POA_IR::ModuleDef_tie<T>::contents  (
    IR::DefinitionKind limit_type,
    CORBA::Boolean exclude_inherited,
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->contents (
    limit_type,
    exclude_inherited,
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
IR::ContainedSeq * POA_IR::ModuleDef_tie<T>::lookup_name  (
    const char * search_name,
    CORBA::Long levels_to_search,
    IR::DefinitionKind limit_type,
    CORBA::Boolean exclude_inherited,
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->lookup_name (
    search_name,
    levels_to_search,
    limit_type,
    exclude_inherited,
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
IR::Container::DescriptionSeq * POA_IR::ModuleDef_tie<T>::describe_contents  (
    IR::DefinitionKind limit_type,
    CORBA::Boolean exclude_inherited,
    CORBA::Long max_returned_objs,
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->describe_contents (
    limit_type,
    exclude_inherited,
    max_returned_objs,
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
IR::ModuleDef_ptr POA_IR::ModuleDef_tie<T>::create_module  (
    const char * id,
    const char * name,
    const char * version,
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->create_module (
    id,
    name,
    version,
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
IR::ConstantDef_ptr POA_IR::ModuleDef_tie<T>::create_constant  (
    const char * id,
    const char * name,
    const char * version,
    IR::IDLType_ptr type,
    const CORBA::Any & value,
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->create_constant (
    id,
    name,
    version,
    type,
    value,
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
IR::StructDef_ptr POA_IR::ModuleDef_tie<T>::create_struct  (
    const char * id,
    const char * name,
    const char * version,
    const IR::StructMemberSeq & members,
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->create_struct (
    id,
    name,
    version,
    members,
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
IR::UnionDef_ptr POA_IR::ModuleDef_tie<T>::create_union  (
    const char * id,
    const char * name,
    const char * version,
    IR::IDLType_ptr discriminator_type,
    const IR::UnionMemberSeq & members,
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->create_union (
    id,
    name,
    version,
    discriminator_type,
    members,
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
IR::EnumDef_ptr POA_IR::ModuleDef_tie<T>::create_enum  (
    const char * id,
    const char * name,
    const char * version,
    const IR::EnumMemberSeq & members,
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->create_enum (
    id,
    name,
    version,
    members,
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
IR::AliasDef_ptr POA_IR::ModuleDef_tie<T>::create_alias  (
    const char * id,
    const char * name,
    const char * version,
    IR::IDLType_ptr original_type,
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->create_alias (
    id,
    name,
    version,
    original_type,
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
IR::InterfaceDef_ptr POA_IR::ModuleDef_tie<T>::create_interface  (
    const char * id,
    const char * name,
    const char * version,
    const IR::InterfaceDefSeq & base_interfaces,
    CORBA::Boolean is_abstract,
    CORBA::Boolean is_local,
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->create_interface (
    id,
    name,
    version,
    base_interfaces,
    is_abstract,
    is_local,
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
IR::ValueDef_ptr POA_IR::ModuleDef_tie<T>::create_value  (
    const char * id,
    const char * name,
    const char * version,
    CORBA::Boolean is_custom,
    CORBA::Boolean is_abstract,
    IR::ValueDef_ptr base_value,
    CORBA::Boolean is_truncatable,
    const IR::ValueDefSeq & abstract_base_values,
    const IR::InterfaceDefSeq & supported_interfaces,
    const IR::InitializerSeq & initializers,
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->create_value (
    id,
    name,
    version,
    is_custom,
    is_abstract,
    base_value,
    is_truncatable,
    abstract_base_values,
    supported_interfaces,
    initializers,
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
IR::ValueBoxDef_ptr POA_IR::ModuleDef_tie<T>::create_value_box  (
    const char * id,
    const char * name,
    const char * version,
    IR::IDLType_ptr original_type_def,
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->create_value_box (
    id,
    name,
    version,
    original_type_def,
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
IR::ExceptionDef_ptr POA_IR::ModuleDef_tie<T>::create_exception  (
    const char * id,
    const char * name,
    const char * version,
    const IR::StructMemberSeq & members,
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->create_exception (
    id,
    name,
    version,
    members,
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
IR::NativeDef_ptr POA_IR::ModuleDef_tie<T>::create_native  (
    const char * id,
    const char * name,
    const char * version,
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->create_native (
    id,
    name,
    version,
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
char * POA_IR::ModuleDef_tie<T>::id  (
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->id (
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
void POA_IR::ModuleDef_tie<T>::id  (
    const char * id,
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  this->ptr_->id (
    id,
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
char * POA_IR::ModuleDef_tie<T>::name  (
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->name (
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
void POA_IR::ModuleDef_tie<T>::name  (
    const char * name,
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  this->ptr_->name (
    name,
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
char * POA_IR::ModuleDef_tie<T>::version  (
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->version (
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
void POA_IR::ModuleDef_tie<T>::version  (
    const char * version,
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  this->ptr_->version (
    version,
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
IR::Container_ptr POA_IR::ModuleDef_tie<T>::defined_in  (
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->defined_in (
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
char * POA_IR::ModuleDef_tie<T>::absolute_name  (
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->absolute_name (
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
IR::Repository_ptr POA_IR::ModuleDef_tie<T>::containing_repository  (
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->containing_repository (
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
IR::Contained::Description * POA_IR::ModuleDef_tie<T>::describe  (
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->describe (
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
void POA_IR::ModuleDef_tie<T>::move  (
    IR::Container_ptr new_container,
    const char * new_name,
    const char * new_version,
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  this->ptr_->move (
    new_container,
    new_name,
    new_version,
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
IR::DefinitionKind POA_IR::ModuleDef_tie<T>::def_kind  (
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->def_kind (
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
void POA_IR::ModuleDef_tie<T>::destroy  (
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  this->ptr_->destroy (
    ACE_TRY_ENV
  );
}

#endif /* ACE_HAS_USING_KEYWORD */

#if defined (ACE_HAS_USING_KEYWORD)
template <class T> ACE_INLINE
POA_IR::ConstantDef_tie<T>::ConstantDef_tie (T &t)
	: ptr_ (&t),
	  poa_ (PortableServer::POA::_nil ()),
	  rel_ (0)
{}

template <class T> ACE_INLINE
POA_IR::ConstantDef_tie<T>::ConstantDef_tie (T &t, PortableServer::POA_ptr poa)
	: ptr_ (&t),
	  poa_ (PortableServer::POA::_duplicate (poa)),
	  rel_ (0)
{}

template <class T> ACE_INLINE
POA_IR::ConstantDef_tie<T>::ConstantDef_tie (T *tp, CORBA::Boolean release)
	: ptr_ (tp),
	  poa_ (PortableServer::POA::_nil ()),
	  rel_ (release)
{}

template <class T> ACE_INLINE
POA_IR::ConstantDef_tie<T>::ConstantDef_tie (T *tp, PortableServer::POA_ptr poa, CORBA::Boolean release)
	: ptr_ (tp),
	  poa_ (PortableServer::POA::_duplicate (poa)),
	  rel_ (release)
{}

template <class T> ACE_INLINE
POA_IR::ConstantDef_tie<T>::~ConstantDef_tie (void)
{
  if (this->rel_) delete this->ptr_;
}

template <class T> ACE_INLINE T *
POA_IR::ConstantDef_tie<T>::_tied_object (void)
{
  return this->ptr_;
}

template <class T> ACE_INLINE void
POA_IR::ConstantDef_tie<T>::_tied_object (T &obj)
{
  if (this->rel_) delete this->ptr_;
  this->ptr_ = &obj;
  this->rel_ = 0;
}

template <class T> ACE_INLINE void
POA_IR::ConstantDef_tie<T>::_tied_object (T *obj, CORBA::Boolean release)
{
  if (this->rel_) delete this->ptr_;
  this->ptr_ = obj;
  this->rel_ = release;
}

template <class T> ACE_INLINE CORBA::Boolean
POA_IR::ConstantDef_tie<T>::_is_owner (void)
{
  return this->rel_;
}

template <class T> ACE_INLINE void
POA_IR::ConstantDef_tie<T>::_is_owner (CORBA::Boolean b)
{
  this->rel_ = b;
}

template <class T> ACE_INLINE PortableServer::POA_ptr
POA_IR::ConstantDef_tie<T>::_default_POA (CORBA::Environment &env)
{
  if (!CORBA::is_nil (this->poa_.in ()))
    return PortableServer::POA::_duplicate (this->poa_.in ());

  return this->ConstantDef::_default_POA (env);
}

template <class T> ACE_INLINE
CORBA::TypeCode_ptr POA_IR::ConstantDef_tie<T>::type  (
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->type (
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
IR::IDLType_ptr POA_IR::ConstantDef_tie<T>::type_def  (
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->type_def (
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
void POA_IR::ConstantDef_tie<T>::type_def  (
    IR::IDLType_ptr type_def,
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  this->ptr_->type_def (
    type_def,
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
CORBA::Any * POA_IR::ConstantDef_tie<T>::value  (
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->value (
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
void POA_IR::ConstantDef_tie<T>::value  (
    const CORBA::Any & value,
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  this->ptr_->value (
    value,
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
char * POA_IR::ConstantDef_tie<T>::id  (
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->id (
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
void POA_IR::ConstantDef_tie<T>::id  (
    const char * id,
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  this->ptr_->id (
    id,
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
char * POA_IR::ConstantDef_tie<T>::name  (
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->name (
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
void POA_IR::ConstantDef_tie<T>::name  (
    const char * name,
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  this->ptr_->name (
    name,
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
char * POA_IR::ConstantDef_tie<T>::version  (
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->version (
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
void POA_IR::ConstantDef_tie<T>::version  (
    const char * version,
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  this->ptr_->version (
    version,
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
IR::Container_ptr POA_IR::ConstantDef_tie<T>::defined_in  (
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->defined_in (
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
char * POA_IR::ConstantDef_tie<T>::absolute_name  (
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->absolute_name (
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
IR::Repository_ptr POA_IR::ConstantDef_tie<T>::containing_repository  (
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->containing_repository (
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
IR::Contained::Description * POA_IR::ConstantDef_tie<T>::describe  (
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->describe (
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
void POA_IR::ConstantDef_tie<T>::move  (
    IR::Container_ptr new_container,
    const char * new_name,
    const char * new_version,
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  this->ptr_->move (
    new_container,
    new_name,
    new_version,
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
IR::DefinitionKind POA_IR::ConstantDef_tie<T>::def_kind  (
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->def_kind (
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
void POA_IR::ConstantDef_tie<T>::destroy  (
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  this->ptr_->destroy (
    ACE_TRY_ENV
  );
}

#endif /* ACE_HAS_USING_KEYWORD */

#if defined (ACE_HAS_USING_KEYWORD)
template <class T> ACE_INLINE
POA_IR::TypedefDef_tie<T>::TypedefDef_tie (T &t)
	: ptr_ (&t),
	  poa_ (PortableServer::POA::_nil ()),
	  rel_ (0)
{}

template <class T> ACE_INLINE
POA_IR::TypedefDef_tie<T>::TypedefDef_tie (T &t, PortableServer::POA_ptr poa)
	: ptr_ (&t),
	  poa_ (PortableServer::POA::_duplicate (poa)),
	  rel_ (0)
{}

template <class T> ACE_INLINE
POA_IR::TypedefDef_tie<T>::TypedefDef_tie (T *tp, CORBA::Boolean release)
	: ptr_ (tp),
	  poa_ (PortableServer::POA::_nil ()),
	  rel_ (release)
{}

template <class T> ACE_INLINE
POA_IR::TypedefDef_tie<T>::TypedefDef_tie (T *tp, PortableServer::POA_ptr poa, CORBA::Boolean release)
	: ptr_ (tp),
	  poa_ (PortableServer::POA::_duplicate (poa)),
	  rel_ (release)
{}

template <class T> ACE_INLINE
POA_IR::TypedefDef_tie<T>::~TypedefDef_tie (void)
{
  if (this->rel_) delete this->ptr_;
}

template <class T> ACE_INLINE T *
POA_IR::TypedefDef_tie<T>::_tied_object (void)
{
  return this->ptr_;
}

template <class T> ACE_INLINE void
POA_IR::TypedefDef_tie<T>::_tied_object (T &obj)
{
  if (this->rel_) delete this->ptr_;
  this->ptr_ = &obj;
  this->rel_ = 0;
}

template <class T> ACE_INLINE void
POA_IR::TypedefDef_tie<T>::_tied_object (T *obj, CORBA::Boolean release)
{
  if (this->rel_) delete this->ptr_;
  this->ptr_ = obj;
  this->rel_ = release;
}

template <class T> ACE_INLINE CORBA::Boolean
POA_IR::TypedefDef_tie<T>::_is_owner (void)
{
  return this->rel_;
}

template <class T> ACE_INLINE void
POA_IR::TypedefDef_tie<T>::_is_owner (CORBA::Boolean b)
{
  this->rel_ = b;
}

template <class T> ACE_INLINE PortableServer::POA_ptr
POA_IR::TypedefDef_tie<T>::_default_POA (CORBA::Environment &env)
{
  if (!CORBA::is_nil (this->poa_.in ()))
    return PortableServer::POA::_duplicate (this->poa_.in ());

  return this->TypedefDef::_default_POA (env);
}

template <class T> ACE_INLINE
char * POA_IR::TypedefDef_tie<T>::id  (
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->id (
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
void POA_IR::TypedefDef_tie<T>::id  (
    const char * id,
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  this->ptr_->id (
    id,
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
char * POA_IR::TypedefDef_tie<T>::name  (
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->name (
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
void POA_IR::TypedefDef_tie<T>::name  (
    const char * name,
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  this->ptr_->name (
    name,
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
char * POA_IR::TypedefDef_tie<T>::version  (
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->version (
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
void POA_IR::TypedefDef_tie<T>::version  (
    const char * version,
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  this->ptr_->version (
    version,
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
IR::Container_ptr POA_IR::TypedefDef_tie<T>::defined_in  (
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->defined_in (
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
char * POA_IR::TypedefDef_tie<T>::absolute_name  (
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->absolute_name (
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
IR::Repository_ptr POA_IR::TypedefDef_tie<T>::containing_repository  (
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->containing_repository (
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
IR::Contained::Description * POA_IR::TypedefDef_tie<T>::describe  (
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->describe (
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
void POA_IR::TypedefDef_tie<T>::move  (
    IR::Container_ptr new_container,
    const char * new_name,
    const char * new_version,
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  this->ptr_->move (
    new_container,
    new_name,
    new_version,
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
CORBA::TypeCode_ptr POA_IR::TypedefDef_tie<T>::type  (
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->type (
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
IR::DefinitionKind POA_IR::TypedefDef_tie<T>::def_kind  (
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->def_kind (
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
void POA_IR::TypedefDef_tie<T>::destroy  (
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  this->ptr_->destroy (
    ACE_TRY_ENV
  );
}

#endif /* ACE_HAS_USING_KEYWORD */

#if defined (ACE_HAS_USING_KEYWORD)
template <class T> ACE_INLINE
POA_IR::StructDef_tie<T>::StructDef_tie (T &t)
	: ptr_ (&t),
	  poa_ (PortableServer::POA::_nil ()),
	  rel_ (0)
{}

template <class T> ACE_INLINE
POA_IR::StructDef_tie<T>::StructDef_tie (T &t, PortableServer::POA_ptr poa)
	: ptr_ (&t),
	  poa_ (PortableServer::POA::_duplicate (poa)),
	  rel_ (0)
{}

template <class T> ACE_INLINE
POA_IR::StructDef_tie<T>::StructDef_tie (T *tp, CORBA::Boolean release)
	: ptr_ (tp),
	  poa_ (PortableServer::POA::_nil ()),
	  rel_ (release)
{}

template <class T> ACE_INLINE
POA_IR::StructDef_tie<T>::StructDef_tie (T *tp, PortableServer::POA_ptr poa, CORBA::Boolean release)
	: ptr_ (tp),
	  poa_ (PortableServer::POA::_duplicate (poa)),
	  rel_ (release)
{}

template <class T> ACE_INLINE
POA_IR::StructDef_tie<T>::~StructDef_tie (void)
{
  if (this->rel_) delete this->ptr_;
}

template <class T> ACE_INLINE T *
POA_IR::StructDef_tie<T>::_tied_object (void)
{
  return this->ptr_;
}

template <class T> ACE_INLINE void
POA_IR::StructDef_tie<T>::_tied_object (T &obj)
{
  if (this->rel_) delete this->ptr_;
  this->ptr_ = &obj;
  this->rel_ = 0;
}

template <class T> ACE_INLINE void
POA_IR::StructDef_tie<T>::_tied_object (T *obj, CORBA::Boolean release)
{
  if (this->rel_) delete this->ptr_;
  this->ptr_ = obj;
  this->rel_ = release;
}

template <class T> ACE_INLINE CORBA::Boolean
POA_IR::StructDef_tie<T>::_is_owner (void)
{
  return this->rel_;
}

template <class T> ACE_INLINE void
POA_IR::StructDef_tie<T>::_is_owner (CORBA::Boolean b)
{
  this->rel_ = b;
}

template <class T> ACE_INLINE PortableServer::POA_ptr
POA_IR::StructDef_tie<T>::_default_POA (CORBA::Environment &env)
{
  if (!CORBA::is_nil (this->poa_.in ()))
    return PortableServer::POA::_duplicate (this->poa_.in ());

  return this->StructDef::_default_POA (env);
}

template <class T> ACE_INLINE
IR::StructMemberSeq * POA_IR::StructDef_tie<T>::members  (
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->members (
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
void POA_IR::StructDef_tie<T>::members  (
    const IR::StructMemberSeq & members,
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  this->ptr_->members (
    members,
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
IR::Contained_ptr POA_IR::StructDef_tie<T>::lookup  (
    const char * search_name,
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->lookup (
    search_name,
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
IR::ContainedSeq * POA_IR::StructDef_tie<T>::contents  (
    IR::DefinitionKind limit_type,
    CORBA::Boolean exclude_inherited,
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->contents (
    limit_type,
    exclude_inherited,
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
IR::ContainedSeq * POA_IR::StructDef_tie<T>::lookup_name  (
    const char * search_name,
    CORBA::Long levels_to_search,
    IR::DefinitionKind limit_type,
    CORBA::Boolean exclude_inherited,
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->lookup_name (
    search_name,
    levels_to_search,
    limit_type,
    exclude_inherited,
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
IR::Container::DescriptionSeq * POA_IR::StructDef_tie<T>::describe_contents  (
    IR::DefinitionKind limit_type,
    CORBA::Boolean exclude_inherited,
    CORBA::Long max_returned_objs,
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->describe_contents (
    limit_type,
    exclude_inherited,
    max_returned_objs,
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
IR::ModuleDef_ptr POA_IR::StructDef_tie<T>::create_module  (
    const char * id,
    const char * name,
    const char * version,
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->create_module (
    id,
    name,
    version,
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
IR::ConstantDef_ptr POA_IR::StructDef_tie<T>::create_constant  (
    const char * id,
    const char * name,
    const char * version,
    IR::IDLType_ptr type,
    const CORBA::Any & value,
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->create_constant (
    id,
    name,
    version,
    type,
    value,
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
IR::StructDef_ptr POA_IR::StructDef_tie<T>::create_struct  (
    const char * id,
    const char * name,
    const char * version,
    const IR::StructMemberSeq & members,
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->create_struct (
    id,
    name,
    version,
    members,
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
IR::UnionDef_ptr POA_IR::StructDef_tie<T>::create_union  (
    const char * id,
    const char * name,
    const char * version,
    IR::IDLType_ptr discriminator_type,
    const IR::UnionMemberSeq & members,
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->create_union (
    id,
    name,
    version,
    discriminator_type,
    members,
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
IR::EnumDef_ptr POA_IR::StructDef_tie<T>::create_enum  (
    const char * id,
    const char * name,
    const char * version,
    const IR::EnumMemberSeq & members,
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->create_enum (
    id,
    name,
    version,
    members,
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
IR::AliasDef_ptr POA_IR::StructDef_tie<T>::create_alias  (
    const char * id,
    const char * name,
    const char * version,
    IR::IDLType_ptr original_type,
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->create_alias (
    id,
    name,
    version,
    original_type,
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
IR::InterfaceDef_ptr POA_IR::StructDef_tie<T>::create_interface  (
    const char * id,
    const char * name,
    const char * version,
    const IR::InterfaceDefSeq & base_interfaces,
    CORBA::Boolean is_abstract,
    CORBA::Boolean is_local,
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->create_interface (
    id,
    name,
    version,
    base_interfaces,
    is_abstract,
    is_local,
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
IR::ValueDef_ptr POA_IR::StructDef_tie<T>::create_value  (
    const char * id,
    const char * name,
    const char * version,
    CORBA::Boolean is_custom,
    CORBA::Boolean is_abstract,
    IR::ValueDef_ptr base_value,
    CORBA::Boolean is_truncatable,
    const IR::ValueDefSeq & abstract_base_values,
    const IR::InterfaceDefSeq & supported_interfaces,
    const IR::InitializerSeq & initializers,
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->create_value (
    id,
    name,
    version,
    is_custom,
    is_abstract,
    base_value,
    is_truncatable,
    abstract_base_values,
    supported_interfaces,
    initializers,
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
IR::ValueBoxDef_ptr POA_IR::StructDef_tie<T>::create_value_box  (
    const char * id,
    const char * name,
    const char * version,
    IR::IDLType_ptr original_type_def,
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->create_value_box (
    id,
    name,
    version,
    original_type_def,
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
IR::ExceptionDef_ptr POA_IR::StructDef_tie<T>::create_exception  (
    const char * id,
    const char * name,
    const char * version,
    const IR::StructMemberSeq & members,
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->create_exception (
    id,
    name,
    version,
    members,
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
IR::NativeDef_ptr POA_IR::StructDef_tie<T>::create_native  (
    const char * id,
    const char * name,
    const char * version,
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->create_native (
    id,
    name,
    version,
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
char * POA_IR::StructDef_tie<T>::id  (
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->id (
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
void POA_IR::StructDef_tie<T>::id  (
    const char * id,
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  this->ptr_->id (
    id,
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
char * POA_IR::StructDef_tie<T>::name  (
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->name (
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
void POA_IR::StructDef_tie<T>::name  (
    const char * name,
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  this->ptr_->name (
    name,
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
char * POA_IR::StructDef_tie<T>::version  (
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->version (
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
void POA_IR::StructDef_tie<T>::version  (
    const char * version,
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  this->ptr_->version (
    version,
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
IR::Container_ptr POA_IR::StructDef_tie<T>::defined_in  (
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->defined_in (
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
char * POA_IR::StructDef_tie<T>::absolute_name  (
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->absolute_name (
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
IR::Repository_ptr POA_IR::StructDef_tie<T>::containing_repository  (
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->containing_repository (
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
IR::Contained::Description * POA_IR::StructDef_tie<T>::describe  (
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->describe (
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
void POA_IR::StructDef_tie<T>::move  (
    IR::Container_ptr new_container,
    const char * new_name,
    const char * new_version,
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  this->ptr_->move (
    new_container,
    new_name,
    new_version,
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
CORBA::TypeCode_ptr POA_IR::StructDef_tie<T>::type  (
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->type (
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
IR::DefinitionKind POA_IR::StructDef_tie<T>::def_kind  (
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->def_kind (
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
void POA_IR::StructDef_tie<T>::destroy  (
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  this->ptr_->destroy (
    ACE_TRY_ENV
  );
}

#endif /* ACE_HAS_USING_KEYWORD */

#if defined (ACE_HAS_USING_KEYWORD)
template <class T> ACE_INLINE
POA_IR::UnionDef_tie<T>::UnionDef_tie (T &t)
	: ptr_ (&t),
	  poa_ (PortableServer::POA::_nil ()),
	  rel_ (0)
{}

template <class T> ACE_INLINE
POA_IR::UnionDef_tie<T>::UnionDef_tie (T &t, PortableServer::POA_ptr poa)
	: ptr_ (&t),
	  poa_ (PortableServer::POA::_duplicate (poa)),
	  rel_ (0)
{}

template <class T> ACE_INLINE
POA_IR::UnionDef_tie<T>::UnionDef_tie (T *tp, CORBA::Boolean release)
	: ptr_ (tp),
	  poa_ (PortableServer::POA::_nil ()),
	  rel_ (release)
{}

template <class T> ACE_INLINE
POA_IR::UnionDef_tie<T>::UnionDef_tie (T *tp, PortableServer::POA_ptr poa, CORBA::Boolean release)
	: ptr_ (tp),
	  poa_ (PortableServer::POA::_duplicate (poa)),
	  rel_ (release)
{}

template <class T> ACE_INLINE
POA_IR::UnionDef_tie<T>::~UnionDef_tie (void)
{
  if (this->rel_) delete this->ptr_;
}

template <class T> ACE_INLINE T *
POA_IR::UnionDef_tie<T>::_tied_object (void)
{
  return this->ptr_;
}

template <class T> ACE_INLINE void
POA_IR::UnionDef_tie<T>::_tied_object (T &obj)
{
  if (this->rel_) delete this->ptr_;
  this->ptr_ = &obj;
  this->rel_ = 0;
}

template <class T> ACE_INLINE void
POA_IR::UnionDef_tie<T>::_tied_object (T *obj, CORBA::Boolean release)
{
  if (this->rel_) delete this->ptr_;
  this->ptr_ = obj;
  this->rel_ = release;
}

template <class T> ACE_INLINE CORBA::Boolean
POA_IR::UnionDef_tie<T>::_is_owner (void)
{
  return this->rel_;
}

template <class T> ACE_INLINE void
POA_IR::UnionDef_tie<T>::_is_owner (CORBA::Boolean b)
{
  this->rel_ = b;
}

template <class T> ACE_INLINE PortableServer::POA_ptr
POA_IR::UnionDef_tie<T>::_default_POA (CORBA::Environment &env)
{
  if (!CORBA::is_nil (this->poa_.in ()))
    return PortableServer::POA::_duplicate (this->poa_.in ());

  return this->UnionDef::_default_POA (env);
}

template <class T> ACE_INLINE
CORBA::TypeCode_ptr POA_IR::UnionDef_tie<T>::discriminator_type  (
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->discriminator_type (
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
IR::IDLType_ptr POA_IR::UnionDef_tie<T>::discriminator_type_def  (
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->discriminator_type_def (
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
void POA_IR::UnionDef_tie<T>::discriminator_type_def  (
    IR::IDLType_ptr discriminator_type_def,
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  this->ptr_->discriminator_type_def (
    discriminator_type_def,
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
IR::UnionMemberSeq * POA_IR::UnionDef_tie<T>::members  (
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->members (
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
void POA_IR::UnionDef_tie<T>::members  (
    const IR::UnionMemberSeq & members,
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  this->ptr_->members (
    members,
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
IR::Contained_ptr POA_IR::UnionDef_tie<T>::lookup  (
    const char * search_name,
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->lookup (
    search_name,
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
IR::ContainedSeq * POA_IR::UnionDef_tie<T>::contents  (
    IR::DefinitionKind limit_type,
    CORBA::Boolean exclude_inherited,
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->contents (
    limit_type,
    exclude_inherited,
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
IR::ContainedSeq * POA_IR::UnionDef_tie<T>::lookup_name  (
    const char * search_name,
    CORBA::Long levels_to_search,
    IR::DefinitionKind limit_type,
    CORBA::Boolean exclude_inherited,
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->lookup_name (
    search_name,
    levels_to_search,
    limit_type,
    exclude_inherited,
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
IR::Container::DescriptionSeq * POA_IR::UnionDef_tie<T>::describe_contents  (
    IR::DefinitionKind limit_type,
    CORBA::Boolean exclude_inherited,
    CORBA::Long max_returned_objs,
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->describe_contents (
    limit_type,
    exclude_inherited,
    max_returned_objs,
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
IR::ModuleDef_ptr POA_IR::UnionDef_tie<T>::create_module  (
    const char * id,
    const char * name,
    const char * version,
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->create_module (
    id,
    name,
    version,
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
IR::ConstantDef_ptr POA_IR::UnionDef_tie<T>::create_constant  (
    const char * id,
    const char * name,
    const char * version,
    IR::IDLType_ptr type,
    const CORBA::Any & value,
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->create_constant (
    id,
    name,
    version,
    type,
    value,
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
IR::StructDef_ptr POA_IR::UnionDef_tie<T>::create_struct  (
    const char * id,
    const char * name,
    const char * version,
    const IR::StructMemberSeq & members,
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->create_struct (
    id,
    name,
    version,
    members,
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
IR::UnionDef_ptr POA_IR::UnionDef_tie<T>::create_union  (
    const char * id,
    const char * name,
    const char * version,
    IR::IDLType_ptr discriminator_type,
    const IR::UnionMemberSeq & members,
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->create_union (
    id,
    name,
    version,
    discriminator_type,
    members,
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
IR::EnumDef_ptr POA_IR::UnionDef_tie<T>::create_enum  (
    const char * id,
    const char * name,
    const char * version,
    const IR::EnumMemberSeq & members,
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->create_enum (
    id,
    name,
    version,
    members,
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
IR::AliasDef_ptr POA_IR::UnionDef_tie<T>::create_alias  (
    const char * id,
    const char * name,
    const char * version,
    IR::IDLType_ptr original_type,
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->create_alias (
    id,
    name,
    version,
    original_type,
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
IR::InterfaceDef_ptr POA_IR::UnionDef_tie<T>::create_interface  (
    const char * id,
    const char * name,
    const char * version,
    const IR::InterfaceDefSeq & base_interfaces,
    CORBA::Boolean is_abstract,
    CORBA::Boolean is_local,
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->create_interface (
    id,
    name,
    version,
    base_interfaces,
    is_abstract,
    is_local,
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
IR::ValueDef_ptr POA_IR::UnionDef_tie<T>::create_value  (
    const char * id,
    const char * name,
    const char * version,
    CORBA::Boolean is_custom,
    CORBA::Boolean is_abstract,
    IR::ValueDef_ptr base_value,
    CORBA::Boolean is_truncatable,
    const IR::ValueDefSeq & abstract_base_values,
    const IR::InterfaceDefSeq & supported_interfaces,
    const IR::InitializerSeq & initializers,
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->create_value (
    id,
    name,
    version,
    is_custom,
    is_abstract,
    base_value,
    is_truncatable,
    abstract_base_values,
    supported_interfaces,
    initializers,
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
IR::ValueBoxDef_ptr POA_IR::UnionDef_tie<T>::create_value_box  (
    const char * id,
    const char * name,
    const char * version,
    IR::IDLType_ptr original_type_def,
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->create_value_box (
    id,
    name,
    version,
    original_type_def,
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
IR::ExceptionDef_ptr POA_IR::UnionDef_tie<T>::create_exception  (
    const char * id,
    const char * name,
    const char * version,
    const IR::StructMemberSeq & members,
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->create_exception (
    id,
    name,
    version,
    members,
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
IR::NativeDef_ptr POA_IR::UnionDef_tie<T>::create_native  (
    const char * id,
    const char * name,
    const char * version,
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->create_native (
    id,
    name,
    version,
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
char * POA_IR::UnionDef_tie<T>::id  (
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->id (
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
void POA_IR::UnionDef_tie<T>::id  (
    const char * id,
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  this->ptr_->id (
    id,
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
char * POA_IR::UnionDef_tie<T>::name  (
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->name (
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
void POA_IR::UnionDef_tie<T>::name  (
    const char * name,
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  this->ptr_->name (
    name,
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
char * POA_IR::UnionDef_tie<T>::version  (
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->version (
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
void POA_IR::UnionDef_tie<T>::version  (
    const char * version,
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  this->ptr_->version (
    version,
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
IR::Container_ptr POA_IR::UnionDef_tie<T>::defined_in  (
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->defined_in (
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
char * POA_IR::UnionDef_tie<T>::absolute_name  (
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->absolute_name (
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
IR::Repository_ptr POA_IR::UnionDef_tie<T>::containing_repository  (
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->containing_repository (
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
IR::Contained::Description * POA_IR::UnionDef_tie<T>::describe  (
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->describe (
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
void POA_IR::UnionDef_tie<T>::move  (
    IR::Container_ptr new_container,
    const char * new_name,
    const char * new_version,
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  this->ptr_->move (
    new_container,
    new_name,
    new_version,
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
CORBA::TypeCode_ptr POA_IR::UnionDef_tie<T>::type  (
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->type (
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
IR::DefinitionKind POA_IR::UnionDef_tie<T>::def_kind  (
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->def_kind (
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
void POA_IR::UnionDef_tie<T>::destroy  (
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  this->ptr_->destroy (
    ACE_TRY_ENV
  );
}

#endif /* ACE_HAS_USING_KEYWORD */

#if defined (ACE_HAS_USING_KEYWORD)
template <class T> ACE_INLINE
POA_IR::EnumDef_tie<T>::EnumDef_tie (T &t)
	: ptr_ (&t),
	  poa_ (PortableServer::POA::_nil ()),
	  rel_ (0)
{}

template <class T> ACE_INLINE
POA_IR::EnumDef_tie<T>::EnumDef_tie (T &t, PortableServer::POA_ptr poa)
	: ptr_ (&t),
	  poa_ (PortableServer::POA::_duplicate (poa)),
	  rel_ (0)
{}

template <class T> ACE_INLINE
POA_IR::EnumDef_tie<T>::EnumDef_tie (T *tp, CORBA::Boolean release)
	: ptr_ (tp),
	  poa_ (PortableServer::POA::_nil ()),
	  rel_ (release)
{}

template <class T> ACE_INLINE
POA_IR::EnumDef_tie<T>::EnumDef_tie (T *tp, PortableServer::POA_ptr poa, CORBA::Boolean release)
	: ptr_ (tp),
	  poa_ (PortableServer::POA::_duplicate (poa)),
	  rel_ (release)
{}

template <class T> ACE_INLINE
POA_IR::EnumDef_tie<T>::~EnumDef_tie (void)
{
  if (this->rel_) delete this->ptr_;
}

template <class T> ACE_INLINE T *
POA_IR::EnumDef_tie<T>::_tied_object (void)
{
  return this->ptr_;
}

template <class T> ACE_INLINE void
POA_IR::EnumDef_tie<T>::_tied_object (T &obj)
{
  if (this->rel_) delete this->ptr_;
  this->ptr_ = &obj;
  this->rel_ = 0;
}

template <class T> ACE_INLINE void
POA_IR::EnumDef_tie<T>::_tied_object (T *obj, CORBA::Boolean release)
{
  if (this->rel_) delete this->ptr_;
  this->ptr_ = obj;
  this->rel_ = release;
}

template <class T> ACE_INLINE CORBA::Boolean
POA_IR::EnumDef_tie<T>::_is_owner (void)
{
  return this->rel_;
}

template <class T> ACE_INLINE void
POA_IR::EnumDef_tie<T>::_is_owner (CORBA::Boolean b)
{
  this->rel_ = b;
}

template <class T> ACE_INLINE PortableServer::POA_ptr
POA_IR::EnumDef_tie<T>::_default_POA (CORBA::Environment &env)
{
  if (!CORBA::is_nil (this->poa_.in ()))
    return PortableServer::POA::_duplicate (this->poa_.in ());

  return this->EnumDef::_default_POA (env);
}

template <class T> ACE_INLINE
IR::EnumMemberSeq * POA_IR::EnumDef_tie<T>::members  (
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->members (
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
void POA_IR::EnumDef_tie<T>::members  (
    const IR::EnumMemberSeq & members,
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  this->ptr_->members (
    members,
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
char * POA_IR::EnumDef_tie<T>::id  (
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->id (
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
void POA_IR::EnumDef_tie<T>::id  (
    const char * id,
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  this->ptr_->id (
    id,
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
char * POA_IR::EnumDef_tie<T>::name  (
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->name (
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
void POA_IR::EnumDef_tie<T>::name  (
    const char * name,
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  this->ptr_->name (
    name,
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
char * POA_IR::EnumDef_tie<T>::version  (
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->version (
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
void POA_IR::EnumDef_tie<T>::version  (
    const char * version,
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  this->ptr_->version (
    version,
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
IR::Container_ptr POA_IR::EnumDef_tie<T>::defined_in  (
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->defined_in (
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
char * POA_IR::EnumDef_tie<T>::absolute_name  (
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->absolute_name (
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
IR::Repository_ptr POA_IR::EnumDef_tie<T>::containing_repository  (
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->containing_repository (
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
IR::Contained::Description * POA_IR::EnumDef_tie<T>::describe  (
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->describe (
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
void POA_IR::EnumDef_tie<T>::move  (
    IR::Container_ptr new_container,
    const char * new_name,
    const char * new_version,
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  this->ptr_->move (
    new_container,
    new_name,
    new_version,
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
CORBA::TypeCode_ptr POA_IR::EnumDef_tie<T>::type  (
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->type (
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
IR::DefinitionKind POA_IR::EnumDef_tie<T>::def_kind  (
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->def_kind (
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
void POA_IR::EnumDef_tie<T>::destroy  (
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  this->ptr_->destroy (
    ACE_TRY_ENV
  );
}

#endif /* ACE_HAS_USING_KEYWORD */

#if defined (ACE_HAS_USING_KEYWORD)
template <class T> ACE_INLINE
POA_IR::AliasDef_tie<T>::AliasDef_tie (T &t)
	: ptr_ (&t),
	  poa_ (PortableServer::POA::_nil ()),
	  rel_ (0)
{}

template <class T> ACE_INLINE
POA_IR::AliasDef_tie<T>::AliasDef_tie (T &t, PortableServer::POA_ptr poa)
	: ptr_ (&t),
	  poa_ (PortableServer::POA::_duplicate (poa)),
	  rel_ (0)
{}

template <class T> ACE_INLINE
POA_IR::AliasDef_tie<T>::AliasDef_tie (T *tp, CORBA::Boolean release)
	: ptr_ (tp),
	  poa_ (PortableServer::POA::_nil ()),
	  rel_ (release)
{}

template <class T> ACE_INLINE
POA_IR::AliasDef_tie<T>::AliasDef_tie (T *tp, PortableServer::POA_ptr poa, CORBA::Boolean release)
	: ptr_ (tp),
	  poa_ (PortableServer::POA::_duplicate (poa)),
	  rel_ (release)
{}

template <class T> ACE_INLINE
POA_IR::AliasDef_tie<T>::~AliasDef_tie (void)
{
  if (this->rel_) delete this->ptr_;
}

template <class T> ACE_INLINE T *
POA_IR::AliasDef_tie<T>::_tied_object (void)
{
  return this->ptr_;
}

template <class T> ACE_INLINE void
POA_IR::AliasDef_tie<T>::_tied_object (T &obj)
{
  if (this->rel_) delete this->ptr_;
  this->ptr_ = &obj;
  this->rel_ = 0;
}

template <class T> ACE_INLINE void
POA_IR::AliasDef_tie<T>::_tied_object (T *obj, CORBA::Boolean release)
{
  if (this->rel_) delete this->ptr_;
  this->ptr_ = obj;
  this->rel_ = release;
}

template <class T> ACE_INLINE CORBA::Boolean
POA_IR::AliasDef_tie<T>::_is_owner (void)
{
  return this->rel_;
}

template <class T> ACE_INLINE void
POA_IR::AliasDef_tie<T>::_is_owner (CORBA::Boolean b)
{
  this->rel_ = b;
}

template <class T> ACE_INLINE PortableServer::POA_ptr
POA_IR::AliasDef_tie<T>::_default_POA (CORBA::Environment &env)
{
  if (!CORBA::is_nil (this->poa_.in ()))
    return PortableServer::POA::_duplicate (this->poa_.in ());

  return this->AliasDef::_default_POA (env);
}

template <class T> ACE_INLINE
IR::IDLType_ptr POA_IR::AliasDef_tie<T>::original_type_def  (
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->original_type_def (
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
void POA_IR::AliasDef_tie<T>::original_type_def  (
    IR::IDLType_ptr original_type_def,
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  this->ptr_->original_type_def (
    original_type_def,
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
char * POA_IR::AliasDef_tie<T>::id  (
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->id (
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
void POA_IR::AliasDef_tie<T>::id  (
    const char * id,
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  this->ptr_->id (
    id,
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
char * POA_IR::AliasDef_tie<T>::name  (
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->name (
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
void POA_IR::AliasDef_tie<T>::name  (
    const char * name,
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  this->ptr_->name (
    name,
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
char * POA_IR::AliasDef_tie<T>::version  (
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->version (
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
void POA_IR::AliasDef_tie<T>::version  (
    const char * version,
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  this->ptr_->version (
    version,
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
IR::Container_ptr POA_IR::AliasDef_tie<T>::defined_in  (
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->defined_in (
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
char * POA_IR::AliasDef_tie<T>::absolute_name  (
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->absolute_name (
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
IR::Repository_ptr POA_IR::AliasDef_tie<T>::containing_repository  (
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->containing_repository (
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
IR::Contained::Description * POA_IR::AliasDef_tie<T>::describe  (
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->describe (
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
void POA_IR::AliasDef_tie<T>::move  (
    IR::Container_ptr new_container,
    const char * new_name,
    const char * new_version,
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  this->ptr_->move (
    new_container,
    new_name,
    new_version,
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
CORBA::TypeCode_ptr POA_IR::AliasDef_tie<T>::type  (
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->type (
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
IR::DefinitionKind POA_IR::AliasDef_tie<T>::def_kind  (
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->def_kind (
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
void POA_IR::AliasDef_tie<T>::destroy  (
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  this->ptr_->destroy (
    ACE_TRY_ENV
  );
}

#endif /* ACE_HAS_USING_KEYWORD */

#if defined (ACE_HAS_USING_KEYWORD)
template <class T> ACE_INLINE
POA_IR::NativeDef_tie<T>::NativeDef_tie (T &t)
	: ptr_ (&t),
	  poa_ (PortableServer::POA::_nil ()),
	  rel_ (0)
{}

template <class T> ACE_INLINE
POA_IR::NativeDef_tie<T>::NativeDef_tie (T &t, PortableServer::POA_ptr poa)
	: ptr_ (&t),
	  poa_ (PortableServer::POA::_duplicate (poa)),
	  rel_ (0)
{}

template <class T> ACE_INLINE
POA_IR::NativeDef_tie<T>::NativeDef_tie (T *tp, CORBA::Boolean release)
	: ptr_ (tp),
	  poa_ (PortableServer::POA::_nil ()),
	  rel_ (release)
{}

template <class T> ACE_INLINE
POA_IR::NativeDef_tie<T>::NativeDef_tie (T *tp, PortableServer::POA_ptr poa, CORBA::Boolean release)
	: ptr_ (tp),
	  poa_ (PortableServer::POA::_duplicate (poa)),
	  rel_ (release)
{}

template <class T> ACE_INLINE
POA_IR::NativeDef_tie<T>::~NativeDef_tie (void)
{
  if (this->rel_) delete this->ptr_;
}

template <class T> ACE_INLINE T *
POA_IR::NativeDef_tie<T>::_tied_object (void)
{
  return this->ptr_;
}

template <class T> ACE_INLINE void
POA_IR::NativeDef_tie<T>::_tied_object (T &obj)
{
  if (this->rel_) delete this->ptr_;
  this->ptr_ = &obj;
  this->rel_ = 0;
}

template <class T> ACE_INLINE void
POA_IR::NativeDef_tie<T>::_tied_object (T *obj, CORBA::Boolean release)
{
  if (this->rel_) delete this->ptr_;
  this->ptr_ = obj;
  this->rel_ = release;
}

template <class T> ACE_INLINE CORBA::Boolean
POA_IR::NativeDef_tie<T>::_is_owner (void)
{
  return this->rel_;
}

template <class T> ACE_INLINE void
POA_IR::NativeDef_tie<T>::_is_owner (CORBA::Boolean b)
{
  this->rel_ = b;
}

template <class T> ACE_INLINE PortableServer::POA_ptr
POA_IR::NativeDef_tie<T>::_default_POA (CORBA::Environment &env)
{
  if (!CORBA::is_nil (this->poa_.in ()))
    return PortableServer::POA::_duplicate (this->poa_.in ());

  return this->NativeDef::_default_POA (env);
}

template <class T> ACE_INLINE
char * POA_IR::NativeDef_tie<T>::id  (
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->id (
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
void POA_IR::NativeDef_tie<T>::id  (
    const char * id,
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  this->ptr_->id (
    id,
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
char * POA_IR::NativeDef_tie<T>::name  (
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->name (
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
void POA_IR::NativeDef_tie<T>::name  (
    const char * name,
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  this->ptr_->name (
    name,
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
char * POA_IR::NativeDef_tie<T>::version  (
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->version (
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
void POA_IR::NativeDef_tie<T>::version  (
    const char * version,
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  this->ptr_->version (
    version,
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
IR::Container_ptr POA_IR::NativeDef_tie<T>::defined_in  (
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->defined_in (
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
char * POA_IR::NativeDef_tie<T>::absolute_name  (
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->absolute_name (
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
IR::Repository_ptr POA_IR::NativeDef_tie<T>::containing_repository  (
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->containing_repository (
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
IR::Contained::Description * POA_IR::NativeDef_tie<T>::describe  (
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->describe (
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
void POA_IR::NativeDef_tie<T>::move  (
    IR::Container_ptr new_container,
    const char * new_name,
    const char * new_version,
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  this->ptr_->move (
    new_container,
    new_name,
    new_version,
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
CORBA::TypeCode_ptr POA_IR::NativeDef_tie<T>::type  (
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->type (
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
IR::DefinitionKind POA_IR::NativeDef_tie<T>::def_kind  (
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->def_kind (
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
void POA_IR::NativeDef_tie<T>::destroy  (
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  this->ptr_->destroy (
    ACE_TRY_ENV
  );
}

#endif /* ACE_HAS_USING_KEYWORD */

#if defined (ACE_HAS_USING_KEYWORD)
template <class T> ACE_INLINE
POA_IR::PrimitiveDef_tie<T>::PrimitiveDef_tie (T &t)
	: ptr_ (&t),
	  poa_ (PortableServer::POA::_nil ()),
	  rel_ (0)
{}

template <class T> ACE_INLINE
POA_IR::PrimitiveDef_tie<T>::PrimitiveDef_tie (T &t, PortableServer::POA_ptr poa)
	: ptr_ (&t),
	  poa_ (PortableServer::POA::_duplicate (poa)),
	  rel_ (0)
{}

template <class T> ACE_INLINE
POA_IR::PrimitiveDef_tie<T>::PrimitiveDef_tie (T *tp, CORBA::Boolean release)
	: ptr_ (tp),
	  poa_ (PortableServer::POA::_nil ()),
	  rel_ (release)
{}

template <class T> ACE_INLINE
POA_IR::PrimitiveDef_tie<T>::PrimitiveDef_tie (T *tp, PortableServer::POA_ptr poa, CORBA::Boolean release)
	: ptr_ (tp),
	  poa_ (PortableServer::POA::_duplicate (poa)),
	  rel_ (release)
{}

template <class T> ACE_INLINE
POA_IR::PrimitiveDef_tie<T>::~PrimitiveDef_tie (void)
{
  if (this->rel_) delete this->ptr_;
}

template <class T> ACE_INLINE T *
POA_IR::PrimitiveDef_tie<T>::_tied_object (void)
{
  return this->ptr_;
}

template <class T> ACE_INLINE void
POA_IR::PrimitiveDef_tie<T>::_tied_object (T &obj)
{
  if (this->rel_) delete this->ptr_;
  this->ptr_ = &obj;
  this->rel_ = 0;
}

template <class T> ACE_INLINE void
POA_IR::PrimitiveDef_tie<T>::_tied_object (T *obj, CORBA::Boolean release)
{
  if (this->rel_) delete this->ptr_;
  this->ptr_ = obj;
  this->rel_ = release;
}

template <class T> ACE_INLINE CORBA::Boolean
POA_IR::PrimitiveDef_tie<T>::_is_owner (void)
{
  return this->rel_;
}

template <class T> ACE_INLINE void
POA_IR::PrimitiveDef_tie<T>::_is_owner (CORBA::Boolean b)
{
  this->rel_ = b;
}

template <class T> ACE_INLINE PortableServer::POA_ptr
POA_IR::PrimitiveDef_tie<T>::_default_POA (CORBA::Environment &env)
{
  if (!CORBA::is_nil (this->poa_.in ()))
    return PortableServer::POA::_duplicate (this->poa_.in ());

  return this->PrimitiveDef::_default_POA (env);
}

template <class T> ACE_INLINE
IR::PrimitiveKind POA_IR::PrimitiveDef_tie<T>::kind  (
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->kind (
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
CORBA::TypeCode_ptr POA_IR::PrimitiveDef_tie<T>::type  (
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->type (
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
IR::DefinitionKind POA_IR::PrimitiveDef_tie<T>::def_kind  (
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->def_kind (
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
void POA_IR::PrimitiveDef_tie<T>::destroy  (
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  this->ptr_->destroy (
    ACE_TRY_ENV
  );
}

#endif /* ACE_HAS_USING_KEYWORD */

#if defined (ACE_HAS_USING_KEYWORD)
template <class T> ACE_INLINE
POA_IR::StringDef_tie<T>::StringDef_tie (T &t)
	: ptr_ (&t),
	  poa_ (PortableServer::POA::_nil ()),
	  rel_ (0)
{}

template <class T> ACE_INLINE
POA_IR::StringDef_tie<T>::StringDef_tie (T &t, PortableServer::POA_ptr poa)
	: ptr_ (&t),
	  poa_ (PortableServer::POA::_duplicate (poa)),
	  rel_ (0)
{}

template <class T> ACE_INLINE
POA_IR::StringDef_tie<T>::StringDef_tie (T *tp, CORBA::Boolean release)
	: ptr_ (tp),
	  poa_ (PortableServer::POA::_nil ()),
	  rel_ (release)
{}

template <class T> ACE_INLINE
POA_IR::StringDef_tie<T>::StringDef_tie (T *tp, PortableServer::POA_ptr poa, CORBA::Boolean release)
	: ptr_ (tp),
	  poa_ (PortableServer::POA::_duplicate (poa)),
	  rel_ (release)
{}

template <class T> ACE_INLINE
POA_IR::StringDef_tie<T>::~StringDef_tie (void)
{
  if (this->rel_) delete this->ptr_;
}

template <class T> ACE_INLINE T *
POA_IR::StringDef_tie<T>::_tied_object (void)
{
  return this->ptr_;
}

template <class T> ACE_INLINE void
POA_IR::StringDef_tie<T>::_tied_object (T &obj)
{
  if (this->rel_) delete this->ptr_;
  this->ptr_ = &obj;
  this->rel_ = 0;
}

template <class T> ACE_INLINE void
POA_IR::StringDef_tie<T>::_tied_object (T *obj, CORBA::Boolean release)
{
  if (this->rel_) delete this->ptr_;
  this->ptr_ = obj;
  this->rel_ = release;
}

template <class T> ACE_INLINE CORBA::Boolean
POA_IR::StringDef_tie<T>::_is_owner (void)
{
  return this->rel_;
}

template <class T> ACE_INLINE void
POA_IR::StringDef_tie<T>::_is_owner (CORBA::Boolean b)
{
  this->rel_ = b;
}

template <class T> ACE_INLINE PortableServer::POA_ptr
POA_IR::StringDef_tie<T>::_default_POA (CORBA::Environment &env)
{
  if (!CORBA::is_nil (this->poa_.in ()))
    return PortableServer::POA::_duplicate (this->poa_.in ());

  return this->StringDef::_default_POA (env);
}

template <class T> ACE_INLINE
CORBA::ULong POA_IR::StringDef_tie<T>::bound  (
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->bound (
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
void POA_IR::StringDef_tie<T>::bound  (
    CORBA::ULong bound,
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  this->ptr_->bound (
    bound,
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
CORBA::TypeCode_ptr POA_IR::StringDef_tie<T>::type  (
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->type (
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
IR::DefinitionKind POA_IR::StringDef_tie<T>::def_kind  (
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->def_kind (
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
void POA_IR::StringDef_tie<T>::destroy  (
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  this->ptr_->destroy (
    ACE_TRY_ENV
  );
}

#endif /* ACE_HAS_USING_KEYWORD */

#if defined (ACE_HAS_USING_KEYWORD)
template <class T> ACE_INLINE
POA_IR::WstringDef_tie<T>::WstringDef_tie (T &t)
	: ptr_ (&t),
	  poa_ (PortableServer::POA::_nil ()),
	  rel_ (0)
{}

template <class T> ACE_INLINE
POA_IR::WstringDef_tie<T>::WstringDef_tie (T &t, PortableServer::POA_ptr poa)
	: ptr_ (&t),
	  poa_ (PortableServer::POA::_duplicate (poa)),
	  rel_ (0)
{}

template <class T> ACE_INLINE
POA_IR::WstringDef_tie<T>::WstringDef_tie (T *tp, CORBA::Boolean release)
	: ptr_ (tp),
	  poa_ (PortableServer::POA::_nil ()),
	  rel_ (release)
{}

template <class T> ACE_INLINE
POA_IR::WstringDef_tie<T>::WstringDef_tie (T *tp, PortableServer::POA_ptr poa, CORBA::Boolean release)
	: ptr_ (tp),
	  poa_ (PortableServer::POA::_duplicate (poa)),
	  rel_ (release)
{}

template <class T> ACE_INLINE
POA_IR::WstringDef_tie<T>::~WstringDef_tie (void)
{
  if (this->rel_) delete this->ptr_;
}

template <class T> ACE_INLINE T *
POA_IR::WstringDef_tie<T>::_tied_object (void)
{
  return this->ptr_;
}

template <class T> ACE_INLINE void
POA_IR::WstringDef_tie<T>::_tied_object (T &obj)
{
  if (this->rel_) delete this->ptr_;
  this->ptr_ = &obj;
  this->rel_ = 0;
}

template <class T> ACE_INLINE void
POA_IR::WstringDef_tie<T>::_tied_object (T *obj, CORBA::Boolean release)
{
  if (this->rel_) delete this->ptr_;
  this->ptr_ = obj;
  this->rel_ = release;
}

template <class T> ACE_INLINE CORBA::Boolean
POA_IR::WstringDef_tie<T>::_is_owner (void)
{
  return this->rel_;
}

template <class T> ACE_INLINE void
POA_IR::WstringDef_tie<T>::_is_owner (CORBA::Boolean b)
{
  this->rel_ = b;
}

template <class T> ACE_INLINE PortableServer::POA_ptr
POA_IR::WstringDef_tie<T>::_default_POA (CORBA::Environment &env)
{
  if (!CORBA::is_nil (this->poa_.in ()))
    return PortableServer::POA::_duplicate (this->poa_.in ());

  return this->WstringDef::_default_POA (env);
}

template <class T> ACE_INLINE
CORBA::ULong POA_IR::WstringDef_tie<T>::bound  (
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->bound (
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
void POA_IR::WstringDef_tie<T>::bound  (
    CORBA::ULong bound,
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  this->ptr_->bound (
    bound,
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
CORBA::TypeCode_ptr POA_IR::WstringDef_tie<T>::type  (
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->type (
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
IR::DefinitionKind POA_IR::WstringDef_tie<T>::def_kind  (
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->def_kind (
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
void POA_IR::WstringDef_tie<T>::destroy  (
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  this->ptr_->destroy (
    ACE_TRY_ENV
  );
}

#endif /* ACE_HAS_USING_KEYWORD */

#if defined (ACE_HAS_USING_KEYWORD)
template <class T> ACE_INLINE
POA_IR::FixedDef_tie<T>::FixedDef_tie (T &t)
	: ptr_ (&t),
	  poa_ (PortableServer::POA::_nil ()),
	  rel_ (0)
{}

template <class T> ACE_INLINE
POA_IR::FixedDef_tie<T>::FixedDef_tie (T &t, PortableServer::POA_ptr poa)
	: ptr_ (&t),
	  poa_ (PortableServer::POA::_duplicate (poa)),
	  rel_ (0)
{}

template <class T> ACE_INLINE
POA_IR::FixedDef_tie<T>::FixedDef_tie (T *tp, CORBA::Boolean release)
	: ptr_ (tp),
	  poa_ (PortableServer::POA::_nil ()),
	  rel_ (release)
{}

template <class T> ACE_INLINE
POA_IR::FixedDef_tie<T>::FixedDef_tie (T *tp, PortableServer::POA_ptr poa, CORBA::Boolean release)
	: ptr_ (tp),
	  poa_ (PortableServer::POA::_duplicate (poa)),
	  rel_ (release)
{}

template <class T> ACE_INLINE
POA_IR::FixedDef_tie<T>::~FixedDef_tie (void)
{
  if (this->rel_) delete this->ptr_;
}

template <class T> ACE_INLINE T *
POA_IR::FixedDef_tie<T>::_tied_object (void)
{
  return this->ptr_;
}

template <class T> ACE_INLINE void
POA_IR::FixedDef_tie<T>::_tied_object (T &obj)
{
  if (this->rel_) delete this->ptr_;
  this->ptr_ = &obj;
  this->rel_ = 0;
}

template <class T> ACE_INLINE void
POA_IR::FixedDef_tie<T>::_tied_object (T *obj, CORBA::Boolean release)
{
  if (this->rel_) delete this->ptr_;
  this->ptr_ = obj;
  this->rel_ = release;
}

template <class T> ACE_INLINE CORBA::Boolean
POA_IR::FixedDef_tie<T>::_is_owner (void)
{
  return this->rel_;
}

template <class T> ACE_INLINE void
POA_IR::FixedDef_tie<T>::_is_owner (CORBA::Boolean b)
{
  this->rel_ = b;
}

template <class T> ACE_INLINE PortableServer::POA_ptr
POA_IR::FixedDef_tie<T>::_default_POA (CORBA::Environment &env)
{
  if (!CORBA::is_nil (this->poa_.in ()))
    return PortableServer::POA::_duplicate (this->poa_.in ());

  return this->FixedDef::_default_POA (env);
}

template <class T> ACE_INLINE
CORBA::UShort POA_IR::FixedDef_tie<T>::digits  (
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->digits (
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
void POA_IR::FixedDef_tie<T>::digits  (
    CORBA::UShort digits,
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  this->ptr_->digits (
    digits,
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
CORBA::Short POA_IR::FixedDef_tie<T>::scale  (
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->scale (
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
void POA_IR::FixedDef_tie<T>::scale  (
    CORBA::Short scale,
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  this->ptr_->scale (
    scale,
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
CORBA::TypeCode_ptr POA_IR::FixedDef_tie<T>::type  (
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->type (
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
IR::DefinitionKind POA_IR::FixedDef_tie<T>::def_kind  (
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->def_kind (
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
void POA_IR::FixedDef_tie<T>::destroy  (
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  this->ptr_->destroy (
    ACE_TRY_ENV
  );
}

#endif /* ACE_HAS_USING_KEYWORD */

#if defined (ACE_HAS_USING_KEYWORD)
template <class T> ACE_INLINE
POA_IR::SequenceDef_tie<T>::SequenceDef_tie (T &t)
	: ptr_ (&t),
	  poa_ (PortableServer::POA::_nil ()),
	  rel_ (0)
{}

template <class T> ACE_INLINE
POA_IR::SequenceDef_tie<T>::SequenceDef_tie (T &t, PortableServer::POA_ptr poa)
	: ptr_ (&t),
	  poa_ (PortableServer::POA::_duplicate (poa)),
	  rel_ (0)
{}

template <class T> ACE_INLINE
POA_IR::SequenceDef_tie<T>::SequenceDef_tie (T *tp, CORBA::Boolean release)
	: ptr_ (tp),
	  poa_ (PortableServer::POA::_nil ()),
	  rel_ (release)
{}

template <class T> ACE_INLINE
POA_IR::SequenceDef_tie<T>::SequenceDef_tie (T *tp, PortableServer::POA_ptr poa, CORBA::Boolean release)
	: ptr_ (tp),
	  poa_ (PortableServer::POA::_duplicate (poa)),
	  rel_ (release)
{}

template <class T> ACE_INLINE
POA_IR::SequenceDef_tie<T>::~SequenceDef_tie (void)
{
  if (this->rel_) delete this->ptr_;
}

template <class T> ACE_INLINE T *
POA_IR::SequenceDef_tie<T>::_tied_object (void)
{
  return this->ptr_;
}

template <class T> ACE_INLINE void
POA_IR::SequenceDef_tie<T>::_tied_object (T &obj)
{
  if (this->rel_) delete this->ptr_;
  this->ptr_ = &obj;
  this->rel_ = 0;
}

template <class T> ACE_INLINE void
POA_IR::SequenceDef_tie<T>::_tied_object (T *obj, CORBA::Boolean release)
{
  if (this->rel_) delete this->ptr_;
  this->ptr_ = obj;
  this->rel_ = release;
}

template <class T> ACE_INLINE CORBA::Boolean
POA_IR::SequenceDef_tie<T>::_is_owner (void)
{
  return this->rel_;
}

template <class T> ACE_INLINE void
POA_IR::SequenceDef_tie<T>::_is_owner (CORBA::Boolean b)
{
  this->rel_ = b;
}

template <class T> ACE_INLINE PortableServer::POA_ptr
POA_IR::SequenceDef_tie<T>::_default_POA (CORBA::Environment &env)
{
  if (!CORBA::is_nil (this->poa_.in ()))
    return PortableServer::POA::_duplicate (this->poa_.in ());

  return this->SequenceDef::_default_POA (env);
}

template <class T> ACE_INLINE
CORBA::ULong POA_IR::SequenceDef_tie<T>::bound  (
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->bound (
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
void POA_IR::SequenceDef_tie<T>::bound  (
    CORBA::ULong bound,
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  this->ptr_->bound (
    bound,
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
CORBA::TypeCode_ptr POA_IR::SequenceDef_tie<T>::element_type  (
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->element_type (
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
IR::IDLType_ptr POA_IR::SequenceDef_tie<T>::element_type_def  (
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->element_type_def (
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
void POA_IR::SequenceDef_tie<T>::element_type_def  (
    IR::IDLType_ptr element_type_def,
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  this->ptr_->element_type_def (
    element_type_def,
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
CORBA::TypeCode_ptr POA_IR::SequenceDef_tie<T>::type  (
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->type (
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
IR::DefinitionKind POA_IR::SequenceDef_tie<T>::def_kind  (
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->def_kind (
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
void POA_IR::SequenceDef_tie<T>::destroy  (
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  this->ptr_->destroy (
    ACE_TRY_ENV
  );
}

#endif /* ACE_HAS_USING_KEYWORD */

#if defined (ACE_HAS_USING_KEYWORD)
template <class T> ACE_INLINE
POA_IR::ArrayDef_tie<T>::ArrayDef_tie (T &t)
	: ptr_ (&t),
	  poa_ (PortableServer::POA::_nil ()),
	  rel_ (0)
{}

template <class T> ACE_INLINE
POA_IR::ArrayDef_tie<T>::ArrayDef_tie (T &t, PortableServer::POA_ptr poa)
	: ptr_ (&t),
	  poa_ (PortableServer::POA::_duplicate (poa)),
	  rel_ (0)
{}

template <class T> ACE_INLINE
POA_IR::ArrayDef_tie<T>::ArrayDef_tie (T *tp, CORBA::Boolean release)
	: ptr_ (tp),
	  poa_ (PortableServer::POA::_nil ()),
	  rel_ (release)
{}

template <class T> ACE_INLINE
POA_IR::ArrayDef_tie<T>::ArrayDef_tie (T *tp, PortableServer::POA_ptr poa, CORBA::Boolean release)
	: ptr_ (tp),
	  poa_ (PortableServer::POA::_duplicate (poa)),
	  rel_ (release)
{}

template <class T> ACE_INLINE
POA_IR::ArrayDef_tie<T>::~ArrayDef_tie (void)
{
  if (this->rel_) delete this->ptr_;
}

template <class T> ACE_INLINE T *
POA_IR::ArrayDef_tie<T>::_tied_object (void)
{
  return this->ptr_;
}

template <class T> ACE_INLINE void
POA_IR::ArrayDef_tie<T>::_tied_object (T &obj)
{
  if (this->rel_) delete this->ptr_;
  this->ptr_ = &obj;
  this->rel_ = 0;
}

template <class T> ACE_INLINE void
POA_IR::ArrayDef_tie<T>::_tied_object (T *obj, CORBA::Boolean release)
{
  if (this->rel_) delete this->ptr_;
  this->ptr_ = obj;
  this->rel_ = release;
}

template <class T> ACE_INLINE CORBA::Boolean
POA_IR::ArrayDef_tie<T>::_is_owner (void)
{
  return this->rel_;
}

template <class T> ACE_INLINE void
POA_IR::ArrayDef_tie<T>::_is_owner (CORBA::Boolean b)
{
  this->rel_ = b;
}

template <class T> ACE_INLINE PortableServer::POA_ptr
POA_IR::ArrayDef_tie<T>::_default_POA (CORBA::Environment &env)
{
  if (!CORBA::is_nil (this->poa_.in ()))
    return PortableServer::POA::_duplicate (this->poa_.in ());

  return this->ArrayDef::_default_POA (env);
}

template <class T> ACE_INLINE
CORBA::ULong POA_IR::ArrayDef_tie<T>::length  (
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->length (
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
void POA_IR::ArrayDef_tie<T>::length  (
    CORBA::ULong length,
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  this->ptr_->length (
    length,
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
CORBA::TypeCode_ptr POA_IR::ArrayDef_tie<T>::element_type  (
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->element_type (
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
IR::IDLType_ptr POA_IR::ArrayDef_tie<T>::element_type_def  (
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->element_type_def (
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
void POA_IR::ArrayDef_tie<T>::element_type_def  (
    IR::IDLType_ptr element_type_def,
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  this->ptr_->element_type_def (
    element_type_def,
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
CORBA::TypeCode_ptr POA_IR::ArrayDef_tie<T>::type  (
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->type (
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
IR::DefinitionKind POA_IR::ArrayDef_tie<T>::def_kind  (
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->def_kind (
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
void POA_IR::ArrayDef_tie<T>::destroy  (
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  this->ptr_->destroy (
    ACE_TRY_ENV
  );
}

#endif /* ACE_HAS_USING_KEYWORD */

#if defined (ACE_HAS_USING_KEYWORD)
template <class T> ACE_INLINE
POA_IR::ExceptionDef_tie<T>::ExceptionDef_tie (T &t)
	: ptr_ (&t),
	  poa_ (PortableServer::POA::_nil ()),
	  rel_ (0)
{}

template <class T> ACE_INLINE
POA_IR::ExceptionDef_tie<T>::ExceptionDef_tie (T &t, PortableServer::POA_ptr poa)
	: ptr_ (&t),
	  poa_ (PortableServer::POA::_duplicate (poa)),
	  rel_ (0)
{}

template <class T> ACE_INLINE
POA_IR::ExceptionDef_tie<T>::ExceptionDef_tie (T *tp, CORBA::Boolean release)
	: ptr_ (tp),
	  poa_ (PortableServer::POA::_nil ()),
	  rel_ (release)
{}

template <class T> ACE_INLINE
POA_IR::ExceptionDef_tie<T>::ExceptionDef_tie (T *tp, PortableServer::POA_ptr poa, CORBA::Boolean release)
	: ptr_ (tp),
	  poa_ (PortableServer::POA::_duplicate (poa)),
	  rel_ (release)
{}

template <class T> ACE_INLINE
POA_IR::ExceptionDef_tie<T>::~ExceptionDef_tie (void)
{
  if (this->rel_) delete this->ptr_;
}

template <class T> ACE_INLINE T *
POA_IR::ExceptionDef_tie<T>::_tied_object (void)
{
  return this->ptr_;
}

template <class T> ACE_INLINE void
POA_IR::ExceptionDef_tie<T>::_tied_object (T &obj)
{
  if (this->rel_) delete this->ptr_;
  this->ptr_ = &obj;
  this->rel_ = 0;
}

template <class T> ACE_INLINE void
POA_IR::ExceptionDef_tie<T>::_tied_object (T *obj, CORBA::Boolean release)
{
  if (this->rel_) delete this->ptr_;
  this->ptr_ = obj;
  this->rel_ = release;
}

template <class T> ACE_INLINE CORBA::Boolean
POA_IR::ExceptionDef_tie<T>::_is_owner (void)
{
  return this->rel_;
}

template <class T> ACE_INLINE void
POA_IR::ExceptionDef_tie<T>::_is_owner (CORBA::Boolean b)
{
  this->rel_ = b;
}

template <class T> ACE_INLINE PortableServer::POA_ptr
POA_IR::ExceptionDef_tie<T>::_default_POA (CORBA::Environment &env)
{
  if (!CORBA::is_nil (this->poa_.in ()))
    return PortableServer::POA::_duplicate (this->poa_.in ());

  return this->ExceptionDef::_default_POA (env);
}

template <class T> ACE_INLINE
CORBA::TypeCode_ptr POA_IR::ExceptionDef_tie<T>::type  (
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->type (
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
IR::StructMemberSeq * POA_IR::ExceptionDef_tie<T>::members  (
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->members (
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
void POA_IR::ExceptionDef_tie<T>::members  (
    const IR::StructMemberSeq & members,
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  this->ptr_->members (
    members,
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
char * POA_IR::ExceptionDef_tie<T>::id  (
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->id (
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
void POA_IR::ExceptionDef_tie<T>::id  (
    const char * id,
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  this->ptr_->id (
    id,
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
char * POA_IR::ExceptionDef_tie<T>::name  (
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->name (
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
void POA_IR::ExceptionDef_tie<T>::name  (
    const char * name,
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  this->ptr_->name (
    name,
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
char * POA_IR::ExceptionDef_tie<T>::version  (
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->version (
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
void POA_IR::ExceptionDef_tie<T>::version  (
    const char * version,
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  this->ptr_->version (
    version,
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
IR::Container_ptr POA_IR::ExceptionDef_tie<T>::defined_in  (
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->defined_in (
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
char * POA_IR::ExceptionDef_tie<T>::absolute_name  (
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->absolute_name (
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
IR::Repository_ptr POA_IR::ExceptionDef_tie<T>::containing_repository  (
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->containing_repository (
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
IR::Contained::Description * POA_IR::ExceptionDef_tie<T>::describe  (
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->describe (
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
void POA_IR::ExceptionDef_tie<T>::move  (
    IR::Container_ptr new_container,
    const char * new_name,
    const char * new_version,
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  this->ptr_->move (
    new_container,
    new_name,
    new_version,
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
IR::Contained_ptr POA_IR::ExceptionDef_tie<T>::lookup  (
    const char * search_name,
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->lookup (
    search_name,
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
IR::ContainedSeq * POA_IR::ExceptionDef_tie<T>::contents  (
    IR::DefinitionKind limit_type,
    CORBA::Boolean exclude_inherited,
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->contents (
    limit_type,
    exclude_inherited,
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
IR::ContainedSeq * POA_IR::ExceptionDef_tie<T>::lookup_name  (
    const char * search_name,
    CORBA::Long levels_to_search,
    IR::DefinitionKind limit_type,
    CORBA::Boolean exclude_inherited,
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->lookup_name (
    search_name,
    levels_to_search,
    limit_type,
    exclude_inherited,
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
IR::Container::DescriptionSeq * POA_IR::ExceptionDef_tie<T>::describe_contents  (
    IR::DefinitionKind limit_type,
    CORBA::Boolean exclude_inherited,
    CORBA::Long max_returned_objs,
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->describe_contents (
    limit_type,
    exclude_inherited,
    max_returned_objs,
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
IR::ModuleDef_ptr POA_IR::ExceptionDef_tie<T>::create_module  (
    const char * id,
    const char * name,
    const char * version,
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->create_module (
    id,
    name,
    version,
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
IR::ConstantDef_ptr POA_IR::ExceptionDef_tie<T>::create_constant  (
    const char * id,
    const char * name,
    const char * version,
    IR::IDLType_ptr type,
    const CORBA::Any & value,
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->create_constant (
    id,
    name,
    version,
    type,
    value,
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
IR::StructDef_ptr POA_IR::ExceptionDef_tie<T>::create_struct  (
    const char * id,
    const char * name,
    const char * version,
    const IR::StructMemberSeq & members,
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->create_struct (
    id,
    name,
    version,
    members,
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
IR::UnionDef_ptr POA_IR::ExceptionDef_tie<T>::create_union  (
    const char * id,
    const char * name,
    const char * version,
    IR::IDLType_ptr discriminator_type,
    const IR::UnionMemberSeq & members,
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->create_union (
    id,
    name,
    version,
    discriminator_type,
    members,
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
IR::EnumDef_ptr POA_IR::ExceptionDef_tie<T>::create_enum  (
    const char * id,
    const char * name,
    const char * version,
    const IR::EnumMemberSeq & members,
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->create_enum (
    id,
    name,
    version,
    members,
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
IR::AliasDef_ptr POA_IR::ExceptionDef_tie<T>::create_alias  (
    const char * id,
    const char * name,
    const char * version,
    IR::IDLType_ptr original_type,
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->create_alias (
    id,
    name,
    version,
    original_type,
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
IR::InterfaceDef_ptr POA_IR::ExceptionDef_tie<T>::create_interface  (
    const char * id,
    const char * name,
    const char * version,
    const IR::InterfaceDefSeq & base_interfaces,
    CORBA::Boolean is_abstract,
    CORBA::Boolean is_local,
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->create_interface (
    id,
    name,
    version,
    base_interfaces,
    is_abstract,
    is_local,
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
IR::ValueDef_ptr POA_IR::ExceptionDef_tie<T>::create_value  (
    const char * id,
    const char * name,
    const char * version,
    CORBA::Boolean is_custom,
    CORBA::Boolean is_abstract,
    IR::ValueDef_ptr base_value,
    CORBA::Boolean is_truncatable,
    const IR::ValueDefSeq & abstract_base_values,
    const IR::InterfaceDefSeq & supported_interfaces,
    const IR::InitializerSeq & initializers,
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->create_value (
    id,
    name,
    version,
    is_custom,
    is_abstract,
    base_value,
    is_truncatable,
    abstract_base_values,
    supported_interfaces,
    initializers,
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
IR::ValueBoxDef_ptr POA_IR::ExceptionDef_tie<T>::create_value_box  (
    const char * id,
    const char * name,
    const char * version,
    IR::IDLType_ptr original_type_def,
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->create_value_box (
    id,
    name,
    version,
    original_type_def,
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
IR::ExceptionDef_ptr POA_IR::ExceptionDef_tie<T>::create_exception  (
    const char * id,
    const char * name,
    const char * version,
    const IR::StructMemberSeq & members,
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->create_exception (
    id,
    name,
    version,
    members,
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
IR::NativeDef_ptr POA_IR::ExceptionDef_tie<T>::create_native  (
    const char * id,
    const char * name,
    const char * version,
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->create_native (
    id,
    name,
    version,
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
IR::DefinitionKind POA_IR::ExceptionDef_tie<T>::def_kind  (
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->def_kind (
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
void POA_IR::ExceptionDef_tie<T>::destroy  (
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  this->ptr_->destroy (
    ACE_TRY_ENV
  );
}

#endif /* ACE_HAS_USING_KEYWORD */

#if defined (ACE_HAS_USING_KEYWORD)
template <class T> ACE_INLINE
POA_IR::AttributeDef_tie<T>::AttributeDef_tie (T &t)
	: ptr_ (&t),
	  poa_ (PortableServer::POA::_nil ()),
	  rel_ (0)
{}

template <class T> ACE_INLINE
POA_IR::AttributeDef_tie<T>::AttributeDef_tie (T &t, PortableServer::POA_ptr poa)
	: ptr_ (&t),
	  poa_ (PortableServer::POA::_duplicate (poa)),
	  rel_ (0)
{}

template <class T> ACE_INLINE
POA_IR::AttributeDef_tie<T>::AttributeDef_tie (T *tp, CORBA::Boolean release)
	: ptr_ (tp),
	  poa_ (PortableServer::POA::_nil ()),
	  rel_ (release)
{}

template <class T> ACE_INLINE
POA_IR::AttributeDef_tie<T>::AttributeDef_tie (T *tp, PortableServer::POA_ptr poa, CORBA::Boolean release)
	: ptr_ (tp),
	  poa_ (PortableServer::POA::_duplicate (poa)),
	  rel_ (release)
{}

template <class T> ACE_INLINE
POA_IR::AttributeDef_tie<T>::~AttributeDef_tie (void)
{
  if (this->rel_) delete this->ptr_;
}

template <class T> ACE_INLINE T *
POA_IR::AttributeDef_tie<T>::_tied_object (void)
{
  return this->ptr_;
}

template <class T> ACE_INLINE void
POA_IR::AttributeDef_tie<T>::_tied_object (T &obj)
{
  if (this->rel_) delete this->ptr_;
  this->ptr_ = &obj;
  this->rel_ = 0;
}

template <class T> ACE_INLINE void
POA_IR::AttributeDef_tie<T>::_tied_object (T *obj, CORBA::Boolean release)
{
  if (this->rel_) delete this->ptr_;
  this->ptr_ = obj;
  this->rel_ = release;
}

template <class T> ACE_INLINE CORBA::Boolean
POA_IR::AttributeDef_tie<T>::_is_owner (void)
{
  return this->rel_;
}

template <class T> ACE_INLINE void
POA_IR::AttributeDef_tie<T>::_is_owner (CORBA::Boolean b)
{
  this->rel_ = b;
}

template <class T> ACE_INLINE PortableServer::POA_ptr
POA_IR::AttributeDef_tie<T>::_default_POA (CORBA::Environment &env)
{
  if (!CORBA::is_nil (this->poa_.in ()))
    return PortableServer::POA::_duplicate (this->poa_.in ());

  return this->AttributeDef::_default_POA (env);
}

template <class T> ACE_INLINE
CORBA::TypeCode_ptr POA_IR::AttributeDef_tie<T>::type  (
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->type (
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
IR::IDLType_ptr POA_IR::AttributeDef_tie<T>::type_def  (
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->type_def (
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
void POA_IR::AttributeDef_tie<T>::type_def  (
    IR::IDLType_ptr type_def,
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  this->ptr_->type_def (
    type_def,
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
IR::AttributeMode POA_IR::AttributeDef_tie<T>::mode  (
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->mode (
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
void POA_IR::AttributeDef_tie<T>::mode  (
    IR::AttributeMode mode,
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  this->ptr_->mode (
    mode,
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
char * POA_IR::AttributeDef_tie<T>::id  (
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->id (
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
void POA_IR::AttributeDef_tie<T>::id  (
    const char * id,
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  this->ptr_->id (
    id,
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
char * POA_IR::AttributeDef_tie<T>::name  (
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->name (
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
void POA_IR::AttributeDef_tie<T>::name  (
    const char * name,
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  this->ptr_->name (
    name,
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
char * POA_IR::AttributeDef_tie<T>::version  (
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->version (
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
void POA_IR::AttributeDef_tie<T>::version  (
    const char * version,
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  this->ptr_->version (
    version,
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
IR::Container_ptr POA_IR::AttributeDef_tie<T>::defined_in  (
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->defined_in (
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
char * POA_IR::AttributeDef_tie<T>::absolute_name  (
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->absolute_name (
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
IR::Repository_ptr POA_IR::AttributeDef_tie<T>::containing_repository  (
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->containing_repository (
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
IR::Contained::Description * POA_IR::AttributeDef_tie<T>::describe  (
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->describe (
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
void POA_IR::AttributeDef_tie<T>::move  (
    IR::Container_ptr new_container,
    const char * new_name,
    const char * new_version,
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  this->ptr_->move (
    new_container,
    new_name,
    new_version,
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
IR::DefinitionKind POA_IR::AttributeDef_tie<T>::def_kind  (
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->def_kind (
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
void POA_IR::AttributeDef_tie<T>::destroy  (
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  this->ptr_->destroy (
    ACE_TRY_ENV
  );
}

#endif /* ACE_HAS_USING_KEYWORD */

#if defined (ACE_HAS_USING_KEYWORD)
template <class T> ACE_INLINE
POA_IR::OperationDef_tie<T>::OperationDef_tie (T &t)
	: ptr_ (&t),
	  poa_ (PortableServer::POA::_nil ()),
	  rel_ (0)
{}

template <class T> ACE_INLINE
POA_IR::OperationDef_tie<T>::OperationDef_tie (T &t, PortableServer::POA_ptr poa)
	: ptr_ (&t),
	  poa_ (PortableServer::POA::_duplicate (poa)),
	  rel_ (0)
{}

template <class T> ACE_INLINE
POA_IR::OperationDef_tie<T>::OperationDef_tie (T *tp, CORBA::Boolean release)
	: ptr_ (tp),
	  poa_ (PortableServer::POA::_nil ()),
	  rel_ (release)
{}

template <class T> ACE_INLINE
POA_IR::OperationDef_tie<T>::OperationDef_tie (T *tp, PortableServer::POA_ptr poa, CORBA::Boolean release)
	: ptr_ (tp),
	  poa_ (PortableServer::POA::_duplicate (poa)),
	  rel_ (release)
{}

template <class T> ACE_INLINE
POA_IR::OperationDef_tie<T>::~OperationDef_tie (void)
{
  if (this->rel_) delete this->ptr_;
}

template <class T> ACE_INLINE T *
POA_IR::OperationDef_tie<T>::_tied_object (void)
{
  return this->ptr_;
}

template <class T> ACE_INLINE void
POA_IR::OperationDef_tie<T>::_tied_object (T &obj)
{
  if (this->rel_) delete this->ptr_;
  this->ptr_ = &obj;
  this->rel_ = 0;
}

template <class T> ACE_INLINE void
POA_IR::OperationDef_tie<T>::_tied_object (T *obj, CORBA::Boolean release)
{
  if (this->rel_) delete this->ptr_;
  this->ptr_ = obj;
  this->rel_ = release;
}

template <class T> ACE_INLINE CORBA::Boolean
POA_IR::OperationDef_tie<T>::_is_owner (void)
{
  return this->rel_;
}

template <class T> ACE_INLINE void
POA_IR::OperationDef_tie<T>::_is_owner (CORBA::Boolean b)
{
  this->rel_ = b;
}

template <class T> ACE_INLINE PortableServer::POA_ptr
POA_IR::OperationDef_tie<T>::_default_POA (CORBA::Environment &env)
{
  if (!CORBA::is_nil (this->poa_.in ()))
    return PortableServer::POA::_duplicate (this->poa_.in ());

  return this->OperationDef::_default_POA (env);
}

template <class T> ACE_INLINE
CORBA::TypeCode_ptr POA_IR::OperationDef_tie<T>::result  (
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->result (
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
IR::IDLType_ptr POA_IR::OperationDef_tie<T>::result_def  (
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->result_def (
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
void POA_IR::OperationDef_tie<T>::result_def  (
    IR::IDLType_ptr result_def,
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  this->ptr_->result_def (
    result_def,
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
IR::ParDescriptionSeq * POA_IR::OperationDef_tie<T>::params  (
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->params (
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
void POA_IR::OperationDef_tie<T>::params  (
    const IR::ParDescriptionSeq & params,
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  this->ptr_->params (
    params,
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
IR::OperationMode POA_IR::OperationDef_tie<T>::mode  (
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->mode (
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
void POA_IR::OperationDef_tie<T>::mode  (
    IR::OperationMode mode,
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  this->ptr_->mode (
    mode,
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
IR::ContextIdSeq * POA_IR::OperationDef_tie<T>::contexts  (
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->contexts (
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
void POA_IR::OperationDef_tie<T>::contexts  (
    const IR::ContextIdSeq & contexts,
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  this->ptr_->contexts (
    contexts,
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
IR::ExceptionDefSeq * POA_IR::OperationDef_tie<T>::exceptions  (
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->exceptions (
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
void POA_IR::OperationDef_tie<T>::exceptions  (
    const IR::ExceptionDefSeq & exceptions,
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  this->ptr_->exceptions (
    exceptions,
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
char * POA_IR::OperationDef_tie<T>::id  (
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->id (
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
void POA_IR::OperationDef_tie<T>::id  (
    const char * id,
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  this->ptr_->id (
    id,
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
char * POA_IR::OperationDef_tie<T>::name  (
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->name (
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
void POA_IR::OperationDef_tie<T>::name  (
    const char * name,
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  this->ptr_->name (
    name,
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
char * POA_IR::OperationDef_tie<T>::version  (
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->version (
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
void POA_IR::OperationDef_tie<T>::version  (
    const char * version,
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  this->ptr_->version (
    version,
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
IR::Container_ptr POA_IR::OperationDef_tie<T>::defined_in  (
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->defined_in (
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
char * POA_IR::OperationDef_tie<T>::absolute_name  (
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->absolute_name (
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
IR::Repository_ptr POA_IR::OperationDef_tie<T>::containing_repository  (
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->containing_repository (
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
IR::Contained::Description * POA_IR::OperationDef_tie<T>::describe  (
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->describe (
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
void POA_IR::OperationDef_tie<T>::move  (
    IR::Container_ptr new_container,
    const char * new_name,
    const char * new_version,
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  this->ptr_->move (
    new_container,
    new_name,
    new_version,
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
IR::DefinitionKind POA_IR::OperationDef_tie<T>::def_kind  (
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->def_kind (
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
void POA_IR::OperationDef_tie<T>::destroy  (
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  this->ptr_->destroy (
    ACE_TRY_ENV
  );
}

#endif /* ACE_HAS_USING_KEYWORD */

#if defined (ACE_HAS_USING_KEYWORD)
template <class T> ACE_INLINE
POA_IR::InterfaceDef_tie<T>::InterfaceDef_tie (T &t)
	: ptr_ (&t),
	  poa_ (PortableServer::POA::_nil ()),
	  rel_ (0)
{}

template <class T> ACE_INLINE
POA_IR::InterfaceDef_tie<T>::InterfaceDef_tie (T &t, PortableServer::POA_ptr poa)
	: ptr_ (&t),
	  poa_ (PortableServer::POA::_duplicate (poa)),
	  rel_ (0)
{}

template <class T> ACE_INLINE
POA_IR::InterfaceDef_tie<T>::InterfaceDef_tie (T *tp, CORBA::Boolean release)
	: ptr_ (tp),
	  poa_ (PortableServer::POA::_nil ()),
	  rel_ (release)
{}

template <class T> ACE_INLINE
POA_IR::InterfaceDef_tie<T>::InterfaceDef_tie (T *tp, PortableServer::POA_ptr poa, CORBA::Boolean release)
	: ptr_ (tp),
	  poa_ (PortableServer::POA::_duplicate (poa)),
	  rel_ (release)
{}

template <class T> ACE_INLINE
POA_IR::InterfaceDef_tie<T>::~InterfaceDef_tie (void)
{
  if (this->rel_) delete this->ptr_;
}

template <class T> ACE_INLINE T *
POA_IR::InterfaceDef_tie<T>::_tied_object (void)
{
  return this->ptr_;
}

template <class T> ACE_INLINE void
POA_IR::InterfaceDef_tie<T>::_tied_object (T &obj)
{
  if (this->rel_) delete this->ptr_;
  this->ptr_ = &obj;
  this->rel_ = 0;
}

template <class T> ACE_INLINE void
POA_IR::InterfaceDef_tie<T>::_tied_object (T *obj, CORBA::Boolean release)
{
  if (this->rel_) delete this->ptr_;
  this->ptr_ = obj;
  this->rel_ = release;
}

template <class T> ACE_INLINE CORBA::Boolean
POA_IR::InterfaceDef_tie<T>::_is_owner (void)
{
  return this->rel_;
}

template <class T> ACE_INLINE void
POA_IR::InterfaceDef_tie<T>::_is_owner (CORBA::Boolean b)
{
  this->rel_ = b;
}

template <class T> ACE_INLINE PortableServer::POA_ptr
POA_IR::InterfaceDef_tie<T>::_default_POA (CORBA::Environment &env)
{
  if (!CORBA::is_nil (this->poa_.in ()))
    return PortableServer::POA::_duplicate (this->poa_.in ());

  return this->InterfaceDef::_default_POA (env);
}

template <class T> ACE_INLINE
IR::InterfaceDefSeq * POA_IR::InterfaceDef_tie<T>::base_interfaces  (
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->base_interfaces (
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
void POA_IR::InterfaceDef_tie<T>::base_interfaces  (
    const IR::InterfaceDefSeq & base_interfaces,
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  this->ptr_->base_interfaces (
    base_interfaces,
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
CORBA::Boolean POA_IR::InterfaceDef_tie<T>::is_abstract  (
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->is_abstract (
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
void POA_IR::InterfaceDef_tie<T>::is_abstract  (
    CORBA::Boolean is_abstract,
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  this->ptr_->is_abstract (
    is_abstract,
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
CORBA::Boolean POA_IR::InterfaceDef_tie<T>::is_local  (
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->is_local (
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
void POA_IR::InterfaceDef_tie<T>::is_local  (
    CORBA::Boolean is_local,
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  this->ptr_->is_local (
    is_local,
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
CORBA::Boolean POA_IR::InterfaceDef_tie<T>::is_a  (
    const char * interface_id,
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->is_a (
    interface_id,
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
IR::AttributeDef_ptr POA_IR::InterfaceDef_tie<T>::create_attribute  (
    const char * id,
    const char * name,
    const char * version,
    IR::IDLType_ptr type,
    IR::AttributeMode mode,
    const IR::ExceptionDefSeq & get_exceptions,
    const IR::ExceptionDefSeq & put_exceptions,
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->create_attribute (
    id,
    name,
    version,
    type,
    mode,
    get_exceptions,
    put_exceptions,
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
IR::OperationDef_ptr POA_IR::InterfaceDef_tie<T>::create_operation  (
    const char * id,
    const char * name,
    const char * version,
    IR::IDLType_ptr result,
    IR::OperationMode mode,
    const IR::ParDescriptionSeq & params,
    const IR::ExceptionDefSeq & exceptions,
    const IR::ContextIdSeq & contexts,
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->create_operation (
    id,
    name,
    version,
    result,
    mode,
    params,
    exceptions,
    contexts,
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
IR::Contained_ptr POA_IR::InterfaceDef_tie<T>::lookup  (
    const char * search_name,
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->lookup (
    search_name,
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
IR::ContainedSeq * POA_IR::InterfaceDef_tie<T>::contents  (
    IR::DefinitionKind limit_type,
    CORBA::Boolean exclude_inherited,
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->contents (
    limit_type,
    exclude_inherited,
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
IR::ContainedSeq * POA_IR::InterfaceDef_tie<T>::lookup_name  (
    const char * search_name,
    CORBA::Long levels_to_search,
    IR::DefinitionKind limit_type,
    CORBA::Boolean exclude_inherited,
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->lookup_name (
    search_name,
    levels_to_search,
    limit_type,
    exclude_inherited,
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
IR::Container::DescriptionSeq * POA_IR::InterfaceDef_tie<T>::describe_contents  (
    IR::DefinitionKind limit_type,
    CORBA::Boolean exclude_inherited,
    CORBA::Long max_returned_objs,
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->describe_contents (
    limit_type,
    exclude_inherited,
    max_returned_objs,
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
IR::ModuleDef_ptr POA_IR::InterfaceDef_tie<T>::create_module  (
    const char * id,
    const char * name,
    const char * version,
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->create_module (
    id,
    name,
    version,
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
IR::ConstantDef_ptr POA_IR::InterfaceDef_tie<T>::create_constant  (
    const char * id,
    const char * name,
    const char * version,
    IR::IDLType_ptr type,
    const CORBA::Any & value,
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->create_constant (
    id,
    name,
    version,
    type,
    value,
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
IR::StructDef_ptr POA_IR::InterfaceDef_tie<T>::create_struct  (
    const char * id,
    const char * name,
    const char * version,
    const IR::StructMemberSeq & members,
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->create_struct (
    id,
    name,
    version,
    members,
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
IR::UnionDef_ptr POA_IR::InterfaceDef_tie<T>::create_union  (
    const char * id,
    const char * name,
    const char * version,
    IR::IDLType_ptr discriminator_type,
    const IR::UnionMemberSeq & members,
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->create_union (
    id,
    name,
    version,
    discriminator_type,
    members,
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
IR::EnumDef_ptr POA_IR::InterfaceDef_tie<T>::create_enum  (
    const char * id,
    const char * name,
    const char * version,
    const IR::EnumMemberSeq & members,
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->create_enum (
    id,
    name,
    version,
    members,
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
IR::AliasDef_ptr POA_IR::InterfaceDef_tie<T>::create_alias  (
    const char * id,
    const char * name,
    const char * version,
    IR::IDLType_ptr original_type,
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->create_alias (
    id,
    name,
    version,
    original_type,
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
IR::InterfaceDef_ptr POA_IR::InterfaceDef_tie<T>::create_interface  (
    const char * id,
    const char * name,
    const char * version,
    const IR::InterfaceDefSeq & base_interfaces,
    CORBA::Boolean is_abstract,
    CORBA::Boolean is_local,
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->create_interface (
    id,
    name,
    version,
    base_interfaces,
    is_abstract,
    is_local,
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
IR::ValueDef_ptr POA_IR::InterfaceDef_tie<T>::create_value  (
    const char * id,
    const char * name,
    const char * version,
    CORBA::Boolean is_custom,
    CORBA::Boolean is_abstract,
    IR::ValueDef_ptr base_value,
    CORBA::Boolean is_truncatable,
    const IR::ValueDefSeq & abstract_base_values,
    const IR::InterfaceDefSeq & supported_interfaces,
    const IR::InitializerSeq & initializers,
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->create_value (
    id,
    name,
    version,
    is_custom,
    is_abstract,
    base_value,
    is_truncatable,
    abstract_base_values,
    supported_interfaces,
    initializers,
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
IR::ValueBoxDef_ptr POA_IR::InterfaceDef_tie<T>::create_value_box  (
    const char * id,
    const char * name,
    const char * version,
    IR::IDLType_ptr original_type_def,
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->create_value_box (
    id,
    name,
    version,
    original_type_def,
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
IR::ExceptionDef_ptr POA_IR::InterfaceDef_tie<T>::create_exception  (
    const char * id,
    const char * name,
    const char * version,
    const IR::StructMemberSeq & members,
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->create_exception (
    id,
    name,
    version,
    members,
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
IR::NativeDef_ptr POA_IR::InterfaceDef_tie<T>::create_native  (
    const char * id,
    const char * name,
    const char * version,
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->create_native (
    id,
    name,
    version,
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
char * POA_IR::InterfaceDef_tie<T>::id  (
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->id (
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
void POA_IR::InterfaceDef_tie<T>::id  (
    const char * id,
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  this->ptr_->id (
    id,
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
char * POA_IR::InterfaceDef_tie<T>::name  (
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->name (
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
void POA_IR::InterfaceDef_tie<T>::name  (
    const char * name,
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  this->ptr_->name (
    name,
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
char * POA_IR::InterfaceDef_tie<T>::version  (
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->version (
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
void POA_IR::InterfaceDef_tie<T>::version  (
    const char * version,
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  this->ptr_->version (
    version,
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
IR::Container_ptr POA_IR::InterfaceDef_tie<T>::defined_in  (
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->defined_in (
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
char * POA_IR::InterfaceDef_tie<T>::absolute_name  (
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->absolute_name (
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
IR::Repository_ptr POA_IR::InterfaceDef_tie<T>::containing_repository  (
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->containing_repository (
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
IR::Contained::Description * POA_IR::InterfaceDef_tie<T>::describe  (
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->describe (
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
void POA_IR::InterfaceDef_tie<T>::move  (
    IR::Container_ptr new_container,
    const char * new_name,
    const char * new_version,
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  this->ptr_->move (
    new_container,
    new_name,
    new_version,
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
CORBA::TypeCode_ptr POA_IR::InterfaceDef_tie<T>::type  (
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->type (
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
IR::DefinitionKind POA_IR::InterfaceDef_tie<T>::def_kind  (
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->def_kind (
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
void POA_IR::InterfaceDef_tie<T>::destroy  (
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  this->ptr_->destroy (
    ACE_TRY_ENV
  );
}

#endif /* ACE_HAS_USING_KEYWORD */

#if defined (ACE_HAS_USING_KEYWORD)
template <class T> ACE_INLINE
POA_IR::ValueMemberDef_tie<T>::ValueMemberDef_tie (T &t)
	: ptr_ (&t),
	  poa_ (PortableServer::POA::_nil ()),
	  rel_ (0)
{}

template <class T> ACE_INLINE
POA_IR::ValueMemberDef_tie<T>::ValueMemberDef_tie (T &t, PortableServer::POA_ptr poa)
	: ptr_ (&t),
	  poa_ (PortableServer::POA::_duplicate (poa)),
	  rel_ (0)
{}

template <class T> ACE_INLINE
POA_IR::ValueMemberDef_tie<T>::ValueMemberDef_tie (T *tp, CORBA::Boolean release)
	: ptr_ (tp),
	  poa_ (PortableServer::POA::_nil ()),
	  rel_ (release)
{}

template <class T> ACE_INLINE
POA_IR::ValueMemberDef_tie<T>::ValueMemberDef_tie (T *tp, PortableServer::POA_ptr poa, CORBA::Boolean release)
	: ptr_ (tp),
	  poa_ (PortableServer::POA::_duplicate (poa)),
	  rel_ (release)
{}

template <class T> ACE_INLINE
POA_IR::ValueMemberDef_tie<T>::~ValueMemberDef_tie (void)
{
  if (this->rel_) delete this->ptr_;
}

template <class T> ACE_INLINE T *
POA_IR::ValueMemberDef_tie<T>::_tied_object (void)
{
  return this->ptr_;
}

template <class T> ACE_INLINE void
POA_IR::ValueMemberDef_tie<T>::_tied_object (T &obj)
{
  if (this->rel_) delete this->ptr_;
  this->ptr_ = &obj;
  this->rel_ = 0;
}

template <class T> ACE_INLINE void
POA_IR::ValueMemberDef_tie<T>::_tied_object (T *obj, CORBA::Boolean release)
{
  if (this->rel_) delete this->ptr_;
  this->ptr_ = obj;
  this->rel_ = release;
}

template <class T> ACE_INLINE CORBA::Boolean
POA_IR::ValueMemberDef_tie<T>::_is_owner (void)
{
  return this->rel_;
}

template <class T> ACE_INLINE void
POA_IR::ValueMemberDef_tie<T>::_is_owner (CORBA::Boolean b)
{
  this->rel_ = b;
}

template <class T> ACE_INLINE PortableServer::POA_ptr
POA_IR::ValueMemberDef_tie<T>::_default_POA (CORBA::Environment &env)
{
  if (!CORBA::is_nil (this->poa_.in ()))
    return PortableServer::POA::_duplicate (this->poa_.in ());

  return this->ValueMemberDef::_default_POA (env);
}

template <class T> ACE_INLINE
CORBA::TypeCode_ptr POA_IR::ValueMemberDef_tie<T>::type  (
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->type (
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
IR::IDLType_ptr POA_IR::ValueMemberDef_tie<T>::type_def  (
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->type_def (
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
void POA_IR::ValueMemberDef_tie<T>::type_def  (
    IR::IDLType_ptr type_def,
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  this->ptr_->type_def (
    type_def,
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
CORBA::Visibility POA_IR::ValueMemberDef_tie<T>::access  (
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->access (
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
void POA_IR::ValueMemberDef_tie<T>::access  (
    CORBA::Visibility access,
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  this->ptr_->access (
    access,
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
char * POA_IR::ValueMemberDef_tie<T>::id  (
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->id (
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
void POA_IR::ValueMemberDef_tie<T>::id  (
    const char * id,
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  this->ptr_->id (
    id,
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
char * POA_IR::ValueMemberDef_tie<T>::name  (
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->name (
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
void POA_IR::ValueMemberDef_tie<T>::name  (
    const char * name,
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  this->ptr_->name (
    name,
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
char * POA_IR::ValueMemberDef_tie<T>::version  (
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->version (
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
void POA_IR::ValueMemberDef_tie<T>::version  (
    const char * version,
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  this->ptr_->version (
    version,
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
IR::Container_ptr POA_IR::ValueMemberDef_tie<T>::defined_in  (
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->defined_in (
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
char * POA_IR::ValueMemberDef_tie<T>::absolute_name  (
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->absolute_name (
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
IR::Repository_ptr POA_IR::ValueMemberDef_tie<T>::containing_repository  (
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->containing_repository (
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
IR::Contained::Description * POA_IR::ValueMemberDef_tie<T>::describe  (
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->describe (
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
void POA_IR::ValueMemberDef_tie<T>::move  (
    IR::Container_ptr new_container,
    const char * new_name,
    const char * new_version,
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  this->ptr_->move (
    new_container,
    new_name,
    new_version,
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
IR::DefinitionKind POA_IR::ValueMemberDef_tie<T>::def_kind  (
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->def_kind (
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
void POA_IR::ValueMemberDef_tie<T>::destroy  (
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  this->ptr_->destroy (
    ACE_TRY_ENV
  );
}

#endif /* ACE_HAS_USING_KEYWORD */

#if defined (ACE_HAS_USING_KEYWORD)
template <class T> ACE_INLINE
POA_IR::ValueDef_tie<T>::ValueDef_tie (T &t)
	: ptr_ (&t),
	  poa_ (PortableServer::POA::_nil ()),
	  rel_ (0)
{}

template <class T> ACE_INLINE
POA_IR::ValueDef_tie<T>::ValueDef_tie (T &t, PortableServer::POA_ptr poa)
	: ptr_ (&t),
	  poa_ (PortableServer::POA::_duplicate (poa)),
	  rel_ (0)
{}

template <class T> ACE_INLINE
POA_IR::ValueDef_tie<T>::ValueDef_tie (T *tp, CORBA::Boolean release)
	: ptr_ (tp),
	  poa_ (PortableServer::POA::_nil ()),
	  rel_ (release)
{}

template <class T> ACE_INLINE
POA_IR::ValueDef_tie<T>::ValueDef_tie (T *tp, PortableServer::POA_ptr poa, CORBA::Boolean release)
	: ptr_ (tp),
	  poa_ (PortableServer::POA::_duplicate (poa)),
	  rel_ (release)
{}

template <class T> ACE_INLINE
POA_IR::ValueDef_tie<T>::~ValueDef_tie (void)
{
  if (this->rel_) delete this->ptr_;
}

template <class T> ACE_INLINE T *
POA_IR::ValueDef_tie<T>::_tied_object (void)
{
  return this->ptr_;
}

template <class T> ACE_INLINE void
POA_IR::ValueDef_tie<T>::_tied_object (T &obj)
{
  if (this->rel_) delete this->ptr_;
  this->ptr_ = &obj;
  this->rel_ = 0;
}

template <class T> ACE_INLINE void
POA_IR::ValueDef_tie<T>::_tied_object (T *obj, CORBA::Boolean release)
{
  if (this->rel_) delete this->ptr_;
  this->ptr_ = obj;
  this->rel_ = release;
}

template <class T> ACE_INLINE CORBA::Boolean
POA_IR::ValueDef_tie<T>::_is_owner (void)
{
  return this->rel_;
}

template <class T> ACE_INLINE void
POA_IR::ValueDef_tie<T>::_is_owner (CORBA::Boolean b)
{
  this->rel_ = b;
}

template <class T> ACE_INLINE PortableServer::POA_ptr
POA_IR::ValueDef_tie<T>::_default_POA (CORBA::Environment &env)
{
  if (!CORBA::is_nil (this->poa_.in ()))
    return PortableServer::POA::_duplicate (this->poa_.in ());

  return this->ValueDef::_default_POA (env);
}

template <class T> ACE_INLINE
IR::InterfaceDefSeq * POA_IR::ValueDef_tie<T>::supported_interfaces  (
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->supported_interfaces (
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
void POA_IR::ValueDef_tie<T>::supported_interfaces  (
    const IR::InterfaceDefSeq & supported_interfaces,
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  this->ptr_->supported_interfaces (
    supported_interfaces,
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
IR::InitializerSeq * POA_IR::ValueDef_tie<T>::initializers  (
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->initializers (
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
void POA_IR::ValueDef_tie<T>::initializers  (
    const IR::InitializerSeq & initializers,
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  this->ptr_->initializers (
    initializers,
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
IR::ValueDef_ptr POA_IR::ValueDef_tie<T>::base_value  (
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->base_value (
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
void POA_IR::ValueDef_tie<T>::base_value  (
    IR::ValueDef_ptr base_value,
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  this->ptr_->base_value (
    base_value,
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
IR::ValueDefSeq * POA_IR::ValueDef_tie<T>::abstract_base_values  (
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->abstract_base_values (
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
void POA_IR::ValueDef_tie<T>::abstract_base_values  (
    const IR::ValueDefSeq & abstract_base_values,
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  this->ptr_->abstract_base_values (
    abstract_base_values,
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
CORBA::Boolean POA_IR::ValueDef_tie<T>::is_abstract  (
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->is_abstract (
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
void POA_IR::ValueDef_tie<T>::is_abstract  (
    CORBA::Boolean is_abstract,
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  this->ptr_->is_abstract (
    is_abstract,
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
CORBA::Boolean POA_IR::ValueDef_tie<T>::is_custom  (
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->is_custom (
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
void POA_IR::ValueDef_tie<T>::is_custom  (
    CORBA::Boolean is_custom,
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  this->ptr_->is_custom (
    is_custom,
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
CORBA::Boolean POA_IR::ValueDef_tie<T>::is_truncatable  (
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->is_truncatable (
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
void POA_IR::ValueDef_tie<T>::is_truncatable  (
    CORBA::Boolean is_truncatable,
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  this->ptr_->is_truncatable (
    is_truncatable,
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
CORBA::Boolean POA_IR::ValueDef_tie<T>::is_a  (
    const char * id,
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->is_a (
    id,
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
IR::ValueMemberDef_ptr POA_IR::ValueDef_tie<T>::create_value_member  (
    const char * id,
    const char * name,
    const char * version,
    IR::IDLType_ptr type,
    CORBA::Visibility access,
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->create_value_member (
    id,
    name,
    version,
    type,
    access,
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
IR::AttributeDef_ptr POA_IR::ValueDef_tie<T>::create_attribute  (
    const char * id,
    const char * name,
    const char * version,
    IR::IDLType_ptr type,
    IR::AttributeMode mode,
    const IR::ExceptionDefSeq & get_exceptions,
    const IR::ExceptionDefSeq & put_exceptions,
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->create_attribute (
    id,
    name,
    version,
    type,
    mode,
    get_exceptions,
    put_exceptions,
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
IR::OperationDef_ptr POA_IR::ValueDef_tie<T>::create_operation  (
    const char * id,
    const char * name,
    const char * version,
    IR::IDLType_ptr result,
    IR::OperationMode mode,
    const IR::ParDescriptionSeq & params,
    const IR::ExceptionDefSeq & exceptions,
    const IR::ContextIdSeq & contexts,
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->create_operation (
    id,
    name,
    version,
    result,
    mode,
    params,
    exceptions,
    contexts,
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
IR::Contained_ptr POA_IR::ValueDef_tie<T>::lookup  (
    const char * search_name,
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->lookup (
    search_name,
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
IR::ContainedSeq * POA_IR::ValueDef_tie<T>::contents  (
    IR::DefinitionKind limit_type,
    CORBA::Boolean exclude_inherited,
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->contents (
    limit_type,
    exclude_inherited,
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
IR::ContainedSeq * POA_IR::ValueDef_tie<T>::lookup_name  (
    const char * search_name,
    CORBA::Long levels_to_search,
    IR::DefinitionKind limit_type,
    CORBA::Boolean exclude_inherited,
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->lookup_name (
    search_name,
    levels_to_search,
    limit_type,
    exclude_inherited,
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
IR::Container::DescriptionSeq * POA_IR::ValueDef_tie<T>::describe_contents  (
    IR::DefinitionKind limit_type,
    CORBA::Boolean exclude_inherited,
    CORBA::Long max_returned_objs,
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->describe_contents (
    limit_type,
    exclude_inherited,
    max_returned_objs,
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
IR::ModuleDef_ptr POA_IR::ValueDef_tie<T>::create_module  (
    const char * id,
    const char * name,
    const char * version,
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->create_module (
    id,
    name,
    version,
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
IR::ConstantDef_ptr POA_IR::ValueDef_tie<T>::create_constant  (
    const char * id,
    const char * name,
    const char * version,
    IR::IDLType_ptr type,
    const CORBA::Any & value,
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->create_constant (
    id,
    name,
    version,
    type,
    value,
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
IR::StructDef_ptr POA_IR::ValueDef_tie<T>::create_struct  (
    const char * id,
    const char * name,
    const char * version,
    const IR::StructMemberSeq & members,
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->create_struct (
    id,
    name,
    version,
    members,
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
IR::UnionDef_ptr POA_IR::ValueDef_tie<T>::create_union  (
    const char * id,
    const char * name,
    const char * version,
    IR::IDLType_ptr discriminator_type,
    const IR::UnionMemberSeq & members,
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->create_union (
    id,
    name,
    version,
    discriminator_type,
    members,
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
IR::EnumDef_ptr POA_IR::ValueDef_tie<T>::create_enum  (
    const char * id,
    const char * name,
    const char * version,
    const IR::EnumMemberSeq & members,
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->create_enum (
    id,
    name,
    version,
    members,
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
IR::AliasDef_ptr POA_IR::ValueDef_tie<T>::create_alias  (
    const char * id,
    const char * name,
    const char * version,
    IR::IDLType_ptr original_type,
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->create_alias (
    id,
    name,
    version,
    original_type,
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
IR::InterfaceDef_ptr POA_IR::ValueDef_tie<T>::create_interface  (
    const char * id,
    const char * name,
    const char * version,
    const IR::InterfaceDefSeq & base_interfaces,
    CORBA::Boolean is_abstract,
    CORBA::Boolean is_local,
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->create_interface (
    id,
    name,
    version,
    base_interfaces,
    is_abstract,
    is_local,
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
IR::ValueDef_ptr POA_IR::ValueDef_tie<T>::create_value  (
    const char * id,
    const char * name,
    const char * version,
    CORBA::Boolean is_custom,
    CORBA::Boolean is_abstract,
    IR::ValueDef_ptr base_value,
    CORBA::Boolean is_truncatable,
    const IR::ValueDefSeq & abstract_base_values,
    const IR::InterfaceDefSeq & supported_interfaces,
    const IR::InitializerSeq & initializers,
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->create_value (
    id,
    name,
    version,
    is_custom,
    is_abstract,
    base_value,
    is_truncatable,
    abstract_base_values,
    supported_interfaces,
    initializers,
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
IR::ValueBoxDef_ptr POA_IR::ValueDef_tie<T>::create_value_box  (
    const char * id,
    const char * name,
    const char * version,
    IR::IDLType_ptr original_type_def,
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->create_value_box (
    id,
    name,
    version,
    original_type_def,
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
IR::ExceptionDef_ptr POA_IR::ValueDef_tie<T>::create_exception  (
    const char * id,
    const char * name,
    const char * version,
    const IR::StructMemberSeq & members,
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->create_exception (
    id,
    name,
    version,
    members,
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
IR::NativeDef_ptr POA_IR::ValueDef_tie<T>::create_native  (
    const char * id,
    const char * name,
    const char * version,
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->create_native (
    id,
    name,
    version,
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
char * POA_IR::ValueDef_tie<T>::id  (
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->id (
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
void POA_IR::ValueDef_tie<T>::id  (
    const char * id,
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  this->ptr_->id (
    id,
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
char * POA_IR::ValueDef_tie<T>::name  (
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->name (
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
void POA_IR::ValueDef_tie<T>::name  (
    const char * name,
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  this->ptr_->name (
    name,
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
char * POA_IR::ValueDef_tie<T>::version  (
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->version (
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
void POA_IR::ValueDef_tie<T>::version  (
    const char * version,
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  this->ptr_->version (
    version,
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
IR::Container_ptr POA_IR::ValueDef_tie<T>::defined_in  (
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->defined_in (
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
char * POA_IR::ValueDef_tie<T>::absolute_name  (
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->absolute_name (
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
IR::Repository_ptr POA_IR::ValueDef_tie<T>::containing_repository  (
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->containing_repository (
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
IR::Contained::Description * POA_IR::ValueDef_tie<T>::describe  (
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->describe (
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
void POA_IR::ValueDef_tie<T>::move  (
    IR::Container_ptr new_container,
    const char * new_name,
    const char * new_version,
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  this->ptr_->move (
    new_container,
    new_name,
    new_version,
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
CORBA::TypeCode_ptr POA_IR::ValueDef_tie<T>::type  (
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->type (
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
IR::DefinitionKind POA_IR::ValueDef_tie<T>::def_kind  (
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->def_kind (
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
void POA_IR::ValueDef_tie<T>::destroy  (
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  this->ptr_->destroy (
    ACE_TRY_ENV
  );
}

#endif /* ACE_HAS_USING_KEYWORD */

#if defined (ACE_HAS_USING_KEYWORD)
template <class T> ACE_INLINE
POA_IR::ValueBoxDef_tie<T>::ValueBoxDef_tie (T &t)
	: ptr_ (&t),
	  poa_ (PortableServer::POA::_nil ()),
	  rel_ (0)
{}

template <class T> ACE_INLINE
POA_IR::ValueBoxDef_tie<T>::ValueBoxDef_tie (T &t, PortableServer::POA_ptr poa)
	: ptr_ (&t),
	  poa_ (PortableServer::POA::_duplicate (poa)),
	  rel_ (0)
{}

template <class T> ACE_INLINE
POA_IR::ValueBoxDef_tie<T>::ValueBoxDef_tie (T *tp, CORBA::Boolean release)
	: ptr_ (tp),
	  poa_ (PortableServer::POA::_nil ()),
	  rel_ (release)
{}

template <class T> ACE_INLINE
POA_IR::ValueBoxDef_tie<T>::ValueBoxDef_tie (T *tp, PortableServer::POA_ptr poa, CORBA::Boolean release)
	: ptr_ (tp),
	  poa_ (PortableServer::POA::_duplicate (poa)),
	  rel_ (release)
{}

template <class T> ACE_INLINE
POA_IR::ValueBoxDef_tie<T>::~ValueBoxDef_tie (void)
{
  if (this->rel_) delete this->ptr_;
}

template <class T> ACE_INLINE T *
POA_IR::ValueBoxDef_tie<T>::_tied_object (void)
{
  return this->ptr_;
}

template <class T> ACE_INLINE void
POA_IR::ValueBoxDef_tie<T>::_tied_object (T &obj)
{
  if (this->rel_) delete this->ptr_;
  this->ptr_ = &obj;
  this->rel_ = 0;
}

template <class T> ACE_INLINE void
POA_IR::ValueBoxDef_tie<T>::_tied_object (T *obj, CORBA::Boolean release)
{
  if (this->rel_) delete this->ptr_;
  this->ptr_ = obj;
  this->rel_ = release;
}

template <class T> ACE_INLINE CORBA::Boolean
POA_IR::ValueBoxDef_tie<T>::_is_owner (void)
{
  return this->rel_;
}

template <class T> ACE_INLINE void
POA_IR::ValueBoxDef_tie<T>::_is_owner (CORBA::Boolean b)
{
  this->rel_ = b;
}

template <class T> ACE_INLINE PortableServer::POA_ptr
POA_IR::ValueBoxDef_tie<T>::_default_POA (CORBA::Environment &env)
{
  if (!CORBA::is_nil (this->poa_.in ()))
    return PortableServer::POA::_duplicate (this->poa_.in ());

  return this->ValueBoxDef::_default_POA (env);
}

template <class T> ACE_INLINE
IR::IDLType_ptr POA_IR::ValueBoxDef_tie<T>::original_type_def  (
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->original_type_def (
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
void POA_IR::ValueBoxDef_tie<T>::original_type_def  (
    IR::IDLType_ptr original_type_def,
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  this->ptr_->original_type_def (
    original_type_def,
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
char * POA_IR::ValueBoxDef_tie<T>::id  (
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->id (
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
void POA_IR::ValueBoxDef_tie<T>::id  (
    const char * id,
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  this->ptr_->id (
    id,
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
char * POA_IR::ValueBoxDef_tie<T>::name  (
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->name (
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
void POA_IR::ValueBoxDef_tie<T>::name  (
    const char * name,
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  this->ptr_->name (
    name,
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
char * POA_IR::ValueBoxDef_tie<T>::version  (
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->version (
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
void POA_IR::ValueBoxDef_tie<T>::version  (
    const char * version,
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  this->ptr_->version (
    version,
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
IR::Container_ptr POA_IR::ValueBoxDef_tie<T>::defined_in  (
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->defined_in (
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
char * POA_IR::ValueBoxDef_tie<T>::absolute_name  (
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->absolute_name (
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
IR::Repository_ptr POA_IR::ValueBoxDef_tie<T>::containing_repository  (
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->containing_repository (
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
IR::Contained::Description * POA_IR::ValueBoxDef_tie<T>::describe  (
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->describe (
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
void POA_IR::ValueBoxDef_tie<T>::move  (
    IR::Container_ptr new_container,
    const char * new_name,
    const char * new_version,
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  this->ptr_->move (
    new_container,
    new_name,
    new_version,
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
CORBA::TypeCode_ptr POA_IR::ValueBoxDef_tie<T>::type  (
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->type (
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
IR::DefinitionKind POA_IR::ValueBoxDef_tie<T>::def_kind  (
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->def_kind (
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
void POA_IR::ValueBoxDef_tie<T>::destroy  (
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  this->ptr_->destroy (
    ACE_TRY_ENV
  );
}

#endif /* ACE_HAS_USING_KEYWORD */

#if defined (ACE_HAS_USING_KEYWORD)
template <class T> ACE_INLINE
POA_IR::ProvidesDef_tie<T>::ProvidesDef_tie (T &t)
	: ptr_ (&t),
	  poa_ (PortableServer::POA::_nil ()),
	  rel_ (0)
{}

template <class T> ACE_INLINE
POA_IR::ProvidesDef_tie<T>::ProvidesDef_tie (T &t, PortableServer::POA_ptr poa)
	: ptr_ (&t),
	  poa_ (PortableServer::POA::_duplicate (poa)),
	  rel_ (0)
{}

template <class T> ACE_INLINE
POA_IR::ProvidesDef_tie<T>::ProvidesDef_tie (T *tp, CORBA::Boolean release)
	: ptr_ (tp),
	  poa_ (PortableServer::POA::_nil ()),
	  rel_ (release)
{}

template <class T> ACE_INLINE
POA_IR::ProvidesDef_tie<T>::ProvidesDef_tie (T *tp, PortableServer::POA_ptr poa, CORBA::Boolean release)
	: ptr_ (tp),
	  poa_ (PortableServer::POA::_duplicate (poa)),
	  rel_ (release)
{}

template <class T> ACE_INLINE
POA_IR::ProvidesDef_tie<T>::~ProvidesDef_tie (void)
{
  if (this->rel_) delete this->ptr_;
}

template <class T> ACE_INLINE T *
POA_IR::ProvidesDef_tie<T>::_tied_object (void)
{
  return this->ptr_;
}

template <class T> ACE_INLINE void
POA_IR::ProvidesDef_tie<T>::_tied_object (T &obj)
{
  if (this->rel_) delete this->ptr_;
  this->ptr_ = &obj;
  this->rel_ = 0;
}

template <class T> ACE_INLINE void
POA_IR::ProvidesDef_tie<T>::_tied_object (T *obj, CORBA::Boolean release)
{
  if (this->rel_) delete this->ptr_;
  this->ptr_ = obj;
  this->rel_ = release;
}

template <class T> ACE_INLINE CORBA::Boolean
POA_IR::ProvidesDef_tie<T>::_is_owner (void)
{
  return this->rel_;
}

template <class T> ACE_INLINE void
POA_IR::ProvidesDef_tie<T>::_is_owner (CORBA::Boolean b)
{
  this->rel_ = b;
}

template <class T> ACE_INLINE PortableServer::POA_ptr
POA_IR::ProvidesDef_tie<T>::_default_POA (CORBA::Environment &env)
{
  if (!CORBA::is_nil (this->poa_.in ()))
    return PortableServer::POA::_duplicate (this->poa_.in ());

  return this->ProvidesDef::_default_POA (env);
}

template <class T> ACE_INLINE
IR::InterfaceDef_ptr POA_IR::ProvidesDef_tie<T>::interface_type  (
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->interface_type (
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
char * POA_IR::ProvidesDef_tie<T>::id  (
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->id (
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
void POA_IR::ProvidesDef_tie<T>::id  (
    const char * id,
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  this->ptr_->id (
    id,
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
char * POA_IR::ProvidesDef_tie<T>::name  (
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->name (
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
void POA_IR::ProvidesDef_tie<T>::name  (
    const char * name,
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  this->ptr_->name (
    name,
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
char * POA_IR::ProvidesDef_tie<T>::version  (
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->version (
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
void POA_IR::ProvidesDef_tie<T>::version  (
    const char * version,
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  this->ptr_->version (
    version,
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
IR::Container_ptr POA_IR::ProvidesDef_tie<T>::defined_in  (
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->defined_in (
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
char * POA_IR::ProvidesDef_tie<T>::absolute_name  (
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->absolute_name (
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
IR::Repository_ptr POA_IR::ProvidesDef_tie<T>::containing_repository  (
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->containing_repository (
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
IR::Contained::Description * POA_IR::ProvidesDef_tie<T>::describe  (
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->describe (
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
void POA_IR::ProvidesDef_tie<T>::move  (
    IR::Container_ptr new_container,
    const char * new_name,
    const char * new_version,
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  this->ptr_->move (
    new_container,
    new_name,
    new_version,
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
IR::DefinitionKind POA_IR::ProvidesDef_tie<T>::def_kind  (
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->def_kind (
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
void POA_IR::ProvidesDef_tie<T>::destroy  (
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  this->ptr_->destroy (
    ACE_TRY_ENV
  );
}

#endif /* ACE_HAS_USING_KEYWORD */

#if defined (ACE_HAS_USING_KEYWORD)
template <class T> ACE_INLINE
POA_IR::UsesDef_tie<T>::UsesDef_tie (T &t)
	: ptr_ (&t),
	  poa_ (PortableServer::POA::_nil ()),
	  rel_ (0)
{}

template <class T> ACE_INLINE
POA_IR::UsesDef_tie<T>::UsesDef_tie (T &t, PortableServer::POA_ptr poa)
	: ptr_ (&t),
	  poa_ (PortableServer::POA::_duplicate (poa)),
	  rel_ (0)
{}

template <class T> ACE_INLINE
POA_IR::UsesDef_tie<T>::UsesDef_tie (T *tp, CORBA::Boolean release)
	: ptr_ (tp),
	  poa_ (PortableServer::POA::_nil ()),
	  rel_ (release)
{}

template <class T> ACE_INLINE
POA_IR::UsesDef_tie<T>::UsesDef_tie (T *tp, PortableServer::POA_ptr poa, CORBA::Boolean release)
	: ptr_ (tp),
	  poa_ (PortableServer::POA::_duplicate (poa)),
	  rel_ (release)
{}

template <class T> ACE_INLINE
POA_IR::UsesDef_tie<T>::~UsesDef_tie (void)
{
  if (this->rel_) delete this->ptr_;
}

template <class T> ACE_INLINE T *
POA_IR::UsesDef_tie<T>::_tied_object (void)
{
  return this->ptr_;
}

template <class T> ACE_INLINE void
POA_IR::UsesDef_tie<T>::_tied_object (T &obj)
{
  if (this->rel_) delete this->ptr_;
  this->ptr_ = &obj;
  this->rel_ = 0;
}

template <class T> ACE_INLINE void
POA_IR::UsesDef_tie<T>::_tied_object (T *obj, CORBA::Boolean release)
{
  if (this->rel_) delete this->ptr_;
  this->ptr_ = obj;
  this->rel_ = release;
}

template <class T> ACE_INLINE CORBA::Boolean
POA_IR::UsesDef_tie<T>::_is_owner (void)
{
  return this->rel_;
}

template <class T> ACE_INLINE void
POA_IR::UsesDef_tie<T>::_is_owner (CORBA::Boolean b)
{
  this->rel_ = b;
}

template <class T> ACE_INLINE PortableServer::POA_ptr
POA_IR::UsesDef_tie<T>::_default_POA (CORBA::Environment &env)
{
  if (!CORBA::is_nil (this->poa_.in ()))
    return PortableServer::POA::_duplicate (this->poa_.in ());

  return this->UsesDef::_default_POA (env);
}

template <class T> ACE_INLINE
IR::InterfaceDef_ptr POA_IR::UsesDef_tie<T>::interface_type  (
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->interface_type (
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
CORBA::Boolean POA_IR::UsesDef_tie<T>::is_multiple  (
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->is_multiple (
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
char * POA_IR::UsesDef_tie<T>::id  (
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->id (
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
void POA_IR::UsesDef_tie<T>::id  (
    const char * id,
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  this->ptr_->id (
    id,
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
char * POA_IR::UsesDef_tie<T>::name  (
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->name (
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
void POA_IR::UsesDef_tie<T>::name  (
    const char * name,
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  this->ptr_->name (
    name,
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
char * POA_IR::UsesDef_tie<T>::version  (
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->version (
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
void POA_IR::UsesDef_tie<T>::version  (
    const char * version,
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  this->ptr_->version (
    version,
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
IR::Container_ptr POA_IR::UsesDef_tie<T>::defined_in  (
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->defined_in (
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
char * POA_IR::UsesDef_tie<T>::absolute_name  (
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->absolute_name (
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
IR::Repository_ptr POA_IR::UsesDef_tie<T>::containing_repository  (
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->containing_repository (
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
IR::Contained::Description * POA_IR::UsesDef_tie<T>::describe  (
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->describe (
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
void POA_IR::UsesDef_tie<T>::move  (
    IR::Container_ptr new_container,
    const char * new_name,
    const char * new_version,
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  this->ptr_->move (
    new_container,
    new_name,
    new_version,
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
IR::DefinitionKind POA_IR::UsesDef_tie<T>::def_kind  (
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->def_kind (
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
void POA_IR::UsesDef_tie<T>::destroy  (
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  this->ptr_->destroy (
    ACE_TRY_ENV
  );
}

#endif /* ACE_HAS_USING_KEYWORD */

#if defined (ACE_HAS_USING_KEYWORD)
template <class T> ACE_INLINE
POA_IR::EventDef_tie<T>::EventDef_tie (T &t)
	: ptr_ (&t),
	  poa_ (PortableServer::POA::_nil ()),
	  rel_ (0)
{}

template <class T> ACE_INLINE
POA_IR::EventDef_tie<T>::EventDef_tie (T &t, PortableServer::POA_ptr poa)
	: ptr_ (&t),
	  poa_ (PortableServer::POA::_duplicate (poa)),
	  rel_ (0)
{}

template <class T> ACE_INLINE
POA_IR::EventDef_tie<T>::EventDef_tie (T *tp, CORBA::Boolean release)
	: ptr_ (tp),
	  poa_ (PortableServer::POA::_nil ()),
	  rel_ (release)
{}

template <class T> ACE_INLINE
POA_IR::EventDef_tie<T>::EventDef_tie (T *tp, PortableServer::POA_ptr poa, CORBA::Boolean release)
	: ptr_ (tp),
	  poa_ (PortableServer::POA::_duplicate (poa)),
	  rel_ (release)
{}

template <class T> ACE_INLINE
POA_IR::EventDef_tie<T>::~EventDef_tie (void)
{
  if (this->rel_) delete this->ptr_;
}

template <class T> ACE_INLINE T *
POA_IR::EventDef_tie<T>::_tied_object (void)
{
  return this->ptr_;
}

template <class T> ACE_INLINE void
POA_IR::EventDef_tie<T>::_tied_object (T &obj)
{
  if (this->rel_) delete this->ptr_;
  this->ptr_ = &obj;
  this->rel_ = 0;
}

template <class T> ACE_INLINE void
POA_IR::EventDef_tie<T>::_tied_object (T *obj, CORBA::Boolean release)
{
  if (this->rel_) delete this->ptr_;
  this->ptr_ = obj;
  this->rel_ = release;
}

template <class T> ACE_INLINE CORBA::Boolean
POA_IR::EventDef_tie<T>::_is_owner (void)
{
  return this->rel_;
}

template <class T> ACE_INLINE void
POA_IR::EventDef_tie<T>::_is_owner (CORBA::Boolean b)
{
  this->rel_ = b;
}

template <class T> ACE_INLINE PortableServer::POA_ptr
POA_IR::EventDef_tie<T>::_default_POA (CORBA::Environment &env)
{
  if (!CORBA::is_nil (this->poa_.in ()))
    return PortableServer::POA::_duplicate (this->poa_.in ());

  return this->EventDef::_default_POA (env);
}

template <class T> ACE_INLINE
CORBA::Boolean POA_IR::EventDef_tie<T>::is_a  (
    const char * event_id,
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->is_a (
    event_id,
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
IR::ValueDef_ptr POA_IR::EventDef_tie<T>::event  (
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->event (
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
char * POA_IR::EventDef_tie<T>::id  (
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->id (
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
void POA_IR::EventDef_tie<T>::id  (
    const char * id,
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  this->ptr_->id (
    id,
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
char * POA_IR::EventDef_tie<T>::name  (
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->name (
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
void POA_IR::EventDef_tie<T>::name  (
    const char * name,
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  this->ptr_->name (
    name,
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
char * POA_IR::EventDef_tie<T>::version  (
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->version (
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
void POA_IR::EventDef_tie<T>::version  (
    const char * version,
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  this->ptr_->version (
    version,
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
IR::Container_ptr POA_IR::EventDef_tie<T>::defined_in  (
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->defined_in (
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
char * POA_IR::EventDef_tie<T>::absolute_name  (
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->absolute_name (
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
IR::Repository_ptr POA_IR::EventDef_tie<T>::containing_repository  (
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->containing_repository (
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
IR::Contained::Description * POA_IR::EventDef_tie<T>::describe  (
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->describe (
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
void POA_IR::EventDef_tie<T>::move  (
    IR::Container_ptr new_container,
    const char * new_name,
    const char * new_version,
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  this->ptr_->move (
    new_container,
    new_name,
    new_version,
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
IR::DefinitionKind POA_IR::EventDef_tie<T>::def_kind  (
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->def_kind (
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
void POA_IR::EventDef_tie<T>::destroy  (
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  this->ptr_->destroy (
    ACE_TRY_ENV
  );
}

#endif /* ACE_HAS_USING_KEYWORD */

#if defined (ACE_HAS_USING_KEYWORD)
template <class T> ACE_INLINE
POA_IR::EmitsDef_tie<T>::EmitsDef_tie (T &t)
	: ptr_ (&t),
	  poa_ (PortableServer::POA::_nil ()),
	  rel_ (0)
{}

template <class T> ACE_INLINE
POA_IR::EmitsDef_tie<T>::EmitsDef_tie (T &t, PortableServer::POA_ptr poa)
	: ptr_ (&t),
	  poa_ (PortableServer::POA::_duplicate (poa)),
	  rel_ (0)
{}

template <class T> ACE_INLINE
POA_IR::EmitsDef_tie<T>::EmitsDef_tie (T *tp, CORBA::Boolean release)
	: ptr_ (tp),
	  poa_ (PortableServer::POA::_nil ()),
	  rel_ (release)
{}

template <class T> ACE_INLINE
POA_IR::EmitsDef_tie<T>::EmitsDef_tie (T *tp, PortableServer::POA_ptr poa, CORBA::Boolean release)
	: ptr_ (tp),
	  poa_ (PortableServer::POA::_duplicate (poa)),
	  rel_ (release)
{}

template <class T> ACE_INLINE
POA_IR::EmitsDef_tie<T>::~EmitsDef_tie (void)
{
  if (this->rel_) delete this->ptr_;
}

template <class T> ACE_INLINE T *
POA_IR::EmitsDef_tie<T>::_tied_object (void)
{
  return this->ptr_;
}

template <class T> ACE_INLINE void
POA_IR::EmitsDef_tie<T>::_tied_object (T &obj)
{
  if (this->rel_) delete this->ptr_;
  this->ptr_ = &obj;
  this->rel_ = 0;
}

template <class T> ACE_INLINE void
POA_IR::EmitsDef_tie<T>::_tied_object (T *obj, CORBA::Boolean release)
{
  if (this->rel_) delete this->ptr_;
  this->ptr_ = obj;
  this->rel_ = release;
}

template <class T> ACE_INLINE CORBA::Boolean
POA_IR::EmitsDef_tie<T>::_is_owner (void)
{
  return this->rel_;
}

template <class T> ACE_INLINE void
POA_IR::EmitsDef_tie<T>::_is_owner (CORBA::Boolean b)
{
  this->rel_ = b;
}

template <class T> ACE_INLINE PortableServer::POA_ptr
POA_IR::EmitsDef_tie<T>::_default_POA (CORBA::Environment &env)
{
  if (!CORBA::is_nil (this->poa_.in ()))
    return PortableServer::POA::_duplicate (this->poa_.in ());

  return this->EmitsDef::_default_POA (env);
}

template <class T> ACE_INLINE
CORBA::Boolean POA_IR::EmitsDef_tie<T>::is_a  (
    const char * event_id,
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->is_a (
    event_id,
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
IR::ValueDef_ptr POA_IR::EmitsDef_tie<T>::event  (
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->event (
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
char * POA_IR::EmitsDef_tie<T>::id  (
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->id (
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
void POA_IR::EmitsDef_tie<T>::id  (
    const char * id,
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  this->ptr_->id (
    id,
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
char * POA_IR::EmitsDef_tie<T>::name  (
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->name (
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
void POA_IR::EmitsDef_tie<T>::name  (
    const char * name,
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  this->ptr_->name (
    name,
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
char * POA_IR::EmitsDef_tie<T>::version  (
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->version (
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
void POA_IR::EmitsDef_tie<T>::version  (
    const char * version,
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  this->ptr_->version (
    version,
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
IR::Container_ptr POA_IR::EmitsDef_tie<T>::defined_in  (
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->defined_in (
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
char * POA_IR::EmitsDef_tie<T>::absolute_name  (
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->absolute_name (
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
IR::Repository_ptr POA_IR::EmitsDef_tie<T>::containing_repository  (
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->containing_repository (
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
IR::Contained::Description * POA_IR::EmitsDef_tie<T>::describe  (
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->describe (
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
void POA_IR::EmitsDef_tie<T>::move  (
    IR::Container_ptr new_container,
    const char * new_name,
    const char * new_version,
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  this->ptr_->move (
    new_container,
    new_name,
    new_version,
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
IR::DefinitionKind POA_IR::EmitsDef_tie<T>::def_kind  (
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->def_kind (
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
void POA_IR::EmitsDef_tie<T>::destroy  (
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  this->ptr_->destroy (
    ACE_TRY_ENV
  );
}

#endif /* ACE_HAS_USING_KEYWORD */

#if defined (ACE_HAS_USING_KEYWORD)
template <class T> ACE_INLINE
POA_IR::PublishesDef_tie<T>::PublishesDef_tie (T &t)
	: ptr_ (&t),
	  poa_ (PortableServer::POA::_nil ()),
	  rel_ (0)
{}

template <class T> ACE_INLINE
POA_IR::PublishesDef_tie<T>::PublishesDef_tie (T &t, PortableServer::POA_ptr poa)
	: ptr_ (&t),
	  poa_ (PortableServer::POA::_duplicate (poa)),
	  rel_ (0)
{}

template <class T> ACE_INLINE
POA_IR::PublishesDef_tie<T>::PublishesDef_tie (T *tp, CORBA::Boolean release)
	: ptr_ (tp),
	  poa_ (PortableServer::POA::_nil ()),
	  rel_ (release)
{}

template <class T> ACE_INLINE
POA_IR::PublishesDef_tie<T>::PublishesDef_tie (T *tp, PortableServer::POA_ptr poa, CORBA::Boolean release)
	: ptr_ (tp),
	  poa_ (PortableServer::POA::_duplicate (poa)),
	  rel_ (release)
{}

template <class T> ACE_INLINE
POA_IR::PublishesDef_tie<T>::~PublishesDef_tie (void)
{
  if (this->rel_) delete this->ptr_;
}

template <class T> ACE_INLINE T *
POA_IR::PublishesDef_tie<T>::_tied_object (void)
{
  return this->ptr_;
}

template <class T> ACE_INLINE void
POA_IR::PublishesDef_tie<T>::_tied_object (T &obj)
{
  if (this->rel_) delete this->ptr_;
  this->ptr_ = &obj;
  this->rel_ = 0;
}

template <class T> ACE_INLINE void
POA_IR::PublishesDef_tie<T>::_tied_object (T *obj, CORBA::Boolean release)
{
  if (this->rel_) delete this->ptr_;
  this->ptr_ = obj;
  this->rel_ = release;
}

template <class T> ACE_INLINE CORBA::Boolean
POA_IR::PublishesDef_tie<T>::_is_owner (void)
{
  return this->rel_;
}

template <class T> ACE_INLINE void
POA_IR::PublishesDef_tie<T>::_is_owner (CORBA::Boolean b)
{
  this->rel_ = b;
}

template <class T> ACE_INLINE PortableServer::POA_ptr
POA_IR::PublishesDef_tie<T>::_default_POA (CORBA::Environment &env)
{
  if (!CORBA::is_nil (this->poa_.in ()))
    return PortableServer::POA::_duplicate (this->poa_.in ());

  return this->PublishesDef::_default_POA (env);
}

template <class T> ACE_INLINE
CORBA::Boolean POA_IR::PublishesDef_tie<T>::is_a  (
    const char * event_id,
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->is_a (
    event_id,
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
IR::ValueDef_ptr POA_IR::PublishesDef_tie<T>::event  (
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->event (
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
char * POA_IR::PublishesDef_tie<T>::id  (
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->id (
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
void POA_IR::PublishesDef_tie<T>::id  (
    const char * id,
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  this->ptr_->id (
    id,
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
char * POA_IR::PublishesDef_tie<T>::name  (
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->name (
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
void POA_IR::PublishesDef_tie<T>::name  (
    const char * name,
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  this->ptr_->name (
    name,
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
char * POA_IR::PublishesDef_tie<T>::version  (
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->version (
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
void POA_IR::PublishesDef_tie<T>::version  (
    const char * version,
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  this->ptr_->version (
    version,
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
IR::Container_ptr POA_IR::PublishesDef_tie<T>::defined_in  (
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->defined_in (
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
char * POA_IR::PublishesDef_tie<T>::absolute_name  (
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->absolute_name (
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
IR::Repository_ptr POA_IR::PublishesDef_tie<T>::containing_repository  (
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->containing_repository (
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
IR::Contained::Description * POA_IR::PublishesDef_tie<T>::describe  (
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->describe (
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
void POA_IR::PublishesDef_tie<T>::move  (
    IR::Container_ptr new_container,
    const char * new_name,
    const char * new_version,
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  this->ptr_->move (
    new_container,
    new_name,
    new_version,
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
IR::DefinitionKind POA_IR::PublishesDef_tie<T>::def_kind  (
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->def_kind (
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
void POA_IR::PublishesDef_tie<T>::destroy  (
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  this->ptr_->destroy (
    ACE_TRY_ENV
  );
}

#endif /* ACE_HAS_USING_KEYWORD */

#if defined (ACE_HAS_USING_KEYWORD)
template <class T> ACE_INLINE
POA_IR::ConsumesDef_tie<T>::ConsumesDef_tie (T &t)
	: ptr_ (&t),
	  poa_ (PortableServer::POA::_nil ()),
	  rel_ (0)
{}

template <class T> ACE_INLINE
POA_IR::ConsumesDef_tie<T>::ConsumesDef_tie (T &t, PortableServer::POA_ptr poa)
	: ptr_ (&t),
	  poa_ (PortableServer::POA::_duplicate (poa)),
	  rel_ (0)
{}

template <class T> ACE_INLINE
POA_IR::ConsumesDef_tie<T>::ConsumesDef_tie (T *tp, CORBA::Boolean release)
	: ptr_ (tp),
	  poa_ (PortableServer::POA::_nil ()),
	  rel_ (release)
{}

template <class T> ACE_INLINE
POA_IR::ConsumesDef_tie<T>::ConsumesDef_tie (T *tp, PortableServer::POA_ptr poa, CORBA::Boolean release)
	: ptr_ (tp),
	  poa_ (PortableServer::POA::_duplicate (poa)),
	  rel_ (release)
{}

template <class T> ACE_INLINE
POA_IR::ConsumesDef_tie<T>::~ConsumesDef_tie (void)
{
  if (this->rel_) delete this->ptr_;
}

template <class T> ACE_INLINE T *
POA_IR::ConsumesDef_tie<T>::_tied_object (void)
{
  return this->ptr_;
}

template <class T> ACE_INLINE void
POA_IR::ConsumesDef_tie<T>::_tied_object (T &obj)
{
  if (this->rel_) delete this->ptr_;
  this->ptr_ = &obj;
  this->rel_ = 0;
}

template <class T> ACE_INLINE void
POA_IR::ConsumesDef_tie<T>::_tied_object (T *obj, CORBA::Boolean release)
{
  if (this->rel_) delete this->ptr_;
  this->ptr_ = obj;
  this->rel_ = release;
}

template <class T> ACE_INLINE CORBA::Boolean
POA_IR::ConsumesDef_tie<T>::_is_owner (void)
{
  return this->rel_;
}

template <class T> ACE_INLINE void
POA_IR::ConsumesDef_tie<T>::_is_owner (CORBA::Boolean b)
{
  this->rel_ = b;
}

template <class T> ACE_INLINE PortableServer::POA_ptr
POA_IR::ConsumesDef_tie<T>::_default_POA (CORBA::Environment &env)
{
  if (!CORBA::is_nil (this->poa_.in ()))
    return PortableServer::POA::_duplicate (this->poa_.in ());

  return this->ConsumesDef::_default_POA (env);
}

template <class T> ACE_INLINE
CORBA::Boolean POA_IR::ConsumesDef_tie<T>::is_a  (
    const char * event_id,
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->is_a (
    event_id,
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
IR::ValueDef_ptr POA_IR::ConsumesDef_tie<T>::event  (
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->event (
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
char * POA_IR::ConsumesDef_tie<T>::id  (
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->id (
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
void POA_IR::ConsumesDef_tie<T>::id  (
    const char * id,
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  this->ptr_->id (
    id,
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
char * POA_IR::ConsumesDef_tie<T>::name  (
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->name (
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
void POA_IR::ConsumesDef_tie<T>::name  (
    const char * name,
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  this->ptr_->name (
    name,
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
char * POA_IR::ConsumesDef_tie<T>::version  (
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->version (
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
void POA_IR::ConsumesDef_tie<T>::version  (
    const char * version,
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  this->ptr_->version (
    version,
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
IR::Container_ptr POA_IR::ConsumesDef_tie<T>::defined_in  (
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->defined_in (
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
char * POA_IR::ConsumesDef_tie<T>::absolute_name  (
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->absolute_name (
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
IR::Repository_ptr POA_IR::ConsumesDef_tie<T>::containing_repository  (
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->containing_repository (
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
IR::Contained::Description * POA_IR::ConsumesDef_tie<T>::describe  (
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->describe (
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
void POA_IR::ConsumesDef_tie<T>::move  (
    IR::Container_ptr new_container,
    const char * new_name,
    const char * new_version,
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  this->ptr_->move (
    new_container,
    new_name,
    new_version,
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
IR::DefinitionKind POA_IR::ConsumesDef_tie<T>::def_kind  (
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->def_kind (
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
void POA_IR::ConsumesDef_tie<T>::destroy  (
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  this->ptr_->destroy (
    ACE_TRY_ENV
  );
}

#endif /* ACE_HAS_USING_KEYWORD */

#if defined (ACE_HAS_USING_KEYWORD)
template <class T> ACE_INLINE
POA_IR::ComponentDef_tie<T>::ComponentDef_tie (T &t)
	: ptr_ (&t),
	  poa_ (PortableServer::POA::_nil ()),
	  rel_ (0)
{}

template <class T> ACE_INLINE
POA_IR::ComponentDef_tie<T>::ComponentDef_tie (T &t, PortableServer::POA_ptr poa)
	: ptr_ (&t),
	  poa_ (PortableServer::POA::_duplicate (poa)),
	  rel_ (0)
{}

template <class T> ACE_INLINE
POA_IR::ComponentDef_tie<T>::ComponentDef_tie (T *tp, CORBA::Boolean release)
	: ptr_ (tp),
	  poa_ (PortableServer::POA::_nil ()),
	  rel_ (release)
{}

template <class T> ACE_INLINE
POA_IR::ComponentDef_tie<T>::ComponentDef_tie (T *tp, PortableServer::POA_ptr poa, CORBA::Boolean release)
	: ptr_ (tp),
	  poa_ (PortableServer::POA::_duplicate (poa)),
	  rel_ (release)
{}

template <class T> ACE_INLINE
POA_IR::ComponentDef_tie<T>::~ComponentDef_tie (void)
{
  if (this->rel_) delete this->ptr_;
}

template <class T> ACE_INLINE T *
POA_IR::ComponentDef_tie<T>::_tied_object (void)
{
  return this->ptr_;
}

template <class T> ACE_INLINE void
POA_IR::ComponentDef_tie<T>::_tied_object (T &obj)
{
  if (this->rel_) delete this->ptr_;
  this->ptr_ = &obj;
  this->rel_ = 0;
}

template <class T> ACE_INLINE void
POA_IR::ComponentDef_tie<T>::_tied_object (T *obj, CORBA::Boolean release)
{
  if (this->rel_) delete this->ptr_;
  this->ptr_ = obj;
  this->rel_ = release;
}

template <class T> ACE_INLINE CORBA::Boolean
POA_IR::ComponentDef_tie<T>::_is_owner (void)
{
  return this->rel_;
}

template <class T> ACE_INLINE void
POA_IR::ComponentDef_tie<T>::_is_owner (CORBA::Boolean b)
{
  this->rel_ = b;
}

template <class T> ACE_INLINE PortableServer::POA_ptr
POA_IR::ComponentDef_tie<T>::_default_POA (CORBA::Environment &env)
{
  if (!CORBA::is_nil (this->poa_.in ()))
    return PortableServer::POA::_duplicate (this->poa_.in ());

  return this->ComponentDef::_default_POA (env);
}

template <class T> ACE_INLINE
IR::InterfaceDefSeq * POA_IR::ComponentDef_tie<T>::supported_interfaces  (
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->supported_interfaces (
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
void POA_IR::ComponentDef_tie<T>::supported_interfaces  (
    const IR::InterfaceDefSeq & supported_interfaces,
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  this->ptr_->supported_interfaces (
    supported_interfaces,
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
IR::ComponentDef_ptr POA_IR::ComponentDef_tie<T>::base_component  (
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->base_component (
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
IR::ProvidesDefSeq * POA_IR::ComponentDef_tie<T>::provides_interfaces  (
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->provides_interfaces (
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
IR::UsesDefSeq * POA_IR::ComponentDef_tie<T>::uses_interfaces  (
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->uses_interfaces (
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
IR::EmitsDefSeq * POA_IR::ComponentDef_tie<T>::emits_events  (
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->emits_events (
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
IR::PublishesDefSeq * POA_IR::ComponentDef_tie<T>::publishes_events  (
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->publishes_events (
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
IR::ConsumesDefSeq * POA_IR::ComponentDef_tie<T>::consumes_events  (
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->consumes_events (
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
CORBA::Boolean POA_IR::ComponentDef_tie<T>::is_basic  (
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->is_basic (
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
IR::ProvidesDef_ptr POA_IR::ComponentDef_tie<T>::create_provides  (
    const char * id,
    const char * name,
    const char * version,
    IR::InterfaceDef_ptr interface_type,
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->create_provides (
    id,
    name,
    version,
    interface_type,
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
IR::UsesDef_ptr POA_IR::ComponentDef_tie<T>::create_uses  (
    const char * id,
    const char * name,
    const char * version,
    IR::InterfaceDef_ptr interface_type,
    CORBA::Boolean is_multiple,
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->create_uses (
    id,
    name,
    version,
    interface_type,
    is_multiple,
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
IR::EmitsDef_ptr POA_IR::ComponentDef_tie<T>::create_emits  (
    const char * id,
    const char * name,
    const char * version,
    IR::ValueDef_ptr value,
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->create_emits (
    id,
    name,
    version,
    value,
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
IR::PublishesDef_ptr POA_IR::ComponentDef_tie<T>::create_publishes  (
    const char * id,
    const char * name,
    const char * version,
    IR::ValueDef_ptr value,
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->create_publishes (
    id,
    name,
    version,
    value,
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
IR::ConsumesDef_ptr POA_IR::ComponentDef_tie<T>::create_consumes  (
    const char * id,
    const char * name,
    const char * version,
    IR::ValueDef_ptr value,
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->create_consumes (
    id,
    name,
    version,
    value,
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
IR::InterfaceDefSeq * POA_IR::ComponentDef_tie<T>::base_interfaces  (
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->base_interfaces (
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
void POA_IR::ComponentDef_tie<T>::base_interfaces  (
    const IR::InterfaceDefSeq & base_interfaces,
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  this->ptr_->base_interfaces (
    base_interfaces,
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
CORBA::Boolean POA_IR::ComponentDef_tie<T>::is_abstract  (
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->is_abstract (
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
void POA_IR::ComponentDef_tie<T>::is_abstract  (
    CORBA::Boolean is_abstract,
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  this->ptr_->is_abstract (
    is_abstract,
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
CORBA::Boolean POA_IR::ComponentDef_tie<T>::is_local  (
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->is_local (
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
void POA_IR::ComponentDef_tie<T>::is_local  (
    CORBA::Boolean is_local,
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  this->ptr_->is_local (
    is_local,
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
CORBA::Boolean POA_IR::ComponentDef_tie<T>::is_a  (
    const char * interface_id,
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->is_a (
    interface_id,
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
IR::AttributeDef_ptr POA_IR::ComponentDef_tie<T>::create_attribute  (
    const char * id,
    const char * name,
    const char * version,
    IR::IDLType_ptr type,
    IR::AttributeMode mode,
    const IR::ExceptionDefSeq & get_exceptions,
    const IR::ExceptionDefSeq & put_exceptions,
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->create_attribute (
    id,
    name,
    version,
    type,
    mode,
    get_exceptions,
    put_exceptions,
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
IR::OperationDef_ptr POA_IR::ComponentDef_tie<T>::create_operation  (
    const char * id,
    const char * name,
    const char * version,
    IR::IDLType_ptr result,
    IR::OperationMode mode,
    const IR::ParDescriptionSeq & params,
    const IR::ExceptionDefSeq & exceptions,
    const IR::ContextIdSeq & contexts,
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->create_operation (
    id,
    name,
    version,
    result,
    mode,
    params,
    exceptions,
    contexts,
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
IR::Contained_ptr POA_IR::ComponentDef_tie<T>::lookup  (
    const char * search_name,
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->lookup (
    search_name,
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
IR::ContainedSeq * POA_IR::ComponentDef_tie<T>::contents  (
    IR::DefinitionKind limit_type,
    CORBA::Boolean exclude_inherited,
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->contents (
    limit_type,
    exclude_inherited,
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
IR::ContainedSeq * POA_IR::ComponentDef_tie<T>::lookup_name  (
    const char * search_name,
    CORBA::Long levels_to_search,
    IR::DefinitionKind limit_type,
    CORBA::Boolean exclude_inherited,
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->lookup_name (
    search_name,
    levels_to_search,
    limit_type,
    exclude_inherited,
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
IR::Container::DescriptionSeq * POA_IR::ComponentDef_tie<T>::describe_contents  (
    IR::DefinitionKind limit_type,
    CORBA::Boolean exclude_inherited,
    CORBA::Long max_returned_objs,
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->describe_contents (
    limit_type,
    exclude_inherited,
    max_returned_objs,
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
IR::ModuleDef_ptr POA_IR::ComponentDef_tie<T>::create_module  (
    const char * id,
    const char * name,
    const char * version,
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->create_module (
    id,
    name,
    version,
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
IR::ConstantDef_ptr POA_IR::ComponentDef_tie<T>::create_constant  (
    const char * id,
    const char * name,
    const char * version,
    IR::IDLType_ptr type,
    const CORBA::Any & value,
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->create_constant (
    id,
    name,
    version,
    type,
    value,
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
IR::StructDef_ptr POA_IR::ComponentDef_tie<T>::create_struct  (
    const char * id,
    const char * name,
    const char * version,
    const IR::StructMemberSeq & members,
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->create_struct (
    id,
    name,
    version,
    members,
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
IR::UnionDef_ptr POA_IR::ComponentDef_tie<T>::create_union  (
    const char * id,
    const char * name,
    const char * version,
    IR::IDLType_ptr discriminator_type,
    const IR::UnionMemberSeq & members,
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->create_union (
    id,
    name,
    version,
    discriminator_type,
    members,
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
IR::EnumDef_ptr POA_IR::ComponentDef_tie<T>::create_enum  (
    const char * id,
    const char * name,
    const char * version,
    const IR::EnumMemberSeq & members,
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->create_enum (
    id,
    name,
    version,
    members,
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
IR::AliasDef_ptr POA_IR::ComponentDef_tie<T>::create_alias  (
    const char * id,
    const char * name,
    const char * version,
    IR::IDLType_ptr original_type,
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->create_alias (
    id,
    name,
    version,
    original_type,
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
IR::InterfaceDef_ptr POA_IR::ComponentDef_tie<T>::create_interface  (
    const char * id,
    const char * name,
    const char * version,
    const IR::InterfaceDefSeq & base_interfaces,
    CORBA::Boolean is_abstract,
    CORBA::Boolean is_local,
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->create_interface (
    id,
    name,
    version,
    base_interfaces,
    is_abstract,
    is_local,
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
IR::ValueDef_ptr POA_IR::ComponentDef_tie<T>::create_value  (
    const char * id,
    const char * name,
    const char * version,
    CORBA::Boolean is_custom,
    CORBA::Boolean is_abstract,
    IR::ValueDef_ptr base_value,
    CORBA::Boolean is_truncatable,
    const IR::ValueDefSeq & abstract_base_values,
    const IR::InterfaceDefSeq & supported_interfaces,
    const IR::InitializerSeq & initializers,
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->create_value (
    id,
    name,
    version,
    is_custom,
    is_abstract,
    base_value,
    is_truncatable,
    abstract_base_values,
    supported_interfaces,
    initializers,
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
IR::ValueBoxDef_ptr POA_IR::ComponentDef_tie<T>::create_value_box  (
    const char * id,
    const char * name,
    const char * version,
    IR::IDLType_ptr original_type_def,
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->create_value_box (
    id,
    name,
    version,
    original_type_def,
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
IR::ExceptionDef_ptr POA_IR::ComponentDef_tie<T>::create_exception  (
    const char * id,
    const char * name,
    const char * version,
    const IR::StructMemberSeq & members,
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->create_exception (
    id,
    name,
    version,
    members,
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
IR::NativeDef_ptr POA_IR::ComponentDef_tie<T>::create_native  (
    const char * id,
    const char * name,
    const char * version,
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->create_native (
    id,
    name,
    version,
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
char * POA_IR::ComponentDef_tie<T>::id  (
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->id (
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
void POA_IR::ComponentDef_tie<T>::id  (
    const char * id,
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  this->ptr_->id (
    id,
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
char * POA_IR::ComponentDef_tie<T>::name  (
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->name (
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
void POA_IR::ComponentDef_tie<T>::name  (
    const char * name,
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  this->ptr_->name (
    name,
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
char * POA_IR::ComponentDef_tie<T>::version  (
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->version (
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
void POA_IR::ComponentDef_tie<T>::version  (
    const char * version,
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  this->ptr_->version (
    version,
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
IR::Container_ptr POA_IR::ComponentDef_tie<T>::defined_in  (
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->defined_in (
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
char * POA_IR::ComponentDef_tie<T>::absolute_name  (
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->absolute_name (
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
IR::Repository_ptr POA_IR::ComponentDef_tie<T>::containing_repository  (
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->containing_repository (
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
IR::Contained::Description * POA_IR::ComponentDef_tie<T>::describe  (
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->describe (
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
void POA_IR::ComponentDef_tie<T>::move  (
    IR::Container_ptr new_container,
    const char * new_name,
    const char * new_version,
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  this->ptr_->move (
    new_container,
    new_name,
    new_version,
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
CORBA::TypeCode_ptr POA_IR::ComponentDef_tie<T>::type  (
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->type (
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
IR::DefinitionKind POA_IR::ComponentDef_tie<T>::def_kind  (
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->def_kind (
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
void POA_IR::ComponentDef_tie<T>::destroy  (
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  this->ptr_->destroy (
    ACE_TRY_ENV
  );
}

#endif /* ACE_HAS_USING_KEYWORD */

#if defined (ACE_HAS_USING_KEYWORD)
template <class T> ACE_INLINE
POA_IR::PrimaryKeyDef_tie<T>::PrimaryKeyDef_tie (T &t)
	: ptr_ (&t),
	  poa_ (PortableServer::POA::_nil ()),
	  rel_ (0)
{}

template <class T> ACE_INLINE
POA_IR::PrimaryKeyDef_tie<T>::PrimaryKeyDef_tie (T &t, PortableServer::POA_ptr poa)
	: ptr_ (&t),
	  poa_ (PortableServer::POA::_duplicate (poa)),
	  rel_ (0)
{}

template <class T> ACE_INLINE
POA_IR::PrimaryKeyDef_tie<T>::PrimaryKeyDef_tie (T *tp, CORBA::Boolean release)
	: ptr_ (tp),
	  poa_ (PortableServer::POA::_nil ()),
	  rel_ (release)
{}

template <class T> ACE_INLINE
POA_IR::PrimaryKeyDef_tie<T>::PrimaryKeyDef_tie (T *tp, PortableServer::POA_ptr poa, CORBA::Boolean release)
	: ptr_ (tp),
	  poa_ (PortableServer::POA::_duplicate (poa)),
	  rel_ (release)
{}

template <class T> ACE_INLINE
POA_IR::PrimaryKeyDef_tie<T>::~PrimaryKeyDef_tie (void)
{
  if (this->rel_) delete this->ptr_;
}

template <class T> ACE_INLINE T *
POA_IR::PrimaryKeyDef_tie<T>::_tied_object (void)
{
  return this->ptr_;
}

template <class T> ACE_INLINE void
POA_IR::PrimaryKeyDef_tie<T>::_tied_object (T &obj)
{
  if (this->rel_) delete this->ptr_;
  this->ptr_ = &obj;
  this->rel_ = 0;
}

template <class T> ACE_INLINE void
POA_IR::PrimaryKeyDef_tie<T>::_tied_object (T *obj, CORBA::Boolean release)
{
  if (this->rel_) delete this->ptr_;
  this->ptr_ = obj;
  this->rel_ = release;
}

template <class T> ACE_INLINE CORBA::Boolean
POA_IR::PrimaryKeyDef_tie<T>::_is_owner (void)
{
  return this->rel_;
}

template <class T> ACE_INLINE void
POA_IR::PrimaryKeyDef_tie<T>::_is_owner (CORBA::Boolean b)
{
  this->rel_ = b;
}

template <class T> ACE_INLINE PortableServer::POA_ptr
POA_IR::PrimaryKeyDef_tie<T>::_default_POA (CORBA::Environment &env)
{
  if (!CORBA::is_nil (this->poa_.in ()))
    return PortableServer::POA::_duplicate (this->poa_.in ());

  return this->PrimaryKeyDef::_default_POA (env);
}

template <class T> ACE_INLINE
CORBA::Boolean POA_IR::PrimaryKeyDef_tie<T>::is_a  (
    const char * primary_key_id,
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->is_a (
    primary_key_id,
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
IR::ValueDef_ptr POA_IR::PrimaryKeyDef_tie<T>::primary_key  (
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->primary_key (
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
char * POA_IR::PrimaryKeyDef_tie<T>::id  (
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->id (
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
void POA_IR::PrimaryKeyDef_tie<T>::id  (
    const char * id,
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  this->ptr_->id (
    id,
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
char * POA_IR::PrimaryKeyDef_tie<T>::name  (
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->name (
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
void POA_IR::PrimaryKeyDef_tie<T>::name  (
    const char * name,
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  this->ptr_->name (
    name,
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
char * POA_IR::PrimaryKeyDef_tie<T>::version  (
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->version (
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
void POA_IR::PrimaryKeyDef_tie<T>::version  (
    const char * version,
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  this->ptr_->version (
    version,
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
IR::Container_ptr POA_IR::PrimaryKeyDef_tie<T>::defined_in  (
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->defined_in (
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
char * POA_IR::PrimaryKeyDef_tie<T>::absolute_name  (
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->absolute_name (
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
IR::Repository_ptr POA_IR::PrimaryKeyDef_tie<T>::containing_repository  (
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->containing_repository (
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
IR::Contained::Description * POA_IR::PrimaryKeyDef_tie<T>::describe  (
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->describe (
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
void POA_IR::PrimaryKeyDef_tie<T>::move  (
    IR::Container_ptr new_container,
    const char * new_name,
    const char * new_version,
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  this->ptr_->move (
    new_container,
    new_name,
    new_version,
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
IR::DefinitionKind POA_IR::PrimaryKeyDef_tie<T>::def_kind  (
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->def_kind (
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
void POA_IR::PrimaryKeyDef_tie<T>::destroy  (
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  this->ptr_->destroy (
    ACE_TRY_ENV
  );
}

#endif /* ACE_HAS_USING_KEYWORD */

#if defined (ACE_HAS_USING_KEYWORD)
template <class T> ACE_INLINE
POA_IR::FactoryDef_tie<T>::FactoryDef_tie (T &t)
	: ptr_ (&t),
	  poa_ (PortableServer::POA::_nil ()),
	  rel_ (0)
{}

template <class T> ACE_INLINE
POA_IR::FactoryDef_tie<T>::FactoryDef_tie (T &t, PortableServer::POA_ptr poa)
	: ptr_ (&t),
	  poa_ (PortableServer::POA::_duplicate (poa)),
	  rel_ (0)
{}

template <class T> ACE_INLINE
POA_IR::FactoryDef_tie<T>::FactoryDef_tie (T *tp, CORBA::Boolean release)
	: ptr_ (tp),
	  poa_ (PortableServer::POA::_nil ()),
	  rel_ (release)
{}

template <class T> ACE_INLINE
POA_IR::FactoryDef_tie<T>::FactoryDef_tie (T *tp, PortableServer::POA_ptr poa, CORBA::Boolean release)
	: ptr_ (tp),
	  poa_ (PortableServer::POA::_duplicate (poa)),
	  rel_ (release)
{}

template <class T> ACE_INLINE
POA_IR::FactoryDef_tie<T>::~FactoryDef_tie (void)
{
  if (this->rel_) delete this->ptr_;
}

template <class T> ACE_INLINE T *
POA_IR::FactoryDef_tie<T>::_tied_object (void)
{
  return this->ptr_;
}

template <class T> ACE_INLINE void
POA_IR::FactoryDef_tie<T>::_tied_object (T &obj)
{
  if (this->rel_) delete this->ptr_;
  this->ptr_ = &obj;
  this->rel_ = 0;
}

template <class T> ACE_INLINE void
POA_IR::FactoryDef_tie<T>::_tied_object (T *obj, CORBA::Boolean release)
{
  if (this->rel_) delete this->ptr_;
  this->ptr_ = obj;
  this->rel_ = release;
}

template <class T> ACE_INLINE CORBA::Boolean
POA_IR::FactoryDef_tie<T>::_is_owner (void)
{
  return this->rel_;
}

template <class T> ACE_INLINE void
POA_IR::FactoryDef_tie<T>::_is_owner (CORBA::Boolean b)
{
  this->rel_ = b;
}

template <class T> ACE_INLINE PortableServer::POA_ptr
POA_IR::FactoryDef_tie<T>::_default_POA (CORBA::Environment &env)
{
  if (!CORBA::is_nil (this->poa_.in ()))
    return PortableServer::POA::_duplicate (this->poa_.in ());

  return this->FactoryDef::_default_POA (env);
}

template <class T> ACE_INLINE
CORBA::TypeCode_ptr POA_IR::FactoryDef_tie<T>::result  (
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->result (
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
IR::IDLType_ptr POA_IR::FactoryDef_tie<T>::result_def  (
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->result_def (
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
void POA_IR::FactoryDef_tie<T>::result_def  (
    IR::IDLType_ptr result_def,
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  this->ptr_->result_def (
    result_def,
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
IR::ParDescriptionSeq * POA_IR::FactoryDef_tie<T>::params  (
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->params (
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
void POA_IR::FactoryDef_tie<T>::params  (
    const IR::ParDescriptionSeq & params,
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  this->ptr_->params (
    params,
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
IR::OperationMode POA_IR::FactoryDef_tie<T>::mode  (
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->mode (
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
void POA_IR::FactoryDef_tie<T>::mode  (
    IR::OperationMode mode,
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  this->ptr_->mode (
    mode,
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
IR::ContextIdSeq * POA_IR::FactoryDef_tie<T>::contexts  (
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->contexts (
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
void POA_IR::FactoryDef_tie<T>::contexts  (
    const IR::ContextIdSeq & contexts,
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  this->ptr_->contexts (
    contexts,
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
IR::ExceptionDefSeq * POA_IR::FactoryDef_tie<T>::exceptions  (
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->exceptions (
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
void POA_IR::FactoryDef_tie<T>::exceptions  (
    const IR::ExceptionDefSeq & exceptions,
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  this->ptr_->exceptions (
    exceptions,
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
char * POA_IR::FactoryDef_tie<T>::id  (
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->id (
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
void POA_IR::FactoryDef_tie<T>::id  (
    const char * id,
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  this->ptr_->id (
    id,
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
char * POA_IR::FactoryDef_tie<T>::name  (
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->name (
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
void POA_IR::FactoryDef_tie<T>::name  (
    const char * name,
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  this->ptr_->name (
    name,
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
char * POA_IR::FactoryDef_tie<T>::version  (
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->version (
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
void POA_IR::FactoryDef_tie<T>::version  (
    const char * version,
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  this->ptr_->version (
    version,
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
IR::Container_ptr POA_IR::FactoryDef_tie<T>::defined_in  (
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->defined_in (
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
char * POA_IR::FactoryDef_tie<T>::absolute_name  (
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->absolute_name (
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
IR::Repository_ptr POA_IR::FactoryDef_tie<T>::containing_repository  (
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->containing_repository (
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
IR::Contained::Description * POA_IR::FactoryDef_tie<T>::describe  (
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->describe (
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
void POA_IR::FactoryDef_tie<T>::move  (
    IR::Container_ptr new_container,
    const char * new_name,
    const char * new_version,
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  this->ptr_->move (
    new_container,
    new_name,
    new_version,
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
IR::DefinitionKind POA_IR::FactoryDef_tie<T>::def_kind  (
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->def_kind (
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
void POA_IR::FactoryDef_tie<T>::destroy  (
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  this->ptr_->destroy (
    ACE_TRY_ENV
  );
}

#endif /* ACE_HAS_USING_KEYWORD */

#if defined (ACE_HAS_USING_KEYWORD)
template <class T> ACE_INLINE
POA_IR::FinderDef_tie<T>::FinderDef_tie (T &t)
	: ptr_ (&t),
	  poa_ (PortableServer::POA::_nil ()),
	  rel_ (0)
{}

template <class T> ACE_INLINE
POA_IR::FinderDef_tie<T>::FinderDef_tie (T &t, PortableServer::POA_ptr poa)
	: ptr_ (&t),
	  poa_ (PortableServer::POA::_duplicate (poa)),
	  rel_ (0)
{}

template <class T> ACE_INLINE
POA_IR::FinderDef_tie<T>::FinderDef_tie (T *tp, CORBA::Boolean release)
	: ptr_ (tp),
	  poa_ (PortableServer::POA::_nil ()),
	  rel_ (release)
{}

template <class T> ACE_INLINE
POA_IR::FinderDef_tie<T>::FinderDef_tie (T *tp, PortableServer::POA_ptr poa, CORBA::Boolean release)
	: ptr_ (tp),
	  poa_ (PortableServer::POA::_duplicate (poa)),
	  rel_ (release)
{}

template <class T> ACE_INLINE
POA_IR::FinderDef_tie<T>::~FinderDef_tie (void)
{
  if (this->rel_) delete this->ptr_;
}

template <class T> ACE_INLINE T *
POA_IR::FinderDef_tie<T>::_tied_object (void)
{
  return this->ptr_;
}

template <class T> ACE_INLINE void
POA_IR::FinderDef_tie<T>::_tied_object (T &obj)
{
  if (this->rel_) delete this->ptr_;
  this->ptr_ = &obj;
  this->rel_ = 0;
}

template <class T> ACE_INLINE void
POA_IR::FinderDef_tie<T>::_tied_object (T *obj, CORBA::Boolean release)
{
  if (this->rel_) delete this->ptr_;
  this->ptr_ = obj;
  this->rel_ = release;
}

template <class T> ACE_INLINE CORBA::Boolean
POA_IR::FinderDef_tie<T>::_is_owner (void)
{
  return this->rel_;
}

template <class T> ACE_INLINE void
POA_IR::FinderDef_tie<T>::_is_owner (CORBA::Boolean b)
{
  this->rel_ = b;
}

template <class T> ACE_INLINE PortableServer::POA_ptr
POA_IR::FinderDef_tie<T>::_default_POA (CORBA::Environment &env)
{
  if (!CORBA::is_nil (this->poa_.in ()))
    return PortableServer::POA::_duplicate (this->poa_.in ());

  return this->FinderDef::_default_POA (env);
}

template <class T> ACE_INLINE
CORBA::TypeCode_ptr POA_IR::FinderDef_tie<T>::result  (
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->result (
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
IR::IDLType_ptr POA_IR::FinderDef_tie<T>::result_def  (
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->result_def (
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
void POA_IR::FinderDef_tie<T>::result_def  (
    IR::IDLType_ptr result_def,
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  this->ptr_->result_def (
    result_def,
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
IR::ParDescriptionSeq * POA_IR::FinderDef_tie<T>::params  (
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->params (
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
void POA_IR::FinderDef_tie<T>::params  (
    const IR::ParDescriptionSeq & params,
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  this->ptr_->params (
    params,
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
IR::OperationMode POA_IR::FinderDef_tie<T>::mode  (
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->mode (
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
void POA_IR::FinderDef_tie<T>::mode  (
    IR::OperationMode mode,
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  this->ptr_->mode (
    mode,
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
IR::ContextIdSeq * POA_IR::FinderDef_tie<T>::contexts  (
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->contexts (
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
void POA_IR::FinderDef_tie<T>::contexts  (
    const IR::ContextIdSeq & contexts,
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  this->ptr_->contexts (
    contexts,
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
IR::ExceptionDefSeq * POA_IR::FinderDef_tie<T>::exceptions  (
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->exceptions (
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
void POA_IR::FinderDef_tie<T>::exceptions  (
    const IR::ExceptionDefSeq & exceptions,
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  this->ptr_->exceptions (
    exceptions,
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
char * POA_IR::FinderDef_tie<T>::id  (
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->id (
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
void POA_IR::FinderDef_tie<T>::id  (
    const char * id,
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  this->ptr_->id (
    id,
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
char * POA_IR::FinderDef_tie<T>::name  (
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->name (
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
void POA_IR::FinderDef_tie<T>::name  (
    const char * name,
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  this->ptr_->name (
    name,
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
char * POA_IR::FinderDef_tie<T>::version  (
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->version (
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
void POA_IR::FinderDef_tie<T>::version  (
    const char * version,
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  this->ptr_->version (
    version,
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
IR::Container_ptr POA_IR::FinderDef_tie<T>::defined_in  (
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->defined_in (
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
char * POA_IR::FinderDef_tie<T>::absolute_name  (
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->absolute_name (
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
IR::Repository_ptr POA_IR::FinderDef_tie<T>::containing_repository  (
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->containing_repository (
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
IR::Contained::Description * POA_IR::FinderDef_tie<T>::describe  (
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->describe (
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
void POA_IR::FinderDef_tie<T>::move  (
    IR::Container_ptr new_container,
    const char * new_name,
    const char * new_version,
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  this->ptr_->move (
    new_container,
    new_name,
    new_version,
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
IR::DefinitionKind POA_IR::FinderDef_tie<T>::def_kind  (
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->def_kind (
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
void POA_IR::FinderDef_tie<T>::destroy  (
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  this->ptr_->destroy (
    ACE_TRY_ENV
  );
}

#endif /* ACE_HAS_USING_KEYWORD */

#if defined (ACE_HAS_USING_KEYWORD)
template <class T> ACE_INLINE
POA_IR::HomeDef_tie<T>::HomeDef_tie (T &t)
	: ptr_ (&t),
	  poa_ (PortableServer::POA::_nil ()),
	  rel_ (0)
{}

template <class T> ACE_INLINE
POA_IR::HomeDef_tie<T>::HomeDef_tie (T &t, PortableServer::POA_ptr poa)
	: ptr_ (&t),
	  poa_ (PortableServer::POA::_duplicate (poa)),
	  rel_ (0)
{}

template <class T> ACE_INLINE
POA_IR::HomeDef_tie<T>::HomeDef_tie (T *tp, CORBA::Boolean release)
	: ptr_ (tp),
	  poa_ (PortableServer::POA::_nil ()),
	  rel_ (release)
{}

template <class T> ACE_INLINE
POA_IR::HomeDef_tie<T>::HomeDef_tie (T *tp, PortableServer::POA_ptr poa, CORBA::Boolean release)
	: ptr_ (tp),
	  poa_ (PortableServer::POA::_duplicate (poa)),
	  rel_ (release)
{}

template <class T> ACE_INLINE
POA_IR::HomeDef_tie<T>::~HomeDef_tie (void)
{
  if (this->rel_) delete this->ptr_;
}

template <class T> ACE_INLINE T *
POA_IR::HomeDef_tie<T>::_tied_object (void)
{
  return this->ptr_;
}

template <class T> ACE_INLINE void
POA_IR::HomeDef_tie<T>::_tied_object (T &obj)
{
  if (this->rel_) delete this->ptr_;
  this->ptr_ = &obj;
  this->rel_ = 0;
}

template <class T> ACE_INLINE void
POA_IR::HomeDef_tie<T>::_tied_object (T *obj, CORBA::Boolean release)
{
  if (this->rel_) delete this->ptr_;
  this->ptr_ = obj;
  this->rel_ = release;
}

template <class T> ACE_INLINE CORBA::Boolean
POA_IR::HomeDef_tie<T>::_is_owner (void)
{
  return this->rel_;
}

template <class T> ACE_INLINE void
POA_IR::HomeDef_tie<T>::_is_owner (CORBA::Boolean b)
{
  this->rel_ = b;
}

template <class T> ACE_INLINE PortableServer::POA_ptr
POA_IR::HomeDef_tie<T>::_default_POA (CORBA::Environment &env)
{
  if (!CORBA::is_nil (this->poa_.in ()))
    return PortableServer::POA::_duplicate (this->poa_.in ());

  return this->HomeDef::_default_POA (env);
}

template <class T> ACE_INLINE
IR::HomeDef_ptr POA_IR::HomeDef_tie<T>::base_home  (
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->base_home (
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
IR::ComponentDef_ptr POA_IR::HomeDef_tie<T>::managed_component  (
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->managed_component (
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
IR::PrimaryKeyDef_ptr POA_IR::HomeDef_tie<T>::primary_key  (
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->primary_key (
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
IR::FactoryDefSeq * POA_IR::HomeDef_tie<T>::factories  (
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->factories (
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
IR::FinderDefSeq * POA_IR::HomeDef_tie<T>::finders  (
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->finders (
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
CORBA::Boolean POA_IR::HomeDef_tie<T>::is_basic  (
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->is_basic (
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
IR::PrimaryKeyDef_ptr POA_IR::HomeDef_tie<T>::create_primary_key  (
    const char * id,
    const char * name,
    const char * version,
    IR::ValueDef_ptr primary_key,
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->create_primary_key (
    id,
    name,
    version,
    primary_key,
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
IR::FactoryDef_ptr POA_IR::HomeDef_tie<T>::create_factory  (
    const char * id,
    const char * name,
    const char * version,
    const IR::ParDescriptionSeq & params,
    const IR::ExceptionDefSeq & exceptions,
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->create_factory (
    id,
    name,
    version,
    params,
    exceptions,
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
IR::FinderDef_ptr POA_IR::HomeDef_tie<T>::create_finder  (
    const char * id,
    const char * name,
    const char * version,
    const IR::ParDescriptionSeq & params,
    const IR::ExceptionDefSeq & exceptions,
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->create_finder (
    id,
    name,
    version,
    params,
    exceptions,
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
IR::InterfaceDefSeq * POA_IR::HomeDef_tie<T>::base_interfaces  (
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->base_interfaces (
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
void POA_IR::HomeDef_tie<T>::base_interfaces  (
    const IR::InterfaceDefSeq & base_interfaces,
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  this->ptr_->base_interfaces (
    base_interfaces,
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
CORBA::Boolean POA_IR::HomeDef_tie<T>::is_abstract  (
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->is_abstract (
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
void POA_IR::HomeDef_tie<T>::is_abstract  (
    CORBA::Boolean is_abstract,
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  this->ptr_->is_abstract (
    is_abstract,
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
CORBA::Boolean POA_IR::HomeDef_tie<T>::is_local  (
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->is_local (
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
void POA_IR::HomeDef_tie<T>::is_local  (
    CORBA::Boolean is_local,
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  this->ptr_->is_local (
    is_local,
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
CORBA::Boolean POA_IR::HomeDef_tie<T>::is_a  (
    const char * interface_id,
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->is_a (
    interface_id,
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
IR::AttributeDef_ptr POA_IR::HomeDef_tie<T>::create_attribute  (
    const char * id,
    const char * name,
    const char * version,
    IR::IDLType_ptr type,
    IR::AttributeMode mode,
    const IR::ExceptionDefSeq & get_exceptions,
    const IR::ExceptionDefSeq & put_exceptions,
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->create_attribute (
    id,
    name,
    version,
    type,
    mode,
    get_exceptions,
    put_exceptions,
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
IR::OperationDef_ptr POA_IR::HomeDef_tie<T>::create_operation  (
    const char * id,
    const char * name,
    const char * version,
    IR::IDLType_ptr result,
    IR::OperationMode mode,
    const IR::ParDescriptionSeq & params,
    const IR::ExceptionDefSeq & exceptions,
    const IR::ContextIdSeq & contexts,
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->create_operation (
    id,
    name,
    version,
    result,
    mode,
    params,
    exceptions,
    contexts,
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
IR::Contained_ptr POA_IR::HomeDef_tie<T>::lookup  (
    const char * search_name,
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->lookup (
    search_name,
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
IR::ContainedSeq * POA_IR::HomeDef_tie<T>::contents  (
    IR::DefinitionKind limit_type,
    CORBA::Boolean exclude_inherited,
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->contents (
    limit_type,
    exclude_inherited,
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
IR::ContainedSeq * POA_IR::HomeDef_tie<T>::lookup_name  (
    const char * search_name,
    CORBA::Long levels_to_search,
    IR::DefinitionKind limit_type,
    CORBA::Boolean exclude_inherited,
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->lookup_name (
    search_name,
    levels_to_search,
    limit_type,
    exclude_inherited,
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
IR::Container::DescriptionSeq * POA_IR::HomeDef_tie<T>::describe_contents  (
    IR::DefinitionKind limit_type,
    CORBA::Boolean exclude_inherited,
    CORBA::Long max_returned_objs,
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->describe_contents (
    limit_type,
    exclude_inherited,
    max_returned_objs,
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
IR::ModuleDef_ptr POA_IR::HomeDef_tie<T>::create_module  (
    const char * id,
    const char * name,
    const char * version,
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->create_module (
    id,
    name,
    version,
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
IR::ConstantDef_ptr POA_IR::HomeDef_tie<T>::create_constant  (
    const char * id,
    const char * name,
    const char * version,
    IR::IDLType_ptr type,
    const CORBA::Any & value,
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->create_constant (
    id,
    name,
    version,
    type,
    value,
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
IR::StructDef_ptr POA_IR::HomeDef_tie<T>::create_struct  (
    const char * id,
    const char * name,
    const char * version,
    const IR::StructMemberSeq & members,
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->create_struct (
    id,
    name,
    version,
    members,
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
IR::UnionDef_ptr POA_IR::HomeDef_tie<T>::create_union  (
    const char * id,
    const char * name,
    const char * version,
    IR::IDLType_ptr discriminator_type,
    const IR::UnionMemberSeq & members,
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->create_union (
    id,
    name,
    version,
    discriminator_type,
    members,
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
IR::EnumDef_ptr POA_IR::HomeDef_tie<T>::create_enum  (
    const char * id,
    const char * name,
    const char * version,
    const IR::EnumMemberSeq & members,
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->create_enum (
    id,
    name,
    version,
    members,
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
IR::AliasDef_ptr POA_IR::HomeDef_tie<T>::create_alias  (
    const char * id,
    const char * name,
    const char * version,
    IR::IDLType_ptr original_type,
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->create_alias (
    id,
    name,
    version,
    original_type,
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
IR::InterfaceDef_ptr POA_IR::HomeDef_tie<T>::create_interface  (
    const char * id,
    const char * name,
    const char * version,
    const IR::InterfaceDefSeq & base_interfaces,
    CORBA::Boolean is_abstract,
    CORBA::Boolean is_local,
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->create_interface (
    id,
    name,
    version,
    base_interfaces,
    is_abstract,
    is_local,
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
IR::ValueDef_ptr POA_IR::HomeDef_tie<T>::create_value  (
    const char * id,
    const char * name,
    const char * version,
    CORBA::Boolean is_custom,
    CORBA::Boolean is_abstract,
    IR::ValueDef_ptr base_value,
    CORBA::Boolean is_truncatable,
    const IR::ValueDefSeq & abstract_base_values,
    const IR::InterfaceDefSeq & supported_interfaces,
    const IR::InitializerSeq & initializers,
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->create_value (
    id,
    name,
    version,
    is_custom,
    is_abstract,
    base_value,
    is_truncatable,
    abstract_base_values,
    supported_interfaces,
    initializers,
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
IR::ValueBoxDef_ptr POA_IR::HomeDef_tie<T>::create_value_box  (
    const char * id,
    const char * name,
    const char * version,
    IR::IDLType_ptr original_type_def,
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->create_value_box (
    id,
    name,
    version,
    original_type_def,
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
IR::ExceptionDef_ptr POA_IR::HomeDef_tie<T>::create_exception  (
    const char * id,
    const char * name,
    const char * version,
    const IR::StructMemberSeq & members,
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->create_exception (
    id,
    name,
    version,
    members,
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
IR::NativeDef_ptr POA_IR::HomeDef_tie<T>::create_native  (
    const char * id,
    const char * name,
    const char * version,
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->create_native (
    id,
    name,
    version,
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
char * POA_IR::HomeDef_tie<T>::id  (
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->id (
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
void POA_IR::HomeDef_tie<T>::id  (
    const char * id,
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  this->ptr_->id (
    id,
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
char * POA_IR::HomeDef_tie<T>::name  (
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->name (
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
void POA_IR::HomeDef_tie<T>::name  (
    const char * name,
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  this->ptr_->name (
    name,
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
char * POA_IR::HomeDef_tie<T>::version  (
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->version (
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
void POA_IR::HomeDef_tie<T>::version  (
    const char * version,
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  this->ptr_->version (
    version,
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
IR::Container_ptr POA_IR::HomeDef_tie<T>::defined_in  (
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->defined_in (
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
char * POA_IR::HomeDef_tie<T>::absolute_name  (
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->absolute_name (
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
IR::Repository_ptr POA_IR::HomeDef_tie<T>::containing_repository  (
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->containing_repository (
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
IR::Contained::Description * POA_IR::HomeDef_tie<T>::describe  (
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->describe (
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
void POA_IR::HomeDef_tie<T>::move  (
    IR::Container_ptr new_container,
    const char * new_name,
    const char * new_version,
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  this->ptr_->move (
    new_container,
    new_name,
    new_version,
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
CORBA::TypeCode_ptr POA_IR::HomeDef_tie<T>::type  (
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->type (
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
IR::DefinitionKind POA_IR::HomeDef_tie<T>::def_kind  (
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->def_kind (
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
void POA_IR::HomeDef_tie<T>::destroy  (
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  this->ptr_->destroy (
    ACE_TRY_ENV
  );
}

#endif /* ACE_HAS_USING_KEYWORD */

