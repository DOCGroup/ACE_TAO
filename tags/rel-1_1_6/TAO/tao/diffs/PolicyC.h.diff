--- PolicyC.h	Sat Jun 24 01:58:09 2000
+++ PolicyC.h.mod	Sat Jun 24 02:09:13 2000
@@ -11,7 +11,7 @@
 #define _TAO_IDL_POLICYC_H_
 
 #include "ace/pre.h"
-#include "tao/corba.h"
+#include "tao/CurrentC.h"
 
 #if defined (ACE_HAS_MINIMUM_IOSTREAMH_INCLUSION)
 #include "ace/streams.h"
@@ -21,7 +21,12 @@
 # pragma once
 #endif /* ACE_LACKS_PRAGMA_ONCE */
 
-#include "tao/corbafwd.h"
+#include "tao/Encodable.h"
+#include "tao/Exception.h"
+#include "tao/Sequence.h"
+#include "tao/CDR.h"
+#include "tao/Typecode.h"
+#include "tao/Environment.h"
 
 #if defined (TAO_EXPORT_MACRO)
 #undef TAO_EXPORT_MACRO
@@ -42,30 +47,6 @@
 #pragma warning(disable:4250)
 #endif /* _MSC_VER */
 
-TAO_NAMESPACE  CORBA
-{
-  typedef CORBA::Short PolicyErrorCode;
-  typedef CORBA::Short_out PolicyErrorCode_out;
-    TAO_NAMESPACE_STORAGE_CLASS CORBA::TypeCode_ptr _tc_PolicyErrorCode;
-
-  typedef CORBA::ULong PolicyType;
-  typedef CORBA::ULong_out PolicyType_out;
-    TAO_NAMESPACE_STORAGE_CLASS CORBA::TypeCode_ptr _tc_PolicyType;
-
-  enum SetOverrideType
-  {
-        SET_OVERRIDE,
-        ADD_OVERRIDE,
-        SetOverrideType_TAO_ENUM_32BIT_ENFORCER = 0x7FFFFFFF
-  };
-  typedef SetOverrideType &SetOverrideType_out;
-  TAO_NAMESPACE_STORAGE_CLASS CORBA::TypeCode_ptr _tc_SetOverrideType;
-
-
-}
-TAO_NAMESPACE_CLOSE // module CORBA
-
-
 #if !defined (_CORBA_POLICYERROR_CH_)
 #define _CORBA_POLICYERROR_CH_
 
@@ -434,6 +415,14 @@
   
   virtual const char* _interface_repository_id (void) const;
 
+  virtual CORBA::Boolean _tao_encode (TAO_OutputCDR &out_cdr);
+  // Encode the Policy into a CDR representation.  Returns true
+  // on success and false on failure.
+
+  virtual CORBA::Boolean _tao_decode (TAO_InputCDR &in_cdr);
+  // Decode the Policy from a CDR representation.  Returns true
+  // on success and false on failure.
+
 protected:
   CORBA_Policy (void);
   CORBA_Policy (TAO_Stub *objref, 
@@ -886,118 +875,6 @@
 #endif /* end #if !defined */
 
 
-#if !defined (_CORBA_CURRENT___PTR_CH_)
-#define _CORBA_CURRENT___PTR_CH_
-
-class CORBA_Current;
-typedef CORBA_Current *CORBA_Current_ptr;
-
-#endif /* end #if !defined */
-
-
-#if !defined (_CORBA_CURRENT___VAR_CH_)
-#define _CORBA_CURRENT___VAR_CH_
-
-class TAO_Export CORBA_Current_var : public TAO_Base_var
-{
-public:
-  CORBA_Current_var (void); // default constructor
-  CORBA_Current_var (CORBA_Current_ptr p) : ptr_ (p) {} 
-  CORBA_Current_var (const CORBA_Current_var &); // copy constructor
-  ~CORBA_Current_var (void); // destructor
-  
-  CORBA_Current_var &operator= (CORBA_Current_ptr);
-  CORBA_Current_var &operator= (const CORBA_Current_var &);
-  CORBA_Current_ptr operator-> (void) const;
-  
-  operator const CORBA_Current_ptr &() const;
-  operator CORBA_Current_ptr &();
-  // in, inout, out, _retn 
-  CORBA_Current_ptr in (void) const;
-  CORBA_Current_ptr &inout (void);
-  CORBA_Current_ptr &out (void);
-  CORBA_Current_ptr _retn (void);
-  CORBA_Current_ptr ptr (void) const;
-
-private:
-  CORBA_Current_ptr ptr_;
-  // Unimplemented - prevents widening assignment.
-  CORBA_Current_var (const TAO_Base_var &rhs);
-  CORBA_Current_var &operator= (const TAO_Base_var &rhs);
-};
-
-
-#endif /* end #if !defined */
-
-
-#if !defined (_CORBA_CURRENT___OUT_CH_)
-#define _CORBA_CURRENT___OUT_CH_
-
-class TAO_Export CORBA_Current_out
-{
-public:
-  CORBA_Current_out (CORBA_Current_ptr &);
-  CORBA_Current_out (CORBA_Current_var &);
-  CORBA_Current_out (const CORBA_Current_out &);
-  CORBA_Current_out &operator= (const CORBA_Current_out &);
-  CORBA_Current_out &operator= (const CORBA_Current_var &);
-  CORBA_Current_out &operator= (CORBA_Current_ptr);
-  operator CORBA_Current_ptr &();
-  CORBA_Current_ptr &ptr (void);
-  CORBA_Current_ptr operator-> (void);
-  
-private:
-  CORBA_Current_ptr &ptr_;
-};
-
-
-#endif /* end #if !defined */
-
-
-#if !defined (_CORBA_CURRENT_CH_)
-#define _CORBA_CURRENT_CH_
-
-class TAO_Export CORBA_Current : public virtual CORBA_Object
-{
-public:
-#if !defined(__GNUC__) || !defined (ACE_HAS_GNUG_PRE_2_8)
-  typedef CORBA_Current_ptr _ptr_type;
-  typedef CORBA_Current_var _var_type;
-#endif /* ! __GNUC__ || g++ >= 2.8 */
-
-  // the static operations
-  static CORBA_Current_ptr _duplicate (CORBA_Current_ptr obj);
-  static CORBA_Current_ptr _narrow (
-      CORBA::Object_ptr obj,
-      CORBA::Environment &ACE_TRY_ENV = 
-        TAO_default_environment ()
-    );
-  static CORBA_Current_ptr _unchecked_narrow (
-      CORBA::Object_ptr obj,
-      CORBA::Environment &ACE_TRY_ENV = 
-        TAO_default_environment ()
-    );
-  static CORBA_Current_ptr _nil (void)
-    {
-      return (CORBA_Current_ptr)0;
-    }
-
-  virtual void *_tao_QueryInterface (ptr_arith_t type);
-  
-  virtual const char* _interface_repository_id (void) const;
-
-protected:
-  CORBA_Current (void);
-  virtual ~CORBA_Current (void);
-private:
-  CORBA_Current (const CORBA_Current &);
-  void operator= (const CORBA_Current &);
-};
-
-
-#endif /* end #if !defined */
-
-
 #if !defined (_CORBA_POLICYCURRENT___PTR_CH_)
 #define _CORBA_POLICYCURRENT___PTR_CH_
 
@@ -1206,7 +1083,7 @@
 
 
 #if defined (__ACE_INLINE__)
-#include "PolicyC.i"
+#include "tao/PolicyC.i"
 #endif /* defined INLINE */
 
 #if defined(_MSC_VER) && (_MSC_VER >= 1200)
