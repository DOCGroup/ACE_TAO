--- orig/IORTableC.h	Sun Sep 10 16:20:41 2000
+++ IORTableC.h	Sun Sep 10 16:22:06 2000
@@ -41,7 +41,7 @@
 TAO_NAMESPACE  IORTable
 {
   class Locator;
-  
+
 #if !defined (_IORTABLE_LOCATOR___PTR_CH_)
 #define _IORTABLE_LOCATOR___PTR_CH_
 
@@ -57,17 +57,17 @@
   {
   public:
     Locator_var (void); // default constructor
-    Locator_var (Locator_ptr p) : ptr_ (p) {} 
+    Locator_var (Locator_ptr p) : ptr_ (p) {}
     Locator_var (const Locator_var &); // copy constructor
     ~Locator_var (void); // destructor
-    
+
     Locator_var &operator= (Locator_ptr);
     Locator_var &operator= (const Locator_var &);
     Locator_ptr operator-> (void) const;
-    
+
     operator const Locator_ptr &() const;
     operator Locator_ptr &();
-    // in, inout, out, _retn 
+    // in, inout, out, _retn
     Locator_ptr in (void) const;
     Locator_ptr &inout (void);
     Locator_ptr &out (void);
@@ -100,7 +100,7 @@
     operator Locator_ptr &();
     Locator_ptr &ptr (void);
     Locator_ptr operator-> (void);
-    
+
   private:
     Locator_ptr &ptr_;
   };
@@ -115,7 +115,7 @@
   class TAO_IORTable_Export AlreadyBound : public CORBA::UserException
   {
   public:
-    
+
     AlreadyBound (void); // default ctor
     AlreadyBound (const AlreadyBound &); // copy ctor
     ~AlreadyBound (void);
@@ -139,7 +139,7 @@
     static CORBA::Exception *_alloc (void);
   }; // exception IORTable::AlreadyBound
 
-  
+
 #endif /* end #if !defined */
 
 
@@ -149,7 +149,7 @@
   class TAO_IORTable_Export NotFound : public CORBA::UserException
   {
   public:
-    
+
     NotFound (void); // default ctor
     NotFound (const NotFound &); // copy ctor
     ~NotFound (void);
@@ -173,7 +173,7 @@
     static CORBA::Exception *_alloc (void);
   }; // exception IORTable::NotFound
 
-  
+
 #endif /* end #if !defined */
 
 
@@ -182,7 +182,7 @@
 
   class Table;
   typedef Table *Table_ptr;
-  
+
 #endif /* end #if !defined */
 
 
@@ -193,17 +193,17 @@
   {
   public:
     Table_var (void); // default constructor
-    Table_var (Table_ptr p) : ptr_ (p) {} 
+    Table_var (Table_ptr p) : ptr_ (p) {}
     Table_var (const Table_var &); // copy constructor
     ~Table_var (void); // destructor
-    
+
     Table_var &operator= (Table_ptr);
     Table_var &operator= (const Table_var &);
     Table_ptr operator-> (void) const;
-    
+
     operator const Table_ptr &() const;
     operator Table_ptr &();
-    // in, inout, out, _retn 
+    // in, inout, out, _retn
     Table_ptr in (void) const;
     Table_ptr &inout (void);
     Table_ptr &out (void);
@@ -236,7 +236,7 @@
     operator Table_ptr &();
     Table_ptr &ptr (void);
     Table_ptr operator-> (void);
-    
+
   private:
     Table_ptr &ptr_;
   };
@@ -260,12 +260,12 @@
     static Table_ptr _duplicate (Table_ptr obj);
     static Table_ptr _narrow (
         CORBA::Object_ptr obj,
-        CORBA::Environment &ACE_TRY_ENV = 
+        CORBA::Environment &ACE_TRY_ENV =
           TAO_default_environment ()
       );
     static Table_ptr _unchecked_narrow (
         CORBA::Object_ptr obj,
-        CORBA::Environment &ACE_TRY_ENV = 
+        CORBA::Environment &ACE_TRY_ENV =
           TAO_default_environment ()
       );
     static Table_ptr _nil (void)
@@ -276,7 +276,7 @@
     virtual void bind (
         const char * object_key,
         const char * IOR,
-        CORBA::Environment &ACE_TRY_ENV = 
+        CORBA::Environment &ACE_TRY_ENV =
           TAO_default_environment ()
       )
       ACE_THROW_SPEC ((
@@ -287,7 +287,7 @@
     virtual void rebind (
         const char * object_key,
         const char * IOR,
-        CORBA::Environment &ACE_TRY_ENV = 
+        CORBA::Environment &ACE_TRY_ENV =
           TAO_default_environment ()
       )
       ACE_THROW_SPEC ((
@@ -296,7 +296,7 @@
 
     virtual void unbind (
         const char * object_key,
-        CORBA::Environment &ACE_TRY_ENV = 
+        CORBA::Environment &ACE_TRY_ENV =
           TAO_default_environment ()
       )
       ACE_THROW_SPEC ((
@@ -306,7 +306,7 @@
 
     virtual void set_locator (
         IORTable::Locator_ptr the_locator,
-        CORBA::Environment &ACE_TRY_ENV = 
+        CORBA::Environment &ACE_TRY_ENV =
           TAO_default_environment ()
       )
       ACE_THROW_SPEC ((
@@ -314,7 +314,7 @@
       )) = 0;
 
     virtual void *_tao_QueryInterface (ptr_arith_t type);
-    
+
     virtual const char* _interface_repository_id (void) const;
 
   protected:
@@ -334,7 +334,7 @@
 
   class Locator;
   typedef Locator *Locator_ptr;
-  
+
 #endif /* end #if !defined */
 
 
@@ -345,17 +345,17 @@
   {
   public:
     Locator_var (void); // default constructor
-    Locator_var (Locator_ptr p) : ptr_ (p) {} 
+    Locator_var (Locator_ptr p) : ptr_ (p) {}
     Locator_var (const Locator_var &); // copy constructor
     ~Locator_var (void); // destructor
-    
+
     Locator_var &operator= (Locator_ptr);
     Locator_var &operator= (const Locator_var &);
     Locator_ptr operator-> (void) const;
-    
+
     operator const Locator_ptr &() const;
     operator Locator_ptr &();
-    // in, inout, out, _retn 
+    // in, inout, out, _retn
     Locator_ptr in (void) const;
     Locator_ptr &inout (void);
     Locator_ptr &out (void);
@@ -388,7 +388,7 @@
     operator Locator_ptr &();
     Locator_ptr &ptr (void);
     Locator_ptr operator-> (void);
-    
+
   private:
     Locator_ptr &ptr_;
   };
@@ -412,12 +412,12 @@
     static Locator_ptr _duplicate (Locator_ptr obj);
     static Locator_ptr _narrow (
         CORBA::Object_ptr obj,
-        CORBA::Environment &ACE_TRY_ENV = 
+        CORBA::Environment &ACE_TRY_ENV =
           TAO_default_environment ()
       );
     static Locator_ptr _unchecked_narrow (
         CORBA::Object_ptr obj,
-        CORBA::Environment &ACE_TRY_ENV = 
+        CORBA::Environment &ACE_TRY_ENV =
           TAO_default_environment ()
       );
     static Locator_ptr _nil (void)
@@ -427,7 +427,7 @@
 
     virtual char * locate (
         const char * object_key,
-        CORBA::Environment &ACE_TRY_ENV = 
+        CORBA::Environment &ACE_TRY_ENV =
           TAO_default_environment ()
       )
       ACE_THROW_SPEC ((
@@ -436,7 +436,7 @@
       )) = 0;
 
     virtual void *_tao_QueryInterface (ptr_arith_t type);
-    
+
     virtual const char* _interface_repository_id (void) const;
 
   protected:
@@ -453,19 +453,6 @@
 
 }
 TAO_NAMESPACE_CLOSE // module IORTable
-
-
-#ifndef __ACE_INLINE__
-
-TAO_IORTable_Export CORBA::Boolean operator<< (TAO_OutputCDR &, const IORTable::AlreadyBound &);
-TAO_IORTable_Export CORBA::Boolean operator>> (TAO_InputCDR &, IORTable::AlreadyBound &);
-
-TAO_IORTable_Export CORBA::Boolean operator<< (TAO_OutputCDR &, const IORTable::NotFound &);
-TAO_IORTable_Export CORBA::Boolean operator>> (TAO_InputCDR &, IORTable::NotFound &);
-
-
-#endif /* __ACE_INLINE__ */
-
 
 #if defined (__ACE_INLINE__)
 #include "IORTableC.i"
