The MT-Cubit example for the CHORUS COOL ORB
--------------------------------------------

Compiling
---------

Setup the CHORUS COOL environment variables before compiling, the
following is an example.  You would typically want this in the shells'
resource file (e.g. .cshrc.mine).  The example provided is for a C
shell.

   setenv CHORUS_ROOT /project/doc/miniCOOL/minicool.r4.3/solaris2.5-CC-mt
   set path = ($path /project/doc/miniCOOL/minicool.r4.3/solaris2.5-CC-mt/bin)
   setenv LD_LIBRARY_PATH /project/doc/miniCOOL/minicool.r4.3/solaris2.5-CC-mt/lib:$LD_LIBRARY_PATH
   setenv MANPATH /project/doc/miniCOOL/minicool.r4.3/solaris2.5-CC-mt/man:$MANPATH
 
Makefiles are provided. Use make to compile.

You can either run the server in the background in the same window as
the client or open a separate window for the client and server.

server:
-------

./server <tpr | tpool> cool-tcp://<THIS_HOSTNAME>:<THIS_HOST_PORT> -v -cool-tcp -cool-iiop

tpr	: this indicates to the server to use the Thread Per Request concurrency model.

tpool	: this indicates to the server to use the Thread Pool concurrency model.

THIS_HOSTNAME : the name of the host that the server will be running on.  This is useful 
		if you want to specifya different interface (e.g. ATM, 100Mbit Ethernet)

THIS_HOST_PORT: is the port number at which the server will start the high
		priority servant. The low priority servant will be created at
		(THIS_HOST_PORT+1).

The server will print the IOR of the high and low priority servants,
but it is not required by the client.

client:
-------

./client [-n <LOOP_COUNT>] [-t <NUM_THREADS>] [-h SERVER_HOSTNAME] [-p <SERVER_PORT_NUM>] -cool-tcp -cool-iiop

<SERVER_HOSTNAME>: is the hostname of the server.

<SERVER_PORT_NUM>: is the port number of the servant. 

Based on the SERVER_HOSTNAME and the SERVER_PORT_NUM, the client constructs
the IOR's for the high priority servant and the low priority servant.

<LOOP_COUNT>	: is the number of times the group of CORBA twoway calls are to 
		be made.  The group consists of the following calls: cube_octet(), cube_short(),
		cube_long() and cube_struct().  The default is 100 loops (i.e. 400 calls are made).

<NUM_THREADS> 	: is the total number of concurrent clients to be
		created. One of these clients will be a high priority client (and thus
		send requests to the high priority servant), and the rest will have
		low priority.

The high priority client makes requests at 20Hz, and the low priority
clients make requests at 10Hz.

Results
-------

The client prints the latency observed by the high priority client,
and the average latency observed by the low priority client.

An Example
----------

   On the host lambada.cs.wustl.edu :
      
   % ./server tpool cool-tcp://lambada.cs.wustl.edu:3000 -v -cool-tcp -cool-iiop
      
   On the host merengue.cs.wustl.edu :
      
   % ./client -t 2 -h lambada.cs.wustl.edu -p 3000 -cool-tcp -cool-iiop 
      
   The output of the client program may look like this:
      
   (5) Everyone's done, here I go!!
   (4) Threads have bound, utilization test started
   (9) Everyone's done, here I go!!
   (8) Everyone's done, here I go!!
   (6) Everyone's done, here I go!!
   (7) Everyone's done, here I go!!
   cube average call ACE_OS::time  = 20.917016 msec,       47.807966 calls/second
   (5) My latency was 20.917016
   5 calls, 0 errors
   cube average call ACE_OS::time  = 19.299501 msec,       51.814811 calls/second
   (8) My latency was 19.299501
   cube average call ACE_OS::time  = 19.262436 msec,       51.914514 calls/second
   5 calls, 0 errors
   (9) My latency was 19.262436
   5 calls, 0 errors
   cube average call ACE_OS::time  = 15.101540 msec,       66.218412 calls/second
   (6) My latency was 15.101540
   5 calls, 0 errors
   cube average call ACE_OS::time  = 10.320359 msec,       96.895858 calls/second
   (7) My latency was 10.320359
   5 calls, 0 errors
   Test done.
   High priority client latency : 20.917016 msec, jitter: 36.582330 msec
   Low priority client latency : 15.995959 msec, jitter: 527.515277 msec
   utilization task performed 435 computations

  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   