// -*- C++ -*-
//
// $Id$

// ****  Code generated by the The ACE ORB (TAO) IDL Compiler ****
// TAO and the TAO IDL Compiler have been developed by:
//       Center for Distributed Object Computing
//       Washington University
//       St. Louis, MO
//       USA
//       http://www.cs.wustl.edu/~schmidt/doc-center.html
// and
//       Distributed Object Computing Laboratory
//       University of California at Irvine
//       Irvine, CA
//       USA
//       http://doc.ece.uci.edu/
//
// Information about TAO is available at:
//     http://www.cs.wustl.edu/~schmidt/TAO.html

// ************************************************************
// Methods for classes moved from IFR_BaseC.i

#if !defined (TAO_USE_SEQUENCE_TEMPLATES)
  
#if !defined (__TAO_UNBOUNDED_OBJECT_SEQUENCE_CORBA_VALUEDEFSEQ_CI_)
#define __TAO_UNBOUNDED_OBJECT_SEQUENCE_CORBA_VALUEDEFSEQ_CI_

  ACE_INLINE CORBA::ValueDef **
 _TAO_Unbounded_Object_Sequence_CORBA_ValueDefSeq::allocbuf (CORBA::ULong nelems)
  {
    CORBA::ValueDef **buf = 0;
    
    ACE_NEW_RETURN (buf, CORBA::ValueDef*[nelems], 0);
    
    for (CORBA::ULong i = 0; i < nelems; i++)
      buf[i] = CORBA::ValueDef::_nil ();
    
    return buf;
  }
  
  ACE_INLINE void 
  _TAO_Unbounded_Object_Sequence_CORBA_ValueDefSeq::freebuf (CORBA::ValueDef **buffer)
  {
    if (buffer == 0)
      return;
    delete[] buffer;
  }
  
  ACE_INLINE
  _TAO_Unbounded_Object_Sequence_CORBA_ValueDefSeq::_TAO_Unbounded_Object_Sequence_CORBA_ValueDefSeq (void)
  {
  }
  
  ACE_INLINE
  _TAO_Unbounded_Object_Sequence_CORBA_ValueDefSeq::_TAO_Unbounded_Object_Sequence_CORBA_ValueDefSeq (CORBA::ULong maximum)
    : TAO_Unbounded_Base_Sequence (maximum, _TAO_Unbounded_Object_Sequence_CORBA_ValueDefSeq::allocbuf (maximum))
  {
  }
  
  ACE_INLINE
  _TAO_Unbounded_Object_Sequence_CORBA_ValueDefSeq::_TAO_Unbounded_Object_Sequence_CORBA_ValueDefSeq (CORBA::ULong maximum,
    CORBA::ULong length,
    CORBA::ValueDef* *value,
    CORBA::Boolean release)
  : TAO_Unbounded_Base_Sequence (maximum, length, value, release)
  {
  }
  
  ACE_INLINE
  _TAO_Unbounded_Object_Sequence_CORBA_ValueDefSeq::_TAO_Unbounded_Object_Sequence_CORBA_ValueDefSeq(const _TAO_Unbounded_Object_Sequence_CORBA_ValueDefSeq &rhs)
    : TAO_Unbounded_Base_Sequence (rhs)
  {
    if (rhs.buffer_ != 0)
    {
      CORBA::ValueDef **tmp1 = _TAO_Unbounded_Object_Sequence_CORBA_ValueDefSeq::allocbuf (this->maximum_);
      CORBA::ValueDef ** const tmp2 = ACE_reinterpret_cast (CORBA::ValueDef ** ACE_CAST_CONST, rhs.buffer_);
      
      for (CORBA::ULong i = 0; i < rhs.length_; ++i)
        tmp1[i] = CORBA::ValueDef::_duplicate (tmp2[i]);
      
      this->buffer_ = tmp1;
    }
    else
    {
      this->buffer_ = 0;
    }
  }
  
  ACE_INLINE _TAO_Unbounded_Object_Sequence_CORBA_ValueDefSeq &
  _TAO_Unbounded_Object_Sequence_CORBA_ValueDefSeq::operator= (const _TAO_Unbounded_Object_Sequence_CORBA_ValueDefSeq &rhs)
  {
    if (this == &rhs)
      return *this;
    
    if (this->release_)
    {
      CORBA::ValueDef **tmp = ACE_reinterpret_cast (CORBA::ValueDef **, this->buffer_);
      
      for (CORBA::ULong i = 0; i < this->length_; ++i)
      {
        CORBA::release (tmp[i]);
        tmp[i] = CORBA::ValueDef::_nil ();
      }
      if (this->maximum_ < rhs.maximum_)
      {
        _TAO_Unbounded_Object_Sequence_CORBA_ValueDefSeq::freebuf (tmp);
        this->buffer_ = _TAO_Unbounded_Object_Sequence_CORBA_ValueDefSeq::allocbuf (rhs.maximum_);
      }
    }
    else
      this->buffer_ = _TAO_Unbounded_Object_Sequence_CORBA_ValueDefSeq::allocbuf (rhs.maximum_);
    
    TAO_Unbounded_Base_Sequence::operator= (rhs);
    
    CORBA::ValueDef **tmp1 = ACE_reinterpret_cast (CORBA::ValueDef **, this->buffer_);
    CORBA::ValueDef ** const tmp2 = ACE_reinterpret_cast (CORBA::ValueDef ** ACE_CAST_CONST, rhs.buffer_);
    
    for (CORBA::ULong i = 0; i < rhs.length_; ++i)
      tmp1[i] = CORBA::ValueDef::_duplicate (tmp2[i]);
    
    return *this;
  }
  
  ACE_INLINE TAO_Object_Manager<CORBA::ValueDef,CORBA::ValueDef_var>
  _TAO_Unbounded_Object_Sequence_CORBA_ValueDefSeq::operator[] (CORBA::ULong index) const
  // read-write accessor
  {
    ACE_ASSERT (index < this->maximum_);
    CORBA::ValueDef ** const tmp = ACE_reinterpret_cast (CORBA::ValueDef ** ACE_CAST_CONST, this->buffer_);
    return TAO_Object_Manager<CORBA::ValueDef,CORBA::ValueDef_var> (tmp + index, this->release_);
  }
  
  ACE_INLINE CORBA::ValueDef* *
 _TAO_Unbounded_Object_Sequence_CORBA_ValueDefSeq::get_buffer (CORBA::Boolean orphan)
  {
    CORBA::ValueDef **result = 0;
    if (orphan == 0)
    {
      // We retain ownership.
      if (this->buffer_ == 0)
      {
        result = _TAO_Unbounded_Object_Sequence_CORBA_ValueDefSeq::allocbuf (this->maximum_);
        this->buffer_ = result;
        this->release_ = 1;
      }
      else
      {
        result = ACE_reinterpret_cast (CORBA::ValueDef**, this->buffer_);
      }
    }
    else // if (orphan == 1)
    {
      if (this->release_ != 0)
      {
        // We set the state back to default and relinquish
        // ownership.
        result = ACE_reinterpret_cast(CORBA::ValueDef**,this->buffer_);
        this->maximum_ = 0;
        this->length_ = 0;
        this->buffer_ = 0;
        this->release_ = 0;
      }
    }
    return result;
  }
  
  ACE_INLINE const CORBA::ValueDef* *
 _TAO_Unbounded_Object_Sequence_CORBA_ValueDefSeq::get_buffer (void) const
  {
    return ACE_reinterpret_cast(const CORBA::ValueDef ** ACE_CAST_CONST, this->buffer_);
  }
  
  
#endif /* end #if !defined */


#endif /* !TAO_USE_SEQUENCE_TEMPLATES */ 

#if !defined (_CORBA_VALUEDEFSEQ_CI_)
#define _CORBA_VALUEDEFSEQ_CI_

// *************************************************************
// Inline operations for class CORBA_ValueDefSeq_var
// *************************************************************

ACE_INLINE
CORBA_ValueDefSeq_var::CORBA_ValueDefSeq_var (void) // default constructor
  : ptr_ (0)
{}

ACE_INLINE
CORBA_ValueDefSeq_var::CORBA_ValueDefSeq_var (CORBA_ValueDefSeq *p)
  : ptr_ (p)
{}

ACE_INLINE
CORBA_ValueDefSeq_var::CORBA_ValueDefSeq_var (const ::CORBA_ValueDefSeq_var &p) // copy constructor
{
  if (p.ptr_)
    ACE_NEW (this->ptr_, ::CORBA_ValueDefSeq (*p.ptr_));
  else
    this->ptr_ = 0;
}

ACE_INLINE
CORBA_ValueDefSeq_var::~CORBA_ValueDefSeq_var (void) // destructor
{
  delete this->ptr_;
}

ACE_INLINE CORBA_ValueDefSeq_var &
CORBA_ValueDefSeq_var::operator= (CORBA_ValueDefSeq *p)
{
  delete this->ptr_;
  this->ptr_ = p;
  return *this;
}

ACE_INLINE ::CORBA_ValueDefSeq_var &
CORBA_ValueDefSeq_var::operator= (const ::CORBA_ValueDefSeq_var &p)
{
  if (this != &p)
    {
      if (p.ptr_ == 0)
        {
          delete this->ptr_;
          this->ptr_ = 0;
        }
      else
        {
          CORBA_ValueDefSeq *deep_copy =
            new CORBA_ValueDefSeq (*p.ptr_);
          
          if (deep_copy != 0)
            {
              CORBA_ValueDefSeq *tmp = deep_copy;
              deep_copy = this->ptr_;
              this->ptr_ = tmp;
              delete deep_copy;
            }
        }
    }
  
  return *this;
}

ACE_INLINE const ::CORBA_ValueDefSeq *
CORBA_ValueDefSeq_var::operator-> (void) const
{
  return this->ptr_;
}

ACE_INLINE ::CORBA_ValueDefSeq *
CORBA_ValueDefSeq_var::operator-> (void)
{
  return this->ptr_;
}

ACE_INLINE 
CORBA_ValueDefSeq_var::operator const ::CORBA_ValueDefSeq &() const // cast
{
  return *this->ptr_;
}

ACE_INLINE 
CORBA_ValueDefSeq_var::operator ::CORBA_ValueDefSeq &() // cast 
{
  return *this->ptr_;
}

ACE_INLINE 
CORBA_ValueDefSeq_var::operator ::CORBA_ValueDefSeq &() const // cast 
{
  return *this->ptr_;
}

// variable-size types only
ACE_INLINE
CORBA_ValueDefSeq_var::operator ::CORBA_ValueDefSeq *&() // cast 
{
  return this->ptr_;
}

ACE_INLINE TAO_Object_Manager<CORBA::ValueDef, CORBA::ValueDef_var>
CORBA_ValueDefSeq_var::operator[] (CORBA::ULong index)
{
  return this->ptr_->operator[] (index);
}

ACE_INLINE const ::CORBA_ValueDefSeq &
CORBA_ValueDefSeq_var::in (void) const
{
  return *this->ptr_;
}

ACE_INLINE ::CORBA_ValueDefSeq &
CORBA_ValueDefSeq_var::inout (void)
{
  return *this->ptr_;
}

// mapping for variable size 
ACE_INLINE ::CORBA_ValueDefSeq *&
CORBA_ValueDefSeq_var::out (void)
{
  delete this->ptr_;
  this->ptr_ = 0;
  return this->ptr_;
}

ACE_INLINE ::CORBA_ValueDefSeq *
CORBA_ValueDefSeq_var::_retn (void)
{
  ::CORBA_ValueDefSeq *tmp = this->ptr_;
  this->ptr_ = 0;
  return tmp;
}

ACE_INLINE ::CORBA_ValueDefSeq *
CORBA_ValueDefSeq_var::ptr (void) const
{
  return this->ptr_;
}

// *************************************************************
// Inline operations for class CORBA_ValueDefSeq_out
// *************************************************************

ACE_INLINE
CORBA_ValueDefSeq_out::CORBA_ValueDefSeq_out (CORBA_ValueDefSeq *&p)
  : ptr_ (p)
{
  this->ptr_ = 0;
}

ACE_INLINE
CORBA_ValueDefSeq_out::CORBA_ValueDefSeq_out (CORBA_ValueDefSeq_var &p) // constructor from _var
  : ptr_ (p.out ())
{
  delete this->ptr_;
  this->ptr_ = 0;
}

ACE_INLINE
CORBA_ValueDefSeq_out::CORBA_ValueDefSeq_out (const ::CORBA_ValueDefSeq_out &p) // copy constructor
  : ptr_ (ACE_const_cast (CORBA_ValueDefSeq_out&, p).ptr_)
{}

ACE_INLINE ::CORBA_ValueDefSeq_out &
CORBA_ValueDefSeq_out::operator= (const ::CORBA_ValueDefSeq_out &p)
{
  this->ptr_ = ACE_const_cast (CORBA_ValueDefSeq_out&, p).ptr_;
  return *this;
}

ACE_INLINE ::CORBA_ValueDefSeq_out &
CORBA_ValueDefSeq_out::operator= (CORBA_ValueDefSeq *p)
{
  this->ptr_ = p;
  return *this;
}

ACE_INLINE 
CORBA_ValueDefSeq_out::operator ::CORBA_ValueDefSeq *&() // cast
{
  return this->ptr_;
}

ACE_INLINE ::CORBA_ValueDefSeq *&
CORBA_ValueDefSeq_out::ptr (void) // ptr
{
  return this->ptr_;
}

ACE_INLINE ::CORBA_ValueDefSeq *
CORBA_ValueDefSeq_out::operator-> (void)
{
  return this->ptr_;
}

ACE_INLINE TAO_Object_Manager<CORBA::ValueDef, CORBA::ValueDef_var>
CORBA_ValueDefSeq_out::operator[] (CORBA::ULong index)
{
  return this->ptr_->operator[] (index);
}


#endif /* end #if !defined */

// ******************************************************************

#if !defined (_CORBA_FIXEDDEF___CI_)
#define _CORBA_FIXEDDEF___CI_

ACE_INLINE
CORBA_FixedDef::CORBA_FixedDef (
    TAO_Stub *objref,
    CORBA::Boolean _tao_collocated,
    TAO_Abstract_ServantBase *servant
  )
  : CORBA_Object (objref, _tao_collocated, servant)
{
  this->CORBA_FixedDef_setup_collocation (_tao_collocated);
}

#endif /* end #if !defined */


#if !defined (_CORBA_FIXEDDEF___VAR_CI_)
#define _CORBA_FIXEDDEF___VAR_CI_

// *************************************************************
// Inline operations for class CORBA_FixedDef_var
// *************************************************************

ACE_INLINE
CORBA_FixedDef_var::CORBA_FixedDef_var (void) // default constructor
  : ptr_ (CORBA_FixedDef::_nil ())
{}

ACE_INLINE ::CORBA_FixedDef_ptr
CORBA_FixedDef_var::ptr (void) const
{
  return this->ptr_;
}

ACE_INLINE
CORBA_FixedDef_var::CORBA_FixedDef_var (const ::CORBA_FixedDef_var &p) // copy constructor
  : TAO_Base_var (),
    ptr_ (CORBA_FixedDef::_duplicate (p.ptr ()))
{}

ACE_INLINE
CORBA_FixedDef_var::~CORBA_FixedDef_var (void) // destructor
{
  CORBA::release (this->ptr_);
}

ACE_INLINE CORBA_FixedDef_var &
CORBA_FixedDef_var::operator= (CORBA_FixedDef_ptr p)
{
  CORBA::release (this->ptr_);
  this->ptr_ = p;
  return *this;
}

ACE_INLINE CORBA_FixedDef_var &
CORBA_FixedDef_var::operator= (const ::CORBA_FixedDef_var &p)
{
  if (this != &p)
  {
    CORBA::release (this->ptr_);
    this->ptr_ = ::CORBA_FixedDef::_duplicate (p.ptr ());
  }
  return *this;
}

ACE_INLINE 
CORBA_FixedDef_var::operator const ::CORBA_FixedDef_ptr &() const // cast
{
  return this->ptr_;
}

ACE_INLINE 
CORBA_FixedDef_var::operator ::CORBA_FixedDef_ptr &() // cast 
{
  return this->ptr_;
}

ACE_INLINE ::CORBA_FixedDef_ptr
CORBA_FixedDef_var::operator-> (void) const
{
  return this->ptr_;
}

ACE_INLINE ::CORBA_FixedDef_ptr
CORBA_FixedDef_var::in (void) const
{
  return this->ptr_;
}

ACE_INLINE ::CORBA_FixedDef_ptr &
CORBA_FixedDef_var::inout (void)
{
  return this->ptr_;
}

ACE_INLINE ::CORBA_FixedDef_ptr &
CORBA_FixedDef_var::out (void)
{
  CORBA::release (this->ptr_);
  this->ptr_ = ::CORBA_FixedDef::_nil ();
  return this->ptr_;
}

ACE_INLINE ::CORBA_FixedDef_ptr
CORBA_FixedDef_var::_retn (void)
{
  // yield ownership of managed obj reference
  ::CORBA_FixedDef_ptr val = this->ptr_;
  this->ptr_ = ::CORBA_FixedDef::_nil ();
  return val;
}


#endif /* end #if !defined */


#if !defined (_CORBA_FIXEDDEF___OUT_CI_)
#define _CORBA_FIXEDDEF___OUT_CI_

// *************************************************************
// Inline operations for class CORBA_FixedDef_out
// *************************************************************

ACE_INLINE
CORBA_FixedDef_out::CORBA_FixedDef_out (CORBA_FixedDef_ptr &p)
  : ptr_ (p)
{
  this->ptr_ = ::CORBA_FixedDef::_nil ();
}

ACE_INLINE
CORBA_FixedDef_out::CORBA_FixedDef_out (CORBA_FixedDef_var &p) // constructor from _var
  : ptr_ (p.out ())
{
  CORBA::release (this->ptr_);
  this->ptr_ = ::CORBA_FixedDef::_nil ();
}

ACE_INLINE
CORBA_FixedDef_out::CORBA_FixedDef_out (const ::CORBA_FixedDef_out &p) // copy constructor
  : ptr_ (ACE_const_cast (CORBA_FixedDef_out &, p).ptr_)
{}

ACE_INLINE ::CORBA_FixedDef_out &
CORBA_FixedDef_out::operator= (const ::CORBA_FixedDef_out &p)
{
  this->ptr_ = ACE_const_cast (CORBA_FixedDef_out&, p).ptr_;
  return *this;
}

ACE_INLINE CORBA_FixedDef_out &
CORBA_FixedDef_out::operator= (const ::CORBA_FixedDef_var &p)
{
  this->ptr_ = ::CORBA_FixedDef::_duplicate (p.ptr ());
  return *this;
}

ACE_INLINE CORBA_FixedDef_out &
CORBA_FixedDef_out::operator= (CORBA_FixedDef_ptr p)
{
  this->ptr_ = p;
  return *this;
}

ACE_INLINE 
CORBA_FixedDef_out::operator ::CORBA_FixedDef_ptr &() // cast
{
  return this->ptr_;
}

ACE_INLINE ::CORBA_FixedDef_ptr &
CORBA_FixedDef_out::ptr (void) // ptr
{
  return this->ptr_;
}

ACE_INLINE ::CORBA_FixedDef_ptr
CORBA_FixedDef_out::operator-> (void)
{
  return this->ptr_;
}


#endif /* end #if !defined */

// *************************************************************
// Inline operations for class CORBA_ValueMember_var
// *************************************************************

ACE_INLINE
CORBA_ValueMember_var::CORBA_ValueMember_var (void) // default constructor
  : ptr_ (0)
{}

ACE_INLINE
CORBA_ValueMember_var::CORBA_ValueMember_var (CORBA_ValueMember *p)
  : ptr_ (p)
{}

ACE_INLINE
CORBA_ValueMember_var::CORBA_ValueMember_var (const ::CORBA_ValueMember_var &p) // copy constructor
{
  if (p.ptr_)
    ACE_NEW (this->ptr_, ::CORBA_ValueMember (*p.ptr_));
  else
    this->ptr_ = 0;
}

ACE_INLINE
CORBA_ValueMember_var::~CORBA_ValueMember_var (void) // destructor
{
  delete this->ptr_;
}

ACE_INLINE CORBA_ValueMember_var &
CORBA_ValueMember_var::operator= (CORBA_ValueMember *p)
{
  delete this->ptr_;
  this->ptr_ = p;
  return *this;
}

ACE_INLINE ::CORBA_ValueMember_var &
CORBA_ValueMember_var::operator= (const ::CORBA_ValueMember_var &p)
{
  if (this != &p)
    {
      if (p.ptr_ == 0)
        {
          delete this->ptr_;
          this->ptr_ = 0;
        }
      else
        {
          CORBA_ValueMember *deep_copy =
            new CORBA_ValueMember (*p.ptr_);
          
          if (deep_copy != 0)
            {
              CORBA_ValueMember *tmp = deep_copy;
              deep_copy = this->ptr_;
              this->ptr_ = tmp;
              delete deep_copy;
            }
        }
    }
  
  return *this;
}

ACE_INLINE const ::CORBA_ValueMember *
CORBA_ValueMember_var::operator-> (void) const
{
  return this->ptr_;
}

ACE_INLINE ::CORBA_ValueMember *
CORBA_ValueMember_var::operator-> (void)
{
  return this->ptr_;
}

ACE_INLINE
CORBA_ValueMember_var::operator const ::CORBA_ValueMember &() const // cast
{
  return *this->ptr_;
}

ACE_INLINE
CORBA_ValueMember_var::operator ::CORBA_ValueMember &() // cast 
{
  return *this->ptr_;
}

ACE_INLINE
CORBA_ValueMember_var::operator ::CORBA_ValueMember &() const // cast 
{
  return *this->ptr_;
}

// variable-size types only
ACE_INLINE
CORBA_ValueMember_var::operator ::CORBA_ValueMember *&() // cast 
{
  return this->ptr_;
}

ACE_INLINE const ::CORBA_ValueMember &
CORBA_ValueMember_var::in (void) const
{
  return *this->ptr_;
}

ACE_INLINE ::CORBA_ValueMember &
CORBA_ValueMember_var::inout (void)
{
  return *this->ptr_;
}

// mapping for variable size 
ACE_INLINE ::CORBA_ValueMember *&
CORBA_ValueMember_var::out (void)
{
  delete this->ptr_;
  this->ptr_ = 0;
  return this->ptr_;
}

ACE_INLINE ::CORBA_ValueMember *
CORBA_ValueMember_var::_retn (void)
{
  ::CORBA_ValueMember *tmp = this->ptr_;
  this->ptr_ = 0;
  return tmp;
}

ACE_INLINE ::CORBA_ValueMember *
CORBA_ValueMember_var::ptr (void) const
{
  return this->ptr_;
}

// *************************************************************
// Inline operations for class CORBA_ValueMember_out
// *************************************************************

ACE_INLINE
CORBA_ValueMember_out::CORBA_ValueMember_out (::CORBA_ValueMember *&p)
  : ptr_ (p)
{
  this->ptr_ = 0;
}

ACE_INLINE
CORBA_ValueMember_out::CORBA_ValueMember_out (CORBA_ValueMember_var &p) // constructor from _var
  : ptr_ (p.out ())
{
  delete this->ptr_;
  this->ptr_ = 0;
}

ACE_INLINE
CORBA_ValueMember_out::CORBA_ValueMember_out (const ::CORBA_ValueMember_out &p) // copy constructor
  : ptr_ (ACE_const_cast (CORBA_ValueMember_out&, p).ptr_)
{}

ACE_INLINE CORBA_ValueMember_out &
CORBA_ValueMember_out::operator= (const ::CORBA_ValueMember_out &p)
{
  this->ptr_ = ACE_const_cast (CORBA_ValueMember_out&, p).ptr_;
  return *this;
}

ACE_INLINE CORBA_ValueMember_out &
CORBA_ValueMember_out::operator= (CORBA_ValueMember *p)
{
  this->ptr_ = p;
  return *this;
}

ACE_INLINE 
CORBA_ValueMember_out::operator ::CORBA_ValueMember *&() // cast
{
  return this->ptr_;
}

ACE_INLINE ::CORBA_ValueMember *&
CORBA_ValueMember_out::ptr (void) // ptr
{
  return this->ptr_;
}

ACE_INLINE ::CORBA_ValueMember *
CORBA_ValueMember_out::operator-> (void)
{
  return this->ptr_;
}


#if !defined (TAO_USE_SEQUENCE_TEMPLATES)
  
#if !defined (__TAO_UNBOUNDED_SEQUENCE_CORBA_VALUEMEMBERSEQ_CI_)
#define __TAO_UNBOUNDED_SEQUENCE_CORBA_VALUEMEMBERSEQ_CI_

  // = Static operations.
  ACE_INLINE CORBA::ValueMember *
  _TAO_Unbounded_Sequence_CORBA_ValueMemberSeq::allocbuf (CORBA::ULong size)
  // Allocate storage for the sequence.
  {
    CORBA::ValueMember *retval = 0;
    ACE_NEW_RETURN (retval, CORBA::ValueMember[size], 0);
    return retval;
  }
  
  ACE_INLINE void _TAO_Unbounded_Sequence_CORBA_ValueMemberSeq::freebuf (CORBA::ValueMember *buffer)
  // Free the sequence.
  {
    delete [] buffer;
  }
  
  ACE_INLINE
  _TAO_Unbounded_Sequence_CORBA_ValueMemberSeq::_TAO_Unbounded_Sequence_CORBA_ValueMemberSeq (void) // Default constructor.
  {
  }
  
  ACE_INLINE
  _TAO_Unbounded_Sequence_CORBA_ValueMemberSeq::_TAO_Unbounded_Sequence_CORBA_ValueMemberSeq (CORBA::ULong maximum) // Constructor using a maximum length value.
    : TAO_Unbounded_Base_Sequence (maximum, _TAO_Unbounded_Sequence_CORBA_ValueMemberSeq::allocbuf (maximum))
  {
  }
  
  ACE_INLINE
  _TAO_Unbounded_Sequence_CORBA_ValueMemberSeq::_TAO_Unbounded_Sequence_CORBA_ValueMemberSeq (CORBA::ULong maximum,
    CORBA::ULong length,
    CORBA::ValueMember *data,
    CORBA::Boolean release)
  : TAO_Unbounded_Base_Sequence (maximum, length, data, release)
  {
  }
  
  ACE_INLINE
  _TAO_Unbounded_Sequence_CORBA_ValueMemberSeq::_TAO_Unbounded_Sequence_CORBA_ValueMemberSeq (const _TAO_Unbounded_Sequence_CORBA_ValueMemberSeq &rhs)
  // Copy constructor.
    : TAO_Unbounded_Base_Sequence (rhs)
  {
    if (rhs.buffer_ != 0)
    {
      CORBA::ValueMember *tmp1 = _TAO_Unbounded_Sequence_CORBA_ValueMemberSeq::allocbuf (this->maximum_);
      CORBA::ValueMember * const tmp2 = ACE_reinterpret_cast (CORBA::ValueMember * ACE_CAST_CONST, rhs.buffer_);
      
      for (CORBA::ULong i = 0; i < this->length_; ++i)
        tmp1[i] = tmp2[i];
      
      this->buffer_ = tmp1;
    }
    else
    {
      this->buffer_ = 0;
    }
  }
  
  ACE_INLINE _TAO_Unbounded_Sequence_CORBA_ValueMemberSeq &
  _TAO_Unbounded_Sequence_CORBA_ValueMemberSeq::operator= (const _TAO_Unbounded_Sequence_CORBA_ValueMemberSeq &rhs)
  // Assignment operator.
  {
    if (this == &rhs)
      return *this;
    
    if (this->release_)
    {
      if (this->maximum_ < rhs.maximum_)
      {
        // free the old buffer
        CORBA::ValueMember *tmp = ACE_reinterpret_cast (CORBA::ValueMember *, this->buffer_);
        _TAO_Unbounded_Sequence_CORBA_ValueMemberSeq::freebuf (tmp);
        this->buffer_ = _TAO_Unbounded_Sequence_CORBA_ValueMemberSeq::allocbuf (rhs.maximum_);
      }
    }
    else
      this->buffer_ = _TAO_Unbounded_Sequence_CORBA_ValueMemberSeq::allocbuf (rhs.maximum_);
    
    TAO_Unbounded_Base_Sequence::operator= (rhs);
    
    CORBA::ValueMember *tmp1 = ACE_reinterpret_cast (CORBA::ValueMember *, this->buffer_);
    CORBA::ValueMember * const tmp2 = ACE_reinterpret_cast (CORBA::ValueMember * ACE_CAST_CONST, rhs.buffer_);
    
    for (CORBA::ULong i = 0; i < this->length_; ++i)
      tmp1[i] = tmp2[i];
    
    return *this;
  }
  
  // = Accessors.
  ACE_INLINE CORBA::ValueMember &
  _TAO_Unbounded_Sequence_CORBA_ValueMemberSeq::operator[] (CORBA::ULong i)
  // operator []
  {
    ACE_ASSERT (i < this->maximum_);
    CORBA::ValueMember* tmp = ACE_reinterpret_cast(CORBA::ValueMember*,this->buffer_);
    return tmp[i];
  }
  
  ACE_INLINE const CORBA::ValueMember &
  _TAO_Unbounded_Sequence_CORBA_ValueMemberSeq::operator[] (CORBA::ULong i) const
  // operator []
  {
    ACE_ASSERT (i < this->maximum_);
    CORBA::ValueMember * const tmp = ACE_reinterpret_cast (CORBA::ValueMember* ACE_CAST_CONST, this->buffer_);
    return tmp[i];
  }
  
  // Implement the TAO_Base_Sequence methods (see Sequence.h)
  
  ACE_INLINE CORBA::ValueMember *
  _TAO_Unbounded_Sequence_CORBA_ValueMemberSeq::get_buffer (CORBA::Boolean orphan)
  {
    CORBA::ValueMember *result = 0;
    if (orphan == 0)
    {
      // We retain ownership.
      if (this->buffer_ == 0)
      {
        result = _TAO_Unbounded_Sequence_CORBA_ValueMemberSeq::allocbuf (this->length_);
        this->buffer_ = result;
        this->release_ = 1;
      }
      else
      {
        result = ACE_reinterpret_cast (CORBA::ValueMember*, this->buffer_);
      }
    }
    else // if (orphan == 1)
    {
      if (this->release_ != 0)
      {
        // We set the state back to default and relinquish
        // ownership.
        result = ACE_reinterpret_cast(CORBA::ValueMember*,this->buffer_);
        this->maximum_ = 0;
        this->length_ = 0;
        this->buffer_ = 0;
        this->release_ = 0;
      }
    }
    return result;
  }
  
  ACE_INLINE const CORBA::ValueMember *
  _TAO_Unbounded_Sequence_CORBA_ValueMemberSeq::get_buffer (void) const
  {
    return ACE_reinterpret_cast(const CORBA::ValueMember * ACE_CAST_CONST, this->buffer_);
  }
  
  ACE_INLINE void
  _TAO_Unbounded_Sequence_CORBA_ValueMemberSeq::replace (CORBA::ULong max,
  CORBA::ULong length,
  CORBA::ValueMember *data,
  CORBA::Boolean release)
  {
    this->maximum_ = max;
    this->length_ = length;
    if (this->buffer_ && this->release_ == 1)
    {
      CORBA::ValueMember *tmp = ACE_reinterpret_cast(CORBA::ValueMember*,this->buffer_);
      _TAO_Unbounded_Sequence_CORBA_ValueMemberSeq::freebuf (tmp);
    }
    this->buffer_ = data;
    this->release_ = release;
  }
  
#endif /* end #if !defined */


#endif /* !TAO_USE_SEQUENCE_TEMPLATES */ 

#if !defined (_CORBA_VALUEMEMBERSEQ_CI_)
#define _CORBA_VALUEMEMBERSEQ_CI_

// *************************************************************
// Inline operations for class CORBA_ValueMemberSeq_var
// *************************************************************

ACE_INLINE
CORBA_ValueMemberSeq_var::CORBA_ValueMemberSeq_var (void) // default constructor
  : ptr_ (0)
{}

ACE_INLINE
CORBA_ValueMemberSeq_var::CORBA_ValueMemberSeq_var (CORBA_ValueMemberSeq *p)
  : ptr_ (p)
{}

ACE_INLINE
CORBA_ValueMemberSeq_var::CORBA_ValueMemberSeq_var (const ::CORBA_ValueMemberSeq_var &p) // copy constructor
{
  if (p.ptr_)
    ACE_NEW (this->ptr_, ::CORBA_ValueMemberSeq (*p.ptr_));
  else
    this->ptr_ = 0;
}

ACE_INLINE
CORBA_ValueMemberSeq_var::~CORBA_ValueMemberSeq_var (void) // destructor
{
  delete this->ptr_;
}

ACE_INLINE CORBA_ValueMemberSeq_var &
CORBA_ValueMemberSeq_var::operator= (CORBA_ValueMemberSeq *p)
{
  delete this->ptr_;
  this->ptr_ = p;
  return *this;
}

ACE_INLINE ::CORBA_ValueMemberSeq_var &
CORBA_ValueMemberSeq_var::operator= (const ::CORBA_ValueMemberSeq_var &p)
{
  if (this != &p)
    {
      if (p.ptr_ == 0)
        {
          delete this->ptr_;
          this->ptr_ = 0;
        }
      else
        {
          CORBA_ValueMemberSeq *deep_copy =
            new CORBA_ValueMemberSeq (*p.ptr_);
          
          if (deep_copy != 0)
            {
              CORBA_ValueMemberSeq *tmp = deep_copy;
              deep_copy = this->ptr_;
              this->ptr_ = tmp;
              delete deep_copy;
            }
        }
    }
  
  return *this;
}

ACE_INLINE const ::CORBA_ValueMemberSeq *
CORBA_ValueMemberSeq_var::operator-> (void) const
{
  return this->ptr_;
}

ACE_INLINE ::CORBA_ValueMemberSeq *
CORBA_ValueMemberSeq_var::operator-> (void)
{
  return this->ptr_;
}

ACE_INLINE 
CORBA_ValueMemberSeq_var::operator const ::CORBA_ValueMemberSeq &() const // cast
{
  return *this->ptr_;
}

ACE_INLINE 
CORBA_ValueMemberSeq_var::operator ::CORBA_ValueMemberSeq &() // cast 
{
  return *this->ptr_;
}

ACE_INLINE 
CORBA_ValueMemberSeq_var::operator ::CORBA_ValueMemberSeq &() const // cast 
{
  return *this->ptr_;
}

// variable-size types only
ACE_INLINE
CORBA_ValueMemberSeq_var::operator ::CORBA_ValueMemberSeq *&() // cast 
{
  return this->ptr_;
}

ACE_INLINE CORBA::ValueMember &
CORBA_ValueMemberSeq_var::operator[] (CORBA::ULong index)
{
  return this->ptr_->operator[] (index);
}

ACE_INLINE const CORBA::ValueMember &
CORBA_ValueMemberSeq_var::operator[] (CORBA::ULong index) const
{
  return ACE_const_cast (const CORBA::ValueMember &, this->ptr_->operator[] (index));
}

ACE_INLINE const ::CORBA_ValueMemberSeq &
CORBA_ValueMemberSeq_var::in (void) const
{
  return *this->ptr_;
}

ACE_INLINE ::CORBA_ValueMemberSeq &
CORBA_ValueMemberSeq_var::inout (void)
{
  return *this->ptr_;
}

// mapping for variable size 
ACE_INLINE ::CORBA_ValueMemberSeq *&
CORBA_ValueMemberSeq_var::out (void)
{
  delete this->ptr_;
  this->ptr_ = 0;
  return this->ptr_;
}

ACE_INLINE ::CORBA_ValueMemberSeq *
CORBA_ValueMemberSeq_var::_retn (void)
{
  ::CORBA_ValueMemberSeq *tmp = this->ptr_;
  this->ptr_ = 0;
  return tmp;
}

ACE_INLINE ::CORBA_ValueMemberSeq *
CORBA_ValueMemberSeq_var::ptr (void) const
{
  return this->ptr_;
}

// *************************************************************
// Inline operations for class CORBA_ValueMemberSeq_out
// *************************************************************

ACE_INLINE
CORBA_ValueMemberSeq_out::CORBA_ValueMemberSeq_out (CORBA_ValueMemberSeq *&p)
  : ptr_ (p)
{
  this->ptr_ = 0;
}

ACE_INLINE
CORBA_ValueMemberSeq_out::CORBA_ValueMemberSeq_out (CORBA_ValueMemberSeq_var &p) // constructor from _var
  : ptr_ (p.out ())
{
  delete this->ptr_;
  this->ptr_ = 0;
}

ACE_INLINE
CORBA_ValueMemberSeq_out::CORBA_ValueMemberSeq_out (const ::CORBA_ValueMemberSeq_out &p) // copy constructor
  : ptr_ (ACE_const_cast (CORBA_ValueMemberSeq_out&, p).ptr_)
{}

ACE_INLINE ::CORBA_ValueMemberSeq_out &
CORBA_ValueMemberSeq_out::operator= (const ::CORBA_ValueMemberSeq_out &p)
{
  this->ptr_ = ACE_const_cast (CORBA_ValueMemberSeq_out&, p).ptr_;
  return *this;
}

ACE_INLINE ::CORBA_ValueMemberSeq_out &
CORBA_ValueMemberSeq_out::operator= (CORBA_ValueMemberSeq *p)
{
  this->ptr_ = p;
  return *this;
}

ACE_INLINE 
CORBA_ValueMemberSeq_out::operator ::CORBA_ValueMemberSeq *&() // cast
{
  return this->ptr_;
}

ACE_INLINE ::CORBA_ValueMemberSeq *&
CORBA_ValueMemberSeq_out::ptr (void) // ptr
{
  return this->ptr_;
}

ACE_INLINE ::CORBA_ValueMemberSeq *
CORBA_ValueMemberSeq_out::operator-> (void)
{
  return this->ptr_;
}

ACE_INLINE CORBA::ValueMember &
CORBA_ValueMemberSeq_out::operator[] (CORBA::ULong index)
{
  return this->ptr_->operator[] (index);
}


#endif /* end #if !defined */


#if !defined (_CORBA_VALUEMEMBERDEF___CI_)
#define _CORBA_VALUEMEMBERDEF___CI_

ACE_INLINE
CORBA_ValueMemberDef::CORBA_ValueMemberDef (
    TAO_Stub *objref,
    CORBA::Boolean _tao_collocated,
    TAO_Abstract_ServantBase *servant
  )
  : CORBA_Object (objref, _tao_collocated, servant)
{
  this->CORBA_ValueMemberDef_setup_collocation (_tao_collocated);
}

#endif /* end #if !defined */


#if !defined (_CORBA_VALUEMEMBERDEF___VAR_CI_)
#define _CORBA_VALUEMEMBERDEF___VAR_CI_

// *************************************************************
// Inline operations for class CORBA_ValueMemberDef_var
// *************************************************************

ACE_INLINE
CORBA_ValueMemberDef_var::CORBA_ValueMemberDef_var (void) // default constructor
  : ptr_ (CORBA_ValueMemberDef::_nil ())
{}

ACE_INLINE ::CORBA_ValueMemberDef_ptr
CORBA_ValueMemberDef_var::ptr (void) const
{
  return this->ptr_;
}

ACE_INLINE
CORBA_ValueMemberDef_var::CORBA_ValueMemberDef_var (const ::CORBA_ValueMemberDef_var &p) // copy constructor
  : TAO_Base_var (),
    ptr_ (CORBA_ValueMemberDef::_duplicate (p.ptr ()))
{}

ACE_INLINE
CORBA_ValueMemberDef_var::~CORBA_ValueMemberDef_var (void) // destructor
{
  CORBA::release (this->ptr_);
}

ACE_INLINE CORBA_ValueMemberDef_var &
CORBA_ValueMemberDef_var::operator= (CORBA_ValueMemberDef_ptr p)
{
  CORBA::release (this->ptr_);
  this->ptr_ = p;
  return *this;
}

ACE_INLINE CORBA_ValueMemberDef_var &
CORBA_ValueMemberDef_var::operator= (const ::CORBA_ValueMemberDef_var &p)
{
  if (this != &p)
  {
    CORBA::release (this->ptr_);
    this->ptr_ = ::CORBA_ValueMemberDef::_duplicate (p.ptr ());
  }
  return *this;
}

ACE_INLINE 
CORBA_ValueMemberDef_var::operator const ::CORBA_ValueMemberDef_ptr &() const // cast
{
  return this->ptr_;
}

ACE_INLINE 
CORBA_ValueMemberDef_var::operator ::CORBA_ValueMemberDef_ptr &() // cast 
{
  return this->ptr_;
}

ACE_INLINE ::CORBA_ValueMemberDef_ptr
CORBA_ValueMemberDef_var::operator-> (void) const
{
  return this->ptr_;
}

ACE_INLINE ::CORBA_ValueMemberDef_ptr
CORBA_ValueMemberDef_var::in (void) const
{
  return this->ptr_;
}

ACE_INLINE ::CORBA_ValueMemberDef_ptr &
CORBA_ValueMemberDef_var::inout (void)
{
  return this->ptr_;
}

ACE_INLINE ::CORBA_ValueMemberDef_ptr &
CORBA_ValueMemberDef_var::out (void)
{
  CORBA::release (this->ptr_);
  this->ptr_ = ::CORBA_ValueMemberDef::_nil ();
  return this->ptr_;
}

ACE_INLINE ::CORBA_ValueMemberDef_ptr
CORBA_ValueMemberDef_var::_retn (void)
{
  // yield ownership of managed obj reference
  ::CORBA_ValueMemberDef_ptr val = this->ptr_;
  this->ptr_ = ::CORBA_ValueMemberDef::_nil ();
  return val;
}


#endif /* end #if !defined */


#if !defined (_CORBA_VALUEMEMBERDEF___OUT_CI_)
#define _CORBA_VALUEMEMBERDEF___OUT_CI_

// *************************************************************
// Inline operations for class CORBA_ValueMemberDef_out
// *************************************************************

ACE_INLINE
CORBA_ValueMemberDef_out::CORBA_ValueMemberDef_out (CORBA_ValueMemberDef_ptr &p)
  : ptr_ (p)
{
  this->ptr_ = ::CORBA_ValueMemberDef::_nil ();
}

ACE_INLINE
CORBA_ValueMemberDef_out::CORBA_ValueMemberDef_out (CORBA_ValueMemberDef_var &p) // constructor from _var
  : ptr_ (p.out ())
{
  CORBA::release (this->ptr_);
  this->ptr_ = ::CORBA_ValueMemberDef::_nil ();
}

ACE_INLINE
CORBA_ValueMemberDef_out::CORBA_ValueMemberDef_out (const ::CORBA_ValueMemberDef_out &p) // copy constructor
  : ptr_ (ACE_const_cast (CORBA_ValueMemberDef_out &, p).ptr_)
{}

ACE_INLINE ::CORBA_ValueMemberDef_out &
CORBA_ValueMemberDef_out::operator= (const ::CORBA_ValueMemberDef_out &p)
{
  this->ptr_ = ACE_const_cast (CORBA_ValueMemberDef_out&, p).ptr_;
  return *this;
}

ACE_INLINE CORBA_ValueMemberDef_out &
CORBA_ValueMemberDef_out::operator= (const ::CORBA_ValueMemberDef_var &p)
{
  this->ptr_ = ::CORBA_ValueMemberDef::_duplicate (p.ptr ());
  return *this;
}

ACE_INLINE CORBA_ValueMemberDef_out &
CORBA_ValueMemberDef_out::operator= (CORBA_ValueMemberDef_ptr p)
{
  this->ptr_ = p;
  return *this;
}

ACE_INLINE 
CORBA_ValueMemberDef_out::operator ::CORBA_ValueMemberDef_ptr &() // cast
{
  return this->ptr_;
}

ACE_INLINE ::CORBA_ValueMemberDef_ptr &
CORBA_ValueMemberDef_out::ptr (void) // ptr
{
  return this->ptr_;
}

ACE_INLINE ::CORBA_ValueMemberDef_ptr
CORBA_ValueMemberDef_out::operator-> (void)
{
  return this->ptr_;
}


#endif /* end #if !defined */

// *************************************************************
// Inline operations for class CORBA::ValueDef::FullValueDescription_var
// *************************************************************

ACE_INLINE
CORBA::ValueDef::FullValueDescription_var::FullValueDescription_var (void) // default constructor
  : ptr_ (0)
{}

ACE_INLINE
CORBA::ValueDef::FullValueDescription_var::FullValueDescription_var (FullValueDescription *p)
  : ptr_ (p)
{}

ACE_INLINE
CORBA::ValueDef::FullValueDescription_var::FullValueDescription_var (const ::CORBA::ValueDef::FullValueDescription_var &p) // copy constructor
{
  if (p.ptr_)
    ACE_NEW (this->ptr_, ::CORBA::ValueDef::FullValueDescription (*p.ptr_));
  else
    this->ptr_ = 0;
}

ACE_INLINE
CORBA::ValueDef::FullValueDescription_var::~FullValueDescription_var (void) // destructor
{
  delete this->ptr_;
}

ACE_INLINE CORBA::ValueDef::FullValueDescription_var &
CORBA::ValueDef::FullValueDescription_var::operator= (FullValueDescription *p)
{
  delete this->ptr_;
  this->ptr_ = p;
  return *this;
}

ACE_INLINE ::CORBA::ValueDef::FullValueDescription_var &
CORBA::ValueDef::FullValueDescription_var::operator= (const ::CORBA::ValueDef::FullValueDescription_var &p)
{
  if (this != &p)
    {
      if (p.ptr_ == 0)
        {
          delete this->ptr_;
          this->ptr_ = 0;
        }
      else
        {
          FullValueDescription *deep_copy =
            new FullValueDescription (*p.ptr_);
          
          if (deep_copy != 0)
            {
              FullValueDescription *tmp = deep_copy;
              deep_copy = this->ptr_;
              this->ptr_ = tmp;
              delete deep_copy;
            }
        }
    }
  
  return *this;
}

ACE_INLINE const ::CORBA::ValueDef::FullValueDescription *
CORBA::ValueDef::FullValueDescription_var::operator-> (void) const
{
  return this->ptr_;
}

ACE_INLINE ::CORBA::ValueDef::FullValueDescription *
CORBA::ValueDef::FullValueDescription_var::operator-> (void)
{
  return this->ptr_;
}

ACE_INLINE
CORBA::ValueDef::FullValueDescription_var::operator const ::CORBA::ValueDef::FullValueDescription &() const // cast
{
  return *this->ptr_;
}

ACE_INLINE
CORBA::ValueDef::FullValueDescription_var::operator ::CORBA::ValueDef::FullValueDescription &() // cast 
{
  return *this->ptr_;
}

ACE_INLINE
CORBA::ValueDef::FullValueDescription_var::operator ::CORBA::ValueDef::FullValueDescription &() const // cast 
{
  return *this->ptr_;
}

// variable-size types only
ACE_INLINE
CORBA::ValueDef::FullValueDescription_var::operator ::CORBA::ValueDef::FullValueDescription *&() // cast 
{
  return this->ptr_;
}

ACE_INLINE const ::CORBA::ValueDef::FullValueDescription &
CORBA::ValueDef::FullValueDescription_var::in (void) const
{
  return *this->ptr_;
}

ACE_INLINE ::CORBA::ValueDef::FullValueDescription &
CORBA::ValueDef::FullValueDescription_var::inout (void)
{
  return *this->ptr_;
}

// mapping for variable size 
ACE_INLINE ::CORBA::ValueDef::FullValueDescription *&
CORBA::ValueDef::FullValueDescription_var::out (void)
{
  delete this->ptr_;
  this->ptr_ = 0;
  return this->ptr_;
}

ACE_INLINE ::CORBA::ValueDef::FullValueDescription *
CORBA::ValueDef::FullValueDescription_var::_retn (void)
{
  ::CORBA::ValueDef::FullValueDescription *tmp = this->ptr_;
  this->ptr_ = 0;
  return tmp;
}

ACE_INLINE ::CORBA::ValueDef::FullValueDescription *
CORBA::ValueDef::FullValueDescription_var::ptr (void) const
{
  return this->ptr_;
}

// *************************************************************
// Inline operations for class CORBA::ValueDef::FullValueDescription_out
// *************************************************************

ACE_INLINE
CORBA::ValueDef::FullValueDescription_out::FullValueDescription_out (::CORBA::ValueDef::FullValueDescription *&p)
  : ptr_ (p)
{
  this->ptr_ = 0;
}

ACE_INLINE
CORBA::ValueDef::FullValueDescription_out::FullValueDescription_out (FullValueDescription_var &p) // constructor from _var
  : ptr_ (p.out ())
{
  delete this->ptr_;
  this->ptr_ = 0;
}

ACE_INLINE
CORBA::ValueDef::FullValueDescription_out::FullValueDescription_out (const ::CORBA::ValueDef::FullValueDescription_out &p) // copy constructor
  : ptr_ (ACE_const_cast (FullValueDescription_out&, p).ptr_)
{}

ACE_INLINE CORBA::ValueDef::FullValueDescription_out &
CORBA::ValueDef::FullValueDescription_out::operator= (const ::CORBA::ValueDef::FullValueDescription_out &p)
{
  this->ptr_ = ACE_const_cast (FullValueDescription_out&, p).ptr_;
  return *this;
}

ACE_INLINE CORBA::ValueDef::FullValueDescription_out &
CORBA::ValueDef::FullValueDescription_out::operator= (FullValueDescription *p)
{
  this->ptr_ = p;
  return *this;
}

ACE_INLINE 
CORBA::ValueDef::FullValueDescription_out::operator ::CORBA::ValueDef::FullValueDescription *&() // cast
{
  return this->ptr_;
}

ACE_INLINE ::CORBA::ValueDef::FullValueDescription *&
CORBA::ValueDef::FullValueDescription_out::ptr (void) // ptr
{
  return this->ptr_;
}

ACE_INLINE ::CORBA::ValueDef::FullValueDescription *
CORBA::ValueDef::FullValueDescription_out::operator-> (void)
{
  return this->ptr_;
}


#if !defined (_CORBA_VALUEDEF___CI_)
#define _CORBA_VALUEDEF___CI_

ACE_INLINE
CORBA_ValueDef::CORBA_ValueDef (
    TAO_Stub *objref,
    CORBA::Boolean _tao_collocated,
    TAO_Abstract_ServantBase *servant
  )
  : CORBA_Object (objref, _tao_collocated, servant)
{
  this->CORBA_ValueDef_setup_collocation (_tao_collocated);
}

#endif /* end #if !defined */


#if !defined (_CORBA_VALUEDEF___VAR_CI_)
#define _CORBA_VALUEDEF___VAR_CI_

// *************************************************************
// Inline operations for class CORBA_ValueDef_var
// *************************************************************

ACE_INLINE
CORBA_ValueDef_var::CORBA_ValueDef_var (void) // default constructor
  : ptr_ (CORBA_ValueDef::_nil ())
{}

ACE_INLINE ::CORBA_ValueDef_ptr
CORBA_ValueDef_var::ptr (void) const
{
  return this->ptr_;
}

ACE_INLINE
CORBA_ValueDef_var::CORBA_ValueDef_var (const ::CORBA_ValueDef_var &p) // copy constructor
  : TAO_Base_var (),
    ptr_ (CORBA_ValueDef::_duplicate (p.ptr ()))
{}

ACE_INLINE
CORBA_ValueDef_var::~CORBA_ValueDef_var (void) // destructor
{
  CORBA::release (this->ptr_);
}

ACE_INLINE CORBA_ValueDef_var &
CORBA_ValueDef_var::operator= (CORBA_ValueDef_ptr p)
{
  CORBA::release (this->ptr_);
  this->ptr_ = p;
  return *this;
}

ACE_INLINE CORBA_ValueDef_var &
CORBA_ValueDef_var::operator= (const ::CORBA_ValueDef_var &p)
{
  if (this != &p)
  {
    CORBA::release (this->ptr_);
    this->ptr_ = ::CORBA_ValueDef::_duplicate (p.ptr ());
  }
  return *this;
}

ACE_INLINE 
CORBA_ValueDef_var::operator const ::CORBA_ValueDef_ptr &() const // cast
{
  return this->ptr_;
}

ACE_INLINE 
CORBA_ValueDef_var::operator ::CORBA_ValueDef_ptr &() // cast 
{
  return this->ptr_;
}

ACE_INLINE ::CORBA_ValueDef_ptr
CORBA_ValueDef_var::operator-> (void) const
{
  return this->ptr_;
}

ACE_INLINE ::CORBA_ValueDef_ptr
CORBA_ValueDef_var::in (void) const
{
  return this->ptr_;
}

ACE_INLINE ::CORBA_ValueDef_ptr &
CORBA_ValueDef_var::inout (void)
{
  return this->ptr_;
}

ACE_INLINE ::CORBA_ValueDef_ptr &
CORBA_ValueDef_var::out (void)
{
  CORBA::release (this->ptr_);
  this->ptr_ = ::CORBA_ValueDef::_nil ();
  return this->ptr_;
}

ACE_INLINE ::CORBA_ValueDef_ptr
CORBA_ValueDef_var::_retn (void)
{
  // yield ownership of managed obj reference
  ::CORBA_ValueDef_ptr val = this->ptr_;
  this->ptr_ = ::CORBA_ValueDef::_nil ();
  return val;
}


#endif /* end #if !defined */


#if !defined (_CORBA_VALUEDEF___OUT_CI_)
#define _CORBA_VALUEDEF___OUT_CI_

// *************************************************************
// Inline operations for class CORBA_ValueDef_out
// *************************************************************

ACE_INLINE
CORBA_ValueDef_out::CORBA_ValueDef_out (CORBA_ValueDef_ptr &p)
  : ptr_ (p)
{
  this->ptr_ = ::CORBA_ValueDef::_nil ();
}

ACE_INLINE
CORBA_ValueDef_out::CORBA_ValueDef_out (CORBA_ValueDef_var &p) // constructor from _var
  : ptr_ (p.out ())
{
  CORBA::release (this->ptr_);
  this->ptr_ = ::CORBA_ValueDef::_nil ();
}

ACE_INLINE
CORBA_ValueDef_out::CORBA_ValueDef_out (const ::CORBA_ValueDef_out &p) // copy constructor
  : ptr_ (ACE_const_cast (CORBA_ValueDef_out &, p).ptr_)
{}

ACE_INLINE ::CORBA_ValueDef_out &
CORBA_ValueDef_out::operator= (const ::CORBA_ValueDef_out &p)
{
  this->ptr_ = ACE_const_cast (CORBA_ValueDef_out&, p).ptr_;
  return *this;
}

ACE_INLINE CORBA_ValueDef_out &
CORBA_ValueDef_out::operator= (const ::CORBA_ValueDef_var &p)
{
  this->ptr_ = ::CORBA_ValueDef::_duplicate (p.ptr ());
  return *this;
}

ACE_INLINE CORBA_ValueDef_out &
CORBA_ValueDef_out::operator= (CORBA_ValueDef_ptr p)
{
  this->ptr_ = p;
  return *this;
}

ACE_INLINE 
CORBA_ValueDef_out::operator ::CORBA_ValueDef_ptr &() // cast
{
  return this->ptr_;
}

ACE_INLINE ::CORBA_ValueDef_ptr &
CORBA_ValueDef_out::ptr (void) // ptr
{
  return this->ptr_;
}

ACE_INLINE ::CORBA_ValueDef_ptr
CORBA_ValueDef_out::operator-> (void)
{
  return this->ptr_;
}


#endif /* end #if !defined */

// *************************************************************
// Inline operations for class CORBA_ValueDescription_var
// *************************************************************

ACE_INLINE
CORBA_ValueDescription_var::CORBA_ValueDescription_var (void) // default constructor
  : ptr_ (0)
{}

ACE_INLINE
CORBA_ValueDescription_var::CORBA_ValueDescription_var (CORBA_ValueDescription *p)
  : ptr_ (p)
{}

ACE_INLINE
CORBA_ValueDescription_var::CORBA_ValueDescription_var (const ::CORBA_ValueDescription_var &p) // copy constructor
{
  if (p.ptr_)
    ACE_NEW (this->ptr_, ::CORBA_ValueDescription (*p.ptr_));
  else
    this->ptr_ = 0;
}

ACE_INLINE
CORBA_ValueDescription_var::~CORBA_ValueDescription_var (void) // destructor
{
  delete this->ptr_;
}

ACE_INLINE CORBA_ValueDescription_var &
CORBA_ValueDescription_var::operator= (CORBA_ValueDescription *p)
{
  delete this->ptr_;
  this->ptr_ = p;
  return *this;
}

ACE_INLINE ::CORBA_ValueDescription_var &
CORBA_ValueDescription_var::operator= (const ::CORBA_ValueDescription_var &p)
{
  if (this != &p)
    {
      if (p.ptr_ == 0)
        {
          delete this->ptr_;
          this->ptr_ = 0;
        }
      else
        {
          CORBA_ValueDescription *deep_copy =
            new CORBA_ValueDescription (*p.ptr_);
          
          if (deep_copy != 0)
            {
              CORBA_ValueDescription *tmp = deep_copy;
              deep_copy = this->ptr_;
              this->ptr_ = tmp;
              delete deep_copy;
            }
        }
    }
  
  return *this;
}

ACE_INLINE const ::CORBA_ValueDescription *
CORBA_ValueDescription_var::operator-> (void) const
{
  return this->ptr_;
}

ACE_INLINE ::CORBA_ValueDescription *
CORBA_ValueDescription_var::operator-> (void)
{
  return this->ptr_;
}

ACE_INLINE
CORBA_ValueDescription_var::operator const ::CORBA_ValueDescription &() const // cast
{
  return *this->ptr_;
}

ACE_INLINE
CORBA_ValueDescription_var::operator ::CORBA_ValueDescription &() // cast 
{
  return *this->ptr_;
}

ACE_INLINE
CORBA_ValueDescription_var::operator ::CORBA_ValueDescription &() const // cast 
{
  return *this->ptr_;
}

// variable-size types only
ACE_INLINE
CORBA_ValueDescription_var::operator ::CORBA_ValueDescription *&() // cast 
{
  return this->ptr_;
}

ACE_INLINE const ::CORBA_ValueDescription &
CORBA_ValueDescription_var::in (void) const
{
  return *this->ptr_;
}

ACE_INLINE ::CORBA_ValueDescription &
CORBA_ValueDescription_var::inout (void)
{
  return *this->ptr_;
}

// mapping for variable size 
ACE_INLINE ::CORBA_ValueDescription *&
CORBA_ValueDescription_var::out (void)
{
  delete this->ptr_;
  this->ptr_ = 0;
  return this->ptr_;
}

ACE_INLINE ::CORBA_ValueDescription *
CORBA_ValueDescription_var::_retn (void)
{
  ::CORBA_ValueDescription *tmp = this->ptr_;
  this->ptr_ = 0;
  return tmp;
}

ACE_INLINE ::CORBA_ValueDescription *
CORBA_ValueDescription_var::ptr (void) const
{
  return this->ptr_;
}

// *************************************************************
// Inline operations for class CORBA_ValueDescription_out
// *************************************************************

ACE_INLINE
CORBA_ValueDescription_out::CORBA_ValueDescription_out (::CORBA_ValueDescription *&p)
  : ptr_ (p)
{
  this->ptr_ = 0;
}

ACE_INLINE
CORBA_ValueDescription_out::CORBA_ValueDescription_out (CORBA_ValueDescription_var &p) // constructor from _var
  : ptr_ (p.out ())
{
  delete this->ptr_;
  this->ptr_ = 0;
}

ACE_INLINE
CORBA_ValueDescription_out::CORBA_ValueDescription_out (const ::CORBA_ValueDescription_out &p) // copy constructor
  : ptr_ (ACE_const_cast (CORBA_ValueDescription_out&, p).ptr_)
{}

ACE_INLINE CORBA_ValueDescription_out &
CORBA_ValueDescription_out::operator= (const ::CORBA_ValueDescription_out &p)
{
  this->ptr_ = ACE_const_cast (CORBA_ValueDescription_out&, p).ptr_;
  return *this;
}

ACE_INLINE CORBA_ValueDescription_out &
CORBA_ValueDescription_out::operator= (CORBA_ValueDescription *p)
{
  this->ptr_ = p;
  return *this;
}

ACE_INLINE 
CORBA_ValueDescription_out::operator ::CORBA_ValueDescription *&() // cast
{
  return this->ptr_;
}

ACE_INLINE ::CORBA_ValueDescription *&
CORBA_ValueDescription_out::ptr (void) // ptr
{
  return this->ptr_;
}

ACE_INLINE ::CORBA_ValueDescription *
CORBA_ValueDescription_out::operator-> (void)
{
  return this->ptr_;
}


#if !defined (_CORBA_VALUEBOXDEF___CI_)
#define _CORBA_VALUEBOXDEF___CI_

ACE_INLINE
CORBA_ValueBoxDef::CORBA_ValueBoxDef (
    TAO_Stub *objref,
    CORBA::Boolean _tao_collocated,
    TAO_Abstract_ServantBase *servant
  )
  : CORBA_Object (objref, _tao_collocated, servant)
{
  this->CORBA_ValueBoxDef_setup_collocation (_tao_collocated);
}

#endif /* end #if !defined */


#if !defined (_CORBA_VALUEBOXDEF___VAR_CI_)
#define _CORBA_VALUEBOXDEF___VAR_CI_

// *************************************************************
// Inline operations for class CORBA_ValueBoxDef_var
// *************************************************************

ACE_INLINE
CORBA_ValueBoxDef_var::CORBA_ValueBoxDef_var (void) // default constructor
  : ptr_ (CORBA_ValueBoxDef::_nil ())
{}

ACE_INLINE ::CORBA_ValueBoxDef_ptr
CORBA_ValueBoxDef_var::ptr (void) const
{
  return this->ptr_;
}

ACE_INLINE
CORBA_ValueBoxDef_var::CORBA_ValueBoxDef_var (const ::CORBA_ValueBoxDef_var &p) // copy constructor
  : TAO_Base_var (),
    ptr_ (CORBA_ValueBoxDef::_duplicate (p.ptr ()))
{}

ACE_INLINE
CORBA_ValueBoxDef_var::~CORBA_ValueBoxDef_var (void) // destructor
{
  CORBA::release (this->ptr_);
}

ACE_INLINE CORBA_ValueBoxDef_var &
CORBA_ValueBoxDef_var::operator= (CORBA_ValueBoxDef_ptr p)
{
  CORBA::release (this->ptr_);
  this->ptr_ = p;
  return *this;
}

ACE_INLINE CORBA_ValueBoxDef_var &
CORBA_ValueBoxDef_var::operator= (const ::CORBA_ValueBoxDef_var &p)
{
  if (this != &p)
  {
    CORBA::release (this->ptr_);
    this->ptr_ = ::CORBA_ValueBoxDef::_duplicate (p.ptr ());
  }
  return *this;
}

ACE_INLINE 
CORBA_ValueBoxDef_var::operator const ::CORBA_ValueBoxDef_ptr &() const // cast
{
  return this->ptr_;
}

ACE_INLINE 
CORBA_ValueBoxDef_var::operator ::CORBA_ValueBoxDef_ptr &() // cast 
{
  return this->ptr_;
}

ACE_INLINE ::CORBA_ValueBoxDef_ptr
CORBA_ValueBoxDef_var::operator-> (void) const
{
  return this->ptr_;
}

ACE_INLINE ::CORBA_ValueBoxDef_ptr
CORBA_ValueBoxDef_var::in (void) const
{
  return this->ptr_;
}

ACE_INLINE ::CORBA_ValueBoxDef_ptr &
CORBA_ValueBoxDef_var::inout (void)
{
  return this->ptr_;
}

ACE_INLINE ::CORBA_ValueBoxDef_ptr &
CORBA_ValueBoxDef_var::out (void)
{
  CORBA::release (this->ptr_);
  this->ptr_ = ::CORBA_ValueBoxDef::_nil ();
  return this->ptr_;
}

ACE_INLINE ::CORBA_ValueBoxDef_ptr
CORBA_ValueBoxDef_var::_retn (void)
{
  // yield ownership of managed obj reference
  ::CORBA_ValueBoxDef_ptr val = this->ptr_;
  this->ptr_ = ::CORBA_ValueBoxDef::_nil ();
  return val;
}


#endif /* end #if !defined */


#if !defined (_CORBA_VALUEBOXDEF___OUT_CI_)
#define _CORBA_VALUEBOXDEF___OUT_CI_

// *************************************************************
// Inline operations for class CORBA_ValueBoxDef_out
// *************************************************************

ACE_INLINE
CORBA_ValueBoxDef_out::CORBA_ValueBoxDef_out (CORBA_ValueBoxDef_ptr &p)
  : ptr_ (p)
{
  this->ptr_ = ::CORBA_ValueBoxDef::_nil ();
}

ACE_INLINE
CORBA_ValueBoxDef_out::CORBA_ValueBoxDef_out (CORBA_ValueBoxDef_var &p) // constructor from _var
  : ptr_ (p.out ())
{
  CORBA::release (this->ptr_);
  this->ptr_ = ::CORBA_ValueBoxDef::_nil ();
}

ACE_INLINE
CORBA_ValueBoxDef_out::CORBA_ValueBoxDef_out (const ::CORBA_ValueBoxDef_out &p) // copy constructor
  : ptr_ (ACE_const_cast (CORBA_ValueBoxDef_out &, p).ptr_)
{}

ACE_INLINE ::CORBA_ValueBoxDef_out &
CORBA_ValueBoxDef_out::operator= (const ::CORBA_ValueBoxDef_out &p)
{
  this->ptr_ = ACE_const_cast (CORBA_ValueBoxDef_out&, p).ptr_;
  return *this;
}

ACE_INLINE CORBA_ValueBoxDef_out &
CORBA_ValueBoxDef_out::operator= (const ::CORBA_ValueBoxDef_var &p)
{
  this->ptr_ = ::CORBA_ValueBoxDef::_duplicate (p.ptr ());
  return *this;
}

ACE_INLINE CORBA_ValueBoxDef_out &
CORBA_ValueBoxDef_out::operator= (CORBA_ValueBoxDef_ptr p)
{
  this->ptr_ = p;
  return *this;
}

ACE_INLINE 
CORBA_ValueBoxDef_out::operator ::CORBA_ValueBoxDef_ptr &() // cast
{
  return this->ptr_;
}

ACE_INLINE ::CORBA_ValueBoxDef_ptr &
CORBA_ValueBoxDef_out::ptr (void) // ptr
{
  return this->ptr_;
}

ACE_INLINE ::CORBA_ValueBoxDef_ptr
CORBA_ValueBoxDef_out::operator-> (void)
{
  return this->ptr_;
}


#endif /* end #if !defined */

ACE_INLINE CORBA::Boolean
operator<< (
    TAO_OutputCDR &,
    const CORBA::FixedDef_ptr
  );
ACE_INLINE CORBA::Boolean
operator>> (
    TAO_InputCDR &,
    CORBA::FixedDef_ptr &
  );

ACE_INLINE CORBA::Boolean
operator<< (
    TAO_OutputCDR &strm,
    const CORBA::FixedDef_ptr _tao_objref
  )
{
  CORBA::Object_ptr _tao_corba_obj = _tao_objref;
  return (strm << _tao_corba_obj);
}

ACE_INLINE CORBA::Boolean
operator>> (
    TAO_InputCDR &strm,
    CORBA::FixedDef_ptr &_tao_objref
  )
{
  ACE_TRY_NEW_ENV
  {
    CORBA::Object_var obj;
    if ((strm >> obj.inout ()) == 0)
      return 0;
    // narrow to the right type
    _tao_objref =
      CORBA::FixedDef::_unchecked_narrow (
          obj.in (),
          ACE_TRY_ENV
        );
    ACE_TRY_CHECK;
    return 1;
  }
  ACE_CATCHANY
  {
    // do nothing
  }
  ACE_ENDTRY;
  return 0;
}

ACE_INLINE CORBA::Boolean operator<< (TAO_OutputCDR &strm, const CORBA::ValueMember &_tao_aggregate)
{
  if (
    (strm << _tao_aggregate.name.in ()) &&
    (strm << _tao_aggregate.id.in ()) &&
    (strm << _tao_aggregate.defined_in.in ()) &&
    (strm << _tao_aggregate.version.in ()) &&
    (strm << _tao_aggregate.type.in ()) &&
    (strm << _tao_aggregate.type_def.in ()) &&
    (strm << _tao_aggregate.access)
  )
    return 1;
  else
    return 0;
  
}

ACE_INLINE CORBA::Boolean operator>> (TAO_InputCDR &strm, CORBA::ValueMember &_tao_aggregate)
{
  if (
    (strm >> _tao_aggregate.name.out ()) &&
    (strm >> _tao_aggregate.id.out ()) &&
    (strm >> _tao_aggregate.defined_in.out ()) &&
    (strm >> _tao_aggregate.version.out ()) &&
    (strm >> _tao_aggregate.type.out ()) &&
    (strm >> _tao_aggregate.type_def.out ()) &&
    (strm >> _tao_aggregate.access)
  )
    return 1;
  else
    return 0;
  
}


#if !defined _TAO_CDR_OP_CORBA_ValueMemberSeq_I_
#define _TAO_CDR_OP_CORBA_ValueMemberSeq_I_

CORBA::Boolean TAO_IFR_Client_Export operator<< (
    TAO_OutputCDR &,
    const CORBA::ValueMemberSeq &
  );
CORBA::Boolean TAO_IFR_Client_Export operator>> (
    TAO_InputCDR &,
    CORBA::ValueMemberSeq &
  );

#endif /* _TAO_CDR_OP_CORBA_ValueMemberSeq_I_ */

ACE_INLINE CORBA::Boolean
operator<< (
    TAO_OutputCDR &,
    const CORBA::ValueMemberDef_ptr
  );
ACE_INLINE CORBA::Boolean
operator>> (
    TAO_InputCDR &,
    CORBA::ValueMemberDef_ptr &
  );

ACE_INLINE CORBA::Boolean
operator<< (
    TAO_OutputCDR &strm,
    const CORBA::ValueMemberDef_ptr _tao_objref
  )
{
  CORBA::Object_ptr _tao_corba_obj = _tao_objref;
  return (strm << _tao_corba_obj);
}

ACE_INLINE CORBA::Boolean
operator>> (
    TAO_InputCDR &strm,
    CORBA::ValueMemberDef_ptr &_tao_objref
  )
{
  ACE_TRY_NEW_ENV
  {
    CORBA::Object_var obj;
    if ((strm >> obj.inout ()) == 0)
      return 0;
    // narrow to the right type
    _tao_objref =
      CORBA::ValueMemberDef::_unchecked_narrow (
          obj.in (),
          ACE_TRY_ENV
        );
    ACE_TRY_CHECK;
    return 1;
  }
  ACE_CATCHANY
  {
    // do nothing
  }
  ACE_ENDTRY;
  return 0;
}

ACE_INLINE CORBA::Boolean
operator<< (
    TAO_OutputCDR &,
    const CORBA::ValueDef_ptr
  );
ACE_INLINE CORBA::Boolean
operator>> (
    TAO_InputCDR &,
    CORBA::ValueDef_ptr &
  );

ACE_INLINE CORBA::Boolean operator<< (TAO_OutputCDR &strm, const CORBA::ValueDef::FullValueDescription &_tao_aggregate)
{
  if (
    (strm << _tao_aggregate.name.in ()) &&
    (strm << _tao_aggregate.id.in ()) &&
    (strm << CORBA::Any::from_boolean (_tao_aggregate.is_abstract)) &&
    (strm << CORBA::Any::from_boolean (_tao_aggregate.is_custom)) &&
    (strm << _tao_aggregate.defined_in.in ()) &&
    (strm << _tao_aggregate.version.in ()) &&
    (strm << _tao_aggregate.operations) &&
    (strm << _tao_aggregate.attributes) &&
    (strm << _tao_aggregate.members) &&
    (strm << _tao_aggregate.initializers) &&
    (strm << _tao_aggregate.supported_interfaces) &&
    (strm << _tao_aggregate.abstract_base_values) &&
    (strm << CORBA::Any::from_boolean (_tao_aggregate.is_truncatable)) &&
    (strm << _tao_aggregate.base_value.in ()) &&
    (strm << _tao_aggregate.type.in ())
  )
    return 1;
  else
    return 0;
  
}

ACE_INLINE CORBA::Boolean operator>> (TAO_InputCDR &strm, CORBA::ValueDef::FullValueDescription &_tao_aggregate)
{
  if (
    (strm >> _tao_aggregate.name.out ()) &&
    (strm >> _tao_aggregate.id.out ()) &&
    (strm >> CORBA::Any::to_boolean (_tao_aggregate.is_abstract)) &&
    (strm >> CORBA::Any::to_boolean (_tao_aggregate.is_custom)) &&
    (strm >> _tao_aggregate.defined_in.out ()) &&
    (strm >> _tao_aggregate.version.out ()) &&
    (strm >> _tao_aggregate.operations) &&
    (strm >> _tao_aggregate.attributes) &&
    (strm >> _tao_aggregate.members) &&
    (strm >> _tao_aggregate.initializers) &&
    (strm >> _tao_aggregate.supported_interfaces) &&
    (strm >> _tao_aggregate.abstract_base_values) &&
    (strm >> CORBA::Any::to_boolean (_tao_aggregate.is_truncatable)) &&
    (strm >> _tao_aggregate.base_value.out ()) &&
    (strm >> _tao_aggregate.type.out ())
  )
    return 1;
  else
    return 0;
  
}

ACE_INLINE CORBA::Boolean
operator<< (
    TAO_OutputCDR &strm,
    const CORBA::ValueDef_ptr _tao_objref
  )
{
  CORBA::Object_ptr _tao_corba_obj = _tao_objref;
  return (strm << _tao_corba_obj);
}

ACE_INLINE CORBA::Boolean
operator>> (
    TAO_InputCDR &strm,
    CORBA::ValueDef_ptr &_tao_objref
  )
{
  ACE_TRY_NEW_ENV
  {
    CORBA::Object_var obj;
    if ((strm >> obj.inout ()) == 0)
      return 0;
    // narrow to the right type
    _tao_objref =
      CORBA::ValueDef::_unchecked_narrow (
          obj.in (),
          ACE_TRY_ENV
        );
    ACE_TRY_CHECK;
    return 1;
  }
  ACE_CATCHANY
  {
    // do nothing
  }
  ACE_ENDTRY;
  return 0;
}

ACE_INLINE CORBA::Boolean operator<< (TAO_OutputCDR &strm, const CORBA::ValueDescription &_tao_aggregate)
{
  if (
    (strm << _tao_aggregate.name.in ()) &&
    (strm << _tao_aggregate.id.in ()) &&
    (strm << CORBA::Any::from_boolean (_tao_aggregate.is_abstract)) &&
    (strm << CORBA::Any::from_boolean (_tao_aggregate.is_custom)) &&
    (strm << _tao_aggregate.defined_in.in ()) &&
    (strm << _tao_aggregate.version.in ()) &&
    (strm << _tao_aggregate.supported_interfaces) &&
    (strm << _tao_aggregate.abstract_base_values) &&
    (strm << CORBA::Any::from_boolean (_tao_aggregate.is_truncatable)) &&
    (strm << _tao_aggregate.base_value.in ())
  )
    return 1;
  else
    return 0;
  
}

ACE_INLINE CORBA::Boolean operator>> (TAO_InputCDR &strm, CORBA::ValueDescription &_tao_aggregate)
{
  if (
    (strm >> _tao_aggregate.name.out ()) &&
    (strm >> _tao_aggregate.id.out ()) &&
    (strm >> CORBA::Any::to_boolean (_tao_aggregate.is_abstract)) &&
    (strm >> CORBA::Any::to_boolean (_tao_aggregate.is_custom)) &&
    (strm >> _tao_aggregate.defined_in.out ()) &&
    (strm >> _tao_aggregate.version.out ()) &&
    (strm >> _tao_aggregate.supported_interfaces) &&
    (strm >> _tao_aggregate.abstract_base_values) &&
    (strm >> CORBA::Any::to_boolean (_tao_aggregate.is_truncatable)) &&
    (strm >> _tao_aggregate.base_value.out ())
  )
    return 1;
  else
    return 0;
  
}

ACE_INLINE CORBA::Boolean
operator<< (
    TAO_OutputCDR &,
    const CORBA::ValueBoxDef_ptr
  );
ACE_INLINE CORBA::Boolean
operator>> (
    TAO_InputCDR &,
    CORBA::ValueBoxDef_ptr &
  );

ACE_INLINE CORBA::Boolean
operator<< (
    TAO_OutputCDR &strm,
    const CORBA::ValueBoxDef_ptr _tao_objref
  )
{
  CORBA::Object_ptr _tao_corba_obj = _tao_objref;
  return (strm << _tao_corba_obj);
}

ACE_INLINE CORBA::Boolean
operator>> (
    TAO_InputCDR &strm,
    CORBA::ValueBoxDef_ptr &_tao_objref
  )
{
  ACE_TRY_NEW_ENV
  {
    CORBA::Object_var obj;
    if ((strm >> obj.inout ()) == 0)
      return 0;
    // narrow to the right type
    _tao_objref =
      CORBA::ValueBoxDef::_unchecked_narrow (
          obj.in (),
          ACE_TRY_ENV
        );
    ACE_TRY_CHECK;
    return 1;
  }
  ACE_CATCHANY
  {
    // do nothing
  }
  ACE_ENDTRY;
  return 0;
}

