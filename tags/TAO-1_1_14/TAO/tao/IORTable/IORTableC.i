/* -*- C++ -*- $Id$ */

// ******  Code generated by the The ACE ORB (TAO) IDL Compiler *******
// TAO and the TAO IDL Compiler have been developed by the Center for
// Distributed Object Computing at Washington University, St. Louis.
//
// Information about TAO is available at:
//                 http://www.cs.wustl.edu/~schmidt/TAO.html


#if !defined (_IORTABLE_LOCATOR___VAR_CI_)
#define _IORTABLE_LOCATOR___VAR_CI_

// *************************************************************
// Inline operations for class IORTable::Locator_var
// *************************************************************

ACE_INLINE
IORTable::Locator_var::Locator_var (void) // default constructor
  : ptr_ (IORTable::Locator::_nil ())
{}

ACE_INLINE IORTable::Locator_ptr 
IORTable::Locator_var::ptr (void) const
{
  return this->ptr_;
}

ACE_INLINE
IORTable::Locator_var::Locator_var (const IORTable::Locator_var &p) // copy constructor
  : TAO_Base_var (),
    ptr_ (Locator::_duplicate (p.ptr ()))
{}

ACE_INLINE
IORTable::Locator_var::~Locator_var (void) // destructor
{
  CORBA::release (this->ptr_);
}

ACE_INLINE IORTable::Locator_var &
IORTable::Locator_var::operator= (IORTable::Locator_ptr p)
{
  CORBA::release (this->ptr_);
  this->ptr_ = p;
  return *this;
}

ACE_INLINE IORTable::Locator_var &
IORTable::Locator_var::operator= (const IORTable::Locator_var &p)
{
  if (this != &p)
  {
    CORBA::release (this->ptr_);
    this->ptr_ = IORTable::Locator::_duplicate (p.ptr ());
  }
  return *this;
}

ACE_INLINE 
IORTable::Locator_var::operator const IORTable::Locator_ptr &() const // cast
{
  return this->ptr_;
}

ACE_INLINE 
IORTable::Locator_var::operator IORTable::Locator_ptr &() // cast 
{
  return this->ptr_;
}

ACE_INLINE IORTable::Locator_ptr 
IORTable::Locator_var::operator-> (void) const
{
  return this->ptr_;
}

ACE_INLINE IORTable::Locator_ptr
IORTable::Locator_var::in (void) const
{
  return this->ptr_;
}

ACE_INLINE IORTable::Locator_ptr &
IORTable::Locator_var::inout (void)
{
  return this->ptr_;
}

ACE_INLINE IORTable::Locator_ptr &
IORTable::Locator_var::out (void)
{
  CORBA::release (this->ptr_);
  this->ptr_ = IORTable::Locator::_nil ();
  return this->ptr_;
}

ACE_INLINE IORTable::Locator_ptr 
IORTable::Locator_var::_retn (void)
{
  // yield ownership of managed obj reference
  IORTable::Locator_ptr val = this->ptr_;
  this->ptr_ = IORTable::Locator::_nil ();
  return val;
}


#endif /* end #if !defined */


#if !defined (_IORTABLE_LOCATOR___OUT_CI_)
#define _IORTABLE_LOCATOR___OUT_CI_

// *************************************************************
// Inline operations for class IORTable::Locator_out
// *************************************************************

ACE_INLINE
IORTable::Locator_out::Locator_out (IORTable::Locator_ptr &p)
  : ptr_ (p)
{
  this->ptr_ = IORTable::Locator::_nil ();
}

ACE_INLINE
IORTable::Locator_out::Locator_out (IORTable::Locator_var &p) // constructor from _var
  : ptr_ (p.out ())
{
  CORBA::release (this->ptr_);
  this->ptr_ = IORTable::Locator::_nil ();
}

ACE_INLINE
IORTable::Locator_out::Locator_out (const IORTable::Locator_out &p) // copy constructor
  : ptr_ (ACE_const_cast (IORTable::Locator_out&,p).ptr_)
{}

ACE_INLINE IORTable::Locator_out &
IORTable::Locator_out::operator= (const IORTable::Locator_out &p)
{
  this->ptr_ = ACE_const_cast (IORTable::Locator_out&,p).ptr_;
  return *this;
}

ACE_INLINE IORTable::Locator_out &
IORTable::Locator_out::operator= (const IORTable::Locator_var &p)
{
  this->ptr_ = IORTable::Locator::_duplicate (p.ptr ());
  return *this;
}

ACE_INLINE IORTable::Locator_out &
IORTable::Locator_out::operator= (IORTable::Locator_ptr p)
{
  this->ptr_ = p;
  return *this;
}

ACE_INLINE 
IORTable::Locator_out::operator IORTable::Locator_ptr &() // cast
{
  return this->ptr_;
}

ACE_INLINE IORTable::Locator_ptr &
IORTable::Locator_out::ptr (void) // ptr
{
  return this->ptr_;
}

ACE_INLINE IORTable::Locator_ptr 
IORTable::Locator_out::operator-> (void)
{
  return this->ptr_;
}


#endif /* end #if !defined */

// *************************************************************
// Inline operations for exception IORTable::AlreadyBound
// *************************************************************

// *************************************************************
// Inline operations for exception IORTable::NotFound
// *************************************************************


#if !defined (_IORTABLE_TABLE___VAR_CI_)
#define _IORTABLE_TABLE___VAR_CI_

// *************************************************************
// Inline operations for class IORTable::Table_var
// *************************************************************

ACE_INLINE
IORTable::Table_var::Table_var (void) // default constructor
  : ptr_ (Table::_nil ())
{}

ACE_INLINE ::IORTable::Table_ptr
IORTable::Table_var::ptr (void) const
{
  return this->ptr_;
}

ACE_INLINE
IORTable::Table_var::Table_var (const ::IORTable::Table_var &p) // copy constructor
  : TAO_Base_var (),
    ptr_ (Table::_duplicate (p.ptr ()))
{}

ACE_INLINE
IORTable::Table_var::~Table_var (void) // destructor
{
  CORBA::release (this->ptr_);
}

ACE_INLINE IORTable::Table_var &
IORTable::Table_var::operator= (Table_ptr p)
{
  CORBA::release (this->ptr_);
  this->ptr_ = p;
  return *this;
}

ACE_INLINE IORTable::Table_var &
IORTable::Table_var::operator= (const ::IORTable::Table_var &p)
{
  if (this != &p)
  {
    CORBA::release (this->ptr_);
    this->ptr_ = ::IORTable::Table::_duplicate (p.ptr ());
  }
  return *this;
}

ACE_INLINE 
IORTable::Table_var::operator const ::IORTable::Table_ptr &() const // cast
{
  return this->ptr_;
}

ACE_INLINE 
IORTable::Table_var::operator ::IORTable::Table_ptr &() // cast 
{
  return this->ptr_;
}

ACE_INLINE ::IORTable::Table_ptr
IORTable::Table_var::operator-> (void) const
{
  return this->ptr_;
}

ACE_INLINE ::IORTable::Table_ptr
IORTable::Table_var::in (void) const
{
  return this->ptr_;
}

ACE_INLINE ::IORTable::Table_ptr &
IORTable::Table_var::inout (void)
{
  return this->ptr_;
}

ACE_INLINE ::IORTable::Table_ptr &
IORTable::Table_var::out (void)
{
  CORBA::release (this->ptr_);
  this->ptr_ = ::IORTable::Table::_nil ();
  return this->ptr_;
}

ACE_INLINE ::IORTable::Table_ptr
IORTable::Table_var::_retn (void)
{
  // yield ownership of managed obj reference
  ::IORTable::Table_ptr val = this->ptr_;
  this->ptr_ = ::IORTable::Table::_nil ();
  return val;
}


#endif /* end #if !defined */


#if !defined (_IORTABLE_TABLE___OUT_CI_)
#define _IORTABLE_TABLE___OUT_CI_

// *************************************************************
// Inline operations for class IORTable::Table_out
// *************************************************************

ACE_INLINE
IORTable::Table_out::Table_out (Table_ptr &p)
  : ptr_ (p)
{
  this->ptr_ = ::IORTable::Table::_nil ();
}

ACE_INLINE
IORTable::Table_out::Table_out (Table_var &p) // constructor from _var
  : ptr_ (p.out ())
{
  CORBA::release (this->ptr_);
  this->ptr_ = ::IORTable::Table::_nil ();
}

ACE_INLINE
IORTable::Table_out::Table_out (const ::IORTable::Table_out &p) // copy constructor
  : ptr_ (ACE_const_cast (Table_out &, p).ptr_)
{}

ACE_INLINE ::IORTable::Table_out &
IORTable::Table_out::operator= (const ::IORTable::Table_out &p)
{
  this->ptr_ = ACE_const_cast (Table_out&, p).ptr_;
  return *this;
}

ACE_INLINE IORTable::Table_out &
IORTable::Table_out::operator= (const ::IORTable::Table_var &p)
{
  this->ptr_ = ::IORTable::Table::_duplicate (p.ptr ());
  return *this;
}

ACE_INLINE IORTable::Table_out &
IORTable::Table_out::operator= (Table_ptr p)
{
  this->ptr_ = p;
  return *this;
}

ACE_INLINE 
IORTable::Table_out::operator ::IORTable::Table_ptr &() // cast
{
  return this->ptr_;
}

ACE_INLINE ::IORTable::Table_ptr &
IORTable::Table_out::ptr (void) // ptr
{
  return this->ptr_;
}

ACE_INLINE ::IORTable::Table_ptr
IORTable::Table_out::operator-> (void)
{
  return this->ptr_;
}


#endif /* end #if !defined */
