Wed Mar 03 01:18:08 CST 2010  Johnny Willemsen  <jwillemsen@remedy.nl>

	* TAO version 1.7.7 released.

Tue Mar  2 09:58:04 UTC 2010  Johnny Willemsen  <jwillemsen@remedy.nl>

        * TAO_IDL/be/be_interface.cpp:
        * TAO_IDL/be/be_visitor_interface.cpp:
        * TAO_IDL/be/be_visitor_interface/direct_proxy_impl_sh.cpp:
        * TAO_IDL/be/be_visitor_interface/direct_proxy_impl_ss.cpp:
        * TAO_IDL/be/be_visitor_interface/strategized_proxy_broker_sh.cpp:
        * TAO_IDL/be/be_visitor_interface/strategized_proxy_broker_ss.cpp:
        * TAO_IDL/be_include/be_component.h:
        * TAO_IDL/be_include/be_connector.h:
        * TAO_IDL/be_include/be_visitor_interface/direct_proxy_impl_sh.h:
        * TAO_IDL/be_include/be_visitor_interface/direct_proxy_impl_ss.h:
        * TAO_IDL/be_include/be_visitor_interface/strategized_proxy_broker_sh.h:
        * TAO_IDL/be_include/be_visitor_interface/strategized_proxy_broker_ss.h:
          Generate direct and through poa proxy brokers for connectors

Thu Feb 25 19:15:58 UTC 2010  Jeff Parsons <j.parsons@vanderbilt.edu>

        * TAO_IDL/be/be_codegen.cpp:
        * TAO_IDL/be/be_global.cpp:
        * TAO_IDL/be_include/be_global.h:
        
          Added command line option -Wb,dds_impl=xxx to select
          included files to generate, both the list of typesupport
          files gathered with the associated #pragma, or other
          miscellaneous files such as the state and connector
          template header files.

Thu Feb 25 17:04:04 UTC 2010  Jeff Parsons <j.parsons@vanderbilt.edu>

        * NEWS:

          Updated TAO_IDL cleanup item.

Thu Feb 25 16:50:09 UTC 2010  Jeff Parsons <j.parsons@vanderbilt.edu>

        * TAO_IDL/be/be_visitor_interface/proxy_impls_ch.cpp:
        * TAO_IDL/be/be_visitor_interface/base_proxy_impl_ch.cpp:
        * TAO_IDL/be/be_visitor_interface/remote_proxy_broker_ch.cpp:
        * TAO_IDL/be/be_visitor_interface/remote_proxy_broker_cs.cpp:
        * TAO_IDL/be/be_visitor_interface/base_proxy_broker_ch.cpp:
        * TAO_IDL/be/be_visitor_interface/proxy_brokers_ch.cpp:
        * TAO_IDL/be/be_visitor_interface/remote_proxy_impl_ch.cpp:
        * TAO_IDL/be_include/be_visitor_interface/base_proxy_broker_ch.h:
        * TAO_IDL/be_include/be_visitor_interface/proxy_brokers_ch.h:
        * TAO_IDL/be_include/be_visitor_interface/remote_proxy_impl_ch.h:
        * TAO_IDL/be_include/be_visitor_interface/proxy_impls_ch.h:
        * TAO_IDL/be_include/be_visitor_interface/base_proxy_impl_ch.h:
        * TAO_IDL/be_include/be_visitor_interface/remote_proxy_broker_ch.h:
        * TAO_IDL/be_include/be_visitor_interface/remote_proxy_broker_cs.h:

          Removed these files, the visitors are never used. This fix closes
          [BUGID:2200].

Thu Feb 25 13:19:16 UTC 2010  Vladimir Zykov  <vladimir.zykov@prismtech.com>

        * bin/tao_orb_tests.lst:
          Disabled running the test for bug#3827 on single threaded builds
          and on CORBA_e_micro builds.

Thu Feb 25 08:58:47 UTC 2010  Johnny Willemsen  <jwillemsen@remedy.nl>

        * tests/IDL_Test/IDL_Test.mpc:
          Added no_strict_aliasing for ndds

Thu Feb 25 08:46:47 UTC 2010  Johnny Willemsen  <jwillemsen@remedy.nl>

        * ChangeLogs/*:
          Use full year

Thu Feb 25 08:01:47 UTC 2010  Johnny Willemsen  <jwillemsen@remedy.nl>

        * TAO_IDL/be/be_codegen.cpp:
          Fixed argument not used warning

Wed Feb 24 21:00:11 UTC 2010  Jeff Parsons <j.parsons@vanderbilt.edu>

        * TAO_IDL/include/idl_global.h:
        * TAO_IDL/util/utl_global.cpp:

          Added additional lists to store the filenames gathered
          from pragmas specifying DDS typesupport files from
          various DDS vendors to include in generated code.

        * TAO_IDL/be/be_codegen.cpp:

          Added more checks for the generation of export header
          files. Now a given export header file won't be
          generated unless all the command line options are
          present for

          - generating the export header file
          - specifying the export macro
          - specifying the export header file name

        * TAO_IDL/be/be_visitor_connector/connector_dds_exh.cpp:

          Minor change to the format of generated code.

        * TAO_IDL/fe/lex.yy.cpp:
        * TAO_IDL/fe/idl.ll:

          Added pragmas for including typesupport files from
          other DDS vendors, to ultimately make the generated
          connector code portable to any of the C++ DDS vendors.

Wed Feb 24 16:53:55 UTC 2010  Jeff Parsons <j.parsons@vanderbilt.edu>

        * TAO_IDL/util/utl_scope.cpp:

          Fixed bug introduced by consolidation of fe_add_*
          methods for exceptions.

        * TAO_IDL/be/be_codegen.cpp:

          Fixed compile error on MacOSX due to inappropriate
          C++-style cast.

Wed Feb 24 16:29:51 UTC 2010  Vladimir Zykov  <vladimir.zykov@prismtech.com>

        * tests/Bug_3826_Regression/svc.conf:
        * tests/Bug_3826_Regression/run_test.pl:
        * tao/TAO_Internal.cpp:
          Extended the fix for bug#3826 and adjusted the test. Initial fix
          was not complete. If there is a svc.conf which is processed by
          ACE unconditionally then it's processed in a global gestalt even
          if -ORBGestalt LOCAL is provided. Current change must fix this
          behaviour.

Tue Feb 23 18:55:21 UTC 2010  Yan Dai  <dai_y@ociweb.com>

        * bin/tao_orb_tests.lst:

          Added Bug_3812_Regression as not fixed test.

        * tests/Bug_3812_Regression/Bug_3812_Regression.cpp:
        * tests/Bug_3812_Regression/mock_transport.h:

          Fixed fuzz errors.

Tue Feb 23 10:35:39 UTC 2010  Vladimir Zykov  <vladimir.zykov@prismtech.com>

        * tao/TAO_Internal.cpp:
          Changed a code layout for return values in forward declarations
          according to TAO code conventions. Thanks to Johnny Willemsen
          <jwillemsen at remedy dot nl> for pointing this out.

Tue Feb 23 09:46:57 UTC 2010  Vladimir Zykov  <vladimir.zykov@prismtech.com>

        * tests/Bug_3827_Regression/test.cpp:
        * tests/Bug_3827_Regression/Message.idl:
        * tests/Bug_3827_Regression/run_test.pl:
        * tests/Bug_3827_Regression/README:
        * tests/Bug_3827_Regression/Bug_3827_Regression.mpc:
        * tao/ORB_Core.cpp:
        * tao/ORB.cpp:
        * tao/ORB_Core.h:
          Added a test for bug#3827 and fixed it. Now access or changes to
          valuetype_adapter_ in ORB_Core is protected by a lock.

        * tests/Bug_3826_Regression/orb_svc.conf:
        * tests/Bug_3826_Regression/server.cpp:
        * tests/Bug_3826_Regression/README:
        * tests/Bug_3826_Regression/Bug_3826_Regression.mpc:
        * tests/Bug_3826_Regression/run_test.pl:
        * tao/TAO_Internal.cpp:
          Added a test for bug#3826 and fixed it. If the first ORB in created
          with -ORBGestalt LOCAL it will have a local configuration and this
          configuration will not leak into any ORBs created afterwards.

        * bin/tao_orb_tests.lst:
          Scheduled tests for bug#3826 and bug#3827 to run in the nightly
          builds.

Mon Feb 22 23:04:23 UTC 2010  Yan Dai  <dai_y@ociweb.com>


        * tests/Bug_3812_Regression/Bug_3812_Regression.cpp:
        * tests/Bug_3812_Regression/Makefile.am:
        * tests/Bug_3812_Regression/mock_ps.h:
        * tests/Bug_3812_Regression/mock_tdi.h:
        * tests/Bug_3812_Regression/mock_transport.h:
        * tests/Bug_3812_Regression/run_test.pl:

          Added a regression test for bugzilla #3812.

Mon Feb 22 21:20:15 UTC 2010  Jeff Parsons <j.parsons@vanderbilt.edu>

        * TAO_IDL/be/be_codegen.cpp:
        * TAO_IDL/be_include/be_codegen.h:

          Added random 6-character string to #ifdef guard generation,
          to prevent hiding when IDL files have the same name (but
          are in different directories, the #ifdef guard uses only
          the local filename).

        * TAO_IDL/be/be_visitor_connector/connector_dds_exs.cpp:
        * TAO_IDL/be/be_visitor_connector/connector_dds_exh.cpp:

          Added logic to check for inheritance from DDS_State or
          DDS_Event connectors, to generate inheritance in the
          connector impl from the correct Base connector template.

Mon Feb 22 13:47:47 UTC 2010  Johnny Willemsen  <jwillemsen@remedy.nl>

        * TAO_IDL/fe/idl.ll:
        * TAO_IDL/fe/lex.yy.cpp:
          Updated rti typesupport to ndds typesupport, everywhere we talk
          about ndds

Fri Feb 19 15:16:49 UTC 2010  jeff Parsons  <j.parsons@vanderbilt.edu>

        * TAO_IDL/be/be_visitor_connector/connector_dds_exh.cpp:
        * TAO_IDL/be/be_visitor_connector/connector_dds_exs.cpp:

          Removed unused variable 'dt_name'.

        * TAO_IDL/fe/fe_component_header.cpp:
        * TAO_IDL/fe/fe_extern.cpp:
        * TAO_IDL/fe/fe_home_header.cpp:
        * TAO_IDL/fe/fe_init.cpp:
        * TAO_IDL/fe/fe_interface_header.cpp:
        * TAO_IDL/fe/fe_obv_header.cpp:
        * TAO_IDL/fe/idl.ll:
        * TAO_IDL/fe/idl.yy:
        * TAO_IDL/fe/lex.yy.cpp:
        * TAO_IDL/fe/y.tab.cpp:
        * TAO_IDL/include/idl_global.h:
        * TAO_IDL/include/utl_tmpl/UTL_Scope_T.cpp:
        * TAO_IDL/util/utl_global.cpp:
        * TAO_IDL/util/utl_scope.cpp:
        * TAO_IDL/ast/ast_attribute.cpp:
        * TAO_IDL/ast/ast_check.cpp:

          Reordered #includes to eliminate a circular dependency
          introduced by the addition of the template source file
          UTL_Scope_T.cpp.

Fri Feb 19 12:54:47 UTC 2010  Johnny Willemsen  <jwillemsen@remedy.nl>

        * TAO_IDL/be/be_visitor_connector/connector_dds_exh.cpp:
        * TAO_IDL/be/be_visitor_connector/connector_dds_exs.cpp:

          Generate an additional boolean that is used to indicate
          whether we have a fixed or non fixed type

Fri Feb 19 08:53:47 UTC 2010  Johnny Willemsen  <jwillemsen@remedy.nl>

        * TAO_IDL/be/be_codegen.cpp:

          Always generate the state connector header, this needs more tweaks
          in the near future

Thu Feb 18 22:53:29 UTC 2010  Jeff Parsons <j.parsons@vanderbilt.edu>

        * TAO_IDL/include/ast_root.h:
        * TAO_IDL/include/ast_valuebox.h:
        * TAO_IDL/include/ast_module.h:
        * TAO_IDL/include/ast_union_label.h:
        * TAO_IDL/include/ast_union.h:
        * TAO_IDL/include/ast_interface_fwd.h:
        * TAO_IDL/include/ast_structure.h:
        * TAO_IDL/include/ast_component_fwd.h:
        * TAO_IDL/include/utl_tmpl/UTL_Scope_T.cpp:
        * TAO_IDL/include/ast_string.h:
        * TAO_IDL/include/ast_decl.h:
        * TAO_IDL/include/ast_factory.h:
        * TAO_IDL/include/ast_valuetype.h:
        * TAO_IDL/include/ast_argument.h:
        * TAO_IDL/include/ast_eventtype.h:
        * TAO_IDL/include/ast_native.h:
        * TAO_IDL/include/ast_union_fwd.h:
        * TAO_IDL/include/ast_home.h:
        * TAO_IDL/include/ast_structure_fwd.h:
        * TAO_IDL/include/ast_enum_val.h:
        * TAO_IDL/include/ast_sequence.h:
        * TAO_IDL/include/ast_valuetype_fwd.h:
        * TAO_IDL/include/ast_eventtype_fwd.h:
        * TAO_IDL/include/ast_exception.h:
        * TAO_IDL/include/ast_attribute.h:
        * TAO_IDL/include/ast_enum.h:
        * TAO_IDL/include/ast_union_branch.h:
        * TAO_IDL/include/ast_type.h:
        * TAO_IDL/include/ast_field.h:
        * TAO_IDL/include/ast_constant.h:
        * TAO_IDL/include/ast_interface.h:
        * TAO_IDL/include/ast_operation.h:
        * TAO_IDL/include/ast_component.h:
        * TAO_IDL/include/ast_concrete_type.h:
        * TAO_IDL/include/ast_predefined_type.h:
        * TAO_IDL/include/ast_array.h:
        * TAO_IDL/be/be_union.cpp:
        * TAO_IDL/be/be_interface_fwd.cpp:
        * TAO_IDL/be/be_attribute.cpp:
        * TAO_IDL/be/be_factory.cpp:
        * TAO_IDL/be/be_valuetype.cpp:
        * TAO_IDL/be/be_union_fwd.cpp:
        * TAO_IDL/be/be_union_branch.cpp:
        * TAO_IDL/be/be_valuetype_fwd.cpp:
        * TAO_IDL/be/be_type.cpp:
        * TAO_IDL/be/be_home.cpp:
        * TAO_IDL/be/be_enum_val.cpp:
        * TAO_IDL/be/be_mirror_port.cpp:
        * TAO_IDL/be/be_valuebox.cpp:
        * TAO_IDL/be/be_component.cpp:
        * TAO_IDL/be/be_decl.cpp:
        * TAO_IDL/be/be_util.cpp:
        * TAO_IDL/be/be_eventtype_fwd.cpp:
        * TAO_IDL/be/be_expression.cpp:
        * TAO_IDL/be/be_typedef.cpp:
        * TAO_IDL/be/be_structure.cpp:
        * TAO_IDL/be/be_component_fwd.cpp:
        * TAO_IDL/be/be_operation_strategy.cpp:
        * TAO_IDL/be/be_interface_strategy.cpp:
        * TAO_IDL/be/be_field.cpp:
        * TAO_IDL/be/be_module.cpp:
        * TAO_IDL/be/be_structure_fwd.cpp:
        * TAO_IDL/be/be_predefined_type.cpp:
        * TAO_IDL/be/be_argument.cpp:
        * TAO_IDL/be/be_constant.cpp:
        * TAO_IDL/be/be_exception.cpp:
        * TAO_IDL/be/be_extended_port.cpp:
        * TAO_IDL/be/be_sequence.cpp:
        * TAO_IDL/be/be_eventtype.cpp:
        * TAO_IDL/be/be_root.cpp:
        * TAO_IDL/be/be_interface.cpp:
        * TAO_IDL/be/be_operation.cpp:
        * TAO_IDL/be/be_enum.cpp:
        * TAO_IDL/be/be_string.cpp:
        * TAO_IDL/be/be_array.cpp:
        * TAO_IDL/be/be_template_module.cpp:
        * TAO_IDL/be/be_native.cpp:
        * TAO_IDL/be/be_porttype.cpp:
        * TAO_IDL/be/be_union_label.cpp:
        * TAO_IDL/ast/ast_home.cpp:
        * TAO_IDL/ast/ast_union_fwd.cpp:
        * TAO_IDL/ast/ast_constant.cpp:
        * TAO_IDL/ast/ast_structure_fwd.cpp:
        * TAO_IDL/ast/ast_operation.cpp:
        * TAO_IDL/ast/ast_interface.cpp:
        * TAO_IDL/ast/ast_component.cpp:
        * TAO_IDL/ast/ast_concrete_type.cpp:
        * TAO_IDL/ast/ast_predefined_type.cpp:
        * TAO_IDL/ast/ast_enum_val.cpp:
        * TAO_IDL/ast/ast_sequence.cpp:
        * TAO_IDL/ast/ast_valuetype_fwd.cpp:
        * TAO_IDL/ast/ast_array.cpp:
        * TAO_IDL/ast/ast_eventtype_fwd.cpp:
        * TAO_IDL/ast/ast_root.cpp:
        * TAO_IDL/ast/ast_valuebox.cpp:
        * TAO_IDL/ast/ast_module.cpp:
        * TAO_IDL/ast/ast_union_label.cpp:
        * TAO_IDL/ast/ast_union.cpp:
        * TAO_IDL/ast/ast_exception.cpp:
        * TAO_IDL/ast/ast_interface_fwd.cpp:
        * TAO_IDL/ast/ast_structure.cpp:
        * TAO_IDL/ast/ast_component_fwd.cpp:
        * TAO_IDL/ast/ast_attribute.cpp:
        * TAO_IDL/ast/ast_enum.cpp:
        * TAO_IDL/ast/ast_union_branch.cpp:
        * TAO_IDL/ast/ast_string.cpp:
        * TAO_IDL/ast/ast_decl.cpp:
        * TAO_IDL/ast/ast_factory.cpp:
        * TAO_IDL/ast/ast_valuetype.cpp:
        * TAO_IDL/ast/ast_type.cpp:
        * TAO_IDL/ast/ast_argument.cpp:
        * TAO_IDL/ast/ast_field.cpp:
        * TAO_IDL/ast/ast_eventtype.cpp:
        * TAO_IDL/ast/ast_native.cpp:
        * TAO_IDL/be_include/be_field.h:
        * TAO_IDL/be_include/be_interface.h:
        * TAO_IDL/be_include/be_operation.h:
        * TAO_IDL/be_include/be_component.h:
        * TAO_IDL/be_include/be_enum.h:
        * TAO_IDL/be_include/be_union_branch.h:
        * TAO_IDL/be_include/be_type.h:
        * TAO_IDL/be_include/be_union.h:
        * TAO_IDL/be_include/be_interface_fwd.h:
        * TAO_IDL/be_include/be_component_fwd.h:
        * TAO_IDL/be_include/be_root.h:
        * TAO_IDL/be_include/be_eventtype.h:
        * TAO_IDL/be_include/be_valuebox.h:
        * TAO_IDL/be_include/be_union_fwd.h:
        * TAO_IDL/be_include/be_predefined_type.h:
        * TAO_IDL/be_include/be_argument.h:
        * TAO_IDL/be_include/be_union_label.h:
        * TAO_IDL/be_include/be_home.h:
        * TAO_IDL/be_include/be_exception.h:
        * TAO_IDL/be_include/be_attribute.h:
        * TAO_IDL/be_include/be_factory.h:
        * TAO_IDL/be_include/be_module.h:
        * TAO_IDL/be_include/be_string.h:
        * TAO_IDL/be_include/be_array.h:
        * TAO_IDL/be_include/be_native.h:
        * TAO_IDL/be_include/be_constant.h:
        * TAO_IDL/be_include/be_structure.h:
        * TAO_IDL/be_include/be_typedef.h:
        * TAO_IDL/be_include/be_valuetype.h:
        * TAO_IDL/be_include/be_structure_fwd.h:
        * TAO_IDL/be_include/be_decl.h:
        * TAO_IDL/be_include/be_valuetype_fwd.h:
        * TAO_IDL/be_include/be_eventtype_fwd.h:
        * TAO_IDL/be_include/be_enum_val.h:
        * TAO_IDL/be_include/be_sequence.h:

          Removed unused constructors.

        * TAO_IDL/util/utl_scope.cpp:
        * TAO_IDL/include/utl_scope.h:

          - Moved static methods inside class UTL_Scope
            and removed related static variables.

          - Re-implemented is_global_name() to
            eliminate memory leaks and heap allocations.

Thu Feb 18 20:36:04 UTC 2010  Jeff Parsons <j.parsons@vanderbilt.edu>

        * TAO_IDL/include/utl_tmpl/UTL_Scope_T.cpp:

          New file, containing bodies of some newly
          added template methods to class UTL_Scope.

        * TAO_IDL/fe/lex.yy.cpp:
        * TAO_IDL/fe/idl.ll:

          Cosmetic changes.

        * TAO_IDL/include/ast_root.h:
        * TAO_IDL/include/ast_module.h:
        * TAO_IDL/include/ast_valuebox.h:
        * TAO_IDL/include/ast_union.h:
        * TAO_IDL/include/ast_param_holder.h:
        * TAO_IDL/include/ast_structure.h:
        * TAO_IDL/include/ast_interface_fwd.h:
        * TAO_IDL/include/ast_component_fwd.h:
        * TAO_IDL/include/ast_string.h:
        * TAO_IDL/include/ast_decl.h:
        * TAO_IDL/include/ast_factory.h:
        * TAO_IDL/include/ast_template_module_ref.h:
        * TAO_IDL/include/ast_valuetype.h:
        * TAO_IDL/include/ast_mirror_port.h:
        * TAO_IDL/include/ast_argument.h:
        * TAO_IDL/include/ast_eventtype.h:
        * TAO_IDL/include/ast_native.h:
        * TAO_IDL/include/ast_home.h:
        * TAO_IDL/include/ast_union_fwd.h:
        * TAO_IDL/include/ast_connector.h:
        * TAO_IDL/include/ast_provides.h:
        * TAO_IDL/include/ast_structure_fwd.h:
        * TAO_IDL/include/ast_enum_val.h:
        * TAO_IDL/include/ast_finder.h:
        * TAO_IDL/include/ast_sequence.h:
        * TAO_IDL/include/ast_valuetype_fwd.h:
        * TAO_IDL/include/ast_template_module.h:
        * TAO_IDL/include/ast_eventtype_fwd.h:
        * TAO_IDL/include/ast_exception.h:
        * TAO_IDL/include/ast_typedef.h:
        * TAO_IDL/include/ast_attribute.h:
        * TAO_IDL/include/ast_extended_port.h:
        * TAO_IDL/include/ast_enum.h:
        * TAO_IDL/include/ast_union_branch.h:
        * TAO_IDL/include/ast_template_module_inst.
        * TAO_IDL/include/ast_uses.h:
        * TAO_IDL/include/ast_field.h:
        * TAO_IDL/include/utl_scope.h:
        * TAO_IDL/include/ast_porttype.h:
        * TAO_IDL/include/ast_constant.h:
        * TAO_IDL/include/ast_consumes.h:
        * TAO_IDL/include/ast_publishes.h:
        * TAO_IDL/include/ast_interface.h:
        * TAO_IDL/include/ast_operation.h:
        * TAO_IDL/include/ast_component.h:
        * TAO_IDL/include/ast_predefined_type.h:
        * TAO_IDL/include/ast_array.h:
        * TAO_IDL/include/ast_emits.h:
        * TAO_IDL/be/be_visitor_union/union.cpp:
        * TAO_IDL/be/be_root.cpp:
        * TAO_IDL/ast/ast_home.cpp:
        * TAO_IDL/ast/ast_union_fwd.cpp:
        * TAO_IDL/ast/ast_constant.cpp:
        * TAO_IDL/ast/ast_connector.cpp:
        * TAO_IDL/ast/ast_provides.cpp:
        * TAO_IDL/ast/ast_consumes.cpp:
        * TAO_IDL/ast/ast_publishes.cpp:
        * TAO_IDL/ast/ast_structure_fwd.cpp:
        * TAO_IDL/ast/ast_operation.cpp:
        * TAO_IDL/ast/ast_interface.cpp:
        * TAO_IDL/ast/ast_component.cpp:
        * TAO_IDL/ast/ast_enum_val.cpp:
        * TAO_IDL/ast/ast_predefined_type.cpp:
        * TAO_IDL/ast/ast_finder.cpp:
        * TAO_IDL/ast/ast_sequence.cpp:
        * TAO_IDL/ast/ast_array.cpp:
        * TAO_IDL/ast/ast_valuetype_fwd.cpp:
        * TAO_IDL/ast/ast_template_module.cpp:
        * TAO_IDL/ast/ast_emits.cpp:
        * TAO_IDL/ast/ast_root.cpp:
        * TAO_IDL/ast/ast_eventtype_fwd.cpp:
        * TAO_IDL/ast/ast_redef.cpp:
        * TAO_IDL/ast/ast_module.cpp:
        * TAO_IDL/ast/ast_valuebox.cpp:
        * TAO_IDL/ast/ast_union.cpp:
        * TAO_IDL/ast/ast_param_holder.cpp:
        * TAO_IDL/ast/ast_exception.cpp:
        * TAO_IDL/ast/ast_typedef.cpp:
        * TAO_IDL/ast/ast_interface_fwd.cpp:
        * TAO_IDL/ast/ast_structure.cpp:
        * TAO_IDL/ast/ast_component_fwd.cpp:
        * TAO_IDL/ast/ast_attribute.cpp:
        * TAO_IDL/ast/ast_enum.cpp:
        * TAO_IDL/ast/ast_extended_port.cpp:
        * TAO_IDL/ast/ast_union_branch.cpp:
        * TAO_IDL/ast/ast_string.cpp:
        * TAO_IDL/ast/ast_factory.cpp:
        * TAO_IDL/ast/ast_template_module_ref.cpp:
        * TAO_IDL/ast/ast_template_module_inst.cpp:
        * TAO_IDL/ast/ast_valuetype.cpp:
        * TAO_IDL/ast/ast_mirror_port.cpp:
        * TAO_IDL/ast/ast_uses.cpp:
        * TAO_IDL/ast/ast_argument.cpp:
        * TAO_IDL/ast/ast_field.cpp:
        * TAO_IDL/ast/ast_eventtype.cpp:
        * TAO_IDL/ast/ast_native.cpp:
        * TAO_IDL/ast/ast_porttype.cpp:
        * TAO_IDL/be_include/be_root.h:
        * TAO_IDL/util/utl_scope.cpp:

          - Consolidated common code from all fe_add_*
            methods into class UTL_Scope. All these
            methods had large bodies, and most were
            duplicated over several AST_* classes.
            To encapsulate the forward declaration and
            redefinition properties of AST_Interface
            and it forward-declarable subtypes
            AST_ValueType, AST_EventType, and
            AST_Component), some template methods were
            added to UTL_Scope.

          - Static constants were added to each AST_*
            class to associated it with its corresponding
            NodeType enum value, as an aid to template
            programming.

          - Typedefs were added to forward_declarable
            types to associate eachtype with its
            AST_*Fwd counterpart, as an aid to template
            programming.

Thu Feb 18 14:46:16 UTC 2010  Jeff Parsons <j.parsons@vanderbilt.edu>

        * TAO_IDL/be/be_visitor_connector/connector_dds_exh.cpp(gen_connector_traits):

          Fixed bug in code generation of the context class name
          when it appears as one of the template arguments in the
          connector traits typedef.

Wed Feb 17 15:13:40 UTC 2010  Jeff Parsons <j.parsons@vanderbilt.edu>

        * TAO_IDL/be/be_visitor_connector/connector_dds_exh.cpp(gen_dds_traits):

          Removed unused parameter.

Tue Feb 16 21:10:35 UTC 2010  Jeff Parsons <j.parsons@vanderbilt.edu>

        * TAO_IDL/be/be_visitor_typecode/typecode_defn.cpp:
        * TAO_IDL/be/be_visitor_typecode.cpp:
        * TAO_IDL/be/be_visitor_component/any_op_ch.cpp:
        * TAO_IDL/be/be_visitor_component/any_op_cs.cpp:
        * TAO_IDL/be/be_visitor_component/cdr_op_ch.cpp:
        * TAO_IDL/be/be_visitor_component/cdr_op_cs.cpp:
        * TAO_IDL/be_include/be_visitor_typecode/objref_typecode.h:
        * TAO_IDL/be_include/be_visitor_typecode/typecode_defn.h:
        * TAO_IDL/be_include/be_visitor_component/cdr_op_cs.h:
        * TAO_IDL/be_include/be_visitor_component/any_op_ch.h:
        * TAO_IDL/be_include/be_visitor_component/any_op_cs.h:
        * TAO_IDL/be_include/be_visitor_component/cdr_op_ch.h:

          More missing pieces of connector support.

Tue Feb 16 20:22:15 UTC 2010  Jeff Parsons <j.parsons@vanderbilt.edu>

        * TAO_IDL/be/be_provides.cpp:
        * TAO_IDL/be/be_visitor_interface/base_proxy_impl_ch.cpp:
        * TAO_IDL/be/be_visitor_interface/cdr_op_cs.cpp:
        * TAO_IDL/be/be_visitor_interface/remote_proxy_impl_ch.cpp:
        * TAO_IDL/be/be_codegen.cpp:
        * TAO_IDL/be/be_visitor_component/facet_exs.cpp:
        * TAO_IDL/be/be_visitor_component/servant_svh.cpp:
        * TAO_IDL/be/be_visitor_component/context_svh.cpp:
        * TAO_IDL/be/be_visitor_component/component_ch.cpp:
        * TAO_IDL/be/be_visitor_component/servant_svs.cpp:
        * TAO_IDL/be/be_visitor_component/executor_exs.cpp:
        * TAO_IDL/be/be_visitor_component/context_svs.cpp:
        * TAO_IDL/be/be_visitor_component/component_exs.cpp:
        * TAO_IDL/be/be_visitor_component/component_svh.cpp:
        * TAO_IDL/be/be_visitor_component/component_svs.cpp:
        * TAO_IDL/be/be_produce.cpp:
        * TAO_IDL/be/be_sequence.cpp:
        * TAO_IDL/be/be_visitor_connector/connector_dds_exs.cpp:
        * TAO_IDL/be/be_visitor_connector/connector_dds_exh.cpp:
        * TAO_IDL/be/be_visitor_connector/connector_dds_ex_base.cpp:
        * TAO_IDL/be/be_interface.cpp:
        * TAO_IDL/be/be_scope.cpp:
        * TAO_IDL/ast/ast_visitor_reifying.cpp:

          - Filled in several small missing pieces of connector
            support

          - Removed the check for the presence of components or
            connectors that was restricting the AST passes that
            generated servant, executor, or connector impl files.
            As with skeleton files and the presence of interfaces,
            we will just generate empty files even if the relevant
            IDL construct is not seen

          - Reversed the order of generation of include files in
            the connector implementation header file, so that the
            list of lem stub header files (generated from the list
            of #pragam ciao lem that is seen in the compilation
            unit) comes before the include of DDS_Event_Connector_T.h,
            since the latter contains C++ template declarations,
            and thus also the associated source file

Tue Feb 16 14:22:12 UTC 2010  Jeff Parsons <j.parsons@vanderbilt.edu>

        * TAO_IDL/narrow/narrow.cpp:

          Added missing case to cast a connector to a scope.

Tue Feb 16 09:16:47 UTC 2010  Johnny Willemsen  <jwillemsen@remedy.nl>

        * MPC/modules/IDLHelper.pm:
          Handle connector export file

Mon Feb 15 22:35:26 UTC 2010  Jeff Parsons <j.parsons@vanderbilt.edu>

        * TAO_IDL/be/be_visitor_component/component_ih.cpp:
        * TAO_IDL/be/be_visitor_component/component_is.cpp:
        * TAO_IDL/be_include/be_visitor_component/component_is.h:
        * TAO_IDL/be_include/be_visitor_component/component_ih.h:

          Removed these visitors, they are not applicable to
          components since their servants aren't hand-written.

        * TAO_IDL/be/be_visitor_connector/connector_dds_ex_base.cpp:
        * TAO_IDL/be_include/be_visitor_connector/connector_dds_ex_base.h:

          Added base class visitor for class be_visitor_connector_dds_exh
          and class be_visitor_connector_dds_exs, to capture common
          code.

        * TAO_IDL/be/be_visitor_arg_traits.cpp:
        * TAO_IDL/be/be_visitor_component.cpp:
        * TAO_IDL/be/be_codegen.cpp:
        * TAO_IDL/be/be_visitor_connector.cpp:
        * TAO_IDL/be/be_visitor_component/context_ex_idl.cpp:
        * TAO_IDL/be/be_visitor_component/component_ch.cpp:
        * TAO_IDL/be/be_visitor_component/facet_svs.cpp:
        * TAO_IDL/be/be_visitor_component/component_ci.cpp:
        * TAO_IDL/be/be_visitor_component/executor_ex_idl.cpp:
        * TAO_IDL/be/be_visitor_component/component_ex_idl.cpp:
        * TAO_IDL/be/be_visitor_component/component_cs.cpp:
        * TAO_IDL/be/be_visitor_component/component_sh.cpp:
        * TAO_IDL/be/be_visitor_component/component_si.cpp:
        * TAO_IDL/be/be_visitor_component/servant_svh.cpp:
        * TAO_IDL/be/be_visitor_component/context_svh.cpp:
        * TAO_IDL/be/be_visitor_component/component_ss.cpp:
        * TAO_IDL/be/be_visitor_component/servant_svs.cpp:
        * TAO_IDL/be/be_visitor_component/context_svs.cpp:
        * TAO_IDL/be/be_visitor_component/component_svh.cpp:
        * TAO_IDL/be/be_visitor_component/component_svs.cpp:
        * TAO_IDL/be/be_visitor_module/module.cpp:
        * TAO_IDL/be/be_visitor_connector/connector_dds_exs.cpp:
        * TAO_IDL/be/be_visitor_connector/connector_dds_exh.cpp:
        * TAO_IDL/be/be_visitor_ccm_pre_proc.cpp:
        * TAO_IDL/be/be_visitor_traits.cpp:
        * TAO_IDL/ast/ast_module.cpp:
        * TAO_IDL/be_include/be_visitor_connector.h:
        * TAO_IDL/be_include/be_visitor_ccm_pre_proc.h:
        * TAO_IDL/be_include/be_visitor_component/component_sh.h:
        * TAO_IDL/be_include/be_visitor_component/component_si.h:
        * TAO_IDL/be_include/be_visitor_component/servant_svh.h:
        * TAO_IDL/be_include/be_visitor_component/context_svh.h:
        * TAO_IDL/be_include/be_visitor_component/facet_ex_idl.h:
        * TAO_IDL/be_include/be_visitor_component/component_ss.h:
        * TAO_IDL/be_include/be_visitor_component/servant_svs.h:
        * TAO_IDL/be_include/be_visitor_component/context_svs.h:
        * TAO_IDL/be_include/be_visitor_component/component_svh.h:
        * TAO_IDL/be_include/be_visitor_component/component_svs.h:
        * TAO_IDL/be_include/be_visitor_component/facet_svh.h:
        * TAO_IDL/be_include/be_visitor_component/context_ex_idl.h:
        * TAO_IDL/be_include/be_visitor_component/component_ch.h:
        * TAO_IDL/be_include/be_visitor_component/facet_svs.h:
        * TAO_IDL/be_include/be_visitor_component/component_ci.h:
        * TAO_IDL/be_include/be_visitor_component/executor_ex_idl.h:
        * TAO_IDL/be_include/be_visitor_component/component_ex_idl.h:
        * TAO_IDL/be_include/be_visitor_component/component_cs.h:
        * TAO_IDL/be_include/be_visitor_arg_traits.h:
        * TAO_IDL/be_include/be_visitor_connector/connector_dds_exs.h:
        * TAO_IDL/be_include/be_visitor_connector/connector_dds_exh.h:
        * TAO_IDL/be_include/be_visitor_traits.h:
        * TAO_IDL/be_include/be_visitor_component.h:

          Added visit_connector() methods to all visitors where the
          code generation for connectors is the same as that for
          components. The visit_connector() methods simply call
          visit_component().

Mon Feb 15 16:32:24 UTC 2010  Jeff Parsons  <j.parsons@vanderbilt.edu>

        * TAO_IDL/fe/idl.yy:
        * TAO_IDL/fe/y.tab.cpp:

          - Changed connector grammar to allow an empty body
          - Removed unused varables
          - Added missing AST visitor creation

Mon Feb 15 12:08:47 UTC 2010  Johnny Willemsen  <jwillemsen@remedy.nl>

        * catior/README
        * catior/README.catior
        * nslist/README
        * nslist/README.nslist
          Renamed to have the postfix to make packaging and installation easier

Mon Feb 15 09:35:47 UTC 2010  Johnny Willemsen  <jwillemsen@remedy.nl>

        * tao/FoxResource/FoxResource_Loader.h:
          User has to specify the full fox path now, some distributions now ship fox-1.6 and
          fox-1.4 as directory names

Mon Feb 15 09:17:47 UTC 2010  Johnny Willemsen  <jwillemsen@remedy.nl>

        * m4/tao.m4:
          Moved to ACE, seems the latest autoconf tools only support one m4
          directory

        * configure.ac:
        * Makefile.am:
        * Release:
          Updated for move above

Sun Feb 14 15:57:47 UTC 2010  Jeff Parsons <j.parsons@vanderbilt.edu>

        * TAO_IDL/be/be_codegen.cpp:

          Changed include generation for executor IDL files to
          always generate include of CCM_Container.idl, regardless
          of whether it is pulled in indirectly or not. An optimizing
          check may be added at a later date.

Fri Feb 12 22:08:24 UTC 2010  Jeff Parsons <j.parsons@vanderbilt.edu>

        * TAO_IDL/include/idl_global.h:
        * TAO_IDL/be/be_visitor_root.cpp:
        * TAO_IDL/be/be_codegen.cpp:
        * TAO_IDL/be/be_visitor_root/root.cpp:
        * TAO_IDL/be/be_visitor_component/component_exh.cpp:
        * TAO_IDL/be/be_visitor_module.cpp:
        * TAO_IDL/be/be_visitor_module/module.cpp:
        * TAO_IDL/be/be_produce.cpp:
        * TAO_IDL/be_include/be_visitor_root/root.h:
        * TAO_IDL/be_include/be_visitor_module/module.h:
        * TAO_IDL/fe/lex.yy.cpp:
        * TAO_IDL/fe/idl.ll:
        * TAO_IDL/util/utl_global.cpp:

          - Added pragma indicating RTI DDS TypeSupport
            header file to include in the connector implementation
            header file.

          - Added generation of client stub header file
            inclusion in connector implementation header file.

          - Cosmetic changes to be_codegen.cpp

          - Added boilerplate for the spawning of the connector
            implementation visitors.

Thu Feb 11 19:12:11 UTC 2010  Johnny Willemsen  <jwillemsen@remedy.nl>

        * TAO_IDL/be/be_codegen.cpp:
          Don't generate any E.idl includes with -Glfa. -Glfa means:
          . Generated E.idl won't depend on any other E.idl
          . Any required CCM_ local interface for facets, etc will be
            generated locally.

Thu Feb 11 18:51:11 UTC 2010  Johnny Willemsen  <jwillemsen@remedy.nl>

        * TAO_IDL/be/be_codegen.cpp
        * TAO_IDL/be/be_global.cpp
        * TAO_IDL/be/be_visitor_component/context_svh.cpp
        * TAO_IDL/be/be_visitor_component/context_svs.cpp
        * TAO_IDL/be/be_visitor_component/servant_svs.cpp
        * TAO_IDL/be/be_visitor_component_scope.cpp
        * TAO_IDL/be/be_visitor_home/home_svh.cpp
        * TAO_IDL/be/be_visitor_home/home_svs.cpp
        * TAO_IDL/be/be_visitor_operation/operation_svs.cpp
        * TAO_IDL/be/be_visitor_root/root.cpp
        * TAO_IDL/be_include/be_global.h
        * TAO_IDL/be_include/be_scope.h
        * TAO_IDL/be_include/be_visitor_component/context_svs.h
        * TAO_IDL/be_include/be_visitor_component_scope.h
        * TAO_IDL/be_include/be_visitor_home/home_svs.h
        * TAO_IDL/be_include/be_visitor_operation/operation_svs.h
        * TAO_IDL/util/utl_err.cpp
          Removed swapping container support

Thu Feb 11 17:04:59 UTC 2010  Jeff Parsons <j.parsons@vanderbilt.edu>

        * TAO_IDL/fe/lex.yy.cpp:
        * TAO_IDL/fe/idl.ll:
        * TAO_IDL/tao_idl_fe.mpc:

          Changes to restore mods that Johnny Willemsen made to
          lex.yy.cpp without corresponding changes to idl.ll and
          tao_idl_fe.mpc. These changes are in

          Mon Feb  8 06:58:43 UTC 2010  Johnny Willemsen  <jwillemsen@remedy.nl>

Wed Feb 10 22:16:15 UTC 2010  Jeff Parsons <j.parsons@vanderbilt.edu>

        * TAO_IDL/include/idl_global.h:

          Fixed typo in comment.

        * TAO_IDL/be/be_codegen.cpp:

          Added code generation for included files in
          the connector implementation.

        * TAO_IDL/fe/y.tab.cpp:
        * TAO_IDL/fe/idl.yy:

          Fixed incorrect comment.

        * TAO_IDL/fe/lex.yy.cpp:
        * TAO_IDL/fe/idl.ll:

          Restored code that was added to the cpp file only and
          got zapped in the last regeneration.

Wed Feb 10 22:02:06 UTC 2010  Yan Dai  <dai_y@ociweb.com>

        * orbsvcs/orbsvcs/SSLIOP/SSLIOP_Connection_Handler.cpp:

          Added support for ORBKeepalive in SSL mode.

Wed Feb 10 16:34:24 UTC 2010  Jeff Parsons <j.parsons@vanderbilt.edu>

        * TAO_IDL/be/be_visitor_xplicit_pre_proc.cpp:
        * TAO_IDL/be_include/be_visitor_xplicit_pre_proc.h:

          In the recreation of the home scope in the corresponding
          explicit interface, added support for eventtypes, which
          cannot be declared inside a home, but can be referenced.

Wed Feb 10 10:52:00 UTC 2010  Simon Massey  <sma at prismtech dot com>

        * examples/mfc/server.cpp:

          Fixed a long standing typo in mod that was committed by
          ChangeLogTag: Mon Mar  5 07:59:00 2001  Michael Kircher  <Michael.Kircher@mchp.siemens.de>
          He was adding ACE_TRY_ENV and ACE_TRY_CHECKS to the existing code,
          but put in an ACE_TRY_CHECK where an ACE_TRY_ENV was supposed to
          go. This has never been touched since and has missed the grand
          purge of this old excaption code as it didn't conform to the normal
          useage patterns. If TAO is built with #define ACE_LACKS_DEPRECATED_MACROS
          this caused this example to not build due to this missuse.

Wed Feb 10 10:43:11 UTC 2010  Johnny Willemsen  <jwillemsen@remedy.nl>

        * tests/IDL_Test/IDL_Test.mpc:
          Don't compile the 3821 RTI DDS generated files, they don't compile
          at this moment.

Tue Feb  9 22:55:11 UTC 2010  Jeff Parsons <j.parsons@vanderbilt.edu>

        * TAO_IDL/be/be_visitor_root/root_cnh.cpp:
        * TAO_IDL/be/be_visitor_root/root_cns.cpp:
        * TAO_IDL/be_include/be_visitor_root/root_cnh.h:
        * TAO_IDL/be_include/be_visitor_root/root_cns.h:

          New visitors that create the files and streams
          for the connector header and source implementation
          generation.

        * TAO_IDL/include/idl_global.h:
        * TAO_IDL/be/be_visitor_root.cpp:
        * TAO_IDL/be/be_codegen.cpp:
        * TAO_IDL/be/be_visitor_root/root.cpp:
        * TAO_IDL/be/be_visitor_component/component.cpp:
        * TAO_IDL/be/be_visitor_module/module.cpp:
        * TAO_IDL/be/be_global.cpp:
        * TAO_IDL/be/be_visitor_attribute/attribute.cpp:
        * TAO_IDL/be/be_produce.cpp:
        * TAO_IDL/ast/ast_connector.cpp:
        * TAO_IDL/be_include/be_visitor_root/root_exs.h:
        * TAO_IDL/be_include/be_visitor_root/root_exh.h:
        * TAO_IDL/be_include/be_codegen.h:
        * TAO_IDL/be_include/be_helper.h:
        * TAO_IDL/be_include/be_visitor_root.h:
        * TAO_IDL/be_include/be_global.h:
        * TAO_IDL/util/utl_global.cpp:

          Added beginning support for code generation for
          connectors.

        * docs/compiler.html:

          Updated IDL compiler docs with info about connector
          code generation support.

Tue Feb  9 18:12:00 UTC 2010  Jeff Parsons <j.parsons@vanderbilt.edu>

        * TAO_IDL/astast_visitor_reifying.cpp:

          Added support for IDL native constructs.

        * TAO_IDL/be/be_visitor_native/native_ch.cpp:

          Cosmetic changes.

Tue Feb  9 09:39:10 UTC 2010  Vladimir Zykov  <vladimir.zykov@prismtech.com>

        * TAO_IDL/be/be_helper.cpp:
          Fixed generation of constants for case labels in switch statement
          for unions with char discriminator.

Mon Feb  8 23:23:48 UTC 2010  Jeff Parsons <j.parsons@vanderbilt.edu>

        * TAO_IDL/include/ast_union.h:
        * TAO_IDL/be/be_union.cpp:
        * TAO_IDL/be/be_visitor_xplicit_pre_proc.cpp:
        * TAO_IDL/ast/ast_visitor_reifying.cpp:
        * TAO_IDL/be_include/be_union.h:
        * TAO_IDL/be_include/be_visitor_xplicit_pre_proc.h:

          Added support for all legal home-scope declarations
          in the generation of implied IDL for the explicit
          home interface.

Mon Feb  8 17:16:31 UTC 2010  Jeff Parsons <j.parsons@vanderbilt.edu>

        * TAO_IDL/be/be_visitor_xplicit_pre_proc.cpp:
        * TAO_IDL/be_include/be_visitor_xplicit_pre_proc.h:

          In transfer of scope contents from IDL home to the
          implied IDL explicit interface, added support for
          typedefs. This change fixes a build problem in
          CIAO_ROOT/tests/IDL3/Lookup. Support for other
          constructs legal for declaration inside a home is
          pending.

Mon Feb  8 14:48:43 UTC 2010  Johnny Willemsen  <jwillemsen@remedy.nl>

        * TAO_IDL/be/be_visitor_component/component_ch.cpp:
        * TAO_IDL/be/be_visitor_root/root.cpp:
        * TAO_IDL/be/be_visitor_traits.cpp:
          Layout changes for the generated code

Mon Feb  8 13:52:43 UTC 2010  Johnny Willemsen  <jwillemsen@remedy.nl>

        * TAO_IDL/be/be_helper.cpp:
          Removed link to website which doesn't seem to exist anymore

Mon Feb  8 11:57:33 UTC 2010  Vladimir Zykov  <vladimir.zykov@prismtech.com>

        * tests/IDL_Test/IDL_Test.mpc:
          Added Bug_3821_Regression.idl to MPC.

Mon Feb  8 10:58:21 UTC 2010  Vladimir Zykov  <vladimir.zykov@prismtech.com>

        * tests/Bug_3821_Regression/test.cpp:
        * tests/Bug_3821_Regression/test.idl:
        * tests/Bug_3821_Regression/Bug_3821_Regression.mpc:
        * tests/Bug_3821_Regression/run_test.pl:
        * tests/Bug_3821_Regression/README:
        * tests/IDL_Test/Bug_3821_Regression.idl:
        * bin/tao_orb_tests.lst:
          Added a test for bug#3821 and scheduled it for run. Added the same
          IDL file to IDL_Test, it can be useful for testing tao_idl's
          behavior on unions.

        * TAO_IDL/be/be_union.cpp:
        * TAO_IDL/be/be_visitor_union/discriminant_ci.cpp:
        * TAO_IDL/be/be_visitor_union/cdr_op_cs.cpp:
        * TAO_IDL/be/be_visitor_union/serializer_op_cs.cpp:
        * TAO_IDL/be/be_visitor_union/union_cs.cpp:
        * TAO_IDL/ast/ast_union.cpp:
        * TAO_IDL/be_include/be_union.h:
          Fixed a bug#3821. In particular it changes how tao_idl generates
          code for enum discriminated unions. Fixed other minor bugs.

Mon Feb  8 10:35:30 UTC 2010  Martin Corino  <mcorino@remedy.nl>

        * orbsvcs/orbsvcs/Trader/Constraint_l.cpp:
        * orbsvcs/tests/Concurrency/lex.CC_command.cpp:
        * performance-tests/POA/Demux/demux_test_server.cpp:
        * tests/Exposed_Policies/RT_Properties.cpp:

          Fixed new GCC 4.4.x warning about ignoring return values of
          function marked by the new warn_unused_result attribute.

Mon Feb  8 06:58:43 UTC 2010  Johnny Willemsen  <jwillemsen@remedy.nl>

        * TAO_IDL/fe/lex.yy.cpp:
          Fixed Windows CE compile error

Sat Feb  6 13:50:43 UTC 2010  Martin Corino  <mcorino@remedy.nl>

        * tao/GIOP_Message_State.cpp:
          Fixed strict aliasing warning.

Fri Feb  5 19:20:42 UTC 2010  Jeff Parsons <j.parsons@vanderbilt.edu>

        * TAO_IDL/be/be_visitor_home/home_svs.cpp:
        * TAO_IDL/be/be_visitor_home/home_svh.cpp:
        * TAO_IDL/be/be_visitor_xplicit_pre_proc.cpp:
        * TAO_IDL/be_include/be_visitor_ccm_pre_proc.h:
        * TAO_IDL/be_include/be_visitor_xplicit_pre_proc.h:

          Fixed bug introduced by the recent change in handling of
          home factories and finders, where the return type of an
          inherited factory or finder was the type of the component
          managed by the derived home, instead of the managed component
          of the base home, as it should be.

Thu Feb  4 14:13:32 UTC 2010  Vladimir Zykov  <vladimir.zykov@prismtech.com>

        * TAO_IDL/be/be_visitor_union/discriminant_ci.cpp:
          Changed code to generate octal numbers where they are meant instead
          of decimals. Removed code for wchars since wchar discriminant is
          not allowed in unions.

        * TAO_IDL/be/be_global.cpp:
          Fixed a memory leak in tao_idl.

        * TAO_IDL/ast/ast_module.cpp:
          Fixed bug#3819. Multiple forward declarations of valuetypes,
          eventtypes, and components don't crash tao_idl now.

Thu Feb  4 13:56:43 UTC 2010  Johnny Willemsen  <jwillemsen@remedy.nl>

        * TAO_IDL/Makefile.am:
          Regenerated

Thu Feb  4 09:25:43 UTC 2010  Johnny Willemsen  <jwillemsen@remedy.nl>

        Merged revision 88756-88826 from idl3_plus_backend2 to svn head.

        * orbsvcs/IFR_Service/ifr_adding_visitor.h:
        * orbsvcs/IFR_Service/ifr_adding_visitor.cpp:

          Change IFR loader backend correspondingly with the
          change above to home factories and finders.

Thu Feb  4 09:15:43 UTC 2010  Johnny Willemsen  <jwillemsen@remedy.nl>

        * TAO_IDL/*.cpp:
          Converted to doxygen style of documentation

Thu Feb  4 09:01:43 UTC 2010  Johnny Willemsen  <jwillemsen@remedy.nl>

        * TAO_IDL/*.h:
          Converted to doxygen style of documentation

Thu Feb  4 08:36:43 UTC 2010  Johnny Willemsen  <jwillemsen@remedy.nl>

        Merged revision 88756-88826 from idl3_plus_backend2 to svn head.

        Wed Feb  3 21:37:08 UTC 2010  Jeff Parsons <j.parsons@vanderbilt.edu>

        * TAO_IDL/be_include/be_visitor_xplicit_pre_proc.h:
        * TAO_IDL/be/be_visitor_xplicit_pre_proc.cpp:

          New visitor specialized to generate the contents of
          the home explicit implied IDL interface.

        * TAO_IDL/include/ast_home.h:
        * TAO_IDL/be/be_visitor_ccm_pre_proc.cpp:
        * TAO_IDL/ast/ast_home.cpp:
        * TAO_IDL/be_include/be_visitor_ccm_pre_proc.h:
        * TAO_IDL/util/utl_scope.cpp:

          Completed changes to handle home factories and finders
          as part of the home scope rather than in separate list
          members of the home class.

        Mon Feb  1 22:30:44 UTC 2010  Jeff Parsons <j.parsons@vanderbilt.edu>

        * TAO_IDL/be/be_visitor_home/factory_svs.cpp:
        * TAO_IDL/be_include/be_visitor_home/factory_svs.h:

          Removed this recently-added visitor, turned out
          to be unnecessary.

        * TAO_IDL/be/be_visitor_home/home_svs.cpp:
        * TAO_IDL/be/be_visitor_home/home_exs.cpp:
        * TAO_IDL/be/be_visitor_home/home_svh.cpp:
        * TAO_IDL/be/be_visitor_home/home_ex_idl.cpp:
        * TAO_IDL/be/be_visitor_home/home_exh.cpp:
        * TAO_IDL/be/be_visitor_operation/arglist.cpp:
        * TAO_IDL/be/be_visitor_valuetype/valuetype_init_arglist_ch.cpp:
        * TAO_IDL/be/be_visitor_valuetype/arglist.cpp:
        * TAO_IDL/be/be_decl.cpp:
        * TAO_IDL/be/be_visitor_home.cpp:
        * TAO_IDL/be/be_visitor_operation.cpp:
        * TAO_IDL/be/be_scope.cpp:
        * TAO_IDL/be/be_visitor_ccm_pre_proc.cpp:
        * TAO_IDL/ast/ast_visitor_tmpl_module_inst.cpp:
        * TAO_IDL/be_include/be_visitor_home/home_ex_idl.h:
        * TAO_IDL/be_include/be_visitor_home/home_exh.h:
        * TAO_IDL/be_include/be_visitor_home/home_svs.h:
        * TAO_IDL/be_include/be_visitor_home/home_exs.h:
        * TAO_IDL/be_include/be_visitor_home/home_svh.h:
        * TAO_IDL/be_include/be_visitor_operation/arglist.h:
        * TAO_IDL/be_include/be_visitor_ccm_pre_proc.h:
        * TAO_IDL/be_include/be_visitor_home.h:

          More work toward handling home factories and
          finders as members of the home's scope rather
          than as a list in the home class. In progress.

        Fri Jan 29 22:03:03 UTC 2010  Jeff Parsons <j.parsons@vanderbilt.edu>

        * TAO_IDL/be/be_visitor_home/factory_svs.cpp:
        * TAO_IDL/be_include/be_visitor_home/factory_svs.h:

          New visitor for homes, encapsulating the issues of
          factory and finder code generation in the servant
          source file.

        * TAO_IDL/include/ast_valuetype.h:
        * TAO_IDL/include/ast_home.h:
        * TAO_IDL/include/ast_visitor_tmpl_module_inst.h:
        * TAO_IDL/include/utl_scope.h:
        * TAO_IDL/be/be_visitor_home/home_svs.cpp:
        * TAO_IDL/be/be_visitor_home/home_svh.cpp:
        * TAO_IDL/be/be_visitor_valuetype/valuetype_init_arglist_ch.cpp:
        * TAO_IDL/be/be_visitor_home.cpp:
        * TAO_IDL/be/be_finder.cpp:
        * TAO_IDL/ast/ast_home.cpp:
        * TAO_IDL/ast/ast_visitor_tmpl_module_inst.cpp:
        * TAO_IDL/ast/ast_finder.cpp:
        * TAO_IDL/ast/ast_redef.cpp:
        * TAO_IDL/be_include/be_visitor_home/home_svs.h:
        * TAO_IDL/be_include/be_visitor_home/home_svh.h:
        * TAO_IDL/be_include/be_visitor_home.h:
        * TAO_IDL/fe/y.tab.cpp:
        * TAO_IDL/fe/idl.yy:
        * TAO_IDL/util/utl_scope.cpp:

          In-progress change of home factory and finder handling.
          Instead of being stored in lists in the home node, they
          will be members of the home scope like any other legal
          construct for a home scope.

        Fri Jan 29 18:08:41 UTC 2010  Jeff Parsons <j.parsons@vanderbilt.edu>

        * TAO_IDL/include/ast_finder.h:
        * TAO_IDL/be/be_finder.cpp:
        * TAO_IDL/ast/ast_finder.cpp:
        * TAO_IDL/be_include/be_finder.h:

          New AST node classes, representing an IDL home
          finder construct.

        * orbsvcs/IFR_Service/ifr_visitor.h:
        * orbsvcs/IFR_Service/ifr_visitor.cpp:
        * orbsvcs/IFR_Service/ifr_adding_visitor.cpp:

          Updated backend with no-op overrides of
          visit_* methods added to the front end.

        * TAO_IDL/include/ast_generator.h:
        * TAO_IDL/include/ast_visitor_reifying.h:
        * TAO_IDL/include/ast_decl.h:
        * TAO_IDL/include/ast_factory.h:
        * TAO_IDL/include/ast_visitor_tmpl_module_inst.h:
        * TAO_IDL/include/ast_visitor.h:
        * TAO_IDL/be/be_factory.cpp:
        * TAO_IDL/be/be_visitor.cpp:
        * TAO_IDL/be/be_generator.cpp:
        * TAO_IDL/ast/ast_visitor_tmpl_module_inst.cpp:
        * TAO_IDL/ast/ast_generator.cpp:
        * TAO_IDL/ast/ast_visitor_reifying.cpp:
        * TAO_IDL/ast/ast_factory.cpp:
        * TAO_IDL/be_include/be_visitor.h:
        * TAO_IDL/be_include/be_factory.h:
        * TAO_IDL/be_include/be_generator.h:
        * TAO_IDL/fe/y.tab.cpp:
        * TAO_IDL/fe/idl.yy:
        * TAO_IDL/narrow/narrow.cpp:

          Other changes corresponding to the addition
          of the new AST classes and visit_* methods
          above.

        Thu Jan 28 20:04:42 UTC 2010  Jeff Parsons <j.parsons@vanderbilt.edu>

        * TAO_IDL/include/ast_decl.h:
        * TAO_IDL/include/utl_scope.h:
        * TAO_IDL/be/be_visitor_operation/arglist.cpp:
        * TAO_IDL/be/be_visitor_operation/argument.cpp:
        * TAO_IDL/be/be_sequence.cpp:
        * TAO_IDL/ast/ast_interface.cpp:
        * TAO_IDL/ast/ast_module.cpp:
        * TAO_IDL/ast/ast_interface_fwd.cpp:
        * TAO_IDL/ast/ast_decl.cpp:
        * TAO_IDL/fe/y.tab.cpp:
        * TAO_IDL/fe/fe_extern.cpp:
        * TAO_IDL/fe/idl.yy:
        * TAO_IDL/util/utl_scope.cpp:

          Removal of more unnecessary code.

        Thu Jan 28 18:13:19 UTC 2010  Jeff Parsons <j.parsons@vanderbilt.edu>

        * TAO_IDL/be/be_union.cpp:
        * TAO_IDL/be/be_visitor_exception/exception.cpp:
        * TAO_IDL/be/be_visitor_exception/any_op_ch.cpp:
        * TAO_IDL/be/be_visitor_exception/cdr_op_ch.cpp:
        * TAO_IDL/be/be_visitor_exception/exception_cs.cpp:
        * TAO_IDL/be/be_visitor_exception/exception_ctor.cpp:
        * TAO_IDL/be/be_visitor_exception/exception_ch.cpp:
        * TAO_IDL/be/be_visitor_exception/exception_ci.cpp:
        * TAO_IDL/be/be_visitor_exception/any_op_cs.cpp:
        * TAO_IDL/be/be_visitor_exception/cdr_op_cs.cpp:
        * TAO_IDL/be/be_visitor_exception/ctor_assign.cpp:
        * TAO_IDL/be/be_visitor_typedef/any_op_ch.cpp:
        * TAO_IDL/be/be_visitor_typedef/cdr_op_ch.cpp:
        * TAO_IDL/be/be_visitor_typedef/typedef.cpp:
        * TAO_IDL/be/be_visitor_typedef/serializer_op_ch.cpp:
        * TAO_IDL/be/be_visitor_typedef/typedef_cs.cpp:
        * TAO_IDL/be/be_visitor_typedef/any_op_cs.cpp:
        * TAO_IDL/be/be_visitor_typedef/typedef_ch.cpp:
        * TAO_IDL/be/be_visitor_typedef/cdr_op_cs.cpp:
        * TAO_IDL/be/be_visitor_typedef/typedef_ci.cpp:
        * TAO_IDL/be/be_visitor_typedef/serializer_op_cs.cpp:
        * TAO_IDL/be/be_interface_fwd.cpp:
        * TAO_IDL/be/be_attribute.cpp:
        * TAO_IDL/be/be_visitor_native.cpp:
        * TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:
        * TAO_IDL/be/be_visitor_typecode/typecode_defn.cpp:
        * TAO_IDL/be/be_visitor_arg_traits.cpp:
        * TAO_IDL/be/be_valuetype.cpp:
        * TAO_IDL/be/be_visitor_argument/invoke_cs.cpp:
        * TAO_IDL/be/be_visitor_argument/argument.cpp:
        * TAO_IDL/be/be_visitor_argument/arglist.cpp:
        * TAO_IDL/be/be_visitor_argument/upcall_ss.cpp:
        * TAO_IDL/be/be_visitor_argument/vardecl_ss.cpp:
        * TAO_IDL/be/be_visitor_argument/post_upcall_ss.cpp:
        * TAO_IDL/be/be_visitor_argument/marshal_ss.cpp:
        * TAO_IDL/be/be_visitor_argument/paramlist.cpp:
        * TAO_IDL/be/be_visitor_home/home_ch.cpp:
        * TAO_IDL/be/be_visitor_home/home_exs.cpp:
        * TAO_IDL/be/be_visitor_home/home_ex_idl.cpp:
        * TAO_IDL/be/be_visitor_home/home_exh.cpp:
        * TAO_IDL/be/be_visitor_home/home_cs.cpp:
        * TAO_IDL/be/be_union_fwd.cpp:
        * TAO_IDL/be/be_visitor_interface/proxy_impls_ch.cpp:
        * TAO_IDL/be/be_visitor_interface/direct_proxy_impl_ss.cpp:
        * TAO_IDL/be/be_visitor_interface/smart_proxy_ch.cpp:
        * TAO_IDL/be/be_visitor_interface/amh_rh_ss.cpp:
        * TAO_IDL/be/be_visitor_interface/base_proxy_impl_ch.cpp:
        * TAO_IDL/be/be_visitor_interface/remote_proxy_broker_ch.cpp:
        * TAO_IDL/be/be_visitor_interface/interface_ci.cpp:
        * TAO_IDL/be/be_visitor_interface/smart_proxy_cs.cpp:
        * TAO_IDL/be/be_visitor_interface/amh_ch.cpp:
        * TAO_IDL/be/be_visitor_interface/interface_ih.cpp:
        * TAO_IDL/be/be_visitor_interface/cdr_op_ch.cpp:
        * TAO_IDL/be/be_visitor_interface/strategized_proxy_broker_sh.cpp:
        * TAO_IDL/be/be_visitor_interface/interface_cs.cpp:
        * TAO_IDL/be/be_visitor_interface/remote_proxy_broker_cs.cpp:
        * TAO_IDL/be/be_visitor_interface/base_proxy_broker_ch.cpp:
        * TAO_IDL/be/be_visitor_interface/interface_sh.cpp:
        * TAO_IDL/be/be_visitor_interface/interface_si.cpp:
        * TAO_IDL/be/be_visitor_interface/interface_is.cpp:
        * TAO_IDL/be/be_visitor_interface/cdr_op_cs.cpp:
        * TAO_IDL/be/be_visitor_interface/amh_sh.cpp:
        * TAO_IDL/be/be_visitor_interface/any_op_ch.cpp:
        * TAO_IDL/be/be_visitor_interface/strategized_proxy_broker_ss.cpp:
        * TAO_IDL/be/be_visitor_interface/amh_si.cpp:
        * TAO_IDL/be/be_visitor_interface/ami_interface_ch.cpp:
        * TAO_IDL/be/be_visitor_interface/interface.cpp:
        * TAO_IDL/be/be_visitor_interface/interface_ss.cpp:
        * TAO_IDL/be/be_visitor_interface/amh_ss.cpp:
        * TAO_IDL/be/be_visitor_interface/any_op_cs.cpp:
        * TAO_IDL/be/be_visitor_interface/tie_sh.cpp:
        * TAO_IDL/be/be_visitor_interface/interface_svh.cpp:
        * TAO_IDL/be/be_visitor_interface/proxy_brokers_ch.cpp:
        * TAO_IDL/be/be_visitor_interface/direct_proxy_impl_sh.cpp:
        * TAO_IDL/be/be_visitor_interface/tie_ss.cpp:
        * TAO_IDL/be/be_visitor_interface/remote_proxy_impl_ch.cpp:
        * TAO_IDL/be/be_visitor_interface/amh_rh_sh.cpp:
        * TAO_IDL/be/be_visitor_interface/interface_svs.cpp:
        * TAO_IDL/be/be_visitor_operation/smart_proxy_ch.cpp:
        * TAO_IDL/be/be_visitor_operation/proxy_impl_xh.cpp:
        * TAO_IDL/be/be_visitor_operation/direct_proxy_impl_ss.cpp:
        * TAO_IDL/be/be_visitor_operation/remote_proxy_impl_cs.cpp:
        * TAO_IDL/be/be_visitor_operation/amh_rh_ss.cpp:
        * TAO_IDL/be/be_visitor_operation/arglist.cpp:
        * TAO_IDL/be/be_visitor_operation/base_proxy_impl_ch.cpp:
        * TAO_IDL/be/be_visitor_operation/exceptlist_cs.cpp:
        * TAO_IDL/be/be_visitor_operation/smart_proxy_cs.cpp:
        * TAO_IDL/be/be_visitor_operation/rettype_return_cs.cpp:
        * TAO_IDL/be/be_visitor_operation/operation_ih.cpp:
        * TAO_IDL/be/be_visitor_operation/upcall_command_ss.cpp:
        * TAO_IDL/be/be_visitor_operation/operation_cs.cpp:
        * TAO_IDL/be/be_visitor_operation/exceptlist_ss.cpp:
        * TAO_IDL/be/be_visitor_operation/operation_sh.cpp:
        * TAO_IDL/be/be_visitor_operation/operation_is.cpp:
        * TAO_IDL/be/be_visitor_operation/rettype.cpp:
        * TAO_IDL/be/be_visitor_operation/amh_sh.cpp:
        * TAO_IDL/be/be_visitor_operation/operation.cpp:
        * TAO_IDL/be/be_visitor_operation/operation_ss.cpp:
        * TAO_IDL/be/be_visitor_operation/ami_handler_reply_stub_operation_ch.cpp:
        * TAO_IDL/be/be_visitor_operation/amh_ss.cpp:
        * TAO_IDL/be/be_visitor_operation/tie_sh.cpp:
        * TAO_IDL/be/be_visitor_operation/ami_ch.cpp:
        * TAO_IDL/be/be_visitor_operation/ami_handler_reply_stub_operation_cs.cpp:
        * TAO_IDL/be/be_visitor_operation/argument.cpp:
        * TAO_IDL/be/be_visitor_operation/ami_exception_holder_operation_cs.cpp:
        * TAO_IDL/be/be_visitor_operation/tie_ss.cpp:
        * TAO_IDL/be/be_visitor_operation/amh_rh_sh.cpp:
        * TAO_IDL/be/be_visitor_operation/argument_marshal.cpp:
        * TAO_IDL/be/be_visitor_operation/ami_cs.cpp:
        * TAO_IDL/be/be_visitor_operation/argument_invoke.cpp:
        * TAO_IDL/be/be_visitor_root.cpp:
        * TAO_IDL/be/be_codegen.cpp:
        * TAO_IDL/be/be_union_branch.cpp:
        * TAO_IDL/be/be_visitor_sequence/any_op_ch.cpp:
        * TAO_IDL/be/be_visitor_sequence/cdr_op_ch.cpp:
        * TAO_IDL/be/be_visitor_sequence/serializer_op_ch.cpp:
        * TAO_IDL/be/be_visitor_sequence/sequence_base.cpp:
        * TAO_IDL/be/be_visitor_sequence/sequence_ch.cpp:
        * TAO_IDL/be/be_visitor_sequence/any_op_cs.cpp:
        * TAO_IDL/be/be_visitor_sequence/buffer_type.cpp:
        * TAO_IDL/be/be_visitor_sequence/cdr_op_cs.cpp:
        * TAO_IDL/be/be_visitor_sequence/serializer_op_cs.cpp:
        * TAO_IDL/be/be_visitor_sequence/sequence_cs.cpp:
        * TAO_IDL/be/be_visitor_union.cpp:
        * TAO_IDL/be/be_valuetype_fwd.cpp:
        * TAO_IDL/be/be_visitor_ami_pre_proc.cpp:
        * TAO_IDL/be/be_visitor_interface_fwd.cpp:
        * TAO_IDL/be/be_visitor_root/root_ci.cpp:
        * TAO_IDL/be/be_visitor_root/root_sth.cpp:
        * TAO_IDL/be/be_visitor_root/root_exs.cpp:
        * TAO_IDL/be/be_visitor_root/root_ih.cpp:
        * TAO_IDL/be/be_visitor_root/root_svh.cpp:
        * TAO_IDL/be/be_visitor_root/cdr_op.cpp:
        * TAO_IDL/be/be_visitor_root/serializer_op.cpp:
        * TAO_IDL/be/be_visitor_root/root_ex_idl.cpp:
        * TAO_IDL/be/be_visitor_root/root_cs.cpp:
        * TAO_IDL/be/be_visitor_root/root_sh.cpp:
        * TAO_IDL/be/be_visitor_root/root_svs.cpp:
        * TAO_IDL/be/be_visitor_root/root_is.cpp:
        * TAO_IDL/be/be_visitor_root/root_si.cpp:
        * TAO_IDL/be/be_visitor_root/root.cpp:
        * TAO_IDL/be/be_visitor_root/any_op.cpp:
        * TAO_IDL/be/be_visitor_root/root_exh.cpp:
        * TAO_IDL/be/be_visitor_root/root_ss.cpp:
        * TAO_IDL/be/be_visitor_root/root_ch.cpp:
        * TAO_IDL/be/be_type.cpp:
        * TAO_IDL/be/be_visitor_valuebox/any_op_ch.cpp:
        * TAO_IDL/be/be_visitor_valuebox/valuebox_ch.cpp:
        * TAO_IDL/be/be_visitor_valuebox/cdr_op_ch.cpp:
        * TAO_IDL/be/be_visitor_valuebox/valuebox_ci.cpp:
        * TAO_IDL/be/be_visitor_valuebox/valuebox.cpp:
        * TAO_IDL/be/be_visitor_valuebox/any_op_cs.cpp:
        * TAO_IDL/be/be_visitor_valuebox/valuebox_cs.cpp:
        * TAO_IDL/be/be_visitor_valuebox/cdr_op_cs.cpp:
        * TAO_IDL/be/be_visitor_valuebox/field_ch.cpp:
        * TAO_IDL/be/be_visitor_enum.cpp:
        * TAO_IDL/be/be_home.cpp:
        * TAO_IDL/be/be_visitor_template_export.cpp:
        * TAO_IDL/be/be_visitor_component_fwd/any_op_ch.cpp:
        * TAO_IDL/be/be_visitor_component_fwd/cdr_op_ch.cpp:
        * TAO_IDL/be/be_visitor_component_fwd/component_fwd_ch.cpp:
        * TAO_IDL/be/be_visitor_valuetype/valuetype_obv_ch.cpp:
        * TAO_IDL/be/be_visitor_valuetype/field_ci.cpp:
        * TAO_IDL/be/be_visitor_valuetype/valuetype_obv_ci.cpp:
        * TAO_IDL/be/be_visitor_valuetype/any_op_ch.cpp:
        * TAO_IDL/be/be_visitor_valuetype/valuetype_init_arglist_ch.cpp:
        * TAO_IDL/be/be_visitor_valuetype/field_cdr_cs.cpp:
        * TAO_IDL/be/be_visitor_valuetype/marshal_ch.cpp:
        * TAO_IDL/be/be_visitor_valuetype/valuetype_cs.cpp:
        * TAO_IDL/be/be_visitor_valuetype/arglist.cpp:
        * TAO_IDL/be/be_visitor_valuetype/ami_exception_holder_cs.cpp:
        * TAO_IDL/be/be_visitor_valuetype/valuetype_sh.cpp:
        * TAO_IDL/be/be_visitor_valuetype/field_cs.cpp:
        * TAO_IDL/be/be_visitor_valuetype/valuetype_si.cpp:
        * TAO_IDL/be/be_visitor_valuetype/valuetype_obv_cs.cpp:
        * TAO_IDL/be/be_visitor_valuetype/any_op_cs.cpp:
        * TAO_IDL/be/be_visitor_valuetype/marshal_cs.cpp:
        * TAO_IDL/be/be_visitor_valuetype/valuetype_init_ci.cpp:
        * TAO_IDL/be/be_visitor_valuetype/cdr_op_ch.cpp:
        * TAO_IDL/be/be_visitor_valuetype/valuetype_ss.cpp:
        * TAO_IDL/be/be_visitor_valuetype/field_cdr_ch.cpp:
        * TAO_IDL/be/be_visitor_valuetype/valuetype_init_cs.cpp:
        * TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:
        * TAO_IDL/be/be_visitor_valuetype/valuetype_ci.cpp:
        * TAO_IDL/be/be_visitor_valuetype/obv_module.cpp:
        * TAO_IDL/be/be_visitor_valuetype/cdr_op_cs.cpp:
        * TAO_IDL/be/be_visitor_valuetype/ami_exception_holder_ch.cpp:
        * TAO_IDL/be/be_visitor_valuetype/field_ch.cpp:
        * TAO_IDL/be/be_helper.cpp:
        * TAO_IDL/be/be_valuebox.cpp:
        * TAO_IDL/be/be_visitor_union_fwd/union_fwd_ch.cpp:
        * TAO_IDL/be/be_visitor_valuetype_fwd.cpp:
        * TAO_IDL/be/be_visitor_structure_fwd/structure_fwd_ch.cpp:
        * TAO_IDL/be/be_component.cpp:
        * TAO_IDL/be/be_visitor_exception.cpp:
        * TAO_IDL/be/be_visitor_typedef.cpp:
        * TAO_IDL/be/be_visitor_union_branch.cpp:
        * TAO_IDL/be/be_visitor_typecode.cpp:
        * TAO_IDL/be/be_visitor_argument.cpp:
        * TAO_IDL/be/be_component_fwd.cpp:
        * TAO_IDL/be/be_visitor_union_branch/cdr_op_ch.cpp:
        * TAO_IDL/be/be_visitor_union_branch/serializer_op_ch.cpp:
        * TAO_IDL/be/be_visitor_union_branch/public_cs.cpp:
        * TAO_IDL/be/be_visitor_union_branch/private_ch.cpp:
        * TAO_IDL/be/be_visitor_union_branch/public_reset_cs.cpp:
        * TAO_IDL/be/be_visitor_union_branch/public_assign_cs.cpp:
        * TAO_IDL/be/be_visitor_union_branch/public_ch.cpp:
        * TAO_IDL/be/be_visitor_union_branch/public_constructor_cs.cpp:
        * TAO_IDL/be/be_visitor_union_branch/public_ci.cpp:
        * TAO_IDL/be/be_visitor_union_branch/cdr_op_cs.cpp:
        * TAO_IDL/be/be_visitor_union_branch/serializer_op_cs.cpp:
        * TAO_IDL/be/be_visitor_home.cpp:
        * TAO_IDL/be/be_visitor_constant.cpp:
        * TAO_IDL/be/be_visitor_amh_pre_proc.cpp:
        * TAO_IDL/be/be_interface_strategy.cpp:
        * TAO_IDL/be/be_operation_strategy.cpp:
        * TAO_IDL/be/be_field.cpp:
        * TAO_IDL/be/be_visitor_native/native_ch.cpp:
        * TAO_IDL/be/be_module.cpp:
        * TAO_IDL/be/be_visitor_sequence.cpp:
        * TAO_IDL/be/be_visitor_constant/constant_cs.cpp:
        * TAO_IDL/be/be_visitor_constant/constant_ch.cpp:
        * TAO_IDL/be/be_structure_fwd.cpp:
        * TAO_IDL/be/be_visitor_component/component_ch.cpp:
        * TAO_IDL/be/be_visitor_component/component_ci.cpp:
        * TAO_IDL/be/be_visitor_component/cdr_op_ch.cpp:
        * TAO_IDL/be/be_visitor_component/component_ih.cpp:
        * TAO_IDL/be/be_visitor_component/component_cs.cpp:
        * TAO_IDL/be/be_visitor_component/cdr_op_cs.cpp:
        * TAO_IDL/be/be_visitor_component/component_sh.cpp:
        * TAO_IDL/be/be_visitor_component/component_is.cpp:
        * TAO_IDL/be/be_visitor_component/component_si.cpp:
        * TAO_IDL/be/be_visitor_component/any_op_ch.cpp:
        * TAO_IDL/be/be_visitor_component/component.cpp:
        * TAO_IDL/be/be_visitor_component/component_ss.cpp:
        * TAO_IDL/be/be_visitor_component/any_op_cs.cpp:
        * TAO_IDL/be/be_predefined_type.cpp:
        * TAO_IDL/be/be_visitor_array/array.cpp:
        * TAO_IDL/be/be_visitor_array/any_op_ch.cpp:
        * TAO_IDL/be/be_visitor_array/cdr_op_ch.cpp:
        * TAO_IDL/be/be_visitor_array/serializer_op_ch.cpp:
        * TAO_IDL/be/be_visitor_array/array_cs.cpp:
        * TAO_IDL/be/be_visitor_array/array_ci.cpp:
        * TAO_IDL/be/be_visitor_array/any_op_cs.cpp:
        * TAO_IDL/be/be_visitor_array/cdr_op_cs.cpp:
        * TAO_IDL/be/be_visitor_array/serializer_op_cs.cpp:
        * TAO_IDL/be/be_visitor_component_fwd.cpp:
        * TAO_IDL/be/be_argument.cpp:
        * TAO_IDL/be/be_visitor_module/module_ch.cpp:
        * TAO_IDL/be/be_visitor_module/module_sh.cpp:
        * TAO_IDL/be/be_visitor_module/any_op.cpp:
        * TAO_IDL/be/be_visitor_module/module.cpp:
        * TAO_IDL/be/be_visitor_module/module_ih.cpp:
        * TAO_IDL/be/be_visitor_module/cdr_op.cpp:
        * TAO_IDL/be/be_visitor_module/serializer_op.cpp:
        * TAO_IDL/be/be_visitor_decl.cpp:
        * TAO_IDL/be/be_visitor_union/discriminant_ch.cpp:
        * TAO_IDL/be/be_visitor_union/any_op_ch.cpp:
        * TAO_IDL/be/be_visitor_union/discriminant_ci.cpp:
        * TAO_IDL/be/be_visitor_union/cdr_op_ch.cpp:
        * TAO_IDL/be/be_visitor_union/serializer_op_ch.cpp:
        * TAO_IDL/be/be_visitor_union/union_ch.cpp:
        * TAO_IDL/be/be_visitor_union/union_ci.cpp:
        * TAO_IDL/be/be_visitor_union/union.cpp:
        * TAO_IDL/be/be_visitor_union/discriminant_cs.cpp:
        * TAO_IDL/be/be_visitor_union/any_op_cs.cpp:
        * TAO_IDL/be/be_visitor_union/serializer_op_cs.cpp:
        * TAO_IDL/be/be_visitor_union/union_cs.cpp:
        * TAO_IDL/be/be_constant.cpp:
        * TAO_IDL/be/be_visitor_valuetype.cpp:
        * TAO_IDL/be/be_exception.cpp:
        * TAO_IDL/be/be_visitor_structure/any_op_ch.cpp:
        * TAO_IDL/be/be_visitor_structure/cdr_op_ch.cpp:
        * TAO_IDL/be/be_visitor_structure/structure.cpp:
        * TAO_IDL/be/be_visitor_structure/serializer_op_ch.cpp:
        * TAO_IDL/be/be_visitor_structure/structure_cs.cpp:
        * TAO_IDL/be/be_visitor_structure/any_op_cs.cpp:
        * TAO_IDL/be/be_visitor_structure/structure_ch.cpp:
        * TAO_IDL/be/be_visitor_structure/structure_ci.cpp:
        * TAO_IDL/be/be_visitor_structure/serializer_op_cs.cpp:
        * TAO_IDL/be/be_visitor_interface_fwd/any_op_ch.cpp:
        * TAO_IDL/be/be_visitor_interface_fwd/cdr_op_ch.cpp:
        * TAO_IDL/be/be_visitor_interface_fwd/interface_fwd_ch.cpp:
        * TAO_IDL/be/be_global.cpp:
        * TAO_IDL/be/be_null_return_emitter.cpp:
        * TAO_IDL/be/be_visitor_enum/enum_ch.cpp:
        * TAO_IDL/be/be_visitor_enum/any_op_ch.cpp:
        * TAO_IDL/be/be_visitor_enum/cdr_op_ch.cpp:
        * TAO_IDL/be/be_visitor_enum/serializer_op_ch.cpp:
        * TAO_IDL/be/be_visitor_enum/enum_cs.cpp:
        * TAO_IDL/be/be_visitor_enum/any_op_cs.cpp:
        * TAO_IDL/be/be_visitor_enum/cdr_op_cs.cpp:
        * TAO_IDL/be/be_visitor_enum/serializer_op_cs.cpp:
        * TAO_IDL/be/be_visitor_context.cpp:
        * TAO_IDL/be/be_visitor_union_fwd.cpp:
        * TAO_IDL/be/be_visitor_structure_fwd.cpp:
        * TAO_IDL/be/be_visitor_field/field_ci.cpp:
        * TAO_IDL/be/be_visitor_field/cdr_op_ch.cpp:
        * TAO_IDL/be/be_visitor_field/serializer_op_ch.cpp:
        * TAO_IDL/be/be_visitor_field/field_cs.cpp:
        * TAO_IDL/be/be_visitor_field/cdr_op_cs.cpp:
        * TAO_IDL/be/be_visitor_field/serializer_op_cs.cpp:
        * TAO_IDL/be/be_visitor_field/field_ch.cpp:
        * TAO_IDL/be/be_root.cpp:
        * TAO_IDL/be/be_interface.cpp:
        * TAO_IDL/be/be_enum.cpp:
        * TAO_IDL/be/be_string.cpp:
        * TAO_IDL/be/be_visitor_valuetype_fwd/any_op_ch.cpp:
        * TAO_IDL/be/be_visitor_valuetype_fwd/cdr_op_ch.cpp:
        * TAO_IDL/be/be_visitor_valuetype_fwd/cdr_op_ci.cpp:
        * TAO_IDL/be/be_visitor_valuetype_fwd/valuetype_fwd_ch.cpp:
        * TAO_IDL/be/be_array.cpp:
        * TAO_IDL/be/be_visitor_traits.cpp:
        * TAO_IDL/be/be_visitor_factory.cpp:
        * TAO_IDL/be/be_native.cpp:
        * TAO_IDL/be/be_generator.cpp:
        * TAO_IDL/ast/ast_union_fwd.cpp:
        * TAO_IDL/ast/ast_structure_fwd.cpp:
        * TAO_IDL/ast/ast_concrete_type.cpp:
        * TAO_IDL/ast/ast_predefined_type.cpp:
        * TAO_IDL/ast/ast_enum_val.cpp:
        * TAO_IDL/ast/ast_recursive.cpp:
        * TAO_IDL/ast/ast_valuetype_fwd.cpp:
        * TAO_IDL/ast/ast_root.cpp:
        * TAO_IDL/ast/ast_eventtype_fwd.cpp:
        * TAO_IDL/ast/ast_valuebox.cpp:
        * TAO_IDL/ast/ast_redef.cpp:
        * TAO_IDL/ast/ast_union_label.cpp:
        * TAO_IDL/ast/ast_interface_fwd.cpp:
        * TAO_IDL/ast/ast_component_fwd.cpp:
        * TAO_IDL/ast/ast_enum.cpp:
        * TAO_IDL/ast/ast_string.cpp:
        * TAO_IDL/ast/ast_check.cpp:
        * TAO_IDL/ast/ast_type.cpp:
        * TAO_IDL/ast/ast_native.cpp:
        * TAO_IDL/be_include/be_visitor_context.h:
        * TAO_IDL/fe/fe_global.cpp:
        * TAO_IDL/fe/fe_init.cpp:
        * TAO_IDL/fe/fe_extern.cpp:
        * TAO_IDL/fe/fe_private.cpp:
        * TAO_IDL/driver/drv_mcpp_preproc.cpp:
        * TAO_IDL/driver/drv_preproc.cpp:
        * TAO_IDL/narrow/narrow.cpp:
        * TAO_IDL/util/utl_identifier.cpp:
        * TAO_IDL/util/utl_tmpl/utl_exprlist.cpp:
        * TAO_IDL/util/utl_tmpl/utl_list.cpp:
        * TAO_IDL/util/utl_tmpl/utl_namelist.cpp:
        * TAO_IDL/util/utl_tmpl/utl_decllist.cpp:
        * TAO_IDL/util/utl_tmpl/utl_exceptlist.cpp:
        * TAO_IDL/util/utl_tmpl/utl_strlist.cpp:
        * TAO_IDL/util/utl_tmpl/utl_idlist.cpp:
        * TAO_IDL/util/utl_decllist.cpp:
        * TAO_IDL/util/utl_strlist.cpp:
        * TAO_IDL/util/utl_stack.cpp:
        * TAO_IDL/util/utl_string.cpp:

          Removed many unused methods from class be_visitor_context,
          and bits of unused code from many other files.

        Thu Jan 28 15:56:11 UTC 2010  Jeff Parsons <j.parsons@vanderbilt.edu>

        * TAO_IDL/be/be_visitor_home/home_svs.cpp:
        * TAO_IDL/be/be_visitor_home/home_svh.cpp:

          Added code generation for method overrides that appear as pure
          virtual in the skeleton base class when the home has
          a primary key. These methods throw CORBA::NO_IMPLEMENT,
          since primary keys are not supported in CIAO.

Wed Feb  3 15:23:16 UTC 2010  Abdul Sowayan  <sowayan@gmail.com>

        * orbsvcs/tests/AVStreams/Full_Profile/run_test.pl:
        * orbsvcs/tests/AVStreams/Pluggable/run_test.pl:
        * orbsvcs/tests/AVStreams/Simple_Two_Stage/run_test.pl:
        * orbsvcs/tests/AVStreams/Simple_Two_Stage_With_QoS/run_test.pl:

          Increase sleep out time to allow these tests to pass on the
          iPhone Simulator.

Wed Feb  3 09:52:47 UTC 2010  Vladimir Zykov  <vladimir.zykov@prismtech.com>

        * tests/IDL_Test/IDL_Test.mpc:
        * tests/IDL_Test/Bug_3819_Regression.idl:
          Added a test for bug#3819.

Tue Feb  2 11:07:14 UTC 2010  Vladimir Zykov  <vladimir.zykov@prismtech.com>

        * tests/Bug_1361_Regression/server.cpp:
        * tests/Bug_1361_Regression/shutdown.cpp:
        * tests/Bug_1361_Regression/client.cpp:
        * tests/Bug_1361_Regression/Echo.cpp:
        * tests/Bug_1361_Regression/Bug_1361_Regression.mpc:
          Simplified the test. It used libTAO_Messaging without any
          need for it.

        * orbsvcs/orbsvcs/PortableGroup/PG_Property_Set_Find.h:
        * tao/AnyTypeCode/Any_Array_Impl_T.cpp:
        * tao/AnyTypeCode/Objref_TypeCode.cpp:
        * tao/PortableServer/Any_SArg_Traits.h:
        * tao/PortableServer/get_arg.h:
        * tao/PI_Server/Policy_Creator_T.h:
        * tao/Load_Protocol_Factory_T.h:
        * tao/TransportCurrent/IIOP_Current_Impl.h:
        * tao/Valuetype/Valuetype_Traits_Base_T.h:
          Added required include.

        * orbsvcs/orbsvcs/PortableGroup/UIPMC_Transport.h:
        * tao/TransportCurrent/Current_ORBInitializer.h:
          Removed unnecessary for templates export directive.

        * tao/ImR_Client/ServerObject.pidl:
        * tao/ImR_Client/ImplRepo.pidl:
        * tao/AnyTypeCode/BasicTypeTraits.h:
        * tao/IORTable/IORTable.pidl:
        * tao/Object_Key.pidl:
        * tao/TransportCurrent/Transport_Current.h:
        * tao/TransportCurrent/IIOP_Transport_Current.h:
          Added inclusion guards.

        * tao/AnyTypeCode/Union_TypeCode.h:
          Added necessary forward declaration.

        * tao/PortableServer/Direct_Collocation_Upcall_Wrapper.h:
        * tao/PortableServer/Upcall_Command.h:
        * tao/PortableServer/Upcall_Wrapper.h:
        * tao/Object_Reference_Traits_T.h:
        * tao/String_Traits_T.h:
        * tao/Value_Traits_T.h:
        * tao/Array_Traits_T.h:
        * tao/Utils/Servant_Var.inl:
        * tao/Valuetype/Valuetype_Traits_T.h:
          Changed 'ifndef ACE_LACKS_PRAGMA_ONCE' to
          'if !defined (ACE_LACKS_PRAGMA_ONCE)'. So that ifndef is only used
          for inclusion guards in TAO.

        * tao/Transport.cpp:
          Changed 0 to false for boolean type.

        * tao/RTScheduling/ThreadAction.h:
          Fixed code that didn't compile.

Mon Feb  1 19:27:43 UTC 2010  Johnny Willemsen  <jwillemsen@remedy.nl>

        * orbsvcs/orbsvcs/Notify/QoSProperties.h
        * orbsvcs/orbsvcs/Notify/Topology_Saver.h
        * orbsvcs/orbsvcs/Time_Utilities.h
        * orbsvcs/orbsvcs/Time_Utilities.inl
          Doxygen fixes

Sun Jan 31 01:04:43 CST 2010  Johnny Willemsen  <jwillemsen@remedy.nl>

        * TAO version 1.7.6 released.

Thu Jan 28 12:56:31 UTC 2010  Abdul Sowayan  <sowayan@gmail.com>

        * NEWS:

          ACE/TAO now supports the new iPad ;-).

Thu Jan 28 07:54:30 UTC 2010  Johnny Willemsen  <jwillemsen@remedy.nl>

        Merged revision 88742-88757 from idl3_plus_backend2 to svn head. This
        gives us templated modules for the small parts we need for dds4ccm

        Wed Jan 27 22:19:17 UTC 2010  Jeff Parsons <j.parsons@vanderbilt.edu>

        * TAO_IDL/be/be_decl.cpp:
        * TAO_IDL/be/be_visitor_component/facet_exs.cpp:
        * TAO_IDL/be/be_visitor_component/facet_exh.cpp:
        * TAO_IDL/be_include/be_decl.h:

          Added check to ensure that a facet interface gets generated
          only once in the executor header and source files. This fix
          closes [BUGID:3817]. Thanks to Abdul Sowayan <sowayan@gmail.com>
          for reporting the bug.

        * TAO_IDL/fe/y.tab.cpp:
        * TAO_IDL/fe/idl.yy:

          Cosmetic changes.

        Wed Jan 27 20:08:48 UTC 2010  Jeff Parsons <j.parsons@vanderbilt.edu>

        * TAO_IDL/include/ast_union.h:
        * TAO_IDL/include/ast_visitor_tmpl_module_inst.h:
        * TAO_IDL/include/utl_labellist.h:
        * TAO_IDL/include/ast_union_branch.h:
        * TAO_IDL/include/utl_scope.h:
        * TAO_IDL/be/be_union_label.cpp:
        * TAO_IDL/ast/ast_visitor_tmpl_module_ref.cpp:
        * TAO_IDL/ast/ast_visitor_tmpl_module_inst.cpp:
        * TAO_IDL/ast/ast_visitor_reifying.cpp:
        * TAO_IDL/ast/ast_enum.cpp:
        * TAO_IDL/ast/ast_union_branch.cpp:
        * TAO_IDL/util/utl_labellist.cpp:
        * TAO_IDL/util/utl_exceptlist.cpp:
        * TAO_IDL/util/utl_idlist.cpp:
        * TAO_IDL/util/utl_scope.cpp:

          Added support for unions and enums in the scope of a
          template module.

Wed Jan 27 22:55:24 UTC 2010  Adam Mitz  <mitza@ociweb.com>

        * TAO_IDL/util/utl_global.cpp(add_dcps_data_type):

          Now that lookup_by_name_local() has been re-written in
          Tue Jan 26 20:21:30 UTC 2010  Jeff Parsons <j.parsons@vanderbilt.edu>
          on the idl3_plus_backend2 branch which was merged in
          Wed Jan 27 14:19:30 UTC 2010  Johnny Willemsen  <jwillemsen@remedy.nl>
          it doesn't add an extra space at the end of the name.  Changed
          add_dcps_data_type() to account for this.

Wed Jan 27 14:29:30 UTC 2010  Johnny Willemsen  <jwillemsen@remedy.nl>

        * TAO_IDL/Makefile.am:
          Regenerated

Wed Jan 27 14:19:30 UTC 2010  Johnny Willemsen  <jwillemsen@remedy.nl>

        Merged revision 88605-88741 from idl3_plus_backend2 to svn head. This
        gives us templated modules for the small parts we need for dds4ccm

        Tue Jan 26 20:21:30 UTC 2010  Jeff Parsons <j.parsons@vanderbilt.edu>

        * TAO_IDL/include/ast_visitor_tmpl_module_ref.h:
        * TAO_IDL/ast/ast_visitor_tmpl_module_ref.cpp:

          New files, defining a new visitor specialized to
          create implied IDL related to template module
          references as soon as they're parsed, rather than waiting
          until template module instantiation time. The
          template module instantiation visitor then copies
          this implied IDL into its scope of instantiation.
          The extra copy of the implied IDL nodes is justified
          by the simplification of lookups involving a reference
          to the instantiation of a template module reference.

          This new visitor inherits from the template module
          instantiation visitor, and overrides one method,
          visit_template_module_ref(). The other are reused
          as is.

        * TAO_IDL/ast/ast_visitor_tmpl_module_inst.cpp:
        * TAO_IDL/include/ast_visitor_tmpl_module_inst.h:

          Changed the method overridden by the new visitor
          above to a no-op, since the new visitor now handles
          template module references.

        * TAO_IDL/fe/y.tab.cpp:
        * TAO_IDL/fe/idl.yy:

          Added code to launch the new visitor immediately after
          a template module reference is parsed and created.

        * TAO_IDL/fe/lex.yy.cpp:
        * TAO_IDL/fe/idl.ll:

          Fixed a bug that apparently just cropped up in the
          "version" block of idl_store_pragma.

        * TAO_IDL/util/utl_scope.cpp(lookup_by_name_local):

          Now checks for a match with a template module reference,
          and skips it, matching instead with the corresoponding
          regular module created immediately after it in the scope.

        Mon Jan 25 22:39:39 UTC 2010  Jeff Parsons <j.parsons@vanderbilt.edu>

        * TAO_IDL/include/fe_home_header.h:

          Cosmetic changes.

        * TAO_IDL/include/ast_visitor_reifying.h:
        * TAO_IDL/include/ast_connector.h:
        * TAO_IDL/include/ast_consumes.h:
        * TAO_IDL/include/ast_publishes.h:
        * TAO_IDL/include/ast_emits.h:
        * TAO_IDL/ast/ast_consumes.cpp:
        * TAO_IDL/ast/ast_visitor_tmpl_module_inst.cpp:
        * TAO_IDL/ast/ast_publishes.cpp:
        * TAO_IDL/ast/ast_emits.cpp:
        * TAO_IDL/ast/ast_visitor_reifying.cpp:

          Added support for components, homes, connectors,
          porttypes, simple/extended ports and mirror
          ports and aliases in an instantiated template
          module.

        * TAO_IDL/util/utl_global.cpp(string_to_scoped_name):

          Completely rewrote the method using ACE_CString.

        Fri Jan 22 19:42:38 UTC 2010  Jeff Parsons  <j.parsons@vanderbilt.edu>

        * TAO_IDL/be/be_template_module.cpp:

        * TAO_IDL/fe/idl.ll:
        * TAO_IDL/fe/idl.yy:
        * TAO_IDL/fe/lex.yy.cpp:
        * TAO_IDL/fe/y.tab.h:
        * TAO_IDL/fe/y.tab.cpp:

        * TAO_IDL/fe/fe_event_header.cpp:

        * TAO_IDL/include/fe_event_header.h:

          Removed these files.

        Fri Jan 22 18:26:17 UTC 2010  Jeff Parsons <j.parsons@vanderbilt.edu>

        * TAO_IDL/be/be_visitor_tmpl_module_inst.cpp:
        * TAO_IDL/be/be_visitor_reifying.cpp:
        * TAO_IDL/be_include/be_visitor_reifying.h:
        * TAO_IDL/be_include/be_visitor_tmpl_module_inst.h:

          Removed these files, the visitors have been moved
          to the front end.

        * TAO_IDL/include/ast_visitor_tmpl_module_inst.h:
        * TAO_IDL/ast/ast_visitor_tmpl_module_inst.cpp:

          Added some missing no-op visit_* methods.

        * TAO_IDL/fe/y.tab.cpp:
        * TAO_IDL/fe/idl.yy:

          Added spawn of template instantiation visitor.

        * TAO_IDL/fe/fe_interface_header.cpp:

          Removed recently added debugging output.

        Thu Jan 21 20:20:47 UTC 2010  Jeff Parsons <j.parsons@vanderbilt.edu>

        * TAO_IDL/include/ast_visitor_reifying.h:
        * TAO_IDL/include/ast_visitor_tmpl_module_inst.h:
        * TAO_IDL/include/ast_visitor_context.h:
        * TAO_IDL/ast/ast_visitor_tmpl_module_inst.cpp:
        * TAO_IDL/ast/ast_visitor_reifying.cpp:
        * TAO_IDL/ast/ast_visitor_context.cpp:

          Moved the visitors that create implied IDL upon
          template module instantiation to the front end,
          along with a piece of the visitor context class
          that becomes a base class for the backend visitor
          context class. This move is motivated by the fact
          that generation of executor IDL turns this implied
          IDL into explicit IDL, so in order to parse the
          executor IDL file, this implied IDL must be added
          to the AST in the front end.

          The corresponding backend visitor classes will be
          removed after further testing.

        * TAO_IDL/include/ast_factory.h:
        * TAO_IDL/include/ast_operation.h:
        * TAO_IDL/be/be_factory.cpp:
        * TAO_IDL/be/be_visitor_scope.cpp:
        * TAO_IDL/be/be_visitor_interface/interface_ex_idl.cpp:
        * TAO_IDL/be/be_visitor_module.cpp:
        * TAO_IDL/be/be_produce.cpp:
        * TAO_IDL/be/be_visitor_context.cpp:
        * TAO_IDL/be/be_visitor.cpp:
        * TAO_IDL/be/be_operation.cpp:
        * TAO_IDL/be/be_scope.cpp:
        * TAO_IDL/be/be_generator.cpp:
        * TAO_IDL/ast/ast_visitor.cpp:
        * TAO_IDL/ast/ast_operation.cpp:
        * TAO_IDL/ast/ast_generator.cpp:
        * TAO_IDL/ast/ast_factory.cpp:
        * TAO_IDL/be_include/be_operation.h:
        * TAO_IDL/be_include/be_visitor_context.h:
        * TAO_IDL/be_include/be_factory.h:
        * TAO_IDL/be_include/be_scope.h:
        * TAO_IDL/fe/fe_interface_header.cpp:
        * TAO_IDL/util/utl_scope.cpp:

          Other changes related to the above visitor move, plus
          some cosmetic changes. Spawning of the new visitors
          when a template module instantiation is seen is not
          added in this set of changes.

        Mon Jan 18 15:35:54 UTC 2010  Jeff Parsons <j.parsons@vanderbilt.edu>

        * TAO_IDL/be/be_visitor_valuebox/field_ci.cpp:
        * TAO_IDL//be_visitor_valuebox/union_member_ci.cpp:
        * TAO_IDL/be_include/be_visitor_valuebox/union_member_ci.h:
        * TAO_IDL/be_include/be_visitor_valuebox/field_ci.h:

          Removed parameter 'vb_node' from private methods
          emit_member_get() and emit_member_set(), since this value
          is now stored in a member variable.

Tue Jan 26 14:23:30 UTC 2010  Johnny Willemsen  <jwillemsen@remedy.nl>

        * orbsvcs/tests/ImplRepo/run_test.pl:
          Reverted back to the original times, the changes broke the regular
          running

Mon Jan 25 14:53:00 UTC 2010  Jeff Parsons <j.parsons@vanderbilt.edu>

        * NEWS:
          Updated file with my changes since the last release.

Fri Jan 22 12:34:30 UTC 2010  Johnny Willemsen  <jwillemsen@remedy.nl>

        * TAO_IDL/be/be_visitor_component/context_svh.cpp:
        * TAO_IDL/be/be_visitor_component/context_svs.cpp:
          Pass the ciao instance id through the constructor

Fri Jan 22 11:58:30 UTC 2010  Johnny Willemsen  <jwillemsen@remedy.nl>

        * TAO_IDL/be/be_visitor_component/context_svh.cpp:
        * TAO_IDL/be/be_visitor_component/context_svs.cpp:
        * TAO_IDL/be/be_visitor_component/servant_svh.cpp:
        * TAO_IDL/be/be_visitor_component/servant_svs.cpp:
          More tweaks for AMI4CCM

Fri Jan 22 10:14:30 UTC 2010  Johnny Willemsen  <jwillemsen@remedy.nl>

        * TAO_IDL/be/be_interface.cpp:
          Generate another ami4ccm interface

Thu Jan 21 08:00:30 UTC 2010  Johnny Willemsen  <jwillemsen@remedy.nl>

        * TAO_IDL/be/be_codegen.cpp:
        * TAO_IDL/fe/lex.yy.cpp:
        * TAO_IDL/include/idl_global.h:
        * TAO_IDL/util/utl_global.cpp:
          Added support for #pragma ciao lem "X". When a lem is generated
          than any X seen will be generated into the new lem file

Thu Jan 21 01:50:30 UTC 2010  Abdul Sowayan  <sowayan@gmail.com>

        * orbsvcs/tests/Bug_3215_Regression/client.cpp:

          Added "include "tao/PI/PI.h" to the file to allow
          this test to pass on the iPhone Simulator. The
          inclusion of PI.h is rquired for static builds.

Thu Jan 21 01:45:41 UTC 2010  Abdul Sowayan  <sowayan@gmail.com>

        * orbsvcs/tests/Bug_3216_Regression/client.cpp:

          Added "include "tao/PI/PI.h" to the file to allow
          this test to pass on the iPhone Simulator. The
          inclusion of PI.h is rquired for static builds.

Wed Jan 20 19:19:19 UTC 2010  Olli Savia  <ops@iki.fi>

        * orbsvcs/ImplRepo_Service/Activator_Options.cpp:
          Fixed compile warning.

Wed Jan 20 15:15:02 UTC 2010  Abdul Sowayan  <sowayan@gmail.com>

        * MPC/config/tao_idl_fe.mpb:
        * TAO_IDL/tao_idl_fe.mpc:
        * orbsvcs/IFR_Service/IFR_Service.mpc:

          Build the IFR_Service executable on cross-build platforms.
          This will allow more tests to pass on the iPhone Simulator.
          According to Johnny Willemsen, there is no reason not to build
          IFR_Service executable on cross-build platforms.

Wed Jan 20 09:09:19 UTC 2010  Johnny Willemsen  <jwillemsen@remedy.nl>

        * TAO_IDL/fe/lex.yy.cpp:
        * TAO_IDL/util/utl_global.cpp:
          Const changes

Tue Jan 19 14:56:19 UTC 2010  Johnny Willemsen  <jwillemsen@remedy.nl>

        * TAO_IDL/be/be_interface.cpp
        * TAO_IDL/be/be_visitor_component/context_ex_idl.cpp
        * TAO_IDL/be/be_visitor_component/context_svh.cpp
        * TAO_IDL/be/be_visitor_component/context_svs.cpp
        * TAO_IDL/be/be_visitor_component/servant_svh.cpp
        * TAO_IDL/be/be_visitor_component/servant_svs.cpp
          Generate the correct type for the AMI4CCM implied methods

Tue Jan 19 14:32:19 UTC 2010  Johnny Willemsen  <jwillemsen@remedy.nl>

        * TAO_IDL/be/be_produce.cpp:
          Don't call the ami4ccm preprocessor

Tue Jan 19 14:02:19 UTC 2010  Johnny Willemsen  <jwillemsen@remedy.nl>

        * TAO_IDL/be/be_visitor_component/context_ex_idl.cpp
        * TAO_IDL/be/be_visitor_component/context_svh.cpp
        * TAO_IDL/be/be_visitor_component/context_svs.cpp
        * TAO_IDL/be/be_visitor_component/servant_svs.cpp
          Const improvements and more AMI4CCM generation

Tue Jan 19 13:39:19 UTC 2010  Johnny Willemsen  <jwillemsen@remedy.nl>

        * TAO_IDL/be/be_visitor_ami4ccm_pre_proc.cpp:
        * TAO_IDL/be/be_visitor_component/context_svh.cpp:
        * TAO_IDL/be/be_visitor_component/context_svs.cpp:
        * TAO_IDL/be/be_visitor_component/servant_svh.cpp:
        * TAO_IDL/be/be_visitor_component/servant_svs.cpp:
          Generate additional methods for AMI4CCM

Tue Jan 19 13:00:19 UTC 2010  Johnny Willemsen  <jwillemsen@remedy.nl>

        * TAO_IDL/be/be_codegen.cpp:
        * TAO_IDL/be/be_interface.cpp:
        * TAO_IDL/be/be_visitor_ami4ccm_pre_proc.cpp:
        * TAO_IDL/be/be_visitor_component/context_ex_idl.cpp:
          Changed the generation for AMI4CCM, add the implied interfaces
          to the generated LEM file.

Tue Jan 19 11:33:19 UTC 2010  Johnny Willemsen  <jwillemsen@remedy.nl>

        * TAO_IDL/be/be_module.cpp:
          strip tailing white space

        * TAO_IDL/be/be_visitor_ami4ccm_pre_proc.cpp:
          Removed some debug lines

        * TAO_IDL/fe/fe_component_header.cpp:
        * TAO_IDL/fe/fe_interface_header.cpp:
        * TAO_IDL/fe/fe_obv_header.cpp:
          Initialise pointers to 0

        * TAO_IDL/util/utl_scope.cpp:
          Simplified some methods

Tue Jan 19 09:04:19 UTC 2010  Johnny Willemsen  <jwillemsen@remedy.nl>

        * TAO_IDL/be/be_interface.cpp:
          Generate correct base class

Tue Jan 19 08:44:19 UTC 2010  Johnny Willemsen  <jwillemsen@remedy.nl>

        * TAO_IDL/be/be_codegen.cpp:
          Simplification

        * TAO_IDL/be/be_interface.cpp:
          Generate implied AMI4CCM node

        * TAO_IDL/be/be_produce.cpp:
          Do CCM preprocessing after AMI4CCM

Tue Jan 19 07:25:19 UTC 2010  Johnny Willemsen  <jwillemsen@remedy.nl>

        * tests/IDL_Test/IDL_Test.mpc:
          Only generate the export file as part of one idl file

Tue Jan 19 07:18:19 UTC 2010  Johnny Willemsen  <jwillemsen@remedy.nl>

        * TAO_IDL/be/be_scope.cpp
        * TAO_IDL/be/be_template_module.cpp
          Fixed warnings

Tue Jan 19 04:00:00 UTC 2010  Abdul Sowayan  <sowayan@gmail.com>

        * orbsvcs/tests/Simple_Naming/run_test.pl:

          Added some sleep statements to allow this test to pass on the
          iPhone Simulator.

Tue Jan 19 03:50:44 UTC 2010  Abdul Sowayan  <sowayan@gmail.com>

        * orbsvcs/tests/ImplRepo/run_test.pl:

          Increase the sleep() value to allow this test to pass on the
          iPhone Simulator.

Tue Jan 19 03:43:50 UTC 2010  Abdul Sowayan  <sowayan@gmail.com>

        * orbsvcs/tests/CosEvent/Timeout/run_test.pl:

          Added some sleep statements to allow this test to pass on the
          iPhone Simulator.

Mon Jan 18 19:34:19 UTC 2010  Johnny Willemsen  <jwillemsen@remedy.nl>

        * TAO_IDL/be/be_visitor_valuebox/field_ci.cpp
        * TAO_IDL/be/be_visitor_valuebox/union_member_ci.cpp
        * TAO_IDL/be_include/be_visitor_valuebox/field_ci.h
        * TAO_IDL/be_include/be_visitor_valuebox/union_member_ci.h
          Merged revision 88580-88605 from idl3_plus_backend2 to svn head

Mon Jan 18 14:23:19 UTC 2010  Johnny Willemsen  <jwillemsen@remedy.nl>

        * TAO_IDL/be/be_uses.cpp:
          Layout change

        * TAO_IDL/be/be_visitor_root/root_ex_idl.cpp:
          Const change

Mon Jan 18 13:55:19 UTC 2010  Johnny Willemsen  <jwillemsen@remedy.nl>

        * TAO_IDL/be_include/be_operation_strategy.h:
          Fixed typo in comment

        * TAO_IDL/be/be_visitor_ami4ccm_pre_proc.cpp:
          Generate local interfaces

Mon Jan 18 13:16:19 UTC 2010  Johnny Willemsen  <jwillemsen@remedy.nl>

        * TAO_IDL/be/be_visitor_ami_pre_proc.cpp:
          Only one exit point in the method

Mon Jan 18 12:19:19 UTC 2010  Johnny Willemsen  <jwillemsen@remedy.nl>

        * TAO/be/be_attribute.cpp:
        * TAO/be_include/be_attribute.h:
          Added original_attribute member

        * TAO/be/be_operation.cpp:
        * TAO/be_include/be_operation.h:
          Added original_operation attribute member

Mon Jan 18 10:00:19 UTC 2010  Johnny Willemsen  <jwillemsen@remedy.nl>

        * tests/IDL_Test/IDL_Test.mpc:
          Put all stubs an skeleton in a DLL and added two projects to
          compile all TAO test idl files also with the RTI ddsgen tool
          when that is enabled. All idl files and generated code that
          cause warnings and/or errors are disabled and reported back
          to RTI.

Sun Jan 17 20:05:43 UTC 2010  Abdul Sowayan  <sowayan@gmail.com>

        * orbsvcs/tests/ImplRepo/run_test.pl:

          Increase the sleep() value to allow this test to pass on the
          iPhone Simulator.

Sun Jan 17 19:59:45 UTC 2010  Abdul Sowayan  <sowayan@gmail.com>

        * orbsvcs/tests/ImplRepo/scale/run_test.pl:

          Increase the sleep() value to allow this test to pass on the
          iPhone Simulator.

Sun Jan 17 19:50:33 UTC 2010  Abdul Sowayan  <sowayan@gmail.com>

        * orbsvcs/tests/ImplRepo/ReconnectServer/run_test.pl:

          Increase the sleep() value to allow this test to pass on the
          iPhone Simulator.

Sun Jan 17 19:42:25 UTC 2010  Abdul Sowayan  <sowayan@gmail.com>

        * orbsvcs/tests/Log/Basic_Log_Test/run_test.pl:

          Increase the sleep() value to allow this test to pass on the
          iPhone Simulator.

Sun Jan 17 19:15:16 UTC 2010  Abdul Sowayan  <sowayan@gmail.com>

        * orbsvcs/tests/Notify/performance-tests/RedGreen/run_test.pl:

          Added some sleep statements to allow this test to pass on the
          iPhone Simulator.

Sun Jan 17 19:00:25 UTC 2010  Abdul Sowayan  <sowayan@gmail.com>

        * orbsvcs/DevGuideExamples/EventServices/OMG_Basic/run_test.pl:

          Added some sleep statements to allow this test to pass on the
          iPhone Simulator.

Sun Jan 17 18:34:36 UTC 2010  Abdul Sowayan  <sowayan@gmail.com>

        * orbsvcs/tests/AVStreams/Asynch_Three_Stage/run_test.pl:

          Increase the sleep() value to allow this test to pass on the
          iPhone Simulator.

Sun Jan 17 18:31:07 UTC 2010  Abdul Sowayan  <sowayan@gmail.com>

        * orbsvcs/tests/AVStreams/Component_Switching/run_test.pl:

          Increase the sleep() value to allow this test to pass on the
          iPhone Simulator.

Sun Jan 17 17:38:48 UTC 2010  Abdul Sowayan  <sowayan@gmail.com>

        * orbsvcs/tests/AVStreams/Simple_Three_Stage/run_test.pl:

          Increase the sleep() value to allow this test to pass on the
          iPhone Simulator.

Sun Jan 17 01:09:57 UTC 2010  Abdul Sowayan  <sowayan@gmail.com>

        * TAO_IDL/be/be_visitor_reifying.cpp:

          Fixed fuzz error by ending a new empty line to the end of the file.

Sat Jan 16 23:58:21 UTC 2010  Abdul Sowayan  <sowayan@gmail.com>

        * orbsvcs/tests/ImplRepo/ReconnectServer/run_test.pl:

          Increase the sleep() value to allow this test to pass on the
          iPhone Simulator.

Sat Jan 16 23:14:41 UTC 2010  Abdul Sowayan  <sowayan@gmail.com>

        * examples/ior_corbaloc/run_test.pl:

          Increase the sleep() value to allow this test to pass on the
          iPhone Simulator.

Sat Jan 16 18:48:19 UTC 2010  Johnny Willemsen  <jwillemsen@remedy.nl>

          Merged revision 88565-88579 from idl3_plus_backend2 to svn head

        Fri Jan 15 20:31:51 UTC 2010  Jeff Parsons <j.parsons@vanderbilt.edu>

        * TAO_IDL/include/idl_global.h:
        * TAO_IDL/be/be_visitor_tmpl_module_inst.cpp:
        * TAO_IDL/be/be_visitor_context.cpp:
        * TAO_IDL/be/be_visitor_reifying.cpp:
        * TAO_IDL/be_include/be_visitor_context.h:
        * TAO_IDL/be_include/be_visitor_reifying.h:
        * TAO_IDL/util/utl_global.cpp:
        * TAO_IDL/util/utl_scope.cpp:

          - Removed the template module instantation
            scope storage in the visitor context, using
            instead the global scope stack for that
            purpose.

          - Modified reifying visitor to find and store
            a node already created in a template module
            instantiation, if the corresponding node is
            referenced in the template module.

        Fri Jan 15 15:31:56 UTC 2010  Jeff Parsons <j.parsons@vanderbilt.edu>

        * TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:

          Reverted a small change made yesterday where the
          generation of a double colon was prefixed to a name
          that is not global.

Fri Jan 15 13:25:19 UTC 2010  Johnny Willemsen  <jwillemsen@remedy.nl>

        * TAO_IDL/Makefile.am:
          Updated for all changes related to IDL3+

Fri Jan 15 11:21:19 UTC 2010  Johnny Willemsen  <jwillemsen@remedy.nl>

        * tests/IDL_Test/valuetype.idl:
          Extended this test to reproduce a problem with valuetypes and modules

Fri Jan 15 10:17:19 UTC 2010  Johnny Willemsen  <jwillemsen@remedy.nl>

          Merged revision 88537-88564 from idl3_plus_backend2 to svn head

        Thu Jan 14 22:50:03 UTC 2010  Jeff Parsons <j.parsons@vanderbilt.edu>

        * TAO_IDL/include/ast_module.h:
        * TAO_IDL/include/ast_factory.h:
        * TAO_IDL/include/global_extern.h:
        * TAO_IDL/include/fe_obv_header.h:
        * TAO_IDL/include/ast_operation.h:
        * TAO_IDL/be/be_visitor_tmpl_module_inst.cpp:
        * TAO_IDL/be/be_factory.cpp:
        * TAO_IDL/be/be_visitor_valuetype/valuetype_init_arglist_ch.cpp:
        * TAO_IDL/be/be_visitor_valuetype/valuetype_init.cpp:
        * TAO_IDL/be/be_visitor_valuetype/valuetype_init_ch.cpp:
        * TAO_IDL/be/be_visitor_valuetype/valuetype.cpp:
        * TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:
        * TAO_IDL/be/be_visitor_valuetype/field_ch.cpp:
        * TAO_IDL/be/be_visitor_reifying.cpp:
        * TAO_IDL/be/be_operation.cpp:
        * TAO_IDL/be/be_scope.cpp:
        * TAO_IDL/be/be_visitor_ccm_pre_proc.cpp:
        * TAO_IDL/ast/ast_operation.cpp:
        * TAO_IDL/ast/ast_module.cpp:
        * TAO_IDL/ast/ast_attribute.cpp:
        * TAO_IDL/ast/ast_factory.cpp:
        * TAO_IDL/be_include/be_operation.h:
        * TAO_IDL/be_include/be_visitor_reifying.h:
        * TAO_IDL/be_include/be_factory.h:
        * TAO_IDL/be_include/be_scope.h:
        * TAO_IDL/be_include/be_visitor_tmpl_module_inst.h:
        * TAO_IDL/fe/fe_event_header.cpp:
        * TAO_IDL/fe/y.tab.cpp:
        * TAO_IDL/fe/idl.yy:
        * TAO_IDL/util/utl_namelist.cpp:
          Added template instantiation code generation for
          valuetypes and eventtypes.

Fri Jan 15 09:59:19 UTC 2010  Johnny Willemsen  <jwillemsen@remedy.nl>

        * orbsvcs/IFR_Service/ifr_visitor.cpp:
        * orbsvcs/IFR_Service/ifr_visitor.h:
          Fixed compile errors because of tao_idl changes

Fri Jan 15 09:56:19 UTC 2010  Johnny Willemsen  <jwillemsen@remedy.nl>

        * tao/PortableServer/POA.pidl
        * tao/PortableServer/Root_POA.cpp
        * tao/PortableServer/Root_POA.h
        * tao/PortableServer/ServantRetentionStrategy.h
        * tao/PortableServer/ServantRetentionStrategyNonRetain.cpp
        * tao/PortableServer/ServantRetentionStrategyNonRetain.h
        * tao/PortableServer/ServantRetentionStrategyRetain.cpp
        * tao/PortableServer/ServantRetentionStrategyRetain.h
          Enable activate_object_with_id with CORBA/e micro. Thanks to
          Frank Pilhofer for reporting this and creating the patch

Thu Jan 14 12:27:19 UTC 2010  Johnny Willemsen  <jwillemsen@remedy.nl>

        * TAO_IDL/be/be_visitor_array/array_ch.cpp
        * TAO_IDL/be/be_visitor_reifying.cpp
        * TAO_IDL/be/be_visitor_tmpl_module_inst.cpp
        * TAO_IDL/be_include/be_visitor_reifying.h
          Fuzz fixes

Thu Jan 14 11:00:19 UTC 2010  Johnny Willemsen  <jwillemsen@remedy.nl>

        * TAO_IDL/be/be_visitor_tmpl_module_inst.cpp:
          Fixed crash

Thu Jan 14 10:39:19 UTC 2010  Johnny Willemsen  <jwillemsen@remedy.nl>

        Merged revision 88432-88536 from the idl3_plus_backend2 branch to
        svn head.

        Wed Jan 13 23:16:57 UTC 2010  Jeff Parsons <j.parsons@vanderbilt.edu>

        * TAO_IDL/be/be_visitor_tmpl_module_inst.cpp:
        * TAO_IDL/be/be_visitor_operation/arglist.cpp:
        * TAO_IDL/be/be_visitor_operation/exceptlist_cs.cpp:
        * TAO_IDL/be/be_visitor_reifying.cpp:
        * TAO_IDL/ast/ast_attribute.cpp:
        * TAO_IDL/ast/ast_argument.cpp:
        * TAO_IDL/be_include/be_visitor_reifying.h:
        * TAO_IDL/be_include/be_visitor_tmpl_module_inst.h:
        * TAO_IDL/util/utl_err.cpp:

          Added support for template instantiation of contained
          interfaces, operations, attributes, and the associated
          arguments and exception lists.

        Tue Jan 12 22:45:58 UTC 2010  Jeff Parsons <j.parsons@vanderbilt.edu>

        * TAO_IDL/include/utl_scope.h:

          Changed the fe_add_* methods from private to
          protected, so they can be called (polymorphically)
          by the template module instantiation preprocessing
          visitor through be_scope. Only fe_add_field()
          is used this way so far, but there may be occasion
          to expand the coverage.

        * TAO_IDL/be/be_visitor_tmpl_module_inst.cpp:
        * TAO_IDL/be/be_expression.cpp:
        * TAO_IDL/be/be_structure.cpp:
        * TAO_IDL/be/be_visitor_field.cpp:
        * TAO_IDL/be/be_visitor_context.cpp:
        * TAO_IDL/be/be_scope.cpp:
        * TAO_IDL/ast/ast_constant.cpp:
        * TAO_IDL/ast/ast_expression.cpp:
        * TAO_IDL/be_include/be_visitor_context.h:
        * TAO_IDL/be_include/be_structure.h:
        * TAO_IDL/be_include/be_scope.h:
        * TAO_IDL/be_include/be_visitor_tmpl_module_inst.h:

          Implemented visit_constant() and visit_structure()
          in the template module instantiation visitor.

        Fri Jan  8 22:37:35 UTC 2010  Jeff Parsons <j.parsons@vanderbilt.edu>

        * TAO_IDL/be/be_visitor_reifying.cpp:
        * TAO_IDL/be_include/be_visitor_reifying.h:

          New files containing a new visitor that
          handles the (possible) reification of
          template parameter references when they
          are replaced by template arguments. Also
          checks to see if areference lookup is in
          the scope of a template module. If so, a
          copy needs to be made in the current
          instantiation scope (see below).

        * TAO_IDL/include/ast_visitor.h:
        * TAO_IDL/be/be_visitor.cpp:
        * TAO_IDL/be_include/be_visitor.h:

          Added method visit_param_holder().

        * TAO_IDL/be/be_param_holder.cpp:
        * TAO_IDL/ast/ast_param_holder.cpp:

          Added call to new visit_* method in the
          accept() methods.

        * TAO_IDL/be/be_visitor_context.cpp:
        * TAO_IDL/be_include/be_visitor_context.h:

          Added new state storage, namely the scope in
          which the contents of an instantiated template
          module are to be created. It is now stored in
          the visitor context since both be_visitor_reifying
          and be_visitor_tmpl_module_inst need to know it.

        * TAO_IDL/be/be_visitor_tmpl_module_inst.cpp:
        * TAO_IDL/be_include/be_visitor_tmpl_module_inst.h:

          Moved some code to the visitor context, and some
          to the new reifying visitor (see above).

        * TAO_IDL/be/be_visitor_array.cpp:
        * TAO_IDL/be/be_visitor_array/array_ch.cpp:

          Cosmetic changes.

        Thu Jan  7 22:01:06 UTC 2010  Jeff Parsons <j.parsons@vanderbilt.edu>

        * TAO_IDL/be/be_module.cpp:

          Cosmetic changes.

        * TAO_IDL/be/be_visitor_tmpl_module_inst.cpp:
        * TAO_IDL/be_include/be_visitor_tmpl_module_inst.h:

          New files containing a new visitor dedicated to the
          generation of implied IDL in the AST resulting
          from a template module instantiation. This 'preprocessing'
          visitor will make a traversal before any of the others,
          so that CCM, AMI and AMH implied IDL can be generated
          from the contents of an instantiated module.

        Wed Jan  6 23:21:23 UTC 2010  Jeff Parsons <j.parsons@vanderbilt.edu>

        * TAO_IDL/include/ast_template_module.h:
        * TAO_IDL/include/ast_template_module_inst.h:
        * TAO_IDL/be/be_visitor_exception/exception_ctor.cpp:
        * TAO_IDL/be/be_visitor_typedef/typedef_ch.cpp:
        * TAO_IDL/be/be_visitor_scope.cpp:
        * TAO_IDL/be/be_visitor_interface/smart_proxy_ch.cpp:
        * TAO_IDL/be/be_visitor_interface/interface_svs.cpp:
        * TAO_IDL/be/be_visitor_operation/argument_marshal.cpp:
        * TAO_IDL/be/be_visitor_sequence/sequence_base.cpp:
        * TAO_IDL/be/be_visitor_sequence/sequence_ch.cpp:
        * TAO_IDL/be/be_visitor_sequence/buffer_type.cpp:
        * TAO_IDL/be/be_visitor_sequence/sequence_cs.cpp:
        * TAO_IDL/be/be_visitor_ami_pre_proc.cpp:
        * TAO_IDL/be/be_visitor_root/root_sth.cpp:
        * TAO_IDL/be/be_visitor_valuebox/field_ci.cpp:
        * TAO_IDL/be/be_visitor_valuebox/valuebox_ci.cpp:
        * TAO_IDL/be/be_visitor_valuebox/union_member_ci.cpp:
        * TAO_IDL/be/be_visitor_template_export.cpp:
        * TAO_IDL/be/be_visitor_valuetype/field_ci.cpp:
        * TAO_IDL/be/be_visitor_valuetype/field_cdr_cs.cpp:
        * TAO_IDL/be/be_visitor_valuetype/field_cs.cpp:
        * TAO_IDL/be/be_visitor_valuetype/valuetype_init_ch.cpp:
        * TAO_IDL/be/be_visitor_valuetype/valuetype.cpp:
        * TAO_IDL/be/be_visitor_valuetype/field_cdr_ch.cpp:
        * TAO_IDL/be/be_visitor_valuetype/field_ch.cpp:
        * TAO_IDL/be/be_visitor_union_branch/cdr_op_ch.cpp:
        * TAO_IDL/be/be_visitor_union_branch/serializer_op_ch.cpp:
        * TAO_IDL/be/be_visitor_union_branch/public_cs.cpp:
        * TAO_IDL/be/be_visitor_union_branch/private_ch.cpp:
        * TAO_IDL/be/be_visitor_union_branch/public_ch.cpp:
        * TAO_IDL/be/be_visitor_union_branch/cdr_op_cs.cpp:
        * TAO_IDL/be/be_visitor_union_branch/serializer_op_cs.cpp:
        * TAO_IDL/be/be_visitor_component/component_cs.cpp:
        * TAO_IDL/be/be_visitor_array/array.cpp:
        * TAO_IDL/be/be_visitor_array/cdr_op_ch.cpp:
        * TAO_IDL/be/be_visitor_array/serializer_op_ch.cpp:
        * TAO_IDL/be/be_visitor_array/array_cs.cpp:
        * TAO_IDL/be/be_visitor_array/array_ch.cpp:
        * TAO_IDL/be/be_visitor_array/array_ci.cpp:
        * TAO_IDL/be/be_visitor_array/cdr_op_cs.cpp:
        * TAO_IDL/be/be_visitor_array/serializer_op_cs.cpp:
        * TAO_IDL/be/be_produce.cpp:
        * TAO_IDL/be/be_visitor_context.cpp:
        * TAO_IDL/be/be_visitor_field/field_ci.cpp:
        * TAO_IDL/be/be_visitor_field/cdr_op_ch.cpp:
        * TAO_IDL/be/be_visitor_field/serializer_op_ch.cpp:
        * TAO_IDL/be/be_visitor_field/field_cs.cpp:
        * TAO_IDL/be/be_visitor_field/cdr_op_cs.cpp:
        * TAO_IDL/be/be_visitor_field/serializer_op_cs.cpp:
        * TAO_IDL/be/be_visitor_field/field_ch.cpp:
        * TAO_IDL/be/be_visitor_ccm_pre_proc.cpp:
        * TAO_IDL/be/be_template_module.cpp:
        * TAO_IDL/ast/ast_template_module.cpp:
        * TAO_IDL/ast/ast_template_module_inst.cpp:
        * TAO_IDL/be_include/be_visitor_context.h:
        * TAO_IDL/be_include/be_visitor_valuebox/union_member_ci.h:
        * TAO_IDL/be_include/be_visitor_valuebox/field_ci.h:
        * TAO_IDL/be_include/be_visitor_valuebox/valuebox_ci.h:
        * TAO_IDL/be_include/be_visitor_ccm_pre_proc.h:

          - Changed 'scope' member of class be_visitor_context to
            actually be a scope type, rather than a decl type as
            previously.

          - Added a new visitor and a separate pass for template module
            instantiation.

          - Added a few of the necessary visit_* methods to the
            new visitor.

        Tue Jan  5 23:22:24 UTC 2010  Jeff Parsons <j.parsons@vanderbilt.edu>

        * TAO_IDL/be/be_connector.cpp:
        * TAO_IDL/be/be_template_module_inst.cpp:
        * TAO_IDL/be/be_template_module_ref.cpp:
        * TAO_IDL/be/be_visitor_ccm_pre_proc.cpp:
        * TAO_IDL/be/be_template_module.cpp:
        * TAO_IDL/be_include/be_visitor_ccm_pre_proc.h:

          Uncommented code in accept() methods, started
          implementation of instantiated template module
          traversal in be_visitor_ccm_pre_proc, and
          cosmetic changes.

        Tue Jan  5 19:33:27 UTC 2010  Jeff Parsons <j.parsons@vanderbilt.edu>

        * TAO_IDL/ast/ast_template_module.cpp:
        * TAO_IDL/ast/ast_template_module_ref.cpp:
        * TAO_IDL/ast_template_module_inst.cpp:
          Uncommented code in ast_accept() methods.

Thu Jan 14 04:03:17 UTC 2010  Abdul Sowayan  <sowayan@gmail.com>

        * tests/Bug_3766_Regression/client.cpp:

          Removed:

          "CORBA::Object_var poa_object =
             orb->resolve_initial_references("RootPOA");"

          This is a client, it doesn't link the PortableServer library
          and does not use the RootPOA in the program.

          Trying to resolve the RootPOA is believed to cause the test to fail
          on the iPhone Simulator build.

Wed Jan 13 10:47:19 UTC 2010  Johnny Willemsen  <jwillemsen@remedy.nl>

        * TAO_IDL/be/be_visitor_ami4ccm_pre_proc.cpp:
        * TAO_IDL/be_include/be_visitor_ami4ccm_pre_proc.h:
          Bool changes

Wed Jan 13 10:24:19 UTC 2010  Johnny Willemsen  <jwillemsen@remedy.nl>

        * TAO_IDL/be/be_visitor_ami_pre_proc.cpp:
          Const change

        * TAO_IDL/be/be_visitor_ami4ccm_pre_proc.cpp:
          Create AMI_ sendc interface nodes

Wed Jan 13 08:51:19 UTC 2010  Johnny Willemsen  <jwillemsen@remedy.nl>

        * tao/AnyTypeCode/NVList.cpp:
          Const changes, layout changes, only one exit point in a method

        * tao/AnyTypeCode/NVList_Adapter_Impl.cpp:
        * tao/AnyTypeCode/NVList_Adapter_Impl.h:
          Layout change

        * tao/debug.cpp:
          Explicitly initialise TAO_orb_debug to 0

        * tao/debug.h:
          Layout changes

        * tao/Messaging/ExceptionHolder.pidl:
          Layout changes

        * tao/Messaging/ExceptionHolder_i.cpp:
          Bool and layout changes

        * tao/ORB_Core.cpp:
          Layout changes

Wed Jan 13 08:30:19 UTC 2010  Johnny Willemsen  <jwillemsen@remedy.nl>

        * orbsvcs/examples/RtEC/Simple/run_test.pl:
          Fixed fuzz error

Tue Jan 12 20:12:19 UTC 2010  Johnny Willemsen  <jwillemsen@remedy.nl>

        * TAO_IDL/be/be_visitor_ami_pre_proc.cpp:
        * TAO_IDL/be_include/be_visitor_ami_pre_proc.h:
          No need to pass the exceptionholder through all methods, there is only
          one

        * TAO_IDL/be/be_visitor_ami4ccm_pre_proc.cpp:
        * TAO_IDL/be_include/be_visitor_ami4ccm_pre_proc.h:
          Started generating the AMI_ sendc interface

Tue Jan 12 19:31:19 UTC 2010  Johnny Willemsen  <jwillemsen@remedy.nl>

        * TAO_IDL/be/be_visitor_ami_pre_proc.cpp:
          Bool changes

        * TAO_IDL/be/be_visitor_ami4ccm_pre_proc.cpp:
        * TAO_IDL/be_include/be_visitor_ami4ccm_pre_proc.h:
          More tweaks to ami4ccm code generation

Tue Jan 12 19:08:39 UTC 2010  Johnny Willemsen  <jwillemsen@remedy.nl>

        * TAO_IDL/be/be_visitor_ami_pre_proc.cpp:
        * TAO_IDL/be_include/be_visitor_ami_pre_proc.h:
          No seperate method needed for creating the exceptionholder

Tue Jan 12 14:12:39 UTC 2010  Johnny Willemsen  <jwillemsen@remedy.nl>

        * TAO_IDL/be/be_visitor_ami4ccm_pre_proc.cpp:
          Commented out some code not needed for ami4ccm, but needed for
          ami

Tue Jan 12 08:34:39 UTC 2010  Johnny Willemsen  <jwillemsen@remedy.nl>

        * TAO_IDL/be/be_visitor_ami4ccm_pre_proc.cpp:
        * TAO_IDL/be_include/be_visitor_ami4ccm_pre_proc.h:
          Extended AMI4CCM code generation

Fri Jan  8 11:42:39 UTC 2010  Johnny Willemsen  <jwillemsen@remedy.nl>

        * TAO_IDL/ast/ast_interface.cpp:
          layout change

        * TAO_IDL/be/be_global.cpp:
          CCM_AMI::ReplyHandler is a local interface

        * TAO_IDL/be/be_visitor_ami4ccm_pre_proc.cpp:
        * TAO_IDL/be_include/be_visitor_ami4ccm_pre_proc.h:
          Enable most code in this file in order to implement this ami4ccm
          implied node generation

        * TAO_IDL/be/be_visitor_ami_pre_proc.cpp:
          Don't crash when create_inheritance_list returns 0, but log an error

Fri Jan  8 11:18:39 UTC 2010  Johnny Willemsen  <jwillemsen@remedy.nl>

        * TAO_IDL/be/be_global.cpp:
        * TAO_IDL/be_include/be_global.h:
          Added CCM_AMI::ReplyHandler base interface

Fri Jan  8 10:56:39 UTC 2010  Johnny Willemsen  <jwillemsen@remedy.nl>

        * TAO_IDL/be/be_global.cpp:
        * TAO_IDL/be_include/be_global.h:
          Added members for CCM_AMI module and its ExceptionHolder

Fri Jan  8 10:12:39 UTC 2010  Johnny Willemsen  <jwillemsen@remedy.nl>

        * TAO_IDL/be/be_uses.cpp:
        * TAO_IDL/be_include/be_uses.h:
          Added original_uses member

        * TAO_IDL/be/be_visitor_ami4ccm_pre_proc.cpp:
          Prevent recursion using the new original_uses member

Thu Jan  7 18:56:39 UTC 2010  Johnny Willemsen  <jwillemsen@remedy.nl>

        * TAO_IDL/be/be_array.cpp
        * TAO_IDL/be/be_interface.cpp
        * TAO_IDL/be/be_operation_strategy.cpp
        * TAO_IDL/be/be_visitor_interface/amh_ss.cpp
        * TAO_IDL/be/be_visitor_interface/interface.cpp
        * TAO_IDL/be/be_visitor_interface/interface_is.cpp
          Initialise pointers with 0, small layout changes

Thu Jan  7 18:45:39 UTC 2010  Johnny Willemsen  <jwillemsen@remedy.nl>

        * TAO_IDL/be/be_visitor_ami4ccm_pre_proc.cpp:
          Added some more code for implicit sendc_ ports

        * TAO_IDL/be/be_visitor_ami_pre_proc.cpp:
          Fixed typos

        * TAO_IDL/be_include/be_interface_strategy.h:
          Layout changes

Thu Jan  7 11:04:58 UTC 2010  Martin Corino  <mcorino@remedy.nl>

        * tests/OBV/Supports/Supports_Test.mpc:
          Reinstated dummy_label dependency.

        * bin/tao_orb_tests.lst:
          Disabled the OBV/Supports test again since there Solaris compilers
          as well as CB2010 do not grok the TAO code for valuetype 'supports'
          constructs and there is currently no budget to fix this.
          This will need to be resolved at some time by either compiler fixes
          or a redesign of the TAO valuetype framework.

Thu Jan  7 10:44:39 UTC 2010  Johnny Willemsen  <jwillemsen@remedy.nl>

        * TAO_IDL/ast/ast_component.cpp
        * TAO_IDL/be/be_codegen.cpp
        * TAO_IDL/be/be_global.cpp
        * TAO_IDL/be/be_produce.cpp
        * TAO_IDL/be/be_visitor_ami4ccm_pre_proc.cpp
        * TAO_IDL/be/be_visitor_arg_traits.cpp
        * TAO_IDL/be/be_visitor_ccm_pre_proc.cpp
        * TAO_IDL/be_include/be_global.h
        * TAO_IDL/be_include/be_visitor_ami4ccm_pre_proc.h
        * TAO_IDL/include/ast_component.h
          Committing the initial files for the ami4ccm visitors
          which should create all implied nodes for ami4ccm.
          This can be enabled using the new -GM option.

Mon Jan  4 14:25:39 UTC 2010  Johnny Willemsen  <jwillemsen@remedy.nl>

        * TAO_IDL/be/be_visitor_argument/argument.cpp
        * TAO_IDL/be/be_visitor_argument/vardecl_ss.cpp
        * TAO_IDL/be/be_visitor_array/array.cpp
        * TAO_IDL/be/be_visitor_component/component_cs.cpp
        * TAO_IDL/be/be_visitor_exception/exception_ctor.cpp
        * TAO_IDL/be/be_visitor_field/field_ch.cpp
        * TAO_IDL/be/be_visitor_home/home_ex_idl.cpp
        * TAO_IDL/be/be_visitor_interface/interface_cs.cpp
        * TAO_IDL/be/be_visitor_interface/smart_proxy_ch.cpp
        * TAO_IDL/be/be_visitor_operation/ami_cs.cpp
        * TAO_IDL/be/be_visitor_operation/ami_handler_reply_stub_operation_cs.cpp
        * TAO_IDL/be/be_visitor_operation/remote_proxy_impl_cs.cpp
        * TAO_IDL/be/be_visitor_operation/rettype.cpp
        * TAO_IDL/be/be_visitor_sequence/buffer_type.cpp
        * TAO_IDL/be/be_visitor_sequence/sequence_base.cpp
        * TAO_IDL/be/be_visitor_structure/any_op_ch.cpp
        * TAO_IDL/be/be_visitor_typedef/any_op_ch.cpp
        * TAO_IDL/be/be_visitor_typedef/any_op_cs.cpp
        * TAO_IDL/be/be_visitor_typedef/cdr_op_ch.cpp
        * TAO_IDL/be/be_visitor_typedef/cdr_op_cs.cpp
        * TAO_IDL/be/be_visitor_typedef/serializer_op_ch.cpp
        * TAO_IDL/be/be_visitor_typedef/serializer_op_cs.cpp
        * TAO_IDL/be/be_visitor_typedef/typedef_ch.cpp
        * TAO_IDL/be/be_visitor_typedef/typedef_ci.cpp
        * TAO_IDL/be/be_visitor_typedef/typedef_cs.cpp
        * TAO_IDL/be/be_visitor_union/discriminant_ch.cpp
        * TAO_IDL/be/be_visitor_union/discriminant_ci.cpp
        * TAO_IDL/be/be_visitor_union/discriminant_cs.cpp
        * TAO_IDL/be/be_visitor_union_branch/private_ch.cpp
        * TAO_IDL/be/be_visitor_union_branch/public_assign_cs.cpp
        * TAO_IDL/be/be_visitor_union_branch/public_ch.cpp
        * TAO_IDL/be/be_visitor_union_branch/public_ci.cpp
        * TAO_IDL/be/be_visitor_union_branch/public_constructor_cs.cpp
        * TAO_IDL/be/be_visitor_union_branch/public_reset_cs.cpp
        * TAO_IDL/be/be_visitor_valuebox/field_ch.cpp
        * TAO_IDL/be/be_visitor_valuebox/field_ci.cpp
        * TAO_IDL/be/be_visitor_valuebox/union_member_ci.cpp
        * TAO_IDL/be/be_visitor_valuebox/valuebox_ci.cpp
        * TAO_IDL/be/be_visitor_valuetype/field_ch.cpp
        * TAO_IDL/be/be_visitor_valuetype/field_ci.cpp
        * TAO_IDL/be/be_visitor_valuetype/field_cs.cpp
          Initialise pointer with 0

Thu Dec 31 13:20:32 UTC 2009  Vladimir Zykov  <vladimir.zykov@prismtech.com>

        * tests/Bug_1330_Regression/run_test.pl:
          Added missing assignment for $TARGETHOSTNAME.

Tue Dec 29 16:37:54 UTC 2009  Vladimir Zykov  <vladimir.zykov@prismtech.com>

        * orbsvcs/tests/CosEvent/Timeout/TimeoutTestMain.cpp:
          Fixed a small memory leak.

        * tests/RTCORBA/Banded_Connections/run_test.pl:
          Fixed a typo in IOR name.

Tue Dec 29 09:23:00 UTC 2009  Johnny Willemsen  <jwillemsen@remedy.nl>

        * orbsvcs/orbsvcs/IFRService/IFR_Service_Utils_T.h:
          Fix for CB2010

Tue Dec 29 09:12:00 UTC 2009  Johnny Willemsen  <jwillemsen@remedy.nl>

        * TAO_IDL/Makefile.am:
          Updated for all changes related to IDL3+

Tue Dec 29 04:07:06 UTC 2009  Jeff Parsons <j.parsons@vanderbilt.edu>

        * TAO_IDL/be/be_union.cpp:
        * TAO_IDL/be/be_visitor_exception/cdr_op_cs.cpp:
        * TAO_IDL/be/be_valuetype.cpp:
        * TAO_IDL/be/be_visitor_interface/cdr_op_cs.cpp:
        * TAO_IDL/be/be_visitor_sequence/cdr_op_cs.cpp:
        * TAO_IDL/be/be_visitor_structure.cpp:
        * TAO_IDL/be/be_type.cpp:
        * TAO_IDL/be/be_visitor_valuetype/valuetype_cs.cpp:
        * TAO_IDL/be/be_visitor_valuetype/cdr_op_cs.cpp:
        * TAO_IDL/be/be_typedef.cpp:
        * TAO_IDL/be/be_structure.cpp:
        * TAO_IDL/be/be_visitor_union_branch/cdr_op_cs.cpp:
        * TAO_IDL/be/be_field.cpp:
        * TAO_IDL/be/be_predefined_type.cpp:
        * TAO_IDL/be/be_visitor_array/cdr_op_cs.cpp:
        * TAO_IDL/be/be_visitor_union/cdr_op_cs.cpp:
        * TAO_IDL/be/be_visitor_structure/cdr_op_cs.cpp:
        * TAO_IDL/be/be_produce.cpp:
        * TAO_IDL/be/be_visitor_enum/cdr_op_cs.cpp:
        * TAO_IDL/be/be_sequence.cpp:
        * TAO_IDL/be/be_interface.cpp:
        * TAO_IDL/be/be_enum.cpp:
        * TAO_IDL/be/be_string.cpp:
        * TAO_IDL/be/be_array.cpp:
        * TAO_IDL/be_include/be_field.h:
        * TAO_IDL/be_include/be_interface.h:
        * TAO_IDL/be_include/be_enum.h:
        * TAO_IDL/be_include/be_type.h:
        * TAO_IDL/be_include/be_union.h:
        * TAO_IDL/be_include/be_predefined_type.h:
        * TAO_IDL/be_include/be_string.h:
        * TAO_IDL/be_include/be_array.h:
        * TAO_IDL/be_include/be_typedef.h:
        * TAO_IDL/be_include/be_structure.h:
        * TAO_IDL/be_include/be_valuetype.h:
        * TAO_IDL/be_include/be_sequence.h:

          Fixed inconsistencies in the generation of ostream operators
          for array types, both as top-level declarations and as
          members.

Thu Dec 24 16:58:36 UTC 2009  Phil Mesnier  <mesnierp@ociweb.com>

        * bin/tao_other_tests.lst:
          Skip the new LB tests on singlethreaded builds.

Thu Dec 24 13:15:42 UTC 2009  Jeff Parsons <j.parsons@vanderbilt.edu>

        * TAO_IDL/be_include/be_template_module_ref.h:
        * TAO_IDL/be/be_template_module_ref.cpp:

          Fixed cut-and-paste error in virtual method name.

Thu Dec 24 10:20:00 UTC 2009  Johnny Willemsen  <jwillemsen@remedy.nl>

        * orbsvcs/orbsvcs/Trader/Trader.h:
        * tao/Incoming_Message_Stack.h:
          Fixes for C++ Builder 2010 Update 4/5

        * tao/Synch_Invocation.cpp:
          Updated some very old comments

Wed Dec 23 19:14:42 UTC 2009  Johnny Willemsen  <jwillemsen {at} remedy.nl>

        * orbsvcs/tests/Bug_2248_Regression/client.cpp:
          Fixed QNX compile problem

Wed Dec 23 19:07:38 UTC 2009  Jeff Parsons <j.parsons@vanderbilt.edu>

        * TAO_IDL/be/be_visitor_ami_pre_proc.cpp:

          In implied IDL generation for AMI, added a copy of
          exception list to AMI-releated operation nodes corresponding
          to attributes the same as they already are for other
          operation nodes. Thanks to Johnny Willemsen <jwillemsen@remedy.nl>
          for reporting the problem and creating a regression test.

Wed Dec 23 18:48:31 UTC 2009  Yan Dai  <dai_y@ociweb.com>

        * TAO_IDL/be/be_visitor_valuebox/valuebox_cs.cpp:
        * TAO_IDL/be/be_visitor_valuetype/valuetype_cs.cpp:

          Made bool changes according to ACE-guidelines.html.

Wed Dec 23 15:47:02 UTC 2009  Jeff Parsons  <j.parsons@vanderbilt.edu>

        * TAO_IDL/fe/idl.yy:
        * TAO_IDL/fe/y.tab.cpp:

          Reverted a change to the 'state_member' production rule that
          was causing the public/private qualifier to be lost in
          valuetypes and eventtypes.

        * TAO_IDL/include/ast_field.h:

          Removed extra spaces.

Wed Dec 23 11:56:42 UTC 2009  Vladimir Zykov  <vladimir.zykov@prismtech.com>

        * tests/CodeSets/simple/client.cpp:
        * tests/CodeSets/simple/server.cpp:
        * tests/CodeSets/simple/run_test.pl:
        * tests/Bug_3766_Regression/client.cpp:
        * tests/Bug_3766_Regression/server.cpp:
        * tests/Bug_3766_Regression/run_test.pl:
          Changed the tests so they accept IORs from command line.

        * tests/Bug_3790_Regression/server2.cpp:
          Fixed compile error on wchar builds.

        * bin/tao_orb_tests.lst:
          Disabled a test for bug#3542 on static builds.

Wed Dec 23 09:31:42 UTC 2009  Johnny Willemsen  <jwillemsen {at} remedy.nl>

        * TAO_IDL/be/be_visitor_operation/upcall_command_ss.cpp:
          Small code layout improvement

Wed Dec 23 09:13:42 UTC 2009  Johnny Willemsen  <jwillemsen {at} remedy.nl>

        * tests/Bug_3801_Regression:
          New test to reproduce problem with AMI and attributes

        * bin/tao_orb_tests.lst:
          Added 3801

        * bin/tao_other_tests.lst:
          Removed WinCE

        * tao/Messaging/ExceptionHolder_i.cpp:
          bool changes

`       * tao/Object.cpp:
          bool changes, check all return values

        * tao/Valuetype/ValueBase.cpp:
          bool changes, fixed a lot of debug messages that had a totally
          wrong layout

Tue Dec 22 17:19:42 UTC 2009  Johnny Willemsen  <jwillemsen {at} remedy.nl>

        * tests/IDL_Test/attribute.idl:
          A readonly attribute should just use raises, on a rw attribute
          first getraises and after that setraises has to be specified,
          not other way around

Tue Dec 22 15:59:42 UTC 2009  Johnny Willemsen  <jwillemsen {at} remedy.nl>

        * tests/IDL_Test/attribute.idl:
        * tests/IDL_Test/IDL_Test.mpc:
          Added test file for attributes

Tue Dec 22 17:06:08 UTC 2009  Jeff Parsons  <j.parsons@vanderbilt.edu>

        * TAO_IDL/fe/fe_utils.cpp:
        * TAO_IDL/fe/idl.yy:
        * TAO_IDL/fe/y.tab.h:
        * TAO_IDL/fe/y.tab.cpp:
        * TAO_IDL/include/fe_utils.h:
        * TAO_IDL/include/utl_err.h:

          - Fixed bug in grammar that did not allow a template module
            to be declared inside a regular module.

          - Removed unused data types from FE_Utils and from the big
            parser union.

Mon Dec 21 20:11:42 UTC 2009  Jeff Parsons <j.parsons@vanderbilt.edu>

        * TAO_IDL/ast/ast_operation.cpp(fe_add_exception):

          In adding support for template param holders in a raises clause,
          inadvertently exluded the use case for Messaging::UserExceptionBase,
          which is native. This fix restores the handling of that use case.

Mon Dec 21 15:13:57 UTC 2009  Denis Budko  <denis.budko@remedy.nl>

        * orbsvcs/tests/EC_Mcast/run_test.pl:
        * performance-tests/Throughput/run_test.pl:
        * tests/AMI_Buffering/run_timeout.pl:
        * tests/AMI_Buffering/run_message_count.pl:
        * tests/AMI_Buffering/run_buffer_size.pl:
        * tests/AMI_Buffering/run_timeout_reactive.pl:
        * tests/AMI_Buffering/run_test.pl:
        * tests/CodeSets/simple/run_test.pl:
        * tests/Oneway_Buffering/run_timeout.pl:
        * tests/Oneway_Buffering/run_message_count.pl:
        * tests/Oneway_Buffering/run_buffer_size.pl:
        * tests/Oneway_Buffering/run_timeout_reactive.pl:
        * tests/Oneway_Buffering/run_test.pl:

          Tests are converted to use new test framework
          and added to fuzz build.

Mon Dec 21 13:09:35 UTC 2009  Denis Budko  <denis.budko@remedy.nl>

        * DevGuideExamples/Multithreading/ThreadPerConnection/MessengerServer.cpp:
        * tests/Oneway_Send_Timeouts/run_test.pl:
        * tests/Optimized_Connection/run_test.pl:
        * examples/Simple/time-date/svc.conf:
        * examples/Simple/time-date/run_test.pl:

          Tests are converted to use new test framework
          and added to fuzz build.

Mon Dec 21 12:39:29 UTC 2009  Vladimir Zykov  <vladimir.zykov@prismtech.com>

        * bin/tao_orb_tests.lst:
        * tao/ORB_Core.cpp:
          Fixed bug#3790 and marked corresponding test as fixed in lst.
          Now when object is reinitialized and it's not collocated then
          it's explicitly marked as remote one.

Sun Dec 20 15:57:15 UTC 2009  Abdul Sowayan  <sowayan@gmail.com>

        * TAO_IDL/be/be_template_module_ref.cpp:
          Removed a stray charachter that was causing a compile time error.

Sat Dec 19 06:59:00 UTC 2009  Johnny Willemsen  <jwillemsen@remedy.nl>

        * TAO_IDL/be/be_interface.cpp
        * TAO_IDL/be_include/be_interface.h
          Merged changes back in that I reverted by accident

Fri Dec 18 18:58:00 UTC 2009  Johnny Willemsen  <jwillemsen@remedy.nl>

        Merged changes for templated modules in the TAO_IDL front end to svn head

        Thu Dec 17 20:35:28 UTC 2009  Jeff Parsons <j.parsons@vanderbilt.edu>

        * orbsvcs/IFR_Service/ifr_adding_visitor.h:
        * orbsvcs/IFR_Service/ifr_adding_visitor_operation.cpp:
        * orbsvcs/IFR_Service/ifr_adding_visitor.cpp:

          Changes to TAO IFR loader required by changes to TAO_IDL
          front end in

          Wed Dec 16 20:20:13 UTC 2009  Jeff Parsons <j.parsons@vanderbilt.edu>

        Wed Dec 16 20:20:13 UTC 2009  Jeff Parsons <j.parsons@vanderbilt.edu>

        * TAO_IDL/include/ast_generator.h:
        * TAO_IDL/include/ast_valuetype.h:
        * TAO_IDL/include/ast_eventtype.h:
        * TAO_IDL/include/ast_home.h:
        * TAO_IDL/include/ast_interface.h:
        * TAO_IDL/include/ast_component.h:
        * TAO_IDL/be/be_visitor_typecode/value_typecode.cpp:
        * TAO_IDL/be/be_valuetype.cpp:
        * TAO_IDL/be/be_visitor_home/home_ex_idl.cpp:
        * TAO_IDL/be/be_visitor_interface/interface_sh.cpp:
        * TAO_IDL/be/be_visitor_interface/direct_proxy_impl_sh.cpp:
        * TAO_IDL/be/be_visitor_ami_pre_proc.cpp:
        * TAO_IDL/be/be_home.cpp:
        * TAO_IDL/be/be_visitor_valuetype/valuetype_obv_ch.cpp:
        * TAO_IDL/be/be_visitor_valuetype/valuetype_cs.cpp:
        * TAO_IDL/be/be_visitor_valuetype/valuetype_sh.cpp:
        * TAO_IDL/be/be_visitor_valuetype/valuetype_obv_cs.cpp:
        * TAO_IDL/be/be_visitor_valuetype/valuetype.cpp:
        * TAO_IDL/be/be_visitor_valuetype/valuetype_ss.cpp:
        * TAO_IDL/be/be_component.cpp:
        * TAO_IDL/be/be_visitor_amh_pre_proc.cpp:
        * TAO_IDL/be/be_visitor_component/executor_ex_idl.cpp:
        * TAO_IDL/be/be_visitor_component/component_sh.cpp:
        * TAO_IDL/be/be_eventtype.cpp:
        * TAO_IDL/be/be_interface.cpp:
        * TAO_IDL/be/be_visitor_ccm_pre_proc.cpp:
        * TAO_IDL/be/be_generator.cpp:
        * TAO_IDL/ast/ast_home.cpp:
        * TAO_IDL/ast/ast_interface.cpp:
        * TAO_IDL/ast/ast_component.cpp:
        * TAO_IDL/ast/ast_generator.cpp:
        * TAO_IDL/ast/ast_valuetype.cpp:
        * TAO_IDL/ast/ast_eventtype.cpp:
        * TAO_IDL/be_include/be_interface.h:
        * TAO_IDL/be_include/be_component.h:
        * TAO_IDL/be_include/be_eventtype.h:
        * TAO_IDL/be_include/be_home.h:
        * TAO_IDL/be_include/be_generator.h:
        * TAO_IDL/be_include/be_valuetype.h:
        * TAO_IDL/be_include/be_visitor_ami_pre_proc.h:
        * TAO_IDL/fe/fe_obv_header.cpp:
        * TAO_IDL/fe/fe_home_header.cpp:
        * TAO_IDL/fe/fe_interface_header.cpp:
        * TAO_IDL/fe/fe_component_header.cpp:
        * TAO_IDL/narrow/narrow.cpp:
        * TAO_IDL/util/utl_scope.cpp:

          Changes to support template parameters as base
          interfaces/valuetypes, supported interfaces,
          primary keys, and members of a throw spec list.
          Several internal container types were widened to AST_Type
          from whatever they were originally, to enable
          them to also contain AST_Param_Holder. This
          change precipitated many small mods, to the
          backend as well as the frontend.

        Tue Dec 15 20:34:51 UTC 2009  Jeff Parsons <j.parsons@vanderbilt.edu>

        * TAO_IDL/include/utl_exceptlist.h:
        * TAO_IDL/include/fe_home_header.h:
        * TAO_IDL/include/fe_interface_header.h:
        * TAO_IDL/include/fe_obv_header.h:
        * TAO_IDL/include/ast_interface.h:
        * TAO_IDL/include/fe_component_header.h:
        * TAO_IDL/be/be_visitor_home/home_ex_idl.cpp:
        * TAO_IDL/be/be_field.cpp:
        * TAO_IDL/ast/ast_operation.cpp:
        * TAO_IDL/fe/fe_obv_header.cpp:
        * TAO_IDL/fe/fe_home_header.cpp:
        * TAO_IDL/fe/y.tab.cpp:
        * TAO_IDL/fe/fe_interface_header.cpp:
        * TAO_IDL/fe/fe_component_header.cpp:
        * TAO_IDL/fe/idl.yy:
        * TAO_IDL/util/utl_exceptlist.cpp:
        * TAO_IDL/util/utl_scope.cpp:

          - Added support for template parameters in an
            operation throw spec.

          - Began support for template parameters as
            base interfaces/valuetypes and supported interfaces.

        Mon Dec 14 20:26:51 UTC 2009  Jeff Parsons <j.parsons@vanderbilt.edu>

        * TAO_IDL/include/ast_template_common.h:
        * TAO_IDL/include/fe_template_interface_header.h:
        * TAO_IDL/include/fe_template_header_common.h:
        * TAO_IDL/include/fe_instantiated_interface_header.h:
        * TAO_IDL/include/ast_template_interface.h:
        * TAO_IDL/be/be_template_interface.cpp:
        * TAO_IDL/be/be_visitor_iface_inst.cpp:
        * TAO_IDL/ast/ast_template_common.cpp:
        * TAO_IDL/ast/ast_template_interface.cpp:
        * TAO_IDL/be_include/be_template_interface.h:
        * TAO_IDL/be_include/be_visitor_iface_inst.h:
        * TAO_IDL/fe/fe_template_header_common.cpp:
        * TAO_IDL/fe/fe_template_interface_header.cpp:
        * TAO_IDL/fe/fe_instantiated_interface_header.cpp:

          Removed these files, they were part of the support
          for the original version of IDL3+, before the
          revisions.

        * TAO_IDL/fe/y.tab.h:
        * TAO_IDL/fe/lex.yy.cpp:
        * TAO_IDL/include/ast_generator.h:
        * TAO_IDL/be/be_visitor_interface.cpp:
        * TAO_IDL/be/be_visitor_ccm_pre_proc.cpp:
        * TAO_IDL/be_include/be_visitor_ccm_pre_proc.h:
        * TAO_IDL/fe/idl.ll:

          Changes mandated by the removal of the above
          files.

        Mon Dec 14 19:21:39 UTC 2009  Jeff Parsons <j.parsons@vanderbilt.edu>

        * TAO_IDL/fe/idl.yy:
        * TAO_IDL/fe/y.tab.cpp:

          Restored semantic action to create a non-template porttype,
          removed at the beginning of revised IDL3+ template support
          work.

        Mon Dec 14 18:16:17 UTC 2009  Jeff Parsons <j.parsons@vanderbilt.edu>

        * TAO_IDL/ast/ast_expression.cpp:
        * TAO_IDL/ast/ast_array.cpp:

          Completed support for template parameters as array bounds.

        Fri Dec 11 19:17:52 UTC 2009  Jeff Parsons <j.parsons@vanderbilt.edu>

        * TAO_IDL/ast/ast_sequence.cpp:
        * TAO_IDL/ast/ast_array.cpp:
        * TAO_IDL/ast/ast_field.cpp:
        * TAO_IDL/fe/y.tab.cpp:
        * TAO_IDL/fe/idl.yy:

          - More error checking when using template parameter for
            sequence element type.

          - Start on support for template parameter as array
            bound, not yet complete.

        Fri Dec  4 19:23:17 UTC 2009  Jeff Parsons <j.parsons@vanderbilt.edu>

        * TAO_IDL/include/ast_generator.h:
        * TAO_IDL/include/ast_param_holder.h:
        * TAO_IDL/include/ast_expression.h:
        * TAO_IDL/be/be_param_holder.cpp:
        * TAO_IDL/be/be_generator.cpp:
        * TAO_IDL/ast/ast_expression.cpp:
        * TAO_IDL/ast/ast_sequence.cpp:
        * TAO_IDL/ast/ast_generator.cpp:
        * TAO_IDL/ast/ast_param_holder.cpp:
        * TAO_IDL/be_include/be_param_holder.h:
        * TAO_IDL/be_include/be_generator.h:
        * TAO_IDL/fe/y.tab.cpp:
        * TAO_IDL/fe/idl.yy:
        * TAO_IDL/fe/fe_declarator.cpp:
        * TAO_IDL/util/utl_err.cpp:
        * TAO_IDL/util/utl_scope.cpp:

          Support for template parameter as sequence
          bound, and additional error checking for
          template parameter as const type, sequence
          type and sequence bound.

        Thu Dec  3 20:39:05 UTC 2009  Jeff Parsons <j.parsons@vanderbilt.edu>

        * TAO_IDL/include/ast_expression.h:
        * TAO_IDL/ast/ast_expression.cpp:
        * TAO_IDL/fe/y.tab.cpp:
        * TAO_IDL/fe/idl.yy:

          Added check to see if an expression has been created as the
          rhs of a constant declaration that is a reference to a
          template module parameter. If so, we can skip the coercion
          and some of the evaluation until instantiation time.

        Thu Dec  3 19:15:15 UTC 2009  Jeff Parsons  <j.parsons@vanderbilt.edu>

        * TAO_IDL/fe/idl.yy:
        * TAO_IDL/fe/y.tab.cpp:

        * TAO_IDL/include/fe_utils.h:

        Thu Dec  3 18:52:22 UTC 2009  Jeff Parsons <j.parsons@vanderbilt.edu>

        * TAO_IDL/ast/ast_field.cpp:

          Added check for AST_Param_Holder as field type, and
          made this type (along with sequence and array) one
          whose lifetime is tied to the field node.

        * TAO_IDL/util/utl_global.cpp:

          Added initialization in the constuctor for the new
          member that stores a template param list.

        Wed Dec  2 21:21:24 UTC 2009  Jeff Parsons <j.parsons@vanderbilt.edu>

        * TAO_IDL/include/ast_generator.h:
        * TAO_IDL/include/ast_param_holder.h:
        * TAO_IDL/include/fe_utils.h:
        * TAO_IDL/include/idl_global.h:
        * TAO_IDL/include/fe_interface_header.h:
        * TAO_IDL/include/utl_scope.h:
        * TAO_IDL/include/ast_consumes.h:
        * TAO_IDL/include/ast_publishes.h:
        * TAO_IDL/include/ast_operation.h:
        * TAO_IDL/include/ast_emits.h:
        * TAO_IDL/be/be_param_holder.cpp:
        * TAO_IDL/be/be_publishes.cpp:
        * TAO_IDL/be/be_decl.cpp:
        * TAO_IDL/be/be_consumes.cpp:
        * TAO_IDL/be/be_emits.cpp:
        * TAO_IDL/be/be_generator.cpp:
        * TAO_IDL/ast/ast_consumes.cpp:
        * TAO_IDL/ast/ast_publishes.cpp:
        * TAO_IDL/ast/ast_expression.cpp:
        * TAO_IDL/ast/ast_interface.cpp:
        * TAO_IDL/ast/ast_template_module.cpp:
        * TAO_IDL/ast/ast_emits.cpp:
        * TAO_IDL/ast/ast_template_common.cpp:
        * TAO_IDL/ast/ast_module.cpp:
        * TAO_IDL/ast/ast_generator.cpp:
        * TAO_IDL/ast/ast_union.cpp:
        * TAO_IDL/ast/ast_param_holder.cpp:
        * TAO_IDL/ast/ast_exception.cpp:
        * TAO_IDL/ast/ast_structure.cpp:
        * TAO_IDL/ast/ast_attribute.cpp:
        * TAO_IDL/ast/ast_valuetype.cpp:
        * TAO_IDL/ast/ast_argument.cpp:
        * TAO_IDL/be_include/be_publishes.h:
        * TAO_IDL/be_include/be_param_holder.h:
        * TAO_IDL/be_include/be_emits.h:
        * TAO_IDL/be_include/be_generator.h:
        * TAO_IDL/be_include/be_consumes.h:
        * TAO_IDL/fe/fe_utils.cpp:
        * TAO_IDL/fe/y.tab.cpp:
        * TAO_IDL/fe/fe_template_interface_header.cpp:
        * TAO_IDL/fe/fe_interface_header.cpp:
        * TAO_IDL/fe/idl.yy:
        * TAO_IDL/util/utl_global.cpp:
        * TAO_IDL/util/utl_scope.cpp:

          - Added code to UTL_Scope::lookup_by_name() that can
            match an input to a template parameter, if any, of the
            enclosing scope.

          - Changed constructor and IDL compiler factory function
            signatures for publishes, emits and consumes nodes to
            take AST_Type rather than AST_EventType, allowing a
            template parameter placeholder to be accepted if that
            particular IDL construct is parameterized.

          - Removed #include of ast_typedef.h from utl_scope.h and
            added it to the necessary .cpp files.

          - Added check for duplicate names in a formal template
            parameter list.

        Tue Dec  1 18:00:15 UTC 2009  Jeff Parsons  <j.parsons@vanderbilt.edu>

        * TAO_IDL/fe/idl.yy:
        * TAO_IDL/fe/y.tab.cpp:

          Fixed typo and regenerated/recompiled.

        Tue Dec  1 17:39:09 UTC 2009  Jeff Parsons <j.parsons@vanderbilt.edu>

        * TAO_IDL/include/ast_template_module.h:
        * TAO_IDL/include/utl_scope.h:
        * TAO_IDL/ast/ast_template_module.cpp:
        * TAO_IDL/fe/y.tab.cpp:
        * TAO_IDL/fe/idl.yy:
        * TAO_IDL/util/utl_scope.cpp:

          - Finished matching/error checking code for template
            parameter references
          - Finished semantic actions for template module aliases
            and the associated template parameter references
          - Factored ACE_NEW_RETURN macro out of both paths of an
            IF block in several production rules dealing with
            comma-separated lists

        Tue Dec  1 14:46:26 UTC 2009  Jeff Parsons  <j.parsons@vanderbilt.edu>

        * TAO_IDL/fe/y.tab.cpp:

          Regenrerated and recompiled.

        Mon Nov 30 23:14:05 UTC 2009  Jeff Parsons <j.parsons@vanderbilt.edu>

        * TAO_IDL/include/idl_global.h:
        * TAO_IDL/include/ast_template_module.h:
        * TAO_IDL/ast/ast_template_module.cpp:
        * TAO_IDL/fe/idl.yy:
        * TAO_IDL/util/utl_err.cpp:

          Added parse state flags & associated error messages
          for aliased modules. Also added error-checking code
          for aliases to AST_Template_Module, and some semantic
          action code for aliased modules.

        Mon Nov 30 21:46:22 UTC 2009  Jeff Parsons <j.parsons@vanderbilt.edu>

        * TAO_IDL/include/ast_module.h:
        * TAO_IDL/include/utl_scope.h:
        * TAO_IDL/include/utl_err.h:
        * TAO_IDL/ast/ast_expression.cpp:
        * TAO_IDL/ast/ast_template_module.cpp:
        * TAO_IDL/ast/ast_template_common.cpp:
        * TAO_IDL/ast/ast_module.cpp:
        * TAO_IDL/fe/y.tab.cpp:
        * TAO_IDL/fe/idl.yy:
        * TAO_IDL/util/utl_err.cpp:
        * TAO_IDL/util/utl_scope.cpp:

          Finished semantic actions and added diagnostics
          for template module instantiations.

        Mon Nov 30 20:11:27 UTC 2009  Jeff Parsons  <j.parsons@vanderbilt.edu>

        * TAO_IDL/fe/idl.yy:
        * TAO_IDL/fe/y.tab.cpp:

          Fixed typo and regenerated.

        Mon Nov 30 20:04:13 UTC 2009  Jeff Parsons <j.parsons@vanderbilt.edu>

        * TAO_IDL/includ/idl_global.h:
        * TAO_IDL/util/utl_err.cpp:

          Added new parse states for instantiated template modules,
          with corresponding error messages.

        * TAO_IDL/include/ast_template_module.h:
        * TAO_IDL/ast/ast_template_module.cpp:

          Added methods to check the arglist of an instantiated
          template modules against the formal parameters.

        * TAO_IDL/fe/y.tab.cpp:
        * TAO_IDL/fe/idl.yy:

          Added semantic actions for creation of instantiated
          template module.

        Mon Nov 30 17:30:44 UTC 2009  Jeff Parsons  <j.parsons@vanderbilt.edu>

        * TAO_IDL/fe/idl.yy:
        * TAO_IDL/fe/y.tab.cpp:

          Added overlooked case IDL_ENUM to <formal_parameter_type>
          and regenerated.

        Mon Nov 30 16:56:21 UTC 2009  Jeff Parsons <j.parsons@vanderbilt.edu>

        * TAO_IDL/include/idl_global.h:
        * TAO_IDL/util/utl_global.cpp:

          Removed check for illegal const type added in

          Fri Nov 27 23:13:05 UTC 2009  Jeff Parsons <j.parsons@vanderbilt.edu>

          since it turned out to be unnecessary, the check is made elswhere.

        * TAO_IDL/fe/y.tab.cpp:
        * TAO_IDL/fe/idl.yy:

          Added semantic action for single template arg.

        Fri Nov 27 23:13:05 UTC 2009  Jeff Parsons <j.parsons@vanderbilt.edu>

        * TAO_IDL/include/idl_global.h:
        * TAO_IDL/include/utl_list.h:
        * TAO_IDL/include/utl_idlist.h:
        * TAO_IDL/fe/y.tab.cpp:
        * TAO_IDL/fe/idl.yy:
        * TAO_IDL/util/utl_exprlist.cpp:
        * TAO_IDL/util/utl_list.cpp:
        * TAO_IDL/util/utl_exceptlist.cpp:
        * TAO_IDL/util/utl_idlist.cpp:
        * TAO_IDL/util/utl_global.cpp:

          - Cosmetic changes to list classes
          - Check for illegal const type in expression with scoped name
          - Minor modifications of <primary_expr> production rule code

        Fri Nov 27 19:03:58 UTC 2009  Jeff Parsons  <j.parsons@vanderbilt.edu>

        * TAO_IDL/ast/ast_constant.cpp:
        * TAO_IDL/ast/ast_expression.cpp:

          Cosmetic changes.

        * TAO_IDL/fe/idl.yy:
        * TAO_IDL/fe/y.tab.h:
        * TAO_IDL/fe/y.tab.cpp:

          Added semantic actions for template argument list.

        Fri Nov 27 16:53:09 UTC 2009  Jeff Parsons <j.parsons@vanderbilt.edu>

        * TAO_IDL/fe/fe_template_interface_header.cpp:

          Minor change to avoid compilation error. This file will
          eventually be removed once some of its code has been
          relocated.

        * TAO_IDL/fe/y.tab.cpp:
        * TAO_IDL/fe/idl.yy:

          Cleaned up semantic action for <primary_expr> and tested
          lookup and narrowing of template module referenced in a
          template module instantiation.

        Wed Nov 25 20:19:10 UTC 2009  Jeff Parsons <j.parsons@vanderbilt.edu>

        * TAO_IDL/include/utl_err.h:
        * TAO_IDL/util/utl_err.cpp:
        * TAO_IDL/fe/y.tab.cpp:
        * TAO_IDL/fe/idl.yy:

          Start of semantic actions for instantiated template modules,
          and related error messages.

        Wed Nov 25 18:52:19 UTC 2009  Jeff Parsons  <j.parsons@vanderbilt.edu>

        * TAO_IDL/fe/idl.yy:
        * TAO_IDL/fe/y.tab.cpp:

          Fixed typos and some discrepancies between idl.yy and a
          hand-crafted y.tab.cpp, and regenerated.

        Wed Nov 25 17:58:50 UTC 2009  Jeff Parsons <j.parsons@vanderbilt.edu>

        * TAO_IDL/include/fe_utils.h:
        * TAO_IDL/fe/fe_utils.cpp:
        * TAO_IDL/fe/y.tab.cpp:
        * TAO_IDL/fe/idl.yy:

          Added support for the 'const' formal template parameter type.

        Wed Nov 25 01:35:38 UTC 2009  Jeff Parsons <j.parsons@vanderbilt.edu>

        * TAO_IDL/include/idl_global.h:
        * TAO_IDL/util/utl_global.cpp:
        * TAO_IDL/fe/y.tab.cpp:
        * TAO_IDL/fe/idl.yy:

          Fixed bugs in 'sequence<xxx>' template param checking.

        Tue Nov 24 21:20:55 UTC 2009  Jeff Parsons  <j.parsons@vanderbilt.edu>

        * TAO_IDL/fe/idl.yy:
        * TAO_IDL/fe/y.tab.cpp:

          Regenerated parsing code and recompiled.

        Tue Nov 24 20:54:20 UTC 2009  Jeff Parsons <j.parsons@vanderbilt.edu>

        * TAO_IDL/include/idl_global.h:
        * TAO_IDL/include/utl_err.h:
        * TAO_IDL/fe/y.tab.cpp:
        * TAO_IDL/fe/idl.yy:
        * TAO_IDL/util/utl_err.cpp:
        * TAO_IDL/util/utl_global.cpp:

          - Added check for mismatched 'sequence<xxx>' template param
          - Updated parse state values
          - Updated semantic action that creates a fixed module
          - Added semantic action to create a template module

        Tue Nov 24 18:32:54 UTC 2009  Jeff Parsons  <j.parsons@vanderbilt.edu>

        * TAO_IDL/ast/ast_param_holder.cpp:
        * TAO_IDL/ast/ast_template_module.cpp:
        * TAO_IDL/ast/ast_template_module_inst.cpp:
        * TAO_IDL/ast/ast_template_module_ref.cpp:
        * TAO_IDL/be/be_visitor.cpp:
        * TAO_IDL/fe/idl.yy:
        * TAO_IDL/fe/y.tab.cpp:
        * TAO_IDL/include/ast_param_holder.h:
        * TAO_IDL/include/ast_template_module.h:
        * TAO_IDL/include/ast_template_module_inst.h:
        * TAO_IDL/include/ast_template_module_ref.h:
        * TAO_IDL/include/idl_global.h:
        * TAO_IDL/util/utl_global.cpp:

          Fixed compile warnings and added semantic actions for
          formal template parameters.

        Mon Nov 23 20:37:29 UTC 2009  Jeff Parsons <j.parsons@vanderbilt.edu>

        * TAO_IDL/include/ast_template_module_ref.h:
        * TAO_IDL/ast/ast_template_module_ref.cpp:
        * TAO_IDL/be_include/be_template_module_ref.h:
        * TAO_IDL/be/be_template_module_ref.cpp:

          New files, containing the AST node type
          representing a reference to an IDL template
          module denoted by the IDL keyword 'alias'.

        * TAO_IDL/include/ast_visitor.h:
        * TAO_IDL/be/be_template_interface.cpp:
        * TAO_IDL/be/be_typedef.cpp:
        * TAO_IDL/be/be_visitor.cpp:
        * TAO_IDL/be/be_visitor_ccm_pre_proc.cpp:
        * TAO_IDL/ast/ast_template_interface.cpp:
        * TAO_IDL/be_include/be_visitor.h:
        * TAO_IDL/be_include/be_visitor_ccm_pre_proc.h:

          - Removed methods and code blocks referencing
            AST node types that have been removed.

          - Updated visit_* methods to frontend and backend
            visitor classes.

          - Updated create_* methods in generator classes.

        * orbsvcs/IFR_Service/ifr_visitor.h:
        * orbsvcs/IFR_Service/ifr_visitor.cpp:

          Update visit_* methods in base class visitor so
          backend IFR loader library will comple. New visit_*
          methods are not yet implemented.

        Fri Nov 20 20:22:23 UTC 2009  Jeff Parsons <j.parsons@vanderbilt.edu>

        * TAO_IDL/include/ast_module.h:
        * TAO_IDL/include/ast_connector.h:
        * TAO_IDL/ast/ast_connector.cpp:
        * TAO_IDL/ast/ast_module.cpp:
        * TAO_IDL/fe/y.tab.cpp:
        * TAO_IDL/fe/idl.yy:

          Removed more operations and includes that were caught
          by a build from scratch.

        Fri Nov 20 20:09:59 UTC 2009  Jeff Parsons <j.parsons@vanderbilt.edu>

        * TAO_IDL/include/ast_instantiated_connector.h:
        * TAO_IDL/include/ast_tmpl_port.h:
        * TAO_IDL/include/ast_tmpl_mirror_port.h:
        * TAO_IDL/ast/ast_instantiated_connector.cpp:
        * TAO_IDL/ast/ast_tmpl_mirror_port.cpp:
        * TAO_IDL/ast/ast_tmpl_port.cpp:
        * TAO_IDL/be_include/be_tmpl_port.h:
        * TAO_IDL/be_include/be_instantiated_connector.h:
        * TAO_IDL/be_include/be_tmpl_mirror_port.h:
        * TAO_IDL/be/be_tmpl_mirror_port.cpp:
        * TAO_IDL/be/be_tmpl_port.cpp:
        * TAO_IDL/be/be_instantiated_connector.cpp:

          Removed these files, the AST node types they contain
          are not relevant to the updated IDL3+ spec.

        * TAO_IDL/include/ast_template_module_inst.h:
        * TAO_IDL/ast/ast_template_module_inst.cpp:
        * TAO_IDL/be/be_template_module_inst.cpp:
        * TAO_IDL/be_include/be_template_module_inst.h:

          New files, containing the AST node type corresponding
          to an IDL template module declaration.

        * TAO_IDL/include/ast_generator.h:
        * TAO_IDL/include/fe_utils.h:
        * TAO_IDL/include/ast_mirror_port.h:
        * TAO_IDL/include/ast_provides.h:
        * TAO_IDL/include/ast_template_module.h:
        * TAO_IDL/include/ast_extended_port.h:
        * TAO_IDL/include/ast_uses.h:
        * TAO_IDL/include/ast_porttype.h:
        * TAO_IDL/include/ast_consumes.h:
        * TAO_IDL/include/ast_publishes.h:
        * TAO_IDL/include/ast_emits.h:
        * TAO_IDL/be/be_mirror_port.cpp:
        * TAO_IDL/be/be_extended_port.cpp:
        * TAO_IDL/be/be_generator.cpp:
        * TAO_IDL/be/be_porttype.cpp:
        * TAO_IDL/ast/ast_template_module.cpp:
        * TAO_IDL/ast/ast_generator.cpp:
        * TAO_IDL/ast/ast_extended_port.cpp:
        * TAO_IDL/ast/ast_mirror_port.cpp:
        * TAO_IDL/ast/ast_porttype.cpp:
        * TAO_IDL/be_include/be_generator.h:
        * TAO_IDL/be_include/be_porttype.h:
        * TAO_IDL/be_include/be_extended_port.h:
        * TAO_IDL/be_include/be_mirror_port.h:
        * TAO_IDL/fe/fe_utils.cpp:
        * TAO_IDL/fe/y.tab.cpp:
        * TAO_IDL/fe/idl.yy:

          Removed operations, args and blocks of code that are
          not relelvant to the updated IDL3+ spec.

        Thu Nov 19 20:47:43 UTC 2009  Jeff Parsons <j.parsons@vanderbilt.edu>

        * TAO_IDL/include/ast_param_holder.h:
        * TAO_IDL/include/ast_template_module.h:
        * TAO_IDL/be/be_param_holder.cpp:
        * TAO_IDL/be/be_template_module.cpp:
        * TAO_IDL/ast/ast_template_module.cpp:
        * TAO_IDL/ast/ast_param_holder.cpp:
        * TAO_IDL/be_include/be_template_module.h:
        * TAO_IDL/be_include/be_param_holder.h:

          New files, containing new AST node types
          corresponding to updates in the IDL3+ grammar.

        * TAO_IDL/be/be_visitor_component/context_ex_idl.cpp:
        * TAO_IDL/include/ast_generator.h:
        * TAO_IDL/include/ast_decl.h:
        * TAO_IDL/include/ast_connector.h:
        * TAO_IDL/be/be_enum_val.cpp:
        * TAO_IDL/be/be_template_interface.cpp:
        * TAO_IDL/be/be_connector.cpp:
        * TAO_IDL/be/be_generator.cpp:
        * TAO_IDL/ast/ast_connector.cpp:
        * TAO_IDL/ast/ast_template_common.cpp:
        * TAO_IDL/ast/ast_generator.cpp:
        * TAO_IDL/ast/ast_decl.cpp:
        * TAO_IDL/be_include/be_connector.h:
        * TAO_IDL/be_include/be_generator.h:

          Cosmetic changes.

        * TAO_IDL/be_include/be_typedef.h:
        * TAO_IDL/include/ast_typedef.h:
        * TAO_IDL/ast/ast_typedef.cpp:
        * TAO_IDL/be/be_typedef.cpp:
        * TAO_IDL/ast/ast_field.cpp:
        * TAO_IDL/include/ast_field.h:

          Made typedef nodes subclasses of field
          nodes, similar to argument, attribute,
          port, etc. so the case when these nodes
          refer to IDL template parameters can be
          handled in a consistent manner.

        Thu Nov 19 14:43:01 UTC 2009  Jeff Parsons  <j.parsons@vanderbilt.edu>

        * TAO_IDL/fe/idl.yy:
        * TAO_IDL/fe/y.tab.cpp:

          Fixed typos in generated file.

        Thu Nov 19 14:23:09 UTC 2009  Jeff Parsons  <j.parsons@vanderbilt.edu>

        * TAO_IDL/ast/ast_expression.cpp:

          Cosmetic changes.

        * TAO_IDL/fe/idl.yy:
        * TAO_IDL/fe/y.tab.cpp:

          Finished first cut of production rules for revised IDL3+ grammar.

        Mon Nov 16 20:22:50 UTC 2009  Jeff Parsons  <j.parsons@vanderbilt.edu>

        * TAO_IDL/fe/idl.yy:
        * TAO_IDL/fe/y.tab.cpp:

          Started adding new production rules for template modules.

        Mon Nov 16 15:28:01 UTC 2009  Jeff Parsons  <j.parsons@vanderbilt.edu>

        * TAO_IDL/fe/idl.ll:
        * TAO_IDL/fe/idl.yy:
        * TAO_IDL/fe/lex.yy.cpp:
        * TAO_IDL/fe/lex.yy.cpp.diff:
        * TAO_IDL/fe/y.tab.h:
        * TAO_IDL/fe/y.tab.cpp:

          Removed '$' as keyword and added keyword 'alias'. Regenerated flex and
          bison files.

Fri Dec 18 14:02:52 UTC 2009  Denis Budko  <denis.budko@remedy.nl>

        * tests/GIOP_Fragments/PMB_With_Fragments/run_test.pl:

          Added started argument for server.

Fri Dec 18 13:44:00 UTC 2009  Martin Corino  <mcorino@remedy.nl>

        * NEWS:
          Updated with fixed bugzilla entries.

Fri Dec 18 09:23:37 UTC 2009  Vladimir Zykov  <vladimir.zykov@prismtech.com>

        * tests/Bug_3790_Regression/server2.cpp:
          Simplified the test.

Thu Dec 17 13:12:00 UTC 2009  Martin Corino  <mcorino@remedy.nl>

        * tao/Leader_Follower.h:
        * tao/Leader_Follower.inl:
          Added method set_new_leader_generator().
          This resolves Bugzilla #3772.

Thu Dec 17 13:03:32 UTC 2009  Denis Budko  <denis.budko@remedy.nl>

        * interop-tests/wchar/run_test.pl:

          Test is converted to use new test framework
          and added to fuzz build.

Thu Dec 17 12:42:58 UTC 2009  Johnny Willemsen  <jwillemsen@remedy.nl>

        * tests/RTCORBA/Dynamic_Thread_Pool/run_test.pl:
          Fix fuzz

Thu Dec 17 11:45:30 UTC 2009  Denis Budko  <denis.budko@remedy.nl>

        * orbsvcs/tests/InterfaceRepo/IDL_Test/run_test.pl:
        * tests/Bug_3479_Regression/run_test.pl:
        * tests/TransportCurrent/IIOP/run_test.pl:
        * tests/TransportCurrent/Framework/run_test.pl:
        * tests/Client_Leaks/run_test.pl:
        * tests/ZIOP/run_test.pl:
        * tests/RTCORBA/Bug_3382_Regression/run_test.pl:

          Tests are converted to use new test framework
          and added to fuzz build.

Thu Dec 17 10:22:00 UTC 2009  Martin Corino  <mcorino@remedy.nl>

        * tao/GIOP_Message_Base.cpp:
          Fixed missing request id in logging of LocateRequest/LocateReply &
          CancelRequest.
          This fixed Bugzilla #2898.

Thu Dec 17 09:52:52 UTC 2009  Vladimir Zykov  <vladimir.zykov@prismtech.com>

        * tests/Bug_3790_Regression/simple_test.idl:
        * tests/Bug_3790_Regression/simple_test_i.cpp:
        * tests/Bug_3790_Regression/simple_test_i.h:
        * tests/Bug_3790_Regression/server.cpp:
        * tests/Bug_3790_Regression/server2.cpp:
        * tests/Bug_3790_Regression/run_test.pl:
        * tests/Bug_3790_Regression/README:
        * tests/Bug_3790_Regression/Bug_3790_Regression.mpc:
        * bin/tao_orb_tests.lst:
          Added a test for bug#3790 and scheduled it for run as not fixed.

Wed Dec 16 19:22:58 UTC 2009  Johnny Willemsen  <jwillemsen@remedy.nl>

        * tests/CDR/run_test.pl:
          Fuzz fix.

Wed Dec 16 15:19:22 UTC 2009  Denis Budko  <denis.budko@remedy.nl>

        * tests/RTCORBA/MT_Client_Protocol_Priority/run_test.pl:

          Fuzz fix.

Wed Dec 16 14:18:03 UTC 2009  Denis Budko  <denis.budko@remedy.nl>

        * orbsvcs/tests/Notify/Timeout/run_test.pl:
        * orbsvcs/tests/Notify/Bug_2561_Regression/run_test.pl:
        * orbsvcs/tests/Notify/MT_Dispatching/run_test.pl:
        * orbsvcs/tests/Notify/Bug_1385_Regression/run_test.pl:
        * orbsvcs/tests/Notify/Persistent_POA/run_test.pl:
        * orbsvcs/tests/Notify/Bug_3646a_Regression/run_test.pl:
        * orbsvcs/tests/Notify/Bug_3646c_Regression/run_test.pl:
        * orbsvcs/tests/Notify/Reconnecting/run_test.pl:
        * orbsvcs/tests/Notify/Basic/run_test_ipv6.pl:
        * orbsvcs/tests/Notify/Basic/run_test.pl:
        * orbsvcs/tests/Notify/Structured_Multi_Filter/run_test.pl:
        * orbsvcs/tests/Notify/Sequence_Multi_Filter/run_test.pl:
        * orbsvcs/tests/Notify/Bug_2415_Regression/run_test.pl:
        * orbsvcs/tests/Notify/Blocking/run_test.pl:
        * orbsvcs/tests/Notify/Sequence_Multi_ETCL_Filter/run_test.pl:
        * orbsvcs/tests/Notify/Lanes/run_test.pl:
        * orbsvcs/tests/Notify/Structured_Filter/run_test.pl:

          Removed AddLibPath where it isn't needed.

Wed Dec 16 13:03:30 UTC 2009  Vladimir Zykov  <vladimir.zykov@prismtech.com>

        * orbsvcs/tests/Notify/performance-tests/RedGreen/main.cpp:
        * orbsvcs/tests/Notify/performance-tests/RedGreen/RedGreen_Test.cpp:
        * orbsvcs/tests/Notify/performance-tests/RedGreen/run_test.pl:
          Changed the test so that event channel is destroyed before
          orb is shutdown. Removed unnecessary lib pathes from perl script.

Wed Dec 16 11:26:30 UTC 2009  Denis Budko  <denis.budko@remedy.nl>

        * orbsvcs/tests/Notify/Ordering/run_test.pl:

          Fuzz fix.

Tue Dec 15 12:20:00 UTC 2009  Martin Corino  <mcorino@remedy.nl>

        * tests/OBV/Supports/server.cpp:
          Fuzz fix.

Mon Dec 14 15:13:30 UTC 2009  Denis Budko  <denis.budko@remedy.nl>

        * orbsvcs/tests/Simple_Naming/run_test_ipv6.pl:
        * orbsvcs/tests/Simple_Naming/run_test.pl:
        * orbsvcs/tests/Redundant_Naming/run_test.pl:
        * orbsvcs/tests/Bug_1437_Regression/run_test.pl:
        * orbsvcs/examples/ImR/Combined_Service/run_test.pl:

          Tests are converted to use new test framework
          and added to fuzz build.

Mon Dec 14 14:52:39 UTC 2009  Abdul Sowayan  <sowayan@gmail.com>

        * NEWS:

          Updated to note iPhone/iPod Touch support.

Mon Dec 14 14:50:00 UTC 2009  Martin Corino  <mcorino@remedy.nl>

        * tests/OBV/Supports/server.cpp:
        * tests/OBV/Supports/Supports_Test_impl.cpp:
          Fixed faulty shutdown code causing server crashes.

Mon Dec 14 13:58:58 UTC 2009  Johnny Willemsen  <jwillemsen@remedy.nl>

        * TAO_IDL/be/be_visitor_component/context_svh.cpp:
        * TAO_IDL/be/be_visitor_component/context_svs.cpp:
        * TAO_IDL/be/be_visitor_component/servant_svh.cpp:
        * TAO_IDL/be/be_visitor_component/servant_svs.cpp:
          Simplified generated code

Mon Dec 14 07:26:58 UTC 2009  Johnny Willemsen  <jwillemsen@remedy.nl>

        * tests/Exposed_Policies/RT_Properties.{h,cpp}:
          Fixed unicode runtime problems

Fri Dec 11 18:27:58 UTC 2009  Johnny Willemsen  <jwillemsen@remedy.nl>

        * tao/Makefile.am:
          Removed all duplicated files

Fri Dec 11 16:36:58 UTC 2009  Yan Dai  <dai_y@ociweb.com>

        * tao/Valuetype/ValueBase.h:

          Removed explicit type specification for indirection flag to
          fix implicit constant conversion overflow warning.

Fri Dec 11 12:27:25 UTC 2009  Denis Budko  <denis.budko@remedy.nl>

        * orbsvcs/tests/Bug_2285_Regression/run_test2.pl:
        * orbsvcs/tests/Bug_2285_Regression/server2.cpp:
        * orbsvcs/tests/Notify/Ordering/run_test.pl:
        * orbsvcs/tests/Notify/MC/run_test.pl:
        * orbsvcs/tests/Notify/Discarding/run_test.pl:
        * orbsvcs/tests/ImplRepo/Bug_689_Regression/run_test.pl:
        * orbsvcs/tests/ImplRepo/NameService/run_test.pl:
        * orbsvcs/tests/ImplRepo/run_test.pl:
        * orbsvcs/tests/Bug_2248_Regression/server.cpp:
        * orbsvcs/tests/Bug_2248_Regression/run_test.pl:
        * tests/AlternateIIOP/run_test.pl:
        * examples/Load_Balancing/run_test.pl:

          Tests are converted to use new test framework
          and added to fuzz build.

Fri Dec 11 09:58:33 UTC 2009  Denis Budko  <denis.budko@remedy.nl>

        * orbsvcs/tests/Notify/performance-tests/scripts/1_Path_Period_0_Lanes/run_test.pl:
        * orbsvcs/tests/Notify/performance-tests/scripts/3_Path_Period_10ms_Lanes/run_test.pl:
        * orbsvcs/tests/Notify/performance-tests/scripts/Max_Throughput/Notify_RTCORBA/run_test.pl:
        * orbsvcs/tests/Notify/performance-tests/scripts/Max_Throughput/Notify/run_test.pl:

          Tests are converted to use new test framework
          and added to fuzz build.

Fri Dec 11 09:26:32 UTC 2009  Denis Budko  <denis.budko@remedy.nl>

        * orbsvcs/tests/AVStreams/Simple_Two_Stage_With_QoS/run_test.pl:
        * orbsvcs/tests/AVStreams/Pluggable/run_test.pl:
        * orbsvcs/tests/AVStreams/Simple_Two_Stage/run_test.pl:
        * orbsvcs/tests/Notify/performance-tests/scripts/1_Path_Period_0_Lanes/run_all.pl:
        * orbsvcs/tests/Notify/performance-tests/scripts/3_Path_Period_10ms_Lanes/run_all.pl:
        * orbsvcs/tests/Notify/performance-tests/scripts/run_all.pl:
        * orbsvcs/tests/Notify/performance-tests/scripts/Max_Throughput/run_all.pl:
        * orbsvcs/tests/LoadBalancing/GenericFactory/Manage_Object_Group/run_test.pl:
        * orbsvcs/examples/Notify/Lanes/run_test.pl:
        * tests/IOR_Endpoint_Hostnames/run_test.pl:
        * tests/Optimized_Connection/run_test.pl:

          Tests are converted to use new test framework
          and added to fuzz build.

Fri Dec 11 09:01:58 UTC 2009  Johnny Willemsen  <jwillemsen@remedy.nl>

        * tao/Makefile.am:
          BooleanSeq.pidl was listed twice

Thu Dec 10 18:42:58 UTC 2009  Johnny Willemsen  <jwillemsen@remedy.nl>

        * bin/tao_other_tests.lst:
        * bin/tao_orb_tests.lst:
          Removed FUZZ completely, fuzz now checks all run*.pl scripts

Thu Dec 10 16:45:24 UTC 2009  Denis Budko  <denis.budko@remedy.nl>

        * bin/tao_other_tests.lst:
        * bin/tao_orb_tests.lst:

          Tests are added to fuzz build.

Thu Dec 10 15:06:28 UTC 2009  Denis Budko  <denis.budko@remedy.nl>

        * orbsvcs/examples/ImR/Combined_Service/run_test.pl:

          Test is converted to use new test framework
          and added to fuzz build.

Thu Dec 10 14:54:27 UTC 2009  Denis Budko  <denis.budko@remedy.nl>

        * orbsvcs/tests/Simple_Naming/run_test_ipv6.pl:
        * orbsvcs/tests/Simple_Naming/run_test_ffp.pl:
        * orbsvcs/tests/Simple_Naming/run_test.pl:
        * orbsvcs/tests/Security/ssliop_corbaloc/run_test.pl:
        * orbsvcs/tests/Redundant_Naming/run_test.pl:
        * orbsvcs/tests/ImplRepo/Bug_689_Regression/run_test.pl:
        * orbsvcs/tests/ImplRepo/NameService/run_test.pl:
        * orbsvcs/tests/Bug_3444_Regression/run_test_ipv6.pl:
        * orbsvcs/tests/Bug_3444_Regression/run_test.pl:
        * orbsvcs/examples/ImR/Advanced/TestServer.cpp:
        * orbsvcs/examples/ImR/Advanced/server_main.cpp:
        * orbsvcs/examples/ImR/Advanced/TestServer.h:
        * orbsvcs/examples/ImR/Advanced/TestClient.cpp:
        * orbsvcs/examples/ImR/Advanced/manager_main.cpp:
        * orbsvcs/examples/ImR/Advanced/TestClient.h:
        * orbsvcs/examples/ImR/Advanced/run_test.pl:
        * tests/Bug_1635_Regression/run_test.pl:
        * tests/Bug_1628_Regression/run_test.pl:

          Tests are converted to use new test framework
          and added to fuzz build.

Thu Dec 10 13:45:00 UTC 2009  Martin Corino  <mcorino@remedy.nl>

        * tests/Oneways_Invoking_Twoways/Client_Task.cpp:
        * tests/Oneways_Invoking_Twoways/Receiver_i.cpp:
        * tests/Oneways_Invoking_Twoways/client.cpp:
        * tests/Oneways_Invoking_Twoways/Sender_i.cpp:
        * tests/Oneways_Invoking_Twoways/run_test.pl:
          Changed to fix problems with incorrect shutdown sequence
          (see Bugzilla 2068).

Thu Dec 10 13:03:58 UTC 2009  Johnny Willemsen  <jwillemsen@remedy.nl>

        Reverted change below, causes correct code to break

        Thu Dec 10 11:57:58 UTC 2009  Johnny Willemsen  <jwillemsen@remedy.nl>

        * tao/String_Manager_T.h
        * tao/String_Sequence_Element_T.h:
          Added private operator != and ==, the string elements
          just behave like char*, so != and == on them is illegal
          and doesn't check the strings itself. If any user has
          done this without realizing this, this change will now
          give the user a compile error

Thu Dec 10 12:42:00 UTC 2009  Martin Corino  <mcorino@remedy.nl>

        * tests/BiDirectional_DelayedUpcall/client.cpp:
        * tests/BiDirectional_DelayedUpcall/test_i.cpp:
        * tests/BiDirectional_DelayedUpcall/test_i.inl:
        * tests/BiDirectional_DelayedUpcall/test_i.h:
          Fixed problem with illegal send of request after ORB shutdown.
          See Bugzilla 2068.

Thu Dec 10 11:57:58 UTC 2009  Johnny Willemsen  <jwillemsen@remedy.nl>

        * tao/String_Manager_T.h
        * tao/String_Sequence_Element_T.h:
          Added private operator != and ==, the string elements
          just behave like char*, so != and == on them is illegal
          and doesn't check the strings itself. If any user has
          done this without realizing this, this change will now
          give the user a compile error

        * tao/TransportCurrent/Transport_Current.h:
          Layout change

Thu Dec 10 11:42:00 UTC 2009  Martin Corino  <mcorino@remedy.nl>

        * tests/Bug_3672_Regression/ami_test_i.cpp:
        * tests/Bug_3672_Regression/client.cpp:
          Test did not work correctly on Windows because of timing issues.
          Changed to work correctly on Windows also.

Thu Dec 10 10:32:56 UTC 2009  Denis Budko  <denis.budko@remedy.nl>

        * orbsvcs/tests/Bug_1436_Regression/run_test.pl:
        * orbsvcs/tests/Notify/performance-tests/scripts/1_Path_Period_0_Lanes/run_test.pl:
        * orbsvcs/tests/Notify/performance-tests/scripts/Paths_vs_Throughput/run_notify.pl:
        * orbsvcs/tests/Notify/performance-tests/scripts/Paths_vs_Throughput/run_high_path.pl:
        * orbsvcs/tests/Notify/performance-tests/scripts/Paths_vs_Throughput/run_test.pl:
        * orbsvcs/tests/Notify/performance-tests/scripts/Paths_vs_Throughput/run_other_paths.pl:
        * orbsvcs/tests/Notify/performance-tests/scripts/3_Path_Period_10ms_Lanes/run_test.pl:
        * orbsvcs/tests/Notify/performance-tests/scripts/Max_Throughput/Notify_RTCORBA/run_test.pl:
        * orbsvcs/tests/Notify/performance-tests/scripts/Max_Throughput/3_Hops_RTCORBA/run_test.pl:
        * orbsvcs/tests/Notify/performance-tests/scripts/Max_Throughput/Notify/run_test.pl:
        * orbsvcs/tests/Notify/performance-tests/scripts/Max_Throughput/3_Hops/run_test.pl:
        * orbsvcs/tests/FT_App/run_test_demo.pl:
        * orbsvcs/tests/FT_App/run_test_fault_consumer.pl:
        * orbsvcs/tests/FT_App/run_test_detector.pl:
        * orbsvcs/tests/Event/Mcast/Complex/run_test.pl:
        * orbsvcs/tests/Bug_2248_Regression/client.cpp:
        * orbsvcs/tests/InterfaceRepo/IFR_Inheritance_Test/main.cpp:
        * orbsvcs/tests/InterfaceRepo/IFR_Inheritance_Test/run_test.pl:
        * orbsvcs/tests/Bug_1437_Regression/run_test.pl:

          Tests are converted to use new test framework
          and added to fuzz build.

Wed Dec  9 21:16:38 UTC 2009  Yan Dai  <dai_y@ociweb.com>

        * tests/OBV/Indirection/MessengerClient.cpp:

          Fixed a warning.

Wed Dec  9 14:24:58 UTC 2009  Johnny Willemsen  <jwillemsen@remedy.nl>

        * TAO_IDL/be/be_visitor_component/servant_svs.cpp:
          Don't generate code to call get_receptacle_policy, that doesn't
          do anything

Wed Dec  9 12:45:58 UTC 2009  Martin Corino  <mcorino@remedy.nl>

        * tests/OBV/Supports/Supports_Test.mpc:
          Removed dummy_label dependency.

        * tests/OBV/Supports/client.cpp:
          Fixed small coding error.

        * bin/tao_orb_tests.lst:
          Reenabled the OBV/Supports test again since the reason for
          excluding this one seems to have been invalidated (long ago?).

Wed Dec  9 12:31:58 UTC 2009  Vladimir Zykov  <vladimir.zykov@prismtech.com>

        * tests/Bug_1361_Regression/Server_Thread_Pool.h:
          Fixed fuzz error.

Wed Dec  9 10:38:26 UTC 2009  Denis Budko  <denis.budko@remedy.nl>

        * orbsvcs/tests/CosEvent/Basic/run_test.pl:
        * orbsvcs/tests/Bug_1334_Regression/run_test.pl:
        * orbsvcs/tests/Notify/Timeout/run_test.pl:
        * orbsvcs/tests/Notify/Bug_2561_Regression/run_test.pl:
        * orbsvcs/tests/Notify/MT_Dispatching/run_test.pl:
        * orbsvcs/tests/Notify/Bug_1385_Regression/run_test.pl:
        * orbsvcs/tests/Notify/Persistent_POA/run_test.pl:
        * orbsvcs/tests/Notify/Bug_3646a_Regression/run_test.pl:
        * orbsvcs/tests/Notify/performance-tests/Filter/run_test.pl:
        * orbsvcs/tests/Notify/performance-tests/RedGreen/run_test.pl:
        * orbsvcs/tests/Notify/Bug_3646c_Regression/run_test.pl:
        * orbsvcs/tests/Notify/Ordering/run_test.pl:
        * orbsvcs/tests/Notify/Reconnecting/run_test.pl:
        * orbsvcs/tests/Notify/Basic/run_test_ipv6.pl:
        * orbsvcs/tests/Notify/Basic/run_test.pl:
        * orbsvcs/tests/Notify/Structured_Multi_Filter/run_test.pl:
        * orbsvcs/tests/Notify/Sequence_Multi_Filter/run_test.pl:
        * orbsvcs/tests/Notify/Blocking/run_test.pl:
        * orbsvcs/tests/Notify/Bug_2415_Regression/run_test.pl:
        * orbsvcs/tests/Notify/Sequence_Multi_ETCL_Filter/run_test.pl:
        * orbsvcs/tests/Notify/MC/run_test.pl:
        * orbsvcs/tests/Notify/Lanes/run_test.pl:
        * orbsvcs/tests/Notify/Discarding/run_test.pl:
        * orbsvcs/tests/Notify/Structured_Filter/run_test.pl:
        * orbsvcs/tests/Event/Basic/run_test.pl:
        * orbsvcs/tests/Event/Performance/run_test.pl:
        * orbsvcs/tests/Bug_1393_Regression/run_test.pl:
        * orbsvcs/tests/InterfaceRepo/Duplicate_Typedef_Test/run_test.pl:
        * performance-tests/RTCorba/Multiple_Endpoints/Single_Endpoint/run-test.pl:
        * performance-tests/RTCorba/Multiple_Endpoints/Orb_Per_Priority/run-test.pl:
        * tests/Bug_1476_Regression/run_test.pl:
        * tests/Bug_2494_Regression/run_test.pl:
        * tests/POA/Adapter_Activator/run_test.pl:
        * tests/POA/Explicit_Activation/run_test.pl:
        * tests/POA/On_Demand_Activation/run_test.pl:
        * tests/POA/Loader/run_test.pl:
        * tests/POA/On_Demand_Loading/run_test.pl:
        * tests/POA/Reference_Counted_Servant/run_test.pl:
        * tests/Collocation/run_test.pl:
        * tests/CodeSets/simple/run_test.pl:
        * tests/CSD_Strategy_Tests/Broken/run_test.pl:
        * tests/CSD_Strategy_Tests/TP_Test_1/run_test.pl:
        * tests/CSD_Strategy_Tests/TP_Test_2/run_test.pl:
        * tests/CSD_Strategy_Tests/TP_Test_3/run_test.pl:
        * tests/CSD_Strategy_Tests/TP_Test_4/run_test.pl:
        * tests/CSD_Strategy_Tests/TP_Test_Dynamic/run_test.pl:
        * tests/CSD_Strategy_Tests/TP_Test_Static/run_test.pl:
        * tests/Oneway_Timeouts/run_test.pl:
        * tests/Smart_Proxies/On_Demand/server.cpp:
        * tests/Smart_Proxies/On_Demand/run_test.pl:
        * tests/Smart_Proxies/Benchmark/server.cpp:
        * tests/Smart_Proxies/Benchmark/run_test.pl:
        * tests/Bug_3676_Regression/run_test.pl:
        * tests/Oneways_Invoking_Twoways/run_test_svc.pl:
        * bin/tao_other_tests.lst:

          Tests are converted to use new test framework
          and added to fuzz build.

Wed Dec  9 10:11:14 UTC 2009  Johnny Willemsen  <jwillemsen@remedy.nl>

        * TAO_IDL/be/be_provides.cpp:
        * TAO_IDL/be/be_visitor_ccm_pre_proc.cpp:
        * TAO_IDL/be/be_visitor_component/servant_svh.cpp:
        * TAO_IDL/be/be_visitor_component/servant_svs.cpp:
        * TAO_IDL/be/be_visitor_interface/interface_ex_idl.cpp:
          Merged changes from local facets branch

        Mon Dec  7 17:51:59 UTC 2009  William R. Otte  <wotte@dre.vanderbilt.edu>

        * TAO_IDL/be/be_visitor_component/servant_svs.cpp:

          filled in connection logic.

        Sat Dec  5 05:35:27 UTC 2009  William R. Otte  <wotte@dre.vanderbilt.edu>

        * TAO_IDL/be/be_provides.cpp:
        * TAO_IDL/be/be_visitor_component/servant_svh.cpp:
        * TAO_IDL/be/be_visitor_component/servant_svs.cpp:

          Codegen modifications for local facets.

        Wed Dec  2 00:45:54 UTC 2009  William R. Otte  <wotte@dre.vanderbilt.edu>

        * TAO_IDL/be/be_visitor_ccm_pre_proc.cpp:
        * TAO_IDL/be/be_visitor_interface/interface_ex_idl.cpp:

          preliminary changes.

Wed Dec  9 09:40:10 UTC 2009  Vladimir Zykov  <vladimir.zykov@prismtech.com>

        * tests/Bug_1361_Regression/Echo_Caller.cpp:
        * tests/Bug_1361_Regression/Echo_Caller.h:
        * tests/Bug_1361_Regression/server.cpp:
        * tests/Bug_1361_Regression/Server_Thread_Pool.cpp:
        * tests/Bug_1361_Regression/Server_Thread_Pool.h:
        * tests/Bug_1361_Regression/run_test.pl:
          Changed the test so that it doesn't shutdown the orb until
          all threads are done with the remote calls. Substantially
          extended the time for server shutdown since threads in server's
          pool don't handle shutdown message until they send all (50)
          remote messages.

        * tao/ORB_Core.cpp:
        * tao/Messaging/Messaging_Policy_i.cpp:
        * tao/ORB_Core.h:
          This fixes Bug#3682. SYNC_WITH_TRANSPORT is now really
          default synch scope policy in TAO.

        * tao/Leader_Follower_Flushing_Strategy.cpp:
          Changed the code to poll the reactor instead of running
          it indefinitely. This fixes bug#3697.

Wed Dec  9 08:15:14 UTC 2009  Johnny Willemsen  <jwillemsen@remedy.nl>

        * TAO_IDL/be/be_codegen.cpp:
          Use Error in error messages so that the scoreboard flags them red

Wed Dec  9 05:55:14 UTC 2009  Yan Dai  <dai_y@ociweb.com>

        * orbsvcs/tests/LoadBalancing/GenericFactory/DeadMemberDetection_App_Ctrl/run_test.pl:
        * orbsvcs/tests/LoadBalancing/GenericFactory/DeadMemberDetection_Inf_Ctrl/run_test.pl:
        * tests/OBV/Indirection/Factory.h:
        * tests/OBV/Indirection/Factory.cpp:
        * tests/OBV/Indirection/Messenger.idl:
        * tests/OBV/Indirection/Messenger_i.h:
        * tests/OBV/Indirection/Messenger_i.cpp:

          Fixed fuzz errors.

Wed Dec  9 01:27:54 UTC 2009  Yan Dai  <dai_y@ociweb.com>

        * tao/CDR.cpp:

          Fixed bugs in offset() method that incorrectly calculate
          the offset when multiple message blocks are chained.

        * tao/Valuetype/ValueBase.cpp:

          Fixed bugs that should use the offset() to find out a
          position to current wr_ptr.

        * tests/OBV/Indirection/Factory.h:
        * tests/OBV/Indirection/Factory.cpp:
        * tests/OBV/Indirection/Messenger.idl:
        * tests/OBV/Indirection/MessengerClient.cpp:
        * tests/OBV/Indirection/MessengerServer.cpp:
        * tests/OBV/Indirection/Messenger_i.h:
        * tests/OBV/Indirection/Messenger_i.cpp:

          Added test case to verify the fixes. The new test case
          send longer message that would involve multiple message
          blocks with indirection in output CDR stream.

Tue Dec  8 10:25:47 UTC 2009  Denis Budko  <denis.budko@remedy.nl>

        * orbsvcs/tests/Notify/Bug_2561_Regression/run_test.pl:
        * orbsvcs/tests/Notify/Persistent_POA/Structured_Supplier.cpp:
        * orbsvcs/tests/Notify/Persistent_POA/run_test.pl:
        * orbsvcs/tests/Notify/Blocking/run_test.pl:
        * orbsvcs/tests/Notify/Structured_Filter/Structured_Consumer.cpp:
        * orbsvcs/tests/Notify/Structured_Filter/Structured_Supplier.cpp:
        * orbsvcs/tests/Notify/Structured_Filter/run_test.pl:
        * orbsvcs/tests/FT_App/run_test_rmregistry.pl:
        * orbsvcs/tests/FT_App/run_test_registry.pl:
        * orbsvcs/tests/EC_Throughput/run_test_overflow.pl:
        * orbsvcs/tests/EC_Throughput/run_test.pl:
        * orbsvcs/tests/Event/Mcast/RTEC_MCast_Federated/run_test.pl:
        * orbsvcs/tests/Event/Mcast/Simple/run_test.pl:
        * orbsvcs/tests/Event/Mcast/Two_Way/run_test.pl:
        * orbsvcs/tests/Bug_2248_Regression/client.cpp:
        * orbsvcs/tests/Bug_2248_Regression/run_test.pl:
        * orbsvcs/tests/RTCosScheduling/run_test.pl:
        * orbsvcs/tests/Bug_3387_Regression/run_test.pl:
        * performance-tests/CSD_Strategy/TestApps/run_test.pl:
        * performance-tests/RTCorba/Thread_Pool/run_test.pl:
        * tests/CSD_Strategy_Tests/Broken/run_test.pl:
        * tests/CSD_Strategy_Tests/TP_Test_4/run_test.pl:

          Tests are converted to use new test framework
          and added to fuzz build.

Tue Dec  8 09:20:00 UTC 2009  Johnny Willemsen  <jwillemsen@remedy.nl>

        * bin/tao_orb_tests.lst:
          Added OBV/Indirection

Mon Dec  7 18:22:00 UTC 2009  Martin Corino  <mcorino@remedy.nl>

        * bin/tao_orb_tests.lst:
          Removed !FIXED_BUGS_ONLY for Bug_3672_Regression test.

Mon Dec  7 10:40:49 UTC 2009  Denis Budko  <denis.budko@remedy.nl>

        * orbsvcs/tests/Notify/Basic/run_test_ipv6.pl:
        * bin/tao_other_tests.lst:

          Test is converted to use new test framework
          and added to fuzz build.

Mon Dec  7 10:19:29 UTC 2009  Denis Budko  <denis.budko@remedy.nl>

        * tests/IOR_Endpoint_Hostnames/run_test.pl:
        * examples/Quoter/run_test.pl:
        * examples/Callback_Quoter/run_test.pl:

          Tests are converted to use new test framework
          and added to fuzz build.

Mon Dec  7 09:59:08 UTC 2009  Denis Budko  <denis.budko@remedy.nl>

        * orbsvcs/tests/EC_Custom_Marshal/run_test.pl:
        * orbsvcs/tests/COIOP_Naming_Test/run_test.pl:
        * orbsvcs/tests/Notify/Timeout/run_test.pl:
        * orbsvcs/tests/Notify/MT_Dispatching/run_test.pl:
        * orbsvcs/tests/Notify/Bug_1385_Regression/run_test.pl:
        * orbsvcs/tests/Notify/Reconnecting/run_test.pl:
        * orbsvcs/tests/Notify/Basic/run_test.pl:
        * orbsvcs/tests/Notify/Structured_Multi_Filter/Structured_Consumer.cpp:
        * orbsvcs/tests/Notify/Structured_Multi_Filter/Structured_Supplier.cpp:
        * orbsvcs/tests/Notify/Structured_Multi_Filter/run_test.pl:
        * orbsvcs/tests/Notify/Sequence_Multi_Filter/run_test.pl:
        * orbsvcs/tests/Notify/Sequence_Multi_ETCL_Filter/run_test.pl:
        * orbsvcs/tests/Notify/MC/Structured_Consumer.cpp:
        * orbsvcs/tests/Notify/MC/test_monitor.cpp:
        * orbsvcs/tests/Notify/MC/Structured_Supplier.cpp:
        * orbsvcs/tests/Notify/MC/run_test.pl:
        * orbsvcs/tests/ImplRepo/Bug_689_Regression/run_test.pl:
        * orbsvcs/tests/ImplRepo/scale/run_test.pl:
        * orbsvcs/tests/ImplRepo/Bug_2604_Regression/MessengerServer.cpp:
        * orbsvcs/tests/ImplRepo/Bug_2604_Regression/MessengerClient.cpp:
        * orbsvcs/tests/ImplRepo/Bug_2604_Regression/run_test.pl:
        * orbsvcs/tests/ImplRepo/NameService/run_test.pl:
        * orbsvcs/tests/ImplRepo/locked/run_test.pl:
        * orbsvcs/tests/ImplRepo/ReconnectServer/run_test.pl:
        * orbsvcs/tests/ImplRepo/run_test.pl:
        * orbsvcs/tests/Bug_3598b_Regression/run_test.pl:
        * tests/Muxing/run_test.pl:
        * tests/ORB_init/Portspan/run_test.pl:
        * tests/Bug_2183_Regression/run_test.pl:
        * tests/Bug_3108_Regression/run_test.pl:
        * bin/tao_other_tests.lst:
        * bin/tao_orb_tests.lst:
        * utils/nslist/run_test.pl:
        * examples/Quoter/run_test.pl:
        * examples/Callback_Quoter/run_test.pl:
        * examples/Persistent_Grid/run_test.pl:

          Tests are converted to use new test framework
          and added to fuzz build.

Mon Dec  7 09:43:00 UTC 2009  Martin Corino  <mcorino@remedy.nl>

        * ACE_wrappers/TAO/tao/Thread_Lane_Resources.h:
        * ACE_wrappers/TAO/tao/Thread_Lane_Resources.cpp:
        * ACE_wrappers/TAO/tao/Thread_Lane_Resources_Manager.h:
        * ACE_wrappers/TAO/tao/Default_Thread_Lane_Resources_Manager.cpp:
        * ACE_wrappers/TAO/tao/Default_Thread_Lane_Resources_Manager.h:
        * ACE_wrappers/TAO/tao/RTCORBA/RT_Thread_Lane_Resources_Manager.h:
        * ACE_wrappers/TAO/tao/RTCORBA/RT_Thread_Lane_Resources_Manager.cpp:
        * ACE_wrappers/TAO/tao/ORB_Core.cpp:

          Replaced #clear_rw_transports() method by #close_all_transports() method.
          This fixes Bugzilla #3672.
          Like before this behaviour is controlled by ORB option
          ORBDropRepliesDuringShutdown, which by default is on.


Mon Dec  7 07:13:34 UTC 2009  Yan Dai  <dai_y@ociweb.com>

        * tao/PortableServer/Upcall_Wrapper.cpp:
        * tao/operation_details.cpp:

          Fixed the issue that the indirection maps are not cleaned up
          when marshal/demarshal raises exception.

Sun Dec  6 03:07:00 UTC 2009  Yan Dai  <dai_y@ociweb.com>

        * tao/Makefile.am:

          Updated automake files.

        * tests/OBV/Indirection/Makefile.am:

          Added automake file.

        * tao/CDR.inl:

          Made copy constructor initialize indirection maps instead of
          using assign operator.

Sun Dec  6 02:01:17 UTC 2009  Yan Dai  <dai_y@ociweb.com>

        * tao/Intrusive_Ref_Count_Object_T.h:
        * tao/Intrusive_Ref_Count_Object_T.inl:
        * tao/Intrusive_Ref_Count_Object_T.cpp:

          Added missing files in last commit.

Fri Dec  4 23:18:26 UTC 2009  Yan Dai  <dai_y@ociweb.com>

        Merged in valuetype repository id and value indirection support
        on both input and output streams from OCI (RT #13502).

        * MPC/config/valuetype_out_indirection.mpb:

          Added mpc feature to optionally turn on the indirection
          support on valuetype outgoing message. It defaults to
          be enabled. To be compatible with previous version TAO,
          run mwc.pl with
          "-features valuetype_out_indirection=0" to disable it.

        * TAO_IDL/be/be_visitor_valuebox/valuebox_cs.cpp:
        * TAO_IDL/be/be_visitor_valuetype/valuetype_cs.cpp:

          Modified the valuetype unmarshall method to support
          value indirection.

        * tao/Intrusive_Ref_Count_Object_T.h:
        * tao/Intrusive_Ref_Count_Object_T.inl:
        * tao/Intrusive_Ref_Count_Object_T.cpp:

          Added wrapper for non reference counted data type to provide reference
          counting feature so it can use the TAO_Intrusive_Ref_Count_Handle
          smart-pointer.

        * tao/CDR.h:
        * tao/CDR.inl:
        * tao/CDR.cpp:

          - Used smart point hash map for indirection maps (repository id, value
            and codebase_url). The maps map the already read/written values.
          - Added methods to access/update indirection maps.
          - The maps are only created when valuetype data is marshalled or
            demarshalled.
          - Added offset(pos) method to calculate the offset between provided
            position and current wr_ptr.

        * tao/Valuetype/ValueBase.h:
        * tao/Valuetype/ValueBase.inl:
        * tao/Valuetype/ValueBase.cpp:

          - Added repository id and value indirection support on both input
            and output stream.
          - The codebase_url indirection on input stream was also added but
            not tested. TAO does not support codebase currently and the codebase
            url indirection is added for future support. TAO can read codebase_url
            from other ORB implementation but the codebase_url is not used.
          - Used TAO_HAS_VALUETYPE_OUT_INDIRECTION define to optionally turn on
            and off the outgoing message indirection. This is to support backward
            compatibility.

        * tao/operation_details.cpp:
        * tao/PortableServer/Upcall_Wrapper.cpp:

          Cleaned the indirection maps after marshalling/unmarshalling complete.

        * tao/AnyTypeCode/Any_Impl_T.cpp:
        * tao/AnyTypeCode/Any_Unknown_IDL_Type.cpp:

          Made Any_Unknown_IDL_Type cdr share the maps from input cdr of the
          request so previous indirection can be used during unmarshalling any.

        * tao/DynamicInterface/AMH_DSI_Response_Handler.cpp:

          Updated unmarshal method based on tao_idl changes.

        * tao/Valuetype.mpc:
        * tao/PortableServer.mpc:
        * tao/tao.mpc:

          Added dependency on valuetype_out_indirection feature.

        * tests/OBV/indirection/Factory.h:
        * tests/OBV/indirection/Factory.cpp:
        * tests/OBV/indirection/Messenger.idl:
        * tests/OBV/indirection/MessengerClient.cpp:
        * tests/OBV/indirection/MessengerServer.cpp:
        * tests/OBV/indirection/Messenger_i.h:
        * tests/OBV/indirection/Messenger_i.cpp:
        * tests/OBV/indirection/README:
        * tests/OBV/indirection/indirection.mpc:
        * tests/OBV/indirection/run_test.pl:

          - Added automation test for indirection support in TAO. The test
            based on the JacORB demo/value test. This can also be used for
            interoperability test between TAO and JacORB.
          - The indirection test with truncatable value was added. The test
            passed between the TAO server and client, but the interoperablity
            test with JacORB failed. It also failed on previous TAO version.

        * NEWS:

          Added entry for indirection support.

Fri Dec  4 21:00:38 UTC 2009  Yan Dai  <dai_y@ociweb.com>

        * orbsvcs/orbsvcs/LoadBalancing/LB_LoadManager.h:
        * orbsvcs/orbsvcs/LoadBalancing/LB_LoadManager.cpp:
        * orbsvcs/LoadBalancer/LoadManager.cpp:

          Renamed init() to initialize() to avoid Warning W8022 on borland build.

Fri Dec  4 17:25:32 UTC 2009  Yan Dai  <dai_y@ociweb.com>

        * NEWS:

          Added entry for member validation feature in LoadBalancer.

        * orbsvcs/orbsvcs/LoadBalancing/LB_LoadManager.h:

          Disable Warning 8022 for borland build.

        * orbsvcs/tests/LoadBalancing/GenericFactory/DeadMemberDetection_App_Ctrl/run_test.pl:
        * orbsvcs/tests/LoadBalancing/GenericFactory/DeadMemberDetection_Inf_Ctrl/DeadMemberDetection_Inf_Ctrl.mpc:
        * orbsvcs/tests/LoadBalancing/GenericFactory/DeadMemberDetection_Inf_Ctrl/run_test.pl:

          Fixed fuzz warning and errors.

Fri Dec  4 12:39:26 UTC 2009  Denis Budko  <denis.budko@remedy.nl>

        * tests/Bug_1869_Regression/client.cpp:

          Tests is converted to use new test framework
          and added to fuzz build.

Fri Dec  4 09:13:17 UTC 2009  Denis Budko  <denis.budko@remedy.nl>

        * orbsvcs/tests/Notify/Persistent_Filter/run_test.pl:
        * orbsvcs/tests/Notify/Discarding/run_test.pl:
        * orbsvcs/tests/FT_App/run_test_notifier.pl:
        * orbsvcs/tests/Event/Basic/run_test.pl:
        * orbsvcs/tests/Event/Performance/run_test.pl:
        * orbsvcs/tests/Event/UDP/run_test.pl:
        * orbsvcs/tests/Bug_3387_Regression/MessengerServer.cpp:
        * orbsvcs/tests/Bug_3387_Regression/MessengerClient.cpp:
        * orbsvcs/tests/Bug_3387_Regression/run_test.pl:
        * orbsvcs/tests/Bug_2247_Regression/run_test.pl:
        * orbsvcs/tests/EC_MT_Mcast/run_test.pl:
        * performance-tests/Protocols/run_senders.pl:
        * tests/Server_Leaks/run_test.pl:
        * tests/Bug_1551_Regression/server.cpp:
        * tests/Bug_1551_Regression/run_test.pl:
        * tests/IOR_Endpoint_Hostnames/list_interfaces.cpp:
        * tests/Connection_Purging/run_test.pl:
        * tests/Bug_1482_Regression/server.cpp:
        * tests/Bug_1482_Regression/run_test.pl:
        * tests/ForwardOnceUponException/run_test.pl:
        * tests/Reliable_Oneways/run_test.pl:
        * examples/Buffered_Oneways/run_test.pl:
        * examples/ior_corbaloc/run_test.pl:

          Tests are converted to use new test framework
          and added to fuzz build.

Thu Dec  3 12:15:35 UTC 2009  Johnny Willemsen  <jwillemsen@remedy.nl>

        * tao/Incoming_Message_Stack.h:
          C++ Builder 2010 fix

        * tao/Object.cpp:
          Extended some debug info

        * tao/Synch_Invocation.cpp:
          Removed intermediate variable

        * tao/TAO_Internal.cpp:
          Improved debug message

        * tao/ZIOP/ZIOP.cpp:
          Layout change

Thu Dec  3 09:24:17 UTC 2009  Denis Budko  <denis.budko@remedy.nl>

        * orbsvcs/tests/Bug_1395_Regression/run_test.pl:
        * orbsvcs/tests/CosEvent/Basic/run_test.pl:
        * orbsvcs/tests/Bug_2285_Regression/run_test2.pl:
        * orbsvcs/tests/Bug_2285_Regression/run_test.pl:
        * orbsvcs/tests/AVStreams/Full_Profile/run_test.pl:
        * orbsvcs/tests/Notify/Bug_1884_Regression/run_test.pl:
        * orbsvcs/tests/Notify/Ordering/run_test.pl:
        * orbsvcs/tests/Notify/Bug_2415_Regression/run_test.pl:
        * orbsvcs/tests/Notify/ThreadPool/run_test.pl:
        * orbsvcs/tests/FT_App/FT_ReplicaFactory_i.cpp:
        * orbsvcs/tests/FT_App/FT_TestReplica_i.h:
        * orbsvcs/tests/FT_App/run_test_rmnotifier.pl:
        * orbsvcs/tests/FT_App/FT_ReplicaFactory_i.h:
        * orbsvcs/tests/FT_App/FT_TestReplica_i.cpp:
        * orbsvcs/tests/FT_App/run_test_basic.pl:
        * tests/Nested_Upcall_Crash/run_test.pl:

          Tests are converted to use new test framework
          and added to fuzz build.

Thu Dec  3 08:09:35 UTC 2009  Johnny Willemsen  <jwillemsen@remedy.nl>

        * orbsvcs/IFR_Service/IFR_Service.mpc:
          Enable mcpp support

Thu Dec  3 08:03:35 UTC 2009  Johnny Willemsen  <jwillemsen@remedy.nl>

        * orbsvcs/Naming_Service/NT_Naming_Server.cpp:
          Unicode fixes

        * orbsvcs/orbsvcs/Notify/Delivery_Request.h:
          Doxygen fix

        * orbsvcs/orbsvcs/Trader/Trader.h:
          Fix for CB2010

Wed Dec  2 20:56:35 UTC 2009  Yan Dai  <dai_y@ociweb.com>

        * orbsvcs/tests/LoadBalancing/GenericFactory/DeadMemberDetection_App_Ctrl/run_test.pl:
        * orbsvcs/tests/LoadBalancing/GenericFactory/DeadMemberDetection_Inf_Ctrl/run_test.pl:

          Tests are converted to use new test framework.

        * orbsvcs/tests/LoadBalancing/GenericFactory/DeadMemberDetection_App_Ctrl/DeadMemberDetection_App_Ctrl.mpc:
        * orbsvcs/tests/LoadBalancing/GenericFactory/DeadMemberDetection_Inf_Ctrl/DeadMemberDetection_Inf_Ctrl.mpc:

          Removed duplicated sections introduced from merging.

Wed Dec  2 18:17:04 UTC 2009  Yan Dai  <dai_y@ociweb.com>

        Merged in changes from OCI (RT #13323) that added member validation
        feature to LoadBalancer.

        * orbsvcs/LoadBalancer/LoadManager.cpp:

          - Added parameters for passing ping_timeout in milliseconds('-t') and
            ping_interval in seconds('-i'). The default ping_interval is 0 which means
            no validation thread launched. Otherwise each member will be validated
            periodically. The period is in a range of minimum ping_interval and maximum
            num of members validated * ping_timeout.
          - The LB service needs be run with RW strategy configuration to ensure the
            next_member, add_member and remove_member performed sequentially.

            static Client_Strategy_Factory "-ORBWaitStrategy rw -ORBTransportMuxStrategy
              exclusive -ORBConnectStrategy blocked -ORBConnectionHandlerCleanup 1"
            static Resource_Factory "-ORBFlushingStrategy blocking"

        * orbsvcs/orbsvcs/LoadBalancing/LB_LoadManager.h:
        * orbsvcs/orbsvcs/LoadBalancing/LB_LoadManager.cpp:

          Added the validate thread to periodically ping all active members. The
          liveliness status update is done in PortableGroup lib. The next_member()
          query strategy to get next member in maximum number of existing members
          times until an active member is found.

        * orbsvcs/orbsvcs/LoadBalancing/LB_RoundRobin.h:
        * orbsvcs/orbsvcs/LoadBalancing/LB_RoundRobin.cpp:

          Fixed issue that the location index from previous next_member() call may
          not be valid if the member list is changed since then. Now it verify if
          the list is changed and then find the next member based on RR strategy.

        * orbsvcs/orbsvcs/PortableGroup/PG_GenericFactory.cpp:

          Added try/catch around factory delete_object() call,
          because it's possible the factory is down. This could
          be called in the path of remove_member after member
          liveliness check failure. Without try/catch, the member
          will not be removed cleanly.

        * orbsvcs/orbsvcs/PortableGroup/PG_MemberInfo.h:

          Added liveliness status and group reference.

        * orbsvcs/orbsvcs/PortableGroup/PG_ObjectGroupManager.h:
        * orbsvcs/orbsvcs/PortableGroup/PG_ObjectGroupManager.cpp:

          Added more functions to support member validation and inactive
          member removing.

        * orbsvcs/tests/LoadBalancing/GenericFactory/DeadMemberDetection_App_Ctrl/Basic.h:
        * orbsvcs/tests/LoadBalancing/GenericFactory/DeadMemberDetection_App_Ctrl/Basic.cpp:
        * orbsvcs/tests/LoadBalancing/GenericFactory/DeadMemberDetection_App_Ctrl/DeadMemberDetection_App_Ctrl.mpc:
        * orbsvcs/tests/LoadBalancing/GenericFactory/DeadMemberDetection_App_Ctrl/LB_server.h:
        * orbsvcs/tests/LoadBalancing/GenericFactory/DeadMemberDetection_App_Ctrl/LB_server.cpp:
        * orbsvcs/tests/LoadBalancing/GenericFactory/DeadMemberDetection_App_Ctrl/Makefile.am:
        * orbsvcs/tests/LoadBalancing/GenericFactory/DeadMemberDetection_App_Ctrl/README:
        * orbsvcs/tests/LoadBalancing/GenericFactory/DeadMemberDetection_App_Ctrl/Test.idl:
        * orbsvcs/tests/LoadBalancing/GenericFactory/DeadMemberDetection_App_Ctrl/client.cpp:
        * orbsvcs/tests/LoadBalancing/GenericFactory/DeadMemberDetection_App_Ctrl/non-windows.conf:
        * orbsvcs/tests/LoadBalancing/GenericFactory/DeadMemberDetection_App_Ctrl/run_test.pl:
        * orbsvcs/tests/LoadBalancing/GenericFactory/DeadMemberDetection_App_Ctrl/server.cpp:
        * orbsvcs/tests/LoadBalancing/GenericFactory/DeadMemberDetection_App_Ctrl/svc.conf:
        * orbsvcs/tests/LoadBalancing/GenericFactory/DeadMemberDetection_App_Ctrl/windows.conf:
        * orbsvcs/tests/LoadBalancing/GenericFactory/DeadMemberDetection_Inf_Ctrl/DeadMemberDetection_Inf_Ctrl.mpc:
        * orbsvcs/tests/LoadBalancing/GenericFactory/DeadMemberDetection_Inf_Ctrl/Factory.h:
        * orbsvcs/tests/LoadBalancing/GenericFactory/DeadMemberDetection_Inf_Ctrl/Factory.cpp:
        * orbsvcs/tests/LoadBalancing/GenericFactory/DeadMemberDetection_Inf_Ctrl/Factory_Map.h:
        * orbsvcs/tests/LoadBalancing/GenericFactory/DeadMemberDetection_Inf_Ctrl/Factory_Map.cpp:
        * orbsvcs/tests/LoadBalancing/GenericFactory/DeadMemberDetection_Inf_Ctrl/Factory_Struct.h:
        * orbsvcs/tests/LoadBalancing/GenericFactory/DeadMemberDetection_Inf_Ctrl/Factory_Struct.cpp:
        * orbsvcs/tests/LoadBalancing/GenericFactory/DeadMemberDetection_Inf_Ctrl/LB_Factory_Server.h:
        * orbsvcs/tests/LoadBalancing/GenericFactory/DeadMemberDetection_Inf_Ctrl/LB_Factory_Server.cpp:
        * orbsvcs/tests/LoadBalancing/GenericFactory/DeadMemberDetection_Inf_Ctrl/LB_server.h:
        * orbsvcs/tests/LoadBalancing/GenericFactory/DeadMemberDetection_Inf_Ctrl/LB_server.cpp:
        * orbsvcs/tests/LoadBalancing/GenericFactory/DeadMemberDetection_Inf_Ctrl/Makefile.am:
        * orbsvcs/tests/LoadBalancing/GenericFactory/DeadMemberDetection_Inf_Ctrl/README:
        * orbsvcs/tests/LoadBalancing/GenericFactory/DeadMemberDetection_Inf_Ctrl/Simple.h:
        * orbsvcs/tests/LoadBalancing/GenericFactory/DeadMemberDetection_Inf_Ctrl/Simple.cpp:
        * orbsvcs/tests/LoadBalancing/GenericFactory/DeadMemberDetection_Inf_Ctrl/Test.idl:
        * orbsvcs/tests/LoadBalancing/GenericFactory/DeadMemberDetection_Inf_Ctrl/client.cpp:
        * orbsvcs/tests/LoadBalancing/GenericFactory/DeadMemberDetection_Inf_Ctrl/factory_server.cpp:
        * orbsvcs/tests/LoadBalancing/GenericFactory/DeadMemberDetection_Inf_Ctrl/non-windows.conf:
        * orbsvcs/tests/LoadBalancing/GenericFactory/DeadMemberDetection_Inf_Ctrl/run_test.pl:
        * orbsvcs/tests/LoadBalancing/GenericFactory/DeadMemberDetection_Inf_Ctrl/server.cpp:
        * orbsvcs/tests/LoadBalancing/GenericFactory/DeadMemberDetection_Inf_Ctrl/windows.conf:
        * orbsvcs/tests/LoadBalancing/GenericFactory/DeadMemberDetection_Inf_Ctrl/windows.conf.xml:

          Added validation tests.

        * orbsvcs/tests/LoadBalancing/GenericFactory/Manage_Object_Group/server.cpp:

          Fixed a bug that deleted object after orb shutdown and got
          COMM_FAILURE.

        * bin/tao_other_tests.lst:

          Added validation tests.

Wed Dec  2 14:01:43 UTC 2009  Vladimir Zykov  <vladimir.zykov@prismtech.com>

        * tao/RTCORBA/RT_ORB_Loader.cpp:
          Improved a little the fix for bug#3755. There is no need
          to obtain a global gestalt.

Wed Dec  2 12:32:36 UTC 2009  Denis Budko  <denis.budko@remedy.nl>

        * examples/RTScheduling/Fixed_Priority_Scheduler/run_test.pl:
        * examples/RTScheduling/MIF_Scheduler/run_test.pl:

          Tests are converted to use new test framework
          and added to fuzz build.

Wed Dec  2 10:07:02 UTC 2009  Denis Budko  <denis.budko@remedy.nl>

        * orbsvcs/tests/Bug_1630_Regression/run_test.pl:
        * orbsvcs/tests/BiDir_CORBALOC/run_test.pl:
        * orbsvcs/tests/HTIOP/Hello/run_test.pl:
        * orbsvcs/tests/HTIOP/AMI/run_test.pl:
        * orbsvcs/tests/HTIOP/BiDirectional/run_test.pl:
        * orbsvcs/tests/Notify/Lanes/README:
        * orbsvcs/tests/Notify/Lanes/run_test.pl:
        * orbsvcs/tests/FaultTolerance/IOGR/run_test.pl:
        * orbsvcs/tests/FaultTolerance/GroupRef_Manipulation/run_test.pl:
        * orbsvcs/tests/Bug_2248_Regression/run_test.pl:
        * orbsvcs/tests/Time/run_test.pl:
        * DevGuideExamples/Multithreading/ThreadPerConnection/run_test.pl:
        * tests/IOR_Endpoint_Hostnames/list_interfaces.cpp:
        * tests/IOR_Endpoint_Hostnames/generate_ior.cpp:
        * tests/IOR_Endpoint_Hostnames/IOR_Endpoint_Hostnames.mpc:
        * tests/IOR_Endpoint_Hostnames/Makefile.am:
        * tests/IOR_Endpoint_Hostnames/run_test.pl:
        * tests/Bug_1482_Regression/run_test.pl:
        * tests/Nested_Upcall_Crash/run_test.pl:
        * examples/RTScheduling/Fixed_Priority_Scheduler/run_test.pl:
        * examples/RTScheduling/MIF_Scheduler/run_test.pl:
        * examples/AMH/Sink_Server/run_test.pl:
        * examples/Load_Balancing/run_test.pl:

          Tests are converted to use new test framework
          and added to fuzz build.

Tue Dec  1 10:44:09 UTC 2009  Denis Budko  <denis.budko@remedy.nl>

        * orbsvcs/examples/Notify/Subscribe/run_test.pl:
        * orbsvcs/examples/Notify/Filter/run_test.pl:

          Test are converted to use new test framework
          and added to fuzz build.

Tue Dec  1 09:48:38 UTC 2009  Denis Budko  <denis.budko@remedy.nl>

        * orbsvcs/tests/Log/Basic_Log_Test/run_test.pl:
        * orbsvcs/tests/Bug_2800_Regression/client.cpp:
        * orbsvcs/tests/Bug_2800_Regression/run_test_federated.pl:
        * orbsvcs/tests/Bug_2800_Regression/nsmain.cpp:
        * orbsvcs/tests/Bug_2800_Regression/run_test.pl:
        * orbsvcs/tests/Bug_2777_Regression/run_test.pl:
        * orbsvcs/tests/Bug_3673_Regression/client.cpp:
        * orbsvcs/tests/Bug_3673_Regression/nsmain.cpp:
        * orbsvcs/tests/Bug_3673_Regression/run_test.pl:
        * orbsvcs/tests/Notify/performance-tests/scripts/Max_Throughput/2_Hops_RTCORBA/run_test.pl:
        * orbsvcs/tests/Notify/performance-tests/scripts/Max_Throughput/Colocated_RTCORBA/run_test.pl:
        * orbsvcs/tests/Notify/performance-tests/scripts/Max_Throughput/2_Hops/run_test.pl:
        * orbsvcs/tests/Notify/performance-tests/scripts/Max_Throughput/Colocated/run_test.pl:
        * orbsvcs/tests/EC_Multiple/run_test.pl:
        * orbsvcs/tests/Interoperable_Naming/run_test.pl:
        * orbsvcs/tests/LoadBalancing/GenericFactory/Manage_Object_Group/run_test.pl:
        * orbsvcs/examples/ORT/run_test.pl:
        * orbsvcs/examples/Notify/Subscribe/run_test.pl:
        * orbsvcs/examples/Notify/ThreadPool/run_test.pl:
        * orbsvcs/examples/Notify/Lanes/run_test.pl:
        * orbsvcs/examples/Notify/Filter/run_test.pl:
        * orbsvcs/examples/RtEC/IIOPGateway/consumerec_crash.pl:
        * orbsvcs/examples/RtEC/IIOPGateway/run_test.pl:
        * orbsvcs/examples/RtEC/Simple/run_test.pl:
        * performance-tests/POA/Create_Reference/run_test.pl:
        * tests/Faults/run_test_pp.pl:
        * tests/Faults/run_test.pl:
        * tests/Muxing/run_test.pl:
        * tests/Bug_1020_Regression/run_test.pl:
        * tests/Bug_1551_Regression/run_test.pl:
        * tests/Bug_2678_Regression/run_test.pl:
        * tests/MT_Server/run_test.pl:
        * tests/LongUpcalls/run_test.pl:
        * tests/Bug_2084_Regression/run_test.pl:
        * tests/Bug_1482_Regression/run_test.pl:
        * tests/Bug_3547_Regression/run_test.pl:
        * tests/Bug_2174_Regression/run_test.pl:
        * tests/POA/TIE/server.cpp:
        * tests/POA/TIE/run_test.pl:
        * tests/MT_BiDir/run_test.pl:
        * tests/Monitor/Marshal_Buffer/run_test.pl:
        * tests/Bug_1869_Regression/client.cpp:
        * tests/Bug_1869_Regression/run_test.pl:
        * tests/Nested_Upcall_Crash/run_test.pl:
        * tests/ORB_Local_Config/run_tests_all.pl:
        * tests/Bug_1269_Regression/run_test.pl:
        * tests/Forwarding/run_test.pl:
        * bin/tao_orb_tests.lst:

          Test are converted to use new test framework
          and added to fuzz build.

Thu Nov 26 02:02:24 UTC 2009  Douglas C. Schmidt  <schmidt@dre.vanderbilt.edu>

        * docs/documentation.html: Updated the documentation to reference
          the "CORBA Explained Simply" and "Advanced CORBA Programming
          with C++" books.  Thanks to Joost Kraaijeveld <J dot Kraaijeveld
          at Askesis dot nl> for motivating this.

Mon Nov 30 12:26:32 UTC 2009  Denis Budko  <denis.budko@remedy.nl>

        * orbsvcs/tests/Simple_Naming/run_test.pl:
        * orbsvcs/tests/AVStreams/Full_Profile/run_test.pl:
        * tests/Oneway_Timeouts/run_test.pl:
        * tests/Parallel_Connect_Strategy/run_test.pl:
        * tests/Muxed_GIOP_Versions/run_test.pl:
        * tests/InterOp-Naming/run_test.pl:
        * bin/tao_other_tests.lst:

          Test are converted to use new test framework
          and added to fuzz build.

Mon Nov 30 10:01:49 UTC 2009  Denis Budko  <denis.budko@remedy.nl>

        * orbsvcs/performance-tests/LoadBalancing/LBPerf/RPS/default_configuration.pl:
        * orbsvcs/performance-tests/LoadBalancing/LBPerf/RPS/run_test.pl:
        * orbsvcs/performance-tests/LoadBalancing/LBPerf/CPU/default_configuration.pl:
        * orbsvcs/tests/Simple_Naming/run_test.pl:
        * orbsvcs/tests/Security/InsecureReferences/run_test.pl:
        * orbsvcs/tests/Security/MT_IIOP_SSL/run_test.pl:
        * orbsvcs/tests/Security/Bug_1107_Regression/run_test.pl:
        * orbsvcs/tests/Security/Crash_Test/run_test.pl:
        * orbsvcs/tests/Security/MT_SSLIOP/run_test_harsh.pl:
        * orbsvcs/tests/Security/MT_SSLIOP/run_test_heavy.pl:
        * orbsvcs/tests/Security/MT_SSLIOP/run_test.pl:
        * orbsvcs/tests/AVStreams/Component_Switching/run_test.pl:
        * orbsvcs/tests/AVStreams/Full_Profile/run_test.pl:
        * orbsvcs/tests/AVStreams/Bidirectional_Flows/run_test.pl:
        * orbsvcs/tests/AVStreams/Simple_Two_Stage_With_QoS/run_test.pl:
        * orbsvcs/tests/AVStreams/Latency/run_test.pl:
        * orbsvcs/tests/AVStreams/Asynch_Three_Stage/run_test.pl:
        * orbsvcs/tests/AVStreams/Pluggable/run_test.pl:
        * orbsvcs/tests/AVStreams/Simple_Three_Stage/run_test.pl:
        * orbsvcs/tests/AVStreams/Simple_Two_Stage/run_test.pl:
        * orbsvcs/tests/AVStreams/Multiple_Flows/run_test.pl:
        * orbsvcs/tests/AVStreams/Multicast/run_test.pl:
        * orbsvcs/tests/AVStreams/Multicast_Full_Profile/run_test.pl:
        * orbsvcs/tests/AVStreams/Modify_QoS/run_test.pl:
        * orbsvcs/tests/AVStreams/Pluggable_Flow_Protocol/run_test.pl:
        * orbsvcs/tests/Notify/performance-tests/scripts/Paths_vs_Throughput/run_all.pl:
        * orbsvcs/tests/Notify/performance-tests/RedGreen/run_test.pl:
        * orbsvcs/tests/Notify/XML_Persistence/run_test.pl:
        * orbsvcs/tests/InterfaceRepo/IFR_Test/run_test.pl:
        * orbsvcs/tests/InterfaceRepo/Persistence_Test/run_test.pl:
        * orbsvcs/tests/InterfaceRepo/Duplicate_Typedef_Test/run_test.pl:
        * orbsvcs/tests/InterfaceRepo/Latency_Test/run_test.pl:
        * orbsvcs/tests/InterfaceRepo/IFR_Self_Recursive_IDL_Test/run_test.pl:
        * performance-tests/POA/Implicit_Activation/run_test.pl:
        * performance-tests/RTCorba/Multiple_Endpoints/Single_Endpoint/run-test.pl:
        * performance-tests/RTCorba/Multiple_Endpoints/Orb_Per_Priority/run-test.pl:
        * performance-tests/Callback/run_test.pl:
        * performance-tests/Latency/AMH_Single_Threaded/run_test.pl:
        * performance-tests/Cubit/TAO/MT_Cubit/run_test.pl:
        * performance-tests/Cubit/TAO/DII_Cubit/run_test.pl:
        * performance-tests/Cubit/TAO/IDL_Cubit/run_test.pl:
        * tests/Big_Twoways/run_test.pl:
        * tests/Bug_2918_Regression/run_test.pl:
        * tests/Strategies/run_test.pl:
        * tests/Bug_1482_Regression/run_test.pl:
        * tests/Portable_Interceptors/Benchmark/run_test.pl:
        * tests/Xt_Stopwatch/run_test.pl:
        * tests/Multiple/run_test.pl:
        * tests/CSD_Strategy_Tests/Broken/run_test.pl:
        * tests/CSD_Strategy_Tests/TP_Test_4/run_test.pl:
        * tests/Oneway_Timeouts/client.cpp:
        * tests/Oneway_Timeouts/server.cpp:
        * tests/Oneway_Timeouts/run_test.pl:
        * tests/Smart_Proxies/Policy/server.cpp:
        * tests/Smart_Proxies/Policy/run_test.pl:
        * tests/Bug_1270_Regression/run_test.pl:
        * tests/Parallel_Connect_Strategy/run_test.pl:
        * tests/Muxed_GIOP_Versions/run_test.pl:
        * tests/Connect_Strategy_Test/run_test.pl:
        * tests/Big_Oneways/run_test.pl:
        * tests/Bug_1627_Regression/server.cpp:
        * tests/Bug_1627_Regression/run_test.pl:
        * tests/InterOp-Naming/run_test.pl:
        * tests/Nested_Upcall_Crash/run_test.pl:
        * tests/Bug_1269_Regression/client.cpp:
        * tests/Bug_1269_Regression/run_test.pl:

          Test are converted to use new test framework
          and added to fuzz build.

Sun Nov 29 13:06:02 CST 2009  Johnny Willemsen  <jwillemsen@remedy.nl>

        * TAO version 1.7.5 released.

Fri Nov 27 10:12:19 UTC 2009  Denis Budko  <denis.budko@remedy.nl>

        * tests/OctetSeq/run_test1.pl:
        * tests/OctetSeq/run_test2.pl:
        * tests/Bug_3000_Regression/run_test.pl:
        * tests/Bug_3068_Regression/run_test.pl:
        * tests/Bug_2186_Regression/run_test.pl:

          Test are converted to use new test framework
          and added to fuzz build.

Thu Nov 26 12:45:41 UTC 2009  Denis Budko  <denis.budko@remedy.nl>

        * tests/Bug_1361_Regression/run_test.pl:

          Test is converted to use new test framework and added to fuzz build.

Thu Nov 26 10:42:27 UTC 2009  Denis Budko  <denis.budko@remedy.nl>

        * orbsvcs/tests/Notify/Bug_3646c_Regression/server.cpp:
        * orbsvcs/tests/InterfaceRepo/Bug_2962_Regression/client.cpp:
        * orbsvcs/tests/LoadBalancing/GenericFactory/Infrastructure_Controlled/LB_server.cpp:
        * orbsvcs/tests/LoadBalancing/GenericFactory/Application_Controlled/LB_server.cpp:

          Tests are converted to use new test framework and added to fuzz build.

Wed Nov 25 15:37:11 UTC 2009  Vladimir Zykov  <vladimir.zykov@prismtech.com>

        * tao/RTCORBA/RT_ORB_Loader.cpp:
          Additional fix for bug#3755. Previous fix broke Bug_3755_Regression.

Wed Nov 25 12:07:28 UTC 2009  Denis Budko  <denis.budko@remedy.nl>

        * orbsvcs/tests/InterfaceRepo/Application_Test/run_test.pl:
        * orbsvcs/tests/LoadBalancing/GenericFactory/Infrastructure_Controlled/run_test.pl:
        * orbsvcs/tests/LoadBalancing/GenericFactory/Application_Controlled/run_test.pl:
        * tests/AMI_Buffering/run_timeout.pl:
        * tests/AMI_Buffering/run_message_count.pl:
        * tests/AMI_Buffering/run_buffer_size.pl:
        * tests/AMI_Buffering/run_timeout_reactive.pl:
        * tests/AMI_Buffering/run_test.pl:
        * tests/Bug_1495_Regression/run_test.pl:
        * tests/Oneway_Buffering/run_timeout.pl:
        * tests/Oneway_Buffering/run_message_count.pl:
        * tests/Oneway_Buffering/run_buffer_size.pl:
        * tests/Oneway_Buffering/run_timeout_reactive.pl:
        * tests/Oneway_Buffering/run_test.pl:

          Tests are converted to use new test framework and added to fuzz build.

Wed Nov 25 09:01:20 UTC 2009  Denis Budko  <denis.budko@remedy.nl>

        * orbsvcs/DevGuideExamples/ValueTypes/Notify/supplier.cpp:
        * orbsvcs/DevGuideExamples/ValueTypes/Notify/consumer.cpp:
        * orbsvcs/DevGuideExamples/ValueTypes/Notify/run_test.pl:
        * orbsvcs/DevGuideExamples/Security/PolicyControllingApp/MessengerServer.cpp:
        * orbsvcs/DevGuideExamples/Security/PolicyControllingApp/MessengerClient.cpp:
        * orbsvcs/DevGuideExamples/Security/PolicyControllingApp/run_test.pl:
        * orbsvcs/DevGuideExamples/Security/SecurityUnawareApp/MessengerServer.cpp:
        * orbsvcs/DevGuideExamples/Security/SecurityUnawareApp/MessengerClient.cpp:
        * orbsvcs/DevGuideExamples/Security/SecurityUnawareApp/run_test.pl:
        * orbsvcs/DevGuideExamples/NotifyService/QoSProperties/MessengerServer.cpp:
        * orbsvcs/DevGuideExamples/NotifyService/QoSProperties/MessengerClient.cpp:
        * orbsvcs/DevGuideExamples/NotifyService/QoSProperties/run_test.pl:
        * orbsvcs/DevGuideExamples/NotifyService/Filtering/run_test.pl:
        * orbsvcs/DevGuideExamples/NotifyService/Messenger/MessengerServer.cpp:
        * orbsvcs/DevGuideExamples/NotifyService/Messenger/MessengerClient.cpp:
        * orbsvcs/DevGuideExamples/NotifyService/Messenger/run_test.pl:
        * orbsvcs/DevGuideExamples/NotifyService/OfferSubscriptions/MessengerServer.cpp:
        * orbsvcs/DevGuideExamples/NotifyService/OfferSubscriptions/run_test.pl:
        * orbsvcs/DevGuideExamples/NotifyService/SupplierSideNC/MessengerServer.cpp:
        * orbsvcs/DevGuideExamples/NotifyService/SupplierSideNC/run_test.pl:
        * orbsvcs/DevGuideExamples/NotifyService/EventSequence/MessengerServer.cpp:
        * orbsvcs/DevGuideExamples/NotifyService/EventSequence/MessengerClient.cpp:
        * orbsvcs/DevGuideExamples/NotifyService/EventSequence/run_test.pl:
        * orbsvcs/DevGuideExamples/NotifyService/RTNotify/MessengerConsumer.cpp:
        * orbsvcs/DevGuideExamples/NotifyService/RTNotify/MessengerServer.cpp:
        * orbsvcs/DevGuideExamples/NotifyService/RTNotify/MessengerClient.cpp:
        * orbsvcs/DevGuideExamples/NotifyService/RTNotify/run_test.pl:
        * orbsvcs/DevGuideExamples/NamingService/corbaname_Messenger/MessengerServer.cpp:
        * orbsvcs/DevGuideExamples/NamingService/corbaname_Messenger/run_test.pl:
        * orbsvcs/DevGuideExamples/NamingService/Naming_Client/run_test.pl:
        * orbsvcs/DevGuideExamples/NamingService/Messenger/run_test.pl:
        * orbsvcs/DevGuideExamples/NamingService/corbaloc_Messenger/run_test.pl:
        * orbsvcs/DevGuideExamples/NamingService/Naming_Context_Ext/MessengerServer.cpp:
        * orbsvcs/DevGuideExamples/NamingService/Naming_Context_Ext/MessengerClient.cpp:
        * orbsvcs/DevGuideExamples/NamingService/Naming_Context_Ext/run_test.pl:
        * orbsvcs/DevGuideExamples/PortableInterceptors/PICurrent_NameService/run_test.pl:
        * orbsvcs/tests/Notify/Bug_3646c_Regression/server.cpp:
        * orbsvcs/tests/Notify/Bug_3646c_Regression/run_test.pl:
        * orbsvcs/tests/InterfaceRepo/Bug_3200_Regression/run_test.pl:
        * orbsvcs/tests/InterfaceRepo/IDL3_Test/run_test.pl:
        * orbsvcs/tests/InterfaceRepo/Bug_3495_Regression/run_test.pl:
        * orbsvcs/tests/InterfaceRepo/Application_Test/ifr_dii_client.cpp:
        * orbsvcs/tests/InterfaceRepo/Application_Test/server.cpp:
        * orbsvcs/tests/InterfaceRepo/Application_Test/ifr_dii_client.h:
        * orbsvcs/tests/InterfaceRepo/Application_Test/run_test.pl:
        * orbsvcs/examples/Log/Basic/run_test.pl:
        * orbsvcs/examples/Log/Event/run_test.pl:
        * orbsvcs/examples/Log/RTEvent/run_test.pl:
        * orbsvcs/examples/Log/Notify/run_test.pl:
        * orbsvcs/examples/CosEC/TypedSimple/Consumer.cpp:
        * orbsvcs/examples/CosEC/TypedSimple/run_test.pl:
        * orbsvcs/examples/CosEC/RtEC_Based/tests/Multiple/run_test2.pl:
        * orbsvcs/examples/CosEC/RtEC_Based/tests/Multiple/run_test.pl:
        * orbsvcs/examples/LoadBalancing/run_test.pl:
        * performance-tests/Sequence_Latency/DSI/run_test.pl:
        * performance-tests/Sequence_Latency/Deferred/run_test.pl:
        * performance-tests/Sequence_Latency/Thread_Pool/run_test.pl:
        * performance-tests/Sequence_Latency/Single_Threaded/default_configuration.pl:
        * performance-tests/Sequence_Latency/Single_Threaded/run_test.pl:
        * performance-tests/Sequence_Latency/DII/run_test.pl:
        * performance-tests/Sequence_Latency/AMH_Single_Threaded/run_test.pl:
        * performance-tests/Sequence_Latency/AMI/run_test.pl:
        * performance-tests/Sequence_Latency/Thread_Per_Connection/run_test.pl:
        * performance-tests/RTCorba/Oneways/Reliable/client_test.pl:
        * performance-tests/RTCorba/Oneways/Reliable/server.cpp:
        * performance-tests/RTCorba/Oneways/Reliable/run_test.pl:
        * performance-tests/Latency/Thread_Pool/run_test.pl:
        * performance-tests/Latency/Single_Threaded/default_configuration.pl:
        * performance-tests/Latency/Single_Threaded/run_test.pl:
        * performance-tests/Latency/Thread_Per_Connection/run_test.pl:
        * tests/GIOP_Fragments/Java_Big_Request/run_test.pl:
        * tests/GIOP_Fragments/Java_Big_Reply/run_test.pl:
        * examples/CSD_Strategy/ThreadPool2/run_test.pl:
        * examples/CSD_Strategy/ThreadPool4/run_test.pl:
        * examples/CSD_Strategy/ThreadPool5/run_test.pl:
        * examples/CSD_Strategy/ThreadPool6/run_test.pl:

          Tests are converted to use new test framework and added to fuzz build.

Tue Nov 24 13:12:18 UTC 2009  Vladimir Zykov  <vladimir.zykov@prismtech.com>

        * tao/RTCORBA/RT_ORB_Loader.cpp:
          Fixed a problem with double initialization of RTCORBA library.
          This is required for bug#3755. Now RTCORBA initialization code
          checks whether it's initialized in current gestalt.

Tue Nov 24 10:29:27 UTC 2009  Denis Budko  <denis.budko@remedy.nl>

        * orbsvcs/tests/EC_Mcast/run_test.pl:
        * orbsvcs/tests/Notify/Bug_3646a_Regression/run_test.pl:
        * orbsvcs/tests/Notify/Bug_3688_Regression/run_test.pl:
        * orbsvcs/tests/Notify/Validate_Client/run_test.pl:
        * orbsvcs/tests/InterfaceRepo/Bug_3155_Regression/run_test.pl:
        * orbsvcs/tests/InterfaceRepo/Bug_3174_Regression/run_test.pl:
        * orbsvcs/tests/InterfaceRepo/Bug_2962_Regression/client.cpp:
        * orbsvcs/tests/InterfaceRepo/Bug_2962_Regression/run_test.pl:
        * orbsvcs/tests/InterfaceRepo/Union_Forward_Test/run_test.pl:
        * DevGuideExamples/AMH_AMI/inner_server.cpp:
        * DevGuideExamples/AMH_AMI/client.cpp:
        * DevGuideExamples/AMH_AMI/middle_server.cpp:

          Tests are converted to use new test framework and added to fuzz build.

Mon Nov 23 12:08:00 UTC 2009  Simon Massey  <sma at prismtech dot com>

        * NEWS:
        * TAO_IDL/util/utl_global.cpp:

         Another Space in roots fix.

Mon Nov 23 11:23:28 UTC 2009  Denis Budko  <denis.budko@remedy.nl>

        * examples/RTCORBA/Activity/run_test.pl:

         Test is converted to use new test framework and added to fuzz build.

Mon Nov 23 11:07:56 UTC 2009  Denis Budko  <denis.budko@remedy.nl>

        * tests/MT_Client/run_test.pl:
        * examples/RTCORBA/Activity/run_test.pl:

          Tests are converted to use new test framework and added to fuzz build.

Mon Nov 23 10:50:58 UTC 2009  Marcel Smit  <msmit@remedy.nl>

        * TAO_IDL/be/be_visitor_component/servant_svs.cpp:
          In the generated servant code (_svnt.cpp) we have an
          access violation in the method populate_port_tables.
          The access violation is indirectly caused by a wrong
          call of the method ports_servant_activator of the
          Servant_Activator.
          An instance of Port_Activator is created as a copy
          of tmp. Instead of the new copy pa the tmp variable
          is used in the call of ports_servant_activator.
          Thanks to Wolfgang Pickartz.

Mon Nov 23 09:38:57 UTC 2009  Denis Budko  <denis.budko@remedy.nl>

        * orbsvcs/DevGuideExamples/InterfaceRepo/run_test.pl:
        * orbsvcs/DevGuideExamples/ImplRepo/Basic/MessengerServer.cpp:
        * orbsvcs/DevGuideExamples/ImplRepo/Basic/MessengerClient.cpp:
        * orbsvcs/DevGuideExamples/ImplRepo/Basic/run_test.pl:
        * orbsvcs/DevGuideExamples/ImplRepo/IORTable/MessengerServer.cpp:
        * orbsvcs/DevGuideExamples/ImplRepo/IORTable/run_test.pl:
        * orbsvcs/DevGuideExamples/ImplRepo/MessengerClient.cpp:
        * orbsvcs/DevGuideExamples/ImplRepo/Activator/run_test.pl:
        * orbsvcs/DevGuideExamples/ImplRepo/run_test.pl:
        * orbsvcs/tests/Miop/McastHello/run_test.pl:
        * orbsvcs/tests/Security/Callback/client.cpp:
        * orbsvcs/tests/CosEvent/Timeout/run_test.pl:
        * orbsvcs/tests/LoadBalancing/GenericFactory/Infrastructure_Controlled/LB_server.cpp:
        * orbsvcs/tests/LoadBalancing/GenericFactory/Infrastructure_Controlled/LB_server.h:
        * orbsvcs/tests/LoadBalancing/GenericFactory/Infrastructure_Controlled/run_test.pl:
        * orbsvcs/tests/LoadBalancing/GenericFactory/Application_Controlled/LB_server.cpp:
        * orbsvcs/tests/LoadBalancing/GenericFactory/Application_Controlled/LB_server.h:
        * orbsvcs/tests/LoadBalancing/GenericFactory/Application_Controlled/run_test.pl:
        * orbsvcs/tests/LoadBalancing/LoadMonitor/CPU/run_test.pl:
        * performance-tests/Protocols/run_test.pl:
        * tests/CollocationLockup/run_test.pl:
        * tests/Bug_1495_Regression/Threaded_Client.cpp:
        * tests/Bug_1495_Regression/run_test_complex.pl:
        * tests/Bug_1495_Regression/run_test.pl:
        * tests/Bug_1361_Regression/run_test.pl:
        * tests/COIOP/run_test.pl:
        * tests/Bug_3000_Regression/run_test.pl:
        * tests/Bug_2186_Regression/run_test.pl:
        * tests/AlternateIIOP/run_test.pl:
        * tests/NestedUpcall/Simple/run_test.pl:
        * tests/MT_BiDir/run_test.pl:
        * tests/MT_Client/run_test.pl:
        * tests/ForwardUponObjectNotExist/run_test.pl:
        * tests/No_Server_MT_Connect_Test/run_test.pl:
        * tests/Cache_Growth_Test/run_test.pl:
        * tests/Bug_1476_Test/run_test.pl:
        * bin/tao_other_tests.lst:
        * bin/tao_orb_tests.lst:
        * examples/Simple/time-date/run_test.pl:
        * examples/CSD_Strategy/ThreadPool/run_test.pl:
        * examples/CSD_Strategy/ThreadPool3/run_test.pl:
        * examples/RTCORBA/Activity/run_test.pl:
        * examples/AMH/Sink_Server/run_test.pl:

          Tests are converted to use new test framework and added to fuzz build.

Sat Nov 21 14:20:19 UTC 2009  Abdullah Sowayan  <sowayan@gmail.com>

        * tests/Bug_3766_Regression/Test.idl:
        * tests/Bug_3766_Regression/TestI.h:
        * tests/Bug_3766_Regression/TestI.cpp:
        * tests/Bug_3766_Regression/client.cpp:
        * tests/Bug_3766_Regression/server.cpp:

          Minor improvement to this test. Add a way for the client to
          shut down the server so this test can pass on the scoreboard.

Sat Nov 21 04:44:20 UTC 2009  Abdullah Sowayan  <sowayan@gmail.com>

        * tao/VarOut_T.h:
        * tao/VarOut_T.inl:

          Fixed Bug 3766.

Fri Nov 20 19:52:15 UTC 2009  Abdullah Sowayan  <sowayan@gmail.com>

        * tao/VarOut_T.h:
        * tao/VarOut_T.inl:

          Revert the changes and reopen Bug 3766. The prior commit causes build issues.

Fri Nov 20 18:46:27 UTC 2009  Abdullah Sowayan  <sowayan@gmail.com>

        * tao/VarOut_T.h:
        * tao/VarOut_T.inl:

          Fixed Bug 3766.

Fri Nov 20 16:55:01 UTC 2009  Yan Dai  <dai_y@ociweb.com>

        * NEWS:

          Update for next release.

Fri Nov 20 13:53:51 UTC 2009  Jeff Parsons <j.parsons@vanderbilt.edu>

        * NEWS:

          Update for next release.

Fri Nov 20 13:02:24 UTC 2009  Denis Budko  <denis.budko@remedy.nl>

        * orbsvcs/tests/Security/Callback/server.cpp:

                  Test is converted to use new test framework and added to fuzz build.

Fri Nov 20 10:03:43 UTC 2009  Marcel Smit  <msmit@remedy.nl>

        * tests/Bug_3766_Regression/server.cpp:
          Resolved compiler error related to invisible
          characters on Linux.

Fri Nov 20 09:28:50 UTC 2009  Denis Budko  <denis.budko@remedy.nl>

        * orbsvcs/DevGuideExamples/EventServices/OMG_TypedEC/run_test.pl:
        * orbsvcs/DevGuideExamples/EventServices/RTEC_Federated/run_test.pl:
        * orbsvcs/DevGuideExamples/EventServices/OMG_SupplierSideEC/run_test.pl:
        * orbsvcs/DevGuideExamples/EventServices/RTEC_Filter/run_test.pl:
        * orbsvcs/DevGuideExamples/EventServices/OMG_Basic/run_test.pl:
        * orbsvcs/DevGuideExamples/EventServices/RTEC_MCast_Federated/run_test.pl:
        * orbsvcs/DevGuideExamples/EventServices/RTEC_Basic/run_test.pl:
        * orbsvcs/tests/Security/EndpointPolicy/run_test.pl:
        * DevGuideExamples/Multithreading/ThreadPool/MessengerServer.cpp:
        * DevGuideExamples/Multithreading/ThreadPool/MessengerClient.cpp:
        * DevGuideExamples/Multithreading/ThreadPool/run_test.pl:
        * DevGuideExamples/Multithreading/GracefulShutdown/MessengerServer.cpp:
        * DevGuideExamples/Multithreading/GracefulShutdown/MessengerClient.cpp:
        * DevGuideExamples/Multithreading/GracefulShutdown/run_test.pl:
        * DevGuideExamples/Multithreading/ThreadPerConnection/MessengerServer.cpp:
        * DevGuideExamples/Multithreading/ThreadPerConnection/MessengerClient.cpp:
        * DevGuideExamples/Multithreading/ThreadPerConnection/run_test.pl:
        * DevGuideExamples/AMH_AMI/inner_server.cpp:
        * DevGuideExamples/AMH_AMI/client.cpp:
        * DevGuideExamples/AMH_AMI/middle_server.cpp:
        * DevGuideExamples/AMH_AMI/run_test.pl:
        * tests/OctetSeq/run_test1.pl:
        * tests/OctetSeq/run_test2.pl:
        * tests/OctetSeq/run_test.pl:
        * tests/Bug_1330_Regression/server.cpp:
        * tests/Bug_1330_Regression/run_test.pl:
        * tests/Leader_Followers/run_test.pl:
        * tests/NestedUpcall/MT_Client_Test/run_test.pl:
        * tests/Bug_2702_Regression/run_test.pl:
        * tests/IPV6/run_test.pl:
        * tests/MProfile_Connection_Timeout/run_test.pl:

          Tests are converted to use new test framework and added to fuzz build.

Fri Nov 20 08:56:26 UTC 2009  Vladimir Zykov  <vladimir.zykov@prismtech.com>

        * tests/Bug_3755_Regression/server.cpp:
        * tests/Bug_3755_Regression/run_test.pl:
        * bin/tao_orb_tests.lst:
          Fixed this test on Win32 and disabled it from compact,
          minimum and single threaded builds.

Fri Nov 20 08:34:48 UTC 2009  Marcel Smit  <msmit@remedy.nl>

        * examples/RTScheduling/Fixed_Priority_Scheduler/FP_Scheduler.h:
        * examples/RTScheduling/Fixed_Priority_Scheduler/FP_Scheduler.cpp:
        * examples/RTScheduling/MIF_Scheduler/MIF_Scheduler.h:
        * examples/RTScheduling/MIF_Scheduler/MIF_Scheduler.cpp:
          Resolved compiler errors related to the IDL compiler
          change (see see Tue Nov 17 20:47:27 UTC 2009  Jeff Parsons
          for more details).

Thu Nov 19 20:18:53 UTC 2009  Abdullah Sowayan  <sowayan@gmail.com>

        * tests/Bug_3766_Regression/Test.idl:
        * tests/Bug_3766_Regression/TestI.h:
        * tests/Bug_3766_Regression/TestI.cpp:
        * tests/Bug_3766_Regression/client.cpp:

          Extend this test to test Variable sized types in addition
          to Fixed size types.

Thu Nov 19 19:50:30 UTC 2009  Abdullah Sowayan  <sowayan@gmail.com>

        * bin/tao_orb_tests.lst:

          Add BUG_3766_Regression to the list of tests to run.

Thu Nov 19 15:40:53 UTC 2009  Abdullah Sowayan  <sowayan@gmail.com>

        * tests/Bug_3766_Regression:
        * tests/Bug_3766_Regression/Bug_3766_Regression.mpc:
        * tests/Bug_3766_Regression/Test.idl:
        * tests/Bug_3766_Regression/TestI.h:
        * tests/Bug_3766_Regression/TestI.cpp:
        * tests/Bug_3766_Regression/run_test.pl:
        * tests/Bug_3766_Regression/server.cpp:

          Added a regression test for Bugzilla 3766.

Thu Nov 19 12:38:10 UTC 2009  Denis Budko  <denis.budko@remedy.nl>

        * tests/Bug_2234_Regression/server.cpp:

          Test is converted to use new test framework and added to fuzz build.

Thu Nov 19 08:25:13 UTC 2009  Denis Budko  <denis.budko@remedy.nl>

        * orbsvcs/tests/Trading/export_test.cpp:
        * orbsvcs/tests/Trading/run_test.pl:
        * orbsvcs/tests/Security/Callback/server.cpp:
        * orbsvcs/tests/Security/Callback/client.cpp:
        * orbsvcs/tests/Security/Callback/run_test.pl:
        * orbsvcs/tests/Security/mixed_security_test/run_test.pl:
        * orbsvcs/tests/Security/ssliop_CSD/MessengerServer.cpp:
        * orbsvcs/tests/Security/ssliop_CSD/MessengerClient.cpp:
        * orbsvcs/tests/Security/ssliop_CSD/run_test.pl:
        * orbsvcs/examples/CosEC/Simple/Service.cpp:
        * orbsvcs/examples/CosEC/Simple/Supplier.cpp:
        * orbsvcs/examples/CosEC/Simple/Consumer.cpp:
        * orbsvcs/examples/CosEC/Simple/run_test.pl:
        * tests/AMI_Buffering/run_timeout.pl:
        * tests/AMI_Buffering/run_buffer_size.pl:
        * tests/AMI_Buffering/run_timeout_reactive.pl:
        * tests/AMI_Buffering/run_test.pl:
        * tests/Big_Request_Muxing/run_test.pl:
        * tests/Bug_3743_Regression/run_test.pl:
        * tests/Bug_3531_Regression/client.cpp:
        * tests/Bug_3531_Regression/server.cpp:
        * tests/Bug_3531_Regression/run_test.pl:
        * tests/CSD_Strategy_Tests/TP_Test_Static/ClientApp.cpp:
        * tests/CSD_Strategy_Tests/TP_Test_Static/run_test.pl:
        * tests/Server_Connection_Purging/server.cpp:
        * tests/Server_Connection_Purging/run_test.pl:
        * tests/Oneway_Buffering/run_timeout.pl:
        * tests/Oneway_Buffering/run_message_count.pl:
        * tests/Oneway_Buffering/run_buffer_size.pl:
        * tests/Oneway_Buffering/run_timeout_reactive.pl:
        * tests/Oneway_Buffering/run_test.pl:
        * bin/tao_other_tests.lst:
        * bin/tao_orb_tests.lst:

          Tests are converted to use new test framework and added to fuzz build.

Wed Nov 18 12:58:16 UTC 2009  Denis Budko  <denis.budko@remedy.nl>

        * orbsvcs/tests/Bug_2925_Regression/run_test_ipv6.pl:
        * orbsvcs/tests/Bug_2925_Regression/run_test.pl:
        * orbsvcs/tests/Security/Secure_Invocation/run_test.pl:
        * orbsvcs/tests/Security/Bug_2908_Regression/MessengerServer.cpp:
        * orbsvcs/tests/Security/Bug_2908_Regression/MessengerClient.cpp:
        * orbsvcs/tests/Security/Bug_2908_Regression/run_test.pl:
        * orbsvcs/tests/Security/BiDirectional/run_test.pl:
        * orbsvcs/tests/Security/Big_Request/run_test.pl:
        * orbsvcs/tests/HTIOP/BiDirectional/run_test.pl:
        * orbsvcs/tests/Property/run_test.pl:
        * orbsvcs/tests/Bug_2316_Regression/client.cpp:
        * orbsvcs/tests/Bug_2316_Regression/server.cpp:
        * orbsvcs/tests/Bug_2316_Regression/run_test.pl:
        * orbsvcs/tests/Bug_2615_Regression/client.cpp:
        * orbsvcs/tests/Bug_2615_Regression/server.cpp:
        * orbsvcs/tests/Bug_2615_Regression/run_test.pl:
        * orbsvcs/tests/Bug_3216_Regression/run_test.pl:
        * orbsvcs/tests/Bug_2709_Regression/client.cpp:
        * orbsvcs/tests/Bug_2709_Regression/server.cpp:
        * orbsvcs/tests/Bug_2709_Regression/run_test.pl:
        * orbsvcs/tests/IOR_MCast/run_test_ipv6.pl:
        * orbsvcs/tests/Bug_3215_Regression/run_test.pl:
        * orbsvcs/tests/Bug_2287_Regression/run_test.pl:
        * DevGuideExamples/SmartProxies/MessengerServer.cpp:
        * DevGuideExamples/SmartProxies/LoggerServer.cpp:
        * DevGuideExamples/SmartProxies/MessengerClient.cpp:
        * DevGuideExamples/SmartProxies/run_test.pl:
        * performance-tests/Latency/DSI/run_test.pl:
        * performance-tests/Latency/Deferred/run_test.pl:
        * performance-tests/Latency/DII/run_test.pl:
        * performance-tests/Latency/AMI/run_test.pl:
        * performance-tests/Throughput/run_test.pl:
        * tests/AMI_Buffering/run_message_count.pl:
        * tests/Bug_1495_Regression/run_test_complex.pl:
        * tests/Bug_1495_Regression/run_test.pl:
        * tests/Crashed_Callback/run_test.pl:
        * tests/BiDirectional/run_test_bug3282.pl:
        * tests/Bug_1020_Basic_Regression/run_test.pl:
        * tests/CallbackTest/run_test_ipv6.pl:
        * tests/CallbackTest/run_test_mixed_ip.pl:
        * tests/Bug_2289_Regression/run_test.pl:
        * tests/DIOP/run_test_ipv6.pl:
        * tests/DIOP/run_test.pl:
        * tests/NestedUpcall/Triangle_Test/run_test.pl:
        * tests/MT_Timeout/run_test.pl:
        * tests/Single_Read/server.cpp:
        * tests/Single_Read/test_i.cpp:
        * tests/Single_Read/run_test.pl:
        * tests/Single_Read/test_i.h:
        * examples/Logging/run_test.pl:
        * examples/Simple/time-date/run_test.pl:
        * examples/PluggableUDP/tests/Performance/run_test_ipv6.pl:
        * examples/PluggableUDP/tests/Performance/run_test.pl:

          Tests are converted to use new test framework and added to fuzz build.

Wed Nov 18 11:09:55 UTC 2009  Marcel Smit  <msmit@remedy.nl>

        * examples/Kokyu_dsrt_schedulers/FP_Scheduler.h:
        * examples/Kokyu_dsrt_schedulers/FP_Scheduler.cpp:
        * examples/Kokyu_dsrt_schedulers/MIF_Scheduler.h:
        * examples/Kokyu_dsrt_schedulers/MIF_Scheduler.cpp:
        * examples/Kokyu_dsrt_schedulers/MUF_Scheduler.h:
        * examples/Kokyu_dsrt_schedulers/MUF_Scheduler.cpp:
          Added policy_type implementation. As a result of
          change in the IDL compiler (see Tue Nov 17
          20:47:27 UTC 2009  Jeff Parsons for more details).

Tue Nov 17 20:47:27 UTC 2009  Jeff Parsons  <j.parsons@vanderbilt.edu>

        * TAO_IDL/ast/ast_decl.cpp:
        * TAO_IDL/be/be_visitor_interface.cpp:
        * TAO_IDL/be/be_visitor_interface/interface_ch.cpp:
        * TAO_IDL/be/be_visitor_operation/operation_ch.cpp:
        * TAO_IDL/be/be_visitor_operation.cpp:

          Cosmetic changes.

        * TAO_IDL/be/be_interface.cpp:

          Fixed bug in stub header code generation for local interfaces.
          Operations inherited from non-local interfaces are re-generated
          as pure virtual, but the operations associated with attributes
          were getting skipped. Thanks to Marcel Smit
          <msmit at remedy dot nl> and Johnny Willemsen
          <jwillemsen at remedy dot nl> for reporting the problem.

Tue Nov 17 17:18:51 UTC 2009  Vladimir Zykov  <vladimir.zykov@prismtech.com>

        * tests/Bug_3755_Regression/server.cpp:
          Extended test's output.

Tue Nov 17 14:43:36 UTC 2009  Denis Budko  <denis.budko@remedy.nl>

        * bin/tao_other_tests.lst:

          Test, which is not converted now, is disabled in FUZZ build.

Tue Nov 17 13:49:10 UTC 2009  Denis Budko  <denis.budko@remedy.nl>

        * bin/tao_other_tests.lst:
        * bin/tao_orb_tests.lst:

          Tests, which are not converted now, are disabled in FUZZ build.

Tue Nov 17 11:45:03 UTC 2009  Denis Budko  <denis.budko@remedy.nl>

        * orbsvcs/DevGuideExamples/Security/ParticipatingApp/MessengerServer.cpp:
        * orbsvcs/DevGuideExamples/Security/ParticipatingApp/MessengerClient.cpp:
        * orbsvcs/DevGuideExamples/Security/ParticipatingApp/run_test.pl:
        * DevGuideExamples/Multithreading/Reactive/MessengerServer.cpp:
        * DevGuideExamples/Multithreading/Reactive/MessengerClient.cpp:
        * DevGuideExamples/Multithreading/Reactive/run_test.pl:
        * DevGuideExamples/ValueTypes/Messenger/MessengerServer.cpp:
        * DevGuideExamples/ValueTypes/Messenger/MessengerClient.cpp:
        * DevGuideExamples/ValueTypes/Messenger/run_test.pl:
        * DevGuideExamples/ValueTypes/Bank/server.cpp:
        * DevGuideExamples/ValueTypes/Bank/run_test.pl:
        * DevGuideExamples/ValueTypes/Bank/client.cpp:
        * DevGuideExamples/LocalObjects/ServantLocator/MessengerServer.cpp:
        * DevGuideExamples/LocalObjects/ServantLocator/run_test.pl:
        * DevGuideExamples/GettingStarted/MessengerServer.cpp:
        * DevGuideExamples/GettingStarted/MessengerClient.cpp:
        * DevGuideExamples/GettingStarted/run_test.pl:
        * DevGuideExamples/PortableInterceptors/Auth/MessengerServer.cpp:
        * DevGuideExamples/PortableInterceptors/Auth/MessengerClient.cpp:
        * DevGuideExamples/PortableInterceptors/Auth/run_test.pl:
        * DevGuideExamples/PortableInterceptors/SimpleCodec/MessengerServer.cpp:
        * DevGuideExamples/PortableInterceptors/SimpleCodec/MessengerClient.cpp:
        * DevGuideExamples/PortableInterceptors/SimpleCodec/run_test.pl:
        * DevGuideExamples/PortableInterceptors/IOR/MessengerServer.cpp:
        * DevGuideExamples/PortableInterceptors/IOR/MessengerClient.cpp:
        * DevGuideExamples/PortableInterceptors/IOR/run_test.pl:
        * DevGuideExamples/PortableInterceptors/PICurrent/MessengerServer.cpp:
        * DevGuideExamples/PortableInterceptors/PICurrent/MessengerClient.cpp:
        * DevGuideExamples/PortableInterceptors/PICurrent/run_test.pl:
        * DevGuideExamples/RTCORBA/MessengerServer.cpp:
        * DevGuideExamples/RTCORBA/run_test.pl:
        * DevGuideExamples/Messaging/AMIcallback/MessengerServer.cpp:
        * DevGuideExamples/Messaging/AMIcallback/MessengerClient.cpp:
        * DevGuideExamples/Messaging/AMIcallback/run_test.pl:
        * DevGuideExamples/Messaging/RelativeRoundtripTimeout/MessengerServer.cpp:
        * DevGuideExamples/Messaging/RelativeRoundtripTimeout/MessengerClient.cpp:
        * DevGuideExamples/Messaging/RelativeRoundtripTimeout/run_test.pl:
        * tests/OBV/Supports/client.cpp:
        * tests/OBV/Supports/server.cpp:
        * tests/OBV/Supports/run_test.pl:
        * tests/Bug_2683_Regression/run_test.pl:
        * tests/Exposed_Policies/run_test.pl:
        * bin/tao_other_tests.lst:
        * bin/tao_orb_tests.lst:
        * examples/PluggableUDP/tests/SimplePerformance/client.cpp:
        * examples/PluggableUDP/tests/SimplePerformance/run_test_ipv6.pl:
        * examples/PluggableUDP/tests/SimplePerformance/server.cpp:
        * examples/PluggableUDP/tests/SimplePerformance/run_test.pl:

          Tests are converted to use new test framework and added to fuzz build.

Mon Nov 16 15:52:21 UTC 2009  Vladimir Zykov  <vladimir.zykov@prismtech.com>

        * bin/tao_orb_tests.lst:
          Bug 3755 marked as fixed.

        * tao/PI_Server/PI_Server_Loader.cpp:
        * tao/PI_Server/PI_Server_Loader.h:
        * tao/Messaging/Messaging_Loader.h:
        * tao/Messaging/Messaging_Loader.cpp:
        * tao/BiDir_GIOP/BiDirGIOP.cpp:
        * tao/BiDir_GIOP/BiDirGIOP.h:
        * tao/RTScheduling/RTScheduler_Loader.cpp:
        * tao/RTScheduling/RTScheduler_Loader.h:
        * tao/ZIOP/ZIOP.cpp:
        * tao/ZIOP/ZIOP.h:
        * tao/CSD_Framework/CSD_Framework_Loader.cpp:
        * tao/CSD_Framework/CSD_Framework_Loader.h:
        * tao/RTCORBA/RT_ORB_Loader.h:
        * tao/RTCORBA/RT_ORB_Loader.cpp:
          Fixed bug 3755. Now library initialization guard is moved
          to a loader which does the initialization. Since the loader is
          unique per gestalt then the initialization is executed once per
          gestalt and not once per process.

Mon Nov 16 15:44:30 UTC 2009  Vladimir Zykov  <vladimir.zykov@prismtech.com>

        * tests/Bug_3748_Regression/run_test.pl:
          Extended the time for starting client even more.

Fri Nov 13 19:49:54 UTC 2009  Jeff Parsons <j.parsons@vanderbilt.edu>

        * TAO_IDL/be_include/be_interface.h:
        * TAO_IDL/be/be_interface.cpp:

          Added 2 private methods, called from traverse_inheritance_graph(),
          to enqueue base components or base homes. Making these steps
          into method calls allows them to be done tail-recursively
          rather than iteratively, so the chain of parents can be
          enqueued in the correct order for generating copy constructors
          and the like.

Fri Nov 13 10:17:33 UTC 2009  Denis Budko  <denis.budko@remedy.nl>

        * orbsvcs/tests/FaultTolerance/IOGRManipulation/run_test.pl:

       Warring in fuzz build was fixed.

Fri Nov 13 09:18:57 UTC 2009  Denis Budko  <denis.budko@remedy.nl>

        * orbsvcs/tests/Bug_3486_Regression/run_test.pl:
        * orbsvcs/tests/FaultTolerance/IOGRManipulation/run_test.pl:
        * orbsvcs/tests/Notify/Bug_3663_Regression/run_test.pl:
        * orbsvcs/tests/Notify/Bug_3646d_Regression/run_test.pl:
        * orbsvcs/tests/Bug_2137_Regression/run_test.pl:
        * DevGuideExamples/LocalObjects/ServantLocator/MessengerServer.cpp:
        * DevGuideExamples/LocalObjects/ServantLocator/MessengerClient.cpp:
        * DevGuideExamples/LocalObjects/ServantLocator/run_test.pl:
        * DevGuideExamples/RTCORBA/MessengerServer.cpp:
        * DevGuideExamples/RTCORBA/MessengerClient.cpp:
        * DevGuideExamples/RTCORBA/run_test.pl:
        * tests/Stack_Recursion/run_test.pl:
        * tests/Timed_Buffered_Oneways/run_test.pl:
        * tests/Bug_2234_Regression/client.cpp:
        * tests/Bug_2234_Regression/server.cpp:
        * tests/Bug_2234_Regression/run_test.pl:
        * tests/Bug_2768_Regression/server.cpp:
        * tests/Bug_2768_Regression/run_test.pl:
        * tests/Blocking_Sync_None/run_test.pl:
        * tests/Crash_On_Write/run_test.pl:
        * tests/Bug_3068_Regression/run_test.pl:
        * tests/CSD_Strategy_Tests/TP_Test_Dynamic/run_test.pl:
        * tests/Bug_2683_Regression/server.cpp:
        * tests/Bug_2683_Regression/run_test.pl:
        * tests/RTScheduling/Scheduling_Interceptor/run_test.pl:
        * tests/File_IO/run_test.pl:
        * tests/Bug_1568_Regression/run_test.pl:
        * tests/Reliable_Oneways/run_sync_with_transport.pl:
        * tests/Reliable_Oneways/run_sync_none.pl:
        * tests/Reliable_Oneways/run_sync_with_server.pl:
        * tests/Reliable_Oneways/run_sync_with_target.pl:
        * bin/tao_other_tests.lst:
        * bin/tao_orb_tests.lst:

        Tests are converted to use new test framework and added to fuzz build.

Fri Nov 13 00:33:49 UTC 2009  Yan Dai  <dai_y@ociweb.com>

        * orbsvcs/Notify_Service/Notify_Service.cpp:

          Added ACE_STATIC_SVC_REQUIRE for ACE_Logging_Stragey service
          to fix loading issue in static builds.

Thu Nov 12 20:39:18 UTC 2009  Jeff Parsons <j.parsons@vanderbilt.edu>

        * TAO_IDL/be/be_interface.cpp:

          Fixed bug in the logic of operation table generation for
          components and homes.

Thu Nov 12 12:12:51 UTC 2009  Johnny Willemsen  <jwillemsen@remedy.nl>

        * tests/AMH_Exceptions/run_test.pl:
        * tests/AMI_Timeouts/run_test.pl:
        * tests/Portable_Interceptors/AdvSlot/run_test.pl:
        * tests/Portable_Interceptors/AdvSlotDblCpy/run_test.pl:
        * tests/Portable_Interceptors/Bug_2133/run_test.pl:
        * tests/Portable_Interceptors/Bug_3080/run_test.pl:
        * tests/Portable_Interceptors/Bug_3582/run_test.pl:
          Fixed fuzz

Thu Nov 12 08:24:00 UTC 2009  Denis Budko <denis.budko@remedy.nl>

        * tests/IORManipulation/filter/run_test.pl
        * tests/Connection_Failure/run_test.pl
        * orbsvcs/DevGuideExamples/NamingService/Naming_Server/run_test.pl
        * orbsvcs/tests/unit/Notify/MC/Statistic/run_test.pl
        * orbsvcs/tests/unit/Notify/MC/Statistic_Registry/run_test.pl
        * orbsvcs/tests/unit/Notify/MC/MonitorControlExt/run_test.pl
        * orbsvcs/tests/unit/Notify/MC/NotificationServiceMonitor/run_test.pl
        * orbsvcs/tests/unit/Notify/MC/Control/run_test.pl
        * orbsvcs/tests/unit/Trading/Interpreter/run_test.pl
        * orbsvcs/tests/Bug_2074_Regression/run_test.pl
        * tests/GIOP_Fragments/PMB_With_Fragments/run_test.pl
        * performance-tests/Latency/Collocation/run_test.pl
        * performance-tests/POA/Object_Creation_And_Registration/run_test.pl
        * orbsvcs/tests/Bug_2377_Regression/run_test.pl
        * orbsvcs/tests/Bug_2377_Regression/run_test_ipv6.pl
        * orbsvcs/tests/unit/Notify/MC/MonitorManager/run_test.pl
        Fixed fuzz errors and some time interval functions usage.

Thu Nov 12 07:13:51 UTC 2009  Johnny Willemsen  <jwillemsen@remedy.nl>

        * tests/PortableInterceptors/AdvSlot/run_test.pl
        * tests/PortableInterceptors/AdvSlotDblCpy/run_test.pl
        * tests/PortableInterceptors/Bug_2133/run_test.pl
        * tests/PortableInterceptors/Bug_2510_Regression/run_test.pl
        * tests/PortableInterceptors/Bug_3080/run_test.pl
        * tests/PortableInterceptors/Bug_3582/run_test.pl
        * tests/PortableInterceptors/Dynamic/run_test.pl
        * tests/PortableInterceptors/IORInterceptor/run_test.pl
        * tests/PortableInterceptors/ORB_Shutdown/run_test.pl
        * tests/PortableInterceptors/PICurrent/run_test.pl
          Fixed fuzz errors

Wed Nov 11 15:33:51 UTC 2009  Jeff Parsons <j.parsons@vanderbilt.edu>

        * TAO_IDL/be/be_visitor_component/context_ex_idl.cpp:

          Removed ancestors from scope visitation for the LEM IDL
          context classes. This closes [BUGID:3761].

        * TAO_IDL/ast/ast_template_interface.cpp:

          Cosmetic changes.

Tue Nov 10 20:14:12 UTC 2009  Yan Dai  <dai_y@ociweb.com>

        * orbsvcs/orbsvcs/Notify/MonitorControlExt/MonitorProxyPushSupplier.h:
        * orbsvcs/orbsvcs/Notify/MonitorControlExt/MonitorSequenceProxyPushSupplier.h:
        * orbsvcs/orbsvcs/Notify/MonitorControlExt/MonitorStructuredProxyPushSupplier.h:

          Added TAO_HAS_MONITOR_FRAMEWORK==1 guard so it won't be compiled when
          monitor framework is disabled.

Tue Nov 10 19:07:43 UTC 2009  Jeff Parsons <j.parsons@vanderbilt.edu>

        * TAO_IDL/include/idl_global.h:
        * TAO_IDL/util/utl_global.cpp:
        * TAO_IDL/fe/y.tab.cpp:
        * TAO_IDL/fe/idl.yy:

          When adding uses multiple related constructs to the
          AST, we now use the instantiating port name (if any)
          as a prefix to the constructed type names.

        * TAO_IDL/be/be_visitor_component/context_ex_idl.cpp:
        * TAO_IDL/be/be_visitor_component/executor_ex_idl.cpp:
        * TAO_IDL/be/be_visitor_component/servant_svh.cpp:
        * TAO_IDL/be/be_visitor_component/executor_exh.cpp:
        * TAO_IDL/be/be_visitor_component/context_svh.cpp:
        * TAO_IDL/be/be_visitor_component/executor_exs.cpp:
        * TAO_IDL/be/be_visitor_component/servant_svs.cpp:
        * TAO_IDL/be/be_visitor_component/context_svs.cpp:
        * TAO_IDL/be/be_visitor_component_scope.cpp:
        * TAO_IDL/be_include/be_visitor_component_scope.h:
        * TAO_IDL/be_include/be_visitor_ccm_pre_proc.h:
        * TAO_IDL/be/be_visitor_ccm_pre_proc.cpp:

          Fixed bugs in the handling of the port name when
          it is used in the construction of facet and
          receptacle operation names. This fix closes [BUGID:3760].

Tue Nov 10 18:15:44 UTC 2009  Yan Dai  <dai_y@ociweb.com>

        * orbsvcs/orbsvcs/Notify/MonitorControlExt/MonitorProxySupplier_T.h:
        * orbsvcs/orbsvcs/Notify/MonitorControlExt/MonitorProxySupplier_T.cpp:

          Added TAO_HAS_MONITOR_FRAMEWORK==1 guard so it won't be compiled when
          monitor framework is disabled.

Tue Nov 10 13:37:57 UTC 2009  Johnny Willemsen  <jwillemsen@remedy.nl>

        * tests/Param_Test/run_test.pl:
        * tests/Abstract_Interface/run_test.pl:
          Don't use hardcoded timeouts

Tue Nov 10 12:36:57 UTC 2009  Denis Budko  <denis.budko@remedy.nl>

        * tests/IORManipulation/filter/run_test.pl
        * tests/Connection_Failure/run_test.pl
        * orbsvcs/DevGuideExamples/NamingService/Naming_Server/run_test.pl
        * orbsvcs/tests/unit/Notify/MC/Statistic/run_test.pl
        * orbsvcs/tests/unit/Notify/MC/Statistic_Registry/run_test.pl
        * orbsvcs/tests/unit/Notify/MC/MonitorControlExt/run_test.pl
        * orbsvcs/tests/unit/Notify/MC/NotificationServiceMonitor/run_test.pl
        * orbsvcs/tests/unit/Notify/MC/Control/run_test.pl
        * orbsvcs/tests/unit/Trading/Interpreter/run_test.pl
        * orbsvcs/tests/Bug_2074_Regression/run_test.pl
        * tests/GIOP_Fragments/PMB_With_Fragments/run_test.pl
        * tests/Optimized_Connection/run_test.pl
        * performance-tests/Latency/Collocation/run_test.pl
        * performance-tests/POA/Object_Creation_And_Registration/run_test.pl
        * orbsvcs/tests/Bug_2137_Regression/run_test.pl
        * orbsvcs/tests/Bug_2377_Regression/run_test.pl
        * orbsvcs/tests/Bug_2377_Regression/run_test_ipv6.pl

          Simple porting to new test framework.

Mon Nov  9 19:21:53 UTC 2009  Jeff Parsons <j.parsons@vanderbilt.edu>

        * TAO_IDL/be_include/be_field.h:
        * TAO_IDL/be/be_field.cpp:

          Added flag to check whether a provides or uses port's
          name has already been prefixed with an extended port
          or mirrorport name.

        * TAO_IDL/be/be_visitor_component\context_ex_idl.cpp:

          When visiting a component, changed the call to visit_scope()
          to visit_component_scope() to take advantage of special
          properties in the visitor base class.

        * TAO_IDL/be/be_visitor_component_scope.cpp:

          Fixed a bug in the prefixing of uses or provides port's
          name with the extended port or mirror port's name.

        * TAO_IDL/be/be_interface.cpp:

          Disable code generation of release() and is_nil() overrides
          for children of abstract interfaces if the child itself is
          included from another IDL file, avoiding possible multiple
          defintions of these methods. This item closes [BUGID:3759].

Mon Nov  9 14:58:34 UTC 2009  Jeff Parsons <j.parsons@vanderbilt.edu>

        * TAO_IDL/driver/drv_preproc.cpp:
        * TAO_IDL/driver/drv_args.cpp:

          Cosmetic changes.

        * TAO_IDL/tao_idl.cpp:

          Added the (optional) behavior of creating a new IDL file
          containing #includes of the individual IDL files on the
          command line, or in the directory tree specified by -r
          on some backends. Processing this 'container' IDL file
          results in significant performance improvement when
          processing multiple IDL files, especially if they include
          Components.idl, since all the middleware IDL is then
          processed only once.

        * TAO_IDL/util/utl_global.cpp:
        * TAO_IDL/include/idl_global.h:

          Added a flag to toggle the above behavior, set by a
          backend (currently only idl_to_picml) that processes
          multiple IDL files into one output.

Mon Nov  9 12:41:31 UTC 2009  Johnny Willemsen  <jwillemsen@remedy.nl>

        * TAO_IDL/be/be_helper.cpp:
          Removed empty line

        * TAO_IDL/be/be_visitor_component/executor_exh.cpp:
          Generate doxygen grouping comments

Mon Nov  9 03:29:31 UTC 2009  William R. Otte  <wotte@dre.vanderbilt.edu>

        * TAO_IDL/be/be_interface.cpp:

          Added the process ID to the temporary file used for gperf, due
          to a perhaps weak random number generator not being random
          enough for parallel builds on OS X.

Fri Nov  6 10:13:00 UTC 2009  Simon Massey  <sma at prismtech dot com>

        * TAO_IDL/driver/drv_preproc.cpp:
        * TAO_IDL/driver/drv_mcpp_preproc.cpp:

          Updated DRV_add_include_path() space within roots and
          directory slash handling. (TAO782) It wasn't detecting
          or handling spaced roots or trailing directory slashes
          correctly.

        * TAO_IDL/util/utl_global.cpp:

          Allow for the gperf absolute directory path to contain spaces.

Thu Nov  5 12:48:31 UTC 2009  Johnny Willemsen  <jwillemsen@remedy.nl>

        * TAO_IDL/be/be_codegen.cpp:
          Don't generate an include for CIAO_common.h anymore

Thu Nov  5 12:24:52 UTC 2009  Vladimir Zykov  <vladimir.zykov@prismtech.com>

        * tests/Bug_3748_Regression/run_test.pl:
          Extended the time for running client.

Thu Nov  5 10:48:07 UTC 2009  Vladimir Zykov  <vladimir.zykov@prismtech.com>

        * tests/Bug_3748_Regression/server.cpp:
          Fixed warnings.

Wed Nov  4 20:57:08 UTC 2009  Yan Dai  <dai_y@ociweb.com>

        * MPC/config/notify_monitor_control.mpb:

          Disable this feature on wince=1 build.

Tue Nov  3 17:32:03 UTC 2009  Jeff Parsons <j.parsons@vanderbilt.edu>

        * TAO_IDL/fe/fe_init.cpp:

          Added IDL3+ keywords to the list used to check for clashes
          and leading underscore retention.

        * TAO_IDL/fe/y.tab.cpp:
        * TAO_IDL/fe/idl.yy:

          Added creation of uses multiple-specific struct and sequence
          nodes in the AST when the uses multiple port
          appears in an extended port declaration, identically to what
          is now added for a standalone uses multiple port.

Mon Nov  2 22:59:48 UTC 2009  Yan Dai  <dai_y@ociweb.com>

        * orbsvcs/orbsvcs/Notify/MonitorControl/MonitorManager.h:
        * orbsvcs/orbsvcs/Notify/MonitorControl/MonitorManager.cpp:

          Made MonitorManager not start ORBTask if MC is not required.
          This should resolve Notify tests failure on static builds.

        * orbsvcs/tests/Notify/MC/notify.conf:

          Removed this file as it'll be generated when running the test
          and cause setup warning on scoreboard.

Mon Nov  2 16:54:24 UTC 2009  Steven Stallion  <stallions@ociweb.com>

        * tests/RTCORBA/Bug_3643_Regression/test_i.cpp:

          Dropped spurious use of NDEBUG; tests should not predicate debug
          logging based on the (lack of) presence of NDEBUG.

Fri Oct 30 16:25:53 UTC 2009  Vladimir Zykov  <vladimir.zykov@prismtech.com>

        * tests/Bug_3755_Regression/orb1_svc.conf:
        * tests/Bug_3755_Regression/orb2_svc.conf:
        * tests/Bug_3755_Regression/server.cpp:
        * tests/Bug_3755_Regression/run_test.pl:
        * tests/Bug_3755_Regression/Bug_3755_Regression.mpc:
        * bin/tao_orb_tests.lst:
          Added a test for bug#3755 and scheduled it for run.

Fri Oct 30 14:50:00 UTC 2009  Simon Massey  <sma at prismtech dot com>

        * TAO_IDL/driver/drv_preproc.cpp:
          Improve the DRV_add_include_path() space within roots and
          directory slash handling.   (TAO782)

Fri Oct 30 13:08:30 UTC 2009  Vladimir Zykov  <vladimir.zykov@prismtech.com>

        * tests/Bug_3748_Regression/client.cpp:
        * tests/Bug_3748_Regression/Bug_3748_Regression.mpc:
        * tests/Bug_3748_Regression/Server_ORBInitializer.h:
        * tests/Bug_3748_Regression/Hello.cpp:
        * tests/Bug_3748_Regression/Test.idl:
        * tests/Bug_3748_Regression/server.cpp:
        * tests/Bug_3748_Regression/Test_Protocols_Hooks.cpp:
        * tests/Bug_3748_Regression/Makefile.am:
        * tests/Bug_3748_Regression/Hello.h:
        * tests/Bug_3748_Regression/Test_Protocols_Hooks.h:
        * tests/Bug_3748_Regression/README:
        * tests/Bug_3748_Regression/run_test.pl:
        * tests/Bug_3748_Regression/Server_ORBInitializer.cpp:
        * bin/tao_orb_tests.lst:
          Complitely rewrote the test for bug#3748 and changed configs
          in which this test can run.

Fri Oct 30 06:15:53 UTC 2009  Johnny Willemsen  <jwillemsen@remedy.nl>

        Merged changes from Jeff for port/porttype/mirrorport to head

        Thu Oct 29 12:50:35 UTC 2009  Jeff Parsons <j.parsons@vanderbilt.edu>

        * TAO_IDL/be/be_visitor_connector.cpp:
        * TAO_IDL/be/be_visitor_connector/connector_dds_exs.cpp:
        * TAO_IDL/be/be_visitor_connector/connector_dds_exh.cpp:
        * TAO_IDL/be_include/be_visitor_connector.h:
        * TAO_IDL/be_include/be_visitor_connector/connector_dds_exs.h:
        * TAO_IDL/be_include/be_visitor_connector/connector_dds_exh.h:

          New visitors, implementing (so far) part of the code
          generation of connector executors.

        * TAO_IDL/be/be_codegen.cpp:
        * TAO_IDL/be/be_visitor_component/component_exh.cpp:
        * TAO_IDL/be/be_visitor_component/component_exs.cpp:
        * TAO_IDL/be/be_global.cpp:
        * TAO_IDL/be/be_visitor_component_scope.cpp:
        * TAO_IDL/be_include/be_codegen.h:
        * TAO_IDL/be_include/be_visitor_component_scope.h:
        * TAO_IDL/be_include/be_global.h:

          - Factored out code for generating entrypoint declarations
            and definitions.

          - Added mechanism to generate includes of DDS type
            support files for the connector executor.

        Sun Oct 25 17:10:27 UTC 2009  Jeff Parsons <j.parsons@vanderbilt.edu>

        * TAO_IDL/be_include/be_visitor_component_scope.h:
        * TAO_IDL/be/be_visitor_component_scope.cpp:

          Moved these files from the be_visitor_component
          subdirectory, so the visitor would be accessible
          as a base class to be_visitor_ccm_pre_proc. Also
          add override of base class (be_visitor_scope)
          method pre_proces(), to extend the generated
          names of provides and uses methods with a
          prefix of the port or mirrorport name, if any.

        * TAO_IDL/be/be_visitor_ccm_pre_proc.cpp:
        * TAO_IDL/be_include/be_visitor_ccm_pre_proc.h:

          Made class be_visitor_component_scope the base class
          of this visitor, thereby adding support for simple
          ports, mirrorports and porttypes.

        * TAO_IDL/be_include/be_visitor_component.h:
        * TAO_IDL/be/be_visitor_component.cpp:

          Removed relocated files from these file lists.

        Thu Oct 22 20:39:02 UTC 2009  Jeff Parsons <j.parsons@vanderbilt.edu>

        * TAO_IDL/be/be_visitor_component/component_scope.cpp:
        * TAO_IDL/be_include/be_visitor_component/component_scope.h:

          Added code generation for mirror ports.

        * TAO_IDL/be_include/be_visitor_component/facet_svh.h:
        * TAO_IDL/be_include/be_visitor_component/facet_svs.h:
        * TAO_IDL/be/be_visitor_component/facet_svh.cpp:
        * TAO_IDL/be/be_visitor_component/facet_svs.cpp:

          Changed base class to be_visitor_component_scope to
          pull in the mirror port support.

        Thu Oct 22 19:21:26 UTC 2009  Jeff Parsons <j.parsons@vanderbilt.edu>

        * TAO_IDL/be/be_visitor_component/facet_exs.cpp:
        * TAO_IDL/be/be_visitor_component/executor_exh.cpp:
        * TAO_IDL/be/be_visitor_component/executor_exs.cpp:
        * TAO_IDL/be/be_visitor_component/facet_exh.cpp:
        * TAO_IDL/be_include/be_visitor_component/executor_exh.h:
        * TAO_IDL/be_include/be_visitor_component/executor_exs.h:
        * TAO_IDL/be_include/be_visitor_component/facet_exh.h:
        * TAO_IDL/be_include/be_visitor_component/facet_exs.h:

          New files, containing new visitors that handle code
          generation class-by-class in the executor implementation.

        * TAO_IDL/be/be_provides.cpp:
        * TAO_IDL/be/be_attribute.cpp:
        * TAO_IDL/be/be_consumes.cpp:
        * TAO_IDL/be/be_field.cpp:
        * TAO_IDL/be/be_publishes.cpp:
        * TAO_IDL/be/be_uses.cpp:
        * TAO_IDL/be/be_emits.cpp:
        * TAO_IDL/be/be_sequence.cpp:
        * TAO_IDL/be_include/be_field.h:
        * TAO_IDL/be_include/be_publishes.h:
        * TAO_IDL/be_include/be_component.h:
        * TAO_IDL/be_include/be_uses.h:
        * TAO_IDL/be_include/be_provides.h:
        * TAO_IDL/be_include/be_attribute.h:
        * TAO_IDL/be_include/be_emits.h:
        * TAO_IDL/be_include/be_consumes.h:
        * TAO_IDL/be_include/be_sequence.h:

          Add non-virtual override of frontend methods that
          fetch the referenced provides, uses, publishes, emits,
          consumes, field, or base type. This addition concentrates
          the narrowing to the backend type so it need not be
          done over and over in the visitors.

        * TAO_IDL/be/be_visitor_component.cpp:
        * TAO_IDL/be_include/be_visitor_component.h:

          Added new visitor files.

        * TAO_IDL/be/be_interface.cpp:
        * TAO_IDL/be_include/be_interface.h:

          Renamed static method facet_op_attr_decl_helper to
          op_attr_decl_helper, since its use is now more general.

        * TAO_IDL/be_include/be_visitor_component/component_exh.h:
        * TAO_IDL/be_include/be_visitor_component/component_exs.h:
        * TAO_IDL/be/be_visitor_component/component_exh.cpp:
        * TAO_IDL/be/be_visitor_component/component_exs.cpp:

          Split code out of these visitors and distributed it
          among the new visitors.

        * TAO_IDL/be/be_visitor_operation/operation_exs.cpp:
        * TAO_IDL/be/be_visitor_operation/operation_svs.cpp:
        * TAO_IDL/be/be_visitor_interface/interface_svs.cpp:
        * TAO_IDL/be/be_visitor_component/context_ex_idl.cpp:
        * TAO_IDL/be/be_visitor_component/executor_ex_idl.cpp:
        * TAO_IDL/be/be_visitor_component/servant_svh.cpp:
        * TAO_IDL/be/be_visitor_component/facet_ex_idl.cpp:
        * TAO_IDL/be/be_visitor_component/servant_svs.cpp:
        * TAO_IDL/be/be_visitor_attribute.cpp:
        * TAO_IDL/be/be_visitor_attribute/attribute.cpp:
        * TAO_IDL/be_include/be_visitor_operation/operation_svs.h:
        * TAO_IDL/be_include/be_visitor_component/component.h:

          Minor or cosmetic changes.

        Wed Oct 21 20:40:45 UTC 2009  Jeff Parsons <j.parsons@vanderbilt.edu>

        * TAO_IDL/be/be_visitor_extended_port.cpp:
        * TAO_IDL/be_include/be_visitor_extended_port.h:

          Removed these files, should have been removed in

          Wed Oct 21 14:10:35 UTC 2009  Jeff Parsons <j.parsons@vanderbilt.edu>


        * TAO_IDL/be/be_visitor_component/facet_ex_idl.cpp:
        * TAO_IDL/be/be_visitor_component/context_ex_idl.cpp:
        * TAO_IDL/be/be_visitor_component/executor_ex_idl.cpp:
        * TAO_IDL/be_include/be_visitor_component/facet_ex_idl.h:
        * TAO_IDL/be_include/be_visitor_component/context_ex_idl.h:
        * TAO_IDL/be_include/be_visitor_component/executor_ex_idl.h:

          New files, split executor IDL code generation into separate
          visitors for the facet, context and executor classes. Also
          added support for simple extended ports and porttypes.

        * TAO_IDL/be/be_visitor_component.cpp:
        * TAO_IDL/be_include/be_visitor_component.h:

          Added new files to the include lists.

        * TAO_IDL/be/be_util.cpp:
        * TAO_IDL/be_include/be_util.h:

          Moved utility methods to generate nested namespaces
          to this class, so they can be visible to all visitors.

        * TAO_IDL/be/be_visitor_component/servant_svh.cpp:
        * TAO_IDL/be/be_visitor_component/context_svh.cpp:
        * TAO_IDL/be/be_visitor_component/servant_svs.cpp:
        * TAO_IDL/be/be_visitor_component/context_svs.cpp:
        * TAO_IDL/be/be_visitor_component/component_ex_idl.cpp:
        * TAO_IDL/be/be_visitor_component/component_scope.cpp:
        * TAO_IDL/be_include/be_visitor_component/component_scope.h:
        * TAO_IDL/be_include/be_visitor_component/servant_svh.h:
        * TAO_IDL/be_include/be_visitor_component/context_svh.h:
        * TAO_IDL/be_include/be_visitor_component/servant_svs.h:
        * TAO_IDL/be_include/be_visitor_component/context_svs.h:
        * TAO_IDL/be_include/be_visitor_component/component_ex_idl.h:

          Moved visit method overrides for extended port, mirror port
          and porttype to the base class be_visitor_component_scope.
          In every case so far, the extended port (and eventually the
          mirror port) traversal just fetches the porttype reference
          and visits its scope, calling back the port kind traversal
          methods that happen to be overridden in the original
          visitor, so there's no need to reimplement these methods
          over and over.

        Wed Oct 21 14:10:35 UTC 2009  Jeff Parsons <j.parsons@vanderbilt.edu>

        * TAO_IDL/be/be_visitor_extended_port/extended_port_svs.cpp:
        * TAO_IDL/be/be_visitor_extended_port/extended_port.cpp:
        * TAO_IDL/be/be_visitor_extended_port/extended_port_svh.cpp:
        * TAO_IDL/be_include/be_visitor_extended_port/extended_port_svs.h:
        * TAO_IDL/be_include/be_visitor_extended_port/extended_port.h:
        * TAO_IDL/be_include/be_visitor_extended_port/extended_port_svh.h:

          Removed these visitors, better use of polymorphism can be made
          by just implementing their methods in the appropriate
          component visitor.

        * TAO_IDL/be/be_visitor_component/facet_svh.cpp:
        * TAO_IDL/be/be_visitor_component/facet_svs.cpp:
        * TAO_IDL/be_include/be_visitor_component/facet_svh.h:
        * TAO_IDL/be_include/be_visitor_component/facet_svs.h:

          Copied code from removed visitor methods above, and
          removed visit_component() method.

        * TAO_IDL/be/be_visitor_component/component_svh.cpp:
        * TAO_IDL/be/be_visitor_component/component_svs.cpp:

          Spawned facet visitors above with visit_component_scope()
          call, eliminating the extra step of calling visit_component().


        * TAO_IDL/be_include/be_extended_port.h:
        * TAO_IDL/be/be_extended_port.cpp:

          Overloaded port_type() method to return backend-specific
          type, to eliminate many narrowing calls.

        Tue Oct 20 22:55:25 UTC 2009  Jeff Parsons <j.parsons@vanderbilt.edu>

        * TAO_IDL/be/be_visitor_component/component_scope.cpp:
        * TAO_IDL/be_include/be_visitor_component/component_scope.h:

          New files containing a new base class visitor, encapsulating
          a scope visitation method that recurses over the scopes of
          a component's ancestors, if any.

        * TAO_IDL/be/be_visitor_component.cpp:
        * TAO_IDL/be/be_component.cpp:
        * TAO_IDL/be/be_visitor_component/servant_svh.cpp:
        * TAO_IDL/be/be_visitor_component/facet_svh.cpp:
        * TAO_IDL/be/be_visitor_component/context_svh.cpp:
        * TAO_IDL/be/be_visitor_component/servant_svs.cpp:
        * TAO_IDL/be/be_visitor_component/facet_svs.cpp:
        * TAO_IDL/be/be_visitor_component/context_svs.cpp:
        * TAO_IDL/be_include/be_component.h:
        * TAO_IDL/be_include/be_visitor_component/servant_svh.h:
        * TAO_IDL/be_include/be_visitor_component/facet_svh.h:
        * TAO_IDL/be_include/be_visitor_component/context_svh.h:
        * TAO_IDL/be_include/be_visitor_component/facet_svs.h:
        * TAO_IDL/be_include/be_visitor_component/servant_svs.h:
        * TAO_IDL/be_include/be_visitor_component/context_svs.h:
        * TAO_IDL/be_include/be_visitor_component.h:

          Replaced all occurrences of recursive scope iteration
          with new visitor classes derived from the abstract
          visitor above.

        Mon Oct 19 23:26:07 UTC 2009  Jeff Parsons <j.parsons@vanderbilt.edu>

        * TAO_IDL/be/be_visitor_component/servant_svs.cpp:
        * TAO_IDL/be/be_visitor_component/facet_svs.cpp:
        * TAO_IDL/be/be_visitor_component/context_svs.cpp:
        * TAO_IDL/be_include/be_visitor_component/facet_svs.h:
        * TAO_IDL/be_include/be_visitor_component/servant_svs.h:
        * TAO_IDL/be_include/be_visitor_component/context_svs.h:

          New files containing new visitors with code factored out
          of class be_visitor_component_svs

        * TAO_IDL/be/be_visitor_component.cpp:
        * TAO_IDL/be/be_visitor_component/facet_svh.cpp:
        * TAO_IDL/be/be_visitor_component/context_svh.cpp:
        * TAO_IDL/be/be_visitor_component/component_svs.cpp:
        * TAO_IDL/be/be_visitor_attribute/component_init.cpp:
        * TAO_IDL/be_include/be_visitor_component/component_svs.h:
        * TAO_IDL/be_include/be_visitor_component.h:

          Changes stemming from the new visitors above.

        Fri Oct 16 19:54:38 UTC 2009  Jeff Parsons <j.parsons@vanderbilt.edu>

        * TAO_IDL/be/be_visitor_component/servant_svh.cpp:
        * TAO_IDL/be/be_visitor_component/facet_svh.cpp:
        * TAO_IDL/be/be_visitor_component/context_svh.cpp:
        * TAO_IDL/be_include/be_visitor_component/servant_svh.h:
        * TAO_IDL/be_include/be_visitor_component/facet_svh.h:
        * TAO_IDL/be_include/be_visitor_component/context_svh.h:

          New files, new visitors that contain code moved from
          private methods in class be_visitor_component_svh.

        * TAO_IDL/be/be_provides.cpp:

          Fixed bug in code generation.

        * TAO_IDL/be/be_visitor_component.cpp:
        * TAO_IDL/be_include/be_visitor_component.h:

          Added new visitor files.

        * TAO_IDL/be/be_visitor_component/component_exh.cpp:

          Removed debugging output.

        * TAO_IDL/be/be_visitor_component/component_svh.cpp:
        * TAO_IDL/be_include/be_visitor_component/component_svh.h:

          Moved code out to new visitor above.

Thu Oct 29 16:36:53 UTC 2009  Yan Dai  <dai_y@ociweb.com>

        * orbsvcs/orbsvcs/Notify/MonitorControl/MonitorManager.cpp:

          Fixed a compilation error on wchar build.

Thu Oct 29 15:34:15 UTC 2009  Vladimir Zykov  <vladimir.zykov@prismtech.com>

        * bin/tao_orb_tests.lst:
          Disabled running tests 3531, 3647, and 3683 in NO_MESSAGING and
          CORBA_E_MICRO builds since those tests are not built in such
          setups.

Thu Oct 29 14:56:17 UTC 2009  Vladimir Zykov  <vladimir.zykov@prismtech.com>

        * tests/Bug_3748_Regression/client.cpp:
        * tests/Bug_3748_Regression/server.cpp:
        * tests/Bug_3748_Regression/run_test.pl:
          Temporarily made the output a bit more verbose.

Thu Oct 29 02:12:40 UTC 2009  Yan Dai  <dai_y@ociweb.com>

        * orbsvcs/orbsvcs/Notify/MonitorControl/NotificationServiceMonitor_i.cpp:
        * tao/Monitor/Monitor_Impl.cpp:

          Fixed bugs that did not initialize and set last in Numric data.

        * orbsvcs/tests/Notify/MC/test_monitor.cpp:

          Corrected some expected values.

Wed Oct 28 23:27:02 UTC 2009  Yan Dai  <dai_y@ociweb.com>

        * MPC/config/negotiate_codesets.mpb:
        * MPC/config/notify_monitor_control.mpb:
        * MPC/config/tao_notify_service.mpb:
        * docs/notification/monitor.html:
        * interop-tests/wchar/Client.java:
        * interop-tests/wchar/interop_wchar.mpc:
        * interop-tests/wchar/server.cpp:
        * orbsvcs/Notify_Service/Notify_Service.cpp:
        * orbsvcs/Notify_Service/Notify_Service.mpc:
        * orbsvcs/orbsvcs/Notify/Any/CosEC_ProxyPushConsumer.h:
        * orbsvcs/orbsvcs/Notify/Any/CosEC_ProxyPushConsumer.cpp:
        * orbsvcs/orbsvcs/Notify/Any/CosEC_ProxyPushSupplier.h:
        * orbsvcs/orbsvcs/Notify/Any/CosEC_ProxyPushSupplier.cpp:
        * orbsvcs/orbsvcs/Notify/Any/ProxyPushConsumer.h:
        * orbsvcs/orbsvcs/Notify/Any/ProxyPushConsumer.cpp:
        * orbsvcs/orbsvcs/Notify/Any/ProxyPushSupplier.h:
        * orbsvcs/orbsvcs/Notify/Any/ProxyPushSupplier.cpp:
        * orbsvcs/orbsvcs/Notify/Buffering_Strategy.h:
        * orbsvcs/orbsvcs/Notify/Buffering_Strategy.cpp:
        * orbsvcs/orbsvcs/Notify/Builder.cpp:
        * orbsvcs/orbsvcs/Notify/Consumer.h:
        * orbsvcs/orbsvcs/Notify/Consumer.inl:
        * orbsvcs/orbsvcs/Notify/MonitorControl/MonitorManager.h:
        * orbsvcs/orbsvcs/Notify/MonitorControl/MonitorManager.cpp:
        * orbsvcs/orbsvcs/Notify/MonitorControl/NotificationServiceMonitor_i.cpp:
        * orbsvcs/orbsvcs/Notify/MonitorControlExt/MC_Default_Factory.h:
        * orbsvcs/orbsvcs/Notify/MonitorControlExt/MC_Default_Factory.cpp:
        * orbsvcs/orbsvcs/Notify/MonitorControlExt/MC_Notify_Service.h:
        * orbsvcs/orbsvcs/Notify/MonitorControlExt/MC_Notify_Service.cpp:
        * orbsvcs/orbsvcs/Notify/MonitorControlExt/MonitorConsumerAdmin.h:
        * orbsvcs/orbsvcs/Notify/MonitorControlExt/MonitorConsumerAdmin.cpp:
        * orbsvcs/orbsvcs/Notify/MonitorControlExt/MonitorEventChannel.cpp:
        * orbsvcs/orbsvcs/Notify/MonitorControlExt/MonitorProxyPushSupplier.h:
        * orbsvcs/orbsvcs/Notify/MonitorControlExt/MonitorProxySupplier_T.h:
        * orbsvcs/orbsvcs/Notify/MonitorControlExt/MonitorProxySupplier_T.cpp:
        * orbsvcs/orbsvcs/Notify/MonitorControlExt/MonitorSequenceProxyPushSupplier.h:
        * orbsvcs/orbsvcs/Notify/MonitorControlExt/MonitorStructuredProxyPushSupplier.h:
        * orbsvcs/orbsvcs/Notify/MonitorControlExt/NotifyMonitoringExt.idl:
        * orbsvcs/orbsvcs/Notify/Sequence/SequenceProxyPushConsumer.h:
        * orbsvcs/orbsvcs/Notify/Sequence/SequenceProxyPushConsumer.cpp:
        * orbsvcs/orbsvcs/Notify/Sequence/SequenceProxyPushSupplier.h:
        * orbsvcs/orbsvcs/Notify/Sequence/SequenceProxyPushSupplier.cpp:
        * orbsvcs/orbsvcs/Notify/Structured/StructuredProxyPushConsumer.h:
        * orbsvcs/orbsvcs/Notify/Structured/StructuredProxyPushConsumer.cpp:
        * orbsvcs/orbsvcs/Notify/Structured/StructuredProxyPushSupplier.h:
        * orbsvcs/orbsvcs/Notify/Structured/StructuredProxyPushSupplier.cpp:
        * orbsvcs/tests/Notify/MC/Notify_Structured_Push_Consumer.h:
        * orbsvcs/tests/Notify/MC/Notify_Structured_Push_Consumer.cpp:
        * orbsvcs/tests/Notify/MC/Structured_Consumer.cpp:
        * orbsvcs/tests/Notify/MC/Structured_Supplier.cpp:
        * orbsvcs/tests/Notify/MC/notify.conf:
        * orbsvcs/tests/Notify/MC/run_test.pl:
        * orbsvcs/tests/Notify/MC/test_monitor.cpp:
        * orbsvcs/tests/Notify/MT_Dispatching/Notify_Structured_Push_Consumer.h:
        * orbsvcs/tests/Notify/MT_Dispatching/Notify_Structured_Push_Consumer.cpp:
        * orbsvcs/tests/unit/Notify/MC/Statistic/Statistic.cpp:
        * tao/Monitor/Monitor_Types.pidl:

          Merged following changes from OCI made between 1.5a p15 and p16 releases.

          - Added consumer-level queueing statistics to the Notification Service MC.
          - Added queue-overflow statistics to the Notification Service MC.
          - Modified Notification Service MC to work in static builds.
          - Corrected an error that caused Notification Service MC statistics to fail
            when -AllocateTaskPerProxy is used.
          - QueueDepth have been changed to measure the number of entries rather than
            attempting unsuccessfully to estimate the amount of memory used by the queue.
          - Added TAO_EXPLICIT_NEGOTIATE_CODESETS macro to improve the ease of including
            optional codeset support to Notify_Service in static builds.

Wed Oct 28 06:09:33 UTC 2009  Johnny Willemsen  <jwillemsen@remedy.nl>

        * bin/tao_other_tests.lst:
          Enabled a few tests for ce/fuzz

        * orbsvcs/tests/Notify/Bug_2926_Regression/run_test.pl:
        * orbsvcs/tests/Notify/Bug_3688b_Regression/run_test.pl:
        * orbsvcs/tests/Notify/Bug_3252_Regression/run_test.pl:
        * orbsvcs/tests/Notify/Bug_3646b_Regression/run_test.pl
          Converted to the new test framework

Tue Oct 27 16:58:33 UTC 2009  Vladimir Zykov  <vladimir.zykov@prismtech.com>

        * bin/tao_orb_tests.lst:
          Enabled Bug_3748_Regression in all builds except for single
          threaded.

Mon Oct 26 10:52:01 UTC 2009  Vladimir Zykov  <vladimir.zykov@prismtech.com>

        * orbsvcs/orbsvcs/HTIOP/HTIOP_Acceptor.cpp:
        * orbsvcs/orbsvcs/HTIOP/HTIOP_Acceptor.h:
        * orbsvcs/orbsvcs/HTIOP/HTIOP_Completion_Handler.cpp:
        * orbsvcs/orbsvcs/HTIOP/HTIOP_Completion_Handler.h:
        * orbsvcs/orbsvcs/HTIOP/HTIOP_Acceptor_Impl.cpp:
        * orbsvcs/orbsvcs/HTIOP/HTIOP_Acceptor_Impl.h:
          Fixed several memory leaks. Changed HTIOP Acceptor to use
          strategies implemented in HTIOP_Acceptor_Impl.*. This was
          required for proper fix for bug#3748.

        * tao/Acceptor_Impl.cpp:
          Uncommented code for a fix for bug#3748.

Thu Oct 22 10:47:21 UTC 2009  Johnny Willemsen  <jwilllemsen@remedy.nl>

        * TAO_IDL/TAO_IDL_ACE.mwc:
          Only list mpc files here

        * TAO_IDL/be/be_visitor_valuebox/valuebox_ch.cpp:
          Updated a few of the comments we generate

Tue Oct 20 22:58:21 UTC 2009  Jeff Parsons <j.parsons@vanderbilt.edu>

        * TAO_IDL/TAO_IDL_ACE.mwc:

          Updated in accordance with the changes of

          Thu Oct 15 07:20:38 UTC 2009  Johnny Willemsen  <jwillemsen@remedy.nl>

Tue Oct 20 12:09:06 UTC 2009  Johnny Willemsen  <jwillemsen@remedy.nl>

        * orbsvcs/Concurrency_Service/Concurrency_Service.cpp:
        * orbsvcs/Concurrency_Service/Concurrency_Service.mpc:
        * orbsvcs/CosEvent_Service/CosEvent_Service.cpp:
        * orbsvcs/Event_Service/Event_Service.cpp:
        * orbsvcs/Event_Service/Event_Service.mpc:
        * orbsvcs/Notify_Service/Notify_Service.cpp:
        * orbsvcs/Notify_Service/Notify_Service.mpc:
        * orbsvcs/orbsvcs/Trader/Trading_Loader.cpp:
        * MPC/config/tao_notify_service.mpb:
          Handle -ORBDeamon in these services directly, this is a work around
          until bugzilla 3335 gets resolved. This fixes bugzilla 3656

Mon Oct 19 12:18:06 UTC 2009  Johnny Willemsen  <jwillemsen@remedy.nl>

        * orbsvcs/orbsvcs/Makefile.am:
          Add Daemon_Utilities

        * orbsvcs/Naming_Service/Naming_Service.cpp:
        * orbsvcs/Naming_Service/Naming_Service.mpc:
          Use Deamon_Utilities to handle -ORBDeamon in the naming service. This
          is because -ORBDeamon doesn't work for these services due to bugzilla
          3335. This is related to bugzilla 3656

Mon Oct 19 12:13:06 UTC 2009  Johnny Willemsen  <jwillemsen@remedy.nl>

        * orbsvcs/IFR_Service/IFR_Service.mpc:
          Use tao_idl_fe base project

        * orbsvcs/orbsvcs/Daemon_Utilities.cpp:
        * orbsvcs/orbsvcs/Daemon_Utilities.h:
        * orbsvcs/orbsvcs/Svc_Utils.mpc:
          New helper class which checks for -ORBDeamon and when this is specified
          it calls ACE::deamonize()

Mon Oct 19 00:26:06 UTC 2009  Douglas C. Schmidt  <schmidt@dre.vanderbilt.edu>

        * orbsvcs/orbsvcs/Time/TAO_Time_Service_Server.cpp: Another shot
          at trying to fix the memory leaks in the servants.  Thanks to
          Johnny for reporting this.

Fri Oct 16 02:09:47 UTC 2009  Jeff Parsons <j.parsons@vanderbilt.edu>

        * TAO_IDL/fe/mcpp_tao_yyinput.h:

          Fixed potential signed/unsigned mismatch in macro definition
          for TAO_YY_INPUT.

Thu Oct 15 21:44:22 UTC 2009  Jeff Parsons <j.parsons@vanderbilt.edu>

        * TAO_IDL/fe/mcpp_tao_yyinput.h:
        * TAO_IDL/fe/fe_extern.cpp:

          Made tao_preproc_buffer_pos an extern int, similar to
          its neighbor tao_preproc_buffer_length, so it can be
          reset to 0 for each new file processed in the same
          location that tao_preproc_buffer_length is reset. The
          failure to reset tao_preproc_buffer_pos was causing
          an error in the CoSMIC-specific backend, which is the
          only one currently processing multiple IDL files in
          a single execution. When reading the first token from
          the 2nd file, the lexer would not be at the top of
          the buffer and would therefore read garbage.

Thu Oct 15 17:02:54 UTC 2009  Douglas C. Schmidt  <schmidt@dre.vanderbilt.edu>

        * orbsvcs/orbsvcs/Time/TAO_Time_Service_Server.cpp
          (universal_time): Replaced TAO_UTO_var with CosTime::UTO_var to
          fix a compile error.  Thanks to Johnny for reporting this.

Thu Oct 15 16:05:25 UTC 2009  Vladimir Zykov  <vz@prismtech.com>

        * bin/tao_other_tests.lst:
          Disabled HTIOP tests on static builds since they need
          dynamic loading for HTIOP library.

        * tao/Acceptor_Impl.cpp:
          Temporarily commented out problematic code until
          HTIOP is fixed.

Thu Oct 15 14:01:38 UTC 2009  Johnny Willemsen  <jwillemsen@remedy.nl>

        * TAO_IDL/be/be_visitor_component/component_ch.cpp:
        * TAO_IDL/be/be_visitor_interface/interface_ch.cpp:
          Fixed typo in comment

Thu Oct 15 11:33:38 UTC 2009  Johnny Willemsen  <jwillemsen@remedy.nl>

        * docs/documentation.html:
          Updated link to the TPG

Thu Oct 15 07:20:38 UTC 2009  Johnny Willemsen  <jwillemsen@remedy.nl>

        * TAO_IDL/tao_idl.mpc
        * TAO_IDL/tao_idl_be.mpc
        * TAO_IDL/tao_idl_fe.mpc
          Added seperate mpc files for the back end and the front end library

Wed Oct 14 23:05:35 UTC 2009  William R. Otte  <wotte@dre.vanderbilt.edu>

        * TAO_IDL/contrib/mcpp/support.cpp:
          Now releases ownership of in-memory buffers when retrieved for
          preprocessing.  Fixes a crash when in-memory preprocessor
          was used multiple times per process invocation.

Wed Oct 14 18:31:38 UTC 2009  Johnny Willemsen  <jwillemsen@remedy.nl>

        * TAO_IDL/tao_idl.mpc:
          Use the new tao_idl_fe base project

Wed Oct 14 18:26:38 UTC 2009  Johnny Willemsen  <jwillemsen@remedy.nl>

        * MPC/config/tao_idl_fe.mpb:
          New base project for tao_idl_fe

Wed Oct 14 18:16:38 UTC 2009  Johnny Willemsen  <jwillemsen@remedy.nl>

        * TAO_IDL/contrib/mcpp/system.cpp:
          Fixed argument not used warning

Wed Oct 14 17:42:38 UTC 2009  Vladimir Zykov  <vz@prismtech.com>

        * tao/Acceptor_Impl.cpp:
          Fixed bug#3748. It fixes a connection handler leak when
          server accepts a connection but then fails to open a connection
          handler.

Wed Oct 14 16:53:09 UTC 2009  Jeff Parsons <j.parsons@vanderbilt.edu>

        * TAO_IDL/be/be_provides.cpp:

          Fixed bug in facet servant class generation.

        * TAO_IDL/be/be_interface.cpp(traverse_inheritance_graph):

          Added "!= 0" to an IF state checking the return value
          of a call to ACE_Unbounded_Queue, which returns an int.

Wed Oct 14 13:51:03 UTC 2009  Douglas C. Schmidt  <schmidt@dre.vanderbilt.edu>

        * orbsvcs/orbsvcs/Time/TAO_Time_Service_Server.cpp (universal_time):
          Changed

          TAO_UTO *uto = 0;

          to

          TAO_UTO_Var uto;

          to avoid a memory leak.  Thanks to Chris Shaw <google at
          cshaw-tech dot co dot uk> for reporting this.

Tue Oct 13 15:54:44 UTC 2009  Vladimir Zykov  <vz@prismtech.com>

        * tests/Bug_3748_Regression/client.cpp:
        * tests/Bug_3748_Regression/Bug_3748_Regression.mpc:
        * tests/Bug_3748_Regression/Hello.cpp:
        * tests/Bug_3748_Regression/Test.idl:
        * tests/Bug_3748_Regression/server.cpp:
        * tests/Bug_3748_Regression/Makefile.am:
        * tests/Bug_3748_Regression/Hello.h:
        * tests/Bug_3748_Regression/README:
        * tests/Bug_3748_Regression/run_test.pl:
        * bin/tao_orb_tests.lst:
          Added a test for bug#3748.

Tue Oct 13 15:36:48 UTC 2009  Jeff Parsons <j.parsons@vanderbilt.edu>

        * TAO_IDL/be/be_visitor_extended_port/extended_port_svs.cpp:
        * TAO_IDL/be_include/be_visitor_extended_port/extended_port_svs.h:

          New files, containing new visitor that generates the implementation
          of the facet servant class.

        * TAO_IDL/be/be_provides.cpp:
        * TAO_IDL/be/be_interface.cpp:
        * TAO_IDL/be_include/be_interface.h:
        * TAO_IDL/be_include/be_provides.h:

          Factored common code generation into the appropriate nodes.

        * TAO_IDL/narrow/narrow.cpp:

          Added port types to the group of types that can be
          transformed from scope to decl and vice versa.

        * TAO_IDL/be/be_visitor_extended_port/extended_port.cpp:
        * TAO_IDL/be/be_visitor_extended_port/extended_port_svh.cpp:
        * TAO_IDL/be/be_visitor_component/component_svh.cpp:
        * TAO_IDL/be/be_visitor_component/component_svs.cpp:
        * TAO_IDL/be/be_visitor_extended_port.cpp:
        * TAO_IDL/be_include/be_visitor_extended_port.h:
        * TAO_IDL/be_include/be_visitor_extended_port/extended_port.h:
        * TAO_IDL/be_include/be_visitor_extended_port/extended_port_svh.h:

          Added new files as includes, factored common visitor code into
          base class, other minor changes.

Mon Oct 12 14:03:48 CDT 2009  Johnny Willemsen  <jwillemsen@remedy.nl>

              * TAO version 1.7.4 released.

Local Variables:
mode: change-log
add-log-time-format: (lambda () (progn (setq tz (getenv "TZ")) (set-time-zone-rule "UTC") (setq time (format-time-string "%a %b %e %H:%M:%S %Z %Y" (current-time))) (set-time-zone-rule tz) time))
indent-tabs-mode: nil
End:
