#ifndef _cubitS_h
#define _cubitS_h

#include "cubitC.h"

/************************************************************************/
/*                                                                      */
/* This file is automatically generated by ORBeline IDL compiler        */
/* Do not modify this file.                                             */
/*                                                                      */
/* ORBeline (c) is copyrighted by PostModern Computing, Inc.            */
/*                                                                      */
/* The generated code conforms to OMG's IDL C++ mapping as              */
/* specified in OMG Document Number: 94-9-14.                           */
/*                                                                      */
/************************************************************************/

class _sk_Cubit : public Cubit
{
    protected:
	_sk_Cubit(const char *object_name = (const char *)NULL);
	_sk_Cubit(const char *service_name, const CORBA::ReferenceData& data);
	virtual ~_sk_Cubit() {}
    public:
	static const CORBA::TypeInfo _skel_info;

	// The following operations need to be implemented by the server.
	virtual CORBA::Octet cube_octet(CORBA::Octet o) = 0;
	virtual CORBA::Short cube_short(CORBA::Short s) = 0;
	virtual CORBA::Long cube_long(CORBA::Long l) = 0;
	virtual Cubit::Many cube_struct(const Cubit::Many& values) = 0;
	virtual Cubit::oneof cube_union(const Cubit::oneof& values) = 0;
	virtual void please_exit() = 0;
	
	// Skeleton Operations implemented automatically
	
	static void _cube_octet(void *obj,
			CORBA::MarshalStream &strm,
			CORBA::Principal_ptr principal,
			const char *oper,
			void *priv_data);
	
	static void _cube_short(void *obj,
			CORBA::MarshalStream &strm,
			CORBA::Principal_ptr principal,
			const char *oper,
			void *priv_data);
	
	static void _cube_long(void *obj,
			CORBA::MarshalStream &strm,
			CORBA::Principal_ptr principal,
			const char *oper,
			void *priv_data);
	
	static void _cube_struct(void *obj,
			CORBA::MarshalStream &strm,
			CORBA::Principal_ptr principal,
			const char *oper,
			void *priv_data);
	
	static void _cube_union(void *obj,
			CORBA::MarshalStream &strm,
			CORBA::Principal_ptr principal,
			const char *oper,
			void *priv_data);
	
	static void _please_exit(void *obj,
			CORBA::MarshalStream &strm,
			CORBA::Principal_ptr principal,
			const char *oper,
			void *priv_data);
	
};
template <class T>
class _tie_Cubit : public Cubit
{
    public:
	_tie_Cubit(T& t, const char *obj_name=(char*)NULL) : 
			Cubit(obj_name), 
			_ref(t) {
		_object_name(obj_name);
	}
	_tie_Cubit(T& t, const char *service_name,
			const CORBA::ReferenceData& id)
			:_ref(t) {
		_service(service_name, id);
	}
	~_tie_Cubit() {}
	CORBA::Octet cube_octet(CORBA::Octet o) {
		return _ref.cube_octet(
		o);
	}
	CORBA::Short cube_short(CORBA::Short s) {
		return _ref.cube_short(
		s);
	}
	CORBA::Long cube_long(CORBA::Long l) {
		return _ref.cube_long(
		l);
	}
	Cubit::Many cube_struct(const Cubit::Many& values) {
		return _ref.cube_struct(
		values);
	}
	Cubit::oneof cube_union(const Cubit::oneof& values) {
		return _ref.cube_union(
		values);
	}
	void please_exit() {
		_ref.please_exit();
	}

    private:
	T& _ref;
};

#endif

