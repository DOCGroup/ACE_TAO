1.	#include "ace/Reactor.h"
	
2.	ACE_Reactor * g_reactor;
	
3.	static sig_atomic_t finished = 0;
4.	extern "C" void handler (int) { finished = 1; }
	
5.	static const u_short PORT = ACE_DEFAULT_SERVER_PORT;
	
6.	int main (int argc, char *argv[])
	{
7.	  g_reactor = new ACE_Reactor;
	
	  // Acceptor factory.
8.	  Logging_Acceptor peer_acceptor;
	
9.	  if (peer_acceptor.open (ACE_INET_Addr (PORT)) == -1)
10.	    ACE_ERROR_RETURN ((LM_ERROR, "%p\n", "open"), -1);
	
11.	  else if (g_reactor->register_handler (&peer_acceptor, ACE_Event_Handler::READ_MASK) == -1)
12.	    ACE_ERROR_RETURN ((LM_ERROR, "registering service with ACE_Reactor\n"), -1);
	
13.	  ACE_Sig_Action sa ((ACE_SignalHandler) handler, SIGINT);
	
	  // Run forever, performing logging service.
	
14.	  ACE_DEBUG ((LM_DEBUG, "(%P|%t) starting up server logging daemon\n"));
	
	  // Perform logging service until QUIT_HANDLER receives SIGINT.
15.	  while ( !finished )
16.	    g_reactor->handle_events ();
	
17.	  ACE_DEBUG ((LM_DEBUG, "(%P|%t) shutting down server logging daemon\n"));
	
18.	  return 0;
	}
