##  Process this file with automake to create Makefile.in
##
## $Id$
##
## This file was generated by MPC.  Any changes made directly to
## this file will be lost the next time it is generated.
##
## MPC Command:
## ../bin/mwc.pl -type automake -noreldefs TAO.mwc

ACE_BUILDDIR = $(top_builddir)/..
ACE_ROOT = $(top_srcdir)/..
TAO_BUILDDIR = $(top_builddir)
TAO_ROOT = $(top_srcdir)

noinst_PROGRAMS =

## Makefile.Sequence_Unit_Tests_B_Obj_Ref_Seq.am

if BUILD_BOOST
if BUILD_EXCEPTIONS

noinst_PROGRAMS += bounded_object_reference_sequence_ut

bounded_object_reference_sequence_ut_CPPFLAGS = \
  -I$(ACE_ROOT) \
  -I$(ACE_BUILDDIR) \
  -I$(TAO_ROOT) \
  -I$(TAO_BUILDDIR) \
  -I$(BOOST_ROOT)/include/$(BOOST_VERSION) \
  -I$(BOOST_ROOT)/.

bounded_object_reference_sequence_ut_SOURCES = \
  bounded_object_reference_sequence_ut.cpp \
  mock_reference.cpp \
  mock_reference.hpp

bounded_object_reference_sequence_ut_LDFLAGS = \
  -L$(BOOST_ROOT)/lib

bounded_object_reference_sequence_ut_LDADD = \
  $(TAO_BUILDDIR)/tao/libTAO.la \
  $(ACE_BUILDDIR)/ace/libACE.la \
  -l$(BOOST_STATIC_LIB_PREFIX)boost_unit_test_framework$(BOOST_CFG)

endif BUILD_EXCEPTIONS
endif BUILD_BOOST

## Makefile.Sequence_Unit_Tests_B_Sequence_CDR.am

if BUILD_BOOST
if BUILD_EXCEPTIONS

noinst_PROGRAMS += bounded_sequence_cdr_ut

bounded_sequence_cdr_ut_CPPFLAGS = \
  -I$(ACE_ROOT) \
  -I$(ACE_BUILDDIR) \
  -I$(TAO_ROOT) \
  -I$(TAO_BUILDDIR) \
  -I$(BOOST_ROOT)/include/$(BOOST_VERSION) \
  -I$(BOOST_ROOT)/.

bounded_sequence_cdr_ut_SOURCES = \
  bounded_sequence_cdr_ut.cpp \
  mock_reference.cpp \
  mock_reference.hpp

bounded_sequence_cdr_ut_LDFLAGS = \
  -L$(BOOST_ROOT)/lib

bounded_sequence_cdr_ut_LDADD = \
  $(TAO_BUILDDIR)/tao/libTAO.la \
  $(ACE_BUILDDIR)/ace/libACE.la \
  -l$(BOOST_STATIC_LIB_PREFIX)boost_unit_test_framework$(BOOST_CFG)

endif BUILD_EXCEPTIONS
endif BUILD_BOOST

## Makefile.Sequence_Unit_Tests_B_Simple_Types.am

if BUILD_EXCEPTIONS

noinst_PROGRAMS += Bounded_Simple_Types

Bounded_Simple_Types_CPPFLAGS = \
  -I$(ACE_ROOT) \
  -I$(ACE_BUILDDIR) \
  -I$(TAO_ROOT) \
  -I$(TAO_BUILDDIR)

Bounded_Simple_Types_SOURCES = \
  Bounded_Simple_Types.cpp \
  bounded_sequence_cdr.hpp \
  fwd_mock_reference.hpp \
  mock_array.hpp \
  mock_reference.hpp \
  string_sequence_tester.hpp \
  testing_allocation_traits.hpp \
  testing_counters.hpp \
  testing_exception.hpp \
  testing_object_reference_traits.hpp \
  testing_range_checking.hpp \
  testing_string_traits.hpp \
  unbounded_sequence_cdr.hpp \
  value_sequence_tester.hpp

Bounded_Simple_Types_LDADD = \
  $(TAO_BUILDDIR)/tao/libTAO.la \
  $(ACE_BUILDDIR)/ace/libACE.la

endif BUILD_EXCEPTIONS

## Makefile.Sequence_Unit_Tests_B_String_Seq.am

if BUILD_BOOST
if BUILD_EXCEPTIONS

noinst_PROGRAMS += bounded_string_sequence_ut

bounded_string_sequence_ut_CPPFLAGS = \
  -I$(ACE_ROOT) \
  -I$(ACE_BUILDDIR) \
  -I$(TAO_ROOT) \
  -I$(TAO_BUILDDIR) \
  -I$(BOOST_ROOT)/include/$(BOOST_VERSION) \
  -I$(BOOST_ROOT)/.

bounded_string_sequence_ut_SOURCES = \
  bounded_string_sequence_ut.cpp \
  bounded_sequence_cdr.hpp \
  fwd_mock_reference.hpp \
  mock_array.hpp \
  mock_reference.hpp \
  string_sequence_tester.hpp \
  testing_allocation_traits.hpp \
  testing_counters.hpp \
  testing_exception.hpp \
  testing_object_reference_traits.hpp \
  testing_range_checking.hpp \
  testing_string_traits.hpp \
  unbounded_sequence_cdr.hpp \
  value_sequence_tester.hpp

bounded_string_sequence_ut_LDFLAGS = \
  -L$(BOOST_ROOT)/lib

bounded_string_sequence_ut_LDADD = \
  $(TAO_BUILDDIR)/tao/libTAO.la \
  $(ACE_BUILDDIR)/ace/libACE.la \
  -l$(BOOST_STATIC_LIB_PREFIX)boost_unit_test_framework$(BOOST_CFG)

endif BUILD_EXCEPTIONS
endif BUILD_BOOST

## Makefile.Sequence_Unit_Tests_B_Value_Sequence.am

if BUILD_BOOST
if BUILD_EXCEPTIONS

noinst_PROGRAMS += bounded_value_sequence_ut

bounded_value_sequence_ut_CPPFLAGS = \
  -I$(ACE_ROOT) \
  -I$(ACE_BUILDDIR) \
  -I$(TAO_ROOT) \
  -I$(TAO_BUILDDIR) \
  -I$(BOOST_ROOT)/include/$(BOOST_VERSION) \
  -I$(BOOST_ROOT)/.

bounded_value_sequence_ut_SOURCES = \
  bounded_value_sequence_ut.cpp \
  bounded_sequence_cdr.hpp \
  fwd_mock_reference.hpp \
  mock_array.hpp \
  mock_reference.hpp \
  string_sequence_tester.hpp \
  testing_allocation_traits.hpp \
  testing_counters.hpp \
  testing_exception.hpp \
  testing_object_reference_traits.hpp \
  testing_range_checking.hpp \
  testing_string_traits.hpp \
  unbounded_sequence_cdr.hpp \
  value_sequence_tester.hpp

bounded_value_sequence_ut_LDFLAGS = \
  -L$(BOOST_ROOT)/lib

bounded_value_sequence_ut_LDADD = \
  $(TAO_BUILDDIR)/tao/libTAO.la \
  $(ACE_BUILDDIR)/ace/libACE.la \
  -l$(BOOST_STATIC_LIB_PREFIX)boost_unit_test_framework$(BOOST_CFG)

endif BUILD_EXCEPTIONS
endif BUILD_BOOST

## Makefile.Sequence_Unit_Tests_Bounded_String.am

if BUILD_EXCEPTIONS

noinst_PROGRAMS += Bounded_String

Bounded_String_CPPFLAGS = \
  -I$(ACE_ROOT) \
  -I$(ACE_BUILDDIR) \
  -I$(TAO_ROOT) \
  -I$(TAO_BUILDDIR)

Bounded_String_SOURCES = \
  Bounded_String.cpp \
  bounded_sequence_cdr.hpp \
  fwd_mock_reference.hpp \
  mock_array.hpp \
  mock_reference.hpp \
  string_sequence_tester.hpp \
  testing_allocation_traits.hpp \
  testing_counters.hpp \
  testing_exception.hpp \
  testing_object_reference_traits.hpp \
  testing_range_checking.hpp \
  testing_string_traits.hpp \
  unbounded_sequence_cdr.hpp \
  value_sequence_tester.hpp

Bounded_String_LDADD = \
  $(TAO_BUILDDIR)/tao/libTAO.la \
  $(ACE_BUILDDIR)/ace/libACE.la

endif BUILD_EXCEPTIONS

## Makefile.Sequence_Unit_Tests_Obj_Ref_Seq_Elem.am

if BUILD_BOOST
if BUILD_EXCEPTIONS

noinst_PROGRAMS += object_reference_sequence_element_ut

object_reference_sequence_element_ut_CPPFLAGS = \
  -I$(ACE_ROOT) \
  -I$(ACE_BUILDDIR) \
  -I$(TAO_ROOT) \
  -I$(TAO_BUILDDIR) \
  -I$(BOOST_ROOT)/include/$(BOOST_VERSION) \
  -I$(BOOST_ROOT)/.

object_reference_sequence_element_ut_SOURCES = \
  mock_reference.cpp \
  object_reference_sequence_element_ut.cpp \
  mock_reference.hpp

object_reference_sequence_element_ut_LDFLAGS = \
  -L$(BOOST_ROOT)/lib

object_reference_sequence_element_ut_LDADD = \
  $(TAO_BUILDDIR)/tao/libTAO.la \
  $(ACE_BUILDDIR)/ace/libACE.la \
  -l$(BOOST_STATIC_LIB_PREFIX)boost_unit_test_framework$(BOOST_CFG)

endif BUILD_EXCEPTIONS
endif BUILD_BOOST

## Makefile.Sequence_Unit_Tests_String_Seq_Elem.am

if BUILD_BOOST
if BUILD_EXCEPTIONS

noinst_PROGRAMS += string_sequence_element_ut

string_sequence_element_ut_CPPFLAGS = \
  -I$(ACE_ROOT) \
  -I$(ACE_BUILDDIR) \
  -I$(TAO_ROOT) \
  -I$(TAO_BUILDDIR) \
  -I$(BOOST_ROOT)/include/$(BOOST_VERSION) \
  -I$(BOOST_ROOT)/.

string_sequence_element_ut_SOURCES = \
  string_sequence_element_ut.cpp \
  bounded_sequence_cdr.hpp \
  fwd_mock_reference.hpp \
  mock_array.hpp \
  mock_reference.hpp \
  string_sequence_tester.hpp \
  testing_allocation_traits.hpp \
  testing_counters.hpp \
  testing_exception.hpp \
  testing_object_reference_traits.hpp \
  testing_range_checking.hpp \
  testing_string_traits.hpp \
  unbounded_sequence_cdr.hpp \
  value_sequence_tester.hpp

string_sequence_element_ut_LDFLAGS = \
  -L$(BOOST_ROOT)/lib

string_sequence_element_ut_LDADD = \
  $(TAO_BUILDDIR)/tao/libTAO.la \
  $(ACE_BUILDDIR)/ace/libACE.la \
  -l$(BOOST_STATIC_LIB_PREFIX)boost_unit_test_framework$(BOOST_CFG)

endif BUILD_EXCEPTIONS
endif BUILD_BOOST

## Makefile.Sequence_Unit_Tests_Test_Alloc_Traits.am

if BUILD_BOOST
if BUILD_EXCEPTIONS

noinst_PROGRAMS += testing_allocation_traits_ut

testing_allocation_traits_ut_CPPFLAGS = \
  -I$(ACE_ROOT) \
  -I$(ACE_BUILDDIR) \
  -I$(TAO_ROOT) \
  -I$(TAO_BUILDDIR) \
  -I$(BOOST_ROOT)/include/$(BOOST_VERSION) \
  -I$(BOOST_ROOT)/.

testing_allocation_traits_ut_SOURCES = \
  testing_allocation_traits_ut.cpp \
  bounded_sequence_cdr.hpp \
  fwd_mock_reference.hpp \
  mock_array.hpp \
  mock_reference.hpp \
  string_sequence_tester.hpp \
  testing_allocation_traits.hpp \
  testing_counters.hpp \
  testing_exception.hpp \
  testing_object_reference_traits.hpp \
  testing_range_checking.hpp \
  testing_string_traits.hpp \
  unbounded_sequence_cdr.hpp \
  value_sequence_tester.hpp

testing_allocation_traits_ut_LDFLAGS = \
  -L$(BOOST_ROOT)/lib

testing_allocation_traits_ut_LDADD = \
  $(TAO_BUILDDIR)/tao/libTAO.la \
  $(ACE_BUILDDIR)/ace/libACE.la \
  -l$(BOOST_STATIC_LIB_PREFIX)boost_unit_test_framework$(BOOST_CFG)

endif BUILD_EXCEPTIONS
endif BUILD_BOOST

## Makefile.Sequence_Unit_Tests_UB_Fwd_Ob_Ref_Seq.am

if BUILD_BOOST
if BUILD_EXCEPTIONS

noinst_PROGRAMS += unbounded_fwd_object_reference_sequence_ut

unbounded_fwd_object_reference_sequence_ut_CPPFLAGS = \
  -I$(ACE_ROOT) \
  -I$(ACE_BUILDDIR) \
  -I$(TAO_ROOT) \
  -I$(TAO_BUILDDIR) \
  -I$(BOOST_ROOT)/include/$(BOOST_VERSION) \
  -I$(BOOST_ROOT)/.

unbounded_fwd_object_reference_sequence_ut_SOURCES = \
  fwd_mock_reference.cpp \
  unbounded_fwd_object_reference_sequence_ut.cpp \
  fwd_mock_reference.hpp

unbounded_fwd_object_reference_sequence_ut_LDFLAGS = \
  -L$(BOOST_ROOT)/lib

unbounded_fwd_object_reference_sequence_ut_LDADD = \
  $(TAO_BUILDDIR)/tao/libTAO.la \
  $(ACE_BUILDDIR)/ace/libACE.la \
  -l$(BOOST_STATIC_LIB_PREFIX)boost_unit_test_framework$(BOOST_CFG)

endif BUILD_EXCEPTIONS
endif BUILD_BOOST

## Makefile.Sequence_Unit_Tests_UB_Obj_Ref_Seq.am

if BUILD_BOOST
if BUILD_EXCEPTIONS

noinst_PROGRAMS += unbounded_object_reference_sequence_ut

unbounded_object_reference_sequence_ut_CPPFLAGS = \
  -I$(ACE_ROOT) \
  -I$(ACE_BUILDDIR) \
  -I$(TAO_ROOT) \
  -I$(TAO_BUILDDIR) \
  -I$(BOOST_ROOT)/include/$(BOOST_VERSION) \
  -I$(BOOST_ROOT)/.

unbounded_object_reference_sequence_ut_SOURCES = \
  mock_reference.cpp \
  unbounded_object_reference_sequence_ut.cpp \
  mock_reference.hpp

unbounded_object_reference_sequence_ut_LDFLAGS = \
  -L$(BOOST_ROOT)/lib

unbounded_object_reference_sequence_ut_LDADD = \
  $(TAO_BUILDDIR)/tao/libTAO.la \
  $(ACE_BUILDDIR)/ace/libACE.la \
  -l$(BOOST_STATIC_LIB_PREFIX)boost_unit_test_framework$(BOOST_CFG)

endif BUILD_EXCEPTIONS
endif BUILD_BOOST

## Makefile.Sequence_Unit_Tests_UB_Oct_Seq_No_Cpy.am

if BUILD_BOOST
if BUILD_EXCEPTIONS

noinst_PROGRAMS += unbounded_octet_sequence_nocopy_ut

unbounded_octet_sequence_nocopy_ut_CPPFLAGS = \
  -I$(ACE_ROOT) \
  -I$(ACE_BUILDDIR) \
  -I$(TAO_ROOT) \
  -I$(TAO_BUILDDIR) \
  -I$(BOOST_ROOT)/include/$(BOOST_VERSION) \
  -I$(BOOST_ROOT)/.

unbounded_octet_sequence_nocopy_ut_SOURCES = \
  mock_reference.cpp \
  unbounded_octet_sequence_nocopy_ut.cpp \
  mock_reference.hpp

unbounded_octet_sequence_nocopy_ut_LDFLAGS = \
  -L$(BOOST_ROOT)/lib

unbounded_octet_sequence_nocopy_ut_LDADD = \
  $(TAO_BUILDDIR)/tao/libTAO.la \
  $(ACE_BUILDDIR)/ace/libACE.la \
  -l$(BOOST_STATIC_LIB_PREFIX)boost_unit_test_framework$(BOOST_CFG)

endif BUILD_EXCEPTIONS
endif BUILD_BOOST

## Makefile.Sequence_Unit_Tests_UB_Octet_Sequence.am

if BUILD_BOOST
if BUILD_EXCEPTIONS

noinst_PROGRAMS += unbounded_octet_sequence_ut

unbounded_octet_sequence_ut_CPPFLAGS = \
  -I$(ACE_ROOT) \
  -I$(ACE_BUILDDIR) \
  -I$(TAO_ROOT) \
  -I$(TAO_BUILDDIR) \
  -I$(BOOST_ROOT)/include/$(BOOST_VERSION) \
  -I$(BOOST_ROOT)/.

unbounded_octet_sequence_ut_SOURCES = \
  mock_reference.cpp \
  unbounded_octet_sequence_ut.cpp \
  mock_reference.hpp

unbounded_octet_sequence_ut_LDFLAGS = \
  -L$(BOOST_ROOT)/lib

unbounded_octet_sequence_ut_LDADD = \
  $(TAO_BUILDDIR)/tao/libTAO.la \
  $(ACE_BUILDDIR)/ace/libACE.la \
  -l$(BOOST_STATIC_LIB_PREFIX)boost_unit_test_framework$(BOOST_CFG)

endif BUILD_EXCEPTIONS
endif BUILD_BOOST

## Makefile.Sequence_Unit_Tests_UB_Sequence_CDR.am

if BUILD_BOOST
if BUILD_EXCEPTIONS

noinst_PROGRAMS += unbounded_sequence_cdr_ut

unbounded_sequence_cdr_ut_CPPFLAGS = \
  -I$(ACE_ROOT) \
  -I$(ACE_BUILDDIR) \
  -I$(TAO_ROOT) \
  -I$(TAO_BUILDDIR) \
  -I$(BOOST_ROOT)/include/$(BOOST_VERSION) \
  -I$(BOOST_ROOT)/.

unbounded_sequence_cdr_ut_SOURCES = \
  mock_reference.cpp \
  unbounded_sequence_cdr_ut.cpp \
  mock_reference.hpp

unbounded_sequence_cdr_ut_LDFLAGS = \
  -L$(BOOST_ROOT)/lib

unbounded_sequence_cdr_ut_LDADD = \
  $(TAO_BUILDDIR)/tao/libTAO.la \
  $(ACE_BUILDDIR)/ace/libACE.la \
  -l$(BOOST_STATIC_LIB_PREFIX)boost_unit_test_framework$(BOOST_CFG)

endif BUILD_EXCEPTIONS
endif BUILD_BOOST

## Makefile.Sequence_Unit_Tests_UB_Simple_Types.am

if BUILD_EXCEPTIONS

noinst_PROGRAMS += Unbounded_Simple_Types

Unbounded_Simple_Types_CPPFLAGS = \
  -I$(ACE_ROOT) \
  -I$(ACE_BUILDDIR) \
  -I$(TAO_ROOT) \
  -I$(TAO_BUILDDIR)

Unbounded_Simple_Types_SOURCES = \
  Unbounded_Simple_Types.cpp \
  bounded_sequence_cdr.hpp \
  fwd_mock_reference.hpp \
  mock_array.hpp \
  mock_reference.hpp \
  string_sequence_tester.hpp \
  testing_allocation_traits.hpp \
  testing_counters.hpp \
  testing_exception.hpp \
  testing_object_reference_traits.hpp \
  testing_range_checking.hpp \
  testing_string_traits.hpp \
  unbounded_sequence_cdr.hpp \
  value_sequence_tester.hpp

Unbounded_Simple_Types_LDADD = \
  $(TAO_BUILDDIR)/tao/libTAO.la \
  $(ACE_BUILDDIR)/ace/libACE.la

endif BUILD_EXCEPTIONS

## Makefile.Sequence_Unit_Tests_UB_String_Seq.am

if BUILD_BOOST
if BUILD_EXCEPTIONS

noinst_PROGRAMS += unbounded_string_sequence_ut

unbounded_string_sequence_ut_CPPFLAGS = \
  -I$(ACE_ROOT) \
  -I$(ACE_BUILDDIR) \
  -I$(TAO_ROOT) \
  -I$(TAO_BUILDDIR) \
  -I$(BOOST_ROOT)/include/$(BOOST_VERSION) \
  -I$(BOOST_ROOT)/.

unbounded_string_sequence_ut_SOURCES = \
  unbounded_string_sequence_ut.cpp \
  bounded_sequence_cdr.hpp \
  fwd_mock_reference.hpp \
  mock_array.hpp \
  mock_reference.hpp \
  string_sequence_tester.hpp \
  testing_allocation_traits.hpp \
  testing_counters.hpp \
  testing_exception.hpp \
  testing_object_reference_traits.hpp \
  testing_range_checking.hpp \
  testing_string_traits.hpp \
  unbounded_sequence_cdr.hpp \
  value_sequence_tester.hpp

unbounded_string_sequence_ut_LDFLAGS = \
  -L$(BOOST_ROOT)/lib

unbounded_string_sequence_ut_LDADD = \
  $(TAO_BUILDDIR)/tao/libTAO.la \
  $(ACE_BUILDDIR)/ace/libACE.la \
  -l$(BOOST_STATIC_LIB_PREFIX)boost_unit_test_framework$(BOOST_CFG)

endif BUILD_EXCEPTIONS
endif BUILD_BOOST

## Makefile.Sequence_Unit_Tests_UB_Value_Sequence.am

if BUILD_BOOST
if BUILD_EXCEPTIONS

noinst_PROGRAMS += unbounded_value_sequence_ut

unbounded_value_sequence_ut_CPPFLAGS = \
  -I$(ACE_ROOT) \
  -I$(ACE_BUILDDIR) \
  -I$(TAO_ROOT) \
  -I$(TAO_BUILDDIR) \
  -I$(BOOST_ROOT)/include/$(BOOST_VERSION) \
  -I$(BOOST_ROOT)/.

unbounded_value_sequence_ut_SOURCES = \
  unbounded_value_sequence_ut.cpp \
  bounded_sequence_cdr.hpp \
  fwd_mock_reference.hpp \
  mock_array.hpp \
  mock_reference.hpp \
  string_sequence_tester.hpp \
  testing_allocation_traits.hpp \
  testing_counters.hpp \
  testing_exception.hpp \
  testing_object_reference_traits.hpp \
  testing_range_checking.hpp \
  testing_string_traits.hpp \
  unbounded_sequence_cdr.hpp \
  value_sequence_tester.hpp

unbounded_value_sequence_ut_LDFLAGS = \
  -L$(BOOST_ROOT)/lib

unbounded_value_sequence_ut_LDADD = \
  $(TAO_BUILDDIR)/tao/libTAO.la \
  $(ACE_BUILDDIR)/ace/libACE.la \
  -l$(BOOST_STATIC_LIB_PREFIX)boost_unit_test_framework$(BOOST_CFG)

endif BUILD_EXCEPTIONS
endif BUILD_BOOST

## Makefile.Sequence_Unit_Tests_Unbounded_Octet.am

if BUILD_EXCEPTIONS

noinst_PROGRAMS += Unbounded_Octet

Unbounded_Octet_CPPFLAGS = \
  -I$(ACE_ROOT) \
  -I$(ACE_BUILDDIR) \
  -I$(TAO_ROOT) \
  -I$(TAO_BUILDDIR)

Unbounded_Octet_SOURCES = \
  Unbounded_Octet.cpp \
  bounded_sequence_cdr.hpp \
  fwd_mock_reference.hpp \
  mock_array.hpp \
  mock_reference.hpp \
  string_sequence_tester.hpp \
  testing_allocation_traits.hpp \
  testing_counters.hpp \
  testing_exception.hpp \
  testing_object_reference_traits.hpp \
  testing_range_checking.hpp \
  testing_string_traits.hpp \
  unbounded_sequence_cdr.hpp \
  value_sequence_tester.hpp

Unbounded_Octet_LDADD = \
  $(TAO_BUILDDIR)/tao/libTAO.la \
  $(ACE_BUILDDIR)/ace/libACE.la

endif BUILD_EXCEPTIONS

## Makefile.Sequence_Unit_Tests_Unbounded_String.am

if BUILD_EXCEPTIONS

noinst_PROGRAMS += Unbounded_String

Unbounded_String_CPPFLAGS = \
  -I$(ACE_ROOT) \
  -I$(ACE_BUILDDIR) \
  -I$(TAO_ROOT) \
  -I$(TAO_BUILDDIR)

Unbounded_String_SOURCES = \
  Unbounded_String.cpp \
  bounded_sequence_cdr.hpp \
  fwd_mock_reference.hpp \
  mock_array.hpp \
  mock_reference.hpp \
  string_sequence_tester.hpp \
  testing_allocation_traits.hpp \
  testing_counters.hpp \
  testing_exception.hpp \
  testing_object_reference_traits.hpp \
  testing_range_checking.hpp \
  testing_string_traits.hpp \
  unbounded_sequence_cdr.hpp \
  value_sequence_tester.hpp

Unbounded_String_LDADD = \
  $(TAO_BUILDDIR)/tao/libTAO.la \
  $(ACE_BUILDDIR)/ace/libACE.la

endif BUILD_EXCEPTIONS

## Clean up template repositories, etc.
clean-local:
	-rm -f *~ *.bak *.rpo *.sym lib*.*_pure_* core core.*
	-rm -f gcctemp.c gcctemp so_locations *.ics
	-rm -rf cxx_repository ptrepository ti_files
	-rm -rf templateregistry ir.out
	-rm -rf ptrepository SunWS_cache Templates.DB
