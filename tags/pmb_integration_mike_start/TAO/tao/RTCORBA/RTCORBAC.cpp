// -*- C++ -*-
//
// $Id$

// ****  Code generated by the The ACE ORB (TAO) IDL Compiler ****
// TAO and the TAO IDL Compiler have been developed by:
//       Center for Distributed Object Computing
//       Washington University
//       St. Louis, MO
//       USA
//       http://www.cs.wustl.edu/~schmidt/doc-center.html
// and
//       Distributed Object Computing Laboratory
//       University of California at Irvine
//       Irvine, CA
//       USA
//       http://doc.ece.uci.edu/
// and
//       Institute for Software Integrated Systems
//       Vanderbilt University
//       Nashville, TN
//       USA
//       http://www.isis.vanderbilt.edu/
//
// Information about TAO is available at:
//     http://www.cs.wustl.edu/~schmidt/TAO.html

// TAO_IDL - Generated from
// be\be_codegen.cpp:303


#include "RTCORBA.h"
#include "tao/CDR.h"
#include "tao/Typecode.h"
#include "tao/Any_Impl_T.h"
#include "tao/Any_Dual_Impl_T.h"
#include "tao/Any_Basic_Impl_T.h"
#include "tao/Basic_Arguments.h"
#include "tao/Special_Basic_Arguments.h"
#include "tao/UB_String_Arguments.h"
#include "ace/OS_NS_string.h"

#if defined (__BORLANDC__)
#pragma option -w-rvl -w-rch -w-ccc -w-aus -w-sig
#endif /* __BORLANDC__ */

#if !defined (__ACE_INLINE__)
#include "RTCORBAC.inl"
#endif /* !defined INLINE */

// TAO_IDL - Generated from
// be\be_visitor_arg_traits.cpp:64

// Arg traits specializations.
namespace TAO
{
}


//////////////////////////////////////////////////////
// CDR Encoding Support hand crafted

CORBA::Boolean
RTCORBA::ProtocolProperties::_tao_encode (TAO_OutputCDR &)
{
  return 1;
}
// TAO_IDL - Generated from
// be/be_visitor_arg_traits.cpp:60

CORBA::Boolean
RTCORBA::ProtocolProperties::_tao_decode (TAO_InputCDR &)
{
  return 1;
}

// be\be_visitor_typecode/typecode_defn.cpp:290

static const CORBA::Long _oc_RTCORBA_NativePriority[] =
{
    TAO_ENCAP_BYTE_ORDER, // byte order
  39,
  ACE_NTOHL (0x49444c3a), 
  ACE_NTOHL (0x6f6d672e), 
  ACE_NTOHL (0x6f72672f), 
  ACE_NTOHL (0x5254434f), 
  ACE_NTOHL (0x5242412f), 
  ACE_NTOHL (0x4e617469), 
  ACE_NTOHL (0x76655072), 
  ACE_NTOHL (0x696f7269), 
  ACE_NTOHL (0x74793a31), 
  ACE_NTOHL (0x2e300000),  // repository ID = IDL:omg.org/RTCORBA/NativePriority:1.0
    15,
  ACE_NTOHL (0x4e617469), 
  ACE_NTOHL (0x76655072), 
  ACE_NTOHL (0x696f7269), 
  ACE_NTOHL (0x74790000),  // name = NativePriority
    CORBA::tk_short,

};

static CORBA::TypeCode _tc_TAO_tc_RTCORBA_NativePriority (
    CORBA::tk_alias,
    sizeof (_oc_RTCORBA_NativePriority),
    (char *) &_oc_RTCORBA_NativePriority,
    0,
    sizeof (RTCORBA::NativePriority)
  );

namespace RTCORBA
{
  ::CORBA::TypeCode_ptr _tc_NativePriority =
    &_tc_TAO_tc_RTCORBA_NativePriority;
}

// TAO_IDL - Generated from
// be\be_visitor_typecode/typecode_defn.cpp:290

static const CORBA::Long _oc_RTCORBA_Priority[] =
{
    TAO_ENCAP_BYTE_ORDER, // byte order
  33,
  ACE_NTOHL (0x49444c3a), 
  ACE_NTOHL (0x6f6d672e), 
  ACE_NTOHL (0x6f72672f), 
  ACE_NTOHL (0x5254434f), 
  ACE_NTOHL (0x5242412f), 
  ACE_NTOHL (0x5072696f), 
  ACE_NTOHL (0x72697479), 
  ACE_NTOHL (0x3a312e30), 
  ACE_NTOHL (0x0),  // repository ID = IDL:omg.org/RTCORBA/Priority:1.0
    9,
  ACE_NTOHL (0x5072696f), 
  ACE_NTOHL (0x72697479), 
  ACE_NTOHL (0x0),  // name = Priority
    CORBA::tk_short,

};

static CORBA::TypeCode _tc_TAO_tc_RTCORBA_Priority (
    CORBA::tk_alias,
    sizeof (_oc_RTCORBA_Priority),
    (char *) &_oc_RTCORBA_Priority,
    0,
    sizeof (RTCORBA::Priority)
  );

namespace RTCORBA
{
  ::CORBA::TypeCode_ptr _tc_Priority =
    &_tc_TAO_tc_RTCORBA_Priority;
}

// TAO_IDL - Generated from
// be\be_visitor_typecode/typecode_defn.cpp:290

static const CORBA::Long _oc_RTCORBA_NetworkPriority[] =
{
    TAO_ENCAP_BYTE_ORDER, // byte order
  40,
  ACE_NTOHL (0x49444c3a), 
  ACE_NTOHL (0x6f6d672e), 
  ACE_NTOHL (0x6f72672f), 
  ACE_NTOHL (0x5254434f), 
  ACE_NTOHL (0x5242412f), 
  ACE_NTOHL (0x4e657477), 
  ACE_NTOHL (0x6f726b50), 
  ACE_NTOHL (0x72696f72), 
  ACE_NTOHL (0x6974793a), 
  ACE_NTOHL (0x312e3000),  // repository ID = IDL:omg.org/RTCORBA/NetworkPriority:1.0
    16,
  ACE_NTOHL (0x4e657477), 
  ACE_NTOHL (0x6f726b50), 
  ACE_NTOHL (0x72696f72), 
  ACE_NTOHL (0x69747900),  // name = NetworkPriority
    CORBA::tk_long,

};

static CORBA::TypeCode _tc_TAO_tc_RTCORBA_NetworkPriority (
    CORBA::tk_alias,
    sizeof (_oc_RTCORBA_NetworkPriority),
    (char *) &_oc_RTCORBA_NetworkPriority,
    0,
    sizeof (RTCORBA::NetworkPriority)
  );

namespace RTCORBA
{
  ::CORBA::TypeCode_ptr _tc_NetworkPriority =
    &_tc_TAO_tc_RTCORBA_NetworkPriority;
}

// TAO_IDL - Generated from
// be\be_visitor_typecode/typecode_defn.cpp:290

static const CORBA::Long _oc_RTCORBA_ThreadpoolId[] =
{
    TAO_ENCAP_BYTE_ORDER, // byte order
  37,
  ACE_NTOHL (0x49444c3a), 
  ACE_NTOHL (0x6f6d672e), 
  ACE_NTOHL (0x6f72672f), 
  ACE_NTOHL (0x5254434f), 
  ACE_NTOHL (0x5242412f), 
  ACE_NTOHL (0x54687265), 
  ACE_NTOHL (0x6164706f), 
  ACE_NTOHL (0x6f6c4964), 
  ACE_NTOHL (0x3a312e30), 
  ACE_NTOHL (0x0),  // repository ID = IDL:omg.org/RTCORBA/ThreadpoolId:1.0
    13,
  ACE_NTOHL (0x54687265), 
  ACE_NTOHL (0x6164706f), 
  ACE_NTOHL (0x6f6c4964), 
  ACE_NTOHL (0x0),  // name = ThreadpoolId
    CORBA::tk_ulong,

};

static CORBA::TypeCode _tc_TAO_tc_RTCORBA_ThreadpoolId (
    CORBA::tk_alias,
    sizeof (_oc_RTCORBA_ThreadpoolId),
    (char *) &_oc_RTCORBA_ThreadpoolId,
    0,
    sizeof (RTCORBA::ThreadpoolId)
  );

namespace RTCORBA
{
  ::CORBA::TypeCode_ptr _tc_ThreadpoolId =
    &_tc_TAO_tc_RTCORBA_ThreadpoolId;
}

// TAO_IDL - Generated from
// be\be_visitor_typecode/typecode_defn.cpp:290

static const CORBA::Long _oc_RTCORBA_ThreadpoolLane[] =
{
    TAO_ENCAP_BYTE_ORDER, // byte order
  39,
  ACE_NTOHL (0x49444c3a), 
  ACE_NTOHL (0x6f6d672e), 
  ACE_NTOHL (0x6f72672f), 
  ACE_NTOHL (0x5254434f), 
  ACE_NTOHL (0x5242412f), 
  ACE_NTOHL (0x54687265), 
  ACE_NTOHL (0x6164706f), 
  ACE_NTOHL (0x6f6c4c61), 
  ACE_NTOHL (0x6e653a31), 
  ACE_NTOHL (0x2e300000),  // repository ID = IDL:omg.org/RTCORBA/ThreadpoolLane:1.0
    15,
  ACE_NTOHL (0x54687265), 
  ACE_NTOHL (0x6164706f), 
  ACE_NTOHL (0x6f6c4c61), 
  ACE_NTOHL (0x6e650000),  // name = ThreadpoolLane
  3, // member count
    14,
  ACE_NTOHL (0x6c616e65), 
  ACE_NTOHL (0x5f707269), 
  ACE_NTOHL (0x6f726974), 
  ACE_NTOHL (0x79000000),  // name = lane_priority
    CORBA::tk_alias, // typecode kind for typedefs
  64, // encapsulation length
    TAO_ENCAP_BYTE_ORDER, // byte order
    33,
    ACE_NTOHL (0x49444c3a), 
    ACE_NTOHL (0x6f6d672e), 
    ACE_NTOHL (0x6f72672f), 
    ACE_NTOHL (0x5254434f), 
    ACE_NTOHL (0x5242412f), 
    ACE_NTOHL (0x5072696f), 
    ACE_NTOHL (0x72697479), 
    ACE_NTOHL (0x3a312e30), 
    ACE_NTOHL (0x0),  // repository ID = IDL:omg.org/RTCORBA/Priority:1.0
        9,
    ACE_NTOHL (0x5072696f), 
    ACE_NTOHL (0x72697479), 
    ACE_NTOHL (0x0),  // name = Priority
        CORBA::tk_short,


  15,
  ACE_NTOHL (0x73746174), 
  ACE_NTOHL (0x69635f74), 
  ACE_NTOHL (0x68726561), 
  ACE_NTOHL (0x64730000),  // name = static_threads
    CORBA::tk_ulong,

  16,
  ACE_NTOHL (0x64796e61), 
  ACE_NTOHL (0x6d69635f), 
  ACE_NTOHL (0x74687265), 
  ACE_NTOHL (0x61647300),  // name = dynamic_threads
    CORBA::tk_ulong,

};

static CORBA::TypeCode _tc_TAO_tc_RTCORBA_ThreadpoolLane (
    CORBA::tk_struct,
    sizeof (_oc_RTCORBA_ThreadpoolLane),
    (char *) &_oc_RTCORBA_ThreadpoolLane,
    0,
    sizeof (RTCORBA::ThreadpoolLane)
  );

namespace RTCORBA
{
  ::CORBA::TypeCode_ptr _tc_ThreadpoolLane =
    &_tc_TAO_tc_RTCORBA_ThreadpoolLane;
}

// TAO_IDL - Generated from 
// be\be_visitor_structure/structure_cs.cpp:66

void 
RTCORBA::ThreadpoolLane::_tao_any_destructor (
    void *_tao_void_pointer
  )
{
  ThreadpoolLane *_tao_tmp_pointer =
    static_cast<ThreadpoolLane *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

// TAO_IDL - Generated from 
// be\be_visitor_sequence/sequence_cs.cpp:65

#if !defined (_RTCORBA_THREADPOOLLANES_CS_)
#define _RTCORBA_THREADPOOLLANES_CS_

RTCORBA::ThreadpoolLanes::ThreadpoolLanes (void)
{}

RTCORBA::ThreadpoolLanes::ThreadpoolLanes (
    CORBA::ULong max
  )
  : TAO_Unbounded_Sequence<
        RTCORBA::ThreadpoolLane
      >
    (max)
{}

RTCORBA::ThreadpoolLanes::ThreadpoolLanes (
    CORBA::ULong max,
    CORBA::ULong length,
    RTCORBA::ThreadpoolLane * buffer,
    CORBA::Boolean release
  )
  : TAO_Unbounded_Sequence<
        RTCORBA::ThreadpoolLane
      >
    (max, length, buffer, release)
{}

RTCORBA::ThreadpoolLanes::ThreadpoolLanes (
    const ThreadpoolLanes &seq
  )
  : TAO_Unbounded_Sequence<
        RTCORBA::ThreadpoolLane
      >
    (seq)
{}

RTCORBA::ThreadpoolLanes::~ThreadpoolLanes (void)
{}

void RTCORBA::ThreadpoolLanes::_tao_any_destructor (
    void * _tao_void_pointer
  )
{
  ThreadpoolLanes * _tao_tmp_pointer =
    static_cast<ThreadpoolLanes *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

#endif /* end #if !defined */

// TAO_IDL - Generated from
// be\be_visitor_typecode/typecode_defn.cpp:290

static const CORBA::Long _oc_RTCORBA_ThreadpoolLanes[] =
{
    TAO_ENCAP_BYTE_ORDER, // byte order
  40,
  ACE_NTOHL (0x49444c3a), 
  ACE_NTOHL (0x6f6d672e), 
  ACE_NTOHL (0x6f72672f), 
  ACE_NTOHL (0x5254434f), 
  ACE_NTOHL (0x5242412f), 
  ACE_NTOHL (0x54687265), 
  ACE_NTOHL (0x6164706f), 
  ACE_NTOHL (0x6f6c4c61), 
  ACE_NTOHL (0x6e65733a), 
  ACE_NTOHL (0x312e3000),  // repository ID = IDL:omg.org/RTCORBA/ThreadpoolLanes:1.0
    16,
  ACE_NTOHL (0x54687265), 
  ACE_NTOHL (0x6164706f), 
  ACE_NTOHL (0x6f6c4c61), 
  ACE_NTOHL (0x6e657300),  // name = ThreadpoolLanes
    CORBA::tk_sequence, // typecode kind
  228, // encapsulation length
    TAO_ENCAP_BYTE_ORDER, // byte order
    CORBA::tk_struct, // typecode kind
    212, // encapsulation length
      TAO_ENCAP_BYTE_ORDER, // byte order
      39,
      ACE_NTOHL (0x49444c3a), 
      ACE_NTOHL (0x6f6d672e), 
      ACE_NTOHL (0x6f72672f), 
      ACE_NTOHL (0x5254434f), 
      ACE_NTOHL (0x5242412f), 
      ACE_NTOHL (0x54687265), 
      ACE_NTOHL (0x6164706f), 
      ACE_NTOHL (0x6f6c4c61), 
      ACE_NTOHL (0x6e653a31), 
      ACE_NTOHL (0x2e300000),  // repository ID = IDL:omg.org/RTCORBA/ThreadpoolLane:1.0
            15,
      ACE_NTOHL (0x54687265), 
      ACE_NTOHL (0x6164706f), 
      ACE_NTOHL (0x6f6c4c61), 
      ACE_NTOHL (0x6e650000),  // name = ThreadpoolLane
      3, // member count
            14,
      ACE_NTOHL (0x6c616e65), 
      ACE_NTOHL (0x5f707269), 
      ACE_NTOHL (0x6f726974), 
      ACE_NTOHL (0x79000000),  // name = lane_priority
            CORBA::tk_alias, // typecode kind for typedefs
      64, // encapsulation length
        TAO_ENCAP_BYTE_ORDER, // byte order
        33,
        ACE_NTOHL (0x49444c3a), 
        ACE_NTOHL (0x6f6d672e), 
        ACE_NTOHL (0x6f72672f), 
        ACE_NTOHL (0x5254434f), 
        ACE_NTOHL (0x5242412f), 
        ACE_NTOHL (0x5072696f), 
        ACE_NTOHL (0x72697479), 
        ACE_NTOHL (0x3a312e30), 
        ACE_NTOHL (0x0),  // repository ID = IDL:omg.org/RTCORBA/Priority:1.0
                9,
        ACE_NTOHL (0x5072696f), 
        ACE_NTOHL (0x72697479), 
        ACE_NTOHL (0x0),  // name = Priority
                CORBA::tk_short,


      15,
      ACE_NTOHL (0x73746174), 
      ACE_NTOHL (0x69635f74), 
      ACE_NTOHL (0x68726561), 
      ACE_NTOHL (0x64730000),  // name = static_threads
            CORBA::tk_ulong,

      16,
      ACE_NTOHL (0x64796e61), 
      ACE_NTOHL (0x6d69635f), 
      ACE_NTOHL (0x74687265), 
      ACE_NTOHL (0x61647300),  // name = dynamic_threads
            CORBA::tk_ulong,


    0U,

};

static CORBA::TypeCode _tc_TAO_tc_RTCORBA_ThreadpoolLanes (
    CORBA::tk_alias,
    sizeof (_oc_RTCORBA_ThreadpoolLanes),
    (char *) &_oc_RTCORBA_ThreadpoolLanes,
    0,
    sizeof (RTCORBA::ThreadpoolLanes)
  );

namespace RTCORBA
{
  ::CORBA::TypeCode_ptr _tc_ThreadpoolLanes =
    &_tc_TAO_tc_RTCORBA_ThreadpoolLanes;
}

// TAO_IDL - Generated from
// be\be_visitor_typecode/typecode_defn.cpp:290

static const CORBA::Long _oc_RTCORBA_PriorityModel[] =
{
  TAO_ENCAP_BYTE_ORDER, // byte order
  38,
  ACE_NTOHL (0x49444c3a), 
  ACE_NTOHL (0x6f6d672e), 
  ACE_NTOHL (0x6f72672f), 
  ACE_NTOHL (0x5254434f), 
  ACE_NTOHL (0x5242412f), 
  ACE_NTOHL (0x5072696f), 
  ACE_NTOHL (0x72697479), 
  ACE_NTOHL (0x4d6f6465), 
  ACE_NTOHL (0x6c3a312e), 
  ACE_NTOHL (0x30000000),  // repository ID = IDL:omg.org/RTCORBA/PriorityModel:1.0
  14,
  ACE_NTOHL (0x5072696f), 
  ACE_NTOHL (0x72697479), 
  ACE_NTOHL (0x4d6f6465), 
  ACE_NTOHL (0x6c000000),  // name = PriorityModel
  2, // member count
  18,
  ACE_NTOHL (0x434c4945), 
  ACE_NTOHL (0x4e545f50), 
  ACE_NTOHL (0x524f5041), 
  ACE_NTOHL (0x47415445), 
  ACE_NTOHL (0x44000000),  // name = CLIENT_PROPAGATED
  16,
  ACE_NTOHL (0x53455256), 
  ACE_NTOHL (0x45525f44), 
  ACE_NTOHL (0x45434c41), 
  ACE_NTOHL (0x52454400),  // name = SERVER_DECLARED
  };

static CORBA::TypeCode _tc_TAO_tc_RTCORBA_PriorityModel (
    CORBA::tk_enum,
    sizeof (_oc_RTCORBA_PriorityModel),
    (char *) &_oc_RTCORBA_PriorityModel,
    0,
    sizeof (RTCORBA::PriorityModel)
  );

namespace RTCORBA
{
  ::CORBA::TypeCode_ptr _tc_PriorityModel =
    &_tc_TAO_tc_RTCORBA_PriorityModel;
}

// TAO_IDL - Generated from
// be\be_visitor_interface/interface_cs.cpp:60

// Traits specializations for RTCORBA::PriorityModelPolicy.

ACE_TEMPLATE_CLASS_MEMBER_SPECIALIZATION
RTCORBA::PriorityModelPolicy_ptr
TAO::Objref_Traits<RTCORBA::PriorityModelPolicy>::duplicate (
    RTCORBA::PriorityModelPolicy_ptr p
  )
{
  return RTCORBA::PriorityModelPolicy::_duplicate (p);
}

ACE_TEMPLATE_CLASS_MEMBER_SPECIALIZATION
void
TAO::Objref_Traits<RTCORBA::PriorityModelPolicy>::release (
    RTCORBA::PriorityModelPolicy_ptr p
  )
{
  CORBA::release (p);
}

ACE_TEMPLATE_CLASS_MEMBER_SPECIALIZATION
RTCORBA::PriorityModelPolicy_ptr
TAO::Objref_Traits<RTCORBA::PriorityModelPolicy>::nil (void)
{
  return RTCORBA::PriorityModelPolicy::_nil ();
}

ACE_TEMPLATE_CLASS_MEMBER_SPECIALIZATION
CORBA::Boolean
TAO::Objref_Traits<RTCORBA::PriorityModelPolicy>::marshal (
    RTCORBA::PriorityModelPolicy_ptr p,
    TAO_OutputCDR & cdr
  )
{
  return CORBA::Object::marshal (p, cdr);
}

// Function pointer for collocation factory initialization.
TAO::Collocation_Proxy_Broker * 
(*RTCORBA__TAO_PriorityModelPolicy_Proxy_Broker_Factory_function_pointer) (
    CORBA::Object_ptr obj
  ) = 0;

RTCORBA::PriorityModelPolicy::PriorityModelPolicy (void)
{}

RTCORBA::PriorityModelPolicy::~PriorityModelPolicy (void)
{}

void 
RTCORBA::PriorityModelPolicy::_tao_any_destructor (void *_tao_void_pointer)
{
  PriorityModelPolicy *_tao_tmp_pointer =
    static_cast<PriorityModelPolicy *> (_tao_void_pointer);
  CORBA::release (_tao_tmp_pointer);
}

RTCORBA::PriorityModelPolicy_ptr
RTCORBA::PriorityModelPolicy::_narrow (
    CORBA::Object_ptr _tao_objref
    ACE_ENV_ARG_DECL_NOT_USED
  )
{
  if (CORBA::is_nil (_tao_objref))
    {
      return PriorityModelPolicy::_nil ();
    }
  
  PriorityModelPolicy_ptr proxy =
    dynamic_cast<PriorityModelPolicy_ptr> (_tao_objref);
  
  return PriorityModelPolicy::_duplicate (proxy);
}

RTCORBA::PriorityModelPolicy_ptr
RTCORBA::PriorityModelPolicy::_unchecked_narrow (
    CORBA::Object_ptr _tao_objref
    ACE_ENV_ARG_DECL_NOT_USED
  )
{
  if (CORBA::is_nil (_tao_objref))
    {
      return PriorityModelPolicy::_nil ();
    }
  
  PriorityModelPolicy_ptr proxy =
    dynamic_cast<PriorityModelPolicy_ptr> (_tao_objref);
  
  return PriorityModelPolicy::_duplicate (proxy);
}

RTCORBA::PriorityModelPolicy_ptr
RTCORBA::PriorityModelPolicy::_duplicate (PriorityModelPolicy_ptr obj)
{
  if (! CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  
  return obj;
}

CORBA::Boolean
RTCORBA::PriorityModelPolicy::_is_a (
    const char *value
    ACE_ENV_ARG_DECL_NOT_USED
  )
{
  if (
      !ACE_OS::strcmp (
          (char *)value,
          "IDL:omg.org/CORBA/Policy:1.0"
        ) ||
      !ACE_OS::strcmp (
          (char *)value,
          "IDL:omg.org/RTCORBA/PriorityModelPolicy:1.0"
        ) ||
      !ACE_OS::strcmp (
          (char *)value,
          "IDL:omg.org/CORBA/LocalObject:1.0"
        ) ||
      !ACE_OS::strcmp (
          (char *)value,
          "IDL:omg.org/CORBA/Object:1.0"
        )
     )
    {
      return 1; // success using local knowledge
    }
  else
    {
      return 0;
    }
}

const char* RTCORBA::PriorityModelPolicy::_interface_repository_id (void) const
{
  return "IDL:omg.org/RTCORBA/PriorityModelPolicy:1.0";
}

CORBA::Boolean
RTCORBA::PriorityModelPolicy::marshal (TAO_OutputCDR &)
{
  return 0;
}

// TAO_IDL - Generated from
// be\be_visitor_typecode/typecode_defn.cpp:290

static const CORBA::Long _oc_RTCORBA_PriorityModelPolicy[] =
{
    TAO_ENCAP_BYTE_ORDER, // byte order
  44,
  ACE_NTOHL (0x49444c3a), 
  ACE_NTOHL (0x6f6d672e), 
  ACE_NTOHL (0x6f72672f), 
  ACE_NTOHL (0x5254434f), 
  ACE_NTOHL (0x5242412f), 
  ACE_NTOHL (0x5072696f), 
  ACE_NTOHL (0x72697479), 
  ACE_NTOHL (0x4d6f6465), 
  ACE_NTOHL (0x6c506f6c), 
  ACE_NTOHL (0x6963793a), 
  ACE_NTOHL (0x312e3000),  // repository ID = IDL:omg.org/RTCORBA/PriorityModelPolicy:1.0
    20,
  ACE_NTOHL (0x5072696f), 
  ACE_NTOHL (0x72697479), 
  ACE_NTOHL (0x4d6f6465), 
  ACE_NTOHL (0x6c506f6c), 
  ACE_NTOHL (0x69637900),  // name = PriorityModelPolicy
  };

static CORBA::TypeCode _tc_TAO_tc_RTCORBA_PriorityModelPolicy (
    CORBA::tk_objref,
    sizeof (_oc_RTCORBA_PriorityModelPolicy),
    (char *) &_oc_RTCORBA_PriorityModelPolicy,
    0,
    sizeof (RTCORBA::PriorityModelPolicy)
  );

namespace RTCORBA
{
  ::CORBA::TypeCode_ptr _tc_PriorityModelPolicy =
    &_tc_TAO_tc_RTCORBA_PriorityModelPolicy;
}

// TAO_IDL - Generated from
// be\be_visitor_interface/interface_cs.cpp:60

// Traits specializations for RTCORBA::ThreadpoolPolicy.

ACE_TEMPLATE_CLASS_MEMBER_SPECIALIZATION
RTCORBA::ThreadpoolPolicy_ptr
TAO::Objref_Traits<RTCORBA::ThreadpoolPolicy>::duplicate (
    RTCORBA::ThreadpoolPolicy_ptr p
  )
{
  return RTCORBA::ThreadpoolPolicy::_duplicate (p);
}

ACE_TEMPLATE_CLASS_MEMBER_SPECIALIZATION
void
TAO::Objref_Traits<RTCORBA::ThreadpoolPolicy>::release (
    RTCORBA::ThreadpoolPolicy_ptr p
  )
{
  CORBA::release (p);
}

ACE_TEMPLATE_CLASS_MEMBER_SPECIALIZATION
RTCORBA::ThreadpoolPolicy_ptr
TAO::Objref_Traits<RTCORBA::ThreadpoolPolicy>::nil (void)
{
  return RTCORBA::ThreadpoolPolicy::_nil ();
}

ACE_TEMPLATE_CLASS_MEMBER_SPECIALIZATION
CORBA::Boolean
TAO::Objref_Traits<RTCORBA::ThreadpoolPolicy>::marshal (
    RTCORBA::ThreadpoolPolicy_ptr p,
    TAO_OutputCDR & cdr
  )
{
  return CORBA::Object::marshal (p, cdr);
}

// Function pointer for collocation factory initialization.
TAO::Collocation_Proxy_Broker * 
(*RTCORBA__TAO_ThreadpoolPolicy_Proxy_Broker_Factory_function_pointer) (
    CORBA::Object_ptr obj
  ) = 0;

RTCORBA::ThreadpoolPolicy::ThreadpoolPolicy (void)
{}

RTCORBA::ThreadpoolPolicy::~ThreadpoolPolicy (void)
{}

void 
RTCORBA::ThreadpoolPolicy::_tao_any_destructor (void *_tao_void_pointer)
{
  ThreadpoolPolicy *_tao_tmp_pointer =
    static_cast<ThreadpoolPolicy *> (_tao_void_pointer);
  CORBA::release (_tao_tmp_pointer);
}

RTCORBA::ThreadpoolPolicy_ptr
RTCORBA::ThreadpoolPolicy::_narrow (
    CORBA::Object_ptr _tao_objref
    ACE_ENV_ARG_DECL_NOT_USED
  )
{
  if (CORBA::is_nil (_tao_objref))
    {
      return ThreadpoolPolicy::_nil ();
    }
  
  ThreadpoolPolicy_ptr proxy =
    dynamic_cast<ThreadpoolPolicy_ptr> (_tao_objref);
  
  return ThreadpoolPolicy::_duplicate (proxy);
}

RTCORBA::ThreadpoolPolicy_ptr
RTCORBA::ThreadpoolPolicy::_unchecked_narrow (
    CORBA::Object_ptr _tao_objref
    ACE_ENV_ARG_DECL_NOT_USED
  )
{
  if (CORBA::is_nil (_tao_objref))
    {
      return ThreadpoolPolicy::_nil ();
    }
  
  ThreadpoolPolicy_ptr proxy =
    dynamic_cast<ThreadpoolPolicy_ptr> (_tao_objref);
  
  return ThreadpoolPolicy::_duplicate (proxy);
}

RTCORBA::ThreadpoolPolicy_ptr
RTCORBA::ThreadpoolPolicy::_duplicate (ThreadpoolPolicy_ptr obj)
{
  if (! CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  
  return obj;
}

CORBA::Boolean
RTCORBA::ThreadpoolPolicy::_is_a (
    const char *value
    ACE_ENV_ARG_DECL_NOT_USED
  )
{
  if (
      !ACE_OS::strcmp (
          (char *)value,
          "IDL:omg.org/CORBA/Policy:1.0"
        ) ||
      !ACE_OS::strcmp (
          (char *)value,
          "IDL:omg.org/RTCORBA/ThreadpoolPolicy:1.0"
        ) ||
      !ACE_OS::strcmp (
          (char *)value,
          "IDL:omg.org/CORBA/LocalObject:1.0"
        ) ||
      !ACE_OS::strcmp (
          (char *)value,
          "IDL:omg.org/CORBA/Object:1.0"
        )
     )
    {
      return 1; // success using local knowledge
    }
  else
    {
      return 0;
    }
}

const char* RTCORBA::ThreadpoolPolicy::_interface_repository_id (void) const
{
  return "IDL:omg.org/RTCORBA/ThreadpoolPolicy:1.0";
}

CORBA::Boolean
RTCORBA::ThreadpoolPolicy::marshal (TAO_OutputCDR &)
{
  return 0;
}

// TAO_IDL - Generated from
// be\be_visitor_typecode/typecode_defn.cpp:290

static const CORBA::Long _oc_RTCORBA_ThreadpoolPolicy[] =
{
    TAO_ENCAP_BYTE_ORDER, // byte order
  41,
  ACE_NTOHL (0x49444c3a), 
  ACE_NTOHL (0x6f6d672e), 
  ACE_NTOHL (0x6f72672f), 
  ACE_NTOHL (0x5254434f), 
  ACE_NTOHL (0x5242412f), 
  ACE_NTOHL (0x54687265), 
  ACE_NTOHL (0x6164706f), 
  ACE_NTOHL (0x6f6c506f), 
  ACE_NTOHL (0x6c696379), 
  ACE_NTOHL (0x3a312e30), 
  ACE_NTOHL (0x0),  // repository ID = IDL:omg.org/RTCORBA/ThreadpoolPolicy:1.0
    17,
  ACE_NTOHL (0x54687265), 
  ACE_NTOHL (0x6164706f), 
  ACE_NTOHL (0x6f6c506f), 
  ACE_NTOHL (0x6c696379), 
  ACE_NTOHL (0x0),  // name = ThreadpoolPolicy
  };

static CORBA::TypeCode _tc_TAO_tc_RTCORBA_ThreadpoolPolicy (
    CORBA::tk_objref,
    sizeof (_oc_RTCORBA_ThreadpoolPolicy),
    (char *) &_oc_RTCORBA_ThreadpoolPolicy,
    0,
    sizeof (RTCORBA::ThreadpoolPolicy)
  );

namespace RTCORBA
{
  ::CORBA::TypeCode_ptr _tc_ThreadpoolPolicy =
    &_tc_TAO_tc_RTCORBA_ThreadpoolPolicy;
}

// TAO_IDL - Generated from
// be\be_visitor_interface/interface_cs.cpp:60

// Traits specializations for RTCORBA::ProtocolProperties.

ACE_TEMPLATE_CLASS_MEMBER_SPECIALIZATION
RTCORBA::ProtocolProperties_ptr
TAO::Objref_Traits<RTCORBA::ProtocolProperties>::duplicate (
    RTCORBA::ProtocolProperties_ptr p
  )
{
  return RTCORBA::ProtocolProperties::_duplicate (p);
}

ACE_TEMPLATE_CLASS_MEMBER_SPECIALIZATION
void
TAO::Objref_Traits<RTCORBA::ProtocolProperties>::release (
    RTCORBA::ProtocolProperties_ptr p
  )
{
  CORBA::release (p);
}

ACE_TEMPLATE_CLASS_MEMBER_SPECIALIZATION
RTCORBA::ProtocolProperties_ptr
TAO::Objref_Traits<RTCORBA::ProtocolProperties>::nil (void)
{
  return RTCORBA::ProtocolProperties::_nil ();
}

ACE_TEMPLATE_CLASS_MEMBER_SPECIALIZATION
CORBA::Boolean
TAO::Objref_Traits<RTCORBA::ProtocolProperties>::marshal (
    RTCORBA::ProtocolProperties_ptr p,
    TAO_OutputCDR & cdr
  )
{
  return CORBA::Object::marshal (p, cdr);
}

// Function pointer for collocation factory initialization.
TAO::Collocation_Proxy_Broker * 
(*RTCORBA__TAO_ProtocolProperties_Proxy_Broker_Factory_function_pointer) (
    CORBA::Object_ptr obj
  ) = 0;

RTCORBA::ProtocolProperties::ProtocolProperties (void)
{}

RTCORBA::ProtocolProperties::~ProtocolProperties (void)
{}

void 
RTCORBA::ProtocolProperties::_tao_any_destructor (void *_tao_void_pointer)
{
  ProtocolProperties *_tao_tmp_pointer =
    static_cast<ProtocolProperties *> (_tao_void_pointer);
  CORBA::release (_tao_tmp_pointer);
}

RTCORBA::ProtocolProperties_ptr
RTCORBA::ProtocolProperties::_narrow (
    CORBA::Object_ptr _tao_objref
    ACE_ENV_ARG_DECL_NOT_USED
  )
{
  if (CORBA::is_nil (_tao_objref))
    {
      return ProtocolProperties::_nil ();
    }
  
  ProtocolProperties_ptr proxy =
    dynamic_cast<ProtocolProperties_ptr> (_tao_objref);
  
  return ProtocolProperties::_duplicate (proxy);
}

RTCORBA::ProtocolProperties_ptr
RTCORBA::ProtocolProperties::_unchecked_narrow (
    CORBA::Object_ptr _tao_objref
    ACE_ENV_ARG_DECL_NOT_USED
  )
{
  if (CORBA::is_nil (_tao_objref))
    {
      return ProtocolProperties::_nil ();
    }
  
  ProtocolProperties_ptr proxy =
    dynamic_cast<ProtocolProperties_ptr> (_tao_objref);
  
  return ProtocolProperties::_duplicate (proxy);
}

RTCORBA::ProtocolProperties_ptr
RTCORBA::ProtocolProperties::_duplicate (ProtocolProperties_ptr obj)
{
  if (! CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  
  return obj;
}

CORBA::Boolean
RTCORBA::ProtocolProperties::_is_a (
    const char *value
    ACE_ENV_ARG_DECL_NOT_USED
  )
{
  if (
      !ACE_OS::strcmp (
          (char *)value,
          "IDL:omg.org/RTCORBA/ProtocolProperties:1.0"
        ) ||
      !ACE_OS::strcmp (
          (char *)value,
          "IDL:omg.org/CORBA/LocalObject:1.0"
        ) ||
      !ACE_OS::strcmp (
          (char *)value,
          "IDL:omg.org/CORBA/Object:1.0"
        )
     )
    {
      return 1; // success using local knowledge
    }
  else
    {
      return 0;
    }
}

const char* RTCORBA::ProtocolProperties::_interface_repository_id (void) const
{
  return "IDL:omg.org/RTCORBA/ProtocolProperties:1.0";
}

CORBA::Boolean
RTCORBA::ProtocolProperties::marshal (TAO_OutputCDR &)
{
  return 0;
}

// TAO_IDL - Generated from
// be\be_visitor_typecode/typecode_defn.cpp:290

static const CORBA::Long _oc_RTCORBA_ProtocolProperties[] =
{
    TAO_ENCAP_BYTE_ORDER, // byte order
  43,
  ACE_NTOHL (0x49444c3a), 
  ACE_NTOHL (0x6f6d672e), 
  ACE_NTOHL (0x6f72672f), 
  ACE_NTOHL (0x5254434f), 
  ACE_NTOHL (0x5242412f), 
  ACE_NTOHL (0x50726f74), 
  ACE_NTOHL (0x6f636f6c), 
  ACE_NTOHL (0x50726f70), 
  ACE_NTOHL (0x65727469), 
  ACE_NTOHL (0x65733a31), 
  ACE_NTOHL (0x2e300000),  // repository ID = IDL:omg.org/RTCORBA/ProtocolProperties:1.0
    19,
  ACE_NTOHL (0x50726f74), 
  ACE_NTOHL (0x6f636f6c), 
  ACE_NTOHL (0x50726f70), 
  ACE_NTOHL (0x65727469), 
  ACE_NTOHL (0x65730000),  // name = ProtocolProperties
  };

static CORBA::TypeCode _tc_TAO_tc_RTCORBA_ProtocolProperties (
    CORBA::tk_objref,
    sizeof (_oc_RTCORBA_ProtocolProperties),
    (char *) &_oc_RTCORBA_ProtocolProperties,
    0,
    sizeof (RTCORBA::ProtocolProperties)
  );

namespace RTCORBA
{
  ::CORBA::TypeCode_ptr _tc_ProtocolProperties =
    &_tc_TAO_tc_RTCORBA_ProtocolProperties;
}

// TAO_IDL - Generated from
// be\be_visitor_typecode/typecode_defn.cpp:290

static const CORBA::Long _oc_RTCORBA_Protocol[] =
{
    TAO_ENCAP_BYTE_ORDER, // byte order
  33,
  ACE_NTOHL (0x49444c3a), 
  ACE_NTOHL (0x6f6d672e), 
  ACE_NTOHL (0x6f72672f), 
  ACE_NTOHL (0x5254434f), 
  ACE_NTOHL (0x5242412f), 
  ACE_NTOHL (0x50726f74), 
  ACE_NTOHL (0x6f636f6c), 
  ACE_NTOHL (0x3a312e30), 
  ACE_NTOHL (0x0),  // repository ID = IDL:omg.org/RTCORBA/Protocol:1.0
    9,
  ACE_NTOHL (0x50726f74), 
  ACE_NTOHL (0x6f636f6c), 
  ACE_NTOHL (0x0),  // name = Protocol
  3, // member count
    14,
  ACE_NTOHL (0x70726f74), 
  ACE_NTOHL (0x6f636f6c), 
  ACE_NTOHL (0x5f747970), 
  ACE_NTOHL (0x65000000),  // name = protocol_type
    CORBA::tk_alias, // typecode kind for typedefs
  60, // encapsulation length
    TAO_ENCAP_BYTE_ORDER, // byte order
    30,
    ACE_NTOHL (0x49444c3a), 
    ACE_NTOHL (0x6f6d672e), 
    ACE_NTOHL (0x6f72672f), 
    ACE_NTOHL (0x494f502f), 
    ACE_NTOHL (0x50726f66), 
    ACE_NTOHL (0x696c6549), 
    ACE_NTOHL (0x643a312e), 
    ACE_NTOHL (0x30000000),  // repository ID = IDL:omg.org/IOP/ProfileId:1.0
        10,
    ACE_NTOHL (0x50726f66), 
    ACE_NTOHL (0x696c6549), 
    ACE_NTOHL (0x64000000),  // name = ProfileId
        CORBA::tk_ulong,


  24,
  ACE_NTOHL (0x6f72625f), 
  ACE_NTOHL (0x70726f74), 
  ACE_NTOHL (0x6f636f6c), 
  ACE_NTOHL (0x5f70726f), 
  ACE_NTOHL (0x70657274), 
  ACE_NTOHL (0x69657300),  // name = orb_protocol_properties
    CORBA::tk_objref, // typecode kind
  76, // encapsulation length
    TAO_ENCAP_BYTE_ORDER, // byte order
    43,
    ACE_NTOHL (0x49444c3a), 
    ACE_NTOHL (0x6f6d672e), 
    ACE_NTOHL (0x6f72672f), 
    ACE_NTOHL (0x5254434f), 
    ACE_NTOHL (0x5242412f), 
    ACE_NTOHL (0x50726f74), 
    ACE_NTOHL (0x6f636f6c), 
    ACE_NTOHL (0x50726f70), 
    ACE_NTOHL (0x65727469), 
    ACE_NTOHL (0x65733a31), 
    ACE_NTOHL (0x2e300000),  // repository ID = IDL:omg.org/RTCORBA/ProtocolProperties:1.0
        19,
    ACE_NTOHL (0x50726f74), 
    ACE_NTOHL (0x6f636f6c), 
    ACE_NTOHL (0x50726f70), 
    ACE_NTOHL (0x65727469), 
    ACE_NTOHL (0x65730000),  // name = ProtocolProperties
    
  30,
  ACE_NTOHL (0x7472616e), 
  ACE_NTOHL (0x73706f72), 
  ACE_NTOHL (0x745f7072), 
  ACE_NTOHL (0x6f746f63), 
  ACE_NTOHL (0x6f6c5f70), 
  ACE_NTOHL (0x726f7065), 
  ACE_NTOHL (0x72746965), 
  ACE_NTOHL (0x73000000),  // name = transport_protocol_properties
    CORBA::tk_objref, // typecode kind
  76, // encapsulation length
    TAO_ENCAP_BYTE_ORDER, // byte order
    43,
    ACE_NTOHL (0x49444c3a), 
    ACE_NTOHL (0x6f6d672e), 
    ACE_NTOHL (0x6f72672f), 
    ACE_NTOHL (0x5254434f), 
    ACE_NTOHL (0x5242412f), 
    ACE_NTOHL (0x50726f74), 
    ACE_NTOHL (0x6f636f6c), 
    ACE_NTOHL (0x50726f70), 
    ACE_NTOHL (0x65727469), 
    ACE_NTOHL (0x65733a31), 
    ACE_NTOHL (0x2e300000),  // repository ID = IDL:omg.org/RTCORBA/ProtocolProperties:1.0
        19,
    ACE_NTOHL (0x50726f74), 
    ACE_NTOHL (0x6f636f6c), 
    ACE_NTOHL (0x50726f70), 
    ACE_NTOHL (0x65727469), 
    ACE_NTOHL (0x65730000),  // name = ProtocolProperties
    
};

static CORBA::TypeCode _tc_TAO_tc_RTCORBA_Protocol (
    CORBA::tk_struct,
    sizeof (_oc_RTCORBA_Protocol),
    (char *) &_oc_RTCORBA_Protocol,
    0,
    sizeof (RTCORBA::Protocol)
  );

namespace RTCORBA
{
  ::CORBA::TypeCode_ptr _tc_Protocol =
    &_tc_TAO_tc_RTCORBA_Protocol;
}

// TAO_IDL - Generated from 
// be\be_visitor_structure/structure_cs.cpp:66

void 
RTCORBA::Protocol::_tao_any_destructor (
    void *_tao_void_pointer
  )
{
  Protocol *_tao_tmp_pointer =
    static_cast<Protocol *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

// TAO_IDL - Generated from 
// be\be_visitor_sequence/sequence_cs.cpp:65

#if !defined (_RTCORBA_PROTOCOLLIST_CS_)
#define _RTCORBA_PROTOCOLLIST_CS_

RTCORBA::ProtocolList::ProtocolList (void)
{}

RTCORBA::ProtocolList::ProtocolList (
    CORBA::ULong max
  )
  : TAO_Unbounded_Sequence<
        RTCORBA::Protocol
      >
    (max)
{}

RTCORBA::ProtocolList::ProtocolList (
    CORBA::ULong max,
    CORBA::ULong length,
    RTCORBA::Protocol * buffer,
    CORBA::Boolean release
  )
  : TAO_Unbounded_Sequence<
        RTCORBA::Protocol
      >
    (max, length, buffer, release)
{}

RTCORBA::ProtocolList::ProtocolList (
    const ProtocolList &seq
  )
  : TAO_Unbounded_Sequence<
        RTCORBA::Protocol
      >
    (seq)
{}

RTCORBA::ProtocolList::~ProtocolList (void)
{}

void RTCORBA::ProtocolList::_tao_any_destructor (
    void * _tao_void_pointer
  )
{
  ProtocolList * _tao_tmp_pointer =
    static_cast<ProtocolList *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

#endif /* end #if !defined */

// TAO_IDL - Generated from
// be\be_visitor_typecode/typecode_defn.cpp:290

static const CORBA::Long _oc_RTCORBA_ProtocolList[] =
{
    TAO_ENCAP_BYTE_ORDER, // byte order
  37,
  ACE_NTOHL (0x49444c3a), 
  ACE_NTOHL (0x6f6d672e), 
  ACE_NTOHL (0x6f72672f), 
  ACE_NTOHL (0x5254434f), 
  ACE_NTOHL (0x5242412f), 
  ACE_NTOHL (0x50726f74), 
  ACE_NTOHL (0x6f636f6c), 
  ACE_NTOHL (0x4c697374), 
  ACE_NTOHL (0x3a312e30), 
  ACE_NTOHL (0x0),  // repository ID = IDL:omg.org/RTCORBA/ProtocolList:1.0
    13,
  ACE_NTOHL (0x50726f74), 
  ACE_NTOHL (0x6f636f6c), 
  ACE_NTOHL (0x4c697374), 
  ACE_NTOHL (0x0),  // name = ProtocolList
    CORBA::tk_sequence, // typecode kind
  400, // encapsulation length
    TAO_ENCAP_BYTE_ORDER, // byte order
    CORBA::tk_struct, // typecode kind
    384, // encapsulation length
      TAO_ENCAP_BYTE_ORDER, // byte order
      33,
      ACE_NTOHL (0x49444c3a), 
      ACE_NTOHL (0x6f6d672e), 
      ACE_NTOHL (0x6f72672f), 
      ACE_NTOHL (0x5254434f), 
      ACE_NTOHL (0x5242412f), 
      ACE_NTOHL (0x50726f74), 
      ACE_NTOHL (0x6f636f6c), 
      ACE_NTOHL (0x3a312e30), 
      ACE_NTOHL (0x0),  // repository ID = IDL:omg.org/RTCORBA/Protocol:1.0
            9,
      ACE_NTOHL (0x50726f74), 
      ACE_NTOHL (0x6f636f6c), 
      ACE_NTOHL (0x0),  // name = Protocol
      3, // member count
            14,
      ACE_NTOHL (0x70726f74), 
      ACE_NTOHL (0x6f636f6c), 
      ACE_NTOHL (0x5f747970), 
      ACE_NTOHL (0x65000000),  // name = protocol_type
            CORBA::tk_alias, // typecode kind for typedefs
      60, // encapsulation length
        TAO_ENCAP_BYTE_ORDER, // byte order
        30,
        ACE_NTOHL (0x49444c3a), 
        ACE_NTOHL (0x6f6d672e), 
        ACE_NTOHL (0x6f72672f), 
        ACE_NTOHL (0x494f502f), 
        ACE_NTOHL (0x50726f66), 
        ACE_NTOHL (0x696c6549), 
        ACE_NTOHL (0x643a312e), 
        ACE_NTOHL (0x30000000),  // repository ID = IDL:omg.org/IOP/ProfileId:1.0
                10,
        ACE_NTOHL (0x50726f66), 
        ACE_NTOHL (0x696c6549), 
        ACE_NTOHL (0x64000000),  // name = ProfileId
                CORBA::tk_ulong,


      24,
      ACE_NTOHL (0x6f72625f), 
      ACE_NTOHL (0x70726f74), 
      ACE_NTOHL (0x6f636f6c), 
      ACE_NTOHL (0x5f70726f), 
      ACE_NTOHL (0x70657274), 
      ACE_NTOHL (0x69657300),  // name = orb_protocol_properties
            CORBA::tk_objref, // typecode kind
      76, // encapsulation length
        TAO_ENCAP_BYTE_ORDER, // byte order
        43,
        ACE_NTOHL (0x49444c3a), 
        ACE_NTOHL (0x6f6d672e), 
        ACE_NTOHL (0x6f72672f), 
        ACE_NTOHL (0x5254434f), 
        ACE_NTOHL (0x5242412f), 
        ACE_NTOHL (0x50726f74), 
        ACE_NTOHL (0x6f636f6c), 
        ACE_NTOHL (0x50726f70), 
        ACE_NTOHL (0x65727469), 
        ACE_NTOHL (0x65733a31), 
        ACE_NTOHL (0x2e300000),  // repository ID = IDL:omg.org/RTCORBA/ProtocolProperties:1.0
                19,
        ACE_NTOHL (0x50726f74), 
        ACE_NTOHL (0x6f636f6c), 
        ACE_NTOHL (0x50726f70), 
        ACE_NTOHL (0x65727469), 
        ACE_NTOHL (0x65730000),  // name = ProtocolProperties
        
      30,
      ACE_NTOHL (0x7472616e), 
      ACE_NTOHL (0x73706f72), 
      ACE_NTOHL (0x745f7072), 
      ACE_NTOHL (0x6f746f63), 
      ACE_NTOHL (0x6f6c5f70), 
      ACE_NTOHL (0x726f7065), 
      ACE_NTOHL (0x72746965), 
      ACE_NTOHL (0x73000000),  // name = transport_protocol_properties
            CORBA::tk_objref, // typecode kind
      76, // encapsulation length
        TAO_ENCAP_BYTE_ORDER, // byte order
        43,
        ACE_NTOHL (0x49444c3a), 
        ACE_NTOHL (0x6f6d672e), 
        ACE_NTOHL (0x6f72672f), 
        ACE_NTOHL (0x5254434f), 
        ACE_NTOHL (0x5242412f), 
        ACE_NTOHL (0x50726f74), 
        ACE_NTOHL (0x6f636f6c), 
        ACE_NTOHL (0x50726f70), 
        ACE_NTOHL (0x65727469), 
        ACE_NTOHL (0x65733a31), 
        ACE_NTOHL (0x2e300000),  // repository ID = IDL:omg.org/RTCORBA/ProtocolProperties:1.0
                19,
        ACE_NTOHL (0x50726f74), 
        ACE_NTOHL (0x6f636f6c), 
        ACE_NTOHL (0x50726f70), 
        ACE_NTOHL (0x65727469), 
        ACE_NTOHL (0x65730000),  // name = ProtocolProperties
        

    0U,

};

static CORBA::TypeCode _tc_TAO_tc_RTCORBA_ProtocolList (
    CORBA::tk_alias,
    sizeof (_oc_RTCORBA_ProtocolList),
    (char *) &_oc_RTCORBA_ProtocolList,
    0,
    sizeof (RTCORBA::ProtocolList)
  );

namespace RTCORBA
{
  ::CORBA::TypeCode_ptr _tc_ProtocolList =
    &_tc_TAO_tc_RTCORBA_ProtocolList;
}

// TAO_IDL - Generated from
// be\be_visitor_interface/interface_cs.cpp:60

// Traits specializations for RTCORBA::ServerProtocolPolicy.

ACE_TEMPLATE_CLASS_MEMBER_SPECIALIZATION
RTCORBA::ServerProtocolPolicy_ptr
TAO::Objref_Traits<RTCORBA::ServerProtocolPolicy>::duplicate (
    RTCORBA::ServerProtocolPolicy_ptr p
  )
{
  return RTCORBA::ServerProtocolPolicy::_duplicate (p);
}

ACE_TEMPLATE_CLASS_MEMBER_SPECIALIZATION
void
TAO::Objref_Traits<RTCORBA::ServerProtocolPolicy>::release (
    RTCORBA::ServerProtocolPolicy_ptr p
  )
{
  CORBA::release (p);
}

ACE_TEMPLATE_CLASS_MEMBER_SPECIALIZATION
RTCORBA::ServerProtocolPolicy_ptr
TAO::Objref_Traits<RTCORBA::ServerProtocolPolicy>::nil (void)
{
  return RTCORBA::ServerProtocolPolicy::_nil ();
}

ACE_TEMPLATE_CLASS_MEMBER_SPECIALIZATION
CORBA::Boolean
TAO::Objref_Traits<RTCORBA::ServerProtocolPolicy>::marshal (
    RTCORBA::ServerProtocolPolicy_ptr p,
    TAO_OutputCDR & cdr
  )
{
  return CORBA::Object::marshal (p, cdr);
}

// Function pointer for collocation factory initialization.
TAO::Collocation_Proxy_Broker * 
(*RTCORBA__TAO_ServerProtocolPolicy_Proxy_Broker_Factory_function_pointer) (
    CORBA::Object_ptr obj
  ) = 0;

RTCORBA::ServerProtocolPolicy::ServerProtocolPolicy (void)
{}

RTCORBA::ServerProtocolPolicy::~ServerProtocolPolicy (void)
{}

void 
RTCORBA::ServerProtocolPolicy::_tao_any_destructor (void *_tao_void_pointer)
{
  ServerProtocolPolicy *_tao_tmp_pointer =
    static_cast<ServerProtocolPolicy *> (_tao_void_pointer);
  CORBA::release (_tao_tmp_pointer);
}

RTCORBA::ServerProtocolPolicy_ptr
RTCORBA::ServerProtocolPolicy::_narrow (
    CORBA::Object_ptr _tao_objref
    ACE_ENV_ARG_DECL_NOT_USED
  )
{
  if (CORBA::is_nil (_tao_objref))
    {
      return ServerProtocolPolicy::_nil ();
    }
  
  ServerProtocolPolicy_ptr proxy =
    dynamic_cast<ServerProtocolPolicy_ptr> (_tao_objref);
  
  return ServerProtocolPolicy::_duplicate (proxy);
}

RTCORBA::ServerProtocolPolicy_ptr
RTCORBA::ServerProtocolPolicy::_unchecked_narrow (
    CORBA::Object_ptr _tao_objref
    ACE_ENV_ARG_DECL_NOT_USED
  )
{
  if (CORBA::is_nil (_tao_objref))
    {
      return ServerProtocolPolicy::_nil ();
    }
  
  ServerProtocolPolicy_ptr proxy =
    dynamic_cast<ServerProtocolPolicy_ptr> (_tao_objref);
  
  return ServerProtocolPolicy::_duplicate (proxy);
}

RTCORBA::ServerProtocolPolicy_ptr
RTCORBA::ServerProtocolPolicy::_duplicate (ServerProtocolPolicy_ptr obj)
{
  if (! CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  
  return obj;
}

CORBA::Boolean
RTCORBA::ServerProtocolPolicy::_is_a (
    const char *value
    ACE_ENV_ARG_DECL_NOT_USED
  )
{
  if (
      !ACE_OS::strcmp (
          (char *)value,
          "IDL:omg.org/CORBA/Policy:1.0"
        ) ||
      !ACE_OS::strcmp (
          (char *)value,
          "IDL:omg.org/RTCORBA/ServerProtocolPolicy:1.0"
        ) ||
      !ACE_OS::strcmp (
          (char *)value,
          "IDL:omg.org/CORBA/LocalObject:1.0"
        ) ||
      !ACE_OS::strcmp (
          (char *)value,
          "IDL:omg.org/CORBA/Object:1.0"
        )
     )
    {
      return 1; // success using local knowledge
    }
  else
    {
      return 0;
    }
}

const char* RTCORBA::ServerProtocolPolicy::_interface_repository_id (void) const
{
  return "IDL:omg.org/RTCORBA/ServerProtocolPolicy:1.0";
}

CORBA::Boolean
RTCORBA::ServerProtocolPolicy::marshal (TAO_OutputCDR &)
{
  return 0;
}

// TAO_IDL - Generated from
// be\be_visitor_typecode/typecode_defn.cpp:290

static const CORBA::Long _oc_RTCORBA_ServerProtocolPolicy[] =
{
    TAO_ENCAP_BYTE_ORDER, // byte order
  45,
  ACE_NTOHL (0x49444c3a), 
  ACE_NTOHL (0x6f6d672e), 
  ACE_NTOHL (0x6f72672f), 
  ACE_NTOHL (0x5254434f), 
  ACE_NTOHL (0x5242412f), 
  ACE_NTOHL (0x53657276), 
  ACE_NTOHL (0x65725072), 
  ACE_NTOHL (0x6f746f63), 
  ACE_NTOHL (0x6f6c506f), 
  ACE_NTOHL (0x6c696379), 
  ACE_NTOHL (0x3a312e30), 
  ACE_NTOHL (0x0),  // repository ID = IDL:omg.org/RTCORBA/ServerProtocolPolicy:1.0
    21,
  ACE_NTOHL (0x53657276), 
  ACE_NTOHL (0x65725072), 
  ACE_NTOHL (0x6f746f63), 
  ACE_NTOHL (0x6f6c506f), 
  ACE_NTOHL (0x6c696379), 
  ACE_NTOHL (0x0),  // name = ServerProtocolPolicy
  };

static CORBA::TypeCode _tc_TAO_tc_RTCORBA_ServerProtocolPolicy (
    CORBA::tk_objref,
    sizeof (_oc_RTCORBA_ServerProtocolPolicy),
    (char *) &_oc_RTCORBA_ServerProtocolPolicy,
    0,
    sizeof (RTCORBA::ServerProtocolPolicy)
  );

namespace RTCORBA
{
  ::CORBA::TypeCode_ptr _tc_ServerProtocolPolicy =
    &_tc_TAO_tc_RTCORBA_ServerProtocolPolicy;
}

// TAO_IDL - Generated from
// be\be_visitor_interface/interface_cs.cpp:60

// Traits specializations for RTCORBA::ClientProtocolPolicy.

ACE_TEMPLATE_CLASS_MEMBER_SPECIALIZATION
RTCORBA::ClientProtocolPolicy_ptr
TAO::Objref_Traits<RTCORBA::ClientProtocolPolicy>::duplicate (
    RTCORBA::ClientProtocolPolicy_ptr p
  )
{
  return RTCORBA::ClientProtocolPolicy::_duplicate (p);
}

ACE_TEMPLATE_CLASS_MEMBER_SPECIALIZATION
void
TAO::Objref_Traits<RTCORBA::ClientProtocolPolicy>::release (
    RTCORBA::ClientProtocolPolicy_ptr p
  )
{
  CORBA::release (p);
}

ACE_TEMPLATE_CLASS_MEMBER_SPECIALIZATION
RTCORBA::ClientProtocolPolicy_ptr
TAO::Objref_Traits<RTCORBA::ClientProtocolPolicy>::nil (void)
{
  return RTCORBA::ClientProtocolPolicy::_nil ();
}

ACE_TEMPLATE_CLASS_MEMBER_SPECIALIZATION
CORBA::Boolean
TAO::Objref_Traits<RTCORBA::ClientProtocolPolicy>::marshal (
    RTCORBA::ClientProtocolPolicy_ptr p,
    TAO_OutputCDR & cdr
  )
{
  return CORBA::Object::marshal (p, cdr);
}

// Function pointer for collocation factory initialization.
TAO::Collocation_Proxy_Broker * 
(*RTCORBA__TAO_ClientProtocolPolicy_Proxy_Broker_Factory_function_pointer) (
    CORBA::Object_ptr obj
  ) = 0;

RTCORBA::ClientProtocolPolicy::ClientProtocolPolicy (void)
{}

RTCORBA::ClientProtocolPolicy::~ClientProtocolPolicy (void)
{}

void 
RTCORBA::ClientProtocolPolicy::_tao_any_destructor (void *_tao_void_pointer)
{
  ClientProtocolPolicy *_tao_tmp_pointer =
    static_cast<ClientProtocolPolicy *> (_tao_void_pointer);
  CORBA::release (_tao_tmp_pointer);
}

RTCORBA::ClientProtocolPolicy_ptr
RTCORBA::ClientProtocolPolicy::_narrow (
    CORBA::Object_ptr _tao_objref
    ACE_ENV_ARG_DECL_NOT_USED
  )
{
  if (CORBA::is_nil (_tao_objref))
    {
      return ClientProtocolPolicy::_nil ();
    }
  
  ClientProtocolPolicy_ptr proxy =
    dynamic_cast<ClientProtocolPolicy_ptr> (_tao_objref);
  
  return ClientProtocolPolicy::_duplicate (proxy);
}

RTCORBA::ClientProtocolPolicy_ptr
RTCORBA::ClientProtocolPolicy::_unchecked_narrow (
    CORBA::Object_ptr _tao_objref
    ACE_ENV_ARG_DECL_NOT_USED
  )
{
  if (CORBA::is_nil (_tao_objref))
    {
      return ClientProtocolPolicy::_nil ();
    }
  
  ClientProtocolPolicy_ptr proxy =
    dynamic_cast<ClientProtocolPolicy_ptr> (_tao_objref);
  
  return ClientProtocolPolicy::_duplicate (proxy);
}

RTCORBA::ClientProtocolPolicy_ptr
RTCORBA::ClientProtocolPolicy::_duplicate (ClientProtocolPolicy_ptr obj)
{
  if (! CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  
  return obj;
}

CORBA::Boolean
RTCORBA::ClientProtocolPolicy::_is_a (
    const char *value
    ACE_ENV_ARG_DECL_NOT_USED
  )
{
  if (
      !ACE_OS::strcmp (
          (char *)value,
          "IDL:omg.org/CORBA/Policy:1.0"
        ) ||
      !ACE_OS::strcmp (
          (char *)value,
          "IDL:omg.org/RTCORBA/ClientProtocolPolicy:1.0"
        ) ||
      !ACE_OS::strcmp (
          (char *)value,
          "IDL:omg.org/CORBA/LocalObject:1.0"
        ) ||
      !ACE_OS::strcmp (
          (char *)value,
          "IDL:omg.org/CORBA/Object:1.0"
        )
     )
    {
      return 1; // success using local knowledge
    }
  else
    {
      return 0;
    }
}

const char* RTCORBA::ClientProtocolPolicy::_interface_repository_id (void) const
{
  return "IDL:omg.org/RTCORBA/ClientProtocolPolicy:1.0";
}

CORBA::Boolean
RTCORBA::ClientProtocolPolicy::marshal (TAO_OutputCDR &)
{
  return 0;
}

// TAO_IDL - Generated from
// be\be_visitor_typecode/typecode_defn.cpp:290

static const CORBA::Long _oc_RTCORBA_ClientProtocolPolicy[] =
{
    TAO_ENCAP_BYTE_ORDER, // byte order
  45,
  ACE_NTOHL (0x49444c3a), 
  ACE_NTOHL (0x6f6d672e), 
  ACE_NTOHL (0x6f72672f), 
  ACE_NTOHL (0x5254434f), 
  ACE_NTOHL (0x5242412f), 
  ACE_NTOHL (0x436c6965), 
  ACE_NTOHL (0x6e745072), 
  ACE_NTOHL (0x6f746f63), 
  ACE_NTOHL (0x6f6c506f), 
  ACE_NTOHL (0x6c696379), 
  ACE_NTOHL (0x3a312e30), 
  ACE_NTOHL (0x0),  // repository ID = IDL:omg.org/RTCORBA/ClientProtocolPolicy:1.0
    21,
  ACE_NTOHL (0x436c6965), 
  ACE_NTOHL (0x6e745072), 
  ACE_NTOHL (0x6f746f63), 
  ACE_NTOHL (0x6f6c506f), 
  ACE_NTOHL (0x6c696379), 
  ACE_NTOHL (0x0),  // name = ClientProtocolPolicy
  };

static CORBA::TypeCode _tc_TAO_tc_RTCORBA_ClientProtocolPolicy (
    CORBA::tk_objref,
    sizeof (_oc_RTCORBA_ClientProtocolPolicy),
    (char *) &_oc_RTCORBA_ClientProtocolPolicy,
    0,
    sizeof (RTCORBA::ClientProtocolPolicy)
  );

namespace RTCORBA
{
  ::CORBA::TypeCode_ptr _tc_ClientProtocolPolicy =
    &_tc_TAO_tc_RTCORBA_ClientProtocolPolicy;
}

// TAO_IDL - Generated from
// be\be_visitor_interface/interface_cs.cpp:60

// Traits specializations for RTCORBA::PrivateConnectionPolicy.

ACE_TEMPLATE_CLASS_MEMBER_SPECIALIZATION
RTCORBA::PrivateConnectionPolicy_ptr
TAO::Objref_Traits<RTCORBA::PrivateConnectionPolicy>::duplicate (
    RTCORBA::PrivateConnectionPolicy_ptr p
  )
{
  return RTCORBA::PrivateConnectionPolicy::_duplicate (p);
}

ACE_TEMPLATE_CLASS_MEMBER_SPECIALIZATION
void
TAO::Objref_Traits<RTCORBA::PrivateConnectionPolicy>::release (
    RTCORBA::PrivateConnectionPolicy_ptr p
  )
{
  CORBA::release (p);
}

ACE_TEMPLATE_CLASS_MEMBER_SPECIALIZATION
RTCORBA::PrivateConnectionPolicy_ptr
TAO::Objref_Traits<RTCORBA::PrivateConnectionPolicy>::nil (void)
{
  return RTCORBA::PrivateConnectionPolicy::_nil ();
}

ACE_TEMPLATE_CLASS_MEMBER_SPECIALIZATION
CORBA::Boolean
TAO::Objref_Traits<RTCORBA::PrivateConnectionPolicy>::marshal (
    RTCORBA::PrivateConnectionPolicy_ptr p,
    TAO_OutputCDR & cdr
  )
{
  return CORBA::Object::marshal (p, cdr);
}

// Function pointer for collocation factory initialization.
TAO::Collocation_Proxy_Broker * 
(*RTCORBA__TAO_PrivateConnectionPolicy_Proxy_Broker_Factory_function_pointer) (
    CORBA::Object_ptr obj
  ) = 0;

RTCORBA::PrivateConnectionPolicy::PrivateConnectionPolicy (void)
{}

RTCORBA::PrivateConnectionPolicy::~PrivateConnectionPolicy (void)
{}

void 
RTCORBA::PrivateConnectionPolicy::_tao_any_destructor (void *_tao_void_pointer)
{
  PrivateConnectionPolicy *_tao_tmp_pointer =
    static_cast<PrivateConnectionPolicy *> (_tao_void_pointer);
  CORBA::release (_tao_tmp_pointer);
}

RTCORBA::PrivateConnectionPolicy_ptr
RTCORBA::PrivateConnectionPolicy::_narrow (
    CORBA::Object_ptr _tao_objref
    ACE_ENV_ARG_DECL_NOT_USED
  )
{
  if (CORBA::is_nil (_tao_objref))
    {
      return PrivateConnectionPolicy::_nil ();
    }
  
  PrivateConnectionPolicy_ptr proxy =
    dynamic_cast<PrivateConnectionPolicy_ptr> (_tao_objref);
  
  return PrivateConnectionPolicy::_duplicate (proxy);
}

RTCORBA::PrivateConnectionPolicy_ptr
RTCORBA::PrivateConnectionPolicy::_unchecked_narrow (
    CORBA::Object_ptr _tao_objref
    ACE_ENV_ARG_DECL_NOT_USED
  )
{
  if (CORBA::is_nil (_tao_objref))
    {
      return PrivateConnectionPolicy::_nil ();
    }
  
  PrivateConnectionPolicy_ptr proxy =
    dynamic_cast<PrivateConnectionPolicy_ptr> (_tao_objref);
  
  return PrivateConnectionPolicy::_duplicate (proxy);
}

RTCORBA::PrivateConnectionPolicy_ptr
RTCORBA::PrivateConnectionPolicy::_duplicate (PrivateConnectionPolicy_ptr obj)
{
  if (! CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  
  return obj;
}

CORBA::Boolean
RTCORBA::PrivateConnectionPolicy::_is_a (
    const char *value
    ACE_ENV_ARG_DECL_NOT_USED
  )
{
  if (
      !ACE_OS::strcmp (
          (char *)value,
          "IDL:omg.org/CORBA/Policy:1.0"
        ) ||
      !ACE_OS::strcmp (
          (char *)value,
          "IDL:omg.org/RTCORBA/PrivateConnectionPolicy:1.0"
        ) ||
      !ACE_OS::strcmp (
          (char *)value,
          "IDL:omg.org/CORBA/LocalObject:1.0"
        ) ||
      !ACE_OS::strcmp (
          (char *)value,
          "IDL:omg.org/CORBA/Object:1.0"
        )
     )
    {
      return 1; // success using local knowledge
    }
  else
    {
      return 0;
    }
}

const char* RTCORBA::PrivateConnectionPolicy::_interface_repository_id (void) const
{
  return "IDL:omg.org/RTCORBA/PrivateConnectionPolicy:1.0";
}

CORBA::Boolean
RTCORBA::PrivateConnectionPolicy::marshal (TAO_OutputCDR &)
{
  return 0;
}

// TAO_IDL - Generated from
// be\be_visitor_typecode/typecode_defn.cpp:290

static const CORBA::Long _oc_RTCORBA_PrivateConnectionPolicy[] =
{
    TAO_ENCAP_BYTE_ORDER, // byte order
  48,
  ACE_NTOHL (0x49444c3a), 
  ACE_NTOHL (0x6f6d672e), 
  ACE_NTOHL (0x6f72672f), 
  ACE_NTOHL (0x5254434f), 
  ACE_NTOHL (0x5242412f), 
  ACE_NTOHL (0x50726976), 
  ACE_NTOHL (0x61746543), 
  ACE_NTOHL (0x6f6e6e65), 
  ACE_NTOHL (0x6374696f), 
  ACE_NTOHL (0x6e506f6c), 
  ACE_NTOHL (0x6963793a), 
  ACE_NTOHL (0x312e3000),  // repository ID = IDL:omg.org/RTCORBA/PrivateConnectionPolicy:1.0
    24,
  ACE_NTOHL (0x50726976), 
  ACE_NTOHL (0x61746543), 
  ACE_NTOHL (0x6f6e6e65), 
  ACE_NTOHL (0x6374696f), 
  ACE_NTOHL (0x6e506f6c), 
  ACE_NTOHL (0x69637900),  // name = PrivateConnectionPolicy
  };

static CORBA::TypeCode _tc_TAO_tc_RTCORBA_PrivateConnectionPolicy (
    CORBA::tk_objref,
    sizeof (_oc_RTCORBA_PrivateConnectionPolicy),
    (char *) &_oc_RTCORBA_PrivateConnectionPolicy,
    0,
    sizeof (RTCORBA::PrivateConnectionPolicy)
  );

namespace RTCORBA
{
  ::CORBA::TypeCode_ptr _tc_PrivateConnectionPolicy =
    &_tc_TAO_tc_RTCORBA_PrivateConnectionPolicy;
}

// TAO_IDL - Generated from
// be\be_visitor_interface/interface_cs.cpp:60

// Traits specializations for RTCORBA::TCPProtocolProperties.

ACE_TEMPLATE_CLASS_MEMBER_SPECIALIZATION
RTCORBA::TCPProtocolProperties_ptr
TAO::Objref_Traits<RTCORBA::TCPProtocolProperties>::duplicate (
    RTCORBA::TCPProtocolProperties_ptr p
  )
{
  return RTCORBA::TCPProtocolProperties::_duplicate (p);
}

ACE_TEMPLATE_CLASS_MEMBER_SPECIALIZATION
void
TAO::Objref_Traits<RTCORBA::TCPProtocolProperties>::release (
    RTCORBA::TCPProtocolProperties_ptr p
  )
{
  CORBA::release (p);
}

ACE_TEMPLATE_CLASS_MEMBER_SPECIALIZATION
RTCORBA::TCPProtocolProperties_ptr
TAO::Objref_Traits<RTCORBA::TCPProtocolProperties>::nil (void)
{
  return RTCORBA::TCPProtocolProperties::_nil ();
}

ACE_TEMPLATE_CLASS_MEMBER_SPECIALIZATION
CORBA::Boolean
TAO::Objref_Traits<RTCORBA::TCPProtocolProperties>::marshal (
    RTCORBA::TCPProtocolProperties_ptr p,
    TAO_OutputCDR & cdr
  )
{
  return CORBA::Object::marshal (p, cdr);
}

// Function pointer for collocation factory initialization.
TAO::Collocation_Proxy_Broker * 
(*RTCORBA__TAO_TCPProtocolProperties_Proxy_Broker_Factory_function_pointer) (
    CORBA::Object_ptr obj
  ) = 0;

RTCORBA::TCPProtocolProperties::TCPProtocolProperties (void)
{}

RTCORBA::TCPProtocolProperties::~TCPProtocolProperties (void)
{}

void 
RTCORBA::TCPProtocolProperties::_tao_any_destructor (void *_tao_void_pointer)
{
  TCPProtocolProperties *_tao_tmp_pointer =
    static_cast<TCPProtocolProperties *> (_tao_void_pointer);
  CORBA::release (_tao_tmp_pointer);
}

RTCORBA::TCPProtocolProperties_ptr
RTCORBA::TCPProtocolProperties::_narrow (
    CORBA::Object_ptr _tao_objref
    ACE_ENV_ARG_DECL_NOT_USED
  )
{
  if (CORBA::is_nil (_tao_objref))
    {
      return TCPProtocolProperties::_nil ();
    }
  
  TCPProtocolProperties_ptr proxy =
    dynamic_cast<TCPProtocolProperties_ptr> (_tao_objref);
  
  return TCPProtocolProperties::_duplicate (proxy);
}

RTCORBA::TCPProtocolProperties_ptr
RTCORBA::TCPProtocolProperties::_unchecked_narrow (
    CORBA::Object_ptr _tao_objref
    ACE_ENV_ARG_DECL_NOT_USED
  )
{
  if (CORBA::is_nil (_tao_objref))
    {
      return TCPProtocolProperties::_nil ();
    }
  
  TCPProtocolProperties_ptr proxy =
    dynamic_cast<TCPProtocolProperties_ptr> (_tao_objref);
  
  return TCPProtocolProperties::_duplicate (proxy);
}

RTCORBA::TCPProtocolProperties_ptr
RTCORBA::TCPProtocolProperties::_duplicate (TCPProtocolProperties_ptr obj)
{
  if (! CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  
  return obj;
}

CORBA::Boolean
RTCORBA::TCPProtocolProperties::_is_a (
    const char *value
    ACE_ENV_ARG_DECL_NOT_USED
  )
{
  if (
      !ACE_OS::strcmp (
          (char *)value,
          "IDL:omg.org/RTCORBA/ProtocolProperties:1.0"
        ) ||
      !ACE_OS::strcmp (
          (char *)value,
          "IDL:omg.org/RTCORBA/TCPProtocolProperties:1.0"
        ) ||
      !ACE_OS::strcmp (
          (char *)value,
          "IDL:omg.org/CORBA/LocalObject:1.0"
        ) ||
      !ACE_OS::strcmp (
          (char *)value,
          "IDL:omg.org/CORBA/Object:1.0"
        )
     )
    {
      return 1; // success using local knowledge
    }
  else
    {
      return 0;
    }
}

const char* RTCORBA::TCPProtocolProperties::_interface_repository_id (void) const
{
  return "IDL:omg.org/RTCORBA/TCPProtocolProperties:1.0";
}

CORBA::Boolean
RTCORBA::TCPProtocolProperties::marshal (TAO_OutputCDR &)
{
  return 0;
}

// TAO_IDL - Generated from
// be\be_visitor_typecode/typecode_defn.cpp:290

static const CORBA::Long _oc_RTCORBA_TCPProtocolProperties[] =
{
    TAO_ENCAP_BYTE_ORDER, // byte order
  46,
  ACE_NTOHL (0x49444c3a), 
  ACE_NTOHL (0x6f6d672e), 
  ACE_NTOHL (0x6f72672f), 
  ACE_NTOHL (0x5254434f), 
  ACE_NTOHL (0x5242412f), 
  ACE_NTOHL (0x54435050), 
  ACE_NTOHL (0x726f746f), 
  ACE_NTOHL (0x636f6c50), 
  ACE_NTOHL (0x726f7065), 
  ACE_NTOHL (0x72746965), 
  ACE_NTOHL (0x733a312e), 
  ACE_NTOHL (0x30000000),  // repository ID = IDL:omg.org/RTCORBA/TCPProtocolProperties:1.0
    22,
  ACE_NTOHL (0x54435050), 
  ACE_NTOHL (0x726f746f), 
  ACE_NTOHL (0x636f6c50), 
  ACE_NTOHL (0x726f7065), 
  ACE_NTOHL (0x72746965), 
  ACE_NTOHL (0x73000000),  // name = TCPProtocolProperties
  };

static CORBA::TypeCode _tc_TAO_tc_RTCORBA_TCPProtocolProperties (
    CORBA::tk_objref,
    sizeof (_oc_RTCORBA_TCPProtocolProperties),
    (char *) &_oc_RTCORBA_TCPProtocolProperties,
    0,
    sizeof (RTCORBA::TCPProtocolProperties)
  );

namespace RTCORBA
{
  ::CORBA::TypeCode_ptr _tc_TCPProtocolProperties =
    &_tc_TAO_tc_RTCORBA_TCPProtocolProperties;
}

// TAO_IDL - Generated from
// be\be_visitor_interface/interface_cs.cpp:60

// Traits specializations for RTCORBA::GIOPProtocolProperties.

ACE_TEMPLATE_CLASS_MEMBER_SPECIALIZATION
RTCORBA::GIOPProtocolProperties_ptr
TAO::Objref_Traits<RTCORBA::GIOPProtocolProperties>::duplicate (
    RTCORBA::GIOPProtocolProperties_ptr p
  )
{
  return RTCORBA::GIOPProtocolProperties::_duplicate (p);
}

ACE_TEMPLATE_CLASS_MEMBER_SPECIALIZATION
void
TAO::Objref_Traits<RTCORBA::GIOPProtocolProperties>::release (
    RTCORBA::GIOPProtocolProperties_ptr p
  )
{
  CORBA::release (p);
}

ACE_TEMPLATE_CLASS_MEMBER_SPECIALIZATION
RTCORBA::GIOPProtocolProperties_ptr
TAO::Objref_Traits<RTCORBA::GIOPProtocolProperties>::nil (void)
{
  return RTCORBA::GIOPProtocolProperties::_nil ();
}

ACE_TEMPLATE_CLASS_MEMBER_SPECIALIZATION
CORBA::Boolean
TAO::Objref_Traits<RTCORBA::GIOPProtocolProperties>::marshal (
    RTCORBA::GIOPProtocolProperties_ptr p,
    TAO_OutputCDR & cdr
  )
{
  return CORBA::Object::marshal (p, cdr);
}

// Function pointer for collocation factory initialization.
TAO::Collocation_Proxy_Broker * 
(*RTCORBA__TAO_GIOPProtocolProperties_Proxy_Broker_Factory_function_pointer) (
    CORBA::Object_ptr obj
  ) = 0;

RTCORBA::GIOPProtocolProperties::GIOPProtocolProperties (void)
{}

RTCORBA::GIOPProtocolProperties::~GIOPProtocolProperties (void)
{}

void 
RTCORBA::GIOPProtocolProperties::_tao_any_destructor (void *_tao_void_pointer)
{
  GIOPProtocolProperties *_tao_tmp_pointer =
    static_cast<GIOPProtocolProperties *> (_tao_void_pointer);
  CORBA::release (_tao_tmp_pointer);
}

RTCORBA::GIOPProtocolProperties_ptr
RTCORBA::GIOPProtocolProperties::_narrow (
    CORBA::Object_ptr _tao_objref
    ACE_ENV_ARG_DECL_NOT_USED
  )
{
  if (CORBA::is_nil (_tao_objref))
    {
      return GIOPProtocolProperties::_nil ();
    }
  
  GIOPProtocolProperties_ptr proxy =
    dynamic_cast<GIOPProtocolProperties_ptr> (_tao_objref);
  
  return GIOPProtocolProperties::_duplicate (proxy);
}

RTCORBA::GIOPProtocolProperties_ptr
RTCORBA::GIOPProtocolProperties::_unchecked_narrow (
    CORBA::Object_ptr _tao_objref
    ACE_ENV_ARG_DECL_NOT_USED
  )
{
  if (CORBA::is_nil (_tao_objref))
    {
      return GIOPProtocolProperties::_nil ();
    }
  
  GIOPProtocolProperties_ptr proxy =
    dynamic_cast<GIOPProtocolProperties_ptr> (_tao_objref);
  
  return GIOPProtocolProperties::_duplicate (proxy);
}

RTCORBA::GIOPProtocolProperties_ptr
RTCORBA::GIOPProtocolProperties::_duplicate (GIOPProtocolProperties_ptr obj)
{
  if (! CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  
  return obj;
}

CORBA::Boolean
RTCORBA::GIOPProtocolProperties::_is_a (
    const char *value
    ACE_ENV_ARG_DECL_NOT_USED
  )
{
  if (
      !ACE_OS::strcmp (
          (char *)value,
          "IDL:omg.org/RTCORBA/ProtocolProperties:1.0"
        ) ||
      !ACE_OS::strcmp (
          (char *)value,
          "IDL:omg.org/RTCORBA/GIOPProtocolProperties:1.0"
        ) ||
      !ACE_OS::strcmp (
          (char *)value,
          "IDL:omg.org/CORBA/LocalObject:1.0"
        ) ||
      !ACE_OS::strcmp (
          (char *)value,
          "IDL:omg.org/CORBA/Object:1.0"
        )
     )
    {
      return 1; // success using local knowledge
    }
  else
    {
      return 0;
    }
}

const char* RTCORBA::GIOPProtocolProperties::_interface_repository_id (void) const
{
  return "IDL:omg.org/RTCORBA/GIOPProtocolProperties:1.0";
}

CORBA::Boolean
RTCORBA::GIOPProtocolProperties::marshal (TAO_OutputCDR &)
{
  return 0;
}

// TAO_IDL - Generated from
// be\be_visitor_typecode/typecode_defn.cpp:290

static const CORBA::Long _oc_RTCORBA_GIOPProtocolProperties[] =
{
    TAO_ENCAP_BYTE_ORDER, // byte order
  47,
  ACE_NTOHL (0x49444c3a), 
  ACE_NTOHL (0x6f6d672e), 
  ACE_NTOHL (0x6f72672f), 
  ACE_NTOHL (0x5254434f), 
  ACE_NTOHL (0x5242412f), 
  ACE_NTOHL (0x47494f50), 
  ACE_NTOHL (0x50726f74), 
  ACE_NTOHL (0x6f636f6c), 
  ACE_NTOHL (0x50726f70), 
  ACE_NTOHL (0x65727469), 
  ACE_NTOHL (0x65733a31), 
  ACE_NTOHL (0x2e300000),  // repository ID = IDL:omg.org/RTCORBA/GIOPProtocolProperties:1.0
    23,
  ACE_NTOHL (0x47494f50), 
  ACE_NTOHL (0x50726f74), 
  ACE_NTOHL (0x6f636f6c), 
  ACE_NTOHL (0x50726f70), 
  ACE_NTOHL (0x65727469), 
  ACE_NTOHL (0x65730000),  // name = GIOPProtocolProperties
  };

static CORBA::TypeCode _tc_TAO_tc_RTCORBA_GIOPProtocolProperties (
    CORBA::tk_objref,
    sizeof (_oc_RTCORBA_GIOPProtocolProperties),
    (char *) &_oc_RTCORBA_GIOPProtocolProperties,
    0,
    sizeof (RTCORBA::GIOPProtocolProperties)
  );

namespace RTCORBA
{
  ::CORBA::TypeCode_ptr _tc_GIOPProtocolProperties =
    &_tc_TAO_tc_RTCORBA_GIOPProtocolProperties;
}

// TAO_IDL - Generated from
// be\be_visitor_interface/interface_cs.cpp:60

// Traits specializations for RTCORBA::UnixDomainProtocolProperties.

ACE_TEMPLATE_CLASS_MEMBER_SPECIALIZATION
RTCORBA::UnixDomainProtocolProperties_ptr
TAO::Objref_Traits<RTCORBA::UnixDomainProtocolProperties>::duplicate (
    RTCORBA::UnixDomainProtocolProperties_ptr p
  )
{
  return RTCORBA::UnixDomainProtocolProperties::_duplicate (p);
}

ACE_TEMPLATE_CLASS_MEMBER_SPECIALIZATION
void
TAO::Objref_Traits<RTCORBA::UnixDomainProtocolProperties>::release (
    RTCORBA::UnixDomainProtocolProperties_ptr p
  )
{
  CORBA::release (p);
}

ACE_TEMPLATE_CLASS_MEMBER_SPECIALIZATION
RTCORBA::UnixDomainProtocolProperties_ptr
TAO::Objref_Traits<RTCORBA::UnixDomainProtocolProperties>::nil (void)
{
  return RTCORBA::UnixDomainProtocolProperties::_nil ();
}

ACE_TEMPLATE_CLASS_MEMBER_SPECIALIZATION
CORBA::Boolean
TAO::Objref_Traits<RTCORBA::UnixDomainProtocolProperties>::marshal (
    RTCORBA::UnixDomainProtocolProperties_ptr p,
    TAO_OutputCDR & cdr
  )
{
  return CORBA::Object::marshal (p, cdr);
}

// Function pointer for collocation factory initialization.
TAO::Collocation_Proxy_Broker * 
(*RTCORBA__TAO_UnixDomainProtocolProperties_Proxy_Broker_Factory_function_pointer) (
    CORBA::Object_ptr obj
  ) = 0;

RTCORBA::UnixDomainProtocolProperties::UnixDomainProtocolProperties (void)
{}

RTCORBA::UnixDomainProtocolProperties::~UnixDomainProtocolProperties (void)
{}

void 
RTCORBA::UnixDomainProtocolProperties::_tao_any_destructor (void *_tao_void_pointer)
{
  UnixDomainProtocolProperties *_tao_tmp_pointer =
    static_cast<UnixDomainProtocolProperties *> (_tao_void_pointer);
  CORBA::release (_tao_tmp_pointer);
}

RTCORBA::UnixDomainProtocolProperties_ptr
RTCORBA::UnixDomainProtocolProperties::_narrow (
    CORBA::Object_ptr _tao_objref
    ACE_ENV_ARG_DECL_NOT_USED
  )
{
  if (CORBA::is_nil (_tao_objref))
    {
      return UnixDomainProtocolProperties::_nil ();
    }
  
  UnixDomainProtocolProperties_ptr proxy =
    dynamic_cast<UnixDomainProtocolProperties_ptr> (_tao_objref);
  
  return UnixDomainProtocolProperties::_duplicate (proxy);
}

RTCORBA::UnixDomainProtocolProperties_ptr
RTCORBA::UnixDomainProtocolProperties::_unchecked_narrow (
    CORBA::Object_ptr _tao_objref
    ACE_ENV_ARG_DECL_NOT_USED
  )
{
  if (CORBA::is_nil (_tao_objref))
    {
      return UnixDomainProtocolProperties::_nil ();
    }
  
  UnixDomainProtocolProperties_ptr proxy =
    dynamic_cast<UnixDomainProtocolProperties_ptr> (_tao_objref);
  
  return UnixDomainProtocolProperties::_duplicate (proxy);
}

RTCORBA::UnixDomainProtocolProperties_ptr
RTCORBA::UnixDomainProtocolProperties::_duplicate (UnixDomainProtocolProperties_ptr obj)
{
  if (! CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  
  return obj;
}

CORBA::Boolean
RTCORBA::UnixDomainProtocolProperties::_is_a (
    const char *value
    ACE_ENV_ARG_DECL_NOT_USED
  )
{
  if (
      !ACE_OS::strcmp (
          (char *)value,
          "IDL:omg.org/RTCORBA/ProtocolProperties:1.0"
        ) ||
      !ACE_OS::strcmp (
          (char *)value,
          "IDL:omg.org/RTCORBA/UnixDomainProtocolProperties:1.0"
        ) ||
      !ACE_OS::strcmp (
          (char *)value,
          "IDL:omg.org/CORBA/LocalObject:1.0"
        ) ||
      !ACE_OS::strcmp (
          (char *)value,
          "IDL:omg.org/CORBA/Object:1.0"
        )
     )
    {
      return 1; // success using local knowledge
    }
  else
    {
      return 0;
    }
}

const char* RTCORBA::UnixDomainProtocolProperties::_interface_repository_id (void) const
{
  return "IDL:omg.org/RTCORBA/UnixDomainProtocolProperties:1.0";
}

CORBA::Boolean
RTCORBA::UnixDomainProtocolProperties::marshal (TAO_OutputCDR &)
{
  return 0;
}

// TAO_IDL - Generated from
// be\be_visitor_typecode/typecode_defn.cpp:290

static const CORBA::Long _oc_RTCORBA_UnixDomainProtocolProperties[] =
{
    TAO_ENCAP_BYTE_ORDER, // byte order
  53,
  ACE_NTOHL (0x49444c3a), 
  ACE_NTOHL (0x6f6d672e), 
  ACE_NTOHL (0x6f72672f), 
  ACE_NTOHL (0x5254434f), 
  ACE_NTOHL (0x5242412f), 
  ACE_NTOHL (0x556e6978), 
  ACE_NTOHL (0x446f6d61), 
  ACE_NTOHL (0x696e5072), 
  ACE_NTOHL (0x6f746f63), 
  ACE_NTOHL (0x6f6c5072), 
  ACE_NTOHL (0x6f706572), 
  ACE_NTOHL (0x74696573), 
  ACE_NTOHL (0x3a312e30), 
  ACE_NTOHL (0x0),  // repository ID = IDL:omg.org/RTCORBA/UnixDomainProtocolProperties:1.0
    29,
  ACE_NTOHL (0x556e6978), 
  ACE_NTOHL (0x446f6d61), 
  ACE_NTOHL (0x696e5072), 
  ACE_NTOHL (0x6f746f63), 
  ACE_NTOHL (0x6f6c5072), 
  ACE_NTOHL (0x6f706572), 
  ACE_NTOHL (0x74696573), 
  ACE_NTOHL (0x0),  // name = UnixDomainProtocolProperties
  };

static CORBA::TypeCode _tc_TAO_tc_RTCORBA_UnixDomainProtocolProperties (
    CORBA::tk_objref,
    sizeof (_oc_RTCORBA_UnixDomainProtocolProperties),
    (char *) &_oc_RTCORBA_UnixDomainProtocolProperties,
    0,
    sizeof (RTCORBA::UnixDomainProtocolProperties)
  );

namespace RTCORBA
{
  ::CORBA::TypeCode_ptr _tc_UnixDomainProtocolProperties =
    &_tc_TAO_tc_RTCORBA_UnixDomainProtocolProperties;
}

// TAO_IDL - Generated from
// be\be_visitor_interface/interface_cs.cpp:60

// Traits specializations for RTCORBA::SharedMemoryProtocolProperties.

ACE_TEMPLATE_CLASS_MEMBER_SPECIALIZATION
RTCORBA::SharedMemoryProtocolProperties_ptr
TAO::Objref_Traits<RTCORBA::SharedMemoryProtocolProperties>::duplicate (
    RTCORBA::SharedMemoryProtocolProperties_ptr p
  )
{
  return RTCORBA::SharedMemoryProtocolProperties::_duplicate (p);
}

ACE_TEMPLATE_CLASS_MEMBER_SPECIALIZATION
void
TAO::Objref_Traits<RTCORBA::SharedMemoryProtocolProperties>::release (
    RTCORBA::SharedMemoryProtocolProperties_ptr p
  )
{
  CORBA::release (p);
}

ACE_TEMPLATE_CLASS_MEMBER_SPECIALIZATION
RTCORBA::SharedMemoryProtocolProperties_ptr
TAO::Objref_Traits<RTCORBA::SharedMemoryProtocolProperties>::nil (void)
{
  return RTCORBA::SharedMemoryProtocolProperties::_nil ();
}

ACE_TEMPLATE_CLASS_MEMBER_SPECIALIZATION
CORBA::Boolean
TAO::Objref_Traits<RTCORBA::SharedMemoryProtocolProperties>::marshal (
    RTCORBA::SharedMemoryProtocolProperties_ptr p,
    TAO_OutputCDR & cdr
  )
{
  return CORBA::Object::marshal (p, cdr);
}

// Function pointer for collocation factory initialization.
TAO::Collocation_Proxy_Broker * 
(*RTCORBA__TAO_SharedMemoryProtocolProperties_Proxy_Broker_Factory_function_pointer) (
    CORBA::Object_ptr obj
  ) = 0;

RTCORBA::SharedMemoryProtocolProperties::SharedMemoryProtocolProperties (void)
{}

RTCORBA::SharedMemoryProtocolProperties::~SharedMemoryProtocolProperties (void)
{}

void 
RTCORBA::SharedMemoryProtocolProperties::_tao_any_destructor (void *_tao_void_pointer)
{
  SharedMemoryProtocolProperties *_tao_tmp_pointer =
    static_cast<SharedMemoryProtocolProperties *> (_tao_void_pointer);
  CORBA::release (_tao_tmp_pointer);
}

RTCORBA::SharedMemoryProtocolProperties_ptr
RTCORBA::SharedMemoryProtocolProperties::_narrow (
    CORBA::Object_ptr _tao_objref
    ACE_ENV_ARG_DECL_NOT_USED
  )
{
  if (CORBA::is_nil (_tao_objref))
    {
      return SharedMemoryProtocolProperties::_nil ();
    }
  
  SharedMemoryProtocolProperties_ptr proxy =
    dynamic_cast<SharedMemoryProtocolProperties_ptr> (_tao_objref);
  
  return SharedMemoryProtocolProperties::_duplicate (proxy);
}

RTCORBA::SharedMemoryProtocolProperties_ptr
RTCORBA::SharedMemoryProtocolProperties::_unchecked_narrow (
    CORBA::Object_ptr _tao_objref
    ACE_ENV_ARG_DECL_NOT_USED
  )
{
  if (CORBA::is_nil (_tao_objref))
    {
      return SharedMemoryProtocolProperties::_nil ();
    }
  
  SharedMemoryProtocolProperties_ptr proxy =
    dynamic_cast<SharedMemoryProtocolProperties_ptr> (_tao_objref);
  
  return SharedMemoryProtocolProperties::_duplicate (proxy);
}

RTCORBA::SharedMemoryProtocolProperties_ptr
RTCORBA::SharedMemoryProtocolProperties::_duplicate (SharedMemoryProtocolProperties_ptr obj)
{
  if (! CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  
  return obj;
}

CORBA::Boolean
RTCORBA::SharedMemoryProtocolProperties::_is_a (
    const char *value
    ACE_ENV_ARG_DECL_NOT_USED
  )
{
  if (
      !ACE_OS::strcmp (
          (char *)value,
          "IDL:omg.org/RTCORBA/ProtocolProperties:1.0"
        ) ||
      !ACE_OS::strcmp (
          (char *)value,
          "IDL:omg.org/RTCORBA/SharedMemoryProtocolProperties:1.0"
        ) ||
      !ACE_OS::strcmp (
          (char *)value,
          "IDL:omg.org/CORBA/LocalObject:1.0"
        ) ||
      !ACE_OS::strcmp (
          (char *)value,
          "IDL:omg.org/CORBA/Object:1.0"
        )
     )
    {
      return 1; // success using local knowledge
    }
  else
    {
      return 0;
    }
}

const char* RTCORBA::SharedMemoryProtocolProperties::_interface_repository_id (void) const
{
  return "IDL:omg.org/RTCORBA/SharedMemoryProtocolProperties:1.0";
}

CORBA::Boolean
RTCORBA::SharedMemoryProtocolProperties::marshal (TAO_OutputCDR &)
{
  return 0;
}

// TAO_IDL - Generated from
// be\be_visitor_typecode/typecode_defn.cpp:290

static const CORBA::Long _oc_RTCORBA_SharedMemoryProtocolProperties[] =
{
    TAO_ENCAP_BYTE_ORDER, // byte order
  55,
  ACE_NTOHL (0x49444c3a), 
  ACE_NTOHL (0x6f6d672e), 
  ACE_NTOHL (0x6f72672f), 
  ACE_NTOHL (0x5254434f), 
  ACE_NTOHL (0x5242412f), 
  ACE_NTOHL (0x53686172), 
  ACE_NTOHL (0x65644d65), 
  ACE_NTOHL (0x6d6f7279), 
  ACE_NTOHL (0x50726f74), 
  ACE_NTOHL (0x6f636f6c), 
  ACE_NTOHL (0x50726f70), 
  ACE_NTOHL (0x65727469), 
  ACE_NTOHL (0x65733a31), 
  ACE_NTOHL (0x2e300000),  // repository ID = IDL:omg.org/RTCORBA/SharedMemoryProtocolProperties:1.0
    31,
  ACE_NTOHL (0x53686172), 
  ACE_NTOHL (0x65644d65), 
  ACE_NTOHL (0x6d6f7279), 
  ACE_NTOHL (0x50726f74), 
  ACE_NTOHL (0x6f636f6c), 
  ACE_NTOHL (0x50726f70), 
  ACE_NTOHL (0x65727469), 
  ACE_NTOHL (0x65730000),  // name = SharedMemoryProtocolProperties
  };

static CORBA::TypeCode _tc_TAO_tc_RTCORBA_SharedMemoryProtocolProperties (
    CORBA::tk_objref,
    sizeof (_oc_RTCORBA_SharedMemoryProtocolProperties),
    (char *) &_oc_RTCORBA_SharedMemoryProtocolProperties,
    0,
    sizeof (RTCORBA::SharedMemoryProtocolProperties)
  );

namespace RTCORBA
{
  ::CORBA::TypeCode_ptr _tc_SharedMemoryProtocolProperties =
    &_tc_TAO_tc_RTCORBA_SharedMemoryProtocolProperties;
}

// TAO_IDL - Generated from
// be\be_visitor_typecode/typecode_defn.cpp:290

static const CORBA::Long _oc_RTCORBA_PriorityBand[] =
{
    TAO_ENCAP_BYTE_ORDER, // byte order
  37,
  ACE_NTOHL (0x49444c3a), 
  ACE_NTOHL (0x6f6d672e), 
  ACE_NTOHL (0x6f72672f), 
  ACE_NTOHL (0x5254434f), 
  ACE_NTOHL (0x5242412f), 
  ACE_NTOHL (0x5072696f), 
  ACE_NTOHL (0x72697479), 
  ACE_NTOHL (0x42616e64), 
  ACE_NTOHL (0x3a312e30), 
  ACE_NTOHL (0x0),  // repository ID = IDL:omg.org/RTCORBA/PriorityBand:1.0
    13,
  ACE_NTOHL (0x5072696f), 
  ACE_NTOHL (0x72697479), 
  ACE_NTOHL (0x42616e64), 
  ACE_NTOHL (0x0),  // name = PriorityBand
  2, // member count
    4,
  ACE_NTOHL (0x6c6f7700),  // name = low
    CORBA::tk_alias, // typecode kind for typedefs
  64, // encapsulation length
    TAO_ENCAP_BYTE_ORDER, // byte order
    33,
    ACE_NTOHL (0x49444c3a), 
    ACE_NTOHL (0x6f6d672e), 
    ACE_NTOHL (0x6f72672f), 
    ACE_NTOHL (0x5254434f), 
    ACE_NTOHL (0x5242412f), 
    ACE_NTOHL (0x5072696f), 
    ACE_NTOHL (0x72697479), 
    ACE_NTOHL (0x3a312e30), 
    ACE_NTOHL (0x0),  // repository ID = IDL:omg.org/RTCORBA/Priority:1.0
        9,
    ACE_NTOHL (0x5072696f), 
    ACE_NTOHL (0x72697479), 
    ACE_NTOHL (0x0),  // name = Priority
        CORBA::tk_short,


  5,
  ACE_NTOHL (0x68696768), 
  ACE_NTOHL (0x0),  // name = high
    CORBA::tk_alias, // typecode kind for typedefs
  64, // encapsulation length
    TAO_ENCAP_BYTE_ORDER, // byte order
    33,
    ACE_NTOHL (0x49444c3a), 
    ACE_NTOHL (0x6f6d672e), 
    ACE_NTOHL (0x6f72672f), 
    ACE_NTOHL (0x5254434f), 
    ACE_NTOHL (0x5242412f), 
    ACE_NTOHL (0x5072696f), 
    ACE_NTOHL (0x72697479), 
    ACE_NTOHL (0x3a312e30), 
    ACE_NTOHL (0x0),  // repository ID = IDL:omg.org/RTCORBA/Priority:1.0
        9,
    ACE_NTOHL (0x5072696f), 
    ACE_NTOHL (0x72697479), 
    ACE_NTOHL (0x0),  // name = Priority
        CORBA::tk_short,


};

static CORBA::TypeCode _tc_TAO_tc_RTCORBA_PriorityBand (
    CORBA::tk_struct,
    sizeof (_oc_RTCORBA_PriorityBand),
    (char *) &_oc_RTCORBA_PriorityBand,
    0,
    sizeof (RTCORBA::PriorityBand)
  );

namespace RTCORBA
{
  ::CORBA::TypeCode_ptr _tc_PriorityBand =
    &_tc_TAO_tc_RTCORBA_PriorityBand;
}

// TAO_IDL - Generated from 
// be\be_visitor_structure/structure_cs.cpp:66

void 
RTCORBA::PriorityBand::_tao_any_destructor (
    void *_tao_void_pointer
  )
{
  PriorityBand *_tao_tmp_pointer =
    static_cast<PriorityBand *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

// TAO_IDL - Generated from 
// be\be_visitor_sequence/sequence_cs.cpp:65

#if !defined (_RTCORBA_PRIORITYBANDS_CS_)
#define _RTCORBA_PRIORITYBANDS_CS_

RTCORBA::PriorityBands::PriorityBands (void)
{}

RTCORBA::PriorityBands::PriorityBands (
    CORBA::ULong max
  )
  : TAO_Unbounded_Sequence<
        RTCORBA::PriorityBand
      >
    (max)
{}

RTCORBA::PriorityBands::PriorityBands (
    CORBA::ULong max,
    CORBA::ULong length,
    RTCORBA::PriorityBand * buffer,
    CORBA::Boolean release
  )
  : TAO_Unbounded_Sequence<
        RTCORBA::PriorityBand
      >
    (max, length, buffer, release)
{}

RTCORBA::PriorityBands::PriorityBands (
    const PriorityBands &seq
  )
  : TAO_Unbounded_Sequence<
        RTCORBA::PriorityBand
      >
    (seq)
{}

RTCORBA::PriorityBands::~PriorityBands (void)
{}

void RTCORBA::PriorityBands::_tao_any_destructor (
    void * _tao_void_pointer
  )
{
  PriorityBands * _tao_tmp_pointer =
    static_cast<PriorityBands *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

#endif /* end #if !defined */

// TAO_IDL - Generated from
// be\be_visitor_typecode/typecode_defn.cpp:290

static const CORBA::Long _oc_RTCORBA_PriorityBands[] =
{
    TAO_ENCAP_BYTE_ORDER, // byte order
  38,
  ACE_NTOHL (0x49444c3a), 
  ACE_NTOHL (0x6f6d672e), 
  ACE_NTOHL (0x6f72672f), 
  ACE_NTOHL (0x5254434f), 
  ACE_NTOHL (0x5242412f), 
  ACE_NTOHL (0x5072696f), 
  ACE_NTOHL (0x72697479), 
  ACE_NTOHL (0x42616e64), 
  ACE_NTOHL (0x733a312e), 
  ACE_NTOHL (0x30000000),  // repository ID = IDL:omg.org/RTCORBA/PriorityBands:1.0
    14,
  ACE_NTOHL (0x5072696f), 
  ACE_NTOHL (0x72697479), 
  ACE_NTOHL (0x42616e64), 
  ACE_NTOHL (0x73000000),  // name = PriorityBands
    CORBA::tk_sequence, // typecode kind
  252, // encapsulation length
    TAO_ENCAP_BYTE_ORDER, // byte order
    CORBA::tk_struct, // typecode kind
    236, // encapsulation length
      TAO_ENCAP_BYTE_ORDER, // byte order
      37,
      ACE_NTOHL (0x49444c3a), 
      ACE_NTOHL (0x6f6d672e), 
      ACE_NTOHL (0x6f72672f), 
      ACE_NTOHL (0x5254434f), 
      ACE_NTOHL (0x5242412f), 
      ACE_NTOHL (0x5072696f), 
      ACE_NTOHL (0x72697479), 
      ACE_NTOHL (0x42616e64), 
      ACE_NTOHL (0x3a312e30), 
      ACE_NTOHL (0x0),  // repository ID = IDL:omg.org/RTCORBA/PriorityBand:1.0
            13,
      ACE_NTOHL (0x5072696f), 
      ACE_NTOHL (0x72697479), 
      ACE_NTOHL (0x42616e64), 
      ACE_NTOHL (0x0),  // name = PriorityBand
      2, // member count
            4,
      ACE_NTOHL (0x6c6f7700),  // name = low
            CORBA::tk_alias, // typecode kind for typedefs
      64, // encapsulation length
        TAO_ENCAP_BYTE_ORDER, // byte order
        33,
        ACE_NTOHL (0x49444c3a), 
        ACE_NTOHL (0x6f6d672e), 
        ACE_NTOHL (0x6f72672f), 
        ACE_NTOHL (0x5254434f), 
        ACE_NTOHL (0x5242412f), 
        ACE_NTOHL (0x5072696f), 
        ACE_NTOHL (0x72697479), 
        ACE_NTOHL (0x3a312e30), 
        ACE_NTOHL (0x0),  // repository ID = IDL:omg.org/RTCORBA/Priority:1.0
                9,
        ACE_NTOHL (0x5072696f), 
        ACE_NTOHL (0x72697479), 
        ACE_NTOHL (0x0),  // name = Priority
                CORBA::tk_short,


      5,
      ACE_NTOHL (0x68696768), 
      ACE_NTOHL (0x0),  // name = high
            CORBA::tk_alias, // typecode kind for typedefs
      64, // encapsulation length
        TAO_ENCAP_BYTE_ORDER, // byte order
        33,
        ACE_NTOHL (0x49444c3a), 
        ACE_NTOHL (0x6f6d672e), 
        ACE_NTOHL (0x6f72672f), 
        ACE_NTOHL (0x5254434f), 
        ACE_NTOHL (0x5242412f), 
        ACE_NTOHL (0x5072696f), 
        ACE_NTOHL (0x72697479), 
        ACE_NTOHL (0x3a312e30), 
        ACE_NTOHL (0x0),  // repository ID = IDL:omg.org/RTCORBA/Priority:1.0
                9,
        ACE_NTOHL (0x5072696f), 
        ACE_NTOHL (0x72697479), 
        ACE_NTOHL (0x0),  // name = Priority
                CORBA::tk_short,



    0U,

};

static CORBA::TypeCode _tc_TAO_tc_RTCORBA_PriorityBands (
    CORBA::tk_alias,
    sizeof (_oc_RTCORBA_PriorityBands),
    (char *) &_oc_RTCORBA_PriorityBands,
    0,
    sizeof (RTCORBA::PriorityBands)
  );

namespace RTCORBA
{
  ::CORBA::TypeCode_ptr _tc_PriorityBands =
    &_tc_TAO_tc_RTCORBA_PriorityBands;
}

// TAO_IDL - Generated from
// be\be_visitor_interface/interface_cs.cpp:60

// Traits specializations for RTCORBA::PriorityBandedConnectionPolicy.

ACE_TEMPLATE_CLASS_MEMBER_SPECIALIZATION
RTCORBA::PriorityBandedConnectionPolicy_ptr
TAO::Objref_Traits<RTCORBA::PriorityBandedConnectionPolicy>::duplicate (
    RTCORBA::PriorityBandedConnectionPolicy_ptr p
  )
{
  return RTCORBA::PriorityBandedConnectionPolicy::_duplicate (p);
}

ACE_TEMPLATE_CLASS_MEMBER_SPECIALIZATION
void
TAO::Objref_Traits<RTCORBA::PriorityBandedConnectionPolicy>::release (
    RTCORBA::PriorityBandedConnectionPolicy_ptr p
  )
{
  CORBA::release (p);
}

ACE_TEMPLATE_CLASS_MEMBER_SPECIALIZATION
RTCORBA::PriorityBandedConnectionPolicy_ptr
TAO::Objref_Traits<RTCORBA::PriorityBandedConnectionPolicy>::nil (void)
{
  return RTCORBA::PriorityBandedConnectionPolicy::_nil ();
}

ACE_TEMPLATE_CLASS_MEMBER_SPECIALIZATION
CORBA::Boolean
TAO::Objref_Traits<RTCORBA::PriorityBandedConnectionPolicy>::marshal (
    RTCORBA::PriorityBandedConnectionPolicy_ptr p,
    TAO_OutputCDR & cdr
  )
{
  return CORBA::Object::marshal (p, cdr);
}

// Function pointer for collocation factory initialization.
TAO::Collocation_Proxy_Broker * 
(*RTCORBA__TAO_PriorityBandedConnectionPolicy_Proxy_Broker_Factory_function_pointer) (
    CORBA::Object_ptr obj
  ) = 0;

RTCORBA::PriorityBandedConnectionPolicy::PriorityBandedConnectionPolicy (void)
{}

RTCORBA::PriorityBandedConnectionPolicy::~PriorityBandedConnectionPolicy (void)
{}

void 
RTCORBA::PriorityBandedConnectionPolicy::_tao_any_destructor (void *_tao_void_pointer)
{
  PriorityBandedConnectionPolicy *_tao_tmp_pointer =
    static_cast<PriorityBandedConnectionPolicy *> (_tao_void_pointer);
  CORBA::release (_tao_tmp_pointer);
}

RTCORBA::PriorityBandedConnectionPolicy_ptr
RTCORBA::PriorityBandedConnectionPolicy::_narrow (
    CORBA::Object_ptr _tao_objref
    ACE_ENV_ARG_DECL_NOT_USED
  )
{
  if (CORBA::is_nil (_tao_objref))
    {
      return PriorityBandedConnectionPolicy::_nil ();
    }
  
  PriorityBandedConnectionPolicy_ptr proxy =
    dynamic_cast<PriorityBandedConnectionPolicy_ptr> (_tao_objref);
  
  return PriorityBandedConnectionPolicy::_duplicate (proxy);
}

RTCORBA::PriorityBandedConnectionPolicy_ptr
RTCORBA::PriorityBandedConnectionPolicy::_unchecked_narrow (
    CORBA::Object_ptr _tao_objref
    ACE_ENV_ARG_DECL_NOT_USED
  )
{
  if (CORBA::is_nil (_tao_objref))
    {
      return PriorityBandedConnectionPolicy::_nil ();
    }
  
  PriorityBandedConnectionPolicy_ptr proxy =
    dynamic_cast<PriorityBandedConnectionPolicy_ptr> (_tao_objref);
  
  return PriorityBandedConnectionPolicy::_duplicate (proxy);
}

RTCORBA::PriorityBandedConnectionPolicy_ptr
RTCORBA::PriorityBandedConnectionPolicy::_duplicate (PriorityBandedConnectionPolicy_ptr obj)
{
  if (! CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  
  return obj;
}

CORBA::Boolean
RTCORBA::PriorityBandedConnectionPolicy::_is_a (
    const char *value
    ACE_ENV_ARG_DECL_NOT_USED
  )
{
  if (
      !ACE_OS::strcmp (
          (char *)value,
          "IDL:omg.org/CORBA/Policy:1.0"
        ) ||
      !ACE_OS::strcmp (
          (char *)value,
          "IDL:omg.org/RTCORBA/PriorityBandedConnectionPolicy:1.0"
        ) ||
      !ACE_OS::strcmp (
          (char *)value,
          "IDL:omg.org/CORBA/LocalObject:1.0"
        ) ||
      !ACE_OS::strcmp (
          (char *)value,
          "IDL:omg.org/CORBA/Object:1.0"
        )
     )
    {
      return 1; // success using local knowledge
    }
  else
    {
      return 0;
    }
}

const char* RTCORBA::PriorityBandedConnectionPolicy::_interface_repository_id (void) const
{
  return "IDL:omg.org/RTCORBA/PriorityBandedConnectionPolicy:1.0";
}

CORBA::Boolean
RTCORBA::PriorityBandedConnectionPolicy::marshal (TAO_OutputCDR &)
{
  return 0;
}

// TAO_IDL - Generated from
// be\be_visitor_typecode/typecode_defn.cpp:290

static const CORBA::Long _oc_RTCORBA_PriorityBandedConnectionPolicy[] =
{
    TAO_ENCAP_BYTE_ORDER, // byte order
  55,
  ACE_NTOHL (0x49444c3a), 
  ACE_NTOHL (0x6f6d672e), 
  ACE_NTOHL (0x6f72672f), 
  ACE_NTOHL (0x5254434f), 
  ACE_NTOHL (0x5242412f), 
  ACE_NTOHL (0x5072696f), 
  ACE_NTOHL (0x72697479), 
  ACE_NTOHL (0x42616e64), 
  ACE_NTOHL (0x6564436f), 
  ACE_NTOHL (0x6e6e6563), 
  ACE_NTOHL (0x74696f6e), 
  ACE_NTOHL (0x506f6c69), 
  ACE_NTOHL (0x63793a31), 
  ACE_NTOHL (0x2e300000),  // repository ID = IDL:omg.org/RTCORBA/PriorityBandedConnectionPolicy:1.0
    31,
  ACE_NTOHL (0x5072696f), 
  ACE_NTOHL (0x72697479), 
  ACE_NTOHL (0x42616e64), 
  ACE_NTOHL (0x6564436f), 
  ACE_NTOHL (0x6e6e6563), 
  ACE_NTOHL (0x74696f6e), 
  ACE_NTOHL (0x506f6c69), 
  ACE_NTOHL (0x63790000),  // name = PriorityBandedConnectionPolicy
  };

static CORBA::TypeCode _tc_TAO_tc_RTCORBA_PriorityBandedConnectionPolicy (
    CORBA::tk_objref,
    sizeof (_oc_RTCORBA_PriorityBandedConnectionPolicy),
    (char *) &_oc_RTCORBA_PriorityBandedConnectionPolicy,
    0,
    sizeof (RTCORBA::PriorityBandedConnectionPolicy)
  );

namespace RTCORBA
{
  ::CORBA::TypeCode_ptr _tc_PriorityBandedConnectionPolicy =
    &_tc_TAO_tc_RTCORBA_PriorityBandedConnectionPolicy;
}

// TAO_IDL - Generated from
// be\be_visitor_interface/interface_cs.cpp:60

// Traits specializations for RTCORBA::Current.

ACE_TEMPLATE_CLASS_MEMBER_SPECIALIZATION
RTCORBA::Current_ptr
TAO::Objref_Traits<RTCORBA::Current>::duplicate (
    RTCORBA::Current_ptr p
  )
{
  return RTCORBA::Current::_duplicate (p);
}

ACE_TEMPLATE_CLASS_MEMBER_SPECIALIZATION
void
TAO::Objref_Traits<RTCORBA::Current>::release (
    RTCORBA::Current_ptr p
  )
{
  CORBA::release (p);
}

ACE_TEMPLATE_CLASS_MEMBER_SPECIALIZATION
RTCORBA::Current_ptr
TAO::Objref_Traits<RTCORBA::Current>::nil (void)
{
  return RTCORBA::Current::_nil ();
}

ACE_TEMPLATE_CLASS_MEMBER_SPECIALIZATION
CORBA::Boolean
TAO::Objref_Traits<RTCORBA::Current>::marshal (
    RTCORBA::Current_ptr p,
    TAO_OutputCDR & cdr
  )
{
  return CORBA::Object::marshal (p, cdr);
}

// Function pointer for collocation factory initialization.
TAO::Collocation_Proxy_Broker * 
(*RTCORBA__TAO_Current_Proxy_Broker_Factory_function_pointer) (
    CORBA::Object_ptr obj
  ) = 0;

RTCORBA::Current::Current (void)
{}

RTCORBA::Current::~Current (void)
{}

void 
RTCORBA::Current::_tao_any_destructor (void *_tao_void_pointer)
{
  Current *_tao_tmp_pointer =
    static_cast<Current *> (_tao_void_pointer);
  CORBA::release (_tao_tmp_pointer);
}

RTCORBA::Current_ptr
RTCORBA::Current::_narrow (
    CORBA::Object_ptr _tao_objref
    ACE_ENV_ARG_DECL_NOT_USED
  )
{
  if (CORBA::is_nil (_tao_objref))
    {
      return Current::_nil ();
    }
  
  Current_ptr proxy =
    dynamic_cast<Current_ptr> (_tao_objref);
  
  return Current::_duplicate (proxy);
}

RTCORBA::Current_ptr
RTCORBA::Current::_unchecked_narrow (
    CORBA::Object_ptr _tao_objref
    ACE_ENV_ARG_DECL_NOT_USED
  )
{
  if (CORBA::is_nil (_tao_objref))
    {
      return Current::_nil ();
    }
  
  Current_ptr proxy =
    dynamic_cast<Current_ptr> (_tao_objref);
  
  return Current::_duplicate (proxy);
}

RTCORBA::Current_ptr
RTCORBA::Current::_duplicate (Current_ptr obj)
{
  if (! CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  
  return obj;
}

CORBA::Boolean
RTCORBA::Current::_is_a (
    const char *value
    ACE_ENV_ARG_DECL_NOT_USED
  )
{
  if (
      !ACE_OS::strcmp (
          (char *)value,
          "IDL:omg.org/CORBA/Current:1.0"
        ) ||
      !ACE_OS::strcmp (
          (char *)value,
          "IDL:omg.org/RTCORBA/Current:1.0"
        ) ||
      !ACE_OS::strcmp (
          (char *)value,
          "IDL:omg.org/CORBA/LocalObject:1.0"
        ) ||
      !ACE_OS::strcmp (
          (char *)value,
          "IDL:omg.org/CORBA/Object:1.0"
        )
     )
    {
      return 1; // success using local knowledge
    }
  else
    {
      return 0;
    }
}

const char* RTCORBA::Current::_interface_repository_id (void) const
{
  return "IDL:omg.org/RTCORBA/Current:1.0";
}

CORBA::Boolean
RTCORBA::Current::marshal (TAO_OutputCDR &)
{
  return 0;
}

// TAO_IDL - Generated from
// be\be_visitor_typecode/typecode_defn.cpp:290

static const CORBA::Long _oc_RTCORBA_Current[] =
{
    TAO_ENCAP_BYTE_ORDER, // byte order
  32,
  ACE_NTOHL (0x49444c3a), 
  ACE_NTOHL (0x6f6d672e), 
  ACE_NTOHL (0x6f72672f), 
  ACE_NTOHL (0x5254434f), 
  ACE_NTOHL (0x5242412f), 
  ACE_NTOHL (0x43757272), 
  ACE_NTOHL (0x656e743a), 
  ACE_NTOHL (0x312e3000),  // repository ID = IDL:omg.org/RTCORBA/Current:1.0
    8,
  ACE_NTOHL (0x43757272), 
  ACE_NTOHL (0x656e7400),  // name = Current
  };

static CORBA::TypeCode _tc_TAO_tc_RTCORBA_Current (
    CORBA::tk_objref,
    sizeof (_oc_RTCORBA_Current),
    (char *) &_oc_RTCORBA_Current,
    0,
    sizeof (RTCORBA::Current)
  );

namespace RTCORBA
{
  ::CORBA::TypeCode_ptr _tc_Current =
    &_tc_TAO_tc_RTCORBA_Current;
}

// TAO_IDL - Generated from
// be\be_visitor_interface/interface_cs.cpp:60

// Traits specializations for RTCORBA::Mutex.

ACE_TEMPLATE_CLASS_MEMBER_SPECIALIZATION
RTCORBA::Mutex_ptr
TAO::Objref_Traits<RTCORBA::Mutex>::duplicate (
    RTCORBA::Mutex_ptr p
  )
{
  return RTCORBA::Mutex::_duplicate (p);
}

ACE_TEMPLATE_CLASS_MEMBER_SPECIALIZATION
void
TAO::Objref_Traits<RTCORBA::Mutex>::release (
    RTCORBA::Mutex_ptr p
  )
{
  CORBA::release (p);
}

ACE_TEMPLATE_CLASS_MEMBER_SPECIALIZATION
RTCORBA::Mutex_ptr
TAO::Objref_Traits<RTCORBA::Mutex>::nil (void)
{
  return RTCORBA::Mutex::_nil ();
}

ACE_TEMPLATE_CLASS_MEMBER_SPECIALIZATION
CORBA::Boolean
TAO::Objref_Traits<RTCORBA::Mutex>::marshal (
    RTCORBA::Mutex_ptr p,
    TAO_OutputCDR & cdr
  )
{
  return CORBA::Object::marshal (p, cdr);
}

// Function pointer for collocation factory initialization.
TAO::Collocation_Proxy_Broker * 
(*RTCORBA__TAO_Mutex_Proxy_Broker_Factory_function_pointer) (
    CORBA::Object_ptr obj
  ) = 0;

RTCORBA::Mutex::Mutex (void)
{}

RTCORBA::Mutex::~Mutex (void)
{}

void 
RTCORBA::Mutex::_tao_any_destructor (void *_tao_void_pointer)
{
  Mutex *_tao_tmp_pointer =
    static_cast<Mutex *> (_tao_void_pointer);
  CORBA::release (_tao_tmp_pointer);
}

RTCORBA::Mutex_ptr
RTCORBA::Mutex::_narrow (
    CORBA::Object_ptr _tao_objref
    ACE_ENV_ARG_DECL_NOT_USED
  )
{
  if (CORBA::is_nil (_tao_objref))
    {
      return Mutex::_nil ();
    }
  
  Mutex_ptr proxy =
    dynamic_cast<Mutex_ptr> (_tao_objref);
  
  return Mutex::_duplicate (proxy);
}

RTCORBA::Mutex_ptr
RTCORBA::Mutex::_unchecked_narrow (
    CORBA::Object_ptr _tao_objref
    ACE_ENV_ARG_DECL_NOT_USED
  )
{
  if (CORBA::is_nil (_tao_objref))
    {
      return Mutex::_nil ();
    }
  
  Mutex_ptr proxy =
    dynamic_cast<Mutex_ptr> (_tao_objref);
  
  return Mutex::_duplicate (proxy);
}

RTCORBA::Mutex_ptr
RTCORBA::Mutex::_duplicate (Mutex_ptr obj)
{
  if (! CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  
  return obj;
}

CORBA::Boolean
RTCORBA::Mutex::_is_a (
    const char *value
    ACE_ENV_ARG_DECL_NOT_USED
  )
{
  if (
      !ACE_OS::strcmp (
          (char *)value,
          "IDL:omg.org/RTCORBA/Mutex:1.0"
        ) ||
      !ACE_OS::strcmp (
          (char *)value,
          "IDL:omg.org/CORBA/LocalObject:1.0"
        ) ||
      !ACE_OS::strcmp (
          (char *)value,
          "IDL:omg.org/CORBA/Object:1.0"
        )
     )
    {
      return 1; // success using local knowledge
    }
  else
    {
      return 0;
    }
}

const char* RTCORBA::Mutex::_interface_repository_id (void) const
{
  return "IDL:omg.org/RTCORBA/Mutex:1.0";
}

CORBA::Boolean
RTCORBA::Mutex::marshal (TAO_OutputCDR &)
{
  return 0;
}

// TAO_IDL - Generated from
// be\be_visitor_typecode/typecode_defn.cpp:290

static const CORBA::Long _oc_RTCORBA_Mutex[] =
{
    TAO_ENCAP_BYTE_ORDER, // byte order
  30,
  ACE_NTOHL (0x49444c3a), 
  ACE_NTOHL (0x6f6d672e), 
  ACE_NTOHL (0x6f72672f), 
  ACE_NTOHL (0x5254434f), 
  ACE_NTOHL (0x5242412f), 
  ACE_NTOHL (0x4d757465), 
  ACE_NTOHL (0x783a312e), 
  ACE_NTOHL (0x30000000),  // repository ID = IDL:omg.org/RTCORBA/Mutex:1.0
    6,
  ACE_NTOHL (0x4d757465), 
  ACE_NTOHL (0x78000000),  // name = Mutex
  };

static CORBA::TypeCode _tc_TAO_tc_RTCORBA_Mutex (
    CORBA::tk_objref,
    sizeof (_oc_RTCORBA_Mutex),
    (char *) &_oc_RTCORBA_Mutex,
    0,
    sizeof (RTCORBA::Mutex)
  );

namespace RTCORBA
{
  ::CORBA::TypeCode_ptr _tc_Mutex =
    &_tc_TAO_tc_RTCORBA_Mutex;
}

// TAO_IDL - Generated from
// be\be_visitor_interface/interface_cs.cpp:60

// Traits specializations for RTCORBA::RTORB.

ACE_TEMPLATE_CLASS_MEMBER_SPECIALIZATION
RTCORBA::RTORB_ptr
TAO::Objref_Traits<RTCORBA::RTORB>::duplicate (
    RTCORBA::RTORB_ptr p
  )
{
  return RTCORBA::RTORB::_duplicate (p);
}

ACE_TEMPLATE_CLASS_MEMBER_SPECIALIZATION
void
TAO::Objref_Traits<RTCORBA::RTORB>::release (
    RTCORBA::RTORB_ptr p
  )
{
  CORBA::release (p);
}

ACE_TEMPLATE_CLASS_MEMBER_SPECIALIZATION
RTCORBA::RTORB_ptr
TAO::Objref_Traits<RTCORBA::RTORB>::nil (void)
{
  return RTCORBA::RTORB::_nil ();
}

ACE_TEMPLATE_CLASS_MEMBER_SPECIALIZATION
CORBA::Boolean
TAO::Objref_Traits<RTCORBA::RTORB>::marshal (
    RTCORBA::RTORB_ptr p,
    TAO_OutputCDR & cdr
  )
{
  return CORBA::Object::marshal (p, cdr);
}

// Function pointer for collocation factory initialization.
TAO::Collocation_Proxy_Broker * 
(*RTCORBA__TAO_RTORB_Proxy_Broker_Factory_function_pointer) (
    CORBA::Object_ptr obj
  ) = 0;

// TAO_IDL - Generated from 
// be\be_visitor_exception/exception_cs.cpp:63

RTCORBA::RTORB::MutexNotFound::MutexNotFound (void)
  : CORBA::UserException (
        "IDL:omg.org/RTCORBA/RTORB/MutexNotFound:1.0",
        "MutexNotFound"
      )
{
}

RTCORBA::RTORB::MutexNotFound::~MutexNotFound (void)
{
}

RTCORBA::RTORB::MutexNotFound::MutexNotFound (const ::RTCORBA::RTORB::MutexNotFound &_tao_excp)
  : CORBA::UserException (
        _tao_excp._rep_id (),
        _tao_excp._name ()
      )
{
}

RTCORBA::RTORB::MutexNotFound&
RTCORBA::RTORB::MutexNotFound::operator= (const ::RTCORBA::RTORB::MutexNotFound &_tao_excp)
{
  this->ACE_NESTED_CLASS (CORBA, UserException)::operator= (_tao_excp);
  return *this;
}

void RTCORBA::RTORB::MutexNotFound::_tao_any_destructor (void *_tao_void_pointer)
{
  MutexNotFound *_tao_tmp_pointer =
    static_cast<MutexNotFound*> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

RTCORBA::RTORB::MutexNotFound *
RTCORBA::RTORB::MutexNotFound::_downcast (CORBA::Exception *_tao_excp)
{
  if (!ACE_OS::strcmp ("IDL:omg.org/RTCORBA/RTORB/MutexNotFound:1.0", _tao_excp->_rep_id ()))
    {
      return dynamic_cast<MutexNotFound *> (_tao_excp);
    }
  else
    {
      return 0;
    }
}

CORBA::Exception *RTCORBA::RTORB::MutexNotFound::_alloc (void)
{
  CORBA::Exception *retval = 0;
  ACE_NEW_RETURN (retval, ::RTCORBA::RTORB::MutexNotFound, 0);
  return retval;
}

CORBA::Exception *
RTCORBA::RTORB::MutexNotFound::_tao_duplicate (void) const
{
  CORBA::Exception *result;
  ACE_NEW_RETURN (
      result,
      ::RTCORBA::RTORB::MutexNotFound (*this),
      0
    );
  return result;
}

void RTCORBA::RTORB::MutexNotFound::_raise (void) const
{
  TAO_RAISE (*this);
}

void RTCORBA::RTORB::MutexNotFound::_tao_encode (
    TAO_OutputCDR &
    ACE_ENV_ARG_DECL
  ) const
{
  ACE_THROW (CORBA::MARSHAL ());
}

void RTCORBA::RTORB::MutexNotFound::_tao_decode (
    TAO_InputCDR &
    ACE_ENV_ARG_DECL
  )
{
  ACE_THROW (CORBA::MARSHAL ());
}

// TAO extension - the virtual _type method.
CORBA::TypeCode_ptr RTCORBA::RTORB::MutexNotFound::_type (void) const
{
  return ::RTCORBA::RTORB::_tc_MutexNotFound;
}

// TAO_IDL - Generated from
// be\be_visitor_typecode/typecode_defn.cpp:290

static const CORBA::Long _oc_RTCORBA_RTORB_MutexNotFound[] =
{
    TAO_ENCAP_BYTE_ORDER, // byte order
  44,
  ACE_NTOHL (0x49444c3a), 
  ACE_NTOHL (0x6f6d672e), 
  ACE_NTOHL (0x6f72672f), 
  ACE_NTOHL (0x5254434f), 
  ACE_NTOHL (0x5242412f), 
  ACE_NTOHL (0x52544f52), 
  ACE_NTOHL (0x422f4d75), 
  ACE_NTOHL (0x7465784e), 
  ACE_NTOHL (0x6f74466f), 
  ACE_NTOHL (0x756e643a), 
  ACE_NTOHL (0x312e3000),  // repository ID = IDL:omg.org/RTCORBA/RTORB/MutexNotFound:1.0
    14,
  ACE_NTOHL (0x4d757465), 
  ACE_NTOHL (0x784e6f74), 
  ACE_NTOHL (0x466f756e), 
  ACE_NTOHL (0x64000000),  // name = MutexNotFound
  0, // member count
  };

static CORBA::TypeCode _tc_TAO_tc_RTCORBA_RTORB_MutexNotFound (
    CORBA::tk_except,
    sizeof (_oc_RTCORBA_RTORB_MutexNotFound),
    (char *) &_oc_RTCORBA_RTORB_MutexNotFound,
    0,
    sizeof (RTCORBA::RTORB::MutexNotFound)
  );

::CORBA::TypeCode_ptr RTCORBA::RTORB::_tc_MutexNotFound =
  &_tc_TAO_tc_RTCORBA_RTORB_MutexNotFound;

// TAO_IDL - Generated from 
// be\be_visitor_exception/exception_cs.cpp:63

RTCORBA::RTORB::InvalidThreadpool::InvalidThreadpool (void)
  : CORBA::UserException (
        "IDL:omg.org/RTCORBA/RTORB/InvalidThreadpool:1.0",
        "InvalidThreadpool"
      )
{
}

RTCORBA::RTORB::InvalidThreadpool::~InvalidThreadpool (void)
{
}

RTCORBA::RTORB::InvalidThreadpool::InvalidThreadpool (const ::RTCORBA::RTORB::InvalidThreadpool &_tao_excp)
  : CORBA::UserException (
        _tao_excp._rep_id (),
        _tao_excp._name ()
      )
{
}

RTCORBA::RTORB::InvalidThreadpool&
RTCORBA::RTORB::InvalidThreadpool::operator= (const ::RTCORBA::RTORB::InvalidThreadpool &_tao_excp)
{
  this->ACE_NESTED_CLASS (CORBA, UserException)::operator= (_tao_excp);
  return *this;
}

void RTCORBA::RTORB::InvalidThreadpool::_tao_any_destructor (void *_tao_void_pointer)
{
  InvalidThreadpool *_tao_tmp_pointer =
    static_cast<InvalidThreadpool*> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

RTCORBA::RTORB::InvalidThreadpool *
RTCORBA::RTORB::InvalidThreadpool::_downcast (CORBA::Exception *_tao_excp)
{
  if (!ACE_OS::strcmp ("IDL:omg.org/RTCORBA/RTORB/InvalidThreadpool:1.0", _tao_excp->_rep_id ()))
    {
      return dynamic_cast<InvalidThreadpool *> (_tao_excp);
    }
  else
    {
      return 0;
    }
}

CORBA::Exception *RTCORBA::RTORB::InvalidThreadpool::_alloc (void)
{
  CORBA::Exception *retval = 0;
  ACE_NEW_RETURN (retval, ::RTCORBA::RTORB::InvalidThreadpool, 0);
  return retval;
}

CORBA::Exception *
RTCORBA::RTORB::InvalidThreadpool::_tao_duplicate (void) const
{
  CORBA::Exception *result;
  ACE_NEW_RETURN (
      result,
      ::RTCORBA::RTORB::InvalidThreadpool (*this),
      0
    );
  return result;
}

void RTCORBA::RTORB::InvalidThreadpool::_raise (void) const
{
  TAO_RAISE (*this);
}

void RTCORBA::RTORB::InvalidThreadpool::_tao_encode (
    TAO_OutputCDR &
    ACE_ENV_ARG_DECL
  ) const
{
  ACE_THROW (CORBA::MARSHAL ());
}

void RTCORBA::RTORB::InvalidThreadpool::_tao_decode (
    TAO_InputCDR &
    ACE_ENV_ARG_DECL
  )
{
  ACE_THROW (CORBA::MARSHAL ());
}

// TAO extension - the virtual _type method.
CORBA::TypeCode_ptr RTCORBA::RTORB::InvalidThreadpool::_type (void) const
{
  return ::RTCORBA::RTORB::_tc_InvalidThreadpool;
}

// TAO_IDL - Generated from
// be\be_visitor_typecode/typecode_defn.cpp:290

static const CORBA::Long _oc_RTCORBA_RTORB_InvalidThreadpool[] =
{
    TAO_ENCAP_BYTE_ORDER, // byte order
  48,
  ACE_NTOHL (0x49444c3a), 
  ACE_NTOHL (0x6f6d672e), 
  ACE_NTOHL (0x6f72672f), 
  ACE_NTOHL (0x5254434f), 
  ACE_NTOHL (0x5242412f), 
  ACE_NTOHL (0x52544f52), 
  ACE_NTOHL (0x422f496e), 
  ACE_NTOHL (0x76616c69), 
  ACE_NTOHL (0x64546872), 
  ACE_NTOHL (0x65616470), 
  ACE_NTOHL (0x6f6f6c3a), 
  ACE_NTOHL (0x312e3000),  // repository ID = IDL:omg.org/RTCORBA/RTORB/InvalidThreadpool:1.0
    18,
  ACE_NTOHL (0x496e7661), 
  ACE_NTOHL (0x6c696454), 
  ACE_NTOHL (0x68726561), 
  ACE_NTOHL (0x64706f6f), 
  ACE_NTOHL (0x6c000000),  // name = InvalidThreadpool
  0, // member count
  };

static CORBA::TypeCode _tc_TAO_tc_RTCORBA_RTORB_InvalidThreadpool (
    CORBA::tk_except,
    sizeof (_oc_RTCORBA_RTORB_InvalidThreadpool),
    (char *) &_oc_RTCORBA_RTORB_InvalidThreadpool,
    0,
    sizeof (RTCORBA::RTORB::InvalidThreadpool)
  );

::CORBA::TypeCode_ptr RTCORBA::RTORB::_tc_InvalidThreadpool =
  &_tc_TAO_tc_RTCORBA_RTORB_InvalidThreadpool;

RTCORBA::RTORB::RTORB (void)
{}

RTCORBA::RTORB::~RTORB (void)
{}

void 
RTCORBA::RTORB::_tao_any_destructor (void *_tao_void_pointer)
{
  RTORB *_tao_tmp_pointer =
    static_cast<RTORB *> (_tao_void_pointer);
  CORBA::release (_tao_tmp_pointer);
}

RTCORBA::RTORB_ptr
RTCORBA::RTORB::_narrow (
    CORBA::Object_ptr _tao_objref
    ACE_ENV_ARG_DECL_NOT_USED
  )
{
  if (CORBA::is_nil (_tao_objref))
    {
      return RTORB::_nil ();
    }
  
  RTORB_ptr proxy =
    dynamic_cast<RTORB_ptr> (_tao_objref);
  
  return RTORB::_duplicate (proxy);
}

RTCORBA::RTORB_ptr
RTCORBA::RTORB::_unchecked_narrow (
    CORBA::Object_ptr _tao_objref
    ACE_ENV_ARG_DECL_NOT_USED
  )
{
  if (CORBA::is_nil (_tao_objref))
    {
      return RTORB::_nil ();
    }
  
  RTORB_ptr proxy =
    dynamic_cast<RTORB_ptr> (_tao_objref);
  
  return RTORB::_duplicate (proxy);
}

RTCORBA::RTORB_ptr
RTCORBA::RTORB::_duplicate (RTORB_ptr obj)
{
  if (! CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  
  return obj;
}

CORBA::Boolean
RTCORBA::RTORB::_is_a (
    const char *value
    ACE_ENV_ARG_DECL_NOT_USED
  )
{
  if (
      !ACE_OS::strcmp (
          (char *)value,
          "IDL:omg.org/RTCORBA/RTORB:1.0"
        ) ||
      !ACE_OS::strcmp (
          (char *)value,
          "IDL:omg.org/CORBA/LocalObject:1.0"
        ) ||
      !ACE_OS::strcmp (
          (char *)value,
          "IDL:omg.org/CORBA/Object:1.0"
        )
     )
    {
      return 1; // success using local knowledge
    }
  else
    {
      return 0;
    }
}

const char* RTCORBA::RTORB::_interface_repository_id (void) const
{
  return "IDL:omg.org/RTCORBA/RTORB:1.0";
}

CORBA::Boolean
RTCORBA::RTORB::marshal (TAO_OutputCDR &)
{
  return 0;
}

// TAO_IDL - Generated from
// be\be_visitor_typecode/typecode_defn.cpp:290

static const CORBA::Long _oc_RTCORBA_RTORB[] =
{
    TAO_ENCAP_BYTE_ORDER, // byte order
  30,
  ACE_NTOHL (0x49444c3a), 
  ACE_NTOHL (0x6f6d672e), 
  ACE_NTOHL (0x6f72672f), 
  ACE_NTOHL (0x5254434f), 
  ACE_NTOHL (0x5242412f), 
  ACE_NTOHL (0x52544f52), 
  ACE_NTOHL (0x423a312e), 
  ACE_NTOHL (0x30000000),  // repository ID = IDL:omg.org/RTCORBA/RTORB:1.0
    6,
  ACE_NTOHL (0x52544f52), 
  ACE_NTOHL (0x42000000),  // name = RTORB
  };

static CORBA::TypeCode _tc_TAO_tc_RTCORBA_RTORB (
    CORBA::tk_objref,
    sizeof (_oc_RTCORBA_RTORB),
    (char *) &_oc_RTCORBA_RTORB,
    0,
    sizeof (RTCORBA::RTORB)
  );

namespace RTCORBA
{
  ::CORBA::TypeCode_ptr _tc_RTORB =
    &_tc_TAO_tc_RTCORBA_RTORB;
}

// TAO_IDL - Generated from 
// be\be_visitor_structure/any_op_cs.cpp:54

// Copying insertion.
void operator<<= (
    CORBA::Any &_tao_any,
    const RTCORBA::ThreadpoolLane &_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<RTCORBA::ThreadpoolLane>::insert_copy (
      _tao_any,
      RTCORBA::ThreadpoolLane::_tao_any_destructor,
      RTCORBA::_tc_ThreadpoolLane,
      _tao_elem
    );
}

// Non-copying insertion.
void operator<<= (
    CORBA::Any &_tao_any,
    RTCORBA::ThreadpoolLane *_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<RTCORBA::ThreadpoolLane>::insert (
      _tao_any,
      RTCORBA::ThreadpoolLane::_tao_any_destructor,
      RTCORBA::_tc_ThreadpoolLane,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
CORBA::Boolean operator>>= (
    const CORBA::Any &_tao_any,
    RTCORBA::ThreadpoolLane *&_tao_elem
  )
{
  return _tao_any >>= const_cast<
      const RTCORBA::ThreadpoolLane *&> (
      _tao_elem
    );
}

// Extraction to const pointer.
CORBA::Boolean operator>>= (
    const CORBA::Any &_tao_any,
    const RTCORBA::ThreadpoolLane *&_tao_elem
  )
{
  return
    TAO::Any_Dual_Impl_T<RTCORBA::ThreadpoolLane>::extract (
        _tao_any,
        RTCORBA::ThreadpoolLane::_tao_any_destructor,
        RTCORBA::_tc_ThreadpoolLane,
        _tao_elem
      );
}

// TAO_IDL - Generated from 
// be\be_visitor_sequence/any_op_cs.cpp:54

// Copying insertion.
void operator<<= (
    CORBA::Any &_tao_any,
    const RTCORBA::ThreadpoolLanes &_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<RTCORBA::ThreadpoolLanes>::insert_copy (
      _tao_any,
      RTCORBA::ThreadpoolLanes::_tao_any_destructor,
      RTCORBA::_tc_ThreadpoolLanes,
      _tao_elem
    );
}

// Non-copying insertion.
void operator<<= (
    CORBA::Any &_tao_any,
    RTCORBA::ThreadpoolLanes *_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<RTCORBA::ThreadpoolLanes>::insert (
      _tao_any,
      RTCORBA::ThreadpoolLanes::_tao_any_destructor,
      RTCORBA::_tc_ThreadpoolLanes,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
CORBA::Boolean operator>>= (
    const CORBA::Any &_tao_any,
    RTCORBA::ThreadpoolLanes *&_tao_elem
  )
{
  return _tao_any >>= const_cast<
      const RTCORBA::ThreadpoolLanes *&> (
      _tao_elem
    );
}

// Extraction to const pointer.
CORBA::Boolean operator>>= (
    const CORBA::Any &_tao_any,
    const RTCORBA::ThreadpoolLanes *&_tao_elem
  )
{
  return
    TAO::Any_Dual_Impl_T<RTCORBA::ThreadpoolLanes>::extract (
        _tao_any,
        RTCORBA::ThreadpoolLanes::_tao_any_destructor,
        RTCORBA::_tc_ThreadpoolLanes,
        _tao_elem
      );
}

// TAO_IDL - Generated from
// be\be_visitor_enum/any_op_cs.cpp:52

void operator<<= (
    CORBA::Any &_tao_any,
    RTCORBA::PriorityModel _tao_elem
  )
{
  TAO::Any_Basic_Impl_T<RTCORBA::PriorityModel>::insert (
      _tao_any,
      RTCORBA::_tc_PriorityModel,
      _tao_elem
    );
}

CORBA::Boolean operator>>= (
    const CORBA::Any &_tao_any,
    RTCORBA::PriorityModel &_tao_elem
  )
{
  return
    TAO::Any_Basic_Impl_T<RTCORBA::PriorityModel>::extract (
        _tao_any,
        RTCORBA::_tc_PriorityModel,
        _tao_elem 
      );
}

// TAO_IDL - Generated from
// be\be_visitor_interface/any_op_cs.cpp:50

ACE_TEMPLATE_SPECIALIZATION
CORBA::Boolean
TAO::Any_Impl_T<RTCORBA::PriorityModelPolicy>::to_object (
    CORBA::Object_ptr &_tao_elem
  ) const
{
  _tao_elem = CORBA::Object::_duplicate (this->value_);
  return 1;
}

ACE_TEMPLATE_SPECIALIZATION
CORBA::Boolean
TAO::Any_Impl_T<RTCORBA::PriorityModelPolicy>::marshal_value (TAO_OutputCDR &)
{
  return 0;
}

ACE_TEMPLATE_SPECIALIZATION
CORBA::Boolean
TAO::Any_Impl_T<RTCORBA::PriorityModelPolicy>::demarshal_value (TAO_InputCDR &)
{
  return 0;
}

// Copying insertion.
void
operator<<= (
    CORBA::Any &_tao_any,
    RTCORBA::PriorityModelPolicy_ptr _tao_elem
  )
{
  RTCORBA::PriorityModelPolicy_ptr _tao_objptr =
    RTCORBA::PriorityModelPolicy::_duplicate (_tao_elem);
  _tao_any <<= &_tao_objptr;
}

// Non-copying insertion.
void
operator<<= (
    CORBA::Any &_tao_any,
    RTCORBA::PriorityModelPolicy_ptr *_tao_elem
  )
{
  TAO::Any_Impl_T<RTCORBA::PriorityModelPolicy>::insert (
      _tao_any,
      RTCORBA::PriorityModelPolicy::_tao_any_destructor,
      RTCORBA::_tc_PriorityModelPolicy,
      *_tao_elem
    );
}

CORBA::Boolean
operator>>= (
    const CORBA::Any &_tao_any,
    RTCORBA::PriorityModelPolicy_ptr &_tao_elem
  )
{
  return
    TAO::Any_Impl_T<RTCORBA::PriorityModelPolicy>::extract (
        _tao_any,
        RTCORBA::PriorityModelPolicy::_tao_any_destructor,
        RTCORBA::_tc_PriorityModelPolicy,
        _tao_elem
      );
}

// TAO_IDL - Generated from
// be\be_visitor_interface/any_op_cs.cpp:50

ACE_TEMPLATE_SPECIALIZATION
CORBA::Boolean
TAO::Any_Impl_T<RTCORBA::ThreadpoolPolicy>::to_object (
    CORBA::Object_ptr &_tao_elem
  ) const
{
  _tao_elem = CORBA::Object::_duplicate (this->value_);
  return 1;
}

ACE_TEMPLATE_SPECIALIZATION
CORBA::Boolean
TAO::Any_Impl_T<RTCORBA::ThreadpoolPolicy>::marshal_value (TAO_OutputCDR &)
{
  return 0;
}

ACE_TEMPLATE_SPECIALIZATION
CORBA::Boolean
TAO::Any_Impl_T<RTCORBA::ThreadpoolPolicy>::demarshal_value (TAO_InputCDR &)
{
  return 0;
}

// Copying insertion.
void
operator<<= (
    CORBA::Any &_tao_any,
    RTCORBA::ThreadpoolPolicy_ptr _tao_elem
  )
{
  RTCORBA::ThreadpoolPolicy_ptr _tao_objptr =
    RTCORBA::ThreadpoolPolicy::_duplicate (_tao_elem);
  _tao_any <<= &_tao_objptr;
}

// Non-copying insertion.
void
operator<<= (
    CORBA::Any &_tao_any,
    RTCORBA::ThreadpoolPolicy_ptr *_tao_elem
  )
{
  TAO::Any_Impl_T<RTCORBA::ThreadpoolPolicy>::insert (
      _tao_any,
      RTCORBA::ThreadpoolPolicy::_tao_any_destructor,
      RTCORBA::_tc_ThreadpoolPolicy,
      *_tao_elem
    );
}

CORBA::Boolean
operator>>= (
    const CORBA::Any &_tao_any,
    RTCORBA::ThreadpoolPolicy_ptr &_tao_elem
  )
{
  return
    TAO::Any_Impl_T<RTCORBA::ThreadpoolPolicy>::extract (
        _tao_any,
        RTCORBA::ThreadpoolPolicy::_tao_any_destructor,
        RTCORBA::_tc_ThreadpoolPolicy,
        _tao_elem
      );
}

// TAO_IDL - Generated from
// be\be_visitor_interface/any_op_cs.cpp:50

ACE_TEMPLATE_SPECIALIZATION
CORBA::Boolean
TAO::Any_Impl_T<RTCORBA::ProtocolProperties>::to_object (
    CORBA::Object_ptr &_tao_elem
  ) const
{
  _tao_elem = CORBA::Object::_duplicate (this->value_);
  return 1;
}

ACE_TEMPLATE_SPECIALIZATION
CORBA::Boolean
TAO::Any_Impl_T<RTCORBA::ProtocolProperties>::marshal_value (TAO_OutputCDR &)
{
  return 0;
}

ACE_TEMPLATE_SPECIALIZATION
CORBA::Boolean
TAO::Any_Impl_T<RTCORBA::ProtocolProperties>::demarshal_value (TAO_InputCDR &)
{
  return 0;
}

// Copying insertion.
void
operator<<= (
    CORBA::Any &_tao_any,
    RTCORBA::ProtocolProperties_ptr _tao_elem
  )
{
  RTCORBA::ProtocolProperties_ptr _tao_objptr =
    RTCORBA::ProtocolProperties::_duplicate (_tao_elem);
  _tao_any <<= &_tao_objptr;
}

// Non-copying insertion.
void
operator<<= (
    CORBA::Any &_tao_any,
    RTCORBA::ProtocolProperties_ptr *_tao_elem
  )
{
  TAO::Any_Impl_T<RTCORBA::ProtocolProperties>::insert (
      _tao_any,
      RTCORBA::ProtocolProperties::_tao_any_destructor,
      RTCORBA::_tc_ProtocolProperties,
      *_tao_elem
    );
}

CORBA::Boolean
operator>>= (
    const CORBA::Any &_tao_any,
    RTCORBA::ProtocolProperties_ptr &_tao_elem
  )
{
  return
    TAO::Any_Impl_T<RTCORBA::ProtocolProperties>::extract (
        _tao_any,
        RTCORBA::ProtocolProperties::_tao_any_destructor,
        RTCORBA::_tc_ProtocolProperties,
        _tao_elem
      );
}

// TAO_IDL - Generated from 
// be\be_visitor_structure/any_op_cs.cpp:54



ACE_TEMPLATE_SPECIALIZATION
CORBA::Boolean
TAO::Any_Dual_Impl_T<RTCORBA::Protocol>::marshal_value (TAO_OutputCDR &)
{
  return 0;
}

ACE_TEMPLATE_SPECIALIZATION
CORBA::Boolean
TAO::Any_Dual_Impl_T<RTCORBA::Protocol>::demarshal_value (TAO_InputCDR &)
{
  return 0;
}// Copying insertion.
void operator<<= (
    CORBA::Any &_tao_any,
    const RTCORBA::Protocol &_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<RTCORBA::Protocol>::insert_copy (
      _tao_any,
      RTCORBA::Protocol::_tao_any_destructor,
      RTCORBA::_tc_Protocol,
      _tao_elem
    );
}

// Non-copying insertion.
void operator<<= (
    CORBA::Any &_tao_any,
    RTCORBA::Protocol *_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<RTCORBA::Protocol>::insert (
      _tao_any,
      RTCORBA::Protocol::_tao_any_destructor,
      RTCORBA::_tc_Protocol,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
CORBA::Boolean operator>>= (
    const CORBA::Any &_tao_any,
    RTCORBA::Protocol *&_tao_elem
  )
{
  return _tao_any >>= const_cast<
      const RTCORBA::Protocol *&> (
      _tao_elem
    );
}

// Extraction to const pointer.
CORBA::Boolean operator>>= (
    const CORBA::Any &_tao_any,
    const RTCORBA::Protocol *&_tao_elem
  )
{
  return
    TAO::Any_Dual_Impl_T<RTCORBA::Protocol>::extract (
        _tao_any,
        RTCORBA::Protocol::_tao_any_destructor,
        RTCORBA::_tc_Protocol,
        _tao_elem
      );
}

// TAO_IDL - Generated from 
// be\be_visitor_sequence/any_op_cs.cpp:54



ACE_TEMPLATE_SPECIALIZATION
CORBA::Boolean
TAO::Any_Dual_Impl_T<RTCORBA::ProtocolList>::marshal_value (TAO_OutputCDR &)
{
  return 0;
}

ACE_TEMPLATE_SPECIALIZATION
CORBA::Boolean
TAO::Any_Dual_Impl_T<RTCORBA::ProtocolList>::demarshal_value (TAO_InputCDR &)
{
  return 0;
}// Copying insertion.
void operator<<= (
    CORBA::Any &_tao_any,
    const RTCORBA::ProtocolList &_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<RTCORBA::ProtocolList>::insert_copy (
      _tao_any,
      RTCORBA::ProtocolList::_tao_any_destructor,
      RTCORBA::_tc_ProtocolList,
      _tao_elem
    );
}

// Non-copying insertion.
void operator<<= (
    CORBA::Any &_tao_any,
    RTCORBA::ProtocolList *_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<RTCORBA::ProtocolList>::insert (
      _tao_any,
      RTCORBA::ProtocolList::_tao_any_destructor,
      RTCORBA::_tc_ProtocolList,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
CORBA::Boolean operator>>= (
    const CORBA::Any &_tao_any,
    RTCORBA::ProtocolList *&_tao_elem
  )
{
  return _tao_any >>= const_cast<
      const RTCORBA::ProtocolList *&> (
      _tao_elem
    );
}

// Extraction to const pointer.
CORBA::Boolean operator>>= (
    const CORBA::Any &_tao_any,
    const RTCORBA::ProtocolList *&_tao_elem
  )
{
  return
    TAO::Any_Dual_Impl_T<RTCORBA::ProtocolList>::extract (
        _tao_any,
        RTCORBA::ProtocolList::_tao_any_destructor,
        RTCORBA::_tc_ProtocolList,
        _tao_elem
      );
}

// TAO_IDL - Generated from
// be\be_visitor_interface/any_op_cs.cpp:50

ACE_TEMPLATE_SPECIALIZATION
CORBA::Boolean
TAO::Any_Impl_T<RTCORBA::ServerProtocolPolicy>::to_object (
    CORBA::Object_ptr &_tao_elem
  ) const
{
  _tao_elem = CORBA::Object::_duplicate (this->value_);
  return 1;
}

ACE_TEMPLATE_SPECIALIZATION
CORBA::Boolean
TAO::Any_Impl_T<RTCORBA::ServerProtocolPolicy>::marshal_value (TAO_OutputCDR &)
{
  return 0;
}

ACE_TEMPLATE_SPECIALIZATION
CORBA::Boolean
TAO::Any_Impl_T<RTCORBA::ServerProtocolPolicy>::demarshal_value (TAO_InputCDR &)
{
  return 0;
}

// Copying insertion.
void
operator<<= (
    CORBA::Any &_tao_any,
    RTCORBA::ServerProtocolPolicy_ptr _tao_elem
  )
{
  RTCORBA::ServerProtocolPolicy_ptr _tao_objptr =
    RTCORBA::ServerProtocolPolicy::_duplicate (_tao_elem);
  _tao_any <<= &_tao_objptr;
}

// Non-copying insertion.
void
operator<<= (
    CORBA::Any &_tao_any,
    RTCORBA::ServerProtocolPolicy_ptr *_tao_elem
  )
{
  TAO::Any_Impl_T<RTCORBA::ServerProtocolPolicy>::insert (
      _tao_any,
      RTCORBA::ServerProtocolPolicy::_tao_any_destructor,
      RTCORBA::_tc_ServerProtocolPolicy,
      *_tao_elem
    );
}

CORBA::Boolean
operator>>= (
    const CORBA::Any &_tao_any,
    RTCORBA::ServerProtocolPolicy_ptr &_tao_elem
  )
{
  return
    TAO::Any_Impl_T<RTCORBA::ServerProtocolPolicy>::extract (
        _tao_any,
        RTCORBA::ServerProtocolPolicy::_tao_any_destructor,
        RTCORBA::_tc_ServerProtocolPolicy,
        _tao_elem
      );
}

// TAO_IDL - Generated from
// be\be_visitor_interface/any_op_cs.cpp:50

ACE_TEMPLATE_SPECIALIZATION
CORBA::Boolean
TAO::Any_Impl_T<RTCORBA::ClientProtocolPolicy>::to_object (
    CORBA::Object_ptr &_tao_elem
  ) const
{
  _tao_elem = CORBA::Object::_duplicate (this->value_);
  return 1;
}

ACE_TEMPLATE_SPECIALIZATION
CORBA::Boolean
TAO::Any_Impl_T<RTCORBA::ClientProtocolPolicy>::marshal_value (TAO_OutputCDR &)
{
  return 0;
}

ACE_TEMPLATE_SPECIALIZATION
CORBA::Boolean
TAO::Any_Impl_T<RTCORBA::ClientProtocolPolicy>::demarshal_value (TAO_InputCDR &)
{
  return 0;
}

// Copying insertion.
void
operator<<= (
    CORBA::Any &_tao_any,
    RTCORBA::ClientProtocolPolicy_ptr _tao_elem
  )
{
  RTCORBA::ClientProtocolPolicy_ptr _tao_objptr =
    RTCORBA::ClientProtocolPolicy::_duplicate (_tao_elem);
  _tao_any <<= &_tao_objptr;
}

// Non-copying insertion.
void
operator<<= (
    CORBA::Any &_tao_any,
    RTCORBA::ClientProtocolPolicy_ptr *_tao_elem
  )
{
  TAO::Any_Impl_T<RTCORBA::ClientProtocolPolicy>::insert (
      _tao_any,
      RTCORBA::ClientProtocolPolicy::_tao_any_destructor,
      RTCORBA::_tc_ClientProtocolPolicy,
      *_tao_elem
    );
}

CORBA::Boolean
operator>>= (
    const CORBA::Any &_tao_any,
    RTCORBA::ClientProtocolPolicy_ptr &_tao_elem
  )
{
  return
    TAO::Any_Impl_T<RTCORBA::ClientProtocolPolicy>::extract (
        _tao_any,
        RTCORBA::ClientProtocolPolicy::_tao_any_destructor,
        RTCORBA::_tc_ClientProtocolPolicy,
        _tao_elem
      );
}

// TAO_IDL - Generated from
// be\be_visitor_interface/any_op_cs.cpp:50

ACE_TEMPLATE_SPECIALIZATION
CORBA::Boolean
TAO::Any_Impl_T<RTCORBA::PrivateConnectionPolicy>::to_object (
    CORBA::Object_ptr &_tao_elem
  ) const
{
  _tao_elem = CORBA::Object::_duplicate (this->value_);
  return 1;
}

ACE_TEMPLATE_SPECIALIZATION
CORBA::Boolean
TAO::Any_Impl_T<RTCORBA::PrivateConnectionPolicy>::marshal_value (TAO_OutputCDR &)
{
  return 0;
}

ACE_TEMPLATE_SPECIALIZATION
CORBA::Boolean
TAO::Any_Impl_T<RTCORBA::PrivateConnectionPolicy>::demarshal_value (TAO_InputCDR &)
{
  return 0;
}

// Copying insertion.
void
operator<<= (
    CORBA::Any &_tao_any,
    RTCORBA::PrivateConnectionPolicy_ptr _tao_elem
  )
{
  RTCORBA::PrivateConnectionPolicy_ptr _tao_objptr =
    RTCORBA::PrivateConnectionPolicy::_duplicate (_tao_elem);
  _tao_any <<= &_tao_objptr;
}

// Non-copying insertion.
void
operator<<= (
    CORBA::Any &_tao_any,
    RTCORBA::PrivateConnectionPolicy_ptr *_tao_elem
  )
{
  TAO::Any_Impl_T<RTCORBA::PrivateConnectionPolicy>::insert (
      _tao_any,
      RTCORBA::PrivateConnectionPolicy::_tao_any_destructor,
      RTCORBA::_tc_PrivateConnectionPolicy,
      *_tao_elem
    );
}

CORBA::Boolean
operator>>= (
    const CORBA::Any &_tao_any,
    RTCORBA::PrivateConnectionPolicy_ptr &_tao_elem
  )
{
  return
    TAO::Any_Impl_T<RTCORBA::PrivateConnectionPolicy>::extract (
        _tao_any,
        RTCORBA::PrivateConnectionPolicy::_tao_any_destructor,
        RTCORBA::_tc_PrivateConnectionPolicy,
        _tao_elem
      );
}

// TAO_IDL - Generated from
// be\be_visitor_interface/any_op_cs.cpp:50

ACE_TEMPLATE_SPECIALIZATION
CORBA::Boolean
TAO::Any_Impl_T<RTCORBA::TCPProtocolProperties>::to_object (
    CORBA::Object_ptr &_tao_elem
  ) const
{
  _tao_elem = CORBA::Object::_duplicate (this->value_);
  return 1;
}

ACE_TEMPLATE_SPECIALIZATION
CORBA::Boolean
TAO::Any_Impl_T<RTCORBA::TCPProtocolProperties>::marshal_value (TAO_OutputCDR &)
{
  return 0;
}

ACE_TEMPLATE_SPECIALIZATION
CORBA::Boolean
TAO::Any_Impl_T<RTCORBA::TCPProtocolProperties>::demarshal_value (TAO_InputCDR &)
{
  return 0;
}

// Copying insertion.
void
operator<<= (
    CORBA::Any &_tao_any,
    RTCORBA::TCPProtocolProperties_ptr _tao_elem
  )
{
  RTCORBA::TCPProtocolProperties_ptr _tao_objptr =
    RTCORBA::TCPProtocolProperties::_duplicate (_tao_elem);
  _tao_any <<= &_tao_objptr;
}

// Non-copying insertion.
void
operator<<= (
    CORBA::Any &_tao_any,
    RTCORBA::TCPProtocolProperties_ptr *_tao_elem
  )
{
  TAO::Any_Impl_T<RTCORBA::TCPProtocolProperties>::insert (
      _tao_any,
      RTCORBA::TCPProtocolProperties::_tao_any_destructor,
      RTCORBA::_tc_TCPProtocolProperties,
      *_tao_elem
    );
}

CORBA::Boolean
operator>>= (
    const CORBA::Any &_tao_any,
    RTCORBA::TCPProtocolProperties_ptr &_tao_elem
  )
{
  return
    TAO::Any_Impl_T<RTCORBA::TCPProtocolProperties>::extract (
        _tao_any,
        RTCORBA::TCPProtocolProperties::_tao_any_destructor,
        RTCORBA::_tc_TCPProtocolProperties,
        _tao_elem
      );
}

// TAO_IDL - Generated from
// be\be_visitor_interface/any_op_cs.cpp:50

ACE_TEMPLATE_SPECIALIZATION
CORBA::Boolean
TAO::Any_Impl_T<RTCORBA::GIOPProtocolProperties>::to_object (
    CORBA::Object_ptr &_tao_elem
  ) const
{
  _tao_elem = CORBA::Object::_duplicate (this->value_);
  return 1;
}

ACE_TEMPLATE_SPECIALIZATION
CORBA::Boolean
TAO::Any_Impl_T<RTCORBA::GIOPProtocolProperties>::marshal_value (TAO_OutputCDR &)
{
  return 0;
}

ACE_TEMPLATE_SPECIALIZATION
CORBA::Boolean
TAO::Any_Impl_T<RTCORBA::GIOPProtocolProperties>::demarshal_value (TAO_InputCDR &)
{
  return 0;
}

// Copying insertion.
void
operator<<= (
    CORBA::Any &_tao_any,
    RTCORBA::GIOPProtocolProperties_ptr _tao_elem
  )
{
  RTCORBA::GIOPProtocolProperties_ptr _tao_objptr =
    RTCORBA::GIOPProtocolProperties::_duplicate (_tao_elem);
  _tao_any <<= &_tao_objptr;
}

// Non-copying insertion.
void
operator<<= (
    CORBA::Any &_tao_any,
    RTCORBA::GIOPProtocolProperties_ptr *_tao_elem
  )
{
  TAO::Any_Impl_T<RTCORBA::GIOPProtocolProperties>::insert (
      _tao_any,
      RTCORBA::GIOPProtocolProperties::_tao_any_destructor,
      RTCORBA::_tc_GIOPProtocolProperties,
      *_tao_elem
    );
}

CORBA::Boolean
operator>>= (
    const CORBA::Any &_tao_any,
    RTCORBA::GIOPProtocolProperties_ptr &_tao_elem
  )
{
  return
    TAO::Any_Impl_T<RTCORBA::GIOPProtocolProperties>::extract (
        _tao_any,
        RTCORBA::GIOPProtocolProperties::_tao_any_destructor,
        RTCORBA::_tc_GIOPProtocolProperties,
        _tao_elem
      );
}

// TAO_IDL - Generated from
// be\be_visitor_interface/any_op_cs.cpp:50

ACE_TEMPLATE_SPECIALIZATION
CORBA::Boolean
TAO::Any_Impl_T<RTCORBA::UnixDomainProtocolProperties>::to_object (
    CORBA::Object_ptr &_tao_elem
  ) const
{
  _tao_elem = CORBA::Object::_duplicate (this->value_);
  return 1;
}

ACE_TEMPLATE_SPECIALIZATION
CORBA::Boolean
TAO::Any_Impl_T<RTCORBA::UnixDomainProtocolProperties>::marshal_value (TAO_OutputCDR &)
{
  return 0;
}

ACE_TEMPLATE_SPECIALIZATION
CORBA::Boolean
TAO::Any_Impl_T<RTCORBA::UnixDomainProtocolProperties>::demarshal_value (TAO_InputCDR &)
{
  return 0;
}

// Copying insertion.
void
operator<<= (
    CORBA::Any &_tao_any,
    RTCORBA::UnixDomainProtocolProperties_ptr _tao_elem
  )
{
  RTCORBA::UnixDomainProtocolProperties_ptr _tao_objptr =
    RTCORBA::UnixDomainProtocolProperties::_duplicate (_tao_elem);
  _tao_any <<= &_tao_objptr;
}

// Non-copying insertion.
void
operator<<= (
    CORBA::Any &_tao_any,
    RTCORBA::UnixDomainProtocolProperties_ptr *_tao_elem
  )
{
  TAO::Any_Impl_T<RTCORBA::UnixDomainProtocolProperties>::insert (
      _tao_any,
      RTCORBA::UnixDomainProtocolProperties::_tao_any_destructor,
      RTCORBA::_tc_UnixDomainProtocolProperties,
      *_tao_elem
    );
}

CORBA::Boolean
operator>>= (
    const CORBA::Any &_tao_any,
    RTCORBA::UnixDomainProtocolProperties_ptr &_tao_elem
  )
{
  return
    TAO::Any_Impl_T<RTCORBA::UnixDomainProtocolProperties>::extract (
        _tao_any,
        RTCORBA::UnixDomainProtocolProperties::_tao_any_destructor,
        RTCORBA::_tc_UnixDomainProtocolProperties,
        _tao_elem
      );
}

// TAO_IDL - Generated from
// be\be_visitor_interface/any_op_cs.cpp:50

ACE_TEMPLATE_SPECIALIZATION
CORBA::Boolean
TAO::Any_Impl_T<RTCORBA::SharedMemoryProtocolProperties>::to_object (
    CORBA::Object_ptr &_tao_elem
  ) const
{
  _tao_elem = CORBA::Object::_duplicate (this->value_);
  return 1;
}

ACE_TEMPLATE_SPECIALIZATION
CORBA::Boolean
TAO::Any_Impl_T<RTCORBA::SharedMemoryProtocolProperties>::marshal_value (TAO_OutputCDR &)
{
  return 0;
}

ACE_TEMPLATE_SPECIALIZATION
CORBA::Boolean
TAO::Any_Impl_T<RTCORBA::SharedMemoryProtocolProperties>::demarshal_value (TAO_InputCDR &)
{
  return 0;
}

// Copying insertion.
void
operator<<= (
    CORBA::Any &_tao_any,
    RTCORBA::SharedMemoryProtocolProperties_ptr _tao_elem
  )
{
  RTCORBA::SharedMemoryProtocolProperties_ptr _tao_objptr =
    RTCORBA::SharedMemoryProtocolProperties::_duplicate (_tao_elem);
  _tao_any <<= &_tao_objptr;
}

// Non-copying insertion.
void
operator<<= (
    CORBA::Any &_tao_any,
    RTCORBA::SharedMemoryProtocolProperties_ptr *_tao_elem
  )
{
  TAO::Any_Impl_T<RTCORBA::SharedMemoryProtocolProperties>::insert (
      _tao_any,
      RTCORBA::SharedMemoryProtocolProperties::_tao_any_destructor,
      RTCORBA::_tc_SharedMemoryProtocolProperties,
      *_tao_elem
    );
}

CORBA::Boolean
operator>>= (
    const CORBA::Any &_tao_any,
    RTCORBA::SharedMemoryProtocolProperties_ptr &_tao_elem
  )
{
  return
    TAO::Any_Impl_T<RTCORBA::SharedMemoryProtocolProperties>::extract (
        _tao_any,
        RTCORBA::SharedMemoryProtocolProperties::_tao_any_destructor,
        RTCORBA::_tc_SharedMemoryProtocolProperties,
        _tao_elem
      );
}

// TAO_IDL - Generated from 
// be\be_visitor_structure/any_op_cs.cpp:54

// Copying insertion.
void operator<<= (
    CORBA::Any &_tao_any,
    const RTCORBA::PriorityBand &_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<RTCORBA::PriorityBand>::insert_copy (
      _tao_any,
      RTCORBA::PriorityBand::_tao_any_destructor,
      RTCORBA::_tc_PriorityBand,
      _tao_elem
    );
}

// Non-copying insertion.
void operator<<= (
    CORBA::Any &_tao_any,
    RTCORBA::PriorityBand *_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<RTCORBA::PriorityBand>::insert (
      _tao_any,
      RTCORBA::PriorityBand::_tao_any_destructor,
      RTCORBA::_tc_PriorityBand,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
CORBA::Boolean operator>>= (
    const CORBA::Any &_tao_any,
    RTCORBA::PriorityBand *&_tao_elem
  )
{
  return _tao_any >>= const_cast<
      const RTCORBA::PriorityBand *&> (
      _tao_elem
    );
}

// Extraction to const pointer.
CORBA::Boolean operator>>= (
    const CORBA::Any &_tao_any,
    const RTCORBA::PriorityBand *&_tao_elem
  )
{
  return
    TAO::Any_Dual_Impl_T<RTCORBA::PriorityBand>::extract (
        _tao_any,
        RTCORBA::PriorityBand::_tao_any_destructor,
        RTCORBA::_tc_PriorityBand,
        _tao_elem
      );
}

// TAO_IDL - Generated from 
// be\be_visitor_sequence/any_op_cs.cpp:54

// Copying insertion.
void operator<<= (
    CORBA::Any &_tao_any,
    const RTCORBA::PriorityBands &_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<RTCORBA::PriorityBands>::insert_copy (
      _tao_any,
      RTCORBA::PriorityBands::_tao_any_destructor,
      RTCORBA::_tc_PriorityBands,
      _tao_elem
    );
}

// Non-copying insertion.
void operator<<= (
    CORBA::Any &_tao_any,
    RTCORBA::PriorityBands *_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<RTCORBA::PriorityBands>::insert (
      _tao_any,
      RTCORBA::PriorityBands::_tao_any_destructor,
      RTCORBA::_tc_PriorityBands,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
CORBA::Boolean operator>>= (
    const CORBA::Any &_tao_any,
    RTCORBA::PriorityBands *&_tao_elem
  )
{
  return _tao_any >>= const_cast<
      const RTCORBA::PriorityBands *&> (
      _tao_elem
    );
}

// Extraction to const pointer.
CORBA::Boolean operator>>= (
    const CORBA::Any &_tao_any,
    const RTCORBA::PriorityBands *&_tao_elem
  )
{
  return
    TAO::Any_Dual_Impl_T<RTCORBA::PriorityBands>::extract (
        _tao_any,
        RTCORBA::PriorityBands::_tao_any_destructor,
        RTCORBA::_tc_PriorityBands,
        _tao_elem
      );
}

// TAO_IDL - Generated from
// be\be_visitor_interface/any_op_cs.cpp:50

ACE_TEMPLATE_SPECIALIZATION
CORBA::Boolean
TAO::Any_Impl_T<RTCORBA::PriorityBandedConnectionPolicy>::to_object (
    CORBA::Object_ptr &_tao_elem
  ) const
{
  _tao_elem = CORBA::Object::_duplicate (this->value_);
  return 1;
}

ACE_TEMPLATE_SPECIALIZATION
CORBA::Boolean
TAO::Any_Impl_T<RTCORBA::PriorityBandedConnectionPolicy>::marshal_value (TAO_OutputCDR &)
{
  return 0;
}

ACE_TEMPLATE_SPECIALIZATION
CORBA::Boolean
TAO::Any_Impl_T<RTCORBA::PriorityBandedConnectionPolicy>::demarshal_value (TAO_InputCDR &)
{
  return 0;
}

// Copying insertion.
void
operator<<= (
    CORBA::Any &_tao_any,
    RTCORBA::PriorityBandedConnectionPolicy_ptr _tao_elem
  )
{
  RTCORBA::PriorityBandedConnectionPolicy_ptr _tao_objptr =
    RTCORBA::PriorityBandedConnectionPolicy::_duplicate (_tao_elem);
  _tao_any <<= &_tao_objptr;
}

// Non-copying insertion.
void
operator<<= (
    CORBA::Any &_tao_any,
    RTCORBA::PriorityBandedConnectionPolicy_ptr *_tao_elem
  )
{
  TAO::Any_Impl_T<RTCORBA::PriorityBandedConnectionPolicy>::insert (
      _tao_any,
      RTCORBA::PriorityBandedConnectionPolicy::_tao_any_destructor,
      RTCORBA::_tc_PriorityBandedConnectionPolicy,
      *_tao_elem
    );
}

CORBA::Boolean
operator>>= (
    const CORBA::Any &_tao_any,
    RTCORBA::PriorityBandedConnectionPolicy_ptr &_tao_elem
  )
{
  return
    TAO::Any_Impl_T<RTCORBA::PriorityBandedConnectionPolicy>::extract (
        _tao_any,
        RTCORBA::PriorityBandedConnectionPolicy::_tao_any_destructor,
        RTCORBA::_tc_PriorityBandedConnectionPolicy,
        _tao_elem
      );
}

// TAO_IDL - Generated from
// be\be_visitor_interface/any_op_cs.cpp:50

ACE_TEMPLATE_SPECIALIZATION
CORBA::Boolean
TAO::Any_Impl_T<RTCORBA::Current>::to_object (
    CORBA::Object_ptr &_tao_elem
  ) const
{
  _tao_elem = CORBA::Object::_duplicate (this->value_);
  return 1;
}

ACE_TEMPLATE_SPECIALIZATION
CORBA::Boolean
TAO::Any_Impl_T<RTCORBA::Current>::marshal_value (TAO_OutputCDR &)
{
  return 0;
}

ACE_TEMPLATE_SPECIALIZATION
CORBA::Boolean
TAO::Any_Impl_T<RTCORBA::Current>::demarshal_value (TAO_InputCDR &)
{
  return 0;
}

// Copying insertion.
void
operator<<= (
    CORBA::Any &_tao_any,
    RTCORBA::Current_ptr _tao_elem
  )
{
  RTCORBA::Current_ptr _tao_objptr =
    RTCORBA::Current::_duplicate (_tao_elem);
  _tao_any <<= &_tao_objptr;
}

// Non-copying insertion.
void
operator<<= (
    CORBA::Any &_tao_any,
    RTCORBA::Current_ptr *_tao_elem
  )
{
  TAO::Any_Impl_T<RTCORBA::Current>::insert (
      _tao_any,
      RTCORBA::Current::_tao_any_destructor,
      RTCORBA::_tc_Current,
      *_tao_elem
    );
}

CORBA::Boolean
operator>>= (
    const CORBA::Any &_tao_any,
    RTCORBA::Current_ptr &_tao_elem
  )
{
  return
    TAO::Any_Impl_T<RTCORBA::Current>::extract (
        _tao_any,
        RTCORBA::Current::_tao_any_destructor,
        RTCORBA::_tc_Current,
        _tao_elem
      );
}

// TAO_IDL - Generated from
// be\be_visitor_interface/any_op_cs.cpp:50

ACE_TEMPLATE_SPECIALIZATION
CORBA::Boolean
TAO::Any_Impl_T<RTCORBA::Mutex>::to_object (
    CORBA::Object_ptr &_tao_elem
  ) const
{
  _tao_elem = CORBA::Object::_duplicate (this->value_);
  return 1;
}

ACE_TEMPLATE_SPECIALIZATION
CORBA::Boolean
TAO::Any_Impl_T<RTCORBA::Mutex>::marshal_value (TAO_OutputCDR &)
{
  return 0;
}

ACE_TEMPLATE_SPECIALIZATION
CORBA::Boolean
TAO::Any_Impl_T<RTCORBA::Mutex>::demarshal_value (TAO_InputCDR &)
{
  return 0;
}

// Copying insertion.
void
operator<<= (
    CORBA::Any &_tao_any,
    RTCORBA::Mutex_ptr _tao_elem
  )
{
  RTCORBA::Mutex_ptr _tao_objptr =
    RTCORBA::Mutex::_duplicate (_tao_elem);
  _tao_any <<= &_tao_objptr;
}

// Non-copying insertion.
void
operator<<= (
    CORBA::Any &_tao_any,
    RTCORBA::Mutex_ptr *_tao_elem
  )
{
  TAO::Any_Impl_T<RTCORBA::Mutex>::insert (
      _tao_any,
      RTCORBA::Mutex::_tao_any_destructor,
      RTCORBA::_tc_Mutex,
      *_tao_elem
    );
}

CORBA::Boolean
operator>>= (
    const CORBA::Any &_tao_any,
    RTCORBA::Mutex_ptr &_tao_elem
  )
{
  return
    TAO::Any_Impl_T<RTCORBA::Mutex>::extract (
        _tao_any,
        RTCORBA::Mutex::_tao_any_destructor,
        RTCORBA::_tc_Mutex,
        _tao_elem
      );
}

// TAO_IDL - Generated from
// be\be_visitor_interface/any_op_cs.cpp:50

ACE_TEMPLATE_SPECIALIZATION
CORBA::Boolean
TAO::Any_Impl_T<RTCORBA::RTORB>::to_object (
    CORBA::Object_ptr &_tao_elem
  ) const
{
  _tao_elem = CORBA::Object::_duplicate (this->value_);
  return 1;
}

ACE_TEMPLATE_SPECIALIZATION
CORBA::Boolean
TAO::Any_Impl_T<RTCORBA::RTORB>::marshal_value (TAO_OutputCDR &)
{
  return 0;
}

ACE_TEMPLATE_SPECIALIZATION
CORBA::Boolean
TAO::Any_Impl_T<RTCORBA::RTORB>::demarshal_value (TAO_InputCDR &)
{
  return 0;
}

// Copying insertion.
void
operator<<= (
    CORBA::Any &_tao_any,
    RTCORBA::RTORB_ptr _tao_elem
  )
{
  RTCORBA::RTORB_ptr _tao_objptr =
    RTCORBA::RTORB::_duplicate (_tao_elem);
  _tao_any <<= &_tao_objptr;
}

// Non-copying insertion.
void
operator<<= (
    CORBA::Any &_tao_any,
    RTCORBA::RTORB_ptr *_tao_elem
  )
{
  TAO::Any_Impl_T<RTCORBA::RTORB>::insert (
      _tao_any,
      RTCORBA::RTORB::_tao_any_destructor,
      RTCORBA::_tc_RTORB,
      *_tao_elem
    );
}

CORBA::Boolean
operator>>= (
    const CORBA::Any &_tao_any,
    RTCORBA::RTORB_ptr &_tao_elem
  )
{
  return
    TAO::Any_Impl_T<RTCORBA::RTORB>::extract (
        _tao_any,
        RTCORBA::RTORB::_tao_any_destructor,
        RTCORBA::_tc_RTORB,
        _tao_elem
      );
}

// TAO_IDL - Generated from 
// be\be_visitor_exception/any_op_cs.cpp:50

ACE_TEMPLATE_SPECIALIZATION
CORBA::Boolean
TAO::Any_Dual_Impl_T<RTCORBA::RTORB::MutexNotFound>::marshal_value (TAO_OutputCDR &)
{
  return 0;
}

ACE_TEMPLATE_SPECIALIZATION
CORBA::Boolean
TAO::Any_Dual_Impl_T<RTCORBA::RTORB::MutexNotFound>::demarshal_value (TAO_InputCDR &)
{
  return 0;
}

// Copying insertion.
void operator<<= (
    CORBA::Any &_tao_any,
    const RTCORBA::RTORB::MutexNotFound &_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<RTCORBA::RTORB::MutexNotFound>::insert_copy (
      _tao_any,
      RTCORBA::RTORB::MutexNotFound::_tao_any_destructor,
      RTCORBA::RTORB::_tc_MutexNotFound,
      _tao_elem
    );
}

// Non-copying insertion.
void operator<<= (
    CORBA::Any &_tao_any,
    RTCORBA::RTORB::MutexNotFound *_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<RTCORBA::RTORB::MutexNotFound>::insert (
      _tao_any,
      RTCORBA::RTORB::MutexNotFound::_tao_any_destructor,
      RTCORBA::RTORB::_tc_MutexNotFound,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
CORBA::Boolean operator>>= (
    const CORBA::Any &_tao_any,
    RTCORBA::RTORB::MutexNotFound *&_tao_elem
  )
{
  return _tao_any >>= const_cast<
      const RTCORBA::RTORB::MutexNotFound *&> (
      _tao_elem
    );
}

// Extraction to const pointer.
CORBA::Boolean operator>>= (
    const CORBA::Any &_tao_any,
    const RTCORBA::RTORB::MutexNotFound *&_tao_elem
  )
{
  return
    TAO::Any_Dual_Impl_T<RTCORBA::RTORB::MutexNotFound>::extract (
        _tao_any,
        RTCORBA::RTORB::MutexNotFound::_tao_any_destructor,
        RTCORBA::RTORB::_tc_MutexNotFound,
        _tao_elem
      );
}

// TAO_IDL - Generated from 
// be\be_visitor_exception/any_op_cs.cpp:50

ACE_TEMPLATE_SPECIALIZATION
CORBA::Boolean
TAO::Any_Dual_Impl_T<RTCORBA::RTORB::InvalidThreadpool>::marshal_value (TAO_OutputCDR &)
{
  return 0;
}

ACE_TEMPLATE_SPECIALIZATION
CORBA::Boolean
TAO::Any_Dual_Impl_T<RTCORBA::RTORB::InvalidThreadpool>::demarshal_value (TAO_InputCDR &)
{
  return 0;
}

// Copying insertion.
void operator<<= (
    CORBA::Any &_tao_any,
    const RTCORBA::RTORB::InvalidThreadpool &_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<RTCORBA::RTORB::InvalidThreadpool>::insert_copy (
      _tao_any,
      RTCORBA::RTORB::InvalidThreadpool::_tao_any_destructor,
      RTCORBA::RTORB::_tc_InvalidThreadpool,
      _tao_elem
    );
}

// Non-copying insertion.
void operator<<= (
    CORBA::Any &_tao_any,
    RTCORBA::RTORB::InvalidThreadpool *_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<RTCORBA::RTORB::InvalidThreadpool>::insert (
      _tao_any,
      RTCORBA::RTORB::InvalidThreadpool::_tao_any_destructor,
      RTCORBA::RTORB::_tc_InvalidThreadpool,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
CORBA::Boolean operator>>= (
    const CORBA::Any &_tao_any,
    RTCORBA::RTORB::InvalidThreadpool *&_tao_elem
  )
{
  return _tao_any >>= const_cast<
      const RTCORBA::RTORB::InvalidThreadpool *&> (
      _tao_elem
    );
}

// Extraction to const pointer.
CORBA::Boolean operator>>= (
    const CORBA::Any &_tao_any,
    const RTCORBA::RTORB::InvalidThreadpool *&_tao_elem
  )
{
  return
    TAO::Any_Dual_Impl_T<RTCORBA::RTORB::InvalidThreadpool>::extract (
        _tao_any,
        RTCORBA::RTORB::InvalidThreadpool::_tao_any_destructor,
        RTCORBA::RTORB::_tc_InvalidThreadpool,
        _tao_elem
      );
}

// TAO_IDL - Generated from
// be\be_visitor_structure/cdr_op_cs.cpp:61

CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const RTCORBA::ThreadpoolLane &_tao_aggregate
  )
{
  return
    (strm << _tao_aggregate.lane_priority) &&
    (strm << _tao_aggregate.static_threads) &&
    (strm << _tao_aggregate.dynamic_threads);
}

CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    RTCORBA::ThreadpoolLane &_tao_aggregate
  )
{
  return
    (strm >> _tao_aggregate.lane_priority) &&
    (strm >> _tao_aggregate.static_threads) &&
    (strm >> _tao_aggregate.dynamic_threads);
}

// TAO_IDL - Generated from
// be\be_visitor_sequence/cdr_op_cs.cpp:96

#if !defined _TAO_CDR_OP_RTCORBA_ThreadpoolLanes_CPP_
#define _TAO_CDR_OP_RTCORBA_ThreadpoolLanes_CPP_

CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const RTCORBA::ThreadpoolLanes &_tao_sequence
  )
{
  const CORBA::ULong _tao_seq_len = _tao_sequence.length ();
  
  if (strm << _tao_seq_len)
    {
      // Encode all elements.
      CORBA::Boolean _tao_marshal_flag = 1;
      
      for (CORBA::ULong i = 0; i < _tao_seq_len && _tao_marshal_flag; ++i)
        {
          _tao_marshal_flag = (strm << _tao_sequence[i]);
        }
      
      return _tao_marshal_flag;
    }
  
  return 0;
}

CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    RTCORBA::ThreadpoolLanes &_tao_sequence
  )
{
  CORBA::ULong _tao_seq_len;
  
  if (strm >> _tao_seq_len)
    {
      // Add a check to the length of the sequence
      // to make sure it does not exceed the length
      // of the stream. (See bug 58.)
      if (_tao_seq_len > strm.length ())
        {
          return 0;
        }
      
      // Set the length of the sequence.
      _tao_sequence.length (_tao_seq_len);
      
      // If length is 0 we return true.
      if (0 >= _tao_seq_len) 
        {
          return 1;
        }
      
      // Retrieve all the elements.
      CORBA::Boolean _tao_marshal_flag = 1;
      
      for (CORBA::ULong i = 0; i < _tao_seq_len && _tao_marshal_flag; ++i)
        {
          _tao_marshal_flag = (strm >> _tao_sequence[i]);
        }
      
      return _tao_marshal_flag;
    
    }
  
  return 0;
}

#endif /* _TAO_CDR_OP_RTCORBA_ThreadpoolLanes_CPP_ */

// TAO_IDL - Generated from
// be\be_visitor_enum/cdr_op_cs.cpp:51

CORBA::Boolean operator<< (TAO_OutputCDR &strm, const RTCORBA::PriorityModel &_tao_enumval)
{
  CORBA::ULong _tao_temp = _tao_enumval;
  return strm << _tao_temp;
}

CORBA::Boolean operator>> (TAO_InputCDR &strm, RTCORBA::PriorityModel &_tao_enumval)
{
  CORBA::ULong _tao_temp = 0;
  CORBA::Boolean _tao_result = strm >> _tao_temp;
  
  if (_tao_result == 1)
    {
      _tao_enumval = static_cast<RTCORBA::PriorityModel> (_tao_temp);
    }
  
  return _tao_result;
}

// TAO_IDL - Generated from
// be\be_visitor_structure/cdr_op_cs.cpp:61

CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const RTCORBA::PriorityBand &_tao_aggregate
  )
{
  return
    (strm << _tao_aggregate.low) &&
    (strm << _tao_aggregate.high);
}

CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    RTCORBA::PriorityBand &_tao_aggregate
  )
{
  return
    (strm >> _tao_aggregate.low) &&
    (strm >> _tao_aggregate.high);
}

// TAO_IDL - Generated from
// be\be_visitor_sequence/cdr_op_cs.cpp:96

#if !defined _TAO_CDR_OP_RTCORBA_PriorityBands_CPP_
#define _TAO_CDR_OP_RTCORBA_PriorityBands_CPP_

CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const RTCORBA::PriorityBands &_tao_sequence
  )
{
  const CORBA::ULong _tao_seq_len = _tao_sequence.length ();
  
  if (strm << _tao_seq_len)
    {
      // Encode all elements.
      CORBA::Boolean _tao_marshal_flag = 1;
      
      for (CORBA::ULong i = 0; i < _tao_seq_len && _tao_marshal_flag; ++i)
        {
          _tao_marshal_flag = (strm << _tao_sequence[i]);
        }
      
      return _tao_marshal_flag;
    }
  
  return 0;
}

CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    RTCORBA::PriorityBands &_tao_sequence
  )
{
  CORBA::ULong _tao_seq_len;
  
  if (strm >> _tao_seq_len)
    {
      // Add a check to the length of the sequence
      // to make sure it does not exceed the length
      // of the stream. (See bug 58.)
      if (_tao_seq_len > strm.length ())
        {
          return 0;
        }
      
      // Set the length of the sequence.
      _tao_sequence.length (_tao_seq_len);
      
      // If length is 0 we return true.
      if (0 >= _tao_seq_len) 
        {
          return 1;
        }
      
      // Retrieve all the elements.
      CORBA::Boolean _tao_marshal_flag = 1;
      
      for (CORBA::ULong i = 0; i < _tao_seq_len && _tao_marshal_flag; ++i)
        {
          _tao_marshal_flag = (strm >> _tao_sequence[i]);
        }
      
      return _tao_marshal_flag;
    
    }
  
  return 0;
}

#endif /* _TAO_CDR_OP_RTCORBA_PriorityBands_CPP_ */

// TAO_IDL - Generated from
// be\be_visitor_root/root.cpp:1629

#if defined (ACE_HAS_EXPLICIT_TEMPLATE_INSTANTIATION)

  template class
    TAO_Fixed_Var_T<
        RTCORBA::ThreadpoolLane
      >;

  template class
    TAO_Var_Base_T<
        RTCORBA::ThreadpoolLane
      >;

  template class
    TAO::Any_Dual_Impl_T<
        RTCORBA::ThreadpoolLane
      >;

  template class
    TAO_FixedSeq_Var_T<
        RTCORBA::ThreadpoolLanes,
        RTCORBA::ThreadpoolLane
      >;

  template class
    TAO_Seq_Var_Base_T<
        RTCORBA::ThreadpoolLanes,
        RTCORBA::ThreadpoolLane
      >;

  template class
    TAO_Seq_Out_T<
        RTCORBA::ThreadpoolLanes,
        RTCORBA::ThreadpoolLanes_var,
        RTCORBA::ThreadpoolLane
      >;

#if !defined (_RTCORBA_THREADPOOLLANE__EXPLICIT_CS_)
#define _RTCORBA_THREADPOOLLANE__EXPLICIT_CS_

  template class
    TAO_Unbounded_Sequence<
        RTCORBA::ThreadpoolLane
      >;

#endif /* end #if !defined */

  template class
    TAO::Any_Dual_Impl_T<
        RTCORBA::ThreadpoolLanes
      >;

  template class
    TAO::Any_Basic_Impl_T<
        RTCORBA::PriorityModel
      >;

  template class
    TAO::Objref_Traits<
        RTCORBA::PriorityModelPolicy
      >;

  template class
    TAO_Objref_Var_T<
        RTCORBA::PriorityModelPolicy
      >;
  
  template class
    TAO_Objref_Out_T<
        RTCORBA::PriorityModelPolicy
      >;

  template class
    TAO::Any_Impl_T<
        RTCORBA::PriorityModelPolicy
      >;

  template class
    TAO::Objref_Traits<
        RTCORBA::ThreadpoolPolicy
      >;

  template class
    TAO_Objref_Var_T<
        RTCORBA::ThreadpoolPolicy
      >;
  
  template class
    TAO_Objref_Out_T<
        RTCORBA::ThreadpoolPolicy
      >;

  template class
    TAO::Any_Impl_T<
        RTCORBA::ThreadpoolPolicy
      >;

  template class
    TAO::Objref_Traits<
        RTCORBA::ProtocolProperties
      >;

  template class
    TAO_Objref_Var_T<
        RTCORBA::ProtocolProperties
      >;
  
  template class
    TAO_Objref_Out_T<
        RTCORBA::ProtocolProperties
      >;

  template class
    TAO::Any_Impl_T<
        RTCORBA::ProtocolProperties
      >;

  template class
    TAO_Var_Var_T<
        RTCORBA::Protocol
      >;

  template class
    TAO_Var_Base_T<
        RTCORBA::Protocol
      >;

  template class
    TAO_Out_T<
        RTCORBA::Protocol,
        RTCORBA::Protocol_var
      >;

  template class
    TAO::Any_Dual_Impl_T<
        RTCORBA::Protocol
      >;

  template class
    TAO_VarSeq_Var_T<
        RTCORBA::ProtocolList,
        RTCORBA::Protocol
      >;

  template class
    TAO_Seq_Var_Base_T<
        RTCORBA::ProtocolList,
        RTCORBA::Protocol
      >;

  template class
    TAO_Seq_Out_T<
        RTCORBA::ProtocolList,
        RTCORBA::ProtocolList_var,
        RTCORBA::Protocol
      >;

#if !defined (_RTCORBA_PROTOCOL__EXPLICIT_CS_)
#define _RTCORBA_PROTOCOL__EXPLICIT_CS_

  template class
    TAO_Unbounded_Sequence<
        RTCORBA::Protocol
      >;

#endif /* end #if !defined */

  template class
    TAO::Any_Dual_Impl_T<
        RTCORBA::ProtocolList
      >;

  template class
    TAO::Objref_Traits<
        RTCORBA::ServerProtocolPolicy
      >;

  template class
    TAO_Objref_Var_T<
        RTCORBA::ServerProtocolPolicy
      >;
  
  template class
    TAO_Objref_Out_T<
        RTCORBA::ServerProtocolPolicy
      >;

  template class
    TAO::Any_Impl_T<
        RTCORBA::ServerProtocolPolicy
      >;

  template class
    TAO::Objref_Traits<
        RTCORBA::ClientProtocolPolicy
      >;

  template class
    TAO_Objref_Var_T<
        RTCORBA::ClientProtocolPolicy
      >;
  
  template class
    TAO_Objref_Out_T<
        RTCORBA::ClientProtocolPolicy
      >;

  template class
    TAO::Any_Impl_T<
        RTCORBA::ClientProtocolPolicy
      >;

  template class
    TAO::Objref_Traits<
        RTCORBA::PrivateConnectionPolicy
      >;

  template class
    TAO_Objref_Var_T<
        RTCORBA::PrivateConnectionPolicy
      >;
  
  template class
    TAO_Objref_Out_T<
        RTCORBA::PrivateConnectionPolicy
      >;

  template class
    TAO::Any_Impl_T<
        RTCORBA::PrivateConnectionPolicy
      >;

  template class
    TAO::Objref_Traits<
        RTCORBA::TCPProtocolProperties
      >;

  template class
    TAO_Objref_Var_T<
        RTCORBA::TCPProtocolProperties
      >;
  
  template class
    TAO_Objref_Out_T<
        RTCORBA::TCPProtocolProperties
      >;

  template class
    TAO::Any_Impl_T<
        RTCORBA::TCPProtocolProperties
      >;

  template class
    TAO::Objref_Traits<
        RTCORBA::GIOPProtocolProperties
      >;

  template class
    TAO_Objref_Var_T<
        RTCORBA::GIOPProtocolProperties
      >;
  
  template class
    TAO_Objref_Out_T<
        RTCORBA::GIOPProtocolProperties
      >;

  template class
    TAO::Any_Impl_T<
        RTCORBA::GIOPProtocolProperties
      >;

  template class
    TAO::Objref_Traits<
        RTCORBA::UnixDomainProtocolProperties
      >;

  template class
    TAO_Objref_Var_T<
        RTCORBA::UnixDomainProtocolProperties
      >;
  
  template class
    TAO_Objref_Out_T<
        RTCORBA::UnixDomainProtocolProperties
      >;

  template class
    TAO::Any_Impl_T<
        RTCORBA::UnixDomainProtocolProperties
      >;

  template class
    TAO::Objref_Traits<
        RTCORBA::SharedMemoryProtocolProperties
      >;

  template class
    TAO_Objref_Var_T<
        RTCORBA::SharedMemoryProtocolProperties
      >;
  
  template class
    TAO_Objref_Out_T<
        RTCORBA::SharedMemoryProtocolProperties
      >;

  template class
    TAO::Any_Impl_T<
        RTCORBA::SharedMemoryProtocolProperties
      >;

  template class
    TAO_Fixed_Var_T<
        RTCORBA::PriorityBand
      >;

  template class
    TAO_Var_Base_T<
        RTCORBA::PriorityBand
      >;

  template class
    TAO::Any_Dual_Impl_T<
        RTCORBA::PriorityBand
      >;

  template class
    TAO_FixedSeq_Var_T<
        RTCORBA::PriorityBands,
        RTCORBA::PriorityBand
      >;

  template class
    TAO_Seq_Var_Base_T<
        RTCORBA::PriorityBands,
        RTCORBA::PriorityBand
      >;

  template class
    TAO_Seq_Out_T<
        RTCORBA::PriorityBands,
        RTCORBA::PriorityBands_var,
        RTCORBA::PriorityBand
      >;

#if !defined (_RTCORBA_PRIORITYBAND__EXPLICIT_CS_)
#define _RTCORBA_PRIORITYBAND__EXPLICIT_CS_

  template class
    TAO_Unbounded_Sequence<
        RTCORBA::PriorityBand
      >;

#endif /* end #if !defined */

  template class
    TAO::Any_Dual_Impl_T<
        RTCORBA::PriorityBands
      >;

  template class
    TAO::Objref_Traits<
        RTCORBA::PriorityBandedConnectionPolicy
      >;

  template class
    TAO_Objref_Var_T<
        RTCORBA::PriorityBandedConnectionPolicy
      >;
  
  template class
    TAO_Objref_Out_T<
        RTCORBA::PriorityBandedConnectionPolicy
      >;

  template class
    TAO::Any_Impl_T<
        RTCORBA::PriorityBandedConnectionPolicy
      >;

  template class
    TAO::Objref_Traits<
        RTCORBA::Current
      >;

  template class
    TAO_Objref_Var_T<
        RTCORBA::Current
      >;
  
  template class
    TAO_Objref_Out_T<
        RTCORBA::Current
      >;

  template class
    TAO::Any_Impl_T<
        RTCORBA::Current
      >;

  template class
    TAO::Objref_Traits<
        RTCORBA::Mutex
      >;

  template class
    TAO_Objref_Var_T<
        RTCORBA::Mutex
      >;
  
  template class
    TAO_Objref_Out_T<
        RTCORBA::Mutex
      >;

  template class
    TAO::Any_Impl_T<
        RTCORBA::Mutex
      >;

  template class
    TAO::Any_Dual_Impl_T<
        RTCORBA::RTORB::MutexNotFound
      >;

  template class
    TAO::Any_Dual_Impl_T<
        RTCORBA::RTORB::InvalidThreadpool
      >;

  template class
    TAO::Objref_Traits<
        RTCORBA::RTORB
      >;

  template class
    TAO_Objref_Var_T<
        RTCORBA::RTORB
      >;
  
  template class
    TAO_Objref_Out_T<
        RTCORBA::RTORB
      >;

  template class
    TAO::Any_Impl_T<
        RTCORBA::RTORB
      >;

#elif defined (ACE_HAS_TEMPLATE_INSTANTIATION_PRAGMA)

# pragma instantiate \
    TAO_Fixed_Var_T< \
        RTCORBA::ThreadpoolLane \
      >

# pragma instantiate \
    TAO_Var_Base_T< \
        RTCORBA::ThreadpoolLane \
      >

# pragma instantiate \
    TAO::Any_Dual_Impl_T< \
        RTCORBA::ThreadpoolLane \
      >

# pragma instantiate \
    TAO_FixedSeq_Var_T< \
        RTCORBA::ThreadpoolLanes, \
        RTCORBA::ThreadpoolLane \
      >

# pragma instantiate \
    TAO_Seq_Var_Base_T< \
        RTCORBA::ThreadpoolLanes, \
        RTCORBA::ThreadpoolLane \
      >

# pragma instantiate \
    TAO_Seq_Out_T< \
        RTCORBA::ThreadpoolLanes, \
        RTCORBA::ThreadpoolLanes_var, \
        RTCORBA::ThreadpoolLane \
      >

#if !defined (_RTCORBA_THREADPOOLLANE__EXPLICIT_CS_)
#define _RTCORBA_THREADPOOLLANE__EXPLICIT_CS_

# pragma instantiate \
    TAO_Unbounded_Sequence< \
        RTCORBA::ThreadpoolLane \
      >

#endif /* end #if !defined */

# pragma instantiate \
    TAO::Any_Dual_Impl_T< \
        RTCORBA::ThreadpoolLanes \
      >

# pragma instantiate \
    TAO::Any_Basic_Impl_T< \
        RTCORBA::PriorityModel \
      >

# pragma instantiate \
    TAO::Objref_Traits< \
        RTCORBA::PriorityModelPolicy \
      >

# pragma instantiate \
    TAO_Objref_Var_T< \
        RTCORBA::PriorityModelPolicy
      >
  
# pragma instantiate \
    TAO_Objref_Out_T< \
        RTCORBA::PriorityModelPolicy
      >

# pragma instantiate \
    TAO::Any_Impl_T< \
        RTCORBA::PriorityModelPolicy \
      >

# pragma instantiate \
    TAO::Objref_Traits< \
        RTCORBA::ThreadpoolPolicy \
      >

# pragma instantiate \
    TAO_Objref_Var_T< \
        RTCORBA::ThreadpoolPolicy
      >
  
# pragma instantiate \
    TAO_Objref_Out_T< \
        RTCORBA::ThreadpoolPolicy
      >

# pragma instantiate \
    TAO::Any_Impl_T< \
        RTCORBA::ThreadpoolPolicy \
      >

# pragma instantiate \
    TAO::Objref_Traits< \
        RTCORBA::ProtocolProperties \
      >

# pragma instantiate \
    TAO_Objref_Var_T< \
        RTCORBA::ProtocolProperties
      >
  
# pragma instantiate \
    TAO_Objref_Out_T< \
        RTCORBA::ProtocolProperties
      >

# pragma instantiate \
    TAO::Any_Impl_T< \
        RTCORBA::ProtocolProperties \
      >

# pragma instantiate \
    TAO_Var_Var_T< \
        RTCORBA::Protocol \
      >

# pragma instantiate \
    TAO_Var_Base_T< \
        RTCORBA::Protocol \
      >

# pragma instantiate \
    TAO_Out_T< \
        RTCORBA::Protocol, \
        RTCORBA::Protocol_var \
      >

# pragma instantiate \
    TAO::Any_Dual_Impl_T< \
        RTCORBA::Protocol \
      >

# pragma instantiate \
    TAO_VarSeq_Var_T< \
        RTCORBA::ProtocolList, \
        RTCORBA::Protocol \
      >

# pragma instantiate \
    TAO_Seq_Var_Base_T< \
        RTCORBA::ProtocolList, \
        RTCORBA::Protocol \
      >

# pragma instantiate \
    TAO_Seq_Out_T< \
        RTCORBA::ProtocolList, \
        RTCORBA::ProtocolList_var, \
        RTCORBA::Protocol \
      >

#if !defined (_RTCORBA_PROTOCOL__EXPLICIT_CS_)
#define _RTCORBA_PROTOCOL__EXPLICIT_CS_

# pragma instantiate \
    TAO_Unbounded_Sequence< \
        RTCORBA::Protocol \
      >

#endif /* end #if !defined */

# pragma instantiate \
    TAO::Any_Dual_Impl_T< \
        RTCORBA::ProtocolList \
      >

# pragma instantiate \
    TAO::Objref_Traits< \
        RTCORBA::ServerProtocolPolicy \
      >

# pragma instantiate \
    TAO_Objref_Var_T< \
        RTCORBA::ServerProtocolPolicy
      >
  
# pragma instantiate \
    TAO_Objref_Out_T< \
        RTCORBA::ServerProtocolPolicy
      >

# pragma instantiate \
    TAO::Any_Impl_T< \
        RTCORBA::ServerProtocolPolicy \
      >

# pragma instantiate \
    TAO::Objref_Traits< \
        RTCORBA::ClientProtocolPolicy \
      >

# pragma instantiate \
    TAO_Objref_Var_T< \
        RTCORBA::ClientProtocolPolicy
      >
  
# pragma instantiate \
    TAO_Objref_Out_T< \
        RTCORBA::ClientProtocolPolicy
      >

# pragma instantiate \
    TAO::Any_Impl_T< \
        RTCORBA::ClientProtocolPolicy \
      >

# pragma instantiate \
    TAO::Objref_Traits< \
        RTCORBA::PrivateConnectionPolicy \
      >

# pragma instantiate \
    TAO_Objref_Var_T< \
        RTCORBA::PrivateConnectionPolicy
      >
  
# pragma instantiate \
    TAO_Objref_Out_T< \
        RTCORBA::PrivateConnectionPolicy
      >

# pragma instantiate \
    TAO::Any_Impl_T< \
        RTCORBA::PrivateConnectionPolicy \
      >

# pragma instantiate \
    TAO::Objref_Traits< \
        RTCORBA::TCPProtocolProperties \
      >

# pragma instantiate \
    TAO_Objref_Var_T< \
        RTCORBA::TCPProtocolProperties
      >
  
# pragma instantiate \
    TAO_Objref_Out_T< \
        RTCORBA::TCPProtocolProperties
      >

# pragma instantiate \
    TAO::Any_Impl_T< \
        RTCORBA::TCPProtocolProperties \
      >

# pragma instantiate \
    TAO::Objref_Traits< \
        RTCORBA::GIOPProtocolProperties \
      >

# pragma instantiate \
    TAO_Objref_Var_T< \
        RTCORBA::GIOPProtocolProperties
      >
  
# pragma instantiate \
    TAO_Objref_Out_T< \
        RTCORBA::GIOPProtocolProperties
      >

# pragma instantiate \
    TAO::Any_Impl_T< \
        RTCORBA::GIOPProtocolProperties \
      >

# pragma instantiate \
    TAO::Objref_Traits< \
        RTCORBA::UnixDomainProtocolProperties \
      >

# pragma instantiate \
    TAO_Objref_Var_T< \
        RTCORBA::UnixDomainProtocolProperties
      >
  
# pragma instantiate \
    TAO_Objref_Out_T< \
        RTCORBA::UnixDomainProtocolProperties
      >

# pragma instantiate \
    TAO::Any_Impl_T< \
        RTCORBA::UnixDomainProtocolProperties \
      >

# pragma instantiate \
    TAO::Objref_Traits< \
        RTCORBA::SharedMemoryProtocolProperties \
      >

# pragma instantiate \
    TAO_Objref_Var_T< \
        RTCORBA::SharedMemoryProtocolProperties
      >
  
# pragma instantiate \
    TAO_Objref_Out_T< \
        RTCORBA::SharedMemoryProtocolProperties
      >

# pragma instantiate \
    TAO::Any_Impl_T< \
        RTCORBA::SharedMemoryProtocolProperties \
      >

# pragma instantiate \
    TAO_Fixed_Var_T< \
        RTCORBA::PriorityBand \
      >

# pragma instantiate \
    TAO_Var_Base_T< \
        RTCORBA::PriorityBand \
      >

# pragma instantiate \
    TAO::Any_Dual_Impl_T< \
        RTCORBA::PriorityBand \
      >

# pragma instantiate \
    TAO_FixedSeq_Var_T< \
        RTCORBA::PriorityBands, \
        RTCORBA::PriorityBand \
      >

# pragma instantiate \
    TAO_Seq_Var_Base_T< \
        RTCORBA::PriorityBands, \
        RTCORBA::PriorityBand \
      >

# pragma instantiate \
    TAO_Seq_Out_T< \
        RTCORBA::PriorityBands, \
        RTCORBA::PriorityBands_var, \
        RTCORBA::PriorityBand \
      >

#if !defined (_RTCORBA_PRIORITYBAND__EXPLICIT_CS_)
#define _RTCORBA_PRIORITYBAND__EXPLICIT_CS_

# pragma instantiate \
    TAO_Unbounded_Sequence< \
        RTCORBA::PriorityBand \
      >

#endif /* end #if !defined */

# pragma instantiate \
    TAO::Any_Dual_Impl_T< \
        RTCORBA::PriorityBands \
      >

# pragma instantiate \
    TAO::Objref_Traits< \
        RTCORBA::PriorityBandedConnectionPolicy \
      >

# pragma instantiate \
    TAO_Objref_Var_T< \
        RTCORBA::PriorityBandedConnectionPolicy
      >
  
# pragma instantiate \
    TAO_Objref_Out_T< \
        RTCORBA::PriorityBandedConnectionPolicy
      >

# pragma instantiate \
    TAO::Any_Impl_T< \
        RTCORBA::PriorityBandedConnectionPolicy \
      >

# pragma instantiate \
    TAO::Objref_Traits< \
        RTCORBA::Current \
      >

# pragma instantiate \
    TAO_Objref_Var_T< \
        RTCORBA::Current
      >
  
# pragma instantiate \
    TAO_Objref_Out_T< \
        RTCORBA::Current
      >

# pragma instantiate \
    TAO::Any_Impl_T< \
        RTCORBA::Current \
      >

# pragma instantiate \
    TAO::Objref_Traits< \
        RTCORBA::Mutex \
      >

# pragma instantiate \
    TAO_Objref_Var_T< \
        RTCORBA::Mutex
      >
  
# pragma instantiate \
    TAO_Objref_Out_T< \
        RTCORBA::Mutex
      >

# pragma instantiate \
    TAO::Any_Impl_T< \
        RTCORBA::Mutex \
      >

# pragma instantiate \
    TAO::Any_Dual_Impl_T< \
        RTCORBA::RTORB::MutexNotFound \
      >

# pragma instantiate \
    TAO::Any_Dual_Impl_T< \
        RTCORBA::RTORB::InvalidThreadpool \
      >

# pragma instantiate \
    TAO::Objref_Traits< \
        RTCORBA::RTORB \
      >

# pragma instantiate \
    TAO_Objref_Var_T< \
        RTCORBA::RTORB
      >
  
# pragma instantiate \
    TAO_Objref_Out_T< \
        RTCORBA::RTORB
      >

# pragma instantiate \
    TAO::Any_Impl_T< \
        RTCORBA::RTORB \
      >

#endif /* !ACE_HAS_EXPLICIT_TEMPLATE_INSTANTIATION */ 
