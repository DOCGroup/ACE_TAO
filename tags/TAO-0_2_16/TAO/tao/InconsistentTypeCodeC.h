/* -*- C++ -*- */
// $Id$
// ============================================================================
//
// = LIBRARY
//    TAO
//
// = FILENAME
//    InconsistentTypeCode.h
//
// = AUTHOR
//
// ******  Code generated by the The ACE ORB (TAO) IDL Compiler *******
// TAO ORB and the TAO IDL Compiler have been developed by Washington
// University Computer Science's Distributed Object Computing Group.
//
// Information on TAO is available at
//                 http://www.cs.wustl.edu/~schmidt/TAO.html
//
//
// Modified by Jeff Parsons <jp4@cs.wustl.edu>
//
// ============================================================================

#if !defined (_TAO_IDL_INCONSISTENTTYPECODEC_H_)
#define _TAO_IDL_INCONSISTENTTYPECODEC_H_

#include "tao/corba.h"

#if defined (TAO_EXPORT_MACRO)
#undef TAO_EXPORT_MACRO
#endif
#define TAO_EXPORT_MACRO 
#if defined(_MSC_VER)
#pragma warning(disable:4250)
#endif /* _MSC_VER */

#if !defined (_CORBA_ORB_INCONSISTENTTYPECODE_CH_)
#define _CORBA_ORB_INCONSISTENTTYPECODE_CH_

  class TAO_Export CORBA_ORB_InconsistentTypeCode : public CORBA::UserException
    {
    public:
      CORBA_ORB_InconsistentTypeCode (void); // default ctor
      CORBA_ORB_InconsistentTypeCode (const CORBA_ORB_InconsistentTypeCode &); // copy ctor
      ~CORBA_ORB_InconsistentTypeCode (void); // dtor

      CORBA_ORB_InconsistentTypeCode &operator= (const CORBA_ORB_InconsistentTypeCode &);

      virtual void _raise (void);

      static CORBA_ORB_InconsistentTypeCode *_narrow (CORBA::Exception *);


      // = TAO extension
      static CORBA::Exception *_alloc (void);

    }; // exception CORBA::ORB::InconsistentTypeCode


#endif /* end #if !defined */

#if defined(_MSC_VER)
#pragma warning(default:4250)
#endif /* _MSC_VER */

#endif /* if !defined */
