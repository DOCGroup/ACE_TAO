/* $Id$
 * This code was generated by the XML Schema Compiler.
 *
 * Changes made to this code will most likely be overwritten
 * when the handlers are recompiled.
 *
 * If you find errors or feel that there are bugfixes to be made,
 * please contact the current XSC maintainer:
 *             Will Otte <wotte@dre.vanderbilt.edu>
 */

// Fix for Borland compilers, which seem to have a broken
// <string> include.
#ifdef __BORLANDC__
# include <string.h>
#endif

#ifndef BASIC_DEPLOYMENT_DATA_HPP
#define BASIC_DEPLOYMENT_DATA_HPP

#include "XSC_XML_Handlers_Export.h"
// Forward declarations.
//
namespace CIAO
{
  namespace Config_Handlers
  {
    class IdRef;
    class TCKind;
    class DataType;
    class DataValue;
    class AliasType;
    class EnumType;
    class StructType;
    class StructMemberType;
    class ValueType;
    class ValueMemberType;
    class NamedValue;
    class SequenceType;
    class Any;
    class Property;
    class SatisfierPropertyKind;
    class SatisfierProperty;
    class Resource;
    class Requirement;
    class ResourceDeploymentDescription;
    class ArtifactDeploymentDescription;
    class MonolithicDeploymentDescription;
    class ResourceUsageKind;
    class InstanceResourceDeploymentDescription;
    class InstanceDeploymentDescription;
    class CCMComponentPortKind;
    class ComponentPortDescription;
    class ComponentPropertyDescription;
    class ComponentExternalPortEndpoint;
    class PlanSubcomponentPortEndpoint;
    class ExternalReferenceEndpoint;
    class ConnectionResourceDeploymentDescription;
    class PlanConnectionDescription;
    class ImplementationDependency;
    class Capability;
    class ImplementationRequirement;
    class SubcomponentPortEndpoint;
    class AssemblyConnectionDescription;
    class PlanLocalityKind;
    class PlanLocality;
  }
}

#include <memory>
#include <string>
#include <list>
#include "XMLSchema/Types.hpp"
#include "XMLSchema/id_map.hpp"
#include "ace/Refcounted_Auto_Ptr.h"
#include "ace/Null_Mutex.h"
#include "ace/TSS_T.h"
#include "ace/ace_wchar.h"
#include "ace/Singleton.h"

#include "XMI.hpp"

namespace CIAO
{
  namespace Config_Handlers
  {
    class XSC_XML_Handlers_Export IdRef : public ::XSCRT::Type
    {
      typedef ::XSCRT::Type Base;

      public:
      typedef ACE_Refcounted_Auto_Ptr < IdRef, ACE_Null_Mutex > _ptr;

      // href
      //
      public:
      bool href_p () const;
      ::XMLSchema::string< ACE_TCHAR > const& href () const;
      ::XMLSchema::string< ACE_TCHAR >& href ();
      void href (::XMLSchema::string< ACE_TCHAR > const& );

      protected:
      ::std::auto_ptr< ::XMLSchema::string< ACE_TCHAR > > href_;

      // idref
      //
      public:
      bool idref_p () const;
      ::XMLSchema::IDREF< ACE_TCHAR > const& idref () const;
      ::XMLSchema::IDREF< ACE_TCHAR >& idref ();
      void idref (::XMLSchema::IDREF< ACE_TCHAR > const& );
      ::XSCRT::Type* idref_ptr ();


      protected:
      ::std::auto_ptr< ::XMLSchema::IDREF< ACE_TCHAR > > idref_;

      public:
      IdRef ();

      IdRef (::XSCRT::XML::Element< ACE_TCHAR > const&);
      IdRef (IdRef const& s);

      IdRef&
      operator= (IdRef const& s);

      private:
      char regulator__;
    };


    class XSC_XML_Handlers_Export TCKind : public ::XSCRT::Type
    {
      public:
      TCKind (::XSCRT::XML::Element< ACE_TCHAR > const&);
      TCKind (::XSCRT::XML::Attribute< ACE_TCHAR > const&);

      static TCKind const tk_null;
      static TCKind const tk_void;
      static TCKind const tk_short;
      static TCKind const tk_long;
      static TCKind const tk_ushort;
      static TCKind const tk_ulong;
      static TCKind const tk_float;
      static TCKind const tk_double;
      static TCKind const tk_boolean;
      static TCKind const tk_char;
      static TCKind const tk_octet;
      static TCKind const tk_any;
      static TCKind const tk_TypeCode;
      static TCKind const tk_Principal;
      static TCKind const tk_objref;
      static TCKind const tk_struct;
      static TCKind const tk_union;
      static TCKind const tk_enum;
      static TCKind const tk_string;
      static TCKind const tk_sequence;
      static TCKind const tk_array;
      static TCKind const tk_alias;
      static TCKind const tk_except;
      static TCKind const tk_longlong;
      static TCKind const tk_ulonglong;
      static TCKind const tk_longdouble;
      static TCKind const tk_wchar;
      static TCKind const tk_wstring;
      static TCKind const tk_fixed;
      static TCKind const tk_value;
      static TCKind const tk_value_box;
      static TCKind const tk_native;
      static TCKind const tk_abstract_interface;
      static TCKind const tk_local_interface;
      static TCKind const tk_component;
      static TCKind const tk_home;
      static TCKind const tk_event;

      enum Value
      {
        tk_null_l, tk_void_l, tk_short_l, tk_long_l, tk_ushort_l, tk_ulong_l, tk_float_l, tk_double_l, tk_boolean_l, tk_char_l, tk_octet_l, tk_any_l, tk_TypeCode_l, tk_Principal_l, tk_objref_l, tk_struct_l, tk_union_l, tk_enum_l, tk_string_l, tk_sequence_l, tk_array_l, tk_alias_l, tk_except_l, tk_longlong_l, tk_ulonglong_l, tk_longdouble_l, tk_wchar_l, tk_wstring_l, tk_fixed_l, tk_value_l, tk_value_box_l, tk_native_l, tk_abstract_interface_l, tk_local_interface_l, tk_component_l, tk_home_l, tk_event_l
      };


      Value
      integral () const;

      friend bool XSC_XML_Handlers_Export
      operator== (TCKind const& a, TCKind const& b);

      friend bool XSC_XML_Handlers_Export
      operator!= (TCKind const& a, TCKind const& b);

      private:
      TCKind (Value v);

      Value v_;
    };

    bool XSC_XML_Handlers_Export operator== (TCKind const &a, TCKind const &b);

    bool XSC_XML_Handlers_Export operator!= (TCKind const &a, TCKind const &b);


    class XSC_XML_Handlers_Export DataType : public ::XSCRT::Type
    {
      typedef ::XSCRT::Type Base;

      public:
      typedef ACE_Refcounted_Auto_Ptr < DataType, ACE_Null_Mutex > _ptr;

      // kind
      //
      public:
      ::CIAO::Config_Handlers::TCKind const& kind () const;
      void kind (::CIAO::Config_Handlers::TCKind const& );

      protected:
      ::std::auto_ptr< ::CIAO::Config_Handlers::TCKind > kind_;

      // enum
      //
      public:
      bool enum_p () const;
      ::CIAO::Config_Handlers::EnumType const& enum_ () const;
      void enum_ (::CIAO::Config_Handlers::EnumType const& );

      protected:
      ::std::auto_ptr< ::CIAO::Config_Handlers::EnumType > enum__;

      // struct
      //
      public:
      bool struct_p () const;
      ::CIAO::Config_Handlers::StructType const& struct_ () const;
      void struct_ (::CIAO::Config_Handlers::StructType const& );

      protected:
      ::std::auto_ptr< ::CIAO::Config_Handlers::StructType > struct__;

      // value
      //
      public:
      bool value_p () const;
      ::CIAO::Config_Handlers::ValueType const& value () const;
      void value (::CIAO::Config_Handlers::ValueType const& );

      protected:
      ::std::auto_ptr< ::CIAO::Config_Handlers::ValueType > value_;

      // sequence
      //
      public:
      bool sequence_p () const;
      ::CIAO::Config_Handlers::SequenceType const& sequence () const;
      void sequence (::CIAO::Config_Handlers::SequenceType const& );

      protected:
      ::std::auto_ptr< ::CIAO::Config_Handlers::SequenceType > sequence_;

      // alias
      //
      public:
      bool alias_p () const;
      ::CIAO::Config_Handlers::AliasType const& alias () const;
      void alias (::CIAO::Config_Handlers::AliasType const& );

      protected:
      ::std::auto_ptr< ::CIAO::Config_Handlers::AliasType > alias_;

      // id
      //
      public:
      bool id_p () const;
      ::XMLSchema::ID< ACE_TCHAR > const& id () const;
      ::XMLSchema::ID< ACE_TCHAR >& id ();
      void id (::XMLSchema::ID< ACE_TCHAR > const& );

      protected:
      ::std::auto_ptr< ::XMLSchema::ID< ACE_TCHAR > > id_;

      public:
      DataType (::CIAO::Config_Handlers::TCKind const& kind__);

      DataType (::XSCRT::XML::Element< ACE_TCHAR > const&);
      DataType (DataType const& s);

      DataType&
      operator= (DataType const& s);

      private:
      char regulator__;
    };


    class XSC_XML_Handlers_Export DataValue : public ::XSCRT::Type
    {
      typedef ::XSCRT::Type Base;

      public:
      typedef ACE_Refcounted_Auto_Ptr < DataValue, ACE_Null_Mutex > _ptr;

      // short
      //
      public:
      typedef ::std::list< ACE_Refcounted_Auto_Ptr < ::XMLSchema::short_, ACE_Null_Mutex > >::iterator short_iterator;
      typedef ::std::list< ACE_Refcounted_Auto_Ptr < ::XMLSchema::short_, ACE_Null_Mutex > >::const_iterator short_const_iterator;
      short_iterator begin_short ();
      short_iterator end_short ();
      short_const_iterator begin_short () const;
      short_const_iterator end_short () const;
      void add_short ( ACE_Refcounted_Auto_Ptr < ::XMLSchema::short_, ACE_Null_Mutex > const& );
      XSCRT::Type* short_ptr ( std::basic_string<ACE_TCHAR> idref );
      size_t count_short (void) const;

      protected:
      ::std::list< ACE_Refcounted_Auto_Ptr < ::XMLSchema::short_, ACE_Null_Mutex > > short__;

      // long
      //
      public:
      typedef ::std::list< ACE_Refcounted_Auto_Ptr < ::XMLSchema::int_, ACE_Null_Mutex > >::iterator long_iterator;
      typedef ::std::list< ACE_Refcounted_Auto_Ptr < ::XMLSchema::int_, ACE_Null_Mutex > >::const_iterator long_const_iterator;
      long_iterator begin_long ();
      long_iterator end_long ();
      long_const_iterator begin_long () const;
      long_const_iterator end_long () const;
      void add_long ( ACE_Refcounted_Auto_Ptr < ::XMLSchema::int_, ACE_Null_Mutex > const& );
      XSCRT::Type* long_ptr ( std::basic_string<ACE_TCHAR> idref );
      size_t count_long (void) const;

      protected:
      ::std::list< ACE_Refcounted_Auto_Ptr < ::XMLSchema::int_, ACE_Null_Mutex > > long__;

      // ushort
      //
      public:
      typedef ::std::list< ACE_Refcounted_Auto_Ptr < ::XMLSchema::unsignedShort, ACE_Null_Mutex > >::iterator ushort_iterator;
      typedef ::std::list< ACE_Refcounted_Auto_Ptr < ::XMLSchema::unsignedShort, ACE_Null_Mutex > >::const_iterator ushort_const_iterator;
      ushort_iterator begin_ushort ();
      ushort_iterator end_ushort ();
      ushort_const_iterator begin_ushort () const;
      ushort_const_iterator end_ushort () const;
      void add_ushort ( ACE_Refcounted_Auto_Ptr < ::XMLSchema::unsignedShort, ACE_Null_Mutex > const& );
      XSCRT::Type* ushort_ptr ( std::basic_string<ACE_TCHAR> idref );
      size_t count_ushort (void) const;

      protected:
      ::std::list< ACE_Refcounted_Auto_Ptr < ::XMLSchema::unsignedShort, ACE_Null_Mutex > > ushort_;

      // ulong
      //
      public:
      typedef ::std::list< ACE_Refcounted_Auto_Ptr < ::XMLSchema::unsignedInt, ACE_Null_Mutex > >::iterator ulong_iterator;
      typedef ::std::list< ACE_Refcounted_Auto_Ptr < ::XMLSchema::unsignedInt, ACE_Null_Mutex > >::const_iterator ulong_const_iterator;
      ulong_iterator begin_ulong ();
      ulong_iterator end_ulong ();
      ulong_const_iterator begin_ulong () const;
      ulong_const_iterator end_ulong () const;
      void add_ulong ( ACE_Refcounted_Auto_Ptr < ::XMLSchema::unsignedInt, ACE_Null_Mutex > const& );
      XSCRT::Type* ulong_ptr ( std::basic_string<ACE_TCHAR> idref );
      size_t count_ulong (void) const;

      protected:
      ::std::list< ACE_Refcounted_Auto_Ptr < ::XMLSchema::unsignedInt, ACE_Null_Mutex > > ulong_;

      // float
      //
      public:
      typedef ::std::list< ACE_Refcounted_Auto_Ptr < ::XMLSchema::float_, ACE_Null_Mutex > >::iterator float_iterator;
      typedef ::std::list< ACE_Refcounted_Auto_Ptr < ::XMLSchema::float_, ACE_Null_Mutex > >::const_iterator float_const_iterator;
      float_iterator begin_float ();
      float_iterator end_float ();
      float_const_iterator begin_float () const;
      float_const_iterator end_float () const;
      void add_float ( ACE_Refcounted_Auto_Ptr < ::XMLSchema::float_, ACE_Null_Mutex > const& );
      XSCRT::Type* float_ptr ( std::basic_string<ACE_TCHAR> idref );
      size_t count_float (void) const;

      protected:
      ::std::list< ACE_Refcounted_Auto_Ptr < ::XMLSchema::float_, ACE_Null_Mutex > > float__;

      // double
      //
      public:
      typedef ::std::list< ACE_Refcounted_Auto_Ptr < ::XMLSchema::double_, ACE_Null_Mutex > >::iterator double_iterator;
      typedef ::std::list< ACE_Refcounted_Auto_Ptr < ::XMLSchema::double_, ACE_Null_Mutex > >::const_iterator double_const_iterator;
      double_iterator begin_double ();
      double_iterator end_double ();
      double_const_iterator begin_double () const;
      double_const_iterator end_double () const;
      void add_double ( ACE_Refcounted_Auto_Ptr < ::XMLSchema::double_, ACE_Null_Mutex > const& );
      XSCRT::Type* double_ptr ( std::basic_string<ACE_TCHAR> idref );
      size_t count_double (void) const;

      protected:
      ::std::list< ACE_Refcounted_Auto_Ptr < ::XMLSchema::double_, ACE_Null_Mutex > > double__;

      // boolean
      //
      public:
      typedef ::std::list< ACE_Refcounted_Auto_Ptr < ::XMLSchema::boolean, ACE_Null_Mutex > >::iterator boolean_iterator;
      typedef ::std::list< ACE_Refcounted_Auto_Ptr < ::XMLSchema::boolean, ACE_Null_Mutex > >::const_iterator boolean_const_iterator;
      boolean_iterator begin_boolean ();
      boolean_iterator end_boolean ();
      boolean_const_iterator begin_boolean () const;
      boolean_const_iterator end_boolean () const;
      void add_boolean ( ACE_Refcounted_Auto_Ptr < ::XMLSchema::boolean, ACE_Null_Mutex > const& );
      XSCRT::Type* boolean_ptr ( std::basic_string<ACE_TCHAR> idref );
      size_t count_boolean (void) const;

      protected:
      ::std::list< ACE_Refcounted_Auto_Ptr < ::XMLSchema::boolean, ACE_Null_Mutex > > boolean_;

      // octet
      //
      public:
      typedef ::std::list< ACE_Refcounted_Auto_Ptr < ::XMLSchema::unsignedByte, ACE_Null_Mutex > >::iterator octet_iterator;
      typedef ::std::list< ACE_Refcounted_Auto_Ptr < ::XMLSchema::unsignedByte, ACE_Null_Mutex > >::const_iterator octet_const_iterator;
      octet_iterator begin_octet ();
      octet_iterator end_octet ();
      octet_const_iterator begin_octet () const;
      octet_const_iterator end_octet () const;
      void add_octet ( ACE_Refcounted_Auto_Ptr < ::XMLSchema::unsignedByte, ACE_Null_Mutex > const& );
      XSCRT::Type* octet_ptr ( std::basic_string<ACE_TCHAR> idref );
      size_t count_octet (void) const;

      protected:
      ::std::list< ACE_Refcounted_Auto_Ptr < ::XMLSchema::unsignedByte, ACE_Null_Mutex > > octet_;

      // enum
      //
      public:
      typedef ::std::list< ACE_Refcounted_Auto_Ptr < ::XMLSchema::string< ACE_TCHAR >, ACE_Null_Mutex > >::iterator enum_iterator;
      typedef ::std::list< ACE_Refcounted_Auto_Ptr < ::XMLSchema::string< ACE_TCHAR >, ACE_Null_Mutex > >::const_iterator enum_const_iterator;
      enum_iterator begin_enum ();
      enum_iterator end_enum ();
      enum_const_iterator begin_enum () const;
      enum_const_iterator end_enum () const;
      void add_enum ( ACE_Refcounted_Auto_Ptr < ::XMLSchema::string< ACE_TCHAR >, ACE_Null_Mutex > const& );
      XSCRT::Type* enum_ptr ( std::basic_string<ACE_TCHAR> idref );
      size_t count_enum (void) const;

      protected:
      ::std::list< ACE_Refcounted_Auto_Ptr < ::XMLSchema::string< ACE_TCHAR >, ACE_Null_Mutex > > enum__;

      // string
      //
      public:
      typedef ::std::list< ACE_Refcounted_Auto_Ptr < ::XMLSchema::string< ACE_TCHAR >, ACE_Null_Mutex > >::iterator string_iterator;
      typedef ::std::list< ACE_Refcounted_Auto_Ptr < ::XMLSchema::string< ACE_TCHAR >, ACE_Null_Mutex > >::const_iterator string_const_iterator;
      string_iterator begin_string ();
      string_iterator end_string ();
      string_const_iterator begin_string () const;
      string_const_iterator end_string () const;
      void add_string ( ACE_Refcounted_Auto_Ptr < ::XMLSchema::string< ACE_TCHAR >, ACE_Null_Mutex > const& );
      XSCRT::Type* string_ptr ( std::basic_string<ACE_TCHAR> idref );
      size_t count_string (void) const;

      protected:
      ::std::list< ACE_Refcounted_Auto_Ptr < ::XMLSchema::string< ACE_TCHAR >, ACE_Null_Mutex > > string_;

      // longlong
      //
      public:
      typedef ::std::list< ACE_Refcounted_Auto_Ptr < ::XMLSchema::long_, ACE_Null_Mutex > >::iterator longlong_iterator;
      typedef ::std::list< ACE_Refcounted_Auto_Ptr < ::XMLSchema::long_, ACE_Null_Mutex > >::const_iterator longlong_const_iterator;
      longlong_iterator begin_longlong ();
      longlong_iterator end_longlong ();
      longlong_const_iterator begin_longlong () const;
      longlong_const_iterator end_longlong () const;
      void add_longlong ( ACE_Refcounted_Auto_Ptr < ::XMLSchema::long_, ACE_Null_Mutex > const& );
      XSCRT::Type* longlong_ptr ( std::basic_string<ACE_TCHAR> idref );
      size_t count_longlong (void) const;

      protected:
      ::std::list< ACE_Refcounted_Auto_Ptr < ::XMLSchema::long_, ACE_Null_Mutex > > longlong_;

      // ulonglong
      //
      public:
      typedef ::std::list< ACE_Refcounted_Auto_Ptr < ::XMLSchema::unsignedLong, ACE_Null_Mutex > >::iterator ulonglong_iterator;
      typedef ::std::list< ACE_Refcounted_Auto_Ptr < ::XMLSchema::unsignedLong, ACE_Null_Mutex > >::const_iterator ulonglong_const_iterator;
      ulonglong_iterator begin_ulonglong ();
      ulonglong_iterator end_ulonglong ();
      ulonglong_const_iterator begin_ulonglong () const;
      ulonglong_const_iterator end_ulonglong () const;
      void add_ulonglong ( ACE_Refcounted_Auto_Ptr < ::XMLSchema::unsignedLong, ACE_Null_Mutex > const& );
      XSCRT::Type* ulonglong_ptr ( std::basic_string<ACE_TCHAR> idref );
      size_t count_ulonglong (void) const;

      protected:
      ::std::list< ACE_Refcounted_Auto_Ptr < ::XMLSchema::unsignedLong, ACE_Null_Mutex > > ulonglong_;

      // longdouble
      //
      public:
      typedef ::std::list< ACE_Refcounted_Auto_Ptr < ::XMLSchema::double_, ACE_Null_Mutex > >::iterator longdouble_iterator;
      typedef ::std::list< ACE_Refcounted_Auto_Ptr < ::XMLSchema::double_, ACE_Null_Mutex > >::const_iterator longdouble_const_iterator;
      longdouble_iterator begin_longdouble ();
      longdouble_iterator end_longdouble ();
      longdouble_const_iterator begin_longdouble () const;
      longdouble_const_iterator end_longdouble () const;
      void add_longdouble ( ACE_Refcounted_Auto_Ptr < ::XMLSchema::double_, ACE_Null_Mutex > const& );
      XSCRT::Type* longdouble_ptr ( std::basic_string<ACE_TCHAR> idref );
      size_t count_longdouble (void) const;

      protected:
      ::std::list< ACE_Refcounted_Auto_Ptr < ::XMLSchema::double_, ACE_Null_Mutex > > longdouble_;

      // element
      //
      public:
      typedef ::std::list< ACE_Refcounted_Auto_Ptr < ::CIAO::Config_Handlers::DataValue, ACE_Null_Mutex > >::iterator element_iterator;
      typedef ::std::list< ACE_Refcounted_Auto_Ptr < ::CIAO::Config_Handlers::DataValue, ACE_Null_Mutex > >::const_iterator element_const_iterator;
      element_iterator begin_element ();
      element_iterator end_element ();
      element_const_iterator begin_element () const;
      element_const_iterator end_element () const;
      void add_element ( ACE_Refcounted_Auto_Ptr < ::CIAO::Config_Handlers::DataValue, ACE_Null_Mutex > const& );
      XSCRT::Type* element_ptr ( std::basic_string<ACE_TCHAR> idref );
      size_t count_element (void) const;

      protected:
      ::std::list< ACE_Refcounted_Auto_Ptr < ::CIAO::Config_Handlers::DataValue, ACE_Null_Mutex > > element_;

      // member
      //
      public:
      typedef ::std::list< ACE_Refcounted_Auto_Ptr < ::CIAO::Config_Handlers::NamedValue, ACE_Null_Mutex > >::iterator member_iterator;
      typedef ::std::list< ACE_Refcounted_Auto_Ptr < ::CIAO::Config_Handlers::NamedValue, ACE_Null_Mutex > >::const_iterator member_const_iterator;
      member_iterator begin_member ();
      member_iterator end_member ();
      member_const_iterator begin_member () const;
      member_const_iterator end_member () const;
      void add_member ( ACE_Refcounted_Auto_Ptr < ::CIAO::Config_Handlers::NamedValue, ACE_Null_Mutex > const& );
      XSCRT::Type* member_ptr ( std::basic_string<ACE_TCHAR> idref );
      size_t count_member (void) const;

      protected:
      ::std::list< ACE_Refcounted_Auto_Ptr < ::CIAO::Config_Handlers::NamedValue, ACE_Null_Mutex > > member_;

      public:
      DataValue ();

      DataValue (::XSCRT::XML::Element< ACE_TCHAR > const&);
      DataValue (DataValue const& s);

      DataValue&
      operator= (DataValue const& s);

      private:
      char regulator__;
    };


    class XSC_XML_Handlers_Export AliasType : public ::XSCRT::Type
    {
      typedef ::XSCRT::Type Base;

      public:
      typedef ACE_Refcounted_Auto_Ptr < AliasType, ACE_Null_Mutex > _ptr;

      // name
      //
      public:
      ::XMLSchema::string< ACE_TCHAR > const& name () const;
      void name (::XMLSchema::string< ACE_TCHAR > const& );

      protected:
      ::std::auto_ptr< ::XMLSchema::string< ACE_TCHAR > > name_;

      // typeId
      //
      public:
      ::XMLSchema::string< ACE_TCHAR > const& typeId () const;
      void typeId (::XMLSchema::string< ACE_TCHAR > const& );

      protected:
      ::std::auto_ptr< ::XMLSchema::string< ACE_TCHAR > > typeId_;

      // elementType
      //
      public:
      ::CIAO::Config_Handlers::DataType const& elementType () const;
      void elementType (::CIAO::Config_Handlers::DataType const& );

      protected:
      ::std::auto_ptr< ::CIAO::Config_Handlers::DataType > elementType_;

      public:
      AliasType (::XMLSchema::string< ACE_TCHAR > const& name__,
                 ::XMLSchema::string< ACE_TCHAR > const& typeId__,
                 ::CIAO::Config_Handlers::DataType const& elementType__);

      AliasType (::XSCRT::XML::Element< ACE_TCHAR > const&);
      AliasType (AliasType const& s);

      AliasType&
      operator= (AliasType const& s);

      private:
      char regulator__;
    };


    class XSC_XML_Handlers_Export EnumType : public ::XSCRT::Type
    {
      typedef ::XSCRT::Type Base;

      public:
      typedef ACE_Refcounted_Auto_Ptr < EnumType, ACE_Null_Mutex > _ptr;

      // name
      //
      public:
      ::XMLSchema::string< ACE_TCHAR > const& name () const;
      void name (::XMLSchema::string< ACE_TCHAR > const& );

      protected:
      ::std::auto_ptr< ::XMLSchema::string< ACE_TCHAR > > name_;

      // typeId
      //
      public:
      ::XMLSchema::string< ACE_TCHAR > const& typeId () const;
      void typeId (::XMLSchema::string< ACE_TCHAR > const& );

      protected:
      ::std::auto_ptr< ::XMLSchema::string< ACE_TCHAR > > typeId_;

      // member
      //
      public:
      typedef ::std::list< ACE_Refcounted_Auto_Ptr < ::XMLSchema::string< ACE_TCHAR >, ACE_Null_Mutex > >::iterator member_iterator;
      typedef ::std::list< ACE_Refcounted_Auto_Ptr < ::XMLSchema::string< ACE_TCHAR >, ACE_Null_Mutex > >::const_iterator member_const_iterator;
      member_iterator begin_member ();
      member_iterator end_member ();
      member_const_iterator begin_member () const;
      member_const_iterator end_member () const;
      void add_member ( ACE_Refcounted_Auto_Ptr < ::XMLSchema::string< ACE_TCHAR >, ACE_Null_Mutex > const& );
      XSCRT::Type* member_ptr ( std::basic_string<ACE_TCHAR> idref );
      size_t count_member (void) const;

      protected:
      ::std::list< ACE_Refcounted_Auto_Ptr < ::XMLSchema::string< ACE_TCHAR >, ACE_Null_Mutex > > member_;

      public:
      EnumType (::XMLSchema::string< ACE_TCHAR > const& name__,
                ::XMLSchema::string< ACE_TCHAR > const& typeId__,
                ::std::list< ACE_Refcounted_Auto_Ptr < ::XMLSchema::string< ACE_TCHAR >, ACE_Null_Mutex > > const& member__);

      EnumType (::XSCRT::XML::Element< ACE_TCHAR > const&);
      EnumType (EnumType const& s);

      EnumType&
      operator= (EnumType const& s);

      private:
      char regulator__;
    };


    class XSC_XML_Handlers_Export StructType : public ::XSCRT::Type
    {
      typedef ::XSCRT::Type Base;

      public:
      typedef ACE_Refcounted_Auto_Ptr < StructType, ACE_Null_Mutex > _ptr;

      // name
      //
      public:
      ::XMLSchema::string< ACE_TCHAR > const& name () const;
      void name (::XMLSchema::string< ACE_TCHAR > const& );

      protected:
      ::std::auto_ptr< ::XMLSchema::string< ACE_TCHAR > > name_;

      // typeId
      //
      public:
      ::XMLSchema::string< ACE_TCHAR > const& typeId () const;
      void typeId (::XMLSchema::string< ACE_TCHAR > const& );

      protected:
      ::std::auto_ptr< ::XMLSchema::string< ACE_TCHAR > > typeId_;

      // member
      //
      public:
      typedef ::std::list< ACE_Refcounted_Auto_Ptr < ::CIAO::Config_Handlers::StructMemberType, ACE_Null_Mutex > >::iterator member_iterator;
      typedef ::std::list< ACE_Refcounted_Auto_Ptr < ::CIAO::Config_Handlers::StructMemberType, ACE_Null_Mutex > >::const_iterator member_const_iterator;
      member_iterator begin_member ();
      member_iterator end_member ();
      member_const_iterator begin_member () const;
      member_const_iterator end_member () const;
      void add_member ( ACE_Refcounted_Auto_Ptr < ::CIAO::Config_Handlers::StructMemberType, ACE_Null_Mutex > const& );
      XSCRT::Type* member_ptr ( std::basic_string<ACE_TCHAR> idref );
      size_t count_member (void) const;

      protected:
      ::std::list< ACE_Refcounted_Auto_Ptr < ::CIAO::Config_Handlers::StructMemberType, ACE_Null_Mutex > > member_;

      public:
      StructType (::XMLSchema::string< ACE_TCHAR > const& name__,
                  ::XMLSchema::string< ACE_TCHAR > const& typeId__);

      StructType (::XSCRT::XML::Element< ACE_TCHAR > const&);
      StructType (StructType const& s);

      StructType&
      operator= (StructType const& s);

      private:
      char regulator__;
    };


    class XSC_XML_Handlers_Export StructMemberType : public ::XSCRT::Type
    {
      typedef ::XSCRT::Type Base;

      public:
      typedef ACE_Refcounted_Auto_Ptr < StructMemberType, ACE_Null_Mutex > _ptr;

      // name
      //
      public:
      ::XMLSchema::string< ACE_TCHAR > const& name () const;
      void name (::XMLSchema::string< ACE_TCHAR > const& );

      protected:
      ::std::auto_ptr< ::XMLSchema::string< ACE_TCHAR > > name_;

      // type
      //
      public:
      ::CIAO::Config_Handlers::DataType const& type () const;
      void type (::CIAO::Config_Handlers::DataType const& );

      protected:
      ::std::auto_ptr< ::CIAO::Config_Handlers::DataType > type_;

      public:
      StructMemberType (::XMLSchema::string< ACE_TCHAR > const& name__,
                        ::CIAO::Config_Handlers::DataType const& type__);

      StructMemberType (::XSCRT::XML::Element< ACE_TCHAR > const&);
      StructMemberType (StructMemberType const& s);

      StructMemberType&
      operator= (StructMemberType const& s);

      private:
      char regulator__;
    };


    class XSC_XML_Handlers_Export ValueType : public ::XSCRT::Type
    {
      typedef ::XSCRT::Type Base;

      public:
      typedef ACE_Refcounted_Auto_Ptr < ValueType, ACE_Null_Mutex > _ptr;

      // name
      //
      public:
      ::XMLSchema::string< ACE_TCHAR > const& name () const;
      void name (::XMLSchema::string< ACE_TCHAR > const& );

      protected:
      ::std::auto_ptr< ::XMLSchema::string< ACE_TCHAR > > name_;

      // typeId
      //
      public:
      ::XMLSchema::string< ACE_TCHAR > const& typeId () const;
      void typeId (::XMLSchema::string< ACE_TCHAR > const& );

      protected:
      ::std::auto_ptr< ::XMLSchema::string< ACE_TCHAR > > typeId_;

      // modifier
      //
      public:
      ::XMLSchema::string< ACE_TCHAR > const& modifier () const;
      void modifier (::XMLSchema::string< ACE_TCHAR > const& );

      protected:
      ::std::auto_ptr< ::XMLSchema::string< ACE_TCHAR > > modifier_;

      // baseType
      //
      public:
      ::CIAO::Config_Handlers::DataType const& baseType () const;
      void baseType (::CIAO::Config_Handlers::DataType const& );

      protected:
      ::std::auto_ptr< ::CIAO::Config_Handlers::DataType > baseType_;

      // member
      //
      public:
      typedef ::std::list< ACE_Refcounted_Auto_Ptr < ::CIAO::Config_Handlers::ValueMemberType, ACE_Null_Mutex > >::iterator member_iterator;
      typedef ::std::list< ACE_Refcounted_Auto_Ptr < ::CIAO::Config_Handlers::ValueMemberType, ACE_Null_Mutex > >::const_iterator member_const_iterator;
      member_iterator begin_member ();
      member_iterator end_member ();
      member_const_iterator begin_member () const;
      member_const_iterator end_member () const;
      void add_member ( ACE_Refcounted_Auto_Ptr < ::CIAO::Config_Handlers::ValueMemberType, ACE_Null_Mutex > const& );
      XSCRT::Type* member_ptr ( std::basic_string<ACE_TCHAR> idref );
      size_t count_member (void) const;

      protected:
      ::std::list< ACE_Refcounted_Auto_Ptr < ::CIAO::Config_Handlers::ValueMemberType, ACE_Null_Mutex > > member_;

      public:
      ValueType (::XMLSchema::string< ACE_TCHAR > const& name__,
                 ::XMLSchema::string< ACE_TCHAR > const& typeId__,
                 ::XMLSchema::string< ACE_TCHAR > const& modifier__,
                 ::CIAO::Config_Handlers::DataType const& baseType__);

      ValueType (::XSCRT::XML::Element< ACE_TCHAR > const&);
      ValueType (ValueType const& s);

      ValueType&
      operator= (ValueType const& s);

      private:
      char regulator__;
    };


    class XSC_XML_Handlers_Export ValueMemberType : public ::XSCRT::Type
    {
      typedef ::XSCRT::Type Base;

      public:
      typedef ACE_Refcounted_Auto_Ptr < ValueMemberType, ACE_Null_Mutex > _ptr;

      // name
      //
      public:
      ::XMLSchema::string< ACE_TCHAR > const& name () const;
      void name (::XMLSchema::string< ACE_TCHAR > const& );

      protected:
      ::std::auto_ptr< ::XMLSchema::string< ACE_TCHAR > > name_;

      // visibility
      //
      public:
      ::XMLSchema::string< ACE_TCHAR > const& visibility () const;
      void visibility (::XMLSchema::string< ACE_TCHAR > const& );

      protected:
      ::std::auto_ptr< ::XMLSchema::string< ACE_TCHAR > > visibility_;

      // type
      //
      public:
      ::CIAO::Config_Handlers::DataType const& type () const;
      void type (::CIAO::Config_Handlers::DataType const& );

      protected:
      ::std::auto_ptr< ::CIAO::Config_Handlers::DataType > type_;

      public:
      ValueMemberType (::XMLSchema::string< ACE_TCHAR > const& name__,
                       ::XMLSchema::string< ACE_TCHAR > const& visibility__,
                       ::CIAO::Config_Handlers::DataType const& type__);

      ValueMemberType (::XSCRT::XML::Element< ACE_TCHAR > const&);
      ValueMemberType (ValueMemberType const& s);

      ValueMemberType&
      operator= (ValueMemberType const& s);

      private:
      char regulator__;
    };


    class XSC_XML_Handlers_Export NamedValue : public ::XSCRT::Type
    {
      typedef ::XSCRT::Type Base;

      public:
      typedef ACE_Refcounted_Auto_Ptr < NamedValue, ACE_Null_Mutex > _ptr;

      // name
      //
      public:
      ::XMLSchema::string< ACE_TCHAR > const& name () const;
      void name (::XMLSchema::string< ACE_TCHAR > const& );

      protected:
      ::std::auto_ptr< ::XMLSchema::string< ACE_TCHAR > > name_;

      // value
      //
      public:
      ::CIAO::Config_Handlers::DataValue const& value () const;
      void value (::CIAO::Config_Handlers::DataValue const& );

      protected:
      ::std::auto_ptr< ::CIAO::Config_Handlers::DataValue > value_;

      public:
      NamedValue (::XMLSchema::string< ACE_TCHAR > const& name__,
                  ::CIAO::Config_Handlers::DataValue const& value__);

      NamedValue (::XSCRT::XML::Element< ACE_TCHAR > const&);
      NamedValue (NamedValue const& s);

      NamedValue&
      operator= (NamedValue const& s);

      private:
      char regulator__;
    };


    class XSC_XML_Handlers_Export SequenceType : public ::XSCRT::Type
    {
      typedef ::XSCRT::Type Base;

      public:
      typedef ACE_Refcounted_Auto_Ptr < SequenceType, ACE_Null_Mutex > _ptr;

      // bound
      //
      public:
      bool bound_p () const;
      ::XMLSchema::unsignedInt const& bound () const;
      void bound (::XMLSchema::unsignedInt const& );

      protected:
      ::std::auto_ptr< ::XMLSchema::unsignedInt > bound_;

      // elementType
      //
      public:
      ::CIAO::Config_Handlers::DataType const& elementType () const;
      void elementType (::CIAO::Config_Handlers::DataType const& );

      protected:
      ::std::auto_ptr< ::CIAO::Config_Handlers::DataType > elementType_;

      public:
      SequenceType (::CIAO::Config_Handlers::DataType const& elementType__);

      SequenceType (::XSCRT::XML::Element< ACE_TCHAR > const&);
      SequenceType (SequenceType const& s);

      SequenceType&
      operator= (SequenceType const& s);

      private:
      char regulator__;
    };


    class XSC_XML_Handlers_Export Any : public ::XSCRT::Type
    {
      typedef ::XSCRT::Type Base;

      public:
      typedef ACE_Refcounted_Auto_Ptr < Any, ACE_Null_Mutex > _ptr;

      // type
      //
      public:
      ::CIAO::Config_Handlers::DataType const& type () const;
      void type (::CIAO::Config_Handlers::DataType const& );

      protected:
      ::std::auto_ptr< ::CIAO::Config_Handlers::DataType > type_;

      // value
      //
      public:
      ::CIAO::Config_Handlers::DataValue const& value () const;
      void value (::CIAO::Config_Handlers::DataValue const& );

      protected:
      ::std::auto_ptr< ::CIAO::Config_Handlers::DataValue > value_;

      public:
      Any (::CIAO::Config_Handlers::DataType const& type__,
           ::CIAO::Config_Handlers::DataValue const& value__);

      Any (::XSCRT::XML::Element< ACE_TCHAR > const&);
      Any (Any const& s);

      Any&
      operator= (Any const& s);

      private:
      char regulator__;
    };


    class XSC_XML_Handlers_Export Property : public ::XSCRT::Type
    {
      typedef ::XSCRT::Type Base;

      public:
      typedef ACE_Refcounted_Auto_Ptr < Property, ACE_Null_Mutex > _ptr;

      // name
      //
      public:
      ::XMLSchema::string< ACE_TCHAR > const& name () const;
      void name (::XMLSchema::string< ACE_TCHAR > const& );

      protected:
      ::std::auto_ptr< ::XMLSchema::string< ACE_TCHAR > > name_;

      // value
      //
      public:
      ::CIAO::Config_Handlers::Any const& value () const;
      void value (::CIAO::Config_Handlers::Any const& );

      protected:
      ::std::auto_ptr< ::CIAO::Config_Handlers::Any > value_;

      public:
      Property (::XMLSchema::string< ACE_TCHAR > const& name__,
                ::CIAO::Config_Handlers::Any const& value__);

      Property (::XSCRT::XML::Element< ACE_TCHAR > const&);
      Property (Property const& s);

      Property&
      operator= (Property const& s);

      private:
      char regulator__;
    };


    class XSC_XML_Handlers_Export SatisfierPropertyKind : public ::XSCRT::Type
    {
      public:
      SatisfierPropertyKind (::XSCRT::XML::Element< ACE_TCHAR > const&);
      SatisfierPropertyKind (::XSCRT::XML::Attribute< ACE_TCHAR > const&);

      static SatisfierPropertyKind const Quantity;
      static SatisfierPropertyKind const Capacity;
      static SatisfierPropertyKind const Minimum;
      static SatisfierPropertyKind const Maximum;
      static SatisfierPropertyKind const Attribute;
      static SatisfierPropertyKind const Selection;

      enum Value
      {
        Quantity_l, Capacity_l, Minimum_l, Maximum_l, Attribute_l, Selection_l
      };


      Value
      integral () const;

      friend bool XSC_XML_Handlers_Export
      operator== (SatisfierPropertyKind const& a, SatisfierPropertyKind const& b);

      friend bool XSC_XML_Handlers_Export
      operator!= (SatisfierPropertyKind const& a, SatisfierPropertyKind const& b);

      private:
      SatisfierPropertyKind (Value v);

      Value v_;
    };

    bool XSC_XML_Handlers_Export operator== (SatisfierPropertyKind const &a, SatisfierPropertyKind const &b);

    bool XSC_XML_Handlers_Export operator!= (SatisfierPropertyKind const &a, SatisfierPropertyKind const &b);


    class XSC_XML_Handlers_Export SatisfierProperty : public ::XSCRT::Type
    {
      typedef ::XSCRT::Type Base;

      public:
      typedef ACE_Refcounted_Auto_Ptr < SatisfierProperty, ACE_Null_Mutex > _ptr;

      // name
      //
      public:
      ::XMLSchema::string< ACE_TCHAR > const& name () const;
      void name (::XMLSchema::string< ACE_TCHAR > const& );

      protected:
      ::std::auto_ptr< ::XMLSchema::string< ACE_TCHAR > > name_;

      // kind
      //
      public:
      ::CIAO::Config_Handlers::SatisfierPropertyKind const& kind () const;
      void kind (::CIAO::Config_Handlers::SatisfierPropertyKind const& );

      protected:
      ::std::auto_ptr< ::CIAO::Config_Handlers::SatisfierPropertyKind > kind_;

      // dynamic
      //
      public:
      ::XMLSchema::boolean const& dynamic () const;
      void dynamic (::XMLSchema::boolean const& );

      protected:
      ::std::auto_ptr< ::XMLSchema::boolean > dynamic_;

      // value
      //
      public:
      ::CIAO::Config_Handlers::Any const& value () const;
      void value (::CIAO::Config_Handlers::Any const& );

      protected:
      ::std::auto_ptr< ::CIAO::Config_Handlers::Any > value_;

      public:
      SatisfierProperty (::XMLSchema::string< ACE_TCHAR > const& name__,
                         ::CIAO::Config_Handlers::SatisfierPropertyKind const& kind__,
                         ::XMLSchema::boolean const& dynamic__,
                         ::CIAO::Config_Handlers::Any const& value__);

      SatisfierProperty (::XSCRT::XML::Element< ACE_TCHAR > const&);
      SatisfierProperty (SatisfierProperty const& s);

      SatisfierProperty&
      operator= (SatisfierProperty const& s);

      private:
      char regulator__;
    };


    class XSC_XML_Handlers_Export Resource : public ::XSCRT::Type
    {
      typedef ::XSCRT::Type Base;

      public:
      typedef ACE_Refcounted_Auto_Ptr < Resource, ACE_Null_Mutex > _ptr;

      // name
      //
      public:
      ::XMLSchema::string< ACE_TCHAR > const& name () const;
      void name (::XMLSchema::string< ACE_TCHAR > const& );

      protected:
      ::std::auto_ptr< ::XMLSchema::string< ACE_TCHAR > > name_;

      // resourceType
      //
      public:
      typedef ::std::list< ACE_Refcounted_Auto_Ptr < ::XMLSchema::string< ACE_TCHAR >, ACE_Null_Mutex > >::iterator resourceType_iterator;
      typedef ::std::list< ACE_Refcounted_Auto_Ptr < ::XMLSchema::string< ACE_TCHAR >, ACE_Null_Mutex > >::const_iterator resourceType_const_iterator;
      resourceType_iterator begin_resourceType ();
      resourceType_iterator end_resourceType ();
      resourceType_const_iterator begin_resourceType () const;
      resourceType_const_iterator end_resourceType () const;
      void add_resourceType ( ACE_Refcounted_Auto_Ptr < ::XMLSchema::string< ACE_TCHAR >, ACE_Null_Mutex > const& );
      XSCRT::Type* resourceType_ptr ( std::basic_string<ACE_TCHAR> idref );
      size_t count_resourceType (void) const;

      protected:
      ::std::list< ACE_Refcounted_Auto_Ptr < ::XMLSchema::string< ACE_TCHAR >, ACE_Null_Mutex > > resourceType_;

      // property
      //
      public:
      typedef ::std::list< ACE_Refcounted_Auto_Ptr < ::CIAO::Config_Handlers::SatisfierProperty, ACE_Null_Mutex > >::iterator property_iterator;
      typedef ::std::list< ACE_Refcounted_Auto_Ptr < ::CIAO::Config_Handlers::SatisfierProperty, ACE_Null_Mutex > >::const_iterator property_const_iterator;
      property_iterator begin_property ();
      property_iterator end_property ();
      property_const_iterator begin_property () const;
      property_const_iterator end_property () const;
      void add_property ( ACE_Refcounted_Auto_Ptr < ::CIAO::Config_Handlers::SatisfierProperty, ACE_Null_Mutex > const& );
      XSCRT::Type* property_ptr ( std::basic_string<ACE_TCHAR> idref );
      size_t count_property (void) const;

      protected:
      ::std::list< ACE_Refcounted_Auto_Ptr < ::CIAO::Config_Handlers::SatisfierProperty, ACE_Null_Mutex > > property_;

      public:
      Resource (::XMLSchema::string< ACE_TCHAR > const& name__,
                ::std::list< ACE_Refcounted_Auto_Ptr < ::XMLSchema::string< ACE_TCHAR >, ACE_Null_Mutex > > const& resourceType__);

      Resource (::XSCRT::XML::Element< ACE_TCHAR > const&);
      Resource (Resource const& s);

      Resource&
      operator= (Resource const& s);

      private:
      char regulator__;
    };


    class XSC_XML_Handlers_Export Requirement : public ::XSCRT::Type
    {
      typedef ::XSCRT::Type Base;

      public:
      typedef ACE_Refcounted_Auto_Ptr < Requirement, ACE_Null_Mutex > _ptr;

      // name
      //
      public:
      ::XMLSchema::string< ACE_TCHAR > const& name () const;
      void name (::XMLSchema::string< ACE_TCHAR > const& );

      protected:
      ::std::auto_ptr< ::XMLSchema::string< ACE_TCHAR > > name_;

      // resourceType
      //
      public:
      ::XMLSchema::string< ACE_TCHAR > const& resourceType () const;
      void resourceType (::XMLSchema::string< ACE_TCHAR > const& );

      protected:
      ::std::auto_ptr< ::XMLSchema::string< ACE_TCHAR > > resourceType_;

      // property
      //
      public:
      typedef ::std::list< ACE_Refcounted_Auto_Ptr < ::CIAO::Config_Handlers::Property, ACE_Null_Mutex > >::iterator property_iterator;
      typedef ::std::list< ACE_Refcounted_Auto_Ptr < ::CIAO::Config_Handlers::Property, ACE_Null_Mutex > >::const_iterator property_const_iterator;
      property_iterator begin_property ();
      property_iterator end_property ();
      property_const_iterator begin_property () const;
      property_const_iterator end_property () const;
      void add_property ( ACE_Refcounted_Auto_Ptr < ::CIAO::Config_Handlers::Property, ACE_Null_Mutex > const& );
      XSCRT::Type* property_ptr ( std::basic_string<ACE_TCHAR> idref );
      size_t count_property (void) const;

      protected:
      ::std::list< ACE_Refcounted_Auto_Ptr < ::CIAO::Config_Handlers::Property, ACE_Null_Mutex > > property_;

      public:
      Requirement (::XMLSchema::string< ACE_TCHAR > const& name__,
                   ::XMLSchema::string< ACE_TCHAR > const& resourceType__);

      Requirement (::XSCRT::XML::Element< ACE_TCHAR > const&);
      Requirement (Requirement const& s);

      Requirement&
      operator= (Requirement const& s);

      private:
      char regulator__;
    };


    class XSC_XML_Handlers_Export ResourceDeploymentDescription : public ::XSCRT::Type
    {
      typedef ::XSCRT::Type Base;

      public:
      typedef ACE_Refcounted_Auto_Ptr < ResourceDeploymentDescription, ACE_Null_Mutex > _ptr;

      // requirementName
      //
      public:
      ::XMLSchema::string< ACE_TCHAR > const& requirementName () const;
      void requirementName (::XMLSchema::string< ACE_TCHAR > const& );

      protected:
      ::std::auto_ptr< ::XMLSchema::string< ACE_TCHAR > > requirementName_;

      // resourceName
      //
      public:
      ::XMLSchema::string< ACE_TCHAR > const& resourceName () const;
      void resourceName (::XMLSchema::string< ACE_TCHAR > const& );

      protected:
      ::std::auto_ptr< ::XMLSchema::string< ACE_TCHAR > > resourceName_;

      // property
      //
      public:
      typedef ::std::list< ACE_Refcounted_Auto_Ptr < ::CIAO::Config_Handlers::Property, ACE_Null_Mutex > >::iterator property_iterator;
      typedef ::std::list< ACE_Refcounted_Auto_Ptr < ::CIAO::Config_Handlers::Property, ACE_Null_Mutex > >::const_iterator property_const_iterator;
      property_iterator begin_property ();
      property_iterator end_property ();
      property_const_iterator begin_property () const;
      property_const_iterator end_property () const;
      void add_property ( ACE_Refcounted_Auto_Ptr < ::CIAO::Config_Handlers::Property, ACE_Null_Mutex > const& );
      XSCRT::Type* property_ptr ( std::basic_string<ACE_TCHAR> idref );
      size_t count_property (void) const;

      protected:
      ::std::list< ACE_Refcounted_Auto_Ptr < ::CIAO::Config_Handlers::Property, ACE_Null_Mutex > > property_;

      public:
      ResourceDeploymentDescription (::XMLSchema::string< ACE_TCHAR > const& requirementName__,
                                     ::XMLSchema::string< ACE_TCHAR > const& resourceName__);

      ResourceDeploymentDescription (::XSCRT::XML::Element< ACE_TCHAR > const&);
      ResourceDeploymentDescription (ResourceDeploymentDescription const& s);

      ResourceDeploymentDescription&
      operator= (ResourceDeploymentDescription const& s);

      private:
      char regulator__;
    };


    class XSC_XML_Handlers_Export ArtifactDeploymentDescription : public ::XSCRT::Type
    {
      typedef ::XSCRT::Type Base;

      public:
      typedef ACE_Refcounted_Auto_Ptr < ArtifactDeploymentDescription, ACE_Null_Mutex > _ptr;

      // name
      //
      public:
      ::XMLSchema::string< ACE_TCHAR > const& name () const;
      void name (::XMLSchema::string< ACE_TCHAR > const& );

      protected:
      ::std::auto_ptr< ::XMLSchema::string< ACE_TCHAR > > name_;

      // source
      //
      public:
      typedef ::std::list< ACE_Refcounted_Auto_Ptr < ::XMLSchema::string< ACE_TCHAR >, ACE_Null_Mutex > >::iterator source_iterator;
      typedef ::std::list< ACE_Refcounted_Auto_Ptr < ::XMLSchema::string< ACE_TCHAR >, ACE_Null_Mutex > >::const_iterator source_const_iterator;
      source_iterator begin_source ();
      source_iterator end_source ();
      source_const_iterator begin_source () const;
      source_const_iterator end_source () const;
      void add_source ( ACE_Refcounted_Auto_Ptr < ::XMLSchema::string< ACE_TCHAR >, ACE_Null_Mutex > const& );
      XSCRT::Type* source_ptr ( std::basic_string<ACE_TCHAR> idref );
      size_t count_source (void) const;

      protected:
      ::std::list< ACE_Refcounted_Auto_Ptr < ::XMLSchema::string< ACE_TCHAR >, ACE_Null_Mutex > > source_;

      // node
      //
      public:
      ::XMLSchema::string< ACE_TCHAR > const& node () const;
      void node (::XMLSchema::string< ACE_TCHAR > const& );

      protected:
      ::std::auto_ptr< ::XMLSchema::string< ACE_TCHAR > > node_;

      // location
      //
      public:
      typedef ::std::list< ACE_Refcounted_Auto_Ptr < ::XMLSchema::string< ACE_TCHAR >, ACE_Null_Mutex > >::iterator location_iterator;
      typedef ::std::list< ACE_Refcounted_Auto_Ptr < ::XMLSchema::string< ACE_TCHAR >, ACE_Null_Mutex > >::const_iterator location_const_iterator;
      location_iterator begin_location ();
      location_iterator end_location ();
      location_const_iterator begin_location () const;
      location_const_iterator end_location () const;
      void add_location ( ACE_Refcounted_Auto_Ptr < ::XMLSchema::string< ACE_TCHAR >, ACE_Null_Mutex > const& );
      XSCRT::Type* location_ptr ( std::basic_string<ACE_TCHAR> idref );
      size_t count_location (void) const;

      protected:
      ::std::list< ACE_Refcounted_Auto_Ptr < ::XMLSchema::string< ACE_TCHAR >, ACE_Null_Mutex > > location_;

      // execParameter
      //
      public:
      typedef ::std::list< ACE_Refcounted_Auto_Ptr < ::CIAO::Config_Handlers::Property, ACE_Null_Mutex > >::iterator execParameter_iterator;
      typedef ::std::list< ACE_Refcounted_Auto_Ptr < ::CIAO::Config_Handlers::Property, ACE_Null_Mutex > >::const_iterator execParameter_const_iterator;
      execParameter_iterator begin_execParameter ();
      execParameter_iterator end_execParameter ();
      execParameter_const_iterator begin_execParameter () const;
      execParameter_const_iterator end_execParameter () const;
      void add_execParameter ( ACE_Refcounted_Auto_Ptr < ::CIAO::Config_Handlers::Property, ACE_Null_Mutex > const& );
      XSCRT::Type* execParameter_ptr ( std::basic_string<ACE_TCHAR> idref );
      size_t count_execParameter (void) const;

      protected:
      ::std::list< ACE_Refcounted_Auto_Ptr < ::CIAO::Config_Handlers::Property, ACE_Null_Mutex > > execParameter_;

      // deployRequirement
      //
      public:
      typedef ::std::list< ACE_Refcounted_Auto_Ptr < ::CIAO::Config_Handlers::Requirement, ACE_Null_Mutex > >::iterator deployRequirement_iterator;
      typedef ::std::list< ACE_Refcounted_Auto_Ptr < ::CIAO::Config_Handlers::Requirement, ACE_Null_Mutex > >::const_iterator deployRequirement_const_iterator;
      deployRequirement_iterator begin_deployRequirement ();
      deployRequirement_iterator end_deployRequirement ();
      deployRequirement_const_iterator begin_deployRequirement () const;
      deployRequirement_const_iterator end_deployRequirement () const;
      void add_deployRequirement ( ACE_Refcounted_Auto_Ptr < ::CIAO::Config_Handlers::Requirement, ACE_Null_Mutex > const& );
      XSCRT::Type* deployRequirement_ptr ( std::basic_string<ACE_TCHAR> idref );
      size_t count_deployRequirement (void) const;

      protected:
      ::std::list< ACE_Refcounted_Auto_Ptr < ::CIAO::Config_Handlers::Requirement, ACE_Null_Mutex > > deployRequirement_;

      // deployedResource
      //
      public:
      typedef ::std::list< ACE_Refcounted_Auto_Ptr < ::CIAO::Config_Handlers::ResourceDeploymentDescription, ACE_Null_Mutex > >::iterator deployedResource_iterator;
      typedef ::std::list< ACE_Refcounted_Auto_Ptr < ::CIAO::Config_Handlers::ResourceDeploymentDescription, ACE_Null_Mutex > >::const_iterator deployedResource_const_iterator;
      deployedResource_iterator begin_deployedResource ();
      deployedResource_iterator end_deployedResource ();
      deployedResource_const_iterator begin_deployedResource () const;
      deployedResource_const_iterator end_deployedResource () const;
      void add_deployedResource ( ACE_Refcounted_Auto_Ptr < ::CIAO::Config_Handlers::ResourceDeploymentDescription, ACE_Null_Mutex > const& );
      XSCRT::Type* deployedResource_ptr ( std::basic_string<ACE_TCHAR> idref );
      size_t count_deployedResource (void) const;

      protected:
      ::std::list< ACE_Refcounted_Auto_Ptr < ::CIAO::Config_Handlers::ResourceDeploymentDescription, ACE_Null_Mutex > > deployedResource_;

      // id
      //
      public:
      bool id_p () const;
      ::XMLSchema::ID< ACE_TCHAR > const& id () const;
      ::XMLSchema::ID< ACE_TCHAR >& id ();
      void id (::XMLSchema::ID< ACE_TCHAR > const& );

      protected:
      ::std::auto_ptr< ::XMLSchema::ID< ACE_TCHAR > > id_;

      public:
      ArtifactDeploymentDescription (::XMLSchema::string< ACE_TCHAR > const& name__,
                                     ::XMLSchema::string< ACE_TCHAR > const& node__);

      ArtifactDeploymentDescription (::XSCRT::XML::Element< ACE_TCHAR > const&);
      ArtifactDeploymentDescription (ArtifactDeploymentDescription const& s);

      ArtifactDeploymentDescription&
      operator= (ArtifactDeploymentDescription const& s);

      private:
      char regulator__;
    };


    class XSC_XML_Handlers_Export MonolithicDeploymentDescription : public ::XSCRT::Type
    {
      typedef ::XSCRT::Type Base;

      public:
      typedef ACE_Refcounted_Auto_Ptr < MonolithicDeploymentDescription, ACE_Null_Mutex > _ptr;

      // name
      //
      public:
      ::XMLSchema::string< ACE_TCHAR > const& name () const;
      void name (::XMLSchema::string< ACE_TCHAR > const& );

      protected:
      ::std::auto_ptr< ::XMLSchema::string< ACE_TCHAR > > name_;

      // source
      //
      public:
      typedef ::std::list< ACE_Refcounted_Auto_Ptr < ::XMLSchema::string< ACE_TCHAR >, ACE_Null_Mutex > >::iterator source_iterator;
      typedef ::std::list< ACE_Refcounted_Auto_Ptr < ::XMLSchema::string< ACE_TCHAR >, ACE_Null_Mutex > >::const_iterator source_const_iterator;
      source_iterator begin_source ();
      source_iterator end_source ();
      source_const_iterator begin_source () const;
      source_const_iterator end_source () const;
      void add_source ( ACE_Refcounted_Auto_Ptr < ::XMLSchema::string< ACE_TCHAR >, ACE_Null_Mutex > const& );
      XSCRT::Type* source_ptr ( std::basic_string<ACE_TCHAR> idref );
      size_t count_source (void) const;

      protected:
      ::std::list< ACE_Refcounted_Auto_Ptr < ::XMLSchema::string< ACE_TCHAR >, ACE_Null_Mutex > > source_;

      // artifact
      //
      public:
      typedef ::std::list< ACE_Refcounted_Auto_Ptr < ::CIAO::Config_Handlers::IdRef, ACE_Null_Mutex > >::iterator artifact_iterator;
      typedef ::std::list< ACE_Refcounted_Auto_Ptr < ::CIAO::Config_Handlers::IdRef, ACE_Null_Mutex > >::const_iterator artifact_const_iterator;
      artifact_iterator begin_artifact ();
      artifact_iterator end_artifact ();
      artifact_const_iterator begin_artifact () const;
      artifact_const_iterator end_artifact () const;
      void add_artifact ( ACE_Refcounted_Auto_Ptr < ::CIAO::Config_Handlers::IdRef, ACE_Null_Mutex > const& );
      XSCRT::Type* artifact_ptr ( std::basic_string<ACE_TCHAR> idref );
      size_t count_artifact (void) const;

      protected:
      ::std::list< ACE_Refcounted_Auto_Ptr < ::CIAO::Config_Handlers::IdRef, ACE_Null_Mutex > > artifact_;

      // execParameter
      //
      public:
      typedef ::std::list< ACE_Refcounted_Auto_Ptr < ::CIAO::Config_Handlers::Property, ACE_Null_Mutex > >::iterator execParameter_iterator;
      typedef ::std::list< ACE_Refcounted_Auto_Ptr < ::CIAO::Config_Handlers::Property, ACE_Null_Mutex > >::const_iterator execParameter_const_iterator;
      execParameter_iterator begin_execParameter ();
      execParameter_iterator end_execParameter ();
      execParameter_const_iterator begin_execParameter () const;
      execParameter_const_iterator end_execParameter () const;
      void add_execParameter ( ACE_Refcounted_Auto_Ptr < ::CIAO::Config_Handlers::Property, ACE_Null_Mutex > const& );
      XSCRT::Type* execParameter_ptr ( std::basic_string<ACE_TCHAR> idref );
      size_t count_execParameter (void) const;

      protected:
      ::std::list< ACE_Refcounted_Auto_Ptr < ::CIAO::Config_Handlers::Property, ACE_Null_Mutex > > execParameter_;

      // deployRequirement
      //
      public:
      typedef ::std::list< ACE_Refcounted_Auto_Ptr < ::CIAO::Config_Handlers::Requirement, ACE_Null_Mutex > >::iterator deployRequirement_iterator;
      typedef ::std::list< ACE_Refcounted_Auto_Ptr < ::CIAO::Config_Handlers::Requirement, ACE_Null_Mutex > >::const_iterator deployRequirement_const_iterator;
      deployRequirement_iterator begin_deployRequirement ();
      deployRequirement_iterator end_deployRequirement ();
      deployRequirement_const_iterator begin_deployRequirement () const;
      deployRequirement_const_iterator end_deployRequirement () const;
      void add_deployRequirement ( ACE_Refcounted_Auto_Ptr < ::CIAO::Config_Handlers::Requirement, ACE_Null_Mutex > const& );
      XSCRT::Type* deployRequirement_ptr ( std::basic_string<ACE_TCHAR> idref );
      size_t count_deployRequirement (void) const;

      protected:
      ::std::list< ACE_Refcounted_Auto_Ptr < ::CIAO::Config_Handlers::Requirement, ACE_Null_Mutex > > deployRequirement_;

      // id
      //
      public:
      bool id_p () const;
      ::XMLSchema::ID< ACE_TCHAR > const& id () const;
      ::XMLSchema::ID< ACE_TCHAR >& id ();
      void id (::XMLSchema::ID< ACE_TCHAR > const& );

      protected:
      ::std::auto_ptr< ::XMLSchema::ID< ACE_TCHAR > > id_;

      public:
      MonolithicDeploymentDescription (::XMLSchema::string< ACE_TCHAR > const& name__);

      MonolithicDeploymentDescription (::XSCRT::XML::Element< ACE_TCHAR > const&);
      MonolithicDeploymentDescription (MonolithicDeploymentDescription const& s);

      MonolithicDeploymentDescription&
      operator= (MonolithicDeploymentDescription const& s);

      private:
      char regulator__;
    };


    class XSC_XML_Handlers_Export ResourceUsageKind : public ::XSCRT::Type
    {
      public:
      ResourceUsageKind (::XSCRT::XML::Element< ACE_TCHAR > const&);
      ResourceUsageKind (::XSCRT::XML::Attribute< ACE_TCHAR > const&);

      static ResourceUsageKind const None;
      static ResourceUsageKind const InstanceUsesResource;
      static ResourceUsageKind const ResourceUsesInstance;
      static ResourceUsageKind const PortUsesResource;
      static ResourceUsageKind const ResourceUsesPort;

      enum Value
      {
        None_l, InstanceUsesResource_l, ResourceUsesInstance_l, PortUsesResource_l, ResourceUsesPort_l
      };


      Value
      integral () const;

      friend bool XSC_XML_Handlers_Export
      operator== (ResourceUsageKind const& a, ResourceUsageKind const& b);

      friend bool XSC_XML_Handlers_Export
      operator!= (ResourceUsageKind const& a, ResourceUsageKind const& b);

      private:
      ResourceUsageKind (Value v);

      Value v_;
    };

    bool XSC_XML_Handlers_Export operator== (ResourceUsageKind const &a, ResourceUsageKind const &b);

    bool XSC_XML_Handlers_Export operator!= (ResourceUsageKind const &a, ResourceUsageKind const &b);


    class XSC_XML_Handlers_Export InstanceResourceDeploymentDescription : public ::XSCRT::Type
    {
      typedef ::XSCRT::Type Base;

      public:
      typedef ACE_Refcounted_Auto_Ptr < InstanceResourceDeploymentDescription, ACE_Null_Mutex > _ptr;

      // resourceUsage
      //
      public:
      ::CIAO::Config_Handlers::ResourceUsageKind const& resourceUsage () const;
      void resourceUsage (::CIAO::Config_Handlers::ResourceUsageKind const& );

      protected:
      ::std::auto_ptr< ::CIAO::Config_Handlers::ResourceUsageKind > resourceUsage_;

      // requirementName
      //
      public:
      ::XMLSchema::string< ACE_TCHAR > const& requirementName () const;
      void requirementName (::XMLSchema::string< ACE_TCHAR > const& );

      protected:
      ::std::auto_ptr< ::XMLSchema::string< ACE_TCHAR > > requirementName_;

      // resourceName
      //
      public:
      ::XMLSchema::string< ACE_TCHAR > const& resourceName () const;
      void resourceName (::XMLSchema::string< ACE_TCHAR > const& );

      protected:
      ::std::auto_ptr< ::XMLSchema::string< ACE_TCHAR > > resourceName_;

      // property
      //
      public:
      typedef ::std::list< ACE_Refcounted_Auto_Ptr < ::CIAO::Config_Handlers::Property, ACE_Null_Mutex > >::iterator property_iterator;
      typedef ::std::list< ACE_Refcounted_Auto_Ptr < ::CIAO::Config_Handlers::Property, ACE_Null_Mutex > >::const_iterator property_const_iterator;
      property_iterator begin_property ();
      property_iterator end_property ();
      property_const_iterator begin_property () const;
      property_const_iterator end_property () const;
      void add_property ( ACE_Refcounted_Auto_Ptr < ::CIAO::Config_Handlers::Property, ACE_Null_Mutex > const& );
      XSCRT::Type* property_ptr ( std::basic_string<ACE_TCHAR> idref );
      size_t count_property (void) const;

      protected:
      ::std::list< ACE_Refcounted_Auto_Ptr < ::CIAO::Config_Handlers::Property, ACE_Null_Mutex > > property_;

      public:
      InstanceResourceDeploymentDescription (::CIAO::Config_Handlers::ResourceUsageKind const& resourceUsage__,
                                             ::XMLSchema::string< ACE_TCHAR > const& requirementName__,
                                             ::XMLSchema::string< ACE_TCHAR > const& resourceName__);

      InstanceResourceDeploymentDescription (::XSCRT::XML::Element< ACE_TCHAR > const&);
      InstanceResourceDeploymentDescription (InstanceResourceDeploymentDescription const& s);

      InstanceResourceDeploymentDescription&
      operator= (InstanceResourceDeploymentDescription const& s);

      private:
      char regulator__;
    };


    class XSC_XML_Handlers_Export InstanceDeploymentDescription : public ::XSCRT::Type
    {
      typedef ::XSCRT::Type Base;

      public:
      typedef ACE_Refcounted_Auto_Ptr < InstanceDeploymentDescription, ACE_Null_Mutex > _ptr;

      // name
      //
      public:
      ::XMLSchema::string< ACE_TCHAR > const& name () const;
      void name (::XMLSchema::string< ACE_TCHAR > const& );

      protected:
      ::std::auto_ptr< ::XMLSchema::string< ACE_TCHAR > > name_;

      // node
      //
      public:
      ::XMLSchema::string< ACE_TCHAR > const& node () const;
      void node (::XMLSchema::string< ACE_TCHAR > const& );

      protected:
      ::std::auto_ptr< ::XMLSchema::string< ACE_TCHAR > > node_;

      // source
      //
      public:
      ::XMLSchema::string< ACE_TCHAR > const& source () const;
      void source (::XMLSchema::string< ACE_TCHAR > const& );

      protected:
      ::std::auto_ptr< ::XMLSchema::string< ACE_TCHAR > > source_;

      // implementation
      //
      public:
      ::CIAO::Config_Handlers::IdRef const& implementation () const;
      void implementation (::CIAO::Config_Handlers::IdRef const& );

      protected:
      ::std::auto_ptr< ::CIAO::Config_Handlers::IdRef > implementation_;

      // configProperty
      //
      public:
      typedef ::std::list< ACE_Refcounted_Auto_Ptr < ::CIAO::Config_Handlers::Property, ACE_Null_Mutex > >::iterator configProperty_iterator;
      typedef ::std::list< ACE_Refcounted_Auto_Ptr < ::CIAO::Config_Handlers::Property, ACE_Null_Mutex > >::const_iterator configProperty_const_iterator;
      configProperty_iterator begin_configProperty ();
      configProperty_iterator end_configProperty ();
      configProperty_const_iterator begin_configProperty () const;
      configProperty_const_iterator end_configProperty () const;
      void add_configProperty ( ACE_Refcounted_Auto_Ptr < ::CIAO::Config_Handlers::Property, ACE_Null_Mutex > const& );
      XSCRT::Type* configProperty_ptr ( std::basic_string<ACE_TCHAR> idref );
      size_t count_configProperty (void) const;

      protected:
      ::std::list< ACE_Refcounted_Auto_Ptr < ::CIAO::Config_Handlers::Property, ACE_Null_Mutex > > configProperty_;

      // deployedResource
      //
      public:
      typedef ::std::list< ACE_Refcounted_Auto_Ptr < ::CIAO::Config_Handlers::InstanceResourceDeploymentDescription, ACE_Null_Mutex > >::iterator deployedResource_iterator;
      typedef ::std::list< ACE_Refcounted_Auto_Ptr < ::CIAO::Config_Handlers::InstanceResourceDeploymentDescription, ACE_Null_Mutex > >::const_iterator deployedResource_const_iterator;
      deployedResource_iterator begin_deployedResource ();
      deployedResource_iterator end_deployedResource ();
      deployedResource_const_iterator begin_deployedResource () const;
      deployedResource_const_iterator end_deployedResource () const;
      void add_deployedResource ( ACE_Refcounted_Auto_Ptr < ::CIAO::Config_Handlers::InstanceResourceDeploymentDescription, ACE_Null_Mutex > const& );
      XSCRT::Type* deployedResource_ptr ( std::basic_string<ACE_TCHAR> idref );
      size_t count_deployedResource (void) const;

      protected:
      ::std::list< ACE_Refcounted_Auto_Ptr < ::CIAO::Config_Handlers::InstanceResourceDeploymentDescription, ACE_Null_Mutex > > deployedResource_;

      // deployedSharedResource
      //
      public:
      bool deployedSharedResource_p () const;
      ::CIAO::Config_Handlers::InstanceResourceDeploymentDescription const& deployedSharedResource () const;
      void deployedSharedResource (::CIAO::Config_Handlers::InstanceResourceDeploymentDescription const& );

      protected:
      ::std::auto_ptr< ::CIAO::Config_Handlers::InstanceResourceDeploymentDescription > deployedSharedResource_;

      // id
      //
      public:
      bool id_p () const;
      ::XMLSchema::ID< ACE_TCHAR > const& id () const;
      ::XMLSchema::ID< ACE_TCHAR >& id ();
      void id (::XMLSchema::ID< ACE_TCHAR > const& );

      protected:
      ::std::auto_ptr< ::XMLSchema::ID< ACE_TCHAR > > id_;

      public:
      InstanceDeploymentDescription (::XMLSchema::string< ACE_TCHAR > const& name__,
                                     ::XMLSchema::string< ACE_TCHAR > const& node__,
                                     ::XMLSchema::string< ACE_TCHAR > const& source__,
                                     ::CIAO::Config_Handlers::IdRef const& implementation__);

      InstanceDeploymentDescription (::XSCRT::XML::Element< ACE_TCHAR > const&);
      InstanceDeploymentDescription (InstanceDeploymentDescription const& s);

      InstanceDeploymentDescription&
      operator= (InstanceDeploymentDescription const& s);

      private:
      char regulator__;
    };


    class XSC_XML_Handlers_Export CCMComponentPortKind : public ::XSCRT::Type
    {
      public:
      CCMComponentPortKind (::XSCRT::XML::Element< ACE_TCHAR > const&);
      CCMComponentPortKind (::XSCRT::XML::Attribute< ACE_TCHAR > const&);

      static CCMComponentPortKind const Facet;
      static CCMComponentPortKind const SimplexReceptacle;
      static CCMComponentPortKind const MultiplexReceptacle;
      static CCMComponentPortKind const EventEmitter;
      static CCMComponentPortKind const EventPublisher;
      static CCMComponentPortKind const EventConsumer;
      static CCMComponentPortKind const ExtendedPort;
      static CCMComponentPortKind const MirrorPort;

      enum Value
      {
        Facet_l, SimplexReceptacle_l, MultiplexReceptacle_l, EventEmitter_l, EventPublisher_l, EventConsumer_l, ExtendedPort_l, MirrorPort_l
      };


      Value
      integral () const;

      friend bool XSC_XML_Handlers_Export
      operator== (CCMComponentPortKind const& a, CCMComponentPortKind const& b);

      friend bool XSC_XML_Handlers_Export
      operator!= (CCMComponentPortKind const& a, CCMComponentPortKind const& b);

      private:
      CCMComponentPortKind (Value v);

      Value v_;
    };

    bool XSC_XML_Handlers_Export operator== (CCMComponentPortKind const &a, CCMComponentPortKind const &b);

    bool XSC_XML_Handlers_Export operator!= (CCMComponentPortKind const &a, CCMComponentPortKind const &b);


    class XSC_XML_Handlers_Export ComponentPortDescription : public ::XSCRT::Type
    {
      typedef ::XSCRT::Type Base;

      public:
      typedef ACE_Refcounted_Auto_Ptr < ComponentPortDescription, ACE_Null_Mutex > _ptr;

      // name
      //
      public:
      ::XMLSchema::string< ACE_TCHAR > const& name () const;
      void name (::XMLSchema::string< ACE_TCHAR > const& );

      protected:
      ::std::auto_ptr< ::XMLSchema::string< ACE_TCHAR > > name_;

      // specificType
      //
      public:
      bool specificType_p () const;
      ::XMLSchema::string< ACE_TCHAR > const& specificType () const;
      void specificType (::XMLSchema::string< ACE_TCHAR > const& );

      protected:
      ::std::auto_ptr< ::XMLSchema::string< ACE_TCHAR > > specificType_;

      // supportedType
      //
      public:
      typedef ::std::list< ACE_Refcounted_Auto_Ptr < ::XMLSchema::string< ACE_TCHAR >, ACE_Null_Mutex > >::iterator supportedType_iterator;
      typedef ::std::list< ACE_Refcounted_Auto_Ptr < ::XMLSchema::string< ACE_TCHAR >, ACE_Null_Mutex > >::const_iterator supportedType_const_iterator;
      supportedType_iterator begin_supportedType ();
      supportedType_iterator end_supportedType ();
      supportedType_const_iterator begin_supportedType () const;
      supportedType_const_iterator end_supportedType () const;
      void add_supportedType ( ACE_Refcounted_Auto_Ptr < ::XMLSchema::string< ACE_TCHAR >, ACE_Null_Mutex > const& );
      XSCRT::Type* supportedType_ptr ( std::basic_string<ACE_TCHAR> idref );
      size_t count_supportedType (void) const;

      protected:
      ::std::list< ACE_Refcounted_Auto_Ptr < ::XMLSchema::string< ACE_TCHAR >, ACE_Null_Mutex > > supportedType_;

      // provider
      //
      public:
      ::XMLSchema::boolean const& provider () const;
      void provider (::XMLSchema::boolean const& );

      protected:
      ::std::auto_ptr< ::XMLSchema::boolean > provider_;

      // exclusiveProvider
      //
      public:
      ::XMLSchema::boolean const& exclusiveProvider () const;
      void exclusiveProvider (::XMLSchema::boolean const& );

      protected:
      ::std::auto_ptr< ::XMLSchema::boolean > exclusiveProvider_;

      // exclusiveUser
      //
      public:
      ::XMLSchema::boolean const& exclusiveUser () const;
      void exclusiveUser (::XMLSchema::boolean const& );

      protected:
      ::std::auto_ptr< ::XMLSchema::boolean > exclusiveUser_;

      // optional
      //
      public:
      ::XMLSchema::boolean const& optional () const;
      void optional (::XMLSchema::boolean const& );

      protected:
      ::std::auto_ptr< ::XMLSchema::boolean > optional_;

      // kind
      //
      public:
      ::CIAO::Config_Handlers::CCMComponentPortKind const& kind () const;
      void kind (::CIAO::Config_Handlers::CCMComponentPortKind const& );

      protected:
      ::std::auto_ptr< ::CIAO::Config_Handlers::CCMComponentPortKind > kind_;

      // templateParam
      //
      public:
      typedef ::std::list< ACE_Refcounted_Auto_Ptr < ::XMLSchema::string< ACE_TCHAR >, ACE_Null_Mutex > >::iterator templateParam_iterator;
      typedef ::std::list< ACE_Refcounted_Auto_Ptr < ::XMLSchema::string< ACE_TCHAR >, ACE_Null_Mutex > >::const_iterator templateParam_const_iterator;
      templateParam_iterator begin_templateParam ();
      templateParam_iterator end_templateParam ();
      templateParam_const_iterator begin_templateParam () const;
      templateParam_const_iterator end_templateParam () const;
      void add_templateParam ( ACE_Refcounted_Auto_Ptr < ::XMLSchema::string< ACE_TCHAR >, ACE_Null_Mutex > const& );
      XSCRT::Type* templateParam_ptr ( std::basic_string<ACE_TCHAR> idref );
      size_t count_templateParam (void) const;

      protected:
      ::std::list< ACE_Refcounted_Auto_Ptr < ::XMLSchema::string< ACE_TCHAR >, ACE_Null_Mutex > > templateParam_;

      public:
      ComponentPortDescription (::XMLSchema::string< ACE_TCHAR > const& name__,
                                ::XMLSchema::boolean const& provider__,
                                ::XMLSchema::boolean const& exclusiveProvider__,
                                ::XMLSchema::boolean const& exclusiveUser__,
                                ::XMLSchema::boolean const& optional__,
                                ::CIAO::Config_Handlers::CCMComponentPortKind const& kind__);

      ComponentPortDescription (::XSCRT::XML::Element< ACE_TCHAR > const&);
      ComponentPortDescription (ComponentPortDescription const& s);

      ComponentPortDescription&
      operator= (ComponentPortDescription const& s);

      private:
      char regulator__;
    };


    class XSC_XML_Handlers_Export ComponentPropertyDescription : public ::XSCRT::Type
    {
      typedef ::XSCRT::Type Base;

      public:
      typedef ACE_Refcounted_Auto_Ptr < ComponentPropertyDescription, ACE_Null_Mutex > _ptr;

      // name
      //
      public:
      ::XMLSchema::string< ACE_TCHAR > const& name () const;
      void name (::XMLSchema::string< ACE_TCHAR > const& );

      protected:
      ::std::auto_ptr< ::XMLSchema::string< ACE_TCHAR > > name_;

      // type
      //
      public:
      ::CIAO::Config_Handlers::DataType const& type () const;
      void type (::CIAO::Config_Handlers::DataType const& );

      protected:
      ::std::auto_ptr< ::CIAO::Config_Handlers::DataType > type_;

      public:
      ComponentPropertyDescription (::XMLSchema::string< ACE_TCHAR > const& name__,
                                    ::CIAO::Config_Handlers::DataType const& type__);

      ComponentPropertyDescription (::XSCRT::XML::Element< ACE_TCHAR > const&);
      ComponentPropertyDescription (ComponentPropertyDescription const& s);

      ComponentPropertyDescription&
      operator= (ComponentPropertyDescription const& s);

      private:
      char regulator__;
    };


    class XSC_XML_Handlers_Export ComponentExternalPortEndpoint : public ::XSCRT::Type
    {
      typedef ::XSCRT::Type Base;

      public:
      typedef ACE_Refcounted_Auto_Ptr < ComponentExternalPortEndpoint, ACE_Null_Mutex > _ptr;

      // portName
      //
      public:
      ::XMLSchema::string< ACE_TCHAR > const& portName () const;
      void portName (::XMLSchema::string< ACE_TCHAR > const& );

      protected:
      ::std::auto_ptr< ::XMLSchema::string< ACE_TCHAR > > portName_;

      public:
      ComponentExternalPortEndpoint (::XMLSchema::string< ACE_TCHAR > const& portName__);

      ComponentExternalPortEndpoint (::XSCRT::XML::Element< ACE_TCHAR > const&);
      ComponentExternalPortEndpoint (ComponentExternalPortEndpoint const& s);

      ComponentExternalPortEndpoint&
      operator= (ComponentExternalPortEndpoint const& s);

      private:
      char regulator__;
    };


    class XSC_XML_Handlers_Export PlanSubcomponentPortEndpoint : public ::XSCRT::Type
    {
      typedef ::XSCRT::Type Base;

      public:
      typedef ACE_Refcounted_Auto_Ptr < PlanSubcomponentPortEndpoint, ACE_Null_Mutex > _ptr;

      // portName
      //
      public:
      ::XMLSchema::string< ACE_TCHAR > const& portName () const;
      void portName (::XMLSchema::string< ACE_TCHAR > const& );

      protected:
      ::std::auto_ptr< ::XMLSchema::string< ACE_TCHAR > > portName_;

      // provider
      //
      public:
      bool provider_p () const;
      ::XMLSchema::string< ACE_TCHAR > const& provider () const;
      void provider (::XMLSchema::string< ACE_TCHAR > const& );

      protected:
      ::std::auto_ptr< ::XMLSchema::string< ACE_TCHAR > > provider_;

      // kind
      //
      public:
      ::CIAO::Config_Handlers::CCMComponentPortKind const& kind () const;
      void kind (::CIAO::Config_Handlers::CCMComponentPortKind const& );

      protected:
      ::std::auto_ptr< ::CIAO::Config_Handlers::CCMComponentPortKind > kind_;

      // instance
      //
      public:
      ::CIAO::Config_Handlers::IdRef const& instance () const;
      void instance (::CIAO::Config_Handlers::IdRef const& );

      protected:
      ::std::auto_ptr< ::CIAO::Config_Handlers::IdRef > instance_;

      public:
      PlanSubcomponentPortEndpoint (::XMLSchema::string< ACE_TCHAR > const& portName__,
                                    ::CIAO::Config_Handlers::CCMComponentPortKind const& kind__,
                                    ::CIAO::Config_Handlers::IdRef const& instance__);

      PlanSubcomponentPortEndpoint (::XSCRT::XML::Element< ACE_TCHAR > const&);
      PlanSubcomponentPortEndpoint (PlanSubcomponentPortEndpoint const& s);

      PlanSubcomponentPortEndpoint&
      operator= (PlanSubcomponentPortEndpoint const& s);

      private:
      char regulator__;
    };


    class XSC_XML_Handlers_Export ExternalReferenceEndpoint : public ::XSCRT::Type
    {
      typedef ::XSCRT::Type Base;

      public:
      typedef ACE_Refcounted_Auto_Ptr < ExternalReferenceEndpoint, ACE_Null_Mutex > _ptr;

      // location
      //
      public:
      ::XMLSchema::string< ACE_TCHAR > const& location () const;
      void location (::XMLSchema::string< ACE_TCHAR > const& );

      protected:
      ::std::auto_ptr< ::XMLSchema::string< ACE_TCHAR > > location_;

      // provider
      //
      public:
      ::XMLSchema::boolean const& provider () const;
      void provider (::XMLSchema::boolean const& );

      protected:
      ::std::auto_ptr< ::XMLSchema::boolean > provider_;

      // portName
      //
      public:
      bool portName_p () const;
      ::XMLSchema::string< ACE_TCHAR > const& portName () const;
      void portName (::XMLSchema::string< ACE_TCHAR > const& );

      protected:
      ::std::auto_ptr< ::XMLSchema::string< ACE_TCHAR > > portName_;

      // supportedType
      //
      public:
      typedef ::std::list< ACE_Refcounted_Auto_Ptr < ::XMLSchema::string< ACE_TCHAR >, ACE_Null_Mutex > >::iterator supportedType_iterator;
      typedef ::std::list< ACE_Refcounted_Auto_Ptr < ::XMLSchema::string< ACE_TCHAR >, ACE_Null_Mutex > >::const_iterator supportedType_const_iterator;
      supportedType_iterator begin_supportedType ();
      supportedType_iterator end_supportedType ();
      supportedType_const_iterator begin_supportedType () const;
      supportedType_const_iterator end_supportedType () const;
      void add_supportedType ( ACE_Refcounted_Auto_Ptr < ::XMLSchema::string< ACE_TCHAR >, ACE_Null_Mutex > const& );
      XSCRT::Type* supportedType_ptr ( std::basic_string<ACE_TCHAR> idref );
      size_t count_supportedType (void) const;

      protected:
      ::std::list< ACE_Refcounted_Auto_Ptr < ::XMLSchema::string< ACE_TCHAR >, ACE_Null_Mutex > > supportedType_;

      public:
      ExternalReferenceEndpoint (::XMLSchema::string< ACE_TCHAR > const& location__,
                                 ::XMLSchema::boolean const& provider__);

      ExternalReferenceEndpoint (::XSCRT::XML::Element< ACE_TCHAR > const&);
      ExternalReferenceEndpoint (ExternalReferenceEndpoint const& s);

      ExternalReferenceEndpoint&
      operator= (ExternalReferenceEndpoint const& s);

      private:
      char regulator__;
    };


    class XSC_XML_Handlers_Export ConnectionResourceDeploymentDescription : public ::XSCRT::Type
    {
      typedef ::XSCRT::Type Base;

      public:
      typedef ACE_Refcounted_Auto_Ptr < ConnectionResourceDeploymentDescription, ACE_Null_Mutex > _ptr;

      // targetName
      //
      public:
      ::XMLSchema::string< ACE_TCHAR > const& targetName () const;
      void targetName (::XMLSchema::string< ACE_TCHAR > const& );

      protected:
      ::std::auto_ptr< ::XMLSchema::string< ACE_TCHAR > > targetName_;

      // requirementName
      //
      public:
      ::XMLSchema::string< ACE_TCHAR > const& requirementName () const;
      void requirementName (::XMLSchema::string< ACE_TCHAR > const& );

      protected:
      ::std::auto_ptr< ::XMLSchema::string< ACE_TCHAR > > requirementName_;

      // resourceName
      //
      public:
      ::XMLSchema::string< ACE_TCHAR > const& resourceName () const;
      void resourceName (::XMLSchema::string< ACE_TCHAR > const& );

      protected:
      ::std::auto_ptr< ::XMLSchema::string< ACE_TCHAR > > resourceName_;

      // property
      //
      public:
      typedef ::std::list< ACE_Refcounted_Auto_Ptr < ::CIAO::Config_Handlers::Property, ACE_Null_Mutex > >::iterator property_iterator;
      typedef ::std::list< ACE_Refcounted_Auto_Ptr < ::CIAO::Config_Handlers::Property, ACE_Null_Mutex > >::const_iterator property_const_iterator;
      property_iterator begin_property ();
      property_iterator end_property ();
      property_const_iterator begin_property () const;
      property_const_iterator end_property () const;
      void add_property ( ACE_Refcounted_Auto_Ptr < ::CIAO::Config_Handlers::Property, ACE_Null_Mutex > const& );
      XSCRT::Type* property_ptr ( std::basic_string<ACE_TCHAR> idref );
      size_t count_property (void) const;

      protected:
      ::std::list< ACE_Refcounted_Auto_Ptr < ::CIAO::Config_Handlers::Property, ACE_Null_Mutex > > property_;

      public:
      ConnectionResourceDeploymentDescription (::XMLSchema::string< ACE_TCHAR > const& targetName__,
                                               ::XMLSchema::string< ACE_TCHAR > const& requirementName__,
                                               ::XMLSchema::string< ACE_TCHAR > const& resourceName__);

      ConnectionResourceDeploymentDescription (::XSCRT::XML::Element< ACE_TCHAR > const&);
      ConnectionResourceDeploymentDescription (ConnectionResourceDeploymentDescription const& s);

      ConnectionResourceDeploymentDescription&
      operator= (ConnectionResourceDeploymentDescription const& s);

      private:
      char regulator__;
    };


    class XSC_XML_Handlers_Export PlanConnectionDescription : public ::XSCRT::Type
    {
      typedef ::XSCRT::Type Base;

      public:
      typedef ACE_Refcounted_Auto_Ptr < PlanConnectionDescription, ACE_Null_Mutex > _ptr;

      // name
      //
      public:
      ::XMLSchema::string< ACE_TCHAR > const& name () const;
      void name (::XMLSchema::string< ACE_TCHAR > const& );

      protected:
      ::std::auto_ptr< ::XMLSchema::string< ACE_TCHAR > > name_;

      // source
      //
      public:
      bool source_p () const;
      ::XMLSchema::string< ACE_TCHAR > const& source () const;
      void source (::XMLSchema::string< ACE_TCHAR > const& );

      protected:
      ::std::auto_ptr< ::XMLSchema::string< ACE_TCHAR > > source_;

      // deployRequirement
      //
      public:
      typedef ::std::list< ACE_Refcounted_Auto_Ptr < ::CIAO::Config_Handlers::Requirement, ACE_Null_Mutex > >::iterator deployRequirement_iterator;
      typedef ::std::list< ACE_Refcounted_Auto_Ptr < ::CIAO::Config_Handlers::Requirement, ACE_Null_Mutex > >::const_iterator deployRequirement_const_iterator;
      deployRequirement_iterator begin_deployRequirement ();
      deployRequirement_iterator end_deployRequirement ();
      deployRequirement_const_iterator begin_deployRequirement () const;
      deployRequirement_const_iterator end_deployRequirement () const;
      void add_deployRequirement ( ACE_Refcounted_Auto_Ptr < ::CIAO::Config_Handlers::Requirement, ACE_Null_Mutex > const& );
      XSCRT::Type* deployRequirement_ptr ( std::basic_string<ACE_TCHAR> idref );
      size_t count_deployRequirement (void) const;

      protected:
      ::std::list< ACE_Refcounted_Auto_Ptr < ::CIAO::Config_Handlers::Requirement, ACE_Null_Mutex > > deployRequirement_;

      // externalEndpoint
      //
      public:
      typedef ::std::list< ACE_Refcounted_Auto_Ptr < ::CIAO::Config_Handlers::ComponentExternalPortEndpoint, ACE_Null_Mutex > >::iterator externalEndpoint_iterator;
      typedef ::std::list< ACE_Refcounted_Auto_Ptr < ::CIAO::Config_Handlers::ComponentExternalPortEndpoint, ACE_Null_Mutex > >::const_iterator externalEndpoint_const_iterator;
      externalEndpoint_iterator begin_externalEndpoint ();
      externalEndpoint_iterator end_externalEndpoint ();
      externalEndpoint_const_iterator begin_externalEndpoint () const;
      externalEndpoint_const_iterator end_externalEndpoint () const;
      void add_externalEndpoint ( ACE_Refcounted_Auto_Ptr < ::CIAO::Config_Handlers::ComponentExternalPortEndpoint, ACE_Null_Mutex > const& );
      XSCRT::Type* externalEndpoint_ptr ( std::basic_string<ACE_TCHAR> idref );
      size_t count_externalEndpoint (void) const;

      protected:
      ::std::list< ACE_Refcounted_Auto_Ptr < ::CIAO::Config_Handlers::ComponentExternalPortEndpoint, ACE_Null_Mutex > > externalEndpoint_;

      // internalEndpoint
      //
      public:
      typedef ::std::list< ACE_Refcounted_Auto_Ptr < ::CIAO::Config_Handlers::PlanSubcomponentPortEndpoint, ACE_Null_Mutex > >::iterator internalEndpoint_iterator;
      typedef ::std::list< ACE_Refcounted_Auto_Ptr < ::CIAO::Config_Handlers::PlanSubcomponentPortEndpoint, ACE_Null_Mutex > >::const_iterator internalEndpoint_const_iterator;
      internalEndpoint_iterator begin_internalEndpoint ();
      internalEndpoint_iterator end_internalEndpoint ();
      internalEndpoint_const_iterator begin_internalEndpoint () const;
      internalEndpoint_const_iterator end_internalEndpoint () const;
      void add_internalEndpoint ( ACE_Refcounted_Auto_Ptr < ::CIAO::Config_Handlers::PlanSubcomponentPortEndpoint, ACE_Null_Mutex > const& );
      XSCRT::Type* internalEndpoint_ptr ( std::basic_string<ACE_TCHAR> idref );
      size_t count_internalEndpoint (void) const;

      protected:
      ::std::list< ACE_Refcounted_Auto_Ptr < ::CIAO::Config_Handlers::PlanSubcomponentPortEndpoint, ACE_Null_Mutex > > internalEndpoint_;

      // externalReference
      //
      public:
      typedef ::std::list< ACE_Refcounted_Auto_Ptr < ::CIAO::Config_Handlers::ExternalReferenceEndpoint, ACE_Null_Mutex > >::iterator externalReference_iterator;
      typedef ::std::list< ACE_Refcounted_Auto_Ptr < ::CIAO::Config_Handlers::ExternalReferenceEndpoint, ACE_Null_Mutex > >::const_iterator externalReference_const_iterator;
      externalReference_iterator begin_externalReference ();
      externalReference_iterator end_externalReference ();
      externalReference_const_iterator begin_externalReference () const;
      externalReference_const_iterator end_externalReference () const;
      void add_externalReference ( ACE_Refcounted_Auto_Ptr < ::CIAO::Config_Handlers::ExternalReferenceEndpoint, ACE_Null_Mutex > const& );
      XSCRT::Type* externalReference_ptr ( std::basic_string<ACE_TCHAR> idref );
      size_t count_externalReference (void) const;

      protected:
      ::std::list< ACE_Refcounted_Auto_Ptr < ::CIAO::Config_Handlers::ExternalReferenceEndpoint, ACE_Null_Mutex > > externalReference_;

      // deployedResource
      //
      public:
      typedef ::std::list< ACE_Refcounted_Auto_Ptr < ::CIAO::Config_Handlers::ConnectionResourceDeploymentDescription, ACE_Null_Mutex > >::iterator deployedResource_iterator;
      typedef ::std::list< ACE_Refcounted_Auto_Ptr < ::CIAO::Config_Handlers::ConnectionResourceDeploymentDescription, ACE_Null_Mutex > >::const_iterator deployedResource_const_iterator;
      deployedResource_iterator begin_deployedResource ();
      deployedResource_iterator end_deployedResource ();
      deployedResource_const_iterator begin_deployedResource () const;
      deployedResource_const_iterator end_deployedResource () const;
      void add_deployedResource ( ACE_Refcounted_Auto_Ptr < ::CIAO::Config_Handlers::ConnectionResourceDeploymentDescription, ACE_Null_Mutex > const& );
      XSCRT::Type* deployedResource_ptr ( std::basic_string<ACE_TCHAR> idref );
      size_t count_deployedResource (void) const;

      protected:
      ::std::list< ACE_Refcounted_Auto_Ptr < ::CIAO::Config_Handlers::ConnectionResourceDeploymentDescription, ACE_Null_Mutex > > deployedResource_;

      public:
      PlanConnectionDescription (::XMLSchema::string< ACE_TCHAR > const& name__);

      PlanConnectionDescription (::XSCRT::XML::Element< ACE_TCHAR > const&);
      PlanConnectionDescription (PlanConnectionDescription const& s);

      PlanConnectionDescription&
      operator= (PlanConnectionDescription const& s);

      private:
      char regulator__;
    };


    class XSC_XML_Handlers_Export ImplementationDependency : public ::XSCRT::Type
    {
      typedef ::XSCRT::Type Base;

      public:
      typedef ACE_Refcounted_Auto_Ptr < ImplementationDependency, ACE_Null_Mutex > _ptr;

      // requiredType
      //
      public:
      ::XMLSchema::string< ACE_TCHAR > const& requiredType () const;
      void requiredType (::XMLSchema::string< ACE_TCHAR > const& );

      protected:
      ::std::auto_ptr< ::XMLSchema::string< ACE_TCHAR > > requiredType_;

      public:
      ImplementationDependency (::XMLSchema::string< ACE_TCHAR > const& requiredType__);

      ImplementationDependency (::XSCRT::XML::Element< ACE_TCHAR > const&);
      ImplementationDependency (ImplementationDependency const& s);

      ImplementationDependency&
      operator= (ImplementationDependency const& s);

      private:
      char regulator__;
    };


    class XSC_XML_Handlers_Export Capability : public ::XSCRT::Type
    {
      typedef ::XSCRT::Type Base;

      public:
      typedef ACE_Refcounted_Auto_Ptr < Capability, ACE_Null_Mutex > _ptr;

      // name
      //
      public:
      ::XMLSchema::string< ACE_TCHAR > const& name () const;
      void name (::XMLSchema::string< ACE_TCHAR > const& );

      protected:
      ::std::auto_ptr< ::XMLSchema::string< ACE_TCHAR > > name_;

      // resourceType
      //
      public:
      typedef ::std::list< ACE_Refcounted_Auto_Ptr < ::XMLSchema::string< ACE_TCHAR >, ACE_Null_Mutex > >::iterator resourceType_iterator;
      typedef ::std::list< ACE_Refcounted_Auto_Ptr < ::XMLSchema::string< ACE_TCHAR >, ACE_Null_Mutex > >::const_iterator resourceType_const_iterator;
      resourceType_iterator begin_resourceType ();
      resourceType_iterator end_resourceType ();
      resourceType_const_iterator begin_resourceType () const;
      resourceType_const_iterator end_resourceType () const;
      void add_resourceType ( ACE_Refcounted_Auto_Ptr < ::XMLSchema::string< ACE_TCHAR >, ACE_Null_Mutex > const& );
      XSCRT::Type* resourceType_ptr ( std::basic_string<ACE_TCHAR> idref );
      size_t count_resourceType (void) const;

      protected:
      ::std::list< ACE_Refcounted_Auto_Ptr < ::XMLSchema::string< ACE_TCHAR >, ACE_Null_Mutex > > resourceType_;

      // property
      //
      public:
      typedef ::std::list< ACE_Refcounted_Auto_Ptr < ::CIAO::Config_Handlers::SatisfierProperty, ACE_Null_Mutex > >::iterator property_iterator;
      typedef ::std::list< ACE_Refcounted_Auto_Ptr < ::CIAO::Config_Handlers::SatisfierProperty, ACE_Null_Mutex > >::const_iterator property_const_iterator;
      property_iterator begin_property ();
      property_iterator end_property ();
      property_const_iterator begin_property () const;
      property_const_iterator end_property () const;
      void add_property ( ACE_Refcounted_Auto_Ptr < ::CIAO::Config_Handlers::SatisfierProperty, ACE_Null_Mutex > const& );
      XSCRT::Type* property_ptr ( std::basic_string<ACE_TCHAR> idref );
      size_t count_property (void) const;

      protected:
      ::std::list< ACE_Refcounted_Auto_Ptr < ::CIAO::Config_Handlers::SatisfierProperty, ACE_Null_Mutex > > property_;

      public:
      Capability (::XMLSchema::string< ACE_TCHAR > const& name__);

      Capability (::XSCRT::XML::Element< ACE_TCHAR > const&);
      Capability (Capability const& s);

      Capability&
      operator= (Capability const& s);

      private:
      char regulator__;
    };


    class XSC_XML_Handlers_Export ImplementationRequirement : public ::XSCRT::Type
    {
      typedef ::XSCRT::Type Base;

      public:
      typedef ACE_Refcounted_Auto_Ptr < ImplementationRequirement, ACE_Null_Mutex > _ptr;

      // resourceUsage
      //
      public:
      bool resourceUsage_p () const;
      ::CIAO::Config_Handlers::ResourceUsageKind const& resourceUsage () const;
      void resourceUsage (::CIAO::Config_Handlers::ResourceUsageKind const& );

      protected:
      ::std::auto_ptr< ::CIAO::Config_Handlers::ResourceUsageKind > resourceUsage_;

      // resourcePort
      //
      public:
      bool resourcePort_p () const;
      ::XMLSchema::string< ACE_TCHAR > const& resourcePort () const;
      void resourcePort (::XMLSchema::string< ACE_TCHAR > const& );

      protected:
      ::std::auto_ptr< ::XMLSchema::string< ACE_TCHAR > > resourcePort_;

      // componentPort
      //
      public:
      bool componentPort_p () const;
      ::XMLSchema::string< ACE_TCHAR > const& componentPort () const;
      void componentPort (::XMLSchema::string< ACE_TCHAR > const& );

      protected:
      ::std::auto_ptr< ::XMLSchema::string< ACE_TCHAR > > componentPort_;

      // resourceType
      //
      public:
      ::XMLSchema::string< ACE_TCHAR > const& resourceType () const;
      void resourceType (::XMLSchema::string< ACE_TCHAR > const& );

      protected:
      ::std::auto_ptr< ::XMLSchema::string< ACE_TCHAR > > resourceType_;

      // name
      //
      public:
      ::XMLSchema::string< ACE_TCHAR > const& name () const;
      void name (::XMLSchema::string< ACE_TCHAR > const& );

      protected:
      ::std::auto_ptr< ::XMLSchema::string< ACE_TCHAR > > name_;

      // property
      //
      public:
      typedef ::std::list< ACE_Refcounted_Auto_Ptr < ::CIAO::Config_Handlers::Property, ACE_Null_Mutex > >::iterator property_iterator;
      typedef ::std::list< ACE_Refcounted_Auto_Ptr < ::CIAO::Config_Handlers::Property, ACE_Null_Mutex > >::const_iterator property_const_iterator;
      property_iterator begin_property ();
      property_iterator end_property ();
      property_const_iterator begin_property () const;
      property_const_iterator end_property () const;
      void add_property ( ACE_Refcounted_Auto_Ptr < ::CIAO::Config_Handlers::Property, ACE_Null_Mutex > const& );
      XSCRT::Type* property_ptr ( std::basic_string<ACE_TCHAR> idref );
      size_t count_property (void) const;

      protected:
      ::std::list< ACE_Refcounted_Auto_Ptr < ::CIAO::Config_Handlers::Property, ACE_Null_Mutex > > property_;

      public:
      ImplementationRequirement (::XMLSchema::string< ACE_TCHAR > const& resourceType__,
                                 ::XMLSchema::string< ACE_TCHAR > const& name__);

      ImplementationRequirement (::XSCRT::XML::Element< ACE_TCHAR > const&);
      ImplementationRequirement (ImplementationRequirement const& s);

      ImplementationRequirement&
      operator= (ImplementationRequirement const& s);

      private:
      char regulator__;
    };


    class XSC_XML_Handlers_Export SubcomponentPortEndpoint : public ::XSCRT::Type
    {
      typedef ::XSCRT::Type Base;

      public:
      typedef ACE_Refcounted_Auto_Ptr < SubcomponentPortEndpoint, ACE_Null_Mutex > _ptr;

      // portName
      //
      public:
      ::XMLSchema::string< ACE_TCHAR > const& portName () const;
      void portName (::XMLSchema::string< ACE_TCHAR > const& );

      protected:
      ::std::auto_ptr< ::XMLSchema::string< ACE_TCHAR > > portName_;

      // instance
      //
      public:
      ::CIAO::Config_Handlers::IdRef const& instance () const;
      void instance (::CIAO::Config_Handlers::IdRef const& );

      protected:
      ::std::auto_ptr< ::CIAO::Config_Handlers::IdRef > instance_;

      public:
      SubcomponentPortEndpoint (::XMLSchema::string< ACE_TCHAR > const& portName__,
                                ::CIAO::Config_Handlers::IdRef const& instance__);

      SubcomponentPortEndpoint (::XSCRT::XML::Element< ACE_TCHAR > const&);
      SubcomponentPortEndpoint (SubcomponentPortEndpoint const& s);

      SubcomponentPortEndpoint&
      operator= (SubcomponentPortEndpoint const& s);

      private:
      char regulator__;
    };


    class XSC_XML_Handlers_Export AssemblyConnectionDescription : public ::XSCRT::Type
    {
      typedef ::XSCRT::Type Base;

      public:
      typedef ACE_Refcounted_Auto_Ptr < AssemblyConnectionDescription, ACE_Null_Mutex > _ptr;

      // name
      //
      public:
      ::XMLSchema::string< ACE_TCHAR > const& name () const;
      void name (::XMLSchema::string< ACE_TCHAR > const& );

      protected:
      ::std::auto_ptr< ::XMLSchema::string< ACE_TCHAR > > name_;

      // deployRequirement
      //
      public:
      typedef ::std::list< ACE_Refcounted_Auto_Ptr < ::CIAO::Config_Handlers::Requirement, ACE_Null_Mutex > >::iterator deployRequirement_iterator;
      typedef ::std::list< ACE_Refcounted_Auto_Ptr < ::CIAO::Config_Handlers::Requirement, ACE_Null_Mutex > >::const_iterator deployRequirement_const_iterator;
      deployRequirement_iterator begin_deployRequirement ();
      deployRequirement_iterator end_deployRequirement ();
      deployRequirement_const_iterator begin_deployRequirement () const;
      deployRequirement_const_iterator end_deployRequirement () const;
      void add_deployRequirement ( ACE_Refcounted_Auto_Ptr < ::CIAO::Config_Handlers::Requirement, ACE_Null_Mutex > const& );
      XSCRT::Type* deployRequirement_ptr ( std::basic_string<ACE_TCHAR> idref );
      size_t count_deployRequirement (void) const;

      protected:
      ::std::list< ACE_Refcounted_Auto_Ptr < ::CIAO::Config_Handlers::Requirement, ACE_Null_Mutex > > deployRequirement_;

      // internalEndpoint
      //
      public:
      typedef ::std::list< ACE_Refcounted_Auto_Ptr < ::CIAO::Config_Handlers::SubcomponentPortEndpoint, ACE_Null_Mutex > >::iterator internalEndpoint_iterator;
      typedef ::std::list< ACE_Refcounted_Auto_Ptr < ::CIAO::Config_Handlers::SubcomponentPortEndpoint, ACE_Null_Mutex > >::const_iterator internalEndpoint_const_iterator;
      internalEndpoint_iterator begin_internalEndpoint ();
      internalEndpoint_iterator end_internalEndpoint ();
      internalEndpoint_const_iterator begin_internalEndpoint () const;
      internalEndpoint_const_iterator end_internalEndpoint () const;
      void add_internalEndpoint ( ACE_Refcounted_Auto_Ptr < ::CIAO::Config_Handlers::SubcomponentPortEndpoint, ACE_Null_Mutex > const& );
      XSCRT::Type* internalEndpoint_ptr ( std::basic_string<ACE_TCHAR> idref );
      size_t count_internalEndpoint (void) const;

      protected:
      ::std::list< ACE_Refcounted_Auto_Ptr < ::CIAO::Config_Handlers::SubcomponentPortEndpoint, ACE_Null_Mutex > > internalEndpoint_;

      // externalEndpoint
      //
      public:
      typedef ::std::list< ACE_Refcounted_Auto_Ptr < ::CIAO::Config_Handlers::ComponentExternalPortEndpoint, ACE_Null_Mutex > >::iterator externalEndpoint_iterator;
      typedef ::std::list< ACE_Refcounted_Auto_Ptr < ::CIAO::Config_Handlers::ComponentExternalPortEndpoint, ACE_Null_Mutex > >::const_iterator externalEndpoint_const_iterator;
      externalEndpoint_iterator begin_externalEndpoint ();
      externalEndpoint_iterator end_externalEndpoint ();
      externalEndpoint_const_iterator begin_externalEndpoint () const;
      externalEndpoint_const_iterator end_externalEndpoint () const;
      void add_externalEndpoint ( ACE_Refcounted_Auto_Ptr < ::CIAO::Config_Handlers::ComponentExternalPortEndpoint, ACE_Null_Mutex > const& );
      XSCRT::Type* externalEndpoint_ptr ( std::basic_string<ACE_TCHAR> idref );
      size_t count_externalEndpoint (void) const;

      protected:
      ::std::list< ACE_Refcounted_Auto_Ptr < ::CIAO::Config_Handlers::ComponentExternalPortEndpoint, ACE_Null_Mutex > > externalEndpoint_;

      // externalReference
      //
      public:
      typedef ::std::list< ACE_Refcounted_Auto_Ptr < ::CIAO::Config_Handlers::ExternalReferenceEndpoint, ACE_Null_Mutex > >::iterator externalReference_iterator;
      typedef ::std::list< ACE_Refcounted_Auto_Ptr < ::CIAO::Config_Handlers::ExternalReferenceEndpoint, ACE_Null_Mutex > >::const_iterator externalReference_const_iterator;
      externalReference_iterator begin_externalReference ();
      externalReference_iterator end_externalReference ();
      externalReference_const_iterator begin_externalReference () const;
      externalReference_const_iterator end_externalReference () const;
      void add_externalReference ( ACE_Refcounted_Auto_Ptr < ::CIAO::Config_Handlers::ExternalReferenceEndpoint, ACE_Null_Mutex > const& );
      XSCRT::Type* externalReference_ptr ( std::basic_string<ACE_TCHAR> idref );
      size_t count_externalReference (void) const;

      protected:
      ::std::list< ACE_Refcounted_Auto_Ptr < ::CIAO::Config_Handlers::ExternalReferenceEndpoint, ACE_Null_Mutex > > externalReference_;

      public:
      AssemblyConnectionDescription (::XMLSchema::string< ACE_TCHAR > const& name__);

      AssemblyConnectionDescription (::XSCRT::XML::Element< ACE_TCHAR > const&);
      AssemblyConnectionDescription (AssemblyConnectionDescription const& s);

      AssemblyConnectionDescription&
      operator= (AssemblyConnectionDescription const& s);

      private:
      char regulator__;
    };


    class XSC_XML_Handlers_Export PlanLocalityKind : public ::XSCRT::Type
    {
      public:
      PlanLocalityKind (::XSCRT::XML::Element< ACE_TCHAR > const&);
      PlanLocalityKind (::XSCRT::XML::Attribute< ACE_TCHAR > const&);

      static PlanLocalityKind const SameProcess;
      static PlanLocalityKind const DifferentProcess;
      static PlanLocalityKind const NoConstraint;

      enum Value
      {
        SameProcess_l, DifferentProcess_l, NoConstraint_l
      };


      Value
      integral () const;

      friend bool XSC_XML_Handlers_Export
      operator== (PlanLocalityKind const& a, PlanLocalityKind const& b);

      friend bool XSC_XML_Handlers_Export
      operator!= (PlanLocalityKind const& a, PlanLocalityKind const& b);

      private:
      PlanLocalityKind (Value v);

      Value v_;
    };

    bool XSC_XML_Handlers_Export operator== (PlanLocalityKind const &a, PlanLocalityKind const &b);

    bool XSC_XML_Handlers_Export operator!= (PlanLocalityKind const &a, PlanLocalityKind const &b);


    class XSC_XML_Handlers_Export PlanLocality : public ::XSCRT::Type
    {
      typedef ::XSCRT::Type Base;

      public:
      typedef ACE_Refcounted_Auto_Ptr < PlanLocality, ACE_Null_Mutex > _ptr;

      // constraint
      //
      public:
      ::CIAO::Config_Handlers::PlanLocalityKind const& constraint () const;
      void constraint (::CIAO::Config_Handlers::PlanLocalityKind const& );

      protected:
      ::std::auto_ptr< ::CIAO::Config_Handlers::PlanLocalityKind > constraint_;

      // constrainedInstance
      //
      public:
      typedef ::std::list< ACE_Refcounted_Auto_Ptr < ::CIAO::Config_Handlers::IdRef, ACE_Null_Mutex > >::iterator constrainedInstance_iterator;
      typedef ::std::list< ACE_Refcounted_Auto_Ptr < ::CIAO::Config_Handlers::IdRef, ACE_Null_Mutex > >::const_iterator constrainedInstance_const_iterator;
      constrainedInstance_iterator begin_constrainedInstance ();
      constrainedInstance_iterator end_constrainedInstance ();
      constrainedInstance_const_iterator begin_constrainedInstance () const;
      constrainedInstance_const_iterator end_constrainedInstance () const;
      void add_constrainedInstance ( ACE_Refcounted_Auto_Ptr < ::CIAO::Config_Handlers::IdRef, ACE_Null_Mutex > const& );
      XSCRT::Type* constrainedInstance_ptr ( std::basic_string<ACE_TCHAR> idref );
      size_t count_constrainedInstance (void) const;

      protected:
      ::std::list< ACE_Refcounted_Auto_Ptr < ::CIAO::Config_Handlers::IdRef, ACE_Null_Mutex > > constrainedInstance_;

      public:
      PlanLocality (::CIAO::Config_Handlers::PlanLocalityKind const& constraint__,
                    ::std::list< ACE_Refcounted_Auto_Ptr < ::CIAO::Config_Handlers::IdRef, ACE_Null_Mutex > > const& constrainedInstance__);

      PlanLocality (::XSCRT::XML::Element< ACE_TCHAR > const&);
      PlanLocality (PlanLocality const& s);

      PlanLocality&
      operator= (PlanLocality const& s);

      private:
      char regulator__;
    };
  }
}

namespace CIAO
{
  namespace Config_Handlers
  {
  }
}

#include "XMLSchema/Traversal.hpp"

namespace CIAO
{
  namespace Config_Handlers
  {
    namespace Traversal
    {
      struct XSC_XML_Handlers_Export IdRef : ::XMLSchema::Traversal::Traverser< ::CIAO::Config_Handlers::IdRef >
      {
        virtual void
        traverse (Type&);

        virtual void
        traverse (Type const&);

        virtual void
        pre (Type&);

        virtual void
        pre (Type const&);

        virtual void
        href (Type&);

        virtual void
        href (Type const&);

        virtual void
        href_none (Type&);

        virtual void
        href_none (Type const&);

        virtual void
        idref (Type&);

        virtual void
        idref (Type const&);

        virtual void
        idref_none (Type&);

        virtual void
        idref_none (Type const&);

        virtual void
        post (Type&);

        virtual void
        post (Type const&);
      };

      typedef
      ::XMLSchema::Traversal::Traverser< ::CIAO::Config_Handlers::TCKind >
      TCKind;

      struct XSC_XML_Handlers_Export DataType : ::XMLSchema::Traversal::Traverser< ::CIAO::Config_Handlers::DataType >
      {
        virtual void
        traverse (Type&);

        virtual void
        traverse (Type const&);

        virtual void
        pre (Type&);

        virtual void
        pre (Type const&);

        virtual void
        kind (Type&);

        virtual void
        kind (Type const&);

        virtual void
        enum_ (Type&);

        virtual void
        enum_ (Type const&);

        virtual void
        enum_none (Type&);

        virtual void
        enum_none (Type const&);

        virtual void
        struct_ (Type&);

        virtual void
        struct_ (Type const&);

        virtual void
        struct_none (Type&);

        virtual void
        struct_none (Type const&);

        virtual void
        value (Type&);

        virtual void
        value (Type const&);

        virtual void
        value_none (Type&);

        virtual void
        value_none (Type const&);

        virtual void
        sequence (Type&);

        virtual void
        sequence (Type const&);

        virtual void
        sequence_none (Type&);

        virtual void
        sequence_none (Type const&);

        virtual void
        alias (Type&);

        virtual void
        alias (Type const&);

        virtual void
        alias_none (Type&);

        virtual void
        alias_none (Type const&);

        virtual void
        id (Type&);

        virtual void
        id (Type const&);

        virtual void
        id_none (Type&);

        virtual void
        id_none (Type const&);

        virtual void
        post (Type&);

        virtual void
        post (Type const&);
      };

      struct XSC_XML_Handlers_Export DataValue : ::XMLSchema::Traversal::Traverser< ::CIAO::Config_Handlers::DataValue >
      {
        virtual void
        traverse (Type&);

        virtual void
        traverse (Type const&);

        virtual void
        pre (Type&);

        virtual void
        pre (Type const&);

        virtual void
        short_ (Type&);

        virtual void
        short_ (Type const&);

        virtual void
        short_pre (Type&);

        virtual void
        short_pre (Type const&);

        virtual void
        short_next (Type&);

        virtual void
        short_next (Type const&);

        virtual void
        short_post (Type&);

        virtual void
        short_post (Type const&);

        virtual void
        short_none (Type&);

        virtual void
        short_none (Type const&);

        virtual void
        long_ (Type&);

        virtual void
        long_ (Type const&);

        virtual void
        long_pre (Type&);

        virtual void
        long_pre (Type const&);

        virtual void
        long_next (Type&);

        virtual void
        long_next (Type const&);

        virtual void
        long_post (Type&);

        virtual void
        long_post (Type const&);

        virtual void
        long_none (Type&);

        virtual void
        long_none (Type const&);

        virtual void
        ushort (Type&);

        virtual void
        ushort (Type const&);

        virtual void
        ushort_pre (Type&);

        virtual void
        ushort_pre (Type const&);

        virtual void
        ushort_next (Type&);

        virtual void
        ushort_next (Type const&);

        virtual void
        ushort_post (Type&);

        virtual void
        ushort_post (Type const&);

        virtual void
        ushort_none (Type&);

        virtual void
        ushort_none (Type const&);

        virtual void
        ulong (Type&);

        virtual void
        ulong (Type const&);

        virtual void
        ulong_pre (Type&);

        virtual void
        ulong_pre (Type const&);

        virtual void
        ulong_next (Type&);

        virtual void
        ulong_next (Type const&);

        virtual void
        ulong_post (Type&);

        virtual void
        ulong_post (Type const&);

        virtual void
        ulong_none (Type&);

        virtual void
        ulong_none (Type const&);

        virtual void
        float_ (Type&);

        virtual void
        float_ (Type const&);

        virtual void
        float_pre (Type&);

        virtual void
        float_pre (Type const&);

        virtual void
        float_next (Type&);

        virtual void
        float_next (Type const&);

        virtual void
        float_post (Type&);

        virtual void
        float_post (Type const&);

        virtual void
        float_none (Type&);

        virtual void
        float_none (Type const&);

        virtual void
        double_ (Type&);

        virtual void
        double_ (Type const&);

        virtual void
        double_pre (Type&);

        virtual void
        double_pre (Type const&);

        virtual void
        double_next (Type&);

        virtual void
        double_next (Type const&);

        virtual void
        double_post (Type&);

        virtual void
        double_post (Type const&);

        virtual void
        double_none (Type&);

        virtual void
        double_none (Type const&);

        virtual void
        boolean (Type&);

        virtual void
        boolean (Type const&);

        virtual void
        boolean_pre (Type&);

        virtual void
        boolean_pre (Type const&);

        virtual void
        boolean_next (Type&);

        virtual void
        boolean_next (Type const&);

        virtual void
        boolean_post (Type&);

        virtual void
        boolean_post (Type const&);

        virtual void
        boolean_none (Type&);

        virtual void
        boolean_none (Type const&);

        virtual void
        octet (Type&);

        virtual void
        octet (Type const&);

        virtual void
        octet_pre (Type&);

        virtual void
        octet_pre (Type const&);

        virtual void
        octet_next (Type&);

        virtual void
        octet_next (Type const&);

        virtual void
        octet_post (Type&);

        virtual void
        octet_post (Type const&);

        virtual void
        octet_none (Type&);

        virtual void
        octet_none (Type const&);

        virtual void
        enum_ (Type&);

        virtual void
        enum_ (Type const&);

        virtual void
        enum_pre (Type&);

        virtual void
        enum_pre (Type const&);

        virtual void
        enum_next (Type&);

        virtual void
        enum_next (Type const&);

        virtual void
        enum_post (Type&);

        virtual void
        enum_post (Type const&);

        virtual void
        enum_none (Type&);

        virtual void
        enum_none (Type const&);

        virtual void
        string (Type&);

        virtual void
        string (Type const&);

        virtual void
        string_pre (Type&);

        virtual void
        string_pre (Type const&);

        virtual void
        string_next (Type&);

        virtual void
        string_next (Type const&);

        virtual void
        string_post (Type&);

        virtual void
        string_post (Type const&);

        virtual void
        string_none (Type&);

        virtual void
        string_none (Type const&);

        virtual void
        longlong (Type&);

        virtual void
        longlong (Type const&);

        virtual void
        longlong_pre (Type&);

        virtual void
        longlong_pre (Type const&);

        virtual void
        longlong_next (Type&);

        virtual void
        longlong_next (Type const&);

        virtual void
        longlong_post (Type&);

        virtual void
        longlong_post (Type const&);

        virtual void
        longlong_none (Type&);

        virtual void
        longlong_none (Type const&);

        virtual void
        ulonglong (Type&);

        virtual void
        ulonglong (Type const&);

        virtual void
        ulonglong_pre (Type&);

        virtual void
        ulonglong_pre (Type const&);

        virtual void
        ulonglong_next (Type&);

        virtual void
        ulonglong_next (Type const&);

        virtual void
        ulonglong_post (Type&);

        virtual void
        ulonglong_post (Type const&);

        virtual void
        ulonglong_none (Type&);

        virtual void
        ulonglong_none (Type const&);

        virtual void
        longdouble (Type&);

        virtual void
        longdouble (Type const&);

        virtual void
        longdouble_pre (Type&);

        virtual void
        longdouble_pre (Type const&);

        virtual void
        longdouble_next (Type&);

        virtual void
        longdouble_next (Type const&);

        virtual void
        longdouble_post (Type&);

        virtual void
        longdouble_post (Type const&);

        virtual void
        longdouble_none (Type&);

        virtual void
        longdouble_none (Type const&);

        virtual void
        element (Type&);

        virtual void
        element (Type const&);

        virtual void
        element_pre (Type&);

        virtual void
        element_pre (Type const&);

        virtual void
        element_next (Type&);

        virtual void
        element_next (Type const&);

        virtual void
        element_post (Type&);

        virtual void
        element_post (Type const&);

        virtual void
        element_none (Type&);

        virtual void
        element_none (Type const&);

        virtual void
        member (Type&);

        virtual void
        member (Type const&);

        virtual void
        member_pre (Type&);

        virtual void
        member_pre (Type const&);

        virtual void
        member_next (Type&);

        virtual void
        member_next (Type const&);

        virtual void
        member_post (Type&);

        virtual void
        member_post (Type const&);

        virtual void
        member_none (Type&);

        virtual void
        member_none (Type const&);

        virtual void
        post (Type&);

        virtual void
        post (Type const&);
      };

      struct XSC_XML_Handlers_Export AliasType : ::XMLSchema::Traversal::Traverser< ::CIAO::Config_Handlers::AliasType >
      {
        virtual void
        traverse (Type&);

        virtual void
        traverse (Type const&);

        virtual void
        pre (Type&);

        virtual void
        pre (Type const&);

        virtual void
        name (Type&);

        virtual void
        name (Type const&);

        virtual void
        typeId (Type&);

        virtual void
        typeId (Type const&);

        virtual void
        elementType (Type&);

        virtual void
        elementType (Type const&);

        virtual void
        post (Type&);

        virtual void
        post (Type const&);
      };

      struct XSC_XML_Handlers_Export EnumType : ::XMLSchema::Traversal::Traverser< ::CIAO::Config_Handlers::EnumType >
      {
        virtual void
        traverse (Type&);

        virtual void
        traverse (Type const&);

        virtual void
        pre (Type&);

        virtual void
        pre (Type const&);

        virtual void
        name (Type&);

        virtual void
        name (Type const&);

        virtual void
        typeId (Type&);

        virtual void
        typeId (Type const&);

        virtual void
        member (Type&);

        virtual void
        member (Type const&);

        virtual void
        member_pre (Type&);

        virtual void
        member_pre (Type const&);

        virtual void
        member_next (Type&);

        virtual void
        member_next (Type const&);

        virtual void
        member_post (Type&);

        virtual void
        member_post (Type const&);

        virtual void
        post (Type&);

        virtual void
        post (Type const&);
      };

      struct XSC_XML_Handlers_Export StructType : ::XMLSchema::Traversal::Traverser< ::CIAO::Config_Handlers::StructType >
      {
        virtual void
        traverse (Type&);

        virtual void
        traverse (Type const&);

        virtual void
        pre (Type&);

        virtual void
        pre (Type const&);

        virtual void
        name (Type&);

        virtual void
        name (Type const&);

        virtual void
        typeId (Type&);

        virtual void
        typeId (Type const&);

        virtual void
        member (Type&);

        virtual void
        member (Type const&);

        virtual void
        member_pre (Type&);

        virtual void
        member_pre (Type const&);

        virtual void
        member_next (Type&);

        virtual void
        member_next (Type const&);

        virtual void
        member_post (Type&);

        virtual void
        member_post (Type const&);

        virtual void
        member_none (Type&);

        virtual void
        member_none (Type const&);

        virtual void
        post (Type&);

        virtual void
        post (Type const&);
      };

      struct XSC_XML_Handlers_Export StructMemberType : ::XMLSchema::Traversal::Traverser< ::CIAO::Config_Handlers::StructMemberType >
      {
        virtual void
        traverse (Type&);

        virtual void
        traverse (Type const&);

        virtual void
        pre (Type&);

        virtual void
        pre (Type const&);

        virtual void
        name (Type&);

        virtual void
        name (Type const&);

        virtual void
        type (Type&);

        virtual void
        type (Type const&);

        virtual void
        post (Type&);

        virtual void
        post (Type const&);
      };

      struct XSC_XML_Handlers_Export ValueType : ::XMLSchema::Traversal::Traverser< ::CIAO::Config_Handlers::ValueType >
      {
        virtual void
        traverse (Type&);

        virtual void
        traverse (Type const&);

        virtual void
        pre (Type&);

        virtual void
        pre (Type const&);

        virtual void
        name (Type&);

        virtual void
        name (Type const&);

        virtual void
        typeId (Type&);

        virtual void
        typeId (Type const&);

        virtual void
        modifier (Type&);

        virtual void
        modifier (Type const&);

        virtual void
        baseType (Type&);

        virtual void
        baseType (Type const&);

        virtual void
        member (Type&);

        virtual void
        member (Type const&);

        virtual void
        member_pre (Type&);

        virtual void
        member_pre (Type const&);

        virtual void
        member_next (Type&);

        virtual void
        member_next (Type const&);

        virtual void
        member_post (Type&);

        virtual void
        member_post (Type const&);

        virtual void
        member_none (Type&);

        virtual void
        member_none (Type const&);

        virtual void
        post (Type&);

        virtual void
        post (Type const&);
      };

      struct XSC_XML_Handlers_Export ValueMemberType : ::XMLSchema::Traversal::Traverser< ::CIAO::Config_Handlers::ValueMemberType >
      {
        virtual void
        traverse (Type&);

        virtual void
        traverse (Type const&);

        virtual void
        pre (Type&);

        virtual void
        pre (Type const&);

        virtual void
        name (Type&);

        virtual void
        name (Type const&);

        virtual void
        visibility (Type&);

        virtual void
        visibility (Type const&);

        virtual void
        type (Type&);

        virtual void
        type (Type const&);

        virtual void
        post (Type&);

        virtual void
        post (Type const&);
      };

      struct XSC_XML_Handlers_Export NamedValue : ::XMLSchema::Traversal::Traverser< ::CIAO::Config_Handlers::NamedValue >
      {
        virtual void
        traverse (Type&);

        virtual void
        traverse (Type const&);

        virtual void
        pre (Type&);

        virtual void
        pre (Type const&);

        virtual void
        name (Type&);

        virtual void
        name (Type const&);

        virtual void
        value (Type&);

        virtual void
        value (Type const&);

        virtual void
        post (Type&);

        virtual void
        post (Type const&);
      };

      struct XSC_XML_Handlers_Export SequenceType : ::XMLSchema::Traversal::Traverser< ::CIAO::Config_Handlers::SequenceType >
      {
        virtual void
        traverse (Type&);

        virtual void
        traverse (Type const&);

        virtual void
        pre (Type&);

        virtual void
        pre (Type const&);

        virtual void
        bound (Type&);

        virtual void
        bound (Type const&);

        virtual void
        bound_none (Type&);

        virtual void
        bound_none (Type const&);

        virtual void
        elementType (Type&);

        virtual void
        elementType (Type const&);

        virtual void
        post (Type&);

        virtual void
        post (Type const&);
      };

      struct XSC_XML_Handlers_Export Any : ::XMLSchema::Traversal::Traverser< ::CIAO::Config_Handlers::Any >
      {
        virtual void
        traverse (Type&);

        virtual void
        traverse (Type const&);

        virtual void
        pre (Type&);

        virtual void
        pre (Type const&);

        virtual void
        type (Type&);

        virtual void
        type (Type const&);

        virtual void
        value (Type&);

        virtual void
        value (Type const&);

        virtual void
        post (Type&);

        virtual void
        post (Type const&);
      };

      struct XSC_XML_Handlers_Export Property : ::XMLSchema::Traversal::Traverser< ::CIAO::Config_Handlers::Property >
      {
        virtual void
        traverse (Type&);

        virtual void
        traverse (Type const&);

        virtual void
        pre (Type&);

        virtual void
        pre (Type const&);

        virtual void
        name (Type&);

        virtual void
        name (Type const&);

        virtual void
        value (Type&);

        virtual void
        value (Type const&);

        virtual void
        post (Type&);

        virtual void
        post (Type const&);
      };

      typedef
      ::XMLSchema::Traversal::Traverser< ::CIAO::Config_Handlers::SatisfierPropertyKind >
      SatisfierPropertyKind;

      struct XSC_XML_Handlers_Export SatisfierProperty : ::XMLSchema::Traversal::Traverser< ::CIAO::Config_Handlers::SatisfierProperty >
      {
        virtual void
        traverse (Type&);

        virtual void
        traverse (Type const&);

        virtual void
        pre (Type&);

        virtual void
        pre (Type const&);

        virtual void
        name (Type&);

        virtual void
        name (Type const&);

        virtual void
        kind (Type&);

        virtual void
        kind (Type const&);

        virtual void
        dynamic (Type&);

        virtual void
        dynamic (Type const&);

        virtual void
        value (Type&);

        virtual void
        value (Type const&);

        virtual void
        post (Type&);

        virtual void
        post (Type const&);
      };

      struct XSC_XML_Handlers_Export Resource : ::XMLSchema::Traversal::Traverser< ::CIAO::Config_Handlers::Resource >
      {
        virtual void
        traverse (Type&);

        virtual void
        traverse (Type const&);

        virtual void
        pre (Type&);

        virtual void
        pre (Type const&);

        virtual void
        name (Type&);

        virtual void
        name (Type const&);

        virtual void
        resourceType (Type&);

        virtual void
        resourceType (Type const&);

        virtual void
        resourceType_pre (Type&);

        virtual void
        resourceType_pre (Type const&);

        virtual void
        resourceType_next (Type&);

        virtual void
        resourceType_next (Type const&);

        virtual void
        resourceType_post (Type&);

        virtual void
        resourceType_post (Type const&);

        virtual void
        property (Type&);

        virtual void
        property (Type const&);

        virtual void
        property_pre (Type&);

        virtual void
        property_pre (Type const&);

        virtual void
        property_next (Type&);

        virtual void
        property_next (Type const&);

        virtual void
        property_post (Type&);

        virtual void
        property_post (Type const&);

        virtual void
        property_none (Type&);

        virtual void
        property_none (Type const&);

        virtual void
        post (Type&);

        virtual void
        post (Type const&);
      };

      struct XSC_XML_Handlers_Export Requirement : ::XMLSchema::Traversal::Traverser< ::CIAO::Config_Handlers::Requirement >
      {
        virtual void
        traverse (Type&);

        virtual void
        traverse (Type const&);

        virtual void
        pre (Type&);

        virtual void
        pre (Type const&);

        virtual void
        name (Type&);

        virtual void
        name (Type const&);

        virtual void
        resourceType (Type&);

        virtual void
        resourceType (Type const&);

        virtual void
        property (Type&);

        virtual void
        property (Type const&);

        virtual void
        property_pre (Type&);

        virtual void
        property_pre (Type const&);

        virtual void
        property_next (Type&);

        virtual void
        property_next (Type const&);

        virtual void
        property_post (Type&);

        virtual void
        property_post (Type const&);

        virtual void
        property_none (Type&);

        virtual void
        property_none (Type const&);

        virtual void
        post (Type&);

        virtual void
        post (Type const&);
      };

      struct XSC_XML_Handlers_Export ResourceDeploymentDescription : ::XMLSchema::Traversal::Traverser< ::CIAO::Config_Handlers::ResourceDeploymentDescription >
      {
        virtual void
        traverse (Type&);

        virtual void
        traverse (Type const&);

        virtual void
        pre (Type&);

        virtual void
        pre (Type const&);

        virtual void
        requirementName (Type&);

        virtual void
        requirementName (Type const&);

        virtual void
        resourceName (Type&);

        virtual void
        resourceName (Type const&);

        virtual void
        property (Type&);

        virtual void
        property (Type const&);

        virtual void
        property_pre (Type&);

        virtual void
        property_pre (Type const&);

        virtual void
        property_next (Type&);

        virtual void
        property_next (Type const&);

        virtual void
        property_post (Type&);

        virtual void
        property_post (Type const&);

        virtual void
        property_none (Type&);

        virtual void
        property_none (Type const&);

        virtual void
        post (Type&);

        virtual void
        post (Type const&);
      };

      struct XSC_XML_Handlers_Export ArtifactDeploymentDescription : ::XMLSchema::Traversal::Traverser< ::CIAO::Config_Handlers::ArtifactDeploymentDescription >
      {
        virtual void
        traverse (Type&);

        virtual void
        traverse (Type const&);

        virtual void
        pre (Type&);

        virtual void
        pre (Type const&);

        virtual void
        name (Type&);

        virtual void
        name (Type const&);

        virtual void
        source (Type&);

        virtual void
        source (Type const&);

        virtual void
        source_pre (Type&);

        virtual void
        source_pre (Type const&);

        virtual void
        source_next (Type&);

        virtual void
        source_next (Type const&);

        virtual void
        source_post (Type&);

        virtual void
        source_post (Type const&);

        virtual void
        source_none (Type&);

        virtual void
        source_none (Type const&);

        virtual void
        node (Type&);

        virtual void
        node (Type const&);

        virtual void
        location (Type&);

        virtual void
        location (Type const&);

        virtual void
        location_pre (Type&);

        virtual void
        location_pre (Type const&);

        virtual void
        location_next (Type&);

        virtual void
        location_next (Type const&);

        virtual void
        location_post (Type&);

        virtual void
        location_post (Type const&);

        virtual void
        location_none (Type&);

        virtual void
        location_none (Type const&);

        virtual void
        execParameter (Type&);

        virtual void
        execParameter (Type const&);

        virtual void
        execParameter_pre (Type&);

        virtual void
        execParameter_pre (Type const&);

        virtual void
        execParameter_next (Type&);

        virtual void
        execParameter_next (Type const&);

        virtual void
        execParameter_post (Type&);

        virtual void
        execParameter_post (Type const&);

        virtual void
        execParameter_none (Type&);

        virtual void
        execParameter_none (Type const&);

        virtual void
        deployRequirement (Type&);

        virtual void
        deployRequirement (Type const&);

        virtual void
        deployRequirement_pre (Type&);

        virtual void
        deployRequirement_pre (Type const&);

        virtual void
        deployRequirement_next (Type&);

        virtual void
        deployRequirement_next (Type const&);

        virtual void
        deployRequirement_post (Type&);

        virtual void
        deployRequirement_post (Type const&);

        virtual void
        deployRequirement_none (Type&);

        virtual void
        deployRequirement_none (Type const&);

        virtual void
        deployedResource (Type&);

        virtual void
        deployedResource (Type const&);

        virtual void
        deployedResource_pre (Type&);

        virtual void
        deployedResource_pre (Type const&);

        virtual void
        deployedResource_next (Type&);

        virtual void
        deployedResource_next (Type const&);

        virtual void
        deployedResource_post (Type&);

        virtual void
        deployedResource_post (Type const&);

        virtual void
        deployedResource_none (Type&);

        virtual void
        deployedResource_none (Type const&);

        virtual void
        id (Type&);

        virtual void
        id (Type const&);

        virtual void
        id_none (Type&);

        virtual void
        id_none (Type const&);

        virtual void
        post (Type&);

        virtual void
        post (Type const&);
      };

      struct XSC_XML_Handlers_Export MonolithicDeploymentDescription : ::XMLSchema::Traversal::Traverser< ::CIAO::Config_Handlers::MonolithicDeploymentDescription >
      {
        virtual void
        traverse (Type&);

        virtual void
        traverse (Type const&);

        virtual void
        pre (Type&);

        virtual void
        pre (Type const&);

        virtual void
        name (Type&);

        virtual void
        name (Type const&);

        virtual void
        source (Type&);

        virtual void
        source (Type const&);

        virtual void
        source_pre (Type&);

        virtual void
        source_pre (Type const&);

        virtual void
        source_next (Type&);

        virtual void
        source_next (Type const&);

        virtual void
        source_post (Type&);

        virtual void
        source_post (Type const&);

        virtual void
        source_none (Type&);

        virtual void
        source_none (Type const&);

        virtual void
        artifact (Type&);

        virtual void
        artifact (Type const&);

        virtual void
        artifact_pre (Type&);

        virtual void
        artifact_pre (Type const&);

        virtual void
        artifact_next (Type&);

        virtual void
        artifact_next (Type const&);

        virtual void
        artifact_post (Type&);

        virtual void
        artifact_post (Type const&);

        virtual void
        artifact_none (Type&);

        virtual void
        artifact_none (Type const&);

        virtual void
        execParameter (Type&);

        virtual void
        execParameter (Type const&);

        virtual void
        execParameter_pre (Type&);

        virtual void
        execParameter_pre (Type const&);

        virtual void
        execParameter_next (Type&);

        virtual void
        execParameter_next (Type const&);

        virtual void
        execParameter_post (Type&);

        virtual void
        execParameter_post (Type const&);

        virtual void
        execParameter_none (Type&);

        virtual void
        execParameter_none (Type const&);

        virtual void
        deployRequirement (Type&);

        virtual void
        deployRequirement (Type const&);

        virtual void
        deployRequirement_pre (Type&);

        virtual void
        deployRequirement_pre (Type const&);

        virtual void
        deployRequirement_next (Type&);

        virtual void
        deployRequirement_next (Type const&);

        virtual void
        deployRequirement_post (Type&);

        virtual void
        deployRequirement_post (Type const&);

        virtual void
        deployRequirement_none (Type&);

        virtual void
        deployRequirement_none (Type const&);

        virtual void
        id (Type&);

        virtual void
        id (Type const&);

        virtual void
        id_none (Type&);

        virtual void
        id_none (Type const&);

        virtual void
        post (Type&);

        virtual void
        post (Type const&);
      };

      typedef
      ::XMLSchema::Traversal::Traverser< ::CIAO::Config_Handlers::ResourceUsageKind >
      ResourceUsageKind;

      struct XSC_XML_Handlers_Export InstanceResourceDeploymentDescription : ::XMLSchema::Traversal::Traverser< ::CIAO::Config_Handlers::InstanceResourceDeploymentDescription >
      {
        virtual void
        traverse (Type&);

        virtual void
        traverse (Type const&);

        virtual void
        pre (Type&);

        virtual void
        pre (Type const&);

        virtual void
        resourceUsage (Type&);

        virtual void
        resourceUsage (Type const&);

        virtual void
        requirementName (Type&);

        virtual void
        requirementName (Type const&);

        virtual void
        resourceName (Type&);

        virtual void
        resourceName (Type const&);

        virtual void
        property (Type&);

        virtual void
        property (Type const&);

        virtual void
        property_pre (Type&);

        virtual void
        property_pre (Type const&);

        virtual void
        property_next (Type&);

        virtual void
        property_next (Type const&);

        virtual void
        property_post (Type&);

        virtual void
        property_post (Type const&);

        virtual void
        property_none (Type&);

        virtual void
        property_none (Type const&);

        virtual void
        post (Type&);

        virtual void
        post (Type const&);
      };

      struct XSC_XML_Handlers_Export InstanceDeploymentDescription : ::XMLSchema::Traversal::Traverser< ::CIAO::Config_Handlers::InstanceDeploymentDescription >
      {
        virtual void
        traverse (Type&);

        virtual void
        traverse (Type const&);

        virtual void
        pre (Type&);

        virtual void
        pre (Type const&);

        virtual void
        name (Type&);

        virtual void
        name (Type const&);

        virtual void
        node (Type&);

        virtual void
        node (Type const&);

        virtual void
        source (Type&);

        virtual void
        source (Type const&);

        virtual void
        implementation (Type&);

        virtual void
        implementation (Type const&);

        virtual void
        configProperty (Type&);

        virtual void
        configProperty (Type const&);

        virtual void
        configProperty_pre (Type&);

        virtual void
        configProperty_pre (Type const&);

        virtual void
        configProperty_next (Type&);

        virtual void
        configProperty_next (Type const&);

        virtual void
        configProperty_post (Type&);

        virtual void
        configProperty_post (Type const&);

        virtual void
        configProperty_none (Type&);

        virtual void
        configProperty_none (Type const&);

        virtual void
        deployedResource (Type&);

        virtual void
        deployedResource (Type const&);

        virtual void
        deployedResource_pre (Type&);

        virtual void
        deployedResource_pre (Type const&);

        virtual void
        deployedResource_next (Type&);

        virtual void
        deployedResource_next (Type const&);

        virtual void
        deployedResource_post (Type&);

        virtual void
        deployedResource_post (Type const&);

        virtual void
        deployedResource_none (Type&);

        virtual void
        deployedResource_none (Type const&);

        virtual void
        deployedSharedResource (Type&);

        virtual void
        deployedSharedResource (Type const&);

        virtual void
        deployedSharedResource_none (Type&);

        virtual void
        deployedSharedResource_none (Type const&);

        virtual void
        id (Type&);

        virtual void
        id (Type const&);

        virtual void
        id_none (Type&);

        virtual void
        id_none (Type const&);

        virtual void
        post (Type&);

        virtual void
        post (Type const&);
      };

      typedef
      ::XMLSchema::Traversal::Traverser< ::CIAO::Config_Handlers::CCMComponentPortKind >
      CCMComponentPortKind;

      struct XSC_XML_Handlers_Export ComponentPortDescription : ::XMLSchema::Traversal::Traverser< ::CIAO::Config_Handlers::ComponentPortDescription >
      {
        virtual void
        traverse (Type&);

        virtual void
        traverse (Type const&);

        virtual void
        pre (Type&);

        virtual void
        pre (Type const&);

        virtual void
        name (Type&);

        virtual void
        name (Type const&);

        virtual void
        specificType (Type&);

        virtual void
        specificType (Type const&);

        virtual void
        specificType_none (Type&);

        virtual void
        specificType_none (Type const&);

        virtual void
        supportedType (Type&);

        virtual void
        supportedType (Type const&);

        virtual void
        supportedType_pre (Type&);

        virtual void
        supportedType_pre (Type const&);

        virtual void
        supportedType_next (Type&);

        virtual void
        supportedType_next (Type const&);

        virtual void
        supportedType_post (Type&);

        virtual void
        supportedType_post (Type const&);

        virtual void
        supportedType_none (Type&);

        virtual void
        supportedType_none (Type const&);

        virtual void
        provider (Type&);

        virtual void
        provider (Type const&);

        virtual void
        exclusiveProvider (Type&);

        virtual void
        exclusiveProvider (Type const&);

        virtual void
        exclusiveUser (Type&);

        virtual void
        exclusiveUser (Type const&);

        virtual void
        optional (Type&);

        virtual void
        optional (Type const&);

        virtual void
        kind (Type&);

        virtual void
        kind (Type const&);

        virtual void
        templateParam (Type&);

        virtual void
        templateParam (Type const&);

        virtual void
        templateParam_pre (Type&);

        virtual void
        templateParam_pre (Type const&);

        virtual void
        templateParam_next (Type&);

        virtual void
        templateParam_next (Type const&);

        virtual void
        templateParam_post (Type&);

        virtual void
        templateParam_post (Type const&);

        virtual void
        templateParam_none (Type&);

        virtual void
        templateParam_none (Type const&);

        virtual void
        post (Type&);

        virtual void
        post (Type const&);
      };

      struct XSC_XML_Handlers_Export ComponentPropertyDescription : ::XMLSchema::Traversal::Traverser< ::CIAO::Config_Handlers::ComponentPropertyDescription >
      {
        virtual void
        traverse (Type&);

        virtual void
        traverse (Type const&);

        virtual void
        pre (Type&);

        virtual void
        pre (Type const&);

        virtual void
        name (Type&);

        virtual void
        name (Type const&);

        virtual void
        type (Type&);

        virtual void
        type (Type const&);

        virtual void
        post (Type&);

        virtual void
        post (Type const&);
      };

      struct XSC_XML_Handlers_Export ComponentExternalPortEndpoint : ::XMLSchema::Traversal::Traverser< ::CIAO::Config_Handlers::ComponentExternalPortEndpoint >
      {
        virtual void
        traverse (Type&);

        virtual void
        traverse (Type const&);

        virtual void
        pre (Type&);

        virtual void
        pre (Type const&);

        virtual void
        portName (Type&);

        virtual void
        portName (Type const&);

        virtual void
        post (Type&);

        virtual void
        post (Type const&);
      };

      struct XSC_XML_Handlers_Export PlanSubcomponentPortEndpoint : ::XMLSchema::Traversal::Traverser< ::CIAO::Config_Handlers::PlanSubcomponentPortEndpoint >
      {
        virtual void
        traverse (Type&);

        virtual void
        traverse (Type const&);

        virtual void
        pre (Type&);

        virtual void
        pre (Type const&);

        virtual void
        portName (Type&);

        virtual void
        portName (Type const&);

        virtual void
        provider (Type&);

        virtual void
        provider (Type const&);

        virtual void
        provider_none (Type&);

        virtual void
        provider_none (Type const&);

        virtual void
        kind (Type&);

        virtual void
        kind (Type const&);

        virtual void
        instance (Type&);

        virtual void
        instance (Type const&);

        virtual void
        post (Type&);

        virtual void
        post (Type const&);
      };

      struct XSC_XML_Handlers_Export ExternalReferenceEndpoint : ::XMLSchema::Traversal::Traverser< ::CIAO::Config_Handlers::ExternalReferenceEndpoint >
      {
        virtual void
        traverse (Type&);

        virtual void
        traverse (Type const&);

        virtual void
        pre (Type&);

        virtual void
        pre (Type const&);

        virtual void
        location (Type&);

        virtual void
        location (Type const&);

        virtual void
        provider (Type&);

        virtual void
        provider (Type const&);

        virtual void
        portName (Type&);

        virtual void
        portName (Type const&);

        virtual void
        portName_none (Type&);

        virtual void
        portName_none (Type const&);

        virtual void
        supportedType (Type&);

        virtual void
        supportedType (Type const&);

        virtual void
        supportedType_pre (Type&);

        virtual void
        supportedType_pre (Type const&);

        virtual void
        supportedType_next (Type&);

        virtual void
        supportedType_next (Type const&);

        virtual void
        supportedType_post (Type&);

        virtual void
        supportedType_post (Type const&);

        virtual void
        supportedType_none (Type&);

        virtual void
        supportedType_none (Type const&);

        virtual void
        post (Type&);

        virtual void
        post (Type const&);
      };

      struct XSC_XML_Handlers_Export ConnectionResourceDeploymentDescription : ::XMLSchema::Traversal::Traverser< ::CIAO::Config_Handlers::ConnectionResourceDeploymentDescription >
      {
        virtual void
        traverse (Type&);

        virtual void
        traverse (Type const&);

        virtual void
        pre (Type&);

        virtual void
        pre (Type const&);

        virtual void
        targetName (Type&);

        virtual void
        targetName (Type const&);

        virtual void
        requirementName (Type&);

        virtual void
        requirementName (Type const&);

        virtual void
        resourceName (Type&);

        virtual void
        resourceName (Type const&);

        virtual void
        property (Type&);

        virtual void
        property (Type const&);

        virtual void
        property_pre (Type&);

        virtual void
        property_pre (Type const&);

        virtual void
        property_next (Type&);

        virtual void
        property_next (Type const&);

        virtual void
        property_post (Type&);

        virtual void
        property_post (Type const&);

        virtual void
        property_none (Type&);

        virtual void
        property_none (Type const&);

        virtual void
        post (Type&);

        virtual void
        post (Type const&);
      };

      struct XSC_XML_Handlers_Export PlanConnectionDescription : ::XMLSchema::Traversal::Traverser< ::CIAO::Config_Handlers::PlanConnectionDescription >
      {
        virtual void
        traverse (Type&);

        virtual void
        traverse (Type const&);

        virtual void
        pre (Type&);

        virtual void
        pre (Type const&);

        virtual void
        name (Type&);

        virtual void
        name (Type const&);

        virtual void
        source (Type&);

        virtual void
        source (Type const&);

        virtual void
        source_none (Type&);

        virtual void
        source_none (Type const&);

        virtual void
        deployRequirement (Type&);

        virtual void
        deployRequirement (Type const&);

        virtual void
        deployRequirement_pre (Type&);

        virtual void
        deployRequirement_pre (Type const&);

        virtual void
        deployRequirement_next (Type&);

        virtual void
        deployRequirement_next (Type const&);

        virtual void
        deployRequirement_post (Type&);

        virtual void
        deployRequirement_post (Type const&);

        virtual void
        deployRequirement_none (Type&);

        virtual void
        deployRequirement_none (Type const&);

        virtual void
        externalEndpoint (Type&);

        virtual void
        externalEndpoint (Type const&);

        virtual void
        externalEndpoint_pre (Type&);

        virtual void
        externalEndpoint_pre (Type const&);

        virtual void
        externalEndpoint_next (Type&);

        virtual void
        externalEndpoint_next (Type const&);

        virtual void
        externalEndpoint_post (Type&);

        virtual void
        externalEndpoint_post (Type const&);

        virtual void
        externalEndpoint_none (Type&);

        virtual void
        externalEndpoint_none (Type const&);

        virtual void
        internalEndpoint (Type&);

        virtual void
        internalEndpoint (Type const&);

        virtual void
        internalEndpoint_pre (Type&);

        virtual void
        internalEndpoint_pre (Type const&);

        virtual void
        internalEndpoint_next (Type&);

        virtual void
        internalEndpoint_next (Type const&);

        virtual void
        internalEndpoint_post (Type&);

        virtual void
        internalEndpoint_post (Type const&);

        virtual void
        internalEndpoint_none (Type&);

        virtual void
        internalEndpoint_none (Type const&);

        virtual void
        externalReference (Type&);

        virtual void
        externalReference (Type const&);

        virtual void
        externalReference_pre (Type&);

        virtual void
        externalReference_pre (Type const&);

        virtual void
        externalReference_next (Type&);

        virtual void
        externalReference_next (Type const&);

        virtual void
        externalReference_post (Type&);

        virtual void
        externalReference_post (Type const&);

        virtual void
        externalReference_none (Type&);

        virtual void
        externalReference_none (Type const&);

        virtual void
        deployedResource (Type&);

        virtual void
        deployedResource (Type const&);

        virtual void
        deployedResource_pre (Type&);

        virtual void
        deployedResource_pre (Type const&);

        virtual void
        deployedResource_next (Type&);

        virtual void
        deployedResource_next (Type const&);

        virtual void
        deployedResource_post (Type&);

        virtual void
        deployedResource_post (Type const&);

        virtual void
        deployedResource_none (Type&);

        virtual void
        deployedResource_none (Type const&);

        virtual void
        post (Type&);

        virtual void
        post (Type const&);
      };

      struct XSC_XML_Handlers_Export ImplementationDependency : ::XMLSchema::Traversal::Traverser< ::CIAO::Config_Handlers::ImplementationDependency >
      {
        virtual void
        traverse (Type&);

        virtual void
        traverse (Type const&);

        virtual void
        pre (Type&);

        virtual void
        pre (Type const&);

        virtual void
        requiredType (Type&);

        virtual void
        requiredType (Type const&);

        virtual void
        post (Type&);

        virtual void
        post (Type const&);
      };

      struct XSC_XML_Handlers_Export Capability : ::XMLSchema::Traversal::Traverser< ::CIAO::Config_Handlers::Capability >
      {
        virtual void
        traverse (Type&);

        virtual void
        traverse (Type const&);

        virtual void
        pre (Type&);

        virtual void
        pre (Type const&);

        virtual void
        name (Type&);

        virtual void
        name (Type const&);

        virtual void
        resourceType (Type&);

        virtual void
        resourceType (Type const&);

        virtual void
        resourceType_pre (Type&);

        virtual void
        resourceType_pre (Type const&);

        virtual void
        resourceType_next (Type&);

        virtual void
        resourceType_next (Type const&);

        virtual void
        resourceType_post (Type&);

        virtual void
        resourceType_post (Type const&);

        virtual void
        resourceType_none (Type&);

        virtual void
        resourceType_none (Type const&);

        virtual void
        property (Type&);

        virtual void
        property (Type const&);

        virtual void
        property_pre (Type&);

        virtual void
        property_pre (Type const&);

        virtual void
        property_next (Type&);

        virtual void
        property_next (Type const&);

        virtual void
        property_post (Type&);

        virtual void
        property_post (Type const&);

        virtual void
        property_none (Type&);

        virtual void
        property_none (Type const&);

        virtual void
        post (Type&);

        virtual void
        post (Type const&);
      };

      struct XSC_XML_Handlers_Export ImplementationRequirement : ::XMLSchema::Traversal::Traverser< ::CIAO::Config_Handlers::ImplementationRequirement >
      {
        virtual void
        traverse (Type&);

        virtual void
        traverse (Type const&);

        virtual void
        pre (Type&);

        virtual void
        pre (Type const&);

        virtual void
        resourceUsage (Type&);

        virtual void
        resourceUsage (Type const&);

        virtual void
        resourceUsage_none (Type&);

        virtual void
        resourceUsage_none (Type const&);

        virtual void
        resourcePort (Type&);

        virtual void
        resourcePort (Type const&);

        virtual void
        resourcePort_none (Type&);

        virtual void
        resourcePort_none (Type const&);

        virtual void
        componentPort (Type&);

        virtual void
        componentPort (Type const&);

        virtual void
        componentPort_none (Type&);

        virtual void
        componentPort_none (Type const&);

        virtual void
        resourceType (Type&);

        virtual void
        resourceType (Type const&);

        virtual void
        name (Type&);

        virtual void
        name (Type const&);

        virtual void
        property (Type&);

        virtual void
        property (Type const&);

        virtual void
        property_pre (Type&);

        virtual void
        property_pre (Type const&);

        virtual void
        property_next (Type&);

        virtual void
        property_next (Type const&);

        virtual void
        property_post (Type&);

        virtual void
        property_post (Type const&);

        virtual void
        property_none (Type&);

        virtual void
        property_none (Type const&);

        virtual void
        post (Type&);

        virtual void
        post (Type const&);
      };

      struct XSC_XML_Handlers_Export SubcomponentPortEndpoint : ::XMLSchema::Traversal::Traverser< ::CIAO::Config_Handlers::SubcomponentPortEndpoint >
      {
        virtual void
        traverse (Type&);

        virtual void
        traverse (Type const&);

        virtual void
        pre (Type&);

        virtual void
        pre (Type const&);

        virtual void
        portName (Type&);

        virtual void
        portName (Type const&);

        virtual void
        instance (Type&);

        virtual void
        instance (Type const&);

        virtual void
        post (Type&);

        virtual void
        post (Type const&);
      };

      struct XSC_XML_Handlers_Export AssemblyConnectionDescription : ::XMLSchema::Traversal::Traverser< ::CIAO::Config_Handlers::AssemblyConnectionDescription >
      {
        virtual void
        traverse (Type&);

        virtual void
        traverse (Type const&);

        virtual void
        pre (Type&);

        virtual void
        pre (Type const&);

        virtual void
        name (Type&);

        virtual void
        name (Type const&);

        virtual void
        deployRequirement (Type&);

        virtual void
        deployRequirement (Type const&);

        virtual void
        deployRequirement_pre (Type&);

        virtual void
        deployRequirement_pre (Type const&);

        virtual void
        deployRequirement_next (Type&);

        virtual void
        deployRequirement_next (Type const&);

        virtual void
        deployRequirement_post (Type&);

        virtual void
        deployRequirement_post (Type const&);

        virtual void
        deployRequirement_none (Type&);

        virtual void
        deployRequirement_none (Type const&);

        virtual void
        internalEndpoint (Type&);

        virtual void
        internalEndpoint (Type const&);

        virtual void
        internalEndpoint_pre (Type&);

        virtual void
        internalEndpoint_pre (Type const&);

        virtual void
        internalEndpoint_next (Type&);

        virtual void
        internalEndpoint_next (Type const&);

        virtual void
        internalEndpoint_post (Type&);

        virtual void
        internalEndpoint_post (Type const&);

        virtual void
        internalEndpoint_none (Type&);

        virtual void
        internalEndpoint_none (Type const&);

        virtual void
        externalEndpoint (Type&);

        virtual void
        externalEndpoint (Type const&);

        virtual void
        externalEndpoint_pre (Type&);

        virtual void
        externalEndpoint_pre (Type const&);

        virtual void
        externalEndpoint_next (Type&);

        virtual void
        externalEndpoint_next (Type const&);

        virtual void
        externalEndpoint_post (Type&);

        virtual void
        externalEndpoint_post (Type const&);

        virtual void
        externalEndpoint_none (Type&);

        virtual void
        externalEndpoint_none (Type const&);

        virtual void
        externalReference (Type&);

        virtual void
        externalReference (Type const&);

        virtual void
        externalReference_pre (Type&);

        virtual void
        externalReference_pre (Type const&);

        virtual void
        externalReference_next (Type&);

        virtual void
        externalReference_next (Type const&);

        virtual void
        externalReference_post (Type&);

        virtual void
        externalReference_post (Type const&);

        virtual void
        externalReference_none (Type&);

        virtual void
        externalReference_none (Type const&);

        virtual void
        post (Type&);

        virtual void
        post (Type const&);
      };

      typedef
      ::XMLSchema::Traversal::Traverser< ::CIAO::Config_Handlers::PlanLocalityKind >
      PlanLocalityKind;

      struct XSC_XML_Handlers_Export PlanLocality : ::XMLSchema::Traversal::Traverser< ::CIAO::Config_Handlers::PlanLocality >
      {
        virtual void
        traverse (Type&);

        virtual void
        traverse (Type const&);

        virtual void
        pre (Type&);

        virtual void
        pre (Type const&);

        virtual void
        constraint (Type&);

        virtual void
        constraint (Type const&);

        virtual void
        constrainedInstance (Type&);

        virtual void
        constrainedInstance (Type const&);

        virtual void
        constrainedInstance_pre (Type&);

        virtual void
        constrainedInstance_pre (Type const&);

        virtual void
        constrainedInstance_next (Type&);

        virtual void
        constrainedInstance_next (Type const&);

        virtual void
        constrainedInstance_post (Type&);

        virtual void
        constrainedInstance_post (Type const&);

        virtual void
        post (Type&);

        virtual void
        post (Type const&);
      };
    }
  }
}

#include "XMLSchema/Writer.hpp"

namespace CIAO
{
  namespace Config_Handlers
  {
    namespace Writer
    {
      struct IdRef : Traversal::IdRef,
      virtual ::XSCRT::Writer< ACE_TCHAR >
      {
        typedef ::CIAO::Config_Handlers::IdRef Type;
        IdRef (::XSCRT::XML::Element< ACE_TCHAR >&);

        virtual void
        traverse (Type &o)
        {
          this->traverse (const_cast <Type const &> (o));
        }

        virtual void
        traverse (Type const&);

        virtual void
        href (Type &o)
        {
          this->href (const_cast <Type const &> (o));
        }

        virtual void
        href (Type const&);

        virtual void
        idref (Type &o)
        {
          this->idref (const_cast <Type const &> (o));
        }

        virtual void
        idref (Type const&);

        protected:
        IdRef ();
      };

      struct TCKind : Traversal::TCKind,
      virtual ::XSCRT::Writer< ACE_TCHAR >
      {
        TCKind (::XSCRT::XML::Element< ACE_TCHAR >&);

        virtual void
        traverse (Type &o)
        {
          this->traverse (const_cast <Type const &> (o));
        }

        virtual void
        traverse (Type const&);

        protected:
        TCKind ();
      };

      struct DataType : Traversal::DataType,
      virtual ::XSCRT::Writer< ACE_TCHAR >
      {
        typedef ::CIAO::Config_Handlers::DataType Type;
        DataType (::XSCRT::XML::Element< ACE_TCHAR >&);

        virtual void
        traverse (Type &o)
        {
          this->traverse (const_cast <Type const &> (o));
        }

        virtual void
        traverse (Type const&);

        virtual void
        kind (Type &o)
        {
          this->kind (const_cast <Type const &> (o));
        }

        virtual void
        kind (Type const&);

        virtual void
        enum_ (Type &o)
        {
          this->enum_ (const_cast <Type const &> (o));
        }

        virtual void
        enum_ (Type const&);

        virtual void
        struct_ (Type &o)
        {
          this->struct_ (const_cast <Type const &> (o));
        }

        virtual void
        struct_ (Type const&);

        virtual void
        value (Type &o)
        {
          this->value (const_cast <Type const &> (o));
        }

        virtual void
        value (Type const&);

        virtual void
        sequence (Type &o)
        {
          this->sequence (const_cast <Type const &> (o));
        }

        virtual void
        sequence (Type const&);

        virtual void
        alias (Type &o)
        {
          this->alias (const_cast <Type const &> (o));
        }

        virtual void
        alias (Type const&);

        virtual void
        id (Type &o)
        {
          this->id (const_cast <Type const &> (o));
        }

        virtual void
        id (Type const&);

        protected:
        DataType ();
      };

      struct DataValue : Traversal::DataValue,
      virtual ::XSCRT::Writer< ACE_TCHAR >
      {
        typedef ::CIAO::Config_Handlers::DataValue Type;
        DataValue (::XSCRT::XML::Element< ACE_TCHAR >&);

        virtual void
        traverse (Type &o)
        {
          this->traverse (const_cast <Type const &> (o));
        }

        virtual void
        traverse (Type const&);

        virtual void
        short_pre (Type &o)
        {
          this->short_pre (const_cast <Type const &> (o));
        }

        virtual void
        short_pre (Type const&);

        virtual void
        short_next (Type &o)
        {
          this->short_next (const_cast <Type const &> (o));
        }

        virtual void
        short_next (Type const&);

        virtual void
        short_post (Type &o)
        {
          this->short_post (const_cast <Type const &> (o));
        }

        virtual void
        short_post (Type const&);

        virtual void
        long_pre (Type &o)
        {
          this->long_pre (const_cast <Type const &> (o));
        }

        virtual void
        long_pre (Type const&);

        virtual void
        long_next (Type &o)
        {
          this->long_next (const_cast <Type const &> (o));
        }

        virtual void
        long_next (Type const&);

        virtual void
        long_post (Type &o)
        {
          this->long_post (const_cast <Type const &> (o));
        }

        virtual void
        long_post (Type const&);

        virtual void
        ushort_pre (Type &o)
        {
          this->ushort_pre (const_cast <Type const &> (o));
        }

        virtual void
        ushort_pre (Type const&);

        virtual void
        ushort_next (Type &o)
        {
          this->ushort_next (const_cast <Type const &> (o));
        }

        virtual void
        ushort_next (Type const&);

        virtual void
        ushort_post (Type &o)
        {
          this->ushort_post (const_cast <Type const &> (o));
        }

        virtual void
        ushort_post (Type const&);

        virtual void
        ulong_pre (Type &o)
        {
          this->ulong_pre (const_cast <Type const &> (o));
        }

        virtual void
        ulong_pre (Type const&);

        virtual void
        ulong_next (Type &o)
        {
          this->ulong_next (const_cast <Type const &> (o));
        }

        virtual void
        ulong_next (Type const&);

        virtual void
        ulong_post (Type &o)
        {
          this->ulong_post (const_cast <Type const &> (o));
        }

        virtual void
        ulong_post (Type const&);

        virtual void
        float_pre (Type &o)
        {
          this->float_pre (const_cast <Type const &> (o));
        }

        virtual void
        float_pre (Type const&);

        virtual void
        float_next (Type &o)
        {
          this->float_next (const_cast <Type const &> (o));
        }

        virtual void
        float_next (Type const&);

        virtual void
        float_post (Type &o)
        {
          this->float_post (const_cast <Type const &> (o));
        }

        virtual void
        float_post (Type const&);

        virtual void
        double_pre (Type &o)
        {
          this->double_pre (const_cast <Type const &> (o));
        }

        virtual void
        double_pre (Type const&);

        virtual void
        double_next (Type &o)
        {
          this->double_next (const_cast <Type const &> (o));
        }

        virtual void
        double_next (Type const&);

        virtual void
        double_post (Type &o)
        {
          this->double_post (const_cast <Type const &> (o));
        }

        virtual void
        double_post (Type const&);

        virtual void
        boolean_pre (Type &o)
        {
          this->boolean_pre (const_cast <Type const &> (o));
        }

        virtual void
        boolean_pre (Type const&);

        virtual void
        boolean_next (Type &o)
        {
          this->boolean_next (const_cast <Type const &> (o));
        }

        virtual void
        boolean_next (Type const&);

        virtual void
        boolean_post (Type &o)
        {
          this->boolean_post (const_cast <Type const &> (o));
        }

        virtual void
        boolean_post (Type const&);

        virtual void
        octet_pre (Type &o)
        {
          this->octet_pre (const_cast <Type const &> (o));
        }

        virtual void
        octet_pre (Type const&);

        virtual void
        octet_next (Type &o)
        {
          this->octet_next (const_cast <Type const &> (o));
        }

        virtual void
        octet_next (Type const&);

        virtual void
        octet_post (Type &o)
        {
          this->octet_post (const_cast <Type const &> (o));
        }

        virtual void
        octet_post (Type const&);

        virtual void
        enum_pre (Type &o)
        {
          this->enum_pre (const_cast <Type const &> (o));
        }

        virtual void
        enum_pre (Type const&);

        virtual void
        enum_next (Type &o)
        {
          this->enum_next (const_cast <Type const &> (o));
        }

        virtual void
        enum_next (Type const&);

        virtual void
        enum_post (Type &o)
        {
          this->enum_post (const_cast <Type const &> (o));
        }

        virtual void
        enum_post (Type const&);

        virtual void
        string_pre (Type &o)
        {
          this->string_pre (const_cast <Type const &> (o));
        }

        virtual void
        string_pre (Type const&);

        virtual void
        string_next (Type &o)
        {
          this->string_next (const_cast <Type const &> (o));
        }

        virtual void
        string_next (Type const&);

        virtual void
        string_post (Type &o)
        {
          this->string_post (const_cast <Type const &> (o));
        }

        virtual void
        string_post (Type const&);

        virtual void
        longlong_pre (Type &o)
        {
          this->longlong_pre (const_cast <Type const &> (o));
        }

        virtual void
        longlong_pre (Type const&);

        virtual void
        longlong_next (Type &o)
        {
          this->longlong_next (const_cast <Type const &> (o));
        }

        virtual void
        longlong_next (Type const&);

        virtual void
        longlong_post (Type &o)
        {
          this->longlong_post (const_cast <Type const &> (o));
        }

        virtual void
        longlong_post (Type const&);

        virtual void
        ulonglong_pre (Type &o)
        {
          this->ulonglong_pre (const_cast <Type const &> (o));
        }

        virtual void
        ulonglong_pre (Type const&);

        virtual void
        ulonglong_next (Type &o)
        {
          this->ulonglong_next (const_cast <Type const &> (o));
        }

        virtual void
        ulonglong_next (Type const&);

        virtual void
        ulonglong_post (Type &o)
        {
          this->ulonglong_post (const_cast <Type const &> (o));
        }

        virtual void
        ulonglong_post (Type const&);

        virtual void
        longdouble_pre (Type &o)
        {
          this->longdouble_pre (const_cast <Type const &> (o));
        }

        virtual void
        longdouble_pre (Type const&);

        virtual void
        longdouble_next (Type &o)
        {
          this->longdouble_next (const_cast <Type const &> (o));
        }

        virtual void
        longdouble_next (Type const&);

        virtual void
        longdouble_post (Type &o)
        {
          this->longdouble_post (const_cast <Type const &> (o));
        }

        virtual void
        longdouble_post (Type const&);

        virtual void
        element_pre (Type &o)
        {
          this->element_pre (const_cast <Type const &> (o));
        }

        virtual void
        element_pre (Type const&);

        virtual void
        element_next (Type &o)
        {
          this->element_next (const_cast <Type const &> (o));
        }

        virtual void
        element_next (Type const&);

        virtual void
        element_post (Type &o)
        {
          this->element_post (const_cast <Type const &> (o));
        }

        virtual void
        element_post (Type const&);

        virtual void
        member_pre (Type &o)
        {
          this->member_pre (const_cast <Type const &> (o));
        }

        virtual void
        member_pre (Type const&);

        virtual void
        member_next (Type &o)
        {
          this->member_next (const_cast <Type const &> (o));
        }

        virtual void
        member_next (Type const&);

        virtual void
        member_post (Type &o)
        {
          this->member_post (const_cast <Type const &> (o));
        }

        virtual void
        member_post (Type const&);

        protected:
        DataValue ();
      };

      struct AliasType : Traversal::AliasType,
      virtual ::XSCRT::Writer< ACE_TCHAR >
      {
        typedef ::CIAO::Config_Handlers::AliasType Type;
        AliasType (::XSCRT::XML::Element< ACE_TCHAR >&);

        virtual void
        traverse (Type &o)
        {
          this->traverse (const_cast <Type const &> (o));
        }

        virtual void
        traverse (Type const&);

        virtual void
        name (Type &o)
        {
          this->name (const_cast <Type const &> (o));
        }

        virtual void
        name (Type const&);

        virtual void
        typeId (Type &o)
        {
          this->typeId (const_cast <Type const &> (o));
        }

        virtual void
        typeId (Type const&);

        virtual void
        elementType (Type &o)
        {
          this->elementType (const_cast <Type const &> (o));
        }

        virtual void
        elementType (Type const&);

        protected:
        AliasType ();
      };

      struct EnumType : Traversal::EnumType,
      virtual ::XSCRT::Writer< ACE_TCHAR >
      {
        typedef ::CIAO::Config_Handlers::EnumType Type;
        EnumType (::XSCRT::XML::Element< ACE_TCHAR >&);

        virtual void
        traverse (Type &o)
        {
          this->traverse (const_cast <Type const &> (o));
        }

        virtual void
        traverse (Type const&);

        virtual void
        name (Type &o)
        {
          this->name (const_cast <Type const &> (o));
        }

        virtual void
        name (Type const&);

        virtual void
        typeId (Type &o)
        {
          this->typeId (const_cast <Type const &> (o));
        }

        virtual void
        typeId (Type const&);

        virtual void
        member_pre (Type &o)
        {
          this->member_pre (const_cast <Type const &> (o));
        }

        virtual void
        member_pre (Type const&);

        virtual void
        member_next (Type &o)
        {
          this->member_next (const_cast <Type const &> (o));
        }

        virtual void
        member_next (Type const&);

        virtual void
        member_post (Type &o)
        {
          this->member_post (const_cast <Type const &> (o));
        }

        virtual void
        member_post (Type const&);

        protected:
        EnumType ();
      };

      struct StructType : Traversal::StructType,
      virtual ::XSCRT::Writer< ACE_TCHAR >
      {
        typedef ::CIAO::Config_Handlers::StructType Type;
        StructType (::XSCRT::XML::Element< ACE_TCHAR >&);

        virtual void
        traverse (Type &o)
        {
          this->traverse (const_cast <Type const &> (o));
        }

        virtual void
        traverse (Type const&);

        virtual void
        name (Type &o)
        {
          this->name (const_cast <Type const &> (o));
        }

        virtual void
        name (Type const&);

        virtual void
        typeId (Type &o)
        {
          this->typeId (const_cast <Type const &> (o));
        }

        virtual void
        typeId (Type const&);

        virtual void
        member_pre (Type &o)
        {
          this->member_pre (const_cast <Type const &> (o));
        }

        virtual void
        member_pre (Type const&);

        virtual void
        member_next (Type &o)
        {
          this->member_next (const_cast <Type const &> (o));
        }

        virtual void
        member_next (Type const&);

        virtual void
        member_post (Type &o)
        {
          this->member_post (const_cast <Type const &> (o));
        }

        virtual void
        member_post (Type const&);

        protected:
        StructType ();
      };

      struct StructMemberType : Traversal::StructMemberType,
      virtual ::XSCRT::Writer< ACE_TCHAR >
      {
        typedef ::CIAO::Config_Handlers::StructMemberType Type;
        StructMemberType (::XSCRT::XML::Element< ACE_TCHAR >&);

        virtual void
        traverse (Type &o)
        {
          this->traverse (const_cast <Type const &> (o));
        }

        virtual void
        traverse (Type const&);

        virtual void
        name (Type &o)
        {
          this->name (const_cast <Type const &> (o));
        }

        virtual void
        name (Type const&);

        virtual void
        type (Type &o)
        {
          this->type (const_cast <Type const &> (o));
        }

        virtual void
        type (Type const&);

        protected:
        StructMemberType ();
      };

      struct ValueType : Traversal::ValueType,
      virtual ::XSCRT::Writer< ACE_TCHAR >
      {
        typedef ::CIAO::Config_Handlers::ValueType Type;
        ValueType (::XSCRT::XML::Element< ACE_TCHAR >&);

        virtual void
        traverse (Type &o)
        {
          this->traverse (const_cast <Type const &> (o));
        }

        virtual void
        traverse (Type const&);

        virtual void
        name (Type &o)
        {
          this->name (const_cast <Type const &> (o));
        }

        virtual void
        name (Type const&);

        virtual void
        typeId (Type &o)
        {
          this->typeId (const_cast <Type const &> (o));
        }

        virtual void
        typeId (Type const&);

        virtual void
        modifier (Type &o)
        {
          this->modifier (const_cast <Type const &> (o));
        }

        virtual void
        modifier (Type const&);

        virtual void
        baseType (Type &o)
        {
          this->baseType (const_cast <Type const &> (o));
        }

        virtual void
        baseType (Type const&);

        virtual void
        member_pre (Type &o)
        {
          this->member_pre (const_cast <Type const &> (o));
        }

        virtual void
        member_pre (Type const&);

        virtual void
        member_next (Type &o)
        {
          this->member_next (const_cast <Type const &> (o));
        }

        virtual void
        member_next (Type const&);

        virtual void
        member_post (Type &o)
        {
          this->member_post (const_cast <Type const &> (o));
        }

        virtual void
        member_post (Type const&);

        protected:
        ValueType ();
      };

      struct ValueMemberType : Traversal::ValueMemberType,
      virtual ::XSCRT::Writer< ACE_TCHAR >
      {
        typedef ::CIAO::Config_Handlers::ValueMemberType Type;
        ValueMemberType (::XSCRT::XML::Element< ACE_TCHAR >&);

        virtual void
        traverse (Type &o)
        {
          this->traverse (const_cast <Type const &> (o));
        }

        virtual void
        traverse (Type const&);

        virtual void
        name (Type &o)
        {
          this->name (const_cast <Type const &> (o));
        }

        virtual void
        name (Type const&);

        virtual void
        visibility (Type &o)
        {
          this->visibility (const_cast <Type const &> (o));
        }

        virtual void
        visibility (Type const&);

        virtual void
        type (Type &o)
        {
          this->type (const_cast <Type const &> (o));
        }

        virtual void
        type (Type const&);

        protected:
        ValueMemberType ();
      };

      struct NamedValue : Traversal::NamedValue,
      virtual ::XSCRT::Writer< ACE_TCHAR >
      {
        typedef ::CIAO::Config_Handlers::NamedValue Type;
        NamedValue (::XSCRT::XML::Element< ACE_TCHAR >&);

        virtual void
        traverse (Type &o)
        {
          this->traverse (const_cast <Type const &> (o));
        }

        virtual void
        traverse (Type const&);

        virtual void
        name (Type &o)
        {
          this->name (const_cast <Type const &> (o));
        }

        virtual void
        name (Type const&);

        virtual void
        value (Type &o)
        {
          this->value (const_cast <Type const &> (o));
        }

        virtual void
        value (Type const&);

        protected:
        NamedValue ();
      };

      struct SequenceType : Traversal::SequenceType,
      virtual ::XSCRT::Writer< ACE_TCHAR >
      {
        typedef ::CIAO::Config_Handlers::SequenceType Type;
        SequenceType (::XSCRT::XML::Element< ACE_TCHAR >&);

        virtual void
        traverse (Type &o)
        {
          this->traverse (const_cast <Type const &> (o));
        }

        virtual void
        traverse (Type const&);

        virtual void
        bound (Type &o)
        {
          this->bound (const_cast <Type const &> (o));
        }

        virtual void
        bound (Type const&);

        virtual void
        elementType (Type &o)
        {
          this->elementType (const_cast <Type const &> (o));
        }

        virtual void
        elementType (Type const&);

        protected:
        SequenceType ();
      };

      struct Any : Traversal::Any,
      virtual ::XSCRT::Writer< ACE_TCHAR >
      {
        typedef ::CIAO::Config_Handlers::Any Type;
        Any (::XSCRT::XML::Element< ACE_TCHAR >&);

        virtual void
        traverse (Type &o)
        {
          this->traverse (const_cast <Type const &> (o));
        }

        virtual void
        traverse (Type const&);

        virtual void
        type (Type &o)
        {
          this->type (const_cast <Type const &> (o));
        }

        virtual void
        type (Type const&);

        virtual void
        value (Type &o)
        {
          this->value (const_cast <Type const &> (o));
        }

        virtual void
        value (Type const&);

        protected:
        Any ();
      };

      struct Property : Traversal::Property,
      virtual ::XSCRT::Writer< ACE_TCHAR >
      {
        typedef ::CIAO::Config_Handlers::Property Type;
        Property (::XSCRT::XML::Element< ACE_TCHAR >&);

        virtual void
        traverse (Type &o)
        {
          this->traverse (const_cast <Type const &> (o));
        }

        virtual void
        traverse (Type const&);

        virtual void
        name (Type &o)
        {
          this->name (const_cast <Type const &> (o));
        }

        virtual void
        name (Type const&);

        virtual void
        value (Type &o)
        {
          this->value (const_cast <Type const &> (o));
        }

        virtual void
        value (Type const&);

        protected:
        Property ();
      };

      struct SatisfierPropertyKind : Traversal::SatisfierPropertyKind,
      virtual ::XSCRT::Writer< ACE_TCHAR >
      {
        SatisfierPropertyKind (::XSCRT::XML::Element< ACE_TCHAR >&);

        virtual void
        traverse (Type &o)
        {
          this->traverse (const_cast <Type const &> (o));
        }

        virtual void
        traverse (Type const&);

        protected:
        SatisfierPropertyKind ();
      };

      struct SatisfierProperty : Traversal::SatisfierProperty,
      virtual ::XSCRT::Writer< ACE_TCHAR >
      {
        typedef ::CIAO::Config_Handlers::SatisfierProperty Type;
        SatisfierProperty (::XSCRT::XML::Element< ACE_TCHAR >&);

        virtual void
        traverse (Type &o)
        {
          this->traverse (const_cast <Type const &> (o));
        }

        virtual void
        traverse (Type const&);

        virtual void
        name (Type &o)
        {
          this->name (const_cast <Type const &> (o));
        }

        virtual void
        name (Type const&);

        virtual void
        kind (Type &o)
        {
          this->kind (const_cast <Type const &> (o));
        }

        virtual void
        kind (Type const&);

        virtual void
        dynamic (Type &o)
        {
          this->dynamic (const_cast <Type const &> (o));
        }

        virtual void
        dynamic (Type const&);

        virtual void
        value (Type &o)
        {
          this->value (const_cast <Type const &> (o));
        }

        virtual void
        value (Type const&);

        protected:
        SatisfierProperty ();
      };

      struct Resource : Traversal::Resource,
      virtual ::XSCRT::Writer< ACE_TCHAR >
      {
        typedef ::CIAO::Config_Handlers::Resource Type;
        Resource (::XSCRT::XML::Element< ACE_TCHAR >&);

        virtual void
        traverse (Type &o)
        {
          this->traverse (const_cast <Type const &> (o));
        }

        virtual void
        traverse (Type const&);

        virtual void
        name (Type &o)
        {
          this->name (const_cast <Type const &> (o));
        }

        virtual void
        name (Type const&);

        virtual void
        resourceType_pre (Type &o)
        {
          this->resourceType_pre (const_cast <Type const &> (o));
        }

        virtual void
        resourceType_pre (Type const&);

        virtual void
        resourceType_next (Type &o)
        {
          this->resourceType_next (const_cast <Type const &> (o));
        }

        virtual void
        resourceType_next (Type const&);

        virtual void
        resourceType_post (Type &o)
        {
          this->resourceType_post (const_cast <Type const &> (o));
        }

        virtual void
        resourceType_post (Type const&);

        virtual void
        property_pre (Type &o)
        {
          this->property_pre (const_cast <Type const &> (o));
        }

        virtual void
        property_pre (Type const&);

        virtual void
        property_next (Type &o)
        {
          this->property_next (const_cast <Type const &> (o));
        }

        virtual void
        property_next (Type const&);

        virtual void
        property_post (Type &o)
        {
          this->property_post (const_cast <Type const &> (o));
        }

        virtual void
        property_post (Type const&);

        protected:
        Resource ();
      };

      struct Requirement : Traversal::Requirement,
      virtual ::XSCRT::Writer< ACE_TCHAR >
      {
        typedef ::CIAO::Config_Handlers::Requirement Type;
        Requirement (::XSCRT::XML::Element< ACE_TCHAR >&);

        virtual void
        traverse (Type &o)
        {
          this->traverse (const_cast <Type const &> (o));
        }

        virtual void
        traverse (Type const&);

        virtual void
        name (Type &o)
        {
          this->name (const_cast <Type const &> (o));
        }

        virtual void
        name (Type const&);

        virtual void
        resourceType (Type &o)
        {
          this->resourceType (const_cast <Type const &> (o));
        }

        virtual void
        resourceType (Type const&);

        virtual void
        property_pre (Type &o)
        {
          this->property_pre (const_cast <Type const &> (o));
        }

        virtual void
        property_pre (Type const&);

        virtual void
        property_next (Type &o)
        {
          this->property_next (const_cast <Type const &> (o));
        }

        virtual void
        property_next (Type const&);

        virtual void
        property_post (Type &o)
        {
          this->property_post (const_cast <Type const &> (o));
        }

        virtual void
        property_post (Type const&);

        protected:
        Requirement ();
      };

      struct ResourceDeploymentDescription : Traversal::ResourceDeploymentDescription,
      virtual ::XSCRT::Writer< ACE_TCHAR >
      {
        typedef ::CIAO::Config_Handlers::ResourceDeploymentDescription Type;
        ResourceDeploymentDescription (::XSCRT::XML::Element< ACE_TCHAR >&);

        virtual void
        traverse (Type &o)
        {
          this->traverse (const_cast <Type const &> (o));
        }

        virtual void
        traverse (Type const&);

        virtual void
        requirementName (Type &o)
        {
          this->requirementName (const_cast <Type const &> (o));
        }

        virtual void
        requirementName (Type const&);

        virtual void
        resourceName (Type &o)
        {
          this->resourceName (const_cast <Type const &> (o));
        }

        virtual void
        resourceName (Type const&);

        virtual void
        property_pre (Type &o)
        {
          this->property_pre (const_cast <Type const &> (o));
        }

        virtual void
        property_pre (Type const&);

        virtual void
        property_next (Type &o)
        {
          this->property_next (const_cast <Type const &> (o));
        }

        virtual void
        property_next (Type const&);

        virtual void
        property_post (Type &o)
        {
          this->property_post (const_cast <Type const &> (o));
        }

        virtual void
        property_post (Type const&);

        protected:
        ResourceDeploymentDescription ();
      };

      struct ArtifactDeploymentDescription : Traversal::ArtifactDeploymentDescription,
      virtual ::XSCRT::Writer< ACE_TCHAR >
      {
        typedef ::CIAO::Config_Handlers::ArtifactDeploymentDescription Type;
        ArtifactDeploymentDescription (::XSCRT::XML::Element< ACE_TCHAR >&);

        virtual void
        traverse (Type &o)
        {
          this->traverse (const_cast <Type const &> (o));
        }

        virtual void
        traverse (Type const&);

        virtual void
        name (Type &o)
        {
          this->name (const_cast <Type const &> (o));
        }

        virtual void
        name (Type const&);

        virtual void
        source_pre (Type &o)
        {
          this->source_pre (const_cast <Type const &> (o));
        }

        virtual void
        source_pre (Type const&);

        virtual void
        source_next (Type &o)
        {
          this->source_next (const_cast <Type const &> (o));
        }

        virtual void
        source_next (Type const&);

        virtual void
        source_post (Type &o)
        {
          this->source_post (const_cast <Type const &> (o));
        }

        virtual void
        source_post (Type const&);

        virtual void
        node (Type &o)
        {
          this->node (const_cast <Type const &> (o));
        }

        virtual void
        node (Type const&);

        virtual void
        location_pre (Type &o)
        {
          this->location_pre (const_cast <Type const &> (o));
        }

        virtual void
        location_pre (Type const&);

        virtual void
        location_next (Type &o)
        {
          this->location_next (const_cast <Type const &> (o));
        }

        virtual void
        location_next (Type const&);

        virtual void
        location_post (Type &o)
        {
          this->location_post (const_cast <Type const &> (o));
        }

        virtual void
        location_post (Type const&);

        virtual void
        execParameter_pre (Type &o)
        {
          this->execParameter_pre (const_cast <Type const &> (o));
        }

        virtual void
        execParameter_pre (Type const&);

        virtual void
        execParameter_next (Type &o)
        {
          this->execParameter_next (const_cast <Type const &> (o));
        }

        virtual void
        execParameter_next (Type const&);

        virtual void
        execParameter_post (Type &o)
        {
          this->execParameter_post (const_cast <Type const &> (o));
        }

        virtual void
        execParameter_post (Type const&);

        virtual void
        deployRequirement_pre (Type &o)
        {
          this->deployRequirement_pre (const_cast <Type const &> (o));
        }

        virtual void
        deployRequirement_pre (Type const&);

        virtual void
        deployRequirement_next (Type &o)
        {
          this->deployRequirement_next (const_cast <Type const &> (o));
        }

        virtual void
        deployRequirement_next (Type const&);

        virtual void
        deployRequirement_post (Type &o)
        {
          this->deployRequirement_post (const_cast <Type const &> (o));
        }

        virtual void
        deployRequirement_post (Type const&);

        virtual void
        deployedResource_pre (Type &o)
        {
          this->deployedResource_pre (const_cast <Type const &> (o));
        }

        virtual void
        deployedResource_pre (Type const&);

        virtual void
        deployedResource_next (Type &o)
        {
          this->deployedResource_next (const_cast <Type const &> (o));
        }

        virtual void
        deployedResource_next (Type const&);

        virtual void
        deployedResource_post (Type &o)
        {
          this->deployedResource_post (const_cast <Type const &> (o));
        }

        virtual void
        deployedResource_post (Type const&);

        virtual void
        id (Type &o)
        {
          this->id (const_cast <Type const &> (o));
        }

        virtual void
        id (Type const&);

        protected:
        ArtifactDeploymentDescription ();
      };

      struct MonolithicDeploymentDescription : Traversal::MonolithicDeploymentDescription,
      virtual ::XSCRT::Writer< ACE_TCHAR >
      {
        typedef ::CIAO::Config_Handlers::MonolithicDeploymentDescription Type;
        MonolithicDeploymentDescription (::XSCRT::XML::Element< ACE_TCHAR >&);

        virtual void
        traverse (Type &o)
        {
          this->traverse (const_cast <Type const &> (o));
        }

        virtual void
        traverse (Type const&);

        virtual void
        name (Type &o)
        {
          this->name (const_cast <Type const &> (o));
        }

        virtual void
        name (Type const&);

        virtual void
        source_pre (Type &o)
        {
          this->source_pre (const_cast <Type const &> (o));
        }

        virtual void
        source_pre (Type const&);

        virtual void
        source_next (Type &o)
        {
          this->source_next (const_cast <Type const &> (o));
        }

        virtual void
        source_next (Type const&);

        virtual void
        source_post (Type &o)
        {
          this->source_post (const_cast <Type const &> (o));
        }

        virtual void
        source_post (Type const&);

        virtual void
        artifact_pre (Type &o)
        {
          this->artifact_pre (const_cast <Type const &> (o));
        }

        virtual void
        artifact_pre (Type const&);

        virtual void
        artifact_next (Type &o)
        {
          this->artifact_next (const_cast <Type const &> (o));
        }

        virtual void
        artifact_next (Type const&);

        virtual void
        artifact_post (Type &o)
        {
          this->artifact_post (const_cast <Type const &> (o));
        }

        virtual void
        artifact_post (Type const&);

        virtual void
        execParameter_pre (Type &o)
        {
          this->execParameter_pre (const_cast <Type const &> (o));
        }

        virtual void
        execParameter_pre (Type const&);

        virtual void
        execParameter_next (Type &o)
        {
          this->execParameter_next (const_cast <Type const &> (o));
        }

        virtual void
        execParameter_next (Type const&);

        virtual void
        execParameter_post (Type &o)
        {
          this->execParameter_post (const_cast <Type const &> (o));
        }

        virtual void
        execParameter_post (Type const&);

        virtual void
        deployRequirement_pre (Type &o)
        {
          this->deployRequirement_pre (const_cast <Type const &> (o));
        }

        virtual void
        deployRequirement_pre (Type const&);

        virtual void
        deployRequirement_next (Type &o)
        {
          this->deployRequirement_next (const_cast <Type const &> (o));
        }

        virtual void
        deployRequirement_next (Type const&);

        virtual void
        deployRequirement_post (Type &o)
        {
          this->deployRequirement_post (const_cast <Type const &> (o));
        }

        virtual void
        deployRequirement_post (Type const&);

        virtual void
        id (Type &o)
        {
          this->id (const_cast <Type const &> (o));
        }

        virtual void
        id (Type const&);

        protected:
        MonolithicDeploymentDescription ();
      };

      struct ResourceUsageKind : Traversal::ResourceUsageKind,
      virtual ::XSCRT::Writer< ACE_TCHAR >
      {
        ResourceUsageKind (::XSCRT::XML::Element< ACE_TCHAR >&);

        virtual void
        traverse (Type &o)
        {
          this->traverse (const_cast <Type const &> (o));
        }

        virtual void
        traverse (Type const&);

        protected:
        ResourceUsageKind ();
      };

      struct InstanceResourceDeploymentDescription : Traversal::InstanceResourceDeploymentDescription,
      virtual ::XSCRT::Writer< ACE_TCHAR >
      {
        typedef ::CIAO::Config_Handlers::InstanceResourceDeploymentDescription Type;
        InstanceResourceDeploymentDescription (::XSCRT::XML::Element< ACE_TCHAR >&);

        virtual void
        traverse (Type &o)
        {
          this->traverse (const_cast <Type const &> (o));
        }

        virtual void
        traverse (Type const&);

        virtual void
        resourceUsage (Type &o)
        {
          this->resourceUsage (const_cast <Type const &> (o));
        }

        virtual void
        resourceUsage (Type const&);

        virtual void
        requirementName (Type &o)
        {
          this->requirementName (const_cast <Type const &> (o));
        }

        virtual void
        requirementName (Type const&);

        virtual void
        resourceName (Type &o)
        {
          this->resourceName (const_cast <Type const &> (o));
        }

        virtual void
        resourceName (Type const&);

        virtual void
        property_pre (Type &o)
        {
          this->property_pre (const_cast <Type const &> (o));
        }

        virtual void
        property_pre (Type const&);

        virtual void
        property_next (Type &o)
        {
          this->property_next (const_cast <Type const &> (o));
        }

        virtual void
        property_next (Type const&);

        virtual void
        property_post (Type &o)
        {
          this->property_post (const_cast <Type const &> (o));
        }

        virtual void
        property_post (Type const&);

        protected:
        InstanceResourceDeploymentDescription ();
      };

      struct InstanceDeploymentDescription : Traversal::InstanceDeploymentDescription,
      virtual ::XSCRT::Writer< ACE_TCHAR >
      {
        typedef ::CIAO::Config_Handlers::InstanceDeploymentDescription Type;
        InstanceDeploymentDescription (::XSCRT::XML::Element< ACE_TCHAR >&);

        virtual void
        traverse (Type &o)
        {
          this->traverse (const_cast <Type const &> (o));
        }

        virtual void
        traverse (Type const&);

        virtual void
        name (Type &o)
        {
          this->name (const_cast <Type const &> (o));
        }

        virtual void
        name (Type const&);

        virtual void
        node (Type &o)
        {
          this->node (const_cast <Type const &> (o));
        }

        virtual void
        node (Type const&);

        virtual void
        source (Type &o)
        {
          this->source (const_cast <Type const &> (o));
        }

        virtual void
        source (Type const&);

        virtual void
        implementation (Type &o)
        {
          this->implementation (const_cast <Type const &> (o));
        }

        virtual void
        implementation (Type const&);

        virtual void
        configProperty_pre (Type &o)
        {
          this->configProperty_pre (const_cast <Type const &> (o));
        }

        virtual void
        configProperty_pre (Type const&);

        virtual void
        configProperty_next (Type &o)
        {
          this->configProperty_next (const_cast <Type const &> (o));
        }

        virtual void
        configProperty_next (Type const&);

        virtual void
        configProperty_post (Type &o)
        {
          this->configProperty_post (const_cast <Type const &> (o));
        }

        virtual void
        configProperty_post (Type const&);

        virtual void
        deployedResource_pre (Type &o)
        {
          this->deployedResource_pre (const_cast <Type const &> (o));
        }

        virtual void
        deployedResource_pre (Type const&);

        virtual void
        deployedResource_next (Type &o)
        {
          this->deployedResource_next (const_cast <Type const &> (o));
        }

        virtual void
        deployedResource_next (Type const&);

        virtual void
        deployedResource_post (Type &o)
        {
          this->deployedResource_post (const_cast <Type const &> (o));
        }

        virtual void
        deployedResource_post (Type const&);

        virtual void
        deployedSharedResource (Type &o)
        {
          this->deployedSharedResource (const_cast <Type const &> (o));
        }

        virtual void
        deployedSharedResource (Type const&);

        virtual void
        id (Type &o)
        {
          this->id (const_cast <Type const &> (o));
        }

        virtual void
        id (Type const&);

        protected:
        InstanceDeploymentDescription ();
      };

      struct CCMComponentPortKind : Traversal::CCMComponentPortKind,
      virtual ::XSCRT::Writer< ACE_TCHAR >
      {
        CCMComponentPortKind (::XSCRT::XML::Element< ACE_TCHAR >&);

        virtual void
        traverse (Type &o)
        {
          this->traverse (const_cast <Type const &> (o));
        }

        virtual void
        traverse (Type const&);

        protected:
        CCMComponentPortKind ();
      };

      struct ComponentPortDescription : Traversal::ComponentPortDescription,
      virtual ::XSCRT::Writer< ACE_TCHAR >
      {
        typedef ::CIAO::Config_Handlers::ComponentPortDescription Type;
        ComponentPortDescription (::XSCRT::XML::Element< ACE_TCHAR >&);

        virtual void
        traverse (Type &o)
        {
          this->traverse (const_cast <Type const &> (o));
        }

        virtual void
        traverse (Type const&);

        virtual void
        name (Type &o)
        {
          this->name (const_cast <Type const &> (o));
        }

        virtual void
        name (Type const&);

        virtual void
        specificType (Type &o)
        {
          this->specificType (const_cast <Type const &> (o));
        }

        virtual void
        specificType (Type const&);

        virtual void
        supportedType_pre (Type &o)
        {
          this->supportedType_pre (const_cast <Type const &> (o));
        }

        virtual void
        supportedType_pre (Type const&);

        virtual void
        supportedType_next (Type &o)
        {
          this->supportedType_next (const_cast <Type const &> (o));
        }

        virtual void
        supportedType_next (Type const&);

        virtual void
        supportedType_post (Type &o)
        {
          this->supportedType_post (const_cast <Type const &> (o));
        }

        virtual void
        supportedType_post (Type const&);

        virtual void
        provider (Type &o)
        {
          this->provider (const_cast <Type const &> (o));
        }

        virtual void
        provider (Type const&);

        virtual void
        exclusiveProvider (Type &o)
        {
          this->exclusiveProvider (const_cast <Type const &> (o));
        }

        virtual void
        exclusiveProvider (Type const&);

        virtual void
        exclusiveUser (Type &o)
        {
          this->exclusiveUser (const_cast <Type const &> (o));
        }

        virtual void
        exclusiveUser (Type const&);

        virtual void
        optional (Type &o)
        {
          this->optional (const_cast <Type const &> (o));
        }

        virtual void
        optional (Type const&);

        virtual void
        kind (Type &o)
        {
          this->kind (const_cast <Type const &> (o));
        }

        virtual void
        kind (Type const&);

        virtual void
        templateParam_pre (Type &o)
        {
          this->templateParam_pre (const_cast <Type const &> (o));
        }

        virtual void
        templateParam_pre (Type const&);

        virtual void
        templateParam_next (Type &o)
        {
          this->templateParam_next (const_cast <Type const &> (o));
        }

        virtual void
        templateParam_next (Type const&);

        virtual void
        templateParam_post (Type &o)
        {
          this->templateParam_post (const_cast <Type const &> (o));
        }

        virtual void
        templateParam_post (Type const&);

        protected:
        ComponentPortDescription ();
      };

      struct ComponentPropertyDescription : Traversal::ComponentPropertyDescription,
      virtual ::XSCRT::Writer< ACE_TCHAR >
      {
        typedef ::CIAO::Config_Handlers::ComponentPropertyDescription Type;
        ComponentPropertyDescription (::XSCRT::XML::Element< ACE_TCHAR >&);

        virtual void
        traverse (Type &o)
        {
          this->traverse (const_cast <Type const &> (o));
        }

        virtual void
        traverse (Type const&);

        virtual void
        name (Type &o)
        {
          this->name (const_cast <Type const &> (o));
        }

        virtual void
        name (Type const&);

        virtual void
        type (Type &o)
        {
          this->type (const_cast <Type const &> (o));
        }

        virtual void
        type (Type const&);

        protected:
        ComponentPropertyDescription ();
      };

      struct ComponentExternalPortEndpoint : Traversal::ComponentExternalPortEndpoint,
      virtual ::XSCRT::Writer< ACE_TCHAR >
      {
        typedef ::CIAO::Config_Handlers::ComponentExternalPortEndpoint Type;
        ComponentExternalPortEndpoint (::XSCRT::XML::Element< ACE_TCHAR >&);

        virtual void
        traverse (Type &o)
        {
          this->traverse (const_cast <Type const &> (o));
        }

        virtual void
        traverse (Type const&);

        virtual void
        portName (Type &o)
        {
          this->portName (const_cast <Type const &> (o));
        }

        virtual void
        portName (Type const&);

        protected:
        ComponentExternalPortEndpoint ();
      };

      struct PlanSubcomponentPortEndpoint : Traversal::PlanSubcomponentPortEndpoint,
      virtual ::XSCRT::Writer< ACE_TCHAR >
      {
        typedef ::CIAO::Config_Handlers::PlanSubcomponentPortEndpoint Type;
        PlanSubcomponentPortEndpoint (::XSCRT::XML::Element< ACE_TCHAR >&);

        virtual void
        traverse (Type &o)
        {
          this->traverse (const_cast <Type const &> (o));
        }

        virtual void
        traverse (Type const&);

        virtual void
        portName (Type &o)
        {
          this->portName (const_cast <Type const &> (o));
        }

        virtual void
        portName (Type const&);

        virtual void
        provider (Type &o)
        {
          this->provider (const_cast <Type const &> (o));
        }

        virtual void
        provider (Type const&);

        virtual void
        kind (Type &o)
        {
          this->kind (const_cast <Type const &> (o));
        }

        virtual void
        kind (Type const&);

        virtual void
        instance (Type &o)
        {
          this->instance (const_cast <Type const &> (o));
        }

        virtual void
        instance (Type const&);

        protected:
        PlanSubcomponentPortEndpoint ();
      };

      struct ExternalReferenceEndpoint : Traversal::ExternalReferenceEndpoint,
      virtual ::XSCRT::Writer< ACE_TCHAR >
      {
        typedef ::CIAO::Config_Handlers::ExternalReferenceEndpoint Type;
        ExternalReferenceEndpoint (::XSCRT::XML::Element< ACE_TCHAR >&);

        virtual void
        traverse (Type &o)
        {
          this->traverse (const_cast <Type const &> (o));
        }

        virtual void
        traverse (Type const&);

        virtual void
        location (Type &o)
        {
          this->location (const_cast <Type const &> (o));
        }

        virtual void
        location (Type const&);

        virtual void
        provider (Type &o)
        {
          this->provider (const_cast <Type const &> (o));
        }

        virtual void
        provider (Type const&);

        virtual void
        portName (Type &o)
        {
          this->portName (const_cast <Type const &> (o));
        }

        virtual void
        portName (Type const&);

        virtual void
        supportedType_pre (Type &o)
        {
          this->supportedType_pre (const_cast <Type const &> (o));
        }

        virtual void
        supportedType_pre (Type const&);

        virtual void
        supportedType_next (Type &o)
        {
          this->supportedType_next (const_cast <Type const &> (o));
        }

        virtual void
        supportedType_next (Type const&);

        virtual void
        supportedType_post (Type &o)
        {
          this->supportedType_post (const_cast <Type const &> (o));
        }

        virtual void
        supportedType_post (Type const&);

        protected:
        ExternalReferenceEndpoint ();
      };

      struct ConnectionResourceDeploymentDescription : Traversal::ConnectionResourceDeploymentDescription,
      virtual ::XSCRT::Writer< ACE_TCHAR >
      {
        typedef ::CIAO::Config_Handlers::ConnectionResourceDeploymentDescription Type;
        ConnectionResourceDeploymentDescription (::XSCRT::XML::Element< ACE_TCHAR >&);

        virtual void
        traverse (Type &o)
        {
          this->traverse (const_cast <Type const &> (o));
        }

        virtual void
        traverse (Type const&);

        virtual void
        targetName (Type &o)
        {
          this->targetName (const_cast <Type const &> (o));
        }

        virtual void
        targetName (Type const&);

        virtual void
        requirementName (Type &o)
        {
          this->requirementName (const_cast <Type const &> (o));
        }

        virtual void
        requirementName (Type const&);

        virtual void
        resourceName (Type &o)
        {
          this->resourceName (const_cast <Type const &> (o));
        }

        virtual void
        resourceName (Type const&);

        virtual void
        property_pre (Type &o)
        {
          this->property_pre (const_cast <Type const &> (o));
        }

        virtual void
        property_pre (Type const&);

        virtual void
        property_next (Type &o)
        {
          this->property_next (const_cast <Type const &> (o));
        }

        virtual void
        property_next (Type const&);

        virtual void
        property_post (Type &o)
        {
          this->property_post (const_cast <Type const &> (o));
        }

        virtual void
        property_post (Type const&);

        protected:
        ConnectionResourceDeploymentDescription ();
      };

      struct PlanConnectionDescription : Traversal::PlanConnectionDescription,
      virtual ::XSCRT::Writer< ACE_TCHAR >
      {
        typedef ::CIAO::Config_Handlers::PlanConnectionDescription Type;
        PlanConnectionDescription (::XSCRT::XML::Element< ACE_TCHAR >&);

        virtual void
        traverse (Type &o)
        {
          this->traverse (const_cast <Type const &> (o));
        }

        virtual void
        traverse (Type const&);

        virtual void
        name (Type &o)
        {
          this->name (const_cast <Type const &> (o));
        }

        virtual void
        name (Type const&);

        virtual void
        source (Type &o)
        {
          this->source (const_cast <Type const &> (o));
        }

        virtual void
        source (Type const&);

        virtual void
        deployRequirement_pre (Type &o)
        {
          this->deployRequirement_pre (const_cast <Type const &> (o));
        }

        virtual void
        deployRequirement_pre (Type const&);

        virtual void
        deployRequirement_next (Type &o)
        {
          this->deployRequirement_next (const_cast <Type const &> (o));
        }

        virtual void
        deployRequirement_next (Type const&);

        virtual void
        deployRequirement_post (Type &o)
        {
          this->deployRequirement_post (const_cast <Type const &> (o));
        }

        virtual void
        deployRequirement_post (Type const&);

        virtual void
        externalEndpoint_pre (Type &o)
        {
          this->externalEndpoint_pre (const_cast <Type const &> (o));
        }

        virtual void
        externalEndpoint_pre (Type const&);

        virtual void
        externalEndpoint_next (Type &o)
        {
          this->externalEndpoint_next (const_cast <Type const &> (o));
        }

        virtual void
        externalEndpoint_next (Type const&);

        virtual void
        externalEndpoint_post (Type &o)
        {
          this->externalEndpoint_post (const_cast <Type const &> (o));
        }

        virtual void
        externalEndpoint_post (Type const&);

        virtual void
        internalEndpoint_pre (Type &o)
        {
          this->internalEndpoint_pre (const_cast <Type const &> (o));
        }

        virtual void
        internalEndpoint_pre (Type const&);

        virtual void
        internalEndpoint_next (Type &o)
        {
          this->internalEndpoint_next (const_cast <Type const &> (o));
        }

        virtual void
        internalEndpoint_next (Type const&);

        virtual void
        internalEndpoint_post (Type &o)
        {
          this->internalEndpoint_post (const_cast <Type const &> (o));
        }

        virtual void
        internalEndpoint_post (Type const&);

        virtual void
        externalReference_pre (Type &o)
        {
          this->externalReference_pre (const_cast <Type const &> (o));
        }

        virtual void
        externalReference_pre (Type const&);

        virtual void
        externalReference_next (Type &o)
        {
          this->externalReference_next (const_cast <Type const &> (o));
        }

        virtual void
        externalReference_next (Type const&);

        virtual void
        externalReference_post (Type &o)
        {
          this->externalReference_post (const_cast <Type const &> (o));
        }

        virtual void
        externalReference_post (Type const&);

        virtual void
        deployedResource_pre (Type &o)
        {
          this->deployedResource_pre (const_cast <Type const &> (o));
        }

        virtual void
        deployedResource_pre (Type const&);

        virtual void
        deployedResource_next (Type &o)
        {
          this->deployedResource_next (const_cast <Type const &> (o));
        }

        virtual void
        deployedResource_next (Type const&);

        virtual void
        deployedResource_post (Type &o)
        {
          this->deployedResource_post (const_cast <Type const &> (o));
        }

        virtual void
        deployedResource_post (Type const&);

        protected:
        PlanConnectionDescription ();
      };

      struct ImplementationDependency : Traversal::ImplementationDependency,
      virtual ::XSCRT::Writer< ACE_TCHAR >
      {
        typedef ::CIAO::Config_Handlers::ImplementationDependency Type;
        ImplementationDependency (::XSCRT::XML::Element< ACE_TCHAR >&);

        virtual void
        traverse (Type &o)
        {
          this->traverse (const_cast <Type const &> (o));
        }

        virtual void
        traverse (Type const&);

        virtual void
        requiredType (Type &o)
        {
          this->requiredType (const_cast <Type const &> (o));
        }

        virtual void
        requiredType (Type const&);

        protected:
        ImplementationDependency ();
      };

      struct Capability : Traversal::Capability,
      virtual ::XSCRT::Writer< ACE_TCHAR >
      {
        typedef ::CIAO::Config_Handlers::Capability Type;
        Capability (::XSCRT::XML::Element< ACE_TCHAR >&);

        virtual void
        traverse (Type &o)
        {
          this->traverse (const_cast <Type const &> (o));
        }

        virtual void
        traverse (Type const&);

        virtual void
        name (Type &o)
        {
          this->name (const_cast <Type const &> (o));
        }

        virtual void
        name (Type const&);

        virtual void
        resourceType_pre (Type &o)
        {
          this->resourceType_pre (const_cast <Type const &> (o));
        }

        virtual void
        resourceType_pre (Type const&);

        virtual void
        resourceType_next (Type &o)
        {
          this->resourceType_next (const_cast <Type const &> (o));
        }

        virtual void
        resourceType_next (Type const&);

        virtual void
        resourceType_post (Type &o)
        {
          this->resourceType_post (const_cast <Type const &> (o));
        }

        virtual void
        resourceType_post (Type const&);

        virtual void
        property_pre (Type &o)
        {
          this->property_pre (const_cast <Type const &> (o));
        }

        virtual void
        property_pre (Type const&);

        virtual void
        property_next (Type &o)
        {
          this->property_next (const_cast <Type const &> (o));
        }

        virtual void
        property_next (Type const&);

        virtual void
        property_post (Type &o)
        {
          this->property_post (const_cast <Type const &> (o));
        }

        virtual void
        property_post (Type const&);

        protected:
        Capability ();
      };

      struct ImplementationRequirement : Traversal::ImplementationRequirement,
      virtual ::XSCRT::Writer< ACE_TCHAR >
      {
        typedef ::CIAO::Config_Handlers::ImplementationRequirement Type;
        ImplementationRequirement (::XSCRT::XML::Element< ACE_TCHAR >&);

        virtual void
        traverse (Type &o)
        {
          this->traverse (const_cast <Type const &> (o));
        }

        virtual void
        traverse (Type const&);

        virtual void
        resourceUsage (Type &o)
        {
          this->resourceUsage (const_cast <Type const &> (o));
        }

        virtual void
        resourceUsage (Type const&);

        virtual void
        resourcePort (Type &o)
        {
          this->resourcePort (const_cast <Type const &> (o));
        }

        virtual void
        resourcePort (Type const&);

        virtual void
        componentPort (Type &o)
        {
          this->componentPort (const_cast <Type const &> (o));
        }

        virtual void
        componentPort (Type const&);

        virtual void
        resourceType (Type &o)
        {
          this->resourceType (const_cast <Type const &> (o));
        }

        virtual void
        resourceType (Type const&);

        virtual void
        name (Type &o)
        {
          this->name (const_cast <Type const &> (o));
        }

        virtual void
        name (Type const&);

        virtual void
        property_pre (Type &o)
        {
          this->property_pre (const_cast <Type const &> (o));
        }

        virtual void
        property_pre (Type const&);

        virtual void
        property_next (Type &o)
        {
          this->property_next (const_cast <Type const &> (o));
        }

        virtual void
        property_next (Type const&);

        virtual void
        property_post (Type &o)
        {
          this->property_post (const_cast <Type const &> (o));
        }

        virtual void
        property_post (Type const&);

        protected:
        ImplementationRequirement ();
      };

      struct SubcomponentPortEndpoint : Traversal::SubcomponentPortEndpoint,
      virtual ::XSCRT::Writer< ACE_TCHAR >
      {
        typedef ::CIAO::Config_Handlers::SubcomponentPortEndpoint Type;
        SubcomponentPortEndpoint (::XSCRT::XML::Element< ACE_TCHAR >&);

        virtual void
        traverse (Type &o)
        {
          this->traverse (const_cast <Type const &> (o));
        }

        virtual void
        traverse (Type const&);

        virtual void
        portName (Type &o)
        {
          this->portName (const_cast <Type const &> (o));
        }

        virtual void
        portName (Type const&);

        virtual void
        instance (Type &o)
        {
          this->instance (const_cast <Type const &> (o));
        }

        virtual void
        instance (Type const&);

        protected:
        SubcomponentPortEndpoint ();
      };

      struct AssemblyConnectionDescription : Traversal::AssemblyConnectionDescription,
      virtual ::XSCRT::Writer< ACE_TCHAR >
      {
        typedef ::CIAO::Config_Handlers::AssemblyConnectionDescription Type;
        AssemblyConnectionDescription (::XSCRT::XML::Element< ACE_TCHAR >&);

        virtual void
        traverse (Type &o)
        {
          this->traverse (const_cast <Type const &> (o));
        }

        virtual void
        traverse (Type const&);

        virtual void
        name (Type &o)
        {
          this->name (const_cast <Type const &> (o));
        }

        virtual void
        name (Type const&);

        virtual void
        deployRequirement_pre (Type &o)
        {
          this->deployRequirement_pre (const_cast <Type const &> (o));
        }

        virtual void
        deployRequirement_pre (Type const&);

        virtual void
        deployRequirement_next (Type &o)
        {
          this->deployRequirement_next (const_cast <Type const &> (o));
        }

        virtual void
        deployRequirement_next (Type const&);

        virtual void
        deployRequirement_post (Type &o)
        {
          this->deployRequirement_post (const_cast <Type const &> (o));
        }

        virtual void
        deployRequirement_post (Type const&);

        virtual void
        internalEndpoint_pre (Type &o)
        {
          this->internalEndpoint_pre (const_cast <Type const &> (o));
        }

        virtual void
        internalEndpoint_pre (Type const&);

        virtual void
        internalEndpoint_next (Type &o)
        {
          this->internalEndpoint_next (const_cast <Type const &> (o));
        }

        virtual void
        internalEndpoint_next (Type const&);

        virtual void
        internalEndpoint_post (Type &o)
        {
          this->internalEndpoint_post (const_cast <Type const &> (o));
        }

        virtual void
        internalEndpoint_post (Type const&);

        virtual void
        externalEndpoint_pre (Type &o)
        {
          this->externalEndpoint_pre (const_cast <Type const &> (o));
        }

        virtual void
        externalEndpoint_pre (Type const&);

        virtual void
        externalEndpoint_next (Type &o)
        {
          this->externalEndpoint_next (const_cast <Type const &> (o));
        }

        virtual void
        externalEndpoint_next (Type const&);

        virtual void
        externalEndpoint_post (Type &o)
        {
          this->externalEndpoint_post (const_cast <Type const &> (o));
        }

        virtual void
        externalEndpoint_post (Type const&);

        virtual void
        externalReference_pre (Type &o)
        {
          this->externalReference_pre (const_cast <Type const &> (o));
        }

        virtual void
        externalReference_pre (Type const&);

        virtual void
        externalReference_next (Type &o)
        {
          this->externalReference_next (const_cast <Type const &> (o));
        }

        virtual void
        externalReference_next (Type const&);

        virtual void
        externalReference_post (Type &o)
        {
          this->externalReference_post (const_cast <Type const &> (o));
        }

        virtual void
        externalReference_post (Type const&);

        protected:
        AssemblyConnectionDescription ();
      };

      struct PlanLocalityKind : Traversal::PlanLocalityKind,
      virtual ::XSCRT::Writer< ACE_TCHAR >
      {
        PlanLocalityKind (::XSCRT::XML::Element< ACE_TCHAR >&);

        virtual void
        traverse (Type &o)
        {
          this->traverse (const_cast <Type const &> (o));
        }

        virtual void
        traverse (Type const&);

        protected:
        PlanLocalityKind ();
      };

      struct PlanLocality : Traversal::PlanLocality,
      virtual ::XSCRT::Writer< ACE_TCHAR >
      {
        typedef ::CIAO::Config_Handlers::PlanLocality Type;
        PlanLocality (::XSCRT::XML::Element< ACE_TCHAR >&);

        virtual void
        traverse (Type &o)
        {
          this->traverse (const_cast <Type const &> (o));
        }

        virtual void
        traverse (Type const&);

        virtual void
        constraint (Type &o)
        {
          this->constraint (const_cast <Type const &> (o));
        }

        virtual void
        constraint (Type const&);

        virtual void
        constrainedInstance_pre (Type &o)
        {
          this->constrainedInstance_pre (const_cast <Type const &> (o));
        }

        virtual void
        constrainedInstance_pre (Type const&);

        virtual void
        constrainedInstance_next (Type &o)
        {
          this->constrainedInstance_next (const_cast <Type const &> (o));
        }

        virtual void
        constrainedInstance_next (Type const&);

        virtual void
        constrainedInstance_post (Type &o)
        {
          this->constrainedInstance_post (const_cast <Type const &> (o));
        }

        virtual void
        constrainedInstance_post (Type const&);

        protected:
        PlanLocality ();
      };
    }
  }
}

namespace CIAO
{
  namespace Config_Handlers
  {
  }
}

#endif // BASIC_DEPLOYMENT_DATA_HPP
