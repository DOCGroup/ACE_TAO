/* -*- C++ -*- */
// $Id$

// ******  Code generated by the The ACE ORB (TAO) IDL Compiler *******
// TAO and the TAO IDL Compiler have been developed by the Center for
// Distributed Object Computing at Washington University, St. Louis.
//
// Information about TAO is available at:
//                 http://www.cs.wustl.edu/~schmidt/TAO.html

#ifndef _TAO_IDL_MESSAGINGS_T_CPP_
#define _TAO_IDL_MESSAGINGS_T_CPP_

#if defined(_MSC_VER)
#pragma warning(disable:4250)
#endif /* _MSC_VER */

#include "MessagingS_T.h"
#include "tao/POA.h"
#include "tao/ORB_Core.h"

#if !defined (__ACE_INLINE__)
#include "MessagingS_T.i"
#endif /* !defined INLINE */

template <class T> PortableServer::POA_ptr
POA_Messaging::RebindPolicy_tie<T>::_default_POA (CORBA::Environment &env)
{
  if (!CORBA::is_nil (this->poa_.in ()))
    return PortableServer::POA::_duplicate (this->poa_.in ());
  else
  {
    TAO_POA *poa = TAO_ORB_Core_instance ()->root_poa ();
    PortableServer::POA_var result = poa->_this (env);
    if (env.exception () != 0)
      return PortableServer::POA::_nil ();
    else
      return result._retn ();
  }
}

template <class T> PortableServer::POA_ptr
POA_Messaging::SyncScopePolicy_tie<T>::_default_POA (CORBA::Environment &env)
{
  if (!CORBA::is_nil (this->poa_.in ()))
    return PortableServer::POA::_duplicate (this->poa_.in ());
  else
  {
    TAO_POA *poa = TAO_ORB_Core_instance ()->root_poa ();
    PortableServer::POA_var result = poa->_this (env);
    if (env.exception () != 0)
      return PortableServer::POA::_nil ();
    else
      return result._retn ();
  }
}

template <class T> PortableServer::POA_ptr
POA_Messaging::RequestPriorityPolicy_tie<T>::_default_POA (CORBA::Environment &env)
{
  if (!CORBA::is_nil (this->poa_.in ()))
    return PortableServer::POA::_duplicate (this->poa_.in ());
  else
  {
    TAO_POA *poa = TAO_ORB_Core_instance ()->root_poa ();
    PortableServer::POA_var result = poa->_this (env);
    if (env.exception () != 0)
      return PortableServer::POA::_nil ();
    else
      return result._retn ();
  }
}

template <class T> PortableServer::POA_ptr
POA_Messaging::ReplyPriorityPolicy_tie<T>::_default_POA (CORBA::Environment &env)
{
  if (!CORBA::is_nil (this->poa_.in ()))
    return PortableServer::POA::_duplicate (this->poa_.in ());
  else
  {
    TAO_POA *poa = TAO_ORB_Core_instance ()->root_poa ();
    PortableServer::POA_var result = poa->_this (env);
    if (env.exception () != 0)
      return PortableServer::POA::_nil ();
    else
      return result._retn ();
  }
}

template <class T> PortableServer::POA_ptr
POA_Messaging::RequestStartTimePolicy_tie<T>::_default_POA (CORBA::Environment &env)
{
  if (!CORBA::is_nil (this->poa_.in ()))
    return PortableServer::POA::_duplicate (this->poa_.in ());
  else
  {
    TAO_POA *poa = TAO_ORB_Core_instance ()->root_poa ();
    PortableServer::POA_var result = poa->_this (env);
    if (env.exception () != 0)
      return PortableServer::POA::_nil ();
    else
      return result._retn ();
  }
}

template <class T> PortableServer::POA_ptr
POA_Messaging::RequestEndTimePolicy_tie<T>::_default_POA (CORBA::Environment &env)
{
  if (!CORBA::is_nil (this->poa_.in ()))
    return PortableServer::POA::_duplicate (this->poa_.in ());
  else
  {
    TAO_POA *poa = TAO_ORB_Core_instance ()->root_poa ();
    PortableServer::POA_var result = poa->_this (env);
    if (env.exception () != 0)
      return PortableServer::POA::_nil ();
    else
      return result._retn ();
  }
}

template <class T> PortableServer::POA_ptr
POA_Messaging::ReplyStartTimePolicy_tie<T>::_default_POA (CORBA::Environment &env)
{
  if (!CORBA::is_nil (this->poa_.in ()))
    return PortableServer::POA::_duplicate (this->poa_.in ());
  else
  {
    TAO_POA *poa = TAO_ORB_Core_instance ()->root_poa ();
    PortableServer::POA_var result = poa->_this (env);
    if (env.exception () != 0)
      return PortableServer::POA::_nil ();
    else
      return result._retn ();
  }
}

template <class T> PortableServer::POA_ptr
POA_Messaging::ReplyEndTimePolicy_tie<T>::_default_POA (CORBA::Environment &env)
{
  if (!CORBA::is_nil (this->poa_.in ()))
    return PortableServer::POA::_duplicate (this->poa_.in ());
  else
  {
    TAO_POA *poa = TAO_ORB_Core_instance ()->root_poa ();
    PortableServer::POA_var result = poa->_this (env);
    if (env.exception () != 0)
      return PortableServer::POA::_nil ();
    else
      return result._retn ();
  }
}

template <class T> PortableServer::POA_ptr
POA_Messaging::RelativeRequestTimeoutPolicy_tie<T>::_default_POA (CORBA::Environment &env)
{
  if (!CORBA::is_nil (this->poa_.in ()))
    return PortableServer::POA::_duplicate (this->poa_.in ());
  else
  {
    TAO_POA *poa = TAO_ORB_Core_instance ()->root_poa ();
    PortableServer::POA_var result = poa->_this (env);
    if (env.exception () != 0)
      return PortableServer::POA::_nil ();
    else
      return result._retn ();
  }
}

template <class T> PortableServer::POA_ptr
POA_Messaging::RelativeRoundtripTimeoutPolicy_tie<T>::_default_POA (CORBA::Environment &env)
{
  if (!CORBA::is_nil (this->poa_.in ()))
    return PortableServer::POA::_duplicate (this->poa_.in ());
  else
  {
    TAO_POA *poa = TAO_ORB_Core_instance ()->root_poa ();
    PortableServer::POA_var result = poa->_this (env);
    if (env.exception () != 0)
      return PortableServer::POA::_nil ();
    else
      return result._retn ();
  }
}

template <class T> PortableServer::POA_ptr
POA_Messaging::RoutingPolicy_tie<T>::_default_POA (CORBA::Environment &env)
{
  if (!CORBA::is_nil (this->poa_.in ()))
    return PortableServer::POA::_duplicate (this->poa_.in ());
  else
  {
    TAO_POA *poa = TAO_ORB_Core_instance ()->root_poa ();
    PortableServer::POA_var result = poa->_this (env);
    if (env.exception () != 0)
      return PortableServer::POA::_nil ();
    else
      return result._retn ();
  }
}

template <class T> PortableServer::POA_ptr
POA_Messaging::MaxHopsPolicy_tie<T>::_default_POA (CORBA::Environment &env)
{
  if (!CORBA::is_nil (this->poa_.in ()))
    return PortableServer::POA::_duplicate (this->poa_.in ());
  else
  {
    TAO_POA *poa = TAO_ORB_Core_instance ()->root_poa ();
    PortableServer::POA_var result = poa->_this (env);
    if (env.exception () != 0)
      return PortableServer::POA::_nil ();
    else
      return result._retn ();
  }
}

template <class T> PortableServer::POA_ptr
POA_Messaging::QueueOrderPolicy_tie<T>::_default_POA (CORBA::Environment &env)
{
  if (!CORBA::is_nil (this->poa_.in ()))
    return PortableServer::POA::_duplicate (this->poa_.in ());
  else
  {
    TAO_POA *poa = TAO_ORB_Core_instance ()->root_poa ();
    PortableServer::POA_var result = poa->_this (env);
    if (env.exception () != 0)
      return PortableServer::POA::_nil ();
    else
      return result._retn ();
  }
}

#if defined (TAO_POLLER)

template <class T> PortableServer::POA_ptr
POA_Messaging::ReplyHandler_tie<T>::_default_POA (CORBA::Environment &env)
{
  if (!CORBA::is_nil (this->poa_.in ()))
    return PortableServer::POA::_duplicate (this->poa_.in ());
  else
  {
    TAO_POA *poa = TAO_ORB_Core_instance ()->root_poa ();
    PortableServer::POA_var result = poa->_this (env);
    if (env.exception () != 0)
      return PortableServer::POA::_nil ();
    else
      return result._retn ();
  }
}

template <class T> PortableServer::POA_ptr
POA_Messaging::Poller_tie<T>::_default_POA (CORBA::Environment &env)
{
  if (!CORBA::is_nil (this->poa_.in ()))
    return PortableServer::POA::_duplicate (this->poa_.in ());
  else
  {
    TAO_POA *poa = TAO_ORB_Core_instance ()->root_poa ();
    PortableServer::POA_var result = poa->_this (env);
    if (env.exception () != 0)
      return PortableServer::POA::_nil ();
    else
      return result._retn ();
  }
}
#endif /* TAO_POLLER */

#endif /* ifndef */
