// $Id$
//
// ================================================================
//
// = DESCRIPTION
//   This file was used to generate the code in IORTable{C,S,S_T}.{h,i,cpp}
//
//   The command used to generate code from this file is:
//
//     tao_idl.exe -o orig -Ge 1 -Sa -St \
//          -Wb,export_macro=TAO_IORTable_Export \
//          -Wb,export_include=iortable_export.h \
//          -Wb,pre_include="ace/pre.h" \
//          -Wb,post_include="ace/post.h" \
//          IORTable.pidl
//
//   after the file is generated a patch must be applied.  The patch
//   disables the code under certain configurations, and eliminates
//   cycles in the include dependencies.  Those changes are required
//   because the generated code is part of the TAO library, it hardly
//   makes any sense to  change the IDL compiler to support changes
//   that are very occasional.
//
// ================================================================

module IORTable
{
  local interface Locator;

  exception AlreadyBound {};
  exception NotFound {};

  local interface Table
  {
    // = TITLE
    //     Define the IOR Table interface.
    //
    // = DESCRIPTION
    //     Any TAO server can be configured as an corbaloc agent.
    //     Such agents forward requests generated using a simple
    //     ObjectKey in a corbaloc specifcation to the real location
    //     of the object.
    //     In TAO we implement this feature by dynamically (or
    //     statically) adding a new Object Adapter to the ORB, that
    //     handles any sort of request.

    void bind (in string object_key,
               in string IOR)
      raises (AlreadyBound);
    // Bind <object_key> to the <IOR>

    void rebind (in string object_key,
                 in string IOR);
    // Bind <object_key> to the <IOR>

    void unbind (in string object_key)
      raises (NotFound);
    // Remove the binding for <object_key>

    void set_locator (in Locator the_locator);
    // Set the locator, if no binding is set for an object_key we try
    // to use the locator to resolve it
  };

  local interface Locator
  {
    string locate (in string object_key)
      raises (NotFound);
    // Returns an IOR to use for <object_key>
  };
};
