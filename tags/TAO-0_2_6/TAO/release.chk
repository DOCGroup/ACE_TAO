# $Id$ -*- Picture -*-
 
# Hint: use picture-mode to make editing this easier (C-c . will set
# the direction to "down".
 
Legend:
        Platforms are indicated by position within square brackets, i.e.,
        [ABCDEF] where
 
        A = Solaris/CC
        B = NT (MSVC++ 5.0)
        C = Solaris/g++
        D = IRIX 
        E = Linux/g++
        F = Solaric/EGCS
        G = DEC/cxx
        H = Other (Linux/egcs, ????) Specify in the NOTES section
 		   
        The state is indicated using the following symbols:
 		   
        0 = doesn't work
        1 = works  
        c = compiles but does not work correctly
        x = not attempted or unknown
        P = Purified
 	           
 A B C D E F G H   
[1 1 x 1 x 1 1 x] libTAO compiles
[1 1 x 1 x 1 1 x] TAO_IDL compiles
[1 1 x 1 x 1 1 x] liborbsvcs compiles
       	           
[1 1 x 1 x 1 c x] IDL_Cubit server
[1 1 x 1 x 1 c x] IDL_Cubit client
[x c x c x c c x] DII_Cubit client
       	           
[1 1 x 1 x 1 1 x] Param_Test compiles
[1 1 x 1 x 1 1 x]    SII short
[1 1 x 1 x 1 1 x]    SII ubstring
[1 1 x 1 x 1 1 x]    SII bdstring
[1 1 x 1 x 1 1 x]    SII fixed_struct
[1 1 x 1 x 1 1 x]    SII strseq
[1 1 x 1 x 1 1 x]    SII bounded_strseq
[1 1 x 1 x 1 1 x]    SII var_struct
[1 1 x 1 x 1 1 x]    SII nested_struct
[1 1 x 1 x 1 1 x]    SII struct_seq
[1 1 x 1 x 1 1 x]    SII bounded_struct_seq
[1 1 x 1 x 1 1 x]    SII any
[1 1 x 1 x 1 1 x]    SII objref
[0 0 x 0 x 0 0 x]    SII objref_sequence
[0 0 x 0 x 0 0 x]    SII any_sequence
[1 1 x 1 x 1 1 x]    SII short_sequence
[1 1 x 1 x 1 1 x]    SII long_sequence
[1 1 x 1 x 1 1 x]    SII bounded_short_sequence
[1 1 x 1 x 1 1 x]    SII bounded_long_sequence
[1 1 x 1 x 1 1 x]    SII fixed_array
[1 1 x 1 x 1 1 x]    SII var_array
       	     
[1 1 x 1 x 1 x x]    DII short
[1 1 x 1 x 1 x x]    DII ubstring
[1 1 x 1 x 1 x x]    DII bdstring
[1 1 x 1 x 1 x x]    DII fixed_struct
[0 0 x 1 x 0 x x]    DII strseq
[0 0 x 0 x 0 x x]    DII bounded_strseq
[0 0 x 0 x 0 x x]    DII var_struct
[0 0 x 0 x 0 x x]    DII nested_struct
[0 0 x 0 x 0 x x]    DII struct_seq
[0 0 x 0 x 0 x x]    DII bounded_struct_seq
[0 0 x 0 x 0 x x]    DII any
[0 0 x 0 x 0 x x]    DII objref
[0 0 x 0 x 0 x x]    DII objref_sequence
[0 0 x 0 x 0 x x]    DII any_sequence
[0 0 x 0 x 0 x x]    DII short_sequence
[0 0 x 0 x 0 x x]    DII long_sequence
[0 0 x 0 x 0 x x]    DII bounded_short_sequence
[0 0 x 0 x 0 x x]    DII bounded_long_sequence
[0 0 x 0 x 0 x x]    DII fixed_array
[0 0 x 0 x 0 x x]    DII var_array
       	     
[1 1 x 1 x 1 x x] Simple
[1 1 x 1 x 1 x x] NestedUpcall/Reactor
[1 1 x 1 x 1 x x] NestedUpcall/Triangle_Test
[1 c x 1 x 1 x x] NestedUpcall/MT_Client_Test
       	     
[1 1 x 1 x 1 x x] Simple_Naming
[1 c x 1 x 1 x x] Event_Latency
[1 c x 1 x 1 x x] EC_Throughput
[1 c x 1 x 1 x x] EC_Multiple
[x 1 x x x x x x] Logger
       	     
[1 1 x x x 1 x x] MT_Cubit compiles
[x x x x x x x x] 	runs for Octet
[x x x x x x x x] 	runs for Short
[x x x x x x x x] 	runs for Long
[x x x x x x x x] 	runs for Struct
       	     
[x x x x x x c x] POA/RootPOA
[x x x x x x c x] POA/FindPOA
[x x x x x x c x] POA/NewPOA
[x x x x x x x x] POA/Generic_Servant
[x x x x x x x x] POA/On_Demand_Activation
[x x x x x x x x] POA/Explicit_Activation
[x x x x x x x x] POA/Default_Servant
[x x x x x x x x] Thruput/TAO
       	   
NOTES	   
* Solaris/CC
	   
* NT	   
  + (brunsch): NestedUpcall MT_Client_Test mostly works, but it 
    outputs a message about a nil IOR, which seems like a problem.

  + (brunsch): Logger seems to work, although the test takes a
    long time to run.

  + (brunsch): Event and EC tests look like they have some problems
    with their scripts.  
	   
* Solaris/g++
	   
* IRIX	   
	   
* Linux/g++
	   
* Solaris/EGCS
  + Several one-button test did not finish gracefully and I had to
    kill the servers by hand (coryan). 

* DEC
 
* Other (Linux/egcs, Solaris/egcs, etc.)

# eval:(overwrite-mode nil)
# Local Variables:
# mode:indented-text
# End:
