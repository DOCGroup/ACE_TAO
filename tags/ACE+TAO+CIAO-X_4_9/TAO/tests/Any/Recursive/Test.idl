//
// $Id$
//

/// Put the interfaces in a module, to avoid global namespace pollution
module Test
{
  exception Recursive_Type_In_Any_Test_Failed {};
  exception Demarshaling_From_Any_Failed {};

  struct RecursiveStruct;
  typedef sequence<RecursiveStruct> RecursiveStructSeq;

  struct RecursiveStruct
  {
    RecursiveStructSeq recursive_structs;
    long i;
  };

  // --------------------------

  union RecursiveUnion;
  typedef sequence<RecursiveUnion> RecursiveUnionSeq;

  union RecursiveUnion switch (short)
  {
  case 0:
    RecursiveUnionSeq recursive_unions;
  default:
    long i;
  };

  // --------------------------

  valuetype IndirectlyRecursiveValuetype;
  typedef sequence<IndirectlyRecursiveValuetype>
    IndirectlyRecursiveValuetypeSeq;

  valuetype IndirectlyRecursiveValuetype
  {
    public IndirectlyRecursiveValuetypeSeq recursive_valuetypes;
  };

  // --------------------------

  valuetype DirectlyRecursiveValuetype
  {
    public DirectlyRecursiveValuetype recursive_valuetype;
  };

  // --------------------------

  /// Simple test interface.
  interface Hello
  {
    /// Return the any provided as the "in" argument.
    any get_any (in any the_any);

    /// Shutdown the server ORB.
    oneway void shutdown ();
  };

};
