
DIOP - UDP Based Pluggable Protocol - Test
==========================================

This is DIOP version 1.7:

- removed some dead code

- added support for single-threaded two-way calls.

This test tests the UDP Pluggable Protocol (DIOP) implementation
by sending oneway requests to a server. The server in turn replies
to the client with the request ID, he got on the invocation. The
client therefore implements the same object to handle replies.

To start the test do the following:

  server -o ior_file -ORBEndpoint diop://:1306

  client -k file://ior_file -ORBEndpoint diop://:1305

 or just run the Perl Script

  run_test.pl

To test proper dispatching functionality of requests from several
clients just start several clients in the same way, but with different
ports

The CORBA object implemenation checks the request ID for sequential
ordering. If a request arrives out of order, it will note it - on
client as well as on server side.

Persistent IOR test:

  - In order to be able to restart the server transparently to the
    client, the server needs to use persistent IORs.

    The port on which the server is listening should stay the same,
    this can be achieved by e.g. "-ORBEndpoint diop://:1233"


DIOP Implemenation:

- The DIOP implemenation uses unconnected UDP sockets.

- The server side implementation bypasses the actual TAO acceptor
  and opens always a UDP socket on start-up.

- The address of that UDP socket can be configured via
  e.g. -ORBEndpoint diop://:1303

  If nothing is specified, the implementation will select a port
  and open a socket on all network interfaces.
  (This is the default ORB behavior and can be overwritten using
   the -ORBEndpoint switch)

- Because no connections - no state - exist, all client requests
  from different clients arrive at the same socket!

- The client side DIOP implementation bypasses the actual 
  TAO connector. It installs a connection handler on the first
  invocation on a remote CORBA object.


DIOP Installation:

- This implementation is based on TAO 1.1a patch level 3

- Add all the DIOP_* files to the TAO library (Makefile).
  (In the next versions, this might become its own library.)

- Uncomment the following line in TAO/tao/corbafwd.h:

  #define TAO_TAG_UDP_PROFILE    0x54414f04U /* UDP */

- The application using DIOP should have a svc.conf file with the following entry:

  dynamic DIOP_Factory Service_Object * TAO:_make_TAO_DIOP_Protocol_Factory() "" 
  static Resource_Factory "-ORBProtocolFactory DIOP_Factory" 


Issues:

- Optimization of DIOP_Transport::{send,recv}

- Default port is the same on client and server, therefore 
  the client ports need to be explicitly set by -ORBEndpoint option.
  Maybe there is a way to find free ports?

- Remove commented out code from DIOP_* files.

Limitations:

- No preconnections are supported.

- For two-way calls only single threaded servers are supported.


Appendix:

 The client understands the following options:
                           -d
                           -k <ior>
                           -t <timeout in ms>
                           -i <iterations>

Comments, Suggestions, or Feedback:

  mailto:Michael.Kircher@mchp.siemens.de  or,
  mailto:John.Mackenzie.extern@icn.siemens.de

