project(*Abandoned): aceexe {
  exename = abandoned

  verbatim(gnuace, top) {
    ifneq ($(MAKE),)
    include $(ACE_ROOT)/include/makeinclude/macros.GNU
    TARGETS_NESTED := $(TARGETS_NESTED:.nested=)
    $(TARGETS_NESTED):
    "	@echo abandoned will only build on Windows"
    else
  }
  verbatim(gnuace, bottom) {
    endif
  }

  Source_Files {
    Abandoned.cpp
  }
}

project(*APC): aceexe {                                
  exename = apc

  verbatim(gnuace, top) {
    ifneq ($(MAKE),)
    include $(ACE_ROOT)/include/makeinclude/macros.GNU
    TARGETS_NESTED := $(TARGETS_NESTED:.nested=)
    $(TARGETS_NESTED):
    "	@echo apc will only build on Windows"
    else
  }
  verbatim(gnuace, bottom) {
    endif
  }

  Source_Files {
    APC.cpp
  }
}

project(*Console_Input): aceexe {                                
  exename = console_input

  verbatim(gnuace, top) {
    ifneq ($(MAKE),)
    include $(ACE_ROOT)/include/makeinclude/macros.GNU
    TARGETS_NESTED := $(TARGETS_NESTED:.nested=)
    $(TARGETS_NESTED):
    "	@echo console_input will only build on Windows"
    else
  }
  verbatim(gnuace, bottom) {
    endif
  }

  Source_Files {
    Console_Input.cpp
  }
}

project(*Directory_Changes): aceexe {                                
  exename = directory_changes

  verbatim(gnuace, top) {
    ifneq ($(MAKE),)
    include $(ACE_ROOT)/include/makeinclude/macros.GNU
    TARGETS_NESTED := $(TARGETS_NESTED:.nested=)
    $(TARGETS_NESTED):
    "	@echo directory_changes will only build on Windows"
    else
  }
  verbatim(gnuace, bottom) {
    endif
  }

  Source_Files {
    Directory_Changes.cpp
  }
}

project(*Exceptions): aceexe {                                
  exename = exceptions

  verbatim(gnuace, top) {
    ifneq ($(MAKE),)
    include $(ACE_ROOT)/include/makeinclude/macros.GNU
    TARGETS_NESTED := $(TARGETS_NESTED:.nested=)
    $(TARGETS_NESTED):
    "	@echo exceptions will only build on Windows"
    else
  }
  verbatim(gnuace, bottom) {
    endif
  }

  Source_Files {
    Exceptions.cpp
  }
}

project(*Handle_Close): aceexe {                                
  exename = handle_close

  verbatim(gnuace, top) {
    ifneq ($(MAKE),)
    include $(ACE_ROOT)/include/makeinclude/macros.GNU
    TARGETS_NESTED := $(TARGETS_NESTED:.nested=)
    $(TARGETS_NESTED):
    "	@echo handle_close will only build on Windows"
    else
  }
  verbatim(gnuace, bottom) {
    endif
  }

  Source_Files {
    Handle_Close.cpp
  }
}

project(*Multithreading): aceexe {                                
  exename = multithreading

  verbatim(gnuace, top) {
    ifneq ($(MAKE),)
    include $(ACE_ROOT)/include/makeinclude/macros.GNU
    TARGETS_NESTED := $(TARGETS_NESTED:.nested=)
    $(TARGETS_NESTED):
    "	@echo multithreading will only build on Windows"
    else
  }
  verbatim(gnuace, bottom) {
    endif
  }

  Source_Files {
    Multithreading.cpp
  }
}

project(*Network_Events): aceexe {                                
  exename = network_events

  verbatim(gnuace, top) {
    ifneq ($(MAKE),)
    include $(ACE_ROOT)/include/makeinclude/macros.GNU
    TARGETS_NESTED := $(TARGETS_NESTED:.nested=)
    $(TARGETS_NESTED):
    "	@echo network_events will only build on Windows"
    else
  }
  verbatim(gnuace, bottom) {
    endif
  }

  Source_Files {
    Network_Events.cpp
  }
}

project(*Prerun_State_Changes): aceexe {                                
  exename = prerun_state_changes

  verbatim(gnuace, top) {
    ifneq ($(MAKE),)
    include $(ACE_ROOT)/include/makeinclude/macros.GNU
    TARGETS_NESTED := $(TARGETS_NESTED:.nested=)
    $(TARGETS_NESTED):
    "	@echo prerun_state_changes will only build on Windows"
    else
  }
  verbatim(gnuace, bottom) {
    endif
  }

  Source_Files {
    Prerun_State_Changes.cpp
  }
}

project(*Registration): aceexe {
  exename = registration                                

  verbatim(gnuace, top) {
    ifneq ($(MAKE),)
    include $(ACE_ROOT)/include/makeinclude/macros.GNU
    TARGETS_NESTED := $(TARGETS_NESTED:.nested=)
    $(TARGETS_NESTED):
    "	@echo registration will only build on Windows"
    else
  }
  verbatim(gnuace, bottom) {
    endif
  }

  Source_Files {
    Registration.cpp
  }
}

project(*Registry_Changes): aceexe {                                
  exename = registry_changes

  verbatim(gnuace, top) {
    ifneq ($(MAKE),)
    include $(ACE_ROOT)/include/makeinclude/macros.GNU
    TARGETS_NESTED := $(TARGETS_NESTED:.nested=)
    $(TARGETS_NESTED):
    "	@echo registry_changes will only build on Windows"
    else
  }
  verbatim(gnuace, bottom) {
    endif
  }

  Source_Files {
    Registry_Changes.cpp
  }
}

project(*Removals): aceexe {
  exename = removals                                

  verbatim(gnuace, top) {
    ifneq ($(MAKE),)
    include $(ACE_ROOT)/include/makeinclude/macros.GNU
    TARGETS_NESTED := $(TARGETS_NESTED:.nested=)
    $(TARGETS_NESTED):
    "	@echo removals will only build on Windows"
    else
  }
  verbatim(gnuace, bottom) {
    endif
  }

  Source_Files {
    Removals.cpp
  }
}

project(*Suspended_Removals): aceexe {                                
  exename = suspended_removals

  verbatim(gnuace, top) {
    ifneq ($(MAKE),)
    include $(ACE_ROOT)/include/makeinclude/macros.GNU
    TARGETS_NESTED := $(TARGETS_NESTED:.nested=)
    $(TARGETS_NESTED):
    "	@echo suspended_removals will only build on Windows"
    else
  }
  verbatim(gnuace, bottom) {
    endif
  }

  Source_Files {
    Suspended_Removals.cpp
  }
}

project(*Talker): aceexe {    
  exename = talker                            

  verbatim(gnuace, top) {
    ifneq ($(MAKE),)
    include $(ACE_ROOT)/include/makeinclude/macros.GNU
    TARGETS_NESTED := $(TARGETS_NESTED:.nested=)
    $(TARGETS_NESTED):
    "	@echo talker will only build on Windows"
    else
  }
  verbatim(gnuace, bottom) {
    endif
  }

  Source_Files {
    Talker.cpp
  }
}

project(*Timeouts): aceexe {                                
  exename = timeouts

  verbatim(gnuace, top) {
    ifneq ($(MAKE),)
    include $(ACE_ROOT)/include/makeinclude/macros.GNU
    TARGETS_NESTED := $(TARGETS_NESTED:.nested=)
    $(TARGETS_NESTED):
    "	@echo timeouts will only build on Windows"
    else
  }
  verbatim(gnuace, bottom) {
    endif
  }

  Source_Files {
    Timeouts.cpp
  }
}

project(*Window_Messages): aceexe {                                
  exename = window_messages

  verbatim(gnuace, top) {
    ifneq ($(MAKE),)
    include $(ACE_ROOT)/include/makeinclude/macros.GNU
    TARGETS_NESTED := $(TARGETS_NESTED:.nested=)
    $(TARGETS_NESTED):
    "	@echo window_messages will only build on Windows"
    else
  }
  verbatim(gnuace, bottom) {
    endif
  }

  Source_Files {
    Window_Messages.cpp
  }
}
