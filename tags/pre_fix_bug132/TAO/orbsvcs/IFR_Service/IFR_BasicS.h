// -*- C++ -*-
//
// $Id$

// ****  Code generated by the The ACE ORB (TAO) IDL Compiler ****
// TAO and the TAO IDL Compiler have been developed by:
//       Center for Distributed Object Computing
//       Washington University
//       St. Louis, MO
//       USA
//       http://www.cs.wustl.edu/~schmidt/doc-center.html
// and
//       Distributed Object Computing Laboratory
//       University of California at Irvine
//       Irvine, CA
//       USA
//       http://doc.ece.uci.edu/
//
// Information about TAO is available at:
//     http://www.cs.wustl.edu/~schmidt/TAO.html

#ifndef TAO_IDL_IFR_BASICS_H
#define TAO_IDL_IFR_BASICS_H

#include "ace/pre.h"
#include "IFR_BaseS.h"

#if !defined (ACE_LACKS_PRAGMA_ONCE)
# pragma once
#endif /* ACE_LACKS_PRAGMA_ONCE */

#if defined(_MSC_VER)
#if (_MSC_VER >= 1200)
#pragma warning(push)
#endif /* _MSC_VER >= 1200 */
#pragma warning(disable:4250)
#endif /* _MSC_VER */

#if defined (__BORLANDC__)
#pragma option push -w-rvl -w-rch -w-ccc -w-inl
#endif /* __BORLANDC__ */

TAO_NAMESPACE  POA_CORBA
{
  class Repository;
  typedef Repository *Repository_ptr;
  // Forward Classes Declaration
  class _TAO_Repository_ThruPOA_Proxy_Impl;
  class _TAO_Repository_Strategized_Proxy_Broker;
  
  class  Repository : public virtual Container
  {
  protected:
    Repository (void);

  public:
    Repository (const Repository& rhs);
    virtual ~Repository (void);


    virtual CORBA::Boolean _is_a (
        const char* logical_type_id,
        CORBA::Environment &ACE_TRY_ENV = 
          TAO_default_environment ()
      );

    virtual void* _downcast (
        const char* logical_type_id
      );

    static void _is_a_skel (
        TAO_ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &ACE_TRY_ENV = 
          TAO_default_environment ()
      );

    static void _non_existent_skel (
        TAO_ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &ACE_TRY_ENV = 
          TAO_default_environment ()
      );

    virtual void _dispatch (
        TAO_ServerRequest &_tao_req,
        void *_tao_context,
        CORBA::Environment &ACE_TRY_ENV = 
          TAO_default_environment ()
      );

    ::CORBA::Repository *_this (
        CORBA::Environment &ACE_TRY_ENV = 
          TAO_default_environment ()
      );

    virtual const char* _interface_repository_id (void) const;

    virtual CORBA::Contained_ptr lookup_id (
        const char * search_id,
        CORBA::Environment &ACE_TRY_ENV = 
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      )) = 0;

    static void lookup_id_skel (
        TAO_ServerRequest &_tao_req, 
        void *_tao_obj, 
        void *_tao_context, 
        CORBA::Environment &ACE_TRY_ENV = 
          TAO_default_environment ()
      );

    virtual CORBA::TypeCode_ptr get_canonical_typecode (
        CORBA::TypeCode_ptr tc,
        CORBA::Environment &ACE_TRY_ENV = 
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      )) = 0;

    static void get_canonical_typecode_skel (
        TAO_ServerRequest &_tao_req, 
        void *_tao_obj, 
        void *_tao_context, 
        CORBA::Environment &ACE_TRY_ENV = 
          TAO_default_environment ()
      );

    virtual CORBA::PrimitiveDef_ptr get_primitive (
        CORBA::PrimitiveKind kind,
        CORBA::Environment &ACE_TRY_ENV = 
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      )) = 0;

    static void get_primitive_skel (
        TAO_ServerRequest &_tao_req, 
        void *_tao_obj, 
        void *_tao_context, 
        CORBA::Environment &ACE_TRY_ENV = 
          TAO_default_environment ()
      );

    virtual CORBA::StringDef_ptr create_string (
        CORBA::ULong bound,
        CORBA::Environment &ACE_TRY_ENV = 
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      )) = 0;

    static void create_string_skel (
        TAO_ServerRequest &_tao_req, 
        void *_tao_obj, 
        void *_tao_context, 
        CORBA::Environment &ACE_TRY_ENV = 
          TAO_default_environment ()
      );

    virtual CORBA::WstringDef_ptr create_wstring (
        CORBA::ULong bound,
        CORBA::Environment &ACE_TRY_ENV = 
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      )) = 0;

    static void create_wstring_skel (
        TAO_ServerRequest &_tao_req, 
        void *_tao_obj, 
        void *_tao_context, 
        CORBA::Environment &ACE_TRY_ENV = 
          TAO_default_environment ()
      );

    virtual CORBA::SequenceDef_ptr create_sequence (
        CORBA::ULong bound,
        CORBA::IDLType_ptr element_type,
        CORBA::Environment &ACE_TRY_ENV = 
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      )) = 0;

    static void create_sequence_skel (
        TAO_ServerRequest &_tao_req, 
        void *_tao_obj, 
        void *_tao_context, 
        CORBA::Environment &ACE_TRY_ENV = 
          TAO_default_environment ()
      );

    virtual CORBA::ArrayDef_ptr create_array (
        CORBA::ULong length,
        CORBA::IDLType_ptr element_type,
        CORBA::Environment &ACE_TRY_ENV = 
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      )) = 0;

    static void create_array_skel (
        TAO_ServerRequest &_tao_req, 
        void *_tao_obj, 
        void *_tao_context, 
        CORBA::Environment &ACE_TRY_ENV = 
          TAO_default_environment ()
      );

    virtual CORBA::FixedDef_ptr create_fixed (
        CORBA::UShort digits,
        CORBA::Short scale,
        CORBA::Environment &ACE_TRY_ENV = 
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      )) = 0;

    static void create_fixed_skel (
        TAO_ServerRequest &_tao_req, 
        void *_tao_obj, 
        void *_tao_context, 
        CORBA::Environment &ACE_TRY_ENV = 
          TAO_default_environment ()
      );

    static void lookup_skel (
        TAO_ServerRequest &req, 
        void *obj,
        void *context,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      );

    static void contents_skel (
        TAO_ServerRequest &req, 
        void *obj,
        void *context,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      );

    static void lookup_name_skel (
        TAO_ServerRequest &req, 
        void *obj,
        void *context,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      );

    static void describe_contents_skel (
        TAO_ServerRequest &req, 
        void *obj,
        void *context,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      );

    static void create_module_skel (
        TAO_ServerRequest &req, 
        void *obj,
        void *context,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      );

    static void create_constant_skel (
        TAO_ServerRequest &req, 
        void *obj,
        void *context,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      );

    static void create_struct_skel (
        TAO_ServerRequest &req, 
        void *obj,
        void *context,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      );

    static void create_union_skel (
        TAO_ServerRequest &req, 
        void *obj,
        void *context,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      );

    static void create_enum_skel (
        TAO_ServerRequest &req, 
        void *obj,
        void *context,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      );

    static void create_alias_skel (
        TAO_ServerRequest &req, 
        void *obj,
        void *context,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      );

    static void create_interface_skel (
        TAO_ServerRequest &req, 
        void *obj,
        void *context,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      );

    static void create_value_skel (
        TAO_ServerRequest &req, 
        void *obj,
        void *context,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      );

    static void create_value_box_skel (
        TAO_ServerRequest &req, 
        void *obj,
        void *context,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      );

    static void create_exception_skel (
        TAO_ServerRequest &req, 
        void *obj,
        void *context,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      );

    static void create_native_skel (
        TAO_ServerRequest &req, 
        void *obj,
        void *context,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      );

    static void create_abstract_interface_skel (
        TAO_ServerRequest &req, 
        void *obj,
        void *context,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      );

    static void create_local_interface_skel (
        TAO_ServerRequest &req, 
        void *obj,
        void *context,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      );

    static void _get_def_kind_skel (
        TAO_ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      );

    static void destroy_skel (
        TAO_ServerRequest &req, 
        void *obj,
        void *context,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      );

  };

  
  ///////////////////////////////////////////////////////////////////////
  //               Strategized Proxy Broker Declaration 
  //
  
  class  _TAO_Repository_Strategized_Proxy_Broker : public virtual ::_TAO_Repository_Proxy_Broker
  {
  public: 
    _TAO_Repository_Strategized_Proxy_Broker (void);
    
    virtual ~_TAO_Repository_Strategized_Proxy_Broker (void);
    
    virtual ::_TAO_Repository_Proxy_Impl &select_proxy (
      ::CORBA::Repository *object,
      CORBA_Environment &ACE_TRY_ENV = TAO_default_environment ()
    );
  
  private:
  
  // Helper methods that takes care to create the proxy
  // as soon as their use is necessary.
    void create_proxy (
      int strategy,
      CORBA::Environment &ACE_TRY_ENV
    );
  
  private:
    
    // Caches the proxy implementations. The proxy implementation
    // are totally stateless, and those can be shared by all the
    // instances of a given IDL interface type.
    ::_TAO_Repository_Proxy_Impl
     *proxy_cache_[TAO_Collocation_Strategies::CS_LAST];
    
    TAO_SYNCH_MUTEX mutex_;
  // This funxtion is used to get an handle to the unique instance
  // of the Strategized Proxy Broker that is available for a given
  // interface.
  
  public:
    static _TAO_Repository_Strategized_Proxy_Broker *the_TAO_Repository_Strategized_Proxy_Broker (void);
  };
  
  
  //
  //            End Strategized Proxy Broker Declaration 
  ///////////////////////////////////////////////////////////////////////
  
  
///////////////////////////////////////////////////////////////////////
//                    ThruPOA  Impl. Declaration
//

class  _TAO_Repository_ThruPOA_Proxy_Impl : 
  public virtual ::_TAO_Repository_Proxy_Impl,
  public virtual TAO_ThruPOA_Object_Proxy_Impl,
  public virtual ::POA_CORBA::_TAO_Container_ThruPOA_Proxy_Impl
  
{
public:
  _TAO_Repository_ThruPOA_Proxy_Impl (void);
  
  virtual ~_TAO_Repository_ThruPOA_Proxy_Impl (void) { }
  
    virtual CORBA::Contained_ptr lookup_id (
      CORBA_Object *_collocated_tao_target_,
      const char * search_id,
      CORBA::Environment &ACE_TRY_ENV
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  virtual CORBA::TypeCode_ptr get_canonical_typecode (
      CORBA_Object *_collocated_tao_target_,
      CORBA::TypeCode_ptr tc,
      CORBA::Environment &ACE_TRY_ENV
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  virtual CORBA::PrimitiveDef_ptr get_primitive (
      CORBA_Object *_collocated_tao_target_,
      CORBA::PrimitiveKind kind,
      CORBA::Environment &ACE_TRY_ENV
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  virtual CORBA::StringDef_ptr create_string (
      CORBA_Object *_collocated_tao_target_,
      CORBA::ULong bound,
      CORBA::Environment &ACE_TRY_ENV
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  virtual CORBA::WstringDef_ptr create_wstring (
      CORBA_Object *_collocated_tao_target_,
      CORBA::ULong bound,
      CORBA::Environment &ACE_TRY_ENV
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  virtual CORBA::SequenceDef_ptr create_sequence (
      CORBA_Object *_collocated_tao_target_,
      CORBA::ULong bound,
      CORBA::IDLType_ptr element_type,
      CORBA::Environment &ACE_TRY_ENV
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  virtual CORBA::ArrayDef_ptr create_array (
      CORBA_Object *_collocated_tao_target_,
      CORBA::ULong length,
      CORBA::IDLType_ptr element_type,
      CORBA::Environment &ACE_TRY_ENV
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  virtual CORBA::FixedDef_ptr create_fixed (
      CORBA_Object *_collocated_tao_target_,
      CORBA::UShort digits,
      CORBA::Short scale,
      CORBA::Environment &ACE_TRY_ENV
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

};


//
//                ThruPOA  Proxy Impl. Declaration
///////////////////////////////////////////////////////////////////////


#if defined (ACE_HAS_USING_KEYWORD)
// TIE class: Refer to CORBA v2.2, Section 20.34.4
template <class T>
class  Repository_tie : public Repository
{
public:
  Repository_tie (T &t);
  // the T& ctor
  Repository_tie (T &t, PortableServer::POA_ptr poa);
  // ctor taking a POA
  Repository_tie (T *tp, CORBA::Boolean release=1);
  // ctor taking pointer and an ownership flag
  Repository_tie (T *tp, PortableServer::POA_ptr poa, CORBA::Boolean release=1);
  // ctor with T*, ownership flag and a POA
  ~Repository_tie (void);
  // dtor
  
  // TIE specific functions
  T *_tied_object (void);
  // return the underlying object
  void _tied_object (T &obj);
  // set the underlying object
  void _tied_object (T *obj, CORBA::Boolean release=1);
  // set the underlying object and the ownership flag
  CORBA::Boolean _is_owner (void);
  // do we own it
  void _is_owner (CORBA::Boolean b);
  // set the ownership
  
  // overridden ServantBase operations
  PortableServer::POA_ptr _default_POA (
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    );
  CORBA::Contained_ptr lookup_id (
      const char * search_id,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  CORBA::TypeCode_ptr get_canonical_typecode (
      CORBA::TypeCode_ptr tc,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  CORBA::PrimitiveDef_ptr get_primitive (
      CORBA::PrimitiveKind kind,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  CORBA::StringDef_ptr create_string (
      CORBA::ULong bound,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  CORBA::WstringDef_ptr create_wstring (
      CORBA::ULong bound,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  CORBA::SequenceDef_ptr create_sequence (
      CORBA::ULong bound,
      CORBA::IDLType_ptr element_type,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  CORBA::ArrayDef_ptr create_array (
      CORBA::ULong length,
      CORBA::IDLType_ptr element_type,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  CORBA::FixedDef_ptr create_fixed (
      CORBA::UShort digits,
      CORBA::Short scale,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  CORBA::Contained_ptr lookup (
      const char * search_name,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  CORBA::ContainedSeq * contents (
      CORBA::DefinitionKind limit_type,
      CORBA::Boolean exclude_inherited,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  CORBA::ContainedSeq * lookup_name (
      const char * search_name,
      CORBA::Long levels_to_search,
      CORBA::DefinitionKind limit_type,
      CORBA::Boolean exclude_inherited,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  CORBA::Container::DescriptionSeq * describe_contents (
      CORBA::DefinitionKind limit_type,
      CORBA::Boolean exclude_inherited,
      CORBA::Long max_returned_objs,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  CORBA::ModuleDef_ptr create_module (
      const char * id,
      const char * name,
      const char * version,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  CORBA::ConstantDef_ptr create_constant (
      const char * id,
      const char * name,
      const char * version,
      CORBA::IDLType_ptr type,
      const CORBA::Any & value,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  CORBA::StructDef_ptr create_struct (
      const char * id,
      const char * name,
      const char * version,
      const CORBA::StructMemberSeq & members,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  CORBA::UnionDef_ptr create_union (
      const char * id,
      const char * name,
      const char * version,
      CORBA::IDLType_ptr discriminator_type,
      const CORBA::UnionMemberSeq & members,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  CORBA::EnumDef_ptr create_enum (
      const char * id,
      const char * name,
      const char * version,
      const CORBA::EnumMemberSeq & members,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  CORBA::AliasDef_ptr create_alias (
      const char * id,
      const char * name,
      const char * version,
      CORBA::IDLType_ptr original_type,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  CORBA::InterfaceDef_ptr create_interface (
      const char * id,
      const char * name,
      const char * version,
      const CORBA::InterfaceDefSeq & base_interfaces,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  CORBA::ValueDef_ptr create_value (
      const char * id,
      const char * name,
      const char * version,
      CORBA::Boolean is_custom,
      CORBA::Boolean is_abstract,
      CORBA::ValueDef_ptr base_value,
      CORBA::Boolean is_truncatable,
      const CORBA::ValueDefSeq & abstract_base_values,
      const CORBA::InterfaceDefSeq & supported_interfaces,
      const CORBA::InitializerSeq & initializers,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  CORBA::ValueBoxDef_ptr create_value_box (
      const char * id,
      const char * name,
      const char * version,
      CORBA::IDLType_ptr original_type_def,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  CORBA::ExceptionDef_ptr create_exception (
      const char * id,
      const char * name,
      const char * version,
      const CORBA::StructMemberSeq & members,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  CORBA::NativeDef_ptr create_native (
      const char * id,
      const char * name,
      const char * version,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  CORBA::AbstractInterfaceDef_ptr create_abstract_interface (
      const char * id,
      const char * name,
      const char * version,
      const CORBA::AbstractInterfaceDefSeq & base_interfaces,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  CORBA::LocalInterfaceDef_ptr create_local_interface (
      const char * id,
      const char * name,
      const char * version,
      const CORBA::InterfaceDefSeq & base_interfaces,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  CORBA::DefinitionKind def_kind (
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  void destroy (
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

private:
  T *ptr_;
  PortableServer::POA_var poa_;
  CORBA::Boolean rel_;
  
  // copy and assignment are not allowed
  Repository_tie (const Repository_tie &);
  void operator= (const Repository_tie &);
};

#endif /* ACE_HAS_USING_KEYWORD */

class ModuleDef;
typedef ModuleDef *ModuleDef_ptr;
// Forward Classes Declaration
class _TAO_ModuleDef_ThruPOA_Proxy_Impl;
class _TAO_ModuleDef_Strategized_Proxy_Broker;

class  ModuleDef : public virtual Container, public virtual Contained
{
protected:
  ModuleDef (void);

public:
  ModuleDef (const ModuleDef& rhs);
  virtual ~ModuleDef (void);


  virtual CORBA::Boolean _is_a (
      const char* logical_type_id,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    );

  virtual void* _downcast (
      const char* logical_type_id
    );

  static void _is_a_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    );

  static void _non_existent_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    );

  virtual void _dispatch (
      TAO_ServerRequest &_tao_req,
      void *_tao_context,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    );

  ::CORBA::ModuleDef *_this (
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    );

  virtual const char* _interface_repository_id (void) const;

  static void lookup_skel (
      TAO_ServerRequest &req, 
      void *obj,
      void *context,
      CORBA::Environment &ACE_TRY_ENV =
        TAO_default_environment ()
    );

  static void contents_skel (
      TAO_ServerRequest &req, 
      void *obj,
      void *context,
      CORBA::Environment &ACE_TRY_ENV =
        TAO_default_environment ()
    );

  static void lookup_name_skel (
      TAO_ServerRequest &req, 
      void *obj,
      void *context,
      CORBA::Environment &ACE_TRY_ENV =
        TAO_default_environment ()
    );

  static void describe_contents_skel (
      TAO_ServerRequest &req, 
      void *obj,
      void *context,
      CORBA::Environment &ACE_TRY_ENV =
        TAO_default_environment ()
    );

  static void create_module_skel (
      TAO_ServerRequest &req, 
      void *obj,
      void *context,
      CORBA::Environment &ACE_TRY_ENV =
        TAO_default_environment ()
    );

  static void create_constant_skel (
      TAO_ServerRequest &req, 
      void *obj,
      void *context,
      CORBA::Environment &ACE_TRY_ENV =
        TAO_default_environment ()
    );

  static void create_struct_skel (
      TAO_ServerRequest &req, 
      void *obj,
      void *context,
      CORBA::Environment &ACE_TRY_ENV =
        TAO_default_environment ()
    );

  static void create_union_skel (
      TAO_ServerRequest &req, 
      void *obj,
      void *context,
      CORBA::Environment &ACE_TRY_ENV =
        TAO_default_environment ()
    );

  static void create_enum_skel (
      TAO_ServerRequest &req, 
      void *obj,
      void *context,
      CORBA::Environment &ACE_TRY_ENV =
        TAO_default_environment ()
    );

  static void create_alias_skel (
      TAO_ServerRequest &req, 
      void *obj,
      void *context,
      CORBA::Environment &ACE_TRY_ENV =
        TAO_default_environment ()
    );

  static void create_interface_skel (
      TAO_ServerRequest &req, 
      void *obj,
      void *context,
      CORBA::Environment &ACE_TRY_ENV =
        TAO_default_environment ()
    );

  static void create_value_skel (
      TAO_ServerRequest &req, 
      void *obj,
      void *context,
      CORBA::Environment &ACE_TRY_ENV =
        TAO_default_environment ()
    );

  static void create_value_box_skel (
      TAO_ServerRequest &req, 
      void *obj,
      void *context,
      CORBA::Environment &ACE_TRY_ENV =
        TAO_default_environment ()
    );

  static void create_exception_skel (
      TAO_ServerRequest &req, 
      void *obj,
      void *context,
      CORBA::Environment &ACE_TRY_ENV =
        TAO_default_environment ()
    );

  static void create_native_skel (
      TAO_ServerRequest &req, 
      void *obj,
      void *context,
      CORBA::Environment &ACE_TRY_ENV =
        TAO_default_environment ()
    );

  static void create_abstract_interface_skel (
      TAO_ServerRequest &req, 
      void *obj,
      void *context,
      CORBA::Environment &ACE_TRY_ENV =
        TAO_default_environment ()
    );

  static void create_local_interface_skel (
      TAO_ServerRequest &req, 
      void *obj,
      void *context,
      CORBA::Environment &ACE_TRY_ENV =
        TAO_default_environment ()
    );

  static void _get_id_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context,
      CORBA::Environment &ACE_TRY_ENV =
        TAO_default_environment ()
    );

  static void _set_id_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    );

  static void _get_name_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context,
      CORBA::Environment &ACE_TRY_ENV =
        TAO_default_environment ()
    );

  static void _set_name_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    );

  static void _get_version_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context,
      CORBA::Environment &ACE_TRY_ENV =
        TAO_default_environment ()
    );

  static void _set_version_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    );

  static void _get_defined_in_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context,
      CORBA::Environment &ACE_TRY_ENV =
        TAO_default_environment ()
    );

  static void _get_absolute_name_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context,
      CORBA::Environment &ACE_TRY_ENV =
        TAO_default_environment ()
    );

  static void _get_containing_repository_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context,
      CORBA::Environment &ACE_TRY_ENV =
        TAO_default_environment ()
    );

  static void describe_skel (
      TAO_ServerRequest &req, 
      void *obj,
      void *context,
      CORBA::Environment &ACE_TRY_ENV =
        TAO_default_environment ()
    );

  static void move_skel (
      TAO_ServerRequest &req, 
      void *obj,
      void *context,
      CORBA::Environment &ACE_TRY_ENV =
        TAO_default_environment ()
    );

  static void _get_def_kind_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context,
      CORBA::Environment &ACE_TRY_ENV =
        TAO_default_environment ()
    );

  static void destroy_skel (
      TAO_ServerRequest &req, 
      void *obj,
      void *context,
      CORBA::Environment &ACE_TRY_ENV =
        TAO_default_environment ()
    );
};


///////////////////////////////////////////////////////////////////////
//               Strategized Proxy Broker Declaration 
//

class  _TAO_ModuleDef_Strategized_Proxy_Broker : public virtual ::_TAO_ModuleDef_Proxy_Broker
{
public: 
  _TAO_ModuleDef_Strategized_Proxy_Broker (void);
  
  virtual ~_TAO_ModuleDef_Strategized_Proxy_Broker (void);
  
  virtual ::_TAO_ModuleDef_Proxy_Impl &select_proxy (
    ::CORBA::ModuleDef *object,
    CORBA_Environment &ACE_TRY_ENV = TAO_default_environment ()
  );

private:

// Helper methods that takes care to create the proxy
// as soon as their use is necessary.
  void create_proxy (
    int strategy,
    CORBA::Environment &ACE_TRY_ENV
  );

private:
  
  // Caches the proxy implementations. The proxy implementation
  // are totally stateless, and those can be shared by all the
  // instances of a given IDL interface type.
  ::_TAO_ModuleDef_Proxy_Impl
   *proxy_cache_[TAO_Collocation_Strategies::CS_LAST];
  
  TAO_SYNCH_MUTEX mutex_;
// This funxtion is used to get an handle to the unique instance
// of the Strategized Proxy Broker that is available for a given
// interface.

public:
  static _TAO_ModuleDef_Strategized_Proxy_Broker *the_TAO_ModuleDef_Strategized_Proxy_Broker (void);
};


//
//            End Strategized Proxy Broker Declaration 
///////////////////////////////////////////////////////////////////////


///////////////////////////////////////////////////////////////////////
//                    ThruPOA  Impl. Declaration
//

class  _TAO_ModuleDef_ThruPOA_Proxy_Impl : 
  public virtual ::_TAO_ModuleDef_Proxy_Impl,
  public virtual TAO_ThruPOA_Object_Proxy_Impl,
  public virtual ::POA_CORBA::_TAO_Container_ThruPOA_Proxy_Impl, 
  public virtual ::POA_CORBA::_TAO_Contained_ThruPOA_Proxy_Impl
  
{
public:
  _TAO_ModuleDef_ThruPOA_Proxy_Impl (void);
  
  virtual ~_TAO_ModuleDef_ThruPOA_Proxy_Impl (void) { }
  
  };


//
//                ThruPOA  Proxy Impl. Declaration
///////////////////////////////////////////////////////////////////////


#if defined (ACE_HAS_USING_KEYWORD)
// TIE class: Refer to CORBA v2.2, Section 20.34.4
template <class T>
class  ModuleDef_tie : public ModuleDef
{
public:
  ModuleDef_tie (T &t);
  // the T& ctor
  ModuleDef_tie (T &t, PortableServer::POA_ptr poa);
  // ctor taking a POA
  ModuleDef_tie (T *tp, CORBA::Boolean release=1);
  // ctor taking pointer and an ownership flag
  ModuleDef_tie (T *tp, PortableServer::POA_ptr poa, CORBA::Boolean release=1);
  // ctor with T*, ownership flag and a POA
  ~ModuleDef_tie (void);
  // dtor
  
  // TIE specific functions
  T *_tied_object (void);
  // return the underlying object
  void _tied_object (T &obj);
  // set the underlying object
  void _tied_object (T *obj, CORBA::Boolean release=1);
  // set the underlying object and the ownership flag
  CORBA::Boolean _is_owner (void);
  // do we own it
  void _is_owner (CORBA::Boolean b);
  // set the ownership
  
  // overridden ServantBase operations
  PortableServer::POA_ptr _default_POA (
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    );
  CORBA::Contained_ptr lookup (
      const char * search_name,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  CORBA::ContainedSeq * contents (
      CORBA::DefinitionKind limit_type,
      CORBA::Boolean exclude_inherited,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  CORBA::ContainedSeq * lookup_name (
      const char * search_name,
      CORBA::Long levels_to_search,
      CORBA::DefinitionKind limit_type,
      CORBA::Boolean exclude_inherited,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  CORBA::Container::DescriptionSeq * describe_contents (
      CORBA::DefinitionKind limit_type,
      CORBA::Boolean exclude_inherited,
      CORBA::Long max_returned_objs,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  CORBA::ModuleDef_ptr create_module (
      const char * id,
      const char * name,
      const char * version,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  CORBA::ConstantDef_ptr create_constant (
      const char * id,
      const char * name,
      const char * version,
      CORBA::IDLType_ptr type,
      const CORBA::Any & value,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  CORBA::StructDef_ptr create_struct (
      const char * id,
      const char * name,
      const char * version,
      const CORBA::StructMemberSeq & members,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  CORBA::UnionDef_ptr create_union (
      const char * id,
      const char * name,
      const char * version,
      CORBA::IDLType_ptr discriminator_type,
      const CORBA::UnionMemberSeq & members,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  CORBA::EnumDef_ptr create_enum (
      const char * id,
      const char * name,
      const char * version,
      const CORBA::EnumMemberSeq & members,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  CORBA::AliasDef_ptr create_alias (
      const char * id,
      const char * name,
      const char * version,
      CORBA::IDLType_ptr original_type,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  CORBA::InterfaceDef_ptr create_interface (
      const char * id,
      const char * name,
      const char * version,
      const CORBA::InterfaceDefSeq & base_interfaces,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  CORBA::ValueDef_ptr create_value (
      const char * id,
      const char * name,
      const char * version,
      CORBA::Boolean is_custom,
      CORBA::Boolean is_abstract,
      CORBA::ValueDef_ptr base_value,
      CORBA::Boolean is_truncatable,
      const CORBA::ValueDefSeq & abstract_base_values,
      const CORBA::InterfaceDefSeq & supported_interfaces,
      const CORBA::InitializerSeq & initializers,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  CORBA::ValueBoxDef_ptr create_value_box (
      const char * id,
      const char * name,
      const char * version,
      CORBA::IDLType_ptr original_type_def,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  CORBA::ExceptionDef_ptr create_exception (
      const char * id,
      const char * name,
      const char * version,
      const CORBA::StructMemberSeq & members,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  CORBA::NativeDef_ptr create_native (
      const char * id,
      const char * name,
      const char * version,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  CORBA::AbstractInterfaceDef_ptr create_abstract_interface (
      const char * id,
      const char * name,
      const char * version,
      const CORBA::AbstractInterfaceDefSeq & base_interfaces,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  CORBA::LocalInterfaceDef_ptr create_local_interface (
      const char * id,
      const char * name,
      const char * version,
      const CORBA::InterfaceDefSeq & base_interfaces,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  char * id (
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  void id (
      const char * id,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  char * name (
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  void name (
      const char * name,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  char * version (
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  void version (
      const char * version,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  CORBA::Container_ptr defined_in (
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  char * absolute_name (
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  CORBA::Repository_ptr containing_repository (
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  CORBA::Contained::Description * describe (
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  void move (
      CORBA::Container_ptr new_container,
      const char * new_name,
      const char * new_version,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  CORBA::DefinitionKind def_kind (
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  void destroy (
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

private:
  T *ptr_;
  PortableServer::POA_var poa_;
  CORBA::Boolean rel_;
  
  // copy and assignment are not allowed
  ModuleDef_tie (const ModuleDef_tie &);
  void operator= (const ModuleDef_tie &);
};

#endif /* ACE_HAS_USING_KEYWORD */

class ConstantDef;
typedef ConstantDef *ConstantDef_ptr;
// Forward Classes Declaration
class _TAO_ConstantDef_ThruPOA_Proxy_Impl;
class _TAO_ConstantDef_Strategized_Proxy_Broker;

class  ConstantDef : public virtual Contained
{
protected:
  ConstantDef (void);

public:
  ConstantDef (const ConstantDef& rhs);
  virtual ~ConstantDef (void);


  virtual CORBA::Boolean _is_a (
      const char* logical_type_id,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    );

  virtual void* _downcast (
      const char* logical_type_id
    );

  static void _is_a_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    );

  static void _non_existent_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    );

  virtual void _dispatch (
      TAO_ServerRequest &_tao_req,
      void *_tao_context,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    );

  ::CORBA::ConstantDef *_this (
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    );

  virtual const char* _interface_repository_id (void) const;

  virtual CORBA::TypeCode_ptr type (
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    )) = 0;

  static void _get_type_skel (
      TAO_ServerRequest &_tao_req, 
      void *_tao_obj, 
      void *_tao_context, 
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    );

  virtual CORBA::IDLType_ptr type_def (
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    )) = 0;

  static void _get_type_def_skel (
      TAO_ServerRequest &_tao_req, 
      void *_tao_obj, 
      void *_tao_context, 
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    );

  virtual void type_def (
      CORBA::IDLType_ptr type_def,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    )) = 0;

  static void _set_type_def_skel (
      TAO_ServerRequest &_tao_req, 
      void *_tao_obj, 
      void *_tao_context, 
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    );

  virtual CORBA::Any * value (
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    )) = 0;

  static void _get_value_skel (
      TAO_ServerRequest &_tao_req, 
      void *_tao_obj, 
      void *_tao_context, 
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    );

  virtual void value (
      const CORBA::Any & value,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    )) = 0;

  static void _set_value_skel (
      TAO_ServerRequest &_tao_req, 
      void *_tao_obj, 
      void *_tao_context, 
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    );

  static void _get_id_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context,
      CORBA::Environment &ACE_TRY_ENV =
        TAO_default_environment ()
    );

  static void _set_id_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    );

  static void _get_name_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context,
      CORBA::Environment &ACE_TRY_ENV =
        TAO_default_environment ()
    );

  static void _set_name_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    );

  static void _get_version_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context,
      CORBA::Environment &ACE_TRY_ENV =
        TAO_default_environment ()
    );

  static void _set_version_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    );

  static void _get_defined_in_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context,
      CORBA::Environment &ACE_TRY_ENV =
        TAO_default_environment ()
    );

  static void _get_absolute_name_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context,
      CORBA::Environment &ACE_TRY_ENV =
        TAO_default_environment ()
    );

  static void _get_containing_repository_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context,
      CORBA::Environment &ACE_TRY_ENV =
        TAO_default_environment ()
    );

  static void describe_skel (
      TAO_ServerRequest &req, 
      void *obj,
      void *context,
      CORBA::Environment &ACE_TRY_ENV =
        TAO_default_environment ()
    );

  static void move_skel (
      TAO_ServerRequest &req, 
      void *obj,
      void *context,
      CORBA::Environment &ACE_TRY_ENV =
        TAO_default_environment ()
    );

  static void _get_def_kind_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context,
      CORBA::Environment &ACE_TRY_ENV =
        TAO_default_environment ()
    );

  static void destroy_skel (
      TAO_ServerRequest &req, 
      void *obj,
      void *context,
      CORBA::Environment &ACE_TRY_ENV =
        TAO_default_environment ()
    );
};


///////////////////////////////////////////////////////////////////////
//               Strategized Proxy Broker Declaration 
//

class  _TAO_ConstantDef_Strategized_Proxy_Broker : public virtual ::_TAO_ConstantDef_Proxy_Broker
{
public: 
  _TAO_ConstantDef_Strategized_Proxy_Broker (void);
  
  virtual ~_TAO_ConstantDef_Strategized_Proxy_Broker (void);
  
  virtual ::_TAO_ConstantDef_Proxy_Impl &select_proxy (
    ::CORBA::ConstantDef *object,
    CORBA_Environment &ACE_TRY_ENV = TAO_default_environment ()
  );

private:

// Helper methods that takes care to create the proxy
// as soon as their use is necessary.
  void create_proxy (
    int strategy,
    CORBA::Environment &ACE_TRY_ENV
  );

private:
  
  // Caches the proxy implementations. The proxy implementation
  // are totally stateless, and those can be shared by all the
  // instances of a given IDL interface type.
  ::_TAO_ConstantDef_Proxy_Impl
   *proxy_cache_[TAO_Collocation_Strategies::CS_LAST];
  
  TAO_SYNCH_MUTEX mutex_;
// This funxtion is used to get an handle to the unique instance
// of the Strategized Proxy Broker that is available for a given
// interface.

public:
  static _TAO_ConstantDef_Strategized_Proxy_Broker *the_TAO_ConstantDef_Strategized_Proxy_Broker (void);
};


//
//            End Strategized Proxy Broker Declaration 
///////////////////////////////////////////////////////////////////////


///////////////////////////////////////////////////////////////////////
//                    ThruPOA  Impl. Declaration
//

class  _TAO_ConstantDef_ThruPOA_Proxy_Impl : 
  public virtual ::_TAO_ConstantDef_Proxy_Impl,
  public virtual TAO_ThruPOA_Object_Proxy_Impl,
  public virtual ::POA_CORBA::_TAO_Contained_ThruPOA_Proxy_Impl
  
{
public:
  _TAO_ConstantDef_ThruPOA_Proxy_Impl (void);
  
  virtual ~_TAO_ConstantDef_ThruPOA_Proxy_Impl (void) { }
  
    virtual CORBA::TypeCode_ptr type (
      CORBA_Object *_collocated_tao_target_,
      CORBA::Environment &ACE_TRY_ENV
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  virtual CORBA::IDLType_ptr type_def (
      CORBA_Object *_collocated_tao_target_,
      CORBA::Environment &ACE_TRY_ENV
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  virtual void type_def (
      CORBA_Object *_collocated_tao_target_,
      CORBA::IDLType_ptr type_def,
      CORBA::Environment &ACE_TRY_ENV
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  virtual CORBA::Any * value (
      CORBA_Object *_collocated_tao_target_,
      CORBA::Environment &ACE_TRY_ENV
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  virtual void value (
      CORBA_Object *_collocated_tao_target_,
      const CORBA::Any & value,
      CORBA::Environment &ACE_TRY_ENV
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

};


//
//                ThruPOA  Proxy Impl. Declaration
///////////////////////////////////////////////////////////////////////


#if defined (ACE_HAS_USING_KEYWORD)
// TIE class: Refer to CORBA v2.2, Section 20.34.4
template <class T>
class  ConstantDef_tie : public ConstantDef
{
public:
  ConstantDef_tie (T &t);
  // the T& ctor
  ConstantDef_tie (T &t, PortableServer::POA_ptr poa);
  // ctor taking a POA
  ConstantDef_tie (T *tp, CORBA::Boolean release=1);
  // ctor taking pointer and an ownership flag
  ConstantDef_tie (T *tp, PortableServer::POA_ptr poa, CORBA::Boolean release=1);
  // ctor with T*, ownership flag and a POA
  ~ConstantDef_tie (void);
  // dtor
  
  // TIE specific functions
  T *_tied_object (void);
  // return the underlying object
  void _tied_object (T &obj);
  // set the underlying object
  void _tied_object (T *obj, CORBA::Boolean release=1);
  // set the underlying object and the ownership flag
  CORBA::Boolean _is_owner (void);
  // do we own it
  void _is_owner (CORBA::Boolean b);
  // set the ownership
  
  // overridden ServantBase operations
  PortableServer::POA_ptr _default_POA (
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    );
  CORBA::TypeCode_ptr type (
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  CORBA::IDLType_ptr type_def (
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  void type_def (
      CORBA::IDLType_ptr type_def,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  CORBA::Any * value (
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  void value (
      const CORBA::Any & value,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  char * id (
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  void id (
      const char * id,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  char * name (
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  void name (
      const char * name,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  char * version (
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  void version (
      const char * version,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  CORBA::Container_ptr defined_in (
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  char * absolute_name (
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  CORBA::Repository_ptr containing_repository (
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  CORBA::Contained::Description * describe (
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  void move (
      CORBA::Container_ptr new_container,
      const char * new_name,
      const char * new_version,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  CORBA::DefinitionKind def_kind (
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  void destroy (
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

private:
  T *ptr_;
  PortableServer::POA_var poa_;
  CORBA::Boolean rel_;
  
  // copy and assignment are not allowed
  ConstantDef_tie (const ConstantDef_tie &);
  void operator= (const ConstantDef_tie &);
};

#endif /* ACE_HAS_USING_KEYWORD */

class StructDef;
typedef StructDef *StructDef_ptr;
// Forward Classes Declaration
class _TAO_StructDef_ThruPOA_Proxy_Impl;
class _TAO_StructDef_Strategized_Proxy_Broker;

class  StructDef : public virtual TypedefDef, public virtual Container
{
protected:
  StructDef (void);

public:
  StructDef (const StructDef& rhs);
  virtual ~StructDef (void);


  virtual CORBA::Boolean _is_a (
      const char* logical_type_id,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    );

  virtual void* _downcast (
      const char* logical_type_id
    );

  static void _is_a_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    );

  static void _non_existent_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    );

  virtual void _dispatch (
      TAO_ServerRequest &_tao_req,
      void *_tao_context,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    );

  ::CORBA::StructDef *_this (
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    );

  virtual const char* _interface_repository_id (void) const;

  virtual CORBA::StructMemberSeq * members (
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    )) = 0;

  static void _get_members_skel (
      TAO_ServerRequest &_tao_req, 
      void *_tao_obj, 
      void *_tao_context, 
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    );

  virtual void members (
      const CORBA::StructMemberSeq & members,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    )) = 0;

  static void _set_members_skel (
      TAO_ServerRequest &_tao_req, 
      void *_tao_obj, 
      void *_tao_context, 
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    );

  static void lookup_skel (
      TAO_ServerRequest &req, 
      void *obj,
      void *context,
      CORBA::Environment &ACE_TRY_ENV =
        TAO_default_environment ()
    );

  static void contents_skel (
      TAO_ServerRequest &req, 
      void *obj,
      void *context,
      CORBA::Environment &ACE_TRY_ENV =
        TAO_default_environment ()
    );

  static void lookup_name_skel (
      TAO_ServerRequest &req, 
      void *obj,
      void *context,
      CORBA::Environment &ACE_TRY_ENV =
        TAO_default_environment ()
    );

  static void describe_contents_skel (
      TAO_ServerRequest &req, 
      void *obj,
      void *context,
      CORBA::Environment &ACE_TRY_ENV =
        TAO_default_environment ()
    );

  static void create_module_skel (
      TAO_ServerRequest &req, 
      void *obj,
      void *context,
      CORBA::Environment &ACE_TRY_ENV =
        TAO_default_environment ()
    );

  static void create_constant_skel (
      TAO_ServerRequest &req, 
      void *obj,
      void *context,
      CORBA::Environment &ACE_TRY_ENV =
        TAO_default_environment ()
    );

  static void create_struct_skel (
      TAO_ServerRequest &req, 
      void *obj,
      void *context,
      CORBA::Environment &ACE_TRY_ENV =
        TAO_default_environment ()
    );

  static void create_union_skel (
      TAO_ServerRequest &req, 
      void *obj,
      void *context,
      CORBA::Environment &ACE_TRY_ENV =
        TAO_default_environment ()
    );

  static void create_enum_skel (
      TAO_ServerRequest &req, 
      void *obj,
      void *context,
      CORBA::Environment &ACE_TRY_ENV =
        TAO_default_environment ()
    );

  static void create_alias_skel (
      TAO_ServerRequest &req, 
      void *obj,
      void *context,
      CORBA::Environment &ACE_TRY_ENV =
        TAO_default_environment ()
    );

  static void create_interface_skel (
      TAO_ServerRequest &req, 
      void *obj,
      void *context,
      CORBA::Environment &ACE_TRY_ENV =
        TAO_default_environment ()
    );

  static void create_value_skel (
      TAO_ServerRequest &req, 
      void *obj,
      void *context,
      CORBA::Environment &ACE_TRY_ENV =
        TAO_default_environment ()
    );

  static void create_value_box_skel (
      TAO_ServerRequest &req, 
      void *obj,
      void *context,
      CORBA::Environment &ACE_TRY_ENV =
        TAO_default_environment ()
    );

  static void create_exception_skel (
      TAO_ServerRequest &req, 
      void *obj,
      void *context,
      CORBA::Environment &ACE_TRY_ENV =
        TAO_default_environment ()
    );

  static void create_native_skel (
      TAO_ServerRequest &req, 
      void *obj,
      void *context,
      CORBA::Environment &ACE_TRY_ENV =
        TAO_default_environment ()
    );

  static void create_abstract_interface_skel (
      TAO_ServerRequest &req, 
      void *obj,
      void *context,
      CORBA::Environment &ACE_TRY_ENV =
        TAO_default_environment ()
    );

  static void create_local_interface_skel (
      TAO_ServerRequest &req, 
      void *obj,
      void *context,
      CORBA::Environment &ACE_TRY_ENV =
        TAO_default_environment ()
    );

  static void _get_id_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context,
      CORBA::Environment &ACE_TRY_ENV =
        TAO_default_environment ()
    );

  static void _set_id_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    );

  static void _get_name_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context,
      CORBA::Environment &ACE_TRY_ENV =
        TAO_default_environment ()
    );

  static void _set_name_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    );

  static void _get_version_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context,
      CORBA::Environment &ACE_TRY_ENV =
        TAO_default_environment ()
    );

  static void _set_version_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    );

  static void _get_defined_in_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context,
      CORBA::Environment &ACE_TRY_ENV =
        TAO_default_environment ()
    );

  static void _get_absolute_name_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context,
      CORBA::Environment &ACE_TRY_ENV =
        TAO_default_environment ()
    );

  static void _get_containing_repository_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context,
      CORBA::Environment &ACE_TRY_ENV =
        TAO_default_environment ()
    );

  static void describe_skel (
      TAO_ServerRequest &req, 
      void *obj,
      void *context,
      CORBA::Environment &ACE_TRY_ENV =
        TAO_default_environment ()
    );

  static void move_skel (
      TAO_ServerRequest &req, 
      void *obj,
      void *context,
      CORBA::Environment &ACE_TRY_ENV =
        TAO_default_environment ()
    );

  static void _get_type_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context,
      CORBA::Environment &ACE_TRY_ENV =
        TAO_default_environment ()
    );

  static void _get_def_kind_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context,
      CORBA::Environment &ACE_TRY_ENV =
        TAO_default_environment ()
    );

  static void destroy_skel (
      TAO_ServerRequest &req, 
      void *obj,
      void *context,
      CORBA::Environment &ACE_TRY_ENV =
        TAO_default_environment ()
    );
};


///////////////////////////////////////////////////////////////////////
//               Strategized Proxy Broker Declaration 
//

class  _TAO_StructDef_Strategized_Proxy_Broker : public virtual ::_TAO_StructDef_Proxy_Broker
{
public: 
  _TAO_StructDef_Strategized_Proxy_Broker (void);
  
  virtual ~_TAO_StructDef_Strategized_Proxy_Broker (void);
  
  virtual ::_TAO_StructDef_Proxy_Impl &select_proxy (
    ::CORBA::StructDef *object,
    CORBA_Environment &ACE_TRY_ENV = TAO_default_environment ()
  );

private:

// Helper methods that takes care to create the proxy
// as soon as their use is necessary.
  void create_proxy (
    int strategy,
    CORBA::Environment &ACE_TRY_ENV
  );

private:
  
  // Caches the proxy implementations. The proxy implementation
  // are totally stateless, and those can be shared by all the
  // instances of a given IDL interface type.
  ::_TAO_StructDef_Proxy_Impl
   *proxy_cache_[TAO_Collocation_Strategies::CS_LAST];
  
  TAO_SYNCH_MUTEX mutex_;
// This funxtion is used to get an handle to the unique instance
// of the Strategized Proxy Broker that is available for a given
// interface.

public:
  static _TAO_StructDef_Strategized_Proxy_Broker *the_TAO_StructDef_Strategized_Proxy_Broker (void);
};


//
//            End Strategized Proxy Broker Declaration 
///////////////////////////////////////////////////////////////////////


///////////////////////////////////////////////////////////////////////
//                    ThruPOA  Impl. Declaration
//

class  _TAO_StructDef_ThruPOA_Proxy_Impl : 
  public virtual ::_TAO_StructDef_Proxy_Impl,
  public virtual TAO_ThruPOA_Object_Proxy_Impl,
  public virtual ::POA_CORBA::_TAO_TypedefDef_ThruPOA_Proxy_Impl, 
  public virtual ::POA_CORBA::_TAO_Container_ThruPOA_Proxy_Impl
  
{
public:
  _TAO_StructDef_ThruPOA_Proxy_Impl (void);
  
  virtual ~_TAO_StructDef_ThruPOA_Proxy_Impl (void) { }
  
    virtual CORBA::StructMemberSeq * members (
      CORBA_Object *_collocated_tao_target_,
      CORBA::Environment &ACE_TRY_ENV
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  virtual void members (
      CORBA_Object *_collocated_tao_target_,
      const CORBA::StructMemberSeq & members,
      CORBA::Environment &ACE_TRY_ENV
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

};


//
//                ThruPOA  Proxy Impl. Declaration
///////////////////////////////////////////////////////////////////////


#if defined (ACE_HAS_USING_KEYWORD)
// TIE class: Refer to CORBA v2.2, Section 20.34.4
template <class T>
class  StructDef_tie : public StructDef
{
public:
  StructDef_tie (T &t);
  // the T& ctor
  StructDef_tie (T &t, PortableServer::POA_ptr poa);
  // ctor taking a POA
  StructDef_tie (T *tp, CORBA::Boolean release=1);
  // ctor taking pointer and an ownership flag
  StructDef_tie (T *tp, PortableServer::POA_ptr poa, CORBA::Boolean release=1);
  // ctor with T*, ownership flag and a POA
  ~StructDef_tie (void);
  // dtor
  
  // TIE specific functions
  T *_tied_object (void);
  // return the underlying object
  void _tied_object (T &obj);
  // set the underlying object
  void _tied_object (T *obj, CORBA::Boolean release=1);
  // set the underlying object and the ownership flag
  CORBA::Boolean _is_owner (void);
  // do we own it
  void _is_owner (CORBA::Boolean b);
  // set the ownership
  
  // overridden ServantBase operations
  PortableServer::POA_ptr _default_POA (
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    );
  CORBA::StructMemberSeq * members (
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  void members (
      const CORBA::StructMemberSeq & members,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  CORBA::Contained_ptr lookup (
      const char * search_name,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  CORBA::ContainedSeq * contents (
      CORBA::DefinitionKind limit_type,
      CORBA::Boolean exclude_inherited,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  CORBA::ContainedSeq * lookup_name (
      const char * search_name,
      CORBA::Long levels_to_search,
      CORBA::DefinitionKind limit_type,
      CORBA::Boolean exclude_inherited,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  CORBA::Container::DescriptionSeq * describe_contents (
      CORBA::DefinitionKind limit_type,
      CORBA::Boolean exclude_inherited,
      CORBA::Long max_returned_objs,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  CORBA::ModuleDef_ptr create_module (
      const char * id,
      const char * name,
      const char * version,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  CORBA::ConstantDef_ptr create_constant (
      const char * id,
      const char * name,
      const char * version,
      CORBA::IDLType_ptr type,
      const CORBA::Any & value,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  CORBA::StructDef_ptr create_struct (
      const char * id,
      const char * name,
      const char * version,
      const CORBA::StructMemberSeq & members,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  CORBA::UnionDef_ptr create_union (
      const char * id,
      const char * name,
      const char * version,
      CORBA::IDLType_ptr discriminator_type,
      const CORBA::UnionMemberSeq & members,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  CORBA::EnumDef_ptr create_enum (
      const char * id,
      const char * name,
      const char * version,
      const CORBA::EnumMemberSeq & members,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  CORBA::AliasDef_ptr create_alias (
      const char * id,
      const char * name,
      const char * version,
      CORBA::IDLType_ptr original_type,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  CORBA::InterfaceDef_ptr create_interface (
      const char * id,
      const char * name,
      const char * version,
      const CORBA::InterfaceDefSeq & base_interfaces,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  CORBA::ValueDef_ptr create_value (
      const char * id,
      const char * name,
      const char * version,
      CORBA::Boolean is_custom,
      CORBA::Boolean is_abstract,
      CORBA::ValueDef_ptr base_value,
      CORBA::Boolean is_truncatable,
      const CORBA::ValueDefSeq & abstract_base_values,
      const CORBA::InterfaceDefSeq & supported_interfaces,
      const CORBA::InitializerSeq & initializers,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  CORBA::ValueBoxDef_ptr create_value_box (
      const char * id,
      const char * name,
      const char * version,
      CORBA::IDLType_ptr original_type_def,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  CORBA::ExceptionDef_ptr create_exception (
      const char * id,
      const char * name,
      const char * version,
      const CORBA::StructMemberSeq & members,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  CORBA::NativeDef_ptr create_native (
      const char * id,
      const char * name,
      const char * version,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  CORBA::AbstractInterfaceDef_ptr create_abstract_interface (
      const char * id,
      const char * name,
      const char * version,
      const CORBA::AbstractInterfaceDefSeq & base_interfaces,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  CORBA::LocalInterfaceDef_ptr create_local_interface (
      const char * id,
      const char * name,
      const char * version,
      const CORBA::InterfaceDefSeq & base_interfaces,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  char * id (
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  void id (
      const char * id,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  char * name (
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  void name (
      const char * name,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  char * version (
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  void version (
      const char * version,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  CORBA::Container_ptr defined_in (
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  char * absolute_name (
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  CORBA::Repository_ptr containing_repository (
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  CORBA::Contained::Description * describe (
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  void move (
      CORBA::Container_ptr new_container,
      const char * new_name,
      const char * new_version,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  CORBA::TypeCode_ptr type (
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  CORBA::DefinitionKind def_kind (
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  void destroy (
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

private:
  T *ptr_;
  PortableServer::POA_var poa_;
  CORBA::Boolean rel_;
  
  // copy and assignment are not allowed
  StructDef_tie (const StructDef_tie &);
  void operator= (const StructDef_tie &);
};

#endif /* ACE_HAS_USING_KEYWORD */

class UnionDef;
typedef UnionDef *UnionDef_ptr;
// Forward Classes Declaration
class _TAO_UnionDef_ThruPOA_Proxy_Impl;
class _TAO_UnionDef_Strategized_Proxy_Broker;

class  UnionDef : public virtual TypedefDef, public virtual Container
{
protected:
  UnionDef (void);

public:
  UnionDef (const UnionDef& rhs);
  virtual ~UnionDef (void);


  virtual CORBA::Boolean _is_a (
      const char* logical_type_id,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    );

  virtual void* _downcast (
      const char* logical_type_id
    );

  static void _is_a_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    );

  static void _non_existent_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    );

  virtual void _dispatch (
      TAO_ServerRequest &_tao_req,
      void *_tao_context,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    );

  ::CORBA::UnionDef *_this (
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    );

  virtual const char* _interface_repository_id (void) const;

  virtual CORBA::TypeCode_ptr discriminator_type (
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    )) = 0;

  static void _get_discriminator_type_skel (
      TAO_ServerRequest &_tao_req, 
      void *_tao_obj, 
      void *_tao_context, 
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    );

  virtual CORBA::IDLType_ptr discriminator_type_def (
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    )) = 0;

  static void _get_discriminator_type_def_skel (
      TAO_ServerRequest &_tao_req, 
      void *_tao_obj, 
      void *_tao_context, 
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    );

  virtual void discriminator_type_def (
      CORBA::IDLType_ptr discriminator_type_def,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    )) = 0;

  static void _set_discriminator_type_def_skel (
      TAO_ServerRequest &_tao_req, 
      void *_tao_obj, 
      void *_tao_context, 
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    );

  virtual CORBA::UnionMemberSeq * members (
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    )) = 0;

  static void _get_members_skel (
      TAO_ServerRequest &_tao_req, 
      void *_tao_obj, 
      void *_tao_context, 
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    );

  virtual void members (
      const CORBA::UnionMemberSeq & members,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    )) = 0;

  static void _set_members_skel (
      TAO_ServerRequest &_tao_req, 
      void *_tao_obj, 
      void *_tao_context, 
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    );

  static void lookup_skel (
      TAO_ServerRequest &req, 
      void *obj,
      void *context,
      CORBA::Environment &ACE_TRY_ENV =
        TAO_default_environment ()
    );

  static void contents_skel (
      TAO_ServerRequest &req, 
      void *obj,
      void *context,
      CORBA::Environment &ACE_TRY_ENV =
        TAO_default_environment ()
    );

  static void lookup_name_skel (
      TAO_ServerRequest &req, 
      void *obj,
      void *context,
      CORBA::Environment &ACE_TRY_ENV =
        TAO_default_environment ()
    );

  static void describe_contents_skel (
      TAO_ServerRequest &req, 
      void *obj,
      void *context,
      CORBA::Environment &ACE_TRY_ENV =
        TAO_default_environment ()
    );

  static void create_module_skel (
      TAO_ServerRequest &req, 
      void *obj,
      void *context,
      CORBA::Environment &ACE_TRY_ENV =
        TAO_default_environment ()
    );

  static void create_constant_skel (
      TAO_ServerRequest &req, 
      void *obj,
      void *context,
      CORBA::Environment &ACE_TRY_ENV =
        TAO_default_environment ()
    );

  static void create_struct_skel (
      TAO_ServerRequest &req, 
      void *obj,
      void *context,
      CORBA::Environment &ACE_TRY_ENV =
        TAO_default_environment ()
    );

  static void create_union_skel (
      TAO_ServerRequest &req, 
      void *obj,
      void *context,
      CORBA::Environment &ACE_TRY_ENV =
        TAO_default_environment ()
    );

  static void create_enum_skel (
      TAO_ServerRequest &req, 
      void *obj,
      void *context,
      CORBA::Environment &ACE_TRY_ENV =
        TAO_default_environment ()
    );

  static void create_alias_skel (
      TAO_ServerRequest &req, 
      void *obj,
      void *context,
      CORBA::Environment &ACE_TRY_ENV =
        TAO_default_environment ()
    );

  static void create_interface_skel (
      TAO_ServerRequest &req, 
      void *obj,
      void *context,
      CORBA::Environment &ACE_TRY_ENV =
        TAO_default_environment ()
    );

  static void create_value_skel (
      TAO_ServerRequest &req, 
      void *obj,
      void *context,
      CORBA::Environment &ACE_TRY_ENV =
        TAO_default_environment ()
    );

  static void create_value_box_skel (
      TAO_ServerRequest &req, 
      void *obj,
      void *context,
      CORBA::Environment &ACE_TRY_ENV =
        TAO_default_environment ()
    );

  static void create_exception_skel (
      TAO_ServerRequest &req, 
      void *obj,
      void *context,
      CORBA::Environment &ACE_TRY_ENV =
        TAO_default_environment ()
    );

  static void create_native_skel (
      TAO_ServerRequest &req, 
      void *obj,
      void *context,
      CORBA::Environment &ACE_TRY_ENV =
        TAO_default_environment ()
    );

  static void create_abstract_interface_skel (
      TAO_ServerRequest &req, 
      void *obj,
      void *context,
      CORBA::Environment &ACE_TRY_ENV =
        TAO_default_environment ()
    );

  static void create_local_interface_skel (
      TAO_ServerRequest &req, 
      void *obj,
      void *context,
      CORBA::Environment &ACE_TRY_ENV =
        TAO_default_environment ()
    );

  static void _get_id_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context,
      CORBA::Environment &ACE_TRY_ENV =
        TAO_default_environment ()
    );

  static void _set_id_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    );

  static void _get_name_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context,
      CORBA::Environment &ACE_TRY_ENV =
        TAO_default_environment ()
    );

  static void _set_name_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    );

  static void _get_version_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context,
      CORBA::Environment &ACE_TRY_ENV =
        TAO_default_environment ()
    );

  static void _set_version_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    );

  static void _get_defined_in_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context,
      CORBA::Environment &ACE_TRY_ENV =
        TAO_default_environment ()
    );

  static void _get_absolute_name_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context,
      CORBA::Environment &ACE_TRY_ENV =
        TAO_default_environment ()
    );

  static void _get_containing_repository_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context,
      CORBA::Environment &ACE_TRY_ENV =
        TAO_default_environment ()
    );

  static void describe_skel (
      TAO_ServerRequest &req, 
      void *obj,
      void *context,
      CORBA::Environment &ACE_TRY_ENV =
        TAO_default_environment ()
    );

  static void move_skel (
      TAO_ServerRequest &req, 
      void *obj,
      void *context,
      CORBA::Environment &ACE_TRY_ENV =
        TAO_default_environment ()
    );

  static void _get_type_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context,
      CORBA::Environment &ACE_TRY_ENV =
        TAO_default_environment ()
    );

  static void _get_def_kind_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context,
      CORBA::Environment &ACE_TRY_ENV =
        TAO_default_environment ()
    );

  static void destroy_skel (
      TAO_ServerRequest &req, 
      void *obj,
      void *context,
      CORBA::Environment &ACE_TRY_ENV =
        TAO_default_environment ()
    );
};


///////////////////////////////////////////////////////////////////////
//               Strategized Proxy Broker Declaration 
//

class  _TAO_UnionDef_Strategized_Proxy_Broker : public virtual ::_TAO_UnionDef_Proxy_Broker
{
public: 
  _TAO_UnionDef_Strategized_Proxy_Broker (void);
  
  virtual ~_TAO_UnionDef_Strategized_Proxy_Broker (void);
  
  virtual ::_TAO_UnionDef_Proxy_Impl &select_proxy (
    ::CORBA::UnionDef *object,
    CORBA_Environment &ACE_TRY_ENV = TAO_default_environment ()
  );

private:

// Helper methods that takes care to create the proxy
// as soon as their use is necessary.
  void create_proxy (
    int strategy,
    CORBA::Environment &ACE_TRY_ENV
  );

private:
  
  // Caches the proxy implementations. The proxy implementation
  // are totally stateless, and those can be shared by all the
  // instances of a given IDL interface type.
  ::_TAO_UnionDef_Proxy_Impl
   *proxy_cache_[TAO_Collocation_Strategies::CS_LAST];
  
  TAO_SYNCH_MUTEX mutex_;
// This funxtion is used to get an handle to the unique instance
// of the Strategized Proxy Broker that is available for a given
// interface.

public:
  static _TAO_UnionDef_Strategized_Proxy_Broker *the_TAO_UnionDef_Strategized_Proxy_Broker (void);
};


//
//            End Strategized Proxy Broker Declaration 
///////////////////////////////////////////////////////////////////////


///////////////////////////////////////////////////////////////////////
//                    ThruPOA  Impl. Declaration
//

class  _TAO_UnionDef_ThruPOA_Proxy_Impl : 
  public virtual ::_TAO_UnionDef_Proxy_Impl,
  public virtual TAO_ThruPOA_Object_Proxy_Impl,
  public virtual ::POA_CORBA::_TAO_TypedefDef_ThruPOA_Proxy_Impl, 
  public virtual ::POA_CORBA::_TAO_Container_ThruPOA_Proxy_Impl
  
{
public:
  _TAO_UnionDef_ThruPOA_Proxy_Impl (void);
  
  virtual ~_TAO_UnionDef_ThruPOA_Proxy_Impl (void) { }
  
    virtual CORBA::TypeCode_ptr discriminator_type (
      CORBA_Object *_collocated_tao_target_,
      CORBA::Environment &ACE_TRY_ENV
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  virtual CORBA::IDLType_ptr discriminator_type_def (
      CORBA_Object *_collocated_tao_target_,
      CORBA::Environment &ACE_TRY_ENV
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  virtual void discriminator_type_def (
      CORBA_Object *_collocated_tao_target_,
      CORBA::IDLType_ptr discriminator_type_def,
      CORBA::Environment &ACE_TRY_ENV
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  virtual CORBA::UnionMemberSeq * members (
      CORBA_Object *_collocated_tao_target_,
      CORBA::Environment &ACE_TRY_ENV
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  virtual void members (
      CORBA_Object *_collocated_tao_target_,
      const CORBA::UnionMemberSeq & members,
      CORBA::Environment &ACE_TRY_ENV
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

};


//
//                ThruPOA  Proxy Impl. Declaration
///////////////////////////////////////////////////////////////////////


#if defined (ACE_HAS_USING_KEYWORD)
// TIE class: Refer to CORBA v2.2, Section 20.34.4
template <class T>
class  UnionDef_tie : public UnionDef
{
public:
  UnionDef_tie (T &t);
  // the T& ctor
  UnionDef_tie (T &t, PortableServer::POA_ptr poa);
  // ctor taking a POA
  UnionDef_tie (T *tp, CORBA::Boolean release=1);
  // ctor taking pointer and an ownership flag
  UnionDef_tie (T *tp, PortableServer::POA_ptr poa, CORBA::Boolean release=1);
  // ctor with T*, ownership flag and a POA
  ~UnionDef_tie (void);
  // dtor
  
  // TIE specific functions
  T *_tied_object (void);
  // return the underlying object
  void _tied_object (T &obj);
  // set the underlying object
  void _tied_object (T *obj, CORBA::Boolean release=1);
  // set the underlying object and the ownership flag
  CORBA::Boolean _is_owner (void);
  // do we own it
  void _is_owner (CORBA::Boolean b);
  // set the ownership
  
  // overridden ServantBase operations
  PortableServer::POA_ptr _default_POA (
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    );
  CORBA::TypeCode_ptr discriminator_type (
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  CORBA::IDLType_ptr discriminator_type_def (
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  void discriminator_type_def (
      CORBA::IDLType_ptr discriminator_type_def,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  CORBA::UnionMemberSeq * members (
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  void members (
      const CORBA::UnionMemberSeq & members,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  CORBA::Contained_ptr lookup (
      const char * search_name,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  CORBA::ContainedSeq * contents (
      CORBA::DefinitionKind limit_type,
      CORBA::Boolean exclude_inherited,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  CORBA::ContainedSeq * lookup_name (
      const char * search_name,
      CORBA::Long levels_to_search,
      CORBA::DefinitionKind limit_type,
      CORBA::Boolean exclude_inherited,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  CORBA::Container::DescriptionSeq * describe_contents (
      CORBA::DefinitionKind limit_type,
      CORBA::Boolean exclude_inherited,
      CORBA::Long max_returned_objs,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  CORBA::ModuleDef_ptr create_module (
      const char * id,
      const char * name,
      const char * version,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  CORBA::ConstantDef_ptr create_constant (
      const char * id,
      const char * name,
      const char * version,
      CORBA::IDLType_ptr type,
      const CORBA::Any & value,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  CORBA::StructDef_ptr create_struct (
      const char * id,
      const char * name,
      const char * version,
      const CORBA::StructMemberSeq & members,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  CORBA::UnionDef_ptr create_union (
      const char * id,
      const char * name,
      const char * version,
      CORBA::IDLType_ptr discriminator_type,
      const CORBA::UnionMemberSeq & members,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  CORBA::EnumDef_ptr create_enum (
      const char * id,
      const char * name,
      const char * version,
      const CORBA::EnumMemberSeq & members,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  CORBA::AliasDef_ptr create_alias (
      const char * id,
      const char * name,
      const char * version,
      CORBA::IDLType_ptr original_type,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  CORBA::InterfaceDef_ptr create_interface (
      const char * id,
      const char * name,
      const char * version,
      const CORBA::InterfaceDefSeq & base_interfaces,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  CORBA::ValueDef_ptr create_value (
      const char * id,
      const char * name,
      const char * version,
      CORBA::Boolean is_custom,
      CORBA::Boolean is_abstract,
      CORBA::ValueDef_ptr base_value,
      CORBA::Boolean is_truncatable,
      const CORBA::ValueDefSeq & abstract_base_values,
      const CORBA::InterfaceDefSeq & supported_interfaces,
      const CORBA::InitializerSeq & initializers,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  CORBA::ValueBoxDef_ptr create_value_box (
      const char * id,
      const char * name,
      const char * version,
      CORBA::IDLType_ptr original_type_def,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  CORBA::ExceptionDef_ptr create_exception (
      const char * id,
      const char * name,
      const char * version,
      const CORBA::StructMemberSeq & members,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  CORBA::NativeDef_ptr create_native (
      const char * id,
      const char * name,
      const char * version,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  CORBA::AbstractInterfaceDef_ptr create_abstract_interface (
      const char * id,
      const char * name,
      const char * version,
      const CORBA::AbstractInterfaceDefSeq & base_interfaces,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  CORBA::LocalInterfaceDef_ptr create_local_interface (
      const char * id,
      const char * name,
      const char * version,
      const CORBA::InterfaceDefSeq & base_interfaces,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  char * id (
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  void id (
      const char * id,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  char * name (
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  void name (
      const char * name,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  char * version (
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  void version (
      const char * version,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  CORBA::Container_ptr defined_in (
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  char * absolute_name (
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  CORBA::Repository_ptr containing_repository (
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  CORBA::Contained::Description * describe (
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  void move (
      CORBA::Container_ptr new_container,
      const char * new_name,
      const char * new_version,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  CORBA::TypeCode_ptr type (
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  CORBA::DefinitionKind def_kind (
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  void destroy (
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

private:
  T *ptr_;
  PortableServer::POA_var poa_;
  CORBA::Boolean rel_;
  
  // copy and assignment are not allowed
  UnionDef_tie (const UnionDef_tie &);
  void operator= (const UnionDef_tie &);
};

#endif /* ACE_HAS_USING_KEYWORD */

class EnumDef;
typedef EnumDef *EnumDef_ptr;
// Forward Classes Declaration
class _TAO_EnumDef_ThruPOA_Proxy_Impl;
class _TAO_EnumDef_Strategized_Proxy_Broker;

class  EnumDef : public virtual TypedefDef
{
protected:
  EnumDef (void);

public:
  EnumDef (const EnumDef& rhs);
  virtual ~EnumDef (void);


  virtual CORBA::Boolean _is_a (
      const char* logical_type_id,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    );

  virtual void* _downcast (
      const char* logical_type_id
    );

  static void _is_a_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    );

  static void _non_existent_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    );

  virtual void _dispatch (
      TAO_ServerRequest &_tao_req,
      void *_tao_context,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    );

  ::CORBA::EnumDef *_this (
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    );

  virtual const char* _interface_repository_id (void) const;

  virtual CORBA::EnumMemberSeq * members (
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    )) = 0;

  static void _get_members_skel (
      TAO_ServerRequest &_tao_req, 
      void *_tao_obj, 
      void *_tao_context, 
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    );

  virtual void members (
      const CORBA::EnumMemberSeq & members,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    )) = 0;

  static void _set_members_skel (
      TAO_ServerRequest &_tao_req, 
      void *_tao_obj, 
      void *_tao_context, 
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    );

  static void _get_id_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context,
      CORBA::Environment &ACE_TRY_ENV =
        TAO_default_environment ()
    );

  static void _set_id_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    );

  static void _get_name_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context,
      CORBA::Environment &ACE_TRY_ENV =
        TAO_default_environment ()
    );

  static void _set_name_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    );

  static void _get_version_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context,
      CORBA::Environment &ACE_TRY_ENV =
        TAO_default_environment ()
    );

  static void _set_version_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    );

  static void _get_defined_in_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context,
      CORBA::Environment &ACE_TRY_ENV =
        TAO_default_environment ()
    );

  static void _get_absolute_name_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context,
      CORBA::Environment &ACE_TRY_ENV =
        TAO_default_environment ()
    );

  static void _get_containing_repository_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context,
      CORBA::Environment &ACE_TRY_ENV =
        TAO_default_environment ()
    );

  static void describe_skel (
      TAO_ServerRequest &req, 
      void *obj,
      void *context,
      CORBA::Environment &ACE_TRY_ENV =
        TAO_default_environment ()
    );

  static void move_skel (
      TAO_ServerRequest &req, 
      void *obj,
      void *context,
      CORBA::Environment &ACE_TRY_ENV =
        TAO_default_environment ()
    );

  static void _get_type_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context,
      CORBA::Environment &ACE_TRY_ENV =
        TAO_default_environment ()
    );

  static void _get_def_kind_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context,
      CORBA::Environment &ACE_TRY_ENV =
        TAO_default_environment ()
    );

  static void destroy_skel (
      TAO_ServerRequest &req, 
      void *obj,
      void *context,
      CORBA::Environment &ACE_TRY_ENV =
        TAO_default_environment ()
    );
};


///////////////////////////////////////////////////////////////////////
//               Strategized Proxy Broker Declaration 
//

class  _TAO_EnumDef_Strategized_Proxy_Broker : public virtual ::_TAO_EnumDef_Proxy_Broker
{
public: 
  _TAO_EnumDef_Strategized_Proxy_Broker (void);
  
  virtual ~_TAO_EnumDef_Strategized_Proxy_Broker (void);
  
  virtual ::_TAO_EnumDef_Proxy_Impl &select_proxy (
    ::CORBA::EnumDef *object,
    CORBA_Environment &ACE_TRY_ENV = TAO_default_environment ()
  );

private:

// Helper methods that takes care to create the proxy
// as soon as their use is necessary.
  void create_proxy (
    int strategy,
    CORBA::Environment &ACE_TRY_ENV
  );

private:
  
  // Caches the proxy implementations. The proxy implementation
  // are totally stateless, and those can be shared by all the
  // instances of a given IDL interface type.
  ::_TAO_EnumDef_Proxy_Impl
   *proxy_cache_[TAO_Collocation_Strategies::CS_LAST];
  
  TAO_SYNCH_MUTEX mutex_;
// This funxtion is used to get an handle to the unique instance
// of the Strategized Proxy Broker that is available for a given
// interface.

public:
  static _TAO_EnumDef_Strategized_Proxy_Broker *the_TAO_EnumDef_Strategized_Proxy_Broker (void);
};


//
//            End Strategized Proxy Broker Declaration 
///////////////////////////////////////////////////////////////////////


///////////////////////////////////////////////////////////////////////
//                    ThruPOA  Impl. Declaration
//

class  _TAO_EnumDef_ThruPOA_Proxy_Impl : 
  public virtual ::_TAO_EnumDef_Proxy_Impl,
  public virtual TAO_ThruPOA_Object_Proxy_Impl,
  public virtual ::POA_CORBA::_TAO_TypedefDef_ThruPOA_Proxy_Impl
  
{
public:
  _TAO_EnumDef_ThruPOA_Proxy_Impl (void);
  
  virtual ~_TAO_EnumDef_ThruPOA_Proxy_Impl (void) { }
  
    virtual CORBA::EnumMemberSeq * members (
      CORBA_Object *_collocated_tao_target_,
      CORBA::Environment &ACE_TRY_ENV
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  virtual void members (
      CORBA_Object *_collocated_tao_target_,
      const CORBA::EnumMemberSeq & members,
      CORBA::Environment &ACE_TRY_ENV
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

};


//
//                ThruPOA  Proxy Impl. Declaration
///////////////////////////////////////////////////////////////////////


#if defined (ACE_HAS_USING_KEYWORD)
// TIE class: Refer to CORBA v2.2, Section 20.34.4
template <class T>
class  EnumDef_tie : public EnumDef
{
public:
  EnumDef_tie (T &t);
  // the T& ctor
  EnumDef_tie (T &t, PortableServer::POA_ptr poa);
  // ctor taking a POA
  EnumDef_tie (T *tp, CORBA::Boolean release=1);
  // ctor taking pointer and an ownership flag
  EnumDef_tie (T *tp, PortableServer::POA_ptr poa, CORBA::Boolean release=1);
  // ctor with T*, ownership flag and a POA
  ~EnumDef_tie (void);
  // dtor
  
  // TIE specific functions
  T *_tied_object (void);
  // return the underlying object
  void _tied_object (T &obj);
  // set the underlying object
  void _tied_object (T *obj, CORBA::Boolean release=1);
  // set the underlying object and the ownership flag
  CORBA::Boolean _is_owner (void);
  // do we own it
  void _is_owner (CORBA::Boolean b);
  // set the ownership
  
  // overridden ServantBase operations
  PortableServer::POA_ptr _default_POA (
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    );
  CORBA::EnumMemberSeq * members (
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  void members (
      const CORBA::EnumMemberSeq & members,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  char * id (
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  void id (
      const char * id,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  char * name (
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  void name (
      const char * name,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  char * version (
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  void version (
      const char * version,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  CORBA::Container_ptr defined_in (
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  char * absolute_name (
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  CORBA::Repository_ptr containing_repository (
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  CORBA::Contained::Description * describe (
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  void move (
      CORBA::Container_ptr new_container,
      const char * new_name,
      const char * new_version,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  CORBA::TypeCode_ptr type (
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  CORBA::DefinitionKind def_kind (
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  void destroy (
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

private:
  T *ptr_;
  PortableServer::POA_var poa_;
  CORBA::Boolean rel_;
  
  // copy and assignment are not allowed
  EnumDef_tie (const EnumDef_tie &);
  void operator= (const EnumDef_tie &);
};

#endif /* ACE_HAS_USING_KEYWORD */

class AliasDef;
typedef AliasDef *AliasDef_ptr;
// Forward Classes Declaration
class _TAO_AliasDef_ThruPOA_Proxy_Impl;
class _TAO_AliasDef_Strategized_Proxy_Broker;

class  AliasDef : public virtual TypedefDef
{
protected:
  AliasDef (void);

public:
  AliasDef (const AliasDef& rhs);
  virtual ~AliasDef (void);


  virtual CORBA::Boolean _is_a (
      const char* logical_type_id,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    );

  virtual void* _downcast (
      const char* logical_type_id
    );

  static void _is_a_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    );

  static void _non_existent_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    );

  virtual void _dispatch (
      TAO_ServerRequest &_tao_req,
      void *_tao_context,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    );

  ::CORBA::AliasDef *_this (
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    );

  virtual const char* _interface_repository_id (void) const;

  virtual CORBA::IDLType_ptr original_type_def (
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    )) = 0;

  static void _get_original_type_def_skel (
      TAO_ServerRequest &_tao_req, 
      void *_tao_obj, 
      void *_tao_context, 
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    );

  virtual void original_type_def (
      CORBA::IDLType_ptr original_type_def,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    )) = 0;

  static void _set_original_type_def_skel (
      TAO_ServerRequest &_tao_req, 
      void *_tao_obj, 
      void *_tao_context, 
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    );

  static void _get_id_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context,
      CORBA::Environment &ACE_TRY_ENV =
        TAO_default_environment ()
    );

  static void _set_id_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    );

  static void _get_name_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context,
      CORBA::Environment &ACE_TRY_ENV =
        TAO_default_environment ()
    );

  static void _set_name_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    );

  static void _get_version_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context,
      CORBA::Environment &ACE_TRY_ENV =
        TAO_default_environment ()
    );

  static void _set_version_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    );

  static void _get_defined_in_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context,
      CORBA::Environment &ACE_TRY_ENV =
        TAO_default_environment ()
    );

  static void _get_absolute_name_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context,
      CORBA::Environment &ACE_TRY_ENV =
        TAO_default_environment ()
    );

  static void _get_containing_repository_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context,
      CORBA::Environment &ACE_TRY_ENV =
        TAO_default_environment ()
    );

  static void describe_skel (
      TAO_ServerRequest &req, 
      void *obj,
      void *context,
      CORBA::Environment &ACE_TRY_ENV =
        TAO_default_environment ()
    );

  static void move_skel (
      TAO_ServerRequest &req, 
      void *obj,
      void *context,
      CORBA::Environment &ACE_TRY_ENV =
        TAO_default_environment ()
    );

  static void _get_type_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context,
      CORBA::Environment &ACE_TRY_ENV =
        TAO_default_environment ()
    );

  static void _get_def_kind_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context,
      CORBA::Environment &ACE_TRY_ENV =
        TAO_default_environment ()
    );

  static void destroy_skel (
      TAO_ServerRequest &req, 
      void *obj,
      void *context,
      CORBA::Environment &ACE_TRY_ENV =
        TAO_default_environment ()
    );
};


///////////////////////////////////////////////////////////////////////
//               Strategized Proxy Broker Declaration 
//

class  _TAO_AliasDef_Strategized_Proxy_Broker : public virtual ::_TAO_AliasDef_Proxy_Broker
{
public: 
  _TAO_AliasDef_Strategized_Proxy_Broker (void);
  
  virtual ~_TAO_AliasDef_Strategized_Proxy_Broker (void);
  
  virtual ::_TAO_AliasDef_Proxy_Impl &select_proxy (
    ::CORBA::AliasDef *object,
    CORBA_Environment &ACE_TRY_ENV = TAO_default_environment ()
  );

private:

// Helper methods that takes care to create the proxy
// as soon as their use is necessary.
  void create_proxy (
    int strategy,
    CORBA::Environment &ACE_TRY_ENV
  );

private:
  
  // Caches the proxy implementations. The proxy implementation
  // are totally stateless, and those can be shared by all the
  // instances of a given IDL interface type.
  ::_TAO_AliasDef_Proxy_Impl
   *proxy_cache_[TAO_Collocation_Strategies::CS_LAST];
  
  TAO_SYNCH_MUTEX mutex_;
// This funxtion is used to get an handle to the unique instance
// of the Strategized Proxy Broker that is available for a given
// interface.

public:
  static _TAO_AliasDef_Strategized_Proxy_Broker *the_TAO_AliasDef_Strategized_Proxy_Broker (void);
};


//
//            End Strategized Proxy Broker Declaration 
///////////////////////////////////////////////////////////////////////


///////////////////////////////////////////////////////////////////////
//                    ThruPOA  Impl. Declaration
//

class  _TAO_AliasDef_ThruPOA_Proxy_Impl : 
  public virtual ::_TAO_AliasDef_Proxy_Impl,
  public virtual TAO_ThruPOA_Object_Proxy_Impl,
  public virtual ::POA_CORBA::_TAO_TypedefDef_ThruPOA_Proxy_Impl
  
{
public:
  _TAO_AliasDef_ThruPOA_Proxy_Impl (void);
  
  virtual ~_TAO_AliasDef_ThruPOA_Proxy_Impl (void) { }
  
    virtual CORBA::IDLType_ptr original_type_def (
      CORBA_Object *_collocated_tao_target_,
      CORBA::Environment &ACE_TRY_ENV
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  virtual void original_type_def (
      CORBA_Object *_collocated_tao_target_,
      CORBA::IDLType_ptr original_type_def,
      CORBA::Environment &ACE_TRY_ENV
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

};


//
//                ThruPOA  Proxy Impl. Declaration
///////////////////////////////////////////////////////////////////////


#if defined (ACE_HAS_USING_KEYWORD)
// TIE class: Refer to CORBA v2.2, Section 20.34.4
template <class T>
class  AliasDef_tie : public AliasDef
{
public:
  AliasDef_tie (T &t);
  // the T& ctor
  AliasDef_tie (T &t, PortableServer::POA_ptr poa);
  // ctor taking a POA
  AliasDef_tie (T *tp, CORBA::Boolean release=1);
  // ctor taking pointer and an ownership flag
  AliasDef_tie (T *tp, PortableServer::POA_ptr poa, CORBA::Boolean release=1);
  // ctor with T*, ownership flag and a POA
  ~AliasDef_tie (void);
  // dtor
  
  // TIE specific functions
  T *_tied_object (void);
  // return the underlying object
  void _tied_object (T &obj);
  // set the underlying object
  void _tied_object (T *obj, CORBA::Boolean release=1);
  // set the underlying object and the ownership flag
  CORBA::Boolean _is_owner (void);
  // do we own it
  void _is_owner (CORBA::Boolean b);
  // set the ownership
  
  // overridden ServantBase operations
  PortableServer::POA_ptr _default_POA (
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    );
  CORBA::IDLType_ptr original_type_def (
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  void original_type_def (
      CORBA::IDLType_ptr original_type_def,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  char * id (
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  void id (
      const char * id,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  char * name (
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  void name (
      const char * name,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  char * version (
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  void version (
      const char * version,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  CORBA::Container_ptr defined_in (
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  char * absolute_name (
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  CORBA::Repository_ptr containing_repository (
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  CORBA::Contained::Description * describe (
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  void move (
      CORBA::Container_ptr new_container,
      const char * new_name,
      const char * new_version,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  CORBA::TypeCode_ptr type (
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  CORBA::DefinitionKind def_kind (
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  void destroy (
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

private:
  T *ptr_;
  PortableServer::POA_var poa_;
  CORBA::Boolean rel_;
  
  // copy and assignment are not allowed
  AliasDef_tie (const AliasDef_tie &);
  void operator= (const AliasDef_tie &);
};

#endif /* ACE_HAS_USING_KEYWORD */

class NativeDef;
typedef NativeDef *NativeDef_ptr;
// Forward Classes Declaration
class _TAO_NativeDef_ThruPOA_Proxy_Impl;
class _TAO_NativeDef_Strategized_Proxy_Broker;

class  NativeDef : public virtual TypedefDef
{
protected:
  NativeDef (void);

public:
  NativeDef (const NativeDef& rhs);
  virtual ~NativeDef (void);


  virtual CORBA::Boolean _is_a (
      const char* logical_type_id,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    );

  virtual void* _downcast (
      const char* logical_type_id
    );

  static void _is_a_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    );

  static void _non_existent_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    );

  virtual void _dispatch (
      TAO_ServerRequest &_tao_req,
      void *_tao_context,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    );

  ::CORBA::NativeDef *_this (
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    );

  virtual const char* _interface_repository_id (void) const;

  static void _get_id_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context,
      CORBA::Environment &ACE_TRY_ENV =
        TAO_default_environment ()
    );

  static void _set_id_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    );

  static void _get_name_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context,
      CORBA::Environment &ACE_TRY_ENV =
        TAO_default_environment ()
    );

  static void _set_name_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    );

  static void _get_version_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context,
      CORBA::Environment &ACE_TRY_ENV =
        TAO_default_environment ()
    );

  static void _set_version_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    );

  static void _get_defined_in_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context,
      CORBA::Environment &ACE_TRY_ENV =
        TAO_default_environment ()
    );

  static void _get_absolute_name_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context,
      CORBA::Environment &ACE_TRY_ENV =
        TAO_default_environment ()
    );

  static void _get_containing_repository_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context,
      CORBA::Environment &ACE_TRY_ENV =
        TAO_default_environment ()
    );

  static void describe_skel (
      TAO_ServerRequest &req, 
      void *obj,
      void *context,
      CORBA::Environment &ACE_TRY_ENV =
        TAO_default_environment ()
    );

  static void move_skel (
      TAO_ServerRequest &req, 
      void *obj,
      void *context,
      CORBA::Environment &ACE_TRY_ENV =
        TAO_default_environment ()
    );

  static void _get_type_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context,
      CORBA::Environment &ACE_TRY_ENV =
        TAO_default_environment ()
    );

  static void _get_def_kind_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context,
      CORBA::Environment &ACE_TRY_ENV =
        TAO_default_environment ()
    );

  static void destroy_skel (
      TAO_ServerRequest &req, 
      void *obj,
      void *context,
      CORBA::Environment &ACE_TRY_ENV =
        TAO_default_environment ()
    );
};


///////////////////////////////////////////////////////////////////////
//               Strategized Proxy Broker Declaration 
//

class  _TAO_NativeDef_Strategized_Proxy_Broker : public virtual ::_TAO_NativeDef_Proxy_Broker
{
public: 
  _TAO_NativeDef_Strategized_Proxy_Broker (void);
  
  virtual ~_TAO_NativeDef_Strategized_Proxy_Broker (void);
  
  virtual ::_TAO_NativeDef_Proxy_Impl &select_proxy (
    ::CORBA::NativeDef *object,
    CORBA_Environment &ACE_TRY_ENV = TAO_default_environment ()
  );

private:

// Helper methods that takes care to create the proxy
// as soon as their use is necessary.
  void create_proxy (
    int strategy,
    CORBA::Environment &ACE_TRY_ENV
  );

private:
  
  // Caches the proxy implementations. The proxy implementation
  // are totally stateless, and those can be shared by all the
  // instances of a given IDL interface type.
  ::_TAO_NativeDef_Proxy_Impl
   *proxy_cache_[TAO_Collocation_Strategies::CS_LAST];
  
  TAO_SYNCH_MUTEX mutex_;
// This funxtion is used to get an handle to the unique instance
// of the Strategized Proxy Broker that is available for a given
// interface.

public:
  static _TAO_NativeDef_Strategized_Proxy_Broker *the_TAO_NativeDef_Strategized_Proxy_Broker (void);
};


//
//            End Strategized Proxy Broker Declaration 
///////////////////////////////////////////////////////////////////////


///////////////////////////////////////////////////////////////////////
//                    ThruPOA  Impl. Declaration
//

class  _TAO_NativeDef_ThruPOA_Proxy_Impl : 
  public virtual ::_TAO_NativeDef_Proxy_Impl,
  public virtual TAO_ThruPOA_Object_Proxy_Impl,
  public virtual ::POA_CORBA::_TAO_TypedefDef_ThruPOA_Proxy_Impl
  
{
public:
  _TAO_NativeDef_ThruPOA_Proxy_Impl (void);
  
  virtual ~_TAO_NativeDef_ThruPOA_Proxy_Impl (void) { }
  
  };


//
//                ThruPOA  Proxy Impl. Declaration
///////////////////////////////////////////////////////////////////////


#if defined (ACE_HAS_USING_KEYWORD)
// TIE class: Refer to CORBA v2.2, Section 20.34.4
template <class T>
class  NativeDef_tie : public NativeDef
{
public:
  NativeDef_tie (T &t);
  // the T& ctor
  NativeDef_tie (T &t, PortableServer::POA_ptr poa);
  // ctor taking a POA
  NativeDef_tie (T *tp, CORBA::Boolean release=1);
  // ctor taking pointer and an ownership flag
  NativeDef_tie (T *tp, PortableServer::POA_ptr poa, CORBA::Boolean release=1);
  // ctor with T*, ownership flag and a POA
  ~NativeDef_tie (void);
  // dtor
  
  // TIE specific functions
  T *_tied_object (void);
  // return the underlying object
  void _tied_object (T &obj);
  // set the underlying object
  void _tied_object (T *obj, CORBA::Boolean release=1);
  // set the underlying object and the ownership flag
  CORBA::Boolean _is_owner (void);
  // do we own it
  void _is_owner (CORBA::Boolean b);
  // set the ownership
  
  // overridden ServantBase operations
  PortableServer::POA_ptr _default_POA (
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    );
  char * id (
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  void id (
      const char * id,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  char * name (
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  void name (
      const char * name,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  char * version (
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  void version (
      const char * version,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  CORBA::Container_ptr defined_in (
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  char * absolute_name (
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  CORBA::Repository_ptr containing_repository (
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  CORBA::Contained::Description * describe (
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  void move (
      CORBA::Container_ptr new_container,
      const char * new_name,
      const char * new_version,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  CORBA::TypeCode_ptr type (
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  CORBA::DefinitionKind def_kind (
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  void destroy (
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

private:
  T *ptr_;
  PortableServer::POA_var poa_;
  CORBA::Boolean rel_;
  
  // copy and assignment are not allowed
  NativeDef_tie (const NativeDef_tie &);
  void operator= (const NativeDef_tie &);
};

#endif /* ACE_HAS_USING_KEYWORD */

class PrimitiveDef;
typedef PrimitiveDef *PrimitiveDef_ptr;
// Forward Classes Declaration
class _TAO_PrimitiveDef_ThruPOA_Proxy_Impl;
class _TAO_PrimitiveDef_Strategized_Proxy_Broker;

class  PrimitiveDef : public virtual IDLType
{
protected:
  PrimitiveDef (void);

public:
  PrimitiveDef (const PrimitiveDef& rhs);
  virtual ~PrimitiveDef (void);


  virtual CORBA::Boolean _is_a (
      const char* logical_type_id,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    );

  virtual void* _downcast (
      const char* logical_type_id
    );

  static void _is_a_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    );

  static void _non_existent_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    );

  virtual void _dispatch (
      TAO_ServerRequest &_tao_req,
      void *_tao_context,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    );

  ::CORBA::PrimitiveDef *_this (
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    );

  virtual const char* _interface_repository_id (void) const;

  virtual CORBA::PrimitiveKind kind (
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    )) = 0;

  static void _get_kind_skel (
      TAO_ServerRequest &_tao_req, 
      void *_tao_obj, 
      void *_tao_context, 
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    );

  static void _get_type_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context,
      CORBA::Environment &ACE_TRY_ENV =
        TAO_default_environment ()
    );

  static void _get_def_kind_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context,
      CORBA::Environment &ACE_TRY_ENV =
        TAO_default_environment ()
    );

  static void destroy_skel (
      TAO_ServerRequest &req, 
      void *obj,
      void *context,
      CORBA::Environment &ACE_TRY_ENV =
        TAO_default_environment ()
    );
};


///////////////////////////////////////////////////////////////////////
//               Strategized Proxy Broker Declaration 
//

class  _TAO_PrimitiveDef_Strategized_Proxy_Broker : public virtual ::_TAO_PrimitiveDef_Proxy_Broker
{
public: 
  _TAO_PrimitiveDef_Strategized_Proxy_Broker (void);
  
  virtual ~_TAO_PrimitiveDef_Strategized_Proxy_Broker (void);
  
  virtual ::_TAO_PrimitiveDef_Proxy_Impl &select_proxy (
    ::CORBA::PrimitiveDef *object,
    CORBA_Environment &ACE_TRY_ENV = TAO_default_environment ()
  );

private:

// Helper methods that takes care to create the proxy
// as soon as their use is necessary.
  void create_proxy (
    int strategy,
    CORBA::Environment &ACE_TRY_ENV
  );

private:
  
  // Caches the proxy implementations. The proxy implementation
  // are totally stateless, and those can be shared by all the
  // instances of a given IDL interface type.
  ::_TAO_PrimitiveDef_Proxy_Impl
   *proxy_cache_[TAO_Collocation_Strategies::CS_LAST];
  
  TAO_SYNCH_MUTEX mutex_;
// This funxtion is used to get an handle to the unique instance
// of the Strategized Proxy Broker that is available for a given
// interface.

public:
  static _TAO_PrimitiveDef_Strategized_Proxy_Broker *the_TAO_PrimitiveDef_Strategized_Proxy_Broker (void);
};


//
//            End Strategized Proxy Broker Declaration 
///////////////////////////////////////////////////////////////////////


///////////////////////////////////////////////////////////////////////
//                    ThruPOA  Impl. Declaration
//

class  _TAO_PrimitiveDef_ThruPOA_Proxy_Impl : 
  public virtual ::_TAO_PrimitiveDef_Proxy_Impl,
  public virtual TAO_ThruPOA_Object_Proxy_Impl,
  public virtual ::POA_CORBA::_TAO_IDLType_ThruPOA_Proxy_Impl
  
{
public:
  _TAO_PrimitiveDef_ThruPOA_Proxy_Impl (void);
  
  virtual ~_TAO_PrimitiveDef_ThruPOA_Proxy_Impl (void) { }
  
    virtual CORBA::PrimitiveKind kind (
      CORBA_Object *_collocated_tao_target_,
      CORBA::Environment &ACE_TRY_ENV
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

};


//
//                ThruPOA  Proxy Impl. Declaration
///////////////////////////////////////////////////////////////////////


#if defined (ACE_HAS_USING_KEYWORD)
// TIE class: Refer to CORBA v2.2, Section 20.34.4
template <class T>
class  PrimitiveDef_tie : public PrimitiveDef
{
public:
  PrimitiveDef_tie (T &t);
  // the T& ctor
  PrimitiveDef_tie (T &t, PortableServer::POA_ptr poa);
  // ctor taking a POA
  PrimitiveDef_tie (T *tp, CORBA::Boolean release=1);
  // ctor taking pointer and an ownership flag
  PrimitiveDef_tie (T *tp, PortableServer::POA_ptr poa, CORBA::Boolean release=1);
  // ctor with T*, ownership flag and a POA
  ~PrimitiveDef_tie (void);
  // dtor
  
  // TIE specific functions
  T *_tied_object (void);
  // return the underlying object
  void _tied_object (T &obj);
  // set the underlying object
  void _tied_object (T *obj, CORBA::Boolean release=1);
  // set the underlying object and the ownership flag
  CORBA::Boolean _is_owner (void);
  // do we own it
  void _is_owner (CORBA::Boolean b);
  // set the ownership
  
  // overridden ServantBase operations
  PortableServer::POA_ptr _default_POA (
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    );
  CORBA::PrimitiveKind kind (
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  CORBA::TypeCode_ptr type (
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  CORBA::DefinitionKind def_kind (
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  void destroy (
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

private:
  T *ptr_;
  PortableServer::POA_var poa_;
  CORBA::Boolean rel_;
  
  // copy and assignment are not allowed
  PrimitiveDef_tie (const PrimitiveDef_tie &);
  void operator= (const PrimitiveDef_tie &);
};

#endif /* ACE_HAS_USING_KEYWORD */

class StringDef;
typedef StringDef *StringDef_ptr;
// Forward Classes Declaration
class _TAO_StringDef_ThruPOA_Proxy_Impl;
class _TAO_StringDef_Strategized_Proxy_Broker;

class  StringDef : public virtual IDLType
{
protected:
  StringDef (void);

public:
  StringDef (const StringDef& rhs);
  virtual ~StringDef (void);


  virtual CORBA::Boolean _is_a (
      const char* logical_type_id,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    );

  virtual void* _downcast (
      const char* logical_type_id
    );

  static void _is_a_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    );

  static void _non_existent_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    );

  virtual void _dispatch (
      TAO_ServerRequest &_tao_req,
      void *_tao_context,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    );

  ::CORBA::StringDef *_this (
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    );

  virtual const char* _interface_repository_id (void) const;

  virtual CORBA::ULong bound (
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    )) = 0;

  static void _get_bound_skel (
      TAO_ServerRequest &_tao_req, 
      void *_tao_obj, 
      void *_tao_context, 
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    );

  virtual void bound (
      CORBA::ULong bound,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    )) = 0;

  static void _set_bound_skel (
      TAO_ServerRequest &_tao_req, 
      void *_tao_obj, 
      void *_tao_context, 
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    );

  static void _get_type_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context,
      CORBA::Environment &ACE_TRY_ENV =
        TAO_default_environment ()
    );

  static void _get_def_kind_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context,
      CORBA::Environment &ACE_TRY_ENV =
        TAO_default_environment ()
    );

  static void destroy_skel (
      TAO_ServerRequest &req, 
      void *obj,
      void *context,
      CORBA::Environment &ACE_TRY_ENV =
        TAO_default_environment ()
    );
};


///////////////////////////////////////////////////////////////////////
//               Strategized Proxy Broker Declaration 
//

class  _TAO_StringDef_Strategized_Proxy_Broker : public virtual ::_TAO_StringDef_Proxy_Broker
{
public: 
  _TAO_StringDef_Strategized_Proxy_Broker (void);
  
  virtual ~_TAO_StringDef_Strategized_Proxy_Broker (void);
  
  virtual ::_TAO_StringDef_Proxy_Impl &select_proxy (
    ::CORBA::StringDef *object,
    CORBA_Environment &ACE_TRY_ENV = TAO_default_environment ()
  );

private:

// Helper methods that takes care to create the proxy
// as soon as their use is necessary.
  void create_proxy (
    int strategy,
    CORBA::Environment &ACE_TRY_ENV
  );

private:
  
  // Caches the proxy implementations. The proxy implementation
  // are totally stateless, and those can be shared by all the
  // instances of a given IDL interface type.
  ::_TAO_StringDef_Proxy_Impl
   *proxy_cache_[TAO_Collocation_Strategies::CS_LAST];
  
  TAO_SYNCH_MUTEX mutex_;
// This funxtion is used to get an handle to the unique instance
// of the Strategized Proxy Broker that is available for a given
// interface.

public:
  static _TAO_StringDef_Strategized_Proxy_Broker *the_TAO_StringDef_Strategized_Proxy_Broker (void);
};


//
//            End Strategized Proxy Broker Declaration 
///////////////////////////////////////////////////////////////////////


///////////////////////////////////////////////////////////////////////
//                    ThruPOA  Impl. Declaration
//

class  _TAO_StringDef_ThruPOA_Proxy_Impl : 
  public virtual ::_TAO_StringDef_Proxy_Impl,
  public virtual TAO_ThruPOA_Object_Proxy_Impl,
  public virtual ::POA_CORBA::_TAO_IDLType_ThruPOA_Proxy_Impl
  
{
public:
  _TAO_StringDef_ThruPOA_Proxy_Impl (void);
  
  virtual ~_TAO_StringDef_ThruPOA_Proxy_Impl (void) { }
  
    virtual CORBA::ULong bound (
      CORBA_Object *_collocated_tao_target_,
      CORBA::Environment &ACE_TRY_ENV
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  virtual void bound (
      CORBA_Object *_collocated_tao_target_,
      CORBA::ULong bound,
      CORBA::Environment &ACE_TRY_ENV
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

};


//
//                ThruPOA  Proxy Impl. Declaration
///////////////////////////////////////////////////////////////////////


#if defined (ACE_HAS_USING_KEYWORD)
// TIE class: Refer to CORBA v2.2, Section 20.34.4
template <class T>
class  StringDef_tie : public StringDef
{
public:
  StringDef_tie (T &t);
  // the T& ctor
  StringDef_tie (T &t, PortableServer::POA_ptr poa);
  // ctor taking a POA
  StringDef_tie (T *tp, CORBA::Boolean release=1);
  // ctor taking pointer and an ownership flag
  StringDef_tie (T *tp, PortableServer::POA_ptr poa, CORBA::Boolean release=1);
  // ctor with T*, ownership flag and a POA
  ~StringDef_tie (void);
  // dtor
  
  // TIE specific functions
  T *_tied_object (void);
  // return the underlying object
  void _tied_object (T &obj);
  // set the underlying object
  void _tied_object (T *obj, CORBA::Boolean release=1);
  // set the underlying object and the ownership flag
  CORBA::Boolean _is_owner (void);
  // do we own it
  void _is_owner (CORBA::Boolean b);
  // set the ownership
  
  // overridden ServantBase operations
  PortableServer::POA_ptr _default_POA (
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    );
  CORBA::ULong bound (
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  void bound (
      CORBA::ULong bound,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  CORBA::TypeCode_ptr type (
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  CORBA::DefinitionKind def_kind (
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  void destroy (
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

private:
  T *ptr_;
  PortableServer::POA_var poa_;
  CORBA::Boolean rel_;
  
  // copy and assignment are not allowed
  StringDef_tie (const StringDef_tie &);
  void operator= (const StringDef_tie &);
};

#endif /* ACE_HAS_USING_KEYWORD */

class WstringDef;
typedef WstringDef *WstringDef_ptr;
// Forward Classes Declaration
class _TAO_WstringDef_ThruPOA_Proxy_Impl;
class _TAO_WstringDef_Strategized_Proxy_Broker;

class  WstringDef : public virtual IDLType
{
protected:
  WstringDef (void);

public:
  WstringDef (const WstringDef& rhs);
  virtual ~WstringDef (void);


  virtual CORBA::Boolean _is_a (
      const char* logical_type_id,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    );

  virtual void* _downcast (
      const char* logical_type_id
    );

  static void _is_a_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    );

  static void _non_existent_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    );

  virtual void _dispatch (
      TAO_ServerRequest &_tao_req,
      void *_tao_context,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    );

  ::CORBA::WstringDef *_this (
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    );

  virtual const char* _interface_repository_id (void) const;

  virtual CORBA::ULong bound (
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    )) = 0;

  static void _get_bound_skel (
      TAO_ServerRequest &_tao_req, 
      void *_tao_obj, 
      void *_tao_context, 
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    );

  virtual void bound (
      CORBA::ULong bound,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    )) = 0;

  static void _set_bound_skel (
      TAO_ServerRequest &_tao_req, 
      void *_tao_obj, 
      void *_tao_context, 
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    );

  static void _get_type_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context,
      CORBA::Environment &ACE_TRY_ENV =
        TAO_default_environment ()
    );

  static void _get_def_kind_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context,
      CORBA::Environment &ACE_TRY_ENV =
        TAO_default_environment ()
    );

  static void destroy_skel (
      TAO_ServerRequest &req, 
      void *obj,
      void *context,
      CORBA::Environment &ACE_TRY_ENV =
        TAO_default_environment ()
    );
};


///////////////////////////////////////////////////////////////////////
//               Strategized Proxy Broker Declaration 
//

class  _TAO_WstringDef_Strategized_Proxy_Broker : public virtual ::_TAO_WstringDef_Proxy_Broker
{
public: 
  _TAO_WstringDef_Strategized_Proxy_Broker (void);
  
  virtual ~_TAO_WstringDef_Strategized_Proxy_Broker (void);
  
  virtual ::_TAO_WstringDef_Proxy_Impl &select_proxy (
    ::CORBA::WstringDef *object,
    CORBA_Environment &ACE_TRY_ENV = TAO_default_environment ()
  );

private:

// Helper methods that takes care to create the proxy
// as soon as their use is necessary.
  void create_proxy (
    int strategy,
    CORBA::Environment &ACE_TRY_ENV
  );

private:
  
  // Caches the proxy implementations. The proxy implementation
  // are totally stateless, and those can be shared by all the
  // instances of a given IDL interface type.
  ::_TAO_WstringDef_Proxy_Impl
   *proxy_cache_[TAO_Collocation_Strategies::CS_LAST];
  
  TAO_SYNCH_MUTEX mutex_;
// This funxtion is used to get an handle to the unique instance
// of the Strategized Proxy Broker that is available for a given
// interface.

public:
  static _TAO_WstringDef_Strategized_Proxy_Broker *the_TAO_WstringDef_Strategized_Proxy_Broker (void);
};


//
//            End Strategized Proxy Broker Declaration 
///////////////////////////////////////////////////////////////////////


///////////////////////////////////////////////////////////////////////
//                    ThruPOA  Impl. Declaration
//

class  _TAO_WstringDef_ThruPOA_Proxy_Impl : 
  public virtual ::_TAO_WstringDef_Proxy_Impl,
  public virtual TAO_ThruPOA_Object_Proxy_Impl,
  public virtual ::POA_CORBA::_TAO_IDLType_ThruPOA_Proxy_Impl
  
{
public:
  _TAO_WstringDef_ThruPOA_Proxy_Impl (void);
  
  virtual ~_TAO_WstringDef_ThruPOA_Proxy_Impl (void) { }
  
    virtual CORBA::ULong bound (
      CORBA_Object *_collocated_tao_target_,
      CORBA::Environment &ACE_TRY_ENV
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  virtual void bound (
      CORBA_Object *_collocated_tao_target_,
      CORBA::ULong bound,
      CORBA::Environment &ACE_TRY_ENV
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

};


//
//                ThruPOA  Proxy Impl. Declaration
///////////////////////////////////////////////////////////////////////


#if defined (ACE_HAS_USING_KEYWORD)
// TIE class: Refer to CORBA v2.2, Section 20.34.4
template <class T>
class  WstringDef_tie : public WstringDef
{
public:
  WstringDef_tie (T &t);
  // the T& ctor
  WstringDef_tie (T &t, PortableServer::POA_ptr poa);
  // ctor taking a POA
  WstringDef_tie (T *tp, CORBA::Boolean release=1);
  // ctor taking pointer and an ownership flag
  WstringDef_tie (T *tp, PortableServer::POA_ptr poa, CORBA::Boolean release=1);
  // ctor with T*, ownership flag and a POA
  ~WstringDef_tie (void);
  // dtor
  
  // TIE specific functions
  T *_tied_object (void);
  // return the underlying object
  void _tied_object (T &obj);
  // set the underlying object
  void _tied_object (T *obj, CORBA::Boolean release=1);
  // set the underlying object and the ownership flag
  CORBA::Boolean _is_owner (void);
  // do we own it
  void _is_owner (CORBA::Boolean b);
  // set the ownership
  
  // overridden ServantBase operations
  PortableServer::POA_ptr _default_POA (
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    );
  CORBA::ULong bound (
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  void bound (
      CORBA::ULong bound,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  CORBA::TypeCode_ptr type (
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  CORBA::DefinitionKind def_kind (
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  void destroy (
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

private:
  T *ptr_;
  PortableServer::POA_var poa_;
  CORBA::Boolean rel_;
  
  // copy and assignment are not allowed
  WstringDef_tie (const WstringDef_tie &);
  void operator= (const WstringDef_tie &);
};

#endif /* ACE_HAS_USING_KEYWORD */

class SequenceDef;
typedef SequenceDef *SequenceDef_ptr;
// Forward Classes Declaration
class _TAO_SequenceDef_ThruPOA_Proxy_Impl;
class _TAO_SequenceDef_Strategized_Proxy_Broker;

class  SequenceDef : public virtual IDLType
{
protected:
  SequenceDef (void);

public:
  SequenceDef (const SequenceDef& rhs);
  virtual ~SequenceDef (void);


  virtual CORBA::Boolean _is_a (
      const char* logical_type_id,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    );

  virtual void* _downcast (
      const char* logical_type_id
    );

  static void _is_a_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    );

  static void _non_existent_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    );

  virtual void _dispatch (
      TAO_ServerRequest &_tao_req,
      void *_tao_context,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    );

  ::CORBA::SequenceDef *_this (
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    );

  virtual const char* _interface_repository_id (void) const;

  virtual CORBA::ULong bound (
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    )) = 0;

  static void _get_bound_skel (
      TAO_ServerRequest &_tao_req, 
      void *_tao_obj, 
      void *_tao_context, 
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    );

  virtual void bound (
      CORBA::ULong bound,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    )) = 0;

  static void _set_bound_skel (
      TAO_ServerRequest &_tao_req, 
      void *_tao_obj, 
      void *_tao_context, 
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    );

  virtual CORBA::TypeCode_ptr element_type (
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    )) = 0;

  static void _get_element_type_skel (
      TAO_ServerRequest &_tao_req, 
      void *_tao_obj, 
      void *_tao_context, 
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    );

  virtual CORBA::IDLType_ptr element_type_def (
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    )) = 0;

  static void _get_element_type_def_skel (
      TAO_ServerRequest &_tao_req, 
      void *_tao_obj, 
      void *_tao_context, 
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    );

  virtual void element_type_def (
      CORBA::IDLType_ptr element_type_def,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    )) = 0;

  static void _set_element_type_def_skel (
      TAO_ServerRequest &_tao_req, 
      void *_tao_obj, 
      void *_tao_context, 
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    );

  static void _get_type_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context,
      CORBA::Environment &ACE_TRY_ENV =
        TAO_default_environment ()
    );

  static void _get_def_kind_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context,
      CORBA::Environment &ACE_TRY_ENV =
        TAO_default_environment ()
    );

  static void destroy_skel (
      TAO_ServerRequest &req, 
      void *obj,
      void *context,
      CORBA::Environment &ACE_TRY_ENV =
        TAO_default_environment ()
    );
};


///////////////////////////////////////////////////////////////////////
//               Strategized Proxy Broker Declaration 
//

class  _TAO_SequenceDef_Strategized_Proxy_Broker : public virtual ::_TAO_SequenceDef_Proxy_Broker
{
public: 
  _TAO_SequenceDef_Strategized_Proxy_Broker (void);
  
  virtual ~_TAO_SequenceDef_Strategized_Proxy_Broker (void);
  
  virtual ::_TAO_SequenceDef_Proxy_Impl &select_proxy (
    ::CORBA::SequenceDef *object,
    CORBA_Environment &ACE_TRY_ENV = TAO_default_environment ()
  );

private:

// Helper methods that takes care to create the proxy
// as soon as their use is necessary.
  void create_proxy (
    int strategy,
    CORBA::Environment &ACE_TRY_ENV
  );

private:
  
  // Caches the proxy implementations. The proxy implementation
  // are totally stateless, and those can be shared by all the
  // instances of a given IDL interface type.
  ::_TAO_SequenceDef_Proxy_Impl
   *proxy_cache_[TAO_Collocation_Strategies::CS_LAST];
  
  TAO_SYNCH_MUTEX mutex_;
// This funxtion is used to get an handle to the unique instance
// of the Strategized Proxy Broker that is available for a given
// interface.

public:
  static _TAO_SequenceDef_Strategized_Proxy_Broker *the_TAO_SequenceDef_Strategized_Proxy_Broker (void);
};


//
//            End Strategized Proxy Broker Declaration 
///////////////////////////////////////////////////////////////////////


///////////////////////////////////////////////////////////////////////
//                    ThruPOA  Impl. Declaration
//

class  _TAO_SequenceDef_ThruPOA_Proxy_Impl : 
  public virtual ::_TAO_SequenceDef_Proxy_Impl,
  public virtual TAO_ThruPOA_Object_Proxy_Impl,
  public virtual ::POA_CORBA::_TAO_IDLType_ThruPOA_Proxy_Impl
  
{
public:
  _TAO_SequenceDef_ThruPOA_Proxy_Impl (void);
  
  virtual ~_TAO_SequenceDef_ThruPOA_Proxy_Impl (void) { }
  
    virtual CORBA::ULong bound (
      CORBA_Object *_collocated_tao_target_,
      CORBA::Environment &ACE_TRY_ENV
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  virtual void bound (
      CORBA_Object *_collocated_tao_target_,
      CORBA::ULong bound,
      CORBA::Environment &ACE_TRY_ENV
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  virtual CORBA::TypeCode_ptr element_type (
      CORBA_Object *_collocated_tao_target_,
      CORBA::Environment &ACE_TRY_ENV
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  virtual CORBA::IDLType_ptr element_type_def (
      CORBA_Object *_collocated_tao_target_,
      CORBA::Environment &ACE_TRY_ENV
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  virtual void element_type_def (
      CORBA_Object *_collocated_tao_target_,
      CORBA::IDLType_ptr element_type_def,
      CORBA::Environment &ACE_TRY_ENV
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

};


//
//                ThruPOA  Proxy Impl. Declaration
///////////////////////////////////////////////////////////////////////


#if defined (ACE_HAS_USING_KEYWORD)
// TIE class: Refer to CORBA v2.2, Section 20.34.4
template <class T>
class  SequenceDef_tie : public SequenceDef
{
public:
  SequenceDef_tie (T &t);
  // the T& ctor
  SequenceDef_tie (T &t, PortableServer::POA_ptr poa);
  // ctor taking a POA
  SequenceDef_tie (T *tp, CORBA::Boolean release=1);
  // ctor taking pointer and an ownership flag
  SequenceDef_tie (T *tp, PortableServer::POA_ptr poa, CORBA::Boolean release=1);
  // ctor with T*, ownership flag and a POA
  ~SequenceDef_tie (void);
  // dtor
  
  // TIE specific functions
  T *_tied_object (void);
  // return the underlying object
  void _tied_object (T &obj);
  // set the underlying object
  void _tied_object (T *obj, CORBA::Boolean release=1);
  // set the underlying object and the ownership flag
  CORBA::Boolean _is_owner (void);
  // do we own it
  void _is_owner (CORBA::Boolean b);
  // set the ownership
  
  // overridden ServantBase operations
  PortableServer::POA_ptr _default_POA (
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    );
  CORBA::ULong bound (
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  void bound (
      CORBA::ULong bound,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  CORBA::TypeCode_ptr element_type (
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  CORBA::IDLType_ptr element_type_def (
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  void element_type_def (
      CORBA::IDLType_ptr element_type_def,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  CORBA::TypeCode_ptr type (
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  CORBA::DefinitionKind def_kind (
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  void destroy (
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

private:
  T *ptr_;
  PortableServer::POA_var poa_;
  CORBA::Boolean rel_;
  
  // copy and assignment are not allowed
  SequenceDef_tie (const SequenceDef_tie &);
  void operator= (const SequenceDef_tie &);
};

#endif /* ACE_HAS_USING_KEYWORD */

class ArrayDef;
typedef ArrayDef *ArrayDef_ptr;
// Forward Classes Declaration
class _TAO_ArrayDef_ThruPOA_Proxy_Impl;
class _TAO_ArrayDef_Strategized_Proxy_Broker;

class  ArrayDef : public virtual IDLType
{
protected:
  ArrayDef (void);

public:
  ArrayDef (const ArrayDef& rhs);
  virtual ~ArrayDef (void);


  virtual CORBA::Boolean _is_a (
      const char* logical_type_id,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    );

  virtual void* _downcast (
      const char* logical_type_id
    );

  static void _is_a_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    );

  static void _non_existent_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    );

  virtual void _dispatch (
      TAO_ServerRequest &_tao_req,
      void *_tao_context,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    );

  ::CORBA::ArrayDef *_this (
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    );

  virtual const char* _interface_repository_id (void) const;

  virtual CORBA::ULong length (
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    )) = 0;

  static void _get_length_skel (
      TAO_ServerRequest &_tao_req, 
      void *_tao_obj, 
      void *_tao_context, 
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    );

  virtual void length (
      CORBA::ULong length,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    )) = 0;

  static void _set_length_skel (
      TAO_ServerRequest &_tao_req, 
      void *_tao_obj, 
      void *_tao_context, 
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    );

  virtual CORBA::TypeCode_ptr element_type (
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    )) = 0;

  static void _get_element_type_skel (
      TAO_ServerRequest &_tao_req, 
      void *_tao_obj, 
      void *_tao_context, 
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    );

  virtual CORBA::IDLType_ptr element_type_def (
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    )) = 0;

  static void _get_element_type_def_skel (
      TAO_ServerRequest &_tao_req, 
      void *_tao_obj, 
      void *_tao_context, 
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    );

  virtual void element_type_def (
      CORBA::IDLType_ptr element_type_def,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    )) = 0;

  static void _set_element_type_def_skel (
      TAO_ServerRequest &_tao_req, 
      void *_tao_obj, 
      void *_tao_context, 
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    );

  static void _get_type_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context,
      CORBA::Environment &ACE_TRY_ENV =
        TAO_default_environment ()
    );

  static void _get_def_kind_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context,
      CORBA::Environment &ACE_TRY_ENV =
        TAO_default_environment ()
    );

  static void destroy_skel (
      TAO_ServerRequest &req, 
      void *obj,
      void *context,
      CORBA::Environment &ACE_TRY_ENV =
        TAO_default_environment ()
    );
};


///////////////////////////////////////////////////////////////////////
//               Strategized Proxy Broker Declaration 
//

class  _TAO_ArrayDef_Strategized_Proxy_Broker : public virtual ::_TAO_ArrayDef_Proxy_Broker
{
public: 
  _TAO_ArrayDef_Strategized_Proxy_Broker (void);
  
  virtual ~_TAO_ArrayDef_Strategized_Proxy_Broker (void);
  
  virtual ::_TAO_ArrayDef_Proxy_Impl &select_proxy (
    ::CORBA::ArrayDef *object,
    CORBA_Environment &ACE_TRY_ENV = TAO_default_environment ()
  );

private:

// Helper methods that takes care to create the proxy
// as soon as their use is necessary.
  void create_proxy (
    int strategy,
    CORBA::Environment &ACE_TRY_ENV
  );

private:
  
  // Caches the proxy implementations. The proxy implementation
  // are totally stateless, and those can be shared by all the
  // instances of a given IDL interface type.
  ::_TAO_ArrayDef_Proxy_Impl
   *proxy_cache_[TAO_Collocation_Strategies::CS_LAST];
  
  TAO_SYNCH_MUTEX mutex_;
// This funxtion is used to get an handle to the unique instance
// of the Strategized Proxy Broker that is available for a given
// interface.

public:
  static _TAO_ArrayDef_Strategized_Proxy_Broker *the_TAO_ArrayDef_Strategized_Proxy_Broker (void);
};


//
//            End Strategized Proxy Broker Declaration 
///////////////////////////////////////////////////////////////////////


///////////////////////////////////////////////////////////////////////
//                    ThruPOA  Impl. Declaration
//

class  _TAO_ArrayDef_ThruPOA_Proxy_Impl : 
  public virtual ::_TAO_ArrayDef_Proxy_Impl,
  public virtual TAO_ThruPOA_Object_Proxy_Impl,
  public virtual ::POA_CORBA::_TAO_IDLType_ThruPOA_Proxy_Impl
  
{
public:
  _TAO_ArrayDef_ThruPOA_Proxy_Impl (void);
  
  virtual ~_TAO_ArrayDef_ThruPOA_Proxy_Impl (void) { }
  
    virtual CORBA::ULong length (
      CORBA_Object *_collocated_tao_target_,
      CORBA::Environment &ACE_TRY_ENV
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  virtual void length (
      CORBA_Object *_collocated_tao_target_,
      CORBA::ULong length,
      CORBA::Environment &ACE_TRY_ENV
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  virtual CORBA::TypeCode_ptr element_type (
      CORBA_Object *_collocated_tao_target_,
      CORBA::Environment &ACE_TRY_ENV
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  virtual CORBA::IDLType_ptr element_type_def (
      CORBA_Object *_collocated_tao_target_,
      CORBA::Environment &ACE_TRY_ENV
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  virtual void element_type_def (
      CORBA_Object *_collocated_tao_target_,
      CORBA::IDLType_ptr element_type_def,
      CORBA::Environment &ACE_TRY_ENV
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

};


//
//                ThruPOA  Proxy Impl. Declaration
///////////////////////////////////////////////////////////////////////


#if defined (ACE_HAS_USING_KEYWORD)
// TIE class: Refer to CORBA v2.2, Section 20.34.4
template <class T>
class  ArrayDef_tie : public ArrayDef
{
public:
  ArrayDef_tie (T &t);
  // the T& ctor
  ArrayDef_tie (T &t, PortableServer::POA_ptr poa);
  // ctor taking a POA
  ArrayDef_tie (T *tp, CORBA::Boolean release=1);
  // ctor taking pointer and an ownership flag
  ArrayDef_tie (T *tp, PortableServer::POA_ptr poa, CORBA::Boolean release=1);
  // ctor with T*, ownership flag and a POA
  ~ArrayDef_tie (void);
  // dtor
  
  // TIE specific functions
  T *_tied_object (void);
  // return the underlying object
  void _tied_object (T &obj);
  // set the underlying object
  void _tied_object (T *obj, CORBA::Boolean release=1);
  // set the underlying object and the ownership flag
  CORBA::Boolean _is_owner (void);
  // do we own it
  void _is_owner (CORBA::Boolean b);
  // set the ownership
  
  // overridden ServantBase operations
  PortableServer::POA_ptr _default_POA (
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    );
  CORBA::ULong length (
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  void length (
      CORBA::ULong length,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  CORBA::TypeCode_ptr element_type (
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  CORBA::IDLType_ptr element_type_def (
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  void element_type_def (
      CORBA::IDLType_ptr element_type_def,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  CORBA::TypeCode_ptr type (
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  CORBA::DefinitionKind def_kind (
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  void destroy (
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

private:
  T *ptr_;
  PortableServer::POA_var poa_;
  CORBA::Boolean rel_;
  
  // copy and assignment are not allowed
  ArrayDef_tie (const ArrayDef_tie &);
  void operator= (const ArrayDef_tie &);
};

#endif /* ACE_HAS_USING_KEYWORD */

class ExceptionDef;
typedef ExceptionDef *ExceptionDef_ptr;
// Forward Classes Declaration
class _TAO_ExceptionDef_ThruPOA_Proxy_Impl;
class _TAO_ExceptionDef_Strategized_Proxy_Broker;

class  ExceptionDef : public virtual Contained, public virtual Container
{
protected:
  ExceptionDef (void);

public:
  ExceptionDef (const ExceptionDef& rhs);
  virtual ~ExceptionDef (void);


  virtual CORBA::Boolean _is_a (
      const char* logical_type_id,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    );

  virtual void* _downcast (
      const char* logical_type_id
    );

  static void _is_a_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    );

  static void _non_existent_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    );

  virtual void _dispatch (
      TAO_ServerRequest &_tao_req,
      void *_tao_context,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    );

  ::CORBA::ExceptionDef *_this (
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    );

  virtual const char* _interface_repository_id (void) const;

  virtual CORBA::TypeCode_ptr type (
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    )) = 0;

  static void _get_type_skel (
      TAO_ServerRequest &_tao_req, 
      void *_tao_obj, 
      void *_tao_context, 
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    );

  virtual CORBA::StructMemberSeq * members (
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    )) = 0;

  static void _get_members_skel (
      TAO_ServerRequest &_tao_req, 
      void *_tao_obj, 
      void *_tao_context, 
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    );

  virtual void members (
      const CORBA::StructMemberSeq & members,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    )) = 0;

  static void _set_members_skel (
      TAO_ServerRequest &_tao_req, 
      void *_tao_obj, 
      void *_tao_context, 
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    );

  static void _get_id_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context,
      CORBA::Environment &ACE_TRY_ENV =
        TAO_default_environment ()
    );

  static void _set_id_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    );

  static void _get_name_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context,
      CORBA::Environment &ACE_TRY_ENV =
        TAO_default_environment ()
    );

  static void _set_name_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    );

  static void _get_version_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context,
      CORBA::Environment &ACE_TRY_ENV =
        TAO_default_environment ()
    );

  static void _set_version_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    );

  static void _get_defined_in_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context,
      CORBA::Environment &ACE_TRY_ENV =
        TAO_default_environment ()
    );

  static void _get_absolute_name_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context,
      CORBA::Environment &ACE_TRY_ENV =
        TAO_default_environment ()
    );

  static void _get_containing_repository_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context,
      CORBA::Environment &ACE_TRY_ENV =
        TAO_default_environment ()
    );

  static void describe_skel (
      TAO_ServerRequest &req, 
      void *obj,
      void *context,
      CORBA::Environment &ACE_TRY_ENV =
        TAO_default_environment ()
    );

  static void move_skel (
      TAO_ServerRequest &req, 
      void *obj,
      void *context,
      CORBA::Environment &ACE_TRY_ENV =
        TAO_default_environment ()
    );

  static void lookup_skel (
      TAO_ServerRequest &req, 
      void *obj,
      void *context,
      CORBA::Environment &ACE_TRY_ENV =
        TAO_default_environment ()
    );

  static void contents_skel (
      TAO_ServerRequest &req, 
      void *obj,
      void *context,
      CORBA::Environment &ACE_TRY_ENV =
        TAO_default_environment ()
    );

  static void lookup_name_skel (
      TAO_ServerRequest &req, 
      void *obj,
      void *context,
      CORBA::Environment &ACE_TRY_ENV =
        TAO_default_environment ()
    );

  static void describe_contents_skel (
      TAO_ServerRequest &req, 
      void *obj,
      void *context,
      CORBA::Environment &ACE_TRY_ENV =
        TAO_default_environment ()
    );

  static void create_module_skel (
      TAO_ServerRequest &req, 
      void *obj,
      void *context,
      CORBA::Environment &ACE_TRY_ENV =
        TAO_default_environment ()
    );

  static void create_constant_skel (
      TAO_ServerRequest &req, 
      void *obj,
      void *context,
      CORBA::Environment &ACE_TRY_ENV =
        TAO_default_environment ()
    );

  static void create_struct_skel (
      TAO_ServerRequest &req, 
      void *obj,
      void *context,
      CORBA::Environment &ACE_TRY_ENV =
        TAO_default_environment ()
    );

  static void create_union_skel (
      TAO_ServerRequest &req, 
      void *obj,
      void *context,
      CORBA::Environment &ACE_TRY_ENV =
        TAO_default_environment ()
    );

  static void create_enum_skel (
      TAO_ServerRequest &req, 
      void *obj,
      void *context,
      CORBA::Environment &ACE_TRY_ENV =
        TAO_default_environment ()
    );

  static void create_alias_skel (
      TAO_ServerRequest &req, 
      void *obj,
      void *context,
      CORBA::Environment &ACE_TRY_ENV =
        TAO_default_environment ()
    );

  static void create_interface_skel (
      TAO_ServerRequest &req, 
      void *obj,
      void *context,
      CORBA::Environment &ACE_TRY_ENV =
        TAO_default_environment ()
    );

  static void create_value_skel (
      TAO_ServerRequest &req, 
      void *obj,
      void *context,
      CORBA::Environment &ACE_TRY_ENV =
        TAO_default_environment ()
    );

  static void create_value_box_skel (
      TAO_ServerRequest &req, 
      void *obj,
      void *context,
      CORBA::Environment &ACE_TRY_ENV =
        TAO_default_environment ()
    );

  static void create_exception_skel (
      TAO_ServerRequest &req, 
      void *obj,
      void *context,
      CORBA::Environment &ACE_TRY_ENV =
        TAO_default_environment ()
    );

  static void create_native_skel (
      TAO_ServerRequest &req, 
      void *obj,
      void *context,
      CORBA::Environment &ACE_TRY_ENV =
        TAO_default_environment ()
    );

  static void create_abstract_interface_skel (
      TAO_ServerRequest &req, 
      void *obj,
      void *context,
      CORBA::Environment &ACE_TRY_ENV =
        TAO_default_environment ()
    );

  static void create_local_interface_skel (
      TAO_ServerRequest &req, 
      void *obj,
      void *context,
      CORBA::Environment &ACE_TRY_ENV =
        TAO_default_environment ()
    );

  static void _get_def_kind_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context,
      CORBA::Environment &ACE_TRY_ENV =
        TAO_default_environment ()
    );

  static void destroy_skel (
      TAO_ServerRequest &req, 
      void *obj,
      void *context,
      CORBA::Environment &ACE_TRY_ENV =
        TAO_default_environment ()
    );
};


///////////////////////////////////////////////////////////////////////
//               Strategized Proxy Broker Declaration 
//

class  _TAO_ExceptionDef_Strategized_Proxy_Broker : public virtual ::_TAO_ExceptionDef_Proxy_Broker
{
public: 
  _TAO_ExceptionDef_Strategized_Proxy_Broker (void);
  
  virtual ~_TAO_ExceptionDef_Strategized_Proxy_Broker (void);
  
  virtual ::_TAO_ExceptionDef_Proxy_Impl &select_proxy (
    ::CORBA::ExceptionDef *object,
    CORBA_Environment &ACE_TRY_ENV = TAO_default_environment ()
  );

private:

// Helper methods that takes care to create the proxy
// as soon as their use is necessary.
  void create_proxy (
    int strategy,
    CORBA::Environment &ACE_TRY_ENV
  );

private:
  
  // Caches the proxy implementations. The proxy implementation
  // are totally stateless, and those can be shared by all the
  // instances of a given IDL interface type.
  ::_TAO_ExceptionDef_Proxy_Impl
   *proxy_cache_[TAO_Collocation_Strategies::CS_LAST];
  
  TAO_SYNCH_MUTEX mutex_;
// This funxtion is used to get an handle to the unique instance
// of the Strategized Proxy Broker that is available for a given
// interface.

public:
  static _TAO_ExceptionDef_Strategized_Proxy_Broker *the_TAO_ExceptionDef_Strategized_Proxy_Broker (void);
};


//
//            End Strategized Proxy Broker Declaration 
///////////////////////////////////////////////////////////////////////


///////////////////////////////////////////////////////////////////////
//                    ThruPOA  Impl. Declaration
//

class  _TAO_ExceptionDef_ThruPOA_Proxy_Impl : 
  public virtual ::_TAO_ExceptionDef_Proxy_Impl,
  public virtual TAO_ThruPOA_Object_Proxy_Impl,
  public virtual ::POA_CORBA::_TAO_Contained_ThruPOA_Proxy_Impl, 
  public virtual ::POA_CORBA::_TAO_Container_ThruPOA_Proxy_Impl
  
{
public:
  _TAO_ExceptionDef_ThruPOA_Proxy_Impl (void);
  
  virtual ~_TAO_ExceptionDef_ThruPOA_Proxy_Impl (void) { }
  
    virtual CORBA::TypeCode_ptr type (
      CORBA_Object *_collocated_tao_target_,
      CORBA::Environment &ACE_TRY_ENV
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  virtual CORBA::StructMemberSeq * members (
      CORBA_Object *_collocated_tao_target_,
      CORBA::Environment &ACE_TRY_ENV
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  virtual void members (
      CORBA_Object *_collocated_tao_target_,
      const CORBA::StructMemberSeq & members,
      CORBA::Environment &ACE_TRY_ENV
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

};


//
//                ThruPOA  Proxy Impl. Declaration
///////////////////////////////////////////////////////////////////////


#if defined (ACE_HAS_USING_KEYWORD)
// TIE class: Refer to CORBA v2.2, Section 20.34.4
template <class T>
class  ExceptionDef_tie : public ExceptionDef
{
public:
  ExceptionDef_tie (T &t);
  // the T& ctor
  ExceptionDef_tie (T &t, PortableServer::POA_ptr poa);
  // ctor taking a POA
  ExceptionDef_tie (T *tp, CORBA::Boolean release=1);
  // ctor taking pointer and an ownership flag
  ExceptionDef_tie (T *tp, PortableServer::POA_ptr poa, CORBA::Boolean release=1);
  // ctor with T*, ownership flag and a POA
  ~ExceptionDef_tie (void);
  // dtor
  
  // TIE specific functions
  T *_tied_object (void);
  // return the underlying object
  void _tied_object (T &obj);
  // set the underlying object
  void _tied_object (T *obj, CORBA::Boolean release=1);
  // set the underlying object and the ownership flag
  CORBA::Boolean _is_owner (void);
  // do we own it
  void _is_owner (CORBA::Boolean b);
  // set the ownership
  
  // overridden ServantBase operations
  PortableServer::POA_ptr _default_POA (
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    );
  CORBA::TypeCode_ptr type (
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  CORBA::StructMemberSeq * members (
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  void members (
      const CORBA::StructMemberSeq & members,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  char * id (
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  void id (
      const char * id,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  char * name (
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  void name (
      const char * name,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  char * version (
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  void version (
      const char * version,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  CORBA::Container_ptr defined_in (
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  char * absolute_name (
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  CORBA::Repository_ptr containing_repository (
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  CORBA::Contained::Description * describe (
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  void move (
      CORBA::Container_ptr new_container,
      const char * new_name,
      const char * new_version,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  CORBA::Contained_ptr lookup (
      const char * search_name,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  CORBA::ContainedSeq * contents (
      CORBA::DefinitionKind limit_type,
      CORBA::Boolean exclude_inherited,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  CORBA::ContainedSeq * lookup_name (
      const char * search_name,
      CORBA::Long levels_to_search,
      CORBA::DefinitionKind limit_type,
      CORBA::Boolean exclude_inherited,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  CORBA::Container::DescriptionSeq * describe_contents (
      CORBA::DefinitionKind limit_type,
      CORBA::Boolean exclude_inherited,
      CORBA::Long max_returned_objs,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  CORBA::ModuleDef_ptr create_module (
      const char * id,
      const char * name,
      const char * version,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  CORBA::ConstantDef_ptr create_constant (
      const char * id,
      const char * name,
      const char * version,
      CORBA::IDLType_ptr type,
      const CORBA::Any & value,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  CORBA::StructDef_ptr create_struct (
      const char * id,
      const char * name,
      const char * version,
      const CORBA::StructMemberSeq & members,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  CORBA::UnionDef_ptr create_union (
      const char * id,
      const char * name,
      const char * version,
      CORBA::IDLType_ptr discriminator_type,
      const CORBA::UnionMemberSeq & members,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  CORBA::EnumDef_ptr create_enum (
      const char * id,
      const char * name,
      const char * version,
      const CORBA::EnumMemberSeq & members,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  CORBA::AliasDef_ptr create_alias (
      const char * id,
      const char * name,
      const char * version,
      CORBA::IDLType_ptr original_type,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  CORBA::InterfaceDef_ptr create_interface (
      const char * id,
      const char * name,
      const char * version,
      const CORBA::InterfaceDefSeq & base_interfaces,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  CORBA::ValueDef_ptr create_value (
      const char * id,
      const char * name,
      const char * version,
      CORBA::Boolean is_custom,
      CORBA::Boolean is_abstract,
      CORBA::ValueDef_ptr base_value,
      CORBA::Boolean is_truncatable,
      const CORBA::ValueDefSeq & abstract_base_values,
      const CORBA::InterfaceDefSeq & supported_interfaces,
      const CORBA::InitializerSeq & initializers,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  CORBA::ValueBoxDef_ptr create_value_box (
      const char * id,
      const char * name,
      const char * version,
      CORBA::IDLType_ptr original_type_def,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  CORBA::ExceptionDef_ptr create_exception (
      const char * id,
      const char * name,
      const char * version,
      const CORBA::StructMemberSeq & members,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  CORBA::NativeDef_ptr create_native (
      const char * id,
      const char * name,
      const char * version,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  CORBA::AbstractInterfaceDef_ptr create_abstract_interface (
      const char * id,
      const char * name,
      const char * version,
      const CORBA::AbstractInterfaceDefSeq & base_interfaces,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  CORBA::LocalInterfaceDef_ptr create_local_interface (
      const char * id,
      const char * name,
      const char * version,
      const CORBA::InterfaceDefSeq & base_interfaces,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  CORBA::DefinitionKind def_kind (
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  void destroy (
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

private:
  T *ptr_;
  PortableServer::POA_var poa_;
  CORBA::Boolean rel_;
  
  // copy and assignment are not allowed
  ExceptionDef_tie (const ExceptionDef_tie &);
  void operator= (const ExceptionDef_tie &);
};

#endif /* ACE_HAS_USING_KEYWORD */

class AttributeDef;
typedef AttributeDef *AttributeDef_ptr;
// Forward Classes Declaration
class _TAO_AttributeDef_ThruPOA_Proxy_Impl;
class _TAO_AttributeDef_Strategized_Proxy_Broker;

class  AttributeDef : public virtual Contained
{
protected:
  AttributeDef (void);

public:
  AttributeDef (const AttributeDef& rhs);
  virtual ~AttributeDef (void);


  virtual CORBA::Boolean _is_a (
      const char* logical_type_id,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    );

  virtual void* _downcast (
      const char* logical_type_id
    );

  static void _is_a_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    );

  static void _non_existent_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    );

  virtual void _dispatch (
      TAO_ServerRequest &_tao_req,
      void *_tao_context,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    );

  ::CORBA::AttributeDef *_this (
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    );

  virtual const char* _interface_repository_id (void) const;

  virtual CORBA::TypeCode_ptr type (
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    )) = 0;

  static void _get_type_skel (
      TAO_ServerRequest &_tao_req, 
      void *_tao_obj, 
      void *_tao_context, 
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    );

  virtual CORBA::IDLType_ptr type_def (
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    )) = 0;

  static void _get_type_def_skel (
      TAO_ServerRequest &_tao_req, 
      void *_tao_obj, 
      void *_tao_context, 
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    );

  virtual void type_def (
      CORBA::IDLType_ptr type_def,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    )) = 0;

  static void _set_type_def_skel (
      TAO_ServerRequest &_tao_req, 
      void *_tao_obj, 
      void *_tao_context, 
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    );

  virtual CORBA::AttributeMode mode (
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    )) = 0;

  static void _get_mode_skel (
      TAO_ServerRequest &_tao_req, 
      void *_tao_obj, 
      void *_tao_context, 
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    );

  virtual void mode (
      CORBA::AttributeMode mode,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    )) = 0;

  static void _set_mode_skel (
      TAO_ServerRequest &_tao_req, 
      void *_tao_obj, 
      void *_tao_context, 
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    );

  static void _get_id_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context,
      CORBA::Environment &ACE_TRY_ENV =
        TAO_default_environment ()
    );

  static void _set_id_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    );

  static void _get_name_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context,
      CORBA::Environment &ACE_TRY_ENV =
        TAO_default_environment ()
    );

  static void _set_name_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    );

  static void _get_version_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context,
      CORBA::Environment &ACE_TRY_ENV =
        TAO_default_environment ()
    );

  static void _set_version_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    );

  static void _get_defined_in_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context,
      CORBA::Environment &ACE_TRY_ENV =
        TAO_default_environment ()
    );

  static void _get_absolute_name_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context,
      CORBA::Environment &ACE_TRY_ENV =
        TAO_default_environment ()
    );

  static void _get_containing_repository_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context,
      CORBA::Environment &ACE_TRY_ENV =
        TAO_default_environment ()
    );

  static void describe_skel (
      TAO_ServerRequest &req, 
      void *obj,
      void *context,
      CORBA::Environment &ACE_TRY_ENV =
        TAO_default_environment ()
    );

  static void move_skel (
      TAO_ServerRequest &req, 
      void *obj,
      void *context,
      CORBA::Environment &ACE_TRY_ENV =
        TAO_default_environment ()
    );

  static void _get_def_kind_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context,
      CORBA::Environment &ACE_TRY_ENV =
        TAO_default_environment ()
    );

  static void destroy_skel (
      TAO_ServerRequest &req, 
      void *obj,
      void *context,
      CORBA::Environment &ACE_TRY_ENV =
        TAO_default_environment ()
    );
};


///////////////////////////////////////////////////////////////////////
//               Strategized Proxy Broker Declaration 
//

class  _TAO_AttributeDef_Strategized_Proxy_Broker : public virtual ::_TAO_AttributeDef_Proxy_Broker
{
public: 
  _TAO_AttributeDef_Strategized_Proxy_Broker (void);
  
  virtual ~_TAO_AttributeDef_Strategized_Proxy_Broker (void);
  
  virtual ::_TAO_AttributeDef_Proxy_Impl &select_proxy (
    ::CORBA::AttributeDef *object,
    CORBA_Environment &ACE_TRY_ENV = TAO_default_environment ()
  );

private:

// Helper methods that takes care to create the proxy
// as soon as their use is necessary.
  void create_proxy (
    int strategy,
    CORBA::Environment &ACE_TRY_ENV
  );

private:
  
  // Caches the proxy implementations. The proxy implementation
  // are totally stateless, and those can be shared by all the
  // instances of a given IDL interface type.
  ::_TAO_AttributeDef_Proxy_Impl
   *proxy_cache_[TAO_Collocation_Strategies::CS_LAST];
  
  TAO_SYNCH_MUTEX mutex_;
// This funxtion is used to get an handle to the unique instance
// of the Strategized Proxy Broker that is available for a given
// interface.

public:
  static _TAO_AttributeDef_Strategized_Proxy_Broker *the_TAO_AttributeDef_Strategized_Proxy_Broker (void);
};


//
//            End Strategized Proxy Broker Declaration 
///////////////////////////////////////////////////////////////////////


///////////////////////////////////////////////////////////////////////
//                    ThruPOA  Impl. Declaration
//

class  _TAO_AttributeDef_ThruPOA_Proxy_Impl : 
  public virtual ::_TAO_AttributeDef_Proxy_Impl,
  public virtual TAO_ThruPOA_Object_Proxy_Impl,
  public virtual ::POA_CORBA::_TAO_Contained_ThruPOA_Proxy_Impl
  
{
public:
  _TAO_AttributeDef_ThruPOA_Proxy_Impl (void);
  
  virtual ~_TAO_AttributeDef_ThruPOA_Proxy_Impl (void) { }
  
    virtual CORBA::TypeCode_ptr type (
      CORBA_Object *_collocated_tao_target_,
      CORBA::Environment &ACE_TRY_ENV
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  virtual CORBA::IDLType_ptr type_def (
      CORBA_Object *_collocated_tao_target_,
      CORBA::Environment &ACE_TRY_ENV
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  virtual void type_def (
      CORBA_Object *_collocated_tao_target_,
      CORBA::IDLType_ptr type_def,
      CORBA::Environment &ACE_TRY_ENV
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  virtual CORBA::AttributeMode mode (
      CORBA_Object *_collocated_tao_target_,
      CORBA::Environment &ACE_TRY_ENV
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  virtual void mode (
      CORBA_Object *_collocated_tao_target_,
      CORBA::AttributeMode mode,
      CORBA::Environment &ACE_TRY_ENV
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

};


//
//                ThruPOA  Proxy Impl. Declaration
///////////////////////////////////////////////////////////////////////


#if defined (ACE_HAS_USING_KEYWORD)
// TIE class: Refer to CORBA v2.2, Section 20.34.4
template <class T>
class  AttributeDef_tie : public AttributeDef
{
public:
  AttributeDef_tie (T &t);
  // the T& ctor
  AttributeDef_tie (T &t, PortableServer::POA_ptr poa);
  // ctor taking a POA
  AttributeDef_tie (T *tp, CORBA::Boolean release=1);
  // ctor taking pointer and an ownership flag
  AttributeDef_tie (T *tp, PortableServer::POA_ptr poa, CORBA::Boolean release=1);
  // ctor with T*, ownership flag and a POA
  ~AttributeDef_tie (void);
  // dtor
  
  // TIE specific functions
  T *_tied_object (void);
  // return the underlying object
  void _tied_object (T &obj);
  // set the underlying object
  void _tied_object (T *obj, CORBA::Boolean release=1);
  // set the underlying object and the ownership flag
  CORBA::Boolean _is_owner (void);
  // do we own it
  void _is_owner (CORBA::Boolean b);
  // set the ownership
  
  // overridden ServantBase operations
  PortableServer::POA_ptr _default_POA (
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    );
  CORBA::TypeCode_ptr type (
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  CORBA::IDLType_ptr type_def (
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  void type_def (
      CORBA::IDLType_ptr type_def,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  CORBA::AttributeMode mode (
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  void mode (
      CORBA::AttributeMode mode,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  char * id (
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  void id (
      const char * id,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  char * name (
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  void name (
      const char * name,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  char * version (
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  void version (
      const char * version,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  CORBA::Container_ptr defined_in (
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  char * absolute_name (
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  CORBA::Repository_ptr containing_repository (
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  CORBA::Contained::Description * describe (
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  void move (
      CORBA::Container_ptr new_container,
      const char * new_name,
      const char * new_version,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  CORBA::DefinitionKind def_kind (
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  void destroy (
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

private:
  T *ptr_;
  PortableServer::POA_var poa_;
  CORBA::Boolean rel_;
  
  // copy and assignment are not allowed
  AttributeDef_tie (const AttributeDef_tie &);
  void operator= (const AttributeDef_tie &);
};

#endif /* ACE_HAS_USING_KEYWORD */

class OperationDef;
typedef OperationDef *OperationDef_ptr;
// Forward Classes Declaration
class _TAO_OperationDef_ThruPOA_Proxy_Impl;
class _TAO_OperationDef_Strategized_Proxy_Broker;

class  OperationDef : public virtual Contained
{
protected:
  OperationDef (void);

public:
  OperationDef (const OperationDef& rhs);
  virtual ~OperationDef (void);


  virtual CORBA::Boolean _is_a (
      const char* logical_type_id,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    );

  virtual void* _downcast (
      const char* logical_type_id
    );

  static void _is_a_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    );

  static void _non_existent_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    );

  virtual void _dispatch (
      TAO_ServerRequest &_tao_req,
      void *_tao_context,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    );

  ::CORBA::OperationDef *_this (
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    );

  virtual const char* _interface_repository_id (void) const;

  virtual CORBA::TypeCode_ptr result (
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    )) = 0;

  static void _get_result_skel (
      TAO_ServerRequest &_tao_req, 
      void *_tao_obj, 
      void *_tao_context, 
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    );

  virtual CORBA::IDLType_ptr result_def (
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    )) = 0;

  static void _get_result_def_skel (
      TAO_ServerRequest &_tao_req, 
      void *_tao_obj, 
      void *_tao_context, 
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    );

  virtual void result_def (
      CORBA::IDLType_ptr result_def,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    )) = 0;

  static void _set_result_def_skel (
      TAO_ServerRequest &_tao_req, 
      void *_tao_obj, 
      void *_tao_context, 
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    );

  virtual CORBA::ParDescriptionSeq * params (
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    )) = 0;

  static void _get_params_skel (
      TAO_ServerRequest &_tao_req, 
      void *_tao_obj, 
      void *_tao_context, 
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    );

  virtual void params (
      const CORBA::ParDescriptionSeq & params,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    )) = 0;

  static void _set_params_skel (
      TAO_ServerRequest &_tao_req, 
      void *_tao_obj, 
      void *_tao_context, 
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    );

  virtual CORBA::OperationMode mode (
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    )) = 0;

  static void _get_mode_skel (
      TAO_ServerRequest &_tao_req, 
      void *_tao_obj, 
      void *_tao_context, 
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    );

  virtual void mode (
      CORBA::OperationMode mode,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    )) = 0;

  static void _set_mode_skel (
      TAO_ServerRequest &_tao_req, 
      void *_tao_obj, 
      void *_tao_context, 
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    );

  virtual CORBA::ContextIdSeq * contexts (
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    )) = 0;

  static void _get_contexts_skel (
      TAO_ServerRequest &_tao_req, 
      void *_tao_obj, 
      void *_tao_context, 
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    );

  virtual void contexts (
      const CORBA::ContextIdSeq & contexts,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    )) = 0;

  static void _set_contexts_skel (
      TAO_ServerRequest &_tao_req, 
      void *_tao_obj, 
      void *_tao_context, 
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    );

  virtual CORBA::ExceptionDefSeq * exceptions (
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    )) = 0;

  static void _get_exceptions_skel (
      TAO_ServerRequest &_tao_req, 
      void *_tao_obj, 
      void *_tao_context, 
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    );

  virtual void exceptions (
      const CORBA::ExceptionDefSeq & exceptions,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    )) = 0;

  static void _set_exceptions_skel (
      TAO_ServerRequest &_tao_req, 
      void *_tao_obj, 
      void *_tao_context, 
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    );

  static void _get_id_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context,
      CORBA::Environment &ACE_TRY_ENV =
        TAO_default_environment ()
    );

  static void _set_id_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    );

  static void _get_name_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context,
      CORBA::Environment &ACE_TRY_ENV =
        TAO_default_environment ()
    );

  static void _set_name_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    );

  static void _get_version_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context,
      CORBA::Environment &ACE_TRY_ENV =
        TAO_default_environment ()
    );

  static void _set_version_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    );

  static void _get_defined_in_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context,
      CORBA::Environment &ACE_TRY_ENV =
        TAO_default_environment ()
    );

  static void _get_absolute_name_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context,
      CORBA::Environment &ACE_TRY_ENV =
        TAO_default_environment ()
    );

  static void _get_containing_repository_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context,
      CORBA::Environment &ACE_TRY_ENV =
        TAO_default_environment ()
    );

  static void describe_skel (
      TAO_ServerRequest &req, 
      void *obj,
      void *context,
      CORBA::Environment &ACE_TRY_ENV =
        TAO_default_environment ()
    );

  static void move_skel (
      TAO_ServerRequest &req, 
      void *obj,
      void *context,
      CORBA::Environment &ACE_TRY_ENV =
        TAO_default_environment ()
    );

  static void _get_def_kind_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context,
      CORBA::Environment &ACE_TRY_ENV =
        TAO_default_environment ()
    );

  static void destroy_skel (
      TAO_ServerRequest &req, 
      void *obj,
      void *context,
      CORBA::Environment &ACE_TRY_ENV =
        TAO_default_environment ()
    );
};


///////////////////////////////////////////////////////////////////////
//               Strategized Proxy Broker Declaration 
//

class  _TAO_OperationDef_Strategized_Proxy_Broker : public virtual ::_TAO_OperationDef_Proxy_Broker
{
public: 
  _TAO_OperationDef_Strategized_Proxy_Broker (void);
  
  virtual ~_TAO_OperationDef_Strategized_Proxy_Broker (void);
  
  virtual ::_TAO_OperationDef_Proxy_Impl &select_proxy (
    ::CORBA::OperationDef *object,
    CORBA_Environment &ACE_TRY_ENV = TAO_default_environment ()
  );

private:

// Helper methods that takes care to create the proxy
// as soon as their use is necessary.
  void create_proxy (
    int strategy,
    CORBA::Environment &ACE_TRY_ENV
  );

private:
  
  // Caches the proxy implementations. The proxy implementation
  // are totally stateless, and those can be shared by all the
  // instances of a given IDL interface type.
  ::_TAO_OperationDef_Proxy_Impl
   *proxy_cache_[TAO_Collocation_Strategies::CS_LAST];
  
  TAO_SYNCH_MUTEX mutex_;
// This funxtion is used to get an handle to the unique instance
// of the Strategized Proxy Broker that is available for a given
// interface.

public:
  static _TAO_OperationDef_Strategized_Proxy_Broker *the_TAO_OperationDef_Strategized_Proxy_Broker (void);
};


//
//            End Strategized Proxy Broker Declaration 
///////////////////////////////////////////////////////////////////////


///////////////////////////////////////////////////////////////////////
//                    ThruPOA  Impl. Declaration
//

class  _TAO_OperationDef_ThruPOA_Proxy_Impl : 
  public virtual ::_TAO_OperationDef_Proxy_Impl,
  public virtual TAO_ThruPOA_Object_Proxy_Impl,
  public virtual ::POA_CORBA::_TAO_Contained_ThruPOA_Proxy_Impl
  
{
public:
  _TAO_OperationDef_ThruPOA_Proxy_Impl (void);
  
  virtual ~_TAO_OperationDef_ThruPOA_Proxy_Impl (void) { }
  
    virtual CORBA::TypeCode_ptr result (
      CORBA_Object *_collocated_tao_target_,
      CORBA::Environment &ACE_TRY_ENV
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  virtual CORBA::IDLType_ptr result_def (
      CORBA_Object *_collocated_tao_target_,
      CORBA::Environment &ACE_TRY_ENV
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  virtual void result_def (
      CORBA_Object *_collocated_tao_target_,
      CORBA::IDLType_ptr result_def,
      CORBA::Environment &ACE_TRY_ENV
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  virtual CORBA::ParDescriptionSeq * params (
      CORBA_Object *_collocated_tao_target_,
      CORBA::Environment &ACE_TRY_ENV
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  virtual void params (
      CORBA_Object *_collocated_tao_target_,
      const CORBA::ParDescriptionSeq & params,
      CORBA::Environment &ACE_TRY_ENV
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  virtual CORBA::OperationMode mode (
      CORBA_Object *_collocated_tao_target_,
      CORBA::Environment &ACE_TRY_ENV
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  virtual void mode (
      CORBA_Object *_collocated_tao_target_,
      CORBA::OperationMode mode,
      CORBA::Environment &ACE_TRY_ENV
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  virtual CORBA::ContextIdSeq * contexts (
      CORBA_Object *_collocated_tao_target_,
      CORBA::Environment &ACE_TRY_ENV
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  virtual void contexts (
      CORBA_Object *_collocated_tao_target_,
      const CORBA::ContextIdSeq & contexts,
      CORBA::Environment &ACE_TRY_ENV
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  virtual CORBA::ExceptionDefSeq * exceptions (
      CORBA_Object *_collocated_tao_target_,
      CORBA::Environment &ACE_TRY_ENV
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  virtual void exceptions (
      CORBA_Object *_collocated_tao_target_,
      const CORBA::ExceptionDefSeq & exceptions,
      CORBA::Environment &ACE_TRY_ENV
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

};


//
//                ThruPOA  Proxy Impl. Declaration
///////////////////////////////////////////////////////////////////////


#if defined (ACE_HAS_USING_KEYWORD)
// TIE class: Refer to CORBA v2.2, Section 20.34.4
template <class T>
class  OperationDef_tie : public OperationDef
{
public:
  OperationDef_tie (T &t);
  // the T& ctor
  OperationDef_tie (T &t, PortableServer::POA_ptr poa);
  // ctor taking a POA
  OperationDef_tie (T *tp, CORBA::Boolean release=1);
  // ctor taking pointer and an ownership flag
  OperationDef_tie (T *tp, PortableServer::POA_ptr poa, CORBA::Boolean release=1);
  // ctor with T*, ownership flag and a POA
  ~OperationDef_tie (void);
  // dtor
  
  // TIE specific functions
  T *_tied_object (void);
  // return the underlying object
  void _tied_object (T &obj);
  // set the underlying object
  void _tied_object (T *obj, CORBA::Boolean release=1);
  // set the underlying object and the ownership flag
  CORBA::Boolean _is_owner (void);
  // do we own it
  void _is_owner (CORBA::Boolean b);
  // set the ownership
  
  // overridden ServantBase operations
  PortableServer::POA_ptr _default_POA (
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    );
  CORBA::TypeCode_ptr result (
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  CORBA::IDLType_ptr result_def (
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  void result_def (
      CORBA::IDLType_ptr result_def,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  CORBA::ParDescriptionSeq * params (
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  void params (
      const CORBA::ParDescriptionSeq & params,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  CORBA::OperationMode mode (
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  void mode (
      CORBA::OperationMode mode,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  CORBA::ContextIdSeq * contexts (
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  void contexts (
      const CORBA::ContextIdSeq & contexts,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  CORBA::ExceptionDefSeq * exceptions (
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  void exceptions (
      const CORBA::ExceptionDefSeq & exceptions,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  char * id (
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  void id (
      const char * id,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  char * name (
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  void name (
      const char * name,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  char * version (
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  void version (
      const char * version,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  CORBA::Container_ptr defined_in (
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  char * absolute_name (
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  CORBA::Repository_ptr containing_repository (
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  CORBA::Contained::Description * describe (
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  void move (
      CORBA::Container_ptr new_container,
      const char * new_name,
      const char * new_version,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  CORBA::DefinitionKind def_kind (
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  void destroy (
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

private:
  T *ptr_;
  PortableServer::POA_var poa_;
  CORBA::Boolean rel_;
  
  // copy and assignment are not allowed
  OperationDef_tie (const OperationDef_tie &);
  void operator= (const OperationDef_tie &);
};

#endif /* ACE_HAS_USING_KEYWORD */

class InterfaceDef;
typedef InterfaceDef *InterfaceDef_ptr;
// Forward Classes Declaration
class _TAO_InterfaceDef_ThruPOA_Proxy_Impl;
class _TAO_InterfaceDef_Strategized_Proxy_Broker;

class  InterfaceDef : public virtual Container, public virtual Contained, public virtual IDLType
{
protected:
  InterfaceDef (void);

public:
  InterfaceDef (const InterfaceDef& rhs);
  virtual ~InterfaceDef (void);


  virtual CORBA::Boolean _is_a (
      const char* logical_type_id,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    );

  virtual void* _downcast (
      const char* logical_type_id
    );

  static void _is_a_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    );

  static void _non_existent_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    );

  virtual void _dispatch (
      TAO_ServerRequest &_tao_req,
      void *_tao_context,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    );

  ::CORBA::InterfaceDef *_this (
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    );

  virtual const char* _interface_repository_id (void) const;

  virtual CORBA::InterfaceDefSeq * base_interfaces (
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    )) = 0;

  static void _get_base_interfaces_skel (
      TAO_ServerRequest &_tao_req, 
      void *_tao_obj, 
      void *_tao_context, 
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    );

  virtual void base_interfaces (
      const CORBA::InterfaceDefSeq & base_interfaces,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    )) = 0;

  static void _set_base_interfaces_skel (
      TAO_ServerRequest &_tao_req, 
      void *_tao_obj, 
      void *_tao_context, 
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    );

  virtual CORBA::Boolean is_a (
      const char * interface_id,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    )) = 0;

  static void is_a_skel (
      TAO_ServerRequest &_tao_req, 
      void *_tao_obj, 
      void *_tao_context, 
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    );

  virtual CORBA::InterfaceDef::FullInterfaceDescription * describe_interface (
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    )) = 0;

  static void describe_interface_skel (
      TAO_ServerRequest &_tao_req, 
      void *_tao_obj, 
      void *_tao_context, 
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    );

  virtual CORBA::AttributeDef_ptr create_attribute (
      const char * id,
      const char * name,
      const char * version,
      CORBA::IDLType_ptr type,
      CORBA::AttributeMode mode,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    )) = 0;

  static void create_attribute_skel (
      TAO_ServerRequest &_tao_req, 
      void *_tao_obj, 
      void *_tao_context, 
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    );

  virtual CORBA::OperationDef_ptr create_operation (
      const char * id,
      const char * name,
      const char * version,
      CORBA::IDLType_ptr result,
      CORBA::OperationMode mode,
      const CORBA::ParDescriptionSeq & params,
      const CORBA::ExceptionDefSeq & exceptions,
      const CORBA::ContextIdSeq & contexts,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    )) = 0;

  static void create_operation_skel (
      TAO_ServerRequest &_tao_req, 
      void *_tao_obj, 
      void *_tao_context, 
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    );

  static void lookup_skel (
      TAO_ServerRequest &req, 
      void *obj,
      void *context,
      CORBA::Environment &ACE_TRY_ENV =
        TAO_default_environment ()
    );

  static void contents_skel (
      TAO_ServerRequest &req, 
      void *obj,
      void *context,
      CORBA::Environment &ACE_TRY_ENV =
        TAO_default_environment ()
    );

  static void lookup_name_skel (
      TAO_ServerRequest &req, 
      void *obj,
      void *context,
      CORBA::Environment &ACE_TRY_ENV =
        TAO_default_environment ()
    );

  static void describe_contents_skel (
      TAO_ServerRequest &req, 
      void *obj,
      void *context,
      CORBA::Environment &ACE_TRY_ENV =
        TAO_default_environment ()
    );

  static void create_module_skel (
      TAO_ServerRequest &req, 
      void *obj,
      void *context,
      CORBA::Environment &ACE_TRY_ENV =
        TAO_default_environment ()
    );

  static void create_constant_skel (
      TAO_ServerRequest &req, 
      void *obj,
      void *context,
      CORBA::Environment &ACE_TRY_ENV =
        TAO_default_environment ()
    );

  static void create_struct_skel (
      TAO_ServerRequest &req, 
      void *obj,
      void *context,
      CORBA::Environment &ACE_TRY_ENV =
        TAO_default_environment ()
    );

  static void create_union_skel (
      TAO_ServerRequest &req, 
      void *obj,
      void *context,
      CORBA::Environment &ACE_TRY_ENV =
        TAO_default_environment ()
    );

  static void create_enum_skel (
      TAO_ServerRequest &req, 
      void *obj,
      void *context,
      CORBA::Environment &ACE_TRY_ENV =
        TAO_default_environment ()
    );

  static void create_alias_skel (
      TAO_ServerRequest &req, 
      void *obj,
      void *context,
      CORBA::Environment &ACE_TRY_ENV =
        TAO_default_environment ()
    );

  static void create_interface_skel (
      TAO_ServerRequest &req, 
      void *obj,
      void *context,
      CORBA::Environment &ACE_TRY_ENV =
        TAO_default_environment ()
    );

  static void create_value_skel (
      TAO_ServerRequest &req, 
      void *obj,
      void *context,
      CORBA::Environment &ACE_TRY_ENV =
        TAO_default_environment ()
    );

  static void create_value_box_skel (
      TAO_ServerRequest &req, 
      void *obj,
      void *context,
      CORBA::Environment &ACE_TRY_ENV =
        TAO_default_environment ()
    );

  static void create_exception_skel (
      TAO_ServerRequest &req, 
      void *obj,
      void *context,
      CORBA::Environment &ACE_TRY_ENV =
        TAO_default_environment ()
    );

  static void create_native_skel (
      TAO_ServerRequest &req, 
      void *obj,
      void *context,
      CORBA::Environment &ACE_TRY_ENV =
        TAO_default_environment ()
    );

  static void create_abstract_interface_skel (
      TAO_ServerRequest &req, 
      void *obj,
      void *context,
      CORBA::Environment &ACE_TRY_ENV =
        TAO_default_environment ()
    );

  static void create_local_interface_skel (
      TAO_ServerRequest &req, 
      void *obj,
      void *context,
      CORBA::Environment &ACE_TRY_ENV =
        TAO_default_environment ()
    );

  static void _get_id_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context,
      CORBA::Environment &ACE_TRY_ENV =
        TAO_default_environment ()
    );

  static void _set_id_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    );

  static void _get_name_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context,
      CORBA::Environment &ACE_TRY_ENV =
        TAO_default_environment ()
    );

  static void _set_name_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    );

  static void _get_version_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context,
      CORBA::Environment &ACE_TRY_ENV =
        TAO_default_environment ()
    );

  static void _set_version_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    );

  static void _get_defined_in_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context,
      CORBA::Environment &ACE_TRY_ENV =
        TAO_default_environment ()
    );

  static void _get_absolute_name_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context,
      CORBA::Environment &ACE_TRY_ENV =
        TAO_default_environment ()
    );

  static void _get_containing_repository_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context,
      CORBA::Environment &ACE_TRY_ENV =
        TAO_default_environment ()
    );

  static void describe_skel (
      TAO_ServerRequest &req, 
      void *obj,
      void *context,
      CORBA::Environment &ACE_TRY_ENV =
        TAO_default_environment ()
    );

  static void move_skel (
      TAO_ServerRequest &req, 
      void *obj,
      void *context,
      CORBA::Environment &ACE_TRY_ENV =
        TAO_default_environment ()
    );

  static void _get_type_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context,
      CORBA::Environment &ACE_TRY_ENV =
        TAO_default_environment ()
    );

  static void _get_def_kind_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context,
      CORBA::Environment &ACE_TRY_ENV =
        TAO_default_environment ()
    );

  static void destroy_skel (
      TAO_ServerRequest &req, 
      void *obj,
      void *context,
      CORBA::Environment &ACE_TRY_ENV =
        TAO_default_environment ()
    );
};


///////////////////////////////////////////////////////////////////////
//               Strategized Proxy Broker Declaration 
//

class  _TAO_InterfaceDef_Strategized_Proxy_Broker : public virtual ::_TAO_InterfaceDef_Proxy_Broker
{
public: 
  _TAO_InterfaceDef_Strategized_Proxy_Broker (void);
  
  virtual ~_TAO_InterfaceDef_Strategized_Proxy_Broker (void);
  
  virtual ::_TAO_InterfaceDef_Proxy_Impl &select_proxy (
    ::CORBA::InterfaceDef *object,
    CORBA_Environment &ACE_TRY_ENV = TAO_default_environment ()
  );

private:

// Helper methods that takes care to create the proxy
// as soon as their use is necessary.
  void create_proxy (
    int strategy,
    CORBA::Environment &ACE_TRY_ENV
  );

private:
  
  // Caches the proxy implementations. The proxy implementation
  // are totally stateless, and those can be shared by all the
  // instances of a given IDL interface type.
  ::_TAO_InterfaceDef_Proxy_Impl
   *proxy_cache_[TAO_Collocation_Strategies::CS_LAST];
  
  TAO_SYNCH_MUTEX mutex_;
// This funxtion is used to get an handle to the unique instance
// of the Strategized Proxy Broker that is available for a given
// interface.

public:
  static _TAO_InterfaceDef_Strategized_Proxy_Broker *the_TAO_InterfaceDef_Strategized_Proxy_Broker (void);
};


//
//            End Strategized Proxy Broker Declaration 
///////////////////////////////////////////////////////////////////////


///////////////////////////////////////////////////////////////////////
//                    ThruPOA  Impl. Declaration
//

class  _TAO_InterfaceDef_ThruPOA_Proxy_Impl : 
  public virtual ::_TAO_InterfaceDef_Proxy_Impl,
  public virtual TAO_ThruPOA_Object_Proxy_Impl,
  public virtual ::POA_CORBA::_TAO_Container_ThruPOA_Proxy_Impl, 
  public virtual ::POA_CORBA::_TAO_Contained_ThruPOA_Proxy_Impl, 
  public virtual ::POA_CORBA::_TAO_IDLType_ThruPOA_Proxy_Impl
  
{
public:
  _TAO_InterfaceDef_ThruPOA_Proxy_Impl (void);
  
  virtual ~_TAO_InterfaceDef_ThruPOA_Proxy_Impl (void) { }
  
    virtual CORBA::InterfaceDefSeq * base_interfaces (
      CORBA_Object *_collocated_tao_target_,
      CORBA::Environment &ACE_TRY_ENV
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  virtual void base_interfaces (
      CORBA_Object *_collocated_tao_target_,
      const CORBA::InterfaceDefSeq & base_interfaces,
      CORBA::Environment &ACE_TRY_ENV
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  virtual CORBA::Boolean is_a (
      CORBA_Object *_collocated_tao_target_,
      const char * interface_id,
      CORBA::Environment &ACE_TRY_ENV
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  virtual CORBA::InterfaceDef::FullInterfaceDescription * describe_interface (
      CORBA_Object *_collocated_tao_target_,
      CORBA::Environment &ACE_TRY_ENV
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  virtual CORBA::AttributeDef_ptr create_attribute (
      CORBA_Object *_collocated_tao_target_,
      const char * id,
      const char * name,
      const char * version,
      CORBA::IDLType_ptr type,
      CORBA::AttributeMode mode,
      CORBA::Environment &ACE_TRY_ENV
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  virtual CORBA::OperationDef_ptr create_operation (
      CORBA_Object *_collocated_tao_target_,
      const char * id,
      const char * name,
      const char * version,
      CORBA::IDLType_ptr result,
      CORBA::OperationMode mode,
      const CORBA::ParDescriptionSeq & params,
      const CORBA::ExceptionDefSeq & exceptions,
      const CORBA::ContextIdSeq & contexts,
      CORBA::Environment &ACE_TRY_ENV
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

};


//
//                ThruPOA  Proxy Impl. Declaration
///////////////////////////////////////////////////////////////////////


#if defined (ACE_HAS_USING_KEYWORD)
// TIE class: Refer to CORBA v2.2, Section 20.34.4
template <class T>
class  InterfaceDef_tie : public InterfaceDef
{
public:
  InterfaceDef_tie (T &t);
  // the T& ctor
  InterfaceDef_tie (T &t, PortableServer::POA_ptr poa);
  // ctor taking a POA
  InterfaceDef_tie (T *tp, CORBA::Boolean release=1);
  // ctor taking pointer and an ownership flag
  InterfaceDef_tie (T *tp, PortableServer::POA_ptr poa, CORBA::Boolean release=1);
  // ctor with T*, ownership flag and a POA
  ~InterfaceDef_tie (void);
  // dtor
  
  // TIE specific functions
  T *_tied_object (void);
  // return the underlying object
  void _tied_object (T &obj);
  // set the underlying object
  void _tied_object (T *obj, CORBA::Boolean release=1);
  // set the underlying object and the ownership flag
  CORBA::Boolean _is_owner (void);
  // do we own it
  void _is_owner (CORBA::Boolean b);
  // set the ownership
  
  // overridden ServantBase operations
  PortableServer::POA_ptr _default_POA (
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    );
  CORBA::InterfaceDefSeq * base_interfaces (
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  void base_interfaces (
      const CORBA::InterfaceDefSeq & base_interfaces,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  CORBA::Boolean is_a (
      const char * interface_id,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  CORBA::InterfaceDef::FullInterfaceDescription * describe_interface (
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  CORBA::AttributeDef_ptr create_attribute (
      const char * id,
      const char * name,
      const char * version,
      CORBA::IDLType_ptr type,
      CORBA::AttributeMode mode,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  CORBA::OperationDef_ptr create_operation (
      const char * id,
      const char * name,
      const char * version,
      CORBA::IDLType_ptr result,
      CORBA::OperationMode mode,
      const CORBA::ParDescriptionSeq & params,
      const CORBA::ExceptionDefSeq & exceptions,
      const CORBA::ContextIdSeq & contexts,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  CORBA::Contained_ptr lookup (
      const char * search_name,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  CORBA::ContainedSeq * contents (
      CORBA::DefinitionKind limit_type,
      CORBA::Boolean exclude_inherited,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  CORBA::ContainedSeq * lookup_name (
      const char * search_name,
      CORBA::Long levels_to_search,
      CORBA::DefinitionKind limit_type,
      CORBA::Boolean exclude_inherited,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  CORBA::Container::DescriptionSeq * describe_contents (
      CORBA::DefinitionKind limit_type,
      CORBA::Boolean exclude_inherited,
      CORBA::Long max_returned_objs,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  CORBA::ModuleDef_ptr create_module (
      const char * id,
      const char * name,
      const char * version,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  CORBA::ConstantDef_ptr create_constant (
      const char * id,
      const char * name,
      const char * version,
      CORBA::IDLType_ptr type,
      const CORBA::Any & value,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  CORBA::StructDef_ptr create_struct (
      const char * id,
      const char * name,
      const char * version,
      const CORBA::StructMemberSeq & members,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  CORBA::UnionDef_ptr create_union (
      const char * id,
      const char * name,
      const char * version,
      CORBA::IDLType_ptr discriminator_type,
      const CORBA::UnionMemberSeq & members,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  CORBA::EnumDef_ptr create_enum (
      const char * id,
      const char * name,
      const char * version,
      const CORBA::EnumMemberSeq & members,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  CORBA::AliasDef_ptr create_alias (
      const char * id,
      const char * name,
      const char * version,
      CORBA::IDLType_ptr original_type,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  CORBA::InterfaceDef_ptr create_interface (
      const char * id,
      const char * name,
      const char * version,
      const CORBA::InterfaceDefSeq & base_interfaces,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  CORBA::ValueDef_ptr create_value (
      const char * id,
      const char * name,
      const char * version,
      CORBA::Boolean is_custom,
      CORBA::Boolean is_abstract,
      CORBA::ValueDef_ptr base_value,
      CORBA::Boolean is_truncatable,
      const CORBA::ValueDefSeq & abstract_base_values,
      const CORBA::InterfaceDefSeq & supported_interfaces,
      const CORBA::InitializerSeq & initializers,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  CORBA::ValueBoxDef_ptr create_value_box (
      const char * id,
      const char * name,
      const char * version,
      CORBA::IDLType_ptr original_type_def,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  CORBA::ExceptionDef_ptr create_exception (
      const char * id,
      const char * name,
      const char * version,
      const CORBA::StructMemberSeq & members,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  CORBA::NativeDef_ptr create_native (
      const char * id,
      const char * name,
      const char * version,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  CORBA::AbstractInterfaceDef_ptr create_abstract_interface (
      const char * id,
      const char * name,
      const char * version,
      const CORBA::AbstractInterfaceDefSeq & base_interfaces,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  CORBA::LocalInterfaceDef_ptr create_local_interface (
      const char * id,
      const char * name,
      const char * version,
      const CORBA::InterfaceDefSeq & base_interfaces,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  char * id (
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  void id (
      const char * id,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  char * name (
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  void name (
      const char * name,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  char * version (
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  void version (
      const char * version,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  CORBA::Container_ptr defined_in (
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  char * absolute_name (
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  CORBA::Repository_ptr containing_repository (
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  CORBA::Contained::Description * describe (
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  void move (
      CORBA::Container_ptr new_container,
      const char * new_name,
      const char * new_version,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  CORBA::TypeCode_ptr type (
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  CORBA::DefinitionKind def_kind (
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  void destroy (
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

private:
  T *ptr_;
  PortableServer::POA_var poa_;
  CORBA::Boolean rel_;
  
  // copy and assignment are not allowed
  InterfaceDef_tie (const InterfaceDef_tie &);
  void operator= (const InterfaceDef_tie &);
};

#endif /* ACE_HAS_USING_KEYWORD */

class AbstractInterfaceDef;
typedef AbstractInterfaceDef *AbstractInterfaceDef_ptr;
// Forward Classes Declaration
class _TAO_AbstractInterfaceDef_ThruPOA_Proxy_Impl;
class _TAO_AbstractInterfaceDef_Strategized_Proxy_Broker;

class  AbstractInterfaceDef : public virtual InterfaceDef
{
protected:
  AbstractInterfaceDef (void);

public:
  AbstractInterfaceDef (const AbstractInterfaceDef& rhs);
  virtual ~AbstractInterfaceDef (void);


  virtual CORBA::Boolean _is_a (
      const char* logical_type_id,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    );

  virtual void* _downcast (
      const char* logical_type_id
    );

  static void _is_a_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    );

  static void _non_existent_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    );

  virtual void _dispatch (
      TAO_ServerRequest &_tao_req,
      void *_tao_context,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    );

  ::CORBA::AbstractInterfaceDef *_this (
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    );

  virtual const char* _interface_repository_id (void) const;

  static void _get_base_interfaces_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context,
      CORBA::Environment &ACE_TRY_ENV =
        TAO_default_environment ()
    );

  static void _set_base_interfaces_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    );

  static void is_a_skel (
      TAO_ServerRequest &req, 
      void *obj,
      void *context,
      CORBA::Environment &ACE_TRY_ENV =
        TAO_default_environment ()
    );

  static void describe_interface_skel (
      TAO_ServerRequest &req, 
      void *obj,
      void *context,
      CORBA::Environment &ACE_TRY_ENV =
        TAO_default_environment ()
    );

  static void create_attribute_skel (
      TAO_ServerRequest &req, 
      void *obj,
      void *context,
      CORBA::Environment &ACE_TRY_ENV =
        TAO_default_environment ()
    );

  static void create_operation_skel (
      TAO_ServerRequest &req, 
      void *obj,
      void *context,
      CORBA::Environment &ACE_TRY_ENV =
        TAO_default_environment ()
    );

  static void lookup_skel (
      TAO_ServerRequest &req, 
      void *obj,
      void *context,
      CORBA::Environment &ACE_TRY_ENV =
        TAO_default_environment ()
    );

  static void contents_skel (
      TAO_ServerRequest &req, 
      void *obj,
      void *context,
      CORBA::Environment &ACE_TRY_ENV =
        TAO_default_environment ()
    );

  static void lookup_name_skel (
      TAO_ServerRequest &req, 
      void *obj,
      void *context,
      CORBA::Environment &ACE_TRY_ENV =
        TAO_default_environment ()
    );

  static void describe_contents_skel (
      TAO_ServerRequest &req, 
      void *obj,
      void *context,
      CORBA::Environment &ACE_TRY_ENV =
        TAO_default_environment ()
    );

  static void create_module_skel (
      TAO_ServerRequest &req, 
      void *obj,
      void *context,
      CORBA::Environment &ACE_TRY_ENV =
        TAO_default_environment ()
    );

  static void create_constant_skel (
      TAO_ServerRequest &req, 
      void *obj,
      void *context,
      CORBA::Environment &ACE_TRY_ENV =
        TAO_default_environment ()
    );

  static void create_struct_skel (
      TAO_ServerRequest &req, 
      void *obj,
      void *context,
      CORBA::Environment &ACE_TRY_ENV =
        TAO_default_environment ()
    );

  static void create_union_skel (
      TAO_ServerRequest &req, 
      void *obj,
      void *context,
      CORBA::Environment &ACE_TRY_ENV =
        TAO_default_environment ()
    );

  static void create_enum_skel (
      TAO_ServerRequest &req, 
      void *obj,
      void *context,
      CORBA::Environment &ACE_TRY_ENV =
        TAO_default_environment ()
    );

  static void create_alias_skel (
      TAO_ServerRequest &req, 
      void *obj,
      void *context,
      CORBA::Environment &ACE_TRY_ENV =
        TAO_default_environment ()
    );

  static void create_interface_skel (
      TAO_ServerRequest &req, 
      void *obj,
      void *context,
      CORBA::Environment &ACE_TRY_ENV =
        TAO_default_environment ()
    );

  static void create_value_skel (
      TAO_ServerRequest &req, 
      void *obj,
      void *context,
      CORBA::Environment &ACE_TRY_ENV =
        TAO_default_environment ()
    );

  static void create_value_box_skel (
      TAO_ServerRequest &req, 
      void *obj,
      void *context,
      CORBA::Environment &ACE_TRY_ENV =
        TAO_default_environment ()
    );

  static void create_exception_skel (
      TAO_ServerRequest &req, 
      void *obj,
      void *context,
      CORBA::Environment &ACE_TRY_ENV =
        TAO_default_environment ()
    );

  static void create_native_skel (
      TAO_ServerRequest &req, 
      void *obj,
      void *context,
      CORBA::Environment &ACE_TRY_ENV =
        TAO_default_environment ()
    );

  static void create_abstract_interface_skel (
      TAO_ServerRequest &req, 
      void *obj,
      void *context,
      CORBA::Environment &ACE_TRY_ENV =
        TAO_default_environment ()
    );

  static void create_local_interface_skel (
      TAO_ServerRequest &req, 
      void *obj,
      void *context,
      CORBA::Environment &ACE_TRY_ENV =
        TAO_default_environment ()
    );

  static void _get_id_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context,
      CORBA::Environment &ACE_TRY_ENV =
        TAO_default_environment ()
    );

  static void _set_id_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    );

  static void _get_name_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context,
      CORBA::Environment &ACE_TRY_ENV =
        TAO_default_environment ()
    );

  static void _set_name_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    );

  static void _get_version_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context,
      CORBA::Environment &ACE_TRY_ENV =
        TAO_default_environment ()
    );

  static void _set_version_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    );

  static void _get_defined_in_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context,
      CORBA::Environment &ACE_TRY_ENV =
        TAO_default_environment ()
    );

  static void _get_absolute_name_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context,
      CORBA::Environment &ACE_TRY_ENV =
        TAO_default_environment ()
    );

  static void _get_containing_repository_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context,
      CORBA::Environment &ACE_TRY_ENV =
        TAO_default_environment ()
    );

  static void describe_skel (
      TAO_ServerRequest &req, 
      void *obj,
      void *context,
      CORBA::Environment &ACE_TRY_ENV =
        TAO_default_environment ()
    );

  static void move_skel (
      TAO_ServerRequest &req, 
      void *obj,
      void *context,
      CORBA::Environment &ACE_TRY_ENV =
        TAO_default_environment ()
    );

  static void _get_type_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context,
      CORBA::Environment &ACE_TRY_ENV =
        TAO_default_environment ()
    );

  static void _get_def_kind_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context,
      CORBA::Environment &ACE_TRY_ENV =
        TAO_default_environment ()
    );

  static void destroy_skel (
      TAO_ServerRequest &req, 
      void *obj,
      void *context,
      CORBA::Environment &ACE_TRY_ENV =
        TAO_default_environment ()
    );
};


///////////////////////////////////////////////////////////////////////
//               Strategized Proxy Broker Declaration 
//

class  _TAO_AbstractInterfaceDef_Strategized_Proxy_Broker : public virtual ::_TAO_AbstractInterfaceDef_Proxy_Broker
{
public: 
  _TAO_AbstractInterfaceDef_Strategized_Proxy_Broker (void);
  
  virtual ~_TAO_AbstractInterfaceDef_Strategized_Proxy_Broker (void);
  
  virtual ::_TAO_AbstractInterfaceDef_Proxy_Impl &select_proxy (
    ::CORBA::AbstractInterfaceDef *object,
    CORBA_Environment &ACE_TRY_ENV = TAO_default_environment ()
  );

private:

// Helper methods that takes care to create the proxy
// as soon as their use is necessary.
  void create_proxy (
    int strategy,
    CORBA::Environment &ACE_TRY_ENV
  );

private:
  
  // Caches the proxy implementations. The proxy implementation
  // are totally stateless, and those can be shared by all the
  // instances of a given IDL interface type.
  ::_TAO_AbstractInterfaceDef_Proxy_Impl
   *proxy_cache_[TAO_Collocation_Strategies::CS_LAST];
  
  TAO_SYNCH_MUTEX mutex_;
// This funxtion is used to get an handle to the unique instance
// of the Strategized Proxy Broker that is available for a given
// interface.

public:
  static _TAO_AbstractInterfaceDef_Strategized_Proxy_Broker *the_TAO_AbstractInterfaceDef_Strategized_Proxy_Broker (void);
};


//
//            End Strategized Proxy Broker Declaration 
///////////////////////////////////////////////////////////////////////


///////////////////////////////////////////////////////////////////////
//                    ThruPOA  Impl. Declaration
//

class  _TAO_AbstractInterfaceDef_ThruPOA_Proxy_Impl : 
  public virtual ::_TAO_AbstractInterfaceDef_Proxy_Impl,
  public virtual TAO_ThruPOA_Object_Proxy_Impl,
  public virtual ::POA_CORBA::_TAO_InterfaceDef_ThruPOA_Proxy_Impl
  
{
public:
  _TAO_AbstractInterfaceDef_ThruPOA_Proxy_Impl (void);
  
  virtual ~_TAO_AbstractInterfaceDef_ThruPOA_Proxy_Impl (void) { }
  
  };


//
//                ThruPOA  Proxy Impl. Declaration
///////////////////////////////////////////////////////////////////////


#if defined (ACE_HAS_USING_KEYWORD)
// TIE class: Refer to CORBA v2.2, Section 20.34.4
template <class T>
class  AbstractInterfaceDef_tie : public AbstractInterfaceDef
{
public:
  AbstractInterfaceDef_tie (T &t);
  // the T& ctor
  AbstractInterfaceDef_tie (T &t, PortableServer::POA_ptr poa);
  // ctor taking a POA
  AbstractInterfaceDef_tie (T *tp, CORBA::Boolean release=1);
  // ctor taking pointer and an ownership flag
  AbstractInterfaceDef_tie (T *tp, PortableServer::POA_ptr poa, CORBA::Boolean release=1);
  // ctor with T*, ownership flag and a POA
  ~AbstractInterfaceDef_tie (void);
  // dtor
  
  // TIE specific functions
  T *_tied_object (void);
  // return the underlying object
  void _tied_object (T &obj);
  // set the underlying object
  void _tied_object (T *obj, CORBA::Boolean release=1);
  // set the underlying object and the ownership flag
  CORBA::Boolean _is_owner (void);
  // do we own it
  void _is_owner (CORBA::Boolean b);
  // set the ownership
  
  // overridden ServantBase operations
  PortableServer::POA_ptr _default_POA (
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    );
  CORBA::InterfaceDefSeq * base_interfaces (
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  void base_interfaces (
      const CORBA::InterfaceDefSeq & base_interfaces,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  CORBA::Boolean is_a (
      const char * interface_id,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  CORBA::InterfaceDef::FullInterfaceDescription * describe_interface (
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  CORBA::AttributeDef_ptr create_attribute (
      const char * id,
      const char * name,
      const char * version,
      CORBA::IDLType_ptr type,
      CORBA::AttributeMode mode,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  CORBA::OperationDef_ptr create_operation (
      const char * id,
      const char * name,
      const char * version,
      CORBA::IDLType_ptr result,
      CORBA::OperationMode mode,
      const CORBA::ParDescriptionSeq & params,
      const CORBA::ExceptionDefSeq & exceptions,
      const CORBA::ContextIdSeq & contexts,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  CORBA::Contained_ptr lookup (
      const char * search_name,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  CORBA::ContainedSeq * contents (
      CORBA::DefinitionKind limit_type,
      CORBA::Boolean exclude_inherited,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  CORBA::ContainedSeq * lookup_name (
      const char * search_name,
      CORBA::Long levels_to_search,
      CORBA::DefinitionKind limit_type,
      CORBA::Boolean exclude_inherited,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  CORBA::Container::DescriptionSeq * describe_contents (
      CORBA::DefinitionKind limit_type,
      CORBA::Boolean exclude_inherited,
      CORBA::Long max_returned_objs,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  CORBA::ModuleDef_ptr create_module (
      const char * id,
      const char * name,
      const char * version,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  CORBA::ConstantDef_ptr create_constant (
      const char * id,
      const char * name,
      const char * version,
      CORBA::IDLType_ptr type,
      const CORBA::Any & value,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  CORBA::StructDef_ptr create_struct (
      const char * id,
      const char * name,
      const char * version,
      const CORBA::StructMemberSeq & members,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  CORBA::UnionDef_ptr create_union (
      const char * id,
      const char * name,
      const char * version,
      CORBA::IDLType_ptr discriminator_type,
      const CORBA::UnionMemberSeq & members,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  CORBA::EnumDef_ptr create_enum (
      const char * id,
      const char * name,
      const char * version,
      const CORBA::EnumMemberSeq & members,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  CORBA::AliasDef_ptr create_alias (
      const char * id,
      const char * name,
      const char * version,
      CORBA::IDLType_ptr original_type,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  CORBA::InterfaceDef_ptr create_interface (
      const char * id,
      const char * name,
      const char * version,
      const CORBA::InterfaceDefSeq & base_interfaces,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  CORBA::ValueDef_ptr create_value (
      const char * id,
      const char * name,
      const char * version,
      CORBA::Boolean is_custom,
      CORBA::Boolean is_abstract,
      CORBA::ValueDef_ptr base_value,
      CORBA::Boolean is_truncatable,
      const CORBA::ValueDefSeq & abstract_base_values,
      const CORBA::InterfaceDefSeq & supported_interfaces,
      const CORBA::InitializerSeq & initializers,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  CORBA::ValueBoxDef_ptr create_value_box (
      const char * id,
      const char * name,
      const char * version,
      CORBA::IDLType_ptr original_type_def,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  CORBA::ExceptionDef_ptr create_exception (
      const char * id,
      const char * name,
      const char * version,
      const CORBA::StructMemberSeq & members,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  CORBA::NativeDef_ptr create_native (
      const char * id,
      const char * name,
      const char * version,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  CORBA::AbstractInterfaceDef_ptr create_abstract_interface (
      const char * id,
      const char * name,
      const char * version,
      const CORBA::AbstractInterfaceDefSeq & base_interfaces,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  CORBA::LocalInterfaceDef_ptr create_local_interface (
      const char * id,
      const char * name,
      const char * version,
      const CORBA::InterfaceDefSeq & base_interfaces,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  char * id (
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  void id (
      const char * id,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  char * name (
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  void name (
      const char * name,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  char * version (
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  void version (
      const char * version,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  CORBA::Container_ptr defined_in (
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  char * absolute_name (
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  CORBA::Repository_ptr containing_repository (
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  CORBA::Contained::Description * describe (
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  void move (
      CORBA::Container_ptr new_container,
      const char * new_name,
      const char * new_version,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  CORBA::TypeCode_ptr type (
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  CORBA::DefinitionKind def_kind (
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  void destroy (
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

private:
  T *ptr_;
  PortableServer::POA_var poa_;
  CORBA::Boolean rel_;
  
  // copy and assignment are not allowed
  AbstractInterfaceDef_tie (const AbstractInterfaceDef_tie &);
  void operator= (const AbstractInterfaceDef_tie &);
};

#endif /* ACE_HAS_USING_KEYWORD */

class LocalInterfaceDef;
typedef LocalInterfaceDef *LocalInterfaceDef_ptr;
// Forward Classes Declaration
class _TAO_LocalInterfaceDef_ThruPOA_Proxy_Impl;
class _TAO_LocalInterfaceDef_Strategized_Proxy_Broker;

class  LocalInterfaceDef : public virtual InterfaceDef
{
protected:
  LocalInterfaceDef (void);

public:
  LocalInterfaceDef (const LocalInterfaceDef& rhs);
  virtual ~LocalInterfaceDef (void);


  virtual CORBA::Boolean _is_a (
      const char* logical_type_id,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    );

  virtual void* _downcast (
      const char* logical_type_id
    );

  static void _is_a_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    );

  static void _non_existent_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    );

  virtual void _dispatch (
      TAO_ServerRequest &_tao_req,
      void *_tao_context,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    );

  ::CORBA::LocalInterfaceDef *_this (
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    );

  virtual const char* _interface_repository_id (void) const;

  static void _get_base_interfaces_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context,
      CORBA::Environment &ACE_TRY_ENV =
        TAO_default_environment ()
    );

  static void _set_base_interfaces_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    );

  static void is_a_skel (
      TAO_ServerRequest &req, 
      void *obj,
      void *context,
      CORBA::Environment &ACE_TRY_ENV =
        TAO_default_environment ()
    );

  static void describe_interface_skel (
      TAO_ServerRequest &req, 
      void *obj,
      void *context,
      CORBA::Environment &ACE_TRY_ENV =
        TAO_default_environment ()
    );

  static void create_attribute_skel (
      TAO_ServerRequest &req, 
      void *obj,
      void *context,
      CORBA::Environment &ACE_TRY_ENV =
        TAO_default_environment ()
    );

  static void create_operation_skel (
      TAO_ServerRequest &req, 
      void *obj,
      void *context,
      CORBA::Environment &ACE_TRY_ENV =
        TAO_default_environment ()
    );

  static void lookup_skel (
      TAO_ServerRequest &req, 
      void *obj,
      void *context,
      CORBA::Environment &ACE_TRY_ENV =
        TAO_default_environment ()
    );

  static void contents_skel (
      TAO_ServerRequest &req, 
      void *obj,
      void *context,
      CORBA::Environment &ACE_TRY_ENV =
        TAO_default_environment ()
    );

  static void lookup_name_skel (
      TAO_ServerRequest &req, 
      void *obj,
      void *context,
      CORBA::Environment &ACE_TRY_ENV =
        TAO_default_environment ()
    );

  static void describe_contents_skel (
      TAO_ServerRequest &req, 
      void *obj,
      void *context,
      CORBA::Environment &ACE_TRY_ENV =
        TAO_default_environment ()
    );

  static void create_module_skel (
      TAO_ServerRequest &req, 
      void *obj,
      void *context,
      CORBA::Environment &ACE_TRY_ENV =
        TAO_default_environment ()
    );

  static void create_constant_skel (
      TAO_ServerRequest &req, 
      void *obj,
      void *context,
      CORBA::Environment &ACE_TRY_ENV =
        TAO_default_environment ()
    );

  static void create_struct_skel (
      TAO_ServerRequest &req, 
      void *obj,
      void *context,
      CORBA::Environment &ACE_TRY_ENV =
        TAO_default_environment ()
    );

  static void create_union_skel (
      TAO_ServerRequest &req, 
      void *obj,
      void *context,
      CORBA::Environment &ACE_TRY_ENV =
        TAO_default_environment ()
    );

  static void create_enum_skel (
      TAO_ServerRequest &req, 
      void *obj,
      void *context,
      CORBA::Environment &ACE_TRY_ENV =
        TAO_default_environment ()
    );

  static void create_alias_skel (
      TAO_ServerRequest &req, 
      void *obj,
      void *context,
      CORBA::Environment &ACE_TRY_ENV =
        TAO_default_environment ()
    );

  static void create_interface_skel (
      TAO_ServerRequest &req, 
      void *obj,
      void *context,
      CORBA::Environment &ACE_TRY_ENV =
        TAO_default_environment ()
    );

  static void create_value_skel (
      TAO_ServerRequest &req, 
      void *obj,
      void *context,
      CORBA::Environment &ACE_TRY_ENV =
        TAO_default_environment ()
    );

  static void create_value_box_skel (
      TAO_ServerRequest &req, 
      void *obj,
      void *context,
      CORBA::Environment &ACE_TRY_ENV =
        TAO_default_environment ()
    );

  static void create_exception_skel (
      TAO_ServerRequest &req, 
      void *obj,
      void *context,
      CORBA::Environment &ACE_TRY_ENV =
        TAO_default_environment ()
    );

  static void create_native_skel (
      TAO_ServerRequest &req, 
      void *obj,
      void *context,
      CORBA::Environment &ACE_TRY_ENV =
        TAO_default_environment ()
    );

  static void create_abstract_interface_skel (
      TAO_ServerRequest &req, 
      void *obj,
      void *context,
      CORBA::Environment &ACE_TRY_ENV =
        TAO_default_environment ()
    );

  static void create_local_interface_skel (
      TAO_ServerRequest &req, 
      void *obj,
      void *context,
      CORBA::Environment &ACE_TRY_ENV =
        TAO_default_environment ()
    );

  static void _get_id_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context,
      CORBA::Environment &ACE_TRY_ENV =
        TAO_default_environment ()
    );

  static void _set_id_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    );

  static void _get_name_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context,
      CORBA::Environment &ACE_TRY_ENV =
        TAO_default_environment ()
    );

  static void _set_name_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    );

  static void _get_version_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context,
      CORBA::Environment &ACE_TRY_ENV =
        TAO_default_environment ()
    );

  static void _set_version_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    );

  static void _get_defined_in_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context,
      CORBA::Environment &ACE_TRY_ENV =
        TAO_default_environment ()
    );

  static void _get_absolute_name_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context,
      CORBA::Environment &ACE_TRY_ENV =
        TAO_default_environment ()
    );

  static void _get_containing_repository_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context,
      CORBA::Environment &ACE_TRY_ENV =
        TAO_default_environment ()
    );

  static void describe_skel (
      TAO_ServerRequest &req, 
      void *obj,
      void *context,
      CORBA::Environment &ACE_TRY_ENV =
        TAO_default_environment ()
    );

  static void move_skel (
      TAO_ServerRequest &req, 
      void *obj,
      void *context,
      CORBA::Environment &ACE_TRY_ENV =
        TAO_default_environment ()
    );

  static void _get_type_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context,
      CORBA::Environment &ACE_TRY_ENV =
        TAO_default_environment ()
    );

  static void _get_def_kind_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context,
      CORBA::Environment &ACE_TRY_ENV =
        TAO_default_environment ()
    );

  static void destroy_skel (
      TAO_ServerRequest &req, 
      void *obj,
      void *context,
      CORBA::Environment &ACE_TRY_ENV =
        TAO_default_environment ()
    );
};


///////////////////////////////////////////////////////////////////////
//               Strategized Proxy Broker Declaration 
//

class  _TAO_LocalInterfaceDef_Strategized_Proxy_Broker : public virtual ::_TAO_LocalInterfaceDef_Proxy_Broker
{
public: 
  _TAO_LocalInterfaceDef_Strategized_Proxy_Broker (void);
  
  virtual ~_TAO_LocalInterfaceDef_Strategized_Proxy_Broker (void);
  
  virtual ::_TAO_LocalInterfaceDef_Proxy_Impl &select_proxy (
    ::CORBA::LocalInterfaceDef *object,
    CORBA_Environment &ACE_TRY_ENV = TAO_default_environment ()
  );

private:

// Helper methods that takes care to create the proxy
// as soon as their use is necessary.
  void create_proxy (
    int strategy,
    CORBA::Environment &ACE_TRY_ENV
  );

private:
  
  // Caches the proxy implementations. The proxy implementation
  // are totally stateless, and those can be shared by all the
  // instances of a given IDL interface type.
  ::_TAO_LocalInterfaceDef_Proxy_Impl
   *proxy_cache_[TAO_Collocation_Strategies::CS_LAST];
  
  TAO_SYNCH_MUTEX mutex_;
// This funxtion is used to get an handle to the unique instance
// of the Strategized Proxy Broker that is available for a given
// interface.

public:
  static _TAO_LocalInterfaceDef_Strategized_Proxy_Broker *the_TAO_LocalInterfaceDef_Strategized_Proxy_Broker (void);
};


//
//            End Strategized Proxy Broker Declaration 
///////////////////////////////////////////////////////////////////////


///////////////////////////////////////////////////////////////////////
//                    ThruPOA  Impl. Declaration
//

class  _TAO_LocalInterfaceDef_ThruPOA_Proxy_Impl : 
  public virtual ::_TAO_LocalInterfaceDef_Proxy_Impl,
  public virtual TAO_ThruPOA_Object_Proxy_Impl,
  public virtual ::POA_CORBA::_TAO_InterfaceDef_ThruPOA_Proxy_Impl
  
{
public:
  _TAO_LocalInterfaceDef_ThruPOA_Proxy_Impl (void);
  
  virtual ~_TAO_LocalInterfaceDef_ThruPOA_Proxy_Impl (void) { }
  
  };


//
//                ThruPOA  Proxy Impl. Declaration
///////////////////////////////////////////////////////////////////////


#if defined (ACE_HAS_USING_KEYWORD)
// TIE class: Refer to CORBA v2.2, Section 20.34.4
template <class T>
class  LocalInterfaceDef_tie : public LocalInterfaceDef
{
public:
  LocalInterfaceDef_tie (T &t);
  // the T& ctor
  LocalInterfaceDef_tie (T &t, PortableServer::POA_ptr poa);
  // ctor taking a POA
  LocalInterfaceDef_tie (T *tp, CORBA::Boolean release=1);
  // ctor taking pointer and an ownership flag
  LocalInterfaceDef_tie (T *tp, PortableServer::POA_ptr poa, CORBA::Boolean release=1);
  // ctor with T*, ownership flag and a POA
  ~LocalInterfaceDef_tie (void);
  // dtor
  
  // TIE specific functions
  T *_tied_object (void);
  // return the underlying object
  void _tied_object (T &obj);
  // set the underlying object
  void _tied_object (T *obj, CORBA::Boolean release=1);
  // set the underlying object and the ownership flag
  CORBA::Boolean _is_owner (void);
  // do we own it
  void _is_owner (CORBA::Boolean b);
  // set the ownership
  
  // overridden ServantBase operations
  PortableServer::POA_ptr _default_POA (
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    );
  CORBA::InterfaceDefSeq * base_interfaces (
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  void base_interfaces (
      const CORBA::InterfaceDefSeq & base_interfaces,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  CORBA::Boolean is_a (
      const char * interface_id,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  CORBA::InterfaceDef::FullInterfaceDescription * describe_interface (
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  CORBA::AttributeDef_ptr create_attribute (
      const char * id,
      const char * name,
      const char * version,
      CORBA::IDLType_ptr type,
      CORBA::AttributeMode mode,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  CORBA::OperationDef_ptr create_operation (
      const char * id,
      const char * name,
      const char * version,
      CORBA::IDLType_ptr result,
      CORBA::OperationMode mode,
      const CORBA::ParDescriptionSeq & params,
      const CORBA::ExceptionDefSeq & exceptions,
      const CORBA::ContextIdSeq & contexts,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  CORBA::Contained_ptr lookup (
      const char * search_name,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  CORBA::ContainedSeq * contents (
      CORBA::DefinitionKind limit_type,
      CORBA::Boolean exclude_inherited,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  CORBA::ContainedSeq * lookup_name (
      const char * search_name,
      CORBA::Long levels_to_search,
      CORBA::DefinitionKind limit_type,
      CORBA::Boolean exclude_inherited,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  CORBA::Container::DescriptionSeq * describe_contents (
      CORBA::DefinitionKind limit_type,
      CORBA::Boolean exclude_inherited,
      CORBA::Long max_returned_objs,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  CORBA::ModuleDef_ptr create_module (
      const char * id,
      const char * name,
      const char * version,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  CORBA::ConstantDef_ptr create_constant (
      const char * id,
      const char * name,
      const char * version,
      CORBA::IDLType_ptr type,
      const CORBA::Any & value,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  CORBA::StructDef_ptr create_struct (
      const char * id,
      const char * name,
      const char * version,
      const CORBA::StructMemberSeq & members,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  CORBA::UnionDef_ptr create_union (
      const char * id,
      const char * name,
      const char * version,
      CORBA::IDLType_ptr discriminator_type,
      const CORBA::UnionMemberSeq & members,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  CORBA::EnumDef_ptr create_enum (
      const char * id,
      const char * name,
      const char * version,
      const CORBA::EnumMemberSeq & members,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  CORBA::AliasDef_ptr create_alias (
      const char * id,
      const char * name,
      const char * version,
      CORBA::IDLType_ptr original_type,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  CORBA::InterfaceDef_ptr create_interface (
      const char * id,
      const char * name,
      const char * version,
      const CORBA::InterfaceDefSeq & base_interfaces,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  CORBA::ValueDef_ptr create_value (
      const char * id,
      const char * name,
      const char * version,
      CORBA::Boolean is_custom,
      CORBA::Boolean is_abstract,
      CORBA::ValueDef_ptr base_value,
      CORBA::Boolean is_truncatable,
      const CORBA::ValueDefSeq & abstract_base_values,
      const CORBA::InterfaceDefSeq & supported_interfaces,
      const CORBA::InitializerSeq & initializers,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  CORBA::ValueBoxDef_ptr create_value_box (
      const char * id,
      const char * name,
      const char * version,
      CORBA::IDLType_ptr original_type_def,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  CORBA::ExceptionDef_ptr create_exception (
      const char * id,
      const char * name,
      const char * version,
      const CORBA::StructMemberSeq & members,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  CORBA::NativeDef_ptr create_native (
      const char * id,
      const char * name,
      const char * version,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  CORBA::AbstractInterfaceDef_ptr create_abstract_interface (
      const char * id,
      const char * name,
      const char * version,
      const CORBA::AbstractInterfaceDefSeq & base_interfaces,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  CORBA::LocalInterfaceDef_ptr create_local_interface (
      const char * id,
      const char * name,
      const char * version,
      const CORBA::InterfaceDefSeq & base_interfaces,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  char * id (
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  void id (
      const char * id,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  char * name (
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  void name (
      const char * name,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  char * version (
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  void version (
      const char * version,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  CORBA::Container_ptr defined_in (
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  char * absolute_name (
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  CORBA::Repository_ptr containing_repository (
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  CORBA::Contained::Description * describe (
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  void move (
      CORBA::Container_ptr new_container,
      const char * new_name,
      const char * new_version,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  CORBA::TypeCode_ptr type (
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  CORBA::DefinitionKind def_kind (
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  void destroy (
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

private:
  T *ptr_;
  PortableServer::POA_var poa_;
  CORBA::Boolean rel_;
  
  // copy and assignment are not allowed
  LocalInterfaceDef_tie (const LocalInterfaceDef_tie &);
  void operator= (const LocalInterfaceDef_tie &);
};

#endif /* ACE_HAS_USING_KEYWORD */

}
TAO_NAMESPACE_CLOSE

#include "IFR_BasicS_T.h"

#if defined (__ACE_INLINE__)
#include "IFR_BasicS.i"
#endif /* defined INLINE */

#if defined(_MSC_VER) && (_MSC_VER >= 1200)
#pragma warning(pop)
#endif /* _MSC_VER */

#if defined (__BORLANDC__)
#pragma option pop
#endif /* __BORLANDC__ */

#include "ace/post.h"
#endif /* ifndef */
