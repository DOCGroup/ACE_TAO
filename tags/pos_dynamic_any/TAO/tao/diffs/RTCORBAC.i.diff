--- orig/RTCORBAC.i	Sat May 20 22:29:17 2000
+++ RTCORBAC.i	Fri Aug 18 20:23:55 2000
@@ -1,4 +1,4 @@
-/* -*- C++ -*- $Id$ */
+/* -*- C++ -*- $Id$ */
 
 // ******  Code generated by the The ACE ORB (TAO) IDL Compiler *******
 // TAO and the TAO IDL Compiler have been developed by the Center for
@@ -93,13 +93,13 @@
 }
 
 ACE_INLINE
-RTCORBA::ThreadpoolLane_var::operator ::RTCORBA::ThreadpoolLane &() // cast 
+RTCORBA::ThreadpoolLane_var::operator ::RTCORBA::ThreadpoolLane &() // cast
 {
   return *this->ptr_;
 }
 
 ACE_INLINE
-RTCORBA::ThreadpoolLane_var::operator ::RTCORBA::ThreadpoolLane &() const // cast 
+RTCORBA::ThreadpoolLane_var::operator ::RTCORBA::ThreadpoolLane &() const // cast
 {
   return *this->ptr_;
 }
@@ -116,7 +116,7 @@
   return *this->ptr_;
 }
 
-// mapping for fixed size 
+// mapping for fixed size
 ACE_INLINE ::RTCORBA::ThreadpoolLane &
 RTCORBA::ThreadpoolLane_var::out (void)
 {
@@ -137,7 +137,7 @@
 
 
 #if !defined (TAO_USE_SEQUENCE_TEMPLATES)
-  
+
 #if !defined (__TAO_UNBOUNDED_SEQUENCE_RTCORBA_THREADPOOLLANES_CI_)
 #define __TAO_UNBOUNDED_SEQUENCE_RTCORBA_THREADPOOLLANES_CI_
 
@@ -150,24 +150,24 @@
     ACE_NEW_RETURN (retval, RTCORBA::ThreadpoolLane[size], 0);
     return retval;
   }
-  
+
   ACE_INLINE void RTCORBA::_TAO_Unbounded_Sequence_RTCORBA_ThreadpoolLanes::freebuf (RTCORBA::ThreadpoolLane *buffer)
   // Free the sequence.
   {
     delete [] buffer;
   }
-  
+
   ACE_INLINE
   RTCORBA::_TAO_Unbounded_Sequence_RTCORBA_ThreadpoolLanes::_TAO_Unbounded_Sequence_RTCORBA_ThreadpoolLanes (void) // Default constructor.
   {
   }
-  
+
   ACE_INLINE
   RTCORBA::_TAO_Unbounded_Sequence_RTCORBA_ThreadpoolLanes::_TAO_Unbounded_Sequence_RTCORBA_ThreadpoolLanes (CORBA::ULong maximum) // Constructor using a maximum length value.
     : TAO_Unbounded_Base_Sequence (maximum, _TAO_Unbounded_Sequence_RTCORBA_ThreadpoolLanes::allocbuf (maximum))
   {
   }
-  
+
   ACE_INLINE
   RTCORBA::_TAO_Unbounded_Sequence_RTCORBA_ThreadpoolLanes::_TAO_Unbounded_Sequence_RTCORBA_ThreadpoolLanes (CORBA::ULong maximum,
     CORBA::ULong length,
@@ -176,7 +176,7 @@
   : TAO_Unbounded_Base_Sequence (maximum, length, data, release)
   {
   }
-  
+
   ACE_INLINE
   RTCORBA::_TAO_Unbounded_Sequence_RTCORBA_ThreadpoolLanes::_TAO_Unbounded_Sequence_RTCORBA_ThreadpoolLanes (const _TAO_Unbounded_Sequence_RTCORBA_ThreadpoolLanes &rhs)
   // Copy constructor.
@@ -186,10 +186,10 @@
     {
       RTCORBA::ThreadpoolLane *tmp1 = _TAO_Unbounded_Sequence_RTCORBA_ThreadpoolLanes::allocbuf (this->maximum_);
       RTCORBA::ThreadpoolLane * const tmp2 = ACE_reinterpret_cast (RTCORBA::ThreadpoolLane * ACE_CAST_CONST, rhs.buffer_);
-      
+
       for (CORBA::ULong i = 0; i < this->length_; ++i)
         tmp1[i] = tmp2[i];
-      
+
       this->buffer_ = tmp1;
     }
     else
@@ -197,14 +197,14 @@
       this->buffer_ = 0;
     }
   }
-  
+
   ACE_INLINE RTCORBA::_TAO_Unbounded_Sequence_RTCORBA_ThreadpoolLanes &
   RTCORBA::_TAO_Unbounded_Sequence_RTCORBA_ThreadpoolLanes::operator= (const _TAO_Unbounded_Sequence_RTCORBA_ThreadpoolLanes &rhs)
   // Assignment operator.
   {
     if (this == &rhs)
       return *this;
-    
+
     if (this->release_)
     {
       if (this->maximum_ < rhs.maximum_)
@@ -217,18 +217,18 @@
     }
     else
       this->buffer_ = _TAO_Unbounded_Sequence_RTCORBA_ThreadpoolLanes::allocbuf (rhs.maximum_);
-    
+
     TAO_Unbounded_Base_Sequence::operator= (rhs);
-    
+
     RTCORBA::ThreadpoolLane *tmp1 = ACE_reinterpret_cast (RTCORBA::ThreadpoolLane *, this->buffer_);
     RTCORBA::ThreadpoolLane * const tmp2 = ACE_reinterpret_cast (RTCORBA::ThreadpoolLane * ACE_CAST_CONST, rhs.buffer_);
-    
+
     for (CORBA::ULong i = 0; i < this->length_; ++i)
       tmp1[i] = tmp2[i];
-    
+
     return *this;
   }
-  
+
   // = Accessors.
   ACE_INLINE RTCORBA::ThreadpoolLane &
   RTCORBA::_TAO_Unbounded_Sequence_RTCORBA_ThreadpoolLanes::operator[] (CORBA::ULong i)
@@ -238,7 +238,7 @@
     RTCORBA::ThreadpoolLane* tmp = ACE_reinterpret_cast(RTCORBA::ThreadpoolLane*,this->buffer_);
     return tmp[i];
   }
-  
+
   ACE_INLINE const RTCORBA::ThreadpoolLane &
   RTCORBA::_TAO_Unbounded_Sequence_RTCORBA_ThreadpoolLanes::operator[] (CORBA::ULong i) const
   // operator []
@@ -247,9 +247,9 @@
     RTCORBA::ThreadpoolLane * const tmp = ACE_reinterpret_cast (RTCORBA::ThreadpoolLane* ACE_CAST_CONST, this->buffer_);
     return tmp[i];
   }
-  
+
   // Implement the TAO_Base_Sequence methods (see Sequence.h)
-  
+
   ACE_INLINE RTCORBA::ThreadpoolLane *
   RTCORBA::_TAO_Unbounded_Sequence_RTCORBA_ThreadpoolLanes::get_buffer (CORBA::Boolean orphan)
   {
@@ -261,6 +261,7 @@
       {
         result = _TAO_Unbounded_Sequence_RTCORBA_ThreadpoolLanes::allocbuf (this->length_);
         this->buffer_ = result;
+	this->release_ = 1;
       }
       else
       {
@@ -282,13 +283,13 @@
     }
     return result;
   }
-  
+
   ACE_INLINE const RTCORBA::ThreadpoolLane *
   RTCORBA::_TAO_Unbounded_Sequence_RTCORBA_ThreadpoolLanes::get_buffer (void) const
   {
     return ACE_reinterpret_cast(const RTCORBA::ThreadpoolLane * ACE_CAST_CONST, this->buffer_);
   }
-  
+
   ACE_INLINE void
   RTCORBA::_TAO_Unbounded_Sequence_RTCORBA_ThreadpoolLanes::replace (CORBA::ULong max,
   CORBA::ULong length,
@@ -305,11 +306,11 @@
     this->buffer_ = data;
     this->release_ = release;
   }
-  
+
 #endif /* end #if !defined */
 
 
-#endif /* !TAO_USE_SEQUENCE_TEMPLATES */ 
+#endif /* !TAO_USE_SEQUENCE_TEMPLATES */
 
 #if !defined (_RTCORBA_THREADPOOLLANES_CI_)
 #define _RTCORBA_THREADPOOLLANES_CI_
@@ -393,20 +394,20 @@
   return this->ptr_;
 }
 
-ACE_INLINE 
+ACE_INLINE
 RTCORBA::ThreadpoolLanes_var::operator const ::RTCORBA::ThreadpoolLanes &() const // cast
 {
   return *this->ptr_;
 }
 
-ACE_INLINE 
-RTCORBA::ThreadpoolLanes_var::operator ::RTCORBA::ThreadpoolLanes &() // cast 
+ACE_INLINE
+RTCORBA::ThreadpoolLanes_var::operator ::RTCORBA::ThreadpoolLanes &() // cast
 {
   return *this->ptr_;
 }
 
-ACE_INLINE 
-RTCORBA::ThreadpoolLanes_var::operator ::RTCORBA::ThreadpoolLanes &() const // cast 
+ACE_INLINE
+RTCORBA::ThreadpoolLanes_var::operator ::RTCORBA::ThreadpoolLanes &() const // cast
 {
   return *this->ptr_;
 }
@@ -429,7 +430,7 @@
   return *this->ptr_;
 }
 
-// mapping for variable size 
+// mapping for variable size
 ACE_INLINE ::RTCORBA::ThreadpoolLanes *&
 RTCORBA::ThreadpoolLanes_var::out (void)
 {
@@ -490,7 +491,7 @@
   return *this;
 }
 
-ACE_INLINE 
+ACE_INLINE
 RTCORBA::ThreadpoolLanes_out::operator ::RTCORBA::ThreadpoolLanes *&() // cast
 {
   return this->ptr_;
@@ -517,6 +518,14 @@
 
 #endif /* end #if !defined */
 
+ACE_INLINE
+RTCORBA::PriorityModelPolicy::PriorityModelPolicy (void) // default constructor
+{}
+
+ACE_INLINE
+RTCORBA::PriorityModelPolicy::~PriorityModelPolicy (void) // destructor
+{}
+
 
 #if !defined (_RTCORBA_PRIORITYMODELPOLICY___VAR_CI_)
 #define _RTCORBA_PRIORITYMODELPOLICY___VAR_CI_
@@ -572,14 +581,14 @@
   return *this;
 }
 
-ACE_INLINE 
+ACE_INLINE
 RTCORBA::PriorityModelPolicy_var::operator const ::RTCORBA::PriorityModelPolicy_ptr &() const // cast
 {
   return this->ptr_;
 }
 
-ACE_INLINE 
-RTCORBA::PriorityModelPolicy_var::operator ::RTCORBA::PriorityModelPolicy_ptr &() // cast 
+ACE_INLINE
+RTCORBA::PriorityModelPolicy_var::operator ::RTCORBA::PriorityModelPolicy_ptr &() // cast
 {
   return this->ptr_;
 }
@@ -671,7 +680,7 @@
   return *this;
 }
 
-ACE_INLINE 
+ACE_INLINE
 RTCORBA::PriorityModelPolicy_out::operator ::RTCORBA::PriorityModelPolicy_ptr &() // cast
 {
   return this->ptr_;
@@ -692,6 +701,14 @@
 
 #endif /* end #if !defined */
 
+ACE_INLINE
+RTCORBA::ThreadpoolPolicy::ThreadpoolPolicy (void) // default constructor
+{}
+
+ACE_INLINE
+RTCORBA::ThreadpoolPolicy::~ThreadpoolPolicy (void) // destructor
+{}
+
 
 #if !defined (_RTCORBA_THREADPOOLPOLICY___VAR_CI_)
 #define _RTCORBA_THREADPOOLPOLICY___VAR_CI_
@@ -747,14 +764,14 @@
   return *this;
 }
 
-ACE_INLINE 
+ACE_INLINE
 RTCORBA::ThreadpoolPolicy_var::operator const ::RTCORBA::ThreadpoolPolicy_ptr &() const // cast
 {
   return this->ptr_;
 }
 
-ACE_INLINE 
-RTCORBA::ThreadpoolPolicy_var::operator ::RTCORBA::ThreadpoolPolicy_ptr &() // cast 
+ACE_INLINE
+RTCORBA::ThreadpoolPolicy_var::operator ::RTCORBA::ThreadpoolPolicy_ptr &() // cast
 {
   return this->ptr_;
 }
@@ -846,7 +863,7 @@
   return *this;
 }
 
-ACE_INLINE 
+ACE_INLINE
 RTCORBA::ThreadpoolPolicy_out::operator ::RTCORBA::ThreadpoolPolicy_ptr &() // cast
 {
   return this->ptr_;
@@ -867,6 +884,14 @@
 
 #endif /* end #if !defined */
 
+ACE_INLINE
+RTCORBA::PrivateConnectionPolicy::PrivateConnectionPolicy (void) // default constructor
+{}
+
+ACE_INLINE
+RTCORBA::PrivateConnectionPolicy::~PrivateConnectionPolicy (void) // destructor
+{}
+
 
 #if !defined (_RTCORBA_PRIVATECONNECTIONPOLICY___VAR_CI_)
 #define _RTCORBA_PRIVATECONNECTIONPOLICY___VAR_CI_
@@ -922,14 +947,14 @@
   return *this;
 }
 
-ACE_INLINE 
+ACE_INLINE
 RTCORBA::PrivateConnectionPolicy_var::operator const ::RTCORBA::PrivateConnectionPolicy_ptr &() const // cast
 {
   return this->ptr_;
 }
 
-ACE_INLINE 
-RTCORBA::PrivateConnectionPolicy_var::operator ::RTCORBA::PrivateConnectionPolicy_ptr &() // cast 
+ACE_INLINE
+RTCORBA::PrivateConnectionPolicy_var::operator ::RTCORBA::PrivateConnectionPolicy_ptr &() // cast
 {
   return this->ptr_;
 }
@@ -1021,7 +1046,7 @@
   return *this;
 }
 
-ACE_INLINE 
+ACE_INLINE
 RTCORBA::PrivateConnectionPolicy_out::operator ::RTCORBA::PrivateConnectionPolicy_ptr &() // cast
 {
   return this->ptr_;
@@ -1128,13 +1153,13 @@
 }
 
 ACE_INLINE
-RTCORBA::PriorityBand_var::operator ::RTCORBA::PriorityBand &() // cast 
+RTCORBA::PriorityBand_var::operator ::RTCORBA::PriorityBand &() // cast
 {
   return *this->ptr_;
 }
 
 ACE_INLINE
-RTCORBA::PriorityBand_var::operator ::RTCORBA::PriorityBand &() const // cast 
+RTCORBA::PriorityBand_var::operator ::RTCORBA::PriorityBand &() const // cast
 {
   return *this->ptr_;
 }
@@ -1151,7 +1176,7 @@
   return *this->ptr_;
 }
 
-// mapping for fixed size 
+// mapping for fixed size
 ACE_INLINE ::RTCORBA::PriorityBand &
 RTCORBA::PriorityBand_var::out (void)
 {
@@ -1172,7 +1197,7 @@
 
 
 #if !defined (TAO_USE_SEQUENCE_TEMPLATES)
-  
+
 #if !defined (__TAO_UNBOUNDED_SEQUENCE_RTCORBA_PRIORITYBANDS_CI_)
 #define __TAO_UNBOUNDED_SEQUENCE_RTCORBA_PRIORITYBANDS_CI_
 
@@ -1185,24 +1210,24 @@
     ACE_NEW_RETURN (retval, RTCORBA::PriorityBand[size], 0);
     return retval;
   }
-  
+
   ACE_INLINE void RTCORBA::_TAO_Unbounded_Sequence_RTCORBA_PriorityBands::freebuf (RTCORBA::PriorityBand *buffer)
   // Free the sequence.
   {
     delete [] buffer;
   }
-  
+
   ACE_INLINE
   RTCORBA::_TAO_Unbounded_Sequence_RTCORBA_PriorityBands::_TAO_Unbounded_Sequence_RTCORBA_PriorityBands (void) // Default constructor.
   {
   }
-  
+
   ACE_INLINE
   RTCORBA::_TAO_Unbounded_Sequence_RTCORBA_PriorityBands::_TAO_Unbounded_Sequence_RTCORBA_PriorityBands (CORBA::ULong maximum) // Constructor using a maximum length value.
     : TAO_Unbounded_Base_Sequence (maximum, _TAO_Unbounded_Sequence_RTCORBA_PriorityBands::allocbuf (maximum))
   {
   }
-  
+
   ACE_INLINE
   RTCORBA::_TAO_Unbounded_Sequence_RTCORBA_PriorityBands::_TAO_Unbounded_Sequence_RTCORBA_PriorityBands (CORBA::ULong maximum,
     CORBA::ULong length,
@@ -1211,7 +1236,7 @@
   : TAO_Unbounded_Base_Sequence (maximum, length, data, release)
   {
   }
-  
+
   ACE_INLINE
   RTCORBA::_TAO_Unbounded_Sequence_RTCORBA_PriorityBands::_TAO_Unbounded_Sequence_RTCORBA_PriorityBands (const _TAO_Unbounded_Sequence_RTCORBA_PriorityBands &rhs)
   // Copy constructor.
@@ -1221,10 +1246,10 @@
     {
       RTCORBA::PriorityBand *tmp1 = _TAO_Unbounded_Sequence_RTCORBA_PriorityBands::allocbuf (this->maximum_);
       RTCORBA::PriorityBand * const tmp2 = ACE_reinterpret_cast (RTCORBA::PriorityBand * ACE_CAST_CONST, rhs.buffer_);
-      
+
       for (CORBA::ULong i = 0; i < this->length_; ++i)
         tmp1[i] = tmp2[i];
-      
+
       this->buffer_ = tmp1;
     }
     else
@@ -1232,14 +1257,14 @@
       this->buffer_ = 0;
     }
   }
-  
+
   ACE_INLINE RTCORBA::_TAO_Unbounded_Sequence_RTCORBA_PriorityBands &
   RTCORBA::_TAO_Unbounded_Sequence_RTCORBA_PriorityBands::operator= (const _TAO_Unbounded_Sequence_RTCORBA_PriorityBands &rhs)
   // Assignment operator.
   {
     if (this == &rhs)
       return *this;
-    
+
     if (this->release_)
     {
       if (this->maximum_ < rhs.maximum_)
@@ -1252,18 +1277,18 @@
     }
     else
       this->buffer_ = _TAO_Unbounded_Sequence_RTCORBA_PriorityBands::allocbuf (rhs.maximum_);
-    
+
     TAO_Unbounded_Base_Sequence::operator= (rhs);
-    
+
     RTCORBA::PriorityBand *tmp1 = ACE_reinterpret_cast (RTCORBA::PriorityBand *, this->buffer_);
     RTCORBA::PriorityBand * const tmp2 = ACE_reinterpret_cast (RTCORBA::PriorityBand * ACE_CAST_CONST, rhs.buffer_);
-    
+
     for (CORBA::ULong i = 0; i < this->length_; ++i)
       tmp1[i] = tmp2[i];
-    
+
     return *this;
   }
-  
+
   // = Accessors.
   ACE_INLINE RTCORBA::PriorityBand &
   RTCORBA::_TAO_Unbounded_Sequence_RTCORBA_PriorityBands::operator[] (CORBA::ULong i)
@@ -1273,7 +1298,7 @@
     RTCORBA::PriorityBand* tmp = ACE_reinterpret_cast(RTCORBA::PriorityBand*,this->buffer_);
     return tmp[i];
   }
-  
+
   ACE_INLINE const RTCORBA::PriorityBand &
   RTCORBA::_TAO_Unbounded_Sequence_RTCORBA_PriorityBands::operator[] (CORBA::ULong i) const
   // operator []
@@ -1282,9 +1307,9 @@
     RTCORBA::PriorityBand * const tmp = ACE_reinterpret_cast (RTCORBA::PriorityBand* ACE_CAST_CONST, this->buffer_);
     return tmp[i];
   }
-  
+
   // Implement the TAO_Base_Sequence methods (see Sequence.h)
-  
+
   ACE_INLINE RTCORBA::PriorityBand *
   RTCORBA::_TAO_Unbounded_Sequence_RTCORBA_PriorityBands::get_buffer (CORBA::Boolean orphan)
   {
@@ -1296,6 +1321,7 @@
       {
         result = _TAO_Unbounded_Sequence_RTCORBA_PriorityBands::allocbuf (this->length_);
         this->buffer_ = result;
+	this->release_ = 1;
       }
       else
       {
@@ -1317,13 +1343,13 @@
     }
     return result;
   }
-  
+
   ACE_INLINE const RTCORBA::PriorityBand *
   RTCORBA::_TAO_Unbounded_Sequence_RTCORBA_PriorityBands::get_buffer (void) const
   {
     return ACE_reinterpret_cast(const RTCORBA::PriorityBand * ACE_CAST_CONST, this->buffer_);
   }
-  
+
   ACE_INLINE void
   RTCORBA::_TAO_Unbounded_Sequence_RTCORBA_PriorityBands::replace (CORBA::ULong max,
   CORBA::ULong length,
@@ -1340,11 +1366,11 @@
     this->buffer_ = data;
     this->release_ = release;
   }
-  
+
 #endif /* end #if !defined */
 
 
-#endif /* !TAO_USE_SEQUENCE_TEMPLATES */ 
+#endif /* !TAO_USE_SEQUENCE_TEMPLATES */
 
 #if !defined (_RTCORBA_PRIORITYBANDS_CI_)
 #define _RTCORBA_PRIORITYBANDS_CI_
@@ -1428,20 +1454,20 @@
   return this->ptr_;
 }
 
-ACE_INLINE 
+ACE_INLINE
 RTCORBA::PriorityBands_var::operator const ::RTCORBA::PriorityBands &() const // cast
 {
   return *this->ptr_;
 }
 
-ACE_INLINE 
-RTCORBA::PriorityBands_var::operator ::RTCORBA::PriorityBands &() // cast 
+ACE_INLINE
+RTCORBA::PriorityBands_var::operator ::RTCORBA::PriorityBands &() // cast
 {
   return *this->ptr_;
 }
 
-ACE_INLINE 
-RTCORBA::PriorityBands_var::operator ::RTCORBA::PriorityBands &() const // cast 
+ACE_INLINE
+RTCORBA::PriorityBands_var::operator ::RTCORBA::PriorityBands &() const // cast
 {
   return *this->ptr_;
 }
@@ -1464,7 +1490,7 @@
   return *this->ptr_;
 }
 
-// mapping for variable size 
+// mapping for variable size
 ACE_INLINE ::RTCORBA::PriorityBands *&
 RTCORBA::PriorityBands_var::out (void)
 {
@@ -1525,7 +1551,7 @@
   return *this;
 }
 
-ACE_INLINE 
+ACE_INLINE
 RTCORBA::PriorityBands_out::operator ::RTCORBA::PriorityBands *&() // cast
 {
   return this->ptr_;
@@ -1552,6 +1578,14 @@
 
 #endif /* end #if !defined */
 
+ACE_INLINE
+RTCORBA::PriorityBandedConnectionPolicy::PriorityBandedConnectionPolicy (void) // default constructor
+{}
+
+ACE_INLINE
+RTCORBA::PriorityBandedConnectionPolicy::~PriorityBandedConnectionPolicy (void) // destructor
+{}
+
 
 #if !defined (_RTCORBA_PRIORITYBANDEDCONNECTIONPOLICY___VAR_CI_)
 #define _RTCORBA_PRIORITYBANDEDCONNECTIONPOLICY___VAR_CI_
@@ -1607,14 +1641,14 @@
   return *this;
 }
 
-ACE_INLINE 
+ACE_INLINE
 RTCORBA::PriorityBandedConnectionPolicy_var::operator const ::RTCORBA::PriorityBandedConnectionPolicy_ptr &() const // cast
 {
   return this->ptr_;
 }
 
-ACE_INLINE 
-RTCORBA::PriorityBandedConnectionPolicy_var::operator ::RTCORBA::PriorityBandedConnectionPolicy_ptr &() // cast 
+ACE_INLINE
+RTCORBA::PriorityBandedConnectionPolicy_var::operator ::RTCORBA::PriorityBandedConnectionPolicy_ptr &() // cast
 {
   return this->ptr_;
 }
@@ -1706,7 +1740,7 @@
   return *this;
 }
 
-ACE_INLINE 
+ACE_INLINE
 RTCORBA::PriorityBandedConnectionPolicy_out::operator ::RTCORBA::PriorityBandedConnectionPolicy_ptr &() // cast
 {
   return this->ptr_;
@@ -1727,6 +1761,14 @@
 
 #endif /* end #if !defined */
 
+ACE_INLINE
+RTCORBA::ProtocolProperties::ProtocolProperties (void) // default constructor
+{}
+
+ACE_INLINE
+RTCORBA::ProtocolProperties::~ProtocolProperties (void) // destructor
+{}
+
 
 #if !defined (_RTCORBA_PROTOCOLPROPERTIES___VAR_CI_)
 #define _RTCORBA_PROTOCOLPROPERTIES___VAR_CI_
@@ -1782,14 +1824,14 @@
   return *this;
 }
 
-ACE_INLINE 
+ACE_INLINE
 RTCORBA::ProtocolProperties_var::operator const ::RTCORBA::ProtocolProperties_ptr &() const // cast
 {
   return this->ptr_;
 }
 
-ACE_INLINE 
-RTCORBA::ProtocolProperties_var::operator ::RTCORBA::ProtocolProperties_ptr &() // cast 
+ACE_INLINE
+RTCORBA::ProtocolProperties_var::operator ::RTCORBA::ProtocolProperties_ptr &() // cast
 {
   return this->ptr_;
 }
@@ -1881,7 +1923,7 @@
   return *this;
 }
 
-ACE_INLINE 
+ACE_INLINE
 RTCORBA::ProtocolProperties_out::operator ::RTCORBA::ProtocolProperties_ptr &() // cast
 {
   return this->ptr_;
@@ -1902,6 +1944,14 @@
 
 #endif /* end #if !defined */
 
+ACE_INLINE
+RTCORBA::TCPProtocolProperties::TCPProtocolProperties (void) // default constructor
+{}
+
+ACE_INLINE
+RTCORBA::TCPProtocolProperties::~TCPProtocolProperties (void) // destructor
+{}
+
 
 #if !defined (_RTCORBA_TCPPROTOCOLPROPERTIES___VAR_CI_)
 #define _RTCORBA_TCPPROTOCOLPROPERTIES___VAR_CI_
@@ -1957,14 +2007,14 @@
   return *this;
 }
 
-ACE_INLINE 
+ACE_INLINE
 RTCORBA::TCPProtocolProperties_var::operator const ::RTCORBA::TCPProtocolProperties_ptr &() const // cast
 {
   return this->ptr_;
 }
 
-ACE_INLINE 
-RTCORBA::TCPProtocolProperties_var::operator ::RTCORBA::TCPProtocolProperties_ptr &() // cast 
+ACE_INLINE
+RTCORBA::TCPProtocolProperties_var::operator ::RTCORBA::TCPProtocolProperties_ptr &() // cast
 {
   return this->ptr_;
 }
@@ -2056,7 +2106,7 @@
   return *this;
 }
 
-ACE_INLINE 
+ACE_INLINE
 RTCORBA::TCPProtocolProperties_out::operator ::RTCORBA::TCPProtocolProperties_ptr &() // cast
 {
   return this->ptr_;
@@ -2077,6 +2127,14 @@
 
 #endif /* end #if !defined */
 
+ACE_INLINE
+RTCORBA::GIOPProtocolProperties::GIOPProtocolProperties (void) // default constructor
+{}
+
+ACE_INLINE
+RTCORBA::GIOPProtocolProperties::~GIOPProtocolProperties (void) // destructor
+{}
+
 
 #if !defined (_RTCORBA_GIOPPROTOCOLPROPERTIES___VAR_CI_)
 #define _RTCORBA_GIOPPROTOCOLPROPERTIES___VAR_CI_
@@ -2132,14 +2190,14 @@
   return *this;
 }
 
-ACE_INLINE 
+ACE_INLINE
 RTCORBA::GIOPProtocolProperties_var::operator const ::RTCORBA::GIOPProtocolProperties_ptr &() const // cast
 {
   return this->ptr_;
 }
 
-ACE_INLINE 
-RTCORBA::GIOPProtocolProperties_var::operator ::RTCORBA::GIOPProtocolProperties_ptr &() // cast 
+ACE_INLINE
+RTCORBA::GIOPProtocolProperties_var::operator ::RTCORBA::GIOPProtocolProperties_ptr &() // cast
 {
   return this->ptr_;
 }
@@ -2231,7 +2289,7 @@
   return *this;
 }
 
-ACE_INLINE 
+ACE_INLINE
 RTCORBA::GIOPProtocolProperties_out::operator ::RTCORBA::GIOPProtocolProperties_ptr &() // cast
 {
   return this->ptr_;
@@ -2252,6 +2310,346 @@
 
 #endif /* end #if !defined */
 
+
+#if !defined (_RTCORBA_UNIXDOMAINPROTOCOLPROPERTIES___VAR_CI_)
+#define _RTCORBA_UNIXDOMAINPROTOCOLPROPERTIES___VAR_CI_
+
+// *************************************************************
+// Inline operations for class RTCORBA::UnixDomainProtocolProperties_var
+// *************************************************************
+
+ACE_INLINE
+RTCORBA::UnixDomainProtocolProperties_var::UnixDomainProtocolProperties_var (void) // default constructor
+  : ptr_ (UnixDomainProtocolProperties::_nil ())
+{}
+
+ACE_INLINE ::RTCORBA::UnixDomainProtocolProperties_ptr
+RTCORBA::UnixDomainProtocolProperties_var::ptr (void) const
+{
+  return this->ptr_;
+}
+
+ACE_INLINE
+RTCORBA::UnixDomainProtocolProperties_var::UnixDomainProtocolProperties_var (const ::RTCORBA::UnixDomainProtocolProperties_var &p) // copy constructor
+  : TAO_Base_var (),
+    ptr_ (UnixDomainProtocolProperties::_duplicate (p.ptr ()))
+{}
+
+ACE_INLINE
+RTCORBA::UnixDomainProtocolProperties_var::~UnixDomainProtocolProperties_var (void) // destructor
+{
+  CORBA::release (this->ptr_);
+}
+
+ACE_INLINE RTCORBA::UnixDomainProtocolProperties_var &
+RTCORBA::UnixDomainProtocolProperties_var::operator= (UnixDomainProtocolProperties_ptr p)
+{
+  CORBA::release (this->ptr_);
+  this->ptr_ = p;
+  return *this;
+}
+
+ACE_INLINE RTCORBA::UnixDomainProtocolProperties_var &
+RTCORBA::UnixDomainProtocolProperties_var::operator= (const ::RTCORBA::UnixDomainProtocolProperties_var &p)
+{
+  if (this != &p)
+  {
+    CORBA::release (this->ptr_);
+    this->ptr_ = ::RTCORBA::UnixDomainProtocolProperties::_duplicate (p.ptr ());
+  }
+  return *this;
+}
+
+ACE_INLINE
+RTCORBA::UnixDomainProtocolProperties_var::operator const ::RTCORBA::UnixDomainProtocolProperties_ptr &() const // cast
+{
+  return this->ptr_;
+}
+
+ACE_INLINE
+RTCORBA::UnixDomainProtocolProperties_var::operator ::RTCORBA::UnixDomainProtocolProperties_ptr &() // cast
+{
+  return this->ptr_;
+}
+
+ACE_INLINE ::RTCORBA::UnixDomainProtocolProperties_ptr
+RTCORBA::UnixDomainProtocolProperties_var::operator-> (void) const
+{
+  return this->ptr_;
+}
+
+ACE_INLINE ::RTCORBA::UnixDomainProtocolProperties_ptr
+RTCORBA::UnixDomainProtocolProperties_var::in (void) const
+{
+  return this->ptr_;
+}
+
+ACE_INLINE ::RTCORBA::UnixDomainProtocolProperties_ptr &
+RTCORBA::UnixDomainProtocolProperties_var::inout (void)
+{
+  return this->ptr_;
+}
+
+ACE_INLINE ::RTCORBA::UnixDomainProtocolProperties_ptr &
+RTCORBA::UnixDomainProtocolProperties_var::out (void)
+{
+  CORBA::release (this->ptr_);
+  this->ptr_ = ::RTCORBA::UnixDomainProtocolProperties::_nil ();
+  return this->ptr_;
+}
+
+ACE_INLINE ::RTCORBA::UnixDomainProtocolProperties_ptr
+RTCORBA::UnixDomainProtocolProperties_var::_retn (void)
+{
+  // yield ownership of managed obj reference
+  ::RTCORBA::UnixDomainProtocolProperties_ptr val = this->ptr_;
+  this->ptr_ = ::RTCORBA::UnixDomainProtocolProperties::_nil ();
+  return val;
+}
+
+
+#endif /* end #if !defined */
+
+
+#if !defined (_RTCORBA_UNIXDOMAINPROTOCOLPROPERTIES___OUT_CI_)
+#define _RTCORBA_UNIXDOMAINPROTOCOLPROPERTIES___OUT_CI_
+
+// *************************************************************
+// Inline operations for class RTCORBA::UnixDomainProtocolProperties_out
+// *************************************************************
+
+ACE_INLINE
+RTCORBA::UnixDomainProtocolProperties_out::UnixDomainProtocolProperties_out (UnixDomainProtocolProperties_ptr &p)
+  : ptr_ (p)
+{
+  this->ptr_ = ::RTCORBA::UnixDomainProtocolProperties::_nil ();
+}
+
+ACE_INLINE
+RTCORBA::UnixDomainProtocolProperties_out::UnixDomainProtocolProperties_out (UnixDomainProtocolProperties_var &p) // constructor from _var
+  : ptr_ (p.out ())
+{
+  CORBA::release (this->ptr_);
+  this->ptr_ = ::RTCORBA::UnixDomainProtocolProperties::_nil ();
+}
+
+ACE_INLINE
+RTCORBA::UnixDomainProtocolProperties_out::UnixDomainProtocolProperties_out (const ::RTCORBA::UnixDomainProtocolProperties_out &p) // copy constructor
+  : ptr_ (ACE_const_cast (UnixDomainProtocolProperties_out &, p).ptr_)
+{}
+
+ACE_INLINE ::RTCORBA::UnixDomainProtocolProperties_out &
+RTCORBA::UnixDomainProtocolProperties_out::operator= (const ::RTCORBA::UnixDomainProtocolProperties_out &p)
+{
+  this->ptr_ = ACE_const_cast (UnixDomainProtocolProperties_out&, p).ptr_;
+  return *this;
+}
+
+ACE_INLINE RTCORBA::UnixDomainProtocolProperties_out &
+RTCORBA::UnixDomainProtocolProperties_out::operator= (const ::RTCORBA::UnixDomainProtocolProperties_var &p)
+{
+  this->ptr_ = ::RTCORBA::UnixDomainProtocolProperties::_duplicate (p.ptr ());
+  return *this;
+}
+
+ACE_INLINE RTCORBA::UnixDomainProtocolProperties_out &
+RTCORBA::UnixDomainProtocolProperties_out::operator= (UnixDomainProtocolProperties_ptr p)
+{
+  this->ptr_ = p;
+  return *this;
+}
+
+ACE_INLINE
+RTCORBA::UnixDomainProtocolProperties_out::operator ::RTCORBA::UnixDomainProtocolProperties_ptr &() // cast
+{
+  return this->ptr_;
+}
+
+ACE_INLINE ::RTCORBA::UnixDomainProtocolProperties_ptr &
+RTCORBA::UnixDomainProtocolProperties_out::ptr (void) // ptr
+{
+  return this->ptr_;
+}
+
+ACE_INLINE ::RTCORBA::UnixDomainProtocolProperties_ptr
+RTCORBA::UnixDomainProtocolProperties_out::operator-> (void)
+{
+  return this->ptr_;
+}
+
+
+#endif /* end #if !defined */
+
+
+#if !defined (_RTCORBA_SHAREDMEMORYPROTOCOLPROPERTIES___VAR_CI_)
+#define _RTCORBA_SHAREDMEMORYPROTOCOLPROPERTIES___VAR_CI_
+
+// *************************************************************
+// Inline operations for class RTCORBA::SharedMemoryProtocolProperties_var
+// *************************************************************
+
+ACE_INLINE
+RTCORBA::SharedMemoryProtocolProperties_var::SharedMemoryProtocolProperties_var (void) // default constructor
+  : ptr_ (SharedMemoryProtocolProperties::_nil ())
+{}
+
+ACE_INLINE ::RTCORBA::SharedMemoryProtocolProperties_ptr
+RTCORBA::SharedMemoryProtocolProperties_var::ptr (void) const
+{
+  return this->ptr_;
+}
+
+ACE_INLINE
+RTCORBA::SharedMemoryProtocolProperties_var::SharedMemoryProtocolProperties_var (const ::RTCORBA::SharedMemoryProtocolProperties_var &p) // copy constructor
+  : TAO_Base_var (),
+    ptr_ (SharedMemoryProtocolProperties::_duplicate (p.ptr ()))
+{}
+
+ACE_INLINE
+RTCORBA::SharedMemoryProtocolProperties_var::~SharedMemoryProtocolProperties_var (void) // destructor
+{
+  CORBA::release (this->ptr_);
+}
+
+ACE_INLINE RTCORBA::SharedMemoryProtocolProperties_var &
+RTCORBA::SharedMemoryProtocolProperties_var::operator= (SharedMemoryProtocolProperties_ptr p)
+{
+  CORBA::release (this->ptr_);
+  this->ptr_ = p;
+  return *this;
+}
+
+ACE_INLINE RTCORBA::SharedMemoryProtocolProperties_var &
+RTCORBA::SharedMemoryProtocolProperties_var::operator= (const ::RTCORBA::SharedMemoryProtocolProperties_var &p)
+{
+  if (this != &p)
+  {
+    CORBA::release (this->ptr_);
+    this->ptr_ = ::RTCORBA::SharedMemoryProtocolProperties::_duplicate (p.ptr ());
+  }
+  return *this;
+}
+
+ACE_INLINE
+RTCORBA::SharedMemoryProtocolProperties_var::operator const ::RTCORBA::SharedMemoryProtocolProperties_ptr &() const // cast
+{
+  return this->ptr_;
+}
+
+ACE_INLINE
+RTCORBA::SharedMemoryProtocolProperties_var::operator ::RTCORBA::SharedMemoryProtocolProperties_ptr &() // cast
+{
+  return this->ptr_;
+}
+
+ACE_INLINE ::RTCORBA::SharedMemoryProtocolProperties_ptr
+RTCORBA::SharedMemoryProtocolProperties_var::operator-> (void) const
+{
+  return this->ptr_;
+}
+
+ACE_INLINE ::RTCORBA::SharedMemoryProtocolProperties_ptr
+RTCORBA::SharedMemoryProtocolProperties_var::in (void) const
+{
+  return this->ptr_;
+}
+
+ACE_INLINE ::RTCORBA::SharedMemoryProtocolProperties_ptr &
+RTCORBA::SharedMemoryProtocolProperties_var::inout (void)
+{
+  return this->ptr_;
+}
+
+ACE_INLINE ::RTCORBA::SharedMemoryProtocolProperties_ptr &
+RTCORBA::SharedMemoryProtocolProperties_var::out (void)
+{
+  CORBA::release (this->ptr_);
+  this->ptr_ = ::RTCORBA::SharedMemoryProtocolProperties::_nil ();
+  return this->ptr_;
+}
+
+ACE_INLINE ::RTCORBA::SharedMemoryProtocolProperties_ptr
+RTCORBA::SharedMemoryProtocolProperties_var::_retn (void)
+{
+  // yield ownership of managed obj reference
+  ::RTCORBA::SharedMemoryProtocolProperties_ptr val = this->ptr_;
+  this->ptr_ = ::RTCORBA::SharedMemoryProtocolProperties::_nil ();
+  return val;
+}
+
+
+#endif /* end #if !defined */
+
+
+#if !defined (_RTCORBA_SHAREDMEMORYPROTOCOLPROPERTIES___OUT_CI_)
+#define _RTCORBA_SHAREDMEMORYPROTOCOLPROPERTIES___OUT_CI_
+
+// *************************************************************
+// Inline operations for class RTCORBA::SharedMemoryProtocolProperties_out
+// *************************************************************
+
+ACE_INLINE
+RTCORBA::SharedMemoryProtocolProperties_out::SharedMemoryProtocolProperties_out (SharedMemoryProtocolProperties_ptr &p)
+  : ptr_ (p)
+{
+  this->ptr_ = ::RTCORBA::SharedMemoryProtocolProperties::_nil ();
+}
+
+ACE_INLINE
+RTCORBA::SharedMemoryProtocolProperties_out::SharedMemoryProtocolProperties_out (SharedMemoryProtocolProperties_var &p) // constructor from _var
+  : ptr_ (p.out ())
+{
+  CORBA::release (this->ptr_);
+  this->ptr_ = ::RTCORBA::SharedMemoryProtocolProperties::_nil ();
+}
+
+ACE_INLINE
+RTCORBA::SharedMemoryProtocolProperties_out::SharedMemoryProtocolProperties_out (const ::RTCORBA::SharedMemoryProtocolProperties_out &p) // copy constructor
+  : ptr_ (ACE_const_cast (SharedMemoryProtocolProperties_out &, p).ptr_)
+{}
+
+ACE_INLINE ::RTCORBA::SharedMemoryProtocolProperties_out &
+RTCORBA::SharedMemoryProtocolProperties_out::operator= (const ::RTCORBA::SharedMemoryProtocolProperties_out &p)
+{
+  this->ptr_ = ACE_const_cast (SharedMemoryProtocolProperties_out&, p).ptr_;
+  return *this;
+}
+
+ACE_INLINE RTCORBA::SharedMemoryProtocolProperties_out &
+RTCORBA::SharedMemoryProtocolProperties_out::operator= (const ::RTCORBA::SharedMemoryProtocolProperties_var &p)
+{
+  this->ptr_ = ::RTCORBA::SharedMemoryProtocolProperties::_duplicate (p.ptr ());
+  return *this;
+}
+
+ACE_INLINE RTCORBA::SharedMemoryProtocolProperties_out &
+RTCORBA::SharedMemoryProtocolProperties_out::operator= (SharedMemoryProtocolProperties_ptr p)
+{
+  this->ptr_ = p;
+  return *this;
+}
+
+ACE_INLINE
+RTCORBA::SharedMemoryProtocolProperties_out::operator ::RTCORBA::SharedMemoryProtocolProperties_ptr &() // cast
+{
+  return this->ptr_;
+}
+
+ACE_INLINE ::RTCORBA::SharedMemoryProtocolProperties_ptr &
+RTCORBA::SharedMemoryProtocolProperties_out::ptr (void) // ptr
+{
+  return this->ptr_;
+}
+
+ACE_INLINE ::RTCORBA::SharedMemoryProtocolProperties_ptr
+RTCORBA::SharedMemoryProtocolProperties_out::operator-> (void)
+{
+  return this->ptr_;
+}
+
+
+#endif /* end #if !defined */
+
 // *************************************************************
 // Inline operations for class RTCORBA::Protocol_var
 // *************************************************************
@@ -2319,20 +2717,20 @@
 }
 
 ACE_INLINE
-RTCORBA::Protocol_var::operator ::RTCORBA::Protocol &() // cast 
+RTCORBA::Protocol_var::operator ::RTCORBA::Protocol &() // cast
 {
   return *this->ptr_;
 }
 
 ACE_INLINE
-RTCORBA::Protocol_var::operator ::RTCORBA::Protocol &() const // cast 
+RTCORBA::Protocol_var::operator ::RTCORBA::Protocol &() const // cast
 {
   return *this->ptr_;
 }
 
 // variable-size types only
 ACE_INLINE
-RTCORBA::Protocol_var::operator ::RTCORBA::Protocol *&() // cast 
+RTCORBA::Protocol_var::operator ::RTCORBA::Protocol *&() // cast
 {
   return this->ptr_;
 }
@@ -2349,7 +2747,7 @@
   return *this->ptr_;
 }
 
-// mapping for variable size 
+// mapping for variable size
 ACE_INLINE ::RTCORBA::Protocol *&
 RTCORBA::Protocol_var::out (void)
 {
@@ -2410,7 +2808,7 @@
   return *this;
 }
 
-ACE_INLINE 
+ACE_INLINE
 RTCORBA::Protocol_out::operator ::RTCORBA::Protocol *&() // cast
 {
   return this->ptr_;
@@ -2430,7 +2828,7 @@
 
 
 #if !defined (TAO_USE_SEQUENCE_TEMPLATES)
-  
+
 #if !defined (__TAO_UNBOUNDED_SEQUENCE_RTCORBA_PROTOCOLLIST_CI_)
 #define __TAO_UNBOUNDED_SEQUENCE_RTCORBA_PROTOCOLLIST_CI_
 
@@ -2443,24 +2841,24 @@
     ACE_NEW_RETURN (retval, RTCORBA::Protocol[size], 0);
     return retval;
   }
-  
+
   ACE_INLINE void RTCORBA::_TAO_Unbounded_Sequence_RTCORBA_ProtocolList::freebuf (RTCORBA::Protocol *buffer)
   // Free the sequence.
   {
     delete [] buffer;
   }
-  
+
   ACE_INLINE
   RTCORBA::_TAO_Unbounded_Sequence_RTCORBA_ProtocolList::_TAO_Unbounded_Sequence_RTCORBA_ProtocolList (void) // Default constructor.
   {
   }
-  
+
   ACE_INLINE
   RTCORBA::_TAO_Unbounded_Sequence_RTCORBA_ProtocolList::_TAO_Unbounded_Sequence_RTCORBA_ProtocolList (CORBA::ULong maximum) // Constructor using a maximum length value.
     : TAO_Unbounded_Base_Sequence (maximum, _TAO_Unbounded_Sequence_RTCORBA_ProtocolList::allocbuf (maximum))
   {
   }
-  
+
   ACE_INLINE
   RTCORBA::_TAO_Unbounded_Sequence_RTCORBA_ProtocolList::_TAO_Unbounded_Sequence_RTCORBA_ProtocolList (CORBA::ULong maximum,
     CORBA::ULong length,
@@ -2469,7 +2867,7 @@
   : TAO_Unbounded_Base_Sequence (maximum, length, data, release)
   {
   }
-  
+
   ACE_INLINE
   RTCORBA::_TAO_Unbounded_Sequence_RTCORBA_ProtocolList::_TAO_Unbounded_Sequence_RTCORBA_ProtocolList (const _TAO_Unbounded_Sequence_RTCORBA_ProtocolList &rhs)
   // Copy constructor.
@@ -2479,10 +2877,10 @@
     {
       RTCORBA::Protocol *tmp1 = _TAO_Unbounded_Sequence_RTCORBA_ProtocolList::allocbuf (this->maximum_);
       RTCORBA::Protocol * const tmp2 = ACE_reinterpret_cast (RTCORBA::Protocol * ACE_CAST_CONST, rhs.buffer_);
-      
+
       for (CORBA::ULong i = 0; i < this->length_; ++i)
         tmp1[i] = tmp2[i];
-      
+
       this->buffer_ = tmp1;
     }
     else
@@ -2490,14 +2888,14 @@
       this->buffer_ = 0;
     }
   }
-  
+
   ACE_INLINE RTCORBA::_TAO_Unbounded_Sequence_RTCORBA_ProtocolList &
   RTCORBA::_TAO_Unbounded_Sequence_RTCORBA_ProtocolList::operator= (const _TAO_Unbounded_Sequence_RTCORBA_ProtocolList &rhs)
   // Assignment operator.
   {
     if (this == &rhs)
       return *this;
-    
+
     if (this->release_)
     {
       if (this->maximum_ < rhs.maximum_)
@@ -2510,18 +2908,18 @@
     }
     else
       this->buffer_ = _TAO_Unbounded_Sequence_RTCORBA_ProtocolList::allocbuf (rhs.maximum_);
-    
+
     TAO_Unbounded_Base_Sequence::operator= (rhs);
-    
+
     RTCORBA::Protocol *tmp1 = ACE_reinterpret_cast (RTCORBA::Protocol *, this->buffer_);
     RTCORBA::Protocol * const tmp2 = ACE_reinterpret_cast (RTCORBA::Protocol * ACE_CAST_CONST, rhs.buffer_);
-    
+
     for (CORBA::ULong i = 0; i < this->length_; ++i)
       tmp1[i] = tmp2[i];
-    
+
     return *this;
   }
-  
+
   // = Accessors.
   ACE_INLINE RTCORBA::Protocol &
   RTCORBA::_TAO_Unbounded_Sequence_RTCORBA_ProtocolList::operator[] (CORBA::ULong i)
@@ -2531,7 +2929,7 @@
     RTCORBA::Protocol* tmp = ACE_reinterpret_cast(RTCORBA::Protocol*,this->buffer_);
     return tmp[i];
   }
-  
+
   ACE_INLINE const RTCORBA::Protocol &
   RTCORBA::_TAO_Unbounded_Sequence_RTCORBA_ProtocolList::operator[] (CORBA::ULong i) const
   // operator []
@@ -2540,9 +2938,9 @@
     RTCORBA::Protocol * const tmp = ACE_reinterpret_cast (RTCORBA::Protocol* ACE_CAST_CONST, this->buffer_);
     return tmp[i];
   }
-  
+
   // Implement the TAO_Base_Sequence methods (see Sequence.h)
-  
+
   ACE_INLINE RTCORBA::Protocol *
   RTCORBA::_TAO_Unbounded_Sequence_RTCORBA_ProtocolList::get_buffer (CORBA::Boolean orphan)
   {
@@ -2554,6 +2952,7 @@
       {
         result = _TAO_Unbounded_Sequence_RTCORBA_ProtocolList::allocbuf (this->length_);
         this->buffer_ = result;
+	this->release_ = 1;
       }
       else
       {
@@ -2575,13 +2974,13 @@
     }
     return result;
   }
-  
+
   ACE_INLINE const RTCORBA::Protocol *
   RTCORBA::_TAO_Unbounded_Sequence_RTCORBA_ProtocolList::get_buffer (void) const
   {
     return ACE_reinterpret_cast(const RTCORBA::Protocol * ACE_CAST_CONST, this->buffer_);
   }
-  
+
   ACE_INLINE void
   RTCORBA::_TAO_Unbounded_Sequence_RTCORBA_ProtocolList::replace (CORBA::ULong max,
   CORBA::ULong length,
@@ -2598,11 +2997,11 @@
     this->buffer_ = data;
     this->release_ = release;
   }
-  
+
 #endif /* end #if !defined */
 
 
-#endif /* !TAO_USE_SEQUENCE_TEMPLATES */ 
+#endif /* !TAO_USE_SEQUENCE_TEMPLATES */
 
 #if !defined (_RTCORBA_PROTOCOLLIST_CI_)
 #define _RTCORBA_PROTOCOLLIST_CI_
@@ -2667,27 +3066,27 @@
   return this->ptr_;
 }
 
-ACE_INLINE 
+ACE_INLINE
 RTCORBA::ProtocolList_var::operator const ::RTCORBA::ProtocolList &() const // cast
 {
   return *this->ptr_;
 }
 
-ACE_INLINE 
-RTCORBA::ProtocolList_var::operator ::RTCORBA::ProtocolList &() // cast 
+ACE_INLINE
+RTCORBA::ProtocolList_var::operator ::RTCORBA::ProtocolList &() // cast
 {
   return *this->ptr_;
 }
 
-ACE_INLINE 
-RTCORBA::ProtocolList_var::operator ::RTCORBA::ProtocolList &() const // cast 
+ACE_INLINE
+RTCORBA::ProtocolList_var::operator ::RTCORBA::ProtocolList &() const // cast
 {
   return *this->ptr_;
 }
 
 // variable-size types only
 ACE_INLINE
-RTCORBA::ProtocolList_var::operator ::RTCORBA::ProtocolList *&() // cast 
+RTCORBA::ProtocolList_var::operator ::RTCORBA::ProtocolList *&() // cast
 {
   return this->ptr_;
 }
@@ -2710,7 +3109,7 @@
   return *this->ptr_;
 }
 
-// mapping for variable size 
+// mapping for variable size
 ACE_INLINE ::RTCORBA::ProtocolList *&
 RTCORBA::ProtocolList_var::out (void)
 {
@@ -2771,7 +3170,7 @@
   return *this;
 }
 
-ACE_INLINE 
+ACE_INLINE
 RTCORBA::ProtocolList_out::operator ::RTCORBA::ProtocolList *&() // cast
 {
   return this->ptr_;
@@ -2798,6 +3197,14 @@
 
 #endif /* end #if !defined */
 
+ACE_INLINE
+RTCORBA::ServerProtocolPolicy::ServerProtocolPolicy (void) // default constructor
+{}
+
+ACE_INLINE
+RTCORBA::ServerProtocolPolicy::~ServerProtocolPolicy (void) // destructor
+{}
+
 
 #if !defined (_RTCORBA_SERVERPROTOCOLPOLICY___VAR_CI_)
 #define _RTCORBA_SERVERPROTOCOLPOLICY___VAR_CI_
@@ -2853,14 +3260,14 @@
   return *this;
 }
 
-ACE_INLINE 
+ACE_INLINE
 RTCORBA::ServerProtocolPolicy_var::operator const ::RTCORBA::ServerProtocolPolicy_ptr &() const // cast
 {
   return this->ptr_;
 }
 
-ACE_INLINE 
-RTCORBA::ServerProtocolPolicy_var::operator ::RTCORBA::ServerProtocolPolicy_ptr &() // cast 
+ACE_INLINE
+RTCORBA::ServerProtocolPolicy_var::operator ::RTCORBA::ServerProtocolPolicy_ptr &() // cast
 {
   return this->ptr_;
 }
@@ -2952,7 +3359,7 @@
   return *this;
 }
 
-ACE_INLINE 
+ACE_INLINE
 RTCORBA::ServerProtocolPolicy_out::operator ::RTCORBA::ServerProtocolPolicy_ptr &() // cast
 {
   return this->ptr_;
@@ -2973,6 +3380,14 @@
 
 #endif /* end #if !defined */
 
+ACE_INLINE
+RTCORBA::ClientProtocolPolicy::ClientProtocolPolicy (void) // default constructor
+{}
+
+ACE_INLINE
+RTCORBA::ClientProtocolPolicy::~ClientProtocolPolicy (void) // destructor
+{}
+
 
 #if !defined (_RTCORBA_CLIENTPROTOCOLPOLICY___VAR_CI_)
 #define _RTCORBA_CLIENTPROTOCOLPOLICY___VAR_CI_
@@ -3028,14 +3443,14 @@
   return *this;
 }
 
-ACE_INLINE 
+ACE_INLINE
 RTCORBA::ClientProtocolPolicy_var::operator const ::RTCORBA::ClientProtocolPolicy_ptr &() const // cast
 {
   return this->ptr_;
 }
 
-ACE_INLINE 
-RTCORBA::ClientProtocolPolicy_var::operator ::RTCORBA::ClientProtocolPolicy_ptr &() // cast 
+ACE_INLINE
+RTCORBA::ClientProtocolPolicy_var::operator ::RTCORBA::ClientProtocolPolicy_ptr &() // cast
 {
   return this->ptr_;
 }
@@ -3127,7 +3542,7 @@
   return *this;
 }
 
-ACE_INLINE 
+ACE_INLINE
 RTCORBA::ClientProtocolPolicy_out::operator ::RTCORBA::ClientProtocolPolicy_ptr &() // cast
 {
   return this->ptr_;
@@ -3148,6 +3563,14 @@
 
 #endif /* end #if !defined */
 
+ACE_INLINE
+RTCORBA::Current::Current (void) // default constructor
+{}
+
+ACE_INLINE
+RTCORBA::Current::~Current (void) // destructor
+{}
+
 
 #if !defined (_RTCORBA_CURRENT___VAR_CI_)
 #define _RTCORBA_CURRENT___VAR_CI_
@@ -3203,14 +3626,14 @@
   return *this;
 }
 
-ACE_INLINE 
+ACE_INLINE
 RTCORBA::Current_var::operator const ::RTCORBA::Current_ptr &() const // cast
 {
   return this->ptr_;
 }
 
-ACE_INLINE 
-RTCORBA::Current_var::operator ::RTCORBA::Current_ptr &() // cast 
+ACE_INLINE
+RTCORBA::Current_var::operator ::RTCORBA::Current_ptr &() // cast
 {
   return this->ptr_;
 }
@@ -3302,7 +3725,7 @@
   return *this;
 }
 
-ACE_INLINE 
+ACE_INLINE
 RTCORBA::Current_out::operator ::RTCORBA::Current_ptr &() // cast
 {
   return this->ptr_;
@@ -3323,6 +3746,14 @@
 
 #endif /* end #if !defined */
 
+ACE_INLINE
+RTCORBA::Mutex::Mutex (void) // default constructor
+{}
+
+ACE_INLINE
+RTCORBA::Mutex::~Mutex (void) // destructor
+{}
+
 
 #if !defined (_RTCORBA_MUTEX___VAR_CI_)
 #define _RTCORBA_MUTEX___VAR_CI_
@@ -3378,14 +3809,14 @@
   return *this;
 }
 
-ACE_INLINE 
+ACE_INLINE
 RTCORBA::Mutex_var::operator const ::RTCORBA::Mutex_ptr &() const // cast
 {
   return this->ptr_;
 }
 
-ACE_INLINE 
-RTCORBA::Mutex_var::operator ::RTCORBA::Mutex_ptr &() // cast 
+ACE_INLINE
+RTCORBA::Mutex_var::operator ::RTCORBA::Mutex_ptr &() // cast
 {
   return this->ptr_;
 }
@@ -3477,7 +3908,7 @@
   return *this;
 }
 
-ACE_INLINE 
+ACE_INLINE
 RTCORBA::Mutex_out::operator ::RTCORBA::Mutex_ptr &() // cast
 {
   return this->ptr_;
@@ -3498,9 +3929,13 @@
 
 #endif /* end #if !defined */
 
-// *************************************************************
-// Inline operations for exception RTCORBA::RTORB::InvalidThreadpool
-// *************************************************************
+ACE_INLINE
+RTCORBA::RTORB::RTORB (void) // default constructor
+{}
+
+ACE_INLINE
+RTCORBA::RTORB::~RTORB (void) // destructor
+{}
 
 
 #if !defined (_RTCORBA_RTORB___VAR_CI_)
@@ -3557,14 +3992,14 @@
   return *this;
 }
 
-ACE_INLINE 
+ACE_INLINE
 RTCORBA::RTORB_var::operator const ::RTCORBA::RTORB_ptr &() const // cast
 {
   return this->ptr_;
 }
 
-ACE_INLINE 
-RTCORBA::RTORB_var::operator ::RTCORBA::RTORB_ptr &() // cast 
+ACE_INLINE
+RTCORBA::RTORB_var::operator ::RTCORBA::RTORB_ptr &() // cast
 {
   return this->ptr_;
 }
@@ -3656,7 +4091,7 @@
   return *this;
 }
 
-ACE_INLINE 
+ACE_INLINE
 RTCORBA::RTORB_out::operator ::RTCORBA::RTORB_ptr &() // cast
 {
   return this->ptr_;
@@ -3677,6 +4112,10 @@
 
 #endif /* end #if !defined */
 
+// *************************************************************
+// Inline operations for exception RTCORBA::RTORB::InvalidThreadpool
+// *************************************************************
+
 ACE_INLINE CORBA::Boolean operator<< (TAO_OutputCDR &strm, const RTCORBA::ThreadpoolLane &_tao_aggregate)
 {
   if (
@@ -3687,7 +4126,7 @@
     return 1;
   else
     return 0;
-  
+
 }
 
 ACE_INLINE CORBA::Boolean operator>> (TAO_InputCDR &strm, RTCORBA::ThreadpoolLane &_tao_aggregate)
@@ -3700,7 +4139,7 @@
     return 1;
   else
     return 0;
-  
+
 }
 
 
@@ -3744,7 +4183,7 @@
     return 1;
   else
     return 0;
-  
+
 }
 
 ACE_INLINE CORBA::Boolean operator>> (TAO_InputCDR &strm, RTCORBA::PriorityBand &_tao_aggregate)
@@ -3756,7 +4195,7 @@
     return 1;
   else
     return 0;
-  
+
 }
 
 
@@ -3773,4 +4212,3 @@
   );
 
 #endif /* _TAO_CDR_OP_RTCORBA_PriorityBands_I_ */
-
