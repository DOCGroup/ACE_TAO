/* -*- C++ -*- */
// $Id$

// ============================================================================
//
// = LIBRARY
//    TAO
//
// = FILENAME
//    WrongTransactionC.h
//
// = AUTHOR
//
// ******  Code generated by the The ACE ORB (TAO) IDL Compiler *******
// TAO and the TAO IDL Compiler have been developed by the Center for
// Distributed Object Computing at Washington University, St. Louis.
//
// Information about TAO is available at:
//                 http://www.cs.wustl.edu/~schmidt/TAO.html

#ifndef TAO_IDL_WRONG_TRANSACTIONC_H
#define TAO_IDL_WRONG_TRANSACTIONC_H

#include "tao/corbafwd.h"

#if ! defined (TAO_HAS_MINIMUM_CORBA)

#include "tao/Exception.h"


#if !defined (ACE_LACKS_PRAGMA_ONCE)
# pragma once
#endif /* ACE_LACKS_PRAGMA_ONCE */


#if defined (TAO_EXPORT_MACRO)
#undef TAO_EXPORT_MACRO
#endif
#define TAO_EXPORT_MACRO 
#if defined(_MSC_VER)
#pragma warning(disable:4250)
#endif /* _MSC_VER */

class TAO_Export CORBA_WrongTransaction : public CORBA::UserException
{
// = TITLE
//   Exception class generated by the TAO IDL compiler.
//
// = DESCRIPTION
//   This exception is thrown if a CORBA Request is implicitly
//   associated with a transaction and is found to have an
//   error in its parameters when checked at runtime (invocation).
public:
    
  CORBA_WrongTransaction (void); // default ctor
  CORBA_WrongTransaction (const CORBA_WrongTransaction &); // copy ctor
  ~CORBA_WrongTransaction (void); // dtor
  CORBA_WrongTransaction &operator= (const CORBA_WrongTransaction &);


  virtual void _raise (void);

  static CORBA_WrongTransaction *_narrow (CORBA::Exception *);


  // = TAO extension
  static CORBA::Exception *_alloc (void);

}; // exception CORBA::WrongTransaction

#if defined(_MSC_VER)
#pragma warning(default:4250)
#endif /* _MSC_VER */

#endif /* ! defined TAO_HAS_MINIMUM_CORBA */

#endif /* ifndef TAO_IDL_WRONG_TRANSACTIONC_H */
