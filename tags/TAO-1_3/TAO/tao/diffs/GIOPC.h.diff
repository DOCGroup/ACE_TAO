--- orig/GIOPC.h	Thu Jan 10 11:45:43 2002
+++ GIOPC.h	Thu Jan 10 11:36:27 2002
@@ -1,36 +1,51 @@
-// -*- C++ -*-
-//
-// $Id$
+/* -*- C++ -*- $Id$ */
+
 
-// ****  Code generated by the The ACE ORB (TAO) IDL Compiler ****
-// TAO and the TAO IDL Compiler have been developed by:
-//       Center for Distributed Object Computing
-//       Washington University
-//       St. Louis, MO
-//       USA
-//       http://www.cs.wustl.edu/~schmidt/doc-center.html
-// and
-//       Distributed Object Computing Laboratory
-//       University of California at Irvine
-//       Irvine, CA
-//       USA
-//       http://doc.ece.uci.edu/
+//=============================================================================
+/**
+ *  @file   GIOPC.h
+ *
+ *  $Id$
+
+ *
+ * Generated from GIOP1_2.pidl, that contains a part of the new data
+ * type definitions for GIOP1.2 module.
+ * The code was generated by the IDL compiler and then hand-crafted
+ * to reduce the includes interdependencies.
+ * hand crafted by Balachandran Natarajan <bala@cs.wustl.edu>
+ *
+ */
+//=============================================================================
+
+// ******  Code generated by the The ACE ORB (TAO) IDL Compiler *******
+// TAO and the TAO IDL Compiler have been developed by the Center for
+// Distributed Object Computing at Washington University, St. Louis.
 //
 // Information about TAO is available at:
-//     http://www.cs.wustl.edu/~schmidt/TAO.html
+//                 http://www.cs.wustl.edu/~schmidt/TAO.html
+
+// Readers Note:
+// This file is named GIOPC.h intentionally. Shortly the file GIOP.h
+// in $TAO_ROOT/ta would dissappear giving way to new files once the
+// pluggable messaging stuff is done. So I would assume that there
+// should be no such name clashes.
 
 #ifndef _TAO_IDL_GIOPC_H_
 #define _TAO_IDL_GIOPC_H_
-
 #include "ace/pre.h"
-#include "tao/corba.h"
+
+#include "tao/corbafwd.h"
+#include "tao/IOPC.h"
+#include "tao/Object_KeyC.h"
+
+#if defined (ACE_HAS_MINIMUM_IOSTREAMH_INCLUSION)
+#include "ace/streams.h"
+#endif /* ACE_HAS_MINIMUM_IOSTREAMH_INCLUSION */
 
 #if !defined (ACE_LACKS_PRAGMA_ONCE)
 # pragma once
 #endif /* ACE_LACKS_PRAGMA_ONCE */
 
-#include "tao/TAO_Export.h"
-#include "IOPC.h"
 
 #if defined (TAO_EXPORT_MACRO)
 #undef TAO_EXPORT_MACRO
@@ -51,122 +66,61 @@
 #pragma warning(disable:4250)
 #endif /* _MSC_VER */
 
-#if defined (__BORLANDC__)
-#pragma option push -w-rvl -w-rch -w-ccc -w-inl
-#endif /* __BORLANDC__ */
-
 TAO_NAMESPACE  GIOP
 {
   typedef CORBA::Short AddressingDisposition;
   typedef CORBA::Short_out AddressingDisposition_out;
-  TAO_NAMESPACE_STORAGE_CLASS ::CORBA::TypeCode_ptr _tc_AddressingDisposition;
-  
+    TAO_NAMESPACE_STORAGE_CLASS CORBA::TypeCode_ptr _tc_AddressingDisposition;
+
   TAO_NAMESPACE_STORAGE_CLASS const CORBA::Short KeyAddr;
-  
+
   TAO_NAMESPACE_STORAGE_CLASS const CORBA::Short ProfileAddr;
-  
+
   TAO_NAMESPACE_STORAGE_CLASS const CORBA::Short ReferenceAddr;
-  
-  struct Version;
-  class Version_var;
-  
-  struct TAO_Export Version
-  {
-    
-#if !defined(__GNUC__) || !defined (ACE_HAS_GNUG_PRE_2_8)
-    typedef Version_var _var_type;
-#endif /* ! __GNUC__ || g++ >= 2.8 */
 
-    static void _tao_any_destructor (void*);
-    
-    CORBA::Octet major;
-    CORBA::Octet minor;
-    
-  };
-  
-  class TAO_Export Version_var
-  {
-  public:
-    Version_var (void);
-    Version_var (Version *);
-    Version_var (const Version_var &);
-    // Fixed-size types only.
-    Version_var (const Version &);
-    ~Version_var (void);
-    
-    Version_var &operator= (Version *);
-    Version_var &operator= (const Version_var &);
-    // Fixed-size types only.
-    Version_var &operator= (const Version &);
-    Version *operator-> (void);
-    const Version *operator-> (void) const;
-    
-    operator const Version &() const;
-    operator Version &();
-    operator Version &() const;
-    
-    // in, inout, out, _retn 
-    const Version &in (void) const;
-    Version &inout (void);
-    Version &out (void);
-    Version _retn (void);
-    Version *ptr (void) const;
-  
-  private:
-    Version *ptr_;
-  };
-  
-  typedef Version &Version_out;
-  
-  TAO_NAMESPACE_STORAGE_CLASS ::CORBA::TypeCode_ptr _tc_Version;
-  
+
   struct IORAddressingInfo;
   class IORAddressingInfo_var;
-  
+
   struct TAO_Export IORAddressingInfo
   {
-    
+
 #if !defined(__GNUC__) || !defined (ACE_HAS_GNUG_PRE_2_8)
     typedef IORAddressingInfo_var _var_type;
 #endif /* ! __GNUC__ || g++ >= 2.8 */
-
     static void _tao_any_destructor (void*);
-    
+
     CORBA::ULong selected_profile_index;
     IOP::IOR ior;
-    
   };
-  
+
   class TAO_Export IORAddressingInfo_var
   {
   public:
-    IORAddressingInfo_var (void);
+    IORAddressingInfo_var (void); // default constructor
     IORAddressingInfo_var (IORAddressingInfo *);
-    IORAddressingInfo_var (const IORAddressingInfo_var &);
-    ~IORAddressingInfo_var (void);
-    
+    IORAddressingInfo_var (const IORAddressingInfo_var &); // copy constructor
+    ~IORAddressingInfo_var (void); // destructor
+
     IORAddressingInfo_var &operator= (IORAddressingInfo *);
     IORAddressingInfo_var &operator= (const IORAddressingInfo_var &);
     IORAddressingInfo *operator-> (void);
     const IORAddressingInfo *operator-> (void) const;
-    
+
     operator const IORAddressingInfo &() const;
     operator IORAddressingInfo &();
     operator IORAddressingInfo &() const;
-    // Variable-size types only.
-    operator IORAddressingInfo *&();
-    
-    // in, inout, out, _retn 
+    // in, inout, out, _retn
     const IORAddressingInfo &in (void) const;
     IORAddressingInfo &inout (void);
     IORAddressingInfo *&out (void);
     IORAddressingInfo *_retn (void);
     IORAddressingInfo *ptr (void) const;
-  
+
   private:
     IORAddressingInfo *ptr_;
   };
-  
+
   class TAO_Export IORAddressingInfo_out
   {
   public:
@@ -178,226 +132,188 @@
     operator IORAddressingInfo *&();
     IORAddressingInfo *&ptr (void);
     IORAddressingInfo *operator-> (void);
-    
+
   private:
     IORAddressingInfo *&ptr_;
-    // Assignment from T_var not allowed.
+    // assignment from T_var not allowed
     void operator= (const IORAddressingInfo_var &);
   };
-  
-  TAO_NAMESPACE_STORAGE_CLASS ::CORBA::TypeCode_ptr _tc_IORAddressingInfo;
-  
-  
-#if !defined (_GIOP_TARGETADDRESS_CH_)
-#define _GIOP_TARGETADDRESS_CH_
-  
+
+  TAO_NAMESPACE_STORAGE_CLASS CORBA::TypeCode_ptr _tc_IORAddressingInfo;
+
+
   class TargetAddress;
   class TargetAddress_var;
-  
+
   class TAO_Export TargetAddress
   {
   public:
-    TargetAddress (void);
-    TargetAddress (const TargetAddress &);
-    ~TargetAddress (void);
-    static void _tao_any_destructor (void*);
-    
-    TargetAddress &operator= (const TargetAddress &);
-    
+    TargetAddress (void); // default constructor
+    TargetAddress (const TargetAddress &); // copy constructor
+    ~TargetAddress (void); // destructor
+    TargetAddress &operator= (const TargetAddress &); // copy constructor
+
     void _d (CORBA::Short);
     CORBA::Short _d (void) const;
-    
+
 #if !defined(__GNUC__) || !defined (ACE_HAS_GNUG_PRE_2_8)
     typedef TargetAddress_var _var_type;
 #endif /* ! __GNUC__ || g++ >= 2.8 */
-    
-    
-#if !defined (_GIOP_TARGETADDRESS__TAO_SEQ_OCTET_CH_)
-#define _GIOP_TARGETADDRESS__TAO_SEQ_OCTET_CH_
-    
-    class _tao_seq_Octet;
-    
-    // *************************************************************
-    // _tao_seq_Octet
-    // *************************************************************
-    
-    class TAO_Export _tao_seq_Octet : public 
-#if !defined (TAO_USE_SEQUENCE_TEMPLATES)
-    TAO_Unbounded_Sequence<CORBA::Octet>
-#else /* TAO_USE_SEQUENCE_TEMPLATES */
-    TAO_Unbounded_Sequence<CORBA::Octet>
-#endif /* !TAO_USE_SEQUENCE_TEMPLATES */ 
-    {
-    public:
-      _tao_seq_Octet (void); // default ctor
-      _tao_seq_Octet (CORBA::ULong max); // uses max size
-      _tao_seq_Octet (
-          CORBA::ULong max, 
-          CORBA::ULong length, 
-          CORBA::Octet *buffer, 
-          CORBA::Boolean release = 0
-        );
-      _tao_seq_Octet (const _tao_seq_Octet &); // copy ctor
-      ~_tao_seq_Octet (void);
-      static void _tao_any_destructor (void*);
-      
-#if (TAO_NO_COPY_OCTET_SEQUENCES == 1)
-      _tao_seq_Octet (
-          CORBA::ULong length,
-          const ACE_Message_Block* mb
-        )
-        : TAO_Unbounded_Sequence<CORBA::Octet> (length, mb) {}
-#endif /* TAO_NO_COPY_OCTET_SEQUENCE == 1 */
-      
-    };
-    
-#endif /* end #if !defined */
-    
-    
-#if !defined (__GNUC__) || !defined (ACE_HAS_GNUG_PRE_2_8)
-    typedef _tao_seq_Octet _object_key_seq;
-#endif /* ! __GNUC__ || ACE_HAS_GNUG_PRE_2_8 */
-    
-    void object_key (const _tao_seq_Octet &);
-    const _tao_seq_Octet &object_key (void) const;
-    _tao_seq_Octet &object_key (void);
-    
-    void profile (const IOP::TaggedProfile &);
-    const IOP::TaggedProfile &profile (void) const;
-    IOP::TaggedProfile &profile (void);
-    
-    void ior (const ACE_NESTED_CLASS (GIOP, IORAddressingInfo) &);
-    const ACE_NESTED_CLASS (GIOP, IORAddressingInfo) &ior (void) const;
-    ACE_NESTED_CLASS (GIOP, IORAddressingInfo) &ior (void);
-    
-    void _default (void);
+    static void _tao_any_destructor (void*);
+
+
+    void object_key (const TAO_ObjectKey &);// set
+    const TAO_ObjectKey &object_key (void) const; // get method (read only)
+    TAO_ObjectKey &object_key (void); // get method (read/write only)
+
+    void profile (const IOP::TaggedProfile &);// set
+    const IOP::TaggedProfile &profile (void) const; // get method (read only)
+    IOP::TaggedProfile &profile (void); // get method (read/write only)
+
+    void ior (const ACE_NESTED_CLASS (GIOP, IORAddressingInfo) &);// set
+    const ACE_NESTED_CLASS (GIOP, IORAddressingInfo) &ior (void) const; // get method (read only)
+    ACE_NESTED_CLASS (GIOP, IORAddressingInfo) &ior (void); // get method (read/write only)
+
+    void _default ();
   private:
     CORBA::Short disc_;
-    CORBA::Short holder_;
-    
     union
     {
-      _tao_seq_Octet *object_key_;
+      TAO_ObjectKey *object_key_;
       IOP::TaggedProfile *profile_;
       ACE_NESTED_CLASS (GIOP, IORAddressingInfo) *ior_;
-      
-    } u_;
-    
-    // TAO extension.
-    void _reset (CORBA::Short, CORBA::Boolean /* finalize */);
-    // Frees any allocated storage.
-    
-    }; //GIOP::TargetAddress
-    
-    TAO_NAMESPACE_STORAGE_CLASS ::CORBA::TypeCode_ptr _tc_TargetAddress;
-    
-    
-#endif /* end #if !defined */
-    
-    
-#if !defined (_GIOP_TARGETADDRESS___VAR_CH_)
-#define _GIOP_TARGETADDRESS___VAR_CH_
-    
-    class TAO_Export TargetAddress_var
-    {
-    public:
-      TargetAddress_var (void);
-      TargetAddress_var (TargetAddress *);
-      TargetAddress_var (const TargetAddress_var &);
-      ~TargetAddress_var (void);
-      
-      TargetAddress_var &operator= (TargetAddress *);
-      TargetAddress_var &operator= (const TargetAddress_var &);
-      TargetAddress *operator-> (void);
-      const TargetAddress *operator-> (void) const;
-      
-      operator const TargetAddress &() const;
-      operator TargetAddress &();
-      operator TargetAddress &() const;
-        // Variable size types only.
-      operator TargetAddress *&();
-      
-      // in, inout, out, _retn 
-      const TargetAddress &in (void) const;
-      TargetAddress &inout (void);
-      TargetAddress *&out (void);
-      TargetAddress *_retn (void);
-      TargetAddress *ptr (void) const;
-    
-    private:
-      TargetAddress *ptr_;
-    };
-    
-    
-#endif /* end #if !defined */
-    
-    
-#if !defined (_GIOP_TARGETADDRESS___OUT_CH_)
-#define _GIOP_TARGETADDRESS___OUT_CH_
-    
-    class TAO_Export TargetAddress_out
-    {
-    public:
-      TargetAddress_out (TargetAddress *&);
-      TargetAddress_out (TargetAddress_var &);
-      TargetAddress_out (const TargetAddress_out &);
-      TargetAddress_out &operator= (const TargetAddress_out &);
-      TargetAddress_out &operator= (TargetAddress *);
-      operator TargetAddress *&();
-      TargetAddress *&ptr (void);
-      TargetAddress *operator-> (void);
-      
-    private:
-      TargetAddress *&ptr_;
-      // assignment from T_var not allowed.
-      void operator= (const TargetAddress_var &);
-    };
-    
-    
-#endif /* end #if !defined */
-    
-    
-  }
-TAO_NAMESPACE_CLOSE // module GIOP
+    } u_; // end of union
+  // TAO extensions
+  void _reset (CORBA::Short, CORBA::Boolean);
+  // Frees any allocated storage
+
+  void _reset (void);
+  // calls the above reset with finalize=1
+
+}; // GIOP::TargetAddress
+
+TAO_NAMESPACE_STORAGE_CLASS CORBA::TypeCode_ptr _tc_TargetAddress;
+
+class TAO_Export TargetAddress_var
+{
+public:
+  TargetAddress_var (void); // default constructor
+  TargetAddress_var (TargetAddress *);
+  TargetAddress_var (const TargetAddress_var &); // copy constructor
+  ~TargetAddress_var (void); // destructor
+
+  TargetAddress_var &operator= (TargetAddress *);
+  TargetAddress_var &operator= (const TargetAddress_var &);
+  TargetAddress *operator-> (void);
+  const TargetAddress *operator-> (void) const;
+
+  operator const TargetAddress &() const;
+  operator TargetAddress &();
+  operator TargetAddress &() const;
+  // in, inout, out, _retn
+  const TargetAddress &in (void) const;
+  TargetAddress &inout (void);
+  TargetAddress *&out (void);
+  TargetAddress *_retn (void);
+  TargetAddress *ptr(void) const;
+
+private:
+  TargetAddress *ptr_;
+};
+
+class TAO_Export TargetAddress_out
+{
+public:
+  TargetAddress_out (TargetAddress *&);
+  TargetAddress_out (TargetAddress_var &);
+  TargetAddress_out (const TargetAddress_out &);
+  TargetAddress_out &operator= (const TargetAddress_out &);
+  TargetAddress_out &operator= (TargetAddress *);
+  operator TargetAddress *&();
+  TargetAddress *&ptr (void);
+  TargetAddress *operator-> (void);
+
+private:
+  TargetAddress *&ptr_;
+  // assignment from T_var not allowed
+  void operator= (const TargetAddress_var &);
+};
+
+// We dont have the _var _out for this struct. If need arises we can
+// add them later. For the present the Version struct alone should be
+// sufficient
+struct TAO_Export Version
+{
+  CORBA::Octet major;
+  CORBA::Octet minor;
+};
 
-    TAO_Export void operator<<= (CORBA::Any &, const GIOP::Version &); // copying version
-  TAO_Export void operator<<= (CORBA::Any &, GIOP::Version*); // noncopying version
-  TAO_Export CORBA::Boolean operator>>= (const CORBA::Any &, GIOP::Version *&); // deprecated
-TAO_Export CORBA::Boolean operator>>= (const CORBA::Any &, const GIOP::Version *&);
-  TAO_Export void operator<<= (CORBA::Any &, const GIOP::IORAddressingInfo &); // copying version
-  TAO_Export void operator<<= (CORBA::Any &, GIOP::IORAddressingInfo*); // noncopying version
-  TAO_Export CORBA::Boolean operator>>= (const CORBA::Any &, GIOP::IORAddressingInfo *&); // deprecated
-TAO_Export CORBA::Boolean operator>>= (const CORBA::Any &, const GIOP::IORAddressingInfo *&);
-  TAO_Export void operator<<= (CORBA::Any &, const GIOP::TargetAddress &); // copying version
-  TAO_Export void operator<<= (CORBA::Any &, GIOP::TargetAddress*); // noncopying version
-  TAO_Export CORBA::Boolean operator>>= (const CORBA::Any &, GIOP::TargetAddress *&); // deprecated
-TAO_Export CORBA::Boolean operator>>= (const CORBA::Any &, const GIOP::TargetAddress *&);
-
-  #ifndef __ACE_INLINE__
-
-    TAO_Export CORBA::Boolean operator<< (TAO_OutputCDR &, const GIOP::Version &);
-  TAO_Export CORBA::Boolean operator>> (TAO_InputCDR &, GIOP::Version &);
-  TAO_Export CORBA::Boolean operator<< (TAO_OutputCDR &, const GIOP::IORAddressingInfo &);
-  TAO_Export CORBA::Boolean operator>> (TAO_InputCDR &, GIOP::IORAddressingInfo &);
-  TAO_Export CORBA::Boolean operator<< (TAO_OutputCDR &, const GIOP::TargetAddress &);
-  TAO_Export CORBA::Boolean operator>> (TAO_InputCDR &, GIOP::TargetAddress &);
-
-#if !defined _TAO_CDR_OP_GIOP_TargetAddress__tao_seq_Octet_H_
-  #define _TAO_CDR_OP_GIOP_TargetAddress__tao_seq_Octet_H_
-
-TAO_Export CORBA::Boolean operator<< (
-      TAO_OutputCDR &,
-      const GIOP::TargetAddress::_tao_seq_Octet &
-    );
-  TAO_Export CORBA::Boolean operator>> (
-      TAO_InputCDR &,
-      GIOP::TargetAddress::_tao_seq_Octet &
-    );
+class  TAO_Export Version_var
+{
+public:
+  Version_var (void);
+  Version_var (Version *);
+  Version_var (const Version_var &);
+  // Fixed-size types only.
+  Version_var (const Version &);
+  ~Version_var (void);
+
+  Version_var &operator= (Version *);
+  Version_var &operator= (const Version_var &);
+  // Fixed-size types only.
+  Version_var &operator= (const Version &);
+  Version *operator-> (void);
+  const Version *operator-> (void) const;
+
+  operator const Version &() const;
+  operator Version &();
+  operator Version &() const;
+
+  // in, inout, out, _retn
+  const Version &in (void) const;
+  Version &inout (void);
+  Version &out (void);
+  Version _retn (void);
+  Version *ptr (void) const;
+
+private:
+  Version *ptr_;
+};
 
-#endif /* _TAO_CDR_OP_GIOP_TargetAddress__tao_seq_Octet_H_ */
+typedef Version &Version_out;
 
+TAO_NAMESPACE_STORAGE_CLASS ::CORBA::TypeCode_ptr _tc_Version;
 
-  #endif /* __ACE_INLINE__ */
+}
+TAO_NAMESPACE_CLOSE // module GIOP
+
+TAO_Export void operator<<= (CORBA::Any &,
+                             const GIOP::IORAddressingInfo &); // copying version
+TAO_Export void operator<<= (CORBA::Any &,
+                             GIOP::IORAddressingInfo*); // noncopying version
+TAO_Export CORBA::Boolean operator>>= (const CORBA::Any &,
+                                       GIOP::IORAddressingInfo *&); // deprecated
+TAO_Export CORBA::Boolean operator>>= (const CORBA::Any &,
+                                       const GIOP::IORAddressingInfo *&);
+TAO_Export void operator<<= (CORBA::Any &,
+                             const GIOP::TargetAddress &); // copying version
+TAO_Export void operator<<= (CORBA::Any &,
+                             GIOP::TargetAddress*); // noncopying version
+TAO_Export CORBA::Boolean operator>>= (const CORBA::Any &,
+                                       GIOP::TargetAddress *&); // deprecated
+TAO_Export CORBA::Boolean operator>>= (const CORBA::Any &,
+                                       const GIOP::TargetAddress *&);
+
+#ifndef __ACE_INLINE__
+
+TAO_Export CORBA::Boolean operator<< (TAO_OutputCDR &, const GIOP::IORAddressingInfo &);
+TAO_Export CORBA::Boolean operator>> (TAO_InputCDR &, GIOP::IORAddressingInfo &);
+TAO_Export CORBA::Boolean operator<< (TAO_OutputCDR &, const GIOP::TargetAddress &); //
+TAO_Export CORBA::Boolean operator>> (TAO_InputCDR &, GIOP::TargetAddress &);
+TAO_Export CORBA::Boolean operator<< (TAO_OutputCDR &, const GIOP::Version &);
+TAO_Export CORBA::Boolean operator>> (TAO_InputCDR &, GIOP::Version &);
+
+#endif /* __ACE_INLINE__ */
 
 
 #if defined (__ACE_INLINE__)
@@ -407,10 +323,6 @@
 #if defined(_MSC_VER) && (_MSC_VER >= 1200)
 #pragma warning(pop)
 #endif /* _MSC_VER */
-
-#if defined (__BORLANDC__)
-#pragma option pop
-#endif /* __BORLANDC__ */
 
 #include "ace/post.h"
 #endif /* ifndef */
