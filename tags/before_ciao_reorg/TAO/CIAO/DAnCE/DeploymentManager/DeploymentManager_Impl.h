// $Id$
//
// ****              Code generated by the                 ****
// ****  Component Integrated ACE ORB (CIAO) CIDL Compiler ****
// CIAO has been developed by:
//       Center for Distributed Object Computing
//       Washington University
//       St. Louis, MO
//       USA
//       http://www.cs.wustl.edu/~schmidt/doc-center.html
// CIDL Compiler has been developed by:
//       Institute for Software Integrated Systems
//       Vanderbilt University
//       Nashville, TN
//       USA
//       http://www.isis.vanderbilt.edu/
//
// Information about CIAO is available at:
//    http://www.dre.vanderbilt.edu/CIAO

#ifndef CIAO_DEPLOYMENTMANAGER_EXEC_H
#define CIAO_DEPLOYMENTMANAGER_EXEC_H

#include /**/ "ace/pre.h"

#include "DeploymentManager_svnt.h"

#if !defined (ACE_LACKS_PRAGMA_ONCE)
# pragma once
#endif /* ACE_LACKS_PRAGMA_ONCE */

#include "DeploymentManager_exec_export.h"
#include "tao/LocalObject.h"

namespace CIAO
{
  namespace RACE
  {
    namespace CIDL_AllocationManager_Impl
    {
      class DEPLOYMENTMANAGER_EXEC_Export AllocationManager_exec_i
      : public virtual AllocationManager_Exec,
      public virtual TAO_Local_RefCounted_Object
      {
        public:
        AllocationManager_exec_i (void);
        virtual ~AllocationManager_exec_i (void);

        // Supported or inherited operations.

        virtual void
        generate_deployment (
        const ::Deployment::DeploymentPlan & plan
        ACE_ENV_ARG_DECL_WITH_DEFAULTS)
        ACE_THROW_SPEC ((CORBA::SystemException));

        // Attribute operations.

        virtual char *
        em_ior (
        ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)
        ACE_THROW_SPEC ((CORBA::SystemException));

        virtual void
        em_ior (
        const char *
        ACE_ENV_ARG_DECL_WITH_DEFAULTS)
        ACE_THROW_SPEC ((CORBA::SystemException));

        // Port operations.

        // Operations from Components::SessionComponent

        virtual void
        set_session_context (
        ::Components::SessionContext_ptr ctx
        ACE_ENV_ARG_DECL_WITH_DEFAULTS)
        ACE_THROW_SPEC ((
        ::CORBA::SystemException,
        ::Components::CCMException));

        virtual void
        ciao_preactivate (
        ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)
        ACE_THROW_SPEC ((
        ::CORBA::SystemException,
        ::Components::CCMException));

        virtual void
        ciao_postactivate (
        ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)
        ACE_THROW_SPEC ((
        ::CORBA::SystemException,
        ::Components::CCMException));

        virtual void
        ccm_activate (
        ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)
        ACE_THROW_SPEC ((
        ::CORBA::SystemException,
        ::Components::CCMException));

        virtual void
        ccm_passivate (
        ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)
        ACE_THROW_SPEC ((
        ::CORBA::SystemException,
        ::Components::CCMException));

        virtual void
        ccm_remove (
        ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)
        ACE_THROW_SPEC ((
        ::CORBA::SystemException,
        ::Components::CCMException));

        protected:
        AllocationManager_Context *context_;
      };

      class DEPLOYMENTMANAGER_EXEC_Export AllocationManagerHome_exec_i
      : public virtual AllocationManager,
      public virtual TAO_Local_RefCounted_Object
      {
        public:
        AllocationManagerHome_exec_i (void);
        virtual ~AllocationManagerHome_exec_i (void);

        // Supported or inherited operations.

        // Home operations.

        // Factory and finder operations.

        // Attribute operations.

        // Implicit operations.

        virtual ::Components::EnterpriseComponent_ptr
        create (
        ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)
        ACE_THROW_SPEC ((
        ::CORBA::SystemException,
        ::Components::CCMException));
      };

      extern "C" DEPLOYMENTMANAGER_EXEC_Export ::Components::HomeExecutorBase_ptr
      createAllocationManagerHome_Impl (void);
    }
  }
}

#include /**/ "ace/post.h"

#endif /* CIAO_DEPLOYMENTMANAGER_EXEC_H */

