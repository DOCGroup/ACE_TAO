// -*- C++ -*-
/**
 * Code generated by the The ACE ORB (TAO) IDL Compiler v2.4.1
 * TAO and the TAO IDL Compiler have been developed by:
 *       Center for Distributed Object Computing
 *       Washington University
 *       St. Louis, MO
 *       USA
 *       http://www.cs.wustl.edu/~schmidt/doc-center.html
 * and
 *       Distributed Object Computing Laboratory
 *       University of California at Irvine
 *       Irvine, CA
 *       USA
 * and
 *       Institute for Software Integrated Systems
 *       Vanderbilt University
 *       Nashville, TN
 *       USA
 *       http://www.isis.vanderbilt.edu/
 *
 * Information about TAO is available at:
 *     http://www.dre.vanderbilt.edu/~schmidt/TAO.html
 **/

// TAO_IDL - Generated from
// be/be_codegen.cpp:149

#ifndef _TAO_IDL_TESTSC_X5KDEY_H_
#define _TAO_IDL_TESTSC_X5KDEY_H_

#include /**/ "ace/pre.h"


#include /**/ "ace/config-all.h"

#if !defined (ACE_LACKS_PRAGMA_ONCE)
# pragma once
#endif /* ACE_LACKS_PRAGMA_ONCE */


#include "tao/ORB.h"
#include "tao/SystemException.h"
#include "tao/Basic_Types.h"
#include "tao/ORB_Constants.h"
#include "tao/Object.h"
#include "tao/AnyTypeCode/TypeCode.h"
#include "tao/AnyTypeCode/TypeCode_Constants.h"
#include "tao/String_Manager_T.h"
#include "tao/Objref_VarOut_T.h"
#include "tao/Arg_Traits_T.h"
#include "tao/Basic_Arguments.h"
#include "tao/Special_Basic_Arguments.h"
#include "tao/Any_Insert_Policy_T.h"
#include "tao/Fixed_Size_Argument_T.h"
#include "tao/Var_Size_Argument_T.h"
#include "tao/Object_Argument_T.h"
#include "tao/UB_String_Arguments.h"
#include /**/ "tao/Version.h"
#include /**/ "tao/Versioned_Namespace.h"

#include "tao/PortableInterceptorC.h"
#include "tao/PI_Server/PI_Server_includeC.h"
#include "testC.h"

#if TAO_MAJOR_VERSION != 2 || TAO_MINOR_VERSION != 4 || TAO_MICRO_VERSION != 1
#error This file should be regenerated with TAO_IDL
#endif

#if defined (TAO_EXPORT_MACRO)
#undef TAO_EXPORT_MACRO
#endif
#define TAO_EXPORT_MACRO 

// TAO_IDL - Generated from
// be/be_interface.cpp:748

#if !defined (_SIMPLE_SERVERREQUESTINTERCEPTOR__VAR_OUT_CH_)
#define _SIMPLE_SERVERREQUESTINTERCEPTOR__VAR_OUT_CH_

class Simple_ServerRequestInterceptor;
typedef Simple_ServerRequestInterceptor *Simple_ServerRequestInterceptor_ptr;

typedef
  TAO_Objref_Var_T<
      Simple_ServerRequestInterceptor
    >
  Simple_ServerRequestInterceptor_var;

typedef
  TAO_Objref_Out_T<
      Simple_ServerRequestInterceptor
    >
  Simple_ServerRequestInterceptor_out;

#endif /* end #if !defined */

// TAO_IDL - Generated from
// be/be_visitor_interface/interface_ch.cpp:40

class  Simple_ServerRequestInterceptor
  : public virtual ::PortableInterceptor::ServerRequestInterceptor

{
public:

  // TAO_IDL - Generated from
  // be/be_type.cpp:304

  typedef Simple_ServerRequestInterceptor_ptr _ptr_type;
  typedef Simple_ServerRequestInterceptor_var _var_type;
  typedef Simple_ServerRequestInterceptor_out _out_type;

  // The static operations.
  static Simple_ServerRequestInterceptor_ptr _duplicate (Simple_ServerRequestInterceptor_ptr obj);

  static void _tao_release (Simple_ServerRequestInterceptor_ptr obj);

  static Simple_ServerRequestInterceptor_ptr _narrow (::CORBA::Object_ptr obj);
  static Simple_ServerRequestInterceptor_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
  static Simple_ServerRequestInterceptor_ptr _nil (void);

  virtual void forward_reference (
    const char * iorstr) = 0;

  // TAO_IDL - Generated from
  // be/be_visitor_interface/interface_ch.cpp:137

  virtual ::CORBA::Boolean _is_a (const char *type_id);
  virtual const char* _interface_repository_id (void) const;
  virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);

protected:
  // Abstract or local interface only.
  Simple_ServerRequestInterceptor (void);

  

  virtual ~Simple_ServerRequestInterceptor (void);

private:
  // Private and unimplemented for concrete interfaces.
  Simple_ServerRequestInterceptor (const Simple_ServerRequestInterceptor &);

  void operator= (const Simple_ServerRequestInterceptor &);
};

// TAO_IDL - Generated from
// be/be_visitor_arg_traits.cpp:66

TAO_BEGIN_VERSIONED_NAMESPACE_DECL


// Arg traits specializations.
namespace TAO
{
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_traits.cpp:60

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Traits specializations.
namespace TAO
{

#if !defined (_SIMPLE_SERVERREQUESTINTERCEPTOR__TRAITS_)
#define _SIMPLE_SERVERREQUESTINTERCEPTOR__TRAITS_

  template<>
  struct  Objref_Traits< ::Simple_ServerRequestInterceptor>
  {
    static ::Simple_ServerRequestInterceptor_ptr duplicate (
        ::Simple_ServerRequestInterceptor_ptr p);
    static void release (
        ::Simple_ServerRequestInterceptor_ptr p);
    static ::Simple_ServerRequestInterceptor_ptr nil (void);
    static ::CORBA::Boolean marshal (
        const ::Simple_ServerRequestInterceptor_ptr p,
        TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */
}
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_codegen.cpp:1700
#if defined (__ACE_INLINE__)
#include "testsC.inl"
#endif /* defined INLINE */

#include /**/ "ace/post.h"

#endif /* ifndef */

