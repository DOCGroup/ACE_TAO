// -*- C++ -*-
/**
 * Code generated by the The ACE ORB (TAO) IDL Compiler v2.4.1
 * TAO and the TAO IDL Compiler have been developed by:
 *       Center for Distributed Object Computing
 *       Washington University
 *       St. Louis, MO
 *       USA
 *       http://www.cs.wustl.edu/~schmidt/doc-center.html
 * and
 *       Distributed Object Computing Laboratory
 *       University of California at Irvine
 *       Irvine, CA
 *       USA
 * and
 *       Institute for Software Integrated Systems
 *       Vanderbilt University
 *       Nashville, TN
 *       USA
 *       http://www.isis.vanderbilt.edu/
 *
 * Information about TAO is available at:
 *     http://www.dre.vanderbilt.edu/~schmidt/TAO.html
 **/

// TAO_IDL - Generated from
// be/be_codegen.cpp:149

#ifndef _TAO_IDL_TESTC_NRZCY6_H_
#define _TAO_IDL_TESTC_NRZCY6_H_

#include /**/ "ace/pre.h"


#include /**/ "ace/config-all.h"

#if !defined (ACE_LACKS_PRAGMA_ONCE)
# pragma once
#endif /* ACE_LACKS_PRAGMA_ONCE */


#include "tao/AnyTypeCode/AnyTypeCode_methods.h"
#include "tao/AnyTypeCode/Any.h"
#include "tao/Valuetype/ValueBase.h"
#include "tao/Valuetype/Valuetype_Adapter_Factory_Impl.h"
#include "tao/Valuetype/ValueFactory.h"
#include "tao/ORB.h"
#include "tao/SystemException.h"
#include "tao/Basic_Types.h"
#include "tao/ORB_Constants.h"
#include "tao/String_Manager_T.h"
#include "tao/Valuetype/Value_VarOut_T.h"
#include "tao/Arg_Traits_T.h"
#include "tao/Basic_Arguments.h"
#include "tao/Special_Basic_Arguments.h"
#include "tao/Any_Insert_Policy_T.h"
#include "tao/Fixed_Size_Argument_T.h"
#include "tao/Var_Size_Argument_T.h"
#include "tao/UB_String_Arguments.h"
#include /**/ "tao/Version.h"
#include /**/ "tao/Versioned_Namespace.h"

#if TAO_MAJOR_VERSION != 2 || TAO_MINOR_VERSION != 4 || TAO_MICRO_VERSION != 1
#error This file should be regenerated with TAO_IDL
#endif

#if defined (TAO_EXPORT_MACRO)
#undef TAO_EXPORT_MACRO
#endif
#define TAO_EXPORT_MACRO 

// TAO_IDL - Generated from
// be/be_visitor_module/module_ch.cpp:35

namespace Components
{

  // TAO_IDL - Generated from
  // be/be_valuetype.cpp:564

  

#if !defined (_COMPONENTS_EVENTBASE__VAR_OUT_CH_)
#define _COMPONENTS_EVENTBASE__VAR_OUT_CH_

  class EventBase;
  typedef
    TAO_Value_Var_T<
        EventBase
      >
    EventBase_var;
  
  typedef
    TAO_Value_Out_T<
        EventBase
      >
    EventBase_out;

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // be/be_visitor_valuetype/valuetype_ch.cpp:50

  class  EventBase
    : public virtual ::CORBA::ValueBase
  {
  public:

    // TAO_IDL - Generated from
    // be/be_type.cpp:304

    typedef EventBase * _ptr_type;
    typedef EventBase_var _var_type;
    typedef EventBase_out _out_type;

    static void _tao_any_destructor (void *);

    static EventBase* _downcast ( ::CORBA::ValueBase *v);
    
    /// TAO extensions or internals
    static ::CORBA::Boolean _tao_unmarshal (
        TAO_InputCDR &strm,
        EventBase *&new_object);
    
    virtual const char* _tao_obv_repository_id (void) const;

    virtual void _tao_obv_truncatable_repo_ids (Repository_Id_List &) const;

    static const char* _tao_obv_static_repository_id (void);

    virtual ::CORBA::TypeCode_ptr _tao_type (void) const;

    // TAO_IDL - Generated from
    // be/be_visitor_valuetype/valuetype_ch.cpp:238
  
  protected:
    EventBase (void);
    virtual ~EventBase (void);

    
  private:
    EventBase (const EventBase &);
    void operator= (const EventBase &);
    
  };

  // TAO_IDL - Generated from
  // be/be_visitor_typecode/typecode_decl.cpp:34

  extern  ::CORBA::TypeCode_ptr const _tc_EventBase;

// TAO_IDL - Generated from
// be/be_visitor_module/module_ch.cpp:64

} // module Components

// TAO_IDL - Generated from
// be/be_visitor_module/module_ch.cpp:35

namespace Hello
{

  // TAO_IDL - Generated from
  // be/be_valuetype.cpp:564

  

#if !defined (_HELLO_VALUETYPEDATA__VAR_OUT_CH_)
#define _HELLO_VALUETYPEDATA__VAR_OUT_CH_

  class ValueTypeData;
  typedef
    TAO_Value_Var_T<
        ValueTypeData
      >
    ValueTypeData_var;
  
  typedef
    TAO_Value_Out_T<
        ValueTypeData
      >
    ValueTypeData_out;

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // be/be_visitor_valuetype/valuetype_ch.cpp:50

  class  ValueTypeData
    : public virtual Components::EventBase
  {
  public:

    // TAO_IDL - Generated from
    // be/be_type.cpp:304

    typedef ValueTypeData * _ptr_type;
    typedef ValueTypeData_var _var_type;
    typedef ValueTypeData_out _out_type;

    static void _tao_any_destructor (void *);

    static ValueTypeData* _downcast ( ::CORBA::ValueBase *v);
    
    /// TAO extensions or internals
    static ::CORBA::Boolean _tao_unmarshal (
        TAO_InputCDR &strm,
        ValueTypeData *&new_object);
    
    virtual const char* _tao_obv_repository_id (void) const;

    virtual void _tao_obv_truncatable_repo_ids (Repository_Id_List &) const;

    static const char* _tao_obv_static_repository_id (void);

    virtual ::CORBA::TypeCode_ptr _tao_type (void) const;
  
  public:

    // TAO_IDL - Generated from
    // be/be_visitor_valuetype/field_ch.cpp:608

    virtual void data (char *val) = 0;
    virtual void data (const char *val) = 0;
    virtual void data (const ::CORBA::String_var &val) = 0;
    virtual const char *data (void) const = 0;

    // TAO_IDL - Generated from
    // be/be_visitor_valuetype/valuetype_ch.cpp:238
  
  protected:
    ValueTypeData (void);
    virtual ~ValueTypeData (void);

    virtual ::CORBA::Boolean _tao_marshal_v (TAO_OutputCDR &) const;
    virtual ::CORBA::Boolean _tao_unmarshal_v (TAO_InputCDR &);
    virtual ::CORBA::Boolean _tao_match_formal_type (ptrdiff_t ) const;
    
  private:
    ValueTypeData (const ValueTypeData &);
    void operator= (const ValueTypeData &);
    
  protected:
    virtual ::CORBA::Boolean
    _tao_marshal__Hello_ValueTypeData (TAO_OutputCDR &, TAO_ChunkInfo &) const = 0;

    virtual ::CORBA::Boolean
    _tao_unmarshal__Hello_ValueTypeData (TAO_InputCDR &, TAO_ChunkInfo &) = 0;
  };

  // TAO_IDL - Generated from
  // be/be_visitor_valuetype/valuetype_init_ch.cpp:57

  class  ValueTypeData_init
    : public virtual ::CORBA::ValueFactoryBase
  {
  public:
    ValueTypeData_init (void);

    static ValueTypeData_init* _downcast ( ::CORBA::ValueFactoryBase *);

    virtual ::CORBA::ValueBase *
    create_for_unmarshal (void);

    // TAO-specific extensions
  public:
    virtual const char* tao_repository_id (void);
  
  protected:
    virtual ~ValueTypeData_init (void);
  };

  // TAO_IDL - Generated from
  // be/be_visitor_typecode/typecode_decl.cpp:34

  extern  ::CORBA::TypeCode_ptr const _tc_ValueTypeData;

// TAO_IDL - Generated from
// be/be_visitor_module/module_ch.cpp:64

} // module Hello

// TAO_IDL - Generated from
// be/be_visitor_arg_traits.cpp:66

TAO_BEGIN_VERSIONED_NAMESPACE_DECL


// Arg traits specializations.
namespace TAO
{

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:306

#if !defined (_COMPONENTS_EVENTBASE__ARG_TRAITS_)
#define _COMPONENTS_EVENTBASE__ARG_TRAITS_

  template<>
  class Arg_Traits< ::Components::EventBase>
    : public
        Object_Arg_Traits_T<
            ::Components::EventBase *,
            ::Components::EventBase_var,
            ::Components::EventBase_out,
            TAO::Value_Traits<Components::EventBase>,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:306

#if !defined (_HELLO_VALUETYPEDATA__ARG_TRAITS_)
#define _HELLO_VALUETYPEDATA__ARG_TRAITS_

  template<>
  class Arg_Traits< ::Hello::ValueTypeData>
    : public
        Object_Arg_Traits_T<
            ::Hello::ValueTypeData *,
            ::Hello::ValueTypeData_var,
            ::Hello::ValueTypeData_out,
            TAO::Value_Traits<Hello::ValueTypeData>,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

#endif /* end #if !defined */
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_valuetype/obv_module.cpp:44

namespace OBV_Components
{
}

// TAO_IDL - Generated from
// be/be_visitor_valuetype/obv_module.cpp:44

namespace OBV_Hello
{

  // TAO_IDL - Generated from
  // be/be_visitor_valuetype/valuetype_obv_ch.cpp:44

  // OBV_ class
  class  ValueTypeData
    : public virtual Hello::ValueTypeData,
      public virtual ::CORBA::DefaultValueRefCountBase
  {

public:

  // TAO_IDL - Generated from
  // be/be_visitor_valuetype/field_ch.cpp:608

  virtual void data (char *val);
  virtual void data (const char *val);
  virtual void data (const ::CORBA::String_var &val);
  virtual const char *data (void) const;

public:
  ValueTypeData (void);
  ValueTypeData (
      const char * _tao_init_data
    );
  virtual ~ValueTypeData (void);

public:
  virtual ::CORBA::ValueBase *_copy_value (void);
  
protected:
  virtual ::CORBA::Boolean
  _tao_marshal__Hello_ValueTypeData (TAO_OutputCDR &, TAO_ChunkInfo &) const;

  virtual ::CORBA::Boolean
  _tao_unmarshal__Hello_ValueTypeData (TAO_InputCDR &, TAO_ChunkInfo &);

  ::CORBA::Boolean _tao_marshal_state (TAO_OutputCDR &, TAO_ChunkInfo &) const;
  ::CORBA::Boolean _tao_unmarshal_state (TAO_InputCDR &, TAO_ChunkInfo &);
  virtual void truncation_hook (void);

private:
  ::TAO::String_Manager _pd_data;
  CORBA::Boolean require_truncation_;
};
}

// TAO_IDL - Generated from
// be/be_visitor_traits.cpp:60

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Traits specializations.
namespace TAO
{

#if !defined (_COMPONENTS_EVENTBASE__TRAITS_)
#define _COMPONENTS_EVENTBASE__TRAITS_

  template<>
  struct  Value_Traits<Components::EventBase>
  {
    static void add_ref (Components::EventBase *);
    static void remove_ref (Components::EventBase *);
    static void release (Components::EventBase *);
  };

#endif /* end #if !defined */

#if !defined (_HELLO_VALUETYPEDATA__TRAITS_)
#define _HELLO_VALUETYPEDATA__TRAITS_

  template<>
  struct  Value_Traits<Hello::ValueTypeData>
  {
    static void add_ref (Hello::ValueTypeData *);
    static void remove_ref (Hello::ValueTypeData *);
    static void release (Hello::ValueTypeData *);
  };

#endif /* end #if !defined */
}
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_valuetype/any_op_ch.cpp:43



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace Components
{
   void operator<<= ( ::CORBA::Any &, EventBase *); // copying
   void operator<<= ( ::CORBA::Any &, EventBase **); // non-copying
   ::CORBA::Boolean operator>>= (const ::CORBA::Any &, EventBase *&);
}

#else


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 void operator<<= (::CORBA::Any &, Components::EventBase *); // copying
 void operator<<= (::CORBA::Any &, Components::EventBase **); // non-copying
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, Components::EventBase *&);
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_valuetype/any_op_ch.cpp:43



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace Hello
{
   void operator<<= ( ::CORBA::Any &, ValueTypeData *); // copying
   void operator<<= ( ::CORBA::Any &, ValueTypeData **); // non-copying
   ::CORBA::Boolean operator>>= (const ::CORBA::Any &, ValueTypeData *&);
}

#else


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 void operator<<= (::CORBA::Any &, Hello::ValueTypeData *); // copying
 void operator<<= (::CORBA::Any &, Hello::ValueTypeData **); // non-copying
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, Hello::ValueTypeData *&);
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_valuetype.cpp:456


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

namespace CORBA
{
  extern  void add_ref (Components::EventBase *);
  extern  void remove_ref (Components::EventBase *);
}
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_valuetype/cdr_op_ch.cpp:49


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 ::CORBA::Boolean operator<< (TAO_OutputCDR &, const Components::EventBase *);
 ::CORBA::Boolean operator>> (TAO_InputCDR &, Components::EventBase *&);

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_valuetype.cpp:456


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

namespace CORBA
{
  extern  void add_ref (Hello::ValueTypeData *);
  extern  void remove_ref (Hello::ValueTypeData *);
}
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_valuetype/cdr_op_ch.cpp:49


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 ::CORBA::Boolean operator<< (TAO_OutputCDR &, const Hello::ValueTypeData *);
 ::CORBA::Boolean operator>> (TAO_InputCDR &, Hello::ValueTypeData *&);

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_codegen.cpp:1700
#if defined (__ACE_INLINE__)
#include "TestC.inl"
#endif /* defined INLINE */

#include /**/ "ace/post.h"

#endif /* ifndef */

