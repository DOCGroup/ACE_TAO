// -*- C++ -*-
/**
 * Code generated by the The ACE ORB (TAO) IDL Compiler v2.4.1
 * TAO and the TAO IDL Compiler have been developed by:
 *       Center for Distributed Object Computing
 *       Washington University
 *       St. Louis, MO
 *       USA
 *       http://www.cs.wustl.edu/~schmidt/doc-center.html
 * and
 *       Distributed Object Computing Laboratory
 *       University of California at Irvine
 *       Irvine, CA
 *       USA
 * and
 *       Institute for Software Integrated Systems
 *       Vanderbilt University
 *       Nashville, TN
 *       USA
 *       http://www.isis.vanderbilt.edu/
 *
 * Information about TAO is available at:
 *     http://www.dre.vanderbilt.edu/~schmidt/TAO.html
 **/

// TAO_IDL - Generated from
// be/be_codegen.cpp:149

#ifndef _TAO_IDL_TESTC_NBGA4E_H_
#define _TAO_IDL_TESTC_NBGA4E_H_

#include /**/ "ace/pre.h"


#include /**/ "ace/config-all.h"

#if !defined (ACE_LACKS_PRAGMA_ONCE)
# pragma once
#endif /* ACE_LACKS_PRAGMA_ONCE */


#include "tao/ORB.h"
#include "tao/SystemException.h"
#include "tao/UserException.h"
#include "tao/Basic_Types.h"
#include "tao/ORB_Constants.h"
#include "tao/Object.h"
#include "tao/String_Manager_T.h"
#include "tao/Objref_VarOut_T.h"
#include "tao/VarOut_T.h"
#include "tao/Arg_Traits_T.h"
#include "tao/Basic_Arguments.h"
#include "tao/Special_Basic_Arguments.h"
#include "tao/Any_Insert_Policy_T.h"
#include "tao/Fixed_Size_Argument_T.h"
#include "tao/Var_Size_Argument_T.h"
#include "tao/Object_Argument_T.h"
#include "tao/UB_String_Arguments.h"
#include /**/ "tao/Version.h"
#include /**/ "tao/Versioned_Namespace.h"

#if TAO_MAJOR_VERSION != 2 || TAO_MINOR_VERSION != 4 || TAO_MICRO_VERSION != 1
#error This file should be regenerated with TAO_IDL
#endif

#if defined (TAO_EXPORT_MACRO)
#undef TAO_EXPORT_MACRO
#endif
#define TAO_EXPORT_MACRO

// TAO_IDL - Generated from
// be/be_visitor_root/root_ch.cpp:157
TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<typename T> class Narrow_Utils;
}
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_module/module_ch.cpp:35

namespace Test
{

  // TAO_IDL - Generated from
  // be/be_visitor_typedef/typedef_ch.cpp:370

  typedef ::CORBA::Long ErrorType;
  typedef ::CORBA::Long_out ErrorType_out;

  // TAO_IDL - Generated from
  // be/be_visitor_constant/constant_ch.cpp:35

  const CORBA::Long ErrorOne = 0;

  // TAO_IDL - Generated from
  // be/be_visitor_constant/constant_ch.cpp:35

  const CORBA::Long ErrorTwo = 10;

  // TAO_IDL - Generated from
  // be/be_visitor_constant/constant_ch.cpp:35

  const CORBA::Long ErrorThree = 100;

  // TAO_IDL - Generated from
  // be/be_type.cpp:258

  struct structOne;

  typedef
    ::TAO_Var_Var_T<
        structOne
      >
    structOne_var;

  typedef
    ::TAO_Out_T<
        structOne
      >
    structOne_out;

  // TAO_IDL - Generated from
  // be/be_visitor_structure/structure_ch.cpp:48

  struct  structOne
  {

    // TAO_IDL - Generated from
    // be/be_type.cpp:304


    typedef structOne_var _var_type;
    typedef structOne_out _out_type;

    ::CORBA::Boolean first;


    // TAO_IDL - Generated from
    // be/be_type.cpp:258

    class ErrorInfo;

    typedef
      ::TAO_Var_Var_T<
          ErrorInfo
        >
      ErrorInfo_var;

    typedef
      ::TAO_Out_T<
          ErrorInfo
        >
      ErrorInfo_out;

    class  ErrorInfo
    {
    public:
      ErrorInfo (void);
      ErrorInfo (const ErrorInfo &);
      ~ErrorInfo (void);

      ErrorInfo &operator= (const ErrorInfo &);

      // TAO_IDL - Generated from
      // be/be_visitor_union/discriminant_ch.cpp:100

      void _d ( ::CORBA::Long);
      ::CORBA::Long _d (void) const;

      // TAO_IDL - Generated from
      // be/be_type.cpp:304


      typedef ErrorInfo_var _var_type;
      typedef ErrorInfo_out _out_type;

      // TAO_IDL - Generated from
      // be/be_visitor_union_branch/public_ch.cpp:580

      void errorstring (char *);
      void errorstring (const char *);
      void errorstring (const ::CORBA::String_var&);
      const char *errorstring (void) const;

      // TAO_IDL - Generated from
      // be/be_visitor_union_branch/public_ch.cpp:449

      void errornumber ( ::CORBA::Long);
      ::CORBA::Long errornumber (void) const;

      // TAO_IDL - Generated from
      // be/be_visitor_union/union_ch.cpp:121

      void _default (void);
    private:
      ::CORBA::Long disc_;

      union
      {
        // TAO_IDL - Generated from
        // be/be_visitor_union_branch/private_ch.cpp:474
        char *errorstring_;
        // TAO_IDL - Generated from
        // be/be_visitor_union_branch/private_ch.cpp:377
        ::CORBA::Long errornumber_;
      } u_;

      /// TAO extension - frees any allocated storage.
      void _reset (void);
    };

    Test::structOne::ErrorInfo second;
  };

  // TAO_IDL - Generated from
  // be/be_type.cpp:258

  struct structTwo;

  typedef
    ::TAO_Var_Var_T<
        structTwo
      >
    structTwo_var;

  typedef
    ::TAO_Out_T<
        structTwo
      >
    structTwo_out;

  // TAO_IDL - Generated from
  // be/be_visitor_structure/structure_ch.cpp:48

  struct  structTwo
  {

    // TAO_IDL - Generated from
    // be/be_type.cpp:304


    typedef structTwo_var _var_type;
    typedef structTwo_out _out_type;



    // TAO_IDL - Generated from
    // be/be_type.cpp:258

    class ErrorInfo;

    typedef
      ::TAO_Var_Var_T<
          ErrorInfo
        >
      ErrorInfo_var;

    typedef
      ::TAO_Out_T<
          ErrorInfo
        >
      ErrorInfo_out;

    class  ErrorInfo
    {
    public:
      ErrorInfo (void);
      ErrorInfo (const ErrorInfo &);
      ~ErrorInfo (void);

      ErrorInfo &operator= (const ErrorInfo &);

      // TAO_IDL - Generated from
      // be/be_visitor_union/discriminant_ch.cpp:100

      void _d ( ::CORBA::Long);
      ::CORBA::Long _d (void) const;

      // TAO_IDL - Generated from
      // be/be_type.cpp:304


      typedef ErrorInfo_var _var_type;
      typedef ErrorInfo_out _out_type;

      // TAO_IDL - Generated from
      // be/be_visitor_union_branch/public_ch.cpp:580

      void failstring (char *);
      void failstring (const char *);
      void failstring (const ::CORBA::String_var&);
      const char *failstring (void) const;

      // TAO_IDL - Generated from
      // be/be_visitor_union/union_ch.cpp:121

      void _default (void);
    private:
      ::CORBA::Long disc_;

      union
      {
        // TAO_IDL - Generated from
        // be/be_visitor_union_branch/private_ch.cpp:474
        char *failstring_;
      } u_;

      /// TAO extension - frees any allocated storage.
      void _reset (void);
    };

    Test::structTwo::ErrorInfo thisonly;
  };

  // TAO_IDL - Generated from
  // be/be_visitor_exception/exception_ch.cpp:41

  class  exceptionOne : public ::CORBA::UserException
  {
  public:


    // TAO_IDL - Generated from
    // be/be_type.cpp:258

    class ExceptionUnion;

    typedef
      ::TAO_Var_Var_T<
          ExceptionUnion
        >
      ExceptionUnion_var;

    typedef
      ::TAO_Out_T<
          ExceptionUnion
        >
      ExceptionUnion_out;

    class  ExceptionUnion
    {
    public:
      ExceptionUnion (void);
      ExceptionUnion (const ExceptionUnion &);
      ~ExceptionUnion (void);

      ExceptionUnion &operator= (const ExceptionUnion &);

      // TAO_IDL - Generated from
      // be/be_visitor_union/discriminant_ch.cpp:100

      void _d ( ::CORBA::Long);
      ::CORBA::Long _d (void) const;

      // TAO_IDL - Generated from
      // be/be_type.cpp:304


      typedef ExceptionUnion_var _var_type;
      typedef ExceptionUnion_out _out_type;

      // TAO_IDL - Generated from
      // be/be_visitor_union_branch/public_ch.cpp:580

      void failstring (char *);
      void failstring (const char *);
      void failstring (const ::CORBA::String_var&);
      const char *failstring (void) const;

      // TAO_IDL - Generated from
      // be/be_visitor_union/union_ch.cpp:121

      void _default (void);
    private:
      ::CORBA::Long disc_;

      union
      {
        // TAO_IDL - Generated from
        // be/be_visitor_union_branch/private_ch.cpp:474
        char *failstring_;
      } u_;

      /// TAO extension - frees any allocated storage.
      void _reset (void);
    };

    Test::exceptionOne::ExceptionUnion exceptiononly;

    exceptionOne (void);
    exceptionOne (const exceptionOne &);
    ~exceptionOne (void);

    exceptionOne &operator= (const exceptionOne &);

    static exceptionOne *_downcast ( ::CORBA::Exception *);
    static const exceptionOne *_downcast ( ::CORBA::Exception const *);

    static ::CORBA::Exception *_alloc (void);

    virtual ::CORBA::Exception *_tao_duplicate (void) const;

    virtual void _raise (void) const;

    virtual void _tao_encode (TAO_OutputCDR &cdr) const;
    virtual void _tao_decode (TAO_InputCDR &cdr);

    // TAO_IDL - Generated from
    // be/be_visitor_exception/exception_ctor.cpp:51

    exceptionOne (
        const ExceptionUnion & _tao_exceptiononly);
  };

  // TAO_IDL - Generated from
  // be/be_interface.cpp:748

#if !defined (_TEST_INTERFACEONE__VAR_OUT_CH_)
#define _TEST_INTERFACEONE__VAR_OUT_CH_

  class interfaceOne;
  typedef interfaceOne *interfaceOne_ptr;

  typedef
    TAO_Objref_Var_T<
        interfaceOne
      >
    interfaceOne_var;

  typedef
    TAO_Objref_Out_T<
        interfaceOne
      >
    interfaceOne_out;

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // be/be_visitor_interface/interface_ch.cpp:40

  class  interfaceOne
    : public virtual ::CORBA::Object
  {
  public:
    friend class TAO::Narrow_Utils<interfaceOne>;

    // TAO_IDL - Generated from
    // be/be_type.cpp:304

    typedef interfaceOne_ptr _ptr_type;
    typedef interfaceOne_var _var_type;
    typedef interfaceOne_out _out_type;

    // The static operations.
    static interfaceOne_ptr _duplicate (interfaceOne_ptr obj);

    static void _tao_release (interfaceOne_ptr obj);

    static interfaceOne_ptr _narrow (::CORBA::Object_ptr obj);
    static interfaceOne_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
    static interfaceOne_ptr _nil (void);

    virtual void getstruct (
      ::Test::structOne_out tester);

    // TAO_IDL - Generated from
    // be/be_visitor_interface/interface_ch.cpp:137

    virtual ::CORBA::Boolean _is_a (const char *type_id);
    virtual const char* _interface_repository_id (void) const;
    virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);

  protected:
    // Concrete interface only.
    interfaceOne (void);

    // Concrete non-local interface only.
    interfaceOne (
        ::IOP::IOR *ior,
        TAO_ORB_Core *orb_core);

    // Non-local interface only.
    interfaceOne (
        TAO_Stub *objref,
        ::CORBA::Boolean _tao_collocated = false,
        TAO_Abstract_ServantBase *servant = 0,
        TAO_ORB_Core *orb_core = 0);

    virtual ~interfaceOne (void);

  private:
    // Private and unimplemented for concrete interfaces.
    interfaceOne (const interfaceOne &);

    void operator= (const interfaceOne &);
  };

// TAO_IDL - Generated from
// be/be_visitor_module/module_ch.cpp:64

} // module Test

// TAO_IDL - Generated from
// be/be_visitor_arg_traits.cpp:66

TAO_BEGIN_VERSIONED_NAMESPACE_DECL


// Arg traits specializations.
namespace TAO
{

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:945

  template<>
  class Arg_Traits< ::Test::structOne>
    : public
        Var_Size_Arg_Traits_T<
            ::Test::structOne,
            TAO::Any_Insert_Policy_Noop
          >
  {
  };

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:1056

  template<>
  class Arg_Traits< ::Test::structOne::ErrorInfo>
    : public
        Var_Size_Arg_Traits_T<
            ::Test::structOne::ErrorInfo,
            TAO::Any_Insert_Policy_Noop
          >
  {
  };

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:945

  template<>
  class Arg_Traits< ::Test::structTwo>
    : public
        Var_Size_Arg_Traits_T<
            ::Test::structTwo,
            TAO::Any_Insert_Policy_Noop
          >
  {
  };

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:1056

  template<>
  class Arg_Traits< ::Test::structTwo::ErrorInfo>
    : public
        Var_Size_Arg_Traits_T<
            ::Test::structTwo::ErrorInfo,
            TAO::Any_Insert_Policy_Noop
          >
  {
  };

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:145

#if !defined (_TEST_INTERFACEONE__ARG_TRAITS_)
#define _TEST_INTERFACEONE__ARG_TRAITS_

  template<>
  class  Arg_Traits< ::Test::interfaceOne>
    : public
        Object_Arg_Traits_T<
            ::Test::interfaceOne_ptr,
            ::Test::interfaceOne_var,
            ::Test::interfaceOne_out,
            TAO::Objref_Traits<Test::interfaceOne>,
            TAO::Any_Insert_Policy_Noop
          >
  {
  };

#endif /* end #if !defined */
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_traits.cpp:60

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Traits specializations.
namespace TAO
{

#if !defined (_TEST_INTERFACEONE__TRAITS_)
#define _TEST_INTERFACEONE__TRAITS_

  template<>
  struct  Objref_Traits< ::Test::interfaceOne>
  {
    static ::Test::interfaceOne_ptr duplicate (
        ::Test::interfaceOne_ptr p);
    static void release (
        ::Test::interfaceOne_ptr p);
    static ::Test::interfaceOne_ptr nil (void);
    static ::CORBA::Boolean marshal (
        const ::Test::interfaceOne_ptr p,
        TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */
}
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_structure/cdr_op_ch.cpp:43


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 ::CORBA::Boolean operator<< (TAO_OutputCDR &, const Test::structOne &);
 ::CORBA::Boolean operator>> (TAO_InputCDR &, Test::structOne &);

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_union/cdr_op_ch.cpp:38


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 ::CORBA::Boolean operator<< (TAO_OutputCDR &, const Test::structOne::ErrorInfo &);
 ::CORBA::Boolean operator>> (TAO_InputCDR &, Test::structOne::ErrorInfo &);

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_structure/cdr_op_ch.cpp:43


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 ::CORBA::Boolean operator<< (TAO_OutputCDR &, const Test::structTwo &);
 ::CORBA::Boolean operator>> (TAO_InputCDR &, Test::structTwo &);

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_union/cdr_op_ch.cpp:38


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 ::CORBA::Boolean operator<< (TAO_OutputCDR &, const Test::structTwo::ErrorInfo &);
 ::CORBA::Boolean operator>> (TAO_InputCDR &, Test::structTwo::ErrorInfo &);

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_exception/cdr_op_ch.cpp:37
TAO_BEGIN_VERSIONED_NAMESPACE_DECL



 ::CORBA::Boolean operator<< (TAO_OutputCDR &, const Test::exceptionOne &);
 ::CORBA::Boolean operator>> (TAO_InputCDR &, Test::exceptionOne &);

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_union/cdr_op_ch.cpp:38


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 ::CORBA::Boolean operator<< (TAO_OutputCDR &, const Test::exceptionOne::ExceptionUnion &);
 ::CORBA::Boolean operator>> (TAO_InputCDR &, Test::exceptionOne::ExceptionUnion &);

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_interface/cdr_op_ch.cpp:41

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 ::CORBA::Boolean operator<< (TAO_OutputCDR &, const Test::interfaceOne_ptr );
 ::CORBA::Boolean operator>> (TAO_InputCDR &, Test::interfaceOne_ptr &);

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_codegen.cpp:1700
#if defined (__ACE_INLINE__)
#include "TestC.inl"
#endif /* defined INLINE */

#include /**/ "ace/post.h"

#endif /* ifndef */

