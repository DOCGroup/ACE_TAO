// -*- C++ -*-
/**
 * Code generated by the The ACE ORB (TAO) IDL Compiler v2.4.1
 * TAO and the TAO IDL Compiler have been developed by:
 *       Center for Distributed Object Computing
 *       Washington University
 *       St. Louis, MO
 *       USA
 *       http://www.cs.wustl.edu/~schmidt/doc-center.html
 * and
 *       Distributed Object Computing Laboratory
 *       University of California at Irvine
 *       Irvine, CA
 *       USA
 * and
 *       Institute for Software Integrated Systems
 *       Vanderbilt University
 *       Nashville, TN
 *       USA
 *       http://www.isis.vanderbilt.edu/
 *
 * Information about TAO is available at:
 *     http://www.dre.vanderbilt.edu/~schmidt/TAO.html
 **/

// TAO_IDL - Generated from
// be/be_codegen.cpp:149

#ifndef _TAO_IDL_TTESTC_OZ8BMB_H_
#define _TAO_IDL_TTESTC_OZ8BMB_H_

#include /**/ "ace/pre.h"


#include /**/ "ace/config-all.h"

#if !defined (ACE_LACKS_PRAGMA_ONCE)
# pragma once
#endif /* ACE_LACKS_PRAGMA_ONCE */


#include /**/ "ttest_export.h"
#include "tao/AnyTypeCode/AnyTypeCode_methods.h"
#include "tao/AnyTypeCode/Any.h"
#include "tao/ORB.h"
#include "tao/SystemException.h"
#include "tao/Basic_Types.h"
#include "tao/ORB_Constants.h"
#include "tao/Object.h"
#include "tao/String_Manager_T.h"
#include "tao/AnyTypeCode/BooleanSeqA.h"
#include "tao/AnyTypeCode/CharSeqA.h"
#include "tao/AnyTypeCode/DoubleSeqA.h"
#include "tao/AnyTypeCode/FloatSeqA.h"
#include "tao/AnyTypeCode/LongDoubleSeqA.h"
#include "tao/AnyTypeCode/LongSeqA.h"
#include "tao/AnyTypeCode/OctetSeqA.h"
#include "tao/AnyTypeCode/ShortSeqA.h"
#include "tao/AnyTypeCode/StringSeqA.h"
#include "tao/AnyTypeCode/ULongSeqA.h"
#include "tao/AnyTypeCode/UShortSeqA.h"
#include "tao/AnyTypeCode/WCharSeqA.h"
#include "tao/AnyTypeCode/WStringSeqA.h"
#include "tao/AnyTypeCode/LongLongSeqA.h"
#include "tao/AnyTypeCode/ULongLongSeqA.h"
#include "tao/AnyTypeCode/PolicyA.h"
#include "tao/AnyTypeCode/Policy_ManagerA.h"
#include "tao/AnyTypeCode/Policy_CurrentA.h"
#include "tao/AnyTypeCode/ServicesA.h"
#include "tao/AnyTypeCode/ParameterModeA.h"
#include "tao/AnyTypeCode/orb_typesA.h"
#include "tao/AnyTypeCode/Typecode_typesA.h"
#include "tao/AnyTypeCode/WrongTransactionA.h"
#include "tao/Sequence_T.h"
#include "tao/Objref_VarOut_T.h"
#include "tao/Seq_Var_T.h"
#include "tao/Seq_Out_T.h"
#include "tao/Arg_Traits_T.h"
#include "tao/Basic_Arguments.h"
#include "tao/Special_Basic_Arguments.h"
#include "tao/Any_Insert_Policy_T.h"
#include "tao/Fixed_Size_Argument_T.h"
#include "tao/Var_Size_Argument_T.h"
#include "tao/Object_Argument_T.h"
#include "tao/UB_String_Arguments.h"
#include /**/ "tao/Version.h"
#include /**/ "tao/Versioned_Namespace.h"

#include "tao/BooleanSeqC.h"
#include "tao/CharSeqC.h"
#include "tao/DoubleSeqC.h"
#include "tao/FloatSeqC.h"
#include "tao/LongDoubleSeqC.h"
#include "tao/LongSeqC.h"
#include "tao/OctetSeqC.h"
#include "tao/ShortSeqC.h"
#include "tao/StringSeqC.h"
#include "tao/ULongSeqC.h"
#include "tao/UShortSeqC.h"
#include "tao/WCharSeqC.h"
#include "tao/WStringSeqC.h"
#include "tao/LongLongSeqC.h"
#include "tao/ULongLongSeqC.h"
#include "tao/PolicyC.h"
#include "tao/Policy_ManagerC.h"
#include "tao/Policy_CurrentC.h"
#include "tao/ServicesC.h"
#include "tao/ParameterModeC.h"
#include "tao/orb_typesC.h"
#include "tao/Typecode_typesC.h"
#include "tao/WrongTransactionC.h"

#if TAO_MAJOR_VERSION != 2 || TAO_MINOR_VERSION != 4 || TAO_MICRO_VERSION != 1
#error This file should be regenerated with TAO_IDL
#endif

#if defined (TAO_EXPORT_MACRO)
#undef TAO_EXPORT_MACRO
#endif
#define TAO_EXPORT_MACRO TAO_TTest_Export

// TAO_IDL - Generated from
// be/be_visitor_root/root_ch.cpp:157
TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<typename T> class Narrow_Utils;
}
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_module/module_ch.cpp:35

namespace TAO_Trader_Test
{

  // TAO_IDL - Generated from
  // be/be_interface.cpp:748

#if !defined (_TAO_TRADER_TEST_REMOTE_OUTPUT__VAR_OUT_CH_)
#define _TAO_TRADER_TEST_REMOTE_OUTPUT__VAR_OUT_CH_

  class Remote_Output;
  typedef Remote_Output *Remote_Output_ptr;

  typedef
    TAO_Objref_Var_T<
        Remote_Output
      >
    Remote_Output_var;

  typedef
    TAO_Objref_Out_T<
        Remote_Output
      >
    Remote_Output_out;

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // be/be_visitor_interface/interface_ch.cpp:40

  class TAO_TTest_Export Remote_Output
    : public virtual ::CORBA::Object
  {
  public:
    friend class TAO::Narrow_Utils<Remote_Output>;

    // TAO_IDL - Generated from
    // be/be_type.cpp:304

    typedef Remote_Output_ptr _ptr_type;
    typedef Remote_Output_var _var_type;
    typedef Remote_Output_out _out_type;

    static void _tao_any_destructor (void *);

    // The static operations.
    static Remote_Output_ptr _duplicate (Remote_Output_ptr obj);

    static void _tao_release (Remote_Output_ptr obj);

    static Remote_Output_ptr _narrow (::CORBA::Object_ptr obj);
    static Remote_Output_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
    static Remote_Output_ptr _nil (void);

    virtual void confirm (
      void);

    // TAO_IDL - Generated from
    // be/be_visitor_interface/interface_ch.cpp:137

    virtual ::CORBA::Boolean _is_a (const char *type_id);
    virtual const char* _interface_repository_id (void) const;
    virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);

  protected:
    // Concrete interface only.
    Remote_Output (void);

    // Concrete non-local interface only.
    Remote_Output (
        ::IOP::IOR *ior,
        TAO_ORB_Core *orb_core);

    // Non-local interface only.
    Remote_Output (
        TAO_Stub *objref,
        ::CORBA::Boolean _tao_collocated = false,
        TAO_Abstract_ServantBase *servant = 0,
        TAO_ORB_Core *orb_core = 0);

    virtual ~Remote_Output (void);

  private:
    // Private and unimplemented for concrete interfaces.
    Remote_Output (const Remote_Output &);

    void operator= (const Remote_Output &);
  };

  // TAO_IDL - Generated from
  // be/be_visitor_typecode/typecode_decl.cpp:34

  extern TAO_TTest_Export ::CORBA::TypeCode_ptr const _tc_Remote_Output;

  // TAO_IDL - Generated from
  // be/be_interface.cpp:748

#if !defined (_TAO_TRADER_TEST_PLOTTER__VAR_OUT_CH_)
#define _TAO_TRADER_TEST_PLOTTER__VAR_OUT_CH_

  class Plotter;
  typedef Plotter *Plotter_ptr;

  typedef
    TAO_Objref_Var_T<
        Plotter
      >
    Plotter_var;

  typedef
    TAO_Objref_Out_T<
        Plotter
      >
    Plotter_out;

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // be/be_visitor_interface/interface_ch.cpp:40

  class TAO_TTest_Export Plotter
    : public virtual ::TAO_Trader_Test::Remote_Output

  {
  public:
    friend class TAO::Narrow_Utils<Plotter>;

    // TAO_IDL - Generated from
    // be/be_type.cpp:304

    typedef Plotter_ptr _ptr_type;
    typedef Plotter_var _var_type;
    typedef Plotter_out _out_type;

    static void _tao_any_destructor (void *);

    // The static operations.
    static Plotter_ptr _duplicate (Plotter_ptr obj);

    static void _tao_release (Plotter_ptr obj);

    static Plotter_ptr _narrow (::CORBA::Object_ptr obj);
    static Plotter_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
    static Plotter_ptr _nil (void);

    // TAO_IDL - Generated from
    // be/be_visitor_interface/interface_ch.cpp:137

    virtual ::CORBA::Boolean _is_a (const char *type_id);
    virtual const char* _interface_repository_id (void) const;
    virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);

  protected:
    // Concrete interface only.
    Plotter (void);

    // Concrete non-local interface only.
    Plotter (
        ::IOP::IOR *ior,
        TAO_ORB_Core *orb_core);

    // Non-local interface only.
    Plotter (
        TAO_Stub *objref,
        ::CORBA::Boolean _tao_collocated = false,
        TAO_Abstract_ServantBase *servant = 0,
        TAO_ORB_Core *orb_core = 0);

    virtual ~Plotter (void);

  private:
    // Private and unimplemented for concrete interfaces.
    Plotter (const Plotter &);

    void operator= (const Plotter &);
  };

  // TAO_IDL - Generated from
  // be/be_visitor_typecode/typecode_decl.cpp:34

  extern TAO_TTest_Export ::CORBA::TypeCode_ptr const _tc_Plotter;

  // TAO_IDL - Generated from
  // be/be_interface.cpp:748

#if !defined (_TAO_TRADER_TEST_PRINTER__VAR_OUT_CH_)
#define _TAO_TRADER_TEST_PRINTER__VAR_OUT_CH_

  class Printer;
  typedef Printer *Printer_ptr;

  typedef
    TAO_Objref_Var_T<
        Printer
      >
    Printer_var;

  typedef
    TAO_Objref_Out_T<
        Printer
      >
    Printer_out;

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // be/be_visitor_interface/interface_ch.cpp:40

  class TAO_TTest_Export Printer
    : public virtual ::TAO_Trader_Test::Remote_Output

  {
  public:
    friend class TAO::Narrow_Utils<Printer>;

    // TAO_IDL - Generated from
    // be/be_type.cpp:304

    typedef Printer_ptr _ptr_type;
    typedef Printer_var _var_type;
    typedef Printer_out _out_type;

    static void _tao_any_destructor (void *);

    // The static operations.
    static Printer_ptr _duplicate (Printer_ptr obj);

    static void _tao_release (Printer_ptr obj);

    static Printer_ptr _narrow (::CORBA::Object_ptr obj);
    static Printer_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
    static Printer_ptr _nil (void);

    // TAO_IDL - Generated from
    // be/be_visitor_interface/interface_ch.cpp:137

    virtual ::CORBA::Boolean _is_a (const char *type_id);
    virtual const char* _interface_repository_id (void) const;
    virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);

  protected:
    // Concrete interface only.
    Printer (void);

    // Concrete non-local interface only.
    Printer (
        ::IOP::IOR *ior,
        TAO_ORB_Core *orb_core);

    // Non-local interface only.
    Printer (
        TAO_Stub *objref,
        ::CORBA::Boolean _tao_collocated = false,
        TAO_Abstract_ServantBase *servant = 0,
        TAO_ORB_Core *orb_core = 0);

    virtual ~Printer (void);

  private:
    // Private and unimplemented for concrete interfaces.
    Printer (const Printer &);

    void operator= (const Printer &);
  };

  // TAO_IDL - Generated from
  // be/be_visitor_typecode/typecode_decl.cpp:34

  extern TAO_TTest_Export ::CORBA::TypeCode_ptr const _tc_Printer;

  // TAO_IDL - Generated from
  // be/be_interface.cpp:748

#if !defined (_TAO_TRADER_TEST_FILE_SYSTEM__VAR_OUT_CH_)
#define _TAO_TRADER_TEST_FILE_SYSTEM__VAR_OUT_CH_

  class File_System;
  typedef File_System *File_System_ptr;

  typedef
    TAO_Objref_Var_T<
        File_System
      >
    File_System_var;

  typedef
    TAO_Objref_Out_T<
        File_System
      >
    File_System_out;

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // be/be_visitor_interface/interface_ch.cpp:40

  class TAO_TTest_Export File_System
    : public virtual ::TAO_Trader_Test::Remote_Output

  {
  public:
    friend class TAO::Narrow_Utils<File_System>;

    // TAO_IDL - Generated from
    // be/be_type.cpp:304

    typedef File_System_ptr _ptr_type;
    typedef File_System_var _var_type;
    typedef File_System_out _out_type;

    static void _tao_any_destructor (void *);

    // The static operations.
    static File_System_ptr _duplicate (File_System_ptr obj);

    static void _tao_release (File_System_ptr obj);

    static File_System_ptr _narrow (::CORBA::Object_ptr obj);
    static File_System_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
    static File_System_ptr _nil (void);

    // TAO_IDL - Generated from
    // be/be_visitor_interface/interface_ch.cpp:137

    virtual ::CORBA::Boolean _is_a (const char *type_id);
    virtual const char* _interface_repository_id (void) const;
    virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);

  protected:
    // Concrete interface only.
    File_System (void);

    // Concrete non-local interface only.
    File_System (
        ::IOP::IOR *ior,
        TAO_ORB_Core *orb_core);

    // Non-local interface only.
    File_System (
        TAO_Stub *objref,
        ::CORBA::Boolean _tao_collocated = false,
        TAO_Abstract_ServantBase *servant = 0,
        TAO_ORB_Core *orb_core = 0);

    virtual ~File_System (void);

  private:
    // Private and unimplemented for concrete interfaces.
    File_System (const File_System &);

    void operator= (const File_System &);
  };

  // TAO_IDL - Generated from
  // be/be_visitor_typecode/typecode_decl.cpp:34

  extern TAO_TTest_Export ::CORBA::TypeCode_ptr const _tc_File_System;

  // TAO_IDL - Generated from
  // be/be_interface.cpp:748

#if !defined (_TAO_TRADER_TEST_POSTSCRIPT_PRINTER__VAR_OUT_CH_)
#define _TAO_TRADER_TEST_POSTSCRIPT_PRINTER__VAR_OUT_CH_

  class PostScript_Printer;
  typedef PostScript_Printer *PostScript_Printer_ptr;

  typedef
    TAO_Objref_Var_T<
        PostScript_Printer
      >
    PostScript_Printer_var;

  typedef
    TAO_Objref_Out_T<
        PostScript_Printer
      >
    PostScript_Printer_out;

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // be/be_visitor_interface/interface_ch.cpp:40

  class TAO_TTest_Export PostScript_Printer
    : public virtual ::TAO_Trader_Test::Remote_Output

  {
  public:
    friend class TAO::Narrow_Utils<PostScript_Printer>;

    // TAO_IDL - Generated from
    // be/be_type.cpp:304

    typedef PostScript_Printer_ptr _ptr_type;
    typedef PostScript_Printer_var _var_type;
    typedef PostScript_Printer_out _out_type;

    static void _tao_any_destructor (void *);

    // The static operations.
    static PostScript_Printer_ptr _duplicate (PostScript_Printer_ptr obj);

    static void _tao_release (PostScript_Printer_ptr obj);

    static PostScript_Printer_ptr _narrow (::CORBA::Object_ptr obj);
    static PostScript_Printer_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
    static PostScript_Printer_ptr _nil (void);

    // TAO_IDL - Generated from
    // be/be_visitor_interface/interface_ch.cpp:137

    virtual ::CORBA::Boolean _is_a (const char *type_id);
    virtual const char* _interface_repository_id (void) const;
    virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);

  protected:
    // Concrete interface only.
    PostScript_Printer (void);

    // Concrete non-local interface only.
    PostScript_Printer (
        ::IOP::IOR *ior,
        TAO_ORB_Core *orb_core);

    // Non-local interface only.
    PostScript_Printer (
        TAO_Stub *objref,
        ::CORBA::Boolean _tao_collocated = false,
        TAO_Abstract_ServantBase *servant = 0,
        TAO_ORB_Core *orb_core = 0);

    virtual ~PostScript_Printer (void);

  private:
    // Private and unimplemented for concrete interfaces.
    PostScript_Printer (const PostScript_Printer &);

    void operator= (const PostScript_Printer &);
  };

  // TAO_IDL - Generated from
  // be/be_visitor_typecode/typecode_decl.cpp:34

  extern TAO_TTest_Export ::CORBA::TypeCode_ptr const _tc_PostScript_Printer;

  // TAO_IDL - Generated from
  // be/be_visitor_sequence/sequence_ch.cpp:99

#if !defined (_TAO_TRADER_TEST_SHORTSEQ_CH_)
#define _TAO_TRADER_TEST_SHORTSEQ_CH_

  class ShortSeq;

  typedef
    ::TAO_FixedSeq_Var_T<
        ShortSeq
      >
    ShortSeq_var;

  typedef
    ::TAO_Seq_Out_T<
        ShortSeq
      >
    ShortSeq_out;

  class TAO_TTest_Export ShortSeq
    : public
        ::TAO::unbounded_value_sequence<
            ::CORBA::Short
          >
  {
  public:
    ShortSeq (void);
    ShortSeq ( ::CORBA::ULong max);
    ShortSeq (
      ::CORBA::ULong max,
      ::CORBA::ULong length,
      ::CORBA::Short* buffer,
      ::CORBA::Boolean release = false);
    ShortSeq (const ShortSeq &);
    virtual ~ShortSeq (void);


    // TAO_IDL - Generated from
    // be/be_type.cpp:304


    typedef ShortSeq_var _var_type;
    typedef ShortSeq_out _out_type;

    static void _tao_any_destructor (void *);
  };

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // be/be_visitor_typecode/typecode_decl.cpp:34

  extern TAO_TTest_Export ::CORBA::TypeCode_ptr const _tc_ShortSeq;

  // TAO_IDL - Generated from
  // be/be_visitor_sequence/sequence_ch.cpp:99

#if !defined (_TAO_TRADER_TEST_USHORTSEQ_CH_)
#define _TAO_TRADER_TEST_USHORTSEQ_CH_

  class UShortSeq;

  typedef
    ::TAO_FixedSeq_Var_T<
        UShortSeq
      >
    UShortSeq_var;

  typedef
    ::TAO_Seq_Out_T<
        UShortSeq
      >
    UShortSeq_out;

  class TAO_TTest_Export UShortSeq
    : public
        ::TAO::unbounded_value_sequence<
            ::CORBA::UShort
          >
  {
  public:
    UShortSeq (void);
    UShortSeq ( ::CORBA::ULong max);
    UShortSeq (
      ::CORBA::ULong max,
      ::CORBA::ULong length,
      ::CORBA::UShort* buffer,
      ::CORBA::Boolean release = false);
    UShortSeq (const UShortSeq &);
    virtual ~UShortSeq (void);


    // TAO_IDL - Generated from
    // be/be_type.cpp:304


    typedef UShortSeq_var _var_type;
    typedef UShortSeq_out _out_type;

    static void _tao_any_destructor (void *);
  };

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // be/be_visitor_typecode/typecode_decl.cpp:34

  extern TAO_TTest_Export ::CORBA::TypeCode_ptr const _tc_UShortSeq;

  // TAO_IDL - Generated from
  // be/be_visitor_sequence/sequence_ch.cpp:99

#if !defined (_TAO_TRADER_TEST_LONGSEQ_CH_)
#define _TAO_TRADER_TEST_LONGSEQ_CH_

  class LongSeq;

  typedef
    ::TAO_FixedSeq_Var_T<
        LongSeq
      >
    LongSeq_var;

  typedef
    ::TAO_Seq_Out_T<
        LongSeq
      >
    LongSeq_out;

  class TAO_TTest_Export LongSeq
    : public
        ::TAO::unbounded_value_sequence<
            ::CORBA::Long
          >
  {
  public:
    LongSeq (void);
    LongSeq ( ::CORBA::ULong max);
    LongSeq (
      ::CORBA::ULong max,
      ::CORBA::ULong length,
      ::CORBA::Long* buffer,
      ::CORBA::Boolean release = false);
    LongSeq (const LongSeq &);
    virtual ~LongSeq (void);


    // TAO_IDL - Generated from
    // be/be_type.cpp:304


    typedef LongSeq_var _var_type;
    typedef LongSeq_out _out_type;

    static void _tao_any_destructor (void *);
  };

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // be/be_visitor_typecode/typecode_decl.cpp:34

  extern TAO_TTest_Export ::CORBA::TypeCode_ptr const _tc_LongSeq;

  // TAO_IDL - Generated from
  // be/be_visitor_sequence/sequence_ch.cpp:99

#if !defined (_TAO_TRADER_TEST_ULONGSEQ_CH_)
#define _TAO_TRADER_TEST_ULONGSEQ_CH_

  class ULongSeq;

  typedef
    ::TAO_FixedSeq_Var_T<
        ULongSeq
      >
    ULongSeq_var;

  typedef
    ::TAO_Seq_Out_T<
        ULongSeq
      >
    ULongSeq_out;

  class TAO_TTest_Export ULongSeq
    : public
        ::TAO::unbounded_value_sequence<
            ::CORBA::ULong
          >
  {
  public:
    ULongSeq (void);
    ULongSeq ( ::CORBA::ULong max);
    ULongSeq (
      ::CORBA::ULong max,
      ::CORBA::ULong length,
      ::CORBA::ULong* buffer,
      ::CORBA::Boolean release = false);
    ULongSeq (const ULongSeq &);
    virtual ~ULongSeq (void);


    // TAO_IDL - Generated from
    // be/be_type.cpp:304


    typedef ULongSeq_var _var_type;
    typedef ULongSeq_out _out_type;

    static void _tao_any_destructor (void *);
  };

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // be/be_visitor_typecode/typecode_decl.cpp:34

  extern TAO_TTest_Export ::CORBA::TypeCode_ptr const _tc_ULongSeq;

  // TAO_IDL - Generated from
  // be/be_visitor_sequence/sequence_ch.cpp:99

#if !defined (_TAO_TRADER_TEST_BOOLEANSEQ_CH_)
#define _TAO_TRADER_TEST_BOOLEANSEQ_CH_

  class BooleanSeq;

  typedef
    ::TAO_FixedSeq_Var_T<
        BooleanSeq
      >
    BooleanSeq_var;

  typedef
    ::TAO_Seq_Out_T<
        BooleanSeq
      >
    BooleanSeq_out;

  class TAO_TTest_Export BooleanSeq
    : public
        ::TAO::unbounded_value_sequence<
            ::CORBA::Boolean
          >
  {
  public:
    BooleanSeq (void);
    BooleanSeq ( ::CORBA::ULong max);
    BooleanSeq (
      ::CORBA::ULong max,
      ::CORBA::ULong length,
      ::CORBA::Boolean* buffer,
      ::CORBA::Boolean release = false);
    BooleanSeq (const BooleanSeq &);
    virtual ~BooleanSeq (void);


    // TAO_IDL - Generated from
    // be/be_type.cpp:304


    typedef BooleanSeq_var _var_type;
    typedef BooleanSeq_out _out_type;

    static void _tao_any_destructor (void *);
  };

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // be/be_visitor_typecode/typecode_decl.cpp:34

  extern TAO_TTest_Export ::CORBA::TypeCode_ptr const _tc_BooleanSeq;

  // TAO_IDL - Generated from
  // be/be_visitor_sequence/sequence_ch.cpp:99

#if !defined (_TAO_TRADER_TEST_FLOATSEQ_CH_)
#define _TAO_TRADER_TEST_FLOATSEQ_CH_

  class FloatSeq;

  typedef
    ::TAO_FixedSeq_Var_T<
        FloatSeq
      >
    FloatSeq_var;

  typedef
    ::TAO_Seq_Out_T<
        FloatSeq
      >
    FloatSeq_out;

  class TAO_TTest_Export FloatSeq
    : public
        ::TAO::unbounded_value_sequence<
            ::CORBA::Float
          >
  {
  public:
    FloatSeq (void);
    FloatSeq ( ::CORBA::ULong max);
    FloatSeq (
      ::CORBA::ULong max,
      ::CORBA::ULong length,
      ::CORBA::Float* buffer,
      ::CORBA::Boolean release = false);
    FloatSeq (const FloatSeq &);
    virtual ~FloatSeq (void);


    // TAO_IDL - Generated from
    // be/be_type.cpp:304


    typedef FloatSeq_var _var_type;
    typedef FloatSeq_out _out_type;

    static void _tao_any_destructor (void *);
  };

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // be/be_visitor_typecode/typecode_decl.cpp:34

  extern TAO_TTest_Export ::CORBA::TypeCode_ptr const _tc_FloatSeq;

  // TAO_IDL - Generated from
  // be/be_visitor_sequence/sequence_ch.cpp:99

#if !defined (_TAO_TRADER_TEST_DOUBLESEQ_CH_)
#define _TAO_TRADER_TEST_DOUBLESEQ_CH_

  class DoubleSeq;

  typedef
    ::TAO_FixedSeq_Var_T<
        DoubleSeq
      >
    DoubleSeq_var;

  typedef
    ::TAO_Seq_Out_T<
        DoubleSeq
      >
    DoubleSeq_out;

  class TAO_TTest_Export DoubleSeq
    : public
        ::TAO::unbounded_value_sequence<
            ::CORBA::Double
          >
  {
  public:
    DoubleSeq (void);
    DoubleSeq ( ::CORBA::ULong max);
    DoubleSeq (
      ::CORBA::ULong max,
      ::CORBA::ULong length,
      ::CORBA::Double* buffer,
      ::CORBA::Boolean release = false);
    DoubleSeq (const DoubleSeq &);
    virtual ~DoubleSeq (void);


    // TAO_IDL - Generated from
    // be/be_type.cpp:304


    typedef DoubleSeq_var _var_type;
    typedef DoubleSeq_out _out_type;

    static void _tao_any_destructor (void *);
  };

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // be/be_visitor_typecode/typecode_decl.cpp:34

  extern TAO_TTest_Export ::CORBA::TypeCode_ptr const _tc_DoubleSeq;

  // TAO_IDL - Generated from
  // be/be_visitor_sequence/sequence_ch.cpp:99

#if !defined (_TAO_TRADER_TEST_STRINGSEQ_CH_)
#define _TAO_TRADER_TEST_STRINGSEQ_CH_

  class StringSeq;

  typedef
    ::TAO_VarSeq_Var_T<
        StringSeq
      >
    StringSeq_var;

  typedef
    ::TAO_Seq_Out_T<
        StringSeq
      >
    StringSeq_out;

  class TAO_TTest_Export StringSeq
    : public
        ::TAO::unbounded_basic_string_sequence<char>
  {
  public:
    StringSeq (void);
    StringSeq ( ::CORBA::ULong max);
    StringSeq (
      ::CORBA::ULong max,
      ::CORBA::ULong length,
      ::CORBA::Char ** buffer,
      ::CORBA::Boolean release = false);
    StringSeq (const StringSeq &);
    virtual ~StringSeq (void);


    // TAO_IDL - Generated from
    // be/be_type.cpp:304


    typedef StringSeq_var _var_type;
    typedef StringSeq_out _out_type;

    static void _tao_any_destructor (void *);
  };

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // be/be_visitor_typecode/typecode_decl.cpp:34

  extern TAO_TTest_Export ::CORBA::TypeCode_ptr const _tc_StringSeq;

// TAO_IDL - Generated from
// be/be_visitor_module/module_ch.cpp:64

} // module TAO_Trader_Test

// TAO_IDL - Generated from
// be/be_visitor_arg_traits.cpp:66

TAO_BEGIN_VERSIONED_NAMESPACE_DECL


// Arg traits specializations.
namespace TAO
{

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:145

#if !defined (_TAO_TRADER_TEST_REMOTE_OUTPUT__ARG_TRAITS_)
#define _TAO_TRADER_TEST_REMOTE_OUTPUT__ARG_TRAITS_

  template<>
  class  Arg_Traits< ::TAO_Trader_Test::Remote_Output>
    : public
        Object_Arg_Traits_T<
            ::TAO_Trader_Test::Remote_Output_ptr,
            ::TAO_Trader_Test::Remote_Output_var,
            ::TAO_Trader_Test::Remote_Output_out,
            TAO::Objref_Traits<TAO_Trader_Test::Remote_Output>,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:145

#if !defined (_TAO_TRADER_TEST_PLOTTER__ARG_TRAITS_)
#define _TAO_TRADER_TEST_PLOTTER__ARG_TRAITS_

  template<>
  class  Arg_Traits< ::TAO_Trader_Test::Plotter>
    : public
        Object_Arg_Traits_T<
            ::TAO_Trader_Test::Plotter_ptr,
            ::TAO_Trader_Test::Plotter_var,
            ::TAO_Trader_Test::Plotter_out,
            TAO::Objref_Traits<TAO_Trader_Test::Plotter>,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:145

#if !defined (_TAO_TRADER_TEST_PRINTER__ARG_TRAITS_)
#define _TAO_TRADER_TEST_PRINTER__ARG_TRAITS_

  template<>
  class  Arg_Traits< ::TAO_Trader_Test::Printer>
    : public
        Object_Arg_Traits_T<
            ::TAO_Trader_Test::Printer_ptr,
            ::TAO_Trader_Test::Printer_var,
            ::TAO_Trader_Test::Printer_out,
            TAO::Objref_Traits<TAO_Trader_Test::Printer>,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:145

#if !defined (_TAO_TRADER_TEST_FILE_SYSTEM__ARG_TRAITS_)
#define _TAO_TRADER_TEST_FILE_SYSTEM__ARG_TRAITS_

  template<>
  class  Arg_Traits< ::TAO_Trader_Test::File_System>
    : public
        Object_Arg_Traits_T<
            ::TAO_Trader_Test::File_System_ptr,
            ::TAO_Trader_Test::File_System_var,
            ::TAO_Trader_Test::File_System_out,
            TAO::Objref_Traits<TAO_Trader_Test::File_System>,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:145

#if !defined (_TAO_TRADER_TEST_POSTSCRIPT_PRINTER__ARG_TRAITS_)
#define _TAO_TRADER_TEST_POSTSCRIPT_PRINTER__ARG_TRAITS_

  template<>
  class  Arg_Traits< ::TAO_Trader_Test::PostScript_Printer>
    : public
        Object_Arg_Traits_T<
            ::TAO_Trader_Test::PostScript_Printer_ptr,
            ::TAO_Trader_Test::PostScript_Printer_var,
            ::TAO_Trader_Test::PostScript_Printer_out,
            TAO::Objref_Traits<TAO_Trader_Test::PostScript_Printer>,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:683

  template<>
  class Arg_Traits< ::TAO_Trader_Test::ShortSeq>
    : public
        Var_Size_Arg_Traits_T<
            ::TAO_Trader_Test::ShortSeq,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:683

  template<>
  class Arg_Traits< ::TAO_Trader_Test::UShortSeq>
    : public
        Var_Size_Arg_Traits_T<
            ::TAO_Trader_Test::UShortSeq,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:683

  template<>
  class Arg_Traits< ::TAO_Trader_Test::LongSeq>
    : public
        Var_Size_Arg_Traits_T<
            ::TAO_Trader_Test::LongSeq,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:683

  template<>
  class Arg_Traits< ::TAO_Trader_Test::ULongSeq>
    : public
        Var_Size_Arg_Traits_T<
            ::TAO_Trader_Test::ULongSeq,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:683

  template<>
  class Arg_Traits< ::TAO_Trader_Test::BooleanSeq>
    : public
        Var_Size_Arg_Traits_T<
            ::TAO_Trader_Test::BooleanSeq,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:683

  template<>
  class Arg_Traits< ::TAO_Trader_Test::FloatSeq>
    : public
        Var_Size_Arg_Traits_T<
            ::TAO_Trader_Test::FloatSeq,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:683

  template<>
  class Arg_Traits< ::TAO_Trader_Test::DoubleSeq>
    : public
        Var_Size_Arg_Traits_T<
            ::TAO_Trader_Test::DoubleSeq,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:683

  template<>
  class Arg_Traits< ::TAO_Trader_Test::StringSeq>
    : public
        Var_Size_Arg_Traits_T<
            ::TAO_Trader_Test::StringSeq,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_traits.cpp:60

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Traits specializations.
namespace TAO
{

#if !defined (_TAO_TRADER_TEST_REMOTE_OUTPUT__TRAITS_)
#define _TAO_TRADER_TEST_REMOTE_OUTPUT__TRAITS_

  template<>
  struct TAO_TTest_Export Objref_Traits< ::TAO_Trader_Test::Remote_Output>
  {
    static ::TAO_Trader_Test::Remote_Output_ptr duplicate (
        ::TAO_Trader_Test::Remote_Output_ptr p);
    static void release (
        ::TAO_Trader_Test::Remote_Output_ptr p);
    static ::TAO_Trader_Test::Remote_Output_ptr nil (void);
    static ::CORBA::Boolean marshal (
        const ::TAO_Trader_Test::Remote_Output_ptr p,
        TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_TAO_TRADER_TEST_PLOTTER__TRAITS_)
#define _TAO_TRADER_TEST_PLOTTER__TRAITS_

  template<>
  struct TAO_TTest_Export Objref_Traits< ::TAO_Trader_Test::Plotter>
  {
    static ::TAO_Trader_Test::Plotter_ptr duplicate (
        ::TAO_Trader_Test::Plotter_ptr p);
    static void release (
        ::TAO_Trader_Test::Plotter_ptr p);
    static ::TAO_Trader_Test::Plotter_ptr nil (void);
    static ::CORBA::Boolean marshal (
        const ::TAO_Trader_Test::Plotter_ptr p,
        TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_TAO_TRADER_TEST_PRINTER__TRAITS_)
#define _TAO_TRADER_TEST_PRINTER__TRAITS_

  template<>
  struct TAO_TTest_Export Objref_Traits< ::TAO_Trader_Test::Printer>
  {
    static ::TAO_Trader_Test::Printer_ptr duplicate (
        ::TAO_Trader_Test::Printer_ptr p);
    static void release (
        ::TAO_Trader_Test::Printer_ptr p);
    static ::TAO_Trader_Test::Printer_ptr nil (void);
    static ::CORBA::Boolean marshal (
        const ::TAO_Trader_Test::Printer_ptr p,
        TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_TAO_TRADER_TEST_FILE_SYSTEM__TRAITS_)
#define _TAO_TRADER_TEST_FILE_SYSTEM__TRAITS_

  template<>
  struct TAO_TTest_Export Objref_Traits< ::TAO_Trader_Test::File_System>
  {
    static ::TAO_Trader_Test::File_System_ptr duplicate (
        ::TAO_Trader_Test::File_System_ptr p);
    static void release (
        ::TAO_Trader_Test::File_System_ptr p);
    static ::TAO_Trader_Test::File_System_ptr nil (void);
    static ::CORBA::Boolean marshal (
        const ::TAO_Trader_Test::File_System_ptr p,
        TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_TAO_TRADER_TEST_POSTSCRIPT_PRINTER__TRAITS_)
#define _TAO_TRADER_TEST_POSTSCRIPT_PRINTER__TRAITS_

  template<>
  struct TAO_TTest_Export Objref_Traits< ::TAO_Trader_Test::PostScript_Printer>
  {
    static ::TAO_Trader_Test::PostScript_Printer_ptr duplicate (
        ::TAO_Trader_Test::PostScript_Printer_ptr p);
    static void release (
        ::TAO_Trader_Test::PostScript_Printer_ptr p);
    static ::TAO_Trader_Test::PostScript_Printer_ptr nil (void);
    static ::CORBA::Boolean marshal (
        const ::TAO_Trader_Test::PostScript_Printer_ptr p,
        TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */
}
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_interface/any_op_ch.cpp:41



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace TAO_Trader_Test
{
  TAO_TTest_Export void operator<<= ( ::CORBA::Any &, Remote_Output_ptr); // copying
  TAO_TTest_Export void operator<<= ( ::CORBA::Any &, Remote_Output_ptr *); // non-copying
  TAO_TTest_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, Remote_Output_ptr &);
}

#else


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_TTest_Export void operator<<= (::CORBA::Any &, TAO_Trader_Test::Remote_Output_ptr); // copying
TAO_TTest_Export void operator<<= (::CORBA::Any &, TAO_Trader_Test::Remote_Output_ptr *); // non-copying
TAO_TTest_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, TAO_Trader_Test::Remote_Output_ptr &);
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_interface/any_op_ch.cpp:41



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace TAO_Trader_Test
{
  TAO_TTest_Export void operator<<= ( ::CORBA::Any &, Plotter_ptr); // copying
  TAO_TTest_Export void operator<<= ( ::CORBA::Any &, Plotter_ptr *); // non-copying
  TAO_TTest_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, Plotter_ptr &);
}

#else


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_TTest_Export void operator<<= (::CORBA::Any &, TAO_Trader_Test::Plotter_ptr); // copying
TAO_TTest_Export void operator<<= (::CORBA::Any &, TAO_Trader_Test::Plotter_ptr *); // non-copying
TAO_TTest_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, TAO_Trader_Test::Plotter_ptr &);
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_interface/any_op_ch.cpp:41



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace TAO_Trader_Test
{
  TAO_TTest_Export void operator<<= ( ::CORBA::Any &, Printer_ptr); // copying
  TAO_TTest_Export void operator<<= ( ::CORBA::Any &, Printer_ptr *); // non-copying
  TAO_TTest_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, Printer_ptr &);
}

#else


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_TTest_Export void operator<<= (::CORBA::Any &, TAO_Trader_Test::Printer_ptr); // copying
TAO_TTest_Export void operator<<= (::CORBA::Any &, TAO_Trader_Test::Printer_ptr *); // non-copying
TAO_TTest_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, TAO_Trader_Test::Printer_ptr &);
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_interface/any_op_ch.cpp:41



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace TAO_Trader_Test
{
  TAO_TTest_Export void operator<<= ( ::CORBA::Any &, File_System_ptr); // copying
  TAO_TTest_Export void operator<<= ( ::CORBA::Any &, File_System_ptr *); // non-copying
  TAO_TTest_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, File_System_ptr &);
}

#else


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_TTest_Export void operator<<= (::CORBA::Any &, TAO_Trader_Test::File_System_ptr); // copying
TAO_TTest_Export void operator<<= (::CORBA::Any &, TAO_Trader_Test::File_System_ptr *); // non-copying
TAO_TTest_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, TAO_Trader_Test::File_System_ptr &);
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_interface/any_op_ch.cpp:41



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace TAO_Trader_Test
{
  TAO_TTest_Export void operator<<= ( ::CORBA::Any &, PostScript_Printer_ptr); // copying
  TAO_TTest_Export void operator<<= ( ::CORBA::Any &, PostScript_Printer_ptr *); // non-copying
  TAO_TTest_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, PostScript_Printer_ptr &);
}

#else


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_TTest_Export void operator<<= (::CORBA::Any &, TAO_Trader_Test::PostScript_Printer_ptr); // copying
TAO_TTest_Export void operator<<= (::CORBA::Any &, TAO_Trader_Test::PostScript_Printer_ptr *); // non-copying
TAO_TTest_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, TAO_Trader_Test::PostScript_Printer_ptr &);
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_sequence/any_op_ch.cpp:47



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace TAO_Trader_Test
{
  TAO_TTest_Export void operator<<= ( ::CORBA::Any &, const ::TAO_Trader_Test::ShortSeq &); // copying version
  TAO_TTest_Export void operator<<= ( ::CORBA::Any &, ::TAO_Trader_Test::ShortSeq*); // noncopying version
  TAO_TTest_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, ::TAO_Trader_Test::ShortSeq *&); // deprecated
  TAO_TTest_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const ::TAO_Trader_Test::ShortSeq *&);
}

#else


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_TTest_Export void operator<<= ( ::CORBA::Any &, const TAO_Trader_Test::ShortSeq &); // copying version
TAO_TTest_Export void operator<<= ( ::CORBA::Any &, TAO_Trader_Test::ShortSeq*); // noncopying version
TAO_TTest_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, TAO_Trader_Test::ShortSeq *&); // deprecated
TAO_TTest_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const TAO_Trader_Test::ShortSeq *&);
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_sequence/any_op_ch.cpp:47



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace TAO_Trader_Test
{
  TAO_TTest_Export void operator<<= ( ::CORBA::Any &, const ::TAO_Trader_Test::UShortSeq &); // copying version
  TAO_TTest_Export void operator<<= ( ::CORBA::Any &, ::TAO_Trader_Test::UShortSeq*); // noncopying version
  TAO_TTest_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, ::TAO_Trader_Test::UShortSeq *&); // deprecated
  TAO_TTest_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const ::TAO_Trader_Test::UShortSeq *&);
}

#else


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_TTest_Export void operator<<= ( ::CORBA::Any &, const TAO_Trader_Test::UShortSeq &); // copying version
TAO_TTest_Export void operator<<= ( ::CORBA::Any &, TAO_Trader_Test::UShortSeq*); // noncopying version
TAO_TTest_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, TAO_Trader_Test::UShortSeq *&); // deprecated
TAO_TTest_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const TAO_Trader_Test::UShortSeq *&);
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_sequence/any_op_ch.cpp:47



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace TAO_Trader_Test
{
  TAO_TTest_Export void operator<<= ( ::CORBA::Any &, const ::TAO_Trader_Test::LongSeq &); // copying version
  TAO_TTest_Export void operator<<= ( ::CORBA::Any &, ::TAO_Trader_Test::LongSeq*); // noncopying version
  TAO_TTest_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, ::TAO_Trader_Test::LongSeq *&); // deprecated
  TAO_TTest_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const ::TAO_Trader_Test::LongSeq *&);
}

#else


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_TTest_Export void operator<<= ( ::CORBA::Any &, const TAO_Trader_Test::LongSeq &); // copying version
TAO_TTest_Export void operator<<= ( ::CORBA::Any &, TAO_Trader_Test::LongSeq*); // noncopying version
TAO_TTest_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, TAO_Trader_Test::LongSeq *&); // deprecated
TAO_TTest_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const TAO_Trader_Test::LongSeq *&);
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_sequence/any_op_ch.cpp:47



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace TAO_Trader_Test
{
  TAO_TTest_Export void operator<<= ( ::CORBA::Any &, const ::TAO_Trader_Test::ULongSeq &); // copying version
  TAO_TTest_Export void operator<<= ( ::CORBA::Any &, ::TAO_Trader_Test::ULongSeq*); // noncopying version
  TAO_TTest_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, ::TAO_Trader_Test::ULongSeq *&); // deprecated
  TAO_TTest_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const ::TAO_Trader_Test::ULongSeq *&);
}

#else


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_TTest_Export void operator<<= ( ::CORBA::Any &, const TAO_Trader_Test::ULongSeq &); // copying version
TAO_TTest_Export void operator<<= ( ::CORBA::Any &, TAO_Trader_Test::ULongSeq*); // noncopying version
TAO_TTest_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, TAO_Trader_Test::ULongSeq *&); // deprecated
TAO_TTest_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const TAO_Trader_Test::ULongSeq *&);
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_sequence/any_op_ch.cpp:47



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace TAO_Trader_Test
{
  TAO_TTest_Export void operator<<= ( ::CORBA::Any &, const ::TAO_Trader_Test::BooleanSeq &); // copying version
  TAO_TTest_Export void operator<<= ( ::CORBA::Any &, ::TAO_Trader_Test::BooleanSeq*); // noncopying version
  TAO_TTest_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, ::TAO_Trader_Test::BooleanSeq *&); // deprecated
  TAO_TTest_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const ::TAO_Trader_Test::BooleanSeq *&);
}

#else


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_TTest_Export void operator<<= ( ::CORBA::Any &, const TAO_Trader_Test::BooleanSeq &); // copying version
TAO_TTest_Export void operator<<= ( ::CORBA::Any &, TAO_Trader_Test::BooleanSeq*); // noncopying version
TAO_TTest_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, TAO_Trader_Test::BooleanSeq *&); // deprecated
TAO_TTest_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const TAO_Trader_Test::BooleanSeq *&);
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_sequence/any_op_ch.cpp:47



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace TAO_Trader_Test
{
  TAO_TTest_Export void operator<<= ( ::CORBA::Any &, const ::TAO_Trader_Test::FloatSeq &); // copying version
  TAO_TTest_Export void operator<<= ( ::CORBA::Any &, ::TAO_Trader_Test::FloatSeq*); // noncopying version
  TAO_TTest_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, ::TAO_Trader_Test::FloatSeq *&); // deprecated
  TAO_TTest_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const ::TAO_Trader_Test::FloatSeq *&);
}

#else


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_TTest_Export void operator<<= ( ::CORBA::Any &, const TAO_Trader_Test::FloatSeq &); // copying version
TAO_TTest_Export void operator<<= ( ::CORBA::Any &, TAO_Trader_Test::FloatSeq*); // noncopying version
TAO_TTest_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, TAO_Trader_Test::FloatSeq *&); // deprecated
TAO_TTest_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const TAO_Trader_Test::FloatSeq *&);
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_sequence/any_op_ch.cpp:47



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace TAO_Trader_Test
{
  TAO_TTest_Export void operator<<= ( ::CORBA::Any &, const ::TAO_Trader_Test::DoubleSeq &); // copying version
  TAO_TTest_Export void operator<<= ( ::CORBA::Any &, ::TAO_Trader_Test::DoubleSeq*); // noncopying version
  TAO_TTest_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, ::TAO_Trader_Test::DoubleSeq *&); // deprecated
  TAO_TTest_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const ::TAO_Trader_Test::DoubleSeq *&);
}

#else


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_TTest_Export void operator<<= ( ::CORBA::Any &, const TAO_Trader_Test::DoubleSeq &); // copying version
TAO_TTest_Export void operator<<= ( ::CORBA::Any &, TAO_Trader_Test::DoubleSeq*); // noncopying version
TAO_TTest_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, TAO_Trader_Test::DoubleSeq *&); // deprecated
TAO_TTest_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const TAO_Trader_Test::DoubleSeq *&);
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_sequence/any_op_ch.cpp:47



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace TAO_Trader_Test
{
  TAO_TTest_Export void operator<<= ( ::CORBA::Any &, const ::TAO_Trader_Test::StringSeq &); // copying version
  TAO_TTest_Export void operator<<= ( ::CORBA::Any &, ::TAO_Trader_Test::StringSeq*); // noncopying version
  TAO_TTest_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, ::TAO_Trader_Test::StringSeq *&); // deprecated
  TAO_TTest_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const ::TAO_Trader_Test::StringSeq *&);
}

#else


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_TTest_Export void operator<<= ( ::CORBA::Any &, const TAO_Trader_Test::StringSeq &); // copying version
TAO_TTest_Export void operator<<= ( ::CORBA::Any &, TAO_Trader_Test::StringSeq*); // noncopying version
TAO_TTest_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, TAO_Trader_Test::StringSeq *&); // deprecated
TAO_TTest_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const TAO_Trader_Test::StringSeq *&);
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_interface/cdr_op_ch.cpp:41

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_TTest_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const TAO_Trader_Test::Remote_Output_ptr );
TAO_TTest_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, TAO_Trader_Test::Remote_Output_ptr &);

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_interface/cdr_op_ch.cpp:41

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_TTest_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const TAO_Trader_Test::Plotter_ptr );
TAO_TTest_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, TAO_Trader_Test::Plotter_ptr &);

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_interface/cdr_op_ch.cpp:41

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_TTest_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const TAO_Trader_Test::Printer_ptr );
TAO_TTest_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, TAO_Trader_Test::Printer_ptr &);

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_interface/cdr_op_ch.cpp:41

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_TTest_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const TAO_Trader_Test::File_System_ptr );
TAO_TTest_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, TAO_Trader_Test::File_System_ptr &);

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_interface/cdr_op_ch.cpp:41

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_TTest_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const TAO_Trader_Test::PostScript_Printer_ptr );
TAO_TTest_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, TAO_Trader_Test::PostScript_Printer_ptr &);

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_sequence/cdr_op_ch.cpp:65

#if !defined _TAO_CDR_OP_TAO_Trader_Test_ShortSeq_H_
#define _TAO_CDR_OP_TAO_Trader_Test_ShortSeq_H_
TAO_BEGIN_VERSIONED_NAMESPACE_DECL


TAO_TTest_Export ::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const TAO_Trader_Test::ShortSeq &_tao_sequence);
TAO_TTest_Export ::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    TAO_Trader_Test::ShortSeq &_tao_sequence);

TAO_END_VERSIONED_NAMESPACE_DECL



#endif /* _TAO_CDR_OP_TAO_Trader_Test_ShortSeq_H_ */

// TAO_IDL - Generated from
// be/be_visitor_sequence/cdr_op_ch.cpp:65

#if !defined _TAO_CDR_OP_TAO_Trader_Test_UShortSeq_H_
#define _TAO_CDR_OP_TAO_Trader_Test_UShortSeq_H_
TAO_BEGIN_VERSIONED_NAMESPACE_DECL


TAO_TTest_Export ::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const TAO_Trader_Test::UShortSeq &_tao_sequence);
TAO_TTest_Export ::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    TAO_Trader_Test::UShortSeq &_tao_sequence);

TAO_END_VERSIONED_NAMESPACE_DECL



#endif /* _TAO_CDR_OP_TAO_Trader_Test_UShortSeq_H_ */

// TAO_IDL - Generated from
// be/be_visitor_sequence/cdr_op_ch.cpp:65

#if !defined _TAO_CDR_OP_TAO_Trader_Test_LongSeq_H_
#define _TAO_CDR_OP_TAO_Trader_Test_LongSeq_H_
TAO_BEGIN_VERSIONED_NAMESPACE_DECL


TAO_TTest_Export ::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const TAO_Trader_Test::LongSeq &_tao_sequence);
TAO_TTest_Export ::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    TAO_Trader_Test::LongSeq &_tao_sequence);

TAO_END_VERSIONED_NAMESPACE_DECL



#endif /* _TAO_CDR_OP_TAO_Trader_Test_LongSeq_H_ */

// TAO_IDL - Generated from
// be/be_visitor_sequence/cdr_op_ch.cpp:65

#if !defined _TAO_CDR_OP_TAO_Trader_Test_ULongSeq_H_
#define _TAO_CDR_OP_TAO_Trader_Test_ULongSeq_H_
TAO_BEGIN_VERSIONED_NAMESPACE_DECL


TAO_TTest_Export ::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const TAO_Trader_Test::ULongSeq &_tao_sequence);
TAO_TTest_Export ::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    TAO_Trader_Test::ULongSeq &_tao_sequence);

TAO_END_VERSIONED_NAMESPACE_DECL



#endif /* _TAO_CDR_OP_TAO_Trader_Test_ULongSeq_H_ */

// TAO_IDL - Generated from
// be/be_visitor_sequence/cdr_op_ch.cpp:65

#if !defined _TAO_CDR_OP_TAO_Trader_Test_BooleanSeq_H_
#define _TAO_CDR_OP_TAO_Trader_Test_BooleanSeq_H_
TAO_BEGIN_VERSIONED_NAMESPACE_DECL


TAO_TTest_Export ::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const TAO_Trader_Test::BooleanSeq &_tao_sequence);
TAO_TTest_Export ::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    TAO_Trader_Test::BooleanSeq &_tao_sequence);

TAO_END_VERSIONED_NAMESPACE_DECL



#endif /* _TAO_CDR_OP_TAO_Trader_Test_BooleanSeq_H_ */

// TAO_IDL - Generated from
// be/be_visitor_sequence/cdr_op_ch.cpp:65

#if !defined _TAO_CDR_OP_TAO_Trader_Test_FloatSeq_H_
#define _TAO_CDR_OP_TAO_Trader_Test_FloatSeq_H_
TAO_BEGIN_VERSIONED_NAMESPACE_DECL


TAO_TTest_Export ::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const TAO_Trader_Test::FloatSeq &_tao_sequence);
TAO_TTest_Export ::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    TAO_Trader_Test::FloatSeq &_tao_sequence);

TAO_END_VERSIONED_NAMESPACE_DECL



#endif /* _TAO_CDR_OP_TAO_Trader_Test_FloatSeq_H_ */

// TAO_IDL - Generated from
// be/be_visitor_sequence/cdr_op_ch.cpp:65

#if !defined _TAO_CDR_OP_TAO_Trader_Test_DoubleSeq_H_
#define _TAO_CDR_OP_TAO_Trader_Test_DoubleSeq_H_
TAO_BEGIN_VERSIONED_NAMESPACE_DECL


TAO_TTest_Export ::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const TAO_Trader_Test::DoubleSeq &_tao_sequence);
TAO_TTest_Export ::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    TAO_Trader_Test::DoubleSeq &_tao_sequence);

TAO_END_VERSIONED_NAMESPACE_DECL



#endif /* _TAO_CDR_OP_TAO_Trader_Test_DoubleSeq_H_ */

// TAO_IDL - Generated from
// be/be_visitor_sequence/cdr_op_ch.cpp:65

#if !defined _TAO_CDR_OP_TAO_Trader_Test_StringSeq_H_
#define _TAO_CDR_OP_TAO_Trader_Test_StringSeq_H_
TAO_BEGIN_VERSIONED_NAMESPACE_DECL


TAO_TTest_Export ::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const TAO_Trader_Test::StringSeq &_tao_sequence);
TAO_TTest_Export ::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    TAO_Trader_Test::StringSeq &_tao_sequence);

TAO_END_VERSIONED_NAMESPACE_DECL



#endif /* _TAO_CDR_OP_TAO_Trader_Test_StringSeq_H_ */

// TAO_IDL - Generated from
// be/be_codegen.cpp:1700
#if defined (__ACE_INLINE__)
#include "TTestC.inl"
#endif /* defined INLINE */

#include /**/ "ace/post.h"

#endif /* ifndef */

