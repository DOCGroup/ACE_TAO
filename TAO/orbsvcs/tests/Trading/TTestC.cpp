// -*- C++ -*-
/**
 * Code generated by the The ACE ORB (TAO) IDL Compiler v2.4.1
 * TAO and the TAO IDL Compiler have been developed by:
 *       Center for Distributed Object Computing
 *       Washington University
 *       St. Louis, MO
 *       USA
 *       http://www.cs.wustl.edu/~schmidt/doc-center.html
 * and
 *       Distributed Object Computing Laboratory
 *       University of California at Irvine
 *       Irvine, CA
 *       USA
 * and
 *       Institute for Software Integrated Systems
 *       Vanderbilt University
 *       Nashville, TN
 *       USA
 *       http://www.isis.vanderbilt.edu/
 *
 * Information about TAO is available at:
 *     http://www.dre.vanderbilt.edu/~schmidt/TAO.html
 **/

// TAO_IDL - Generated from
// be/be_codegen.cpp:373


#include "TTestC.h"
#include "tao/AnyTypeCode/Null_RefCount_Policy.h"
#include "tao/AnyTypeCode/TypeCode_Constants.h"
#include "tao/AnyTypeCode/Alias_TypeCode_Static.h"
#include "tao/AnyTypeCode/Objref_TypeCode_Static.h"
#include "tao/AnyTypeCode/Sequence_TypeCode_Static.h"
#include "tao/AnyTypeCode/String_TypeCode_Static.h"
#include "tao/CDR.h"
#include "tao/Exception_Data.h"
#include "tao/Invocation_Adapter.h"
#include "tao/Object_T.h"
#include "tao/CDR.h"
#include "tao/AnyTypeCode/Any.h"
#include "tao/AnyTypeCode/Any_Impl_T.h"
#include "tao/AnyTypeCode/Any_Dual_Impl_T.h"
#include "ace/OS_NS_string.h"

#if !defined (__ACE_INLINE__)
#include "TTestC.inl"
#endif /* !defined INLINE */

// TAO_IDL - Generated from
// be/be_visitor_interface/interface_cs.cpp:48

// Traits specializations for TAO_Trader_Test::Remote_Output.

TAO_Trader_Test::Remote_Output_ptr
TAO::Objref_Traits<TAO_Trader_Test::Remote_Output>::duplicate (
    TAO_Trader_Test::Remote_Output_ptr p)
{
  return TAO_Trader_Test::Remote_Output::_duplicate (p);
}

void
TAO::Objref_Traits<TAO_Trader_Test::Remote_Output>::release (
    TAO_Trader_Test::Remote_Output_ptr p)
{
  ::CORBA::release (p);
}

TAO_Trader_Test::Remote_Output_ptr
TAO::Objref_Traits<TAO_Trader_Test::Remote_Output>::nil (void)
{
  return TAO_Trader_Test::Remote_Output::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<TAO_Trader_Test::Remote_Output>::marshal (
    const TAO_Trader_Test::Remote_Output_ptr p,
    TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:88

void
TAO_Trader_Test::Remote_Output::confirm (
  void)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  TAO::Arg_Traits< void>::ret_val _tao_retval;

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      1,
      "confirm",
      7,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY,
      TAO::TAO_TWOWAY_INVOCATION
      ,
      TAO::TAO_SYNCHRONOUS_INVOCATION,
      false
    );

  _tao_call.invoke (0, 0);
}

TAO_Trader_Test::Remote_Output::Remote_Output (void)
{
}

TAO_Trader_Test::Remote_Output::~Remote_Output (void)
{
}

void
TAO_Trader_Test::Remote_Output::_tao_any_destructor (void *_tao_void_pointer)
{
  Remote_Output *_tao_tmp_pointer =
    static_cast<Remote_Output *> (_tao_void_pointer);
  ::CORBA::release (_tao_tmp_pointer);
}

TAO_Trader_Test::Remote_Output_ptr
TAO_Trader_Test::Remote_Output::_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return
    TAO::Narrow_Utils<Remote_Output>::narrow (
        _tao_objref,
        "IDL:TAO_Trader_Test/Remote_Output:1.0");
}

TAO_Trader_Test::Remote_Output_ptr
TAO_Trader_Test::Remote_Output::_unchecked_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return
    TAO::Narrow_Utils<Remote_Output>::unchecked_narrow (
        _tao_objref);
}

TAO_Trader_Test::Remote_Output_ptr
TAO_Trader_Test::Remote_Output::_nil (void)
{
  return 0;
}

TAO_Trader_Test::Remote_Output_ptr
TAO_Trader_Test::Remote_Output::_duplicate (Remote_Output_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  return obj;
}

void
TAO_Trader_Test::Remote_Output::_tao_release (Remote_Output_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
TAO_Trader_Test::Remote_Output::_is_a (const char *value)
{
  if (
      ACE_OS::strcmp (
          value,
          "IDL:TAO_Trader_Test/Remote_Output:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        ) == 0
    )
    {
      return true; // success using local knowledge
    }
  else
    {
      return this->::CORBA::Object::_is_a (value);
    }
}

const char* TAO_Trader_Test::Remote_Output::_interface_repository_id (void) const
{
  return "IDL:TAO_Trader_Test/Remote_Output:1.0";
}

::CORBA::Boolean
TAO_Trader_Test::Remote_Output::marshal (TAO_OutputCDR &cdr)
{
  return (cdr << this);
}

// TAO_IDL - Generated from
// be/be_visitor_typecode/objref_typecode.cpp:70

static TAO::TypeCode::Objref<char const *,
                             TAO::Null_RefCount_Policy>
  _tao_tc_TAO_Trader_Test_Remote_Output (
    ::CORBA::tk_objref,
    "IDL:TAO_Trader_Test/Remote_Output:1.0",
    "Remote_Output");
  

namespace TAO_Trader_Test
{
  ::CORBA::TypeCode_ptr const _tc_Remote_Output =
    &_tao_tc_TAO_Trader_Test_Remote_Output;
}

// TAO_IDL - Generated from
// be/be_visitor_interface/interface_cs.cpp:48

// Traits specializations for TAO_Trader_Test::Plotter.

TAO_Trader_Test::Plotter_ptr
TAO::Objref_Traits<TAO_Trader_Test::Plotter>::duplicate (
    TAO_Trader_Test::Plotter_ptr p)
{
  return TAO_Trader_Test::Plotter::_duplicate (p);
}

void
TAO::Objref_Traits<TAO_Trader_Test::Plotter>::release (
    TAO_Trader_Test::Plotter_ptr p)
{
  ::CORBA::release (p);
}

TAO_Trader_Test::Plotter_ptr
TAO::Objref_Traits<TAO_Trader_Test::Plotter>::nil (void)
{
  return TAO_Trader_Test::Plotter::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<TAO_Trader_Test::Plotter>::marshal (
    const TAO_Trader_Test::Plotter_ptr p,
    TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

TAO_Trader_Test::Plotter::Plotter (void)
{
}

TAO_Trader_Test::Plotter::~Plotter (void)
{
}

void
TAO_Trader_Test::Plotter::_tao_any_destructor (void *_tao_void_pointer)
{
  Plotter *_tao_tmp_pointer =
    static_cast<Plotter *> (_tao_void_pointer);
  ::CORBA::release (_tao_tmp_pointer);
}

TAO_Trader_Test::Plotter_ptr
TAO_Trader_Test::Plotter::_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return
    TAO::Narrow_Utils<Plotter>::narrow (
        _tao_objref,
        "IDL:TAO_Trader_Test/Plotter:1.0");
}

TAO_Trader_Test::Plotter_ptr
TAO_Trader_Test::Plotter::_unchecked_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return
    TAO::Narrow_Utils<Plotter>::unchecked_narrow (
        _tao_objref);
}

TAO_Trader_Test::Plotter_ptr
TAO_Trader_Test::Plotter::_nil (void)
{
  return 0;
}

TAO_Trader_Test::Plotter_ptr
TAO_Trader_Test::Plotter::_duplicate (Plotter_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  return obj;
}

void
TAO_Trader_Test::Plotter::_tao_release (Plotter_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
TAO_Trader_Test::Plotter::_is_a (const char *value)
{
  if (
      ACE_OS::strcmp (
          value,
          "IDL:TAO_Trader_Test/Remote_Output:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:TAO_Trader_Test/Plotter:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        ) == 0
    )
    {
      return true; // success using local knowledge
    }
  else
    {
      return this->::CORBA::Object::_is_a (value);
    }
}

const char* TAO_Trader_Test::Plotter::_interface_repository_id (void) const
{
  return "IDL:TAO_Trader_Test/Plotter:1.0";
}

::CORBA::Boolean
TAO_Trader_Test::Plotter::marshal (TAO_OutputCDR &cdr)
{
  return (cdr << this);
}

// TAO_IDL - Generated from
// be/be_visitor_typecode/objref_typecode.cpp:70

static TAO::TypeCode::Objref<char const *,
                             TAO::Null_RefCount_Policy>
  _tao_tc_TAO_Trader_Test_Plotter (
    ::CORBA::tk_objref,
    "IDL:TAO_Trader_Test/Plotter:1.0",
    "Plotter");
  

namespace TAO_Trader_Test
{
  ::CORBA::TypeCode_ptr const _tc_Plotter =
    &_tao_tc_TAO_Trader_Test_Plotter;
}

// TAO_IDL - Generated from
// be/be_visitor_interface/interface_cs.cpp:48

// Traits specializations for TAO_Trader_Test::Printer.

TAO_Trader_Test::Printer_ptr
TAO::Objref_Traits<TAO_Trader_Test::Printer>::duplicate (
    TAO_Trader_Test::Printer_ptr p)
{
  return TAO_Trader_Test::Printer::_duplicate (p);
}

void
TAO::Objref_Traits<TAO_Trader_Test::Printer>::release (
    TAO_Trader_Test::Printer_ptr p)
{
  ::CORBA::release (p);
}

TAO_Trader_Test::Printer_ptr
TAO::Objref_Traits<TAO_Trader_Test::Printer>::nil (void)
{
  return TAO_Trader_Test::Printer::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<TAO_Trader_Test::Printer>::marshal (
    const TAO_Trader_Test::Printer_ptr p,
    TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

TAO_Trader_Test::Printer::Printer (void)
{
}

TAO_Trader_Test::Printer::~Printer (void)
{
}

void
TAO_Trader_Test::Printer::_tao_any_destructor (void *_tao_void_pointer)
{
  Printer *_tao_tmp_pointer =
    static_cast<Printer *> (_tao_void_pointer);
  ::CORBA::release (_tao_tmp_pointer);
}

TAO_Trader_Test::Printer_ptr
TAO_Trader_Test::Printer::_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return
    TAO::Narrow_Utils<Printer>::narrow (
        _tao_objref,
        "IDL:TAO_Trader_Test/Printer:1.0");
}

TAO_Trader_Test::Printer_ptr
TAO_Trader_Test::Printer::_unchecked_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return
    TAO::Narrow_Utils<Printer>::unchecked_narrow (
        _tao_objref);
}

TAO_Trader_Test::Printer_ptr
TAO_Trader_Test::Printer::_nil (void)
{
  return 0;
}

TAO_Trader_Test::Printer_ptr
TAO_Trader_Test::Printer::_duplicate (Printer_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  return obj;
}

void
TAO_Trader_Test::Printer::_tao_release (Printer_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
TAO_Trader_Test::Printer::_is_a (const char *value)
{
  if (
      ACE_OS::strcmp (
          value,
          "IDL:TAO_Trader_Test/Remote_Output:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:TAO_Trader_Test/Printer:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        ) == 0
    )
    {
      return true; // success using local knowledge
    }
  else
    {
      return this->::CORBA::Object::_is_a (value);
    }
}

const char* TAO_Trader_Test::Printer::_interface_repository_id (void) const
{
  return "IDL:TAO_Trader_Test/Printer:1.0";
}

::CORBA::Boolean
TAO_Trader_Test::Printer::marshal (TAO_OutputCDR &cdr)
{
  return (cdr << this);
}

// TAO_IDL - Generated from
// be/be_visitor_typecode/objref_typecode.cpp:70

static TAO::TypeCode::Objref<char const *,
                             TAO::Null_RefCount_Policy>
  _tao_tc_TAO_Trader_Test_Printer (
    ::CORBA::tk_objref,
    "IDL:TAO_Trader_Test/Printer:1.0",
    "Printer");
  

namespace TAO_Trader_Test
{
  ::CORBA::TypeCode_ptr const _tc_Printer =
    &_tao_tc_TAO_Trader_Test_Printer;
}

// TAO_IDL - Generated from
// be/be_visitor_interface/interface_cs.cpp:48

// Traits specializations for TAO_Trader_Test::File_System.

TAO_Trader_Test::File_System_ptr
TAO::Objref_Traits<TAO_Trader_Test::File_System>::duplicate (
    TAO_Trader_Test::File_System_ptr p)
{
  return TAO_Trader_Test::File_System::_duplicate (p);
}

void
TAO::Objref_Traits<TAO_Trader_Test::File_System>::release (
    TAO_Trader_Test::File_System_ptr p)
{
  ::CORBA::release (p);
}

TAO_Trader_Test::File_System_ptr
TAO::Objref_Traits<TAO_Trader_Test::File_System>::nil (void)
{
  return TAO_Trader_Test::File_System::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<TAO_Trader_Test::File_System>::marshal (
    const TAO_Trader_Test::File_System_ptr p,
    TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

TAO_Trader_Test::File_System::File_System (void)
{
}

TAO_Trader_Test::File_System::~File_System (void)
{
}

void
TAO_Trader_Test::File_System::_tao_any_destructor (void *_tao_void_pointer)
{
  File_System *_tao_tmp_pointer =
    static_cast<File_System *> (_tao_void_pointer);
  ::CORBA::release (_tao_tmp_pointer);
}

TAO_Trader_Test::File_System_ptr
TAO_Trader_Test::File_System::_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return
    TAO::Narrow_Utils<File_System>::narrow (
        _tao_objref,
        "IDL:TAO_Trader_Test/File_System:1.0");
}

TAO_Trader_Test::File_System_ptr
TAO_Trader_Test::File_System::_unchecked_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return
    TAO::Narrow_Utils<File_System>::unchecked_narrow (
        _tao_objref);
}

TAO_Trader_Test::File_System_ptr
TAO_Trader_Test::File_System::_nil (void)
{
  return 0;
}

TAO_Trader_Test::File_System_ptr
TAO_Trader_Test::File_System::_duplicate (File_System_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  return obj;
}

void
TAO_Trader_Test::File_System::_tao_release (File_System_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
TAO_Trader_Test::File_System::_is_a (const char *value)
{
  if (
      ACE_OS::strcmp (
          value,
          "IDL:TAO_Trader_Test/Remote_Output:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:TAO_Trader_Test/File_System:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        ) == 0
    )
    {
      return true; // success using local knowledge
    }
  else
    {
      return this->::CORBA::Object::_is_a (value);
    }
}

const char* TAO_Trader_Test::File_System::_interface_repository_id (void) const
{
  return "IDL:TAO_Trader_Test/File_System:1.0";
}

::CORBA::Boolean
TAO_Trader_Test::File_System::marshal (TAO_OutputCDR &cdr)
{
  return (cdr << this);
}

// TAO_IDL - Generated from
// be/be_visitor_typecode/objref_typecode.cpp:70

static TAO::TypeCode::Objref<char const *,
                             TAO::Null_RefCount_Policy>
  _tao_tc_TAO_Trader_Test_File_System (
    ::CORBA::tk_objref,
    "IDL:TAO_Trader_Test/File_System:1.0",
    "File_System");
  

namespace TAO_Trader_Test
{
  ::CORBA::TypeCode_ptr const _tc_File_System =
    &_tao_tc_TAO_Trader_Test_File_System;
}

// TAO_IDL - Generated from
// be/be_visitor_interface/interface_cs.cpp:48

// Traits specializations for TAO_Trader_Test::PostScript_Printer.

TAO_Trader_Test::PostScript_Printer_ptr
TAO::Objref_Traits<TAO_Trader_Test::PostScript_Printer>::duplicate (
    TAO_Trader_Test::PostScript_Printer_ptr p)
{
  return TAO_Trader_Test::PostScript_Printer::_duplicate (p);
}

void
TAO::Objref_Traits<TAO_Trader_Test::PostScript_Printer>::release (
    TAO_Trader_Test::PostScript_Printer_ptr p)
{
  ::CORBA::release (p);
}

TAO_Trader_Test::PostScript_Printer_ptr
TAO::Objref_Traits<TAO_Trader_Test::PostScript_Printer>::nil (void)
{
  return TAO_Trader_Test::PostScript_Printer::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<TAO_Trader_Test::PostScript_Printer>::marshal (
    const TAO_Trader_Test::PostScript_Printer_ptr p,
    TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

TAO_Trader_Test::PostScript_Printer::PostScript_Printer (void)
{
}

TAO_Trader_Test::PostScript_Printer::~PostScript_Printer (void)
{
}

void
TAO_Trader_Test::PostScript_Printer::_tao_any_destructor (void *_tao_void_pointer)
{
  PostScript_Printer *_tao_tmp_pointer =
    static_cast<PostScript_Printer *> (_tao_void_pointer);
  ::CORBA::release (_tao_tmp_pointer);
}

TAO_Trader_Test::PostScript_Printer_ptr
TAO_Trader_Test::PostScript_Printer::_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return
    TAO::Narrow_Utils<PostScript_Printer>::narrow (
        _tao_objref,
        "IDL:TAO_Trader_Test/PostScript_Printer:1.0");
}

TAO_Trader_Test::PostScript_Printer_ptr
TAO_Trader_Test::PostScript_Printer::_unchecked_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return
    TAO::Narrow_Utils<PostScript_Printer>::unchecked_narrow (
        _tao_objref);
}

TAO_Trader_Test::PostScript_Printer_ptr
TAO_Trader_Test::PostScript_Printer::_nil (void)
{
  return 0;
}

TAO_Trader_Test::PostScript_Printer_ptr
TAO_Trader_Test::PostScript_Printer::_duplicate (PostScript_Printer_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  return obj;
}

void
TAO_Trader_Test::PostScript_Printer::_tao_release (PostScript_Printer_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
TAO_Trader_Test::PostScript_Printer::_is_a (const char *value)
{
  if (
      ACE_OS::strcmp (
          value,
          "IDL:TAO_Trader_Test/Remote_Output:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:TAO_Trader_Test/PostScript_Printer:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        ) == 0
    )
    {
      return true; // success using local knowledge
    }
  else
    {
      return this->::CORBA::Object::_is_a (value);
    }
}

const char* TAO_Trader_Test::PostScript_Printer::_interface_repository_id (void) const
{
  return "IDL:TAO_Trader_Test/PostScript_Printer:1.0";
}

::CORBA::Boolean
TAO_Trader_Test::PostScript_Printer::marshal (TAO_OutputCDR &cdr)
{
  return (cdr << this);
}

// TAO_IDL - Generated from
// be/be_visitor_typecode/objref_typecode.cpp:70

static TAO::TypeCode::Objref<char const *,
                             TAO::Null_RefCount_Policy>
  _tao_tc_TAO_Trader_Test_PostScript_Printer (
    ::CORBA::tk_objref,
    "IDL:TAO_Trader_Test/PostScript_Printer:1.0",
    "PostScript_Printer");
  

namespace TAO_Trader_Test
{
  ::CORBA::TypeCode_ptr const _tc_PostScript_Printer =
    &_tao_tc_TAO_Trader_Test_PostScript_Printer;
}

// TAO_IDL - Generated from
// be/be_visitor_sequence/sequence_cs.cpp:70

#if !defined (_TAO_TRADER_TEST_SHORTSEQ_CS_)
#define _TAO_TRADER_TEST_SHORTSEQ_CS_

TAO_Trader_Test::ShortSeq::ShortSeq (void)
{}

TAO_Trader_Test::ShortSeq::ShortSeq (
    ::CORBA::ULong max)
  : ::TAO::unbounded_value_sequence<
        ::CORBA::Short
      > (max)
{}

TAO_Trader_Test::ShortSeq::ShortSeq (
    ::CORBA::ULong max,
    ::CORBA::ULong length,
    ::CORBA::Short * buffer,
    ::CORBA::Boolean release
  )
  : ::TAO::unbounded_value_sequence<
        ::CORBA::Short
      >
    (max, length, buffer, release)
{}

TAO_Trader_Test::ShortSeq::ShortSeq (
    const ShortSeq &seq)
  : ::TAO::unbounded_value_sequence<
        ::CORBA::Short
      > (seq)
{}

TAO_Trader_Test::ShortSeq::~ShortSeq (void)
{}

void TAO_Trader_Test::ShortSeq::_tao_any_destructor (
    void * _tao_void_pointer)
{
  ShortSeq * _tao_tmp_pointer =
    static_cast<ShortSeq *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

#endif /* end #if !defined */

// TAO_IDL - Generated from
// be/be_visitor_typecode/alias_typecode.cpp:49



// TAO_IDL - Generated from
// be/be_visitor_typecode/typecode_defn.cpp:461


#ifndef _TAO_TYPECODE_TAO_Trader_Test_ShortSeq_GUARD
#define _TAO_TYPECODE_TAO_Trader_Test_ShortSeq_GUARD

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

namespace TAO
{
  namespace TypeCode
  {
    namespace
    {
      TAO::TypeCode::Sequence< ::CORBA::TypeCode_ptr const *,
                              TAO::Null_RefCount_Policy>
        TAO_Trader_Test_ShortSeq_0 (
          ::CORBA::tk_sequence,
          &CORBA::_tc_short,
          0U);
        
      ::CORBA::TypeCode_ptr const tc_TAO_Trader_Test_ShortSeq_0 =
        &TAO_Trader_Test_ShortSeq_0;
    }
  }
}

TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_TYPECODE_TAO_Trader_Test_ShortSeq_GUARD */

static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_TAO_Trader_Test_ShortSeq (
    ::CORBA::tk_alias,
    "IDL:TAO_Trader_Test/ShortSeq:1.0",
    "ShortSeq",
    &TAO::TypeCode::tc_TAO_Trader_Test_ShortSeq_0);
  

namespace TAO_Trader_Test
{
  ::CORBA::TypeCode_ptr const _tc_ShortSeq =
    &_tao_tc_TAO_Trader_Test_ShortSeq;
}

// TAO_IDL - Generated from
// be/be_visitor_sequence/sequence_cs.cpp:70

#if !defined (_TAO_TRADER_TEST_USHORTSEQ_CS_)
#define _TAO_TRADER_TEST_USHORTSEQ_CS_

TAO_Trader_Test::UShortSeq::UShortSeq (void)
{}

TAO_Trader_Test::UShortSeq::UShortSeq (
    ::CORBA::ULong max)
  : ::TAO::unbounded_value_sequence<
        ::CORBA::UShort
      > (max)
{}

TAO_Trader_Test::UShortSeq::UShortSeq (
    ::CORBA::ULong max,
    ::CORBA::ULong length,
    ::CORBA::UShort * buffer,
    ::CORBA::Boolean release
  )
  : ::TAO::unbounded_value_sequence<
        ::CORBA::UShort
      >
    (max, length, buffer, release)
{}

TAO_Trader_Test::UShortSeq::UShortSeq (
    const UShortSeq &seq)
  : ::TAO::unbounded_value_sequence<
        ::CORBA::UShort
      > (seq)
{}

TAO_Trader_Test::UShortSeq::~UShortSeq (void)
{}

void TAO_Trader_Test::UShortSeq::_tao_any_destructor (
    void * _tao_void_pointer)
{
  UShortSeq * _tao_tmp_pointer =
    static_cast<UShortSeq *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

#endif /* end #if !defined */

// TAO_IDL - Generated from
// be/be_visitor_typecode/alias_typecode.cpp:49



// TAO_IDL - Generated from
// be/be_visitor_typecode/typecode_defn.cpp:461


#ifndef _TAO_TYPECODE_TAO_Trader_Test_UShortSeq_GUARD
#define _TAO_TYPECODE_TAO_Trader_Test_UShortSeq_GUARD

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

namespace TAO
{
  namespace TypeCode
  {
    namespace
    {
      TAO::TypeCode::Sequence< ::CORBA::TypeCode_ptr const *,
                              TAO::Null_RefCount_Policy>
        TAO_Trader_Test_UShortSeq_0 (
          ::CORBA::tk_sequence,
          &CORBA::_tc_ushort,
          0U);
        
      ::CORBA::TypeCode_ptr const tc_TAO_Trader_Test_UShortSeq_0 =
        &TAO_Trader_Test_UShortSeq_0;
    }
  }
}

TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_TYPECODE_TAO_Trader_Test_UShortSeq_GUARD */

static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_TAO_Trader_Test_UShortSeq (
    ::CORBA::tk_alias,
    "IDL:TAO_Trader_Test/UShortSeq:1.0",
    "UShortSeq",
    &TAO::TypeCode::tc_TAO_Trader_Test_UShortSeq_0);
  

namespace TAO_Trader_Test
{
  ::CORBA::TypeCode_ptr const _tc_UShortSeq =
    &_tao_tc_TAO_Trader_Test_UShortSeq;
}

// TAO_IDL - Generated from
// be/be_visitor_sequence/sequence_cs.cpp:70

#if !defined (_TAO_TRADER_TEST_LONGSEQ_CS_)
#define _TAO_TRADER_TEST_LONGSEQ_CS_

TAO_Trader_Test::LongSeq::LongSeq (void)
{}

TAO_Trader_Test::LongSeq::LongSeq (
    ::CORBA::ULong max)
  : ::TAO::unbounded_value_sequence<
        ::CORBA::Long
      > (max)
{}

TAO_Trader_Test::LongSeq::LongSeq (
    ::CORBA::ULong max,
    ::CORBA::ULong length,
    ::CORBA::Long * buffer,
    ::CORBA::Boolean release
  )
  : ::TAO::unbounded_value_sequence<
        ::CORBA::Long
      >
    (max, length, buffer, release)
{}

TAO_Trader_Test::LongSeq::LongSeq (
    const LongSeq &seq)
  : ::TAO::unbounded_value_sequence<
        ::CORBA::Long
      > (seq)
{}

TAO_Trader_Test::LongSeq::~LongSeq (void)
{}

void TAO_Trader_Test::LongSeq::_tao_any_destructor (
    void * _tao_void_pointer)
{
  LongSeq * _tao_tmp_pointer =
    static_cast<LongSeq *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

#endif /* end #if !defined */

// TAO_IDL - Generated from
// be/be_visitor_typecode/alias_typecode.cpp:49



// TAO_IDL - Generated from
// be/be_visitor_typecode/typecode_defn.cpp:461


#ifndef _TAO_TYPECODE_TAO_Trader_Test_LongSeq_GUARD
#define _TAO_TYPECODE_TAO_Trader_Test_LongSeq_GUARD

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

namespace TAO
{
  namespace TypeCode
  {
    namespace
    {
      TAO::TypeCode::Sequence< ::CORBA::TypeCode_ptr const *,
                              TAO::Null_RefCount_Policy>
        TAO_Trader_Test_LongSeq_0 (
          ::CORBA::tk_sequence,
          &CORBA::_tc_long,
          0U);
        
      ::CORBA::TypeCode_ptr const tc_TAO_Trader_Test_LongSeq_0 =
        &TAO_Trader_Test_LongSeq_0;
    }
  }
}

TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_TYPECODE_TAO_Trader_Test_LongSeq_GUARD */

static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_TAO_Trader_Test_LongSeq (
    ::CORBA::tk_alias,
    "IDL:TAO_Trader_Test/LongSeq:1.0",
    "LongSeq",
    &TAO::TypeCode::tc_TAO_Trader_Test_LongSeq_0);
  

namespace TAO_Trader_Test
{
  ::CORBA::TypeCode_ptr const _tc_LongSeq =
    &_tao_tc_TAO_Trader_Test_LongSeq;
}

// TAO_IDL - Generated from
// be/be_visitor_sequence/sequence_cs.cpp:70

#if !defined (_TAO_TRADER_TEST_ULONGSEQ_CS_)
#define _TAO_TRADER_TEST_ULONGSEQ_CS_

TAO_Trader_Test::ULongSeq::ULongSeq (void)
{}

TAO_Trader_Test::ULongSeq::ULongSeq (
    ::CORBA::ULong max)
  : ::TAO::unbounded_value_sequence<
        ::CORBA::ULong
      > (max)
{}

TAO_Trader_Test::ULongSeq::ULongSeq (
    ::CORBA::ULong max,
    ::CORBA::ULong length,
    ::CORBA::ULong * buffer,
    ::CORBA::Boolean release
  )
  : ::TAO::unbounded_value_sequence<
        ::CORBA::ULong
      >
    (max, length, buffer, release)
{}

TAO_Trader_Test::ULongSeq::ULongSeq (
    const ULongSeq &seq)
  : ::TAO::unbounded_value_sequence<
        ::CORBA::ULong
      > (seq)
{}

TAO_Trader_Test::ULongSeq::~ULongSeq (void)
{}

void TAO_Trader_Test::ULongSeq::_tao_any_destructor (
    void * _tao_void_pointer)
{
  ULongSeq * _tao_tmp_pointer =
    static_cast<ULongSeq *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

#endif /* end #if !defined */

// TAO_IDL - Generated from
// be/be_visitor_typecode/alias_typecode.cpp:49



// TAO_IDL - Generated from
// be/be_visitor_typecode/typecode_defn.cpp:461


#ifndef _TAO_TYPECODE_TAO_Trader_Test_ULongSeq_GUARD
#define _TAO_TYPECODE_TAO_Trader_Test_ULongSeq_GUARD

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

namespace TAO
{
  namespace TypeCode
  {
    namespace
    {
      TAO::TypeCode::Sequence< ::CORBA::TypeCode_ptr const *,
                              TAO::Null_RefCount_Policy>
        TAO_Trader_Test_ULongSeq_0 (
          ::CORBA::tk_sequence,
          &CORBA::_tc_ulong,
          0U);
        
      ::CORBA::TypeCode_ptr const tc_TAO_Trader_Test_ULongSeq_0 =
        &TAO_Trader_Test_ULongSeq_0;
    }
  }
}

TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_TYPECODE_TAO_Trader_Test_ULongSeq_GUARD */

static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_TAO_Trader_Test_ULongSeq (
    ::CORBA::tk_alias,
    "IDL:TAO_Trader_Test/ULongSeq:1.0",
    "ULongSeq",
    &TAO::TypeCode::tc_TAO_Trader_Test_ULongSeq_0);
  

namespace TAO_Trader_Test
{
  ::CORBA::TypeCode_ptr const _tc_ULongSeq =
    &_tao_tc_TAO_Trader_Test_ULongSeq;
}

// TAO_IDL - Generated from
// be/be_visitor_sequence/sequence_cs.cpp:70

#if !defined (_TAO_TRADER_TEST_BOOLEANSEQ_CS_)
#define _TAO_TRADER_TEST_BOOLEANSEQ_CS_

TAO_Trader_Test::BooleanSeq::BooleanSeq (void)
{}

TAO_Trader_Test::BooleanSeq::BooleanSeq (
    ::CORBA::ULong max)
  : ::TAO::unbounded_value_sequence<
        ::CORBA::Boolean
      > (max)
{}

TAO_Trader_Test::BooleanSeq::BooleanSeq (
    ::CORBA::ULong max,
    ::CORBA::ULong length,
    ::CORBA::Boolean * buffer,
    ::CORBA::Boolean release
  )
  : ::TAO::unbounded_value_sequence<
        ::CORBA::Boolean
      >
    (max, length, buffer, release)
{}

TAO_Trader_Test::BooleanSeq::BooleanSeq (
    const BooleanSeq &seq)
  : ::TAO::unbounded_value_sequence<
        ::CORBA::Boolean
      > (seq)
{}

TAO_Trader_Test::BooleanSeq::~BooleanSeq (void)
{}

void TAO_Trader_Test::BooleanSeq::_tao_any_destructor (
    void * _tao_void_pointer)
{
  BooleanSeq * _tao_tmp_pointer =
    static_cast<BooleanSeq *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

#endif /* end #if !defined */

// TAO_IDL - Generated from
// be/be_visitor_typecode/alias_typecode.cpp:49



// TAO_IDL - Generated from
// be/be_visitor_typecode/typecode_defn.cpp:461


#ifndef _TAO_TYPECODE_TAO_Trader_Test_BooleanSeq_GUARD
#define _TAO_TYPECODE_TAO_Trader_Test_BooleanSeq_GUARD

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

namespace TAO
{
  namespace TypeCode
  {
    namespace
    {
      TAO::TypeCode::Sequence< ::CORBA::TypeCode_ptr const *,
                              TAO::Null_RefCount_Policy>
        TAO_Trader_Test_BooleanSeq_0 (
          ::CORBA::tk_sequence,
          &CORBA::_tc_boolean,
          0U);
        
      ::CORBA::TypeCode_ptr const tc_TAO_Trader_Test_BooleanSeq_0 =
        &TAO_Trader_Test_BooleanSeq_0;
    }
  }
}

TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_TYPECODE_TAO_Trader_Test_BooleanSeq_GUARD */

static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_TAO_Trader_Test_BooleanSeq (
    ::CORBA::tk_alias,
    "IDL:TAO_Trader_Test/BooleanSeq:1.0",
    "BooleanSeq",
    &TAO::TypeCode::tc_TAO_Trader_Test_BooleanSeq_0);
  

namespace TAO_Trader_Test
{
  ::CORBA::TypeCode_ptr const _tc_BooleanSeq =
    &_tao_tc_TAO_Trader_Test_BooleanSeq;
}

// TAO_IDL - Generated from
// be/be_visitor_sequence/sequence_cs.cpp:70

#if !defined (_TAO_TRADER_TEST_FLOATSEQ_CS_)
#define _TAO_TRADER_TEST_FLOATSEQ_CS_

TAO_Trader_Test::FloatSeq::FloatSeq (void)
{}

TAO_Trader_Test::FloatSeq::FloatSeq (
    ::CORBA::ULong max)
  : ::TAO::unbounded_value_sequence<
        ::CORBA::Float
      > (max)
{}

TAO_Trader_Test::FloatSeq::FloatSeq (
    ::CORBA::ULong max,
    ::CORBA::ULong length,
    ::CORBA::Float * buffer,
    ::CORBA::Boolean release
  )
  : ::TAO::unbounded_value_sequence<
        ::CORBA::Float
      >
    (max, length, buffer, release)
{}

TAO_Trader_Test::FloatSeq::FloatSeq (
    const FloatSeq &seq)
  : ::TAO::unbounded_value_sequence<
        ::CORBA::Float
      > (seq)
{}

TAO_Trader_Test::FloatSeq::~FloatSeq (void)
{}

void TAO_Trader_Test::FloatSeq::_tao_any_destructor (
    void * _tao_void_pointer)
{
  FloatSeq * _tao_tmp_pointer =
    static_cast<FloatSeq *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

#endif /* end #if !defined */

// TAO_IDL - Generated from
// be/be_visitor_typecode/alias_typecode.cpp:49



// TAO_IDL - Generated from
// be/be_visitor_typecode/typecode_defn.cpp:461


#ifndef _TAO_TYPECODE_TAO_Trader_Test_FloatSeq_GUARD
#define _TAO_TYPECODE_TAO_Trader_Test_FloatSeq_GUARD

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

namespace TAO
{
  namespace TypeCode
  {
    namespace
    {
      TAO::TypeCode::Sequence< ::CORBA::TypeCode_ptr const *,
                              TAO::Null_RefCount_Policy>
        TAO_Trader_Test_FloatSeq_0 (
          ::CORBA::tk_sequence,
          &CORBA::_tc_float,
          0U);
        
      ::CORBA::TypeCode_ptr const tc_TAO_Trader_Test_FloatSeq_0 =
        &TAO_Trader_Test_FloatSeq_0;
    }
  }
}

TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_TYPECODE_TAO_Trader_Test_FloatSeq_GUARD */

static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_TAO_Trader_Test_FloatSeq (
    ::CORBA::tk_alias,
    "IDL:TAO_Trader_Test/FloatSeq:1.0",
    "FloatSeq",
    &TAO::TypeCode::tc_TAO_Trader_Test_FloatSeq_0);
  

namespace TAO_Trader_Test
{
  ::CORBA::TypeCode_ptr const _tc_FloatSeq =
    &_tao_tc_TAO_Trader_Test_FloatSeq;
}

// TAO_IDL - Generated from
// be/be_visitor_sequence/sequence_cs.cpp:70

#if !defined (_TAO_TRADER_TEST_DOUBLESEQ_CS_)
#define _TAO_TRADER_TEST_DOUBLESEQ_CS_

TAO_Trader_Test::DoubleSeq::DoubleSeq (void)
{}

TAO_Trader_Test::DoubleSeq::DoubleSeq (
    ::CORBA::ULong max)
  : ::TAO::unbounded_value_sequence<
        ::CORBA::Double
      > (max)
{}

TAO_Trader_Test::DoubleSeq::DoubleSeq (
    ::CORBA::ULong max,
    ::CORBA::ULong length,
    ::CORBA::Double * buffer,
    ::CORBA::Boolean release
  )
  : ::TAO::unbounded_value_sequence<
        ::CORBA::Double
      >
    (max, length, buffer, release)
{}

TAO_Trader_Test::DoubleSeq::DoubleSeq (
    const DoubleSeq &seq)
  : ::TAO::unbounded_value_sequence<
        ::CORBA::Double
      > (seq)
{}

TAO_Trader_Test::DoubleSeq::~DoubleSeq (void)
{}

void TAO_Trader_Test::DoubleSeq::_tao_any_destructor (
    void * _tao_void_pointer)
{
  DoubleSeq * _tao_tmp_pointer =
    static_cast<DoubleSeq *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

#endif /* end #if !defined */

// TAO_IDL - Generated from
// be/be_visitor_typecode/alias_typecode.cpp:49



// TAO_IDL - Generated from
// be/be_visitor_typecode/typecode_defn.cpp:461


#ifndef _TAO_TYPECODE_TAO_Trader_Test_DoubleSeq_GUARD
#define _TAO_TYPECODE_TAO_Trader_Test_DoubleSeq_GUARD

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

namespace TAO
{
  namespace TypeCode
  {
    namespace
    {
      TAO::TypeCode::Sequence< ::CORBA::TypeCode_ptr const *,
                              TAO::Null_RefCount_Policy>
        TAO_Trader_Test_DoubleSeq_0 (
          ::CORBA::tk_sequence,
          &CORBA::_tc_double,
          0U);
        
      ::CORBA::TypeCode_ptr const tc_TAO_Trader_Test_DoubleSeq_0 =
        &TAO_Trader_Test_DoubleSeq_0;
    }
  }
}

TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_TYPECODE_TAO_Trader_Test_DoubleSeq_GUARD */

static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_TAO_Trader_Test_DoubleSeq (
    ::CORBA::tk_alias,
    "IDL:TAO_Trader_Test/DoubleSeq:1.0",
    "DoubleSeq",
    &TAO::TypeCode::tc_TAO_Trader_Test_DoubleSeq_0);
  

namespace TAO_Trader_Test
{
  ::CORBA::TypeCode_ptr const _tc_DoubleSeq =
    &_tao_tc_TAO_Trader_Test_DoubleSeq;
}

// TAO_IDL - Generated from
// be/be_visitor_sequence/sequence_cs.cpp:70

#if !defined (_TAO_TRADER_TEST_STRINGSEQ_CS_)
#define _TAO_TRADER_TEST_STRINGSEQ_CS_

TAO_Trader_Test::StringSeq::StringSeq (void)
{}

TAO_Trader_Test::StringSeq::StringSeq (
    ::CORBA::ULong max)
  : ::TAO::unbounded_basic_string_sequence<char> (max)
{}

TAO_Trader_Test::StringSeq::StringSeq (
    ::CORBA::ULong max,
    ::CORBA::ULong length,
    ::CORBA::Char * * buffer,
    ::CORBA::Boolean release
  )
  : ::TAO::unbounded_basic_string_sequence<char>
    (max, length, buffer, release)
{}

TAO_Trader_Test::StringSeq::StringSeq (
    const StringSeq &seq)
  : ::TAO::unbounded_basic_string_sequence<char> (seq)
{}

TAO_Trader_Test::StringSeq::~StringSeq (void)
{}

void TAO_Trader_Test::StringSeq::_tao_any_destructor (
    void * _tao_void_pointer)
{
  StringSeq * _tao_tmp_pointer =
    static_cast<StringSeq *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

#endif /* end #if !defined */

// TAO_IDL - Generated from
// be/be_visitor_typecode/alias_typecode.cpp:49



// TAO_IDL - Generated from
// be/be_visitor_typecode/typecode_defn.cpp:461


#ifndef _TAO_TYPECODE_TAO_Trader_Test_StringSeq_GUARD
#define _TAO_TYPECODE_TAO_Trader_Test_StringSeq_GUARD

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

namespace TAO
{
  namespace TypeCode
  {
    namespace
    {
      TAO::TypeCode::Sequence< ::CORBA::TypeCode_ptr const *,
                              TAO::Null_RefCount_Policy>
        TAO_Trader_Test_StringSeq_0 (
          ::CORBA::tk_sequence,
          &CORBA::_tc_string,
          0U);
        
      ::CORBA::TypeCode_ptr const tc_TAO_Trader_Test_StringSeq_0 =
        &TAO_Trader_Test_StringSeq_0;
    }
  }
}

TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_TYPECODE_TAO_Trader_Test_StringSeq_GUARD */

static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_TAO_Trader_Test_StringSeq (
    ::CORBA::tk_alias,
    "IDL:TAO_Trader_Test/StringSeq:1.0",
    "StringSeq",
    &TAO::TypeCode::tc_TAO_Trader_Test_StringSeq_0);
  

namespace TAO_Trader_Test
{
  ::CORBA::TypeCode_ptr const _tc_StringSeq =
    &_tao_tc_TAO_Trader_Test_StringSeq;
}

// TAO_IDL - Generated from
// be/be_visitor_interface/any_op_cs.cpp:38
TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<TAO_Trader_Test::Remote_Output>::to_object (
      ::CORBA::Object_ptr &_tao_elem) const
  {
    _tao_elem = ::CORBA::Object::_duplicate (this->value_);
    return true;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace TAO_Trader_Test
{
  

  /// Copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      Remote_Output_ptr _tao_elem)
  {
    Remote_Output_ptr _tao_objptr =
      Remote_Output::_duplicate (_tao_elem);
    _tao_any <<= &_tao_objptr;
  }

  /// Non-copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      Remote_Output_ptr *_tao_elem)
  {
    TAO::Any_Impl_T<Remote_Output>::insert (
        _tao_any,
        Remote_Output::_tao_any_destructor,
        _tc_Remote_Output,
        *_tao_elem);
  }

  ::CORBA::Boolean
  operator>>= (
      const ::CORBA::Any &_tao_any,
      Remote_Output_ptr &_tao_elem)
  {
    return
      TAO::Any_Impl_T<Remote_Output>::extract (
          _tao_any,
          Remote_Output::_tao_any_destructor,
          _tc_Remote_Output,
          _tao_elem);
  }
}

#else

TAO_BEGIN_VERSIONED_NAMESPACE_DECL



/// Copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    TAO_Trader_Test::Remote_Output_ptr _tao_elem)
{
  TAO_Trader_Test::Remote_Output_ptr _tao_objptr =
    TAO_Trader_Test::Remote_Output::_duplicate (_tao_elem);
  _tao_any <<= &_tao_objptr;
}

/// Non-copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    TAO_Trader_Test::Remote_Output_ptr *_tao_elem)
{
  TAO::Any_Impl_T<TAO_Trader_Test::Remote_Output>::insert (
      _tao_any,
      TAO_Trader_Test::Remote_Output::_tao_any_destructor,
      TAO_Trader_Test::_tc_Remote_Output,
      *_tao_elem);
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    TAO_Trader_Test::Remote_Output_ptr &_tao_elem)
{
  return
    TAO::Any_Impl_T<TAO_Trader_Test::Remote_Output>::extract (
        _tao_any,
        TAO_Trader_Test::Remote_Output::_tao_any_destructor,
        TAO_Trader_Test::_tc_Remote_Output,
        _tao_elem);
}

TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_interface/any_op_cs.cpp:38
TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<TAO_Trader_Test::Plotter>::to_object (
      ::CORBA::Object_ptr &_tao_elem) const
  {
    _tao_elem = ::CORBA::Object::_duplicate (this->value_);
    return true;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace TAO_Trader_Test
{
  

  /// Copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      Plotter_ptr _tao_elem)
  {
    Plotter_ptr _tao_objptr =
      Plotter::_duplicate (_tao_elem);
    _tao_any <<= &_tao_objptr;
  }

  /// Non-copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      Plotter_ptr *_tao_elem)
  {
    TAO::Any_Impl_T<Plotter>::insert (
        _tao_any,
        Plotter::_tao_any_destructor,
        _tc_Plotter,
        *_tao_elem);
  }

  ::CORBA::Boolean
  operator>>= (
      const ::CORBA::Any &_tao_any,
      Plotter_ptr &_tao_elem)
  {
    return
      TAO::Any_Impl_T<Plotter>::extract (
          _tao_any,
          Plotter::_tao_any_destructor,
          _tc_Plotter,
          _tao_elem);
  }
}

#else

TAO_BEGIN_VERSIONED_NAMESPACE_DECL



/// Copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    TAO_Trader_Test::Plotter_ptr _tao_elem)
{
  TAO_Trader_Test::Plotter_ptr _tao_objptr =
    TAO_Trader_Test::Plotter::_duplicate (_tao_elem);
  _tao_any <<= &_tao_objptr;
}

/// Non-copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    TAO_Trader_Test::Plotter_ptr *_tao_elem)
{
  TAO::Any_Impl_T<TAO_Trader_Test::Plotter>::insert (
      _tao_any,
      TAO_Trader_Test::Plotter::_tao_any_destructor,
      TAO_Trader_Test::_tc_Plotter,
      *_tao_elem);
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    TAO_Trader_Test::Plotter_ptr &_tao_elem)
{
  return
    TAO::Any_Impl_T<TAO_Trader_Test::Plotter>::extract (
        _tao_any,
        TAO_Trader_Test::Plotter::_tao_any_destructor,
        TAO_Trader_Test::_tc_Plotter,
        _tao_elem);
}

TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_interface/any_op_cs.cpp:38
TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<TAO_Trader_Test::Printer>::to_object (
      ::CORBA::Object_ptr &_tao_elem) const
  {
    _tao_elem = ::CORBA::Object::_duplicate (this->value_);
    return true;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace TAO_Trader_Test
{
  

  /// Copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      Printer_ptr _tao_elem)
  {
    Printer_ptr _tao_objptr =
      Printer::_duplicate (_tao_elem);
    _tao_any <<= &_tao_objptr;
  }

  /// Non-copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      Printer_ptr *_tao_elem)
  {
    TAO::Any_Impl_T<Printer>::insert (
        _tao_any,
        Printer::_tao_any_destructor,
        _tc_Printer,
        *_tao_elem);
  }

  ::CORBA::Boolean
  operator>>= (
      const ::CORBA::Any &_tao_any,
      Printer_ptr &_tao_elem)
  {
    return
      TAO::Any_Impl_T<Printer>::extract (
          _tao_any,
          Printer::_tao_any_destructor,
          _tc_Printer,
          _tao_elem);
  }
}

#else

TAO_BEGIN_VERSIONED_NAMESPACE_DECL



/// Copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    TAO_Trader_Test::Printer_ptr _tao_elem)
{
  TAO_Trader_Test::Printer_ptr _tao_objptr =
    TAO_Trader_Test::Printer::_duplicate (_tao_elem);
  _tao_any <<= &_tao_objptr;
}

/// Non-copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    TAO_Trader_Test::Printer_ptr *_tao_elem)
{
  TAO::Any_Impl_T<TAO_Trader_Test::Printer>::insert (
      _tao_any,
      TAO_Trader_Test::Printer::_tao_any_destructor,
      TAO_Trader_Test::_tc_Printer,
      *_tao_elem);
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    TAO_Trader_Test::Printer_ptr &_tao_elem)
{
  return
    TAO::Any_Impl_T<TAO_Trader_Test::Printer>::extract (
        _tao_any,
        TAO_Trader_Test::Printer::_tao_any_destructor,
        TAO_Trader_Test::_tc_Printer,
        _tao_elem);
}

TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_interface/any_op_cs.cpp:38
TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<TAO_Trader_Test::File_System>::to_object (
      ::CORBA::Object_ptr &_tao_elem) const
  {
    _tao_elem = ::CORBA::Object::_duplicate (this->value_);
    return true;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace TAO_Trader_Test
{
  

  /// Copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      File_System_ptr _tao_elem)
  {
    File_System_ptr _tao_objptr =
      File_System::_duplicate (_tao_elem);
    _tao_any <<= &_tao_objptr;
  }

  /// Non-copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      File_System_ptr *_tao_elem)
  {
    TAO::Any_Impl_T<File_System>::insert (
        _tao_any,
        File_System::_tao_any_destructor,
        _tc_File_System,
        *_tao_elem);
  }

  ::CORBA::Boolean
  operator>>= (
      const ::CORBA::Any &_tao_any,
      File_System_ptr &_tao_elem)
  {
    return
      TAO::Any_Impl_T<File_System>::extract (
          _tao_any,
          File_System::_tao_any_destructor,
          _tc_File_System,
          _tao_elem);
  }
}

#else

TAO_BEGIN_VERSIONED_NAMESPACE_DECL



/// Copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    TAO_Trader_Test::File_System_ptr _tao_elem)
{
  TAO_Trader_Test::File_System_ptr _tao_objptr =
    TAO_Trader_Test::File_System::_duplicate (_tao_elem);
  _tao_any <<= &_tao_objptr;
}

/// Non-copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    TAO_Trader_Test::File_System_ptr *_tao_elem)
{
  TAO::Any_Impl_T<TAO_Trader_Test::File_System>::insert (
      _tao_any,
      TAO_Trader_Test::File_System::_tao_any_destructor,
      TAO_Trader_Test::_tc_File_System,
      *_tao_elem);
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    TAO_Trader_Test::File_System_ptr &_tao_elem)
{
  return
    TAO::Any_Impl_T<TAO_Trader_Test::File_System>::extract (
        _tao_any,
        TAO_Trader_Test::File_System::_tao_any_destructor,
        TAO_Trader_Test::_tc_File_System,
        _tao_elem);
}

TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_interface/any_op_cs.cpp:38
TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<TAO_Trader_Test::PostScript_Printer>::to_object (
      ::CORBA::Object_ptr &_tao_elem) const
  {
    _tao_elem = ::CORBA::Object::_duplicate (this->value_);
    return true;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace TAO_Trader_Test
{
  

  /// Copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      PostScript_Printer_ptr _tao_elem)
  {
    PostScript_Printer_ptr _tao_objptr =
      PostScript_Printer::_duplicate (_tao_elem);
    _tao_any <<= &_tao_objptr;
  }

  /// Non-copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      PostScript_Printer_ptr *_tao_elem)
  {
    TAO::Any_Impl_T<PostScript_Printer>::insert (
        _tao_any,
        PostScript_Printer::_tao_any_destructor,
        _tc_PostScript_Printer,
        *_tao_elem);
  }

  ::CORBA::Boolean
  operator>>= (
      const ::CORBA::Any &_tao_any,
      PostScript_Printer_ptr &_tao_elem)
  {
    return
      TAO::Any_Impl_T<PostScript_Printer>::extract (
          _tao_any,
          PostScript_Printer::_tao_any_destructor,
          _tc_PostScript_Printer,
          _tao_elem);
  }
}

#else

TAO_BEGIN_VERSIONED_NAMESPACE_DECL



/// Copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    TAO_Trader_Test::PostScript_Printer_ptr _tao_elem)
{
  TAO_Trader_Test::PostScript_Printer_ptr _tao_objptr =
    TAO_Trader_Test::PostScript_Printer::_duplicate (_tao_elem);
  _tao_any <<= &_tao_objptr;
}

/// Non-copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    TAO_Trader_Test::PostScript_Printer_ptr *_tao_elem)
{
  TAO::Any_Impl_T<TAO_Trader_Test::PostScript_Printer>::insert (
      _tao_any,
      TAO_Trader_Test::PostScript_Printer::_tao_any_destructor,
      TAO_Trader_Test::_tc_PostScript_Printer,
      *_tao_elem);
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    TAO_Trader_Test::PostScript_Printer_ptr &_tao_elem)
{
  return
    TAO::Any_Impl_T<TAO_Trader_Test::PostScript_Printer>::extract (
        _tao_any,
        TAO_Trader_Test::PostScript_Printer::_tao_any_destructor,
        TAO_Trader_Test::_tc_PostScript_Printer,
        _tao_elem);
}

TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_sequence/any_op_cs.cpp:45


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


TAO_END_VERSIONED_NAMESPACE_DECL



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace TAO_Trader_Test
{
  
  // Copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      const ::TAO_Trader_Test::ShortSeq &_tao_elem
    )
  {
    TAO::Any_Dual_Impl_T< ::TAO_Trader_Test::ShortSeq>::insert_copy (
        _tao_any,
        ::TAO_Trader_Test::ShortSeq::_tao_any_destructor,
        ::TAO_Trader_Test::_tc_ShortSeq,
        _tao_elem
      );
}

// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    ::TAO_Trader_Test::ShortSeq *_tao_elem)
{
  TAO::Any_Dual_Impl_T< ::TAO_Trader_Test::ShortSeq>::insert (
      _tao_any,
      ::TAO_Trader_Test::ShortSeq::_tao_any_destructor,
      ::TAO_Trader_Test::_tc_ShortSeq,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    ::TAO_Trader_Test::ShortSeq *&_tao_elem)
{
  return _tao_any >>= const_cast<
      const ::TAO_Trader_Test::ShortSeq *&> (
      _tao_elem
    );
}

// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const ::TAO_Trader_Test::ShortSeq *&_tao_elem)
{
  return
    TAO::Any_Dual_Impl_T< ::TAO_Trader_Test::ShortSeq>::extract (
        _tao_any,
        ::TAO_Trader_Test::ShortSeq::_tao_any_destructor,
        ::TAO_Trader_Test::_tc_ShortSeq,
        _tao_elem
      );
}
}

#else


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


// Copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    const TAO_Trader_Test::ShortSeq &_tao_elem)
{
  TAO::Any_Dual_Impl_T<TAO_Trader_Test::ShortSeq>::insert_copy (
      _tao_any,
      TAO_Trader_Test::ShortSeq::_tao_any_destructor,
      TAO_Trader_Test::_tc_ShortSeq,
      _tao_elem
    );
}

// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    TAO_Trader_Test::ShortSeq *_tao_elem)
{
  TAO::Any_Dual_Impl_T<TAO_Trader_Test::ShortSeq>::insert (
      _tao_any,
      TAO_Trader_Test::ShortSeq::_tao_any_destructor,
      TAO_Trader_Test::_tc_ShortSeq,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    TAO_Trader_Test::ShortSeq *&_tao_elem)
{
  return _tao_any >>= const_cast<
      const TAO_Trader_Test::ShortSeq *&> (
      _tao_elem
    );
}

// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const TAO_Trader_Test::ShortSeq *&_tao_elem)
{
  return
    TAO::Any_Dual_Impl_T<TAO_Trader_Test::ShortSeq>::extract (
        _tao_any,
        TAO_Trader_Test::ShortSeq::_tao_any_destructor,
        TAO_Trader_Test::_tc_ShortSeq,
        _tao_elem);
}
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_sequence/any_op_cs.cpp:45


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


TAO_END_VERSIONED_NAMESPACE_DECL



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace TAO_Trader_Test
{
  
  // Copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      const ::TAO_Trader_Test::UShortSeq &_tao_elem
    )
  {
    TAO::Any_Dual_Impl_T< ::TAO_Trader_Test::UShortSeq>::insert_copy (
        _tao_any,
        ::TAO_Trader_Test::UShortSeq::_tao_any_destructor,
        ::TAO_Trader_Test::_tc_UShortSeq,
        _tao_elem
      );
}

// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    ::TAO_Trader_Test::UShortSeq *_tao_elem)
{
  TAO::Any_Dual_Impl_T< ::TAO_Trader_Test::UShortSeq>::insert (
      _tao_any,
      ::TAO_Trader_Test::UShortSeq::_tao_any_destructor,
      ::TAO_Trader_Test::_tc_UShortSeq,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    ::TAO_Trader_Test::UShortSeq *&_tao_elem)
{
  return _tao_any >>= const_cast<
      const ::TAO_Trader_Test::UShortSeq *&> (
      _tao_elem
    );
}

// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const ::TAO_Trader_Test::UShortSeq *&_tao_elem)
{
  return
    TAO::Any_Dual_Impl_T< ::TAO_Trader_Test::UShortSeq>::extract (
        _tao_any,
        ::TAO_Trader_Test::UShortSeq::_tao_any_destructor,
        ::TAO_Trader_Test::_tc_UShortSeq,
        _tao_elem
      );
}
}

#else


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


// Copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    const TAO_Trader_Test::UShortSeq &_tao_elem)
{
  TAO::Any_Dual_Impl_T<TAO_Trader_Test::UShortSeq>::insert_copy (
      _tao_any,
      TAO_Trader_Test::UShortSeq::_tao_any_destructor,
      TAO_Trader_Test::_tc_UShortSeq,
      _tao_elem
    );
}

// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    TAO_Trader_Test::UShortSeq *_tao_elem)
{
  TAO::Any_Dual_Impl_T<TAO_Trader_Test::UShortSeq>::insert (
      _tao_any,
      TAO_Trader_Test::UShortSeq::_tao_any_destructor,
      TAO_Trader_Test::_tc_UShortSeq,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    TAO_Trader_Test::UShortSeq *&_tao_elem)
{
  return _tao_any >>= const_cast<
      const TAO_Trader_Test::UShortSeq *&> (
      _tao_elem
    );
}

// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const TAO_Trader_Test::UShortSeq *&_tao_elem)
{
  return
    TAO::Any_Dual_Impl_T<TAO_Trader_Test::UShortSeq>::extract (
        _tao_any,
        TAO_Trader_Test::UShortSeq::_tao_any_destructor,
        TAO_Trader_Test::_tc_UShortSeq,
        _tao_elem);
}
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_sequence/any_op_cs.cpp:45


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


TAO_END_VERSIONED_NAMESPACE_DECL



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace TAO_Trader_Test
{
  
  // Copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      const ::TAO_Trader_Test::LongSeq &_tao_elem
    )
  {
    TAO::Any_Dual_Impl_T< ::TAO_Trader_Test::LongSeq>::insert_copy (
        _tao_any,
        ::TAO_Trader_Test::LongSeq::_tao_any_destructor,
        ::TAO_Trader_Test::_tc_LongSeq,
        _tao_elem
      );
}

// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    ::TAO_Trader_Test::LongSeq *_tao_elem)
{
  TAO::Any_Dual_Impl_T< ::TAO_Trader_Test::LongSeq>::insert (
      _tao_any,
      ::TAO_Trader_Test::LongSeq::_tao_any_destructor,
      ::TAO_Trader_Test::_tc_LongSeq,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    ::TAO_Trader_Test::LongSeq *&_tao_elem)
{
  return _tao_any >>= const_cast<
      const ::TAO_Trader_Test::LongSeq *&> (
      _tao_elem
    );
}

// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const ::TAO_Trader_Test::LongSeq *&_tao_elem)
{
  return
    TAO::Any_Dual_Impl_T< ::TAO_Trader_Test::LongSeq>::extract (
        _tao_any,
        ::TAO_Trader_Test::LongSeq::_tao_any_destructor,
        ::TAO_Trader_Test::_tc_LongSeq,
        _tao_elem
      );
}
}

#else


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


// Copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    const TAO_Trader_Test::LongSeq &_tao_elem)
{
  TAO::Any_Dual_Impl_T<TAO_Trader_Test::LongSeq>::insert_copy (
      _tao_any,
      TAO_Trader_Test::LongSeq::_tao_any_destructor,
      TAO_Trader_Test::_tc_LongSeq,
      _tao_elem
    );
}

// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    TAO_Trader_Test::LongSeq *_tao_elem)
{
  TAO::Any_Dual_Impl_T<TAO_Trader_Test::LongSeq>::insert (
      _tao_any,
      TAO_Trader_Test::LongSeq::_tao_any_destructor,
      TAO_Trader_Test::_tc_LongSeq,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    TAO_Trader_Test::LongSeq *&_tao_elem)
{
  return _tao_any >>= const_cast<
      const TAO_Trader_Test::LongSeq *&> (
      _tao_elem
    );
}

// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const TAO_Trader_Test::LongSeq *&_tao_elem)
{
  return
    TAO::Any_Dual_Impl_T<TAO_Trader_Test::LongSeq>::extract (
        _tao_any,
        TAO_Trader_Test::LongSeq::_tao_any_destructor,
        TAO_Trader_Test::_tc_LongSeq,
        _tao_elem);
}
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_sequence/any_op_cs.cpp:45


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


TAO_END_VERSIONED_NAMESPACE_DECL



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace TAO_Trader_Test
{
  
  // Copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      const ::TAO_Trader_Test::ULongSeq &_tao_elem
    )
  {
    TAO::Any_Dual_Impl_T< ::TAO_Trader_Test::ULongSeq>::insert_copy (
        _tao_any,
        ::TAO_Trader_Test::ULongSeq::_tao_any_destructor,
        ::TAO_Trader_Test::_tc_ULongSeq,
        _tao_elem
      );
}

// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    ::TAO_Trader_Test::ULongSeq *_tao_elem)
{
  TAO::Any_Dual_Impl_T< ::TAO_Trader_Test::ULongSeq>::insert (
      _tao_any,
      ::TAO_Trader_Test::ULongSeq::_tao_any_destructor,
      ::TAO_Trader_Test::_tc_ULongSeq,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    ::TAO_Trader_Test::ULongSeq *&_tao_elem)
{
  return _tao_any >>= const_cast<
      const ::TAO_Trader_Test::ULongSeq *&> (
      _tao_elem
    );
}

// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const ::TAO_Trader_Test::ULongSeq *&_tao_elem)
{
  return
    TAO::Any_Dual_Impl_T< ::TAO_Trader_Test::ULongSeq>::extract (
        _tao_any,
        ::TAO_Trader_Test::ULongSeq::_tao_any_destructor,
        ::TAO_Trader_Test::_tc_ULongSeq,
        _tao_elem
      );
}
}

#else


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


// Copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    const TAO_Trader_Test::ULongSeq &_tao_elem)
{
  TAO::Any_Dual_Impl_T<TAO_Trader_Test::ULongSeq>::insert_copy (
      _tao_any,
      TAO_Trader_Test::ULongSeq::_tao_any_destructor,
      TAO_Trader_Test::_tc_ULongSeq,
      _tao_elem
    );
}

// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    TAO_Trader_Test::ULongSeq *_tao_elem)
{
  TAO::Any_Dual_Impl_T<TAO_Trader_Test::ULongSeq>::insert (
      _tao_any,
      TAO_Trader_Test::ULongSeq::_tao_any_destructor,
      TAO_Trader_Test::_tc_ULongSeq,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    TAO_Trader_Test::ULongSeq *&_tao_elem)
{
  return _tao_any >>= const_cast<
      const TAO_Trader_Test::ULongSeq *&> (
      _tao_elem
    );
}

// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const TAO_Trader_Test::ULongSeq *&_tao_elem)
{
  return
    TAO::Any_Dual_Impl_T<TAO_Trader_Test::ULongSeq>::extract (
        _tao_any,
        TAO_Trader_Test::ULongSeq::_tao_any_destructor,
        TAO_Trader_Test::_tc_ULongSeq,
        _tao_elem);
}
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_sequence/any_op_cs.cpp:45


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


TAO_END_VERSIONED_NAMESPACE_DECL



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace TAO_Trader_Test
{
  
  // Copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      const ::TAO_Trader_Test::BooleanSeq &_tao_elem
    )
  {
    TAO::Any_Dual_Impl_T< ::TAO_Trader_Test::BooleanSeq>::insert_copy (
        _tao_any,
        ::TAO_Trader_Test::BooleanSeq::_tao_any_destructor,
        ::TAO_Trader_Test::_tc_BooleanSeq,
        _tao_elem
      );
}

// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    ::TAO_Trader_Test::BooleanSeq *_tao_elem)
{
  TAO::Any_Dual_Impl_T< ::TAO_Trader_Test::BooleanSeq>::insert (
      _tao_any,
      ::TAO_Trader_Test::BooleanSeq::_tao_any_destructor,
      ::TAO_Trader_Test::_tc_BooleanSeq,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    ::TAO_Trader_Test::BooleanSeq *&_tao_elem)
{
  return _tao_any >>= const_cast<
      const ::TAO_Trader_Test::BooleanSeq *&> (
      _tao_elem
    );
}

// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const ::TAO_Trader_Test::BooleanSeq *&_tao_elem)
{
  return
    TAO::Any_Dual_Impl_T< ::TAO_Trader_Test::BooleanSeq>::extract (
        _tao_any,
        ::TAO_Trader_Test::BooleanSeq::_tao_any_destructor,
        ::TAO_Trader_Test::_tc_BooleanSeq,
        _tao_elem
      );
}
}

#else


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


// Copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    const TAO_Trader_Test::BooleanSeq &_tao_elem)
{
  TAO::Any_Dual_Impl_T<TAO_Trader_Test::BooleanSeq>::insert_copy (
      _tao_any,
      TAO_Trader_Test::BooleanSeq::_tao_any_destructor,
      TAO_Trader_Test::_tc_BooleanSeq,
      _tao_elem
    );
}

// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    TAO_Trader_Test::BooleanSeq *_tao_elem)
{
  TAO::Any_Dual_Impl_T<TAO_Trader_Test::BooleanSeq>::insert (
      _tao_any,
      TAO_Trader_Test::BooleanSeq::_tao_any_destructor,
      TAO_Trader_Test::_tc_BooleanSeq,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    TAO_Trader_Test::BooleanSeq *&_tao_elem)
{
  return _tao_any >>= const_cast<
      const TAO_Trader_Test::BooleanSeq *&> (
      _tao_elem
    );
}

// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const TAO_Trader_Test::BooleanSeq *&_tao_elem)
{
  return
    TAO::Any_Dual_Impl_T<TAO_Trader_Test::BooleanSeq>::extract (
        _tao_any,
        TAO_Trader_Test::BooleanSeq::_tao_any_destructor,
        TAO_Trader_Test::_tc_BooleanSeq,
        _tao_elem);
}
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_sequence/any_op_cs.cpp:45


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


TAO_END_VERSIONED_NAMESPACE_DECL



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace TAO_Trader_Test
{
  
  // Copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      const ::TAO_Trader_Test::FloatSeq &_tao_elem
    )
  {
    TAO::Any_Dual_Impl_T< ::TAO_Trader_Test::FloatSeq>::insert_copy (
        _tao_any,
        ::TAO_Trader_Test::FloatSeq::_tao_any_destructor,
        ::TAO_Trader_Test::_tc_FloatSeq,
        _tao_elem
      );
}

// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    ::TAO_Trader_Test::FloatSeq *_tao_elem)
{
  TAO::Any_Dual_Impl_T< ::TAO_Trader_Test::FloatSeq>::insert (
      _tao_any,
      ::TAO_Trader_Test::FloatSeq::_tao_any_destructor,
      ::TAO_Trader_Test::_tc_FloatSeq,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    ::TAO_Trader_Test::FloatSeq *&_tao_elem)
{
  return _tao_any >>= const_cast<
      const ::TAO_Trader_Test::FloatSeq *&> (
      _tao_elem
    );
}

// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const ::TAO_Trader_Test::FloatSeq *&_tao_elem)
{
  return
    TAO::Any_Dual_Impl_T< ::TAO_Trader_Test::FloatSeq>::extract (
        _tao_any,
        ::TAO_Trader_Test::FloatSeq::_tao_any_destructor,
        ::TAO_Trader_Test::_tc_FloatSeq,
        _tao_elem
      );
}
}

#else


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


// Copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    const TAO_Trader_Test::FloatSeq &_tao_elem)
{
  TAO::Any_Dual_Impl_T<TAO_Trader_Test::FloatSeq>::insert_copy (
      _tao_any,
      TAO_Trader_Test::FloatSeq::_tao_any_destructor,
      TAO_Trader_Test::_tc_FloatSeq,
      _tao_elem
    );
}

// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    TAO_Trader_Test::FloatSeq *_tao_elem)
{
  TAO::Any_Dual_Impl_T<TAO_Trader_Test::FloatSeq>::insert (
      _tao_any,
      TAO_Trader_Test::FloatSeq::_tao_any_destructor,
      TAO_Trader_Test::_tc_FloatSeq,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    TAO_Trader_Test::FloatSeq *&_tao_elem)
{
  return _tao_any >>= const_cast<
      const TAO_Trader_Test::FloatSeq *&> (
      _tao_elem
    );
}

// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const TAO_Trader_Test::FloatSeq *&_tao_elem)
{
  return
    TAO::Any_Dual_Impl_T<TAO_Trader_Test::FloatSeq>::extract (
        _tao_any,
        TAO_Trader_Test::FloatSeq::_tao_any_destructor,
        TAO_Trader_Test::_tc_FloatSeq,
        _tao_elem);
}
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_sequence/any_op_cs.cpp:45


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


TAO_END_VERSIONED_NAMESPACE_DECL



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace TAO_Trader_Test
{
  
  // Copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      const ::TAO_Trader_Test::DoubleSeq &_tao_elem
    )
  {
    TAO::Any_Dual_Impl_T< ::TAO_Trader_Test::DoubleSeq>::insert_copy (
        _tao_any,
        ::TAO_Trader_Test::DoubleSeq::_tao_any_destructor,
        ::TAO_Trader_Test::_tc_DoubleSeq,
        _tao_elem
      );
}

// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    ::TAO_Trader_Test::DoubleSeq *_tao_elem)
{
  TAO::Any_Dual_Impl_T< ::TAO_Trader_Test::DoubleSeq>::insert (
      _tao_any,
      ::TAO_Trader_Test::DoubleSeq::_tao_any_destructor,
      ::TAO_Trader_Test::_tc_DoubleSeq,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    ::TAO_Trader_Test::DoubleSeq *&_tao_elem)
{
  return _tao_any >>= const_cast<
      const ::TAO_Trader_Test::DoubleSeq *&> (
      _tao_elem
    );
}

// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const ::TAO_Trader_Test::DoubleSeq *&_tao_elem)
{
  return
    TAO::Any_Dual_Impl_T< ::TAO_Trader_Test::DoubleSeq>::extract (
        _tao_any,
        ::TAO_Trader_Test::DoubleSeq::_tao_any_destructor,
        ::TAO_Trader_Test::_tc_DoubleSeq,
        _tao_elem
      );
}
}

#else


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


// Copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    const TAO_Trader_Test::DoubleSeq &_tao_elem)
{
  TAO::Any_Dual_Impl_T<TAO_Trader_Test::DoubleSeq>::insert_copy (
      _tao_any,
      TAO_Trader_Test::DoubleSeq::_tao_any_destructor,
      TAO_Trader_Test::_tc_DoubleSeq,
      _tao_elem
    );
}

// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    TAO_Trader_Test::DoubleSeq *_tao_elem)
{
  TAO::Any_Dual_Impl_T<TAO_Trader_Test::DoubleSeq>::insert (
      _tao_any,
      TAO_Trader_Test::DoubleSeq::_tao_any_destructor,
      TAO_Trader_Test::_tc_DoubleSeq,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    TAO_Trader_Test::DoubleSeq *&_tao_elem)
{
  return _tao_any >>= const_cast<
      const TAO_Trader_Test::DoubleSeq *&> (
      _tao_elem
    );
}

// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const TAO_Trader_Test::DoubleSeq *&_tao_elem)
{
  return
    TAO::Any_Dual_Impl_T<TAO_Trader_Test::DoubleSeq>::extract (
        _tao_any,
        TAO_Trader_Test::DoubleSeq::_tao_any_destructor,
        TAO_Trader_Test::_tc_DoubleSeq,
        _tao_elem);
}
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_sequence/any_op_cs.cpp:45


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


TAO_END_VERSIONED_NAMESPACE_DECL



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace TAO_Trader_Test
{
  
  // Copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      const ::TAO_Trader_Test::StringSeq &_tao_elem
    )
  {
    TAO::Any_Dual_Impl_T< ::TAO_Trader_Test::StringSeq>::insert_copy (
        _tao_any,
        ::TAO_Trader_Test::StringSeq::_tao_any_destructor,
        ::TAO_Trader_Test::_tc_StringSeq,
        _tao_elem
      );
}

// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    ::TAO_Trader_Test::StringSeq *_tao_elem)
{
  TAO::Any_Dual_Impl_T< ::TAO_Trader_Test::StringSeq>::insert (
      _tao_any,
      ::TAO_Trader_Test::StringSeq::_tao_any_destructor,
      ::TAO_Trader_Test::_tc_StringSeq,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    ::TAO_Trader_Test::StringSeq *&_tao_elem)
{
  return _tao_any >>= const_cast<
      const ::TAO_Trader_Test::StringSeq *&> (
      _tao_elem
    );
}

// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const ::TAO_Trader_Test::StringSeq *&_tao_elem)
{
  return
    TAO::Any_Dual_Impl_T< ::TAO_Trader_Test::StringSeq>::extract (
        _tao_any,
        ::TAO_Trader_Test::StringSeq::_tao_any_destructor,
        ::TAO_Trader_Test::_tc_StringSeq,
        _tao_elem
      );
}
}

#else


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


// Copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    const TAO_Trader_Test::StringSeq &_tao_elem)
{
  TAO::Any_Dual_Impl_T<TAO_Trader_Test::StringSeq>::insert_copy (
      _tao_any,
      TAO_Trader_Test::StringSeq::_tao_any_destructor,
      TAO_Trader_Test::_tc_StringSeq,
      _tao_elem
    );
}

// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    TAO_Trader_Test::StringSeq *_tao_elem)
{
  TAO::Any_Dual_Impl_T<TAO_Trader_Test::StringSeq>::insert (
      _tao_any,
      TAO_Trader_Test::StringSeq::_tao_any_destructor,
      TAO_Trader_Test::_tc_StringSeq,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    TAO_Trader_Test::StringSeq *&_tao_elem)
{
  return _tao_any >>= const_cast<
      const TAO_Trader_Test::StringSeq *&> (
      _tao_elem
    );
}

// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const TAO_Trader_Test::StringSeq *&_tao_elem)
{
  return
    TAO::Any_Dual_Impl_T<TAO_Trader_Test::StringSeq>::extract (
        _tao_any,
        TAO_Trader_Test::StringSeq::_tao_any_destructor,
        TAO_Trader_Test::_tc_StringSeq,
        _tao_elem);
}
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_interface/cdr_op_cs.cpp:51

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const TAO_Trader_Test::Remote_Output_ptr _tao_objref)
{
  ::CORBA::Object_ptr _tao_corba_obj = _tao_objref;
  return (strm << _tao_corba_obj);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    TAO_Trader_Test::Remote_Output_ptr &_tao_objref)
{
  ::CORBA::Object_var obj;

  if (!(strm >> obj.inout ()))
    {
      return false;
    }
  
  typedef ::TAO_Trader_Test::Remote_Output RHS_SCOPED_NAME;

  // Narrow to the right type.
  _tao_objref =
    TAO::Narrow_Utils<RHS_SCOPED_NAME>::unchecked_narrow (obj.in ());
    
  return true;
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_interface/cdr_op_cs.cpp:51

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const TAO_Trader_Test::Plotter_ptr _tao_objref)
{
  ::CORBA::Object_ptr _tao_corba_obj = _tao_objref;
  return (strm << _tao_corba_obj);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    TAO_Trader_Test::Plotter_ptr &_tao_objref)
{
  ::CORBA::Object_var obj;

  if (!(strm >> obj.inout ()))
    {
      return false;
    }
  
  typedef ::TAO_Trader_Test::Plotter RHS_SCOPED_NAME;

  // Narrow to the right type.
  _tao_objref =
    TAO::Narrow_Utils<RHS_SCOPED_NAME>::unchecked_narrow (obj.in ());
    
  return true;
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_interface/cdr_op_cs.cpp:51

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const TAO_Trader_Test::Printer_ptr _tao_objref)
{
  ::CORBA::Object_ptr _tao_corba_obj = _tao_objref;
  return (strm << _tao_corba_obj);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    TAO_Trader_Test::Printer_ptr &_tao_objref)
{
  ::CORBA::Object_var obj;

  if (!(strm >> obj.inout ()))
    {
      return false;
    }
  
  typedef ::TAO_Trader_Test::Printer RHS_SCOPED_NAME;

  // Narrow to the right type.
  _tao_objref =
    TAO::Narrow_Utils<RHS_SCOPED_NAME>::unchecked_narrow (obj.in ());
    
  return true;
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_interface/cdr_op_cs.cpp:51

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const TAO_Trader_Test::File_System_ptr _tao_objref)
{
  ::CORBA::Object_ptr _tao_corba_obj = _tao_objref;
  return (strm << _tao_corba_obj);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    TAO_Trader_Test::File_System_ptr &_tao_objref)
{
  ::CORBA::Object_var obj;

  if (!(strm >> obj.inout ()))
    {
      return false;
    }
  
  typedef ::TAO_Trader_Test::File_System RHS_SCOPED_NAME;

  // Narrow to the right type.
  _tao_objref =
    TAO::Narrow_Utils<RHS_SCOPED_NAME>::unchecked_narrow (obj.in ());
    
  return true;
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_interface/cdr_op_cs.cpp:51

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const TAO_Trader_Test::PostScript_Printer_ptr _tao_objref)
{
  ::CORBA::Object_ptr _tao_corba_obj = _tao_objref;
  return (strm << _tao_corba_obj);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    TAO_Trader_Test::PostScript_Printer_ptr &_tao_objref)
{
  ::CORBA::Object_var obj;

  if (!(strm >> obj.inout ()))
    {
      return false;
    }
  
  typedef ::TAO_Trader_Test::PostScript_Printer RHS_SCOPED_NAME;

  // Narrow to the right type.
  _tao_objref =
    TAO::Narrow_Utils<RHS_SCOPED_NAME>::unchecked_narrow (obj.in ());
    
  return true;
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_sequence/cdr_op_cs.cpp:93
#if !defined _TAO_CDR_OP_TAO_Trader_Test_ShortSeq_CPP_
#define _TAO_CDR_OP_TAO_Trader_Test_ShortSeq_CPP_

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const TAO_Trader_Test::ShortSeq &_tao_sequence)
{
  return TAO::marshal_sequence(strm, _tao_sequence);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    TAO_Trader_Test::ShortSeq &_tao_sequence)
{
  return TAO::demarshal_sequence(strm, _tao_sequence);
}


TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_CDR_OP_TAO_Trader_Test_ShortSeq_CPP_ */

// TAO_IDL - Generated from
// be/be_visitor_sequence/cdr_op_cs.cpp:93
#if !defined _TAO_CDR_OP_TAO_Trader_Test_UShortSeq_CPP_
#define _TAO_CDR_OP_TAO_Trader_Test_UShortSeq_CPP_

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const TAO_Trader_Test::UShortSeq &_tao_sequence)
{
  return TAO::marshal_sequence(strm, _tao_sequence);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    TAO_Trader_Test::UShortSeq &_tao_sequence)
{
  return TAO::demarshal_sequence(strm, _tao_sequence);
}


TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_CDR_OP_TAO_Trader_Test_UShortSeq_CPP_ */

// TAO_IDL - Generated from
// be/be_visitor_sequence/cdr_op_cs.cpp:93
#if !defined _TAO_CDR_OP_TAO_Trader_Test_LongSeq_CPP_
#define _TAO_CDR_OP_TAO_Trader_Test_LongSeq_CPP_

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const TAO_Trader_Test::LongSeq &_tao_sequence)
{
  return TAO::marshal_sequence(strm, _tao_sequence);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    TAO_Trader_Test::LongSeq &_tao_sequence)
{
  return TAO::demarshal_sequence(strm, _tao_sequence);
}


TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_CDR_OP_TAO_Trader_Test_LongSeq_CPP_ */

// TAO_IDL - Generated from
// be/be_visitor_sequence/cdr_op_cs.cpp:93
#if !defined _TAO_CDR_OP_TAO_Trader_Test_ULongSeq_CPP_
#define _TAO_CDR_OP_TAO_Trader_Test_ULongSeq_CPP_

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const TAO_Trader_Test::ULongSeq &_tao_sequence)
{
  return TAO::marshal_sequence(strm, _tao_sequence);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    TAO_Trader_Test::ULongSeq &_tao_sequence)
{
  return TAO::demarshal_sequence(strm, _tao_sequence);
}


TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_CDR_OP_TAO_Trader_Test_ULongSeq_CPP_ */

// TAO_IDL - Generated from
// be/be_visitor_sequence/cdr_op_cs.cpp:93
#if !defined _TAO_CDR_OP_TAO_Trader_Test_BooleanSeq_CPP_
#define _TAO_CDR_OP_TAO_Trader_Test_BooleanSeq_CPP_

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const TAO_Trader_Test::BooleanSeq &_tao_sequence)
{
  return TAO::marshal_sequence(strm, _tao_sequence);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    TAO_Trader_Test::BooleanSeq &_tao_sequence)
{
  return TAO::demarshal_sequence(strm, _tao_sequence);
}


TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_CDR_OP_TAO_Trader_Test_BooleanSeq_CPP_ */

// TAO_IDL - Generated from
// be/be_visitor_sequence/cdr_op_cs.cpp:93
#if !defined _TAO_CDR_OP_TAO_Trader_Test_FloatSeq_CPP_
#define _TAO_CDR_OP_TAO_Trader_Test_FloatSeq_CPP_

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const TAO_Trader_Test::FloatSeq &_tao_sequence)
{
  return TAO::marshal_sequence(strm, _tao_sequence);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    TAO_Trader_Test::FloatSeq &_tao_sequence)
{
  return TAO::demarshal_sequence(strm, _tao_sequence);
}


TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_CDR_OP_TAO_Trader_Test_FloatSeq_CPP_ */

// TAO_IDL - Generated from
// be/be_visitor_sequence/cdr_op_cs.cpp:93
#if !defined _TAO_CDR_OP_TAO_Trader_Test_DoubleSeq_CPP_
#define _TAO_CDR_OP_TAO_Trader_Test_DoubleSeq_CPP_

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const TAO_Trader_Test::DoubleSeq &_tao_sequence)
{
  return TAO::marshal_sequence(strm, _tao_sequence);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    TAO_Trader_Test::DoubleSeq &_tao_sequence)
{
  return TAO::demarshal_sequence(strm, _tao_sequence);
}


TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_CDR_OP_TAO_Trader_Test_DoubleSeq_CPP_ */

// TAO_IDL - Generated from
// be/be_visitor_sequence/cdr_op_cs.cpp:93
#if !defined _TAO_CDR_OP_TAO_Trader_Test_StringSeq_CPP_
#define _TAO_CDR_OP_TAO_Trader_Test_StringSeq_CPP_

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const TAO_Trader_Test::StringSeq &_tao_sequence)
{
  return TAO::marshal_sequence(strm, _tao_sequence);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    TAO_Trader_Test::StringSeq &_tao_sequence)
{
  return TAO::demarshal_sequence(strm, _tao_sequence);
}


TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_CDR_OP_TAO_Trader_Test_StringSeq_CPP_ */

