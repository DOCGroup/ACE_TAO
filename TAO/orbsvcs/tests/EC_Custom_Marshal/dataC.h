// -*- C++ -*-
/**
 * Code generated by the The ACE ORB (TAO) IDL Compiler v2.4.1
 * TAO and the TAO IDL Compiler have been developed by:
 *       Center for Distributed Object Computing
 *       Washington University
 *       St. Louis, MO
 *       USA
 *       http://www.cs.wustl.edu/~schmidt/doc-center.html
 * and
 *       Distributed Object Computing Laboratory
 *       University of California at Irvine
 *       Irvine, CA
 *       USA
 * and
 *       Institute for Software Integrated Systems
 *       Vanderbilt University
 *       Nashville, TN
 *       USA
 *       http://www.isis.vanderbilt.edu/
 *
 * Information about TAO is available at:
 *     http://www.dre.vanderbilt.edu/~schmidt/TAO.html
 **/

// TAO_IDL - Generated from
// be/be_codegen.cpp:149

#ifndef _TAO_IDL_DATAC_KYKZP5_H_
#define _TAO_IDL_DATAC_KYKZP5_H_

#include /**/ "ace/pre.h"


#include /**/ "ace/config-all.h"

#if !defined (ACE_LACKS_PRAGMA_ONCE)
# pragma once
#endif /* ACE_LACKS_PRAGMA_ONCE */


#include "tao/AnyTypeCode/AnyTypeCode_methods.h"
#include "tao/AnyTypeCode/Any.h"
#include "tao/ORB.h"
#include "tao/Basic_Types.h"
#include "tao/String_Manager_T.h"
#include "tao/Sequence_T.h"
#include "tao/Seq_Var_T.h"
#include "tao/Seq_Out_T.h"
#include "tao/VarOut_T.h"
#include "tao/Arg_Traits_T.h"
#include "tao/Basic_Arguments.h"
#include "tao/Special_Basic_Arguments.h"
#include "tao/Any_Insert_Policy_T.h"
#include "tao/Fixed_Size_Argument_T.h"
#include "tao/Var_Size_Argument_T.h"
#include "tao/UB_String_Arguments.h"
#include /**/ "tao/Version.h"
#include /**/ "tao/Versioned_Namespace.h"

#if TAO_MAJOR_VERSION != 2 || TAO_MINOR_VERSION != 4 || TAO_MICRO_VERSION != 1
#error This file should be regenerated with TAO_IDL
#endif

#if defined (TAO_EXPORT_MACRO)
#undef TAO_EXPORT_MACRO
#endif
#define TAO_EXPORT_MACRO 

// TAO_IDL - Generated from
// be/be_visitor_module/module_ch.cpp:35

namespace ECM_IDLData
{

  // TAO_IDL - Generated from
  // be/be_type.cpp:258

  struct Point;

  typedef
    ::TAO_Fixed_Var_T<
        Point
      >
    Point_var;

  typedef
    Point &
    Point_out;

  // TAO_IDL - Generated from
  // be/be_visitor_structure/structure_ch.cpp:48

  struct  Point
  {

    // TAO_IDL - Generated from
    // be/be_type.cpp:304

    
    typedef Point_var _var_type;
    typedef Point_out _out_type;

    static void _tao_any_destructor (void *);
    
    ::CORBA::Double x;
    ::CORBA::Double y;
  };

  // TAO_IDL - Generated from
  // be/be_visitor_typecode/typecode_decl.cpp:34

  extern  ::CORBA::TypeCode_ptr const _tc_Point;

  // TAO_IDL - Generated from
  // be/be_visitor_sequence/sequence_ch.cpp:99

#if !defined (_ECM_IDLDATA_VECTOR_CH_)
#define _ECM_IDLDATA_VECTOR_CH_

  class Vector;

  typedef
    ::TAO_FixedSeq_Var_T<
        Vector
      >
    Vector_var;

  typedef
    ::TAO_Seq_Out_T<
        Vector
      >
    Vector_out;

  class  Vector
    : public
        ::TAO::unbounded_value_sequence<
            Point
          >
  {
  public:
    Vector (void);
    Vector ( ::CORBA::ULong max);
    Vector (
      ::CORBA::ULong max,
      ::CORBA::ULong length,
      Point* buffer,
      ::CORBA::Boolean release = false);
    Vector (const Vector &);
    virtual ~Vector (void);
    

    // TAO_IDL - Generated from
    // be/be_type.cpp:304

    
    typedef Vector_var _var_type;
    typedef Vector_out _out_type;

    static void _tao_any_destructor (void *);
  };

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // be/be_visitor_typecode/typecode_decl.cpp:34

  extern  ::CORBA::TypeCode_ptr const _tc_Vector;

  // TAO_IDL - Generated from
  // be/be_type.cpp:258

  struct Info;

  typedef
    ::TAO_Var_Var_T<
        Info
      >
    Info_var;

  typedef
    ::TAO_Out_T<
        Info
      >
    Info_out;

  // TAO_IDL - Generated from
  // be/be_visitor_structure/structure_ch.cpp:48

  struct  Info
  {

    // TAO_IDL - Generated from
    // be/be_type.cpp:304

    
    typedef Info_var _var_type;
    typedef Info_out _out_type;

    static void _tao_any_destructor (void *);
    
    ::TAO::String_Manager mobile_name;
    ::CORBA::Double mobile_speed;
    ECM_IDLData::Vector trajectory;
  };

  // TAO_IDL - Generated from
  // be/be_visitor_typecode/typecode_decl.cpp:34

  extern  ::CORBA::TypeCode_ptr const _tc_Info;

// TAO_IDL - Generated from
// be/be_visitor_module/module_ch.cpp:64

} // module ECM_IDLData

// TAO_IDL - Generated from
// be/be_visitor_arg_traits.cpp:66

TAO_BEGIN_VERSIONED_NAMESPACE_DECL


// Arg traits specializations.
namespace TAO
{

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:945

  template<>
  class Arg_Traits< ::ECM_IDLData::Point>
    : public
        Fixed_Size_Arg_Traits_T<
            ::ECM_IDLData::Point,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:683

  template<>
  class Arg_Traits< ::ECM_IDLData::Vector>
    : public
        Var_Size_Arg_Traits_T<
            ::ECM_IDLData::Vector,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:945

  template<>
  class Arg_Traits< ::ECM_IDLData::Info>
    : public
        Var_Size_Arg_Traits_T<
            ::ECM_IDLData::Info,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_traits.cpp:60

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Traits specializations.
namespace TAO
{
}
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_structure/any_op_ch.cpp:42



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace ECM_IDLData
{
   void operator<<= (::CORBA::Any &, const ::ECM_IDLData::Point &); // copying version
   void operator<<= (::CORBA::Any &, ::ECM_IDLData::Point*); // noncopying version
   ::CORBA::Boolean operator>>= (const ::CORBA::Any &, ::ECM_IDLData::Point *&); // deprecated
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const ::ECM_IDLData::Point *&);
}

#else


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 void operator<<= (::CORBA::Any &, const ECM_IDLData::Point &); // copying version
 void operator<<= (::CORBA::Any &, ECM_IDLData::Point*); // noncopying version
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, ECM_IDLData::Point *&); // deprecated
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const ECM_IDLData::Point *&);
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_sequence/any_op_ch.cpp:47



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace ECM_IDLData
{
   void operator<<= ( ::CORBA::Any &, const ::ECM_IDLData::Vector &); // copying version
   void operator<<= ( ::CORBA::Any &, ::ECM_IDLData::Vector*); // noncopying version
   ::CORBA::Boolean operator>>= (const ::CORBA::Any &, ::ECM_IDLData::Vector *&); // deprecated
   ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const ::ECM_IDLData::Vector *&);
}

#else


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 void operator<<= ( ::CORBA::Any &, const ECM_IDLData::Vector &); // copying version
 void operator<<= ( ::CORBA::Any &, ECM_IDLData::Vector*); // noncopying version
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, ECM_IDLData::Vector *&); // deprecated
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const ECM_IDLData::Vector *&);
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_structure/any_op_ch.cpp:42



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace ECM_IDLData
{
   void operator<<= (::CORBA::Any &, const ::ECM_IDLData::Info &); // copying version
   void operator<<= (::CORBA::Any &, ::ECM_IDLData::Info*); // noncopying version
   ::CORBA::Boolean operator>>= (const ::CORBA::Any &, ::ECM_IDLData::Info *&); // deprecated
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const ::ECM_IDLData::Info *&);
}

#else


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 void operator<<= (::CORBA::Any &, const ECM_IDLData::Info &); // copying version
 void operator<<= (::CORBA::Any &, ECM_IDLData::Info*); // noncopying version
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, ECM_IDLData::Info *&); // deprecated
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const ECM_IDLData::Info *&);
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_structure/cdr_op_ch.cpp:43


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 ::CORBA::Boolean operator<< (TAO_OutputCDR &, const ECM_IDLData::Point &);
 ::CORBA::Boolean operator>> (TAO_InputCDR &, ECM_IDLData::Point &);

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_sequence/cdr_op_ch.cpp:65

#if !defined _TAO_CDR_OP_ECM_IDLData_Vector_H_
#define _TAO_CDR_OP_ECM_IDLData_Vector_H_
TAO_BEGIN_VERSIONED_NAMESPACE_DECL


 ::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const ECM_IDLData::Vector &_tao_sequence);
 ::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    ECM_IDLData::Vector &_tao_sequence);

TAO_END_VERSIONED_NAMESPACE_DECL



#endif /* _TAO_CDR_OP_ECM_IDLData_Vector_H_ */

// TAO_IDL - Generated from
// be/be_visitor_structure/cdr_op_ch.cpp:43


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 ::CORBA::Boolean operator<< (TAO_OutputCDR &, const ECM_IDLData::Info &);
 ::CORBA::Boolean operator>> (TAO_InputCDR &, ECM_IDLData::Info &);

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_codegen.cpp:1700
#if defined (__ACE_INLINE__)
#include "dataC.inl"
#endif /* defined INLINE */

#include /**/ "ace/post.h"

#endif /* ifndef */

