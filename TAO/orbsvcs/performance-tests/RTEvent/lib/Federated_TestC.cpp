// -*- C++ -*-
/**
 * Code generated by the The ACE ORB (TAO) IDL Compiler v2.4.1
 * TAO and the TAO IDL Compiler have been developed by:
 *       Center for Distributed Object Computing
 *       Washington University
 *       St. Louis, MO
 *       USA
 *       http://www.cs.wustl.edu/~schmidt/doc-center.html
 * and
 *       Distributed Object Computing Laboratory
 *       University of California at Irvine
 *       Irvine, CA
 *       USA
 * and
 *       Institute for Software Integrated Systems
 *       Vanderbilt University
 *       Nashville, TN
 *       USA
 *       http://www.isis.vanderbilt.edu/
 *
 * Information about TAO is available at:
 *     http://www.dre.vanderbilt.edu/~schmidt/TAO.html
 **/

// TAO_IDL - Generated from
// be/be_codegen.cpp:373


#include "Federated_TestC.h"
#include "tao/AnyTypeCode/Null_RefCount_Policy.h"
#include "tao/AnyTypeCode/TypeCode_Constants.h"
#include "tao/AnyTypeCode/Alias_TypeCode_Static.h"
#include "tao/AnyTypeCode/Objref_TypeCode_Static.h"
#include "tao/CDR.h"
#include "tao/Exception_Data.h"
#include "tao/Invocation_Adapter.h"
#include "tao/Object_T.h"
#include "tao/CDR.h"
#include "tao/AnyTypeCode/Any.h"
#include "tao/AnyTypeCode/Any_Impl_T.h"
#include "ace/OS_NS_string.h"

#if !defined (__ACE_INLINE__)
#include "Federated_TestC.inl"
#endif /* !defined INLINE */

// TAO_IDL - Generated from
// be/be_visitor_interface/interface_cs.cpp:48

// Traits specializations for Federated_Test::Control.

Federated_Test::Control_ptr
TAO::Objref_Traits<Federated_Test::Control>::duplicate (
    Federated_Test::Control_ptr p)
{
  return Federated_Test::Control::_duplicate (p);
}

void
TAO::Objref_Traits<Federated_Test::Control>::release (
    Federated_Test::Control_ptr p)
{
  ::CORBA::release (p);
}

Federated_Test::Control_ptr
TAO::Objref_Traits<Federated_Test::Control>::nil (void)
{
  return Federated_Test::Control::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<Federated_Test::Control>::marshal (
    const Federated_Test::Control_ptr p,
    TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:88

void
Federated_Test::Control::join (
  ::Federated_Test::Peer_ptr the_peer)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  TAO::Arg_Traits< void>::ret_val _tao_retval;
  TAO::Arg_Traits< ::Federated_Test::Peer>::in_arg_val _tao_the_peer (the_peer);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_the_peer
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      2,
      "join",
      4,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY
      
    );

  _tao_call.invoke (0, 0);
}

Federated_Test::Control::Control (void)
{
}

Federated_Test::Control::~Control (void)
{
}

void
Federated_Test::Control::_tao_any_destructor (void *_tao_void_pointer)
{
  Control *_tao_tmp_pointer =
    static_cast<Control *> (_tao_void_pointer);
  ::CORBA::release (_tao_tmp_pointer);
}

Federated_Test::Control_ptr
Federated_Test::Control::_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return
    TAO::Narrow_Utils<Control>::narrow (
        _tao_objref,
        "IDL:Federated_Test/Control:1.0");
}

Federated_Test::Control_ptr
Federated_Test::Control::_unchecked_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return
    TAO::Narrow_Utils<Control>::unchecked_narrow (
        _tao_objref);
}

Federated_Test::Control_ptr
Federated_Test::Control::_nil (void)
{
  return 0;
}

Federated_Test::Control_ptr
Federated_Test::Control::_duplicate (Control_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  return obj;
}

void
Federated_Test::Control::_tao_release (Control_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
Federated_Test::Control::_is_a (const char *value)
{
  if (
      ACE_OS::strcmp (
          value,
          "IDL:Federated_Test/Control:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        ) == 0
    )
    {
      return true; // success using local knowledge
    }
  else
    {
      return this->::CORBA::Object::_is_a (value);
    }
}

const char* Federated_Test::Control::_interface_repository_id (void) const
{
  return "IDL:Federated_Test/Control:1.0";
}

::CORBA::Boolean
Federated_Test::Control::marshal (TAO_OutputCDR &cdr)
{
  return (cdr << this);
}

// TAO_IDL - Generated from
// be/be_visitor_typecode/objref_typecode.cpp:70

static TAO::TypeCode::Objref<char const *,
                             TAO::Null_RefCount_Policy>
  _tao_tc_Federated_Test_Control (
    ::CORBA::tk_objref,
    "IDL:Federated_Test/Control:1.0",
    "Control");
  

namespace Federated_Test
{
  ::CORBA::TypeCode_ptr const _tc_Control =
    &_tao_tc_Federated_Test_Control;
}

// TAO_IDL - Generated from
// be/be_visitor_typecode/alias_typecode.cpp:49

static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_Federated_Test_Experiment_Results (
    ::CORBA::tk_alias,
    "IDL:Federated_Test/Experiment_Results:1.0",
    "Experiment_Results",
    &CORBA::_tc_ULongLongSeq);
  

namespace Federated_Test
{
  ::CORBA::TypeCode_ptr const _tc_Experiment_Results =
    &_tao_tc_Federated_Test_Experiment_Results;
}

// TAO_IDL - Generated from
// be/be_visitor_interface/interface_cs.cpp:48

// Traits specializations for Federated_Test::Peer.

Federated_Test::Peer_ptr
TAO::Objref_Traits<Federated_Test::Peer>::duplicate (
    Federated_Test::Peer_ptr p)
{
  return Federated_Test::Peer::_duplicate (p);
}

void
TAO::Objref_Traits<Federated_Test::Peer>::release (
    Federated_Test::Peer_ptr p)
{
  ::CORBA::release (p);
}

Federated_Test::Peer_ptr
TAO::Objref_Traits<Federated_Test::Peer>::nil (void)
{
  return Federated_Test::Peer::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<Federated_Test::Peer>::marshal (
    const Federated_Test::Peer_ptr p,
    TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:88

void
Federated_Test::Peer::shutdown (
  void)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  TAO::Arg_Traits< void>::ret_val _tao_retval;

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      1,
      "shutdown",
      8,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY,
      TAO::TAO_TWOWAY_INVOCATION
      ,
      TAO::TAO_SYNCHRONOUS_INVOCATION,
      false
    );

  _tao_call.invoke (0, 0);
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:88

::Federated_Test::Loopback_ptr
Federated_Test::Peer::setup_loopback (
  ::CORBA::Long experiment_id,
  ::CORBA::Long base_event_type)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  TAO::Arg_Traits< ::Federated_Test::Loopback>::ret_val _tao_retval;
  TAO::Arg_Traits< ::CORBA::Long>::in_arg_val _tao_experiment_id (experiment_id);
  TAO::Arg_Traits< ::CORBA::Long>::in_arg_val _tao_base_event_type (base_event_type);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_experiment_id,
      &_tao_base_event_type
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      3,
      "setup_loopback",
      14,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY
      
    );

  _tao_call.invoke (0, 0);

  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:88

::Federated_Test::Experiment_Results *
Federated_Test::Peer::run_experiment (
  ::CORBA::Long experiment_id,
  ::CORBA::Long iterations)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  TAO::Arg_Traits< ::Federated_Test::Experiment_Results>::ret_val _tao_retval;
  TAO::Arg_Traits< ::CORBA::Long>::in_arg_val _tao_experiment_id (experiment_id);
  TAO::Arg_Traits< ::CORBA::Long>::in_arg_val _tao_iterations (iterations);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_experiment_id,
      &_tao_iterations
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      3,
      "run_experiment",
      14,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY
      
    );

  _tao_call.invoke (0, 0);

  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:88

::CORBA::Object_ptr
Federated_Test::Peer::channel (
  void)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  TAO::Arg_Traits< ::CORBA::Object>::ret_val _tao_retval;

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      1,
      "_get_channel",
      12,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY,
      TAO::TAO_TWOWAY_INVOCATION
      ,
      TAO::TAO_SYNCHRONOUS_INVOCATION,
      false
    );

  _tao_call.invoke (0, 0);

  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:88

void
Federated_Test::Peer::connect (
  ::Federated_Test::Peer_ptr remote_peer)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  TAO::Arg_Traits< void>::ret_val _tao_retval;
  TAO::Arg_Traits< ::Federated_Test::Peer>::in_arg_val _tao_remote_peer (remote_peer);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_remote_peer
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      2,
      "connect",
      7,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY
      
    );

  _tao_call.invoke (0, 0);
}

Federated_Test::Peer::Peer (void)
{
}

Federated_Test::Peer::~Peer (void)
{
}

void
Federated_Test::Peer::_tao_any_destructor (void *_tao_void_pointer)
{
  Peer *_tao_tmp_pointer =
    static_cast<Peer *> (_tao_void_pointer);
  ::CORBA::release (_tao_tmp_pointer);
}

Federated_Test::Peer_ptr
Federated_Test::Peer::_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return
    TAO::Narrow_Utils<Peer>::narrow (
        _tao_objref,
        "IDL:Federated_Test/Peer:1.0");
}

Federated_Test::Peer_ptr
Federated_Test::Peer::_unchecked_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return
    TAO::Narrow_Utils<Peer>::unchecked_narrow (
        _tao_objref);
}

Federated_Test::Peer_ptr
Federated_Test::Peer::_nil (void)
{
  return 0;
}

Federated_Test::Peer_ptr
Federated_Test::Peer::_duplicate (Peer_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  return obj;
}

void
Federated_Test::Peer::_tao_release (Peer_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
Federated_Test::Peer::_is_a (const char *value)
{
  if (
      ACE_OS::strcmp (
          value,
          "IDL:Federated_Test/Peer:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        ) == 0
    )
    {
      return true; // success using local knowledge
    }
  else
    {
      return this->::CORBA::Object::_is_a (value);
    }
}

const char* Federated_Test::Peer::_interface_repository_id (void) const
{
  return "IDL:Federated_Test/Peer:1.0";
}

::CORBA::Boolean
Federated_Test::Peer::marshal (TAO_OutputCDR &cdr)
{
  return (cdr << this);
}

// TAO_IDL - Generated from
// be/be_visitor_typecode/objref_typecode.cpp:70

static TAO::TypeCode::Objref<char const *,
                             TAO::Null_RefCount_Policy>
  _tao_tc_Federated_Test_Peer (
    ::CORBA::tk_objref,
    "IDL:Federated_Test/Peer:1.0",
    "Peer");
  

namespace Federated_Test
{
  ::CORBA::TypeCode_ptr const _tc_Peer =
    &_tao_tc_Federated_Test_Peer;
}

// TAO_IDL - Generated from
// be/be_visitor_interface/interface_cs.cpp:48

// Traits specializations for Federated_Test::Loopback.

Federated_Test::Loopback_ptr
TAO::Objref_Traits<Federated_Test::Loopback>::duplicate (
    Federated_Test::Loopback_ptr p)
{
  return Federated_Test::Loopback::_duplicate (p);
}

void
TAO::Objref_Traits<Federated_Test::Loopback>::release (
    Federated_Test::Loopback_ptr p)
{
  ::CORBA::release (p);
}

Federated_Test::Loopback_ptr
TAO::Objref_Traits<Federated_Test::Loopback>::nil (void)
{
  return Federated_Test::Loopback::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<Federated_Test::Loopback>::marshal (
    const Federated_Test::Loopback_ptr p,
    TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:88

void
Federated_Test::Loopback::disconnect (
  void)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  TAO::Arg_Traits< void>::ret_val _tao_retval;

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      1,
      "disconnect",
      10,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY,
      TAO::TAO_TWOWAY_INVOCATION
      ,
      TAO::TAO_SYNCHRONOUS_INVOCATION,
      false
    );

  _tao_call.invoke (0, 0);
}

Federated_Test::Loopback::Loopback (void)
{
}

Federated_Test::Loopback::~Loopback (void)
{
}

void
Federated_Test::Loopback::_tao_any_destructor (void *_tao_void_pointer)
{
  Loopback *_tao_tmp_pointer =
    static_cast<Loopback *> (_tao_void_pointer);
  ::CORBA::release (_tao_tmp_pointer);
}

Federated_Test::Loopback_ptr
Federated_Test::Loopback::_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return
    TAO::Narrow_Utils<Loopback>::narrow (
        _tao_objref,
        "IDL:Federated_Test/Loopback:1.0");
}

Federated_Test::Loopback_ptr
Federated_Test::Loopback::_unchecked_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return
    TAO::Narrow_Utils<Loopback>::unchecked_narrow (
        _tao_objref);
}

Federated_Test::Loopback_ptr
Federated_Test::Loopback::_nil (void)
{
  return 0;
}

Federated_Test::Loopback_ptr
Federated_Test::Loopback::_duplicate (Loopback_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  return obj;
}

void
Federated_Test::Loopback::_tao_release (Loopback_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
Federated_Test::Loopback::_is_a (const char *value)
{
  if (
      ACE_OS::strcmp (
          value,
          "IDL:Federated_Test/Loopback:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        ) == 0
    )
    {
      return true; // success using local knowledge
    }
  else
    {
      return this->::CORBA::Object::_is_a (value);
    }
}

const char* Federated_Test::Loopback::_interface_repository_id (void) const
{
  return "IDL:Federated_Test/Loopback:1.0";
}

::CORBA::Boolean
Federated_Test::Loopback::marshal (TAO_OutputCDR &cdr)
{
  return (cdr << this);
}

// TAO_IDL - Generated from
// be/be_visitor_typecode/objref_typecode.cpp:70

static TAO::TypeCode::Objref<char const *,
                             TAO::Null_RefCount_Policy>
  _tao_tc_Federated_Test_Loopback (
    ::CORBA::tk_objref,
    "IDL:Federated_Test/Loopback:1.0",
    "Loopback");
  

namespace Federated_Test
{
  ::CORBA::TypeCode_ptr const _tc_Loopback =
    &_tao_tc_Federated_Test_Loopback;
}

// TAO_IDL - Generated from
// be/be_visitor_interface/any_op_cs.cpp:38
TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<Federated_Test::Control>::to_object (
      ::CORBA::Object_ptr &_tao_elem) const
  {
    _tao_elem = ::CORBA::Object::_duplicate (this->value_);
    return true;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace Federated_Test
{
  

  /// Copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      Control_ptr _tao_elem)
  {
    Control_ptr _tao_objptr =
      Control::_duplicate (_tao_elem);
    _tao_any <<= &_tao_objptr;
  }

  /// Non-copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      Control_ptr *_tao_elem)
  {
    TAO::Any_Impl_T<Control>::insert (
        _tao_any,
        Control::_tao_any_destructor,
        _tc_Control,
        *_tao_elem);
  }

  ::CORBA::Boolean
  operator>>= (
      const ::CORBA::Any &_tao_any,
      Control_ptr &_tao_elem)
  {
    return
      TAO::Any_Impl_T<Control>::extract (
          _tao_any,
          Control::_tao_any_destructor,
          _tc_Control,
          _tao_elem);
  }
}

#else

TAO_BEGIN_VERSIONED_NAMESPACE_DECL



/// Copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    Federated_Test::Control_ptr _tao_elem)
{
  Federated_Test::Control_ptr _tao_objptr =
    Federated_Test::Control::_duplicate (_tao_elem);
  _tao_any <<= &_tao_objptr;
}

/// Non-copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    Federated_Test::Control_ptr *_tao_elem)
{
  TAO::Any_Impl_T<Federated_Test::Control>::insert (
      _tao_any,
      Federated_Test::Control::_tao_any_destructor,
      Federated_Test::_tc_Control,
      *_tao_elem);
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    Federated_Test::Control_ptr &_tao_elem)
{
  return
    TAO::Any_Impl_T<Federated_Test::Control>::extract (
        _tao_any,
        Federated_Test::Control::_tao_any_destructor,
        Federated_Test::_tc_Control,
        _tao_elem);
}

TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_interface/any_op_cs.cpp:38
TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<Federated_Test::Peer>::to_object (
      ::CORBA::Object_ptr &_tao_elem) const
  {
    _tao_elem = ::CORBA::Object::_duplicate (this->value_);
    return true;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace Federated_Test
{
  

  /// Copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      Peer_ptr _tao_elem)
  {
    Peer_ptr _tao_objptr =
      Peer::_duplicate (_tao_elem);
    _tao_any <<= &_tao_objptr;
  }

  /// Non-copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      Peer_ptr *_tao_elem)
  {
    TAO::Any_Impl_T<Peer>::insert (
        _tao_any,
        Peer::_tao_any_destructor,
        _tc_Peer,
        *_tao_elem);
  }

  ::CORBA::Boolean
  operator>>= (
      const ::CORBA::Any &_tao_any,
      Peer_ptr &_tao_elem)
  {
    return
      TAO::Any_Impl_T<Peer>::extract (
          _tao_any,
          Peer::_tao_any_destructor,
          _tc_Peer,
          _tao_elem);
  }
}

#else

TAO_BEGIN_VERSIONED_NAMESPACE_DECL



/// Copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    Federated_Test::Peer_ptr _tao_elem)
{
  Federated_Test::Peer_ptr _tao_objptr =
    Federated_Test::Peer::_duplicate (_tao_elem);
  _tao_any <<= &_tao_objptr;
}

/// Non-copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    Federated_Test::Peer_ptr *_tao_elem)
{
  TAO::Any_Impl_T<Federated_Test::Peer>::insert (
      _tao_any,
      Federated_Test::Peer::_tao_any_destructor,
      Federated_Test::_tc_Peer,
      *_tao_elem);
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    Federated_Test::Peer_ptr &_tao_elem)
{
  return
    TAO::Any_Impl_T<Federated_Test::Peer>::extract (
        _tao_any,
        Federated_Test::Peer::_tao_any_destructor,
        Federated_Test::_tc_Peer,
        _tao_elem);
}

TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_interface/any_op_cs.cpp:38
TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<Federated_Test::Loopback>::to_object (
      ::CORBA::Object_ptr &_tao_elem) const
  {
    _tao_elem = ::CORBA::Object::_duplicate (this->value_);
    return true;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace Federated_Test
{
  

  /// Copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      Loopback_ptr _tao_elem)
  {
    Loopback_ptr _tao_objptr =
      Loopback::_duplicate (_tao_elem);
    _tao_any <<= &_tao_objptr;
  }

  /// Non-copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      Loopback_ptr *_tao_elem)
  {
    TAO::Any_Impl_T<Loopback>::insert (
        _tao_any,
        Loopback::_tao_any_destructor,
        _tc_Loopback,
        *_tao_elem);
  }

  ::CORBA::Boolean
  operator>>= (
      const ::CORBA::Any &_tao_any,
      Loopback_ptr &_tao_elem)
  {
    return
      TAO::Any_Impl_T<Loopback>::extract (
          _tao_any,
          Loopback::_tao_any_destructor,
          _tc_Loopback,
          _tao_elem);
  }
}

#else

TAO_BEGIN_VERSIONED_NAMESPACE_DECL



/// Copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    Federated_Test::Loopback_ptr _tao_elem)
{
  Federated_Test::Loopback_ptr _tao_objptr =
    Federated_Test::Loopback::_duplicate (_tao_elem);
  _tao_any <<= &_tao_objptr;
}

/// Non-copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    Federated_Test::Loopback_ptr *_tao_elem)
{
  TAO::Any_Impl_T<Federated_Test::Loopback>::insert (
      _tao_any,
      Federated_Test::Loopback::_tao_any_destructor,
      Federated_Test::_tc_Loopback,
      *_tao_elem);
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    Federated_Test::Loopback_ptr &_tao_elem)
{
  return
    TAO::Any_Impl_T<Federated_Test::Loopback>::extract (
        _tao_any,
        Federated_Test::Loopback::_tao_any_destructor,
        Federated_Test::_tc_Loopback,
        _tao_elem);
}

TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_interface/cdr_op_cs.cpp:51

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Federated_Test::Control_ptr _tao_objref)
{
  ::CORBA::Object_ptr _tao_corba_obj = _tao_objref;
  return (strm << _tao_corba_obj);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Federated_Test::Control_ptr &_tao_objref)
{
  ::CORBA::Object_var obj;

  if (!(strm >> obj.inout ()))
    {
      return false;
    }
  
  typedef ::Federated_Test::Control RHS_SCOPED_NAME;

  // Narrow to the right type.
  _tao_objref =
    TAO::Narrow_Utils<RHS_SCOPED_NAME>::unchecked_narrow (obj.in ());
    
  return true;
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_interface/cdr_op_cs.cpp:51

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Federated_Test::Peer_ptr _tao_objref)
{
  ::CORBA::Object_ptr _tao_corba_obj = _tao_objref;
  return (strm << _tao_corba_obj);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Federated_Test::Peer_ptr &_tao_objref)
{
  ::CORBA::Object_var obj;

  if (!(strm >> obj.inout ()))
    {
      return false;
    }
  
  typedef ::Federated_Test::Peer RHS_SCOPED_NAME;

  // Narrow to the right type.
  _tao_objref =
    TAO::Narrow_Utils<RHS_SCOPED_NAME>::unchecked_narrow (obj.in ());
    
  return true;
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_interface/cdr_op_cs.cpp:51

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Federated_Test::Loopback_ptr _tao_objref)
{
  ::CORBA::Object_ptr _tao_corba_obj = _tao_objref;
  return (strm << _tao_corba_obj);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Federated_Test::Loopback_ptr &_tao_objref)
{
  ::CORBA::Object_var obj;

  if (!(strm >> obj.inout ()))
    {
      return false;
    }
  
  typedef ::Federated_Test::Loopback RHS_SCOPED_NAME;

  // Narrow to the right type.
  _tao_objref =
    TAO::Narrow_Utils<RHS_SCOPED_NAME>::unchecked_narrow (obj.in ());
    
  return true;
}

TAO_END_VERSIONED_NAMESPACE_DECL



