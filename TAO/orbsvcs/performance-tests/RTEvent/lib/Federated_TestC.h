// -*- C++ -*-
/**
 * Code generated by the The ACE ORB (TAO) IDL Compiler v2.4.1
 * TAO and the TAO IDL Compiler have been developed by:
 *       Center for Distributed Object Computing
 *       Washington University
 *       St. Louis, MO
 *       USA
 *       http://www.cs.wustl.edu/~schmidt/doc-center.html
 * and
 *       Distributed Object Computing Laboratory
 *       University of California at Irvine
 *       Irvine, CA
 *       USA
 * and
 *       Institute for Software Integrated Systems
 *       Vanderbilt University
 *       Nashville, TN
 *       USA
 *       http://www.isis.vanderbilt.edu/
 *
 * Information about TAO is available at:
 *     http://www.dre.vanderbilt.edu/~schmidt/TAO.html
 **/

// TAO_IDL - Generated from
// be/be_codegen.cpp:149

#ifndef _TAO_IDL_FEDERATED_TESTC_TK6MVQ_H_
#define _TAO_IDL_FEDERATED_TESTC_TK6MVQ_H_

#include /**/ "ace/pre.h"


#include /**/ "ace/config-all.h"

#if !defined (ACE_LACKS_PRAGMA_ONCE)
# pragma once
#endif /* ACE_LACKS_PRAGMA_ONCE */


#include /**/ "rtec_perf_export.h"
#include "tao/AnyTypeCode/AnyTypeCode_methods.h"
#include "tao/AnyTypeCode/Any.h"
#include "tao/ORB.h"
#include "tao/SystemException.h"
#include "tao/Basic_Types.h"
#include "tao/ORB_Constants.h"
#include "tao/Object.h"
#include "tao/AnyTypeCode/ULongLongSeqA.h"
#include "tao/Objref_VarOut_T.h"
#include "tao/Arg_Traits_T.h"
#include "tao/Basic_Arguments.h"
#include "tao/Special_Basic_Arguments.h"
#include "tao/Any_Insert_Policy_T.h"
#include "tao/Fixed_Size_Argument_T.h"
#include "tao/Var_Size_Argument_T.h"
#include "tao/Object_Argument_T.h"
#include /**/ "tao/Version.h"
#include /**/ "tao/Versioned_Namespace.h"

#include "tao/ULongLongSeqC.h"

#if TAO_MAJOR_VERSION != 2 || TAO_MINOR_VERSION != 4 || TAO_MICRO_VERSION != 1
#error This file should be regenerated with TAO_IDL
#endif

#if defined (TAO_EXPORT_MACRO)
#undef TAO_EXPORT_MACRO
#endif
#define TAO_EXPORT_MACRO TAO_RTEC_Perf_Export

// TAO_IDL - Generated from
// be/be_visitor_root/root_ch.cpp:157
TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<typename T> class Narrow_Utils;
}
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_module/module_ch.cpp:35

namespace Federated_Test
{

  // TAO_IDL - Generated from
  // be/be_interface.cpp:748

#if !defined (_FEDERATED_TEST_PEER__VAR_OUT_CH_)
#define _FEDERATED_TEST_PEER__VAR_OUT_CH_

  class Peer;
  typedef Peer *Peer_ptr;

  typedef
    TAO_Objref_Var_T<
        Peer
      >
    Peer_var;

  typedef
    TAO_Objref_Out_T<
        Peer
      >
    Peer_out;

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // be/be_interface.cpp:748

#if !defined (_FEDERATED_TEST_LOOPBACK__VAR_OUT_CH_)
#define _FEDERATED_TEST_LOOPBACK__VAR_OUT_CH_

  class Loopback;
  typedef Loopback *Loopback_ptr;

  typedef
    TAO_Objref_Var_T<
        Loopback
      >
    Loopback_var;

  typedef
    TAO_Objref_Out_T<
        Loopback
      >
    Loopback_out;

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // be/be_interface.cpp:748

#if !defined (_FEDERATED_TEST_CONTROL__VAR_OUT_CH_)
#define _FEDERATED_TEST_CONTROL__VAR_OUT_CH_

  class Control;
  typedef Control *Control_ptr;

  typedef
    TAO_Objref_Var_T<
        Control
      >
    Control_var;

  typedef
    TAO_Objref_Out_T<
        Control
      >
    Control_out;

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // be/be_visitor_interface/interface_ch.cpp:40

  class TAO_RTEC_Perf_Export Control
    : public virtual ::CORBA::Object
  {
  public:
    friend class TAO::Narrow_Utils<Control>;

    // TAO_IDL - Generated from
    // be/be_type.cpp:304

    typedef Control_ptr _ptr_type;
    typedef Control_var _var_type;
    typedef Control_out _out_type;

    static void _tao_any_destructor (void *);

    // The static operations.
    static Control_ptr _duplicate (Control_ptr obj);

    static void _tao_release (Control_ptr obj);

    static Control_ptr _narrow (::CORBA::Object_ptr obj);
    static Control_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
    static Control_ptr _nil (void);

    virtual void join (
      ::Federated_Test::Peer_ptr the_peer);

    // TAO_IDL - Generated from
    // be/be_visitor_interface/interface_ch.cpp:137

    virtual ::CORBA::Boolean _is_a (const char *type_id);
    virtual const char* _interface_repository_id (void) const;
    virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);

  protected:
    // Concrete interface only.
    Control (void);

    // Concrete non-local interface only.
    Control (
        ::IOP::IOR *ior,
        TAO_ORB_Core *orb_core);

    // Non-local interface only.
    Control (
        TAO_Stub *objref,
        ::CORBA::Boolean _tao_collocated = false,
        TAO_Abstract_ServantBase *servant = 0,
        TAO_ORB_Core *orb_core = 0);

    virtual ~Control (void);

  private:
    // Private and unimplemented for concrete interfaces.
    Control (const Control &);

    void operator= (const Control &);
  };

  // TAO_IDL - Generated from
  // be/be_visitor_typecode/typecode_decl.cpp:34

  extern TAO_RTEC_Perf_Export ::CORBA::TypeCode_ptr const _tc_Control;

  // TAO_IDL - Generated from
  // be/be_visitor_typedef/typedef_ch.cpp:463

  typedef CORBA::ULongLongSeq Experiment_Results;
  typedef CORBA::ULongLongSeq_var Experiment_Results_var;
  typedef CORBA::ULongLongSeq_out Experiment_Results_out;

  // TAO_IDL - Generated from
  // be/be_visitor_typecode/typecode_decl.cpp:34

  extern TAO_RTEC_Perf_Export ::CORBA::TypeCode_ptr const _tc_Experiment_Results;

  // TAO_IDL - Generated from
  // be/be_visitor_interface/interface_ch.cpp:40

  class TAO_RTEC_Perf_Export Peer
    : public virtual ::CORBA::Object
  {
  public:
    friend class TAO::Narrow_Utils<Peer>;

    // TAO_IDL - Generated from
    // be/be_type.cpp:304

    typedef Peer_ptr _ptr_type;
    typedef Peer_var _var_type;
    typedef Peer_out _out_type;

    static void _tao_any_destructor (void *);

    // The static operations.
    static Peer_ptr _duplicate (Peer_ptr obj);

    static void _tao_release (Peer_ptr obj);

    static Peer_ptr _narrow (::CORBA::Object_ptr obj);
    static Peer_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
    static Peer_ptr _nil (void);

    virtual void shutdown (
      void);

    virtual ::Federated_Test::Loopback_ptr setup_loopback (
      ::CORBA::Long experiment_id,
      ::CORBA::Long base_event_type);

    virtual ::Federated_Test::Experiment_Results * run_experiment (
      ::CORBA::Long experiment_id,
      ::CORBA::Long iterations);

    virtual ::CORBA::Object_ptr channel (
      void);

    virtual void connect (
      ::Federated_Test::Peer_ptr remote_peer);

    // TAO_IDL - Generated from
    // be/be_visitor_interface/interface_ch.cpp:137

    virtual ::CORBA::Boolean _is_a (const char *type_id);
    virtual const char* _interface_repository_id (void) const;
    virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);

  protected:
    // Concrete interface only.
    Peer (void);

    // Concrete non-local interface only.
    Peer (
        ::IOP::IOR *ior,
        TAO_ORB_Core *orb_core);

    // Non-local interface only.
    Peer (
        TAO_Stub *objref,
        ::CORBA::Boolean _tao_collocated = false,
        TAO_Abstract_ServantBase *servant = 0,
        TAO_ORB_Core *orb_core = 0);

    virtual ~Peer (void);

  private:
    // Private and unimplemented for concrete interfaces.
    Peer (const Peer &);

    void operator= (const Peer &);
  };

  // TAO_IDL - Generated from
  // be/be_visitor_typecode/typecode_decl.cpp:34

  extern TAO_RTEC_Perf_Export ::CORBA::TypeCode_ptr const _tc_Peer;

  // TAO_IDL - Generated from
  // be/be_visitor_interface/interface_ch.cpp:40

  class TAO_RTEC_Perf_Export Loopback
    : public virtual ::CORBA::Object
  {
  public:
    friend class TAO::Narrow_Utils<Loopback>;

    // TAO_IDL - Generated from
    // be/be_type.cpp:304

    typedef Loopback_ptr _ptr_type;
    typedef Loopback_var _var_type;
    typedef Loopback_out _out_type;

    static void _tao_any_destructor (void *);

    // The static operations.
    static Loopback_ptr _duplicate (Loopback_ptr obj);

    static void _tao_release (Loopback_ptr obj);

    static Loopback_ptr _narrow (::CORBA::Object_ptr obj);
    static Loopback_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
    static Loopback_ptr _nil (void);

    virtual void disconnect (
      void);

    // TAO_IDL - Generated from
    // be/be_visitor_interface/interface_ch.cpp:137

    virtual ::CORBA::Boolean _is_a (const char *type_id);
    virtual const char* _interface_repository_id (void) const;
    virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);

  protected:
    // Concrete interface only.
    Loopback (void);

    // Concrete non-local interface only.
    Loopback (
        ::IOP::IOR *ior,
        TAO_ORB_Core *orb_core);

    // Non-local interface only.
    Loopback (
        TAO_Stub *objref,
        ::CORBA::Boolean _tao_collocated = false,
        TAO_Abstract_ServantBase *servant = 0,
        TAO_ORB_Core *orb_core = 0);

    virtual ~Loopback (void);

  private:
    // Private and unimplemented for concrete interfaces.
    Loopback (const Loopback &);

    void operator= (const Loopback &);
  };

  // TAO_IDL - Generated from
  // be/be_visitor_typecode/typecode_decl.cpp:34

  extern TAO_RTEC_Perf_Export ::CORBA::TypeCode_ptr const _tc_Loopback;

// TAO_IDL - Generated from
// be/be_visitor_module/module_ch.cpp:64

} // module Federated_Test

// TAO_IDL - Generated from
// be/be_visitor_arg_traits.cpp:66

TAO_BEGIN_VERSIONED_NAMESPACE_DECL


// Arg traits specializations.
namespace TAO
{

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:145

#if !defined (_FEDERATED_TEST_PEER__ARG_TRAITS_)
#define _FEDERATED_TEST_PEER__ARG_TRAITS_

  template<>
  class  Arg_Traits< ::Federated_Test::Peer>
    : public
        Object_Arg_Traits_T<
            ::Federated_Test::Peer_ptr,
            ::Federated_Test::Peer_var,
            ::Federated_Test::Peer_out,
            TAO::Objref_Traits<Federated_Test::Peer>,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:145

#if !defined (_FEDERATED_TEST_LOOPBACK__ARG_TRAITS_)
#define _FEDERATED_TEST_LOOPBACK__ARG_TRAITS_

  template<>
  class  Arg_Traits< ::Federated_Test::Loopback>
    : public
        Object_Arg_Traits_T<
            ::Federated_Test::Loopback_ptr,
            ::Federated_Test::Loopback_var,
            ::Federated_Test::Loopback_out,
            TAO::Objref_Traits<Federated_Test::Loopback>,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:145

#if !defined (_FEDERATED_TEST_CONTROL__ARG_TRAITS_)
#define _FEDERATED_TEST_CONTROL__ARG_TRAITS_

  template<>
  class  Arg_Traits< ::Federated_Test::Control>
    : public
        Object_Arg_Traits_T<
            ::Federated_Test::Control_ptr,
            ::Federated_Test::Control_var,
            ::Federated_Test::Control_out,
            TAO::Objref_Traits<Federated_Test::Control>,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

#endif /* end #if !defined */
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_traits.cpp:60

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Traits specializations.
namespace TAO
{

#if !defined (_FEDERATED_TEST_CONTROL__TRAITS_)
#define _FEDERATED_TEST_CONTROL__TRAITS_

  template<>
  struct TAO_RTEC_Perf_Export Objref_Traits< ::Federated_Test::Control>
  {
    static ::Federated_Test::Control_ptr duplicate (
        ::Federated_Test::Control_ptr p);
    static void release (
        ::Federated_Test::Control_ptr p);
    static ::Federated_Test::Control_ptr nil (void);
    static ::CORBA::Boolean marshal (
        const ::Federated_Test::Control_ptr p,
        TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_FEDERATED_TEST_PEER__TRAITS_)
#define _FEDERATED_TEST_PEER__TRAITS_

  template<>
  struct TAO_RTEC_Perf_Export Objref_Traits< ::Federated_Test::Peer>
  {
    static ::Federated_Test::Peer_ptr duplicate (
        ::Federated_Test::Peer_ptr p);
    static void release (
        ::Federated_Test::Peer_ptr p);
    static ::Federated_Test::Peer_ptr nil (void);
    static ::CORBA::Boolean marshal (
        const ::Federated_Test::Peer_ptr p,
        TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_FEDERATED_TEST_LOOPBACK__TRAITS_)
#define _FEDERATED_TEST_LOOPBACK__TRAITS_

  template<>
  struct TAO_RTEC_Perf_Export Objref_Traits< ::Federated_Test::Loopback>
  {
    static ::Federated_Test::Loopback_ptr duplicate (
        ::Federated_Test::Loopback_ptr p);
    static void release (
        ::Federated_Test::Loopback_ptr p);
    static ::Federated_Test::Loopback_ptr nil (void);
    static ::CORBA::Boolean marshal (
        const ::Federated_Test::Loopback_ptr p,
        TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */
}
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_interface/any_op_ch.cpp:41



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace Federated_Test
{
  TAO_RTEC_Perf_Export void operator<<= ( ::CORBA::Any &, Control_ptr); // copying
  TAO_RTEC_Perf_Export void operator<<= ( ::CORBA::Any &, Control_ptr *); // non-copying
  TAO_RTEC_Perf_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, Control_ptr &);
}

#else


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_RTEC_Perf_Export void operator<<= (::CORBA::Any &, Federated_Test::Control_ptr); // copying
TAO_RTEC_Perf_Export void operator<<= (::CORBA::Any &, Federated_Test::Control_ptr *); // non-copying
TAO_RTEC_Perf_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, Federated_Test::Control_ptr &);
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_interface/any_op_ch.cpp:41



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace Federated_Test
{
  TAO_RTEC_Perf_Export void operator<<= ( ::CORBA::Any &, Peer_ptr); // copying
  TAO_RTEC_Perf_Export void operator<<= ( ::CORBA::Any &, Peer_ptr *); // non-copying
  TAO_RTEC_Perf_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, Peer_ptr &);
}

#else


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_RTEC_Perf_Export void operator<<= (::CORBA::Any &, Federated_Test::Peer_ptr); // copying
TAO_RTEC_Perf_Export void operator<<= (::CORBA::Any &, Federated_Test::Peer_ptr *); // non-copying
TAO_RTEC_Perf_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, Federated_Test::Peer_ptr &);
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_interface/any_op_ch.cpp:41



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace Federated_Test
{
  TAO_RTEC_Perf_Export void operator<<= ( ::CORBA::Any &, Loopback_ptr); // copying
  TAO_RTEC_Perf_Export void operator<<= ( ::CORBA::Any &, Loopback_ptr *); // non-copying
  TAO_RTEC_Perf_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, Loopback_ptr &);
}

#else


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_RTEC_Perf_Export void operator<<= (::CORBA::Any &, Federated_Test::Loopback_ptr); // copying
TAO_RTEC_Perf_Export void operator<<= (::CORBA::Any &, Federated_Test::Loopback_ptr *); // non-copying
TAO_RTEC_Perf_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, Federated_Test::Loopback_ptr &);
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_interface/cdr_op_ch.cpp:41

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_RTEC_Perf_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const Federated_Test::Control_ptr );
TAO_RTEC_Perf_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, Federated_Test::Control_ptr &);

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_interface/cdr_op_ch.cpp:41

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_RTEC_Perf_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const Federated_Test::Peer_ptr );
TAO_RTEC_Perf_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, Federated_Test::Peer_ptr &);

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_interface/cdr_op_ch.cpp:41

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_RTEC_Perf_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const Federated_Test::Loopback_ptr );
TAO_RTEC_Perf_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, Federated_Test::Loopback_ptr &);

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_codegen.cpp:1700
#if defined (__ACE_INLINE__)
#include "Federated_TestC.inl"
#endif /* defined INLINE */

#include /**/ "ace/post.h"

#endif /* ifndef */

