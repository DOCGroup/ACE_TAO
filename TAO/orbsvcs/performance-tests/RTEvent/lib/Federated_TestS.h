// -*- C++ -*-
/**
 * Code generated by the The ACE ORB (TAO) IDL Compiler v2.4.1
 * TAO and the TAO IDL Compiler have been developed by:
 *       Center for Distributed Object Computing
 *       Washington University
 *       St. Louis, MO
 *       USA
 *       http://www.cs.wustl.edu/~schmidt/doc-center.html
 * and
 *       Distributed Object Computing Laboratory
 *       University of California at Irvine
 *       Irvine, CA
 *       USA
 * and
 *       Institute for Software Integrated Systems
 *       Vanderbilt University
 *       Nashville, TN
 *       USA
 *       http://www.isis.vanderbilt.edu/
 *
 * Information about TAO is available at:
 *     http://www.dre.vanderbilt.edu/~schmidt/TAO.html
 **/

// TAO_IDL - Generated from
// be/be_codegen.cpp:458

#ifndef _TAO_IDL_FEDERATED_TESTS_B3SHST_H_
#define _TAO_IDL_FEDERATED_TESTS_B3SHST_H_

#include /**/ "ace/pre.h"

#include "Federated_TestC.h"
#include "tao/ULongLongSeqS.h"
#include "tao/PortableServer/Basic_SArguments.h"
#include "tao/PortableServer/Special_Basic_SArguments.h"
#include "tao/PortableServer/Fixed_Size_SArgument_T.h"
#include "tao/PortableServer/Var_Size_SArgument_T.h"
#include "tao/PortableServer/Object_SArg_Traits.h"
#include "tao/PortableServer/UB_String_SArguments.h"
#include "tao/PortableServer/Object_SArg_Traits.h"
#include "tao/PortableServer/get_arg.h"
#include "tao/Special_Basic_Arguments.h"
#include "tao/UB_String_Arguments.h"

#if !defined (ACE_LACKS_PRAGMA_ONCE)
# pragma once
#endif /* ACE_LACKS_PRAGMA_ONCE */

#include "tao/PortableServer/PortableServer.h"
#include "tao/PortableServer/Servant_Base.h"

// TAO_IDL - Generated from
// be/be_visitor_arg_traits.cpp:66

TAO_BEGIN_VERSIONED_NAMESPACE_DECL


// Arg traits specializations.
namespace TAO
{

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:145

#if !defined (_FEDERATED_TEST_PEER__SARG_TRAITS_)
#define _FEDERATED_TEST_PEER__SARG_TRAITS_

  template<>
  class  SArg_Traits< ::Federated_Test::Peer>
    : public
        Object_SArg_Traits_T<
            ::Federated_Test::Peer_ptr,
            ::Federated_Test::Peer_var,
            ::Federated_Test::Peer_out,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:145

#if !defined (_FEDERATED_TEST_LOOPBACK__SARG_TRAITS_)
#define _FEDERATED_TEST_LOOPBACK__SARG_TRAITS_

  template<>
  class  SArg_Traits< ::Federated_Test::Loopback>
    : public
        Object_SArg_Traits_T<
            ::Federated_Test::Loopback_ptr,
            ::Federated_Test::Loopback_var,
            ::Federated_Test::Loopback_out,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:145

#if !defined (_FEDERATED_TEST_CONTROL__SARG_TRAITS_)
#define _FEDERATED_TEST_CONTROL__SARG_TRAITS_

  template<>
  class  SArg_Traits< ::Federated_Test::Control>
    : public
        Object_SArg_Traits_T<
            ::Federated_Test::Control_ptr,
            ::Federated_Test::Control_var,
            ::Federated_Test::Control_out,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

#endif /* end #if !defined */
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_module/module_sh.cpp:35

namespace POA_Federated_Test
{


  // TAO_IDL - Generated from
  // be/be_visitor_interface/interface_sh.cpp:73

  class Control;
  typedef Control *Control_ptr;

  class TAO_RTEC_Perf_Export Control
    : public virtual PortableServer::ServantBase
  {
  protected:
    Control (void);

  public:
    /// Useful for template programming.
    typedef ::Federated_Test::Control _stub_type;
    typedef ::Federated_Test::Control_ptr _stub_ptr_type;
    typedef ::Federated_Test::Control_var _stub_var_type;

    Control (const Control& rhs);
    virtual ~Control (void);

    virtual ::CORBA::Boolean _is_a (const char* logical_type_id);

    virtual void _dispatch (
        TAO_ServerRequest & req,
        TAO::Portable_Server::Servant_Upcall *servant_upcall);

    ::Federated_Test::Control *_this (void);

    virtual const char* _interface_repository_id (void) const;

    // TAO_IDL - Generated from
    // be/be_visitor_operation/operation_sh.cpp:36

    virtual void join (
      ::Federated_Test::Peer_ptr the_peer) = 0;

    static void join_skel (
        TAO_ServerRequest &server_request,
        TAO::Portable_Server::Servant_Upcall *servant_upcall,
        TAO_ServantBase *servant);
  };

  // TAO_IDL - Generated from
  // be/be_visitor_interface/interface_sh.cpp:73

  class Peer;
  typedef Peer *Peer_ptr;

  class TAO_RTEC_Perf_Export Peer
    : public virtual PortableServer::ServantBase
  {
  protected:
    Peer (void);

  public:
    /// Useful for template programming.
    typedef ::Federated_Test::Peer _stub_type;
    typedef ::Federated_Test::Peer_ptr _stub_ptr_type;
    typedef ::Federated_Test::Peer_var _stub_var_type;

    Peer (const Peer& rhs);
    virtual ~Peer (void);

    virtual ::CORBA::Boolean _is_a (const char* logical_type_id);

    virtual void _dispatch (
        TAO_ServerRequest & req,
        TAO::Portable_Server::Servant_Upcall *servant_upcall);

    ::Federated_Test::Peer *_this (void);

    virtual const char* _interface_repository_id (void) const;

    // TAO_IDL - Generated from
    // be/be_visitor_operation/operation_sh.cpp:36

    virtual void shutdown (
      void) = 0;

    static void shutdown_skel (
        TAO_ServerRequest &server_request,
        TAO::Portable_Server::Servant_Upcall *servant_upcall,
        TAO_ServantBase *servant);

    // TAO_IDL - Generated from
    // be/be_visitor_operation/operation_sh.cpp:36

    virtual ::Federated_Test::Loopback_ptr setup_loopback (
      ::CORBA::Long experiment_id,
      ::CORBA::Long base_event_type) = 0;

    static void setup_loopback_skel (
        TAO_ServerRequest &server_request,
        TAO::Portable_Server::Servant_Upcall *servant_upcall,
        TAO_ServantBase *servant);

    // TAO_IDL - Generated from
    // be/be_visitor_operation/operation_sh.cpp:36

    virtual ::Federated_Test::Experiment_Results * run_experiment (
      ::CORBA::Long experiment_id,
      ::CORBA::Long iterations) = 0;

    static void run_experiment_skel (
        TAO_ServerRequest &server_request,
        TAO::Portable_Server::Servant_Upcall *servant_upcall,
        TAO_ServantBase *servant);

    // TAO_IDL - Generated from
    // be/be_visitor_operation/operation_sh.cpp:36

    virtual ::CORBA::Object_ptr channel (
      void) = 0;

    static void _get_channel_skel (
        TAO_ServerRequest &server_request,
        TAO::Portable_Server::Servant_Upcall *servant_upcall,
        TAO_ServantBase *servant);

    // TAO_IDL - Generated from
    // be/be_visitor_operation/operation_sh.cpp:36

    virtual void connect (
      ::Federated_Test::Peer_ptr remote_peer) = 0;

    static void connect_skel (
        TAO_ServerRequest &server_request,
        TAO::Portable_Server::Servant_Upcall *servant_upcall,
        TAO_ServantBase *servant);
  };

  // TAO_IDL - Generated from
  // be/be_visitor_interface/interface_sh.cpp:73

  class Loopback;
  typedef Loopback *Loopback_ptr;

  class TAO_RTEC_Perf_Export Loopback
    : public virtual PortableServer::ServantBase
  {
  protected:
    Loopback (void);

  public:
    /// Useful for template programming.
    typedef ::Federated_Test::Loopback _stub_type;
    typedef ::Federated_Test::Loopback_ptr _stub_ptr_type;
    typedef ::Federated_Test::Loopback_var _stub_var_type;

    Loopback (const Loopback& rhs);
    virtual ~Loopback (void);

    virtual ::CORBA::Boolean _is_a (const char* logical_type_id);

    virtual void _dispatch (
        TAO_ServerRequest & req,
        TAO::Portable_Server::Servant_Upcall *servant_upcall);

    ::Federated_Test::Loopback *_this (void);

    virtual const char* _interface_repository_id (void) const;

    // TAO_IDL - Generated from
    // be/be_visitor_operation/operation_sh.cpp:36

    virtual void disconnect (
      void) = 0;

    static void disconnect_skel (
        TAO_ServerRequest &server_request,
        TAO::Portable_Server::Servant_Upcall *servant_upcall,
        TAO_ServantBase *servant);
  };

// TAO_IDL - Generated from
// be/be_visitor_module/module_sh.cpp:66

} // module Federated_Test

#include /**/ "ace/post.h"

#endif /* ifndef */

