// -*- C++ -*-
/**
 * Code generated by the The ACE ORB (TAO) IDL Compiler v2.4.1
 * TAO and the TAO IDL Compiler have been developed by:
 *       Center for Distributed Object Computing
 *       Washington University
 *       St. Louis, MO
 *       USA
 *       http://www.cs.wustl.edu/~schmidt/doc-center.html
 * and
 *       Distributed Object Computing Laboratory
 *       University of California at Irvine
 *       Irvine, CA
 *       USA
 * and
 *       Institute for Software Integrated Systems
 *       Vanderbilt University
 *       Nashville, TN
 *       USA
 *       http://www.isis.vanderbilt.edu/
 *
 * Information about TAO is available at:
 *     http://www.dre.vanderbilt.edu/~schmidt/TAO.html
 **/

// TAO_IDL - Generated from
// be/be_codegen.cpp:149

#ifndef _TAO_IDL_TESTC_7JUVM5_H_
#define _TAO_IDL_TESTC_7JUVM5_H_

#include /**/ "ace/pre.h"


#include /**/ "ace/config-all.h"

#if !defined (ACE_LACKS_PRAGMA_ONCE)
# pragma once
#endif /* ACE_LACKS_PRAGMA_ONCE */


#include "tao/AnyTypeCode/AnyTypeCode_methods.h"
#include "tao/AnyTypeCode/Any.h"
#include "tao/ORB.h"
#include "tao/SystemException.h"
#include "tao/Basic_Types.h"
#include "tao/ORB_Constants.h"
#include "tao/Object.h"
#include "tao/Objref_VarOut_T.h"
#include "tao/Arg_Traits_T.h"
#include "tao/Basic_Arguments.h"
#include "tao/Special_Basic_Arguments.h"
#include "tao/Any_Insert_Policy_T.h"
#include "tao/Fixed_Size_Argument_T.h"
#include "tao/Var_Size_Argument_T.h"
#include "tao/Object_Argument_T.h"
#include /**/ "tao/Version.h"
#include /**/ "tao/Versioned_Namespace.h"

#if TAO_MAJOR_VERSION != 2 || TAO_MINOR_VERSION != 4 || TAO_MICRO_VERSION != 1
#error This file should be regenerated with TAO_IDL
#endif

#if defined (TAO_EXPORT_MACRO)
#undef TAO_EXPORT_MACRO
#endif
#define TAO_EXPORT_MACRO

// TAO_IDL - Generated from
// be/be_visitor_root/root_ch.cpp:157
TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<typename T> class Narrow_Utils;
}
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_module/module_ch.cpp:35

namespace Test
{

  // TAO_IDL - Generated from
  // be/be_visitor_typedef/typedef_ch.cpp:370

  typedef ::CORBA::ULongLong Timestamp;
  typedef ::CORBA::ULongLong_out Timestamp_out;

  // TAO_IDL - Generated from
  // be/be_visitor_typecode/typecode_decl.cpp:34

  extern  ::CORBA::TypeCode_ptr const _tc_Timestamp;

  // TAO_IDL - Generated from
  // be/be_interface.cpp:748

#if !defined (_TEST_SESSION__VAR_OUT_CH_)
#define _TEST_SESSION__VAR_OUT_CH_

  class Session;
  typedef Session *Session_ptr;

  typedef
    TAO_Objref_Var_T<
        Session
      >
    Session_var;

  typedef
    TAO_Objref_Out_T<
        Session
      >
    Session_out;

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // be/be_interface.cpp:748

#if !defined (_TEST_CALLBACK__VAR_OUT_CH_)
#define _TEST_CALLBACK__VAR_OUT_CH_

  class Callback;
  typedef Callback *Callback_ptr;

  typedef
    TAO_Objref_Var_T<
        Callback
      >
    Callback_var;

  typedef
    TAO_Objref_Out_T<
        Callback
      >
    Callback_out;

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // be/be_interface.cpp:748

#if !defined (_TEST_SESSION_FACTORY__VAR_OUT_CH_)
#define _TEST_SESSION_FACTORY__VAR_OUT_CH_

  class Session_Factory;
  typedef Session_Factory *Session_Factory_ptr;

  typedef
    TAO_Objref_Var_T<
        Session_Factory
      >
    Session_Factory_var;

  typedef
    TAO_Objref_Out_T<
        Session_Factory
      >
    Session_Factory_out;

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // be/be_visitor_interface/interface_ch.cpp:40

  class  Session_Factory
    : public virtual ::CORBA::Object
  {
  public:
    friend class TAO::Narrow_Utils<Session_Factory>;

    // TAO_IDL - Generated from
    // be/be_type.cpp:304

    typedef Session_Factory_ptr _ptr_type;
    typedef Session_Factory_var _var_type;
    typedef Session_Factory_out _out_type;

    static void _tao_any_destructor (void *);

    // The static operations.
    static Session_Factory_ptr _duplicate (Session_Factory_ptr obj);

    static void _tao_release (Session_Factory_ptr obj);

    static Session_Factory_ptr _narrow (::CORBA::Object_ptr obj);
    static Session_Factory_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
    static Session_Factory_ptr _nil (void);

    virtual ::Test::Session_ptr create_new_session (
      ::Test::Callback_ptr the_callback);

    virtual void shutdown (
      void);

    // TAO_IDL - Generated from
    // be/be_visitor_interface/interface_ch.cpp:137

    virtual ::CORBA::Boolean _is_a (const char *type_id);
    virtual const char* _interface_repository_id (void) const;
    virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);

  protected:
    // Concrete interface only.
    Session_Factory (void);

    // Concrete non-local interface only.
    Session_Factory (
        ::IOP::IOR *ior,
        TAO_ORB_Core *orb_core);

    // Non-local interface only.
    Session_Factory (
        TAO_Stub *objref,
        ::CORBA::Boolean _tao_collocated = false,
        TAO_Abstract_ServantBase *servant = 0,
        TAO_ORB_Core *orb_core = 0);

    virtual ~Session_Factory (void);

  private:
    // Private and unimplemented for concrete interfaces.
    Session_Factory (const Session_Factory &);

    void operator= (const Session_Factory &);
  };

  // TAO_IDL - Generated from
  // be/be_visitor_typecode/typecode_decl.cpp:34

  extern  ::CORBA::TypeCode_ptr const _tc_Session_Factory;

  // TAO_IDL - Generated from
  // be/be_visitor_interface/interface_ch.cpp:40

  class  Session
    : public virtual ::CORBA::Object
  {
  public:
    friend class TAO::Narrow_Utils<Session>;

    // TAO_IDL - Generated from
    // be/be_type.cpp:304

    typedef Session_ptr _ptr_type;
    typedef Session_var _var_type;
    typedef Session_out _out_type;

    static void _tao_any_destructor (void *);

    // The static operations.
    static Session_ptr _duplicate (Session_ptr obj);

    static void _tao_release (Session_ptr obj);

    static Session_ptr _narrow (::CORBA::Object_ptr obj);
    static Session_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
    static Session_ptr _nil (void);

    virtual void sample (
      ::Test::Timestamp the_timestamp);

    virtual void shutdown (
      void);

    // TAO_IDL - Generated from
    // be/be_visitor_interface/interface_ch.cpp:137

    virtual ::CORBA::Boolean _is_a (const char *type_id);
    virtual const char* _interface_repository_id (void) const;
    virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);

  protected:
    // Concrete interface only.
    Session (void);

    // Concrete non-local interface only.
    Session (
        ::IOP::IOR *ior,
        TAO_ORB_Core *orb_core);

    // Non-local interface only.
    Session (
        TAO_Stub *objref,
        ::CORBA::Boolean _tao_collocated = false,
        TAO_Abstract_ServantBase *servant = 0,
        TAO_ORB_Core *orb_core = 0);

    virtual ~Session (void);

  private:
    // Private and unimplemented for concrete interfaces.
    Session (const Session &);

    void operator= (const Session &);
  };

  // TAO_IDL - Generated from
  // be/be_visitor_typecode/typecode_decl.cpp:34

  extern  ::CORBA::TypeCode_ptr const _tc_Session;

  // TAO_IDL - Generated from
  // be/be_visitor_interface/interface_ch.cpp:40

  class  Callback
    : public virtual ::CORBA::Object
  {
  public:
    friend class TAO::Narrow_Utils<Callback>;

    // TAO_IDL - Generated from
    // be/be_type.cpp:304

    typedef Callback_ptr _ptr_type;
    typedef Callback_var _var_type;
    typedef Callback_out _out_type;

    static void _tao_any_destructor (void *);

    // The static operations.
    static Callback_ptr _duplicate (Callback_ptr obj);

    static void _tao_release (Callback_ptr obj);

    static Callback_ptr _narrow (::CORBA::Object_ptr obj);
    static Callback_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
    static Callback_ptr _nil (void);

    virtual void sample (
      ::Test::Timestamp the_timestamp);

    // TAO_IDL - Generated from
    // be/be_visitor_interface/interface_ch.cpp:137

    virtual ::CORBA::Boolean _is_a (const char *type_id);
    virtual const char* _interface_repository_id (void) const;
    virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);

  protected:
    // Concrete interface only.
    Callback (void);

    // Concrete non-local interface only.
    Callback (
        ::IOP::IOR *ior,
        TAO_ORB_Core *orb_core);

    // Non-local interface only.
    Callback (
        TAO_Stub *objref,
        ::CORBA::Boolean _tao_collocated = false,
        TAO_Abstract_ServantBase *servant = 0,
        TAO_ORB_Core *orb_core = 0);

    virtual ~Callback (void);

  private:
    // Private and unimplemented for concrete interfaces.
    Callback (const Callback &);

    void operator= (const Callback &);
  };

  // TAO_IDL - Generated from
  // be/be_visitor_typecode/typecode_decl.cpp:34

  extern  ::CORBA::TypeCode_ptr const _tc_Callback;

// TAO_IDL - Generated from
// be/be_visitor_module/module_ch.cpp:64

} // module Test

// TAO_IDL - Generated from
// be/be_visitor_arg_traits.cpp:66

TAO_BEGIN_VERSIONED_NAMESPACE_DECL


// Arg traits specializations.
namespace TAO
{

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:145

#if !defined (_TEST_SESSION__ARG_TRAITS_)
#define _TEST_SESSION__ARG_TRAITS_

  template<>
  class  Arg_Traits< ::Test::Session>
    : public
        Object_Arg_Traits_T<
            ::Test::Session_ptr,
            ::Test::Session_var,
            ::Test::Session_out,
            TAO::Objref_Traits<Test::Session>,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:145

#if !defined (_TEST_CALLBACK__ARG_TRAITS_)
#define _TEST_CALLBACK__ARG_TRAITS_

  template<>
  class  Arg_Traits< ::Test::Callback>
    : public
        Object_Arg_Traits_T<
            ::Test::Callback_ptr,
            ::Test::Callback_var,
            ::Test::Callback_out,
            TAO::Objref_Traits<Test::Callback>,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:145

#if !defined (_TEST_SESSION_FACTORY__ARG_TRAITS_)
#define _TEST_SESSION_FACTORY__ARG_TRAITS_

  template<>
  class  Arg_Traits< ::Test::Session_Factory>
    : public
        Object_Arg_Traits_T<
            ::Test::Session_Factory_ptr,
            ::Test::Session_Factory_var,
            ::Test::Session_Factory_out,
            TAO::Objref_Traits<Test::Session_Factory>,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

#endif /* end #if !defined */
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_traits.cpp:60

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Traits specializations.
namespace TAO
{

#if !defined (_TEST_SESSION_FACTORY__TRAITS_)
#define _TEST_SESSION_FACTORY__TRAITS_

  template<>
  struct  Objref_Traits< ::Test::Session_Factory>
  {
    static ::Test::Session_Factory_ptr duplicate (
        ::Test::Session_Factory_ptr p);
    static void release (
        ::Test::Session_Factory_ptr p);
    static ::Test::Session_Factory_ptr nil (void);
    static ::CORBA::Boolean marshal (
        const ::Test::Session_Factory_ptr p,
        TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_TEST_SESSION__TRAITS_)
#define _TEST_SESSION__TRAITS_

  template<>
  struct  Objref_Traits< ::Test::Session>
  {
    static ::Test::Session_ptr duplicate (
        ::Test::Session_ptr p);
    static void release (
        ::Test::Session_ptr p);
    static ::Test::Session_ptr nil (void);
    static ::CORBA::Boolean marshal (
        const ::Test::Session_ptr p,
        TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_TEST_CALLBACK__TRAITS_)
#define _TEST_CALLBACK__TRAITS_

  template<>
  struct  Objref_Traits< ::Test::Callback>
  {
    static ::Test::Callback_ptr duplicate (
        ::Test::Callback_ptr p);
    static void release (
        ::Test::Callback_ptr p);
    static ::Test::Callback_ptr nil (void);
    static ::CORBA::Boolean marshal (
        const ::Test::Callback_ptr p,
        TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */
}
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_interface/any_op_ch.cpp:41



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace Test
{
   void operator<<= ( ::CORBA::Any &, Session_Factory_ptr); // copying
   void operator<<= ( ::CORBA::Any &, Session_Factory_ptr *); // non-copying
   ::CORBA::Boolean operator>>= (const ::CORBA::Any &, Session_Factory_ptr &);
}

#else


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 void operator<<= (::CORBA::Any &, Test::Session_Factory_ptr); // copying
 void operator<<= (::CORBA::Any &, Test::Session_Factory_ptr *); // non-copying
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, Test::Session_Factory_ptr &);
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_interface/any_op_ch.cpp:41



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace Test
{
   void operator<<= ( ::CORBA::Any &, Session_ptr); // copying
   void operator<<= ( ::CORBA::Any &, Session_ptr *); // non-copying
   ::CORBA::Boolean operator>>= (const ::CORBA::Any &, Session_ptr &);
}

#else


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 void operator<<= (::CORBA::Any &, Test::Session_ptr); // copying
 void operator<<= (::CORBA::Any &, Test::Session_ptr *); // non-copying
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, Test::Session_ptr &);
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_interface/any_op_ch.cpp:41



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace Test
{
   void operator<<= ( ::CORBA::Any &, Callback_ptr); // copying
   void operator<<= ( ::CORBA::Any &, Callback_ptr *); // non-copying
   ::CORBA::Boolean operator>>= (const ::CORBA::Any &, Callback_ptr &);
}

#else


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 void operator<<= (::CORBA::Any &, Test::Callback_ptr); // copying
 void operator<<= (::CORBA::Any &, Test::Callback_ptr *); // non-copying
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, Test::Callback_ptr &);
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_interface/cdr_op_ch.cpp:41

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 ::CORBA::Boolean operator<< (TAO_OutputCDR &, const Test::Session_Factory_ptr );
 ::CORBA::Boolean operator>> (TAO_InputCDR &, Test::Session_Factory_ptr &);

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_interface/cdr_op_ch.cpp:41

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 ::CORBA::Boolean operator<< (TAO_OutputCDR &, const Test::Session_ptr );
 ::CORBA::Boolean operator>> (TAO_InputCDR &, Test::Session_ptr &);

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_interface/cdr_op_ch.cpp:41

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 ::CORBA::Boolean operator<< (TAO_OutputCDR &, const Test::Callback_ptr );
 ::CORBA::Boolean operator>> (TAO_InputCDR &, Test::Callback_ptr &);

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_codegen.cpp:1700
#if defined (__ACE_INLINE__)
#include "TestC.inl"
#endif /* defined INLINE */

#include /**/ "ace/post.h"

#endif /* ifndef */

