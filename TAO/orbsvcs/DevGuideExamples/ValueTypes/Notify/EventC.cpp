// -*- C++ -*-
/**
 * Code generated by the The ACE ORB (TAO) IDL Compiler v2.4.1
 * TAO and the TAO IDL Compiler have been developed by:
 *       Center for Distributed Object Computing
 *       Washington University
 *       St. Louis, MO
 *       USA
 *       http://www.cs.wustl.edu/~schmidt/doc-center.html
 * and
 *       Distributed Object Computing Laboratory
 *       University of California at Irvine
 *       Irvine, CA
 *       USA
 * and
 *       Institute for Software Integrated Systems
 *       Vanderbilt University
 *       Nashville, TN
 *       USA
 *       http://www.isis.vanderbilt.edu/
 *
 * Information about TAO is available at:
 *     http://www.dre.vanderbilt.edu/~schmidt/TAO.html
 **/

// TAO_IDL - Generated from
// be/be_codegen.cpp:373


#include "EventC.h"
#include "tao/AnyTypeCode/Null_RefCount_Policy.h"
#include "tao/AnyTypeCode/TypeCode_Constants.h"
#include "tao/AnyTypeCode/Alias_TypeCode_Static.h"
#include "tao/AnyTypeCode/String_TypeCode_Static.h"
#include "tao/AnyTypeCode/Value_TypeCode_Static.h"
#include "tao/AnyTypeCode/TypeCode_Value_Field.h"
#include "tao/CDR.h"
#include "tao/Valuetype/ValueFactory.h"
#include "tao/CDR.h"
#include "tao/AnyTypeCode/Any.h"
#include "tao/AnyTypeCode/Any_Impl_T.h"

#if !defined (__ACE_INLINE__)
#include "EventC.inl"
#endif /* !defined INLINE */

// TAO_IDL - Generated from
// be/be_visitor_typecode/value_typecode.cpp:65



// TAO_IDL - Generated from
// be/be_visitor_typecode/typecode_defn.cpp:461

static TAO::TypeCode::Value_Field<char const *, ::CORBA::TypeCode_ptr const *> const _tao_fields_MyEvent[] =
  {
    { "name", &CORBA::_tc_string, ::CORBA::PUBLIC_MEMBER },
    { "kind", &CORBA::_tc_long, ::CORBA::PUBLIC_MEMBER },
    { "payload", &CORBA::_tc_LongSeq, ::CORBA::PRIVATE_MEMBER }

  };
static TAO::TypeCode::Value<char const *,
                     ::CORBA::TypeCode_ptr const *,
                     TAO::TypeCode::Value_Field<char const *, ::CORBA::TypeCode_ptr const *> const *,
                     TAO::Null_RefCount_Policy>
  _tao_tc_MyEvent (
    ::CORBA::tk_value,
    "IDL:MyEvent:1.0",
    "MyEvent",
    ::CORBA::VM_NONE,
    &::CORBA::_tc_null,
    _tao_fields_MyEvent,
    3);

::CORBA::TypeCode_ptr const _tc_MyEvent =
  &_tao_tc_MyEvent;

// TAO_IDL - Generated from
// be/be_visitor_valuetype/valuetype_cs.cpp:53

void
TAO::Value_Traits<MyEvent>::add_ref (
    MyEvent * p)
{
  ::CORBA::add_ref (p);
}

void
TAO::Value_Traits<MyEvent>::remove_ref (
    MyEvent * p)
{
  ::CORBA::remove_ref (p);
}

void
TAO::Value_Traits<MyEvent>::release (
    MyEvent * p)
{
  ::CORBA::remove_ref (p);
}

MyEvent *
MyEvent::_downcast ( ::CORBA::ValueBase *v)
{
  return dynamic_cast< ::MyEvent * > (v);
}

const char *
MyEvent::_tao_obv_repository_id (void) const
{
  return this->_tao_obv_static_repository_id ();
}

void
MyEvent::_tao_obv_truncatable_repo_ids (Repository_Id_List& ids) const
{
  ids.push_back (this->_tao_obv_static_repository_id ());
}

void
MyEvent::_tao_any_destructor (void *_tao_void_pointer)
{
  MyEvent *_tao_tmp_pointer =
    static_cast<MyEvent *> (_tao_void_pointer);
  ::CORBA::remove_ref (_tao_tmp_pointer);
}

// TAO extension - the virtual _type method.
::CORBA::TypeCode_ptr MyEvent::_tao_type (void) const
{
  return ::_tc_MyEvent;
}

MyEvent::~MyEvent (void)
{}

::CORBA::Boolean
MyEvent::_tao_marshal_v (TAO_OutputCDR & strm) const
{
  TAO_ChunkInfo ci (this->is_truncatable_ || this->chunking_);
  return this->_tao_marshal__MyEvent (strm, ci);
}

::CORBA::Boolean
MyEvent::_tao_unmarshal_v (TAO_InputCDR & strm)
{
  TAO_ChunkInfo ci (this->is_truncatable_ || this->chunking_, 1);
  return this->_tao_unmarshal__MyEvent (strm,ci);
}

::CORBA::Boolean
MyEvent::_tao_match_formal_type (ptrdiff_t formal_type_id) const
{
  return formal_type_id == reinterpret_cast<ptrdiff_t> (MyEvent::_downcast);
}

::CORBA::Boolean
MyEvent::_tao_unmarshal (
    TAO_InputCDR &strm,
    MyEvent *&new_object
  )
{
  ::CORBA::ValueBase *base = 0;
  ::CORBA::Boolean is_indirected = false;
  ::CORBA::Boolean is_null_object = false;
  ::CORBA::Boolean const retval =
    ::CORBA::ValueBase::_tao_unmarshal_pre (
        strm,
        base,
        MyEvent::_tao_obv_static_repository_id (),
        is_null_object,
        is_indirected
      );

  ::CORBA::ValueBase_var owner (base);

  if (!retval)
    return false;

  if (is_null_object)
    return true;

  if (!is_indirected && !base->_tao_unmarshal_v (strm))
    return false;

  // Now base must point to the unmarshaled object.
  // Align the pointer to the right subobject.
  new_object = MyEvent::_downcast (base);
  if (0 == new_object)
    return false;

  if (is_indirected)
    new_object->_add_ref ();

  owner._retn ();
  return true;
}

// TAO_IDL - Generated from
// be/be_visitor_valuetype/valuetype_obv_cs.cpp:44

OBV_MyEvent::OBV_MyEvent (void)
: require_truncation_ (false)
{}

OBV_MyEvent::OBV_MyEvent (
    const char * _tao_init_name,
    ::CORBA::Long _tao_init_kind,
    const ::CORBA::LongSeq & _tao_init_payload)
: require_truncation_ (false)
{
  name (_tao_init_name);
  kind (_tao_init_kind);
  payload (_tao_init_payload);
}

OBV_MyEvent::~OBV_MyEvent (void)
{}

::CORBA::Boolean
OBV_MyEvent::_tao_marshal__MyEvent (TAO_OutputCDR &strm, TAO_ChunkInfo& ci) const
{
  return _tao_marshal_state (strm, ci);
}

::CORBA::Boolean
OBV_MyEvent::_tao_unmarshal__MyEvent (TAO_InputCDR &strm, TAO_ChunkInfo& ci)
{
  return _tao_unmarshal_state (strm, ci);
}

// TAO_IDL - Generated from
// be/be_visitor_valuetype/field_cs.cpp:834

/// Accessor to set the member.
void
OBV_MyEvent::name (char *val)
{
  this->_pd_name = (val);
}

/// Accessor to set the member.
void
OBV_MyEvent::name (const char *val)
{
  // Set the value.
  this->_pd_name = ::CORBA::string_dup (val);
}

/// Accessor to set the member.
void
OBV_MyEvent::name (const ::CORBA::String_var &val)
{
  ::CORBA::String_var name_var = val;
  this->_pd_name = name_var._retn ();
}

const char *
OBV_MyEvent::name (void) const // get method
{
  return this->_pd_name;
}

// TAO_IDL - Generated from
// be/be_visitor_valuetype/field_cs.cpp:587

/// Accessor to set the member.
void
OBV_MyEvent::kind (const CORBA::Long val)
{
  // Set the value.
  this->_pd_kind = val;
}

// Retrieve the member
::CORBA::Long
OBV_MyEvent::kind (void) const
{
  return this->_pd_kind;
}

// TAO_IDL - Generated from
// be/be_visitor_valuetype/field_cs.cpp:762

/// Accessor to set the member.
void
OBV_MyEvent::payload (const CORBA::LongSeq &val)
{
  this->_pd_payload = val;
}

/// Readonly get method.
const CORBA::LongSeq &
OBV_MyEvent::payload (void) const
{
  return this->_pd_payload;
}

/// Read/write get method.
CORBA::LongSeq &
OBV_MyEvent::payload (void)
{
  return this->_pd_payload;
}

// TAO_IDL - Generated from
// be/be_visitor_valuetype/any_op_cs.cpp:45
TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<MyEvent>::to_value (
      ::CORBA::ValueBase *&_tao_elem
    ) const
  {
    ::CORBA::add_ref (this->value_);
    _tao_elem = this->value_;
    return true;
  }
}


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    MyEvent *_tao_elem
  )
{
  #ifdef TAO_VALUETYPE_COPYING_ANY_INSERTION_USES_COPY_VALUE
    MyEvent *_tao_copy =
      _tao_elem ?
        MyEvent::_downcast (_tao_elem->_copy_value ())
        : 0;
    _tao_any <<= &_tao_copy;
  #else
    ::CORBA::add_ref (_tao_elem);
    _tao_any <<= &_tao_elem;
  #endif
}

// Non-copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    MyEvent **_tao_elem
  )
{
  TAO::Any_Impl_T<MyEvent>::insert (
      _tao_any,
      MyEvent::_tao_any_destructor,
      _tc_MyEvent,
      *_tao_elem
    );
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    MyEvent *&_tao_elem
  )
{
  return
    TAO::Any_Impl_T<MyEvent>::extract (
        _tao_any,
        MyEvent::_tao_any_destructor,
        _tc_MyEvent,
        _tao_elem
      );
}


TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_valuetype.cpp:512

void
CORBA::add_ref (MyEvent * vt)
{
  if (vt != 0)
    {
      vt->_add_ref ();
    }
}

void
CORBA::remove_ref (MyEvent * vt)
{
  if (vt != 0)
    {
      vt->_remove_ref ();
    }
}

// TAO_IDL - Generated from
// be/be_visitor_valuetype/cdr_op_cs.cpp:60


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean
operator<< (
    TAO_OutputCDR &strm,
    const MyEvent *_tao_valuetype
  )
{
  return
    ::CORBA::ValueBase::_tao_marshal (
        strm,
        _tao_valuetype,
        reinterpret_cast<ptrdiff_t> (&MyEvent::_downcast)
      );
}

::CORBA::Boolean
operator>> (
    TAO_InputCDR &strm,
    MyEvent *&_tao_valuetype
  )
{
  return MyEvent::_tao_unmarshal (strm, _tao_valuetype);
}


TAO_END_VERSIONED_NAMESPACE_DECL

// TAO_IDL - Generated from
// be/be_visitor_valuetype/marshal_cs.cpp:33

::CORBA::Boolean
OBV_MyEvent::_tao_marshal_state (TAO_OutputCDR &strm, TAO_ChunkInfo&ci) const
{
  if (! ci.start_chunk (strm))
    return false;

  CORBA::Boolean const ret =
      (strm << _pd_name.in ()) &&
      (strm << _pd_kind) &&
      (strm << _pd_payload);
  if ( ! ret)
    return false;

  if (! ci.end_chunk (strm))
    return false;

  return true;
}

::CORBA::Boolean
OBV_MyEvent::_tao_unmarshal_state (TAO_InputCDR &strm, TAO_ChunkInfo&ci)
{
  if (!ci.handle_chunking (strm))
    return false;

  CORBA::Boolean const ret =
      (strm >> _pd_name.out ()) &&
      (strm >> _pd_kind) &&
      (strm >> _pd_payload);
  if (!ret)
    return false;

  if (this->require_truncation_)
    return ci.skip_chunks (strm);

  else
    return ci.handle_chunking (strm);


}

void
OBV_MyEvent::truncation_hook (void)
{
  this->require_truncation_ = true;
}



