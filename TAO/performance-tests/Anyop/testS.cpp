// -*- C++ -*-
/**
 * Code generated by the The ACE ORB (TAO) IDL Compiler v2.4.1
 * TAO and the TAO IDL Compiler have been developed by:
 *       Center for Distributed Object Computing
 *       Washington University
 *       St. Louis, MO
 *       USA
 *       http://www.cs.wustl.edu/~schmidt/doc-center.html
 * and
 *       Distributed Object Computing Laboratory
 *       University of California at Irvine
 *       Irvine, CA
 *       USA
 * and
 *       Institute for Software Integrated Systems
 *       Vanderbilt University
 *       Nashville, TN
 *       USA
 *       http://www.isis.vanderbilt.edu/
 *
 * Information about TAO is available at:
 *     http://www.dre.vanderbilt.edu/~schmidt/TAO.html
 **/


// TAO_IDL - Generated from
// be/be_codegen.cpp:649

#ifndef _TAO_IDL_TESTS_CTPXEW_CPP_
#define _TAO_IDL_TESTS_CTPXEW_CPP_


#include "testS.h"
#include "tao/PortableServer/Operation_Table_Perfect_Hash.h"
#include "tao/PortableServer/Upcall_Command.h"
#include "tao/PortableServer/Upcall_Wrapper.h"
#include "tao/TAO_Server_Request.h"
#include "tao/ORB_Core.h"
#include "tao/Profile.h"
#include "tao/Stub.h"
#include "tao/IFR_Client_Adapter.h"
#include "tao/Object_T.h"
#include "tao/AnyTypeCode/TypeCode.h"
#include "tao/AnyTypeCode/DynamicC.h"
#include "tao/CDR.h"
#include "tao/operation_details.h"
#include "tao/PortableInterceptor.h"
#include "ace/Dynamic_Service.h"
#include "ace/Malloc_Allocator.h"

// TAO_IDL - Generated from
// be/be_interface.cpp:1865

class TAO_Coffee_Perfect_Hash_OpTable
  : public TAO_Perfect_Hash_OpTable
{
private:
  unsigned int hash (const char *str, unsigned int len);

public:
  const TAO_operation_db_entry * lookup (const char *str, unsigned int len);
};

/* C++ code produced by gperf version 2.8 (ACE version) */
/* Command-line: /mnt/win_d/projects/ATCD/ACE/bin/ace_gperf -m -M -J -c -C -D -E -T -f 0 -F 0,0 -a -o -t -p -K opname -L C++ -Z TAO_Coffee_Perfect_Hash_OpTable -N lookup  */
unsigned int
TAO_Coffee_Perfect_Hash_OpTable::hash (const char *str, unsigned int len)
{
  static const unsigned char asso_values[] =
    {
     17, 17, 17, 17, 17, 17, 17, 17, 17, 17,
     17, 17, 17, 17, 17, 17, 17, 17, 17, 17,
     17, 17, 17, 17, 17, 17, 17, 17, 17, 17,
     17, 17, 17, 17, 17, 17, 17, 17, 17, 17,
     17, 17, 17, 17, 17, 17, 17, 17, 17, 17,
     17, 17, 17, 17, 17, 17, 17, 17, 17, 17,
     17, 17, 17, 17, 17, 17, 17, 17, 17, 17,
     17, 17, 17, 17, 17, 17, 17, 17, 17, 17,
     17, 17, 17, 17, 17, 17, 17, 17, 17, 17,
     17, 17, 17, 17, 17,  0, 17,  0, 17, 17,
      0,  5, 17, 17, 17, 17, 17, 17, 17, 17,
      0, 17, 17, 17, 17, 17,  0, 17, 17, 17,
     17, 17, 17, 17, 17, 17, 17, 17,
    };
  return len + asso_values[static_cast<int>(str[len - 1])] + asso_values[static_cast<int>(str[0])];
}

const TAO_operation_db_entry *
TAO_Coffee_Perfect_Hash_OpTable::lookup (const char *str, unsigned int len)
{
  enum
    {
      TOTAL_KEYWORDS = 7,
      MIN_WORD_LENGTH = 5,
      MAX_WORD_LENGTH = 16,
      MIN_HASH_VALUE = 5,
      MAX_HASH_VALUE = 16,
      HASH_VALUE_RANGE = 12,
      DUPLICATES = 2,
      WORDLIST_SIZE = 12
    };

  static const TAO_operation_db_entry wordlist[] =
    {
      {"",0,0},{"",0,0},{"",0,0},{"",0,0},{"",0,0},
      {"_is_a", &TAO_ServantBase::_is_a_thru_poa_skel, 0},
      {"_component", &TAO_ServantBase::_component_thru_poa_skel, 0},
      {"_non_existent", &TAO_ServantBase::_non_existent_thru_poa_skel, 0},
      {"_repository_id", &TAO_ServantBase::_repository_id_thru_poa_skel, 0},
      {"_interface", &TAO_ServantBase::_interface_skel, 0},
      {"_get_description", &POA_Coffee::_get_description_skel, 0},
      {"_set_description", &POA_Coffee::_set_description_skel, 0},
    };

  static const signed char lookup[] =
    {
       -1,  -1,  -1,  -1,  -1,   5,  -1,  -1,  -1,  -1,   6, -10,  -2,   7,
        8,   9, -21,
    };

  if (len <= MAX_WORD_LENGTH && len >= MIN_WORD_LENGTH)
    {
      unsigned int key = hash (str, len);

      if (key <= MAX_HASH_VALUE && key >= MIN_HASH_VALUE)
        {
          int slot = lookup[key];

          if (slot >= 0 && slot < WORDLIST_SIZE)
            {
              const char *s = wordlist[slot].opname;

              if (*str == *s && !ACE_OS::strncmp (str + 1, s + 1, len - 1))
                return &wordlist[slot];
            }
          else if (slot < 0 && slot >= -MAX_HASH_VALUE)
            return 0;
          else
            {
              unsigned int offset = key + slot + (slot > 0 ? -MAX_HASH_VALUE : MAX_HASH_VALUE);
              const TAO_operation_db_entry *base = &wordlist[-lookup[offset]];
              const TAO_operation_db_entry *ptr = base + -lookup[offset + 1];

              while (--ptr >= base)
                if (*str == *ptr->opname && !ACE_OS::strncmp (str + 1, ptr->opname + 1, len - 1))
                  return ptr;
            }
        }
    }
  return 0;
}

static TAO_Coffee_Perfect_Hash_OpTable tao_Coffee_optable;

// TAO_IDL - Generated from
// be/be_visitor_interface/interface_ss.cpp:90

POA_Coffee::POA_Coffee (void)
  : TAO_ServantBase ()
{
  this->optable_ = &tao_Coffee_optable;
}

POA_Coffee::POA_Coffee (const POA_Coffee& rhs)
  : TAO_Abstract_ServantBase (rhs),
    TAO_ServantBase (rhs)
{
}

POA_Coffee::~POA_Coffee (void)
{
}


// TAO_IDL - Generated from
// be/be_visitor_operation/upcall_command_ss.cpp:80

class _get_description_Coffee
  : public TAO::Upcall_Command
{
public:
  inline _get_description_Coffee (
    POA_Coffee * servant,
    TAO_Operation_Details const * operation_details,
    TAO::Argument * const args[])
    : servant_ (servant)
      , operation_details_ (operation_details)
      , args_ (args)
  {
  }

  virtual void execute (void)
  {
    TAO::SArg_Traits< ::Coffee::Desc>::ret_arg_type retval =
      TAO::Portable_Server::get_ret_arg< ::Coffee::Desc> (
        this->operation_details_,
        this->args_);

    retval =
      this->servant_->description ();
  }

private:
  POA_Coffee * const servant_;
  TAO_Operation_Details const * const operation_details_;
  TAO::Argument * const * const args_;
};

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_ss.cpp:168

void POA_Coffee::_get_description_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::Coffee::Desc>::ret_val retval;

  TAO::Argument * const args[] =
    {
      &retval
    };

  static size_t const nargs = 1;

  POA_Coffee * const impl =
    dynamic_cast<POA_Coffee *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  _get_description_Coffee command (
    impl,
    server_request.operation_details (),
    args);

  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}



// TAO_IDL - Generated from
// be/be_visitor_operation/upcall_command_ss.cpp:80

class _set_description_Coffee
  : public TAO::Upcall_Command
{
public:
  inline _set_description_Coffee (
    POA_Coffee * servant,
    TAO_Operation_Details const * operation_details,
    TAO::Argument * const args[])
    : servant_ (servant)
      , operation_details_ (operation_details)
      , args_ (args)
  {
  }

  virtual void execute (void)
  {
    TAO::SArg_Traits< ::Coffee::Desc>::in_arg_type arg_1 =
      TAO::Portable_Server::get_in_arg< ::Coffee::Desc> (
        this->operation_details_,
        this->args_,
        1);

    this->servant_->description (
      arg_1);
  }

private:
  POA_Coffee * const servant_;
  TAO_Operation_Details const * const operation_details_;
  TAO::Argument * const * const args_;
};

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_ss.cpp:168

void POA_Coffee::_set_description_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< void>::ret_val retval;
  TAO::SArg_Traits< ::Coffee::Desc>::in_arg_val _tao_description;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_description
    };

  static size_t const nargs = 2;

  POA_Coffee * const impl =
    dynamic_cast<POA_Coffee *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  _set_description_Coffee command (
    impl,
    server_request.operation_details (),
    args);

  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}



// TAO_IDL - Generated from
// be/be_visitor_interface/interface_ss.cpp:163



::CORBA::Boolean POA_Coffee::_is_a (const char* value)
{
  return
    (
      ACE_OS::strcmp (
          value,
          "IDL:Coffee:1.0"
        ) == 0 ||
      !ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        )
    );
}

const char* POA_Coffee::_interface_repository_id (void) const
{
  return "IDL:Coffee:1.0";
}

// TAO_IDL - Generated from
// be/be_visitor_interface/interface_ss.cpp:423

void POA_Coffee::_dispatch (
  TAO_ServerRequest & req,
  TAO::Portable_Server::Servant_Upcall* servant_upcall)
{
  this->synchronous_upcall_dispatch (req, servant_upcall, this);
}

// TAO_IDL - Generated from
// be/be_visitor_interface/interface_ss.cpp:370

Coffee *
POA_Coffee::_this (void)
{
  TAO_Stub *stub = this->_create_stub ();

  TAO_Stub_Auto_Ptr safe_stub (stub);
  ::CORBA::Object_ptr tmp = CORBA::Object_ptr ();

  ::CORBA::Boolean const _tao_opt_colloc =
    stub->servant_orb_var ()->orb_core ()->optimize_collocation_objects ();

  ACE_NEW_RETURN (
      tmp,
      ::CORBA::Object (stub, _tao_opt_colloc, this),
      0);

  ::CORBA::Object_var obj = tmp;
  (void) safe_stub.release ();

  typedef ::Coffee STUB_SCOPED_NAME;
  return
    TAO::Narrow_Utils<STUB_SCOPED_NAME>::unchecked_narrow (
        obj.in ());
}

// TAO_IDL - Generated from
// be/be_interface.cpp:1865

class TAO_Param_Test_Perfect_Hash_OpTable
  : public TAO_Perfect_Hash_OpTable
{
private:
  unsigned int hash (const char *str, unsigned int len);

public:
  const TAO_operation_db_entry * lookup (const char *str, unsigned int len);
};

/* C++ code produced by gperf version 2.8 (ACE version) */
/* Command-line: /mnt/win_d/projects/ATCD/ACE/bin/ace_gperf -m -M -J -c -C -D -E -T -f 0 -F 0,0 -a -o -t -p -K opname -L C++ -Z TAO_Param_Test_Perfect_Hash_OpTable -N lookup  */
unsigned int
TAO_Param_Test_Perfect_Hash_OpTable::hash (const char *str, unsigned int len)
{
  static const unsigned char asso_values[] =
    {
     66, 66, 66, 66, 66, 66, 66, 66, 66, 66,
     66, 66, 66, 66, 66, 66, 66, 66, 66, 66,
     66, 66, 66, 66, 66, 66, 66, 66, 66, 66,
     66, 66, 66, 66, 66, 66, 66, 66, 66, 66,
     66, 66, 66, 66, 66, 66, 66, 66, 66, 66,
     66, 66, 66, 66, 66, 66, 66, 66, 66, 66,
     66, 66, 66, 66, 66, 66, 66, 66, 66, 66,
     66, 66, 66, 66, 66, 66, 66, 66, 66, 66,
     66, 66, 66, 66, 66, 66, 66, 66, 66, 66,
     66, 66, 66, 66, 66, 45, 66,  0, 66, 66,
      0, 10,  5, 25, 66, 66, 66, 66, 66,  5,
     40, 66, 66,  0, 66, 66,  0, 66, 66, 66,
      0, 35, 66, 66, 66, 66, 66, 66,
    };
  return len + asso_values[static_cast<int>(str[len - 1])] + asso_values[static_cast<int>(str[0])];
}

const TAO_operation_db_entry *
TAO_Param_Test_Perfect_Hash_OpTable::lookup (const char *str, unsigned int len)
{
  enum
    {
      TOTAL_KEYWORDS = 44,
      MIN_WORD_LENGTH = 5,
      MAX_WORD_LENGTH = 30,
      MIN_HASH_VALUE = 10,
      MAX_HASH_VALUE = 65,
      HASH_VALUE_RANGE = 56,
      DUPLICATES = 7,
      WORDLIST_SIZE = 54
    };

  static const TAO_operation_db_entry wordlist[] =
    {
      {"",0,0},{"",0,0},{"",0,0},{"",0,0},{"",0,0},{"",0,0},{"",0,0},{"",0,0},{"",0,0},
      {"",0,0},
      {"test_short", &POA_Param_Test::test_short_skel, 0},
      {"test_strseq", &POA_Param_Test::test_strseq_skel, 0},
      {"test_anyseq", &POA_Param_Test::test_anyseq_skel, 0},
      {"test_wstrseq", &POA_Param_Test::test_wstrseq_skel, 0},
      {"test_coffe_mix", &POA_Param_Test::test_coffe_mix_skel, 0},
      {"test_var_struct", &POA_Param_Test::test_var_struct_skel, 0},
      {"test_objref", &POA_Param_Test::test_objref_skel, 0},
      {"test_fixed_struct", &POA_Param_Test::test_fixed_struct_skel, 0},
      {"test_nested_struct", &POA_Param_Test::test_nested_struct_skel, 0},
      {"test_objref_struct", &POA_Param_Test::test_objref_struct_skel, 0},
      {"test_bounded_strseq", &POA_Param_Test::test_bounded_strseq_skel, 0},
      {"test_bounded_wstrseq", &POA_Param_Test::test_bounded_wstrseq_skel, 0},
      {"test_recursive_struct", &POA_Param_Test::test_recursive_struct_skel, 0},
      {"test_bounded_coffe_mix", &POA_Param_Test::test_bounded_coffe_mix_skel, 0},
      {"test_typecode", &POA_Param_Test::test_typecode_skel, 0},
      {"make_coffee", &POA_Param_Test::make_coffee_skel, 0},
      {"test_long_sequence", &POA_Param_Test::test_long_sequence_skel, 0},
      {"test_short_sequence", &POA_Param_Test::test_short_sequence_skel, 0},
      {"test_array_sequence", &POA_Param_Test::test_array_sequence_skel, 0},
      {"test_struct_sequence", &POA_Param_Test::test_struct_sequence_skel, 0},
      {"test_bounded_long_sequence", &POA_Param_Test::test_bounded_long_sequence_skel, 0},
      {"test_bounded_short_sequence", &POA_Param_Test::test_bounded_short_sequence_skel, 0},
      {"test_bounded_array_sequence", &POA_Param_Test::test_bounded_array_sequence_skel, 0},
      {"test_bounded_struct_sequence", &POA_Param_Test::test_bounded_struct_sequence_skel, 0},
      {"test_ulonglong", &POA_Param_Test::test_ulonglong_skel, 0},
      {"test_unbounded_struct_sequence", &POA_Param_Test::test_unbounded_struct_sequence_skel, 0},
      {"test_any", &POA_Param_Test::test_any_skel, 0},
      {"test_bounded_string", &POA_Param_Test::test_bounded_string_skel, 0},
      {"test_bounded_wstring", &POA_Param_Test::test_bounded_wstring_skel, 0},
      {"test_unbounded_string", &POA_Param_Test::test_unbounded_string_skel, 0},
      {"test_unbounded_wstring", &POA_Param_Test::test_unbounded_wstring_skel, 0},
      {"test_var_array", &POA_Param_Test::test_var_array_skel, 0},
      {"_is_a", &TAO_ServantBase::_is_a_thru_poa_skel, 0},
      {"test_fixed_array", &POA_Param_Test::test_fixed_array_skel, 0},
      {"test_complex_any", &POA_Param_Test::test_complex_any_skel, 0},
      {"test_multdim_array", &POA_Param_Test::test_multdim_array_skel, 0},
      {"test_exception", &POA_Param_Test::test_exception_skel, 0},
      {"test_big_union", &POA_Param_Test::test_big_union_skel, 0},
      {"_component", &TAO_ServantBase::_component_thru_poa_skel, 0},
      {"test_small_union", &POA_Param_Test::test_small_union_skel, 0},
      {"_non_existent", &TAO_ServantBase::_non_existent_thru_poa_skel, 0},
      {"_repository_id", &TAO_ServantBase::_repository_id_thru_poa_skel, 0},
      {"test_recursive_union", &POA_Param_Test::test_recursive_union_skel, 0},
      {"_interface", &TAO_ServantBase::_interface_skel, 0},
    };

  static const signed char lookup[] =
    {
       -1,  -1,  -1,  -1,  -1,  -1, -11,  -2, -18,  -2,  10, -70,  13,  -1,
       14,  15,  16,  17, -75,  20,  21,  22,  23,  24, -27,  -2,  25,  -1,
       26, -70,  29,  -1, -31,  -2, -43,  -2,  30, -70,  33,  34,  35, -46,
       -2,  36,  37,  38,  39,  40,  -1,  41,  42, -82,  -1,  45, -78,  48,
       49,  -1,  50,  51,  52,  -1,  -1,  -1,  -1,  53,
    };

  if (len <= MAX_WORD_LENGTH && len >= MIN_WORD_LENGTH)
    {
      unsigned int key = hash (str, len);

      if (key <= MAX_HASH_VALUE && key >= MIN_HASH_VALUE)
        {
          int slot = lookup[key];

          if (slot >= 0 && slot < WORDLIST_SIZE)
            {
              const char *s = wordlist[slot].opname;

              if (*str == *s && !ACE_OS::strncmp (str + 1, s + 1, len - 1))
                return &wordlist[slot];
            }
          else if (slot < 0 && slot >= -MAX_HASH_VALUE)
            return 0;
          else
            {
              unsigned int offset = key + slot + (slot > 0 ? -MAX_HASH_VALUE : MAX_HASH_VALUE);
              const TAO_operation_db_entry *base = &wordlist[-lookup[offset]];
              const TAO_operation_db_entry *ptr = base + -lookup[offset + 1];

              while (--ptr >= base)
                if (*str == *ptr->opname && !ACE_OS::strncmp (str + 1, ptr->opname + 1, len - 1))
                  return ptr;
            }
        }
    }
  return 0;
}

static TAO_Param_Test_Perfect_Hash_OpTable tao_Param_Test_optable;

// TAO_IDL - Generated from
// be/be_visitor_interface/interface_ss.cpp:90

POA_Param_Test::POA_Param_Test (void)
  : TAO_ServantBase ()
{
  this->optable_ = &tao_Param_Test_optable;
}

POA_Param_Test::POA_Param_Test (const POA_Param_Test& rhs)
  : TAO_Abstract_ServantBase (rhs),
    TAO_ServantBase (rhs)
{
}

POA_Param_Test::~POA_Param_Test (void)
{
}


// TAO_IDL - Generated from
// be/be_visitor_operation/upcall_command_ss.cpp:80

class test_short_Param_Test
  : public TAO::Upcall_Command
{
public:
  inline test_short_Param_Test (
    POA_Param_Test * servant,
    TAO_Operation_Details const * operation_details,
    TAO::Argument * const args[])
    : servant_ (servant)
      , operation_details_ (operation_details)
      , args_ (args)
  {
  }

  virtual void execute (void)
  {
    TAO::SArg_Traits< ::CORBA::Short>::ret_arg_type retval =
      TAO::Portable_Server::get_ret_arg< ::CORBA::Short> (
        this->operation_details_,
        this->args_);

    TAO::SArg_Traits< ::CORBA::Short>::in_arg_type arg_1 =
      TAO::Portable_Server::get_in_arg< ::CORBA::Short> (
        this->operation_details_,
        this->args_,
        1);

    TAO::SArg_Traits< ::CORBA::Short>::inout_arg_type arg_2 =
      TAO::Portable_Server::get_inout_arg< ::CORBA::Short> (
        this->operation_details_,
        this->args_,
        2);

    TAO::SArg_Traits< ::CORBA::Short>::out_arg_type arg_3 =
      TAO::Portable_Server::get_out_arg< ::CORBA::Short> (
        this->operation_details_,
        this->args_,
        3);

    retval =
      this->servant_->test_short (
        arg_1
        , arg_2
        , arg_3);
  }

private:
  POA_Param_Test * const servant_;
  TAO_Operation_Details const * const operation_details_;
  TAO::Argument * const * const args_;
};

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_ss.cpp:168

void POA_Param_Test::test_short_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::CORBA::Short>::ret_val retval;
  TAO::SArg_Traits< ::CORBA::Short>::in_arg_val _tao_s1;
  TAO::SArg_Traits< ::CORBA::Short>::inout_arg_val _tao_s2;
  TAO::SArg_Traits< ::CORBA::Short>::out_arg_val _tao_s3;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_s1,
      &_tao_s2,
      &_tao_s3
    };

  static size_t const nargs = 4;

  POA_Param_Test * const impl =
    dynamic_cast<POA_Param_Test *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  test_short_Param_Test command (
    impl,
    server_request.operation_details (),
    args);

  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}



// TAO_IDL - Generated from
// be/be_visitor_operation/upcall_command_ss.cpp:80

class test_ulonglong_Param_Test
  : public TAO::Upcall_Command
{
public:
  inline test_ulonglong_Param_Test (
    POA_Param_Test * servant,
    TAO_Operation_Details const * operation_details,
    TAO::Argument * const args[])
    : servant_ (servant)
      , operation_details_ (operation_details)
      , args_ (args)
  {
  }

  virtual void execute (void)
  {
    TAO::SArg_Traits< ::CORBA::ULongLong>::ret_arg_type retval =
      TAO::Portable_Server::get_ret_arg< ::CORBA::ULongLong> (
        this->operation_details_,
        this->args_);

    TAO::SArg_Traits< ::CORBA::ULongLong>::in_arg_type arg_1 =
      TAO::Portable_Server::get_in_arg< ::CORBA::ULongLong> (
        this->operation_details_,
        this->args_,
        1);

    TAO::SArg_Traits< ::CORBA::ULongLong>::inout_arg_type arg_2 =
      TAO::Portable_Server::get_inout_arg< ::CORBA::ULongLong> (
        this->operation_details_,
        this->args_,
        2);

    TAO::SArg_Traits< ::CORBA::ULongLong>::out_arg_type arg_3 =
      TAO::Portable_Server::get_out_arg< ::CORBA::ULongLong> (
        this->operation_details_,
        this->args_,
        3);

    retval =
      this->servant_->test_ulonglong (
        arg_1
        , arg_2
        , arg_3);
  }

private:
  POA_Param_Test * const servant_;
  TAO_Operation_Details const * const operation_details_;
  TAO::Argument * const * const args_;
};

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_ss.cpp:168

void POA_Param_Test::test_ulonglong_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::CORBA::ULongLong>::ret_val retval;
  TAO::SArg_Traits< ::CORBA::ULongLong>::in_arg_val _tao_s1;
  TAO::SArg_Traits< ::CORBA::ULongLong>::inout_arg_val _tao_s2;
  TAO::SArg_Traits< ::CORBA::ULongLong>::out_arg_val _tao_s3;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_s1,
      &_tao_s2,
      &_tao_s3
    };

  static size_t const nargs = 4;

  POA_Param_Test * const impl =
    dynamic_cast<POA_Param_Test *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  test_ulonglong_Param_Test command (
    impl,
    server_request.operation_details (),
    args);

  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}



// TAO_IDL - Generated from
// be/be_visitor_operation/upcall_command_ss.cpp:80

class test_unbounded_string_Param_Test
  : public TAO::Upcall_Command
{
public:
  inline test_unbounded_string_Param_Test (
    POA_Param_Test * servant,
    TAO_Operation_Details const * operation_details,
    TAO::Argument * const args[])
    : servant_ (servant)
      , operation_details_ (operation_details)
      , args_ (args)
  {
  }

  virtual void execute (void)
  {
    TAO::SArg_Traits< char *>::ret_arg_type retval =
      TAO::Portable_Server::get_ret_arg< char *> (
        this->operation_details_,
        this->args_);

    TAO::SArg_Traits< char *>::in_arg_type arg_1 =
      TAO::Portable_Server::get_in_arg< char *> (
        this->operation_details_,
        this->args_,
        1);

    TAO::SArg_Traits< char *>::inout_arg_type arg_2 =
      TAO::Portable_Server::get_inout_arg< char *> (
        this->operation_details_,
        this->args_,
        2);

    TAO::SArg_Traits< char *>::out_arg_type arg_3 =
      TAO::Portable_Server::get_out_arg< char *> (
        this->operation_details_,
        this->args_,
        3);

    retval =
      this->servant_->test_unbounded_string (
        arg_1
        , arg_2
        , arg_3);
  }

private:
  POA_Param_Test * const servant_;
  TAO_Operation_Details const * const operation_details_;
  TAO::Argument * const * const args_;
};

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_ss.cpp:168

void POA_Param_Test::test_unbounded_string_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< char *>::ret_val retval;
  TAO::SArg_Traits< char *>::in_arg_val _tao_s1;
  TAO::SArg_Traits< char *>::inout_arg_val _tao_s2;
  TAO::SArg_Traits< char *>::out_arg_val _tao_s3;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_s1,
      &_tao_s2,
      &_tao_s3
    };

  static size_t const nargs = 4;

  POA_Param_Test * const impl =
    dynamic_cast<POA_Param_Test *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  test_unbounded_string_Param_Test command (
    impl,
    server_request.operation_details (),
    args);

  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}



// TAO_IDL - Generated from
// be/be_visitor_operation/upcall_command_ss.cpp:80

class test_bounded_string_Param_Test
  : public TAO::Upcall_Command
{
public:
  inline test_bounded_string_Param_Test (
    POA_Param_Test * servant,
    TAO_Operation_Details const * operation_details,
    TAO::Argument * const args[])
    : servant_ (servant)
      , operation_details_ (operation_details)
      , args_ (args)
  {
  }

  virtual void execute (void)
  {
    TAO::SArg_Traits< ::TAO::short_string_128>::ret_arg_type retval =
      TAO::Portable_Server::get_ret_arg< ::TAO::short_string_128> (
        this->operation_details_,
        this->args_);

    TAO::SArg_Traits< ::TAO::short_string_128>::in_arg_type arg_1 =
      TAO::Portable_Server::get_in_arg< ::TAO::short_string_128> (
        this->operation_details_,
        this->args_,
        1);

    TAO::SArg_Traits< ::TAO::short_string_128>::inout_arg_type arg_2 =
      TAO::Portable_Server::get_inout_arg< ::TAO::short_string_128> (
        this->operation_details_,
        this->args_,
        2);

    TAO::SArg_Traits< ::TAO::short_string_128>::out_arg_type arg_3 =
      TAO::Portable_Server::get_out_arg< ::TAO::short_string_128> (
        this->operation_details_,
        this->args_,
        3);

    retval =
      this->servant_->test_bounded_string (
        arg_1
        , arg_2
        , arg_3);
  }

private:
  POA_Param_Test * const servant_;
  TAO_Operation_Details const * const operation_details_;
  TAO::Argument * const * const args_;
};

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_ss.cpp:168

void POA_Param_Test::test_bounded_string_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::TAO::short_string_128>::ret_val retval;
  TAO::SArg_Traits< ::TAO::short_string_128>::in_arg_val _tao_s1;
  TAO::SArg_Traits< ::TAO::short_string_128>::inout_arg_val _tao_s2;
  TAO::SArg_Traits< ::TAO::short_string_128>::out_arg_val _tao_s3;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_s1,
      &_tao_s2,
      &_tao_s3
    };

  static size_t const nargs = 4;

  POA_Param_Test * const impl =
    dynamic_cast<POA_Param_Test *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  test_bounded_string_Param_Test command (
    impl,
    server_request.operation_details (),
    args);

  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}



// TAO_IDL - Generated from
// be/be_visitor_operation/upcall_command_ss.cpp:80

class test_unbounded_wstring_Param_Test
  : public TAO::Upcall_Command
{
public:
  inline test_unbounded_wstring_Param_Test (
    POA_Param_Test * servant,
    TAO_Operation_Details const * operation_details,
    TAO::Argument * const args[])
    : servant_ (servant)
      , operation_details_ (operation_details)
      , args_ (args)
  {
  }

  virtual void execute (void)
  {
    TAO::SArg_Traits< ::CORBA::WChar *>::ret_arg_type retval =
      TAO::Portable_Server::get_ret_arg< ::CORBA::WChar *> (
        this->operation_details_,
        this->args_);

    TAO::SArg_Traits< ::CORBA::WChar *>::in_arg_type arg_1 =
      TAO::Portable_Server::get_in_arg< ::CORBA::WChar *> (
        this->operation_details_,
        this->args_,
        1);

    TAO::SArg_Traits< ::CORBA::WChar *>::inout_arg_type arg_2 =
      TAO::Portable_Server::get_inout_arg< ::CORBA::WChar *> (
        this->operation_details_,
        this->args_,
        2);

    TAO::SArg_Traits< ::CORBA::WChar *>::out_arg_type arg_3 =
      TAO::Portable_Server::get_out_arg< ::CORBA::WChar *> (
        this->operation_details_,
        this->args_,
        3);

    retval =
      this->servant_->test_unbounded_wstring (
        arg_1
        , arg_2
        , arg_3);
  }

private:
  POA_Param_Test * const servant_;
  TAO_Operation_Details const * const operation_details_;
  TAO::Argument * const * const args_;
};

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_ss.cpp:168

void POA_Param_Test::test_unbounded_wstring_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::CORBA::WChar *>::ret_val retval;
  TAO::SArg_Traits< ::CORBA::WChar *>::in_arg_val _tao_ws1;
  TAO::SArg_Traits< ::CORBA::WChar *>::inout_arg_val _tao_ws2;
  TAO::SArg_Traits< ::CORBA::WChar *>::out_arg_val _tao_ws3;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_ws1,
      &_tao_ws2,
      &_tao_ws3
    };

  static size_t const nargs = 4;

  POA_Param_Test * const impl =
    dynamic_cast<POA_Param_Test *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  test_unbounded_wstring_Param_Test command (
    impl,
    server_request.operation_details (),
    args);

  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}



// TAO_IDL - Generated from
// be/be_visitor_operation/upcall_command_ss.cpp:80

class test_bounded_wstring_Param_Test
  : public TAO::Upcall_Command
{
public:
  inline test_bounded_wstring_Param_Test (
    POA_Param_Test * servant,
    TAO_Operation_Details const * operation_details,
    TAO::Argument * const args[])
    : servant_ (servant)
      , operation_details_ (operation_details)
      , args_ (args)
  {
  }

  virtual void execute (void)
  {
    TAO::SArg_Traits< ::TAO::short_wstring_128>::ret_arg_type retval =
      TAO::Portable_Server::get_ret_arg< ::TAO::short_wstring_128> (
        this->operation_details_,
        this->args_);

    TAO::SArg_Traits< ::TAO::short_wstring_128>::in_arg_type arg_1 =
      TAO::Portable_Server::get_in_arg< ::TAO::short_wstring_128> (
        this->operation_details_,
        this->args_,
        1);

    TAO::SArg_Traits< ::TAO::short_wstring_128>::inout_arg_type arg_2 =
      TAO::Portable_Server::get_inout_arg< ::TAO::short_wstring_128> (
        this->operation_details_,
        this->args_,
        2);

    TAO::SArg_Traits< ::TAO::short_wstring_128>::out_arg_type arg_3 =
      TAO::Portable_Server::get_out_arg< ::TAO::short_wstring_128> (
        this->operation_details_,
        this->args_,
        3);

    retval =
      this->servant_->test_bounded_wstring (
        arg_1
        , arg_2
        , arg_3);
  }

private:
  POA_Param_Test * const servant_;
  TAO_Operation_Details const * const operation_details_;
  TAO::Argument * const * const args_;
};

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_ss.cpp:168

void POA_Param_Test::test_bounded_wstring_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::TAO::short_wstring_128>::ret_val retval;
  TAO::SArg_Traits< ::TAO::short_wstring_128>::in_arg_val _tao_ws1;
  TAO::SArg_Traits< ::TAO::short_wstring_128>::inout_arg_val _tao_ws2;
  TAO::SArg_Traits< ::TAO::short_wstring_128>::out_arg_val _tao_ws3;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_ws1,
      &_tao_ws2,
      &_tao_ws3
    };

  static size_t const nargs = 4;

  POA_Param_Test * const impl =
    dynamic_cast<POA_Param_Test *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  test_bounded_wstring_Param_Test command (
    impl,
    server_request.operation_details (),
    args);

  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}



// TAO_IDL - Generated from
// be/be_visitor_operation/upcall_command_ss.cpp:80

class test_fixed_struct_Param_Test
  : public TAO::Upcall_Command
{
public:
  inline test_fixed_struct_Param_Test (
    POA_Param_Test * servant,
    TAO_Operation_Details const * operation_details,
    TAO::Argument * const args[])
    : servant_ (servant)
      , operation_details_ (operation_details)
      , args_ (args)
  {
  }

  virtual void execute (void)
  {
    TAO::SArg_Traits< ::Param_Test::Fixed_Struct>::ret_arg_type retval =
      TAO::Portable_Server::get_ret_arg< ::Param_Test::Fixed_Struct> (
        this->operation_details_,
        this->args_);

    TAO::SArg_Traits< ::Param_Test::Fixed_Struct>::in_arg_type arg_1 =
      TAO::Portable_Server::get_in_arg< ::Param_Test::Fixed_Struct> (
        this->operation_details_,
        this->args_,
        1);

    TAO::SArg_Traits< ::Param_Test::Fixed_Struct>::inout_arg_type arg_2 =
      TAO::Portable_Server::get_inout_arg< ::Param_Test::Fixed_Struct> (
        this->operation_details_,
        this->args_,
        2);

    TAO::SArg_Traits< ::Param_Test::Fixed_Struct>::out_arg_type arg_3 =
      TAO::Portable_Server::get_out_arg< ::Param_Test::Fixed_Struct> (
        this->operation_details_,
        this->args_,
        3);

    retval =
      this->servant_->test_fixed_struct (
        arg_1
        , arg_2
        , arg_3);
  }

private:
  POA_Param_Test * const servant_;
  TAO_Operation_Details const * const operation_details_;
  TAO::Argument * const * const args_;
};

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_ss.cpp:168

void POA_Param_Test::test_fixed_struct_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::Param_Test::Fixed_Struct>::ret_val retval;
  TAO::SArg_Traits< ::Param_Test::Fixed_Struct>::in_arg_val _tao_s1;
  TAO::SArg_Traits< ::Param_Test::Fixed_Struct>::inout_arg_val _tao_s2;
  TAO::SArg_Traits< ::Param_Test::Fixed_Struct>::out_arg_val _tao_s3;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_s1,
      &_tao_s2,
      &_tao_s3
    };

  static size_t const nargs = 4;

  POA_Param_Test * const impl =
    dynamic_cast<POA_Param_Test *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  test_fixed_struct_Param_Test command (
    impl,
    server_request.operation_details (),
    args);

  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}



// TAO_IDL - Generated from
// be/be_visitor_operation/upcall_command_ss.cpp:80

class test_unbounded_struct_sequence_Param_Test
  : public TAO::Upcall_Command
{
public:
  inline test_unbounded_struct_sequence_Param_Test (
    POA_Param_Test * servant,
    TAO_Operation_Details const * operation_details,
    TAO::Argument * const args[])
    : servant_ (servant)
      , operation_details_ (operation_details)
      , args_ (args)
  {
  }

  virtual void execute (void)
  {
    TAO::SArg_Traits< ::Param_Test::PathSpec>::ret_arg_type retval =
      TAO::Portable_Server::get_ret_arg< ::Param_Test::PathSpec> (
        this->operation_details_,
        this->args_);

    TAO::SArg_Traits< ::Param_Test::PathSpec>::in_arg_type arg_1 =
      TAO::Portable_Server::get_in_arg< ::Param_Test::PathSpec> (
        this->operation_details_,
        this->args_,
        1);

    TAO::SArg_Traits< ::Param_Test::PathSpec>::inout_arg_type arg_2 =
      TAO::Portable_Server::get_inout_arg< ::Param_Test::PathSpec> (
        this->operation_details_,
        this->args_,
        2);

    TAO::SArg_Traits< ::Param_Test::PathSpec>::out_arg_type arg_3 =
      TAO::Portable_Server::get_out_arg< ::Param_Test::PathSpec> (
        this->operation_details_,
        this->args_,
        3);

    retval =
      this->servant_->test_unbounded_struct_sequence (
        arg_1
        , arg_2
        , arg_3);
  }

private:
  POA_Param_Test * const servant_;
  TAO_Operation_Details const * const operation_details_;
  TAO::Argument * const * const args_;
};

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_ss.cpp:168

void POA_Param_Test::test_unbounded_struct_sequence_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::Param_Test::PathSpec>::ret_val retval;
  TAO::SArg_Traits< ::Param_Test::PathSpec>::in_arg_val _tao_s1;
  TAO::SArg_Traits< ::Param_Test::PathSpec>::inout_arg_val _tao_s2;
  TAO::SArg_Traits< ::Param_Test::PathSpec>::out_arg_val _tao_s3;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_s1,
      &_tao_s2,
      &_tao_s3
    };

  static size_t const nargs = 4;

  POA_Param_Test * const impl =
    dynamic_cast<POA_Param_Test *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  test_unbounded_struct_sequence_Param_Test command (
    impl,
    server_request.operation_details (),
    args);

  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}



// TAO_IDL - Generated from
// be/be_visitor_operation/upcall_command_ss.cpp:80

class test_short_sequence_Param_Test
  : public TAO::Upcall_Command
{
public:
  inline test_short_sequence_Param_Test (
    POA_Param_Test * servant,
    TAO_Operation_Details const * operation_details,
    TAO::Argument * const args[])
    : servant_ (servant)
      , operation_details_ (operation_details)
      , args_ (args)
  {
  }

  virtual void execute (void)
  {
    TAO::SArg_Traits< ::Param_Test::Short_Seq>::ret_arg_type retval =
      TAO::Portable_Server::get_ret_arg< ::Param_Test::Short_Seq> (
        this->operation_details_,
        this->args_);

    TAO::SArg_Traits< ::Param_Test::Short_Seq>::in_arg_type arg_1 =
      TAO::Portable_Server::get_in_arg< ::Param_Test::Short_Seq> (
        this->operation_details_,
        this->args_,
        1);

    TAO::SArg_Traits< ::Param_Test::Short_Seq>::inout_arg_type arg_2 =
      TAO::Portable_Server::get_inout_arg< ::Param_Test::Short_Seq> (
        this->operation_details_,
        this->args_,
        2);

    TAO::SArg_Traits< ::Param_Test::Short_Seq>::out_arg_type arg_3 =
      TAO::Portable_Server::get_out_arg< ::Param_Test::Short_Seq> (
        this->operation_details_,
        this->args_,
        3);

    retval =
      this->servant_->test_short_sequence (
        arg_1
        , arg_2
        , arg_3);
  }

private:
  POA_Param_Test * const servant_;
  TAO_Operation_Details const * const operation_details_;
  TAO::Argument * const * const args_;
};

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_ss.cpp:168

void POA_Param_Test::test_short_sequence_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::Param_Test::Short_Seq>::ret_val retval;
  TAO::SArg_Traits< ::Param_Test::Short_Seq>::in_arg_val _tao_s1;
  TAO::SArg_Traits< ::Param_Test::Short_Seq>::inout_arg_val _tao_s2;
  TAO::SArg_Traits< ::Param_Test::Short_Seq>::out_arg_val _tao_s3;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_s1,
      &_tao_s2,
      &_tao_s3
    };

  static size_t const nargs = 4;

  POA_Param_Test * const impl =
    dynamic_cast<POA_Param_Test *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  test_short_sequence_Param_Test command (
    impl,
    server_request.operation_details (),
    args);

  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}



// TAO_IDL - Generated from
// be/be_visitor_operation/upcall_command_ss.cpp:80

class test_bounded_short_sequence_Param_Test
  : public TAO::Upcall_Command
{
public:
  inline test_bounded_short_sequence_Param_Test (
    POA_Param_Test * servant,
    TAO_Operation_Details const * operation_details,
    TAO::Argument * const args[])
    : servant_ (servant)
      , operation_details_ (operation_details)
      , args_ (args)
  {
  }

  virtual void execute (void)
  {
    TAO::SArg_Traits< ::Param_Test::Bounded_Short_Seq>::ret_arg_type retval =
      TAO::Portable_Server::get_ret_arg< ::Param_Test::Bounded_Short_Seq> (
        this->operation_details_,
        this->args_);

    TAO::SArg_Traits< ::Param_Test::Bounded_Short_Seq>::in_arg_type arg_1 =
      TAO::Portable_Server::get_in_arg< ::Param_Test::Bounded_Short_Seq> (
        this->operation_details_,
        this->args_,
        1);

    TAO::SArg_Traits< ::Param_Test::Bounded_Short_Seq>::inout_arg_type arg_2 =
      TAO::Portable_Server::get_inout_arg< ::Param_Test::Bounded_Short_Seq> (
        this->operation_details_,
        this->args_,
        2);

    TAO::SArg_Traits< ::Param_Test::Bounded_Short_Seq>::out_arg_type arg_3 =
      TAO::Portable_Server::get_out_arg< ::Param_Test::Bounded_Short_Seq> (
        this->operation_details_,
        this->args_,
        3);

    retval =
      this->servant_->test_bounded_short_sequence (
        arg_1
        , arg_2
        , arg_3);
  }

private:
  POA_Param_Test * const servant_;
  TAO_Operation_Details const * const operation_details_;
  TAO::Argument * const * const args_;
};

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_ss.cpp:168

void POA_Param_Test::test_bounded_short_sequence_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::Param_Test::Bounded_Short_Seq>::ret_val retval;
  TAO::SArg_Traits< ::Param_Test::Bounded_Short_Seq>::in_arg_val _tao_s1;
  TAO::SArg_Traits< ::Param_Test::Bounded_Short_Seq>::inout_arg_val _tao_s2;
  TAO::SArg_Traits< ::Param_Test::Bounded_Short_Seq>::out_arg_val _tao_s3;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_s1,
      &_tao_s2,
      &_tao_s3
    };

  static size_t const nargs = 4;

  POA_Param_Test * const impl =
    dynamic_cast<POA_Param_Test *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  test_bounded_short_sequence_Param_Test command (
    impl,
    server_request.operation_details (),
    args);

  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}



// TAO_IDL - Generated from
// be/be_visitor_operation/upcall_command_ss.cpp:80

class test_long_sequence_Param_Test
  : public TAO::Upcall_Command
{
public:
  inline test_long_sequence_Param_Test (
    POA_Param_Test * servant,
    TAO_Operation_Details const * operation_details,
    TAO::Argument * const args[])
    : servant_ (servant)
      , operation_details_ (operation_details)
      , args_ (args)
  {
  }

  virtual void execute (void)
  {
    TAO::SArg_Traits< ::Param_Test::Long_Seq>::ret_arg_type retval =
      TAO::Portable_Server::get_ret_arg< ::Param_Test::Long_Seq> (
        this->operation_details_,
        this->args_);

    TAO::SArg_Traits< ::Param_Test::Long_Seq>::in_arg_type arg_1 =
      TAO::Portable_Server::get_in_arg< ::Param_Test::Long_Seq> (
        this->operation_details_,
        this->args_,
        1);

    TAO::SArg_Traits< ::Param_Test::Long_Seq>::inout_arg_type arg_2 =
      TAO::Portable_Server::get_inout_arg< ::Param_Test::Long_Seq> (
        this->operation_details_,
        this->args_,
        2);

    TAO::SArg_Traits< ::Param_Test::Long_Seq>::out_arg_type arg_3 =
      TAO::Portable_Server::get_out_arg< ::Param_Test::Long_Seq> (
        this->operation_details_,
        this->args_,
        3);

    retval =
      this->servant_->test_long_sequence (
        arg_1
        , arg_2
        , arg_3);
  }

private:
  POA_Param_Test * const servant_;
  TAO_Operation_Details const * const operation_details_;
  TAO::Argument * const * const args_;
};

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_ss.cpp:168

void POA_Param_Test::test_long_sequence_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::Param_Test::Long_Seq>::ret_val retval;
  TAO::SArg_Traits< ::Param_Test::Long_Seq>::in_arg_val _tao_s1;
  TAO::SArg_Traits< ::Param_Test::Long_Seq>::inout_arg_val _tao_s2;
  TAO::SArg_Traits< ::Param_Test::Long_Seq>::out_arg_val _tao_s3;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_s1,
      &_tao_s2,
      &_tao_s3
    };

  static size_t const nargs = 4;

  POA_Param_Test * const impl =
    dynamic_cast<POA_Param_Test *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  test_long_sequence_Param_Test command (
    impl,
    server_request.operation_details (),
    args);

  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}



// TAO_IDL - Generated from
// be/be_visitor_operation/upcall_command_ss.cpp:80

class test_bounded_long_sequence_Param_Test
  : public TAO::Upcall_Command
{
public:
  inline test_bounded_long_sequence_Param_Test (
    POA_Param_Test * servant,
    TAO_Operation_Details const * operation_details,
    TAO::Argument * const args[])
    : servant_ (servant)
      , operation_details_ (operation_details)
      , args_ (args)
  {
  }

  virtual void execute (void)
  {
    TAO::SArg_Traits< ::Param_Test::Bounded_Long_Seq>::ret_arg_type retval =
      TAO::Portable_Server::get_ret_arg< ::Param_Test::Bounded_Long_Seq> (
        this->operation_details_,
        this->args_);

    TAO::SArg_Traits< ::Param_Test::Bounded_Long_Seq>::in_arg_type arg_1 =
      TAO::Portable_Server::get_in_arg< ::Param_Test::Bounded_Long_Seq> (
        this->operation_details_,
        this->args_,
        1);

    TAO::SArg_Traits< ::Param_Test::Bounded_Long_Seq>::inout_arg_type arg_2 =
      TAO::Portable_Server::get_inout_arg< ::Param_Test::Bounded_Long_Seq> (
        this->operation_details_,
        this->args_,
        2);

    TAO::SArg_Traits< ::Param_Test::Bounded_Long_Seq>::out_arg_type arg_3 =
      TAO::Portable_Server::get_out_arg< ::Param_Test::Bounded_Long_Seq> (
        this->operation_details_,
        this->args_,
        3);

    retval =
      this->servant_->test_bounded_long_sequence (
        arg_1
        , arg_2
        , arg_3);
  }

private:
  POA_Param_Test * const servant_;
  TAO_Operation_Details const * const operation_details_;
  TAO::Argument * const * const args_;
};

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_ss.cpp:168

void POA_Param_Test::test_bounded_long_sequence_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::Param_Test::Bounded_Long_Seq>::ret_val retval;
  TAO::SArg_Traits< ::Param_Test::Bounded_Long_Seq>::in_arg_val _tao_s1;
  TAO::SArg_Traits< ::Param_Test::Bounded_Long_Seq>::inout_arg_val _tao_s2;
  TAO::SArg_Traits< ::Param_Test::Bounded_Long_Seq>::out_arg_val _tao_s3;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_s1,
      &_tao_s2,
      &_tao_s3
    };

  static size_t const nargs = 4;

  POA_Param_Test * const impl =
    dynamic_cast<POA_Param_Test *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  test_bounded_long_sequence_Param_Test command (
    impl,
    server_request.operation_details (),
    args);

  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}



// TAO_IDL - Generated from
// be/be_visitor_operation/upcall_command_ss.cpp:80

class test_strseq_Param_Test
  : public TAO::Upcall_Command
{
public:
  inline test_strseq_Param_Test (
    POA_Param_Test * servant,
    TAO_Operation_Details const * operation_details,
    TAO::Argument * const args[])
    : servant_ (servant)
      , operation_details_ (operation_details)
      , args_ (args)
  {
  }

  virtual void execute (void)
  {
    TAO::SArg_Traits< ::Param_Test::StrSeq>::ret_arg_type retval =
      TAO::Portable_Server::get_ret_arg< ::Param_Test::StrSeq> (
        this->operation_details_,
        this->args_);

    TAO::SArg_Traits< ::Param_Test::StrSeq>::in_arg_type arg_1 =
      TAO::Portable_Server::get_in_arg< ::Param_Test::StrSeq> (
        this->operation_details_,
        this->args_,
        1);

    TAO::SArg_Traits< ::Param_Test::StrSeq>::inout_arg_type arg_2 =
      TAO::Portable_Server::get_inout_arg< ::Param_Test::StrSeq> (
        this->operation_details_,
        this->args_,
        2);

    TAO::SArg_Traits< ::Param_Test::StrSeq>::out_arg_type arg_3 =
      TAO::Portable_Server::get_out_arg< ::Param_Test::StrSeq> (
        this->operation_details_,
        this->args_,
        3);

    retval =
      this->servant_->test_strseq (
        arg_1
        , arg_2
        , arg_3);
  }

private:
  POA_Param_Test * const servant_;
  TAO_Operation_Details const * const operation_details_;
  TAO::Argument * const * const args_;
};

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_ss.cpp:168

void POA_Param_Test::test_strseq_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::Param_Test::StrSeq>::ret_val retval;
  TAO::SArg_Traits< ::Param_Test::StrSeq>::in_arg_val _tao_s1;
  TAO::SArg_Traits< ::Param_Test::StrSeq>::inout_arg_val _tao_s2;
  TAO::SArg_Traits< ::Param_Test::StrSeq>::out_arg_val _tao_s3;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_s1,
      &_tao_s2,
      &_tao_s3
    };

  static size_t const nargs = 4;

  POA_Param_Test * const impl =
    dynamic_cast<POA_Param_Test *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  test_strseq_Param_Test command (
    impl,
    server_request.operation_details (),
    args);

  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}



// TAO_IDL - Generated from
// be/be_visitor_operation/upcall_command_ss.cpp:80

class test_bounded_strseq_Param_Test
  : public TAO::Upcall_Command
{
public:
  inline test_bounded_strseq_Param_Test (
    POA_Param_Test * servant,
    TAO_Operation_Details const * operation_details,
    TAO::Argument * const args[])
    : servant_ (servant)
      , operation_details_ (operation_details)
      , args_ (args)
  {
  }

  virtual void execute (void)
  {
    TAO::SArg_Traits< ::Param_Test::Bounded_StrSeq>::ret_arg_type retval =
      TAO::Portable_Server::get_ret_arg< ::Param_Test::Bounded_StrSeq> (
        this->operation_details_,
        this->args_);

    TAO::SArg_Traits< ::Param_Test::Bounded_StrSeq>::in_arg_type arg_1 =
      TAO::Portable_Server::get_in_arg< ::Param_Test::Bounded_StrSeq> (
        this->operation_details_,
        this->args_,
        1);

    TAO::SArg_Traits< ::Param_Test::Bounded_StrSeq>::inout_arg_type arg_2 =
      TAO::Portable_Server::get_inout_arg< ::Param_Test::Bounded_StrSeq> (
        this->operation_details_,
        this->args_,
        2);

    TAO::SArg_Traits< ::Param_Test::Bounded_StrSeq>::out_arg_type arg_3 =
      TAO::Portable_Server::get_out_arg< ::Param_Test::Bounded_StrSeq> (
        this->operation_details_,
        this->args_,
        3);

    retval =
      this->servant_->test_bounded_strseq (
        arg_1
        , arg_2
        , arg_3);
  }

private:
  POA_Param_Test * const servant_;
  TAO_Operation_Details const * const operation_details_;
  TAO::Argument * const * const args_;
};

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_ss.cpp:168

void POA_Param_Test::test_bounded_strseq_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::Param_Test::Bounded_StrSeq>::ret_val retval;
  TAO::SArg_Traits< ::Param_Test::Bounded_StrSeq>::in_arg_val _tao_s1;
  TAO::SArg_Traits< ::Param_Test::Bounded_StrSeq>::inout_arg_val _tao_s2;
  TAO::SArg_Traits< ::Param_Test::Bounded_StrSeq>::out_arg_val _tao_s3;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_s1,
      &_tao_s2,
      &_tao_s3
    };

  static size_t const nargs = 4;

  POA_Param_Test * const impl =
    dynamic_cast<POA_Param_Test *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  test_bounded_strseq_Param_Test command (
    impl,
    server_request.operation_details (),
    args);

  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}



// TAO_IDL - Generated from
// be/be_visitor_operation/upcall_command_ss.cpp:80

class test_wstrseq_Param_Test
  : public TAO::Upcall_Command
{
public:
  inline test_wstrseq_Param_Test (
    POA_Param_Test * servant,
    TAO_Operation_Details const * operation_details,
    TAO::Argument * const args[])
    : servant_ (servant)
      , operation_details_ (operation_details)
      , args_ (args)
  {
  }

  virtual void execute (void)
  {
    TAO::SArg_Traits< ::Param_Test::WStrSeq>::ret_arg_type retval =
      TAO::Portable_Server::get_ret_arg< ::Param_Test::WStrSeq> (
        this->operation_details_,
        this->args_);

    TAO::SArg_Traits< ::Param_Test::WStrSeq>::in_arg_type arg_1 =
      TAO::Portable_Server::get_in_arg< ::Param_Test::WStrSeq> (
        this->operation_details_,
        this->args_,
        1);

    TAO::SArg_Traits< ::Param_Test::WStrSeq>::inout_arg_type arg_2 =
      TAO::Portable_Server::get_inout_arg< ::Param_Test::WStrSeq> (
        this->operation_details_,
        this->args_,
        2);

    TAO::SArg_Traits< ::Param_Test::WStrSeq>::out_arg_type arg_3 =
      TAO::Portable_Server::get_out_arg< ::Param_Test::WStrSeq> (
        this->operation_details_,
        this->args_,
        3);

    retval =
      this->servant_->test_wstrseq (
        arg_1
        , arg_2
        , arg_3);
  }

private:
  POA_Param_Test * const servant_;
  TAO_Operation_Details const * const operation_details_;
  TAO::Argument * const * const args_;
};

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_ss.cpp:168

void POA_Param_Test::test_wstrseq_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::Param_Test::WStrSeq>::ret_val retval;
  TAO::SArg_Traits< ::Param_Test::WStrSeq>::in_arg_val _tao_ws1;
  TAO::SArg_Traits< ::Param_Test::WStrSeq>::inout_arg_val _tao_ws2;
  TAO::SArg_Traits< ::Param_Test::WStrSeq>::out_arg_val _tao_ws3;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_ws1,
      &_tao_ws2,
      &_tao_ws3
    };

  static size_t const nargs = 4;

  POA_Param_Test * const impl =
    dynamic_cast<POA_Param_Test *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  test_wstrseq_Param_Test command (
    impl,
    server_request.operation_details (),
    args);

  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}



// TAO_IDL - Generated from
// be/be_visitor_operation/upcall_command_ss.cpp:80

class test_bounded_wstrseq_Param_Test
  : public TAO::Upcall_Command
{
public:
  inline test_bounded_wstrseq_Param_Test (
    POA_Param_Test * servant,
    TAO_Operation_Details const * operation_details,
    TAO::Argument * const args[])
    : servant_ (servant)
      , operation_details_ (operation_details)
      , args_ (args)
  {
  }

  virtual void execute (void)
  {
    TAO::SArg_Traits< ::Param_Test::Bounded_WStrSeq>::ret_arg_type retval =
      TAO::Portable_Server::get_ret_arg< ::Param_Test::Bounded_WStrSeq> (
        this->operation_details_,
        this->args_);

    TAO::SArg_Traits< ::Param_Test::Bounded_WStrSeq>::in_arg_type arg_1 =
      TAO::Portable_Server::get_in_arg< ::Param_Test::Bounded_WStrSeq> (
        this->operation_details_,
        this->args_,
        1);

    TAO::SArg_Traits< ::Param_Test::Bounded_WStrSeq>::inout_arg_type arg_2 =
      TAO::Portable_Server::get_inout_arg< ::Param_Test::Bounded_WStrSeq> (
        this->operation_details_,
        this->args_,
        2);

    TAO::SArg_Traits< ::Param_Test::Bounded_WStrSeq>::out_arg_type arg_3 =
      TAO::Portable_Server::get_out_arg< ::Param_Test::Bounded_WStrSeq> (
        this->operation_details_,
        this->args_,
        3);

    retval =
      this->servant_->test_bounded_wstrseq (
        arg_1
        , arg_2
        , arg_3);
  }

private:
  POA_Param_Test * const servant_;
  TAO_Operation_Details const * const operation_details_;
  TAO::Argument * const * const args_;
};

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_ss.cpp:168

void POA_Param_Test::test_bounded_wstrseq_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::Param_Test::Bounded_WStrSeq>::ret_val retval;
  TAO::SArg_Traits< ::Param_Test::Bounded_WStrSeq>::in_arg_val _tao_ws1;
  TAO::SArg_Traits< ::Param_Test::Bounded_WStrSeq>::inout_arg_val _tao_ws2;
  TAO::SArg_Traits< ::Param_Test::Bounded_WStrSeq>::out_arg_val _tao_ws3;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_ws1,
      &_tao_ws2,
      &_tao_ws3
    };

  static size_t const nargs = 4;

  POA_Param_Test * const impl =
    dynamic_cast<POA_Param_Test *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  test_bounded_wstrseq_Param_Test command (
    impl,
    server_request.operation_details (),
    args);

  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}



// TAO_IDL - Generated from
// be/be_visitor_operation/upcall_command_ss.cpp:80

class test_struct_sequence_Param_Test
  : public TAO::Upcall_Command
{
public:
  inline test_struct_sequence_Param_Test (
    POA_Param_Test * servant,
    TAO_Operation_Details const * operation_details,
    TAO::Argument * const args[])
    : servant_ (servant)
      , operation_details_ (operation_details)
      , args_ (args)
  {
  }

  virtual void execute (void)
  {
    TAO::SArg_Traits< ::Param_Test::StructSeq>::ret_arg_type retval =
      TAO::Portable_Server::get_ret_arg< ::Param_Test::StructSeq> (
        this->operation_details_,
        this->args_);

    TAO::SArg_Traits< ::Param_Test::StructSeq>::in_arg_type arg_1 =
      TAO::Portable_Server::get_in_arg< ::Param_Test::StructSeq> (
        this->operation_details_,
        this->args_,
        1);

    TAO::SArg_Traits< ::Param_Test::StructSeq>::inout_arg_type arg_2 =
      TAO::Portable_Server::get_inout_arg< ::Param_Test::StructSeq> (
        this->operation_details_,
        this->args_,
        2);

    TAO::SArg_Traits< ::Param_Test::StructSeq>::out_arg_type arg_3 =
      TAO::Portable_Server::get_out_arg< ::Param_Test::StructSeq> (
        this->operation_details_,
        this->args_,
        3);

    retval =
      this->servant_->test_struct_sequence (
        arg_1
        , arg_2
        , arg_3);
  }

private:
  POA_Param_Test * const servant_;
  TAO_Operation_Details const * const operation_details_;
  TAO::Argument * const * const args_;
};

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_ss.cpp:168

void POA_Param_Test::test_struct_sequence_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::Param_Test::StructSeq>::ret_val retval;
  TAO::SArg_Traits< ::Param_Test::StructSeq>::in_arg_val _tao_s1;
  TAO::SArg_Traits< ::Param_Test::StructSeq>::inout_arg_val _tao_s2;
  TAO::SArg_Traits< ::Param_Test::StructSeq>::out_arg_val _tao_s3;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_s1,
      &_tao_s2,
      &_tao_s3
    };

  static size_t const nargs = 4;

  POA_Param_Test * const impl =
    dynamic_cast<POA_Param_Test *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  test_struct_sequence_Param_Test command (
    impl,
    server_request.operation_details (),
    args);

  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}



// TAO_IDL - Generated from
// be/be_visitor_operation/upcall_command_ss.cpp:80

class test_bounded_struct_sequence_Param_Test
  : public TAO::Upcall_Command
{
public:
  inline test_bounded_struct_sequence_Param_Test (
    POA_Param_Test * servant,
    TAO_Operation_Details const * operation_details,
    TAO::Argument * const args[])
    : servant_ (servant)
      , operation_details_ (operation_details)
      , args_ (args)
  {
  }

  virtual void execute (void)
  {
    TAO::SArg_Traits< ::Param_Test::Bounded_StructSeq>::ret_arg_type retval =
      TAO::Portable_Server::get_ret_arg< ::Param_Test::Bounded_StructSeq> (
        this->operation_details_,
        this->args_);

    TAO::SArg_Traits< ::Param_Test::Bounded_StructSeq>::in_arg_type arg_1 =
      TAO::Portable_Server::get_in_arg< ::Param_Test::Bounded_StructSeq> (
        this->operation_details_,
        this->args_,
        1);

    TAO::SArg_Traits< ::Param_Test::Bounded_StructSeq>::inout_arg_type arg_2 =
      TAO::Portable_Server::get_inout_arg< ::Param_Test::Bounded_StructSeq> (
        this->operation_details_,
        this->args_,
        2);

    TAO::SArg_Traits< ::Param_Test::Bounded_StructSeq>::out_arg_type arg_3 =
      TAO::Portable_Server::get_out_arg< ::Param_Test::Bounded_StructSeq> (
        this->operation_details_,
        this->args_,
        3);

    retval =
      this->servant_->test_bounded_struct_sequence (
        arg_1
        , arg_2
        , arg_3);
  }

private:
  POA_Param_Test * const servant_;
  TAO_Operation_Details const * const operation_details_;
  TAO::Argument * const * const args_;
};

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_ss.cpp:168

void POA_Param_Test::test_bounded_struct_sequence_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::Param_Test::Bounded_StructSeq>::ret_val retval;
  TAO::SArg_Traits< ::Param_Test::Bounded_StructSeq>::in_arg_val _tao_s1;
  TAO::SArg_Traits< ::Param_Test::Bounded_StructSeq>::inout_arg_val _tao_s2;
  TAO::SArg_Traits< ::Param_Test::Bounded_StructSeq>::out_arg_val _tao_s3;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_s1,
      &_tao_s2,
      &_tao_s3
    };

  static size_t const nargs = 4;

  POA_Param_Test * const impl =
    dynamic_cast<POA_Param_Test *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  test_bounded_struct_sequence_Param_Test command (
    impl,
    server_request.operation_details (),
    args);

  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}



// TAO_IDL - Generated from
// be/be_visitor_operation/upcall_command_ss.cpp:80

class test_coffe_mix_Param_Test
  : public TAO::Upcall_Command
{
public:
  inline test_coffe_mix_Param_Test (
    POA_Param_Test * servant,
    TAO_Operation_Details const * operation_details,
    TAO::Argument * const args[])
    : servant_ (servant)
      , operation_details_ (operation_details)
      , args_ (args)
  {
  }

  virtual void execute (void)
  {
    TAO::SArg_Traits< ::Param_Test::Coffee_Mix>::ret_arg_type retval =
      TAO::Portable_Server::get_ret_arg< ::Param_Test::Coffee_Mix> (
        this->operation_details_,
        this->args_);

    TAO::SArg_Traits< ::Param_Test::Coffee_Mix>::in_arg_type arg_1 =
      TAO::Portable_Server::get_in_arg< ::Param_Test::Coffee_Mix> (
        this->operation_details_,
        this->args_,
        1);

    TAO::SArg_Traits< ::Param_Test::Coffee_Mix>::inout_arg_type arg_2 =
      TAO::Portable_Server::get_inout_arg< ::Param_Test::Coffee_Mix> (
        this->operation_details_,
        this->args_,
        2);

    TAO::SArg_Traits< ::Param_Test::Coffee_Mix>::out_arg_type arg_3 =
      TAO::Portable_Server::get_out_arg< ::Param_Test::Coffee_Mix> (
        this->operation_details_,
        this->args_,
        3);

    retval =
      this->servant_->test_coffe_mix (
        arg_1
        , arg_2
        , arg_3);
  }

private:
  POA_Param_Test * const servant_;
  TAO_Operation_Details const * const operation_details_;
  TAO::Argument * const * const args_;
};

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_ss.cpp:168

void POA_Param_Test::test_coffe_mix_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::Param_Test::Coffee_Mix>::ret_val retval;
  TAO::SArg_Traits< ::Param_Test::Coffee_Mix>::in_arg_val _tao_s1;
  TAO::SArg_Traits< ::Param_Test::Coffee_Mix>::inout_arg_val _tao_s2;
  TAO::SArg_Traits< ::Param_Test::Coffee_Mix>::out_arg_val _tao_s3;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_s1,
      &_tao_s2,
      &_tao_s3
    };

  static size_t const nargs = 4;

  POA_Param_Test * const impl =
    dynamic_cast<POA_Param_Test *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  test_coffe_mix_Param_Test command (
    impl,
    server_request.operation_details (),
    args);

  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}



// TAO_IDL - Generated from
// be/be_visitor_operation/upcall_command_ss.cpp:80

class test_bounded_coffe_mix_Param_Test
  : public TAO::Upcall_Command
{
public:
  inline test_bounded_coffe_mix_Param_Test (
    POA_Param_Test * servant,
    TAO_Operation_Details const * operation_details,
    TAO::Argument * const args[])
    : servant_ (servant)
      , operation_details_ (operation_details)
      , args_ (args)
  {
  }

  virtual void execute (void)
  {
    TAO::SArg_Traits< ::Param_Test::Bounded_Coffee_Mix>::ret_arg_type retval =
      TAO::Portable_Server::get_ret_arg< ::Param_Test::Bounded_Coffee_Mix> (
        this->operation_details_,
        this->args_);

    TAO::SArg_Traits< ::Param_Test::Bounded_Coffee_Mix>::in_arg_type arg_1 =
      TAO::Portable_Server::get_in_arg< ::Param_Test::Bounded_Coffee_Mix> (
        this->operation_details_,
        this->args_,
        1);

    TAO::SArg_Traits< ::Param_Test::Bounded_Coffee_Mix>::inout_arg_type arg_2 =
      TAO::Portable_Server::get_inout_arg< ::Param_Test::Bounded_Coffee_Mix> (
        this->operation_details_,
        this->args_,
        2);

    TAO::SArg_Traits< ::Param_Test::Bounded_Coffee_Mix>::out_arg_type arg_3 =
      TAO::Portable_Server::get_out_arg< ::Param_Test::Bounded_Coffee_Mix> (
        this->operation_details_,
        this->args_,
        3);

    retval =
      this->servant_->test_bounded_coffe_mix (
        arg_1
        , arg_2
        , arg_3);
  }

private:
  POA_Param_Test * const servant_;
  TAO_Operation_Details const * const operation_details_;
  TAO::Argument * const * const args_;
};

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_ss.cpp:168

void POA_Param_Test::test_bounded_coffe_mix_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::Param_Test::Bounded_Coffee_Mix>::ret_val retval;
  TAO::SArg_Traits< ::Param_Test::Bounded_Coffee_Mix>::in_arg_val _tao_s1;
  TAO::SArg_Traits< ::Param_Test::Bounded_Coffee_Mix>::inout_arg_val _tao_s2;
  TAO::SArg_Traits< ::Param_Test::Bounded_Coffee_Mix>::out_arg_val _tao_s3;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_s1,
      &_tao_s2,
      &_tao_s3
    };

  static size_t const nargs = 4;

  POA_Param_Test * const impl =
    dynamic_cast<POA_Param_Test *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  test_bounded_coffe_mix_Param_Test command (
    impl,
    server_request.operation_details (),
    args);

  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}



// TAO_IDL - Generated from
// be/be_visitor_operation/upcall_command_ss.cpp:80

class test_anyseq_Param_Test
  : public TAO::Upcall_Command
{
public:
  inline test_anyseq_Param_Test (
    POA_Param_Test * servant,
    TAO_Operation_Details const * operation_details,
    TAO::Argument * const args[])
    : servant_ (servant)
      , operation_details_ (operation_details)
      , args_ (args)
  {
  }

  virtual void execute (void)
  {
    TAO::SArg_Traits< ::Param_Test::AnySeq>::ret_arg_type retval =
      TAO::Portable_Server::get_ret_arg< ::Param_Test::AnySeq> (
        this->operation_details_,
        this->args_);

    TAO::SArg_Traits< ::Param_Test::AnySeq>::in_arg_type arg_1 =
      TAO::Portable_Server::get_in_arg< ::Param_Test::AnySeq> (
        this->operation_details_,
        this->args_,
        1);

    TAO::SArg_Traits< ::Param_Test::AnySeq>::inout_arg_type arg_2 =
      TAO::Portable_Server::get_inout_arg< ::Param_Test::AnySeq> (
        this->operation_details_,
        this->args_,
        2);

    TAO::SArg_Traits< ::Param_Test::AnySeq>::out_arg_type arg_3 =
      TAO::Portable_Server::get_out_arg< ::Param_Test::AnySeq> (
        this->operation_details_,
        this->args_,
        3);

    retval =
      this->servant_->test_anyseq (
        arg_1
        , arg_2
        , arg_3);
  }

private:
  POA_Param_Test * const servant_;
  TAO_Operation_Details const * const operation_details_;
  TAO::Argument * const * const args_;
};

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_ss.cpp:168

void POA_Param_Test::test_anyseq_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::Param_Test::AnySeq>::ret_val retval;
  TAO::SArg_Traits< ::Param_Test::AnySeq>::in_arg_val _tao_s1;
  TAO::SArg_Traits< ::Param_Test::AnySeq>::inout_arg_val _tao_s2;
  TAO::SArg_Traits< ::Param_Test::AnySeq>::out_arg_val _tao_s3;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_s1,
      &_tao_s2,
      &_tao_s3
    };

  static size_t const nargs = 4;

  POA_Param_Test * const impl =
    dynamic_cast<POA_Param_Test *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  test_anyseq_Param_Test command (
    impl,
    server_request.operation_details (),
    args);

  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}



// TAO_IDL - Generated from
// be/be_visitor_operation/upcall_command_ss.cpp:80

class test_var_struct_Param_Test
  : public TAO::Upcall_Command
{
public:
  inline test_var_struct_Param_Test (
    POA_Param_Test * servant,
    TAO_Operation_Details const * operation_details,
    TAO::Argument * const args[])
    : servant_ (servant)
      , operation_details_ (operation_details)
      , args_ (args)
  {
  }

  virtual void execute (void)
  {
    TAO::SArg_Traits< ::Param_Test::Var_Struct>::ret_arg_type retval =
      TAO::Portable_Server::get_ret_arg< ::Param_Test::Var_Struct> (
        this->operation_details_,
        this->args_);

    TAO::SArg_Traits< ::Param_Test::Var_Struct>::in_arg_type arg_1 =
      TAO::Portable_Server::get_in_arg< ::Param_Test::Var_Struct> (
        this->operation_details_,
        this->args_,
        1);

    TAO::SArg_Traits< ::Param_Test::Var_Struct>::inout_arg_type arg_2 =
      TAO::Portable_Server::get_inout_arg< ::Param_Test::Var_Struct> (
        this->operation_details_,
        this->args_,
        2);

    TAO::SArg_Traits< ::Param_Test::Var_Struct>::out_arg_type arg_3 =
      TAO::Portable_Server::get_out_arg< ::Param_Test::Var_Struct> (
        this->operation_details_,
        this->args_,
        3);

    retval =
      this->servant_->test_var_struct (
        arg_1
        , arg_2
        , arg_3);
  }

private:
  POA_Param_Test * const servant_;
  TAO_Operation_Details const * const operation_details_;
  TAO::Argument * const * const args_;
};

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_ss.cpp:168

void POA_Param_Test::test_var_struct_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::Param_Test::Var_Struct>::ret_val retval;
  TAO::SArg_Traits< ::Param_Test::Var_Struct>::in_arg_val _tao_s1;
  TAO::SArg_Traits< ::Param_Test::Var_Struct>::inout_arg_val _tao_s2;
  TAO::SArg_Traits< ::Param_Test::Var_Struct>::out_arg_val _tao_s3;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_s1,
      &_tao_s2,
      &_tao_s3
    };

  static size_t const nargs = 4;

  POA_Param_Test * const impl =
    dynamic_cast<POA_Param_Test *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  test_var_struct_Param_Test command (
    impl,
    server_request.operation_details (),
    args);

  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}



// TAO_IDL - Generated from
// be/be_visitor_operation/upcall_command_ss.cpp:80

class test_nested_struct_Param_Test
  : public TAO::Upcall_Command
{
public:
  inline test_nested_struct_Param_Test (
    POA_Param_Test * servant,
    TAO_Operation_Details const * operation_details,
    TAO::Argument * const args[])
    : servant_ (servant)
      , operation_details_ (operation_details)
      , args_ (args)
  {
  }

  virtual void execute (void)
  {
    TAO::SArg_Traits< ::Param_Test::Nested_Struct>::ret_arg_type retval =
      TAO::Portable_Server::get_ret_arg< ::Param_Test::Nested_Struct> (
        this->operation_details_,
        this->args_);

    TAO::SArg_Traits< ::Param_Test::Nested_Struct>::in_arg_type arg_1 =
      TAO::Portable_Server::get_in_arg< ::Param_Test::Nested_Struct> (
        this->operation_details_,
        this->args_,
        1);

    TAO::SArg_Traits< ::Param_Test::Nested_Struct>::inout_arg_type arg_2 =
      TAO::Portable_Server::get_inout_arg< ::Param_Test::Nested_Struct> (
        this->operation_details_,
        this->args_,
        2);

    TAO::SArg_Traits< ::Param_Test::Nested_Struct>::out_arg_type arg_3 =
      TAO::Portable_Server::get_out_arg< ::Param_Test::Nested_Struct> (
        this->operation_details_,
        this->args_,
        3);

    retval =
      this->servant_->test_nested_struct (
        arg_1
        , arg_2
        , arg_3);
  }

private:
  POA_Param_Test * const servant_;
  TAO_Operation_Details const * const operation_details_;
  TAO::Argument * const * const args_;
};

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_ss.cpp:168

void POA_Param_Test::test_nested_struct_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::Param_Test::Nested_Struct>::ret_val retval;
  TAO::SArg_Traits< ::Param_Test::Nested_Struct>::in_arg_val _tao_s1;
  TAO::SArg_Traits< ::Param_Test::Nested_Struct>::inout_arg_val _tao_s2;
  TAO::SArg_Traits< ::Param_Test::Nested_Struct>::out_arg_val _tao_s3;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_s1,
      &_tao_s2,
      &_tao_s3
    };

  static size_t const nargs = 4;

  POA_Param_Test * const impl =
    dynamic_cast<POA_Param_Test *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  test_nested_struct_Param_Test command (
    impl,
    server_request.operation_details (),
    args);

  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}



// TAO_IDL - Generated from
// be/be_visitor_operation/upcall_command_ss.cpp:80

class make_coffee_Param_Test
  : public TAO::Upcall_Command
{
public:
  inline make_coffee_Param_Test (
    POA_Param_Test * servant,
    TAO_Operation_Details const * operation_details,
    TAO::Argument * const args[])
    : servant_ (servant)
      , operation_details_ (operation_details)
      , args_ (args)
  {
  }

  virtual void execute (void)
  {
    TAO::SArg_Traits< ::Coffee>::ret_arg_type retval =
      TAO::Portable_Server::get_ret_arg< ::Coffee> (
        this->operation_details_,
        this->args_);

    retval =
      this->servant_->make_coffee ();
  }

private:
  POA_Param_Test * const servant_;
  TAO_Operation_Details const * const operation_details_;
  TAO::Argument * const * const args_;
};

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_ss.cpp:168

void POA_Param_Test::make_coffee_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::Coffee>::ret_val retval;

  TAO::Argument * const args[] =
    {
      &retval
    };

  static size_t const nargs = 1;

  POA_Param_Test * const impl =
    dynamic_cast<POA_Param_Test *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  make_coffee_Param_Test command (
    impl,
    server_request.operation_details (),
    args);

  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}



// TAO_IDL - Generated from
// be/be_visitor_operation/upcall_command_ss.cpp:80

class test_objref_Param_Test
  : public TAO::Upcall_Command
{
public:
  inline test_objref_Param_Test (
    POA_Param_Test * servant,
    TAO_Operation_Details const * operation_details,
    TAO::Argument * const args[])
    : servant_ (servant)
      , operation_details_ (operation_details)
      , args_ (args)
  {
  }

  virtual void execute (void)
  {
    TAO::SArg_Traits< ::Coffee>::ret_arg_type retval =
      TAO::Portable_Server::get_ret_arg< ::Coffee> (
        this->operation_details_,
        this->args_);

    TAO::SArg_Traits< ::Coffee>::in_arg_type arg_1 =
      TAO::Portable_Server::get_in_arg< ::Coffee> (
        this->operation_details_,
        this->args_,
        1);

    TAO::SArg_Traits< ::Coffee>::inout_arg_type arg_2 =
      TAO::Portable_Server::get_inout_arg< ::Coffee> (
        this->operation_details_,
        this->args_,
        2);

    TAO::SArg_Traits< ::Coffee>::out_arg_type arg_3 =
      TAO::Portable_Server::get_out_arg< ::Coffee> (
        this->operation_details_,
        this->args_,
        3);

    retval =
      this->servant_->test_objref (
        arg_1
        , arg_2
        , arg_3);
  }

private:
  POA_Param_Test * const servant_;
  TAO_Operation_Details const * const operation_details_;
  TAO::Argument * const * const args_;
};

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_ss.cpp:168

void POA_Param_Test::test_objref_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::Coffee>::ret_val retval;
  TAO::SArg_Traits< ::Coffee>::in_arg_val _tao_o1;
  TAO::SArg_Traits< ::Coffee>::inout_arg_val _tao_o2;
  TAO::SArg_Traits< ::Coffee>::out_arg_val _tao_o3;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_o1,
      &_tao_o2,
      &_tao_o3
    };

  static size_t const nargs = 4;

  POA_Param_Test * const impl =
    dynamic_cast<POA_Param_Test *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  test_objref_Param_Test command (
    impl,
    server_request.operation_details (),
    args);

  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}



// TAO_IDL - Generated from
// be/be_visitor_operation/upcall_command_ss.cpp:80

class test_typecode_Param_Test
  : public TAO::Upcall_Command
{
public:
  inline test_typecode_Param_Test (
    POA_Param_Test * servant,
    TAO_Operation_Details const * operation_details,
    TAO::Argument * const args[])
    : servant_ (servant)
      , operation_details_ (operation_details)
      , args_ (args)
  {
  }

  virtual void execute (void)
  {
    TAO::SArg_Traits< ::CORBA::TypeCode>::ret_arg_type retval =
      TAO::Portable_Server::get_ret_arg< ::CORBA::TypeCode> (
        this->operation_details_,
        this->args_);

    TAO::SArg_Traits< ::CORBA::TypeCode>::in_arg_type arg_1 =
      TAO::Portable_Server::get_in_arg< ::CORBA::TypeCode> (
        this->operation_details_,
        this->args_,
        1);

    TAO::SArg_Traits< ::CORBA::TypeCode>::inout_arg_type arg_2 =
      TAO::Portable_Server::get_inout_arg< ::CORBA::TypeCode> (
        this->operation_details_,
        this->args_,
        2);

    TAO::SArg_Traits< ::CORBA::TypeCode>::out_arg_type arg_3 =
      TAO::Portable_Server::get_out_arg< ::CORBA::TypeCode> (
        this->operation_details_,
        this->args_,
        3);

    retval =
      this->servant_->test_typecode (
        arg_1
        , arg_2
        , arg_3);
  }

private:
  POA_Param_Test * const servant_;
  TAO_Operation_Details const * const operation_details_;
  TAO::Argument * const * const args_;
};

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_ss.cpp:168

void POA_Param_Test::test_typecode_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::CORBA::TypeCode>::ret_val retval;
  TAO::SArg_Traits< ::CORBA::TypeCode>::in_arg_val _tao_t1;
  TAO::SArg_Traits< ::CORBA::TypeCode>::inout_arg_val _tao_t2;
  TAO::SArg_Traits< ::CORBA::TypeCode>::out_arg_val _tao_t3;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_t1,
      &_tao_t2,
      &_tao_t3
    };

  static size_t const nargs = 4;

  POA_Param_Test * const impl =
    dynamic_cast<POA_Param_Test *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  test_typecode_Param_Test command (
    impl,
    server_request.operation_details (),
    args);

  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}



// TAO_IDL - Generated from
// be/be_visitor_operation/upcall_command_ss.cpp:80

class test_any_Param_Test
  : public TAO::Upcall_Command
{
public:
  inline test_any_Param_Test (
    POA_Param_Test * servant,
    TAO_Operation_Details const * operation_details,
    TAO::Argument * const args[])
    : servant_ (servant)
      , operation_details_ (operation_details)
      , args_ (args)
  {
  }

  virtual void execute (void)
  {
    TAO::SArg_Traits< ::CORBA::Any>::ret_arg_type retval =
      TAO::Portable_Server::get_ret_arg< ::CORBA::Any> (
        this->operation_details_,
        this->args_);

    TAO::SArg_Traits< ::CORBA::Any>::in_arg_type arg_1 =
      TAO::Portable_Server::get_in_arg< ::CORBA::Any> (
        this->operation_details_,
        this->args_,
        1);

    TAO::SArg_Traits< ::CORBA::Any>::inout_arg_type arg_2 =
      TAO::Portable_Server::get_inout_arg< ::CORBA::Any> (
        this->operation_details_,
        this->args_,
        2);

    TAO::SArg_Traits< ::CORBA::Any>::out_arg_type arg_3 =
      TAO::Portable_Server::get_out_arg< ::CORBA::Any> (
        this->operation_details_,
        this->args_,
        3);

    retval =
      this->servant_->test_any (
        arg_1
        , arg_2
        , arg_3);
  }

private:
  POA_Param_Test * const servant_;
  TAO_Operation_Details const * const operation_details_;
  TAO::Argument * const * const args_;
};

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_ss.cpp:168

void POA_Param_Test::test_any_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::CORBA::Any>::ret_val retval;
  TAO::SArg_Traits< ::CORBA::Any>::in_arg_val _tao_a1;
  TAO::SArg_Traits< ::CORBA::Any>::inout_arg_val _tao_a2;
  TAO::SArg_Traits< ::CORBA::Any>::out_arg_val _tao_a3;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_a1,
      &_tao_a2,
      &_tao_a3
    };

  static size_t const nargs = 4;

  POA_Param_Test * const impl =
    dynamic_cast<POA_Param_Test *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  test_any_Param_Test command (
    impl,
    server_request.operation_details (),
    args);

  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}



// TAO_IDL - Generated from
// be/be_visitor_operation/upcall_command_ss.cpp:80

class test_objref_struct_Param_Test
  : public TAO::Upcall_Command
{
public:
  inline test_objref_struct_Param_Test (
    POA_Param_Test * servant,
    TAO_Operation_Details const * operation_details,
    TAO::Argument * const args[])
    : servant_ (servant)
      , operation_details_ (operation_details)
      , args_ (args)
  {
  }

  virtual void execute (void)
  {
    TAO::SArg_Traits< ::Param_Test::Objref_Struct>::ret_arg_type retval =
      TAO::Portable_Server::get_ret_arg< ::Param_Test::Objref_Struct> (
        this->operation_details_,
        this->args_);

    TAO::SArg_Traits< ::Param_Test::Objref_Struct>::in_arg_type arg_1 =
      TAO::Portable_Server::get_in_arg< ::Param_Test::Objref_Struct> (
        this->operation_details_,
        this->args_,
        1);

    TAO::SArg_Traits< ::Param_Test::Objref_Struct>::inout_arg_type arg_2 =
      TAO::Portable_Server::get_inout_arg< ::Param_Test::Objref_Struct> (
        this->operation_details_,
        this->args_,
        2);

    TAO::SArg_Traits< ::Param_Test::Objref_Struct>::out_arg_type arg_3 =
      TAO::Portable_Server::get_out_arg< ::Param_Test::Objref_Struct> (
        this->operation_details_,
        this->args_,
        3);

    retval =
      this->servant_->test_objref_struct (
        arg_1
        , arg_2
        , arg_3);
  }

private:
  POA_Param_Test * const servant_;
  TAO_Operation_Details const * const operation_details_;
  TAO::Argument * const * const args_;
};

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_ss.cpp:168

void POA_Param_Test::test_objref_struct_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::Param_Test::Objref_Struct>::ret_val retval;
  TAO::SArg_Traits< ::Param_Test::Objref_Struct>::in_arg_val _tao_t1;
  TAO::SArg_Traits< ::Param_Test::Objref_Struct>::inout_arg_val _tao_t2;
  TAO::SArg_Traits< ::Param_Test::Objref_Struct>::out_arg_val _tao_t3;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_t1,
      &_tao_t2,
      &_tao_t3
    };

  static size_t const nargs = 4;

  POA_Param_Test * const impl =
    dynamic_cast<POA_Param_Test *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  test_objref_struct_Param_Test command (
    impl,
    server_request.operation_details (),
    args);

  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}



// TAO_IDL - Generated from
// be/be_visitor_operation/upcall_command_ss.cpp:80

class test_fixed_array_Param_Test
  : public TAO::Upcall_Command
{
public:
  inline test_fixed_array_Param_Test (
    POA_Param_Test * servant,
    TAO_Operation_Details const * operation_details,
    TAO::Argument * const args[])
    : servant_ (servant)
      , operation_details_ (operation_details)
      , args_ (args)
  {
  }

  virtual void execute (void)
  {
    TAO::SArg_Traits< ::Param_Test::Fixed_Array_tag>::ret_arg_type retval =
      TAO::Portable_Server::get_ret_arg< ::Param_Test::Fixed_Array_tag> (
        this->operation_details_,
        this->args_);

    TAO::SArg_Traits< ::Param_Test::Fixed_Array_tag>::in_arg_type arg_1 =
      TAO::Portable_Server::get_in_arg< ::Param_Test::Fixed_Array_tag> (
        this->operation_details_,
        this->args_,
        1);

    TAO::SArg_Traits< ::Param_Test::Fixed_Array_tag>::inout_arg_type arg_2 =
      TAO::Portable_Server::get_inout_arg< ::Param_Test::Fixed_Array_tag> (
        this->operation_details_,
        this->args_,
        2);

    TAO::SArg_Traits< ::Param_Test::Fixed_Array_tag>::out_arg_type arg_3 =
      TAO::Portable_Server::get_out_arg< ::Param_Test::Fixed_Array_tag> (
        this->operation_details_,
        this->args_,
        3);

    retval =
      this->servant_->test_fixed_array (
        arg_1
        , arg_2
        , arg_3);
  }

private:
  POA_Param_Test * const servant_;
  TAO_Operation_Details const * const operation_details_;
  TAO::Argument * const * const args_;
};

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_ss.cpp:168

void POA_Param_Test::test_fixed_array_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::Param_Test::Fixed_Array_tag>::ret_val retval;
  TAO::SArg_Traits< ::Param_Test::Fixed_Array_tag>::in_arg_val _tao_l1;
  TAO::SArg_Traits< ::Param_Test::Fixed_Array_tag>::inout_arg_val _tao_l2;
  TAO::SArg_Traits< ::Param_Test::Fixed_Array_tag>::out_arg_val _tao_l3;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_l1,
      &_tao_l2,
      &_tao_l3
    };

  static size_t const nargs = 4;

  POA_Param_Test * const impl =
    dynamic_cast<POA_Param_Test *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  test_fixed_array_Param_Test command (
    impl,
    server_request.operation_details (),
    args);

  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}



// TAO_IDL - Generated from
// be/be_visitor_operation/upcall_command_ss.cpp:80

class test_var_array_Param_Test
  : public TAO::Upcall_Command
{
public:
  inline test_var_array_Param_Test (
    POA_Param_Test * servant,
    TAO_Operation_Details const * operation_details,
    TAO::Argument * const args[])
    : servant_ (servant)
      , operation_details_ (operation_details)
      , args_ (args)
  {
  }

  virtual void execute (void)
  {
    TAO::SArg_Traits< ::Param_Test::Var_Array_tag>::ret_arg_type retval =
      TAO::Portable_Server::get_ret_arg< ::Param_Test::Var_Array_tag> (
        this->operation_details_,
        this->args_);

    TAO::SArg_Traits< ::Param_Test::Var_Array_tag>::in_arg_type arg_1 =
      TAO::Portable_Server::get_in_arg< ::Param_Test::Var_Array_tag> (
        this->operation_details_,
        this->args_,
        1);

    TAO::SArg_Traits< ::Param_Test::Var_Array_tag>::inout_arg_type arg_2 =
      TAO::Portable_Server::get_inout_arg< ::Param_Test::Var_Array_tag> (
        this->operation_details_,
        this->args_,
        2);

    TAO::SArg_Traits< ::Param_Test::Var_Array_tag>::out_arg_type arg_3 =
      TAO::Portable_Server::get_out_arg< ::Param_Test::Var_Array_tag> (
        this->operation_details_,
        this->args_,
        3);

    retval =
      this->servant_->test_var_array (
        arg_1
        , arg_2
        , arg_3);
  }

private:
  POA_Param_Test * const servant_;
  TAO_Operation_Details const * const operation_details_;
  TAO::Argument * const * const args_;
};

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_ss.cpp:168

void POA_Param_Test::test_var_array_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::Param_Test::Var_Array_tag>::ret_val retval;
  TAO::SArg_Traits< ::Param_Test::Var_Array_tag>::in_arg_val _tao_v1;
  TAO::SArg_Traits< ::Param_Test::Var_Array_tag>::inout_arg_val _tao_v2;
  TAO::SArg_Traits< ::Param_Test::Var_Array_tag>::out_arg_val _tao_v3;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_v1,
      &_tao_v2,
      &_tao_v3
    };

  static size_t const nargs = 4;

  POA_Param_Test * const impl =
    dynamic_cast<POA_Param_Test *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  test_var_array_Param_Test command (
    impl,
    server_request.operation_details (),
    args);

  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}



// TAO_IDL - Generated from
// be/be_visitor_operation/upcall_command_ss.cpp:80

class test_array_sequence_Param_Test
  : public TAO::Upcall_Command
{
public:
  inline test_array_sequence_Param_Test (
    POA_Param_Test * servant,
    TAO_Operation_Details const * operation_details,
    TAO::Argument * const args[])
    : servant_ (servant)
      , operation_details_ (operation_details)
      , args_ (args)
  {
  }

  virtual void execute (void)
  {
    TAO::SArg_Traits< ::Param_Test::ArraySeq>::ret_arg_type retval =
      TAO::Portable_Server::get_ret_arg< ::Param_Test::ArraySeq> (
        this->operation_details_,
        this->args_);

    TAO::SArg_Traits< ::Param_Test::ArraySeq>::in_arg_type arg_1 =
      TAO::Portable_Server::get_in_arg< ::Param_Test::ArraySeq> (
        this->operation_details_,
        this->args_,
        1);

    TAO::SArg_Traits< ::Param_Test::ArraySeq>::inout_arg_type arg_2 =
      TAO::Portable_Server::get_inout_arg< ::Param_Test::ArraySeq> (
        this->operation_details_,
        this->args_,
        2);

    TAO::SArg_Traits< ::Param_Test::ArraySeq>::out_arg_type arg_3 =
      TAO::Portable_Server::get_out_arg< ::Param_Test::ArraySeq> (
        this->operation_details_,
        this->args_,
        3);

    retval =
      this->servant_->test_array_sequence (
        arg_1
        , arg_2
        , arg_3);
  }

private:
  POA_Param_Test * const servant_;
  TAO_Operation_Details const * const operation_details_;
  TAO::Argument * const * const args_;
};

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_ss.cpp:168

void POA_Param_Test::test_array_sequence_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::Param_Test::ArraySeq>::ret_val retval;
  TAO::SArg_Traits< ::Param_Test::ArraySeq>::in_arg_val _tao_s1;
  TAO::SArg_Traits< ::Param_Test::ArraySeq>::inout_arg_val _tao_s2;
  TAO::SArg_Traits< ::Param_Test::ArraySeq>::out_arg_val _tao_s3;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_s1,
      &_tao_s2,
      &_tao_s3
    };

  static size_t const nargs = 4;

  POA_Param_Test * const impl =
    dynamic_cast<POA_Param_Test *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  test_array_sequence_Param_Test command (
    impl,
    server_request.operation_details (),
    args);

  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}



// TAO_IDL - Generated from
// be/be_visitor_operation/upcall_command_ss.cpp:80

class test_bounded_array_sequence_Param_Test
  : public TAO::Upcall_Command
{
public:
  inline test_bounded_array_sequence_Param_Test (
    POA_Param_Test * servant,
    TAO_Operation_Details const * operation_details,
    TAO::Argument * const args[])
    : servant_ (servant)
      , operation_details_ (operation_details)
      , args_ (args)
  {
  }

  virtual void execute (void)
  {
    TAO::SArg_Traits< ::Param_Test::Bounded_ArraySeq>::ret_arg_type retval =
      TAO::Portable_Server::get_ret_arg< ::Param_Test::Bounded_ArraySeq> (
        this->operation_details_,
        this->args_);

    TAO::SArg_Traits< ::Param_Test::Bounded_ArraySeq>::in_arg_type arg_1 =
      TAO::Portable_Server::get_in_arg< ::Param_Test::Bounded_ArraySeq> (
        this->operation_details_,
        this->args_,
        1);

    TAO::SArg_Traits< ::Param_Test::Bounded_ArraySeq>::inout_arg_type arg_2 =
      TAO::Portable_Server::get_inout_arg< ::Param_Test::Bounded_ArraySeq> (
        this->operation_details_,
        this->args_,
        2);

    TAO::SArg_Traits< ::Param_Test::Bounded_ArraySeq>::out_arg_type arg_3 =
      TAO::Portable_Server::get_out_arg< ::Param_Test::Bounded_ArraySeq> (
        this->operation_details_,
        this->args_,
        3);

    retval =
      this->servant_->test_bounded_array_sequence (
        arg_1
        , arg_2
        , arg_3);
  }

private:
  POA_Param_Test * const servant_;
  TAO_Operation_Details const * const operation_details_;
  TAO::Argument * const * const args_;
};

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_ss.cpp:168

void POA_Param_Test::test_bounded_array_sequence_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::Param_Test::Bounded_ArraySeq>::ret_val retval;
  TAO::SArg_Traits< ::Param_Test::Bounded_ArraySeq>::in_arg_val _tao_s1;
  TAO::SArg_Traits< ::Param_Test::Bounded_ArraySeq>::inout_arg_val _tao_s2;
  TAO::SArg_Traits< ::Param_Test::Bounded_ArraySeq>::out_arg_val _tao_s3;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_s1,
      &_tao_s2,
      &_tao_s3
    };

  static size_t const nargs = 4;

  POA_Param_Test * const impl =
    dynamic_cast<POA_Param_Test *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  test_bounded_array_sequence_Param_Test command (
    impl,
    server_request.operation_details (),
    args);

  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}



// TAO_IDL - Generated from
// be/be_visitor_operation/upcall_command_ss.cpp:80

class test_exception_Param_Test
  : public TAO::Upcall_Command
{
public:
  inline test_exception_Param_Test (
    POA_Param_Test * servant,
    TAO_Operation_Details const * operation_details,
    TAO::Argument * const args[])
    : servant_ (servant)
      , operation_details_ (operation_details)
      , args_ (args)
  {
  }

  virtual void execute (void)
  {
    TAO::SArg_Traits< ::CORBA::ULong>::ret_arg_type retval =
      TAO::Portable_Server::get_ret_arg< ::CORBA::ULong> (
        this->operation_details_,
        this->args_);

    TAO::SArg_Traits< ::CORBA::ULong>::in_arg_type arg_1 =
      TAO::Portable_Server::get_in_arg< ::CORBA::ULong> (
        this->operation_details_,
        this->args_,
        1);

    TAO::SArg_Traits< ::CORBA::ULong>::inout_arg_type arg_2 =
      TAO::Portable_Server::get_inout_arg< ::CORBA::ULong> (
        this->operation_details_,
        this->args_,
        2);

    TAO::SArg_Traits< ::CORBA::ULong>::out_arg_type arg_3 =
      TAO::Portable_Server::get_out_arg< ::CORBA::ULong> (
        this->operation_details_,
        this->args_,
        3);

    retval =
      this->servant_->test_exception (
        arg_1
        , arg_2
        , arg_3);
  }

private:
  POA_Param_Test * const servant_;
  TAO_Operation_Details const * const operation_details_;
  TAO::Argument * const * const args_;
};

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_ss.cpp:168

void POA_Param_Test::test_exception_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const exceptions[] =
    {
      Param_Test::_tc_Ooops
    };
  static ::CORBA::ULong const nexceptions = 1;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::CORBA::ULong>::ret_val retval;
  TAO::SArg_Traits< ::CORBA::ULong>::in_arg_val _tao_s1;
  TAO::SArg_Traits< ::CORBA::ULong>::inout_arg_val _tao_s2;
  TAO::SArg_Traits< ::CORBA::ULong>::out_arg_val _tao_s3;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_s1,
      &_tao_s2,
      &_tao_s3
    };

  static size_t const nargs = 4;

  POA_Param_Test * const impl =
    dynamic_cast<POA_Param_Test *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  test_exception_Param_Test command (
    impl,
    server_request.operation_details (),
    args);

  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}



// TAO_IDL - Generated from
// be/be_visitor_operation/upcall_command_ss.cpp:80

class test_big_union_Param_Test
  : public TAO::Upcall_Command
{
public:
  inline test_big_union_Param_Test (
    POA_Param_Test * servant,
    TAO_Operation_Details const * operation_details,
    TAO::Argument * const args[])
    : servant_ (servant)
      , operation_details_ (operation_details)
      , args_ (args)
  {
  }

  virtual void execute (void)
  {
    TAO::SArg_Traits< ::Param_Test::Big_Union>::ret_arg_type retval =
      TAO::Portable_Server::get_ret_arg< ::Param_Test::Big_Union> (
        this->operation_details_,
        this->args_);

    TAO::SArg_Traits< ::Param_Test::Big_Union>::in_arg_type arg_1 =
      TAO::Portable_Server::get_in_arg< ::Param_Test::Big_Union> (
        this->operation_details_,
        this->args_,
        1);

    TAO::SArg_Traits< ::Param_Test::Big_Union>::inout_arg_type arg_2 =
      TAO::Portable_Server::get_inout_arg< ::Param_Test::Big_Union> (
        this->operation_details_,
        this->args_,
        2);

    TAO::SArg_Traits< ::Param_Test::Big_Union>::out_arg_type arg_3 =
      TAO::Portable_Server::get_out_arg< ::Param_Test::Big_Union> (
        this->operation_details_,
        this->args_,
        3);

    retval =
      this->servant_->test_big_union (
        arg_1
        , arg_2
        , arg_3);
  }

private:
  POA_Param_Test * const servant_;
  TAO_Operation_Details const * const operation_details_;
  TAO::Argument * const * const args_;
};

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_ss.cpp:168

void POA_Param_Test::test_big_union_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::Param_Test::Big_Union>::ret_val retval;
  TAO::SArg_Traits< ::Param_Test::Big_Union>::in_arg_val _tao_u1;
  TAO::SArg_Traits< ::Param_Test::Big_Union>::inout_arg_val _tao_u2;
  TAO::SArg_Traits< ::Param_Test::Big_Union>::out_arg_val _tao_u3;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_u1,
      &_tao_u2,
      &_tao_u3
    };

  static size_t const nargs = 4;

  POA_Param_Test * const impl =
    dynamic_cast<POA_Param_Test *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  test_big_union_Param_Test command (
    impl,
    server_request.operation_details (),
    args);

  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}



// TAO_IDL - Generated from
// be/be_visitor_operation/upcall_command_ss.cpp:80

class test_small_union_Param_Test
  : public TAO::Upcall_Command
{
public:
  inline test_small_union_Param_Test (
    POA_Param_Test * servant,
    TAO_Operation_Details const * operation_details,
    TAO::Argument * const args[])
    : servant_ (servant)
      , operation_details_ (operation_details)
      , args_ (args)
  {
  }

  virtual void execute (void)
  {
    TAO::SArg_Traits< ::Param_Test::Small_Union>::ret_arg_type retval =
      TAO::Portable_Server::get_ret_arg< ::Param_Test::Small_Union> (
        this->operation_details_,
        this->args_);

    TAO::SArg_Traits< ::Param_Test::Small_Union>::in_arg_type arg_1 =
      TAO::Portable_Server::get_in_arg< ::Param_Test::Small_Union> (
        this->operation_details_,
        this->args_,
        1);

    TAO::SArg_Traits< ::Param_Test::Small_Union>::inout_arg_type arg_2 =
      TAO::Portable_Server::get_inout_arg< ::Param_Test::Small_Union> (
        this->operation_details_,
        this->args_,
        2);

    TAO::SArg_Traits< ::Param_Test::Small_Union>::out_arg_type arg_3 =
      TAO::Portable_Server::get_out_arg< ::Param_Test::Small_Union> (
        this->operation_details_,
        this->args_,
        3);

    retval =
      this->servant_->test_small_union (
        arg_1
        , arg_2
        , arg_3);
  }

private:
  POA_Param_Test * const servant_;
  TAO_Operation_Details const * const operation_details_;
  TAO::Argument * const * const args_;
};

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_ss.cpp:168

void POA_Param_Test::test_small_union_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::Param_Test::Small_Union>::ret_val retval;
  TAO::SArg_Traits< ::Param_Test::Small_Union>::in_arg_val _tao_u1;
  TAO::SArg_Traits< ::Param_Test::Small_Union>::inout_arg_val _tao_u2;
  TAO::SArg_Traits< ::Param_Test::Small_Union>::out_arg_val _tao_u3;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_u1,
      &_tao_u2,
      &_tao_u3
    };

  static size_t const nargs = 4;

  POA_Param_Test * const impl =
    dynamic_cast<POA_Param_Test *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  test_small_union_Param_Test command (
    impl,
    server_request.operation_details (),
    args);

  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}



// TAO_IDL - Generated from
// be/be_visitor_operation/upcall_command_ss.cpp:80

class test_complex_any_Param_Test
  : public TAO::Upcall_Command
{
public:
  inline test_complex_any_Param_Test (
    POA_Param_Test * servant,
    TAO_Operation_Details const * operation_details,
    TAO::Argument * const args[])
    : servant_ (servant)
      , operation_details_ (operation_details)
      , args_ (args)
  {
  }

  virtual void execute (void)
  {
    TAO::SArg_Traits< ::CORBA::Any>::ret_arg_type retval =
      TAO::Portable_Server::get_ret_arg< ::CORBA::Any> (
        this->operation_details_,
        this->args_);

    TAO::SArg_Traits< ::CORBA::Any>::in_arg_type arg_1 =
      TAO::Portable_Server::get_in_arg< ::CORBA::Any> (
        this->operation_details_,
        this->args_,
        1);

    TAO::SArg_Traits< ::CORBA::Any>::inout_arg_type arg_2 =
      TAO::Portable_Server::get_inout_arg< ::CORBA::Any> (
        this->operation_details_,
        this->args_,
        2);

    TAO::SArg_Traits< ::CORBA::Any>::out_arg_type arg_3 =
      TAO::Portable_Server::get_out_arg< ::CORBA::Any> (
        this->operation_details_,
        this->args_,
        3);

    retval =
      this->servant_->test_complex_any (
        arg_1
        , arg_2
        , arg_3);
  }

private:
  POA_Param_Test * const servant_;
  TAO_Operation_Details const * const operation_details_;
  TAO::Argument * const * const args_;
};

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_ss.cpp:168

void POA_Param_Test::test_complex_any_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::CORBA::Any>::ret_val retval;
  TAO::SArg_Traits< ::CORBA::Any>::in_arg_val _tao_ca1;
  TAO::SArg_Traits< ::CORBA::Any>::inout_arg_val _tao_ca2;
  TAO::SArg_Traits< ::CORBA::Any>::out_arg_val _tao_ca3;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_ca1,
      &_tao_ca2,
      &_tao_ca3
    };

  static size_t const nargs = 4;

  POA_Param_Test * const impl =
    dynamic_cast<POA_Param_Test *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  test_complex_any_Param_Test command (
    impl,
    server_request.operation_details (),
    args);

  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}



// TAO_IDL - Generated from
// be/be_visitor_operation/upcall_command_ss.cpp:80

class test_recursive_struct_Param_Test
  : public TAO::Upcall_Command
{
public:
  inline test_recursive_struct_Param_Test (
    POA_Param_Test * servant,
    TAO_Operation_Details const * operation_details,
    TAO::Argument * const args[])
    : servant_ (servant)
      , operation_details_ (operation_details)
      , args_ (args)
  {
  }

  virtual void execute (void)
  {
    TAO::SArg_Traits< ::Param_Test::Recursive_Struct>::ret_arg_type retval =
      TAO::Portable_Server::get_ret_arg< ::Param_Test::Recursive_Struct> (
        this->operation_details_,
        this->args_);

    TAO::SArg_Traits< ::Param_Test::Recursive_Struct>::in_arg_type arg_1 =
      TAO::Portable_Server::get_in_arg< ::Param_Test::Recursive_Struct> (
        this->operation_details_,
        this->args_,
        1);

    TAO::SArg_Traits< ::Param_Test::Recursive_Struct>::inout_arg_type arg_2 =
      TAO::Portable_Server::get_inout_arg< ::Param_Test::Recursive_Struct> (
        this->operation_details_,
        this->args_,
        2);

    TAO::SArg_Traits< ::Param_Test::Recursive_Struct>::out_arg_type arg_3 =
      TAO::Portable_Server::get_out_arg< ::Param_Test::Recursive_Struct> (
        this->operation_details_,
        this->args_,
        3);

    retval =
      this->servant_->test_recursive_struct (
        arg_1
        , arg_2
        , arg_3);
  }

private:
  POA_Param_Test * const servant_;
  TAO_Operation_Details const * const operation_details_;
  TAO::Argument * const * const args_;
};

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_ss.cpp:168

void POA_Param_Test::test_recursive_struct_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::Param_Test::Recursive_Struct>::ret_val retval;
  TAO::SArg_Traits< ::Param_Test::Recursive_Struct>::in_arg_val _tao_rs1;
  TAO::SArg_Traits< ::Param_Test::Recursive_Struct>::inout_arg_val _tao_rs2;
  TAO::SArg_Traits< ::Param_Test::Recursive_Struct>::out_arg_val _tao_rs3;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_rs1,
      &_tao_rs2,
      &_tao_rs3
    };

  static size_t const nargs = 4;

  POA_Param_Test * const impl =
    dynamic_cast<POA_Param_Test *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  test_recursive_struct_Param_Test command (
    impl,
    server_request.operation_details (),
    args);

  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}



// TAO_IDL - Generated from
// be/be_visitor_operation/upcall_command_ss.cpp:80

class test_recursive_union_Param_Test
  : public TAO::Upcall_Command
{
public:
  inline test_recursive_union_Param_Test (
    POA_Param_Test * servant,
    TAO_Operation_Details const * operation_details,
    TAO::Argument * const args[])
    : servant_ (servant)
      , operation_details_ (operation_details)
      , args_ (args)
  {
  }

  virtual void execute (void)
  {
    TAO::SArg_Traits< ::Param_Test::Recursive_Union>::ret_arg_type retval =
      TAO::Portable_Server::get_ret_arg< ::Param_Test::Recursive_Union> (
        this->operation_details_,
        this->args_);

    TAO::SArg_Traits< ::Param_Test::Recursive_Union>::in_arg_type arg_1 =
      TAO::Portable_Server::get_in_arg< ::Param_Test::Recursive_Union> (
        this->operation_details_,
        this->args_,
        1);

    TAO::SArg_Traits< ::Param_Test::Recursive_Union>::inout_arg_type arg_2 =
      TAO::Portable_Server::get_inout_arg< ::Param_Test::Recursive_Union> (
        this->operation_details_,
        this->args_,
        2);

    TAO::SArg_Traits< ::Param_Test::Recursive_Union>::out_arg_type arg_3 =
      TAO::Portable_Server::get_out_arg< ::Param_Test::Recursive_Union> (
        this->operation_details_,
        this->args_,
        3);

    retval =
      this->servant_->test_recursive_union (
        arg_1
        , arg_2
        , arg_3);
  }

private:
  POA_Param_Test * const servant_;
  TAO_Operation_Details const * const operation_details_;
  TAO::Argument * const * const args_;
};

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_ss.cpp:168

void POA_Param_Test::test_recursive_union_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::Param_Test::Recursive_Union>::ret_val retval;
  TAO::SArg_Traits< ::Param_Test::Recursive_Union>::in_arg_val _tao_ru1;
  TAO::SArg_Traits< ::Param_Test::Recursive_Union>::inout_arg_val _tao_ru2;
  TAO::SArg_Traits< ::Param_Test::Recursive_Union>::out_arg_val _tao_ru3;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_ru1,
      &_tao_ru2,
      &_tao_ru3
    };

  static size_t const nargs = 4;

  POA_Param_Test * const impl =
    dynamic_cast<POA_Param_Test *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  test_recursive_union_Param_Test command (
    impl,
    server_request.operation_details (),
    args);

  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}



// TAO_IDL - Generated from
// be/be_visitor_operation/upcall_command_ss.cpp:80

class test_multdim_array_Param_Test
  : public TAO::Upcall_Command
{
public:
  inline test_multdim_array_Param_Test (
    POA_Param_Test * servant,
    TAO_Operation_Details const * operation_details,
    TAO::Argument * const args[])
    : servant_ (servant)
      , operation_details_ (operation_details)
      , args_ (args)
  {
  }

  virtual void execute (void)
  {
    TAO::SArg_Traits< ::Param_Test::Multdim_Array_tag>::ret_arg_type retval =
      TAO::Portable_Server::get_ret_arg< ::Param_Test::Multdim_Array_tag> (
        this->operation_details_,
        this->args_);

    TAO::SArg_Traits< ::Param_Test::Multdim_Array_tag>::in_arg_type arg_1 =
      TAO::Portable_Server::get_in_arg< ::Param_Test::Multdim_Array_tag> (
        this->operation_details_,
        this->args_,
        1);

    TAO::SArg_Traits< ::Param_Test::Multdim_Array_tag>::inout_arg_type arg_2 =
      TAO::Portable_Server::get_inout_arg< ::Param_Test::Multdim_Array_tag> (
        this->operation_details_,
        this->args_,
        2);

    TAO::SArg_Traits< ::Param_Test::Multdim_Array_tag>::out_arg_type arg_3 =
      TAO::Portable_Server::get_out_arg< ::Param_Test::Multdim_Array_tag> (
        this->operation_details_,
        this->args_,
        3);

    retval =
      this->servant_->test_multdim_array (
        arg_1
        , arg_2
        , arg_3);
  }

private:
  POA_Param_Test * const servant_;
  TAO_Operation_Details const * const operation_details_;
  TAO::Argument * const * const args_;
};

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_ss.cpp:168

void POA_Param_Test::test_multdim_array_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::Param_Test::Multdim_Array_tag>::ret_val retval;
  TAO::SArg_Traits< ::Param_Test::Multdim_Array_tag>::in_arg_val _tao_m1;
  TAO::SArg_Traits< ::Param_Test::Multdim_Array_tag>::inout_arg_val _tao_m2;
  TAO::SArg_Traits< ::Param_Test::Multdim_Array_tag>::out_arg_val _tao_m3;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_m1,
      &_tao_m2,
      &_tao_m3
    };

  static size_t const nargs = 4;

  POA_Param_Test * const impl =
    dynamic_cast<POA_Param_Test *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  test_multdim_array_Param_Test command (
    impl,
    server_request.operation_details (),
    args);

  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}



// TAO_IDL - Generated from
// be/be_visitor_interface/interface_ss.cpp:163



::CORBA::Boolean POA_Param_Test::_is_a (const char* value)
{
  return
    (
      ACE_OS::strcmp (
          value,
          "IDL:Param_Test:1.0"
        ) == 0 ||
      !ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        )
    );
}

const char* POA_Param_Test::_interface_repository_id (void) const
{
  return "IDL:Param_Test:1.0";
}

// TAO_IDL - Generated from
// be/be_visitor_interface/interface_ss.cpp:423

void POA_Param_Test::_dispatch (
  TAO_ServerRequest & req,
  TAO::Portable_Server::Servant_Upcall* servant_upcall)
{
  this->synchronous_upcall_dispatch (req, servant_upcall, this);
}

// TAO_IDL - Generated from
// be/be_visitor_interface/interface_ss.cpp:370

Param_Test *
POA_Param_Test::_this (void)
{
  TAO_Stub *stub = this->_create_stub ();

  TAO_Stub_Auto_Ptr safe_stub (stub);
  ::CORBA::Object_ptr tmp = CORBA::Object_ptr ();

  ::CORBA::Boolean const _tao_opt_colloc =
    stub->servant_orb_var ()->orb_core ()->optimize_collocation_objects ();

  ACE_NEW_RETURN (
      tmp,
      ::CORBA::Object (stub, _tao_opt_colloc, this),
      0);

  ::CORBA::Object_var obj = tmp;
  (void) safe_stub.release ();

  typedef ::Param_Test STUB_SCOPED_NAME;
  return
    TAO::Narrow_Utils<STUB_SCOPED_NAME>::unchecked_narrow (
        obj.in ());
}

#endif /* ifndef */

