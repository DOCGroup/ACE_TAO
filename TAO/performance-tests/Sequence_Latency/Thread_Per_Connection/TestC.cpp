// -*- C++ -*-
/**
 * Code generated by the The ACE ORB (TAO) IDL Compiler v2.4.1
 * TAO and the TAO IDL Compiler have been developed by:
 *       Center for Distributed Object Computing
 *       Washington University
 *       St. Louis, MO
 *       USA
 *       http://www.cs.wustl.edu/~schmidt/doc-center.html
 * and
 *       Distributed Object Computing Laboratory
 *       University of California at Irvine
 *       Irvine, CA
 *       USA
 * and
 *       Institute for Software Integrated Systems
 *       Vanderbilt University
 *       Nashville, TN
 *       USA
 *       http://www.isis.vanderbilt.edu/
 *
 * Information about TAO is available at:
 *     http://www.dre.vanderbilt.edu/~schmidt/TAO.html
 **/

// TAO_IDL - Generated from
// be/be_codegen.cpp:373


#include "TestC.h"
#include "tao/AnyTypeCode/Null_RefCount_Policy.h"
#include "tao/AnyTypeCode/TypeCode_Constants.h"
#include "tao/AnyTypeCode/Alias_TypeCode_Static.h"
#include "tao/AnyTypeCode/Objref_TypeCode_Static.h"
#include "tao/AnyTypeCode/Sequence_TypeCode_Static.h"
#include "tao/CDR.h"
#include "tao/Exception_Data.h"
#include "tao/Invocation_Adapter.h"
#include "tao/Object_T.h"
#include "tao/ORB_Core.h"
#include "tao/CDR.h"
#include "tao/AnyTypeCode/Any.h"
#include "tao/AnyTypeCode/Any_Impl_T.h"
#include "tao/AnyTypeCode/Any_Dual_Impl_T.h"
#include "ace/OS_NS_string.h"

#if !defined (__ACE_INLINE__)
#include "TestC.inl"
#endif /* !defined INLINE */

// TAO_IDL - Generated from
// be/be_visitor_typecode/alias_typecode.cpp:49

static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_Test_Timestamp (
    ::CORBA::tk_alias,
    "IDL:Test/Timestamp:1.0",
    "Timestamp",
    &CORBA::_tc_ulonglong);


namespace Test
{
  ::CORBA::TypeCode_ptr const _tc_Timestamp =
    &_tao_tc_Test_Timestamp;
}

// TAO_IDL - Generated from
// be/be_visitor_sequence/sequence_cs.cpp:70

#if !defined (_TEST_OCTET_LOAD_CS_)
#define _TEST_OCTET_LOAD_CS_

Test::octet_load::octet_load (void)
{}

Test::octet_load::octet_load (
    ::CORBA::ULong max)
  : ::TAO::unbounded_value_sequence<
        ::CORBA::Octet
      > (max)
{}

Test::octet_load::octet_load (
    ::CORBA::ULong max,
    ::CORBA::ULong length,
    ::CORBA::Octet * buffer,
    ::CORBA::Boolean release
  )
  : ::TAO::unbounded_value_sequence<
        ::CORBA::Octet
      >
    (max, length, buffer, release)
{}

Test::octet_load::octet_load (
    const octet_load &seq)
  : ::TAO::unbounded_value_sequence<
        ::CORBA::Octet
      > (seq)
{}

Test::octet_load::~octet_load (void)
{}

void Test::octet_load::_tao_any_destructor (
    void * _tao_void_pointer)
{
  octet_load * _tao_tmp_pointer =
    static_cast<octet_load *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

#endif /* end #if !defined */

// TAO_IDL - Generated from
// be/be_visitor_typecode/alias_typecode.cpp:49



// TAO_IDL - Generated from
// be/be_visitor_typecode/typecode_defn.cpp:461


#ifndef _TAO_TYPECODE_Test_octet_load_GUARD
#define _TAO_TYPECODE_Test_octet_load_GUARD

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

namespace TAO
{
  namespace TypeCode
  {
    namespace
    {
      TAO::TypeCode::Sequence< ::CORBA::TypeCode_ptr const *,
                              TAO::Null_RefCount_Policy>
        Test_octet_load_0 (
          ::CORBA::tk_sequence,
          &CORBA::_tc_octet,
          0U);

      ::CORBA::TypeCode_ptr const tc_Test_octet_load_0 =
        &Test_octet_load_0;
    }
  }
}

TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_TYPECODE_Test_octet_load_GUARD */

static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_Test_octet_load (
    ::CORBA::tk_alias,
    "IDL:Test/octet_load:1.0",
    "octet_load",
    &TAO::TypeCode::tc_Test_octet_load_0);


namespace Test
{
  ::CORBA::TypeCode_ptr const _tc_octet_load =
    &_tao_tc_Test_octet_load;
}

// TAO_IDL - Generated from
// be/be_visitor_sequence/sequence_cs.cpp:70

#if !defined (_TEST_LONG_LOAD_CS_)
#define _TEST_LONG_LOAD_CS_

Test::long_load::long_load (void)
{}

Test::long_load::long_load (
    ::CORBA::ULong max)
  : ::TAO::unbounded_value_sequence<
        ::CORBA::Long
      > (max)
{}

Test::long_load::long_load (
    ::CORBA::ULong max,
    ::CORBA::ULong length,
    ::CORBA::Long * buffer,
    ::CORBA::Boolean release
  )
  : ::TAO::unbounded_value_sequence<
        ::CORBA::Long
      >
    (max, length, buffer, release)
{}

Test::long_load::long_load (
    const long_load &seq)
  : ::TAO::unbounded_value_sequence<
        ::CORBA::Long
      > (seq)
{}

Test::long_load::~long_load (void)
{}

void Test::long_load::_tao_any_destructor (
    void * _tao_void_pointer)
{
  long_load * _tao_tmp_pointer =
    static_cast<long_load *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

#endif /* end #if !defined */

// TAO_IDL - Generated from
// be/be_visitor_typecode/alias_typecode.cpp:49



// TAO_IDL - Generated from
// be/be_visitor_typecode/typecode_defn.cpp:461


#ifndef _TAO_TYPECODE_Test_long_load_GUARD
#define _TAO_TYPECODE_Test_long_load_GUARD

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

namespace TAO
{
  namespace TypeCode
  {
    namespace
    {
      TAO::TypeCode::Sequence< ::CORBA::TypeCode_ptr const *,
                              TAO::Null_RefCount_Policy>
        Test_long_load_0 (
          ::CORBA::tk_sequence,
          &CORBA::_tc_long,
          0U);

      ::CORBA::TypeCode_ptr const tc_Test_long_load_0 =
        &Test_long_load_0;
    }
  }
}

TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_TYPECODE_Test_long_load_GUARD */

static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_Test_long_load (
    ::CORBA::tk_alias,
    "IDL:Test/long_load:1.0",
    "long_load",
    &TAO::TypeCode::tc_Test_long_load_0);


namespace Test
{
  ::CORBA::TypeCode_ptr const _tc_long_load =
    &_tao_tc_Test_long_load;
}

// TAO_IDL - Generated from
// be/be_visitor_sequence/sequence_cs.cpp:70

#if !defined (_TEST_CHAR_LOAD_CS_)
#define _TEST_CHAR_LOAD_CS_

Test::char_load::char_load (void)
{}

Test::char_load::char_load (
    ::CORBA::ULong max)
  : ::TAO::unbounded_value_sequence<
        ::CORBA::Char
      > (max)
{}

Test::char_load::char_load (
    ::CORBA::ULong max,
    ::CORBA::ULong length,
    ::CORBA::Char * buffer,
    ::CORBA::Boolean release
  )
  : ::TAO::unbounded_value_sequence<
        ::CORBA::Char
      >
    (max, length, buffer, release)
{}

Test::char_load::char_load (
    const char_load &seq)
  : ::TAO::unbounded_value_sequence<
        ::CORBA::Char
      > (seq)
{}

Test::char_load::~char_load (void)
{}

void Test::char_load::_tao_any_destructor (
    void * _tao_void_pointer)
{
  char_load * _tao_tmp_pointer =
    static_cast<char_load *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

#endif /* end #if !defined */

// TAO_IDL - Generated from
// be/be_visitor_typecode/alias_typecode.cpp:49



// TAO_IDL - Generated from
// be/be_visitor_typecode/typecode_defn.cpp:461


#ifndef _TAO_TYPECODE_Test_char_load_GUARD
#define _TAO_TYPECODE_Test_char_load_GUARD

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

namespace TAO
{
  namespace TypeCode
  {
    namespace
    {
      TAO::TypeCode::Sequence< ::CORBA::TypeCode_ptr const *,
                              TAO::Null_RefCount_Policy>
        Test_char_load_0 (
          ::CORBA::tk_sequence,
          &CORBA::_tc_char,
          0U);

      ::CORBA::TypeCode_ptr const tc_Test_char_load_0 =
        &Test_char_load_0;
    }
  }
}

TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_TYPECODE_Test_char_load_GUARD */

static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_Test_char_load (
    ::CORBA::tk_alias,
    "IDL:Test/char_load:1.0",
    "char_load",
    &TAO::TypeCode::tc_Test_char_load_0);


namespace Test
{
  ::CORBA::TypeCode_ptr const _tc_char_load =
    &_tao_tc_Test_char_load;
}

// TAO_IDL - Generated from
// be/be_visitor_sequence/sequence_cs.cpp:70

#if !defined (_TEST_SHORT_LOAD_CS_)
#define _TEST_SHORT_LOAD_CS_

Test::short_load::short_load (void)
{}

Test::short_load::short_load (
    ::CORBA::ULong max)
  : ::TAO::unbounded_value_sequence<
        ::CORBA::Short
      > (max)
{}

Test::short_load::short_load (
    ::CORBA::ULong max,
    ::CORBA::ULong length,
    ::CORBA::Short * buffer,
    ::CORBA::Boolean release
  )
  : ::TAO::unbounded_value_sequence<
        ::CORBA::Short
      >
    (max, length, buffer, release)
{}

Test::short_load::short_load (
    const short_load &seq)
  : ::TAO::unbounded_value_sequence<
        ::CORBA::Short
      > (seq)
{}

Test::short_load::~short_load (void)
{}

void Test::short_load::_tao_any_destructor (
    void * _tao_void_pointer)
{
  short_load * _tao_tmp_pointer =
    static_cast<short_load *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

#endif /* end #if !defined */

// TAO_IDL - Generated from
// be/be_visitor_typecode/alias_typecode.cpp:49



// TAO_IDL - Generated from
// be/be_visitor_typecode/typecode_defn.cpp:461


#ifndef _TAO_TYPECODE_Test_short_load_GUARD
#define _TAO_TYPECODE_Test_short_load_GUARD

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

namespace TAO
{
  namespace TypeCode
  {
    namespace
    {
      TAO::TypeCode::Sequence< ::CORBA::TypeCode_ptr const *,
                              TAO::Null_RefCount_Policy>
        Test_short_load_0 (
          ::CORBA::tk_sequence,
          &CORBA::_tc_short,
          0U);

      ::CORBA::TypeCode_ptr const tc_Test_short_load_0 =
        &Test_short_load_0;
    }
  }
}

TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_TYPECODE_Test_short_load_GUARD */

static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_Test_short_load (
    ::CORBA::tk_alias,
    "IDL:Test/short_load:1.0",
    "short_load",
    &TAO::TypeCode::tc_Test_short_load_0);


namespace Test
{
  ::CORBA::TypeCode_ptr const _tc_short_load =
    &_tao_tc_Test_short_load;
}

// TAO_IDL - Generated from
// be/be_visitor_sequence/sequence_cs.cpp:70

#if !defined (_TEST_LONGLONG_LOAD_CS_)
#define _TEST_LONGLONG_LOAD_CS_

Test::longlong_load::longlong_load (void)
{}

Test::longlong_load::longlong_load (
    ::CORBA::ULong max)
  : ::TAO::unbounded_value_sequence<
        ::CORBA::LongLong
      > (max)
{}

Test::longlong_load::longlong_load (
    ::CORBA::ULong max,
    ::CORBA::ULong length,
    ::CORBA::LongLong * buffer,
    ::CORBA::Boolean release
  )
  : ::TAO::unbounded_value_sequence<
        ::CORBA::LongLong
      >
    (max, length, buffer, release)
{}

Test::longlong_load::longlong_load (
    const longlong_load &seq)
  : ::TAO::unbounded_value_sequence<
        ::CORBA::LongLong
      > (seq)
{}

Test::longlong_load::~longlong_load (void)
{}

void Test::longlong_load::_tao_any_destructor (
    void * _tao_void_pointer)
{
  longlong_load * _tao_tmp_pointer =
    static_cast<longlong_load *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

#endif /* end #if !defined */

// TAO_IDL - Generated from
// be/be_visitor_typecode/alias_typecode.cpp:49



// TAO_IDL - Generated from
// be/be_visitor_typecode/typecode_defn.cpp:461


#ifndef _TAO_TYPECODE_Test_longlong_load_GUARD
#define _TAO_TYPECODE_Test_longlong_load_GUARD

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

namespace TAO
{
  namespace TypeCode
  {
    namespace
    {
      TAO::TypeCode::Sequence< ::CORBA::TypeCode_ptr const *,
                              TAO::Null_RefCount_Policy>
        Test_longlong_load_0 (
          ::CORBA::tk_sequence,
          &CORBA::_tc_longlong,
          0U);

      ::CORBA::TypeCode_ptr const tc_Test_longlong_load_0 =
        &Test_longlong_load_0;
    }
  }
}

TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_TYPECODE_Test_longlong_load_GUARD */

static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_Test_longlong_load (
    ::CORBA::tk_alias,
    "IDL:Test/longlong_load:1.0",
    "longlong_load",
    &TAO::TypeCode::tc_Test_longlong_load_0);


namespace Test
{
  ::CORBA::TypeCode_ptr const _tc_longlong_load =
    &_tao_tc_Test_longlong_load;
}

// TAO_IDL - Generated from
// be/be_visitor_sequence/sequence_cs.cpp:70

#if !defined (_TEST_DOUBLE_LOAD_CS_)
#define _TEST_DOUBLE_LOAD_CS_

Test::double_load::double_load (void)
{}

Test::double_load::double_load (
    ::CORBA::ULong max)
  : ::TAO::unbounded_value_sequence<
        ::CORBA::Double
      > (max)
{}

Test::double_load::double_load (
    ::CORBA::ULong max,
    ::CORBA::ULong length,
    ::CORBA::Double * buffer,
    ::CORBA::Boolean release
  )
  : ::TAO::unbounded_value_sequence<
        ::CORBA::Double
      >
    (max, length, buffer, release)
{}

Test::double_load::double_load (
    const double_load &seq)
  : ::TAO::unbounded_value_sequence<
        ::CORBA::Double
      > (seq)
{}

Test::double_load::~double_load (void)
{}

void Test::double_load::_tao_any_destructor (
    void * _tao_void_pointer)
{
  double_load * _tao_tmp_pointer =
    static_cast<double_load *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

#endif /* end #if !defined */

// TAO_IDL - Generated from
// be/be_visitor_typecode/alias_typecode.cpp:49



// TAO_IDL - Generated from
// be/be_visitor_typecode/typecode_defn.cpp:461


#ifndef _TAO_TYPECODE_Test_double_load_GUARD
#define _TAO_TYPECODE_Test_double_load_GUARD

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

namespace TAO
{
  namespace TypeCode
  {
    namespace
    {
      TAO::TypeCode::Sequence< ::CORBA::TypeCode_ptr const *,
                              TAO::Null_RefCount_Policy>
        Test_double_load_0 (
          ::CORBA::tk_sequence,
          &CORBA::_tc_double,
          0U);

      ::CORBA::TypeCode_ptr const tc_Test_double_load_0 =
        &Test_double_load_0;
    }
  }
}

TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_TYPECODE_Test_double_load_GUARD */

static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_Test_double_load (
    ::CORBA::tk_alias,
    "IDL:Test/double_load:1.0",
    "double_load",
    &TAO::TypeCode::tc_Test_double_load_0);


namespace Test
{
  ::CORBA::TypeCode_ptr const _tc_double_load =
    &_tao_tc_Test_double_load;
}

// TAO_IDL - Generated from
// be/be_visitor_interface/interface_cs.cpp:48

// Traits specializations for Test::Roundtrip.

Test::Roundtrip_ptr
TAO::Objref_Traits<Test::Roundtrip>::duplicate (
    Test::Roundtrip_ptr p)
{
  return Test::Roundtrip::_duplicate (p);
}

void
TAO::Objref_Traits<Test::Roundtrip>::release (
    Test::Roundtrip_ptr p)
{
  ::CORBA::release (p);
}

Test::Roundtrip_ptr
TAO::Objref_Traits<Test::Roundtrip>::nil (void)
{
  return Test::Roundtrip::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<Test::Roundtrip>::marshal (
    const Test::Roundtrip_ptr p,
    TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:88

::Test::Timestamp
Test::Roundtrip::test_octet_method (
  const ::Test::octet_load & ol,
  ::Test::Timestamp send_time)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }

  TAO::Arg_Traits< ::CORBA::ULongLong>::ret_val _tao_retval;
  TAO::Arg_Traits< ::Test::octet_load>::in_arg_val _tao_ol (ol);
  TAO::Arg_Traits< ::CORBA::ULongLong>::in_arg_val _tao_send_time (send_time);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_ol,
      &_tao_send_time
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      3,
      "test_octet_method",
      17,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY

    );

  _tao_call.invoke (0, 0);

  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:88

::Test::Timestamp
Test::Roundtrip::test_long_method (
  const ::Test::long_load & ol,
  ::Test::Timestamp send_time)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }

  TAO::Arg_Traits< ::CORBA::ULongLong>::ret_val _tao_retval;
  TAO::Arg_Traits< ::Test::long_load>::in_arg_val _tao_ol (ol);
  TAO::Arg_Traits< ::CORBA::ULongLong>::in_arg_val _tao_send_time (send_time);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_ol,
      &_tao_send_time
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      3,
      "test_long_method",
      16,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY

    );

  _tao_call.invoke (0, 0);

  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:88

::Test::Timestamp
Test::Roundtrip::test_short_method (
  const ::Test::short_load & ol,
  ::Test::Timestamp send_time)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }

  TAO::Arg_Traits< ::CORBA::ULongLong>::ret_val _tao_retval;
  TAO::Arg_Traits< ::Test::short_load>::in_arg_val _tao_ol (ol);
  TAO::Arg_Traits< ::CORBA::ULongLong>::in_arg_val _tao_send_time (send_time);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_ol,
      &_tao_send_time
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      3,
      "test_short_method",
      17,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY

    );

  _tao_call.invoke (0, 0);

  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:88

::Test::Timestamp
Test::Roundtrip::test_char_method (
  const ::Test::char_load & ol,
  ::Test::Timestamp send_time)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }

  TAO::Arg_Traits< ::CORBA::ULongLong>::ret_val _tao_retval;
  TAO::Arg_Traits< ::Test::char_load>::in_arg_val _tao_ol (ol);
  TAO::Arg_Traits< ::CORBA::ULongLong>::in_arg_val _tao_send_time (send_time);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_ol,
      &_tao_send_time
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      3,
      "test_char_method",
      16,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY

    );

  _tao_call.invoke (0, 0);

  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:88

::Test::Timestamp
Test::Roundtrip::test_longlong_method (
  const ::Test::longlong_load & ol,
  ::Test::Timestamp send_time)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }

  TAO::Arg_Traits< ::CORBA::ULongLong>::ret_val _tao_retval;
  TAO::Arg_Traits< ::Test::longlong_load>::in_arg_val _tao_ol (ol);
  TAO::Arg_Traits< ::CORBA::ULongLong>::in_arg_val _tao_send_time (send_time);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_ol,
      &_tao_send_time
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      3,
      "test_longlong_method",
      20,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY

    );

  _tao_call.invoke (0, 0);

  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:88

::Test::Timestamp
Test::Roundtrip::test_double_method (
  const ::Test::double_load & ol,
  ::Test::Timestamp send_time)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }

  TAO::Arg_Traits< ::CORBA::ULongLong>::ret_val _tao_retval;
  TAO::Arg_Traits< ::Test::double_load>::in_arg_val _tao_ol (ol);
  TAO::Arg_Traits< ::CORBA::ULongLong>::in_arg_val _tao_send_time (send_time);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_ol,
      &_tao_send_time
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      3,
      "test_double_method",
      18,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY

    );

  _tao_call.invoke (0, 0);

  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:88

void
Test::Roundtrip::shutdown (
  void)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }

  TAO::Arg_Traits< void>::ret_val _tao_retval;

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      1,
      "shutdown",
      8,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY,
      TAO::TAO_ONEWAY_INVOCATION,
      TAO::TAO_SYNCHRONOUS_INVOCATION,
      false
    );

  _tao_call.invoke (0, 0);
}

Test::Roundtrip::Roundtrip (void)
{
}

Test::Roundtrip::~Roundtrip (void)
{
}

void
Test::Roundtrip::_tao_any_destructor (void *_tao_void_pointer)
{
  Roundtrip *_tao_tmp_pointer =
    static_cast<Roundtrip *> (_tao_void_pointer);
  ::CORBA::release (_tao_tmp_pointer);
}

Test::Roundtrip_ptr
Test::Roundtrip::_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return
    TAO::Narrow_Utils<Roundtrip>::narrow (
        _tao_objref,
        "IDL:Test/Roundtrip:1.0");
}

Test::Roundtrip_ptr
Test::Roundtrip::_unchecked_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return
    TAO::Narrow_Utils<Roundtrip>::unchecked_narrow (
        _tao_objref);
}

Test::Roundtrip_ptr
Test::Roundtrip::_nil (void)
{
  return 0;
}

Test::Roundtrip_ptr
Test::Roundtrip::_duplicate (Roundtrip_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  return obj;
}

void
Test::Roundtrip::_tao_release (Roundtrip_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
Test::Roundtrip::_is_a (const char *value)
{
  if (
      ACE_OS::strcmp (
          value,
          "IDL:Test/Roundtrip:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        ) == 0
    )
    {
      return true; // success using local knowledge
    }
  else
    {
      return this->::CORBA::Object::_is_a (value);
    }
}

const char* Test::Roundtrip::_interface_repository_id (void) const
{
  return "IDL:Test/Roundtrip:1.0";
}

::CORBA::Boolean
Test::Roundtrip::marshal (TAO_OutputCDR &cdr)
{
  return (cdr << this);
}

// TAO_IDL - Generated from
// be/be_visitor_typecode/objref_typecode.cpp:70

static TAO::TypeCode::Objref<char const *,
                             TAO::Null_RefCount_Policy>
  _tao_tc_Test_Roundtrip (
    ::CORBA::tk_objref,
    "IDL:Test/Roundtrip:1.0",
    "Roundtrip");


namespace Test
{
  ::CORBA::TypeCode_ptr const _tc_Roundtrip =
    &_tao_tc_Test_Roundtrip;
}

// TAO_IDL - Generated from
// be/be_visitor_sequence/any_op_cs.cpp:45


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


TAO_END_VERSIONED_NAMESPACE_DECL



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace Test
{

  // Copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      const ::Test::octet_load &_tao_elem
    )
  {
    TAO::Any_Dual_Impl_T< ::Test::octet_load>::insert_copy (
        _tao_any,
        ::Test::octet_load::_tao_any_destructor,
        ::Test::_tc_octet_load,
        _tao_elem
      );
}

// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    ::Test::octet_load *_tao_elem)
{
  TAO::Any_Dual_Impl_T< ::Test::octet_load>::insert (
      _tao_any,
      ::Test::octet_load::_tao_any_destructor,
      ::Test::_tc_octet_load,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    ::Test::octet_load *&_tao_elem)
{
  return _tao_any >>= const_cast<
      const ::Test::octet_load *&> (
      _tao_elem
    );
}

// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const ::Test::octet_load *&_tao_elem)
{
  return
    TAO::Any_Dual_Impl_T< ::Test::octet_load>::extract (
        _tao_any,
        ::Test::octet_load::_tao_any_destructor,
        ::Test::_tc_octet_load,
        _tao_elem
      );
}
}

#else


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


// Copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    const Test::octet_load &_tao_elem)
{
  TAO::Any_Dual_Impl_T<Test::octet_load>::insert_copy (
      _tao_any,
      Test::octet_load::_tao_any_destructor,
      Test::_tc_octet_load,
      _tao_elem
    );
}

// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    Test::octet_load *_tao_elem)
{
  TAO::Any_Dual_Impl_T<Test::octet_load>::insert (
      _tao_any,
      Test::octet_load::_tao_any_destructor,
      Test::_tc_octet_load,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    Test::octet_load *&_tao_elem)
{
  return _tao_any >>= const_cast<
      const Test::octet_load *&> (
      _tao_elem
    );
}

// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const Test::octet_load *&_tao_elem)
{
  return
    TAO::Any_Dual_Impl_T<Test::octet_load>::extract (
        _tao_any,
        Test::octet_load::_tao_any_destructor,
        Test::_tc_octet_load,
        _tao_elem);
}
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_sequence/any_op_cs.cpp:45


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


TAO_END_VERSIONED_NAMESPACE_DECL



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace Test
{

  // Copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      const ::Test::long_load &_tao_elem
    )
  {
    TAO::Any_Dual_Impl_T< ::Test::long_load>::insert_copy (
        _tao_any,
        ::Test::long_load::_tao_any_destructor,
        ::Test::_tc_long_load,
        _tao_elem
      );
}

// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    ::Test::long_load *_tao_elem)
{
  TAO::Any_Dual_Impl_T< ::Test::long_load>::insert (
      _tao_any,
      ::Test::long_load::_tao_any_destructor,
      ::Test::_tc_long_load,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    ::Test::long_load *&_tao_elem)
{
  return _tao_any >>= const_cast<
      const ::Test::long_load *&> (
      _tao_elem
    );
}

// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const ::Test::long_load *&_tao_elem)
{
  return
    TAO::Any_Dual_Impl_T< ::Test::long_load>::extract (
        _tao_any,
        ::Test::long_load::_tao_any_destructor,
        ::Test::_tc_long_load,
        _tao_elem
      );
}
}

#else


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


// Copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    const Test::long_load &_tao_elem)
{
  TAO::Any_Dual_Impl_T<Test::long_load>::insert_copy (
      _tao_any,
      Test::long_load::_tao_any_destructor,
      Test::_tc_long_load,
      _tao_elem
    );
}

// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    Test::long_load *_tao_elem)
{
  TAO::Any_Dual_Impl_T<Test::long_load>::insert (
      _tao_any,
      Test::long_load::_tao_any_destructor,
      Test::_tc_long_load,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    Test::long_load *&_tao_elem)
{
  return _tao_any >>= const_cast<
      const Test::long_load *&> (
      _tao_elem
    );
}

// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const Test::long_load *&_tao_elem)
{
  return
    TAO::Any_Dual_Impl_T<Test::long_load>::extract (
        _tao_any,
        Test::long_load::_tao_any_destructor,
        Test::_tc_long_load,
        _tao_elem);
}
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_sequence/any_op_cs.cpp:45


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


TAO_END_VERSIONED_NAMESPACE_DECL



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace Test
{

  // Copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      const ::Test::char_load &_tao_elem
    )
  {
    TAO::Any_Dual_Impl_T< ::Test::char_load>::insert_copy (
        _tao_any,
        ::Test::char_load::_tao_any_destructor,
        ::Test::_tc_char_load,
        _tao_elem
      );
}

// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    ::Test::char_load *_tao_elem)
{
  TAO::Any_Dual_Impl_T< ::Test::char_load>::insert (
      _tao_any,
      ::Test::char_load::_tao_any_destructor,
      ::Test::_tc_char_load,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    ::Test::char_load *&_tao_elem)
{
  return _tao_any >>= const_cast<
      const ::Test::char_load *&> (
      _tao_elem
    );
}

// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const ::Test::char_load *&_tao_elem)
{
  return
    TAO::Any_Dual_Impl_T< ::Test::char_load>::extract (
        _tao_any,
        ::Test::char_load::_tao_any_destructor,
        ::Test::_tc_char_load,
        _tao_elem
      );
}
}

#else


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


// Copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    const Test::char_load &_tao_elem)
{
  TAO::Any_Dual_Impl_T<Test::char_load>::insert_copy (
      _tao_any,
      Test::char_load::_tao_any_destructor,
      Test::_tc_char_load,
      _tao_elem
    );
}

// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    Test::char_load *_tao_elem)
{
  TAO::Any_Dual_Impl_T<Test::char_load>::insert (
      _tao_any,
      Test::char_load::_tao_any_destructor,
      Test::_tc_char_load,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    Test::char_load *&_tao_elem)
{
  return _tao_any >>= const_cast<
      const Test::char_load *&> (
      _tao_elem
    );
}

// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const Test::char_load *&_tao_elem)
{
  return
    TAO::Any_Dual_Impl_T<Test::char_load>::extract (
        _tao_any,
        Test::char_load::_tao_any_destructor,
        Test::_tc_char_load,
        _tao_elem);
}
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_sequence/any_op_cs.cpp:45


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


TAO_END_VERSIONED_NAMESPACE_DECL



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace Test
{

  // Copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      const ::Test::short_load &_tao_elem
    )
  {
    TAO::Any_Dual_Impl_T< ::Test::short_load>::insert_copy (
        _tao_any,
        ::Test::short_load::_tao_any_destructor,
        ::Test::_tc_short_load,
        _tao_elem
      );
}

// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    ::Test::short_load *_tao_elem)
{
  TAO::Any_Dual_Impl_T< ::Test::short_load>::insert (
      _tao_any,
      ::Test::short_load::_tao_any_destructor,
      ::Test::_tc_short_load,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    ::Test::short_load *&_tao_elem)
{
  return _tao_any >>= const_cast<
      const ::Test::short_load *&> (
      _tao_elem
    );
}

// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const ::Test::short_load *&_tao_elem)
{
  return
    TAO::Any_Dual_Impl_T< ::Test::short_load>::extract (
        _tao_any,
        ::Test::short_load::_tao_any_destructor,
        ::Test::_tc_short_load,
        _tao_elem
      );
}
}

#else


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


// Copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    const Test::short_load &_tao_elem)
{
  TAO::Any_Dual_Impl_T<Test::short_load>::insert_copy (
      _tao_any,
      Test::short_load::_tao_any_destructor,
      Test::_tc_short_load,
      _tao_elem
    );
}

// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    Test::short_load *_tao_elem)
{
  TAO::Any_Dual_Impl_T<Test::short_load>::insert (
      _tao_any,
      Test::short_load::_tao_any_destructor,
      Test::_tc_short_load,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    Test::short_load *&_tao_elem)
{
  return _tao_any >>= const_cast<
      const Test::short_load *&> (
      _tao_elem
    );
}

// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const Test::short_load *&_tao_elem)
{
  return
    TAO::Any_Dual_Impl_T<Test::short_load>::extract (
        _tao_any,
        Test::short_load::_tao_any_destructor,
        Test::_tc_short_load,
        _tao_elem);
}
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_sequence/any_op_cs.cpp:45


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


TAO_END_VERSIONED_NAMESPACE_DECL



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace Test
{

  // Copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      const ::Test::longlong_load &_tao_elem
    )
  {
    TAO::Any_Dual_Impl_T< ::Test::longlong_load>::insert_copy (
        _tao_any,
        ::Test::longlong_load::_tao_any_destructor,
        ::Test::_tc_longlong_load,
        _tao_elem
      );
}

// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    ::Test::longlong_load *_tao_elem)
{
  TAO::Any_Dual_Impl_T< ::Test::longlong_load>::insert (
      _tao_any,
      ::Test::longlong_load::_tao_any_destructor,
      ::Test::_tc_longlong_load,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    ::Test::longlong_load *&_tao_elem)
{
  return _tao_any >>= const_cast<
      const ::Test::longlong_load *&> (
      _tao_elem
    );
}

// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const ::Test::longlong_load *&_tao_elem)
{
  return
    TAO::Any_Dual_Impl_T< ::Test::longlong_load>::extract (
        _tao_any,
        ::Test::longlong_load::_tao_any_destructor,
        ::Test::_tc_longlong_load,
        _tao_elem
      );
}
}

#else


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


// Copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    const Test::longlong_load &_tao_elem)
{
  TAO::Any_Dual_Impl_T<Test::longlong_load>::insert_copy (
      _tao_any,
      Test::longlong_load::_tao_any_destructor,
      Test::_tc_longlong_load,
      _tao_elem
    );
}

// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    Test::longlong_load *_tao_elem)
{
  TAO::Any_Dual_Impl_T<Test::longlong_load>::insert (
      _tao_any,
      Test::longlong_load::_tao_any_destructor,
      Test::_tc_longlong_load,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    Test::longlong_load *&_tao_elem)
{
  return _tao_any >>= const_cast<
      const Test::longlong_load *&> (
      _tao_elem
    );
}

// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const Test::longlong_load *&_tao_elem)
{
  return
    TAO::Any_Dual_Impl_T<Test::longlong_load>::extract (
        _tao_any,
        Test::longlong_load::_tao_any_destructor,
        Test::_tc_longlong_load,
        _tao_elem);
}
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_sequence/any_op_cs.cpp:45


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


TAO_END_VERSIONED_NAMESPACE_DECL



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace Test
{

  // Copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      const ::Test::double_load &_tao_elem
    )
  {
    TAO::Any_Dual_Impl_T< ::Test::double_load>::insert_copy (
        _tao_any,
        ::Test::double_load::_tao_any_destructor,
        ::Test::_tc_double_load,
        _tao_elem
      );
}

// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    ::Test::double_load *_tao_elem)
{
  TAO::Any_Dual_Impl_T< ::Test::double_load>::insert (
      _tao_any,
      ::Test::double_load::_tao_any_destructor,
      ::Test::_tc_double_load,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    ::Test::double_load *&_tao_elem)
{
  return _tao_any >>= const_cast<
      const ::Test::double_load *&> (
      _tao_elem
    );
}

// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const ::Test::double_load *&_tao_elem)
{
  return
    TAO::Any_Dual_Impl_T< ::Test::double_load>::extract (
        _tao_any,
        ::Test::double_load::_tao_any_destructor,
        ::Test::_tc_double_load,
        _tao_elem
      );
}
}

#else


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


// Copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    const Test::double_load &_tao_elem)
{
  TAO::Any_Dual_Impl_T<Test::double_load>::insert_copy (
      _tao_any,
      Test::double_load::_tao_any_destructor,
      Test::_tc_double_load,
      _tao_elem
    );
}

// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    Test::double_load *_tao_elem)
{
  TAO::Any_Dual_Impl_T<Test::double_load>::insert (
      _tao_any,
      Test::double_load::_tao_any_destructor,
      Test::_tc_double_load,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    Test::double_load *&_tao_elem)
{
  return _tao_any >>= const_cast<
      const Test::double_load *&> (
      _tao_elem
    );
}

// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const Test::double_load *&_tao_elem)
{
  return
    TAO::Any_Dual_Impl_T<Test::double_load>::extract (
        _tao_any,
        Test::double_load::_tao_any_destructor,
        Test::_tc_double_load,
        _tao_elem);
}
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_interface/any_op_cs.cpp:38
TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<Test::Roundtrip>::to_object (
      ::CORBA::Object_ptr &_tao_elem) const
  {
    _tao_elem = ::CORBA::Object::_duplicate (this->value_);
    return true;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace Test
{


  /// Copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      Roundtrip_ptr _tao_elem)
  {
    Roundtrip_ptr _tao_objptr =
      Roundtrip::_duplicate (_tao_elem);
    _tao_any <<= &_tao_objptr;
  }

  /// Non-copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      Roundtrip_ptr *_tao_elem)
  {
    TAO::Any_Impl_T<Roundtrip>::insert (
        _tao_any,
        Roundtrip::_tao_any_destructor,
        _tc_Roundtrip,
        *_tao_elem);
  }

  ::CORBA::Boolean
  operator>>= (
      const ::CORBA::Any &_tao_any,
      Roundtrip_ptr &_tao_elem)
  {
    return
      TAO::Any_Impl_T<Roundtrip>::extract (
          _tao_any,
          Roundtrip::_tao_any_destructor,
          _tc_Roundtrip,
          _tao_elem);
  }
}

#else

TAO_BEGIN_VERSIONED_NAMESPACE_DECL



/// Copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    Test::Roundtrip_ptr _tao_elem)
{
  Test::Roundtrip_ptr _tao_objptr =
    Test::Roundtrip::_duplicate (_tao_elem);
  _tao_any <<= &_tao_objptr;
}

/// Non-copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    Test::Roundtrip_ptr *_tao_elem)
{
  TAO::Any_Impl_T<Test::Roundtrip>::insert (
      _tao_any,
      Test::Roundtrip::_tao_any_destructor,
      Test::_tc_Roundtrip,
      *_tao_elem);
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    Test::Roundtrip_ptr &_tao_elem)
{
  return
    TAO::Any_Impl_T<Test::Roundtrip>::extract (
        _tao_any,
        Test::Roundtrip::_tao_any_destructor,
        Test::_tc_Roundtrip,
        _tao_elem);
}

TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_sequence/cdr_op_cs.cpp:93
#if !defined _TAO_CDR_OP_Test_octet_load_CPP_
#define _TAO_CDR_OP_Test_octet_load_CPP_

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Test::octet_load &_tao_sequence)
{
  return TAO::marshal_sequence(strm, _tao_sequence);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Test::octet_load &_tao_sequence)
{
  return TAO::demarshal_sequence(strm, _tao_sequence);
}


TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_CDR_OP_Test_octet_load_CPP_ */

// TAO_IDL - Generated from
// be/be_visitor_sequence/cdr_op_cs.cpp:93
#if !defined _TAO_CDR_OP_Test_long_load_CPP_
#define _TAO_CDR_OP_Test_long_load_CPP_

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Test::long_load &_tao_sequence)
{
  return TAO::marshal_sequence(strm, _tao_sequence);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Test::long_load &_tao_sequence)
{
  return TAO::demarshal_sequence(strm, _tao_sequence);
}


TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_CDR_OP_Test_long_load_CPP_ */

// TAO_IDL - Generated from
// be/be_visitor_sequence/cdr_op_cs.cpp:93
#if !defined _TAO_CDR_OP_Test_char_load_CPP_
#define _TAO_CDR_OP_Test_char_load_CPP_

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Test::char_load &_tao_sequence)
{
  return TAO::marshal_sequence(strm, _tao_sequence);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Test::char_load &_tao_sequence)
{
  return TAO::demarshal_sequence(strm, _tao_sequence);
}


TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_CDR_OP_Test_char_load_CPP_ */

// TAO_IDL - Generated from
// be/be_visitor_sequence/cdr_op_cs.cpp:93
#if !defined _TAO_CDR_OP_Test_short_load_CPP_
#define _TAO_CDR_OP_Test_short_load_CPP_

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Test::short_load &_tao_sequence)
{
  return TAO::marshal_sequence(strm, _tao_sequence);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Test::short_load &_tao_sequence)
{
  return TAO::demarshal_sequence(strm, _tao_sequence);
}


TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_CDR_OP_Test_short_load_CPP_ */

// TAO_IDL - Generated from
// be/be_visitor_sequence/cdr_op_cs.cpp:93
#if !defined _TAO_CDR_OP_Test_longlong_load_CPP_
#define _TAO_CDR_OP_Test_longlong_load_CPP_

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Test::longlong_load &_tao_sequence)
{
  return TAO::marshal_sequence(strm, _tao_sequence);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Test::longlong_load &_tao_sequence)
{
  return TAO::demarshal_sequence(strm, _tao_sequence);
}


TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_CDR_OP_Test_longlong_load_CPP_ */

// TAO_IDL - Generated from
// be/be_visitor_sequence/cdr_op_cs.cpp:93
#if !defined _TAO_CDR_OP_Test_double_load_CPP_
#define _TAO_CDR_OP_Test_double_load_CPP_

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Test::double_load &_tao_sequence)
{
  return TAO::marshal_sequence(strm, _tao_sequence);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Test::double_load &_tao_sequence)
{
  return TAO::demarshal_sequence(strm, _tao_sequence);
}


TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_CDR_OP_Test_double_load_CPP_ */

// TAO_IDL - Generated from
// be/be_visitor_interface/cdr_op_cs.cpp:51

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Test::Roundtrip_ptr _tao_objref)
{
  ::CORBA::Object_ptr _tao_corba_obj = _tao_objref;
  return (strm << _tao_corba_obj);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Test::Roundtrip_ptr &_tao_objref)
{
  ::CORBA::Object_var obj;

  if (!(strm >> obj.inout ()))
    {
      return false;
    }

  typedef ::Test::Roundtrip RHS_SCOPED_NAME;

  // Narrow to the right type.
  _tao_objref =
    TAO::Narrow_Utils<RHS_SCOPED_NAME>::unchecked_narrow (obj.in ());

  return true;
}

TAO_END_VERSIONED_NAMESPACE_DECL



