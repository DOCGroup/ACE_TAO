// -*- C++ -*-
/**
 * Code generated by the The ACE ORB (TAO) IDL Compiler v2.4.1
 * TAO and the TAO IDL Compiler have been developed by:
 *       Center for Distributed Object Computing
 *       Washington University
 *       St. Louis, MO
 *       USA
 *       http://www.cs.wustl.edu/~schmidt/doc-center.html
 * and
 *       Distributed Object Computing Laboratory
 *       University of California at Irvine
 *       Irvine, CA
 *       USA
 * and
 *       Institute for Software Integrated Systems
 *       Vanderbilt University
 *       Nashville, TN
 *       USA
 *       http://www.isis.vanderbilt.edu/
 *
 * Information about TAO is available at:
 *     http://www.dre.vanderbilt.edu/~schmidt/TAO.html
 **/

// TAO_IDL - Generated from
// be/be_codegen.cpp:149

#ifndef _TAO_IDL_CUBITC_VIALJD_H_
#define _TAO_IDL_CUBITC_VIALJD_H_

#include /**/ "ace/pre.h"


#include /**/ "ace/config-all.h"

#if !defined (ACE_LACKS_PRAGMA_ONCE)
# pragma once
#endif /* ACE_LACKS_PRAGMA_ONCE */


#include "tao/AnyTypeCode/AnyTypeCode_methods.h"
#include "tao/AnyTypeCode/Any.h"
#include "tao/ORB.h"
#include "tao/SystemException.h"
#include "tao/Basic_Types.h"
#include "tao/ORB_Constants.h"
#include "tao/Object.h"
#include "tao/Objref_VarOut_T.h"
#include "tao/VarOut_T.h"
#include "tao/Arg_Traits_T.h"
#include "tao/Basic_Arguments.h"
#include "tao/Special_Basic_Arguments.h"
#include "tao/Any_Insert_Policy_T.h"
#include "tao/Fixed_Size_Argument_T.h"
#include "tao/Var_Size_Argument_T.h"
#include "tao/Object_Argument_T.h"
#include "tao/Special_Basic_Arguments.h"
#include /**/ "tao/Version.h"
#include /**/ "tao/Versioned_Namespace.h"

#if TAO_MAJOR_VERSION != 2 || TAO_MINOR_VERSION != 4 || TAO_MICRO_VERSION != 1
#error This file should be regenerated with TAO_IDL
#endif

#if defined (TAO_EXPORT_MACRO)
#undef TAO_EXPORT_MACRO
#endif
#define TAO_EXPORT_MACRO 

// TAO_IDL - Generated from
// be/be_visitor_root/root_ch.cpp:157
TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<typename T> class Narrow_Utils;
}
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_interface.cpp:748

#if !defined (_CUBIT__VAR_OUT_CH_)
#define _CUBIT__VAR_OUT_CH_

class Cubit;
typedef Cubit *Cubit_ptr;

typedef
  TAO_Objref_Var_T<
      Cubit
    >
  Cubit_var;

typedef
  TAO_Objref_Out_T<
      Cubit
    >
  Cubit_out;

#endif /* end #if !defined */

// TAO_IDL - Generated from
// be/be_visitor_interface/interface_ch.cpp:40

class  Cubit
  : public virtual ::CORBA::Object
{
public:
  friend class TAO::Narrow_Utils<Cubit>;

  // TAO_IDL - Generated from
  // be/be_type.cpp:304

  typedef Cubit_ptr _ptr_type;
  typedef Cubit_var _var_type;
  typedef Cubit_out _out_type;

  static void _tao_any_destructor (void *);

  // The static operations.
  static Cubit_ptr _duplicate (Cubit_ptr obj);

  static void _tao_release (Cubit_ptr obj);

  static Cubit_ptr _narrow (::CORBA::Object_ptr obj);
  static Cubit_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
  static Cubit_ptr _nil (void);

  // TAO_IDL - Generated from
  // be/be_type.cpp:258

  struct Many;

  typedef
    ::TAO_Fixed_Var_T<
        Many
      >
    Many_var;

  typedef
    Many &
    Many_out;

  // TAO_IDL - Generated from
  // be/be_visitor_structure/structure_ch.cpp:48

  struct  Many
  {

    // TAO_IDL - Generated from
    // be/be_type.cpp:304

    
    typedef Many_var _var_type;
    typedef Many_out _out_type;

    static void _tao_any_destructor (void *);
    
    ::CORBA::Octet o;
    ::CORBA::Long l;
    ::CORBA::Short s;
  };

  // TAO_IDL - Generated from
  // be/be_visitor_typecode/typecode_decl.cpp:34

  static ::CORBA::TypeCode_ptr const _tc_Many;

  virtual ::CORBA::Octet cube_octet (
    ::CORBA::Octet o);

  virtual ::CORBA::Short cube_short (
    ::CORBA::Short s);

  virtual ::CORBA::Long cube_long (
    ::CORBA::Long l);

  virtual ::Cubit::Many cube_struct (
    const ::Cubit::Many & values);

  virtual void noop (
    void);

  virtual void shutdown (
    void);

  // TAO_IDL - Generated from
  // be/be_visitor_interface/interface_ch.cpp:137

  virtual ::CORBA::Boolean _is_a (const char *type_id);
  virtual const char* _interface_repository_id (void) const;
  virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);

protected:
  // Concrete interface only.
  Cubit (void);

  // Concrete non-local interface only.
  Cubit (
      ::IOP::IOR *ior,
      TAO_ORB_Core *orb_core);
  
  // Non-local interface only.
  Cubit (
      TAO_Stub *objref,
      ::CORBA::Boolean _tao_collocated = false,
      TAO_Abstract_ServantBase *servant = 0,
      TAO_ORB_Core *orb_core = 0);

  virtual ~Cubit (void);

private:
  // Private and unimplemented for concrete interfaces.
  Cubit (const Cubit &);

  void operator= (const Cubit &);
};

// TAO_IDL - Generated from
// be/be_visitor_typecode/typecode_decl.cpp:34

extern  ::CORBA::TypeCode_ptr const _tc_Cubit;

// TAO_IDL - Generated from
// be/be_visitor_arg_traits.cpp:66

TAO_BEGIN_VERSIONED_NAMESPACE_DECL


// Arg traits specializations.
namespace TAO
{

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:145

#if !defined (_CUBIT__ARG_TRAITS_)
#define _CUBIT__ARG_TRAITS_

  template<>
  class  Arg_Traits< ::Cubit>
    : public
        Object_Arg_Traits_T<
            ::Cubit_ptr,
            ::Cubit_var,
            ::Cubit_out,
            TAO::Objref_Traits<Cubit>,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:945

  template<>
  class Arg_Traits< ::Cubit::Many>
    : public
        Fixed_Size_Arg_Traits_T<
            ::Cubit::Many,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_traits.cpp:60

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Traits specializations.
namespace TAO
{

#if !defined (_CUBIT__TRAITS_)
#define _CUBIT__TRAITS_

  template<>
  struct  Objref_Traits< ::Cubit>
  {
    static ::Cubit_ptr duplicate (
        ::Cubit_ptr p);
    static void release (
        ::Cubit_ptr p);
    static ::Cubit_ptr nil (void);
    static ::CORBA::Boolean marshal (
        const ::Cubit_ptr p,
        TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */
}
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_interface/any_op_ch.cpp:41


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 void operator<<= (::CORBA::Any &, Cubit_ptr); // copying
 void operator<<= (::CORBA::Any &, Cubit_ptr *); // non-copying
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, Cubit_ptr &);
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_structure/any_op_ch.cpp:42


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 void operator<<= (::CORBA::Any &, const Cubit::Many &); // copying version
 void operator<<= (::CORBA::Any &, Cubit::Many*); // noncopying version
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, Cubit::Many *&); // deprecated
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const Cubit::Many *&);
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_interface/cdr_op_ch.cpp:41

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 ::CORBA::Boolean operator<< (TAO_OutputCDR &, const Cubit_ptr );
 ::CORBA::Boolean operator>> (TAO_InputCDR &, Cubit_ptr &);

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_structure/cdr_op_ch.cpp:43


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 ::CORBA::Boolean operator<< (TAO_OutputCDR &, const Cubit::Many &);
 ::CORBA::Boolean operator>> (TAO_InputCDR &, Cubit::Many &);

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_codegen.cpp:1700
#if defined (__ACE_INLINE__)
#include "cubitC.inl"
#endif /* defined INLINE */

#include /**/ "ace/post.h"

#endif /* ifndef */

