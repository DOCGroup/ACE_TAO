// -*- C++ -*-
/**
 * Code generated by the The ACE ORB (TAO) IDL Compiler v2.4.1
 * TAO and the TAO IDL Compiler have been developed by:
 *       Center for Distributed Object Computing
 *       Washington University
 *       St. Louis, MO
 *       USA
 *       http://www.cs.wustl.edu/~schmidt/doc-center.html
 * and
 *       Distributed Object Computing Laboratory
 *       University of California at Irvine
 *       Irvine, CA
 *       USA
 * and
 *       Institute for Software Integrated Systems
 *       Vanderbilt University
 *       Nashville, TN
 *       USA
 *       http://www.isis.vanderbilt.edu/
 *
 * Information about TAO is available at:
 *     http://www.dre.vanderbilt.edu/~schmidt/TAO.html
 **/

// TAO_IDL - Generated from
// be/be_codegen.cpp:373


#include "cubitC.h"
#include "tao/AnyTypeCode/Null_RefCount_Policy.h"
#include "tao/AnyTypeCode/TypeCode_Constants.h"
#include "tao/AnyTypeCode/Alias_TypeCode_Static.h"
#include "tao/AnyTypeCode/Enum_TypeCode_Static.h"
#include "tao/AnyTypeCode/Objref_TypeCode_Static.h"
#include "tao/AnyTypeCode/Sequence_TypeCode_Static.h"
#include "tao/AnyTypeCode/String_TypeCode_Static.h"
#include "tao/AnyTypeCode/Struct_TypeCode_Static.h"
#include "tao/AnyTypeCode/TypeCode_Struct_Field.h"
#include "tao/AnyTypeCode/TypeCode_Case_T.h"
#include "tao/AnyTypeCode/Union_TypeCode_Static.h"
#include "tao/CDR.h"
#include "tao/Exception_Data.h"
#include "tao/Invocation_Adapter.h"
#include "tao/Object_T.h"
#include "tao/ORB_Core.h"
#include "tao/CDR.h"
#include "tao/AnyTypeCode/Any.h"
#include "tao/AnyTypeCode/Any_Impl_T.h"
#include "tao/AnyTypeCode/Any_Dual_Impl_T.h"
#include "tao/AnyTypeCode/Any_Basic_Impl_T.h"
#include "ace/OS_NS_string.h"

#if !defined (__ACE_INLINE__)
#include "cubitC.inl"
#endif /* !defined INLINE */

// TAO_IDL - Generated from
// be/be_visitor_interface/interface_cs.cpp:48

// Traits specializations for Cubit.

Cubit_ptr
TAO::Objref_Traits<Cubit>::duplicate (
    Cubit_ptr p)
{
  return Cubit::_duplicate (p);
}

void
TAO::Objref_Traits<Cubit>::release (
    Cubit_ptr p)
{
  ::CORBA::release (p);
}

Cubit_ptr
TAO::Objref_Traits<Cubit>::nil (void)
{
  return Cubit::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<Cubit>::marshal (
    const Cubit_ptr p,
    TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:88

void
Cubit::cube_oneway (
  void)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }

  TAO::Arg_Traits< void>::ret_val _tao_retval;

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      1,
      "cube_oneway",
      11,
      TAO::TAO_CO_NONE | TAO::TAO_CO_DIRECT_STRATEGY | TAO::TAO_CO_THRU_POA_STRATEGY,
      TAO::TAO_ONEWAY_INVOCATION,
      TAO::TAO_SYNCHRONOUS_INVOCATION,
      false
    );

  _tao_call.invoke (0, 0);
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:88

void
Cubit::cube_void (
  void)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }

  TAO::Arg_Traits< void>::ret_val _tao_retval;

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      1,
      "cube_void",
      9,
      TAO::TAO_CO_NONE | TAO::TAO_CO_DIRECT_STRATEGY | TAO::TAO_CO_THRU_POA_STRATEGY,
      TAO::TAO_TWOWAY_INVOCATION
      ,
      TAO::TAO_SYNCHRONOUS_INVOCATION,
      false
    );

  _tao_call.invoke (0, 0);
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:88

::CORBA::Octet
Cubit::cube_octet (
  ::CORBA::Octet o)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }

  TAO::Arg_Traits< ::ACE_InputCDR::to_octet>::ret_val _tao_retval;
  TAO::Arg_Traits< ::ACE_InputCDR::to_octet>::in_arg_val _tao_o (o);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_o
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      2,
      "cube_octet",
      10,
      TAO::TAO_CO_NONE | TAO::TAO_CO_DIRECT_STRATEGY | TAO::TAO_CO_THRU_POA_STRATEGY

    );

  _tao_call.invoke (0, 0);

  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:88

::CORBA::Short
Cubit::cube_short (
  ::CORBA::Short s)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }

  TAO::Arg_Traits< ::CORBA::Short>::ret_val _tao_retval;
  TAO::Arg_Traits< ::CORBA::Short>::in_arg_val _tao_s (s);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_s
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      2,
      "cube_short",
      10,
      TAO::TAO_CO_NONE | TAO::TAO_CO_DIRECT_STRATEGY | TAO::TAO_CO_THRU_POA_STRATEGY

    );

  _tao_call.invoke (0, 0);

  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:88

::CORBA::Long
Cubit::cube_long (
  ::CORBA::Long l)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }

  TAO::Arg_Traits< ::CORBA::Long>::ret_val _tao_retval;
  TAO::Arg_Traits< ::CORBA::Long>::in_arg_val _tao_l (l);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_l
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      2,
      "cube_long",
      9,
      TAO::TAO_CO_NONE | TAO::TAO_CO_DIRECT_STRATEGY | TAO::TAO_CO_THRU_POA_STRATEGY

    );

  _tao_call.invoke (0, 0);

  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// be/be_visitor_typecode/struct_typecode.cpp:86

static TAO::TypeCode::Struct_Field<
  char const *,
  ::CORBA::TypeCode_ptr const *> const
    _tao_fields_Cubit_Many[] =
      {
        { "o", &CORBA::_tc_octet },
        { "l", &CORBA::_tc_long },
        { "s", &CORBA::_tc_short }
      };

static TAO::TypeCode::Struct<
  char const *,
  ::CORBA::TypeCode_ptr const *,
  TAO::TypeCode::Struct_Field<
    char const *,
    ::CORBA::TypeCode_ptr const *> const *,
  TAO::Null_RefCount_Policy>
_tao_tc_Cubit_Many (
  ::CORBA::tk_struct,
  "IDL:Cubit/Many:1.0",
  "Many",
  _tao_fields_Cubit_Many,
  3);

::CORBA::TypeCode_ptr const Cubit::_tc_Many =
  &_tao_tc_Cubit_Many;

// TAO_IDL - Generated from
// be/be_visitor_structure/structure_cs.cpp:56

void
Cubit::Many::_tao_any_destructor (
    void *_tao_void_pointer)
{
  Many *_tao_tmp_pointer =
    static_cast<Many *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:88

::Cubit::Many
Cubit::cube_struct (
  const ::Cubit::Many & values)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }

  TAO::Arg_Traits< ::Cubit::Many>::ret_val _tao_retval;
  TAO::Arg_Traits< ::Cubit::Many>::in_arg_val _tao_values (values);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_values
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      2,
      "cube_struct",
      11,
      TAO::TAO_CO_NONE | TAO::TAO_CO_DIRECT_STRATEGY | TAO::TAO_CO_THRU_POA_STRATEGY

    );

  _tao_call.invoke (0, 0);

  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:88

::CORBA::Any *
Cubit::cube_any (
  const ::CORBA::Any & value)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }

  TAO::Arg_Traits< ::CORBA::Any>::ret_val _tao_retval;
  TAO::Arg_Traits< ::CORBA::Any>::in_arg_val _tao_value (value);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_value
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      2,
      "cube_any",
      8,
      TAO::TAO_CO_NONE | TAO::TAO_CO_DIRECT_STRATEGY | TAO::TAO_CO_THRU_POA_STRATEGY

    );

  _tao_call.invoke (0, 0);

  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:88

::CORBA::Any *
Cubit::cube_any_struct (
  const ::CORBA::Any & value)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }

  TAO::Arg_Traits< ::CORBA::Any>::ret_val _tao_retval;
  TAO::Arg_Traits< ::CORBA::Any>::in_arg_val _tao_value (value);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_value
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      2,
      "cube_any_struct",
      15,
      TAO::TAO_CO_NONE | TAO::TAO_CO_DIRECT_STRATEGY | TAO::TAO_CO_THRU_POA_STRATEGY

    );

  _tao_call.invoke (0, 0);

  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// be/be_visitor_typecode/enum_typecode.cpp:29
static char const * const _tao_enumerators_Cubit_discrim[] =
  {
    "e_0th",
    "e_1st",
    "e_2nd",
    "e_3rd"

  };

static TAO::TypeCode::Enum<char const *,
                           char const * const *,
                           TAO::Null_RefCount_Policy>
  _tao_tc_Cubit_discrim (
    "IDL:Cubit/discrim:1.0",
    "discrim",
    _tao_enumerators_Cubit_discrim,
    4);

::CORBA::TypeCode_ptr const Cubit::_tc_discrim =
  &_tao_tc_Cubit_discrim;

// TAO_IDL - Generated from
// be/be_visitor_union/union_cs.cpp:76

Cubit::oneof::oneof (void)
{
  ACE_OS::memset (&this->u_, 0, sizeof (this->u_));
  this->disc_ = (Cubit::discrim) -1;
}

Cubit::oneof::oneof (const ::Cubit::oneof &u)
{
  this->disc_ = u.disc_;
  switch (this->disc_)
  {
    case Cubit::e_0th:
    {
      this->u_.o_ = u.u_.o_;
    }
    break;
    case Cubit::e_1st:
    {
      this->u_.s_ = u.u_.s_;
    }
    break;
    case Cubit::e_2nd:
    {
      this->u_.l_ = u.u_.l_;
    }
    break;
    case Cubit::e_3rd:
    {
      this->u_.cm_ = u.u_.cm_;
    }
    break;
    default:
    break;
  }
}

Cubit::oneof::~oneof (void)
{
  // Finalize.
  this->_reset ();
}

void Cubit::oneof::_tao_any_destructor (void *_tao_void_pointer)
{
  oneof *tmp =
    static_cast<oneof *> (_tao_void_pointer);
  delete tmp;
}

Cubit::oneof &
Cubit::oneof::operator= (const ::Cubit::oneof &u)
{
  if (&u == this)
    {
      return *this;
    }

  this->_reset ();
  this->disc_ = u.disc_;

  switch (this->disc_)
  {
    case Cubit::e_0th:
    {
      this->u_.o_ = u.u_.o_;
    }
    break;
    case Cubit::e_1st:
    {
      this->u_.s_ = u.u_.s_;
    }
    break;
    case Cubit::e_2nd:
    {
      this->u_.l_ = u.u_.l_;
    }
    break;
    case Cubit::e_3rd:
    {
      this->u_.cm_ = u.u_.cm_;
    }
    break;
    default:
    break;
  }

  return *this;
}

/// Reset method to reset old values of a union.
void Cubit::oneof::_reset (void)
{
  switch (this->disc_)
  {

    case Cubit::e_0th:

    break;

    case Cubit::e_1st:

    break;

    case Cubit::e_2nd:

    break;

    case Cubit::e_3rd:

    break;

    default:
    break;
  }
}

// TAO_IDL - Generated from
// be/be_visitor_typecode/union_typecode.cpp:65

static TAO::TypeCode::Case_T<Cubit::discrim, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_Cubit_oneof__0 (Cubit::e_0th, "o", &CORBA::_tc_octet);
static TAO::TypeCode::Case_T<Cubit::discrim, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_Cubit_oneof__1 (Cubit::e_1st, "s", &CORBA::_tc_short);
static TAO::TypeCode::Case_T<Cubit::discrim, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_Cubit_oneof__2 (Cubit::e_2nd, "l", &CORBA::_tc_long);
static TAO::TypeCode::Case_T<Cubit::discrim, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_Cubit_oneof__3 (Cubit::e_3rd, "cm", &Cubit::_tc_Many);

static TAO::TypeCode::Case<char const *, ::CORBA::TypeCode_ptr const *> const * const _tao_cases_Cubit_oneof[] =
  {
    &_tao_cases_Cubit_oneof__0,
    &_tao_cases_Cubit_oneof__1,
    &_tao_cases_Cubit_oneof__2,
    &_tao_cases_Cubit_oneof__3
  };

static TAO::TypeCode::Union<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::TypeCode::Case<char const *, ::CORBA::TypeCode_ptr const *> const * const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_Cubit_oneof (
    "IDL:Cubit/oneof:1.0",
    "oneof",
    &Cubit::_tc_discrim,
    _tao_cases_Cubit_oneof,
    sizeof (_tao_cases_Cubit_oneof)/sizeof (_tao_cases_Cubit_oneof[0]),
    -1);

::CORBA::TypeCode_ptr const Cubit::_tc_oneof =
  &_tao_tc_Cubit_oneof;

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:88

::Cubit::oneof
Cubit::cube_union (
  const ::Cubit::oneof & values)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }

  TAO::Arg_Traits< ::Cubit::oneof>::ret_val _tao_retval;
  TAO::Arg_Traits< ::Cubit::oneof>::in_arg_val _tao_values (values);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_values
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      2,
      "cube_union",
      10,
      TAO::TAO_CO_NONE | TAO::TAO_CO_DIRECT_STRATEGY | TAO::TAO_CO_THRU_POA_STRATEGY

    );

  _tao_call.invoke (0, 0);

  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// be/be_visitor_sequence/sequence_cs.cpp:70

#if !defined (_CUBIT_LONG_SEQ_CS_)
#define _CUBIT_LONG_SEQ_CS_

Cubit::long_seq::long_seq (void)
{}

Cubit::long_seq::long_seq (
    ::CORBA::ULong max)
  : ::TAO::unbounded_value_sequence<
        ::CORBA::Long
      > (max)
{}

Cubit::long_seq::long_seq (
    ::CORBA::ULong max,
    ::CORBA::ULong length,
    ::CORBA::Long * buffer,
    ::CORBA::Boolean release
  )
  : ::TAO::unbounded_value_sequence<
        ::CORBA::Long
      >
    (max, length, buffer, release)
{}

Cubit::long_seq::long_seq (
    const long_seq &seq)
  : ::TAO::unbounded_value_sequence<
        ::CORBA::Long
      > (seq)
{}

Cubit::long_seq::~long_seq (void)
{}

void Cubit::long_seq::_tao_any_destructor (
    void * _tao_void_pointer)
{
  long_seq * _tao_tmp_pointer =
    static_cast<long_seq *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

#endif /* end #if !defined */

// TAO_IDL - Generated from
// be/be_visitor_typecode/alias_typecode.cpp:49



// TAO_IDL - Generated from
// be/be_visitor_typecode/typecode_defn.cpp:461


#ifndef _TAO_TYPECODE_Cubit_long_seq_GUARD
#define _TAO_TYPECODE_Cubit_long_seq_GUARD

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

namespace TAO
{
  namespace TypeCode
  {
    namespace
    {
      TAO::TypeCode::Sequence< ::CORBA::TypeCode_ptr const *,
                              TAO::Null_RefCount_Policy>
        Cubit_long_seq_0 (
          ::CORBA::tk_sequence,
          &CORBA::_tc_long,
          0U);

      ::CORBA::TypeCode_ptr const tc_Cubit_long_seq_0 =
        &Cubit_long_seq_0;
    }
  }
}

TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_TYPECODE_Cubit_long_seq_GUARD */

static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_Cubit_long_seq (
    ::CORBA::tk_alias,
    "IDL:Cubit/long_seq:1.0",
    "long_seq",
    &TAO::TypeCode::tc_Cubit_long_seq_0);

::CORBA::TypeCode_ptr const Cubit::_tc_long_seq =
  &_tao_tc_Cubit_long_seq;

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:88

void
Cubit::cube_long_sequence (
  const ::Cubit::long_seq & input,
  ::Cubit::long_seq_out output)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }

  TAO::Arg_Traits< void>::ret_val _tao_retval;
  TAO::Arg_Traits< ::Cubit::long_seq>::in_arg_val _tao_input (input);
  TAO::Arg_Traits< ::Cubit::long_seq>::out_arg_val _tao_output (output);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_input,
      &_tao_output
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      3,
      "cube_long_sequence",
      18,
      TAO::TAO_CO_NONE | TAO::TAO_CO_DIRECT_STRATEGY | TAO::TAO_CO_THRU_POA_STRATEGY

    );

  _tao_call.invoke (0, 0);
}

// TAO_IDL - Generated from
// be/be_visitor_sequence/sequence_cs.cpp:70

#if !defined (_CUBIT_OCTET_SEQ_CS_)
#define _CUBIT_OCTET_SEQ_CS_

Cubit::octet_seq::octet_seq (void)
{}

Cubit::octet_seq::octet_seq (
    ::CORBA::ULong max)
  : ::TAO::unbounded_value_sequence<
        ::CORBA::Octet
      > (max)
{}

Cubit::octet_seq::octet_seq (
    ::CORBA::ULong max,
    ::CORBA::ULong length,
    ::CORBA::Octet * buffer,
    ::CORBA::Boolean release
  )
  : ::TAO::unbounded_value_sequence<
        ::CORBA::Octet
      >
    (max, length, buffer, release)
{}

Cubit::octet_seq::octet_seq (
    const octet_seq &seq)
  : ::TAO::unbounded_value_sequence<
        ::CORBA::Octet
      > (seq)
{}

Cubit::octet_seq::~octet_seq (void)
{}

void Cubit::octet_seq::_tao_any_destructor (
    void * _tao_void_pointer)
{
  octet_seq * _tao_tmp_pointer =
    static_cast<octet_seq *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

#endif /* end #if !defined */

// TAO_IDL - Generated from
// be/be_visitor_typecode/alias_typecode.cpp:49



// TAO_IDL - Generated from
// be/be_visitor_typecode/typecode_defn.cpp:461


#ifndef _TAO_TYPECODE_Cubit_octet_seq_GUARD
#define _TAO_TYPECODE_Cubit_octet_seq_GUARD

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

namespace TAO
{
  namespace TypeCode
  {
    namespace
    {
      TAO::TypeCode::Sequence< ::CORBA::TypeCode_ptr const *,
                              TAO::Null_RefCount_Policy>
        Cubit_octet_seq_0 (
          ::CORBA::tk_sequence,
          &CORBA::_tc_octet,
          0U);

      ::CORBA::TypeCode_ptr const tc_Cubit_octet_seq_0 =
        &Cubit_octet_seq_0;
    }
  }
}

TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_TYPECODE_Cubit_octet_seq_GUARD */

static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_Cubit_octet_seq (
    ::CORBA::tk_alias,
    "IDL:Cubit/octet_seq:1.0",
    "octet_seq",
    &TAO::TypeCode::tc_Cubit_octet_seq_0);

::CORBA::TypeCode_ptr const Cubit::_tc_octet_seq =
  &_tao_tc_Cubit_octet_seq;

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:88

void
Cubit::cube_octet_sequence (
  const ::Cubit::octet_seq & input,
  ::Cubit::octet_seq_out output)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }

  TAO::Arg_Traits< void>::ret_val _tao_retval;
  TAO::Arg_Traits< ::Cubit::octet_seq>::in_arg_val _tao_input (input);
  TAO::Arg_Traits< ::Cubit::octet_seq>::out_arg_val _tao_output (output);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_input,
      &_tao_output
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      3,
      "cube_octet_sequence",
      19,
      TAO::TAO_CO_NONE | TAO::TAO_CO_DIRECT_STRATEGY | TAO::TAO_CO_THRU_POA_STRATEGY

    );

  _tao_call.invoke (0, 0);
}

// TAO_IDL - Generated from
// be/be_visitor_sequence/sequence_cs.cpp:70

#if !defined (_CUBIT_MANY_SEQ_CS_)
#define _CUBIT_MANY_SEQ_CS_

Cubit::many_seq::many_seq (void)
{}

Cubit::many_seq::many_seq (
    ::CORBA::ULong max)
  : ::TAO::unbounded_value_sequence<
        Many
      > (max)
{}

Cubit::many_seq::many_seq (
    ::CORBA::ULong max,
    ::CORBA::ULong length,
    Cubit::Many * buffer,
    ::CORBA::Boolean release
  )
  : ::TAO::unbounded_value_sequence<
        Many
      >
    (max, length, buffer, release)
{}

Cubit::many_seq::many_seq (
    const many_seq &seq)
  : ::TAO::unbounded_value_sequence<
        Many
      > (seq)
{}

Cubit::many_seq::~many_seq (void)
{}

void Cubit::many_seq::_tao_any_destructor (
    void * _tao_void_pointer)
{
  many_seq * _tao_tmp_pointer =
    static_cast<many_seq *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

#endif /* end #if !defined */

// TAO_IDL - Generated from
// be/be_visitor_typecode/alias_typecode.cpp:49



// TAO_IDL - Generated from
// be/be_visitor_typecode/typecode_defn.cpp:461


#ifndef _TAO_TYPECODE_Cubit_many_seq_GUARD
#define _TAO_TYPECODE_Cubit_many_seq_GUARD

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

namespace TAO
{
  namespace TypeCode
  {
    namespace
    {
      TAO::TypeCode::Sequence< ::CORBA::TypeCode_ptr const *,
                              TAO::Null_RefCount_Policy>
        Cubit_many_seq_0 (
          ::CORBA::tk_sequence,
          &Cubit::_tc_Many,
          0U);

      ::CORBA::TypeCode_ptr const tc_Cubit_many_seq_0 =
        &Cubit_many_seq_0;
    }
  }
}

TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_TYPECODE_Cubit_many_seq_GUARD */

static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_Cubit_many_seq (
    ::CORBA::tk_alias,
    "IDL:Cubit/many_seq:1.0",
    "many_seq",
    &TAO::TypeCode::tc_Cubit_many_seq_0);

::CORBA::TypeCode_ptr const Cubit::_tc_many_seq =
  &_tao_tc_Cubit_many_seq;

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:88

void
Cubit::cube_many_sequence (
  const ::Cubit::many_seq & input,
  ::Cubit::many_seq_out output)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }

  TAO::Arg_Traits< void>::ret_val _tao_retval;
  TAO::Arg_Traits< ::Cubit::many_seq>::in_arg_val _tao_input (input);
  TAO::Arg_Traits< ::Cubit::many_seq>::out_arg_val _tao_output (output);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_input,
      &_tao_output
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      3,
      "cube_many_sequence",
      18,
      TAO::TAO_CO_NONE | TAO::TAO_CO_DIRECT_STRATEGY | TAO::TAO_CO_THRU_POA_STRATEGY

    );

  _tao_call.invoke (0, 0);
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:88

void
Cubit::shutdown (
  void)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }

  TAO::Arg_Traits< void>::ret_val _tao_retval;

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      1,
      "shutdown",
      8,
      TAO::TAO_CO_NONE | TAO::TAO_CO_DIRECT_STRATEGY | TAO::TAO_CO_THRU_POA_STRATEGY,
      TAO::TAO_ONEWAY_INVOCATION,
      TAO::TAO_SYNCHRONOUS_INVOCATION,
      false
    );

  _tao_call.invoke (0, 0);
}

// TAO_IDL - Generated from
// be/be_visitor_typecode/struct_typecode.cpp:86

static TAO::TypeCode::Struct_Field<
  char const *,
  ::CORBA::TypeCode_ptr const *> const
    _tao_fields_Cubit_RtiPacketHeader[] =
      {
        { "packetLength", &CORBA::_tc_ulong },
        { "federationHandle", &CORBA::_tc_ushort },
        { "channelHandle", &CORBA::_tc_ulong },
        { "packetColor", &CORBA::_tc_ulong }
      };

static TAO::TypeCode::Struct<
  char const *,
  ::CORBA::TypeCode_ptr const *,
  TAO::TypeCode::Struct_Field<
    char const *,
    ::CORBA::TypeCode_ptr const *> const *,
  TAO::Null_RefCount_Policy>
_tao_tc_Cubit_RtiPacketHeader (
  ::CORBA::tk_struct,
  "IDL:Cubit/RtiPacketHeader:1.0",
  "RtiPacketHeader",
  _tao_fields_Cubit_RtiPacketHeader,
  4);

::CORBA::TypeCode_ptr const Cubit::_tc_RtiPacketHeader =
  &_tao_tc_Cubit_RtiPacketHeader;

// TAO_IDL - Generated from
// be/be_visitor_structure/structure_cs.cpp:56

void
Cubit::RtiPacketHeader::_tao_any_destructor (
    void *_tao_void_pointer)
{
  RtiPacketHeader *_tao_tmp_pointer =
    static_cast<RtiPacketHeader *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

// TAO_IDL - Generated from
// be/be_visitor_typecode/struct_typecode.cpp:86



// TAO_IDL - Generated from
// be/be_visitor_typecode/typecode_defn.cpp:461

static TAO::TypeCode::Struct_Field<
  char const *,
  ::CORBA::TypeCode_ptr const *> const
    _tao_fields_Cubit_HandleValuePair[] =
      {
        { "handle", &CORBA::_tc_ushort },
        { "data", &Cubit::_tc_octet_seq }
      };

static TAO::TypeCode::Struct<
  char const *,
  ::CORBA::TypeCode_ptr const *,
  TAO::TypeCode::Struct_Field<
    char const *,
    ::CORBA::TypeCode_ptr const *> const *,
  TAO::Null_RefCount_Policy>
_tao_tc_Cubit_HandleValuePair (
  ::CORBA::tk_struct,
  "IDL:Cubit/HandleValuePair:1.0",
  "HandleValuePair",
  _tao_fields_Cubit_HandleValuePair,
  2);

::CORBA::TypeCode_ptr const Cubit::_tc_HandleValuePair =
  &_tao_tc_Cubit_HandleValuePair;

// TAO_IDL - Generated from
// be/be_visitor_structure/structure_cs.cpp:56

void
Cubit::HandleValuePair::_tao_any_destructor (
    void *_tao_void_pointer)
{
  HandleValuePair *_tao_tmp_pointer =
    static_cast<HandleValuePair *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

// TAO_IDL - Generated from
// be/be_visitor_typecode/enum_typecode.cpp:29
static char const * const _tao_enumerators_Cubit_MessageHeaderTypes[] =
  {
    "objectUpdate",
    "interaction"

  };

static TAO::TypeCode::Enum<char const *,
                           char const * const *,
                           TAO::Null_RefCount_Policy>
  _tao_tc_Cubit_MessageHeaderTypes (
    "IDL:Cubit/MessageHeaderTypes:1.0",
    "MessageHeaderTypes",
    _tao_enumerators_Cubit_MessageHeaderTypes,
    2);

::CORBA::TypeCode_ptr const Cubit::_tc_MessageHeaderTypes =
  &_tao_tc_Cubit_MessageHeaderTypes;

// TAO_IDL - Generated from
// be/be_visitor_sequence/sequence_cs.cpp:70

#if !defined (_CUBIT_HANDLEVALUEPAIRSEQ_CS_)
#define _CUBIT_HANDLEVALUEPAIRSEQ_CS_

Cubit::HandleValuePairSeq::HandleValuePairSeq (void)
{}

Cubit::HandleValuePairSeq::HandleValuePairSeq (
    ::CORBA::ULong max)
  : ::TAO::unbounded_value_sequence<
        HandleValuePair
      > (max)
{}

Cubit::HandleValuePairSeq::HandleValuePairSeq (
    ::CORBA::ULong max,
    ::CORBA::ULong length,
    Cubit::HandleValuePair * buffer,
    ::CORBA::Boolean release
  )
  : ::TAO::unbounded_value_sequence<
        HandleValuePair
      >
    (max, length, buffer, release)
{}

Cubit::HandleValuePairSeq::HandleValuePairSeq (
    const HandleValuePairSeq &seq)
  : ::TAO::unbounded_value_sequence<
        HandleValuePair
      > (seq)
{}

Cubit::HandleValuePairSeq::~HandleValuePairSeq (void)
{}

void Cubit::HandleValuePairSeq::_tao_any_destructor (
    void * _tao_void_pointer)
{
  HandleValuePairSeq * _tao_tmp_pointer =
    static_cast<HandleValuePairSeq *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

#endif /* end #if !defined */

// TAO_IDL - Generated from
// be/be_visitor_typecode/alias_typecode.cpp:49



// TAO_IDL - Generated from
// be/be_visitor_typecode/typecode_defn.cpp:461


#ifndef _TAO_TYPECODE_Cubit_HandleValuePairSeq_GUARD
#define _TAO_TYPECODE_Cubit_HandleValuePairSeq_GUARD

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

namespace TAO
{
  namespace TypeCode
  {
    namespace
    {
      TAO::TypeCode::Sequence< ::CORBA::TypeCode_ptr const *,
                              TAO::Null_RefCount_Policy>
        Cubit_HandleValuePairSeq_0 (
          ::CORBA::tk_sequence,
          &Cubit::_tc_HandleValuePair,
          0U);

      ::CORBA::TypeCode_ptr const tc_Cubit_HandleValuePairSeq_0 =
        &Cubit_HandleValuePairSeq_0;
    }
  }
}

TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_TYPECODE_Cubit_HandleValuePairSeq_GUARD */

static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_Cubit_HandleValuePairSeq (
    ::CORBA::tk_alias,
    "IDL:Cubit/HandleValuePairSeq:1.0",
    "HandleValuePairSeq",
    &TAO::TypeCode::tc_Cubit_HandleValuePairSeq_0);

::CORBA::TypeCode_ptr const Cubit::_tc_HandleValuePairSeq =
  &_tao_tc_Cubit_HandleValuePairSeq;

// TAO_IDL - Generated from
// be/be_visitor_typecode/struct_typecode.cpp:86



// TAO_IDL - Generated from
// be/be_visitor_typecode/typecode_defn.cpp:461



// TAO_IDL - Generated from
// be/be_visitor_typecode/typecode_defn.cpp:461

static TAO::TypeCode::Struct_Field<
  char const *,
  ::CORBA::TypeCode_ptr const *> const
    _tao_fields_Cubit_RtiObjectUpdateMessageHeader[] =
      {
        { "updateLength", &CORBA::_tc_ulong },
        { "updateTag", &CORBA::_tc_ulong },
        { "objectHandle", &CORBA::_tc_ulong },
        { "timestamp", &CORBA::_tc_double },
        { "eventRetractionHandle", &CORBA::_tc_ulonglong },
        { "classHandle", &CORBA::_tc_ushort },
        { "sendingFederateHandle", &CORBA::_tc_ushort },
        { "userTag", &CORBA::_tc_string },
        { "regionData", &Cubit::_tc_octet_seq },
        { "transportationHandle", &CORBA::_tc_octet },
        { "orderingHandle", &CORBA::_tc_octet },
        { "messagePayload", &Cubit::_tc_HandleValuePairSeq }
      };

static TAO::TypeCode::Struct<
  char const *,
  ::CORBA::TypeCode_ptr const *,
  TAO::TypeCode::Struct_Field<
    char const *,
    ::CORBA::TypeCode_ptr const *> const *,
  TAO::Null_RefCount_Policy>
_tao_tc_Cubit_RtiObjectUpdateMessageHeader (
  ::CORBA::tk_struct,
  "IDL:Cubit/RtiObjectUpdateMessageHeader:1.0",
  "RtiObjectUpdateMessageHeader",
  _tao_fields_Cubit_RtiObjectUpdateMessageHeader,
  12);

::CORBA::TypeCode_ptr const Cubit::_tc_RtiObjectUpdateMessageHeader =
  &_tao_tc_Cubit_RtiObjectUpdateMessageHeader;

// TAO_IDL - Generated from
// be/be_visitor_structure/structure_cs.cpp:56

void
Cubit::RtiObjectUpdateMessageHeader::_tao_any_destructor (
    void *_tao_void_pointer)
{
  RtiObjectUpdateMessageHeader *_tao_tmp_pointer =
    static_cast<RtiObjectUpdateMessageHeader *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

// TAO_IDL - Generated from
// be/be_visitor_typecode/struct_typecode.cpp:86

static TAO::TypeCode::Struct_Field<
  char const *,
  ::CORBA::TypeCode_ptr const *> const
    _tao_fields_Cubit_RtiInteractionMessageHeader[] =
      {
        { "updateLength", &CORBA::_tc_ulong }
      };

static TAO::TypeCode::Struct<
  char const *,
  ::CORBA::TypeCode_ptr const *,
  TAO::TypeCode::Struct_Field<
    char const *,
    ::CORBA::TypeCode_ptr const *> const *,
  TAO::Null_RefCount_Policy>
_tao_tc_Cubit_RtiInteractionMessageHeader (
  ::CORBA::tk_struct,
  "IDL:Cubit/RtiInteractionMessageHeader:1.0",
  "RtiInteractionMessageHeader",
  _tao_fields_Cubit_RtiInteractionMessageHeader,
  1);

::CORBA::TypeCode_ptr const Cubit::_tc_RtiInteractionMessageHeader =
  &_tao_tc_Cubit_RtiInteractionMessageHeader;

// TAO_IDL - Generated from
// be/be_visitor_structure/structure_cs.cpp:56

void
Cubit::RtiInteractionMessageHeader::_tao_any_destructor (
    void *_tao_void_pointer)
{
  RtiInteractionMessageHeader *_tao_tmp_pointer =
    static_cast<RtiInteractionMessageHeader *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

// TAO_IDL - Generated from
// be/be_visitor_union/union_cs.cpp:76

Cubit::MessageUnion::MessageUnion (void)
{
  ACE_OS::memset (&this->u_, 0, sizeof (this->u_));
  this->disc_ = (Cubit::MessageHeaderTypes) -1;
}

Cubit::MessageUnion::MessageUnion (const ::Cubit::MessageUnion &u)
{
  this->disc_ = u.disc_;
  switch (this->disc_)
  {
    case Cubit::objectUpdate:
    {
      if (u.u_.oumh_ == 0)
        {
          this->u_.oumh_ = 0;
        }
      else
        {
          ACE_NEW (
              this->u_.oumh_,
              Cubit::RtiObjectUpdateMessageHeader (*u.u_.oumh_)
            );
        }
    }
    break;
    case Cubit::interaction:
    {
      this->u_.imh_ = u.u_.imh_;
    }
    break;
    default:
    break;
  }
}

Cubit::MessageUnion::~MessageUnion (void)
{
  // Finalize.
  this->_reset ();
}

void Cubit::MessageUnion::_tao_any_destructor (void *_tao_void_pointer)
{
  MessageUnion *tmp =
    static_cast<MessageUnion *> (_tao_void_pointer);
  delete tmp;
}

Cubit::MessageUnion &
Cubit::MessageUnion::operator= (const ::Cubit::MessageUnion &u)
{
  if (&u == this)
    {
      return *this;
    }

  this->_reset ();
  this->disc_ = u.disc_;

  switch (this->disc_)
  {
    case Cubit::objectUpdate:
    {
      if (u.u_.oumh_ == 0)
        {
          this->u_.oumh_ = 0;
        }
      else
        {
          ACE_NEW_RETURN (
              this->u_.oumh_,
              Cubit::RtiObjectUpdateMessageHeader (*u.u_.oumh_),
              *this
            );
        }
    }
    break;
    case Cubit::interaction:
    {
      this->u_.imh_ = u.u_.imh_;
    }
    break;
    default:
    break;
  }

  return *this;
}

/// Reset method to reset old values of a union.
void Cubit::MessageUnion::_reset (void)
{
  switch (this->disc_)
  {

    case Cubit::objectUpdate:
      delete this->u_.oumh_;
      this->u_.oumh_ = 0;

    break;

    case Cubit::interaction:

    break;

    default:
    break;
  }
}

// TAO_IDL - Generated from
// be/be_visitor_typecode/union_typecode.cpp:65

static TAO::TypeCode::Case_T<Cubit::MessageHeaderTypes, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_Cubit_MessageUnion__0 (Cubit::objectUpdate, "oumh", &Cubit::_tc_RtiObjectUpdateMessageHeader);
static TAO::TypeCode::Case_T<Cubit::MessageHeaderTypes, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_Cubit_MessageUnion__1 (Cubit::interaction, "imh", &Cubit::_tc_RtiInteractionMessageHeader);

static TAO::TypeCode::Case<char const *, ::CORBA::TypeCode_ptr const *> const * const _tao_cases_Cubit_MessageUnion[] =
  {
    &_tao_cases_Cubit_MessageUnion__0,
    &_tao_cases_Cubit_MessageUnion__1
  };

static TAO::TypeCode::Union<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::TypeCode::Case<char const *, ::CORBA::TypeCode_ptr const *> const * const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_Cubit_MessageUnion (
    "IDL:Cubit/MessageUnion:1.0",
    "MessageUnion",
    &Cubit::_tc_MessageHeaderTypes,
    _tao_cases_Cubit_MessageUnion,
    sizeof (_tao_cases_Cubit_MessageUnion)/sizeof (_tao_cases_Cubit_MessageUnion[0]),
    -1);

::CORBA::TypeCode_ptr const Cubit::_tc_MessageUnion =
  &_tao_tc_Cubit_MessageUnion;

// TAO_IDL - Generated from
// be/be_visitor_sequence/sequence_cs.cpp:70

#if !defined (_CUBIT_MESSAGEUNIONSEQ_CS_)
#define _CUBIT_MESSAGEUNIONSEQ_CS_

Cubit::MessageUnionSeq::MessageUnionSeq (void)
{}

Cubit::MessageUnionSeq::MessageUnionSeq (
    ::CORBA::ULong max)
  : ::TAO::unbounded_value_sequence<
        MessageUnion
      > (max)
{}

Cubit::MessageUnionSeq::MessageUnionSeq (
    ::CORBA::ULong max,
    ::CORBA::ULong length,
    Cubit::MessageUnion * buffer,
    ::CORBA::Boolean release
  )
  : ::TAO::unbounded_value_sequence<
        MessageUnion
      >
    (max, length, buffer, release)
{}

Cubit::MessageUnionSeq::MessageUnionSeq (
    const MessageUnionSeq &seq)
  : ::TAO::unbounded_value_sequence<
        MessageUnion
      > (seq)
{}

Cubit::MessageUnionSeq::~MessageUnionSeq (void)
{}

void Cubit::MessageUnionSeq::_tao_any_destructor (
    void * _tao_void_pointer)
{
  MessageUnionSeq * _tao_tmp_pointer =
    static_cast<MessageUnionSeq *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

#endif /* end #if !defined */

// TAO_IDL - Generated from
// be/be_visitor_typecode/alias_typecode.cpp:49



// TAO_IDL - Generated from
// be/be_visitor_typecode/typecode_defn.cpp:461


#ifndef _TAO_TYPECODE_Cubit_MessageUnionSeq_GUARD
#define _TAO_TYPECODE_Cubit_MessageUnionSeq_GUARD

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

namespace TAO
{
  namespace TypeCode
  {
    namespace
    {
      TAO::TypeCode::Sequence< ::CORBA::TypeCode_ptr const *,
                              TAO::Null_RefCount_Policy>
        Cubit_MessageUnionSeq_0 (
          ::CORBA::tk_sequence,
          &Cubit::_tc_MessageUnion,
          0U);

      ::CORBA::TypeCode_ptr const tc_Cubit_MessageUnionSeq_0 =
        &Cubit_MessageUnionSeq_0;
    }
  }
}

TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_TYPECODE_Cubit_MessageUnionSeq_GUARD */

static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_Cubit_MessageUnionSeq (
    ::CORBA::tk_alias,
    "IDL:Cubit/MessageUnionSeq:1.0",
    "MessageUnionSeq",
    &TAO::TypeCode::tc_Cubit_MessageUnionSeq_0);

::CORBA::TypeCode_ptr const Cubit::_tc_MessageUnionSeq =
  &_tao_tc_Cubit_MessageUnionSeq;

// TAO_IDL - Generated from
// be/be_visitor_typecode/struct_typecode.cpp:86



// TAO_IDL - Generated from
// be/be_visitor_typecode/typecode_defn.cpp:461

static TAO::TypeCode::Struct_Field<
  char const *,
  ::CORBA::TypeCode_ptr const *> const
    _tao_fields_Cubit_RtiPacket[] =
      {
        { "packetHeader", &Cubit::_tc_RtiPacketHeader },
        { "msgs", &Cubit::_tc_MessageUnionSeq }
      };

static TAO::TypeCode::Struct<
  char const *,
  ::CORBA::TypeCode_ptr const *,
  TAO::TypeCode::Struct_Field<
    char const *,
    ::CORBA::TypeCode_ptr const *> const *,
  TAO::Null_RefCount_Policy>
_tao_tc_Cubit_RtiPacket (
  ::CORBA::tk_struct,
  "IDL:Cubit/RtiPacket:1.0",
  "RtiPacket",
  _tao_fields_Cubit_RtiPacket,
  2);

::CORBA::TypeCode_ptr const Cubit::_tc_RtiPacket =
  &_tao_tc_Cubit_RtiPacket;

// TAO_IDL - Generated from
// be/be_visitor_structure/structure_cs.cpp:56

void
Cubit::RtiPacket::_tao_any_destructor (
    void *_tao_void_pointer)
{
  RtiPacket *_tao_tmp_pointer =
    static_cast<RtiPacket *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:88

void
Cubit::cube_rti_data (
  const ::Cubit::RtiPacket & input,
  ::Cubit::RtiPacket_out output)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }

  TAO::Arg_Traits< void>::ret_val _tao_retval;
  TAO::Arg_Traits< ::Cubit::RtiPacket>::in_arg_val _tao_input (input);
  TAO::Arg_Traits< ::Cubit::RtiPacket>::out_arg_val _tao_output (output);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_input,
      &_tao_output
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      3,
      "cube_rti_data",
      13,
      TAO::TAO_CO_NONE | TAO::TAO_CO_DIRECT_STRATEGY | TAO::TAO_CO_THRU_POA_STRATEGY

    );

  _tao_call.invoke (0, 0);
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:88

void
Cubit::ping (
  void)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }

  TAO::Arg_Traits< void>::ret_val _tao_retval;

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      1,
      "ping",
      4,
      TAO::TAO_CO_NONE | TAO::TAO_CO_DIRECT_STRATEGY | TAO::TAO_CO_THRU_POA_STRATEGY,
      TAO::TAO_TWOWAY_INVOCATION
      ,
      TAO::TAO_SYNCHRONOUS_INVOCATION,
      false
    );

  _tao_call.invoke (0, 0);
}

Cubit::Cubit (void)
{
}

Cubit::~Cubit (void)
{
}

void
Cubit::_tao_any_destructor (void *_tao_void_pointer)
{
  Cubit *_tao_tmp_pointer =
    static_cast<Cubit *> (_tao_void_pointer);
  ::CORBA::release (_tao_tmp_pointer);
}

Cubit_ptr
Cubit::_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return
    TAO::Narrow_Utils<Cubit>::narrow (
        _tao_objref,
        "IDL:Cubit:1.0");
}

Cubit_ptr
Cubit::_unchecked_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return
    TAO::Narrow_Utils<Cubit>::unchecked_narrow (
        _tao_objref);
}

Cubit_ptr
Cubit::_nil (void)
{
  return 0;
}

Cubit_ptr
Cubit::_duplicate (Cubit_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  return obj;
}

void
Cubit::_tao_release (Cubit_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
Cubit::_is_a (const char *value)
{
  if (
      ACE_OS::strcmp (
          value,
          "IDL:Cubit:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        ) == 0
    )
    {
      return true; // success using local knowledge
    }
  else
    {
      return this->::CORBA::Object::_is_a (value);
    }
}

const char* Cubit::_interface_repository_id (void) const
{
  return "IDL:Cubit:1.0";
}

::CORBA::Boolean
Cubit::marshal (TAO_OutputCDR &cdr)
{
  return (cdr << this);
}

// TAO_IDL - Generated from
// be/be_visitor_typecode/objref_typecode.cpp:70

static TAO::TypeCode::Objref<char const *,
                             TAO::Null_RefCount_Policy>
  _tao_tc_Cubit (
    ::CORBA::tk_objref,
    "IDL:Cubit:1.0",
    "Cubit");

::CORBA::TypeCode_ptr const _tc_Cubit =
  &_tao_tc_Cubit;

// TAO_IDL - Generated from
// be/be_visitor_interface/interface_cs.cpp:48

// Traits specializations for Cubit_Factory.

Cubit_Factory_ptr
TAO::Objref_Traits<Cubit_Factory>::duplicate (
    Cubit_Factory_ptr p)
{
  return Cubit_Factory::_duplicate (p);
}

void
TAO::Objref_Traits<Cubit_Factory>::release (
    Cubit_Factory_ptr p)
{
  ::CORBA::release (p);
}

Cubit_Factory_ptr
TAO::Objref_Traits<Cubit_Factory>::nil (void)
{
  return Cubit_Factory::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<Cubit_Factory>::marshal (
    const Cubit_Factory_ptr p,
    TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:88

::Cubit_ptr
Cubit_Factory::make_cubit (
  void)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }

  TAO::Arg_Traits< ::Cubit>::ret_val _tao_retval;

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      1,
      "make_cubit",
      10,
      TAO::TAO_CO_NONE | TAO::TAO_CO_DIRECT_STRATEGY | TAO::TAO_CO_THRU_POA_STRATEGY,
      TAO::TAO_TWOWAY_INVOCATION
      ,
      TAO::TAO_SYNCHRONOUS_INVOCATION,
      false
    );

  _tao_call.invoke (0, 0);

  return _tao_retval.retn ();
}

Cubit_Factory::Cubit_Factory (void)
{
}

Cubit_Factory::~Cubit_Factory (void)
{
}

void
Cubit_Factory::_tao_any_destructor (void *_tao_void_pointer)
{
  Cubit_Factory *_tao_tmp_pointer =
    static_cast<Cubit_Factory *> (_tao_void_pointer);
  ::CORBA::release (_tao_tmp_pointer);
}

Cubit_Factory_ptr
Cubit_Factory::_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return
    TAO::Narrow_Utils<Cubit_Factory>::narrow (
        _tao_objref,
        "IDL:Cubit_Factory:1.0");
}

Cubit_Factory_ptr
Cubit_Factory::_unchecked_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return
    TAO::Narrow_Utils<Cubit_Factory>::unchecked_narrow (
        _tao_objref);
}

Cubit_Factory_ptr
Cubit_Factory::_nil (void)
{
  return 0;
}

Cubit_Factory_ptr
Cubit_Factory::_duplicate (Cubit_Factory_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  return obj;
}

void
Cubit_Factory::_tao_release (Cubit_Factory_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
Cubit_Factory::_is_a (const char *value)
{
  if (
      ACE_OS::strcmp (
          value,
          "IDL:Cubit_Factory:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        ) == 0
    )
    {
      return true; // success using local knowledge
    }
  else
    {
      return this->::CORBA::Object::_is_a (value);
    }
}

const char* Cubit_Factory::_interface_repository_id (void) const
{
  return "IDL:Cubit_Factory:1.0";
}

::CORBA::Boolean
Cubit_Factory::marshal (TAO_OutputCDR &cdr)
{
  return (cdr << this);
}

// TAO_IDL - Generated from
// be/be_visitor_typecode/objref_typecode.cpp:70

static TAO::TypeCode::Objref<char const *,
                             TAO::Null_RefCount_Policy>
  _tao_tc_Cubit_Factory (
    ::CORBA::tk_objref,
    "IDL:Cubit_Factory:1.0",
    "Cubit_Factory");

::CORBA::TypeCode_ptr const _tc_Cubit_Factory =
  &_tao_tc_Cubit_Factory;

// TAO_IDL - Generated from
// be/be_visitor_interface/any_op_cs.cpp:38
TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<Cubit>::to_object (
      ::CORBA::Object_ptr &_tao_elem) const
  {
    _tao_elem = ::CORBA::Object::_duplicate (this->value_);
    return true;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



/// Copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    Cubit_ptr _tao_elem)
{
  Cubit_ptr _tao_objptr =
    Cubit::_duplicate (_tao_elem);
  _tao_any <<= &_tao_objptr;
}

/// Non-copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    Cubit_ptr *_tao_elem)
{
  TAO::Any_Impl_T<Cubit>::insert (
      _tao_any,
      Cubit::_tao_any_destructor,
      _tc_Cubit,
      *_tao_elem);
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    Cubit_ptr &_tao_elem)
{
  return
    TAO::Any_Impl_T<Cubit>::extract (
        _tao_any,
        Cubit::_tao_any_destructor,
        _tc_Cubit,
        _tao_elem);
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_structure/any_op_cs.cpp:43


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

/// Copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  const Cubit::Many &_tao_elem)
{
  TAO::Any_Dual_Impl_T<Cubit::Many>::insert_copy (
    _tao_any,
    Cubit::Many::_tao_any_destructor,
    Cubit::_tc_Many,
    _tao_elem);
}

/// Non-copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  Cubit::Many *_tao_elem)
{
  TAO::Any_Dual_Impl_T<Cubit::Many>::insert (
    _tao_any,
    Cubit::Many::_tao_any_destructor,
    Cubit::_tc_Many,
    _tao_elem);
}

/// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
  const ::CORBA::Any &_tao_any,
  Cubit::Many *&_tao_elem)
{
  return _tao_any >>= const_cast<
      const Cubit::Many *&> (
      _tao_elem);
}

/// Extraction to const pointer.
::CORBA::Boolean operator>>= (
  const ::CORBA::Any &_tao_any,
  const Cubit::Many *&_tao_elem)
{
  return
    TAO::Any_Dual_Impl_T<Cubit::Many>::extract (
      _tao_any,
      Cubit::Many::_tao_any_destructor,
      Cubit::_tc_Many,
      _tao_elem);
}
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_enum/any_op_cs.cpp:35

TAO_BEGIN_VERSIONED_NAMESPACE_DECL


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

void operator<<= (
    ::CORBA::Any &_tao_any,
    Cubit::discrim _tao_elem
  )
{
  TAO::Any_Basic_Impl_T<Cubit::discrim>::insert (
      _tao_any,
      Cubit::_tc_discrim,
      _tao_elem
    );
}

::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    Cubit::discrim &_tao_elem
  )
{
  return
    TAO::Any_Basic_Impl_T<Cubit::discrim>::extract (
        _tao_any,
        Cubit::_tc_discrim,
        _tao_elem
      );
}
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_union/any_op_cs.cpp:37


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    const Cubit::oneof &_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<Cubit::oneof>::insert_copy (
      _tao_any,
      Cubit::oneof::_tao_any_destructor,
      Cubit::_tc_oneof,
      _tao_elem
    );
}

// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    Cubit::oneof *_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<Cubit::oneof>::insert (
      _tao_any,
      Cubit::oneof::_tao_any_destructor,
      Cubit::_tc_oneof,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    Cubit::oneof *&_tao_elem
  )
{
  return _tao_any >>= const_cast<
      const Cubit::oneof *&> (
      _tao_elem
    );
}

// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const Cubit::oneof *&_tao_elem
  )
{
  return
    TAO::Any_Dual_Impl_T<Cubit::oneof>::extract (
        _tao_any,
        Cubit::oneof::_tao_any_destructor,
        Cubit::_tc_oneof,
        _tao_elem
      );
}
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_sequence/any_op_cs.cpp:45


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


// Copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    const Cubit::long_seq &_tao_elem)
{
  TAO::Any_Dual_Impl_T<Cubit::long_seq>::insert_copy (
      _tao_any,
      Cubit::long_seq::_tao_any_destructor,
      Cubit::_tc_long_seq,
      _tao_elem
    );
}

// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    Cubit::long_seq *_tao_elem)
{
  TAO::Any_Dual_Impl_T<Cubit::long_seq>::insert (
      _tao_any,
      Cubit::long_seq::_tao_any_destructor,
      Cubit::_tc_long_seq,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    Cubit::long_seq *&_tao_elem)
{
  return _tao_any >>= const_cast<
      const Cubit::long_seq *&> (
      _tao_elem
    );
}

// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const Cubit::long_seq *&_tao_elem)
{
  return
    TAO::Any_Dual_Impl_T<Cubit::long_seq>::extract (
        _tao_any,
        Cubit::long_seq::_tao_any_destructor,
        Cubit::_tc_long_seq,
        _tao_elem);
}
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_sequence/any_op_cs.cpp:45


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


// Copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    const Cubit::octet_seq &_tao_elem)
{
  TAO::Any_Dual_Impl_T<Cubit::octet_seq>::insert_copy (
      _tao_any,
      Cubit::octet_seq::_tao_any_destructor,
      Cubit::_tc_octet_seq,
      _tao_elem
    );
}

// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    Cubit::octet_seq *_tao_elem)
{
  TAO::Any_Dual_Impl_T<Cubit::octet_seq>::insert (
      _tao_any,
      Cubit::octet_seq::_tao_any_destructor,
      Cubit::_tc_octet_seq,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    Cubit::octet_seq *&_tao_elem)
{
  return _tao_any >>= const_cast<
      const Cubit::octet_seq *&> (
      _tao_elem
    );
}

// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const Cubit::octet_seq *&_tao_elem)
{
  return
    TAO::Any_Dual_Impl_T<Cubit::octet_seq>::extract (
        _tao_any,
        Cubit::octet_seq::_tao_any_destructor,
        Cubit::_tc_octet_seq,
        _tao_elem);
}
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_sequence/any_op_cs.cpp:45


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


// Copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    const Cubit::many_seq &_tao_elem)
{
  TAO::Any_Dual_Impl_T<Cubit::many_seq>::insert_copy (
      _tao_any,
      Cubit::many_seq::_tao_any_destructor,
      Cubit::_tc_many_seq,
      _tao_elem
    );
}

// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    Cubit::many_seq *_tao_elem)
{
  TAO::Any_Dual_Impl_T<Cubit::many_seq>::insert (
      _tao_any,
      Cubit::many_seq::_tao_any_destructor,
      Cubit::_tc_many_seq,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    Cubit::many_seq *&_tao_elem)
{
  return _tao_any >>= const_cast<
      const Cubit::many_seq *&> (
      _tao_elem
    );
}

// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const Cubit::many_seq *&_tao_elem)
{
  return
    TAO::Any_Dual_Impl_T<Cubit::many_seq>::extract (
        _tao_any,
        Cubit::many_seq::_tao_any_destructor,
        Cubit::_tc_many_seq,
        _tao_elem);
}
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_structure/any_op_cs.cpp:43


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

/// Copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  const Cubit::RtiPacketHeader &_tao_elem)
{
  TAO::Any_Dual_Impl_T<Cubit::RtiPacketHeader>::insert_copy (
    _tao_any,
    Cubit::RtiPacketHeader::_tao_any_destructor,
    Cubit::_tc_RtiPacketHeader,
    _tao_elem);
}

/// Non-copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  Cubit::RtiPacketHeader *_tao_elem)
{
  TAO::Any_Dual_Impl_T<Cubit::RtiPacketHeader>::insert (
    _tao_any,
    Cubit::RtiPacketHeader::_tao_any_destructor,
    Cubit::_tc_RtiPacketHeader,
    _tao_elem);
}

/// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
  const ::CORBA::Any &_tao_any,
  Cubit::RtiPacketHeader *&_tao_elem)
{
  return _tao_any >>= const_cast<
      const Cubit::RtiPacketHeader *&> (
      _tao_elem);
}

/// Extraction to const pointer.
::CORBA::Boolean operator>>= (
  const ::CORBA::Any &_tao_any,
  const Cubit::RtiPacketHeader *&_tao_elem)
{
  return
    TAO::Any_Dual_Impl_T<Cubit::RtiPacketHeader>::extract (
      _tao_any,
      Cubit::RtiPacketHeader::_tao_any_destructor,
      Cubit::_tc_RtiPacketHeader,
      _tao_elem);
}
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_structure/any_op_cs.cpp:43


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

/// Copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  const Cubit::HandleValuePair &_tao_elem)
{
  TAO::Any_Dual_Impl_T<Cubit::HandleValuePair>::insert_copy (
    _tao_any,
    Cubit::HandleValuePair::_tao_any_destructor,
    Cubit::_tc_HandleValuePair,
    _tao_elem);
}

/// Non-copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  Cubit::HandleValuePair *_tao_elem)
{
  TAO::Any_Dual_Impl_T<Cubit::HandleValuePair>::insert (
    _tao_any,
    Cubit::HandleValuePair::_tao_any_destructor,
    Cubit::_tc_HandleValuePair,
    _tao_elem);
}

/// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
  const ::CORBA::Any &_tao_any,
  Cubit::HandleValuePair *&_tao_elem)
{
  return _tao_any >>= const_cast<
      const Cubit::HandleValuePair *&> (
      _tao_elem);
}

/// Extraction to const pointer.
::CORBA::Boolean operator>>= (
  const ::CORBA::Any &_tao_any,
  const Cubit::HandleValuePair *&_tao_elem)
{
  return
    TAO::Any_Dual_Impl_T<Cubit::HandleValuePair>::extract (
      _tao_any,
      Cubit::HandleValuePair::_tao_any_destructor,
      Cubit::_tc_HandleValuePair,
      _tao_elem);
}
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_enum/any_op_cs.cpp:35

TAO_BEGIN_VERSIONED_NAMESPACE_DECL


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

void operator<<= (
    ::CORBA::Any &_tao_any,
    Cubit::MessageHeaderTypes _tao_elem
  )
{
  TAO::Any_Basic_Impl_T<Cubit::MessageHeaderTypes>::insert (
      _tao_any,
      Cubit::_tc_MessageHeaderTypes,
      _tao_elem
    );
}

::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    Cubit::MessageHeaderTypes &_tao_elem
  )
{
  return
    TAO::Any_Basic_Impl_T<Cubit::MessageHeaderTypes>::extract (
        _tao_any,
        Cubit::_tc_MessageHeaderTypes,
        _tao_elem
      );
}
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_sequence/any_op_cs.cpp:45


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


// Copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    const Cubit::HandleValuePairSeq &_tao_elem)
{
  TAO::Any_Dual_Impl_T<Cubit::HandleValuePairSeq>::insert_copy (
      _tao_any,
      Cubit::HandleValuePairSeq::_tao_any_destructor,
      Cubit::_tc_HandleValuePairSeq,
      _tao_elem
    );
}

// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    Cubit::HandleValuePairSeq *_tao_elem)
{
  TAO::Any_Dual_Impl_T<Cubit::HandleValuePairSeq>::insert (
      _tao_any,
      Cubit::HandleValuePairSeq::_tao_any_destructor,
      Cubit::_tc_HandleValuePairSeq,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    Cubit::HandleValuePairSeq *&_tao_elem)
{
  return _tao_any >>= const_cast<
      const Cubit::HandleValuePairSeq *&> (
      _tao_elem
    );
}

// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const Cubit::HandleValuePairSeq *&_tao_elem)
{
  return
    TAO::Any_Dual_Impl_T<Cubit::HandleValuePairSeq>::extract (
        _tao_any,
        Cubit::HandleValuePairSeq::_tao_any_destructor,
        Cubit::_tc_HandleValuePairSeq,
        _tao_elem);
}
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_structure/any_op_cs.cpp:43


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

/// Copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  const Cubit::RtiObjectUpdateMessageHeader &_tao_elem)
{
  TAO::Any_Dual_Impl_T<Cubit::RtiObjectUpdateMessageHeader>::insert_copy (
    _tao_any,
    Cubit::RtiObjectUpdateMessageHeader::_tao_any_destructor,
    Cubit::_tc_RtiObjectUpdateMessageHeader,
    _tao_elem);
}

/// Non-copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  Cubit::RtiObjectUpdateMessageHeader *_tao_elem)
{
  TAO::Any_Dual_Impl_T<Cubit::RtiObjectUpdateMessageHeader>::insert (
    _tao_any,
    Cubit::RtiObjectUpdateMessageHeader::_tao_any_destructor,
    Cubit::_tc_RtiObjectUpdateMessageHeader,
    _tao_elem);
}

/// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
  const ::CORBA::Any &_tao_any,
  Cubit::RtiObjectUpdateMessageHeader *&_tao_elem)
{
  return _tao_any >>= const_cast<
      const Cubit::RtiObjectUpdateMessageHeader *&> (
      _tao_elem);
}

/// Extraction to const pointer.
::CORBA::Boolean operator>>= (
  const ::CORBA::Any &_tao_any,
  const Cubit::RtiObjectUpdateMessageHeader *&_tao_elem)
{
  return
    TAO::Any_Dual_Impl_T<Cubit::RtiObjectUpdateMessageHeader>::extract (
      _tao_any,
      Cubit::RtiObjectUpdateMessageHeader::_tao_any_destructor,
      Cubit::_tc_RtiObjectUpdateMessageHeader,
      _tao_elem);
}
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_structure/any_op_cs.cpp:43


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

/// Copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  const Cubit::RtiInteractionMessageHeader &_tao_elem)
{
  TAO::Any_Dual_Impl_T<Cubit::RtiInteractionMessageHeader>::insert_copy (
    _tao_any,
    Cubit::RtiInteractionMessageHeader::_tao_any_destructor,
    Cubit::_tc_RtiInteractionMessageHeader,
    _tao_elem);
}

/// Non-copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  Cubit::RtiInteractionMessageHeader *_tao_elem)
{
  TAO::Any_Dual_Impl_T<Cubit::RtiInteractionMessageHeader>::insert (
    _tao_any,
    Cubit::RtiInteractionMessageHeader::_tao_any_destructor,
    Cubit::_tc_RtiInteractionMessageHeader,
    _tao_elem);
}

/// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
  const ::CORBA::Any &_tao_any,
  Cubit::RtiInteractionMessageHeader *&_tao_elem)
{
  return _tao_any >>= const_cast<
      const Cubit::RtiInteractionMessageHeader *&> (
      _tao_elem);
}

/// Extraction to const pointer.
::CORBA::Boolean operator>>= (
  const ::CORBA::Any &_tao_any,
  const Cubit::RtiInteractionMessageHeader *&_tao_elem)
{
  return
    TAO::Any_Dual_Impl_T<Cubit::RtiInteractionMessageHeader>::extract (
      _tao_any,
      Cubit::RtiInteractionMessageHeader::_tao_any_destructor,
      Cubit::_tc_RtiInteractionMessageHeader,
      _tao_elem);
}
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_union/any_op_cs.cpp:37


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    const Cubit::MessageUnion &_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<Cubit::MessageUnion>::insert_copy (
      _tao_any,
      Cubit::MessageUnion::_tao_any_destructor,
      Cubit::_tc_MessageUnion,
      _tao_elem
    );
}

// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    Cubit::MessageUnion *_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<Cubit::MessageUnion>::insert (
      _tao_any,
      Cubit::MessageUnion::_tao_any_destructor,
      Cubit::_tc_MessageUnion,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    Cubit::MessageUnion *&_tao_elem
  )
{
  return _tao_any >>= const_cast<
      const Cubit::MessageUnion *&> (
      _tao_elem
    );
}

// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const Cubit::MessageUnion *&_tao_elem
  )
{
  return
    TAO::Any_Dual_Impl_T<Cubit::MessageUnion>::extract (
        _tao_any,
        Cubit::MessageUnion::_tao_any_destructor,
        Cubit::_tc_MessageUnion,
        _tao_elem
      );
}
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_sequence/any_op_cs.cpp:45


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


// Copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    const Cubit::MessageUnionSeq &_tao_elem)
{
  TAO::Any_Dual_Impl_T<Cubit::MessageUnionSeq>::insert_copy (
      _tao_any,
      Cubit::MessageUnionSeq::_tao_any_destructor,
      Cubit::_tc_MessageUnionSeq,
      _tao_elem
    );
}

// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    Cubit::MessageUnionSeq *_tao_elem)
{
  TAO::Any_Dual_Impl_T<Cubit::MessageUnionSeq>::insert (
      _tao_any,
      Cubit::MessageUnionSeq::_tao_any_destructor,
      Cubit::_tc_MessageUnionSeq,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    Cubit::MessageUnionSeq *&_tao_elem)
{
  return _tao_any >>= const_cast<
      const Cubit::MessageUnionSeq *&> (
      _tao_elem
    );
}

// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const Cubit::MessageUnionSeq *&_tao_elem)
{
  return
    TAO::Any_Dual_Impl_T<Cubit::MessageUnionSeq>::extract (
        _tao_any,
        Cubit::MessageUnionSeq::_tao_any_destructor,
        Cubit::_tc_MessageUnionSeq,
        _tao_elem);
}
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_structure/any_op_cs.cpp:43


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

/// Copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  const Cubit::RtiPacket &_tao_elem)
{
  TAO::Any_Dual_Impl_T<Cubit::RtiPacket>::insert_copy (
    _tao_any,
    Cubit::RtiPacket::_tao_any_destructor,
    Cubit::_tc_RtiPacket,
    _tao_elem);
}

/// Non-copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  Cubit::RtiPacket *_tao_elem)
{
  TAO::Any_Dual_Impl_T<Cubit::RtiPacket>::insert (
    _tao_any,
    Cubit::RtiPacket::_tao_any_destructor,
    Cubit::_tc_RtiPacket,
    _tao_elem);
}

/// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
  const ::CORBA::Any &_tao_any,
  Cubit::RtiPacket *&_tao_elem)
{
  return _tao_any >>= const_cast<
      const Cubit::RtiPacket *&> (
      _tao_elem);
}

/// Extraction to const pointer.
::CORBA::Boolean operator>>= (
  const ::CORBA::Any &_tao_any,
  const Cubit::RtiPacket *&_tao_elem)
{
  return
    TAO::Any_Dual_Impl_T<Cubit::RtiPacket>::extract (
      _tao_any,
      Cubit::RtiPacket::_tao_any_destructor,
      Cubit::_tc_RtiPacket,
      _tao_elem);
}
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_interface/any_op_cs.cpp:38
TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<Cubit_Factory>::to_object (
      ::CORBA::Object_ptr &_tao_elem) const
  {
    _tao_elem = ::CORBA::Object::_duplicate (this->value_);
    return true;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



/// Copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    Cubit_Factory_ptr _tao_elem)
{
  Cubit_Factory_ptr _tao_objptr =
    Cubit_Factory::_duplicate (_tao_elem);
  _tao_any <<= &_tao_objptr;
}

/// Non-copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    Cubit_Factory_ptr *_tao_elem)
{
  TAO::Any_Impl_T<Cubit_Factory>::insert (
      _tao_any,
      Cubit_Factory::_tao_any_destructor,
      _tc_Cubit_Factory,
      *_tao_elem);
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    Cubit_Factory_ptr &_tao_elem)
{
  return
    TAO::Any_Impl_T<Cubit_Factory>::extract (
        _tao_any,
        Cubit_Factory::_tao_any_destructor,
        _tc_Cubit_Factory,
        _tao_elem);
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_structure/cdr_op_cs.cpp:49

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Cubit::Many &_tao_aggregate)
{
  return
    (strm << ::ACE_OutputCDR::from_octet (_tao_aggregate.o)) &&
    (strm << _tao_aggregate.l) &&
    (strm << _tao_aggregate.s);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Cubit::Many &_tao_aggregate)
{
  return
    (strm >> ::ACE_InputCDR::to_octet (_tao_aggregate.o)) &&
    (strm >> _tao_aggregate.l) &&
    (strm >> _tao_aggregate.s);
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_enum/cdr_op_cs.cpp:34


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (TAO_OutputCDR &strm, Cubit::discrim _tao_enumerator)
{
  return strm << static_cast< ::CORBA::ULong> (_tao_enumerator);
}

::CORBA::Boolean operator>> (TAO_InputCDR &strm, Cubit::discrim & _tao_enumerator)
{
  ::CORBA::ULong _tao_temp = 0;
  ::CORBA::Boolean const _tao_success = strm >> _tao_temp;

  if (_tao_success)
    {
      _tao_enumerator = static_cast<Cubit::discrim> (_tao_temp);
    }

  return _tao_success;
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_union/cdr_op_cs.cpp:74


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Cubit::oneof &_tao_union
  )
{
  if ( !(strm << _tao_union._d ()) )
    {
      return false;
    }

  ::CORBA::Boolean result = true;

  switch (_tao_union._d ())
  {
    case Cubit::e_0th:
      {
        result = strm << ::ACE_OutputCDR::from_octet (_tao_union.o ());
      }
      break;
    case Cubit::e_1st:
      {
        result = strm << _tao_union.s ();
      }
      break;
    case Cubit::e_2nd:
      {
        result = strm << _tao_union.l ();
      }
      break;
    case Cubit::e_3rd:
      {
        result = strm << _tao_union.cm ();
      }
      break;
    default:
      break;
  }

  return result;
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Cubit::oneof &_tao_union
  )
{
  Cubit::discrim _tao_discriminant;
  if ( !(strm >> _tao_discriminant) )
    {
      return false;
    }

  ::CORBA::Boolean result = true;

  switch (_tao_discriminant)
  {
    case Cubit::e_0th:
      {
        ::CORBA::Octet _tao_union_tmp;
        ::ACE_InputCDR::to_octet _tao_union_helper (_tao_union_tmp);
        result = strm >> _tao_union_helper;

        if (result)
          {
            _tao_union.o (_tao_union_tmp);
            _tao_union._d (_tao_discriminant);
          }
      }
      break;
    case Cubit::e_1st:
      {
        CORBA::Short _tao_union_tmp;
        result = strm >> _tao_union_tmp;

        if (result)
          {
            _tao_union.s (_tao_union_tmp);
            _tao_union._d (_tao_discriminant);
          }
      }
      break;
    case Cubit::e_2nd:
      {
        CORBA::Long _tao_union_tmp;
        result = strm >> _tao_union_tmp;

        if (result)
          {
            _tao_union.l (_tao_union_tmp);
            _tao_union._d (_tao_discriminant);
          }
      }
      break;
    case Cubit::e_3rd:
      {
        Cubit::Many _tao_union_tmp;
        result = strm >> _tao_union_tmp;

        if (result)
          {
            _tao_union.cm (_tao_union_tmp);
            _tao_union._d (_tao_discriminant);
          }
      }
      break;
    default:
      _tao_union._default ();
      // For maximum interop compatibility, force the same value as transmitted
      _tao_union._d (_tao_discriminant);
      break;
  }

  return result;
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_sequence/cdr_op_cs.cpp:93
#if !defined _TAO_CDR_OP_Cubit_long_seq_CPP_
#define _TAO_CDR_OP_Cubit_long_seq_CPP_

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Cubit::long_seq &_tao_sequence)
{
  return TAO::marshal_sequence(strm, _tao_sequence);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Cubit::long_seq &_tao_sequence)
{
  return TAO::demarshal_sequence(strm, _tao_sequence);
}


TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_CDR_OP_Cubit_long_seq_CPP_ */

// TAO_IDL - Generated from
// be/be_visitor_sequence/cdr_op_cs.cpp:93
#if !defined _TAO_CDR_OP_Cubit_octet_seq_CPP_
#define _TAO_CDR_OP_Cubit_octet_seq_CPP_

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Cubit::octet_seq &_tao_sequence)
{
  return TAO::marshal_sequence(strm, _tao_sequence);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Cubit::octet_seq &_tao_sequence)
{
  return TAO::demarshal_sequence(strm, _tao_sequence);
}


TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_CDR_OP_Cubit_octet_seq_CPP_ */

// TAO_IDL - Generated from
// be/be_visitor_sequence/cdr_op_cs.cpp:93
#if !defined _TAO_CDR_OP_Cubit_many_seq_CPP_
#define _TAO_CDR_OP_Cubit_many_seq_CPP_

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Cubit::many_seq &_tao_sequence)
{
  return TAO::marshal_sequence(strm, _tao_sequence);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Cubit::many_seq &_tao_sequence)
{
  return TAO::demarshal_sequence(strm, _tao_sequence);
}


TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_CDR_OP_Cubit_many_seq_CPP_ */

// TAO_IDL - Generated from
// be/be_visitor_structure/cdr_op_cs.cpp:49

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Cubit::RtiPacketHeader &_tao_aggregate)
{
  return
    (strm << _tao_aggregate.packetLength) &&
    (strm << _tao_aggregate.federationHandle) &&
    (strm << _tao_aggregate.channelHandle) &&
    (strm << _tao_aggregate.packetColor);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Cubit::RtiPacketHeader &_tao_aggregate)
{
  return
    (strm >> _tao_aggregate.packetLength) &&
    (strm >> _tao_aggregate.federationHandle) &&
    (strm >> _tao_aggregate.channelHandle) &&
    (strm >> _tao_aggregate.packetColor);
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_structure/cdr_op_cs.cpp:49

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Cubit::HandleValuePair &_tao_aggregate)
{
  return
    (strm << _tao_aggregate.handle) &&
    (strm << _tao_aggregate.data);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Cubit::HandleValuePair &_tao_aggregate)
{
  return
    (strm >> _tao_aggregate.handle) &&
    (strm >> _tao_aggregate.data);
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_enum/cdr_op_cs.cpp:34


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (TAO_OutputCDR &strm, Cubit::MessageHeaderTypes _tao_enumerator)
{
  return strm << static_cast< ::CORBA::ULong> (_tao_enumerator);
}

::CORBA::Boolean operator>> (TAO_InputCDR &strm, Cubit::MessageHeaderTypes & _tao_enumerator)
{
  ::CORBA::ULong _tao_temp = 0;
  ::CORBA::Boolean const _tao_success = strm >> _tao_temp;

  if (_tao_success)
    {
      _tao_enumerator = static_cast<Cubit::MessageHeaderTypes> (_tao_temp);
    }

  return _tao_success;
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_sequence/cdr_op_cs.cpp:93
#if !defined _TAO_CDR_OP_Cubit_HandleValuePairSeq_CPP_
#define _TAO_CDR_OP_Cubit_HandleValuePairSeq_CPP_

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Cubit::HandleValuePairSeq &_tao_sequence)
{
  return TAO::marshal_sequence(strm, _tao_sequence);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Cubit::HandleValuePairSeq &_tao_sequence)
{
  return TAO::demarshal_sequence(strm, _tao_sequence);
}


TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_CDR_OP_Cubit_HandleValuePairSeq_CPP_ */

// TAO_IDL - Generated from
// be/be_visitor_structure/cdr_op_cs.cpp:49

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Cubit::RtiObjectUpdateMessageHeader &_tao_aggregate)
{
  return
    (strm << _tao_aggregate.updateLength) &&
    (strm << _tao_aggregate.updateTag) &&
    (strm << _tao_aggregate.objectHandle) &&
    (strm << _tao_aggregate.timestamp) &&
    (strm << _tao_aggregate.eventRetractionHandle) &&
    (strm << _tao_aggregate.classHandle) &&
    (strm << _tao_aggregate.sendingFederateHandle) &&
    (strm << _tao_aggregate.userTag.in ()) &&
    (strm << _tao_aggregate.regionData) &&
    (strm << ::ACE_OutputCDR::from_octet (_tao_aggregate.transportationHandle)) &&
    (strm << ::ACE_OutputCDR::from_octet (_tao_aggregate.orderingHandle)) &&
    (strm << _tao_aggregate.messagePayload);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Cubit::RtiObjectUpdateMessageHeader &_tao_aggregate)
{
  return
    (strm >> _tao_aggregate.updateLength) &&
    (strm >> _tao_aggregate.updateTag) &&
    (strm >> _tao_aggregate.objectHandle) &&
    (strm >> _tao_aggregate.timestamp) &&
    (strm >> _tao_aggregate.eventRetractionHandle) &&
    (strm >> _tao_aggregate.classHandle) &&
    (strm >> _tao_aggregate.sendingFederateHandle) &&
    (strm >> _tao_aggregate.userTag.out ()) &&
    (strm >> _tao_aggregate.regionData) &&
    (strm >> ::ACE_InputCDR::to_octet (_tao_aggregate.transportationHandle)) &&
    (strm >> ::ACE_InputCDR::to_octet (_tao_aggregate.orderingHandle)) &&
    (strm >> _tao_aggregate.messagePayload);
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_structure/cdr_op_cs.cpp:49

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Cubit::RtiInteractionMessageHeader &_tao_aggregate)
{
  return
    (strm << _tao_aggregate.updateLength);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Cubit::RtiInteractionMessageHeader &_tao_aggregate)
{
  return
    (strm >> _tao_aggregate.updateLength);
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_union/cdr_op_cs.cpp:74


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Cubit::MessageUnion &_tao_union
  )
{
  if ( !(strm << _tao_union._d ()) )
    {
      return false;
    }

  ::CORBA::Boolean result = true;

  switch (_tao_union._d ())
  {
    case Cubit::objectUpdate:
      {
        result = strm << _tao_union.oumh ();
      }
      break;
    case Cubit::interaction:
      {
        result = strm << _tao_union.imh ();
      }
      break;
    default:
      break;
  }

  return result;
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Cubit::MessageUnion &_tao_union
  )
{
  Cubit::MessageHeaderTypes _tao_discriminant;
  if ( !(strm >> _tao_discriminant) )
    {
      return false;
    }

  ::CORBA::Boolean result = true;

  switch (_tao_discriminant)
  {
    case Cubit::objectUpdate:
      {
        Cubit::RtiObjectUpdateMessageHeader _tao_union_tmp;
        result = strm >> _tao_union_tmp;

        if (result)
          {
            _tao_union.oumh (_tao_union_tmp);
            _tao_union._d (_tao_discriminant);
          }
      }
      break;
    case Cubit::interaction:
      {
        Cubit::RtiInteractionMessageHeader _tao_union_tmp;
        result = strm >> _tao_union_tmp;

        if (result)
          {
            _tao_union.imh (_tao_union_tmp);
            _tao_union._d (_tao_discriminant);
          }
      }
      break;
    default:
      _tao_union._default ();
      // For maximum interop compatibility, force the same value as transmitted
      _tao_union._d (_tao_discriminant);
      break;
  }

  return result;
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_sequence/cdr_op_cs.cpp:93
#if !defined _TAO_CDR_OP_Cubit_MessageUnionSeq_CPP_
#define _TAO_CDR_OP_Cubit_MessageUnionSeq_CPP_

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Cubit::MessageUnionSeq &_tao_sequence)
{
  return TAO::marshal_sequence(strm, _tao_sequence);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Cubit::MessageUnionSeq &_tao_sequence)
{
  return TAO::demarshal_sequence(strm, _tao_sequence);
}


TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_CDR_OP_Cubit_MessageUnionSeq_CPP_ */

// TAO_IDL - Generated from
// be/be_visitor_structure/cdr_op_cs.cpp:49

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Cubit::RtiPacket &_tao_aggregate)
{
  return
    (strm << _tao_aggregate.packetHeader) &&
    (strm << _tao_aggregate.msgs);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Cubit::RtiPacket &_tao_aggregate)
{
  return
    (strm >> _tao_aggregate.packetHeader) &&
    (strm >> _tao_aggregate.msgs);
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_interface/cdr_op_cs.cpp:51

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Cubit_ptr _tao_objref)
{
  ::CORBA::Object_ptr _tao_corba_obj = _tao_objref;
  return (strm << _tao_corba_obj);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Cubit_ptr &_tao_objref)
{
  ::CORBA::Object_var obj;

  if (!(strm >> obj.inout ()))
    {
      return false;
    }

  typedef ::Cubit RHS_SCOPED_NAME;

  // Narrow to the right type.
  _tao_objref =
    TAO::Narrow_Utils<RHS_SCOPED_NAME>::unchecked_narrow (obj.in ());

  return true;
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_interface/cdr_op_cs.cpp:51

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Cubit_Factory_ptr _tao_objref)
{
  ::CORBA::Object_ptr _tao_corba_obj = _tao_objref;
  return (strm << _tao_corba_obj);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Cubit_Factory_ptr &_tao_objref)
{
  ::CORBA::Object_var obj;

  if (!(strm >> obj.inout ()))
    {
      return false;
    }

  typedef ::Cubit_Factory RHS_SCOPED_NAME;

  // Narrow to the right type.
  _tao_objref =
    TAO::Narrow_Utils<RHS_SCOPED_NAME>::unchecked_narrow (obj.in ());

  return true;
}

TAO_END_VERSIONED_NAMESPACE_DECL



