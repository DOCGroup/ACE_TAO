// -*- C++ -*-
/**
 * Code generated by the The ACE ORB (TAO) IDL Compiler v2.4.1
 * TAO and the TAO IDL Compiler have been developed by:
 *       Center for Distributed Object Computing
 *       Washington University
 *       St. Louis, MO
 *       USA
 *       http://www.cs.wustl.edu/~schmidt/doc-center.html
 * and
 *       Distributed Object Computing Laboratory
 *       University of California at Irvine
 *       Irvine, CA
 *       USA
 * and
 *       Institute for Software Integrated Systems
 *       Vanderbilt University
 *       Nashville, TN
 *       USA
 *       http://www.isis.vanderbilt.edu/
 *
 * Information about TAO is available at:
 *     http://www.dre.vanderbilt.edu/~schmidt/TAO.html
 **/


// TAO_IDL - Generated from
// be/be_codegen.cpp:649

#ifndef _TAO_IDL_CUBITS_QOBIXH_CPP_
#define _TAO_IDL_CUBITS_QOBIXH_CPP_


#include "cubitS.h"
#include "tao/PortableServer/Operation_Table_Perfect_Hash.h"
#include "tao/PortableServer/Direct_Collocation_Upcall_Wrapper.h"
#include "tao/PortableServer/Upcall_Command.h"
#include "tao/PortableServer/Upcall_Wrapper.h"
#include "tao/TAO_Server_Request.h"
#include "tao/ORB_Core.h"
#include "tao/Profile.h"
#include "tao/Stub.h"
#include "tao/IFR_Client_Adapter.h"
#include "tao/Object_T.h"
#include "tao/AnyTypeCode/TypeCode.h"
#include "tao/AnyTypeCode/DynamicC.h"
#include "tao/CDR.h"
#include "tao/operation_details.h"
#include "tao/PortableInterceptor.h"
#include "ace/Dynamic_Service.h"
#include "ace/Malloc_Allocator.h"

// TAO_IDL - Generated from
// be/be_interface.cpp:1865

class TAO_Cubit_Perfect_Hash_OpTable
  : public TAO_Perfect_Hash_OpTable
{
private:
  unsigned int hash (const char *str, unsigned int len);

public:
  const TAO_operation_db_entry * lookup (const char *str, unsigned int len);
};

/* C++ code produced by gperf version 2.8 (ACE version) */
/* Command-line: /mnt/win_d/projects/ATCD/ACE/bin/ace_gperf -m -M -J -c -C -D -E -T -f 0 -F 0,0 -a -o -t -p -K opname -L C++ -Z TAO_Cubit_Perfect_Hash_OpTable -N lookup  */
unsigned int
TAO_Cubit_Perfect_Hash_OpTable::hash (const char *str, unsigned int len)
{
  static const unsigned char asso_values[] =
    {
     51, 51, 51, 51, 51, 51, 51, 51, 51, 51,
     51, 51, 51, 51, 51, 51, 51, 51, 51, 51,
     51, 51, 51, 51, 51, 51, 51, 51, 51, 51,
     51, 51, 51, 51, 51, 51, 51, 51, 51, 51,
     51, 51, 51, 51, 51, 51, 51, 51, 51, 51,
     51, 51, 51, 51, 51, 51, 51, 51, 51, 51,
     51, 51, 51, 51, 51, 51, 51, 51, 51, 51,
     51, 51, 51, 51, 51, 51, 51, 51, 51, 51,
     51, 51, 51, 51, 51, 51, 51, 51, 51, 51,
     51, 51, 51, 51, 51, 20, 51, 15, 51,  0,
     10, 20, 51,  0, 51, 51, 51, 51, 51, 51,
     10, 51,  0, 51, 51,  0,  0, 51, 51, 51,
     51, 15, 51, 51, 51, 51, 51, 51,
    };
  return len + asso_values[static_cast<int>(str[len - 1])] + asso_values[static_cast<int>(str[0])];
}

const TAO_operation_db_entry *
TAO_Cubit_Perfect_Hash_OpTable::lookup (const char *str, unsigned int len)
{
  enum
    {
      TOTAL_KEYWORDS = 20,
      MIN_WORD_LENGTH = 4,
      MAX_WORD_LENGTH = 19,
      MIN_HASH_VALUE = 4,
      MAX_HASH_VALUE = 50,
      HASH_VALUE_RANGE = 47,
      DUPLICATES = 3,
      WORDLIST_SIZE = 24
    };

  static const TAO_operation_db_entry wordlist[] =
    {
      {"",0,0},{"",0,0},{"",0,0},{"",0,0},
      {"ping", &POA_Cubit::ping_skel, &_TAO_Cubit_Direct_Proxy_Impl::ping},
      {"cube_long", &POA_Cubit::cube_long_skel, &_TAO_Cubit_Direct_Proxy_Impl::cube_long},
      {"cube_octet", &POA_Cubit::cube_octet_skel, &_TAO_Cubit_Direct_Proxy_Impl::cube_octet},
      {"cube_short", &POA_Cubit::cube_short_skel, &_TAO_Cubit_Direct_Proxy_Impl::cube_short},
      {"cube_struct", &POA_Cubit::cube_struct_skel, &_TAO_Cubit_Direct_Proxy_Impl::cube_struct},
      {"cube_any_struct", &POA_Cubit::cube_any_struct_skel, &_TAO_Cubit_Direct_Proxy_Impl::cube_any_struct},
      {"shutdown", &POA_Cubit::shutdown_skel, &_TAO_Cubit_Direct_Proxy_Impl::shutdown},
      {"cube_void", &POA_Cubit::cube_void_skel, &_TAO_Cubit_Direct_Proxy_Impl::cube_void},
      {"cube_union", &POA_Cubit::cube_union_skel, &_TAO_Cubit_Direct_Proxy_Impl::cube_union},
      {"cube_any", &POA_Cubit::cube_any_skel, &_TAO_Cubit_Direct_Proxy_Impl::cube_any},
      {"cube_oneway", &POA_Cubit::cube_oneway_skel, &_TAO_Cubit_Direct_Proxy_Impl::cube_oneway},
      {"cube_rti_data", &POA_Cubit::cube_rti_data_skel, &_TAO_Cubit_Direct_Proxy_Impl::cube_rti_data},
      {"_component", &TAO_ServantBase::_component_thru_poa_skel, 0},
      {"_non_existent", &TAO_ServantBase::_non_existent_thru_poa_skel, 0},
      {"cube_long_sequence", &POA_Cubit::cube_long_sequence_skel, &_TAO_Cubit_Direct_Proxy_Impl::cube_long_sequence},
      {"cube_many_sequence", &POA_Cubit::cube_many_sequence_skel, &_TAO_Cubit_Direct_Proxy_Impl::cube_many_sequence},
      {"cube_octet_sequence", &POA_Cubit::cube_octet_sequence_skel, &_TAO_Cubit_Direct_Proxy_Impl::cube_octet_sequence},
      {"_is_a", &TAO_ServantBase::_is_a_thru_poa_skel, 0},
      {"_repository_id", &TAO_ServantBase::_repository_id_thru_poa_skel, 0},
      {"_interface", &TAO_ServantBase::_interface_skel, 0},
    };

  static const signed char lookup[] =
    {
       -1,  -1,  -1,  -1,   4,  -1,  -1,  -6,  -2,   5, -53,   8,  -1,  -1,
       -1,   9,  -1,  -1,  10,  11,  12,  -1,  -1,  13,  -1,  -1,  14,  -1,
       15,  -1,  16,  -1,  -1,  17,  -1,  -1, -18,  -2, -52,  20,  21,  -1,
       -1,  -1,  22,  -1,  -1,  -1,  -1,  -1,  23,
    };

  if (len <= MAX_WORD_LENGTH && len >= MIN_WORD_LENGTH)
    {
      unsigned int key = hash (str, len);

      if (key <= MAX_HASH_VALUE && key >= MIN_HASH_VALUE)
        {
          int slot = lookup[key];

          if (slot >= 0 && slot < WORDLIST_SIZE)
            {
              const char *s = wordlist[slot].opname;

              if (*str == *s && !ACE_OS::strncmp (str + 1, s + 1, len - 1))
                return &wordlist[slot];
            }
          else if (slot < 0 && slot >= -MAX_HASH_VALUE)
            return 0;
          else
            {
              unsigned int offset = key + slot + (slot > 0 ? -MAX_HASH_VALUE : MAX_HASH_VALUE);
              const TAO_operation_db_entry *base = &wordlist[-lookup[offset]];
              const TAO_operation_db_entry *ptr = base + -lookup[offset + 1];

              while (--ptr >= base)
                if (*str == *ptr->opname && !ACE_OS::strncmp (str + 1, ptr->opname + 1, len - 1))
                  return ptr;
            }
        }
    }
  return 0;
}

static TAO_Cubit_Perfect_Hash_OpTable tao_Cubit_optable;

///////////////////////////////////////////////////////////////////////
//                 Direct Proxy  Implementation
//

_TAO_Cubit_Direct_Proxy_Impl::~_TAO_Cubit_Direct_Proxy_Impl (void)
{
}

// TAO_IDL - Generated from
// be/be_visitor_operation/direct_proxy_impl_ss.cpp:57
void
_TAO_Cubit_Direct_Proxy_Impl::cube_oneway (
    TAO_Abstract_ServantBase  *servant,
    TAO::Argument **)

{
  POA_Cubit_ptr _tao_ptr =
    dynamic_cast<POA_Cubit_ptr> (servant);
  if (!_tao_ptr)
    {
      throw ::CORBA::INTERNAL ();
    }

  _tao_ptr->cube_oneway (
      );
}

// TAO_IDL - Generated from
// be/be_visitor_operation/direct_proxy_impl_ss.cpp:57
void
_TAO_Cubit_Direct_Proxy_Impl::cube_void (
    TAO_Abstract_ServantBase  *servant,
    TAO::Argument **)

{
  POA_Cubit_ptr _tao_ptr =
    dynamic_cast<POA_Cubit_ptr> (servant);
  if (!_tao_ptr)
    {
      throw ::CORBA::INTERNAL ();
    }

  _tao_ptr->cube_void (
      );
}

// TAO_IDL - Generated from
// be/be_visitor_operation/direct_proxy_impl_ss.cpp:57
void
_TAO_Cubit_Direct_Proxy_Impl::cube_octet (
    TAO_Abstract_ServantBase  *servant,
    TAO::Argument ** args)

{
  POA_Cubit_ptr _tao_ptr =
    dynamic_cast<POA_Cubit_ptr> (servant);
  if (!_tao_ptr)
    {
      throw ::CORBA::INTERNAL ();
    }

  ((TAO::Arg_Traits< ::ACE_InputCDR::to_octet>::ret_val *) args[0])->arg () =
    _tao_ptr->cube_octet (
          ((TAO::Arg_Traits< ::ACE_InputCDR::to_octet>::in_arg_val *) args[1])->arg ()
        );
}

// TAO_IDL - Generated from
// be/be_visitor_operation/direct_proxy_impl_ss.cpp:57
void
_TAO_Cubit_Direct_Proxy_Impl::cube_short (
    TAO_Abstract_ServantBase  *servant,
    TAO::Argument ** args)

{
  POA_Cubit_ptr _tao_ptr =
    dynamic_cast<POA_Cubit_ptr> (servant);
  if (!_tao_ptr)
    {
      throw ::CORBA::INTERNAL ();
    }

  ((TAO::Arg_Traits< ::CORBA::Short>::ret_val *) args[0])->arg () =
    _tao_ptr->cube_short (
          ((TAO::Arg_Traits< ::CORBA::Short>::in_arg_val *) args[1])->arg ()
        );
}

// TAO_IDL - Generated from
// be/be_visitor_operation/direct_proxy_impl_ss.cpp:57
void
_TAO_Cubit_Direct_Proxy_Impl::cube_long (
    TAO_Abstract_ServantBase  *servant,
    TAO::Argument ** args)

{
  POA_Cubit_ptr _tao_ptr =
    dynamic_cast<POA_Cubit_ptr> (servant);
  if (!_tao_ptr)
    {
      throw ::CORBA::INTERNAL ();
    }

  ((TAO::Arg_Traits< ::CORBA::Long>::ret_val *) args[0])->arg () =
    _tao_ptr->cube_long (
          ((TAO::Arg_Traits< ::CORBA::Long>::in_arg_val *) args[1])->arg ()
        );
}

// TAO_IDL - Generated from
// be/be_visitor_operation/direct_proxy_impl_ss.cpp:57
void
_TAO_Cubit_Direct_Proxy_Impl::cube_struct (
    TAO_Abstract_ServantBase  *servant,
    TAO::Argument ** args)

{
  POA_Cubit_ptr _tao_ptr =
    dynamic_cast<POA_Cubit_ptr> (servant);
  if (!_tao_ptr)
    {
      throw ::CORBA::INTERNAL ();
    }

  ((TAO::Arg_Traits< ::Cubit::Many>::ret_val *) args[0])->arg () =
    _tao_ptr->cube_struct (
          ((TAO::Arg_Traits< ::Cubit::Many>::in_arg_val *) args[1])->arg ()
        );
}

// TAO_IDL - Generated from
// be/be_visitor_operation/direct_proxy_impl_ss.cpp:57
void
_TAO_Cubit_Direct_Proxy_Impl::cube_any (
    TAO_Abstract_ServantBase  *servant,
    TAO::Argument ** args)

{
  POA_Cubit_ptr _tao_ptr =
    dynamic_cast<POA_Cubit_ptr> (servant);
  if (!_tao_ptr)
    {
      throw ::CORBA::INTERNAL ();
    }

  ((TAO::Arg_Traits< ::CORBA::Any>::ret_val *) args[0])->arg () =
    _tao_ptr->cube_any (
          ((TAO::Arg_Traits< ::CORBA::Any>::in_arg_val *) args[1])->arg ()
        );
}

// TAO_IDL - Generated from
// be/be_visitor_operation/direct_proxy_impl_ss.cpp:57
void
_TAO_Cubit_Direct_Proxy_Impl::cube_any_struct (
    TAO_Abstract_ServantBase  *servant,
    TAO::Argument ** args)

{
  POA_Cubit_ptr _tao_ptr =
    dynamic_cast<POA_Cubit_ptr> (servant);
  if (!_tao_ptr)
    {
      throw ::CORBA::INTERNAL ();
    }

  ((TAO::Arg_Traits< ::CORBA::Any>::ret_val *) args[0])->arg () =
    _tao_ptr->cube_any_struct (
          ((TAO::Arg_Traits< ::CORBA::Any>::in_arg_val *) args[1])->arg ()
        );
}

// TAO_IDL - Generated from
// be/be_visitor_operation/direct_proxy_impl_ss.cpp:57
void
_TAO_Cubit_Direct_Proxy_Impl::cube_union (
    TAO_Abstract_ServantBase  *servant,
    TAO::Argument ** args)

{
  POA_Cubit_ptr _tao_ptr =
    dynamic_cast<POA_Cubit_ptr> (servant);
  if (!_tao_ptr)
    {
      throw ::CORBA::INTERNAL ();
    }

  ((TAO::Arg_Traits< ::Cubit::oneof>::ret_val *) args[0])->arg () =
    _tao_ptr->cube_union (
          ((TAO::Arg_Traits< ::Cubit::oneof>::in_arg_val *) args[1])->arg ()
        );
}

// TAO_IDL - Generated from
// be/be_visitor_operation/direct_proxy_impl_ss.cpp:57
void
_TAO_Cubit_Direct_Proxy_Impl::cube_long_sequence (
    TAO_Abstract_ServantBase  *servant,
    TAO::Argument ** args)

{
  POA_Cubit_ptr _tao_ptr =
    dynamic_cast<POA_Cubit_ptr> (servant);
  if (!_tao_ptr)
    {
      throw ::CORBA::INTERNAL ();
    }

  _tao_ptr->cube_long_sequence (
        ((TAO::Arg_Traits< ::Cubit::long_seq>::in_arg_val *) args[1])->arg (),
        ((TAO::Arg_Traits< ::Cubit::long_seq>::out_arg_val *) args[2])->arg ()
      );
}

// TAO_IDL - Generated from
// be/be_visitor_operation/direct_proxy_impl_ss.cpp:57
void
_TAO_Cubit_Direct_Proxy_Impl::cube_octet_sequence (
    TAO_Abstract_ServantBase  *servant,
    TAO::Argument ** args)

{
  POA_Cubit_ptr _tao_ptr =
    dynamic_cast<POA_Cubit_ptr> (servant);
  if (!_tao_ptr)
    {
      throw ::CORBA::INTERNAL ();
    }

  _tao_ptr->cube_octet_sequence (
        ((TAO::Arg_Traits< ::Cubit::octet_seq>::in_arg_val *) args[1])->arg (),
        ((TAO::Arg_Traits< ::Cubit::octet_seq>::out_arg_val *) args[2])->arg ()
      );
}

// TAO_IDL - Generated from
// be/be_visitor_operation/direct_proxy_impl_ss.cpp:57
void
_TAO_Cubit_Direct_Proxy_Impl::cube_many_sequence (
    TAO_Abstract_ServantBase  *servant,
    TAO::Argument ** args)

{
  POA_Cubit_ptr _tao_ptr =
    dynamic_cast<POA_Cubit_ptr> (servant);
  if (!_tao_ptr)
    {
      throw ::CORBA::INTERNAL ();
    }

  _tao_ptr->cube_many_sequence (
        ((TAO::Arg_Traits< ::Cubit::many_seq>::in_arg_val *) args[1])->arg (),
        ((TAO::Arg_Traits< ::Cubit::many_seq>::out_arg_val *) args[2])->arg ()
      );
}

// TAO_IDL - Generated from
// be/be_visitor_operation/direct_proxy_impl_ss.cpp:57
void
_TAO_Cubit_Direct_Proxy_Impl::shutdown (
    TAO_Abstract_ServantBase  *servant,
    TAO::Argument **)

{
  POA_Cubit_ptr _tao_ptr =
    dynamic_cast<POA_Cubit_ptr> (servant);
  if (!_tao_ptr)
    {
      throw ::CORBA::INTERNAL ();
    }

  _tao_ptr->shutdown (
      );
}

// TAO_IDL - Generated from
// be/be_visitor_operation/direct_proxy_impl_ss.cpp:57
void
_TAO_Cubit_Direct_Proxy_Impl::cube_rti_data (
    TAO_Abstract_ServantBase  *servant,
    TAO::Argument ** args)

{
  POA_Cubit_ptr _tao_ptr =
    dynamic_cast<POA_Cubit_ptr> (servant);
  if (!_tao_ptr)
    {
      throw ::CORBA::INTERNAL ();
    }

  _tao_ptr->cube_rti_data (
        ((TAO::Arg_Traits< ::Cubit::RtiPacket>::in_arg_val *) args[1])->arg (),
        ((TAO::Arg_Traits< ::Cubit::RtiPacket>::out_arg_val *) args[2])->arg ()
      );
}

// TAO_IDL - Generated from
// be/be_visitor_operation/direct_proxy_impl_ss.cpp:57
void
_TAO_Cubit_Direct_Proxy_Impl::ping (
    TAO_Abstract_ServantBase  *servant,
    TAO::Argument **)

{
  POA_Cubit_ptr _tao_ptr =
    dynamic_cast<POA_Cubit_ptr> (servant);
  if (!_tao_ptr)
    {
      throw ::CORBA::INTERNAL ();
    }

  _tao_ptr->ping (
      );
}



//
//           End Direct Proxy Implementation
///////////////////////////////////////////////////////////////////////

// TAO_IDL - Generated from
// be/be_visitor_interface/interface_ss.cpp:90

POA_Cubit::POA_Cubit (void)
  : TAO_ServantBase ()
{
  this->optable_ = &tao_Cubit_optable;
}

POA_Cubit::POA_Cubit (const POA_Cubit& rhs)
  : TAO_Abstract_ServantBase (rhs),
    TAO_ServantBase (rhs)
{
}

POA_Cubit::~POA_Cubit (void)
{
}


// TAO_IDL - Generated from
// be/be_visitor_operation/upcall_command_ss.cpp:80

class cube_oneway_Cubit
  : public TAO::Upcall_Command
{
public:
  inline cube_oneway_Cubit (
    POA_Cubit * servant)
    : servant_ (servant)
  {
  }

  virtual void execute (void)
  {
    this->servant_->cube_oneway ();
  }

private:
  POA_Cubit * const servant_;
};

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_ss.cpp:168

void POA_Cubit::cube_oneway_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< void>::ret_val retval;

  TAO::Argument * const args[] =
    {
      &retval
    };

  static size_t const nargs = 1;

  POA_Cubit * const impl =
    dynamic_cast<POA_Cubit *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  cube_oneway_Cubit command (
    impl);

  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}



// TAO_IDL - Generated from
// be/be_visitor_operation/upcall_command_ss.cpp:80

class cube_void_Cubit
  : public TAO::Upcall_Command
{
public:
  inline cube_void_Cubit (
    POA_Cubit * servant)
    : servant_ (servant)
  {
  }

  virtual void execute (void)
  {
    this->servant_->cube_void ();
  }

private:
  POA_Cubit * const servant_;
};

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_ss.cpp:168

void POA_Cubit::cube_void_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< void>::ret_val retval;

  TAO::Argument * const args[] =
    {
      &retval
    };

  static size_t const nargs = 1;

  POA_Cubit * const impl =
    dynamic_cast<POA_Cubit *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  cube_void_Cubit command (
    impl);

  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}



// TAO_IDL - Generated from
// be/be_visitor_operation/upcall_command_ss.cpp:80

class cube_octet_Cubit
  : public TAO::Upcall_Command
{
public:
  inline cube_octet_Cubit (
    POA_Cubit * servant,
    TAO_Operation_Details const * operation_details,
    TAO::Argument * const args[])
    : servant_ (servant)
      , operation_details_ (operation_details)
      , args_ (args)
  {
  }

  virtual void execute (void)
  {
    TAO::SArg_Traits< ::ACE_InputCDR::to_octet>::ret_arg_type retval =
      TAO::Portable_Server::get_ret_arg< ::ACE_InputCDR::to_octet> (
        this->operation_details_,
        this->args_);

    TAO::SArg_Traits< ::ACE_InputCDR::to_octet>::in_arg_type arg_1 =
      TAO::Portable_Server::get_in_arg< ::ACE_InputCDR::to_octet> (
        this->operation_details_,
        this->args_,
        1);

    retval =
      this->servant_->cube_octet (
        arg_1);
  }

private:
  POA_Cubit * const servant_;
  TAO_Operation_Details const * const operation_details_;
  TAO::Argument * const * const args_;
};

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_ss.cpp:168

void POA_Cubit::cube_octet_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::ACE_InputCDR::to_octet>::ret_val retval;
  TAO::SArg_Traits< ::ACE_InputCDR::to_octet>::in_arg_val _tao_o;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_o
    };

  static size_t const nargs = 2;

  POA_Cubit * const impl =
    dynamic_cast<POA_Cubit *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  cube_octet_Cubit command (
    impl,
    server_request.operation_details (),
    args);

  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}



// TAO_IDL - Generated from
// be/be_visitor_operation/upcall_command_ss.cpp:80

class cube_short_Cubit
  : public TAO::Upcall_Command
{
public:
  inline cube_short_Cubit (
    POA_Cubit * servant,
    TAO_Operation_Details const * operation_details,
    TAO::Argument * const args[])
    : servant_ (servant)
      , operation_details_ (operation_details)
      , args_ (args)
  {
  }

  virtual void execute (void)
  {
    TAO::SArg_Traits< ::CORBA::Short>::ret_arg_type retval =
      TAO::Portable_Server::get_ret_arg< ::CORBA::Short> (
        this->operation_details_,
        this->args_);

    TAO::SArg_Traits< ::CORBA::Short>::in_arg_type arg_1 =
      TAO::Portable_Server::get_in_arg< ::CORBA::Short> (
        this->operation_details_,
        this->args_,
        1);

    retval =
      this->servant_->cube_short (
        arg_1);
  }

private:
  POA_Cubit * const servant_;
  TAO_Operation_Details const * const operation_details_;
  TAO::Argument * const * const args_;
};

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_ss.cpp:168

void POA_Cubit::cube_short_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::CORBA::Short>::ret_val retval;
  TAO::SArg_Traits< ::CORBA::Short>::in_arg_val _tao_s;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_s
    };

  static size_t const nargs = 2;

  POA_Cubit * const impl =
    dynamic_cast<POA_Cubit *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  cube_short_Cubit command (
    impl,
    server_request.operation_details (),
    args);

  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}



// TAO_IDL - Generated from
// be/be_visitor_operation/upcall_command_ss.cpp:80

class cube_long_Cubit
  : public TAO::Upcall_Command
{
public:
  inline cube_long_Cubit (
    POA_Cubit * servant,
    TAO_Operation_Details const * operation_details,
    TAO::Argument * const args[])
    : servant_ (servant)
      , operation_details_ (operation_details)
      , args_ (args)
  {
  }

  virtual void execute (void)
  {
    TAO::SArg_Traits< ::CORBA::Long>::ret_arg_type retval =
      TAO::Portable_Server::get_ret_arg< ::CORBA::Long> (
        this->operation_details_,
        this->args_);

    TAO::SArg_Traits< ::CORBA::Long>::in_arg_type arg_1 =
      TAO::Portable_Server::get_in_arg< ::CORBA::Long> (
        this->operation_details_,
        this->args_,
        1);

    retval =
      this->servant_->cube_long (
        arg_1);
  }

private:
  POA_Cubit * const servant_;
  TAO_Operation_Details const * const operation_details_;
  TAO::Argument * const * const args_;
};

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_ss.cpp:168

void POA_Cubit::cube_long_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::CORBA::Long>::ret_val retval;
  TAO::SArg_Traits< ::CORBA::Long>::in_arg_val _tao_l;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_l
    };

  static size_t const nargs = 2;

  POA_Cubit * const impl =
    dynamic_cast<POA_Cubit *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  cube_long_Cubit command (
    impl,
    server_request.operation_details (),
    args);

  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}



// TAO_IDL - Generated from
// be/be_visitor_operation/upcall_command_ss.cpp:80

class cube_struct_Cubit
  : public TAO::Upcall_Command
{
public:
  inline cube_struct_Cubit (
    POA_Cubit * servant,
    TAO_Operation_Details const * operation_details,
    TAO::Argument * const args[])
    : servant_ (servant)
      , operation_details_ (operation_details)
      , args_ (args)
  {
  }

  virtual void execute (void)
  {
    TAO::SArg_Traits< ::Cubit::Many>::ret_arg_type retval =
      TAO::Portable_Server::get_ret_arg< ::Cubit::Many> (
        this->operation_details_,
        this->args_);

    TAO::SArg_Traits< ::Cubit::Many>::in_arg_type arg_1 =
      TAO::Portable_Server::get_in_arg< ::Cubit::Many> (
        this->operation_details_,
        this->args_,
        1);

    retval =
      this->servant_->cube_struct (
        arg_1);
  }

private:
  POA_Cubit * const servant_;
  TAO_Operation_Details const * const operation_details_;
  TAO::Argument * const * const args_;
};

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_ss.cpp:168

void POA_Cubit::cube_struct_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::Cubit::Many>::ret_val retval;
  TAO::SArg_Traits< ::Cubit::Many>::in_arg_val _tao_values;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_values
    };

  static size_t const nargs = 2;

  POA_Cubit * const impl =
    dynamic_cast<POA_Cubit *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  cube_struct_Cubit command (
    impl,
    server_request.operation_details (),
    args);

  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}



// TAO_IDL - Generated from
// be/be_visitor_operation/upcall_command_ss.cpp:80

class cube_any_Cubit
  : public TAO::Upcall_Command
{
public:
  inline cube_any_Cubit (
    POA_Cubit * servant,
    TAO_Operation_Details const * operation_details,
    TAO::Argument * const args[])
    : servant_ (servant)
      , operation_details_ (operation_details)
      , args_ (args)
  {
  }

  virtual void execute (void)
  {
    TAO::SArg_Traits< ::CORBA::Any>::ret_arg_type retval =
      TAO::Portable_Server::get_ret_arg< ::CORBA::Any> (
        this->operation_details_,
        this->args_);

    TAO::SArg_Traits< ::CORBA::Any>::in_arg_type arg_1 =
      TAO::Portable_Server::get_in_arg< ::CORBA::Any> (
        this->operation_details_,
        this->args_,
        1);

    retval =
      this->servant_->cube_any (
        arg_1);
  }

private:
  POA_Cubit * const servant_;
  TAO_Operation_Details const * const operation_details_;
  TAO::Argument * const * const args_;
};

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_ss.cpp:168

void POA_Cubit::cube_any_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::CORBA::Any>::ret_val retval;
  TAO::SArg_Traits< ::CORBA::Any>::in_arg_val _tao_value;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_value
    };

  static size_t const nargs = 2;

  POA_Cubit * const impl =
    dynamic_cast<POA_Cubit *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  cube_any_Cubit command (
    impl,
    server_request.operation_details (),
    args);

  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}



// TAO_IDL - Generated from
// be/be_visitor_operation/upcall_command_ss.cpp:80

class cube_any_struct_Cubit
  : public TAO::Upcall_Command
{
public:
  inline cube_any_struct_Cubit (
    POA_Cubit * servant,
    TAO_Operation_Details const * operation_details,
    TAO::Argument * const args[])
    : servant_ (servant)
      , operation_details_ (operation_details)
      , args_ (args)
  {
  }

  virtual void execute (void)
  {
    TAO::SArg_Traits< ::CORBA::Any>::ret_arg_type retval =
      TAO::Portable_Server::get_ret_arg< ::CORBA::Any> (
        this->operation_details_,
        this->args_);

    TAO::SArg_Traits< ::CORBA::Any>::in_arg_type arg_1 =
      TAO::Portable_Server::get_in_arg< ::CORBA::Any> (
        this->operation_details_,
        this->args_,
        1);

    retval =
      this->servant_->cube_any_struct (
        arg_1);
  }

private:
  POA_Cubit * const servant_;
  TAO_Operation_Details const * const operation_details_;
  TAO::Argument * const * const args_;
};

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_ss.cpp:168

void POA_Cubit::cube_any_struct_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::CORBA::Any>::ret_val retval;
  TAO::SArg_Traits< ::CORBA::Any>::in_arg_val _tao_value;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_value
    };

  static size_t const nargs = 2;

  POA_Cubit * const impl =
    dynamic_cast<POA_Cubit *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  cube_any_struct_Cubit command (
    impl,
    server_request.operation_details (),
    args);

  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}



// TAO_IDL - Generated from
// be/be_visitor_operation/upcall_command_ss.cpp:80

class cube_union_Cubit
  : public TAO::Upcall_Command
{
public:
  inline cube_union_Cubit (
    POA_Cubit * servant,
    TAO_Operation_Details const * operation_details,
    TAO::Argument * const args[])
    : servant_ (servant)
      , operation_details_ (operation_details)
      , args_ (args)
  {
  }

  virtual void execute (void)
  {
    TAO::SArg_Traits< ::Cubit::oneof>::ret_arg_type retval =
      TAO::Portable_Server::get_ret_arg< ::Cubit::oneof> (
        this->operation_details_,
        this->args_);

    TAO::SArg_Traits< ::Cubit::oneof>::in_arg_type arg_1 =
      TAO::Portable_Server::get_in_arg< ::Cubit::oneof> (
        this->operation_details_,
        this->args_,
        1);

    retval =
      this->servant_->cube_union (
        arg_1);
  }

private:
  POA_Cubit * const servant_;
  TAO_Operation_Details const * const operation_details_;
  TAO::Argument * const * const args_;
};

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_ss.cpp:168

void POA_Cubit::cube_union_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::Cubit::oneof>::ret_val retval;
  TAO::SArg_Traits< ::Cubit::oneof>::in_arg_val _tao_values;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_values
    };

  static size_t const nargs = 2;

  POA_Cubit * const impl =
    dynamic_cast<POA_Cubit *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  cube_union_Cubit command (
    impl,
    server_request.operation_details (),
    args);

  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}



// TAO_IDL - Generated from
// be/be_visitor_operation/upcall_command_ss.cpp:80

class cube_long_sequence_Cubit
  : public TAO::Upcall_Command
{
public:
  inline cube_long_sequence_Cubit (
    POA_Cubit * servant,
    TAO_Operation_Details const * operation_details,
    TAO::Argument * const args[])
    : servant_ (servant)
      , operation_details_ (operation_details)
      , args_ (args)
  {
  }

  virtual void execute (void)
  {
    TAO::SArg_Traits< ::Cubit::long_seq>::in_arg_type arg_1 =
      TAO::Portable_Server::get_in_arg< ::Cubit::long_seq> (
        this->operation_details_,
        this->args_,
        1);

    TAO::SArg_Traits< ::Cubit::long_seq>::out_arg_type arg_2 =
      TAO::Portable_Server::get_out_arg< ::Cubit::long_seq> (
        this->operation_details_,
        this->args_,
        2);

    this->servant_->cube_long_sequence (
      arg_1
      , arg_2);
  }

private:
  POA_Cubit * const servant_;
  TAO_Operation_Details const * const operation_details_;
  TAO::Argument * const * const args_;
};

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_ss.cpp:168

void POA_Cubit::cube_long_sequence_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< void>::ret_val retval;
  TAO::SArg_Traits< ::Cubit::long_seq>::in_arg_val _tao_input;
  TAO::SArg_Traits< ::Cubit::long_seq>::out_arg_val _tao_output;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_input,
      &_tao_output
    };

  static size_t const nargs = 3;

  POA_Cubit * const impl =
    dynamic_cast<POA_Cubit *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  cube_long_sequence_Cubit command (
    impl,
    server_request.operation_details (),
    args);

  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}



// TAO_IDL - Generated from
// be/be_visitor_operation/upcall_command_ss.cpp:80

class cube_octet_sequence_Cubit
  : public TAO::Upcall_Command
{
public:
  inline cube_octet_sequence_Cubit (
    POA_Cubit * servant,
    TAO_Operation_Details const * operation_details,
    TAO::Argument * const args[])
    : servant_ (servant)
      , operation_details_ (operation_details)
      , args_ (args)
  {
  }

  virtual void execute (void)
  {
    TAO::SArg_Traits< ::Cubit::octet_seq>::in_arg_type arg_1 =
      TAO::Portable_Server::get_in_arg< ::Cubit::octet_seq> (
        this->operation_details_,
        this->args_,
        1);

    TAO::SArg_Traits< ::Cubit::octet_seq>::out_arg_type arg_2 =
      TAO::Portable_Server::get_out_arg< ::Cubit::octet_seq> (
        this->operation_details_,
        this->args_,
        2);

    this->servant_->cube_octet_sequence (
      arg_1
      , arg_2);
  }

private:
  POA_Cubit * const servant_;
  TAO_Operation_Details const * const operation_details_;
  TAO::Argument * const * const args_;
};

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_ss.cpp:168

void POA_Cubit::cube_octet_sequence_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< void>::ret_val retval;
  TAO::SArg_Traits< ::Cubit::octet_seq>::in_arg_val _tao_input;
  TAO::SArg_Traits< ::Cubit::octet_seq>::out_arg_val _tao_output;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_input,
      &_tao_output
    };

  static size_t const nargs = 3;

  POA_Cubit * const impl =
    dynamic_cast<POA_Cubit *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  cube_octet_sequence_Cubit command (
    impl,
    server_request.operation_details (),
    args);

  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}



// TAO_IDL - Generated from
// be/be_visitor_operation/upcall_command_ss.cpp:80

class cube_many_sequence_Cubit
  : public TAO::Upcall_Command
{
public:
  inline cube_many_sequence_Cubit (
    POA_Cubit * servant,
    TAO_Operation_Details const * operation_details,
    TAO::Argument * const args[])
    : servant_ (servant)
      , operation_details_ (operation_details)
      , args_ (args)
  {
  }

  virtual void execute (void)
  {
    TAO::SArg_Traits< ::Cubit::many_seq>::in_arg_type arg_1 =
      TAO::Portable_Server::get_in_arg< ::Cubit::many_seq> (
        this->operation_details_,
        this->args_,
        1);

    TAO::SArg_Traits< ::Cubit::many_seq>::out_arg_type arg_2 =
      TAO::Portable_Server::get_out_arg< ::Cubit::many_seq> (
        this->operation_details_,
        this->args_,
        2);

    this->servant_->cube_many_sequence (
      arg_1
      , arg_2);
  }

private:
  POA_Cubit * const servant_;
  TAO_Operation_Details const * const operation_details_;
  TAO::Argument * const * const args_;
};

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_ss.cpp:168

void POA_Cubit::cube_many_sequence_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< void>::ret_val retval;
  TAO::SArg_Traits< ::Cubit::many_seq>::in_arg_val _tao_input;
  TAO::SArg_Traits< ::Cubit::many_seq>::out_arg_val _tao_output;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_input,
      &_tao_output
    };

  static size_t const nargs = 3;

  POA_Cubit * const impl =
    dynamic_cast<POA_Cubit *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  cube_many_sequence_Cubit command (
    impl,
    server_request.operation_details (),
    args);

  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}



// TAO_IDL - Generated from
// be/be_visitor_operation/upcall_command_ss.cpp:80

class shutdown_Cubit
  : public TAO::Upcall_Command
{
public:
  inline shutdown_Cubit (
    POA_Cubit * servant)
    : servant_ (servant)
  {
  }

  virtual void execute (void)
  {
    this->servant_->shutdown ();
  }

private:
  POA_Cubit * const servant_;
};

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_ss.cpp:168

void POA_Cubit::shutdown_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< void>::ret_val retval;

  TAO::Argument * const args[] =
    {
      &retval
    };

  static size_t const nargs = 1;

  POA_Cubit * const impl =
    dynamic_cast<POA_Cubit *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  shutdown_Cubit command (
    impl);

  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}



// TAO_IDL - Generated from
// be/be_visitor_operation/upcall_command_ss.cpp:80

class cube_rti_data_Cubit
  : public TAO::Upcall_Command
{
public:
  inline cube_rti_data_Cubit (
    POA_Cubit * servant,
    TAO_Operation_Details const * operation_details,
    TAO::Argument * const args[])
    : servant_ (servant)
      , operation_details_ (operation_details)
      , args_ (args)
  {
  }

  virtual void execute (void)
  {
    TAO::SArg_Traits< ::Cubit::RtiPacket>::in_arg_type arg_1 =
      TAO::Portable_Server::get_in_arg< ::Cubit::RtiPacket> (
        this->operation_details_,
        this->args_,
        1);

    TAO::SArg_Traits< ::Cubit::RtiPacket>::out_arg_type arg_2 =
      TAO::Portable_Server::get_out_arg< ::Cubit::RtiPacket> (
        this->operation_details_,
        this->args_,
        2);

    this->servant_->cube_rti_data (
      arg_1
      , arg_2);
  }

private:
  POA_Cubit * const servant_;
  TAO_Operation_Details const * const operation_details_;
  TAO::Argument * const * const args_;
};

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_ss.cpp:168

void POA_Cubit::cube_rti_data_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< void>::ret_val retval;
  TAO::SArg_Traits< ::Cubit::RtiPacket>::in_arg_val _tao_input;
  TAO::SArg_Traits< ::Cubit::RtiPacket>::out_arg_val _tao_output;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_input,
      &_tao_output
    };

  static size_t const nargs = 3;

  POA_Cubit * const impl =
    dynamic_cast<POA_Cubit *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  cube_rti_data_Cubit command (
    impl,
    server_request.operation_details (),
    args);

  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}



// TAO_IDL - Generated from
// be/be_visitor_operation/upcall_command_ss.cpp:80

class ping_Cubit
  : public TAO::Upcall_Command
{
public:
  inline ping_Cubit (
    POA_Cubit * servant)
    : servant_ (servant)
  {
  }

  virtual void execute (void)
  {
    this->servant_->ping ();
  }

private:
  POA_Cubit * const servant_;
};

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_ss.cpp:168

void POA_Cubit::ping_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< void>::ret_val retval;

  TAO::Argument * const args[] =
    {
      &retval
    };

  static size_t const nargs = 1;

  POA_Cubit * const impl =
    dynamic_cast<POA_Cubit *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  ping_Cubit command (
    impl);

  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}



// TAO_IDL - Generated from
// be/be_visitor_interface/interface_ss.cpp:163



::CORBA::Boolean POA_Cubit::_is_a (const char* value)
{
  return
    (
      ACE_OS::strcmp (
          value,
          "IDL:Cubit:1.0"
        ) == 0 ||
      !ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        )
    );
}

const char* POA_Cubit::_interface_repository_id (void) const
{
  return "IDL:Cubit:1.0";
}

// TAO_IDL - Generated from
// be/be_visitor_interface/interface_ss.cpp:423

void POA_Cubit::_dispatch (
  TAO_ServerRequest & req,
  TAO::Portable_Server::Servant_Upcall* servant_upcall)
{
  this->synchronous_upcall_dispatch (req, servant_upcall, this);
}

// TAO_IDL - Generated from
// be/be_visitor_interface/interface_ss.cpp:370

Cubit *
POA_Cubit::_this (void)
{
  TAO_Stub *stub = this->_create_stub ();

  TAO_Stub_Auto_Ptr safe_stub (stub);
  ::CORBA::Object_ptr tmp = CORBA::Object_ptr ();

  ::CORBA::Boolean const _tao_opt_colloc =
    stub->servant_orb_var ()->orb_core ()->optimize_collocation_objects ();

  ACE_NEW_RETURN (
      tmp,
      ::CORBA::Object (stub, _tao_opt_colloc, this),
      0);

  ::CORBA::Object_var obj = tmp;
  (void) safe_stub.release ();

  typedef ::Cubit STUB_SCOPED_NAME;
  return
    TAO::Narrow_Utils<STUB_SCOPED_NAME>::unchecked_narrow (
        obj.in ());
}

// TAO_IDL - Generated from
// be/be_interface.cpp:1865

class TAO_Cubit_Factory_Perfect_Hash_OpTable
  : public TAO_Perfect_Hash_OpTable
{
private:
  unsigned int hash (const char *str, unsigned int len);

public:
  const TAO_operation_db_entry * lookup (const char *str, unsigned int len);
};

/* C++ code produced by gperf version 2.8 (ACE version) */
/* Command-line: /mnt/win_d/projects/ATCD/ACE/bin/ace_gperf -m -M -J -c -C -D -E -T -f 0 -F 0,0 -a -o -t -p -K opname -L C++ -Z TAO_Cubit_Factory_Perfect_Hash_OpTable -N lookup  */
unsigned int
TAO_Cubit_Factory_Perfect_Hash_OpTable::hash (const char *str, unsigned int len)
{
  static const unsigned char asso_values[] =
    {
     16, 16, 16, 16, 16, 16, 16, 16, 16, 16,
     16, 16, 16, 16, 16, 16, 16, 16, 16, 16,
     16, 16, 16, 16, 16, 16, 16, 16, 16, 16,
     16, 16, 16, 16, 16, 16, 16, 16, 16, 16,
     16, 16, 16, 16, 16, 16, 16, 16, 16, 16,
     16, 16, 16, 16, 16, 16, 16, 16, 16, 16,
     16, 16, 16, 16, 16, 16, 16, 16, 16, 16,
     16, 16, 16, 16, 16, 16, 16, 16, 16, 16,
     16, 16, 16, 16, 16, 16, 16, 16, 16, 16,
     16, 16, 16, 16, 16,  0, 16,  0, 16, 16,
      0,  5, 16, 16, 16, 16, 16, 16, 16,  2,
     16, 16, 16, 16, 16, 16,  0, 16, 16, 16,
     16, 16, 16, 16, 16, 16, 16, 16,
    };
  return len + asso_values[static_cast<int>(str[len - 1])] + asso_values[static_cast<int>(str[0])];
}

const TAO_operation_db_entry *
TAO_Cubit_Factory_Perfect_Hash_OpTable::lookup (const char *str, unsigned int len)
{
  enum
    {
      TOTAL_KEYWORDS = 6,
      MIN_WORD_LENGTH = 5,
      MAX_WORD_LENGTH = 14,
      MIN_HASH_VALUE = 5,
      MAX_HASH_VALUE = 15,
      HASH_VALUE_RANGE = 11,
      DUPLICATES = 0,
      WORDLIST_SIZE = 11
    };

  static const TAO_operation_db_entry wordlist[] =
    {
      {"",0,0},{"",0,0},{"",0,0},{"",0,0},{"",0,0},
      {"_is_a", &TAO_ServantBase::_is_a_thru_poa_skel, 0},
      {"",0,0},{"",0,0},{"",0,0},{"",0,0},
      {"_component", &TAO_ServantBase::_component_thru_poa_skel, 0},
      {"",0,0},
      {"make_cubit", &POA_Cubit_Factory::make_cubit_skel, &_TAO_Cubit_Factory_Direct_Proxy_Impl::make_cubit},
      {"_non_existent", &TAO_ServantBase::_non_existent_thru_poa_skel, 0},
      {"_repository_id", &TAO_ServantBase::_repository_id_thru_poa_skel, 0},
      {"_interface", &TAO_ServantBase::_interface_skel, 0},
    };

  if (len <= MAX_WORD_LENGTH && len >= MIN_WORD_LENGTH)
    {
      unsigned int key = hash (str, len);

      if (key <= MAX_HASH_VALUE && key >= MIN_HASH_VALUE)
        {
          const char *s = wordlist[key].opname;

          if (*str == *s && !ACE_OS::strncmp (str + 1, s + 1, len - 1))
            return &wordlist[key];
        }
    }
  return 0;
}

static TAO_Cubit_Factory_Perfect_Hash_OpTable tao_Cubit_Factory_optable;

///////////////////////////////////////////////////////////////////////
//                 Direct Proxy  Implementation
//

_TAO_Cubit_Factory_Direct_Proxy_Impl::~_TAO_Cubit_Factory_Direct_Proxy_Impl (void)
{
}

// TAO_IDL - Generated from
// be/be_visitor_operation/direct_proxy_impl_ss.cpp:57
void
_TAO_Cubit_Factory_Direct_Proxy_Impl::make_cubit (
    TAO_Abstract_ServantBase  *servant,
    TAO::Argument ** args)

{
  POA_Cubit_Factory_ptr _tao_ptr =
    dynamic_cast<POA_Cubit_Factory_ptr> (servant);
  if (!_tao_ptr)
    {
      throw ::CORBA::INTERNAL ();
    }

  ((TAO::Arg_Traits< ::Cubit>::ret_val *) args[0])->arg () =
    _tao_ptr->make_cubit (
        );
}



//
//           End Direct Proxy Implementation
///////////////////////////////////////////////////////////////////////

// TAO_IDL - Generated from
// be/be_visitor_interface/interface_ss.cpp:90

POA_Cubit_Factory::POA_Cubit_Factory (void)
  : TAO_ServantBase ()
{
  this->optable_ = &tao_Cubit_Factory_optable;
}

POA_Cubit_Factory::POA_Cubit_Factory (const POA_Cubit_Factory& rhs)
  : TAO_Abstract_ServantBase (rhs),
    TAO_ServantBase (rhs)
{
}

POA_Cubit_Factory::~POA_Cubit_Factory (void)
{
}


// TAO_IDL - Generated from
// be/be_visitor_operation/upcall_command_ss.cpp:80

class make_cubit_Cubit_Factory
  : public TAO::Upcall_Command
{
public:
  inline make_cubit_Cubit_Factory (
    POA_Cubit_Factory * servant,
    TAO_Operation_Details const * operation_details,
    TAO::Argument * const args[])
    : servant_ (servant)
      , operation_details_ (operation_details)
      , args_ (args)
  {
  }

  virtual void execute (void)
  {
    TAO::SArg_Traits< ::Cubit>::ret_arg_type retval =
      TAO::Portable_Server::get_ret_arg< ::Cubit> (
        this->operation_details_,
        this->args_);

    retval =
      this->servant_->make_cubit ();
  }

private:
  POA_Cubit_Factory * const servant_;
  TAO_Operation_Details const * const operation_details_;
  TAO::Argument * const * const args_;
};

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_ss.cpp:168

void POA_Cubit_Factory::make_cubit_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::Cubit>::ret_val retval;

  TAO::Argument * const args[] =
    {
      &retval
    };

  static size_t const nargs = 1;

  POA_Cubit_Factory * const impl =
    dynamic_cast<POA_Cubit_Factory *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  make_cubit_Cubit_Factory command (
    impl,
    server_request.operation_details (),
    args);

  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}



// TAO_IDL - Generated from
// be/be_visitor_interface/interface_ss.cpp:163



::CORBA::Boolean POA_Cubit_Factory::_is_a (const char* value)
{
  return
    (
      ACE_OS::strcmp (
          value,
          "IDL:Cubit_Factory:1.0"
        ) == 0 ||
      !ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        )
    );
}

const char* POA_Cubit_Factory::_interface_repository_id (void) const
{
  return "IDL:Cubit_Factory:1.0";
}

// TAO_IDL - Generated from
// be/be_visitor_interface/interface_ss.cpp:423

void POA_Cubit_Factory::_dispatch (
  TAO_ServerRequest & req,
  TAO::Portable_Server::Servant_Upcall* servant_upcall)
{
  this->synchronous_upcall_dispatch (req, servant_upcall, this);
}

// TAO_IDL - Generated from
// be/be_visitor_interface/interface_ss.cpp:370

Cubit_Factory *
POA_Cubit_Factory::_this (void)
{
  TAO_Stub *stub = this->_create_stub ();

  TAO_Stub_Auto_Ptr safe_stub (stub);
  ::CORBA::Object_ptr tmp = CORBA::Object_ptr ();

  ::CORBA::Boolean const _tao_opt_colloc =
    stub->servant_orb_var ()->orb_core ()->optimize_collocation_objects ();

  ACE_NEW_RETURN (
      tmp,
      ::CORBA::Object (stub, _tao_opt_colloc, this),
      0);

  ::CORBA::Object_var obj = tmp;
  (void) safe_stub.release ();

  typedef ::Cubit_Factory STUB_SCOPED_NAME;
  return
    TAO::Narrow_Utils<STUB_SCOPED_NAME>::unchecked_narrow (
        obj.in ());
}

#endif /* ifndef */

