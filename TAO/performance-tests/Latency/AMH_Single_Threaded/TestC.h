// -*- C++ -*-
/**
 * Code generated by the The ACE ORB (TAO) IDL Compiler v2.4.1
 * TAO and the TAO IDL Compiler have been developed by:
 *       Center for Distributed Object Computing
 *       Washington University
 *       St. Louis, MO
 *       USA
 *       http://www.cs.wustl.edu/~schmidt/doc-center.html
 * and
 *       Distributed Object Computing Laboratory
 *       University of California at Irvine
 *       Irvine, CA
 *       USA
 * and
 *       Institute for Software Integrated Systems
 *       Vanderbilt University
 *       Nashville, TN
 *       USA
 *       http://www.isis.vanderbilt.edu/
 *
 * Information about TAO is available at:
 *     http://www.dre.vanderbilt.edu/~schmidt/TAO.html
 **/

// TAO_IDL - Generated from
// be/be_codegen.cpp:149

#ifndef _TAO_IDL_TESTC_HKOYOY_H_
#define _TAO_IDL_TESTC_HKOYOY_H_

#include /**/ "ace/pre.h"


#include /**/ "ace/config-all.h"

#if !defined (ACE_LACKS_PRAGMA_ONCE)
# pragma once
#endif /* ACE_LACKS_PRAGMA_ONCE */


#include "tao/AnyTypeCode/AnyTypeCode_methods.h"
#include "tao/AnyTypeCode/Any.h"
#include "tao/Valuetype/ValueBase.h"
#include "tao/Valuetype/Valuetype_Adapter_Factory_Impl.h"
#include "tao/Valuetype/ValueFactory.h"
#include "tao/ORB.h"
#include "tao/SystemException.h"
#include "tao/Basic_Types.h"
#include "tao/ORB_Constants.h"
#include "tao/Object.h"
#include "tao/Valuetype/Value_VarOut_T.h"
#include "tao/Objref_VarOut_T.h"
#include "tao/Arg_Traits_T.h"
#include "tao/Basic_Arguments.h"
#include "tao/Special_Basic_Arguments.h"
#include "tao/Any_Insert_Policy_T.h"
#include "tao/Fixed_Size_Argument_T.h"
#include "tao/Var_Size_Argument_T.h"
#include "tao/Object_Argument_T.h"
#include /**/ "tao/Version.h"
#include /**/ "tao/Versioned_Namespace.h"

#if TAO_MAJOR_VERSION != 2 || TAO_MINOR_VERSION != 4 || TAO_MICRO_VERSION != 1
#error This file should be regenerated with TAO_IDL
#endif

#if defined (TAO_EXPORT_MACRO)
#undef TAO_EXPORT_MACRO
#endif
#define TAO_EXPORT_MACRO

// TAO_IDL - Generated from
// be/be_visitor_root/root_ch.cpp:157
TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<typename T> class Narrow_Utils;
}
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_module/module_ch.cpp:35

namespace Test
{

  // TAO_IDL - Generated from
  // be/be_visitor_typedef/typedef_ch.cpp:370

  typedef ::CORBA::ULongLong Timestamp;
  typedef ::CORBA::ULongLong_out Timestamp_out;

  // TAO_IDL - Generated from
  // be/be_visitor_typecode/typecode_decl.cpp:34

  extern  ::CORBA::TypeCode_ptr const _tc_Timestamp;

  // TAO_IDL - Generated from
  // be/be_interface.cpp:748

#if !defined (_TEST_ROUNDTRIP__VAR_OUT_CH_)
#define _TEST_ROUNDTRIP__VAR_OUT_CH_

  class Roundtrip;
  typedef Roundtrip *Roundtrip_ptr;

  typedef
    TAO_Objref_Var_T<
        Roundtrip
      >
    Roundtrip_var;

  typedef
    TAO_Objref_Out_T<
        Roundtrip
      >
    Roundtrip_out;

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // be/be_visitor_interface/interface_ch.cpp:40

  class  Roundtrip
    : public virtual ::CORBA::Object
  {
  public:
    friend class TAO::Narrow_Utils<Roundtrip>;

    // TAO_IDL - Generated from
    // be/be_type.cpp:304

    typedef Roundtrip_ptr _ptr_type;
    typedef Roundtrip_var _var_type;
    typedef Roundtrip_out _out_type;

    static void _tao_any_destructor (void *);

    // The static operations.
    static Roundtrip_ptr _duplicate (Roundtrip_ptr obj);

    static void _tao_release (Roundtrip_ptr obj);

    static Roundtrip_ptr _narrow (::CORBA::Object_ptr obj);
    static Roundtrip_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
    static Roundtrip_ptr _nil (void);

    virtual ::Test::Timestamp test_method (
      ::Test::Timestamp send_time);

    virtual void shutdown (
      void);

    // TAO_IDL - Generated from
    // be/be_visitor_interface/interface_ch.cpp:137

    virtual ::CORBA::Boolean _is_a (const char *type_id);
    virtual const char* _interface_repository_id (void) const;
    virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);

  protected:
    // Concrete interface only.
    Roundtrip (void);

    // Concrete non-local interface only.
    Roundtrip (
        ::IOP::IOR *ior,
        TAO_ORB_Core *orb_core);

    // Non-local interface only.
    Roundtrip (
        TAO_Stub *objref,
        ::CORBA::Boolean _tao_collocated = false,
        TAO_Abstract_ServantBase *servant = 0,
        TAO_ORB_Core *orb_core = 0);

    virtual ~Roundtrip (void);

  private:
    // Private and unimplemented for concrete interfaces.
    Roundtrip (const Roundtrip &);

    void operator= (const Roundtrip &);
  };

  // TAO_IDL - Generated from
  // be/be_visitor_typecode/typecode_decl.cpp:34

  extern  ::CORBA::TypeCode_ptr const _tc_Roundtrip;

  // TAO_IDL - Generated from
  // be/be_valuetype.cpp:564



#if !defined (_TEST_AMH_ROUNDTRIPEXCEPTIONHOLDER__VAR_OUT_CH_)
#define _TEST_AMH_ROUNDTRIPEXCEPTIONHOLDER__VAR_OUT_CH_

  class AMH_RoundtripExceptionHolder;
  typedef
    TAO_Value_Var_T<
        AMH_RoundtripExceptionHolder
      >
    AMH_RoundtripExceptionHolder_var;

  typedef
    TAO_Value_Out_T<
        AMH_RoundtripExceptionHolder
      >
    AMH_RoundtripExceptionHolder_out;

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // be/be_visitor_valuetype/valuetype_ch.cpp:50

  class  AMH_RoundtripExceptionHolder
    : public virtual ::CORBA::DefaultValueRefCountBase
  {
  public:

    // TAO_IDL - Generated from
    // be/be_type.cpp:304

    typedef AMH_RoundtripExceptionHolder * _ptr_type;
    typedef AMH_RoundtripExceptionHolder_var _var_type;
    typedef AMH_RoundtripExceptionHolder_out _out_type;

    static void _tao_any_destructor (void *);

    AMH_RoundtripExceptionHolder ( ::CORBA::Exception *ex)
      : exception (ex)
    {}

    virtual ~AMH_RoundtripExceptionHolder (void);
    virtual ::CORBA::ValueBase *_copy_value (void);

    static AMH_RoundtripExceptionHolder* _downcast ( ::CORBA::ValueBase *v);

    /// TAO extensions or internals
    static ::CORBA::Boolean _tao_unmarshal (
        TAO_InputCDR &strm,
        AMH_RoundtripExceptionHolder *&new_object);

    virtual const char* _tao_obv_repository_id (void) const;

    virtual void _tao_obv_truncatable_repo_ids (Repository_Id_List &) const;

    static const char* _tao_obv_static_repository_id (void);

    virtual ::CORBA::TypeCode_ptr _tao_type (void) const;

  public:

    // TAO_IDL - Generated from
    // be/be_visitor_valuetype/valuetype_ch.cpp:396

  public:
    virtual void raise_test_method (void);

public:

  // TAO_IDL - Generated from
  // be/be_visitor_valuetype/valuetype_ch.cpp:396

public:
  virtual void raise_shutdown (void);

// TAO_IDL - Generated from
// be/be_visitor_valuetype/valuetype_ch.cpp:238

protected:
  AMH_RoundtripExceptionHolder (void);
  virtual ::CORBA::Boolean _tao_marshal_v (TAO_OutputCDR &) const;
  virtual ::CORBA::Boolean _tao_unmarshal_v (TAO_InputCDR &);
  virtual ::CORBA::Boolean _tao_match_formal_type (ptrdiff_t ) const;

private:
  AMH_RoundtripExceptionHolder (const AMH_RoundtripExceptionHolder &);
  void operator= (const AMH_RoundtripExceptionHolder &);

  ::CORBA::Exception *exception;

protected:
  virtual ::CORBA::Boolean
  _tao_marshal__Test_AMH_RoundtripExceptionHolder (TAO_OutputCDR &, TAO_ChunkInfo &) const;

  virtual ::CORBA::Boolean
  _tao_unmarshal__Test_AMH_RoundtripExceptionHolder (TAO_InputCDR &, TAO_ChunkInfo &);
};

// TAO_IDL - Generated from
// be/be_visitor_typecode/typecode_decl.cpp:34

extern  ::CORBA::TypeCode_ptr const _tc_AMH_RoundtripExceptionHolder;

// TAO_IDL - Generated from
// be/be_interface.cpp:748

#if !defined (_TEST_AMH_ROUNDTRIPRESPONSEHANDLER__VAR_OUT_CH_)
#define _TEST_AMH_ROUNDTRIPRESPONSEHANDLER__VAR_OUT_CH_

class AMH_RoundtripResponseHandler;
typedef AMH_RoundtripResponseHandler *AMH_RoundtripResponseHandler_ptr;

typedef
  TAO_Objref_Var_T<
      AMH_RoundtripResponseHandler
    >
  AMH_RoundtripResponseHandler_var;

typedef
  TAO_Objref_Out_T<
      AMH_RoundtripResponseHandler
    >
  AMH_RoundtripResponseHandler_out;

#endif /* end #if !defined */

// TAO_IDL - Generated from
// be/be_visitor_interface/interface_ch.cpp:40

class  AMH_RoundtripResponseHandler
  : public virtual ::CORBA::Object
{
public:

  // TAO_IDL - Generated from
  // be/be_type.cpp:304

  typedef AMH_RoundtripResponseHandler_ptr _ptr_type;
  typedef AMH_RoundtripResponseHandler_var _var_type;
  typedef AMH_RoundtripResponseHandler_out _out_type;

  static void _tao_any_destructor (void *);

  // The static operations.
  static AMH_RoundtripResponseHandler_ptr _duplicate (AMH_RoundtripResponseHandler_ptr obj);

  static void _tao_release (AMH_RoundtripResponseHandler_ptr obj);

  static AMH_RoundtripResponseHandler_ptr _narrow (::CORBA::Object_ptr obj);
  static AMH_RoundtripResponseHandler_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
  static AMH_RoundtripResponseHandler_ptr _nil (void);

  virtual void test_method (
    ::Test::Timestamp return_value) = 0;

  virtual void test_method_excep (
    ::Test::AMH_RoundtripExceptionHolder * holder) = 0;

  virtual void shutdown (
    void) = 0;

  virtual void shutdown_excep (
    ::Test::AMH_RoundtripExceptionHolder * holder) = 0;

  // TAO_IDL - Generated from
  // be/be_visitor_interface/interface_ch.cpp:137

  virtual ::CORBA::Boolean _is_a (const char *type_id);
  virtual const char* _interface_repository_id (void) const;
  virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);

protected:
  // Abstract or local interface only.
  AMH_RoundtripResponseHandler (void);



  virtual ~AMH_RoundtripResponseHandler (void);

private:
  // Private and unimplemented for concrete interfaces.
  AMH_RoundtripResponseHandler (const AMH_RoundtripResponseHandler &);

  void operator= (const AMH_RoundtripResponseHandler &);
};

// TAO_IDL - Generated from
// be/be_visitor_typecode/typecode_decl.cpp:34

extern  ::CORBA::TypeCode_ptr const _tc_AMH_RoundtripResponseHandler;

// TAO_IDL - Generated from
// be/be_visitor_module/module_ch.cpp:64

} // module Test

// TAO_IDL - Generated from
// be/be_visitor_arg_traits.cpp:66

TAO_BEGIN_VERSIONED_NAMESPACE_DECL


// Arg traits specializations.
namespace TAO
{

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:145

#if !defined (_TEST_ROUNDTRIP__ARG_TRAITS_)
#define _TEST_ROUNDTRIP__ARG_TRAITS_

  template<>
  class  Arg_Traits< ::Test::Roundtrip>
    : public
        Object_Arg_Traits_T<
            ::Test::Roundtrip_ptr,
            ::Test::Roundtrip_var,
            ::Test::Roundtrip_out,
            TAO::Objref_Traits<Test::Roundtrip>,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:306

#if !defined (_TEST_AMH_ROUNDTRIPEXCEPTIONHOLDER__ARG_TRAITS_)
#define _TEST_AMH_ROUNDTRIPEXCEPTIONHOLDER__ARG_TRAITS_

  template<>
  class Arg_Traits< ::Test::AMH_RoundtripExceptionHolder>
    : public
        Object_Arg_Traits_T<
            ::Test::AMH_RoundtripExceptionHolder *,
            ::Test::AMH_RoundtripExceptionHolder_var,
            ::Test::AMH_RoundtripExceptionHolder_out,
            TAO::Value_Traits<Test::AMH_RoundtripExceptionHolder>,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

#endif /* end #if !defined */
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_valuetype/obv_module.cpp:44

namespace OBV_Test
{

  // TAO_IDL - Generated from
  // be/be_visitor_valuetype/valuetype_obv_ch.cpp:44

  // OBV_ class
  class  AMH_RoundtripExceptionHolder
    : public virtual Test::AMH_RoundtripExceptionHolder
  {

protected:
  AMH_RoundtripExceptionHolder (void);
  virtual ~AMH_RoundtripExceptionHolder (void);

protected:
  virtual ::CORBA::Boolean
  _tao_marshal__Test_AMH_RoundtripExceptionHolder (TAO_OutputCDR &, TAO_ChunkInfo &) const;

  virtual ::CORBA::Boolean
  _tao_unmarshal__Test_AMH_RoundtripExceptionHolder (TAO_InputCDR &, TAO_ChunkInfo &);

  ::CORBA::Boolean _tao_marshal_state (TAO_OutputCDR &, TAO_ChunkInfo &) const;
  ::CORBA::Boolean _tao_unmarshal_state (TAO_InputCDR &, TAO_ChunkInfo &);
  virtual void truncation_hook (void);

private:
  CORBA::Boolean require_truncation_;
};
}

// TAO_IDL - Generated from
// be/be_visitor_traits.cpp:60

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Traits specializations.
namespace TAO
{

#if !defined (_TEST_ROUNDTRIP__TRAITS_)
#define _TEST_ROUNDTRIP__TRAITS_

  template<>
  struct  Objref_Traits< ::Test::Roundtrip>
  {
    static ::Test::Roundtrip_ptr duplicate (
        ::Test::Roundtrip_ptr p);
    static void release (
        ::Test::Roundtrip_ptr p);
    static ::Test::Roundtrip_ptr nil (void);
    static ::CORBA::Boolean marshal (
        const ::Test::Roundtrip_ptr p,
        TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_TEST_AMH_ROUNDTRIPEXCEPTIONHOLDER__TRAITS_)
#define _TEST_AMH_ROUNDTRIPEXCEPTIONHOLDER__TRAITS_

  template<>
  struct  Value_Traits<Test::AMH_RoundtripExceptionHolder>
  {
    static void add_ref (Test::AMH_RoundtripExceptionHolder *);
    static void remove_ref (Test::AMH_RoundtripExceptionHolder *);
    static void release (Test::AMH_RoundtripExceptionHolder *);
  };

#endif /* end #if !defined */

#if !defined (_TEST_AMH_ROUNDTRIPRESPONSEHANDLER__TRAITS_)
#define _TEST_AMH_ROUNDTRIPRESPONSEHANDLER__TRAITS_

  template<>
  struct  Objref_Traits< ::Test::AMH_RoundtripResponseHandler>
  {
    static ::Test::AMH_RoundtripResponseHandler_ptr duplicate (
        ::Test::AMH_RoundtripResponseHandler_ptr p);
    static void release (
        ::Test::AMH_RoundtripResponseHandler_ptr p);
    static ::Test::AMH_RoundtripResponseHandler_ptr nil (void);
    static ::CORBA::Boolean marshal (
        const ::Test::AMH_RoundtripResponseHandler_ptr p,
        TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */
}
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_interface/any_op_ch.cpp:41



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace Test
{
   void operator<<= ( ::CORBA::Any &, Roundtrip_ptr); // copying
   void operator<<= ( ::CORBA::Any &, Roundtrip_ptr *); // non-copying
   ::CORBA::Boolean operator>>= (const ::CORBA::Any &, Roundtrip_ptr &);
}

#else


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 void operator<<= (::CORBA::Any &, Test::Roundtrip_ptr); // copying
 void operator<<= (::CORBA::Any &, Test::Roundtrip_ptr *); // non-copying
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, Test::Roundtrip_ptr &);
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_valuetype/any_op_ch.cpp:43



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace Test
{
   void operator<<= ( ::CORBA::Any &, AMH_RoundtripExceptionHolder *); // copying
   void operator<<= ( ::CORBA::Any &, AMH_RoundtripExceptionHolder **); // non-copying
   ::CORBA::Boolean operator>>= (const ::CORBA::Any &, AMH_RoundtripExceptionHolder *&);
}

#else


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 void operator<<= (::CORBA::Any &, Test::AMH_RoundtripExceptionHolder *); // copying
 void operator<<= (::CORBA::Any &, Test::AMH_RoundtripExceptionHolder **); // non-copying
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, Test::AMH_RoundtripExceptionHolder *&);
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_interface/any_op_ch.cpp:41



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace Test
{
   void operator<<= ( ::CORBA::Any &, AMH_RoundtripResponseHandler_ptr); // copying
   void operator<<= ( ::CORBA::Any &, AMH_RoundtripResponseHandler_ptr *); // non-copying
   ::CORBA::Boolean operator>>= (const ::CORBA::Any &, AMH_RoundtripResponseHandler_ptr &);
}

#else


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 void operator<<= (::CORBA::Any &, Test::AMH_RoundtripResponseHandler_ptr); // copying
 void operator<<= (::CORBA::Any &, Test::AMH_RoundtripResponseHandler_ptr *); // non-copying
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, Test::AMH_RoundtripResponseHandler_ptr &);
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_interface/cdr_op_ch.cpp:41

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 ::CORBA::Boolean operator<< (TAO_OutputCDR &, const Test::Roundtrip_ptr );
 ::CORBA::Boolean operator>> (TAO_InputCDR &, Test::Roundtrip_ptr &);

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_valuetype.cpp:456


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

namespace CORBA
{
  extern  void add_ref (Test::AMH_RoundtripExceptionHolder *);
  extern  void remove_ref (Test::AMH_RoundtripExceptionHolder *);
}
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_valuetype/cdr_op_ch.cpp:49


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 ::CORBA::Boolean operator<< (TAO_OutputCDR &, const Test::AMH_RoundtripExceptionHolder *);
 ::CORBA::Boolean operator>> (TAO_InputCDR &, Test::AMH_RoundtripExceptionHolder *&);

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_codegen.cpp:1700
#if defined (__ACE_INLINE__)
#include "TestC.inl"
#endif /* defined INLINE */

#include /**/ "ace/post.h"

#endif /* ifndef */

