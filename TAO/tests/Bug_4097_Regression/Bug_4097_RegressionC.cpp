// -*- C++ -*-
/**
 * Code generated by the The ACE ORB (TAO) IDL Compiler v2.4.1
 * TAO and the TAO IDL Compiler have been developed by:
 *       Center for Distributed Object Computing
 *       Washington University
 *       St. Louis, MO
 *       USA
 *       http://www.cs.wustl.edu/~schmidt/doc-center.html
 * and
 *       Distributed Object Computing Laboratory
 *       University of California at Irvine
 *       Irvine, CA
 *       USA
 * and
 *       Institute for Software Integrated Systems
 *       Vanderbilt University
 *       Nashville, TN
 *       USA
 *       http://www.isis.vanderbilt.edu/
 *
 * Information about TAO is available at:
 *     http://www.dre.vanderbilt.edu/~schmidt/TAO.html
 **/

// TAO_IDL - Generated from
// be/be_codegen.cpp:373


#include "Bug_4097_RegressionC.h"
#include "tao/AnyTypeCode/Null_RefCount_Policy.h"
#include "tao/AnyTypeCode/TypeCode_Constants.h"
#include "tao/AnyTypeCode/Alias_TypeCode_Static.h"
#include "tao/AnyTypeCode/Struct_TypeCode_Static.h"
#include "tao/AnyTypeCode/TypeCode_Struct_Field.h"
#include "tao/AnyTypeCode/TypeCode_Case_T.h"
#include "tao/AnyTypeCode/Union_TypeCode_Static.h"
#include "tao/CDR.h"
#include "tao/CDR.h"
#include "tao/AnyTypeCode/Any_Dual_Impl_T.h"
#include "ace/OS_NS_string.h"

#if !defined (__ACE_INLINE__)
#include "Bug_4097_RegressionC.inl"
#endif /* !defined INLINE */

// TAO_IDL - Generated from
// be/be_visitor_union/union_cs.cpp:76

MultiLabelUnion::MultiLabelUnion (void)
{
  ACE_OS::memset (&this->u_, 0, sizeof (this->u_));
  this->disc_ = -2147483647;
}

MultiLabelUnion::MultiLabelUnion (const ::MultiLabelUnion &u)
{
  this->disc_ = u.disc_;
  switch (this->disc_)
  {
    case 0:
    case 1:
    {
      this->u_.mlu_char_ = u.u_.mlu_char_;
    }
    break;
    case 2:
    {
      this->u_.mlu_long_ = u.u_.mlu_long_;
    }
    break;
    default:
    break;
  }
}

MultiLabelUnion::~MultiLabelUnion (void)
{
  // Finalize.
  this->_reset ();
}

void MultiLabelUnion::_tao_any_destructor (void *_tao_void_pointer)
{
  MultiLabelUnion *tmp =
    static_cast<MultiLabelUnion *> (_tao_void_pointer);
  delete tmp;
}

MultiLabelUnion &
MultiLabelUnion::operator= (const ::MultiLabelUnion &u)
{
  if (&u == this)
    {
      return *this;
    }

  this->_reset ();
  this->disc_ = u.disc_;

  switch (this->disc_)
  {
    case 0:
    case 1:
    {
      this->u_.mlu_char_ = u.u_.mlu_char_;
    }
    break;
    case 2:
    {
      this->u_.mlu_long_ = u.u_.mlu_long_;
    }
    break;
    default:
    break;
  }

  return *this;
}

/// Reset method to reset old values of a union.
void MultiLabelUnion::_reset (void)
{
  switch (this->disc_)
  {

    case 0:
    case 1:

    break;

    case 2:

    break;

    default:
    break;
  }
}

// TAO_IDL - Generated from
// be/be_visitor_typecode/union_typecode.cpp:65

static TAO::TypeCode::Case_T<CORBA::Long, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_MultiLabelUnion__0 (0, "mlu_char", &CORBA::_tc_char);
static TAO::TypeCode::Case_T<CORBA::Long, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_MultiLabelUnion__1 (1, "mlu_char", &CORBA::_tc_char);
static TAO::TypeCode::Case_T<CORBA::Long, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_MultiLabelUnion__2 (2, "mlu_long", &CORBA::_tc_long);

static TAO::TypeCode::Case<char const *, ::CORBA::TypeCode_ptr const *> const * const _tao_cases_MultiLabelUnion[] =
  {
    &_tao_cases_MultiLabelUnion__0,
    &_tao_cases_MultiLabelUnion__1,
    &_tao_cases_MultiLabelUnion__2
  };

static TAO::TypeCode::Union<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::TypeCode::Case<char const *, ::CORBA::TypeCode_ptr const *> const * const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_MultiLabelUnion (
    "IDL:MultiLabelUnion:1.0",
    "MultiLabelUnion",
    &CORBA::_tc_long,
    _tao_cases_MultiLabelUnion,
    sizeof (_tao_cases_MultiLabelUnion)/sizeof (_tao_cases_MultiLabelUnion[0]),
    -1);

::CORBA::TypeCode_ptr const _tc_MultiLabelUnion =
  &_tao_tc_MultiLabelUnion;

// TAO_IDL - Generated from
// be/be_visitor_union/any_op_cs.cpp:37


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    const MultiLabelUnion &_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<MultiLabelUnion>::insert_copy (
      _tao_any,
      MultiLabelUnion::_tao_any_destructor,
      _tc_MultiLabelUnion,
      _tao_elem
    );
}

// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    MultiLabelUnion *_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<MultiLabelUnion>::insert (
      _tao_any,
      MultiLabelUnion::_tao_any_destructor,
      _tc_MultiLabelUnion,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    MultiLabelUnion *&_tao_elem
  )
{
  return _tao_any >>= const_cast<
      const MultiLabelUnion *&> (
      _tao_elem
    );
}

// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const MultiLabelUnion *&_tao_elem
  )
{
  return
    TAO::Any_Dual_Impl_T<MultiLabelUnion>::extract (
        _tao_any,
        MultiLabelUnion::_tao_any_destructor,
        _tc_MultiLabelUnion,
        _tao_elem
      );
}
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_union/cdr_op_cs.cpp:74


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const MultiLabelUnion &_tao_union
  )
{
  if ( !(strm << _tao_union._d ()) )
    {
      return false;
    }

  ::CORBA::Boolean result = true;

  switch (_tao_union._d ())
  {
    case 0:
    case 1:
      {
        result = strm << ::ACE_OutputCDR::from_char (_tao_union.mlu_char ());
      }
      break;
    case 2:
      {
        result = strm << _tao_union.mlu_long ();
      }
      break;
    default:
      break;
  }

  return result;
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    MultiLabelUnion &_tao_union
  )
{
  CORBA::Long _tao_discriminant;
  if ( !(strm >> _tao_discriminant) )
    {
      return false;
    }

  ::CORBA::Boolean result = true;

  switch (_tao_discriminant)
  {
    case 0:
    case 1:
      {
        ::CORBA::Char _tao_union_tmp;
        ::ACE_InputCDR::to_char _tao_union_helper (_tao_union_tmp);
        result = strm >> _tao_union_helper;

        if (result)
          {
            _tao_union.mlu_char (_tao_union_tmp);
            _tao_union._d (_tao_discriminant);
          }
      }
      break;
    case 2:
      {
        CORBA::Long _tao_union_tmp;
        result = strm >> _tao_union_tmp;

        if (result)
          {
            _tao_union.mlu_long (_tao_union_tmp);
            _tao_union._d (_tao_discriminant);
          }
      }
      break;
    default:
      _tao_union._default ();
      // For maximum interop compatibility, force the same value as transmitted
      _tao_union._d (_tao_discriminant);
      break;
  }

  return result;
}

TAO_END_VERSIONED_NAMESPACE_DECL



