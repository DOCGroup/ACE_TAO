// -*- C++ -*-
/**
 * Code generated by the The ACE ORB (TAO) IDL Compiler v2.4.1
 * TAO and the TAO IDL Compiler have been developed by:
 *       Center for Distributed Object Computing
 *       Washington University
 *       St. Louis, MO
 *       USA
 *       http://www.cs.wustl.edu/~schmidt/doc-center.html
 * and
 *       Distributed Object Computing Laboratory
 *       University of California at Irvine
 *       Irvine, CA
 *       USA
 * and
 *       Institute for Software Integrated Systems
 *       Vanderbilt University
 *       Nashville, TN
 *       USA
 *       http://www.isis.vanderbilt.edu/
 *
 * Information about TAO is available at:
 *     http://www.dre.vanderbilt.edu/~schmidt/TAO.html
 **/

// TAO_IDL - Generated from
// be/be_codegen.cpp:149

#ifndef _TAO_IDL_TESTC_DCEHQ5_H_
#define _TAO_IDL_TESTC_DCEHQ5_H_

#include /**/ "ace/pre.h"


#include /**/ "ace/config-all.h"

#if !defined (ACE_LACKS_PRAGMA_ONCE)
# pragma once
#endif /* ACE_LACKS_PRAGMA_ONCE */


#include "tao/ORB.h"
#include "tao/SystemException.h"
#include "tao/UserException.h"
#include "tao/Basic_Types.h"
#include "tao/ORB_Constants.h"
#include "tao/Object.h"
#include "tao/Sequence_T.h"
#include "tao/Objref_VarOut_T.h"
#include "tao/Seq_Var_T.h"
#include "tao/Seq_Out_T.h"
#include "tao/VarOut_T.h"
#include "tao/Arg_Traits_T.h"
#include "tao/Basic_Arguments.h"
#include "tao/Special_Basic_Arguments.h"
#include "tao/Any_Insert_Policy_T.h"
#include "tao/Fixed_Size_Argument_T.h"
#include "tao/Var_Size_Argument_T.h"
#include "tao/Object_Argument_T.h"
#include "tao/Special_Basic_Arguments.h"
#include /**/ "tao/Version.h"
#include /**/ "tao/Versioned_Namespace.h"

#if TAO_MAJOR_VERSION != 2 || TAO_MINOR_VERSION != 4 || TAO_MICRO_VERSION != 1
#error This file should be regenerated with TAO_IDL
#endif

#if defined (TAO_EXPORT_MACRO)
#undef TAO_EXPORT_MACRO
#endif
#define TAO_EXPORT_MACRO 

// TAO_IDL - Generated from
// be/be_visitor_root/root_ch.cpp:157
TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<typename T> class Narrow_Utils;
}
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_module/module_ch.cpp:35

namespace Test
{

  // TAO_IDL - Generated from
  // be/be_visitor_sequence/sequence_ch.cpp:99

#if !defined (_TEST_PAYLOAD_CH_)
#define _TEST_PAYLOAD_CH_

  class Payload;

  typedef
    ::TAO_FixedSeq_Var_T<
        Payload
      >
    Payload_var;

  typedef
    ::TAO_Seq_Out_T<
        Payload
      >
    Payload_out;

  class  Payload
    : public
        ::TAO::unbounded_value_sequence<
            ::CORBA::Octet
          >
  {
  public:
    Payload (void);
    Payload ( ::CORBA::ULong max);
    Payload (
      ::CORBA::ULong max,
      ::CORBA::ULong length,
      ::CORBA::Octet* buffer,
      ::CORBA::Boolean release = false);
    Payload (const Payload &);
    virtual ~Payload (void);
    

    // TAO_IDL - Generated from
    // be/be_type.cpp:304

    
    typedef Payload_var _var_type;
    typedef Payload_out _out_type;

    

#if (TAO_NO_COPY_OCTET_SEQUENCES == 1)
    Payload (
        ::CORBA::ULong length,
        const ACE_Message_Block* mb
      )
      : ::TAO::unbounded_value_sequence< ::CORBA::Octet> (length, mb) {}
#endif /* TAO_NO_COPY_OCTET_SEQUENCE == 1 */
  };

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // be/be_interface.cpp:748

#if !defined (_TEST_SESSION__VAR_OUT_CH_)
#define _TEST_SESSION__VAR_OUT_CH_

  class Session;
  typedef Session *Session_ptr;

  typedef
    TAO_Objref_Var_T<
        Session
      >
    Session_var;
  
  typedef
    TAO_Objref_Out_T<
        Session
      >
    Session_out;

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // be/be_visitor_sequence/sequence_ch.cpp:99

#if !defined (_TEST_SESSION_LIST_CH_)
#define _TEST_SESSION_LIST_CH_

  class Session_List;

  typedef
    ::TAO_VarSeq_Var_T<
        Session_List
      >
    Session_List_var;

  typedef
    ::TAO_Seq_Out_T<
        Session_List
      >
    Session_List_out;

  class  Session_List
    : public
        ::TAO::unbounded_object_reference_sequence<
            Session,
            Session_var
          >
  {
  public:
    Session_List (void);
    Session_List ( ::CORBA::ULong max);
    Session_List (
      ::CORBA::ULong max,
      ::CORBA::ULong length,
      Session_ptr* buffer,
      ::CORBA::Boolean release = false);
    Session_List (const Session_List &);
    virtual ~Session_List (void);
    

    // TAO_IDL - Generated from
    // be/be_type.cpp:304

    
    typedef Session_List_var _var_type;
    typedef Session_List_out _out_type;
  };

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // be/be_interface.cpp:748

#if !defined (_TEST_SESSION_CONTROL__VAR_OUT_CH_)
#define _TEST_SESSION_CONTROL__VAR_OUT_CH_

  class Session_Control;
  typedef Session_Control *Session_Control_ptr;

  typedef
    TAO_Objref_Var_T<
        Session_Control
      >
    Session_Control_var;
  
  typedef
    TAO_Objref_Out_T<
        Session_Control
      >
    Session_Control_out;

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // be/be_visitor_interface/interface_ch.cpp:40

  class  Session_Control
    : public virtual ::CORBA::Object
  {
  public:
    friend class TAO::Narrow_Utils<Session_Control>;

    // TAO_IDL - Generated from
    // be/be_type.cpp:304

    typedef Session_Control_ptr _ptr_type;
    typedef Session_Control_var _var_type;
    typedef Session_Control_out _out_type;

    // The static operations.
    static Session_Control_ptr _duplicate (Session_Control_ptr obj);

    static void _tao_release (Session_Control_ptr obj);

    static Session_Control_ptr _narrow (::CORBA::Object_ptr obj);
    static Session_Control_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
    static Session_Control_ptr _nil (void);

    virtual void session_finished (
      ::CORBA::Boolean success);

    // TAO_IDL - Generated from
    // be/be_visitor_interface/interface_ch.cpp:137

    virtual ::CORBA::Boolean _is_a (const char *type_id);
    virtual const char* _interface_repository_id (void) const;
    virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);
  
  protected:
    // Concrete interface only.
    Session_Control (void);

    // Concrete non-local interface only.
    Session_Control (
        ::IOP::IOR *ior,
        TAO_ORB_Core *orb_core);
    
    // Non-local interface only.
    Session_Control (
        TAO_Stub *objref,
        ::CORBA::Boolean _tao_collocated = false,
        TAO_Abstract_ServantBase *servant = 0,
        TAO_ORB_Core *orb_core = 0);

    virtual ~Session_Control (void);
  
  private:
    // Private and unimplemented for concrete interfaces.
    Session_Control (const Session_Control &);

    void operator= (const Session_Control &);
  };

  // TAO_IDL - Generated from
  // be/be_interface.cpp:748

#if !defined (_TEST_PEER__VAR_OUT_CH_)
#define _TEST_PEER__VAR_OUT_CH_

  class Peer;
  typedef Peer *Peer_ptr;

  typedef
    TAO_Objref_Var_T<
        Peer
      >
    Peer_var;
  
  typedef
    TAO_Objref_Out_T<
        Peer
      >
    Peer_out;

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // be/be_visitor_interface/interface_ch.cpp:40

  class  Peer
    : public virtual ::CORBA::Object
  {
  public:
    friend class TAO::Narrow_Utils<Peer>;

    // TAO_IDL - Generated from
    // be/be_type.cpp:304

    typedef Peer_ptr _ptr_type;
    typedef Peer_var _var_type;
    typedef Peer_out _out_type;

    // The static operations.
    static Peer_ptr _duplicate (Peer_ptr obj);

    static void _tao_release (Peer_ptr obj);

    static Peer_ptr _narrow (::CORBA::Object_ptr obj);
    static Peer_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
    static Peer_ptr _nil (void);

    virtual ::Test::Session_ptr create_session (
      ::Test::Session_Control_ptr control,
      ::CORBA::ULong payload_size,
      ::CORBA::ULong thread_count,
      ::CORBA::ULong message_count,
      ::CORBA::ULong peer_count);

    virtual void shutdown (
      void);

    // TAO_IDL - Generated from
    // be/be_visitor_interface/interface_ch.cpp:137

    virtual ::CORBA::Boolean _is_a (const char *type_id);
    virtual const char* _interface_repository_id (void) const;
    virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);
  
  protected:
    // Concrete interface only.
    Peer (void);

    // Concrete non-local interface only.
    Peer (
        ::IOP::IOR *ior,
        TAO_ORB_Core *orb_core);
    
    // Non-local interface only.
    Peer (
        TAO_Stub *objref,
        ::CORBA::Boolean _tao_collocated = false,
        TAO_Abstract_ServantBase *servant = 0,
        TAO_ORB_Core *orb_core = 0);

    virtual ~Peer (void);
  
  private:
    // Private and unimplemented for concrete interfaces.
    Peer (const Peer &);

    void operator= (const Peer &);
  };

  // TAO_IDL - Generated from
  // be/be_visitor_exception/exception_ch.cpp:41

  class  Already_Running : public ::CORBA::UserException
  {
  public:

    Already_Running (void);
    Already_Running (const Already_Running &);
    ~Already_Running (void);

    Already_Running &operator= (const Already_Running &);

    static Already_Running *_downcast ( ::CORBA::Exception *);
    static const Already_Running *_downcast ( ::CORBA::Exception const *);

    static ::CORBA::Exception *_alloc (void);

    virtual ::CORBA::Exception *_tao_duplicate (void) const;

    virtual void _raise (void) const;

    virtual void _tao_encode (TAO_OutputCDR &cdr) const;
    virtual void _tao_decode (TAO_InputCDR &cdr);
  };

  // TAO_IDL - Generated from
  // be/be_visitor_exception/exception_ch.cpp:41

  class  No_Peers : public ::CORBA::UserException
  {
  public:

    No_Peers (void);
    No_Peers (const No_Peers &);
    ~No_Peers (void);

    No_Peers &operator= (const No_Peers &);

    static No_Peers *_downcast ( ::CORBA::Exception *);
    static const No_Peers *_downcast ( ::CORBA::Exception const *);

    static ::CORBA::Exception *_alloc (void);

    virtual ::CORBA::Exception *_tao_duplicate (void) const;

    virtual void _raise (void) const;

    virtual void _tao_encode (TAO_OutputCDR &cdr) const;
    virtual void _tao_decode (TAO_InputCDR &cdr);
  };

  // TAO_IDL - Generated from
  // be/be_visitor_interface/interface_ch.cpp:40

  class  Session
    : public virtual ::CORBA::Object
  {
  public:
    friend class TAO::Narrow_Utils<Session>;

    // TAO_IDL - Generated from
    // be/be_type.cpp:304

    typedef Session_ptr _ptr_type;
    typedef Session_var _var_type;
    typedef Session_out _out_type;

    // The static operations.
    static Session_ptr _duplicate (Session_ptr obj);

    static void _tao_release (Session_ptr obj);

    static Session_ptr _narrow (::CORBA::Object_ptr obj);
    static Session_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
    static Session_ptr _nil (void);

    virtual void start (
      const ::Test::Session_List & other_sessions);

    virtual void ping (
      void);

    virtual void receive_payload (
      const ::Test::Payload & the_payload);

    virtual void destroy (
      void);

    // TAO_IDL - Generated from
    // be/be_visitor_interface/interface_ch.cpp:137

    virtual ::CORBA::Boolean _is_a (const char *type_id);
    virtual const char* _interface_repository_id (void) const;
    virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);
  
  protected:
    // Concrete interface only.
    Session (void);

    // Concrete non-local interface only.
    Session (
        ::IOP::IOR *ior,
        TAO_ORB_Core *orb_core);
    
    // Non-local interface only.
    Session (
        TAO_Stub *objref,
        ::CORBA::Boolean _tao_collocated = false,
        TAO_Abstract_ServantBase *servant = 0,
        TAO_ORB_Core *orb_core = 0);

    virtual ~Session (void);
  
  private:
    // Private and unimplemented for concrete interfaces.
    Session (const Session &);

    void operator= (const Session &);
  };

  // TAO_IDL - Generated from
  // be/be_interface.cpp:748

#if !defined (_TEST_COORDINATOR__VAR_OUT_CH_)
#define _TEST_COORDINATOR__VAR_OUT_CH_

  class Coordinator;
  typedef Coordinator *Coordinator_ptr;

  typedef
    TAO_Objref_Var_T<
        Coordinator
      >
    Coordinator_var;
  
  typedef
    TAO_Objref_Out_T<
        Coordinator
      >
    Coordinator_out;

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // be/be_visitor_interface/interface_ch.cpp:40

  class  Coordinator
    : public virtual ::CORBA::Object
  {
  public:
    friend class TAO::Narrow_Utils<Coordinator>;

    // TAO_IDL - Generated from
    // be/be_type.cpp:304

    typedef Coordinator_ptr _ptr_type;
    typedef Coordinator_var _var_type;
    typedef Coordinator_out _out_type;

    // The static operations.
    static Coordinator_ptr _duplicate (Coordinator_ptr obj);

    static void _tao_release (Coordinator_ptr obj);

    static Coordinator_ptr _narrow (::CORBA::Object_ptr obj);
    static Coordinator_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
    static Coordinator_ptr _nil (void);

    virtual void add_peer (
      ::Test::Peer_ptr the_peer);

    // TAO_IDL - Generated from
    // be/be_visitor_interface/interface_ch.cpp:137

    virtual ::CORBA::Boolean _is_a (const char *type_id);
    virtual const char* _interface_repository_id (void) const;
    virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);
  
  protected:
    // Concrete interface only.
    Coordinator (void);

    // Concrete non-local interface only.
    Coordinator (
        ::IOP::IOR *ior,
        TAO_ORB_Core *orb_core);
    
    // Non-local interface only.
    Coordinator (
        TAO_Stub *objref,
        ::CORBA::Boolean _tao_collocated = false,
        TAO_Abstract_ServantBase *servant = 0,
        TAO_ORB_Core *orb_core = 0);

    virtual ~Coordinator (void);
  
  private:
    // Private and unimplemented for concrete interfaces.
    Coordinator (const Coordinator &);

    void operator= (const Coordinator &);
  };

// TAO_IDL - Generated from
// be/be_visitor_module/module_ch.cpp:64

} // module Test

// TAO_IDL - Generated from
// be/be_visitor_arg_traits.cpp:66

TAO_BEGIN_VERSIONED_NAMESPACE_DECL


// Arg traits specializations.
namespace TAO
{

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:683

  template<>
  class Arg_Traits< ::Test::Payload>
    : public
        Var_Size_Arg_Traits_T<
            ::Test::Payload,
            TAO::Any_Insert_Policy_Noop
          >
  {
  };

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:145

#if !defined (_TEST_SESSION__ARG_TRAITS_)
#define _TEST_SESSION__ARG_TRAITS_

  template<>
  class  Arg_Traits< ::Test::Session>
    : public
        Object_Arg_Traits_T<
            ::Test::Session_ptr,
            ::Test::Session_var,
            ::Test::Session_out,
            TAO::Objref_Traits<Test::Session>,
            TAO::Any_Insert_Policy_Noop
          >
  {
  };

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:683

  template<>
  class Arg_Traits< ::Test::Session_List>
    : public
        Var_Size_Arg_Traits_T<
            ::Test::Session_List,
            TAO::Any_Insert_Policy_Noop
          >
  {
  };

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:145

#if !defined (_TEST_SESSION_CONTROL__ARG_TRAITS_)
#define _TEST_SESSION_CONTROL__ARG_TRAITS_

  template<>
  class  Arg_Traits< ::Test::Session_Control>
    : public
        Object_Arg_Traits_T<
            ::Test::Session_Control_ptr,
            ::Test::Session_Control_var,
            ::Test::Session_Control_out,
            TAO::Objref_Traits<Test::Session_Control>,
            TAO::Any_Insert_Policy_Noop
          >
  {
  };

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:145

#if !defined (_TEST_PEER__ARG_TRAITS_)
#define _TEST_PEER__ARG_TRAITS_

  template<>
  class  Arg_Traits< ::Test::Peer>
    : public
        Object_Arg_Traits_T<
            ::Test::Peer_ptr,
            ::Test::Peer_var,
            ::Test::Peer_out,
            TAO::Objref_Traits<Test::Peer>,
            TAO::Any_Insert_Policy_Noop
          >
  {
  };

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:145

#if !defined (_TEST_COORDINATOR__ARG_TRAITS_)
#define _TEST_COORDINATOR__ARG_TRAITS_

  template<>
  class  Arg_Traits< ::Test::Coordinator>
    : public
        Object_Arg_Traits_T<
            ::Test::Coordinator_ptr,
            ::Test::Coordinator_var,
            ::Test::Coordinator_out,
            TAO::Objref_Traits<Test::Coordinator>,
            TAO::Any_Insert_Policy_Noop
          >
  {
  };

#endif /* end #if !defined */
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_traits.cpp:60

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Traits specializations.
namespace TAO
{

#if !defined (_TEST_SESSION_CONTROL__TRAITS_)
#define _TEST_SESSION_CONTROL__TRAITS_

  template<>
  struct  Objref_Traits< ::Test::Session_Control>
  {
    static ::Test::Session_Control_ptr duplicate (
        ::Test::Session_Control_ptr p);
    static void release (
        ::Test::Session_Control_ptr p);
    static ::Test::Session_Control_ptr nil (void);
    static ::CORBA::Boolean marshal (
        const ::Test::Session_Control_ptr p,
        TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_TEST_PEER__TRAITS_)
#define _TEST_PEER__TRAITS_

  template<>
  struct  Objref_Traits< ::Test::Peer>
  {
    static ::Test::Peer_ptr duplicate (
        ::Test::Peer_ptr p);
    static void release (
        ::Test::Peer_ptr p);
    static ::Test::Peer_ptr nil (void);
    static ::CORBA::Boolean marshal (
        const ::Test::Peer_ptr p,
        TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_TEST_SESSION__TRAITS_)
#define _TEST_SESSION__TRAITS_

  template<>
  struct  Objref_Traits< ::Test::Session>
  {
    static ::Test::Session_ptr duplicate (
        ::Test::Session_ptr p);
    static void release (
        ::Test::Session_ptr p);
    static ::Test::Session_ptr nil (void);
    static ::CORBA::Boolean marshal (
        const ::Test::Session_ptr p,
        TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_TEST_COORDINATOR__TRAITS_)
#define _TEST_COORDINATOR__TRAITS_

  template<>
  struct  Objref_Traits< ::Test::Coordinator>
  {
    static ::Test::Coordinator_ptr duplicate (
        ::Test::Coordinator_ptr p);
    static void release (
        ::Test::Coordinator_ptr p);
    static ::Test::Coordinator_ptr nil (void);
    static ::CORBA::Boolean marshal (
        const ::Test::Coordinator_ptr p,
        TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */
}
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_sequence/cdr_op_ch.cpp:65

#if !defined _TAO_CDR_OP_Test_Payload_H_
#define _TAO_CDR_OP_Test_Payload_H_
TAO_BEGIN_VERSIONED_NAMESPACE_DECL


 ::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Test::Payload &_tao_sequence);
 ::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Test::Payload &_tao_sequence);

TAO_END_VERSIONED_NAMESPACE_DECL



#endif /* _TAO_CDR_OP_Test_Payload_H_ */

// TAO_IDL - Generated from
// be/be_visitor_sequence/cdr_op_ch.cpp:65

#if !defined _TAO_CDR_OP_Test_Session_List_H_
#define _TAO_CDR_OP_Test_Session_List_H_
TAO_BEGIN_VERSIONED_NAMESPACE_DECL


 ::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Test::Session_List &_tao_sequence);
 ::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Test::Session_List &_tao_sequence);

TAO_END_VERSIONED_NAMESPACE_DECL



#endif /* _TAO_CDR_OP_Test_Session_List_H_ */

// TAO_IDL - Generated from
// be/be_visitor_interface/cdr_op_ch.cpp:41

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 ::CORBA::Boolean operator<< (TAO_OutputCDR &, const Test::Session_Control_ptr );
 ::CORBA::Boolean operator>> (TAO_InputCDR &, Test::Session_Control_ptr &);

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_interface/cdr_op_ch.cpp:41

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 ::CORBA::Boolean operator<< (TAO_OutputCDR &, const Test::Peer_ptr );
 ::CORBA::Boolean operator>> (TAO_InputCDR &, Test::Peer_ptr &);

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_exception/cdr_op_ch.cpp:37
TAO_BEGIN_VERSIONED_NAMESPACE_DECL



 ::CORBA::Boolean operator<< (TAO_OutputCDR &, const Test::Already_Running &);
 ::CORBA::Boolean operator>> (TAO_InputCDR &, Test::Already_Running &);

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_exception/cdr_op_ch.cpp:37
TAO_BEGIN_VERSIONED_NAMESPACE_DECL



 ::CORBA::Boolean operator<< (TAO_OutputCDR &, const Test::No_Peers &);
 ::CORBA::Boolean operator>> (TAO_InputCDR &, Test::No_Peers &);

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_interface/cdr_op_ch.cpp:41

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 ::CORBA::Boolean operator<< (TAO_OutputCDR &, const Test::Session_ptr );
 ::CORBA::Boolean operator>> (TAO_InputCDR &, Test::Session_ptr &);

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_interface/cdr_op_ch.cpp:41

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 ::CORBA::Boolean operator<< (TAO_OutputCDR &, const Test::Coordinator_ptr );
 ::CORBA::Boolean operator>> (TAO_InputCDR &, Test::Coordinator_ptr &);

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_codegen.cpp:1700
#if defined (__ACE_INLINE__)
#include "TestC.inl"
#endif /* defined INLINE */

#include /**/ "ace/post.h"

#endif /* ifndef */

