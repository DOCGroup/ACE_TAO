// -*- C++ -*-
/**
 * Code generated by the The ACE ORB (TAO) IDL Compiler v2.4.1
 * TAO and the TAO IDL Compiler have been developed by:
 *       Center for Distributed Object Computing
 *       Washington University
 *       St. Louis, MO
 *       USA
 *       http://www.cs.wustl.edu/~schmidt/doc-center.html
 * and
 *       Distributed Object Computing Laboratory
 *       University of California at Irvine
 *       Irvine, CA
 *       USA
 * and
 *       Institute for Software Integrated Systems
 *       Vanderbilt University
 *       Nashville, TN
 *       USA
 *       http://www.isis.vanderbilt.edu/
 *
 * Information about TAO is available at:
 *     http://www.dre.vanderbilt.edu/~schmidt/TAO.html
 **/

// TAO_IDL - Generated from
// be/be_codegen.cpp:373


#include "testC.h"
#include "tao/AnyTypeCode/Null_RefCount_Policy.h"
#include "tao/AnyTypeCode/TypeCode_Constants.h"
#include "tao/AnyTypeCode/Alias_TypeCode_Static.h"
#include "tao/AnyTypeCode/Enum_TypeCode_Static.h"
#include "tao/AnyTypeCode/Struct_TypeCode_Static.h"
#include "tao/AnyTypeCode/TypeCode_Struct_Field.h"
#include "tao/AnyTypeCode/TypeCode_Case_T.h"
#include "tao/AnyTypeCode/Union_TypeCode_Static.h"
#include "tao/AnyTypeCode/Value_TypeCode_Static.h"
#include "tao/AnyTypeCode/TypeCode_Value_Field.h"
#include "tao/CDR.h"
#include "tao/CDR.h"
#include "tao/AnyTypeCode/Any.h"
#include "tao/AnyTypeCode/Any_Impl_T.h"
#include "tao/AnyTypeCode/Any_Dual_Impl_T.h"
#include "tao/AnyTypeCode/Any_Basic_Impl_T.h"
#include "ace/OS_NS_string.h"

#if !defined (__ACE_INLINE__)
#include "testC.inl"
#endif /* !defined INLINE */

// TAO_IDL - Generated from
// be/be_visitor_typecode/enum_typecode.cpp:29
static char const * const _tao_enumerators_Test_Selector[] =
  {
    "STRUCTTYPE",
    "VALTYPE"
    
  };

static TAO::TypeCode::Enum<char const *,
                           char const * const *,
                           TAO::Null_RefCount_Policy>
  _tao_tc_Test_Selector (
    "IDL:Test/Selector:1.0",
    "Selector",
    _tao_enumerators_Test_Selector,
    2);
  

namespace Test
{
  ::CORBA::TypeCode_ptr const _tc_Selector =
    &_tao_tc_Test_Selector;
}

// TAO_IDL - Generated from
// be/be_visitor_typecode/struct_typecode.cpp:86

static TAO::TypeCode::Struct_Field<
  char const *,
  ::CORBA::TypeCode_ptr const *> const 
    _tao_fields_Test_Foo[] =
      {
        { "l", &CORBA::_tc_long }
      };
  
static TAO::TypeCode::Struct<
  char const *,
  ::CORBA::TypeCode_ptr const *,
  TAO::TypeCode::Struct_Field<
    char const *,
    ::CORBA::TypeCode_ptr const *> const *,
  TAO::Null_RefCount_Policy>
_tao_tc_Test_Foo (
  ::CORBA::tk_struct,
  "IDL:Test/Foo:1.0",
  "Foo",
  _tao_fields_Test_Foo,
  1);


namespace Test
{
  ::CORBA::TypeCode_ptr const _tc_Foo =
    &_tao_tc_Test_Foo;
}

// TAO_IDL - Generated from
// be/be_visitor_structure/structure_cs.cpp:56

void
Test::Foo::_tao_any_destructor (
    void *_tao_void_pointer)
{
  Foo *_tao_tmp_pointer =
    static_cast<Foo *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

// TAO_IDL - Generated from
// be/be_visitor_typecode/value_typecode.cpp:65

static TAO::TypeCode::Value_Field<char const *, ::CORBA::TypeCode_ptr const *> const _tao_fields_Test_Bar[] =
  {
    { "s", &CORBA::_tc_short, ::CORBA::PUBLIC_MEMBER }
    
  };
static TAO::TypeCode::Value<char const *,
                     ::CORBA::TypeCode_ptr const *,
                     TAO::TypeCode::Value_Field<char const *, ::CORBA::TypeCode_ptr const *> const *,
                     TAO::Null_RefCount_Policy>
  _tao_tc_Test_Bar (
    ::CORBA::tk_value,
    "IDL:Test/Bar:1.0",
    "Bar",
    ::CORBA::VM_NONE,
    &::CORBA::_tc_null,
    _tao_fields_Test_Bar,
    1);
  

namespace Test
{
  ::CORBA::TypeCode_ptr const _tc_Bar =
    &_tao_tc_Test_Bar;
}

// TAO_IDL - Generated from
// be/be_visitor_valuetype/valuetype_cs.cpp:53

void
TAO::Value_Traits<Test::Bar>::add_ref (
    Test::Bar * p)
{
  ::CORBA::add_ref (p);
}

void
TAO::Value_Traits<Test::Bar>::remove_ref (
    Test::Bar * p)
{
  ::CORBA::remove_ref (p);
}

void
TAO::Value_Traits<Test::Bar>::release (
    Test::Bar * p)
{
  ::CORBA::remove_ref (p);
}

Test::Bar *
Test::Bar::_downcast ( ::CORBA::ValueBase *v)
{
  return dynamic_cast< ::Test::Bar * > (v);
}

const char *
Test::Bar::_tao_obv_repository_id (void) const
{
  return this->_tao_obv_static_repository_id ();
}

void
Test::Bar::_tao_obv_truncatable_repo_ids (Repository_Id_List& ids) const
{
  ids.push_back (this->_tao_obv_static_repository_id ());
}

void
Test::Bar::_tao_any_destructor (void *_tao_void_pointer)
{
  Bar *_tao_tmp_pointer =
    static_cast<Bar *> (_tao_void_pointer);
  ::CORBA::remove_ref (_tao_tmp_pointer);
}

// TAO extension - the virtual _type method.
::CORBA::TypeCode_ptr Test::Bar::_tao_type (void) const
{
  return ::Test::_tc_Bar;
}

Test::Bar::~Bar (void)
{}

::CORBA::Boolean
Test::Bar::_tao_marshal_v (TAO_OutputCDR & strm) const
{
  TAO_ChunkInfo ci (this->is_truncatable_ || this->chunking_);
  return this->_tao_marshal__Test_Bar (strm, ci);
}

::CORBA::Boolean
Test::Bar::_tao_unmarshal_v (TAO_InputCDR & strm)
{
  TAO_ChunkInfo ci (this->is_truncatable_ || this->chunking_, 1);
  return this->_tao_unmarshal__Test_Bar (strm,ci);
}

::CORBA::Boolean
Test::Bar::_tao_match_formal_type (ptrdiff_t formal_type_id) const
{
  return formal_type_id == reinterpret_cast<ptrdiff_t> (Test::Bar::_downcast);
}

::CORBA::Boolean
Test::Bar::_tao_unmarshal (
    TAO_InputCDR &strm,
    Bar *&new_object
  )
{
  ::CORBA::ValueBase *base = 0;
  ::CORBA::Boolean is_indirected = false;
  ::CORBA::Boolean is_null_object = false;
  ::CORBA::Boolean const retval =
    ::CORBA::ValueBase::_tao_unmarshal_pre (
        strm,
        base,
        Bar::_tao_obv_static_repository_id (),
        is_null_object,
        is_indirected
      );
  
  ::CORBA::ValueBase_var owner (base);

  if (!retval)
    return false;
  
  if (is_null_object)
    return true;
  
  if (!is_indirected && !base->_tao_unmarshal_v (strm))
    return false;
  
  // Now base must point to the unmarshaled object.
  // Align the pointer to the right subobject.
  new_object = Bar::_downcast (base);
  if (0 == new_object)
    return false;
  
  if (is_indirected)
    new_object->_add_ref ();
  
  owner._retn ();
  return true;
}

// TAO_IDL - Generated from
// be/be_visitor_valuetype/valuetype_init_cs.cpp:73

Test::Bar_init::Bar_init (void)
{
}

Test::Bar_init::~Bar_init (void)
{
}

Test::Bar_init *
Test::Bar_init::_downcast ( ::CORBA::ValueFactoryBase *v)
{
  return dynamic_cast< ::Test::Bar_init * > (v);
}

const char*
Test::Bar_init::tao_repository_id (void)
{
  return ::Test::Bar::_tao_obv_static_repository_id ();
}

::CORBA::ValueBase *
Test::Bar_init::create_for_unmarshal (void)
{
  ::CORBA::ValueBase *ret_val = 0;
  ACE_NEW_THROW_EX (
      ret_val,
      OBV_Test::Bar,
      ::CORBA::NO_MEMORY ()
    );
  return ret_val;
}

// TAO_IDL - Generated from
// be/be_visitor_union/union_cs.cpp:76

Test::MyUnion::MyUnion (void)
{
  ACE_OS::memset (&this->u_, 0, sizeof (this->u_));
  this->disc_ = (Test::Selector) -1;
}

Test::MyUnion::MyUnion (const ::Test::MyUnion &u)
{
  this->disc_ = u.disc_;
  switch (this->disc_)
  {
    case Test::STRUCTTYPE:
    {
      this->u_.fooData_ = u.u_.fooData_;
    }
    break;
    case Test::VALTYPE:
    {
      if (u.u_.barData_ == 0)
        {
          this->u_.barData_ = 0;
        }
      else
        {
          typedef Test::Bar_var OBJECT_FIELD;
          ::CORBA::add_ref (u.u_.barData_->ptr ());
          ACE_NEW (
              this->u_.barData_,
              OBJECT_FIELD (u.u_.barData_->in ())
            );
        }
    }
    break;
    default:
    break;
  }
}

Test::MyUnion::~MyUnion (void)
{
  // Finalize.
  this->_reset ();
}

void Test::MyUnion::_tao_any_destructor (void *_tao_void_pointer)
{
  MyUnion *tmp =
    static_cast<MyUnion *> (_tao_void_pointer);
  delete tmp;
}

Test::MyUnion &
Test::MyUnion::operator= (const ::Test::MyUnion &u)
{
  if (&u == this)
    {
      return *this;
    }
  
  this->_reset ();
  this->disc_ = u.disc_;

  switch (this->disc_)
  {
    case Test::STRUCTTYPE:
    {
      this->u_.fooData_ = u.u_.fooData_;
    }
    break;
    case Test::VALTYPE:
    {
      if (u.u_.barData_ == 0)
        {
          this->u_.barData_ = 0;
        }
      else
        {
          typedef Test::Bar_var OBJECT_FIELD;
          ::CORBA::add_ref (u.u_.barData_->ptr ());
          ACE_NEW_RETURN (
              this->u_.barData_,
              OBJECT_FIELD (u.u_.barData_->in ()),
              *this
            );
        }
    }
    break;
    default:
    break;
  }
  
  return *this;
}

/// Reset method to reset old values of a union.
void Test::MyUnion::_reset (void)
{
  switch (this->disc_)
  {
    
    case Test::STRUCTTYPE:
      
    break;
    
    case Test::VALTYPE:
      delete this->u_.barData_;
      this->u_.barData_ = 0;
      
    break;
    
    default:
    break;
  }
}

// TAO_IDL - Generated from
// be/be_visitor_typecode/union_typecode.cpp:65

static TAO::TypeCode::Case_T<Test::Selector, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_Test_MyUnion__0 (Test::STRUCTTYPE, "fooData", &Test::_tc_Foo);
static TAO::TypeCode::Case_T<Test::Selector, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_Test_MyUnion__1 (Test::VALTYPE, "barData", &Test::_tc_Bar);

static TAO::TypeCode::Case<char const *, ::CORBA::TypeCode_ptr const *> const * const _tao_cases_Test_MyUnion[] =
  {
    &_tao_cases_Test_MyUnion__0,
    &_tao_cases_Test_MyUnion__1
  };

static TAO::TypeCode::Union<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::TypeCode::Case<char const *, ::CORBA::TypeCode_ptr const *> const * const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_Test_MyUnion (
    "IDL:Test/MyUnion:1.0",
    "MyUnion",
    &Test::_tc_Selector,
    _tao_cases_Test_MyUnion,
    sizeof (_tao_cases_Test_MyUnion)/sizeof (_tao_cases_Test_MyUnion[0]),
    -1);
  

namespace Test
{
  ::CORBA::TypeCode_ptr const _tc_MyUnion =
    &_tao_tc_Test_MyUnion;
}

// TAO_IDL - Generated from
// be/be_visitor_valuetype/valuetype_obv_cs.cpp:44

OBV_Test::Bar::Bar (void)
: require_truncation_ (false)
{}

OBV_Test::Bar::Bar (
    ::CORBA::Short _tao_init_s)
: require_truncation_ (false)
{
  s (_tao_init_s);
}

OBV_Test::Bar::~Bar (void)
{}

::CORBA::ValueBase *
OBV_Test::Bar::_copy_value (void)
{
  ::CORBA::ValueBase *ret_val = 0;
  ACE_NEW_THROW_EX (
    ret_val,
    Bar (
      s ()
    ),
    ::CORBA::NO_MEMORY ()
  );
  return ret_val;
}

::CORBA::Boolean
OBV_Test::Bar::_tao_marshal__Test_Bar (TAO_OutputCDR &strm, TAO_ChunkInfo& ci) const
{
  return _tao_marshal_state (strm, ci);
}

::CORBA::Boolean
OBV_Test::Bar::_tao_unmarshal__Test_Bar (TAO_InputCDR &strm, TAO_ChunkInfo& ci)
{
  return _tao_unmarshal_state (strm, ci);
}

// TAO_IDL - Generated from
// be/be_visitor_valuetype/field_cs.cpp:587

/// Accessor to set the member.
void
OBV_Test::Bar::s (const CORBA::Short val)
{
  // Set the value.
  this->_pd_s = val;
}

// Retrieve the member
::CORBA::Short
OBV_Test::Bar::s (void) const
{
  return this->_pd_s;
}

// TAO_IDL - Generated from
// be/be_visitor_enum/any_op_cs.cpp:35

TAO_BEGIN_VERSIONED_NAMESPACE_DECL


TAO_END_VERSIONED_NAMESPACE_DECL



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace Test
{
  void operator<<= (
      ::CORBA::Any &_tao_any,
      ::Test::Selector _tao_elem
    )
  {
    TAO::Any_Basic_Impl_T< ::Test::Selector>::insert (
        _tao_any,
        ::Test::_tc_Selector,
        _tao_elem
      );
  }

  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      ::Test::Selector &_tao_elem
    )
  {
    return
      TAO::Any_Basic_Impl_T< ::Test::Selector>::extract (
          _tao_any,
          ::Test::_tc_Selector,
          _tao_elem 
        );
  }
}

#else

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

void operator<<= (
    ::CORBA::Any &_tao_any,
    Test::Selector _tao_elem
  )
{
  TAO::Any_Basic_Impl_T<Test::Selector>::insert (
      _tao_any,
      Test::_tc_Selector,
      _tao_elem
    );
}

::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    Test::Selector &_tao_elem
  )
{
  return
    TAO::Any_Basic_Impl_T<Test::Selector>::extract (
        _tao_any,
        Test::_tc_Selector,
        _tao_elem 
      );
}
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_structure/any_op_cs.cpp:43



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace Test
{
  /// Copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      const ::Test::Foo &_tao_elem)
  {
    TAO::Any_Dual_Impl_T< ::Test::Foo>::insert_copy (
        _tao_any,
        ::Test::Foo::_tao_any_destructor,
        ::Test::_tc_Foo,
        _tao_elem);
}

/// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any, ::
    Test::Foo *_tao_elem)
{
  TAO::Any_Dual_Impl_T< ::Test::Foo>::insert (
      _tao_any,
      ::Test::Foo::_tao_any_destructor,
      ::Test::_tc_Foo,
      _tao_elem);
}

/// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    ::Test::Foo *&_tao_elem)
{
  return _tao_any >>= const_cast<
      const ::Test::Foo *&> (
      _tao_elem);
}

/// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const ::Test::Foo *&_tao_elem)
{
  return
    TAO::Any_Dual_Impl_T< ::Test::Foo>::extract (
        _tao_any,
        ::Test::Foo::_tao_any_destructor,
        ::Test::_tc_Foo,
        _tao_elem
      );
}
}

#else

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

/// Copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  const Test::Foo &_tao_elem)
{
  TAO::Any_Dual_Impl_T<Test::Foo>::insert_copy (
    _tao_any,
    Test::Foo::_tao_any_destructor,
    Test::_tc_Foo,
    _tao_elem);
}

/// Non-copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  Test::Foo *_tao_elem)
{
  TAO::Any_Dual_Impl_T<Test::Foo>::insert (
    _tao_any,
    Test::Foo::_tao_any_destructor,
    Test::_tc_Foo,
    _tao_elem);
}

/// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
  const ::CORBA::Any &_tao_any,
  Test::Foo *&_tao_elem)
{
  return _tao_any >>= const_cast<
      const Test::Foo *&> (
      _tao_elem);
}

/// Extraction to const pointer.
::CORBA::Boolean operator>>= (
  const ::CORBA::Any &_tao_any,
  const Test::Foo *&_tao_elem)
{
  return
    TAO::Any_Dual_Impl_T<Test::Foo>::extract (
      _tao_any,
      Test::Foo::_tao_any_destructor,
      Test::_tc_Foo,
      _tao_elem);
}
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_valuetype/any_op_cs.cpp:45
TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<Test::Bar>::to_value (
      ::CORBA::ValueBase *&_tao_elem
    ) const
  {
    ::CORBA::add_ref (this->value_);
    _tao_elem = this->value_;
    return true;
  }
}


TAO_END_VERSIONED_NAMESPACE_DECL



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace Test
{
  // Copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      Bar *_tao_elem
    )
  {
    #ifdef TAO_VALUETYPE_COPYING_ANY_INSERTION_USES_COPY_VALUE
      Bar *_tao_copy =
        _tao_elem ?
          Bar::_downcast (_tao_elem->_copy_value ())
          : 0;
      _tao_any <<= &_tao_copy;
    #else
      ::CORBA::add_ref (_tao_elem);
      _tao_any <<= &_tao_elem;
    #endif
  }

  // Non-copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      Bar **_tao_elem
    )
  {
    TAO::Any_Impl_T<Bar>::insert (
        _tao_any,
        Bar::_tao_any_destructor,
        _tc_Bar,
        *_tao_elem
      );
  }

  ::CORBA::Boolean
  operator>>= (
      const ::CORBA::Any &_tao_any,
      Bar *&_tao_elem
    )
  {
    return
      TAO::Any_Impl_T<Bar>::extract (
          _tao_any,
          Bar::_tao_any_destructor,
          _tc_Bar,
          _tao_elem
        );
  }

  
}

#else


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    Test::Bar *_tao_elem
  )
{
  #ifdef TAO_VALUETYPE_COPYING_ANY_INSERTION_USES_COPY_VALUE
    Test::Bar *_tao_copy =
      _tao_elem ?
        Test::Bar::_downcast (_tao_elem->_copy_value ())
        : 0;
    _tao_any <<= &_tao_copy;
  #else
    ::CORBA::add_ref (_tao_elem);
    _tao_any <<= &_tao_elem;
  #endif
}

// Non-copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    Test::Bar **_tao_elem
  )
{
  TAO::Any_Impl_T<Test::Bar>::insert (
      _tao_any,
      Test::Bar::_tao_any_destructor,
      Test::_tc_Bar,
      *_tao_elem
    );
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    Test::Bar *&_tao_elem
  )
{
  return
    TAO::Any_Impl_T<Test::Bar>::extract (
        _tao_any,
        Test::Bar::_tao_any_destructor,
        Test::_tc_Bar,
        _tao_elem
      );
}


TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_union/any_op_cs.cpp:37


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


TAO_END_VERSIONED_NAMESPACE_DECL



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace Test
{
  // Copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      const ::Test::MyUnion &_tao_elem
    )
  {
    TAO::Any_Dual_Impl_T< ::Test::MyUnion>::insert_copy (
        _tao_any,
        ::Test::MyUnion::_tao_any_destructor,
        ::Test::_tc_MyUnion,
        _tao_elem
      );
}

// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    ::Test::MyUnion *_tao_elem
  )
{
  TAO::Any_Dual_Impl_T< ::Test::MyUnion>::insert (
      _tao_any,
      ::Test::MyUnion::_tao_any_destructor,
      ::Test::_tc_MyUnion,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    ::Test::MyUnion *&_tao_elem
  )
{
  return _tao_any >>= const_cast<
      const ::Test::MyUnion *&> (
      _tao_elem
    );
}

// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const ::Test::MyUnion *&_tao_elem
  )
{
  return
    TAO::Any_Dual_Impl_T< ::Test::MyUnion>::extract (
        _tao_any,
        ::Test::MyUnion::_tao_any_destructor,
        ::Test::_tc_MyUnion,
        _tao_elem
      );
}
}

#else

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    const Test::MyUnion &_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<Test::MyUnion>::insert_copy (
      _tao_any,
      Test::MyUnion::_tao_any_destructor,
      Test::_tc_MyUnion,
      _tao_elem
    );
}

// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    Test::MyUnion *_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<Test::MyUnion>::insert (
      _tao_any,
      Test::MyUnion::_tao_any_destructor,
      Test::_tc_MyUnion,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    Test::MyUnion *&_tao_elem
  )
{
  return _tao_any >>= const_cast<
      const Test::MyUnion *&> (
      _tao_elem
    );
}

// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const Test::MyUnion *&_tao_elem
  )
{
  return
    TAO::Any_Dual_Impl_T<Test::MyUnion>::extract (
        _tao_any,
        Test::MyUnion::_tao_any_destructor,
        Test::_tc_MyUnion,
        _tao_elem
      );
}
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_enum/cdr_op_cs.cpp:34


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (TAO_OutputCDR &strm, Test::Selector _tao_enumerator)
{
  return strm << static_cast< ::CORBA::ULong> (_tao_enumerator);
}

::CORBA::Boolean operator>> (TAO_InputCDR &strm, Test::Selector & _tao_enumerator)
{
  ::CORBA::ULong _tao_temp = 0;
  ::CORBA::Boolean const _tao_success = strm >> _tao_temp;
  
  if (_tao_success)
    {
      _tao_enumerator = static_cast<Test::Selector> (_tao_temp);
    }
  
  return _tao_success;
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_structure/cdr_op_cs.cpp:49

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Test::Foo &_tao_aggregate)
{
  return
    (strm << _tao_aggregate.l);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Test::Foo &_tao_aggregate)
{
  return
    (strm >> _tao_aggregate.l);
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_valuetype.cpp:512

void
CORBA::add_ref (Test::Bar * vt)
{
  if (vt != 0)
    {
      vt->_add_ref ();
    }
}

void
CORBA::remove_ref (Test::Bar * vt)
{
  if (vt != 0)
    {
      vt->_remove_ref ();
    }
}

// TAO_IDL - Generated from
// be/be_visitor_valuetype/cdr_op_cs.cpp:60


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean
operator<< (
    TAO_OutputCDR &strm,
    const Test::Bar *_tao_valuetype
  )
{
  return
    ::CORBA::ValueBase::_tao_marshal (
        strm,
        _tao_valuetype,
        reinterpret_cast<ptrdiff_t> (&Test::Bar::_downcast)
      );
}

::CORBA::Boolean
operator>> (
    TAO_InputCDR &strm,
    Test::Bar *&_tao_valuetype
  )
{
  return Test::Bar::_tao_unmarshal (strm, _tao_valuetype);
}


TAO_END_VERSIONED_NAMESPACE_DECL

// TAO_IDL - Generated from
// be/be_visitor_valuetype/marshal_cs.cpp:33

::CORBA::Boolean
OBV_Test::Bar::_tao_marshal_state (TAO_OutputCDR &strm, TAO_ChunkInfo&ci) const
{
  if (! ci.start_chunk (strm))
    return false;
  
  CORBA::Boolean const ret = 
      (strm << _pd_s);
  if ( ! ret) 
    return false; 
  
  if (! ci.end_chunk (strm))
    return false;
  
  return true;
}

::CORBA::Boolean
OBV_Test::Bar::_tao_unmarshal_state (TAO_InputCDR &strm, TAO_ChunkInfo&ci)
{
  if (!ci.handle_chunking (strm))
    return false;
  
  CORBA::Boolean const ret = 
      (strm >> _pd_s);
  if (!ret) 
    return false; 
  
  if (this->require_truncation_)
    return ci.skip_chunks (strm);
  
  else
    return ci.handle_chunking (strm);
  
  
}

void
OBV_Test::Bar::truncation_hook (void)
{
  this->require_truncation_ = true;
}



// TAO_IDL - Generated from
// be/be_visitor_union/cdr_op_cs.cpp:74


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Test::MyUnion &_tao_union
  )
{
  if ( !(strm << _tao_union._d ()) )
    {
      return false;
    }
  
  ::CORBA::Boolean result = true;

  switch (_tao_union._d ())
  {
    case Test::STRUCTTYPE:
      {
        result = strm << _tao_union.fooData ();
      }
      break;
    case Test::VALTYPE:
      {
        result = strm << _tao_union.barData ();
      }
      break;
    default:
      break;
  }

  return result;
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Test::MyUnion &_tao_union
  )
{
  Test::Selector _tao_discriminant;
  if ( !(strm >> _tao_discriminant) )
    {
      return false;
    }
  
  ::CORBA::Boolean result = true;

  switch (_tao_discriminant)
  {
    case Test::STRUCTTYPE:
      {
        Test::Foo _tao_union_tmp;
        result = strm >> _tao_union_tmp;

        if (result)
          {
            _tao_union.fooData (_tao_union_tmp);
            _tao_union._d (_tao_discriminant);
          }
      }
      break;
    case Test::VALTYPE:
      {
        Test::Bar_var _tao_union_tmp;
        result = strm >> _tao_union_tmp.inout ();

        if (result)
          {
            _tao_union.barData (_tao_union_tmp.in ());
            _tao_union._d (_tao_discriminant);
          }
      }
      break;
    default:
      _tao_union._default ();
      // For maximum interop compatibility, force the same value as transmitted
      _tao_union._d (_tao_discriminant);
      break;
  }

  return result;
}

TAO_END_VERSIONED_NAMESPACE_DECL



