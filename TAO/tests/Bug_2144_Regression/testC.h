// -*- C++ -*-
/**
 * Code generated by the The ACE ORB (TAO) IDL Compiler v2.4.1
 * TAO and the TAO IDL Compiler have been developed by:
 *       Center for Distributed Object Computing
 *       Washington University
 *       St. Louis, MO
 *       USA
 *       http://www.cs.wustl.edu/~schmidt/doc-center.html
 * and
 *       Distributed Object Computing Laboratory
 *       University of California at Irvine
 *       Irvine, CA
 *       USA
 * and
 *       Institute for Software Integrated Systems
 *       Vanderbilt University
 *       Nashville, TN
 *       USA
 *       http://www.isis.vanderbilt.edu/
 *
 * Information about TAO is available at:
 *     http://www.dre.vanderbilt.edu/~schmidt/TAO.html
 **/

// TAO_IDL - Generated from
// be/be_codegen.cpp:149

#ifndef _TAO_IDL_TESTC_UMEBDN_H_
#define _TAO_IDL_TESTC_UMEBDN_H_

#include /**/ "ace/pre.h"


#include /**/ "ace/config-all.h"

#if !defined (ACE_LACKS_PRAGMA_ONCE)
# pragma once
#endif /* ACE_LACKS_PRAGMA_ONCE */


#include "tao/AnyTypeCode/AnyTypeCode_methods.h"
#include "tao/AnyTypeCode/Any.h"
#include "tao/Valuetype/ValueBase.h"
#include "tao/Valuetype/Valuetype_Adapter_Factory_Impl.h"
#include "tao/Valuetype/ValueFactory.h"
#include "tao/ORB.h"
#include "tao/SystemException.h"
#include "tao/Basic_Types.h"
#include "tao/ORB_Constants.h"
#include "tao/Valuetype/Value_VarOut_T.h"
#include "tao/VarOut_T.h"
#include "tao/Arg_Traits_T.h"
#include "tao/Basic_Arguments.h"
#include "tao/Special_Basic_Arguments.h"
#include "tao/Any_Insert_Policy_T.h"
#include "tao/Basic_Argument_T.h"
#include "tao/Fixed_Size_Argument_T.h"
#include "tao/Var_Size_Argument_T.h"
#include /**/ "tao/Version.h"
#include /**/ "tao/Versioned_Namespace.h"

#if TAO_MAJOR_VERSION != 2 || TAO_MINOR_VERSION != 4 || TAO_MICRO_VERSION != 1
#error This file should be regenerated with TAO_IDL
#endif

#if defined (TAO_EXPORT_MACRO)
#undef TAO_EXPORT_MACRO
#endif
#define TAO_EXPORT_MACRO 

// TAO_IDL - Generated from
// be/be_visitor_module/module_ch.cpp:35

namespace Test
{

  // TAO_IDL - Generated from
  // be/be_visitor_enum/enum_ch.cpp:44

  enum Selector
  {
    STRUCTTYPE,
    VALTYPE
  };

  typedef Selector &Selector_out;

  // TAO_IDL - Generated from
  // be/be_visitor_typecode/typecode_decl.cpp:34

  extern  ::CORBA::TypeCode_ptr const _tc_Selector;

  // TAO_IDL - Generated from
  // be/be_type.cpp:258

  struct Foo;

  typedef
    ::TAO_Fixed_Var_T<
        Foo
      >
    Foo_var;

  typedef
    Foo &
    Foo_out;

  // TAO_IDL - Generated from
  // be/be_visitor_structure/structure_ch.cpp:48

  struct  Foo
  {

    // TAO_IDL - Generated from
    // be/be_type.cpp:304

    
    typedef Foo_var _var_type;
    typedef Foo_out _out_type;

    static void _tao_any_destructor (void *);
    
    ::CORBA::Long l;
  };

  // TAO_IDL - Generated from
  // be/be_visitor_typecode/typecode_decl.cpp:34

  extern  ::CORBA::TypeCode_ptr const _tc_Foo;

  // TAO_IDL - Generated from
  // be/be_valuetype.cpp:564

  

#if !defined (_TEST_BAR__VAR_OUT_CH_)
#define _TEST_BAR__VAR_OUT_CH_

  class Bar;
  typedef
    TAO_Value_Var_T<
        Bar
      >
    Bar_var;
  
  typedef
    TAO_Value_Out_T<
        Bar
      >
    Bar_out;

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // be/be_visitor_valuetype/valuetype_ch.cpp:50

  class  Bar
    : public virtual ::CORBA::ValueBase
  {
  public:

    // TAO_IDL - Generated from
    // be/be_type.cpp:304

    typedef Bar * _ptr_type;
    typedef Bar_var _var_type;
    typedef Bar_out _out_type;

    static void _tao_any_destructor (void *);

    static Bar* _downcast ( ::CORBA::ValueBase *v);
    
    /// TAO extensions or internals
    static ::CORBA::Boolean _tao_unmarshal (
        TAO_InputCDR &strm,
        Bar *&new_object);
    
    virtual const char* _tao_obv_repository_id (void) const;

    virtual void _tao_obv_truncatable_repo_ids (Repository_Id_List &) const;

    static const char* _tao_obv_static_repository_id (void);

    virtual ::CORBA::TypeCode_ptr _tao_type (void) const;
  
  public:

    // TAO_IDL - Generated from
    // be/be_visitor_valuetype/field_ch.cpp:459

    virtual void s (const ::CORBA::Short) = 0;
    virtual ::CORBA::Short s (void) const = 0;

    // TAO_IDL - Generated from
    // be/be_visitor_valuetype/valuetype_ch.cpp:238
  
  protected:
    Bar (void);
    virtual ~Bar (void);

    virtual ::CORBA::Boolean _tao_marshal_v (TAO_OutputCDR &) const;
    virtual ::CORBA::Boolean _tao_unmarshal_v (TAO_InputCDR &);
    virtual ::CORBA::Boolean _tao_match_formal_type (ptrdiff_t ) const;
    
  private:
    Bar (const Bar &);
    void operator= (const Bar &);
    
  protected:
    virtual ::CORBA::Boolean
    _tao_marshal__Test_Bar (TAO_OutputCDR &, TAO_ChunkInfo &) const = 0;

    virtual ::CORBA::Boolean
    _tao_unmarshal__Test_Bar (TAO_InputCDR &, TAO_ChunkInfo &) = 0;
  };

  // TAO_IDL - Generated from
  // be/be_visitor_valuetype/valuetype_init_ch.cpp:57

  class  Bar_init
    : public virtual ::CORBA::ValueFactoryBase
  {
  public:
    Bar_init (void);

    static Bar_init* _downcast ( ::CORBA::ValueFactoryBase *);

    virtual ::CORBA::ValueBase *
    create_for_unmarshal (void);

    // TAO-specific extensions
  public:
    virtual const char* tao_repository_id (void);
  
  protected:
    virtual ~Bar_init (void);
  };

  // TAO_IDL - Generated from
  // be/be_visitor_typecode/typecode_decl.cpp:34

  extern  ::CORBA::TypeCode_ptr const _tc_Bar;

  // TAO_IDL - Generated from
  // be/be_type.cpp:258

  class MyUnion;

  typedef
    ::TAO_Var_Var_T<
        MyUnion
      >
    MyUnion_var;

  typedef
    ::TAO_Out_T<
        MyUnion
      >
    MyUnion_out;

  class  MyUnion
  {
  public:
    MyUnion (void);
    MyUnion (const MyUnion &);
    ~MyUnion (void);

    MyUnion &operator= (const MyUnion &);

    // TAO_IDL - Generated from
    // be/be_visitor_union/discriminant_ch.cpp:67

    void _d (Test::Selector);
    Test::Selector _d (void) const;

    // TAO_IDL - Generated from
    // be/be_type.cpp:304

    
    typedef MyUnion_var _var_type;
    typedef MyUnion_out _out_type;

    static void _tao_any_destructor (void *);

    // TAO_IDL - Generated from
    // be/be_visitor_union_branch/public_ch.cpp:656

    void fooData (const Test::Foo &);
    const Test::Foo &fooData (void) const;
    Test::Foo &fooData (void);

    // TAO_IDL - Generated from
    // be/be_visitor_union_branch/public_ch.cpp:362

    void barData (Test::Bar*);
    Test::Bar* barData (void) const;

    // TAO_IDL - Generated from
    // be/be_visitor_union/union_ch.cpp:121

    void _default (void);
  private:
    Test::Selector disc_;

    union
    {
      // TAO_IDL - Generated from
      // be/be_visitor_union_branch/private_ch.cpp:519
      Test::Foo fooData_;
      // TAO_IDL - Generated from
      // be/be_visitor_union_branch/private_ch.cpp:296
      Test::Bar_var *barData_;
    } u_;

    /// TAO extension - frees any allocated storage.
    void _reset (void);
  };

  // TAO_IDL - Generated from
  // be/be_visitor_typecode/typecode_decl.cpp:34

  extern  ::CORBA::TypeCode_ptr const _tc_MyUnion;

// TAO_IDL - Generated from
// be/be_visitor_module/module_ch.cpp:64

} // module Test

// TAO_IDL - Generated from
// be/be_visitor_arg_traits.cpp:66

TAO_BEGIN_VERSIONED_NAMESPACE_DECL


// Arg traits specializations.
namespace TAO
{

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:902

  template<>
  class Arg_Traits< ::Test::Selector>
    : public
        Basic_Arg_Traits_T<
            ::Test::Selector,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:945

  template<>
  class Arg_Traits< ::Test::Foo>
    : public
        Fixed_Size_Arg_Traits_T<
            ::Test::Foo,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:306

#if !defined (_TEST_BAR__ARG_TRAITS_)
#define _TEST_BAR__ARG_TRAITS_

  template<>
  class Arg_Traits< ::Test::Bar>
    : public
        Object_Arg_Traits_T<
            ::Test::Bar *,
            ::Test::Bar_var,
            ::Test::Bar_out,
            TAO::Value_Traits<Test::Bar>,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:1056

  template<>
  class Arg_Traits< ::Test::MyUnion>
    : public
        Var_Size_Arg_Traits_T<
            ::Test::MyUnion,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_valuetype/obv_module.cpp:44

namespace OBV_Test
{

  // TAO_IDL - Generated from
  // be/be_visitor_valuetype/valuetype_obv_ch.cpp:44

  // OBV_ class
  class  Bar
    : public virtual Test::Bar,
      public virtual ::CORBA::DefaultValueRefCountBase
  {

public:

  // TAO_IDL - Generated from
  // be/be_visitor_valuetype/field_ch.cpp:459

  virtual void s (const ::CORBA::Short);
  virtual ::CORBA::Short s (void) const;

public:
  Bar (void);
  Bar (
      ::CORBA::Short _tao_init_s
    );
  virtual ~Bar (void);

public:
  virtual ::CORBA::ValueBase *_copy_value (void);
  
protected:
  virtual ::CORBA::Boolean
  _tao_marshal__Test_Bar (TAO_OutputCDR &, TAO_ChunkInfo &) const;

  virtual ::CORBA::Boolean
  _tao_unmarshal__Test_Bar (TAO_InputCDR &, TAO_ChunkInfo &);

  ::CORBA::Boolean _tao_marshal_state (TAO_OutputCDR &, TAO_ChunkInfo &) const;
  ::CORBA::Boolean _tao_unmarshal_state (TAO_InputCDR &, TAO_ChunkInfo &);
  virtual void truncation_hook (void);

private:
  ::CORBA::Short _pd_s;
  CORBA::Boolean require_truncation_;
};
}

// TAO_IDL - Generated from
// be/be_visitor_traits.cpp:60

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Traits specializations.
namespace TAO
{

#if !defined (_TEST_BAR__TRAITS_)
#define _TEST_BAR__TRAITS_

  template<>
  struct  Value_Traits<Test::Bar>
  {
    static void add_ref (Test::Bar *);
    static void remove_ref (Test::Bar *);
    static void release (Test::Bar *);
  };

#endif /* end #if !defined */
}
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_enum/any_op_ch.cpp:36

#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace Test
{
  

   void operator<<= (::CORBA::Any &, ::Test::Selector);
   ::CORBA::Boolean operator>>= (const ::CORBA::Any &, ::Test::Selector &);
}

#else


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



 void operator<<= (::CORBA::Any &, Test::Selector);
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, Test::Selector &);
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_structure/any_op_ch.cpp:42



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace Test
{
   void operator<<= (::CORBA::Any &, const ::Test::Foo &); // copying version
   void operator<<= (::CORBA::Any &, ::Test::Foo*); // noncopying version
   ::CORBA::Boolean operator>>= (const ::CORBA::Any &, ::Test::Foo *&); // deprecated
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const ::Test::Foo *&);
}

#else


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 void operator<<= (::CORBA::Any &, const Test::Foo &); // copying version
 void operator<<= (::CORBA::Any &, Test::Foo*); // noncopying version
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, Test::Foo *&); // deprecated
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const Test::Foo *&);
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_valuetype/any_op_ch.cpp:43



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace Test
{
   void operator<<= ( ::CORBA::Any &, Bar *); // copying
   void operator<<= ( ::CORBA::Any &, Bar **); // non-copying
   ::CORBA::Boolean operator>>= (const ::CORBA::Any &, Bar *&);
}

#else


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 void operator<<= (::CORBA::Any &, Test::Bar *); // copying
 void operator<<= (::CORBA::Any &, Test::Bar **); // non-copying
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, Test::Bar *&);
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_union/any_op_ch.cpp:37



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace Test
{
   void operator<<= (::CORBA::Any &, const ::Test::MyUnion &); // copying version
   void operator<<= (::CORBA::Any &, ::Test::MyUnion*); // noncopying version
   ::CORBA::Boolean operator>>= (const ::CORBA::Any &, ::Test::MyUnion *&); // deprecated
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const ::Test::MyUnion *&);
}

#else


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 void operator<<= (::CORBA::Any &, const Test::MyUnion &); // copying version
 void operator<<= (::CORBA::Any &, Test::MyUnion*); // noncopying version
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, Test::MyUnion *&); // deprecated
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const Test::MyUnion *&);
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_enum/cdr_op_ch.cpp:34


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 ::CORBA::Boolean operator<< (TAO_OutputCDR &strm, Test::Selector _tao_enumerator);
 ::CORBA::Boolean operator>> (TAO_InputCDR &strm, Test::Selector &_tao_enumerator);

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_structure/cdr_op_ch.cpp:43


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 ::CORBA::Boolean operator<< (TAO_OutputCDR &, const Test::Foo &);
 ::CORBA::Boolean operator>> (TAO_InputCDR &, Test::Foo &);

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_valuetype.cpp:456


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

namespace CORBA
{
  extern  void add_ref (Test::Bar *);
  extern  void remove_ref (Test::Bar *);
}
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_valuetype/cdr_op_ch.cpp:49


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 ::CORBA::Boolean operator<< (TAO_OutputCDR &, const Test::Bar *);
 ::CORBA::Boolean operator>> (TAO_InputCDR &, Test::Bar *&);

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_union/cdr_op_ch.cpp:38


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 ::CORBA::Boolean operator<< (TAO_OutputCDR &, const Test::MyUnion &);
 ::CORBA::Boolean operator>> (TAO_InputCDR &, Test::MyUnion &);

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_codegen.cpp:1700
#if defined (__ACE_INLINE__)
#include "testC.inl"
#endif /* defined INLINE */

#include /**/ "ace/post.h"

#endif /* ifndef */

