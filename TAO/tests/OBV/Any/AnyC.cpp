// -*- C++ -*-
/**
 * Code generated by the The ACE ORB (TAO) IDL Compiler v2.4.1
 * TAO and the TAO IDL Compiler have been developed by:
 *       Center for Distributed Object Computing
 *       Washington University
 *       St. Louis, MO
 *       USA
 *       http://www.cs.wustl.edu/~schmidt/doc-center.html
 * and
 *       Distributed Object Computing Laboratory
 *       University of California at Irvine
 *       Irvine, CA
 *       USA
 * and
 *       Institute for Software Integrated Systems
 *       Vanderbilt University
 *       Nashville, TN
 *       USA
 *       http://www.isis.vanderbilt.edu/
 *
 * Information about TAO is available at:
 *     http://www.dre.vanderbilt.edu/~schmidt/TAO.html
 **/

// TAO_IDL - Generated from
// be/be_codegen.cpp:373


#include "AnyC.h"
#include "tao/AnyTypeCode/Null_RefCount_Policy.h"
#include "tao/AnyTypeCode/TypeCode_Constants.h"
#include "tao/AnyTypeCode/Alias_TypeCode_Static.h"
#include "tao/AnyTypeCode/Objref_TypeCode_Static.h"
#include "tao/AnyTypeCode/Value_TypeCode_Static.h"
#include "tao/AnyTypeCode/TypeCode_Value_Field.h"
#include "tao/CDR.h"
#include "tao/Exception_Data.h"
#include "tao/Invocation_Adapter.h"
#include "tao/Object_T.h"
#include "tao/CDR.h"
#include "tao/AnyTypeCode/Any.h"
#include "tao/AnyTypeCode/Any_Impl_T.h"
#include "ace/OS_NS_string.h"

#if !defined (__ACE_INLINE__)
#include "AnyC.inl"
#endif /* !defined INLINE */

// TAO_IDL - Generated from
// be/be_visitor_typecode/value_typecode.cpp:65

static TAO::TypeCode::Value_Field<char const *, ::CORBA::TypeCode_ptr const *> const * const _tao_fields_OBV_AnyTest_VZ = 0;
static TAO::TypeCode::Value<char const *,
                     ::CORBA::TypeCode_ptr const *,
                     TAO::TypeCode::Value_Field<char const *, ::CORBA::TypeCode_ptr const *> const *,
                     TAO::Null_RefCount_Policy>
  _tao_tc_OBV_AnyTest_VZ (
    ::CORBA::tk_value,
    "IDL:OBV_AnyTest/VZ:1.0",
    "VZ",
    ::CORBA::VM_NONE,
    &::CORBA::_tc_null,
    _tao_fields_OBV_AnyTest_VZ,
    0);
  

namespace OBV_AnyTest
{
  ::CORBA::TypeCode_ptr const _tc_VZ =
    &_tao_tc_OBV_AnyTest_VZ;
}

// TAO_IDL - Generated from
// be/be_visitor_valuetype/valuetype_cs.cpp:53

void
TAO::Value_Traits<OBV_AnyTest::VZ>::add_ref (
    OBV_AnyTest::VZ * p)
{
  ::CORBA::add_ref (p);
}

void
TAO::Value_Traits<OBV_AnyTest::VZ>::remove_ref (
    OBV_AnyTest::VZ * p)
{
  ::CORBA::remove_ref (p);
}

void
TAO::Value_Traits<OBV_AnyTest::VZ>::release (
    OBV_AnyTest::VZ * p)
{
  ::CORBA::remove_ref (p);
}

OBV_AnyTest::VZ *
OBV_AnyTest::VZ::_downcast ( ::CORBA::ValueBase *v)
{
  return dynamic_cast< ::OBV_AnyTest::VZ * > (v);
}

const char *
OBV_AnyTest::VZ::_tao_obv_repository_id (void) const
{
  return this->_tao_obv_static_repository_id ();
}

void
OBV_AnyTest::VZ::_tao_obv_truncatable_repo_ids (Repository_Id_List& ids) const
{
  ids.push_back (this->_tao_obv_static_repository_id ());
}

void
OBV_AnyTest::VZ::_tao_any_destructor (void *_tao_void_pointer)
{
  VZ *_tao_tmp_pointer =
    static_cast<VZ *> (_tao_void_pointer);
  ::CORBA::remove_ref (_tao_tmp_pointer);
}

// TAO extension - the virtual _type method.
::CORBA::TypeCode_ptr OBV_AnyTest::VZ::_tao_type (void) const
{
  return ::OBV_AnyTest::_tc_VZ;
}

OBV_AnyTest::VZ::~VZ (void)
{}

::CORBA::Boolean
OBV_AnyTest::VZ::_tao_marshal_v (TAO_OutputCDR & strm) const
{
  TAO_ChunkInfo ci (this->is_truncatable_ || this->chunking_);
  return this->_tao_marshal__OBV_AnyTest_VZ (strm, ci);
}

::CORBA::Boolean
OBV_AnyTest::VZ::_tao_unmarshal_v (TAO_InputCDR & strm)
{
  TAO_ChunkInfo ci (this->is_truncatable_ || this->chunking_, 1);
  return this->_tao_unmarshal__OBV_AnyTest_VZ (strm,ci);
}

::CORBA::Boolean
OBV_AnyTest::VZ::_tao_match_formal_type (ptrdiff_t formal_type_id) const
{
  return formal_type_id == reinterpret_cast<ptrdiff_t> (OBV_AnyTest::VZ::_downcast);
}

::CORBA::Boolean
OBV_AnyTest::VZ::_tao_unmarshal (
    TAO_InputCDR &strm,
    VZ *&new_object
  )
{
  ::CORBA::ValueBase *base = 0;
  ::CORBA::Boolean is_indirected = false;
  ::CORBA::Boolean is_null_object = false;
  ::CORBA::Boolean const retval =
    ::CORBA::ValueBase::_tao_unmarshal_pre (
        strm,
        base,
        VZ::_tao_obv_static_repository_id (),
        is_null_object,
        is_indirected
      );
  
  ::CORBA::ValueBase_var owner (base);

  if (!retval)
    return false;
  
  if (is_null_object)
    return true;
  
  if (!is_indirected && !base->_tao_unmarshal_v (strm))
    return false;
  
  // Now base must point to the unmarshaled object.
  // Align the pointer to the right subobject.
  new_object = VZ::_downcast (base);
  if (0 == new_object)
    return false;
  
  if (is_indirected)
    new_object->_add_ref ();
  
  owner._retn ();
  return true;
}

// TAO_IDL - Generated from
// be/be_visitor_valuetype/valuetype_init_cs.cpp:73

OBV_AnyTest::VZ_init::VZ_init (void)
{
}

OBV_AnyTest::VZ_init::~VZ_init (void)
{
}

OBV_AnyTest::VZ_init *
OBV_AnyTest::VZ_init::_downcast ( ::CORBA::ValueFactoryBase *v)
{
  return dynamic_cast< ::OBV_AnyTest::VZ_init * > (v);
}

const char*
OBV_AnyTest::VZ_init::tao_repository_id (void)
{
  return ::OBV_AnyTest::VZ::_tao_obv_static_repository_id ();
}

::CORBA::ValueBase *
OBV_AnyTest::VZ_init::create_for_unmarshal (void)
{
  ::CORBA::ValueBase *ret_val = 0;
  ACE_NEW_THROW_EX (
      ret_val,
      OBV_OBV_AnyTest::VZ,
      ::CORBA::NO_MEMORY ()
    );
  return ret_val;
}

// TAO_IDL - Generated from
// be/be_visitor_typecode/value_typecode.cpp:65

static TAO::TypeCode::Value_Field<char const *, ::CORBA::TypeCode_ptr const *> const _tao_fields_OBV_AnyTest_VA[] =
  {
    { "id", &CORBA::_tc_ulong, ::CORBA::PUBLIC_MEMBER }
    
  };
static TAO::TypeCode::Value<char const *,
                     ::CORBA::TypeCode_ptr const *,
                     TAO::TypeCode::Value_Field<char const *, ::CORBA::TypeCode_ptr const *> const *,
                     TAO::Null_RefCount_Policy>
  _tao_tc_OBV_AnyTest_VA (
    ::CORBA::tk_value,
    "IDL:OBV_AnyTest/VA:1.0",
    "VA",
    ::CORBA::VM_NONE,
    &OBV_AnyTest::_tc_VZ,
    _tao_fields_OBV_AnyTest_VA,
    1);
  

namespace OBV_AnyTest
{
  ::CORBA::TypeCode_ptr const _tc_VA =
    &_tao_tc_OBV_AnyTest_VA;
}

// TAO_IDL - Generated from
// be/be_visitor_valuetype/valuetype_cs.cpp:53

void
TAO::Value_Traits<OBV_AnyTest::VA>::add_ref (
    OBV_AnyTest::VA * p)
{
  ::CORBA::add_ref (p);
}

void
TAO::Value_Traits<OBV_AnyTest::VA>::remove_ref (
    OBV_AnyTest::VA * p)
{
  ::CORBA::remove_ref (p);
}

void
TAO::Value_Traits<OBV_AnyTest::VA>::release (
    OBV_AnyTest::VA * p)
{
  ::CORBA::remove_ref (p);
}

OBV_AnyTest::VA *
OBV_AnyTest::VA::_downcast ( ::CORBA::ValueBase *v)
{
  return dynamic_cast< ::OBV_AnyTest::VA * > (v);
}

const char *
OBV_AnyTest::VA::_tao_obv_repository_id (void) const
{
  return this->_tao_obv_static_repository_id ();
}

void
OBV_AnyTest::VA::_tao_obv_truncatable_repo_ids (Repository_Id_List& ids) const
{
  ids.push_back (this->_tao_obv_static_repository_id ());
}

void
OBV_AnyTest::VA::_tao_any_destructor (void *_tao_void_pointer)
{
  VA *_tao_tmp_pointer =
    static_cast<VA *> (_tao_void_pointer);
  ::CORBA::remove_ref (_tao_tmp_pointer);
}

// TAO extension - the virtual _type method.
::CORBA::TypeCode_ptr OBV_AnyTest::VA::_tao_type (void) const
{
  return ::OBV_AnyTest::_tc_VA;
}

OBV_AnyTest::VA::~VA (void)
{}

::CORBA::Boolean
OBV_AnyTest::VA::_tao_marshal_v (TAO_OutputCDR & strm) const
{
  TAO_ChunkInfo ci (this->is_truncatable_ || this->chunking_);
  return this->_tao_marshal__OBV_AnyTest_VA (strm, ci);
}

::CORBA::Boolean
OBV_AnyTest::VA::_tao_unmarshal_v (TAO_InputCDR & strm)
{
  TAO_ChunkInfo ci (this->is_truncatable_ || this->chunking_, 1);
  return this->_tao_unmarshal__OBV_AnyTest_VA (strm,ci);
}

::CORBA::Boolean
OBV_AnyTest::VA::_tao_match_formal_type (ptrdiff_t formal_type_id) const
{
  return formal_type_id == reinterpret_cast<ptrdiff_t> (OBV_AnyTest::VA::_downcast);
}

::CORBA::Boolean
OBV_AnyTest::VA::_tao_unmarshal (
    TAO_InputCDR &strm,
    VA *&new_object
  )
{
  ::CORBA::ValueBase *base = 0;
  ::CORBA::Boolean is_indirected = false;
  ::CORBA::Boolean is_null_object = false;
  ::CORBA::Boolean const retval =
    ::CORBA::ValueBase::_tao_unmarshal_pre (
        strm,
        base,
        VA::_tao_obv_static_repository_id (),
        is_null_object,
        is_indirected
      );
  
  ::CORBA::ValueBase_var owner (base);

  if (!retval)
    return false;
  
  if (is_null_object)
    return true;
  
  if (!is_indirected && !base->_tao_unmarshal_v (strm))
    return false;
  
  // Now base must point to the unmarshaled object.
  // Align the pointer to the right subobject.
  new_object = VA::_downcast (base);
  if (0 == new_object)
    return false;
  
  if (is_indirected)
    new_object->_add_ref ();
  
  owner._retn ();
  return true;
}

// TAO_IDL - Generated from
// be/be_visitor_valuetype/valuetype_init_cs.cpp:73

OBV_AnyTest::VA_init::VA_init (void)
{
}

OBV_AnyTest::VA_init::~VA_init (void)
{
}

OBV_AnyTest::VA_init *
OBV_AnyTest::VA_init::_downcast ( ::CORBA::ValueFactoryBase *v)
{
  return dynamic_cast< ::OBV_AnyTest::VA_init * > (v);
}

const char*
OBV_AnyTest::VA_init::tao_repository_id (void)
{
  return ::OBV_AnyTest::VA::_tao_obv_static_repository_id ();
}

::CORBA::ValueBase *
OBV_AnyTest::VA_init::create_for_unmarshal (void)
{
  ::CORBA::ValueBase *ret_val = 0;
  ACE_NEW_THROW_EX (
      ret_val,
      OBV_OBV_AnyTest::VA,
      ::CORBA::NO_MEMORY ()
    );
  return ret_val;
}

// TAO_IDL - Generated from
// be/be_visitor_typecode/value_typecode.cpp:65

static TAO::TypeCode::Value_Field<char const *, ::CORBA::TypeCode_ptr const *> const * const _tao_fields_OBV_AnyTest_VB = 0;
static TAO::TypeCode::Value<char const *,
                     ::CORBA::TypeCode_ptr const *,
                     TAO::TypeCode::Value_Field<char const *, ::CORBA::TypeCode_ptr const *> const *,
                     TAO::Null_RefCount_Policy>
  _tao_tc_OBV_AnyTest_VB (
    ::CORBA::tk_value,
    "IDL:OBV_AnyTest/VB:1.0",
    "VB",
    ::CORBA::VM_NONE,
    &OBV_AnyTest::_tc_VA,
    _tao_fields_OBV_AnyTest_VB,
    0);
  

namespace OBV_AnyTest
{
  ::CORBA::TypeCode_ptr const _tc_VB =
    &_tao_tc_OBV_AnyTest_VB;
}

// TAO_IDL - Generated from
// be/be_visitor_valuetype/valuetype_cs.cpp:53

void
TAO::Value_Traits<OBV_AnyTest::VB>::add_ref (
    OBV_AnyTest::VB * p)
{
  ::CORBA::add_ref (p);
}

void
TAO::Value_Traits<OBV_AnyTest::VB>::remove_ref (
    OBV_AnyTest::VB * p)
{
  ::CORBA::remove_ref (p);
}

void
TAO::Value_Traits<OBV_AnyTest::VB>::release (
    OBV_AnyTest::VB * p)
{
  ::CORBA::remove_ref (p);
}

OBV_AnyTest::VB *
OBV_AnyTest::VB::_downcast ( ::CORBA::ValueBase *v)
{
  return dynamic_cast< ::OBV_AnyTest::VB * > (v);
}

const char *
OBV_AnyTest::VB::_tao_obv_repository_id (void) const
{
  return this->_tao_obv_static_repository_id ();
}

void
OBV_AnyTest::VB::_tao_obv_truncatable_repo_ids (Repository_Id_List& ids) const
{
  ids.push_back (this->_tao_obv_static_repository_id ());
}

void
OBV_AnyTest::VB::_tao_any_destructor (void *_tao_void_pointer)
{
  VB *_tao_tmp_pointer =
    static_cast<VB *> (_tao_void_pointer);
  ::CORBA::remove_ref (_tao_tmp_pointer);
}

// TAO extension - the virtual _type method.
::CORBA::TypeCode_ptr OBV_AnyTest::VB::_tao_type (void) const
{
  return ::OBV_AnyTest::_tc_VB;
}

OBV_AnyTest::VB::~VB (void)
{}

::CORBA::Boolean
OBV_AnyTest::VB::_tao_marshal_v (TAO_OutputCDR & strm) const
{
  TAO_ChunkInfo ci (this->is_truncatable_ || this->chunking_);
  return this->_tao_marshal__OBV_AnyTest_VB (strm, ci);
}

::CORBA::Boolean
OBV_AnyTest::VB::_tao_unmarshal_v (TAO_InputCDR & strm)
{
  TAO_ChunkInfo ci (this->is_truncatable_ || this->chunking_, 1);
  return this->_tao_unmarshal__OBV_AnyTest_VB (strm,ci);
}

::CORBA::Boolean
OBV_AnyTest::VB::_tao_match_formal_type (ptrdiff_t formal_type_id) const
{
  return formal_type_id == reinterpret_cast<ptrdiff_t> (OBV_AnyTest::VB::_downcast);
}

::CORBA::Boolean
OBV_AnyTest::VB::_tao_unmarshal (
    TAO_InputCDR &strm,
    VB *&new_object
  )
{
  ::CORBA::ValueBase *base = 0;
  ::CORBA::Boolean is_indirected = false;
  ::CORBA::Boolean is_null_object = false;
  ::CORBA::Boolean const retval =
    ::CORBA::ValueBase::_tao_unmarshal_pre (
        strm,
        base,
        VB::_tao_obv_static_repository_id (),
        is_null_object,
        is_indirected
      );
  
  ::CORBA::ValueBase_var owner (base);

  if (!retval)
    return false;
  
  if (is_null_object)
    return true;
  
  if (!is_indirected && !base->_tao_unmarshal_v (strm))
    return false;
  
  // Now base must point to the unmarshaled object.
  // Align the pointer to the right subobject.
  new_object = VB::_downcast (base);
  if (0 == new_object)
    return false;
  
  if (is_indirected)
    new_object->_add_ref ();
  
  owner._retn ();
  return true;
}

// TAO_IDL - Generated from
// be/be_visitor_valuetype/valuetype_init_cs.cpp:73

OBV_AnyTest::VB_init::VB_init (void)
{
}

OBV_AnyTest::VB_init::~VB_init (void)
{
}

OBV_AnyTest::VB_init *
OBV_AnyTest::VB_init::_downcast ( ::CORBA::ValueFactoryBase *v)
{
  return dynamic_cast< ::OBV_AnyTest::VB_init * > (v);
}

const char*
OBV_AnyTest::VB_init::tao_repository_id (void)
{
  return ::OBV_AnyTest::VB::_tao_obv_static_repository_id ();
}

::CORBA::ValueBase *
OBV_AnyTest::VB_init::create_for_unmarshal (void)
{
  ::CORBA::ValueBase *ret_val = 0;
  ACE_NEW_THROW_EX (
      ret_val,
      OBV_OBV_AnyTest::VB,
      ::CORBA::NO_MEMORY ()
    );
  return ret_val;
}

// TAO_IDL - Generated from
// be/be_visitor_interface/interface_cs.cpp:48

// Traits specializations for OBV_AnyTest::Test.

OBV_AnyTest::Test_ptr
TAO::Objref_Traits<OBV_AnyTest::Test>::duplicate (
    OBV_AnyTest::Test_ptr p)
{
  return OBV_AnyTest::Test::_duplicate (p);
}

void
TAO::Objref_Traits<OBV_AnyTest::Test>::release (
    OBV_AnyTest::Test_ptr p)
{
  ::CORBA::release (p);
}

OBV_AnyTest::Test_ptr
TAO::Objref_Traits<OBV_AnyTest::Test>::nil (void)
{
  return OBV_AnyTest::Test::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<OBV_AnyTest::Test>::marshal (
    const OBV_AnyTest::Test_ptr p,
    TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:88

::CORBA::Any *
OBV_AnyTest::Test::get_something (
  ::CORBA::Boolean need_vb)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  TAO::Arg_Traits< ::CORBA::Any>::ret_val _tao_retval;
  TAO::Arg_Traits< ::ACE_InputCDR::to_boolean>::in_arg_val _tao_need_vb (need_vb);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_need_vb
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      2,
      "get_something",
      13,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY
      
    );

  _tao_call.invoke (0, 0);

  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:88

::OBV_AnyTest::VB *
OBV_AnyTest::Test::get_vb (
  void)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  TAO::Arg_Traits< ::OBV_AnyTest::VB>::ret_val _tao_retval;

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      1,
      "get_vb",
      6,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY,
      TAO::TAO_TWOWAY_INVOCATION
      ,
      TAO::TAO_SYNCHRONOUS_INVOCATION,
      false
    );

  _tao_call.invoke (0, 0);

  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:88

void
OBV_AnyTest::Test::shutdown (
  void)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  TAO::Arg_Traits< void>::ret_val _tao_retval;

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      1,
      "shutdown",
      8,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY,
      TAO::TAO_ONEWAY_INVOCATION,
      TAO::TAO_SYNCHRONOUS_INVOCATION,
      false
    );

  _tao_call.invoke (0, 0);
}

OBV_AnyTest::Test::Test (void)
{
}

OBV_AnyTest::Test::~Test (void)
{
}

void
OBV_AnyTest::Test::_tao_any_destructor (void *_tao_void_pointer)
{
  Test *_tao_tmp_pointer =
    static_cast<Test *> (_tao_void_pointer);
  ::CORBA::release (_tao_tmp_pointer);
}

OBV_AnyTest::Test_ptr
OBV_AnyTest::Test::_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return
    TAO::Narrow_Utils<Test>::narrow (
        _tao_objref,
        "IDL:OBV_AnyTest/Test:1.0");
}

OBV_AnyTest::Test_ptr
OBV_AnyTest::Test::_unchecked_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return
    TAO::Narrow_Utils<Test>::unchecked_narrow (
        _tao_objref);
}

OBV_AnyTest::Test_ptr
OBV_AnyTest::Test::_nil (void)
{
  return 0;
}

OBV_AnyTest::Test_ptr
OBV_AnyTest::Test::_duplicate (Test_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  return obj;
}

void
OBV_AnyTest::Test::_tao_release (Test_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
OBV_AnyTest::Test::_is_a (const char *value)
{
  if (
      ACE_OS::strcmp (
          value,
          "IDL:OBV_AnyTest/Test:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        ) == 0
    )
    {
      return true; // success using local knowledge
    }
  else
    {
      return this->::CORBA::Object::_is_a (value);
    }
}

const char* OBV_AnyTest::Test::_interface_repository_id (void) const
{
  return "IDL:OBV_AnyTest/Test:1.0";
}

::CORBA::Boolean
OBV_AnyTest::Test::marshal (TAO_OutputCDR &cdr)
{
  return (cdr << this);
}

// TAO_IDL - Generated from
// be/be_visitor_typecode/objref_typecode.cpp:70

static TAO::TypeCode::Objref<char const *,
                             TAO::Null_RefCount_Policy>
  _tao_tc_OBV_AnyTest_Test (
    ::CORBA::tk_objref,
    "IDL:OBV_AnyTest/Test:1.0",
    "Test");
  

namespace OBV_AnyTest
{
  ::CORBA::TypeCode_ptr const _tc_Test =
    &_tao_tc_OBV_AnyTest_Test;
}

// TAO_IDL - Generated from
// be/be_visitor_valuetype/valuetype_obv_cs.cpp:44

OBV_OBV_AnyTest::VZ::VZ (void)
: require_truncation_ (false)
{}

OBV_OBV_AnyTest::VZ::~VZ (void)
{}

::CORBA::ValueBase *
OBV_OBV_AnyTest::VZ::_copy_value (void)
{
  ::CORBA::ValueBase *ret_val = 0;
  ACE_NEW_THROW_EX (
    ret_val,
    VZ (),
    ::CORBA::NO_MEMORY ()
  );
  return ret_val;
}

::CORBA::Boolean
OBV_OBV_AnyTest::VZ::_tao_marshal__OBV_AnyTest_VZ (TAO_OutputCDR &strm, TAO_ChunkInfo& ci) const
{
  return _tao_marshal_state (strm, ci);
}

::CORBA::Boolean
OBV_OBV_AnyTest::VZ::_tao_unmarshal__OBV_AnyTest_VZ (TAO_InputCDR &strm, TAO_ChunkInfo& ci)
{
  return _tao_unmarshal_state (strm, ci);
}

// TAO_IDL - Generated from
// be/be_visitor_valuetype/valuetype_obv_cs.cpp:44

OBV_OBV_AnyTest::VA::VA (void)
: require_truncation_ (false)
{}

OBV_OBV_AnyTest::VA::VA (
    ::CORBA::ULong _tao_init_id)
: require_truncation_ (false)
{
  id (_tao_init_id);
}

OBV_OBV_AnyTest::VA::~VA (void)
{}

::CORBA::Boolean
OBV_OBV_AnyTest::VA::_tao_marshal__OBV_AnyTest_VA (TAO_OutputCDR &strm, TAO_ChunkInfo& ci) const
{
  return _tao_marshal_state (strm, ci);
}

::CORBA::Boolean
OBV_OBV_AnyTest::VA::_tao_unmarshal__OBV_AnyTest_VA (TAO_InputCDR &strm, TAO_ChunkInfo& ci)
{
  return _tao_unmarshal_state (strm, ci);
}

// TAO_IDL - Generated from
// be/be_visitor_valuetype/field_cs.cpp:587

/// Accessor to set the member.
void
OBV_OBV_AnyTest::VA::id (const CORBA::ULong val)
{
  // Set the value.
  this->_pd_id = val;
}

// Retrieve the member
::CORBA::ULong
OBV_OBV_AnyTest::VA::id (void) const
{
  return this->_pd_id;
}

// TAO_IDL - Generated from
// be/be_visitor_valuetype/valuetype_obv_cs.cpp:44

OBV_OBV_AnyTest::VB::VB (void)
: require_truncation_ (false)
{}

OBV_OBV_AnyTest::VB::VB (
    ::CORBA::ULong _tao_init_id)
: require_truncation_ (false)
{
  id (_tao_init_id);
}

OBV_OBV_AnyTest::VB::~VB (void)
{}

::CORBA::Boolean
OBV_OBV_AnyTest::VB::_tao_marshal__OBV_AnyTest_VB (TAO_OutputCDR &strm, TAO_ChunkInfo& ci) const
{
  return _tao_marshal_state (strm, ci);
}

::CORBA::Boolean
OBV_OBV_AnyTest::VB::_tao_unmarshal__OBV_AnyTest_VB (TAO_InputCDR &strm, TAO_ChunkInfo& ci)
{
  return _tao_unmarshal_state (strm, ci);
}

// TAO_IDL - Generated from
// be/be_visitor_valuetype/any_op_cs.cpp:45
TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<OBV_AnyTest::VZ>::to_value (
      ::CORBA::ValueBase *&_tao_elem
    ) const
  {
    ::CORBA::add_ref (this->value_);
    _tao_elem = this->value_;
    return true;
  }
}


TAO_END_VERSIONED_NAMESPACE_DECL



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace OBV_AnyTest
{
  // Copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      VZ *_tao_elem
    )
  {
    #ifdef TAO_VALUETYPE_COPYING_ANY_INSERTION_USES_COPY_VALUE
      VZ *_tao_copy =
        _tao_elem ?
          VZ::_downcast (_tao_elem->_copy_value ())
          : 0;
      _tao_any <<= &_tao_copy;
    #else
      ::CORBA::add_ref (_tao_elem);
      _tao_any <<= &_tao_elem;
    #endif
  }

  // Non-copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      VZ **_tao_elem
    )
  {
    TAO::Any_Impl_T<VZ>::insert (
        _tao_any,
        VZ::_tao_any_destructor,
        _tc_VZ,
        *_tao_elem
      );
  }

  ::CORBA::Boolean
  operator>>= (
      const ::CORBA::Any &_tao_any,
      VZ *&_tao_elem
    )
  {
    return
      TAO::Any_Impl_T<VZ>::extract (
          _tao_any,
          VZ::_tao_any_destructor,
          _tc_VZ,
          _tao_elem
        );
  }

  
}

#else


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    OBV_AnyTest::VZ *_tao_elem
  )
{
  #ifdef TAO_VALUETYPE_COPYING_ANY_INSERTION_USES_COPY_VALUE
    OBV_AnyTest::VZ *_tao_copy =
      _tao_elem ?
        OBV_AnyTest::VZ::_downcast (_tao_elem->_copy_value ())
        : 0;
    _tao_any <<= &_tao_copy;
  #else
    ::CORBA::add_ref (_tao_elem);
    _tao_any <<= &_tao_elem;
  #endif
}

// Non-copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    OBV_AnyTest::VZ **_tao_elem
  )
{
  TAO::Any_Impl_T<OBV_AnyTest::VZ>::insert (
      _tao_any,
      OBV_AnyTest::VZ::_tao_any_destructor,
      OBV_AnyTest::_tc_VZ,
      *_tao_elem
    );
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    OBV_AnyTest::VZ *&_tao_elem
  )
{
  return
    TAO::Any_Impl_T<OBV_AnyTest::VZ>::extract (
        _tao_any,
        OBV_AnyTest::VZ::_tao_any_destructor,
        OBV_AnyTest::_tc_VZ,
        _tao_elem
      );
}


TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_valuetype/any_op_cs.cpp:45
TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<OBV_AnyTest::VA>::to_value (
      ::CORBA::ValueBase *&_tao_elem
    ) const
  {
    ::CORBA::add_ref (this->value_);
    _tao_elem = this->value_;
    return true;
  }
}


TAO_END_VERSIONED_NAMESPACE_DECL



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace OBV_AnyTest
{
  // Copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      VA *_tao_elem
    )
  {
    #ifdef TAO_VALUETYPE_COPYING_ANY_INSERTION_USES_COPY_VALUE
      VA *_tao_copy =
        _tao_elem ?
          VA::_downcast (_tao_elem->_copy_value ())
          : 0;
      _tao_any <<= &_tao_copy;
    #else
      ::CORBA::add_ref (_tao_elem);
      _tao_any <<= &_tao_elem;
    #endif
  }

  // Non-copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      VA **_tao_elem
    )
  {
    TAO::Any_Impl_T<VA>::insert (
        _tao_any,
        VA::_tao_any_destructor,
        _tc_VA,
        *_tao_elem
      );
  }

  ::CORBA::Boolean
  operator>>= (
      const ::CORBA::Any &_tao_any,
      VA *&_tao_elem
    )
  {
    return
      TAO::Any_Impl_T<VA>::extract (
          _tao_any,
          VA::_tao_any_destructor,
          _tc_VA,
          _tao_elem
        );
  }

  
}

#else


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    OBV_AnyTest::VA *_tao_elem
  )
{
  #ifdef TAO_VALUETYPE_COPYING_ANY_INSERTION_USES_COPY_VALUE
    OBV_AnyTest::VA *_tao_copy =
      _tao_elem ?
        OBV_AnyTest::VA::_downcast (_tao_elem->_copy_value ())
        : 0;
    _tao_any <<= &_tao_copy;
  #else
    ::CORBA::add_ref (_tao_elem);
    _tao_any <<= &_tao_elem;
  #endif
}

// Non-copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    OBV_AnyTest::VA **_tao_elem
  )
{
  TAO::Any_Impl_T<OBV_AnyTest::VA>::insert (
      _tao_any,
      OBV_AnyTest::VA::_tao_any_destructor,
      OBV_AnyTest::_tc_VA,
      *_tao_elem
    );
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    OBV_AnyTest::VA *&_tao_elem
  )
{
  return
    TAO::Any_Impl_T<OBV_AnyTest::VA>::extract (
        _tao_any,
        OBV_AnyTest::VA::_tao_any_destructor,
        OBV_AnyTest::_tc_VA,
        _tao_elem
      );
}


TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_valuetype/any_op_cs.cpp:45
TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<OBV_AnyTest::VB>::to_value (
      ::CORBA::ValueBase *&_tao_elem
    ) const
  {
    ::CORBA::add_ref (this->value_);
    _tao_elem = this->value_;
    return true;
  }
}


TAO_END_VERSIONED_NAMESPACE_DECL



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace OBV_AnyTest
{
  // Copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      VB *_tao_elem
    )
  {
    #ifdef TAO_VALUETYPE_COPYING_ANY_INSERTION_USES_COPY_VALUE
      VB *_tao_copy =
        _tao_elem ?
          VB::_downcast (_tao_elem->_copy_value ())
          : 0;
      _tao_any <<= &_tao_copy;
    #else
      ::CORBA::add_ref (_tao_elem);
      _tao_any <<= &_tao_elem;
    #endif
  }

  // Non-copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      VB **_tao_elem
    )
  {
    TAO::Any_Impl_T<VB>::insert (
        _tao_any,
        VB::_tao_any_destructor,
        _tc_VB,
        *_tao_elem
      );
  }

  ::CORBA::Boolean
  operator>>= (
      const ::CORBA::Any &_tao_any,
      VB *&_tao_elem
    )
  {
    return
      TAO::Any_Impl_T<VB>::extract (
          _tao_any,
          VB::_tao_any_destructor,
          _tc_VB,
          _tao_elem
        );
  }

  
}

#else


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    OBV_AnyTest::VB *_tao_elem
  )
{
  #ifdef TAO_VALUETYPE_COPYING_ANY_INSERTION_USES_COPY_VALUE
    OBV_AnyTest::VB *_tao_copy =
      _tao_elem ?
        OBV_AnyTest::VB::_downcast (_tao_elem->_copy_value ())
        : 0;
    _tao_any <<= &_tao_copy;
  #else
    ::CORBA::add_ref (_tao_elem);
    _tao_any <<= &_tao_elem;
  #endif
}

// Non-copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    OBV_AnyTest::VB **_tao_elem
  )
{
  TAO::Any_Impl_T<OBV_AnyTest::VB>::insert (
      _tao_any,
      OBV_AnyTest::VB::_tao_any_destructor,
      OBV_AnyTest::_tc_VB,
      *_tao_elem
    );
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    OBV_AnyTest::VB *&_tao_elem
  )
{
  return
    TAO::Any_Impl_T<OBV_AnyTest::VB>::extract (
        _tao_any,
        OBV_AnyTest::VB::_tao_any_destructor,
        OBV_AnyTest::_tc_VB,
        _tao_elem
      );
}


TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_interface/any_op_cs.cpp:38
TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<OBV_AnyTest::Test>::to_object (
      ::CORBA::Object_ptr &_tao_elem) const
  {
    _tao_elem = ::CORBA::Object::_duplicate (this->value_);
    return true;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace OBV_AnyTest
{
  

  /// Copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      Test_ptr _tao_elem)
  {
    Test_ptr _tao_objptr =
      Test::_duplicate (_tao_elem);
    _tao_any <<= &_tao_objptr;
  }

  /// Non-copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      Test_ptr *_tao_elem)
  {
    TAO::Any_Impl_T<Test>::insert (
        _tao_any,
        Test::_tao_any_destructor,
        _tc_Test,
        *_tao_elem);
  }

  ::CORBA::Boolean
  operator>>= (
      const ::CORBA::Any &_tao_any,
      Test_ptr &_tao_elem)
  {
    return
      TAO::Any_Impl_T<Test>::extract (
          _tao_any,
          Test::_tao_any_destructor,
          _tc_Test,
          _tao_elem);
  }
}

#else

TAO_BEGIN_VERSIONED_NAMESPACE_DECL



/// Copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    OBV_AnyTest::Test_ptr _tao_elem)
{
  OBV_AnyTest::Test_ptr _tao_objptr =
    OBV_AnyTest::Test::_duplicate (_tao_elem);
  _tao_any <<= &_tao_objptr;
}

/// Non-copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    OBV_AnyTest::Test_ptr *_tao_elem)
{
  TAO::Any_Impl_T<OBV_AnyTest::Test>::insert (
      _tao_any,
      OBV_AnyTest::Test::_tao_any_destructor,
      OBV_AnyTest::_tc_Test,
      *_tao_elem);
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    OBV_AnyTest::Test_ptr &_tao_elem)
{
  return
    TAO::Any_Impl_T<OBV_AnyTest::Test>::extract (
        _tao_any,
        OBV_AnyTest::Test::_tao_any_destructor,
        OBV_AnyTest::_tc_Test,
        _tao_elem);
}

TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_valuetype.cpp:512

void
CORBA::add_ref (OBV_AnyTest::VZ * vt)
{
  if (vt != 0)
    {
      vt->_add_ref ();
    }
}

void
CORBA::remove_ref (OBV_AnyTest::VZ * vt)
{
  if (vt != 0)
    {
      vt->_remove_ref ();
    }
}

// TAO_IDL - Generated from
// be/be_visitor_valuetype/cdr_op_cs.cpp:60


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean
operator<< (
    TAO_OutputCDR &strm,
    const OBV_AnyTest::VZ *_tao_valuetype
  )
{
  return
    ::CORBA::ValueBase::_tao_marshal (
        strm,
        _tao_valuetype,
        reinterpret_cast<ptrdiff_t> (&OBV_AnyTest::VZ::_downcast)
      );
}

::CORBA::Boolean
operator>> (
    TAO_InputCDR &strm,
    OBV_AnyTest::VZ *&_tao_valuetype
  )
{
  return OBV_AnyTest::VZ::_tao_unmarshal (strm, _tao_valuetype);
}


TAO_END_VERSIONED_NAMESPACE_DECL

// TAO_IDL - Generated from
// be/be_visitor_valuetype/marshal_cs.cpp:33

::CORBA::Boolean
OBV_OBV_AnyTest::VZ::_tao_marshal_state (TAO_OutputCDR &, TAO_ChunkInfo&) const
{
  return true;
}

::CORBA::Boolean
OBV_OBV_AnyTest::VZ::_tao_unmarshal_state (TAO_InputCDR &, TAO_ChunkInfo&)
{
  return true;
}

void
OBV_OBV_AnyTest::VZ::truncation_hook (void)
{
  this->require_truncation_ = true;
}



// TAO_IDL - Generated from
// be/be_valuetype.cpp:512

void
CORBA::add_ref (OBV_AnyTest::VA * vt)
{
  if (vt != 0)
    {
      vt->_add_ref ();
    }
}

void
CORBA::remove_ref (OBV_AnyTest::VA * vt)
{
  if (vt != 0)
    {
      vt->_remove_ref ();
    }
}

// TAO_IDL - Generated from
// be/be_visitor_valuetype/cdr_op_cs.cpp:60


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean
operator<< (
    TAO_OutputCDR &strm,
    const OBV_AnyTest::VA *_tao_valuetype
  )
{
  return
    ::CORBA::ValueBase::_tao_marshal (
        strm,
        _tao_valuetype,
        reinterpret_cast<ptrdiff_t> (&OBV_AnyTest::VA::_downcast)
      );
}

::CORBA::Boolean
operator>> (
    TAO_InputCDR &strm,
    OBV_AnyTest::VA *&_tao_valuetype
  )
{
  return OBV_AnyTest::VA::_tao_unmarshal (strm, _tao_valuetype);
}


TAO_END_VERSIONED_NAMESPACE_DECL

// TAO_IDL - Generated from
// be/be_visitor_valuetype/marshal_cs.cpp:33

::CORBA::Boolean
OBV_OBV_AnyTest::VA::_tao_marshal_state (TAO_OutputCDR &strm, TAO_ChunkInfo&ci) const
{
  if (! ci.start_chunk (strm))
    return false;
  
  if (! this->_tao_marshal__OBV_AnyTest_VZ (strm, ci))
    {
      return false;
    }
  
  if (! ci.start_chunk (strm))
    return false;
  
  CORBA::Boolean const ret = 
      (strm << _pd_id);
  if ( ! ret) 
    return false; 
  
  if (! ci.end_chunk (strm))
    return false;
  
  if (! ci.end_chunk (strm))
    return false;
  
  return true;
}

::CORBA::Boolean
OBV_OBV_AnyTest::VA::_tao_unmarshal_state (TAO_InputCDR &strm, TAO_ChunkInfo&ci)
{
  if (!ci.handle_chunking (strm))
    return false;
  
  if (!this->_tao_unmarshal__OBV_AnyTest_VZ (strm, ci))
    {
      return false;
    }
  
  if (!ci.handle_chunking (strm))
    return false;
  
  CORBA::Boolean const ret = 
      (strm >> _pd_id);
  if (!ret) 
    return false; 
  
  if (this->require_truncation_)
    return ci.skip_chunks (strm);
  
  else
    return ci.handle_chunking (strm);
  
  
}

void
OBV_OBV_AnyTest::VA::truncation_hook (void)
{
  this->require_truncation_ = true;
}



// TAO_IDL - Generated from
// be/be_valuetype.cpp:512

void
CORBA::add_ref (OBV_AnyTest::VB * vt)
{
  if (vt != 0)
    {
      vt->_add_ref ();
    }
}

void
CORBA::remove_ref (OBV_AnyTest::VB * vt)
{
  if (vt != 0)
    {
      vt->_remove_ref ();
    }
}

// TAO_IDL - Generated from
// be/be_visitor_valuetype/cdr_op_cs.cpp:60


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean
operator<< (
    TAO_OutputCDR &strm,
    const OBV_AnyTest::VB *_tao_valuetype
  )
{
  return
    ::CORBA::ValueBase::_tao_marshal (
        strm,
        _tao_valuetype,
        reinterpret_cast<ptrdiff_t> (&OBV_AnyTest::VB::_downcast)
      );
}

::CORBA::Boolean
operator>> (
    TAO_InputCDR &strm,
    OBV_AnyTest::VB *&_tao_valuetype
  )
{
  return OBV_AnyTest::VB::_tao_unmarshal (strm, _tao_valuetype);
}


TAO_END_VERSIONED_NAMESPACE_DECL

// TAO_IDL - Generated from
// be/be_visitor_valuetype/marshal_cs.cpp:33

::CORBA::Boolean
OBV_OBV_AnyTest::VB::_tao_marshal_state (TAO_OutputCDR &strm, TAO_ChunkInfo&ci) const
{
  if (! ci.start_chunk (strm))
    return false;
  
  if (! this->_tao_marshal__OBV_AnyTest_VA (strm, ci))
    {
      return false;
    }
  
  if (! ci.end_chunk (strm))
    return false;
  
  return true;
}

::CORBA::Boolean
OBV_OBV_AnyTest::VB::_tao_unmarshal_state (TAO_InputCDR &strm, TAO_ChunkInfo&ci)
{
  if (!ci.handle_chunking (strm))
    return false;
  
  if (!this->_tao_unmarshal__OBV_AnyTest_VA (strm, ci))
    {
      return false;
    }
  
  return true;
}

void
OBV_OBV_AnyTest::VB::truncation_hook (void)
{
  this->require_truncation_ = true;
}



// TAO_IDL - Generated from
// be/be_visitor_interface/cdr_op_cs.cpp:51

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const OBV_AnyTest::Test_ptr _tao_objref)
{
  ::CORBA::Object_ptr _tao_corba_obj = _tao_objref;
  return (strm << _tao_corba_obj);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    OBV_AnyTest::Test_ptr &_tao_objref)
{
  ::CORBA::Object_var obj;

  if (!(strm >> obj.inout ()))
    {
      return false;
    }
  
  typedef ::OBV_AnyTest::Test RHS_SCOPED_NAME;

  // Narrow to the right type.
  _tao_objref =
    TAO::Narrow_Utils<RHS_SCOPED_NAME>::unchecked_narrow (obj.in ());
    
  return true;
}

TAO_END_VERSIONED_NAMESPACE_DECL



