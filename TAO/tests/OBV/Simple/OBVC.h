// -*- C++ -*-
/**
 * Code generated by the The ACE ORB (TAO) IDL Compiler v2.4.1
 * TAO and the TAO IDL Compiler have been developed by:
 *       Center for Distributed Object Computing
 *       Washington University
 *       St. Louis, MO
 *       USA
 *       http://www.cs.wustl.edu/~schmidt/doc-center.html
 * and
 *       Distributed Object Computing Laboratory
 *       University of California at Irvine
 *       Irvine, CA
 *       USA
 * and
 *       Institute for Software Integrated Systems
 *       Vanderbilt University
 *       Nashville, TN
 *       USA
 *       http://www.isis.vanderbilt.edu/
 *
 * Information about TAO is available at:
 *     http://www.dre.vanderbilt.edu/~schmidt/TAO.html
 **/

// TAO_IDL - Generated from
// be/be_codegen.cpp:149

#ifndef _TAO_IDL_OBVC_8QAT02_H_
#define _TAO_IDL_OBVC_8QAT02_H_

#include /**/ "ace/pre.h"


#include /**/ "ace/config-all.h"

#if !defined (ACE_LACKS_PRAGMA_ONCE)
# pragma once
#endif /* ACE_LACKS_PRAGMA_ONCE */


#include "tao/AnyTypeCode/AnyTypeCode_methods.h"
#include "tao/AnyTypeCode/Any.h"
#include "tao/Valuetype/ValueBase.h"
#include "tao/Valuetype/Valuetype_Adapter_Factory_Impl.h"
#include "tao/ORB.h"
#include "tao/SystemException.h"
#include "tao/Basic_Types.h"
#include "tao/ORB_Constants.h"
#include "tao/Object.h"
#include "tao/Valuetype/Value_VarOut_T.h"
#include "tao/Objref_VarOut_T.h"
#include "tao/Arg_Traits_T.h"
#include "tao/Basic_Arguments.h"
#include "tao/Special_Basic_Arguments.h"
#include "tao/Any_Insert_Policy_T.h"
#include "tao/Fixed_Size_Argument_T.h"
#include "tao/Var_Size_Argument_T.h"
#include "tao/Object_Argument_T.h"
#include /**/ "tao/Version.h"
#include /**/ "tao/Versioned_Namespace.h"

#if TAO_MAJOR_VERSION != 2 || TAO_MINOR_VERSION != 4 || TAO_MICRO_VERSION != 1
#error This file should be regenerated with TAO_IDL
#endif

#if defined (TAO_EXPORT_MACRO)
#undef TAO_EXPORT_MACRO
#endif
#define TAO_EXPORT_MACRO 

// TAO_IDL - Generated from
// be/be_visitor_root/root_ch.cpp:157
TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<typename T> class Narrow_Utils;
}
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_valuetype.cpp:564



#if !defined (_EVENT__VAR_OUT_CH_)
#define _EVENT__VAR_OUT_CH_

class Event;
typedef
  TAO_Value_Var_T<
      Event
    >
  Event_var;

typedef
  TAO_Value_Out_T<
      Event
    >
  Event_out;

#endif /* end #if !defined */

// TAO_IDL - Generated from
// be/be_visitor_valuetype/valuetype_ch.cpp:50

class  Event
  : public virtual ::CORBA::ValueBase
{
public:

  // TAO_IDL - Generated from
  // be/be_type.cpp:304

  typedef Event * _ptr_type;
  typedef Event_var _var_type;
  typedef Event_out _out_type;

  static Event* _downcast ( ::CORBA::ValueBase *v);
  
  /// TAO extensions or internals
  static ::CORBA::Boolean _tao_unmarshal (
      TAO_InputCDR &strm,
      Event *&new_object);
  
  virtual const char* _tao_obv_repository_id (void) const;

  virtual void _tao_obv_truncatable_repo_ids (Repository_Id_List &) const;

  static const char* _tao_obv_static_repository_id (void);

  virtual ::CORBA::TypeCode_ptr _tao_type (void) const;

public:

  // TAO_IDL - Generated from
  // be/be_visitor_valuetype/valuetype_ch.cpp:396
  
public:
  virtual void do_print (void) = 0;

public:

  // TAO_IDL - Generated from
  // be/be_visitor_valuetype/field_ch.cpp:459

  virtual void value_ (const ::CORBA::Long) = 0;
  virtual ::CORBA::Long value_ (void) const = 0;

  // TAO_IDL - Generated from
  // be/be_visitor_valuetype/valuetype_ch.cpp:238

protected:
  Event (void);
  virtual ~Event (void);

  virtual ::CORBA::Boolean _tao_marshal_v (TAO_OutputCDR &) const;
  virtual ::CORBA::Boolean _tao_unmarshal_v (TAO_InputCDR &);
  virtual ::CORBA::Boolean _tao_match_formal_type (ptrdiff_t ) const;
  
private:
  Event (const Event &);
  void operator= (const Event &);
  
protected:
  virtual ::CORBA::Boolean
  _tao_marshal__Event (TAO_OutputCDR &, TAO_ChunkInfo &) const = 0;

  virtual ::CORBA::Boolean
  _tao_unmarshal__Event (TAO_InputCDR &, TAO_ChunkInfo &) = 0;
};

// TAO_IDL - Generated from
// be/be_visitor_typecode/typecode_decl.cpp:34

extern  ::CORBA::TypeCode_ptr const _tc_Event;

// TAO_IDL - Generated from
// be/be_interface.cpp:748

#if !defined (_CHECKPOINT__VAR_OUT_CH_)
#define _CHECKPOINT__VAR_OUT_CH_

class Checkpoint;
typedef Checkpoint *Checkpoint_ptr;

typedef
  TAO_Objref_Var_T<
      Checkpoint
    >
  Checkpoint_var;

typedef
  TAO_Objref_Out_T<
      Checkpoint
    >
  Checkpoint_out;

#endif /* end #if !defined */

// TAO_IDL - Generated from
// be/be_visitor_interface/interface_ch.cpp:40

class  Checkpoint
  : public virtual ::CORBA::Object
{
public:
  friend class TAO::Narrow_Utils<Checkpoint>;

  // TAO_IDL - Generated from
  // be/be_type.cpp:304

  typedef Checkpoint_ptr _ptr_type;
  typedef Checkpoint_var _var_type;
  typedef Checkpoint_out _out_type;

  // The static operations.
  static Checkpoint_ptr _duplicate (Checkpoint_ptr obj);

  static void _tao_release (Checkpoint_ptr obj);

  static Checkpoint_ptr _narrow (::CORBA::Object_ptr obj);
  static Checkpoint_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
  static Checkpoint_ptr _nil (void);

  virtual void put_event (
    ::Event * e);

  virtual void shutdown (
    void);

  // TAO_IDL - Generated from
  // be/be_visitor_interface/interface_ch.cpp:137

  virtual ::CORBA::Boolean _is_a (const char *type_id);
  virtual const char* _interface_repository_id (void) const;
  virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);

protected:
  // Concrete interface only.
  Checkpoint (void);

  // Concrete non-local interface only.
  Checkpoint (
      ::IOP::IOR *ior,
      TAO_ORB_Core *orb_core);
  
  // Non-local interface only.
  Checkpoint (
      TAO_Stub *objref,
      ::CORBA::Boolean _tao_collocated = false,
      TAO_Abstract_ServantBase *servant = 0,
      TAO_ORB_Core *orb_core = 0);

  virtual ~Checkpoint (void);

private:
  // Private and unimplemented for concrete interfaces.
  Checkpoint (const Checkpoint &);

  void operator= (const Checkpoint &);
};

// TAO_IDL - Generated from
// be/be_visitor_typecode/typecode_decl.cpp:34

extern  ::CORBA::TypeCode_ptr const _tc_Checkpoint;

// TAO_IDL - Generated from
// be/be_visitor_arg_traits.cpp:66

TAO_BEGIN_VERSIONED_NAMESPACE_DECL


// Arg traits specializations.
namespace TAO
{

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:306

#if !defined (_EVENT__ARG_TRAITS_)
#define _EVENT__ARG_TRAITS_

  template<>
  class Arg_Traits< ::Event>
    : public
        Object_Arg_Traits_T<
            ::Event *,
            ::Event_var,
            ::Event_out,
            TAO::Value_Traits<Event>,
            TAO::Any_Insert_Policy_Noop
          >
  {
  };

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:145

#if !defined (_CHECKPOINT__ARG_TRAITS_)
#define _CHECKPOINT__ARG_TRAITS_

  template<>
  class  Arg_Traits< ::Checkpoint>
    : public
        Object_Arg_Traits_T<
            ::Checkpoint_ptr,
            ::Checkpoint_var,
            ::Checkpoint_out,
            TAO::Objref_Traits<Checkpoint>,
            TAO::Any_Insert_Policy_Noop
          >
  {
  };

#endif /* end #if !defined */
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_valuetype/valuetype_obv_ch.cpp:44

// OBV_ class
class  OBV_Event
  : public virtual Event
{

public:

  // TAO_IDL - Generated from
  // be/be_visitor_valuetype/field_ch.cpp:459

  virtual void value_ (const ::CORBA::Long);
  virtual ::CORBA::Long value_ (void) const;

protected:
  OBV_Event (void);
  OBV_Event (
      ::CORBA::Long _tao_init_value_
    );
  virtual ~OBV_Event (void);
  
protected:
  virtual ::CORBA::Boolean
  _tao_marshal__Event (TAO_OutputCDR &, TAO_ChunkInfo &) const;

  virtual ::CORBA::Boolean
  _tao_unmarshal__Event (TAO_InputCDR &, TAO_ChunkInfo &);

  ::CORBA::Boolean _tao_marshal_state (TAO_OutputCDR &, TAO_ChunkInfo &) const;
  ::CORBA::Boolean _tao_unmarshal_state (TAO_InputCDR &, TAO_ChunkInfo &);
  virtual void truncation_hook (void);

private:
  ::CORBA::Long _pd_value_;
  CORBA::Boolean require_truncation_;
};

// TAO_IDL - Generated from
// be/be_visitor_traits.cpp:60

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Traits specializations.
namespace TAO
{

#if !defined (_EVENT__TRAITS_)
#define _EVENT__TRAITS_

  template<>
  struct  Value_Traits<Event>
  {
    static void add_ref (Event *);
    static void remove_ref (Event *);
    static void release (Event *);
  };

#endif /* end #if !defined */

#if !defined (_CHECKPOINT__TRAITS_)
#define _CHECKPOINT__TRAITS_

  template<>
  struct  Objref_Traits< ::Checkpoint>
  {
    static ::Checkpoint_ptr duplicate (
        ::Checkpoint_ptr p);
    static void release (
        ::Checkpoint_ptr p);
    static ::Checkpoint_ptr nil (void);
    static ::CORBA::Boolean marshal (
        const ::Checkpoint_ptr p,
        TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */
}
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_valuetype.cpp:456


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

namespace CORBA
{
  extern  void add_ref (Event *);
  extern  void remove_ref (Event *);
}
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_valuetype/cdr_op_ch.cpp:49


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 ::CORBA::Boolean operator<< (TAO_OutputCDR &, const Event *);
 ::CORBA::Boolean operator>> (TAO_InputCDR &, Event *&);

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_interface/cdr_op_ch.cpp:41

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 ::CORBA::Boolean operator<< (TAO_OutputCDR &, const Checkpoint_ptr );
 ::CORBA::Boolean operator>> (TAO_InputCDR &, Checkpoint_ptr &);

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_codegen.cpp:1700
#if defined (__ACE_INLINE__)
#include "OBVC.inl"
#endif /* defined INLINE */

#include /**/ "ace/post.h"

#endif /* ifndef */

