// -*- C++ -*-
/**
 * Code generated by the The ACE ORB (TAO) IDL Compiler v2.4.1
 * TAO and the TAO IDL Compiler have been developed by:
 *       Center for Distributed Object Computing
 *       Washington University
 *       St. Louis, MO
 *       USA
 *       http://www.cs.wustl.edu/~schmidt/doc-center.html
 * and
 *       Distributed Object Computing Laboratory
 *       University of California at Irvine
 *       Irvine, CA
 *       USA
 * and
 *       Institute for Software Integrated Systems
 *       Vanderbilt University
 *       Nashville, TN
 *       USA
 *       http://www.isis.vanderbilt.edu/
 *
 * Information about TAO is available at:
 *     http://www.dre.vanderbilt.edu/~schmidt/TAO.html
 **/

// TAO_IDL - Generated from
// be/be_codegen.cpp:149

#ifndef _TAO_IDL_VB_BASICC_K3MFCH_H_
#define _TAO_IDL_VB_BASICC_K3MFCH_H_

#include /**/ "ace/pre.h"


#include /**/ "ace/config-all.h"

#if !defined (ACE_LACKS_PRAGMA_ONCE)
# pragma once
#endif /* ACE_LACKS_PRAGMA_ONCE */


#include "tao/AnyTypeCode/AnyTypeCode_methods.h"
#include "tao/AnyTypeCode/Any.h"
#include "tao/Valuetype/ValueBase.h"
#include "tao/CDR.h"
#include "tao/Valuetype/Valuetype_Adapter_Factory_Impl.h"
#include "tao/ORB.h"
#include "tao/SystemException.h"
#include "tao/Basic_Types.h"
#include "tao/ORB_Constants.h"
#include "tao/Object.h"
#include "tao/AnyTypeCode/TypeCode.h"
#include "tao/AnyTypeCode/TypeCode_Constants.h"
#include "tao/AnyTypeCode/Any.h"
#include "tao/Valuetype/Value_VarOut_T.h"
#include "tao/Objref_VarOut_T.h"
#include "tao/Arg_Traits_T.h"
#include "tao/Basic_Arguments.h"
#include "tao/Special_Basic_Arguments.h"
#include "tao/Any_Insert_Policy_T.h"
#include "tao/Basic_Argument_T.h"
#include "tao/Fixed_Size_Argument_T.h"
#include "tao/Var_Size_Argument_T.h"
#include "tao/Object_Argument_T.h"
#include /**/ "tao/Version.h"
#include /**/ "tao/Versioned_Namespace.h"

#if TAO_MAJOR_VERSION != 2 || TAO_MINOR_VERSION != 4 || TAO_MICRO_VERSION != 1
#error This file should be regenerated with TAO_IDL
#endif

#if defined (TAO_EXPORT_MACRO)
#undef TAO_EXPORT_MACRO
#endif
#define TAO_EXPORT_MACRO

// TAO_IDL - Generated from
// be/be_visitor_root/root_ch.cpp:157
TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<typename T> class Narrow_Utils;
}
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_enum/enum_ch.cpp:44

enum Color
{
  red,
  orange,
  yellow,
  green,
  blue,
  indigo,
  violet
};

typedef Color &Color_out;

// TAO_IDL - Generated from
// be/be_visitor_typecode/typecode_decl.cpp:34

extern  ::CORBA::TypeCode_ptr const _tc_Color;

// TAO_IDL - Generated from
// be/be_visitor_valuebox/valuebox_ch.cpp:41

class VBshort;

typedef
  TAO_Value_Var_T<
      VBshort
    >
  VBshort_var;

typedef
  TAO_Value_Out_T<
      VBshort
    >
  VBshort_out;

class  VBshort
  : public virtual ::CORBA::DefaultValueRefCountBase
{
public:

  // TAO_IDL - Generated from
  // be/be_type.cpp:304


  typedef VBshort_var _var_type;
  typedef VBshort_out _out_type;

  static void _tao_any_destructor (void *);

  static VBshort* _downcast ( ::CORBA::ValueBase *);
  ::CORBA::ValueBase * _copy_value (void);

  virtual const char* _tao_obv_repository_id (void) const;

  virtual void _tao_obv_truncatable_repo_ids (Repository_Id_List &ids) const;

  static const char* _tao_obv_static_repository_id (void);

  static ::CORBA::Boolean _tao_unmarshal (
      TAO_InputCDR &,
      VBshort *&
    );

  virtual ::CORBA::TypeCode_ptr _tao_type (void) const;



  // TAO_IDL - Generated from
  // be/be_visitor_valuebox/valuebox_ch.cpp:690

  // Constructors
  VBshort (void);
  VBshort (CORBA::Short val);
  VBshort (const VBshort& val);

  // Assignment operator
  VBshort& operator= (CORBA::Short val);

  // Accessor and modifier
  CORBA::Short _value (void) const;
  void _value (CORBA::Short val);

  // Access to the boxed value for method signatures
  CORBA::Short _boxed_in (void) const;
  CORBA::Short& _boxed_inout (void);
  CORBA::Short& _boxed_out (void);

private:
  CORBA::Short _pd_value;


  // TAO_IDL - Generated from
  // be/be_visitor_valuebox/valuebox_ch.cpp:114

protected:
  virtual ~VBshort (void);
  virtual ::CORBA::Boolean _tao_marshal_v (TAO_OutputCDR &) const;
  virtual ::CORBA::Boolean _tao_unmarshal_v (TAO_InputCDR &);
  virtual ::CORBA::Boolean _tao_match_formal_type (ptrdiff_t ) const;

private:
  void operator= (const VBshort & val);

};

// TAO_IDL - Generated from
// be/be_visitor_typecode/typecode_decl.cpp:34

extern  ::CORBA::TypeCode_ptr const _tc_VBshort;

// TAO_IDL - Generated from
// be/be_visitor_valuebox/valuebox_ch.cpp:41

class VBlong;

typedef
  TAO_Value_Var_T<
      VBlong
    >
  VBlong_var;

typedef
  TAO_Value_Out_T<
      VBlong
    >
  VBlong_out;

class  VBlong
  : public virtual ::CORBA::DefaultValueRefCountBase
{
public:

  // TAO_IDL - Generated from
  // be/be_type.cpp:304


  typedef VBlong_var _var_type;
  typedef VBlong_out _out_type;

  static void _tao_any_destructor (void *);

  static VBlong* _downcast ( ::CORBA::ValueBase *);
  ::CORBA::ValueBase * _copy_value (void);

  virtual const char* _tao_obv_repository_id (void) const;

  virtual void _tao_obv_truncatable_repo_ids (Repository_Id_List &ids) const;

  static const char* _tao_obv_static_repository_id (void);

  static ::CORBA::Boolean _tao_unmarshal (
      TAO_InputCDR &,
      VBlong *&
    );

  virtual ::CORBA::TypeCode_ptr _tao_type (void) const;



  // TAO_IDL - Generated from
  // be/be_visitor_valuebox/valuebox_ch.cpp:690

  // Constructors
  VBlong (void);
  VBlong (CORBA::Long val);
  VBlong (const VBlong& val);

  // Assignment operator
  VBlong& operator= (CORBA::Long val);

  // Accessor and modifier
  CORBA::Long _value (void) const;
  void _value (CORBA::Long val);

  // Access to the boxed value for method signatures
  CORBA::Long _boxed_in (void) const;
  CORBA::Long& _boxed_inout (void);
  CORBA::Long& _boxed_out (void);

private:
  CORBA::Long _pd_value;


  // TAO_IDL - Generated from
  // be/be_visitor_valuebox/valuebox_ch.cpp:114

protected:
  virtual ~VBlong (void);
  virtual ::CORBA::Boolean _tao_marshal_v (TAO_OutputCDR &) const;
  virtual ::CORBA::Boolean _tao_unmarshal_v (TAO_InputCDR &);
  virtual ::CORBA::Boolean _tao_match_formal_type (ptrdiff_t ) const;

private:
  void operator= (const VBlong & val);

};

// TAO_IDL - Generated from
// be/be_visitor_typecode/typecode_decl.cpp:34

extern  ::CORBA::TypeCode_ptr const _tc_VBlong;

// TAO_IDL - Generated from
// be/be_visitor_valuebox/valuebox_ch.cpp:41

class VBlonglong;

typedef
  TAO_Value_Var_T<
      VBlonglong
    >
  VBlonglong_var;

typedef
  TAO_Value_Out_T<
      VBlonglong
    >
  VBlonglong_out;

class  VBlonglong
  : public virtual ::CORBA::DefaultValueRefCountBase
{
public:

  // TAO_IDL - Generated from
  // be/be_type.cpp:304


  typedef VBlonglong_var _var_type;
  typedef VBlonglong_out _out_type;

  static void _tao_any_destructor (void *);

  static VBlonglong* _downcast ( ::CORBA::ValueBase *);
  ::CORBA::ValueBase * _copy_value (void);

  virtual const char* _tao_obv_repository_id (void) const;

  virtual void _tao_obv_truncatable_repo_ids (Repository_Id_List &ids) const;

  static const char* _tao_obv_static_repository_id (void);

  static ::CORBA::Boolean _tao_unmarshal (
      TAO_InputCDR &,
      VBlonglong *&
    );

  virtual ::CORBA::TypeCode_ptr _tao_type (void) const;



  // TAO_IDL - Generated from
  // be/be_visitor_valuebox/valuebox_ch.cpp:690

  // Constructors
  VBlonglong (void);
  VBlonglong (CORBA::LongLong val);
  VBlonglong (const VBlonglong& val);

  // Assignment operator
  VBlonglong& operator= (CORBA::LongLong val);

  // Accessor and modifier
  CORBA::LongLong _value (void) const;
  void _value (CORBA::LongLong val);

  // Access to the boxed value for method signatures
  CORBA::LongLong _boxed_in (void) const;
  CORBA::LongLong& _boxed_inout (void);
  CORBA::LongLong& _boxed_out (void);

private:
  CORBA::LongLong _pd_value;


  // TAO_IDL - Generated from
  // be/be_visitor_valuebox/valuebox_ch.cpp:114

protected:
  virtual ~VBlonglong (void);
  virtual ::CORBA::Boolean _tao_marshal_v (TAO_OutputCDR &) const;
  virtual ::CORBA::Boolean _tao_unmarshal_v (TAO_InputCDR &);
  virtual ::CORBA::Boolean _tao_match_formal_type (ptrdiff_t ) const;

private:
  void operator= (const VBlonglong & val);

};

// TAO_IDL - Generated from
// be/be_visitor_typecode/typecode_decl.cpp:34

extern  ::CORBA::TypeCode_ptr const _tc_VBlonglong;

// TAO_IDL - Generated from
// be/be_visitor_valuebox/valuebox_ch.cpp:41

class VBushort;

typedef
  TAO_Value_Var_T<
      VBushort
    >
  VBushort_var;

typedef
  TAO_Value_Out_T<
      VBushort
    >
  VBushort_out;

class  VBushort
  : public virtual ::CORBA::DefaultValueRefCountBase
{
public:

  // TAO_IDL - Generated from
  // be/be_type.cpp:304


  typedef VBushort_var _var_type;
  typedef VBushort_out _out_type;

  static void _tao_any_destructor (void *);

  static VBushort* _downcast ( ::CORBA::ValueBase *);
  ::CORBA::ValueBase * _copy_value (void);

  virtual const char* _tao_obv_repository_id (void) const;

  virtual void _tao_obv_truncatable_repo_ids (Repository_Id_List &ids) const;

  static const char* _tao_obv_static_repository_id (void);

  static ::CORBA::Boolean _tao_unmarshal (
      TAO_InputCDR &,
      VBushort *&
    );

  virtual ::CORBA::TypeCode_ptr _tao_type (void) const;



  // TAO_IDL - Generated from
  // be/be_visitor_valuebox/valuebox_ch.cpp:690

  // Constructors
  VBushort (void);
  VBushort (CORBA::UShort val);
  VBushort (const VBushort& val);

  // Assignment operator
  VBushort& operator= (CORBA::UShort val);

  // Accessor and modifier
  CORBA::UShort _value (void) const;
  void _value (CORBA::UShort val);

  // Access to the boxed value for method signatures
  CORBA::UShort _boxed_in (void) const;
  CORBA::UShort& _boxed_inout (void);
  CORBA::UShort& _boxed_out (void);

private:
  CORBA::UShort _pd_value;


  // TAO_IDL - Generated from
  // be/be_visitor_valuebox/valuebox_ch.cpp:114

protected:
  virtual ~VBushort (void);
  virtual ::CORBA::Boolean _tao_marshal_v (TAO_OutputCDR &) const;
  virtual ::CORBA::Boolean _tao_unmarshal_v (TAO_InputCDR &);
  virtual ::CORBA::Boolean _tao_match_formal_type (ptrdiff_t ) const;

private:
  void operator= (const VBushort & val);

};

// TAO_IDL - Generated from
// be/be_visitor_typecode/typecode_decl.cpp:34

extern  ::CORBA::TypeCode_ptr const _tc_VBushort;

// TAO_IDL - Generated from
// be/be_visitor_valuebox/valuebox_ch.cpp:41

class VBulong;

typedef
  TAO_Value_Var_T<
      VBulong
    >
  VBulong_var;

typedef
  TAO_Value_Out_T<
      VBulong
    >
  VBulong_out;

class  VBulong
  : public virtual ::CORBA::DefaultValueRefCountBase
{
public:

  // TAO_IDL - Generated from
  // be/be_type.cpp:304


  typedef VBulong_var _var_type;
  typedef VBulong_out _out_type;

  static void _tao_any_destructor (void *);

  static VBulong* _downcast ( ::CORBA::ValueBase *);
  ::CORBA::ValueBase * _copy_value (void);

  virtual const char* _tao_obv_repository_id (void) const;

  virtual void _tao_obv_truncatable_repo_ids (Repository_Id_List &ids) const;

  static const char* _tao_obv_static_repository_id (void);

  static ::CORBA::Boolean _tao_unmarshal (
      TAO_InputCDR &,
      VBulong *&
    );

  virtual ::CORBA::TypeCode_ptr _tao_type (void) const;



  // TAO_IDL - Generated from
  // be/be_visitor_valuebox/valuebox_ch.cpp:690

  // Constructors
  VBulong (void);
  VBulong (CORBA::ULong val);
  VBulong (const VBulong& val);

  // Assignment operator
  VBulong& operator= (CORBA::ULong val);

  // Accessor and modifier
  CORBA::ULong _value (void) const;
  void _value (CORBA::ULong val);

  // Access to the boxed value for method signatures
  CORBA::ULong _boxed_in (void) const;
  CORBA::ULong& _boxed_inout (void);
  CORBA::ULong& _boxed_out (void);

private:
  CORBA::ULong _pd_value;


  // TAO_IDL - Generated from
  // be/be_visitor_valuebox/valuebox_ch.cpp:114

protected:
  virtual ~VBulong (void);
  virtual ::CORBA::Boolean _tao_marshal_v (TAO_OutputCDR &) const;
  virtual ::CORBA::Boolean _tao_unmarshal_v (TAO_InputCDR &);
  virtual ::CORBA::Boolean _tao_match_formal_type (ptrdiff_t ) const;

private:
  void operator= (const VBulong & val);

};

// TAO_IDL - Generated from
// be/be_visitor_typecode/typecode_decl.cpp:34

extern  ::CORBA::TypeCode_ptr const _tc_VBulong;

// TAO_IDL - Generated from
// be/be_visitor_valuebox/valuebox_ch.cpp:41

class VBulonglong;

typedef
  TAO_Value_Var_T<
      VBulonglong
    >
  VBulonglong_var;

typedef
  TAO_Value_Out_T<
      VBulonglong
    >
  VBulonglong_out;

class  VBulonglong
  : public virtual ::CORBA::DefaultValueRefCountBase
{
public:

  // TAO_IDL - Generated from
  // be/be_type.cpp:304


  typedef VBulonglong_var _var_type;
  typedef VBulonglong_out _out_type;

  static void _tao_any_destructor (void *);

  static VBulonglong* _downcast ( ::CORBA::ValueBase *);
  ::CORBA::ValueBase * _copy_value (void);

  virtual const char* _tao_obv_repository_id (void) const;

  virtual void _tao_obv_truncatable_repo_ids (Repository_Id_List &ids) const;

  static const char* _tao_obv_static_repository_id (void);

  static ::CORBA::Boolean _tao_unmarshal (
      TAO_InputCDR &,
      VBulonglong *&
    );

  virtual ::CORBA::TypeCode_ptr _tao_type (void) const;



  // TAO_IDL - Generated from
  // be/be_visitor_valuebox/valuebox_ch.cpp:690

  // Constructors
  VBulonglong (void);
  VBulonglong (CORBA::ULongLong val);
  VBulonglong (const VBulonglong& val);

  // Assignment operator
  VBulonglong& operator= (CORBA::ULongLong val);

  // Accessor and modifier
  CORBA::ULongLong _value (void) const;
  void _value (CORBA::ULongLong val);

  // Access to the boxed value for method signatures
  CORBA::ULongLong _boxed_in (void) const;
  CORBA::ULongLong& _boxed_inout (void);
  CORBA::ULongLong& _boxed_out (void);

private:
  CORBA::ULongLong _pd_value;


  // TAO_IDL - Generated from
  // be/be_visitor_valuebox/valuebox_ch.cpp:114

protected:
  virtual ~VBulonglong (void);
  virtual ::CORBA::Boolean _tao_marshal_v (TAO_OutputCDR &) const;
  virtual ::CORBA::Boolean _tao_unmarshal_v (TAO_InputCDR &);
  virtual ::CORBA::Boolean _tao_match_formal_type (ptrdiff_t ) const;

private:
  void operator= (const VBulonglong & val);

};

// TAO_IDL - Generated from
// be/be_visitor_typecode/typecode_decl.cpp:34

extern  ::CORBA::TypeCode_ptr const _tc_VBulonglong;

// TAO_IDL - Generated from
// be/be_visitor_valuebox/valuebox_ch.cpp:41

class VBchar;

typedef
  TAO_Value_Var_T<
      VBchar
    >
  VBchar_var;

typedef
  TAO_Value_Out_T<
      VBchar
    >
  VBchar_out;

class  VBchar
  : public virtual ::CORBA::DefaultValueRefCountBase
{
public:

  // TAO_IDL - Generated from
  // be/be_type.cpp:304


  typedef VBchar_var _var_type;
  typedef VBchar_out _out_type;

  static void _tao_any_destructor (void *);

  static VBchar* _downcast ( ::CORBA::ValueBase *);
  ::CORBA::ValueBase * _copy_value (void);

  virtual const char* _tao_obv_repository_id (void) const;

  virtual void _tao_obv_truncatable_repo_ids (Repository_Id_List &ids) const;

  static const char* _tao_obv_static_repository_id (void);

  static ::CORBA::Boolean _tao_unmarshal (
      TAO_InputCDR &,
      VBchar *&
    );

  virtual ::CORBA::TypeCode_ptr _tao_type (void) const;



  // TAO_IDL - Generated from
  // be/be_visitor_valuebox/valuebox_ch.cpp:690

  // Constructors
  VBchar (void);
  VBchar (CORBA::Char val);
  VBchar (const VBchar& val);

  // Assignment operator
  VBchar& operator= (CORBA::Char val);

  // Accessor and modifier
  CORBA::Char _value (void) const;
  void _value (CORBA::Char val);

  // Access to the boxed value for method signatures
  CORBA::Char _boxed_in (void) const;
  CORBA::Char& _boxed_inout (void);
  CORBA::Char& _boxed_out (void);

private:
  CORBA::Char _pd_value;


  // TAO_IDL - Generated from
  // be/be_visitor_valuebox/valuebox_ch.cpp:114

protected:
  virtual ~VBchar (void);
  virtual ::CORBA::Boolean _tao_marshal_v (TAO_OutputCDR &) const;
  virtual ::CORBA::Boolean _tao_unmarshal_v (TAO_InputCDR &);
  virtual ::CORBA::Boolean _tao_match_formal_type (ptrdiff_t ) const;

private:
  void operator= (const VBchar & val);

};

// TAO_IDL - Generated from
// be/be_visitor_typecode/typecode_decl.cpp:34

extern  ::CORBA::TypeCode_ptr const _tc_VBchar;

// TAO_IDL - Generated from
// be/be_visitor_valuebox/valuebox_ch.cpp:41

class VBwchar;

typedef
  TAO_Value_Var_T<
      VBwchar
    >
  VBwchar_var;

typedef
  TAO_Value_Out_T<
      VBwchar
    >
  VBwchar_out;

class  VBwchar
  : public virtual ::CORBA::DefaultValueRefCountBase
{
public:

  // TAO_IDL - Generated from
  // be/be_type.cpp:304


  typedef VBwchar_var _var_type;
  typedef VBwchar_out _out_type;

  static void _tao_any_destructor (void *);

  static VBwchar* _downcast ( ::CORBA::ValueBase *);
  ::CORBA::ValueBase * _copy_value (void);

  virtual const char* _tao_obv_repository_id (void) const;

  virtual void _tao_obv_truncatable_repo_ids (Repository_Id_List &ids) const;

  static const char* _tao_obv_static_repository_id (void);

  static ::CORBA::Boolean _tao_unmarshal (
      TAO_InputCDR &,
      VBwchar *&
    );

  virtual ::CORBA::TypeCode_ptr _tao_type (void) const;



  // TAO_IDL - Generated from
  // be/be_visitor_valuebox/valuebox_ch.cpp:690

  // Constructors
  VBwchar (void);
  VBwchar (CORBA::WChar val);
  VBwchar (const VBwchar& val);

  // Assignment operator
  VBwchar& operator= (CORBA::WChar val);

  // Accessor and modifier
  CORBA::WChar _value (void) const;
  void _value (CORBA::WChar val);

  // Access to the boxed value for method signatures
  CORBA::WChar _boxed_in (void) const;
  CORBA::WChar& _boxed_inout (void);
  CORBA::WChar& _boxed_out (void);

private:
  CORBA::WChar _pd_value;


  // TAO_IDL - Generated from
  // be/be_visitor_valuebox/valuebox_ch.cpp:114

protected:
  virtual ~VBwchar (void);
  virtual ::CORBA::Boolean _tao_marshal_v (TAO_OutputCDR &) const;
  virtual ::CORBA::Boolean _tao_unmarshal_v (TAO_InputCDR &);
  virtual ::CORBA::Boolean _tao_match_formal_type (ptrdiff_t ) const;

private:
  void operator= (const VBwchar & val);

};

// TAO_IDL - Generated from
// be/be_visitor_typecode/typecode_decl.cpp:34

extern  ::CORBA::TypeCode_ptr const _tc_VBwchar;

// TAO_IDL - Generated from
// be/be_visitor_valuebox/valuebox_ch.cpp:41

class VBboolean;

typedef
  TAO_Value_Var_T<
      VBboolean
    >
  VBboolean_var;

typedef
  TAO_Value_Out_T<
      VBboolean
    >
  VBboolean_out;

class  VBboolean
  : public virtual ::CORBA::DefaultValueRefCountBase
{
public:

  // TAO_IDL - Generated from
  // be/be_type.cpp:304


  typedef VBboolean_var _var_type;
  typedef VBboolean_out _out_type;

  static void _tao_any_destructor (void *);

  static VBboolean* _downcast ( ::CORBA::ValueBase *);
  ::CORBA::ValueBase * _copy_value (void);

  virtual const char* _tao_obv_repository_id (void) const;

  virtual void _tao_obv_truncatable_repo_ids (Repository_Id_List &ids) const;

  static const char* _tao_obv_static_repository_id (void);

  static ::CORBA::Boolean _tao_unmarshal (
      TAO_InputCDR &,
      VBboolean *&
    );

  virtual ::CORBA::TypeCode_ptr _tao_type (void) const;



  // TAO_IDL - Generated from
  // be/be_visitor_valuebox/valuebox_ch.cpp:690

  // Constructors
  VBboolean (void);
  VBboolean (CORBA::Boolean val);
  VBboolean (const VBboolean& val);

  // Assignment operator
  VBboolean& operator= (CORBA::Boolean val);

  // Accessor and modifier
  CORBA::Boolean _value (void) const;
  void _value (CORBA::Boolean val);

  // Access to the boxed value for method signatures
  CORBA::Boolean _boxed_in (void) const;
  CORBA::Boolean& _boxed_inout (void);
  CORBA::Boolean& _boxed_out (void);

private:
  CORBA::Boolean _pd_value;


  // TAO_IDL - Generated from
  // be/be_visitor_valuebox/valuebox_ch.cpp:114

protected:
  virtual ~VBboolean (void);
  virtual ::CORBA::Boolean _tao_marshal_v (TAO_OutputCDR &) const;
  virtual ::CORBA::Boolean _tao_unmarshal_v (TAO_InputCDR &);
  virtual ::CORBA::Boolean _tao_match_formal_type (ptrdiff_t ) const;

private:
  void operator= (const VBboolean & val);

};

// TAO_IDL - Generated from
// be/be_visitor_typecode/typecode_decl.cpp:34

extern  ::CORBA::TypeCode_ptr const _tc_VBboolean;

// TAO_IDL - Generated from
// be/be_visitor_valuebox/valuebox_ch.cpp:41

class VBoctet;

typedef
  TAO_Value_Var_T<
      VBoctet
    >
  VBoctet_var;

typedef
  TAO_Value_Out_T<
      VBoctet
    >
  VBoctet_out;

class  VBoctet
  : public virtual ::CORBA::DefaultValueRefCountBase
{
public:

  // TAO_IDL - Generated from
  // be/be_type.cpp:304


  typedef VBoctet_var _var_type;
  typedef VBoctet_out _out_type;

  static void _tao_any_destructor (void *);

  static VBoctet* _downcast ( ::CORBA::ValueBase *);
  ::CORBA::ValueBase * _copy_value (void);

  virtual const char* _tao_obv_repository_id (void) const;

  virtual void _tao_obv_truncatable_repo_ids (Repository_Id_List &ids) const;

  static const char* _tao_obv_static_repository_id (void);

  static ::CORBA::Boolean _tao_unmarshal (
      TAO_InputCDR &,
      VBoctet *&
    );

  virtual ::CORBA::TypeCode_ptr _tao_type (void) const;



  // TAO_IDL - Generated from
  // be/be_visitor_valuebox/valuebox_ch.cpp:690

  // Constructors
  VBoctet (void);
  VBoctet (CORBA::Octet val);
  VBoctet (const VBoctet& val);

  // Assignment operator
  VBoctet& operator= (CORBA::Octet val);

  // Accessor and modifier
  CORBA::Octet _value (void) const;
  void _value (CORBA::Octet val);

  // Access to the boxed value for method signatures
  CORBA::Octet _boxed_in (void) const;
  CORBA::Octet& _boxed_inout (void);
  CORBA::Octet& _boxed_out (void);

private:
  CORBA::Octet _pd_value;


  // TAO_IDL - Generated from
  // be/be_visitor_valuebox/valuebox_ch.cpp:114

protected:
  virtual ~VBoctet (void);
  virtual ::CORBA::Boolean _tao_marshal_v (TAO_OutputCDR &) const;
  virtual ::CORBA::Boolean _tao_unmarshal_v (TAO_InputCDR &);
  virtual ::CORBA::Boolean _tao_match_formal_type (ptrdiff_t ) const;

private:
  void operator= (const VBoctet & val);

};

// TAO_IDL - Generated from
// be/be_visitor_typecode/typecode_decl.cpp:34

extern  ::CORBA::TypeCode_ptr const _tc_VBoctet;

// TAO_IDL - Generated from
// be/be_visitor_valuebox/valuebox_ch.cpp:41

class VBfloat;

typedef
  TAO_Value_Var_T<
      VBfloat
    >
  VBfloat_var;

typedef
  TAO_Value_Out_T<
      VBfloat
    >
  VBfloat_out;

class  VBfloat
  : public virtual ::CORBA::DefaultValueRefCountBase
{
public:

  // TAO_IDL - Generated from
  // be/be_type.cpp:304


  typedef VBfloat_var _var_type;
  typedef VBfloat_out _out_type;

  static void _tao_any_destructor (void *);

  static VBfloat* _downcast ( ::CORBA::ValueBase *);
  ::CORBA::ValueBase * _copy_value (void);

  virtual const char* _tao_obv_repository_id (void) const;

  virtual void _tao_obv_truncatable_repo_ids (Repository_Id_List &ids) const;

  static const char* _tao_obv_static_repository_id (void);

  static ::CORBA::Boolean _tao_unmarshal (
      TAO_InputCDR &,
      VBfloat *&
    );

  virtual ::CORBA::TypeCode_ptr _tao_type (void) const;



  // TAO_IDL - Generated from
  // be/be_visitor_valuebox/valuebox_ch.cpp:690

  // Constructors
  VBfloat (void);
  VBfloat (CORBA::Float val);
  VBfloat (const VBfloat& val);

  // Assignment operator
  VBfloat& operator= (CORBA::Float val);

  // Accessor and modifier
  CORBA::Float _value (void) const;
  void _value (CORBA::Float val);

  // Access to the boxed value for method signatures
  CORBA::Float _boxed_in (void) const;
  CORBA::Float& _boxed_inout (void);
  CORBA::Float& _boxed_out (void);

private:
  CORBA::Float _pd_value;


  // TAO_IDL - Generated from
  // be/be_visitor_valuebox/valuebox_ch.cpp:114

protected:
  virtual ~VBfloat (void);
  virtual ::CORBA::Boolean _tao_marshal_v (TAO_OutputCDR &) const;
  virtual ::CORBA::Boolean _tao_unmarshal_v (TAO_InputCDR &);
  virtual ::CORBA::Boolean _tao_match_formal_type (ptrdiff_t ) const;

private:
  void operator= (const VBfloat & val);

};

// TAO_IDL - Generated from
// be/be_visitor_typecode/typecode_decl.cpp:34

extern  ::CORBA::TypeCode_ptr const _tc_VBfloat;

// TAO_IDL - Generated from
// be/be_visitor_valuebox/valuebox_ch.cpp:41

class VBdouble;

typedef
  TAO_Value_Var_T<
      VBdouble
    >
  VBdouble_var;

typedef
  TAO_Value_Out_T<
      VBdouble
    >
  VBdouble_out;

class  VBdouble
  : public virtual ::CORBA::DefaultValueRefCountBase
{
public:

  // TAO_IDL - Generated from
  // be/be_type.cpp:304


  typedef VBdouble_var _var_type;
  typedef VBdouble_out _out_type;

  static void _tao_any_destructor (void *);

  static VBdouble* _downcast ( ::CORBA::ValueBase *);
  ::CORBA::ValueBase * _copy_value (void);

  virtual const char* _tao_obv_repository_id (void) const;

  virtual void _tao_obv_truncatable_repo_ids (Repository_Id_List &ids) const;

  static const char* _tao_obv_static_repository_id (void);

  static ::CORBA::Boolean _tao_unmarshal (
      TAO_InputCDR &,
      VBdouble *&
    );

  virtual ::CORBA::TypeCode_ptr _tao_type (void) const;



  // TAO_IDL - Generated from
  // be/be_visitor_valuebox/valuebox_ch.cpp:690

  // Constructors
  VBdouble (void);
  VBdouble (CORBA::Double val);
  VBdouble (const VBdouble& val);

  // Assignment operator
  VBdouble& operator= (CORBA::Double val);

  // Accessor and modifier
  CORBA::Double _value (void) const;
  void _value (CORBA::Double val);

  // Access to the boxed value for method signatures
  CORBA::Double _boxed_in (void) const;
  CORBA::Double& _boxed_inout (void);
  CORBA::Double& _boxed_out (void);

private:
  CORBA::Double _pd_value;


  // TAO_IDL - Generated from
  // be/be_visitor_valuebox/valuebox_ch.cpp:114

protected:
  virtual ~VBdouble (void);
  virtual ::CORBA::Boolean _tao_marshal_v (TAO_OutputCDR &) const;
  virtual ::CORBA::Boolean _tao_unmarshal_v (TAO_InputCDR &);
  virtual ::CORBA::Boolean _tao_match_formal_type (ptrdiff_t ) const;

private:
  void operator= (const VBdouble & val);

};

// TAO_IDL - Generated from
// be/be_visitor_typecode/typecode_decl.cpp:34

extern  ::CORBA::TypeCode_ptr const _tc_VBdouble;

// TAO_IDL - Generated from
// be/be_visitor_valuebox/valuebox_ch.cpp:41

class VBlongdouble;

typedef
  TAO_Value_Var_T<
      VBlongdouble
    >
  VBlongdouble_var;

typedef
  TAO_Value_Out_T<
      VBlongdouble
    >
  VBlongdouble_out;

class  VBlongdouble
  : public virtual ::CORBA::DefaultValueRefCountBase
{
public:

  // TAO_IDL - Generated from
  // be/be_type.cpp:304


  typedef VBlongdouble_var _var_type;
  typedef VBlongdouble_out _out_type;

  static void _tao_any_destructor (void *);

  static VBlongdouble* _downcast ( ::CORBA::ValueBase *);
  ::CORBA::ValueBase * _copy_value (void);

  virtual const char* _tao_obv_repository_id (void) const;

  virtual void _tao_obv_truncatable_repo_ids (Repository_Id_List &ids) const;

  static const char* _tao_obv_static_repository_id (void);

  static ::CORBA::Boolean _tao_unmarshal (
      TAO_InputCDR &,
      VBlongdouble *&
    );

  virtual ::CORBA::TypeCode_ptr _tao_type (void) const;



  // TAO_IDL - Generated from
  // be/be_visitor_valuebox/valuebox_ch.cpp:690

  // Constructors
  VBlongdouble (void);
  VBlongdouble (CORBA::LongDouble val);
  VBlongdouble (const VBlongdouble& val);

  // Assignment operator
  VBlongdouble& operator= (CORBA::LongDouble val);

  // Accessor and modifier
  CORBA::LongDouble _value (void) const;
  void _value (CORBA::LongDouble val);

  // Access to the boxed value for method signatures
  CORBA::LongDouble _boxed_in (void) const;
  CORBA::LongDouble& _boxed_inout (void);
  CORBA::LongDouble& _boxed_out (void);

private:
  CORBA::LongDouble _pd_value;


  // TAO_IDL - Generated from
  // be/be_visitor_valuebox/valuebox_ch.cpp:114

protected:
  virtual ~VBlongdouble (void);
  virtual ::CORBA::Boolean _tao_marshal_v (TAO_OutputCDR &) const;
  virtual ::CORBA::Boolean _tao_unmarshal_v (TAO_InputCDR &);
  virtual ::CORBA::Boolean _tao_match_formal_type (ptrdiff_t ) const;

private:
  void operator= (const VBlongdouble & val);

};

// TAO_IDL - Generated from
// be/be_visitor_typecode/typecode_decl.cpp:34

extern  ::CORBA::TypeCode_ptr const _tc_VBlongdouble;

// TAO_IDL - Generated from
// be/be_visitor_valuebox/valuebox_ch.cpp:41

class VBenum;

typedef
  TAO_Value_Var_T<
      VBenum
    >
  VBenum_var;

typedef
  TAO_Value_Out_T<
      VBenum
    >
  VBenum_out;

class  VBenum
  : public virtual ::CORBA::DefaultValueRefCountBase
{
public:

  // TAO_IDL - Generated from
  // be/be_type.cpp:304


  typedef VBenum_var _var_type;
  typedef VBenum_out _out_type;

  static void _tao_any_destructor (void *);

  static VBenum* _downcast ( ::CORBA::ValueBase *);
  ::CORBA::ValueBase * _copy_value (void);

  virtual const char* _tao_obv_repository_id (void) const;

  virtual void _tao_obv_truncatable_repo_ids (Repository_Id_List &ids) const;

  static const char* _tao_obv_static_repository_id (void);

  static ::CORBA::Boolean _tao_unmarshal (
      TAO_InputCDR &,
      VBenum *&
    );

  virtual ::CORBA::TypeCode_ptr _tao_type (void) const;



  // TAO_IDL - Generated from
  // be/be_visitor_valuebox/valuebox_ch.cpp:690

  // Constructors
  VBenum (void);
  VBenum (Color val);
  VBenum (const VBenum& val);

  // Assignment operator
  VBenum& operator= (Color val);

  // Accessor and modifier
  Color _value (void) const;
  void _value (Color val);

  // Access to the boxed value for method signatures
  Color _boxed_in (void) const;
  Color& _boxed_inout (void);
  Color& _boxed_out (void);

private:
  Color _pd_value;


  // TAO_IDL - Generated from
  // be/be_visitor_valuebox/valuebox_ch.cpp:114

protected:
  virtual ~VBenum (void);
  virtual ::CORBA::Boolean _tao_marshal_v (TAO_OutputCDR &) const;
  virtual ::CORBA::Boolean _tao_unmarshal_v (TAO_InputCDR &);
  virtual ::CORBA::Boolean _tao_match_formal_type (ptrdiff_t ) const;

private:
  void operator= (const VBenum & val);

};

// TAO_IDL - Generated from
// be/be_visitor_typecode/typecode_decl.cpp:34

extern  ::CORBA::TypeCode_ptr const _tc_VBenum;

// TAO_IDL - Generated from
// be/be_visitor_typedef/typedef_ch.cpp:370

typedef ::CORBA::Short TDshort;
typedef ::CORBA::Short_out TDshort_out;

// TAO_IDL - Generated from
// be/be_visitor_typecode/typecode_decl.cpp:34

extern  ::CORBA::TypeCode_ptr const _tc_TDshort;

// TAO_IDL - Generated from
// be/be_visitor_typedef/typedef_ch.cpp:370

typedef ::CORBA::Long TDlong;
typedef ::CORBA::Long_out TDlong_out;

// TAO_IDL - Generated from
// be/be_visitor_typecode/typecode_decl.cpp:34

extern  ::CORBA::TypeCode_ptr const _tc_TDlong;

// TAO_IDL - Generated from
// be/be_visitor_typedef/typedef_ch.cpp:370

typedef ::CORBA::LongLong TDlonglong;
typedef ::CORBA::LongLong_out TDlonglong_out;

// TAO_IDL - Generated from
// be/be_visitor_typecode/typecode_decl.cpp:34

extern  ::CORBA::TypeCode_ptr const _tc_TDlonglong;

// TAO_IDL - Generated from
// be/be_visitor_typedef/typedef_ch.cpp:370

typedef ::CORBA::UShort TDushort;
typedef ::CORBA::UShort_out TDushort_out;

// TAO_IDL - Generated from
// be/be_visitor_typecode/typecode_decl.cpp:34

extern  ::CORBA::TypeCode_ptr const _tc_TDushort;

// TAO_IDL - Generated from
// be/be_visitor_typedef/typedef_ch.cpp:370

typedef ::CORBA::ULong TDulong;
typedef ::CORBA::ULong_out TDulong_out;

// TAO_IDL - Generated from
// be/be_visitor_typecode/typecode_decl.cpp:34

extern  ::CORBA::TypeCode_ptr const _tc_TDulong;

// TAO_IDL - Generated from
// be/be_visitor_typedef/typedef_ch.cpp:370

typedef ::CORBA::ULongLong TDulonglong;
typedef ::CORBA::ULongLong_out TDulonglong_out;

// TAO_IDL - Generated from
// be/be_visitor_typecode/typecode_decl.cpp:34

extern  ::CORBA::TypeCode_ptr const _tc_TDulonglong;

// TAO_IDL - Generated from
// be/be_visitor_typedef/typedef_ch.cpp:370

typedef ::CORBA::Char TDchar;
typedef ::CORBA::Char_out TDchar_out;

// TAO_IDL - Generated from
// be/be_visitor_typecode/typecode_decl.cpp:34

extern  ::CORBA::TypeCode_ptr const _tc_TDchar;

// TAO_IDL - Generated from
// be/be_visitor_typedef/typedef_ch.cpp:370

typedef ::CORBA::WChar TDwchar;
typedef ::CORBA::WChar_out TDwchar_out;

// TAO_IDL - Generated from
// be/be_visitor_typecode/typecode_decl.cpp:34

extern  ::CORBA::TypeCode_ptr const _tc_TDwchar;

// TAO_IDL - Generated from
// be/be_visitor_typedef/typedef_ch.cpp:370

typedef ::CORBA::Boolean TDboolean;
typedef ::CORBA::Boolean_out TDboolean_out;

// TAO_IDL - Generated from
// be/be_visitor_typecode/typecode_decl.cpp:34

extern  ::CORBA::TypeCode_ptr const _tc_TDboolean;

// TAO_IDL - Generated from
// be/be_visitor_typedef/typedef_ch.cpp:370

typedef ::CORBA::Octet TDoctet;
typedef ::CORBA::Octet_out TDoctet_out;

// TAO_IDL - Generated from
// be/be_visitor_typecode/typecode_decl.cpp:34

extern  ::CORBA::TypeCode_ptr const _tc_TDoctet;

// TAO_IDL - Generated from
// be/be_visitor_typedef/typedef_ch.cpp:370

typedef ::CORBA::Float TDfloat;
typedef ::CORBA::Float_out TDfloat_out;

// TAO_IDL - Generated from
// be/be_visitor_typecode/typecode_decl.cpp:34

extern  ::CORBA::TypeCode_ptr const _tc_TDfloat;

// TAO_IDL - Generated from
// be/be_visitor_typedef/typedef_ch.cpp:370

typedef ::CORBA::Double TDdouble;
typedef ::CORBA::Double_out TDdouble_out;

// TAO_IDL - Generated from
// be/be_visitor_typecode/typecode_decl.cpp:34

extern  ::CORBA::TypeCode_ptr const _tc_TDdouble;

// TAO_IDL - Generated from
// be/be_visitor_typedef/typedef_ch.cpp:370

typedef ::CORBA::LongDouble TDlongdouble;
typedef ::CORBA::LongDouble_out TDlongdouble_out;

// TAO_IDL - Generated from
// be/be_visitor_typecode/typecode_decl.cpp:34

extern  ::CORBA::TypeCode_ptr const _tc_TDlongdouble;

// TAO_IDL - Generated from
// be/be_visitor_typedef/typedef_ch.cpp:290

typedef Color TDenum;
typedef Color_out TDenum_out;

// TAO_IDL - Generated from
// be/be_visitor_typecode/typecode_decl.cpp:34

extern  ::CORBA::TypeCode_ptr const _tc_TDenum;

// TAO_IDL - Generated from
// be/be_visitor_valuebox/valuebox_ch.cpp:41

class VBTDshort;

typedef
  TAO_Value_Var_T<
      VBTDshort
    >
  VBTDshort_var;

typedef
  TAO_Value_Out_T<
      VBTDshort
    >
  VBTDshort_out;

class  VBTDshort
  : public virtual ::CORBA::DefaultValueRefCountBase
{
public:

  // TAO_IDL - Generated from
  // be/be_type.cpp:304


  typedef VBTDshort_var _var_type;
  typedef VBTDshort_out _out_type;

  static void _tao_any_destructor (void *);

  static VBTDshort* _downcast ( ::CORBA::ValueBase *);
  ::CORBA::ValueBase * _copy_value (void);

  virtual const char* _tao_obv_repository_id (void) const;

  virtual void _tao_obv_truncatable_repo_ids (Repository_Id_List &ids) const;

  static const char* _tao_obv_static_repository_id (void);

  static ::CORBA::Boolean _tao_unmarshal (
      TAO_InputCDR &,
      VBTDshort *&
    );

  virtual ::CORBA::TypeCode_ptr _tao_type (void) const;



  // TAO_IDL - Generated from
  // be/be_visitor_valuebox/valuebox_ch.cpp:690

  // Constructors
  VBTDshort (void);
  VBTDshort (CORBA::Short val);
  VBTDshort (const VBTDshort& val);

  // Assignment operator
  VBTDshort& operator= (CORBA::Short val);

  // Accessor and modifier
  CORBA::Short _value (void) const;
  void _value (CORBA::Short val);

  // Access to the boxed value for method signatures
  CORBA::Short _boxed_in (void) const;
  CORBA::Short& _boxed_inout (void);
  CORBA::Short& _boxed_out (void);

private:
  CORBA::Short _pd_value;


  // TAO_IDL - Generated from
  // be/be_visitor_valuebox/valuebox_ch.cpp:114

protected:
  virtual ~VBTDshort (void);
  virtual ::CORBA::Boolean _tao_marshal_v (TAO_OutputCDR &) const;
  virtual ::CORBA::Boolean _tao_unmarshal_v (TAO_InputCDR &);
  virtual ::CORBA::Boolean _tao_match_formal_type (ptrdiff_t ) const;

private:
  void operator= (const VBTDshort & val);

};

// TAO_IDL - Generated from
// be/be_visitor_typecode/typecode_decl.cpp:34

extern  ::CORBA::TypeCode_ptr const _tc_VBTDshort;

// TAO_IDL - Generated from
// be/be_visitor_valuebox/valuebox_ch.cpp:41

class VBTDlong;

typedef
  TAO_Value_Var_T<
      VBTDlong
    >
  VBTDlong_var;

typedef
  TAO_Value_Out_T<
      VBTDlong
    >
  VBTDlong_out;

class  VBTDlong
  : public virtual ::CORBA::DefaultValueRefCountBase
{
public:

  // TAO_IDL - Generated from
  // be/be_type.cpp:304


  typedef VBTDlong_var _var_type;
  typedef VBTDlong_out _out_type;

  static void _tao_any_destructor (void *);

  static VBTDlong* _downcast ( ::CORBA::ValueBase *);
  ::CORBA::ValueBase * _copy_value (void);

  virtual const char* _tao_obv_repository_id (void) const;

  virtual void _tao_obv_truncatable_repo_ids (Repository_Id_List &ids) const;

  static const char* _tao_obv_static_repository_id (void);

  static ::CORBA::Boolean _tao_unmarshal (
      TAO_InputCDR &,
      VBTDlong *&
    );

  virtual ::CORBA::TypeCode_ptr _tao_type (void) const;



  // TAO_IDL - Generated from
  // be/be_visitor_valuebox/valuebox_ch.cpp:690

  // Constructors
  VBTDlong (void);
  VBTDlong (CORBA::Long val);
  VBTDlong (const VBTDlong& val);

  // Assignment operator
  VBTDlong& operator= (CORBA::Long val);

  // Accessor and modifier
  CORBA::Long _value (void) const;
  void _value (CORBA::Long val);

  // Access to the boxed value for method signatures
  CORBA::Long _boxed_in (void) const;
  CORBA::Long& _boxed_inout (void);
  CORBA::Long& _boxed_out (void);

private:
  CORBA::Long _pd_value;


  // TAO_IDL - Generated from
  // be/be_visitor_valuebox/valuebox_ch.cpp:114

protected:
  virtual ~VBTDlong (void);
  virtual ::CORBA::Boolean _tao_marshal_v (TAO_OutputCDR &) const;
  virtual ::CORBA::Boolean _tao_unmarshal_v (TAO_InputCDR &);
  virtual ::CORBA::Boolean _tao_match_formal_type (ptrdiff_t ) const;

private:
  void operator= (const VBTDlong & val);

};

// TAO_IDL - Generated from
// be/be_visitor_typecode/typecode_decl.cpp:34

extern  ::CORBA::TypeCode_ptr const _tc_VBTDlong;

// TAO_IDL - Generated from
// be/be_visitor_valuebox/valuebox_ch.cpp:41

class VBTDlonglong;

typedef
  TAO_Value_Var_T<
      VBTDlonglong
    >
  VBTDlonglong_var;

typedef
  TAO_Value_Out_T<
      VBTDlonglong
    >
  VBTDlonglong_out;

class  VBTDlonglong
  : public virtual ::CORBA::DefaultValueRefCountBase
{
public:

  // TAO_IDL - Generated from
  // be/be_type.cpp:304


  typedef VBTDlonglong_var _var_type;
  typedef VBTDlonglong_out _out_type;

  static void _tao_any_destructor (void *);

  static VBTDlonglong* _downcast ( ::CORBA::ValueBase *);
  ::CORBA::ValueBase * _copy_value (void);

  virtual const char* _tao_obv_repository_id (void) const;

  virtual void _tao_obv_truncatable_repo_ids (Repository_Id_List &ids) const;

  static const char* _tao_obv_static_repository_id (void);

  static ::CORBA::Boolean _tao_unmarshal (
      TAO_InputCDR &,
      VBTDlonglong *&
    );

  virtual ::CORBA::TypeCode_ptr _tao_type (void) const;



  // TAO_IDL - Generated from
  // be/be_visitor_valuebox/valuebox_ch.cpp:690

  // Constructors
  VBTDlonglong (void);
  VBTDlonglong (CORBA::LongLong val);
  VBTDlonglong (const VBTDlonglong& val);

  // Assignment operator
  VBTDlonglong& operator= (CORBA::LongLong val);

  // Accessor and modifier
  CORBA::LongLong _value (void) const;
  void _value (CORBA::LongLong val);

  // Access to the boxed value for method signatures
  CORBA::LongLong _boxed_in (void) const;
  CORBA::LongLong& _boxed_inout (void);
  CORBA::LongLong& _boxed_out (void);

private:
  CORBA::LongLong _pd_value;


  // TAO_IDL - Generated from
  // be/be_visitor_valuebox/valuebox_ch.cpp:114

protected:
  virtual ~VBTDlonglong (void);
  virtual ::CORBA::Boolean _tao_marshal_v (TAO_OutputCDR &) const;
  virtual ::CORBA::Boolean _tao_unmarshal_v (TAO_InputCDR &);
  virtual ::CORBA::Boolean _tao_match_formal_type (ptrdiff_t ) const;

private:
  void operator= (const VBTDlonglong & val);

};

// TAO_IDL - Generated from
// be/be_visitor_typecode/typecode_decl.cpp:34

extern  ::CORBA::TypeCode_ptr const _tc_VBTDlonglong;

// TAO_IDL - Generated from
// be/be_visitor_valuebox/valuebox_ch.cpp:41

class VBTDushort;

typedef
  TAO_Value_Var_T<
      VBTDushort
    >
  VBTDushort_var;

typedef
  TAO_Value_Out_T<
      VBTDushort
    >
  VBTDushort_out;

class  VBTDushort
  : public virtual ::CORBA::DefaultValueRefCountBase
{
public:

  // TAO_IDL - Generated from
  // be/be_type.cpp:304


  typedef VBTDushort_var _var_type;
  typedef VBTDushort_out _out_type;

  static void _tao_any_destructor (void *);

  static VBTDushort* _downcast ( ::CORBA::ValueBase *);
  ::CORBA::ValueBase * _copy_value (void);

  virtual const char* _tao_obv_repository_id (void) const;

  virtual void _tao_obv_truncatable_repo_ids (Repository_Id_List &ids) const;

  static const char* _tao_obv_static_repository_id (void);

  static ::CORBA::Boolean _tao_unmarshal (
      TAO_InputCDR &,
      VBTDushort *&
    );

  virtual ::CORBA::TypeCode_ptr _tao_type (void) const;



  // TAO_IDL - Generated from
  // be/be_visitor_valuebox/valuebox_ch.cpp:690

  // Constructors
  VBTDushort (void);
  VBTDushort (CORBA::UShort val);
  VBTDushort (const VBTDushort& val);

  // Assignment operator
  VBTDushort& operator= (CORBA::UShort val);

  // Accessor and modifier
  CORBA::UShort _value (void) const;
  void _value (CORBA::UShort val);

  // Access to the boxed value for method signatures
  CORBA::UShort _boxed_in (void) const;
  CORBA::UShort& _boxed_inout (void);
  CORBA::UShort& _boxed_out (void);

private:
  CORBA::UShort _pd_value;


  // TAO_IDL - Generated from
  // be/be_visitor_valuebox/valuebox_ch.cpp:114

protected:
  virtual ~VBTDushort (void);
  virtual ::CORBA::Boolean _tao_marshal_v (TAO_OutputCDR &) const;
  virtual ::CORBA::Boolean _tao_unmarshal_v (TAO_InputCDR &);
  virtual ::CORBA::Boolean _tao_match_formal_type (ptrdiff_t ) const;

private:
  void operator= (const VBTDushort & val);

};

// TAO_IDL - Generated from
// be/be_visitor_typecode/typecode_decl.cpp:34

extern  ::CORBA::TypeCode_ptr const _tc_VBTDushort;

// TAO_IDL - Generated from
// be/be_visitor_valuebox/valuebox_ch.cpp:41

class VBTDulong;

typedef
  TAO_Value_Var_T<
      VBTDulong
    >
  VBTDulong_var;

typedef
  TAO_Value_Out_T<
      VBTDulong
    >
  VBTDulong_out;

class  VBTDulong
  : public virtual ::CORBA::DefaultValueRefCountBase
{
public:

  // TAO_IDL - Generated from
  // be/be_type.cpp:304


  typedef VBTDulong_var _var_type;
  typedef VBTDulong_out _out_type;

  static void _tao_any_destructor (void *);

  static VBTDulong* _downcast ( ::CORBA::ValueBase *);
  ::CORBA::ValueBase * _copy_value (void);

  virtual const char* _tao_obv_repository_id (void) const;

  virtual void _tao_obv_truncatable_repo_ids (Repository_Id_List &ids) const;

  static const char* _tao_obv_static_repository_id (void);

  static ::CORBA::Boolean _tao_unmarshal (
      TAO_InputCDR &,
      VBTDulong *&
    );

  virtual ::CORBA::TypeCode_ptr _tao_type (void) const;



  // TAO_IDL - Generated from
  // be/be_visitor_valuebox/valuebox_ch.cpp:690

  // Constructors
  VBTDulong (void);
  VBTDulong (CORBA::ULong val);
  VBTDulong (const VBTDulong& val);

  // Assignment operator
  VBTDulong& operator= (CORBA::ULong val);

  // Accessor and modifier
  CORBA::ULong _value (void) const;
  void _value (CORBA::ULong val);

  // Access to the boxed value for method signatures
  CORBA::ULong _boxed_in (void) const;
  CORBA::ULong& _boxed_inout (void);
  CORBA::ULong& _boxed_out (void);

private:
  CORBA::ULong _pd_value;


  // TAO_IDL - Generated from
  // be/be_visitor_valuebox/valuebox_ch.cpp:114

protected:
  virtual ~VBTDulong (void);
  virtual ::CORBA::Boolean _tao_marshal_v (TAO_OutputCDR &) const;
  virtual ::CORBA::Boolean _tao_unmarshal_v (TAO_InputCDR &);
  virtual ::CORBA::Boolean _tao_match_formal_type (ptrdiff_t ) const;

private:
  void operator= (const VBTDulong & val);

};

// TAO_IDL - Generated from
// be/be_visitor_typecode/typecode_decl.cpp:34

extern  ::CORBA::TypeCode_ptr const _tc_VBTDulong;

// TAO_IDL - Generated from
// be/be_visitor_valuebox/valuebox_ch.cpp:41

class VBTDulonglong;

typedef
  TAO_Value_Var_T<
      VBTDulonglong
    >
  VBTDulonglong_var;

typedef
  TAO_Value_Out_T<
      VBTDulonglong
    >
  VBTDulonglong_out;

class  VBTDulonglong
  : public virtual ::CORBA::DefaultValueRefCountBase
{
public:

  // TAO_IDL - Generated from
  // be/be_type.cpp:304


  typedef VBTDulonglong_var _var_type;
  typedef VBTDulonglong_out _out_type;

  static void _tao_any_destructor (void *);

  static VBTDulonglong* _downcast ( ::CORBA::ValueBase *);
  ::CORBA::ValueBase * _copy_value (void);

  virtual const char* _tao_obv_repository_id (void) const;

  virtual void _tao_obv_truncatable_repo_ids (Repository_Id_List &ids) const;

  static const char* _tao_obv_static_repository_id (void);

  static ::CORBA::Boolean _tao_unmarshal (
      TAO_InputCDR &,
      VBTDulonglong *&
    );

  virtual ::CORBA::TypeCode_ptr _tao_type (void) const;



  // TAO_IDL - Generated from
  // be/be_visitor_valuebox/valuebox_ch.cpp:690

  // Constructors
  VBTDulonglong (void);
  VBTDulonglong (CORBA::ULongLong val);
  VBTDulonglong (const VBTDulonglong& val);

  // Assignment operator
  VBTDulonglong& operator= (CORBA::ULongLong val);

  // Accessor and modifier
  CORBA::ULongLong _value (void) const;
  void _value (CORBA::ULongLong val);

  // Access to the boxed value for method signatures
  CORBA::ULongLong _boxed_in (void) const;
  CORBA::ULongLong& _boxed_inout (void);
  CORBA::ULongLong& _boxed_out (void);

private:
  CORBA::ULongLong _pd_value;


  // TAO_IDL - Generated from
  // be/be_visitor_valuebox/valuebox_ch.cpp:114

protected:
  virtual ~VBTDulonglong (void);
  virtual ::CORBA::Boolean _tao_marshal_v (TAO_OutputCDR &) const;
  virtual ::CORBA::Boolean _tao_unmarshal_v (TAO_InputCDR &);
  virtual ::CORBA::Boolean _tao_match_formal_type (ptrdiff_t ) const;

private:
  void operator= (const VBTDulonglong & val);

};

// TAO_IDL - Generated from
// be/be_visitor_typecode/typecode_decl.cpp:34

extern  ::CORBA::TypeCode_ptr const _tc_VBTDulonglong;

// TAO_IDL - Generated from
// be/be_visitor_valuebox/valuebox_ch.cpp:41

class VBTDchar;

typedef
  TAO_Value_Var_T<
      VBTDchar
    >
  VBTDchar_var;

typedef
  TAO_Value_Out_T<
      VBTDchar
    >
  VBTDchar_out;

class  VBTDchar
  : public virtual ::CORBA::DefaultValueRefCountBase
{
public:

  // TAO_IDL - Generated from
  // be/be_type.cpp:304


  typedef VBTDchar_var _var_type;
  typedef VBTDchar_out _out_type;

  static void _tao_any_destructor (void *);

  static VBTDchar* _downcast ( ::CORBA::ValueBase *);
  ::CORBA::ValueBase * _copy_value (void);

  virtual const char* _tao_obv_repository_id (void) const;

  virtual void _tao_obv_truncatable_repo_ids (Repository_Id_List &ids) const;

  static const char* _tao_obv_static_repository_id (void);

  static ::CORBA::Boolean _tao_unmarshal (
      TAO_InputCDR &,
      VBTDchar *&
    );

  virtual ::CORBA::TypeCode_ptr _tao_type (void) const;



  // TAO_IDL - Generated from
  // be/be_visitor_valuebox/valuebox_ch.cpp:690

  // Constructors
  VBTDchar (void);
  VBTDchar (CORBA::Char val);
  VBTDchar (const VBTDchar& val);

  // Assignment operator
  VBTDchar& operator= (CORBA::Char val);

  // Accessor and modifier
  CORBA::Char _value (void) const;
  void _value (CORBA::Char val);

  // Access to the boxed value for method signatures
  CORBA::Char _boxed_in (void) const;
  CORBA::Char& _boxed_inout (void);
  CORBA::Char& _boxed_out (void);

private:
  CORBA::Char _pd_value;


  // TAO_IDL - Generated from
  // be/be_visitor_valuebox/valuebox_ch.cpp:114

protected:
  virtual ~VBTDchar (void);
  virtual ::CORBA::Boolean _tao_marshal_v (TAO_OutputCDR &) const;
  virtual ::CORBA::Boolean _tao_unmarshal_v (TAO_InputCDR &);
  virtual ::CORBA::Boolean _tao_match_formal_type (ptrdiff_t ) const;

private:
  void operator= (const VBTDchar & val);

};

// TAO_IDL - Generated from
// be/be_visitor_typecode/typecode_decl.cpp:34

extern  ::CORBA::TypeCode_ptr const _tc_VBTDchar;

// TAO_IDL - Generated from
// be/be_visitor_valuebox/valuebox_ch.cpp:41

class VBTDwchar;

typedef
  TAO_Value_Var_T<
      VBTDwchar
    >
  VBTDwchar_var;

typedef
  TAO_Value_Out_T<
      VBTDwchar
    >
  VBTDwchar_out;

class  VBTDwchar
  : public virtual ::CORBA::DefaultValueRefCountBase
{
public:

  // TAO_IDL - Generated from
  // be/be_type.cpp:304


  typedef VBTDwchar_var _var_type;
  typedef VBTDwchar_out _out_type;

  static void _tao_any_destructor (void *);

  static VBTDwchar* _downcast ( ::CORBA::ValueBase *);
  ::CORBA::ValueBase * _copy_value (void);

  virtual const char* _tao_obv_repository_id (void) const;

  virtual void _tao_obv_truncatable_repo_ids (Repository_Id_List &ids) const;

  static const char* _tao_obv_static_repository_id (void);

  static ::CORBA::Boolean _tao_unmarshal (
      TAO_InputCDR &,
      VBTDwchar *&
    );

  virtual ::CORBA::TypeCode_ptr _tao_type (void) const;



  // TAO_IDL - Generated from
  // be/be_visitor_valuebox/valuebox_ch.cpp:690

  // Constructors
  VBTDwchar (void);
  VBTDwchar (CORBA::WChar val);
  VBTDwchar (const VBTDwchar& val);

  // Assignment operator
  VBTDwchar& operator= (CORBA::WChar val);

  // Accessor and modifier
  CORBA::WChar _value (void) const;
  void _value (CORBA::WChar val);

  // Access to the boxed value for method signatures
  CORBA::WChar _boxed_in (void) const;
  CORBA::WChar& _boxed_inout (void);
  CORBA::WChar& _boxed_out (void);

private:
  CORBA::WChar _pd_value;


  // TAO_IDL - Generated from
  // be/be_visitor_valuebox/valuebox_ch.cpp:114

protected:
  virtual ~VBTDwchar (void);
  virtual ::CORBA::Boolean _tao_marshal_v (TAO_OutputCDR &) const;
  virtual ::CORBA::Boolean _tao_unmarshal_v (TAO_InputCDR &);
  virtual ::CORBA::Boolean _tao_match_formal_type (ptrdiff_t ) const;

private:
  void operator= (const VBTDwchar & val);

};

// TAO_IDL - Generated from
// be/be_visitor_typecode/typecode_decl.cpp:34

extern  ::CORBA::TypeCode_ptr const _tc_VBTDwchar;

// TAO_IDL - Generated from
// be/be_visitor_valuebox/valuebox_ch.cpp:41

class VBTDboolean;

typedef
  TAO_Value_Var_T<
      VBTDboolean
    >
  VBTDboolean_var;

typedef
  TAO_Value_Out_T<
      VBTDboolean
    >
  VBTDboolean_out;

class  VBTDboolean
  : public virtual ::CORBA::DefaultValueRefCountBase
{
public:

  // TAO_IDL - Generated from
  // be/be_type.cpp:304


  typedef VBTDboolean_var _var_type;
  typedef VBTDboolean_out _out_type;

  static void _tao_any_destructor (void *);

  static VBTDboolean* _downcast ( ::CORBA::ValueBase *);
  ::CORBA::ValueBase * _copy_value (void);

  virtual const char* _tao_obv_repository_id (void) const;

  virtual void _tao_obv_truncatable_repo_ids (Repository_Id_List &ids) const;

  static const char* _tao_obv_static_repository_id (void);

  static ::CORBA::Boolean _tao_unmarshal (
      TAO_InputCDR &,
      VBTDboolean *&
    );

  virtual ::CORBA::TypeCode_ptr _tao_type (void) const;



  // TAO_IDL - Generated from
  // be/be_visitor_valuebox/valuebox_ch.cpp:690

  // Constructors
  VBTDboolean (void);
  VBTDboolean (CORBA::Boolean val);
  VBTDboolean (const VBTDboolean& val);

  // Assignment operator
  VBTDboolean& operator= (CORBA::Boolean val);

  // Accessor and modifier
  CORBA::Boolean _value (void) const;
  void _value (CORBA::Boolean val);

  // Access to the boxed value for method signatures
  CORBA::Boolean _boxed_in (void) const;
  CORBA::Boolean& _boxed_inout (void);
  CORBA::Boolean& _boxed_out (void);

private:
  CORBA::Boolean _pd_value;


  // TAO_IDL - Generated from
  // be/be_visitor_valuebox/valuebox_ch.cpp:114

protected:
  virtual ~VBTDboolean (void);
  virtual ::CORBA::Boolean _tao_marshal_v (TAO_OutputCDR &) const;
  virtual ::CORBA::Boolean _tao_unmarshal_v (TAO_InputCDR &);
  virtual ::CORBA::Boolean _tao_match_formal_type (ptrdiff_t ) const;

private:
  void operator= (const VBTDboolean & val);

};

// TAO_IDL - Generated from
// be/be_visitor_typecode/typecode_decl.cpp:34

extern  ::CORBA::TypeCode_ptr const _tc_VBTDboolean;

// TAO_IDL - Generated from
// be/be_visitor_valuebox/valuebox_ch.cpp:41

class VBTDoctet;

typedef
  TAO_Value_Var_T<
      VBTDoctet
    >
  VBTDoctet_var;

typedef
  TAO_Value_Out_T<
      VBTDoctet
    >
  VBTDoctet_out;

class  VBTDoctet
  : public virtual ::CORBA::DefaultValueRefCountBase
{
public:

  // TAO_IDL - Generated from
  // be/be_type.cpp:304


  typedef VBTDoctet_var _var_type;
  typedef VBTDoctet_out _out_type;

  static void _tao_any_destructor (void *);

  static VBTDoctet* _downcast ( ::CORBA::ValueBase *);
  ::CORBA::ValueBase * _copy_value (void);

  virtual const char* _tao_obv_repository_id (void) const;

  virtual void _tao_obv_truncatable_repo_ids (Repository_Id_List &ids) const;

  static const char* _tao_obv_static_repository_id (void);

  static ::CORBA::Boolean _tao_unmarshal (
      TAO_InputCDR &,
      VBTDoctet *&
    );

  virtual ::CORBA::TypeCode_ptr _tao_type (void) const;



  // TAO_IDL - Generated from
  // be/be_visitor_valuebox/valuebox_ch.cpp:690

  // Constructors
  VBTDoctet (void);
  VBTDoctet (CORBA::Octet val);
  VBTDoctet (const VBTDoctet& val);

  // Assignment operator
  VBTDoctet& operator= (CORBA::Octet val);

  // Accessor and modifier
  CORBA::Octet _value (void) const;
  void _value (CORBA::Octet val);

  // Access to the boxed value for method signatures
  CORBA::Octet _boxed_in (void) const;
  CORBA::Octet& _boxed_inout (void);
  CORBA::Octet& _boxed_out (void);

private:
  CORBA::Octet _pd_value;


  // TAO_IDL - Generated from
  // be/be_visitor_valuebox/valuebox_ch.cpp:114

protected:
  virtual ~VBTDoctet (void);
  virtual ::CORBA::Boolean _tao_marshal_v (TAO_OutputCDR &) const;
  virtual ::CORBA::Boolean _tao_unmarshal_v (TAO_InputCDR &);
  virtual ::CORBA::Boolean _tao_match_formal_type (ptrdiff_t ) const;

private:
  void operator= (const VBTDoctet & val);

};

// TAO_IDL - Generated from
// be/be_visitor_typecode/typecode_decl.cpp:34

extern  ::CORBA::TypeCode_ptr const _tc_VBTDoctet;

// TAO_IDL - Generated from
// be/be_visitor_valuebox/valuebox_ch.cpp:41

class VBTDfloat;

typedef
  TAO_Value_Var_T<
      VBTDfloat
    >
  VBTDfloat_var;

typedef
  TAO_Value_Out_T<
      VBTDfloat
    >
  VBTDfloat_out;

class  VBTDfloat
  : public virtual ::CORBA::DefaultValueRefCountBase
{
public:

  // TAO_IDL - Generated from
  // be/be_type.cpp:304


  typedef VBTDfloat_var _var_type;
  typedef VBTDfloat_out _out_type;

  static void _tao_any_destructor (void *);

  static VBTDfloat* _downcast ( ::CORBA::ValueBase *);
  ::CORBA::ValueBase * _copy_value (void);

  virtual const char* _tao_obv_repository_id (void) const;

  virtual void _tao_obv_truncatable_repo_ids (Repository_Id_List &ids) const;

  static const char* _tao_obv_static_repository_id (void);

  static ::CORBA::Boolean _tao_unmarshal (
      TAO_InputCDR &,
      VBTDfloat *&
    );

  virtual ::CORBA::TypeCode_ptr _tao_type (void) const;



  // TAO_IDL - Generated from
  // be/be_visitor_valuebox/valuebox_ch.cpp:690

  // Constructors
  VBTDfloat (void);
  VBTDfloat (CORBA::Float val);
  VBTDfloat (const VBTDfloat& val);

  // Assignment operator
  VBTDfloat& operator= (CORBA::Float val);

  // Accessor and modifier
  CORBA::Float _value (void) const;
  void _value (CORBA::Float val);

  // Access to the boxed value for method signatures
  CORBA::Float _boxed_in (void) const;
  CORBA::Float& _boxed_inout (void);
  CORBA::Float& _boxed_out (void);

private:
  CORBA::Float _pd_value;


  // TAO_IDL - Generated from
  // be/be_visitor_valuebox/valuebox_ch.cpp:114

protected:
  virtual ~VBTDfloat (void);
  virtual ::CORBA::Boolean _tao_marshal_v (TAO_OutputCDR &) const;
  virtual ::CORBA::Boolean _tao_unmarshal_v (TAO_InputCDR &);
  virtual ::CORBA::Boolean _tao_match_formal_type (ptrdiff_t ) const;

private:
  void operator= (const VBTDfloat & val);

};

// TAO_IDL - Generated from
// be/be_visitor_typecode/typecode_decl.cpp:34

extern  ::CORBA::TypeCode_ptr const _tc_VBTDfloat;

// TAO_IDL - Generated from
// be/be_visitor_valuebox/valuebox_ch.cpp:41

class VBTDdouble;

typedef
  TAO_Value_Var_T<
      VBTDdouble
    >
  VBTDdouble_var;

typedef
  TAO_Value_Out_T<
      VBTDdouble
    >
  VBTDdouble_out;

class  VBTDdouble
  : public virtual ::CORBA::DefaultValueRefCountBase
{
public:

  // TAO_IDL - Generated from
  // be/be_type.cpp:304


  typedef VBTDdouble_var _var_type;
  typedef VBTDdouble_out _out_type;

  static void _tao_any_destructor (void *);

  static VBTDdouble* _downcast ( ::CORBA::ValueBase *);
  ::CORBA::ValueBase * _copy_value (void);

  virtual const char* _tao_obv_repository_id (void) const;

  virtual void _tao_obv_truncatable_repo_ids (Repository_Id_List &ids) const;

  static const char* _tao_obv_static_repository_id (void);

  static ::CORBA::Boolean _tao_unmarshal (
      TAO_InputCDR &,
      VBTDdouble *&
    );

  virtual ::CORBA::TypeCode_ptr _tao_type (void) const;



  // TAO_IDL - Generated from
  // be/be_visitor_valuebox/valuebox_ch.cpp:690

  // Constructors
  VBTDdouble (void);
  VBTDdouble (CORBA::Double val);
  VBTDdouble (const VBTDdouble& val);

  // Assignment operator
  VBTDdouble& operator= (CORBA::Double val);

  // Accessor and modifier
  CORBA::Double _value (void) const;
  void _value (CORBA::Double val);

  // Access to the boxed value for method signatures
  CORBA::Double _boxed_in (void) const;
  CORBA::Double& _boxed_inout (void);
  CORBA::Double& _boxed_out (void);

private:
  CORBA::Double _pd_value;


  // TAO_IDL - Generated from
  // be/be_visitor_valuebox/valuebox_ch.cpp:114

protected:
  virtual ~VBTDdouble (void);
  virtual ::CORBA::Boolean _tao_marshal_v (TAO_OutputCDR &) const;
  virtual ::CORBA::Boolean _tao_unmarshal_v (TAO_InputCDR &);
  virtual ::CORBA::Boolean _tao_match_formal_type (ptrdiff_t ) const;

private:
  void operator= (const VBTDdouble & val);

};

// TAO_IDL - Generated from
// be/be_visitor_typecode/typecode_decl.cpp:34

extern  ::CORBA::TypeCode_ptr const _tc_VBTDdouble;

// TAO_IDL - Generated from
// be/be_visitor_valuebox/valuebox_ch.cpp:41

class VBTDlongdouble;

typedef
  TAO_Value_Var_T<
      VBTDlongdouble
    >
  VBTDlongdouble_var;

typedef
  TAO_Value_Out_T<
      VBTDlongdouble
    >
  VBTDlongdouble_out;

class  VBTDlongdouble
  : public virtual ::CORBA::DefaultValueRefCountBase
{
public:

  // TAO_IDL - Generated from
  // be/be_type.cpp:304


  typedef VBTDlongdouble_var _var_type;
  typedef VBTDlongdouble_out _out_type;

  static void _tao_any_destructor (void *);

  static VBTDlongdouble* _downcast ( ::CORBA::ValueBase *);
  ::CORBA::ValueBase * _copy_value (void);

  virtual const char* _tao_obv_repository_id (void) const;

  virtual void _tao_obv_truncatable_repo_ids (Repository_Id_List &ids) const;

  static const char* _tao_obv_static_repository_id (void);

  static ::CORBA::Boolean _tao_unmarshal (
      TAO_InputCDR &,
      VBTDlongdouble *&
    );

  virtual ::CORBA::TypeCode_ptr _tao_type (void) const;



  // TAO_IDL - Generated from
  // be/be_visitor_valuebox/valuebox_ch.cpp:690

  // Constructors
  VBTDlongdouble (void);
  VBTDlongdouble (CORBA::LongDouble val);
  VBTDlongdouble (const VBTDlongdouble& val);

  // Assignment operator
  VBTDlongdouble& operator= (CORBA::LongDouble val);

  // Accessor and modifier
  CORBA::LongDouble _value (void) const;
  void _value (CORBA::LongDouble val);

  // Access to the boxed value for method signatures
  CORBA::LongDouble _boxed_in (void) const;
  CORBA::LongDouble& _boxed_inout (void);
  CORBA::LongDouble& _boxed_out (void);

private:
  CORBA::LongDouble _pd_value;


  // TAO_IDL - Generated from
  // be/be_visitor_valuebox/valuebox_ch.cpp:114

protected:
  virtual ~VBTDlongdouble (void);
  virtual ::CORBA::Boolean _tao_marshal_v (TAO_OutputCDR &) const;
  virtual ::CORBA::Boolean _tao_unmarshal_v (TAO_InputCDR &);
  virtual ::CORBA::Boolean _tao_match_formal_type (ptrdiff_t ) const;

private:
  void operator= (const VBTDlongdouble & val);

};

// TAO_IDL - Generated from
// be/be_visitor_typecode/typecode_decl.cpp:34

extern  ::CORBA::TypeCode_ptr const _tc_VBTDlongdouble;

// TAO_IDL - Generated from
// be/be_visitor_valuebox/valuebox_ch.cpp:41

class VBTDenum;

typedef
  TAO_Value_Var_T<
      VBTDenum
    >
  VBTDenum_var;

typedef
  TAO_Value_Out_T<
      VBTDenum
    >
  VBTDenum_out;

class  VBTDenum
  : public virtual ::CORBA::DefaultValueRefCountBase
{
public:

  // TAO_IDL - Generated from
  // be/be_type.cpp:304


  typedef VBTDenum_var _var_type;
  typedef VBTDenum_out _out_type;

  static void _tao_any_destructor (void *);

  static VBTDenum* _downcast ( ::CORBA::ValueBase *);
  ::CORBA::ValueBase * _copy_value (void);

  virtual const char* _tao_obv_repository_id (void) const;

  virtual void _tao_obv_truncatable_repo_ids (Repository_Id_List &ids) const;

  static const char* _tao_obv_static_repository_id (void);

  static ::CORBA::Boolean _tao_unmarshal (
      TAO_InputCDR &,
      VBTDenum *&
    );

  virtual ::CORBA::TypeCode_ptr _tao_type (void) const;



  // TAO_IDL - Generated from
  // be/be_visitor_valuebox/valuebox_ch.cpp:690

  // Constructors
  VBTDenum (void);
  VBTDenum (Color val);
  VBTDenum (const VBTDenum& val);

  // Assignment operator
  VBTDenum& operator= (Color val);

  // Accessor and modifier
  Color _value (void) const;
  void _value (Color val);

  // Access to the boxed value for method signatures
  Color _boxed_in (void) const;
  Color& _boxed_inout (void);
  Color& _boxed_out (void);

private:
  Color _pd_value;


  // TAO_IDL - Generated from
  // be/be_visitor_valuebox/valuebox_ch.cpp:114

protected:
  virtual ~VBTDenum (void);
  virtual ::CORBA::Boolean _tao_marshal_v (TAO_OutputCDR &) const;
  virtual ::CORBA::Boolean _tao_unmarshal_v (TAO_InputCDR &);
  virtual ::CORBA::Boolean _tao_match_formal_type (ptrdiff_t ) const;

private:
  void operator= (const VBTDenum & val);

};

// TAO_IDL - Generated from
// be/be_visitor_typecode/typecode_decl.cpp:34

extern  ::CORBA::TypeCode_ptr const _tc_VBTDenum;

// TAO_IDL - Generated from
// be/be_visitor_valuebox/valuebox_ch.cpp:41

class VBany;

typedef
  TAO_Value_Var_T<
      VBany
    >
  VBany_var;

typedef
  TAO_Value_Out_T<
      VBany
    >
  VBany_out;

class  VBany
  : public virtual ::CORBA::DefaultValueRefCountBase
{
public:

  // TAO_IDL - Generated from
  // be/be_type.cpp:304


  typedef VBany_var _var_type;
  typedef VBany_out _out_type;

  static void _tao_any_destructor (void *);

  static VBany* _downcast ( ::CORBA::ValueBase *);
  ::CORBA::ValueBase * _copy_value (void);

  virtual const char* _tao_obv_repository_id (void) const;

  virtual void _tao_obv_truncatable_repo_ids (Repository_Id_List &ids) const;

  static const char* _tao_obv_static_repository_id (void);

  static ::CORBA::Boolean _tao_unmarshal (
      TAO_InputCDR &,
      VBany *&
    );

  virtual ::CORBA::TypeCode_ptr _tao_type (void) const;



  // TAO_IDL - Generated from
  // be/be_visitor_valuebox/valuebox_ch.cpp:690

  // Constructors
  VBany (void);
  VBany (const CORBA::Any& val);
  VBany (const VBany& val);

  // Assignment operator
  VBany& operator= (const ::CORBA::Any& val);

  // Accessors and modifier
  const CORBA::Any& _value (void) const;
  CORBA::Any& _value (void);
  void _value (const CORBA::Any& val);

  // Access to the boxed value for method signatures
  const ::CORBA::Any& _boxed_in (void) const;
  CORBA::Any& _boxed_inout (void);
  CORBA::Any*& _boxed_out (void);

private:
  CORBA::Any_var _pd_value;


  // TAO_IDL - Generated from
  // be/be_visitor_valuebox/valuebox_ch.cpp:114

protected:
  virtual ~VBany (void);
  virtual ::CORBA::Boolean _tao_marshal_v (TAO_OutputCDR &) const;
  virtual ::CORBA::Boolean _tao_unmarshal_v (TAO_InputCDR &);
  virtual ::CORBA::Boolean _tao_match_formal_type (ptrdiff_t ) const;

private:
  void operator= (const VBany & val);

};

// TAO_IDL - Generated from
// be/be_visitor_typecode/typecode_decl.cpp:34

extern  ::CORBA::TypeCode_ptr const _tc_VBany;

// TAO_IDL - Generated from
// be/be_visitor_typedef/typedef_ch.cpp:370

typedef ::CORBA::Any TDany;
typedef ::CORBA::Any_ptr TDany_ptr;
typedef ::CORBA::Any_var TDany_var;
typedef ::CORBA::Any_out TDany_out;

// TAO_IDL - Generated from
// be/be_visitor_typecode/typecode_decl.cpp:34

extern  ::CORBA::TypeCode_ptr const _tc_TDany;

// TAO_IDL - Generated from
// be/be_visitor_valuebox/valuebox_ch.cpp:41

class VBTDany;

typedef
  TAO_Value_Var_T<
      VBTDany
    >
  VBTDany_var;

typedef
  TAO_Value_Out_T<
      VBTDany
    >
  VBTDany_out;

class  VBTDany
  : public virtual ::CORBA::DefaultValueRefCountBase
{
public:

  // TAO_IDL - Generated from
  // be/be_type.cpp:304


  typedef VBTDany_var _var_type;
  typedef VBTDany_out _out_type;

  static void _tao_any_destructor (void *);

  static VBTDany* _downcast ( ::CORBA::ValueBase *);
  ::CORBA::ValueBase * _copy_value (void);

  virtual const char* _tao_obv_repository_id (void) const;

  virtual void _tao_obv_truncatable_repo_ids (Repository_Id_List &ids) const;

  static const char* _tao_obv_static_repository_id (void);

  static ::CORBA::Boolean _tao_unmarshal (
      TAO_InputCDR &,
      VBTDany *&
    );

  virtual ::CORBA::TypeCode_ptr _tao_type (void) const;



  // TAO_IDL - Generated from
  // be/be_visitor_valuebox/valuebox_ch.cpp:690

  // Constructors
  VBTDany (void);
  VBTDany (const CORBA::Any& val);
  VBTDany (const VBTDany& val);

  // Assignment operator
  VBTDany& operator= (const ::CORBA::Any& val);

  // Accessors and modifier
  const CORBA::Any& _value (void) const;
  CORBA::Any& _value (void);
  void _value (const CORBA::Any& val);

  // Access to the boxed value for method signatures
  const ::CORBA::Any& _boxed_in (void) const;
  CORBA::Any& _boxed_inout (void);
  CORBA::Any*& _boxed_out (void);

private:
  CORBA::Any_var _pd_value;


  // TAO_IDL - Generated from
  // be/be_visitor_valuebox/valuebox_ch.cpp:114

protected:
  virtual ~VBTDany (void);
  virtual ::CORBA::Boolean _tao_marshal_v (TAO_OutputCDR &) const;
  virtual ::CORBA::Boolean _tao_unmarshal_v (TAO_InputCDR &);
  virtual ::CORBA::Boolean _tao_match_formal_type (ptrdiff_t ) const;

private:
  void operator= (const VBTDany & val);

};

// TAO_IDL - Generated from
// be/be_visitor_typecode/typecode_decl.cpp:34

extern  ::CORBA::TypeCode_ptr const _tc_VBTDany;

// TAO_IDL - Generated from
// be/be_visitor_module/module_ch.cpp:35

namespace vb_basic
{

  // TAO_IDL - Generated from
  // be/be_visitor_valuebox/valuebox_ch.cpp:41

  class M_VBlong;

  typedef
    TAO_Value_Var_T<
        M_VBlong
      >
    M_VBlong_var;

  typedef
    TAO_Value_Out_T<
        M_VBlong
      >
    M_VBlong_out;

  class  M_VBlong
    : public virtual ::CORBA::DefaultValueRefCountBase
  {
  public:

    // TAO_IDL - Generated from
    // be/be_type.cpp:304


    typedef M_VBlong_var _var_type;
    typedef M_VBlong_out _out_type;

    static void _tao_any_destructor (void *);

    static M_VBlong* _downcast ( ::CORBA::ValueBase *);
    ::CORBA::ValueBase * _copy_value (void);

    virtual const char* _tao_obv_repository_id (void) const;

    virtual void _tao_obv_truncatable_repo_ids (Repository_Id_List &ids) const;

    static const char* _tao_obv_static_repository_id (void);

    static ::CORBA::Boolean _tao_unmarshal (
        TAO_InputCDR &,
        M_VBlong *&
      );

    virtual ::CORBA::TypeCode_ptr _tao_type (void) const;



    // TAO_IDL - Generated from
    // be/be_visitor_valuebox/valuebox_ch.cpp:690

    // Constructors
    M_VBlong (void);
    M_VBlong (CORBA::Long val);
    M_VBlong (const M_VBlong& val);

    // Assignment operator
    M_VBlong& operator= (CORBA::Long val);

    // Accessor and modifier
    CORBA::Long _value (void) const;
    void _value (CORBA::Long val);

    // Access to the boxed value for method signatures
    CORBA::Long _boxed_in (void) const;
    CORBA::Long& _boxed_inout (void);
    CORBA::Long& _boxed_out (void);

  private:
    CORBA::Long _pd_value;


    // TAO_IDL - Generated from
    // be/be_visitor_valuebox/valuebox_ch.cpp:114

  protected:
    virtual ~M_VBlong (void);
    virtual ::CORBA::Boolean _tao_marshal_v (TAO_OutputCDR &) const;
    virtual ::CORBA::Boolean _tao_unmarshal_v (TAO_InputCDR &);
    virtual ::CORBA::Boolean _tao_match_formal_type (ptrdiff_t ) const;

  private:
    void operator= (const M_VBlong & val);

  };

  // TAO_IDL - Generated from
  // be/be_visitor_typecode/typecode_decl.cpp:34

  extern  ::CORBA::TypeCode_ptr const _tc_M_VBlong;

  // TAO_IDL - Generated from
  // be/be_interface.cpp:748

#if !defined (_VB_BASIC_TEST__VAR_OUT_CH_)
#define _VB_BASIC_TEST__VAR_OUT_CH_

  class Test;
  typedef Test *Test_ptr;

  typedef
    TAO_Objref_Var_T<
        Test
      >
    Test_var;

  typedef
    TAO_Objref_Out_T<
        Test
      >
    Test_out;

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // be/be_visitor_interface/interface_ch.cpp:40

  class  Test
    : public virtual ::CORBA::Object
  {
  public:
    friend class TAO::Narrow_Utils<Test>;

    // TAO_IDL - Generated from
    // be/be_type.cpp:304

    typedef Test_ptr _ptr_type;
    typedef Test_var _var_type;
    typedef Test_out _out_type;

    static void _tao_any_destructor (void *);

    // The static operations.
    static Test_ptr _duplicate (Test_ptr obj);

    static void _tao_release (Test_ptr obj);

    static Test_ptr _narrow (::CORBA::Object_ptr obj);
    static Test_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
    static Test_ptr _nil (void);

    virtual ::vb_basic::M_VBlong * basic_op1 (
      ::vb_basic::M_VBlong * p1,
      ::vb_basic::M_VBlong *& p2,
      ::vb_basic::M_VBlong_out p3);

    // TAO_IDL - Generated from
    // be/be_visitor_interface/interface_ch.cpp:137

    virtual ::CORBA::Boolean _is_a (const char *type_id);
    virtual const char* _interface_repository_id (void) const;
    virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);

  protected:
    // Concrete interface only.
    Test (void);

    // Concrete non-local interface only.
    Test (
        ::IOP::IOR *ior,
        TAO_ORB_Core *orb_core);

    // Non-local interface only.
    Test (
        TAO_Stub *objref,
        ::CORBA::Boolean _tao_collocated = false,
        TAO_Abstract_ServantBase *servant = 0,
        TAO_ORB_Core *orb_core = 0);

    virtual ~Test (void);

  private:
    // Private and unimplemented for concrete interfaces.
    Test (const Test &);

    void operator= (const Test &);
  };

  // TAO_IDL - Generated from
  // be/be_visitor_typecode/typecode_decl.cpp:34

  extern  ::CORBA::TypeCode_ptr const _tc_Test;

// TAO_IDL - Generated from
// be/be_visitor_module/module_ch.cpp:64

} // module vb_basic

// TAO_IDL - Generated from
// be/be_visitor_valuebox/valuebox_ch.cpp:41

class VBinterface;

typedef
  TAO_Value_Var_T<
      VBinterface
    >
  VBinterface_var;

typedef
  TAO_Value_Out_T<
      VBinterface
    >
  VBinterface_out;

class  VBinterface
  : public virtual ::CORBA::DefaultValueRefCountBase
{
public:

  // TAO_IDL - Generated from
  // be/be_type.cpp:304


  typedef VBinterface_var _var_type;
  typedef VBinterface_out _out_type;

  static void _tao_any_destructor (void *);

  static VBinterface* _downcast ( ::CORBA::ValueBase *);
  ::CORBA::ValueBase * _copy_value (void);

  virtual const char* _tao_obv_repository_id (void) const;

  virtual void _tao_obv_truncatable_repo_ids (Repository_Id_List &ids) const;

  static const char* _tao_obv_static_repository_id (void);

  static ::CORBA::Boolean _tao_unmarshal (
      TAO_InputCDR &,
      VBinterface *&
    );

  virtual ::CORBA::TypeCode_ptr _tao_type (void) const;



  // TAO_IDL - Generated from
  // be/be_visitor_valuebox/valuebox_ch.cpp:690

  // Constructors
  VBinterface (void);
  VBinterface (vb_basic::Test_ptr val);
  VBinterface (const VBinterface& val);

  // Assignment operator
  VBinterface& operator= (vb_basic::Test_ptr val);

  // Accessor and modifier
  vb_basic::Test_ptr _value (void) const;
  void _value (vb_basic::Test_ptr val);

  // Access to the boxed value for method signatures
  vb_basic::Test_ptr _boxed_in (void) const;
  vb_basic::Test_ptr& _boxed_inout (void);
  vb_basic::Test_ptr& _boxed_out (void);

private:
  vb_basic::Test_ptr _pd_value;


  // TAO_IDL - Generated from
  // be/be_visitor_valuebox/valuebox_ch.cpp:114

protected:
  virtual ~VBinterface (void);
  virtual ::CORBA::Boolean _tao_marshal_v (TAO_OutputCDR &) const;
  virtual ::CORBA::Boolean _tao_unmarshal_v (TAO_InputCDR &);
  virtual ::CORBA::Boolean _tao_match_formal_type (ptrdiff_t ) const;

private:
  void operator= (const VBinterface & val);

};

// TAO_IDL - Generated from
// be/be_visitor_typecode/typecode_decl.cpp:34

extern  ::CORBA::TypeCode_ptr const _tc_VBinterface;

// TAO_IDL - Generated from
// be/be_visitor_arg_traits.cpp:66

TAO_BEGIN_VERSIONED_NAMESPACE_DECL


// Arg traits specializations.
namespace TAO
{

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:902

  template<>
  class Arg_Traits< ::Color>
    : public
        Basic_Arg_Traits_T<
            ::Color,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:250

  template<>
  class Arg_Traits< ::VBshort>
    : public
        Object_Arg_Traits_T<
            ::VBshort *,
            ::VBshort_var,
            ::VBshort_out,
            TAO::Value_Traits<VBshort>,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:250

  template<>
  class Arg_Traits< ::VBlong>
    : public
        Object_Arg_Traits_T<
            ::VBlong *,
            ::VBlong_var,
            ::VBlong_out,
            TAO::Value_Traits<VBlong>,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:250

  template<>
  class Arg_Traits< ::VBlonglong>
    : public
        Object_Arg_Traits_T<
            ::VBlonglong *,
            ::VBlonglong_var,
            ::VBlonglong_out,
            TAO::Value_Traits<VBlonglong>,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:250

  template<>
  class Arg_Traits< ::VBushort>
    : public
        Object_Arg_Traits_T<
            ::VBushort *,
            ::VBushort_var,
            ::VBushort_out,
            TAO::Value_Traits<VBushort>,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:250

  template<>
  class Arg_Traits< ::VBulong>
    : public
        Object_Arg_Traits_T<
            ::VBulong *,
            ::VBulong_var,
            ::VBulong_out,
            TAO::Value_Traits<VBulong>,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:250

  template<>
  class Arg_Traits< ::VBulonglong>
    : public
        Object_Arg_Traits_T<
            ::VBulonglong *,
            ::VBulonglong_var,
            ::VBulonglong_out,
            TAO::Value_Traits<VBulonglong>,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:250

  template<>
  class Arg_Traits< ::VBchar>
    : public
        Object_Arg_Traits_T<
            ::VBchar *,
            ::VBchar_var,
            ::VBchar_out,
            TAO::Value_Traits<VBchar>,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:250

  template<>
  class Arg_Traits< ::VBwchar>
    : public
        Object_Arg_Traits_T<
            ::VBwchar *,
            ::VBwchar_var,
            ::VBwchar_out,
            TAO::Value_Traits<VBwchar>,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:250

  template<>
  class Arg_Traits< ::VBboolean>
    : public
        Object_Arg_Traits_T<
            ::VBboolean *,
            ::VBboolean_var,
            ::VBboolean_out,
            TAO::Value_Traits<VBboolean>,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:250

  template<>
  class Arg_Traits< ::VBoctet>
    : public
        Object_Arg_Traits_T<
            ::VBoctet *,
            ::VBoctet_var,
            ::VBoctet_out,
            TAO::Value_Traits<VBoctet>,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:250

  template<>
  class Arg_Traits< ::VBfloat>
    : public
        Object_Arg_Traits_T<
            ::VBfloat *,
            ::VBfloat_var,
            ::VBfloat_out,
            TAO::Value_Traits<VBfloat>,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:250

  template<>
  class Arg_Traits< ::VBdouble>
    : public
        Object_Arg_Traits_T<
            ::VBdouble *,
            ::VBdouble_var,
            ::VBdouble_out,
            TAO::Value_Traits<VBdouble>,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:250

  template<>
  class Arg_Traits< ::VBlongdouble>
    : public
        Object_Arg_Traits_T<
            ::VBlongdouble *,
            ::VBlongdouble_var,
            ::VBlongdouble_out,
            TAO::Value_Traits<VBlongdouble>,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:250

  template<>
  class Arg_Traits< ::VBenum>
    : public
        Object_Arg_Traits_T<
            ::VBenum *,
            ::VBenum_var,
            ::VBenum_out,
            TAO::Value_Traits<VBenum>,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:250

  template<>
  class Arg_Traits< ::VBTDshort>
    : public
        Object_Arg_Traits_T<
            ::VBTDshort *,
            ::VBTDshort_var,
            ::VBTDshort_out,
            TAO::Value_Traits<VBTDshort>,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:250

  template<>
  class Arg_Traits< ::VBTDlong>
    : public
        Object_Arg_Traits_T<
            ::VBTDlong *,
            ::VBTDlong_var,
            ::VBTDlong_out,
            TAO::Value_Traits<VBTDlong>,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:250

  template<>
  class Arg_Traits< ::VBTDlonglong>
    : public
        Object_Arg_Traits_T<
            ::VBTDlonglong *,
            ::VBTDlonglong_var,
            ::VBTDlonglong_out,
            TAO::Value_Traits<VBTDlonglong>,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:250

  template<>
  class Arg_Traits< ::VBTDushort>
    : public
        Object_Arg_Traits_T<
            ::VBTDushort *,
            ::VBTDushort_var,
            ::VBTDushort_out,
            TAO::Value_Traits<VBTDushort>,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:250

  template<>
  class Arg_Traits< ::VBTDulong>
    : public
        Object_Arg_Traits_T<
            ::VBTDulong *,
            ::VBTDulong_var,
            ::VBTDulong_out,
            TAO::Value_Traits<VBTDulong>,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:250

  template<>
  class Arg_Traits< ::VBTDulonglong>
    : public
        Object_Arg_Traits_T<
            ::VBTDulonglong *,
            ::VBTDulonglong_var,
            ::VBTDulonglong_out,
            TAO::Value_Traits<VBTDulonglong>,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:250

  template<>
  class Arg_Traits< ::VBTDchar>
    : public
        Object_Arg_Traits_T<
            ::VBTDchar *,
            ::VBTDchar_var,
            ::VBTDchar_out,
            TAO::Value_Traits<VBTDchar>,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:250

  template<>
  class Arg_Traits< ::VBTDwchar>
    : public
        Object_Arg_Traits_T<
            ::VBTDwchar *,
            ::VBTDwchar_var,
            ::VBTDwchar_out,
            TAO::Value_Traits<VBTDwchar>,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:250

  template<>
  class Arg_Traits< ::VBTDboolean>
    : public
        Object_Arg_Traits_T<
            ::VBTDboolean *,
            ::VBTDboolean_var,
            ::VBTDboolean_out,
            TAO::Value_Traits<VBTDboolean>,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:250

  template<>
  class Arg_Traits< ::VBTDoctet>
    : public
        Object_Arg_Traits_T<
            ::VBTDoctet *,
            ::VBTDoctet_var,
            ::VBTDoctet_out,
            TAO::Value_Traits<VBTDoctet>,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:250

  template<>
  class Arg_Traits< ::VBTDfloat>
    : public
        Object_Arg_Traits_T<
            ::VBTDfloat *,
            ::VBTDfloat_var,
            ::VBTDfloat_out,
            TAO::Value_Traits<VBTDfloat>,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:250

  template<>
  class Arg_Traits< ::VBTDdouble>
    : public
        Object_Arg_Traits_T<
            ::VBTDdouble *,
            ::VBTDdouble_var,
            ::VBTDdouble_out,
            TAO::Value_Traits<VBTDdouble>,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:250

  template<>
  class Arg_Traits< ::VBTDlongdouble>
    : public
        Object_Arg_Traits_T<
            ::VBTDlongdouble *,
            ::VBTDlongdouble_var,
            ::VBTDlongdouble_out,
            TAO::Value_Traits<VBTDlongdouble>,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:250

  template<>
  class Arg_Traits< ::VBTDenum>
    : public
        Object_Arg_Traits_T<
            ::VBTDenum *,
            ::VBTDenum_var,
            ::VBTDenum_out,
            TAO::Value_Traits<VBTDenum>,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:250

  template<>
  class Arg_Traits< ::VBany>
    : public
        Object_Arg_Traits_T<
            ::VBany *,
            ::VBany_var,
            ::VBany_out,
            TAO::Value_Traits<VBany>,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:250

  template<>
  class Arg_Traits< ::VBTDany>
    : public
        Object_Arg_Traits_T<
            ::VBTDany *,
            ::VBTDany_var,
            ::VBTDany_out,
            TAO::Value_Traits<VBTDany>,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:250

  template<>
  class Arg_Traits< ::vb_basic::M_VBlong>
    : public
        Object_Arg_Traits_T<
            ::vb_basic::M_VBlong *,
            ::vb_basic::M_VBlong_var,
            ::vb_basic::M_VBlong_out,
            TAO::Value_Traits<vb_basic::M_VBlong>,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:145

#if !defined (_VB_BASIC_TEST__ARG_TRAITS_)
#define _VB_BASIC_TEST__ARG_TRAITS_

  template<>
  class  Arg_Traits< ::vb_basic::Test>
    : public
        Object_Arg_Traits_T<
            ::vb_basic::Test_ptr,
            ::vb_basic::Test_var,
            ::vb_basic::Test_out,
            TAO::Objref_Traits<vb_basic::Test>,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:250

  template<>
  class Arg_Traits< ::VBinterface>
    : public
        Object_Arg_Traits_T<
            ::VBinterface *,
            ::VBinterface_var,
            ::VBinterface_out,
            TAO::Value_Traits<VBinterface>,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_traits.cpp:60

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Traits specializations.
namespace TAO
{

#if !defined (_VBSHORT__TRAITS_)
#define _VBSHORT__TRAITS_

  template<>
  struct  Value_Traits<VBshort>
  {
    static void add_ref (VBshort *);
    static void remove_ref (VBshort *);
    static void release (VBshort *);
  };

#endif /* end #if !defined */

#if !defined (_VBLONG__TRAITS_)
#define _VBLONG__TRAITS_

  template<>
  struct  Value_Traits<VBlong>
  {
    static void add_ref (VBlong *);
    static void remove_ref (VBlong *);
    static void release (VBlong *);
  };

#endif /* end #if !defined */

#if !defined (_VBLONGLONG__TRAITS_)
#define _VBLONGLONG__TRAITS_

  template<>
  struct  Value_Traits<VBlonglong>
  {
    static void add_ref (VBlonglong *);
    static void remove_ref (VBlonglong *);
    static void release (VBlonglong *);
  };

#endif /* end #if !defined */

#if !defined (_VBUSHORT__TRAITS_)
#define _VBUSHORT__TRAITS_

  template<>
  struct  Value_Traits<VBushort>
  {
    static void add_ref (VBushort *);
    static void remove_ref (VBushort *);
    static void release (VBushort *);
  };

#endif /* end #if !defined */

#if !defined (_VBULONG__TRAITS_)
#define _VBULONG__TRAITS_

  template<>
  struct  Value_Traits<VBulong>
  {
    static void add_ref (VBulong *);
    static void remove_ref (VBulong *);
    static void release (VBulong *);
  };

#endif /* end #if !defined */

#if !defined (_VBULONGLONG__TRAITS_)
#define _VBULONGLONG__TRAITS_

  template<>
  struct  Value_Traits<VBulonglong>
  {
    static void add_ref (VBulonglong *);
    static void remove_ref (VBulonglong *);
    static void release (VBulonglong *);
  };

#endif /* end #if !defined */

#if !defined (_VBCHAR__TRAITS_)
#define _VBCHAR__TRAITS_

  template<>
  struct  Value_Traits<VBchar>
  {
    static void add_ref (VBchar *);
    static void remove_ref (VBchar *);
    static void release (VBchar *);
  };

#endif /* end #if !defined */

#if !defined (_VBWCHAR__TRAITS_)
#define _VBWCHAR__TRAITS_

  template<>
  struct  Value_Traits<VBwchar>
  {
    static void add_ref (VBwchar *);
    static void remove_ref (VBwchar *);
    static void release (VBwchar *);
  };

#endif /* end #if !defined */

#if !defined (_VBBOOLEAN__TRAITS_)
#define _VBBOOLEAN__TRAITS_

  template<>
  struct  Value_Traits<VBboolean>
  {
    static void add_ref (VBboolean *);
    static void remove_ref (VBboolean *);
    static void release (VBboolean *);
  };

#endif /* end #if !defined */

#if !defined (_VBOCTET__TRAITS_)
#define _VBOCTET__TRAITS_

  template<>
  struct  Value_Traits<VBoctet>
  {
    static void add_ref (VBoctet *);
    static void remove_ref (VBoctet *);
    static void release (VBoctet *);
  };

#endif /* end #if !defined */

#if !defined (_VBFLOAT__TRAITS_)
#define _VBFLOAT__TRAITS_

  template<>
  struct  Value_Traits<VBfloat>
  {
    static void add_ref (VBfloat *);
    static void remove_ref (VBfloat *);
    static void release (VBfloat *);
  };

#endif /* end #if !defined */

#if !defined (_VBDOUBLE__TRAITS_)
#define _VBDOUBLE__TRAITS_

  template<>
  struct  Value_Traits<VBdouble>
  {
    static void add_ref (VBdouble *);
    static void remove_ref (VBdouble *);
    static void release (VBdouble *);
  };

#endif /* end #if !defined */

#if !defined (_VBLONGDOUBLE__TRAITS_)
#define _VBLONGDOUBLE__TRAITS_

  template<>
  struct  Value_Traits<VBlongdouble>
  {
    static void add_ref (VBlongdouble *);
    static void remove_ref (VBlongdouble *);
    static void release (VBlongdouble *);
  };

#endif /* end #if !defined */

#if !defined (_VBENUM__TRAITS_)
#define _VBENUM__TRAITS_

  template<>
  struct  Value_Traits<VBenum>
  {
    static void add_ref (VBenum *);
    static void remove_ref (VBenum *);
    static void release (VBenum *);
  };

#endif /* end #if !defined */

#if !defined (_VBTDSHORT__TRAITS_)
#define _VBTDSHORT__TRAITS_

  template<>
  struct  Value_Traits<VBTDshort>
  {
    static void add_ref (VBTDshort *);
    static void remove_ref (VBTDshort *);
    static void release (VBTDshort *);
  };

#endif /* end #if !defined */

#if !defined (_VBTDLONG__TRAITS_)
#define _VBTDLONG__TRAITS_

  template<>
  struct  Value_Traits<VBTDlong>
  {
    static void add_ref (VBTDlong *);
    static void remove_ref (VBTDlong *);
    static void release (VBTDlong *);
  };

#endif /* end #if !defined */

#if !defined (_VBTDLONGLONG__TRAITS_)
#define _VBTDLONGLONG__TRAITS_

  template<>
  struct  Value_Traits<VBTDlonglong>
  {
    static void add_ref (VBTDlonglong *);
    static void remove_ref (VBTDlonglong *);
    static void release (VBTDlonglong *);
  };

#endif /* end #if !defined */

#if !defined (_VBTDUSHORT__TRAITS_)
#define _VBTDUSHORT__TRAITS_

  template<>
  struct  Value_Traits<VBTDushort>
  {
    static void add_ref (VBTDushort *);
    static void remove_ref (VBTDushort *);
    static void release (VBTDushort *);
  };

#endif /* end #if !defined */

#if !defined (_VBTDULONG__TRAITS_)
#define _VBTDULONG__TRAITS_

  template<>
  struct  Value_Traits<VBTDulong>
  {
    static void add_ref (VBTDulong *);
    static void remove_ref (VBTDulong *);
    static void release (VBTDulong *);
  };

#endif /* end #if !defined */

#if !defined (_VBTDULONGLONG__TRAITS_)
#define _VBTDULONGLONG__TRAITS_

  template<>
  struct  Value_Traits<VBTDulonglong>
  {
    static void add_ref (VBTDulonglong *);
    static void remove_ref (VBTDulonglong *);
    static void release (VBTDulonglong *);
  };

#endif /* end #if !defined */

#if !defined (_VBTDCHAR__TRAITS_)
#define _VBTDCHAR__TRAITS_

  template<>
  struct  Value_Traits<VBTDchar>
  {
    static void add_ref (VBTDchar *);
    static void remove_ref (VBTDchar *);
    static void release (VBTDchar *);
  };

#endif /* end #if !defined */

#if !defined (_VBTDWCHAR__TRAITS_)
#define _VBTDWCHAR__TRAITS_

  template<>
  struct  Value_Traits<VBTDwchar>
  {
    static void add_ref (VBTDwchar *);
    static void remove_ref (VBTDwchar *);
    static void release (VBTDwchar *);
  };

#endif /* end #if !defined */

#if !defined (_VBTDBOOLEAN__TRAITS_)
#define _VBTDBOOLEAN__TRAITS_

  template<>
  struct  Value_Traits<VBTDboolean>
  {
    static void add_ref (VBTDboolean *);
    static void remove_ref (VBTDboolean *);
    static void release (VBTDboolean *);
  };

#endif /* end #if !defined */

#if !defined (_VBTDOCTET__TRAITS_)
#define _VBTDOCTET__TRAITS_

  template<>
  struct  Value_Traits<VBTDoctet>
  {
    static void add_ref (VBTDoctet *);
    static void remove_ref (VBTDoctet *);
    static void release (VBTDoctet *);
  };

#endif /* end #if !defined */

#if !defined (_VBTDFLOAT__TRAITS_)
#define _VBTDFLOAT__TRAITS_

  template<>
  struct  Value_Traits<VBTDfloat>
  {
    static void add_ref (VBTDfloat *);
    static void remove_ref (VBTDfloat *);
    static void release (VBTDfloat *);
  };

#endif /* end #if !defined */

#if !defined (_VBTDDOUBLE__TRAITS_)
#define _VBTDDOUBLE__TRAITS_

  template<>
  struct  Value_Traits<VBTDdouble>
  {
    static void add_ref (VBTDdouble *);
    static void remove_ref (VBTDdouble *);
    static void release (VBTDdouble *);
  };

#endif /* end #if !defined */

#if !defined (_VBTDLONGDOUBLE__TRAITS_)
#define _VBTDLONGDOUBLE__TRAITS_

  template<>
  struct  Value_Traits<VBTDlongdouble>
  {
    static void add_ref (VBTDlongdouble *);
    static void remove_ref (VBTDlongdouble *);
    static void release (VBTDlongdouble *);
  };

#endif /* end #if !defined */

#if !defined (_VBTDENUM__TRAITS_)
#define _VBTDENUM__TRAITS_

  template<>
  struct  Value_Traits<VBTDenum>
  {
    static void add_ref (VBTDenum *);
    static void remove_ref (VBTDenum *);
    static void release (VBTDenum *);
  };

#endif /* end #if !defined */

#if !defined (_VBANY__TRAITS_)
#define _VBANY__TRAITS_

  template<>
  struct  Value_Traits<VBany>
  {
    static void add_ref (VBany *);
    static void remove_ref (VBany *);
    static void release (VBany *);
  };

#endif /* end #if !defined */

#if !defined (_VBTDANY__TRAITS_)
#define _VBTDANY__TRAITS_

  template<>
  struct  Value_Traits<VBTDany>
  {
    static void add_ref (VBTDany *);
    static void remove_ref (VBTDany *);
    static void release (VBTDany *);
  };

#endif /* end #if !defined */

#if !defined (_VB_BASIC_M_VBLONG__TRAITS_)
#define _VB_BASIC_M_VBLONG__TRAITS_

  template<>
  struct  Value_Traits<vb_basic::M_VBlong>
  {
    static void add_ref (vb_basic::M_VBlong *);
    static void remove_ref (vb_basic::M_VBlong *);
    static void release (vb_basic::M_VBlong *);
  };

#endif /* end #if !defined */

#if !defined (_VB_BASIC_TEST__TRAITS_)
#define _VB_BASIC_TEST__TRAITS_

  template<>
  struct  Objref_Traits< ::vb_basic::Test>
  {
    static ::vb_basic::Test_ptr duplicate (
        ::vb_basic::Test_ptr p);
    static void release (
        ::vb_basic::Test_ptr p);
    static ::vb_basic::Test_ptr nil (void);
    static ::CORBA::Boolean marshal (
        const ::vb_basic::Test_ptr p,
        TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_VBINTERFACE__TRAITS_)
#define _VBINTERFACE__TRAITS_

  template<>
  struct  Value_Traits<VBinterface>
  {
    static void add_ref (VBinterface *);
    static void remove_ref (VBinterface *);
    static void release (VBinterface *);
  };

#endif /* end #if !defined */
}
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_enum/any_op_ch.cpp:36
TAO_BEGIN_VERSIONED_NAMESPACE_DECL



 void operator<<= (::CORBA::Any &, Color);
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, Color &);
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_valuebox/any_op_ch.cpp:43


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 void operator<<= (::CORBA::Any &, VBshort *); // copying
 void operator<<= (::CORBA::Any &, VBshort **); // non-copying
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, VBshort *&);
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_valuebox/any_op_ch.cpp:43


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 void operator<<= (::CORBA::Any &, VBlong *); // copying
 void operator<<= (::CORBA::Any &, VBlong **); // non-copying
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, VBlong *&);
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_valuebox/any_op_ch.cpp:43


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 void operator<<= (::CORBA::Any &, VBlonglong *); // copying
 void operator<<= (::CORBA::Any &, VBlonglong **); // non-copying
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, VBlonglong *&);
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_valuebox/any_op_ch.cpp:43


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 void operator<<= (::CORBA::Any &, VBushort *); // copying
 void operator<<= (::CORBA::Any &, VBushort **); // non-copying
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, VBushort *&);
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_valuebox/any_op_ch.cpp:43


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 void operator<<= (::CORBA::Any &, VBulong *); // copying
 void operator<<= (::CORBA::Any &, VBulong **); // non-copying
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, VBulong *&);
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_valuebox/any_op_ch.cpp:43


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 void operator<<= (::CORBA::Any &, VBulonglong *); // copying
 void operator<<= (::CORBA::Any &, VBulonglong **); // non-copying
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, VBulonglong *&);
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_valuebox/any_op_ch.cpp:43


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 void operator<<= (::CORBA::Any &, VBchar *); // copying
 void operator<<= (::CORBA::Any &, VBchar **); // non-copying
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, VBchar *&);
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_valuebox/any_op_ch.cpp:43


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 void operator<<= (::CORBA::Any &, VBwchar *); // copying
 void operator<<= (::CORBA::Any &, VBwchar **); // non-copying
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, VBwchar *&);
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_valuebox/any_op_ch.cpp:43


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 void operator<<= (::CORBA::Any &, VBboolean *); // copying
 void operator<<= (::CORBA::Any &, VBboolean **); // non-copying
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, VBboolean *&);
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_valuebox/any_op_ch.cpp:43


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 void operator<<= (::CORBA::Any &, VBoctet *); // copying
 void operator<<= (::CORBA::Any &, VBoctet **); // non-copying
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, VBoctet *&);
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_valuebox/any_op_ch.cpp:43


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 void operator<<= (::CORBA::Any &, VBfloat *); // copying
 void operator<<= (::CORBA::Any &, VBfloat **); // non-copying
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, VBfloat *&);
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_valuebox/any_op_ch.cpp:43


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 void operator<<= (::CORBA::Any &, VBdouble *); // copying
 void operator<<= (::CORBA::Any &, VBdouble **); // non-copying
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, VBdouble *&);
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_valuebox/any_op_ch.cpp:43


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 void operator<<= (::CORBA::Any &, VBlongdouble *); // copying
 void operator<<= (::CORBA::Any &, VBlongdouble **); // non-copying
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, VBlongdouble *&);
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_valuebox/any_op_ch.cpp:43


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 void operator<<= (::CORBA::Any &, VBenum *); // copying
 void operator<<= (::CORBA::Any &, VBenum **); // non-copying
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, VBenum *&);
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_valuebox/any_op_ch.cpp:43


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 void operator<<= (::CORBA::Any &, VBTDshort *); // copying
 void operator<<= (::CORBA::Any &, VBTDshort **); // non-copying
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, VBTDshort *&);
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_valuebox/any_op_ch.cpp:43


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 void operator<<= (::CORBA::Any &, VBTDlong *); // copying
 void operator<<= (::CORBA::Any &, VBTDlong **); // non-copying
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, VBTDlong *&);
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_valuebox/any_op_ch.cpp:43


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 void operator<<= (::CORBA::Any &, VBTDlonglong *); // copying
 void operator<<= (::CORBA::Any &, VBTDlonglong **); // non-copying
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, VBTDlonglong *&);
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_valuebox/any_op_ch.cpp:43


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 void operator<<= (::CORBA::Any &, VBTDushort *); // copying
 void operator<<= (::CORBA::Any &, VBTDushort **); // non-copying
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, VBTDushort *&);
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_valuebox/any_op_ch.cpp:43


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 void operator<<= (::CORBA::Any &, VBTDulong *); // copying
 void operator<<= (::CORBA::Any &, VBTDulong **); // non-copying
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, VBTDulong *&);
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_valuebox/any_op_ch.cpp:43


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 void operator<<= (::CORBA::Any &, VBTDulonglong *); // copying
 void operator<<= (::CORBA::Any &, VBTDulonglong **); // non-copying
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, VBTDulonglong *&);
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_valuebox/any_op_ch.cpp:43


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 void operator<<= (::CORBA::Any &, VBTDchar *); // copying
 void operator<<= (::CORBA::Any &, VBTDchar **); // non-copying
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, VBTDchar *&);
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_valuebox/any_op_ch.cpp:43


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 void operator<<= (::CORBA::Any &, VBTDwchar *); // copying
 void operator<<= (::CORBA::Any &, VBTDwchar **); // non-copying
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, VBTDwchar *&);
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_valuebox/any_op_ch.cpp:43


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 void operator<<= (::CORBA::Any &, VBTDboolean *); // copying
 void operator<<= (::CORBA::Any &, VBTDboolean **); // non-copying
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, VBTDboolean *&);
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_valuebox/any_op_ch.cpp:43


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 void operator<<= (::CORBA::Any &, VBTDoctet *); // copying
 void operator<<= (::CORBA::Any &, VBTDoctet **); // non-copying
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, VBTDoctet *&);
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_valuebox/any_op_ch.cpp:43


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 void operator<<= (::CORBA::Any &, VBTDfloat *); // copying
 void operator<<= (::CORBA::Any &, VBTDfloat **); // non-copying
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, VBTDfloat *&);
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_valuebox/any_op_ch.cpp:43


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 void operator<<= (::CORBA::Any &, VBTDdouble *); // copying
 void operator<<= (::CORBA::Any &, VBTDdouble **); // non-copying
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, VBTDdouble *&);
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_valuebox/any_op_ch.cpp:43


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 void operator<<= (::CORBA::Any &, VBTDlongdouble *); // copying
 void operator<<= (::CORBA::Any &, VBTDlongdouble **); // non-copying
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, VBTDlongdouble *&);
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_valuebox/any_op_ch.cpp:43


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 void operator<<= (::CORBA::Any &, VBTDenum *); // copying
 void operator<<= (::CORBA::Any &, VBTDenum **); // non-copying
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, VBTDenum *&);
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_valuebox/any_op_ch.cpp:43


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 void operator<<= (::CORBA::Any &, VBany *); // copying
 void operator<<= (::CORBA::Any &, VBany **); // non-copying
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, VBany *&);
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_valuebox/any_op_ch.cpp:43


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 void operator<<= (::CORBA::Any &, VBTDany *); // copying
 void operator<<= (::CORBA::Any &, VBTDany **); // non-copying
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, VBTDany *&);
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_valuebox/any_op_ch.cpp:43



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace vb_basic
{
   void operator<<= ( ::CORBA::Any &, M_VBlong *); // copying
   void operator<<= ( ::CORBA::Any &, M_VBlong **); // non-copying
   ::CORBA::Boolean operator>>= (const ::CORBA::Any &, M_VBlong *&);
}

#else


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 void operator<<= (::CORBA::Any &, vb_basic::M_VBlong *); // copying
 void operator<<= (::CORBA::Any &, vb_basic::M_VBlong **); // non-copying
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, vb_basic::M_VBlong *&);
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_interface/any_op_ch.cpp:41



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace vb_basic
{
   void operator<<= ( ::CORBA::Any &, Test_ptr); // copying
   void operator<<= ( ::CORBA::Any &, Test_ptr *); // non-copying
   ::CORBA::Boolean operator>>= (const ::CORBA::Any &, Test_ptr &);
}

#else


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 void operator<<= (::CORBA::Any &, vb_basic::Test_ptr); // copying
 void operator<<= (::CORBA::Any &, vb_basic::Test_ptr *); // non-copying
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, vb_basic::Test_ptr &);
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_valuebox/any_op_ch.cpp:43


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 void operator<<= (::CORBA::Any &, VBinterface *); // copying
 void operator<<= (::CORBA::Any &, VBinterface **); // non-copying
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, VBinterface *&);
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_enum/cdr_op_ch.cpp:34


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 ::CORBA::Boolean operator<< (TAO_OutputCDR &strm, Color _tao_enumerator);
 ::CORBA::Boolean operator>> (TAO_InputCDR &strm, Color &_tao_enumerator);

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_valuebox/cdr_op_ch.cpp:39


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 ::CORBA::Boolean operator<< (TAO_OutputCDR &, const VBshort *);
 ::CORBA::Boolean operator>> (TAO_InputCDR &, VBshort *&);
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_valuebox/cdr_op_ch.cpp:39


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 ::CORBA::Boolean operator<< (TAO_OutputCDR &, const VBlong *);
 ::CORBA::Boolean operator>> (TAO_InputCDR &, VBlong *&);
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_valuebox/cdr_op_ch.cpp:39


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 ::CORBA::Boolean operator<< (TAO_OutputCDR &, const VBlonglong *);
 ::CORBA::Boolean operator>> (TAO_InputCDR &, VBlonglong *&);
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_valuebox/cdr_op_ch.cpp:39


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 ::CORBA::Boolean operator<< (TAO_OutputCDR &, const VBushort *);
 ::CORBA::Boolean operator>> (TAO_InputCDR &, VBushort *&);
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_valuebox/cdr_op_ch.cpp:39


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 ::CORBA::Boolean operator<< (TAO_OutputCDR &, const VBulong *);
 ::CORBA::Boolean operator>> (TAO_InputCDR &, VBulong *&);
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_valuebox/cdr_op_ch.cpp:39


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 ::CORBA::Boolean operator<< (TAO_OutputCDR &, const VBulonglong *);
 ::CORBA::Boolean operator>> (TAO_InputCDR &, VBulonglong *&);
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_valuebox/cdr_op_ch.cpp:39


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 ::CORBA::Boolean operator<< (TAO_OutputCDR &, const VBchar *);
 ::CORBA::Boolean operator>> (TAO_InputCDR &, VBchar *&);
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_valuebox/cdr_op_ch.cpp:39


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 ::CORBA::Boolean operator<< (TAO_OutputCDR &, const VBwchar *);
 ::CORBA::Boolean operator>> (TAO_InputCDR &, VBwchar *&);
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_valuebox/cdr_op_ch.cpp:39


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 ::CORBA::Boolean operator<< (TAO_OutputCDR &, const VBboolean *);
 ::CORBA::Boolean operator>> (TAO_InputCDR &, VBboolean *&);
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_valuebox/cdr_op_ch.cpp:39


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 ::CORBA::Boolean operator<< (TAO_OutputCDR &, const VBoctet *);
 ::CORBA::Boolean operator>> (TAO_InputCDR &, VBoctet *&);
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_valuebox/cdr_op_ch.cpp:39


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 ::CORBA::Boolean operator<< (TAO_OutputCDR &, const VBfloat *);
 ::CORBA::Boolean operator>> (TAO_InputCDR &, VBfloat *&);
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_valuebox/cdr_op_ch.cpp:39


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 ::CORBA::Boolean operator<< (TAO_OutputCDR &, const VBdouble *);
 ::CORBA::Boolean operator>> (TAO_InputCDR &, VBdouble *&);
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_valuebox/cdr_op_ch.cpp:39


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 ::CORBA::Boolean operator<< (TAO_OutputCDR &, const VBlongdouble *);
 ::CORBA::Boolean operator>> (TAO_InputCDR &, VBlongdouble *&);
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_valuebox/cdr_op_ch.cpp:39


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 ::CORBA::Boolean operator<< (TAO_OutputCDR &, const VBenum *);
 ::CORBA::Boolean operator>> (TAO_InputCDR &, VBenum *&);
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_valuebox/cdr_op_ch.cpp:39


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 ::CORBA::Boolean operator<< (TAO_OutputCDR &, const VBTDshort *);
 ::CORBA::Boolean operator>> (TAO_InputCDR &, VBTDshort *&);
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_valuebox/cdr_op_ch.cpp:39


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 ::CORBA::Boolean operator<< (TAO_OutputCDR &, const VBTDlong *);
 ::CORBA::Boolean operator>> (TAO_InputCDR &, VBTDlong *&);
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_valuebox/cdr_op_ch.cpp:39


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 ::CORBA::Boolean operator<< (TAO_OutputCDR &, const VBTDlonglong *);
 ::CORBA::Boolean operator>> (TAO_InputCDR &, VBTDlonglong *&);
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_valuebox/cdr_op_ch.cpp:39


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 ::CORBA::Boolean operator<< (TAO_OutputCDR &, const VBTDushort *);
 ::CORBA::Boolean operator>> (TAO_InputCDR &, VBTDushort *&);
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_valuebox/cdr_op_ch.cpp:39


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 ::CORBA::Boolean operator<< (TAO_OutputCDR &, const VBTDulong *);
 ::CORBA::Boolean operator>> (TAO_InputCDR &, VBTDulong *&);
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_valuebox/cdr_op_ch.cpp:39


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 ::CORBA::Boolean operator<< (TAO_OutputCDR &, const VBTDulonglong *);
 ::CORBA::Boolean operator>> (TAO_InputCDR &, VBTDulonglong *&);
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_valuebox/cdr_op_ch.cpp:39


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 ::CORBA::Boolean operator<< (TAO_OutputCDR &, const VBTDchar *);
 ::CORBA::Boolean operator>> (TAO_InputCDR &, VBTDchar *&);
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_valuebox/cdr_op_ch.cpp:39


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 ::CORBA::Boolean operator<< (TAO_OutputCDR &, const VBTDwchar *);
 ::CORBA::Boolean operator>> (TAO_InputCDR &, VBTDwchar *&);
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_valuebox/cdr_op_ch.cpp:39


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 ::CORBA::Boolean operator<< (TAO_OutputCDR &, const VBTDboolean *);
 ::CORBA::Boolean operator>> (TAO_InputCDR &, VBTDboolean *&);
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_valuebox/cdr_op_ch.cpp:39


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 ::CORBA::Boolean operator<< (TAO_OutputCDR &, const VBTDoctet *);
 ::CORBA::Boolean operator>> (TAO_InputCDR &, VBTDoctet *&);
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_valuebox/cdr_op_ch.cpp:39


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 ::CORBA::Boolean operator<< (TAO_OutputCDR &, const VBTDfloat *);
 ::CORBA::Boolean operator>> (TAO_InputCDR &, VBTDfloat *&);
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_valuebox/cdr_op_ch.cpp:39


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 ::CORBA::Boolean operator<< (TAO_OutputCDR &, const VBTDdouble *);
 ::CORBA::Boolean operator>> (TAO_InputCDR &, VBTDdouble *&);
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_valuebox/cdr_op_ch.cpp:39


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 ::CORBA::Boolean operator<< (TAO_OutputCDR &, const VBTDlongdouble *);
 ::CORBA::Boolean operator>> (TAO_InputCDR &, VBTDlongdouble *&);
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_valuebox/cdr_op_ch.cpp:39


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 ::CORBA::Boolean operator<< (TAO_OutputCDR &, const VBTDenum *);
 ::CORBA::Boolean operator>> (TAO_InputCDR &, VBTDenum *&);
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_valuebox/cdr_op_ch.cpp:39


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 ::CORBA::Boolean operator<< (TAO_OutputCDR &, const VBany *);
 ::CORBA::Boolean operator>> (TAO_InputCDR &, VBany *&);
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_valuebox/cdr_op_ch.cpp:39


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 ::CORBA::Boolean operator<< (TAO_OutputCDR &, const VBTDany *);
 ::CORBA::Boolean operator>> (TAO_InputCDR &, VBTDany *&);
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_valuebox/cdr_op_ch.cpp:39


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 ::CORBA::Boolean operator<< (TAO_OutputCDR &, const vb_basic::M_VBlong *);
 ::CORBA::Boolean operator>> (TAO_InputCDR &, vb_basic::M_VBlong *&);
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_interface/cdr_op_ch.cpp:41

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 ::CORBA::Boolean operator<< (TAO_OutputCDR &, const vb_basic::Test_ptr );
 ::CORBA::Boolean operator>> (TAO_InputCDR &, vb_basic::Test_ptr &);

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_valuebox/cdr_op_ch.cpp:39


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 ::CORBA::Boolean operator<< (TAO_OutputCDR &, const VBinterface *);
 ::CORBA::Boolean operator>> (TAO_InputCDR &, VBinterface *&);
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_codegen.cpp:1700
#if defined (__ACE_INLINE__)
#include "vb_basicC.inl"
#endif /* defined INLINE */

#include /**/ "ace/post.h"

#endif /* ifndef */

