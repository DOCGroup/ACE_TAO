// -*- C++ -*-
/**
 * Code generated by the The ACE ORB (TAO) IDL Compiler v2.4.1
 * TAO and the TAO IDL Compiler have been developed by:
 *       Center for Distributed Object Computing
 *       Washington University
 *       St. Louis, MO
 *       USA
 *       http://www.cs.wustl.edu/~schmidt/doc-center.html
 * and
 *       Distributed Object Computing Laboratory
 *       University of California at Irvine
 *       Irvine, CA
 *       USA
 * and
 *       Institute for Software Integrated Systems
 *       Vanderbilt University
 *       Nashville, TN
 *       USA
 *       http://www.isis.vanderbilt.edu/
 *
 * Information about TAO is available at:
 *     http://www.dre.vanderbilt.edu/~schmidt/TAO.html
 **/

// TAO_IDL - Generated from
// be/be_codegen.cpp:149

#ifndef _TAO_IDL_VALUEBOXC_CC56NC_H_
#define _TAO_IDL_VALUEBOXC_CC56NC_H_

#include /**/ "ace/pre.h"


#include /**/ "ace/config-all.h"

#if !defined (ACE_LACKS_PRAGMA_ONCE)
# pragma once
#endif /* ACE_LACKS_PRAGMA_ONCE */


#include "tao/AnyTypeCode/AnyTypeCode_methods.h"
#include "tao/AnyTypeCode/Any.h"
#include "tao/Valuetype/ValueBase.h"
#include "tao/CDR.h"
#include "tao/Valuetype/Valuetype_Adapter_Factory_Impl.h"
#include "tao/ORB.h"
#include "tao/SystemException.h"
#include "tao/Basic_Types.h"
#include "tao/ORB_Constants.h"
#include "tao/Object.h"
#include "tao/String_Manager_T.h"
#include "tao/Sequence_T.h"
#include "tao/Valuetype/Value_VarOut_T.h"
#include "tao/Objref_VarOut_T.h"
#include "tao/Seq_Var_T.h"
#include "tao/Seq_Out_T.h"
#include "tao/Array_VarOut_T.h"
#include "tao/Arg_Traits_T.h"
#include "tao/Basic_Arguments.h"
#include "tao/Special_Basic_Arguments.h"
#include "tao/Any_Insert_Policy_T.h"
#include "tao/Fixed_Size_Argument_T.h"
#include "tao/Var_Size_Argument_T.h"
#include "tao/Object_Argument_T.h"
#include "tao/UB_String_Arguments.h"
#include "tao/Fixed_Array_Argument_T.h"
#include "tao/Var_Array_Argument_T.h"
#include /**/ "tao/Version.h"
#include /**/ "tao/Versioned_Namespace.h"

#include "vb_basicC.h"
#include "vb_structC.h"
#include "vb_unionC.h"

#if TAO_MAJOR_VERSION != 2 || TAO_MINOR_VERSION != 4 || TAO_MICRO_VERSION != 1
#error This file should be regenerated with TAO_IDL
#endif

#if defined (TAO_EXPORT_MACRO)
#undef TAO_EXPORT_MACRO
#endif
#define TAO_EXPORT_MACRO

// TAO_IDL - Generated from
// be/be_visitor_root/root_ch.cpp:157
TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<typename T> class Narrow_Utils;
}
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_valuebox/valuebox_ch.cpp:41

class VBstring;

typedef
  TAO_Value_Var_T<
      VBstring
    >
  VBstring_var;

typedef
  TAO_Value_Out_T<
      VBstring
    >
  VBstring_out;

class  VBstring
  : public virtual ::CORBA::DefaultValueRefCountBase
{
public:

  // TAO_IDL - Generated from
  // be/be_type.cpp:304


  typedef VBstring_var _var_type;
  typedef VBstring_out _out_type;

  static void _tao_any_destructor (void *);

  static VBstring* _downcast ( ::CORBA::ValueBase *);
  ::CORBA::ValueBase * _copy_value (void);

  virtual const char* _tao_obv_repository_id (void) const;

  virtual void _tao_obv_truncatable_repo_ids (Repository_Id_List &ids) const;

  static const char* _tao_obv_static_repository_id (void);

  static ::CORBA::Boolean _tao_unmarshal (
      TAO_InputCDR &,
      VBstring *&
    );

  virtual ::CORBA::TypeCode_ptr _tao_type (void) const;



  // TAO_IDL - Generated from
  // be/be_visitor_valuebox/valuebox_ch.cpp:406

  // Constructors
  VBstring (void);
  VBstring (char * val);
  VBstring (const char * val);
  VBstring (const ::CORBA::String_var& var);
  VBstring (const VBstring& val);
  // assignment operators
  VBstring& operator= (char * val);

  VBstring& operator= (const char * val);

  VBstring& operator= (const ::CORBA::String_var& var);

  // Accessor
  const char * _value (void) const;

  // Modifiers
  void _value (char * val);
  void _value (const char * val);
  void _value (const ::CORBA::String_var& var);

  // Access to the boxed value for method signatures
  const char * _boxed_in (void) const;
  char *& _boxed_inout (void);
  char *& _boxed_out (void);
  // Allows access and modification using a slot.
  char & operator[] ( ::CORBA::ULong slot);

  // Allows only accessing thru a slot.
  char operator[] ( ::CORBA::ULong slot) const;

private:
  ::CORBA::String_var _pd_value;


  // TAO_IDL - Generated from
  // be/be_visitor_valuebox/valuebox_ch.cpp:114

protected:
  virtual ~VBstring (void);
  virtual ::CORBA::Boolean _tao_marshal_v (TAO_OutputCDR &) const;
  virtual ::CORBA::Boolean _tao_unmarshal_v (TAO_InputCDR &);
  virtual ::CORBA::Boolean _tao_match_formal_type (ptrdiff_t ) const;

private:
  void operator= (const VBstring & val);

};

// TAO_IDL - Generated from
// be/be_visitor_typecode/typecode_decl.cpp:34

extern  ::CORBA::TypeCode_ptr const _tc_VBstring;

// TAO_IDL - Generated from
// be/be_visitor_valuebox/valuebox_ch.cpp:41

class VBwstring;

typedef
  TAO_Value_Var_T<
      VBwstring
    >
  VBwstring_var;

typedef
  TAO_Value_Out_T<
      VBwstring
    >
  VBwstring_out;

class  VBwstring
  : public virtual ::CORBA::DefaultValueRefCountBase
{
public:

  // TAO_IDL - Generated from
  // be/be_type.cpp:304


  typedef VBwstring_var _var_type;
  typedef VBwstring_out _out_type;

  static void _tao_any_destructor (void *);

  static VBwstring* _downcast ( ::CORBA::ValueBase *);
  ::CORBA::ValueBase * _copy_value (void);

  virtual const char* _tao_obv_repository_id (void) const;

  virtual void _tao_obv_truncatable_repo_ids (Repository_Id_List &ids) const;

  static const char* _tao_obv_static_repository_id (void);

  static ::CORBA::Boolean _tao_unmarshal (
      TAO_InputCDR &,
      VBwstring *&
    );

  virtual ::CORBA::TypeCode_ptr _tao_type (void) const;



  // TAO_IDL - Generated from
  // be/be_visitor_valuebox/valuebox_ch.cpp:406

  // Constructors
  VBwstring (void);
  VBwstring (CORBA::WChar * val);
  VBwstring (const CORBA::WChar * val);
  VBwstring (const ::CORBA::WString_var& var);
  VBwstring (const VBwstring& val);
  // assignment operators
  VBwstring& operator= (CORBA::WChar * val);

  VBwstring& operator= (const CORBA::WChar * val);

  VBwstring& operator= (const ::CORBA::WString_var& var);

  // Accessor
  const CORBA::WChar * _value (void) const;

  // Modifiers
  void _value (CORBA::WChar * val);
  void _value (const CORBA::WChar * val);
  void _value (const ::CORBA::WString_var& var);

  // Access to the boxed value for method signatures
  const CORBA::WChar * _boxed_in (void) const;
  CORBA::WChar *& _boxed_inout (void);
  CORBA::WChar *& _boxed_out (void);
  // Allows access and modification using a slot.
  ::CORBA::WChar & operator[] ( ::CORBA::ULong slot);

  // Allows only accessing thru a slot.
  ::CORBA::WChar operator[] ( ::CORBA::ULong slot) const;

private:
  ::CORBA::WString_var _pd_value;


  // TAO_IDL - Generated from
  // be/be_visitor_valuebox/valuebox_ch.cpp:114

protected:
  virtual ~VBwstring (void);
  virtual ::CORBA::Boolean _tao_marshal_v (TAO_OutputCDR &) const;
  virtual ::CORBA::Boolean _tao_unmarshal_v (TAO_InputCDR &);
  virtual ::CORBA::Boolean _tao_match_formal_type (ptrdiff_t ) const;

private:
  void operator= (const VBwstring & val);

};

// TAO_IDL - Generated from
// be/be_visitor_typecode/typecode_decl.cpp:34

extern  ::CORBA::TypeCode_ptr const _tc_VBwstring;

// TAO_IDL - Generated from
// be/be_visitor_sequence/sequence_ch.cpp:99

#if !defined (_TDSEQLONG_CH_)
#define _TDSEQLONG_CH_

class TDseqlong;

typedef
  ::TAO_FixedSeq_Var_T<
      TDseqlong
    >
  TDseqlong_var;

typedef
  ::TAO_Seq_Out_T<
      TDseqlong
    >
  TDseqlong_out;

class  TDseqlong
  : public
      ::TAO::unbounded_value_sequence<
          ::CORBA::Long
        >
{
public:
  TDseqlong (void);
  TDseqlong ( ::CORBA::ULong max);
  TDseqlong (
    ::CORBA::ULong max,
    ::CORBA::ULong length,
    ::CORBA::Long* buffer,
    ::CORBA::Boolean release = false);
  TDseqlong (const TDseqlong &);
  virtual ~TDseqlong (void);


  // TAO_IDL - Generated from
  // be/be_type.cpp:304


  typedef TDseqlong_var _var_type;
  typedef TDseqlong_out _out_type;

  static void _tao_any_destructor (void *);
};

#endif /* end #if !defined */

// TAO_IDL - Generated from
// be/be_visitor_typecode/typecode_decl.cpp:34

extern  ::CORBA::TypeCode_ptr const _tc_TDseqlong;

// TAO_IDL - Generated from
// be/be_visitor_valuebox/valuebox_ch.cpp:41

class VBseqlong;

typedef
  TAO_Value_Var_T<
      VBseqlong
    >
  VBseqlong_var;

typedef
  TAO_Value_Out_T<
      VBseqlong
    >
  VBseqlong_out;

class  VBseqlong
  : public virtual ::CORBA::DefaultValueRefCountBase
{
public:

  // TAO_IDL - Generated from
  // be/be_type.cpp:304


  typedef VBseqlong_var _var_type;
  typedef VBseqlong_out _out_type;

  static void _tao_any_destructor (void *);

  static VBseqlong* _downcast ( ::CORBA::ValueBase *);
  ::CORBA::ValueBase * _copy_value (void);

  virtual const char* _tao_obv_repository_id (void) const;

  virtual void _tao_obv_truncatable_repo_ids (Repository_Id_List &ids) const;

  static const char* _tao_obv_static_repository_id (void);

  static ::CORBA::Boolean _tao_unmarshal (
      TAO_InputCDR &,
      VBseqlong *&
    );

  virtual ::CORBA::TypeCode_ptr _tao_type (void) const;



  // TAO_IDL - Generated from
  // be/be_visitor_valuebox/valuebox_ch.cpp:286

  // Constructors
  VBseqlong (void);
  VBseqlong ( ::CORBA::ULong max);
  VBseqlong (
      ::CORBA::ULong max,
      ::CORBA::ULong length,
      ::CORBA::Long * buf,
      ::CORBA::Boolean release = false
    );
  VBseqlong (const TDseqlong& val);
  VBseqlong (const VBseqlong& val);

  // assignment operator
  VBseqlong& operator= (const TDseqlong& val);

  // Accessors and modifier
  const TDseqlong& _value (void) const;
  TDseqlong& _value (void);
  void _value (const TDseqlong& val);

  // Access to the boxed value for method signatures
  const TDseqlong& _boxed_in (void) const;
  TDseqlong& _boxed_inout (void);
  TDseqlong*& _boxed_out (void);
  ::CORBA::Long& operator[] ( ::CORBA::ULong index);
  const ::CORBA::Long& operator[] ( ::CORBA::ULong index) const;

  ::CORBA::ULong maximum (void) const;
  ::CORBA::ULong length (void) const;
  void length ( ::CORBA::ULong len);


private:
  TDseqlong_var _pd_value;


  // TAO_IDL - Generated from
  // be/be_visitor_valuebox/valuebox_ch.cpp:114

protected:
  virtual ~VBseqlong (void);
  virtual ::CORBA::Boolean _tao_marshal_v (TAO_OutputCDR &) const;
  virtual ::CORBA::Boolean _tao_unmarshal_v (TAO_InputCDR &);
  virtual ::CORBA::Boolean _tao_match_formal_type (ptrdiff_t ) const;

private:
  void operator= (const VBseqlong & val);

};

// TAO_IDL - Generated from
// be/be_visitor_typecode/typecode_decl.cpp:34

extern  ::CORBA::TypeCode_ptr const _tc_VBseqlong;

// TAO_IDL - Generated from
// be/be_visitor_array/array_ch.cpp:52

typedef ::CORBA::Long LongArray[3];
typedef ::CORBA::Long LongArray_slice;
struct LongArray_tag {};


typedef
  TAO_FixedArray_Var_T<
      LongArray,
      LongArray_slice,
      LongArray_tag
    >
  LongArray_var;

typedef
  LongArray
  LongArray_out;

typedef
  TAO_Array_Forany_T<
      LongArray,
      LongArray_slice,
      LongArray_tag
    >
  LongArray_forany;

TAO_EXPORT_MACRO LongArray_slice *
LongArray_alloc (void);

TAO_EXPORT_MACRO void
LongArray_free (
    LongArray_slice *_tao_slice);

TAO_EXPORT_MACRO LongArray_slice *
LongArray_dup (
    const LongArray_slice *_tao_slice);

TAO_EXPORT_MACRO void
LongArray_copy (
    LongArray_slice *_tao_to,
    const LongArray_slice *_tao_from);

// TAO_IDL - Generated from
// be/be_visitor_typecode/typecode_decl.cpp:34

extern  ::CORBA::TypeCode_ptr const _tc_LongArray;

// TAO_IDL - Generated from
// be/be_visitor_valuebox/valuebox_ch.cpp:41

class VBlongarray;

typedef
  TAO_Value_Var_T<
      VBlongarray
    >
  VBlongarray_var;

typedef
  TAO_Value_Out_T<
      VBlongarray
    >
  VBlongarray_out;

class  VBlongarray
  : public virtual ::CORBA::DefaultValueRefCountBase
{
public:

  // TAO_IDL - Generated from
  // be/be_type.cpp:304


  typedef VBlongarray_var _var_type;
  typedef VBlongarray_out _out_type;

  static void _tao_any_destructor (void *);

  static VBlongarray* _downcast ( ::CORBA::ValueBase *);
  ::CORBA::ValueBase * _copy_value (void);

  virtual const char* _tao_obv_repository_id (void) const;

  virtual void _tao_obv_truncatable_repo_ids (Repository_Id_List &ids) const;

  static const char* _tao_obv_static_repository_id (void);

  static ::CORBA::Boolean _tao_unmarshal (
      TAO_InputCDR &,
      VBlongarray *&
    );

  virtual ::CORBA::TypeCode_ptr _tao_type (void) const;



  // TAO_IDL - Generated from
  // be/be_visitor_valuebox/valuebox_ch.cpp:167


  // Constructors
  VBlongarray (void);
  VBlongarray (const LongArray val);
  VBlongarray (const VBlongarray& val);

  // assignment operator
  VBlongarray& operator= (const LongArray val);

  // Accessors and modifier
  const LongArray_slice* _value (void) const;
  LongArray_slice* _value (void);
  void _value (const LongArray val);

  const LongArray_slice & operator[] ( ::CORBA::ULong index) const;
  LongArray_slice &  operator[] ( ::CORBA::ULong index);

  const LongArray_slice * _boxed_in (void) const;
  LongArray_slice * _boxed_inout (void);
  LongArray_slice * _boxed_out (void);


private:
  LongArray_var _pd_value;


  // TAO_IDL - Generated from
  // be/be_visitor_valuebox/valuebox_ch.cpp:114

protected:
  virtual ~VBlongarray (void);
  virtual ::CORBA::Boolean _tao_marshal_v (TAO_OutputCDR &) const;
  virtual ::CORBA::Boolean _tao_unmarshal_v (TAO_InputCDR &);
  virtual ::CORBA::Boolean _tao_match_formal_type (ptrdiff_t ) const;

private:
  void operator= (const VBlongarray & val);

};

// TAO_IDL - Generated from
// be/be_visitor_typecode/typecode_decl.cpp:34

extern  ::CORBA::TypeCode_ptr const _tc_VBlongarray;

// TAO_IDL - Generated from
// be/be_visitor_array/array_ch.cpp:52

typedef ::TAO::String_Manager StringArray[2];
typedef ::TAO::String_Manager StringArray_slice;
struct StringArray_tag {};


typedef
  TAO_VarArray_Var_T<
      StringArray,
      StringArray_slice,
      StringArray_tag
    >
  StringArray_var;

typedef
  TAO_Array_Out_T<
      StringArray,
      StringArray_var,
      StringArray_slice,
      StringArray_tag
    >
  StringArray_out;

typedef
  TAO_Array_Forany_T<
      StringArray,
      StringArray_slice,
      StringArray_tag
    >
  StringArray_forany;

TAO_EXPORT_MACRO StringArray_slice *
StringArray_alloc (void);

TAO_EXPORT_MACRO void
StringArray_free (
    StringArray_slice *_tao_slice);

TAO_EXPORT_MACRO StringArray_slice *
StringArray_dup (
    const StringArray_slice *_tao_slice);

TAO_EXPORT_MACRO void
StringArray_copy (
    StringArray_slice *_tao_to,
    const StringArray_slice *_tao_from);

// TAO_IDL - Generated from
// be/be_visitor_typecode/typecode_decl.cpp:34

extern  ::CORBA::TypeCode_ptr const _tc_StringArray;

// TAO_IDL - Generated from
// be/be_visitor_valuebox/valuebox_ch.cpp:41

class VBstringarray;

typedef
  TAO_Value_Var_T<
      VBstringarray
    >
  VBstringarray_var;

typedef
  TAO_Value_Out_T<
      VBstringarray
    >
  VBstringarray_out;

class  VBstringarray
  : public virtual ::CORBA::DefaultValueRefCountBase
{
public:

  // TAO_IDL - Generated from
  // be/be_type.cpp:304


  typedef VBstringarray_var _var_type;
  typedef VBstringarray_out _out_type;

  static void _tao_any_destructor (void *);

  static VBstringarray* _downcast ( ::CORBA::ValueBase *);
  ::CORBA::ValueBase * _copy_value (void);

  virtual const char* _tao_obv_repository_id (void) const;

  virtual void _tao_obv_truncatable_repo_ids (Repository_Id_List &ids) const;

  static const char* _tao_obv_static_repository_id (void);

  static ::CORBA::Boolean _tao_unmarshal (
      TAO_InputCDR &,
      VBstringarray *&
    );

  virtual ::CORBA::TypeCode_ptr _tao_type (void) const;



  // TAO_IDL - Generated from
  // be/be_visitor_valuebox/valuebox_ch.cpp:167


  // Constructors
  VBstringarray (void);
  VBstringarray (const StringArray val);
  VBstringarray (const VBstringarray& val);

  // assignment operator
  VBstringarray& operator= (const StringArray val);

  // Accessors and modifier
  const StringArray_slice* _value (void) const;
  StringArray_slice* _value (void);
  void _value (const StringArray val);

  const StringArray_slice & operator[] ( ::CORBA::ULong index) const;
  StringArray_slice &  operator[] ( ::CORBA::ULong index);

  const StringArray_slice * _boxed_in (void) const;
  StringArray_slice * _boxed_inout (void);
  StringArray_slice * _boxed_out (void);


private:
  StringArray_var _pd_value;


  // TAO_IDL - Generated from
  // be/be_visitor_valuebox/valuebox_ch.cpp:114

protected:
  virtual ~VBstringarray (void);
  virtual ::CORBA::Boolean _tao_marshal_v (TAO_OutputCDR &) const;
  virtual ::CORBA::Boolean _tao_unmarshal_v (TAO_InputCDR &);
  virtual ::CORBA::Boolean _tao_match_formal_type (ptrdiff_t ) const;

private:
  void operator= (const VBstringarray & val);

};

// TAO_IDL - Generated from
// be/be_visitor_typecode/typecode_decl.cpp:34

extern  ::CORBA::TypeCode_ptr const _tc_VBstringarray;

// TAO_IDL - Generated from
// be/be_interface.cpp:748

#if !defined (_TEST__VAR_OUT_CH_)
#define _TEST__VAR_OUT_CH_

class Test;
typedef Test *Test_ptr;

typedef
  TAO_Objref_Var_T<
      Test
    >
  Test_var;

typedef
  TAO_Objref_Out_T<
      Test
    >
  Test_out;

#endif /* end #if !defined */

// TAO_IDL - Generated from
// be/be_visitor_interface/interface_ch.cpp:40

class  Test
  : public virtual ::CORBA::Object
{
public:
  friend class TAO::Narrow_Utils<Test>;

  // TAO_IDL - Generated from
  // be/be_type.cpp:304

  typedef Test_ptr _ptr_type;
  typedef Test_var _var_type;
  typedef Test_out _out_type;

  static void _tao_any_destructor (void *);

  // The static operations.
  static Test_ptr _duplicate (Test_ptr obj);

  static void _tao_release (Test_ptr obj);

  static Test_ptr _narrow (::CORBA::Object_ptr obj);
  static Test_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
  static Test_ptr _nil (void);

  virtual ::VBlong * basic_op1 (
    ::VBlong * p1,
    ::VBlong *& p2,
    ::VBlong_out p3);

  virtual ::vb_basic::M_VBlong * basic_op2 (
    ::vb_basic::M_VBlong * p1,
    ::vb_basic::M_VBlong *& p2,
    ::vb_basic::M_VBlong_out p3);

  virtual ::CORBA::Long basic_op3 (
    ::CORBA::Long p1,
    ::CORBA::Long & p2,
    ::CORBA::Long_out p3);

  virtual ::VBstring * string_op1 (
    ::VBstring * p1,
    ::VBstring *& p2,
    ::VBstring_out p3);

  virtual char * string_op2 (
    const char * p1,
    char *& p2,
    ::CORBA::String_out p3);

  virtual ::VBseqlong * seq_op1 (
    ::VBseqlong * p1,
    ::VBseqlong *& p2,
    ::VBseqlong_out p3);

  virtual void seq_op2 (
    const ::TDseqlong & p1,
    ::TDseqlong & p2,
    ::TDseqlong_out p3);

  virtual ::VBfixed_struct1 * struct_op1 (
    ::VBfixed_struct1 * p1,
    ::VBfixed_struct1 *& p2,
    ::VBfixed_struct1_out p3);

  virtual void struct_op2 (
    const ::Fixed_Struct1 & p1,
    ::Fixed_Struct1 & p2,
    ::Fixed_Struct1_out p3);

  virtual ::VBvariable_struct1 * struct_op3 (
    ::VBvariable_struct1 * p1,
    ::VBvariable_struct1 *& p2,
    ::VBvariable_struct1_out p3);

  virtual void struct_op4 (
    const ::Variable_Struct1 & p1,
    ::Variable_Struct1 & p2,
    ::Variable_Struct1_out p3);

  virtual ::VBlongarray * array_op1 (
    ::VBlongarray * p1,
    ::VBlongarray *& p2,
    ::VBlongarray_out p3);

  virtual void array_op2 (
    const ::LongArray p1,
    ::LongArray p2,
    ::LongArray_out p3);

  virtual ::VBstringarray * array_op3 (
    ::VBstringarray * p1,
    ::VBstringarray *& p2,
    ::VBstringarray_out p3);

  virtual void array_op4 (
    const ::StringArray p1,
    ::StringArray p2,
    ::StringArray_out p3);

  virtual ::VBfixed_union1 * union_op1 (
    ::VBfixed_union1 * p1,
    ::VBfixed_union1 *& p2,
    ::VBfixed_union1_out p3);

  virtual void union_op2 (
    const ::Fixed_Union1 & p1,
    ::Fixed_Union1 & p2,
    ::Fixed_Union1_out p3);

  virtual ::VBvariable_union1 * union_op3 (
    ::VBvariable_union1 * p1,
    ::VBvariable_union1 *& p2,
    ::VBvariable_union1_out p3);

  virtual void union_op4 (
    const ::Variable_Union1 & p1,
    ::Variable_Union1 & p2,
    ::Variable_Union1_out p3);

  virtual void shutdown (
    void);

  // TAO_IDL - Generated from
  // be/be_visitor_interface/interface_ch.cpp:137

  virtual ::CORBA::Boolean _is_a (const char *type_id);
  virtual const char* _interface_repository_id (void) const;
  virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);

protected:
  // Concrete interface only.
  Test (void);

  // Concrete non-local interface only.
  Test (
      ::IOP::IOR *ior,
      TAO_ORB_Core *orb_core);

  // Non-local interface only.
  Test (
      TAO_Stub *objref,
      ::CORBA::Boolean _tao_collocated = false,
      TAO_Abstract_ServantBase *servant = 0,
      TAO_ORB_Core *orb_core = 0);

  virtual ~Test (void);

private:
  // Private and unimplemented for concrete interfaces.
  Test (const Test &);

  void operator= (const Test &);
};

// TAO_IDL - Generated from
// be/be_visitor_typecode/typecode_decl.cpp:34

extern  ::CORBA::TypeCode_ptr const _tc_Test;

// TAO_IDL - Generated from
// be/be_visitor_arg_traits.cpp:66

TAO_BEGIN_VERSIONED_NAMESPACE_DECL


// Arg traits specializations.
namespace TAO
{

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:250

  template<>
  class Arg_Traits< ::VBstring>
    : public
        Object_Arg_Traits_T<
            ::VBstring *,
            ::VBstring_var,
            ::VBstring_out,
            TAO::Value_Traits<VBstring>,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:250

  template<>
  class Arg_Traits< ::VBwstring>
    : public
        Object_Arg_Traits_T<
            ::VBwstring *,
            ::VBwstring_var,
            ::VBwstring_out,
            TAO::Value_Traits<VBwstring>,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:683

  template<>
  class Arg_Traits< ::TDseqlong>
    : public
        Var_Size_Arg_Traits_T<
            ::TDseqlong,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:250

  template<>
  class Arg_Traits< ::VBseqlong>
    : public
        Object_Arg_Traits_T<
            ::VBseqlong *,
            ::VBseqlong_var,
            ::VBseqlong_out,
            TAO::Value_Traits<VBseqlong>,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

  template<>
  class Arg_Traits< ::LongArray_tag>
    : public
        Fixed_Array_Arg_Traits_T<
            ::LongArray_var,
            ::LongArray_forany,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:250

  template<>
  class Arg_Traits< ::VBlongarray>
    : public
        Object_Arg_Traits_T<
            ::VBlongarray *,
            ::VBlongarray_var,
            ::VBlongarray_out,
            TAO::Value_Traits<VBlongarray>,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

  template<>
  class Arg_Traits< ::StringArray_tag>
    : public
        Var_Array_Arg_Traits_T<
            ::StringArray_out,
            ::StringArray_forany,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:250

  template<>
  class Arg_Traits< ::VBstringarray>
    : public
        Object_Arg_Traits_T<
            ::VBstringarray *,
            ::VBstringarray_var,
            ::VBstringarray_out,
            TAO::Value_Traits<VBstringarray>,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:145

#if !defined (_TEST__ARG_TRAITS_)
#define _TEST__ARG_TRAITS_

  template<>
  class  Arg_Traits< ::Test>
    : public
        Object_Arg_Traits_T<
            ::Test_ptr,
            ::Test_var,
            ::Test_out,
            TAO::Objref_Traits<Test>,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

#endif /* end #if !defined */
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_traits.cpp:60

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Traits specializations.
namespace TAO
{

#if !defined (_VBSTRING__TRAITS_)
#define _VBSTRING__TRAITS_

  template<>
  struct  Value_Traits<VBstring>
  {
    static void add_ref (VBstring *);
    static void remove_ref (VBstring *);
    static void release (VBstring *);
  };

#endif /* end #if !defined */

#if !defined (_VBWSTRING__TRAITS_)
#define _VBWSTRING__TRAITS_

  template<>
  struct  Value_Traits<VBwstring>
  {
    static void add_ref (VBwstring *);
    static void remove_ref (VBwstring *);
    static void release (VBwstring *);
  };

#endif /* end #if !defined */

#if !defined (_VBSEQLONG__TRAITS_)
#define _VBSEQLONG__TRAITS_

  template<>
  struct  Value_Traits<VBseqlong>
  {
    static void add_ref (VBseqlong *);
    static void remove_ref (VBseqlong *);
    static void release (VBseqlong *);
  };

#endif /* end #if !defined */
  template<>
  struct  Array_Traits<
      LongArray_forany
    >
  {
    static void free (
        LongArray_slice * _tao_slice);
    static LongArray_slice * dup (
        const LongArray_slice * _tao_slice);
    static void copy (
        LongArray_slice * _tao_to,
        const LongArray_slice * _tao_from);
    static LongArray_slice * alloc (void);
    static void zero (
        LongArray_slice * _tao_slice);
  };

#if !defined (_VBLONGARRAY__TRAITS_)
#define _VBLONGARRAY__TRAITS_

  template<>
  struct  Value_Traits<VBlongarray>
  {
    static void add_ref (VBlongarray *);
    static void remove_ref (VBlongarray *);
    static void release (VBlongarray *);
  };

#endif /* end #if !defined */
  template<>
  struct  Array_Traits<
      StringArray_forany
    >
  {
    static void free (
        StringArray_slice * _tao_slice);
    static StringArray_slice * dup (
        const StringArray_slice * _tao_slice);
    static void copy (
        StringArray_slice * _tao_to,
        const StringArray_slice * _tao_from);
    static StringArray_slice * alloc (void);
    static void zero (
        StringArray_slice * _tao_slice);
  };

#if !defined (_VBSTRINGARRAY__TRAITS_)
#define _VBSTRINGARRAY__TRAITS_

  template<>
  struct  Value_Traits<VBstringarray>
  {
    static void add_ref (VBstringarray *);
    static void remove_ref (VBstringarray *);
    static void release (VBstringarray *);
  };

#endif /* end #if !defined */

#if !defined (_TEST__TRAITS_)
#define _TEST__TRAITS_

  template<>
  struct  Objref_Traits< ::Test>
  {
    static ::Test_ptr duplicate (
        ::Test_ptr p);
    static void release (
        ::Test_ptr p);
    static ::Test_ptr nil (void);
    static ::CORBA::Boolean marshal (
        const ::Test_ptr p,
        TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */
}
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_valuebox/any_op_ch.cpp:43


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 void operator<<= (::CORBA::Any &, VBstring *); // copying
 void operator<<= (::CORBA::Any &, VBstring **); // non-copying
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, VBstring *&);
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_valuebox/any_op_ch.cpp:43


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 void operator<<= (::CORBA::Any &, VBwstring *); // copying
 void operator<<= (::CORBA::Any &, VBwstring **); // non-copying
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, VBwstring *&);
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_sequence/any_op_ch.cpp:47


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 void operator<<= ( ::CORBA::Any &, const TDseqlong &); // copying version
 void operator<<= ( ::CORBA::Any &, TDseqlong*); // noncopying version
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, TDseqlong *&); // deprecated
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const TDseqlong *&);
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_valuebox/any_op_ch.cpp:43


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 void operator<<= (::CORBA::Any &, VBseqlong *); // copying
 void operator<<= (::CORBA::Any &, VBseqlong **); // non-copying
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, VBseqlong *&);
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_array/any_op_ch.cpp:37


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 void operator<<= (::CORBA::Any &, const LongArray_forany &);
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, LongArray_forany &);
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_valuebox/any_op_ch.cpp:43


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 void operator<<= (::CORBA::Any &, VBlongarray *); // copying
 void operator<<= (::CORBA::Any &, VBlongarray **); // non-copying
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, VBlongarray *&);
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_array/any_op_ch.cpp:37


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 void operator<<= (::CORBA::Any &, const StringArray_forany &);
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, StringArray_forany &);
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_valuebox/any_op_ch.cpp:43


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 void operator<<= (::CORBA::Any &, VBstringarray *); // copying
 void operator<<= (::CORBA::Any &, VBstringarray **); // non-copying
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, VBstringarray *&);
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_interface/any_op_ch.cpp:41


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 void operator<<= (::CORBA::Any &, Test_ptr); // copying
 void operator<<= (::CORBA::Any &, Test_ptr *); // non-copying
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, Test_ptr &);
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_valuebox/cdr_op_ch.cpp:39


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 ::CORBA::Boolean operator<< (TAO_OutputCDR &, const VBstring *);
 ::CORBA::Boolean operator>> (TAO_InputCDR &, VBstring *&);
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_valuebox/cdr_op_ch.cpp:39


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 ::CORBA::Boolean operator<< (TAO_OutputCDR &, const VBwstring *);
 ::CORBA::Boolean operator>> (TAO_InputCDR &, VBwstring *&);
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_sequence/cdr_op_ch.cpp:65

#if !defined _TAO_CDR_OP_TDseqlong_H_
#define _TAO_CDR_OP_TDseqlong_H_
TAO_BEGIN_VERSIONED_NAMESPACE_DECL


 ::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const TDseqlong &_tao_sequence);
 ::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    TDseqlong &_tao_sequence);

TAO_END_VERSIONED_NAMESPACE_DECL



#endif /* _TAO_CDR_OP_TDseqlong_H_ */

// TAO_IDL - Generated from
// be/be_visitor_valuebox/cdr_op_ch.cpp:39


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 ::CORBA::Boolean operator<< (TAO_OutputCDR &, const VBseqlong *);
 ::CORBA::Boolean operator>> (TAO_InputCDR &, VBseqlong *&);
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_array/cdr_op_ch.cpp:99


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 CORBA::Boolean operator<< (TAO_OutputCDR &strm, const ::LongArray_forany &_tao_array);
 ::CORBA::Boolean operator>> (TAO_InputCDR &, ::LongArray_forany &_tao_array);

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// be/be_visitor_valuebox/cdr_op_ch.cpp:39


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 ::CORBA::Boolean operator<< (TAO_OutputCDR &, const VBlongarray *);
 ::CORBA::Boolean operator>> (TAO_InputCDR &, VBlongarray *&);
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_array/cdr_op_ch.cpp:99


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 CORBA::Boolean operator<< (TAO_OutputCDR &strm, const ::StringArray_forany &_tao_array);
 ::CORBA::Boolean operator>> (TAO_InputCDR &, ::StringArray_forany &_tao_array);

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// be/be_visitor_valuebox/cdr_op_ch.cpp:39


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 ::CORBA::Boolean operator<< (TAO_OutputCDR &, const VBstringarray *);
 ::CORBA::Boolean operator>> (TAO_InputCDR &, VBstringarray *&);
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_interface/cdr_op_ch.cpp:41

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 ::CORBA::Boolean operator<< (TAO_OutputCDR &, const Test_ptr );
 ::CORBA::Boolean operator>> (TAO_InputCDR &, Test_ptr &);

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_codegen.cpp:1700
#if defined (__ACE_INLINE__)
#include "valueboxC.inl"
#endif /* defined INLINE */

#include /**/ "ace/post.h"

#endif /* ifndef */

