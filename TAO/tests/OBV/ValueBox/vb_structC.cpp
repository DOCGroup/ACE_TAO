// -*- C++ -*-
/**
 * Code generated by the The ACE ORB (TAO) IDL Compiler v2.4.1
 * TAO and the TAO IDL Compiler have been developed by:
 *       Center for Distributed Object Computing
 *       Washington University
 *       St. Louis, MO
 *       USA
 *       http://www.cs.wustl.edu/~schmidt/doc-center.html
 * and
 *       Distributed Object Computing Laboratory
 *       University of California at Irvine
 *       Irvine, CA
 *       USA
 * and
 *       Institute for Software Integrated Systems
 *       Vanderbilt University
 *       Nashville, TN
 *       USA
 *       http://www.isis.vanderbilt.edu/
 *
 * Information about TAO is available at:
 *     http://www.dre.vanderbilt.edu/~schmidt/TAO.html
 **/

// TAO_IDL - Generated from
// be/be_codegen.cpp:373


#include "vb_structC.h"
#include "tao/AnyTypeCode/Null_RefCount_Policy.h"
#include "tao/AnyTypeCode/TypeCode_Constants.h"
#include "tao/AnyTypeCode/Alias_TypeCode_Static.h"
#include "tao/AnyTypeCode/Enum_TypeCode_Static.h"
#include "tao/AnyTypeCode/Objref_TypeCode_Static.h"
#include "tao/AnyTypeCode/Sequence_TypeCode_Static.h"
#include "tao/AnyTypeCode/String_TypeCode_Static.h"
#include "tao/AnyTypeCode/Struct_TypeCode_Static.h"
#include "tao/AnyTypeCode/TypeCode_Struct_Field.h"
#include "tao/AnyTypeCode/TypeCode_Case_T.h"
#include "tao/AnyTypeCode/Union_TypeCode_Static.h"
#include "tao/AnyTypeCode/Value_TypeCode_Static.h"
#include "tao/AnyTypeCode/TypeCode_Value_Field.h"
#include "tao/CDR.h"
#include "tao/Exception_Data.h"
#include "tao/Invocation_Adapter.h"
#include "tao/Valuetype/ValueFactory.h"
#include "tao/Object_T.h"
#include "tao/CDR.h"
#include "tao/AnyTypeCode/Any.h"
#include "tao/AnyTypeCode/Any_Impl_T.h"
#include "tao/AnyTypeCode/Any_Dual_Impl_T.h"
#include "tao/AnyTypeCode/Any_Array_Impl_T.h"
#include "tao/AnyTypeCode/Any_Basic_Impl_T.h"
#include "ace/OS_NS_string.h"

#if !defined (__ACE_INLINE__)
#include "vb_structC.inl"
#endif /* !defined INLINE */

// TAO_IDL - Generated from
// be/be_visitor_typecode/struct_typecode.cpp:86

static TAO::TypeCode::Struct_Field<
  char const *,
  ::CORBA::TypeCode_ptr const *> const 
    _tao_fields_Fixed_Struct1[] =
      {
        { "l", &CORBA::_tc_long },
        { "abstruct", &Fixed_Struct1::_tc_Bstruct }
      };
  
static TAO::TypeCode::Struct<
  char const *,
  ::CORBA::TypeCode_ptr const *,
  TAO::TypeCode::Struct_Field<
    char const *,
    ::CORBA::TypeCode_ptr const *> const *,
  TAO::Null_RefCount_Policy>
_tao_tc_Fixed_Struct1 (
  ::CORBA::tk_struct,
  "IDL:Fixed_Struct1:1.0",
  "Fixed_Struct1",
  _tao_fields_Fixed_Struct1,
  2);

::CORBA::TypeCode_ptr const _tc_Fixed_Struct1 =
  &_tao_tc_Fixed_Struct1;

// TAO_IDL - Generated from
// be/be_visitor_structure/structure_cs.cpp:56

void
Fixed_Struct1::_tao_any_destructor (
    void *_tao_void_pointer)
{
  Fixed_Struct1 *_tao_tmp_pointer =
    static_cast<Fixed_Struct1 *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

// TAO_IDL - Generated from
// be/be_visitor_typecode/struct_typecode.cpp:86

static TAO::TypeCode::Struct_Field<
  char const *,
  ::CORBA::TypeCode_ptr const *> const 
    _tao_fields_Fixed_Struct1_Bstruct[] =
      {
        { "s1", &CORBA::_tc_short },
        { "s2", &CORBA::_tc_short }
      };
  
static TAO::TypeCode::Struct<
  char const *,
  ::CORBA::TypeCode_ptr const *,
  TAO::TypeCode::Struct_Field<
    char const *,
    ::CORBA::TypeCode_ptr const *> const *,
  TAO::Null_RefCount_Policy>
_tao_tc_Fixed_Struct1_Bstruct (
  ::CORBA::tk_struct,
  "IDL:Fixed_Struct1/Bstruct:1.0",
  "Bstruct",
  _tao_fields_Fixed_Struct1_Bstruct,
  2);

::CORBA::TypeCode_ptr const Fixed_Struct1::_tc_Bstruct =
  &_tao_tc_Fixed_Struct1_Bstruct;

// TAO_IDL - Generated from
// be/be_visitor_structure/structure_cs.cpp:56

void
Fixed_Struct1::Bstruct::_tao_any_destructor (
    void *_tao_void_pointer)
{
  Bstruct *_tao_tmp_pointer =
    static_cast<Bstruct *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

// TAO_IDL - Generated from
// be/be_visitor_typecode/struct_typecode.cpp:86

static TAO::TypeCode::Struct_Field<
  char const *,
  ::CORBA::TypeCode_ptr const *> const 
    _tao_fields_Variable_Struct1[] =
      {
        { "l", &CORBA::_tc_long },
        { "str", &CORBA::_tc_string }
      };
  
static TAO::TypeCode::Struct<
  char const *,
  ::CORBA::TypeCode_ptr const *,
  TAO::TypeCode::Struct_Field<
    char const *,
    ::CORBA::TypeCode_ptr const *> const *,
  TAO::Null_RefCount_Policy>
_tao_tc_Variable_Struct1 (
  ::CORBA::tk_struct,
  "IDL:Variable_Struct1:1.0",
  "Variable_Struct1",
  _tao_fields_Variable_Struct1,
  2);

::CORBA::TypeCode_ptr const _tc_Variable_Struct1 =
  &_tao_tc_Variable_Struct1;

// TAO_IDL - Generated from
// be/be_visitor_structure/structure_cs.cpp:56

void
Variable_Struct1::_tao_any_destructor (
    void *_tao_void_pointer)
{
  Variable_Struct1 *_tao_tmp_pointer =
    static_cast<Variable_Struct1 *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

// TAO_IDL - Generated from
// be/be_visitor_typecode/alias_typecode.cpp:49

static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_TDvariable_struct1 (
    ::CORBA::tk_alias,
    "IDL:TDvariable_struct1:1.0",
    "TDvariable_struct1",
    &_tc_Variable_Struct1);
  
::CORBA::TypeCode_ptr const _tc_TDvariable_struct1 =
  &_tao_tc_TDvariable_struct1;

// TAO_IDL - Generated from
// be/be_visitor_interface/interface_cs.cpp:48

// Traits specializations for Interface1.

Interface1_ptr
TAO::Objref_Traits<Interface1>::duplicate (
    Interface1_ptr p)
{
  return Interface1::_duplicate (p);
}

void
TAO::Objref_Traits<Interface1>::release (
    Interface1_ptr p)
{
  ::CORBA::release (p);
}

Interface1_ptr
TAO::Objref_Traits<Interface1>::nil (void)
{
  return Interface1::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<Interface1>::marshal (
    const Interface1_ptr p,
    TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:88

::CORBA::Long
Interface1::getval (
  ::CORBA::Short s)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  TAO::Arg_Traits< ::CORBA::Long>::ret_val _tao_retval;
  TAO::Arg_Traits< ::CORBA::Short>::in_arg_val _tao_s (s);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_s
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      2,
      "getval",
      6,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY
      
    );

  _tao_call.invoke (0, 0);

  return _tao_retval.retn ();
}

Interface1::Interface1 (void)
{
}

Interface1::~Interface1 (void)
{
}

void
Interface1::_tao_any_destructor (void *_tao_void_pointer)
{
  Interface1 *_tao_tmp_pointer =
    static_cast<Interface1 *> (_tao_void_pointer);
  ::CORBA::release (_tao_tmp_pointer);
}

Interface1_ptr
Interface1::_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return
    TAO::Narrow_Utils<Interface1>::narrow (
        _tao_objref,
        "IDL:Interface1:1.0");
}

Interface1_ptr
Interface1::_unchecked_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return
    TAO::Narrow_Utils<Interface1>::unchecked_narrow (
        _tao_objref);
}

Interface1_ptr
Interface1::_nil (void)
{
  return 0;
}

Interface1_ptr
Interface1::_duplicate (Interface1_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  return obj;
}

void
Interface1::_tao_release (Interface1_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
Interface1::_is_a (const char *value)
{
  if (
      ACE_OS::strcmp (
          value,
          "IDL:Interface1:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        ) == 0
    )
    {
      return true; // success using local knowledge
    }
  else
    {
      return this->::CORBA::Object::_is_a (value);
    }
}

const char* Interface1::_interface_repository_id (void) const
{
  return "IDL:Interface1:1.0";
}

::CORBA::Boolean
Interface1::marshal (TAO_OutputCDR &cdr)
{
  return (cdr << this);
}

// TAO_IDL - Generated from
// be/be_visitor_typecode/objref_typecode.cpp:70

static TAO::TypeCode::Objref<char const *,
                             TAO::Null_RefCount_Policy>
  _tao_tc_Interface1 (
    ::CORBA::tk_objref,
    "IDL:Interface1:1.0",
    "Interface1");
  
::CORBA::TypeCode_ptr const _tc_Interface1 =
  &_tao_tc_Interface1;

// TAO_IDL - Generated from
// be/be_visitor_typecode/enum_typecode.cpp:29
static char const * const _tao_enumerators_Pet[] =
  {
    "dog",
    "cat",
    "fish",
    "rhinoceros"
    
  };

static TAO::TypeCode::Enum<char const *,
                           char const * const *,
                           TAO::Null_RefCount_Policy>
  _tao_tc_Pet (
    "IDL:Pet:1.0",
    "Pet",
    _tao_enumerators_Pet,
    4);
  
::CORBA::TypeCode_ptr const _tc_Pet =
  &_tao_tc_Pet;

// TAO_IDL - Generated from
// be/be_visitor_array/array_cs.cpp:94

short_array_slice *
short_array_dup (const short_array_slice *_tao_src_array)
{
  short_array_slice *_tao_dup_array =
    short_array_alloc ();
  
  if (!_tao_dup_array)
    {
      return static_cast <short_array_slice *> (0);
    }
  
  short_array_copy (_tao_dup_array, _tao_src_array);
  return _tao_dup_array;
}

short_array_slice *
short_array_alloc (void)
{
  short_array_slice *retval = 0;
  ACE_NEW_RETURN (retval, ::CORBA::Short[15], 0);
  return retval;
}

void
short_array_free (
    short_array_slice *_tao_slice)
{
  delete [] _tao_slice;
}

void
short_array_copy (
    short_array_slice * _tao_to,
    const short_array_slice *_tao_from)
{
  // Copy each individual element.
  for ( ::CORBA::ULong i0 = 0; i0 < 15; ++i0)
    {
      _tao_to[i0] = _tao_from[i0];
    }
}

// TAO_IDL - Generated from
// be/be_visitor_typecode/alias_typecode.cpp:49



// TAO_IDL - Generated from
// be/be_visitor_typecode/typecode_defn.cpp:298


#ifndef _TAO_TYPECODE_short_array_GUARD
#define _TAO_TYPECODE_short_array_GUARD

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

namespace TAO
{
  namespace TypeCode
  {
    namespace
    {
      TAO::TypeCode::Sequence< ::CORBA::TypeCode_ptr const *,
                              TAO::Null_RefCount_Policy>
        short_array_15 (
          ::CORBA::tk_array,
          &CORBA::_tc_short,
          15U);
        
      ::CORBA::TypeCode_ptr const tc_short_array =
        &short_array_15;
    }
  }
}

TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_TYPECODE_short_array_GUARD */
static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_short_array (
    ::CORBA::tk_alias,
    "IDL:short_array:1.0",
    "short_array",
    &TAO::TypeCode::tc_short_array);
  
::CORBA::TypeCode_ptr const _tc_short_array =
  &_tao_tc_short_array;

// TAO_IDL - Generated from
// be/be_visitor_union/union_cs.cpp:76

Union1::Union1 (void)
{
  ACE_OS::memset (&this->u_, 0, sizeof (this->u_));
  this->disc_ = -2147483647;
}

Union1::Union1 (const ::Union1 &u)
{
  this->disc_ = u.disc_;
  switch (this->disc_)
  {
    case 1:
    {
      this->u_.m1_ = u.u_.m1_;
    }
    break;
    case 2:
    {
      this->u_.m2_ = 
        u.u_.m2_;
    }
    break;
    default:
    break;
  }
}

Union1::~Union1 (void)
{
  // Finalize.
  this->_reset ();
}

void Union1::_tao_any_destructor (void *_tao_void_pointer)
{
  Union1 *tmp =
    static_cast<Union1 *> (_tao_void_pointer);
  delete tmp;
}

Union1 &
Union1::operator= (const ::Union1 &u)
{
  if (&u == this)
    {
      return *this;
    }
  
  this->_reset ();
  this->disc_ = u.disc_;

  switch (this->disc_)
  {
    case 1:
    {
      this->u_.m1_ = u.u_.m1_;
    }
    break;
    case 2:
    {
      this->u_.m2_ = 
        u.u_.m2_;
    }
    break;
    default:
    break;
  }
  
  return *this;
}

/// Reset method to reset old values of a union.
void Union1::_reset (void)
{
  switch (this->disc_)
  {
    
    case 1:
      
    break;
    
    case 2:
      
    break;
    
    default:
    break;
  }
}

// TAO_IDL - Generated from
// be/be_visitor_typecode/union_typecode.cpp:65

static TAO::TypeCode::Case_T<CORBA::Long, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_Union1__0 (1, "m1", &CORBA::_tc_long);
static TAO::TypeCode::Case_T<CORBA::Long, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_Union1__1 (2, "m2", &_tc_Pet);

static TAO::TypeCode::Case<char const *, ::CORBA::TypeCode_ptr const *> const * const _tao_cases_Union1[] =
  {
    &_tao_cases_Union1__0,
    &_tao_cases_Union1__1
  };

static TAO::TypeCode::Union<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::TypeCode::Case<char const *, ::CORBA::TypeCode_ptr const *> const * const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_Union1 (
    "IDL:Union1:1.0",
    "Union1",
    &CORBA::_tc_long,
    _tao_cases_Union1,
    sizeof (_tao_cases_Union1)/sizeof (_tao_cases_Union1[0]),
    -1);
  
::CORBA::TypeCode_ptr const _tc_Union1 =
  &_tao_tc_Union1;

// TAO_IDL - Generated from
// be/be_visitor_sequence/sequence_cs.cpp:70

#if !defined (_LONGSEQ_CS_)
#define _LONGSEQ_CS_

LongSeq::LongSeq (void)
{}

LongSeq::LongSeq (
    ::CORBA::ULong max)
  : ::TAO::unbounded_value_sequence<
        ::CORBA::Long
      > (max)
{}

LongSeq::LongSeq (
    ::CORBA::ULong max,
    ::CORBA::ULong length,
    ::CORBA::Long * buffer,
    ::CORBA::Boolean release
  )
  : ::TAO::unbounded_value_sequence<
        ::CORBA::Long
      >
    (max, length, buffer, release)
{}

LongSeq::LongSeq (
    const LongSeq &seq)
  : ::TAO::unbounded_value_sequence<
        ::CORBA::Long
      > (seq)
{}

LongSeq::~LongSeq (void)
{}

void LongSeq::_tao_any_destructor (
    void * _tao_void_pointer)
{
  LongSeq * _tao_tmp_pointer =
    static_cast<LongSeq *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

#endif /* end #if !defined */

// TAO_IDL - Generated from
// be/be_visitor_typecode/alias_typecode.cpp:49



// TAO_IDL - Generated from
// be/be_visitor_typecode/typecode_defn.cpp:461


#ifndef _TAO_TYPECODE_LongSeq_GUARD
#define _TAO_TYPECODE_LongSeq_GUARD

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

namespace TAO
{
  namespace TypeCode
  {
    namespace
    {
      TAO::TypeCode::Sequence< ::CORBA::TypeCode_ptr const *,
                              TAO::Null_RefCount_Policy>
        LongSeq_0 (
          ::CORBA::tk_sequence,
          &CORBA::_tc_long,
          0U);
        
      ::CORBA::TypeCode_ptr const tc_LongSeq_0 =
        &LongSeq_0;
    }
  }
}

TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_TYPECODE_LongSeq_GUARD */

static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_LongSeq (
    ::CORBA::tk_alias,
    "IDL:LongSeq:1.0",
    "LongSeq",
    &TAO::TypeCode::tc_LongSeq_0);
  
::CORBA::TypeCode_ptr const _tc_LongSeq =
  &_tao_tc_LongSeq;

// TAO_IDL - Generated from
// be/be_visitor_array/array_cs.cpp:94

oct_array_slice *
oct_array_dup (const oct_array_slice *_tao_src_array)
{
  oct_array_slice *_tao_dup_array =
    oct_array_alloc ();
  
  if (!_tao_dup_array)
    {
      return static_cast <oct_array_slice *> (0);
    }
  
  oct_array_copy (_tao_dup_array, _tao_src_array);
  return _tao_dup_array;
}

oct_array_slice *
oct_array_alloc (void)
{
  oct_array_slice *retval = 0;
  ACE_NEW_RETURN (retval, ::CORBA::Octet[10], 0);
  return retval;
}

void
oct_array_free (
    oct_array_slice *_tao_slice)
{
  delete [] _tao_slice;
}

void
oct_array_copy (
    oct_array_slice * _tao_to,
    const oct_array_slice *_tao_from)
{
  // Copy each individual element.
  for ( ::CORBA::ULong i0 = 0; i0 < 10; ++i0)
    {
      _tao_to[i0] = _tao_from[i0];
    }
}

// TAO_IDL - Generated from
// be/be_visitor_typecode/alias_typecode.cpp:49



// TAO_IDL - Generated from
// be/be_visitor_typecode/typecode_defn.cpp:298


#ifndef _TAO_TYPECODE_oct_array_GUARD
#define _TAO_TYPECODE_oct_array_GUARD

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

namespace TAO
{
  namespace TypeCode
  {
    namespace
    {
      TAO::TypeCode::Sequence< ::CORBA::TypeCode_ptr const *,
                              TAO::Null_RefCount_Policy>
        oct_array_10 (
          ::CORBA::tk_array,
          &CORBA::_tc_octet,
          10U);
        
      ::CORBA::TypeCode_ptr const tc_oct_array =
        &oct_array_10;
    }
  }
}

TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_TYPECODE_oct_array_GUARD */
static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_oct_array (
    ::CORBA::tk_alias,
    "IDL:oct_array:1.0",
    "oct_array",
    &TAO::TypeCode::tc_oct_array);
  
::CORBA::TypeCode_ptr const _tc_oct_array =
  &_tao_tc_oct_array;

// TAO_IDL - Generated from
// be/be_visitor_sequence/sequence_cs.cpp:70

#if !defined (_PETSEQ_CS_)
#define _PETSEQ_CS_

PetSeq::PetSeq (void)
{}

PetSeq::PetSeq (
    ::CORBA::ULong max)
  : ::TAO::unbounded_value_sequence<
        Pet
      > (max)
{}

PetSeq::PetSeq (
    ::CORBA::ULong max,
    ::CORBA::ULong length,
    Pet * buffer,
    ::CORBA::Boolean release
  )
  : ::TAO::unbounded_value_sequence<
        Pet
      >
    (max, length, buffer, release)
{}

PetSeq::PetSeq (
    const PetSeq &seq)
  : ::TAO::unbounded_value_sequence<
        Pet
      > (seq)
{}

PetSeq::~PetSeq (void)
{}

void PetSeq::_tao_any_destructor (
    void * _tao_void_pointer)
{
  PetSeq * _tao_tmp_pointer =
    static_cast<PetSeq *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

#endif /* end #if !defined */

// TAO_IDL - Generated from
// be/be_visitor_typecode/alias_typecode.cpp:49



// TAO_IDL - Generated from
// be/be_visitor_typecode/typecode_defn.cpp:461


#ifndef _TAO_TYPECODE_PetSeq_GUARD
#define _TAO_TYPECODE_PetSeq_GUARD

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

namespace TAO
{
  namespace TypeCode
  {
    namespace
    {
      TAO::TypeCode::Sequence< ::CORBA::TypeCode_ptr const *,
                              TAO::Null_RefCount_Policy>
        PetSeq_0 (
          ::CORBA::tk_sequence,
          &_tc_Pet,
          0U);
        
      ::CORBA::TypeCode_ptr const tc_PetSeq_0 =
        &PetSeq_0;
    }
  }
}

TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_TYPECODE_PetSeq_GUARD */

static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_PetSeq (
    ::CORBA::tk_alias,
    "IDL:PetSeq:1.0",
    "PetSeq",
    &TAO::TypeCode::tc_PetSeq_0);
  
::CORBA::TypeCode_ptr const _tc_PetSeq =
  &_tao_tc_PetSeq;

// TAO_IDL - Generated from
// be/be_visitor_typecode/struct_typecode.cpp:86



// TAO_IDL - Generated from
// be/be_visitor_typecode/typecode_defn.cpp:298



// TAO_IDL - Generated from
// be/be_visitor_typecode/typecode_defn.cpp:298



// TAO_IDL - Generated from
// be/be_visitor_typecode/typecode_defn.cpp:461



// TAO_IDL - Generated from
// be/be_visitor_typecode/typecode_defn.cpp:461

static TAO::TypeCode::Struct_Field<
  char const *,
  ::CORBA::TypeCode_ptr const *> const 
    _tao_fields_Variable_Struct2[] =
      {
        { "len", &CORBA::_tc_long },
        { "whatever", &CORBA::_tc_any },
        { "apet", &_tc_Pet },
        { "octet_array", &_tc_oct_array },
        { "td_array", &_tc_short_array },
        { "intf1", &_tc_Interface1 },
        { "intf2", &_tc_InterfaceFwd },
        { "str", &CORBA::_tc_string },
        { "wstr", &CORBA::_tc_wstring },
        { "ls", &_tc_LongSeq },
        { "sqq", &_tc_PetSeq },
        { "ns1", &Variable_Struct2::_tc_NestedStruct1 },
        { "NestedStruct2", &_tc_Variable_Struct1 },
        { "NestedStruct3", &_tc_TDvariable_struct1 },
        { "un", &_tc_Union1 }
      };
  
static TAO::TypeCode::Struct<
  char const *,
  ::CORBA::TypeCode_ptr const *,
  TAO::TypeCode::Struct_Field<
    char const *,
    ::CORBA::TypeCode_ptr const *> const *,
  TAO::Null_RefCount_Policy>
_tao_tc_Variable_Struct2 (
  ::CORBA::tk_struct,
  "IDL:Variable_Struct2:1.0",
  "Variable_Struct2",
  _tao_fields_Variable_Struct2,
  15);

::CORBA::TypeCode_ptr const _tc_Variable_Struct2 =
  &_tao_tc_Variable_Struct2;

// TAO_IDL - Generated from
// be/be_visitor_structure/structure_cs.cpp:56

void
Variable_Struct2::_tao_any_destructor (
    void *_tao_void_pointer)
{
  Variable_Struct2 *_tao_tmp_pointer =
    static_cast<Variable_Struct2 *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

// TAO_IDL - Generated from
// be/be_visitor_typecode/struct_typecode.cpp:86

static TAO::TypeCode::Struct_Field<
  char const *,
  ::CORBA::TypeCode_ptr const *> const 
    _tao_fields_Variable_Struct2_NestedStruct1[] =
      {
        { "s", &CORBA::_tc_short },
        { "str2", &CORBA::_tc_string }
      };
  
static TAO::TypeCode::Struct<
  char const *,
  ::CORBA::TypeCode_ptr const *,
  TAO::TypeCode::Struct_Field<
    char const *,
    ::CORBA::TypeCode_ptr const *> const *,
  TAO::Null_RefCount_Policy>
_tao_tc_Variable_Struct2_NestedStruct1 (
  ::CORBA::tk_struct,
  "IDL:Variable_Struct2/NestedStruct1:1.0",
  "NestedStruct1",
  _tao_fields_Variable_Struct2_NestedStruct1,
  2);

::CORBA::TypeCode_ptr const Variable_Struct2::_tc_NestedStruct1 =
  &_tao_tc_Variable_Struct2_NestedStruct1;

// TAO_IDL - Generated from
// be/be_visitor_structure/structure_cs.cpp:56

void
Variable_Struct2::NestedStruct1::_tao_any_destructor (
    void *_tao_void_pointer)
{
  NestedStruct1 *_tao_tmp_pointer =
    static_cast<NestedStruct1 *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

// TAO_IDL - Generated from
// be/be_visitor_typecode/alias_typecode.cpp:49

static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_VBfixed_struct1 (
    ::CORBA::tk_value_box,
    "IDL:VBfixed_struct1:1.0",
    "VBfixed_struct1",
    &_tc_Fixed_Struct1);
  
::CORBA::TypeCode_ptr const _tc_VBfixed_struct1 =
  &_tao_tc_VBfixed_struct1;

// TAO_IDL - Generated from
// be/be_visitor_valuebox/valuebox_cs.cpp:52

void
TAO::Value_Traits<VBfixed_struct1>::add_ref (
    VBfixed_struct1 * p
  )
{
  ::CORBA::add_ref (p);
}

void
TAO::Value_Traits<VBfixed_struct1>::remove_ref (
    VBfixed_struct1 * p
  )
{
  ::CORBA::remove_ref (p);
}

void
TAO::Value_Traits<VBfixed_struct1>::release (
    VBfixed_struct1 * p
  )
{
  ::CORBA::remove_ref (p);
}

VBfixed_struct1 *
VBfixed_struct1::_downcast ( ::CORBA::ValueBase *v)
{
  return dynamic_cast< ::VBfixed_struct1 * > (v);
}

::CORBA::ValueBase *
VBfixed_struct1::_copy_value (void)
{
  ::CORBA::ValueBase *result = 0;
  ACE_NEW_RETURN (
    result,
    VBfixed_struct1 (*this),
    0);
    
  return result;
}

const char *
VBfixed_struct1::_tao_obv_repository_id (void) const
{
  return this->_tao_obv_static_repository_id ();
}

void
VBfixed_struct1::_tao_obv_truncatable_repo_ids (Repository_Id_List& ids) const
{
  ids.push_back (this->_tao_obv_static_repository_id ());
}

::CORBA::Boolean
VBfixed_struct1::_tao_match_formal_type (ptrdiff_t ) const
{
  return true;
}

void
VBfixed_struct1::_tao_any_destructor (void *_tao_void_pointer)
{
  VBfixed_struct1 *_tao_tmp_pointer =
    static_cast<VBfixed_struct1 *> (_tao_void_pointer);
  ::CORBA::remove_ref (_tao_tmp_pointer);
}

// TAO extension - the virtual _type method.
::CORBA::TypeCode_ptr VBfixed_struct1::_tao_type (void) const
{
  return ::_tc_VBfixed_struct1;
}

::CORBA::Boolean
VBfixed_struct1::_tao_unmarshal (
    TAO_InputCDR &strm,
    VBfixed_struct1 *&vb_object
  )
{
  ::CORBA::Boolean is_null_object = false;
  ::CORBA::Boolean is_indirected = false;
  TAO_InputCDR indrected_strm ((size_t) 0);
  if ( ::CORBA::ValueBase::_tao_validate_box_type (
        strm, indrected_strm,
        VBfixed_struct1::_tao_obv_static_repository_id (),
        is_null_object, is_indirected
      ) == false)
    {
      return false;
    }
  
  vb_object = 0;
  if (is_null_object)
    {
      return true;
    }
  
  if (is_indirected)
    {
      return VBfixed_struct1::_tao_unmarshal (
             indrected_strm, vb_object);
    }
  
  ACE_NEW_RETURN (
    vb_object,
    VBfixed_struct1,
    false);
  
  return (strm >> vb_object->_pd_value);
}

::CORBA::Boolean
VBfixed_struct1::_tao_unmarshal_v (TAO_InputCDR &)
{
  return true;
}



// TAO_IDL - Generated from
// be/be_visitor_valuebox/valuebox_cs.cpp:666

VBfixed_struct1::~VBfixed_struct1 (void)
{
}

::CORBA::Boolean
VBfixed_struct1::_tao_marshal_v (TAO_OutputCDR & strm) const
{
  return (strm << this->_pd_value.in ());
}



// TAO_IDL - Generated from
// be/be_visitor_typecode/alias_typecode.cpp:49

static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_VBvariable_struct1 (
    ::CORBA::tk_value_box,
    "IDL:VBvariable_struct1:1.0",
    "VBvariable_struct1",
    &_tc_Variable_Struct1);
  
::CORBA::TypeCode_ptr const _tc_VBvariable_struct1 =
  &_tao_tc_VBvariable_struct1;

// TAO_IDL - Generated from
// be/be_visitor_valuebox/valuebox_cs.cpp:52

void
TAO::Value_Traits<VBvariable_struct1>::add_ref (
    VBvariable_struct1 * p
  )
{
  ::CORBA::add_ref (p);
}

void
TAO::Value_Traits<VBvariable_struct1>::remove_ref (
    VBvariable_struct1 * p
  )
{
  ::CORBA::remove_ref (p);
}

void
TAO::Value_Traits<VBvariable_struct1>::release (
    VBvariable_struct1 * p
  )
{
  ::CORBA::remove_ref (p);
}

VBvariable_struct1 *
VBvariable_struct1::_downcast ( ::CORBA::ValueBase *v)
{
  return dynamic_cast< ::VBvariable_struct1 * > (v);
}

::CORBA::ValueBase *
VBvariable_struct1::_copy_value (void)
{
  ::CORBA::ValueBase *result = 0;
  ACE_NEW_RETURN (
    result,
    VBvariable_struct1 (*this),
    0);
    
  return result;
}

const char *
VBvariable_struct1::_tao_obv_repository_id (void) const
{
  return this->_tao_obv_static_repository_id ();
}

void
VBvariable_struct1::_tao_obv_truncatable_repo_ids (Repository_Id_List& ids) const
{
  ids.push_back (this->_tao_obv_static_repository_id ());
}

::CORBA::Boolean
VBvariable_struct1::_tao_match_formal_type (ptrdiff_t ) const
{
  return true;
}

void
VBvariable_struct1::_tao_any_destructor (void *_tao_void_pointer)
{
  VBvariable_struct1 *_tao_tmp_pointer =
    static_cast<VBvariable_struct1 *> (_tao_void_pointer);
  ::CORBA::remove_ref (_tao_tmp_pointer);
}

// TAO extension - the virtual _type method.
::CORBA::TypeCode_ptr VBvariable_struct1::_tao_type (void) const
{
  return ::_tc_VBvariable_struct1;
}

::CORBA::Boolean
VBvariable_struct1::_tao_unmarshal (
    TAO_InputCDR &strm,
    VBvariable_struct1 *&vb_object
  )
{
  ::CORBA::Boolean is_null_object = false;
  ::CORBA::Boolean is_indirected = false;
  TAO_InputCDR indrected_strm ((size_t) 0);
  if ( ::CORBA::ValueBase::_tao_validate_box_type (
        strm, indrected_strm,
        VBvariable_struct1::_tao_obv_static_repository_id (),
        is_null_object, is_indirected
      ) == false)
    {
      return false;
    }
  
  vb_object = 0;
  if (is_null_object)
    {
      return true;
    }
  
  if (is_indirected)
    {
      return VBvariable_struct1::_tao_unmarshal (
             indrected_strm, vb_object);
    }
  
  ACE_NEW_RETURN (
    vb_object,
    VBvariable_struct1,
    false);
  
  return (strm >> vb_object->_pd_value);
}

::CORBA::Boolean
VBvariable_struct1::_tao_unmarshal_v (TAO_InputCDR &)
{
  return true;
}



// TAO_IDL - Generated from
// be/be_visitor_valuebox/valuebox_cs.cpp:666

VBvariable_struct1::~VBvariable_struct1 (void)
{
}

::CORBA::Boolean
VBvariable_struct1::_tao_marshal_v (TAO_OutputCDR & strm) const
{
  return (strm << this->_pd_value.in ());
}



// TAO_IDL - Generated from
// be/be_visitor_typecode/alias_typecode.cpp:49

static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_VBvariable_struct2 (
    ::CORBA::tk_value_box,
    "IDL:VBvariable_struct2:1.0",
    "VBvariable_struct2",
    &_tc_Variable_Struct2);
  
::CORBA::TypeCode_ptr const _tc_VBvariable_struct2 =
  &_tao_tc_VBvariable_struct2;

// TAO_IDL - Generated from
// be/be_visitor_valuebox/valuebox_cs.cpp:52

void
TAO::Value_Traits<VBvariable_struct2>::add_ref (
    VBvariable_struct2 * p
  )
{
  ::CORBA::add_ref (p);
}

void
TAO::Value_Traits<VBvariable_struct2>::remove_ref (
    VBvariable_struct2 * p
  )
{
  ::CORBA::remove_ref (p);
}

void
TAO::Value_Traits<VBvariable_struct2>::release (
    VBvariable_struct2 * p
  )
{
  ::CORBA::remove_ref (p);
}

VBvariable_struct2 *
VBvariable_struct2::_downcast ( ::CORBA::ValueBase *v)
{
  return dynamic_cast< ::VBvariable_struct2 * > (v);
}

::CORBA::ValueBase *
VBvariable_struct2::_copy_value (void)
{
  ::CORBA::ValueBase *result = 0;
  ACE_NEW_RETURN (
    result,
    VBvariable_struct2 (*this),
    0);
    
  return result;
}

const char *
VBvariable_struct2::_tao_obv_repository_id (void) const
{
  return this->_tao_obv_static_repository_id ();
}

void
VBvariable_struct2::_tao_obv_truncatable_repo_ids (Repository_Id_List& ids) const
{
  ids.push_back (this->_tao_obv_static_repository_id ());
}

::CORBA::Boolean
VBvariable_struct2::_tao_match_formal_type (ptrdiff_t ) const
{
  return true;
}

void
VBvariable_struct2::_tao_any_destructor (void *_tao_void_pointer)
{
  VBvariable_struct2 *_tao_tmp_pointer =
    static_cast<VBvariable_struct2 *> (_tao_void_pointer);
  ::CORBA::remove_ref (_tao_tmp_pointer);
}

// TAO extension - the virtual _type method.
::CORBA::TypeCode_ptr VBvariable_struct2::_tao_type (void) const
{
  return ::_tc_VBvariable_struct2;
}

::CORBA::Boolean
VBvariable_struct2::_tao_unmarshal (
    TAO_InputCDR &strm,
    VBvariable_struct2 *&vb_object
  )
{
  ::CORBA::Boolean is_null_object = false;
  ::CORBA::Boolean is_indirected = false;
  TAO_InputCDR indrected_strm ((size_t) 0);
  if ( ::CORBA::ValueBase::_tao_validate_box_type (
        strm, indrected_strm,
        VBvariable_struct2::_tao_obv_static_repository_id (),
        is_null_object, is_indirected
      ) == false)
    {
      return false;
    }
  
  vb_object = 0;
  if (is_null_object)
    {
      return true;
    }
  
  if (is_indirected)
    {
      return VBvariable_struct2::_tao_unmarshal (
             indrected_strm, vb_object);
    }
  
  ACE_NEW_RETURN (
    vb_object,
    VBvariable_struct2,
    false);
  
  return (strm >> vb_object->_pd_value);
}

::CORBA::Boolean
VBvariable_struct2::_tao_unmarshal_v (TAO_InputCDR &)
{
  return true;
}



// TAO_IDL - Generated from
// be/be_visitor_valuebox/valuebox_cs.cpp:666

VBvariable_struct2::~VBvariable_struct2 (void)
{
}

::CORBA::Boolean
VBvariable_struct2::_tao_marshal_v (TAO_OutputCDR & strm) const
{
  return (strm << this->_pd_value.in ());
}



// TAO_IDL - Generated from
// be/be_visitor_interface/interface_cs.cpp:48

// Traits specializations for InterfaceFwd.

InterfaceFwd_ptr
TAO::Objref_Traits<InterfaceFwd>::duplicate (
    InterfaceFwd_ptr p)
{
  return InterfaceFwd::_duplicate (p);
}

void
TAO::Objref_Traits<InterfaceFwd>::release (
    InterfaceFwd_ptr p)
{
  ::CORBA::release (p);
}

InterfaceFwd_ptr
TAO::Objref_Traits<InterfaceFwd>::nil (void)
{
  return InterfaceFwd::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<InterfaceFwd>::marshal (
    const InterfaceFwd_ptr p,
    TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:88

::CORBA::Long
InterfaceFwd::getval (
  ::CORBA::Short s)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  TAO::Arg_Traits< ::CORBA::Long>::ret_val _tao_retval;
  TAO::Arg_Traits< ::CORBA::Short>::in_arg_val _tao_s (s);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_s
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      2,
      "getval",
      6,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY
      
    );

  _tao_call.invoke (0, 0);

  return _tao_retval.retn ();
}

InterfaceFwd::InterfaceFwd (void)
{
}

InterfaceFwd::~InterfaceFwd (void)
{
}

void
InterfaceFwd::_tao_any_destructor (void *_tao_void_pointer)
{
  InterfaceFwd *_tao_tmp_pointer =
    static_cast<InterfaceFwd *> (_tao_void_pointer);
  ::CORBA::release (_tao_tmp_pointer);
}

InterfaceFwd_ptr
InterfaceFwd::_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return
    TAO::Narrow_Utils<InterfaceFwd>::narrow (
        _tao_objref,
        "IDL:InterfaceFwd:1.0");
}

InterfaceFwd_ptr
InterfaceFwd::_unchecked_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return
    TAO::Narrow_Utils<InterfaceFwd>::unchecked_narrow (
        _tao_objref);
}

InterfaceFwd_ptr
InterfaceFwd::_nil (void)
{
  return 0;
}

InterfaceFwd_ptr
InterfaceFwd::_duplicate (InterfaceFwd_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  return obj;
}

void
InterfaceFwd::_tao_release (InterfaceFwd_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
InterfaceFwd::_is_a (const char *value)
{
  if (
      ACE_OS::strcmp (
          value,
          "IDL:InterfaceFwd:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        ) == 0
    )
    {
      return true; // success using local knowledge
    }
  else
    {
      return this->::CORBA::Object::_is_a (value);
    }
}

const char* InterfaceFwd::_interface_repository_id (void) const
{
  return "IDL:InterfaceFwd:1.0";
}

::CORBA::Boolean
InterfaceFwd::marshal (TAO_OutputCDR &cdr)
{
  return (cdr << this);
}

// TAO_IDL - Generated from
// be/be_visitor_typecode/objref_typecode.cpp:70

static TAO::TypeCode::Objref<char const *,
                             TAO::Null_RefCount_Policy>
  _tao_tc_InterfaceFwd (
    ::CORBA::tk_objref,
    "IDL:InterfaceFwd:1.0",
    "InterfaceFwd");
  
::CORBA::TypeCode_ptr const _tc_InterfaceFwd =
  &_tao_tc_InterfaceFwd;

// TAO_IDL - Generated from
// be/be_visitor_structure/any_op_cs.cpp:43


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

/// Copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  const Fixed_Struct1 &_tao_elem)
{
  TAO::Any_Dual_Impl_T<Fixed_Struct1>::insert_copy (
    _tao_any,
    Fixed_Struct1::_tao_any_destructor,
    _tc_Fixed_Struct1,
    _tao_elem);
}

/// Non-copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  Fixed_Struct1 *_tao_elem)
{
  TAO::Any_Dual_Impl_T<Fixed_Struct1>::insert (
    _tao_any,
    Fixed_Struct1::_tao_any_destructor,
    _tc_Fixed_Struct1,
    _tao_elem);
}

/// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
  const ::CORBA::Any &_tao_any,
  Fixed_Struct1 *&_tao_elem)
{
  return _tao_any >>= const_cast<
      const Fixed_Struct1 *&> (
      _tao_elem);
}

/// Extraction to const pointer.
::CORBA::Boolean operator>>= (
  const ::CORBA::Any &_tao_any,
  const Fixed_Struct1 *&_tao_elem)
{
  return
    TAO::Any_Dual_Impl_T<Fixed_Struct1>::extract (
      _tao_any,
      Fixed_Struct1::_tao_any_destructor,
      _tc_Fixed_Struct1,
      _tao_elem);
}
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_structure/any_op_cs.cpp:43


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

/// Copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  const Fixed_Struct1::Bstruct &_tao_elem)
{
  TAO::Any_Dual_Impl_T<Fixed_Struct1::Bstruct>::insert_copy (
    _tao_any,
    Fixed_Struct1::Bstruct::_tao_any_destructor,
    Fixed_Struct1::_tc_Bstruct,
    _tao_elem);
}

/// Non-copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  Fixed_Struct1::Bstruct *_tao_elem)
{
  TAO::Any_Dual_Impl_T<Fixed_Struct1::Bstruct>::insert (
    _tao_any,
    Fixed_Struct1::Bstruct::_tao_any_destructor,
    Fixed_Struct1::_tc_Bstruct,
    _tao_elem);
}

/// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
  const ::CORBA::Any &_tao_any,
  Fixed_Struct1::Bstruct *&_tao_elem)
{
  return _tao_any >>= const_cast<
      const Fixed_Struct1::Bstruct *&> (
      _tao_elem);
}

/// Extraction to const pointer.
::CORBA::Boolean operator>>= (
  const ::CORBA::Any &_tao_any,
  const Fixed_Struct1::Bstruct *&_tao_elem)
{
  return
    TAO::Any_Dual_Impl_T<Fixed_Struct1::Bstruct>::extract (
      _tao_any,
      Fixed_Struct1::Bstruct::_tao_any_destructor,
      Fixed_Struct1::_tc_Bstruct,
      _tao_elem);
}
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_structure/any_op_cs.cpp:43


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

/// Copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  const Variable_Struct1 &_tao_elem)
{
  TAO::Any_Dual_Impl_T<Variable_Struct1>::insert_copy (
    _tao_any,
    Variable_Struct1::_tao_any_destructor,
    _tc_Variable_Struct1,
    _tao_elem);
}

/// Non-copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  Variable_Struct1 *_tao_elem)
{
  TAO::Any_Dual_Impl_T<Variable_Struct1>::insert (
    _tao_any,
    Variable_Struct1::_tao_any_destructor,
    _tc_Variable_Struct1,
    _tao_elem);
}

/// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
  const ::CORBA::Any &_tao_any,
  Variable_Struct1 *&_tao_elem)
{
  return _tao_any >>= const_cast<
      const Variable_Struct1 *&> (
      _tao_elem);
}

/// Extraction to const pointer.
::CORBA::Boolean operator>>= (
  const ::CORBA::Any &_tao_any,
  const Variable_Struct1 *&_tao_elem)
{
  return
    TAO::Any_Dual_Impl_T<Variable_Struct1>::extract (
      _tao_any,
      Variable_Struct1::_tao_any_destructor,
      _tc_Variable_Struct1,
      _tao_elem);
}
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_interface/any_op_cs.cpp:38
TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<Interface1>::to_object (
      ::CORBA::Object_ptr &_tao_elem) const
  {
    _tao_elem = ::CORBA::Object::_duplicate (this->value_);
    return true;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



/// Copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    Interface1_ptr _tao_elem)
{
  Interface1_ptr _tao_objptr =
    Interface1::_duplicate (_tao_elem);
  _tao_any <<= &_tao_objptr;
}

/// Non-copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    Interface1_ptr *_tao_elem)
{
  TAO::Any_Impl_T<Interface1>::insert (
      _tao_any,
      Interface1::_tao_any_destructor,
      _tc_Interface1,
      *_tao_elem);
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    Interface1_ptr &_tao_elem)
{
  return
    TAO::Any_Impl_T<Interface1>::extract (
        _tao_any,
        Interface1::_tao_any_destructor,
        _tc_Interface1,
        _tao_elem);
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_enum/any_op_cs.cpp:35

TAO_BEGIN_VERSIONED_NAMESPACE_DECL


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

void operator<<= (
    ::CORBA::Any &_tao_any,
    Pet _tao_elem
  )
{
  TAO::Any_Basic_Impl_T<Pet>::insert (
      _tao_any,
      _tc_Pet,
      _tao_elem
    );
}

::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    Pet &_tao_elem
  )
{
  return
    TAO::Any_Basic_Impl_T<Pet>::extract (
        _tao_any,
        _tc_Pet,
        _tao_elem 
      );
}
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_array/any_op_cs.cpp:37


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

void operator<<= (
    ::CORBA::Any &_tao_any,
    const short_array_forany &_tao_elem
  )
{
  TAO::Any_Array_Impl_T<
      short_array_slice,
      short_array_forany
    >::insert (
        _tao_any,
        short_array_forany::_tao_any_destructor,
        _tc_short_array,
        _tao_elem.nocopy ()
          ? _tao_elem.ptr ()
          : short_array_dup (_tao_elem.in ())
      );
}

::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    short_array_forany &_tao_elem
  )
{
  return
    TAO::Any_Array_Impl_T<
        short_array_slice,
        short_array_forany
      >::extract (
          _tao_any,
          short_array_forany::_tao_any_destructor,
          _tc_short_array,
          _tao_elem.out ()
        );
}
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_union/any_op_cs.cpp:37


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    const Union1 &_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<Union1>::insert_copy (
      _tao_any,
      Union1::_tao_any_destructor,
      _tc_Union1,
      _tao_elem
    );
}

// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    Union1 *_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<Union1>::insert (
      _tao_any,
      Union1::_tao_any_destructor,
      _tc_Union1,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    Union1 *&_tao_elem
  )
{
  return _tao_any >>= const_cast<
      const Union1 *&> (
      _tao_elem
    );
}

// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const Union1 *&_tao_elem
  )
{
  return
    TAO::Any_Dual_Impl_T<Union1>::extract (
        _tao_any,
        Union1::_tao_any_destructor,
        _tc_Union1,
        _tao_elem
      );
}
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_sequence/any_op_cs.cpp:45


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


// Copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    const LongSeq &_tao_elem)
{
  TAO::Any_Dual_Impl_T<LongSeq>::insert_copy (
      _tao_any,
      LongSeq::_tao_any_destructor,
      _tc_LongSeq,
      _tao_elem
    );
}

// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    LongSeq *_tao_elem)
{
  TAO::Any_Dual_Impl_T<LongSeq>::insert (
      _tao_any,
      LongSeq::_tao_any_destructor,
      _tc_LongSeq,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    LongSeq *&_tao_elem)
{
  return _tao_any >>= const_cast<
      const LongSeq *&> (
      _tao_elem
    );
}

// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const LongSeq *&_tao_elem)
{
  return
    TAO::Any_Dual_Impl_T<LongSeq>::extract (
        _tao_any,
        LongSeq::_tao_any_destructor,
        _tc_LongSeq,
        _tao_elem);
}
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_array/any_op_cs.cpp:37


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

void operator<<= (
    ::CORBA::Any &_tao_any,
    const oct_array_forany &_tao_elem
  )
{
  TAO::Any_Array_Impl_T<
      oct_array_slice,
      oct_array_forany
    >::insert (
        _tao_any,
        oct_array_forany::_tao_any_destructor,
        _tc_oct_array,
        _tao_elem.nocopy ()
          ? _tao_elem.ptr ()
          : oct_array_dup (_tao_elem.in ())
      );
}

::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    oct_array_forany &_tao_elem
  )
{
  return
    TAO::Any_Array_Impl_T<
        oct_array_slice,
        oct_array_forany
      >::extract (
          _tao_any,
          oct_array_forany::_tao_any_destructor,
          _tc_oct_array,
          _tao_elem.out ()
        );
}
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_sequence/any_op_cs.cpp:45


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


// Copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    const PetSeq &_tao_elem)
{
  TAO::Any_Dual_Impl_T<PetSeq>::insert_copy (
      _tao_any,
      PetSeq::_tao_any_destructor,
      _tc_PetSeq,
      _tao_elem
    );
}

// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    PetSeq *_tao_elem)
{
  TAO::Any_Dual_Impl_T<PetSeq>::insert (
      _tao_any,
      PetSeq::_tao_any_destructor,
      _tc_PetSeq,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    PetSeq *&_tao_elem)
{
  return _tao_any >>= const_cast<
      const PetSeq *&> (
      _tao_elem
    );
}

// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const PetSeq *&_tao_elem)
{
  return
    TAO::Any_Dual_Impl_T<PetSeq>::extract (
        _tao_any,
        PetSeq::_tao_any_destructor,
        _tc_PetSeq,
        _tao_elem);
}
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_structure/any_op_cs.cpp:43


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

/// Copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  const Variable_Struct2 &_tao_elem)
{
  TAO::Any_Dual_Impl_T<Variable_Struct2>::insert_copy (
    _tao_any,
    Variable_Struct2::_tao_any_destructor,
    _tc_Variable_Struct2,
    _tao_elem);
}

/// Non-copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  Variable_Struct2 *_tao_elem)
{
  TAO::Any_Dual_Impl_T<Variable_Struct2>::insert (
    _tao_any,
    Variable_Struct2::_tao_any_destructor,
    _tc_Variable_Struct2,
    _tao_elem);
}

/// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
  const ::CORBA::Any &_tao_any,
  Variable_Struct2 *&_tao_elem)
{
  return _tao_any >>= const_cast<
      const Variable_Struct2 *&> (
      _tao_elem);
}

/// Extraction to const pointer.
::CORBA::Boolean operator>>= (
  const ::CORBA::Any &_tao_any,
  const Variable_Struct2 *&_tao_elem)
{
  return
    TAO::Any_Dual_Impl_T<Variable_Struct2>::extract (
      _tao_any,
      Variable_Struct2::_tao_any_destructor,
      _tc_Variable_Struct2,
      _tao_elem);
}
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_structure/any_op_cs.cpp:43


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

/// Copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  const Variable_Struct2::NestedStruct1 &_tao_elem)
{
  TAO::Any_Dual_Impl_T<Variable_Struct2::NestedStruct1>::insert_copy (
    _tao_any,
    Variable_Struct2::NestedStruct1::_tao_any_destructor,
    Variable_Struct2::_tc_NestedStruct1,
    _tao_elem);
}

/// Non-copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  Variable_Struct2::NestedStruct1 *_tao_elem)
{
  TAO::Any_Dual_Impl_T<Variable_Struct2::NestedStruct1>::insert (
    _tao_any,
    Variable_Struct2::NestedStruct1::_tao_any_destructor,
    Variable_Struct2::_tc_NestedStruct1,
    _tao_elem);
}

/// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
  const ::CORBA::Any &_tao_any,
  Variable_Struct2::NestedStruct1 *&_tao_elem)
{
  return _tao_any >>= const_cast<
      const Variable_Struct2::NestedStruct1 *&> (
      _tao_elem);
}

/// Extraction to const pointer.
::CORBA::Boolean operator>>= (
  const ::CORBA::Any &_tao_any,
  const Variable_Struct2::NestedStruct1 *&_tao_elem)
{
  return
    TAO::Any_Dual_Impl_T<Variable_Struct2::NestedStruct1>::extract (
      _tao_any,
      Variable_Struct2::NestedStruct1::_tao_any_destructor,
      Variable_Struct2::_tc_NestedStruct1,
      _tao_elem);
}
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_valuebox/any_op_cs.cpp:46
TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<VBfixed_struct1>::to_value (
      ::CORBA::ValueBase *&_tao_elem
    ) const
  {
    ::CORBA::add_ref (this->value_);
    _tao_elem = this->value_;
    return true;
  }
}


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    VBfixed_struct1 *_tao_elem
  )
{
  ::CORBA::add_ref (_tao_elem);
  _tao_any <<= &_tao_elem;
}

// Non-copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    VBfixed_struct1 **_tao_elem
  )
{
  TAO::Any_Impl_T<VBfixed_struct1>::insert (
      _tao_any,
      VBfixed_struct1::_tao_any_destructor,
      _tc_VBfixed_struct1,
      *_tao_elem
    );
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    VBfixed_struct1 *&_tao_elem
  )
{
  return
    TAO::Any_Impl_T<VBfixed_struct1>::extract (
        _tao_any,
        VBfixed_struct1::_tao_any_destructor,
        _tc_VBfixed_struct1,
        _tao_elem
      );
}


TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_valuebox/any_op_cs.cpp:46
TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<VBvariable_struct1>::to_value (
      ::CORBA::ValueBase *&_tao_elem
    ) const
  {
    ::CORBA::add_ref (this->value_);
    _tao_elem = this->value_;
    return true;
  }
}


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    VBvariable_struct1 *_tao_elem
  )
{
  ::CORBA::add_ref (_tao_elem);
  _tao_any <<= &_tao_elem;
}

// Non-copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    VBvariable_struct1 **_tao_elem
  )
{
  TAO::Any_Impl_T<VBvariable_struct1>::insert (
      _tao_any,
      VBvariable_struct1::_tao_any_destructor,
      _tc_VBvariable_struct1,
      *_tao_elem
    );
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    VBvariable_struct1 *&_tao_elem
  )
{
  return
    TAO::Any_Impl_T<VBvariable_struct1>::extract (
        _tao_any,
        VBvariable_struct1::_tao_any_destructor,
        _tc_VBvariable_struct1,
        _tao_elem
      );
}


TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_valuebox/any_op_cs.cpp:46
TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<VBvariable_struct2>::to_value (
      ::CORBA::ValueBase *&_tao_elem
    ) const
  {
    ::CORBA::add_ref (this->value_);
    _tao_elem = this->value_;
    return true;
  }
}


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    VBvariable_struct2 *_tao_elem
  )
{
  ::CORBA::add_ref (_tao_elem);
  _tao_any <<= &_tao_elem;
}

// Non-copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    VBvariable_struct2 **_tao_elem
  )
{
  TAO::Any_Impl_T<VBvariable_struct2>::insert (
      _tao_any,
      VBvariable_struct2::_tao_any_destructor,
      _tc_VBvariable_struct2,
      *_tao_elem
    );
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    VBvariable_struct2 *&_tao_elem
  )
{
  return
    TAO::Any_Impl_T<VBvariable_struct2>::extract (
        _tao_any,
        VBvariable_struct2::_tao_any_destructor,
        _tc_VBvariable_struct2,
        _tao_elem
      );
}


TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_interface/any_op_cs.cpp:38
TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<InterfaceFwd>::to_object (
      ::CORBA::Object_ptr &_tao_elem) const
  {
    _tao_elem = ::CORBA::Object::_duplicate (this->value_);
    return true;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



/// Copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    InterfaceFwd_ptr _tao_elem)
{
  InterfaceFwd_ptr _tao_objptr =
    InterfaceFwd::_duplicate (_tao_elem);
  _tao_any <<= &_tao_objptr;
}

/// Non-copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    InterfaceFwd_ptr *_tao_elem)
{
  TAO::Any_Impl_T<InterfaceFwd>::insert (
      _tao_any,
      InterfaceFwd::_tao_any_destructor,
      _tc_InterfaceFwd,
      *_tao_elem);
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    InterfaceFwd_ptr &_tao_elem)
{
  return
    TAO::Any_Impl_T<InterfaceFwd>::extract (
        _tao_any,
        InterfaceFwd::_tao_any_destructor,
        _tc_InterfaceFwd,
        _tao_elem);
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_structure/cdr_op_cs.cpp:49

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Fixed_Struct1::Bstruct &_tao_aggregate)
{
  return
    (strm << _tao_aggregate.s1) &&
    (strm << _tao_aggregate.s2);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Fixed_Struct1::Bstruct &_tao_aggregate)
{
  return
    (strm >> _tao_aggregate.s1) &&
    (strm >> _tao_aggregate.s2);
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_structure/cdr_op_cs.cpp:49

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Fixed_Struct1 &_tao_aggregate)
{
  return
    (strm << _tao_aggregate.l) &&
    (strm << _tao_aggregate.abstruct);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Fixed_Struct1 &_tao_aggregate)
{
  return
    (strm >> _tao_aggregate.l) &&
    (strm >> _tao_aggregate.abstruct);
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_structure/cdr_op_cs.cpp:49

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Variable_Struct1 &_tao_aggregate)
{
  return
    (strm << _tao_aggregate.l) &&
    (strm << _tao_aggregate.str.in ());
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Variable_Struct1 &_tao_aggregate)
{
  return
    (strm >> _tao_aggregate.l) &&
    (strm >> _tao_aggregate.str.out ());
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_interface/cdr_op_cs.cpp:51

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Interface1_ptr _tao_objref)
{
  ::CORBA::Object_ptr _tao_corba_obj = _tao_objref;
  return (strm << _tao_corba_obj);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Interface1_ptr &_tao_objref)
{
  ::CORBA::Object_var obj;

  if (!(strm >> obj.inout ()))
    {
      return false;
    }
  
  typedef ::Interface1 RHS_SCOPED_NAME;

  // Narrow to the right type.
  _tao_objref =
    TAO::Narrow_Utils<RHS_SCOPED_NAME>::unchecked_narrow (obj.in ());
    
  return true;
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_enum/cdr_op_cs.cpp:34


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (TAO_OutputCDR &strm, Pet _tao_enumerator)
{
  return strm << static_cast< ::CORBA::ULong> (_tao_enumerator);
}

::CORBA::Boolean operator>> (TAO_InputCDR &strm, Pet & _tao_enumerator)
{
  ::CORBA::ULong _tao_temp = 0;
  ::CORBA::Boolean const _tao_success = strm >> _tao_temp;
  
  if (_tao_success)
    {
      _tao_enumerator = static_cast<Pet> (_tao_temp);
    }
  
  return _tao_success;
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_array/cdr_op_cs.cpp:163


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const short_array_forany &_tao_array)
{
  return
    strm.write_short_array (
        reinterpret_cast <const ACE_CDR::Short *> (_tao_array.in ()),
        15);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    short_array_forany &_tao_array)
{
  return
    strm.read_short_array (
        reinterpret_cast <ACE_CDR::Short *> (_tao_array.out ()),
        15);
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_union/cdr_op_cs.cpp:74


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Union1 &_tao_union
  )
{
  if ( !(strm << _tao_union._d ()) )
    {
      return false;
    }
  
  ::CORBA::Boolean result = true;

  switch (_tao_union._d ())
  {
    case 1:
      {
        result = strm << _tao_union.m1 ();
      }
      break;
    case 2:
      {
        result = strm << _tao_union.m2 ();
      }
      break;
    default:
      break;
  }

  return result;
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Union1 &_tao_union
  )
{
  CORBA::Long _tao_discriminant;
  if ( !(strm >> _tao_discriminant) )
    {
      return false;
    }
  
  ::CORBA::Boolean result = true;

  switch (_tao_discriminant)
  {
    case 1:
      {
        CORBA::Long _tao_union_tmp;
        result = strm >> _tao_union_tmp;

        if (result)
          {
            _tao_union.m1 (_tao_union_tmp);
            _tao_union._d (_tao_discriminant);
          }
      }
      break;
    case 2:
      {
        Pet _tao_union_tmp =
          static_cast<Pet> (0UL);
        result = strm >> _tao_union_tmp;

        if (result)
          {
            _tao_union.m2 (_tao_union_tmp);
            _tao_union._d (_tao_discriminant);
          }
      }
      break;
    default:
      _tao_union._default ();
      // For maximum interop compatibility, force the same value as transmitted
      _tao_union._d (_tao_discriminant);
      break;
  }

  return result;
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_sequence/cdr_op_cs.cpp:93
#if !defined _TAO_CDR_OP_LongSeq_CPP_
#define _TAO_CDR_OP_LongSeq_CPP_

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const LongSeq &_tao_sequence)
{
  return TAO::marshal_sequence(strm, _tao_sequence);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    LongSeq &_tao_sequence)
{
  return TAO::demarshal_sequence(strm, _tao_sequence);
}


TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_CDR_OP_LongSeq_CPP_ */

// TAO_IDL - Generated from
// be/be_visitor_array/cdr_op_cs.cpp:163


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const oct_array_forany &_tao_array)
{
  return
    strm.write_octet_array (
        reinterpret_cast <const ACE_CDR::Octet *> (_tao_array.in ()),
        10);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    oct_array_forany &_tao_array)
{
  return
    strm.read_octet_array (
        reinterpret_cast <ACE_CDR::Octet *> (_tao_array.out ()),
        10);
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_sequence/cdr_op_cs.cpp:93
#if !defined _TAO_CDR_OP_PetSeq_CPP_
#define _TAO_CDR_OP_PetSeq_CPP_

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const PetSeq &_tao_sequence)
{
  return TAO::marshal_sequence(strm, _tao_sequence);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    PetSeq &_tao_sequence)
{
  return TAO::demarshal_sequence(strm, _tao_sequence);
}


TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_CDR_OP_PetSeq_CPP_ */

// TAO_IDL - Generated from
// be/be_visitor_structure/cdr_op_cs.cpp:49

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Variable_Struct2::NestedStruct1 &_tao_aggregate)
{
  return
    (strm << _tao_aggregate.s) &&
    (strm << _tao_aggregate.str2.in ());
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Variable_Struct2::NestedStruct1 &_tao_aggregate)
{
  return
    (strm >> _tao_aggregate.s) &&
    (strm >> _tao_aggregate.str2.out ());
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_structure/cdr_op_cs.cpp:49

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Variable_Struct2 &_tao_aggregate)
{
  oct_array_forany _tao_aggregate_octet_array
      #if defined __IBMCPP__ && __IBMCPP__ <= 800
      ((oct_array_slice*) (
      #else
      (const_cast<
          oct_array_slice*> (
      #endif
          _tao_aggregate.octet_array
        )
    );
  short_array_forany _tao_aggregate_td_array
      #if defined __IBMCPP__ && __IBMCPP__ <= 800
      ((short_array_slice*) (
      #else
      (const_cast<
          short_array_slice*> (
      #endif
          _tao_aggregate.td_array
        )
    );
  return
    (strm << _tao_aggregate.len) &&
    (strm << _tao_aggregate.whatever) &&
    (strm << _tao_aggregate.apet) &&
    (strm << _tao_aggregate_octet_array) &&
    (strm << _tao_aggregate_td_array) &&
    ::CORBA::Object::marshal (
        _tao_aggregate.intf1.in (),
        strm
      ) &&
    ::CORBA::Object::marshal (
        _tao_aggregate.intf2.in (),
        strm
      ) &&
    (strm << _tao_aggregate.str.in ()) &&
    (strm << _tao_aggregate.wstr.in ()) &&
    (strm << _tao_aggregate.ls) &&
    (strm << _tao_aggregate.sqq) &&
    (strm << _tao_aggregate.ns1) &&
    (strm << _tao_aggregate.NestedStruct2) &&
    (strm << _tao_aggregate.NestedStruct3) &&
    (strm << _tao_aggregate.un);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Variable_Struct2 &_tao_aggregate)
{
  oct_array_forany _tao_aggregate_octet_array
      #if defined __IBMCPP__ && __IBMCPP__ <= 800
      ((oct_array_slice*) (
      #else
      (const_cast<
          oct_array_slice*> (
      #endif
          _tao_aggregate.octet_array
        )
    );
  short_array_forany _tao_aggregate_td_array
      #if defined __IBMCPP__ && __IBMCPP__ <= 800
      ((short_array_slice*) (
      #else
      (const_cast<
          short_array_slice*> (
      #endif
          _tao_aggregate.td_array
        )
    );
  return
    (strm >> _tao_aggregate.len) &&
    (strm >> _tao_aggregate.whatever) &&
    (strm >> _tao_aggregate.apet) &&
    (strm >> _tao_aggregate_octet_array) &&
    (strm >> _tao_aggregate_td_array) &&
    (strm >> _tao_aggregate.intf1.out ()) &&
    (strm >> _tao_aggregate.intf2.out ()) &&
    (strm >> _tao_aggregate.str.out ()) &&
    (strm >> _tao_aggregate.wstr.out ()) &&
    (strm >> _tao_aggregate.ls) &&
    (strm >> _tao_aggregate.sqq) &&
    (strm >> _tao_aggregate.ns1) &&
    (strm >> _tao_aggregate.NestedStruct2) &&
    (strm >> _tao_aggregate.NestedStruct3) &&
    (strm >> _tao_aggregate.un);
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_valuebox/cdr_op_cs.cpp:41


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean
operator<< (
    TAO_OutputCDR &strm,
    const VBfixed_struct1 *_tao_valuebox
  )
{
  return
    ::CORBA::ValueBase::_tao_marshal (
        strm,
        _tao_valuebox,
        reinterpret_cast<ptrdiff_t> (&VBfixed_struct1::_downcast)
      );
}

::CORBA::Boolean
operator>> (
    TAO_InputCDR &strm,
    VBfixed_struct1 *&_tao_valuebox
  )
{
  return VBfixed_struct1::_tao_unmarshal (strm, _tao_valuebox);
}


TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_valuebox/cdr_op_cs.cpp:41


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean
operator<< (
    TAO_OutputCDR &strm,
    const VBvariable_struct1 *_tao_valuebox
  )
{
  return
    ::CORBA::ValueBase::_tao_marshal (
        strm,
        _tao_valuebox,
        reinterpret_cast<ptrdiff_t> (&VBvariable_struct1::_downcast)
      );
}

::CORBA::Boolean
operator>> (
    TAO_InputCDR &strm,
    VBvariable_struct1 *&_tao_valuebox
  )
{
  return VBvariable_struct1::_tao_unmarshal (strm, _tao_valuebox);
}


TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_valuebox/cdr_op_cs.cpp:41


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean
operator<< (
    TAO_OutputCDR &strm,
    const VBvariable_struct2 *_tao_valuebox
  )
{
  return
    ::CORBA::ValueBase::_tao_marshal (
        strm,
        _tao_valuebox,
        reinterpret_cast<ptrdiff_t> (&VBvariable_struct2::_downcast)
      );
}

::CORBA::Boolean
operator>> (
    TAO_InputCDR &strm,
    VBvariable_struct2 *&_tao_valuebox
  )
{
  return VBvariable_struct2::_tao_unmarshal (strm, _tao_valuebox);
}


TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_interface/cdr_op_cs.cpp:51

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const InterfaceFwd_ptr _tao_objref)
{
  ::CORBA::Object_ptr _tao_corba_obj = _tao_objref;
  return (strm << _tao_corba_obj);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    InterfaceFwd_ptr &_tao_objref)
{
  ::CORBA::Object_var obj;

  if (!(strm >> obj.inout ()))
    {
      return false;
    }
  
  typedef ::InterfaceFwd RHS_SCOPED_NAME;

  // Narrow to the right type.
  _tao_objref =
    TAO::Narrow_Utils<RHS_SCOPED_NAME>::unchecked_narrow (obj.in ());
    
  return true;
}

TAO_END_VERSIONED_NAMESPACE_DECL



