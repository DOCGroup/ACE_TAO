// -*- C++ -*-
/**
 * Code generated by the The ACE ORB (TAO) IDL Compiler v2.4.1
 * TAO and the TAO IDL Compiler have been developed by:
 *       Center for Distributed Object Computing
 *       Washington University
 *       St. Louis, MO
 *       USA
 *       http://www.cs.wustl.edu/~schmidt/doc-center.html
 * and
 *       Distributed Object Computing Laboratory
 *       University of California at Irvine
 *       Irvine, CA
 *       USA
 * and
 *       Institute for Software Integrated Systems
 *       Vanderbilt University
 *       Nashville, TN
 *       USA
 *       http://www.isis.vanderbilt.edu/
 *
 * Information about TAO is available at:
 *     http://www.dre.vanderbilt.edu/~schmidt/TAO.html
 **/

// TAO_IDL - Generated from
// be/be_codegen.cpp:373


#include "vb_basicC.h"
#include "tao/AnyTypeCode/Null_RefCount_Policy.h"
#include "tao/AnyTypeCode/TypeCode_Constants.h"
#include "tao/AnyTypeCode/Alias_TypeCode_Static.h"
#include "tao/AnyTypeCode/Enum_TypeCode_Static.h"
#include "tao/AnyTypeCode/Objref_TypeCode_Static.h"
#include "tao/AnyTypeCode/Value_TypeCode_Static.h"
#include "tao/AnyTypeCode/TypeCode_Value_Field.h"
#include "tao/CDR.h"
#include "tao/Exception_Data.h"
#include "tao/Invocation_Adapter.h"
#include "tao/Valuetype/ValueFactory.h"
#include "tao/Object_T.h"
#include "tao/CDR.h"
#include "tao/AnyTypeCode/Any.h"
#include "tao/AnyTypeCode/Any_Impl_T.h"
#include "tao/AnyTypeCode/Any_Basic_Impl_T.h"
#include "ace/OS_NS_string.h"

#if !defined (__ACE_INLINE__)
#include "vb_basicC.inl"
#endif /* !defined INLINE */

// TAO_IDL - Generated from
// be/be_visitor_typecode/enum_typecode.cpp:29
static char const * const _tao_enumerators_Color[] =
  {
    "red",
    "orange",
    "yellow",
    "green",
    "blue",
    "indigo",
    "violet"

  };

static TAO::TypeCode::Enum<char const *,
                           char const * const *,
                           TAO::Null_RefCount_Policy>
  _tao_tc_Color (
    "IDL:Color:1.0",
    "Color",
    _tao_enumerators_Color,
    7);

::CORBA::TypeCode_ptr const _tc_Color =
  &_tao_tc_Color;

// TAO_IDL - Generated from
// be/be_visitor_typecode/alias_typecode.cpp:49

static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_VBshort (
    ::CORBA::tk_value_box,
    "IDL:VBshort:1.0",
    "VBshort",
    &CORBA::_tc_short);

::CORBA::TypeCode_ptr const _tc_VBshort =
  &_tao_tc_VBshort;

// TAO_IDL - Generated from
// be/be_visitor_valuebox/valuebox_cs.cpp:52

void
TAO::Value_Traits<VBshort>::add_ref (
    VBshort * p
  )
{
  ::CORBA::add_ref (p);
}

void
TAO::Value_Traits<VBshort>::remove_ref (
    VBshort * p
  )
{
  ::CORBA::remove_ref (p);
}

void
TAO::Value_Traits<VBshort>::release (
    VBshort * p
  )
{
  ::CORBA::remove_ref (p);
}

VBshort *
VBshort::_downcast ( ::CORBA::ValueBase *v)
{
  return dynamic_cast< ::VBshort * > (v);
}

::CORBA::ValueBase *
VBshort::_copy_value (void)
{
  ::CORBA::ValueBase *result = 0;
  ACE_NEW_RETURN (
    result,
    VBshort (*this),
    0);

  return result;
}

const char *
VBshort::_tao_obv_repository_id (void) const
{
  return this->_tao_obv_static_repository_id ();
}

void
VBshort::_tao_obv_truncatable_repo_ids (Repository_Id_List& ids) const
{
  ids.push_back (this->_tao_obv_static_repository_id ());
}

::CORBA::Boolean
VBshort::_tao_match_formal_type (ptrdiff_t ) const
{
  return true;
}

void
VBshort::_tao_any_destructor (void *_tao_void_pointer)
{
  VBshort *_tao_tmp_pointer =
    static_cast<VBshort *> (_tao_void_pointer);
  ::CORBA::remove_ref (_tao_tmp_pointer);
}

// TAO extension - the virtual _type method.
::CORBA::TypeCode_ptr VBshort::_tao_type (void) const
{
  return ::_tc_VBshort;
}

::CORBA::Boolean
VBshort::_tao_unmarshal (
    TAO_InputCDR &strm,
    VBshort *&vb_object
  )
{
  ::CORBA::Boolean is_null_object = false;
  ::CORBA::Boolean is_indirected = false;
  TAO_InputCDR indrected_strm ((size_t) 0);
  if ( ::CORBA::ValueBase::_tao_validate_box_type (
        strm, indrected_strm,
        VBshort::_tao_obv_static_repository_id (),
        is_null_object, is_indirected
      ) == false)
    {
      return false;
    }

  vb_object = 0;
  if (is_null_object)
    {
      return true;
    }

  if (is_indirected)
    {
      return VBshort::_tao_unmarshal (
             indrected_strm, vb_object);
    }

  ACE_NEW_RETURN (
    vb_object,
    VBshort,
    false);

  return (strm >> vb_object->_pd_value);
}

::CORBA::Boolean
VBshort::_tao_unmarshal_v (TAO_InputCDR &)
{
  return true;
}



// TAO_IDL - Generated from
// be/be_visitor_valuebox/valuebox_cs.cpp:745

VBshort::~VBshort (void)
{
}

::CORBA::Boolean
VBshort::_tao_marshal_v (TAO_OutputCDR & strm) const
{
  return (strm << this->_pd_value);
}



// TAO_IDL - Generated from
// be/be_visitor_typecode/alias_typecode.cpp:49

static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_VBlong (
    ::CORBA::tk_value_box,
    "IDL:VBlong:1.0",
    "VBlong",
    &CORBA::_tc_long);

::CORBA::TypeCode_ptr const _tc_VBlong =
  &_tao_tc_VBlong;

// TAO_IDL - Generated from
// be/be_visitor_valuebox/valuebox_cs.cpp:52

void
TAO::Value_Traits<VBlong>::add_ref (
    VBlong * p
  )
{
  ::CORBA::add_ref (p);
}

void
TAO::Value_Traits<VBlong>::remove_ref (
    VBlong * p
  )
{
  ::CORBA::remove_ref (p);
}

void
TAO::Value_Traits<VBlong>::release (
    VBlong * p
  )
{
  ::CORBA::remove_ref (p);
}

VBlong *
VBlong::_downcast ( ::CORBA::ValueBase *v)
{
  return dynamic_cast< ::VBlong * > (v);
}

::CORBA::ValueBase *
VBlong::_copy_value (void)
{
  ::CORBA::ValueBase *result = 0;
  ACE_NEW_RETURN (
    result,
    VBlong (*this),
    0);

  return result;
}

const char *
VBlong::_tao_obv_repository_id (void) const
{
  return this->_tao_obv_static_repository_id ();
}

void
VBlong::_tao_obv_truncatable_repo_ids (Repository_Id_List& ids) const
{
  ids.push_back (this->_tao_obv_static_repository_id ());
}

::CORBA::Boolean
VBlong::_tao_match_formal_type (ptrdiff_t ) const
{
  return true;
}

void
VBlong::_tao_any_destructor (void *_tao_void_pointer)
{
  VBlong *_tao_tmp_pointer =
    static_cast<VBlong *> (_tao_void_pointer);
  ::CORBA::remove_ref (_tao_tmp_pointer);
}

// TAO extension - the virtual _type method.
::CORBA::TypeCode_ptr VBlong::_tao_type (void) const
{
  return ::_tc_VBlong;
}

::CORBA::Boolean
VBlong::_tao_unmarshal (
    TAO_InputCDR &strm,
    VBlong *&vb_object
  )
{
  ::CORBA::Boolean is_null_object = false;
  ::CORBA::Boolean is_indirected = false;
  TAO_InputCDR indrected_strm ((size_t) 0);
  if ( ::CORBA::ValueBase::_tao_validate_box_type (
        strm, indrected_strm,
        VBlong::_tao_obv_static_repository_id (),
        is_null_object, is_indirected
      ) == false)
    {
      return false;
    }

  vb_object = 0;
  if (is_null_object)
    {
      return true;
    }

  if (is_indirected)
    {
      return VBlong::_tao_unmarshal (
             indrected_strm, vb_object);
    }

  ACE_NEW_RETURN (
    vb_object,
    VBlong,
    false);

  return (strm >> vb_object->_pd_value);
}

::CORBA::Boolean
VBlong::_tao_unmarshal_v (TAO_InputCDR &)
{
  return true;
}



// TAO_IDL - Generated from
// be/be_visitor_valuebox/valuebox_cs.cpp:745

VBlong::~VBlong (void)
{
}

::CORBA::Boolean
VBlong::_tao_marshal_v (TAO_OutputCDR & strm) const
{
  return (strm << this->_pd_value);
}



// TAO_IDL - Generated from
// be/be_visitor_typecode/alias_typecode.cpp:49

static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_VBlonglong (
    ::CORBA::tk_value_box,
    "IDL:VBlonglong:1.0",
    "VBlonglong",
    &CORBA::_tc_longlong);

::CORBA::TypeCode_ptr const _tc_VBlonglong =
  &_tao_tc_VBlonglong;

// TAO_IDL - Generated from
// be/be_visitor_valuebox/valuebox_cs.cpp:52

void
TAO::Value_Traits<VBlonglong>::add_ref (
    VBlonglong * p
  )
{
  ::CORBA::add_ref (p);
}

void
TAO::Value_Traits<VBlonglong>::remove_ref (
    VBlonglong * p
  )
{
  ::CORBA::remove_ref (p);
}

void
TAO::Value_Traits<VBlonglong>::release (
    VBlonglong * p
  )
{
  ::CORBA::remove_ref (p);
}

VBlonglong *
VBlonglong::_downcast ( ::CORBA::ValueBase *v)
{
  return dynamic_cast< ::VBlonglong * > (v);
}

::CORBA::ValueBase *
VBlonglong::_copy_value (void)
{
  ::CORBA::ValueBase *result = 0;
  ACE_NEW_RETURN (
    result,
    VBlonglong (*this),
    0);

  return result;
}

const char *
VBlonglong::_tao_obv_repository_id (void) const
{
  return this->_tao_obv_static_repository_id ();
}

void
VBlonglong::_tao_obv_truncatable_repo_ids (Repository_Id_List& ids) const
{
  ids.push_back (this->_tao_obv_static_repository_id ());
}

::CORBA::Boolean
VBlonglong::_tao_match_formal_type (ptrdiff_t ) const
{
  return true;
}

void
VBlonglong::_tao_any_destructor (void *_tao_void_pointer)
{
  VBlonglong *_tao_tmp_pointer =
    static_cast<VBlonglong *> (_tao_void_pointer);
  ::CORBA::remove_ref (_tao_tmp_pointer);
}

// TAO extension - the virtual _type method.
::CORBA::TypeCode_ptr VBlonglong::_tao_type (void) const
{
  return ::_tc_VBlonglong;
}

::CORBA::Boolean
VBlonglong::_tao_unmarshal (
    TAO_InputCDR &strm,
    VBlonglong *&vb_object
  )
{
  ::CORBA::Boolean is_null_object = false;
  ::CORBA::Boolean is_indirected = false;
  TAO_InputCDR indrected_strm ((size_t) 0);
  if ( ::CORBA::ValueBase::_tao_validate_box_type (
        strm, indrected_strm,
        VBlonglong::_tao_obv_static_repository_id (),
        is_null_object, is_indirected
      ) == false)
    {
      return false;
    }

  vb_object = 0;
  if (is_null_object)
    {
      return true;
    }

  if (is_indirected)
    {
      return VBlonglong::_tao_unmarshal (
             indrected_strm, vb_object);
    }

  ACE_NEW_RETURN (
    vb_object,
    VBlonglong,
    false);

  return (strm >> vb_object->_pd_value);
}

::CORBA::Boolean
VBlonglong::_tao_unmarshal_v (TAO_InputCDR &)
{
  return true;
}



// TAO_IDL - Generated from
// be/be_visitor_valuebox/valuebox_cs.cpp:745

VBlonglong::~VBlonglong (void)
{
}

::CORBA::Boolean
VBlonglong::_tao_marshal_v (TAO_OutputCDR & strm) const
{
  return (strm << this->_pd_value);
}



// TAO_IDL - Generated from
// be/be_visitor_typecode/alias_typecode.cpp:49

static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_VBushort (
    ::CORBA::tk_value_box,
    "IDL:VBushort:1.0",
    "VBushort",
    &CORBA::_tc_ushort);

::CORBA::TypeCode_ptr const _tc_VBushort =
  &_tao_tc_VBushort;

// TAO_IDL - Generated from
// be/be_visitor_valuebox/valuebox_cs.cpp:52

void
TAO::Value_Traits<VBushort>::add_ref (
    VBushort * p
  )
{
  ::CORBA::add_ref (p);
}

void
TAO::Value_Traits<VBushort>::remove_ref (
    VBushort * p
  )
{
  ::CORBA::remove_ref (p);
}

void
TAO::Value_Traits<VBushort>::release (
    VBushort * p
  )
{
  ::CORBA::remove_ref (p);
}

VBushort *
VBushort::_downcast ( ::CORBA::ValueBase *v)
{
  return dynamic_cast< ::VBushort * > (v);
}

::CORBA::ValueBase *
VBushort::_copy_value (void)
{
  ::CORBA::ValueBase *result = 0;
  ACE_NEW_RETURN (
    result,
    VBushort (*this),
    0);

  return result;
}

const char *
VBushort::_tao_obv_repository_id (void) const
{
  return this->_tao_obv_static_repository_id ();
}

void
VBushort::_tao_obv_truncatable_repo_ids (Repository_Id_List& ids) const
{
  ids.push_back (this->_tao_obv_static_repository_id ());
}

::CORBA::Boolean
VBushort::_tao_match_formal_type (ptrdiff_t ) const
{
  return true;
}

void
VBushort::_tao_any_destructor (void *_tao_void_pointer)
{
  VBushort *_tao_tmp_pointer =
    static_cast<VBushort *> (_tao_void_pointer);
  ::CORBA::remove_ref (_tao_tmp_pointer);
}

// TAO extension - the virtual _type method.
::CORBA::TypeCode_ptr VBushort::_tao_type (void) const
{
  return ::_tc_VBushort;
}

::CORBA::Boolean
VBushort::_tao_unmarshal (
    TAO_InputCDR &strm,
    VBushort *&vb_object
  )
{
  ::CORBA::Boolean is_null_object = false;
  ::CORBA::Boolean is_indirected = false;
  TAO_InputCDR indrected_strm ((size_t) 0);
  if ( ::CORBA::ValueBase::_tao_validate_box_type (
        strm, indrected_strm,
        VBushort::_tao_obv_static_repository_id (),
        is_null_object, is_indirected
      ) == false)
    {
      return false;
    }

  vb_object = 0;
  if (is_null_object)
    {
      return true;
    }

  if (is_indirected)
    {
      return VBushort::_tao_unmarshal (
             indrected_strm, vb_object);
    }

  ACE_NEW_RETURN (
    vb_object,
    VBushort,
    false);

  return (strm >> vb_object->_pd_value);
}

::CORBA::Boolean
VBushort::_tao_unmarshal_v (TAO_InputCDR &)
{
  return true;
}



// TAO_IDL - Generated from
// be/be_visitor_valuebox/valuebox_cs.cpp:745

VBushort::~VBushort (void)
{
}

::CORBA::Boolean
VBushort::_tao_marshal_v (TAO_OutputCDR & strm) const
{
  return (strm << this->_pd_value);
}



// TAO_IDL - Generated from
// be/be_visitor_typecode/alias_typecode.cpp:49

static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_VBulong (
    ::CORBA::tk_value_box,
    "IDL:VBulong:1.0",
    "VBulong",
    &CORBA::_tc_ulong);

::CORBA::TypeCode_ptr const _tc_VBulong =
  &_tao_tc_VBulong;

// TAO_IDL - Generated from
// be/be_visitor_valuebox/valuebox_cs.cpp:52

void
TAO::Value_Traits<VBulong>::add_ref (
    VBulong * p
  )
{
  ::CORBA::add_ref (p);
}

void
TAO::Value_Traits<VBulong>::remove_ref (
    VBulong * p
  )
{
  ::CORBA::remove_ref (p);
}

void
TAO::Value_Traits<VBulong>::release (
    VBulong * p
  )
{
  ::CORBA::remove_ref (p);
}

VBulong *
VBulong::_downcast ( ::CORBA::ValueBase *v)
{
  return dynamic_cast< ::VBulong * > (v);
}

::CORBA::ValueBase *
VBulong::_copy_value (void)
{
  ::CORBA::ValueBase *result = 0;
  ACE_NEW_RETURN (
    result,
    VBulong (*this),
    0);

  return result;
}

const char *
VBulong::_tao_obv_repository_id (void) const
{
  return this->_tao_obv_static_repository_id ();
}

void
VBulong::_tao_obv_truncatable_repo_ids (Repository_Id_List& ids) const
{
  ids.push_back (this->_tao_obv_static_repository_id ());
}

::CORBA::Boolean
VBulong::_tao_match_formal_type (ptrdiff_t ) const
{
  return true;
}

void
VBulong::_tao_any_destructor (void *_tao_void_pointer)
{
  VBulong *_tao_tmp_pointer =
    static_cast<VBulong *> (_tao_void_pointer);
  ::CORBA::remove_ref (_tao_tmp_pointer);
}

// TAO extension - the virtual _type method.
::CORBA::TypeCode_ptr VBulong::_tao_type (void) const
{
  return ::_tc_VBulong;
}

::CORBA::Boolean
VBulong::_tao_unmarshal (
    TAO_InputCDR &strm,
    VBulong *&vb_object
  )
{
  ::CORBA::Boolean is_null_object = false;
  ::CORBA::Boolean is_indirected = false;
  TAO_InputCDR indrected_strm ((size_t) 0);
  if ( ::CORBA::ValueBase::_tao_validate_box_type (
        strm, indrected_strm,
        VBulong::_tao_obv_static_repository_id (),
        is_null_object, is_indirected
      ) == false)
    {
      return false;
    }

  vb_object = 0;
  if (is_null_object)
    {
      return true;
    }

  if (is_indirected)
    {
      return VBulong::_tao_unmarshal (
             indrected_strm, vb_object);
    }

  ACE_NEW_RETURN (
    vb_object,
    VBulong,
    false);

  return (strm >> vb_object->_pd_value);
}

::CORBA::Boolean
VBulong::_tao_unmarshal_v (TAO_InputCDR &)
{
  return true;
}



// TAO_IDL - Generated from
// be/be_visitor_valuebox/valuebox_cs.cpp:745

VBulong::~VBulong (void)
{
}

::CORBA::Boolean
VBulong::_tao_marshal_v (TAO_OutputCDR & strm) const
{
  return (strm << this->_pd_value);
}



// TAO_IDL - Generated from
// be/be_visitor_typecode/alias_typecode.cpp:49

static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_VBulonglong (
    ::CORBA::tk_value_box,
    "IDL:VBulonglong:1.0",
    "VBulonglong",
    &CORBA::_tc_ulonglong);

::CORBA::TypeCode_ptr const _tc_VBulonglong =
  &_tao_tc_VBulonglong;

// TAO_IDL - Generated from
// be/be_visitor_valuebox/valuebox_cs.cpp:52

void
TAO::Value_Traits<VBulonglong>::add_ref (
    VBulonglong * p
  )
{
  ::CORBA::add_ref (p);
}

void
TAO::Value_Traits<VBulonglong>::remove_ref (
    VBulonglong * p
  )
{
  ::CORBA::remove_ref (p);
}

void
TAO::Value_Traits<VBulonglong>::release (
    VBulonglong * p
  )
{
  ::CORBA::remove_ref (p);
}

VBulonglong *
VBulonglong::_downcast ( ::CORBA::ValueBase *v)
{
  return dynamic_cast< ::VBulonglong * > (v);
}

::CORBA::ValueBase *
VBulonglong::_copy_value (void)
{
  ::CORBA::ValueBase *result = 0;
  ACE_NEW_RETURN (
    result,
    VBulonglong (*this),
    0);

  return result;
}

const char *
VBulonglong::_tao_obv_repository_id (void) const
{
  return this->_tao_obv_static_repository_id ();
}

void
VBulonglong::_tao_obv_truncatable_repo_ids (Repository_Id_List& ids) const
{
  ids.push_back (this->_tao_obv_static_repository_id ());
}

::CORBA::Boolean
VBulonglong::_tao_match_formal_type (ptrdiff_t ) const
{
  return true;
}

void
VBulonglong::_tao_any_destructor (void *_tao_void_pointer)
{
  VBulonglong *_tao_tmp_pointer =
    static_cast<VBulonglong *> (_tao_void_pointer);
  ::CORBA::remove_ref (_tao_tmp_pointer);
}

// TAO extension - the virtual _type method.
::CORBA::TypeCode_ptr VBulonglong::_tao_type (void) const
{
  return ::_tc_VBulonglong;
}

::CORBA::Boolean
VBulonglong::_tao_unmarshal (
    TAO_InputCDR &strm,
    VBulonglong *&vb_object
  )
{
  ::CORBA::Boolean is_null_object = false;
  ::CORBA::Boolean is_indirected = false;
  TAO_InputCDR indrected_strm ((size_t) 0);
  if ( ::CORBA::ValueBase::_tao_validate_box_type (
        strm, indrected_strm,
        VBulonglong::_tao_obv_static_repository_id (),
        is_null_object, is_indirected
      ) == false)
    {
      return false;
    }

  vb_object = 0;
  if (is_null_object)
    {
      return true;
    }

  if (is_indirected)
    {
      return VBulonglong::_tao_unmarshal (
             indrected_strm, vb_object);
    }

  ACE_NEW_RETURN (
    vb_object,
    VBulonglong,
    false);

  return (strm >> vb_object->_pd_value);
}

::CORBA::Boolean
VBulonglong::_tao_unmarshal_v (TAO_InputCDR &)
{
  return true;
}



// TAO_IDL - Generated from
// be/be_visitor_valuebox/valuebox_cs.cpp:745

VBulonglong::~VBulonglong (void)
{
}

::CORBA::Boolean
VBulonglong::_tao_marshal_v (TAO_OutputCDR & strm) const
{
  return (strm << this->_pd_value);
}



// TAO_IDL - Generated from
// be/be_visitor_typecode/alias_typecode.cpp:49

static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_VBchar (
    ::CORBA::tk_value_box,
    "IDL:VBchar:1.0",
    "VBchar",
    &CORBA::_tc_char);

::CORBA::TypeCode_ptr const _tc_VBchar =
  &_tao_tc_VBchar;

// TAO_IDL - Generated from
// be/be_visitor_valuebox/valuebox_cs.cpp:52

void
TAO::Value_Traits<VBchar>::add_ref (
    VBchar * p
  )
{
  ::CORBA::add_ref (p);
}

void
TAO::Value_Traits<VBchar>::remove_ref (
    VBchar * p
  )
{
  ::CORBA::remove_ref (p);
}

void
TAO::Value_Traits<VBchar>::release (
    VBchar * p
  )
{
  ::CORBA::remove_ref (p);
}

VBchar *
VBchar::_downcast ( ::CORBA::ValueBase *v)
{
  return dynamic_cast< ::VBchar * > (v);
}

::CORBA::ValueBase *
VBchar::_copy_value (void)
{
  ::CORBA::ValueBase *result = 0;
  ACE_NEW_RETURN (
    result,
    VBchar (*this),
    0);

  return result;
}

const char *
VBchar::_tao_obv_repository_id (void) const
{
  return this->_tao_obv_static_repository_id ();
}

void
VBchar::_tao_obv_truncatable_repo_ids (Repository_Id_List& ids) const
{
  ids.push_back (this->_tao_obv_static_repository_id ());
}

::CORBA::Boolean
VBchar::_tao_match_formal_type (ptrdiff_t ) const
{
  return true;
}

void
VBchar::_tao_any_destructor (void *_tao_void_pointer)
{
  VBchar *_tao_tmp_pointer =
    static_cast<VBchar *> (_tao_void_pointer);
  ::CORBA::remove_ref (_tao_tmp_pointer);
}

// TAO extension - the virtual _type method.
::CORBA::TypeCode_ptr VBchar::_tao_type (void) const
{
  return ::_tc_VBchar;
}

::CORBA::Boolean
VBchar::_tao_unmarshal (
    TAO_InputCDR &strm,
    VBchar *&vb_object
  )
{
  ::CORBA::Boolean is_null_object = false;
  ::CORBA::Boolean is_indirected = false;
  TAO_InputCDR indrected_strm ((size_t) 0);
  if ( ::CORBA::ValueBase::_tao_validate_box_type (
        strm, indrected_strm,
        VBchar::_tao_obv_static_repository_id (),
        is_null_object, is_indirected
      ) == false)
    {
      return false;
    }

  vb_object = 0;
  if (is_null_object)
    {
      return true;
    }

  if (is_indirected)
    {
      return VBchar::_tao_unmarshal (
             indrected_strm, vb_object);
    }

  ACE_NEW_RETURN (
    vb_object,
    VBchar,
    false);

  return (strm >> ::ACE_InputCDR::to_char (vb_object->_pd_value));
}

::CORBA::Boolean
VBchar::_tao_unmarshal_v (TAO_InputCDR &)
{
  return true;
}



// TAO_IDL - Generated from
// be/be_visitor_valuebox/valuebox_cs.cpp:745

VBchar::~VBchar (void)
{
}

::CORBA::Boolean
VBchar::_tao_marshal_v (TAO_OutputCDR & strm) const
{
  return (strm << ::ACE_OutputCDR::from_char (this->_pd_value));
}



// TAO_IDL - Generated from
// be/be_visitor_typecode/alias_typecode.cpp:49

static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_VBwchar (
    ::CORBA::tk_value_box,
    "IDL:VBwchar:1.0",
    "VBwchar",
    &CORBA::_tc_wchar);

::CORBA::TypeCode_ptr const _tc_VBwchar =
  &_tao_tc_VBwchar;

// TAO_IDL - Generated from
// be/be_visitor_valuebox/valuebox_cs.cpp:52

void
TAO::Value_Traits<VBwchar>::add_ref (
    VBwchar * p
  )
{
  ::CORBA::add_ref (p);
}

void
TAO::Value_Traits<VBwchar>::remove_ref (
    VBwchar * p
  )
{
  ::CORBA::remove_ref (p);
}

void
TAO::Value_Traits<VBwchar>::release (
    VBwchar * p
  )
{
  ::CORBA::remove_ref (p);
}

VBwchar *
VBwchar::_downcast ( ::CORBA::ValueBase *v)
{
  return dynamic_cast< ::VBwchar * > (v);
}

::CORBA::ValueBase *
VBwchar::_copy_value (void)
{
  ::CORBA::ValueBase *result = 0;
  ACE_NEW_RETURN (
    result,
    VBwchar (*this),
    0);

  return result;
}

const char *
VBwchar::_tao_obv_repository_id (void) const
{
  return this->_tao_obv_static_repository_id ();
}

void
VBwchar::_tao_obv_truncatable_repo_ids (Repository_Id_List& ids) const
{
  ids.push_back (this->_tao_obv_static_repository_id ());
}

::CORBA::Boolean
VBwchar::_tao_match_formal_type (ptrdiff_t ) const
{
  return true;
}

void
VBwchar::_tao_any_destructor (void *_tao_void_pointer)
{
  VBwchar *_tao_tmp_pointer =
    static_cast<VBwchar *> (_tao_void_pointer);
  ::CORBA::remove_ref (_tao_tmp_pointer);
}

// TAO extension - the virtual _type method.
::CORBA::TypeCode_ptr VBwchar::_tao_type (void) const
{
  return ::_tc_VBwchar;
}

::CORBA::Boolean
VBwchar::_tao_unmarshal (
    TAO_InputCDR &strm,
    VBwchar *&vb_object
  )
{
  ::CORBA::Boolean is_null_object = false;
  ::CORBA::Boolean is_indirected = false;
  TAO_InputCDR indrected_strm ((size_t) 0);
  if ( ::CORBA::ValueBase::_tao_validate_box_type (
        strm, indrected_strm,
        VBwchar::_tao_obv_static_repository_id (),
        is_null_object, is_indirected
      ) == false)
    {
      return false;
    }

  vb_object = 0;
  if (is_null_object)
    {
      return true;
    }

  if (is_indirected)
    {
      return VBwchar::_tao_unmarshal (
             indrected_strm, vb_object);
    }

  ACE_NEW_RETURN (
    vb_object,
    VBwchar,
    false);

  return (strm >> ::ACE_InputCDR::to_wchar (vb_object->_pd_value));
}

::CORBA::Boolean
VBwchar::_tao_unmarshal_v (TAO_InputCDR &)
{
  return true;
}



// TAO_IDL - Generated from
// be/be_visitor_valuebox/valuebox_cs.cpp:745

VBwchar::~VBwchar (void)
{
}

::CORBA::Boolean
VBwchar::_tao_marshal_v (TAO_OutputCDR & strm) const
{
  return (strm << ::ACE_OutputCDR::from_wchar (this->_pd_value));
}



// TAO_IDL - Generated from
// be/be_visitor_typecode/alias_typecode.cpp:49

static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_VBboolean (
    ::CORBA::tk_value_box,
    "IDL:VBboolean:1.0",
    "VBboolean",
    &CORBA::_tc_boolean);

::CORBA::TypeCode_ptr const _tc_VBboolean =
  &_tao_tc_VBboolean;

// TAO_IDL - Generated from
// be/be_visitor_valuebox/valuebox_cs.cpp:52

void
TAO::Value_Traits<VBboolean>::add_ref (
    VBboolean * p
  )
{
  ::CORBA::add_ref (p);
}

void
TAO::Value_Traits<VBboolean>::remove_ref (
    VBboolean * p
  )
{
  ::CORBA::remove_ref (p);
}

void
TAO::Value_Traits<VBboolean>::release (
    VBboolean * p
  )
{
  ::CORBA::remove_ref (p);
}

VBboolean *
VBboolean::_downcast ( ::CORBA::ValueBase *v)
{
  return dynamic_cast< ::VBboolean * > (v);
}

::CORBA::ValueBase *
VBboolean::_copy_value (void)
{
  ::CORBA::ValueBase *result = 0;
  ACE_NEW_RETURN (
    result,
    VBboolean (*this),
    0);

  return result;
}

const char *
VBboolean::_tao_obv_repository_id (void) const
{
  return this->_tao_obv_static_repository_id ();
}

void
VBboolean::_tao_obv_truncatable_repo_ids (Repository_Id_List& ids) const
{
  ids.push_back (this->_tao_obv_static_repository_id ());
}

::CORBA::Boolean
VBboolean::_tao_match_formal_type (ptrdiff_t ) const
{
  return true;
}

void
VBboolean::_tao_any_destructor (void *_tao_void_pointer)
{
  VBboolean *_tao_tmp_pointer =
    static_cast<VBboolean *> (_tao_void_pointer);
  ::CORBA::remove_ref (_tao_tmp_pointer);
}

// TAO extension - the virtual _type method.
::CORBA::TypeCode_ptr VBboolean::_tao_type (void) const
{
  return ::_tc_VBboolean;
}

::CORBA::Boolean
VBboolean::_tao_unmarshal (
    TAO_InputCDR &strm,
    VBboolean *&vb_object
  )
{
  ::CORBA::Boolean is_null_object = false;
  ::CORBA::Boolean is_indirected = false;
  TAO_InputCDR indrected_strm ((size_t) 0);
  if ( ::CORBA::ValueBase::_tao_validate_box_type (
        strm, indrected_strm,
        VBboolean::_tao_obv_static_repository_id (),
        is_null_object, is_indirected
      ) == false)
    {
      return false;
    }

  vb_object = 0;
  if (is_null_object)
    {
      return true;
    }

  if (is_indirected)
    {
      return VBboolean::_tao_unmarshal (
             indrected_strm, vb_object);
    }

  ACE_NEW_RETURN (
    vb_object,
    VBboolean,
    false);

  return (strm >> ::ACE_InputCDR::to_boolean (vb_object->_pd_value));
}

::CORBA::Boolean
VBboolean::_tao_unmarshal_v (TAO_InputCDR &)
{
  return true;
}



// TAO_IDL - Generated from
// be/be_visitor_valuebox/valuebox_cs.cpp:745

VBboolean::~VBboolean (void)
{
}

::CORBA::Boolean
VBboolean::_tao_marshal_v (TAO_OutputCDR & strm) const
{
  return (strm << ::ACE_OutputCDR::from_boolean (this->_pd_value));
}



// TAO_IDL - Generated from
// be/be_visitor_typecode/alias_typecode.cpp:49

static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_VBoctet (
    ::CORBA::tk_value_box,
    "IDL:VBoctet:1.0",
    "VBoctet",
    &CORBA::_tc_octet);

::CORBA::TypeCode_ptr const _tc_VBoctet =
  &_tao_tc_VBoctet;

// TAO_IDL - Generated from
// be/be_visitor_valuebox/valuebox_cs.cpp:52

void
TAO::Value_Traits<VBoctet>::add_ref (
    VBoctet * p
  )
{
  ::CORBA::add_ref (p);
}

void
TAO::Value_Traits<VBoctet>::remove_ref (
    VBoctet * p
  )
{
  ::CORBA::remove_ref (p);
}

void
TAO::Value_Traits<VBoctet>::release (
    VBoctet * p
  )
{
  ::CORBA::remove_ref (p);
}

VBoctet *
VBoctet::_downcast ( ::CORBA::ValueBase *v)
{
  return dynamic_cast< ::VBoctet * > (v);
}

::CORBA::ValueBase *
VBoctet::_copy_value (void)
{
  ::CORBA::ValueBase *result = 0;
  ACE_NEW_RETURN (
    result,
    VBoctet (*this),
    0);

  return result;
}

const char *
VBoctet::_tao_obv_repository_id (void) const
{
  return this->_tao_obv_static_repository_id ();
}

void
VBoctet::_tao_obv_truncatable_repo_ids (Repository_Id_List& ids) const
{
  ids.push_back (this->_tao_obv_static_repository_id ());
}

::CORBA::Boolean
VBoctet::_tao_match_formal_type (ptrdiff_t ) const
{
  return true;
}

void
VBoctet::_tao_any_destructor (void *_tao_void_pointer)
{
  VBoctet *_tao_tmp_pointer =
    static_cast<VBoctet *> (_tao_void_pointer);
  ::CORBA::remove_ref (_tao_tmp_pointer);
}

// TAO extension - the virtual _type method.
::CORBA::TypeCode_ptr VBoctet::_tao_type (void) const
{
  return ::_tc_VBoctet;
}

::CORBA::Boolean
VBoctet::_tao_unmarshal (
    TAO_InputCDR &strm,
    VBoctet *&vb_object
  )
{
  ::CORBA::Boolean is_null_object = false;
  ::CORBA::Boolean is_indirected = false;
  TAO_InputCDR indrected_strm ((size_t) 0);
  if ( ::CORBA::ValueBase::_tao_validate_box_type (
        strm, indrected_strm,
        VBoctet::_tao_obv_static_repository_id (),
        is_null_object, is_indirected
      ) == false)
    {
      return false;
    }

  vb_object = 0;
  if (is_null_object)
    {
      return true;
    }

  if (is_indirected)
    {
      return VBoctet::_tao_unmarshal (
             indrected_strm, vb_object);
    }

  ACE_NEW_RETURN (
    vb_object,
    VBoctet,
    false);

  return (strm >> ::ACE_InputCDR::to_octet (vb_object->_pd_value));
}

::CORBA::Boolean
VBoctet::_tao_unmarshal_v (TAO_InputCDR &)
{
  return true;
}



// TAO_IDL - Generated from
// be/be_visitor_valuebox/valuebox_cs.cpp:745

VBoctet::~VBoctet (void)
{
}

::CORBA::Boolean
VBoctet::_tao_marshal_v (TAO_OutputCDR & strm) const
{
  return (strm << ::ACE_OutputCDR::from_octet (this->_pd_value));
}



// TAO_IDL - Generated from
// be/be_visitor_typecode/alias_typecode.cpp:49

static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_VBfloat (
    ::CORBA::tk_value_box,
    "IDL:VBfloat:1.0",
    "VBfloat",
    &CORBA::_tc_float);

::CORBA::TypeCode_ptr const _tc_VBfloat =
  &_tao_tc_VBfloat;

// TAO_IDL - Generated from
// be/be_visitor_valuebox/valuebox_cs.cpp:52

void
TAO::Value_Traits<VBfloat>::add_ref (
    VBfloat * p
  )
{
  ::CORBA::add_ref (p);
}

void
TAO::Value_Traits<VBfloat>::remove_ref (
    VBfloat * p
  )
{
  ::CORBA::remove_ref (p);
}

void
TAO::Value_Traits<VBfloat>::release (
    VBfloat * p
  )
{
  ::CORBA::remove_ref (p);
}

VBfloat *
VBfloat::_downcast ( ::CORBA::ValueBase *v)
{
  return dynamic_cast< ::VBfloat * > (v);
}

::CORBA::ValueBase *
VBfloat::_copy_value (void)
{
  ::CORBA::ValueBase *result = 0;
  ACE_NEW_RETURN (
    result,
    VBfloat (*this),
    0);

  return result;
}

const char *
VBfloat::_tao_obv_repository_id (void) const
{
  return this->_tao_obv_static_repository_id ();
}

void
VBfloat::_tao_obv_truncatable_repo_ids (Repository_Id_List& ids) const
{
  ids.push_back (this->_tao_obv_static_repository_id ());
}

::CORBA::Boolean
VBfloat::_tao_match_formal_type (ptrdiff_t ) const
{
  return true;
}

void
VBfloat::_tao_any_destructor (void *_tao_void_pointer)
{
  VBfloat *_tao_tmp_pointer =
    static_cast<VBfloat *> (_tao_void_pointer);
  ::CORBA::remove_ref (_tao_tmp_pointer);
}

// TAO extension - the virtual _type method.
::CORBA::TypeCode_ptr VBfloat::_tao_type (void) const
{
  return ::_tc_VBfloat;
}

::CORBA::Boolean
VBfloat::_tao_unmarshal (
    TAO_InputCDR &strm,
    VBfloat *&vb_object
  )
{
  ::CORBA::Boolean is_null_object = false;
  ::CORBA::Boolean is_indirected = false;
  TAO_InputCDR indrected_strm ((size_t) 0);
  if ( ::CORBA::ValueBase::_tao_validate_box_type (
        strm, indrected_strm,
        VBfloat::_tao_obv_static_repository_id (),
        is_null_object, is_indirected
      ) == false)
    {
      return false;
    }

  vb_object = 0;
  if (is_null_object)
    {
      return true;
    }

  if (is_indirected)
    {
      return VBfloat::_tao_unmarshal (
             indrected_strm, vb_object);
    }

  ACE_NEW_RETURN (
    vb_object,
    VBfloat,
    false);

  return (strm >> vb_object->_pd_value);
}

::CORBA::Boolean
VBfloat::_tao_unmarshal_v (TAO_InputCDR &)
{
  return true;
}



// TAO_IDL - Generated from
// be/be_visitor_valuebox/valuebox_cs.cpp:745

VBfloat::~VBfloat (void)
{
}

::CORBA::Boolean
VBfloat::_tao_marshal_v (TAO_OutputCDR & strm) const
{
  return (strm << this->_pd_value);
}



// TAO_IDL - Generated from
// be/be_visitor_typecode/alias_typecode.cpp:49

static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_VBdouble (
    ::CORBA::tk_value_box,
    "IDL:VBdouble:1.0",
    "VBdouble",
    &CORBA::_tc_double);

::CORBA::TypeCode_ptr const _tc_VBdouble =
  &_tao_tc_VBdouble;

// TAO_IDL - Generated from
// be/be_visitor_valuebox/valuebox_cs.cpp:52

void
TAO::Value_Traits<VBdouble>::add_ref (
    VBdouble * p
  )
{
  ::CORBA::add_ref (p);
}

void
TAO::Value_Traits<VBdouble>::remove_ref (
    VBdouble * p
  )
{
  ::CORBA::remove_ref (p);
}

void
TAO::Value_Traits<VBdouble>::release (
    VBdouble * p
  )
{
  ::CORBA::remove_ref (p);
}

VBdouble *
VBdouble::_downcast ( ::CORBA::ValueBase *v)
{
  return dynamic_cast< ::VBdouble * > (v);
}

::CORBA::ValueBase *
VBdouble::_copy_value (void)
{
  ::CORBA::ValueBase *result = 0;
  ACE_NEW_RETURN (
    result,
    VBdouble (*this),
    0);

  return result;
}

const char *
VBdouble::_tao_obv_repository_id (void) const
{
  return this->_tao_obv_static_repository_id ();
}

void
VBdouble::_tao_obv_truncatable_repo_ids (Repository_Id_List& ids) const
{
  ids.push_back (this->_tao_obv_static_repository_id ());
}

::CORBA::Boolean
VBdouble::_tao_match_formal_type (ptrdiff_t ) const
{
  return true;
}

void
VBdouble::_tao_any_destructor (void *_tao_void_pointer)
{
  VBdouble *_tao_tmp_pointer =
    static_cast<VBdouble *> (_tao_void_pointer);
  ::CORBA::remove_ref (_tao_tmp_pointer);
}

// TAO extension - the virtual _type method.
::CORBA::TypeCode_ptr VBdouble::_tao_type (void) const
{
  return ::_tc_VBdouble;
}

::CORBA::Boolean
VBdouble::_tao_unmarshal (
    TAO_InputCDR &strm,
    VBdouble *&vb_object
  )
{
  ::CORBA::Boolean is_null_object = false;
  ::CORBA::Boolean is_indirected = false;
  TAO_InputCDR indrected_strm ((size_t) 0);
  if ( ::CORBA::ValueBase::_tao_validate_box_type (
        strm, indrected_strm,
        VBdouble::_tao_obv_static_repository_id (),
        is_null_object, is_indirected
      ) == false)
    {
      return false;
    }

  vb_object = 0;
  if (is_null_object)
    {
      return true;
    }

  if (is_indirected)
    {
      return VBdouble::_tao_unmarshal (
             indrected_strm, vb_object);
    }

  ACE_NEW_RETURN (
    vb_object,
    VBdouble,
    false);

  return (strm >> vb_object->_pd_value);
}

::CORBA::Boolean
VBdouble::_tao_unmarshal_v (TAO_InputCDR &)
{
  return true;
}



// TAO_IDL - Generated from
// be/be_visitor_valuebox/valuebox_cs.cpp:745

VBdouble::~VBdouble (void)
{
}

::CORBA::Boolean
VBdouble::_tao_marshal_v (TAO_OutputCDR & strm) const
{
  return (strm << this->_pd_value);
}



// TAO_IDL - Generated from
// be/be_visitor_typecode/alias_typecode.cpp:49

static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_VBlongdouble (
    ::CORBA::tk_value_box,
    "IDL:VBlongdouble:1.0",
    "VBlongdouble",
    &CORBA::_tc_longdouble);

::CORBA::TypeCode_ptr const _tc_VBlongdouble =
  &_tao_tc_VBlongdouble;

// TAO_IDL - Generated from
// be/be_visitor_valuebox/valuebox_cs.cpp:52

void
TAO::Value_Traits<VBlongdouble>::add_ref (
    VBlongdouble * p
  )
{
  ::CORBA::add_ref (p);
}

void
TAO::Value_Traits<VBlongdouble>::remove_ref (
    VBlongdouble * p
  )
{
  ::CORBA::remove_ref (p);
}

void
TAO::Value_Traits<VBlongdouble>::release (
    VBlongdouble * p
  )
{
  ::CORBA::remove_ref (p);
}

VBlongdouble *
VBlongdouble::_downcast ( ::CORBA::ValueBase *v)
{
  return dynamic_cast< ::VBlongdouble * > (v);
}

::CORBA::ValueBase *
VBlongdouble::_copy_value (void)
{
  ::CORBA::ValueBase *result = 0;
  ACE_NEW_RETURN (
    result,
    VBlongdouble (*this),
    0);

  return result;
}

const char *
VBlongdouble::_tao_obv_repository_id (void) const
{
  return this->_tao_obv_static_repository_id ();
}

void
VBlongdouble::_tao_obv_truncatable_repo_ids (Repository_Id_List& ids) const
{
  ids.push_back (this->_tao_obv_static_repository_id ());
}

::CORBA::Boolean
VBlongdouble::_tao_match_formal_type (ptrdiff_t ) const
{
  return true;
}

void
VBlongdouble::_tao_any_destructor (void *_tao_void_pointer)
{
  VBlongdouble *_tao_tmp_pointer =
    static_cast<VBlongdouble *> (_tao_void_pointer);
  ::CORBA::remove_ref (_tao_tmp_pointer);
}

// TAO extension - the virtual _type method.
::CORBA::TypeCode_ptr VBlongdouble::_tao_type (void) const
{
  return ::_tc_VBlongdouble;
}

::CORBA::Boolean
VBlongdouble::_tao_unmarshal (
    TAO_InputCDR &strm,
    VBlongdouble *&vb_object
  )
{
  ::CORBA::Boolean is_null_object = false;
  ::CORBA::Boolean is_indirected = false;
  TAO_InputCDR indrected_strm ((size_t) 0);
  if ( ::CORBA::ValueBase::_tao_validate_box_type (
        strm, indrected_strm,
        VBlongdouble::_tao_obv_static_repository_id (),
        is_null_object, is_indirected
      ) == false)
    {
      return false;
    }

  vb_object = 0;
  if (is_null_object)
    {
      return true;
    }

  if (is_indirected)
    {
      return VBlongdouble::_tao_unmarshal (
             indrected_strm, vb_object);
    }

  ACE_NEW_RETURN (
    vb_object,
    VBlongdouble,
    false);

  return (strm >> vb_object->_pd_value);
}

::CORBA::Boolean
VBlongdouble::_tao_unmarshal_v (TAO_InputCDR &)
{
  return true;
}



// TAO_IDL - Generated from
// be/be_visitor_valuebox/valuebox_cs.cpp:745

VBlongdouble::~VBlongdouble (void)
{
}

::CORBA::Boolean
VBlongdouble::_tao_marshal_v (TAO_OutputCDR & strm) const
{
  return (strm << this->_pd_value);
}



// TAO_IDL - Generated from
// be/be_visitor_typecode/alias_typecode.cpp:49

static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_VBenum (
    ::CORBA::tk_value_box,
    "IDL:VBenum:1.0",
    "VBenum",
    &_tc_Color);

::CORBA::TypeCode_ptr const _tc_VBenum =
  &_tao_tc_VBenum;

// TAO_IDL - Generated from
// be/be_visitor_valuebox/valuebox_cs.cpp:52

void
TAO::Value_Traits<VBenum>::add_ref (
    VBenum * p
  )
{
  ::CORBA::add_ref (p);
}

void
TAO::Value_Traits<VBenum>::remove_ref (
    VBenum * p
  )
{
  ::CORBA::remove_ref (p);
}

void
TAO::Value_Traits<VBenum>::release (
    VBenum * p
  )
{
  ::CORBA::remove_ref (p);
}

VBenum *
VBenum::_downcast ( ::CORBA::ValueBase *v)
{
  return dynamic_cast< ::VBenum * > (v);
}

::CORBA::ValueBase *
VBenum::_copy_value (void)
{
  ::CORBA::ValueBase *result = 0;
  ACE_NEW_RETURN (
    result,
    VBenum (*this),
    0);

  return result;
}

const char *
VBenum::_tao_obv_repository_id (void) const
{
  return this->_tao_obv_static_repository_id ();
}

void
VBenum::_tao_obv_truncatable_repo_ids (Repository_Id_List& ids) const
{
  ids.push_back (this->_tao_obv_static_repository_id ());
}

::CORBA::Boolean
VBenum::_tao_match_formal_type (ptrdiff_t ) const
{
  return true;
}

void
VBenum::_tao_any_destructor (void *_tao_void_pointer)
{
  VBenum *_tao_tmp_pointer =
    static_cast<VBenum *> (_tao_void_pointer);
  ::CORBA::remove_ref (_tao_tmp_pointer);
}

// TAO extension - the virtual _type method.
::CORBA::TypeCode_ptr VBenum::_tao_type (void) const
{
  return ::_tc_VBenum;
}

::CORBA::Boolean
VBenum::_tao_unmarshal (
    TAO_InputCDR &strm,
    VBenum *&vb_object
  )
{
  ::CORBA::Boolean is_null_object = false;
  ::CORBA::Boolean is_indirected = false;
  TAO_InputCDR indrected_strm ((size_t) 0);
  if ( ::CORBA::ValueBase::_tao_validate_box_type (
        strm, indrected_strm,
        VBenum::_tao_obv_static_repository_id (),
        is_null_object, is_indirected
      ) == false)
    {
      return false;
    }

  vb_object = 0;
  if (is_null_object)
    {
      return true;
    }

  if (is_indirected)
    {
      return VBenum::_tao_unmarshal (
             indrected_strm, vb_object);
    }

  ACE_NEW_RETURN (
    vb_object,
    VBenum,
    false);

  return (strm >> vb_object->_pd_value);
}

::CORBA::Boolean
VBenum::_tao_unmarshal_v (TAO_InputCDR &)
{
  return true;
}



// TAO_IDL - Generated from
// be/be_visitor_valuebox/valuebox_cs.cpp:359

VBenum::~VBenum (void)
{
}

::CORBA::Boolean
VBenum::_tao_marshal_v (TAO_OutputCDR & strm) const
{
  return (strm << this->_pd_value);
}



// TAO_IDL - Generated from
// be/be_visitor_typecode/alias_typecode.cpp:49

static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_TDshort (
    ::CORBA::tk_alias,
    "IDL:TDshort:1.0",
    "TDshort",
    &CORBA::_tc_short);

::CORBA::TypeCode_ptr const _tc_TDshort =
  &_tao_tc_TDshort;

// TAO_IDL - Generated from
// be/be_visitor_typecode/alias_typecode.cpp:49

static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_TDlong (
    ::CORBA::tk_alias,
    "IDL:TDlong:1.0",
    "TDlong",
    &CORBA::_tc_long);

::CORBA::TypeCode_ptr const _tc_TDlong =
  &_tao_tc_TDlong;

// TAO_IDL - Generated from
// be/be_visitor_typecode/alias_typecode.cpp:49

static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_TDlonglong (
    ::CORBA::tk_alias,
    "IDL:TDlonglong:1.0",
    "TDlonglong",
    &CORBA::_tc_longlong);

::CORBA::TypeCode_ptr const _tc_TDlonglong =
  &_tao_tc_TDlonglong;

// TAO_IDL - Generated from
// be/be_visitor_typecode/alias_typecode.cpp:49

static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_TDushort (
    ::CORBA::tk_alias,
    "IDL:TDushort:1.0",
    "TDushort",
    &CORBA::_tc_ushort);

::CORBA::TypeCode_ptr const _tc_TDushort =
  &_tao_tc_TDushort;

// TAO_IDL - Generated from
// be/be_visitor_typecode/alias_typecode.cpp:49

static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_TDulong (
    ::CORBA::tk_alias,
    "IDL:TDulong:1.0",
    "TDulong",
    &CORBA::_tc_ulong);

::CORBA::TypeCode_ptr const _tc_TDulong =
  &_tao_tc_TDulong;

// TAO_IDL - Generated from
// be/be_visitor_typecode/alias_typecode.cpp:49

static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_TDulonglong (
    ::CORBA::tk_alias,
    "IDL:TDulonglong:1.0",
    "TDulonglong",
    &CORBA::_tc_ulonglong);

::CORBA::TypeCode_ptr const _tc_TDulonglong =
  &_tao_tc_TDulonglong;

// TAO_IDL - Generated from
// be/be_visitor_typecode/alias_typecode.cpp:49

static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_TDchar (
    ::CORBA::tk_alias,
    "IDL:TDchar:1.0",
    "TDchar",
    &CORBA::_tc_char);

::CORBA::TypeCode_ptr const _tc_TDchar =
  &_tao_tc_TDchar;

// TAO_IDL - Generated from
// be/be_visitor_typecode/alias_typecode.cpp:49

static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_TDwchar (
    ::CORBA::tk_alias,
    "IDL:TDwchar:1.0",
    "TDwchar",
    &CORBA::_tc_wchar);

::CORBA::TypeCode_ptr const _tc_TDwchar =
  &_tao_tc_TDwchar;

// TAO_IDL - Generated from
// be/be_visitor_typecode/alias_typecode.cpp:49

static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_TDboolean (
    ::CORBA::tk_alias,
    "IDL:TDboolean:1.0",
    "TDboolean",
    &CORBA::_tc_boolean);

::CORBA::TypeCode_ptr const _tc_TDboolean =
  &_tao_tc_TDboolean;

// TAO_IDL - Generated from
// be/be_visitor_typecode/alias_typecode.cpp:49

static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_TDoctet (
    ::CORBA::tk_alias,
    "IDL:TDoctet:1.0",
    "TDoctet",
    &CORBA::_tc_octet);

::CORBA::TypeCode_ptr const _tc_TDoctet =
  &_tao_tc_TDoctet;

// TAO_IDL - Generated from
// be/be_visitor_typecode/alias_typecode.cpp:49

static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_TDfloat (
    ::CORBA::tk_alias,
    "IDL:TDfloat:1.0",
    "TDfloat",
    &CORBA::_tc_float);

::CORBA::TypeCode_ptr const _tc_TDfloat =
  &_tao_tc_TDfloat;

// TAO_IDL - Generated from
// be/be_visitor_typecode/alias_typecode.cpp:49

static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_TDdouble (
    ::CORBA::tk_alias,
    "IDL:TDdouble:1.0",
    "TDdouble",
    &CORBA::_tc_double);

::CORBA::TypeCode_ptr const _tc_TDdouble =
  &_tao_tc_TDdouble;

// TAO_IDL - Generated from
// be/be_visitor_typecode/alias_typecode.cpp:49

static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_TDlongdouble (
    ::CORBA::tk_alias,
    "IDL:TDlongdouble:1.0",
    "TDlongdouble",
    &CORBA::_tc_longdouble);

::CORBA::TypeCode_ptr const _tc_TDlongdouble =
  &_tao_tc_TDlongdouble;

// TAO_IDL - Generated from
// be/be_visitor_typecode/alias_typecode.cpp:49

static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_TDenum (
    ::CORBA::tk_alias,
    "IDL:TDenum:1.0",
    "TDenum",
    &_tc_Color);

::CORBA::TypeCode_ptr const _tc_TDenum =
  &_tao_tc_TDenum;

// TAO_IDL - Generated from
// be/be_visitor_typecode/alias_typecode.cpp:49

static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_VBTDshort (
    ::CORBA::tk_value_box,
    "IDL:VBTDshort:1.0",
    "VBTDshort",
    &CORBA::_tc_short);

::CORBA::TypeCode_ptr const _tc_VBTDshort =
  &_tao_tc_VBTDshort;

// TAO_IDL - Generated from
// be/be_visitor_valuebox/valuebox_cs.cpp:52

void
TAO::Value_Traits<VBTDshort>::add_ref (
    VBTDshort * p
  )
{
  ::CORBA::add_ref (p);
}

void
TAO::Value_Traits<VBTDshort>::remove_ref (
    VBTDshort * p
  )
{
  ::CORBA::remove_ref (p);
}

void
TAO::Value_Traits<VBTDshort>::release (
    VBTDshort * p
  )
{
  ::CORBA::remove_ref (p);
}

VBTDshort *
VBTDshort::_downcast ( ::CORBA::ValueBase *v)
{
  return dynamic_cast< ::VBTDshort * > (v);
}

::CORBA::ValueBase *
VBTDshort::_copy_value (void)
{
  ::CORBA::ValueBase *result = 0;
  ACE_NEW_RETURN (
    result,
    VBTDshort (*this),
    0);

  return result;
}

const char *
VBTDshort::_tao_obv_repository_id (void) const
{
  return this->_tao_obv_static_repository_id ();
}

void
VBTDshort::_tao_obv_truncatable_repo_ids (Repository_Id_List& ids) const
{
  ids.push_back (this->_tao_obv_static_repository_id ());
}

::CORBA::Boolean
VBTDshort::_tao_match_formal_type (ptrdiff_t ) const
{
  return true;
}

void
VBTDshort::_tao_any_destructor (void *_tao_void_pointer)
{
  VBTDshort *_tao_tmp_pointer =
    static_cast<VBTDshort *> (_tao_void_pointer);
  ::CORBA::remove_ref (_tao_tmp_pointer);
}

// TAO extension - the virtual _type method.
::CORBA::TypeCode_ptr VBTDshort::_tao_type (void) const
{
  return ::_tc_VBTDshort;
}

::CORBA::Boolean
VBTDshort::_tao_unmarshal (
    TAO_InputCDR &strm,
    VBTDshort *&vb_object
  )
{
  ::CORBA::Boolean is_null_object = false;
  ::CORBA::Boolean is_indirected = false;
  TAO_InputCDR indrected_strm ((size_t) 0);
  if ( ::CORBA::ValueBase::_tao_validate_box_type (
        strm, indrected_strm,
        VBTDshort::_tao_obv_static_repository_id (),
        is_null_object, is_indirected
      ) == false)
    {
      return false;
    }

  vb_object = 0;
  if (is_null_object)
    {
      return true;
    }

  if (is_indirected)
    {
      return VBTDshort::_tao_unmarshal (
             indrected_strm, vb_object);
    }

  ACE_NEW_RETURN (
    vb_object,
    VBTDshort,
    false);

  return (strm >> vb_object->_pd_value);
}

::CORBA::Boolean
VBTDshort::_tao_unmarshal_v (TAO_InputCDR &)
{
  return true;
}



// TAO_IDL - Generated from
// be/be_visitor_valuebox/valuebox_cs.cpp:745

VBTDshort::~VBTDshort (void)
{
}

::CORBA::Boolean
VBTDshort::_tao_marshal_v (TAO_OutputCDR & strm) const
{
  return (strm << this->_pd_value);
}



// TAO_IDL - Generated from
// be/be_visitor_typecode/alias_typecode.cpp:49

static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_VBTDlong (
    ::CORBA::tk_value_box,
    "IDL:VBTDlong:1.0",
    "VBTDlong",
    &CORBA::_tc_long);

::CORBA::TypeCode_ptr const _tc_VBTDlong =
  &_tao_tc_VBTDlong;

// TAO_IDL - Generated from
// be/be_visitor_valuebox/valuebox_cs.cpp:52

void
TAO::Value_Traits<VBTDlong>::add_ref (
    VBTDlong * p
  )
{
  ::CORBA::add_ref (p);
}

void
TAO::Value_Traits<VBTDlong>::remove_ref (
    VBTDlong * p
  )
{
  ::CORBA::remove_ref (p);
}

void
TAO::Value_Traits<VBTDlong>::release (
    VBTDlong * p
  )
{
  ::CORBA::remove_ref (p);
}

VBTDlong *
VBTDlong::_downcast ( ::CORBA::ValueBase *v)
{
  return dynamic_cast< ::VBTDlong * > (v);
}

::CORBA::ValueBase *
VBTDlong::_copy_value (void)
{
  ::CORBA::ValueBase *result = 0;
  ACE_NEW_RETURN (
    result,
    VBTDlong (*this),
    0);

  return result;
}

const char *
VBTDlong::_tao_obv_repository_id (void) const
{
  return this->_tao_obv_static_repository_id ();
}

void
VBTDlong::_tao_obv_truncatable_repo_ids (Repository_Id_List& ids) const
{
  ids.push_back (this->_tao_obv_static_repository_id ());
}

::CORBA::Boolean
VBTDlong::_tao_match_formal_type (ptrdiff_t ) const
{
  return true;
}

void
VBTDlong::_tao_any_destructor (void *_tao_void_pointer)
{
  VBTDlong *_tao_tmp_pointer =
    static_cast<VBTDlong *> (_tao_void_pointer);
  ::CORBA::remove_ref (_tao_tmp_pointer);
}

// TAO extension - the virtual _type method.
::CORBA::TypeCode_ptr VBTDlong::_tao_type (void) const
{
  return ::_tc_VBTDlong;
}

::CORBA::Boolean
VBTDlong::_tao_unmarshal (
    TAO_InputCDR &strm,
    VBTDlong *&vb_object
  )
{
  ::CORBA::Boolean is_null_object = false;
  ::CORBA::Boolean is_indirected = false;
  TAO_InputCDR indrected_strm ((size_t) 0);
  if ( ::CORBA::ValueBase::_tao_validate_box_type (
        strm, indrected_strm,
        VBTDlong::_tao_obv_static_repository_id (),
        is_null_object, is_indirected
      ) == false)
    {
      return false;
    }

  vb_object = 0;
  if (is_null_object)
    {
      return true;
    }

  if (is_indirected)
    {
      return VBTDlong::_tao_unmarshal (
             indrected_strm, vb_object);
    }

  ACE_NEW_RETURN (
    vb_object,
    VBTDlong,
    false);

  return (strm >> vb_object->_pd_value);
}

::CORBA::Boolean
VBTDlong::_tao_unmarshal_v (TAO_InputCDR &)
{
  return true;
}



// TAO_IDL - Generated from
// be/be_visitor_valuebox/valuebox_cs.cpp:745

VBTDlong::~VBTDlong (void)
{
}

::CORBA::Boolean
VBTDlong::_tao_marshal_v (TAO_OutputCDR & strm) const
{
  return (strm << this->_pd_value);
}



// TAO_IDL - Generated from
// be/be_visitor_typecode/alias_typecode.cpp:49

static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_VBTDlonglong (
    ::CORBA::tk_value_box,
    "IDL:VBTDlonglong:1.0",
    "VBTDlonglong",
    &CORBA::_tc_longlong);

::CORBA::TypeCode_ptr const _tc_VBTDlonglong =
  &_tao_tc_VBTDlonglong;

// TAO_IDL - Generated from
// be/be_visitor_valuebox/valuebox_cs.cpp:52

void
TAO::Value_Traits<VBTDlonglong>::add_ref (
    VBTDlonglong * p
  )
{
  ::CORBA::add_ref (p);
}

void
TAO::Value_Traits<VBTDlonglong>::remove_ref (
    VBTDlonglong * p
  )
{
  ::CORBA::remove_ref (p);
}

void
TAO::Value_Traits<VBTDlonglong>::release (
    VBTDlonglong * p
  )
{
  ::CORBA::remove_ref (p);
}

VBTDlonglong *
VBTDlonglong::_downcast ( ::CORBA::ValueBase *v)
{
  return dynamic_cast< ::VBTDlonglong * > (v);
}

::CORBA::ValueBase *
VBTDlonglong::_copy_value (void)
{
  ::CORBA::ValueBase *result = 0;
  ACE_NEW_RETURN (
    result,
    VBTDlonglong (*this),
    0);

  return result;
}

const char *
VBTDlonglong::_tao_obv_repository_id (void) const
{
  return this->_tao_obv_static_repository_id ();
}

void
VBTDlonglong::_tao_obv_truncatable_repo_ids (Repository_Id_List& ids) const
{
  ids.push_back (this->_tao_obv_static_repository_id ());
}

::CORBA::Boolean
VBTDlonglong::_tao_match_formal_type (ptrdiff_t ) const
{
  return true;
}

void
VBTDlonglong::_tao_any_destructor (void *_tao_void_pointer)
{
  VBTDlonglong *_tao_tmp_pointer =
    static_cast<VBTDlonglong *> (_tao_void_pointer);
  ::CORBA::remove_ref (_tao_tmp_pointer);
}

// TAO extension - the virtual _type method.
::CORBA::TypeCode_ptr VBTDlonglong::_tao_type (void) const
{
  return ::_tc_VBTDlonglong;
}

::CORBA::Boolean
VBTDlonglong::_tao_unmarshal (
    TAO_InputCDR &strm,
    VBTDlonglong *&vb_object
  )
{
  ::CORBA::Boolean is_null_object = false;
  ::CORBA::Boolean is_indirected = false;
  TAO_InputCDR indrected_strm ((size_t) 0);
  if ( ::CORBA::ValueBase::_tao_validate_box_type (
        strm, indrected_strm,
        VBTDlonglong::_tao_obv_static_repository_id (),
        is_null_object, is_indirected
      ) == false)
    {
      return false;
    }

  vb_object = 0;
  if (is_null_object)
    {
      return true;
    }

  if (is_indirected)
    {
      return VBTDlonglong::_tao_unmarshal (
             indrected_strm, vb_object);
    }

  ACE_NEW_RETURN (
    vb_object,
    VBTDlonglong,
    false);

  return (strm >> vb_object->_pd_value);
}

::CORBA::Boolean
VBTDlonglong::_tao_unmarshal_v (TAO_InputCDR &)
{
  return true;
}



// TAO_IDL - Generated from
// be/be_visitor_valuebox/valuebox_cs.cpp:745

VBTDlonglong::~VBTDlonglong (void)
{
}

::CORBA::Boolean
VBTDlonglong::_tao_marshal_v (TAO_OutputCDR & strm) const
{
  return (strm << this->_pd_value);
}



// TAO_IDL - Generated from
// be/be_visitor_typecode/alias_typecode.cpp:49

static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_VBTDushort (
    ::CORBA::tk_value_box,
    "IDL:VBTDushort:1.0",
    "VBTDushort",
    &CORBA::_tc_ushort);

::CORBA::TypeCode_ptr const _tc_VBTDushort =
  &_tao_tc_VBTDushort;

// TAO_IDL - Generated from
// be/be_visitor_valuebox/valuebox_cs.cpp:52

void
TAO::Value_Traits<VBTDushort>::add_ref (
    VBTDushort * p
  )
{
  ::CORBA::add_ref (p);
}

void
TAO::Value_Traits<VBTDushort>::remove_ref (
    VBTDushort * p
  )
{
  ::CORBA::remove_ref (p);
}

void
TAO::Value_Traits<VBTDushort>::release (
    VBTDushort * p
  )
{
  ::CORBA::remove_ref (p);
}

VBTDushort *
VBTDushort::_downcast ( ::CORBA::ValueBase *v)
{
  return dynamic_cast< ::VBTDushort * > (v);
}

::CORBA::ValueBase *
VBTDushort::_copy_value (void)
{
  ::CORBA::ValueBase *result = 0;
  ACE_NEW_RETURN (
    result,
    VBTDushort (*this),
    0);

  return result;
}

const char *
VBTDushort::_tao_obv_repository_id (void) const
{
  return this->_tao_obv_static_repository_id ();
}

void
VBTDushort::_tao_obv_truncatable_repo_ids (Repository_Id_List& ids) const
{
  ids.push_back (this->_tao_obv_static_repository_id ());
}

::CORBA::Boolean
VBTDushort::_tao_match_formal_type (ptrdiff_t ) const
{
  return true;
}

void
VBTDushort::_tao_any_destructor (void *_tao_void_pointer)
{
  VBTDushort *_tao_tmp_pointer =
    static_cast<VBTDushort *> (_tao_void_pointer);
  ::CORBA::remove_ref (_tao_tmp_pointer);
}

// TAO extension - the virtual _type method.
::CORBA::TypeCode_ptr VBTDushort::_tao_type (void) const
{
  return ::_tc_VBTDushort;
}

::CORBA::Boolean
VBTDushort::_tao_unmarshal (
    TAO_InputCDR &strm,
    VBTDushort *&vb_object
  )
{
  ::CORBA::Boolean is_null_object = false;
  ::CORBA::Boolean is_indirected = false;
  TAO_InputCDR indrected_strm ((size_t) 0);
  if ( ::CORBA::ValueBase::_tao_validate_box_type (
        strm, indrected_strm,
        VBTDushort::_tao_obv_static_repository_id (),
        is_null_object, is_indirected
      ) == false)
    {
      return false;
    }

  vb_object = 0;
  if (is_null_object)
    {
      return true;
    }

  if (is_indirected)
    {
      return VBTDushort::_tao_unmarshal (
             indrected_strm, vb_object);
    }

  ACE_NEW_RETURN (
    vb_object,
    VBTDushort,
    false);

  return (strm >> vb_object->_pd_value);
}

::CORBA::Boolean
VBTDushort::_tao_unmarshal_v (TAO_InputCDR &)
{
  return true;
}



// TAO_IDL - Generated from
// be/be_visitor_valuebox/valuebox_cs.cpp:745

VBTDushort::~VBTDushort (void)
{
}

::CORBA::Boolean
VBTDushort::_tao_marshal_v (TAO_OutputCDR & strm) const
{
  return (strm << this->_pd_value);
}



// TAO_IDL - Generated from
// be/be_visitor_typecode/alias_typecode.cpp:49

static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_VBTDulong (
    ::CORBA::tk_value_box,
    "IDL:VBTDulong:1.0",
    "VBTDulong",
    &CORBA::_tc_ulong);

::CORBA::TypeCode_ptr const _tc_VBTDulong =
  &_tao_tc_VBTDulong;

// TAO_IDL - Generated from
// be/be_visitor_valuebox/valuebox_cs.cpp:52

void
TAO::Value_Traits<VBTDulong>::add_ref (
    VBTDulong * p
  )
{
  ::CORBA::add_ref (p);
}

void
TAO::Value_Traits<VBTDulong>::remove_ref (
    VBTDulong * p
  )
{
  ::CORBA::remove_ref (p);
}

void
TAO::Value_Traits<VBTDulong>::release (
    VBTDulong * p
  )
{
  ::CORBA::remove_ref (p);
}

VBTDulong *
VBTDulong::_downcast ( ::CORBA::ValueBase *v)
{
  return dynamic_cast< ::VBTDulong * > (v);
}

::CORBA::ValueBase *
VBTDulong::_copy_value (void)
{
  ::CORBA::ValueBase *result = 0;
  ACE_NEW_RETURN (
    result,
    VBTDulong (*this),
    0);

  return result;
}

const char *
VBTDulong::_tao_obv_repository_id (void) const
{
  return this->_tao_obv_static_repository_id ();
}

void
VBTDulong::_tao_obv_truncatable_repo_ids (Repository_Id_List& ids) const
{
  ids.push_back (this->_tao_obv_static_repository_id ());
}

::CORBA::Boolean
VBTDulong::_tao_match_formal_type (ptrdiff_t ) const
{
  return true;
}

void
VBTDulong::_tao_any_destructor (void *_tao_void_pointer)
{
  VBTDulong *_tao_tmp_pointer =
    static_cast<VBTDulong *> (_tao_void_pointer);
  ::CORBA::remove_ref (_tao_tmp_pointer);
}

// TAO extension - the virtual _type method.
::CORBA::TypeCode_ptr VBTDulong::_tao_type (void) const
{
  return ::_tc_VBTDulong;
}

::CORBA::Boolean
VBTDulong::_tao_unmarshal (
    TAO_InputCDR &strm,
    VBTDulong *&vb_object
  )
{
  ::CORBA::Boolean is_null_object = false;
  ::CORBA::Boolean is_indirected = false;
  TAO_InputCDR indrected_strm ((size_t) 0);
  if ( ::CORBA::ValueBase::_tao_validate_box_type (
        strm, indrected_strm,
        VBTDulong::_tao_obv_static_repository_id (),
        is_null_object, is_indirected
      ) == false)
    {
      return false;
    }

  vb_object = 0;
  if (is_null_object)
    {
      return true;
    }

  if (is_indirected)
    {
      return VBTDulong::_tao_unmarshal (
             indrected_strm, vb_object);
    }

  ACE_NEW_RETURN (
    vb_object,
    VBTDulong,
    false);

  return (strm >> vb_object->_pd_value);
}

::CORBA::Boolean
VBTDulong::_tao_unmarshal_v (TAO_InputCDR &)
{
  return true;
}



// TAO_IDL - Generated from
// be/be_visitor_valuebox/valuebox_cs.cpp:745

VBTDulong::~VBTDulong (void)
{
}

::CORBA::Boolean
VBTDulong::_tao_marshal_v (TAO_OutputCDR & strm) const
{
  return (strm << this->_pd_value);
}



// TAO_IDL - Generated from
// be/be_visitor_typecode/alias_typecode.cpp:49

static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_VBTDulonglong (
    ::CORBA::tk_value_box,
    "IDL:VBTDulonglong:1.0",
    "VBTDulonglong",
    &CORBA::_tc_ulonglong);

::CORBA::TypeCode_ptr const _tc_VBTDulonglong =
  &_tao_tc_VBTDulonglong;

// TAO_IDL - Generated from
// be/be_visitor_valuebox/valuebox_cs.cpp:52

void
TAO::Value_Traits<VBTDulonglong>::add_ref (
    VBTDulonglong * p
  )
{
  ::CORBA::add_ref (p);
}

void
TAO::Value_Traits<VBTDulonglong>::remove_ref (
    VBTDulonglong * p
  )
{
  ::CORBA::remove_ref (p);
}

void
TAO::Value_Traits<VBTDulonglong>::release (
    VBTDulonglong * p
  )
{
  ::CORBA::remove_ref (p);
}

VBTDulonglong *
VBTDulonglong::_downcast ( ::CORBA::ValueBase *v)
{
  return dynamic_cast< ::VBTDulonglong * > (v);
}

::CORBA::ValueBase *
VBTDulonglong::_copy_value (void)
{
  ::CORBA::ValueBase *result = 0;
  ACE_NEW_RETURN (
    result,
    VBTDulonglong (*this),
    0);

  return result;
}

const char *
VBTDulonglong::_tao_obv_repository_id (void) const
{
  return this->_tao_obv_static_repository_id ();
}

void
VBTDulonglong::_tao_obv_truncatable_repo_ids (Repository_Id_List& ids) const
{
  ids.push_back (this->_tao_obv_static_repository_id ());
}

::CORBA::Boolean
VBTDulonglong::_tao_match_formal_type (ptrdiff_t ) const
{
  return true;
}

void
VBTDulonglong::_tao_any_destructor (void *_tao_void_pointer)
{
  VBTDulonglong *_tao_tmp_pointer =
    static_cast<VBTDulonglong *> (_tao_void_pointer);
  ::CORBA::remove_ref (_tao_tmp_pointer);
}

// TAO extension - the virtual _type method.
::CORBA::TypeCode_ptr VBTDulonglong::_tao_type (void) const
{
  return ::_tc_VBTDulonglong;
}

::CORBA::Boolean
VBTDulonglong::_tao_unmarshal (
    TAO_InputCDR &strm,
    VBTDulonglong *&vb_object
  )
{
  ::CORBA::Boolean is_null_object = false;
  ::CORBA::Boolean is_indirected = false;
  TAO_InputCDR indrected_strm ((size_t) 0);
  if ( ::CORBA::ValueBase::_tao_validate_box_type (
        strm, indrected_strm,
        VBTDulonglong::_tao_obv_static_repository_id (),
        is_null_object, is_indirected
      ) == false)
    {
      return false;
    }

  vb_object = 0;
  if (is_null_object)
    {
      return true;
    }

  if (is_indirected)
    {
      return VBTDulonglong::_tao_unmarshal (
             indrected_strm, vb_object);
    }

  ACE_NEW_RETURN (
    vb_object,
    VBTDulonglong,
    false);

  return (strm >> vb_object->_pd_value);
}

::CORBA::Boolean
VBTDulonglong::_tao_unmarshal_v (TAO_InputCDR &)
{
  return true;
}



// TAO_IDL - Generated from
// be/be_visitor_valuebox/valuebox_cs.cpp:745

VBTDulonglong::~VBTDulonglong (void)
{
}

::CORBA::Boolean
VBTDulonglong::_tao_marshal_v (TAO_OutputCDR & strm) const
{
  return (strm << this->_pd_value);
}



// TAO_IDL - Generated from
// be/be_visitor_typecode/alias_typecode.cpp:49

static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_VBTDchar (
    ::CORBA::tk_value_box,
    "IDL:VBTDchar:1.0",
    "VBTDchar",
    &CORBA::_tc_char);

::CORBA::TypeCode_ptr const _tc_VBTDchar =
  &_tao_tc_VBTDchar;

// TAO_IDL - Generated from
// be/be_visitor_valuebox/valuebox_cs.cpp:52

void
TAO::Value_Traits<VBTDchar>::add_ref (
    VBTDchar * p
  )
{
  ::CORBA::add_ref (p);
}

void
TAO::Value_Traits<VBTDchar>::remove_ref (
    VBTDchar * p
  )
{
  ::CORBA::remove_ref (p);
}

void
TAO::Value_Traits<VBTDchar>::release (
    VBTDchar * p
  )
{
  ::CORBA::remove_ref (p);
}

VBTDchar *
VBTDchar::_downcast ( ::CORBA::ValueBase *v)
{
  return dynamic_cast< ::VBTDchar * > (v);
}

::CORBA::ValueBase *
VBTDchar::_copy_value (void)
{
  ::CORBA::ValueBase *result = 0;
  ACE_NEW_RETURN (
    result,
    VBTDchar (*this),
    0);

  return result;
}

const char *
VBTDchar::_tao_obv_repository_id (void) const
{
  return this->_tao_obv_static_repository_id ();
}

void
VBTDchar::_tao_obv_truncatable_repo_ids (Repository_Id_List& ids) const
{
  ids.push_back (this->_tao_obv_static_repository_id ());
}

::CORBA::Boolean
VBTDchar::_tao_match_formal_type (ptrdiff_t ) const
{
  return true;
}

void
VBTDchar::_tao_any_destructor (void *_tao_void_pointer)
{
  VBTDchar *_tao_tmp_pointer =
    static_cast<VBTDchar *> (_tao_void_pointer);
  ::CORBA::remove_ref (_tao_tmp_pointer);
}

// TAO extension - the virtual _type method.
::CORBA::TypeCode_ptr VBTDchar::_tao_type (void) const
{
  return ::_tc_VBTDchar;
}

::CORBA::Boolean
VBTDchar::_tao_unmarshal (
    TAO_InputCDR &strm,
    VBTDchar *&vb_object
  )
{
  ::CORBA::Boolean is_null_object = false;
  ::CORBA::Boolean is_indirected = false;
  TAO_InputCDR indrected_strm ((size_t) 0);
  if ( ::CORBA::ValueBase::_tao_validate_box_type (
        strm, indrected_strm,
        VBTDchar::_tao_obv_static_repository_id (),
        is_null_object, is_indirected
      ) == false)
    {
      return false;
    }

  vb_object = 0;
  if (is_null_object)
    {
      return true;
    }

  if (is_indirected)
    {
      return VBTDchar::_tao_unmarshal (
             indrected_strm, vb_object);
    }

  ACE_NEW_RETURN (
    vb_object,
    VBTDchar,
    false);

  return (strm >> ::ACE_InputCDR::to_char (vb_object->_pd_value));
}

::CORBA::Boolean
VBTDchar::_tao_unmarshal_v (TAO_InputCDR &)
{
  return true;
}



// TAO_IDL - Generated from
// be/be_visitor_valuebox/valuebox_cs.cpp:745

VBTDchar::~VBTDchar (void)
{
}

::CORBA::Boolean
VBTDchar::_tao_marshal_v (TAO_OutputCDR & strm) const
{
  return (strm << ::ACE_OutputCDR::from_char (this->_pd_value));
}



// TAO_IDL - Generated from
// be/be_visitor_typecode/alias_typecode.cpp:49

static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_VBTDwchar (
    ::CORBA::tk_value_box,
    "IDL:VBTDwchar:1.0",
    "VBTDwchar",
    &CORBA::_tc_wchar);

::CORBA::TypeCode_ptr const _tc_VBTDwchar =
  &_tao_tc_VBTDwchar;

// TAO_IDL - Generated from
// be/be_visitor_valuebox/valuebox_cs.cpp:52

void
TAO::Value_Traits<VBTDwchar>::add_ref (
    VBTDwchar * p
  )
{
  ::CORBA::add_ref (p);
}

void
TAO::Value_Traits<VBTDwchar>::remove_ref (
    VBTDwchar * p
  )
{
  ::CORBA::remove_ref (p);
}

void
TAO::Value_Traits<VBTDwchar>::release (
    VBTDwchar * p
  )
{
  ::CORBA::remove_ref (p);
}

VBTDwchar *
VBTDwchar::_downcast ( ::CORBA::ValueBase *v)
{
  return dynamic_cast< ::VBTDwchar * > (v);
}

::CORBA::ValueBase *
VBTDwchar::_copy_value (void)
{
  ::CORBA::ValueBase *result = 0;
  ACE_NEW_RETURN (
    result,
    VBTDwchar (*this),
    0);

  return result;
}

const char *
VBTDwchar::_tao_obv_repository_id (void) const
{
  return this->_tao_obv_static_repository_id ();
}

void
VBTDwchar::_tao_obv_truncatable_repo_ids (Repository_Id_List& ids) const
{
  ids.push_back (this->_tao_obv_static_repository_id ());
}

::CORBA::Boolean
VBTDwchar::_tao_match_formal_type (ptrdiff_t ) const
{
  return true;
}

void
VBTDwchar::_tao_any_destructor (void *_tao_void_pointer)
{
  VBTDwchar *_tao_tmp_pointer =
    static_cast<VBTDwchar *> (_tao_void_pointer);
  ::CORBA::remove_ref (_tao_tmp_pointer);
}

// TAO extension - the virtual _type method.
::CORBA::TypeCode_ptr VBTDwchar::_tao_type (void) const
{
  return ::_tc_VBTDwchar;
}

::CORBA::Boolean
VBTDwchar::_tao_unmarshal (
    TAO_InputCDR &strm,
    VBTDwchar *&vb_object
  )
{
  ::CORBA::Boolean is_null_object = false;
  ::CORBA::Boolean is_indirected = false;
  TAO_InputCDR indrected_strm ((size_t) 0);
  if ( ::CORBA::ValueBase::_tao_validate_box_type (
        strm, indrected_strm,
        VBTDwchar::_tao_obv_static_repository_id (),
        is_null_object, is_indirected
      ) == false)
    {
      return false;
    }

  vb_object = 0;
  if (is_null_object)
    {
      return true;
    }

  if (is_indirected)
    {
      return VBTDwchar::_tao_unmarshal (
             indrected_strm, vb_object);
    }

  ACE_NEW_RETURN (
    vb_object,
    VBTDwchar,
    false);

  return (strm >> ::ACE_InputCDR::to_wchar (vb_object->_pd_value));
}

::CORBA::Boolean
VBTDwchar::_tao_unmarshal_v (TAO_InputCDR &)
{
  return true;
}



// TAO_IDL - Generated from
// be/be_visitor_valuebox/valuebox_cs.cpp:745

VBTDwchar::~VBTDwchar (void)
{
}

::CORBA::Boolean
VBTDwchar::_tao_marshal_v (TAO_OutputCDR & strm) const
{
  return (strm << ::ACE_OutputCDR::from_wchar (this->_pd_value));
}



// TAO_IDL - Generated from
// be/be_visitor_typecode/alias_typecode.cpp:49

static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_VBTDboolean (
    ::CORBA::tk_value_box,
    "IDL:VBTDboolean:1.0",
    "VBTDboolean",
    &CORBA::_tc_boolean);

::CORBA::TypeCode_ptr const _tc_VBTDboolean =
  &_tao_tc_VBTDboolean;

// TAO_IDL - Generated from
// be/be_visitor_valuebox/valuebox_cs.cpp:52

void
TAO::Value_Traits<VBTDboolean>::add_ref (
    VBTDboolean * p
  )
{
  ::CORBA::add_ref (p);
}

void
TAO::Value_Traits<VBTDboolean>::remove_ref (
    VBTDboolean * p
  )
{
  ::CORBA::remove_ref (p);
}

void
TAO::Value_Traits<VBTDboolean>::release (
    VBTDboolean * p
  )
{
  ::CORBA::remove_ref (p);
}

VBTDboolean *
VBTDboolean::_downcast ( ::CORBA::ValueBase *v)
{
  return dynamic_cast< ::VBTDboolean * > (v);
}

::CORBA::ValueBase *
VBTDboolean::_copy_value (void)
{
  ::CORBA::ValueBase *result = 0;
  ACE_NEW_RETURN (
    result,
    VBTDboolean (*this),
    0);

  return result;
}

const char *
VBTDboolean::_tao_obv_repository_id (void) const
{
  return this->_tao_obv_static_repository_id ();
}

void
VBTDboolean::_tao_obv_truncatable_repo_ids (Repository_Id_List& ids) const
{
  ids.push_back (this->_tao_obv_static_repository_id ());
}

::CORBA::Boolean
VBTDboolean::_tao_match_formal_type (ptrdiff_t ) const
{
  return true;
}

void
VBTDboolean::_tao_any_destructor (void *_tao_void_pointer)
{
  VBTDboolean *_tao_tmp_pointer =
    static_cast<VBTDboolean *> (_tao_void_pointer);
  ::CORBA::remove_ref (_tao_tmp_pointer);
}

// TAO extension - the virtual _type method.
::CORBA::TypeCode_ptr VBTDboolean::_tao_type (void) const
{
  return ::_tc_VBTDboolean;
}

::CORBA::Boolean
VBTDboolean::_tao_unmarshal (
    TAO_InputCDR &strm,
    VBTDboolean *&vb_object
  )
{
  ::CORBA::Boolean is_null_object = false;
  ::CORBA::Boolean is_indirected = false;
  TAO_InputCDR indrected_strm ((size_t) 0);
  if ( ::CORBA::ValueBase::_tao_validate_box_type (
        strm, indrected_strm,
        VBTDboolean::_tao_obv_static_repository_id (),
        is_null_object, is_indirected
      ) == false)
    {
      return false;
    }

  vb_object = 0;
  if (is_null_object)
    {
      return true;
    }

  if (is_indirected)
    {
      return VBTDboolean::_tao_unmarshal (
             indrected_strm, vb_object);
    }

  ACE_NEW_RETURN (
    vb_object,
    VBTDboolean,
    false);

  return (strm >> ::ACE_InputCDR::to_boolean (vb_object->_pd_value));
}

::CORBA::Boolean
VBTDboolean::_tao_unmarshal_v (TAO_InputCDR &)
{
  return true;
}



// TAO_IDL - Generated from
// be/be_visitor_valuebox/valuebox_cs.cpp:745

VBTDboolean::~VBTDboolean (void)
{
}

::CORBA::Boolean
VBTDboolean::_tao_marshal_v (TAO_OutputCDR & strm) const
{
  return (strm << ::ACE_OutputCDR::from_boolean (this->_pd_value));
}



// TAO_IDL - Generated from
// be/be_visitor_typecode/alias_typecode.cpp:49

static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_VBTDoctet (
    ::CORBA::tk_value_box,
    "IDL:VBTDoctet:1.0",
    "VBTDoctet",
    &CORBA::_tc_octet);

::CORBA::TypeCode_ptr const _tc_VBTDoctet =
  &_tao_tc_VBTDoctet;

// TAO_IDL - Generated from
// be/be_visitor_valuebox/valuebox_cs.cpp:52

void
TAO::Value_Traits<VBTDoctet>::add_ref (
    VBTDoctet * p
  )
{
  ::CORBA::add_ref (p);
}

void
TAO::Value_Traits<VBTDoctet>::remove_ref (
    VBTDoctet * p
  )
{
  ::CORBA::remove_ref (p);
}

void
TAO::Value_Traits<VBTDoctet>::release (
    VBTDoctet * p
  )
{
  ::CORBA::remove_ref (p);
}

VBTDoctet *
VBTDoctet::_downcast ( ::CORBA::ValueBase *v)
{
  return dynamic_cast< ::VBTDoctet * > (v);
}

::CORBA::ValueBase *
VBTDoctet::_copy_value (void)
{
  ::CORBA::ValueBase *result = 0;
  ACE_NEW_RETURN (
    result,
    VBTDoctet (*this),
    0);

  return result;
}

const char *
VBTDoctet::_tao_obv_repository_id (void) const
{
  return this->_tao_obv_static_repository_id ();
}

void
VBTDoctet::_tao_obv_truncatable_repo_ids (Repository_Id_List& ids) const
{
  ids.push_back (this->_tao_obv_static_repository_id ());
}

::CORBA::Boolean
VBTDoctet::_tao_match_formal_type (ptrdiff_t ) const
{
  return true;
}

void
VBTDoctet::_tao_any_destructor (void *_tao_void_pointer)
{
  VBTDoctet *_tao_tmp_pointer =
    static_cast<VBTDoctet *> (_tao_void_pointer);
  ::CORBA::remove_ref (_tao_tmp_pointer);
}

// TAO extension - the virtual _type method.
::CORBA::TypeCode_ptr VBTDoctet::_tao_type (void) const
{
  return ::_tc_VBTDoctet;
}

::CORBA::Boolean
VBTDoctet::_tao_unmarshal (
    TAO_InputCDR &strm,
    VBTDoctet *&vb_object
  )
{
  ::CORBA::Boolean is_null_object = false;
  ::CORBA::Boolean is_indirected = false;
  TAO_InputCDR indrected_strm ((size_t) 0);
  if ( ::CORBA::ValueBase::_tao_validate_box_type (
        strm, indrected_strm,
        VBTDoctet::_tao_obv_static_repository_id (),
        is_null_object, is_indirected
      ) == false)
    {
      return false;
    }

  vb_object = 0;
  if (is_null_object)
    {
      return true;
    }

  if (is_indirected)
    {
      return VBTDoctet::_tao_unmarshal (
             indrected_strm, vb_object);
    }

  ACE_NEW_RETURN (
    vb_object,
    VBTDoctet,
    false);

  return (strm >> ::ACE_InputCDR::to_octet (vb_object->_pd_value));
}

::CORBA::Boolean
VBTDoctet::_tao_unmarshal_v (TAO_InputCDR &)
{
  return true;
}



// TAO_IDL - Generated from
// be/be_visitor_valuebox/valuebox_cs.cpp:745

VBTDoctet::~VBTDoctet (void)
{
}

::CORBA::Boolean
VBTDoctet::_tao_marshal_v (TAO_OutputCDR & strm) const
{
  return (strm << ::ACE_OutputCDR::from_octet (this->_pd_value));
}



// TAO_IDL - Generated from
// be/be_visitor_typecode/alias_typecode.cpp:49

static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_VBTDfloat (
    ::CORBA::tk_value_box,
    "IDL:VBTDfloat:1.0",
    "VBTDfloat",
    &CORBA::_tc_float);

::CORBA::TypeCode_ptr const _tc_VBTDfloat =
  &_tao_tc_VBTDfloat;

// TAO_IDL - Generated from
// be/be_visitor_valuebox/valuebox_cs.cpp:52

void
TAO::Value_Traits<VBTDfloat>::add_ref (
    VBTDfloat * p
  )
{
  ::CORBA::add_ref (p);
}

void
TAO::Value_Traits<VBTDfloat>::remove_ref (
    VBTDfloat * p
  )
{
  ::CORBA::remove_ref (p);
}

void
TAO::Value_Traits<VBTDfloat>::release (
    VBTDfloat * p
  )
{
  ::CORBA::remove_ref (p);
}

VBTDfloat *
VBTDfloat::_downcast ( ::CORBA::ValueBase *v)
{
  return dynamic_cast< ::VBTDfloat * > (v);
}

::CORBA::ValueBase *
VBTDfloat::_copy_value (void)
{
  ::CORBA::ValueBase *result = 0;
  ACE_NEW_RETURN (
    result,
    VBTDfloat (*this),
    0);

  return result;
}

const char *
VBTDfloat::_tao_obv_repository_id (void) const
{
  return this->_tao_obv_static_repository_id ();
}

void
VBTDfloat::_tao_obv_truncatable_repo_ids (Repository_Id_List& ids) const
{
  ids.push_back (this->_tao_obv_static_repository_id ());
}

::CORBA::Boolean
VBTDfloat::_tao_match_formal_type (ptrdiff_t ) const
{
  return true;
}

void
VBTDfloat::_tao_any_destructor (void *_tao_void_pointer)
{
  VBTDfloat *_tao_tmp_pointer =
    static_cast<VBTDfloat *> (_tao_void_pointer);
  ::CORBA::remove_ref (_tao_tmp_pointer);
}

// TAO extension - the virtual _type method.
::CORBA::TypeCode_ptr VBTDfloat::_tao_type (void) const
{
  return ::_tc_VBTDfloat;
}

::CORBA::Boolean
VBTDfloat::_tao_unmarshal (
    TAO_InputCDR &strm,
    VBTDfloat *&vb_object
  )
{
  ::CORBA::Boolean is_null_object = false;
  ::CORBA::Boolean is_indirected = false;
  TAO_InputCDR indrected_strm ((size_t) 0);
  if ( ::CORBA::ValueBase::_tao_validate_box_type (
        strm, indrected_strm,
        VBTDfloat::_tao_obv_static_repository_id (),
        is_null_object, is_indirected
      ) == false)
    {
      return false;
    }

  vb_object = 0;
  if (is_null_object)
    {
      return true;
    }

  if (is_indirected)
    {
      return VBTDfloat::_tao_unmarshal (
             indrected_strm, vb_object);
    }

  ACE_NEW_RETURN (
    vb_object,
    VBTDfloat,
    false);

  return (strm >> vb_object->_pd_value);
}

::CORBA::Boolean
VBTDfloat::_tao_unmarshal_v (TAO_InputCDR &)
{
  return true;
}



// TAO_IDL - Generated from
// be/be_visitor_valuebox/valuebox_cs.cpp:745

VBTDfloat::~VBTDfloat (void)
{
}

::CORBA::Boolean
VBTDfloat::_tao_marshal_v (TAO_OutputCDR & strm) const
{
  return (strm << this->_pd_value);
}



// TAO_IDL - Generated from
// be/be_visitor_typecode/alias_typecode.cpp:49

static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_VBTDdouble (
    ::CORBA::tk_value_box,
    "IDL:VBTDdouble:1.0",
    "VBTDdouble",
    &CORBA::_tc_double);

::CORBA::TypeCode_ptr const _tc_VBTDdouble =
  &_tao_tc_VBTDdouble;

// TAO_IDL - Generated from
// be/be_visitor_valuebox/valuebox_cs.cpp:52

void
TAO::Value_Traits<VBTDdouble>::add_ref (
    VBTDdouble * p
  )
{
  ::CORBA::add_ref (p);
}

void
TAO::Value_Traits<VBTDdouble>::remove_ref (
    VBTDdouble * p
  )
{
  ::CORBA::remove_ref (p);
}

void
TAO::Value_Traits<VBTDdouble>::release (
    VBTDdouble * p
  )
{
  ::CORBA::remove_ref (p);
}

VBTDdouble *
VBTDdouble::_downcast ( ::CORBA::ValueBase *v)
{
  return dynamic_cast< ::VBTDdouble * > (v);
}

::CORBA::ValueBase *
VBTDdouble::_copy_value (void)
{
  ::CORBA::ValueBase *result = 0;
  ACE_NEW_RETURN (
    result,
    VBTDdouble (*this),
    0);

  return result;
}

const char *
VBTDdouble::_tao_obv_repository_id (void) const
{
  return this->_tao_obv_static_repository_id ();
}

void
VBTDdouble::_tao_obv_truncatable_repo_ids (Repository_Id_List& ids) const
{
  ids.push_back (this->_tao_obv_static_repository_id ());
}

::CORBA::Boolean
VBTDdouble::_tao_match_formal_type (ptrdiff_t ) const
{
  return true;
}

void
VBTDdouble::_tao_any_destructor (void *_tao_void_pointer)
{
  VBTDdouble *_tao_tmp_pointer =
    static_cast<VBTDdouble *> (_tao_void_pointer);
  ::CORBA::remove_ref (_tao_tmp_pointer);
}

// TAO extension - the virtual _type method.
::CORBA::TypeCode_ptr VBTDdouble::_tao_type (void) const
{
  return ::_tc_VBTDdouble;
}

::CORBA::Boolean
VBTDdouble::_tao_unmarshal (
    TAO_InputCDR &strm,
    VBTDdouble *&vb_object
  )
{
  ::CORBA::Boolean is_null_object = false;
  ::CORBA::Boolean is_indirected = false;
  TAO_InputCDR indrected_strm ((size_t) 0);
  if ( ::CORBA::ValueBase::_tao_validate_box_type (
        strm, indrected_strm,
        VBTDdouble::_tao_obv_static_repository_id (),
        is_null_object, is_indirected
      ) == false)
    {
      return false;
    }

  vb_object = 0;
  if (is_null_object)
    {
      return true;
    }

  if (is_indirected)
    {
      return VBTDdouble::_tao_unmarshal (
             indrected_strm, vb_object);
    }

  ACE_NEW_RETURN (
    vb_object,
    VBTDdouble,
    false);

  return (strm >> vb_object->_pd_value);
}

::CORBA::Boolean
VBTDdouble::_tao_unmarshal_v (TAO_InputCDR &)
{
  return true;
}



// TAO_IDL - Generated from
// be/be_visitor_valuebox/valuebox_cs.cpp:745

VBTDdouble::~VBTDdouble (void)
{
}

::CORBA::Boolean
VBTDdouble::_tao_marshal_v (TAO_OutputCDR & strm) const
{
  return (strm << this->_pd_value);
}



// TAO_IDL - Generated from
// be/be_visitor_typecode/alias_typecode.cpp:49

static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_VBTDlongdouble (
    ::CORBA::tk_value_box,
    "IDL:VBTDlongdouble:1.0",
    "VBTDlongdouble",
    &CORBA::_tc_longdouble);

::CORBA::TypeCode_ptr const _tc_VBTDlongdouble =
  &_tao_tc_VBTDlongdouble;

// TAO_IDL - Generated from
// be/be_visitor_valuebox/valuebox_cs.cpp:52

void
TAO::Value_Traits<VBTDlongdouble>::add_ref (
    VBTDlongdouble * p
  )
{
  ::CORBA::add_ref (p);
}

void
TAO::Value_Traits<VBTDlongdouble>::remove_ref (
    VBTDlongdouble * p
  )
{
  ::CORBA::remove_ref (p);
}

void
TAO::Value_Traits<VBTDlongdouble>::release (
    VBTDlongdouble * p
  )
{
  ::CORBA::remove_ref (p);
}

VBTDlongdouble *
VBTDlongdouble::_downcast ( ::CORBA::ValueBase *v)
{
  return dynamic_cast< ::VBTDlongdouble * > (v);
}

::CORBA::ValueBase *
VBTDlongdouble::_copy_value (void)
{
  ::CORBA::ValueBase *result = 0;
  ACE_NEW_RETURN (
    result,
    VBTDlongdouble (*this),
    0);

  return result;
}

const char *
VBTDlongdouble::_tao_obv_repository_id (void) const
{
  return this->_tao_obv_static_repository_id ();
}

void
VBTDlongdouble::_tao_obv_truncatable_repo_ids (Repository_Id_List& ids) const
{
  ids.push_back (this->_tao_obv_static_repository_id ());
}

::CORBA::Boolean
VBTDlongdouble::_tao_match_formal_type (ptrdiff_t ) const
{
  return true;
}

void
VBTDlongdouble::_tao_any_destructor (void *_tao_void_pointer)
{
  VBTDlongdouble *_tao_tmp_pointer =
    static_cast<VBTDlongdouble *> (_tao_void_pointer);
  ::CORBA::remove_ref (_tao_tmp_pointer);
}

// TAO extension - the virtual _type method.
::CORBA::TypeCode_ptr VBTDlongdouble::_tao_type (void) const
{
  return ::_tc_VBTDlongdouble;
}

::CORBA::Boolean
VBTDlongdouble::_tao_unmarshal (
    TAO_InputCDR &strm,
    VBTDlongdouble *&vb_object
  )
{
  ::CORBA::Boolean is_null_object = false;
  ::CORBA::Boolean is_indirected = false;
  TAO_InputCDR indrected_strm ((size_t) 0);
  if ( ::CORBA::ValueBase::_tao_validate_box_type (
        strm, indrected_strm,
        VBTDlongdouble::_tao_obv_static_repository_id (),
        is_null_object, is_indirected
      ) == false)
    {
      return false;
    }

  vb_object = 0;
  if (is_null_object)
    {
      return true;
    }

  if (is_indirected)
    {
      return VBTDlongdouble::_tao_unmarshal (
             indrected_strm, vb_object);
    }

  ACE_NEW_RETURN (
    vb_object,
    VBTDlongdouble,
    false);

  return (strm >> vb_object->_pd_value);
}

::CORBA::Boolean
VBTDlongdouble::_tao_unmarshal_v (TAO_InputCDR &)
{
  return true;
}



// TAO_IDL - Generated from
// be/be_visitor_valuebox/valuebox_cs.cpp:745

VBTDlongdouble::~VBTDlongdouble (void)
{
}

::CORBA::Boolean
VBTDlongdouble::_tao_marshal_v (TAO_OutputCDR & strm) const
{
  return (strm << this->_pd_value);
}



// TAO_IDL - Generated from
// be/be_visitor_typecode/alias_typecode.cpp:49

static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_VBTDenum (
    ::CORBA::tk_value_box,
    "IDL:VBTDenum:1.0",
    "VBTDenum",
    &_tc_Color);

::CORBA::TypeCode_ptr const _tc_VBTDenum =
  &_tao_tc_VBTDenum;

// TAO_IDL - Generated from
// be/be_visitor_valuebox/valuebox_cs.cpp:52

void
TAO::Value_Traits<VBTDenum>::add_ref (
    VBTDenum * p
  )
{
  ::CORBA::add_ref (p);
}

void
TAO::Value_Traits<VBTDenum>::remove_ref (
    VBTDenum * p
  )
{
  ::CORBA::remove_ref (p);
}

void
TAO::Value_Traits<VBTDenum>::release (
    VBTDenum * p
  )
{
  ::CORBA::remove_ref (p);
}

VBTDenum *
VBTDenum::_downcast ( ::CORBA::ValueBase *v)
{
  return dynamic_cast< ::VBTDenum * > (v);
}

::CORBA::ValueBase *
VBTDenum::_copy_value (void)
{
  ::CORBA::ValueBase *result = 0;
  ACE_NEW_RETURN (
    result,
    VBTDenum (*this),
    0);

  return result;
}

const char *
VBTDenum::_tao_obv_repository_id (void) const
{
  return this->_tao_obv_static_repository_id ();
}

void
VBTDenum::_tao_obv_truncatable_repo_ids (Repository_Id_List& ids) const
{
  ids.push_back (this->_tao_obv_static_repository_id ());
}

::CORBA::Boolean
VBTDenum::_tao_match_formal_type (ptrdiff_t ) const
{
  return true;
}

void
VBTDenum::_tao_any_destructor (void *_tao_void_pointer)
{
  VBTDenum *_tao_tmp_pointer =
    static_cast<VBTDenum *> (_tao_void_pointer);
  ::CORBA::remove_ref (_tao_tmp_pointer);
}

// TAO extension - the virtual _type method.
::CORBA::TypeCode_ptr VBTDenum::_tao_type (void) const
{
  return ::_tc_VBTDenum;
}

::CORBA::Boolean
VBTDenum::_tao_unmarshal (
    TAO_InputCDR &strm,
    VBTDenum *&vb_object
  )
{
  ::CORBA::Boolean is_null_object = false;
  ::CORBA::Boolean is_indirected = false;
  TAO_InputCDR indrected_strm ((size_t) 0);
  if ( ::CORBA::ValueBase::_tao_validate_box_type (
        strm, indrected_strm,
        VBTDenum::_tao_obv_static_repository_id (),
        is_null_object, is_indirected
      ) == false)
    {
      return false;
    }

  vb_object = 0;
  if (is_null_object)
    {
      return true;
    }

  if (is_indirected)
    {
      return VBTDenum::_tao_unmarshal (
             indrected_strm, vb_object);
    }

  ACE_NEW_RETURN (
    vb_object,
    VBTDenum,
    false);

  return (strm >> vb_object->_pd_value);
}

::CORBA::Boolean
VBTDenum::_tao_unmarshal_v (TAO_InputCDR &)
{
  return true;
}



// TAO_IDL - Generated from
// be/be_visitor_valuebox/valuebox_cs.cpp:359

VBTDenum::~VBTDenum (void)
{
}

::CORBA::Boolean
VBTDenum::_tao_marshal_v (TAO_OutputCDR & strm) const
{
  return (strm << this->_pd_value);
}



// TAO_IDL - Generated from
// be/be_visitor_typecode/alias_typecode.cpp:49

static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_VBany (
    ::CORBA::tk_value_box,
    "IDL:VBany:1.0",
    "VBany",
    &CORBA::_tc_any);

::CORBA::TypeCode_ptr const _tc_VBany =
  &_tao_tc_VBany;

// TAO_IDL - Generated from
// be/be_visitor_valuebox/valuebox_cs.cpp:52

void
TAO::Value_Traits<VBany>::add_ref (
    VBany * p
  )
{
  ::CORBA::add_ref (p);
}

void
TAO::Value_Traits<VBany>::remove_ref (
    VBany * p
  )
{
  ::CORBA::remove_ref (p);
}

void
TAO::Value_Traits<VBany>::release (
    VBany * p
  )
{
  ::CORBA::remove_ref (p);
}

VBany *
VBany::_downcast ( ::CORBA::ValueBase *v)
{
  return dynamic_cast< ::VBany * > (v);
}

::CORBA::ValueBase *
VBany::_copy_value (void)
{
  ::CORBA::ValueBase *result = 0;
  ACE_NEW_RETURN (
    result,
    VBany (*this),
    0);

  return result;
}

const char *
VBany::_tao_obv_repository_id (void) const
{
  return this->_tao_obv_static_repository_id ();
}

void
VBany::_tao_obv_truncatable_repo_ids (Repository_Id_List& ids) const
{
  ids.push_back (this->_tao_obv_static_repository_id ());
}

::CORBA::Boolean
VBany::_tao_match_formal_type (ptrdiff_t ) const
{
  return true;
}

void
VBany::_tao_any_destructor (void *_tao_void_pointer)
{
  VBany *_tao_tmp_pointer =
    static_cast<VBany *> (_tao_void_pointer);
  ::CORBA::remove_ref (_tao_tmp_pointer);
}

// TAO extension - the virtual _type method.
::CORBA::TypeCode_ptr VBany::_tao_type (void) const
{
  return ::_tc_VBany;
}

::CORBA::Boolean
VBany::_tao_unmarshal (
    TAO_InputCDR &strm,
    VBany *&vb_object
  )
{
  ::CORBA::Boolean is_null_object = false;
  ::CORBA::Boolean is_indirected = false;
  TAO_InputCDR indrected_strm ((size_t) 0);
  if ( ::CORBA::ValueBase::_tao_validate_box_type (
        strm, indrected_strm,
        VBany::_tao_obv_static_repository_id (),
        is_null_object, is_indirected
      ) == false)
    {
      return false;
    }

  vb_object = 0;
  if (is_null_object)
    {
      return true;
    }

  if (is_indirected)
    {
      return VBany::_tao_unmarshal (
             indrected_strm, vb_object);
    }

  ACE_NEW_RETURN (
    vb_object,
    VBany,
    false);

  return (strm >> vb_object->_pd_value.inout ());
}

::CORBA::Boolean
VBany::_tao_unmarshal_v (TAO_InputCDR &)
{
  return true;
}



// TAO_IDL - Generated from
// be/be_visitor_valuebox/valuebox_cs.cpp:745

VBany::~VBany (void)
{
}

::CORBA::Boolean
VBany::_tao_marshal_v (TAO_OutputCDR & strm) const
{
  return (strm << this->_pd_value.in ());
}



// TAO_IDL - Generated from
// be/be_visitor_typecode/alias_typecode.cpp:49

static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_TDany (
    ::CORBA::tk_alias,
    "IDL:TDany:1.0",
    "TDany",
    &CORBA::_tc_any);

::CORBA::TypeCode_ptr const _tc_TDany =
  &_tao_tc_TDany;

// TAO_IDL - Generated from
// be/be_visitor_typecode/alias_typecode.cpp:49

static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_VBTDany (
    ::CORBA::tk_value_box,
    "IDL:VBTDany:1.0",
    "VBTDany",
    &CORBA::_tc_any);

::CORBA::TypeCode_ptr const _tc_VBTDany =
  &_tao_tc_VBTDany;

// TAO_IDL - Generated from
// be/be_visitor_valuebox/valuebox_cs.cpp:52

void
TAO::Value_Traits<VBTDany>::add_ref (
    VBTDany * p
  )
{
  ::CORBA::add_ref (p);
}

void
TAO::Value_Traits<VBTDany>::remove_ref (
    VBTDany * p
  )
{
  ::CORBA::remove_ref (p);
}

void
TAO::Value_Traits<VBTDany>::release (
    VBTDany * p
  )
{
  ::CORBA::remove_ref (p);
}

VBTDany *
VBTDany::_downcast ( ::CORBA::ValueBase *v)
{
  return dynamic_cast< ::VBTDany * > (v);
}

::CORBA::ValueBase *
VBTDany::_copy_value (void)
{
  ::CORBA::ValueBase *result = 0;
  ACE_NEW_RETURN (
    result,
    VBTDany (*this),
    0);

  return result;
}

const char *
VBTDany::_tao_obv_repository_id (void) const
{
  return this->_tao_obv_static_repository_id ();
}

void
VBTDany::_tao_obv_truncatable_repo_ids (Repository_Id_List& ids) const
{
  ids.push_back (this->_tao_obv_static_repository_id ());
}

::CORBA::Boolean
VBTDany::_tao_match_formal_type (ptrdiff_t ) const
{
  return true;
}

void
VBTDany::_tao_any_destructor (void *_tao_void_pointer)
{
  VBTDany *_tao_tmp_pointer =
    static_cast<VBTDany *> (_tao_void_pointer);
  ::CORBA::remove_ref (_tao_tmp_pointer);
}

// TAO extension - the virtual _type method.
::CORBA::TypeCode_ptr VBTDany::_tao_type (void) const
{
  return ::_tc_VBTDany;
}

::CORBA::Boolean
VBTDany::_tao_unmarshal (
    TAO_InputCDR &strm,
    VBTDany *&vb_object
  )
{
  ::CORBA::Boolean is_null_object = false;
  ::CORBA::Boolean is_indirected = false;
  TAO_InputCDR indrected_strm ((size_t) 0);
  if ( ::CORBA::ValueBase::_tao_validate_box_type (
        strm, indrected_strm,
        VBTDany::_tao_obv_static_repository_id (),
        is_null_object, is_indirected
      ) == false)
    {
      return false;
    }

  vb_object = 0;
  if (is_null_object)
    {
      return true;
    }

  if (is_indirected)
    {
      return VBTDany::_tao_unmarshal (
             indrected_strm, vb_object);
    }

  ACE_NEW_RETURN (
    vb_object,
    VBTDany,
    false);

  return (strm >> vb_object->_pd_value.inout ());
}

::CORBA::Boolean
VBTDany::_tao_unmarshal_v (TAO_InputCDR &)
{
  return true;
}



// TAO_IDL - Generated from
// be/be_visitor_valuebox/valuebox_cs.cpp:745

VBTDany::~VBTDany (void)
{
}

::CORBA::Boolean
VBTDany::_tao_marshal_v (TAO_OutputCDR & strm) const
{
  return (strm << this->_pd_value.in ());
}



// TAO_IDL - Generated from
// be/be_visitor_typecode/alias_typecode.cpp:49

static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_vb_basic_M_VBlong (
    ::CORBA::tk_value_box,
    "IDL:vb_basic/M_VBlong:1.0",
    "M_VBlong",
    &CORBA::_tc_long);


namespace vb_basic
{
  ::CORBA::TypeCode_ptr const _tc_M_VBlong =
    &_tao_tc_vb_basic_M_VBlong;
}

// TAO_IDL - Generated from
// be/be_visitor_valuebox/valuebox_cs.cpp:52

void
TAO::Value_Traits<vb_basic::M_VBlong>::add_ref (
    vb_basic::M_VBlong * p
  )
{
  ::CORBA::add_ref (p);
}

void
TAO::Value_Traits<vb_basic::M_VBlong>::remove_ref (
    vb_basic::M_VBlong * p
  )
{
  ::CORBA::remove_ref (p);
}

void
TAO::Value_Traits<vb_basic::M_VBlong>::release (
    vb_basic::M_VBlong * p
  )
{
  ::CORBA::remove_ref (p);
}

vb_basic::M_VBlong *
vb_basic::M_VBlong::_downcast ( ::CORBA::ValueBase *v)
{
  return dynamic_cast< ::vb_basic::M_VBlong * > (v);
}

::CORBA::ValueBase *
vb_basic::M_VBlong::_copy_value (void)
{
  ::CORBA::ValueBase *result = 0;
  ACE_NEW_RETURN (
    result,
    M_VBlong (*this),
    0);

  return result;
}

const char *
vb_basic::M_VBlong::_tao_obv_repository_id (void) const
{
  return this->_tao_obv_static_repository_id ();
}

void
vb_basic::M_VBlong::_tao_obv_truncatable_repo_ids (Repository_Id_List& ids) const
{
  ids.push_back (this->_tao_obv_static_repository_id ());
}

::CORBA::Boolean
vb_basic::M_VBlong::_tao_match_formal_type (ptrdiff_t ) const
{
  return true;
}

void
vb_basic::M_VBlong::_tao_any_destructor (void *_tao_void_pointer)
{
  M_VBlong *_tao_tmp_pointer =
    static_cast<M_VBlong *> (_tao_void_pointer);
  ::CORBA::remove_ref (_tao_tmp_pointer);
}

// TAO extension - the virtual _type method.
::CORBA::TypeCode_ptr vb_basic::M_VBlong::_tao_type (void) const
{
  return ::vb_basic::_tc_M_VBlong;
}

::CORBA::Boolean
vb_basic::M_VBlong::_tao_unmarshal (
    TAO_InputCDR &strm,
    M_VBlong *&vb_object
  )
{
  ::CORBA::Boolean is_null_object = false;
  ::CORBA::Boolean is_indirected = false;
  TAO_InputCDR indrected_strm ((size_t) 0);
  if ( ::CORBA::ValueBase::_tao_validate_box_type (
        strm, indrected_strm,
        M_VBlong::_tao_obv_static_repository_id (),
        is_null_object, is_indirected
      ) == false)
    {
      return false;
    }

  vb_object = 0;
  if (is_null_object)
    {
      return true;
    }

  if (is_indirected)
    {
      return vb_basic::M_VBlong::_tao_unmarshal (
             indrected_strm, vb_object);
    }

  ACE_NEW_RETURN (
    vb_object,
    M_VBlong,
    false);

  return (strm >> vb_object->_pd_value);
}

::CORBA::Boolean
vb_basic::M_VBlong::_tao_unmarshal_v (TAO_InputCDR &)
{
  return true;
}



// TAO_IDL - Generated from
// be/be_visitor_valuebox/valuebox_cs.cpp:745

vb_basic::M_VBlong::~M_VBlong (void)
{
}

::CORBA::Boolean
vb_basic::M_VBlong::_tao_marshal_v (TAO_OutputCDR & strm) const
{
  return (strm << this->_pd_value);
}



// TAO_IDL - Generated from
// be/be_visitor_interface/interface_cs.cpp:48

// Traits specializations for vb_basic::Test.

vb_basic::Test_ptr
TAO::Objref_Traits<vb_basic::Test>::duplicate (
    vb_basic::Test_ptr p)
{
  return vb_basic::Test::_duplicate (p);
}

void
TAO::Objref_Traits<vb_basic::Test>::release (
    vb_basic::Test_ptr p)
{
  ::CORBA::release (p);
}

vb_basic::Test_ptr
TAO::Objref_Traits<vb_basic::Test>::nil (void)
{
  return vb_basic::Test::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<vb_basic::Test>::marshal (
    const vb_basic::Test_ptr p,
    TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:88

::vb_basic::M_VBlong *
vb_basic::Test::basic_op1 (
  ::vb_basic::M_VBlong * p1,
  ::vb_basic::M_VBlong *& p2,
  ::vb_basic::M_VBlong_out p3)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }

  TAO::Arg_Traits< ::vb_basic::M_VBlong>::ret_val _tao_retval;
  TAO::Arg_Traits< ::vb_basic::M_VBlong>::in_arg_val _tao_p1 (p1);
  TAO::Arg_Traits< ::vb_basic::M_VBlong>::inout_arg_val _tao_p2 (p2);
  TAO::Arg_Traits< ::vb_basic::M_VBlong>::out_arg_val _tao_p3 (p3);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_p1,
      &_tao_p2,
      &_tao_p3
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      4,
      "basic_op1",
      9,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY

    );

  _tao_call.invoke (0, 0);

  return _tao_retval.retn ();
}

vb_basic::Test::Test (void)
{
}

vb_basic::Test::~Test (void)
{
}

void
vb_basic::Test::_tao_any_destructor (void *_tao_void_pointer)
{
  Test *_tao_tmp_pointer =
    static_cast<Test *> (_tao_void_pointer);
  ::CORBA::release (_tao_tmp_pointer);
}

vb_basic::Test_ptr
vb_basic::Test::_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return
    TAO::Narrow_Utils<Test>::narrow (
        _tao_objref,
        "IDL:vb_basic/Test:1.0");
}

vb_basic::Test_ptr
vb_basic::Test::_unchecked_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return
    TAO::Narrow_Utils<Test>::unchecked_narrow (
        _tao_objref);
}

vb_basic::Test_ptr
vb_basic::Test::_nil (void)
{
  return 0;
}

vb_basic::Test_ptr
vb_basic::Test::_duplicate (Test_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  return obj;
}

void
vb_basic::Test::_tao_release (Test_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
vb_basic::Test::_is_a (const char *value)
{
  if (
      ACE_OS::strcmp (
          value,
          "IDL:vb_basic/Test:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        ) == 0
    )
    {
      return true; // success using local knowledge
    }
  else
    {
      return this->::CORBA::Object::_is_a (value);
    }
}

const char* vb_basic::Test::_interface_repository_id (void) const
{
  return "IDL:vb_basic/Test:1.0";
}

::CORBA::Boolean
vb_basic::Test::marshal (TAO_OutputCDR &cdr)
{
  return (cdr << this);
}

// TAO_IDL - Generated from
// be/be_visitor_typecode/objref_typecode.cpp:70

static TAO::TypeCode::Objref<char const *,
                             TAO::Null_RefCount_Policy>
  _tao_tc_vb_basic_Test (
    ::CORBA::tk_objref,
    "IDL:vb_basic/Test:1.0",
    "Test");


namespace vb_basic
{
  ::CORBA::TypeCode_ptr const _tc_Test =
    &_tao_tc_vb_basic_Test;
}

// TAO_IDL - Generated from
// be/be_visitor_typecode/alias_typecode.cpp:49

static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_VBinterface (
    ::CORBA::tk_value_box,
    "IDL:VBinterface:1.0",
    "VBinterface",
    &vb_basic::_tc_Test);

::CORBA::TypeCode_ptr const _tc_VBinterface =
  &_tao_tc_VBinterface;

// TAO_IDL - Generated from
// be/be_visitor_valuebox/valuebox_cs.cpp:52

void
TAO::Value_Traits<VBinterface>::add_ref (
    VBinterface * p
  )
{
  ::CORBA::add_ref (p);
}

void
TAO::Value_Traits<VBinterface>::remove_ref (
    VBinterface * p
  )
{
  ::CORBA::remove_ref (p);
}

void
TAO::Value_Traits<VBinterface>::release (
    VBinterface * p
  )
{
  ::CORBA::remove_ref (p);
}

VBinterface *
VBinterface::_downcast ( ::CORBA::ValueBase *v)
{
  return dynamic_cast< ::VBinterface * > (v);
}

::CORBA::ValueBase *
VBinterface::_copy_value (void)
{
  ::CORBA::ValueBase *result = 0;
  ACE_NEW_RETURN (
    result,
    VBinterface (*this),
    0);

  return result;
}

const char *
VBinterface::_tao_obv_repository_id (void) const
{
  return this->_tao_obv_static_repository_id ();
}

void
VBinterface::_tao_obv_truncatable_repo_ids (Repository_Id_List& ids) const
{
  ids.push_back (this->_tao_obv_static_repository_id ());
}

::CORBA::Boolean
VBinterface::_tao_match_formal_type (ptrdiff_t ) const
{
  return true;
}

void
VBinterface::_tao_any_destructor (void *_tao_void_pointer)
{
  VBinterface *_tao_tmp_pointer =
    static_cast<VBinterface *> (_tao_void_pointer);
  ::CORBA::remove_ref (_tao_tmp_pointer);
}

// TAO extension - the virtual _type method.
::CORBA::TypeCode_ptr VBinterface::_tao_type (void) const
{
  return ::_tc_VBinterface;
}

::CORBA::Boolean
VBinterface::_tao_unmarshal (
    TAO_InputCDR &strm,
    VBinterface *&vb_object
  )
{
  ::CORBA::Boolean is_null_object = false;
  ::CORBA::Boolean is_indirected = false;
  TAO_InputCDR indrected_strm ((size_t) 0);
  if ( ::CORBA::ValueBase::_tao_validate_box_type (
        strm, indrected_strm,
        VBinterface::_tao_obv_static_repository_id (),
        is_null_object, is_indirected
      ) == false)
    {
      return false;
    }

  vb_object = 0;
  if (is_null_object)
    {
      return true;
    }

  if (is_indirected)
    {
      return VBinterface::_tao_unmarshal (
             indrected_strm, vb_object);
    }

  ACE_NEW_RETURN (
    vb_object,
    VBinterface,
    false);

  return (strm >> vb_object->_pd_value);
}

::CORBA::Boolean
VBinterface::_tao_unmarshal_v (TAO_InputCDR &)
{
  return true;
}



// TAO_IDL - Generated from
// be/be_visitor_valuebox/valuebox_cs.cpp:745

VBinterface::~VBinterface (void)
{
}

::CORBA::Boolean
VBinterface::_tao_marshal_v (TAO_OutputCDR & strm) const
{
  return (strm << this->_pd_value);
}



// TAO_IDL - Generated from
// be/be_visitor_enum/any_op_cs.cpp:35

TAO_BEGIN_VERSIONED_NAMESPACE_DECL


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

void operator<<= (
    ::CORBA::Any &_tao_any,
    Color _tao_elem
  )
{
  TAO::Any_Basic_Impl_T<Color>::insert (
      _tao_any,
      _tc_Color,
      _tao_elem
    );
}

::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    Color &_tao_elem
  )
{
  return
    TAO::Any_Basic_Impl_T<Color>::extract (
        _tao_any,
        _tc_Color,
        _tao_elem
      );
}
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_valuebox/any_op_cs.cpp:46
TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<VBshort>::to_value (
      ::CORBA::ValueBase *&_tao_elem
    ) const
  {
    ::CORBA::add_ref (this->value_);
    _tao_elem = this->value_;
    return true;
  }
}


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    VBshort *_tao_elem
  )
{
  ::CORBA::add_ref (_tao_elem);
  _tao_any <<= &_tao_elem;
}

// Non-copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    VBshort **_tao_elem
  )
{
  TAO::Any_Impl_T<VBshort>::insert (
      _tao_any,
      VBshort::_tao_any_destructor,
      _tc_VBshort,
      *_tao_elem
    );
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    VBshort *&_tao_elem
  )
{
  return
    TAO::Any_Impl_T<VBshort>::extract (
        _tao_any,
        VBshort::_tao_any_destructor,
        _tc_VBshort,
        _tao_elem
      );
}


TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_valuebox/any_op_cs.cpp:46
TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<VBlong>::to_value (
      ::CORBA::ValueBase *&_tao_elem
    ) const
  {
    ::CORBA::add_ref (this->value_);
    _tao_elem = this->value_;
    return true;
  }
}


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    VBlong *_tao_elem
  )
{
  ::CORBA::add_ref (_tao_elem);
  _tao_any <<= &_tao_elem;
}

// Non-copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    VBlong **_tao_elem
  )
{
  TAO::Any_Impl_T<VBlong>::insert (
      _tao_any,
      VBlong::_tao_any_destructor,
      _tc_VBlong,
      *_tao_elem
    );
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    VBlong *&_tao_elem
  )
{
  return
    TAO::Any_Impl_T<VBlong>::extract (
        _tao_any,
        VBlong::_tao_any_destructor,
        _tc_VBlong,
        _tao_elem
      );
}


TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_valuebox/any_op_cs.cpp:46
TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<VBlonglong>::to_value (
      ::CORBA::ValueBase *&_tao_elem
    ) const
  {
    ::CORBA::add_ref (this->value_);
    _tao_elem = this->value_;
    return true;
  }
}


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    VBlonglong *_tao_elem
  )
{
  ::CORBA::add_ref (_tao_elem);
  _tao_any <<= &_tao_elem;
}

// Non-copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    VBlonglong **_tao_elem
  )
{
  TAO::Any_Impl_T<VBlonglong>::insert (
      _tao_any,
      VBlonglong::_tao_any_destructor,
      _tc_VBlonglong,
      *_tao_elem
    );
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    VBlonglong *&_tao_elem
  )
{
  return
    TAO::Any_Impl_T<VBlonglong>::extract (
        _tao_any,
        VBlonglong::_tao_any_destructor,
        _tc_VBlonglong,
        _tao_elem
      );
}


TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_valuebox/any_op_cs.cpp:46
TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<VBushort>::to_value (
      ::CORBA::ValueBase *&_tao_elem
    ) const
  {
    ::CORBA::add_ref (this->value_);
    _tao_elem = this->value_;
    return true;
  }
}


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    VBushort *_tao_elem
  )
{
  ::CORBA::add_ref (_tao_elem);
  _tao_any <<= &_tao_elem;
}

// Non-copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    VBushort **_tao_elem
  )
{
  TAO::Any_Impl_T<VBushort>::insert (
      _tao_any,
      VBushort::_tao_any_destructor,
      _tc_VBushort,
      *_tao_elem
    );
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    VBushort *&_tao_elem
  )
{
  return
    TAO::Any_Impl_T<VBushort>::extract (
        _tao_any,
        VBushort::_tao_any_destructor,
        _tc_VBushort,
        _tao_elem
      );
}


TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_valuebox/any_op_cs.cpp:46
TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<VBulong>::to_value (
      ::CORBA::ValueBase *&_tao_elem
    ) const
  {
    ::CORBA::add_ref (this->value_);
    _tao_elem = this->value_;
    return true;
  }
}


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    VBulong *_tao_elem
  )
{
  ::CORBA::add_ref (_tao_elem);
  _tao_any <<= &_tao_elem;
}

// Non-copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    VBulong **_tao_elem
  )
{
  TAO::Any_Impl_T<VBulong>::insert (
      _tao_any,
      VBulong::_tao_any_destructor,
      _tc_VBulong,
      *_tao_elem
    );
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    VBulong *&_tao_elem
  )
{
  return
    TAO::Any_Impl_T<VBulong>::extract (
        _tao_any,
        VBulong::_tao_any_destructor,
        _tc_VBulong,
        _tao_elem
      );
}


TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_valuebox/any_op_cs.cpp:46
TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<VBulonglong>::to_value (
      ::CORBA::ValueBase *&_tao_elem
    ) const
  {
    ::CORBA::add_ref (this->value_);
    _tao_elem = this->value_;
    return true;
  }
}


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    VBulonglong *_tao_elem
  )
{
  ::CORBA::add_ref (_tao_elem);
  _tao_any <<= &_tao_elem;
}

// Non-copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    VBulonglong **_tao_elem
  )
{
  TAO::Any_Impl_T<VBulonglong>::insert (
      _tao_any,
      VBulonglong::_tao_any_destructor,
      _tc_VBulonglong,
      *_tao_elem
    );
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    VBulonglong *&_tao_elem
  )
{
  return
    TAO::Any_Impl_T<VBulonglong>::extract (
        _tao_any,
        VBulonglong::_tao_any_destructor,
        _tc_VBulonglong,
        _tao_elem
      );
}


TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_valuebox/any_op_cs.cpp:46
TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<VBchar>::to_value (
      ::CORBA::ValueBase *&_tao_elem
    ) const
  {
    ::CORBA::add_ref (this->value_);
    _tao_elem = this->value_;
    return true;
  }
}


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    VBchar *_tao_elem
  )
{
  ::CORBA::add_ref (_tao_elem);
  _tao_any <<= &_tao_elem;
}

// Non-copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    VBchar **_tao_elem
  )
{
  TAO::Any_Impl_T<VBchar>::insert (
      _tao_any,
      VBchar::_tao_any_destructor,
      _tc_VBchar,
      *_tao_elem
    );
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    VBchar *&_tao_elem
  )
{
  return
    TAO::Any_Impl_T<VBchar>::extract (
        _tao_any,
        VBchar::_tao_any_destructor,
        _tc_VBchar,
        _tao_elem
      );
}


TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_valuebox/any_op_cs.cpp:46
TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<VBwchar>::to_value (
      ::CORBA::ValueBase *&_tao_elem
    ) const
  {
    ::CORBA::add_ref (this->value_);
    _tao_elem = this->value_;
    return true;
  }
}


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    VBwchar *_tao_elem
  )
{
  ::CORBA::add_ref (_tao_elem);
  _tao_any <<= &_tao_elem;
}

// Non-copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    VBwchar **_tao_elem
  )
{
  TAO::Any_Impl_T<VBwchar>::insert (
      _tao_any,
      VBwchar::_tao_any_destructor,
      _tc_VBwchar,
      *_tao_elem
    );
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    VBwchar *&_tao_elem
  )
{
  return
    TAO::Any_Impl_T<VBwchar>::extract (
        _tao_any,
        VBwchar::_tao_any_destructor,
        _tc_VBwchar,
        _tao_elem
      );
}


TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_valuebox/any_op_cs.cpp:46
TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<VBboolean>::to_value (
      ::CORBA::ValueBase *&_tao_elem
    ) const
  {
    ::CORBA::add_ref (this->value_);
    _tao_elem = this->value_;
    return true;
  }
}


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    VBboolean *_tao_elem
  )
{
  ::CORBA::add_ref (_tao_elem);
  _tao_any <<= &_tao_elem;
}

// Non-copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    VBboolean **_tao_elem
  )
{
  TAO::Any_Impl_T<VBboolean>::insert (
      _tao_any,
      VBboolean::_tao_any_destructor,
      _tc_VBboolean,
      *_tao_elem
    );
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    VBboolean *&_tao_elem
  )
{
  return
    TAO::Any_Impl_T<VBboolean>::extract (
        _tao_any,
        VBboolean::_tao_any_destructor,
        _tc_VBboolean,
        _tao_elem
      );
}


TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_valuebox/any_op_cs.cpp:46
TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<VBoctet>::to_value (
      ::CORBA::ValueBase *&_tao_elem
    ) const
  {
    ::CORBA::add_ref (this->value_);
    _tao_elem = this->value_;
    return true;
  }
}


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    VBoctet *_tao_elem
  )
{
  ::CORBA::add_ref (_tao_elem);
  _tao_any <<= &_tao_elem;
}

// Non-copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    VBoctet **_tao_elem
  )
{
  TAO::Any_Impl_T<VBoctet>::insert (
      _tao_any,
      VBoctet::_tao_any_destructor,
      _tc_VBoctet,
      *_tao_elem
    );
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    VBoctet *&_tao_elem
  )
{
  return
    TAO::Any_Impl_T<VBoctet>::extract (
        _tao_any,
        VBoctet::_tao_any_destructor,
        _tc_VBoctet,
        _tao_elem
      );
}


TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_valuebox/any_op_cs.cpp:46
TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<VBfloat>::to_value (
      ::CORBA::ValueBase *&_tao_elem
    ) const
  {
    ::CORBA::add_ref (this->value_);
    _tao_elem = this->value_;
    return true;
  }
}


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    VBfloat *_tao_elem
  )
{
  ::CORBA::add_ref (_tao_elem);
  _tao_any <<= &_tao_elem;
}

// Non-copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    VBfloat **_tao_elem
  )
{
  TAO::Any_Impl_T<VBfloat>::insert (
      _tao_any,
      VBfloat::_tao_any_destructor,
      _tc_VBfloat,
      *_tao_elem
    );
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    VBfloat *&_tao_elem
  )
{
  return
    TAO::Any_Impl_T<VBfloat>::extract (
        _tao_any,
        VBfloat::_tao_any_destructor,
        _tc_VBfloat,
        _tao_elem
      );
}


TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_valuebox/any_op_cs.cpp:46
TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<VBdouble>::to_value (
      ::CORBA::ValueBase *&_tao_elem
    ) const
  {
    ::CORBA::add_ref (this->value_);
    _tao_elem = this->value_;
    return true;
  }
}


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    VBdouble *_tao_elem
  )
{
  ::CORBA::add_ref (_tao_elem);
  _tao_any <<= &_tao_elem;
}

// Non-copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    VBdouble **_tao_elem
  )
{
  TAO::Any_Impl_T<VBdouble>::insert (
      _tao_any,
      VBdouble::_tao_any_destructor,
      _tc_VBdouble,
      *_tao_elem
    );
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    VBdouble *&_tao_elem
  )
{
  return
    TAO::Any_Impl_T<VBdouble>::extract (
        _tao_any,
        VBdouble::_tao_any_destructor,
        _tc_VBdouble,
        _tao_elem
      );
}


TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_valuebox/any_op_cs.cpp:46
TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<VBlongdouble>::to_value (
      ::CORBA::ValueBase *&_tao_elem
    ) const
  {
    ::CORBA::add_ref (this->value_);
    _tao_elem = this->value_;
    return true;
  }
}


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    VBlongdouble *_tao_elem
  )
{
  ::CORBA::add_ref (_tao_elem);
  _tao_any <<= &_tao_elem;
}

// Non-copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    VBlongdouble **_tao_elem
  )
{
  TAO::Any_Impl_T<VBlongdouble>::insert (
      _tao_any,
      VBlongdouble::_tao_any_destructor,
      _tc_VBlongdouble,
      *_tao_elem
    );
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    VBlongdouble *&_tao_elem
  )
{
  return
    TAO::Any_Impl_T<VBlongdouble>::extract (
        _tao_any,
        VBlongdouble::_tao_any_destructor,
        _tc_VBlongdouble,
        _tao_elem
      );
}


TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_valuebox/any_op_cs.cpp:46
TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<VBenum>::to_value (
      ::CORBA::ValueBase *&_tao_elem
    ) const
  {
    ::CORBA::add_ref (this->value_);
    _tao_elem = this->value_;
    return true;
  }
}


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    VBenum *_tao_elem
  )
{
  ::CORBA::add_ref (_tao_elem);
  _tao_any <<= &_tao_elem;
}

// Non-copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    VBenum **_tao_elem
  )
{
  TAO::Any_Impl_T<VBenum>::insert (
      _tao_any,
      VBenum::_tao_any_destructor,
      _tc_VBenum,
      *_tao_elem
    );
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    VBenum *&_tao_elem
  )
{
  return
    TAO::Any_Impl_T<VBenum>::extract (
        _tao_any,
        VBenum::_tao_any_destructor,
        _tc_VBenum,
        _tao_elem
      );
}


TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_valuebox/any_op_cs.cpp:46
TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<VBTDshort>::to_value (
      ::CORBA::ValueBase *&_tao_elem
    ) const
  {
    ::CORBA::add_ref (this->value_);
    _tao_elem = this->value_;
    return true;
  }
}


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    VBTDshort *_tao_elem
  )
{
  ::CORBA::add_ref (_tao_elem);
  _tao_any <<= &_tao_elem;
}

// Non-copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    VBTDshort **_tao_elem
  )
{
  TAO::Any_Impl_T<VBTDshort>::insert (
      _tao_any,
      VBTDshort::_tao_any_destructor,
      _tc_VBTDshort,
      *_tao_elem
    );
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    VBTDshort *&_tao_elem
  )
{
  return
    TAO::Any_Impl_T<VBTDshort>::extract (
        _tao_any,
        VBTDshort::_tao_any_destructor,
        _tc_VBTDshort,
        _tao_elem
      );
}


TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_valuebox/any_op_cs.cpp:46
TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<VBTDlong>::to_value (
      ::CORBA::ValueBase *&_tao_elem
    ) const
  {
    ::CORBA::add_ref (this->value_);
    _tao_elem = this->value_;
    return true;
  }
}


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    VBTDlong *_tao_elem
  )
{
  ::CORBA::add_ref (_tao_elem);
  _tao_any <<= &_tao_elem;
}

// Non-copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    VBTDlong **_tao_elem
  )
{
  TAO::Any_Impl_T<VBTDlong>::insert (
      _tao_any,
      VBTDlong::_tao_any_destructor,
      _tc_VBTDlong,
      *_tao_elem
    );
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    VBTDlong *&_tao_elem
  )
{
  return
    TAO::Any_Impl_T<VBTDlong>::extract (
        _tao_any,
        VBTDlong::_tao_any_destructor,
        _tc_VBTDlong,
        _tao_elem
      );
}


TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_valuebox/any_op_cs.cpp:46
TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<VBTDlonglong>::to_value (
      ::CORBA::ValueBase *&_tao_elem
    ) const
  {
    ::CORBA::add_ref (this->value_);
    _tao_elem = this->value_;
    return true;
  }
}


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    VBTDlonglong *_tao_elem
  )
{
  ::CORBA::add_ref (_tao_elem);
  _tao_any <<= &_tao_elem;
}

// Non-copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    VBTDlonglong **_tao_elem
  )
{
  TAO::Any_Impl_T<VBTDlonglong>::insert (
      _tao_any,
      VBTDlonglong::_tao_any_destructor,
      _tc_VBTDlonglong,
      *_tao_elem
    );
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    VBTDlonglong *&_tao_elem
  )
{
  return
    TAO::Any_Impl_T<VBTDlonglong>::extract (
        _tao_any,
        VBTDlonglong::_tao_any_destructor,
        _tc_VBTDlonglong,
        _tao_elem
      );
}


TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_valuebox/any_op_cs.cpp:46
TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<VBTDushort>::to_value (
      ::CORBA::ValueBase *&_tao_elem
    ) const
  {
    ::CORBA::add_ref (this->value_);
    _tao_elem = this->value_;
    return true;
  }
}


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    VBTDushort *_tao_elem
  )
{
  ::CORBA::add_ref (_tao_elem);
  _tao_any <<= &_tao_elem;
}

// Non-copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    VBTDushort **_tao_elem
  )
{
  TAO::Any_Impl_T<VBTDushort>::insert (
      _tao_any,
      VBTDushort::_tao_any_destructor,
      _tc_VBTDushort,
      *_tao_elem
    );
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    VBTDushort *&_tao_elem
  )
{
  return
    TAO::Any_Impl_T<VBTDushort>::extract (
        _tao_any,
        VBTDushort::_tao_any_destructor,
        _tc_VBTDushort,
        _tao_elem
      );
}


TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_valuebox/any_op_cs.cpp:46
TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<VBTDulong>::to_value (
      ::CORBA::ValueBase *&_tao_elem
    ) const
  {
    ::CORBA::add_ref (this->value_);
    _tao_elem = this->value_;
    return true;
  }
}


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    VBTDulong *_tao_elem
  )
{
  ::CORBA::add_ref (_tao_elem);
  _tao_any <<= &_tao_elem;
}

// Non-copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    VBTDulong **_tao_elem
  )
{
  TAO::Any_Impl_T<VBTDulong>::insert (
      _tao_any,
      VBTDulong::_tao_any_destructor,
      _tc_VBTDulong,
      *_tao_elem
    );
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    VBTDulong *&_tao_elem
  )
{
  return
    TAO::Any_Impl_T<VBTDulong>::extract (
        _tao_any,
        VBTDulong::_tao_any_destructor,
        _tc_VBTDulong,
        _tao_elem
      );
}


TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_valuebox/any_op_cs.cpp:46
TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<VBTDulonglong>::to_value (
      ::CORBA::ValueBase *&_tao_elem
    ) const
  {
    ::CORBA::add_ref (this->value_);
    _tao_elem = this->value_;
    return true;
  }
}


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    VBTDulonglong *_tao_elem
  )
{
  ::CORBA::add_ref (_tao_elem);
  _tao_any <<= &_tao_elem;
}

// Non-copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    VBTDulonglong **_tao_elem
  )
{
  TAO::Any_Impl_T<VBTDulonglong>::insert (
      _tao_any,
      VBTDulonglong::_tao_any_destructor,
      _tc_VBTDulonglong,
      *_tao_elem
    );
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    VBTDulonglong *&_tao_elem
  )
{
  return
    TAO::Any_Impl_T<VBTDulonglong>::extract (
        _tao_any,
        VBTDulonglong::_tao_any_destructor,
        _tc_VBTDulonglong,
        _tao_elem
      );
}


TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_valuebox/any_op_cs.cpp:46
TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<VBTDchar>::to_value (
      ::CORBA::ValueBase *&_tao_elem
    ) const
  {
    ::CORBA::add_ref (this->value_);
    _tao_elem = this->value_;
    return true;
  }
}


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    VBTDchar *_tao_elem
  )
{
  ::CORBA::add_ref (_tao_elem);
  _tao_any <<= &_tao_elem;
}

// Non-copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    VBTDchar **_tao_elem
  )
{
  TAO::Any_Impl_T<VBTDchar>::insert (
      _tao_any,
      VBTDchar::_tao_any_destructor,
      _tc_VBTDchar,
      *_tao_elem
    );
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    VBTDchar *&_tao_elem
  )
{
  return
    TAO::Any_Impl_T<VBTDchar>::extract (
        _tao_any,
        VBTDchar::_tao_any_destructor,
        _tc_VBTDchar,
        _tao_elem
      );
}


TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_valuebox/any_op_cs.cpp:46
TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<VBTDwchar>::to_value (
      ::CORBA::ValueBase *&_tao_elem
    ) const
  {
    ::CORBA::add_ref (this->value_);
    _tao_elem = this->value_;
    return true;
  }
}


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    VBTDwchar *_tao_elem
  )
{
  ::CORBA::add_ref (_tao_elem);
  _tao_any <<= &_tao_elem;
}

// Non-copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    VBTDwchar **_tao_elem
  )
{
  TAO::Any_Impl_T<VBTDwchar>::insert (
      _tao_any,
      VBTDwchar::_tao_any_destructor,
      _tc_VBTDwchar,
      *_tao_elem
    );
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    VBTDwchar *&_tao_elem
  )
{
  return
    TAO::Any_Impl_T<VBTDwchar>::extract (
        _tao_any,
        VBTDwchar::_tao_any_destructor,
        _tc_VBTDwchar,
        _tao_elem
      );
}


TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_valuebox/any_op_cs.cpp:46
TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<VBTDboolean>::to_value (
      ::CORBA::ValueBase *&_tao_elem
    ) const
  {
    ::CORBA::add_ref (this->value_);
    _tao_elem = this->value_;
    return true;
  }
}


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    VBTDboolean *_tao_elem
  )
{
  ::CORBA::add_ref (_tao_elem);
  _tao_any <<= &_tao_elem;
}

// Non-copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    VBTDboolean **_tao_elem
  )
{
  TAO::Any_Impl_T<VBTDboolean>::insert (
      _tao_any,
      VBTDboolean::_tao_any_destructor,
      _tc_VBTDboolean,
      *_tao_elem
    );
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    VBTDboolean *&_tao_elem
  )
{
  return
    TAO::Any_Impl_T<VBTDboolean>::extract (
        _tao_any,
        VBTDboolean::_tao_any_destructor,
        _tc_VBTDboolean,
        _tao_elem
      );
}


TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_valuebox/any_op_cs.cpp:46
TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<VBTDoctet>::to_value (
      ::CORBA::ValueBase *&_tao_elem
    ) const
  {
    ::CORBA::add_ref (this->value_);
    _tao_elem = this->value_;
    return true;
  }
}


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    VBTDoctet *_tao_elem
  )
{
  ::CORBA::add_ref (_tao_elem);
  _tao_any <<= &_tao_elem;
}

// Non-copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    VBTDoctet **_tao_elem
  )
{
  TAO::Any_Impl_T<VBTDoctet>::insert (
      _tao_any,
      VBTDoctet::_tao_any_destructor,
      _tc_VBTDoctet,
      *_tao_elem
    );
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    VBTDoctet *&_tao_elem
  )
{
  return
    TAO::Any_Impl_T<VBTDoctet>::extract (
        _tao_any,
        VBTDoctet::_tao_any_destructor,
        _tc_VBTDoctet,
        _tao_elem
      );
}


TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_valuebox/any_op_cs.cpp:46
TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<VBTDfloat>::to_value (
      ::CORBA::ValueBase *&_tao_elem
    ) const
  {
    ::CORBA::add_ref (this->value_);
    _tao_elem = this->value_;
    return true;
  }
}


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    VBTDfloat *_tao_elem
  )
{
  ::CORBA::add_ref (_tao_elem);
  _tao_any <<= &_tao_elem;
}

// Non-copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    VBTDfloat **_tao_elem
  )
{
  TAO::Any_Impl_T<VBTDfloat>::insert (
      _tao_any,
      VBTDfloat::_tao_any_destructor,
      _tc_VBTDfloat,
      *_tao_elem
    );
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    VBTDfloat *&_tao_elem
  )
{
  return
    TAO::Any_Impl_T<VBTDfloat>::extract (
        _tao_any,
        VBTDfloat::_tao_any_destructor,
        _tc_VBTDfloat,
        _tao_elem
      );
}


TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_valuebox/any_op_cs.cpp:46
TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<VBTDdouble>::to_value (
      ::CORBA::ValueBase *&_tao_elem
    ) const
  {
    ::CORBA::add_ref (this->value_);
    _tao_elem = this->value_;
    return true;
  }
}


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    VBTDdouble *_tao_elem
  )
{
  ::CORBA::add_ref (_tao_elem);
  _tao_any <<= &_tao_elem;
}

// Non-copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    VBTDdouble **_tao_elem
  )
{
  TAO::Any_Impl_T<VBTDdouble>::insert (
      _tao_any,
      VBTDdouble::_tao_any_destructor,
      _tc_VBTDdouble,
      *_tao_elem
    );
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    VBTDdouble *&_tao_elem
  )
{
  return
    TAO::Any_Impl_T<VBTDdouble>::extract (
        _tao_any,
        VBTDdouble::_tao_any_destructor,
        _tc_VBTDdouble,
        _tao_elem
      );
}


TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_valuebox/any_op_cs.cpp:46
TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<VBTDlongdouble>::to_value (
      ::CORBA::ValueBase *&_tao_elem
    ) const
  {
    ::CORBA::add_ref (this->value_);
    _tao_elem = this->value_;
    return true;
  }
}


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    VBTDlongdouble *_tao_elem
  )
{
  ::CORBA::add_ref (_tao_elem);
  _tao_any <<= &_tao_elem;
}

// Non-copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    VBTDlongdouble **_tao_elem
  )
{
  TAO::Any_Impl_T<VBTDlongdouble>::insert (
      _tao_any,
      VBTDlongdouble::_tao_any_destructor,
      _tc_VBTDlongdouble,
      *_tao_elem
    );
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    VBTDlongdouble *&_tao_elem
  )
{
  return
    TAO::Any_Impl_T<VBTDlongdouble>::extract (
        _tao_any,
        VBTDlongdouble::_tao_any_destructor,
        _tc_VBTDlongdouble,
        _tao_elem
      );
}


TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_valuebox/any_op_cs.cpp:46
TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<VBTDenum>::to_value (
      ::CORBA::ValueBase *&_tao_elem
    ) const
  {
    ::CORBA::add_ref (this->value_);
    _tao_elem = this->value_;
    return true;
  }
}


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    VBTDenum *_tao_elem
  )
{
  ::CORBA::add_ref (_tao_elem);
  _tao_any <<= &_tao_elem;
}

// Non-copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    VBTDenum **_tao_elem
  )
{
  TAO::Any_Impl_T<VBTDenum>::insert (
      _tao_any,
      VBTDenum::_tao_any_destructor,
      _tc_VBTDenum,
      *_tao_elem
    );
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    VBTDenum *&_tao_elem
  )
{
  return
    TAO::Any_Impl_T<VBTDenum>::extract (
        _tao_any,
        VBTDenum::_tao_any_destructor,
        _tc_VBTDenum,
        _tao_elem
      );
}


TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_valuebox/any_op_cs.cpp:46
TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<VBany>::to_value (
      ::CORBA::ValueBase *&_tao_elem
    ) const
  {
    ::CORBA::add_ref (this->value_);
    _tao_elem = this->value_;
    return true;
  }
}


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    VBany *_tao_elem
  )
{
  ::CORBA::add_ref (_tao_elem);
  _tao_any <<= &_tao_elem;
}

// Non-copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    VBany **_tao_elem
  )
{
  TAO::Any_Impl_T<VBany>::insert (
      _tao_any,
      VBany::_tao_any_destructor,
      _tc_VBany,
      *_tao_elem
    );
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    VBany *&_tao_elem
  )
{
  return
    TAO::Any_Impl_T<VBany>::extract (
        _tao_any,
        VBany::_tao_any_destructor,
        _tc_VBany,
        _tao_elem
      );
}


TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_valuebox/any_op_cs.cpp:46
TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<VBTDany>::to_value (
      ::CORBA::ValueBase *&_tao_elem
    ) const
  {
    ::CORBA::add_ref (this->value_);
    _tao_elem = this->value_;
    return true;
  }
}


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    VBTDany *_tao_elem
  )
{
  ::CORBA::add_ref (_tao_elem);
  _tao_any <<= &_tao_elem;
}

// Non-copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    VBTDany **_tao_elem
  )
{
  TAO::Any_Impl_T<VBTDany>::insert (
      _tao_any,
      VBTDany::_tao_any_destructor,
      _tc_VBTDany,
      *_tao_elem
    );
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    VBTDany *&_tao_elem
  )
{
  return
    TAO::Any_Impl_T<VBTDany>::extract (
        _tao_any,
        VBTDany::_tao_any_destructor,
        _tc_VBTDany,
        _tao_elem
      );
}


TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_valuebox/any_op_cs.cpp:46
TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<vb_basic::M_VBlong>::to_value (
      ::CORBA::ValueBase *&_tao_elem
    ) const
  {
    ::CORBA::add_ref (this->value_);
    _tao_elem = this->value_;
    return true;
  }
}


TAO_END_VERSIONED_NAMESPACE_DECL



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace vb_basic
{
  // Copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      M_VBlong *_tao_elem)
  {
    ::CORBA::add_ref (_tao_elem);
    _tao_any <<= &_tao_elem;
  }

  // Non-copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      M_VBlong **_tao_elem)
  {
    TAO::Any_Impl_T<M_VBlong>::insert (
        _tao_any,
        M_VBlong::_tao_any_destructor,
        _tc_M_VBlong,
        *_tao_elem);
  }

  ::CORBA::Boolean
  operator>>= (
      const ::CORBA::Any &_tao_any,
      M_VBlong *&_tao_elem
    )
  {
    return
      TAO::Any_Impl_T<M_VBlong>::extract (
          _tao_any,
          M_VBlong::_tao_any_destructor,
          _tc_M_VBlong,
          _tao_elem
        );
  }


}

#else


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    vb_basic::M_VBlong *_tao_elem
  )
{
  ::CORBA::add_ref (_tao_elem);
  _tao_any <<= &_tao_elem;
}

// Non-copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    vb_basic::M_VBlong **_tao_elem
  )
{
  TAO::Any_Impl_T<vb_basic::M_VBlong>::insert (
      _tao_any,
      vb_basic::M_VBlong::_tao_any_destructor,
      vb_basic::_tc_M_VBlong,
      *_tao_elem
    );
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    vb_basic::M_VBlong *&_tao_elem
  )
{
  return
    TAO::Any_Impl_T<vb_basic::M_VBlong>::extract (
        _tao_any,
        vb_basic::M_VBlong::_tao_any_destructor,
        vb_basic::_tc_M_VBlong,
        _tao_elem
      );
}


TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_interface/any_op_cs.cpp:38
TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<vb_basic::Test>::to_object (
      ::CORBA::Object_ptr &_tao_elem) const
  {
    _tao_elem = ::CORBA::Object::_duplicate (this->value_);
    return true;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace vb_basic
{


  /// Copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      Test_ptr _tao_elem)
  {
    Test_ptr _tao_objptr =
      Test::_duplicate (_tao_elem);
    _tao_any <<= &_tao_objptr;
  }

  /// Non-copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      Test_ptr *_tao_elem)
  {
    TAO::Any_Impl_T<Test>::insert (
        _tao_any,
        Test::_tao_any_destructor,
        _tc_Test,
        *_tao_elem);
  }

  ::CORBA::Boolean
  operator>>= (
      const ::CORBA::Any &_tao_any,
      Test_ptr &_tao_elem)
  {
    return
      TAO::Any_Impl_T<Test>::extract (
          _tao_any,
          Test::_tao_any_destructor,
          _tc_Test,
          _tao_elem);
  }
}

#else

TAO_BEGIN_VERSIONED_NAMESPACE_DECL



/// Copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    vb_basic::Test_ptr _tao_elem)
{
  vb_basic::Test_ptr _tao_objptr =
    vb_basic::Test::_duplicate (_tao_elem);
  _tao_any <<= &_tao_objptr;
}

/// Non-copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    vb_basic::Test_ptr *_tao_elem)
{
  TAO::Any_Impl_T<vb_basic::Test>::insert (
      _tao_any,
      vb_basic::Test::_tao_any_destructor,
      vb_basic::_tc_Test,
      *_tao_elem);
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    vb_basic::Test_ptr &_tao_elem)
{
  return
    TAO::Any_Impl_T<vb_basic::Test>::extract (
        _tao_any,
        vb_basic::Test::_tao_any_destructor,
        vb_basic::_tc_Test,
        _tao_elem);
}

TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_valuebox/any_op_cs.cpp:46
TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<VBinterface>::to_value (
      ::CORBA::ValueBase *&_tao_elem
    ) const
  {
    ::CORBA::add_ref (this->value_);
    _tao_elem = this->value_;
    return true;
  }
}


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    VBinterface *_tao_elem
  )
{
  ::CORBA::add_ref (_tao_elem);
  _tao_any <<= &_tao_elem;
}

// Non-copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    VBinterface **_tao_elem
  )
{
  TAO::Any_Impl_T<VBinterface>::insert (
      _tao_any,
      VBinterface::_tao_any_destructor,
      _tc_VBinterface,
      *_tao_elem
    );
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    VBinterface *&_tao_elem
  )
{
  return
    TAO::Any_Impl_T<VBinterface>::extract (
        _tao_any,
        VBinterface::_tao_any_destructor,
        _tc_VBinterface,
        _tao_elem
      );
}


TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_enum/cdr_op_cs.cpp:34


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (TAO_OutputCDR &strm, Color _tao_enumerator)
{
  return strm << static_cast< ::CORBA::ULong> (_tao_enumerator);
}

::CORBA::Boolean operator>> (TAO_InputCDR &strm, Color & _tao_enumerator)
{
  ::CORBA::ULong _tao_temp = 0;
  ::CORBA::Boolean const _tao_success = strm >> _tao_temp;

  if (_tao_success)
    {
      _tao_enumerator = static_cast<Color> (_tao_temp);
    }

  return _tao_success;
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_valuebox/cdr_op_cs.cpp:41


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean
operator<< (
    TAO_OutputCDR &strm,
    const VBshort *_tao_valuebox
  )
{
  return
    ::CORBA::ValueBase::_tao_marshal (
        strm,
        _tao_valuebox,
        reinterpret_cast<ptrdiff_t> (&VBshort::_downcast)
      );
}

::CORBA::Boolean
operator>> (
    TAO_InputCDR &strm,
    VBshort *&_tao_valuebox
  )
{
  return VBshort::_tao_unmarshal (strm, _tao_valuebox);
}


TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_valuebox/cdr_op_cs.cpp:41


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean
operator<< (
    TAO_OutputCDR &strm,
    const VBlong *_tao_valuebox
  )
{
  return
    ::CORBA::ValueBase::_tao_marshal (
        strm,
        _tao_valuebox,
        reinterpret_cast<ptrdiff_t> (&VBlong::_downcast)
      );
}

::CORBA::Boolean
operator>> (
    TAO_InputCDR &strm,
    VBlong *&_tao_valuebox
  )
{
  return VBlong::_tao_unmarshal (strm, _tao_valuebox);
}


TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_valuebox/cdr_op_cs.cpp:41


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean
operator<< (
    TAO_OutputCDR &strm,
    const VBlonglong *_tao_valuebox
  )
{
  return
    ::CORBA::ValueBase::_tao_marshal (
        strm,
        _tao_valuebox,
        reinterpret_cast<ptrdiff_t> (&VBlonglong::_downcast)
      );
}

::CORBA::Boolean
operator>> (
    TAO_InputCDR &strm,
    VBlonglong *&_tao_valuebox
  )
{
  return VBlonglong::_tao_unmarshal (strm, _tao_valuebox);
}


TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_valuebox/cdr_op_cs.cpp:41


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean
operator<< (
    TAO_OutputCDR &strm,
    const VBushort *_tao_valuebox
  )
{
  return
    ::CORBA::ValueBase::_tao_marshal (
        strm,
        _tao_valuebox,
        reinterpret_cast<ptrdiff_t> (&VBushort::_downcast)
      );
}

::CORBA::Boolean
operator>> (
    TAO_InputCDR &strm,
    VBushort *&_tao_valuebox
  )
{
  return VBushort::_tao_unmarshal (strm, _tao_valuebox);
}


TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_valuebox/cdr_op_cs.cpp:41


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean
operator<< (
    TAO_OutputCDR &strm,
    const VBulong *_tao_valuebox
  )
{
  return
    ::CORBA::ValueBase::_tao_marshal (
        strm,
        _tao_valuebox,
        reinterpret_cast<ptrdiff_t> (&VBulong::_downcast)
      );
}

::CORBA::Boolean
operator>> (
    TAO_InputCDR &strm,
    VBulong *&_tao_valuebox
  )
{
  return VBulong::_tao_unmarshal (strm, _tao_valuebox);
}


TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_valuebox/cdr_op_cs.cpp:41


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean
operator<< (
    TAO_OutputCDR &strm,
    const VBulonglong *_tao_valuebox
  )
{
  return
    ::CORBA::ValueBase::_tao_marshal (
        strm,
        _tao_valuebox,
        reinterpret_cast<ptrdiff_t> (&VBulonglong::_downcast)
      );
}

::CORBA::Boolean
operator>> (
    TAO_InputCDR &strm,
    VBulonglong *&_tao_valuebox
  )
{
  return VBulonglong::_tao_unmarshal (strm, _tao_valuebox);
}


TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_valuebox/cdr_op_cs.cpp:41


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean
operator<< (
    TAO_OutputCDR &strm,
    const VBchar *_tao_valuebox
  )
{
  return
    ::CORBA::ValueBase::_tao_marshal (
        strm,
        _tao_valuebox,
        reinterpret_cast<ptrdiff_t> (&VBchar::_downcast)
      );
}

::CORBA::Boolean
operator>> (
    TAO_InputCDR &strm,
    VBchar *&_tao_valuebox
  )
{
  return VBchar::_tao_unmarshal (strm, _tao_valuebox);
}


TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_valuebox/cdr_op_cs.cpp:41


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean
operator<< (
    TAO_OutputCDR &strm,
    const VBwchar *_tao_valuebox
  )
{
  return
    ::CORBA::ValueBase::_tao_marshal (
        strm,
        _tao_valuebox,
        reinterpret_cast<ptrdiff_t> (&VBwchar::_downcast)
      );
}

::CORBA::Boolean
operator>> (
    TAO_InputCDR &strm,
    VBwchar *&_tao_valuebox
  )
{
  return VBwchar::_tao_unmarshal (strm, _tao_valuebox);
}


TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_valuebox/cdr_op_cs.cpp:41


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean
operator<< (
    TAO_OutputCDR &strm,
    const VBboolean *_tao_valuebox
  )
{
  return
    ::CORBA::ValueBase::_tao_marshal (
        strm,
        _tao_valuebox,
        reinterpret_cast<ptrdiff_t> (&VBboolean::_downcast)
      );
}

::CORBA::Boolean
operator>> (
    TAO_InputCDR &strm,
    VBboolean *&_tao_valuebox
  )
{
  return VBboolean::_tao_unmarshal (strm, _tao_valuebox);
}


TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_valuebox/cdr_op_cs.cpp:41


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean
operator<< (
    TAO_OutputCDR &strm,
    const VBoctet *_tao_valuebox
  )
{
  return
    ::CORBA::ValueBase::_tao_marshal (
        strm,
        _tao_valuebox,
        reinterpret_cast<ptrdiff_t> (&VBoctet::_downcast)
      );
}

::CORBA::Boolean
operator>> (
    TAO_InputCDR &strm,
    VBoctet *&_tao_valuebox
  )
{
  return VBoctet::_tao_unmarshal (strm, _tao_valuebox);
}


TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_valuebox/cdr_op_cs.cpp:41


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean
operator<< (
    TAO_OutputCDR &strm,
    const VBfloat *_tao_valuebox
  )
{
  return
    ::CORBA::ValueBase::_tao_marshal (
        strm,
        _tao_valuebox,
        reinterpret_cast<ptrdiff_t> (&VBfloat::_downcast)
      );
}

::CORBA::Boolean
operator>> (
    TAO_InputCDR &strm,
    VBfloat *&_tao_valuebox
  )
{
  return VBfloat::_tao_unmarshal (strm, _tao_valuebox);
}


TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_valuebox/cdr_op_cs.cpp:41


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean
operator<< (
    TAO_OutputCDR &strm,
    const VBdouble *_tao_valuebox
  )
{
  return
    ::CORBA::ValueBase::_tao_marshal (
        strm,
        _tao_valuebox,
        reinterpret_cast<ptrdiff_t> (&VBdouble::_downcast)
      );
}

::CORBA::Boolean
operator>> (
    TAO_InputCDR &strm,
    VBdouble *&_tao_valuebox
  )
{
  return VBdouble::_tao_unmarshal (strm, _tao_valuebox);
}


TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_valuebox/cdr_op_cs.cpp:41


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean
operator<< (
    TAO_OutputCDR &strm,
    const VBlongdouble *_tao_valuebox
  )
{
  return
    ::CORBA::ValueBase::_tao_marshal (
        strm,
        _tao_valuebox,
        reinterpret_cast<ptrdiff_t> (&VBlongdouble::_downcast)
      );
}

::CORBA::Boolean
operator>> (
    TAO_InputCDR &strm,
    VBlongdouble *&_tao_valuebox
  )
{
  return VBlongdouble::_tao_unmarshal (strm, _tao_valuebox);
}


TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_valuebox/cdr_op_cs.cpp:41


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean
operator<< (
    TAO_OutputCDR &strm,
    const VBenum *_tao_valuebox
  )
{
  return
    ::CORBA::ValueBase::_tao_marshal (
        strm,
        _tao_valuebox,
        reinterpret_cast<ptrdiff_t> (&VBenum::_downcast)
      );
}

::CORBA::Boolean
operator>> (
    TAO_InputCDR &strm,
    VBenum *&_tao_valuebox
  )
{
  return VBenum::_tao_unmarshal (strm, _tao_valuebox);
}


TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_valuebox/cdr_op_cs.cpp:41


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean
operator<< (
    TAO_OutputCDR &strm,
    const VBTDshort *_tao_valuebox
  )
{
  return
    ::CORBA::ValueBase::_tao_marshal (
        strm,
        _tao_valuebox,
        reinterpret_cast<ptrdiff_t> (&VBTDshort::_downcast)
      );
}

::CORBA::Boolean
operator>> (
    TAO_InputCDR &strm,
    VBTDshort *&_tao_valuebox
  )
{
  return VBTDshort::_tao_unmarshal (strm, _tao_valuebox);
}


TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_valuebox/cdr_op_cs.cpp:41


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean
operator<< (
    TAO_OutputCDR &strm,
    const VBTDlong *_tao_valuebox
  )
{
  return
    ::CORBA::ValueBase::_tao_marshal (
        strm,
        _tao_valuebox,
        reinterpret_cast<ptrdiff_t> (&VBTDlong::_downcast)
      );
}

::CORBA::Boolean
operator>> (
    TAO_InputCDR &strm,
    VBTDlong *&_tao_valuebox
  )
{
  return VBTDlong::_tao_unmarshal (strm, _tao_valuebox);
}


TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_valuebox/cdr_op_cs.cpp:41


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean
operator<< (
    TAO_OutputCDR &strm,
    const VBTDlonglong *_tao_valuebox
  )
{
  return
    ::CORBA::ValueBase::_tao_marshal (
        strm,
        _tao_valuebox,
        reinterpret_cast<ptrdiff_t> (&VBTDlonglong::_downcast)
      );
}

::CORBA::Boolean
operator>> (
    TAO_InputCDR &strm,
    VBTDlonglong *&_tao_valuebox
  )
{
  return VBTDlonglong::_tao_unmarshal (strm, _tao_valuebox);
}


TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_valuebox/cdr_op_cs.cpp:41


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean
operator<< (
    TAO_OutputCDR &strm,
    const VBTDushort *_tao_valuebox
  )
{
  return
    ::CORBA::ValueBase::_tao_marshal (
        strm,
        _tao_valuebox,
        reinterpret_cast<ptrdiff_t> (&VBTDushort::_downcast)
      );
}

::CORBA::Boolean
operator>> (
    TAO_InputCDR &strm,
    VBTDushort *&_tao_valuebox
  )
{
  return VBTDushort::_tao_unmarshal (strm, _tao_valuebox);
}


TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_valuebox/cdr_op_cs.cpp:41


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean
operator<< (
    TAO_OutputCDR &strm,
    const VBTDulong *_tao_valuebox
  )
{
  return
    ::CORBA::ValueBase::_tao_marshal (
        strm,
        _tao_valuebox,
        reinterpret_cast<ptrdiff_t> (&VBTDulong::_downcast)
      );
}

::CORBA::Boolean
operator>> (
    TAO_InputCDR &strm,
    VBTDulong *&_tao_valuebox
  )
{
  return VBTDulong::_tao_unmarshal (strm, _tao_valuebox);
}


TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_valuebox/cdr_op_cs.cpp:41


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean
operator<< (
    TAO_OutputCDR &strm,
    const VBTDulonglong *_tao_valuebox
  )
{
  return
    ::CORBA::ValueBase::_tao_marshal (
        strm,
        _tao_valuebox,
        reinterpret_cast<ptrdiff_t> (&VBTDulonglong::_downcast)
      );
}

::CORBA::Boolean
operator>> (
    TAO_InputCDR &strm,
    VBTDulonglong *&_tao_valuebox
  )
{
  return VBTDulonglong::_tao_unmarshal (strm, _tao_valuebox);
}


TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_valuebox/cdr_op_cs.cpp:41


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean
operator<< (
    TAO_OutputCDR &strm,
    const VBTDchar *_tao_valuebox
  )
{
  return
    ::CORBA::ValueBase::_tao_marshal (
        strm,
        _tao_valuebox,
        reinterpret_cast<ptrdiff_t> (&VBTDchar::_downcast)
      );
}

::CORBA::Boolean
operator>> (
    TAO_InputCDR &strm,
    VBTDchar *&_tao_valuebox
  )
{
  return VBTDchar::_tao_unmarshal (strm, _tao_valuebox);
}


TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_valuebox/cdr_op_cs.cpp:41


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean
operator<< (
    TAO_OutputCDR &strm,
    const VBTDwchar *_tao_valuebox
  )
{
  return
    ::CORBA::ValueBase::_tao_marshal (
        strm,
        _tao_valuebox,
        reinterpret_cast<ptrdiff_t> (&VBTDwchar::_downcast)
      );
}

::CORBA::Boolean
operator>> (
    TAO_InputCDR &strm,
    VBTDwchar *&_tao_valuebox
  )
{
  return VBTDwchar::_tao_unmarshal (strm, _tao_valuebox);
}


TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_valuebox/cdr_op_cs.cpp:41


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean
operator<< (
    TAO_OutputCDR &strm,
    const VBTDboolean *_tao_valuebox
  )
{
  return
    ::CORBA::ValueBase::_tao_marshal (
        strm,
        _tao_valuebox,
        reinterpret_cast<ptrdiff_t> (&VBTDboolean::_downcast)
      );
}

::CORBA::Boolean
operator>> (
    TAO_InputCDR &strm,
    VBTDboolean *&_tao_valuebox
  )
{
  return VBTDboolean::_tao_unmarshal (strm, _tao_valuebox);
}


TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_valuebox/cdr_op_cs.cpp:41


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean
operator<< (
    TAO_OutputCDR &strm,
    const VBTDoctet *_tao_valuebox
  )
{
  return
    ::CORBA::ValueBase::_tao_marshal (
        strm,
        _tao_valuebox,
        reinterpret_cast<ptrdiff_t> (&VBTDoctet::_downcast)
      );
}

::CORBA::Boolean
operator>> (
    TAO_InputCDR &strm,
    VBTDoctet *&_tao_valuebox
  )
{
  return VBTDoctet::_tao_unmarshal (strm, _tao_valuebox);
}


TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_valuebox/cdr_op_cs.cpp:41


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean
operator<< (
    TAO_OutputCDR &strm,
    const VBTDfloat *_tao_valuebox
  )
{
  return
    ::CORBA::ValueBase::_tao_marshal (
        strm,
        _tao_valuebox,
        reinterpret_cast<ptrdiff_t> (&VBTDfloat::_downcast)
      );
}

::CORBA::Boolean
operator>> (
    TAO_InputCDR &strm,
    VBTDfloat *&_tao_valuebox
  )
{
  return VBTDfloat::_tao_unmarshal (strm, _tao_valuebox);
}


TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_valuebox/cdr_op_cs.cpp:41


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean
operator<< (
    TAO_OutputCDR &strm,
    const VBTDdouble *_tao_valuebox
  )
{
  return
    ::CORBA::ValueBase::_tao_marshal (
        strm,
        _tao_valuebox,
        reinterpret_cast<ptrdiff_t> (&VBTDdouble::_downcast)
      );
}

::CORBA::Boolean
operator>> (
    TAO_InputCDR &strm,
    VBTDdouble *&_tao_valuebox
  )
{
  return VBTDdouble::_tao_unmarshal (strm, _tao_valuebox);
}


TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_valuebox/cdr_op_cs.cpp:41


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean
operator<< (
    TAO_OutputCDR &strm,
    const VBTDlongdouble *_tao_valuebox
  )
{
  return
    ::CORBA::ValueBase::_tao_marshal (
        strm,
        _tao_valuebox,
        reinterpret_cast<ptrdiff_t> (&VBTDlongdouble::_downcast)
      );
}

::CORBA::Boolean
operator>> (
    TAO_InputCDR &strm,
    VBTDlongdouble *&_tao_valuebox
  )
{
  return VBTDlongdouble::_tao_unmarshal (strm, _tao_valuebox);
}


TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_valuebox/cdr_op_cs.cpp:41


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean
operator<< (
    TAO_OutputCDR &strm,
    const VBTDenum *_tao_valuebox
  )
{
  return
    ::CORBA::ValueBase::_tao_marshal (
        strm,
        _tao_valuebox,
        reinterpret_cast<ptrdiff_t> (&VBTDenum::_downcast)
      );
}

::CORBA::Boolean
operator>> (
    TAO_InputCDR &strm,
    VBTDenum *&_tao_valuebox
  )
{
  return VBTDenum::_tao_unmarshal (strm, _tao_valuebox);
}


TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_valuebox/cdr_op_cs.cpp:41


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean
operator<< (
    TAO_OutputCDR &strm,
    const VBany *_tao_valuebox
  )
{
  return
    ::CORBA::ValueBase::_tao_marshal (
        strm,
        _tao_valuebox,
        reinterpret_cast<ptrdiff_t> (&VBany::_downcast)
      );
}

::CORBA::Boolean
operator>> (
    TAO_InputCDR &strm,
    VBany *&_tao_valuebox
  )
{
  return VBany::_tao_unmarshal (strm, _tao_valuebox);
}


TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_valuebox/cdr_op_cs.cpp:41


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean
operator<< (
    TAO_OutputCDR &strm,
    const VBTDany *_tao_valuebox
  )
{
  return
    ::CORBA::ValueBase::_tao_marshal (
        strm,
        _tao_valuebox,
        reinterpret_cast<ptrdiff_t> (&VBTDany::_downcast)
      );
}

::CORBA::Boolean
operator>> (
    TAO_InputCDR &strm,
    VBTDany *&_tao_valuebox
  )
{
  return VBTDany::_tao_unmarshal (strm, _tao_valuebox);
}


TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_valuebox/cdr_op_cs.cpp:41


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean
operator<< (
    TAO_OutputCDR &strm,
    const vb_basic::M_VBlong *_tao_valuebox
  )
{
  return
    ::CORBA::ValueBase::_tao_marshal (
        strm,
        _tao_valuebox,
        reinterpret_cast<ptrdiff_t> (&vb_basic::M_VBlong::_downcast)
      );
}

::CORBA::Boolean
operator>> (
    TAO_InputCDR &strm,
    vb_basic::M_VBlong *&_tao_valuebox
  )
{
  return vb_basic::M_VBlong::_tao_unmarshal (strm, _tao_valuebox);
}


TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_interface/cdr_op_cs.cpp:51

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const vb_basic::Test_ptr _tao_objref)
{
  ::CORBA::Object_ptr _tao_corba_obj = _tao_objref;
  return (strm << _tao_corba_obj);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    vb_basic::Test_ptr &_tao_objref)
{
  ::CORBA::Object_var obj;

  if (!(strm >> obj.inout ()))
    {
      return false;
    }

  typedef ::vb_basic::Test RHS_SCOPED_NAME;

  // Narrow to the right type.
  _tao_objref =
    TAO::Narrow_Utils<RHS_SCOPED_NAME>::unchecked_narrow (obj.in ());

  return true;
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_valuebox/cdr_op_cs.cpp:41


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean
operator<< (
    TAO_OutputCDR &strm,
    const VBinterface *_tao_valuebox
  )
{
  return
    ::CORBA::ValueBase::_tao_marshal (
        strm,
        _tao_valuebox,
        reinterpret_cast<ptrdiff_t> (&VBinterface::_downcast)
      );
}

::CORBA::Boolean
operator>> (
    TAO_InputCDR &strm,
    VBinterface *&_tao_valuebox
  )
{
  return VBinterface::_tao_unmarshal (strm, _tao_valuebox);
}


TAO_END_VERSIONED_NAMESPACE_DECL



