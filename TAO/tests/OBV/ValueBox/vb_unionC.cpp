// -*- C++ -*-
/**
 * Code generated by the The ACE ORB (TAO) IDL Compiler v2.4.1
 * TAO and the TAO IDL Compiler have been developed by:
 *       Center for Distributed Object Computing
 *       Washington University
 *       St. Louis, MO
 *       USA
 *       http://www.cs.wustl.edu/~schmidt/doc-center.html
 * and
 *       Distributed Object Computing Laboratory
 *       University of California at Irvine
 *       Irvine, CA
 *       USA
 * and
 *       Institute for Software Integrated Systems
 *       Vanderbilt University
 *       Nashville, TN
 *       USA
 *       http://www.isis.vanderbilt.edu/
 *
 * Information about TAO is available at:
 *     http://www.dre.vanderbilt.edu/~schmidt/TAO.html
 **/

// TAO_IDL - Generated from
// be/be_codegen.cpp:373


#include "vb_unionC.h"
#include "tao/AnyTypeCode/Null_RefCount_Policy.h"
#include "tao/AnyTypeCode/TypeCode_Constants.h"
#include "tao/AnyTypeCode/Alias_TypeCode_Static.h"
#include "tao/AnyTypeCode/String_TypeCode_Static.h"
#include "tao/AnyTypeCode/Struct_TypeCode_Static.h"
#include "tao/AnyTypeCode/TypeCode_Struct_Field.h"
#include "tao/AnyTypeCode/TypeCode_Case_T.h"
#include "tao/AnyTypeCode/Union_TypeCode_Static.h"
#include "tao/AnyTypeCode/Value_TypeCode_Static.h"
#include "tao/AnyTypeCode/TypeCode_Value_Field.h"
#include "tao/CDR.h"
#include "tao/Valuetype/ValueFactory.h"
#include "tao/CDR.h"
#include "tao/AnyTypeCode/Any.h"
#include "tao/AnyTypeCode/Any_Impl_T.h"
#include "tao/AnyTypeCode/Any_Dual_Impl_T.h"
#include "ace/OS_NS_string.h"

#if !defined (__ACE_INLINE__)
#include "vb_unionC.inl"
#endif /* !defined INLINE */

// TAO_IDL - Generated from
// be/be_visitor_union/union_cs.cpp:76

Fixed_Union1::Fixed_Union1 (void)
{
  ACE_OS::memset (&this->u_, 0, sizeof (this->u_));
  this->disc_ = -2147483647;
}

Fixed_Union1::Fixed_Union1 (const ::Fixed_Union1 &u)
{
  this->disc_ = u.disc_;
  switch (this->disc_)
  {
    case 1:
    {
      this->u_.m1_ = u.u_.m1_;
    }
    break;
    case 2:
    {
      this->u_.m2_ = u.u_.m2_;
    }
    break;
    default:
    break;
  }
}

Fixed_Union1::~Fixed_Union1 (void)
{
  // Finalize.
  this->_reset ();
}

void Fixed_Union1::_tao_any_destructor (void *_tao_void_pointer)
{
  Fixed_Union1 *tmp =
    static_cast<Fixed_Union1 *> (_tao_void_pointer);
  delete tmp;
}

Fixed_Union1 &
Fixed_Union1::operator= (const ::Fixed_Union1 &u)
{
  if (&u == this)
    {
      return *this;
    }

  this->_reset ();
  this->disc_ = u.disc_;

  switch (this->disc_)
  {
    case 1:
    {
      this->u_.m1_ = u.u_.m1_;
    }
    break;
    case 2:
    {
      this->u_.m2_ = u.u_.m2_;
    }
    break;
    default:
    break;
  }

  return *this;
}

/// Reset method to reset old values of a union.
void Fixed_Union1::_reset (void)
{
  switch (this->disc_)
  {

    case 1:

    break;

    case 2:

    break;

    default:
    break;
  }
}

// TAO_IDL - Generated from
// be/be_visitor_typecode/union_typecode.cpp:65

static TAO::TypeCode::Case_T<CORBA::Long, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_Fixed_Union1__0 (1, "m1", &CORBA::_tc_long);
static TAO::TypeCode::Case_T<CORBA::Long, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_Fixed_Union1__1 (2, "m2", &CORBA::_tc_short);

static TAO::TypeCode::Case<char const *, ::CORBA::TypeCode_ptr const *> const * const _tao_cases_Fixed_Union1[] =
  {
    &_tao_cases_Fixed_Union1__0,
    &_tao_cases_Fixed_Union1__1
  };

static TAO::TypeCode::Union<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::TypeCode::Case<char const *, ::CORBA::TypeCode_ptr const *> const * const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_Fixed_Union1 (
    "IDL:Fixed_Union1:1.0",
    "Fixed_Union1",
    &CORBA::_tc_long,
    _tao_cases_Fixed_Union1,
    sizeof (_tao_cases_Fixed_Union1)/sizeof (_tao_cases_Fixed_Union1[0]),
    -1);

::CORBA::TypeCode_ptr const _tc_Fixed_Union1 =
  &_tao_tc_Fixed_Union1;

// TAO_IDL - Generated from
// be/be_visitor_union/union_cs.cpp:76

Variable_Union1::Variable_Union1 (void)
{
  ACE_OS::memset (&this->u_, 0, sizeof (this->u_));
  this->disc_ = -2147483647;
}

Variable_Union1::Variable_Union1 (const ::Variable_Union1 &u)
{
  this->disc_ = u.disc_;
  switch (this->disc_)
  {
    case 1:
    {
      this->u_.m1_ = u.u_.m1_;
    }
    break;
    case 2:
    {
      this->u_.m2_ = ::CORBA::string_dup (u.u_.m2_);
    }
    break;
    default:
    break;
  }
}

Variable_Union1::~Variable_Union1 (void)
{
  // Finalize.
  this->_reset ();
}

void Variable_Union1::_tao_any_destructor (void *_tao_void_pointer)
{
  Variable_Union1 *tmp =
    static_cast<Variable_Union1 *> (_tao_void_pointer);
  delete tmp;
}

Variable_Union1 &
Variable_Union1::operator= (const ::Variable_Union1 &u)
{
  if (&u == this)
    {
      return *this;
    }

  this->_reset ();
  this->disc_ = u.disc_;

  switch (this->disc_)
  {
    case 1:
    {
      this->u_.m1_ = u.u_.m1_;
    }
    break;
    case 2:
    {
      this->u_.m2_ = ::CORBA::string_dup (u.u_.m2_);
    }
    break;
    default:
    break;
  }

  return *this;
}

/// Reset method to reset old values of a union.
void Variable_Union1::_reset (void)
{
  switch (this->disc_)
  {

    case 1:

    break;

    case 2:
      ::CORBA::string_free (this->u_.m2_);
      this->u_.m2_ = 0;

    break;

    default:
    break;
  }
}

// TAO_IDL - Generated from
// be/be_visitor_typecode/union_typecode.cpp:65

static TAO::TypeCode::Case_T<CORBA::Long, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_Variable_Union1__0 (1, "m1", &CORBA::_tc_long);
static TAO::TypeCode::Case_T<CORBA::Long, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_Variable_Union1__1 (2, "m2", &CORBA::_tc_string);

static TAO::TypeCode::Case<char const *, ::CORBA::TypeCode_ptr const *> const * const _tao_cases_Variable_Union1[] =
  {
    &_tao_cases_Variable_Union1__0,
    &_tao_cases_Variable_Union1__1
  };

static TAO::TypeCode::Union<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::TypeCode::Case<char const *, ::CORBA::TypeCode_ptr const *> const * const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_Variable_Union1 (
    "IDL:Variable_Union1:1.0",
    "Variable_Union1",
    &CORBA::_tc_long,
    _tao_cases_Variable_Union1,
    sizeof (_tao_cases_Variable_Union1)/sizeof (_tao_cases_Variable_Union1[0]),
    -1);

::CORBA::TypeCode_ptr const _tc_Variable_Union1 =
  &_tao_tc_Variable_Union1;

// TAO_IDL - Generated from
// be/be_visitor_typecode/alias_typecode.cpp:49

static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_VBfixed_union1 (
    ::CORBA::tk_value_box,
    "IDL:VBfixed_union1:1.0",
    "VBfixed_union1",
    &_tc_Fixed_Union1);

::CORBA::TypeCode_ptr const _tc_VBfixed_union1 =
  &_tao_tc_VBfixed_union1;

// TAO_IDL - Generated from
// be/be_visitor_valuebox/valuebox_cs.cpp:52

void
TAO::Value_Traits<VBfixed_union1>::add_ref (
    VBfixed_union1 * p
  )
{
  ::CORBA::add_ref (p);
}

void
TAO::Value_Traits<VBfixed_union1>::remove_ref (
    VBfixed_union1 * p
  )
{
  ::CORBA::remove_ref (p);
}

void
TAO::Value_Traits<VBfixed_union1>::release (
    VBfixed_union1 * p
  )
{
  ::CORBA::remove_ref (p);
}

VBfixed_union1 *
VBfixed_union1::_downcast ( ::CORBA::ValueBase *v)
{
  return dynamic_cast< ::VBfixed_union1 * > (v);
}

::CORBA::ValueBase *
VBfixed_union1::_copy_value (void)
{
  ::CORBA::ValueBase *result = 0;
  ACE_NEW_RETURN (
    result,
    VBfixed_union1 (*this),
    0);

  return result;
}

const char *
VBfixed_union1::_tao_obv_repository_id (void) const
{
  return this->_tao_obv_static_repository_id ();
}

void
VBfixed_union1::_tao_obv_truncatable_repo_ids (Repository_Id_List& ids) const
{
  ids.push_back (this->_tao_obv_static_repository_id ());
}

::CORBA::Boolean
VBfixed_union1::_tao_match_formal_type (ptrdiff_t ) const
{
  return true;
}

void
VBfixed_union1::_tao_any_destructor (void *_tao_void_pointer)
{
  VBfixed_union1 *_tao_tmp_pointer =
    static_cast<VBfixed_union1 *> (_tao_void_pointer);
  ::CORBA::remove_ref (_tao_tmp_pointer);
}

// TAO extension - the virtual _type method.
::CORBA::TypeCode_ptr VBfixed_union1::_tao_type (void) const
{
  return ::_tc_VBfixed_union1;
}

::CORBA::Boolean
VBfixed_union1::_tao_unmarshal (
    TAO_InputCDR &strm,
    VBfixed_union1 *&vb_object
  )
{
  ::CORBA::Boolean is_null_object = false;
  ::CORBA::Boolean is_indirected = false;
  TAO_InputCDR indrected_strm ((size_t) 0);
  if ( ::CORBA::ValueBase::_tao_validate_box_type (
        strm, indrected_strm,
        VBfixed_union1::_tao_obv_static_repository_id (),
        is_null_object, is_indirected
      ) == false)
    {
      return false;
    }

  vb_object = 0;
  if (is_null_object)
    {
      return true;
    }

  if (is_indirected)
    {
      return VBfixed_union1::_tao_unmarshal (
             indrected_strm, vb_object);
    }

  ACE_NEW_RETURN (
    vb_object,
    VBfixed_union1,
    false);

  return (strm >> vb_object->_pd_value);
}

::CORBA::Boolean
VBfixed_union1::_tao_unmarshal_v (TAO_InputCDR &)
{
  return true;
}



// TAO_IDL - Generated from
// be/be_visitor_valuebox/valuebox_cs.cpp:708

VBfixed_union1::~VBfixed_union1 (void)
{
}

::CORBA::Boolean
VBfixed_union1::_tao_marshal_v (TAO_OutputCDR & strm) const
{
  return (strm << this->_pd_value.in ());
}



// TAO_IDL - Generated from
// be/be_visitor_typecode/alias_typecode.cpp:49

static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_VBvariable_union1 (
    ::CORBA::tk_value_box,
    "IDL:VBvariable_union1:1.0",
    "VBvariable_union1",
    &_tc_Variable_Union1);

::CORBA::TypeCode_ptr const _tc_VBvariable_union1 =
  &_tao_tc_VBvariable_union1;

// TAO_IDL - Generated from
// be/be_visitor_valuebox/valuebox_cs.cpp:52

void
TAO::Value_Traits<VBvariable_union1>::add_ref (
    VBvariable_union1 * p
  )
{
  ::CORBA::add_ref (p);
}

void
TAO::Value_Traits<VBvariable_union1>::remove_ref (
    VBvariable_union1 * p
  )
{
  ::CORBA::remove_ref (p);
}

void
TAO::Value_Traits<VBvariable_union1>::release (
    VBvariable_union1 * p
  )
{
  ::CORBA::remove_ref (p);
}

VBvariable_union1 *
VBvariable_union1::_downcast ( ::CORBA::ValueBase *v)
{
  return dynamic_cast< ::VBvariable_union1 * > (v);
}

::CORBA::ValueBase *
VBvariable_union1::_copy_value (void)
{
  ::CORBA::ValueBase *result = 0;
  ACE_NEW_RETURN (
    result,
    VBvariable_union1 (*this),
    0);

  return result;
}

const char *
VBvariable_union1::_tao_obv_repository_id (void) const
{
  return this->_tao_obv_static_repository_id ();
}

void
VBvariable_union1::_tao_obv_truncatable_repo_ids (Repository_Id_List& ids) const
{
  ids.push_back (this->_tao_obv_static_repository_id ());
}

::CORBA::Boolean
VBvariable_union1::_tao_match_formal_type (ptrdiff_t ) const
{
  return true;
}

void
VBvariable_union1::_tao_any_destructor (void *_tao_void_pointer)
{
  VBvariable_union1 *_tao_tmp_pointer =
    static_cast<VBvariable_union1 *> (_tao_void_pointer);
  ::CORBA::remove_ref (_tao_tmp_pointer);
}

// TAO extension - the virtual _type method.
::CORBA::TypeCode_ptr VBvariable_union1::_tao_type (void) const
{
  return ::_tc_VBvariable_union1;
}

::CORBA::Boolean
VBvariable_union1::_tao_unmarshal (
    TAO_InputCDR &strm,
    VBvariable_union1 *&vb_object
  )
{
  ::CORBA::Boolean is_null_object = false;
  ::CORBA::Boolean is_indirected = false;
  TAO_InputCDR indrected_strm ((size_t) 0);
  if ( ::CORBA::ValueBase::_tao_validate_box_type (
        strm, indrected_strm,
        VBvariable_union1::_tao_obv_static_repository_id (),
        is_null_object, is_indirected
      ) == false)
    {
      return false;
    }

  vb_object = 0;
  if (is_null_object)
    {
      return true;
    }

  if (is_indirected)
    {
      return VBvariable_union1::_tao_unmarshal (
             indrected_strm, vb_object);
    }

  ACE_NEW_RETURN (
    vb_object,
    VBvariable_union1,
    false);

  return (strm >> vb_object->_pd_value);
}

::CORBA::Boolean
VBvariable_union1::_tao_unmarshal_v (TAO_InputCDR &)
{
  return true;
}



// TAO_IDL - Generated from
// be/be_visitor_valuebox/valuebox_cs.cpp:708

VBvariable_union1::~VBvariable_union1 (void)
{
}

::CORBA::Boolean
VBvariable_union1::_tao_marshal_v (TAO_OutputCDR & strm) const
{
  return (strm << this->_pd_value.in ());
}



// TAO_IDL - Generated from
// be/be_visitor_union/any_op_cs.cpp:37


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    const Fixed_Union1 &_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<Fixed_Union1>::insert_copy (
      _tao_any,
      Fixed_Union1::_tao_any_destructor,
      _tc_Fixed_Union1,
      _tao_elem
    );
}

// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    Fixed_Union1 *_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<Fixed_Union1>::insert (
      _tao_any,
      Fixed_Union1::_tao_any_destructor,
      _tc_Fixed_Union1,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    Fixed_Union1 *&_tao_elem
  )
{
  return _tao_any >>= const_cast<
      const Fixed_Union1 *&> (
      _tao_elem
    );
}

// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const Fixed_Union1 *&_tao_elem
  )
{
  return
    TAO::Any_Dual_Impl_T<Fixed_Union1>::extract (
        _tao_any,
        Fixed_Union1::_tao_any_destructor,
        _tc_Fixed_Union1,
        _tao_elem
      );
}
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_union/any_op_cs.cpp:37


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    const Variable_Union1 &_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<Variable_Union1>::insert_copy (
      _tao_any,
      Variable_Union1::_tao_any_destructor,
      _tc_Variable_Union1,
      _tao_elem
    );
}

// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    Variable_Union1 *_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<Variable_Union1>::insert (
      _tao_any,
      Variable_Union1::_tao_any_destructor,
      _tc_Variable_Union1,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    Variable_Union1 *&_tao_elem
  )
{
  return _tao_any >>= const_cast<
      const Variable_Union1 *&> (
      _tao_elem
    );
}

// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const Variable_Union1 *&_tao_elem
  )
{
  return
    TAO::Any_Dual_Impl_T<Variable_Union1>::extract (
        _tao_any,
        Variable_Union1::_tao_any_destructor,
        _tc_Variable_Union1,
        _tao_elem
      );
}
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_valuebox/any_op_cs.cpp:46
TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<VBfixed_union1>::to_value (
      ::CORBA::ValueBase *&_tao_elem
    ) const
  {
    ::CORBA::add_ref (this->value_);
    _tao_elem = this->value_;
    return true;
  }
}


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    VBfixed_union1 *_tao_elem
  )
{
  ::CORBA::add_ref (_tao_elem);
  _tao_any <<= &_tao_elem;
}

// Non-copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    VBfixed_union1 **_tao_elem
  )
{
  TAO::Any_Impl_T<VBfixed_union1>::insert (
      _tao_any,
      VBfixed_union1::_tao_any_destructor,
      _tc_VBfixed_union1,
      *_tao_elem
    );
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    VBfixed_union1 *&_tao_elem
  )
{
  return
    TAO::Any_Impl_T<VBfixed_union1>::extract (
        _tao_any,
        VBfixed_union1::_tao_any_destructor,
        _tc_VBfixed_union1,
        _tao_elem
      );
}


TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_valuebox/any_op_cs.cpp:46
TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<VBvariable_union1>::to_value (
      ::CORBA::ValueBase *&_tao_elem
    ) const
  {
    ::CORBA::add_ref (this->value_);
    _tao_elem = this->value_;
    return true;
  }
}


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    VBvariable_union1 *_tao_elem
  )
{
  ::CORBA::add_ref (_tao_elem);
  _tao_any <<= &_tao_elem;
}

// Non-copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    VBvariable_union1 **_tao_elem
  )
{
  TAO::Any_Impl_T<VBvariable_union1>::insert (
      _tao_any,
      VBvariable_union1::_tao_any_destructor,
      _tc_VBvariable_union1,
      *_tao_elem
    );
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    VBvariable_union1 *&_tao_elem
  )
{
  return
    TAO::Any_Impl_T<VBvariable_union1>::extract (
        _tao_any,
        VBvariable_union1::_tao_any_destructor,
        _tc_VBvariable_union1,
        _tao_elem
      );
}


TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_union/cdr_op_cs.cpp:74


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Fixed_Union1 &_tao_union
  )
{
  if ( !(strm << _tao_union._d ()) )
    {
      return false;
    }

  ::CORBA::Boolean result = true;

  switch (_tao_union._d ())
  {
    case 1:
      {
        result = strm << _tao_union.m1 ();
      }
      break;
    case 2:
      {
        result = strm << _tao_union.m2 ();
      }
      break;
    default:
      break;
  }

  return result;
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Fixed_Union1 &_tao_union
  )
{
  CORBA::Long _tao_discriminant;
  if ( !(strm >> _tao_discriminant) )
    {
      return false;
    }

  ::CORBA::Boolean result = true;

  switch (_tao_discriminant)
  {
    case 1:
      {
        CORBA::Long _tao_union_tmp;
        result = strm >> _tao_union_tmp;

        if (result)
          {
            _tao_union.m1 (_tao_union_tmp);
            _tao_union._d (_tao_discriminant);
          }
      }
      break;
    case 2:
      {
        CORBA::Short _tao_union_tmp;
        result = strm >> _tao_union_tmp;

        if (result)
          {
            _tao_union.m2 (_tao_union_tmp);
            _tao_union._d (_tao_discriminant);
          }
      }
      break;
    default:
      _tao_union._default ();
      // For maximum interop compatibility, force the same value as transmitted
      _tao_union._d (_tao_discriminant);
      break;
  }

  return result;
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_union/cdr_op_cs.cpp:74


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Variable_Union1 &_tao_union
  )
{
  if ( !(strm << _tao_union._d ()) )
    {
      return false;
    }

  ::CORBA::Boolean result = true;

  switch (_tao_union._d ())
  {
    case 1:
      {
        result = strm << _tao_union.m1 ();
      }
      break;
    case 2:
      {
        result = strm << _tao_union.m2 ();
      }
      break;
    default:
      break;
  }

  return result;
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Variable_Union1 &_tao_union
  )
{
  CORBA::Long _tao_discriminant;
  if ( !(strm >> _tao_discriminant) )
    {
      return false;
    }

  ::CORBA::Boolean result = true;

  switch (_tao_discriminant)
  {
    case 1:
      {
        CORBA::Long _tao_union_tmp;
        result = strm >> _tao_union_tmp;

        if (result)
          {
            _tao_union.m1 (_tao_union_tmp);
            _tao_union._d (_tao_discriminant);
          }
      }
      break;
    case 2:
      {
        ::CORBA::String_var _tao_union_tmp;
        result = strm >> _tao_union_tmp.out ();

        if (result)
          {
            _tao_union.m2 (_tao_union_tmp);
            _tao_union._d (_tao_discriminant);
          }
      }
      break;
    default:
      _tao_union._default ();
      // For maximum interop compatibility, force the same value as transmitted
      _tao_union._d (_tao_discriminant);
      break;
  }

  return result;
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_valuebox/cdr_op_cs.cpp:41


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean
operator<< (
    TAO_OutputCDR &strm,
    const VBfixed_union1 *_tao_valuebox
  )
{
  return
    ::CORBA::ValueBase::_tao_marshal (
        strm,
        _tao_valuebox,
        reinterpret_cast<ptrdiff_t> (&VBfixed_union1::_downcast)
      );
}

::CORBA::Boolean
operator>> (
    TAO_InputCDR &strm,
    VBfixed_union1 *&_tao_valuebox
  )
{
  return VBfixed_union1::_tao_unmarshal (strm, _tao_valuebox);
}


TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_valuebox/cdr_op_cs.cpp:41


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean
operator<< (
    TAO_OutputCDR &strm,
    const VBvariable_union1 *_tao_valuebox
  )
{
  return
    ::CORBA::ValueBase::_tao_marshal (
        strm,
        _tao_valuebox,
        reinterpret_cast<ptrdiff_t> (&VBvariable_union1::_downcast)
      );
}

::CORBA::Boolean
operator>> (
    TAO_InputCDR &strm,
    VBvariable_union1 *&_tao_valuebox
  )
{
  return VBvariable_union1::_tao_unmarshal (strm, _tao_valuebox);
}


TAO_END_VERSIONED_NAMESPACE_DECL



