// -*- C++ -*-
/**
 * Code generated by the The ACE ORB (TAO) IDL Compiler v2.4.1
 * TAO and the TAO IDL Compiler have been developed by:
 *       Center for Distributed Object Computing
 *       Washington University
 *       St. Louis, MO
 *       USA
 *       http://www.cs.wustl.edu/~schmidt/doc-center.html
 * and
 *       Distributed Object Computing Laboratory
 *       University of California at Irvine
 *       Irvine, CA
 *       USA
 * and
 *       Institute for Software Integrated Systems
 *       Vanderbilt University
 *       Nashville, TN
 *       USA
 *       http://www.isis.vanderbilt.edu/
 *
 * Information about TAO is available at:
 *     http://www.dre.vanderbilt.edu/~schmidt/TAO.html
 **/

// TAO_IDL - Generated from
// be/be_codegen.cpp:373


#include "valueboxC.h"
#include "tao/AnyTypeCode/Null_RefCount_Policy.h"
#include "tao/AnyTypeCode/TypeCode_Constants.h"
#include "tao/AnyTypeCode/Alias_TypeCode_Static.h"
#include "tao/AnyTypeCode/Objref_TypeCode_Static.h"
#include "tao/AnyTypeCode/Sequence_TypeCode_Static.h"
#include "tao/AnyTypeCode/String_TypeCode_Static.h"
#include "tao/AnyTypeCode/Value_TypeCode_Static.h"
#include "tao/AnyTypeCode/TypeCode_Value_Field.h"
#include "tao/CDR.h"
#include "tao/Exception_Data.h"
#include "tao/Invocation_Adapter.h"
#include "tao/Valuetype/ValueFactory.h"
#include "tao/Object_T.h"
#include "tao/CDR.h"
#include "tao/AnyTypeCode/Any.h"
#include "tao/AnyTypeCode/Any_Impl_T.h"
#include "tao/AnyTypeCode/Any_Dual_Impl_T.h"
#include "tao/AnyTypeCode/Any_Array_Impl_T.h"
#include "ace/OS_NS_string.h"

#if !defined (__ACE_INLINE__)
#include "valueboxC.inl"
#endif /* !defined INLINE */

// TAO_IDL - Generated from
// be/be_visitor_typecode/alias_typecode.cpp:49

static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_VBstring (
    ::CORBA::tk_value_box,
    "IDL:VBstring:1.0",
    "VBstring",
    &CORBA::_tc_string);

::CORBA::TypeCode_ptr const _tc_VBstring =
  &_tao_tc_VBstring;

// TAO_IDL - Generated from
// be/be_visitor_valuebox/valuebox_cs.cpp:52

void
TAO::Value_Traits<VBstring>::add_ref (
    VBstring * p
  )
{
  ::CORBA::add_ref (p);
}

void
TAO::Value_Traits<VBstring>::remove_ref (
    VBstring * p
  )
{
  ::CORBA::remove_ref (p);
}

void
TAO::Value_Traits<VBstring>::release (
    VBstring * p
  )
{
  ::CORBA::remove_ref (p);
}

VBstring *
VBstring::_downcast ( ::CORBA::ValueBase *v)
{
  return dynamic_cast< ::VBstring * > (v);
}

::CORBA::ValueBase *
VBstring::_copy_value (void)
{
  ::CORBA::ValueBase *result = 0;
  ACE_NEW_RETURN (
    result,
    VBstring (*this),
    0);

  return result;
}

const char *
VBstring::_tao_obv_repository_id (void) const
{
  return this->_tao_obv_static_repository_id ();
}

void
VBstring::_tao_obv_truncatable_repo_ids (Repository_Id_List& ids) const
{
  ids.push_back (this->_tao_obv_static_repository_id ());
}

::CORBA::Boolean
VBstring::_tao_match_formal_type (ptrdiff_t ) const
{
  return true;
}

void
VBstring::_tao_any_destructor (void *_tao_void_pointer)
{
  VBstring *_tao_tmp_pointer =
    static_cast<VBstring *> (_tao_void_pointer);
  ::CORBA::remove_ref (_tao_tmp_pointer);
}

// TAO extension - the virtual _type method.
::CORBA::TypeCode_ptr VBstring::_tao_type (void) const
{
  return ::_tc_VBstring;
}

::CORBA::Boolean
VBstring::_tao_unmarshal (
    TAO_InputCDR &strm,
    VBstring *&vb_object
  )
{
  ::CORBA::Boolean is_null_object = false;
  ::CORBA::Boolean is_indirected = false;
  TAO_InputCDR indrected_strm ((size_t) 0);
  if ( ::CORBA::ValueBase::_tao_validate_box_type (
        strm, indrected_strm,
        VBstring::_tao_obv_static_repository_id (),
        is_null_object, is_indirected
      ) == false)
    {
      return false;
    }

  vb_object = 0;
  if (is_null_object)
    {
      return true;
    }

  if (is_indirected)
    {
      return VBstring::_tao_unmarshal (
             indrected_strm, vb_object);
    }

  ACE_NEW_RETURN (
    vb_object,
    VBstring,
    false);

  return (strm >> vb_object->_pd_value);
}

::CORBA::Boolean
VBstring::_tao_unmarshal_v (TAO_InputCDR &)
{
  return true;
}



// TAO_IDL - Generated from
// be/be_visitor_valuebox/valuebox_cs.cpp:620

VBstring::~VBstring (void)
{
}

::CORBA::Boolean
VBstring::_tao_marshal_v (TAO_OutputCDR & strm) const
{
  return (strm << this->_pd_value);
}



// TAO_IDL - Generated from
// be/be_visitor_typecode/alias_typecode.cpp:49

static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_VBwstring (
    ::CORBA::tk_value_box,
    "IDL:VBwstring:1.0",
    "VBwstring",
    &CORBA::_tc_wstring);

::CORBA::TypeCode_ptr const _tc_VBwstring =
  &_tao_tc_VBwstring;

// TAO_IDL - Generated from
// be/be_visitor_valuebox/valuebox_cs.cpp:52

void
TAO::Value_Traits<VBwstring>::add_ref (
    VBwstring * p
  )
{
  ::CORBA::add_ref (p);
}

void
TAO::Value_Traits<VBwstring>::remove_ref (
    VBwstring * p
  )
{
  ::CORBA::remove_ref (p);
}

void
TAO::Value_Traits<VBwstring>::release (
    VBwstring * p
  )
{
  ::CORBA::remove_ref (p);
}

VBwstring *
VBwstring::_downcast ( ::CORBA::ValueBase *v)
{
  return dynamic_cast< ::VBwstring * > (v);
}

::CORBA::ValueBase *
VBwstring::_copy_value (void)
{
  ::CORBA::ValueBase *result = 0;
  ACE_NEW_RETURN (
    result,
    VBwstring (*this),
    0);

  return result;
}

const char *
VBwstring::_tao_obv_repository_id (void) const
{
  return this->_tao_obv_static_repository_id ();
}

void
VBwstring::_tao_obv_truncatable_repo_ids (Repository_Id_List& ids) const
{
  ids.push_back (this->_tao_obv_static_repository_id ());
}

::CORBA::Boolean
VBwstring::_tao_match_formal_type (ptrdiff_t ) const
{
  return true;
}

void
VBwstring::_tao_any_destructor (void *_tao_void_pointer)
{
  VBwstring *_tao_tmp_pointer =
    static_cast<VBwstring *> (_tao_void_pointer);
  ::CORBA::remove_ref (_tao_tmp_pointer);
}

// TAO extension - the virtual _type method.
::CORBA::TypeCode_ptr VBwstring::_tao_type (void) const
{
  return ::_tc_VBwstring;
}

::CORBA::Boolean
VBwstring::_tao_unmarshal (
    TAO_InputCDR &strm,
    VBwstring *&vb_object
  )
{
  ::CORBA::Boolean is_null_object = false;
  ::CORBA::Boolean is_indirected = false;
  TAO_InputCDR indrected_strm ((size_t) 0);
  if ( ::CORBA::ValueBase::_tao_validate_box_type (
        strm, indrected_strm,
        VBwstring::_tao_obv_static_repository_id (),
        is_null_object, is_indirected
      ) == false)
    {
      return false;
    }

  vb_object = 0;
  if (is_null_object)
    {
      return true;
    }

  if (is_indirected)
    {
      return VBwstring::_tao_unmarshal (
             indrected_strm, vb_object);
    }

  ACE_NEW_RETURN (
    vb_object,
    VBwstring,
    false);

  return (strm >> vb_object->_pd_value);
}

::CORBA::Boolean
VBwstring::_tao_unmarshal_v (TAO_InputCDR &)
{
  return true;
}



// TAO_IDL - Generated from
// be/be_visitor_valuebox/valuebox_cs.cpp:620

VBwstring::~VBwstring (void)
{
}

::CORBA::Boolean
VBwstring::_tao_marshal_v (TAO_OutputCDR & strm) const
{
  return (strm << this->_pd_value);
}



// TAO_IDL - Generated from
// be/be_visitor_sequence/sequence_cs.cpp:70

#if !defined (_TDSEQLONG_CS_)
#define _TDSEQLONG_CS_

TDseqlong::TDseqlong (void)
{}

TDseqlong::TDseqlong (
    ::CORBA::ULong max)
  : ::TAO::unbounded_value_sequence<
        ::CORBA::Long
      > (max)
{}

TDseqlong::TDseqlong (
    ::CORBA::ULong max,
    ::CORBA::ULong length,
    ::CORBA::Long * buffer,
    ::CORBA::Boolean release
  )
  : ::TAO::unbounded_value_sequence<
        ::CORBA::Long
      >
    (max, length, buffer, release)
{}

TDseqlong::TDseqlong (
    const TDseqlong &seq)
  : ::TAO::unbounded_value_sequence<
        ::CORBA::Long
      > (seq)
{}

TDseqlong::~TDseqlong (void)
{}

void TDseqlong::_tao_any_destructor (
    void * _tao_void_pointer)
{
  TDseqlong * _tao_tmp_pointer =
    static_cast<TDseqlong *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

#endif /* end #if !defined */

// TAO_IDL - Generated from
// be/be_visitor_typecode/alias_typecode.cpp:49



// TAO_IDL - Generated from
// be/be_visitor_typecode/typecode_defn.cpp:461


#ifndef _TAO_TYPECODE_TDseqlong_GUARD
#define _TAO_TYPECODE_TDseqlong_GUARD

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

namespace TAO
{
  namespace TypeCode
  {
    namespace
    {
      TAO::TypeCode::Sequence< ::CORBA::TypeCode_ptr const *,
                              TAO::Null_RefCount_Policy>
        TDseqlong_0 (
          ::CORBA::tk_sequence,
          &CORBA::_tc_long,
          0U);

      ::CORBA::TypeCode_ptr const tc_TDseqlong_0 =
        &TDseqlong_0;
    }
  }
}

TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_TYPECODE_TDseqlong_GUARD */

static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_TDseqlong (
    ::CORBA::tk_alias,
    "IDL:TDseqlong:1.0",
    "TDseqlong",
    &TAO::TypeCode::tc_TDseqlong_0);

::CORBA::TypeCode_ptr const _tc_TDseqlong =
  &_tao_tc_TDseqlong;

// TAO_IDL - Generated from
// be/be_visitor_typecode/alias_typecode.cpp:49



// TAO_IDL - Generated from
// be/be_visitor_typecode/typecode_defn.cpp:461


#ifndef _TAO_TYPECODE_TDseqlong_GUARD
#define _TAO_TYPECODE_TDseqlong_GUARD

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

namespace TAO
{
  namespace TypeCode
  {
    namespace
    {
      TAO::TypeCode::Sequence< ::CORBA::TypeCode_ptr const *,
                              TAO::Null_RefCount_Policy>
        TDseqlong_0 (
          ::CORBA::tk_sequence,
          &CORBA::_tc_long,
          0U);

      ::CORBA::TypeCode_ptr const tc_TDseqlong_0 =
        &TDseqlong_0;
    }
  }
}

TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_TYPECODE_TDseqlong_GUARD */

static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_VBseqlong (
    ::CORBA::tk_value_box,
    "IDL:VBseqlong:1.0",
    "VBseqlong",
    &TAO::TypeCode::tc_TDseqlong_0);

::CORBA::TypeCode_ptr const _tc_VBseqlong =
  &_tao_tc_VBseqlong;

// TAO_IDL - Generated from
// be/be_visitor_valuebox/valuebox_cs.cpp:52

void
TAO::Value_Traits<VBseqlong>::add_ref (
    VBseqlong * p
  )
{
  ::CORBA::add_ref (p);
}

void
TAO::Value_Traits<VBseqlong>::remove_ref (
    VBseqlong * p
  )
{
  ::CORBA::remove_ref (p);
}

void
TAO::Value_Traits<VBseqlong>::release (
    VBseqlong * p
  )
{
  ::CORBA::remove_ref (p);
}

VBseqlong *
VBseqlong::_downcast ( ::CORBA::ValueBase *v)
{
  return dynamic_cast< ::VBseqlong * > (v);
}

::CORBA::ValueBase *
VBseqlong::_copy_value (void)
{
  ::CORBA::ValueBase *result = 0;
  ACE_NEW_RETURN (
    result,
    VBseqlong (*this),
    0);

  return result;
}

const char *
VBseqlong::_tao_obv_repository_id (void) const
{
  return this->_tao_obv_static_repository_id ();
}

void
VBseqlong::_tao_obv_truncatable_repo_ids (Repository_Id_List& ids) const
{
  ids.push_back (this->_tao_obv_static_repository_id ());
}

::CORBA::Boolean
VBseqlong::_tao_match_formal_type (ptrdiff_t ) const
{
  return true;
}

void
VBseqlong::_tao_any_destructor (void *_tao_void_pointer)
{
  VBseqlong *_tao_tmp_pointer =
    static_cast<VBseqlong *> (_tao_void_pointer);
  ::CORBA::remove_ref (_tao_tmp_pointer);
}

// TAO extension - the virtual _type method.
::CORBA::TypeCode_ptr VBseqlong::_tao_type (void) const
{
  return ::_tc_VBseqlong;
}

::CORBA::Boolean
VBseqlong::_tao_unmarshal (
    TAO_InputCDR &strm,
    VBseqlong *&vb_object
  )
{
  ::CORBA::Boolean is_null_object = false;
  ::CORBA::Boolean is_indirected = false;
  TAO_InputCDR indrected_strm ((size_t) 0);
  if ( ::CORBA::ValueBase::_tao_validate_box_type (
        strm, indrected_strm,
        VBseqlong::_tao_obv_static_repository_id (),
        is_null_object, is_indirected
      ) == false)
    {
      return false;
    }

  vb_object = 0;
  if (is_null_object)
    {
      return true;
    }

  if (is_indirected)
    {
      return VBseqlong::_tao_unmarshal (
             indrected_strm, vb_object);
    }

  ACE_NEW_RETURN (
    vb_object,
    VBseqlong,
    false);

  return (strm >> vb_object->_pd_value);
}

::CORBA::Boolean
VBseqlong::_tao_unmarshal_v (TAO_InputCDR &)
{
  return true;
}



// TAO_IDL - Generated from
// be/be_visitor_valuebox/valuebox_cs.cpp:466

VBseqlong::VBseqlong ( ::CORBA::ULong max)
{
  TDseqlong* p;
  ACE_NEW (
    p,
    TDseqlong (max));
  this->_pd_value = p;
}

VBseqlong::VBseqlong (
  ::CORBA::ULong max,
  ::CORBA::ULong length,
  ::CORBA::Long * buf,
  ::CORBA::Boolean release)
{
  TDseqlong* p;
  ACE_NEW (
    p,
    TDseqlong (max, length, buf, release));
  this->_pd_value = p;
}

VBseqlong::~VBseqlong (void)
{
}

::CORBA::Long &
VBseqlong::operator[] ( ::CORBA::ULong index)
{
  return (::CORBA::Long&) this->_pd_value->operator[] (index);
}

const ::CORBA::Long &
VBseqlong::operator[] ( ::CORBA::ULong index) const
{
  return (::CORBA::Long&) this->_pd_value->operator[] (index);
}

::CORBA::Boolean
VBseqlong::_tao_marshal_v (TAO_OutputCDR & strm) const
{
  return (strm << this->_pd_value.in ());
}



// TAO_IDL - Generated from
// be/be_visitor_array/array_cs.cpp:94

LongArray_slice *
LongArray_dup (const LongArray_slice *_tao_src_array)
{
  LongArray_slice *_tao_dup_array =
    LongArray_alloc ();

  if (!_tao_dup_array)
    {
      return static_cast <LongArray_slice *> (0);
    }

  LongArray_copy (_tao_dup_array, _tao_src_array);
  return _tao_dup_array;
}

LongArray_slice *
LongArray_alloc (void)
{
  LongArray_slice *retval = 0;
  ACE_NEW_RETURN (retval, ::CORBA::Long[3], 0);
  return retval;
}

void
LongArray_free (
    LongArray_slice *_tao_slice)
{
  delete [] _tao_slice;
}

void
LongArray_copy (
    LongArray_slice * _tao_to,
    const LongArray_slice *_tao_from)
{
  // Copy each individual element.
  for ( ::CORBA::ULong i0 = 0; i0 < 3; ++i0)
    {
      _tao_to[i0] = _tao_from[i0];
    }
}

// TAO_IDL - Generated from
// be/be_visitor_typecode/alias_typecode.cpp:49



// TAO_IDL - Generated from
// be/be_visitor_typecode/typecode_defn.cpp:298


#ifndef _TAO_TYPECODE_LongArray_GUARD
#define _TAO_TYPECODE_LongArray_GUARD

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

namespace TAO
{
  namespace TypeCode
  {
    namespace
    {
      TAO::TypeCode::Sequence< ::CORBA::TypeCode_ptr const *,
                              TAO::Null_RefCount_Policy>
        LongArray_3 (
          ::CORBA::tk_array,
          &CORBA::_tc_long,
          3U);

      ::CORBA::TypeCode_ptr const tc_LongArray =
        &LongArray_3;
    }
  }
}

TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_TYPECODE_LongArray_GUARD */
static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_LongArray (
    ::CORBA::tk_alias,
    "IDL:LongArray:1.0",
    "LongArray",
    &TAO::TypeCode::tc_LongArray);

::CORBA::TypeCode_ptr const _tc_LongArray =
  &_tao_tc_LongArray;

// TAO_IDL - Generated from
// be/be_visitor_typecode/alias_typecode.cpp:49



// TAO_IDL - Generated from
// be/be_visitor_typecode/typecode_defn.cpp:298


#ifndef _TAO_TYPECODE_LongArray_GUARD
#define _TAO_TYPECODE_LongArray_GUARD

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

namespace TAO
{
  namespace TypeCode
  {
    namespace
    {
      TAO::TypeCode::Sequence< ::CORBA::TypeCode_ptr const *,
                              TAO::Null_RefCount_Policy>
        LongArray_3 (
          ::CORBA::tk_array,
          &CORBA::_tc_long,
          3U);

      ::CORBA::TypeCode_ptr const tc_LongArray =
        &LongArray_3;
    }
  }
}

TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_TYPECODE_LongArray_GUARD */
static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_VBlongarray (
    ::CORBA::tk_value_box,
    "IDL:VBlongarray:1.0",
    "VBlongarray",
    &TAO::TypeCode::tc_LongArray);

::CORBA::TypeCode_ptr const _tc_VBlongarray =
  &_tao_tc_VBlongarray;

// TAO_IDL - Generated from
// be/be_visitor_valuebox/valuebox_cs.cpp:52

void
TAO::Value_Traits<VBlongarray>::add_ref (
    VBlongarray * p
  )
{
  ::CORBA::add_ref (p);
}

void
TAO::Value_Traits<VBlongarray>::remove_ref (
    VBlongarray * p
  )
{
  ::CORBA::remove_ref (p);
}

void
TAO::Value_Traits<VBlongarray>::release (
    VBlongarray * p
  )
{
  ::CORBA::remove_ref (p);
}

VBlongarray *
VBlongarray::_downcast ( ::CORBA::ValueBase *v)
{
  return dynamic_cast< ::VBlongarray * > (v);
}

::CORBA::ValueBase *
VBlongarray::_copy_value (void)
{
  ::CORBA::ValueBase *result = 0;
  ACE_NEW_RETURN (
    result,
    VBlongarray (*this),
    0);

  return result;
}

const char *
VBlongarray::_tao_obv_repository_id (void) const
{
  return this->_tao_obv_static_repository_id ();
}

void
VBlongarray::_tao_obv_truncatable_repo_ids (Repository_Id_List& ids) const
{
  ids.push_back (this->_tao_obv_static_repository_id ());
}

::CORBA::Boolean
VBlongarray::_tao_match_formal_type (ptrdiff_t ) const
{
  return true;
}

void
VBlongarray::_tao_any_destructor (void *_tao_void_pointer)
{
  VBlongarray *_tao_tmp_pointer =
    static_cast<VBlongarray *> (_tao_void_pointer);
  ::CORBA::remove_ref (_tao_tmp_pointer);
}

// TAO extension - the virtual _type method.
::CORBA::TypeCode_ptr VBlongarray::_tao_type (void) const
{
  return ::_tc_VBlongarray;
}

::CORBA::Boolean
VBlongarray::_tao_unmarshal (
    TAO_InputCDR &strm,
    VBlongarray *&vb_object
  )
{
  ::CORBA::Boolean is_null_object = false;
  ::CORBA::Boolean is_indirected = false;
  TAO_InputCDR indrected_strm ((size_t) 0);
  if ( ::CORBA::ValueBase::_tao_validate_box_type (
        strm, indrected_strm,
        VBlongarray::_tao_obv_static_repository_id (),
        is_null_object, is_indirected
      ) == false)
    {
      return false;
    }

  vb_object = 0;
  if (is_null_object)
    {
      return true;
    }

  if (is_indirected)
    {
      return VBlongarray::_tao_unmarshal (
             indrected_strm, vb_object);
    }

  ACE_NEW_RETURN (
    vb_object,
    VBlongarray,
    false);

  LongArray_forany temp (vb_object->_boxed_inout ());
  return (strm >> temp);
}

::CORBA::Boolean
VBlongarray::_tao_unmarshal_v (TAO_InputCDR &)
{
  return true;
}



// TAO_IDL - Generated from
// be/be_visitor_valuebox/valuebox_cs.cpp:333

VBlongarray::~VBlongarray (void)
{
}

::CORBA::Boolean
VBlongarray::_tao_marshal_v (TAO_OutputCDR & strm) const
{
  LongArray_forany temp (this->_pd_value.ptr ());
  return (strm << temp);
}



// TAO_IDL - Generated from
// be/be_visitor_array/array_cs.cpp:94

StringArray_slice *
StringArray_dup (const StringArray_slice *_tao_src_array)
{
  StringArray_slice *_tao_dup_array =
    StringArray_alloc ();

  if (!_tao_dup_array)
    {
      return static_cast <StringArray_slice *> (0);
    }

  StringArray_copy (_tao_dup_array, _tao_src_array);
  return _tao_dup_array;
}

StringArray_slice *
StringArray_alloc (void)
{
  StringArray_slice *retval = 0;
  ACE_NEW_RETURN (retval, ::TAO::String_Manager[2], 0);
  return retval;
}

void
StringArray_free (
    StringArray_slice *_tao_slice)
{
  delete [] _tao_slice;
}

void
StringArray_copy (
    StringArray_slice * _tao_to,
    const StringArray_slice *_tao_from)
{
  // Copy each individual element.
  for ( ::CORBA::ULong i0 = 0; i0 < 2; ++i0)
    {
      _tao_to[i0] = _tao_from[i0];
    }
}

// TAO_IDL - Generated from
// be/be_visitor_typecode/alias_typecode.cpp:49



// TAO_IDL - Generated from
// be/be_visitor_typecode/typecode_defn.cpp:298


#ifndef _TAO_TYPECODE_StringArray_GUARD
#define _TAO_TYPECODE_StringArray_GUARD

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

namespace TAO
{
  namespace TypeCode
  {
    namespace
    {
      TAO::TypeCode::Sequence< ::CORBA::TypeCode_ptr const *,
                              TAO::Null_RefCount_Policy>
        StringArray_2 (
          ::CORBA::tk_array,
          &CORBA::_tc_string,
          2U);

      ::CORBA::TypeCode_ptr const tc_StringArray =
        &StringArray_2;
    }
  }
}

TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_TYPECODE_StringArray_GUARD */
static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_StringArray (
    ::CORBA::tk_alias,
    "IDL:StringArray:1.0",
    "StringArray",
    &TAO::TypeCode::tc_StringArray);

::CORBA::TypeCode_ptr const _tc_StringArray =
  &_tao_tc_StringArray;

// TAO_IDL - Generated from
// be/be_visitor_typecode/alias_typecode.cpp:49



// TAO_IDL - Generated from
// be/be_visitor_typecode/typecode_defn.cpp:298


#ifndef _TAO_TYPECODE_StringArray_GUARD
#define _TAO_TYPECODE_StringArray_GUARD

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

namespace TAO
{
  namespace TypeCode
  {
    namespace
    {
      TAO::TypeCode::Sequence< ::CORBA::TypeCode_ptr const *,
                              TAO::Null_RefCount_Policy>
        StringArray_2 (
          ::CORBA::tk_array,
          &CORBA::_tc_string,
          2U);

      ::CORBA::TypeCode_ptr const tc_StringArray =
        &StringArray_2;
    }
  }
}

TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_TYPECODE_StringArray_GUARD */
static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_VBstringarray (
    ::CORBA::tk_value_box,
    "IDL:VBstringarray:1.0",
    "VBstringarray",
    &TAO::TypeCode::tc_StringArray);

::CORBA::TypeCode_ptr const _tc_VBstringarray =
  &_tao_tc_VBstringarray;

// TAO_IDL - Generated from
// be/be_visitor_valuebox/valuebox_cs.cpp:52

void
TAO::Value_Traits<VBstringarray>::add_ref (
    VBstringarray * p
  )
{
  ::CORBA::add_ref (p);
}

void
TAO::Value_Traits<VBstringarray>::remove_ref (
    VBstringarray * p
  )
{
  ::CORBA::remove_ref (p);
}

void
TAO::Value_Traits<VBstringarray>::release (
    VBstringarray * p
  )
{
  ::CORBA::remove_ref (p);
}

VBstringarray *
VBstringarray::_downcast ( ::CORBA::ValueBase *v)
{
  return dynamic_cast< ::VBstringarray * > (v);
}

::CORBA::ValueBase *
VBstringarray::_copy_value (void)
{
  ::CORBA::ValueBase *result = 0;
  ACE_NEW_RETURN (
    result,
    VBstringarray (*this),
    0);

  return result;
}

const char *
VBstringarray::_tao_obv_repository_id (void) const
{
  return this->_tao_obv_static_repository_id ();
}

void
VBstringarray::_tao_obv_truncatable_repo_ids (Repository_Id_List& ids) const
{
  ids.push_back (this->_tao_obv_static_repository_id ());
}

::CORBA::Boolean
VBstringarray::_tao_match_formal_type (ptrdiff_t ) const
{
  return true;
}

void
VBstringarray::_tao_any_destructor (void *_tao_void_pointer)
{
  VBstringarray *_tao_tmp_pointer =
    static_cast<VBstringarray *> (_tao_void_pointer);
  ::CORBA::remove_ref (_tao_tmp_pointer);
}

// TAO extension - the virtual _type method.
::CORBA::TypeCode_ptr VBstringarray::_tao_type (void) const
{
  return ::_tc_VBstringarray;
}

::CORBA::Boolean
VBstringarray::_tao_unmarshal (
    TAO_InputCDR &strm,
    VBstringarray *&vb_object
  )
{
  ::CORBA::Boolean is_null_object = false;
  ::CORBA::Boolean is_indirected = false;
  TAO_InputCDR indrected_strm ((size_t) 0);
  if ( ::CORBA::ValueBase::_tao_validate_box_type (
        strm, indrected_strm,
        VBstringarray::_tao_obv_static_repository_id (),
        is_null_object, is_indirected
      ) == false)
    {
      return false;
    }

  vb_object = 0;
  if (is_null_object)
    {
      return true;
    }

  if (is_indirected)
    {
      return VBstringarray::_tao_unmarshal (
             indrected_strm, vb_object);
    }

  ACE_NEW_RETURN (
    vb_object,
    VBstringarray,
    false);

  StringArray_forany temp (vb_object->_boxed_inout ());
  return (strm >> temp);
}

::CORBA::Boolean
VBstringarray::_tao_unmarshal_v (TAO_InputCDR &)
{
  return true;
}



// TAO_IDL - Generated from
// be/be_visitor_valuebox/valuebox_cs.cpp:333

VBstringarray::~VBstringarray (void)
{
}

::CORBA::Boolean
VBstringarray::_tao_marshal_v (TAO_OutputCDR & strm) const
{
  StringArray_forany temp (this->_pd_value.ptr ());
  return (strm << temp);
}



// TAO_IDL - Generated from
// be/be_visitor_interface/interface_cs.cpp:48

// Traits specializations for Test.

Test_ptr
TAO::Objref_Traits<Test>::duplicate (
    Test_ptr p)
{
  return Test::_duplicate (p);
}

void
TAO::Objref_Traits<Test>::release (
    Test_ptr p)
{
  ::CORBA::release (p);
}

Test_ptr
TAO::Objref_Traits<Test>::nil (void)
{
  return Test::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<Test>::marshal (
    const Test_ptr p,
    TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:88

::VBlong *
Test::basic_op1 (
  ::VBlong * p1,
  ::VBlong *& p2,
  ::VBlong_out p3)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }

  TAO::Arg_Traits< ::VBlong>::ret_val _tao_retval;
  TAO::Arg_Traits< ::VBlong>::in_arg_val _tao_p1 (p1);
  TAO::Arg_Traits< ::VBlong>::inout_arg_val _tao_p2 (p2);
  TAO::Arg_Traits< ::VBlong>::out_arg_val _tao_p3 (p3);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_p1,
      &_tao_p2,
      &_tao_p3
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      4,
      "basic_op1",
      9,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY

    );

  _tao_call.invoke (0, 0);

  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:88

::vb_basic::M_VBlong *
Test::basic_op2 (
  ::vb_basic::M_VBlong * p1,
  ::vb_basic::M_VBlong *& p2,
  ::vb_basic::M_VBlong_out p3)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }

  TAO::Arg_Traits< ::vb_basic::M_VBlong>::ret_val _tao_retval;
  TAO::Arg_Traits< ::vb_basic::M_VBlong>::in_arg_val _tao_p1 (p1);
  TAO::Arg_Traits< ::vb_basic::M_VBlong>::inout_arg_val _tao_p2 (p2);
  TAO::Arg_Traits< ::vb_basic::M_VBlong>::out_arg_val _tao_p3 (p3);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_p1,
      &_tao_p2,
      &_tao_p3
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      4,
      "basic_op2",
      9,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY

    );

  _tao_call.invoke (0, 0);

  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:88

::CORBA::Long
Test::basic_op3 (
  ::CORBA::Long p1,
  ::CORBA::Long & p2,
  ::CORBA::Long_out p3)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }

  TAO::Arg_Traits< ::CORBA::Long>::ret_val _tao_retval;
  TAO::Arg_Traits< ::CORBA::Long>::in_arg_val _tao_p1 (p1);
  TAO::Arg_Traits< ::CORBA::Long>::inout_arg_val _tao_p2 (p2);
  TAO::Arg_Traits< ::CORBA::Long>::out_arg_val _tao_p3 (p3);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_p1,
      &_tao_p2,
      &_tao_p3
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      4,
      "basic_op3",
      9,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY

    );

  _tao_call.invoke (0, 0);

  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:88

::VBstring *
Test::string_op1 (
  ::VBstring * p1,
  ::VBstring *& p2,
  ::VBstring_out p3)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }

  TAO::Arg_Traits< ::VBstring>::ret_val _tao_retval;
  TAO::Arg_Traits< ::VBstring>::in_arg_val _tao_p1 (p1);
  TAO::Arg_Traits< ::VBstring>::inout_arg_val _tao_p2 (p2);
  TAO::Arg_Traits< ::VBstring>::out_arg_val _tao_p3 (p3);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_p1,
      &_tao_p2,
      &_tao_p3
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      4,
      "string_op1",
      10,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY

    );

  _tao_call.invoke (0, 0);

  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:88

char *
Test::string_op2 (
  const char * p1,
  char *& p2,
  ::CORBA::String_out p3)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }

  TAO::Arg_Traits< char *>::ret_val _tao_retval;
  TAO::Arg_Traits< char *>::in_arg_val _tao_p1 (p1);
  TAO::Arg_Traits< char *>::inout_arg_val _tao_p2 (p2);
  TAO::Arg_Traits< char *>::out_arg_val _tao_p3 (p3);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_p1,
      &_tao_p2,
      &_tao_p3
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      4,
      "string_op2",
      10,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY

    );

  _tao_call.invoke (0, 0);

  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:88

::VBseqlong *
Test::seq_op1 (
  ::VBseqlong * p1,
  ::VBseqlong *& p2,
  ::VBseqlong_out p3)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }

  TAO::Arg_Traits< ::VBseqlong>::ret_val _tao_retval;
  TAO::Arg_Traits< ::VBseqlong>::in_arg_val _tao_p1 (p1);
  TAO::Arg_Traits< ::VBseqlong>::inout_arg_val _tao_p2 (p2);
  TAO::Arg_Traits< ::VBseqlong>::out_arg_val _tao_p3 (p3);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_p1,
      &_tao_p2,
      &_tao_p3
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      4,
      "seq_op1",
      7,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY

    );

  _tao_call.invoke (0, 0);

  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:88

void
Test::seq_op2 (
  const ::TDseqlong & p1,
  ::TDseqlong & p2,
  ::TDseqlong_out p3)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }

  TAO::Arg_Traits< void>::ret_val _tao_retval;
  TAO::Arg_Traits< ::TDseqlong>::in_arg_val _tao_p1 (p1);
  TAO::Arg_Traits< ::TDseqlong>::inout_arg_val _tao_p2 (p2);
  TAO::Arg_Traits< ::TDseqlong>::out_arg_val _tao_p3 (p3);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_p1,
      &_tao_p2,
      &_tao_p3
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      4,
      "seq_op2",
      7,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY

    );

  _tao_call.invoke (0, 0);
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:88

::VBfixed_struct1 *
Test::struct_op1 (
  ::VBfixed_struct1 * p1,
  ::VBfixed_struct1 *& p2,
  ::VBfixed_struct1_out p3)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }

  TAO::Arg_Traits< ::VBfixed_struct1>::ret_val _tao_retval;
  TAO::Arg_Traits< ::VBfixed_struct1>::in_arg_val _tao_p1 (p1);
  TAO::Arg_Traits< ::VBfixed_struct1>::inout_arg_val _tao_p2 (p2);
  TAO::Arg_Traits< ::VBfixed_struct1>::out_arg_val _tao_p3 (p3);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_p1,
      &_tao_p2,
      &_tao_p3
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      4,
      "struct_op1",
      10,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY

    );

  _tao_call.invoke (0, 0);

  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:88

void
Test::struct_op2 (
  const ::Fixed_Struct1 & p1,
  ::Fixed_Struct1 & p2,
  ::Fixed_Struct1_out p3)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }

  TAO::Arg_Traits< void>::ret_val _tao_retval;
  TAO::Arg_Traits< ::Fixed_Struct1>::in_arg_val _tao_p1 (p1);
  TAO::Arg_Traits< ::Fixed_Struct1>::inout_arg_val _tao_p2 (p2);
  TAO::Arg_Traits< ::Fixed_Struct1>::out_arg_val _tao_p3 (p3);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_p1,
      &_tao_p2,
      &_tao_p3
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      4,
      "struct_op2",
      10,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY

    );

  _tao_call.invoke (0, 0);
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:88

::VBvariable_struct1 *
Test::struct_op3 (
  ::VBvariable_struct1 * p1,
  ::VBvariable_struct1 *& p2,
  ::VBvariable_struct1_out p3)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }

  TAO::Arg_Traits< ::VBvariable_struct1>::ret_val _tao_retval;
  TAO::Arg_Traits< ::VBvariable_struct1>::in_arg_val _tao_p1 (p1);
  TAO::Arg_Traits< ::VBvariable_struct1>::inout_arg_val _tao_p2 (p2);
  TAO::Arg_Traits< ::VBvariable_struct1>::out_arg_val _tao_p3 (p3);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_p1,
      &_tao_p2,
      &_tao_p3
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      4,
      "struct_op3",
      10,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY

    );

  _tao_call.invoke (0, 0);

  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:88

void
Test::struct_op4 (
  const ::Variable_Struct1 & p1,
  ::Variable_Struct1 & p2,
  ::Variable_Struct1_out p3)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }

  TAO::Arg_Traits< void>::ret_val _tao_retval;
  TAO::Arg_Traits< ::Variable_Struct1>::in_arg_val _tao_p1 (p1);
  TAO::Arg_Traits< ::Variable_Struct1>::inout_arg_val _tao_p2 (p2);
  TAO::Arg_Traits< ::Variable_Struct1>::out_arg_val _tao_p3 (p3);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_p1,
      &_tao_p2,
      &_tao_p3
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      4,
      "struct_op4",
      10,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY

    );

  _tao_call.invoke (0, 0);
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:88

::VBlongarray *
Test::array_op1 (
  ::VBlongarray * p1,
  ::VBlongarray *& p2,
  ::VBlongarray_out p3)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }

  TAO::Arg_Traits< ::VBlongarray>::ret_val _tao_retval;
  TAO::Arg_Traits< ::VBlongarray>::in_arg_val _tao_p1 (p1);
  TAO::Arg_Traits< ::VBlongarray>::inout_arg_val _tao_p2 (p2);
  TAO::Arg_Traits< ::VBlongarray>::out_arg_val _tao_p3 (p3);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_p1,
      &_tao_p2,
      &_tao_p3
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      4,
      "array_op1",
      9,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY

    );

  _tao_call.invoke (0, 0);

  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:88

void
Test::array_op2 (
  const ::LongArray p1,
  ::LongArray p2,
  ::LongArray_out p3)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }

  TAO::Arg_Traits< void>::ret_val _tao_retval;
  TAO::Arg_Traits< ::LongArray_tag>::in_arg_val _tao_p1 (p1);
  TAO::Arg_Traits< ::LongArray_tag>::inout_arg_val _tao_p2 (p2);
  TAO::Arg_Traits< ::LongArray_tag>::out_arg_val _tao_p3 (p3);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_p1,
      &_tao_p2,
      &_tao_p3
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      4,
      "array_op2",
      9,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY

    );

  _tao_call.invoke (0, 0);
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:88

::VBstringarray *
Test::array_op3 (
  ::VBstringarray * p1,
  ::VBstringarray *& p2,
  ::VBstringarray_out p3)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }

  TAO::Arg_Traits< ::VBstringarray>::ret_val _tao_retval;
  TAO::Arg_Traits< ::VBstringarray>::in_arg_val _tao_p1 (p1);
  TAO::Arg_Traits< ::VBstringarray>::inout_arg_val _tao_p2 (p2);
  TAO::Arg_Traits< ::VBstringarray>::out_arg_val _tao_p3 (p3);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_p1,
      &_tao_p2,
      &_tao_p3
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      4,
      "array_op3",
      9,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY

    );

  _tao_call.invoke (0, 0);

  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:88

void
Test::array_op4 (
  const ::StringArray p1,
  ::StringArray p2,
  ::StringArray_out p3)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }

  TAO::Arg_Traits< void>::ret_val _tao_retval;
  TAO::Arg_Traits< ::StringArray_tag>::in_arg_val _tao_p1 (p1);
  TAO::Arg_Traits< ::StringArray_tag>::inout_arg_val _tao_p2 (p2);
  TAO::Arg_Traits< ::StringArray_tag>::out_arg_val _tao_p3 (p3);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_p1,
      &_tao_p2,
      &_tao_p3
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      4,
      "array_op4",
      9,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY

    );

  _tao_call.invoke (0, 0);
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:88

::VBfixed_union1 *
Test::union_op1 (
  ::VBfixed_union1 * p1,
  ::VBfixed_union1 *& p2,
  ::VBfixed_union1_out p3)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }

  TAO::Arg_Traits< ::VBfixed_union1>::ret_val _tao_retval;
  TAO::Arg_Traits< ::VBfixed_union1>::in_arg_val _tao_p1 (p1);
  TAO::Arg_Traits< ::VBfixed_union1>::inout_arg_val _tao_p2 (p2);
  TAO::Arg_Traits< ::VBfixed_union1>::out_arg_val _tao_p3 (p3);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_p1,
      &_tao_p2,
      &_tao_p3
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      4,
      "union_op1",
      9,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY

    );

  _tao_call.invoke (0, 0);

  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:88

void
Test::union_op2 (
  const ::Fixed_Union1 & p1,
  ::Fixed_Union1 & p2,
  ::Fixed_Union1_out p3)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }

  TAO::Arg_Traits< void>::ret_val _tao_retval;
  TAO::Arg_Traits< ::Fixed_Union1>::in_arg_val _tao_p1 (p1);
  TAO::Arg_Traits< ::Fixed_Union1>::inout_arg_val _tao_p2 (p2);
  TAO::Arg_Traits< ::Fixed_Union1>::out_arg_val _tao_p3 (p3);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_p1,
      &_tao_p2,
      &_tao_p3
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      4,
      "union_op2",
      9,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY

    );

  _tao_call.invoke (0, 0);
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:88

::VBvariable_union1 *
Test::union_op3 (
  ::VBvariable_union1 * p1,
  ::VBvariable_union1 *& p2,
  ::VBvariable_union1_out p3)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }

  TAO::Arg_Traits< ::VBvariable_union1>::ret_val _tao_retval;
  TAO::Arg_Traits< ::VBvariable_union1>::in_arg_val _tao_p1 (p1);
  TAO::Arg_Traits< ::VBvariable_union1>::inout_arg_val _tao_p2 (p2);
  TAO::Arg_Traits< ::VBvariable_union1>::out_arg_val _tao_p3 (p3);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_p1,
      &_tao_p2,
      &_tao_p3
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      4,
      "union_op3",
      9,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY

    );

  _tao_call.invoke (0, 0);

  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:88

void
Test::union_op4 (
  const ::Variable_Union1 & p1,
  ::Variable_Union1 & p2,
  ::Variable_Union1_out p3)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }

  TAO::Arg_Traits< void>::ret_val _tao_retval;
  TAO::Arg_Traits< ::Variable_Union1>::in_arg_val _tao_p1 (p1);
  TAO::Arg_Traits< ::Variable_Union1>::inout_arg_val _tao_p2 (p2);
  TAO::Arg_Traits< ::Variable_Union1>::out_arg_val _tao_p3 (p3);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_p1,
      &_tao_p2,
      &_tao_p3
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      4,
      "union_op4",
      9,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY

    );

  _tao_call.invoke (0, 0);
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:88

void
Test::shutdown (
  void)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }

  TAO::Arg_Traits< void>::ret_val _tao_retval;

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      1,
      "shutdown",
      8,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY,
      TAO::TAO_ONEWAY_INVOCATION,
      TAO::TAO_SYNCHRONOUS_INVOCATION,
      false
    );

  _tao_call.invoke (0, 0);
}

Test::Test (void)
{
}

Test::~Test (void)
{
}

void
Test::_tao_any_destructor (void *_tao_void_pointer)
{
  Test *_tao_tmp_pointer =
    static_cast<Test *> (_tao_void_pointer);
  ::CORBA::release (_tao_tmp_pointer);
}

Test_ptr
Test::_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return
    TAO::Narrow_Utils<Test>::narrow (
        _tao_objref,
        "IDL:Test:1.0");
}

Test_ptr
Test::_unchecked_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return
    TAO::Narrow_Utils<Test>::unchecked_narrow (
        _tao_objref);
}

Test_ptr
Test::_nil (void)
{
  return 0;
}

Test_ptr
Test::_duplicate (Test_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  return obj;
}

void
Test::_tao_release (Test_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
Test::_is_a (const char *value)
{
  if (
      ACE_OS::strcmp (
          value,
          "IDL:Test:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        ) == 0
    )
    {
      return true; // success using local knowledge
    }
  else
    {
      return this->::CORBA::Object::_is_a (value);
    }
}

const char* Test::_interface_repository_id (void) const
{
  return "IDL:Test:1.0";
}

::CORBA::Boolean
Test::marshal (TAO_OutputCDR &cdr)
{
  return (cdr << this);
}

// TAO_IDL - Generated from
// be/be_visitor_typecode/objref_typecode.cpp:70

static TAO::TypeCode::Objref<char const *,
                             TAO::Null_RefCount_Policy>
  _tao_tc_Test (
    ::CORBA::tk_objref,
    "IDL:Test:1.0",
    "Test");

::CORBA::TypeCode_ptr const _tc_Test =
  &_tao_tc_Test;

// TAO_IDL - Generated from
// be/be_visitor_valuebox/any_op_cs.cpp:46
TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<VBstring>::to_value (
      ::CORBA::ValueBase *&_tao_elem
    ) const
  {
    ::CORBA::add_ref (this->value_);
    _tao_elem = this->value_;
    return true;
  }
}


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    VBstring *_tao_elem
  )
{
  ::CORBA::add_ref (_tao_elem);
  _tao_any <<= &_tao_elem;
}

// Non-copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    VBstring **_tao_elem
  )
{
  TAO::Any_Impl_T<VBstring>::insert (
      _tao_any,
      VBstring::_tao_any_destructor,
      _tc_VBstring,
      *_tao_elem
    );
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    VBstring *&_tao_elem
  )
{
  return
    TAO::Any_Impl_T<VBstring>::extract (
        _tao_any,
        VBstring::_tao_any_destructor,
        _tc_VBstring,
        _tao_elem
      );
}


TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_valuebox/any_op_cs.cpp:46
TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<VBwstring>::to_value (
      ::CORBA::ValueBase *&_tao_elem
    ) const
  {
    ::CORBA::add_ref (this->value_);
    _tao_elem = this->value_;
    return true;
  }
}


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    VBwstring *_tao_elem
  )
{
  ::CORBA::add_ref (_tao_elem);
  _tao_any <<= &_tao_elem;
}

// Non-copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    VBwstring **_tao_elem
  )
{
  TAO::Any_Impl_T<VBwstring>::insert (
      _tao_any,
      VBwstring::_tao_any_destructor,
      _tc_VBwstring,
      *_tao_elem
    );
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    VBwstring *&_tao_elem
  )
{
  return
    TAO::Any_Impl_T<VBwstring>::extract (
        _tao_any,
        VBwstring::_tao_any_destructor,
        _tc_VBwstring,
        _tao_elem
      );
}


TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_sequence/any_op_cs.cpp:45


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


// Copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    const TDseqlong &_tao_elem)
{
  TAO::Any_Dual_Impl_T<TDseqlong>::insert_copy (
      _tao_any,
      TDseqlong::_tao_any_destructor,
      _tc_TDseqlong,
      _tao_elem
    );
}

// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    TDseqlong *_tao_elem)
{
  TAO::Any_Dual_Impl_T<TDseqlong>::insert (
      _tao_any,
      TDseqlong::_tao_any_destructor,
      _tc_TDseqlong,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    TDseqlong *&_tao_elem)
{
  return _tao_any >>= const_cast<
      const TDseqlong *&> (
      _tao_elem
    );
}

// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const TDseqlong *&_tao_elem)
{
  return
    TAO::Any_Dual_Impl_T<TDseqlong>::extract (
        _tao_any,
        TDseqlong::_tao_any_destructor,
        _tc_TDseqlong,
        _tao_elem);
}
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_valuebox/any_op_cs.cpp:46
TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<VBseqlong>::to_value (
      ::CORBA::ValueBase *&_tao_elem
    ) const
  {
    ::CORBA::add_ref (this->value_);
    _tao_elem = this->value_;
    return true;
  }
}


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    VBseqlong *_tao_elem
  )
{
  ::CORBA::add_ref (_tao_elem);
  _tao_any <<= &_tao_elem;
}

// Non-copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    VBseqlong **_tao_elem
  )
{
  TAO::Any_Impl_T<VBseqlong>::insert (
      _tao_any,
      VBseqlong::_tao_any_destructor,
      _tc_VBseqlong,
      *_tao_elem
    );
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    VBseqlong *&_tao_elem
  )
{
  return
    TAO::Any_Impl_T<VBseqlong>::extract (
        _tao_any,
        VBseqlong::_tao_any_destructor,
        _tc_VBseqlong,
        _tao_elem
      );
}


TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_array/any_op_cs.cpp:37


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

void operator<<= (
    ::CORBA::Any &_tao_any,
    const LongArray_forany &_tao_elem
  )
{
  TAO::Any_Array_Impl_T<
      LongArray_slice,
      LongArray_forany
    >::insert (
        _tao_any,
        LongArray_forany::_tao_any_destructor,
        _tc_LongArray,
        _tao_elem.nocopy ()
          ? _tao_elem.ptr ()
          : LongArray_dup (_tao_elem.in ())
      );
}

::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    LongArray_forany &_tao_elem
  )
{
  return
    TAO::Any_Array_Impl_T<
        LongArray_slice,
        LongArray_forany
      >::extract (
          _tao_any,
          LongArray_forany::_tao_any_destructor,
          _tc_LongArray,
          _tao_elem.out ()
        );
}
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_valuebox/any_op_cs.cpp:46
TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<VBlongarray>::to_value (
      ::CORBA::ValueBase *&_tao_elem
    ) const
  {
    ::CORBA::add_ref (this->value_);
    _tao_elem = this->value_;
    return true;
  }
}


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    VBlongarray *_tao_elem
  )
{
  ::CORBA::add_ref (_tao_elem);
  _tao_any <<= &_tao_elem;
}

// Non-copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    VBlongarray **_tao_elem
  )
{
  TAO::Any_Impl_T<VBlongarray>::insert (
      _tao_any,
      VBlongarray::_tao_any_destructor,
      _tc_VBlongarray,
      *_tao_elem
    );
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    VBlongarray *&_tao_elem
  )
{
  return
    TAO::Any_Impl_T<VBlongarray>::extract (
        _tao_any,
        VBlongarray::_tao_any_destructor,
        _tc_VBlongarray,
        _tao_elem
      );
}


TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_array/any_op_cs.cpp:37


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

void operator<<= (
    ::CORBA::Any &_tao_any,
    const StringArray_forany &_tao_elem
  )
{
  TAO::Any_Array_Impl_T<
      StringArray_slice,
      StringArray_forany
    >::insert (
        _tao_any,
        StringArray_forany::_tao_any_destructor,
        _tc_StringArray,
        _tao_elem.nocopy ()
          ? _tao_elem.ptr ()
          : StringArray_dup (_tao_elem.in ())
      );
}

::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    StringArray_forany &_tao_elem
  )
{
  return
    TAO::Any_Array_Impl_T<
        StringArray_slice,
        StringArray_forany
      >::extract (
          _tao_any,
          StringArray_forany::_tao_any_destructor,
          _tc_StringArray,
          _tao_elem.out ()
        );
}
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_valuebox/any_op_cs.cpp:46
TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<VBstringarray>::to_value (
      ::CORBA::ValueBase *&_tao_elem
    ) const
  {
    ::CORBA::add_ref (this->value_);
    _tao_elem = this->value_;
    return true;
  }
}


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    VBstringarray *_tao_elem
  )
{
  ::CORBA::add_ref (_tao_elem);
  _tao_any <<= &_tao_elem;
}

// Non-copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    VBstringarray **_tao_elem
  )
{
  TAO::Any_Impl_T<VBstringarray>::insert (
      _tao_any,
      VBstringarray::_tao_any_destructor,
      _tc_VBstringarray,
      *_tao_elem
    );
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    VBstringarray *&_tao_elem
  )
{
  return
    TAO::Any_Impl_T<VBstringarray>::extract (
        _tao_any,
        VBstringarray::_tao_any_destructor,
        _tc_VBstringarray,
        _tao_elem
      );
}


TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_interface/any_op_cs.cpp:38
TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<Test>::to_object (
      ::CORBA::Object_ptr &_tao_elem) const
  {
    _tao_elem = ::CORBA::Object::_duplicate (this->value_);
    return true;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



/// Copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    Test_ptr _tao_elem)
{
  Test_ptr _tao_objptr =
    Test::_duplicate (_tao_elem);
  _tao_any <<= &_tao_objptr;
}

/// Non-copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    Test_ptr *_tao_elem)
{
  TAO::Any_Impl_T<Test>::insert (
      _tao_any,
      Test::_tao_any_destructor,
      _tc_Test,
      *_tao_elem);
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    Test_ptr &_tao_elem)
{
  return
    TAO::Any_Impl_T<Test>::extract (
        _tao_any,
        Test::_tao_any_destructor,
        _tc_Test,
        _tao_elem);
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_valuebox/cdr_op_cs.cpp:41


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean
operator<< (
    TAO_OutputCDR &strm,
    const VBstring *_tao_valuebox
  )
{
  return
    ::CORBA::ValueBase::_tao_marshal (
        strm,
        _tao_valuebox,
        reinterpret_cast<ptrdiff_t> (&VBstring::_downcast)
      );
}

::CORBA::Boolean
operator>> (
    TAO_InputCDR &strm,
    VBstring *&_tao_valuebox
  )
{
  return VBstring::_tao_unmarshal (strm, _tao_valuebox);
}


TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_valuebox/cdr_op_cs.cpp:41


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean
operator<< (
    TAO_OutputCDR &strm,
    const VBwstring *_tao_valuebox
  )
{
  return
    ::CORBA::ValueBase::_tao_marshal (
        strm,
        _tao_valuebox,
        reinterpret_cast<ptrdiff_t> (&VBwstring::_downcast)
      );
}

::CORBA::Boolean
operator>> (
    TAO_InputCDR &strm,
    VBwstring *&_tao_valuebox
  )
{
  return VBwstring::_tao_unmarshal (strm, _tao_valuebox);
}


TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_sequence/cdr_op_cs.cpp:93
#if !defined _TAO_CDR_OP_TDseqlong_CPP_
#define _TAO_CDR_OP_TDseqlong_CPP_

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const TDseqlong &_tao_sequence)
{
  return TAO::marshal_sequence(strm, _tao_sequence);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    TDseqlong &_tao_sequence)
{
  return TAO::demarshal_sequence(strm, _tao_sequence);
}


TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_CDR_OP_TDseqlong_CPP_ */

// TAO_IDL - Generated from
// be/be_visitor_valuebox/cdr_op_cs.cpp:41


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean
operator<< (
    TAO_OutputCDR &strm,
    const VBseqlong *_tao_valuebox
  )
{
  return
    ::CORBA::ValueBase::_tao_marshal (
        strm,
        _tao_valuebox,
        reinterpret_cast<ptrdiff_t> (&VBseqlong::_downcast)
      );
}

::CORBA::Boolean
operator>> (
    TAO_InputCDR &strm,
    VBseqlong *&_tao_valuebox
  )
{
  return VBseqlong::_tao_unmarshal (strm, _tao_valuebox);
}


TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_array/cdr_op_cs.cpp:163


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const LongArray_forany &_tao_array)
{
  return
    strm.write_long_array (
        reinterpret_cast <const ACE_CDR::Long *> (_tao_array.in ()),
        3);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    LongArray_forany &_tao_array)
{
  return
    strm.read_long_array (
        reinterpret_cast <ACE_CDR::Long *> (_tao_array.out ()),
        3);
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_valuebox/cdr_op_cs.cpp:41


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean
operator<< (
    TAO_OutputCDR &strm,
    const VBlongarray *_tao_valuebox
  )
{
  return
    ::CORBA::ValueBase::_tao_marshal (
        strm,
        _tao_valuebox,
        reinterpret_cast<ptrdiff_t> (&VBlongarray::_downcast)
      );
}

::CORBA::Boolean
operator>> (
    TAO_InputCDR &strm,
    VBlongarray *&_tao_valuebox
  )
{
  return VBlongarray::_tao_unmarshal (strm, _tao_valuebox);
}


TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_array/cdr_op_cs.cpp:163


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const StringArray_forany &_tao_array)
{
  CORBA::Boolean _tao_marshal_flag = true;

  for ( ::CORBA::ULong i0 = 0; i0 < 2 && _tao_marshal_flag; ++i0)
    {
      _tao_marshal_flag = (strm << _tao_array [i0].in ());
    }

  return _tao_marshal_flag;
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    StringArray_forany &_tao_array)
{
  CORBA::Boolean _tao_marshal_flag = true;

  for ( ::CORBA::ULong i0 = 0; i0 < 2 && _tao_marshal_flag; ++i0)
    {
      _tao_marshal_flag = (strm >> _tao_array [i0].out ());
    }

  return _tao_marshal_flag;
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_valuebox/cdr_op_cs.cpp:41


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean
operator<< (
    TAO_OutputCDR &strm,
    const VBstringarray *_tao_valuebox
  )
{
  return
    ::CORBA::ValueBase::_tao_marshal (
        strm,
        _tao_valuebox,
        reinterpret_cast<ptrdiff_t> (&VBstringarray::_downcast)
      );
}

::CORBA::Boolean
operator>> (
    TAO_InputCDR &strm,
    VBstringarray *&_tao_valuebox
  )
{
  return VBstringarray::_tao_unmarshal (strm, _tao_valuebox);
}


TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_interface/cdr_op_cs.cpp:51

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Test_ptr _tao_objref)
{
  ::CORBA::Object_ptr _tao_corba_obj = _tao_objref;
  return (strm << _tao_corba_obj);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Test_ptr &_tao_objref)
{
  ::CORBA::Object_var obj;

  if (!(strm >> obj.inout ()))
    {
      return false;
    }

  typedef ::Test RHS_SCOPED_NAME;

  // Narrow to the right type.
  _tao_objref =
    TAO::Narrow_Utils<RHS_SCOPED_NAME>::unchecked_narrow (obj.in ());

  return true;
}

TAO_END_VERSIONED_NAMESPACE_DECL



