// -*- C++ -*-
/**
 * Code generated by the The ACE ORB (TAO) IDL Compiler v2.4.1
 * TAO and the TAO IDL Compiler have been developed by:
 *       Center for Distributed Object Computing
 *       Washington University
 *       St. Louis, MO
 *       USA
 *       http://www.cs.wustl.edu/~schmidt/doc-center.html
 * and
 *       Distributed Object Computing Laboratory
 *       University of California at Irvine
 *       Irvine, CA
 *       USA
 * and
 *       Institute for Software Integrated Systems
 *       Vanderbilt University
 *       Nashville, TN
 *       USA
 *       http://www.isis.vanderbilt.edu/
 *
 * Information about TAO is available at:
 *     http://www.dre.vanderbilt.edu/~schmidt/TAO.html
 **/


// TAO_IDL - Generated from
// be/be_visitor_valuebox/valuebox_ci.cpp:282

ACE_INLINE
VBstring::VBstring (void)
{}

ACE_INLINE
VBstring::VBstring (char * val)
{
  this->_pd_value = val;
}

ACE_INLINE
VBstring::VBstring (const VBstring& val)
  : ::CORBA::ValueBase (val),
    ::CORBA::DefaultValueRefCountBase (val)
{
  this->_pd_value = val._pd_value;
}

ACE_INLINE VBstring &
VBstring::operator= (char * val)
{
  this->_pd_value = val;
  return *this;
}

ACE_INLINE
VBstring::VBstring (const char * val)
{
  this->_pd_value = val;
}

ACE_INLINE
VBstring::VBstring (const ::CORBA::String_var& var)
{
  this->_pd_value = var;
}

ACE_INLINE VBstring &
VBstring::operator= (const char * val)
{
  this->_pd_value = val;
  return *this;
}

ACE_INLINE VBstring &
VBstring::operator= (const ::CORBA::String_var& var)
{
  this->_pd_value = var;
  return *this;
}

ACE_INLINE const char *
VBstring::_value (void) const
{
  return this->_pd_value.in ();
}

ACE_INLINE void
VBstring::_value (char * val)
{
  this->_pd_value = val;
}

ACE_INLINE void
VBstring::_value (const char * val)
{
  this->_pd_value = val;
}

ACE_INLINE void
VBstring::_value (const ::CORBA::String_var& var)
{
  this->_pd_value = var;
}

ACE_INLINE const char *
VBstring::_boxed_in (void) const
{
  return this->_pd_value.in ();
}

ACE_INLINE char *&
VBstring::_boxed_inout (void)
{
  return this->_pd_value.inout ();
}

ACE_INLINE char *&
VBstring::_boxed_out (void)
{
  return this->_pd_value.out ();
}

ACE_INLINE ::CORBA::Char &
VBstring::operator[] ( ::CORBA::ULong slot)
{
  return this->_pd_value[slot];
}

ACE_INLINE ::CORBA::Char
VBstring::operator[] ( ::CORBA::ULong slot) const
{
  return this->_pd_value[slot];
}



// TAO_IDL - Generated from
// be/be_visitor_valuebox/valuebox_ci.cpp:49
ACE_INLINE const char*
VBstring::_tao_obv_static_repository_id ()
{
  return "IDL:VBstring:1.0";
}



// TAO_IDL - Generated from
// be/be_visitor_valuebox/valuebox_ci.cpp:282

ACE_INLINE
VBwstring::VBwstring (void)
{}

ACE_INLINE
VBwstring::VBwstring (CORBA::WChar * val)
{
  this->_pd_value = val;
}

ACE_INLINE
VBwstring::VBwstring (const VBwstring& val)
  : ::CORBA::ValueBase (val),
    ::CORBA::DefaultValueRefCountBase (val)
{
  this->_pd_value = val._pd_value;
}

ACE_INLINE VBwstring &
VBwstring::operator= (CORBA::WChar * val)
{
  this->_pd_value = val;
  return *this;
}

ACE_INLINE
VBwstring::VBwstring (const CORBA::WChar * val)
{
  this->_pd_value = val;
}

ACE_INLINE
VBwstring::VBwstring (const ::CORBA::WString_var& var)
{
  this->_pd_value = var;
}

ACE_INLINE VBwstring &
VBwstring::operator= (const CORBA::WChar * val)
{
  this->_pd_value = val;
  return *this;
}

ACE_INLINE VBwstring &
VBwstring::operator= (const ::CORBA::WString_var& var)
{
  this->_pd_value = var;
  return *this;
}

ACE_INLINE const CORBA::WChar *
VBwstring::_value (void) const
{
  return this->_pd_value.in ();
}

ACE_INLINE void
VBwstring::_value (CORBA::WChar * val)
{
  this->_pd_value = val;
}

ACE_INLINE void
VBwstring::_value (const CORBA::WChar * val)
{
  this->_pd_value = val;
}

ACE_INLINE void
VBwstring::_value (const ::CORBA::WString_var& var)
{
  this->_pd_value = var;
}

ACE_INLINE const CORBA::WChar *
VBwstring::_boxed_in (void) const
{
  return this->_pd_value.in ();
}

ACE_INLINE CORBA::WChar *&
VBwstring::_boxed_inout (void)
{
  return this->_pd_value.inout ();
}

ACE_INLINE CORBA::WChar *&
VBwstring::_boxed_out (void)
{
  return this->_pd_value.out ();
}

ACE_INLINE ::CORBA::WChar &
VBwstring::operator[] ( ::CORBA::ULong slot)
{
  return this->_pd_value[slot];
}

ACE_INLINE ::CORBA::WChar
VBwstring::operator[] ( ::CORBA::ULong slot) const
{
  return this->_pd_value[slot];
}



// TAO_IDL - Generated from
// be/be_visitor_valuebox/valuebox_ci.cpp:49
ACE_INLINE const char*
VBwstring::_tao_obv_static_repository_id ()
{
  return "IDL:VBwstring:1.0";
}



// TAO_IDL - Generated from
// be/be_visitor_valuebox/valuebox_ci.cpp:220

ACE_INLINE
VBseqlong::VBseqlong (void)
{
  TDseqlong* p = 0;
  ACE_NEW (
    p,
    TDseqlong ());
  this->_pd_value = p;
}

ACE_INLINE
VBseqlong::VBseqlong (const TDseqlong& value)
{
  TDseqlong* p = 0;
  ACE_NEW (
    p,
    TDseqlong (value));
  this->_pd_value = p;
}

ACE_INLINE
VBseqlong::VBseqlong (const VBseqlong& val)
  : ::CORBA::ValueBase (val),
    ::CORBA::DefaultValueRefCountBase (val)
{
  TDseqlong* p = 0;
  ACE_NEW (
    p,
    TDseqlong (val._pd_value.in ()));
  this->_pd_value = p;
}

ACE_INLINE VBseqlong &
VBseqlong::operator= (const TDseqlong& value)
{
  TDseqlong* p = 0;
  ACE_NEW_RETURN (
    p,
    TDseqlong (value),
    *this);

  this->_pd_value = p;
  return *this;
}

ACE_INLINE const TDseqlong &
VBseqlong::_value (void) const
{
  return this->_pd_value.in ();
}

ACE_INLINE TDseqlong &
VBseqlong::_value (void)
{
  return this->_pd_value.inout ();
}

ACE_INLINE void
VBseqlong::_value (const TDseqlong& value)
{
  TDseqlong* p = 0;
  ACE_NEW (
    p,
    TDseqlong (value));
  this->_pd_value = p;
}

ACE_INLINE const TDseqlong &
VBseqlong::_boxed_in (void) const
{
  return this->_pd_value.in ();
}

ACE_INLINE TDseqlong&
VBseqlong::_boxed_inout (void)
{
  return this->_pd_value.inout ();
}

ACE_INLINE TDseqlong*&
VBseqlong::_boxed_out (void)
{
  return this->_pd_value.out ();
}

ACE_INLINE ::CORBA::ULong
VBseqlong::maximum (void) const
{
  return this->_pd_value->maximum ();
}

ACE_INLINE ::CORBA::ULong
VBseqlong::length (void) const
{
  return this->_pd_value->length ();
}

ACE_INLINE void
VBseqlong::length ( ::CORBA::ULong length)
{
  this->_pd_value->length (length);
}



// TAO_IDL - Generated from
// be/be_visitor_valuebox/valuebox_ci.cpp:49
ACE_INLINE const char*
VBseqlong::_tao_obv_static_repository_id ()
{
  return "IDL:VBseqlong:1.0";
}



// TAO_IDL - Generated from
// be/be_visitor_array/array_ci.cpp:147

TAO_BEGIN_VERSIONED_NAMESPACE_DECL


ACE_INLINE
void
TAO::Array_Traits<LongArray_forany>::free (
    LongArray_slice * _tao_slice)
{
  LongArray_free (_tao_slice);
}

ACE_INLINE
LongArray_slice *
TAO::Array_Traits<LongArray_forany>::dup (
    const LongArray_slice * _tao_slice)
{
  return LongArray_dup (_tao_slice);
}

ACE_INLINE
void
TAO::Array_Traits<LongArray_forany>::copy (
    LongArray_slice * _tao_to,
    const LongArray_slice * _tao_from)
{
  LongArray_copy (_tao_to, _tao_from);
}

ACE_INLINE
void
TAO::Array_Traits<LongArray_forany>::zero (
    LongArray_slice * _tao_slice)
{
  // Zero each individual element.
  for ( ::CORBA::ULong i0 = 0; i0 < 3; ++i0)
    {
      _tao_slice[i0] = ::CORBA::Long ();
    }
}

ACE_INLINE
LongArray_slice *
TAO::Array_Traits<LongArray_forany>::alloc (void)
{
  return LongArray_alloc ();
}


TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// be/be_visitor_valuebox/valuebox_ci.cpp:72

ACE_INLINE
VBlongarray::VBlongarray (void)
{
  this->_pd_value = LongArray_alloc ();
}

ACE_INLINE
VBlongarray::VBlongarray (const LongArray val)
{
  this->_pd_value = LongArray_dup (val);
}

ACE_INLINE
VBlongarray::VBlongarray (const VBlongarray& val)
  : ::CORBA::ValueBase (val),
    ::CORBA::DefaultValueRefCountBase (val)
{
  this->_pd_value = LongArray_dup (val._pd_value.in ());
}

ACE_INLINE VBlongarray &
VBlongarray::operator= (const LongArray val)
{
  this->_pd_value = LongArray_dup (val);
  return *this;
}

ACE_INLINE const LongArray_slice*
VBlongarray::_value (void) const
{
  return this->_pd_value.in ();
}

ACE_INLINE LongArray_slice*
VBlongarray::_value (void)
{
  return this->_pd_value.inout ();
}

ACE_INLINE void
VBlongarray::_value (const LongArray val)
{
  this->_pd_value = LongArray_dup (val);
}

ACE_INLINE const LongArray_slice &
VBlongarray::operator[] ( ::CORBA::ULong index) const
{
  return this->_pd_value[index];
}

ACE_INLINE LongArray_slice &
VBlongarray::operator[] ( ::CORBA::ULong index)
{
  return this->_pd_value[index];
}

ACE_INLINE const LongArray_slice *
VBlongarray::_boxed_in (void) const
{
  return this->_pd_value.in ();
}

ACE_INLINE LongArray_slice *
VBlongarray::_boxed_inout (void)
{
  return this->_pd_value.inout ();
}

ACE_INLINE LongArray_slice *
VBlongarray::_boxed_out (void)
{
  return this->_pd_value.out ();
}



// TAO_IDL - Generated from
// be/be_visitor_valuebox/valuebox_ci.cpp:49
ACE_INLINE const char*
VBlongarray::_tao_obv_static_repository_id ()
{
  return "IDL:VBlongarray:1.0";
}



// TAO_IDL - Generated from
// be/be_visitor_array/array_ci.cpp:147

TAO_BEGIN_VERSIONED_NAMESPACE_DECL


ACE_INLINE
void
TAO::Array_Traits<StringArray_forany>::free (
    StringArray_slice * _tao_slice)
{
  StringArray_free (_tao_slice);
}

ACE_INLINE
StringArray_slice *
TAO::Array_Traits<StringArray_forany>::dup (
    const StringArray_slice * _tao_slice)
{
  return StringArray_dup (_tao_slice);
}

ACE_INLINE
void
TAO::Array_Traits<StringArray_forany>::copy (
    StringArray_slice * _tao_to,
    const StringArray_slice * _tao_from)
{
  StringArray_copy (_tao_to, _tao_from);
}

ACE_INLINE
void
TAO::Array_Traits<StringArray_forany>::zero (
    StringArray_slice * _tao_slice)
{
  // Zero each individual element.
  for ( ::CORBA::ULong i0 = 0; i0 < 2; ++i0)
    {
      _tao_slice[i0] = ::TAO::String_Manager ();
    }
}

ACE_INLINE
StringArray_slice *
TAO::Array_Traits<StringArray_forany>::alloc (void)
{
  return StringArray_alloc ();
}


TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// be/be_visitor_valuebox/valuebox_ci.cpp:72

ACE_INLINE
VBstringarray::VBstringarray (void)
{
  this->_pd_value = StringArray_alloc ();
}

ACE_INLINE
VBstringarray::VBstringarray (const StringArray val)
{
  this->_pd_value = StringArray_dup (val);
}

ACE_INLINE
VBstringarray::VBstringarray (const VBstringarray& val)
  : ::CORBA::ValueBase (val),
    ::CORBA::DefaultValueRefCountBase (val)
{
  this->_pd_value = StringArray_dup (val._pd_value.in ());
}

ACE_INLINE VBstringarray &
VBstringarray::operator= (const StringArray val)
{
  this->_pd_value = StringArray_dup (val);
  return *this;
}

ACE_INLINE const StringArray_slice*
VBstringarray::_value (void) const
{
  return this->_pd_value.in ();
}

ACE_INLINE StringArray_slice*
VBstringarray::_value (void)
{
  return this->_pd_value.inout ();
}

ACE_INLINE void
VBstringarray::_value (const StringArray val)
{
  this->_pd_value = StringArray_dup (val);
}

ACE_INLINE const StringArray_slice &
VBstringarray::operator[] ( ::CORBA::ULong index) const
{
  return this->_pd_value[index];
}

ACE_INLINE StringArray_slice &
VBstringarray::operator[] ( ::CORBA::ULong index)
{
  return this->_pd_value[index];
}

ACE_INLINE const StringArray_slice *
VBstringarray::_boxed_in (void) const
{
  return this->_pd_value.in ();
}

ACE_INLINE StringArray_slice *
VBstringarray::_boxed_inout (void)
{
  return this->_pd_value.inout ();
}

ACE_INLINE StringArray_slice *
VBstringarray::_boxed_out (void)
{
  return this->_pd_value.out ();
}



// TAO_IDL - Generated from
// be/be_visitor_valuebox/valuebox_ci.cpp:49
ACE_INLINE const char*
VBstringarray::_tao_obv_static_repository_id ()
{
  return "IDL:VBstringarray:1.0";
}



// TAO_IDL - Generated from
// be/be_visitor_interface/interface_ci.cpp:59

ACE_INLINE
Test::Test (
    TAO_Stub *objref,
    ::CORBA::Boolean _tao_collocated,
    TAO_Abstract_ServantBase *servant,
    TAO_ORB_Core *oc)
  : ::CORBA::Object (objref, _tao_collocated, servant, oc)
{
}

ACE_INLINE
Test::Test (
    ::IOP::IOR *ior,
    TAO_ORB_Core *oc)
  : ::CORBA::Object (ior, oc)
{
}

