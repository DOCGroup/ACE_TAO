// -*- C++ -*-
/**
 * Code generated by the The ACE ORB (TAO) IDL Compiler v2.4.1
 * TAO and the TAO IDL Compiler have been developed by:
 *       Center for Distributed Object Computing
 *       Washington University
 *       St. Louis, MO
 *       USA
 *       http://www.cs.wustl.edu/~schmidt/doc-center.html
 * and
 *       Distributed Object Computing Laboratory
 *       University of California at Irvine
 *       Irvine, CA
 *       USA
 * and
 *       Institute for Software Integrated Systems
 *       Vanderbilt University
 *       Nashville, TN
 *       USA
 *       http://www.isis.vanderbilt.edu/
 *
 * Information about TAO is available at:
 *     http://www.dre.vanderbilt.edu/~schmidt/TAO.html
 **/


// TAO_IDL - Generated from
// be/be_codegen.cpp:649

#ifndef _TAO_IDL_VALUEBOXS_U64EYB_CPP_
#define _TAO_IDL_VALUEBOXS_U64EYB_CPP_


#include "valueboxS.h"
#include "tao/PortableServer/Operation_Table_Perfect_Hash.h"
#include "tao/PortableServer/Upcall_Command.h"
#include "tao/PortableServer/Upcall_Wrapper.h"
#include "tao/TAO_Server_Request.h"
#include "tao/ORB_Core.h"
#include "tao/Profile.h"
#include "tao/Stub.h"
#include "tao/IFR_Client_Adapter.h"
#include "tao/Object_T.h"
#include "tao/AnyTypeCode/TypeCode.h"
#include "tao/AnyTypeCode/DynamicC.h"
#include "tao/CDR.h"
#include "tao/operation_details.h"
#include "tao/PortableInterceptor.h"
#include "ace/Dynamic_Service.h"
#include "ace/Malloc_Allocator.h"

// TAO_IDL - Generated from
// be/be_interface.cpp:1865

class TAO_Test_Perfect_Hash_OpTable
  : public TAO_Perfect_Hash_OpTable
{
private:
  unsigned int hash (const char *str, unsigned int len);

public:
  const TAO_operation_db_entry * lookup (const char *str, unsigned int len);
};

/* C++ code produced by gperf version 2.8 (ACE version) */
/* Command-line: /mnt/win_d/projects/ATCD/ACE/bin/ace_gperf -m -M -J -c -C -D -E -T -f 0 -F 0,0 -a -o -t -p -K opname -L C++ -Z TAO_Test_Perfect_Hash_OpTable -N lookup  */
unsigned int
TAO_Test_Perfect_Hash_OpTable::hash (const char *str, unsigned int len)
{
  static const unsigned char asso_values[] =
    {
     50, 50, 50, 50, 50, 50, 50, 50, 50, 50,
     50, 50, 50, 50, 50, 50, 50, 50, 50, 50,
     50, 50, 50, 50, 50, 50, 50, 50, 50, 50,
     50, 50, 50, 50, 50, 50, 50, 50, 50, 50,
     50, 50, 50, 50, 50, 50, 50, 50, 50,  5,
      0, 10,  8, 50, 50, 50, 50, 50, 50, 50,
     50, 50, 50, 50, 50, 50, 50, 50, 50, 50,
     50, 50, 50, 50, 50, 50, 50, 50, 50, 50,
     50, 50, 50, 50, 50, 50, 50, 50, 50, 50,
     50, 50, 50, 50, 50,  0, 50,  0, 30, 50,
      8, 20, 50, 50, 50, 50, 50, 50, 50, 50,
      0, 50, 50, 50, 50,  0, 15, 15, 50, 50,
     50, 50, 50, 50, 50, 50, 50, 50,
    };
  return len + asso_values[static_cast<int>(str[len - 1])] + asso_values[static_cast<int>(str[0])];
}

const TAO_operation_db_entry *
TAO_Test_Perfect_Hash_OpTable::lookup (const char *str, unsigned int len)
{
  enum
    {
      TOTAL_KEYWORDS = 25,
      MIN_WORD_LENGTH = 5,
      MAX_WORD_LENGTH = 14,
      MIN_HASH_VALUE = 5,
      MAX_HASH_VALUE = 49,
      HASH_VALUE_RANGE = 45,
      DUPLICATES = 3,
      WORDLIST_SIZE = 30
    };

  static const TAO_operation_db_entry wordlist[] =
    {
      {"",0,0},{"",0,0},{"",0,0},{"",0,0},{"",0,0},
      {"_is_a", &TAO_ServantBase::_is_a_thru_poa_skel, 0},
      {"seq_op2", &POA_Test::seq_op2_skel, 0},
      {"shutdown", &POA_Test::shutdown_skel, 0},
      {"array_op2", &POA_Test::array_op2_skel, 0},
      {"string_op2", &POA_Test::string_op2_skel, 0},
      {"struct_op2", &POA_Test::struct_op2_skel, 0},
      {"seq_op1", &POA_Test::seq_op1_skel, 0},
      {"array_op1", &POA_Test::array_op1_skel, 0},
      {"string_op1", &POA_Test::string_op1_skel, 0},
      {"struct_op1", &POA_Test::struct_op1_skel, 0},
      {"array_op4", &POA_Test::array_op4_skel, 0},
      {"struct_op4", &POA_Test::struct_op4_skel, 0},
      {"array_op3", &POA_Test::array_op3_skel, 0},
      {"struct_op3", &POA_Test::struct_op3_skel, 0},
      {"_repository_id", &TAO_ServantBase::_repository_id_thru_poa_skel, 0},
      {"union_op2", &POA_Test::union_op2_skel, 0},
      {"_component", &TAO_ServantBase::_component_thru_poa_skel, 0},
      {"_non_existent", &TAO_ServantBase::_non_existent_thru_poa_skel, 0},
      {"union_op1", &POA_Test::union_op1_skel, 0},
      {"_interface", &TAO_ServantBase::_interface_skel, 0},
      {"union_op4", &POA_Test::union_op4_skel, 0},
      {"union_op3", &POA_Test::union_op3_skel, 0},
      {"basic_op2", &POA_Test::basic_op2_skel, 0},
      {"basic_op1", &POA_Test::basic_op1_skel, 0},
      {"basic_op3", &POA_Test::basic_op3_skel, 0},
    };

  static const signed char lookup[] =
    {
       -1,  -9,  -2, -13,  -2,   5,  -1,   6,   7,   8, -58,  -1,  11,  -1,
       12, -61,  -1,  15,  16,  17,  18,  -1,  19,  -1,  20,  21,  -1,  -1,
       22,  23,  24,  -1,  25,  -1,  26,  -1,  -1,  -1,  -1,  27,  -1,  -1,
       -1,  -1,  28,  -1,  -1,  -1,  -1,  29,
    };

  if (len <= MAX_WORD_LENGTH && len >= MIN_WORD_LENGTH)
    {
      unsigned int key = hash (str, len);

      if (key <= MAX_HASH_VALUE && key >= MIN_HASH_VALUE)
        {
          int slot = lookup[key];

          if (slot >= 0 && slot < WORDLIST_SIZE)
            {
              const char *s = wordlist[slot].opname;

              if (*str == *s && !ACE_OS::strncmp (str + 1, s + 1, len - 1))
                return &wordlist[slot];
            }
          else if (slot < 0 && slot >= -MAX_HASH_VALUE)
            return 0;
          else
            {
              unsigned int offset = key + slot + (slot > 0 ? -MAX_HASH_VALUE : MAX_HASH_VALUE);
              const TAO_operation_db_entry *base = &wordlist[-lookup[offset]];
              const TAO_operation_db_entry *ptr = base + -lookup[offset + 1];

              while (--ptr >= base)
                if (*str == *ptr->opname && !ACE_OS::strncmp (str + 1, ptr->opname + 1, len - 1))
                  return ptr;
            }
        }
    }
  return 0;
}

static TAO_Test_Perfect_Hash_OpTable tao_Test_optable;

// TAO_IDL - Generated from
// be/be_visitor_interface/interface_ss.cpp:90

POA_Test::POA_Test (void)
  : TAO_ServantBase ()
{
  this->optable_ = &tao_Test_optable;
}

POA_Test::POA_Test (const POA_Test& rhs)
  : TAO_Abstract_ServantBase (rhs),
    TAO_ServantBase (rhs)
{
}

POA_Test::~POA_Test (void)
{
}


// TAO_IDL - Generated from
// be/be_visitor_operation/upcall_command_ss.cpp:80

class basic_op1_Test
  : public TAO::Upcall_Command
{
public:
  inline basic_op1_Test (
    POA_Test * servant,
    TAO_Operation_Details const * operation_details,
    TAO::Argument * const args[])
    : servant_ (servant)
      , operation_details_ (operation_details)
      , args_ (args)
  {
  }

  virtual void execute (void)
  {
    TAO::SArg_Traits< ::VBlong>::ret_arg_type retval =
      TAO::Portable_Server::get_ret_arg< ::VBlong> (
        this->operation_details_,
        this->args_);

    TAO::SArg_Traits< ::VBlong>::in_arg_type arg_1 =
      TAO::Portable_Server::get_in_arg< ::VBlong> (
        this->operation_details_,
        this->args_,
        1);

    TAO::SArg_Traits< ::VBlong>::inout_arg_type arg_2 =
      TAO::Portable_Server::get_inout_arg< ::VBlong> (
        this->operation_details_,
        this->args_,
        2);

    TAO::SArg_Traits< ::VBlong>::out_arg_type arg_3 =
      TAO::Portable_Server::get_out_arg< ::VBlong> (
        this->operation_details_,
        this->args_,
        3);

    retval =
      this->servant_->basic_op1 (
        arg_1
        , arg_2
        , arg_3);
  }

private:
  POA_Test * const servant_;
  TAO_Operation_Details const * const operation_details_;
  TAO::Argument * const * const args_;
};

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_ss.cpp:168

void POA_Test::basic_op1_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::VBlong>::ret_val retval;
  TAO::SArg_Traits< ::VBlong>::in_arg_val _tao_p1;
  TAO::SArg_Traits< ::VBlong>::inout_arg_val _tao_p2;
  TAO::SArg_Traits< ::VBlong>::out_arg_val _tao_p3;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_p1,
      &_tao_p2,
      &_tao_p3
    };

  static size_t const nargs = 4;

  POA_Test * const impl =
    dynamic_cast<POA_Test *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  basic_op1_Test command (
    impl,
    server_request.operation_details (),
    args);

  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}



// TAO_IDL - Generated from
// be/be_visitor_operation/upcall_command_ss.cpp:80

class basic_op2_Test
  : public TAO::Upcall_Command
{
public:
  inline basic_op2_Test (
    POA_Test * servant,
    TAO_Operation_Details const * operation_details,
    TAO::Argument * const args[])
    : servant_ (servant)
      , operation_details_ (operation_details)
      , args_ (args)
  {
  }

  virtual void execute (void)
  {
    TAO::SArg_Traits< ::vb_basic::M_VBlong>::ret_arg_type retval =
      TAO::Portable_Server::get_ret_arg< ::vb_basic::M_VBlong> (
        this->operation_details_,
        this->args_);

    TAO::SArg_Traits< ::vb_basic::M_VBlong>::in_arg_type arg_1 =
      TAO::Portable_Server::get_in_arg< ::vb_basic::M_VBlong> (
        this->operation_details_,
        this->args_,
        1);

    TAO::SArg_Traits< ::vb_basic::M_VBlong>::inout_arg_type arg_2 =
      TAO::Portable_Server::get_inout_arg< ::vb_basic::M_VBlong> (
        this->operation_details_,
        this->args_,
        2);

    TAO::SArg_Traits< ::vb_basic::M_VBlong>::out_arg_type arg_3 =
      TAO::Portable_Server::get_out_arg< ::vb_basic::M_VBlong> (
        this->operation_details_,
        this->args_,
        3);

    retval =
      this->servant_->basic_op2 (
        arg_1
        , arg_2
        , arg_3);
  }

private:
  POA_Test * const servant_;
  TAO_Operation_Details const * const operation_details_;
  TAO::Argument * const * const args_;
};

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_ss.cpp:168

void POA_Test::basic_op2_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::vb_basic::M_VBlong>::ret_val retval;
  TAO::SArg_Traits< ::vb_basic::M_VBlong>::in_arg_val _tao_p1;
  TAO::SArg_Traits< ::vb_basic::M_VBlong>::inout_arg_val _tao_p2;
  TAO::SArg_Traits< ::vb_basic::M_VBlong>::out_arg_val _tao_p3;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_p1,
      &_tao_p2,
      &_tao_p3
    };

  static size_t const nargs = 4;

  POA_Test * const impl =
    dynamic_cast<POA_Test *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  basic_op2_Test command (
    impl,
    server_request.operation_details (),
    args);

  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}



// TAO_IDL - Generated from
// be/be_visitor_operation/upcall_command_ss.cpp:80

class basic_op3_Test
  : public TAO::Upcall_Command
{
public:
  inline basic_op3_Test (
    POA_Test * servant,
    TAO_Operation_Details const * operation_details,
    TAO::Argument * const args[])
    : servant_ (servant)
      , operation_details_ (operation_details)
      , args_ (args)
  {
  }

  virtual void execute (void)
  {
    TAO::SArg_Traits< ::CORBA::Long>::ret_arg_type retval =
      TAO::Portable_Server::get_ret_arg< ::CORBA::Long> (
        this->operation_details_,
        this->args_);

    TAO::SArg_Traits< ::CORBA::Long>::in_arg_type arg_1 =
      TAO::Portable_Server::get_in_arg< ::CORBA::Long> (
        this->operation_details_,
        this->args_,
        1);

    TAO::SArg_Traits< ::CORBA::Long>::inout_arg_type arg_2 =
      TAO::Portable_Server::get_inout_arg< ::CORBA::Long> (
        this->operation_details_,
        this->args_,
        2);

    TAO::SArg_Traits< ::CORBA::Long>::out_arg_type arg_3 =
      TAO::Portable_Server::get_out_arg< ::CORBA::Long> (
        this->operation_details_,
        this->args_,
        3);

    retval =
      this->servant_->basic_op3 (
        arg_1
        , arg_2
        , arg_3);
  }

private:
  POA_Test * const servant_;
  TAO_Operation_Details const * const operation_details_;
  TAO::Argument * const * const args_;
};

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_ss.cpp:168

void POA_Test::basic_op3_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::CORBA::Long>::ret_val retval;
  TAO::SArg_Traits< ::CORBA::Long>::in_arg_val _tao_p1;
  TAO::SArg_Traits< ::CORBA::Long>::inout_arg_val _tao_p2;
  TAO::SArg_Traits< ::CORBA::Long>::out_arg_val _tao_p3;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_p1,
      &_tao_p2,
      &_tao_p3
    };

  static size_t const nargs = 4;

  POA_Test * const impl =
    dynamic_cast<POA_Test *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  basic_op3_Test command (
    impl,
    server_request.operation_details (),
    args);

  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}



// TAO_IDL - Generated from
// be/be_visitor_operation/upcall_command_ss.cpp:80

class string_op1_Test
  : public TAO::Upcall_Command
{
public:
  inline string_op1_Test (
    POA_Test * servant,
    TAO_Operation_Details const * operation_details,
    TAO::Argument * const args[])
    : servant_ (servant)
      , operation_details_ (operation_details)
      , args_ (args)
  {
  }

  virtual void execute (void)
  {
    TAO::SArg_Traits< ::VBstring>::ret_arg_type retval =
      TAO::Portable_Server::get_ret_arg< ::VBstring> (
        this->operation_details_,
        this->args_);

    TAO::SArg_Traits< ::VBstring>::in_arg_type arg_1 =
      TAO::Portable_Server::get_in_arg< ::VBstring> (
        this->operation_details_,
        this->args_,
        1);

    TAO::SArg_Traits< ::VBstring>::inout_arg_type arg_2 =
      TAO::Portable_Server::get_inout_arg< ::VBstring> (
        this->operation_details_,
        this->args_,
        2);

    TAO::SArg_Traits< ::VBstring>::out_arg_type arg_3 =
      TAO::Portable_Server::get_out_arg< ::VBstring> (
        this->operation_details_,
        this->args_,
        3);

    retval =
      this->servant_->string_op1 (
        arg_1
        , arg_2
        , arg_3);
  }

private:
  POA_Test * const servant_;
  TAO_Operation_Details const * const operation_details_;
  TAO::Argument * const * const args_;
};

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_ss.cpp:168

void POA_Test::string_op1_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::VBstring>::ret_val retval;
  TAO::SArg_Traits< ::VBstring>::in_arg_val _tao_p1;
  TAO::SArg_Traits< ::VBstring>::inout_arg_val _tao_p2;
  TAO::SArg_Traits< ::VBstring>::out_arg_val _tao_p3;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_p1,
      &_tao_p2,
      &_tao_p3
    };

  static size_t const nargs = 4;

  POA_Test * const impl =
    dynamic_cast<POA_Test *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  string_op1_Test command (
    impl,
    server_request.operation_details (),
    args);

  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}



// TAO_IDL - Generated from
// be/be_visitor_operation/upcall_command_ss.cpp:80

class string_op2_Test
  : public TAO::Upcall_Command
{
public:
  inline string_op2_Test (
    POA_Test * servant,
    TAO_Operation_Details const * operation_details,
    TAO::Argument * const args[])
    : servant_ (servant)
      , operation_details_ (operation_details)
      , args_ (args)
  {
  }

  virtual void execute (void)
  {
    TAO::SArg_Traits< char *>::ret_arg_type retval =
      TAO::Portable_Server::get_ret_arg< char *> (
        this->operation_details_,
        this->args_);

    TAO::SArg_Traits< char *>::in_arg_type arg_1 =
      TAO::Portable_Server::get_in_arg< char *> (
        this->operation_details_,
        this->args_,
        1);

    TAO::SArg_Traits< char *>::inout_arg_type arg_2 =
      TAO::Portable_Server::get_inout_arg< char *> (
        this->operation_details_,
        this->args_,
        2);

    TAO::SArg_Traits< char *>::out_arg_type arg_3 =
      TAO::Portable_Server::get_out_arg< char *> (
        this->operation_details_,
        this->args_,
        3);

    retval =
      this->servant_->string_op2 (
        arg_1
        , arg_2
        , arg_3);
  }

private:
  POA_Test * const servant_;
  TAO_Operation_Details const * const operation_details_;
  TAO::Argument * const * const args_;
};

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_ss.cpp:168

void POA_Test::string_op2_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< char *>::ret_val retval;
  TAO::SArg_Traits< char *>::in_arg_val _tao_p1;
  TAO::SArg_Traits< char *>::inout_arg_val _tao_p2;
  TAO::SArg_Traits< char *>::out_arg_val _tao_p3;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_p1,
      &_tao_p2,
      &_tao_p3
    };

  static size_t const nargs = 4;

  POA_Test * const impl =
    dynamic_cast<POA_Test *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  string_op2_Test command (
    impl,
    server_request.operation_details (),
    args);

  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}



// TAO_IDL - Generated from
// be/be_visitor_operation/upcall_command_ss.cpp:80

class seq_op1_Test
  : public TAO::Upcall_Command
{
public:
  inline seq_op1_Test (
    POA_Test * servant,
    TAO_Operation_Details const * operation_details,
    TAO::Argument * const args[])
    : servant_ (servant)
      , operation_details_ (operation_details)
      , args_ (args)
  {
  }

  virtual void execute (void)
  {
    TAO::SArg_Traits< ::VBseqlong>::ret_arg_type retval =
      TAO::Portable_Server::get_ret_arg< ::VBseqlong> (
        this->operation_details_,
        this->args_);

    TAO::SArg_Traits< ::VBseqlong>::in_arg_type arg_1 =
      TAO::Portable_Server::get_in_arg< ::VBseqlong> (
        this->operation_details_,
        this->args_,
        1);

    TAO::SArg_Traits< ::VBseqlong>::inout_arg_type arg_2 =
      TAO::Portable_Server::get_inout_arg< ::VBseqlong> (
        this->operation_details_,
        this->args_,
        2);

    TAO::SArg_Traits< ::VBseqlong>::out_arg_type arg_3 =
      TAO::Portable_Server::get_out_arg< ::VBseqlong> (
        this->operation_details_,
        this->args_,
        3);

    retval =
      this->servant_->seq_op1 (
        arg_1
        , arg_2
        , arg_3);
  }

private:
  POA_Test * const servant_;
  TAO_Operation_Details const * const operation_details_;
  TAO::Argument * const * const args_;
};

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_ss.cpp:168

void POA_Test::seq_op1_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::VBseqlong>::ret_val retval;
  TAO::SArg_Traits< ::VBseqlong>::in_arg_val _tao_p1;
  TAO::SArg_Traits< ::VBseqlong>::inout_arg_val _tao_p2;
  TAO::SArg_Traits< ::VBseqlong>::out_arg_val _tao_p3;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_p1,
      &_tao_p2,
      &_tao_p3
    };

  static size_t const nargs = 4;

  POA_Test * const impl =
    dynamic_cast<POA_Test *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  seq_op1_Test command (
    impl,
    server_request.operation_details (),
    args);

  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}



// TAO_IDL - Generated from
// be/be_visitor_operation/upcall_command_ss.cpp:80

class seq_op2_Test
  : public TAO::Upcall_Command
{
public:
  inline seq_op2_Test (
    POA_Test * servant,
    TAO_Operation_Details const * operation_details,
    TAO::Argument * const args[])
    : servant_ (servant)
      , operation_details_ (operation_details)
      , args_ (args)
  {
  }

  virtual void execute (void)
  {
    TAO::SArg_Traits< ::TDseqlong>::in_arg_type arg_1 =
      TAO::Portable_Server::get_in_arg< ::TDseqlong> (
        this->operation_details_,
        this->args_,
        1);

    TAO::SArg_Traits< ::TDseqlong>::inout_arg_type arg_2 =
      TAO::Portable_Server::get_inout_arg< ::TDseqlong> (
        this->operation_details_,
        this->args_,
        2);

    TAO::SArg_Traits< ::TDseqlong>::out_arg_type arg_3 =
      TAO::Portable_Server::get_out_arg< ::TDseqlong> (
        this->operation_details_,
        this->args_,
        3);

    this->servant_->seq_op2 (
      arg_1
      , arg_2
      , arg_3);
  }

private:
  POA_Test * const servant_;
  TAO_Operation_Details const * const operation_details_;
  TAO::Argument * const * const args_;
};

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_ss.cpp:168

void POA_Test::seq_op2_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< void>::ret_val retval;
  TAO::SArg_Traits< ::TDseqlong>::in_arg_val _tao_p1;
  TAO::SArg_Traits< ::TDseqlong>::inout_arg_val _tao_p2;
  TAO::SArg_Traits< ::TDseqlong>::out_arg_val _tao_p3;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_p1,
      &_tao_p2,
      &_tao_p3
    };

  static size_t const nargs = 4;

  POA_Test * const impl =
    dynamic_cast<POA_Test *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  seq_op2_Test command (
    impl,
    server_request.operation_details (),
    args);

  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}



// TAO_IDL - Generated from
// be/be_visitor_operation/upcall_command_ss.cpp:80

class struct_op1_Test
  : public TAO::Upcall_Command
{
public:
  inline struct_op1_Test (
    POA_Test * servant,
    TAO_Operation_Details const * operation_details,
    TAO::Argument * const args[])
    : servant_ (servant)
      , operation_details_ (operation_details)
      , args_ (args)
  {
  }

  virtual void execute (void)
  {
    TAO::SArg_Traits< ::VBfixed_struct1>::ret_arg_type retval =
      TAO::Portable_Server::get_ret_arg< ::VBfixed_struct1> (
        this->operation_details_,
        this->args_);

    TAO::SArg_Traits< ::VBfixed_struct1>::in_arg_type arg_1 =
      TAO::Portable_Server::get_in_arg< ::VBfixed_struct1> (
        this->operation_details_,
        this->args_,
        1);

    TAO::SArg_Traits< ::VBfixed_struct1>::inout_arg_type arg_2 =
      TAO::Portable_Server::get_inout_arg< ::VBfixed_struct1> (
        this->operation_details_,
        this->args_,
        2);

    TAO::SArg_Traits< ::VBfixed_struct1>::out_arg_type arg_3 =
      TAO::Portable_Server::get_out_arg< ::VBfixed_struct1> (
        this->operation_details_,
        this->args_,
        3);

    retval =
      this->servant_->struct_op1 (
        arg_1
        , arg_2
        , arg_3);
  }

private:
  POA_Test * const servant_;
  TAO_Operation_Details const * const operation_details_;
  TAO::Argument * const * const args_;
};

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_ss.cpp:168

void POA_Test::struct_op1_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::VBfixed_struct1>::ret_val retval;
  TAO::SArg_Traits< ::VBfixed_struct1>::in_arg_val _tao_p1;
  TAO::SArg_Traits< ::VBfixed_struct1>::inout_arg_val _tao_p2;
  TAO::SArg_Traits< ::VBfixed_struct1>::out_arg_val _tao_p3;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_p1,
      &_tao_p2,
      &_tao_p3
    };

  static size_t const nargs = 4;

  POA_Test * const impl =
    dynamic_cast<POA_Test *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  struct_op1_Test command (
    impl,
    server_request.operation_details (),
    args);

  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}



// TAO_IDL - Generated from
// be/be_visitor_operation/upcall_command_ss.cpp:80

class struct_op2_Test
  : public TAO::Upcall_Command
{
public:
  inline struct_op2_Test (
    POA_Test * servant,
    TAO_Operation_Details const * operation_details,
    TAO::Argument * const args[])
    : servant_ (servant)
      , operation_details_ (operation_details)
      , args_ (args)
  {
  }

  virtual void execute (void)
  {
    TAO::SArg_Traits< ::Fixed_Struct1>::in_arg_type arg_1 =
      TAO::Portable_Server::get_in_arg< ::Fixed_Struct1> (
        this->operation_details_,
        this->args_,
        1);

    TAO::SArg_Traits< ::Fixed_Struct1>::inout_arg_type arg_2 =
      TAO::Portable_Server::get_inout_arg< ::Fixed_Struct1> (
        this->operation_details_,
        this->args_,
        2);

    TAO::SArg_Traits< ::Fixed_Struct1>::out_arg_type arg_3 =
      TAO::Portable_Server::get_out_arg< ::Fixed_Struct1> (
        this->operation_details_,
        this->args_,
        3);

    this->servant_->struct_op2 (
      arg_1
      , arg_2
      , arg_3);
  }

private:
  POA_Test * const servant_;
  TAO_Operation_Details const * const operation_details_;
  TAO::Argument * const * const args_;
};

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_ss.cpp:168

void POA_Test::struct_op2_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< void>::ret_val retval;
  TAO::SArg_Traits< ::Fixed_Struct1>::in_arg_val _tao_p1;
  TAO::SArg_Traits< ::Fixed_Struct1>::inout_arg_val _tao_p2;
  TAO::SArg_Traits< ::Fixed_Struct1>::out_arg_val _tao_p3;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_p1,
      &_tao_p2,
      &_tao_p3
    };

  static size_t const nargs = 4;

  POA_Test * const impl =
    dynamic_cast<POA_Test *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  struct_op2_Test command (
    impl,
    server_request.operation_details (),
    args);

  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}



// TAO_IDL - Generated from
// be/be_visitor_operation/upcall_command_ss.cpp:80

class struct_op3_Test
  : public TAO::Upcall_Command
{
public:
  inline struct_op3_Test (
    POA_Test * servant,
    TAO_Operation_Details const * operation_details,
    TAO::Argument * const args[])
    : servant_ (servant)
      , operation_details_ (operation_details)
      , args_ (args)
  {
  }

  virtual void execute (void)
  {
    TAO::SArg_Traits< ::VBvariable_struct1>::ret_arg_type retval =
      TAO::Portable_Server::get_ret_arg< ::VBvariable_struct1> (
        this->operation_details_,
        this->args_);

    TAO::SArg_Traits< ::VBvariable_struct1>::in_arg_type arg_1 =
      TAO::Portable_Server::get_in_arg< ::VBvariable_struct1> (
        this->operation_details_,
        this->args_,
        1);

    TAO::SArg_Traits< ::VBvariable_struct1>::inout_arg_type arg_2 =
      TAO::Portable_Server::get_inout_arg< ::VBvariable_struct1> (
        this->operation_details_,
        this->args_,
        2);

    TAO::SArg_Traits< ::VBvariable_struct1>::out_arg_type arg_3 =
      TAO::Portable_Server::get_out_arg< ::VBvariable_struct1> (
        this->operation_details_,
        this->args_,
        3);

    retval =
      this->servant_->struct_op3 (
        arg_1
        , arg_2
        , arg_3);
  }

private:
  POA_Test * const servant_;
  TAO_Operation_Details const * const operation_details_;
  TAO::Argument * const * const args_;
};

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_ss.cpp:168

void POA_Test::struct_op3_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::VBvariable_struct1>::ret_val retval;
  TAO::SArg_Traits< ::VBvariable_struct1>::in_arg_val _tao_p1;
  TAO::SArg_Traits< ::VBvariable_struct1>::inout_arg_val _tao_p2;
  TAO::SArg_Traits< ::VBvariable_struct1>::out_arg_val _tao_p3;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_p1,
      &_tao_p2,
      &_tao_p3
    };

  static size_t const nargs = 4;

  POA_Test * const impl =
    dynamic_cast<POA_Test *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  struct_op3_Test command (
    impl,
    server_request.operation_details (),
    args);

  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}



// TAO_IDL - Generated from
// be/be_visitor_operation/upcall_command_ss.cpp:80

class struct_op4_Test
  : public TAO::Upcall_Command
{
public:
  inline struct_op4_Test (
    POA_Test * servant,
    TAO_Operation_Details const * operation_details,
    TAO::Argument * const args[])
    : servant_ (servant)
      , operation_details_ (operation_details)
      , args_ (args)
  {
  }

  virtual void execute (void)
  {
    TAO::SArg_Traits< ::Variable_Struct1>::in_arg_type arg_1 =
      TAO::Portable_Server::get_in_arg< ::Variable_Struct1> (
        this->operation_details_,
        this->args_,
        1);

    TAO::SArg_Traits< ::Variable_Struct1>::inout_arg_type arg_2 =
      TAO::Portable_Server::get_inout_arg< ::Variable_Struct1> (
        this->operation_details_,
        this->args_,
        2);

    TAO::SArg_Traits< ::Variable_Struct1>::out_arg_type arg_3 =
      TAO::Portable_Server::get_out_arg< ::Variable_Struct1> (
        this->operation_details_,
        this->args_,
        3);

    this->servant_->struct_op4 (
      arg_1
      , arg_2
      , arg_3);
  }

private:
  POA_Test * const servant_;
  TAO_Operation_Details const * const operation_details_;
  TAO::Argument * const * const args_;
};

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_ss.cpp:168

void POA_Test::struct_op4_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< void>::ret_val retval;
  TAO::SArg_Traits< ::Variable_Struct1>::in_arg_val _tao_p1;
  TAO::SArg_Traits< ::Variable_Struct1>::inout_arg_val _tao_p2;
  TAO::SArg_Traits< ::Variable_Struct1>::out_arg_val _tao_p3;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_p1,
      &_tao_p2,
      &_tao_p3
    };

  static size_t const nargs = 4;

  POA_Test * const impl =
    dynamic_cast<POA_Test *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  struct_op4_Test command (
    impl,
    server_request.operation_details (),
    args);

  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}



// TAO_IDL - Generated from
// be/be_visitor_operation/upcall_command_ss.cpp:80

class array_op1_Test
  : public TAO::Upcall_Command
{
public:
  inline array_op1_Test (
    POA_Test * servant,
    TAO_Operation_Details const * operation_details,
    TAO::Argument * const args[])
    : servant_ (servant)
      , operation_details_ (operation_details)
      , args_ (args)
  {
  }

  virtual void execute (void)
  {
    TAO::SArg_Traits< ::VBlongarray>::ret_arg_type retval =
      TAO::Portable_Server::get_ret_arg< ::VBlongarray> (
        this->operation_details_,
        this->args_);

    TAO::SArg_Traits< ::VBlongarray>::in_arg_type arg_1 =
      TAO::Portable_Server::get_in_arg< ::VBlongarray> (
        this->operation_details_,
        this->args_,
        1);

    TAO::SArg_Traits< ::VBlongarray>::inout_arg_type arg_2 =
      TAO::Portable_Server::get_inout_arg< ::VBlongarray> (
        this->operation_details_,
        this->args_,
        2);

    TAO::SArg_Traits< ::VBlongarray>::out_arg_type arg_3 =
      TAO::Portable_Server::get_out_arg< ::VBlongarray> (
        this->operation_details_,
        this->args_,
        3);

    retval =
      this->servant_->array_op1 (
        arg_1
        , arg_2
        , arg_3);
  }

private:
  POA_Test * const servant_;
  TAO_Operation_Details const * const operation_details_;
  TAO::Argument * const * const args_;
};

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_ss.cpp:168

void POA_Test::array_op1_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::VBlongarray>::ret_val retval;
  TAO::SArg_Traits< ::VBlongarray>::in_arg_val _tao_p1;
  TAO::SArg_Traits< ::VBlongarray>::inout_arg_val _tao_p2;
  TAO::SArg_Traits< ::VBlongarray>::out_arg_val _tao_p3;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_p1,
      &_tao_p2,
      &_tao_p3
    };

  static size_t const nargs = 4;

  POA_Test * const impl =
    dynamic_cast<POA_Test *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  array_op1_Test command (
    impl,
    server_request.operation_details (),
    args);

  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}



// TAO_IDL - Generated from
// be/be_visitor_operation/upcall_command_ss.cpp:80

class array_op2_Test
  : public TAO::Upcall_Command
{
public:
  inline array_op2_Test (
    POA_Test * servant,
    TAO_Operation_Details const * operation_details,
    TAO::Argument * const args[])
    : servant_ (servant)
      , operation_details_ (operation_details)
      , args_ (args)
  {
  }

  virtual void execute (void)
  {
    TAO::SArg_Traits< ::LongArray_tag>::in_arg_type arg_1 =
      TAO::Portable_Server::get_in_arg< ::LongArray_tag> (
        this->operation_details_,
        this->args_,
        1);

    TAO::SArg_Traits< ::LongArray_tag>::inout_arg_type arg_2 =
      TAO::Portable_Server::get_inout_arg< ::LongArray_tag> (
        this->operation_details_,
        this->args_,
        2);

    TAO::SArg_Traits< ::LongArray_tag>::out_arg_type arg_3 =
      TAO::Portable_Server::get_out_arg< ::LongArray_tag> (
        this->operation_details_,
        this->args_,
        3);

    this->servant_->array_op2 (
      arg_1
      , arg_2
      , arg_3);
  }

private:
  POA_Test * const servant_;
  TAO_Operation_Details const * const operation_details_;
  TAO::Argument * const * const args_;
};

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_ss.cpp:168

void POA_Test::array_op2_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< void>::ret_val retval;
  TAO::SArg_Traits< ::LongArray_tag>::in_arg_val _tao_p1;
  TAO::SArg_Traits< ::LongArray_tag>::inout_arg_val _tao_p2;
  TAO::SArg_Traits< ::LongArray_tag>::out_arg_val _tao_p3;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_p1,
      &_tao_p2,
      &_tao_p3
    };

  static size_t const nargs = 4;

  POA_Test * const impl =
    dynamic_cast<POA_Test *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  array_op2_Test command (
    impl,
    server_request.operation_details (),
    args);

  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}



// TAO_IDL - Generated from
// be/be_visitor_operation/upcall_command_ss.cpp:80

class array_op3_Test
  : public TAO::Upcall_Command
{
public:
  inline array_op3_Test (
    POA_Test * servant,
    TAO_Operation_Details const * operation_details,
    TAO::Argument * const args[])
    : servant_ (servant)
      , operation_details_ (operation_details)
      , args_ (args)
  {
  }

  virtual void execute (void)
  {
    TAO::SArg_Traits< ::VBstringarray>::ret_arg_type retval =
      TAO::Portable_Server::get_ret_arg< ::VBstringarray> (
        this->operation_details_,
        this->args_);

    TAO::SArg_Traits< ::VBstringarray>::in_arg_type arg_1 =
      TAO::Portable_Server::get_in_arg< ::VBstringarray> (
        this->operation_details_,
        this->args_,
        1);

    TAO::SArg_Traits< ::VBstringarray>::inout_arg_type arg_2 =
      TAO::Portable_Server::get_inout_arg< ::VBstringarray> (
        this->operation_details_,
        this->args_,
        2);

    TAO::SArg_Traits< ::VBstringarray>::out_arg_type arg_3 =
      TAO::Portable_Server::get_out_arg< ::VBstringarray> (
        this->operation_details_,
        this->args_,
        3);

    retval =
      this->servant_->array_op3 (
        arg_1
        , arg_2
        , arg_3);
  }

private:
  POA_Test * const servant_;
  TAO_Operation_Details const * const operation_details_;
  TAO::Argument * const * const args_;
};

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_ss.cpp:168

void POA_Test::array_op3_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::VBstringarray>::ret_val retval;
  TAO::SArg_Traits< ::VBstringarray>::in_arg_val _tao_p1;
  TAO::SArg_Traits< ::VBstringarray>::inout_arg_val _tao_p2;
  TAO::SArg_Traits< ::VBstringarray>::out_arg_val _tao_p3;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_p1,
      &_tao_p2,
      &_tao_p3
    };

  static size_t const nargs = 4;

  POA_Test * const impl =
    dynamic_cast<POA_Test *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  array_op3_Test command (
    impl,
    server_request.operation_details (),
    args);

  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}



// TAO_IDL - Generated from
// be/be_visitor_operation/upcall_command_ss.cpp:80

class array_op4_Test
  : public TAO::Upcall_Command
{
public:
  inline array_op4_Test (
    POA_Test * servant,
    TAO_Operation_Details const * operation_details,
    TAO::Argument * const args[])
    : servant_ (servant)
      , operation_details_ (operation_details)
      , args_ (args)
  {
  }

  virtual void execute (void)
  {
    TAO::SArg_Traits< ::StringArray_tag>::in_arg_type arg_1 =
      TAO::Portable_Server::get_in_arg< ::StringArray_tag> (
        this->operation_details_,
        this->args_,
        1);

    TAO::SArg_Traits< ::StringArray_tag>::inout_arg_type arg_2 =
      TAO::Portable_Server::get_inout_arg< ::StringArray_tag> (
        this->operation_details_,
        this->args_,
        2);

    TAO::SArg_Traits< ::StringArray_tag>::out_arg_type arg_3 =
      TAO::Portable_Server::get_out_arg< ::StringArray_tag> (
        this->operation_details_,
        this->args_,
        3);

    this->servant_->array_op4 (
      arg_1
      , arg_2
      , arg_3);
  }

private:
  POA_Test * const servant_;
  TAO_Operation_Details const * const operation_details_;
  TAO::Argument * const * const args_;
};

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_ss.cpp:168

void POA_Test::array_op4_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< void>::ret_val retval;
  TAO::SArg_Traits< ::StringArray_tag>::in_arg_val _tao_p1;
  TAO::SArg_Traits< ::StringArray_tag>::inout_arg_val _tao_p2;
  TAO::SArg_Traits< ::StringArray_tag>::out_arg_val _tao_p3;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_p1,
      &_tao_p2,
      &_tao_p3
    };

  static size_t const nargs = 4;

  POA_Test * const impl =
    dynamic_cast<POA_Test *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  array_op4_Test command (
    impl,
    server_request.operation_details (),
    args);

  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}



// TAO_IDL - Generated from
// be/be_visitor_operation/upcall_command_ss.cpp:80

class union_op1_Test
  : public TAO::Upcall_Command
{
public:
  inline union_op1_Test (
    POA_Test * servant,
    TAO_Operation_Details const * operation_details,
    TAO::Argument * const args[])
    : servant_ (servant)
      , operation_details_ (operation_details)
      , args_ (args)
  {
  }

  virtual void execute (void)
  {
    TAO::SArg_Traits< ::VBfixed_union1>::ret_arg_type retval =
      TAO::Portable_Server::get_ret_arg< ::VBfixed_union1> (
        this->operation_details_,
        this->args_);

    TAO::SArg_Traits< ::VBfixed_union1>::in_arg_type arg_1 =
      TAO::Portable_Server::get_in_arg< ::VBfixed_union1> (
        this->operation_details_,
        this->args_,
        1);

    TAO::SArg_Traits< ::VBfixed_union1>::inout_arg_type arg_2 =
      TAO::Portable_Server::get_inout_arg< ::VBfixed_union1> (
        this->operation_details_,
        this->args_,
        2);

    TAO::SArg_Traits< ::VBfixed_union1>::out_arg_type arg_3 =
      TAO::Portable_Server::get_out_arg< ::VBfixed_union1> (
        this->operation_details_,
        this->args_,
        3);

    retval =
      this->servant_->union_op1 (
        arg_1
        , arg_2
        , arg_3);
  }

private:
  POA_Test * const servant_;
  TAO_Operation_Details const * const operation_details_;
  TAO::Argument * const * const args_;
};

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_ss.cpp:168

void POA_Test::union_op1_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::VBfixed_union1>::ret_val retval;
  TAO::SArg_Traits< ::VBfixed_union1>::in_arg_val _tao_p1;
  TAO::SArg_Traits< ::VBfixed_union1>::inout_arg_val _tao_p2;
  TAO::SArg_Traits< ::VBfixed_union1>::out_arg_val _tao_p3;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_p1,
      &_tao_p2,
      &_tao_p3
    };

  static size_t const nargs = 4;

  POA_Test * const impl =
    dynamic_cast<POA_Test *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  union_op1_Test command (
    impl,
    server_request.operation_details (),
    args);

  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}



// TAO_IDL - Generated from
// be/be_visitor_operation/upcall_command_ss.cpp:80

class union_op2_Test
  : public TAO::Upcall_Command
{
public:
  inline union_op2_Test (
    POA_Test * servant,
    TAO_Operation_Details const * operation_details,
    TAO::Argument * const args[])
    : servant_ (servant)
      , operation_details_ (operation_details)
      , args_ (args)
  {
  }

  virtual void execute (void)
  {
    TAO::SArg_Traits< ::Fixed_Union1>::in_arg_type arg_1 =
      TAO::Portable_Server::get_in_arg< ::Fixed_Union1> (
        this->operation_details_,
        this->args_,
        1);

    TAO::SArg_Traits< ::Fixed_Union1>::inout_arg_type arg_2 =
      TAO::Portable_Server::get_inout_arg< ::Fixed_Union1> (
        this->operation_details_,
        this->args_,
        2);

    TAO::SArg_Traits< ::Fixed_Union1>::out_arg_type arg_3 =
      TAO::Portable_Server::get_out_arg< ::Fixed_Union1> (
        this->operation_details_,
        this->args_,
        3);

    this->servant_->union_op2 (
      arg_1
      , arg_2
      , arg_3);
  }

private:
  POA_Test * const servant_;
  TAO_Operation_Details const * const operation_details_;
  TAO::Argument * const * const args_;
};

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_ss.cpp:168

void POA_Test::union_op2_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< void>::ret_val retval;
  TAO::SArg_Traits< ::Fixed_Union1>::in_arg_val _tao_p1;
  TAO::SArg_Traits< ::Fixed_Union1>::inout_arg_val _tao_p2;
  TAO::SArg_Traits< ::Fixed_Union1>::out_arg_val _tao_p3;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_p1,
      &_tao_p2,
      &_tao_p3
    };

  static size_t const nargs = 4;

  POA_Test * const impl =
    dynamic_cast<POA_Test *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  union_op2_Test command (
    impl,
    server_request.operation_details (),
    args);

  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}



// TAO_IDL - Generated from
// be/be_visitor_operation/upcall_command_ss.cpp:80

class union_op3_Test
  : public TAO::Upcall_Command
{
public:
  inline union_op3_Test (
    POA_Test * servant,
    TAO_Operation_Details const * operation_details,
    TAO::Argument * const args[])
    : servant_ (servant)
      , operation_details_ (operation_details)
      , args_ (args)
  {
  }

  virtual void execute (void)
  {
    TAO::SArg_Traits< ::VBvariable_union1>::ret_arg_type retval =
      TAO::Portable_Server::get_ret_arg< ::VBvariable_union1> (
        this->operation_details_,
        this->args_);

    TAO::SArg_Traits< ::VBvariable_union1>::in_arg_type arg_1 =
      TAO::Portable_Server::get_in_arg< ::VBvariable_union1> (
        this->operation_details_,
        this->args_,
        1);

    TAO::SArg_Traits< ::VBvariable_union1>::inout_arg_type arg_2 =
      TAO::Portable_Server::get_inout_arg< ::VBvariable_union1> (
        this->operation_details_,
        this->args_,
        2);

    TAO::SArg_Traits< ::VBvariable_union1>::out_arg_type arg_3 =
      TAO::Portable_Server::get_out_arg< ::VBvariable_union1> (
        this->operation_details_,
        this->args_,
        3);

    retval =
      this->servant_->union_op3 (
        arg_1
        , arg_2
        , arg_3);
  }

private:
  POA_Test * const servant_;
  TAO_Operation_Details const * const operation_details_;
  TAO::Argument * const * const args_;
};

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_ss.cpp:168

void POA_Test::union_op3_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::VBvariable_union1>::ret_val retval;
  TAO::SArg_Traits< ::VBvariable_union1>::in_arg_val _tao_p1;
  TAO::SArg_Traits< ::VBvariable_union1>::inout_arg_val _tao_p2;
  TAO::SArg_Traits< ::VBvariable_union1>::out_arg_val _tao_p3;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_p1,
      &_tao_p2,
      &_tao_p3
    };

  static size_t const nargs = 4;

  POA_Test * const impl =
    dynamic_cast<POA_Test *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  union_op3_Test command (
    impl,
    server_request.operation_details (),
    args);

  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}



// TAO_IDL - Generated from
// be/be_visitor_operation/upcall_command_ss.cpp:80

class union_op4_Test
  : public TAO::Upcall_Command
{
public:
  inline union_op4_Test (
    POA_Test * servant,
    TAO_Operation_Details const * operation_details,
    TAO::Argument * const args[])
    : servant_ (servant)
      , operation_details_ (operation_details)
      , args_ (args)
  {
  }

  virtual void execute (void)
  {
    TAO::SArg_Traits< ::Variable_Union1>::in_arg_type arg_1 =
      TAO::Portable_Server::get_in_arg< ::Variable_Union1> (
        this->operation_details_,
        this->args_,
        1);

    TAO::SArg_Traits< ::Variable_Union1>::inout_arg_type arg_2 =
      TAO::Portable_Server::get_inout_arg< ::Variable_Union1> (
        this->operation_details_,
        this->args_,
        2);

    TAO::SArg_Traits< ::Variable_Union1>::out_arg_type arg_3 =
      TAO::Portable_Server::get_out_arg< ::Variable_Union1> (
        this->operation_details_,
        this->args_,
        3);

    this->servant_->union_op4 (
      arg_1
      , arg_2
      , arg_3);
  }

private:
  POA_Test * const servant_;
  TAO_Operation_Details const * const operation_details_;
  TAO::Argument * const * const args_;
};

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_ss.cpp:168

void POA_Test::union_op4_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< void>::ret_val retval;
  TAO::SArg_Traits< ::Variable_Union1>::in_arg_val _tao_p1;
  TAO::SArg_Traits< ::Variable_Union1>::inout_arg_val _tao_p2;
  TAO::SArg_Traits< ::Variable_Union1>::out_arg_val _tao_p3;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_p1,
      &_tao_p2,
      &_tao_p3
    };

  static size_t const nargs = 4;

  POA_Test * const impl =
    dynamic_cast<POA_Test *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  union_op4_Test command (
    impl,
    server_request.operation_details (),
    args);

  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}



// TAO_IDL - Generated from
// be/be_visitor_operation/upcall_command_ss.cpp:80

class shutdown_Test
  : public TAO::Upcall_Command
{
public:
  inline shutdown_Test (
    POA_Test * servant)
    : servant_ (servant)
  {
  }

  virtual void execute (void)
  {
    this->servant_->shutdown ();
  }

private:
  POA_Test * const servant_;
};

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_ss.cpp:168

void POA_Test::shutdown_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< void>::ret_val retval;

  TAO::Argument * const args[] =
    {
      &retval
    };

  static size_t const nargs = 1;

  POA_Test * const impl =
    dynamic_cast<POA_Test *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  shutdown_Test command (
    impl);

  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}



// TAO_IDL - Generated from
// be/be_visitor_interface/interface_ss.cpp:163



::CORBA::Boolean POA_Test::_is_a (const char* value)
{
  return
    (
      ACE_OS::strcmp (
          value,
          "IDL:Test:1.0"
        ) == 0 ||
      !ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        )
    );
}

const char* POA_Test::_interface_repository_id (void) const
{
  return "IDL:Test:1.0";
}

// TAO_IDL - Generated from
// be/be_visitor_interface/interface_ss.cpp:423

void POA_Test::_dispatch (
  TAO_ServerRequest & req,
  TAO::Portable_Server::Servant_Upcall* servant_upcall)
{
  this->synchronous_upcall_dispatch (req, servant_upcall, this);
}

// TAO_IDL - Generated from
// be/be_visitor_interface/interface_ss.cpp:370

Test *
POA_Test::_this (void)
{
  TAO_Stub *stub = this->_create_stub ();

  TAO_Stub_Auto_Ptr safe_stub (stub);
  ::CORBA::Object_ptr tmp = CORBA::Object_ptr ();

  ::CORBA::Boolean const _tao_opt_colloc =
    stub->servant_orb_var ()->orb_core ()->optimize_collocation_objects ();

  ACE_NEW_RETURN (
      tmp,
      ::CORBA::Object (stub, _tao_opt_colloc, this),
      0);

  ::CORBA::Object_var obj = tmp;
  (void) safe_stub.release ();

  typedef ::Test STUB_SCOPED_NAME;
  return
    TAO::Narrow_Utils<STUB_SCOPED_NAME>::unchecked_narrow (
        obj.in ());
}

#endif /* ifndef */

