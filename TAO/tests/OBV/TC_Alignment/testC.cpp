// -*- C++ -*-
/**
 * Code generated by the The ACE ORB (TAO) IDL Compiler v2.4.1
 * TAO and the TAO IDL Compiler have been developed by:
 *       Center for Distributed Object Computing
 *       Washington University
 *       St. Louis, MO
 *       USA
 *       http://www.cs.wustl.edu/~schmidt/doc-center.html
 * and
 *       Distributed Object Computing Laboratory
 *       University of California at Irvine
 *       Irvine, CA
 *       USA
 * and
 *       Institute for Software Integrated Systems
 *       Vanderbilt University
 *       Nashville, TN
 *       USA
 *       http://www.isis.vanderbilt.edu/
 *
 * Information about TAO is available at:
 *     http://www.dre.vanderbilt.edu/~schmidt/TAO.html
 **/

// TAO_IDL - Generated from
// be/be_codegen.cpp:373


#include "testC.h"
#include "tao/AnyTypeCode/Null_RefCount_Policy.h"
#include "tao/AnyTypeCode/TypeCode_Constants.h"
#include "tao/AnyTypeCode/Alias_TypeCode_Static.h"
#include "tao/AnyTypeCode/Objref_TypeCode_Static.h"
#include "tao/AnyTypeCode/Value_TypeCode_Static.h"
#include "tao/AnyTypeCode/TypeCode_Value_Field.h"
#include "tao/CDR.h"
#include "tao/Exception_Data.h"
#include "tao/Invocation_Adapter.h"
#include "tao/Object_T.h"
#include "tao/CDR.h"
#include "tao/AnyTypeCode/Any.h"
#include "tao/AnyTypeCode/Any_Impl_T.h"
#include "ace/OS_NS_string.h"

#if !defined (__ACE_INLINE__)
#include "testC.inl"
#endif /* !defined INLINE */

// TAO_IDL - Generated from
// be/be_visitor_typecode/value_typecode.cpp:65

static TAO::TypeCode::Value_Field<char const *, ::CORBA::TypeCode_ptr const *> const _tao_fields_obvmod_tcOffset1[] =
  {
    { "mem", &CORBA::_tc_long, ::CORBA::PUBLIC_MEMBER }
    
  };
static TAO::TypeCode::Value<char const *,
                     ::CORBA::TypeCode_ptr const *,
                     TAO::TypeCode::Value_Field<char const *, ::CORBA::TypeCode_ptr const *> const *,
                     TAO::Null_RefCount_Policy>
  _tao_tc_obvmod_tcOffset1 (
    ::CORBA::tk_value,
    "IDL:obvmod/tcOffset1:1.0",
    "tcOffset1",
    ::CORBA::VM_NONE,
    &::CORBA::_tc_null,
    _tao_fields_obvmod_tcOffset1,
    1);
  

namespace obvmod
{
  ::CORBA::TypeCode_ptr const _tc_tcOffset1 =
    &_tao_tc_obvmod_tcOffset1;
}

// TAO_IDL - Generated from
// be/be_visitor_valuetype/valuetype_cs.cpp:53

void
TAO::Value_Traits<obvmod::tcOffset1>::add_ref (
    obvmod::tcOffset1 * p)
{
  ::CORBA::add_ref (p);
}

void
TAO::Value_Traits<obvmod::tcOffset1>::remove_ref (
    obvmod::tcOffset1 * p)
{
  ::CORBA::remove_ref (p);
}

void
TAO::Value_Traits<obvmod::tcOffset1>::release (
    obvmod::tcOffset1 * p)
{
  ::CORBA::remove_ref (p);
}

obvmod::tcOffset1 *
obvmod::tcOffset1::_downcast ( ::CORBA::ValueBase *v)
{
  return dynamic_cast< ::obvmod::tcOffset1 * > (v);
}

const char *
obvmod::tcOffset1::_tao_obv_repository_id (void) const
{
  return this->_tao_obv_static_repository_id ();
}

void
obvmod::tcOffset1::_tao_obv_truncatable_repo_ids (Repository_Id_List& ids) const
{
  ids.push_back (this->_tao_obv_static_repository_id ());
}

void
obvmod::tcOffset1::_tao_any_destructor (void *_tao_void_pointer)
{
  tcOffset1 *_tao_tmp_pointer =
    static_cast<tcOffset1 *> (_tao_void_pointer);
  ::CORBA::remove_ref (_tao_tmp_pointer);
}

// TAO extension - the virtual _type method.
::CORBA::TypeCode_ptr obvmod::tcOffset1::_tao_type (void) const
{
  return ::obvmod::_tc_tcOffset1;
}

obvmod::tcOffset1::~tcOffset1 (void)
{}

::CORBA::Boolean
obvmod::tcOffset1::_tao_marshal_v (TAO_OutputCDR & strm) const
{
  TAO_ChunkInfo ci (this->is_truncatable_ || this->chunking_);
  return this->_tao_marshal__obvmod_tcOffset1 (strm, ci);
}

::CORBA::Boolean
obvmod::tcOffset1::_tao_unmarshal_v (TAO_InputCDR & strm)
{
  TAO_ChunkInfo ci (this->is_truncatable_ || this->chunking_, 1);
  return this->_tao_unmarshal__obvmod_tcOffset1 (strm,ci);
}

::CORBA::Boolean
obvmod::tcOffset1::_tao_match_formal_type (ptrdiff_t formal_type_id) const
{
  return formal_type_id == reinterpret_cast<ptrdiff_t> (obvmod::tcOffset1::_downcast);
}

::CORBA::Boolean
obvmod::tcOffset1::_tao_unmarshal (
    TAO_InputCDR &strm,
    tcOffset1 *&new_object
  )
{
  ::CORBA::ValueBase *base = 0;
  ::CORBA::Boolean is_indirected = false;
  ::CORBA::Boolean is_null_object = false;
  ::CORBA::Boolean const retval =
    ::CORBA::ValueBase::_tao_unmarshal_pre (
        strm,
        base,
        tcOffset1::_tao_obv_static_repository_id (),
        is_null_object,
        is_indirected
      );
  
  ::CORBA::ValueBase_var owner (base);

  if (!retval)
    return false;
  
  if (is_null_object)
    return true;
  
  if (!is_indirected && !base->_tao_unmarshal_v (strm))
    return false;
  
  // Now base must point to the unmarshaled object.
  // Align the pointer to the right subobject.
  new_object = tcOffset1::_downcast (base);
  if (0 == new_object)
    return false;
  
  if (is_indirected)
    new_object->_add_ref ();
  
  owner._retn ();
  return true;
}

// TAO_IDL - Generated from
// be/be_visitor_valuetype/valuetype_init_cs.cpp:73

obvmod::tcOffset1_init::tcOffset1_init (void)
{
}

obvmod::tcOffset1_init::~tcOffset1_init (void)
{
}

obvmod::tcOffset1_init *
obvmod::tcOffset1_init::_downcast ( ::CORBA::ValueFactoryBase *v)
{
  return dynamic_cast< ::obvmod::tcOffset1_init * > (v);
}

const char*
obvmod::tcOffset1_init::tao_repository_id (void)
{
  return ::obvmod::tcOffset1::_tao_obv_static_repository_id ();
}

::CORBA::ValueBase *
obvmod::tcOffset1_init::create_for_unmarshal (void)
{
  ::CORBA::ValueBase *ret_val = 0;
  ACE_NEW_THROW_EX (
      ret_val,
      OBV_obvmod::tcOffset1,
      ::CORBA::NO_MEMORY ()
    );
  return ret_val;
}

// TAO_IDL - Generated from
// be/be_visitor_typecode/value_typecode.cpp:65

static TAO::TypeCode::Value_Field<char const *, ::CORBA::TypeCode_ptr const *> const _tao_fields_obvmod_tcOffset003[] =
  {
    { "mem", &CORBA::_tc_long, ::CORBA::PUBLIC_MEMBER }
    
  };
static TAO::TypeCode::Value<char const *,
                     ::CORBA::TypeCode_ptr const *,
                     TAO::TypeCode::Value_Field<char const *, ::CORBA::TypeCode_ptr const *> const *,
                     TAO::Null_RefCount_Policy>
  _tao_tc_obvmod_tcOffset003 (
    ::CORBA::tk_value,
    "IDL:obvmod/tcOffset003:1.0",
    "tcOffset003",
    ::CORBA::VM_NONE,
    &::CORBA::_tc_null,
    _tao_fields_obvmod_tcOffset003,
    1);
  

namespace obvmod
{
  ::CORBA::TypeCode_ptr const _tc_tcOffset003 =
    &_tao_tc_obvmod_tcOffset003;
}

// TAO_IDL - Generated from
// be/be_visitor_valuetype/valuetype_cs.cpp:53

void
TAO::Value_Traits<obvmod::tcOffset003>::add_ref (
    obvmod::tcOffset003 * p)
{
  ::CORBA::add_ref (p);
}

void
TAO::Value_Traits<obvmod::tcOffset003>::remove_ref (
    obvmod::tcOffset003 * p)
{
  ::CORBA::remove_ref (p);
}

void
TAO::Value_Traits<obvmod::tcOffset003>::release (
    obvmod::tcOffset003 * p)
{
  ::CORBA::remove_ref (p);
}

obvmod::tcOffset003 *
obvmod::tcOffset003::_downcast ( ::CORBA::ValueBase *v)
{
  return dynamic_cast< ::obvmod::tcOffset003 * > (v);
}

const char *
obvmod::tcOffset003::_tao_obv_repository_id (void) const
{
  return this->_tao_obv_static_repository_id ();
}

void
obvmod::tcOffset003::_tao_obv_truncatable_repo_ids (Repository_Id_List& ids) const
{
  ids.push_back (this->_tao_obv_static_repository_id ());
}

void
obvmod::tcOffset003::_tao_any_destructor (void *_tao_void_pointer)
{
  tcOffset003 *_tao_tmp_pointer =
    static_cast<tcOffset003 *> (_tao_void_pointer);
  ::CORBA::remove_ref (_tao_tmp_pointer);
}

// TAO extension - the virtual _type method.
::CORBA::TypeCode_ptr obvmod::tcOffset003::_tao_type (void) const
{
  return ::obvmod::_tc_tcOffset003;
}

obvmod::tcOffset003::~tcOffset003 (void)
{}

::CORBA::Boolean
obvmod::tcOffset003::_tao_marshal_v (TAO_OutputCDR & strm) const
{
  TAO_ChunkInfo ci (this->is_truncatable_ || this->chunking_);
  return this->_tao_marshal__obvmod_tcOffset003 (strm, ci);
}

::CORBA::Boolean
obvmod::tcOffset003::_tao_unmarshal_v (TAO_InputCDR & strm)
{
  TAO_ChunkInfo ci (this->is_truncatable_ || this->chunking_, 1);
  return this->_tao_unmarshal__obvmod_tcOffset003 (strm,ci);
}

::CORBA::Boolean
obvmod::tcOffset003::_tao_match_formal_type (ptrdiff_t formal_type_id) const
{
  return formal_type_id == reinterpret_cast<ptrdiff_t> (obvmod::tcOffset003::_downcast);
}

::CORBA::Boolean
obvmod::tcOffset003::_tao_unmarshal (
    TAO_InputCDR &strm,
    tcOffset003 *&new_object
  )
{
  ::CORBA::ValueBase *base = 0;
  ::CORBA::Boolean is_indirected = false;
  ::CORBA::Boolean is_null_object = false;
  ::CORBA::Boolean const retval =
    ::CORBA::ValueBase::_tao_unmarshal_pre (
        strm,
        base,
        tcOffset003::_tao_obv_static_repository_id (),
        is_null_object,
        is_indirected
      );
  
  ::CORBA::ValueBase_var owner (base);

  if (!retval)
    return false;
  
  if (is_null_object)
    return true;
  
  if (!is_indirected && !base->_tao_unmarshal_v (strm))
    return false;
  
  // Now base must point to the unmarshaled object.
  // Align the pointer to the right subobject.
  new_object = tcOffset003::_downcast (base);
  if (0 == new_object)
    return false;
  
  if (is_indirected)
    new_object->_add_ref ();
  
  owner._retn ();
  return true;
}

// TAO_IDL - Generated from
// be/be_visitor_valuetype/valuetype_init_cs.cpp:73

obvmod::tcOffset003_init::tcOffset003_init (void)
{
}

obvmod::tcOffset003_init::~tcOffset003_init (void)
{
}

obvmod::tcOffset003_init *
obvmod::tcOffset003_init::_downcast ( ::CORBA::ValueFactoryBase *v)
{
  return dynamic_cast< ::obvmod::tcOffset003_init * > (v);
}

const char*
obvmod::tcOffset003_init::tao_repository_id (void)
{
  return ::obvmod::tcOffset003::_tao_obv_static_repository_id ();
}

::CORBA::ValueBase *
obvmod::tcOffset003_init::create_for_unmarshal (void)
{
  ::CORBA::ValueBase *ret_val = 0;
  ACE_NEW_THROW_EX (
      ret_val,
      OBV_obvmod::tcOffset003,
      ::CORBA::NO_MEMORY ()
    );
  return ret_val;
}

// TAO_IDL - Generated from
// be/be_visitor_typecode/value_typecode.cpp:65

static TAO::TypeCode::Value_Field<char const *, ::CORBA::TypeCode_ptr const *> const _tao_fields_obvmod_tcOffset00005[] =
  {
    { "mem", &CORBA::_tc_long, ::CORBA::PUBLIC_MEMBER }
    
  };
static TAO::TypeCode::Value<char const *,
                     ::CORBA::TypeCode_ptr const *,
                     TAO::TypeCode::Value_Field<char const *, ::CORBA::TypeCode_ptr const *> const *,
                     TAO::Null_RefCount_Policy>
  _tao_tc_obvmod_tcOffset00005 (
    ::CORBA::tk_value,
    "IDL:obvmod/tcOffset00005:1.0",
    "tcOffset00005",
    ::CORBA::VM_NONE,
    &::CORBA::_tc_null,
    _tao_fields_obvmod_tcOffset00005,
    1);
  

namespace obvmod
{
  ::CORBA::TypeCode_ptr const _tc_tcOffset00005 =
    &_tao_tc_obvmod_tcOffset00005;
}

// TAO_IDL - Generated from
// be/be_visitor_valuetype/valuetype_cs.cpp:53

void
TAO::Value_Traits<obvmod::tcOffset00005>::add_ref (
    obvmod::tcOffset00005 * p)
{
  ::CORBA::add_ref (p);
}

void
TAO::Value_Traits<obvmod::tcOffset00005>::remove_ref (
    obvmod::tcOffset00005 * p)
{
  ::CORBA::remove_ref (p);
}

void
TAO::Value_Traits<obvmod::tcOffset00005>::release (
    obvmod::tcOffset00005 * p)
{
  ::CORBA::remove_ref (p);
}

obvmod::tcOffset00005 *
obvmod::tcOffset00005::_downcast ( ::CORBA::ValueBase *v)
{
  return dynamic_cast< ::obvmod::tcOffset00005 * > (v);
}

const char *
obvmod::tcOffset00005::_tao_obv_repository_id (void) const
{
  return this->_tao_obv_static_repository_id ();
}

void
obvmod::tcOffset00005::_tao_obv_truncatable_repo_ids (Repository_Id_List& ids) const
{
  ids.push_back (this->_tao_obv_static_repository_id ());
}

void
obvmod::tcOffset00005::_tao_any_destructor (void *_tao_void_pointer)
{
  tcOffset00005 *_tao_tmp_pointer =
    static_cast<tcOffset00005 *> (_tao_void_pointer);
  ::CORBA::remove_ref (_tao_tmp_pointer);
}

// TAO extension - the virtual _type method.
::CORBA::TypeCode_ptr obvmod::tcOffset00005::_tao_type (void) const
{
  return ::obvmod::_tc_tcOffset00005;
}

obvmod::tcOffset00005::~tcOffset00005 (void)
{}

::CORBA::Boolean
obvmod::tcOffset00005::_tao_marshal_v (TAO_OutputCDR & strm) const
{
  TAO_ChunkInfo ci (this->is_truncatable_ || this->chunking_);
  return this->_tao_marshal__obvmod_tcOffset00005 (strm, ci);
}

::CORBA::Boolean
obvmod::tcOffset00005::_tao_unmarshal_v (TAO_InputCDR & strm)
{
  TAO_ChunkInfo ci (this->is_truncatable_ || this->chunking_, 1);
  return this->_tao_unmarshal__obvmod_tcOffset00005 (strm,ci);
}

::CORBA::Boolean
obvmod::tcOffset00005::_tao_match_formal_type (ptrdiff_t formal_type_id) const
{
  return formal_type_id == reinterpret_cast<ptrdiff_t> (obvmod::tcOffset00005::_downcast);
}

::CORBA::Boolean
obvmod::tcOffset00005::_tao_unmarshal (
    TAO_InputCDR &strm,
    tcOffset00005 *&new_object
  )
{
  ::CORBA::ValueBase *base = 0;
  ::CORBA::Boolean is_indirected = false;
  ::CORBA::Boolean is_null_object = false;
  ::CORBA::Boolean const retval =
    ::CORBA::ValueBase::_tao_unmarshal_pre (
        strm,
        base,
        tcOffset00005::_tao_obv_static_repository_id (),
        is_null_object,
        is_indirected
      );
  
  ::CORBA::ValueBase_var owner (base);

  if (!retval)
    return false;
  
  if (is_null_object)
    return true;
  
  if (!is_indirected && !base->_tao_unmarshal_v (strm))
    return false;
  
  // Now base must point to the unmarshaled object.
  // Align the pointer to the right subobject.
  new_object = tcOffset00005::_downcast (base);
  if (0 == new_object)
    return false;
  
  if (is_indirected)
    new_object->_add_ref ();
  
  owner._retn ();
  return true;
}

// TAO_IDL - Generated from
// be/be_visitor_valuetype/valuetype_init_cs.cpp:73

obvmod::tcOffset00005_init::tcOffset00005_init (void)
{
}

obvmod::tcOffset00005_init::~tcOffset00005_init (void)
{
}

obvmod::tcOffset00005_init *
obvmod::tcOffset00005_init::_downcast ( ::CORBA::ValueFactoryBase *v)
{
  return dynamic_cast< ::obvmod::tcOffset00005_init * > (v);
}

const char*
obvmod::tcOffset00005_init::tao_repository_id (void)
{
  return ::obvmod::tcOffset00005::_tao_obv_static_repository_id ();
}

::CORBA::ValueBase *
obvmod::tcOffset00005_init::create_for_unmarshal (void)
{
  ::CORBA::ValueBase *ret_val = 0;
  ACE_NEW_THROW_EX (
      ret_val,
      OBV_obvmod::tcOffset00005,
      ::CORBA::NO_MEMORY ()
    );
  return ret_val;
}

// TAO_IDL - Generated from
// be/be_visitor_typecode/value_typecode.cpp:65

static TAO::TypeCode::Value_Field<char const *, ::CORBA::TypeCode_ptr const *> const _tao_fields_obvmod_tcOffset0000007[] =
  {
    { "mem", &CORBA::_tc_long, ::CORBA::PUBLIC_MEMBER }
    
  };
static TAO::TypeCode::Value<char const *,
                     ::CORBA::TypeCode_ptr const *,
                     TAO::TypeCode::Value_Field<char const *, ::CORBA::TypeCode_ptr const *> const *,
                     TAO::Null_RefCount_Policy>
  _tao_tc_obvmod_tcOffset0000007 (
    ::CORBA::tk_value,
    "IDL:obvmod/tcOffset0000007:1.0",
    "tcOffset0000007",
    ::CORBA::VM_NONE,
    &::CORBA::_tc_null,
    _tao_fields_obvmod_tcOffset0000007,
    1);
  

namespace obvmod
{
  ::CORBA::TypeCode_ptr const _tc_tcOffset0000007 =
    &_tao_tc_obvmod_tcOffset0000007;
}

// TAO_IDL - Generated from
// be/be_visitor_valuetype/valuetype_cs.cpp:53

void
TAO::Value_Traits<obvmod::tcOffset0000007>::add_ref (
    obvmod::tcOffset0000007 * p)
{
  ::CORBA::add_ref (p);
}

void
TAO::Value_Traits<obvmod::tcOffset0000007>::remove_ref (
    obvmod::tcOffset0000007 * p)
{
  ::CORBA::remove_ref (p);
}

void
TAO::Value_Traits<obvmod::tcOffset0000007>::release (
    obvmod::tcOffset0000007 * p)
{
  ::CORBA::remove_ref (p);
}

obvmod::tcOffset0000007 *
obvmod::tcOffset0000007::_downcast ( ::CORBA::ValueBase *v)
{
  return dynamic_cast< ::obvmod::tcOffset0000007 * > (v);
}

const char *
obvmod::tcOffset0000007::_tao_obv_repository_id (void) const
{
  return this->_tao_obv_static_repository_id ();
}

void
obvmod::tcOffset0000007::_tao_obv_truncatable_repo_ids (Repository_Id_List& ids) const
{
  ids.push_back (this->_tao_obv_static_repository_id ());
}

void
obvmod::tcOffset0000007::_tao_any_destructor (void *_tao_void_pointer)
{
  tcOffset0000007 *_tao_tmp_pointer =
    static_cast<tcOffset0000007 *> (_tao_void_pointer);
  ::CORBA::remove_ref (_tao_tmp_pointer);
}

// TAO extension - the virtual _type method.
::CORBA::TypeCode_ptr obvmod::tcOffset0000007::_tao_type (void) const
{
  return ::obvmod::_tc_tcOffset0000007;
}

obvmod::tcOffset0000007::~tcOffset0000007 (void)
{}

::CORBA::Boolean
obvmod::tcOffset0000007::_tao_marshal_v (TAO_OutputCDR & strm) const
{
  TAO_ChunkInfo ci (this->is_truncatable_ || this->chunking_);
  return this->_tao_marshal__obvmod_tcOffset0000007 (strm, ci);
}

::CORBA::Boolean
obvmod::tcOffset0000007::_tao_unmarshal_v (TAO_InputCDR & strm)
{
  TAO_ChunkInfo ci (this->is_truncatable_ || this->chunking_, 1);
  return this->_tao_unmarshal__obvmod_tcOffset0000007 (strm,ci);
}

::CORBA::Boolean
obvmod::tcOffset0000007::_tao_match_formal_type (ptrdiff_t formal_type_id) const
{
  return formal_type_id == reinterpret_cast<ptrdiff_t> (obvmod::tcOffset0000007::_downcast);
}

::CORBA::Boolean
obvmod::tcOffset0000007::_tao_unmarshal (
    TAO_InputCDR &strm,
    tcOffset0000007 *&new_object
  )
{
  ::CORBA::ValueBase *base = 0;
  ::CORBA::Boolean is_indirected = false;
  ::CORBA::Boolean is_null_object = false;
  ::CORBA::Boolean const retval =
    ::CORBA::ValueBase::_tao_unmarshal_pre (
        strm,
        base,
        tcOffset0000007::_tao_obv_static_repository_id (),
        is_null_object,
        is_indirected
      );
  
  ::CORBA::ValueBase_var owner (base);

  if (!retval)
    return false;
  
  if (is_null_object)
    return true;
  
  if (!is_indirected && !base->_tao_unmarshal_v (strm))
    return false;
  
  // Now base must point to the unmarshaled object.
  // Align the pointer to the right subobject.
  new_object = tcOffset0000007::_downcast (base);
  if (0 == new_object)
    return false;
  
  if (is_indirected)
    new_object->_add_ref ();
  
  owner._retn ();
  return true;
}

// TAO_IDL - Generated from
// be/be_visitor_valuetype/valuetype_init_cs.cpp:73

obvmod::tcOffset0000007_init::tcOffset0000007_init (void)
{
}

obvmod::tcOffset0000007_init::~tcOffset0000007_init (void)
{
}

obvmod::tcOffset0000007_init *
obvmod::tcOffset0000007_init::_downcast ( ::CORBA::ValueFactoryBase *v)
{
  return dynamic_cast< ::obvmod::tcOffset0000007_init * > (v);
}

const char*
obvmod::tcOffset0000007_init::tao_repository_id (void)
{
  return ::obvmod::tcOffset0000007::_tao_obv_static_repository_id ();
}

::CORBA::ValueBase *
obvmod::tcOffset0000007_init::create_for_unmarshal (void)
{
  ::CORBA::ValueBase *ret_val = 0;
  ACE_NEW_THROW_EX (
      ret_val,
      OBV_obvmod::tcOffset0000007,
      ::CORBA::NO_MEMORY ()
    );
  return ret_val;
}

// TAO_IDL - Generated from
// be/be_visitor_interface/interface_cs.cpp:48

// Traits specializations for test.

test_ptr
TAO::Objref_Traits<test>::duplicate (
    test_ptr p)
{
  return test::_duplicate (p);
}

void
TAO::Objref_Traits<test>::release (
    test_ptr p)
{
  ::CORBA::release (p);
}

test_ptr
TAO::Objref_Traits<test>::nil (void)
{
  return test::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<test>::marshal (
    const test_ptr p,
    TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:88

::CORBA::Any *
test::get_value (
  ::CORBA::Long type)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  TAO::Arg_Traits< ::CORBA::Any>::ret_val _tao_retval;
  TAO::Arg_Traits< ::CORBA::Long>::in_arg_val _tao_type (type);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_type
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      2,
      "get_value",
      9,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY
      
    );

  _tao_call.invoke (0, 0);

  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:88

void
test::shutdown (
  void)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  TAO::Arg_Traits< void>::ret_val _tao_retval;

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      1,
      "shutdown",
      8,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY,
      TAO::TAO_ONEWAY_INVOCATION,
      TAO::TAO_SYNCHRONOUS_INVOCATION,
      false
    );

  _tao_call.invoke (0, 0);
}

test::test (void)
{
}

test::~test (void)
{
}

void
test::_tao_any_destructor (void *_tao_void_pointer)
{
  test *_tao_tmp_pointer =
    static_cast<test *> (_tao_void_pointer);
  ::CORBA::release (_tao_tmp_pointer);
}

test_ptr
test::_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return
    TAO::Narrow_Utils<test>::narrow (
        _tao_objref,
        "IDL:test:1.0");
}

test_ptr
test::_unchecked_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return
    TAO::Narrow_Utils<test>::unchecked_narrow (
        _tao_objref);
}

test_ptr
test::_nil (void)
{
  return 0;
}

test_ptr
test::_duplicate (test_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  return obj;
}

void
test::_tao_release (test_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
test::_is_a (const char *value)
{
  if (
      ACE_OS::strcmp (
          value,
          "IDL:test:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        ) == 0
    )
    {
      return true; // success using local knowledge
    }
  else
    {
      return this->::CORBA::Object::_is_a (value);
    }
}

const char* test::_interface_repository_id (void) const
{
  return "IDL:test:1.0";
}

::CORBA::Boolean
test::marshal (TAO_OutputCDR &cdr)
{
  return (cdr << this);
}

// TAO_IDL - Generated from
// be/be_visitor_typecode/objref_typecode.cpp:70

static TAO::TypeCode::Objref<char const *,
                             TAO::Null_RefCount_Policy>
  _tao_tc_test (
    ::CORBA::tk_objref,
    "IDL:test:1.0",
    "test");
  
::CORBA::TypeCode_ptr const _tc_test =
  &_tao_tc_test;

// TAO_IDL - Generated from
// be/be_visitor_valuetype/valuetype_obv_cs.cpp:44

OBV_obvmod::tcOffset1::tcOffset1 (void)
: require_truncation_ (false)
{}

OBV_obvmod::tcOffset1::tcOffset1 (
    ::CORBA::Long _tao_init_mem)
: require_truncation_ (false)
{
  mem (_tao_init_mem);
}

OBV_obvmod::tcOffset1::~tcOffset1 (void)
{}

::CORBA::ValueBase *
OBV_obvmod::tcOffset1::_copy_value (void)
{
  ::CORBA::ValueBase *ret_val = 0;
  ACE_NEW_THROW_EX (
    ret_val,
    tcOffset1 (
      mem ()
    ),
    ::CORBA::NO_MEMORY ()
  );
  return ret_val;
}

::CORBA::Boolean
OBV_obvmod::tcOffset1::_tao_marshal__obvmod_tcOffset1 (TAO_OutputCDR &strm, TAO_ChunkInfo& ci) const
{
  return _tao_marshal_state (strm, ci);
}

::CORBA::Boolean
OBV_obvmod::tcOffset1::_tao_unmarshal__obvmod_tcOffset1 (TAO_InputCDR &strm, TAO_ChunkInfo& ci)
{
  return _tao_unmarshal_state (strm, ci);
}

// TAO_IDL - Generated from
// be/be_visitor_valuetype/field_cs.cpp:587

/// Accessor to set the member.
void
OBV_obvmod::tcOffset1::mem (const CORBA::Long val)
{
  // Set the value.
  this->_pd_mem = val;
}

// Retrieve the member
::CORBA::Long
OBV_obvmod::tcOffset1::mem (void) const
{
  return this->_pd_mem;
}

// TAO_IDL - Generated from
// be/be_visitor_valuetype/valuetype_obv_cs.cpp:44

OBV_obvmod::tcOffset003::tcOffset003 (void)
: require_truncation_ (false)
{}

OBV_obvmod::tcOffset003::tcOffset003 (
    ::CORBA::Long _tao_init_mem)
: require_truncation_ (false)
{
  mem (_tao_init_mem);
}

OBV_obvmod::tcOffset003::~tcOffset003 (void)
{}

::CORBA::ValueBase *
OBV_obvmod::tcOffset003::_copy_value (void)
{
  ::CORBA::ValueBase *ret_val = 0;
  ACE_NEW_THROW_EX (
    ret_val,
    tcOffset003 (
      mem ()
    ),
    ::CORBA::NO_MEMORY ()
  );
  return ret_val;
}

::CORBA::Boolean
OBV_obvmod::tcOffset003::_tao_marshal__obvmod_tcOffset003 (TAO_OutputCDR &strm, TAO_ChunkInfo& ci) const
{
  return _tao_marshal_state (strm, ci);
}

::CORBA::Boolean
OBV_obvmod::tcOffset003::_tao_unmarshal__obvmod_tcOffset003 (TAO_InputCDR &strm, TAO_ChunkInfo& ci)
{
  return _tao_unmarshal_state (strm, ci);
}

// TAO_IDL - Generated from
// be/be_visitor_valuetype/field_cs.cpp:587

/// Accessor to set the member.
void
OBV_obvmod::tcOffset003::mem (const CORBA::Long val)
{
  // Set the value.
  this->_pd_mem = val;
}

// Retrieve the member
::CORBA::Long
OBV_obvmod::tcOffset003::mem (void) const
{
  return this->_pd_mem;
}

// TAO_IDL - Generated from
// be/be_visitor_valuetype/valuetype_obv_cs.cpp:44

OBV_obvmod::tcOffset00005::tcOffset00005 (void)
: require_truncation_ (false)
{}

OBV_obvmod::tcOffset00005::tcOffset00005 (
    ::CORBA::Long _tao_init_mem)
: require_truncation_ (false)
{
  mem (_tao_init_mem);
}

OBV_obvmod::tcOffset00005::~tcOffset00005 (void)
{}

::CORBA::ValueBase *
OBV_obvmod::tcOffset00005::_copy_value (void)
{
  ::CORBA::ValueBase *ret_val = 0;
  ACE_NEW_THROW_EX (
    ret_val,
    tcOffset00005 (
      mem ()
    ),
    ::CORBA::NO_MEMORY ()
  );
  return ret_val;
}

::CORBA::Boolean
OBV_obvmod::tcOffset00005::_tao_marshal__obvmod_tcOffset00005 (TAO_OutputCDR &strm, TAO_ChunkInfo& ci) const
{
  return _tao_marshal_state (strm, ci);
}

::CORBA::Boolean
OBV_obvmod::tcOffset00005::_tao_unmarshal__obvmod_tcOffset00005 (TAO_InputCDR &strm, TAO_ChunkInfo& ci)
{
  return _tao_unmarshal_state (strm, ci);
}

// TAO_IDL - Generated from
// be/be_visitor_valuetype/field_cs.cpp:587

/// Accessor to set the member.
void
OBV_obvmod::tcOffset00005::mem (const CORBA::Long val)
{
  // Set the value.
  this->_pd_mem = val;
}

// Retrieve the member
::CORBA::Long
OBV_obvmod::tcOffset00005::mem (void) const
{
  return this->_pd_mem;
}

// TAO_IDL - Generated from
// be/be_visitor_valuetype/valuetype_obv_cs.cpp:44

OBV_obvmod::tcOffset0000007::tcOffset0000007 (void)
: require_truncation_ (false)
{}

OBV_obvmod::tcOffset0000007::tcOffset0000007 (
    ::CORBA::Long _tao_init_mem)
: require_truncation_ (false)
{
  mem (_tao_init_mem);
}

OBV_obvmod::tcOffset0000007::~tcOffset0000007 (void)
{}

::CORBA::ValueBase *
OBV_obvmod::tcOffset0000007::_copy_value (void)
{
  ::CORBA::ValueBase *ret_val = 0;
  ACE_NEW_THROW_EX (
    ret_val,
    tcOffset0000007 (
      mem ()
    ),
    ::CORBA::NO_MEMORY ()
  );
  return ret_val;
}

::CORBA::Boolean
OBV_obvmod::tcOffset0000007::_tao_marshal__obvmod_tcOffset0000007 (TAO_OutputCDR &strm, TAO_ChunkInfo& ci) const
{
  return _tao_marshal_state (strm, ci);
}

::CORBA::Boolean
OBV_obvmod::tcOffset0000007::_tao_unmarshal__obvmod_tcOffset0000007 (TAO_InputCDR &strm, TAO_ChunkInfo& ci)
{
  return _tao_unmarshal_state (strm, ci);
}

// TAO_IDL - Generated from
// be/be_visitor_valuetype/field_cs.cpp:587

/// Accessor to set the member.
void
OBV_obvmod::tcOffset0000007::mem (const CORBA::Long val)
{
  // Set the value.
  this->_pd_mem = val;
}

// Retrieve the member
::CORBA::Long
OBV_obvmod::tcOffset0000007::mem (void) const
{
  return this->_pd_mem;
}

// TAO_IDL - Generated from
// be/be_visitor_valuetype/any_op_cs.cpp:45
TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<obvmod::tcOffset1>::to_value (
      ::CORBA::ValueBase *&_tao_elem
    ) const
  {
    ::CORBA::add_ref (this->value_);
    _tao_elem = this->value_;
    return true;
  }
}


TAO_END_VERSIONED_NAMESPACE_DECL



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace obvmod
{
  // Copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      tcOffset1 *_tao_elem
    )
  {
    #ifdef TAO_VALUETYPE_COPYING_ANY_INSERTION_USES_COPY_VALUE
      tcOffset1 *_tao_copy =
        _tao_elem ?
          tcOffset1::_downcast (_tao_elem->_copy_value ())
          : 0;
      _tao_any <<= &_tao_copy;
    #else
      ::CORBA::add_ref (_tao_elem);
      _tao_any <<= &_tao_elem;
    #endif
  }

  // Non-copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      tcOffset1 **_tao_elem
    )
  {
    TAO::Any_Impl_T<tcOffset1>::insert (
        _tao_any,
        tcOffset1::_tao_any_destructor,
        _tc_tcOffset1,
        *_tao_elem
      );
  }

  ::CORBA::Boolean
  operator>>= (
      const ::CORBA::Any &_tao_any,
      tcOffset1 *&_tao_elem
    )
  {
    return
      TAO::Any_Impl_T<tcOffset1>::extract (
          _tao_any,
          tcOffset1::_tao_any_destructor,
          _tc_tcOffset1,
          _tao_elem
        );
  }

  
}

#else


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    obvmod::tcOffset1 *_tao_elem
  )
{
  #ifdef TAO_VALUETYPE_COPYING_ANY_INSERTION_USES_COPY_VALUE
    obvmod::tcOffset1 *_tao_copy =
      _tao_elem ?
        obvmod::tcOffset1::_downcast (_tao_elem->_copy_value ())
        : 0;
    _tao_any <<= &_tao_copy;
  #else
    ::CORBA::add_ref (_tao_elem);
    _tao_any <<= &_tao_elem;
  #endif
}

// Non-copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    obvmod::tcOffset1 **_tao_elem
  )
{
  TAO::Any_Impl_T<obvmod::tcOffset1>::insert (
      _tao_any,
      obvmod::tcOffset1::_tao_any_destructor,
      obvmod::_tc_tcOffset1,
      *_tao_elem
    );
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    obvmod::tcOffset1 *&_tao_elem
  )
{
  return
    TAO::Any_Impl_T<obvmod::tcOffset1>::extract (
        _tao_any,
        obvmod::tcOffset1::_tao_any_destructor,
        obvmod::_tc_tcOffset1,
        _tao_elem
      );
}


TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_valuetype/any_op_cs.cpp:45
TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<obvmod::tcOffset003>::to_value (
      ::CORBA::ValueBase *&_tao_elem
    ) const
  {
    ::CORBA::add_ref (this->value_);
    _tao_elem = this->value_;
    return true;
  }
}


TAO_END_VERSIONED_NAMESPACE_DECL



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace obvmod
{
  // Copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      tcOffset003 *_tao_elem
    )
  {
    #ifdef TAO_VALUETYPE_COPYING_ANY_INSERTION_USES_COPY_VALUE
      tcOffset003 *_tao_copy =
        _tao_elem ?
          tcOffset003::_downcast (_tao_elem->_copy_value ())
          : 0;
      _tao_any <<= &_tao_copy;
    #else
      ::CORBA::add_ref (_tao_elem);
      _tao_any <<= &_tao_elem;
    #endif
  }

  // Non-copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      tcOffset003 **_tao_elem
    )
  {
    TAO::Any_Impl_T<tcOffset003>::insert (
        _tao_any,
        tcOffset003::_tao_any_destructor,
        _tc_tcOffset003,
        *_tao_elem
      );
  }

  ::CORBA::Boolean
  operator>>= (
      const ::CORBA::Any &_tao_any,
      tcOffset003 *&_tao_elem
    )
  {
    return
      TAO::Any_Impl_T<tcOffset003>::extract (
          _tao_any,
          tcOffset003::_tao_any_destructor,
          _tc_tcOffset003,
          _tao_elem
        );
  }

  
}

#else


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    obvmod::tcOffset003 *_tao_elem
  )
{
  #ifdef TAO_VALUETYPE_COPYING_ANY_INSERTION_USES_COPY_VALUE
    obvmod::tcOffset003 *_tao_copy =
      _tao_elem ?
        obvmod::tcOffset003::_downcast (_tao_elem->_copy_value ())
        : 0;
    _tao_any <<= &_tao_copy;
  #else
    ::CORBA::add_ref (_tao_elem);
    _tao_any <<= &_tao_elem;
  #endif
}

// Non-copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    obvmod::tcOffset003 **_tao_elem
  )
{
  TAO::Any_Impl_T<obvmod::tcOffset003>::insert (
      _tao_any,
      obvmod::tcOffset003::_tao_any_destructor,
      obvmod::_tc_tcOffset003,
      *_tao_elem
    );
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    obvmod::tcOffset003 *&_tao_elem
  )
{
  return
    TAO::Any_Impl_T<obvmod::tcOffset003>::extract (
        _tao_any,
        obvmod::tcOffset003::_tao_any_destructor,
        obvmod::_tc_tcOffset003,
        _tao_elem
      );
}


TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_valuetype/any_op_cs.cpp:45
TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<obvmod::tcOffset00005>::to_value (
      ::CORBA::ValueBase *&_tao_elem
    ) const
  {
    ::CORBA::add_ref (this->value_);
    _tao_elem = this->value_;
    return true;
  }
}


TAO_END_VERSIONED_NAMESPACE_DECL



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace obvmod
{
  // Copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      tcOffset00005 *_tao_elem
    )
  {
    #ifdef TAO_VALUETYPE_COPYING_ANY_INSERTION_USES_COPY_VALUE
      tcOffset00005 *_tao_copy =
        _tao_elem ?
          tcOffset00005::_downcast (_tao_elem->_copy_value ())
          : 0;
      _tao_any <<= &_tao_copy;
    #else
      ::CORBA::add_ref (_tao_elem);
      _tao_any <<= &_tao_elem;
    #endif
  }

  // Non-copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      tcOffset00005 **_tao_elem
    )
  {
    TAO::Any_Impl_T<tcOffset00005>::insert (
        _tao_any,
        tcOffset00005::_tao_any_destructor,
        _tc_tcOffset00005,
        *_tao_elem
      );
  }

  ::CORBA::Boolean
  operator>>= (
      const ::CORBA::Any &_tao_any,
      tcOffset00005 *&_tao_elem
    )
  {
    return
      TAO::Any_Impl_T<tcOffset00005>::extract (
          _tao_any,
          tcOffset00005::_tao_any_destructor,
          _tc_tcOffset00005,
          _tao_elem
        );
  }

  
}

#else


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    obvmod::tcOffset00005 *_tao_elem
  )
{
  #ifdef TAO_VALUETYPE_COPYING_ANY_INSERTION_USES_COPY_VALUE
    obvmod::tcOffset00005 *_tao_copy =
      _tao_elem ?
        obvmod::tcOffset00005::_downcast (_tao_elem->_copy_value ())
        : 0;
    _tao_any <<= &_tao_copy;
  #else
    ::CORBA::add_ref (_tao_elem);
    _tao_any <<= &_tao_elem;
  #endif
}

// Non-copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    obvmod::tcOffset00005 **_tao_elem
  )
{
  TAO::Any_Impl_T<obvmod::tcOffset00005>::insert (
      _tao_any,
      obvmod::tcOffset00005::_tao_any_destructor,
      obvmod::_tc_tcOffset00005,
      *_tao_elem
    );
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    obvmod::tcOffset00005 *&_tao_elem
  )
{
  return
    TAO::Any_Impl_T<obvmod::tcOffset00005>::extract (
        _tao_any,
        obvmod::tcOffset00005::_tao_any_destructor,
        obvmod::_tc_tcOffset00005,
        _tao_elem
      );
}


TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_valuetype/any_op_cs.cpp:45
TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<obvmod::tcOffset0000007>::to_value (
      ::CORBA::ValueBase *&_tao_elem
    ) const
  {
    ::CORBA::add_ref (this->value_);
    _tao_elem = this->value_;
    return true;
  }
}


TAO_END_VERSIONED_NAMESPACE_DECL



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace obvmod
{
  // Copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      tcOffset0000007 *_tao_elem
    )
  {
    #ifdef TAO_VALUETYPE_COPYING_ANY_INSERTION_USES_COPY_VALUE
      tcOffset0000007 *_tao_copy =
        _tao_elem ?
          tcOffset0000007::_downcast (_tao_elem->_copy_value ())
          : 0;
      _tao_any <<= &_tao_copy;
    #else
      ::CORBA::add_ref (_tao_elem);
      _tao_any <<= &_tao_elem;
    #endif
  }

  // Non-copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      tcOffset0000007 **_tao_elem
    )
  {
    TAO::Any_Impl_T<tcOffset0000007>::insert (
        _tao_any,
        tcOffset0000007::_tao_any_destructor,
        _tc_tcOffset0000007,
        *_tao_elem
      );
  }

  ::CORBA::Boolean
  operator>>= (
      const ::CORBA::Any &_tao_any,
      tcOffset0000007 *&_tao_elem
    )
  {
    return
      TAO::Any_Impl_T<tcOffset0000007>::extract (
          _tao_any,
          tcOffset0000007::_tao_any_destructor,
          _tc_tcOffset0000007,
          _tao_elem
        );
  }

  
}

#else


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    obvmod::tcOffset0000007 *_tao_elem
  )
{
  #ifdef TAO_VALUETYPE_COPYING_ANY_INSERTION_USES_COPY_VALUE
    obvmod::tcOffset0000007 *_tao_copy =
      _tao_elem ?
        obvmod::tcOffset0000007::_downcast (_tao_elem->_copy_value ())
        : 0;
    _tao_any <<= &_tao_copy;
  #else
    ::CORBA::add_ref (_tao_elem);
    _tao_any <<= &_tao_elem;
  #endif
}

// Non-copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    obvmod::tcOffset0000007 **_tao_elem
  )
{
  TAO::Any_Impl_T<obvmod::tcOffset0000007>::insert (
      _tao_any,
      obvmod::tcOffset0000007::_tao_any_destructor,
      obvmod::_tc_tcOffset0000007,
      *_tao_elem
    );
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    obvmod::tcOffset0000007 *&_tao_elem
  )
{
  return
    TAO::Any_Impl_T<obvmod::tcOffset0000007>::extract (
        _tao_any,
        obvmod::tcOffset0000007::_tao_any_destructor,
        obvmod::_tc_tcOffset0000007,
        _tao_elem
      );
}


TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_interface/any_op_cs.cpp:38
TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<test>::to_object (
      ::CORBA::Object_ptr &_tao_elem) const
  {
    _tao_elem = ::CORBA::Object::_duplicate (this->value_);
    return true;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



/// Copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    test_ptr _tao_elem)
{
  test_ptr _tao_objptr =
    test::_duplicate (_tao_elem);
  _tao_any <<= &_tao_objptr;
}

/// Non-copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    test_ptr *_tao_elem)
{
  TAO::Any_Impl_T<test>::insert (
      _tao_any,
      test::_tao_any_destructor,
      _tc_test,
      *_tao_elem);
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    test_ptr &_tao_elem)
{
  return
    TAO::Any_Impl_T<test>::extract (
        _tao_any,
        test::_tao_any_destructor,
        _tc_test,
        _tao_elem);
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_valuetype.cpp:512

void
CORBA::add_ref (obvmod::tcOffset1 * vt)
{
  if (vt != 0)
    {
      vt->_add_ref ();
    }
}

void
CORBA::remove_ref (obvmod::tcOffset1 * vt)
{
  if (vt != 0)
    {
      vt->_remove_ref ();
    }
}

// TAO_IDL - Generated from
// be/be_visitor_valuetype/cdr_op_cs.cpp:60


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean
operator<< (
    TAO_OutputCDR &strm,
    const obvmod::tcOffset1 *_tao_valuetype
  )
{
  return
    ::CORBA::ValueBase::_tao_marshal (
        strm,
        _tao_valuetype,
        reinterpret_cast<ptrdiff_t> (&obvmod::tcOffset1::_downcast)
      );
}

::CORBA::Boolean
operator>> (
    TAO_InputCDR &strm,
    obvmod::tcOffset1 *&_tao_valuetype
  )
{
  return obvmod::tcOffset1::_tao_unmarshal (strm, _tao_valuetype);
}


TAO_END_VERSIONED_NAMESPACE_DECL

// TAO_IDL - Generated from
// be/be_visitor_valuetype/marshal_cs.cpp:33

::CORBA::Boolean
OBV_obvmod::tcOffset1::_tao_marshal_state (TAO_OutputCDR &strm, TAO_ChunkInfo&ci) const
{
  if (! ci.start_chunk (strm))
    return false;
  
  CORBA::Boolean const ret = 
      (strm << _pd_mem);
  if ( ! ret) 
    return false; 
  
  if (! ci.end_chunk (strm))
    return false;
  
  return true;
}

::CORBA::Boolean
OBV_obvmod::tcOffset1::_tao_unmarshal_state (TAO_InputCDR &strm, TAO_ChunkInfo&ci)
{
  if (!ci.handle_chunking (strm))
    return false;
  
  CORBA::Boolean const ret = 
      (strm >> _pd_mem);
  if (!ret) 
    return false; 
  
  if (this->require_truncation_)
    return ci.skip_chunks (strm);
  
  else
    return ci.handle_chunking (strm);
  
  
}

void
OBV_obvmod::tcOffset1::truncation_hook (void)
{
  this->require_truncation_ = true;
}



// TAO_IDL - Generated from
// be/be_valuetype.cpp:512

void
CORBA::add_ref (obvmod::tcOffset003 * vt)
{
  if (vt != 0)
    {
      vt->_add_ref ();
    }
}

void
CORBA::remove_ref (obvmod::tcOffset003 * vt)
{
  if (vt != 0)
    {
      vt->_remove_ref ();
    }
}

// TAO_IDL - Generated from
// be/be_visitor_valuetype/cdr_op_cs.cpp:60


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean
operator<< (
    TAO_OutputCDR &strm,
    const obvmod::tcOffset003 *_tao_valuetype
  )
{
  return
    ::CORBA::ValueBase::_tao_marshal (
        strm,
        _tao_valuetype,
        reinterpret_cast<ptrdiff_t> (&obvmod::tcOffset003::_downcast)
      );
}

::CORBA::Boolean
operator>> (
    TAO_InputCDR &strm,
    obvmod::tcOffset003 *&_tao_valuetype
  )
{
  return obvmod::tcOffset003::_tao_unmarshal (strm, _tao_valuetype);
}


TAO_END_VERSIONED_NAMESPACE_DECL

// TAO_IDL - Generated from
// be/be_visitor_valuetype/marshal_cs.cpp:33

::CORBA::Boolean
OBV_obvmod::tcOffset003::_tao_marshal_state (TAO_OutputCDR &strm, TAO_ChunkInfo&ci) const
{
  if (! ci.start_chunk (strm))
    return false;
  
  CORBA::Boolean const ret = 
      (strm << _pd_mem);
  if ( ! ret) 
    return false; 
  
  if (! ci.end_chunk (strm))
    return false;
  
  return true;
}

::CORBA::Boolean
OBV_obvmod::tcOffset003::_tao_unmarshal_state (TAO_InputCDR &strm, TAO_ChunkInfo&ci)
{
  if (!ci.handle_chunking (strm))
    return false;
  
  CORBA::Boolean const ret = 
      (strm >> _pd_mem);
  if (!ret) 
    return false; 
  
  if (this->require_truncation_)
    return ci.skip_chunks (strm);
  
  else
    return ci.handle_chunking (strm);
  
  
}

void
OBV_obvmod::tcOffset003::truncation_hook (void)
{
  this->require_truncation_ = true;
}



// TAO_IDL - Generated from
// be/be_valuetype.cpp:512

void
CORBA::add_ref (obvmod::tcOffset00005 * vt)
{
  if (vt != 0)
    {
      vt->_add_ref ();
    }
}

void
CORBA::remove_ref (obvmod::tcOffset00005 * vt)
{
  if (vt != 0)
    {
      vt->_remove_ref ();
    }
}

// TAO_IDL - Generated from
// be/be_visitor_valuetype/cdr_op_cs.cpp:60


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean
operator<< (
    TAO_OutputCDR &strm,
    const obvmod::tcOffset00005 *_tao_valuetype
  )
{
  return
    ::CORBA::ValueBase::_tao_marshal (
        strm,
        _tao_valuetype,
        reinterpret_cast<ptrdiff_t> (&obvmod::tcOffset00005::_downcast)
      );
}

::CORBA::Boolean
operator>> (
    TAO_InputCDR &strm,
    obvmod::tcOffset00005 *&_tao_valuetype
  )
{
  return obvmod::tcOffset00005::_tao_unmarshal (strm, _tao_valuetype);
}


TAO_END_VERSIONED_NAMESPACE_DECL

// TAO_IDL - Generated from
// be/be_visitor_valuetype/marshal_cs.cpp:33

::CORBA::Boolean
OBV_obvmod::tcOffset00005::_tao_marshal_state (TAO_OutputCDR &strm, TAO_ChunkInfo&ci) const
{
  if (! ci.start_chunk (strm))
    return false;
  
  CORBA::Boolean const ret = 
      (strm << _pd_mem);
  if ( ! ret) 
    return false; 
  
  if (! ci.end_chunk (strm))
    return false;
  
  return true;
}

::CORBA::Boolean
OBV_obvmod::tcOffset00005::_tao_unmarshal_state (TAO_InputCDR &strm, TAO_ChunkInfo&ci)
{
  if (!ci.handle_chunking (strm))
    return false;
  
  CORBA::Boolean const ret = 
      (strm >> _pd_mem);
  if (!ret) 
    return false; 
  
  if (this->require_truncation_)
    return ci.skip_chunks (strm);
  
  else
    return ci.handle_chunking (strm);
  
  
}

void
OBV_obvmod::tcOffset00005::truncation_hook (void)
{
  this->require_truncation_ = true;
}



// TAO_IDL - Generated from
// be/be_valuetype.cpp:512

void
CORBA::add_ref (obvmod::tcOffset0000007 * vt)
{
  if (vt != 0)
    {
      vt->_add_ref ();
    }
}

void
CORBA::remove_ref (obvmod::tcOffset0000007 * vt)
{
  if (vt != 0)
    {
      vt->_remove_ref ();
    }
}

// TAO_IDL - Generated from
// be/be_visitor_valuetype/cdr_op_cs.cpp:60


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean
operator<< (
    TAO_OutputCDR &strm,
    const obvmod::tcOffset0000007 *_tao_valuetype
  )
{
  return
    ::CORBA::ValueBase::_tao_marshal (
        strm,
        _tao_valuetype,
        reinterpret_cast<ptrdiff_t> (&obvmod::tcOffset0000007::_downcast)
      );
}

::CORBA::Boolean
operator>> (
    TAO_InputCDR &strm,
    obvmod::tcOffset0000007 *&_tao_valuetype
  )
{
  return obvmod::tcOffset0000007::_tao_unmarshal (strm, _tao_valuetype);
}


TAO_END_VERSIONED_NAMESPACE_DECL

// TAO_IDL - Generated from
// be/be_visitor_valuetype/marshal_cs.cpp:33

::CORBA::Boolean
OBV_obvmod::tcOffset0000007::_tao_marshal_state (TAO_OutputCDR &strm, TAO_ChunkInfo&ci) const
{
  if (! ci.start_chunk (strm))
    return false;
  
  CORBA::Boolean const ret = 
      (strm << _pd_mem);
  if ( ! ret) 
    return false; 
  
  if (! ci.end_chunk (strm))
    return false;
  
  return true;
}

::CORBA::Boolean
OBV_obvmod::tcOffset0000007::_tao_unmarshal_state (TAO_InputCDR &strm, TAO_ChunkInfo&ci)
{
  if (!ci.handle_chunking (strm))
    return false;
  
  CORBA::Boolean const ret = 
      (strm >> _pd_mem);
  if (!ret) 
    return false; 
  
  if (this->require_truncation_)
    return ci.skip_chunks (strm);
  
  else
    return ci.handle_chunking (strm);
  
  
}

void
OBV_obvmod::tcOffset0000007::truncation_hook (void)
{
  this->require_truncation_ = true;
}



// TAO_IDL - Generated from
// be/be_visitor_interface/cdr_op_cs.cpp:51

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const test_ptr _tao_objref)
{
  ::CORBA::Object_ptr _tao_corba_obj = _tao_objref;
  return (strm << _tao_corba_obj);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    test_ptr &_tao_objref)
{
  ::CORBA::Object_var obj;

  if (!(strm >> obj.inout ()))
    {
      return false;
    }
  
  typedef ::test RHS_SCOPED_NAME;

  // Narrow to the right type.
  _tao_objref =
    TAO::Narrow_Utils<RHS_SCOPED_NAME>::unchecked_narrow (obj.in ());
    
  return true;
}

TAO_END_VERSIONED_NAMESPACE_DECL



