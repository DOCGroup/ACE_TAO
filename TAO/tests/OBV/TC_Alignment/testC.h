// -*- C++ -*-
/**
 * Code generated by the The ACE ORB (TAO) IDL Compiler v2.4.1
 * TAO and the TAO IDL Compiler have been developed by:
 *       Center for Distributed Object Computing
 *       Washington University
 *       St. Louis, MO
 *       USA
 *       http://www.cs.wustl.edu/~schmidt/doc-center.html
 * and
 *       Distributed Object Computing Laboratory
 *       University of California at Irvine
 *       Irvine, CA
 *       USA
 * and
 *       Institute for Software Integrated Systems
 *       Vanderbilt University
 *       Nashville, TN
 *       USA
 *       http://www.isis.vanderbilt.edu/
 *
 * Information about TAO is available at:
 *     http://www.dre.vanderbilt.edu/~schmidt/TAO.html
 **/

// TAO_IDL - Generated from
// be/be_codegen.cpp:149

#ifndef _TAO_IDL_TESTC_Q9YUPO_H_
#define _TAO_IDL_TESTC_Q9YUPO_H_

#include /**/ "ace/pre.h"


#include /**/ "ace/config-all.h"

#if !defined (ACE_LACKS_PRAGMA_ONCE)
# pragma once
#endif /* ACE_LACKS_PRAGMA_ONCE */


#include "tao/AnyTypeCode/AnyTypeCode_methods.h"
#include "tao/AnyTypeCode/Any.h"
#include "tao/Valuetype/ValueBase.h"
#include "tao/Valuetype/Valuetype_Adapter_Factory_Impl.h"
#include "tao/Valuetype/ValueFactory.h"
#include "tao/ORB.h"
#include "tao/SystemException.h"
#include "tao/Basic_Types.h"
#include "tao/ORB_Constants.h"
#include "tao/Object.h"
#include "tao/AnyTypeCode/TypeCode.h"
#include "tao/AnyTypeCode/TypeCode_Constants.h"
#include "tao/AnyTypeCode/Any.h"
#include "tao/Valuetype/Value_VarOut_T.h"
#include "tao/Objref_VarOut_T.h"
#include "tao/Arg_Traits_T.h"
#include "tao/Basic_Arguments.h"
#include "tao/Special_Basic_Arguments.h"
#include "tao/Any_Insert_Policy_T.h"
#include "tao/Fixed_Size_Argument_T.h"
#include "tao/Var_Size_Argument_T.h"
#include "tao/Object_Argument_T.h"
#include "tao/AnyTypeCode/Any_Arg_Traits.h"
#include /**/ "tao/Version.h"
#include /**/ "tao/Versioned_Namespace.h"

#if TAO_MAJOR_VERSION != 2 || TAO_MINOR_VERSION != 4 || TAO_MICRO_VERSION != 1
#error This file should be regenerated with TAO_IDL
#endif

#if defined (TAO_EXPORT_MACRO)
#undef TAO_EXPORT_MACRO
#endif
#define TAO_EXPORT_MACRO

// TAO_IDL - Generated from
// be/be_visitor_root/root_ch.cpp:157
TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<typename T> class Narrow_Utils;
}
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_module/module_ch.cpp:35

namespace obvmod
{

  // TAO_IDL - Generated from
  // be/be_valuetype.cpp:564



#if !defined (_OBVMOD_TCOFFSET1__VAR_OUT_CH_)
#define _OBVMOD_TCOFFSET1__VAR_OUT_CH_

  class tcOffset1;
  typedef
    TAO_Value_Var_T<
        tcOffset1
      >
    tcOffset1_var;

  typedef
    TAO_Value_Out_T<
        tcOffset1
      >
    tcOffset1_out;

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // be/be_visitor_valuetype/valuetype_ch.cpp:50

  class  tcOffset1
    : public virtual ::CORBA::ValueBase
  {
  public:

    // TAO_IDL - Generated from
    // be/be_type.cpp:304

    typedef tcOffset1 * _ptr_type;
    typedef tcOffset1_var _var_type;
    typedef tcOffset1_out _out_type;

    static void _tao_any_destructor (void *);

    static tcOffset1* _downcast ( ::CORBA::ValueBase *v);

    /// TAO extensions or internals
    static ::CORBA::Boolean _tao_unmarshal (
        TAO_InputCDR &strm,
        tcOffset1 *&new_object);

    virtual const char* _tao_obv_repository_id (void) const;

    virtual void _tao_obv_truncatable_repo_ids (Repository_Id_List &) const;

    static const char* _tao_obv_static_repository_id (void);

    virtual ::CORBA::TypeCode_ptr _tao_type (void) const;

  public:

    // TAO_IDL - Generated from
    // be/be_visitor_valuetype/field_ch.cpp:459

    virtual void mem (const ::CORBA::Long) = 0;
    virtual ::CORBA::Long mem (void) const = 0;

    // TAO_IDL - Generated from
    // be/be_visitor_valuetype/valuetype_ch.cpp:238

  protected:
    tcOffset1 (void);
    virtual ~tcOffset1 (void);

    virtual ::CORBA::Boolean _tao_marshal_v (TAO_OutputCDR &) const;
    virtual ::CORBA::Boolean _tao_unmarshal_v (TAO_InputCDR &);
    virtual ::CORBA::Boolean _tao_match_formal_type (ptrdiff_t ) const;

  private:
    tcOffset1 (const tcOffset1 &);
    void operator= (const tcOffset1 &);

  protected:
    virtual ::CORBA::Boolean
    _tao_marshal__obvmod_tcOffset1 (TAO_OutputCDR &, TAO_ChunkInfo &) const = 0;

    virtual ::CORBA::Boolean
    _tao_unmarshal__obvmod_tcOffset1 (TAO_InputCDR &, TAO_ChunkInfo &) = 0;
  };

  // TAO_IDL - Generated from
  // be/be_visitor_valuetype/valuetype_init_ch.cpp:57

  class  tcOffset1_init
    : public virtual ::CORBA::ValueFactoryBase
  {
  public:
    tcOffset1_init (void);

    static tcOffset1_init* _downcast ( ::CORBA::ValueFactoryBase *);

    virtual ::CORBA::ValueBase *
    create_for_unmarshal (void);

    // TAO-specific extensions
  public:
    virtual const char* tao_repository_id (void);

  protected:
    virtual ~tcOffset1_init (void);
  };

  // TAO_IDL - Generated from
  // be/be_visitor_typecode/typecode_decl.cpp:34

  extern  ::CORBA::TypeCode_ptr const _tc_tcOffset1;

  // TAO_IDL - Generated from
  // be/be_valuetype.cpp:564



#if !defined (_OBVMOD_TCOFFSET003__VAR_OUT_CH_)
#define _OBVMOD_TCOFFSET003__VAR_OUT_CH_

  class tcOffset003;
  typedef
    TAO_Value_Var_T<
        tcOffset003
      >
    tcOffset003_var;

  typedef
    TAO_Value_Out_T<
        tcOffset003
      >
    tcOffset003_out;

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // be/be_visitor_valuetype/valuetype_ch.cpp:50

  class  tcOffset003
    : public virtual ::CORBA::ValueBase
  {
  public:

    // TAO_IDL - Generated from
    // be/be_type.cpp:304

    typedef tcOffset003 * _ptr_type;
    typedef tcOffset003_var _var_type;
    typedef tcOffset003_out _out_type;

    static void _tao_any_destructor (void *);

    static tcOffset003* _downcast ( ::CORBA::ValueBase *v);

    /// TAO extensions or internals
    static ::CORBA::Boolean _tao_unmarshal (
        TAO_InputCDR &strm,
        tcOffset003 *&new_object);

    virtual const char* _tao_obv_repository_id (void) const;

    virtual void _tao_obv_truncatable_repo_ids (Repository_Id_List &) const;

    static const char* _tao_obv_static_repository_id (void);

    virtual ::CORBA::TypeCode_ptr _tao_type (void) const;

  public:

    // TAO_IDL - Generated from
    // be/be_visitor_valuetype/field_ch.cpp:459

    virtual void mem (const ::CORBA::Long) = 0;
    virtual ::CORBA::Long mem (void) const = 0;

    // TAO_IDL - Generated from
    // be/be_visitor_valuetype/valuetype_ch.cpp:238

  protected:
    tcOffset003 (void);
    virtual ~tcOffset003 (void);

    virtual ::CORBA::Boolean _tao_marshal_v (TAO_OutputCDR &) const;
    virtual ::CORBA::Boolean _tao_unmarshal_v (TAO_InputCDR &);
    virtual ::CORBA::Boolean _tao_match_formal_type (ptrdiff_t ) const;

  private:
    tcOffset003 (const tcOffset003 &);
    void operator= (const tcOffset003 &);

  protected:
    virtual ::CORBA::Boolean
    _tao_marshal__obvmod_tcOffset003 (TAO_OutputCDR &, TAO_ChunkInfo &) const = 0;

    virtual ::CORBA::Boolean
    _tao_unmarshal__obvmod_tcOffset003 (TAO_InputCDR &, TAO_ChunkInfo &) = 0;
  };

  // TAO_IDL - Generated from
  // be/be_visitor_valuetype/valuetype_init_ch.cpp:57

  class  tcOffset003_init
    : public virtual ::CORBA::ValueFactoryBase
  {
  public:
    tcOffset003_init (void);

    static tcOffset003_init* _downcast ( ::CORBA::ValueFactoryBase *);

    virtual ::CORBA::ValueBase *
    create_for_unmarshal (void);

    // TAO-specific extensions
  public:
    virtual const char* tao_repository_id (void);

  protected:
    virtual ~tcOffset003_init (void);
  };

  // TAO_IDL - Generated from
  // be/be_visitor_typecode/typecode_decl.cpp:34

  extern  ::CORBA::TypeCode_ptr const _tc_tcOffset003;

  // TAO_IDL - Generated from
  // be/be_valuetype.cpp:564



#if !defined (_OBVMOD_TCOFFSET00005__VAR_OUT_CH_)
#define _OBVMOD_TCOFFSET00005__VAR_OUT_CH_

  class tcOffset00005;
  typedef
    TAO_Value_Var_T<
        tcOffset00005
      >
    tcOffset00005_var;

  typedef
    TAO_Value_Out_T<
        tcOffset00005
      >
    tcOffset00005_out;

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // be/be_visitor_valuetype/valuetype_ch.cpp:50

  class  tcOffset00005
    : public virtual ::CORBA::ValueBase
  {
  public:

    // TAO_IDL - Generated from
    // be/be_type.cpp:304

    typedef tcOffset00005 * _ptr_type;
    typedef tcOffset00005_var _var_type;
    typedef tcOffset00005_out _out_type;

    static void _tao_any_destructor (void *);

    static tcOffset00005* _downcast ( ::CORBA::ValueBase *v);

    /// TAO extensions or internals
    static ::CORBA::Boolean _tao_unmarshal (
        TAO_InputCDR &strm,
        tcOffset00005 *&new_object);

    virtual const char* _tao_obv_repository_id (void) const;

    virtual void _tao_obv_truncatable_repo_ids (Repository_Id_List &) const;

    static const char* _tao_obv_static_repository_id (void);

    virtual ::CORBA::TypeCode_ptr _tao_type (void) const;

  public:

    // TAO_IDL - Generated from
    // be/be_visitor_valuetype/field_ch.cpp:459

    virtual void mem (const ::CORBA::Long) = 0;
    virtual ::CORBA::Long mem (void) const = 0;

    // TAO_IDL - Generated from
    // be/be_visitor_valuetype/valuetype_ch.cpp:238

  protected:
    tcOffset00005 (void);
    virtual ~tcOffset00005 (void);

    virtual ::CORBA::Boolean _tao_marshal_v (TAO_OutputCDR &) const;
    virtual ::CORBA::Boolean _tao_unmarshal_v (TAO_InputCDR &);
    virtual ::CORBA::Boolean _tao_match_formal_type (ptrdiff_t ) const;

  private:
    tcOffset00005 (const tcOffset00005 &);
    void operator= (const tcOffset00005 &);

  protected:
    virtual ::CORBA::Boolean
    _tao_marshal__obvmod_tcOffset00005 (TAO_OutputCDR &, TAO_ChunkInfo &) const = 0;

    virtual ::CORBA::Boolean
    _tao_unmarshal__obvmod_tcOffset00005 (TAO_InputCDR &, TAO_ChunkInfo &) = 0;
  };

  // TAO_IDL - Generated from
  // be/be_visitor_valuetype/valuetype_init_ch.cpp:57

  class  tcOffset00005_init
    : public virtual ::CORBA::ValueFactoryBase
  {
  public:
    tcOffset00005_init (void);

    static tcOffset00005_init* _downcast ( ::CORBA::ValueFactoryBase *);

    virtual ::CORBA::ValueBase *
    create_for_unmarshal (void);

    // TAO-specific extensions
  public:
    virtual const char* tao_repository_id (void);

  protected:
    virtual ~tcOffset00005_init (void);
  };

  // TAO_IDL - Generated from
  // be/be_visitor_typecode/typecode_decl.cpp:34

  extern  ::CORBA::TypeCode_ptr const _tc_tcOffset00005;

  // TAO_IDL - Generated from
  // be/be_valuetype.cpp:564



#if !defined (_OBVMOD_TCOFFSET0000007__VAR_OUT_CH_)
#define _OBVMOD_TCOFFSET0000007__VAR_OUT_CH_

  class tcOffset0000007;
  typedef
    TAO_Value_Var_T<
        tcOffset0000007
      >
    tcOffset0000007_var;

  typedef
    TAO_Value_Out_T<
        tcOffset0000007
      >
    tcOffset0000007_out;

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // be/be_visitor_valuetype/valuetype_ch.cpp:50

  class  tcOffset0000007
    : public virtual ::CORBA::ValueBase
  {
  public:

    // TAO_IDL - Generated from
    // be/be_type.cpp:304

    typedef tcOffset0000007 * _ptr_type;
    typedef tcOffset0000007_var _var_type;
    typedef tcOffset0000007_out _out_type;

    static void _tao_any_destructor (void *);

    static tcOffset0000007* _downcast ( ::CORBA::ValueBase *v);

    /// TAO extensions or internals
    static ::CORBA::Boolean _tao_unmarshal (
        TAO_InputCDR &strm,
        tcOffset0000007 *&new_object);

    virtual const char* _tao_obv_repository_id (void) const;

    virtual void _tao_obv_truncatable_repo_ids (Repository_Id_List &) const;

    static const char* _tao_obv_static_repository_id (void);

    virtual ::CORBA::TypeCode_ptr _tao_type (void) const;

  public:

    // TAO_IDL - Generated from
    // be/be_visitor_valuetype/field_ch.cpp:459

    virtual void mem (const ::CORBA::Long) = 0;
    virtual ::CORBA::Long mem (void) const = 0;

    // TAO_IDL - Generated from
    // be/be_visitor_valuetype/valuetype_ch.cpp:238

  protected:
    tcOffset0000007 (void);
    virtual ~tcOffset0000007 (void);

    virtual ::CORBA::Boolean _tao_marshal_v (TAO_OutputCDR &) const;
    virtual ::CORBA::Boolean _tao_unmarshal_v (TAO_InputCDR &);
    virtual ::CORBA::Boolean _tao_match_formal_type (ptrdiff_t ) const;

  private:
    tcOffset0000007 (const tcOffset0000007 &);
    void operator= (const tcOffset0000007 &);

  protected:
    virtual ::CORBA::Boolean
    _tao_marshal__obvmod_tcOffset0000007 (TAO_OutputCDR &, TAO_ChunkInfo &) const = 0;

    virtual ::CORBA::Boolean
    _tao_unmarshal__obvmod_tcOffset0000007 (TAO_InputCDR &, TAO_ChunkInfo &) = 0;
  };

  // TAO_IDL - Generated from
  // be/be_visitor_valuetype/valuetype_init_ch.cpp:57

  class  tcOffset0000007_init
    : public virtual ::CORBA::ValueFactoryBase
  {
  public:
    tcOffset0000007_init (void);

    static tcOffset0000007_init* _downcast ( ::CORBA::ValueFactoryBase *);

    virtual ::CORBA::ValueBase *
    create_for_unmarshal (void);

    // TAO-specific extensions
  public:
    virtual const char* tao_repository_id (void);

  protected:
    virtual ~tcOffset0000007_init (void);
  };

  // TAO_IDL - Generated from
  // be/be_visitor_typecode/typecode_decl.cpp:34

  extern  ::CORBA::TypeCode_ptr const _tc_tcOffset0000007;

// TAO_IDL - Generated from
// be/be_visitor_module/module_ch.cpp:64

} // module obvmod

// TAO_IDL - Generated from
// be/be_interface.cpp:748

#if !defined (_TEST__VAR_OUT_CH_)
#define _TEST__VAR_OUT_CH_

class test;
typedef test *test_ptr;

typedef
  TAO_Objref_Var_T<
      test
    >
  test_var;

typedef
  TAO_Objref_Out_T<
      test
    >
  test_out;

#endif /* end #if !defined */

// TAO_IDL - Generated from
// be/be_visitor_interface/interface_ch.cpp:40

class  test
  : public virtual ::CORBA::Object
{
public:
  friend class TAO::Narrow_Utils<test>;

  // TAO_IDL - Generated from
  // be/be_type.cpp:304

  typedef test_ptr _ptr_type;
  typedef test_var _var_type;
  typedef test_out _out_type;

  static void _tao_any_destructor (void *);

  // The static operations.
  static test_ptr _duplicate (test_ptr obj);

  static void _tao_release (test_ptr obj);

  static test_ptr _narrow (::CORBA::Object_ptr obj);
  static test_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
  static test_ptr _nil (void);

  virtual ::CORBA::Any * get_value (
    ::CORBA::Long type);

  virtual void shutdown (
    void);

  // TAO_IDL - Generated from
  // be/be_visitor_interface/interface_ch.cpp:137

  virtual ::CORBA::Boolean _is_a (const char *type_id);
  virtual const char* _interface_repository_id (void) const;
  virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);

protected:
  // Concrete interface only.
  test (void);

  // Concrete non-local interface only.
  test (
      ::IOP::IOR *ior,
      TAO_ORB_Core *orb_core);

  // Non-local interface only.
  test (
      TAO_Stub *objref,
      ::CORBA::Boolean _tao_collocated = false,
      TAO_Abstract_ServantBase *servant = 0,
      TAO_ORB_Core *orb_core = 0);

  virtual ~test (void);

private:
  // Private and unimplemented for concrete interfaces.
  test (const test &);

  void operator= (const test &);
};

// TAO_IDL - Generated from
// be/be_visitor_typecode/typecode_decl.cpp:34

extern  ::CORBA::TypeCode_ptr const _tc_test;

// TAO_IDL - Generated from
// be/be_visitor_arg_traits.cpp:66

TAO_BEGIN_VERSIONED_NAMESPACE_DECL


// Arg traits specializations.
namespace TAO
{

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:306

#if !defined (_OBVMOD_TCOFFSET1__ARG_TRAITS_)
#define _OBVMOD_TCOFFSET1__ARG_TRAITS_

  template<>
  class Arg_Traits< ::obvmod::tcOffset1>
    : public
        Object_Arg_Traits_T<
            ::obvmod::tcOffset1 *,
            ::obvmod::tcOffset1_var,
            ::obvmod::tcOffset1_out,
            TAO::Value_Traits<obvmod::tcOffset1>,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:306

#if !defined (_OBVMOD_TCOFFSET003__ARG_TRAITS_)
#define _OBVMOD_TCOFFSET003__ARG_TRAITS_

  template<>
  class Arg_Traits< ::obvmod::tcOffset003>
    : public
        Object_Arg_Traits_T<
            ::obvmod::tcOffset003 *,
            ::obvmod::tcOffset003_var,
            ::obvmod::tcOffset003_out,
            TAO::Value_Traits<obvmod::tcOffset003>,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:306

#if !defined (_OBVMOD_TCOFFSET00005__ARG_TRAITS_)
#define _OBVMOD_TCOFFSET00005__ARG_TRAITS_

  template<>
  class Arg_Traits< ::obvmod::tcOffset00005>
    : public
        Object_Arg_Traits_T<
            ::obvmod::tcOffset00005 *,
            ::obvmod::tcOffset00005_var,
            ::obvmod::tcOffset00005_out,
            TAO::Value_Traits<obvmod::tcOffset00005>,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:306

#if !defined (_OBVMOD_TCOFFSET0000007__ARG_TRAITS_)
#define _OBVMOD_TCOFFSET0000007__ARG_TRAITS_

  template<>
  class Arg_Traits< ::obvmod::tcOffset0000007>
    : public
        Object_Arg_Traits_T<
            ::obvmod::tcOffset0000007 *,
            ::obvmod::tcOffset0000007_var,
            ::obvmod::tcOffset0000007_out,
            TAO::Value_Traits<obvmod::tcOffset0000007>,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:145

#if !defined (_TEST__ARG_TRAITS_)
#define _TEST__ARG_TRAITS_

  template<>
  class  Arg_Traits< ::test>
    : public
        Object_Arg_Traits_T<
            ::test_ptr,
            ::test_var,
            ::test_out,
            TAO::Objref_Traits<test>,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

#endif /* end #if !defined */
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_valuetype/obv_module.cpp:44

namespace OBV_obvmod
{

  // TAO_IDL - Generated from
  // be/be_visitor_valuetype/valuetype_obv_ch.cpp:44

  // OBV_ class
  class  tcOffset1
    : public virtual obvmod::tcOffset1,
      public virtual ::CORBA::DefaultValueRefCountBase
  {

public:

  // TAO_IDL - Generated from
  // be/be_visitor_valuetype/field_ch.cpp:459

  virtual void mem (const ::CORBA::Long);
  virtual ::CORBA::Long mem (void) const;

public:
  tcOffset1 (void);
  tcOffset1 (
      ::CORBA::Long _tao_init_mem
    );
  virtual ~tcOffset1 (void);

public:
  virtual ::CORBA::ValueBase *_copy_value (void);

protected:
  virtual ::CORBA::Boolean
  _tao_marshal__obvmod_tcOffset1 (TAO_OutputCDR &, TAO_ChunkInfo &) const;

  virtual ::CORBA::Boolean
  _tao_unmarshal__obvmod_tcOffset1 (TAO_InputCDR &, TAO_ChunkInfo &);

  ::CORBA::Boolean _tao_marshal_state (TAO_OutputCDR &, TAO_ChunkInfo &) const;
  ::CORBA::Boolean _tao_unmarshal_state (TAO_InputCDR &, TAO_ChunkInfo &);
  virtual void truncation_hook (void);

private:
  ::CORBA::Long _pd_mem;
  CORBA::Boolean require_truncation_;
};

// TAO_IDL - Generated from
// be/be_visitor_valuetype/valuetype_obv_ch.cpp:44

// OBV_ class
class  tcOffset003
  : public virtual obvmod::tcOffset003,
    public virtual ::CORBA::DefaultValueRefCountBase
{

public:

  // TAO_IDL - Generated from
  // be/be_visitor_valuetype/field_ch.cpp:459

  virtual void mem (const ::CORBA::Long);
  virtual ::CORBA::Long mem (void) const;

public:
  tcOffset003 (void);
  tcOffset003 (
      ::CORBA::Long _tao_init_mem
    );
  virtual ~tcOffset003 (void);

public:
  virtual ::CORBA::ValueBase *_copy_value (void);

protected:
  virtual ::CORBA::Boolean
  _tao_marshal__obvmod_tcOffset003 (TAO_OutputCDR &, TAO_ChunkInfo &) const;

  virtual ::CORBA::Boolean
  _tao_unmarshal__obvmod_tcOffset003 (TAO_InputCDR &, TAO_ChunkInfo &);

  ::CORBA::Boolean _tao_marshal_state (TAO_OutputCDR &, TAO_ChunkInfo &) const;
  ::CORBA::Boolean _tao_unmarshal_state (TAO_InputCDR &, TAO_ChunkInfo &);
  virtual void truncation_hook (void);

private:
  ::CORBA::Long _pd_mem;
  CORBA::Boolean require_truncation_;
};

// TAO_IDL - Generated from
// be/be_visitor_valuetype/valuetype_obv_ch.cpp:44

// OBV_ class
class  tcOffset00005
  : public virtual obvmod::tcOffset00005,
    public virtual ::CORBA::DefaultValueRefCountBase
{

public:

  // TAO_IDL - Generated from
  // be/be_visitor_valuetype/field_ch.cpp:459

  virtual void mem (const ::CORBA::Long);
  virtual ::CORBA::Long mem (void) const;

public:
  tcOffset00005 (void);
  tcOffset00005 (
      ::CORBA::Long _tao_init_mem
    );
  virtual ~tcOffset00005 (void);

public:
  virtual ::CORBA::ValueBase *_copy_value (void);

protected:
  virtual ::CORBA::Boolean
  _tao_marshal__obvmod_tcOffset00005 (TAO_OutputCDR &, TAO_ChunkInfo &) const;

  virtual ::CORBA::Boolean
  _tao_unmarshal__obvmod_tcOffset00005 (TAO_InputCDR &, TAO_ChunkInfo &);

  ::CORBA::Boolean _tao_marshal_state (TAO_OutputCDR &, TAO_ChunkInfo &) const;
  ::CORBA::Boolean _tao_unmarshal_state (TAO_InputCDR &, TAO_ChunkInfo &);
  virtual void truncation_hook (void);

private:
  ::CORBA::Long _pd_mem;
  CORBA::Boolean require_truncation_;
};

// TAO_IDL - Generated from
// be/be_visitor_valuetype/valuetype_obv_ch.cpp:44

// OBV_ class
class  tcOffset0000007
  : public virtual obvmod::tcOffset0000007,
    public virtual ::CORBA::DefaultValueRefCountBase
{

public:

  // TAO_IDL - Generated from
  // be/be_visitor_valuetype/field_ch.cpp:459

  virtual void mem (const ::CORBA::Long);
  virtual ::CORBA::Long mem (void) const;

public:
  tcOffset0000007 (void);
  tcOffset0000007 (
      ::CORBA::Long _tao_init_mem
    );
  virtual ~tcOffset0000007 (void);

public:
  virtual ::CORBA::ValueBase *_copy_value (void);

protected:
  virtual ::CORBA::Boolean
  _tao_marshal__obvmod_tcOffset0000007 (TAO_OutputCDR &, TAO_ChunkInfo &) const;

  virtual ::CORBA::Boolean
  _tao_unmarshal__obvmod_tcOffset0000007 (TAO_InputCDR &, TAO_ChunkInfo &);

  ::CORBA::Boolean _tao_marshal_state (TAO_OutputCDR &, TAO_ChunkInfo &) const;
  ::CORBA::Boolean _tao_unmarshal_state (TAO_InputCDR &, TAO_ChunkInfo &);
  virtual void truncation_hook (void);

private:
  ::CORBA::Long _pd_mem;
  CORBA::Boolean require_truncation_;
};
}

// TAO_IDL - Generated from
// be/be_visitor_traits.cpp:60

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Traits specializations.
namespace TAO
{

#if !defined (_OBVMOD_TCOFFSET1__TRAITS_)
#define _OBVMOD_TCOFFSET1__TRAITS_

  template<>
  struct  Value_Traits<obvmod::tcOffset1>
  {
    static void add_ref (obvmod::tcOffset1 *);
    static void remove_ref (obvmod::tcOffset1 *);
    static void release (obvmod::tcOffset1 *);
  };

#endif /* end #if !defined */

#if !defined (_OBVMOD_TCOFFSET003__TRAITS_)
#define _OBVMOD_TCOFFSET003__TRAITS_

  template<>
  struct  Value_Traits<obvmod::tcOffset003>
  {
    static void add_ref (obvmod::tcOffset003 *);
    static void remove_ref (obvmod::tcOffset003 *);
    static void release (obvmod::tcOffset003 *);
  };

#endif /* end #if !defined */

#if !defined (_OBVMOD_TCOFFSET00005__TRAITS_)
#define _OBVMOD_TCOFFSET00005__TRAITS_

  template<>
  struct  Value_Traits<obvmod::tcOffset00005>
  {
    static void add_ref (obvmod::tcOffset00005 *);
    static void remove_ref (obvmod::tcOffset00005 *);
    static void release (obvmod::tcOffset00005 *);
  };

#endif /* end #if !defined */

#if !defined (_OBVMOD_TCOFFSET0000007__TRAITS_)
#define _OBVMOD_TCOFFSET0000007__TRAITS_

  template<>
  struct  Value_Traits<obvmod::tcOffset0000007>
  {
    static void add_ref (obvmod::tcOffset0000007 *);
    static void remove_ref (obvmod::tcOffset0000007 *);
    static void release (obvmod::tcOffset0000007 *);
  };

#endif /* end #if !defined */

#if !defined (_TEST__TRAITS_)
#define _TEST__TRAITS_

  template<>
  struct  Objref_Traits< ::test>
  {
    static ::test_ptr duplicate (
        ::test_ptr p);
    static void release (
        ::test_ptr p);
    static ::test_ptr nil (void);
    static ::CORBA::Boolean marshal (
        const ::test_ptr p,
        TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */
}
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_valuetype/any_op_ch.cpp:43



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace obvmod
{
   void operator<<= ( ::CORBA::Any &, tcOffset1 *); // copying
   void operator<<= ( ::CORBA::Any &, tcOffset1 **); // non-copying
   ::CORBA::Boolean operator>>= (const ::CORBA::Any &, tcOffset1 *&);
}

#else


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 void operator<<= (::CORBA::Any &, obvmod::tcOffset1 *); // copying
 void operator<<= (::CORBA::Any &, obvmod::tcOffset1 **); // non-copying
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, obvmod::tcOffset1 *&);
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_valuetype/any_op_ch.cpp:43



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace obvmod
{
   void operator<<= ( ::CORBA::Any &, tcOffset003 *); // copying
   void operator<<= ( ::CORBA::Any &, tcOffset003 **); // non-copying
   ::CORBA::Boolean operator>>= (const ::CORBA::Any &, tcOffset003 *&);
}

#else


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 void operator<<= (::CORBA::Any &, obvmod::tcOffset003 *); // copying
 void operator<<= (::CORBA::Any &, obvmod::tcOffset003 **); // non-copying
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, obvmod::tcOffset003 *&);
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_valuetype/any_op_ch.cpp:43



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace obvmod
{
   void operator<<= ( ::CORBA::Any &, tcOffset00005 *); // copying
   void operator<<= ( ::CORBA::Any &, tcOffset00005 **); // non-copying
   ::CORBA::Boolean operator>>= (const ::CORBA::Any &, tcOffset00005 *&);
}

#else


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 void operator<<= (::CORBA::Any &, obvmod::tcOffset00005 *); // copying
 void operator<<= (::CORBA::Any &, obvmod::tcOffset00005 **); // non-copying
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, obvmod::tcOffset00005 *&);
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_valuetype/any_op_ch.cpp:43



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace obvmod
{
   void operator<<= ( ::CORBA::Any &, tcOffset0000007 *); // copying
   void operator<<= ( ::CORBA::Any &, tcOffset0000007 **); // non-copying
   ::CORBA::Boolean operator>>= (const ::CORBA::Any &, tcOffset0000007 *&);
}

#else


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 void operator<<= (::CORBA::Any &, obvmod::tcOffset0000007 *); // copying
 void operator<<= (::CORBA::Any &, obvmod::tcOffset0000007 **); // non-copying
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, obvmod::tcOffset0000007 *&);
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_interface/any_op_ch.cpp:41


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 void operator<<= (::CORBA::Any &, test_ptr); // copying
 void operator<<= (::CORBA::Any &, test_ptr *); // non-copying
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, test_ptr &);
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_valuetype.cpp:456


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

namespace CORBA
{
  extern  void add_ref (obvmod::tcOffset1 *);
  extern  void remove_ref (obvmod::tcOffset1 *);
}
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_valuetype/cdr_op_ch.cpp:49


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 ::CORBA::Boolean operator<< (TAO_OutputCDR &, const obvmod::tcOffset1 *);
 ::CORBA::Boolean operator>> (TAO_InputCDR &, obvmod::tcOffset1 *&);

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_valuetype.cpp:456


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

namespace CORBA
{
  extern  void add_ref (obvmod::tcOffset003 *);
  extern  void remove_ref (obvmod::tcOffset003 *);
}
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_valuetype/cdr_op_ch.cpp:49


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 ::CORBA::Boolean operator<< (TAO_OutputCDR &, const obvmod::tcOffset003 *);
 ::CORBA::Boolean operator>> (TAO_InputCDR &, obvmod::tcOffset003 *&);

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_valuetype.cpp:456


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

namespace CORBA
{
  extern  void add_ref (obvmod::tcOffset00005 *);
  extern  void remove_ref (obvmod::tcOffset00005 *);
}
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_valuetype/cdr_op_ch.cpp:49


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 ::CORBA::Boolean operator<< (TAO_OutputCDR &, const obvmod::tcOffset00005 *);
 ::CORBA::Boolean operator>> (TAO_InputCDR &, obvmod::tcOffset00005 *&);

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_valuetype.cpp:456


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

namespace CORBA
{
  extern  void add_ref (obvmod::tcOffset0000007 *);
  extern  void remove_ref (obvmod::tcOffset0000007 *);
}
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_valuetype/cdr_op_ch.cpp:49


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 ::CORBA::Boolean operator<< (TAO_OutputCDR &, const obvmod::tcOffset0000007 *);
 ::CORBA::Boolean operator>> (TAO_InputCDR &, obvmod::tcOffset0000007 *&);

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_interface/cdr_op_ch.cpp:41

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 ::CORBA::Boolean operator<< (TAO_OutputCDR &, const test_ptr );
 ::CORBA::Boolean operator>> (TAO_InputCDR &, test_ptr &);

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_codegen.cpp:1700
#if defined (__ACE_INLINE__)
#include "testC.inl"
#endif /* defined INLINE */

#include /**/ "ace/post.h"

#endif /* ifndef */

