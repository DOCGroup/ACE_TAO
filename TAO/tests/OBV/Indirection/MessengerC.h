// -*- C++ -*-
/**
 * Code generated by the The ACE ORB (TAO) IDL Compiler v2.4.1
 * TAO and the TAO IDL Compiler have been developed by:
 *       Center for Distributed Object Computing
 *       Washington University
 *       St. Louis, MO
 *       USA
 *       http://www.cs.wustl.edu/~schmidt/doc-center.html
 * and
 *       Distributed Object Computing Laboratory
 *       University of California at Irvine
 *       Irvine, CA
 *       USA
 * and
 *       Institute for Software Integrated Systems
 *       Vanderbilt University
 *       Nashville, TN
 *       USA
 *       http://www.isis.vanderbilt.edu/
 *
 * Information about TAO is available at:
 *     http://www.dre.vanderbilt.edu/~schmidt/TAO.html
 **/

// TAO_IDL - Generated from
// be/be_codegen.cpp:149

#ifndef _TAO_IDL_MESSENGERC_UDE1DL_H_
#define _TAO_IDL_MESSENGERC_UDE1DL_H_

#include /**/ "ace/pre.h"


#include /**/ "ace/config-all.h"

#if !defined (ACE_LACKS_PRAGMA_ONCE)
# pragma once
#endif /* ACE_LACKS_PRAGMA_ONCE */


#include "tao/AnyTypeCode/AnyTypeCode_methods.h"
#include "tao/AnyTypeCode/Any.h"
#include "tao/Valuetype/ValueBase.h"
#include "tao/CDR.h"
#include "tao/Valuetype/Valuetype_Adapter_Factory_Impl.h"
#include "tao/Valuetype/ValueFactory.h"
#include "tao/ORB.h"
#include "tao/SystemException.h"
#include "tao/Basic_Types.h"
#include "tao/ORB_Constants.h"
#include "tao/Object.h"
#include "tao/AnyTypeCode/TypeCode.h"
#include "tao/AnyTypeCode/TypeCode_Constants.h"
#include "tao/AnyTypeCode/Any.h"
#include "tao/String_Manager_T.h"
#include "tao/Valuetype/Sequence_T.h"
#include "tao/Sequence_T.h"
#include "tao/Valuetype/Value_VarOut_T.h"
#include "tao/Objref_VarOut_T.h"
#include "tao/Seq_Var_T.h"
#include "tao/Seq_Out_T.h"
#include "tao/Arg_Traits_T.h"
#include "tao/Basic_Arguments.h"
#include "tao/Special_Basic_Arguments.h"
#include "tao/Any_Insert_Policy_T.h"
#include "tao/Fixed_Size_Argument_T.h"
#include "tao/Var_Size_Argument_T.h"
#include "tao/Object_Argument_T.h"
#include "tao/UB_String_Arguments.h"
#include /**/ "tao/Version.h"
#include /**/ "tao/Versioned_Namespace.h"

#if TAO_MAJOR_VERSION != 2 || TAO_MINOR_VERSION != 4 || TAO_MICRO_VERSION != 1
#error This file should be regenerated with TAO_IDL
#endif

#if defined (TAO_EXPORT_MACRO)
#undef TAO_EXPORT_MACRO
#endif
#define TAO_EXPORT_MACRO

// TAO_IDL - Generated from
// be/be_visitor_root/root_ch.cpp:157
TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<typename T> class Narrow_Utils;
}
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_module/module_ch.cpp:35

namespace demo
{

  // TAO_IDL - Generated from
  // be/be_visitor_module/module_ch.cpp:35

  namespace value
  {

    // TAO_IDL - Generated from
    // be/be_visitor_module/module_ch.cpp:35

    namespace idl
    {

      // TAO_IDL - Generated from
      // be/be_valuetype.cpp:564



#if !defined (_DEMO_VALUE_IDL_CONFIGVALUE__VAR_OUT_CH_)
#define _DEMO_VALUE_IDL_CONFIGVALUE__VAR_OUT_CH_

      class ConfigValue;
      typedef
        TAO_Value_Var_T<
            ConfigValue
          >
        ConfigValue_var;

      typedef
        TAO_Value_Out_T<
            ConfigValue
          >
        ConfigValue_out;

#endif /* end #if !defined */

      // TAO_IDL - Generated from
      // be/be_visitor_valuetype/valuetype_ch.cpp:50

      class  ConfigValue
        : public virtual ::CORBA::ValueBase
      {
      public:

        // TAO_IDL - Generated from
        // be/be_type.cpp:304

        typedef ConfigValue * _ptr_type;
        typedef ConfigValue_var _var_type;
        typedef ConfigValue_out _out_type;

        static void _tao_any_destructor (void *);

        static ConfigValue* _downcast ( ::CORBA::ValueBase *v);

        /// TAO extensions or internals
        static ::CORBA::Boolean _tao_unmarshal (
            TAO_InputCDR &strm,
            ConfigValue *&new_object);

        virtual const char* _tao_obv_repository_id (void) const;

        virtual void _tao_obv_truncatable_repo_ids (Repository_Id_List &) const;

        static const char* _tao_obv_static_repository_id (void);

        virtual ::CORBA::TypeCode_ptr _tao_type (void) const;

      public:

        // TAO_IDL - Generated from
        // be/be_visitor_valuetype/field_ch.cpp:608

        virtual void name (char *val) = 0;
        virtual void name (const char *val) = 0;
        virtual void name (const ::CORBA::String_var &val) = 0;
        virtual const char *name (void) const = 0;

      public:

        // TAO_IDL - Generated from
        // be/be_visitor_valuetype/field_ch.cpp:459

        virtual void value (const ::CORBA::Any &) = 0;
        virtual const ::CORBA::Any &value (void) const = 0;
        virtual ::CORBA::Any &value (void) = 0;

        // TAO_IDL - Generated from
        // be/be_visitor_valuetype/valuetype_ch.cpp:238

      protected:
        ConfigValue (void);
        virtual ~ConfigValue (void);

        virtual ::CORBA::Boolean _tao_marshal_v (TAO_OutputCDR &) const;
        virtual ::CORBA::Boolean _tao_unmarshal_v (TAO_InputCDR &);
        virtual ::CORBA::Boolean _tao_match_formal_type (ptrdiff_t ) const;

      private:
        ConfigValue (const ConfigValue &);
        void operator= (const ConfigValue &);

      protected:
        virtual ::CORBA::Boolean
        _tao_marshal__demo_value_idl_ConfigValue (TAO_OutputCDR &, TAO_ChunkInfo &) const = 0;

        virtual ::CORBA::Boolean
        _tao_unmarshal__demo_value_idl_ConfigValue (TAO_InputCDR &, TAO_ChunkInfo &) = 0;
      };

      // TAO_IDL - Generated from
      // be/be_visitor_valuetype/valuetype_init_ch.cpp:57

      class  ConfigValue_init
        : public virtual ::CORBA::ValueFactoryBase
      {
      public:
        ConfigValue_init (void);

        static ConfigValue_init* _downcast ( ::CORBA::ValueFactoryBase *);

        virtual ::CORBA::ValueBase *
        create_for_unmarshal (void);

        // TAO-specific extensions
      public:
        virtual const char* tao_repository_id (void);

      protected:
        virtual ~ConfigValue_init (void);
      };

      // TAO_IDL - Generated from
      // be/be_visitor_typecode/typecode_decl.cpp:34

      extern  ::CORBA::TypeCode_ptr const _tc_ConfigValue;

      // TAO_IDL - Generated from
      // be/be_visitor_sequence/sequence_ch.cpp:99

#if !defined (_DEMO_VALUE_IDL_CONFIGVALUES_CH_)
#define _DEMO_VALUE_IDL_CONFIGVALUES_CH_

      class ConfigValues;

      typedef
        ::TAO_VarSeq_Var_T<
            ConfigValues
          >
        ConfigValues_var;

      typedef
        ::TAO_Seq_Out_T<
            ConfigValues
          >
        ConfigValues_out;

      class  ConfigValues
        : public
            ::TAO::unbounded_valuetype_sequence<
                ConfigValue,
                ConfigValue_var
              >
      {
      public:
        ConfigValues (void);
        ConfigValues ( ::CORBA::ULong max);
        ConfigValues (
          ::CORBA::ULong max,
          ::CORBA::ULong length,
          ConfigValue ** buffer,
          ::CORBA::Boolean release = false);
        ConfigValues (const ConfigValues &);
        virtual ~ConfigValues (void);


        // TAO_IDL - Generated from
        // be/be_type.cpp:304


        typedef ConfigValues_var _var_type;
        typedef ConfigValues_out _out_type;

        static void _tao_any_destructor (void *);
      };

#endif /* end #if !defined */

      // TAO_IDL - Generated from
      // be/be_visitor_typecode/typecode_decl.cpp:34

      extern  ::CORBA::TypeCode_ptr const _tc_ConfigValues;

      // TAO_IDL - Generated from
      // be/be_valuetype.cpp:564



#if !defined (_DEMO_VALUE_IDL_BASEVALUE__VAR_OUT_CH_)
#define _DEMO_VALUE_IDL_BASEVALUE__VAR_OUT_CH_

      class BaseValue;
      typedef
        TAO_Value_Var_T<
            BaseValue
          >
        BaseValue_var;

      typedef
        TAO_Value_Out_T<
            BaseValue
          >
        BaseValue_out;

#endif /* end #if !defined */

      // TAO_IDL - Generated from
      // be/be_visitor_valuetype/valuetype_ch.cpp:50

      class  BaseValue
        : public virtual ::CORBA::ValueBase
      {
      public:

        // TAO_IDL - Generated from
        // be/be_type.cpp:304

        typedef BaseValue * _ptr_type;
        typedef BaseValue_var _var_type;
        typedef BaseValue_out _out_type;

        static void _tao_any_destructor (void *);

        static BaseValue* _downcast ( ::CORBA::ValueBase *v);

        /// TAO extensions or internals
        static ::CORBA::Boolean _tao_unmarshal (
            TAO_InputCDR &strm,
            BaseValue *&new_object);

        virtual const char* _tao_obv_repository_id (void) const;

        virtual void _tao_obv_truncatable_repo_ids (Repository_Id_List &) const;

        static const char* _tao_obv_static_repository_id (void);

        virtual ::CORBA::TypeCode_ptr _tao_type (void) const;

      public:

        // TAO_IDL - Generated from
        // be/be_visitor_valuetype/field_ch.cpp:459

        virtual void basic_data (const ::CORBA::ULong) = 0;
        virtual ::CORBA::ULong basic_data (void) const = 0;

        // TAO_IDL - Generated from
        // be/be_visitor_valuetype/valuetype_ch.cpp:238

      protected:
        BaseValue (void);
        virtual ~BaseValue (void);

        virtual ::CORBA::Boolean _tao_marshal_v (TAO_OutputCDR &) const;
        virtual ::CORBA::Boolean _tao_unmarshal_v (TAO_InputCDR &);
        virtual ::CORBA::Boolean _tao_match_formal_type (ptrdiff_t ) const;

      private:
        BaseValue (const BaseValue &);
        void operator= (const BaseValue &);

      protected:
        virtual ::CORBA::Boolean
        _tao_marshal__demo_value_idl_BaseValue (TAO_OutputCDR &, TAO_ChunkInfo &) const = 0;

        virtual ::CORBA::Boolean
        _tao_unmarshal__demo_value_idl_BaseValue (TAO_InputCDR &, TAO_ChunkInfo &) = 0;
      };

      // TAO_IDL - Generated from
      // be/be_visitor_valuetype/valuetype_init_ch.cpp:57

      class  BaseValue_init
        : public virtual ::CORBA::ValueFactoryBase
      {
      public:
        BaseValue_init (void);

        static BaseValue_init* _downcast ( ::CORBA::ValueFactoryBase *);

        virtual ::CORBA::ValueBase *
        create_for_unmarshal (void);

        // TAO-specific extensions
      public:
        virtual const char* tao_repository_id (void);

      protected:
        virtual ~BaseValue_init (void);
      };

      // TAO_IDL - Generated from
      // be/be_visitor_typecode/typecode_decl.cpp:34

      extern  ::CORBA::TypeCode_ptr const _tc_BaseValue;

      // TAO_IDL - Generated from
      // be/be_valuetype.cpp:564



#if !defined (_DEMO_VALUE_IDL_TVALUE__VAR_OUT_CH_)
#define _DEMO_VALUE_IDL_TVALUE__VAR_OUT_CH_

      class TValue;
      typedef
        TAO_Value_Var_T<
            TValue
          >
        TValue_var;

      typedef
        TAO_Value_Out_T<
            TValue
          >
        TValue_out;

#endif /* end #if !defined */

      // TAO_IDL - Generated from
      // be/be_visitor_valuetype/valuetype_ch.cpp:50

      class  TValue
        : public virtual BaseValue
      {
      public:

        // TAO_IDL - Generated from
        // be/be_type.cpp:304

        typedef TValue * _ptr_type;
        typedef TValue_var _var_type;
        typedef TValue_out _out_type;

        static void _tao_any_destructor (void *);

        static TValue* _downcast ( ::CORBA::ValueBase *v);

        /// TAO extensions or internals
        static ::CORBA::Boolean _tao_unmarshal (
            TAO_InputCDR &strm,
            TValue *&new_object);

        virtual const char* _tao_obv_repository_id (void) const;

        virtual void _tao_obv_truncatable_repo_ids (Repository_Id_List &) const;

        static const char* _tao_obv_static_repository_id (void);

        virtual ::CORBA::TypeCode_ptr _tao_type (void) const;

      public:

        // TAO_IDL - Generated from
        // be/be_visitor_valuetype/field_ch.cpp:459

        virtual void data (const ::CORBA::ULong) = 0;
        virtual ::CORBA::ULong data (void) const = 0;

        // TAO_IDL - Generated from
        // be/be_visitor_valuetype/valuetype_ch.cpp:238

      protected:
        TValue (void);
        virtual ~TValue (void);

        virtual ::CORBA::Boolean _tao_marshal_v (TAO_OutputCDR &) const;
        virtual ::CORBA::Boolean _tao_unmarshal_v (TAO_InputCDR &);
        virtual ::CORBA::Boolean _tao_match_formal_type (ptrdiff_t ) const;

      private:
        TValue (const TValue &);
        void operator= (const TValue &);

      protected:
        virtual ::CORBA::Boolean
        _tao_marshal__demo_value_idl_TValue (TAO_OutputCDR &, TAO_ChunkInfo &) const = 0;

        virtual ::CORBA::Boolean
        _tao_unmarshal__demo_value_idl_TValue (TAO_InputCDR &, TAO_ChunkInfo &) = 0;
      };

      // TAO_IDL - Generated from
      // be/be_visitor_valuetype/valuetype_init_ch.cpp:57

      class  TValue_init
        : public virtual ::CORBA::ValueFactoryBase
      {
      public:
        TValue_init (void);

        static TValue_init* _downcast ( ::CORBA::ValueFactoryBase *);

        virtual ::CORBA::ValueBase *
        create_for_unmarshal (void);

        // TAO-specific extensions
      public:
        virtual const char* tao_repository_id (void);

      protected:
        virtual ~TValue_init (void);
      };

      // TAO_IDL - Generated from
      // be/be_visitor_typecode/typecode_decl.cpp:34

      extern  ::CORBA::TypeCode_ptr const _tc_TValue;

      // TAO_IDL - Generated from
      // be/be_visitor_valuebox/valuebox_ch.cpp:41

      class boxedLong;

      typedef
        TAO_Value_Var_T<
            boxedLong
          >
        boxedLong_var;

      typedef
        TAO_Value_Out_T<
            boxedLong
          >
        boxedLong_out;

      class  boxedLong
        : public virtual ::CORBA::DefaultValueRefCountBase
      {
      public:

        // TAO_IDL - Generated from
        // be/be_type.cpp:304


        typedef boxedLong_var _var_type;
        typedef boxedLong_out _out_type;

        static void _tao_any_destructor (void *);

        static boxedLong* _downcast ( ::CORBA::ValueBase *);
        ::CORBA::ValueBase * _copy_value (void);

        virtual const char* _tao_obv_repository_id (void) const;

        virtual void _tao_obv_truncatable_repo_ids (Repository_Id_List &ids) const;

        static const char* _tao_obv_static_repository_id (void);

        static ::CORBA::Boolean _tao_unmarshal (
            TAO_InputCDR &,
            boxedLong *&
          );

        virtual ::CORBA::TypeCode_ptr _tao_type (void) const;



        // TAO_IDL - Generated from
        // be/be_visitor_valuebox/valuebox_ch.cpp:690

        // Constructors
        boxedLong (void);
        boxedLong (CORBA::Long val);
        boxedLong (const boxedLong& val);

        // Assignment operator
        boxedLong& operator= (CORBA::Long val);

        // Accessor and modifier
        CORBA::Long _value (void) const;
        void _value (CORBA::Long val);

        // Access to the boxed value for method signatures
        CORBA::Long _boxed_in (void) const;
        CORBA::Long& _boxed_inout (void);
        CORBA::Long& _boxed_out (void);

      private:
        CORBA::Long _pd_value;


        // TAO_IDL - Generated from
        // be/be_visitor_valuebox/valuebox_ch.cpp:114

      protected:
        virtual ~boxedLong (void);
        virtual ::CORBA::Boolean _tao_marshal_v (TAO_OutputCDR &) const;
        virtual ::CORBA::Boolean _tao_unmarshal_v (TAO_InputCDR &);
        virtual ::CORBA::Boolean _tao_match_formal_type (ptrdiff_t ) const;

      private:
        void operator= (const boxedLong & val);

      };

      // TAO_IDL - Generated from
      // be/be_visitor_typecode/typecode_decl.cpp:34

      extern  ::CORBA::TypeCode_ptr const _tc_boxedLong;

      // TAO_IDL - Generated from
      // be/be_visitor_valuebox/valuebox_ch.cpp:41

      class boxedString;

      typedef
        TAO_Value_Var_T<
            boxedString
          >
        boxedString_var;

      typedef
        TAO_Value_Out_T<
            boxedString
          >
        boxedString_out;

      class  boxedString
        : public virtual ::CORBA::DefaultValueRefCountBase
      {
      public:

        // TAO_IDL - Generated from
        // be/be_type.cpp:304


        typedef boxedString_var _var_type;
        typedef boxedString_out _out_type;

        static void _tao_any_destructor (void *);

        static boxedString* _downcast ( ::CORBA::ValueBase *);
        ::CORBA::ValueBase * _copy_value (void);

        virtual const char* _tao_obv_repository_id (void) const;

        virtual void _tao_obv_truncatable_repo_ids (Repository_Id_List &ids) const;

        static const char* _tao_obv_static_repository_id (void);

        static ::CORBA::Boolean _tao_unmarshal (
            TAO_InputCDR &,
            boxedString *&
          );

        virtual ::CORBA::TypeCode_ptr _tao_type (void) const;



        // TAO_IDL - Generated from
        // be/be_visitor_valuebox/valuebox_ch.cpp:406

        // Constructors
        boxedString (void);
        boxedString (char * val);
        boxedString (const char * val);
        boxedString (const ::CORBA::String_var& var);
        boxedString (const boxedString& val);
        // assignment operators
        boxedString& operator= (char * val);

        boxedString& operator= (const char * val);

        boxedString& operator= (const ::CORBA::String_var& var);

        // Accessor
        const char * _value (void) const;

        // Modifiers
        void _value (char * val);
        void _value (const char * val);
        void _value (const ::CORBA::String_var& var);

        // Access to the boxed value for method signatures
        const char * _boxed_in (void) const;
        char *& _boxed_inout (void);
        char *& _boxed_out (void);
        // Allows access and modification using a slot.
        char & operator[] ( ::CORBA::ULong slot);

        // Allows only accessing thru a slot.
        char operator[] ( ::CORBA::ULong slot) const;

      private:
        ::CORBA::String_var _pd_value;


        // TAO_IDL - Generated from
        // be/be_visitor_valuebox/valuebox_ch.cpp:114

      protected:
        virtual ~boxedString (void);
        virtual ::CORBA::Boolean _tao_marshal_v (TAO_OutputCDR &) const;
        virtual ::CORBA::Boolean _tao_unmarshal_v (TAO_InputCDR &);
        virtual ::CORBA::Boolean _tao_match_formal_type (ptrdiff_t ) const;

      private:
        void operator= (const boxedString & val);

      };

      // TAO_IDL - Generated from
      // be/be_visitor_typecode/typecode_decl.cpp:34

      extern  ::CORBA::TypeCode_ptr const _tc_boxedString;

      // TAO_IDL - Generated from
      // be/be_valuetype.cpp:564



#if !defined (_DEMO_VALUE_IDL_BOXEDVALUE__VAR_OUT_CH_)
#define _DEMO_VALUE_IDL_BOXEDVALUE__VAR_OUT_CH_

      class boxedValue;
      typedef
        TAO_Value_Var_T<
            boxedValue
          >
        boxedValue_var;

      typedef
        TAO_Value_Out_T<
            boxedValue
          >
        boxedValue_out;

#endif /* end #if !defined */

      // TAO_IDL - Generated from
      // be/be_visitor_valuetype/valuetype_ch.cpp:50

      class  boxedValue
        : public virtual ::CORBA::ValueBase
      {
      public:

        // TAO_IDL - Generated from
        // be/be_type.cpp:304

        typedef boxedValue * _ptr_type;
        typedef boxedValue_var _var_type;
        typedef boxedValue_out _out_type;

        static void _tao_any_destructor (void *);

        static boxedValue* _downcast ( ::CORBA::ValueBase *v);

        /// TAO extensions or internals
        static ::CORBA::Boolean _tao_unmarshal (
            TAO_InputCDR &strm,
            boxedValue *&new_object);

        virtual const char* _tao_obv_repository_id (void) const;

        virtual void _tao_obv_truncatable_repo_ids (Repository_Id_List &) const;

        static const char* _tao_obv_static_repository_id (void);

        virtual ::CORBA::TypeCode_ptr _tao_type (void) const;

      public:

        // TAO_IDL - Generated from
        // be/be_visitor_valuetype/field_ch.cpp:318

        virtual void b1 (demo::value::idl::boxedLong *) = 0;
        virtual demo::value::idl::boxedLong *b1 (void) const = 0;

      public:

        // TAO_IDL - Generated from
        // be/be_visitor_valuetype/field_ch.cpp:318

        virtual void b2 (demo::value::idl::boxedLong *) = 0;
        virtual demo::value::idl::boxedLong *b2 (void) const = 0;

        // TAO_IDL - Generated from
        // be/be_visitor_valuetype/valuetype_ch.cpp:238

      protected:
        boxedValue (void);
        virtual ~boxedValue (void);

        virtual ::CORBA::Boolean _tao_marshal_v (TAO_OutputCDR &) const;
        virtual ::CORBA::Boolean _tao_unmarshal_v (TAO_InputCDR &);
        virtual ::CORBA::Boolean _tao_match_formal_type (ptrdiff_t ) const;

      private:
        boxedValue (const boxedValue &);
        void operator= (const boxedValue &);

      protected:
        virtual ::CORBA::Boolean
        _tao_marshal__demo_value_idl_boxedValue (TAO_OutputCDR &, TAO_ChunkInfo &) const = 0;

        virtual ::CORBA::Boolean
        _tao_unmarshal__demo_value_idl_boxedValue (TAO_InputCDR &, TAO_ChunkInfo &) = 0;
      };

      // TAO_IDL - Generated from
      // be/be_visitor_valuetype/valuetype_init_ch.cpp:57

      class  boxedValue_init
        : public virtual ::CORBA::ValueFactoryBase
      {
      public:
        boxedValue_init (void);

        static boxedValue_init* _downcast ( ::CORBA::ValueFactoryBase *);

        virtual ::CORBA::ValueBase *
        create_for_unmarshal (void);

        // TAO-specific extensions
      public:
        virtual const char* tao_repository_id (void);

      protected:
        virtual ~boxedValue_init (void);
      };

      // TAO_IDL - Generated from
      // be/be_visitor_typecode/typecode_decl.cpp:34

      extern  ::CORBA::TypeCode_ptr const _tc_boxedValue;

      // TAO_IDL - Generated from
      // be/be_valuetype.cpp:564



#if !defined (_DEMO_VALUE_IDL_NODE__VAR_OUT_CH_)
#define _DEMO_VALUE_IDL_NODE__VAR_OUT_CH_

      class Node;
      typedef
        TAO_Value_Var_T<
            Node
          >
        Node_var;

      typedef
        TAO_Value_Out_T<
            Node
          >
        Node_out;

#endif /* end #if !defined */

      // TAO_IDL - Generated from
      // be/be_visitor_valuetype/valuetype_ch.cpp:50

      class  Node
        : public virtual ::CORBA::ValueBase
      {
      public:

        // TAO_IDL - Generated from
        // be/be_type.cpp:304

        typedef Node * _ptr_type;
        typedef Node_var _var_type;
        typedef Node_out _out_type;

        static void _tao_any_destructor (void *);

        static Node* _downcast ( ::CORBA::ValueBase *v);

        /// TAO extensions or internals
        static ::CORBA::Boolean _tao_unmarshal (
            TAO_InputCDR &strm,
            Node *&new_object);

        virtual const char* _tao_obv_repository_id (void) const;

        virtual void _tao_obv_truncatable_repo_ids (Repository_Id_List &) const;

        static const char* _tao_obv_static_repository_id (void);

        virtual ::CORBA::TypeCode_ptr _tao_type (void) const;

      public:

        // TAO_IDL - Generated from
        // be/be_visitor_valuetype/field_ch.cpp:459

        virtual void id (const ::CORBA::Long) = 0;
        virtual ::CORBA::Long id (void) const = 0;

      public:

        // TAO_IDL - Generated from
        // be/be_visitor_valuetype/field_ch.cpp:361

        virtual void next (demo::value::idl::Node *) = 0;
        virtual demo::value::idl::Node *next (void) const = 0;

        // TAO_IDL - Generated from
        // be/be_visitor_valuetype/valuetype_ch.cpp:238

      protected:
        Node (void);
        virtual ~Node (void);

        virtual ::CORBA::Boolean _tao_marshal_v (TAO_OutputCDR &) const;
        virtual ::CORBA::Boolean _tao_unmarshal_v (TAO_InputCDR &);
        virtual ::CORBA::Boolean _tao_match_formal_type (ptrdiff_t ) const;

      private:
        Node (const Node &);
        void operator= (const Node &);

      protected:
        virtual ::CORBA::Boolean
        _tao_marshal__demo_value_idl_Node (TAO_OutputCDR &, TAO_ChunkInfo &) const = 0;

        virtual ::CORBA::Boolean
        _tao_unmarshal__demo_value_idl_Node (TAO_InputCDR &, TAO_ChunkInfo &) = 0;
      };

      // TAO_IDL - Generated from
      // be/be_visitor_valuetype/valuetype_init_ch.cpp:57

      class  Node_init
        : public virtual ::CORBA::ValueFactoryBase
      {
      public:
        Node_init (void);

        static Node_init* _downcast ( ::CORBA::ValueFactoryBase *);

        virtual ::CORBA::ValueBase *
        create_for_unmarshal (void);

        // TAO-specific extensions
      public:
        virtual const char* tao_repository_id (void);

      protected:
        virtual ~Node_init (void);
      };

      // TAO_IDL - Generated from
      // be/be_visitor_typecode/typecode_decl.cpp:34

      extern  ::CORBA::TypeCode_ptr const _tc_Node;

      // TAO_IDL - Generated from
      // be/be_interface.cpp:748

#if !defined (_DEMO_VALUE_IDL_VALUESERVER__VAR_OUT_CH_)
#define _DEMO_VALUE_IDL_VALUESERVER__VAR_OUT_CH_

      class ValueServer;
      typedef ValueServer *ValueServer_ptr;

      typedef
        TAO_Objref_Var_T<
            ValueServer
          >
        ValueServer_var;

      typedef
        TAO_Objref_Out_T<
            ValueServer
          >
        ValueServer_out;

#endif /* end #if !defined */

      // TAO_IDL - Generated from
      // be/be_visitor_interface/interface_ch.cpp:40

      class  ValueServer
        : public virtual ::CORBA::Object
      {
      public:
        friend class TAO::Narrow_Utils<ValueServer>;

        // TAO_IDL - Generated from
        // be/be_type.cpp:304

        typedef ValueServer_ptr _ptr_type;
        typedef ValueServer_var _var_type;
        typedef ValueServer_out _out_type;

        static void _tao_any_destructor (void *);

        // The static operations.
        static ValueServer_ptr _duplicate (ValueServer_ptr obj);

        static void _tao_release (ValueServer_ptr obj);

        static ValueServer_ptr _narrow (::CORBA::Object_ptr obj);
        static ValueServer_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
        static ValueServer_ptr _nil (void);

        virtual char * receive_boxedvalue (
          ::demo::value::idl::boxedValue * b);

        virtual char * receive_long (
          ::demo::value::idl::boxedLong * p1,
          ::demo::value::idl::boxedLong * p2);

        virtual char * receive_string (
          ::demo::value::idl::boxedString * s1,
          ::demo::value::idl::boxedString * s2);

        virtual char * receive_list (
          ::demo::value::idl::Node * node);

        virtual char * receive_truncatable (
          ::demo::value::idl::TValue *& v);

        virtual char * receive_sequence (
          const ::demo::value::idl::ConfigValues & v);

        // TAO_IDL - Generated from
        // be/be_visitor_interface/interface_ch.cpp:137

        virtual ::CORBA::Boolean _is_a (const char *type_id);
        virtual const char* _interface_repository_id (void) const;
        virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);

      protected:
        // Concrete interface only.
        ValueServer (void);

        // Concrete non-local interface only.
        ValueServer (
            ::IOP::IOR *ior,
            TAO_ORB_Core *orb_core);

        // Non-local interface only.
        ValueServer (
            TAO_Stub *objref,
            ::CORBA::Boolean _tao_collocated = false,
            TAO_Abstract_ServantBase *servant = 0,
            TAO_ORB_Core *orb_core = 0);

        virtual ~ValueServer (void);

      private:
        // Private and unimplemented for concrete interfaces.
        ValueServer (const ValueServer &);

        void operator= (const ValueServer &);
      };

      // TAO_IDL - Generated from
      // be/be_visitor_typecode/typecode_decl.cpp:34

      extern  ::CORBA::TypeCode_ptr const _tc_ValueServer;

    // TAO_IDL - Generated from
    // be/be_visitor_module/module_ch.cpp:64

    } // module demo::value::idl

  // TAO_IDL - Generated from
  // be/be_visitor_module/module_ch.cpp:64

  } // module demo::value

// TAO_IDL - Generated from
// be/be_visitor_module/module_ch.cpp:64

} // module demo

// TAO_IDL - Generated from
// be/be_visitor_arg_traits.cpp:66

TAO_BEGIN_VERSIONED_NAMESPACE_DECL


// Arg traits specializations.
namespace TAO
{

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:306

#if !defined (_DEMO_VALUE_IDL_CONFIGVALUE__ARG_TRAITS_)
#define _DEMO_VALUE_IDL_CONFIGVALUE__ARG_TRAITS_

  template<>
  class Arg_Traits< ::demo::value::idl::ConfigValue>
    : public
        Object_Arg_Traits_T<
            ::demo::value::idl::ConfigValue *,
            ::demo::value::idl::ConfigValue_var,
            ::demo::value::idl::ConfigValue_out,
            TAO::Value_Traits<demo::value::idl::ConfigValue>,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:683

  template<>
  class Arg_Traits< ::demo::value::idl::ConfigValues>
    : public
        Var_Size_Arg_Traits_T<
            ::demo::value::idl::ConfigValues,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:306

#if !defined (_DEMO_VALUE_IDL_BASEVALUE__ARG_TRAITS_)
#define _DEMO_VALUE_IDL_BASEVALUE__ARG_TRAITS_

  template<>
  class Arg_Traits< ::demo::value::idl::BaseValue>
    : public
        Object_Arg_Traits_T<
            ::demo::value::idl::BaseValue *,
            ::demo::value::idl::BaseValue_var,
            ::demo::value::idl::BaseValue_out,
            TAO::Value_Traits<demo::value::idl::BaseValue>,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:306

#if !defined (_DEMO_VALUE_IDL_TVALUE__ARG_TRAITS_)
#define _DEMO_VALUE_IDL_TVALUE__ARG_TRAITS_

  template<>
  class Arg_Traits< ::demo::value::idl::TValue>
    : public
        Object_Arg_Traits_T<
            ::demo::value::idl::TValue *,
            ::demo::value::idl::TValue_var,
            ::demo::value::idl::TValue_out,
            TAO::Value_Traits<demo::value::idl::TValue>,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:250

  template<>
  class Arg_Traits< ::demo::value::idl::boxedLong>
    : public
        Object_Arg_Traits_T<
            ::demo::value::idl::boxedLong *,
            ::demo::value::idl::boxedLong_var,
            ::demo::value::idl::boxedLong_out,
            TAO::Value_Traits<demo::value::idl::boxedLong>,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:250

  template<>
  class Arg_Traits< ::demo::value::idl::boxedString>
    : public
        Object_Arg_Traits_T<
            ::demo::value::idl::boxedString *,
            ::demo::value::idl::boxedString_var,
            ::demo::value::idl::boxedString_out,
            TAO::Value_Traits<demo::value::idl::boxedString>,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:306

#if !defined (_DEMO_VALUE_IDL_BOXEDVALUE__ARG_TRAITS_)
#define _DEMO_VALUE_IDL_BOXEDVALUE__ARG_TRAITS_

  template<>
  class Arg_Traits< ::demo::value::idl::boxedValue>
    : public
        Object_Arg_Traits_T<
            ::demo::value::idl::boxedValue *,
            ::demo::value::idl::boxedValue_var,
            ::demo::value::idl::boxedValue_out,
            TAO::Value_Traits<demo::value::idl::boxedValue>,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:306

#if !defined (_DEMO_VALUE_IDL_NODE__ARG_TRAITS_)
#define _DEMO_VALUE_IDL_NODE__ARG_TRAITS_

  template<>
  class Arg_Traits< ::demo::value::idl::Node>
    : public
        Object_Arg_Traits_T<
            ::demo::value::idl::Node *,
            ::demo::value::idl::Node_var,
            ::demo::value::idl::Node_out,
            TAO::Value_Traits<demo::value::idl::Node>,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:145

#if !defined (_DEMO_VALUE_IDL_VALUESERVER__ARG_TRAITS_)
#define _DEMO_VALUE_IDL_VALUESERVER__ARG_TRAITS_

  template<>
  class  Arg_Traits< ::demo::value::idl::ValueServer>
    : public
        Object_Arg_Traits_T<
            ::demo::value::idl::ValueServer_ptr,
            ::demo::value::idl::ValueServer_var,
            ::demo::value::idl::ValueServer_out,
            TAO::Objref_Traits<demo::value::idl::ValueServer>,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

#endif /* end #if !defined */
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_valuetype/obv_module.cpp:44

namespace OBV_demo
{

  // TAO_IDL - Generated from
  // be/be_visitor_valuetype/obv_module.cpp:44

  namespace value
  {

    // TAO_IDL - Generated from
    // be/be_visitor_valuetype/obv_module.cpp:44

    namespace idl
    {

      // TAO_IDL - Generated from
      // be/be_visitor_valuetype/valuetype_obv_ch.cpp:44

      // OBV_ class
      class  ConfigValue
        : public virtual demo::value::idl::ConfigValue,
          public virtual ::CORBA::DefaultValueRefCountBase
      {

    public:

      // TAO_IDL - Generated from
      // be/be_visitor_valuetype/field_ch.cpp:608

      virtual void name (char *val);
      virtual void name (const char *val);
      virtual void name (const ::CORBA::String_var &val);
      virtual const char *name (void) const;

    public:

      // TAO_IDL - Generated from
      // be/be_visitor_valuetype/field_ch.cpp:459

      virtual void value (const ::CORBA::Any &);
      virtual const ::CORBA::Any &value (void) const;
      virtual ::CORBA::Any &value (void);

    public:
      ConfigValue (void);
      ConfigValue (
          const char * _tao_init_name,
          const ::CORBA::Any & _tao_init_value
        );
      virtual ~ConfigValue (void);

    public:
      virtual ::CORBA::ValueBase *_copy_value (void);

    protected:
      virtual ::CORBA::Boolean
      _tao_marshal__demo_value_idl_ConfigValue (TAO_OutputCDR &, TAO_ChunkInfo &) const;

      virtual ::CORBA::Boolean
      _tao_unmarshal__demo_value_idl_ConfigValue (TAO_InputCDR &, TAO_ChunkInfo &);

      ::CORBA::Boolean _tao_marshal_state (TAO_OutputCDR &, TAO_ChunkInfo &) const;
      ::CORBA::Boolean _tao_unmarshal_state (TAO_InputCDR &, TAO_ChunkInfo &);
      virtual void truncation_hook (void);

    private:
      ::TAO::String_Manager _pd_name;
      ::CORBA::Any _pd_value;
      CORBA::Boolean require_truncation_;
    };

    // TAO_IDL - Generated from
    // be/be_visitor_valuetype/valuetype_obv_ch.cpp:44

    // OBV_ class
    class  BaseValue
      : public virtual demo::value::idl::BaseValue,
        public virtual ::CORBA::DefaultValueRefCountBase
    {

  public:

    // TAO_IDL - Generated from
    // be/be_visitor_valuetype/field_ch.cpp:459

    virtual void basic_data (const ::CORBA::ULong);
    virtual ::CORBA::ULong basic_data (void) const;

  public:
    BaseValue (void);
    BaseValue (
        ::CORBA::ULong _tao_init_basic_data
      );
    virtual ~BaseValue (void);

  public:
    virtual ::CORBA::ValueBase *_copy_value (void);

  protected:
    virtual ::CORBA::Boolean
    _tao_marshal__demo_value_idl_BaseValue (TAO_OutputCDR &, TAO_ChunkInfo &) const;

    virtual ::CORBA::Boolean
    _tao_unmarshal__demo_value_idl_BaseValue (TAO_InputCDR &, TAO_ChunkInfo &);

    ::CORBA::Boolean _tao_marshal_state (TAO_OutputCDR &, TAO_ChunkInfo &) const;
    ::CORBA::Boolean _tao_unmarshal_state (TAO_InputCDR &, TAO_ChunkInfo &);
    virtual void truncation_hook (void);

  private:
    ::CORBA::ULong _pd_basic_data;
    CORBA::Boolean require_truncation_;
  };

  // TAO_IDL - Generated from
  // be/be_visitor_valuetype/valuetype_obv_ch.cpp:44

  // OBV_ class
  class  TValue
    : public virtual demo::value::idl::TValue,
      public virtual OBV_demo::value::idl::BaseValue
  {

public:

  // TAO_IDL - Generated from
  // be/be_visitor_valuetype/field_ch.cpp:459

  virtual void data (const ::CORBA::ULong);
  virtual ::CORBA::ULong data (void) const;

public:
  TValue (void);
  TValue (
      ::CORBA::ULong _tao_init_basic_data,
      ::CORBA::ULong _tao_init_data
    );
  virtual ~TValue (void);

protected:
  virtual ::CORBA::Boolean
  _tao_marshal__demo_value_idl_TValue (TAO_OutputCDR &, TAO_ChunkInfo &) const;

  virtual ::CORBA::Boolean
  _tao_unmarshal__demo_value_idl_TValue (TAO_InputCDR &, TAO_ChunkInfo &);

  ::CORBA::Boolean _tao_marshal_state (TAO_OutputCDR &, TAO_ChunkInfo &) const;
  ::CORBA::Boolean _tao_unmarshal_state (TAO_InputCDR &, TAO_ChunkInfo &);
  virtual void truncation_hook (void);

private:
  ::CORBA::ULong _pd_data;
  CORBA::Boolean require_truncation_;
};

// TAO_IDL - Generated from
// be/be_visitor_valuetype/valuetype_obv_ch.cpp:44

// OBV_ class
class  boxedValue
  : public virtual demo::value::idl::boxedValue,
    public virtual ::CORBA::DefaultValueRefCountBase
{

public:

  // TAO_IDL - Generated from
  // be/be_visitor_valuetype/field_ch.cpp:318

  virtual void b1 (demo::value::idl::boxedLong *);
  virtual demo::value::idl::boxedLong *b1 (void) const;

public:

  // TAO_IDL - Generated from
  // be/be_visitor_valuetype/field_ch.cpp:318

  virtual void b2 (demo::value::idl::boxedLong *);
  virtual demo::value::idl::boxedLong *b2 (void) const;

public:
  boxedValue (void);
  boxedValue (
      ::demo::value::idl::boxedLong * _tao_init_b1,
      ::demo::value::idl::boxedLong * _tao_init_b2
    );
  virtual ~boxedValue (void);

public:
  virtual ::CORBA::ValueBase *_copy_value (void);

protected:
  virtual ::CORBA::Boolean
  _tao_marshal__demo_value_idl_boxedValue (TAO_OutputCDR &, TAO_ChunkInfo &) const;

  virtual ::CORBA::Boolean
  _tao_unmarshal__demo_value_idl_boxedValue (TAO_InputCDR &, TAO_ChunkInfo &);

  ::CORBA::Boolean _tao_marshal_state (TAO_OutputCDR &, TAO_ChunkInfo &) const;
  ::CORBA::Boolean _tao_unmarshal_state (TAO_InputCDR &, TAO_ChunkInfo &);
  virtual void truncation_hook (void);

private:
  demo::value::idl::boxedLong_var _pd_b1;
  demo::value::idl::boxedLong_var _pd_b2;
  CORBA::Boolean require_truncation_;
};

// TAO_IDL - Generated from
// be/be_visitor_valuetype/valuetype_obv_ch.cpp:44

// OBV_ class
class  Node
  : public virtual demo::value::idl::Node,
    public virtual ::CORBA::DefaultValueRefCountBase
{

public:

  // TAO_IDL - Generated from
  // be/be_visitor_valuetype/field_ch.cpp:459

  virtual void id (const ::CORBA::Long);
  virtual ::CORBA::Long id (void) const;

public:

  // TAO_IDL - Generated from
  // be/be_visitor_valuetype/field_ch.cpp:361

  virtual void next (demo::value::idl::Node *);
  virtual demo::value::idl::Node *next (void) const;

public:
  Node (void);
  Node (
      ::CORBA::Long _tao_init_id,
      ::demo::value::idl::Node * _tao_init_next
    );
  virtual ~Node (void);

public:
  virtual ::CORBA::ValueBase *_copy_value (void);

protected:
  virtual ::CORBA::Boolean
  _tao_marshal__demo_value_idl_Node (TAO_OutputCDR &, TAO_ChunkInfo &) const;

  virtual ::CORBA::Boolean
  _tao_unmarshal__demo_value_idl_Node (TAO_InputCDR &, TAO_ChunkInfo &);

  ::CORBA::Boolean _tao_marshal_state (TAO_OutputCDR &, TAO_ChunkInfo &) const;
  ::CORBA::Boolean _tao_unmarshal_state (TAO_InputCDR &, TAO_ChunkInfo &);
  virtual void truncation_hook (void);

private:
  ::CORBA::Long _pd_id;
  demo::value::idl::Node_var _pd_next;
  CORBA::Boolean require_truncation_;
};
}
}
}

// TAO_IDL - Generated from
// be/be_visitor_traits.cpp:60

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Traits specializations.
namespace TAO
{

#if !defined (_DEMO_VALUE_IDL_CONFIGVALUE__TRAITS_)
#define _DEMO_VALUE_IDL_CONFIGVALUE__TRAITS_

  template<>
  struct  Value_Traits<demo::value::idl::ConfigValue>
  {
    static void add_ref (demo::value::idl::ConfigValue *);
    static void remove_ref (demo::value::idl::ConfigValue *);
    static void release (demo::value::idl::ConfigValue *);
  };

#endif /* end #if !defined */

#if !defined (_DEMO_VALUE_IDL_BASEVALUE__TRAITS_)
#define _DEMO_VALUE_IDL_BASEVALUE__TRAITS_

  template<>
  struct  Value_Traits<demo::value::idl::BaseValue>
  {
    static void add_ref (demo::value::idl::BaseValue *);
    static void remove_ref (demo::value::idl::BaseValue *);
    static void release (demo::value::idl::BaseValue *);
  };

#endif /* end #if !defined */

#if !defined (_DEMO_VALUE_IDL_TVALUE__TRAITS_)
#define _DEMO_VALUE_IDL_TVALUE__TRAITS_

  template<>
  struct  Value_Traits<demo::value::idl::TValue>
  {
    static void add_ref (demo::value::idl::TValue *);
    static void remove_ref (demo::value::idl::TValue *);
    static void release (demo::value::idl::TValue *);
  };

#endif /* end #if !defined */

#if !defined (_DEMO_VALUE_IDL_BOXEDLONG__TRAITS_)
#define _DEMO_VALUE_IDL_BOXEDLONG__TRAITS_

  template<>
  struct  Value_Traits<demo::value::idl::boxedLong>
  {
    static void add_ref (demo::value::idl::boxedLong *);
    static void remove_ref (demo::value::idl::boxedLong *);
    static void release (demo::value::idl::boxedLong *);
  };

#endif /* end #if !defined */

#if !defined (_DEMO_VALUE_IDL_BOXEDSTRING__TRAITS_)
#define _DEMO_VALUE_IDL_BOXEDSTRING__TRAITS_

  template<>
  struct  Value_Traits<demo::value::idl::boxedString>
  {
    static void add_ref (demo::value::idl::boxedString *);
    static void remove_ref (demo::value::idl::boxedString *);
    static void release (demo::value::idl::boxedString *);
  };

#endif /* end #if !defined */

#if !defined (_DEMO_VALUE_IDL_BOXEDVALUE__TRAITS_)
#define _DEMO_VALUE_IDL_BOXEDVALUE__TRAITS_

  template<>
  struct  Value_Traits<demo::value::idl::boxedValue>
  {
    static void add_ref (demo::value::idl::boxedValue *);
    static void remove_ref (demo::value::idl::boxedValue *);
    static void release (demo::value::idl::boxedValue *);
  };

#endif /* end #if !defined */

#if !defined (_DEMO_VALUE_IDL_NODE__TRAITS_)
#define _DEMO_VALUE_IDL_NODE__TRAITS_

  template<>
  struct  Value_Traits<demo::value::idl::Node>
  {
    static void add_ref (demo::value::idl::Node *);
    static void remove_ref (demo::value::idl::Node *);
    static void release (demo::value::idl::Node *);
  };

#endif /* end #if !defined */

#if !defined (_DEMO_VALUE_IDL_VALUESERVER__TRAITS_)
#define _DEMO_VALUE_IDL_VALUESERVER__TRAITS_

  template<>
  struct  Objref_Traits< ::demo::value::idl::ValueServer>
  {
    static ::demo::value::idl::ValueServer_ptr duplicate (
        ::demo::value::idl::ValueServer_ptr p);
    static void release (
        ::demo::value::idl::ValueServer_ptr p);
    static ::demo::value::idl::ValueServer_ptr nil (void);
    static ::CORBA::Boolean marshal (
        const ::demo::value::idl::ValueServer_ptr p,
        TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */
}
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_valuetype/any_op_ch.cpp:43



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace demo
{

  namespace value
  {

    namespace idl
    {
       void operator<<= ( ::CORBA::Any &, ConfigValue *); // copying
       void operator<<= ( ::CORBA::Any &, ConfigValue **); // non-copying
       ::CORBA::Boolean operator>>= (const ::CORBA::Any &, ConfigValue *&);
    }
  }
}

#else


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 void operator<<= (::CORBA::Any &, demo::value::idl::ConfigValue *); // copying
 void operator<<= (::CORBA::Any &, demo::value::idl::ConfigValue **); // non-copying
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, demo::value::idl::ConfigValue *&);
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_sequence/any_op_ch.cpp:47



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace demo
{

  namespace value
  {

    namespace idl
    {
       void operator<<= ( ::CORBA::Any &, const ::demo::value::idl::ConfigValues &); // copying version
       void operator<<= ( ::CORBA::Any &, ::demo::value::idl::ConfigValues*); // noncopying version
       ::CORBA::Boolean operator>>= (const ::CORBA::Any &, ::demo::value::idl::ConfigValues *&); // deprecated
       ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const ::demo::value::idl::ConfigValues *&);
    }
  }
}

#else


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 void operator<<= ( ::CORBA::Any &, const demo::value::idl::ConfigValues &); // copying version
 void operator<<= ( ::CORBA::Any &, demo::value::idl::ConfigValues*); // noncopying version
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, demo::value::idl::ConfigValues *&); // deprecated
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const demo::value::idl::ConfigValues *&);
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_valuetype/any_op_ch.cpp:43



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace demo
{

  namespace value
  {

    namespace idl
    {
       void operator<<= ( ::CORBA::Any &, BaseValue *); // copying
       void operator<<= ( ::CORBA::Any &, BaseValue **); // non-copying
       ::CORBA::Boolean operator>>= (const ::CORBA::Any &, BaseValue *&);
    }
  }
}

#else


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 void operator<<= (::CORBA::Any &, demo::value::idl::BaseValue *); // copying
 void operator<<= (::CORBA::Any &, demo::value::idl::BaseValue **); // non-copying
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, demo::value::idl::BaseValue *&);
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_valuetype/any_op_ch.cpp:43



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace demo
{

  namespace value
  {

    namespace idl
    {
       void operator<<= ( ::CORBA::Any &, TValue *); // copying
       void operator<<= ( ::CORBA::Any &, TValue **); // non-copying
       ::CORBA::Boolean operator>>= (const ::CORBA::Any &, TValue *&);
    }
  }
}

#else


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 void operator<<= (::CORBA::Any &, demo::value::idl::TValue *); // copying
 void operator<<= (::CORBA::Any &, demo::value::idl::TValue **); // non-copying
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, demo::value::idl::TValue *&);
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_valuebox/any_op_ch.cpp:43



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace demo
{

  namespace value
  {

    namespace idl
    {
       void operator<<= ( ::CORBA::Any &, boxedLong *); // copying
       void operator<<= ( ::CORBA::Any &, boxedLong **); // non-copying
       ::CORBA::Boolean operator>>= (const ::CORBA::Any &, boxedLong *&);
    }
  }
}

#else


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 void operator<<= (::CORBA::Any &, demo::value::idl::boxedLong *); // copying
 void operator<<= (::CORBA::Any &, demo::value::idl::boxedLong **); // non-copying
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, demo::value::idl::boxedLong *&);
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_valuebox/any_op_ch.cpp:43



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace demo
{

  namespace value
  {

    namespace idl
    {
       void operator<<= ( ::CORBA::Any &, boxedString *); // copying
       void operator<<= ( ::CORBA::Any &, boxedString **); // non-copying
       ::CORBA::Boolean operator>>= (const ::CORBA::Any &, boxedString *&);
    }
  }
}

#else


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 void operator<<= (::CORBA::Any &, demo::value::idl::boxedString *); // copying
 void operator<<= (::CORBA::Any &, demo::value::idl::boxedString **); // non-copying
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, demo::value::idl::boxedString *&);
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_valuetype/any_op_ch.cpp:43



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace demo
{

  namespace value
  {

    namespace idl
    {
       void operator<<= ( ::CORBA::Any &, boxedValue *); // copying
       void operator<<= ( ::CORBA::Any &, boxedValue **); // non-copying
       ::CORBA::Boolean operator>>= (const ::CORBA::Any &, boxedValue *&);
    }
  }
}

#else


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 void operator<<= (::CORBA::Any &, demo::value::idl::boxedValue *); // copying
 void operator<<= (::CORBA::Any &, demo::value::idl::boxedValue **); // non-copying
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, demo::value::idl::boxedValue *&);
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_valuetype/any_op_ch.cpp:43



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace demo
{

  namespace value
  {

    namespace idl
    {
       void operator<<= ( ::CORBA::Any &, Node *); // copying
       void operator<<= ( ::CORBA::Any &, Node **); // non-copying
       ::CORBA::Boolean operator>>= (const ::CORBA::Any &, Node *&);
    }
  }
}

#else


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 void operator<<= (::CORBA::Any &, demo::value::idl::Node *); // copying
 void operator<<= (::CORBA::Any &, demo::value::idl::Node **); // non-copying
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, demo::value::idl::Node *&);
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_interface/any_op_ch.cpp:41



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace demo
{

  namespace value
  {

    namespace idl
    {
       void operator<<= ( ::CORBA::Any &, ValueServer_ptr); // copying
       void operator<<= ( ::CORBA::Any &, ValueServer_ptr *); // non-copying
       ::CORBA::Boolean operator>>= (const ::CORBA::Any &, ValueServer_ptr &);
    }
  }
}

#else


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 void operator<<= (::CORBA::Any &, demo::value::idl::ValueServer_ptr); // copying
 void operator<<= (::CORBA::Any &, demo::value::idl::ValueServer_ptr *); // non-copying
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, demo::value::idl::ValueServer_ptr &);
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_valuetype.cpp:456


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

namespace CORBA
{
  extern  void add_ref (demo::value::idl::ConfigValue *);
  extern  void remove_ref (demo::value::idl::ConfigValue *);
}
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_valuetype/cdr_op_ch.cpp:49


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 ::CORBA::Boolean operator<< (TAO_OutputCDR &, const demo::value::idl::ConfigValue *);
 ::CORBA::Boolean operator>> (TAO_InputCDR &, demo::value::idl::ConfigValue *&);

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_sequence/cdr_op_ch.cpp:65

#if !defined _TAO_CDR_OP_demo_value_idl_ConfigValues_H_
#define _TAO_CDR_OP_demo_value_idl_ConfigValues_H_
TAO_BEGIN_VERSIONED_NAMESPACE_DECL


 ::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const demo::value::idl::ConfigValues &_tao_sequence);
 ::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    demo::value::idl::ConfigValues &_tao_sequence);

TAO_END_VERSIONED_NAMESPACE_DECL



#endif /* _TAO_CDR_OP_demo_value_idl_ConfigValues_H_ */

// TAO_IDL - Generated from
// be/be_valuetype.cpp:456


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

namespace CORBA
{
  extern  void add_ref (demo::value::idl::BaseValue *);
  extern  void remove_ref (demo::value::idl::BaseValue *);
}
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_valuetype/cdr_op_ch.cpp:49


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 ::CORBA::Boolean operator<< (TAO_OutputCDR &, const demo::value::idl::BaseValue *);
 ::CORBA::Boolean operator>> (TAO_InputCDR &, demo::value::idl::BaseValue *&);

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_valuetype.cpp:456


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

namespace CORBA
{
  extern  void add_ref (demo::value::idl::TValue *);
  extern  void remove_ref (demo::value::idl::TValue *);
}
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_valuetype/cdr_op_ch.cpp:49


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 ::CORBA::Boolean operator<< (TAO_OutputCDR &, const demo::value::idl::TValue *);
 ::CORBA::Boolean operator>> (TAO_InputCDR &, demo::value::idl::TValue *&);

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_valuebox/cdr_op_ch.cpp:39


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 ::CORBA::Boolean operator<< (TAO_OutputCDR &, const demo::value::idl::boxedLong *);
 ::CORBA::Boolean operator>> (TAO_InputCDR &, demo::value::idl::boxedLong *&);
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_valuebox/cdr_op_ch.cpp:39


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 ::CORBA::Boolean operator<< (TAO_OutputCDR &, const demo::value::idl::boxedString *);
 ::CORBA::Boolean operator>> (TAO_InputCDR &, demo::value::idl::boxedString *&);
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_valuetype.cpp:456


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

namespace CORBA
{
  extern  void add_ref (demo::value::idl::boxedValue *);
  extern  void remove_ref (demo::value::idl::boxedValue *);
}
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_valuetype/cdr_op_ch.cpp:49


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 ::CORBA::Boolean operator<< (TAO_OutputCDR &, const demo::value::idl::boxedValue *);
 ::CORBA::Boolean operator>> (TAO_InputCDR &, demo::value::idl::boxedValue *&);

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_valuetype.cpp:456


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

namespace CORBA
{
  extern  void add_ref (demo::value::idl::Node *);
  extern  void remove_ref (demo::value::idl::Node *);
}
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_valuetype/cdr_op_ch.cpp:49


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 ::CORBA::Boolean operator<< (TAO_OutputCDR &, const demo::value::idl::Node *);
 ::CORBA::Boolean operator>> (TAO_InputCDR &, demo::value::idl::Node *&);

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_interface/cdr_op_ch.cpp:41

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 ::CORBA::Boolean operator<< (TAO_OutputCDR &, const demo::value::idl::ValueServer_ptr );
 ::CORBA::Boolean operator>> (TAO_InputCDR &, demo::value::idl::ValueServer_ptr &);

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_codegen.cpp:1700
#if defined (__ACE_INLINE__)
#include "MessengerC.inl"
#endif /* defined INLINE */

#include /**/ "ace/post.h"

#endif /* ifndef */

