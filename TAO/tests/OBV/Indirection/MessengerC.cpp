// -*- C++ -*-
/**
 * Code generated by the The ACE ORB (TAO) IDL Compiler v2.4.1
 * TAO and the TAO IDL Compiler have been developed by:
 *       Center for Distributed Object Computing
 *       Washington University
 *       St. Louis, MO
 *       USA
 *       http://www.cs.wustl.edu/~schmidt/doc-center.html
 * and
 *       Distributed Object Computing Laboratory
 *       University of California at Irvine
 *       Irvine, CA
 *       USA
 * and
 *       Institute for Software Integrated Systems
 *       Vanderbilt University
 *       Nashville, TN
 *       USA
 *       http://www.isis.vanderbilt.edu/
 *
 * Information about TAO is available at:
 *     http://www.dre.vanderbilt.edu/~schmidt/TAO.html
 **/

// TAO_IDL - Generated from
// be/be_codegen.cpp:373


#include "MessengerC.h"
#include "tao/AnyTypeCode/Null_RefCount_Policy.h"
#include "tao/AnyTypeCode/TypeCode_Constants.h"
#include "tao/AnyTypeCode/Alias_TypeCode_Static.h"
#include "tao/AnyTypeCode/Objref_TypeCode_Static.h"
#include "tao/AnyTypeCode/Sequence_TypeCode_Static.h"
#include "tao/AnyTypeCode/String_TypeCode_Static.h"
#include "tao/AnyTypeCode/Value_TypeCode_Static.h"
#include "tao/AnyTypeCode/TypeCode_Value_Field.h"
#include "tao/AnyTypeCode/Recursive_Type_TypeCode.h"
#include "tao/CDR.h"
#include "tao/Exception_Data.h"
#include "tao/Invocation_Adapter.h"
#include "tao/Object_T.h"
#include "tao/CDR.h"
#include "tao/AnyTypeCode/Any.h"
#include "tao/AnyTypeCode/Any_Impl_T.h"
#include "tao/AnyTypeCode/Any_Dual_Impl_T.h"
#include "ace/OS_NS_string.h"

#if !defined (__ACE_INLINE__)
#include "MessengerC.inl"
#endif /* !defined INLINE */

// TAO_IDL - Generated from
// be/be_visitor_typecode/value_typecode.cpp:65

static TAO::TypeCode::Value_Field<char const *, ::CORBA::TypeCode_ptr const *> const _tao_fields_demo_value_idl_ConfigValue[] =
  {
    { "name", &CORBA::_tc_string, ::CORBA::PUBLIC_MEMBER },
    { "value", &CORBA::_tc_any, ::CORBA::PUBLIC_MEMBER }

  };
static TAO::TypeCode::Value<char const *,
                     ::CORBA::TypeCode_ptr const *,
                     TAO::TypeCode::Value_Field<char const *, ::CORBA::TypeCode_ptr const *> const *,
                     TAO::Null_RefCount_Policy>
  _tao_tc_demo_value_idl_ConfigValue (
    ::CORBA::tk_value,
    "IDL:demo/value/idl/ConfigValue:1.0",
    "ConfigValue",
    ::CORBA::VM_NONE,
    &::CORBA::_tc_null,
    _tao_fields_demo_value_idl_ConfigValue,
    2);


namespace demo
{

  namespace value
  {

    namespace idl
    {
      ::CORBA::TypeCode_ptr const _tc_ConfigValue =
        &_tao_tc_demo_value_idl_ConfigValue;
    }
  }
}

// TAO_IDL - Generated from
// be/be_visitor_valuetype/valuetype_cs.cpp:53

void
TAO::Value_Traits<demo::value::idl::ConfigValue>::add_ref (
    demo::value::idl::ConfigValue * p)
{
  ::CORBA::add_ref (p);
}

void
TAO::Value_Traits<demo::value::idl::ConfigValue>::remove_ref (
    demo::value::idl::ConfigValue * p)
{
  ::CORBA::remove_ref (p);
}

void
TAO::Value_Traits<demo::value::idl::ConfigValue>::release (
    demo::value::idl::ConfigValue * p)
{
  ::CORBA::remove_ref (p);
}

demo::value::idl::ConfigValue *
demo::value::idl::ConfigValue::_downcast ( ::CORBA::ValueBase *v)
{
  return dynamic_cast< ::demo::value::idl::ConfigValue * > (v);
}

const char *
demo::value::idl::ConfigValue::_tao_obv_repository_id (void) const
{
  return this->_tao_obv_static_repository_id ();
}

void
demo::value::idl::ConfigValue::_tao_obv_truncatable_repo_ids (Repository_Id_List& ids) const
{
  ids.push_back (this->_tao_obv_static_repository_id ());
}

void
demo::value::idl::ConfigValue::_tao_any_destructor (void *_tao_void_pointer)
{
  ConfigValue *_tao_tmp_pointer =
    static_cast<ConfigValue *> (_tao_void_pointer);
  ::CORBA::remove_ref (_tao_tmp_pointer);
}

// TAO extension - the virtual _type method.
::CORBA::TypeCode_ptr demo::value::idl::ConfigValue::_tao_type (void) const
{
  return ::demo::value::idl::_tc_ConfigValue;
}

demo::value::idl::ConfigValue::~ConfigValue (void)
{}

::CORBA::Boolean
demo::value::idl::ConfigValue::_tao_marshal_v (TAO_OutputCDR & strm) const
{
  TAO_ChunkInfo ci (this->is_truncatable_ || this->chunking_);
  return this->_tao_marshal__demo_value_idl_ConfigValue (strm, ci);
}

::CORBA::Boolean
demo::value::idl::ConfigValue::_tao_unmarshal_v (TAO_InputCDR & strm)
{
  TAO_ChunkInfo ci (this->is_truncatable_ || this->chunking_, 1);
  return this->_tao_unmarshal__demo_value_idl_ConfigValue (strm,ci);
}

::CORBA::Boolean
demo::value::idl::ConfigValue::_tao_match_formal_type (ptrdiff_t formal_type_id) const
{
  return formal_type_id == reinterpret_cast<ptrdiff_t> (demo::value::idl::ConfigValue::_downcast);
}

::CORBA::Boolean
demo::value::idl::ConfigValue::_tao_unmarshal (
    TAO_InputCDR &strm,
    ConfigValue *&new_object
  )
{
  ::CORBA::ValueBase *base = 0;
  ::CORBA::Boolean is_indirected = false;
  ::CORBA::Boolean is_null_object = false;
  ::CORBA::Boolean const retval =
    ::CORBA::ValueBase::_tao_unmarshal_pre (
        strm,
        base,
        ConfigValue::_tao_obv_static_repository_id (),
        is_null_object,
        is_indirected
      );

  ::CORBA::ValueBase_var owner (base);

  if (!retval)
    return false;

  if (is_null_object)
    return true;

  if (!is_indirected && !base->_tao_unmarshal_v (strm))
    return false;

  // Now base must point to the unmarshaled object.
  // Align the pointer to the right subobject.
  new_object = ConfigValue::_downcast (base);
  if (0 == new_object)
    return false;

  if (is_indirected)
    new_object->_add_ref ();

  owner._retn ();
  return true;
}

// TAO_IDL - Generated from
// be/be_visitor_valuetype/valuetype_init_cs.cpp:73

demo::value::idl::ConfigValue_init::ConfigValue_init (void)
{
}

demo::value::idl::ConfigValue_init::~ConfigValue_init (void)
{
}

demo::value::idl::ConfigValue_init *
demo::value::idl::ConfigValue_init::_downcast ( ::CORBA::ValueFactoryBase *v)
{
  return dynamic_cast< ::demo::value::idl::ConfigValue_init * > (v);
}

const char*
demo::value::idl::ConfigValue_init::tao_repository_id (void)
{
  return ::demo::value::idl::ConfigValue::_tao_obv_static_repository_id ();
}

::CORBA::ValueBase *
demo::value::idl::ConfigValue_init::create_for_unmarshal (void)
{
  ::CORBA::ValueBase *ret_val = 0;
  ACE_NEW_THROW_EX (
      ret_val,
      OBV_demo::value::idl::ConfigValue,
      ::CORBA::NO_MEMORY ()
    );
  return ret_val;
}

// TAO_IDL - Generated from
// be/be_visitor_sequence/sequence_cs.cpp:70

#if !defined (_DEMO_VALUE_IDL_CONFIGVALUES_CS_)
#define _DEMO_VALUE_IDL_CONFIGVALUES_CS_

demo::value::idl::ConfigValues::ConfigValues (void)
{}

demo::value::idl::ConfigValues::ConfigValues (
    ::CORBA::ULong max)
  : ::TAO::unbounded_valuetype_sequence<
        ConfigValue,
        ConfigValue_var
      > (max)
{}

demo::value::idl::ConfigValues::ConfigValues (
    ::CORBA::ULong max,
    ::CORBA::ULong length,
    demo::value::idl::ConfigValue * * buffer,
    ::CORBA::Boolean release
  )
  : ::TAO::unbounded_valuetype_sequence<
        ConfigValue,
        ConfigValue_var
      >
    (max, length, buffer, release)
{}

demo::value::idl::ConfigValues::ConfigValues (
    const ConfigValues &seq)
  : ::TAO::unbounded_valuetype_sequence<
        ConfigValue,
        ConfigValue_var
      > (seq)
{}

demo::value::idl::ConfigValues::~ConfigValues (void)
{}

void demo::value::idl::ConfigValues::_tao_any_destructor (
    void * _tao_void_pointer)
{
  ConfigValues * _tao_tmp_pointer =
    static_cast<ConfigValues *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

#endif /* end #if !defined */

// TAO_IDL - Generated from
// be/be_visitor_typecode/alias_typecode.cpp:49



// TAO_IDL - Generated from
// be/be_visitor_typecode/typecode_defn.cpp:461


#ifndef _TAO_TYPECODE_demo_value_idl_ConfigValues_GUARD
#define _TAO_TYPECODE_demo_value_idl_ConfigValues_GUARD

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

namespace TAO
{
  namespace TypeCode
  {
    namespace
    {
      TAO::TypeCode::Sequence< ::CORBA::TypeCode_ptr const *,
                              TAO::Null_RefCount_Policy>
        demo_value_idl_ConfigValues_0 (
          ::CORBA::tk_sequence,
          &demo::value::idl::_tc_ConfigValue,
          0U);

      ::CORBA::TypeCode_ptr const tc_demo_value_idl_ConfigValues_0 =
        &demo_value_idl_ConfigValues_0;
    }
  }
}

TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_TYPECODE_demo_value_idl_ConfigValues_GUARD */

static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_demo_value_idl_ConfigValues (
    ::CORBA::tk_alias,
    "IDL:demo/value/idl/ConfigValues:1.0",
    "ConfigValues",
    &TAO::TypeCode::tc_demo_value_idl_ConfigValues_0);


namespace demo
{

  namespace value
  {

    namespace idl
    {
      ::CORBA::TypeCode_ptr const _tc_ConfigValues =
        &_tao_tc_demo_value_idl_ConfigValues;
    }
  }
}

// TAO_IDL - Generated from
// be/be_visitor_typecode/value_typecode.cpp:65

static TAO::TypeCode::Value_Field<char const *, ::CORBA::TypeCode_ptr const *> const _tao_fields_demo_value_idl_BaseValue[] =
  {
    { "basic_data", &CORBA::_tc_ulong, ::CORBA::PUBLIC_MEMBER }

  };
static TAO::TypeCode::Value<char const *,
                     ::CORBA::TypeCode_ptr const *,
                     TAO::TypeCode::Value_Field<char const *, ::CORBA::TypeCode_ptr const *> const *,
                     TAO::Null_RefCount_Policy>
  _tao_tc_demo_value_idl_BaseValue (
    ::CORBA::tk_value,
    "IDL:demo/value/idl/BaseValue:1.0",
    "BaseValue",
    ::CORBA::VM_NONE,
    &::CORBA::_tc_null,
    _tao_fields_demo_value_idl_BaseValue,
    1);


namespace demo
{

  namespace value
  {

    namespace idl
    {
      ::CORBA::TypeCode_ptr const _tc_BaseValue =
        &_tao_tc_demo_value_idl_BaseValue;
    }
  }
}

// TAO_IDL - Generated from
// be/be_visitor_valuetype/valuetype_cs.cpp:53

void
TAO::Value_Traits<demo::value::idl::BaseValue>::add_ref (
    demo::value::idl::BaseValue * p)
{
  ::CORBA::add_ref (p);
}

void
TAO::Value_Traits<demo::value::idl::BaseValue>::remove_ref (
    demo::value::idl::BaseValue * p)
{
  ::CORBA::remove_ref (p);
}

void
TAO::Value_Traits<demo::value::idl::BaseValue>::release (
    demo::value::idl::BaseValue * p)
{
  ::CORBA::remove_ref (p);
}

demo::value::idl::BaseValue *
demo::value::idl::BaseValue::_downcast ( ::CORBA::ValueBase *v)
{
  return dynamic_cast< ::demo::value::idl::BaseValue * > (v);
}

const char *
demo::value::idl::BaseValue::_tao_obv_repository_id (void) const
{
  return this->_tao_obv_static_repository_id ();
}

void
demo::value::idl::BaseValue::_tao_obv_truncatable_repo_ids (Repository_Id_List& ids) const
{
  ids.push_back (this->_tao_obv_static_repository_id ());
}

void
demo::value::idl::BaseValue::_tao_any_destructor (void *_tao_void_pointer)
{
  BaseValue *_tao_tmp_pointer =
    static_cast<BaseValue *> (_tao_void_pointer);
  ::CORBA::remove_ref (_tao_tmp_pointer);
}

// TAO extension - the virtual _type method.
::CORBA::TypeCode_ptr demo::value::idl::BaseValue::_tao_type (void) const
{
  return ::demo::value::idl::_tc_BaseValue;
}

demo::value::idl::BaseValue::~BaseValue (void)
{}

::CORBA::Boolean
demo::value::idl::BaseValue::_tao_marshal_v (TAO_OutputCDR & strm) const
{
  TAO_ChunkInfo ci (this->is_truncatable_ || this->chunking_);
  return this->_tao_marshal__demo_value_idl_BaseValue (strm, ci);
}

::CORBA::Boolean
demo::value::idl::BaseValue::_tao_unmarshal_v (TAO_InputCDR & strm)
{
  TAO_ChunkInfo ci (this->is_truncatable_ || this->chunking_, 1);
  return this->_tao_unmarshal__demo_value_idl_BaseValue (strm,ci);
}

::CORBA::Boolean
demo::value::idl::BaseValue::_tao_match_formal_type (ptrdiff_t formal_type_id) const
{
  return formal_type_id == reinterpret_cast<ptrdiff_t> (demo::value::idl::BaseValue::_downcast);
}

::CORBA::Boolean
demo::value::idl::BaseValue::_tao_unmarshal (
    TAO_InputCDR &strm,
    BaseValue *&new_object
  )
{
  ::CORBA::ValueBase *base = 0;
  ::CORBA::Boolean is_indirected = false;
  ::CORBA::Boolean is_null_object = false;
  ::CORBA::Boolean const retval =
    ::CORBA::ValueBase::_tao_unmarshal_pre (
        strm,
        base,
        BaseValue::_tao_obv_static_repository_id (),
        is_null_object,
        is_indirected
      );

  ::CORBA::ValueBase_var owner (base);

  if (!retval)
    return false;

  if (is_null_object)
    return true;

  if (!is_indirected && !base->_tao_unmarshal_v (strm))
    return false;

  // Now base must point to the unmarshaled object.
  // Align the pointer to the right subobject.
  new_object = BaseValue::_downcast (base);
  if (0 == new_object)
    return false;

  if (is_indirected)
    new_object->_add_ref ();

  owner._retn ();
  return true;
}

// TAO_IDL - Generated from
// be/be_visitor_valuetype/valuetype_init_cs.cpp:73

demo::value::idl::BaseValue_init::BaseValue_init (void)
{
}

demo::value::idl::BaseValue_init::~BaseValue_init (void)
{
}

demo::value::idl::BaseValue_init *
demo::value::idl::BaseValue_init::_downcast ( ::CORBA::ValueFactoryBase *v)
{
  return dynamic_cast< ::demo::value::idl::BaseValue_init * > (v);
}

const char*
demo::value::idl::BaseValue_init::tao_repository_id (void)
{
  return ::demo::value::idl::BaseValue::_tao_obv_static_repository_id ();
}

::CORBA::ValueBase *
demo::value::idl::BaseValue_init::create_for_unmarshal (void)
{
  ::CORBA::ValueBase *ret_val = 0;
  ACE_NEW_THROW_EX (
      ret_val,
      OBV_demo::value::idl::BaseValue,
      ::CORBA::NO_MEMORY ()
    );
  return ret_val;
}

// TAO_IDL - Generated from
// be/be_visitor_typecode/value_typecode.cpp:65

static TAO::TypeCode::Value_Field<char const *, ::CORBA::TypeCode_ptr const *> const _tao_fields_demo_value_idl_TValue[] =
  {
    { "data", &CORBA::_tc_ulong, ::CORBA::PUBLIC_MEMBER }

  };
static TAO::TypeCode::Value<char const *,
                     ::CORBA::TypeCode_ptr const *,
                     TAO::TypeCode::Value_Field<char const *, ::CORBA::TypeCode_ptr const *> const *,
                     TAO::Null_RefCount_Policy>
  _tao_tc_demo_value_idl_TValue (
    ::CORBA::tk_value,
    "IDL:demo/value/idl/TValue:1.0",
    "TValue",
    ::CORBA::VM_TRUNCATABLE,
    &demo::value::idl::_tc_BaseValue,
    _tao_fields_demo_value_idl_TValue,
    1);


namespace demo
{

  namespace value
  {

    namespace idl
    {
      ::CORBA::TypeCode_ptr const _tc_TValue =
        &_tao_tc_demo_value_idl_TValue;
    }
  }
}

// TAO_IDL - Generated from
// be/be_visitor_valuetype/valuetype_cs.cpp:53

void
TAO::Value_Traits<demo::value::idl::TValue>::add_ref (
    demo::value::idl::TValue * p)
{
  ::CORBA::add_ref (p);
}

void
TAO::Value_Traits<demo::value::idl::TValue>::remove_ref (
    demo::value::idl::TValue * p)
{
  ::CORBA::remove_ref (p);
}

void
TAO::Value_Traits<demo::value::idl::TValue>::release (
    demo::value::idl::TValue * p)
{
  ::CORBA::remove_ref (p);
}

demo::value::idl::TValue *
demo::value::idl::TValue::_downcast ( ::CORBA::ValueBase *v)
{
  return dynamic_cast< ::demo::value::idl::TValue * > (v);
}

const char *
demo::value::idl::TValue::_tao_obv_repository_id (void) const
{
  return this->_tao_obv_static_repository_id ();
}

void
demo::value::idl::TValue::_tao_obv_truncatable_repo_ids (Repository_Id_List& ids) const
{
  ids.push_back (this->_tao_obv_static_repository_id ());
  demo::value::idl::BaseValue::_tao_obv_truncatable_repo_ids (ids);
}

void
demo::value::idl::TValue::_tao_any_destructor (void *_tao_void_pointer)
{
  TValue *_tao_tmp_pointer =
    static_cast<TValue *> (_tao_void_pointer);
  ::CORBA::remove_ref (_tao_tmp_pointer);
}

// TAO extension - the virtual _type method.
::CORBA::TypeCode_ptr demo::value::idl::TValue::_tao_type (void) const
{
  return ::demo::value::idl::_tc_TValue;
}

demo::value::idl::TValue::~TValue (void)
{}

::CORBA::Boolean
demo::value::idl::TValue::_tao_marshal_v (TAO_OutputCDR & strm) const
{
  TAO_ChunkInfo ci (this->is_truncatable_ || this->chunking_);
  return this->_tao_marshal__demo_value_idl_TValue (strm, ci);
}

::CORBA::Boolean
demo::value::idl::TValue::_tao_unmarshal_v (TAO_InputCDR & strm)
{
  TAO_ChunkInfo ci (this->is_truncatable_ || this->chunking_, 1);
  return this->_tao_unmarshal__demo_value_idl_TValue (strm,ci);
}

::CORBA::Boolean
demo::value::idl::TValue::_tao_match_formal_type (ptrdiff_t formal_type_id) const
{
  return formal_type_id == reinterpret_cast<ptrdiff_t> (demo::value::idl::TValue::_downcast);
}

::CORBA::Boolean
demo::value::idl::TValue::_tao_unmarshal (
    TAO_InputCDR &strm,
    TValue *&new_object
  )
{
  ::CORBA::ValueBase *base = 0;
  ::CORBA::Boolean is_indirected = false;
  ::CORBA::Boolean is_null_object = false;
  ::CORBA::Boolean const retval =
    ::CORBA::ValueBase::_tao_unmarshal_pre (
        strm,
        base,
        TValue::_tao_obv_static_repository_id (),
        is_null_object,
        is_indirected
      );

  ::CORBA::ValueBase_var owner (base);

  if (!retval)
    return false;

  if (is_null_object)
    return true;

  if (!is_indirected && !base->_tao_unmarshal_v (strm))
    return false;

  // Now base must point to the unmarshaled object.
  // Align the pointer to the right subobject.
  new_object = TValue::_downcast (base);
  if (0 == new_object)
    return false;

  if (is_indirected)
    new_object->_add_ref ();

  owner._retn ();
  return true;
}

// TAO_IDL - Generated from
// be/be_visitor_valuetype/valuetype_init_cs.cpp:73

demo::value::idl::TValue_init::TValue_init (void)
{
}

demo::value::idl::TValue_init::~TValue_init (void)
{
}

demo::value::idl::TValue_init *
demo::value::idl::TValue_init::_downcast ( ::CORBA::ValueFactoryBase *v)
{
  return dynamic_cast< ::demo::value::idl::TValue_init * > (v);
}

const char*
demo::value::idl::TValue_init::tao_repository_id (void)
{
  return ::demo::value::idl::TValue::_tao_obv_static_repository_id ();
}

::CORBA::ValueBase *
demo::value::idl::TValue_init::create_for_unmarshal (void)
{
  ::CORBA::ValueBase *ret_val = 0;
  ACE_NEW_THROW_EX (
      ret_val,
      OBV_demo::value::idl::TValue,
      ::CORBA::NO_MEMORY ()
    );
  return ret_val;
}

// TAO_IDL - Generated from
// be/be_visitor_typecode/alias_typecode.cpp:49

static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_demo_value_idl_boxedLong (
    ::CORBA::tk_value_box,
    "IDL:demo/value/idl/boxedLong:1.0",
    "boxedLong",
    &CORBA::_tc_long);


namespace demo
{

  namespace value
  {

    namespace idl
    {
      ::CORBA::TypeCode_ptr const _tc_boxedLong =
        &_tao_tc_demo_value_idl_boxedLong;
    }
  }
}

// TAO_IDL - Generated from
// be/be_visitor_valuebox/valuebox_cs.cpp:52

void
TAO::Value_Traits<demo::value::idl::boxedLong>::add_ref (
    demo::value::idl::boxedLong * p
  )
{
  ::CORBA::add_ref (p);
}

void
TAO::Value_Traits<demo::value::idl::boxedLong>::remove_ref (
    demo::value::idl::boxedLong * p
  )
{
  ::CORBA::remove_ref (p);
}

void
TAO::Value_Traits<demo::value::idl::boxedLong>::release (
    demo::value::idl::boxedLong * p
  )
{
  ::CORBA::remove_ref (p);
}

demo::value::idl::boxedLong *
demo::value::idl::boxedLong::_downcast ( ::CORBA::ValueBase *v)
{
  return dynamic_cast< ::demo::value::idl::boxedLong * > (v);
}

::CORBA::ValueBase *
demo::value::idl::boxedLong::_copy_value (void)
{
  ::CORBA::ValueBase *result = 0;
  ACE_NEW_RETURN (
    result,
    boxedLong (*this),
    0);

  return result;
}

const char *
demo::value::idl::boxedLong::_tao_obv_repository_id (void) const
{
  return this->_tao_obv_static_repository_id ();
}

void
demo::value::idl::boxedLong::_tao_obv_truncatable_repo_ids (Repository_Id_List& ids) const
{
  ids.push_back (this->_tao_obv_static_repository_id ());
}

::CORBA::Boolean
demo::value::idl::boxedLong::_tao_match_formal_type (ptrdiff_t ) const
{
  return true;
}

void
demo::value::idl::boxedLong::_tao_any_destructor (void *_tao_void_pointer)
{
  boxedLong *_tao_tmp_pointer =
    static_cast<boxedLong *> (_tao_void_pointer);
  ::CORBA::remove_ref (_tao_tmp_pointer);
}

// TAO extension - the virtual _type method.
::CORBA::TypeCode_ptr demo::value::idl::boxedLong::_tao_type (void) const
{
  return ::demo::value::idl::_tc_boxedLong;
}

::CORBA::Boolean
demo::value::idl::boxedLong::_tao_unmarshal (
    TAO_InputCDR &strm,
    boxedLong *&vb_object
  )
{
  ::CORBA::Boolean is_null_object = false;
  ::CORBA::Boolean is_indirected = false;
  TAO_InputCDR indrected_strm ((size_t) 0);
  if ( ::CORBA::ValueBase::_tao_validate_box_type (
        strm, indrected_strm,
        boxedLong::_tao_obv_static_repository_id (),
        is_null_object, is_indirected
      ) == false)
    {
      return false;
    }

  vb_object = 0;
  if (is_null_object)
    {
      return true;
    }

  if (is_indirected)
    {
      return demo::value::idl::boxedLong::_tao_unmarshal (
             indrected_strm, vb_object);
    }

  ACE_NEW_RETURN (
    vb_object,
    boxedLong,
    false);

  return (strm >> vb_object->_pd_value);
}

::CORBA::Boolean
demo::value::idl::boxedLong::_tao_unmarshal_v (TAO_InputCDR &)
{
  return true;
}



// TAO_IDL - Generated from
// be/be_visitor_valuebox/valuebox_cs.cpp:745

demo::value::idl::boxedLong::~boxedLong (void)
{
}

::CORBA::Boolean
demo::value::idl::boxedLong::_tao_marshal_v (TAO_OutputCDR & strm) const
{
  return (strm << this->_pd_value);
}



// TAO_IDL - Generated from
// be/be_visitor_typecode/alias_typecode.cpp:49

static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_demo_value_idl_boxedString (
    ::CORBA::tk_value_box,
    "IDL:demo/value/idl/boxedString:1.0",
    "boxedString",
    &CORBA::_tc_string);


namespace demo
{

  namespace value
  {

    namespace idl
    {
      ::CORBA::TypeCode_ptr const _tc_boxedString =
        &_tao_tc_demo_value_idl_boxedString;
    }
  }
}

// TAO_IDL - Generated from
// be/be_visitor_valuebox/valuebox_cs.cpp:52

void
TAO::Value_Traits<demo::value::idl::boxedString>::add_ref (
    demo::value::idl::boxedString * p
  )
{
  ::CORBA::add_ref (p);
}

void
TAO::Value_Traits<demo::value::idl::boxedString>::remove_ref (
    demo::value::idl::boxedString * p
  )
{
  ::CORBA::remove_ref (p);
}

void
TAO::Value_Traits<demo::value::idl::boxedString>::release (
    demo::value::idl::boxedString * p
  )
{
  ::CORBA::remove_ref (p);
}

demo::value::idl::boxedString *
demo::value::idl::boxedString::_downcast ( ::CORBA::ValueBase *v)
{
  return dynamic_cast< ::demo::value::idl::boxedString * > (v);
}

::CORBA::ValueBase *
demo::value::idl::boxedString::_copy_value (void)
{
  ::CORBA::ValueBase *result = 0;
  ACE_NEW_RETURN (
    result,
    boxedString (*this),
    0);

  return result;
}

const char *
demo::value::idl::boxedString::_tao_obv_repository_id (void) const
{
  return this->_tao_obv_static_repository_id ();
}

void
demo::value::idl::boxedString::_tao_obv_truncatable_repo_ids (Repository_Id_List& ids) const
{
  ids.push_back (this->_tao_obv_static_repository_id ());
}

::CORBA::Boolean
demo::value::idl::boxedString::_tao_match_formal_type (ptrdiff_t ) const
{
  return true;
}

void
demo::value::idl::boxedString::_tao_any_destructor (void *_tao_void_pointer)
{
  boxedString *_tao_tmp_pointer =
    static_cast<boxedString *> (_tao_void_pointer);
  ::CORBA::remove_ref (_tao_tmp_pointer);
}

// TAO extension - the virtual _type method.
::CORBA::TypeCode_ptr demo::value::idl::boxedString::_tao_type (void) const
{
  return ::demo::value::idl::_tc_boxedString;
}

::CORBA::Boolean
demo::value::idl::boxedString::_tao_unmarshal (
    TAO_InputCDR &strm,
    boxedString *&vb_object
  )
{
  ::CORBA::Boolean is_null_object = false;
  ::CORBA::Boolean is_indirected = false;
  TAO_InputCDR indrected_strm ((size_t) 0);
  if ( ::CORBA::ValueBase::_tao_validate_box_type (
        strm, indrected_strm,
        boxedString::_tao_obv_static_repository_id (),
        is_null_object, is_indirected
      ) == false)
    {
      return false;
    }

  vb_object = 0;
  if (is_null_object)
    {
      return true;
    }

  if (is_indirected)
    {
      return demo::value::idl::boxedString::_tao_unmarshal (
             indrected_strm, vb_object);
    }

  ACE_NEW_RETURN (
    vb_object,
    boxedString,
    false);

  return (strm >> vb_object->_pd_value);
}

::CORBA::Boolean
demo::value::idl::boxedString::_tao_unmarshal_v (TAO_InputCDR &)
{
  return true;
}



// TAO_IDL - Generated from
// be/be_visitor_valuebox/valuebox_cs.cpp:620

demo::value::idl::boxedString::~boxedString (void)
{
}

::CORBA::Boolean
demo::value::idl::boxedString::_tao_marshal_v (TAO_OutputCDR & strm) const
{
  return (strm << this->_pd_value);
}



// TAO_IDL - Generated from
// be/be_visitor_typecode/value_typecode.cpp:65

static TAO::TypeCode::Value_Field<char const *, ::CORBA::TypeCode_ptr const *> const _tao_fields_demo_value_idl_boxedValue[] =
  {
    { "b1", &demo::value::idl::_tc_boxedLong, ::CORBA::PUBLIC_MEMBER },
    { "b2", &demo::value::idl::_tc_boxedLong, ::CORBA::PUBLIC_MEMBER }

  };
static TAO::TypeCode::Value<char const *,
                     ::CORBA::TypeCode_ptr const *,
                     TAO::TypeCode::Value_Field<char const *, ::CORBA::TypeCode_ptr const *> const *,
                     TAO::Null_RefCount_Policy>
  _tao_tc_demo_value_idl_boxedValue (
    ::CORBA::tk_value,
    "IDL:demo/value/idl/boxedValue:1.0",
    "boxedValue",
    ::CORBA::VM_NONE,
    &::CORBA::_tc_null,
    _tao_fields_demo_value_idl_boxedValue,
    2);


namespace demo
{

  namespace value
  {

    namespace idl
    {
      ::CORBA::TypeCode_ptr const _tc_boxedValue =
        &_tao_tc_demo_value_idl_boxedValue;
    }
  }
}

// TAO_IDL - Generated from
// be/be_visitor_valuetype/valuetype_cs.cpp:53

void
TAO::Value_Traits<demo::value::idl::boxedValue>::add_ref (
    demo::value::idl::boxedValue * p)
{
  ::CORBA::add_ref (p);
}

void
TAO::Value_Traits<demo::value::idl::boxedValue>::remove_ref (
    demo::value::idl::boxedValue * p)
{
  ::CORBA::remove_ref (p);
}

void
TAO::Value_Traits<demo::value::idl::boxedValue>::release (
    demo::value::idl::boxedValue * p)
{
  ::CORBA::remove_ref (p);
}

demo::value::idl::boxedValue *
demo::value::idl::boxedValue::_downcast ( ::CORBA::ValueBase *v)
{
  return dynamic_cast< ::demo::value::idl::boxedValue * > (v);
}

const char *
demo::value::idl::boxedValue::_tao_obv_repository_id (void) const
{
  return this->_tao_obv_static_repository_id ();
}

void
demo::value::idl::boxedValue::_tao_obv_truncatable_repo_ids (Repository_Id_List& ids) const
{
  ids.push_back (this->_tao_obv_static_repository_id ());
}

void
demo::value::idl::boxedValue::_tao_any_destructor (void *_tao_void_pointer)
{
  boxedValue *_tao_tmp_pointer =
    static_cast<boxedValue *> (_tao_void_pointer);
  ::CORBA::remove_ref (_tao_tmp_pointer);
}

// TAO extension - the virtual _type method.
::CORBA::TypeCode_ptr demo::value::idl::boxedValue::_tao_type (void) const
{
  return ::demo::value::idl::_tc_boxedValue;
}

demo::value::idl::boxedValue::~boxedValue (void)
{}

::CORBA::Boolean
demo::value::idl::boxedValue::_tao_marshal_v (TAO_OutputCDR & strm) const
{
  TAO_ChunkInfo ci (this->is_truncatable_ || this->chunking_);
  return this->_tao_marshal__demo_value_idl_boxedValue (strm, ci);
}

::CORBA::Boolean
demo::value::idl::boxedValue::_tao_unmarshal_v (TAO_InputCDR & strm)
{
  TAO_ChunkInfo ci (this->is_truncatable_ || this->chunking_, 1);
  return this->_tao_unmarshal__demo_value_idl_boxedValue (strm,ci);
}

::CORBA::Boolean
demo::value::idl::boxedValue::_tao_match_formal_type (ptrdiff_t formal_type_id) const
{
  return formal_type_id == reinterpret_cast<ptrdiff_t> (demo::value::idl::boxedValue::_downcast);
}

::CORBA::Boolean
demo::value::idl::boxedValue::_tao_unmarshal (
    TAO_InputCDR &strm,
    boxedValue *&new_object
  )
{
  ::CORBA::ValueBase *base = 0;
  ::CORBA::Boolean is_indirected = false;
  ::CORBA::Boolean is_null_object = false;
  ::CORBA::Boolean const retval =
    ::CORBA::ValueBase::_tao_unmarshal_pre (
        strm,
        base,
        boxedValue::_tao_obv_static_repository_id (),
        is_null_object,
        is_indirected
      );

  ::CORBA::ValueBase_var owner (base);

  if (!retval)
    return false;

  if (is_null_object)
    return true;

  if (!is_indirected && !base->_tao_unmarshal_v (strm))
    return false;

  // Now base must point to the unmarshaled object.
  // Align the pointer to the right subobject.
  new_object = boxedValue::_downcast (base);
  if (0 == new_object)
    return false;

  if (is_indirected)
    new_object->_add_ref ();

  owner._retn ();
  return true;
}

// TAO_IDL - Generated from
// be/be_visitor_valuetype/valuetype_init_cs.cpp:73

demo::value::idl::boxedValue_init::boxedValue_init (void)
{
}

demo::value::idl::boxedValue_init::~boxedValue_init (void)
{
}

demo::value::idl::boxedValue_init *
demo::value::idl::boxedValue_init::_downcast ( ::CORBA::ValueFactoryBase *v)
{
  return dynamic_cast< ::demo::value::idl::boxedValue_init * > (v);
}

const char*
demo::value::idl::boxedValue_init::tao_repository_id (void)
{
  return ::demo::value::idl::boxedValue::_tao_obv_static_repository_id ();
}

::CORBA::ValueBase *
demo::value::idl::boxedValue_init::create_for_unmarshal (void)
{
  ::CORBA::ValueBase *ret_val = 0;
  ACE_NEW_THROW_EX (
      ret_val,
      OBV_demo::value::idl::boxedValue,
      ::CORBA::NO_MEMORY ()
    );
  return ret_val;
}

// TAO_IDL - Generated from
// be/be_visitor_typecode/value_typecode.cpp:65

static TAO::TypeCode::Value_Field<char const *, ::CORBA::TypeCode_ptr const *> const _tao_fields_demo_value_idl_Node[] =
  {
    { "id", &CORBA::_tc_long, ::CORBA::PUBLIC_MEMBER },
    { "next", &demo::value::idl::_tc_Node, ::CORBA::PUBLIC_MEMBER }

  };
static TAO::TypeCode::Recursive_Type<
  TAO::TypeCode::Value<char const *,
                       ::CORBA::TypeCode_ptr const *,
                       TAO::TypeCode::Value_Field<char const *, ::CORBA::TypeCode_ptr const *> const *,
                       TAO::Null_RefCount_Policy>,
  ::CORBA::TypeCode_ptr const *,
  TAO::TypeCode::Value_Field<char const *, ::CORBA::TypeCode_ptr const *> const * >

  _tao_tc_demo_value_idl_Node (
    ::CORBA::tk_value,
    "IDL:demo/value/idl/Node:1.0",
    "Node",
    ::CORBA::VM_NONE,
    &::CORBA::_tc_null,
    _tao_fields_demo_value_idl_Node,
    2);


namespace demo
{

  namespace value
  {

    namespace idl
    {
      ::CORBA::TypeCode_ptr const _tc_Node =
        &_tao_tc_demo_value_idl_Node;
    }
  }
}

// TAO_IDL - Generated from
// be/be_visitor_valuetype/valuetype_cs.cpp:53

void
TAO::Value_Traits<demo::value::idl::Node>::add_ref (
    demo::value::idl::Node * p)
{
  ::CORBA::add_ref (p);
}

void
TAO::Value_Traits<demo::value::idl::Node>::remove_ref (
    demo::value::idl::Node * p)
{
  ::CORBA::remove_ref (p);
}

void
TAO::Value_Traits<demo::value::idl::Node>::release (
    demo::value::idl::Node * p)
{
  ::CORBA::remove_ref (p);
}

demo::value::idl::Node *
demo::value::idl::Node::_downcast ( ::CORBA::ValueBase *v)
{
  return dynamic_cast< ::demo::value::idl::Node * > (v);
}

const char *
demo::value::idl::Node::_tao_obv_repository_id (void) const
{
  return this->_tao_obv_static_repository_id ();
}

void
demo::value::idl::Node::_tao_obv_truncatable_repo_ids (Repository_Id_List& ids) const
{
  ids.push_back (this->_tao_obv_static_repository_id ());
}

void
demo::value::idl::Node::_tao_any_destructor (void *_tao_void_pointer)
{
  Node *_tao_tmp_pointer =
    static_cast<Node *> (_tao_void_pointer);
  ::CORBA::remove_ref (_tao_tmp_pointer);
}

// TAO extension - the virtual _type method.
::CORBA::TypeCode_ptr demo::value::idl::Node::_tao_type (void) const
{
  return ::demo::value::idl::_tc_Node;
}

demo::value::idl::Node::~Node (void)
{}

::CORBA::Boolean
demo::value::idl::Node::_tao_marshal_v (TAO_OutputCDR & strm) const
{
  TAO_ChunkInfo ci (this->is_truncatable_ || this->chunking_);
  return this->_tao_marshal__demo_value_idl_Node (strm, ci);
}

::CORBA::Boolean
demo::value::idl::Node::_tao_unmarshal_v (TAO_InputCDR & strm)
{
  TAO_ChunkInfo ci (this->is_truncatable_ || this->chunking_, 1);
  return this->_tao_unmarshal__demo_value_idl_Node (strm,ci);
}

::CORBA::Boolean
demo::value::idl::Node::_tao_match_formal_type (ptrdiff_t formal_type_id) const
{
  return formal_type_id == reinterpret_cast<ptrdiff_t> (demo::value::idl::Node::_downcast);
}

::CORBA::Boolean
demo::value::idl::Node::_tao_unmarshal (
    TAO_InputCDR &strm,
    Node *&new_object
  )
{
  ::CORBA::ValueBase *base = 0;
  ::CORBA::Boolean is_indirected = false;
  ::CORBA::Boolean is_null_object = false;
  ::CORBA::Boolean const retval =
    ::CORBA::ValueBase::_tao_unmarshal_pre (
        strm,
        base,
        Node::_tao_obv_static_repository_id (),
        is_null_object,
        is_indirected
      );

  ::CORBA::ValueBase_var owner (base);

  if (!retval)
    return false;

  if (is_null_object)
    return true;

  if (!is_indirected && !base->_tao_unmarshal_v (strm))
    return false;

  // Now base must point to the unmarshaled object.
  // Align the pointer to the right subobject.
  new_object = Node::_downcast (base);
  if (0 == new_object)
    return false;

  if (is_indirected)
    new_object->_add_ref ();

  owner._retn ();
  return true;
}

// TAO_IDL - Generated from
// be/be_visitor_valuetype/valuetype_init_cs.cpp:73

demo::value::idl::Node_init::Node_init (void)
{
}

demo::value::idl::Node_init::~Node_init (void)
{
}

demo::value::idl::Node_init *
demo::value::idl::Node_init::_downcast ( ::CORBA::ValueFactoryBase *v)
{
  return dynamic_cast< ::demo::value::idl::Node_init * > (v);
}

const char*
demo::value::idl::Node_init::tao_repository_id (void)
{
  return ::demo::value::idl::Node::_tao_obv_static_repository_id ();
}

::CORBA::ValueBase *
demo::value::idl::Node_init::create_for_unmarshal (void)
{
  ::CORBA::ValueBase *ret_val = 0;
  ACE_NEW_THROW_EX (
      ret_val,
      OBV_demo::value::idl::Node,
      ::CORBA::NO_MEMORY ()
    );
  return ret_val;
}

// TAO_IDL - Generated from
// be/be_visitor_interface/interface_cs.cpp:48

// Traits specializations for demo::value::idl::ValueServer.

demo::value::idl::ValueServer_ptr
TAO::Objref_Traits<demo::value::idl::ValueServer>::duplicate (
    demo::value::idl::ValueServer_ptr p)
{
  return demo::value::idl::ValueServer::_duplicate (p);
}

void
TAO::Objref_Traits<demo::value::idl::ValueServer>::release (
    demo::value::idl::ValueServer_ptr p)
{
  ::CORBA::release (p);
}

demo::value::idl::ValueServer_ptr
TAO::Objref_Traits<demo::value::idl::ValueServer>::nil (void)
{
  return demo::value::idl::ValueServer::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<demo::value::idl::ValueServer>::marshal (
    const demo::value::idl::ValueServer_ptr p,
    TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:88

char *
demo::value::idl::ValueServer::receive_boxedvalue (
  ::demo::value::idl::boxedValue * b)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }

  TAO::Arg_Traits< char *>::ret_val _tao_retval;
  TAO::Arg_Traits< ::demo::value::idl::boxedValue>::in_arg_val _tao_b (b);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_b
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      2,
      "receive_boxedvalue",
      18,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY

    );

  _tao_call.invoke (0, 0);

  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:88

char *
demo::value::idl::ValueServer::receive_long (
  ::demo::value::idl::boxedLong * p1,
  ::demo::value::idl::boxedLong * p2)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }

  TAO::Arg_Traits< char *>::ret_val _tao_retval;
  TAO::Arg_Traits< ::demo::value::idl::boxedLong>::in_arg_val _tao_p1 (p1);
  TAO::Arg_Traits< ::demo::value::idl::boxedLong>::in_arg_val _tao_p2 (p2);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_p1,
      &_tao_p2
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      3,
      "receive_long",
      12,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY

    );

  _tao_call.invoke (0, 0);

  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:88

char *
demo::value::idl::ValueServer::receive_string (
  ::demo::value::idl::boxedString * s1,
  ::demo::value::idl::boxedString * s2)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }

  TAO::Arg_Traits< char *>::ret_val _tao_retval;
  TAO::Arg_Traits< ::demo::value::idl::boxedString>::in_arg_val _tao_s1 (s1);
  TAO::Arg_Traits< ::demo::value::idl::boxedString>::in_arg_val _tao_s2 (s2);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_s1,
      &_tao_s2
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      3,
      "receive_string",
      14,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY

    );

  _tao_call.invoke (0, 0);

  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:88

char *
demo::value::idl::ValueServer::receive_list (
  ::demo::value::idl::Node * node)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }

  TAO::Arg_Traits< char *>::ret_val _tao_retval;
  TAO::Arg_Traits< ::demo::value::idl::Node>::in_arg_val _tao_node (node);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_node
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      2,
      "receive_list",
      12,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY

    );

  _tao_call.invoke (0, 0);

  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:88

char *
demo::value::idl::ValueServer::receive_truncatable (
  ::demo::value::idl::TValue *& v)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }

  TAO::Arg_Traits< char *>::ret_val _tao_retval;
  TAO::Arg_Traits< ::demo::value::idl::TValue>::inout_arg_val _tao_v (v);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_v
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      2,
      "receive_truncatable",
      19,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY

    );

  _tao_call.invoke (0, 0);

  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:88

char *
demo::value::idl::ValueServer::receive_sequence (
  const ::demo::value::idl::ConfigValues & v)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }

  TAO::Arg_Traits< char *>::ret_val _tao_retval;
  TAO::Arg_Traits< ::demo::value::idl::ConfigValues>::in_arg_val _tao_v (v);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_v
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      2,
      "receive_sequence",
      16,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY

    );

  _tao_call.invoke (0, 0);

  return _tao_retval.retn ();
}

demo::value::idl::ValueServer::ValueServer (void)
{
}

demo::value::idl::ValueServer::~ValueServer (void)
{
}

void
demo::value::idl::ValueServer::_tao_any_destructor (void *_tao_void_pointer)
{
  ValueServer *_tao_tmp_pointer =
    static_cast<ValueServer *> (_tao_void_pointer);
  ::CORBA::release (_tao_tmp_pointer);
}

demo::value::idl::ValueServer_ptr
demo::value::idl::ValueServer::_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return
    TAO::Narrow_Utils<ValueServer>::narrow (
        _tao_objref,
        "IDL:demo/value/idl/ValueServer:1.0");
}

demo::value::idl::ValueServer_ptr
demo::value::idl::ValueServer::_unchecked_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return
    TAO::Narrow_Utils<ValueServer>::unchecked_narrow (
        _tao_objref);
}

demo::value::idl::ValueServer_ptr
demo::value::idl::ValueServer::_nil (void)
{
  return 0;
}

demo::value::idl::ValueServer_ptr
demo::value::idl::ValueServer::_duplicate (ValueServer_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  return obj;
}

void
demo::value::idl::ValueServer::_tao_release (ValueServer_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
demo::value::idl::ValueServer::_is_a (const char *value)
{
  if (
      ACE_OS::strcmp (
          value,
          "IDL:demo/value/idl/ValueServer:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        ) == 0
    )
    {
      return true; // success using local knowledge
    }
  else
    {
      return this->::CORBA::Object::_is_a (value);
    }
}

const char* demo::value::idl::ValueServer::_interface_repository_id (void) const
{
  return "IDL:demo/value/idl/ValueServer:1.0";
}

::CORBA::Boolean
demo::value::idl::ValueServer::marshal (TAO_OutputCDR &cdr)
{
  return (cdr << this);
}

// TAO_IDL - Generated from
// be/be_visitor_typecode/objref_typecode.cpp:70

static TAO::TypeCode::Objref<char const *,
                             TAO::Null_RefCount_Policy>
  _tao_tc_demo_value_idl_ValueServer (
    ::CORBA::tk_objref,
    "IDL:demo/value/idl/ValueServer:1.0",
    "ValueServer");


namespace demo
{

  namespace value
  {

    namespace idl
    {
      ::CORBA::TypeCode_ptr const _tc_ValueServer =
        &_tao_tc_demo_value_idl_ValueServer;
    }
  }
}

// TAO_IDL - Generated from
// be/be_visitor_valuetype/valuetype_obv_cs.cpp:44

OBV_demo::value::idl::ConfigValue::ConfigValue (void)
: require_truncation_ (false)
{}

OBV_demo::value::idl::ConfigValue::ConfigValue (
    const char * _tao_init_name,
    const ::CORBA::Any & _tao_init_value)
: require_truncation_ (false)
{
  name (_tao_init_name);
  value (_tao_init_value);
}

OBV_demo::value::idl::ConfigValue::~ConfigValue (void)
{}

::CORBA::ValueBase *
OBV_demo::value::idl::ConfigValue::_copy_value (void)
{
  ::CORBA::ValueBase *ret_val = 0;
  ACE_NEW_THROW_EX (
    ret_val,
    ConfigValue (
      name (),
      value ()
    ),
    ::CORBA::NO_MEMORY ()
  );
  return ret_val;
}

::CORBA::Boolean
OBV_demo::value::idl::ConfigValue::_tao_marshal__demo_value_idl_ConfigValue (TAO_OutputCDR &strm, TAO_ChunkInfo& ci) const
{
  return _tao_marshal_state (strm, ci);
}

::CORBA::Boolean
OBV_demo::value::idl::ConfigValue::_tao_unmarshal__demo_value_idl_ConfigValue (TAO_InputCDR &strm, TAO_ChunkInfo& ci)
{
  return _tao_unmarshal_state (strm, ci);
}

// TAO_IDL - Generated from
// be/be_visitor_valuetype/field_cs.cpp:834

/// Accessor to set the member.
void
OBV_demo::value::idl::ConfigValue::name (char *val)
{
  this->_pd_name = (val);
}

/// Accessor to set the member.
void
OBV_demo::value::idl::ConfigValue::name (const char *val)
{
  // Set the value.
  this->_pd_name = ::CORBA::string_dup (val);
}

/// Accessor to set the member.
void
OBV_demo::value::idl::ConfigValue::name (const ::CORBA::String_var &val)
{
  ::CORBA::String_var name_var = val;
  this->_pd_name = name_var._retn ();
}

const char *
OBV_demo::value::idl::ConfigValue::name (void) const // get method
{
  return this->_pd_name;
}

// TAO_IDL - Generated from
// be/be_visitor_valuetype/field_cs.cpp:587

/// Accessor to set the member.
void
OBV_demo::value::idl::ConfigValue::value (const CORBA::Any & val)
{
  this->_pd_value = val;
}

// Retrieve the member.
const ::CORBA::Any &
OBV_demo::value::idl::ConfigValue::value (void) const
{
  return this->_pd_value;
}

// Retrieve the member
::CORBA::Any &
OBV_demo::value::idl::ConfigValue::value (void)
{
  return this->_pd_value;
}

// TAO_IDL - Generated from
// be/be_visitor_valuetype/valuetype_obv_cs.cpp:44

OBV_demo::value::idl::BaseValue::BaseValue (void)
: require_truncation_ (false)
{}

OBV_demo::value::idl::BaseValue::BaseValue (
    ::CORBA::ULong _tao_init_basic_data)
: require_truncation_ (false)
{
  basic_data (_tao_init_basic_data);
}

OBV_demo::value::idl::BaseValue::~BaseValue (void)
{}

::CORBA::ValueBase *
OBV_demo::value::idl::BaseValue::_copy_value (void)
{
  ::CORBA::ValueBase *ret_val = 0;
  ACE_NEW_THROW_EX (
    ret_val,
    BaseValue (
      basic_data ()
    ),
    ::CORBA::NO_MEMORY ()
  );
  return ret_val;
}

::CORBA::Boolean
OBV_demo::value::idl::BaseValue::_tao_marshal__demo_value_idl_BaseValue (TAO_OutputCDR &strm, TAO_ChunkInfo& ci) const
{
  return _tao_marshal_state (strm, ci);
}

::CORBA::Boolean
OBV_demo::value::idl::BaseValue::_tao_unmarshal__demo_value_idl_BaseValue (TAO_InputCDR &strm, TAO_ChunkInfo& ci)
{
  return _tao_unmarshal_state (strm, ci);
}

// TAO_IDL - Generated from
// be/be_visitor_valuetype/field_cs.cpp:587

/// Accessor to set the member.
void
OBV_demo::value::idl::BaseValue::basic_data (const CORBA::ULong val)
{
  // Set the value.
  this->_pd_basic_data = val;
}

// Retrieve the member
::CORBA::ULong
OBV_demo::value::idl::BaseValue::basic_data (void) const
{
  return this->_pd_basic_data;
}

// TAO_IDL - Generated from
// be/be_visitor_valuetype/valuetype_obv_cs.cpp:44

OBV_demo::value::idl::TValue::TValue (void)
: require_truncation_ (false)
{}

OBV_demo::value::idl::TValue::TValue (
    ::CORBA::ULong _tao_init_basic_data,
    ::CORBA::ULong _tao_init_data)
: require_truncation_ (false)
{
  basic_data (_tao_init_basic_data);
  data (_tao_init_data);
}

OBV_demo::value::idl::TValue::~TValue (void)
{}

::CORBA::Boolean
OBV_demo::value::idl::TValue::_tao_marshal__demo_value_idl_TValue (TAO_OutputCDR &strm, TAO_ChunkInfo& ci) const
{
  return _tao_marshal_state (strm, ci);
}

::CORBA::Boolean
OBV_demo::value::idl::TValue::_tao_unmarshal__demo_value_idl_TValue (TAO_InputCDR &strm, TAO_ChunkInfo& ci)
{
  return _tao_unmarshal_state (strm, ci);
}

// TAO_IDL - Generated from
// be/be_visitor_valuetype/field_cs.cpp:587

/// Accessor to set the member.
void
OBV_demo::value::idl::TValue::data (const CORBA::ULong val)
{
  // Set the value.
  this->_pd_data = val;
}

// Retrieve the member
::CORBA::ULong
OBV_demo::value::idl::TValue::data (void) const
{
  return this->_pd_data;
}

// TAO_IDL - Generated from
// be/be_visitor_valuetype/valuetype_obv_cs.cpp:44

OBV_demo::value::idl::boxedValue::boxedValue (void)
: require_truncation_ (false)
{}

OBV_demo::value::idl::boxedValue::boxedValue (
    ::demo::value::idl::boxedLong * _tao_init_b1,
    ::demo::value::idl::boxedLong * _tao_init_b2)
: require_truncation_ (false)
{
  b1 (_tao_init_b1);
  b2 (_tao_init_b2);
}

OBV_demo::value::idl::boxedValue::~boxedValue (void)
{}

::CORBA::ValueBase *
OBV_demo::value::idl::boxedValue::_copy_value (void)
{
  ::CORBA::ValueBase *ret_val = 0;
  ACE_NEW_THROW_EX (
    ret_val,
    boxedValue (
      (b1 () ?
        demo::value::idl::boxedLong::_downcast (b1 ()->_copy_value ())
        : 0),
      (b2 () ?
        demo::value::idl::boxedLong::_downcast (b2 ()->_copy_value ())
        : 0)
    ),
    ::CORBA::NO_MEMORY ()
  );
  return ret_val;
}

::CORBA::Boolean
OBV_demo::value::idl::boxedValue::_tao_marshal__demo_value_idl_boxedValue (TAO_OutputCDR &strm, TAO_ChunkInfo& ci) const
{
  return _tao_marshal_state (strm, ci);
}

::CORBA::Boolean
OBV_demo::value::idl::boxedValue::_tao_unmarshal__demo_value_idl_boxedValue (TAO_InputCDR &strm, TAO_ChunkInfo& ci)
{
  return _tao_unmarshal_state (strm, ci);
}

// TAO_IDL - Generated from
// be/be_visitor_valuetype/field_cs.cpp:430

/// Accessor to set the member.
void
OBV_demo::value::idl::boxedValue::b1 (demo::value::idl::boxedLong* val)
{
  ::CORBA::add_ref (val);
  this->_pd_b1 = val;
}

/// Retrieve the member
demo::value::idl::boxedLong *
OBV_demo::value::idl::boxedValue::b1 () const
{
  return this->_pd_b1.in ();
}

// TAO_IDL - Generated from
// be/be_visitor_valuetype/field_cs.cpp:430

/// Accessor to set the member.
void
OBV_demo::value::idl::boxedValue::b2 (demo::value::idl::boxedLong* val)
{
  ::CORBA::add_ref (val);
  this->_pd_b2 = val;
}

/// Retrieve the member
demo::value::idl::boxedLong *
OBV_demo::value::idl::boxedValue::b2 () const
{
  return this->_pd_b2.in ();
}

// TAO_IDL - Generated from
// be/be_visitor_valuetype/valuetype_obv_cs.cpp:44

OBV_demo::value::idl::Node::Node (void)
: require_truncation_ (false)
{}

OBV_demo::value::idl::Node::Node (
    ::CORBA::Long _tao_init_id,
    ::demo::value::idl::Node * _tao_init_next)
: require_truncation_ (false)
{
  id (_tao_init_id);
  next (_tao_init_next);
}

OBV_demo::value::idl::Node::~Node (void)
{}

::CORBA::ValueBase *
OBV_demo::value::idl::Node::_copy_value (void)
{
  ::CORBA::ValueBase *ret_val = 0;
  ACE_NEW_THROW_EX (
    ret_val,
    Node (
      id (),
      (next () ?
        demo::value::idl::Node::_downcast (next ()->_copy_value ())
        : 0)
    ),
    ::CORBA::NO_MEMORY ()
  );
  return ret_val;
}

::CORBA::Boolean
OBV_demo::value::idl::Node::_tao_marshal__demo_value_idl_Node (TAO_OutputCDR &strm, TAO_ChunkInfo& ci) const
{
  return _tao_marshal_state (strm, ci);
}

::CORBA::Boolean
OBV_demo::value::idl::Node::_tao_unmarshal__demo_value_idl_Node (TAO_InputCDR &strm, TAO_ChunkInfo& ci)
{
  return _tao_unmarshal_state (strm, ci);
}

// TAO_IDL - Generated from
// be/be_visitor_valuetype/field_cs.cpp:587

/// Accessor to set the member.
void
OBV_demo::value::idl::Node::id (const CORBA::Long val)
{
  // Set the value.
  this->_pd_id = val;
}

// Retrieve the member
::CORBA::Long
OBV_demo::value::idl::Node::id (void) const
{
  return this->_pd_id;
}

// TAO_IDL - Generated from
// be/be_visitor_valuetype/field_cs.cpp:430

/// Accessor to set the member.
void
OBV_demo::value::idl::Node::next (demo::value::idl::Node* val)
{
  ::CORBA::add_ref (val);
  this->_pd_next = val;
}

/// Retrieve the member
demo::value::idl::Node *
OBV_demo::value::idl::Node::next () const
{
  return this->_pd_next.in ();
}

// TAO_IDL - Generated from
// be/be_visitor_valuetype/any_op_cs.cpp:45
TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<demo::value::idl::ConfigValue>::to_value (
      ::CORBA::ValueBase *&_tao_elem
    ) const
  {
    ::CORBA::add_ref (this->value_);
    _tao_elem = this->value_;
    return true;
  }
}


TAO_END_VERSIONED_NAMESPACE_DECL



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace demo
{

  namespace value
  {

    namespace idl
    {
      // Copying insertion.
      void
      operator<<= (
          ::CORBA::Any &_tao_any,
          ConfigValue *_tao_elem
        )
      {
        #ifdef TAO_VALUETYPE_COPYING_ANY_INSERTION_USES_COPY_VALUE
          ConfigValue *_tao_copy =
            _tao_elem ?
              ConfigValue::_downcast (_tao_elem->_copy_value ())
              : 0;
          _tao_any <<= &_tao_copy;
        #else
          ::CORBA::add_ref (_tao_elem);
          _tao_any <<= &_tao_elem;
        #endif
      }

      // Non-copying insertion.
      void
      operator<<= (
          ::CORBA::Any &_tao_any,
          ConfigValue **_tao_elem
        )
      {
        TAO::Any_Impl_T<ConfigValue>::insert (
            _tao_any,
            ConfigValue::_tao_any_destructor,
            _tc_ConfigValue,
            *_tao_elem
          );
      }

      ::CORBA::Boolean
      operator>>= (
          const ::CORBA::Any &_tao_any,
          ConfigValue *&_tao_elem
        )
      {
        return
          TAO::Any_Impl_T<ConfigValue>::extract (
              _tao_any,
              ConfigValue::_tao_any_destructor,
              _tc_ConfigValue,
              _tao_elem
            );
      }


    }
  }
}

#else


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    demo::value::idl::ConfigValue *_tao_elem
  )
{
  #ifdef TAO_VALUETYPE_COPYING_ANY_INSERTION_USES_COPY_VALUE
    demo::value::idl::ConfigValue *_tao_copy =
      _tao_elem ?
        demo::value::idl::ConfigValue::_downcast (_tao_elem->_copy_value ())
        : 0;
    _tao_any <<= &_tao_copy;
  #else
    ::CORBA::add_ref (_tao_elem);
    _tao_any <<= &_tao_elem;
  #endif
}

// Non-copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    demo::value::idl::ConfigValue **_tao_elem
  )
{
  TAO::Any_Impl_T<demo::value::idl::ConfigValue>::insert (
      _tao_any,
      demo::value::idl::ConfigValue::_tao_any_destructor,
      demo::value::idl::_tc_ConfigValue,
      *_tao_elem
    );
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    demo::value::idl::ConfigValue *&_tao_elem
  )
{
  return
    TAO::Any_Impl_T<demo::value::idl::ConfigValue>::extract (
        _tao_any,
        demo::value::idl::ConfigValue::_tao_any_destructor,
        demo::value::idl::_tc_ConfigValue,
        _tao_elem
      );
}


TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_sequence/any_op_cs.cpp:45


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


TAO_END_VERSIONED_NAMESPACE_DECL



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace demo
{

  namespace value
  {

    namespace idl
    {

      // Copying insertion.
      void operator<<= (
          ::CORBA::Any &_tao_any,
          const ::demo::value::idl::ConfigValues &_tao_elem
        )
      {
        TAO::Any_Dual_Impl_T< ::demo::value::idl::ConfigValues>::insert_copy (
            _tao_any,
            ::demo::value::idl::ConfigValues::_tao_any_destructor,
            ::demo::value::idl::_tc_ConfigValues,
            _tao_elem
          );
    }

    // Non-copying insertion.
    void operator<<= (
        ::CORBA::Any &_tao_any,
        ::demo::value::idl::ConfigValues *_tao_elem)
    {
      TAO::Any_Dual_Impl_T< ::demo::value::idl::ConfigValues>::insert (
          _tao_any,
          ::demo::value::idl::ConfigValues::_tao_any_destructor,
          ::demo::value::idl::_tc_ConfigValues,
          _tao_elem
        );
    }

    // Extraction to non-const pointer (deprecated).
    ::CORBA::Boolean operator>>= (
        const ::CORBA::Any &_tao_any,
        ::demo::value::idl::ConfigValues *&_tao_elem)
    {
      return _tao_any >>= const_cast<
          const ::demo::value::idl::ConfigValues *&> (
          _tao_elem
        );
    }

    // Extraction to const pointer.
    ::CORBA::Boolean operator>>= (
        const ::CORBA::Any &_tao_any,
        const ::demo::value::idl::ConfigValues *&_tao_elem)
    {
      return
        TAO::Any_Dual_Impl_T< ::demo::value::idl::ConfigValues>::extract (
            _tao_any,
            ::demo::value::idl::ConfigValues::_tao_any_destructor,
            ::demo::value::idl::_tc_ConfigValues,
            _tao_elem
          );
    }
  }
}
}

#else


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


// Copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    const demo::value::idl::ConfigValues &_tao_elem)
{
  TAO::Any_Dual_Impl_T<demo::value::idl::ConfigValues>::insert_copy (
      _tao_any,
      demo::value::idl::ConfigValues::_tao_any_destructor,
      demo::value::idl::_tc_ConfigValues,
      _tao_elem
    );
}

// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    demo::value::idl::ConfigValues *_tao_elem)
{
  TAO::Any_Dual_Impl_T<demo::value::idl::ConfigValues>::insert (
      _tao_any,
      demo::value::idl::ConfigValues::_tao_any_destructor,
      demo::value::idl::_tc_ConfigValues,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    demo::value::idl::ConfigValues *&_tao_elem)
{
  return _tao_any >>= const_cast<
      const demo::value::idl::ConfigValues *&> (
      _tao_elem
    );
}

// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const demo::value::idl::ConfigValues *&_tao_elem)
{
  return
    TAO::Any_Dual_Impl_T<demo::value::idl::ConfigValues>::extract (
        _tao_any,
        demo::value::idl::ConfigValues::_tao_any_destructor,
        demo::value::idl::_tc_ConfigValues,
        _tao_elem);
}
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_valuetype/any_op_cs.cpp:45
TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<demo::value::idl::BaseValue>::to_value (
      ::CORBA::ValueBase *&_tao_elem
    ) const
  {
    ::CORBA::add_ref (this->value_);
    _tao_elem = this->value_;
    return true;
  }
}


TAO_END_VERSIONED_NAMESPACE_DECL



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace demo
{

  namespace value
  {

    namespace idl
    {
      // Copying insertion.
      void
      operator<<= (
          ::CORBA::Any &_tao_any,
          BaseValue *_tao_elem
        )
      {
        #ifdef TAO_VALUETYPE_COPYING_ANY_INSERTION_USES_COPY_VALUE
          BaseValue *_tao_copy =
            _tao_elem ?
              BaseValue::_downcast (_tao_elem->_copy_value ())
              : 0;
          _tao_any <<= &_tao_copy;
        #else
          ::CORBA::add_ref (_tao_elem);
          _tao_any <<= &_tao_elem;
        #endif
      }

      // Non-copying insertion.
      void
      operator<<= (
          ::CORBA::Any &_tao_any,
          BaseValue **_tao_elem
        )
      {
        TAO::Any_Impl_T<BaseValue>::insert (
            _tao_any,
            BaseValue::_tao_any_destructor,
            _tc_BaseValue,
            *_tao_elem
          );
      }

      ::CORBA::Boolean
      operator>>= (
          const ::CORBA::Any &_tao_any,
          BaseValue *&_tao_elem
        )
      {
        return
          TAO::Any_Impl_T<BaseValue>::extract (
              _tao_any,
              BaseValue::_tao_any_destructor,
              _tc_BaseValue,
              _tao_elem
            );
      }


    }
  }
}

#else


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    demo::value::idl::BaseValue *_tao_elem
  )
{
  #ifdef TAO_VALUETYPE_COPYING_ANY_INSERTION_USES_COPY_VALUE
    demo::value::idl::BaseValue *_tao_copy =
      _tao_elem ?
        demo::value::idl::BaseValue::_downcast (_tao_elem->_copy_value ())
        : 0;
    _tao_any <<= &_tao_copy;
  #else
    ::CORBA::add_ref (_tao_elem);
    _tao_any <<= &_tao_elem;
  #endif
}

// Non-copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    demo::value::idl::BaseValue **_tao_elem
  )
{
  TAO::Any_Impl_T<demo::value::idl::BaseValue>::insert (
      _tao_any,
      demo::value::idl::BaseValue::_tao_any_destructor,
      demo::value::idl::_tc_BaseValue,
      *_tao_elem
    );
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    demo::value::idl::BaseValue *&_tao_elem
  )
{
  return
    TAO::Any_Impl_T<demo::value::idl::BaseValue>::extract (
        _tao_any,
        demo::value::idl::BaseValue::_tao_any_destructor,
        demo::value::idl::_tc_BaseValue,
        _tao_elem
      );
}


TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_valuetype/any_op_cs.cpp:45
TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<demo::value::idl::TValue>::to_value (
      ::CORBA::ValueBase *&_tao_elem
    ) const
  {
    ::CORBA::add_ref (this->value_);
    _tao_elem = this->value_;
    return true;
  }
}


TAO_END_VERSIONED_NAMESPACE_DECL



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace demo
{

  namespace value
  {

    namespace idl
    {
      // Copying insertion.
      void
      operator<<= (
          ::CORBA::Any &_tao_any,
          TValue *_tao_elem
        )
      {
        #ifdef TAO_VALUETYPE_COPYING_ANY_INSERTION_USES_COPY_VALUE
          TValue *_tao_copy =
            _tao_elem ?
              TValue::_downcast (_tao_elem->_copy_value ())
              : 0;
          _tao_any <<= &_tao_copy;
        #else
          ::CORBA::add_ref (_tao_elem);
          _tao_any <<= &_tao_elem;
        #endif
      }

      // Non-copying insertion.
      void
      operator<<= (
          ::CORBA::Any &_tao_any,
          TValue **_tao_elem
        )
      {
        TAO::Any_Impl_T<TValue>::insert (
            _tao_any,
            TValue::_tao_any_destructor,
            _tc_TValue,
            *_tao_elem
          );
      }

      ::CORBA::Boolean
      operator>>= (
          const ::CORBA::Any &_tao_any,
          TValue *&_tao_elem
        )
      {
        return
          TAO::Any_Impl_T<TValue>::extract (
              _tao_any,
              TValue::_tao_any_destructor,
              _tc_TValue,
              _tao_elem
            );
      }


    }
  }
}

#else


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    demo::value::idl::TValue *_tao_elem
  )
{
  #ifdef TAO_VALUETYPE_COPYING_ANY_INSERTION_USES_COPY_VALUE
    demo::value::idl::TValue *_tao_copy =
      _tao_elem ?
        demo::value::idl::TValue::_downcast (_tao_elem->_copy_value ())
        : 0;
    _tao_any <<= &_tao_copy;
  #else
    ::CORBA::add_ref (_tao_elem);
    _tao_any <<= &_tao_elem;
  #endif
}

// Non-copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    demo::value::idl::TValue **_tao_elem
  )
{
  TAO::Any_Impl_T<demo::value::idl::TValue>::insert (
      _tao_any,
      demo::value::idl::TValue::_tao_any_destructor,
      demo::value::idl::_tc_TValue,
      *_tao_elem
    );
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    demo::value::idl::TValue *&_tao_elem
  )
{
  return
    TAO::Any_Impl_T<demo::value::idl::TValue>::extract (
        _tao_any,
        demo::value::idl::TValue::_tao_any_destructor,
        demo::value::idl::_tc_TValue,
        _tao_elem
      );
}


TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_valuebox/any_op_cs.cpp:46
TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<demo::value::idl::boxedLong>::to_value (
      ::CORBA::ValueBase *&_tao_elem
    ) const
  {
    ::CORBA::add_ref (this->value_);
    _tao_elem = this->value_;
    return true;
  }
}


TAO_END_VERSIONED_NAMESPACE_DECL



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace demo
{

  namespace value
  {

    namespace idl
    {
      // Copying insertion.
      void
      operator<<= (
          ::CORBA::Any &_tao_any,
          boxedLong *_tao_elem)
      {
        ::CORBA::add_ref (_tao_elem);
        _tao_any <<= &_tao_elem;
      }

      // Non-copying insertion.
      void
      operator<<= (
          ::CORBA::Any &_tao_any,
          boxedLong **_tao_elem)
      {
        TAO::Any_Impl_T<boxedLong>::insert (
            _tao_any,
            boxedLong::_tao_any_destructor,
            _tc_boxedLong,
            *_tao_elem);
      }

      ::CORBA::Boolean
      operator>>= (
          const ::CORBA::Any &_tao_any,
          boxedLong *&_tao_elem
        )
      {
        return
          TAO::Any_Impl_T<boxedLong>::extract (
              _tao_any,
              boxedLong::_tao_any_destructor,
              _tc_boxedLong,
              _tao_elem
            );
      }


    }
  }
}

#else


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    demo::value::idl::boxedLong *_tao_elem
  )
{
  ::CORBA::add_ref (_tao_elem);
  _tao_any <<= &_tao_elem;
}

// Non-copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    demo::value::idl::boxedLong **_tao_elem
  )
{
  TAO::Any_Impl_T<demo::value::idl::boxedLong>::insert (
      _tao_any,
      demo::value::idl::boxedLong::_tao_any_destructor,
      demo::value::idl::_tc_boxedLong,
      *_tao_elem
    );
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    demo::value::idl::boxedLong *&_tao_elem
  )
{
  return
    TAO::Any_Impl_T<demo::value::idl::boxedLong>::extract (
        _tao_any,
        demo::value::idl::boxedLong::_tao_any_destructor,
        demo::value::idl::_tc_boxedLong,
        _tao_elem
      );
}


TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_valuebox/any_op_cs.cpp:46
TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<demo::value::idl::boxedString>::to_value (
      ::CORBA::ValueBase *&_tao_elem
    ) const
  {
    ::CORBA::add_ref (this->value_);
    _tao_elem = this->value_;
    return true;
  }
}


TAO_END_VERSIONED_NAMESPACE_DECL



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace demo
{

  namespace value
  {

    namespace idl
    {
      // Copying insertion.
      void
      operator<<= (
          ::CORBA::Any &_tao_any,
          boxedString *_tao_elem)
      {
        ::CORBA::add_ref (_tao_elem);
        _tao_any <<= &_tao_elem;
      }

      // Non-copying insertion.
      void
      operator<<= (
          ::CORBA::Any &_tao_any,
          boxedString **_tao_elem)
      {
        TAO::Any_Impl_T<boxedString>::insert (
            _tao_any,
            boxedString::_tao_any_destructor,
            _tc_boxedString,
            *_tao_elem);
      }

      ::CORBA::Boolean
      operator>>= (
          const ::CORBA::Any &_tao_any,
          boxedString *&_tao_elem
        )
      {
        return
          TAO::Any_Impl_T<boxedString>::extract (
              _tao_any,
              boxedString::_tao_any_destructor,
              _tc_boxedString,
              _tao_elem
            );
      }


    }
  }
}

#else


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    demo::value::idl::boxedString *_tao_elem
  )
{
  ::CORBA::add_ref (_tao_elem);
  _tao_any <<= &_tao_elem;
}

// Non-copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    demo::value::idl::boxedString **_tao_elem
  )
{
  TAO::Any_Impl_T<demo::value::idl::boxedString>::insert (
      _tao_any,
      demo::value::idl::boxedString::_tao_any_destructor,
      demo::value::idl::_tc_boxedString,
      *_tao_elem
    );
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    demo::value::idl::boxedString *&_tao_elem
  )
{
  return
    TAO::Any_Impl_T<demo::value::idl::boxedString>::extract (
        _tao_any,
        demo::value::idl::boxedString::_tao_any_destructor,
        demo::value::idl::_tc_boxedString,
        _tao_elem
      );
}


TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_valuetype/any_op_cs.cpp:45
TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<demo::value::idl::boxedValue>::to_value (
      ::CORBA::ValueBase *&_tao_elem
    ) const
  {
    ::CORBA::add_ref (this->value_);
    _tao_elem = this->value_;
    return true;
  }
}


TAO_END_VERSIONED_NAMESPACE_DECL



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace demo
{

  namespace value
  {

    namespace idl
    {
      // Copying insertion.
      void
      operator<<= (
          ::CORBA::Any &_tao_any,
          boxedValue *_tao_elem
        )
      {
        #ifdef TAO_VALUETYPE_COPYING_ANY_INSERTION_USES_COPY_VALUE
          boxedValue *_tao_copy =
            _tao_elem ?
              boxedValue::_downcast (_tao_elem->_copy_value ())
              : 0;
          _tao_any <<= &_tao_copy;
        #else
          ::CORBA::add_ref (_tao_elem);
          _tao_any <<= &_tao_elem;
        #endif
      }

      // Non-copying insertion.
      void
      operator<<= (
          ::CORBA::Any &_tao_any,
          boxedValue **_tao_elem
        )
      {
        TAO::Any_Impl_T<boxedValue>::insert (
            _tao_any,
            boxedValue::_tao_any_destructor,
            _tc_boxedValue,
            *_tao_elem
          );
      }

      ::CORBA::Boolean
      operator>>= (
          const ::CORBA::Any &_tao_any,
          boxedValue *&_tao_elem
        )
      {
        return
          TAO::Any_Impl_T<boxedValue>::extract (
              _tao_any,
              boxedValue::_tao_any_destructor,
              _tc_boxedValue,
              _tao_elem
            );
      }


    }
  }
}

#else


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    demo::value::idl::boxedValue *_tao_elem
  )
{
  #ifdef TAO_VALUETYPE_COPYING_ANY_INSERTION_USES_COPY_VALUE
    demo::value::idl::boxedValue *_tao_copy =
      _tao_elem ?
        demo::value::idl::boxedValue::_downcast (_tao_elem->_copy_value ())
        : 0;
    _tao_any <<= &_tao_copy;
  #else
    ::CORBA::add_ref (_tao_elem);
    _tao_any <<= &_tao_elem;
  #endif
}

// Non-copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    demo::value::idl::boxedValue **_tao_elem
  )
{
  TAO::Any_Impl_T<demo::value::idl::boxedValue>::insert (
      _tao_any,
      demo::value::idl::boxedValue::_tao_any_destructor,
      demo::value::idl::_tc_boxedValue,
      *_tao_elem
    );
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    demo::value::idl::boxedValue *&_tao_elem
  )
{
  return
    TAO::Any_Impl_T<demo::value::idl::boxedValue>::extract (
        _tao_any,
        demo::value::idl::boxedValue::_tao_any_destructor,
        demo::value::idl::_tc_boxedValue,
        _tao_elem
      );
}


TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_valuetype/any_op_cs.cpp:45
TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<demo::value::idl::Node>::to_value (
      ::CORBA::ValueBase *&_tao_elem
    ) const
  {
    ::CORBA::add_ref (this->value_);
    _tao_elem = this->value_;
    return true;
  }
}


TAO_END_VERSIONED_NAMESPACE_DECL



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace demo
{

  namespace value
  {

    namespace idl
    {
      // Copying insertion.
      void
      operator<<= (
          ::CORBA::Any &_tao_any,
          Node *_tao_elem
        )
      {
        #ifdef TAO_VALUETYPE_COPYING_ANY_INSERTION_USES_COPY_VALUE
          Node *_tao_copy =
            _tao_elem ?
              Node::_downcast (_tao_elem->_copy_value ())
              : 0;
          _tao_any <<= &_tao_copy;
        #else
          ::CORBA::add_ref (_tao_elem);
          _tao_any <<= &_tao_elem;
        #endif
      }

      // Non-copying insertion.
      void
      operator<<= (
          ::CORBA::Any &_tao_any,
          Node **_tao_elem
        )
      {
        TAO::Any_Impl_T<Node>::insert (
            _tao_any,
            Node::_tao_any_destructor,
            _tc_Node,
            *_tao_elem
          );
      }

      ::CORBA::Boolean
      operator>>= (
          const ::CORBA::Any &_tao_any,
          Node *&_tao_elem
        )
      {
        return
          TAO::Any_Impl_T<Node>::extract (
              _tao_any,
              Node::_tao_any_destructor,
              _tc_Node,
              _tao_elem
            );
      }


    }
  }
}

#else


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    demo::value::idl::Node *_tao_elem
  )
{
  #ifdef TAO_VALUETYPE_COPYING_ANY_INSERTION_USES_COPY_VALUE
    demo::value::idl::Node *_tao_copy =
      _tao_elem ?
        demo::value::idl::Node::_downcast (_tao_elem->_copy_value ())
        : 0;
    _tao_any <<= &_tao_copy;
  #else
    ::CORBA::add_ref (_tao_elem);
    _tao_any <<= &_tao_elem;
  #endif
}

// Non-copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    demo::value::idl::Node **_tao_elem
  )
{
  TAO::Any_Impl_T<demo::value::idl::Node>::insert (
      _tao_any,
      demo::value::idl::Node::_tao_any_destructor,
      demo::value::idl::_tc_Node,
      *_tao_elem
    );
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    demo::value::idl::Node *&_tao_elem
  )
{
  return
    TAO::Any_Impl_T<demo::value::idl::Node>::extract (
        _tao_any,
        demo::value::idl::Node::_tao_any_destructor,
        demo::value::idl::_tc_Node,
        _tao_elem
      );
}


TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_interface/any_op_cs.cpp:38
TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<demo::value::idl::ValueServer>::to_object (
      ::CORBA::Object_ptr &_tao_elem) const
  {
    _tao_elem = ::CORBA::Object::_duplicate (this->value_);
    return true;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace demo
{

  namespace value
  {

    namespace idl
    {


      /// Copying insertion.
      void
      operator<<= (
          ::CORBA::Any &_tao_any,
          ValueServer_ptr _tao_elem)
      {
        ValueServer_ptr _tao_objptr =
          ValueServer::_duplicate (_tao_elem);
        _tao_any <<= &_tao_objptr;
      }

      /// Non-copying insertion.
      void
      operator<<= (
          ::CORBA::Any &_tao_any,
          ValueServer_ptr *_tao_elem)
      {
        TAO::Any_Impl_T<ValueServer>::insert (
            _tao_any,
            ValueServer::_tao_any_destructor,
            _tc_ValueServer,
            *_tao_elem);
      }

      ::CORBA::Boolean
      operator>>= (
          const ::CORBA::Any &_tao_any,
          ValueServer_ptr &_tao_elem)
      {
        return
          TAO::Any_Impl_T<ValueServer>::extract (
              _tao_any,
              ValueServer::_tao_any_destructor,
              _tc_ValueServer,
              _tao_elem);
      }
    }
  }
}

#else

TAO_BEGIN_VERSIONED_NAMESPACE_DECL



/// Copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    demo::value::idl::ValueServer_ptr _tao_elem)
{
  demo::value::idl::ValueServer_ptr _tao_objptr =
    demo::value::idl::ValueServer::_duplicate (_tao_elem);
  _tao_any <<= &_tao_objptr;
}

/// Non-copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    demo::value::idl::ValueServer_ptr *_tao_elem)
{
  TAO::Any_Impl_T<demo::value::idl::ValueServer>::insert (
      _tao_any,
      demo::value::idl::ValueServer::_tao_any_destructor,
      demo::value::idl::_tc_ValueServer,
      *_tao_elem);
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    demo::value::idl::ValueServer_ptr &_tao_elem)
{
  return
    TAO::Any_Impl_T<demo::value::idl::ValueServer>::extract (
        _tao_any,
        demo::value::idl::ValueServer::_tao_any_destructor,
        demo::value::idl::_tc_ValueServer,
        _tao_elem);
}

TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_valuetype.cpp:512

void
CORBA::add_ref (demo::value::idl::ConfigValue * vt)
{
  if (vt != 0)
    {
      vt->_add_ref ();
    }
}

void
CORBA::remove_ref (demo::value::idl::ConfigValue * vt)
{
  if (vt != 0)
    {
      vt->_remove_ref ();
    }
}

// TAO_IDL - Generated from
// be/be_visitor_valuetype/cdr_op_cs.cpp:60


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean
operator<< (
    TAO_OutputCDR &strm,
    const demo::value::idl::ConfigValue *_tao_valuetype
  )
{
  return
    ::CORBA::ValueBase::_tao_marshal (
        strm,
        _tao_valuetype,
        reinterpret_cast<ptrdiff_t> (&demo::value::idl::ConfigValue::_downcast)
      );
}

::CORBA::Boolean
operator>> (
    TAO_InputCDR &strm,
    demo::value::idl::ConfigValue *&_tao_valuetype
  )
{
  return demo::value::idl::ConfigValue::_tao_unmarshal (strm, _tao_valuetype);
}


TAO_END_VERSIONED_NAMESPACE_DECL

// TAO_IDL - Generated from
// be/be_visitor_valuetype/marshal_cs.cpp:33

::CORBA::Boolean
OBV_demo::value::idl::ConfigValue::_tao_marshal_state (TAO_OutputCDR &strm, TAO_ChunkInfo&ci) const
{
  if (! ci.start_chunk (strm))
    return false;

  CORBA::Boolean const ret =
      (strm << _pd_name.in ()) &&
      (strm << _pd_value);
  if ( ! ret)
    return false;

  if (! ci.end_chunk (strm))
    return false;

  return true;
}

::CORBA::Boolean
OBV_demo::value::idl::ConfigValue::_tao_unmarshal_state (TAO_InputCDR &strm, TAO_ChunkInfo&ci)
{
  if (!ci.handle_chunking (strm))
    return false;

  CORBA::Boolean const ret =
      (strm >> _pd_name.out ()) &&
      (strm >> _pd_value);
  if (!ret)
    return false;

  if (this->require_truncation_)
    return ci.skip_chunks (strm);

  else
    return ci.handle_chunking (strm);


}

void
OBV_demo::value::idl::ConfigValue::truncation_hook (void)
{
  this->require_truncation_ = true;
}



// TAO_IDL - Generated from
// be/be_visitor_sequence/cdr_op_cs.cpp:93
#if !defined _TAO_CDR_OP_demo_value_idl_ConfigValues_CPP_
#define _TAO_CDR_OP_demo_value_idl_ConfigValues_CPP_

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const demo::value::idl::ConfigValues &_tao_sequence)
{
  return TAO::marshal_sequence(strm, _tao_sequence);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    demo::value::idl::ConfigValues &_tao_sequence)
{
  return TAO::demarshal_sequence(strm, _tao_sequence);
}


TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_CDR_OP_demo_value_idl_ConfigValues_CPP_ */

// TAO_IDL - Generated from
// be/be_valuetype.cpp:512

void
CORBA::add_ref (demo::value::idl::BaseValue * vt)
{
  if (vt != 0)
    {
      vt->_add_ref ();
    }
}

void
CORBA::remove_ref (demo::value::idl::BaseValue * vt)
{
  if (vt != 0)
    {
      vt->_remove_ref ();
    }
}

// TAO_IDL - Generated from
// be/be_visitor_valuetype/cdr_op_cs.cpp:60


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean
operator<< (
    TAO_OutputCDR &strm,
    const demo::value::idl::BaseValue *_tao_valuetype
  )
{
  return
    ::CORBA::ValueBase::_tao_marshal (
        strm,
        _tao_valuetype,
        reinterpret_cast<ptrdiff_t> (&demo::value::idl::BaseValue::_downcast)
      );
}

::CORBA::Boolean
operator>> (
    TAO_InputCDR &strm,
    demo::value::idl::BaseValue *&_tao_valuetype
  )
{
  return demo::value::idl::BaseValue::_tao_unmarshal (strm, _tao_valuetype);
}


TAO_END_VERSIONED_NAMESPACE_DECL

// TAO_IDL - Generated from
// be/be_visitor_valuetype/marshal_cs.cpp:33

::CORBA::Boolean
OBV_demo::value::idl::BaseValue::_tao_marshal_state (TAO_OutputCDR &strm, TAO_ChunkInfo&ci) const
{
  if (! ci.start_chunk (strm))
    return false;

  CORBA::Boolean const ret =
      (strm << _pd_basic_data);
  if ( ! ret)
    return false;

  if (! ci.end_chunk (strm))
    return false;

  return true;
}

::CORBA::Boolean
OBV_demo::value::idl::BaseValue::_tao_unmarshal_state (TAO_InputCDR &strm, TAO_ChunkInfo&ci)
{
  if (!ci.handle_chunking (strm))
    return false;

  CORBA::Boolean const ret =
      (strm >> _pd_basic_data);
  if (!ret)
    return false;

  if (this->require_truncation_)
    return ci.skip_chunks (strm);

  else
    return ci.handle_chunking (strm);


}

void
OBV_demo::value::idl::BaseValue::truncation_hook (void)
{
  this->require_truncation_ = true;
}



// TAO_IDL - Generated from
// be/be_valuetype.cpp:512

void
CORBA::add_ref (demo::value::idl::TValue * vt)
{
  if (vt != 0)
    {
      vt->_add_ref ();
    }
}

void
CORBA::remove_ref (demo::value::idl::TValue * vt)
{
  if (vt != 0)
    {
      vt->_remove_ref ();
    }
}

// TAO_IDL - Generated from
// be/be_visitor_valuetype/cdr_op_cs.cpp:60


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean
operator<< (
    TAO_OutputCDR &strm,
    const demo::value::idl::TValue *_tao_valuetype
  )
{
  return
    ::CORBA::ValueBase::_tao_marshal (
        strm,
        _tao_valuetype,
        reinterpret_cast<ptrdiff_t> (&demo::value::idl::TValue::_downcast)
      );
}

::CORBA::Boolean
operator>> (
    TAO_InputCDR &strm,
    demo::value::idl::TValue *&_tao_valuetype
  )
{
  return demo::value::idl::TValue::_tao_unmarshal (strm, _tao_valuetype);
}


TAO_END_VERSIONED_NAMESPACE_DECL

// TAO_IDL - Generated from
// be/be_visitor_valuetype/marshal_cs.cpp:33

::CORBA::Boolean
OBV_demo::value::idl::TValue::_tao_marshal_state (TAO_OutputCDR &strm, TAO_ChunkInfo&ci) const
{
  if (! ci.start_chunk (strm))
    return false;

  if (! this->_tao_marshal__demo_value_idl_BaseValue (strm, ci))
    {
      return false;
    }

  if (! ci.start_chunk (strm))
    return false;

  CORBA::Boolean const ret =
      (strm << _pd_data);
  if ( ! ret)
    return false;

  if (! ci.end_chunk (strm))
    return false;

  if (! ci.end_chunk (strm))
    return false;

  return true;
}

::CORBA::Boolean
OBV_demo::value::idl::TValue::_tao_unmarshal_state (TAO_InputCDR &strm, TAO_ChunkInfo&ci)
{
  if (!ci.handle_chunking (strm))
    return false;

  if (!this->_tao_unmarshal__demo_value_idl_BaseValue (strm, ci))
    {
      return false;
    }

  if (!ci.handle_chunking (strm))
    return false;

  CORBA::Boolean const ret =
      (strm >> _pd_data);
  if (!ret)
    return false;

  if (this->require_truncation_)
    return ci.skip_chunks (strm);

  else
    return ci.handle_chunking (strm);


}

void
OBV_demo::value::idl::TValue::truncation_hook (void)
{
  this->require_truncation_ = true;
}



// TAO_IDL - Generated from
// be/be_visitor_valuebox/cdr_op_cs.cpp:41


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean
operator<< (
    TAO_OutputCDR &strm,
    const demo::value::idl::boxedLong *_tao_valuebox
  )
{
  return
    ::CORBA::ValueBase::_tao_marshal (
        strm,
        _tao_valuebox,
        reinterpret_cast<ptrdiff_t> (&demo::value::idl::boxedLong::_downcast)
      );
}

::CORBA::Boolean
operator>> (
    TAO_InputCDR &strm,
    demo::value::idl::boxedLong *&_tao_valuebox
  )
{
  return demo::value::idl::boxedLong::_tao_unmarshal (strm, _tao_valuebox);
}


TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_valuebox/cdr_op_cs.cpp:41


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean
operator<< (
    TAO_OutputCDR &strm,
    const demo::value::idl::boxedString *_tao_valuebox
  )
{
  return
    ::CORBA::ValueBase::_tao_marshal (
        strm,
        _tao_valuebox,
        reinterpret_cast<ptrdiff_t> (&demo::value::idl::boxedString::_downcast)
      );
}

::CORBA::Boolean
operator>> (
    TAO_InputCDR &strm,
    demo::value::idl::boxedString *&_tao_valuebox
  )
{
  return demo::value::idl::boxedString::_tao_unmarshal (strm, _tao_valuebox);
}


TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_valuetype.cpp:512

void
CORBA::add_ref (demo::value::idl::boxedValue * vt)
{
  if (vt != 0)
    {
      vt->_add_ref ();
    }
}

void
CORBA::remove_ref (demo::value::idl::boxedValue * vt)
{
  if (vt != 0)
    {
      vt->_remove_ref ();
    }
}

// TAO_IDL - Generated from
// be/be_visitor_valuetype/cdr_op_cs.cpp:60


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean
operator<< (
    TAO_OutputCDR &strm,
    const demo::value::idl::boxedValue *_tao_valuetype
  )
{
  return
    ::CORBA::ValueBase::_tao_marshal (
        strm,
        _tao_valuetype,
        reinterpret_cast<ptrdiff_t> (&demo::value::idl::boxedValue::_downcast)
      );
}

::CORBA::Boolean
operator>> (
    TAO_InputCDR &strm,
    demo::value::idl::boxedValue *&_tao_valuetype
  )
{
  return demo::value::idl::boxedValue::_tao_unmarshal (strm, _tao_valuetype);
}


TAO_END_VERSIONED_NAMESPACE_DECL

// TAO_IDL - Generated from
// be/be_visitor_valuetype/marshal_cs.cpp:33

::CORBA::Boolean
OBV_demo::value::idl::boxedValue::_tao_marshal_state (TAO_OutputCDR &strm, TAO_ChunkInfo&ci) const
{
  if (! ci.start_chunk (strm))
    return false;

  CORBA::Boolean const ret =
      (strm << _pd_b1.in ()) &&
      (strm << _pd_b2.in ());
  if ( ! ret)
    return false;

  if (! ci.end_chunk (strm))
    return false;

  return true;
}

::CORBA::Boolean
OBV_demo::value::idl::boxedValue::_tao_unmarshal_state (TAO_InputCDR &strm, TAO_ChunkInfo&ci)
{
  if (!ci.handle_chunking (strm))
    return false;

  CORBA::Boolean const ret =
      (strm >> _pd_b1.out ()) &&
      (strm >> _pd_b2.out ());
  if (!ret)
    return false;

  if (this->require_truncation_)
    return ci.skip_chunks (strm);

  else
    return ci.handle_chunking (strm);


}

void
OBV_demo::value::idl::boxedValue::truncation_hook (void)
{
  this->require_truncation_ = true;
}



// TAO_IDL - Generated from
// be/be_valuetype.cpp:512

void
CORBA::add_ref (demo::value::idl::Node * vt)
{
  if (vt != 0)
    {
      vt->_add_ref ();
    }
}

void
CORBA::remove_ref (demo::value::idl::Node * vt)
{
  if (vt != 0)
    {
      vt->_remove_ref ();
    }
}

// TAO_IDL - Generated from
// be/be_visitor_valuetype/cdr_op_cs.cpp:60


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean
operator<< (
    TAO_OutputCDR &strm,
    const demo::value::idl::Node *_tao_valuetype
  )
{
  return
    ::CORBA::ValueBase::_tao_marshal (
        strm,
        _tao_valuetype,
        reinterpret_cast<ptrdiff_t> (&demo::value::idl::Node::_downcast)
      );
}

::CORBA::Boolean
operator>> (
    TAO_InputCDR &strm,
    demo::value::idl::Node *&_tao_valuetype
  )
{
  return demo::value::idl::Node::_tao_unmarshal (strm, _tao_valuetype);
}


TAO_END_VERSIONED_NAMESPACE_DECL

// TAO_IDL - Generated from
// be/be_visitor_valuetype/marshal_cs.cpp:33

::CORBA::Boolean
OBV_demo::value::idl::Node::_tao_marshal_state (TAO_OutputCDR &strm, TAO_ChunkInfo&ci) const
{
  if (! ci.start_chunk (strm))
    return false;

  CORBA::Boolean const ret =
      (strm << _pd_id) &&
      (strm << _pd_next.in ());
  if ( ! ret)
    return false;

  if (! ci.end_chunk (strm))
    return false;

  return true;
}

::CORBA::Boolean
OBV_demo::value::idl::Node::_tao_unmarshal_state (TAO_InputCDR &strm, TAO_ChunkInfo&ci)
{
  if (!ci.handle_chunking (strm))
    return false;

  CORBA::Boolean const ret =
      (strm >> _pd_id) &&
      (strm >> _pd_next.out ());
  if (!ret)
    return false;

  if (this->require_truncation_)
    return ci.skip_chunks (strm);

  else
    return ci.handle_chunking (strm);


}

void
OBV_demo::value::idl::Node::truncation_hook (void)
{
  this->require_truncation_ = true;
}



// TAO_IDL - Generated from
// be/be_visitor_interface/cdr_op_cs.cpp:51

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const demo::value::idl::ValueServer_ptr _tao_objref)
{
  ::CORBA::Object_ptr _tao_corba_obj = _tao_objref;
  return (strm << _tao_corba_obj);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    demo::value::idl::ValueServer_ptr &_tao_objref)
{
  ::CORBA::Object_var obj;

  if (!(strm >> obj.inout ()))
    {
      return false;
    }

  typedef ::demo::value::idl::ValueServer RHS_SCOPED_NAME;

  // Narrow to the right type.
  _tao_objref =
    TAO::Narrow_Utils<RHS_SCOPED_NAME>::unchecked_narrow (obj.in ());

  return true;
}

TAO_END_VERSIONED_NAMESPACE_DECL



