// -*- C++ -*-
/**
 * Code generated by the The ACE ORB (TAO) IDL Compiler v2.4.1
 * TAO and the TAO IDL Compiler have been developed by:
 *       Center for Distributed Object Computing
 *       Washington University
 *       St. Louis, MO
 *       USA
 *       http://www.cs.wustl.edu/~schmidt/doc-center.html
 * and
 *       Distributed Object Computing Laboratory
 *       University of California at Irvine
 *       Irvine, CA
 *       USA
 * and
 *       Institute for Software Integrated Systems
 *       Vanderbilt University
 *       Nashville, TN
 *       USA
 *       http://www.isis.vanderbilt.edu/
 *
 * Information about TAO is available at:
 *     http://www.dre.vanderbilt.edu/~schmidt/TAO.html
 **/

// TAO_IDL - Generated from
// be/be_codegen.cpp:149

#ifndef _TAO_IDL_FACTORYC_DCYSYU_H_
#define _TAO_IDL_FACTORYC_DCYSYU_H_

#include /**/ "ace/pre.h"


#include /**/ "ace/config-all.h"

#if !defined (ACE_LACKS_PRAGMA_ONCE)
# pragma once
#endif /* ACE_LACKS_PRAGMA_ONCE */


#include "tao/AnyTypeCode/AnyTypeCode_methods.h"
#include "tao/AnyTypeCode/Any.h"
#include "tao/Valuetype/ValueBase.h"
#include "tao/Valuetype/Valuetype_Adapter_Factory_Impl.h"
#include "tao/Valuetype/ValueFactory.h"
#include "tao/ORB.h"
#include "tao/SystemException.h"
#include "tao/Basic_Types.h"
#include "tao/ORB_Constants.h"
#include "tao/Object.h"
#include "tao/Valuetype/Value_VarOut_T.h"
#include "tao/Objref_VarOut_T.h"
#include "tao/VarOut_T.h"
#include "tao/Arg_Traits_T.h"
#include "tao/Basic_Arguments.h"
#include "tao/Special_Basic_Arguments.h"
#include "tao/Any_Insert_Policy_T.h"
#include "tao/Fixed_Size_Argument_T.h"
#include "tao/Var_Size_Argument_T.h"
#include "tao/Object_Argument_T.h"
#include /**/ "tao/Version.h"
#include /**/ "tao/Versioned_Namespace.h"

#if TAO_MAJOR_VERSION != 2 || TAO_MINOR_VERSION != 4 || TAO_MICRO_VERSION != 1
#error This file should be regenerated with TAO_IDL
#endif

#if defined (TAO_EXPORT_MACRO)
#undef TAO_EXPORT_MACRO
#endif
#define TAO_EXPORT_MACRO 

// TAO_IDL - Generated from
// be/be_visitor_root/root_ch.cpp:157
TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<typename T> class Narrow_Utils;
}
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_module/module_ch.cpp:35

namespace OBV_FactoryTest
{

  // TAO_IDL - Generated from
  // be/be_valuetype.cpp:564

  

#if !defined (_OBV_FACTORYTEST_BASEVALUE__VAR_OUT_CH_)
#define _OBV_FACTORYTEST_BASEVALUE__VAR_OUT_CH_

  class BaseValue;
  typedef
    TAO_Value_Var_T<
        BaseValue
      >
    BaseValue_var;
  
  typedef
    TAO_Value_Out_T<
        BaseValue
      >
    BaseValue_out;

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // be/be_visitor_valuetype/valuetype_ch.cpp:50

  class  BaseValue
    : public virtual ::CORBA::ValueBase
  {
  public:

    // TAO_IDL - Generated from
    // be/be_type.cpp:304

    typedef BaseValue * _ptr_type;
    typedef BaseValue_var _var_type;
    typedef BaseValue_out _out_type;

    static void _tao_any_destructor (void *);

    static BaseValue* _downcast ( ::CORBA::ValueBase *v);
    
    /// TAO extensions or internals
    static ::CORBA::Boolean _tao_unmarshal (
        TAO_InputCDR &strm,
        BaseValue *&new_object);
    
    virtual const char* _tao_obv_repository_id (void) const;

    virtual void _tao_obv_truncatable_repo_ids (Repository_Id_List &) const;

    static const char* _tao_obv_static_repository_id (void);

    virtual ::CORBA::TypeCode_ptr _tao_type (void) const;
  
  public:

    // TAO_IDL - Generated from
    // be/be_type.cpp:258

    struct BV_Data;

    typedef
      ::TAO_Fixed_Var_T<
          BV_Data
        >
      BV_Data_var;

    typedef
      BV_Data &
      BV_Data_out;

    // TAO_IDL - Generated from
    // be/be_visitor_structure/structure_ch.cpp:48

    struct  BV_Data
    {

      // TAO_IDL - Generated from
      // be/be_type.cpp:304

      
      typedef BV_Data_var _var_type;
      typedef BV_Data_out _out_type;

      static void _tao_any_destructor (void *);
      
      ::CORBA::ULong value;
    };

    // TAO_IDL - Generated from
    // be/be_visitor_typecode/typecode_decl.cpp:34

    static ::CORBA::TypeCode_ptr const _tc_BV_Data;
  
  public:

    // TAO_IDL - Generated from
    // be/be_visitor_valuetype/field_ch.cpp:459

    virtual void some_data (const ::CORBA::ULong) = 0;
    virtual ::CORBA::ULong some_data (void) const = 0;

    // TAO_IDL - Generated from
    // be/be_visitor_valuetype/valuetype_ch.cpp:238
  
  protected:
    BaseValue (void);
    virtual ~BaseValue (void);

    virtual ::CORBA::Boolean _tao_marshal_v (TAO_OutputCDR &) const;
    virtual ::CORBA::Boolean _tao_unmarshal_v (TAO_InputCDR &);
    virtual ::CORBA::Boolean _tao_match_formal_type (ptrdiff_t ) const;
    
  private:
    BaseValue (const BaseValue &);
    void operator= (const BaseValue &);
    
  protected:
    virtual ::CORBA::Boolean
    _tao_marshal__OBV_FactoryTest_BaseValue (TAO_OutputCDR &, TAO_ChunkInfo &) const = 0;

    virtual ::CORBA::Boolean
    _tao_unmarshal__OBV_FactoryTest_BaseValue (TAO_InputCDR &, TAO_ChunkInfo &) = 0;
  };

  // TAO_IDL - Generated from
  // be/be_visitor_valuetype/valuetype_init_ch.cpp:57

  class  BaseValue_init
    : public virtual ::CORBA::ValueFactoryBase
  {
  public:
    BaseValue_init (void);

    static BaseValue_init* _downcast ( ::CORBA::ValueFactoryBase *);

    virtual ::CORBA::ValueBase *
    create_for_unmarshal (void);

    // TAO-specific extensions
  public:
    virtual const char* tao_repository_id (void);
  
  protected:
    virtual ~BaseValue_init (void);
  };

  // TAO_IDL - Generated from
  // be/be_visitor_typecode/typecode_decl.cpp:34

  extern  ::CORBA::TypeCode_ptr const _tc_BaseValue;

  // TAO_IDL - Generated from
  // be/be_valuetype.cpp:564

  

#if !defined (_OBV_FACTORYTEST_VALUE1__VAR_OUT_CH_)
#define _OBV_FACTORYTEST_VALUE1__VAR_OUT_CH_

  class Value1;
  typedef
    TAO_Value_Var_T<
        Value1
      >
    Value1_var;
  
  typedef
    TAO_Value_Out_T<
        Value1
      >
    Value1_out;

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // be/be_visitor_valuetype/valuetype_ch.cpp:50

  class  Value1
    : public virtual BaseValue
  {
  public:

    // TAO_IDL - Generated from
    // be/be_type.cpp:304

    typedef Value1 * _ptr_type;
    typedef Value1_var _var_type;
    typedef Value1_out _out_type;

    static void _tao_any_destructor (void *);

    static Value1* _downcast ( ::CORBA::ValueBase *v);
    
    /// TAO extensions or internals
    static ::CORBA::Boolean _tao_unmarshal (
        TAO_InputCDR &strm,
        Value1 *&new_object);
    
    virtual const char* _tao_obv_repository_id (void) const;

    virtual void _tao_obv_truncatable_repo_ids (Repository_Id_List &) const;

    static const char* _tao_obv_static_repository_id (void);

    virtual ::CORBA::TypeCode_ptr _tao_type (void) const;
  
  public:

    // TAO_IDL - Generated from
    // be/be_visitor_valuetype/field_ch.cpp:459

    virtual void id (const ::CORBA::ULong) = 0;
    virtual ::CORBA::ULong id (void) const = 0;

    // TAO_IDL - Generated from
    // be/be_visitor_valuetype/valuetype_ch.cpp:238
  
  protected:
    Value1 (void);
    virtual ~Value1 (void);

    virtual ::CORBA::Boolean _tao_marshal_v (TAO_OutputCDR &) const;
    virtual ::CORBA::Boolean _tao_unmarshal_v (TAO_InputCDR &);
    virtual ::CORBA::Boolean _tao_match_formal_type (ptrdiff_t ) const;
    
  private:
    Value1 (const Value1 &);
    void operator= (const Value1 &);
    
  protected:
    virtual ::CORBA::Boolean
    _tao_marshal__OBV_FactoryTest_Value1 (TAO_OutputCDR &, TAO_ChunkInfo &) const = 0;

    virtual ::CORBA::Boolean
    _tao_unmarshal__OBV_FactoryTest_Value1 (TAO_InputCDR &, TAO_ChunkInfo &) = 0;
  };

  // TAO_IDL - Generated from
  // be/be_visitor_valuetype/valuetype_init_ch.cpp:57

  class  Value1_init
    : public virtual ::CORBA::ValueFactoryBase
  {
  public:
    Value1_init (void);

    static Value1_init* _downcast ( ::CORBA::ValueFactoryBase *);

    virtual ::CORBA::ValueBase *
    create_for_unmarshal (void);

    // TAO-specific extensions
  public:
    virtual const char* tao_repository_id (void);
  
  protected:
    virtual ~Value1_init (void);
  };

  // TAO_IDL - Generated from
  // be/be_visitor_typecode/typecode_decl.cpp:34

  extern  ::CORBA::TypeCode_ptr const _tc_Value1;

  // TAO_IDL - Generated from
  // be/be_valuetype.cpp:564

  

#if !defined (_OBV_FACTORYTEST_VALUE2__VAR_OUT_CH_)
#define _OBV_FACTORYTEST_VALUE2__VAR_OUT_CH_

  class Value2;
  typedef
    TAO_Value_Var_T<
        Value2
      >
    Value2_var;
  
  typedef
    TAO_Value_Out_T<
        Value2
      >
    Value2_out;

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // be/be_visitor_valuetype/valuetype_ch.cpp:50

  class  Value2
    : public virtual BaseValue
  {
  public:

    // TAO_IDL - Generated from
    // be/be_type.cpp:304

    typedef Value2 * _ptr_type;
    typedef Value2_var _var_type;
    typedef Value2_out _out_type;

    static void _tao_any_destructor (void *);

    static Value2* _downcast ( ::CORBA::ValueBase *v);
    
    /// TAO extensions or internals
    static ::CORBA::Boolean _tao_unmarshal (
        TAO_InputCDR &strm,
        Value2 *&new_object);
    
    virtual const char* _tao_obv_repository_id (void) const;

    virtual void _tao_obv_truncatable_repo_ids (Repository_Id_List &) const;

    static const char* _tao_obv_static_repository_id (void);

    virtual ::CORBA::TypeCode_ptr _tao_type (void) const;
  
  public:

    // TAO_IDL - Generated from
    // be/be_visitor_valuetype/field_ch.cpp:459

    virtual void id (const ::CORBA::ULong) = 0;
    virtual ::CORBA::ULong id (void) const = 0;
  
  public:

    // TAO_IDL - Generated from
    // be/be_visitor_valuetype/field_ch.cpp:674

    virtual void data (const OBV_FactoryTest::BaseValue::BV_Data &) = 0;
    virtual const OBV_FactoryTest::BaseValue::BV_Data &data (void) const = 0;
    virtual OBV_FactoryTest::BaseValue::BV_Data &data (void) = 0;
  
  public:
  
  public:

    // TAO_IDL - Generated from
    // be/be_visitor_valuetype/valuetype_ch.cpp:238
  
  protected:
    Value2 (void);
    virtual ~Value2 (void);

    virtual ::CORBA::Boolean _tao_marshal_v (TAO_OutputCDR &) const;
    virtual ::CORBA::Boolean _tao_unmarshal_v (TAO_InputCDR &);
    virtual ::CORBA::Boolean _tao_match_formal_type (ptrdiff_t ) const;
    
  private:
    Value2 (const Value2 &);
    void operator= (const Value2 &);
    
  protected:
    virtual ::CORBA::Boolean
    _tao_marshal__OBV_FactoryTest_Value2 (TAO_OutputCDR &, TAO_ChunkInfo &) const = 0;

    virtual ::CORBA::Boolean
    _tao_unmarshal__OBV_FactoryTest_Value2 (TAO_InputCDR &, TAO_ChunkInfo &) = 0;
  };

  // TAO_IDL - Generated from
  // be/be_visitor_valuetype/valuetype_init_ch.cpp:57

  class  Value2_init
    : public virtual ::CORBA::ValueFactoryBase
  {
  public:

    virtual Value2* create_default (
      ::CORBA::ULong id) = 0;

    virtual Value2* create (
      ::CORBA::ULong id,
      const ::OBV_FactoryTest::BaseValue::BV_Data & data) = 0;

    static Value2_init* _downcast ( ::CORBA::ValueFactoryBase *);

    // TAO-specific extensions
  public:
    virtual const char* tao_repository_id (void);
  
  protected:
    Value2_init (void);
  
  protected:
    virtual ~Value2_init (void);
  };

  // TAO_IDL - Generated from
  // be/be_visitor_typecode/typecode_decl.cpp:34

  extern  ::CORBA::TypeCode_ptr const _tc_Value2;

  // TAO_IDL - Generated from
  // be/be_interface.cpp:748

#if !defined (_OBV_FACTORYTEST_TEST__VAR_OUT_CH_)
#define _OBV_FACTORYTEST_TEST__VAR_OUT_CH_

  class Test;
  typedef Test *Test_ptr;

  typedef
    TAO_Objref_Var_T<
        Test
      >
    Test_var;
  
  typedef
    TAO_Objref_Out_T<
        Test
      >
    Test_out;

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // be/be_visitor_interface/interface_ch.cpp:40

  class  Test
    : public virtual ::CORBA::Object
  {
  public:
    friend class TAO::Narrow_Utils<Test>;

    // TAO_IDL - Generated from
    // be/be_type.cpp:304

    typedef Test_ptr _ptr_type;
    typedef Test_var _var_type;
    typedef Test_out _out_type;

    static void _tao_any_destructor (void *);

    // The static operations.
    static Test_ptr _duplicate (Test_ptr obj);

    static void _tao_release (Test_ptr obj);

    static Test_ptr _narrow (::CORBA::Object_ptr obj);
    static Test_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
    static Test_ptr _nil (void);

    virtual ::OBV_FactoryTest::BaseValue * get_base_value (
      void);

    virtual ::OBV_FactoryTest::Value1 * get_value1 (
      void);

    virtual ::OBV_FactoryTest::Value2 * get_value2 (
      void);

    virtual void shutdown (
      void);

    // TAO_IDL - Generated from
    // be/be_visitor_interface/interface_ch.cpp:137

    virtual ::CORBA::Boolean _is_a (const char *type_id);
    virtual const char* _interface_repository_id (void) const;
    virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);
  
  protected:
    // Concrete interface only.
    Test (void);

    // Concrete non-local interface only.
    Test (
        ::IOP::IOR *ior,
        TAO_ORB_Core *orb_core);
    
    // Non-local interface only.
    Test (
        TAO_Stub *objref,
        ::CORBA::Boolean _tao_collocated = false,
        TAO_Abstract_ServantBase *servant = 0,
        TAO_ORB_Core *orb_core = 0);

    virtual ~Test (void);
  
  private:
    // Private and unimplemented for concrete interfaces.
    Test (const Test &);

    void operator= (const Test &);
  };

  // TAO_IDL - Generated from
  // be/be_visitor_typecode/typecode_decl.cpp:34

  extern  ::CORBA::TypeCode_ptr const _tc_Test;

// TAO_IDL - Generated from
// be/be_visitor_module/module_ch.cpp:64

} // module OBV_FactoryTest

// TAO_IDL - Generated from
// be/be_visitor_arg_traits.cpp:66

TAO_BEGIN_VERSIONED_NAMESPACE_DECL


// Arg traits specializations.
namespace TAO
{

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:306

#if !defined (_OBV_FACTORYTEST_BASEVALUE__ARG_TRAITS_)
#define _OBV_FACTORYTEST_BASEVALUE__ARG_TRAITS_

  template<>
  class Arg_Traits< ::OBV_FactoryTest::BaseValue>
    : public
        Object_Arg_Traits_T<
            ::OBV_FactoryTest::BaseValue *,
            ::OBV_FactoryTest::BaseValue_var,
            ::OBV_FactoryTest::BaseValue_out,
            TAO::Value_Traits<OBV_FactoryTest::BaseValue>,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:945

  template<>
  class Arg_Traits< ::OBV_FactoryTest::BaseValue::BV_Data>
    : public
        Fixed_Size_Arg_Traits_T<
            ::OBV_FactoryTest::BaseValue::BV_Data,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:306

#if !defined (_OBV_FACTORYTEST_VALUE1__ARG_TRAITS_)
#define _OBV_FACTORYTEST_VALUE1__ARG_TRAITS_

  template<>
  class Arg_Traits< ::OBV_FactoryTest::Value1>
    : public
        Object_Arg_Traits_T<
            ::OBV_FactoryTest::Value1 *,
            ::OBV_FactoryTest::Value1_var,
            ::OBV_FactoryTest::Value1_out,
            TAO::Value_Traits<OBV_FactoryTest::Value1>,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:306

#if !defined (_OBV_FACTORYTEST_VALUE2__ARG_TRAITS_)
#define _OBV_FACTORYTEST_VALUE2__ARG_TRAITS_

  template<>
  class Arg_Traits< ::OBV_FactoryTest::Value2>
    : public
        Object_Arg_Traits_T<
            ::OBV_FactoryTest::Value2 *,
            ::OBV_FactoryTest::Value2_var,
            ::OBV_FactoryTest::Value2_out,
            TAO::Value_Traits<OBV_FactoryTest::Value2>,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:145

#if !defined (_OBV_FACTORYTEST_TEST__ARG_TRAITS_)
#define _OBV_FACTORYTEST_TEST__ARG_TRAITS_

  template<>
  class  Arg_Traits< ::OBV_FactoryTest::Test>
    : public
        Object_Arg_Traits_T<
            ::OBV_FactoryTest::Test_ptr,
            ::OBV_FactoryTest::Test_var,
            ::OBV_FactoryTest::Test_out,
            TAO::Objref_Traits<OBV_FactoryTest::Test>,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

#endif /* end #if !defined */
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_valuetype/obv_module.cpp:44

namespace OBV_OBV_FactoryTest
{

  // TAO_IDL - Generated from
  // be/be_visitor_valuetype/valuetype_obv_ch.cpp:44

  // OBV_ class
  class  BaseValue
    : public virtual OBV_FactoryTest::BaseValue,
      public virtual ::CORBA::DefaultValueRefCountBase
  {

public:

public:

  // TAO_IDL - Generated from
  // be/be_visitor_valuetype/field_ch.cpp:459

  virtual void some_data (const ::CORBA::ULong);
  virtual ::CORBA::ULong some_data (void) const;

public:
  BaseValue (void);
  BaseValue (
      ::CORBA::ULong _tao_init_some_data
    );
  virtual ~BaseValue (void);

public:
  virtual ::CORBA::ValueBase *_copy_value (void);
  
protected:
  virtual ::CORBA::Boolean
  _tao_marshal__OBV_FactoryTest_BaseValue (TAO_OutputCDR &, TAO_ChunkInfo &) const;

  virtual ::CORBA::Boolean
  _tao_unmarshal__OBV_FactoryTest_BaseValue (TAO_InputCDR &, TAO_ChunkInfo &);

  ::CORBA::Boolean _tao_marshal_state (TAO_OutputCDR &, TAO_ChunkInfo &) const;
  ::CORBA::Boolean _tao_unmarshal_state (TAO_InputCDR &, TAO_ChunkInfo &);
  virtual void truncation_hook (void);

private:
  ::CORBA::ULong _pd_some_data;
  CORBA::Boolean require_truncation_;
};

// TAO_IDL - Generated from
// be/be_visitor_valuetype/valuetype_obv_ch.cpp:44

// OBV_ class
class  Value1
  : public virtual OBV_FactoryTest::Value1,
    public virtual OBV_OBV_FactoryTest::BaseValue
{

public:

  // TAO_IDL - Generated from
  // be/be_visitor_valuetype/field_ch.cpp:459

  virtual void id (const ::CORBA::ULong);
  virtual ::CORBA::ULong id (void) const;

public:
  Value1 (void);
  Value1 (
      ::CORBA::ULong _tao_init_some_data,
      ::CORBA::ULong _tao_init_id
    );
  virtual ~Value1 (void);
  
protected:
  virtual ::CORBA::Boolean
  _tao_marshal__OBV_FactoryTest_Value1 (TAO_OutputCDR &, TAO_ChunkInfo &) const;

  virtual ::CORBA::Boolean
  _tao_unmarshal__OBV_FactoryTest_Value1 (TAO_InputCDR &, TAO_ChunkInfo &);

  ::CORBA::Boolean _tao_marshal_state (TAO_OutputCDR &, TAO_ChunkInfo &) const;
  ::CORBA::Boolean _tao_unmarshal_state (TAO_InputCDR &, TAO_ChunkInfo &);
  virtual void truncation_hook (void);

private:
  ::CORBA::ULong _pd_id;
  CORBA::Boolean require_truncation_;
};

// TAO_IDL - Generated from
// be/be_visitor_valuetype/valuetype_obv_ch.cpp:44

// OBV_ class
class  Value2
  : public virtual OBV_FactoryTest::Value2,
    public virtual OBV_OBV_FactoryTest::BaseValue
{

public:

  // TAO_IDL - Generated from
  // be/be_visitor_valuetype/field_ch.cpp:459

  virtual void id (const ::CORBA::ULong);
  virtual ::CORBA::ULong id (void) const;

public:

  // TAO_IDL - Generated from
  // be/be_visitor_valuetype/field_ch.cpp:674

  virtual void data (const OBV_FactoryTest::BaseValue::BV_Data &);
  virtual const OBV_FactoryTest::BaseValue::BV_Data &data (void) const;
  virtual OBV_FactoryTest::BaseValue::BV_Data &data (void);

public:

public:

public:
  Value2 (void);
  Value2 (
      ::CORBA::ULong _tao_init_some_data,
      ::CORBA::ULong _tao_init_id,
      const ::OBV_FactoryTest::BaseValue::BV_Data & _tao_init_data
    );
  virtual ~Value2 (void);
  
protected:
  virtual ::CORBA::Boolean
  _tao_marshal__OBV_FactoryTest_Value2 (TAO_OutputCDR &, TAO_ChunkInfo &) const;

  virtual ::CORBA::Boolean
  _tao_unmarshal__OBV_FactoryTest_Value2 (TAO_InputCDR &, TAO_ChunkInfo &);

  ::CORBA::Boolean _tao_marshal_state (TAO_OutputCDR &, TAO_ChunkInfo &) const;
  ::CORBA::Boolean _tao_unmarshal_state (TAO_InputCDR &, TAO_ChunkInfo &);
  virtual void truncation_hook (void);

private:
  ::CORBA::ULong _pd_id;
  OBV_FactoryTest::BaseValue::BV_Data _pd_data;
  CORBA::Boolean require_truncation_;
};
}

// TAO_IDL - Generated from
// be/be_visitor_traits.cpp:60

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Traits specializations.
namespace TAO
{

#if !defined (_OBV_FACTORYTEST_BASEVALUE__TRAITS_)
#define _OBV_FACTORYTEST_BASEVALUE__TRAITS_

  template<>
  struct  Value_Traits<OBV_FactoryTest::BaseValue>
  {
    static void add_ref (OBV_FactoryTest::BaseValue *);
    static void remove_ref (OBV_FactoryTest::BaseValue *);
    static void release (OBV_FactoryTest::BaseValue *);
  };

#endif /* end #if !defined */

#if !defined (_OBV_FACTORYTEST_VALUE1__TRAITS_)
#define _OBV_FACTORYTEST_VALUE1__TRAITS_

  template<>
  struct  Value_Traits<OBV_FactoryTest::Value1>
  {
    static void add_ref (OBV_FactoryTest::Value1 *);
    static void remove_ref (OBV_FactoryTest::Value1 *);
    static void release (OBV_FactoryTest::Value1 *);
  };

#endif /* end #if !defined */

#if !defined (_OBV_FACTORYTEST_VALUE2__TRAITS_)
#define _OBV_FACTORYTEST_VALUE2__TRAITS_

  template<>
  struct  Value_Traits<OBV_FactoryTest::Value2>
  {
    static void add_ref (OBV_FactoryTest::Value2 *);
    static void remove_ref (OBV_FactoryTest::Value2 *);
    static void release (OBV_FactoryTest::Value2 *);
  };

#endif /* end #if !defined */

#if !defined (_OBV_FACTORYTEST_TEST__TRAITS_)
#define _OBV_FACTORYTEST_TEST__TRAITS_

  template<>
  struct  Objref_Traits< ::OBV_FactoryTest::Test>
  {
    static ::OBV_FactoryTest::Test_ptr duplicate (
        ::OBV_FactoryTest::Test_ptr p);
    static void release (
        ::OBV_FactoryTest::Test_ptr p);
    static ::OBV_FactoryTest::Test_ptr nil (void);
    static ::CORBA::Boolean marshal (
        const ::OBV_FactoryTest::Test_ptr p,
        TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */
}
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_valuetype/any_op_ch.cpp:43



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace OBV_FactoryTest
{
   void operator<<= ( ::CORBA::Any &, BaseValue *); // copying
   void operator<<= ( ::CORBA::Any &, BaseValue **); // non-copying
   ::CORBA::Boolean operator>>= (const ::CORBA::Any &, BaseValue *&);
}

#else


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 void operator<<= (::CORBA::Any &, OBV_FactoryTest::BaseValue *); // copying
 void operator<<= (::CORBA::Any &, OBV_FactoryTest::BaseValue **); // non-copying
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, OBV_FactoryTest::BaseValue *&);
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_valuetype/any_op_ch.cpp:43



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace OBV_FactoryTest
{
   void operator<<= ( ::CORBA::Any &, Value1 *); // copying
   void operator<<= ( ::CORBA::Any &, Value1 **); // non-copying
   ::CORBA::Boolean operator>>= (const ::CORBA::Any &, Value1 *&);
}

#else


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 void operator<<= (::CORBA::Any &, OBV_FactoryTest::Value1 *); // copying
 void operator<<= (::CORBA::Any &, OBV_FactoryTest::Value1 **); // non-copying
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, OBV_FactoryTest::Value1 *&);
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_valuetype/any_op_ch.cpp:43



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace OBV_FactoryTest
{
   void operator<<= ( ::CORBA::Any &, Value2 *); // copying
   void operator<<= ( ::CORBA::Any &, Value2 **); // non-copying
   ::CORBA::Boolean operator>>= (const ::CORBA::Any &, Value2 *&);
}

#else


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 void operator<<= (::CORBA::Any &, OBV_FactoryTest::Value2 *); // copying
 void operator<<= (::CORBA::Any &, OBV_FactoryTest::Value2 **); // non-copying
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, OBV_FactoryTest::Value2 *&);
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_interface/any_op_ch.cpp:41



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace OBV_FactoryTest
{
   void operator<<= ( ::CORBA::Any &, Test_ptr); // copying
   void operator<<= ( ::CORBA::Any &, Test_ptr *); // non-copying
   ::CORBA::Boolean operator>>= (const ::CORBA::Any &, Test_ptr &);
}

#else


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 void operator<<= (::CORBA::Any &, OBV_FactoryTest::Test_ptr); // copying
 void operator<<= (::CORBA::Any &, OBV_FactoryTest::Test_ptr *); // non-copying
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, OBV_FactoryTest::Test_ptr &);
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_valuetype.cpp:456


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

namespace CORBA
{
  extern  void add_ref (OBV_FactoryTest::BaseValue *);
  extern  void remove_ref (OBV_FactoryTest::BaseValue *);
}
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_valuetype/cdr_op_ch.cpp:49


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 ::CORBA::Boolean operator<< (TAO_OutputCDR &, const OBV_FactoryTest::BaseValue *);
 ::CORBA::Boolean operator>> (TAO_InputCDR &, OBV_FactoryTest::BaseValue *&);

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_structure/cdr_op_ch.cpp:43


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 ::CORBA::Boolean operator<< (TAO_OutputCDR &, const OBV_FactoryTest::BaseValue::BV_Data &);
 ::CORBA::Boolean operator>> (TAO_InputCDR &, OBV_FactoryTest::BaseValue::BV_Data &);

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_valuetype.cpp:456


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

namespace CORBA
{
  extern  void add_ref (OBV_FactoryTest::Value1 *);
  extern  void remove_ref (OBV_FactoryTest::Value1 *);
}
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_valuetype/cdr_op_ch.cpp:49


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 ::CORBA::Boolean operator<< (TAO_OutputCDR &, const OBV_FactoryTest::Value1 *);
 ::CORBA::Boolean operator>> (TAO_InputCDR &, OBV_FactoryTest::Value1 *&);

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_valuetype.cpp:456


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

namespace CORBA
{
  extern  void add_ref (OBV_FactoryTest::Value2 *);
  extern  void remove_ref (OBV_FactoryTest::Value2 *);
}
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_valuetype/cdr_op_ch.cpp:49


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 ::CORBA::Boolean operator<< (TAO_OutputCDR &, const OBV_FactoryTest::Value2 *);
 ::CORBA::Boolean operator>> (TAO_InputCDR &, OBV_FactoryTest::Value2 *&);

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_interface/cdr_op_ch.cpp:41

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 ::CORBA::Boolean operator<< (TAO_OutputCDR &, const OBV_FactoryTest::Test_ptr );
 ::CORBA::Boolean operator>> (TAO_InputCDR &, OBV_FactoryTest::Test_ptr &);

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_codegen.cpp:1700
#if defined (__ACE_INLINE__)
#include "FactoryC.inl"
#endif /* defined INLINE */

#include /**/ "ace/post.h"

#endif /* ifndef */

