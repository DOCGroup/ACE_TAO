// -*- C++ -*-
/**
 * Code generated by the The ACE ORB (TAO) IDL Compiler v2.4.1
 * TAO and the TAO IDL Compiler have been developed by:
 *       Center for Distributed Object Computing
 *       Washington University
 *       St. Louis, MO
 *       USA
 *       http://www.cs.wustl.edu/~schmidt/doc-center.html
 * and
 *       Distributed Object Computing Laboratory
 *       University of California at Irvine
 *       Irvine, CA
 *       USA
 * and
 *       Institute for Software Integrated Systems
 *       Vanderbilt University
 *       Nashville, TN
 *       USA
 *       http://www.isis.vanderbilt.edu/
 *
 * Information about TAO is available at:
 *     http://www.dre.vanderbilt.edu/~schmidt/TAO.html
 **/

// TAO_IDL - Generated from
// be/be_codegen.cpp:373


#include "testC.h"
#include "tao/CDR.h"
#include "tao/Exception_Data.h"
#include "tao/Invocation_Adapter.h"
#include "tao/Object_T.h"
#include "tao/ORB_Core.h"
#include "tao/SystemException.h"
#include "ace/OS_NS_string.h"

#if !defined (__ACE_INLINE__)
#include "testC.inl"
#endif /* !defined INLINE */

// TAO_IDL - Generated from
// be/be_visitor_sequence/sequence_cs.cpp:70

#if !defined (_TEST_OCTETSEQ_CS_)
#define _TEST_OCTETSEQ_CS_

Test::OctetSeq::OctetSeq (void)
{}

Test::OctetSeq::OctetSeq (
    ::CORBA::ULong max)
  : ::TAO::unbounded_value_sequence<
        ::CORBA::Octet
      > (max)
{}

Test::OctetSeq::OctetSeq (
    ::CORBA::ULong max,
    ::CORBA::ULong length,
    ::CORBA::Octet * buffer,
    ::CORBA::Boolean release
  )
  : ::TAO::unbounded_value_sequence<
        ::CORBA::Octet
      >
    (max, length, buffer, release)
{}

Test::OctetSeq::OctetSeq (
    const OctetSeq &seq)
  : ::TAO::unbounded_value_sequence<
        ::CORBA::Octet
      > (seq)
{}

Test::OctetSeq::~OctetSeq (void)
{}

#endif /* end #if !defined */

// TAO_IDL - Generated from
// be/be_visitor_sequence/sequence_cs.cpp:70

#if !defined (_TEST_CHARSEQ_CS_)
#define _TEST_CHARSEQ_CS_

Test::CharSeq::CharSeq (void)
{}

Test::CharSeq::CharSeq (
    ::CORBA::ULong max)
  : ::TAO::unbounded_value_sequence<
        ::CORBA::Char
      > (max)
{}

Test::CharSeq::CharSeq (
    ::CORBA::ULong max,
    ::CORBA::ULong length,
    ::CORBA::Char * buffer,
    ::CORBA::Boolean release
  )
  : ::TAO::unbounded_value_sequence<
        ::CORBA::Char
      >
    (max, length, buffer, release)
{}

Test::CharSeq::CharSeq (
    const CharSeq &seq)
  : ::TAO::unbounded_value_sequence<
        ::CORBA::Char
      > (seq)
{}

Test::CharSeq::~CharSeq (void)
{}

#endif /* end #if !defined */

// TAO_IDL - Generated from
// be/be_visitor_exception/exception_ctor.cpp:51

Test::OutOfRange::OutOfRange (
    ::Test::Index _tao_min_index,
    ::Test::Index _tao_max_index)
  : ::CORBA::UserException (
        "IDL:Test/OutOfRange:1.0",
        "OutOfRange"
      )
{
  this->min_index = _tao_min_index;
  this->max_index = _tao_max_index;
}



// TAO_IDL - Generated from
// be/be_visitor_exception/exception_cs.cpp:98

Test::OutOfRange::OutOfRange (void)
  : ::CORBA::UserException (
        "IDL:Test/OutOfRange:1.0",
        "OutOfRange"
      )
{
}

Test::OutOfRange::~OutOfRange (void)
{
}

Test::OutOfRange::OutOfRange (const ::Test::OutOfRange &_tao_excp)
  : ::CORBA::UserException (
        _tao_excp._rep_id (),
        _tao_excp._name ()
      )
{
  this->min_index = _tao_excp.min_index;
  this->max_index = _tao_excp.max_index;
}

Test::OutOfRange&
Test::OutOfRange::operator= (const ::Test::OutOfRange &_tao_excp)
{
  this->::CORBA::UserException::operator= (_tao_excp);
  this->min_index = _tao_excp.min_index;
  this->max_index = _tao_excp.max_index;
  return *this;
}

Test::OutOfRange *
Test::OutOfRange::_downcast ( ::CORBA::Exception *_tao_excp)
{
  return dynamic_cast<OutOfRange *> (_tao_excp);
}

const Test::OutOfRange *
Test::OutOfRange::_downcast ( ::CORBA::Exception const *_tao_excp)
{
  return dynamic_cast<const OutOfRange *> (_tao_excp);
}

::CORBA::Exception *Test::OutOfRange::_alloc (void)
{
  ::CORBA::Exception *retval = 0;
  ACE_NEW_RETURN (retval, ::Test::OutOfRange, 0);
  return retval;
}

::CORBA::Exception *
Test::OutOfRange::_tao_duplicate (void) const
{
  ::CORBA::Exception *result = 0;
  ACE_NEW_RETURN (
      result,
      ::Test::OutOfRange (*this),
      0
    );
  return result;
}

void Test::OutOfRange::_raise (void) const
{
  throw *this;
}

void Test::OutOfRange::_tao_encode (TAO_OutputCDR &cdr) const
{
  if (!(cdr << *this))
    {
      throw ::CORBA::MARSHAL ();
    }
}

void Test::OutOfRange::_tao_decode (TAO_InputCDR &cdr)
{
  if (!(cdr >> *this))
    {
      throw ::CORBA::MARSHAL ();
    }
}



// TAO_IDL - Generated from
// be/be_visitor_interface/interface_cs.cpp:48

// Traits specializations for Test::Database.

Test::Database_ptr
TAO::Objref_Traits<Test::Database>::duplicate (
    Test::Database_ptr p)
{
  return Test::Database::_duplicate (p);
}

void
TAO::Objref_Traits<Test::Database>::release (
    Test::Database_ptr p)
{
  ::CORBA::release (p);
}

Test::Database_ptr
TAO::Objref_Traits<Test::Database>::nil (void)
{
  return Test::Database::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<Test::Database>::marshal (
    const Test::Database_ptr p,
    TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:88

void
Test::Database::set (
  ::Test::Index i,
  const ::Test::OctetSeq & value,
  ::CORBA::Double verification_token,
  ::CORBA::Double_out returned_token)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  TAO::Arg_Traits< void>::ret_val _tao_retval;
  TAO::Arg_Traits< ::CORBA::UShort>::in_arg_val _tao_i (i);
  TAO::Arg_Traits< ::Test::OctetSeq>::in_arg_val _tao_value (value);
  TAO::Arg_Traits< ::CORBA::Double>::in_arg_val _tao_verification_token (verification_token);
  TAO::Arg_Traits< ::CORBA::Double>::out_arg_val _tao_returned_token (returned_token);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_i,
      &_tao_value,
      &_tao_verification_token,
      &_tao_returned_token
    };

  static TAO::Exception_Data
  _tao_Test_Database_set_exceptiondata [] = 
    {
      {
        "IDL:Test/OutOfRange:1.0",
        Test::OutOfRange::_alloc
#if TAO_HAS_INTERCEPTORS == 1
        , 0
#endif /* TAO_HAS_INTERCEPTORS */
      }
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      5,
      "set",
      3,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY
      
    );

  _tao_call.invoke (
      _tao_Test_Database_set_exceptiondata,
      1
    );
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:88

::Test::OctetSeq *
Test::Database::get (
  ::Test::Index i)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  TAO::Arg_Traits< ::Test::OctetSeq>::ret_val _tao_retval;
  TAO::Arg_Traits< ::CORBA::UShort>::in_arg_val _tao_i (i);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_i
    };

  static TAO::Exception_Data
  _tao_Test_Database_get_exceptiondata [] = 
    {
      {
        "IDL:Test/OutOfRange:1.0",
        Test::OutOfRange::_alloc
#if TAO_HAS_INTERCEPTORS == 1
        , 0
#endif /* TAO_HAS_INTERCEPTORS */
      }
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      2,
      "get",
      3,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY
      
    );

  _tao_call.invoke (
      _tao_Test_Database_get_exceptiondata,
      1
    );

  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:88

::CORBA::ULong
Test::Database::get_crc (
  ::Test::Index i)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  TAO::Arg_Traits< ::CORBA::ULong>::ret_val _tao_retval;
  TAO::Arg_Traits< ::CORBA::UShort>::in_arg_val _tao_i (i);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_i
    };

  static TAO::Exception_Data
  _tao_Test_Database_get_crc_exceptiondata [] = 
    {
      {
        "IDL:Test/OutOfRange:1.0",
        Test::OutOfRange::_alloc
#if TAO_HAS_INTERCEPTORS == 1
        , 0
#endif /* TAO_HAS_INTERCEPTORS */
      }
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      2,
      "get_crc",
      7,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY
      
    );

  _tao_call.invoke (
      _tao_Test_Database_get_crc_exceptiondata,
      1
    );

  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:88

void
Test::Database::shutdown (
  void)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  TAO::Arg_Traits< void>::ret_val _tao_retval;

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      1,
      "shutdown",
      8,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY,
      TAO::TAO_ONEWAY_INVOCATION,
      TAO::TAO_SYNCHRONOUS_INVOCATION,
      false
    );

  _tao_call.invoke (0, 0);
}

Test::Database::Database (void)
{
}

Test::Database::~Database (void)
{
}

Test::Database_ptr
Test::Database::_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return
    TAO::Narrow_Utils<Database>::narrow (
        _tao_objref,
        "IDL:Test/Database:1.0");
}

Test::Database_ptr
Test::Database::_unchecked_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return
    TAO::Narrow_Utils<Database>::unchecked_narrow (
        _tao_objref);
}

Test::Database_ptr
Test::Database::_nil (void)
{
  return 0;
}

Test::Database_ptr
Test::Database::_duplicate (Database_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  return obj;
}

void
Test::Database::_tao_release (Database_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
Test::Database::_is_a (const char *value)
{
  if (
      ACE_OS::strcmp (
          value,
          "IDL:Test/Database:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        ) == 0
    )
    {
      return true; // success using local knowledge
    }
  else
    {
      return this->::CORBA::Object::_is_a (value);
    }
}

const char* Test::Database::_interface_repository_id (void) const
{
  return "IDL:Test/Database:1.0";
}

::CORBA::Boolean
Test::Database::marshal (TAO_OutputCDR &cdr)
{
  return (cdr << this);
}

// TAO_IDL - Generated from
// be/be_visitor_sequence/cdr_op_cs.cpp:93
#if !defined _TAO_CDR_OP_Test_OctetSeq_CPP_
#define _TAO_CDR_OP_Test_OctetSeq_CPP_

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Test::OctetSeq &_tao_sequence)
{
  return TAO::marshal_sequence(strm, _tao_sequence);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Test::OctetSeq &_tao_sequence)
{
  return TAO::demarshal_sequence(strm, _tao_sequence);
}


TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_CDR_OP_Test_OctetSeq_CPP_ */

// TAO_IDL - Generated from
// be/be_visitor_sequence/cdr_op_cs.cpp:93
#if !defined _TAO_CDR_OP_Test_CharSeq_CPP_
#define _TAO_CDR_OP_Test_CharSeq_CPP_

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Test::CharSeq &_tao_sequence)
{
  return TAO::marshal_sequence(strm, _tao_sequence);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Test::CharSeq &_tao_sequence)
{
  return TAO::demarshal_sequence(strm, _tao_sequence);
}


TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_CDR_OP_Test_CharSeq_CPP_ */

// TAO_IDL - Generated from
// be/be_visitor_exception/cdr_op_cs.cpp:48
TAO_BEGIN_VERSIONED_NAMESPACE_DECL



::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Test::OutOfRange &_tao_aggregate
  )
{
  // First marshal the repository ID.
  if (strm << _tao_aggregate._rep_id ())
    {
      // Now marshal the members (if any).
      return (
        (strm << _tao_aggregate.min_index) &&
        (strm << _tao_aggregate.max_index)
       );
    }
  else
    {
      return false;
    }
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Test::OutOfRange &_tao_aggregate
  )
{
  // Demarshal the members.
  return (
    (strm >> _tao_aggregate.min_index) &&
    (strm >> _tao_aggregate.max_index)
  );
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_interface/cdr_op_cs.cpp:51

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Test::Database_ptr _tao_objref)
{
  ::CORBA::Object_ptr _tao_corba_obj = _tao_objref;
  return (strm << _tao_corba_obj);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Test::Database_ptr &_tao_objref)
{
  ::CORBA::Object_var obj;

  if (!(strm >> obj.inout ()))
    {
      return false;
    }
  
  typedef ::Test::Database RHS_SCOPED_NAME;

  // Narrow to the right type.
  _tao_objref =
    TAO::Narrow_Utils<RHS_SCOPED_NAME>::unchecked_narrow (obj.in ());
    
  return true;
}

TAO_END_VERSIONED_NAMESPACE_DECL



