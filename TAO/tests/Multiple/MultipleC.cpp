// -*- C++ -*-
/**
 * Code generated by the The ACE ORB (TAO) IDL Compiler v2.4.1
 * TAO and the TAO IDL Compiler have been developed by:
 *       Center for Distributed Object Computing
 *       Washington University
 *       St. Louis, MO
 *       USA
 *       http://www.cs.wustl.edu/~schmidt/doc-center.html
 * and
 *       Distributed Object Computing Laboratory
 *       University of California at Irvine
 *       Irvine, CA
 *       USA
 * and
 *       Institute for Software Integrated Systems
 *       Vanderbilt University
 *       Nashville, TN
 *       USA
 *       http://www.isis.vanderbilt.edu/
 *
 * Information about TAO is available at:
 *     http://www.dre.vanderbilt.edu/~schmidt/TAO.html
 **/

// TAO_IDL - Generated from
// be/be_codegen.cpp:373


#include "MultipleC.h"
#include "tao/CDR.h"
#include "tao/Exception_Data.h"
#include "tao/Invocation_Adapter.h"
#include "tao/Object_T.h"
#include "ace/OS_NS_string.h"

#if !defined (__ACE_INLINE__)
#include "MultipleC.inl"
#endif /* !defined INLINE */

// TAO_IDL - Generated from
// be/be_visitor_interface/interface_cs.cpp:48

// Traits specializations for Multiple::Top.

Multiple::Top_ptr
TAO::Objref_Traits<Multiple::Top>::duplicate (
    Multiple::Top_ptr p)
{
  return Multiple::Top::_duplicate (p);
}

void
TAO::Objref_Traits<Multiple::Top>::release (
    Multiple::Top_ptr p)
{
  ::CORBA::release (p);
}

Multiple::Top_ptr
TAO::Objref_Traits<Multiple::Top>::nil (void)
{
  return Multiple::Top::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<Multiple::Top>::marshal (
    const Multiple::Top_ptr p,
    TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:88

char *
Multiple::Top::top_quote (
  void)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }

  TAO::Arg_Traits< char *>::ret_val _tao_retval;

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      1,
      "top_quote",
      9,
      TAO::TAO_CO_NONE | TAO::TAO_CO_DIRECT_STRATEGY | TAO::TAO_CO_THRU_POA_STRATEGY,
      TAO::TAO_TWOWAY_INVOCATION
      ,
      TAO::TAO_SYNCHRONOUS_INVOCATION,
      false
    );

  _tao_call.invoke (0, 0);

  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:88

void
Multiple::Top::shutdown (
  void)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }

  TAO::Arg_Traits< void>::ret_val _tao_retval;

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      1,
      "shutdown",
      8,
      TAO::TAO_CO_NONE | TAO::TAO_CO_DIRECT_STRATEGY | TAO::TAO_CO_THRU_POA_STRATEGY,
      TAO::TAO_ONEWAY_INVOCATION,
      TAO::TAO_SYNCHRONOUS_INVOCATION,
      false
    );

  _tao_call.invoke (0, 0);
}

Multiple::Top::Top (void)
{
}

Multiple::Top::~Top (void)
{
}

Multiple::Top_ptr
Multiple::Top::_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return
    TAO::Narrow_Utils<Top>::narrow (
        _tao_objref,
        "IDL:Multiple/Top:1.0");
}

Multiple::Top_ptr
Multiple::Top::_unchecked_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return
    TAO::Narrow_Utils<Top>::unchecked_narrow (
        _tao_objref);
}

Multiple::Top_ptr
Multiple::Top::_nil (void)
{
  return 0;
}

Multiple::Top_ptr
Multiple::Top::_duplicate (Top_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  return obj;
}

void
Multiple::Top::_tao_release (Top_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
Multiple::Top::_is_a (const char *value)
{
  if (
      ACE_OS::strcmp (
          value,
          "IDL:Multiple/Top:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        ) == 0
    )
    {
      return true; // success using local knowledge
    }
  else
    {
      return this->::CORBA::Object::_is_a (value);
    }
}

const char* Multiple::Top::_interface_repository_id (void) const
{
  return "IDL:Multiple/Top:1.0";
}

::CORBA::Boolean
Multiple::Top::marshal (TAO_OutputCDR &cdr)
{
  return (cdr << this);
}

// TAO_IDL - Generated from
// be/be_visitor_interface/interface_cs.cpp:48

// Traits specializations for Multiple::Left.

Multiple::Left_ptr
TAO::Objref_Traits<Multiple::Left>::duplicate (
    Multiple::Left_ptr p)
{
  return Multiple::Left::_duplicate (p);
}

void
TAO::Objref_Traits<Multiple::Left>::release (
    Multiple::Left_ptr p)
{
  ::CORBA::release (p);
}

Multiple::Left_ptr
TAO::Objref_Traits<Multiple::Left>::nil (void)
{
  return Multiple::Left::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<Multiple::Left>::marshal (
    const Multiple::Left_ptr p,
    TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:88

char *
Multiple::Left::left_quote (
  void)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }

  TAO::Arg_Traits< char *>::ret_val _tao_retval;

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      1,
      "left_quote",
      10,
      TAO::TAO_CO_NONE | TAO::TAO_CO_DIRECT_STRATEGY | TAO::TAO_CO_THRU_POA_STRATEGY,
      TAO::TAO_TWOWAY_INVOCATION
      ,
      TAO::TAO_SYNCHRONOUS_INVOCATION,
      false
    );

  _tao_call.invoke (0, 0);

  return _tao_retval.retn ();
}

Multiple::Left::Left (void)
{
}

Multiple::Left::~Left (void)
{
}

Multiple::Left_ptr
Multiple::Left::_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return
    TAO::Narrow_Utils<Left>::narrow (
        _tao_objref,
        "IDL:Multiple/Left:1.0");
}

Multiple::Left_ptr
Multiple::Left::_unchecked_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return
    TAO::Narrow_Utils<Left>::unchecked_narrow (
        _tao_objref);
}

Multiple::Left_ptr
Multiple::Left::_nil (void)
{
  return 0;
}

Multiple::Left_ptr
Multiple::Left::_duplicate (Left_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  return obj;
}

void
Multiple::Left::_tao_release (Left_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
Multiple::Left::_is_a (const char *value)
{
  if (
      ACE_OS::strcmp (
          value,
          "IDL:Multiple/Top:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:Multiple/Left:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        ) == 0
    )
    {
      return true; // success using local knowledge
    }
  else
    {
      return this->::CORBA::Object::_is_a (value);
    }
}

const char* Multiple::Left::_interface_repository_id (void) const
{
  return "IDL:Multiple/Left:1.0";
}

::CORBA::Boolean
Multiple::Left::marshal (TAO_OutputCDR &cdr)
{
  return (cdr << this);
}

// TAO_IDL - Generated from
// be/be_visitor_interface/interface_cs.cpp:48

// Traits specializations for Multiple::Right.

Multiple::Right_ptr
TAO::Objref_Traits<Multiple::Right>::duplicate (
    Multiple::Right_ptr p)
{
  return Multiple::Right::_duplicate (p);
}

void
TAO::Objref_Traits<Multiple::Right>::release (
    Multiple::Right_ptr p)
{
  ::CORBA::release (p);
}

Multiple::Right_ptr
TAO::Objref_Traits<Multiple::Right>::nil (void)
{
  return Multiple::Right::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<Multiple::Right>::marshal (
    const Multiple::Right_ptr p,
    TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:88

char *
Multiple::Right::right_quote (
  void)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }

  TAO::Arg_Traits< char *>::ret_val _tao_retval;

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      1,
      "right_quote",
      11,
      TAO::TAO_CO_NONE | TAO::TAO_CO_DIRECT_STRATEGY | TAO::TAO_CO_THRU_POA_STRATEGY,
      TAO::TAO_TWOWAY_INVOCATION
      ,
      TAO::TAO_SYNCHRONOUS_INVOCATION,
      false
    );

  _tao_call.invoke (0, 0);

  return _tao_retval.retn ();
}

Multiple::Right::Right (void)
{
}

Multiple::Right::~Right (void)
{
}

Multiple::Right_ptr
Multiple::Right::_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return
    TAO::Narrow_Utils<Right>::narrow (
        _tao_objref,
        "IDL:Multiple/Right:1.0");
}

Multiple::Right_ptr
Multiple::Right::_unchecked_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return
    TAO::Narrow_Utils<Right>::unchecked_narrow (
        _tao_objref);
}

Multiple::Right_ptr
Multiple::Right::_nil (void)
{
  return 0;
}

Multiple::Right_ptr
Multiple::Right::_duplicate (Right_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  return obj;
}

void
Multiple::Right::_tao_release (Right_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
Multiple::Right::_is_a (const char *value)
{
  if (
      ACE_OS::strcmp (
          value,
          "IDL:Multiple/Top:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:Multiple/Right:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        ) == 0
    )
    {
      return true; // success using local knowledge
    }
  else
    {
      return this->::CORBA::Object::_is_a (value);
    }
}

const char* Multiple::Right::_interface_repository_id (void) const
{
  return "IDL:Multiple/Right:1.0";
}

::CORBA::Boolean
Multiple::Right::marshal (TAO_OutputCDR &cdr)
{
  return (cdr << this);
}

// TAO_IDL - Generated from
// be/be_visitor_interface/interface_cs.cpp:48

// Traits specializations for Multiple::Bottom.

Multiple::Bottom_ptr
TAO::Objref_Traits<Multiple::Bottom>::duplicate (
    Multiple::Bottom_ptr p)
{
  return Multiple::Bottom::_duplicate (p);
}

void
TAO::Objref_Traits<Multiple::Bottom>::release (
    Multiple::Bottom_ptr p)
{
  ::CORBA::release (p);
}

Multiple::Bottom_ptr
TAO::Objref_Traits<Multiple::Bottom>::nil (void)
{
  return Multiple::Bottom::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<Multiple::Bottom>::marshal (
    const Multiple::Bottom_ptr p,
    TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:88

char *
Multiple::Bottom::bottom_quote (
  void)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }

  TAO::Arg_Traits< char *>::ret_val _tao_retval;

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      1,
      "bottom_quote",
      12,
      TAO::TAO_CO_NONE | TAO::TAO_CO_DIRECT_STRATEGY | TAO::TAO_CO_THRU_POA_STRATEGY,
      TAO::TAO_TWOWAY_INVOCATION
      ,
      TAO::TAO_SYNCHRONOUS_INVOCATION,
      false
    );

  _tao_call.invoke (0, 0);

  return _tao_retval.retn ();
}

Multiple::Bottom::Bottom (void)
{
}

Multiple::Bottom::~Bottom (void)
{
}

Multiple::Bottom_ptr
Multiple::Bottom::_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return
    TAO::Narrow_Utils<Bottom>::narrow (
        _tao_objref,
        "IDL:Multiple/Bottom:1.0");
}

Multiple::Bottom_ptr
Multiple::Bottom::_unchecked_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return
    TAO::Narrow_Utils<Bottom>::unchecked_narrow (
        _tao_objref);
}

Multiple::Bottom_ptr
Multiple::Bottom::_nil (void)
{
  return 0;
}

Multiple::Bottom_ptr
Multiple::Bottom::_duplicate (Bottom_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  return obj;
}

void
Multiple::Bottom::_tao_release (Bottom_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
Multiple::Bottom::_is_a (const char *value)
{
  if (
      ACE_OS::strcmp (
          value,
          "IDL:Multiple/Top:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:Multiple/Left:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:Multiple/Right:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:Multiple/Bottom:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        ) == 0
    )
    {
      return true; // success using local knowledge
    }
  else
    {
      return this->::CORBA::Object::_is_a (value);
    }
}

const char* Multiple::Bottom::_interface_repository_id (void) const
{
  return "IDL:Multiple/Bottom:1.0";
}

::CORBA::Boolean
Multiple::Bottom::marshal (TAO_OutputCDR &cdr)
{
  return (cdr << this);
}

// TAO_IDL - Generated from
// be/be_visitor_interface/cdr_op_cs.cpp:51

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Multiple::Top_ptr _tao_objref)
{
  ::CORBA::Object_ptr _tao_corba_obj = _tao_objref;
  return (strm << _tao_corba_obj);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Multiple::Top_ptr &_tao_objref)
{
  ::CORBA::Object_var obj;

  if (!(strm >> obj.inout ()))
    {
      return false;
    }

  typedef ::Multiple::Top RHS_SCOPED_NAME;

  // Narrow to the right type.
  _tao_objref =
    TAO::Narrow_Utils<RHS_SCOPED_NAME>::unchecked_narrow (obj.in ());

  return true;
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_interface/cdr_op_cs.cpp:51

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Multiple::Left_ptr _tao_objref)
{
  ::CORBA::Object_ptr _tao_corba_obj = _tao_objref;
  return (strm << _tao_corba_obj);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Multiple::Left_ptr &_tao_objref)
{
  ::CORBA::Object_var obj;

  if (!(strm >> obj.inout ()))
    {
      return false;
    }

  typedef ::Multiple::Left RHS_SCOPED_NAME;

  // Narrow to the right type.
  _tao_objref =
    TAO::Narrow_Utils<RHS_SCOPED_NAME>::unchecked_narrow (obj.in ());

  return true;
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_interface/cdr_op_cs.cpp:51

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Multiple::Right_ptr _tao_objref)
{
  ::CORBA::Object_ptr _tao_corba_obj = _tao_objref;
  return (strm << _tao_corba_obj);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Multiple::Right_ptr &_tao_objref)
{
  ::CORBA::Object_var obj;

  if (!(strm >> obj.inout ()))
    {
      return false;
    }

  typedef ::Multiple::Right RHS_SCOPED_NAME;

  // Narrow to the right type.
  _tao_objref =
    TAO::Narrow_Utils<RHS_SCOPED_NAME>::unchecked_narrow (obj.in ());

  return true;
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_interface/cdr_op_cs.cpp:51

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Multiple::Bottom_ptr _tao_objref)
{
  ::CORBA::Object_ptr _tao_corba_obj = _tao_objref;
  return (strm << _tao_corba_obj);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Multiple::Bottom_ptr &_tao_objref)
{
  ::CORBA::Object_var obj;

  if (!(strm >> obj.inout ()))
    {
      return false;
    }

  typedef ::Multiple::Bottom RHS_SCOPED_NAME;

  // Narrow to the right type.
  _tao_objref =
    TAO::Narrow_Utils<RHS_SCOPED_NAME>::unchecked_narrow (obj.in ());

  return true;
}

TAO_END_VERSIONED_NAMESPACE_DECL



