// -*- C++ -*-
/**
 * Code generated by the The ACE ORB (TAO) IDL Compiler v2.4.1
 * TAO and the TAO IDL Compiler have been developed by:
 *       Center for Distributed Object Computing
 *       Washington University
 *       St. Louis, MO
 *       USA
 *       http://www.cs.wustl.edu/~schmidt/doc-center.html
 * and
 *       Distributed Object Computing Laboratory
 *       University of California at Irvine
 *       Irvine, CA
 *       USA
 * and
 *       Institute for Software Integrated Systems
 *       Vanderbilt University
 *       Nashville, TN
 *       USA
 *       http://www.isis.vanderbilt.edu/
 *
 * Information about TAO is available at:
 *     http://www.dre.vanderbilt.edu/~schmidt/TAO.html
 **/

// TAO_IDL - Generated from
// be/be_codegen.cpp:373


#include "masterC.h"
#include "tao/CDR.h"
#include "tao/Exception_Data.h"
#include "tao/Invocation_Adapter.h"
#include "tao/Object_T.h"
#include "ace/OS_NS_string.h"

#if !defined (__ACE_INLINE__)
#include "masterC.inl"
#endif /* !defined INLINE */

// TAO_IDL - Generated from
// be/be_visitor_interface/interface_cs.cpp:48

// Traits specializations for MasterClient::Server.

MasterClient::Server_ptr
TAO::Objref_Traits<MasterClient::Server>::duplicate (
    MasterClient::Server_ptr p)
{
  return MasterClient::Server::_duplicate (p);
}

void
TAO::Objref_Traits<MasterClient::Server>::release (
    MasterClient::Server_ptr p)
{
  ::CORBA::release (p);
}

MasterClient::Server_ptr
TAO::Objref_Traits<MasterClient::Server>::nil (void)
{
  return MasterClient::Server::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<MasterClient::Server>::marshal (
    const MasterClient::Server_ptr p,
    TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:88

void
MasterClient::Server::ping (
  void)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  TAO::Arg_Traits< void>::ret_val _tao_retval;

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      1,
      "ping",
      4,
      TAO::TAO_CO_NONE,
      TAO::TAO_TWOWAY_INVOCATION
      ,
      TAO::TAO_SYNCHRONOUS_INVOCATION,
      false
    );

  _tao_call.invoke (0, 0);
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:88

void
MasterClient::Server::shutdown (
  void)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  TAO::Arg_Traits< void>::ret_val _tao_retval;

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      1,
      "shutdown",
      8,
      TAO::TAO_CO_NONE,
      TAO::TAO_ONEWAY_INVOCATION,
      TAO::TAO_SYNCHRONOUS_INVOCATION,
      false
    );

  _tao_call.invoke (0, 0);
}

MasterClient::Server::Server (void)
{
}

MasterClient::Server::~Server (void)
{
}

MasterClient::Server_ptr
MasterClient::Server::_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return
    TAO::Narrow_Utils<Server>::narrow (
        _tao_objref,
        "IDL:MasterClient/Server:1.0");
}

MasterClient::Server_ptr
MasterClient::Server::_unchecked_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return
    TAO::Narrow_Utils<Server>::unchecked_narrow (
        _tao_objref);
}

MasterClient::Server_ptr
MasterClient::Server::_nil (void)
{
  return 0;
}

MasterClient::Server_ptr
MasterClient::Server::_duplicate (Server_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  return obj;
}

void
MasterClient::Server::_tao_release (Server_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
MasterClient::Server::_is_a (const char *value)
{
  if (
      ACE_OS::strcmp (
          value,
          "IDL:MasterClient/Server:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        ) == 0
    )
    {
      return true; // success using local knowledge
    }
  else
    {
      return this->::CORBA::Object::_is_a (value);
    }
}

const char* MasterClient::Server::_interface_repository_id (void) const
{
  return "IDL:MasterClient/Server:1.0";
}

::CORBA::Boolean
MasterClient::Server::marshal (TAO_OutputCDR &cdr)
{
  return (cdr << this);
}

// TAO_IDL - Generated from
// be/be_visitor_interface/interface_cs.cpp:48

// Traits specializations for MasterClient::Master.

MasterClient::Master_ptr
TAO::Objref_Traits<MasterClient::Master>::duplicate (
    MasterClient::Master_ptr p)
{
  return MasterClient::Master::_duplicate (p);
}

void
TAO::Objref_Traits<MasterClient::Master>::release (
    MasterClient::Master_ptr p)
{
  ::CORBA::release (p);
}

MasterClient::Master_ptr
TAO::Objref_Traits<MasterClient::Master>::nil (void)
{
  return MasterClient::Master::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<MasterClient::Master>::marshal (
    const MasterClient::Master_ptr p,
    TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:88

void
MasterClient::Master::registerServer (
  ::MasterClient::Server_ptr c)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  TAO::Arg_Traits< void>::ret_val _tao_retval;
  TAO::Arg_Traits< ::MasterClient::Server>::in_arg_val _tao_c (c);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_c
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      2,
      "registerServer",
      14,
      TAO::TAO_CO_NONE
      
    );

  _tao_call.invoke (0, 0);
}

MasterClient::Master::Master (void)
{
}

MasterClient::Master::~Master (void)
{
}

MasterClient::Master_ptr
MasterClient::Master::_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return
    TAO::Narrow_Utils<Master>::narrow (
        _tao_objref,
        "IDL:MasterClient/Master:1.0");
}

MasterClient::Master_ptr
MasterClient::Master::_unchecked_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return
    TAO::Narrow_Utils<Master>::unchecked_narrow (
        _tao_objref);
}

MasterClient::Master_ptr
MasterClient::Master::_nil (void)
{
  return 0;
}

MasterClient::Master_ptr
MasterClient::Master::_duplicate (Master_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  return obj;
}

void
MasterClient::Master::_tao_release (Master_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
MasterClient::Master::_is_a (const char *value)
{
  if (
      ACE_OS::strcmp (
          value,
          "IDL:MasterClient/Master:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        ) == 0
    )
    {
      return true; // success using local knowledge
    }
  else
    {
      return this->::CORBA::Object::_is_a (value);
    }
}

const char* MasterClient::Master::_interface_repository_id (void) const
{
  return "IDL:MasterClient/Master:1.0";
}

::CORBA::Boolean
MasterClient::Master::marshal (TAO_OutputCDR &cdr)
{
  return (cdr << this);
}

// TAO_IDL - Generated from
// be/be_visitor_interface/cdr_op_cs.cpp:51

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const MasterClient::Server_ptr _tao_objref)
{
  ::CORBA::Object_ptr _tao_corba_obj = _tao_objref;
  return (strm << _tao_corba_obj);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    MasterClient::Server_ptr &_tao_objref)
{
  ::CORBA::Object_var obj;

  if (!(strm >> obj.inout ()))
    {
      return false;
    }
  
  typedef ::MasterClient::Server RHS_SCOPED_NAME;

  // Narrow to the right type.
  _tao_objref =
    TAO::Narrow_Utils<RHS_SCOPED_NAME>::unchecked_narrow (obj.in ());
    
  return true;
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_interface/cdr_op_cs.cpp:51

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const MasterClient::Master_ptr _tao_objref)
{
  ::CORBA::Object_ptr _tao_corba_obj = _tao_objref;
  return (strm << _tao_corba_obj);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    MasterClient::Master_ptr &_tao_objref)
{
  ::CORBA::Object_var obj;

  if (!(strm >> obj.inout ()))
    {
      return false;
    }
  
  typedef ::MasterClient::Master RHS_SCOPED_NAME;

  // Narrow to the right type.
  _tao_objref =
    TAO::Narrow_Utils<RHS_SCOPED_NAME>::unchecked_narrow (obj.in ());
    
  return true;
}

TAO_END_VERSIONED_NAMESPACE_DECL



