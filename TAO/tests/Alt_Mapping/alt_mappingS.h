// -*- C++ -*-
/**
 * Code generated by the The ACE ORB (TAO) IDL Compiler v2.4.1
 * TAO and the TAO IDL Compiler have been developed by:
 *       Center for Distributed Object Computing
 *       Washington University
 *       St. Louis, MO
 *       USA
 *       http://www.cs.wustl.edu/~schmidt/doc-center.html
 * and
 *       Distributed Object Computing Laboratory
 *       University of California at Irvine
 *       Irvine, CA
 *       USA
 * and
 *       Institute for Software Integrated Systems
 *       Vanderbilt University
 *       Nashville, TN
 *       USA
 *       http://www.isis.vanderbilt.edu/
 *
 * Information about TAO is available at:
 *     http://www.dre.vanderbilt.edu/~schmidt/TAO.html
 **/

// TAO_IDL - Generated from
// be/be_codegen.cpp:458

#ifndef _TAO_IDL_ALT_MAPPINGS_UL4NGM_H_
#define _TAO_IDL_ALT_MAPPINGS_UL4NGM_H_

#include /**/ "ace/pre.h"

#include "alt_mappingC.h"
#include "tao/PortableServer/Basic_SArguments.h"
#include "tao/PortableServer/Special_Basic_SArguments.h"
#include "tao/PortableServer/Fixed_Size_SArgument_T.h"
#include "tao/PortableServer/Var_Size_SArgument_T.h"
#include "tao/PortableServer/Object_SArg_Traits.h"
#include "tao/PortableServer/UB_String_SArguments.h"
#include "tao/PortableServer/Vector_SArgument_T.h"
#include "tao/PortableServer/get_arg.h"
#include "tao/Special_Basic_Arguments.h"
#include "tao/UB_String_Arguments.h"

#if !defined (ACE_LACKS_PRAGMA_ONCE)
# pragma once
#endif /* ACE_LACKS_PRAGMA_ONCE */

#include "tao/PortableServer/PortableServer.h"
#include "tao/PortableServer/Servant_Base.h"

// TAO_IDL - Generated from
// be/be_visitor_arg_traits.cpp:66

TAO_BEGIN_VERSIONED_NAMESPACE_DECL


// Arg traits specializations.
namespace TAO
{

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:145

#if !defined (_ALT_MAPPING__SARG_TRAITS_)
#define _ALT_MAPPING__SARG_TRAITS_

  template<>
  class  SArg_Traits< ::Alt_Mapping>
    : public
        Object_SArg_Traits_T<
            ::Alt_Mapping_ptr,
            ::Alt_Mapping_var,
            ::Alt_Mapping_out,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:945

  template<>
  class SArg_Traits< ::Alt_Mapping::Fixed_Struct>
    : public
        Fixed_Size_SArg_Traits_T<
            ::Alt_Mapping::Fixed_Struct,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:683

  template<>
  class SArg_Traits< ::Alt_Mapping::StructSeq>
    : public
        Vector_SArg_Traits_T<
            ::Alt_Mapping::StructSeq,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_interface/interface_sh.cpp:73

class POA_Alt_Mapping;
typedef POA_Alt_Mapping *POA_Alt_Mapping_ptr;

class  POA_Alt_Mapping
  : public virtual PortableServer::ServantBase
{
protected:
  POA_Alt_Mapping (void);

public:
  /// Useful for template programming.
  typedef ::Alt_Mapping _stub_type;
  typedef ::Alt_Mapping_ptr _stub_ptr_type;
  typedef ::Alt_Mapping_var _stub_var_type;

  POA_Alt_Mapping (const POA_Alt_Mapping& rhs);
  virtual ~POA_Alt_Mapping (void);

  virtual ::CORBA::Boolean _is_a (const char* logical_type_id);

  virtual void _dispatch (
      TAO_ServerRequest & req,
      TAO::Portable_Server::Servant_Upcall *servant_upcall);
  
  ::Alt_Mapping *_this (void);
  
  virtual const char* _interface_repository_id (void) const;

  // TAO_IDL - Generated from
  // be/be_visitor_operation/operation_sh.cpp:36

  virtual std::string test_unbounded_string (
    const std::string s1,
    std::string & s2,
    std::string & s3) = 0;

  static void test_unbounded_string_skel (
      TAO_ServerRequest &server_request,
      TAO::Portable_Server::Servant_Upcall *servant_upcall,
      TAO_ServantBase *servant);

  // TAO_IDL - Generated from
  // be/be_visitor_operation/operation_sh.cpp:36

  virtual ::Alt_Mapping::StructSeq test_struct_sequence (
    const ::Alt_Mapping::StructSeq & s1,
    ::Alt_Mapping::StructSeq & s2,
    ::Alt_Mapping::StructSeq & s3) = 0;

  static void test_struct_sequence_skel (
      TAO_ServerRequest &server_request,
      TAO::Portable_Server::Servant_Upcall *servant_upcall,
      TAO_ServantBase *servant);

  // TAO_IDL - Generated from
  // be/be_visitor_operation/operation_sh.cpp:36

  virtual void shutdown (
    void) = 0;

  static void shutdown_skel (
      TAO_ServerRequest &server_request,
      TAO::Portable_Server::Servant_Upcall *servant_upcall,
      TAO_ServantBase *servant);
};

#include /**/ "ace/post.h"

#endif /* ifndef */

