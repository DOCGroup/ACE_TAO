// -*- C++ -*-
/**
 * Code generated by the The ACE ORB (TAO) IDL Compiler v2.4.1
 * TAO and the TAO IDL Compiler have been developed by:
 *       Center for Distributed Object Computing
 *       Washington University
 *       St. Louis, MO
 *       USA
 *       http://www.cs.wustl.edu/~schmidt/doc-center.html
 * and
 *       Distributed Object Computing Laboratory
 *       University of California at Irvine
 *       Irvine, CA
 *       USA
 * and
 *       Institute for Software Integrated Systems
 *       Vanderbilt University
 *       Nashville, TN
 *       USA
 *       http://www.isis.vanderbilt.edu/
 *
 * Information about TAO is available at:
 *     http://www.dre.vanderbilt.edu/~schmidt/TAO.html
 **/

// TAO_IDL - Generated from
// be/be_codegen.cpp:373


#include "testC.h"
#include "tao/CDR.h"
#include "ace/OS_NS_string.h"

#if !defined (__ACE_INLINE__)
#include "testC.inl"
#endif /* !defined INLINE */

// TAO_IDL - Generated from
// be/be_visitor_union/union_cs.cpp:76

test::UnionAllCovered_EnumerationDiscriminant::UnionAllCovered_EnumerationDiscriminant (void)
{
  ACE_OS::memset (&this->u_, 0, sizeof (this->u_));
  this->disc_ = (test::Enumeration) -1;
}

test::UnionAllCovered_EnumerationDiscriminant::UnionAllCovered_EnumerationDiscriminant (const ::test::UnionAllCovered_EnumerationDiscriminant &u)
{
  this->disc_ = u.disc_;
  switch (this->disc_)
  {
    case test::Enum1:
    {
      this->u_.e_enum1_ = u.u_.e_enum1_;
    }
    break;
    case test::Enum2:
    {
      this->u_.e_enum2_ = u.u_.e_enum2_;
    }
    break;
    case test::Enum3:
    {
      this->u_.e_enum3_ = u.u_.e_enum3_;
    }
    break;
    default:
    break;
  }
}

test::UnionAllCovered_EnumerationDiscriminant::~UnionAllCovered_EnumerationDiscriminant (void)
{
  // Finalize.
  this->_reset ();
}

test::UnionAllCovered_EnumerationDiscriminant &
test::UnionAllCovered_EnumerationDiscriminant::operator= (const ::test::UnionAllCovered_EnumerationDiscriminant &u)
{
  if (&u == this)
    {
      return *this;
    }
  
  this->_reset ();
  this->disc_ = u.disc_;

  switch (this->disc_)
  {
    case test::Enum1:
    {
      this->u_.e_enum1_ = u.u_.e_enum1_;
    }
    break;
    case test::Enum2:
    {
      this->u_.e_enum2_ = u.u_.e_enum2_;
    }
    break;
    case test::Enum3:
    {
      this->u_.e_enum3_ = u.u_.e_enum3_;
    }
    break;
    default:
    break;
  }
  
  return *this;
}

/// Reset method to reset old values of a union.
void test::UnionAllCovered_EnumerationDiscriminant::_reset (void)
{
  switch (this->disc_)
  {
    
    case test::Enum1:
      
    break;
    
    case test::Enum2:
      
    break;
    
    case test::Enum3:
      
    break;
    
    default:
    break;
  }
}

// TAO_IDL - Generated from
// be/be_visitor_union/union_cs.cpp:76

test::UnionAllCoveredWithDefault_EnumerationDiscriminant::UnionAllCoveredWithDefault_EnumerationDiscriminant (void)
{
  ACE_OS::memset (&this->u_, 0, sizeof (this->u_));
  this->disc_ = test::Enum3;
}

test::UnionAllCoveredWithDefault_EnumerationDiscriminant::UnionAllCoveredWithDefault_EnumerationDiscriminant (const ::test::UnionAllCoveredWithDefault_EnumerationDiscriminant &u)
{
  this->disc_ = u.disc_;
  switch (this->disc_)
  {
    case test::Enum1:
    {
      this->u_.e_enum1_ = u.u_.e_enum1_;
    }
    break;
    case test::Enum2:
    {
      this->u_.e_enum2_ = u.u_.e_enum2_;
    }
    break;
    case test::Enum3:
    default:
    {
      this->u_.e_def_ = u.u_.e_def_;
    }
    break;
  }
}

test::UnionAllCoveredWithDefault_EnumerationDiscriminant::~UnionAllCoveredWithDefault_EnumerationDiscriminant (void)
{
  // Finalize.
  this->_reset ();
}

test::UnionAllCoveredWithDefault_EnumerationDiscriminant &
test::UnionAllCoveredWithDefault_EnumerationDiscriminant::operator= (const ::test::UnionAllCoveredWithDefault_EnumerationDiscriminant &u)
{
  if (&u == this)
    {
      return *this;
    }
  
  this->_reset ();
  this->disc_ = u.disc_;

  switch (this->disc_)
  {
    case test::Enum1:
    {
      this->u_.e_enum1_ = u.u_.e_enum1_;
    }
    break;
    case test::Enum2:
    {
      this->u_.e_enum2_ = u.u_.e_enum2_;
    }
    break;
    case test::Enum3:
    default:
    {
      this->u_.e_def_ = u.u_.e_def_;
    }
    break;
  }
  
  return *this;
}

/// Reset method to reset old values of a union.
void test::UnionAllCoveredWithDefault_EnumerationDiscriminant::_reset (void)
{
  switch (this->disc_)
  {
    
    case test::Enum1:
      
    break;
    
    case test::Enum2:
      
    break;
    
    case test::Enum3:
    default:
      
    break;
    
  }
}

// TAO_IDL - Generated from
// be/be_visitor_union/union_cs.cpp:76

test::UnionWithDefault_EnumerationDiscriminant::UnionWithDefault_EnumerationDiscriminant (void)
{
  ACE_OS::memset (&this->u_, 0, sizeof (this->u_));
  this->disc_ = test::Enum3;
}

test::UnionWithDefault_EnumerationDiscriminant::UnionWithDefault_EnumerationDiscriminant (const ::test::UnionWithDefault_EnumerationDiscriminant &u)
{
  this->disc_ = u.disc_;
  switch (this->disc_)
  {
    case test::Enum1:
    {
      this->u_.e_enum1_ = u.u_.e_enum1_;
    }
    break;
    case test::Enum2:
    {
      this->u_.e_enum2_ = u.u_.e_enum2_;
    }
    break;
    default:
    {
      this->u_.e_def_ = u.u_.e_def_;
    }
    break;
  }
}

test::UnionWithDefault_EnumerationDiscriminant::~UnionWithDefault_EnumerationDiscriminant (void)
{
  // Finalize.
  this->_reset ();
}

test::UnionWithDefault_EnumerationDiscriminant &
test::UnionWithDefault_EnumerationDiscriminant::operator= (const ::test::UnionWithDefault_EnumerationDiscriminant &u)
{
  if (&u == this)
    {
      return *this;
    }
  
  this->_reset ();
  this->disc_ = u.disc_;

  switch (this->disc_)
  {
    case test::Enum1:
    {
      this->u_.e_enum1_ = u.u_.e_enum1_;
    }
    break;
    case test::Enum2:
    {
      this->u_.e_enum2_ = u.u_.e_enum2_;
    }
    break;
    default:
    {
      this->u_.e_def_ = u.u_.e_def_;
    }
    break;
  }
  
  return *this;
}

/// Reset method to reset old values of a union.
void test::UnionWithDefault_EnumerationDiscriminant::_reset (void)
{
  switch (this->disc_)
  {
    
    case test::Enum1:
      
    break;
    
    case test::Enum2:
      
    break;
    
    default:
      
    break;
    
  }
}

// TAO_IDL - Generated from
// be/be_visitor_union/union_cs.cpp:76

test::UnionWithImplicitDefault_EnumerationDiscriminant::UnionWithImplicitDefault_EnumerationDiscriminant (void)
{
  ACE_OS::memset (&this->u_, 0, sizeof (this->u_));
  this->disc_ = test::Enum3;
}

test::UnionWithImplicitDefault_EnumerationDiscriminant::UnionWithImplicitDefault_EnumerationDiscriminant (const ::test::UnionWithImplicitDefault_EnumerationDiscriminant &u)
{
  this->disc_ = u.disc_;
  switch (this->disc_)
  {
    case test::Enum1:
    {
      this->u_.e_enum1_ = u.u_.e_enum1_;
    }
    break;
    case test::Enum2:
    {
      this->u_.e_enum2_ = u.u_.e_enum2_;
    }
    break;
    default:
    break;
  }
}

test::UnionWithImplicitDefault_EnumerationDiscriminant::~UnionWithImplicitDefault_EnumerationDiscriminant (void)
{
  // Finalize.
  this->_reset ();
}

test::UnionWithImplicitDefault_EnumerationDiscriminant &
test::UnionWithImplicitDefault_EnumerationDiscriminant::operator= (const ::test::UnionWithImplicitDefault_EnumerationDiscriminant &u)
{
  if (&u == this)
    {
      return *this;
    }
  
  this->_reset ();
  this->disc_ = u.disc_;

  switch (this->disc_)
  {
    case test::Enum1:
    {
      this->u_.e_enum1_ = u.u_.e_enum1_;
    }
    break;
    case test::Enum2:
    {
      this->u_.e_enum2_ = u.u_.e_enum2_;
    }
    break;
    default:
    break;
  }
  
  return *this;
}

/// Reset method to reset old values of a union.
void test::UnionWithImplicitDefault_EnumerationDiscriminant::_reset (void)
{
  switch (this->disc_)
  {
    
    case test::Enum1:
      
    break;
    
    case test::Enum2:
      
    break;
    
    default:
    break;
  }
}

// TAO_IDL - Generated from
// be/be_visitor_union/union_cs.cpp:76

test::UnionAllCovered_TypedefedEnumerationDiscriminant::UnionAllCovered_TypedefedEnumerationDiscriminant (void)
{
  ACE_OS::memset (&this->u_, 0, sizeof (this->u_));
  this->disc_ = (test::Enumeration) -1;
}

test::UnionAllCovered_TypedefedEnumerationDiscriminant::UnionAllCovered_TypedefedEnumerationDiscriminant (const ::test::UnionAllCovered_TypedefedEnumerationDiscriminant &u)
{
  this->disc_ = u.disc_;
  switch (this->disc_)
  {
    case test::Enum1:
    {
      this->u_.e_enum1_ = u.u_.e_enum1_;
    }
    break;
    case test::Enum2:
    {
      this->u_.e_enum2_ = u.u_.e_enum2_;
    }
    break;
    case test::Enum3:
    {
      this->u_.e_enum3_ = u.u_.e_enum3_;
    }
    break;
    default:
    break;
  }
}

test::UnionAllCovered_TypedefedEnumerationDiscriminant::~UnionAllCovered_TypedefedEnumerationDiscriminant (void)
{
  // Finalize.
  this->_reset ();
}

test::UnionAllCovered_TypedefedEnumerationDiscriminant &
test::UnionAllCovered_TypedefedEnumerationDiscriminant::operator= (const ::test::UnionAllCovered_TypedefedEnumerationDiscriminant &u)
{
  if (&u == this)
    {
      return *this;
    }
  
  this->_reset ();
  this->disc_ = u.disc_;

  switch (this->disc_)
  {
    case test::Enum1:
    {
      this->u_.e_enum1_ = u.u_.e_enum1_;
    }
    break;
    case test::Enum2:
    {
      this->u_.e_enum2_ = u.u_.e_enum2_;
    }
    break;
    case test::Enum3:
    {
      this->u_.e_enum3_ = u.u_.e_enum3_;
    }
    break;
    default:
    break;
  }
  
  return *this;
}

/// Reset method to reset old values of a union.
void test::UnionAllCovered_TypedefedEnumerationDiscriminant::_reset (void)
{
  switch (this->disc_)
  {
    
    case test::Enum1:
      
    break;
    
    case test::Enum2:
      
    break;
    
    case test::Enum3:
      
    break;
    
    default:
    break;
  }
}

// TAO_IDL - Generated from
// be/be_visitor_union/union_cs.cpp:76

test::UnionAllCoveredWithDefault_TypedefedEnumerationDiscriminant::UnionAllCoveredWithDefault_TypedefedEnumerationDiscriminant (void)
{
  ACE_OS::memset (&this->u_, 0, sizeof (this->u_));
  this->disc_ = test::Enum3;
}

test::UnionAllCoveredWithDefault_TypedefedEnumerationDiscriminant::UnionAllCoveredWithDefault_TypedefedEnumerationDiscriminant (const ::test::UnionAllCoveredWithDefault_TypedefedEnumerationDiscriminant &u)
{
  this->disc_ = u.disc_;
  switch (this->disc_)
  {
    case test::Enum1:
    {
      this->u_.e_enum1_ = u.u_.e_enum1_;
    }
    break;
    case test::Enum2:
    {
      this->u_.e_enum2_ = u.u_.e_enum2_;
    }
    break;
    case test::Enum3:
    default:
    {
      this->u_.e_def_ = u.u_.e_def_;
    }
    break;
  }
}

test::UnionAllCoveredWithDefault_TypedefedEnumerationDiscriminant::~UnionAllCoveredWithDefault_TypedefedEnumerationDiscriminant (void)
{
  // Finalize.
  this->_reset ();
}

test::UnionAllCoveredWithDefault_TypedefedEnumerationDiscriminant &
test::UnionAllCoveredWithDefault_TypedefedEnumerationDiscriminant::operator= (const ::test::UnionAllCoveredWithDefault_TypedefedEnumerationDiscriminant &u)
{
  if (&u == this)
    {
      return *this;
    }
  
  this->_reset ();
  this->disc_ = u.disc_;

  switch (this->disc_)
  {
    case test::Enum1:
    {
      this->u_.e_enum1_ = u.u_.e_enum1_;
    }
    break;
    case test::Enum2:
    {
      this->u_.e_enum2_ = u.u_.e_enum2_;
    }
    break;
    case test::Enum3:
    default:
    {
      this->u_.e_def_ = u.u_.e_def_;
    }
    break;
  }
  
  return *this;
}

/// Reset method to reset old values of a union.
void test::UnionAllCoveredWithDefault_TypedefedEnumerationDiscriminant::_reset (void)
{
  switch (this->disc_)
  {
    
    case test::Enum1:
      
    break;
    
    case test::Enum2:
      
    break;
    
    case test::Enum3:
    default:
      
    break;
    
  }
}

// TAO_IDL - Generated from
// be/be_visitor_union/union_cs.cpp:76

test::UnionWithDefault_TypedefedEnumerationDiscriminant::UnionWithDefault_TypedefedEnumerationDiscriminant (void)
{
  ACE_OS::memset (&this->u_, 0, sizeof (this->u_));
  this->disc_ = test::Enum3;
}

test::UnionWithDefault_TypedefedEnumerationDiscriminant::UnionWithDefault_TypedefedEnumerationDiscriminant (const ::test::UnionWithDefault_TypedefedEnumerationDiscriminant &u)
{
  this->disc_ = u.disc_;
  switch (this->disc_)
  {
    case test::Enum1:
    {
      this->u_.e_enum1_ = u.u_.e_enum1_;
    }
    break;
    case test::Enum2:
    {
      this->u_.e_enum2_ = u.u_.e_enum2_;
    }
    break;
    default:
    {
      this->u_.e_def_ = u.u_.e_def_;
    }
    break;
  }
}

test::UnionWithDefault_TypedefedEnumerationDiscriminant::~UnionWithDefault_TypedefedEnumerationDiscriminant (void)
{
  // Finalize.
  this->_reset ();
}

test::UnionWithDefault_TypedefedEnumerationDiscriminant &
test::UnionWithDefault_TypedefedEnumerationDiscriminant::operator= (const ::test::UnionWithDefault_TypedefedEnumerationDiscriminant &u)
{
  if (&u == this)
    {
      return *this;
    }
  
  this->_reset ();
  this->disc_ = u.disc_;

  switch (this->disc_)
  {
    case test::Enum1:
    {
      this->u_.e_enum1_ = u.u_.e_enum1_;
    }
    break;
    case test::Enum2:
    {
      this->u_.e_enum2_ = u.u_.e_enum2_;
    }
    break;
    default:
    {
      this->u_.e_def_ = u.u_.e_def_;
    }
    break;
  }
  
  return *this;
}

/// Reset method to reset old values of a union.
void test::UnionWithDefault_TypedefedEnumerationDiscriminant::_reset (void)
{
  switch (this->disc_)
  {
    
    case test::Enum1:
      
    break;
    
    case test::Enum2:
      
    break;
    
    default:
      
    break;
    
  }
}

// TAO_IDL - Generated from
// be/be_visitor_union/union_cs.cpp:76

test::UnionWithImplicitDefault_TypedefedEnumerationDiscriminant::UnionWithImplicitDefault_TypedefedEnumerationDiscriminant (void)
{
  ACE_OS::memset (&this->u_, 0, sizeof (this->u_));
  this->disc_ = test::Enum3;
}

test::UnionWithImplicitDefault_TypedefedEnumerationDiscriminant::UnionWithImplicitDefault_TypedefedEnumerationDiscriminant (const ::test::UnionWithImplicitDefault_TypedefedEnumerationDiscriminant &u)
{
  this->disc_ = u.disc_;
  switch (this->disc_)
  {
    case test::Enum1:
    {
      this->u_.e_enum1_ = u.u_.e_enum1_;
    }
    break;
    case test::Enum2:
    {
      this->u_.e_enum2_ = u.u_.e_enum2_;
    }
    break;
    default:
    break;
  }
}

test::UnionWithImplicitDefault_TypedefedEnumerationDiscriminant::~UnionWithImplicitDefault_TypedefedEnumerationDiscriminant (void)
{
  // Finalize.
  this->_reset ();
}

test::UnionWithImplicitDefault_TypedefedEnumerationDiscriminant &
test::UnionWithImplicitDefault_TypedefedEnumerationDiscriminant::operator= (const ::test::UnionWithImplicitDefault_TypedefedEnumerationDiscriminant &u)
{
  if (&u == this)
    {
      return *this;
    }
  
  this->_reset ();
  this->disc_ = u.disc_;

  switch (this->disc_)
  {
    case test::Enum1:
    {
      this->u_.e_enum1_ = u.u_.e_enum1_;
    }
    break;
    case test::Enum2:
    {
      this->u_.e_enum2_ = u.u_.e_enum2_;
    }
    break;
    default:
    break;
  }
  
  return *this;
}

/// Reset method to reset old values of a union.
void test::UnionWithImplicitDefault_TypedefedEnumerationDiscriminant::_reset (void)
{
  switch (this->disc_)
  {
    
    case test::Enum1:
      
    break;
    
    case test::Enum2:
      
    break;
    
    default:
    break;
  }
}

// TAO_IDL - Generated from
// be/be_visitor_union/union_cs.cpp:76

test::UnionAllCovered_BooleanDiscriminant::UnionAllCovered_BooleanDiscriminant (void)
{
  ACE_OS::memset (&this->u_, 0, sizeof (this->u_));
  this->disc_ = true;
  
}

test::UnionAllCovered_BooleanDiscriminant::UnionAllCovered_BooleanDiscriminant (const ::test::UnionAllCovered_BooleanDiscriminant &u)
{
  this->disc_ = u.disc_;
  
  if (this->disc_)
    {
      this->u_.e_true_ = u.u_.e_true_;
    }
  
  if (!this->disc_)
    {
      this->u_.e_false_ = u.u_.e_false_;
    }
  
}

test::UnionAllCovered_BooleanDiscriminant::~UnionAllCovered_BooleanDiscriminant (void)
{
  // Finalize.
  this->_reset ();
}

test::UnionAllCovered_BooleanDiscriminant &
test::UnionAllCovered_BooleanDiscriminant::operator= (const ::test::UnionAllCovered_BooleanDiscriminant &u)
{
  if (&u == this)
    {
      return *this;
    }
  
  this->_reset ();
  this->disc_ = u.disc_;

  
  if (this->disc_)
    {
      this->u_.e_true_ = u.u_.e_true_;
    }
  
  if (!this->disc_)
    {
      this->u_.e_false_ = u.u_.e_false_;
    }
  
  return *this;
}

/// Reset method to reset old values of a union.
void test::UnionAllCovered_BooleanDiscriminant::_reset (void)
{
  
  if (this->disc_)
    {
      
    }
  
  if (!this->disc_)
    {
      
    }
  
}

// TAO_IDL - Generated from
// be/be_visitor_union/union_cs.cpp:76

test::UnionWithDefault_BooleanDiscriminant::UnionWithDefault_BooleanDiscriminant (void)
{
  ACE_OS::memset (&this->u_, 0, sizeof (this->u_));
  this->disc_ = false;
}

test::UnionWithDefault_BooleanDiscriminant::UnionWithDefault_BooleanDiscriminant (const ::test::UnionWithDefault_BooleanDiscriminant &u)
{
  this->disc_ = u.disc_;
  
  if (this->disc_)
    {
      this->u_.e_true_ = u.u_.e_true_;
    }
  
  if (!this->disc_)
    {
      this->u_.e_def_ = u.u_.e_def_;
    }
  
}

test::UnionWithDefault_BooleanDiscriminant::~UnionWithDefault_BooleanDiscriminant (void)
{
  // Finalize.
  this->_reset ();
}

test::UnionWithDefault_BooleanDiscriminant &
test::UnionWithDefault_BooleanDiscriminant::operator= (const ::test::UnionWithDefault_BooleanDiscriminant &u)
{
  if (&u == this)
    {
      return *this;
    }
  
  this->_reset ();
  this->disc_ = u.disc_;

  
  if (this->disc_)
    {
      this->u_.e_true_ = u.u_.e_true_;
    }
  
  if (!this->disc_)
    {
      this->u_.e_def_ = u.u_.e_def_;
    }
  
  return *this;
}

/// Reset method to reset old values of a union.
void test::UnionWithDefault_BooleanDiscriminant::_reset (void)
{
  
  if (this->disc_)
    {
      
    }
  
  if (!this->disc_)
    {
      
    }
  
}

// TAO_IDL - Generated from
// be/be_visitor_union/union_cs.cpp:76

test::UnionWithImplicitDefault_BooleanDiscriminant::UnionWithImplicitDefault_BooleanDiscriminant (void)
{
  ACE_OS::memset (&this->u_, 0, sizeof (this->u_));
  this->disc_ = false;
}

test::UnionWithImplicitDefault_BooleanDiscriminant::UnionWithImplicitDefault_BooleanDiscriminant (const ::test::UnionWithImplicitDefault_BooleanDiscriminant &u)
{
  this->disc_ = u.disc_;
  
  if (this->disc_)
    {
      this->u_.e_true_ = u.u_.e_true_;
    }
  
}

test::UnionWithImplicitDefault_BooleanDiscriminant::~UnionWithImplicitDefault_BooleanDiscriminant (void)
{
  // Finalize.
  this->_reset ();
}

test::UnionWithImplicitDefault_BooleanDiscriminant &
test::UnionWithImplicitDefault_BooleanDiscriminant::operator= (const ::test::UnionWithImplicitDefault_BooleanDiscriminant &u)
{
  if (&u == this)
    {
      return *this;
    }
  
  this->_reset ();
  this->disc_ = u.disc_;

  
  if (this->disc_)
    {
      this->u_.e_true_ = u.u_.e_true_;
    }
  
  return *this;
}

/// Reset method to reset old values of a union.
void test::UnionWithImplicitDefault_BooleanDiscriminant::_reset (void)
{
  
  if (this->disc_)
    {
      
    }
  
}

// TAO_IDL - Generated from
// be/be_visitor_union/union_cs.cpp:76

test::UnionAllCovered_CharDiscriminant::UnionAllCovered_CharDiscriminant (void)
{
  ACE_OS::memset (&this->u_, 0, sizeof (this->u_));
  this->disc_ = '\x0';
  
}

test::UnionAllCovered_CharDiscriminant::UnionAllCovered_CharDiscriminant (const ::test::UnionAllCovered_CharDiscriminant &u)
{
  this->disc_ = u.disc_;
  switch (this->disc_)
  {
    case '\x0':
    case '\x1':
    case '\x2':
    case '\x3':
    case '\x4':
    case '\x5':
    case '\x6':
    case '\a':
    case '\b':
    case '\t':
    case '\n':
    case '\v':
    case '\f':
    case '\r':
    case '\xe':
    case '\xf':
    case '\x10':
    case '\x11':
    case '\x12':
    case '\x13':
    case '\x14':
    case '\x15':
    case '\x16':
    case '\x17':
    case '\x18':
    case '\x19':
    case '\x1a':
    case '\x1b':
    case '\x1c':
    case '\x1d':
    case '\x1e':
    case '\x1f':
    case ' ':
    case '!':
    case '"':
    case '#':
    case '$':
    case '%':
    case '&':
    case '\'':
    case '(':
    case ')':
    case '*':
    case '+':
    case ',':
    case '-':
    case '.':
    case '/':
    case '0':
    case '1':
    case '2':
    case '3':
    case '4':
    case '5':
    case '6':
    case '7':
    case '8':
    case '9':
    case ':':
    case ';':
    case '<':
    case '=':
    case '>':
    case '?':
    case '@':
    case 'A':
    case 'B':
    case 'C':
    case 'D':
    case 'E':
    case 'F':
    case 'G':
    case 'H':
    case 'I':
    case 'J':
    case 'K':
    case 'L':
    case 'M':
    case 'N':
    case 'O':
    case 'P':
    case 'Q':
    case 'R':
    case 'S':
    case 'T':
    case 'U':
    case 'V':
    case 'W':
    case 'X':
    case 'Y':
    case 'Z':
    case '[':
    case '\\':
    case ']':
    case '^':
    case '_':
    case '`':
    case 'a':
    case 'b':
    case 'c':
    case 'd':
    case 'e':
    case 'f':
    case 'g':
    case 'h':
    case 'i':
    case 'j':
    case 'k':
    case 'l':
    case 'm':
    case 'n':
    case 'o':
    case 'p':
    case 'q':
    case 'r':
    case 's':
    case 't':
    case 'u':
    case 'v':
    case 'w':
    case 'x':
    case 'y':
    case 'z':
    case '{':
    case '|':
    case '}':
    case '~':
    case '\x7f':
    case '\x80':
    case '\x81':
    case '\x82':
    case '\x83':
    case '\x84':
    case '\x85':
    case '\x86':
    case '\x87':
    case '\x88':
    case '\x89':
    case '\x8a':
    case '\x8b':
    case '\x8c':
    case '\x8d':
    case '\x8e':
    case '\x8f':
    case '\x90':
    case '\x91':
    case '\x92':
    case '\x93':
    case '\x94':
    case '\x95':
    case '\x96':
    case '\x97':
    case '\x98':
    case '\x99':
    case '\x9a':
    case '\x9b':
    case '\x9c':
    case '\x9d':
    case '\x9e':
    case '\x9f':
    case '\xa0':
    case '\xa1':
    case '\xa2':
    case '\xa3':
    case '\xa4':
    case '\xa5':
    case '\xa6':
    case '\xa7':
    case '\xa8':
    case '\xa9':
    case '\xaa':
    case '\xab':
    case '\xac':
    case '\xad':
    case '\xae':
    case '\xaf':
    case '\xb0':
    case '\xb1':
    case '\xb2':
    case '\xb3':
    case '\xb4':
    case '\xb5':
    case '\xb6':
    case '\xb7':
    case '\xb8':
    case '\xb9':
    case '\xba':
    case '\xbb':
    case '\xbc':
    case '\xbd':
    case '\xbe':
    case '\xbf':
    case '\xc0':
    case '\xc1':
    case '\xc2':
    case '\xc3':
    case '\xc4':
    case '\xc5':
    case '\xc6':
    case '\xc7':
    case '\xc8':
    case '\xc9':
    case '\xca':
    case '\xcb':
    case '\xcc':
    case '\xcd':
    case '\xce':
    case '\xcf':
    case '\xd0':
    case '\xd1':
    case '\xd2':
    case '\xd3':
    case '\xd4':
    case '\xd5':
    case '\xd6':
    case '\xd7':
    case '\xd8':
    case '\xd9':
    case '\xda':
    case '\xdb':
    case '\xdc':
    case '\xdd':
    case '\xde':
    case '\xdf':
    case '\xe0':
    case '\xe1':
    case '\xe2':
    case '\xe3':
    case '\xe4':
    case '\xe5':
    case '\xe6':
    case '\xe7':
    case '\xe8':
    case '\xe9':
    case '\xea':
    case '\xeb':
    case '\xec':
    case '\xed':
    case '\xee':
    case '\xef':
    case '\xf0':
    case '\xf1':
    case '\xf2':
    case '\xf3':
    case '\xf4':
    case '\xf5':
    case '\xf6':
    case '\xf7':
    case '\xf8':
    case '\xf9':
    case '\xfa':
    case '\xfb':
    case '\xfc':
    case '\xfd':
    case '\xfe':
    case '\xff':
    {
      this->u_.e_chars_ = u.u_.e_chars_;
    }
    break;
  }
}

test::UnionAllCovered_CharDiscriminant::~UnionAllCovered_CharDiscriminant (void)
{
  // Finalize.
  this->_reset ();
}

test::UnionAllCovered_CharDiscriminant &
test::UnionAllCovered_CharDiscriminant::operator= (const ::test::UnionAllCovered_CharDiscriminant &u)
{
  if (&u == this)
    {
      return *this;
    }
  
  this->_reset ();
  this->disc_ = u.disc_;

  switch (this->disc_)
  {
    case '\x0':
    case '\x1':
    case '\x2':
    case '\x3':
    case '\x4':
    case '\x5':
    case '\x6':
    case '\a':
    case '\b':
    case '\t':
    case '\n':
    case '\v':
    case '\f':
    case '\r':
    case '\xe':
    case '\xf':
    case '\x10':
    case '\x11':
    case '\x12':
    case '\x13':
    case '\x14':
    case '\x15':
    case '\x16':
    case '\x17':
    case '\x18':
    case '\x19':
    case '\x1a':
    case '\x1b':
    case '\x1c':
    case '\x1d':
    case '\x1e':
    case '\x1f':
    case ' ':
    case '!':
    case '"':
    case '#':
    case '$':
    case '%':
    case '&':
    case '\'':
    case '(':
    case ')':
    case '*':
    case '+':
    case ',':
    case '-':
    case '.':
    case '/':
    case '0':
    case '1':
    case '2':
    case '3':
    case '4':
    case '5':
    case '6':
    case '7':
    case '8':
    case '9':
    case ':':
    case ';':
    case '<':
    case '=':
    case '>':
    case '?':
    case '@':
    case 'A':
    case 'B':
    case 'C':
    case 'D':
    case 'E':
    case 'F':
    case 'G':
    case 'H':
    case 'I':
    case 'J':
    case 'K':
    case 'L':
    case 'M':
    case 'N':
    case 'O':
    case 'P':
    case 'Q':
    case 'R':
    case 'S':
    case 'T':
    case 'U':
    case 'V':
    case 'W':
    case 'X':
    case 'Y':
    case 'Z':
    case '[':
    case '\\':
    case ']':
    case '^':
    case '_':
    case '`':
    case 'a':
    case 'b':
    case 'c':
    case 'd':
    case 'e':
    case 'f':
    case 'g':
    case 'h':
    case 'i':
    case 'j':
    case 'k':
    case 'l':
    case 'm':
    case 'n':
    case 'o':
    case 'p':
    case 'q':
    case 'r':
    case 's':
    case 't':
    case 'u':
    case 'v':
    case 'w':
    case 'x':
    case 'y':
    case 'z':
    case '{':
    case '|':
    case '}':
    case '~':
    case '\x7f':
    case '\x80':
    case '\x81':
    case '\x82':
    case '\x83':
    case '\x84':
    case '\x85':
    case '\x86':
    case '\x87':
    case '\x88':
    case '\x89':
    case '\x8a':
    case '\x8b':
    case '\x8c':
    case '\x8d':
    case '\x8e':
    case '\x8f':
    case '\x90':
    case '\x91':
    case '\x92':
    case '\x93':
    case '\x94':
    case '\x95':
    case '\x96':
    case '\x97':
    case '\x98':
    case '\x99':
    case '\x9a':
    case '\x9b':
    case '\x9c':
    case '\x9d':
    case '\x9e':
    case '\x9f':
    case '\xa0':
    case '\xa1':
    case '\xa2':
    case '\xa3':
    case '\xa4':
    case '\xa5':
    case '\xa6':
    case '\xa7':
    case '\xa8':
    case '\xa9':
    case '\xaa':
    case '\xab':
    case '\xac':
    case '\xad':
    case '\xae':
    case '\xaf':
    case '\xb0':
    case '\xb1':
    case '\xb2':
    case '\xb3':
    case '\xb4':
    case '\xb5':
    case '\xb6':
    case '\xb7':
    case '\xb8':
    case '\xb9':
    case '\xba':
    case '\xbb':
    case '\xbc':
    case '\xbd':
    case '\xbe':
    case '\xbf':
    case '\xc0':
    case '\xc1':
    case '\xc2':
    case '\xc3':
    case '\xc4':
    case '\xc5':
    case '\xc6':
    case '\xc7':
    case '\xc8':
    case '\xc9':
    case '\xca':
    case '\xcb':
    case '\xcc':
    case '\xcd':
    case '\xce':
    case '\xcf':
    case '\xd0':
    case '\xd1':
    case '\xd2':
    case '\xd3':
    case '\xd4':
    case '\xd5':
    case '\xd6':
    case '\xd7':
    case '\xd8':
    case '\xd9':
    case '\xda':
    case '\xdb':
    case '\xdc':
    case '\xdd':
    case '\xde':
    case '\xdf':
    case '\xe0':
    case '\xe1':
    case '\xe2':
    case '\xe3':
    case '\xe4':
    case '\xe5':
    case '\xe6':
    case '\xe7':
    case '\xe8':
    case '\xe9':
    case '\xea':
    case '\xeb':
    case '\xec':
    case '\xed':
    case '\xee':
    case '\xef':
    case '\xf0':
    case '\xf1':
    case '\xf2':
    case '\xf3':
    case '\xf4':
    case '\xf5':
    case '\xf6':
    case '\xf7':
    case '\xf8':
    case '\xf9':
    case '\xfa':
    case '\xfb':
    case '\xfc':
    case '\xfd':
    case '\xfe':
    case '\xff':
    {
      this->u_.e_chars_ = u.u_.e_chars_;
    }
    break;
  }
  
  return *this;
}

/// Reset method to reset old values of a union.
void test::UnionAllCovered_CharDiscriminant::_reset (void)
{
  switch (this->disc_)
  {
    
    case '\x0':
    case '\x1':
    case '\x2':
    case '\x3':
    case '\x4':
    case '\x5':
    case '\x6':
    case '\a':
    case '\b':
    case '\t':
    case '\n':
    case '\v':
    case '\f':
    case '\r':
    case '\xe':
    case '\xf':
    case '\x10':
    case '\x11':
    case '\x12':
    case '\x13':
    case '\x14':
    case '\x15':
    case '\x16':
    case '\x17':
    case '\x18':
    case '\x19':
    case '\x1a':
    case '\x1b':
    case '\x1c':
    case '\x1d':
    case '\x1e':
    case '\x1f':
    case ' ':
    case '!':
    case '"':
    case '#':
    case '$':
    case '%':
    case '&':
    case '\'':
    case '(':
    case ')':
    case '*':
    case '+':
    case ',':
    case '-':
    case '.':
    case '/':
    case '0':
    case '1':
    case '2':
    case '3':
    case '4':
    case '5':
    case '6':
    case '7':
    case '8':
    case '9':
    case ':':
    case ';':
    case '<':
    case '=':
    case '>':
    case '?':
    case '@':
    case 'A':
    case 'B':
    case 'C':
    case 'D':
    case 'E':
    case 'F':
    case 'G':
    case 'H':
    case 'I':
    case 'J':
    case 'K':
    case 'L':
    case 'M':
    case 'N':
    case 'O':
    case 'P':
    case 'Q':
    case 'R':
    case 'S':
    case 'T':
    case 'U':
    case 'V':
    case 'W':
    case 'X':
    case 'Y':
    case 'Z':
    case '[':
    case '\\':
    case ']':
    case '^':
    case '_':
    case '`':
    case 'a':
    case 'b':
    case 'c':
    case 'd':
    case 'e':
    case 'f':
    case 'g':
    case 'h':
    case 'i':
    case 'j':
    case 'k':
    case 'l':
    case 'm':
    case 'n':
    case 'o':
    case 'p':
    case 'q':
    case 'r':
    case 's':
    case 't':
    case 'u':
    case 'v':
    case 'w':
    case 'x':
    case 'y':
    case 'z':
    case '{':
    case '|':
    case '}':
    case '~':
    case '\x7f':
    case '\x80':
    case '\x81':
    case '\x82':
    case '\x83':
    case '\x84':
    case '\x85':
    case '\x86':
    case '\x87':
    case '\x88':
    case '\x89':
    case '\x8a':
    case '\x8b':
    case '\x8c':
    case '\x8d':
    case '\x8e':
    case '\x8f':
    case '\x90':
    case '\x91':
    case '\x92':
    case '\x93':
    case '\x94':
    case '\x95':
    case '\x96':
    case '\x97':
    case '\x98':
    case '\x99':
    case '\x9a':
    case '\x9b':
    case '\x9c':
    case '\x9d':
    case '\x9e':
    case '\x9f':
    case '\xa0':
    case '\xa1':
    case '\xa2':
    case '\xa3':
    case '\xa4':
    case '\xa5':
    case '\xa6':
    case '\xa7':
    case '\xa8':
    case '\xa9':
    case '\xaa':
    case '\xab':
    case '\xac':
    case '\xad':
    case '\xae':
    case '\xaf':
    case '\xb0':
    case '\xb1':
    case '\xb2':
    case '\xb3':
    case '\xb4':
    case '\xb5':
    case '\xb6':
    case '\xb7':
    case '\xb8':
    case '\xb9':
    case '\xba':
    case '\xbb':
    case '\xbc':
    case '\xbd':
    case '\xbe':
    case '\xbf':
    case '\xc0':
    case '\xc1':
    case '\xc2':
    case '\xc3':
    case '\xc4':
    case '\xc5':
    case '\xc6':
    case '\xc7':
    case '\xc8':
    case '\xc9':
    case '\xca':
    case '\xcb':
    case '\xcc':
    case '\xcd':
    case '\xce':
    case '\xcf':
    case '\xd0':
    case '\xd1':
    case '\xd2':
    case '\xd3':
    case '\xd4':
    case '\xd5':
    case '\xd6':
    case '\xd7':
    case '\xd8':
    case '\xd9':
    case '\xda':
    case '\xdb':
    case '\xdc':
    case '\xdd':
    case '\xde':
    case '\xdf':
    case '\xe0':
    case '\xe1':
    case '\xe2':
    case '\xe3':
    case '\xe4':
    case '\xe5':
    case '\xe6':
    case '\xe7':
    case '\xe8':
    case '\xe9':
    case '\xea':
    case '\xeb':
    case '\xec':
    case '\xed':
    case '\xee':
    case '\xef':
    case '\xf0':
    case '\xf1':
    case '\xf2':
    case '\xf3':
    case '\xf4':
    case '\xf5':
    case '\xf6':
    case '\xf7':
    case '\xf8':
    case '\xf9':
    case '\xfa':
    case '\xfb':
    case '\xfc':
    case '\xfd':
    case '\xfe':
    case '\xff':
      
    break;
    
  }
}

// TAO_IDL - Generated from
// be/be_visitor_union/union_cs.cpp:76

test::UnionWithDefault_CharDiscriminant::UnionWithDefault_CharDiscriminant (void)
{
  ACE_OS::memset (&this->u_, 0, sizeof (this->u_));
  this->disc_ = '\10';
}

test::UnionWithDefault_CharDiscriminant::UnionWithDefault_CharDiscriminant (const ::test::UnionWithDefault_CharDiscriminant &u)
{
  this->disc_ = u.disc_;
  switch (this->disc_)
  {
    case '\x0':
    case '\x1':
    case '\x2':
    case '\x3':
    case '\x4':
    case '\x5':
    case '\x6':
    case '\a':
    {
      this->u_.e_chars_ = u.u_.e_chars_;
    }
    break;
    default:
    {
      this->u_.e_def_ = u.u_.e_def_;
    }
    break;
  }
}

test::UnionWithDefault_CharDiscriminant::~UnionWithDefault_CharDiscriminant (void)
{
  // Finalize.
  this->_reset ();
}

test::UnionWithDefault_CharDiscriminant &
test::UnionWithDefault_CharDiscriminant::operator= (const ::test::UnionWithDefault_CharDiscriminant &u)
{
  if (&u == this)
    {
      return *this;
    }
  
  this->_reset ();
  this->disc_ = u.disc_;

  switch (this->disc_)
  {
    case '\x0':
    case '\x1':
    case '\x2':
    case '\x3':
    case '\x4':
    case '\x5':
    case '\x6':
    case '\a':
    {
      this->u_.e_chars_ = u.u_.e_chars_;
    }
    break;
    default:
    {
      this->u_.e_def_ = u.u_.e_def_;
    }
    break;
  }
  
  return *this;
}

/// Reset method to reset old values of a union.
void test::UnionWithDefault_CharDiscriminant::_reset (void)
{
  switch (this->disc_)
  {
    
    case '\x0':
    case '\x1':
    case '\x2':
    case '\x3':
    case '\x4':
    case '\x5':
    case '\x6':
    case '\a':
      
    break;
    
    default:
      
    break;
    
  }
}

// TAO_IDL - Generated from
// be/be_visitor_union/union_cs.cpp:76

test::UnionWithImplicitDefault_CharDiscriminant::UnionWithImplicitDefault_CharDiscriminant (void)
{
  ACE_OS::memset (&this->u_, 0, sizeof (this->u_));
  this->disc_ = '\10';
}

test::UnionWithImplicitDefault_CharDiscriminant::UnionWithImplicitDefault_CharDiscriminant (const ::test::UnionWithImplicitDefault_CharDiscriminant &u)
{
  this->disc_ = u.disc_;
  switch (this->disc_)
  {
    case '\x0':
    case '\x1':
    case '\x2':
    case '\x3':
    case '\x4':
    case '\x5':
    case '\x6':
    case '\a':
    {
      this->u_.e_chars_ = u.u_.e_chars_;
    }
    break;
    default:
    break;
  }
}

test::UnionWithImplicitDefault_CharDiscriminant::~UnionWithImplicitDefault_CharDiscriminant (void)
{
  // Finalize.
  this->_reset ();
}

test::UnionWithImplicitDefault_CharDiscriminant &
test::UnionWithImplicitDefault_CharDiscriminant::operator= (const ::test::UnionWithImplicitDefault_CharDiscriminant &u)
{
  if (&u == this)
    {
      return *this;
    }
  
  this->_reset ();
  this->disc_ = u.disc_;

  switch (this->disc_)
  {
    case '\x0':
    case '\x1':
    case '\x2':
    case '\x3':
    case '\x4':
    case '\x5':
    case '\x6':
    case '\a':
    {
      this->u_.e_chars_ = u.u_.e_chars_;
    }
    break;
    default:
    break;
  }
  
  return *this;
}

/// Reset method to reset old values of a union.
void test::UnionWithImplicitDefault_CharDiscriminant::_reset (void)
{
  switch (this->disc_)
  {
    
    case '\x0':
    case '\x1':
    case '\x2':
    case '\x3':
    case '\x4':
    case '\x5':
    case '\x6':
    case '\a':
      
    break;
    
    default:
    break;
  }
}

// TAO_IDL - Generated from
// be/be_visitor_union/union_cs.cpp:76

test::UnionWithDefault_LongDiscriminant::UnionWithDefault_LongDiscriminant (void)
{
  ACE_OS::memset (&this->u_, 0, sizeof (this->u_));
  this->disc_ = -2147483647;
}

test::UnionWithDefault_LongDiscriminant::UnionWithDefault_LongDiscriminant (const ::test::UnionWithDefault_LongDiscriminant &u)
{
  this->disc_ = u.disc_;
  switch (this->disc_)
  {
    case 1:
    {
      this->u_.e_case1_ = u.u_.e_case1_;
    }
    break;
    case 2:
    {
      this->u_.e_case2_ = u.u_.e_case2_;
    }
    break;
    case 3:
    {
      this->u_.e_case3_ = u.u_.e_case3_;
    }
    break;
    default:
    {
      this->u_.e_def_ = u.u_.e_def_;
    }
    break;
  }
}

test::UnionWithDefault_LongDiscriminant::~UnionWithDefault_LongDiscriminant (void)
{
  // Finalize.
  this->_reset ();
}

test::UnionWithDefault_LongDiscriminant &
test::UnionWithDefault_LongDiscriminant::operator= (const ::test::UnionWithDefault_LongDiscriminant &u)
{
  if (&u == this)
    {
      return *this;
    }
  
  this->_reset ();
  this->disc_ = u.disc_;

  switch (this->disc_)
  {
    case 1:
    {
      this->u_.e_case1_ = u.u_.e_case1_;
    }
    break;
    case 2:
    {
      this->u_.e_case2_ = u.u_.e_case2_;
    }
    break;
    case 3:
    {
      this->u_.e_case3_ = u.u_.e_case3_;
    }
    break;
    default:
    {
      this->u_.e_def_ = u.u_.e_def_;
    }
    break;
  }
  
  return *this;
}

/// Reset method to reset old values of a union.
void test::UnionWithDefault_LongDiscriminant::_reset (void)
{
  switch (this->disc_)
  {
    
    case 1:
      
    break;
    
    case 2:
      
    break;
    
    case 3:
      
    break;
    
    default:
      
    break;
    
  }
}

// TAO_IDL - Generated from
// be/be_visitor_union/union_cs.cpp:76

test::UnionWithImplicitDefault_LongDiscriminant::UnionWithImplicitDefault_LongDiscriminant (void)
{
  ACE_OS::memset (&this->u_, 0, sizeof (this->u_));
  this->disc_ = -2147483647;
}

test::UnionWithImplicitDefault_LongDiscriminant::UnionWithImplicitDefault_LongDiscriminant (const ::test::UnionWithImplicitDefault_LongDiscriminant &u)
{
  this->disc_ = u.disc_;
  switch (this->disc_)
  {
    case 1:
    {
      this->u_.e_case1_ = u.u_.e_case1_;
    }
    break;
    case 2:
    {
      this->u_.e_case2_ = u.u_.e_case2_;
    }
    break;
    case 3:
    {
      this->u_.e_case3_ = u.u_.e_case3_;
    }
    break;
    default:
    break;
  }
}

test::UnionWithImplicitDefault_LongDiscriminant::~UnionWithImplicitDefault_LongDiscriminant (void)
{
  // Finalize.
  this->_reset ();
}

test::UnionWithImplicitDefault_LongDiscriminant &
test::UnionWithImplicitDefault_LongDiscriminant::operator= (const ::test::UnionWithImplicitDefault_LongDiscriminant &u)
{
  if (&u == this)
    {
      return *this;
    }
  
  this->_reset ();
  this->disc_ = u.disc_;

  switch (this->disc_)
  {
    case 1:
    {
      this->u_.e_case1_ = u.u_.e_case1_;
    }
    break;
    case 2:
    {
      this->u_.e_case2_ = u.u_.e_case2_;
    }
    break;
    case 3:
    {
      this->u_.e_case3_ = u.u_.e_case3_;
    }
    break;
    default:
    break;
  }
  
  return *this;
}

/// Reset method to reset old values of a union.
void test::UnionWithImplicitDefault_LongDiscriminant::_reset (void)
{
  switch (this->disc_)
  {
    
    case 1:
      
    break;
    
    case 2:
      
    break;
    
    case 3:
      
    break;
    
    default:
    break;
  }
}

// TAO_IDL - Generated from
// be/be_visitor_enum/cdr_op_cs.cpp:34


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (TAO_OutputCDR &strm, test::Enumeration _tao_enumerator)
{
  return strm << static_cast< ::CORBA::ULong> (_tao_enumerator);
}

::CORBA::Boolean operator>> (TAO_InputCDR &strm, test::Enumeration & _tao_enumerator)
{
  ::CORBA::ULong _tao_temp = 0;
  ::CORBA::Boolean const _tao_success = strm >> _tao_temp;
  
  if (_tao_success)
    {
      _tao_enumerator = static_cast<test::Enumeration> (_tao_temp);
    }
  
  return _tao_success;
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_union/cdr_op_cs.cpp:74


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const test::UnionAllCovered_EnumerationDiscriminant &_tao_union
  )
{
  if ( !(strm << _tao_union._d ()) )
    {
      return false;
    }
  
  ::CORBA::Boolean result = true;

  switch (_tao_union._d ())
  {
    case test::Enum1:
      {
        result = strm << _tao_union.e_enum1 ();
      }
      break;
    case test::Enum2:
      {
        result = strm << _tao_union.e_enum2 ();
      }
      break;
    case test::Enum3:
      {
        result = strm << _tao_union.e_enum3 ();
      }
      break;
    default:
      break;
  }

  return result;
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    test::UnionAllCovered_EnumerationDiscriminant &_tao_union
  )
{
  test::Enumeration _tao_discriminant;
  if ( !(strm >> _tao_discriminant) )
    {
      return false;
    }
  
  ::CORBA::Boolean result = true;

  switch (_tao_discriminant)
  {
    case test::Enum1:
      {
        CORBA::Long _tao_union_tmp;
        result = strm >> _tao_union_tmp;

        if (result)
          {
            _tao_union.e_enum1 (_tao_union_tmp);
            _tao_union._d (_tao_discriminant);
          }
      }
      break;
    case test::Enum2:
      {
        CORBA::Long _tao_union_tmp;
        result = strm >> _tao_union_tmp;

        if (result)
          {
            _tao_union.e_enum2 (_tao_union_tmp);
            _tao_union._d (_tao_discriminant);
          }
      }
      break;
    case test::Enum3:
      {
        CORBA::Long _tao_union_tmp;
        result = strm >> _tao_union_tmp;

        if (result)
          {
            _tao_union.e_enum3 (_tao_union_tmp);
            _tao_union._d (_tao_discriminant);
          }
      }
      break;
    default:
      _tao_union._default ();
      // For maximum interop compatibility, force the same value as transmitted
      _tao_union._d (_tao_discriminant);
      break;
  }

  return result;
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_union/cdr_op_cs.cpp:74


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const test::UnionAllCoveredWithDefault_EnumerationDiscriminant &_tao_union
  )
{
  if ( !(strm << _tao_union._d ()) )
    {
      return false;
    }
  
  ::CORBA::Boolean result = true;

  switch (_tao_union._d ())
  {
    case test::Enum1:
      {
        result = strm << _tao_union.e_enum1 ();
      }
      break;
    case test::Enum2:
      {
        result = strm << _tao_union.e_enum2 ();
      }
      break;
    case test::Enum3:
    default:
      {
        result = strm << _tao_union.e_def ();
      }
      break;
  }

  return result;
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    test::UnionAllCoveredWithDefault_EnumerationDiscriminant &_tao_union
  )
{
  test::Enumeration _tao_discriminant;
  if ( !(strm >> _tao_discriminant) )
    {
      return false;
    }
  
  ::CORBA::Boolean result = true;

  switch (_tao_discriminant)
  {
    case test::Enum1:
      {
        CORBA::Long _tao_union_tmp;
        result = strm >> _tao_union_tmp;

        if (result)
          {
            _tao_union.e_enum1 (_tao_union_tmp);
            _tao_union._d (_tao_discriminant);
          }
      }
      break;
    case test::Enum2:
      {
        CORBA::Long _tao_union_tmp;
        result = strm >> _tao_union_tmp;

        if (result)
          {
            _tao_union.e_enum2 (_tao_union_tmp);
            _tao_union._d (_tao_discriminant);
          }
      }
      break;
    case test::Enum3:
    default:
      {
        CORBA::Long _tao_union_tmp;
        result = strm >> _tao_union_tmp;

        if (result)
          {
            _tao_union.e_def (_tao_union_tmp);
            _tao_union._d (_tao_discriminant);
          }
      }
      break;
  }

  return result;
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_union/cdr_op_cs.cpp:74


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const test::UnionWithDefault_EnumerationDiscriminant &_tao_union
  )
{
  if ( !(strm << _tao_union._d ()) )
    {
      return false;
    }
  
  ::CORBA::Boolean result = true;

  switch (_tao_union._d ())
  {
    case test::Enum1:
      {
        result = strm << _tao_union.e_enum1 ();
      }
      break;
    case test::Enum2:
      {
        result = strm << _tao_union.e_enum2 ();
      }
      break;
    default:
      {
        result = strm << _tao_union.e_def ();
      }
      break;
  }

  return result;
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    test::UnionWithDefault_EnumerationDiscriminant &_tao_union
  )
{
  test::Enumeration _tao_discriminant;
  if ( !(strm >> _tao_discriminant) )
    {
      return false;
    }
  
  ::CORBA::Boolean result = true;

  switch (_tao_discriminant)
  {
    case test::Enum1:
      {
        CORBA::Long _tao_union_tmp;
        result = strm >> _tao_union_tmp;

        if (result)
          {
            _tao_union.e_enum1 (_tao_union_tmp);
            _tao_union._d (_tao_discriminant);
          }
      }
      break;
    case test::Enum2:
      {
        CORBA::Long _tao_union_tmp;
        result = strm >> _tao_union_tmp;

        if (result)
          {
            _tao_union.e_enum2 (_tao_union_tmp);
            _tao_union._d (_tao_discriminant);
          }
      }
      break;
    default:
      {
        CORBA::Long _tao_union_tmp;
        result = strm >> _tao_union_tmp;

        if (result)
          {
            _tao_union.e_def (_tao_union_tmp);
            _tao_union._d (_tao_discriminant);
          }
      }
      break;
  }

  return result;
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_union/cdr_op_cs.cpp:74


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const test::UnionWithImplicitDefault_EnumerationDiscriminant &_tao_union
  )
{
  if ( !(strm << _tao_union._d ()) )
    {
      return false;
    }
  
  ::CORBA::Boolean result = true;

  switch (_tao_union._d ())
  {
    case test::Enum1:
      {
        result = strm << _tao_union.e_enum1 ();
      }
      break;
    case test::Enum2:
      {
        result = strm << _tao_union.e_enum2 ();
      }
      break;
    default:
      break;
  }

  return result;
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    test::UnionWithImplicitDefault_EnumerationDiscriminant &_tao_union
  )
{
  test::Enumeration _tao_discriminant;
  if ( !(strm >> _tao_discriminant) )
    {
      return false;
    }
  
  ::CORBA::Boolean result = true;

  switch (_tao_discriminant)
  {
    case test::Enum1:
      {
        CORBA::Long _tao_union_tmp;
        result = strm >> _tao_union_tmp;

        if (result)
          {
            _tao_union.e_enum1 (_tao_union_tmp);
            _tao_union._d (_tao_discriminant);
          }
      }
      break;
    case test::Enum2:
      {
        CORBA::Long _tao_union_tmp;
        result = strm >> _tao_union_tmp;

        if (result)
          {
            _tao_union.e_enum2 (_tao_union_tmp);
            _tao_union._d (_tao_discriminant);
          }
      }
      break;
    default:
      _tao_union._default ();
      // For maximum interop compatibility, force the same value as transmitted
      _tao_union._d (_tao_discriminant);
      break;
  }

  return result;
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_union/cdr_op_cs.cpp:74


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const test::UnionAllCovered_TypedefedEnumerationDiscriminant &_tao_union
  )
{
  if ( !(strm << _tao_union._d ()) )
    {
      return false;
    }
  
  ::CORBA::Boolean result = true;

  switch (_tao_union._d ())
  {
    case test::Enum1:
      {
        result = strm << _tao_union.e_enum1 ();
      }
      break;
    case test::Enum2:
      {
        result = strm << _tao_union.e_enum2 ();
      }
      break;
    case test::Enum3:
      {
        result = strm << _tao_union.e_enum3 ();
      }
      break;
    default:
      break;
  }

  return result;
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    test::UnionAllCovered_TypedefedEnumerationDiscriminant &_tao_union
  )
{
  test::Enumeration _tao_discriminant;
  if ( !(strm >> _tao_discriminant) )
    {
      return false;
    }
  
  ::CORBA::Boolean result = true;

  switch (_tao_discriminant)
  {
    case test::Enum1:
      {
        CORBA::Long _tao_union_tmp;
        result = strm >> _tao_union_tmp;

        if (result)
          {
            _tao_union.e_enum1 (_tao_union_tmp);
            _tao_union._d (_tao_discriminant);
          }
      }
      break;
    case test::Enum2:
      {
        CORBA::Long _tao_union_tmp;
        result = strm >> _tao_union_tmp;

        if (result)
          {
            _tao_union.e_enum2 (_tao_union_tmp);
            _tao_union._d (_tao_discriminant);
          }
      }
      break;
    case test::Enum3:
      {
        CORBA::Long _tao_union_tmp;
        result = strm >> _tao_union_tmp;

        if (result)
          {
            _tao_union.e_enum3 (_tao_union_tmp);
            _tao_union._d (_tao_discriminant);
          }
      }
      break;
    default:
      _tao_union._default ();
      // For maximum interop compatibility, force the same value as transmitted
      _tao_union._d (_tao_discriminant);
      break;
  }

  return result;
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_union/cdr_op_cs.cpp:74


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const test::UnionAllCoveredWithDefault_TypedefedEnumerationDiscriminant &_tao_union
  )
{
  if ( !(strm << _tao_union._d ()) )
    {
      return false;
    }
  
  ::CORBA::Boolean result = true;

  switch (_tao_union._d ())
  {
    case test::Enum1:
      {
        result = strm << _tao_union.e_enum1 ();
      }
      break;
    case test::Enum2:
      {
        result = strm << _tao_union.e_enum2 ();
      }
      break;
    case test::Enum3:
    default:
      {
        result = strm << _tao_union.e_def ();
      }
      break;
  }

  return result;
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    test::UnionAllCoveredWithDefault_TypedefedEnumerationDiscriminant &_tao_union
  )
{
  test::Enumeration _tao_discriminant;
  if ( !(strm >> _tao_discriminant) )
    {
      return false;
    }
  
  ::CORBA::Boolean result = true;

  switch (_tao_discriminant)
  {
    case test::Enum1:
      {
        CORBA::Long _tao_union_tmp;
        result = strm >> _tao_union_tmp;

        if (result)
          {
            _tao_union.e_enum1 (_tao_union_tmp);
            _tao_union._d (_tao_discriminant);
          }
      }
      break;
    case test::Enum2:
      {
        CORBA::Long _tao_union_tmp;
        result = strm >> _tao_union_tmp;

        if (result)
          {
            _tao_union.e_enum2 (_tao_union_tmp);
            _tao_union._d (_tao_discriminant);
          }
      }
      break;
    case test::Enum3:
    default:
      {
        CORBA::Long _tao_union_tmp;
        result = strm >> _tao_union_tmp;

        if (result)
          {
            _tao_union.e_def (_tao_union_tmp);
            _tao_union._d (_tao_discriminant);
          }
      }
      break;
  }

  return result;
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_union/cdr_op_cs.cpp:74


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const test::UnionWithDefault_TypedefedEnumerationDiscriminant &_tao_union
  )
{
  if ( !(strm << _tao_union._d ()) )
    {
      return false;
    }
  
  ::CORBA::Boolean result = true;

  switch (_tao_union._d ())
  {
    case test::Enum1:
      {
        result = strm << _tao_union.e_enum1 ();
      }
      break;
    case test::Enum2:
      {
        result = strm << _tao_union.e_enum2 ();
      }
      break;
    default:
      {
        result = strm << _tao_union.e_def ();
      }
      break;
  }

  return result;
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    test::UnionWithDefault_TypedefedEnumerationDiscriminant &_tao_union
  )
{
  test::Enumeration _tao_discriminant;
  if ( !(strm >> _tao_discriminant) )
    {
      return false;
    }
  
  ::CORBA::Boolean result = true;

  switch (_tao_discriminant)
  {
    case test::Enum1:
      {
        CORBA::Long _tao_union_tmp;
        result = strm >> _tao_union_tmp;

        if (result)
          {
            _tao_union.e_enum1 (_tao_union_tmp);
            _tao_union._d (_tao_discriminant);
          }
      }
      break;
    case test::Enum2:
      {
        CORBA::Long _tao_union_tmp;
        result = strm >> _tao_union_tmp;

        if (result)
          {
            _tao_union.e_enum2 (_tao_union_tmp);
            _tao_union._d (_tao_discriminant);
          }
      }
      break;
    default:
      {
        CORBA::Long _tao_union_tmp;
        result = strm >> _tao_union_tmp;

        if (result)
          {
            _tao_union.e_def (_tao_union_tmp);
            _tao_union._d (_tao_discriminant);
          }
      }
      break;
  }

  return result;
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_union/cdr_op_cs.cpp:74


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const test::UnionWithImplicitDefault_TypedefedEnumerationDiscriminant &_tao_union
  )
{
  if ( !(strm << _tao_union._d ()) )
    {
      return false;
    }
  
  ::CORBA::Boolean result = true;

  switch (_tao_union._d ())
  {
    case test::Enum1:
      {
        result = strm << _tao_union.e_enum1 ();
      }
      break;
    case test::Enum2:
      {
        result = strm << _tao_union.e_enum2 ();
      }
      break;
    default:
      break;
  }

  return result;
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    test::UnionWithImplicitDefault_TypedefedEnumerationDiscriminant &_tao_union
  )
{
  test::Enumeration _tao_discriminant;
  if ( !(strm >> _tao_discriminant) )
    {
      return false;
    }
  
  ::CORBA::Boolean result = true;

  switch (_tao_discriminant)
  {
    case test::Enum1:
      {
        CORBA::Long _tao_union_tmp;
        result = strm >> _tao_union_tmp;

        if (result)
          {
            _tao_union.e_enum1 (_tao_union_tmp);
            _tao_union._d (_tao_discriminant);
          }
      }
      break;
    case test::Enum2:
      {
        CORBA::Long _tao_union_tmp;
        result = strm >> _tao_union_tmp;

        if (result)
          {
            _tao_union.e_enum2 (_tao_union_tmp);
            _tao_union._d (_tao_discriminant);
          }
      }
      break;
    default:
      _tao_union._default ();
      // For maximum interop compatibility, force the same value as transmitted
      _tao_union._d (_tao_discriminant);
      break;
  }

  return result;
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_union/cdr_op_cs.cpp:74


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const test::UnionAllCovered_BooleanDiscriminant &_tao_union
  )
{
  ::ACE_OutputCDR::from_boolean tmp (_tao_union._d ());
  if ( !(strm << tmp) )
    {
      return false;
    }
  
  ::CORBA::Boolean result = true;

  if (_tao_union._d ())
    {
      result = strm << _tao_union.e_true ();
    }
  
  if (!_tao_union._d ())
    {
      result = strm << _tao_union.e_false ();
    }
  
  return result;
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    test::UnionAllCovered_BooleanDiscriminant &_tao_union
  )
{
  CORBA::Boolean _tao_discriminant;
  ::ACE_InputCDR::to_boolean tmp (_tao_discriminant);
  if ( !(strm >> tmp) )
    {
      return false;
    }
  
  ::CORBA::Boolean result = true;

  if (_tao_discriminant)
    {
      CORBA::Long _tao_union_tmp;
      result = strm >> _tao_union_tmp;

      if (result)
        {
          _tao_union.e_true (_tao_union_tmp);
          _tao_union._d (_tao_discriminant);
        }
    }
  
  if (!_tao_discriminant)
    {
      CORBA::Long _tao_union_tmp;
      result = strm >> _tao_union_tmp;

      if (result)
        {
          _tao_union.e_false (_tao_union_tmp);
          _tao_union._d (_tao_discriminant);
        }
    }
  
  return result;
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_union/cdr_op_cs.cpp:74


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const test::UnionWithDefault_BooleanDiscriminant &_tao_union
  )
{
  ::ACE_OutputCDR::from_boolean tmp (_tao_union._d ());
  if ( !(strm << tmp) )
    {
      return false;
    }
  
  ::CORBA::Boolean result = true;

  if (_tao_union._d ())
    {
      result = strm << _tao_union.e_true ();
    }
  
  if (!_tao_union._d ())
    {
      result = strm << _tao_union.e_def ();
    }
  
  return result;
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    test::UnionWithDefault_BooleanDiscriminant &_tao_union
  )
{
  CORBA::Boolean _tao_discriminant;
  ::ACE_InputCDR::to_boolean tmp (_tao_discriminant);
  if ( !(strm >> tmp) )
    {
      return false;
    }
  
  ::CORBA::Boolean result = true;

  if (_tao_discriminant)
    {
      CORBA::Long _tao_union_tmp;
      result = strm >> _tao_union_tmp;

      if (result)
        {
          _tao_union.e_true (_tao_union_tmp);
          _tao_union._d (_tao_discriminant);
        }
    }
  
  if (!_tao_discriminant)
    {
      CORBA::Long _tao_union_tmp;
      result = strm >> _tao_union_tmp;

      if (result)
        {
          _tao_union.e_def (_tao_union_tmp);
          _tao_union._d (_tao_discriminant);
        }
    }
  
  return result;
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_union/cdr_op_cs.cpp:74


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const test::UnionWithImplicitDefault_BooleanDiscriminant &_tao_union
  )
{
  ::ACE_OutputCDR::from_boolean tmp (_tao_union._d ());
  if ( !(strm << tmp) )
    {
      return false;
    }
  
  ::CORBA::Boolean result = true;

  if (_tao_union._d ())
    {
      result = strm << _tao_union.e_true ();
    }
  
  return result;
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    test::UnionWithImplicitDefault_BooleanDiscriminant &_tao_union
  )
{
  CORBA::Boolean _tao_discriminant;
  ::ACE_InputCDR::to_boolean tmp (_tao_discriminant);
  if ( !(strm >> tmp) )
    {
      return false;
    }
  
  ::CORBA::Boolean result = true;

  _tao_union._default ();
  _tao_union._d (_tao_discriminant);
  if (_tao_discriminant)
    {
      CORBA::Long _tao_union_tmp;
      result = strm >> _tao_union_tmp;

      if (result)
        {
          _tao_union.e_true (_tao_union_tmp);
          _tao_union._d (_tao_discriminant);
        }
    }
  
  return result;
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_union/cdr_op_cs.cpp:74


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const test::UnionAllCovered_CharDiscriminant &_tao_union
  )
{
  ::ACE_OutputCDR::from_char tmp (_tao_union._d ());
  if ( !(strm << tmp) )
    {
      return false;
    }
  
  ::CORBA::Boolean result = true;

  switch (_tao_union._d ())
  {
    case '\x0':
    case '\x1':
    case '\x2':
    case '\x3':
    case '\x4':
    case '\x5':
    case '\x6':
    case '\a':
    case '\b':
    case '\t':
    case '\n':
    case '\v':
    case '\f':
    case '\r':
    case '\xe':
    case '\xf':
    case '\x10':
    case '\x11':
    case '\x12':
    case '\x13':
    case '\x14':
    case '\x15':
    case '\x16':
    case '\x17':
    case '\x18':
    case '\x19':
    case '\x1a':
    case '\x1b':
    case '\x1c':
    case '\x1d':
    case '\x1e':
    case '\x1f':
    case ' ':
    case '!':
    case '"':
    case '#':
    case '$':
    case '%':
    case '&':
    case '\'':
    case '(':
    case ')':
    case '*':
    case '+':
    case ',':
    case '-':
    case '.':
    case '/':
    case '0':
    case '1':
    case '2':
    case '3':
    case '4':
    case '5':
    case '6':
    case '7':
    case '8':
    case '9':
    case ':':
    case ';':
    case '<':
    case '=':
    case '>':
    case '?':
    case '@':
    case 'A':
    case 'B':
    case 'C':
    case 'D':
    case 'E':
    case 'F':
    case 'G':
    case 'H':
    case 'I':
    case 'J':
    case 'K':
    case 'L':
    case 'M':
    case 'N':
    case 'O':
    case 'P':
    case 'Q':
    case 'R':
    case 'S':
    case 'T':
    case 'U':
    case 'V':
    case 'W':
    case 'X':
    case 'Y':
    case 'Z':
    case '[':
    case '\\':
    case ']':
    case '^':
    case '_':
    case '`':
    case 'a':
    case 'b':
    case 'c':
    case 'd':
    case 'e':
    case 'f':
    case 'g':
    case 'h':
    case 'i':
    case 'j':
    case 'k':
    case 'l':
    case 'm':
    case 'n':
    case 'o':
    case 'p':
    case 'q':
    case 'r':
    case 's':
    case 't':
    case 'u':
    case 'v':
    case 'w':
    case 'x':
    case 'y':
    case 'z':
    case '{':
    case '|':
    case '}':
    case '~':
    case '\x7f':
    case '\x80':
    case '\x81':
    case '\x82':
    case '\x83':
    case '\x84':
    case '\x85':
    case '\x86':
    case '\x87':
    case '\x88':
    case '\x89':
    case '\x8a':
    case '\x8b':
    case '\x8c':
    case '\x8d':
    case '\x8e':
    case '\x8f':
    case '\x90':
    case '\x91':
    case '\x92':
    case '\x93':
    case '\x94':
    case '\x95':
    case '\x96':
    case '\x97':
    case '\x98':
    case '\x99':
    case '\x9a':
    case '\x9b':
    case '\x9c':
    case '\x9d':
    case '\x9e':
    case '\x9f':
    case '\xa0':
    case '\xa1':
    case '\xa2':
    case '\xa3':
    case '\xa4':
    case '\xa5':
    case '\xa6':
    case '\xa7':
    case '\xa8':
    case '\xa9':
    case '\xaa':
    case '\xab':
    case '\xac':
    case '\xad':
    case '\xae':
    case '\xaf':
    case '\xb0':
    case '\xb1':
    case '\xb2':
    case '\xb3':
    case '\xb4':
    case '\xb5':
    case '\xb6':
    case '\xb7':
    case '\xb8':
    case '\xb9':
    case '\xba':
    case '\xbb':
    case '\xbc':
    case '\xbd':
    case '\xbe':
    case '\xbf':
    case '\xc0':
    case '\xc1':
    case '\xc2':
    case '\xc3':
    case '\xc4':
    case '\xc5':
    case '\xc6':
    case '\xc7':
    case '\xc8':
    case '\xc9':
    case '\xca':
    case '\xcb':
    case '\xcc':
    case '\xcd':
    case '\xce':
    case '\xcf':
    case '\xd0':
    case '\xd1':
    case '\xd2':
    case '\xd3':
    case '\xd4':
    case '\xd5':
    case '\xd6':
    case '\xd7':
    case '\xd8':
    case '\xd9':
    case '\xda':
    case '\xdb':
    case '\xdc':
    case '\xdd':
    case '\xde':
    case '\xdf':
    case '\xe0':
    case '\xe1':
    case '\xe2':
    case '\xe3':
    case '\xe4':
    case '\xe5':
    case '\xe6':
    case '\xe7':
    case '\xe8':
    case '\xe9':
    case '\xea':
    case '\xeb':
    case '\xec':
    case '\xed':
    case '\xee':
    case '\xef':
    case '\xf0':
    case '\xf1':
    case '\xf2':
    case '\xf3':
    case '\xf4':
    case '\xf5':
    case '\xf6':
    case '\xf7':
    case '\xf8':
    case '\xf9':
    case '\xfa':
    case '\xfb':
    case '\xfc':
    case '\xfd':
    case '\xfe':
    case '\xff':
      {
        result = strm << _tao_union.e_chars ();
      }
      break;
  }

  return result;
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    test::UnionAllCovered_CharDiscriminant &_tao_union
  )
{
  CORBA::Char _tao_discriminant;
  ::ACE_InputCDR::to_char tmp (_tao_discriminant);
  if ( !(strm >> tmp) )
    {
      return false;
    }
  
  ::CORBA::Boolean result = true;

  switch (_tao_discriminant)
  {
    case '\x0':
    case '\x1':
    case '\x2':
    case '\x3':
    case '\x4':
    case '\x5':
    case '\x6':
    case '\a':
    case '\b':
    case '\t':
    case '\n':
    case '\v':
    case '\f':
    case '\r':
    case '\xe':
    case '\xf':
    case '\x10':
    case '\x11':
    case '\x12':
    case '\x13':
    case '\x14':
    case '\x15':
    case '\x16':
    case '\x17':
    case '\x18':
    case '\x19':
    case '\x1a':
    case '\x1b':
    case '\x1c':
    case '\x1d':
    case '\x1e':
    case '\x1f':
    case ' ':
    case '!':
    case '"':
    case '#':
    case '$':
    case '%':
    case '&':
    case '\'':
    case '(':
    case ')':
    case '*':
    case '+':
    case ',':
    case '-':
    case '.':
    case '/':
    case '0':
    case '1':
    case '2':
    case '3':
    case '4':
    case '5':
    case '6':
    case '7':
    case '8':
    case '9':
    case ':':
    case ';':
    case '<':
    case '=':
    case '>':
    case '?':
    case '@':
    case 'A':
    case 'B':
    case 'C':
    case 'D':
    case 'E':
    case 'F':
    case 'G':
    case 'H':
    case 'I':
    case 'J':
    case 'K':
    case 'L':
    case 'M':
    case 'N':
    case 'O':
    case 'P':
    case 'Q':
    case 'R':
    case 'S':
    case 'T':
    case 'U':
    case 'V':
    case 'W':
    case 'X':
    case 'Y':
    case 'Z':
    case '[':
    case '\\':
    case ']':
    case '^':
    case '_':
    case '`':
    case 'a':
    case 'b':
    case 'c':
    case 'd':
    case 'e':
    case 'f':
    case 'g':
    case 'h':
    case 'i':
    case 'j':
    case 'k':
    case 'l':
    case 'm':
    case 'n':
    case 'o':
    case 'p':
    case 'q':
    case 'r':
    case 's':
    case 't':
    case 'u':
    case 'v':
    case 'w':
    case 'x':
    case 'y':
    case 'z':
    case '{':
    case '|':
    case '}':
    case '~':
    case '\x7f':
    case '\x80':
    case '\x81':
    case '\x82':
    case '\x83':
    case '\x84':
    case '\x85':
    case '\x86':
    case '\x87':
    case '\x88':
    case '\x89':
    case '\x8a':
    case '\x8b':
    case '\x8c':
    case '\x8d':
    case '\x8e':
    case '\x8f':
    case '\x90':
    case '\x91':
    case '\x92':
    case '\x93':
    case '\x94':
    case '\x95':
    case '\x96':
    case '\x97':
    case '\x98':
    case '\x99':
    case '\x9a':
    case '\x9b':
    case '\x9c':
    case '\x9d':
    case '\x9e':
    case '\x9f':
    case '\xa0':
    case '\xa1':
    case '\xa2':
    case '\xa3':
    case '\xa4':
    case '\xa5':
    case '\xa6':
    case '\xa7':
    case '\xa8':
    case '\xa9':
    case '\xaa':
    case '\xab':
    case '\xac':
    case '\xad':
    case '\xae':
    case '\xaf':
    case '\xb0':
    case '\xb1':
    case '\xb2':
    case '\xb3':
    case '\xb4':
    case '\xb5':
    case '\xb6':
    case '\xb7':
    case '\xb8':
    case '\xb9':
    case '\xba':
    case '\xbb':
    case '\xbc':
    case '\xbd':
    case '\xbe':
    case '\xbf':
    case '\xc0':
    case '\xc1':
    case '\xc2':
    case '\xc3':
    case '\xc4':
    case '\xc5':
    case '\xc6':
    case '\xc7':
    case '\xc8':
    case '\xc9':
    case '\xca':
    case '\xcb':
    case '\xcc':
    case '\xcd':
    case '\xce':
    case '\xcf':
    case '\xd0':
    case '\xd1':
    case '\xd2':
    case '\xd3':
    case '\xd4':
    case '\xd5':
    case '\xd6':
    case '\xd7':
    case '\xd8':
    case '\xd9':
    case '\xda':
    case '\xdb':
    case '\xdc':
    case '\xdd':
    case '\xde':
    case '\xdf':
    case '\xe0':
    case '\xe1':
    case '\xe2':
    case '\xe3':
    case '\xe4':
    case '\xe5':
    case '\xe6':
    case '\xe7':
    case '\xe8':
    case '\xe9':
    case '\xea':
    case '\xeb':
    case '\xec':
    case '\xed':
    case '\xee':
    case '\xef':
    case '\xf0':
    case '\xf1':
    case '\xf2':
    case '\xf3':
    case '\xf4':
    case '\xf5':
    case '\xf6':
    case '\xf7':
    case '\xf8':
    case '\xf9':
    case '\xfa':
    case '\xfb':
    case '\xfc':
    case '\xfd':
    case '\xfe':
    case '\xff':
      {
        CORBA::Long _tao_union_tmp;
        result = strm >> _tao_union_tmp;

        if (result)
          {
            _tao_union.e_chars (_tao_union_tmp);
            _tao_union._d (_tao_discriminant);
          }
      }
      break;
  }

  return result;
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_union/cdr_op_cs.cpp:74


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const test::UnionWithDefault_CharDiscriminant &_tao_union
  )
{
  ::ACE_OutputCDR::from_char tmp (_tao_union._d ());
  if ( !(strm << tmp) )
    {
      return false;
    }
  
  ::CORBA::Boolean result = true;

  switch (_tao_union._d ())
  {
    case '\x0':
    case '\x1':
    case '\x2':
    case '\x3':
    case '\x4':
    case '\x5':
    case '\x6':
    case '\a':
      {
        result = strm << _tao_union.e_chars ();
      }
      break;
    default:
      {
        result = strm << _tao_union.e_def ();
      }
      break;
  }

  return result;
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    test::UnionWithDefault_CharDiscriminant &_tao_union
  )
{
  CORBA::Char _tao_discriminant;
  ::ACE_InputCDR::to_char tmp (_tao_discriminant);
  if ( !(strm >> tmp) )
    {
      return false;
    }
  
  ::CORBA::Boolean result = true;

  switch (_tao_discriminant)
  {
    case '\x0':
    case '\x1':
    case '\x2':
    case '\x3':
    case '\x4':
    case '\x5':
    case '\x6':
    case '\a':
      {
        CORBA::Long _tao_union_tmp;
        result = strm >> _tao_union_tmp;

        if (result)
          {
            _tao_union.e_chars (_tao_union_tmp);
            _tao_union._d (_tao_discriminant);
          }
      }
      break;
    default:
      {
        CORBA::Long _tao_union_tmp;
        result = strm >> _tao_union_tmp;

        if (result)
          {
            _tao_union.e_def (_tao_union_tmp);
            _tao_union._d (_tao_discriminant);
          }
      }
      break;
  }

  return result;
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_union/cdr_op_cs.cpp:74


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const test::UnionWithImplicitDefault_CharDiscriminant &_tao_union
  )
{
  ::ACE_OutputCDR::from_char tmp (_tao_union._d ());
  if ( !(strm << tmp) )
    {
      return false;
    }
  
  ::CORBA::Boolean result = true;

  switch (_tao_union._d ())
  {
    case '\x0':
    case '\x1':
    case '\x2':
    case '\x3':
    case '\x4':
    case '\x5':
    case '\x6':
    case '\a':
      {
        result = strm << _tao_union.e_chars ();
      }
      break;
    default:
      break;
  }

  return result;
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    test::UnionWithImplicitDefault_CharDiscriminant &_tao_union
  )
{
  CORBA::Char _tao_discriminant;
  ::ACE_InputCDR::to_char tmp (_tao_discriminant);
  if ( !(strm >> tmp) )
    {
      return false;
    }
  
  ::CORBA::Boolean result = true;

  switch (_tao_discriminant)
  {
    case '\x0':
    case '\x1':
    case '\x2':
    case '\x3':
    case '\x4':
    case '\x5':
    case '\x6':
    case '\a':
      {
        CORBA::Long _tao_union_tmp;
        result = strm >> _tao_union_tmp;

        if (result)
          {
            _tao_union.e_chars (_tao_union_tmp);
            _tao_union._d (_tao_discriminant);
          }
      }
      break;
    default:
      _tao_union._default ();
      // For maximum interop compatibility, force the same value as transmitted
      _tao_union._d (_tao_discriminant);
      break;
  }

  return result;
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_union/cdr_op_cs.cpp:74


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const test::UnionWithDefault_LongDiscriminant &_tao_union
  )
{
  if ( !(strm << _tao_union._d ()) )
    {
      return false;
    }
  
  ::CORBA::Boolean result = true;

  switch (_tao_union._d ())
  {
    case 1:
      {
        result = strm << _tao_union.e_case1 ();
      }
      break;
    case 2:
      {
        result = strm << _tao_union.e_case2 ();
      }
      break;
    case 3:
      {
        result = strm << _tao_union.e_case3 ();
      }
      break;
    default:
      {
        result = strm << _tao_union.e_def ();
      }
      break;
  }

  return result;
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    test::UnionWithDefault_LongDiscriminant &_tao_union
  )
{
  CORBA::Long _tao_discriminant;
  if ( !(strm >> _tao_discriminant) )
    {
      return false;
    }
  
  ::CORBA::Boolean result = true;

  switch (_tao_discriminant)
  {
    case 1:
      {
        CORBA::Long _tao_union_tmp;
        result = strm >> _tao_union_tmp;

        if (result)
          {
            _tao_union.e_case1 (_tao_union_tmp);
            _tao_union._d (_tao_discriminant);
          }
      }
      break;
    case 2:
      {
        CORBA::Long _tao_union_tmp;
        result = strm >> _tao_union_tmp;

        if (result)
          {
            _tao_union.e_case2 (_tao_union_tmp);
            _tao_union._d (_tao_discriminant);
          }
      }
      break;
    case 3:
      {
        CORBA::Long _tao_union_tmp;
        result = strm >> _tao_union_tmp;

        if (result)
          {
            _tao_union.e_case3 (_tao_union_tmp);
            _tao_union._d (_tao_discriminant);
          }
      }
      break;
    default:
      {
        CORBA::Long _tao_union_tmp;
        result = strm >> _tao_union_tmp;

        if (result)
          {
            _tao_union.e_def (_tao_union_tmp);
            _tao_union._d (_tao_discriminant);
          }
      }
      break;
  }

  return result;
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_union/cdr_op_cs.cpp:74


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const test::UnionWithImplicitDefault_LongDiscriminant &_tao_union
  )
{
  if ( !(strm << _tao_union._d ()) )
    {
      return false;
    }
  
  ::CORBA::Boolean result = true;

  switch (_tao_union._d ())
  {
    case 1:
      {
        result = strm << _tao_union.e_case1 ();
      }
      break;
    case 2:
      {
        result = strm << _tao_union.e_case2 ();
      }
      break;
    case 3:
      {
        result = strm << _tao_union.e_case3 ();
      }
      break;
    default:
      break;
  }

  return result;
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    test::UnionWithImplicitDefault_LongDiscriminant &_tao_union
  )
{
  CORBA::Long _tao_discriminant;
  if ( !(strm >> _tao_discriminant) )
    {
      return false;
    }
  
  ::CORBA::Boolean result = true;

  switch (_tao_discriminant)
  {
    case 1:
      {
        CORBA::Long _tao_union_tmp;
        result = strm >> _tao_union_tmp;

        if (result)
          {
            _tao_union.e_case1 (_tao_union_tmp);
            _tao_union._d (_tao_discriminant);
          }
      }
      break;
    case 2:
      {
        CORBA::Long _tao_union_tmp;
        result = strm >> _tao_union_tmp;

        if (result)
          {
            _tao_union.e_case2 (_tao_union_tmp);
            _tao_union._d (_tao_discriminant);
          }
      }
      break;
    case 3:
      {
        CORBA::Long _tao_union_tmp;
        result = strm >> _tao_union_tmp;

        if (result)
          {
            _tao_union.e_case3 (_tao_union_tmp);
            _tao_union._d (_tao_discriminant);
          }
      }
      break;
    default:
      _tao_union._default ();
      // For maximum interop compatibility, force the same value as transmitted
      _tao_union._d (_tao_discriminant);
      break;
  }

  return result;
}

TAO_END_VERSIONED_NAMESPACE_DECL



