// -*- C++ -*-
/**
 * Code generated by the The ACE ORB (TAO) IDL Compiler v2.4.1
 * TAO and the TAO IDL Compiler have been developed by:
 *       Center for Distributed Object Computing
 *       Washington University
 *       St. Louis, MO
 *       USA
 *       http://www.cs.wustl.edu/~schmidt/doc-center.html
 * and
 *       Distributed Object Computing Laboratory
 *       University of California at Irvine
 *       Irvine, CA
 *       USA
 * and
 *       Institute for Software Integrated Systems
 *       Vanderbilt University
 *       Nashville, TN
 *       USA
 *       http://www.isis.vanderbilt.edu/
 *
 * Information about TAO is available at:
 *     http://www.dre.vanderbilt.edu/~schmidt/TAO.html
 **/

// TAO_IDL - Generated from
// be/be_codegen.cpp:373


#include "TestTypeC.h"
#include "tao/CDR.h"

#if !defined (__ACE_INLINE__)
#include "TestTypeC.inl"
#endif /* !defined INLINE */

// TAO_IDL - Generated from
// be/be_visitor_array/array_cs.cpp:94

Array_Typedef_slice *
Array_Typedef_dup (const Array_Typedef_slice *_tao_src_array)
{
  Array_Typedef_slice *_tao_dup_array =
    Array_Typedef_alloc ();

  if (!_tao_dup_array)
    {
      return static_cast <Array_Typedef_slice *> (0);
    }

  Array_Typedef_copy (_tao_dup_array, _tao_src_array);
  return _tao_dup_array;
}

Array_Typedef_slice *
Array_Typedef_alloc (void)
{
  Array_Typedef_slice *retval = 0;
  ACE_NEW_RETURN (retval, ::CORBA::Octet[1], 0);
  return retval;
}

void
Array_Typedef_free (
    Array_Typedef_slice *_tao_slice)
{
  delete [] _tao_slice;
}

void
Array_Typedef_copy (
    Array_Typedef_slice * _tao_to,
    const Array_Typedef_slice *_tao_from)
{
  // Copy each individual element.
  for ( ::CORBA::ULong i0 = 0; i0 < 1; ++i0)
    {
      _tao_to[i0] = _tao_from[i0];
    }
}

// TAO_IDL - Generated from
// be/be_visitor_array/cdr_op_cs.cpp:163


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Array_Typedef_forany &_tao_array)
{
  return
    strm.write_octet_array (
        reinterpret_cast <const ACE_CDR::Octet *> (_tao_array.in ()),
        1);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Array_Typedef_forany &_tao_array)
{
  return
    strm.read_octet_array (
        reinterpret_cast <ACE_CDR::Octet *> (_tao_array.out ()),
        1);
}

TAO_END_VERSIONED_NAMESPACE_DECL



