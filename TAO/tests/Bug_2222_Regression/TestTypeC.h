// -*- C++ -*-
/**
 * Code generated by the The ACE ORB (TAO) IDL Compiler v2.4.1
 * TAO and the TAO IDL Compiler have been developed by:
 *       Center for Distributed Object Computing
 *       Washington University
 *       St. Louis, MO
 *       USA
 *       http://www.cs.wustl.edu/~schmidt/doc-center.html
 * and
 *       Distributed Object Computing Laboratory
 *       University of California at Irvine
 *       Irvine, CA
 *       USA
 * and
 *       Institute for Software Integrated Systems
 *       Vanderbilt University
 *       Nashville, TN
 *       USA
 *       http://www.isis.vanderbilt.edu/
 *
 * Information about TAO is available at:
 *     http://www.dre.vanderbilt.edu/~schmidt/TAO.html
 **/

// TAO_IDL - Generated from
// be/be_codegen.cpp:149

#ifndef _TAO_IDL_TESTTYPEC_AGNCCY_H_
#define _TAO_IDL_TESTTYPEC_AGNCCY_H_

#include /**/ "ace/pre.h"


#include /**/ "ace/config-all.h"

#if !defined (ACE_LACKS_PRAGMA_ONCE)
# pragma once
#endif /* ACE_LACKS_PRAGMA_ONCE */


#include "tao/ORB.h"
#include "tao/Basic_Types.h"
#include "tao/Array_VarOut_T.h"
#include "tao/Arg_Traits_T.h"
#include "tao/Basic_Arguments.h"
#include "tao/Special_Basic_Arguments.h"
#include "tao/Any_Insert_Policy_T.h"
#include "tao/Fixed_Size_Argument_T.h"
#include "tao/Var_Size_Argument_T.h"
#include "tao/Fixed_Array_Argument_T.h"
#include "tao/Var_Array_Argument_T.h"
#include /**/ "tao/Version.h"
#include /**/ "tao/Versioned_Namespace.h"

#if TAO_MAJOR_VERSION != 2 || TAO_MINOR_VERSION != 4 || TAO_MICRO_VERSION != 1
#error This file should be regenerated with TAO_IDL
#endif

#if defined (TAO_EXPORT_MACRO)
#undef TAO_EXPORT_MACRO
#endif
#define TAO_EXPORT_MACRO

// TAO_IDL - Generated from
// be/be_visitor_array/array_ch.cpp:52

typedef ::CORBA::Octet Array_Typedef[1];
typedef ::CORBA::Octet Array_Typedef_slice;
struct Array_Typedef_tag {};


typedef
  TAO_FixedArray_Var_T<
      Array_Typedef,
      Array_Typedef_slice,
      Array_Typedef_tag
    >
  Array_Typedef_var;

typedef
  Array_Typedef
  Array_Typedef_out;

typedef
  TAO_Array_Forany_T<
      Array_Typedef,
      Array_Typedef_slice,
      Array_Typedef_tag
    >
  Array_Typedef_forany;

TAO_EXPORT_MACRO Array_Typedef_slice *
Array_Typedef_alloc (void);

TAO_EXPORT_MACRO void
Array_Typedef_free (
    Array_Typedef_slice *_tao_slice);

TAO_EXPORT_MACRO Array_Typedef_slice *
Array_Typedef_dup (
    const Array_Typedef_slice *_tao_slice);

TAO_EXPORT_MACRO void
Array_Typedef_copy (
    Array_Typedef_slice *_tao_to,
    const Array_Typedef_slice *_tao_from);

// TAO_IDL - Generated from
// be/be_visitor_arg_traits.cpp:66

TAO_BEGIN_VERSIONED_NAMESPACE_DECL


// Arg traits specializations.
namespace TAO
{

  template<>
  class Arg_Traits< ::Array_Typedef_tag>
    : public
        Fixed_Array_Arg_Traits_T<
            ::Array_Typedef_var,
            ::Array_Typedef_forany,
            TAO::Any_Insert_Policy_Noop
          >
  {
  };
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_traits.cpp:60

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Traits specializations.
namespace TAO
{
  template<>
  struct  Array_Traits<
      Array_Typedef_forany
    >
  {
    static void free (
        Array_Typedef_slice * _tao_slice);
    static Array_Typedef_slice * dup (
        const Array_Typedef_slice * _tao_slice);
    static void copy (
        Array_Typedef_slice * _tao_to,
        const Array_Typedef_slice * _tao_from);
    static Array_Typedef_slice * alloc (void);
    static void zero (
        Array_Typedef_slice * _tao_slice);
  };
}
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_array/cdr_op_ch.cpp:99


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 CORBA::Boolean operator<< (TAO_OutputCDR &strm, const ::Array_Typedef_forany &_tao_array);
 ::CORBA::Boolean operator>> (TAO_InputCDR &, ::Array_Typedef_forany &_tao_array);

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// be/be_codegen.cpp:1700
#if defined (__ACE_INLINE__)
#include "TestTypeC.inl"
#endif /* defined INLINE */

#include /**/ "ace/post.h"

#endif /* ifndef */

