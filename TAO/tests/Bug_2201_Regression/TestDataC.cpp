// -*- C++ -*-
/**
 * Code generated by the The ACE ORB (TAO) IDL Compiler v2.4.1
 * TAO and the TAO IDL Compiler have been developed by:
 *       Center for Distributed Object Computing
 *       Washington University
 *       St. Louis, MO
 *       USA
 *       http://www.cs.wustl.edu/~schmidt/doc-center.html
 * and
 *       Distributed Object Computing Laboratory
 *       University of California at Irvine
 *       Irvine, CA
 *       USA
 * and
 *       Institute for Software Integrated Systems
 *       Vanderbilt University
 *       Nashville, TN
 *       USA
 *       http://www.isis.vanderbilt.edu/
 *
 * Information about TAO is available at:
 *     http://www.dre.vanderbilt.edu/~schmidt/TAO.html
 **/

// TAO_IDL - Generated from
// be/be_codegen.cpp:373


#include "TestDataC.h"
#include "tao/CDR.h"

#if !defined (__ACE_INLINE__)
#include "TestDataC.inl"
#endif /* !defined INLINE */

// TAO_IDL - Generated from
// be/be_visitor_sequence/sequence_cs.cpp:70

#if !defined (_SEQTEST_LONGSEQ_CS_)
#define _SEQTEST_LONGSEQ_CS_

SeqTest::LongSeq::LongSeq (void)
{}

SeqTest::LongSeq::LongSeq (
    ::CORBA::ULong max)
  : ::TAO::unbounded_value_sequence<
        ::CORBA::Long
      > (max)
{}

SeqTest::LongSeq::LongSeq (
    ::CORBA::ULong max,
    ::CORBA::ULong length,
    ::CORBA::Long * buffer,
    ::CORBA::Boolean release
  )
  : ::TAO::unbounded_value_sequence<
        ::CORBA::Long
      >
    (max, length, buffer, release)
{}

SeqTest::LongSeq::LongSeq (
    const LongSeq &seq)
  : ::TAO::unbounded_value_sequence<
        ::CORBA::Long
      > (seq)
{}

SeqTest::LongSeq::~LongSeq (void)
{}

#endif /* end #if !defined */

// TAO_IDL - Generated from
// be/be_visitor_sequence/sequence_cs.cpp:70

#if !defined (_SEQTEST_NODESEQ_CS_)
#define _SEQTEST_NODESEQ_CS_

SeqTest::NodeSeq::NodeSeq (void)
{}

SeqTest::NodeSeq::NodeSeq (
    ::CORBA::ULong max)
  : ::TAO::unbounded_value_sequence<
        Node
      > (max)
{}

SeqTest::NodeSeq::NodeSeq (
    ::CORBA::ULong max,
    ::CORBA::ULong length,
    SeqTest::Node * buffer,
    ::CORBA::Boolean release
  )
  : ::TAO::unbounded_value_sequence<
        Node
      >
    (max, length, buffer, release)
{}

SeqTest::NodeSeq::NodeSeq (
    const NodeSeq &seq)
  : ::TAO::unbounded_value_sequence<
        Node
      > (seq)
{}

SeqTest::NodeSeq::~NodeSeq (void)
{}

#endif /* end #if !defined */

// TAO_IDL - Generated from
// be/be_visitor_sequence/cdr_op_cs.cpp:93
#if !defined _TAO_CDR_OP_SeqTest_LongSeq_CPP_
#define _TAO_CDR_OP_SeqTest_LongSeq_CPP_

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const SeqTest::LongSeq &_tao_sequence)
{
  return TAO::marshal_sequence(strm, _tao_sequence);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    SeqTest::LongSeq &_tao_sequence)
{
  return TAO::demarshal_sequence(strm, _tao_sequence);
}


TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_CDR_OP_SeqTest_LongSeq_CPP_ */

// TAO_IDL - Generated from
// be/be_visitor_structure/cdr_op_cs.cpp:49

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const SeqTest::Node &_tao_aggregate)
{
  return
    (strm << _tao_aggregate.ls);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    SeqTest::Node &_tao_aggregate)
{
  return
    (strm >> _tao_aggregate.ls);
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_sequence/cdr_op_cs.cpp:93
#if !defined _TAO_CDR_OP_SeqTest_NodeSeq_CPP_
#define _TAO_CDR_OP_SeqTest_NodeSeq_CPP_

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const SeqTest::NodeSeq &_tao_sequence)
{
  return TAO::marshal_sequence(strm, _tao_sequence);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    SeqTest::NodeSeq &_tao_sequence)
{
  return TAO::demarshal_sequence(strm, _tao_sequence);
}


TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_CDR_OP_SeqTest_NodeSeq_CPP_ */

