// -*- C++ -*-
/**
 * Code generated by the The ACE ORB (TAO) IDL Compiler v2.4.1
 * TAO and the TAO IDL Compiler have been developed by:
 *       Center for Distributed Object Computing
 *       Washington University
 *       St. Louis, MO
 *       USA
 *       http://www.cs.wustl.edu/~schmidt/doc-center.html
 * and
 *       Distributed Object Computing Laboratory
 *       University of California at Irvine
 *       Irvine, CA
 *       USA
 * and
 *       Institute for Software Integrated Systems
 *       Vanderbilt University
 *       Nashville, TN
 *       USA
 *       http://www.isis.vanderbilt.edu/
 *
 * Information about TAO is available at:
 *     http://www.dre.vanderbilt.edu/~schmidt/TAO.html
 **/

// TAO_IDL - Generated from
// be/be_codegen.cpp:149

#ifndef _TAO_IDL_FOOC_5GADAK_H_
#define _TAO_IDL_FOOC_5GADAK_H_

#include /**/ "ace/pre.h"


#include /**/ "ace/config-all.h"

#if !defined (ACE_LACKS_PRAGMA_ONCE)
# pragma once
#endif /* ACE_LACKS_PRAGMA_ONCE */


#include "tao/ORB.h"
#include "tao/Basic_Types.h"
#include "tao/Object.h"
#include "tao/Sequence_T.h"
#include "tao/Objref_VarOut_T.h"
#include "tao/Seq_Var_T.h"
#include "tao/Seq_Out_T.h"
#include "tao/Arg_Traits_T.h"
#include "tao/Basic_Arguments.h"
#include "tao/Special_Basic_Arguments.h"
#include "tao/Any_Insert_Policy_T.h"
#include "tao/Fixed_Size_Argument_T.h"
#include "tao/Var_Size_Argument_T.h"
#include /**/ "tao/Version.h"
#include /**/ "tao/Versioned_Namespace.h"

#if TAO_MAJOR_VERSION != 2 || TAO_MINOR_VERSION != 4 || TAO_MICRO_VERSION != 1
#error This file should be regenerated with TAO_IDL
#endif

#if defined (TAO_EXPORT_MACRO)
#undef TAO_EXPORT_MACRO
#endif
#define TAO_EXPORT_MACRO 

// TAO_IDL - Generated from
// be/be_interface.cpp:748

#if !defined (_FOO__VAR_OUT_CH_)
#define _FOO__VAR_OUT_CH_

class Foo;
typedef Foo *Foo_ptr;

typedef
  TAO_Objref_Var_T<
      Foo
    >
  Foo_var;

typedef
  TAO_Objref_Out_T<
      Foo
    >
  Foo_out;

#endif /* end #if !defined */

// TAO_IDL - Generated from
// be/be_visitor_interface/interface_ch.cpp:40

class  Foo
  : public virtual ::CORBA::Object
{
public:

  // TAO_IDL - Generated from
  // be/be_type.cpp:304

  typedef Foo_ptr _ptr_type;
  typedef Foo_var _var_type;
  typedef Foo_out _out_type;

  // The static operations.
  static Foo_ptr _duplicate (Foo_ptr obj);

  static void _tao_release (Foo_ptr obj);

  static Foo_ptr _narrow (::CORBA::Object_ptr obj);
  static Foo_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
  static Foo_ptr _nil (void);

  // TAO_IDL - Generated from
  // be/be_visitor_interface/interface_ch.cpp:137

  virtual ::CORBA::Boolean _is_a (const char *type_id);
  virtual const char* _interface_repository_id (void) const;
  virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);

protected:
  // Abstract or local interface only.
  Foo (void);

  

  virtual ~Foo (void);

private:
  // Private and unimplemented for concrete interfaces.
  Foo (const Foo &);

  void operator= (const Foo &);
};

// TAO_IDL - Generated from
// be/be_visitor_sequence/sequence_ch.cpp:99

#if !defined (_FOOSEQ_CH_)
#define _FOOSEQ_CH_

class FooSeq;

typedef
  ::TAO_VarSeq_Var_T<
      FooSeq
    >
  FooSeq_var;

typedef
  ::TAO_Seq_Out_T<
      FooSeq
    >
  FooSeq_out;

class  FooSeq
  : public
      ::TAO::unbounded_object_reference_sequence<
          Foo,
          Foo_var
        >
{
public:
  FooSeq (void);
  FooSeq ( ::CORBA::ULong max);
  FooSeq (
    ::CORBA::ULong max,
    ::CORBA::ULong length,
    Foo_ptr* buffer,
    ::CORBA::Boolean release = false);
  FooSeq (const FooSeq &);
  virtual ~FooSeq (void);
  

  // TAO_IDL - Generated from
  // be/be_type.cpp:304

  
  typedef FooSeq_var _var_type;
  typedef FooSeq_out _out_type;
};

#endif /* end #if !defined */

// TAO_IDL - Generated from
// be/be_visitor_arg_traits.cpp:66

TAO_BEGIN_VERSIONED_NAMESPACE_DECL


// Arg traits specializations.
namespace TAO
{

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:683

  template<>
  class Arg_Traits< ::FooSeq>
    : public
        Var_Size_Arg_Traits_T<
            ::FooSeq,
            TAO::Any_Insert_Policy_Noop
          >
  {
  };
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_traits.cpp:60

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Traits specializations.
namespace TAO
{

#if !defined (_FOO__TRAITS_)
#define _FOO__TRAITS_

  template<>
  struct  Objref_Traits< ::Foo>
  {
    static ::Foo_ptr duplicate (
        ::Foo_ptr p);
    static void release (
        ::Foo_ptr p);
    static ::Foo_ptr nil (void);
    static ::CORBA::Boolean marshal (
        const ::Foo_ptr p,
        TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */
}
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_codegen.cpp:1700
#if defined (__ACE_INLINE__)
#include "FooC.inl"
#endif /* defined INLINE */

#include /**/ "ace/post.h"

#endif /* ifndef */

