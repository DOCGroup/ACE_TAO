// -*- C++ -*-
/**
 * Code generated by the The ACE ORB (TAO) IDL Compiler v2.4.1
 * TAO and the TAO IDL Compiler have been developed by:
 *       Center for Distributed Object Computing
 *       Washington University
 *       St. Louis, MO
 *       USA
 *       http://www.cs.wustl.edu/~schmidt/doc-center.html
 * and
 *       Distributed Object Computing Laboratory
 *       University of California at Irvine
 *       Irvine, CA
 *       USA
 * and
 *       Institute for Software Integrated Systems
 *       Vanderbilt University
 *       Nashville, TN
 *       USA
 *       http://www.isis.vanderbilt.edu/
 *
 * Information about TAO is available at:
 *     http://www.dre.vanderbilt.edu/~schmidt/TAO.html
 **/

// TAO_IDL - Generated from
// be/be_codegen.cpp:373


#include "OneLineCosNamingC.h"
#include "tao/CDR.h"
#include "tao/Exception_Data.h"
#include "tao/Invocation_Adapter.h"
#include "tao/Object_T.h"
#include "tao/SystemException.h"
#include "ace/OS_NS_string.h"

#if !defined (__ACE_INLINE__)
#include "OneLineCosNamingC.inl"
#endif /* !defined INLINE */

// TAO_IDL - Generated from
// be/be_visitor_sequence/sequence_cs.cpp:70

#if !defined (_COSNAMING_NAME_CS_)
#define _COSNAMING_NAME_CS_

CosNaming::Name::Name (void)
{}

CosNaming::Name::Name (
    ::CORBA::ULong max)
  : ::TAO::unbounded_value_sequence<
        NameComponent
      > (max)
{}

CosNaming::Name::Name (
    ::CORBA::ULong max,
    ::CORBA::ULong length,
    CosNaming::NameComponent * buffer,
    ::CORBA::Boolean release
  )
  : ::TAO::unbounded_value_sequence<
        NameComponent
      >
    (max, length, buffer, release)
{}

CosNaming::Name::Name (
    const Name &seq)
  : ::TAO::unbounded_value_sequence<
        NameComponent
      > (seq)
{}

CosNaming::Name::~Name (void)
{}

#endif /* end #if !defined */

// TAO_IDL - Generated from
// be/be_visitor_sequence/sequence_cs.cpp:70

#if !defined (_COSNAMING_BINDINGLIST_CS_)
#define _COSNAMING_BINDINGLIST_CS_

CosNaming::BindingList::BindingList (void)
{}

CosNaming::BindingList::BindingList (
    ::CORBA::ULong max)
  : ::TAO::unbounded_value_sequence<
        Binding
      > (max)
{}

CosNaming::BindingList::BindingList (
    ::CORBA::ULong max,
    ::CORBA::ULong length,
    CosNaming::Binding * buffer,
    ::CORBA::Boolean release
  )
  : ::TAO::unbounded_value_sequence<
        Binding
      >
    (max, length, buffer, release)
{}

CosNaming::BindingList::BindingList (
    const BindingList &seq)
  : ::TAO::unbounded_value_sequence<
        Binding
      > (seq)
{}

CosNaming::BindingList::~BindingList (void)
{}

#endif /* end #if !defined */

// TAO_IDL - Generated from
// be/be_visitor_interface/interface_cs.cpp:48

// Traits specializations for CosNaming::NamingContext.

CosNaming::NamingContext_ptr
TAO::Objref_Traits<CosNaming::NamingContext>::duplicate (
    CosNaming::NamingContext_ptr p)
{
  return CosNaming::NamingContext::_duplicate (p);
}

void
TAO::Objref_Traits<CosNaming::NamingContext>::release (
    CosNaming::NamingContext_ptr p)
{
  ::CORBA::release (p);
}

CosNaming::NamingContext_ptr
TAO::Objref_Traits<CosNaming::NamingContext>::nil (void)
{
  return CosNaming::NamingContext::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<CosNaming::NamingContext>::marshal (
    const CosNaming::NamingContext_ptr p,
    TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

// TAO_IDL - Generated from
// be/be_visitor_exception/exception_ctor.cpp:51

CosNaming::NamingContext::NotFound::NotFound (
    CosNaming::NamingContext::NotFoundReason _tao_why,
    const CosNaming::Name & _tao_rest_of_name)
  : ::CORBA::UserException (
        "IDL:CosNaming/NamingContext/NotFound:1.0",
        "NotFound"
      )
{
  this->why = _tao_why;
  this->rest_of_name = _tao_rest_of_name;
}



// TAO_IDL - Generated from
// be/be_visitor_exception/exception_cs.cpp:98

CosNaming::NamingContext::NotFound::NotFound (void)
  : ::CORBA::UserException (
        "IDL:CosNaming/NamingContext/NotFound:1.0",
        "NotFound"
      )
{
}

CosNaming::NamingContext::NotFound::~NotFound (void)
{
}

CosNaming::NamingContext::NotFound::NotFound (const ::CosNaming::NamingContext::NotFound &_tao_excp)
  : ::CORBA::UserException (
        _tao_excp._rep_id (),
        _tao_excp._name ()
      )
{
  this->why = _tao_excp.why;
  this->rest_of_name = _tao_excp.rest_of_name;
}

CosNaming::NamingContext::NotFound&
CosNaming::NamingContext::NotFound::operator= (const ::CosNaming::NamingContext::NotFound &_tao_excp)
{
  this->::CORBA::UserException::operator= (_tao_excp);
  this->why = _tao_excp.why;
  this->rest_of_name = _tao_excp.rest_of_name;
  return *this;
}

CosNaming::NamingContext::NotFound *
CosNaming::NamingContext::NotFound::_downcast ( ::CORBA::Exception *_tao_excp)
{
  return dynamic_cast<NotFound *> (_tao_excp);
}

const CosNaming::NamingContext::NotFound *
CosNaming::NamingContext::NotFound::_downcast ( ::CORBA::Exception const *_tao_excp)
{
  return dynamic_cast<const NotFound *> (_tao_excp);
}

::CORBA::Exception *CosNaming::NamingContext::NotFound::_alloc (void)
{
  ::CORBA::Exception *retval = 0;
  ACE_NEW_RETURN (retval, ::CosNaming::NamingContext::NotFound, 0);
  return retval;
}

::CORBA::Exception *
CosNaming::NamingContext::NotFound::_tao_duplicate (void) const
{
  ::CORBA::Exception *result = 0;
  ACE_NEW_RETURN (
      result,
      ::CosNaming::NamingContext::NotFound (*this),
      0
    );
  return result;
}

void CosNaming::NamingContext::NotFound::_raise (void) const
{
  throw *this;
}

void CosNaming::NamingContext::NotFound::_tao_encode (TAO_OutputCDR &cdr) const
{
  if (!(cdr << *this))
    {
      throw ::CORBA::MARSHAL ();
    }
}

void CosNaming::NamingContext::NotFound::_tao_decode (TAO_InputCDR &cdr)
{
  if (!(cdr >> *this))
    {
      throw ::CORBA::MARSHAL ();
    }
}



// TAO_IDL - Generated from
// be/be_visitor_exception/exception_ctor.cpp:51

CosNaming::NamingContext::CannotProceed::CannotProceed (
    const CosNaming::NamingContext_ptr _tao_cxt,
    const CosNaming::Name & _tao_rest_of_name)
  : ::CORBA::UserException (
        "IDL:CosNaming/NamingContext/CannotProceed:1.0",
        "CannotProceed"
      )
{
  this->cxt = TAO::Objref_Traits<CosNaming::NamingContext>::duplicate (_tao_cxt);
  this->rest_of_name = _tao_rest_of_name;
}



// TAO_IDL - Generated from
// be/be_visitor_exception/exception_cs.cpp:98

CosNaming::NamingContext::CannotProceed::CannotProceed (void)
  : ::CORBA::UserException (
        "IDL:CosNaming/NamingContext/CannotProceed:1.0",
        "CannotProceed"
      )
{
}

CosNaming::NamingContext::CannotProceed::~CannotProceed (void)
{
}

CosNaming::NamingContext::CannotProceed::CannotProceed (const ::CosNaming::NamingContext::CannotProceed &_tao_excp)
  : ::CORBA::UserException (
        _tao_excp._rep_id (),
        _tao_excp._name ()
      )
{
  this->cxt = TAO::Objref_Traits<CosNaming::NamingContext>::duplicate (_tao_excp.cxt.in ());
  this->rest_of_name = _tao_excp.rest_of_name;
}

CosNaming::NamingContext::CannotProceed&
CosNaming::NamingContext::CannotProceed::operator= (const ::CosNaming::NamingContext::CannotProceed &_tao_excp)
{
  this->::CORBA::UserException::operator= (_tao_excp);
  this->cxt = TAO::Objref_Traits<CosNaming::NamingContext>::duplicate (_tao_excp.cxt.in ());
  this->rest_of_name = _tao_excp.rest_of_name;
  return *this;
}

CosNaming::NamingContext::CannotProceed *
CosNaming::NamingContext::CannotProceed::_downcast ( ::CORBA::Exception *_tao_excp)
{
  return dynamic_cast<CannotProceed *> (_tao_excp);
}

const CosNaming::NamingContext::CannotProceed *
CosNaming::NamingContext::CannotProceed::_downcast ( ::CORBA::Exception const *_tao_excp)
{
  return dynamic_cast<const CannotProceed *> (_tao_excp);
}

::CORBA::Exception *CosNaming::NamingContext::CannotProceed::_alloc (void)
{
  ::CORBA::Exception *retval = 0;
  ACE_NEW_RETURN (retval, ::CosNaming::NamingContext::CannotProceed, 0);
  return retval;
}

::CORBA::Exception *
CosNaming::NamingContext::CannotProceed::_tao_duplicate (void) const
{
  ::CORBA::Exception *result = 0;
  ACE_NEW_RETURN (
      result,
      ::CosNaming::NamingContext::CannotProceed (*this),
      0
    );
  return result;
}

void CosNaming::NamingContext::CannotProceed::_raise (void) const
{
  throw *this;
}

void CosNaming::NamingContext::CannotProceed::_tao_encode (TAO_OutputCDR &cdr) const
{
  if (!(cdr << *this))
    {
      throw ::CORBA::MARSHAL ();
    }
}

void CosNaming::NamingContext::CannotProceed::_tao_decode (TAO_InputCDR &cdr)
{
  if (!(cdr >> *this))
    {
      throw ::CORBA::MARSHAL ();
    }
}



// TAO_IDL - Generated from
// be/be_visitor_exception/exception_cs.cpp:98

CosNaming::NamingContext::InvalidName::InvalidName (void)
  : ::CORBA::UserException (
        "IDL:CosNaming/NamingContext/InvalidName:1.0",
        "InvalidName"
      )
{
}

CosNaming::NamingContext::InvalidName::~InvalidName (void)
{
}

CosNaming::NamingContext::InvalidName::InvalidName (const ::CosNaming::NamingContext::InvalidName &_tao_excp)
  : ::CORBA::UserException (
        _tao_excp._rep_id (),
        _tao_excp._name ()
      )
{
}

CosNaming::NamingContext::InvalidName&
CosNaming::NamingContext::InvalidName::operator= (const ::CosNaming::NamingContext::InvalidName &_tao_excp)
{
  this->::CORBA::UserException::operator= (_tao_excp);
  return *this;
}

CosNaming::NamingContext::InvalidName *
CosNaming::NamingContext::InvalidName::_downcast ( ::CORBA::Exception *_tao_excp)
{
  return dynamic_cast<InvalidName *> (_tao_excp);
}

const CosNaming::NamingContext::InvalidName *
CosNaming::NamingContext::InvalidName::_downcast ( ::CORBA::Exception const *_tao_excp)
{
  return dynamic_cast<const InvalidName *> (_tao_excp);
}

::CORBA::Exception *CosNaming::NamingContext::InvalidName::_alloc (void)
{
  ::CORBA::Exception *retval = 0;
  ACE_NEW_RETURN (retval, ::CosNaming::NamingContext::InvalidName, 0);
  return retval;
}

::CORBA::Exception *
CosNaming::NamingContext::InvalidName::_tao_duplicate (void) const
{
  ::CORBA::Exception *result = 0;
  ACE_NEW_RETURN (
      result,
      ::CosNaming::NamingContext::InvalidName (*this),
      0
    );
  return result;
}

void CosNaming::NamingContext::InvalidName::_raise (void) const
{
  throw *this;
}

void CosNaming::NamingContext::InvalidName::_tao_encode (TAO_OutputCDR &cdr) const
{
  if (!(cdr << *this))
    {
      throw ::CORBA::MARSHAL ();
    }
}

void CosNaming::NamingContext::InvalidName::_tao_decode (TAO_InputCDR &cdr)
{
  if (!(cdr >> *this))
    {
      throw ::CORBA::MARSHAL ();
    }
}



// TAO_IDL - Generated from
// be/be_visitor_exception/exception_cs.cpp:98

CosNaming::NamingContext::AlreadyBound::AlreadyBound (void)
  : ::CORBA::UserException (
        "IDL:CosNaming/NamingContext/AlreadyBound:1.0",
        "AlreadyBound"
      )
{
}

CosNaming::NamingContext::AlreadyBound::~AlreadyBound (void)
{
}

CosNaming::NamingContext::AlreadyBound::AlreadyBound (const ::CosNaming::NamingContext::AlreadyBound &_tao_excp)
  : ::CORBA::UserException (
        _tao_excp._rep_id (),
        _tao_excp._name ()
      )
{
}

CosNaming::NamingContext::AlreadyBound&
CosNaming::NamingContext::AlreadyBound::operator= (const ::CosNaming::NamingContext::AlreadyBound &_tao_excp)
{
  this->::CORBA::UserException::operator= (_tao_excp);
  return *this;
}

CosNaming::NamingContext::AlreadyBound *
CosNaming::NamingContext::AlreadyBound::_downcast ( ::CORBA::Exception *_tao_excp)
{
  return dynamic_cast<AlreadyBound *> (_tao_excp);
}

const CosNaming::NamingContext::AlreadyBound *
CosNaming::NamingContext::AlreadyBound::_downcast ( ::CORBA::Exception const *_tao_excp)
{
  return dynamic_cast<const AlreadyBound *> (_tao_excp);
}

::CORBA::Exception *CosNaming::NamingContext::AlreadyBound::_alloc (void)
{
  ::CORBA::Exception *retval = 0;
  ACE_NEW_RETURN (retval, ::CosNaming::NamingContext::AlreadyBound, 0);
  return retval;
}

::CORBA::Exception *
CosNaming::NamingContext::AlreadyBound::_tao_duplicate (void) const
{
  ::CORBA::Exception *result = 0;
  ACE_NEW_RETURN (
      result,
      ::CosNaming::NamingContext::AlreadyBound (*this),
      0
    );
  return result;
}

void CosNaming::NamingContext::AlreadyBound::_raise (void) const
{
  throw *this;
}

void CosNaming::NamingContext::AlreadyBound::_tao_encode (TAO_OutputCDR &cdr) const
{
  if (!(cdr << *this))
    {
      throw ::CORBA::MARSHAL ();
    }
}

void CosNaming::NamingContext::AlreadyBound::_tao_decode (TAO_InputCDR &cdr)
{
  if (!(cdr >> *this))
    {
      throw ::CORBA::MARSHAL ();
    }
}



// TAO_IDL - Generated from
// be/be_visitor_exception/exception_cs.cpp:98

CosNaming::NamingContext::NotEmpty::NotEmpty (void)
  : ::CORBA::UserException (
        "IDL:CosNaming/NamingContext/NotEmpty:1.0",
        "NotEmpty"
      )
{
}

CosNaming::NamingContext::NotEmpty::~NotEmpty (void)
{
}

CosNaming::NamingContext::NotEmpty::NotEmpty (const ::CosNaming::NamingContext::NotEmpty &_tao_excp)
  : ::CORBA::UserException (
        _tao_excp._rep_id (),
        _tao_excp._name ()
      )
{
}

CosNaming::NamingContext::NotEmpty&
CosNaming::NamingContext::NotEmpty::operator= (const ::CosNaming::NamingContext::NotEmpty &_tao_excp)
{
  this->::CORBA::UserException::operator= (_tao_excp);
  return *this;
}

CosNaming::NamingContext::NotEmpty *
CosNaming::NamingContext::NotEmpty::_downcast ( ::CORBA::Exception *_tao_excp)
{
  return dynamic_cast<NotEmpty *> (_tao_excp);
}

const CosNaming::NamingContext::NotEmpty *
CosNaming::NamingContext::NotEmpty::_downcast ( ::CORBA::Exception const *_tao_excp)
{
  return dynamic_cast<const NotEmpty *> (_tao_excp);
}

::CORBA::Exception *CosNaming::NamingContext::NotEmpty::_alloc (void)
{
  ::CORBA::Exception *retval = 0;
  ACE_NEW_RETURN (retval, ::CosNaming::NamingContext::NotEmpty, 0);
  return retval;
}

::CORBA::Exception *
CosNaming::NamingContext::NotEmpty::_tao_duplicate (void) const
{
  ::CORBA::Exception *result = 0;
  ACE_NEW_RETURN (
      result,
      ::CosNaming::NamingContext::NotEmpty (*this),
      0
    );
  return result;
}

void CosNaming::NamingContext::NotEmpty::_raise (void) const
{
  throw *this;
}

void CosNaming::NamingContext::NotEmpty::_tao_encode (TAO_OutputCDR &cdr) const
{
  if (!(cdr << *this))
    {
      throw ::CORBA::MARSHAL ();
    }
}

void CosNaming::NamingContext::NotEmpty::_tao_decode (TAO_InputCDR &cdr)
{
  if (!(cdr >> *this))
    {
      throw ::CORBA::MARSHAL ();
    }
}



// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:88

void
CosNaming::NamingContext::bind (
  const ::CosNaming::Name & n,
  ::CORBA::Object_ptr obj)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  TAO::Arg_Traits< void>::ret_val _tao_retval;
  TAO::Arg_Traits< ::CosNaming::Name>::in_arg_val _tao_n (n);
  TAO::Arg_Traits< ::CORBA::Object>::in_arg_val _tao_obj (obj);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_n,
      &_tao_obj
    };

  static TAO::Exception_Data
  _tao_CosNaming_NamingContext_bind_exceptiondata [] = 
    {
      {
        "IDL:CosNaming/NamingContext/NotFound:1.0",
        CosNaming::NamingContext::NotFound::_alloc
#if TAO_HAS_INTERCEPTORS == 1
        , 0
#endif /* TAO_HAS_INTERCEPTORS */
      },

      {
        "IDL:CosNaming/NamingContext/CannotProceed:1.0",
        CosNaming::NamingContext::CannotProceed::_alloc
#if TAO_HAS_INTERCEPTORS == 1
        , 0
#endif /* TAO_HAS_INTERCEPTORS */
      },

      {
        "IDL:CosNaming/NamingContext/InvalidName:1.0",
        CosNaming::NamingContext::InvalidName::_alloc
#if TAO_HAS_INTERCEPTORS == 1
        , 0
#endif /* TAO_HAS_INTERCEPTORS */
      },

      {
        "IDL:CosNaming/NamingContext/AlreadyBound:1.0",
        CosNaming::NamingContext::AlreadyBound::_alloc
#if TAO_HAS_INTERCEPTORS == 1
        , 0
#endif /* TAO_HAS_INTERCEPTORS */
      }
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      3,
      "bind",
      4,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY
      
    );

  _tao_call.invoke (
      _tao_CosNaming_NamingContext_bind_exceptiondata,
      4
    );
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:88

void
CosNaming::NamingContext::rebind (
  const ::CosNaming::Name & n,
  ::CORBA::Object_ptr obj)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  TAO::Arg_Traits< void>::ret_val _tao_retval;
  TAO::Arg_Traits< ::CosNaming::Name>::in_arg_val _tao_n (n);
  TAO::Arg_Traits< ::CORBA::Object>::in_arg_val _tao_obj (obj);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_n,
      &_tao_obj
    };

  static TAO::Exception_Data
  _tao_CosNaming_NamingContext_rebind_exceptiondata [] = 
    {
      {
        "IDL:CosNaming/NamingContext/NotFound:1.0",
        CosNaming::NamingContext::NotFound::_alloc
#if TAO_HAS_INTERCEPTORS == 1
        , 0
#endif /* TAO_HAS_INTERCEPTORS */
      },

      {
        "IDL:CosNaming/NamingContext/CannotProceed:1.0",
        CosNaming::NamingContext::CannotProceed::_alloc
#if TAO_HAS_INTERCEPTORS == 1
        , 0
#endif /* TAO_HAS_INTERCEPTORS */
      },

      {
        "IDL:CosNaming/NamingContext/InvalidName:1.0",
        CosNaming::NamingContext::InvalidName::_alloc
#if TAO_HAS_INTERCEPTORS == 1
        , 0
#endif /* TAO_HAS_INTERCEPTORS */
      }
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      3,
      "rebind",
      6,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY
      
    );

  _tao_call.invoke (
      _tao_CosNaming_NamingContext_rebind_exceptiondata,
      3
    );
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:88

void
CosNaming::NamingContext::bind_context (
  const ::CosNaming::Name & n,
  ::CosNaming::NamingContext_ptr nc)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  TAO::Arg_Traits< void>::ret_val _tao_retval;
  TAO::Arg_Traits< ::CosNaming::Name>::in_arg_val _tao_n (n);
  TAO::Arg_Traits< ::CosNaming::NamingContext>::in_arg_val _tao_nc (nc);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_n,
      &_tao_nc
    };

  static TAO::Exception_Data
  _tao_CosNaming_NamingContext_bind_context_exceptiondata [] = 
    {
      {
        "IDL:CosNaming/NamingContext/NotFound:1.0",
        CosNaming::NamingContext::NotFound::_alloc
#if TAO_HAS_INTERCEPTORS == 1
        , 0
#endif /* TAO_HAS_INTERCEPTORS */
      },

      {
        "IDL:CosNaming/NamingContext/CannotProceed:1.0",
        CosNaming::NamingContext::CannotProceed::_alloc
#if TAO_HAS_INTERCEPTORS == 1
        , 0
#endif /* TAO_HAS_INTERCEPTORS */
      },

      {
        "IDL:CosNaming/NamingContext/InvalidName:1.0",
        CosNaming::NamingContext::InvalidName::_alloc
#if TAO_HAS_INTERCEPTORS == 1
        , 0
#endif /* TAO_HAS_INTERCEPTORS */
      },

      {
        "IDL:CosNaming/NamingContext/AlreadyBound:1.0",
        CosNaming::NamingContext::AlreadyBound::_alloc
#if TAO_HAS_INTERCEPTORS == 1
        , 0
#endif /* TAO_HAS_INTERCEPTORS */
      }
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      3,
      "bind_context",
      12,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY
      
    );

  _tao_call.invoke (
      _tao_CosNaming_NamingContext_bind_context_exceptiondata,
      4
    );
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:88

void
CosNaming::NamingContext::rebind_context (
  const ::CosNaming::Name & n,
  ::CosNaming::NamingContext_ptr nc)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  TAO::Arg_Traits< void>::ret_val _tao_retval;
  TAO::Arg_Traits< ::CosNaming::Name>::in_arg_val _tao_n (n);
  TAO::Arg_Traits< ::CosNaming::NamingContext>::in_arg_val _tao_nc (nc);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_n,
      &_tao_nc
    };

  static TAO::Exception_Data
  _tao_CosNaming_NamingContext_rebind_context_exceptiondata [] = 
    {
      {
        "IDL:CosNaming/NamingContext/NotFound:1.0",
        CosNaming::NamingContext::NotFound::_alloc
#if TAO_HAS_INTERCEPTORS == 1
        , 0
#endif /* TAO_HAS_INTERCEPTORS */
      },

      {
        "IDL:CosNaming/NamingContext/CannotProceed:1.0",
        CosNaming::NamingContext::CannotProceed::_alloc
#if TAO_HAS_INTERCEPTORS == 1
        , 0
#endif /* TAO_HAS_INTERCEPTORS */
      },

      {
        "IDL:CosNaming/NamingContext/InvalidName:1.0",
        CosNaming::NamingContext::InvalidName::_alloc
#if TAO_HAS_INTERCEPTORS == 1
        , 0
#endif /* TAO_HAS_INTERCEPTORS */
      }
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      3,
      "rebind_context",
      14,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY
      
    );

  _tao_call.invoke (
      _tao_CosNaming_NamingContext_rebind_context_exceptiondata,
      3
    );
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:88

::CORBA::Object_ptr
CosNaming::NamingContext::resolve (
  const ::CosNaming::Name & n)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  TAO::Arg_Traits< ::CORBA::Object>::ret_val _tao_retval;
  TAO::Arg_Traits< ::CosNaming::Name>::in_arg_val _tao_n (n);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_n
    };

  static TAO::Exception_Data
  _tao_CosNaming_NamingContext_resolve_exceptiondata [] = 
    {
      {
        "IDL:CosNaming/NamingContext/NotFound:1.0",
        CosNaming::NamingContext::NotFound::_alloc
#if TAO_HAS_INTERCEPTORS == 1
        , 0
#endif /* TAO_HAS_INTERCEPTORS */
      },

      {
        "IDL:CosNaming/NamingContext/CannotProceed:1.0",
        CosNaming::NamingContext::CannotProceed::_alloc
#if TAO_HAS_INTERCEPTORS == 1
        , 0
#endif /* TAO_HAS_INTERCEPTORS */
      },

      {
        "IDL:CosNaming/NamingContext/InvalidName:1.0",
        CosNaming::NamingContext::InvalidName::_alloc
#if TAO_HAS_INTERCEPTORS == 1
        , 0
#endif /* TAO_HAS_INTERCEPTORS */
      }
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      2,
      "resolve",
      7,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY
      
    );

  _tao_call.invoke (
      _tao_CosNaming_NamingContext_resolve_exceptiondata,
      3
    );

  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:88

void
CosNaming::NamingContext::unbind (
  const ::CosNaming::Name & n)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  TAO::Arg_Traits< void>::ret_val _tao_retval;
  TAO::Arg_Traits< ::CosNaming::Name>::in_arg_val _tao_n (n);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_n
    };

  static TAO::Exception_Data
  _tao_CosNaming_NamingContext_unbind_exceptiondata [] = 
    {
      {
        "IDL:CosNaming/NamingContext/NotFound:1.0",
        CosNaming::NamingContext::NotFound::_alloc
#if TAO_HAS_INTERCEPTORS == 1
        , 0
#endif /* TAO_HAS_INTERCEPTORS */
      },

      {
        "IDL:CosNaming/NamingContext/CannotProceed:1.0",
        CosNaming::NamingContext::CannotProceed::_alloc
#if TAO_HAS_INTERCEPTORS == 1
        , 0
#endif /* TAO_HAS_INTERCEPTORS */
      },

      {
        "IDL:CosNaming/NamingContext/InvalidName:1.0",
        CosNaming::NamingContext::InvalidName::_alloc
#if TAO_HAS_INTERCEPTORS == 1
        , 0
#endif /* TAO_HAS_INTERCEPTORS */
      }
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      2,
      "unbind",
      6,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY
      
    );

  _tao_call.invoke (
      _tao_CosNaming_NamingContext_unbind_exceptiondata,
      3
    );
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:88

::CosNaming::NamingContext_ptr
CosNaming::NamingContext::new_context (
  void)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  TAO::Arg_Traits< ::CosNaming::NamingContext>::ret_val _tao_retval;

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      1,
      "new_context",
      11,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY,
      TAO::TAO_TWOWAY_INVOCATION
      ,
      TAO::TAO_SYNCHRONOUS_INVOCATION,
      false
    );

  _tao_call.invoke (0, 0);

  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:88

::CosNaming::NamingContext_ptr
CosNaming::NamingContext::bind_new_context (
  const ::CosNaming::Name & n)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  TAO::Arg_Traits< ::CosNaming::NamingContext>::ret_val _tao_retval;
  TAO::Arg_Traits< ::CosNaming::Name>::in_arg_val _tao_n (n);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_n
    };

  static TAO::Exception_Data
  _tao_CosNaming_NamingContext_bind_new_context_exceptiondata [] = 
    {
      {
        "IDL:CosNaming/NamingContext/NotFound:1.0",
        CosNaming::NamingContext::NotFound::_alloc
#if TAO_HAS_INTERCEPTORS == 1
        , 0
#endif /* TAO_HAS_INTERCEPTORS */
      },

      {
        "IDL:CosNaming/NamingContext/CannotProceed:1.0",
        CosNaming::NamingContext::CannotProceed::_alloc
#if TAO_HAS_INTERCEPTORS == 1
        , 0
#endif /* TAO_HAS_INTERCEPTORS */
      },

      {
        "IDL:CosNaming/NamingContext/InvalidName:1.0",
        CosNaming::NamingContext::InvalidName::_alloc
#if TAO_HAS_INTERCEPTORS == 1
        , 0
#endif /* TAO_HAS_INTERCEPTORS */
      },

      {
        "IDL:CosNaming/NamingContext/AlreadyBound:1.0",
        CosNaming::NamingContext::AlreadyBound::_alloc
#if TAO_HAS_INTERCEPTORS == 1
        , 0
#endif /* TAO_HAS_INTERCEPTORS */
      }
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      2,
      "bind_new_context",
      16,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY
      
    );

  _tao_call.invoke (
      _tao_CosNaming_NamingContext_bind_new_context_exceptiondata,
      4
    );

  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:88

void
CosNaming::NamingContext::destroy (
  void)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  TAO::Arg_Traits< void>::ret_val _tao_retval;

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval
    };

  static TAO::Exception_Data
  _tao_CosNaming_NamingContext_destroy_exceptiondata [] = 
    {
      {
        "IDL:CosNaming/NamingContext/NotEmpty:1.0",
        CosNaming::NamingContext::NotEmpty::_alloc
#if TAO_HAS_INTERCEPTORS == 1
        , 0
#endif /* TAO_HAS_INTERCEPTORS */
      }
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      1,
      "destroy",
      7,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY,
      TAO::TAO_TWOWAY_INVOCATION
      ,
      TAO::TAO_SYNCHRONOUS_INVOCATION,
      false
    );

  _tao_call.invoke (
      _tao_CosNaming_NamingContext_destroy_exceptiondata,
      1
    );
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:88

void
CosNaming::NamingContext::list (
  ::CORBA::ULong how_many,
  ::CosNaming::BindingList_out bl,
  ::CosNaming::BindingIterator_out bi)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  TAO::Arg_Traits< void>::ret_val _tao_retval;
  TAO::Arg_Traits< ::CORBA::ULong>::in_arg_val _tao_how_many (how_many);
  TAO::Arg_Traits< ::CosNaming::BindingList>::out_arg_val _tao_bl (bl);
  TAO::Arg_Traits< ::CosNaming::BindingIterator>::out_arg_val _tao_bi (bi);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_how_many,
      &_tao_bl,
      &_tao_bi
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      4,
      "list",
      4,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY
      
    );

  _tao_call.invoke (0, 0);
}

CosNaming::NamingContext::NamingContext (void)
{
}

CosNaming::NamingContext::~NamingContext (void)
{
}

CosNaming::NamingContext_ptr
CosNaming::NamingContext::_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return
    TAO::Narrow_Utils<NamingContext>::narrow (
        _tao_objref,
        "IDL:CosNaming/NamingContext:1.0");
}

CosNaming::NamingContext_ptr
CosNaming::NamingContext::_unchecked_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return
    TAO::Narrow_Utils<NamingContext>::unchecked_narrow (
        _tao_objref);
}

CosNaming::NamingContext_ptr
CosNaming::NamingContext::_nil (void)
{
  return 0;
}

CosNaming::NamingContext_ptr
CosNaming::NamingContext::_duplicate (NamingContext_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  return obj;
}

void
CosNaming::NamingContext::_tao_release (NamingContext_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
CosNaming::NamingContext::_is_a (const char *value)
{
  if (
      ACE_OS::strcmp (
          value,
          "IDL:CosNaming/NamingContext:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        ) == 0
    )
    {
      return true; // success using local knowledge
    }
  else
    {
      return this->::CORBA::Object::_is_a (value);
    }
}

const char* CosNaming::NamingContext::_interface_repository_id (void) const
{
  return "IDL:CosNaming/NamingContext:1.0";
}

::CORBA::Boolean
CosNaming::NamingContext::marshal (TAO_OutputCDR &cdr)
{
  return (cdr << this);
}

// TAO_IDL - Generated from
// be/be_visitor_interface/interface_cs.cpp:48

// Traits specializations for CosNaming::BindingIterator.

CosNaming::BindingIterator_ptr
TAO::Objref_Traits<CosNaming::BindingIterator>::duplicate (
    CosNaming::BindingIterator_ptr p)
{
  return CosNaming::BindingIterator::_duplicate (p);
}

void
TAO::Objref_Traits<CosNaming::BindingIterator>::release (
    CosNaming::BindingIterator_ptr p)
{
  ::CORBA::release (p);
}

CosNaming::BindingIterator_ptr
TAO::Objref_Traits<CosNaming::BindingIterator>::nil (void)
{
  return CosNaming::BindingIterator::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<CosNaming::BindingIterator>::marshal (
    const CosNaming::BindingIterator_ptr p,
    TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:88

::CORBA::Boolean
CosNaming::BindingIterator::next_one (
  ::CosNaming::Binding_out b)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  TAO::Arg_Traits< ::ACE_InputCDR::to_boolean>::ret_val _tao_retval;
  TAO::Arg_Traits< ::CosNaming::Binding>::out_arg_val _tao_b (b);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_b
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      2,
      "next_one",
      8,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY,
      TAO::TAO_TWOWAY_INVOCATION
      ,
      TAO::TAO_SYNCHRONOUS_INVOCATION,
      false
    );

  _tao_call.invoke (0, 0);

  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:88

::CORBA::Boolean
CosNaming::BindingIterator::next_n (
  ::CORBA::ULong how_many,
  ::CosNaming::BindingList_out bl)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  TAO::Arg_Traits< ::ACE_InputCDR::to_boolean>::ret_val _tao_retval;
  TAO::Arg_Traits< ::CORBA::ULong>::in_arg_val _tao_how_many (how_many);
  TAO::Arg_Traits< ::CosNaming::BindingList>::out_arg_val _tao_bl (bl);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_how_many,
      &_tao_bl
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      3,
      "next_n",
      6,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY
      
    );

  _tao_call.invoke (0, 0);

  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:88

void
CosNaming::BindingIterator::destroy (
  void)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  TAO::Arg_Traits< void>::ret_val _tao_retval;

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      1,
      "destroy",
      7,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY,
      TAO::TAO_TWOWAY_INVOCATION
      ,
      TAO::TAO_SYNCHRONOUS_INVOCATION,
      false
    );

  _tao_call.invoke (0, 0);
}

CosNaming::BindingIterator::BindingIterator (void)
{
}

CosNaming::BindingIterator::~BindingIterator (void)
{
}

CosNaming::BindingIterator_ptr
CosNaming::BindingIterator::_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return
    TAO::Narrow_Utils<BindingIterator>::narrow (
        _tao_objref,
        "IDL:CosNaming/BindingIterator:1.0");
}

CosNaming::BindingIterator_ptr
CosNaming::BindingIterator::_unchecked_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return
    TAO::Narrow_Utils<BindingIterator>::unchecked_narrow (
        _tao_objref);
}

CosNaming::BindingIterator_ptr
CosNaming::BindingIterator::_nil (void)
{
  return 0;
}

CosNaming::BindingIterator_ptr
CosNaming::BindingIterator::_duplicate (BindingIterator_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  return obj;
}

void
CosNaming::BindingIterator::_tao_release (BindingIterator_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
CosNaming::BindingIterator::_is_a (const char *value)
{
  if (
      ACE_OS::strcmp (
          value,
          "IDL:CosNaming/BindingIterator:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        ) == 0
    )
    {
      return true; // success using local knowledge
    }
  else
    {
      return this->::CORBA::Object::_is_a (value);
    }
}

const char* CosNaming::BindingIterator::_interface_repository_id (void) const
{
  return "IDL:CosNaming/BindingIterator:1.0";
}

::CORBA::Boolean
CosNaming::BindingIterator::marshal (TAO_OutputCDR &cdr)
{
  return (cdr << this);
}

// TAO_IDL - Generated from
// be/be_visitor_interface/interface_cs.cpp:48

// Traits specializations for CosNaming::NamingContextExt.

CosNaming::NamingContextExt_ptr
TAO::Objref_Traits<CosNaming::NamingContextExt>::duplicate (
    CosNaming::NamingContextExt_ptr p)
{
  return CosNaming::NamingContextExt::_duplicate (p);
}

void
TAO::Objref_Traits<CosNaming::NamingContextExt>::release (
    CosNaming::NamingContextExt_ptr p)
{
  ::CORBA::release (p);
}

CosNaming::NamingContextExt_ptr
TAO::Objref_Traits<CosNaming::NamingContextExt>::nil (void)
{
  return CosNaming::NamingContextExt::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<CosNaming::NamingContextExt>::marshal (
    const CosNaming::NamingContextExt_ptr p,
    TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:88

char *
CosNaming::NamingContextExt::to_string (
  const ::CosNaming::Name & n)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  TAO::Arg_Traits< char *>::ret_val _tao_retval;
  TAO::Arg_Traits< ::CosNaming::Name>::in_arg_val _tao_n (n);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_n
    };

  static TAO::Exception_Data
  _tao_CosNaming_NamingContextExt_to_string_exceptiondata [] = 
    {
      {
        "IDL:CosNaming/NamingContext/InvalidName:1.0",
        CosNaming::NamingContext::InvalidName::_alloc
#if TAO_HAS_INTERCEPTORS == 1
        , 0
#endif /* TAO_HAS_INTERCEPTORS */
      }
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      2,
      "to_string",
      9,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY
      
    );

  _tao_call.invoke (
      _tao_CosNaming_NamingContextExt_to_string_exceptiondata,
      1
    );

  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:88

::CosNaming::Name *
CosNaming::NamingContextExt::to_name (
  const char * sn)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  TAO::Arg_Traits< ::CosNaming::Name>::ret_val _tao_retval;
  TAO::Arg_Traits< char *>::in_arg_val _tao_sn (sn);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_sn
    };

  static TAO::Exception_Data
  _tao_CosNaming_NamingContextExt_to_name_exceptiondata [] = 
    {
      {
        "IDL:CosNaming/NamingContext/InvalidName:1.0",
        CosNaming::NamingContext::InvalidName::_alloc
#if TAO_HAS_INTERCEPTORS == 1
        , 0
#endif /* TAO_HAS_INTERCEPTORS */
      }
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      2,
      "to_name",
      7,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY
      
    );

  _tao_call.invoke (
      _tao_CosNaming_NamingContextExt_to_name_exceptiondata,
      1
    );

  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// be/be_visitor_exception/exception_cs.cpp:98

CosNaming::NamingContextExt::InvalidAddress::InvalidAddress (void)
  : ::CORBA::UserException (
        "IDL:CosNaming/NamingContextExt/InvalidAddress:1.0",
        "InvalidAddress"
      )
{
}

CosNaming::NamingContextExt::InvalidAddress::~InvalidAddress (void)
{
}

CosNaming::NamingContextExt::InvalidAddress::InvalidAddress (const ::CosNaming::NamingContextExt::InvalidAddress &_tao_excp)
  : ::CORBA::UserException (
        _tao_excp._rep_id (),
        _tao_excp._name ()
      )
{
}

CosNaming::NamingContextExt::InvalidAddress&
CosNaming::NamingContextExt::InvalidAddress::operator= (const ::CosNaming::NamingContextExt::InvalidAddress &_tao_excp)
{
  this->::CORBA::UserException::operator= (_tao_excp);
  return *this;
}

CosNaming::NamingContextExt::InvalidAddress *
CosNaming::NamingContextExt::InvalidAddress::_downcast ( ::CORBA::Exception *_tao_excp)
{
  return dynamic_cast<InvalidAddress *> (_tao_excp);
}

const CosNaming::NamingContextExt::InvalidAddress *
CosNaming::NamingContextExt::InvalidAddress::_downcast ( ::CORBA::Exception const *_tao_excp)
{
  return dynamic_cast<const InvalidAddress *> (_tao_excp);
}

::CORBA::Exception *CosNaming::NamingContextExt::InvalidAddress::_alloc (void)
{
  ::CORBA::Exception *retval = 0;
  ACE_NEW_RETURN (retval, ::CosNaming::NamingContextExt::InvalidAddress, 0);
  return retval;
}

::CORBA::Exception *
CosNaming::NamingContextExt::InvalidAddress::_tao_duplicate (void) const
{
  ::CORBA::Exception *result = 0;
  ACE_NEW_RETURN (
      result,
      ::CosNaming::NamingContextExt::InvalidAddress (*this),
      0
    );
  return result;
}

void CosNaming::NamingContextExt::InvalidAddress::_raise (void) const
{
  throw *this;
}

void CosNaming::NamingContextExt::InvalidAddress::_tao_encode (TAO_OutputCDR &cdr) const
{
  if (!(cdr << *this))
    {
      throw ::CORBA::MARSHAL ();
    }
}

void CosNaming::NamingContextExt::InvalidAddress::_tao_decode (TAO_InputCDR &cdr)
{
  if (!(cdr >> *this))
    {
      throw ::CORBA::MARSHAL ();
    }
}



// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:88

char *
CosNaming::NamingContextExt::to_url (
  const char * addr,
  const char * sn)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  TAO::Arg_Traits< char *>::ret_val _tao_retval;
  TAO::Arg_Traits< char *>::in_arg_val _tao_addr (addr);
  TAO::Arg_Traits< char *>::in_arg_val _tao_sn (sn);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_addr,
      &_tao_sn
    };

  static TAO::Exception_Data
  _tao_CosNaming_NamingContextExt_to_url_exceptiondata [] = 
    {
      {
        "IDL:CosNaming/NamingContextExt/InvalidAddress:1.0",
        CosNaming::NamingContextExt::InvalidAddress::_alloc
#if TAO_HAS_INTERCEPTORS == 1
        , 0
#endif /* TAO_HAS_INTERCEPTORS */
      },

      {
        "IDL:CosNaming/NamingContext/InvalidName:1.0",
        CosNaming::NamingContext::InvalidName::_alloc
#if TAO_HAS_INTERCEPTORS == 1
        , 0
#endif /* TAO_HAS_INTERCEPTORS */
      }
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      3,
      "to_url",
      6,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY
      
    );

  _tao_call.invoke (
      _tao_CosNaming_NamingContextExt_to_url_exceptiondata,
      2
    );

  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:88

::CORBA::Object_ptr
CosNaming::NamingContextExt::resolve_str (
  const char * n)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  TAO::Arg_Traits< ::CORBA::Object>::ret_val _tao_retval;
  TAO::Arg_Traits< char *>::in_arg_val _tao_n (n);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_n
    };

  static TAO::Exception_Data
  _tao_CosNaming_NamingContextExt_resolve_str_exceptiondata [] = 
    {
      {
        "IDL:CosNaming/NamingContext/NotFound:1.0",
        CosNaming::NamingContext::NotFound::_alloc
#if TAO_HAS_INTERCEPTORS == 1
        , 0
#endif /* TAO_HAS_INTERCEPTORS */
      },

      {
        "IDL:CosNaming/NamingContext/CannotProceed:1.0",
        CosNaming::NamingContext::CannotProceed::_alloc
#if TAO_HAS_INTERCEPTORS == 1
        , 0
#endif /* TAO_HAS_INTERCEPTORS */
      },

      {
        "IDL:CosNaming/NamingContext/InvalidName:1.0",
        CosNaming::NamingContext::InvalidName::_alloc
#if TAO_HAS_INTERCEPTORS == 1
        , 0
#endif /* TAO_HAS_INTERCEPTORS */
      }
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      2,
      "resolve_str",
      11,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY
      
    );

  _tao_call.invoke (
      _tao_CosNaming_NamingContextExt_resolve_str_exceptiondata,
      3
    );

  return _tao_retval.retn ();
}

CosNaming::NamingContextExt::NamingContextExt (void)
{
}

CosNaming::NamingContextExt::~NamingContextExt (void)
{
}

CosNaming::NamingContextExt_ptr
CosNaming::NamingContextExt::_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return
    TAO::Narrow_Utils<NamingContextExt>::narrow (
        _tao_objref,
        "IDL:CosNaming/NamingContextExt:1.0");
}

CosNaming::NamingContextExt_ptr
CosNaming::NamingContextExt::_unchecked_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return
    TAO::Narrow_Utils<NamingContextExt>::unchecked_narrow (
        _tao_objref);
}

CosNaming::NamingContextExt_ptr
CosNaming::NamingContextExt::_nil (void)
{
  return 0;
}

CosNaming::NamingContextExt_ptr
CosNaming::NamingContextExt::_duplicate (NamingContextExt_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  return obj;
}

void
CosNaming::NamingContextExt::_tao_release (NamingContextExt_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
CosNaming::NamingContextExt::_is_a (const char *value)
{
  if (
      ACE_OS::strcmp (
          value,
          "IDL:CosNaming/NamingContext:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:CosNaming/NamingContextExt:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        ) == 0
    )
    {
      return true; // success using local knowledge
    }
  else
    {
      return this->::CORBA::Object::_is_a (value);
    }
}

const char* CosNaming::NamingContextExt::_interface_repository_id (void) const
{
  return "IDL:CosNaming/NamingContextExt:1.0";
}

::CORBA::Boolean
CosNaming::NamingContextExt::marshal (TAO_OutputCDR &cdr)
{
  return (cdr << this);
}

// TAO_IDL - Generated from
// be/be_visitor_structure/cdr_op_cs.cpp:49

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const CosNaming::NameComponent &_tao_aggregate)
{
  return
    (strm << _tao_aggregate.id.in ()) &&
    (strm << _tao_aggregate.kind.in ());
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    CosNaming::NameComponent &_tao_aggregate)
{
  return
    (strm >> _tao_aggregate.id.out ()) &&
    (strm >> _tao_aggregate.kind.out ());
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_sequence/cdr_op_cs.cpp:93
#if !defined _TAO_CDR_OP_CosNaming_Name_CPP_
#define _TAO_CDR_OP_CosNaming_Name_CPP_

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const CosNaming::Name &_tao_sequence)
{
  return TAO::marshal_sequence(strm, _tao_sequence);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    CosNaming::Name &_tao_sequence)
{
  return TAO::demarshal_sequence(strm, _tao_sequence);
}


TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_CDR_OP_CosNaming_Name_CPP_ */

// TAO_IDL - Generated from
// be/be_visitor_enum/cdr_op_cs.cpp:34


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (TAO_OutputCDR &strm, CosNaming::BindingType _tao_enumerator)
{
  return strm << static_cast< ::CORBA::ULong> (_tao_enumerator);
}

::CORBA::Boolean operator>> (TAO_InputCDR &strm, CosNaming::BindingType & _tao_enumerator)
{
  ::CORBA::ULong _tao_temp = 0;
  ::CORBA::Boolean const _tao_success = strm >> _tao_temp;
  
  if (_tao_success)
    {
      _tao_enumerator = static_cast<CosNaming::BindingType> (_tao_temp);
    }
  
  return _tao_success;
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_structure/cdr_op_cs.cpp:49

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const CosNaming::Binding &_tao_aggregate)
{
  return
    (strm << _tao_aggregate.binding_name) &&
    (strm << _tao_aggregate.binding_type);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    CosNaming::Binding &_tao_aggregate)
{
  return
    (strm >> _tao_aggregate.binding_name) &&
    (strm >> _tao_aggregate.binding_type);
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_sequence/cdr_op_cs.cpp:93
#if !defined _TAO_CDR_OP_CosNaming_BindingList_CPP_
#define _TAO_CDR_OP_CosNaming_BindingList_CPP_

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const CosNaming::BindingList &_tao_sequence)
{
  return TAO::marshal_sequence(strm, _tao_sequence);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    CosNaming::BindingList &_tao_sequence)
{
  return TAO::demarshal_sequence(strm, _tao_sequence);
}


TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_CDR_OP_CosNaming_BindingList_CPP_ */

// TAO_IDL - Generated from
// be/be_visitor_enum/cdr_op_cs.cpp:34


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (TAO_OutputCDR &strm, CosNaming::NamingContext::NotFoundReason _tao_enumerator)
{
  return strm << static_cast< ::CORBA::ULong> (_tao_enumerator);
}

::CORBA::Boolean operator>> (TAO_InputCDR &strm, CosNaming::NamingContext::NotFoundReason & _tao_enumerator)
{
  ::CORBA::ULong _tao_temp = 0;
  ::CORBA::Boolean const _tao_success = strm >> _tao_temp;
  
  if (_tao_success)
    {
      _tao_enumerator = static_cast<CosNaming::NamingContext::NotFoundReason> (_tao_temp);
    }
  
  return _tao_success;
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_exception/cdr_op_cs.cpp:48
TAO_BEGIN_VERSIONED_NAMESPACE_DECL



::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const CosNaming::NamingContext::NotFound &_tao_aggregate
  )
{
  // First marshal the repository ID.
  if (strm << _tao_aggregate._rep_id ())
    {
      // Now marshal the members (if any).
      return (
        (strm << _tao_aggregate.why) &&
        (strm << _tao_aggregate.rest_of_name)
       );
    }
  else
    {
      return false;
    }
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    CosNaming::NamingContext::NotFound &_tao_aggregate
  )
{
  // Demarshal the members.
  return (
    (strm >> _tao_aggregate.why) &&
    (strm >> _tao_aggregate.rest_of_name)
  );
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_exception/cdr_op_cs.cpp:48
TAO_BEGIN_VERSIONED_NAMESPACE_DECL



::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const CosNaming::NamingContext::CannotProceed &_tao_aggregate
  )
{
  // First marshal the repository ID.
  if (strm << _tao_aggregate._rep_id ())
    {
      // Now marshal the members (if any).
      return (
        ::CORBA::Object::marshal (
            _tao_aggregate.cxt.in (),
            strm
          ) &&
        (strm << _tao_aggregate.rest_of_name)
       );
    }
  else
    {
      return false;
    }
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    CosNaming::NamingContext::CannotProceed &_tao_aggregate
  )
{
  // Demarshal the members.
  return (
    (strm >> _tao_aggregate.cxt.out ()) &&
    (strm >> _tao_aggregate.rest_of_name)
  );
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_exception/cdr_op_cs.cpp:48
TAO_BEGIN_VERSIONED_NAMESPACE_DECL



::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const CosNaming::NamingContext::InvalidName &_tao_aggregate
  )
{
  // Marshal the repository ID.
  return (strm << _tao_aggregate._rep_id ());
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &,
    CosNaming::NamingContext::InvalidName&
  )
{
  return true;
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_exception/cdr_op_cs.cpp:48
TAO_BEGIN_VERSIONED_NAMESPACE_DECL



::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const CosNaming::NamingContext::AlreadyBound &_tao_aggregate
  )
{
  // Marshal the repository ID.
  return (strm << _tao_aggregate._rep_id ());
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &,
    CosNaming::NamingContext::AlreadyBound&
  )
{
  return true;
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_exception/cdr_op_cs.cpp:48
TAO_BEGIN_VERSIONED_NAMESPACE_DECL



::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const CosNaming::NamingContext::NotEmpty &_tao_aggregate
  )
{
  // Marshal the repository ID.
  return (strm << _tao_aggregate._rep_id ());
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &,
    CosNaming::NamingContext::NotEmpty&
  )
{
  return true;
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_interface/cdr_op_cs.cpp:51

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const CosNaming::NamingContext_ptr _tao_objref)
{
  ::CORBA::Object_ptr _tao_corba_obj = _tao_objref;
  return (strm << _tao_corba_obj);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    CosNaming::NamingContext_ptr &_tao_objref)
{
  ::CORBA::Object_var obj;

  if (!(strm >> obj.inout ()))
    {
      return false;
    }
  
  typedef ::CosNaming::NamingContext RHS_SCOPED_NAME;

  // Narrow to the right type.
  _tao_objref =
    TAO::Narrow_Utils<RHS_SCOPED_NAME>::unchecked_narrow (obj.in ());
    
  return true;
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_interface/cdr_op_cs.cpp:51

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const CosNaming::BindingIterator_ptr _tao_objref)
{
  ::CORBA::Object_ptr _tao_corba_obj = _tao_objref;
  return (strm << _tao_corba_obj);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    CosNaming::BindingIterator_ptr &_tao_objref)
{
  ::CORBA::Object_var obj;

  if (!(strm >> obj.inout ()))
    {
      return false;
    }
  
  typedef ::CosNaming::BindingIterator RHS_SCOPED_NAME;

  // Narrow to the right type.
  _tao_objref =
    TAO::Narrow_Utils<RHS_SCOPED_NAME>::unchecked_narrow (obj.in ());
    
  return true;
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_exception/cdr_op_cs.cpp:48
TAO_BEGIN_VERSIONED_NAMESPACE_DECL



::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const CosNaming::NamingContextExt::InvalidAddress &_tao_aggregate
  )
{
  // Marshal the repository ID.
  return (strm << _tao_aggregate._rep_id ());
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &,
    CosNaming::NamingContextExt::InvalidAddress&
  )
{
  return true;
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_interface/cdr_op_cs.cpp:51

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const CosNaming::NamingContextExt_ptr _tao_objref)
{
  ::CORBA::Object_ptr _tao_corba_obj = _tao_objref;
  return (strm << _tao_corba_obj);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    CosNaming::NamingContextExt_ptr &_tao_objref)
{
  ::CORBA::Object_var obj;

  if (!(strm >> obj.inout ()))
    {
      return false;
    }
  
  typedef ::CosNaming::NamingContextExt RHS_SCOPED_NAME;

  // Narrow to the right type.
  _tao_objref =
    TAO::Narrow_Utils<RHS_SCOPED_NAME>::unchecked_narrow (obj.in ());
    
  return true;
}

TAO_END_VERSIONED_NAMESPACE_DECL



