// -*- C++ -*-
/**
 * Code generated by the The ACE ORB (TAO) IDL Compiler v2.4.1
 * TAO and the TAO IDL Compiler have been developed by:
 *       Center for Distributed Object Computing
 *       Washington University
 *       St. Louis, MO
 *       USA
 *       http://www.cs.wustl.edu/~schmidt/doc-center.html
 * and
 *       Distributed Object Computing Laboratory
 *       University of California at Irvine
 *       Irvine, CA
 *       USA
 * and
 *       Institute for Software Integrated Systems
 *       Vanderbilt University
 *       Nashville, TN
 *       USA
 *       http://www.isis.vanderbilt.edu/
 *
 * Information about TAO is available at:
 *     http://www.dre.vanderbilt.edu/~schmidt/TAO.html
 **/

// TAO_IDL - Generated from
// be/be_codegen.cpp:458

#ifndef _TAO_IDL_ONELINECOSNAMINGS_BB5OB9_H_
#define _TAO_IDL_ONELINECOSNAMINGS_BB5OB9_H_

#include /**/ "ace/pre.h"

#include "OneLineCosNamingC.h"
#include "tao/PortableServer/Basic_SArguments.h"
#include "tao/PortableServer/Special_Basic_SArguments.h"
#include "tao/PortableServer/Fixed_Size_SArgument_T.h"
#include "tao/PortableServer/Var_Size_SArgument_T.h"
#include "tao/PortableServer/Object_SArg_Traits.h"
#include "tao/PortableServer/Special_Basic_SArguments.h"
#include "tao/PortableServer/UB_String_SArguments.h"
#include "tao/PortableServer/Object_SArg_Traits.h"
#include "tao/PortableServer/get_arg.h"
#include "tao/Special_Basic_Arguments.h"
#include "tao/UB_String_Arguments.h"

#if !defined (ACE_LACKS_PRAGMA_ONCE)
# pragma once
#endif /* ACE_LACKS_PRAGMA_ONCE */

#include "tao/PortableServer/PortableServer.h"
#include "tao/PortableServer/Servant_Base.h"

// TAO_IDL - Generated from
// be/be_visitor_arg_traits.cpp:66

TAO_BEGIN_VERSIONED_NAMESPACE_DECL


// Arg traits specializations.
namespace TAO
{

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:945

  template<>
  class SArg_Traits< ::CosNaming::NameComponent>
    : public
        Var_Size_SArg_Traits_T<
            ::CosNaming::NameComponent,
            TAO::Any_Insert_Policy_Noop
          >
  {
  };

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:683

  template<>
  class SArg_Traits< ::CosNaming::Name>
    : public
        Var_Size_SArg_Traits_T<
            ::CosNaming::Name,
            TAO::Any_Insert_Policy_Noop
          >
  {
  };

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:902

  template<>
  class SArg_Traits< ::CosNaming::BindingType>
    : public
        Basic_SArg_Traits_T<
            ::CosNaming::BindingType,
            TAO::Any_Insert_Policy_Noop
          >
  {
  };

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:945

  template<>
  class SArg_Traits< ::CosNaming::Binding>
    : public
        Var_Size_SArg_Traits_T<
            ::CosNaming::Binding,
            TAO::Any_Insert_Policy_Noop
          >
  {
  };

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:683

  template<>
  class SArg_Traits< ::CosNaming::BindingList>
    : public
        Var_Size_SArg_Traits_T<
            ::CosNaming::BindingList,
            TAO::Any_Insert_Policy_Noop
          >
  {
  };

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:145

#if !defined (_COSNAMING_BINDINGITERATOR__SARG_TRAITS_)
#define _COSNAMING_BINDINGITERATOR__SARG_TRAITS_

  template<>
  class  SArg_Traits< ::CosNaming::BindingIterator>
    : public
        Object_SArg_Traits_T<
            ::CosNaming::BindingIterator_ptr,
            ::CosNaming::BindingIterator_var,
            ::CosNaming::BindingIterator_out,
            TAO::Any_Insert_Policy_Noop
          >
  {
  };

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:145

#if !defined (_COSNAMING_NAMINGCONTEXT__SARG_TRAITS_)
#define _COSNAMING_NAMINGCONTEXT__SARG_TRAITS_

  template<>
  class  SArg_Traits< ::CosNaming::NamingContext>
    : public
        Object_SArg_Traits_T<
            ::CosNaming::NamingContext_ptr,
            ::CosNaming::NamingContext_var,
            ::CosNaming::NamingContext_out,
            TAO::Any_Insert_Policy_Noop
          >
  {
  };

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:902

  template<>
  class SArg_Traits< ::CosNaming::NamingContext::NotFoundReason>
    : public
        Basic_SArg_Traits_T<
            ::CosNaming::NamingContext::NotFoundReason,
            TAO::Any_Insert_Policy_Noop
          >
  {
  };

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:145

#if !defined (_COSNAMING_NAMINGCONTEXTEXT__SARG_TRAITS_)
#define _COSNAMING_NAMINGCONTEXTEXT__SARG_TRAITS_

  template<>
  class  SArg_Traits< ::CosNaming::NamingContextExt>
    : public
        Object_SArg_Traits_T<
            ::CosNaming::NamingContextExt_ptr,
            ::CosNaming::NamingContextExt_var,
            ::CosNaming::NamingContextExt_out,
            TAO::Any_Insert_Policy_Noop
          >
  {
  };

#endif /* end #if !defined */
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_module/module_sh.cpp:35

namespace POA_CosNaming
{
  

  // TAO_IDL - Generated from
  // be/be_visitor_interface/interface_sh.cpp:73

  class NamingContext;
  typedef NamingContext *NamingContext_ptr;

  class  NamingContext
    : public virtual PortableServer::ServantBase
  {
  protected:
    NamingContext (void);
  
  public:
    /// Useful for template programming.
    typedef ::CosNaming::NamingContext _stub_type;
    typedef ::CosNaming::NamingContext_ptr _stub_ptr_type;
    typedef ::CosNaming::NamingContext_var _stub_var_type;

    NamingContext (const NamingContext& rhs);
    virtual ~NamingContext (void);

    virtual ::CORBA::Boolean _is_a (const char* logical_type_id);

    virtual void _dispatch (
        TAO_ServerRequest & req,
        TAO::Portable_Server::Servant_Upcall *servant_upcall);
    
    ::CosNaming::NamingContext *_this (void);
    
    virtual const char* _interface_repository_id (void) const;

    // TAO_IDL - Generated from
    // be/be_visitor_operation/operation_sh.cpp:36

    virtual void bind (
      const ::CosNaming::Name & n,
      ::CORBA::Object_ptr obj) = 0;

    static void bind_skel (
        TAO_ServerRequest &server_request,
        TAO::Portable_Server::Servant_Upcall *servant_upcall,
        TAO_ServantBase *servant);

    // TAO_IDL - Generated from
    // be/be_visitor_operation/operation_sh.cpp:36

    virtual void rebind (
      const ::CosNaming::Name & n,
      ::CORBA::Object_ptr obj) = 0;

    static void rebind_skel (
        TAO_ServerRequest &server_request,
        TAO::Portable_Server::Servant_Upcall *servant_upcall,
        TAO_ServantBase *servant);

    // TAO_IDL - Generated from
    // be/be_visitor_operation/operation_sh.cpp:36

    virtual void bind_context (
      const ::CosNaming::Name & n,
      ::CosNaming::NamingContext_ptr nc) = 0;

    static void bind_context_skel (
        TAO_ServerRequest &server_request,
        TAO::Portable_Server::Servant_Upcall *servant_upcall,
        TAO_ServantBase *servant);

    // TAO_IDL - Generated from
    // be/be_visitor_operation/operation_sh.cpp:36

    virtual void rebind_context (
      const ::CosNaming::Name & n,
      ::CosNaming::NamingContext_ptr nc) = 0;

    static void rebind_context_skel (
        TAO_ServerRequest &server_request,
        TAO::Portable_Server::Servant_Upcall *servant_upcall,
        TAO_ServantBase *servant);

    // TAO_IDL - Generated from
    // be/be_visitor_operation/operation_sh.cpp:36

    virtual ::CORBA::Object_ptr resolve (
      const ::CosNaming::Name & n) = 0;

    static void resolve_skel (
        TAO_ServerRequest &server_request,
        TAO::Portable_Server::Servant_Upcall *servant_upcall,
        TAO_ServantBase *servant);

    // TAO_IDL - Generated from
    // be/be_visitor_operation/operation_sh.cpp:36

    virtual void unbind (
      const ::CosNaming::Name & n) = 0;

    static void unbind_skel (
        TAO_ServerRequest &server_request,
        TAO::Portable_Server::Servant_Upcall *servant_upcall,
        TAO_ServantBase *servant);

    // TAO_IDL - Generated from
    // be/be_visitor_operation/operation_sh.cpp:36

    virtual ::CosNaming::NamingContext_ptr new_context (
      void) = 0;

    static void new_context_skel (
        TAO_ServerRequest &server_request,
        TAO::Portable_Server::Servant_Upcall *servant_upcall,
        TAO_ServantBase *servant);

    // TAO_IDL - Generated from
    // be/be_visitor_operation/operation_sh.cpp:36

    virtual ::CosNaming::NamingContext_ptr bind_new_context (
      const ::CosNaming::Name & n) = 0;

    static void bind_new_context_skel (
        TAO_ServerRequest &server_request,
        TAO::Portable_Server::Servant_Upcall *servant_upcall,
        TAO_ServantBase *servant);

    // TAO_IDL - Generated from
    // be/be_visitor_operation/operation_sh.cpp:36

    virtual void destroy (
      void) = 0;

    static void destroy_skel (
        TAO_ServerRequest &server_request,
        TAO::Portable_Server::Servant_Upcall *servant_upcall,
        TAO_ServantBase *servant);

    // TAO_IDL - Generated from
    // be/be_visitor_operation/operation_sh.cpp:36

    virtual void list (
      ::CORBA::ULong how_many,
      ::CosNaming::BindingList_out bl,
      ::CosNaming::BindingIterator_out bi) = 0;

    static void list_skel (
        TAO_ServerRequest &server_request,
        TAO::Portable_Server::Servant_Upcall *servant_upcall,
        TAO_ServantBase *servant);
  };

  // TAO_IDL - Generated from
  // be/be_visitor_interface/interface_sh.cpp:73

  class BindingIterator;
  typedef BindingIterator *BindingIterator_ptr;

  class  BindingIterator
    : public virtual PortableServer::ServantBase
  {
  protected:
    BindingIterator (void);
  
  public:
    /// Useful for template programming.
    typedef ::CosNaming::BindingIterator _stub_type;
    typedef ::CosNaming::BindingIterator_ptr _stub_ptr_type;
    typedef ::CosNaming::BindingIterator_var _stub_var_type;

    BindingIterator (const BindingIterator& rhs);
    virtual ~BindingIterator (void);

    virtual ::CORBA::Boolean _is_a (const char* logical_type_id);

    virtual void _dispatch (
        TAO_ServerRequest & req,
        TAO::Portable_Server::Servant_Upcall *servant_upcall);
    
    ::CosNaming::BindingIterator *_this (void);
    
    virtual const char* _interface_repository_id (void) const;

    // TAO_IDL - Generated from
    // be/be_visitor_operation/operation_sh.cpp:36

    virtual ::CORBA::Boolean next_one (
      ::CosNaming::Binding_out b) = 0;

    static void next_one_skel (
        TAO_ServerRequest &server_request,
        TAO::Portable_Server::Servant_Upcall *servant_upcall,
        TAO_ServantBase *servant);

    // TAO_IDL - Generated from
    // be/be_visitor_operation/operation_sh.cpp:36

    virtual ::CORBA::Boolean next_n (
      ::CORBA::ULong how_many,
      ::CosNaming::BindingList_out bl) = 0;

    static void next_n_skel (
        TAO_ServerRequest &server_request,
        TAO::Portable_Server::Servant_Upcall *servant_upcall,
        TAO_ServantBase *servant);

    // TAO_IDL - Generated from
    // be/be_visitor_operation/operation_sh.cpp:36

    virtual void destroy (
      void) = 0;

    static void destroy_skel (
        TAO_ServerRequest &server_request,
        TAO::Portable_Server::Servant_Upcall *servant_upcall,
        TAO_ServantBase *servant);
  };

  // TAO_IDL - Generated from
  // be/be_visitor_interface/interface_sh.cpp:73

  class NamingContextExt;
  typedef NamingContextExt *NamingContextExt_ptr;

  class  NamingContextExt
    : public virtual POA_CosNaming::NamingContext
  {
  protected:
    NamingContextExt (void);
  
  public:
    /// Useful for template programming.
    typedef ::CosNaming::NamingContextExt _stub_type;
    typedef ::CosNaming::NamingContextExt_ptr _stub_ptr_type;
    typedef ::CosNaming::NamingContextExt_var _stub_var_type;

    NamingContextExt (const NamingContextExt& rhs);
    virtual ~NamingContextExt (void);

    virtual ::CORBA::Boolean _is_a (const char* logical_type_id);

    virtual void _dispatch (
        TAO_ServerRequest & req,
        TAO::Portable_Server::Servant_Upcall *servant_upcall);
    
    ::CosNaming::NamingContextExt *_this (void);
    
    virtual const char* _interface_repository_id (void) const;

    // TAO_IDL - Generated from
    // be/be_visitor_operation/operation_sh.cpp:36

    virtual char * to_string (
      const ::CosNaming::Name & n) = 0;

    static void to_string_skel (
        TAO_ServerRequest &server_request,
        TAO::Portable_Server::Servant_Upcall *servant_upcall,
        TAO_ServantBase *servant);

    // TAO_IDL - Generated from
    // be/be_visitor_operation/operation_sh.cpp:36

    virtual ::CosNaming::Name * to_name (
      const char * sn) = 0;

    static void to_name_skel (
        TAO_ServerRequest &server_request,
        TAO::Portable_Server::Servant_Upcall *servant_upcall,
        TAO_ServantBase *servant);

    // TAO_IDL - Generated from
    // be/be_visitor_operation/operation_sh.cpp:36

    virtual char * to_url (
      const char * addr,
      const char * sn) = 0;

    static void to_url_skel (
        TAO_ServerRequest &server_request,
        TAO::Portable_Server::Servant_Upcall *servant_upcall,
        TAO_ServantBase *servant);

    // TAO_IDL - Generated from
    // be/be_visitor_operation/operation_sh.cpp:36

    virtual ::CORBA::Object_ptr resolve_str (
      const char * n) = 0;

    static void resolve_str_skel (
        TAO_ServerRequest &server_request,
        TAO::Portable_Server::Servant_Upcall *servant_upcall,
        TAO_ServantBase *servant);
  };

// TAO_IDL - Generated from
// be/be_visitor_module/module_sh.cpp:66

} // module CosNaming

#include /**/ "ace/post.h"

#endif /* ifndef */

