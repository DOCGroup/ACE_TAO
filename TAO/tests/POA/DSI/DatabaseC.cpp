// -*- C++ -*-
/**
 * Code generated by the The ACE ORB (TAO) IDL Compiler v2.4.1
 * TAO and the TAO IDL Compiler have been developed by:
 *       Center for Distributed Object Computing
 *       Washington University
 *       St. Louis, MO
 *       USA
 *       http://www.cs.wustl.edu/~schmidt/doc-center.html
 * and
 *       Distributed Object Computing Laboratory
 *       University of California at Irvine
 *       Irvine, CA
 *       USA
 * and
 *       Institute for Software Integrated Systems
 *       Vanderbilt University
 *       Nashville, TN
 *       USA
 *       http://www.isis.vanderbilt.edu/
 *
 * Information about TAO is available at:
 *     http://www.dre.vanderbilt.edu/~schmidt/TAO.html
 **/

// TAO_IDL - Generated from
// be/be_codegen.cpp:373


#include "DatabaseC.h"
#include "tao/CDR.h"
#include "tao/Exception_Data.h"
#include "tao/Invocation_Adapter.h"
#include "tao/Object_T.h"
#include "tao/SystemException.h"
#include "ace/OS_NS_string.h"

#if !defined (__ACE_INLINE__)
#include "DatabaseC.inl"
#endif /* !defined INLINE */

// TAO_IDL - Generated from
// be/be_visitor_exception/exception_ctor.cpp:51

Database::Unknown_Type::Unknown_Type (
    const char * _tao_type)
  : ::CORBA::UserException (
        "IDL:Database/Unknown_Type:1.0",
        "Unknown_Type"
      )
{
  this->type = ::CORBA::string_dup (_tao_type);
}



// TAO_IDL - Generated from
// be/be_visitor_exception/exception_cs.cpp:98

Database::Unknown_Type::Unknown_Type (void)
  : ::CORBA::UserException (
        "IDL:Database/Unknown_Type:1.0",
        "Unknown_Type"
      )
{
}

Database::Unknown_Type::~Unknown_Type (void)
{
}

Database::Unknown_Type::Unknown_Type (const ::Database::Unknown_Type &_tao_excp)
  : ::CORBA::UserException (
        _tao_excp._rep_id (),
        _tao_excp._name ()
      )
{
  this->type = ::CORBA::string_dup (_tao_excp.type.in ());
}

Database::Unknown_Type&
Database::Unknown_Type::operator= (const ::Database::Unknown_Type &_tao_excp)
{
  this->::CORBA::UserException::operator= (_tao_excp);
  this->type = ::CORBA::string_dup (_tao_excp.type.in ());
  return *this;
}

Database::Unknown_Type *
Database::Unknown_Type::_downcast ( ::CORBA::Exception *_tao_excp)
{
  return dynamic_cast<Unknown_Type *> (_tao_excp);
}

const Database::Unknown_Type *
Database::Unknown_Type::_downcast ( ::CORBA::Exception const *_tao_excp)
{
  return dynamic_cast<const Unknown_Type *> (_tao_excp);
}

::CORBA::Exception *Database::Unknown_Type::_alloc (void)
{
  ::CORBA::Exception *retval = 0;
  ACE_NEW_RETURN (retval, ::Database::Unknown_Type, 0);
  return retval;
}

::CORBA::Exception *
Database::Unknown_Type::_tao_duplicate (void) const
{
  ::CORBA::Exception *result = 0;
  ACE_NEW_RETURN (
      result,
      ::Database::Unknown_Type (*this),
      0
    );
  return result;
}

void Database::Unknown_Type::_raise (void) const
{
  throw *this;
}

void Database::Unknown_Type::_tao_encode (TAO_OutputCDR &cdr) const
{
  if (!(cdr << *this))
    {
      throw ::CORBA::MARSHAL ();
    }
}

void Database::Unknown_Type::_tao_decode (TAO_InputCDR &cdr)
{
  if (!(cdr >> *this))
    {
      throw ::CORBA::MARSHAL ();
    }
}



// TAO_IDL - Generated from
// be/be_visitor_exception/exception_ctor.cpp:51

Database::Unknown_Key::Unknown_Key (
    const char * _tao_key)
  : ::CORBA::UserException (
        "IDL:Database/Unknown_Key:1.0",
        "Unknown_Key"
      )
{
  this->key = ::CORBA::string_dup (_tao_key);
}



// TAO_IDL - Generated from
// be/be_visitor_exception/exception_cs.cpp:98

Database::Unknown_Key::Unknown_Key (void)
  : ::CORBA::UserException (
        "IDL:Database/Unknown_Key:1.0",
        "Unknown_Key"
      )
{
}

Database::Unknown_Key::~Unknown_Key (void)
{
}

Database::Unknown_Key::Unknown_Key (const ::Database::Unknown_Key &_tao_excp)
  : ::CORBA::UserException (
        _tao_excp._rep_id (),
        _tao_excp._name ()
      )
{
  this->key = ::CORBA::string_dup (_tao_excp.key.in ());
}

Database::Unknown_Key&
Database::Unknown_Key::operator= (const ::Database::Unknown_Key &_tao_excp)
{
  this->::CORBA::UserException::operator= (_tao_excp);
  this->key = ::CORBA::string_dup (_tao_excp.key.in ());
  return *this;
}

Database::Unknown_Key *
Database::Unknown_Key::_downcast ( ::CORBA::Exception *_tao_excp)
{
  return dynamic_cast<Unknown_Key *> (_tao_excp);
}

const Database::Unknown_Key *
Database::Unknown_Key::_downcast ( ::CORBA::Exception const *_tao_excp)
{
  return dynamic_cast<const Unknown_Key *> (_tao_excp);
}

::CORBA::Exception *Database::Unknown_Key::_alloc (void)
{
  ::CORBA::Exception *retval = 0;
  ACE_NEW_RETURN (retval, ::Database::Unknown_Key, 0);
  return retval;
}

::CORBA::Exception *
Database::Unknown_Key::_tao_duplicate (void) const
{
  ::CORBA::Exception *result = 0;
  ACE_NEW_RETURN (
      result,
      ::Database::Unknown_Key (*this),
      0
    );
  return result;
}

void Database::Unknown_Key::_raise (void) const
{
  throw *this;
}

void Database::Unknown_Key::_tao_encode (TAO_OutputCDR &cdr) const
{
  if (!(cdr << *this))
    {
      throw ::CORBA::MARSHAL ();
    }
}

void Database::Unknown_Key::_tao_decode (TAO_InputCDR &cdr)
{
  if (!(cdr >> *this))
    {
      throw ::CORBA::MARSHAL ();
    }
}



// TAO_IDL - Generated from
// be/be_visitor_exception/exception_ctor.cpp:51

Database::Duplicate_Key::Duplicate_Key (
    const char * _tao_key)
  : ::CORBA::UserException (
        "IDL:Database/Duplicate_Key:1.0",
        "Duplicate_Key"
      )
{
  this->key = ::CORBA::string_dup (_tao_key);
}



// TAO_IDL - Generated from
// be/be_visitor_exception/exception_cs.cpp:98

Database::Duplicate_Key::Duplicate_Key (void)
  : ::CORBA::UserException (
        "IDL:Database/Duplicate_Key:1.0",
        "Duplicate_Key"
      )
{
}

Database::Duplicate_Key::~Duplicate_Key (void)
{
}

Database::Duplicate_Key::Duplicate_Key (const ::Database::Duplicate_Key &_tao_excp)
  : ::CORBA::UserException (
        _tao_excp._rep_id (),
        _tao_excp._name ()
      )
{
  this->key = ::CORBA::string_dup (_tao_excp.key.in ());
}

Database::Duplicate_Key&
Database::Duplicate_Key::operator= (const ::Database::Duplicate_Key &_tao_excp)
{
  this->::CORBA::UserException::operator= (_tao_excp);
  this->key = ::CORBA::string_dup (_tao_excp.key.in ());
  return *this;
}

Database::Duplicate_Key *
Database::Duplicate_Key::_downcast ( ::CORBA::Exception *_tao_excp)
{
  return dynamic_cast<Duplicate_Key *> (_tao_excp);
}

const Database::Duplicate_Key *
Database::Duplicate_Key::_downcast ( ::CORBA::Exception const *_tao_excp)
{
  return dynamic_cast<const Duplicate_Key *> (_tao_excp);
}

::CORBA::Exception *Database::Duplicate_Key::_alloc (void)
{
  ::CORBA::Exception *retval = 0;
  ACE_NEW_RETURN (retval, ::Database::Duplicate_Key, 0);
  return retval;
}

::CORBA::Exception *
Database::Duplicate_Key::_tao_duplicate (void) const
{
  ::CORBA::Exception *result = 0;
  ACE_NEW_RETURN (
      result,
      ::Database::Duplicate_Key (*this),
      0
    );
  return result;
}

void Database::Duplicate_Key::_raise (void) const
{
  throw *this;
}

void Database::Duplicate_Key::_tao_encode (TAO_OutputCDR &cdr) const
{
  if (!(cdr << *this))
    {
      throw ::CORBA::MARSHAL ();
    }
}

void Database::Duplicate_Key::_tao_decode (TAO_InputCDR &cdr)
{
  if (!(cdr >> *this))
    {
      throw ::CORBA::MARSHAL ();
    }
}



// TAO_IDL - Generated from
// be/be_visitor_exception/exception_ctor.cpp:51

Database::Not_Found::Not_Found (
    const char * _tao_key)
  : ::CORBA::UserException (
        "IDL:Database/Not_Found:1.0",
        "Not_Found"
      )
{
  this->key = ::CORBA::string_dup (_tao_key);
}



// TAO_IDL - Generated from
// be/be_visitor_exception/exception_cs.cpp:98

Database::Not_Found::Not_Found (void)
  : ::CORBA::UserException (
        "IDL:Database/Not_Found:1.0",
        "Not_Found"
      )
{
}

Database::Not_Found::~Not_Found (void)
{
}

Database::Not_Found::Not_Found (const ::Database::Not_Found &_tao_excp)
  : ::CORBA::UserException (
        _tao_excp._rep_id (),
        _tao_excp._name ()
      )
{
  this->key = ::CORBA::string_dup (_tao_excp.key.in ());
}

Database::Not_Found&
Database::Not_Found::operator= (const ::Database::Not_Found &_tao_excp)
{
  this->::CORBA::UserException::operator= (_tao_excp);
  this->key = ::CORBA::string_dup (_tao_excp.key.in ());
  return *this;
}

Database::Not_Found *
Database::Not_Found::_downcast ( ::CORBA::Exception *_tao_excp)
{
  return dynamic_cast<Not_Found *> (_tao_excp);
}

const Database::Not_Found *
Database::Not_Found::_downcast ( ::CORBA::Exception const *_tao_excp)
{
  return dynamic_cast<const Not_Found *> (_tao_excp);
}

::CORBA::Exception *Database::Not_Found::_alloc (void)
{
  ::CORBA::Exception *retval = 0;
  ACE_NEW_RETURN (retval, ::Database::Not_Found, 0);
  return retval;
}

::CORBA::Exception *
Database::Not_Found::_tao_duplicate (void) const
{
  ::CORBA::Exception *result = 0;
  ACE_NEW_RETURN (
      result,
      ::Database::Not_Found (*this),
      0
    );
  return result;
}

void Database::Not_Found::_raise (void) const
{
  throw *this;
}

void Database::Not_Found::_tao_encode (TAO_OutputCDR &cdr) const
{
  if (!(cdr << *this))
    {
      throw ::CORBA::MARSHAL ();
    }
}

void Database::Not_Found::_tao_decode (TAO_InputCDR &cdr)
{
  if (!(cdr >> *this))
    {
      throw ::CORBA::MARSHAL ();
    }
}



// TAO_IDL - Generated from
// be/be_visitor_interface/interface_cs.cpp:48

// Traits specializations for Database::Entry.

Database::Entry_ptr
TAO::Objref_Traits<Database::Entry>::duplicate (
    Database::Entry_ptr p)
{
  return Database::Entry::_duplicate (p);
}

void
TAO::Objref_Traits<Database::Entry>::release (
    Database::Entry_ptr p)
{
  ::CORBA::release (p);
}

Database::Entry_ptr
TAO::Objref_Traits<Database::Entry>::nil (void)
{
  return Database::Entry::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<Database::Entry>::marshal (
    const Database::Entry_ptr p,
    TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:88

char *
Database::Entry::name (
  void)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }

  TAO::Arg_Traits< char *>::ret_val _tao_retval;

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      1,
      "_get_name",
      9,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY,
      TAO::TAO_TWOWAY_INVOCATION
      ,
      TAO::TAO_SYNCHRONOUS_INVOCATION,
      false
    );

  _tao_call.invoke (0, 0);

  return _tao_retval.retn ();
}

Database::Entry::Entry (void)
{
}

Database::Entry::~Entry (void)
{
}

Database::Entry_ptr
Database::Entry::_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return
    TAO::Narrow_Utils<Entry>::narrow (
        _tao_objref,
        "IDL:Database/Entry:1.0");
}

Database::Entry_ptr
Database::Entry::_unchecked_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return
    TAO::Narrow_Utils<Entry>::unchecked_narrow (
        _tao_objref);
}

Database::Entry_ptr
Database::Entry::_nil (void)
{
  return 0;
}

Database::Entry_ptr
Database::Entry::_duplicate (Entry_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  return obj;
}

void
Database::Entry::_tao_release (Entry_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
Database::Entry::_is_a (const char *value)
{
  if (
      ACE_OS::strcmp (
          value,
          "IDL:Database/Entry:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        ) == 0
    )
    {
      return true; // success using local knowledge
    }
  else
    {
      return this->::CORBA::Object::_is_a (value);
    }
}

const char* Database::Entry::_interface_repository_id (void) const
{
  return "IDL:Database/Entry:1.0";
}

::CORBA::Boolean
Database::Entry::marshal (TAO_OutputCDR &cdr)
{
  return (cdr << this);
}

// TAO_IDL - Generated from
// be/be_visitor_interface/interface_cs.cpp:48

// Traits specializations for Database::Employee.

Database::Employee_ptr
TAO::Objref_Traits<Database::Employee>::duplicate (
    Database::Employee_ptr p)
{
  return Database::Employee::_duplicate (p);
}

void
TAO::Objref_Traits<Database::Employee>::release (
    Database::Employee_ptr p)
{
  ::CORBA::release (p);
}

Database::Employee_ptr
TAO::Objref_Traits<Database::Employee>::nil (void)
{
  return Database::Employee::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<Database::Employee>::marshal (
    const Database::Employee_ptr p,
    TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:88

::CORBA::Long
Database::Employee::id (
  void)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }

  TAO::Arg_Traits< ::CORBA::Long>::ret_val _tao_retval;

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      1,
      "_get_id",
      7,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY,
      TAO::TAO_TWOWAY_INVOCATION
      ,
      TAO::TAO_SYNCHRONOUS_INVOCATION,
      false
    );

  _tao_call.invoke (0, 0);

  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:88

void
Database::Employee::id (
  ::CORBA::Long id)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }

  TAO::Arg_Traits< void>::ret_val _tao_retval;
  TAO::Arg_Traits< ::CORBA::Long>::in_arg_val _tao_id (id);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_id
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      2,
      "_set_id",
      7,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY

    );

  _tao_call.invoke (0, 0);
}

Database::Employee::Employee (void)
{
}

Database::Employee::~Employee (void)
{
}

Database::Employee_ptr
Database::Employee::_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return
    TAO::Narrow_Utils<Employee>::narrow (
        _tao_objref,
        "IDL:Database/Employee:1.0");
}

Database::Employee_ptr
Database::Employee::_unchecked_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return
    TAO::Narrow_Utils<Employee>::unchecked_narrow (
        _tao_objref);
}

Database::Employee_ptr
Database::Employee::_nil (void)
{
  return 0;
}

Database::Employee_ptr
Database::Employee::_duplicate (Employee_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  return obj;
}

void
Database::Employee::_tao_release (Employee_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
Database::Employee::_is_a (const char *value)
{
  if (
      ACE_OS::strcmp (
          value,
          "IDL:Database/Entry:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:Database/Employee:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        ) == 0
    )
    {
      return true; // success using local knowledge
    }
  else
    {
      return this->::CORBA::Object::_is_a (value);
    }
}

const char* Database::Employee::_interface_repository_id (void) const
{
  return "IDL:Database/Employee:1.0";
}

::CORBA::Boolean
Database::Employee::marshal (TAO_OutputCDR &cdr)
{
  return (cdr << this);
}

// TAO_IDL - Generated from
// be/be_visitor_sequence/sequence_cs.cpp:70

#if !defined (_DATABASE_NVPAIRSEQUENCE_CS_)
#define _DATABASE_NVPAIRSEQUENCE_CS_

Database::NVPairSequence::NVPairSequence (void)
{}

Database::NVPairSequence::NVPairSequence (
    ::CORBA::ULong max)
  : ::TAO::unbounded_value_sequence<
        NamedValue
      > (max)
{}

Database::NVPairSequence::NVPairSequence (
    ::CORBA::ULong max,
    ::CORBA::ULong length,
    Database::NamedValue * buffer,
    ::CORBA::Boolean release
  )
  : ::TAO::unbounded_value_sequence<
        NamedValue
      >
    (max, length, buffer, release)
{}

Database::NVPairSequence::NVPairSequence (
    const NVPairSequence &seq)
  : ::TAO::unbounded_value_sequence<
        NamedValue
      > (seq)
{}

Database::NVPairSequence::~NVPairSequence (void)
{}

#endif /* end #if !defined */

// TAO_IDL - Generated from
// be/be_visitor_interface/interface_cs.cpp:48

// Traits specializations for Database::Agent.

Database::Agent_ptr
TAO::Objref_Traits<Database::Agent>::duplicate (
    Database::Agent_ptr p)
{
  return Database::Agent::_duplicate (p);
}

void
TAO::Objref_Traits<Database::Agent>::release (
    Database::Agent_ptr p)
{
  ::CORBA::release (p);
}

Database::Agent_ptr
TAO::Objref_Traits<Database::Agent>::nil (void)
{
  return Database::Agent::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<Database::Agent>::marshal (
    const Database::Agent_ptr p,
    TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:88

::Database::Entry_ptr
Database::Agent::create_entry (
  const char * key,
  const char * entry_type,
  const ::Database::NVPairSequence & initial_attributes)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }

  TAO::Arg_Traits< ::Database::Entry>::ret_val _tao_retval;
  TAO::Arg_Traits< char *>::in_arg_val _tao_key (key);
  TAO::Arg_Traits< char *>::in_arg_val _tao_entry_type (entry_type);
  TAO::Arg_Traits< ::Database::NVPairSequence>::in_arg_val _tao_initial_attributes (initial_attributes);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_key,
      &_tao_entry_type,
      &_tao_initial_attributes
    };

  static TAO::Exception_Data
  _tao_Database_Agent_create_entry_exceptiondata [] =
    {
      {
        "IDL:Database/Unknown_Type:1.0",
        Database::Unknown_Type::_alloc
#if TAO_HAS_INTERCEPTORS == 1
        , 0
#endif /* TAO_HAS_INTERCEPTORS */
      },

      {
        "IDL:Database/Duplicate_Key:1.0",
        Database::Duplicate_Key::_alloc
#if TAO_HAS_INTERCEPTORS == 1
        , 0
#endif /* TAO_HAS_INTERCEPTORS */
      }
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      4,
      "create_entry",
      12,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY

    );

  _tao_call.invoke (
      _tao_Database_Agent_create_entry_exceptiondata,
      2
    );

  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:88

::Database::Entry_ptr
Database::Agent::find_entry (
  const char * key,
  const char * entry_type)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }

  TAO::Arg_Traits< ::Database::Entry>::ret_val _tao_retval;
  TAO::Arg_Traits< char *>::in_arg_val _tao_key (key);
  TAO::Arg_Traits< char *>::in_arg_val _tao_entry_type (entry_type);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_key,
      &_tao_entry_type
    };

  static TAO::Exception_Data
  _tao_Database_Agent_find_entry_exceptiondata [] =
    {
      {
        "IDL:Database/Unknown_Type:1.0",
        Database::Unknown_Type::_alloc
#if TAO_HAS_INTERCEPTORS == 1
        , 0
#endif /* TAO_HAS_INTERCEPTORS */
      },

      {
        "IDL:Database/Not_Found:1.0",
        Database::Not_Found::_alloc
#if TAO_HAS_INTERCEPTORS == 1
        , 0
#endif /* TAO_HAS_INTERCEPTORS */
      }
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      3,
      "find_entry",
      10,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY

    );

  _tao_call.invoke (
      _tao_Database_Agent_find_entry_exceptiondata,
      2
    );

  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:88

void
Database::Agent::destroy_entry (
  const char * key,
  const char * entry_type)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }

  TAO::Arg_Traits< void>::ret_val _tao_retval;
  TAO::Arg_Traits< char *>::in_arg_val _tao_key (key);
  TAO::Arg_Traits< char *>::in_arg_val _tao_entry_type (entry_type);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_key,
      &_tao_entry_type
    };

  static TAO::Exception_Data
  _tao_Database_Agent_destroy_entry_exceptiondata [] =
    {
      {
        "IDL:Database/Unknown_Type:1.0",
        Database::Unknown_Type::_alloc
#if TAO_HAS_INTERCEPTORS == 1
        , 0
#endif /* TAO_HAS_INTERCEPTORS */
      },

      {
        "IDL:Database/Unknown_Key:1.0",
        Database::Unknown_Key::_alloc
#if TAO_HAS_INTERCEPTORS == 1
        , 0
#endif /* TAO_HAS_INTERCEPTORS */
      }
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      3,
      "destroy_entry",
      13,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY

    );

  _tao_call.invoke (
      _tao_Database_Agent_destroy_entry_exceptiondata,
      2
    );
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:88

void
Database::Agent::shutdown (
  void)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }

  TAO::Arg_Traits< void>::ret_val _tao_retval;

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      1,
      "shutdown",
      8,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY,
      TAO::TAO_ONEWAY_INVOCATION,
      TAO::TAO_SYNCHRONOUS_INVOCATION,
      false
    );

  _tao_call.invoke (0, 0);
}

Database::Agent::Agent (void)
{
}

Database::Agent::~Agent (void)
{
}

Database::Agent_ptr
Database::Agent::_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return
    TAO::Narrow_Utils<Agent>::narrow (
        _tao_objref,
        "IDL:Database/Agent:1.0");
}

Database::Agent_ptr
Database::Agent::_unchecked_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return
    TAO::Narrow_Utils<Agent>::unchecked_narrow (
        _tao_objref);
}

Database::Agent_ptr
Database::Agent::_nil (void)
{
  return 0;
}

Database::Agent_ptr
Database::Agent::_duplicate (Agent_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  return obj;
}

void
Database::Agent::_tao_release (Agent_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
Database::Agent::_is_a (const char *value)
{
  if (
      ACE_OS::strcmp (
          value,
          "IDL:Database/Agent:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        ) == 0
    )
    {
      return true; // success using local knowledge
    }
  else
    {
      return this->::CORBA::Object::_is_a (value);
    }
}

const char* Database::Agent::_interface_repository_id (void) const
{
  return "IDL:Database/Agent:1.0";
}

::CORBA::Boolean
Database::Agent::marshal (TAO_OutputCDR &cdr)
{
  return (cdr << this);
}

// TAO_IDL - Generated from
// be/be_visitor_exception/cdr_op_cs.cpp:48
TAO_BEGIN_VERSIONED_NAMESPACE_DECL



::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Database::Unknown_Type &_tao_aggregate
  )
{
  // First marshal the repository ID.
  if (strm << _tao_aggregate._rep_id ())
    {
      // Now marshal the members (if any).
      return (
        (strm << _tao_aggregate.type.in ())
       );
    }
  else
    {
      return false;
    }
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Database::Unknown_Type &_tao_aggregate
  )
{
  // Demarshal the members.
  return (
    (strm >> _tao_aggregate.type.out ())
  );
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_exception/cdr_op_cs.cpp:48
TAO_BEGIN_VERSIONED_NAMESPACE_DECL



::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Database::Unknown_Key &_tao_aggregate
  )
{
  // First marshal the repository ID.
  if (strm << _tao_aggregate._rep_id ())
    {
      // Now marshal the members (if any).
      return (
        (strm << _tao_aggregate.key.in ())
       );
    }
  else
    {
      return false;
    }
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Database::Unknown_Key &_tao_aggregate
  )
{
  // Demarshal the members.
  return (
    (strm >> _tao_aggregate.key.out ())
  );
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_exception/cdr_op_cs.cpp:48
TAO_BEGIN_VERSIONED_NAMESPACE_DECL



::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Database::Duplicate_Key &_tao_aggregate
  )
{
  // First marshal the repository ID.
  if (strm << _tao_aggregate._rep_id ())
    {
      // Now marshal the members (if any).
      return (
        (strm << _tao_aggregate.key.in ())
       );
    }
  else
    {
      return false;
    }
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Database::Duplicate_Key &_tao_aggregate
  )
{
  // Demarshal the members.
  return (
    (strm >> _tao_aggregate.key.out ())
  );
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_exception/cdr_op_cs.cpp:48
TAO_BEGIN_VERSIONED_NAMESPACE_DECL



::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Database::Not_Found &_tao_aggregate
  )
{
  // First marshal the repository ID.
  if (strm << _tao_aggregate._rep_id ())
    {
      // Now marshal the members (if any).
      return (
        (strm << _tao_aggregate.key.in ())
       );
    }
  else
    {
      return false;
    }
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Database::Not_Found &_tao_aggregate
  )
{
  // Demarshal the members.
  return (
    (strm >> _tao_aggregate.key.out ())
  );
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_interface/cdr_op_cs.cpp:51

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Database::Entry_ptr _tao_objref)
{
  ::CORBA::Object_ptr _tao_corba_obj = _tao_objref;
  return (strm << _tao_corba_obj);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Database::Entry_ptr &_tao_objref)
{
  ::CORBA::Object_var obj;

  if (!(strm >> obj.inout ()))
    {
      return false;
    }

  typedef ::Database::Entry RHS_SCOPED_NAME;

  // Narrow to the right type.
  _tao_objref =
    TAO::Narrow_Utils<RHS_SCOPED_NAME>::unchecked_narrow (obj.in ());

  return true;
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_interface/cdr_op_cs.cpp:51

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Database::Employee_ptr _tao_objref)
{
  ::CORBA::Object_ptr _tao_corba_obj = _tao_objref;
  return (strm << _tao_corba_obj);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Database::Employee_ptr &_tao_objref)
{
  ::CORBA::Object_var obj;

  if (!(strm >> obj.inout ()))
    {
      return false;
    }

  typedef ::Database::Employee RHS_SCOPED_NAME;

  // Narrow to the right type.
  _tao_objref =
    TAO::Narrow_Utils<RHS_SCOPED_NAME>::unchecked_narrow (obj.in ());

  return true;
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_structure/cdr_op_cs.cpp:49

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Database::NamedValue &_tao_aggregate)
{
  return
    (strm << _tao_aggregate.name.in ()) &&
    (strm << _tao_aggregate.value) &&
    (strm << _tao_aggregate.options);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Database::NamedValue &_tao_aggregate)
{
  return
    (strm >> _tao_aggregate.name.out ()) &&
    (strm >> _tao_aggregate.value) &&
    (strm >> _tao_aggregate.options);
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_sequence/cdr_op_cs.cpp:93
#if !defined _TAO_CDR_OP_Database_NVPairSequence_CPP_
#define _TAO_CDR_OP_Database_NVPairSequence_CPP_

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Database::NVPairSequence &_tao_sequence)
{
  return TAO::marshal_sequence(strm, _tao_sequence);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Database::NVPairSequence &_tao_sequence)
{
  return TAO::demarshal_sequence(strm, _tao_sequence);
}


TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_CDR_OP_Database_NVPairSequence_CPP_ */

// TAO_IDL - Generated from
// be/be_visitor_interface/cdr_op_cs.cpp:51

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Database::Agent_ptr _tao_objref)
{
  ::CORBA::Object_ptr _tao_corba_obj = _tao_objref;
  return (strm << _tao_corba_obj);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Database::Agent_ptr &_tao_objref)
{
  ::CORBA::Object_var obj;

  if (!(strm >> obj.inout ()))
    {
      return false;
    }

  typedef ::Database::Agent RHS_SCOPED_NAME;

  // Narrow to the right type.
  _tao_objref =
    TAO::Narrow_Utils<RHS_SCOPED_NAME>::unchecked_narrow (obj.in ());

  return true;
}

TAO_END_VERSIONED_NAMESPACE_DECL



