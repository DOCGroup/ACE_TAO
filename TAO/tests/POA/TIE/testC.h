// -*- C++ -*-
/**
 * Code generated by the The ACE ORB (TAO) IDL Compiler v2.4.1
 * TAO and the TAO IDL Compiler have been developed by:
 *       Center for Distributed Object Computing
 *       Washington University
 *       St. Louis, MO
 *       USA
 *       http://www.cs.wustl.edu/~schmidt/doc-center.html
 * and
 *       Distributed Object Computing Laboratory
 *       University of California at Irvine
 *       Irvine, CA
 *       USA
 * and
 *       Institute for Software Integrated Systems
 *       Vanderbilt University
 *       Nashville, TN
 *       USA
 *       http://www.isis.vanderbilt.edu/
 *
 * Information about TAO is available at:
 *     http://www.dre.vanderbilt.edu/~schmidt/TAO.html
 **/

// TAO_IDL - Generated from
// be/be_codegen.cpp:149

#ifndef _TAO_IDL_TESTC_ZYF4GF_H_
#define _TAO_IDL_TESTC_ZYF4GF_H_

#include /**/ "ace/pre.h"


#include /**/ "ace/config-all.h"

#if !defined (ACE_LACKS_PRAGMA_ONCE)
# pragma once
#endif /* ACE_LACKS_PRAGMA_ONCE */


#include "tao/ORB.h"
#include "tao/SystemException.h"
#include "tao/Basic_Types.h"
#include "tao/ORB_Constants.h"
#include "tao/Object.h"
#include "tao/Objref_VarOut_T.h"
#include "tao/Arg_Traits_T.h"
#include "tao/Basic_Arguments.h"
#include "tao/Special_Basic_Arguments.h"
#include "tao/Any_Insert_Policy_T.h"
#include "tao/Fixed_Size_Argument_T.h"
#include "tao/Var_Size_Argument_T.h"
#include "tao/Object_Argument_T.h"
#include /**/ "tao/Version.h"
#include /**/ "tao/Versioned_Namespace.h"

#if TAO_MAJOR_VERSION != 2 || TAO_MINOR_VERSION != 4 || TAO_MICRO_VERSION != 1
#error This file should be regenerated with TAO_IDL
#endif

#if defined (TAO_EXPORT_MACRO)
#undef TAO_EXPORT_MACRO
#endif
#define TAO_EXPORT_MACRO 

// TAO_IDL - Generated from
// be/be_visitor_root/root_ch.cpp:157
TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<typename T> class Narrow_Utils;
}
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_interface.cpp:748

#if !defined (_A__VAR_OUT_CH_)
#define _A__VAR_OUT_CH_

class A;
typedef A *A_ptr;

typedef
  TAO_Objref_Var_T<
      A
    >
  A_var;

typedef
  TAO_Objref_Out_T<
      A
    >
  A_out;

#endif /* end #if !defined */

// TAO_IDL - Generated from
// be/be_visitor_interface/interface_ch.cpp:40

class  A
  : public virtual ::CORBA::Object
{
public:
  friend class TAO::Narrow_Utils<A>;

  // TAO_IDL - Generated from
  // be/be_type.cpp:304

  typedef A_ptr _ptr_type;
  typedef A_var _var_type;
  typedef A_out _out_type;

  // The static operations.
  static A_ptr _duplicate (A_ptr obj);

  static void _tao_release (A_ptr obj);

  static A_ptr _narrow (::CORBA::Object_ptr obj);
  static A_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
  static A_ptr _nil (void);

  virtual ::CORBA::Long doit (
    void);

  // TAO_IDL - Generated from
  // be/be_visitor_interface/interface_ch.cpp:137

  virtual ::CORBA::Boolean _is_a (const char *type_id);
  virtual const char* _interface_repository_id (void) const;
  virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);

protected:
  // Concrete interface only.
  A (void);

  // Concrete non-local interface only.
  A (
      ::IOP::IOR *ior,
      TAO_ORB_Core *orb_core);
  
  // Non-local interface only.
  A (
      TAO_Stub *objref,
      ::CORBA::Boolean _tao_collocated = false,
      TAO_Abstract_ServantBase *servant = 0,
      TAO_ORB_Core *orb_core = 0);

  virtual ~A (void);

private:
  // Private and unimplemented for concrete interfaces.
  A (const A &);

  void operator= (const A &);
};

// TAO_IDL - Generated from
// be/be_visitor_module/module_ch.cpp:35

namespace Outer
{

  // TAO_IDL - Generated from
  // be/be_interface.cpp:748

#if !defined (_OUTER_B__VAR_OUT_CH_)
#define _OUTER_B__VAR_OUT_CH_

  class B;
  typedef B *B_ptr;

  typedef
    TAO_Objref_Var_T<
        B
      >
    B_var;
  
  typedef
    TAO_Objref_Out_T<
        B
      >
    B_out;

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // be/be_visitor_interface/interface_ch.cpp:40

  class  B
    : public virtual ::CORBA::Object
  {
  public:
    friend class TAO::Narrow_Utils<B>;

    // TAO_IDL - Generated from
    // be/be_type.cpp:304

    typedef B_ptr _ptr_type;
    typedef B_var _var_type;
    typedef B_out _out_type;

    // The static operations.
    static B_ptr _duplicate (B_ptr obj);

    static void _tao_release (B_ptr obj);

    static B_ptr _narrow (::CORBA::Object_ptr obj);
    static B_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
    static B_ptr _nil (void);

    virtual ::CORBA::Long doit (
      void);

    // TAO_IDL - Generated from
    // be/be_visitor_interface/interface_ch.cpp:137

    virtual ::CORBA::Boolean _is_a (const char *type_id);
    virtual const char* _interface_repository_id (void) const;
    virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);
  
  protected:
    // Concrete interface only.
    B (void);

    // Concrete non-local interface only.
    B (
        ::IOP::IOR *ior,
        TAO_ORB_Core *orb_core);
    
    // Non-local interface only.
    B (
        TAO_Stub *objref,
        ::CORBA::Boolean _tao_collocated = false,
        TAO_Abstract_ServantBase *servant = 0,
        TAO_ORB_Core *orb_core = 0);

    virtual ~B (void);
  
  private:
    // Private and unimplemented for concrete interfaces.
    B (const B &);

    void operator= (const B &);
  };

  // TAO_IDL - Generated from
  // be/be_visitor_module/module_ch.cpp:35

  namespace Inner
  {

    // TAO_IDL - Generated from
    // be/be_interface.cpp:748

#if !defined (_OUTER_INNER_C__VAR_OUT_CH_)
#define _OUTER_INNER_C__VAR_OUT_CH_

    class C;
    typedef C *C_ptr;

    typedef
      TAO_Objref_Var_T<
          C
        >
      C_var;
    
    typedef
      TAO_Objref_Out_T<
          C
        >
      C_out;

#endif /* end #if !defined */

    // TAO_IDL - Generated from
    // be/be_visitor_interface/interface_ch.cpp:40

    class  C
      : public virtual ::CORBA::Object
    {
    public:
      friend class TAO::Narrow_Utils<C>;

      // TAO_IDL - Generated from
      // be/be_type.cpp:304

      typedef C_ptr _ptr_type;
      typedef C_var _var_type;
      typedef C_out _out_type;

      // The static operations.
      static C_ptr _duplicate (C_ptr obj);

      static void _tao_release (C_ptr obj);

      static C_ptr _narrow (::CORBA::Object_ptr obj);
      static C_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
      static C_ptr _nil (void);

      virtual ::CORBA::Long doit (
        void);

      // TAO_IDL - Generated from
      // be/be_visitor_interface/interface_ch.cpp:137

      virtual ::CORBA::Boolean _is_a (const char *type_id);
      virtual const char* _interface_repository_id (void) const;
      virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);
    
    protected:
      // Concrete interface only.
      C (void);

      // Concrete non-local interface only.
      C (
          ::IOP::IOR *ior,
          TAO_ORB_Core *orb_core);
      
      // Non-local interface only.
      C (
          TAO_Stub *objref,
          ::CORBA::Boolean _tao_collocated = false,
          TAO_Abstract_ServantBase *servant = 0,
          TAO_ORB_Core *orb_core = 0);

      virtual ~C (void);
    
    private:
      // Private and unimplemented for concrete interfaces.
      C (const C &);

      void operator= (const C &);
    };
  
  // TAO_IDL - Generated from
  // be/be_visitor_module/module_ch.cpp:64
  
  } // module Outer::Inner

// TAO_IDL - Generated from
// be/be_visitor_module/module_ch.cpp:64

} // module Outer

// TAO_IDL - Generated from
// be/be_visitor_arg_traits.cpp:66

TAO_BEGIN_VERSIONED_NAMESPACE_DECL


// Arg traits specializations.
namespace TAO
{

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:145

#if !defined (_A__ARG_TRAITS_)
#define _A__ARG_TRAITS_

  template<>
  class  Arg_Traits< ::A>
    : public
        Object_Arg_Traits_T<
            ::A_ptr,
            ::A_var,
            ::A_out,
            TAO::Objref_Traits<A>,
            TAO::Any_Insert_Policy_Noop
          >
  {
  };

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:145

#if !defined (_OUTER_B__ARG_TRAITS_)
#define _OUTER_B__ARG_TRAITS_

  template<>
  class  Arg_Traits< ::Outer::B>
    : public
        Object_Arg_Traits_T<
            ::Outer::B_ptr,
            ::Outer::B_var,
            ::Outer::B_out,
            TAO::Objref_Traits<Outer::B>,
            TAO::Any_Insert_Policy_Noop
          >
  {
  };

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:145

#if !defined (_OUTER_INNER_C__ARG_TRAITS_)
#define _OUTER_INNER_C__ARG_TRAITS_

  template<>
  class  Arg_Traits< ::Outer::Inner::C>
    : public
        Object_Arg_Traits_T<
            ::Outer::Inner::C_ptr,
            ::Outer::Inner::C_var,
            ::Outer::Inner::C_out,
            TAO::Objref_Traits<Outer::Inner::C>,
            TAO::Any_Insert_Policy_Noop
          >
  {
  };

#endif /* end #if !defined */
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_traits.cpp:60

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Traits specializations.
namespace TAO
{

#if !defined (_A__TRAITS_)
#define _A__TRAITS_

  template<>
  struct  Objref_Traits< ::A>
  {
    static ::A_ptr duplicate (
        ::A_ptr p);
    static void release (
        ::A_ptr p);
    static ::A_ptr nil (void);
    static ::CORBA::Boolean marshal (
        const ::A_ptr p,
        TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_OUTER_B__TRAITS_)
#define _OUTER_B__TRAITS_

  template<>
  struct  Objref_Traits< ::Outer::B>
  {
    static ::Outer::B_ptr duplicate (
        ::Outer::B_ptr p);
    static void release (
        ::Outer::B_ptr p);
    static ::Outer::B_ptr nil (void);
    static ::CORBA::Boolean marshal (
        const ::Outer::B_ptr p,
        TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_OUTER_INNER_C__TRAITS_)
#define _OUTER_INNER_C__TRAITS_

  template<>
  struct  Objref_Traits< ::Outer::Inner::C>
  {
    static ::Outer::Inner::C_ptr duplicate (
        ::Outer::Inner::C_ptr p);
    static void release (
        ::Outer::Inner::C_ptr p);
    static ::Outer::Inner::C_ptr nil (void);
    static ::CORBA::Boolean marshal (
        const ::Outer::Inner::C_ptr p,
        TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */
}
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_interface/cdr_op_ch.cpp:41

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 ::CORBA::Boolean operator<< (TAO_OutputCDR &, const A_ptr );
 ::CORBA::Boolean operator>> (TAO_InputCDR &, A_ptr &);

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_interface/cdr_op_ch.cpp:41

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 ::CORBA::Boolean operator<< (TAO_OutputCDR &, const Outer::B_ptr );
 ::CORBA::Boolean operator>> (TAO_InputCDR &, Outer::B_ptr &);

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_interface/cdr_op_ch.cpp:41

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 ::CORBA::Boolean operator<< (TAO_OutputCDR &, const Outer::Inner::C_ptr );
 ::CORBA::Boolean operator>> (TAO_InputCDR &, Outer::Inner::C_ptr &);

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_codegen.cpp:1700
#if defined (__ACE_INLINE__)
#include "testC.inl"
#endif /* defined INLINE */

#include /**/ "ace/post.h"

#endif /* ifndef */

