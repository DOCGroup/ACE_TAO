// -*- C++ -*-
/**
 * Code generated by the The ACE ORB (TAO) IDL Compiler v2.4.1
 * TAO and the TAO IDL Compiler have been developed by:
 *       Center for Distributed Object Computing
 *       Washington University
 *       St. Louis, MO
 *       USA
 *       http://www.cs.wustl.edu/~schmidt/doc-center.html
 * and
 *       Distributed Object Computing Laboratory
 *       University of California at Irvine
 *       Irvine, CA
 *       USA
 * and
 *       Institute for Software Integrated Systems
 *       Vanderbilt University
 *       Nashville, TN
 *       USA
 *       http://www.isis.vanderbilt.edu/
 *
 * Information about TAO is available at:
 *     http://www.dre.vanderbilt.edu/~schmidt/TAO.html
 **/

// TAO_IDL - Generated from
// be/be_codegen.cpp:149

#ifndef _TAO_IDL_FILEC_Y28QRW_H_
#define _TAO_IDL_FILEC_Y28QRW_H_

#include /**/ "ace/pre.h"


#include /**/ "ace/config-all.h"

#if !defined (ACE_LACKS_PRAGMA_ONCE)
# pragma once
#endif /* ACE_LACKS_PRAGMA_ONCE */


#include "tao/AnyTypeCode/AnyTypeCode_methods.h"
#include "tao/AnyTypeCode/Any.h"
#include "tao/ORB.h"
#include "tao/SystemException.h"
#include "tao/UserException.h"
#include "tao/Basic_Types.h"
#include "tao/ORB_Constants.h"
#include "tao/Object.h"
#include "tao/Sequence_T.h"
#include "tao/Objref_VarOut_T.h"
#include "tao/Seq_Var_T.h"
#include "tao/Seq_Out_T.h"
#include "tao/VarOut_T.h"
#include "tao/Arg_Traits_T.h"
#include "tao/Basic_Arguments.h"
#include "tao/Special_Basic_Arguments.h"
#include "tao/Any_Insert_Policy_T.h"
#include "tao/Fixed_Size_Argument_T.h"
#include "tao/Var_Size_Argument_T.h"
#include "tao/Object_Argument_T.h"
#include "tao/UB_String_Arguments.h"
#include /**/ "tao/Version.h"
#include /**/ "tao/Versioned_Namespace.h"

#if TAO_MAJOR_VERSION != 2 || TAO_MINOR_VERSION != 4 || TAO_MICRO_VERSION != 1
#error This file should be regenerated with TAO_IDL
#endif

#if defined (TAO_EXPORT_MACRO)
#undef TAO_EXPORT_MACRO
#endif
#define TAO_EXPORT_MACRO 

// TAO_IDL - Generated from
// be/be_visitor_root/root_ch.cpp:157
TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<typename T> class Narrow_Utils;
}
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_module/module_ch.cpp:35

namespace File
{

  // TAO_IDL - Generated from
  // be/be_visitor_exception/exception_ch.cpp:41

  class  IOError : public ::CORBA::UserException
  {
  public:
    ::CORBA::Long error;

    IOError (void);
    IOError (const IOError &);
    ~IOError (void);

    IOError &operator= (const IOError &);

    static void _tao_any_destructor (void *);

    static IOError *_downcast ( ::CORBA::Exception *);
    static const IOError *_downcast ( ::CORBA::Exception const *);

    static ::CORBA::Exception *_alloc (void);

    virtual ::CORBA::Exception *_tao_duplicate (void) const;

    virtual void _raise (void) const;

    virtual void _tao_encode (TAO_OutputCDR &cdr) const;
    virtual void _tao_decode (TAO_InputCDR &cdr);

    // TAO_IDL - Generated from
    // be/be_visitor_exception/exception_ctor.cpp:51

    IOError (
        ::CORBA::Long _tao_error);

    virtual ::CORBA::TypeCode_ptr _tao_type (void) const;
  };

  // TAO_IDL - Generated from
  // be/be_visitor_typecode/typecode_decl.cpp:34

  extern  ::CORBA::TypeCode_ptr const _tc_IOError;

  // TAO_IDL - Generated from
  // be/be_interface.cpp:748

#if !defined (_FILE_DESCRIPTOR__VAR_OUT_CH_)
#define _FILE_DESCRIPTOR__VAR_OUT_CH_

  class Descriptor;
  typedef Descriptor *Descriptor_ptr;

  typedef
    TAO_Objref_Var_T<
        Descriptor
      >
    Descriptor_var;
  
  typedef
    TAO_Objref_Out_T<
        Descriptor
      >
    Descriptor_out;

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // be/be_visitor_interface/interface_ch.cpp:40

  class  Descriptor
    : public virtual ::CORBA::Object
  {
  public:
    friend class TAO::Narrow_Utils<Descriptor>;

    // TAO_IDL - Generated from
    // be/be_type.cpp:304

    typedef Descriptor_ptr _ptr_type;
    typedef Descriptor_var _var_type;
    typedef Descriptor_out _out_type;

    static void _tao_any_destructor (void *);

    // The static operations.
    static Descriptor_ptr _duplicate (Descriptor_ptr obj);

    static void _tao_release (Descriptor_ptr obj);

    static Descriptor_ptr _narrow (::CORBA::Object_ptr obj);
    static Descriptor_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
    static Descriptor_ptr _nil (void);

    // TAO_IDL - Generated from
    // be/be_visitor_sequence/sequence_ch.cpp:99

#if !defined (_FILE_DESCRIPTOR_DATABUFFER_CH_)
#define _FILE_DESCRIPTOR_DATABUFFER_CH_

    class DataBuffer;

    typedef
      ::TAO_FixedSeq_Var_T<
          DataBuffer
        >
      DataBuffer_var;

    typedef
      ::TAO_Seq_Out_T<
          DataBuffer
        >
      DataBuffer_out;

    class  DataBuffer
      : public
          ::TAO::unbounded_value_sequence<
              ::CORBA::Octet
            >
    {
    public:
      DataBuffer (void);
      DataBuffer ( ::CORBA::ULong max);
      DataBuffer (
        ::CORBA::ULong max,
        ::CORBA::ULong length,
        ::CORBA::Octet* buffer,
        ::CORBA::Boolean release = false);
      DataBuffer (const DataBuffer &);
      virtual ~DataBuffer (void);
      

      // TAO_IDL - Generated from
      // be/be_type.cpp:304

      
      typedef DataBuffer_var _var_type;
      typedef DataBuffer_out _out_type;

      static void _tao_any_destructor (void *);

      

#if (TAO_NO_COPY_OCTET_SEQUENCES == 1)
      DataBuffer (
          ::CORBA::ULong length,
          const ACE_Message_Block* mb
        )
        : ::TAO::unbounded_value_sequence< ::CORBA::Octet> (length, mb) {}
#endif /* TAO_NO_COPY_OCTET_SEQUENCE == 1 */
    };

#endif /* end #if !defined */

    // TAO_IDL - Generated from
    // be/be_visitor_typecode/typecode_decl.cpp:34

    static ::CORBA::TypeCode_ptr const _tc_DataBuffer;

    virtual ::CORBA::Long write (
      const ::File::Descriptor::DataBuffer & buffer);

    virtual ::File::Descriptor::DataBuffer * read (
      ::CORBA::Long num_bytes);

    virtual ::CORBA::ULong lseek (
      ::CORBA::ULong offset,
      ::CORBA::Long whence);

    virtual void destroy (
      void);

    // TAO_IDL - Generated from
    // be/be_visitor_interface/interface_ch.cpp:137

    virtual ::CORBA::Boolean _is_a (const char *type_id);
    virtual const char* _interface_repository_id (void) const;
    virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);
  
  protected:
    // Concrete interface only.
    Descriptor (void);

    // Concrete non-local interface only.
    Descriptor (
        ::IOP::IOR *ior,
        TAO_ORB_Core *orb_core);
    
    // Non-local interface only.
    Descriptor (
        TAO_Stub *objref,
        ::CORBA::Boolean _tao_collocated = false,
        TAO_Abstract_ServantBase *servant = 0,
        TAO_ORB_Core *orb_core = 0);

    virtual ~Descriptor (void);
  
  private:
    // Private and unimplemented for concrete interfaces.
    Descriptor (const Descriptor &);

    void operator= (const Descriptor &);
  };

  // TAO_IDL - Generated from
  // be/be_visitor_typecode/typecode_decl.cpp:34

  extern  ::CORBA::TypeCode_ptr const _tc_Descriptor;

  // TAO_IDL - Generated from
  // be/be_interface.cpp:748

#if !defined (_FILE_SYSTEM__VAR_OUT_CH_)
#define _FILE_SYSTEM__VAR_OUT_CH_

  class System;
  typedef System *System_ptr;

  typedef
    TAO_Objref_Var_T<
        System
      >
    System_var;
  
  typedef
    TAO_Objref_Out_T<
        System
      >
    System_out;

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // be/be_visitor_interface/interface_ch.cpp:40

  class  System
    : public virtual ::CORBA::Object
  {
  public:
    friend class TAO::Narrow_Utils<System>;

    // TAO_IDL - Generated from
    // be/be_type.cpp:304

    typedef System_ptr _ptr_type;
    typedef System_var _var_type;
    typedef System_out _out_type;

    static void _tao_any_destructor (void *);

    // The static operations.
    static System_ptr _duplicate (System_ptr obj);

    static void _tao_release (System_ptr obj);

    static System_ptr _narrow (::CORBA::Object_ptr obj);
    static System_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
    static System_ptr _nil (void);

    virtual ::File::Descriptor_ptr open (
      const char * file_name,
      ::CORBA::Long flags);

    virtual void shutdown (
      void);

    // TAO_IDL - Generated from
    // be/be_visitor_interface/interface_ch.cpp:137

    virtual ::CORBA::Boolean _is_a (const char *type_id);
    virtual const char* _interface_repository_id (void) const;
    virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);
  
  protected:
    // Concrete interface only.
    System (void);

    // Concrete non-local interface only.
    System (
        ::IOP::IOR *ior,
        TAO_ORB_Core *orb_core);
    
    // Non-local interface only.
    System (
        TAO_Stub *objref,
        ::CORBA::Boolean _tao_collocated = false,
        TAO_Abstract_ServantBase *servant = 0,
        TAO_ORB_Core *orb_core = 0);

    virtual ~System (void);
  
  private:
    // Private and unimplemented for concrete interfaces.
    System (const System &);

    void operator= (const System &);
  };

  // TAO_IDL - Generated from
  // be/be_visitor_typecode/typecode_decl.cpp:34

  extern  ::CORBA::TypeCode_ptr const _tc_System;

// TAO_IDL - Generated from
// be/be_visitor_module/module_ch.cpp:64

} // module File

// TAO_IDL - Generated from
// be/be_visitor_arg_traits.cpp:66

TAO_BEGIN_VERSIONED_NAMESPACE_DECL


// Arg traits specializations.
namespace TAO
{

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:145

#if !defined (_FILE_DESCRIPTOR__ARG_TRAITS_)
#define _FILE_DESCRIPTOR__ARG_TRAITS_

  template<>
  class  Arg_Traits< ::File::Descriptor>
    : public
        Object_Arg_Traits_T<
            ::File::Descriptor_ptr,
            ::File::Descriptor_var,
            ::File::Descriptor_out,
            TAO::Objref_Traits<File::Descriptor>,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:683

  template<>
  class Arg_Traits< ::File::Descriptor::DataBuffer>
    : public
        Var_Size_Arg_Traits_T<
            ::File::Descriptor::DataBuffer,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:145

#if !defined (_FILE_SYSTEM__ARG_TRAITS_)
#define _FILE_SYSTEM__ARG_TRAITS_

  template<>
  class  Arg_Traits< ::File::System>
    : public
        Object_Arg_Traits_T<
            ::File::System_ptr,
            ::File::System_var,
            ::File::System_out,
            TAO::Objref_Traits<File::System>,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

#endif /* end #if !defined */
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_traits.cpp:60

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Traits specializations.
namespace TAO
{

#if !defined (_FILE_DESCRIPTOR__TRAITS_)
#define _FILE_DESCRIPTOR__TRAITS_

  template<>
  struct  Objref_Traits< ::File::Descriptor>
  {
    static ::File::Descriptor_ptr duplicate (
        ::File::Descriptor_ptr p);
    static void release (
        ::File::Descriptor_ptr p);
    static ::File::Descriptor_ptr nil (void);
    static ::CORBA::Boolean marshal (
        const ::File::Descriptor_ptr p,
        TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_FILE_SYSTEM__TRAITS_)
#define _FILE_SYSTEM__TRAITS_

  template<>
  struct  Objref_Traits< ::File::System>
  {
    static ::File::System_ptr duplicate (
        ::File::System_ptr p);
    static void release (
        ::File::System_ptr p);
    static ::File::System_ptr nil (void);
    static ::CORBA::Boolean marshal (
        const ::File::System_ptr p,
        TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */
}
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_exception/any_op_ch.cpp:38

#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace File
{
  

   void operator<<= (::CORBA::Any &, const ::File::IOError &); // copying version
   void operator<<= (::CORBA::Any &, ::File::IOError*); // noncopying version
   ::CORBA::Boolean operator>>= (const ::CORBA::Any &, ::File::IOError *&); // deprecated
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const ::File::IOError *&);
}

#else


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



 void operator<<= (::CORBA::Any &, const File::IOError &); // copying version
 void operator<<= (::CORBA::Any &, File::IOError*); // noncopying version
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, File::IOError *&); // deprecated
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const File::IOError *&);
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_interface/any_op_ch.cpp:41



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace File
{
   void operator<<= ( ::CORBA::Any &, Descriptor_ptr); // copying
   void operator<<= ( ::CORBA::Any &, Descriptor_ptr *); // non-copying
   ::CORBA::Boolean operator>>= (const ::CORBA::Any &, Descriptor_ptr &);
}

#else


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 void operator<<= (::CORBA::Any &, File::Descriptor_ptr); // copying
 void operator<<= (::CORBA::Any &, File::Descriptor_ptr *); // non-copying
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, File::Descriptor_ptr &);
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_sequence/any_op_ch.cpp:47



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace File
{
   void operator<<= ( ::CORBA::Any &, const ::File::Descriptor::DataBuffer &); // copying version
   void operator<<= ( ::CORBA::Any &, ::File::Descriptor::DataBuffer*); // noncopying version
   ::CORBA::Boolean operator>>= (const ::CORBA::Any &, ::File::Descriptor::DataBuffer *&); // deprecated
   ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const ::File::Descriptor::DataBuffer *&);
}

#else


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 void operator<<= ( ::CORBA::Any &, const File::Descriptor::DataBuffer &); // copying version
 void operator<<= ( ::CORBA::Any &, File::Descriptor::DataBuffer*); // noncopying version
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, File::Descriptor::DataBuffer *&); // deprecated
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const File::Descriptor::DataBuffer *&);
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_interface/any_op_ch.cpp:41



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace File
{
   void operator<<= ( ::CORBA::Any &, System_ptr); // copying
   void operator<<= ( ::CORBA::Any &, System_ptr *); // non-copying
   ::CORBA::Boolean operator>>= (const ::CORBA::Any &, System_ptr &);
}

#else


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 void operator<<= (::CORBA::Any &, File::System_ptr); // copying
 void operator<<= (::CORBA::Any &, File::System_ptr *); // non-copying
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, File::System_ptr &);
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_exception/cdr_op_ch.cpp:37
TAO_BEGIN_VERSIONED_NAMESPACE_DECL



 ::CORBA::Boolean operator<< (TAO_OutputCDR &, const File::IOError &);
 ::CORBA::Boolean operator>> (TAO_InputCDR &, File::IOError &);

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_interface/cdr_op_ch.cpp:41

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 ::CORBA::Boolean operator<< (TAO_OutputCDR &, const File::Descriptor_ptr );
 ::CORBA::Boolean operator>> (TAO_InputCDR &, File::Descriptor_ptr &);

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_sequence/cdr_op_ch.cpp:65

#if !defined _TAO_CDR_OP_File_Descriptor_DataBuffer_H_
#define _TAO_CDR_OP_File_Descriptor_DataBuffer_H_
TAO_BEGIN_VERSIONED_NAMESPACE_DECL


 ::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const File::Descriptor::DataBuffer &_tao_sequence);
 ::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    File::Descriptor::DataBuffer &_tao_sequence);

TAO_END_VERSIONED_NAMESPACE_DECL



#endif /* _TAO_CDR_OP_File_Descriptor_DataBuffer_H_ */

// TAO_IDL - Generated from
// be/be_visitor_interface/cdr_op_ch.cpp:41

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 ::CORBA::Boolean operator<< (TAO_OutputCDR &, const File::System_ptr );
 ::CORBA::Boolean operator>> (TAO_InputCDR &, File::System_ptr &);

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_codegen.cpp:1700
#if defined (__ACE_INLINE__)
#include "FileC.inl"
#endif /* defined INLINE */

#include /**/ "ace/post.h"

#endif /* ifndef */

