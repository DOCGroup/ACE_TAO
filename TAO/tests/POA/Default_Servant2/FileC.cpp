// -*- C++ -*-
/**
 * Code generated by the The ACE ORB (TAO) IDL Compiler v2.4.1
 * TAO and the TAO IDL Compiler have been developed by:
 *       Center for Distributed Object Computing
 *       Washington University
 *       St. Louis, MO
 *       USA
 *       http://www.cs.wustl.edu/~schmidt/doc-center.html
 * and
 *       Distributed Object Computing Laboratory
 *       University of California at Irvine
 *       Irvine, CA
 *       USA
 * and
 *       Institute for Software Integrated Systems
 *       Vanderbilt University
 *       Nashville, TN
 *       USA
 *       http://www.isis.vanderbilt.edu/
 *
 * Information about TAO is available at:
 *     http://www.dre.vanderbilt.edu/~schmidt/TAO.html
 **/

// TAO_IDL - Generated from
// be/be_codegen.cpp:373


#include "FileC.h"
#include "tao/AnyTypeCode/Null_RefCount_Policy.h"
#include "tao/AnyTypeCode/TypeCode_Constants.h"
#include "tao/AnyTypeCode/Alias_TypeCode_Static.h"
#include "tao/AnyTypeCode/Objref_TypeCode_Static.h"
#include "tao/AnyTypeCode/Sequence_TypeCode_Static.h"
#include "tao/AnyTypeCode/String_TypeCode_Static.h"
#include "tao/AnyTypeCode/Struct_TypeCode_Static.h"
#include "tao/AnyTypeCode/TypeCode_Struct_Field.h"
#include "tao/CDR.h"
#include "tao/Exception_Data.h"
#include "tao/Invocation_Adapter.h"
#include "tao/Object_T.h"
#include "tao/ORB_Core.h"
#include "tao/SystemException.h"
#include "tao/CDR.h"
#include "tao/AnyTypeCode/Any.h"
#include "tao/AnyTypeCode/Any_Impl_T.h"
#include "tao/AnyTypeCode/Any_Dual_Impl_T.h"
#include "ace/OS_NS_string.h"

#if !defined (__ACE_INLINE__)
#include "FileC.inl"
#endif /* !defined INLINE */

// TAO_IDL - Generated from
// be/be_visitor_exception/exception_ctor.cpp:51

File::IOError::IOError (
    ::CORBA::Long _tao_error)
  : ::CORBA::UserException (
        "IDL:File/IOError:1.0",
        "IOError"
      )
{
  this->error = _tao_error;
}



// TAO_IDL - Generated from
// be/be_visitor_exception/exception_cs.cpp:98

File::IOError::IOError (void)
  : ::CORBA::UserException (
        "IDL:File/IOError:1.0",
        "IOError"
      )
{
}

File::IOError::~IOError (void)
{
}

File::IOError::IOError (const ::File::IOError &_tao_excp)
  : ::CORBA::UserException (
        _tao_excp._rep_id (),
        _tao_excp._name ()
      )
{
  this->error = _tao_excp.error;
}

File::IOError&
File::IOError::operator= (const ::File::IOError &_tao_excp)
{
  this->::CORBA::UserException::operator= (_tao_excp);
  this->error = _tao_excp.error;
  return *this;
}

void File::IOError::_tao_any_destructor (void *_tao_void_pointer)
{
  IOError *_tao_tmp_pointer =
    static_cast<IOError *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

File::IOError *
File::IOError::_downcast ( ::CORBA::Exception *_tao_excp)
{
  return dynamic_cast<IOError *> (_tao_excp);
}

const File::IOError *
File::IOError::_downcast ( ::CORBA::Exception const *_tao_excp)
{
  return dynamic_cast<const IOError *> (_tao_excp);
}

::CORBA::Exception *File::IOError::_alloc (void)
{
  ::CORBA::Exception *retval = 0;
  ACE_NEW_RETURN (retval, ::File::IOError, 0);
  return retval;
}

::CORBA::Exception *
File::IOError::_tao_duplicate (void) const
{
  ::CORBA::Exception *result = 0;
  ACE_NEW_RETURN (
      result,
      ::File::IOError (*this),
      0
    );
  return result;
}

void File::IOError::_raise (void) const
{
  throw *this;
}

void File::IOError::_tao_encode (TAO_OutputCDR &cdr) const
{
  if (!(cdr << *this))
    {
      throw ::CORBA::MARSHAL ();
    }
}

void File::IOError::_tao_decode (TAO_InputCDR &cdr)
{
  if (!(cdr >> *this))
    {
      throw ::CORBA::MARSHAL ();
    }
}

// TAO extension - the virtual _type method.
::CORBA::TypeCode_ptr File::IOError::_tao_type (void) const
{
  return ::File::_tc_IOError;
}

// TAO_IDL - Generated from
// be/be_visitor_typecode/struct_typecode.cpp:86

static TAO::TypeCode::Struct_Field<
  char const *,
  ::CORBA::TypeCode_ptr const *> const
    _tao_fields_File_IOError[] =
      {
        { "error", &CORBA::_tc_long }
      };

static TAO::TypeCode::Struct<
  char const *,
  ::CORBA::TypeCode_ptr const *,
  TAO::TypeCode::Struct_Field<
    char const *,
    ::CORBA::TypeCode_ptr const *> const *,
  TAO::Null_RefCount_Policy>
_tao_tc_File_IOError (
  ::CORBA::tk_except,
  "IDL:File/IOError:1.0",
  "IOError",
  _tao_fields_File_IOError,
  1);


namespace File
{
  ::CORBA::TypeCode_ptr const _tc_IOError =
    &_tao_tc_File_IOError;
}

// TAO_IDL - Generated from
// be/be_visitor_interface/interface_cs.cpp:48

// Traits specializations for File::Descriptor.

File::Descriptor_ptr
TAO::Objref_Traits<File::Descriptor>::duplicate (
    File::Descriptor_ptr p)
{
  return File::Descriptor::_duplicate (p);
}

void
TAO::Objref_Traits<File::Descriptor>::release (
    File::Descriptor_ptr p)
{
  ::CORBA::release (p);
}

File::Descriptor_ptr
TAO::Objref_Traits<File::Descriptor>::nil (void)
{
  return File::Descriptor::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<File::Descriptor>::marshal (
    const File::Descriptor_ptr p,
    TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

// TAO_IDL - Generated from
// be/be_visitor_sequence/sequence_cs.cpp:70

#if !defined (_FILE_DESCRIPTOR_DATABUFFER_CS_)
#define _FILE_DESCRIPTOR_DATABUFFER_CS_

File::Descriptor::DataBuffer::DataBuffer (void)
{}

File::Descriptor::DataBuffer::DataBuffer (
    ::CORBA::ULong max)
  : ::TAO::unbounded_value_sequence<
        ::CORBA::Octet
      > (max)
{}

File::Descriptor::DataBuffer::DataBuffer (
    ::CORBA::ULong max,
    ::CORBA::ULong length,
    ::CORBA::Octet * buffer,
    ::CORBA::Boolean release
  )
  : ::TAO::unbounded_value_sequence<
        ::CORBA::Octet
      >
    (max, length, buffer, release)
{}

File::Descriptor::DataBuffer::DataBuffer (
    const DataBuffer &seq)
  : ::TAO::unbounded_value_sequence<
        ::CORBA::Octet
      > (seq)
{}

File::Descriptor::DataBuffer::~DataBuffer (void)
{}

void File::Descriptor::DataBuffer::_tao_any_destructor (
    void * _tao_void_pointer)
{
  DataBuffer * _tao_tmp_pointer =
    static_cast<DataBuffer *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

#endif /* end #if !defined */

// TAO_IDL - Generated from
// be/be_visitor_typecode/alias_typecode.cpp:49



// TAO_IDL - Generated from
// be/be_visitor_typecode/typecode_defn.cpp:461


#ifndef _TAO_TYPECODE_File_Descriptor_DataBuffer_GUARD
#define _TAO_TYPECODE_File_Descriptor_DataBuffer_GUARD

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

namespace TAO
{
  namespace TypeCode
  {
    namespace
    {
      TAO::TypeCode::Sequence< ::CORBA::TypeCode_ptr const *,
                              TAO::Null_RefCount_Policy>
        File_Descriptor_DataBuffer_0 (
          ::CORBA::tk_sequence,
          &CORBA::_tc_octet,
          0U);

      ::CORBA::TypeCode_ptr const tc_File_Descriptor_DataBuffer_0 =
        &File_Descriptor_DataBuffer_0;
    }
  }
}

TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_TYPECODE_File_Descriptor_DataBuffer_GUARD */

static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_File_Descriptor_DataBuffer (
    ::CORBA::tk_alias,
    "IDL:File/Descriptor/DataBuffer:1.0",
    "DataBuffer",
    &TAO::TypeCode::tc_File_Descriptor_DataBuffer_0);

::CORBA::TypeCode_ptr const File::Descriptor::_tc_DataBuffer =
  &_tao_tc_File_Descriptor_DataBuffer;

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:88

::CORBA::Long
File::Descriptor::write (
  const ::File::Descriptor::DataBuffer & buffer)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }

  TAO::Arg_Traits< ::CORBA::Long>::ret_val _tao_retval;
  TAO::Arg_Traits< ::File::Descriptor::DataBuffer>::in_arg_val _tao_buffer (buffer);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_buffer
    };

  static TAO::Exception_Data
  _tao_File_Descriptor_write_exceptiondata [] =
    {
      {
        "IDL:File/IOError:1.0",
        File::IOError::_alloc
#if TAO_HAS_INTERCEPTORS == 1
        , File::_tc_IOError
#endif /* TAO_HAS_INTERCEPTORS */
      }
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      2,
      "write",
      5,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY

    );

  _tao_call.invoke (
      _tao_File_Descriptor_write_exceptiondata,
      1
    );

  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:88

::File::Descriptor::DataBuffer *
File::Descriptor::read (
  ::CORBA::Long num_bytes)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }

  TAO::Arg_Traits< ::File::Descriptor::DataBuffer>::ret_val _tao_retval;
  TAO::Arg_Traits< ::CORBA::Long>::in_arg_val _tao_num_bytes (num_bytes);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_num_bytes
    };

  static TAO::Exception_Data
  _tao_File_Descriptor_read_exceptiondata [] =
    {
      {
        "IDL:File/IOError:1.0",
        File::IOError::_alloc
#if TAO_HAS_INTERCEPTORS == 1
        , File::_tc_IOError
#endif /* TAO_HAS_INTERCEPTORS */
      }
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      2,
      "read",
      4,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY

    );

  _tao_call.invoke (
      _tao_File_Descriptor_read_exceptiondata,
      1
    );

  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:88

::CORBA::ULong
File::Descriptor::lseek (
  ::CORBA::ULong offset,
  ::CORBA::Long whence)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }

  TAO::Arg_Traits< ::CORBA::ULong>::ret_val _tao_retval;
  TAO::Arg_Traits< ::CORBA::ULong>::in_arg_val _tao_offset (offset);
  TAO::Arg_Traits< ::CORBA::Long>::in_arg_val _tao_whence (whence);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_offset,
      &_tao_whence
    };

  static TAO::Exception_Data
  _tao_File_Descriptor_lseek_exceptiondata [] =
    {
      {
        "IDL:File/IOError:1.0",
        File::IOError::_alloc
#if TAO_HAS_INTERCEPTORS == 1
        , File::_tc_IOError
#endif /* TAO_HAS_INTERCEPTORS */
      }
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      3,
      "lseek",
      5,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY

    );

  _tao_call.invoke (
      _tao_File_Descriptor_lseek_exceptiondata,
      1
    );

  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:88

void
File::Descriptor::destroy (
  void)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }

  TAO::Arg_Traits< void>::ret_val _tao_retval;

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      1,
      "destroy",
      7,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY,
      TAO::TAO_TWOWAY_INVOCATION
      ,
      TAO::TAO_SYNCHRONOUS_INVOCATION,
      false
    );

  _tao_call.invoke (0, 0);
}

File::Descriptor::Descriptor (void)
{
}

File::Descriptor::~Descriptor (void)
{
}

void
File::Descriptor::_tao_any_destructor (void *_tao_void_pointer)
{
  Descriptor *_tao_tmp_pointer =
    static_cast<Descriptor *> (_tao_void_pointer);
  ::CORBA::release (_tao_tmp_pointer);
}

File::Descriptor_ptr
File::Descriptor::_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return
    TAO::Narrow_Utils<Descriptor>::narrow (
        _tao_objref,
        "IDL:File/Descriptor:1.0");
}

File::Descriptor_ptr
File::Descriptor::_unchecked_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return
    TAO::Narrow_Utils<Descriptor>::unchecked_narrow (
        _tao_objref);
}

File::Descriptor_ptr
File::Descriptor::_nil (void)
{
  return 0;
}

File::Descriptor_ptr
File::Descriptor::_duplicate (Descriptor_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  return obj;
}

void
File::Descriptor::_tao_release (Descriptor_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
File::Descriptor::_is_a (const char *value)
{
  if (
      ACE_OS::strcmp (
          value,
          "IDL:File/Descriptor:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        ) == 0
    )
    {
      return true; // success using local knowledge
    }
  else
    {
      return this->::CORBA::Object::_is_a (value);
    }
}

const char* File::Descriptor::_interface_repository_id (void) const
{
  return "IDL:File/Descriptor:1.0";
}

::CORBA::Boolean
File::Descriptor::marshal (TAO_OutputCDR &cdr)
{
  return (cdr << this);
}

// TAO_IDL - Generated from
// be/be_visitor_typecode/objref_typecode.cpp:70

static TAO::TypeCode::Objref<char const *,
                             TAO::Null_RefCount_Policy>
  _tao_tc_File_Descriptor (
    ::CORBA::tk_objref,
    "IDL:File/Descriptor:1.0",
    "Descriptor");


namespace File
{
  ::CORBA::TypeCode_ptr const _tc_Descriptor =
    &_tao_tc_File_Descriptor;
}

// TAO_IDL - Generated from
// be/be_visitor_interface/interface_cs.cpp:48

// Traits specializations for File::System.

File::System_ptr
TAO::Objref_Traits<File::System>::duplicate (
    File::System_ptr p)
{
  return File::System::_duplicate (p);
}

void
TAO::Objref_Traits<File::System>::release (
    File::System_ptr p)
{
  ::CORBA::release (p);
}

File::System_ptr
TAO::Objref_Traits<File::System>::nil (void)
{
  return File::System::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<File::System>::marshal (
    const File::System_ptr p,
    TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:88

::File::Descriptor_ptr
File::System::open (
  const char * file_name,
  ::CORBA::Long flags)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }

  TAO::Arg_Traits< ::File::Descriptor>::ret_val _tao_retval;
  TAO::Arg_Traits< char *>::in_arg_val _tao_file_name (file_name);
  TAO::Arg_Traits< ::CORBA::Long>::in_arg_val _tao_flags (flags);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_file_name,
      &_tao_flags
    };

  static TAO::Exception_Data
  _tao_File_System_open_exceptiondata [] =
    {
      {
        "IDL:File/IOError:1.0",
        File::IOError::_alloc
#if TAO_HAS_INTERCEPTORS == 1
        , File::_tc_IOError
#endif /* TAO_HAS_INTERCEPTORS */
      }
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      3,
      "open",
      4,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY

    );

  _tao_call.invoke (
      _tao_File_System_open_exceptiondata,
      1
    );

  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:88

void
File::System::shutdown (
  void)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }

  TAO::Arg_Traits< void>::ret_val _tao_retval;

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      1,
      "shutdown",
      8,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY,
      TAO::TAO_ONEWAY_INVOCATION,
      TAO::TAO_SYNCHRONOUS_INVOCATION,
      false
    );

  _tao_call.invoke (0, 0);
}

File::System::System (void)
{
}

File::System::~System (void)
{
}

void
File::System::_tao_any_destructor (void *_tao_void_pointer)
{
  System *_tao_tmp_pointer =
    static_cast<System *> (_tao_void_pointer);
  ::CORBA::release (_tao_tmp_pointer);
}

File::System_ptr
File::System::_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return
    TAO::Narrow_Utils<System>::narrow (
        _tao_objref,
        "IDL:File/System:1.0");
}

File::System_ptr
File::System::_unchecked_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return
    TAO::Narrow_Utils<System>::unchecked_narrow (
        _tao_objref);
}

File::System_ptr
File::System::_nil (void)
{
  return 0;
}

File::System_ptr
File::System::_duplicate (System_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  return obj;
}

void
File::System::_tao_release (System_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
File::System::_is_a (const char *value)
{
  if (
      ACE_OS::strcmp (
          value,
          "IDL:File/System:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        ) == 0
    )
    {
      return true; // success using local knowledge
    }
  else
    {
      return this->::CORBA::Object::_is_a (value);
    }
}

const char* File::System::_interface_repository_id (void) const
{
  return "IDL:File/System:1.0";
}

::CORBA::Boolean
File::System::marshal (TAO_OutputCDR &cdr)
{
  return (cdr << this);
}

// TAO_IDL - Generated from
// be/be_visitor_typecode/objref_typecode.cpp:70

static TAO::TypeCode::Objref<char const *,
                             TAO::Null_RefCount_Policy>
  _tao_tc_File_System (
    ::CORBA::tk_objref,
    "IDL:File/System:1.0",
    "System");


namespace File
{
  ::CORBA::TypeCode_ptr const _tc_System =
    &_tao_tc_File_System;
}

// TAO_IDL - Generated from
// be/be_visitor_exception/any_op_cs.cpp:38
TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Dual_Impl_T<File::IOError>::demarshal_value (TAO_InputCDR & cdr)
  {
    ::CORBA::String_var id;

    if (!(cdr >> id.out ()))
      {
        return false;
      }

    try
      {
        this->value_->_tao_decode (cdr);
      }
    catch (const ::CORBA::Exception &)
      {
        return false;
      }

    return true;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace File
{


  // Copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      const ::File::IOError &_tao_elem)
  {
    TAO::Any_Dual_Impl_T< ::File::IOError>::insert_copy (
        _tao_any,
        ::File::IOError::_tao_any_destructor,
        ::File::_tc_IOError,
        _tao_elem);
  }

  // Non-copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      ::File::IOError *_tao_elem)
  {
    TAO::Any_Dual_Impl_T< ::File::IOError>::insert (
        _tao_any,
        ::File::IOError::_tao_any_destructor,
        ::File::_tc_IOError,
        _tao_elem);
  }

  // Extraction to non-const pointer (deprecated).
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      ::File::IOError *&_tao_elem)
  {
    return _tao_any >>= const_cast<
        const ::File::IOError *&> (
        _tao_elem);
  }

  // Extraction to const pointer.
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      const ::File::IOError *&_tao_elem)
  {
    return
      TAO::Any_Dual_Impl_T< ::File::IOError>::extract (
          _tao_any,
          ::File::IOError::_tao_any_destructor,
          ::File::_tc_IOError,
          _tao_elem);
  }
}

#else

TAO_BEGIN_VERSIONED_NAMESPACE_DECL



// Copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    const File::IOError &_tao_elem)
{
  TAO::Any_Dual_Impl_T<File::IOError>::insert_copy (
      _tao_any,
      File::IOError::_tao_any_destructor,
      File::_tc_IOError,
      _tao_elem
    );
}

// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    File::IOError *_tao_elem)
{
  TAO::Any_Dual_Impl_T<File::IOError>::insert (
      _tao_any,
      File::IOError::_tao_any_destructor,
      File::_tc_IOError,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    File::IOError *&_tao_elem)
{
  return _tao_any >>= const_cast<
      const File::IOError *&> (
      _tao_elem);
}

// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const File::IOError *&_tao_elem
  )
{
  return
    TAO::Any_Dual_Impl_T<File::IOError>::extract (
        _tao_any,
        File::IOError::_tao_any_destructor,
        File::_tc_IOError,
        _tao_elem);
}
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_interface/any_op_cs.cpp:38
TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<File::Descriptor>::to_object (
      ::CORBA::Object_ptr &_tao_elem) const
  {
    _tao_elem = ::CORBA::Object::_duplicate (this->value_);
    return true;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace File
{


  /// Copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      Descriptor_ptr _tao_elem)
  {
    Descriptor_ptr _tao_objptr =
      Descriptor::_duplicate (_tao_elem);
    _tao_any <<= &_tao_objptr;
  }

  /// Non-copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      Descriptor_ptr *_tao_elem)
  {
    TAO::Any_Impl_T<Descriptor>::insert (
        _tao_any,
        Descriptor::_tao_any_destructor,
        _tc_Descriptor,
        *_tao_elem);
  }

  ::CORBA::Boolean
  operator>>= (
      const ::CORBA::Any &_tao_any,
      Descriptor_ptr &_tao_elem)
  {
    return
      TAO::Any_Impl_T<Descriptor>::extract (
          _tao_any,
          Descriptor::_tao_any_destructor,
          _tc_Descriptor,
          _tao_elem);
  }
}

#else

TAO_BEGIN_VERSIONED_NAMESPACE_DECL



/// Copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    File::Descriptor_ptr _tao_elem)
{
  File::Descriptor_ptr _tao_objptr =
    File::Descriptor::_duplicate (_tao_elem);
  _tao_any <<= &_tao_objptr;
}

/// Non-copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    File::Descriptor_ptr *_tao_elem)
{
  TAO::Any_Impl_T<File::Descriptor>::insert (
      _tao_any,
      File::Descriptor::_tao_any_destructor,
      File::_tc_Descriptor,
      *_tao_elem);
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    File::Descriptor_ptr &_tao_elem)
{
  return
    TAO::Any_Impl_T<File::Descriptor>::extract (
        _tao_any,
        File::Descriptor::_tao_any_destructor,
        File::_tc_Descriptor,
        _tao_elem);
}

TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_sequence/any_op_cs.cpp:45


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


TAO_END_VERSIONED_NAMESPACE_DECL



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace File
{

  // Copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      const ::File::Descriptor::DataBuffer &_tao_elem
    )
  {
    TAO::Any_Dual_Impl_T< ::File::Descriptor::DataBuffer>::insert_copy (
        _tao_any,
        ::File::Descriptor::DataBuffer::_tao_any_destructor,
        ::File::Descriptor::_tc_DataBuffer,
        _tao_elem
      );
}

// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    ::File::Descriptor::DataBuffer *_tao_elem)
{
  TAO::Any_Dual_Impl_T< ::File::Descriptor::DataBuffer>::insert (
      _tao_any,
      ::File::Descriptor::DataBuffer::_tao_any_destructor,
      ::File::Descriptor::_tc_DataBuffer,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    ::File::Descriptor::DataBuffer *&_tao_elem)
{
  return _tao_any >>= const_cast<
      const ::File::Descriptor::DataBuffer *&> (
      _tao_elem
    );
}

// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const ::File::Descriptor::DataBuffer *&_tao_elem)
{
  return
    TAO::Any_Dual_Impl_T< ::File::Descriptor::DataBuffer>::extract (
        _tao_any,
        ::File::Descriptor::DataBuffer::_tao_any_destructor,
        ::File::Descriptor::_tc_DataBuffer,
        _tao_elem
      );
}
}

#else


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


// Copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    const File::Descriptor::DataBuffer &_tao_elem)
{
  TAO::Any_Dual_Impl_T<File::Descriptor::DataBuffer>::insert_copy (
      _tao_any,
      File::Descriptor::DataBuffer::_tao_any_destructor,
      File::Descriptor::_tc_DataBuffer,
      _tao_elem
    );
}

// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    File::Descriptor::DataBuffer *_tao_elem)
{
  TAO::Any_Dual_Impl_T<File::Descriptor::DataBuffer>::insert (
      _tao_any,
      File::Descriptor::DataBuffer::_tao_any_destructor,
      File::Descriptor::_tc_DataBuffer,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    File::Descriptor::DataBuffer *&_tao_elem)
{
  return _tao_any >>= const_cast<
      const File::Descriptor::DataBuffer *&> (
      _tao_elem
    );
}

// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const File::Descriptor::DataBuffer *&_tao_elem)
{
  return
    TAO::Any_Dual_Impl_T<File::Descriptor::DataBuffer>::extract (
        _tao_any,
        File::Descriptor::DataBuffer::_tao_any_destructor,
        File::Descriptor::_tc_DataBuffer,
        _tao_elem);
}
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_interface/any_op_cs.cpp:38
TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<File::System>::to_object (
      ::CORBA::Object_ptr &_tao_elem) const
  {
    _tao_elem = ::CORBA::Object::_duplicate (this->value_);
    return true;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace File
{


  /// Copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      System_ptr _tao_elem)
  {
    System_ptr _tao_objptr =
      System::_duplicate (_tao_elem);
    _tao_any <<= &_tao_objptr;
  }

  /// Non-copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      System_ptr *_tao_elem)
  {
    TAO::Any_Impl_T<System>::insert (
        _tao_any,
        System::_tao_any_destructor,
        _tc_System,
        *_tao_elem);
  }

  ::CORBA::Boolean
  operator>>= (
      const ::CORBA::Any &_tao_any,
      System_ptr &_tao_elem)
  {
    return
      TAO::Any_Impl_T<System>::extract (
          _tao_any,
          System::_tao_any_destructor,
          _tc_System,
          _tao_elem);
  }
}

#else

TAO_BEGIN_VERSIONED_NAMESPACE_DECL



/// Copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    File::System_ptr _tao_elem)
{
  File::System_ptr _tao_objptr =
    File::System::_duplicate (_tao_elem);
  _tao_any <<= &_tao_objptr;
}

/// Non-copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    File::System_ptr *_tao_elem)
{
  TAO::Any_Impl_T<File::System>::insert (
      _tao_any,
      File::System::_tao_any_destructor,
      File::_tc_System,
      *_tao_elem);
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    File::System_ptr &_tao_elem)
{
  return
    TAO::Any_Impl_T<File::System>::extract (
        _tao_any,
        File::System::_tao_any_destructor,
        File::_tc_System,
        _tao_elem);
}

TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_exception/cdr_op_cs.cpp:48
TAO_BEGIN_VERSIONED_NAMESPACE_DECL



::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const File::IOError &_tao_aggregate
  )
{
  // First marshal the repository ID.
  if (strm << _tao_aggregate._rep_id ())
    {
      // Now marshal the members (if any).
      return (
        (strm << _tao_aggregate.error)
       );
    }
  else
    {
      return false;
    }
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    File::IOError &_tao_aggregate
  )
{
  // Demarshal the members.
  return (
    (strm >> _tao_aggregate.error)
  );
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_sequence/cdr_op_cs.cpp:93
#if !defined _TAO_CDR_OP_File_Descriptor_DataBuffer_CPP_
#define _TAO_CDR_OP_File_Descriptor_DataBuffer_CPP_

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const File::Descriptor::DataBuffer &_tao_sequence)
{
  return TAO::marshal_sequence(strm, _tao_sequence);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    File::Descriptor::DataBuffer &_tao_sequence)
{
  return TAO::demarshal_sequence(strm, _tao_sequence);
}


TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_CDR_OP_File_Descriptor_DataBuffer_CPP_ */

// TAO_IDL - Generated from
// be/be_visitor_interface/cdr_op_cs.cpp:51

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const File::Descriptor_ptr _tao_objref)
{
  ::CORBA::Object_ptr _tao_corba_obj = _tao_objref;
  return (strm << _tao_corba_obj);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    File::Descriptor_ptr &_tao_objref)
{
  ::CORBA::Object_var obj;

  if (!(strm >> obj.inout ()))
    {
      return false;
    }

  typedef ::File::Descriptor RHS_SCOPED_NAME;

  // Narrow to the right type.
  _tao_objref =
    TAO::Narrow_Utils<RHS_SCOPED_NAME>::unchecked_narrow (obj.in ());

  return true;
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_interface/cdr_op_cs.cpp:51

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const File::System_ptr _tao_objref)
{
  ::CORBA::Object_ptr _tao_corba_obj = _tao_objref;
  return (strm << _tao_corba_obj);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    File::System_ptr &_tao_objref)
{
  ::CORBA::Object_var obj;

  if (!(strm >> obj.inout ()))
    {
      return false;
    }

  typedef ::File::System RHS_SCOPED_NAME;

  // Narrow to the right type.
  _tao_objref =
    TAO::Narrow_Utils<RHS_SCOPED_NAME>::unchecked_narrow (obj.in ());

  return true;
}

TAO_END_VERSIONED_NAMESPACE_DECL



