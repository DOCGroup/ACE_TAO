// -*- C++ -*-
/**
 * Code generated by the The ACE ORB (TAO) IDL Compiler v2.4.1
 * TAO and the TAO IDL Compiler have been developed by:
 *       Center for Distributed Object Computing
 *       Washington University
 *       St. Louis, MO
 *       USA
 *       http://www.cs.wustl.edu/~schmidt/doc-center.html
 * and
 *       Distributed Object Computing Laboratory
 *       University of California at Irvine
 *       Irvine, CA
 *       USA
 * and
 *       Institute for Software Integrated Systems
 *       Vanderbilt University
 *       Nashville, TN
 *       USA
 *       http://www.isis.vanderbilt.edu/
 *
 * Information about TAO is available at:
 *     http://www.dre.vanderbilt.edu/~schmidt/TAO.html
 **/

// TAO_IDL - Generated from
// be/be_codegen.cpp:373


#include "IF_EXE_M_R_EnumsC.h"
#include "tao/AnyTypeCode/Null_RefCount_Policy.h"
#include "tao/AnyTypeCode/TypeCode_Constants.h"
#include "tao/AnyTypeCode/Alias_TypeCode_Static.h"
#include "tao/AnyTypeCode/Enum_TypeCode_Static.h"
#include "tao/CDR.h"
#include "tao/CDR.h"
#include "tao/AnyTypeCode/Any_Basic_Impl_T.h"

#if !defined (__ACE_INLINE__)
#include "IF_EXE_M_R_EnumsC.inl"
#endif /* !defined INLINE */

// TAO_IDL - Generated from
// be/be_visitor_typecode/enum_typecode.cpp:29
static char const * const _tao_enumerators_IF_EXE_M_R_FOOAMode_E[] =
  {
    "FOOAMODE_E_THROUG_WATER",
    "FOOAMODE_E_OVER_GROUND",
    "FOOAMODE_E_X_NOT_SET"

  };

static TAO::TypeCode::Enum<char const *,
                           char const * const *,
                           TAO::Null_RefCount_Policy>
  _tao_tc_IF_EXE_M_R_FOOAMode_E (
    "IDL:IF_EXE_M_R/FOOAMode_E:1.0",
    "FOOAMode_E",
    _tao_enumerators_IF_EXE_M_R_FOOAMode_E,
    3);


namespace IF_EXE_M_R
{
  ::CORBA::TypeCode_ptr const _tc_FOOAMode_E =
    &_tao_tc_IF_EXE_M_R_FOOAMode_E;
}

// TAO_IDL - Generated from
// be/be_visitor_typecode/enum_typecode.cpp:29
static char const * const _tao_enumerators_IF_EXE_M_R_FOOBMode_E[] =
  {
    "FOOBMODE_E_ABSOLUTE",
    "FOOBMODE_E_HEIGHT_OVER_GROUND",
    "FOOBMODE_E_X_NOT_SET"

  };

static TAO::TypeCode::Enum<char const *,
                           char const * const *,
                           TAO::Null_RefCount_Policy>
  _tao_tc_IF_EXE_M_R_FOOBMode_E (
    "IDL:IF_EXE_M_R/FOOBMode_E:1.0",
    "FOOBMode_E",
    _tao_enumerators_IF_EXE_M_R_FOOBMode_E,
    3);


namespace IF_EXE_M_R
{
  ::CORBA::TypeCode_ptr const _tc_FOOBMode_E =
    &_tao_tc_IF_EXE_M_R_FOOBMode_E;
}

// TAO_IDL - Generated from
// be/be_visitor_typecode/enum_typecode.cpp:29
static char const * const _tao_enumerators_IF_EXE_M_R_FOOCMode_E[] =
  {
    "FOOCMODE_E_CORPEN",
    "FOOCMODE_E_TURN"

  };

static TAO::TypeCode::Enum<char const *,
                           char const * const *,
                           TAO::Null_RefCount_Policy>
  _tao_tc_IF_EXE_M_R_FOOCMode_E (
    "IDL:IF_EXE_M_R/FOOCMode_E:1.0",
    "FOOCMode_E",
    _tao_enumerators_IF_EXE_M_R_FOOCMode_E,
    2);


namespace IF_EXE_M_R
{
  ::CORBA::TypeCode_ptr const _tc_FOOCMode_E =
    &_tao_tc_IF_EXE_M_R_FOOCMode_E;
}

// TAO_IDL - Generated from
// be/be_visitor_typecode/enum_typecode.cpp:29
static char const * const _tao_enumerators_IF_EXE_M_R_ENUM_Selection[] =
  {
    "X_YES",
    "X_NO"

  };

static TAO::TypeCode::Enum<char const *,
                           char const * const *,
                           TAO::Null_RefCount_Policy>
  _tao_tc_IF_EXE_M_R_ENUM_Selection (
    "IDL:IF_EXE_M_R/ENUM_Selection:1.0",
    "ENUM_Selection",
    _tao_enumerators_IF_EXE_M_R_ENUM_Selection,
    2);


namespace IF_EXE_M_R
{
  ::CORBA::TypeCode_ptr const _tc_ENUM_Selection =
    &_tao_tc_IF_EXE_M_R_ENUM_Selection;
}

// TAO_IDL - Generated from
// be/be_visitor_typecode/enum_typecode.cpp:29
static char const * const _tao_enumerators_IF_EXE_M_R_ENUM_FOOD[] =
  {
    "FOOH_FOOG",
    "FOOH_FOOP",
    "FOOH_Q_FOOO",
    "FOOH_GPS_UPDATE",
    "FOOH_DESCENT",
    "FOOH_SURFACE",
    "FOOH_FOON",
    "BASE_FOOG",
    "BASE_ARC",
    "BASE_CROSS",
    "IMCMS_FOOG",
    "BASE_CIRCLE",
    "FOOH_SV_PROFILE",
    "FOOQ_FOOG",
    "FOOQ_FOOJ",
    "FOOQ_FULL_FOOR_1",
    "FOOQ_FINAL_FOOR_1",
    "FOOQ_FULL_FOOR_2",
    "FOOQ_FINAL_FOOR_2",
    "FOOQ_RETRANSIT",
    "FOOQ_PASS_SAFETY_AREA",
    "FOOQ_DIRECT_TARGET_FOOR"

  };

static TAO::TypeCode::Enum<char const *,
                           char const * const *,
                           TAO::Null_RefCount_Policy>
  _tao_tc_IF_EXE_M_R_ENUM_FOOD (
    "IDL:IF_EXE_M_R/ENUM_FOOD:1.0",
    "ENUM_FOOD",
    _tao_enumerators_IF_EXE_M_R_ENUM_FOOD,
    22);


namespace IF_EXE_M_R
{
  ::CORBA::TypeCode_ptr const _tc_ENUM_FOOD =
    &_tao_tc_IF_EXE_M_R_ENUM_FOOD;
}

// TAO_IDL - Generated from
// be/be_visitor_typecode/enum_typecode.cpp:29
static char const * const _tao_enumerators_IF_EXE_M_R_ENUM_FOOE[] =
  {
    "ABORT_FOOI",
    "ABORT_FOOH"

  };

static TAO::TypeCode::Enum<char const *,
                           char const * const *,
                           TAO::Null_RefCount_Policy>
  _tao_tc_IF_EXE_M_R_ENUM_FOOE (
    "IDL:IF_EXE_M_R/ENUM_FOOE:1.0",
    "ENUM_FOOE",
    _tao_enumerators_IF_EXE_M_R_ENUM_FOOE,
    2);


namespace IF_EXE_M_R
{
  ::CORBA::TypeCode_ptr const _tc_ENUM_FOOE =
    &_tao_tc_IF_EXE_M_R_ENUM_FOOE;
}

// TAO_IDL - Generated from
// be/be_visitor_typecode/enum_typecode.cpp:29
static char const * const _tao_enumerators_IF_EXE_M_R_ENUM_FOOF[] =
  {
    "MAXIMUM",
    "ECOX_NOMY"

  };

static TAO::TypeCode::Enum<char const *,
                           char const * const *,
                           TAO::Null_RefCount_Policy>
  _tao_tc_IF_EXE_M_R_ENUM_FOOF (
    "IDL:IF_EXE_M_R/ENUM_FOOF:1.0",
    "ENUM_FOOF",
    _tao_enumerators_IF_EXE_M_R_ENUM_FOOF,
    2);


namespace IF_EXE_M_R
{
  ::CORBA::TypeCode_ptr const _tc_ENUM_FOOF =
    &_tao_tc_IF_EXE_M_R_ENUM_FOOF;
}

// TAO_IDL - Generated from
// be/be_visitor_typecode/enum_typecode.cpp:29
static char const * const _tao_enumerators_IF_EXE_M_R_ENUM_ControlMode[] =
  {
    "LINEAR",
    "IMMEDIATELY"

  };

static TAO::TypeCode::Enum<char const *,
                           char const * const *,
                           TAO::Null_RefCount_Policy>
  _tao_tc_IF_EXE_M_R_ENUM_ControlMode (
    "IDL:IF_EXE_M_R/ENUM_ControlMode:1.0",
    "ENUM_ControlMode",
    _tao_enumerators_IF_EXE_M_R_ENUM_ControlMode,
    2);


namespace IF_EXE_M_R
{
  ::CORBA::TypeCode_ptr const _tc_ENUM_ControlMode =
    &_tao_tc_IF_EXE_M_R_ENUM_ControlMode;
}

// TAO_IDL - Generated from
// be/be_visitor_typecode/enum_typecode.cpp:29
static char const * const _tao_enumerators_IF_EXE_M_R_ENUM_FOOPDirection[] =
  {
    "LEFT_TO_RIGHT",
    "RIGHT_TO_LEFT"

  };

static TAO::TypeCode::Enum<char const *,
                           char const * const *,
                           TAO::Null_RefCount_Policy>
  _tao_tc_IF_EXE_M_R_ENUM_FOOPDirection (
    "IDL:IF_EXE_M_R/ENUM_FOOPDirection:1.0",
    "ENUM_FOOPDirection",
    _tao_enumerators_IF_EXE_M_R_ENUM_FOOPDirection,
    2);


namespace IF_EXE_M_R
{
  ::CORBA::TypeCode_ptr const _tc_ENUM_FOOPDirection =
    &_tao_tc_IF_EXE_M_R_ENUM_FOOPDirection;
}

// TAO_IDL - Generated from
// be/be_visitor_typecode/enum_typecode.cpp:29
static char const * const _tao_enumerators_IF_EXE_M_R_ENUM_QFOOODirection[] =
  {
    "MIDDLE_TO_LEFT",
    "MIDDLE_TO_RIGHT"

  };

static TAO::TypeCode::Enum<char const *,
                           char const * const *,
                           TAO::Null_RefCount_Policy>
  _tao_tc_IF_EXE_M_R_ENUM_QFOOODirection (
    "IDL:IF_EXE_M_R/ENUM_QFOOODirection:1.0",
    "ENUM_QFOOODirection",
    _tao_enumerators_IF_EXE_M_R_ENUM_QFOOODirection,
    2);


namespace IF_EXE_M_R
{
  ::CORBA::TypeCode_ptr const _tc_ENUM_QFOOODirection =
    &_tao_tc_IF_EXE_M_R_ENUM_QFOOODirection;
}

// TAO_IDL - Generated from
// be/be_visitor_typecode/enum_typecode.cpp:29
static char const * const _tao_enumerators_IF_EXE_M_R_ENUM_FOONDirection[] =
  {
    "CLOCKWISE",
    "COUNTERCLOCKWISE"

  };

static TAO::TypeCode::Enum<char const *,
                           char const * const *,
                           TAO::Null_RefCount_Policy>
  _tao_tc_IF_EXE_M_R_ENUM_FOONDirection (
    "IDL:IF_EXE_M_R/ENUM_FOONDirection:1.0",
    "ENUM_FOONDirection",
    _tao_enumerators_IF_EXE_M_R_ENUM_FOONDirection,
    2);


namespace IF_EXE_M_R
{
  ::CORBA::TypeCode_ptr const _tc_ENUM_FOONDirection =
    &_tao_tc_IF_EXE_M_R_ENUM_FOONDirection;
}

// TAO_IDL - Generated from
// be/be_visitor_typecode/enum_typecode.cpp:29
static char const * const _tao_enumerators_IF_EXE_M_R_ENUM_FOOMMode[] =
  {
    "OFF",
    "ON_COMPLETE_FOOI",
    "ON_ONLY_ON_FOOGS"

  };

static TAO::TypeCode::Enum<char const *,
                           char const * const *,
                           TAO::Null_RefCount_Policy>
  _tao_tc_IF_EXE_M_R_ENUM_FOOMMode (
    "IDL:IF_EXE_M_R/ENUM_FOOMMode:1.0",
    "ENUM_FOOMMode",
    _tao_enumerators_IF_EXE_M_R_ENUM_FOOMMode,
    3);


namespace IF_EXE_M_R
{
  ::CORBA::TypeCode_ptr const _tc_ENUM_FOOMMode =
    &_tao_tc_IF_EXE_M_R_ENUM_FOOMMode;
}

// TAO_IDL - Generated from
// be/be_visitor_typecode/enum_typecode.cpp:29
static char const * const _tao_enumerators_IF_EXE_M_R_ENUM_TransitionStatus[] =
  {
    "X_NO_TRANSITION",
    "FOOGTRANSITION",
    "ENDTRANSITION"

  };

static TAO::TypeCode::Enum<char const *,
                           char const * const *,
                           TAO::Null_RefCount_Policy>
  _tao_tc_IF_EXE_M_R_ENUM_TransitionStatus (
    "IDL:IF_EXE_M_R/ENUM_TransitionStatus:1.0",
    "ENUM_TransitionStatus",
    _tao_enumerators_IF_EXE_M_R_ENUM_TransitionStatus,
    3);


namespace IF_EXE_M_R
{
  ::CORBA::TypeCode_ptr const _tc_ENUM_TransitionStatus =
    &_tao_tc_IF_EXE_M_R_ENUM_TransitionStatus;
}

// TAO_IDL - Generated from
// be/be_visitor_typecode/enum_typecode.cpp:29
static char const * const _tao_enumerators_IF_EXE_M_R_ENUM_ParameterType[] =
  {
    "SET1",
    "SET2",
    "SET3"

  };

static TAO::TypeCode::Enum<char const *,
                           char const * const *,
                           TAO::Null_RefCount_Policy>
  _tao_tc_IF_EXE_M_R_ENUM_ParameterType (
    "IDL:IF_EXE_M_R/ENUM_ParameterType:1.0",
    "ENUM_ParameterType",
    _tao_enumerators_IF_EXE_M_R_ENUM_ParameterType,
    3);


namespace IF_EXE_M_R
{
  ::CORBA::TypeCode_ptr const _tc_ENUM_ParameterType =
    &_tao_tc_IF_EXE_M_R_ENUM_ParameterType;
}

// TAO_IDL - Generated from
// be/be_visitor_typecode/enum_typecode.cpp:29
static char const * const _tao_enumerators_IF_EXE_M_R_ENUM_FOOHType[] =
  {
    "FOOH",
    "IMCMS",
    "FOOQ"

  };

static TAO::TypeCode::Enum<char const *,
                           char const * const *,
                           TAO::Null_RefCount_Policy>
  _tao_tc_IF_EXE_M_R_ENUM_FOOHType (
    "IDL:IF_EXE_M_R/ENUM_FOOHType:1.0",
    "ENUM_FOOHType",
    _tao_enumerators_IF_EXE_M_R_ENUM_FOOHType,
    3);


namespace IF_EXE_M_R
{
  ::CORBA::TypeCode_ptr const _tc_ENUM_FOOHType =
    &_tao_tc_IF_EXE_M_R_ENUM_FOOHType;
}

// TAO_IDL - Generated from
// be/be_visitor_typecode/enum_typecode.cpp:29
static char const * const _tao_enumerators_IF_EXE_M_R_ENUM_FOOKType[] =
  {
    "WP_UNDEF",
    "WP_1",
    "WP_2",
    "WP_3",
    "WP_A",
    "WP_0",
    "WP_S",
    "WP_TGT"

  };

static TAO::TypeCode::Enum<char const *,
                           char const * const *,
                           TAO::Null_RefCount_Policy>
  _tao_tc_IF_EXE_M_R_ENUM_FOOKType (
    "IDL:IF_EXE_M_R/ENUM_FOOKType:1.0",
    "ENUM_FOOKType",
    _tao_enumerators_IF_EXE_M_R_ENUM_FOOKType,
    8);


namespace IF_EXE_M_R
{
  ::CORBA::TypeCode_ptr const _tc_ENUM_FOOKType =
    &_tao_tc_IF_EXE_M_R_ENUM_FOOKType;
}

// TAO_IDL - Generated from
// be/be_visitor_typecode/enum_typecode.cpp:29
static char const * const _tao_enumerators_IF_EXE_M_R_ENUM_CL_FOOSMode[] =
  {
    "FOOROACH_CONTROL",
    "FOOG_CONTROL"

  };

static TAO::TypeCode::Enum<char const *,
                           char const * const *,
                           TAO::Null_RefCount_Policy>
  _tao_tc_IF_EXE_M_R_ENUM_CL_FOOSMode (
    "IDL:IF_EXE_M_R/ENUM_CL_FOOSMode:1.0",
    "ENUM_CL_FOOSMode",
    _tao_enumerators_IF_EXE_M_R_ENUM_CL_FOOSMode,
    2);


namespace IF_EXE_M_R
{
  ::CORBA::TypeCode_ptr const _tc_ENUM_CL_FOOSMode =
    &_tao_tc_IF_EXE_M_R_ENUM_CL_FOOSMode;
}

// TAO_IDL - Generated from
// be/be_visitor_typecode/enum_typecode.cpp:29
static char const * const _tao_enumerators_IF_EXE_M_R_ENUM_FOOLSide[] =
  {
    "LP_STARBOARD",
    "LP_PORT",
    "LP_STERN"

  };

static TAO::TypeCode::Enum<char const *,
                           char const * const *,
                           TAO::Null_RefCount_Policy>
  _tao_tc_IF_EXE_M_R_ENUM_FOOLSide (
    "IDL:IF_EXE_M_R/ENUM_FOOLSide:1.0",
    "ENUM_FOOLSide",
    _tao_enumerators_IF_EXE_M_R_ENUM_FOOLSide,
    3);


namespace IF_EXE_M_R
{
  ::CORBA::TypeCode_ptr const _tc_ENUM_FOOLSide =
    &_tao_tc_IF_EXE_M_R_ENUM_FOOLSide;
}

// TAO_IDL - Generated from
// be/be_visitor_typecode/enum_typecode.cpp:29
static char const * const _tao_enumerators_IF_EXE_M_R_ENUM_FOOJType[] =
  {
    "LEFT_2_RIGHT_BOTTOM_2_TOP",
    "RIGHT_2_LEFT_BOTTOM_2_TOP",
    "LEFT_2_RIGHT_TOP_2_BOTTOM",
    "RIGHT_2_LEFT_TOP_2_BOTTOM",
    "INSIDE_2_OUTSIDE_BOTTOM_2_TOP_CW",
    "INSIDE_2_OUTSIDE_BOTTOM_2_TOP_CTR_CW",
    "INSIDE_2_OUTSIDE_TOP_2_BOTTOM_CW",
    "INSIDE_2_OUTSIDE_TOP_2_BOTTOM_CTR_CW"

  };

static TAO::TypeCode::Enum<char const *,
                           char const * const *,
                           TAO::Null_RefCount_Policy>
  _tao_tc_IF_EXE_M_R_ENUM_FOOJType (
    "IDL:IF_EXE_M_R/ENUM_FOOJType:1.0",
    "ENUM_FOOJType",
    _tao_enumerators_IF_EXE_M_R_ENUM_FOOJType,
    8);


namespace IF_EXE_M_R
{
  ::CORBA::TypeCode_ptr const _tc_ENUM_FOOJType =
    &_tao_tc_IF_EXE_M_R_ENUM_FOOJType;
}

// TAO_IDL - Generated from
// be/be_visitor_enum/any_op_cs.cpp:35

TAO_BEGIN_VERSIONED_NAMESPACE_DECL


TAO_END_VERSIONED_NAMESPACE_DECL



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace IF_EXE_M_R
{
  void operator<<= (
      ::CORBA::Any &_tao_any,
      ::IF_EXE_M_R::FOOAMode_E _tao_elem
    )
  {
    TAO::Any_Basic_Impl_T< ::IF_EXE_M_R::FOOAMode_E>::insert (
        _tao_any,
        ::IF_EXE_M_R::_tc_FOOAMode_E,
        _tao_elem
      );
  }

  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      ::IF_EXE_M_R::FOOAMode_E &_tao_elem
    )
  {
    return
      TAO::Any_Basic_Impl_T< ::IF_EXE_M_R::FOOAMode_E>::extract (
          _tao_any,
          ::IF_EXE_M_R::_tc_FOOAMode_E,
          _tao_elem
        );
  }
}

#else

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

void operator<<= (
    ::CORBA::Any &_tao_any,
    IF_EXE_M_R::FOOAMode_E _tao_elem
  )
{
  TAO::Any_Basic_Impl_T<IF_EXE_M_R::FOOAMode_E>::insert (
      _tao_any,
      IF_EXE_M_R::_tc_FOOAMode_E,
      _tao_elem
    );
}

::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    IF_EXE_M_R::FOOAMode_E &_tao_elem
  )
{
  return
    TAO::Any_Basic_Impl_T<IF_EXE_M_R::FOOAMode_E>::extract (
        _tao_any,
        IF_EXE_M_R::_tc_FOOAMode_E,
        _tao_elem
      );
}
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_enum/any_op_cs.cpp:35

TAO_BEGIN_VERSIONED_NAMESPACE_DECL


TAO_END_VERSIONED_NAMESPACE_DECL



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace IF_EXE_M_R
{
  void operator<<= (
      ::CORBA::Any &_tao_any,
      ::IF_EXE_M_R::FOOBMode_E _tao_elem
    )
  {
    TAO::Any_Basic_Impl_T< ::IF_EXE_M_R::FOOBMode_E>::insert (
        _tao_any,
        ::IF_EXE_M_R::_tc_FOOBMode_E,
        _tao_elem
      );
  }

  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      ::IF_EXE_M_R::FOOBMode_E &_tao_elem
    )
  {
    return
      TAO::Any_Basic_Impl_T< ::IF_EXE_M_R::FOOBMode_E>::extract (
          _tao_any,
          ::IF_EXE_M_R::_tc_FOOBMode_E,
          _tao_elem
        );
  }
}

#else

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

void operator<<= (
    ::CORBA::Any &_tao_any,
    IF_EXE_M_R::FOOBMode_E _tao_elem
  )
{
  TAO::Any_Basic_Impl_T<IF_EXE_M_R::FOOBMode_E>::insert (
      _tao_any,
      IF_EXE_M_R::_tc_FOOBMode_E,
      _tao_elem
    );
}

::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    IF_EXE_M_R::FOOBMode_E &_tao_elem
  )
{
  return
    TAO::Any_Basic_Impl_T<IF_EXE_M_R::FOOBMode_E>::extract (
        _tao_any,
        IF_EXE_M_R::_tc_FOOBMode_E,
        _tao_elem
      );
}
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_enum/any_op_cs.cpp:35

TAO_BEGIN_VERSIONED_NAMESPACE_DECL


TAO_END_VERSIONED_NAMESPACE_DECL



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace IF_EXE_M_R
{
  void operator<<= (
      ::CORBA::Any &_tao_any,
      ::IF_EXE_M_R::FOOCMode_E _tao_elem
    )
  {
    TAO::Any_Basic_Impl_T< ::IF_EXE_M_R::FOOCMode_E>::insert (
        _tao_any,
        ::IF_EXE_M_R::_tc_FOOCMode_E,
        _tao_elem
      );
  }

  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      ::IF_EXE_M_R::FOOCMode_E &_tao_elem
    )
  {
    return
      TAO::Any_Basic_Impl_T< ::IF_EXE_M_R::FOOCMode_E>::extract (
          _tao_any,
          ::IF_EXE_M_R::_tc_FOOCMode_E,
          _tao_elem
        );
  }
}

#else

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

void operator<<= (
    ::CORBA::Any &_tao_any,
    IF_EXE_M_R::FOOCMode_E _tao_elem
  )
{
  TAO::Any_Basic_Impl_T<IF_EXE_M_R::FOOCMode_E>::insert (
      _tao_any,
      IF_EXE_M_R::_tc_FOOCMode_E,
      _tao_elem
    );
}

::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    IF_EXE_M_R::FOOCMode_E &_tao_elem
  )
{
  return
    TAO::Any_Basic_Impl_T<IF_EXE_M_R::FOOCMode_E>::extract (
        _tao_any,
        IF_EXE_M_R::_tc_FOOCMode_E,
        _tao_elem
      );
}
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_enum/any_op_cs.cpp:35

TAO_BEGIN_VERSIONED_NAMESPACE_DECL


TAO_END_VERSIONED_NAMESPACE_DECL



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace IF_EXE_M_R
{
  void operator<<= (
      ::CORBA::Any &_tao_any,
      ::IF_EXE_M_R::ENUM_Selection _tao_elem
    )
  {
    TAO::Any_Basic_Impl_T< ::IF_EXE_M_R::ENUM_Selection>::insert (
        _tao_any,
        ::IF_EXE_M_R::_tc_ENUM_Selection,
        _tao_elem
      );
  }

  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      ::IF_EXE_M_R::ENUM_Selection &_tao_elem
    )
  {
    return
      TAO::Any_Basic_Impl_T< ::IF_EXE_M_R::ENUM_Selection>::extract (
          _tao_any,
          ::IF_EXE_M_R::_tc_ENUM_Selection,
          _tao_elem
        );
  }
}

#else

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

void operator<<= (
    ::CORBA::Any &_tao_any,
    IF_EXE_M_R::ENUM_Selection _tao_elem
  )
{
  TAO::Any_Basic_Impl_T<IF_EXE_M_R::ENUM_Selection>::insert (
      _tao_any,
      IF_EXE_M_R::_tc_ENUM_Selection,
      _tao_elem
    );
}

::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    IF_EXE_M_R::ENUM_Selection &_tao_elem
  )
{
  return
    TAO::Any_Basic_Impl_T<IF_EXE_M_R::ENUM_Selection>::extract (
        _tao_any,
        IF_EXE_M_R::_tc_ENUM_Selection,
        _tao_elem
      );
}
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_enum/any_op_cs.cpp:35

TAO_BEGIN_VERSIONED_NAMESPACE_DECL


TAO_END_VERSIONED_NAMESPACE_DECL



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace IF_EXE_M_R
{
  void operator<<= (
      ::CORBA::Any &_tao_any,
      ::IF_EXE_M_R::ENUM_FOOD _tao_elem
    )
  {
    TAO::Any_Basic_Impl_T< ::IF_EXE_M_R::ENUM_FOOD>::insert (
        _tao_any,
        ::IF_EXE_M_R::_tc_ENUM_FOOD,
        _tao_elem
      );
  }

  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      ::IF_EXE_M_R::ENUM_FOOD &_tao_elem
    )
  {
    return
      TAO::Any_Basic_Impl_T< ::IF_EXE_M_R::ENUM_FOOD>::extract (
          _tao_any,
          ::IF_EXE_M_R::_tc_ENUM_FOOD,
          _tao_elem
        );
  }
}

#else

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

void operator<<= (
    ::CORBA::Any &_tao_any,
    IF_EXE_M_R::ENUM_FOOD _tao_elem
  )
{
  TAO::Any_Basic_Impl_T<IF_EXE_M_R::ENUM_FOOD>::insert (
      _tao_any,
      IF_EXE_M_R::_tc_ENUM_FOOD,
      _tao_elem
    );
}

::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    IF_EXE_M_R::ENUM_FOOD &_tao_elem
  )
{
  return
    TAO::Any_Basic_Impl_T<IF_EXE_M_R::ENUM_FOOD>::extract (
        _tao_any,
        IF_EXE_M_R::_tc_ENUM_FOOD,
        _tao_elem
      );
}
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_enum/any_op_cs.cpp:35

TAO_BEGIN_VERSIONED_NAMESPACE_DECL


TAO_END_VERSIONED_NAMESPACE_DECL



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace IF_EXE_M_R
{
  void operator<<= (
      ::CORBA::Any &_tao_any,
      ::IF_EXE_M_R::ENUM_FOOE _tao_elem
    )
  {
    TAO::Any_Basic_Impl_T< ::IF_EXE_M_R::ENUM_FOOE>::insert (
        _tao_any,
        ::IF_EXE_M_R::_tc_ENUM_FOOE,
        _tao_elem
      );
  }

  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      ::IF_EXE_M_R::ENUM_FOOE &_tao_elem
    )
  {
    return
      TAO::Any_Basic_Impl_T< ::IF_EXE_M_R::ENUM_FOOE>::extract (
          _tao_any,
          ::IF_EXE_M_R::_tc_ENUM_FOOE,
          _tao_elem
        );
  }
}

#else

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

void operator<<= (
    ::CORBA::Any &_tao_any,
    IF_EXE_M_R::ENUM_FOOE _tao_elem
  )
{
  TAO::Any_Basic_Impl_T<IF_EXE_M_R::ENUM_FOOE>::insert (
      _tao_any,
      IF_EXE_M_R::_tc_ENUM_FOOE,
      _tao_elem
    );
}

::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    IF_EXE_M_R::ENUM_FOOE &_tao_elem
  )
{
  return
    TAO::Any_Basic_Impl_T<IF_EXE_M_R::ENUM_FOOE>::extract (
        _tao_any,
        IF_EXE_M_R::_tc_ENUM_FOOE,
        _tao_elem
      );
}
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_enum/any_op_cs.cpp:35

TAO_BEGIN_VERSIONED_NAMESPACE_DECL


TAO_END_VERSIONED_NAMESPACE_DECL



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace IF_EXE_M_R
{
  void operator<<= (
      ::CORBA::Any &_tao_any,
      ::IF_EXE_M_R::ENUM_FOOF _tao_elem
    )
  {
    TAO::Any_Basic_Impl_T< ::IF_EXE_M_R::ENUM_FOOF>::insert (
        _tao_any,
        ::IF_EXE_M_R::_tc_ENUM_FOOF,
        _tao_elem
      );
  }

  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      ::IF_EXE_M_R::ENUM_FOOF &_tao_elem
    )
  {
    return
      TAO::Any_Basic_Impl_T< ::IF_EXE_M_R::ENUM_FOOF>::extract (
          _tao_any,
          ::IF_EXE_M_R::_tc_ENUM_FOOF,
          _tao_elem
        );
  }
}

#else

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

void operator<<= (
    ::CORBA::Any &_tao_any,
    IF_EXE_M_R::ENUM_FOOF _tao_elem
  )
{
  TAO::Any_Basic_Impl_T<IF_EXE_M_R::ENUM_FOOF>::insert (
      _tao_any,
      IF_EXE_M_R::_tc_ENUM_FOOF,
      _tao_elem
    );
}

::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    IF_EXE_M_R::ENUM_FOOF &_tao_elem
  )
{
  return
    TAO::Any_Basic_Impl_T<IF_EXE_M_R::ENUM_FOOF>::extract (
        _tao_any,
        IF_EXE_M_R::_tc_ENUM_FOOF,
        _tao_elem
      );
}
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_enum/any_op_cs.cpp:35

TAO_BEGIN_VERSIONED_NAMESPACE_DECL


TAO_END_VERSIONED_NAMESPACE_DECL



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace IF_EXE_M_R
{
  void operator<<= (
      ::CORBA::Any &_tao_any,
      ::IF_EXE_M_R::ENUM_ControlMode _tao_elem
    )
  {
    TAO::Any_Basic_Impl_T< ::IF_EXE_M_R::ENUM_ControlMode>::insert (
        _tao_any,
        ::IF_EXE_M_R::_tc_ENUM_ControlMode,
        _tao_elem
      );
  }

  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      ::IF_EXE_M_R::ENUM_ControlMode &_tao_elem
    )
  {
    return
      TAO::Any_Basic_Impl_T< ::IF_EXE_M_R::ENUM_ControlMode>::extract (
          _tao_any,
          ::IF_EXE_M_R::_tc_ENUM_ControlMode,
          _tao_elem
        );
  }
}

#else

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

void operator<<= (
    ::CORBA::Any &_tao_any,
    IF_EXE_M_R::ENUM_ControlMode _tao_elem
  )
{
  TAO::Any_Basic_Impl_T<IF_EXE_M_R::ENUM_ControlMode>::insert (
      _tao_any,
      IF_EXE_M_R::_tc_ENUM_ControlMode,
      _tao_elem
    );
}

::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    IF_EXE_M_R::ENUM_ControlMode &_tao_elem
  )
{
  return
    TAO::Any_Basic_Impl_T<IF_EXE_M_R::ENUM_ControlMode>::extract (
        _tao_any,
        IF_EXE_M_R::_tc_ENUM_ControlMode,
        _tao_elem
      );
}
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_enum/any_op_cs.cpp:35

TAO_BEGIN_VERSIONED_NAMESPACE_DECL


TAO_END_VERSIONED_NAMESPACE_DECL



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace IF_EXE_M_R
{
  void operator<<= (
      ::CORBA::Any &_tao_any,
      ::IF_EXE_M_R::ENUM_FOOPDirection _tao_elem
    )
  {
    TAO::Any_Basic_Impl_T< ::IF_EXE_M_R::ENUM_FOOPDirection>::insert (
        _tao_any,
        ::IF_EXE_M_R::_tc_ENUM_FOOPDirection,
        _tao_elem
      );
  }

  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      ::IF_EXE_M_R::ENUM_FOOPDirection &_tao_elem
    )
  {
    return
      TAO::Any_Basic_Impl_T< ::IF_EXE_M_R::ENUM_FOOPDirection>::extract (
          _tao_any,
          ::IF_EXE_M_R::_tc_ENUM_FOOPDirection,
          _tao_elem
        );
  }
}

#else

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

void operator<<= (
    ::CORBA::Any &_tao_any,
    IF_EXE_M_R::ENUM_FOOPDirection _tao_elem
  )
{
  TAO::Any_Basic_Impl_T<IF_EXE_M_R::ENUM_FOOPDirection>::insert (
      _tao_any,
      IF_EXE_M_R::_tc_ENUM_FOOPDirection,
      _tao_elem
    );
}

::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    IF_EXE_M_R::ENUM_FOOPDirection &_tao_elem
  )
{
  return
    TAO::Any_Basic_Impl_T<IF_EXE_M_R::ENUM_FOOPDirection>::extract (
        _tao_any,
        IF_EXE_M_R::_tc_ENUM_FOOPDirection,
        _tao_elem
      );
}
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_enum/any_op_cs.cpp:35

TAO_BEGIN_VERSIONED_NAMESPACE_DECL


TAO_END_VERSIONED_NAMESPACE_DECL



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace IF_EXE_M_R
{
  void operator<<= (
      ::CORBA::Any &_tao_any,
      ::IF_EXE_M_R::ENUM_QFOOODirection _tao_elem
    )
  {
    TAO::Any_Basic_Impl_T< ::IF_EXE_M_R::ENUM_QFOOODirection>::insert (
        _tao_any,
        ::IF_EXE_M_R::_tc_ENUM_QFOOODirection,
        _tao_elem
      );
  }

  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      ::IF_EXE_M_R::ENUM_QFOOODirection &_tao_elem
    )
  {
    return
      TAO::Any_Basic_Impl_T< ::IF_EXE_M_R::ENUM_QFOOODirection>::extract (
          _tao_any,
          ::IF_EXE_M_R::_tc_ENUM_QFOOODirection,
          _tao_elem
        );
  }
}

#else

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

void operator<<= (
    ::CORBA::Any &_tao_any,
    IF_EXE_M_R::ENUM_QFOOODirection _tao_elem
  )
{
  TAO::Any_Basic_Impl_T<IF_EXE_M_R::ENUM_QFOOODirection>::insert (
      _tao_any,
      IF_EXE_M_R::_tc_ENUM_QFOOODirection,
      _tao_elem
    );
}

::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    IF_EXE_M_R::ENUM_QFOOODirection &_tao_elem
  )
{
  return
    TAO::Any_Basic_Impl_T<IF_EXE_M_R::ENUM_QFOOODirection>::extract (
        _tao_any,
        IF_EXE_M_R::_tc_ENUM_QFOOODirection,
        _tao_elem
      );
}
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_enum/any_op_cs.cpp:35

TAO_BEGIN_VERSIONED_NAMESPACE_DECL


TAO_END_VERSIONED_NAMESPACE_DECL



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace IF_EXE_M_R
{
  void operator<<= (
      ::CORBA::Any &_tao_any,
      ::IF_EXE_M_R::ENUM_FOONDirection _tao_elem
    )
  {
    TAO::Any_Basic_Impl_T< ::IF_EXE_M_R::ENUM_FOONDirection>::insert (
        _tao_any,
        ::IF_EXE_M_R::_tc_ENUM_FOONDirection,
        _tao_elem
      );
  }

  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      ::IF_EXE_M_R::ENUM_FOONDirection &_tao_elem
    )
  {
    return
      TAO::Any_Basic_Impl_T< ::IF_EXE_M_R::ENUM_FOONDirection>::extract (
          _tao_any,
          ::IF_EXE_M_R::_tc_ENUM_FOONDirection,
          _tao_elem
        );
  }
}

#else

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

void operator<<= (
    ::CORBA::Any &_tao_any,
    IF_EXE_M_R::ENUM_FOONDirection _tao_elem
  )
{
  TAO::Any_Basic_Impl_T<IF_EXE_M_R::ENUM_FOONDirection>::insert (
      _tao_any,
      IF_EXE_M_R::_tc_ENUM_FOONDirection,
      _tao_elem
    );
}

::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    IF_EXE_M_R::ENUM_FOONDirection &_tao_elem
  )
{
  return
    TAO::Any_Basic_Impl_T<IF_EXE_M_R::ENUM_FOONDirection>::extract (
        _tao_any,
        IF_EXE_M_R::_tc_ENUM_FOONDirection,
        _tao_elem
      );
}
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_enum/any_op_cs.cpp:35

TAO_BEGIN_VERSIONED_NAMESPACE_DECL


TAO_END_VERSIONED_NAMESPACE_DECL



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace IF_EXE_M_R
{
  void operator<<= (
      ::CORBA::Any &_tao_any,
      ::IF_EXE_M_R::ENUM_FOOMMode _tao_elem
    )
  {
    TAO::Any_Basic_Impl_T< ::IF_EXE_M_R::ENUM_FOOMMode>::insert (
        _tao_any,
        ::IF_EXE_M_R::_tc_ENUM_FOOMMode,
        _tao_elem
      );
  }

  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      ::IF_EXE_M_R::ENUM_FOOMMode &_tao_elem
    )
  {
    return
      TAO::Any_Basic_Impl_T< ::IF_EXE_M_R::ENUM_FOOMMode>::extract (
          _tao_any,
          ::IF_EXE_M_R::_tc_ENUM_FOOMMode,
          _tao_elem
        );
  }
}

#else

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

void operator<<= (
    ::CORBA::Any &_tao_any,
    IF_EXE_M_R::ENUM_FOOMMode _tao_elem
  )
{
  TAO::Any_Basic_Impl_T<IF_EXE_M_R::ENUM_FOOMMode>::insert (
      _tao_any,
      IF_EXE_M_R::_tc_ENUM_FOOMMode,
      _tao_elem
    );
}

::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    IF_EXE_M_R::ENUM_FOOMMode &_tao_elem
  )
{
  return
    TAO::Any_Basic_Impl_T<IF_EXE_M_R::ENUM_FOOMMode>::extract (
        _tao_any,
        IF_EXE_M_R::_tc_ENUM_FOOMMode,
        _tao_elem
      );
}
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_enum/any_op_cs.cpp:35

TAO_BEGIN_VERSIONED_NAMESPACE_DECL


TAO_END_VERSIONED_NAMESPACE_DECL



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace IF_EXE_M_R
{
  void operator<<= (
      ::CORBA::Any &_tao_any,
      ::IF_EXE_M_R::ENUM_TransitionStatus _tao_elem
    )
  {
    TAO::Any_Basic_Impl_T< ::IF_EXE_M_R::ENUM_TransitionStatus>::insert (
        _tao_any,
        ::IF_EXE_M_R::_tc_ENUM_TransitionStatus,
        _tao_elem
      );
  }

  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      ::IF_EXE_M_R::ENUM_TransitionStatus &_tao_elem
    )
  {
    return
      TAO::Any_Basic_Impl_T< ::IF_EXE_M_R::ENUM_TransitionStatus>::extract (
          _tao_any,
          ::IF_EXE_M_R::_tc_ENUM_TransitionStatus,
          _tao_elem
        );
  }
}

#else

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

void operator<<= (
    ::CORBA::Any &_tao_any,
    IF_EXE_M_R::ENUM_TransitionStatus _tao_elem
  )
{
  TAO::Any_Basic_Impl_T<IF_EXE_M_R::ENUM_TransitionStatus>::insert (
      _tao_any,
      IF_EXE_M_R::_tc_ENUM_TransitionStatus,
      _tao_elem
    );
}

::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    IF_EXE_M_R::ENUM_TransitionStatus &_tao_elem
  )
{
  return
    TAO::Any_Basic_Impl_T<IF_EXE_M_R::ENUM_TransitionStatus>::extract (
        _tao_any,
        IF_EXE_M_R::_tc_ENUM_TransitionStatus,
        _tao_elem
      );
}
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_enum/any_op_cs.cpp:35

TAO_BEGIN_VERSIONED_NAMESPACE_DECL


TAO_END_VERSIONED_NAMESPACE_DECL



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace IF_EXE_M_R
{
  void operator<<= (
      ::CORBA::Any &_tao_any,
      ::IF_EXE_M_R::ENUM_ParameterType _tao_elem
    )
  {
    TAO::Any_Basic_Impl_T< ::IF_EXE_M_R::ENUM_ParameterType>::insert (
        _tao_any,
        ::IF_EXE_M_R::_tc_ENUM_ParameterType,
        _tao_elem
      );
  }

  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      ::IF_EXE_M_R::ENUM_ParameterType &_tao_elem
    )
  {
    return
      TAO::Any_Basic_Impl_T< ::IF_EXE_M_R::ENUM_ParameterType>::extract (
          _tao_any,
          ::IF_EXE_M_R::_tc_ENUM_ParameterType,
          _tao_elem
        );
  }
}

#else

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

void operator<<= (
    ::CORBA::Any &_tao_any,
    IF_EXE_M_R::ENUM_ParameterType _tao_elem
  )
{
  TAO::Any_Basic_Impl_T<IF_EXE_M_R::ENUM_ParameterType>::insert (
      _tao_any,
      IF_EXE_M_R::_tc_ENUM_ParameterType,
      _tao_elem
    );
}

::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    IF_EXE_M_R::ENUM_ParameterType &_tao_elem
  )
{
  return
    TAO::Any_Basic_Impl_T<IF_EXE_M_R::ENUM_ParameterType>::extract (
        _tao_any,
        IF_EXE_M_R::_tc_ENUM_ParameterType,
        _tao_elem
      );
}
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_enum/any_op_cs.cpp:35

TAO_BEGIN_VERSIONED_NAMESPACE_DECL


TAO_END_VERSIONED_NAMESPACE_DECL



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace IF_EXE_M_R
{
  void operator<<= (
      ::CORBA::Any &_tao_any,
      ::IF_EXE_M_R::ENUM_FOOHType _tao_elem
    )
  {
    TAO::Any_Basic_Impl_T< ::IF_EXE_M_R::ENUM_FOOHType>::insert (
        _tao_any,
        ::IF_EXE_M_R::_tc_ENUM_FOOHType,
        _tao_elem
      );
  }

  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      ::IF_EXE_M_R::ENUM_FOOHType &_tao_elem
    )
  {
    return
      TAO::Any_Basic_Impl_T< ::IF_EXE_M_R::ENUM_FOOHType>::extract (
          _tao_any,
          ::IF_EXE_M_R::_tc_ENUM_FOOHType,
          _tao_elem
        );
  }
}

#else

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

void operator<<= (
    ::CORBA::Any &_tao_any,
    IF_EXE_M_R::ENUM_FOOHType _tao_elem
  )
{
  TAO::Any_Basic_Impl_T<IF_EXE_M_R::ENUM_FOOHType>::insert (
      _tao_any,
      IF_EXE_M_R::_tc_ENUM_FOOHType,
      _tao_elem
    );
}

::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    IF_EXE_M_R::ENUM_FOOHType &_tao_elem
  )
{
  return
    TAO::Any_Basic_Impl_T<IF_EXE_M_R::ENUM_FOOHType>::extract (
        _tao_any,
        IF_EXE_M_R::_tc_ENUM_FOOHType,
        _tao_elem
      );
}
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_enum/any_op_cs.cpp:35

TAO_BEGIN_VERSIONED_NAMESPACE_DECL


TAO_END_VERSIONED_NAMESPACE_DECL



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace IF_EXE_M_R
{
  void operator<<= (
      ::CORBA::Any &_tao_any,
      ::IF_EXE_M_R::ENUM_FOOKType _tao_elem
    )
  {
    TAO::Any_Basic_Impl_T< ::IF_EXE_M_R::ENUM_FOOKType>::insert (
        _tao_any,
        ::IF_EXE_M_R::_tc_ENUM_FOOKType,
        _tao_elem
      );
  }

  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      ::IF_EXE_M_R::ENUM_FOOKType &_tao_elem
    )
  {
    return
      TAO::Any_Basic_Impl_T< ::IF_EXE_M_R::ENUM_FOOKType>::extract (
          _tao_any,
          ::IF_EXE_M_R::_tc_ENUM_FOOKType,
          _tao_elem
        );
  }
}

#else

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

void operator<<= (
    ::CORBA::Any &_tao_any,
    IF_EXE_M_R::ENUM_FOOKType _tao_elem
  )
{
  TAO::Any_Basic_Impl_T<IF_EXE_M_R::ENUM_FOOKType>::insert (
      _tao_any,
      IF_EXE_M_R::_tc_ENUM_FOOKType,
      _tao_elem
    );
}

::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    IF_EXE_M_R::ENUM_FOOKType &_tao_elem
  )
{
  return
    TAO::Any_Basic_Impl_T<IF_EXE_M_R::ENUM_FOOKType>::extract (
        _tao_any,
        IF_EXE_M_R::_tc_ENUM_FOOKType,
        _tao_elem
      );
}
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_enum/any_op_cs.cpp:35

TAO_BEGIN_VERSIONED_NAMESPACE_DECL


TAO_END_VERSIONED_NAMESPACE_DECL



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace IF_EXE_M_R
{
  void operator<<= (
      ::CORBA::Any &_tao_any,
      ::IF_EXE_M_R::ENUM_CL_FOOSMode _tao_elem
    )
  {
    TAO::Any_Basic_Impl_T< ::IF_EXE_M_R::ENUM_CL_FOOSMode>::insert (
        _tao_any,
        ::IF_EXE_M_R::_tc_ENUM_CL_FOOSMode,
        _tao_elem
      );
  }

  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      ::IF_EXE_M_R::ENUM_CL_FOOSMode &_tao_elem
    )
  {
    return
      TAO::Any_Basic_Impl_T< ::IF_EXE_M_R::ENUM_CL_FOOSMode>::extract (
          _tao_any,
          ::IF_EXE_M_R::_tc_ENUM_CL_FOOSMode,
          _tao_elem
        );
  }
}

#else

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

void operator<<= (
    ::CORBA::Any &_tao_any,
    IF_EXE_M_R::ENUM_CL_FOOSMode _tao_elem
  )
{
  TAO::Any_Basic_Impl_T<IF_EXE_M_R::ENUM_CL_FOOSMode>::insert (
      _tao_any,
      IF_EXE_M_R::_tc_ENUM_CL_FOOSMode,
      _tao_elem
    );
}

::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    IF_EXE_M_R::ENUM_CL_FOOSMode &_tao_elem
  )
{
  return
    TAO::Any_Basic_Impl_T<IF_EXE_M_R::ENUM_CL_FOOSMode>::extract (
        _tao_any,
        IF_EXE_M_R::_tc_ENUM_CL_FOOSMode,
        _tao_elem
      );
}
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_enum/any_op_cs.cpp:35

TAO_BEGIN_VERSIONED_NAMESPACE_DECL


TAO_END_VERSIONED_NAMESPACE_DECL



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace IF_EXE_M_R
{
  void operator<<= (
      ::CORBA::Any &_tao_any,
      ::IF_EXE_M_R::ENUM_FOOLSide _tao_elem
    )
  {
    TAO::Any_Basic_Impl_T< ::IF_EXE_M_R::ENUM_FOOLSide>::insert (
        _tao_any,
        ::IF_EXE_M_R::_tc_ENUM_FOOLSide,
        _tao_elem
      );
  }

  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      ::IF_EXE_M_R::ENUM_FOOLSide &_tao_elem
    )
  {
    return
      TAO::Any_Basic_Impl_T< ::IF_EXE_M_R::ENUM_FOOLSide>::extract (
          _tao_any,
          ::IF_EXE_M_R::_tc_ENUM_FOOLSide,
          _tao_elem
        );
  }
}

#else

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

void operator<<= (
    ::CORBA::Any &_tao_any,
    IF_EXE_M_R::ENUM_FOOLSide _tao_elem
  )
{
  TAO::Any_Basic_Impl_T<IF_EXE_M_R::ENUM_FOOLSide>::insert (
      _tao_any,
      IF_EXE_M_R::_tc_ENUM_FOOLSide,
      _tao_elem
    );
}

::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    IF_EXE_M_R::ENUM_FOOLSide &_tao_elem
  )
{
  return
    TAO::Any_Basic_Impl_T<IF_EXE_M_R::ENUM_FOOLSide>::extract (
        _tao_any,
        IF_EXE_M_R::_tc_ENUM_FOOLSide,
        _tao_elem
      );
}
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_enum/any_op_cs.cpp:35

TAO_BEGIN_VERSIONED_NAMESPACE_DECL


TAO_END_VERSIONED_NAMESPACE_DECL



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace IF_EXE_M_R
{
  void operator<<= (
      ::CORBA::Any &_tao_any,
      ::IF_EXE_M_R::ENUM_FOOJType _tao_elem
    )
  {
    TAO::Any_Basic_Impl_T< ::IF_EXE_M_R::ENUM_FOOJType>::insert (
        _tao_any,
        ::IF_EXE_M_R::_tc_ENUM_FOOJType,
        _tao_elem
      );
  }

  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      ::IF_EXE_M_R::ENUM_FOOJType &_tao_elem
    )
  {
    return
      TAO::Any_Basic_Impl_T< ::IF_EXE_M_R::ENUM_FOOJType>::extract (
          _tao_any,
          ::IF_EXE_M_R::_tc_ENUM_FOOJType,
          _tao_elem
        );
  }
}

#else

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

void operator<<= (
    ::CORBA::Any &_tao_any,
    IF_EXE_M_R::ENUM_FOOJType _tao_elem
  )
{
  TAO::Any_Basic_Impl_T<IF_EXE_M_R::ENUM_FOOJType>::insert (
      _tao_any,
      IF_EXE_M_R::_tc_ENUM_FOOJType,
      _tao_elem
    );
}

::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    IF_EXE_M_R::ENUM_FOOJType &_tao_elem
  )
{
  return
    TAO::Any_Basic_Impl_T<IF_EXE_M_R::ENUM_FOOJType>::extract (
        _tao_any,
        IF_EXE_M_R::_tc_ENUM_FOOJType,
        _tao_elem
      );
}
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_enum/cdr_op_cs.cpp:34


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (TAO_OutputCDR &strm, IF_EXE_M_R::FOOAMode_E _tao_enumerator)
{
  return strm << static_cast< ::CORBA::ULong> (_tao_enumerator);
}

::CORBA::Boolean operator>> (TAO_InputCDR &strm, IF_EXE_M_R::FOOAMode_E & _tao_enumerator)
{
  ::CORBA::ULong _tao_temp = 0;
  ::CORBA::Boolean const _tao_success = strm >> _tao_temp;

  if (_tao_success)
    {
      _tao_enumerator = static_cast<IF_EXE_M_R::FOOAMode_E> (_tao_temp);
    }

  return _tao_success;
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_enum/cdr_op_cs.cpp:34


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (TAO_OutputCDR &strm, IF_EXE_M_R::FOOBMode_E _tao_enumerator)
{
  return strm << static_cast< ::CORBA::ULong> (_tao_enumerator);
}

::CORBA::Boolean operator>> (TAO_InputCDR &strm, IF_EXE_M_R::FOOBMode_E & _tao_enumerator)
{
  ::CORBA::ULong _tao_temp = 0;
  ::CORBA::Boolean const _tao_success = strm >> _tao_temp;

  if (_tao_success)
    {
      _tao_enumerator = static_cast<IF_EXE_M_R::FOOBMode_E> (_tao_temp);
    }

  return _tao_success;
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_enum/cdr_op_cs.cpp:34


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (TAO_OutputCDR &strm, IF_EXE_M_R::FOOCMode_E _tao_enumerator)
{
  return strm << static_cast< ::CORBA::ULong> (_tao_enumerator);
}

::CORBA::Boolean operator>> (TAO_InputCDR &strm, IF_EXE_M_R::FOOCMode_E & _tao_enumerator)
{
  ::CORBA::ULong _tao_temp = 0;
  ::CORBA::Boolean const _tao_success = strm >> _tao_temp;

  if (_tao_success)
    {
      _tao_enumerator = static_cast<IF_EXE_M_R::FOOCMode_E> (_tao_temp);
    }

  return _tao_success;
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_enum/cdr_op_cs.cpp:34


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (TAO_OutputCDR &strm, IF_EXE_M_R::ENUM_Selection _tao_enumerator)
{
  return strm << static_cast< ::CORBA::ULong> (_tao_enumerator);
}

::CORBA::Boolean operator>> (TAO_InputCDR &strm, IF_EXE_M_R::ENUM_Selection & _tao_enumerator)
{
  ::CORBA::ULong _tao_temp = 0;
  ::CORBA::Boolean const _tao_success = strm >> _tao_temp;

  if (_tao_success)
    {
      _tao_enumerator = static_cast<IF_EXE_M_R::ENUM_Selection> (_tao_temp);
    }

  return _tao_success;
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_enum/cdr_op_cs.cpp:34


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (TAO_OutputCDR &strm, IF_EXE_M_R::ENUM_FOOD _tao_enumerator)
{
  return strm << static_cast< ::CORBA::ULong> (_tao_enumerator);
}

::CORBA::Boolean operator>> (TAO_InputCDR &strm, IF_EXE_M_R::ENUM_FOOD & _tao_enumerator)
{
  ::CORBA::ULong _tao_temp = 0;
  ::CORBA::Boolean const _tao_success = strm >> _tao_temp;

  if (_tao_success)
    {
      _tao_enumerator = static_cast<IF_EXE_M_R::ENUM_FOOD> (_tao_temp);
    }

  return _tao_success;
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_enum/cdr_op_cs.cpp:34


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (TAO_OutputCDR &strm, IF_EXE_M_R::ENUM_FOOE _tao_enumerator)
{
  return strm << static_cast< ::CORBA::ULong> (_tao_enumerator);
}

::CORBA::Boolean operator>> (TAO_InputCDR &strm, IF_EXE_M_R::ENUM_FOOE & _tao_enumerator)
{
  ::CORBA::ULong _tao_temp = 0;
  ::CORBA::Boolean const _tao_success = strm >> _tao_temp;

  if (_tao_success)
    {
      _tao_enumerator = static_cast<IF_EXE_M_R::ENUM_FOOE> (_tao_temp);
    }

  return _tao_success;
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_enum/cdr_op_cs.cpp:34


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (TAO_OutputCDR &strm, IF_EXE_M_R::ENUM_FOOF _tao_enumerator)
{
  return strm << static_cast< ::CORBA::ULong> (_tao_enumerator);
}

::CORBA::Boolean operator>> (TAO_InputCDR &strm, IF_EXE_M_R::ENUM_FOOF & _tao_enumerator)
{
  ::CORBA::ULong _tao_temp = 0;
  ::CORBA::Boolean const _tao_success = strm >> _tao_temp;

  if (_tao_success)
    {
      _tao_enumerator = static_cast<IF_EXE_M_R::ENUM_FOOF> (_tao_temp);
    }

  return _tao_success;
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_enum/cdr_op_cs.cpp:34


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (TAO_OutputCDR &strm, IF_EXE_M_R::ENUM_ControlMode _tao_enumerator)
{
  return strm << static_cast< ::CORBA::ULong> (_tao_enumerator);
}

::CORBA::Boolean operator>> (TAO_InputCDR &strm, IF_EXE_M_R::ENUM_ControlMode & _tao_enumerator)
{
  ::CORBA::ULong _tao_temp = 0;
  ::CORBA::Boolean const _tao_success = strm >> _tao_temp;

  if (_tao_success)
    {
      _tao_enumerator = static_cast<IF_EXE_M_R::ENUM_ControlMode> (_tao_temp);
    }

  return _tao_success;
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_enum/cdr_op_cs.cpp:34


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (TAO_OutputCDR &strm, IF_EXE_M_R::ENUM_FOOPDirection _tao_enumerator)
{
  return strm << static_cast< ::CORBA::ULong> (_tao_enumerator);
}

::CORBA::Boolean operator>> (TAO_InputCDR &strm, IF_EXE_M_R::ENUM_FOOPDirection & _tao_enumerator)
{
  ::CORBA::ULong _tao_temp = 0;
  ::CORBA::Boolean const _tao_success = strm >> _tao_temp;

  if (_tao_success)
    {
      _tao_enumerator = static_cast<IF_EXE_M_R::ENUM_FOOPDirection> (_tao_temp);
    }

  return _tao_success;
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_enum/cdr_op_cs.cpp:34


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (TAO_OutputCDR &strm, IF_EXE_M_R::ENUM_QFOOODirection _tao_enumerator)
{
  return strm << static_cast< ::CORBA::ULong> (_tao_enumerator);
}

::CORBA::Boolean operator>> (TAO_InputCDR &strm, IF_EXE_M_R::ENUM_QFOOODirection & _tao_enumerator)
{
  ::CORBA::ULong _tao_temp = 0;
  ::CORBA::Boolean const _tao_success = strm >> _tao_temp;

  if (_tao_success)
    {
      _tao_enumerator = static_cast<IF_EXE_M_R::ENUM_QFOOODirection> (_tao_temp);
    }

  return _tao_success;
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_enum/cdr_op_cs.cpp:34


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (TAO_OutputCDR &strm, IF_EXE_M_R::ENUM_FOONDirection _tao_enumerator)
{
  return strm << static_cast< ::CORBA::ULong> (_tao_enumerator);
}

::CORBA::Boolean operator>> (TAO_InputCDR &strm, IF_EXE_M_R::ENUM_FOONDirection & _tao_enumerator)
{
  ::CORBA::ULong _tao_temp = 0;
  ::CORBA::Boolean const _tao_success = strm >> _tao_temp;

  if (_tao_success)
    {
      _tao_enumerator = static_cast<IF_EXE_M_R::ENUM_FOONDirection> (_tao_temp);
    }

  return _tao_success;
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_enum/cdr_op_cs.cpp:34


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (TAO_OutputCDR &strm, IF_EXE_M_R::ENUM_FOOMMode _tao_enumerator)
{
  return strm << static_cast< ::CORBA::ULong> (_tao_enumerator);
}

::CORBA::Boolean operator>> (TAO_InputCDR &strm, IF_EXE_M_R::ENUM_FOOMMode & _tao_enumerator)
{
  ::CORBA::ULong _tao_temp = 0;
  ::CORBA::Boolean const _tao_success = strm >> _tao_temp;

  if (_tao_success)
    {
      _tao_enumerator = static_cast<IF_EXE_M_R::ENUM_FOOMMode> (_tao_temp);
    }

  return _tao_success;
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_enum/cdr_op_cs.cpp:34


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (TAO_OutputCDR &strm, IF_EXE_M_R::ENUM_TransitionStatus _tao_enumerator)
{
  return strm << static_cast< ::CORBA::ULong> (_tao_enumerator);
}

::CORBA::Boolean operator>> (TAO_InputCDR &strm, IF_EXE_M_R::ENUM_TransitionStatus & _tao_enumerator)
{
  ::CORBA::ULong _tao_temp = 0;
  ::CORBA::Boolean const _tao_success = strm >> _tao_temp;

  if (_tao_success)
    {
      _tao_enumerator = static_cast<IF_EXE_M_R::ENUM_TransitionStatus> (_tao_temp);
    }

  return _tao_success;
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_enum/cdr_op_cs.cpp:34


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (TAO_OutputCDR &strm, IF_EXE_M_R::ENUM_ParameterType _tao_enumerator)
{
  return strm << static_cast< ::CORBA::ULong> (_tao_enumerator);
}

::CORBA::Boolean operator>> (TAO_InputCDR &strm, IF_EXE_M_R::ENUM_ParameterType & _tao_enumerator)
{
  ::CORBA::ULong _tao_temp = 0;
  ::CORBA::Boolean const _tao_success = strm >> _tao_temp;

  if (_tao_success)
    {
      _tao_enumerator = static_cast<IF_EXE_M_R::ENUM_ParameterType> (_tao_temp);
    }

  return _tao_success;
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_enum/cdr_op_cs.cpp:34


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (TAO_OutputCDR &strm, IF_EXE_M_R::ENUM_FOOHType _tao_enumerator)
{
  return strm << static_cast< ::CORBA::ULong> (_tao_enumerator);
}

::CORBA::Boolean operator>> (TAO_InputCDR &strm, IF_EXE_M_R::ENUM_FOOHType & _tao_enumerator)
{
  ::CORBA::ULong _tao_temp = 0;
  ::CORBA::Boolean const _tao_success = strm >> _tao_temp;

  if (_tao_success)
    {
      _tao_enumerator = static_cast<IF_EXE_M_R::ENUM_FOOHType> (_tao_temp);
    }

  return _tao_success;
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_enum/cdr_op_cs.cpp:34


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (TAO_OutputCDR &strm, IF_EXE_M_R::ENUM_FOOKType _tao_enumerator)
{
  return strm << static_cast< ::CORBA::ULong> (_tao_enumerator);
}

::CORBA::Boolean operator>> (TAO_InputCDR &strm, IF_EXE_M_R::ENUM_FOOKType & _tao_enumerator)
{
  ::CORBA::ULong _tao_temp = 0;
  ::CORBA::Boolean const _tao_success = strm >> _tao_temp;

  if (_tao_success)
    {
      _tao_enumerator = static_cast<IF_EXE_M_R::ENUM_FOOKType> (_tao_temp);
    }

  return _tao_success;
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_enum/cdr_op_cs.cpp:34


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (TAO_OutputCDR &strm, IF_EXE_M_R::ENUM_CL_FOOSMode _tao_enumerator)
{
  return strm << static_cast< ::CORBA::ULong> (_tao_enumerator);
}

::CORBA::Boolean operator>> (TAO_InputCDR &strm, IF_EXE_M_R::ENUM_CL_FOOSMode & _tao_enumerator)
{
  ::CORBA::ULong _tao_temp = 0;
  ::CORBA::Boolean const _tao_success = strm >> _tao_temp;

  if (_tao_success)
    {
      _tao_enumerator = static_cast<IF_EXE_M_R::ENUM_CL_FOOSMode> (_tao_temp);
    }

  return _tao_success;
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_enum/cdr_op_cs.cpp:34


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (TAO_OutputCDR &strm, IF_EXE_M_R::ENUM_FOOLSide _tao_enumerator)
{
  return strm << static_cast< ::CORBA::ULong> (_tao_enumerator);
}

::CORBA::Boolean operator>> (TAO_InputCDR &strm, IF_EXE_M_R::ENUM_FOOLSide & _tao_enumerator)
{
  ::CORBA::ULong _tao_temp = 0;
  ::CORBA::Boolean const _tao_success = strm >> _tao_temp;

  if (_tao_success)
    {
      _tao_enumerator = static_cast<IF_EXE_M_R::ENUM_FOOLSide> (_tao_temp);
    }

  return _tao_success;
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_enum/cdr_op_cs.cpp:34


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (TAO_OutputCDR &strm, IF_EXE_M_R::ENUM_FOOJType _tao_enumerator)
{
  return strm << static_cast< ::CORBA::ULong> (_tao_enumerator);
}

::CORBA::Boolean operator>> (TAO_InputCDR &strm, IF_EXE_M_R::ENUM_FOOJType & _tao_enumerator)
{
  ::CORBA::ULong _tao_temp = 0;
  ::CORBA::Boolean const _tao_success = strm >> _tao_temp;

  if (_tao_success)
    {
      _tao_enumerator = static_cast<IF_EXE_M_R::ENUM_FOOJType> (_tao_temp);
    }

  return _tao_success;
}

TAO_END_VERSIONED_NAMESPACE_DECL



