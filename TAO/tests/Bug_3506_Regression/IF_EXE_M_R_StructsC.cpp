// -*- C++ -*-
/**
 * Code generated by the The ACE ORB (TAO) IDL Compiler v2.4.1
 * TAO and the TAO IDL Compiler have been developed by:
 *       Center for Distributed Object Computing
 *       Washington University
 *       St. Louis, MO
 *       USA
 *       http://www.cs.wustl.edu/~schmidt/doc-center.html
 * and
 *       Distributed Object Computing Laboratory
 *       University of California at Irvine
 *       Irvine, CA
 *       USA
 * and
 *       Institute for Software Integrated Systems
 *       Vanderbilt University
 *       Nashville, TN
 *       USA
 *       http://www.isis.vanderbilt.edu/
 *
 * Information about TAO is available at:
 *     http://www.dre.vanderbilt.edu/~schmidt/TAO.html
 **/

// TAO_IDL - Generated from
// be/be_codegen.cpp:373


#include "IF_EXE_M_R_StructsC.h"
#include "tao/AnyTypeCode/Null_RefCount_Policy.h"
#include "tao/AnyTypeCode/TypeCode_Constants.h"
#include "tao/AnyTypeCode/Alias_TypeCode_Static.h"
#include "tao/AnyTypeCode/Objref_TypeCode_Static.h"
#include "tao/AnyTypeCode/Sequence_TypeCode_Static.h"
#include "tao/AnyTypeCode/String_TypeCode_Static.h"
#include "tao/AnyTypeCode/Struct_TypeCode_Static.h"
#include "tao/AnyTypeCode/TypeCode_Struct_Field.h"
#include "tao/AnyTypeCode/TypeCode_Case_T.h"
#include "tao/AnyTypeCode/Union_TypeCode_Static.h"
#include "tao/CDR.h"
#include "tao/Exception_Data.h"
#include "tao/Invocation_Adapter.h"
#include "tao/Object_T.h"
#include "tao/CDR.h"
#include "tao/AnyTypeCode/Any.h"
#include "tao/AnyTypeCode/Any_Impl_T.h"
#include "tao/AnyTypeCode/Any_Dual_Impl_T.h"
#include "ace/OS_NS_string.h"

#if !defined (__ACE_INLINE__)
#include "IF_EXE_M_R_StructsC.inl"
#endif /* !defined INLINE */

// TAO_IDL - Generated from
// be/be_visitor_typecode/struct_typecode.cpp:86

static TAO::TypeCode::Struct_Field<
  char const *,
  ::CORBA::TypeCode_ptr const *> const
    _tao_fields_IF_EXE_M_R_CORBA_LatLongFOOB[] =
      {
        { "latitude", &CORBA::_tc_double },
        { "longitude", &CORBA::_tc_double },
        { "FOOB", &CORBA::_tc_double }
      };

static TAO::TypeCode::Struct<
  char const *,
  ::CORBA::TypeCode_ptr const *,
  TAO::TypeCode::Struct_Field<
    char const *,
    ::CORBA::TypeCode_ptr const *> const *,
  TAO::Null_RefCount_Policy>
_tao_tc_IF_EXE_M_R_CORBA_LatLongFOOB (
  ::CORBA::tk_struct,
  "IDL:IF_EXE_M_R/CORBA_LatLongFOOB:1.0",
  "CORBA_LatLongFOOB",
  _tao_fields_IF_EXE_M_R_CORBA_LatLongFOOB,
  3);


namespace IF_EXE_M_R
{
  ::CORBA::TypeCode_ptr const _tc_CORBA_LatLongFOOB =
    &_tao_tc_IF_EXE_M_R_CORBA_LatLongFOOB;
}

// TAO_IDL - Generated from
// be/be_visitor_structure/structure_cs.cpp:56

void
IF_EXE_M_R::CORBA_LatLongFOOB::_tao_any_destructor (
    void *_tao_void_pointer)
{
  CORBA_LatLongFOOB *_tao_tmp_pointer =
    static_cast<CORBA_LatLongFOOB *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

// TAO_IDL - Generated from
// be/be_visitor_typecode/struct_typecode.cpp:86

static TAO::TypeCode::Struct_Field<
  char const *,
  ::CORBA::TypeCode_ptr const *> const
    _tao_fields_IF_EXE_M_R_CORBA_PositionXYZ[] =
      {
        { "x", &CORBA::_tc_double },
        { "y", &CORBA::_tc_double },
        { "z", &CORBA::_tc_double }
      };

static TAO::TypeCode::Struct<
  char const *,
  ::CORBA::TypeCode_ptr const *,
  TAO::TypeCode::Struct_Field<
    char const *,
    ::CORBA::TypeCode_ptr const *> const *,
  TAO::Null_RefCount_Policy>
_tao_tc_IF_EXE_M_R_CORBA_PositionXYZ (
  ::CORBA::tk_struct,
  "IDL:IF_EXE_M_R/CORBA_PositionXYZ:1.0",
  "CORBA_PositionXYZ",
  _tao_fields_IF_EXE_M_R_CORBA_PositionXYZ,
  3);


namespace IF_EXE_M_R
{
  ::CORBA::TypeCode_ptr const _tc_CORBA_PositionXYZ =
    &_tao_tc_IF_EXE_M_R_CORBA_PositionXYZ;
}

// TAO_IDL - Generated from
// be/be_visitor_structure/structure_cs.cpp:56

void
IF_EXE_M_R::CORBA_PositionXYZ::_tao_any_destructor (
    void *_tao_void_pointer)
{
  CORBA_PositionXYZ *_tao_tmp_pointer =
    static_cast<CORBA_PositionXYZ *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

// TAO_IDL - Generated from
// be/be_visitor_typecode/struct_typecode.cpp:86

static TAO::TypeCode::Struct_Field<
  char const *,
  ::CORBA::TypeCode_ptr const *> const
    _tao_fields_IF_EXE_M_R_CORBA_FOOGIMCMS[] =
      {
        { "FOOBReference", &IF_EXE_M_R::_tc_FOOBMode_E },
        { "FOOIID", &CORBA::_tc_string },
        { "FOOAReference", &IF_EXE_M_R::_tc_FOOAMode_E },
        { "FOOINotice", &CORBA::_tc_string },
        { "FOOD", &IF_EXE_M_R::_tc_ENUM_FOOD },
        { "startPosRemark", &CORBA::_tc_string },
        { "manFOOA", &CORBA::_tc_double },
        { "manStartCoverage", &IF_EXE_M_R::_tc_ENUM_FOOF },
        { "endPosRemark", &CORBA::_tc_string },
        { "manEndCoverage", &IF_EXE_M_R::_tc_ENUM_FOOF },
        { "datasetVersion", &CORBA::_tc_ulong },
        { "maximum2EconomyAngle", &CORBA::_tc_double },
        { "startPosition", &IF_EXE_M_R::_tc_CORBA_LatLongFOOB },
        { "endPosition", &IF_EXE_M_R::_tc_CORBA_LatLongFOOB }
      };

static TAO::TypeCode::Struct<
  char const *,
  ::CORBA::TypeCode_ptr const *,
  TAO::TypeCode::Struct_Field<
    char const *,
    ::CORBA::TypeCode_ptr const *> const *,
  TAO::Null_RefCount_Policy>
_tao_tc_IF_EXE_M_R_CORBA_FOOGIMCMS (
  ::CORBA::tk_struct,
  "IDL:IF_EXE_M_R/CORBA_FOOGIMCMS:1.0",
  "CORBA_FOOGIMCMS",
  _tao_fields_IF_EXE_M_R_CORBA_FOOGIMCMS,
  14);


namespace IF_EXE_M_R
{
  ::CORBA::TypeCode_ptr const _tc_CORBA_FOOGIMCMS =
    &_tao_tc_IF_EXE_M_R_CORBA_FOOGIMCMS;
}

// TAO_IDL - Generated from
// be/be_visitor_structure/structure_cs.cpp:56

void
IF_EXE_M_R::CORBA_FOOGIMCMS::_tao_any_destructor (
    void *_tao_void_pointer)
{
  CORBA_FOOGIMCMS *_tao_tmp_pointer =
    static_cast<CORBA_FOOGIMCMS *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

// TAO_IDL - Generated from
// be/be_visitor_typecode/struct_typecode.cpp:86

static TAO::TypeCode::Struct_Field<
  char const *,
  ::CORBA::TypeCode_ptr const *> const
    _tao_fields_IF_EXE_M_R_CORBA_FOOMControl[] =
      {
        { "ecName", &CORBA::_tc_string },
        { "ecMode", &IF_EXE_M_R::_tc_ENUM_FOOMMode },
        { "ecParameter", &CORBA::_tc_double },
        { "ecCommand1", &CORBA::_tc_string },
        { "ecCommand2", &CORBA::_tc_string }
      };

static TAO::TypeCode::Struct<
  char const *,
  ::CORBA::TypeCode_ptr const *,
  TAO::TypeCode::Struct_Field<
    char const *,
    ::CORBA::TypeCode_ptr const *> const *,
  TAO::Null_RefCount_Policy>
_tao_tc_IF_EXE_M_R_CORBA_FOOMControl (
  ::CORBA::tk_struct,
  "IDL:IF_EXE_M_R/CORBA_FOOMControl:1.0",
  "CORBA_FOOMControl",
  _tao_fields_IF_EXE_M_R_CORBA_FOOMControl,
  5);


namespace IF_EXE_M_R
{
  ::CORBA::TypeCode_ptr const _tc_CORBA_FOOMControl =
    &_tao_tc_IF_EXE_M_R_CORBA_FOOMControl;
}

// TAO_IDL - Generated from
// be/be_visitor_structure/structure_cs.cpp:56

void
IF_EXE_M_R::CORBA_FOOMControl::_tao_any_destructor (
    void *_tao_void_pointer)
{
  CORBA_FOOMControl *_tao_tmp_pointer =
    static_cast<CORBA_FOOMControl *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

// TAO_IDL - Generated from
// be/be_visitor_sequence/sequence_cs.cpp:70

#if !defined (_IF_EXE_M_R_CORBA_FOOMLIST_CS_)
#define _IF_EXE_M_R_CORBA_FOOMLIST_CS_

IF_EXE_M_R::CORBA_FOOMList::CORBA_FOOMList (void)
{}

IF_EXE_M_R::CORBA_FOOMList::CORBA_FOOMList (
    ::CORBA::ULong max)
  : ::TAO::unbounded_value_sequence<
        CORBA_FOOMControl
      > (max)
{}

IF_EXE_M_R::CORBA_FOOMList::CORBA_FOOMList (
    ::CORBA::ULong max,
    ::CORBA::ULong length,
    IF_EXE_M_R::CORBA_FOOMControl * buffer,
    ::CORBA::Boolean release
  )
  : ::TAO::unbounded_value_sequence<
        CORBA_FOOMControl
      >
    (max, length, buffer, release)
{}

IF_EXE_M_R::CORBA_FOOMList::CORBA_FOOMList (
    const CORBA_FOOMList &seq)
  : ::TAO::unbounded_value_sequence<
        CORBA_FOOMControl
      > (seq)
{}

IF_EXE_M_R::CORBA_FOOMList::~CORBA_FOOMList (void)
{}

void IF_EXE_M_R::CORBA_FOOMList::_tao_any_destructor (
    void * _tao_void_pointer)
{
  CORBA_FOOMList * _tao_tmp_pointer =
    static_cast<CORBA_FOOMList *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

#endif /* end #if !defined */

// TAO_IDL - Generated from
// be/be_visitor_typecode/alias_typecode.cpp:49



// TAO_IDL - Generated from
// be/be_visitor_typecode/typecode_defn.cpp:461


#ifndef _TAO_TYPECODE_IF_EXE_M_R_CORBA_FOOMList_GUARD
#define _TAO_TYPECODE_IF_EXE_M_R_CORBA_FOOMList_GUARD

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

namespace TAO
{
  namespace TypeCode
  {
    namespace
    {
      TAO::TypeCode::Sequence< ::CORBA::TypeCode_ptr const *,
                              TAO::Null_RefCount_Policy>
        IF_EXE_M_R_CORBA_FOOMList_0 (
          ::CORBA::tk_sequence,
          &IF_EXE_M_R::_tc_CORBA_FOOMControl,
          0U);

      ::CORBA::TypeCode_ptr const tc_IF_EXE_M_R_CORBA_FOOMList_0 =
        &IF_EXE_M_R_CORBA_FOOMList_0;
    }
  }
}

TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_TYPECODE_IF_EXE_M_R_CORBA_FOOMList_GUARD */

static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_IF_EXE_M_R_CORBA_FOOMList (
    ::CORBA::tk_alias,
    "IDL:IF_EXE_M_R/CORBA_FOOMList:1.0",
    "CORBA_FOOMList",
    &TAO::TypeCode::tc_IF_EXE_M_R_CORBA_FOOMList_0);


namespace IF_EXE_M_R
{
  ::CORBA::TypeCode_ptr const _tc_CORBA_FOOMList =
    &_tao_tc_IF_EXE_M_R_CORBA_FOOMList;
}

// TAO_IDL - Generated from
// be/be_visitor_typecode/struct_typecode.cpp:86



// TAO_IDL - Generated from
// be/be_visitor_typecode/typecode_defn.cpp:461

static TAO::TypeCode::Struct_Field<
  char const *,
  ::CORBA::TypeCode_ptr const *> const
    _tao_fields_IF_EXE_M_R_CORBA_BaseArc[] =
      {
        { "FOOD", &IF_EXE_M_R::_tc_ENUM_FOOD },
        { "FOOIID", &CORBA::_tc_string },
        { "startPosition", &IF_EXE_M_R::_tc_CORBA_LatLongFOOB },
        { "maxHorizontalFOOU", &CORBA::_tc_ulong },
        { "endPosition", &IF_EXE_M_R::_tc_CORBA_LatLongFOOB },
        { "maxVerticalFOOU", &CORBA::_tc_ulong },
        { "arcMiddlePosition", &IF_EXE_M_R::_tc_CORBA_LatLongFOOB },
        { "averageFOOHFOOB", &CORBA::_tc_double },
        { "FOOBReference", &IF_EXE_M_R::_tc_FOOBMode_E },
        { "datasetVersion", &CORBA::_tc_ulong },
        { "startFOOA", &CORBA::_tc_double },
        { "endFOOA", &CORBA::_tc_double },
        { "FOOTDistance", &CORBA::_tc_double },
        { "FOOTDuration", &CORBA::_tc_double },
        { "FOOAReference", &IF_EXE_M_R::_tc_FOOAMode_E },
        { "FOOTEnergyConsum", &CORBA::_tc_double },
        { "FOOAControlMode", &IF_EXE_M_R::_tc_ENUM_ControlMode },
        { "arcDirection", &IF_EXE_M_R::_tc_ENUM_FOONDirection },
        { "economyMode", &IF_EXE_M_R::_tc_ENUM_Selection },
        { "transitionStatus", &IF_EXE_M_R::_tc_ENUM_TransitionStatus },
        { "cl_FOOSMode", &IF_EXE_M_R::_tc_ENUM_CL_FOOSMode },
        { "activeComponents", &IF_EXE_M_R::_tc_CORBA_FOOMList },
        { "FOOKTypeStart", &IF_EXE_M_R::_tc_ENUM_FOOKType },
        { "FOOKTypeEnd", &IF_EXE_M_R::_tc_ENUM_FOOKType }
      };

static TAO::TypeCode::Struct<
  char const *,
  ::CORBA::TypeCode_ptr const *,
  TAO::TypeCode::Struct_Field<
    char const *,
    ::CORBA::TypeCode_ptr const *> const *,
  TAO::Null_RefCount_Policy>
_tao_tc_IF_EXE_M_R_CORBA_BaseArc (
  ::CORBA::tk_struct,
  "IDL:IF_EXE_M_R/CORBA_BaseArc:1.0",
  "CORBA_BaseArc",
  _tao_fields_IF_EXE_M_R_CORBA_BaseArc,
  24);


namespace IF_EXE_M_R
{
  ::CORBA::TypeCode_ptr const _tc_CORBA_BaseArc =
    &_tao_tc_IF_EXE_M_R_CORBA_BaseArc;
}

// TAO_IDL - Generated from
// be/be_visitor_structure/structure_cs.cpp:56

void
IF_EXE_M_R::CORBA_BaseArc::_tao_any_destructor (
    void *_tao_void_pointer)
{
  CORBA_BaseArc *_tao_tmp_pointer =
    static_cast<CORBA_BaseArc *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

// TAO_IDL - Generated from
// be/be_visitor_typecode/struct_typecode.cpp:86



// TAO_IDL - Generated from
// be/be_visitor_typecode/typecode_defn.cpp:461

static TAO::TypeCode::Struct_Field<
  char const *,
  ::CORBA::TypeCode_ptr const *> const
    _tao_fields_IF_EXE_M_R_CORBA_BaseCircle[] =
      {
        { "FOOD", &IF_EXE_M_R::_tc_ENUM_FOOD },
        { "FOOIID", &CORBA::_tc_string },
        { "maxHorizontalFOOU", &CORBA::_tc_ulong },
        { "startPosition", &IF_EXE_M_R::_tc_CORBA_LatLongFOOB },
        { "maxVerticalFOOU", &CORBA::_tc_ulong },
        { "endPosition", &IF_EXE_M_R::_tc_CORBA_LatLongFOOB },
        { "averageFOOHFOOB", &CORBA::_tc_double },
        { "circleMiddlePosition", &IF_EXE_M_R::_tc_CORBA_LatLongFOOB },
        { "datasetVersion", &CORBA::_tc_ulong },
        { "FOOBReference", &IF_EXE_M_R::_tc_FOOBMode_E },
        { "FOONFOOA", &CORBA::_tc_double },
        { "FOOTDistance", &CORBA::_tc_double },
        { "FOOTDuration", &CORBA::_tc_double },
        { "FOOAReference", &IF_EXE_M_R::_tc_FOOAMode_E },
        { "FOOTEnergyConsum", &CORBA::_tc_double },
        { "circleDirection", &IF_EXE_M_R::_tc_ENUM_FOONDirection },
        { "economyMode", &IF_EXE_M_R::_tc_ENUM_Selection },
        { "transitionStatus", &IF_EXE_M_R::_tc_ENUM_TransitionStatus },
        { "activeComponents", &IF_EXE_M_R::_tc_CORBA_FOOMList },
        { "cl_FOOSMode", &IF_EXE_M_R::_tc_ENUM_CL_FOOSMode },
        { "FOOKTypeStart", &IF_EXE_M_R::_tc_ENUM_FOOKType },
        { "FOOKTypeEnd", &IF_EXE_M_R::_tc_ENUM_FOOKType }
      };

static TAO::TypeCode::Struct<
  char const *,
  ::CORBA::TypeCode_ptr const *,
  TAO::TypeCode::Struct_Field<
    char const *,
    ::CORBA::TypeCode_ptr const *> const *,
  TAO::Null_RefCount_Policy>
_tao_tc_IF_EXE_M_R_CORBA_BaseCircle (
  ::CORBA::tk_struct,
  "IDL:IF_EXE_M_R/CORBA_BaseCircle:1.0",
  "CORBA_BaseCircle",
  _tao_fields_IF_EXE_M_R_CORBA_BaseCircle,
  22);


namespace IF_EXE_M_R
{
  ::CORBA::TypeCode_ptr const _tc_CORBA_BaseCircle =
    &_tao_tc_IF_EXE_M_R_CORBA_BaseCircle;
}

// TAO_IDL - Generated from
// be/be_visitor_structure/structure_cs.cpp:56

void
IF_EXE_M_R::CORBA_BaseCircle::_tao_any_destructor (
    void *_tao_void_pointer)
{
  CORBA_BaseCircle *_tao_tmp_pointer =
    static_cast<CORBA_BaseCircle *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

// TAO_IDL - Generated from
// be/be_visitor_typecode/struct_typecode.cpp:86



// TAO_IDL - Generated from
// be/be_visitor_typecode/typecode_defn.cpp:461

static TAO::TypeCode::Struct_Field<
  char const *,
  ::CORBA::TypeCode_ptr const *> const
    _tao_fields_IF_EXE_M_R_CORBA_BaseCross[] =
      {
        { "FOOIID", &CORBA::_tc_string },
        { "FOOD", &IF_EXE_M_R::_tc_ENUM_FOOD },
        { "maxHorizontalFOOU", &CORBA::_tc_ulong },
        { "startPosition", &IF_EXE_M_R::_tc_CORBA_LatLongFOOB },
        { "maxVerticalFOOU", &CORBA::_tc_ulong },
        { "endPosition", &IF_EXE_M_R::_tc_CORBA_LatLongFOOB },
        { "crossFOOA", &CORBA::_tc_double },
        { "FOOG1EndPosition", &IF_EXE_M_R::_tc_CORBA_LatLongFOOB },
        { "circle1CentrePosition", &IF_EXE_M_R::_tc_CORBA_LatLongFOOB },
        { "averageFOOHFOOB", &CORBA::_tc_double },
        { "crossPitchAngle", &CORBA::_tc_double },
        { "FOOG2StartPosition", &IF_EXE_M_R::_tc_CORBA_LatLongFOOB },
        { "datasetVersion", &CORBA::_tc_ulong },
        { "FOOG2EndPosition", &IF_EXE_M_R::_tc_CORBA_LatLongFOOB },
        { "FOOTDistance", &CORBA::_tc_double },
        { "circle2CentrePosition", &IF_EXE_M_R::_tc_CORBA_LatLongFOOB },
        { "FOOTDuration", &CORBA::_tc_double },
        { "FOOG3StartPosition", &IF_EXE_M_R::_tc_CORBA_LatLongFOOB },
        { "FOOTEnergyConsum", &CORBA::_tc_double },
        { "FOOBReferenceStartPosition", &IF_EXE_M_R::_tc_FOOBMode_E },
        { "FOOAReference", &IF_EXE_M_R::_tc_FOOAMode_E },
        { "economyMode", &IF_EXE_M_R::_tc_ENUM_Selection },
        { "transitionStatus", &IF_EXE_M_R::_tc_ENUM_TransitionStatus },
        { "activeComponents", &IF_EXE_M_R::_tc_CORBA_FOOMList },
        { "crossReachEndPosition", &IF_EXE_M_R::_tc_ENUM_Selection },
        { "FOOBReferenceEndPosition", &IF_EXE_M_R::_tc_FOOBMode_E },
        { "cl_FOOSMode", &IF_EXE_M_R::_tc_ENUM_CL_FOOSMode },
        { "FOOKTypeStart", &IF_EXE_M_R::_tc_ENUM_FOOKType },
        { "FOOKTypeEnd", &IF_EXE_M_R::_tc_ENUM_FOOKType }
      };

static TAO::TypeCode::Struct<
  char const *,
  ::CORBA::TypeCode_ptr const *,
  TAO::TypeCode::Struct_Field<
    char const *,
    ::CORBA::TypeCode_ptr const *> const *,
  TAO::Null_RefCount_Policy>
_tao_tc_IF_EXE_M_R_CORBA_BaseCross (
  ::CORBA::tk_struct,
  "IDL:IF_EXE_M_R/CORBA_BaseCross:1.0",
  "CORBA_BaseCross",
  _tao_fields_IF_EXE_M_R_CORBA_BaseCross,
  29);


namespace IF_EXE_M_R
{
  ::CORBA::TypeCode_ptr const _tc_CORBA_BaseCross =
    &_tao_tc_IF_EXE_M_R_CORBA_BaseCross;
}

// TAO_IDL - Generated from
// be/be_visitor_structure/structure_cs.cpp:56

void
IF_EXE_M_R::CORBA_BaseCross::_tao_any_destructor (
    void *_tao_void_pointer)
{
  CORBA_BaseCross *_tao_tmp_pointer =
    static_cast<CORBA_BaseCross *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

// TAO_IDL - Generated from
// be/be_visitor_typecode/struct_typecode.cpp:86



// TAO_IDL - Generated from
// be/be_visitor_typecode/typecode_defn.cpp:461

static TAO::TypeCode::Struct_Field<
  char const *,
  ::CORBA::TypeCode_ptr const *> const
    _tao_fields_IF_EXE_M_R_CORBA_BaseFOOG[] =
      {
        { "FOOD", &IF_EXE_M_R::_tc_ENUM_FOOD },
        { "FOOIID", &CORBA::_tc_string },
        { "startPosition", &IF_EXE_M_R::_tc_CORBA_LatLongFOOB },
        { "endPosition", &IF_EXE_M_R::_tc_CORBA_LatLongFOOB },
        { "FOOBReferenceStartPosition", &IF_EXE_M_R::_tc_FOOBMode_E },
        { "averageFOOHFOOB", &CORBA::_tc_double },
        { "FOOBControlMode", &IF_EXE_M_R::_tc_ENUM_ControlMode },
        { "datasetVersion", &CORBA::_tc_ulong },
        { "maxHorizontalFOOU", &CORBA::_tc_ulong },
        { "maxVerticalFOOU", &CORBA::_tc_ulong },
        { "FOOTDistance", &CORBA::_tc_double },
        { "startFOOA", &CORBA::_tc_double },
        { "FOOTDuration", &CORBA::_tc_double },
        { "endFOOA", &CORBA::_tc_double },
        { "FOOTEnergyConsum", &CORBA::_tc_double },
        { "FOOAReference", &IF_EXE_M_R::_tc_FOOAMode_E },
        { "FOOAControlMode", &IF_EXE_M_R::_tc_ENUM_ControlMode },
        { "FOOBReferenceEndPosition", &IF_EXE_M_R::_tc_FOOBMode_E },
        { "economyMode", &IF_EXE_M_R::_tc_ENUM_Selection },
        { "cl_FOOSMode", &IF_EXE_M_R::_tc_ENUM_CL_FOOSMode },
        { "transitionStatus", &IF_EXE_M_R::_tc_ENUM_TransitionStatus },
        { "FOOKTypeStart", &IF_EXE_M_R::_tc_ENUM_FOOKType },
        { "activeComponents", &IF_EXE_M_R::_tc_CORBA_FOOMList },
        { "FOOKTypeEnd", &IF_EXE_M_R::_tc_ENUM_FOOKType }
      };

static TAO::TypeCode::Struct<
  char const *,
  ::CORBA::TypeCode_ptr const *,
  TAO::TypeCode::Struct_Field<
    char const *,
    ::CORBA::TypeCode_ptr const *> const *,
  TAO::Null_RefCount_Policy>
_tao_tc_IF_EXE_M_R_CORBA_BaseFOOG (
  ::CORBA::tk_struct,
  "IDL:IF_EXE_M_R/CORBA_BaseFOOG:1.0",
  "CORBA_BaseFOOG",
  _tao_fields_IF_EXE_M_R_CORBA_BaseFOOG,
  24);


namespace IF_EXE_M_R
{
  ::CORBA::TypeCode_ptr const _tc_CORBA_BaseFOOG =
    &_tao_tc_IF_EXE_M_R_CORBA_BaseFOOG;
}

// TAO_IDL - Generated from
// be/be_visitor_structure/structure_cs.cpp:56

void
IF_EXE_M_R::CORBA_BaseFOOG::_tao_any_destructor (
    void *_tao_void_pointer)
{
  CORBA_BaseFOOG *_tao_tmp_pointer =
    static_cast<CORBA_BaseFOOG *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

// TAO_IDL - Generated from
// be/be_visitor_union/union_cs.cpp:76

IF_EXE_M_R::CORBA_FOOIData::CORBA_FOOIData (void)
{
  ACE_OS::memset (&this->u_, 0, sizeof (this->u_));
  this->disc_ = IF_EXE_M_R::FOOH_FOOG;
}

IF_EXE_M_R::CORBA_FOOIData::CORBA_FOOIData (const ::IF_EXE_M_R::CORBA_FOOIData &u)
{
  this->disc_ = u.disc_;
  switch (this->disc_)
  {
    case IF_EXE_M_R::IMCMS_FOOG:
    {
      if (u.u_.manFOOGIMCMS_ == 0)
        {
          this->u_.manFOOGIMCMS_ = 0;
        }
      else
        {
          ACE_NEW (
              this->u_.manFOOGIMCMS_,
              IF_EXE_M_R::CORBA_FOOGIMCMS (*u.u_.manFOOGIMCMS_)
            );
        }
    }
    break;
    case IF_EXE_M_R::BASE_ARC:
    {
      if (u.u_.FOOVArc_ == 0)
        {
          this->u_.FOOVArc_ = 0;
        }
      else
        {
          ACE_NEW (
              this->u_.FOOVArc_,
              IF_EXE_M_R::CORBA_BaseArc (*u.u_.FOOVArc_)
            );
        }
    }
    break;
    case IF_EXE_M_R::BASE_CIRCLE:
    {
      if (u.u_.FOOVCircle_ == 0)
        {
          this->u_.FOOVCircle_ = 0;
        }
      else
        {
          ACE_NEW (
              this->u_.FOOVCircle_,
              IF_EXE_M_R::CORBA_BaseCircle (*u.u_.FOOVCircle_)
            );
        }
    }
    break;
    case IF_EXE_M_R::BASE_CROSS:
    {
      if (u.u_.FOOVCross_ == 0)
        {
          this->u_.FOOVCross_ = 0;
        }
      else
        {
          ACE_NEW (
              this->u_.FOOVCross_,
              IF_EXE_M_R::CORBA_BaseCross (*u.u_.FOOVCross_)
            );
        }
    }
    break;
    case IF_EXE_M_R::BASE_FOOG:
    {
      if (u.u_.FOOVFOOG_ == 0)
        {
          this->u_.FOOVFOOG_ = 0;
        }
      else
        {
          ACE_NEW (
              this->u_.FOOVFOOG_,
              IF_EXE_M_R::CORBA_BaseFOOG (*u.u_.FOOVFOOG_)
            );
        }
    }
    break;
    default:
    break;
  }
}

IF_EXE_M_R::CORBA_FOOIData::~CORBA_FOOIData (void)
{
  // Finalize.
  this->_reset ();
}

void IF_EXE_M_R::CORBA_FOOIData::_tao_any_destructor (void *_tao_void_pointer)
{
  CORBA_FOOIData *tmp =
    static_cast<CORBA_FOOIData *> (_tao_void_pointer);
  delete tmp;
}

IF_EXE_M_R::CORBA_FOOIData &
IF_EXE_M_R::CORBA_FOOIData::operator= (const ::IF_EXE_M_R::CORBA_FOOIData &u)
{
  if (&u == this)
    {
      return *this;
    }

  this->_reset ();
  this->disc_ = u.disc_;

  switch (this->disc_)
  {
    case IF_EXE_M_R::IMCMS_FOOG:
    {
      if (u.u_.manFOOGIMCMS_ == 0)
        {
          this->u_.manFOOGIMCMS_ = 0;
        }
      else
        {
          ACE_NEW_RETURN (
              this->u_.manFOOGIMCMS_,
              IF_EXE_M_R::CORBA_FOOGIMCMS (*u.u_.manFOOGIMCMS_),
              *this
            );
        }
    }
    break;
    case IF_EXE_M_R::BASE_ARC:
    {
      if (u.u_.FOOVArc_ == 0)
        {
          this->u_.FOOVArc_ = 0;
        }
      else
        {
          ACE_NEW_RETURN (
              this->u_.FOOVArc_,
              IF_EXE_M_R::CORBA_BaseArc (*u.u_.FOOVArc_),
              *this
            );
        }
    }
    break;
    case IF_EXE_M_R::BASE_CIRCLE:
    {
      if (u.u_.FOOVCircle_ == 0)
        {
          this->u_.FOOVCircle_ = 0;
        }
      else
        {
          ACE_NEW_RETURN (
              this->u_.FOOVCircle_,
              IF_EXE_M_R::CORBA_BaseCircle (*u.u_.FOOVCircle_),
              *this
            );
        }
    }
    break;
    case IF_EXE_M_R::BASE_CROSS:
    {
      if (u.u_.FOOVCross_ == 0)
        {
          this->u_.FOOVCross_ = 0;
        }
      else
        {
          ACE_NEW_RETURN (
              this->u_.FOOVCross_,
              IF_EXE_M_R::CORBA_BaseCross (*u.u_.FOOVCross_),
              *this
            );
        }
    }
    break;
    case IF_EXE_M_R::BASE_FOOG:
    {
      if (u.u_.FOOVFOOG_ == 0)
        {
          this->u_.FOOVFOOG_ = 0;
        }
      else
        {
          ACE_NEW_RETURN (
              this->u_.FOOVFOOG_,
              IF_EXE_M_R::CORBA_BaseFOOG (*u.u_.FOOVFOOG_),
              *this
            );
        }
    }
    break;
    default:
    break;
  }

  return *this;
}

/// Reset method to reset old values of a union.
void IF_EXE_M_R::CORBA_FOOIData::_reset (void)
{
  switch (this->disc_)
  {

    case IF_EXE_M_R::IMCMS_FOOG:
      delete this->u_.manFOOGIMCMS_;
      this->u_.manFOOGIMCMS_ = 0;

    break;

    case IF_EXE_M_R::BASE_ARC:
      delete this->u_.FOOVArc_;
      this->u_.FOOVArc_ = 0;

    break;

    case IF_EXE_M_R::BASE_CIRCLE:
      delete this->u_.FOOVCircle_;
      this->u_.FOOVCircle_ = 0;

    break;

    case IF_EXE_M_R::BASE_CROSS:
      delete this->u_.FOOVCross_;
      this->u_.FOOVCross_ = 0;

    break;

    case IF_EXE_M_R::BASE_FOOG:
      delete this->u_.FOOVFOOG_;
      this->u_.FOOVFOOG_ = 0;

    break;

    default:
    break;
  }
}

// TAO_IDL - Generated from
// be/be_visitor_typecode/union_typecode.cpp:65

static TAO::TypeCode::Case_T<IF_EXE_M_R::ENUM_FOOD, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_IF_EXE_M_R_CORBA_FOOIData__0 (IF_EXE_M_R::IMCMS_FOOG, "manFOOGIMCMS", &IF_EXE_M_R::_tc_CORBA_FOOGIMCMS);
static TAO::TypeCode::Case_T<IF_EXE_M_R::ENUM_FOOD, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_IF_EXE_M_R_CORBA_FOOIData__1 (IF_EXE_M_R::BASE_ARC, "FOOVArc", &IF_EXE_M_R::_tc_CORBA_BaseArc);
static TAO::TypeCode::Case_T<IF_EXE_M_R::ENUM_FOOD, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_IF_EXE_M_R_CORBA_FOOIData__2 (IF_EXE_M_R::BASE_CIRCLE, "FOOVCircle", &IF_EXE_M_R::_tc_CORBA_BaseCircle);
static TAO::TypeCode::Case_T<IF_EXE_M_R::ENUM_FOOD, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_IF_EXE_M_R_CORBA_FOOIData__3 (IF_EXE_M_R::BASE_CROSS, "FOOVCross", &IF_EXE_M_R::_tc_CORBA_BaseCross);
static TAO::TypeCode::Case_T<IF_EXE_M_R::ENUM_FOOD, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_IF_EXE_M_R_CORBA_FOOIData__4 (IF_EXE_M_R::BASE_FOOG, "FOOVFOOG", &IF_EXE_M_R::_tc_CORBA_BaseFOOG);

static TAO::TypeCode::Case<char const *, ::CORBA::TypeCode_ptr const *> const * const _tao_cases_IF_EXE_M_R_CORBA_FOOIData[] =
  {
    &_tao_cases_IF_EXE_M_R_CORBA_FOOIData__0,
    &_tao_cases_IF_EXE_M_R_CORBA_FOOIData__1,
    &_tao_cases_IF_EXE_M_R_CORBA_FOOIData__2,
    &_tao_cases_IF_EXE_M_R_CORBA_FOOIData__3,
    &_tao_cases_IF_EXE_M_R_CORBA_FOOIData__4
  };

static TAO::TypeCode::Union<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::TypeCode::Case<char const *, ::CORBA::TypeCode_ptr const *> const * const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_IF_EXE_M_R_CORBA_FOOIData (
    "IDL:IF_EXE_M_R/CORBA_FOOIData:1.0",
    "CORBA_FOOIData",
    &IF_EXE_M_R::_tc_ENUM_FOOD,
    _tao_cases_IF_EXE_M_R_CORBA_FOOIData,
    sizeof (_tao_cases_IF_EXE_M_R_CORBA_FOOIData)/sizeof (_tao_cases_IF_EXE_M_R_CORBA_FOOIData[0]),
    -1);


namespace IF_EXE_M_R
{
  ::CORBA::TypeCode_ptr const _tc_CORBA_FOOIData =
    &_tao_tc_IF_EXE_M_R_CORBA_FOOIData;
}

// TAO_IDL - Generated from
// be/be_visitor_typecode/struct_typecode.cpp:86

static TAO::TypeCode::Struct_Field<
  char const *,
  ::CORBA::TypeCode_ptr const *> const
    _tao_fields_IF_EXE_M_R_CORBA_FOOIInPlan[] =
      {
        { "type", &IF_EXE_M_R::_tc_ENUM_FOOD },
        { "data", &IF_EXE_M_R::_tc_CORBA_FOOIData }
      };

static TAO::TypeCode::Struct<
  char const *,
  ::CORBA::TypeCode_ptr const *,
  TAO::TypeCode::Struct_Field<
    char const *,
    ::CORBA::TypeCode_ptr const *> const *,
  TAO::Null_RefCount_Policy>
_tao_tc_IF_EXE_M_R_CORBA_FOOIInPlan (
  ::CORBA::tk_struct,
  "IDL:IF_EXE_M_R/CORBA_FOOIInPlan:1.0",
  "CORBA_FOOIInPlan",
  _tao_fields_IF_EXE_M_R_CORBA_FOOIInPlan,
  2);


namespace IF_EXE_M_R
{
  ::CORBA::TypeCode_ptr const _tc_CORBA_FOOIInPlan =
    &_tao_tc_IF_EXE_M_R_CORBA_FOOIInPlan;
}

// TAO_IDL - Generated from
// be/be_visitor_structure/structure_cs.cpp:56

void
IF_EXE_M_R::CORBA_FOOIInPlan::_tao_any_destructor (
    void *_tao_void_pointer)
{
  CORBA_FOOIInPlan *_tao_tmp_pointer =
    static_cast<CORBA_FOOIInPlan *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

// TAO_IDL - Generated from
// be/be_visitor_sequence/sequence_cs.cpp:70

#if !defined (_IF_EXE_M_R_CORBA_FOOILIST_CS_)
#define _IF_EXE_M_R_CORBA_FOOILIST_CS_

IF_EXE_M_R::CORBA_FOOIList::CORBA_FOOIList (void)
{}

IF_EXE_M_R::CORBA_FOOIList::CORBA_FOOIList (
    ::CORBA::ULong max)
  : ::TAO::unbounded_value_sequence<
        CORBA_FOOIInPlan
      > (max)
{}

IF_EXE_M_R::CORBA_FOOIList::CORBA_FOOIList (
    ::CORBA::ULong max,
    ::CORBA::ULong length,
    IF_EXE_M_R::CORBA_FOOIInPlan * buffer,
    ::CORBA::Boolean release
  )
  : ::TAO::unbounded_value_sequence<
        CORBA_FOOIInPlan
      >
    (max, length, buffer, release)
{}

IF_EXE_M_R::CORBA_FOOIList::CORBA_FOOIList (
    const CORBA_FOOIList &seq)
  : ::TAO::unbounded_value_sequence<
        CORBA_FOOIInPlan
      > (seq)
{}

IF_EXE_M_R::CORBA_FOOIList::~CORBA_FOOIList (void)
{}

void IF_EXE_M_R::CORBA_FOOIList::_tao_any_destructor (
    void * _tao_void_pointer)
{
  CORBA_FOOIList * _tao_tmp_pointer =
    static_cast<CORBA_FOOIList *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

#endif /* end #if !defined */

// TAO_IDL - Generated from
// be/be_visitor_typecode/alias_typecode.cpp:49



// TAO_IDL - Generated from
// be/be_visitor_typecode/typecode_defn.cpp:461


#ifndef _TAO_TYPECODE_IF_EXE_M_R_CORBA_FOOIList_GUARD
#define _TAO_TYPECODE_IF_EXE_M_R_CORBA_FOOIList_GUARD

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

namespace TAO
{
  namespace TypeCode
  {
    namespace
    {
      TAO::TypeCode::Sequence< ::CORBA::TypeCode_ptr const *,
                              TAO::Null_RefCount_Policy>
        IF_EXE_M_R_CORBA_FOOIList_0 (
          ::CORBA::tk_sequence,
          &IF_EXE_M_R::_tc_CORBA_FOOIInPlan,
          0U);

      ::CORBA::TypeCode_ptr const tc_IF_EXE_M_R_CORBA_FOOIList_0 =
        &IF_EXE_M_R_CORBA_FOOIList_0;
    }
  }
}

TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_TYPECODE_IF_EXE_M_R_CORBA_FOOIList_GUARD */

static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_IF_EXE_M_R_CORBA_FOOIList (
    ::CORBA::tk_alias,
    "IDL:IF_EXE_M_R/CORBA_FOOIList:1.0",
    "CORBA_FOOIList",
    &TAO::TypeCode::tc_IF_EXE_M_R_CORBA_FOOIList_0);


namespace IF_EXE_M_R
{
  ::CORBA::TypeCode_ptr const _tc_CORBA_FOOIList =
    &_tao_tc_IF_EXE_M_R_CORBA_FOOIList;
}

// TAO_IDL - Generated from
// be/be_visitor_typecode/struct_typecode.cpp:86

static TAO::TypeCode::Struct_Field<
  char const *,
  ::CORBA::TypeCode_ptr const *> const
    _tao_fields_IF_EXE_M_R_CORBA_FOOJPosition[] =
      {
        { "FOOB", &CORBA::_tc_double },
        { "longitude", &CORBA::_tc_double },
        { "latitude", &CORBA::_tc_double },
        { "remark", &CORBA::_tc_string },
        { "FOOBReference", &IF_EXE_M_R::_tc_FOOBMode_E }
      };

static TAO::TypeCode::Struct<
  char const *,
  ::CORBA::TypeCode_ptr const *,
  TAO::TypeCode::Struct_Field<
    char const *,
    ::CORBA::TypeCode_ptr const *> const *,
  TAO::Null_RefCount_Policy>
_tao_tc_IF_EXE_M_R_CORBA_FOOJPosition (
  ::CORBA::tk_struct,
  "IDL:IF_EXE_M_R/CORBA_FOOJPosition:1.0",
  "CORBA_FOOJPosition",
  _tao_fields_IF_EXE_M_R_CORBA_FOOJPosition,
  5);


namespace IF_EXE_M_R
{
  ::CORBA::TypeCode_ptr const _tc_CORBA_FOOJPosition =
    &_tao_tc_IF_EXE_M_R_CORBA_FOOJPosition;
}

// TAO_IDL - Generated from
// be/be_visitor_structure/structure_cs.cpp:56

void
IF_EXE_M_R::CORBA_FOOJPosition::_tao_any_destructor (
    void *_tao_void_pointer)
{
  CORBA_FOOJPosition *_tao_tmp_pointer =
    static_cast<CORBA_FOOJPosition *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

// TAO_IDL - Generated from
// be/be_visitor_sequence/sequence_cs.cpp:70

#if !defined (_IF_EXE_M_R_CORBA_FOOJPOSLIST_CS_)
#define _IF_EXE_M_R_CORBA_FOOJPOSLIST_CS_

IF_EXE_M_R::CORBA_FOOJPosList::CORBA_FOOJPosList (void)
{}

IF_EXE_M_R::CORBA_FOOJPosList::CORBA_FOOJPosList (
    ::CORBA::ULong max)
  : ::TAO::unbounded_value_sequence<
        CORBA_FOOJPosition
      > (max)
{}

IF_EXE_M_R::CORBA_FOOJPosList::CORBA_FOOJPosList (
    ::CORBA::ULong max,
    ::CORBA::ULong length,
    IF_EXE_M_R::CORBA_FOOJPosition * buffer,
    ::CORBA::Boolean release
  )
  : ::TAO::unbounded_value_sequence<
        CORBA_FOOJPosition
      >
    (max, length, buffer, release)
{}

IF_EXE_M_R::CORBA_FOOJPosList::CORBA_FOOJPosList (
    const CORBA_FOOJPosList &seq)
  : ::TAO::unbounded_value_sequence<
        CORBA_FOOJPosition
      > (seq)
{}

IF_EXE_M_R::CORBA_FOOJPosList::~CORBA_FOOJPosList (void)
{}

void IF_EXE_M_R::CORBA_FOOJPosList::_tao_any_destructor (
    void * _tao_void_pointer)
{
  CORBA_FOOJPosList * _tao_tmp_pointer =
    static_cast<CORBA_FOOJPosList *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

#endif /* end #if !defined */

// TAO_IDL - Generated from
// be/be_visitor_typecode/alias_typecode.cpp:49



// TAO_IDL - Generated from
// be/be_visitor_typecode/typecode_defn.cpp:461


#ifndef _TAO_TYPECODE_IF_EXE_M_R_CORBA_FOOJPosList_GUARD
#define _TAO_TYPECODE_IF_EXE_M_R_CORBA_FOOJPosList_GUARD

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

namespace TAO
{
  namespace TypeCode
  {
    namespace
    {
      TAO::TypeCode::Sequence< ::CORBA::TypeCode_ptr const *,
                              TAO::Null_RefCount_Policy>
        IF_EXE_M_R_CORBA_FOOJPosList_0 (
          ::CORBA::tk_sequence,
          &IF_EXE_M_R::_tc_CORBA_FOOJPosition,
          0U);

      ::CORBA::TypeCode_ptr const tc_IF_EXE_M_R_CORBA_FOOJPosList_0 =
        &IF_EXE_M_R_CORBA_FOOJPosList_0;
    }
  }
}

TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_TYPECODE_IF_EXE_M_R_CORBA_FOOJPosList_GUARD */

static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_IF_EXE_M_R_CORBA_FOOJPosList (
    ::CORBA::tk_alias,
    "IDL:IF_EXE_M_R/CORBA_FOOJPosList:1.0",
    "CORBA_FOOJPosList",
    &TAO::TypeCode::tc_IF_EXE_M_R_CORBA_FOOJPosList_0);


namespace IF_EXE_M_R
{
  ::CORBA::TypeCode_ptr const _tc_CORBA_FOOJPosList =
    &_tao_tc_IF_EXE_M_R_CORBA_FOOJPosList;
}

// TAO_IDL - Generated from
// be/be_visitor_sequence/sequence_cs.cpp:70

#if !defined (_IF_EXE_M_R_LONG_SEQUENCE_CS_)
#define _IF_EXE_M_R_LONG_SEQUENCE_CS_

IF_EXE_M_R::long_sequence::long_sequence (void)
{}

IF_EXE_M_R::long_sequence::long_sequence (
    ::CORBA::ULong max)
  : ::TAO::unbounded_value_sequence<
        ::CORBA::Long
      > (max)
{}

IF_EXE_M_R::long_sequence::long_sequence (
    ::CORBA::ULong max,
    ::CORBA::ULong length,
    ::CORBA::Long * buffer,
    ::CORBA::Boolean release
  )
  : ::TAO::unbounded_value_sequence<
        ::CORBA::Long
      >
    (max, length, buffer, release)
{}

IF_EXE_M_R::long_sequence::long_sequence (
    const long_sequence &seq)
  : ::TAO::unbounded_value_sequence<
        ::CORBA::Long
      > (seq)
{}

IF_EXE_M_R::long_sequence::~long_sequence (void)
{}

void IF_EXE_M_R::long_sequence::_tao_any_destructor (
    void * _tao_void_pointer)
{
  long_sequence * _tao_tmp_pointer =
    static_cast<long_sequence *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

#endif /* end #if !defined */

// TAO_IDL - Generated from
// be/be_visitor_typecode/alias_typecode.cpp:49



// TAO_IDL - Generated from
// be/be_visitor_typecode/typecode_defn.cpp:461


#ifndef _TAO_TYPECODE_IF_EXE_M_R_long_sequence_GUARD
#define _TAO_TYPECODE_IF_EXE_M_R_long_sequence_GUARD

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

namespace TAO
{
  namespace TypeCode
  {
    namespace
    {
      TAO::TypeCode::Sequence< ::CORBA::TypeCode_ptr const *,
                              TAO::Null_RefCount_Policy>
        IF_EXE_M_R_long_sequence_0 (
          ::CORBA::tk_sequence,
          &CORBA::_tc_long,
          0U);

      ::CORBA::TypeCode_ptr const tc_IF_EXE_M_R_long_sequence_0 =
        &IF_EXE_M_R_long_sequence_0;
    }
  }
}

TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_TYPECODE_IF_EXE_M_R_long_sequence_GUARD */

static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_IF_EXE_M_R_long_sequence (
    ::CORBA::tk_alias,
    "IDL:IF_EXE_M_R/long_sequence:1.0",
    "long_sequence",
    &TAO::TypeCode::tc_IF_EXE_M_R_long_sequence_0);


namespace IF_EXE_M_R
{
  ::CORBA::TypeCode_ptr const _tc_long_sequence =
    &_tao_tc_IF_EXE_M_R_long_sequence;
}

// TAO_IDL - Generated from
// be/be_visitor_typecode/struct_typecode.cpp:86



// TAO_IDL - Generated from
// be/be_visitor_typecode/typecode_defn.cpp:461



// TAO_IDL - Generated from
// be/be_visitor_typecode/typecode_defn.cpp:461

static TAO::TypeCode::Struct_Field<
  char const *,
  ::CORBA::TypeCode_ptr const *> const
    _tao_fields_IF_EXE_M_R_CORBA_FOOHPlanHeader[] =
      {
        { "FOOHOffset", &CORBA::_tc_long },
        { "FOOHFOOA", &CORBA::_tc_double },
        { "FOOAReference", &IF_EXE_M_R::_tc_FOOAMode_E },
        { "FOOGSpacing", &IF_EXE_M_R::_tc_long_sequence },
        { "datasetVersion", &CORBA::_tc_ulong },
        { "FOOF", &IF_EXE_M_R::_tc_ENUM_FOOF },
        { "centreLine", &IF_EXE_M_R::_tc_CORBA_FOOJPosList },
        { "FOOGingProcedure", &IF_EXE_M_R::_tc_ENUM_FOOJType },
        { "maximum2EconomyAngle", &CORBA::_tc_double }
      };

static TAO::TypeCode::Struct<
  char const *,
  ::CORBA::TypeCode_ptr const *,
  TAO::TypeCode::Struct_Field<
    char const *,
    ::CORBA::TypeCode_ptr const *> const *,
  TAO::Null_RefCount_Policy>
_tao_tc_IF_EXE_M_R_CORBA_FOOHPlanHeader (
  ::CORBA::tk_struct,
  "IDL:IF_EXE_M_R/CORBA_FOOHPlanHeader:1.0",
  "CORBA_FOOHPlanHeader",
  _tao_fields_IF_EXE_M_R_CORBA_FOOHPlanHeader,
  9);


namespace IF_EXE_M_R
{
  ::CORBA::TypeCode_ptr const _tc_CORBA_FOOHPlanHeader =
    &_tao_tc_IF_EXE_M_R_CORBA_FOOHPlanHeader;
}

// TAO_IDL - Generated from
// be/be_visitor_structure/structure_cs.cpp:56

void
IF_EXE_M_R::CORBA_FOOHPlanHeader::_tao_any_destructor (
    void *_tao_void_pointer)
{
  CORBA_FOOHPlanHeader *_tao_tmp_pointer =
    static_cast<CORBA_FOOHPlanHeader *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

// TAO_IDL - Generated from
// be/be_visitor_typecode/struct_typecode.cpp:86

static TAO::TypeCode::Struct_Field<
  char const *,
  ::CORBA::TypeCode_ptr const *> const
    _tao_fields_IF_EXE_M_R_Test_Struct[] =
      {
        { "l", &CORBA::_tc_long },
        { "whatEver", &CORBA::_tc_any }
      };

static TAO::TypeCode::Struct<
  char const *,
  ::CORBA::TypeCode_ptr const *,
  TAO::TypeCode::Struct_Field<
    char const *,
    ::CORBA::TypeCode_ptr const *> const *,
  TAO::Null_RefCount_Policy>
_tao_tc_IF_EXE_M_R_Test_Struct (
  ::CORBA::tk_struct,
  "IDL:IF_EXE_M_R/Test_Struct:1.0",
  "Test_Struct",
  _tao_fields_IF_EXE_M_R_Test_Struct,
  2);


namespace IF_EXE_M_R
{
  ::CORBA::TypeCode_ptr const _tc_Test_Struct =
    &_tao_tc_IF_EXE_M_R_Test_Struct;
}

// TAO_IDL - Generated from
// be/be_visitor_structure/structure_cs.cpp:56

void
IF_EXE_M_R::Test_Struct::_tao_any_destructor (
    void *_tao_void_pointer)
{
  Test_Struct *_tao_tmp_pointer =
    static_cast<Test_Struct *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

// TAO_IDL - Generated from
// be/be_visitor_interface/interface_cs.cpp:48

// Traits specializations for IF_EXE_M_R::IF_ExeCtrlData.

IF_EXE_M_R::IF_ExeCtrlData_ptr
TAO::Objref_Traits<IF_EXE_M_R::IF_ExeCtrlData>::duplicate (
    IF_EXE_M_R::IF_ExeCtrlData_ptr p)
{
  return IF_EXE_M_R::IF_ExeCtrlData::_duplicate (p);
}

void
TAO::Objref_Traits<IF_EXE_M_R::IF_ExeCtrlData>::release (
    IF_EXE_M_R::IF_ExeCtrlData_ptr p)
{
  ::CORBA::release (p);
}

IF_EXE_M_R::IF_ExeCtrlData_ptr
TAO::Objref_Traits<IF_EXE_M_R::IF_ExeCtrlData>::nil (void)
{
  return IF_EXE_M_R::IF_ExeCtrlData::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<IF_EXE_M_R::IF_ExeCtrlData>::marshal (
    const IF_EXE_M_R::IF_ExeCtrlData_ptr p,
    TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:88

void
IF_EXE_M_R::IF_ExeCtrlData::foo (
  const ::IF_EXE_M_R::Test_Struct & ts)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }

  TAO::Arg_Traits< void>::ret_val _tao_retval;
  TAO::Arg_Traits< ::IF_EXE_M_R::Test_Struct>::in_arg_val _tao_ts (ts);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_ts
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      2,
      "foo",
      3,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY

    );

  _tao_call.invoke (0, 0);
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:88

void
IF_EXE_M_R::IF_ExeCtrlData::shutdown (
  void)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }

  TAO::Arg_Traits< void>::ret_val _tao_retval;

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      1,
      "shutdown",
      8,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY,
      TAO::TAO_ONEWAY_INVOCATION,
      TAO::TAO_SYNCHRONOUS_INVOCATION,
      false
    );

  _tao_call.invoke (0, 0);
}

IF_EXE_M_R::IF_ExeCtrlData::IF_ExeCtrlData (void)
{
}

IF_EXE_M_R::IF_ExeCtrlData::~IF_ExeCtrlData (void)
{
}

void
IF_EXE_M_R::IF_ExeCtrlData::_tao_any_destructor (void *_tao_void_pointer)
{
  IF_ExeCtrlData *_tao_tmp_pointer =
    static_cast<IF_ExeCtrlData *> (_tao_void_pointer);
  ::CORBA::release (_tao_tmp_pointer);
}

IF_EXE_M_R::IF_ExeCtrlData_ptr
IF_EXE_M_R::IF_ExeCtrlData::_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return
    TAO::Narrow_Utils<IF_ExeCtrlData>::narrow (
        _tao_objref,
        "IDL:IF_EXE_M_R/IF_ExeCtrlData:1.0");
}

IF_EXE_M_R::IF_ExeCtrlData_ptr
IF_EXE_M_R::IF_ExeCtrlData::_unchecked_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return
    TAO::Narrow_Utils<IF_ExeCtrlData>::unchecked_narrow (
        _tao_objref);
}

IF_EXE_M_R::IF_ExeCtrlData_ptr
IF_EXE_M_R::IF_ExeCtrlData::_nil (void)
{
  return 0;
}

IF_EXE_M_R::IF_ExeCtrlData_ptr
IF_EXE_M_R::IF_ExeCtrlData::_duplicate (IF_ExeCtrlData_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  return obj;
}

void
IF_EXE_M_R::IF_ExeCtrlData::_tao_release (IF_ExeCtrlData_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
IF_EXE_M_R::IF_ExeCtrlData::_is_a (const char *value)
{
  if (
      ACE_OS::strcmp (
          value,
          "IDL:IF_EXE_M_R/IF_ExeCtrlData:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        ) == 0
    )
    {
      return true; // success using local knowledge
    }
  else
    {
      return this->::CORBA::Object::_is_a (value);
    }
}

const char* IF_EXE_M_R::IF_ExeCtrlData::_interface_repository_id (void) const
{
  return "IDL:IF_EXE_M_R/IF_ExeCtrlData:1.0";
}

::CORBA::Boolean
IF_EXE_M_R::IF_ExeCtrlData::marshal (TAO_OutputCDR &cdr)
{
  return (cdr << this);
}

// TAO_IDL - Generated from
// be/be_visitor_typecode/objref_typecode.cpp:70

static TAO::TypeCode::Objref<char const *,
                             TAO::Null_RefCount_Policy>
  _tao_tc_IF_EXE_M_R_IF_ExeCtrlData (
    ::CORBA::tk_objref,
    "IDL:IF_EXE_M_R/IF_ExeCtrlData:1.0",
    "IF_ExeCtrlData");


namespace IF_EXE_M_R
{
  ::CORBA::TypeCode_ptr const _tc_IF_ExeCtrlData =
    &_tao_tc_IF_EXE_M_R_IF_ExeCtrlData;
}

// TAO_IDL - Generated from
// be/be_visitor_structure/any_op_cs.cpp:43



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace IF_EXE_M_R
{
  /// Copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      const ::IF_EXE_M_R::CORBA_LatLongFOOB &_tao_elem)
  {
    TAO::Any_Dual_Impl_T< ::IF_EXE_M_R::CORBA_LatLongFOOB>::insert_copy (
        _tao_any,
        ::IF_EXE_M_R::CORBA_LatLongFOOB::_tao_any_destructor,
        ::IF_EXE_M_R::_tc_CORBA_LatLongFOOB,
        _tao_elem);
}

/// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any, ::
    IF_EXE_M_R::CORBA_LatLongFOOB *_tao_elem)
{
  TAO::Any_Dual_Impl_T< ::IF_EXE_M_R::CORBA_LatLongFOOB>::insert (
      _tao_any,
      ::IF_EXE_M_R::CORBA_LatLongFOOB::_tao_any_destructor,
      ::IF_EXE_M_R::_tc_CORBA_LatLongFOOB,
      _tao_elem);
}

/// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    ::IF_EXE_M_R::CORBA_LatLongFOOB *&_tao_elem)
{
  return _tao_any >>= const_cast<
      const ::IF_EXE_M_R::CORBA_LatLongFOOB *&> (
      _tao_elem);
}

/// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const ::IF_EXE_M_R::CORBA_LatLongFOOB *&_tao_elem)
{
  return
    TAO::Any_Dual_Impl_T< ::IF_EXE_M_R::CORBA_LatLongFOOB>::extract (
        _tao_any,
        ::IF_EXE_M_R::CORBA_LatLongFOOB::_tao_any_destructor,
        ::IF_EXE_M_R::_tc_CORBA_LatLongFOOB,
        _tao_elem
      );
}
}

#else

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

/// Copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  const IF_EXE_M_R::CORBA_LatLongFOOB &_tao_elem)
{
  TAO::Any_Dual_Impl_T<IF_EXE_M_R::CORBA_LatLongFOOB>::insert_copy (
    _tao_any,
    IF_EXE_M_R::CORBA_LatLongFOOB::_tao_any_destructor,
    IF_EXE_M_R::_tc_CORBA_LatLongFOOB,
    _tao_elem);
}

/// Non-copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  IF_EXE_M_R::CORBA_LatLongFOOB *_tao_elem)
{
  TAO::Any_Dual_Impl_T<IF_EXE_M_R::CORBA_LatLongFOOB>::insert (
    _tao_any,
    IF_EXE_M_R::CORBA_LatLongFOOB::_tao_any_destructor,
    IF_EXE_M_R::_tc_CORBA_LatLongFOOB,
    _tao_elem);
}

/// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
  const ::CORBA::Any &_tao_any,
  IF_EXE_M_R::CORBA_LatLongFOOB *&_tao_elem)
{
  return _tao_any >>= const_cast<
      const IF_EXE_M_R::CORBA_LatLongFOOB *&> (
      _tao_elem);
}

/// Extraction to const pointer.
::CORBA::Boolean operator>>= (
  const ::CORBA::Any &_tao_any,
  const IF_EXE_M_R::CORBA_LatLongFOOB *&_tao_elem)
{
  return
    TAO::Any_Dual_Impl_T<IF_EXE_M_R::CORBA_LatLongFOOB>::extract (
      _tao_any,
      IF_EXE_M_R::CORBA_LatLongFOOB::_tao_any_destructor,
      IF_EXE_M_R::_tc_CORBA_LatLongFOOB,
      _tao_elem);
}
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_structure/any_op_cs.cpp:43



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace IF_EXE_M_R
{
  /// Copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      const ::IF_EXE_M_R::CORBA_PositionXYZ &_tao_elem)
  {
    TAO::Any_Dual_Impl_T< ::IF_EXE_M_R::CORBA_PositionXYZ>::insert_copy (
        _tao_any,
        ::IF_EXE_M_R::CORBA_PositionXYZ::_tao_any_destructor,
        ::IF_EXE_M_R::_tc_CORBA_PositionXYZ,
        _tao_elem);
}

/// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any, ::
    IF_EXE_M_R::CORBA_PositionXYZ *_tao_elem)
{
  TAO::Any_Dual_Impl_T< ::IF_EXE_M_R::CORBA_PositionXYZ>::insert (
      _tao_any,
      ::IF_EXE_M_R::CORBA_PositionXYZ::_tao_any_destructor,
      ::IF_EXE_M_R::_tc_CORBA_PositionXYZ,
      _tao_elem);
}

/// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    ::IF_EXE_M_R::CORBA_PositionXYZ *&_tao_elem)
{
  return _tao_any >>= const_cast<
      const ::IF_EXE_M_R::CORBA_PositionXYZ *&> (
      _tao_elem);
}

/// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const ::IF_EXE_M_R::CORBA_PositionXYZ *&_tao_elem)
{
  return
    TAO::Any_Dual_Impl_T< ::IF_EXE_M_R::CORBA_PositionXYZ>::extract (
        _tao_any,
        ::IF_EXE_M_R::CORBA_PositionXYZ::_tao_any_destructor,
        ::IF_EXE_M_R::_tc_CORBA_PositionXYZ,
        _tao_elem
      );
}
}

#else

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

/// Copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  const IF_EXE_M_R::CORBA_PositionXYZ &_tao_elem)
{
  TAO::Any_Dual_Impl_T<IF_EXE_M_R::CORBA_PositionXYZ>::insert_copy (
    _tao_any,
    IF_EXE_M_R::CORBA_PositionXYZ::_tao_any_destructor,
    IF_EXE_M_R::_tc_CORBA_PositionXYZ,
    _tao_elem);
}

/// Non-copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  IF_EXE_M_R::CORBA_PositionXYZ *_tao_elem)
{
  TAO::Any_Dual_Impl_T<IF_EXE_M_R::CORBA_PositionXYZ>::insert (
    _tao_any,
    IF_EXE_M_R::CORBA_PositionXYZ::_tao_any_destructor,
    IF_EXE_M_R::_tc_CORBA_PositionXYZ,
    _tao_elem);
}

/// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
  const ::CORBA::Any &_tao_any,
  IF_EXE_M_R::CORBA_PositionXYZ *&_tao_elem)
{
  return _tao_any >>= const_cast<
      const IF_EXE_M_R::CORBA_PositionXYZ *&> (
      _tao_elem);
}

/// Extraction to const pointer.
::CORBA::Boolean operator>>= (
  const ::CORBA::Any &_tao_any,
  const IF_EXE_M_R::CORBA_PositionXYZ *&_tao_elem)
{
  return
    TAO::Any_Dual_Impl_T<IF_EXE_M_R::CORBA_PositionXYZ>::extract (
      _tao_any,
      IF_EXE_M_R::CORBA_PositionXYZ::_tao_any_destructor,
      IF_EXE_M_R::_tc_CORBA_PositionXYZ,
      _tao_elem);
}
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_structure/any_op_cs.cpp:43



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace IF_EXE_M_R
{
  /// Copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      const ::IF_EXE_M_R::CORBA_FOOGIMCMS &_tao_elem)
  {
    TAO::Any_Dual_Impl_T< ::IF_EXE_M_R::CORBA_FOOGIMCMS>::insert_copy (
        _tao_any,
        ::IF_EXE_M_R::CORBA_FOOGIMCMS::_tao_any_destructor,
        ::IF_EXE_M_R::_tc_CORBA_FOOGIMCMS,
        _tao_elem);
}

/// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any, ::
    IF_EXE_M_R::CORBA_FOOGIMCMS *_tao_elem)
{
  TAO::Any_Dual_Impl_T< ::IF_EXE_M_R::CORBA_FOOGIMCMS>::insert (
      _tao_any,
      ::IF_EXE_M_R::CORBA_FOOGIMCMS::_tao_any_destructor,
      ::IF_EXE_M_R::_tc_CORBA_FOOGIMCMS,
      _tao_elem);
}

/// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    ::IF_EXE_M_R::CORBA_FOOGIMCMS *&_tao_elem)
{
  return _tao_any >>= const_cast<
      const ::IF_EXE_M_R::CORBA_FOOGIMCMS *&> (
      _tao_elem);
}

/// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const ::IF_EXE_M_R::CORBA_FOOGIMCMS *&_tao_elem)
{
  return
    TAO::Any_Dual_Impl_T< ::IF_EXE_M_R::CORBA_FOOGIMCMS>::extract (
        _tao_any,
        ::IF_EXE_M_R::CORBA_FOOGIMCMS::_tao_any_destructor,
        ::IF_EXE_M_R::_tc_CORBA_FOOGIMCMS,
        _tao_elem
      );
}
}

#else

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

/// Copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  const IF_EXE_M_R::CORBA_FOOGIMCMS &_tao_elem)
{
  TAO::Any_Dual_Impl_T<IF_EXE_M_R::CORBA_FOOGIMCMS>::insert_copy (
    _tao_any,
    IF_EXE_M_R::CORBA_FOOGIMCMS::_tao_any_destructor,
    IF_EXE_M_R::_tc_CORBA_FOOGIMCMS,
    _tao_elem);
}

/// Non-copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  IF_EXE_M_R::CORBA_FOOGIMCMS *_tao_elem)
{
  TAO::Any_Dual_Impl_T<IF_EXE_M_R::CORBA_FOOGIMCMS>::insert (
    _tao_any,
    IF_EXE_M_R::CORBA_FOOGIMCMS::_tao_any_destructor,
    IF_EXE_M_R::_tc_CORBA_FOOGIMCMS,
    _tao_elem);
}

/// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
  const ::CORBA::Any &_tao_any,
  IF_EXE_M_R::CORBA_FOOGIMCMS *&_tao_elem)
{
  return _tao_any >>= const_cast<
      const IF_EXE_M_R::CORBA_FOOGIMCMS *&> (
      _tao_elem);
}

/// Extraction to const pointer.
::CORBA::Boolean operator>>= (
  const ::CORBA::Any &_tao_any,
  const IF_EXE_M_R::CORBA_FOOGIMCMS *&_tao_elem)
{
  return
    TAO::Any_Dual_Impl_T<IF_EXE_M_R::CORBA_FOOGIMCMS>::extract (
      _tao_any,
      IF_EXE_M_R::CORBA_FOOGIMCMS::_tao_any_destructor,
      IF_EXE_M_R::_tc_CORBA_FOOGIMCMS,
      _tao_elem);
}
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_structure/any_op_cs.cpp:43



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace IF_EXE_M_R
{
  /// Copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      const ::IF_EXE_M_R::CORBA_FOOMControl &_tao_elem)
  {
    TAO::Any_Dual_Impl_T< ::IF_EXE_M_R::CORBA_FOOMControl>::insert_copy (
        _tao_any,
        ::IF_EXE_M_R::CORBA_FOOMControl::_tao_any_destructor,
        ::IF_EXE_M_R::_tc_CORBA_FOOMControl,
        _tao_elem);
}

/// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any, ::
    IF_EXE_M_R::CORBA_FOOMControl *_tao_elem)
{
  TAO::Any_Dual_Impl_T< ::IF_EXE_M_R::CORBA_FOOMControl>::insert (
      _tao_any,
      ::IF_EXE_M_R::CORBA_FOOMControl::_tao_any_destructor,
      ::IF_EXE_M_R::_tc_CORBA_FOOMControl,
      _tao_elem);
}

/// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    ::IF_EXE_M_R::CORBA_FOOMControl *&_tao_elem)
{
  return _tao_any >>= const_cast<
      const ::IF_EXE_M_R::CORBA_FOOMControl *&> (
      _tao_elem);
}

/// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const ::IF_EXE_M_R::CORBA_FOOMControl *&_tao_elem)
{
  return
    TAO::Any_Dual_Impl_T< ::IF_EXE_M_R::CORBA_FOOMControl>::extract (
        _tao_any,
        ::IF_EXE_M_R::CORBA_FOOMControl::_tao_any_destructor,
        ::IF_EXE_M_R::_tc_CORBA_FOOMControl,
        _tao_elem
      );
}
}

#else

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

/// Copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  const IF_EXE_M_R::CORBA_FOOMControl &_tao_elem)
{
  TAO::Any_Dual_Impl_T<IF_EXE_M_R::CORBA_FOOMControl>::insert_copy (
    _tao_any,
    IF_EXE_M_R::CORBA_FOOMControl::_tao_any_destructor,
    IF_EXE_M_R::_tc_CORBA_FOOMControl,
    _tao_elem);
}

/// Non-copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  IF_EXE_M_R::CORBA_FOOMControl *_tao_elem)
{
  TAO::Any_Dual_Impl_T<IF_EXE_M_R::CORBA_FOOMControl>::insert (
    _tao_any,
    IF_EXE_M_R::CORBA_FOOMControl::_tao_any_destructor,
    IF_EXE_M_R::_tc_CORBA_FOOMControl,
    _tao_elem);
}

/// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
  const ::CORBA::Any &_tao_any,
  IF_EXE_M_R::CORBA_FOOMControl *&_tao_elem)
{
  return _tao_any >>= const_cast<
      const IF_EXE_M_R::CORBA_FOOMControl *&> (
      _tao_elem);
}

/// Extraction to const pointer.
::CORBA::Boolean operator>>= (
  const ::CORBA::Any &_tao_any,
  const IF_EXE_M_R::CORBA_FOOMControl *&_tao_elem)
{
  return
    TAO::Any_Dual_Impl_T<IF_EXE_M_R::CORBA_FOOMControl>::extract (
      _tao_any,
      IF_EXE_M_R::CORBA_FOOMControl::_tao_any_destructor,
      IF_EXE_M_R::_tc_CORBA_FOOMControl,
      _tao_elem);
}
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_sequence/any_op_cs.cpp:45


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


TAO_END_VERSIONED_NAMESPACE_DECL



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace IF_EXE_M_R
{

  // Copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      const ::IF_EXE_M_R::CORBA_FOOMList &_tao_elem
    )
  {
    TAO::Any_Dual_Impl_T< ::IF_EXE_M_R::CORBA_FOOMList>::insert_copy (
        _tao_any,
        ::IF_EXE_M_R::CORBA_FOOMList::_tao_any_destructor,
        ::IF_EXE_M_R::_tc_CORBA_FOOMList,
        _tao_elem
      );
}

// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    ::IF_EXE_M_R::CORBA_FOOMList *_tao_elem)
{
  TAO::Any_Dual_Impl_T< ::IF_EXE_M_R::CORBA_FOOMList>::insert (
      _tao_any,
      ::IF_EXE_M_R::CORBA_FOOMList::_tao_any_destructor,
      ::IF_EXE_M_R::_tc_CORBA_FOOMList,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    ::IF_EXE_M_R::CORBA_FOOMList *&_tao_elem)
{
  return _tao_any >>= const_cast<
      const ::IF_EXE_M_R::CORBA_FOOMList *&> (
      _tao_elem
    );
}

// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const ::IF_EXE_M_R::CORBA_FOOMList *&_tao_elem)
{
  return
    TAO::Any_Dual_Impl_T< ::IF_EXE_M_R::CORBA_FOOMList>::extract (
        _tao_any,
        ::IF_EXE_M_R::CORBA_FOOMList::_tao_any_destructor,
        ::IF_EXE_M_R::_tc_CORBA_FOOMList,
        _tao_elem
      );
}
}

#else


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


// Copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    const IF_EXE_M_R::CORBA_FOOMList &_tao_elem)
{
  TAO::Any_Dual_Impl_T<IF_EXE_M_R::CORBA_FOOMList>::insert_copy (
      _tao_any,
      IF_EXE_M_R::CORBA_FOOMList::_tao_any_destructor,
      IF_EXE_M_R::_tc_CORBA_FOOMList,
      _tao_elem
    );
}

// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    IF_EXE_M_R::CORBA_FOOMList *_tao_elem)
{
  TAO::Any_Dual_Impl_T<IF_EXE_M_R::CORBA_FOOMList>::insert (
      _tao_any,
      IF_EXE_M_R::CORBA_FOOMList::_tao_any_destructor,
      IF_EXE_M_R::_tc_CORBA_FOOMList,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    IF_EXE_M_R::CORBA_FOOMList *&_tao_elem)
{
  return _tao_any >>= const_cast<
      const IF_EXE_M_R::CORBA_FOOMList *&> (
      _tao_elem
    );
}

// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const IF_EXE_M_R::CORBA_FOOMList *&_tao_elem)
{
  return
    TAO::Any_Dual_Impl_T<IF_EXE_M_R::CORBA_FOOMList>::extract (
        _tao_any,
        IF_EXE_M_R::CORBA_FOOMList::_tao_any_destructor,
        IF_EXE_M_R::_tc_CORBA_FOOMList,
        _tao_elem);
}
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_structure/any_op_cs.cpp:43



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace IF_EXE_M_R
{
  /// Copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      const ::IF_EXE_M_R::CORBA_BaseArc &_tao_elem)
  {
    TAO::Any_Dual_Impl_T< ::IF_EXE_M_R::CORBA_BaseArc>::insert_copy (
        _tao_any,
        ::IF_EXE_M_R::CORBA_BaseArc::_tao_any_destructor,
        ::IF_EXE_M_R::_tc_CORBA_BaseArc,
        _tao_elem);
}

/// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any, ::
    IF_EXE_M_R::CORBA_BaseArc *_tao_elem)
{
  TAO::Any_Dual_Impl_T< ::IF_EXE_M_R::CORBA_BaseArc>::insert (
      _tao_any,
      ::IF_EXE_M_R::CORBA_BaseArc::_tao_any_destructor,
      ::IF_EXE_M_R::_tc_CORBA_BaseArc,
      _tao_elem);
}

/// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    ::IF_EXE_M_R::CORBA_BaseArc *&_tao_elem)
{
  return _tao_any >>= const_cast<
      const ::IF_EXE_M_R::CORBA_BaseArc *&> (
      _tao_elem);
}

/// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const ::IF_EXE_M_R::CORBA_BaseArc *&_tao_elem)
{
  return
    TAO::Any_Dual_Impl_T< ::IF_EXE_M_R::CORBA_BaseArc>::extract (
        _tao_any,
        ::IF_EXE_M_R::CORBA_BaseArc::_tao_any_destructor,
        ::IF_EXE_M_R::_tc_CORBA_BaseArc,
        _tao_elem
      );
}
}

#else

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

/// Copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  const IF_EXE_M_R::CORBA_BaseArc &_tao_elem)
{
  TAO::Any_Dual_Impl_T<IF_EXE_M_R::CORBA_BaseArc>::insert_copy (
    _tao_any,
    IF_EXE_M_R::CORBA_BaseArc::_tao_any_destructor,
    IF_EXE_M_R::_tc_CORBA_BaseArc,
    _tao_elem);
}

/// Non-copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  IF_EXE_M_R::CORBA_BaseArc *_tao_elem)
{
  TAO::Any_Dual_Impl_T<IF_EXE_M_R::CORBA_BaseArc>::insert (
    _tao_any,
    IF_EXE_M_R::CORBA_BaseArc::_tao_any_destructor,
    IF_EXE_M_R::_tc_CORBA_BaseArc,
    _tao_elem);
}

/// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
  const ::CORBA::Any &_tao_any,
  IF_EXE_M_R::CORBA_BaseArc *&_tao_elem)
{
  return _tao_any >>= const_cast<
      const IF_EXE_M_R::CORBA_BaseArc *&> (
      _tao_elem);
}

/// Extraction to const pointer.
::CORBA::Boolean operator>>= (
  const ::CORBA::Any &_tao_any,
  const IF_EXE_M_R::CORBA_BaseArc *&_tao_elem)
{
  return
    TAO::Any_Dual_Impl_T<IF_EXE_M_R::CORBA_BaseArc>::extract (
      _tao_any,
      IF_EXE_M_R::CORBA_BaseArc::_tao_any_destructor,
      IF_EXE_M_R::_tc_CORBA_BaseArc,
      _tao_elem);
}
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_structure/any_op_cs.cpp:43



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace IF_EXE_M_R
{
  /// Copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      const ::IF_EXE_M_R::CORBA_BaseCircle &_tao_elem)
  {
    TAO::Any_Dual_Impl_T< ::IF_EXE_M_R::CORBA_BaseCircle>::insert_copy (
        _tao_any,
        ::IF_EXE_M_R::CORBA_BaseCircle::_tao_any_destructor,
        ::IF_EXE_M_R::_tc_CORBA_BaseCircle,
        _tao_elem);
}

/// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any, ::
    IF_EXE_M_R::CORBA_BaseCircle *_tao_elem)
{
  TAO::Any_Dual_Impl_T< ::IF_EXE_M_R::CORBA_BaseCircle>::insert (
      _tao_any,
      ::IF_EXE_M_R::CORBA_BaseCircle::_tao_any_destructor,
      ::IF_EXE_M_R::_tc_CORBA_BaseCircle,
      _tao_elem);
}

/// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    ::IF_EXE_M_R::CORBA_BaseCircle *&_tao_elem)
{
  return _tao_any >>= const_cast<
      const ::IF_EXE_M_R::CORBA_BaseCircle *&> (
      _tao_elem);
}

/// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const ::IF_EXE_M_R::CORBA_BaseCircle *&_tao_elem)
{
  return
    TAO::Any_Dual_Impl_T< ::IF_EXE_M_R::CORBA_BaseCircle>::extract (
        _tao_any,
        ::IF_EXE_M_R::CORBA_BaseCircle::_tao_any_destructor,
        ::IF_EXE_M_R::_tc_CORBA_BaseCircle,
        _tao_elem
      );
}
}

#else

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

/// Copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  const IF_EXE_M_R::CORBA_BaseCircle &_tao_elem)
{
  TAO::Any_Dual_Impl_T<IF_EXE_M_R::CORBA_BaseCircle>::insert_copy (
    _tao_any,
    IF_EXE_M_R::CORBA_BaseCircle::_tao_any_destructor,
    IF_EXE_M_R::_tc_CORBA_BaseCircle,
    _tao_elem);
}

/// Non-copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  IF_EXE_M_R::CORBA_BaseCircle *_tao_elem)
{
  TAO::Any_Dual_Impl_T<IF_EXE_M_R::CORBA_BaseCircle>::insert (
    _tao_any,
    IF_EXE_M_R::CORBA_BaseCircle::_tao_any_destructor,
    IF_EXE_M_R::_tc_CORBA_BaseCircle,
    _tao_elem);
}

/// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
  const ::CORBA::Any &_tao_any,
  IF_EXE_M_R::CORBA_BaseCircle *&_tao_elem)
{
  return _tao_any >>= const_cast<
      const IF_EXE_M_R::CORBA_BaseCircle *&> (
      _tao_elem);
}

/// Extraction to const pointer.
::CORBA::Boolean operator>>= (
  const ::CORBA::Any &_tao_any,
  const IF_EXE_M_R::CORBA_BaseCircle *&_tao_elem)
{
  return
    TAO::Any_Dual_Impl_T<IF_EXE_M_R::CORBA_BaseCircle>::extract (
      _tao_any,
      IF_EXE_M_R::CORBA_BaseCircle::_tao_any_destructor,
      IF_EXE_M_R::_tc_CORBA_BaseCircle,
      _tao_elem);
}
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_structure/any_op_cs.cpp:43



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace IF_EXE_M_R
{
  /// Copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      const ::IF_EXE_M_R::CORBA_BaseCross &_tao_elem)
  {
    TAO::Any_Dual_Impl_T< ::IF_EXE_M_R::CORBA_BaseCross>::insert_copy (
        _tao_any,
        ::IF_EXE_M_R::CORBA_BaseCross::_tao_any_destructor,
        ::IF_EXE_M_R::_tc_CORBA_BaseCross,
        _tao_elem);
}

/// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any, ::
    IF_EXE_M_R::CORBA_BaseCross *_tao_elem)
{
  TAO::Any_Dual_Impl_T< ::IF_EXE_M_R::CORBA_BaseCross>::insert (
      _tao_any,
      ::IF_EXE_M_R::CORBA_BaseCross::_tao_any_destructor,
      ::IF_EXE_M_R::_tc_CORBA_BaseCross,
      _tao_elem);
}

/// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    ::IF_EXE_M_R::CORBA_BaseCross *&_tao_elem)
{
  return _tao_any >>= const_cast<
      const ::IF_EXE_M_R::CORBA_BaseCross *&> (
      _tao_elem);
}

/// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const ::IF_EXE_M_R::CORBA_BaseCross *&_tao_elem)
{
  return
    TAO::Any_Dual_Impl_T< ::IF_EXE_M_R::CORBA_BaseCross>::extract (
        _tao_any,
        ::IF_EXE_M_R::CORBA_BaseCross::_tao_any_destructor,
        ::IF_EXE_M_R::_tc_CORBA_BaseCross,
        _tao_elem
      );
}
}

#else

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

/// Copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  const IF_EXE_M_R::CORBA_BaseCross &_tao_elem)
{
  TAO::Any_Dual_Impl_T<IF_EXE_M_R::CORBA_BaseCross>::insert_copy (
    _tao_any,
    IF_EXE_M_R::CORBA_BaseCross::_tao_any_destructor,
    IF_EXE_M_R::_tc_CORBA_BaseCross,
    _tao_elem);
}

/// Non-copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  IF_EXE_M_R::CORBA_BaseCross *_tao_elem)
{
  TAO::Any_Dual_Impl_T<IF_EXE_M_R::CORBA_BaseCross>::insert (
    _tao_any,
    IF_EXE_M_R::CORBA_BaseCross::_tao_any_destructor,
    IF_EXE_M_R::_tc_CORBA_BaseCross,
    _tao_elem);
}

/// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
  const ::CORBA::Any &_tao_any,
  IF_EXE_M_R::CORBA_BaseCross *&_tao_elem)
{
  return _tao_any >>= const_cast<
      const IF_EXE_M_R::CORBA_BaseCross *&> (
      _tao_elem);
}

/// Extraction to const pointer.
::CORBA::Boolean operator>>= (
  const ::CORBA::Any &_tao_any,
  const IF_EXE_M_R::CORBA_BaseCross *&_tao_elem)
{
  return
    TAO::Any_Dual_Impl_T<IF_EXE_M_R::CORBA_BaseCross>::extract (
      _tao_any,
      IF_EXE_M_R::CORBA_BaseCross::_tao_any_destructor,
      IF_EXE_M_R::_tc_CORBA_BaseCross,
      _tao_elem);
}
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_structure/any_op_cs.cpp:43



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace IF_EXE_M_R
{
  /// Copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      const ::IF_EXE_M_R::CORBA_BaseFOOG &_tao_elem)
  {
    TAO::Any_Dual_Impl_T< ::IF_EXE_M_R::CORBA_BaseFOOG>::insert_copy (
        _tao_any,
        ::IF_EXE_M_R::CORBA_BaseFOOG::_tao_any_destructor,
        ::IF_EXE_M_R::_tc_CORBA_BaseFOOG,
        _tao_elem);
}

/// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any, ::
    IF_EXE_M_R::CORBA_BaseFOOG *_tao_elem)
{
  TAO::Any_Dual_Impl_T< ::IF_EXE_M_R::CORBA_BaseFOOG>::insert (
      _tao_any,
      ::IF_EXE_M_R::CORBA_BaseFOOG::_tao_any_destructor,
      ::IF_EXE_M_R::_tc_CORBA_BaseFOOG,
      _tao_elem);
}

/// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    ::IF_EXE_M_R::CORBA_BaseFOOG *&_tao_elem)
{
  return _tao_any >>= const_cast<
      const ::IF_EXE_M_R::CORBA_BaseFOOG *&> (
      _tao_elem);
}

/// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const ::IF_EXE_M_R::CORBA_BaseFOOG *&_tao_elem)
{
  return
    TAO::Any_Dual_Impl_T< ::IF_EXE_M_R::CORBA_BaseFOOG>::extract (
        _tao_any,
        ::IF_EXE_M_R::CORBA_BaseFOOG::_tao_any_destructor,
        ::IF_EXE_M_R::_tc_CORBA_BaseFOOG,
        _tao_elem
      );
}
}

#else

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

/// Copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  const IF_EXE_M_R::CORBA_BaseFOOG &_tao_elem)
{
  TAO::Any_Dual_Impl_T<IF_EXE_M_R::CORBA_BaseFOOG>::insert_copy (
    _tao_any,
    IF_EXE_M_R::CORBA_BaseFOOG::_tao_any_destructor,
    IF_EXE_M_R::_tc_CORBA_BaseFOOG,
    _tao_elem);
}

/// Non-copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  IF_EXE_M_R::CORBA_BaseFOOG *_tao_elem)
{
  TAO::Any_Dual_Impl_T<IF_EXE_M_R::CORBA_BaseFOOG>::insert (
    _tao_any,
    IF_EXE_M_R::CORBA_BaseFOOG::_tao_any_destructor,
    IF_EXE_M_R::_tc_CORBA_BaseFOOG,
    _tao_elem);
}

/// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
  const ::CORBA::Any &_tao_any,
  IF_EXE_M_R::CORBA_BaseFOOG *&_tao_elem)
{
  return _tao_any >>= const_cast<
      const IF_EXE_M_R::CORBA_BaseFOOG *&> (
      _tao_elem);
}

/// Extraction to const pointer.
::CORBA::Boolean operator>>= (
  const ::CORBA::Any &_tao_any,
  const IF_EXE_M_R::CORBA_BaseFOOG *&_tao_elem)
{
  return
    TAO::Any_Dual_Impl_T<IF_EXE_M_R::CORBA_BaseFOOG>::extract (
      _tao_any,
      IF_EXE_M_R::CORBA_BaseFOOG::_tao_any_destructor,
      IF_EXE_M_R::_tc_CORBA_BaseFOOG,
      _tao_elem);
}
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_union/any_op_cs.cpp:37


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


TAO_END_VERSIONED_NAMESPACE_DECL



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace IF_EXE_M_R
{
  // Copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      const ::IF_EXE_M_R::CORBA_FOOIData &_tao_elem
    )
  {
    TAO::Any_Dual_Impl_T< ::IF_EXE_M_R::CORBA_FOOIData>::insert_copy (
        _tao_any,
        ::IF_EXE_M_R::CORBA_FOOIData::_tao_any_destructor,
        ::IF_EXE_M_R::_tc_CORBA_FOOIData,
        _tao_elem
      );
}

// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    ::IF_EXE_M_R::CORBA_FOOIData *_tao_elem
  )
{
  TAO::Any_Dual_Impl_T< ::IF_EXE_M_R::CORBA_FOOIData>::insert (
      _tao_any,
      ::IF_EXE_M_R::CORBA_FOOIData::_tao_any_destructor,
      ::IF_EXE_M_R::_tc_CORBA_FOOIData,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    ::IF_EXE_M_R::CORBA_FOOIData *&_tao_elem
  )
{
  return _tao_any >>= const_cast<
      const ::IF_EXE_M_R::CORBA_FOOIData *&> (
      _tao_elem
    );
}

// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const ::IF_EXE_M_R::CORBA_FOOIData *&_tao_elem
  )
{
  return
    TAO::Any_Dual_Impl_T< ::IF_EXE_M_R::CORBA_FOOIData>::extract (
        _tao_any,
        ::IF_EXE_M_R::CORBA_FOOIData::_tao_any_destructor,
        ::IF_EXE_M_R::_tc_CORBA_FOOIData,
        _tao_elem
      );
}
}

#else

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    const IF_EXE_M_R::CORBA_FOOIData &_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<IF_EXE_M_R::CORBA_FOOIData>::insert_copy (
      _tao_any,
      IF_EXE_M_R::CORBA_FOOIData::_tao_any_destructor,
      IF_EXE_M_R::_tc_CORBA_FOOIData,
      _tao_elem
    );
}

// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    IF_EXE_M_R::CORBA_FOOIData *_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<IF_EXE_M_R::CORBA_FOOIData>::insert (
      _tao_any,
      IF_EXE_M_R::CORBA_FOOIData::_tao_any_destructor,
      IF_EXE_M_R::_tc_CORBA_FOOIData,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    IF_EXE_M_R::CORBA_FOOIData *&_tao_elem
  )
{
  return _tao_any >>= const_cast<
      const IF_EXE_M_R::CORBA_FOOIData *&> (
      _tao_elem
    );
}

// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const IF_EXE_M_R::CORBA_FOOIData *&_tao_elem
  )
{
  return
    TAO::Any_Dual_Impl_T<IF_EXE_M_R::CORBA_FOOIData>::extract (
        _tao_any,
        IF_EXE_M_R::CORBA_FOOIData::_tao_any_destructor,
        IF_EXE_M_R::_tc_CORBA_FOOIData,
        _tao_elem
      );
}
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_structure/any_op_cs.cpp:43



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace IF_EXE_M_R
{
  /// Copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      const ::IF_EXE_M_R::CORBA_FOOIInPlan &_tao_elem)
  {
    TAO::Any_Dual_Impl_T< ::IF_EXE_M_R::CORBA_FOOIInPlan>::insert_copy (
        _tao_any,
        ::IF_EXE_M_R::CORBA_FOOIInPlan::_tao_any_destructor,
        ::IF_EXE_M_R::_tc_CORBA_FOOIInPlan,
        _tao_elem);
}

/// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any, ::
    IF_EXE_M_R::CORBA_FOOIInPlan *_tao_elem)
{
  TAO::Any_Dual_Impl_T< ::IF_EXE_M_R::CORBA_FOOIInPlan>::insert (
      _tao_any,
      ::IF_EXE_M_R::CORBA_FOOIInPlan::_tao_any_destructor,
      ::IF_EXE_M_R::_tc_CORBA_FOOIInPlan,
      _tao_elem);
}

/// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    ::IF_EXE_M_R::CORBA_FOOIInPlan *&_tao_elem)
{
  return _tao_any >>= const_cast<
      const ::IF_EXE_M_R::CORBA_FOOIInPlan *&> (
      _tao_elem);
}

/// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const ::IF_EXE_M_R::CORBA_FOOIInPlan *&_tao_elem)
{
  return
    TAO::Any_Dual_Impl_T< ::IF_EXE_M_R::CORBA_FOOIInPlan>::extract (
        _tao_any,
        ::IF_EXE_M_R::CORBA_FOOIInPlan::_tao_any_destructor,
        ::IF_EXE_M_R::_tc_CORBA_FOOIInPlan,
        _tao_elem
      );
}
}

#else

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

/// Copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  const IF_EXE_M_R::CORBA_FOOIInPlan &_tao_elem)
{
  TAO::Any_Dual_Impl_T<IF_EXE_M_R::CORBA_FOOIInPlan>::insert_copy (
    _tao_any,
    IF_EXE_M_R::CORBA_FOOIInPlan::_tao_any_destructor,
    IF_EXE_M_R::_tc_CORBA_FOOIInPlan,
    _tao_elem);
}

/// Non-copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  IF_EXE_M_R::CORBA_FOOIInPlan *_tao_elem)
{
  TAO::Any_Dual_Impl_T<IF_EXE_M_R::CORBA_FOOIInPlan>::insert (
    _tao_any,
    IF_EXE_M_R::CORBA_FOOIInPlan::_tao_any_destructor,
    IF_EXE_M_R::_tc_CORBA_FOOIInPlan,
    _tao_elem);
}

/// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
  const ::CORBA::Any &_tao_any,
  IF_EXE_M_R::CORBA_FOOIInPlan *&_tao_elem)
{
  return _tao_any >>= const_cast<
      const IF_EXE_M_R::CORBA_FOOIInPlan *&> (
      _tao_elem);
}

/// Extraction to const pointer.
::CORBA::Boolean operator>>= (
  const ::CORBA::Any &_tao_any,
  const IF_EXE_M_R::CORBA_FOOIInPlan *&_tao_elem)
{
  return
    TAO::Any_Dual_Impl_T<IF_EXE_M_R::CORBA_FOOIInPlan>::extract (
      _tao_any,
      IF_EXE_M_R::CORBA_FOOIInPlan::_tao_any_destructor,
      IF_EXE_M_R::_tc_CORBA_FOOIInPlan,
      _tao_elem);
}
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_sequence/any_op_cs.cpp:45


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


TAO_END_VERSIONED_NAMESPACE_DECL



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace IF_EXE_M_R
{

  // Copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      const ::IF_EXE_M_R::CORBA_FOOIList &_tao_elem
    )
  {
    TAO::Any_Dual_Impl_T< ::IF_EXE_M_R::CORBA_FOOIList>::insert_copy (
        _tao_any,
        ::IF_EXE_M_R::CORBA_FOOIList::_tao_any_destructor,
        ::IF_EXE_M_R::_tc_CORBA_FOOIList,
        _tao_elem
      );
}

// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    ::IF_EXE_M_R::CORBA_FOOIList *_tao_elem)
{
  TAO::Any_Dual_Impl_T< ::IF_EXE_M_R::CORBA_FOOIList>::insert (
      _tao_any,
      ::IF_EXE_M_R::CORBA_FOOIList::_tao_any_destructor,
      ::IF_EXE_M_R::_tc_CORBA_FOOIList,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    ::IF_EXE_M_R::CORBA_FOOIList *&_tao_elem)
{
  return _tao_any >>= const_cast<
      const ::IF_EXE_M_R::CORBA_FOOIList *&> (
      _tao_elem
    );
}

// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const ::IF_EXE_M_R::CORBA_FOOIList *&_tao_elem)
{
  return
    TAO::Any_Dual_Impl_T< ::IF_EXE_M_R::CORBA_FOOIList>::extract (
        _tao_any,
        ::IF_EXE_M_R::CORBA_FOOIList::_tao_any_destructor,
        ::IF_EXE_M_R::_tc_CORBA_FOOIList,
        _tao_elem
      );
}
}

#else


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


// Copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    const IF_EXE_M_R::CORBA_FOOIList &_tao_elem)
{
  TAO::Any_Dual_Impl_T<IF_EXE_M_R::CORBA_FOOIList>::insert_copy (
      _tao_any,
      IF_EXE_M_R::CORBA_FOOIList::_tao_any_destructor,
      IF_EXE_M_R::_tc_CORBA_FOOIList,
      _tao_elem
    );
}

// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    IF_EXE_M_R::CORBA_FOOIList *_tao_elem)
{
  TAO::Any_Dual_Impl_T<IF_EXE_M_R::CORBA_FOOIList>::insert (
      _tao_any,
      IF_EXE_M_R::CORBA_FOOIList::_tao_any_destructor,
      IF_EXE_M_R::_tc_CORBA_FOOIList,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    IF_EXE_M_R::CORBA_FOOIList *&_tao_elem)
{
  return _tao_any >>= const_cast<
      const IF_EXE_M_R::CORBA_FOOIList *&> (
      _tao_elem
    );
}

// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const IF_EXE_M_R::CORBA_FOOIList *&_tao_elem)
{
  return
    TAO::Any_Dual_Impl_T<IF_EXE_M_R::CORBA_FOOIList>::extract (
        _tao_any,
        IF_EXE_M_R::CORBA_FOOIList::_tao_any_destructor,
        IF_EXE_M_R::_tc_CORBA_FOOIList,
        _tao_elem);
}
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_structure/any_op_cs.cpp:43



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace IF_EXE_M_R
{
  /// Copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      const ::IF_EXE_M_R::CORBA_FOOJPosition &_tao_elem)
  {
    TAO::Any_Dual_Impl_T< ::IF_EXE_M_R::CORBA_FOOJPosition>::insert_copy (
        _tao_any,
        ::IF_EXE_M_R::CORBA_FOOJPosition::_tao_any_destructor,
        ::IF_EXE_M_R::_tc_CORBA_FOOJPosition,
        _tao_elem);
}

/// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any, ::
    IF_EXE_M_R::CORBA_FOOJPosition *_tao_elem)
{
  TAO::Any_Dual_Impl_T< ::IF_EXE_M_R::CORBA_FOOJPosition>::insert (
      _tao_any,
      ::IF_EXE_M_R::CORBA_FOOJPosition::_tao_any_destructor,
      ::IF_EXE_M_R::_tc_CORBA_FOOJPosition,
      _tao_elem);
}

/// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    ::IF_EXE_M_R::CORBA_FOOJPosition *&_tao_elem)
{
  return _tao_any >>= const_cast<
      const ::IF_EXE_M_R::CORBA_FOOJPosition *&> (
      _tao_elem);
}

/// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const ::IF_EXE_M_R::CORBA_FOOJPosition *&_tao_elem)
{
  return
    TAO::Any_Dual_Impl_T< ::IF_EXE_M_R::CORBA_FOOJPosition>::extract (
        _tao_any,
        ::IF_EXE_M_R::CORBA_FOOJPosition::_tao_any_destructor,
        ::IF_EXE_M_R::_tc_CORBA_FOOJPosition,
        _tao_elem
      );
}
}

#else

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

/// Copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  const IF_EXE_M_R::CORBA_FOOJPosition &_tao_elem)
{
  TAO::Any_Dual_Impl_T<IF_EXE_M_R::CORBA_FOOJPosition>::insert_copy (
    _tao_any,
    IF_EXE_M_R::CORBA_FOOJPosition::_tao_any_destructor,
    IF_EXE_M_R::_tc_CORBA_FOOJPosition,
    _tao_elem);
}

/// Non-copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  IF_EXE_M_R::CORBA_FOOJPosition *_tao_elem)
{
  TAO::Any_Dual_Impl_T<IF_EXE_M_R::CORBA_FOOJPosition>::insert (
    _tao_any,
    IF_EXE_M_R::CORBA_FOOJPosition::_tao_any_destructor,
    IF_EXE_M_R::_tc_CORBA_FOOJPosition,
    _tao_elem);
}

/// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
  const ::CORBA::Any &_tao_any,
  IF_EXE_M_R::CORBA_FOOJPosition *&_tao_elem)
{
  return _tao_any >>= const_cast<
      const IF_EXE_M_R::CORBA_FOOJPosition *&> (
      _tao_elem);
}

/// Extraction to const pointer.
::CORBA::Boolean operator>>= (
  const ::CORBA::Any &_tao_any,
  const IF_EXE_M_R::CORBA_FOOJPosition *&_tao_elem)
{
  return
    TAO::Any_Dual_Impl_T<IF_EXE_M_R::CORBA_FOOJPosition>::extract (
      _tao_any,
      IF_EXE_M_R::CORBA_FOOJPosition::_tao_any_destructor,
      IF_EXE_M_R::_tc_CORBA_FOOJPosition,
      _tao_elem);
}
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_sequence/any_op_cs.cpp:45


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


TAO_END_VERSIONED_NAMESPACE_DECL



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace IF_EXE_M_R
{

  // Copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      const ::IF_EXE_M_R::CORBA_FOOJPosList &_tao_elem
    )
  {
    TAO::Any_Dual_Impl_T< ::IF_EXE_M_R::CORBA_FOOJPosList>::insert_copy (
        _tao_any,
        ::IF_EXE_M_R::CORBA_FOOJPosList::_tao_any_destructor,
        ::IF_EXE_M_R::_tc_CORBA_FOOJPosList,
        _tao_elem
      );
}

// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    ::IF_EXE_M_R::CORBA_FOOJPosList *_tao_elem)
{
  TAO::Any_Dual_Impl_T< ::IF_EXE_M_R::CORBA_FOOJPosList>::insert (
      _tao_any,
      ::IF_EXE_M_R::CORBA_FOOJPosList::_tao_any_destructor,
      ::IF_EXE_M_R::_tc_CORBA_FOOJPosList,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    ::IF_EXE_M_R::CORBA_FOOJPosList *&_tao_elem)
{
  return _tao_any >>= const_cast<
      const ::IF_EXE_M_R::CORBA_FOOJPosList *&> (
      _tao_elem
    );
}

// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const ::IF_EXE_M_R::CORBA_FOOJPosList *&_tao_elem)
{
  return
    TAO::Any_Dual_Impl_T< ::IF_EXE_M_R::CORBA_FOOJPosList>::extract (
        _tao_any,
        ::IF_EXE_M_R::CORBA_FOOJPosList::_tao_any_destructor,
        ::IF_EXE_M_R::_tc_CORBA_FOOJPosList,
        _tao_elem
      );
}
}

#else


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


// Copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    const IF_EXE_M_R::CORBA_FOOJPosList &_tao_elem)
{
  TAO::Any_Dual_Impl_T<IF_EXE_M_R::CORBA_FOOJPosList>::insert_copy (
      _tao_any,
      IF_EXE_M_R::CORBA_FOOJPosList::_tao_any_destructor,
      IF_EXE_M_R::_tc_CORBA_FOOJPosList,
      _tao_elem
    );
}

// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    IF_EXE_M_R::CORBA_FOOJPosList *_tao_elem)
{
  TAO::Any_Dual_Impl_T<IF_EXE_M_R::CORBA_FOOJPosList>::insert (
      _tao_any,
      IF_EXE_M_R::CORBA_FOOJPosList::_tao_any_destructor,
      IF_EXE_M_R::_tc_CORBA_FOOJPosList,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    IF_EXE_M_R::CORBA_FOOJPosList *&_tao_elem)
{
  return _tao_any >>= const_cast<
      const IF_EXE_M_R::CORBA_FOOJPosList *&> (
      _tao_elem
    );
}

// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const IF_EXE_M_R::CORBA_FOOJPosList *&_tao_elem)
{
  return
    TAO::Any_Dual_Impl_T<IF_EXE_M_R::CORBA_FOOJPosList>::extract (
        _tao_any,
        IF_EXE_M_R::CORBA_FOOJPosList::_tao_any_destructor,
        IF_EXE_M_R::_tc_CORBA_FOOJPosList,
        _tao_elem);
}
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_sequence/any_op_cs.cpp:45


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


TAO_END_VERSIONED_NAMESPACE_DECL



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace IF_EXE_M_R
{

  // Copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      const ::IF_EXE_M_R::long_sequence &_tao_elem
    )
  {
    TAO::Any_Dual_Impl_T< ::IF_EXE_M_R::long_sequence>::insert_copy (
        _tao_any,
        ::IF_EXE_M_R::long_sequence::_tao_any_destructor,
        ::IF_EXE_M_R::_tc_long_sequence,
        _tao_elem
      );
}

// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    ::IF_EXE_M_R::long_sequence *_tao_elem)
{
  TAO::Any_Dual_Impl_T< ::IF_EXE_M_R::long_sequence>::insert (
      _tao_any,
      ::IF_EXE_M_R::long_sequence::_tao_any_destructor,
      ::IF_EXE_M_R::_tc_long_sequence,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    ::IF_EXE_M_R::long_sequence *&_tao_elem)
{
  return _tao_any >>= const_cast<
      const ::IF_EXE_M_R::long_sequence *&> (
      _tao_elem
    );
}

// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const ::IF_EXE_M_R::long_sequence *&_tao_elem)
{
  return
    TAO::Any_Dual_Impl_T< ::IF_EXE_M_R::long_sequence>::extract (
        _tao_any,
        ::IF_EXE_M_R::long_sequence::_tao_any_destructor,
        ::IF_EXE_M_R::_tc_long_sequence,
        _tao_elem
      );
}
}

#else


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


// Copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    const IF_EXE_M_R::long_sequence &_tao_elem)
{
  TAO::Any_Dual_Impl_T<IF_EXE_M_R::long_sequence>::insert_copy (
      _tao_any,
      IF_EXE_M_R::long_sequence::_tao_any_destructor,
      IF_EXE_M_R::_tc_long_sequence,
      _tao_elem
    );
}

// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    IF_EXE_M_R::long_sequence *_tao_elem)
{
  TAO::Any_Dual_Impl_T<IF_EXE_M_R::long_sequence>::insert (
      _tao_any,
      IF_EXE_M_R::long_sequence::_tao_any_destructor,
      IF_EXE_M_R::_tc_long_sequence,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    IF_EXE_M_R::long_sequence *&_tao_elem)
{
  return _tao_any >>= const_cast<
      const IF_EXE_M_R::long_sequence *&> (
      _tao_elem
    );
}

// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const IF_EXE_M_R::long_sequence *&_tao_elem)
{
  return
    TAO::Any_Dual_Impl_T<IF_EXE_M_R::long_sequence>::extract (
        _tao_any,
        IF_EXE_M_R::long_sequence::_tao_any_destructor,
        IF_EXE_M_R::_tc_long_sequence,
        _tao_elem);
}
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_structure/any_op_cs.cpp:43



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace IF_EXE_M_R
{
  /// Copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      const ::IF_EXE_M_R::CORBA_FOOHPlanHeader &_tao_elem)
  {
    TAO::Any_Dual_Impl_T< ::IF_EXE_M_R::CORBA_FOOHPlanHeader>::insert_copy (
        _tao_any,
        ::IF_EXE_M_R::CORBA_FOOHPlanHeader::_tao_any_destructor,
        ::IF_EXE_M_R::_tc_CORBA_FOOHPlanHeader,
        _tao_elem);
}

/// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any, ::
    IF_EXE_M_R::CORBA_FOOHPlanHeader *_tao_elem)
{
  TAO::Any_Dual_Impl_T< ::IF_EXE_M_R::CORBA_FOOHPlanHeader>::insert (
      _tao_any,
      ::IF_EXE_M_R::CORBA_FOOHPlanHeader::_tao_any_destructor,
      ::IF_EXE_M_R::_tc_CORBA_FOOHPlanHeader,
      _tao_elem);
}

/// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    ::IF_EXE_M_R::CORBA_FOOHPlanHeader *&_tao_elem)
{
  return _tao_any >>= const_cast<
      const ::IF_EXE_M_R::CORBA_FOOHPlanHeader *&> (
      _tao_elem);
}

/// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const ::IF_EXE_M_R::CORBA_FOOHPlanHeader *&_tao_elem)
{
  return
    TAO::Any_Dual_Impl_T< ::IF_EXE_M_R::CORBA_FOOHPlanHeader>::extract (
        _tao_any,
        ::IF_EXE_M_R::CORBA_FOOHPlanHeader::_tao_any_destructor,
        ::IF_EXE_M_R::_tc_CORBA_FOOHPlanHeader,
        _tao_elem
      );
}
}

#else

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

/// Copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  const IF_EXE_M_R::CORBA_FOOHPlanHeader &_tao_elem)
{
  TAO::Any_Dual_Impl_T<IF_EXE_M_R::CORBA_FOOHPlanHeader>::insert_copy (
    _tao_any,
    IF_EXE_M_R::CORBA_FOOHPlanHeader::_tao_any_destructor,
    IF_EXE_M_R::_tc_CORBA_FOOHPlanHeader,
    _tao_elem);
}

/// Non-copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  IF_EXE_M_R::CORBA_FOOHPlanHeader *_tao_elem)
{
  TAO::Any_Dual_Impl_T<IF_EXE_M_R::CORBA_FOOHPlanHeader>::insert (
    _tao_any,
    IF_EXE_M_R::CORBA_FOOHPlanHeader::_tao_any_destructor,
    IF_EXE_M_R::_tc_CORBA_FOOHPlanHeader,
    _tao_elem);
}

/// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
  const ::CORBA::Any &_tao_any,
  IF_EXE_M_R::CORBA_FOOHPlanHeader *&_tao_elem)
{
  return _tao_any >>= const_cast<
      const IF_EXE_M_R::CORBA_FOOHPlanHeader *&> (
      _tao_elem);
}

/// Extraction to const pointer.
::CORBA::Boolean operator>>= (
  const ::CORBA::Any &_tao_any,
  const IF_EXE_M_R::CORBA_FOOHPlanHeader *&_tao_elem)
{
  return
    TAO::Any_Dual_Impl_T<IF_EXE_M_R::CORBA_FOOHPlanHeader>::extract (
      _tao_any,
      IF_EXE_M_R::CORBA_FOOHPlanHeader::_tao_any_destructor,
      IF_EXE_M_R::_tc_CORBA_FOOHPlanHeader,
      _tao_elem);
}
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_structure/any_op_cs.cpp:43



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace IF_EXE_M_R
{
  /// Copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      const ::IF_EXE_M_R::Test_Struct &_tao_elem)
  {
    TAO::Any_Dual_Impl_T< ::IF_EXE_M_R::Test_Struct>::insert_copy (
        _tao_any,
        ::IF_EXE_M_R::Test_Struct::_tao_any_destructor,
        ::IF_EXE_M_R::_tc_Test_Struct,
        _tao_elem);
}

/// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any, ::
    IF_EXE_M_R::Test_Struct *_tao_elem)
{
  TAO::Any_Dual_Impl_T< ::IF_EXE_M_R::Test_Struct>::insert (
      _tao_any,
      ::IF_EXE_M_R::Test_Struct::_tao_any_destructor,
      ::IF_EXE_M_R::_tc_Test_Struct,
      _tao_elem);
}

/// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    ::IF_EXE_M_R::Test_Struct *&_tao_elem)
{
  return _tao_any >>= const_cast<
      const ::IF_EXE_M_R::Test_Struct *&> (
      _tao_elem);
}

/// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const ::IF_EXE_M_R::Test_Struct *&_tao_elem)
{
  return
    TAO::Any_Dual_Impl_T< ::IF_EXE_M_R::Test_Struct>::extract (
        _tao_any,
        ::IF_EXE_M_R::Test_Struct::_tao_any_destructor,
        ::IF_EXE_M_R::_tc_Test_Struct,
        _tao_elem
      );
}
}

#else

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

/// Copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  const IF_EXE_M_R::Test_Struct &_tao_elem)
{
  TAO::Any_Dual_Impl_T<IF_EXE_M_R::Test_Struct>::insert_copy (
    _tao_any,
    IF_EXE_M_R::Test_Struct::_tao_any_destructor,
    IF_EXE_M_R::_tc_Test_Struct,
    _tao_elem);
}

/// Non-copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  IF_EXE_M_R::Test_Struct *_tao_elem)
{
  TAO::Any_Dual_Impl_T<IF_EXE_M_R::Test_Struct>::insert (
    _tao_any,
    IF_EXE_M_R::Test_Struct::_tao_any_destructor,
    IF_EXE_M_R::_tc_Test_Struct,
    _tao_elem);
}

/// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
  const ::CORBA::Any &_tao_any,
  IF_EXE_M_R::Test_Struct *&_tao_elem)
{
  return _tao_any >>= const_cast<
      const IF_EXE_M_R::Test_Struct *&> (
      _tao_elem);
}

/// Extraction to const pointer.
::CORBA::Boolean operator>>= (
  const ::CORBA::Any &_tao_any,
  const IF_EXE_M_R::Test_Struct *&_tao_elem)
{
  return
    TAO::Any_Dual_Impl_T<IF_EXE_M_R::Test_Struct>::extract (
      _tao_any,
      IF_EXE_M_R::Test_Struct::_tao_any_destructor,
      IF_EXE_M_R::_tc_Test_Struct,
      _tao_elem);
}
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_interface/any_op_cs.cpp:38
TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<IF_EXE_M_R::IF_ExeCtrlData>::to_object (
      ::CORBA::Object_ptr &_tao_elem) const
  {
    _tao_elem = ::CORBA::Object::_duplicate (this->value_);
    return true;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace IF_EXE_M_R
{


  /// Copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      IF_ExeCtrlData_ptr _tao_elem)
  {
    IF_ExeCtrlData_ptr _tao_objptr =
      IF_ExeCtrlData::_duplicate (_tao_elem);
    _tao_any <<= &_tao_objptr;
  }

  /// Non-copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      IF_ExeCtrlData_ptr *_tao_elem)
  {
    TAO::Any_Impl_T<IF_ExeCtrlData>::insert (
        _tao_any,
        IF_ExeCtrlData::_tao_any_destructor,
        _tc_IF_ExeCtrlData,
        *_tao_elem);
  }

  ::CORBA::Boolean
  operator>>= (
      const ::CORBA::Any &_tao_any,
      IF_ExeCtrlData_ptr &_tao_elem)
  {
    return
      TAO::Any_Impl_T<IF_ExeCtrlData>::extract (
          _tao_any,
          IF_ExeCtrlData::_tao_any_destructor,
          _tc_IF_ExeCtrlData,
          _tao_elem);
  }
}

#else

TAO_BEGIN_VERSIONED_NAMESPACE_DECL



/// Copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    IF_EXE_M_R::IF_ExeCtrlData_ptr _tao_elem)
{
  IF_EXE_M_R::IF_ExeCtrlData_ptr _tao_objptr =
    IF_EXE_M_R::IF_ExeCtrlData::_duplicate (_tao_elem);
  _tao_any <<= &_tao_objptr;
}

/// Non-copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    IF_EXE_M_R::IF_ExeCtrlData_ptr *_tao_elem)
{
  TAO::Any_Impl_T<IF_EXE_M_R::IF_ExeCtrlData>::insert (
      _tao_any,
      IF_EXE_M_R::IF_ExeCtrlData::_tao_any_destructor,
      IF_EXE_M_R::_tc_IF_ExeCtrlData,
      *_tao_elem);
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    IF_EXE_M_R::IF_ExeCtrlData_ptr &_tao_elem)
{
  return
    TAO::Any_Impl_T<IF_EXE_M_R::IF_ExeCtrlData>::extract (
        _tao_any,
        IF_EXE_M_R::IF_ExeCtrlData::_tao_any_destructor,
        IF_EXE_M_R::_tc_IF_ExeCtrlData,
        _tao_elem);
}

TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_structure/cdr_op_cs.cpp:49

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const IF_EXE_M_R::CORBA_LatLongFOOB &_tao_aggregate)
{
  return
    (strm << _tao_aggregate.latitude) &&
    (strm << _tao_aggregate.longitude) &&
    (strm << _tao_aggregate.FOOB);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    IF_EXE_M_R::CORBA_LatLongFOOB &_tao_aggregate)
{
  return
    (strm >> _tao_aggregate.latitude) &&
    (strm >> _tao_aggregate.longitude) &&
    (strm >> _tao_aggregate.FOOB);
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_structure/cdr_op_cs.cpp:49

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const IF_EXE_M_R::CORBA_PositionXYZ &_tao_aggregate)
{
  return
    (strm << _tao_aggregate.x) &&
    (strm << _tao_aggregate.y) &&
    (strm << _tao_aggregate.z);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    IF_EXE_M_R::CORBA_PositionXYZ &_tao_aggregate)
{
  return
    (strm >> _tao_aggregate.x) &&
    (strm >> _tao_aggregate.y) &&
    (strm >> _tao_aggregate.z);
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_structure/cdr_op_cs.cpp:49

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const IF_EXE_M_R::CORBA_FOOGIMCMS &_tao_aggregate)
{
  return
    (strm << _tao_aggregate.FOOBReference) &&
    (strm << _tao_aggregate.FOOIID.in ()) &&
    (strm << _tao_aggregate.FOOAReference) &&
    (strm << _tao_aggregate.FOOINotice.in ()) &&
    (strm << _tao_aggregate.FOOD) &&
    (strm << _tao_aggregate.startPosRemark.in ()) &&
    (strm << _tao_aggregate.manFOOA) &&
    (strm << _tao_aggregate.manStartCoverage) &&
    (strm << _tao_aggregate.endPosRemark.in ()) &&
    (strm << _tao_aggregate.manEndCoverage) &&
    (strm << _tao_aggregate.datasetVersion) &&
    (strm << _tao_aggregate.maximum2EconomyAngle) &&
    (strm << _tao_aggregate.startPosition) &&
    (strm << _tao_aggregate.endPosition);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    IF_EXE_M_R::CORBA_FOOGIMCMS &_tao_aggregate)
{
  return
    (strm >> _tao_aggregate.FOOBReference) &&
    (strm >> _tao_aggregate.FOOIID.out ()) &&
    (strm >> _tao_aggregate.FOOAReference) &&
    (strm >> _tao_aggregate.FOOINotice.out ()) &&
    (strm >> _tao_aggregate.FOOD) &&
    (strm >> _tao_aggregate.startPosRemark.out ()) &&
    (strm >> _tao_aggregate.manFOOA) &&
    (strm >> _tao_aggregate.manStartCoverage) &&
    (strm >> _tao_aggregate.endPosRemark.out ()) &&
    (strm >> _tao_aggregate.manEndCoverage) &&
    (strm >> _tao_aggregate.datasetVersion) &&
    (strm >> _tao_aggregate.maximum2EconomyAngle) &&
    (strm >> _tao_aggregate.startPosition) &&
    (strm >> _tao_aggregate.endPosition);
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_structure/cdr_op_cs.cpp:49

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const IF_EXE_M_R::CORBA_FOOMControl &_tao_aggregate)
{
  return
    (strm << _tao_aggregate.ecName.in ()) &&
    (strm << _tao_aggregate.ecMode) &&
    (strm << _tao_aggregate.ecParameter) &&
    (strm << _tao_aggregate.ecCommand1.in ()) &&
    (strm << _tao_aggregate.ecCommand2.in ());
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    IF_EXE_M_R::CORBA_FOOMControl &_tao_aggregate)
{
  return
    (strm >> _tao_aggregate.ecName.out ()) &&
    (strm >> _tao_aggregate.ecMode) &&
    (strm >> _tao_aggregate.ecParameter) &&
    (strm >> _tao_aggregate.ecCommand1.out ()) &&
    (strm >> _tao_aggregate.ecCommand2.out ());
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_sequence/cdr_op_cs.cpp:93
#if !defined _TAO_CDR_OP_IF_EXE_M_R_CORBA_FOOMList_CPP_
#define _TAO_CDR_OP_IF_EXE_M_R_CORBA_FOOMList_CPP_

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const IF_EXE_M_R::CORBA_FOOMList &_tao_sequence)
{
  return TAO::marshal_sequence(strm, _tao_sequence);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    IF_EXE_M_R::CORBA_FOOMList &_tao_sequence)
{
  return TAO::demarshal_sequence(strm, _tao_sequence);
}


TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_CDR_OP_IF_EXE_M_R_CORBA_FOOMList_CPP_ */

// TAO_IDL - Generated from
// be/be_visitor_structure/cdr_op_cs.cpp:49

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const IF_EXE_M_R::CORBA_BaseArc &_tao_aggregate)
{
  return
    (strm << _tao_aggregate.FOOD) &&
    (strm << _tao_aggregate.FOOIID.in ()) &&
    (strm << _tao_aggregate.startPosition) &&
    (strm << _tao_aggregate.maxHorizontalFOOU) &&
    (strm << _tao_aggregate.endPosition) &&
    (strm << _tao_aggregate.maxVerticalFOOU) &&
    (strm << _tao_aggregate.arcMiddlePosition) &&
    (strm << _tao_aggregate.averageFOOHFOOB) &&
    (strm << _tao_aggregate.FOOBReference) &&
    (strm << _tao_aggregate.datasetVersion) &&
    (strm << _tao_aggregate.startFOOA) &&
    (strm << _tao_aggregate.endFOOA) &&
    (strm << _tao_aggregate.FOOTDistance) &&
    (strm << _tao_aggregate.FOOTDuration) &&
    (strm << _tao_aggregate.FOOAReference) &&
    (strm << _tao_aggregate.FOOTEnergyConsum) &&
    (strm << _tao_aggregate.FOOAControlMode) &&
    (strm << _tao_aggregate.arcDirection) &&
    (strm << _tao_aggregate.economyMode) &&
    (strm << _tao_aggregate.transitionStatus) &&
    (strm << _tao_aggregate.cl_FOOSMode) &&
    (strm << _tao_aggregate.activeComponents) &&
    (strm << _tao_aggregate.FOOKTypeStart) &&
    (strm << _tao_aggregate.FOOKTypeEnd);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    IF_EXE_M_R::CORBA_BaseArc &_tao_aggregate)
{
  return
    (strm >> _tao_aggregate.FOOD) &&
    (strm >> _tao_aggregate.FOOIID.out ()) &&
    (strm >> _tao_aggregate.startPosition) &&
    (strm >> _tao_aggregate.maxHorizontalFOOU) &&
    (strm >> _tao_aggregate.endPosition) &&
    (strm >> _tao_aggregate.maxVerticalFOOU) &&
    (strm >> _tao_aggregate.arcMiddlePosition) &&
    (strm >> _tao_aggregate.averageFOOHFOOB) &&
    (strm >> _tao_aggregate.FOOBReference) &&
    (strm >> _tao_aggregate.datasetVersion) &&
    (strm >> _tao_aggregate.startFOOA) &&
    (strm >> _tao_aggregate.endFOOA) &&
    (strm >> _tao_aggregate.FOOTDistance) &&
    (strm >> _tao_aggregate.FOOTDuration) &&
    (strm >> _tao_aggregate.FOOAReference) &&
    (strm >> _tao_aggregate.FOOTEnergyConsum) &&
    (strm >> _tao_aggregate.FOOAControlMode) &&
    (strm >> _tao_aggregate.arcDirection) &&
    (strm >> _tao_aggregate.economyMode) &&
    (strm >> _tao_aggregate.transitionStatus) &&
    (strm >> _tao_aggregate.cl_FOOSMode) &&
    (strm >> _tao_aggregate.activeComponents) &&
    (strm >> _tao_aggregate.FOOKTypeStart) &&
    (strm >> _tao_aggregate.FOOKTypeEnd);
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_structure/cdr_op_cs.cpp:49

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const IF_EXE_M_R::CORBA_BaseCircle &_tao_aggregate)
{
  return
    (strm << _tao_aggregate.FOOD) &&
    (strm << _tao_aggregate.FOOIID.in ()) &&
    (strm << _tao_aggregate.maxHorizontalFOOU) &&
    (strm << _tao_aggregate.startPosition) &&
    (strm << _tao_aggregate.maxVerticalFOOU) &&
    (strm << _tao_aggregate.endPosition) &&
    (strm << _tao_aggregate.averageFOOHFOOB) &&
    (strm << _tao_aggregate.circleMiddlePosition) &&
    (strm << _tao_aggregate.datasetVersion) &&
    (strm << _tao_aggregate.FOOBReference) &&
    (strm << _tao_aggregate.FOONFOOA) &&
    (strm << _tao_aggregate.FOOTDistance) &&
    (strm << _tao_aggregate.FOOTDuration) &&
    (strm << _tao_aggregate.FOOAReference) &&
    (strm << _tao_aggregate.FOOTEnergyConsum) &&
    (strm << _tao_aggregate.circleDirection) &&
    (strm << _tao_aggregate.economyMode) &&
    (strm << _tao_aggregate.transitionStatus) &&
    (strm << _tao_aggregate.activeComponents) &&
    (strm << _tao_aggregate.cl_FOOSMode) &&
    (strm << _tao_aggregate.FOOKTypeStart) &&
    (strm << _tao_aggregate.FOOKTypeEnd);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    IF_EXE_M_R::CORBA_BaseCircle &_tao_aggregate)
{
  return
    (strm >> _tao_aggregate.FOOD) &&
    (strm >> _tao_aggregate.FOOIID.out ()) &&
    (strm >> _tao_aggregate.maxHorizontalFOOU) &&
    (strm >> _tao_aggregate.startPosition) &&
    (strm >> _tao_aggregate.maxVerticalFOOU) &&
    (strm >> _tao_aggregate.endPosition) &&
    (strm >> _tao_aggregate.averageFOOHFOOB) &&
    (strm >> _tao_aggregate.circleMiddlePosition) &&
    (strm >> _tao_aggregate.datasetVersion) &&
    (strm >> _tao_aggregate.FOOBReference) &&
    (strm >> _tao_aggregate.FOONFOOA) &&
    (strm >> _tao_aggregate.FOOTDistance) &&
    (strm >> _tao_aggregate.FOOTDuration) &&
    (strm >> _tao_aggregate.FOOAReference) &&
    (strm >> _tao_aggregate.FOOTEnergyConsum) &&
    (strm >> _tao_aggregate.circleDirection) &&
    (strm >> _tao_aggregate.economyMode) &&
    (strm >> _tao_aggregate.transitionStatus) &&
    (strm >> _tao_aggregate.activeComponents) &&
    (strm >> _tao_aggregate.cl_FOOSMode) &&
    (strm >> _tao_aggregate.FOOKTypeStart) &&
    (strm >> _tao_aggregate.FOOKTypeEnd);
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_structure/cdr_op_cs.cpp:49

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const IF_EXE_M_R::CORBA_BaseCross &_tao_aggregate)
{
  return
    (strm << _tao_aggregate.FOOIID.in ()) &&
    (strm << _tao_aggregate.FOOD) &&
    (strm << _tao_aggregate.maxHorizontalFOOU) &&
    (strm << _tao_aggregate.startPosition) &&
    (strm << _tao_aggregate.maxVerticalFOOU) &&
    (strm << _tao_aggregate.endPosition) &&
    (strm << _tao_aggregate.crossFOOA) &&
    (strm << _tao_aggregate.FOOG1EndPosition) &&
    (strm << _tao_aggregate.circle1CentrePosition) &&
    (strm << _tao_aggregate.averageFOOHFOOB) &&
    (strm << _tao_aggregate.crossPitchAngle) &&
    (strm << _tao_aggregate.FOOG2StartPosition) &&
    (strm << _tao_aggregate.datasetVersion) &&
    (strm << _tao_aggregate.FOOG2EndPosition) &&
    (strm << _tao_aggregate.FOOTDistance) &&
    (strm << _tao_aggregate.circle2CentrePosition) &&
    (strm << _tao_aggregate.FOOTDuration) &&
    (strm << _tao_aggregate.FOOG3StartPosition) &&
    (strm << _tao_aggregate.FOOTEnergyConsum) &&
    (strm << _tao_aggregate.FOOBReferenceStartPosition) &&
    (strm << _tao_aggregate.FOOAReference) &&
    (strm << _tao_aggregate.economyMode) &&
    (strm << _tao_aggregate.transitionStatus) &&
    (strm << _tao_aggregate.activeComponents) &&
    (strm << _tao_aggregate.crossReachEndPosition) &&
    (strm << _tao_aggregate.FOOBReferenceEndPosition) &&
    (strm << _tao_aggregate.cl_FOOSMode) &&
    (strm << _tao_aggregate.FOOKTypeStart) &&
    (strm << _tao_aggregate.FOOKTypeEnd);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    IF_EXE_M_R::CORBA_BaseCross &_tao_aggregate)
{
  return
    (strm >> _tao_aggregate.FOOIID.out ()) &&
    (strm >> _tao_aggregate.FOOD) &&
    (strm >> _tao_aggregate.maxHorizontalFOOU) &&
    (strm >> _tao_aggregate.startPosition) &&
    (strm >> _tao_aggregate.maxVerticalFOOU) &&
    (strm >> _tao_aggregate.endPosition) &&
    (strm >> _tao_aggregate.crossFOOA) &&
    (strm >> _tao_aggregate.FOOG1EndPosition) &&
    (strm >> _tao_aggregate.circle1CentrePosition) &&
    (strm >> _tao_aggregate.averageFOOHFOOB) &&
    (strm >> _tao_aggregate.crossPitchAngle) &&
    (strm >> _tao_aggregate.FOOG2StartPosition) &&
    (strm >> _tao_aggregate.datasetVersion) &&
    (strm >> _tao_aggregate.FOOG2EndPosition) &&
    (strm >> _tao_aggregate.FOOTDistance) &&
    (strm >> _tao_aggregate.circle2CentrePosition) &&
    (strm >> _tao_aggregate.FOOTDuration) &&
    (strm >> _tao_aggregate.FOOG3StartPosition) &&
    (strm >> _tao_aggregate.FOOTEnergyConsum) &&
    (strm >> _tao_aggregate.FOOBReferenceStartPosition) &&
    (strm >> _tao_aggregate.FOOAReference) &&
    (strm >> _tao_aggregate.economyMode) &&
    (strm >> _tao_aggregate.transitionStatus) &&
    (strm >> _tao_aggregate.activeComponents) &&
    (strm >> _tao_aggregate.crossReachEndPosition) &&
    (strm >> _tao_aggregate.FOOBReferenceEndPosition) &&
    (strm >> _tao_aggregate.cl_FOOSMode) &&
    (strm >> _tao_aggregate.FOOKTypeStart) &&
    (strm >> _tao_aggregate.FOOKTypeEnd);
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_structure/cdr_op_cs.cpp:49

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const IF_EXE_M_R::CORBA_BaseFOOG &_tao_aggregate)
{
  return
    (strm << _tao_aggregate.FOOD) &&
    (strm << _tao_aggregate.FOOIID.in ()) &&
    (strm << _tao_aggregate.startPosition) &&
    (strm << _tao_aggregate.endPosition) &&
    (strm << _tao_aggregate.FOOBReferenceStartPosition) &&
    (strm << _tao_aggregate.averageFOOHFOOB) &&
    (strm << _tao_aggregate.FOOBControlMode) &&
    (strm << _tao_aggregate.datasetVersion) &&
    (strm << _tao_aggregate.maxHorizontalFOOU) &&
    (strm << _tao_aggregate.maxVerticalFOOU) &&
    (strm << _tao_aggregate.FOOTDistance) &&
    (strm << _tao_aggregate.startFOOA) &&
    (strm << _tao_aggregate.FOOTDuration) &&
    (strm << _tao_aggregate.endFOOA) &&
    (strm << _tao_aggregate.FOOTEnergyConsum) &&
    (strm << _tao_aggregate.FOOAReference) &&
    (strm << _tao_aggregate.FOOAControlMode) &&
    (strm << _tao_aggregate.FOOBReferenceEndPosition) &&
    (strm << _tao_aggregate.economyMode) &&
    (strm << _tao_aggregate.cl_FOOSMode) &&
    (strm << _tao_aggregate.transitionStatus) &&
    (strm << _tao_aggregate.FOOKTypeStart) &&
    (strm << _tao_aggregate.activeComponents) &&
    (strm << _tao_aggregate.FOOKTypeEnd);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    IF_EXE_M_R::CORBA_BaseFOOG &_tao_aggregate)
{
  return
    (strm >> _tao_aggregate.FOOD) &&
    (strm >> _tao_aggregate.FOOIID.out ()) &&
    (strm >> _tao_aggregate.startPosition) &&
    (strm >> _tao_aggregate.endPosition) &&
    (strm >> _tao_aggregate.FOOBReferenceStartPosition) &&
    (strm >> _tao_aggregate.averageFOOHFOOB) &&
    (strm >> _tao_aggregate.FOOBControlMode) &&
    (strm >> _tao_aggregate.datasetVersion) &&
    (strm >> _tao_aggregate.maxHorizontalFOOU) &&
    (strm >> _tao_aggregate.maxVerticalFOOU) &&
    (strm >> _tao_aggregate.FOOTDistance) &&
    (strm >> _tao_aggregate.startFOOA) &&
    (strm >> _tao_aggregate.FOOTDuration) &&
    (strm >> _tao_aggregate.endFOOA) &&
    (strm >> _tao_aggregate.FOOTEnergyConsum) &&
    (strm >> _tao_aggregate.FOOAReference) &&
    (strm >> _tao_aggregate.FOOAControlMode) &&
    (strm >> _tao_aggregate.FOOBReferenceEndPosition) &&
    (strm >> _tao_aggregate.economyMode) &&
    (strm >> _tao_aggregate.cl_FOOSMode) &&
    (strm >> _tao_aggregate.transitionStatus) &&
    (strm >> _tao_aggregate.FOOKTypeStart) &&
    (strm >> _tao_aggregate.activeComponents) &&
    (strm >> _tao_aggregate.FOOKTypeEnd);
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_union/cdr_op_cs.cpp:74


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const IF_EXE_M_R::CORBA_FOOIData &_tao_union
  )
{
  if ( !(strm << _tao_union._d ()) )
    {
      return false;
    }

  ::CORBA::Boolean result = true;

  switch (_tao_union._d ())
  {
    case IF_EXE_M_R::IMCMS_FOOG:
      {
        result = strm << _tao_union.manFOOGIMCMS ();
      }
      break;
    case IF_EXE_M_R::BASE_ARC:
      {
        result = strm << _tao_union.FOOVArc ();
      }
      break;
    case IF_EXE_M_R::BASE_CIRCLE:
      {
        result = strm << _tao_union.FOOVCircle ();
      }
      break;
    case IF_EXE_M_R::BASE_CROSS:
      {
        result = strm << _tao_union.FOOVCross ();
      }
      break;
    case IF_EXE_M_R::BASE_FOOG:
      {
        result = strm << _tao_union.FOOVFOOG ();
      }
      break;
    default:
      break;
  }

  return result;
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    IF_EXE_M_R::CORBA_FOOIData &_tao_union
  )
{
  IF_EXE_M_R::ENUM_FOOD _tao_discriminant;
  if ( !(strm >> _tao_discriminant) )
    {
      return false;
    }

  ::CORBA::Boolean result = true;

  switch (_tao_discriminant)
  {
    case IF_EXE_M_R::IMCMS_FOOG:
      {
        IF_EXE_M_R::CORBA_FOOGIMCMS _tao_union_tmp;
        result = strm >> _tao_union_tmp;

        if (result)
          {
            _tao_union.manFOOGIMCMS (_tao_union_tmp);
            _tao_union._d (_tao_discriminant);
          }
      }
      break;
    case IF_EXE_M_R::BASE_ARC:
      {
        IF_EXE_M_R::CORBA_BaseArc _tao_union_tmp;
        result = strm >> _tao_union_tmp;

        if (result)
          {
            _tao_union.FOOVArc (_tao_union_tmp);
            _tao_union._d (_tao_discriminant);
          }
      }
      break;
    case IF_EXE_M_R::BASE_CIRCLE:
      {
        IF_EXE_M_R::CORBA_BaseCircle _tao_union_tmp;
        result = strm >> _tao_union_tmp;

        if (result)
          {
            _tao_union.FOOVCircle (_tao_union_tmp);
            _tao_union._d (_tao_discriminant);
          }
      }
      break;
    case IF_EXE_M_R::BASE_CROSS:
      {
        IF_EXE_M_R::CORBA_BaseCross _tao_union_tmp;
        result = strm >> _tao_union_tmp;

        if (result)
          {
            _tao_union.FOOVCross (_tao_union_tmp);
            _tao_union._d (_tao_discriminant);
          }
      }
      break;
    case IF_EXE_M_R::BASE_FOOG:
      {
        IF_EXE_M_R::CORBA_BaseFOOG _tao_union_tmp;
        result = strm >> _tao_union_tmp;

        if (result)
          {
            _tao_union.FOOVFOOG (_tao_union_tmp);
            _tao_union._d (_tao_discriminant);
          }
      }
      break;
    default:
      _tao_union._default ();
      // For maximum interop compatibility, force the same value as transmitted
      _tao_union._d (_tao_discriminant);
      break;
  }

  return result;
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_structure/cdr_op_cs.cpp:49

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const IF_EXE_M_R::CORBA_FOOIInPlan &_tao_aggregate)
{
  return
    (strm << _tao_aggregate.type) &&
    (strm << _tao_aggregate.data);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    IF_EXE_M_R::CORBA_FOOIInPlan &_tao_aggregate)
{
  return
    (strm >> _tao_aggregate.type) &&
    (strm >> _tao_aggregate.data);
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_sequence/cdr_op_cs.cpp:93
#if !defined _TAO_CDR_OP_IF_EXE_M_R_CORBA_FOOIList_CPP_
#define _TAO_CDR_OP_IF_EXE_M_R_CORBA_FOOIList_CPP_

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const IF_EXE_M_R::CORBA_FOOIList &_tao_sequence)
{
  return TAO::marshal_sequence(strm, _tao_sequence);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    IF_EXE_M_R::CORBA_FOOIList &_tao_sequence)
{
  return TAO::demarshal_sequence(strm, _tao_sequence);
}


TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_CDR_OP_IF_EXE_M_R_CORBA_FOOIList_CPP_ */

// TAO_IDL - Generated from
// be/be_visitor_structure/cdr_op_cs.cpp:49

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const IF_EXE_M_R::CORBA_FOOJPosition &_tao_aggregate)
{
  return
    (strm << _tao_aggregate.FOOB) &&
    (strm << _tao_aggregate.longitude) &&
    (strm << _tao_aggregate.latitude) &&
    (strm << _tao_aggregate.remark.in ()) &&
    (strm << _tao_aggregate.FOOBReference);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    IF_EXE_M_R::CORBA_FOOJPosition &_tao_aggregate)
{
  return
    (strm >> _tao_aggregate.FOOB) &&
    (strm >> _tao_aggregate.longitude) &&
    (strm >> _tao_aggregate.latitude) &&
    (strm >> _tao_aggregate.remark.out ()) &&
    (strm >> _tao_aggregate.FOOBReference);
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_sequence/cdr_op_cs.cpp:93
#if !defined _TAO_CDR_OP_IF_EXE_M_R_CORBA_FOOJPosList_CPP_
#define _TAO_CDR_OP_IF_EXE_M_R_CORBA_FOOJPosList_CPP_

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const IF_EXE_M_R::CORBA_FOOJPosList &_tao_sequence)
{
  return TAO::marshal_sequence(strm, _tao_sequence);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    IF_EXE_M_R::CORBA_FOOJPosList &_tao_sequence)
{
  return TAO::demarshal_sequence(strm, _tao_sequence);
}


TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_CDR_OP_IF_EXE_M_R_CORBA_FOOJPosList_CPP_ */

// TAO_IDL - Generated from
// be/be_visitor_sequence/cdr_op_cs.cpp:93
#if !defined _TAO_CDR_OP_IF_EXE_M_R_long_sequence_CPP_
#define _TAO_CDR_OP_IF_EXE_M_R_long_sequence_CPP_

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const IF_EXE_M_R::long_sequence &_tao_sequence)
{
  return TAO::marshal_sequence(strm, _tao_sequence);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    IF_EXE_M_R::long_sequence &_tao_sequence)
{
  return TAO::demarshal_sequence(strm, _tao_sequence);
}


TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_CDR_OP_IF_EXE_M_R_long_sequence_CPP_ */

// TAO_IDL - Generated from
// be/be_visitor_structure/cdr_op_cs.cpp:49

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const IF_EXE_M_R::CORBA_FOOHPlanHeader &_tao_aggregate)
{
  return
    (strm << _tao_aggregate.FOOHOffset) &&
    (strm << _tao_aggregate.FOOHFOOA) &&
    (strm << _tao_aggregate.FOOAReference) &&
    (strm << _tao_aggregate.FOOGSpacing) &&
    (strm << _tao_aggregate.datasetVersion) &&
    (strm << _tao_aggregate.FOOF) &&
    (strm << _tao_aggregate.centreLine) &&
    (strm << _tao_aggregate.FOOGingProcedure) &&
    (strm << _tao_aggregate.maximum2EconomyAngle);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    IF_EXE_M_R::CORBA_FOOHPlanHeader &_tao_aggregate)
{
  return
    (strm >> _tao_aggregate.FOOHOffset) &&
    (strm >> _tao_aggregate.FOOHFOOA) &&
    (strm >> _tao_aggregate.FOOAReference) &&
    (strm >> _tao_aggregate.FOOGSpacing) &&
    (strm >> _tao_aggregate.datasetVersion) &&
    (strm >> _tao_aggregate.FOOF) &&
    (strm >> _tao_aggregate.centreLine) &&
    (strm >> _tao_aggregate.FOOGingProcedure) &&
    (strm >> _tao_aggregate.maximum2EconomyAngle);
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_structure/cdr_op_cs.cpp:49

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const IF_EXE_M_R::Test_Struct &_tao_aggregate)
{
  return
    (strm << _tao_aggregate.l) &&
    (strm << _tao_aggregate.whatEver);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    IF_EXE_M_R::Test_Struct &_tao_aggregate)
{
  return
    (strm >> _tao_aggregate.l) &&
    (strm >> _tao_aggregate.whatEver);
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_interface/cdr_op_cs.cpp:51

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const IF_EXE_M_R::IF_ExeCtrlData_ptr _tao_objref)
{
  ::CORBA::Object_ptr _tao_corba_obj = _tao_objref;
  return (strm << _tao_corba_obj);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    IF_EXE_M_R::IF_ExeCtrlData_ptr &_tao_objref)
{
  ::CORBA::Object_var obj;

  if (!(strm >> obj.inout ()))
    {
      return false;
    }

  typedef ::IF_EXE_M_R::IF_ExeCtrlData RHS_SCOPED_NAME;

  // Narrow to the right type.
  _tao_objref =
    TAO::Narrow_Utils<RHS_SCOPED_NAME>::unchecked_narrow (obj.in ());

  return true;
}

TAO_END_VERSIONED_NAMESPACE_DECL



