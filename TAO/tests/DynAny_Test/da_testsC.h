// -*- C++ -*-
/**
 * Code generated by the The ACE ORB (TAO) IDL Compiler v2.4.1
 * TAO and the TAO IDL Compiler have been developed by:
 *       Center for Distributed Object Computing
 *       Washington University
 *       St. Louis, MO
 *       USA
 *       http://www.cs.wustl.edu/~schmidt/doc-center.html
 * and
 *       Distributed Object Computing Laboratory
 *       University of California at Irvine
 *       Irvine, CA
 *       USA
 * and
 *       Institute for Software Integrated Systems
 *       Vanderbilt University
 *       Nashville, TN
 *       USA
 *       http://www.isis.vanderbilt.edu/
 *
 * Information about TAO is available at:
 *     http://www.dre.vanderbilt.edu/~schmidt/TAO.html
 **/

// TAO_IDL - Generated from
// be/be_codegen.cpp:149

#ifndef _TAO_IDL_DA_TESTSC_SXNAX5_H_
#define _TAO_IDL_DA_TESTSC_SXNAX5_H_

#include /**/ "ace/pre.h"


#include /**/ "ace/config-all.h"

#if !defined (ACE_LACKS_PRAGMA_ONCE)
# pragma once
#endif /* ACE_LACKS_PRAGMA_ONCE */


#include "tao/AnyTypeCode/AnyTypeCode_methods.h"
#include "tao/AnyTypeCode/Any.h"
#include "tao/ORB.h"
#include "tao/Basic_Types.h"
#include "tao/AnyTypeCode/TypeCode.h"
#include "tao/AnyTypeCode/TypeCode_Constants.h"
#include "tao/String_Manager_T.h"
#include "tao/AnyTypeCode/BooleanSeqA.h"
#include "tao/AnyTypeCode/CharSeqA.h"
#include "tao/AnyTypeCode/DoubleSeqA.h"
#include "tao/AnyTypeCode/FloatSeqA.h"
#include "tao/AnyTypeCode/LongDoubleSeqA.h"
#include "tao/AnyTypeCode/LongSeqA.h"
#include "tao/AnyTypeCode/OctetSeqA.h"
#include "tao/AnyTypeCode/ShortSeqA.h"
#include "tao/AnyTypeCode/StringSeqA.h"
#include "tao/AnyTypeCode/ULongSeqA.h"
#include "tao/AnyTypeCode/UShortSeqA.h"
#include "tao/AnyTypeCode/WCharSeqA.h"
#include "tao/AnyTypeCode/WStringSeqA.h"
#include "tao/AnyTypeCode/LongLongSeqA.h"
#include "tao/AnyTypeCode/ULongLongSeqA.h"
#include "tao/AnyTypeCode/PolicyA.h"
#include "tao/AnyTypeCode/Policy_ManagerA.h"
#include "tao/AnyTypeCode/Policy_CurrentA.h"
#include "tao/AnyTypeCode/ServicesA.h"
#include "tao/AnyTypeCode/ParameterModeA.h"
#include "tao/AnyTypeCode/orb_typesA.h"
#include "tao/AnyTypeCode/Typecode_typesA.h"
#include "tao/AnyTypeCode/WrongTransactionA.h"
#include "tao/Sequence_T.h"
#include "tao/Seq_Var_T.h"
#include "tao/Seq_Out_T.h"
#include "tao/VarOut_T.h"
#include "tao/Array_VarOut_T.h"
#include "tao/Arg_Traits_T.h"
#include "tao/Basic_Arguments.h"
#include "tao/Special_Basic_Arguments.h"
#include "tao/Any_Insert_Policy_T.h"
#include "tao/Basic_Argument_T.h"
#include "tao/Fixed_Size_Argument_T.h"
#include "tao/Var_Size_Argument_T.h"
#include "tao/BD_String_Argument_T.h"
#include "tao/AnyTypeCode/Any.h"
#include "tao/Object_Argument_T.h"
#include "tao/UB_String_Arguments.h"
#include "tao/Fixed_Array_Argument_T.h"
#include "tao/Var_Array_Argument_T.h"
#include /**/ "tao/Version.h"
#include /**/ "tao/Versioned_Namespace.h"

#include "tao/BooleanSeqC.h"
#include "tao/CharSeqC.h"
#include "tao/DoubleSeqC.h"
#include "tao/FloatSeqC.h"
#include "tao/LongDoubleSeqC.h"
#include "tao/LongSeqC.h"
#include "tao/OctetSeqC.h"
#include "tao/ShortSeqC.h"
#include "tao/StringSeqC.h"
#include "tao/ULongSeqC.h"
#include "tao/UShortSeqC.h"
#include "tao/WCharSeqC.h"
#include "tao/WStringSeqC.h"
#include "tao/LongLongSeqC.h"
#include "tao/ULongLongSeqC.h"
#include "tao/PolicyC.h"
#include "tao/Policy_ManagerC.h"
#include "tao/Policy_CurrentC.h"
#include "tao/ServicesC.h"
#include "tao/ParameterModeC.h"
#include "tao/orb_typesC.h"
#include "tao/Typecode_typesC.h"
#include "tao/WrongTransactionC.h"

#if TAO_MAJOR_VERSION != 2 || TAO_MINOR_VERSION != 4 || TAO_MICRO_VERSION != 1
#error This file should be regenerated with TAO_IDL
#endif

#if defined (TAO_EXPORT_MACRO)
#undef TAO_EXPORT_MACRO
#endif
#define TAO_EXPORT_MACRO

// TAO_IDL - Generated from
// be/be_visitor_module/module_ch.cpp:35

namespace DynAnyTests
{

  // TAO_IDL - Generated from
  // be/be_type.cpp:258

  struct enclosed_struct;

  typedef
    ::TAO_Fixed_Var_T<
        enclosed_struct
      >
    enclosed_struct_var;

  typedef
    enclosed_struct &
    enclosed_struct_out;

  // TAO_IDL - Generated from
  // be/be_visitor_structure/structure_ch.cpp:48

  struct  enclosed_struct
  {

    // TAO_IDL - Generated from
    // be/be_type.cpp:304


    typedef enclosed_struct_var _var_type;
    typedef enclosed_struct_out _out_type;

    static void _tao_any_destructor (void *);

    ::CORBA::Float f;
    ::CORBA::Short s;
  };

  // TAO_IDL - Generated from
  // be/be_visitor_typecode/typecode_decl.cpp:34

  extern  ::CORBA::TypeCode_ptr const _tc_enclosed_struct;

  // TAO_IDL - Generated from
  // be/be_type.cpp:258

  struct test_struct;

  typedef
    ::TAO_Var_Var_T<
        test_struct
      >
    test_struct_var;

  typedef
    ::TAO_Out_T<
        test_struct
      >
    test_struct_out;

  // TAO_IDL - Generated from
  // be/be_visitor_structure/structure_ch.cpp:48

  struct  test_struct
  {

    // TAO_IDL - Generated from
    // be/be_type.cpp:304


    typedef test_struct_var _var_type;
    typedef test_struct_out _out_type;

    static void _tao_any_destructor (void *);

    ::CORBA::Char c;
    CORBA::ShortSeq ss;
    DynAnyTests::enclosed_struct es;
  };

  // TAO_IDL - Generated from
  // be/be_visitor_typecode/typecode_decl.cpp:34

  extern  ::CORBA::TypeCode_ptr const _tc_test_struct;

  // TAO_IDL - Generated from
  // be/be_visitor_sequence/sequence_ch.cpp:99

#if !defined (_DYNANYTESTS_TEST_SEQ_CH_)
#define _DYNANYTESTS_TEST_SEQ_CH_

  class test_seq;

  typedef
    ::TAO_VarSeq_Var_T<
        test_seq
      >
    test_seq_var;

  typedef
    ::TAO_Seq_Out_T<
        test_seq
      >
    test_seq_out;

  class  test_seq
    : public
        ::TAO::unbounded_bd_string_sequence<char, 8>
  {
  public:
    test_seq (void);
    test_seq ( ::CORBA::ULong max);
    test_seq (
      ::CORBA::ULong max,
      ::CORBA::ULong length,
      ::CORBA::Char ** buffer,
      ::CORBA::Boolean release = false);
    test_seq (const test_seq &);
    virtual ~test_seq (void);


    // TAO_IDL - Generated from
    // be/be_type.cpp:304


    typedef test_seq_var _var_type;
    typedef test_seq_out _out_type;

    static void _tao_any_destructor (void *);
  };

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // be/be_visitor_typecode/typecode_decl.cpp:34

  extern  ::CORBA::TypeCode_ptr const _tc_test_seq;

  // TAO_IDL - Generated from
  // be/be_visitor_sequence/sequence_ch.cpp:99

#if !defined (_DYNANYTESTS_SEQSHORT_CH_)
#define _DYNANYTESTS_SEQSHORT_CH_

  class SeqShort;

  typedef
    ::TAO_FixedSeq_Var_T<
        SeqShort
      >
    SeqShort_var;

  typedef
    ::TAO_Seq_Out_T<
        SeqShort
      >
    SeqShort_out;

  class  SeqShort
    : public
        ::TAO::unbounded_value_sequence<
            ::CORBA::Short
          >
  {
  public:
    SeqShort (void);
    SeqShort ( ::CORBA::ULong max);
    SeqShort (
      ::CORBA::ULong max,
      ::CORBA::ULong length,
      ::CORBA::Short* buffer,
      ::CORBA::Boolean release = false);
    SeqShort (const SeqShort &);
    virtual ~SeqShort (void);


    // TAO_IDL - Generated from
    // be/be_type.cpp:304


    typedef SeqShort_var _var_type;
    typedef SeqShort_out _out_type;

    static void _tao_any_destructor (void *);
  };

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // be/be_visitor_typecode/typecode_decl.cpp:34

  extern  ::CORBA::TypeCode_ptr const _tc_SeqShort;

  // TAO_IDL - Generated from
  // be/be_visitor_sequence/sequence_ch.cpp:99

#if !defined (_DYNANYTESTS_SEQBOOLEAN_CH_)
#define _DYNANYTESTS_SEQBOOLEAN_CH_

  class SeqBoolean;

  typedef
    ::TAO_FixedSeq_Var_T<
        SeqBoolean
      >
    SeqBoolean_var;

  typedef
    ::TAO_Seq_Out_T<
        SeqBoolean
      >
    SeqBoolean_out;

  class  SeqBoolean
    : public
        ::TAO::unbounded_value_sequence<
            ::CORBA::Boolean
          >
  {
  public:
    SeqBoolean (void);
    SeqBoolean ( ::CORBA::ULong max);
    SeqBoolean (
      ::CORBA::ULong max,
      ::CORBA::ULong length,
      ::CORBA::Boolean* buffer,
      ::CORBA::Boolean release = false);
    SeqBoolean (const SeqBoolean &);
    virtual ~SeqBoolean (void);


    // TAO_IDL - Generated from
    // be/be_type.cpp:304


    typedef SeqBoolean_var _var_type;
    typedef SeqBoolean_out _out_type;

    static void _tao_any_destructor (void *);
  };

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // be/be_visitor_typecode/typecode_decl.cpp:34

  extern  ::CORBA::TypeCode_ptr const _tc_SeqBoolean;

  // TAO_IDL - Generated from
  // be/be_visitor_constant/constant_ch.cpp:35

  const CORBA::ULong DIM = 2U;

  // TAO_IDL - Generated from
  // be/be_visitor_array/array_ch.cpp:52

  typedef ::CORBA::Long test_array[2];
  typedef ::CORBA::Long test_array_slice;
  struct test_array_tag {};


  typedef
    TAO_FixedArray_Var_T<
        test_array,
        test_array_slice,
        test_array_tag
      >
    test_array_var;

  typedef
    test_array
    test_array_out;

  typedef
    TAO_Array_Forany_T<
        test_array,
        test_array_slice,
        test_array_tag
      >
    test_array_forany;

  TAO_NAMESPACE_STORAGE_CLASS test_array_slice *
  test_array_alloc (void);

  TAO_NAMESPACE_STORAGE_CLASS void
  test_array_free (
      test_array_slice *_tao_slice);

  TAO_NAMESPACE_STORAGE_CLASS test_array_slice *
  test_array_dup (
      const test_array_slice *_tao_slice);

  TAO_NAMESPACE_STORAGE_CLASS void
  test_array_copy (
      test_array_slice *_tao_to,
      const test_array_slice *_tao_from);

  // TAO_IDL - Generated from
  // be/be_visitor_typecode/typecode_decl.cpp:34

  extern  ::CORBA::TypeCode_ptr const _tc_test_array;

  // TAO_IDL - Generated from
  // be/be_visitor_enum/enum_ch.cpp:44

  enum test_enum
  {
    TE_ZEROTH,
    TE_FIRST,
    TE_SECOND,
    TE_THIRD,
    TE_FOURTH
  };

  typedef test_enum &test_enum_out;

  // TAO_IDL - Generated from
  // be/be_visitor_typecode/typecode_decl.cpp:34

  extern  ::CORBA::TypeCode_ptr const _tc_test_enum;

  // TAO_IDL - Generated from
  // be/be_visitor_typedef/typedef_ch.cpp:290

  typedef test_enum Enumerated_a;
  typedef test_enum_out Enumerated_a_out;

  // TAO_IDL - Generated from
  // be/be_visitor_typecode/typecode_decl.cpp:34

  extern  ::CORBA::TypeCode_ptr const _tc_Enumerated_a;

  // TAO_IDL - Generated from
  // be/be_visitor_typedef/typedef_ch.cpp:290

  typedef test_enum Enumerated_b;
  typedef test_enum_out Enumerated_b_out;

  // TAO_IDL - Generated from
  // be/be_visitor_typecode/typecode_decl.cpp:34

  extern  ::CORBA::TypeCode_ptr const _tc_Enumerated_b;

  // TAO_IDL - Generated from
  // be/be_visitor_typedef/typedef_ch.cpp:290

  typedef test_enum Enumerated_c;
  typedef test_enum_out Enumerated_c_out;

  // TAO_IDL - Generated from
  // be/be_visitor_typecode/typecode_decl.cpp:34

  extern  ::CORBA::TypeCode_ptr const _tc_Enumerated_c;

  // TAO_IDL - Generated from
  // be/be_type.cpp:258

  struct StructTypedefEnum;

  typedef
    ::TAO_Fixed_Var_T<
        StructTypedefEnum
      >
    StructTypedefEnum_var;

  typedef
    StructTypedefEnum &
    StructTypedefEnum_out;

  // TAO_IDL - Generated from
  // be/be_visitor_structure/structure_ch.cpp:48

  struct  StructTypedefEnum
  {

    // TAO_IDL - Generated from
    // be/be_type.cpp:304


    typedef StructTypedefEnum_var _var_type;
    typedef StructTypedefEnum_out _out_type;

    static void _tao_any_destructor (void *);

    DynAnyTests::Enumerated_a field_1;
    DynAnyTests::Enumerated_b field_2;
    DynAnyTests::Enumerated_c field_3;
  };

  // TAO_IDL - Generated from
  // be/be_visitor_typecode/typecode_decl.cpp:34

  extern  ::CORBA::TypeCode_ptr const _tc_StructTypedefEnum;

  // TAO_IDL - Generated from
  // be/be_type.cpp:258

  class test_union;

  typedef
    ::TAO_Var_Var_T<
        test_union
      >
    test_union_var;

  typedef
    ::TAO_Out_T<
        test_union
      >
    test_union_out;

  class  test_union
  {
  public:
    test_union (void);
    test_union (const test_union &);
    ~test_union (void);

    test_union &operator= (const test_union &);

    // TAO_IDL - Generated from
    // be/be_visitor_union/discriminant_ch.cpp:67

    void _d (DynAnyTests::test_enum);
    DynAnyTests::test_enum _d (void) const;

    // TAO_IDL - Generated from
    // be/be_type.cpp:304


    typedef test_union_var _var_type;
    typedef test_union_out _out_type;

    static void _tao_any_destructor (void *);

    // TAO_IDL - Generated from
    // be/be_visitor_union_branch/public_ch.cpp:449

    void tc (const ::CORBA::TypeCode_ptr);
    ::CORBA::TypeCode_ptr tc (void) const;

    // TAO_IDL - Generated from
    // be/be_visitor_union_branch/public_ch.cpp:189

    void te (DynAnyTests::test_enum);
    DynAnyTests::test_enum te (void) const;

    // TAO_IDL - Generated from
    // be/be_visitor_union_branch/public_ch.cpp:449

    void s ( ::CORBA::Short);
    ::CORBA::Short s (void) const;

    // TAO_IDL - Generated from
    // be/be_visitor_union_branch/public_ch.cpp:580

    void str (char *);
    void str (const char *);
    void str (const ::CORBA::String_var&);
    const char *str (void) const;

    // TAO_IDL - Generated from
    // be/be_visitor_union_branch/public_ch.cpp:449

    void o ( ::CORBA::Octet);
    ::CORBA::Octet o (void) const;
  private:
    DynAnyTests::test_enum disc_;

    union
    {
      // TAO_IDL - Generated from
      // be/be_visitor_union_branch/private_ch.cpp:377
      ::CORBA::TypeCode_ptr tc_;
      // TAO_IDL - Generated from
      // be/be_visitor_union_branch/private_ch.cpp:140
      DynAnyTests::test_enum te_;
      // TAO_IDL - Generated from
      // be/be_visitor_union_branch/private_ch.cpp:377
      ::CORBA::Short s_;
      // TAO_IDL - Generated from
      // be/be_visitor_union_branch/private_ch.cpp:474
      char *str_;
      // TAO_IDL - Generated from
      // be/be_visitor_union_branch/private_ch.cpp:377
      ::CORBA::Octet o_;
    } u_;

    /// TAO extension - frees any allocated storage.
    void _reset (void);
  };

  // TAO_IDL - Generated from
  // be/be_visitor_typecode/typecode_decl.cpp:34

  extern  ::CORBA::TypeCode_ptr const _tc_test_union;

  // TAO_IDL - Generated from
  // be/be_visitor_typedef/typedef_ch.cpp:510

  typedef test_struct test_struct_alias;
  typedef test_struct_var test_struct_alias_var;
  typedef test_struct_out test_struct_alias_out;

  // TAO_IDL - Generated from
  // be/be_visitor_typecode/typecode_decl.cpp:34

  extern  ::CORBA::TypeCode_ptr const _tc_test_struct_alias;

  // TAO_IDL - Generated from
  // be/be_visitor_typedef/typedef_ch.cpp:556

  typedef test_union test_union_alias;
  typedef test_union_var test_union_alias_var;
  typedef test_union_out test_union_alias_out;

  // TAO_IDL - Generated from
  // be/be_visitor_typecode/typecode_decl.cpp:34

  extern  ::CORBA::TypeCode_ptr const _tc_test_union_alias;

  // TAO_IDL - Generated from
  // be/be_type.cpp:258

  class test_implicit_def;

  typedef
    ::TAO_Fixed_Var_T<
        test_implicit_def
      >
    test_implicit_def_var;

  typedef
    test_implicit_def &
    test_implicit_def_out;

  class  test_implicit_def
  {
  public:
    test_implicit_def (void);
    test_implicit_def (const test_implicit_def &);
    ~test_implicit_def (void);

    test_implicit_def &operator= (const test_implicit_def &);

    // TAO_IDL - Generated from
    // be/be_visitor_union/discriminant_ch.cpp:100

    void _d ( ::CORBA::Boolean);
    ::CORBA::Boolean _d (void) const;

    // TAO_IDL - Generated from
    // be/be_type.cpp:304


    typedef test_implicit_def_var _var_type;
    typedef test_implicit_def_out _out_type;

    static void _tao_any_destructor (void *);

    // TAO_IDL - Generated from
    // be/be_visitor_union_branch/public_ch.cpp:189

    void tenum (DynAnyTests::test_enum);
    DynAnyTests::test_enum tenum (void) const;

    // TAO_IDL - Generated from
    // be/be_visitor_union/union_ch.cpp:121

    void _default (void);
  private:
    ::CORBA::Boolean disc_;

    union
    {
      // TAO_IDL - Generated from
      // be/be_visitor_union_branch/private_ch.cpp:140
      DynAnyTests::test_enum tenum_;
    } u_;

    /// TAO extension - frees any allocated storage.
    void _reset (void);
  };

  // TAO_IDL - Generated from
  // be/be_visitor_typecode/typecode_decl.cpp:34

  extern  ::CORBA::TypeCode_ptr const _tc_test_implicit_def;

  // TAO_IDL - Generated from
  // be/be_type.cpp:258

  class test_union_no_active_member;

  typedef
    ::TAO_Var_Var_T<
        test_union_no_active_member
      >
    test_union_no_active_member_var;

  typedef
    ::TAO_Out_T<
        test_union_no_active_member
      >
    test_union_no_active_member_out;

  class  test_union_no_active_member
  {
  public:
    test_union_no_active_member (void);
    test_union_no_active_member (const test_union_no_active_member &);
    ~test_union_no_active_member (void);

    test_union_no_active_member &operator= (const test_union_no_active_member &);

    // TAO_IDL - Generated from
    // be/be_visitor_union/discriminant_ch.cpp:100

    void _d ( ::CORBA::Long);
    ::CORBA::Long _d (void) const;

    // TAO_IDL - Generated from
    // be/be_type.cpp:304


    typedef test_union_no_active_member_var _var_type;
    typedef test_union_no_active_member_out _out_type;

    static void _tao_any_destructor (void *);

    // TAO_IDL - Generated from
    // be/be_visitor_union_branch/public_ch.cpp:449

    void field_long ( ::CORBA::Long);
    ::CORBA::Long field_long (void) const;

    // TAO_IDL - Generated from
    // be/be_visitor_union_branch/public_ch.cpp:580

    void field_string (char *);
    void field_string (const char *);
    void field_string (const ::CORBA::String_var&);
    const char *field_string (void) const;

    // TAO_IDL - Generated from
    // be/be_visitor_union/union_ch.cpp:121

    void _default (void);
  private:
    ::CORBA::Long disc_;

    union
    {
      // TAO_IDL - Generated from
      // be/be_visitor_union_branch/private_ch.cpp:377
      ::CORBA::Long field_long_;
      // TAO_IDL - Generated from
      // be/be_visitor_union_branch/private_ch.cpp:474
      char *field_string_;
    } u_;

    /// TAO extension - frees any allocated storage.
    void _reset (void);
  };

  // TAO_IDL - Generated from
  // be/be_visitor_typecode/typecode_decl.cpp:34

  extern  ::CORBA::TypeCode_ptr const _tc_test_union_no_active_member;

  // TAO_IDL - Generated from
  // be/be_type.cpp:258

  struct test_struct_with_long_double;

  typedef
    ::TAO_Fixed_Var_T<
        test_struct_with_long_double
      >
    test_struct_with_long_double_var;

  typedef
    test_struct_with_long_double &
    test_struct_with_long_double_out;

  // TAO_IDL - Generated from
  // be/be_visitor_structure/structure_ch.cpp:48

  struct  test_struct_with_long_double
  {

    // TAO_IDL - Generated from
    // be/be_type.cpp:304


    typedef test_struct_with_long_double_var _var_type;
    typedef test_struct_with_long_double_out _out_type;

    static void _tao_any_destructor (void *);

    ::CORBA::LongDouble field_longdouble;
  };

  // TAO_IDL - Generated from
  // be/be_visitor_typecode/typecode_decl.cpp:34

  extern  ::CORBA::TypeCode_ptr const _tc_test_struct_with_long_double;

// TAO_IDL - Generated from
// be/be_visitor_module/module_ch.cpp:64

} // module DynAnyTests

// TAO_IDL - Generated from
// be/be_visitor_arg_traits.cpp:66

TAO_BEGIN_VERSIONED_NAMESPACE_DECL


// Arg traits specializations.
namespace TAO
{

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:945

  template<>
  class Arg_Traits< ::DynAnyTests::enclosed_struct>
    : public
        Fixed_Size_Arg_Traits_T<
            ::DynAnyTests::enclosed_struct,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:945

  template<>
  class Arg_Traits< ::DynAnyTests::test_struct>
    : public
        Var_Size_Arg_Traits_T<
            ::DynAnyTests::test_struct,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:683

  template<>
  class Arg_Traits< ::DynAnyTests::test_seq>
    : public
        Var_Size_Arg_Traits_T<
            ::DynAnyTests::test_seq,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:683

  template<>
  class Arg_Traits< ::DynAnyTests::SeqShort>
    : public
        Var_Size_Arg_Traits_T<
            ::DynAnyTests::SeqShort,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:683

  template<>
  class Arg_Traits< ::DynAnyTests::SeqBoolean>
    : public
        Var_Size_Arg_Traits_T<
            ::DynAnyTests::SeqBoolean,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

  template<>
  class Arg_Traits< ::DynAnyTests::test_array_tag>
    : public
        Fixed_Array_Arg_Traits_T<
            ::DynAnyTests::test_array_var,
            ::DynAnyTests::test_array_forany,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:902

  template<>
  class Arg_Traits< ::DynAnyTests::test_enum>
    : public
        Basic_Arg_Traits_T<
            ::DynAnyTests::test_enum,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:945

  template<>
  class Arg_Traits< ::DynAnyTests::StructTypedefEnum>
    : public
        Fixed_Size_Arg_Traits_T<
            ::DynAnyTests::StructTypedefEnum,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:1056

  template<>
  class Arg_Traits< ::DynAnyTests::test_union>
    : public
        Var_Size_Arg_Traits_T<
            ::DynAnyTests::test_union,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:1056

  template<>
  class Arg_Traits< ::DynAnyTests::test_implicit_def>
    : public
        Fixed_Size_Arg_Traits_T<
            ::DynAnyTests::test_implicit_def,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:1056

  template<>
  class Arg_Traits< ::DynAnyTests::test_union_no_active_member>
    : public
        Var_Size_Arg_Traits_T<
            ::DynAnyTests::test_union_no_active_member,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:945

  template<>
  class Arg_Traits< ::DynAnyTests::test_struct_with_long_double>
    : public
        Fixed_Size_Arg_Traits_T<
            ::DynAnyTests::test_struct_with_long_double,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_traits.cpp:60

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Traits specializations.
namespace TAO
{
  template<>
  struct  Array_Traits<
      DynAnyTests::test_array_forany
    >
  {
    static void free (
        DynAnyTests::test_array_slice * _tao_slice);
    static DynAnyTests::test_array_slice * dup (
        const DynAnyTests::test_array_slice * _tao_slice);
    static void copy (
        DynAnyTests::test_array_slice * _tao_to,
        const DynAnyTests::test_array_slice * _tao_from);
    static DynAnyTests::test_array_slice * alloc (void);
    static void zero (
        DynAnyTests::test_array_slice * _tao_slice);
  };
}
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_structure/any_op_ch.cpp:42



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace DynAnyTests
{
   void operator<<= (::CORBA::Any &, const ::DynAnyTests::enclosed_struct &); // copying version
   void operator<<= (::CORBA::Any &, ::DynAnyTests::enclosed_struct*); // noncopying version
   ::CORBA::Boolean operator>>= (const ::CORBA::Any &, ::DynAnyTests::enclosed_struct *&); // deprecated
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const ::DynAnyTests::enclosed_struct *&);
}

#else


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 void operator<<= (::CORBA::Any &, const DynAnyTests::enclosed_struct &); // copying version
 void operator<<= (::CORBA::Any &, DynAnyTests::enclosed_struct*); // noncopying version
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, DynAnyTests::enclosed_struct *&); // deprecated
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const DynAnyTests::enclosed_struct *&);
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_structure/any_op_ch.cpp:42



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace DynAnyTests
{
   void operator<<= (::CORBA::Any &, const ::DynAnyTests::test_struct &); // copying version
   void operator<<= (::CORBA::Any &, ::DynAnyTests::test_struct*); // noncopying version
   ::CORBA::Boolean operator>>= (const ::CORBA::Any &, ::DynAnyTests::test_struct *&); // deprecated
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const ::DynAnyTests::test_struct *&);
}

#else


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 void operator<<= (::CORBA::Any &, const DynAnyTests::test_struct &); // copying version
 void operator<<= (::CORBA::Any &, DynAnyTests::test_struct*); // noncopying version
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, DynAnyTests::test_struct *&); // deprecated
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const DynAnyTests::test_struct *&);
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_sequence/any_op_ch.cpp:47



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace DynAnyTests
{
   void operator<<= ( ::CORBA::Any &, const ::DynAnyTests::test_seq &); // copying version
   void operator<<= ( ::CORBA::Any &, ::DynAnyTests::test_seq*); // noncopying version
   ::CORBA::Boolean operator>>= (const ::CORBA::Any &, ::DynAnyTests::test_seq *&); // deprecated
   ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const ::DynAnyTests::test_seq *&);
}

#else


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 void operator<<= ( ::CORBA::Any &, const DynAnyTests::test_seq &); // copying version
 void operator<<= ( ::CORBA::Any &, DynAnyTests::test_seq*); // noncopying version
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, DynAnyTests::test_seq *&); // deprecated
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const DynAnyTests::test_seq *&);
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_sequence/any_op_ch.cpp:47



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace DynAnyTests
{
   void operator<<= ( ::CORBA::Any &, const ::DynAnyTests::SeqShort &); // copying version
   void operator<<= ( ::CORBA::Any &, ::DynAnyTests::SeqShort*); // noncopying version
   ::CORBA::Boolean operator>>= (const ::CORBA::Any &, ::DynAnyTests::SeqShort *&); // deprecated
   ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const ::DynAnyTests::SeqShort *&);
}

#else


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 void operator<<= ( ::CORBA::Any &, const DynAnyTests::SeqShort &); // copying version
 void operator<<= ( ::CORBA::Any &, DynAnyTests::SeqShort*); // noncopying version
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, DynAnyTests::SeqShort *&); // deprecated
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const DynAnyTests::SeqShort *&);
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_sequence/any_op_ch.cpp:47



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace DynAnyTests
{
   void operator<<= ( ::CORBA::Any &, const ::DynAnyTests::SeqBoolean &); // copying version
   void operator<<= ( ::CORBA::Any &, ::DynAnyTests::SeqBoolean*); // noncopying version
   ::CORBA::Boolean operator>>= (const ::CORBA::Any &, ::DynAnyTests::SeqBoolean *&); // deprecated
   ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const ::DynAnyTests::SeqBoolean *&);
}

#else


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 void operator<<= ( ::CORBA::Any &, const DynAnyTests::SeqBoolean &); // copying version
 void operator<<= ( ::CORBA::Any &, DynAnyTests::SeqBoolean*); // noncopying version
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, DynAnyTests::SeqBoolean *&); // deprecated
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const DynAnyTests::SeqBoolean *&);
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_array/any_op_ch.cpp:37


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 void operator<<= (::CORBA::Any &, const DynAnyTests::test_array_forany &);
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, DynAnyTests::test_array_forany &);
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_enum/any_op_ch.cpp:36

#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace DynAnyTests
{


   void operator<<= (::CORBA::Any &, ::DynAnyTests::test_enum);
   ::CORBA::Boolean operator>>= (const ::CORBA::Any &, ::DynAnyTests::test_enum &);
}

#else


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



 void operator<<= (::CORBA::Any &, DynAnyTests::test_enum);
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, DynAnyTests::test_enum &);
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_structure/any_op_ch.cpp:42



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace DynAnyTests
{
   void operator<<= (::CORBA::Any &, const ::DynAnyTests::StructTypedefEnum &); // copying version
   void operator<<= (::CORBA::Any &, ::DynAnyTests::StructTypedefEnum*); // noncopying version
   ::CORBA::Boolean operator>>= (const ::CORBA::Any &, ::DynAnyTests::StructTypedefEnum *&); // deprecated
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const ::DynAnyTests::StructTypedefEnum *&);
}

#else


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 void operator<<= (::CORBA::Any &, const DynAnyTests::StructTypedefEnum &); // copying version
 void operator<<= (::CORBA::Any &, DynAnyTests::StructTypedefEnum*); // noncopying version
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, DynAnyTests::StructTypedefEnum *&); // deprecated
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const DynAnyTests::StructTypedefEnum *&);
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_union/any_op_ch.cpp:37



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace DynAnyTests
{
   void operator<<= (::CORBA::Any &, const ::DynAnyTests::test_union &); // copying version
   void operator<<= (::CORBA::Any &, ::DynAnyTests::test_union*); // noncopying version
   ::CORBA::Boolean operator>>= (const ::CORBA::Any &, ::DynAnyTests::test_union *&); // deprecated
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const ::DynAnyTests::test_union *&);
}

#else


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 void operator<<= (::CORBA::Any &, const DynAnyTests::test_union &); // copying version
 void operator<<= (::CORBA::Any &, DynAnyTests::test_union*); // noncopying version
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, DynAnyTests::test_union *&); // deprecated
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const DynAnyTests::test_union *&);
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_union/any_op_ch.cpp:37



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace DynAnyTests
{
   void operator<<= (::CORBA::Any &, const ::DynAnyTests::test_implicit_def &); // copying version
   void operator<<= (::CORBA::Any &, ::DynAnyTests::test_implicit_def*); // noncopying version
   ::CORBA::Boolean operator>>= (const ::CORBA::Any &, ::DynAnyTests::test_implicit_def *&); // deprecated
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const ::DynAnyTests::test_implicit_def *&);
}

#else


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 void operator<<= (::CORBA::Any &, const DynAnyTests::test_implicit_def &); // copying version
 void operator<<= (::CORBA::Any &, DynAnyTests::test_implicit_def*); // noncopying version
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, DynAnyTests::test_implicit_def *&); // deprecated
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const DynAnyTests::test_implicit_def *&);
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_union/any_op_ch.cpp:37



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace DynAnyTests
{
   void operator<<= (::CORBA::Any &, const ::DynAnyTests::test_union_no_active_member &); // copying version
   void operator<<= (::CORBA::Any &, ::DynAnyTests::test_union_no_active_member*); // noncopying version
   ::CORBA::Boolean operator>>= (const ::CORBA::Any &, ::DynAnyTests::test_union_no_active_member *&); // deprecated
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const ::DynAnyTests::test_union_no_active_member *&);
}

#else


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 void operator<<= (::CORBA::Any &, const DynAnyTests::test_union_no_active_member &); // copying version
 void operator<<= (::CORBA::Any &, DynAnyTests::test_union_no_active_member*); // noncopying version
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, DynAnyTests::test_union_no_active_member *&); // deprecated
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const DynAnyTests::test_union_no_active_member *&);
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_structure/any_op_ch.cpp:42



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace DynAnyTests
{
   void operator<<= (::CORBA::Any &, const ::DynAnyTests::test_struct_with_long_double &); // copying version
   void operator<<= (::CORBA::Any &, ::DynAnyTests::test_struct_with_long_double*); // noncopying version
   ::CORBA::Boolean operator>>= (const ::CORBA::Any &, ::DynAnyTests::test_struct_with_long_double *&); // deprecated
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const ::DynAnyTests::test_struct_with_long_double *&);
}

#else


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 void operator<<= (::CORBA::Any &, const DynAnyTests::test_struct_with_long_double &); // copying version
 void operator<<= (::CORBA::Any &, DynAnyTests::test_struct_with_long_double*); // noncopying version
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, DynAnyTests::test_struct_with_long_double *&); // deprecated
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const DynAnyTests::test_struct_with_long_double *&);
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_structure/cdr_op_ch.cpp:43


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 ::CORBA::Boolean operator<< (TAO_OutputCDR &, const DynAnyTests::enclosed_struct &);
 ::CORBA::Boolean operator>> (TAO_InputCDR &, DynAnyTests::enclosed_struct &);

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_structure/cdr_op_ch.cpp:43


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 ::CORBA::Boolean operator<< (TAO_OutputCDR &, const DynAnyTests::test_struct &);
 ::CORBA::Boolean operator>> (TAO_InputCDR &, DynAnyTests::test_struct &);

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_sequence/cdr_op_ch.cpp:65

#if !defined _TAO_CDR_OP_DynAnyTests_test_seq_H_
#define _TAO_CDR_OP_DynAnyTests_test_seq_H_
TAO_BEGIN_VERSIONED_NAMESPACE_DECL


 ::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const DynAnyTests::test_seq &_tao_sequence);
 ::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    DynAnyTests::test_seq &_tao_sequence);

TAO_END_VERSIONED_NAMESPACE_DECL



#endif /* _TAO_CDR_OP_DynAnyTests_test_seq_H_ */

// TAO_IDL - Generated from
// be/be_visitor_sequence/cdr_op_ch.cpp:65

#if !defined _TAO_CDR_OP_DynAnyTests_SeqShort_H_
#define _TAO_CDR_OP_DynAnyTests_SeqShort_H_
TAO_BEGIN_VERSIONED_NAMESPACE_DECL


 ::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const DynAnyTests::SeqShort &_tao_sequence);
 ::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    DynAnyTests::SeqShort &_tao_sequence);

TAO_END_VERSIONED_NAMESPACE_DECL



#endif /* _TAO_CDR_OP_DynAnyTests_SeqShort_H_ */

// TAO_IDL - Generated from
// be/be_visitor_sequence/cdr_op_ch.cpp:65

#if !defined _TAO_CDR_OP_DynAnyTests_SeqBoolean_H_
#define _TAO_CDR_OP_DynAnyTests_SeqBoolean_H_
TAO_BEGIN_VERSIONED_NAMESPACE_DECL


 ::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const DynAnyTests::SeqBoolean &_tao_sequence);
 ::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    DynAnyTests::SeqBoolean &_tao_sequence);

TAO_END_VERSIONED_NAMESPACE_DECL



#endif /* _TAO_CDR_OP_DynAnyTests_SeqBoolean_H_ */

// TAO_IDL - Generated from
// be/be_visitor_array/cdr_op_ch.cpp:99


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 CORBA::Boolean operator<< (TAO_OutputCDR &strm, const DynAnyTests::test_array_forany &_tao_array);
 ::CORBA::Boolean operator>> (TAO_InputCDR &, DynAnyTests::test_array_forany &_tao_array);

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// be/be_visitor_enum/cdr_op_ch.cpp:34


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 ::CORBA::Boolean operator<< (TAO_OutputCDR &strm, DynAnyTests::test_enum _tao_enumerator);
 ::CORBA::Boolean operator>> (TAO_InputCDR &strm, DynAnyTests::test_enum &_tao_enumerator);

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_structure/cdr_op_ch.cpp:43


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 ::CORBA::Boolean operator<< (TAO_OutputCDR &, const DynAnyTests::StructTypedefEnum &);
 ::CORBA::Boolean operator>> (TAO_InputCDR &, DynAnyTests::StructTypedefEnum &);

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_union/cdr_op_ch.cpp:38


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 ::CORBA::Boolean operator<< (TAO_OutputCDR &, const DynAnyTests::test_union &);
 ::CORBA::Boolean operator>> (TAO_InputCDR &, DynAnyTests::test_union &);

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_union/cdr_op_ch.cpp:38


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 ::CORBA::Boolean operator<< (TAO_OutputCDR &, const DynAnyTests::test_implicit_def &);
 ::CORBA::Boolean operator>> (TAO_InputCDR &, DynAnyTests::test_implicit_def &);

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_union/cdr_op_ch.cpp:38


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 ::CORBA::Boolean operator<< (TAO_OutputCDR &, const DynAnyTests::test_union_no_active_member &);
 ::CORBA::Boolean operator>> (TAO_InputCDR &, DynAnyTests::test_union_no_active_member &);

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_structure/cdr_op_ch.cpp:43


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 ::CORBA::Boolean operator<< (TAO_OutputCDR &, const DynAnyTests::test_struct_with_long_double &);
 ::CORBA::Boolean operator>> (TAO_InputCDR &, DynAnyTests::test_struct_with_long_double &);

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_codegen.cpp:1700
#if defined (__ACE_INLINE__)
#include "da_testsC.inl"
#endif /* defined INLINE */

#include /**/ "ace/post.h"

#endif /* ifndef */

