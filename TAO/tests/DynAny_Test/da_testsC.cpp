// -*- C++ -*-
/**
 * Code generated by the The ACE ORB (TAO) IDL Compiler v2.4.1
 * TAO and the TAO IDL Compiler have been developed by:
 *       Center for Distributed Object Computing
 *       Washington University
 *       St. Louis, MO
 *       USA
 *       http://www.cs.wustl.edu/~schmidt/doc-center.html
 * and
 *       Distributed Object Computing Laboratory
 *       University of California at Irvine
 *       Irvine, CA
 *       USA
 * and
 *       Institute for Software Integrated Systems
 *       Vanderbilt University
 *       Nashville, TN
 *       USA
 *       http://www.isis.vanderbilt.edu/
 *
 * Information about TAO is available at:
 *     http://www.dre.vanderbilt.edu/~schmidt/TAO.html
 **/

// TAO_IDL - Generated from
// be/be_codegen.cpp:373


#include "da_testsC.h"
#include "tao/AnyTypeCode/Null_RefCount_Policy.h"
#include "tao/AnyTypeCode/TypeCode_Constants.h"
#include "tao/AnyTypeCode/Alias_TypeCode_Static.h"
#include "tao/AnyTypeCode/Enum_TypeCode_Static.h"
#include "tao/AnyTypeCode/Sequence_TypeCode_Static.h"
#include "tao/AnyTypeCode/String_TypeCode_Static.h"
#include "tao/AnyTypeCode/Struct_TypeCode_Static.h"
#include "tao/AnyTypeCode/TypeCode_Struct_Field.h"
#include "tao/AnyTypeCode/TypeCode_Case_T.h"
#include "tao/AnyTypeCode/Union_TypeCode_Static.h"
#include "tao/CDR.h"
#include "tao/CDR.h"
#include "tao/AnyTypeCode/Any_Dual_Impl_T.h"
#include "tao/AnyTypeCode/Any_Array_Impl_T.h"
#include "tao/AnyTypeCode/Any_Basic_Impl_T.h"
#include "ace/OS_NS_string.h"

#if !defined (__ACE_INLINE__)
#include "da_testsC.inl"
#endif /* !defined INLINE */

// TAO_IDL - Generated from
// be/be_visitor_typecode/struct_typecode.cpp:86

static TAO::TypeCode::Struct_Field<
  char const *,
  ::CORBA::TypeCode_ptr const *> const
    _tao_fields_DynAnyTests_enclosed_struct[] =
      {
        { "f", &CORBA::_tc_float },
        { "s", &CORBA::_tc_short }
      };

static TAO::TypeCode::Struct<
  char const *,
  ::CORBA::TypeCode_ptr const *,
  TAO::TypeCode::Struct_Field<
    char const *,
    ::CORBA::TypeCode_ptr const *> const *,
  TAO::Null_RefCount_Policy>
_tao_tc_DynAnyTests_enclosed_struct (
  ::CORBA::tk_struct,
  "IDL:DynAnyTests/enclosed_struct:1.0",
  "enclosed_struct",
  _tao_fields_DynAnyTests_enclosed_struct,
  2);


namespace DynAnyTests
{
  ::CORBA::TypeCode_ptr const _tc_enclosed_struct =
    &_tao_tc_DynAnyTests_enclosed_struct;
}

// TAO_IDL - Generated from
// be/be_visitor_structure/structure_cs.cpp:56

void
DynAnyTests::enclosed_struct::_tao_any_destructor (
    void *_tao_void_pointer)
{
  enclosed_struct *_tao_tmp_pointer =
    static_cast<enclosed_struct *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

// TAO_IDL - Generated from
// be/be_visitor_typecode/struct_typecode.cpp:86



// TAO_IDL - Generated from
// be/be_visitor_typecode/typecode_defn.cpp:461

static TAO::TypeCode::Struct_Field<
  char const *,
  ::CORBA::TypeCode_ptr const *> const
    _tao_fields_DynAnyTests_test_struct[] =
      {
        { "c", &CORBA::_tc_char },
        { "ss", &CORBA::_tc_ShortSeq },
        { "es", &DynAnyTests::_tc_enclosed_struct }
      };

static TAO::TypeCode::Struct<
  char const *,
  ::CORBA::TypeCode_ptr const *,
  TAO::TypeCode::Struct_Field<
    char const *,
    ::CORBA::TypeCode_ptr const *> const *,
  TAO::Null_RefCount_Policy>
_tao_tc_DynAnyTests_test_struct (
  ::CORBA::tk_struct,
  "IDL:DynAnyTests/test_struct:1.0",
  "test_struct",
  _tao_fields_DynAnyTests_test_struct,
  3);


namespace DynAnyTests
{
  ::CORBA::TypeCode_ptr const _tc_test_struct =
    &_tao_tc_DynAnyTests_test_struct;
}

// TAO_IDL - Generated from
// be/be_visitor_structure/structure_cs.cpp:56

void
DynAnyTests::test_struct::_tao_any_destructor (
    void *_tao_void_pointer)
{
  test_struct *_tao_tmp_pointer =
    static_cast<test_struct *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

// TAO_IDL - Generated from
// be/be_visitor_sequence/sequence_cs.cpp:70

#if !defined (_DYNANYTESTS_TEST_SEQ_CS_)
#define _DYNANYTESTS_TEST_SEQ_CS_

DynAnyTests::test_seq::test_seq (void)
{}

DynAnyTests::test_seq::test_seq (
    ::CORBA::ULong max)
  : ::TAO::unbounded_bd_string_sequence<char, 8> (max)
{}

DynAnyTests::test_seq::test_seq (
    ::CORBA::ULong max,
    ::CORBA::ULong length,
    ::CORBA::Char * * buffer,
    ::CORBA::Boolean release
  )
  : ::TAO::unbounded_bd_string_sequence<char, 8>
    (max, length, buffer, release)
{}

DynAnyTests::test_seq::test_seq (
    const test_seq &seq)
  : ::TAO::unbounded_bd_string_sequence<char, 8> (seq)
{}

DynAnyTests::test_seq::~test_seq (void)
{}

void DynAnyTests::test_seq::_tao_any_destructor (
    void * _tao_void_pointer)
{
  test_seq * _tao_tmp_pointer =
    static_cast<test_seq *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

#endif /* end #if !defined */

// TAO_IDL - Generated from
// be/be_visitor_typecode/alias_typecode.cpp:49



// TAO_IDL - Generated from
// be/be_visitor_typecode/typecode_defn.cpp:461



// TAO_IDL - Generated from
// be/be_visitor_typecode/typecode_defn.cpp:556


#ifndef _TAO_TYPECODE_CORBA_STRING_8_GUARD
#define _TAO_TYPECODE_CORBA_STRING_8_GUARD

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

namespace TAO
{
  namespace TypeCode
  {
    namespace
    {
      TAO::TypeCode::String<TAO::Null_RefCount_Policy>
        CORBA_STRING_8 (
          ::CORBA::tk_string,
          8U);

      ::CORBA::TypeCode_ptr const tc_CORBA_STRING_8 =
        &CORBA_STRING_8;
    }
  }
}

TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_TYPECODE_CORBA_STRING_8_GUARD */


#ifndef _TAO_TYPECODE_DynAnyTests_test_seq_GUARD
#define _TAO_TYPECODE_DynAnyTests_test_seq_GUARD

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

namespace TAO
{
  namespace TypeCode
  {
    namespace
    {
      TAO::TypeCode::Sequence< ::CORBA::TypeCode_ptr const *,
                              TAO::Null_RefCount_Policy>
        DynAnyTests_test_seq_0 (
          ::CORBA::tk_sequence,
          &TAO::TypeCode::tc_CORBA_STRING_8,
          0U);

      ::CORBA::TypeCode_ptr const tc_DynAnyTests_test_seq_0 =
        &DynAnyTests_test_seq_0;
    }
  }
}

TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_TYPECODE_DynAnyTests_test_seq_GUARD */

static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_DynAnyTests_test_seq (
    ::CORBA::tk_alias,
    "IDL:DynAnyTests/test_seq:1.0",
    "test_seq",
    &TAO::TypeCode::tc_DynAnyTests_test_seq_0);


namespace DynAnyTests
{
  ::CORBA::TypeCode_ptr const _tc_test_seq =
    &_tao_tc_DynAnyTests_test_seq;
}

// TAO_IDL - Generated from
// be/be_visitor_sequence/sequence_cs.cpp:70

#if !defined (_DYNANYTESTS_SEQSHORT_CS_)
#define _DYNANYTESTS_SEQSHORT_CS_

DynAnyTests::SeqShort::SeqShort (void)
{}

DynAnyTests::SeqShort::SeqShort (
    ::CORBA::ULong max)
  : ::TAO::unbounded_value_sequence<
        ::CORBA::Short
      > (max)
{}

DynAnyTests::SeqShort::SeqShort (
    ::CORBA::ULong max,
    ::CORBA::ULong length,
    ::CORBA::Short * buffer,
    ::CORBA::Boolean release
  )
  : ::TAO::unbounded_value_sequence<
        ::CORBA::Short
      >
    (max, length, buffer, release)
{}

DynAnyTests::SeqShort::SeqShort (
    const SeqShort &seq)
  : ::TAO::unbounded_value_sequence<
        ::CORBA::Short
      > (seq)
{}

DynAnyTests::SeqShort::~SeqShort (void)
{}

void DynAnyTests::SeqShort::_tao_any_destructor (
    void * _tao_void_pointer)
{
  SeqShort * _tao_tmp_pointer =
    static_cast<SeqShort *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

#endif /* end #if !defined */

// TAO_IDL - Generated from
// be/be_visitor_typecode/alias_typecode.cpp:49



// TAO_IDL - Generated from
// be/be_visitor_typecode/typecode_defn.cpp:461


#ifndef _TAO_TYPECODE_DynAnyTests_SeqShort_GUARD
#define _TAO_TYPECODE_DynAnyTests_SeqShort_GUARD

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

namespace TAO
{
  namespace TypeCode
  {
    namespace
    {
      TAO::TypeCode::Sequence< ::CORBA::TypeCode_ptr const *,
                              TAO::Null_RefCount_Policy>
        DynAnyTests_SeqShort_0 (
          ::CORBA::tk_sequence,
          &CORBA::_tc_short,
          0U);

      ::CORBA::TypeCode_ptr const tc_DynAnyTests_SeqShort_0 =
        &DynAnyTests_SeqShort_0;
    }
  }
}

TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_TYPECODE_DynAnyTests_SeqShort_GUARD */

static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_DynAnyTests_SeqShort (
    ::CORBA::tk_alias,
    "IDL:DynAnyTests/SeqShort:1.0",
    "SeqShort",
    &TAO::TypeCode::tc_DynAnyTests_SeqShort_0);


namespace DynAnyTests
{
  ::CORBA::TypeCode_ptr const _tc_SeqShort =
    &_tao_tc_DynAnyTests_SeqShort;
}

// TAO_IDL - Generated from
// be/be_visitor_sequence/sequence_cs.cpp:70

#if !defined (_DYNANYTESTS_SEQBOOLEAN_CS_)
#define _DYNANYTESTS_SEQBOOLEAN_CS_

DynAnyTests::SeqBoolean::SeqBoolean (void)
{}

DynAnyTests::SeqBoolean::SeqBoolean (
    ::CORBA::ULong max)
  : ::TAO::unbounded_value_sequence<
        ::CORBA::Boolean
      > (max)
{}

DynAnyTests::SeqBoolean::SeqBoolean (
    ::CORBA::ULong max,
    ::CORBA::ULong length,
    ::CORBA::Boolean * buffer,
    ::CORBA::Boolean release
  )
  : ::TAO::unbounded_value_sequence<
        ::CORBA::Boolean
      >
    (max, length, buffer, release)
{}

DynAnyTests::SeqBoolean::SeqBoolean (
    const SeqBoolean &seq)
  : ::TAO::unbounded_value_sequence<
        ::CORBA::Boolean
      > (seq)
{}

DynAnyTests::SeqBoolean::~SeqBoolean (void)
{}

void DynAnyTests::SeqBoolean::_tao_any_destructor (
    void * _tao_void_pointer)
{
  SeqBoolean * _tao_tmp_pointer =
    static_cast<SeqBoolean *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

#endif /* end #if !defined */

// TAO_IDL - Generated from
// be/be_visitor_typecode/alias_typecode.cpp:49



// TAO_IDL - Generated from
// be/be_visitor_typecode/typecode_defn.cpp:461


#ifndef _TAO_TYPECODE_DynAnyTests_SeqBoolean_GUARD
#define _TAO_TYPECODE_DynAnyTests_SeqBoolean_GUARD

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

namespace TAO
{
  namespace TypeCode
  {
    namespace
    {
      TAO::TypeCode::Sequence< ::CORBA::TypeCode_ptr const *,
                              TAO::Null_RefCount_Policy>
        DynAnyTests_SeqBoolean_0 (
          ::CORBA::tk_sequence,
          &CORBA::_tc_boolean,
          0U);

      ::CORBA::TypeCode_ptr const tc_DynAnyTests_SeqBoolean_0 =
        &DynAnyTests_SeqBoolean_0;
    }
  }
}

TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_TYPECODE_DynAnyTests_SeqBoolean_GUARD */

static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_DynAnyTests_SeqBoolean (
    ::CORBA::tk_alias,
    "IDL:DynAnyTests/SeqBoolean:1.0",
    "SeqBoolean",
    &TAO::TypeCode::tc_DynAnyTests_SeqBoolean_0);


namespace DynAnyTests
{
  ::CORBA::TypeCode_ptr const _tc_SeqBoolean =
    &_tao_tc_DynAnyTests_SeqBoolean;
}

// TAO_IDL - Generated from
// be/be_visitor_array/array_cs.cpp:94

DynAnyTests::test_array_slice *
DynAnyTests::test_array_dup (const DynAnyTests::test_array_slice *_tao_src_array)
{
  DynAnyTests::test_array_slice *_tao_dup_array =
    DynAnyTests::test_array_alloc ();

  if (!_tao_dup_array)
    {
      return static_cast <DynAnyTests::test_array_slice *> (0);
    }

  DynAnyTests::test_array_copy (_tao_dup_array, _tao_src_array);
  return _tao_dup_array;
}

DynAnyTests::test_array_slice *
DynAnyTests::test_array_alloc (void)
{
  DynAnyTests::test_array_slice *retval = 0;
  ACE_NEW_RETURN (retval, ::CORBA::Long[2], 0);
  return retval;
}

void
DynAnyTests::test_array_free (
    DynAnyTests::test_array_slice *_tao_slice)
{
  delete [] _tao_slice;
}

void
DynAnyTests::test_array_copy (
    DynAnyTests::test_array_slice * _tao_to,
    const DynAnyTests::test_array_slice *_tao_from)
{
  // Copy each individual element.
  for ( ::CORBA::ULong i0 = 0; i0 < 2; ++i0)
    {
      _tao_to[i0] = _tao_from[i0];
    }
}

// TAO_IDL - Generated from
// be/be_visitor_typecode/alias_typecode.cpp:49



// TAO_IDL - Generated from
// be/be_visitor_typecode/typecode_defn.cpp:298


#ifndef _TAO_TYPECODE_DynAnyTests_test_array_GUARD
#define _TAO_TYPECODE_DynAnyTests_test_array_GUARD

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

namespace TAO
{
  namespace TypeCode
  {
    namespace
    {
      TAO::TypeCode::Sequence< ::CORBA::TypeCode_ptr const *,
                              TAO::Null_RefCount_Policy>
        DynAnyTests_test_array_2 (
          ::CORBA::tk_array,
          &CORBA::_tc_long,
          2U);

      ::CORBA::TypeCode_ptr const tc_DynAnyTests_test_array =
        &DynAnyTests_test_array_2;
    }
  }
}

TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_TYPECODE_DynAnyTests_test_array_GUARD */
static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_DynAnyTests_test_array (
    ::CORBA::tk_alias,
    "IDL:DynAnyTests/test_array:1.0",
    "test_array",
    &TAO::TypeCode::tc_DynAnyTests_test_array);


namespace DynAnyTests
{
  ::CORBA::TypeCode_ptr const _tc_test_array =
    &_tao_tc_DynAnyTests_test_array;
}

// TAO_IDL - Generated from
// be/be_visitor_typecode/enum_typecode.cpp:29
static char const * const _tao_enumerators_DynAnyTests_test_enum[] =
  {
    "TE_ZEROTH",
    "TE_FIRST",
    "TE_SECOND",
    "TE_THIRD",
    "TE_FOURTH"

  };

static TAO::TypeCode::Enum<char const *,
                           char const * const *,
                           TAO::Null_RefCount_Policy>
  _tao_tc_DynAnyTests_test_enum (
    "IDL:DynAnyTests/test_enum:1.0",
    "test_enum",
    _tao_enumerators_DynAnyTests_test_enum,
    5);


namespace DynAnyTests
{
  ::CORBA::TypeCode_ptr const _tc_test_enum =
    &_tao_tc_DynAnyTests_test_enum;
}

// TAO_IDL - Generated from
// be/be_visitor_typecode/alias_typecode.cpp:49

static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_DynAnyTests_Enumerated_a (
    ::CORBA::tk_alias,
    "IDL:DynAnyTests/Enumerated_a:1.0",
    "Enumerated_a",
    &DynAnyTests::_tc_test_enum);


namespace DynAnyTests
{
  ::CORBA::TypeCode_ptr const _tc_Enumerated_a =
    &_tao_tc_DynAnyTests_Enumerated_a;
}

// TAO_IDL - Generated from
// be/be_visitor_typecode/alias_typecode.cpp:49

static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_DynAnyTests_Enumerated_b (
    ::CORBA::tk_alias,
    "IDL:DynAnyTests/Enumerated_b:1.0",
    "Enumerated_b",
    &DynAnyTests::_tc_test_enum);


namespace DynAnyTests
{
  ::CORBA::TypeCode_ptr const _tc_Enumerated_b =
    &_tao_tc_DynAnyTests_Enumerated_b;
}

// TAO_IDL - Generated from
// be/be_visitor_typecode/alias_typecode.cpp:49

static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_DynAnyTests_Enumerated_c (
    ::CORBA::tk_alias,
    "IDL:DynAnyTests/Enumerated_c:1.0",
    "Enumerated_c",
    &DynAnyTests::_tc_test_enum);


namespace DynAnyTests
{
  ::CORBA::TypeCode_ptr const _tc_Enumerated_c =
    &_tao_tc_DynAnyTests_Enumerated_c;
}

// TAO_IDL - Generated from
// be/be_visitor_typecode/struct_typecode.cpp:86

static TAO::TypeCode::Struct_Field<
  char const *,
  ::CORBA::TypeCode_ptr const *> const
    _tao_fields_DynAnyTests_StructTypedefEnum[] =
      {
        { "field_1", &DynAnyTests::_tc_Enumerated_a },
        { "field_2", &DynAnyTests::_tc_Enumerated_b },
        { "field_3", &DynAnyTests::_tc_Enumerated_c }
      };

static TAO::TypeCode::Struct<
  char const *,
  ::CORBA::TypeCode_ptr const *,
  TAO::TypeCode::Struct_Field<
    char const *,
    ::CORBA::TypeCode_ptr const *> const *,
  TAO::Null_RefCount_Policy>
_tao_tc_DynAnyTests_StructTypedefEnum (
  ::CORBA::tk_struct,
  "IDL:DynAnyTests/StructTypedefEnum:1.0",
  "StructTypedefEnum",
  _tao_fields_DynAnyTests_StructTypedefEnum,
  3);


namespace DynAnyTests
{
  ::CORBA::TypeCode_ptr const _tc_StructTypedefEnum =
    &_tao_tc_DynAnyTests_StructTypedefEnum;
}

// TAO_IDL - Generated from
// be/be_visitor_structure/structure_cs.cpp:56

void
DynAnyTests::StructTypedefEnum::_tao_any_destructor (
    void *_tao_void_pointer)
{
  StructTypedefEnum *_tao_tmp_pointer =
    static_cast<StructTypedefEnum *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

// TAO_IDL - Generated from
// be/be_visitor_union/union_cs.cpp:76

DynAnyTests::test_union::test_union (void)
{
  ACE_OS::memset (&this->u_, 0, sizeof (this->u_));
  this->disc_ = DynAnyTests::TE_FIRST;
}

DynAnyTests::test_union::test_union (const ::DynAnyTests::test_union &u)
{
  this->disc_ = u.disc_;
  switch (this->disc_)
  {
    case DynAnyTests::TE_SECOND:
    {
      this->u_.tc_ = CORBA::TypeCode::_duplicate (u.u_.tc_);
    }
    break;
    case DynAnyTests::TE_FOURTH:
    {
      this->u_.te_ =
        u.u_.te_;
    }
    break;
    default:
    {
      this->u_.s_ = u.u_.s_;
    }
    break;
    case DynAnyTests::TE_THIRD:
    {
      this->u_.str_ = ::CORBA::string_dup (u.u_.str_);
    }
    break;
    case DynAnyTests::TE_ZEROTH:
    {
      this->u_.o_ = u.u_.o_;
    }
    break;
  }
}

DynAnyTests::test_union::~test_union (void)
{
  // Finalize.
  this->_reset ();
}

void DynAnyTests::test_union::_tao_any_destructor (void *_tao_void_pointer)
{
  test_union *tmp =
    static_cast<test_union *> (_tao_void_pointer);
  delete tmp;
}

DynAnyTests::test_union &
DynAnyTests::test_union::operator= (const ::DynAnyTests::test_union &u)
{
  if (&u == this)
    {
      return *this;
    }

  this->_reset ();
  this->disc_ = u.disc_;

  switch (this->disc_)
  {
    case DynAnyTests::TE_SECOND:
    {
      this->u_.tc_ = CORBA::TypeCode::_duplicate (u.u_.tc_);
    }
    break;
    case DynAnyTests::TE_FOURTH:
    {
      this->u_.te_ =
        u.u_.te_;
    }
    break;
    default:
    {
      this->u_.s_ = u.u_.s_;
    }
    break;
    case DynAnyTests::TE_THIRD:
    {
      this->u_.str_ = ::CORBA::string_dup (u.u_.str_);
    }
    break;
    case DynAnyTests::TE_ZEROTH:
    {
      this->u_.o_ = u.u_.o_;
    }
    break;
  }

  return *this;
}

/// Reset method to reset old values of a union.
void DynAnyTests::test_union::_reset (void)
{
  switch (this->disc_)
  {

    case DynAnyTests::TE_SECOND:
      ::CORBA::release (this->u_.tc_);
      this->u_.tc_ = 0;

    break;

    case DynAnyTests::TE_FOURTH:

    break;

    default:

    break;

    case DynAnyTests::TE_THIRD:
      ::CORBA::string_free (this->u_.str_);
      this->u_.str_ = 0;

    break;

    case DynAnyTests::TE_ZEROTH:

    break;

  }
}

// TAO_IDL - Generated from
// be/be_visitor_typecode/union_typecode.cpp:65

static TAO::TypeCode::Case_T<DynAnyTests::test_enum, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_DynAnyTests_test_union__0 (DynAnyTests::TE_SECOND, "tc", &CORBA::_tc_TypeCode);
static TAO::TypeCode::Case_T<DynAnyTests::test_enum, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_DynAnyTests_test_union__1 (DynAnyTests::TE_FOURTH, "te", &DynAnyTests::_tc_test_enum);
static TAO::TypeCode::Case_T<DynAnyTests::test_enum, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_DynAnyTests_test_union__2 (DynAnyTests::TE_FIRST, "s", &CORBA::_tc_short);
static TAO::TypeCode::Case_T<DynAnyTests::test_enum, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_DynAnyTests_test_union__3 (DynAnyTests::TE_THIRD, "str", &CORBA::_tc_string);
static TAO::TypeCode::Case_T<DynAnyTests::test_enum, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_DynAnyTests_test_union__4 (DynAnyTests::TE_ZEROTH, "o", &CORBA::_tc_octet);

static TAO::TypeCode::Case<char const *, ::CORBA::TypeCode_ptr const *> const * const _tao_cases_DynAnyTests_test_union[] =
  {
    &_tao_cases_DynAnyTests_test_union__0,
    &_tao_cases_DynAnyTests_test_union__1,
    &_tao_cases_DynAnyTests_test_union__2,
    &_tao_cases_DynAnyTests_test_union__3,
    &_tao_cases_DynAnyTests_test_union__4
  };

static TAO::TypeCode::Union<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::TypeCode::Case<char const *, ::CORBA::TypeCode_ptr const *> const * const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_DynAnyTests_test_union (
    "IDL:DynAnyTests/test_union:1.0",
    "test_union",
    &DynAnyTests::_tc_test_enum,
    _tao_cases_DynAnyTests_test_union,
    sizeof (_tao_cases_DynAnyTests_test_union)/sizeof (_tao_cases_DynAnyTests_test_union[0]),
    2);


namespace DynAnyTests
{
  ::CORBA::TypeCode_ptr const _tc_test_union =
    &_tao_tc_DynAnyTests_test_union;
}

// TAO_IDL - Generated from
// be/be_visitor_typecode/alias_typecode.cpp:49

static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_DynAnyTests_test_struct_alias (
    ::CORBA::tk_alias,
    "IDL:DynAnyTests/test_struct_alias:1.0",
    "test_struct_alias",
    &DynAnyTests::_tc_test_struct);


namespace DynAnyTests
{
  ::CORBA::TypeCode_ptr const _tc_test_struct_alias =
    &_tao_tc_DynAnyTests_test_struct_alias;
}

// TAO_IDL - Generated from
// be/be_visitor_typecode/alias_typecode.cpp:49

static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_DynAnyTests_test_union_alias (
    ::CORBA::tk_alias,
    "IDL:DynAnyTests/test_union_alias:1.0",
    "test_union_alias",
    &DynAnyTests::_tc_test_union);


namespace DynAnyTests
{
  ::CORBA::TypeCode_ptr const _tc_test_union_alias =
    &_tao_tc_DynAnyTests_test_union_alias;
}

// TAO_IDL - Generated from
// be/be_visitor_union/union_cs.cpp:76

DynAnyTests::test_implicit_def::test_implicit_def (void)
{
  ACE_OS::memset (&this->u_, 0, sizeof (this->u_));
  this->disc_ = false;
}

DynAnyTests::test_implicit_def::test_implicit_def (const ::DynAnyTests::test_implicit_def &u)
{
  this->disc_ = u.disc_;

  if (this->disc_)
    {
      this->u_.tenum_ =
        u.u_.tenum_;
    }

}

DynAnyTests::test_implicit_def::~test_implicit_def (void)
{
  // Finalize.
  this->_reset ();
}

void DynAnyTests::test_implicit_def::_tao_any_destructor (void *_tao_void_pointer)
{
  test_implicit_def *tmp =
    static_cast<test_implicit_def *> (_tao_void_pointer);
  delete tmp;
}

DynAnyTests::test_implicit_def &
DynAnyTests::test_implicit_def::operator= (const ::DynAnyTests::test_implicit_def &u)
{
  if (&u == this)
    {
      return *this;
    }

  this->_reset ();
  this->disc_ = u.disc_;


  if (this->disc_)
    {
      this->u_.tenum_ =
        u.u_.tenum_;
    }

  return *this;
}

/// Reset method to reset old values of a union.
void DynAnyTests::test_implicit_def::_reset (void)
{

  if (this->disc_)
    {

    }

}

// TAO_IDL - Generated from
// be/be_visitor_typecode/union_typecode.cpp:65

static TAO::TypeCode::Case_T<CORBA::Boolean, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_DynAnyTests_test_implicit_def__0 (true, "tenum", &DynAnyTests::_tc_test_enum);

static TAO::TypeCode::Case<char const *, ::CORBA::TypeCode_ptr const *> const * const _tao_cases_DynAnyTests_test_implicit_def[] =
  {
    &_tao_cases_DynAnyTests_test_implicit_def__0
  };

static TAO::TypeCode::Union<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::TypeCode::Case<char const *, ::CORBA::TypeCode_ptr const *> const * const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_DynAnyTests_test_implicit_def (
    "IDL:DynAnyTests/test_implicit_def:1.0",
    "test_implicit_def",
    &CORBA::_tc_boolean,
    _tao_cases_DynAnyTests_test_implicit_def,
    sizeof (_tao_cases_DynAnyTests_test_implicit_def)/sizeof (_tao_cases_DynAnyTests_test_implicit_def[0]),
    -1);


namespace DynAnyTests
{
  ::CORBA::TypeCode_ptr const _tc_test_implicit_def =
    &_tao_tc_DynAnyTests_test_implicit_def;
}

// TAO_IDL - Generated from
// be/be_visitor_union/union_cs.cpp:76

DynAnyTests::test_union_no_active_member::test_union_no_active_member (void)
{
  ACE_OS::memset (&this->u_, 0, sizeof (this->u_));
  this->disc_ = -2147483647;
}

DynAnyTests::test_union_no_active_member::test_union_no_active_member (const ::DynAnyTests::test_union_no_active_member &u)
{
  this->disc_ = u.disc_;
  switch (this->disc_)
  {
    case 1:
    {
      this->u_.field_long_ = u.u_.field_long_;
    }
    break;
    case 2:
    {
      this->u_.field_string_ = ::CORBA::string_dup (u.u_.field_string_);
    }
    break;
    default:
    break;
  }
}

DynAnyTests::test_union_no_active_member::~test_union_no_active_member (void)
{
  // Finalize.
  this->_reset ();
}

void DynAnyTests::test_union_no_active_member::_tao_any_destructor (void *_tao_void_pointer)
{
  test_union_no_active_member *tmp =
    static_cast<test_union_no_active_member *> (_tao_void_pointer);
  delete tmp;
}

DynAnyTests::test_union_no_active_member &
DynAnyTests::test_union_no_active_member::operator= (const ::DynAnyTests::test_union_no_active_member &u)
{
  if (&u == this)
    {
      return *this;
    }

  this->_reset ();
  this->disc_ = u.disc_;

  switch (this->disc_)
  {
    case 1:
    {
      this->u_.field_long_ = u.u_.field_long_;
    }
    break;
    case 2:
    {
      this->u_.field_string_ = ::CORBA::string_dup (u.u_.field_string_);
    }
    break;
    default:
    break;
  }

  return *this;
}

/// Reset method to reset old values of a union.
void DynAnyTests::test_union_no_active_member::_reset (void)
{
  switch (this->disc_)
  {

    case 1:

    break;

    case 2:
      ::CORBA::string_free (this->u_.field_string_);
      this->u_.field_string_ = 0;

    break;

    default:
    break;
  }
}

// TAO_IDL - Generated from
// be/be_visitor_typecode/union_typecode.cpp:65

static TAO::TypeCode::Case_T<CORBA::Long, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_DynAnyTests_test_union_no_active_member__0 (1, "field_long", &CORBA::_tc_long);
static TAO::TypeCode::Case_T<CORBA::Long, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_DynAnyTests_test_union_no_active_member__1 (2, "field_string", &CORBA::_tc_string);

static TAO::TypeCode::Case<char const *, ::CORBA::TypeCode_ptr const *> const * const _tao_cases_DynAnyTests_test_union_no_active_member[] =
  {
    &_tao_cases_DynAnyTests_test_union_no_active_member__0,
    &_tao_cases_DynAnyTests_test_union_no_active_member__1
  };

static TAO::TypeCode::Union<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::TypeCode::Case<char const *, ::CORBA::TypeCode_ptr const *> const * const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_DynAnyTests_test_union_no_active_member (
    "IDL:DynAnyTests/test_union_no_active_member:1.0",
    "test_union_no_active_member",
    &CORBA::_tc_long,
    _tao_cases_DynAnyTests_test_union_no_active_member,
    sizeof (_tao_cases_DynAnyTests_test_union_no_active_member)/sizeof (_tao_cases_DynAnyTests_test_union_no_active_member[0]),
    -1);


namespace DynAnyTests
{
  ::CORBA::TypeCode_ptr const _tc_test_union_no_active_member =
    &_tao_tc_DynAnyTests_test_union_no_active_member;
}

// TAO_IDL - Generated from
// be/be_visitor_typecode/struct_typecode.cpp:86

static TAO::TypeCode::Struct_Field<
  char const *,
  ::CORBA::TypeCode_ptr const *> const
    _tao_fields_DynAnyTests_test_struct_with_long_double[] =
      {
        { "field_longdouble", &CORBA::_tc_longdouble }
      };

static TAO::TypeCode::Struct<
  char const *,
  ::CORBA::TypeCode_ptr const *,
  TAO::TypeCode::Struct_Field<
    char const *,
    ::CORBA::TypeCode_ptr const *> const *,
  TAO::Null_RefCount_Policy>
_tao_tc_DynAnyTests_test_struct_with_long_double (
  ::CORBA::tk_struct,
  "IDL:DynAnyTests/test_struct_with_long_double:1.0",
  "test_struct_with_long_double",
  _tao_fields_DynAnyTests_test_struct_with_long_double,
  1);


namespace DynAnyTests
{
  ::CORBA::TypeCode_ptr const _tc_test_struct_with_long_double =
    &_tao_tc_DynAnyTests_test_struct_with_long_double;
}

// TAO_IDL - Generated from
// be/be_visitor_structure/structure_cs.cpp:56

void
DynAnyTests::test_struct_with_long_double::_tao_any_destructor (
    void *_tao_void_pointer)
{
  test_struct_with_long_double *_tao_tmp_pointer =
    static_cast<test_struct_with_long_double *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

// TAO_IDL - Generated from
// be/be_visitor_structure/any_op_cs.cpp:43



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace DynAnyTests
{
  /// Copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      const ::DynAnyTests::enclosed_struct &_tao_elem)
  {
    TAO::Any_Dual_Impl_T< ::DynAnyTests::enclosed_struct>::insert_copy (
        _tao_any,
        ::DynAnyTests::enclosed_struct::_tao_any_destructor,
        ::DynAnyTests::_tc_enclosed_struct,
        _tao_elem);
}

/// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any, ::
    DynAnyTests::enclosed_struct *_tao_elem)
{
  TAO::Any_Dual_Impl_T< ::DynAnyTests::enclosed_struct>::insert (
      _tao_any,
      ::DynAnyTests::enclosed_struct::_tao_any_destructor,
      ::DynAnyTests::_tc_enclosed_struct,
      _tao_elem);
}

/// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    ::DynAnyTests::enclosed_struct *&_tao_elem)
{
  return _tao_any >>= const_cast<
      const ::DynAnyTests::enclosed_struct *&> (
      _tao_elem);
}

/// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const ::DynAnyTests::enclosed_struct *&_tao_elem)
{
  return
    TAO::Any_Dual_Impl_T< ::DynAnyTests::enclosed_struct>::extract (
        _tao_any,
        ::DynAnyTests::enclosed_struct::_tao_any_destructor,
        ::DynAnyTests::_tc_enclosed_struct,
        _tao_elem
      );
}
}

#else

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

/// Copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  const DynAnyTests::enclosed_struct &_tao_elem)
{
  TAO::Any_Dual_Impl_T<DynAnyTests::enclosed_struct>::insert_copy (
    _tao_any,
    DynAnyTests::enclosed_struct::_tao_any_destructor,
    DynAnyTests::_tc_enclosed_struct,
    _tao_elem);
}

/// Non-copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  DynAnyTests::enclosed_struct *_tao_elem)
{
  TAO::Any_Dual_Impl_T<DynAnyTests::enclosed_struct>::insert (
    _tao_any,
    DynAnyTests::enclosed_struct::_tao_any_destructor,
    DynAnyTests::_tc_enclosed_struct,
    _tao_elem);
}

/// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
  const ::CORBA::Any &_tao_any,
  DynAnyTests::enclosed_struct *&_tao_elem)
{
  return _tao_any >>= const_cast<
      const DynAnyTests::enclosed_struct *&> (
      _tao_elem);
}

/// Extraction to const pointer.
::CORBA::Boolean operator>>= (
  const ::CORBA::Any &_tao_any,
  const DynAnyTests::enclosed_struct *&_tao_elem)
{
  return
    TAO::Any_Dual_Impl_T<DynAnyTests::enclosed_struct>::extract (
      _tao_any,
      DynAnyTests::enclosed_struct::_tao_any_destructor,
      DynAnyTests::_tc_enclosed_struct,
      _tao_elem);
}
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_structure/any_op_cs.cpp:43



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace DynAnyTests
{
  /// Copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      const ::DynAnyTests::test_struct &_tao_elem)
  {
    TAO::Any_Dual_Impl_T< ::DynAnyTests::test_struct>::insert_copy (
        _tao_any,
        ::DynAnyTests::test_struct::_tao_any_destructor,
        ::DynAnyTests::_tc_test_struct,
        _tao_elem);
}

/// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any, ::
    DynAnyTests::test_struct *_tao_elem)
{
  TAO::Any_Dual_Impl_T< ::DynAnyTests::test_struct>::insert (
      _tao_any,
      ::DynAnyTests::test_struct::_tao_any_destructor,
      ::DynAnyTests::_tc_test_struct,
      _tao_elem);
}

/// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    ::DynAnyTests::test_struct *&_tao_elem)
{
  return _tao_any >>= const_cast<
      const ::DynAnyTests::test_struct *&> (
      _tao_elem);
}

/// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const ::DynAnyTests::test_struct *&_tao_elem)
{
  return
    TAO::Any_Dual_Impl_T< ::DynAnyTests::test_struct>::extract (
        _tao_any,
        ::DynAnyTests::test_struct::_tao_any_destructor,
        ::DynAnyTests::_tc_test_struct,
        _tao_elem
      );
}
}

#else

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

/// Copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  const DynAnyTests::test_struct &_tao_elem)
{
  TAO::Any_Dual_Impl_T<DynAnyTests::test_struct>::insert_copy (
    _tao_any,
    DynAnyTests::test_struct::_tao_any_destructor,
    DynAnyTests::_tc_test_struct,
    _tao_elem);
}

/// Non-copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  DynAnyTests::test_struct *_tao_elem)
{
  TAO::Any_Dual_Impl_T<DynAnyTests::test_struct>::insert (
    _tao_any,
    DynAnyTests::test_struct::_tao_any_destructor,
    DynAnyTests::_tc_test_struct,
    _tao_elem);
}

/// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
  const ::CORBA::Any &_tao_any,
  DynAnyTests::test_struct *&_tao_elem)
{
  return _tao_any >>= const_cast<
      const DynAnyTests::test_struct *&> (
      _tao_elem);
}

/// Extraction to const pointer.
::CORBA::Boolean operator>>= (
  const ::CORBA::Any &_tao_any,
  const DynAnyTests::test_struct *&_tao_elem)
{
  return
    TAO::Any_Dual_Impl_T<DynAnyTests::test_struct>::extract (
      _tao_any,
      DynAnyTests::test_struct::_tao_any_destructor,
      DynAnyTests::_tc_test_struct,
      _tao_elem);
}
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_sequence/any_op_cs.cpp:45


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


TAO_END_VERSIONED_NAMESPACE_DECL



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace DynAnyTests
{

  // Copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      const ::DynAnyTests::test_seq &_tao_elem
    )
  {
    TAO::Any_Dual_Impl_T< ::DynAnyTests::test_seq>::insert_copy (
        _tao_any,
        ::DynAnyTests::test_seq::_tao_any_destructor,
        ::DynAnyTests::_tc_test_seq,
        _tao_elem
      );
}

// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    ::DynAnyTests::test_seq *_tao_elem)
{
  TAO::Any_Dual_Impl_T< ::DynAnyTests::test_seq>::insert (
      _tao_any,
      ::DynAnyTests::test_seq::_tao_any_destructor,
      ::DynAnyTests::_tc_test_seq,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    ::DynAnyTests::test_seq *&_tao_elem)
{
  return _tao_any >>= const_cast<
      const ::DynAnyTests::test_seq *&> (
      _tao_elem
    );
}

// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const ::DynAnyTests::test_seq *&_tao_elem)
{
  return
    TAO::Any_Dual_Impl_T< ::DynAnyTests::test_seq>::extract (
        _tao_any,
        ::DynAnyTests::test_seq::_tao_any_destructor,
        ::DynAnyTests::_tc_test_seq,
        _tao_elem
      );
}
}

#else


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


// Copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    const DynAnyTests::test_seq &_tao_elem)
{
  TAO::Any_Dual_Impl_T<DynAnyTests::test_seq>::insert_copy (
      _tao_any,
      DynAnyTests::test_seq::_tao_any_destructor,
      DynAnyTests::_tc_test_seq,
      _tao_elem
    );
}

// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    DynAnyTests::test_seq *_tao_elem)
{
  TAO::Any_Dual_Impl_T<DynAnyTests::test_seq>::insert (
      _tao_any,
      DynAnyTests::test_seq::_tao_any_destructor,
      DynAnyTests::_tc_test_seq,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    DynAnyTests::test_seq *&_tao_elem)
{
  return _tao_any >>= const_cast<
      const DynAnyTests::test_seq *&> (
      _tao_elem
    );
}

// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const DynAnyTests::test_seq *&_tao_elem)
{
  return
    TAO::Any_Dual_Impl_T<DynAnyTests::test_seq>::extract (
        _tao_any,
        DynAnyTests::test_seq::_tao_any_destructor,
        DynAnyTests::_tc_test_seq,
        _tao_elem);
}
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_sequence/any_op_cs.cpp:45


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


TAO_END_VERSIONED_NAMESPACE_DECL



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace DynAnyTests
{

  // Copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      const ::DynAnyTests::SeqShort &_tao_elem
    )
  {
    TAO::Any_Dual_Impl_T< ::DynAnyTests::SeqShort>::insert_copy (
        _tao_any,
        ::DynAnyTests::SeqShort::_tao_any_destructor,
        ::DynAnyTests::_tc_SeqShort,
        _tao_elem
      );
}

// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    ::DynAnyTests::SeqShort *_tao_elem)
{
  TAO::Any_Dual_Impl_T< ::DynAnyTests::SeqShort>::insert (
      _tao_any,
      ::DynAnyTests::SeqShort::_tao_any_destructor,
      ::DynAnyTests::_tc_SeqShort,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    ::DynAnyTests::SeqShort *&_tao_elem)
{
  return _tao_any >>= const_cast<
      const ::DynAnyTests::SeqShort *&> (
      _tao_elem
    );
}

// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const ::DynAnyTests::SeqShort *&_tao_elem)
{
  return
    TAO::Any_Dual_Impl_T< ::DynAnyTests::SeqShort>::extract (
        _tao_any,
        ::DynAnyTests::SeqShort::_tao_any_destructor,
        ::DynAnyTests::_tc_SeqShort,
        _tao_elem
      );
}
}

#else


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


// Copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    const DynAnyTests::SeqShort &_tao_elem)
{
  TAO::Any_Dual_Impl_T<DynAnyTests::SeqShort>::insert_copy (
      _tao_any,
      DynAnyTests::SeqShort::_tao_any_destructor,
      DynAnyTests::_tc_SeqShort,
      _tao_elem
    );
}

// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    DynAnyTests::SeqShort *_tao_elem)
{
  TAO::Any_Dual_Impl_T<DynAnyTests::SeqShort>::insert (
      _tao_any,
      DynAnyTests::SeqShort::_tao_any_destructor,
      DynAnyTests::_tc_SeqShort,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    DynAnyTests::SeqShort *&_tao_elem)
{
  return _tao_any >>= const_cast<
      const DynAnyTests::SeqShort *&> (
      _tao_elem
    );
}

// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const DynAnyTests::SeqShort *&_tao_elem)
{
  return
    TAO::Any_Dual_Impl_T<DynAnyTests::SeqShort>::extract (
        _tao_any,
        DynAnyTests::SeqShort::_tao_any_destructor,
        DynAnyTests::_tc_SeqShort,
        _tao_elem);
}
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_sequence/any_op_cs.cpp:45


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


TAO_END_VERSIONED_NAMESPACE_DECL



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace DynAnyTests
{

  // Copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      const ::DynAnyTests::SeqBoolean &_tao_elem
    )
  {
    TAO::Any_Dual_Impl_T< ::DynAnyTests::SeqBoolean>::insert_copy (
        _tao_any,
        ::DynAnyTests::SeqBoolean::_tao_any_destructor,
        ::DynAnyTests::_tc_SeqBoolean,
        _tao_elem
      );
}

// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    ::DynAnyTests::SeqBoolean *_tao_elem)
{
  TAO::Any_Dual_Impl_T< ::DynAnyTests::SeqBoolean>::insert (
      _tao_any,
      ::DynAnyTests::SeqBoolean::_tao_any_destructor,
      ::DynAnyTests::_tc_SeqBoolean,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    ::DynAnyTests::SeqBoolean *&_tao_elem)
{
  return _tao_any >>= const_cast<
      const ::DynAnyTests::SeqBoolean *&> (
      _tao_elem
    );
}

// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const ::DynAnyTests::SeqBoolean *&_tao_elem)
{
  return
    TAO::Any_Dual_Impl_T< ::DynAnyTests::SeqBoolean>::extract (
        _tao_any,
        ::DynAnyTests::SeqBoolean::_tao_any_destructor,
        ::DynAnyTests::_tc_SeqBoolean,
        _tao_elem
      );
}
}

#else


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


// Copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    const DynAnyTests::SeqBoolean &_tao_elem)
{
  TAO::Any_Dual_Impl_T<DynAnyTests::SeqBoolean>::insert_copy (
      _tao_any,
      DynAnyTests::SeqBoolean::_tao_any_destructor,
      DynAnyTests::_tc_SeqBoolean,
      _tao_elem
    );
}

// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    DynAnyTests::SeqBoolean *_tao_elem)
{
  TAO::Any_Dual_Impl_T<DynAnyTests::SeqBoolean>::insert (
      _tao_any,
      DynAnyTests::SeqBoolean::_tao_any_destructor,
      DynAnyTests::_tc_SeqBoolean,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    DynAnyTests::SeqBoolean *&_tao_elem)
{
  return _tao_any >>= const_cast<
      const DynAnyTests::SeqBoolean *&> (
      _tao_elem
    );
}

// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const DynAnyTests::SeqBoolean *&_tao_elem)
{
  return
    TAO::Any_Dual_Impl_T<DynAnyTests::SeqBoolean>::extract (
        _tao_any,
        DynAnyTests::SeqBoolean::_tao_any_destructor,
        DynAnyTests::_tc_SeqBoolean,
        _tao_elem);
}
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_array/any_op_cs.cpp:37


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

void operator<<= (
    ::CORBA::Any &_tao_any,
    const DynAnyTests::test_array_forany &_tao_elem
  )
{
  TAO::Any_Array_Impl_T<
      DynAnyTests::test_array_slice,
      DynAnyTests::test_array_forany
    >::insert (
        _tao_any,
        DynAnyTests::test_array_forany::_tao_any_destructor,
        DynAnyTests::_tc_test_array,
        _tao_elem.nocopy ()
          ? _tao_elem.ptr ()
          : DynAnyTests::test_array_dup (_tao_elem.in ())
      );
}

::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    DynAnyTests::test_array_forany &_tao_elem
  )
{
  return
    TAO::Any_Array_Impl_T<
        DynAnyTests::test_array_slice,
        DynAnyTests::test_array_forany
      >::extract (
          _tao_any,
          DynAnyTests::test_array_forany::_tao_any_destructor,
          DynAnyTests::_tc_test_array,
          _tao_elem.out ()
        );
}
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_enum/any_op_cs.cpp:35

TAO_BEGIN_VERSIONED_NAMESPACE_DECL


TAO_END_VERSIONED_NAMESPACE_DECL



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace DynAnyTests
{
  void operator<<= (
      ::CORBA::Any &_tao_any,
      ::DynAnyTests::test_enum _tao_elem
    )
  {
    TAO::Any_Basic_Impl_T< ::DynAnyTests::test_enum>::insert (
        _tao_any,
        ::DynAnyTests::_tc_test_enum,
        _tao_elem
      );
  }

  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      ::DynAnyTests::test_enum &_tao_elem
    )
  {
    return
      TAO::Any_Basic_Impl_T< ::DynAnyTests::test_enum>::extract (
          _tao_any,
          ::DynAnyTests::_tc_test_enum,
          _tao_elem
        );
  }
}

#else

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

void operator<<= (
    ::CORBA::Any &_tao_any,
    DynAnyTests::test_enum _tao_elem
  )
{
  TAO::Any_Basic_Impl_T<DynAnyTests::test_enum>::insert (
      _tao_any,
      DynAnyTests::_tc_test_enum,
      _tao_elem
    );
}

::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    DynAnyTests::test_enum &_tao_elem
  )
{
  return
    TAO::Any_Basic_Impl_T<DynAnyTests::test_enum>::extract (
        _tao_any,
        DynAnyTests::_tc_test_enum,
        _tao_elem
      );
}
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_structure/any_op_cs.cpp:43



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace DynAnyTests
{
  /// Copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      const ::DynAnyTests::StructTypedefEnum &_tao_elem)
  {
    TAO::Any_Dual_Impl_T< ::DynAnyTests::StructTypedefEnum>::insert_copy (
        _tao_any,
        ::DynAnyTests::StructTypedefEnum::_tao_any_destructor,
        ::DynAnyTests::_tc_StructTypedefEnum,
        _tao_elem);
}

/// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any, ::
    DynAnyTests::StructTypedefEnum *_tao_elem)
{
  TAO::Any_Dual_Impl_T< ::DynAnyTests::StructTypedefEnum>::insert (
      _tao_any,
      ::DynAnyTests::StructTypedefEnum::_tao_any_destructor,
      ::DynAnyTests::_tc_StructTypedefEnum,
      _tao_elem);
}

/// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    ::DynAnyTests::StructTypedefEnum *&_tao_elem)
{
  return _tao_any >>= const_cast<
      const ::DynAnyTests::StructTypedefEnum *&> (
      _tao_elem);
}

/// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const ::DynAnyTests::StructTypedefEnum *&_tao_elem)
{
  return
    TAO::Any_Dual_Impl_T< ::DynAnyTests::StructTypedefEnum>::extract (
        _tao_any,
        ::DynAnyTests::StructTypedefEnum::_tao_any_destructor,
        ::DynAnyTests::_tc_StructTypedefEnum,
        _tao_elem
      );
}
}

#else

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

/// Copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  const DynAnyTests::StructTypedefEnum &_tao_elem)
{
  TAO::Any_Dual_Impl_T<DynAnyTests::StructTypedefEnum>::insert_copy (
    _tao_any,
    DynAnyTests::StructTypedefEnum::_tao_any_destructor,
    DynAnyTests::_tc_StructTypedefEnum,
    _tao_elem);
}

/// Non-copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  DynAnyTests::StructTypedefEnum *_tao_elem)
{
  TAO::Any_Dual_Impl_T<DynAnyTests::StructTypedefEnum>::insert (
    _tao_any,
    DynAnyTests::StructTypedefEnum::_tao_any_destructor,
    DynAnyTests::_tc_StructTypedefEnum,
    _tao_elem);
}

/// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
  const ::CORBA::Any &_tao_any,
  DynAnyTests::StructTypedefEnum *&_tao_elem)
{
  return _tao_any >>= const_cast<
      const DynAnyTests::StructTypedefEnum *&> (
      _tao_elem);
}

/// Extraction to const pointer.
::CORBA::Boolean operator>>= (
  const ::CORBA::Any &_tao_any,
  const DynAnyTests::StructTypedefEnum *&_tao_elem)
{
  return
    TAO::Any_Dual_Impl_T<DynAnyTests::StructTypedefEnum>::extract (
      _tao_any,
      DynAnyTests::StructTypedefEnum::_tao_any_destructor,
      DynAnyTests::_tc_StructTypedefEnum,
      _tao_elem);
}
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_union/any_op_cs.cpp:37


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


TAO_END_VERSIONED_NAMESPACE_DECL



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace DynAnyTests
{
  // Copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      const ::DynAnyTests::test_union &_tao_elem
    )
  {
    TAO::Any_Dual_Impl_T< ::DynAnyTests::test_union>::insert_copy (
        _tao_any,
        ::DynAnyTests::test_union::_tao_any_destructor,
        ::DynAnyTests::_tc_test_union,
        _tao_elem
      );
}

// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    ::DynAnyTests::test_union *_tao_elem
  )
{
  TAO::Any_Dual_Impl_T< ::DynAnyTests::test_union>::insert (
      _tao_any,
      ::DynAnyTests::test_union::_tao_any_destructor,
      ::DynAnyTests::_tc_test_union,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    ::DynAnyTests::test_union *&_tao_elem
  )
{
  return _tao_any >>= const_cast<
      const ::DynAnyTests::test_union *&> (
      _tao_elem
    );
}

// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const ::DynAnyTests::test_union *&_tao_elem
  )
{
  return
    TAO::Any_Dual_Impl_T< ::DynAnyTests::test_union>::extract (
        _tao_any,
        ::DynAnyTests::test_union::_tao_any_destructor,
        ::DynAnyTests::_tc_test_union,
        _tao_elem
      );
}
}

#else

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    const DynAnyTests::test_union &_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<DynAnyTests::test_union>::insert_copy (
      _tao_any,
      DynAnyTests::test_union::_tao_any_destructor,
      DynAnyTests::_tc_test_union,
      _tao_elem
    );
}

// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    DynAnyTests::test_union *_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<DynAnyTests::test_union>::insert (
      _tao_any,
      DynAnyTests::test_union::_tao_any_destructor,
      DynAnyTests::_tc_test_union,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    DynAnyTests::test_union *&_tao_elem
  )
{
  return _tao_any >>= const_cast<
      const DynAnyTests::test_union *&> (
      _tao_elem
    );
}

// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const DynAnyTests::test_union *&_tao_elem
  )
{
  return
    TAO::Any_Dual_Impl_T<DynAnyTests::test_union>::extract (
        _tao_any,
        DynAnyTests::test_union::_tao_any_destructor,
        DynAnyTests::_tc_test_union,
        _tao_elem
      );
}
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_union/any_op_cs.cpp:37


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


TAO_END_VERSIONED_NAMESPACE_DECL



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace DynAnyTests
{
  // Copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      const ::DynAnyTests::test_implicit_def &_tao_elem
    )
  {
    TAO::Any_Dual_Impl_T< ::DynAnyTests::test_implicit_def>::insert_copy (
        _tao_any,
        ::DynAnyTests::test_implicit_def::_tao_any_destructor,
        ::DynAnyTests::_tc_test_implicit_def,
        _tao_elem
      );
}

// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    ::DynAnyTests::test_implicit_def *_tao_elem
  )
{
  TAO::Any_Dual_Impl_T< ::DynAnyTests::test_implicit_def>::insert (
      _tao_any,
      ::DynAnyTests::test_implicit_def::_tao_any_destructor,
      ::DynAnyTests::_tc_test_implicit_def,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    ::DynAnyTests::test_implicit_def *&_tao_elem
  )
{
  return _tao_any >>= const_cast<
      const ::DynAnyTests::test_implicit_def *&> (
      _tao_elem
    );
}

// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const ::DynAnyTests::test_implicit_def *&_tao_elem
  )
{
  return
    TAO::Any_Dual_Impl_T< ::DynAnyTests::test_implicit_def>::extract (
        _tao_any,
        ::DynAnyTests::test_implicit_def::_tao_any_destructor,
        ::DynAnyTests::_tc_test_implicit_def,
        _tao_elem
      );
}
}

#else

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    const DynAnyTests::test_implicit_def &_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<DynAnyTests::test_implicit_def>::insert_copy (
      _tao_any,
      DynAnyTests::test_implicit_def::_tao_any_destructor,
      DynAnyTests::_tc_test_implicit_def,
      _tao_elem
    );
}

// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    DynAnyTests::test_implicit_def *_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<DynAnyTests::test_implicit_def>::insert (
      _tao_any,
      DynAnyTests::test_implicit_def::_tao_any_destructor,
      DynAnyTests::_tc_test_implicit_def,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    DynAnyTests::test_implicit_def *&_tao_elem
  )
{
  return _tao_any >>= const_cast<
      const DynAnyTests::test_implicit_def *&> (
      _tao_elem
    );
}

// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const DynAnyTests::test_implicit_def *&_tao_elem
  )
{
  return
    TAO::Any_Dual_Impl_T<DynAnyTests::test_implicit_def>::extract (
        _tao_any,
        DynAnyTests::test_implicit_def::_tao_any_destructor,
        DynAnyTests::_tc_test_implicit_def,
        _tao_elem
      );
}
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_union/any_op_cs.cpp:37


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


TAO_END_VERSIONED_NAMESPACE_DECL



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace DynAnyTests
{
  // Copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      const ::DynAnyTests::test_union_no_active_member &_tao_elem
    )
  {
    TAO::Any_Dual_Impl_T< ::DynAnyTests::test_union_no_active_member>::insert_copy (
        _tao_any,
        ::DynAnyTests::test_union_no_active_member::_tao_any_destructor,
        ::DynAnyTests::_tc_test_union_no_active_member,
        _tao_elem
      );
}

// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    ::DynAnyTests::test_union_no_active_member *_tao_elem
  )
{
  TAO::Any_Dual_Impl_T< ::DynAnyTests::test_union_no_active_member>::insert (
      _tao_any,
      ::DynAnyTests::test_union_no_active_member::_tao_any_destructor,
      ::DynAnyTests::_tc_test_union_no_active_member,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    ::DynAnyTests::test_union_no_active_member *&_tao_elem
  )
{
  return _tao_any >>= const_cast<
      const ::DynAnyTests::test_union_no_active_member *&> (
      _tao_elem
    );
}

// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const ::DynAnyTests::test_union_no_active_member *&_tao_elem
  )
{
  return
    TAO::Any_Dual_Impl_T< ::DynAnyTests::test_union_no_active_member>::extract (
        _tao_any,
        ::DynAnyTests::test_union_no_active_member::_tao_any_destructor,
        ::DynAnyTests::_tc_test_union_no_active_member,
        _tao_elem
      );
}
}

#else

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    const DynAnyTests::test_union_no_active_member &_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<DynAnyTests::test_union_no_active_member>::insert_copy (
      _tao_any,
      DynAnyTests::test_union_no_active_member::_tao_any_destructor,
      DynAnyTests::_tc_test_union_no_active_member,
      _tao_elem
    );
}

// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    DynAnyTests::test_union_no_active_member *_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<DynAnyTests::test_union_no_active_member>::insert (
      _tao_any,
      DynAnyTests::test_union_no_active_member::_tao_any_destructor,
      DynAnyTests::_tc_test_union_no_active_member,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    DynAnyTests::test_union_no_active_member *&_tao_elem
  )
{
  return _tao_any >>= const_cast<
      const DynAnyTests::test_union_no_active_member *&> (
      _tao_elem
    );
}

// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const DynAnyTests::test_union_no_active_member *&_tao_elem
  )
{
  return
    TAO::Any_Dual_Impl_T<DynAnyTests::test_union_no_active_member>::extract (
        _tao_any,
        DynAnyTests::test_union_no_active_member::_tao_any_destructor,
        DynAnyTests::_tc_test_union_no_active_member,
        _tao_elem
      );
}
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_structure/any_op_cs.cpp:43



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace DynAnyTests
{
  /// Copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      const ::DynAnyTests::test_struct_with_long_double &_tao_elem)
  {
    TAO::Any_Dual_Impl_T< ::DynAnyTests::test_struct_with_long_double>::insert_copy (
        _tao_any,
        ::DynAnyTests::test_struct_with_long_double::_tao_any_destructor,
        ::DynAnyTests::_tc_test_struct_with_long_double,
        _tao_elem);
}

/// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any, ::
    DynAnyTests::test_struct_with_long_double *_tao_elem)
{
  TAO::Any_Dual_Impl_T< ::DynAnyTests::test_struct_with_long_double>::insert (
      _tao_any,
      ::DynAnyTests::test_struct_with_long_double::_tao_any_destructor,
      ::DynAnyTests::_tc_test_struct_with_long_double,
      _tao_elem);
}

/// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    ::DynAnyTests::test_struct_with_long_double *&_tao_elem)
{
  return _tao_any >>= const_cast<
      const ::DynAnyTests::test_struct_with_long_double *&> (
      _tao_elem);
}

/// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const ::DynAnyTests::test_struct_with_long_double *&_tao_elem)
{
  return
    TAO::Any_Dual_Impl_T< ::DynAnyTests::test_struct_with_long_double>::extract (
        _tao_any,
        ::DynAnyTests::test_struct_with_long_double::_tao_any_destructor,
        ::DynAnyTests::_tc_test_struct_with_long_double,
        _tao_elem
      );
}
}

#else

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

/// Copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  const DynAnyTests::test_struct_with_long_double &_tao_elem)
{
  TAO::Any_Dual_Impl_T<DynAnyTests::test_struct_with_long_double>::insert_copy (
    _tao_any,
    DynAnyTests::test_struct_with_long_double::_tao_any_destructor,
    DynAnyTests::_tc_test_struct_with_long_double,
    _tao_elem);
}

/// Non-copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  DynAnyTests::test_struct_with_long_double *_tao_elem)
{
  TAO::Any_Dual_Impl_T<DynAnyTests::test_struct_with_long_double>::insert (
    _tao_any,
    DynAnyTests::test_struct_with_long_double::_tao_any_destructor,
    DynAnyTests::_tc_test_struct_with_long_double,
    _tao_elem);
}

/// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
  const ::CORBA::Any &_tao_any,
  DynAnyTests::test_struct_with_long_double *&_tao_elem)
{
  return _tao_any >>= const_cast<
      const DynAnyTests::test_struct_with_long_double *&> (
      _tao_elem);
}

/// Extraction to const pointer.
::CORBA::Boolean operator>>= (
  const ::CORBA::Any &_tao_any,
  const DynAnyTests::test_struct_with_long_double *&_tao_elem)
{
  return
    TAO::Any_Dual_Impl_T<DynAnyTests::test_struct_with_long_double>::extract (
      _tao_any,
      DynAnyTests::test_struct_with_long_double::_tao_any_destructor,
      DynAnyTests::_tc_test_struct_with_long_double,
      _tao_elem);
}
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_structure/cdr_op_cs.cpp:49

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const DynAnyTests::enclosed_struct &_tao_aggregate)
{
  return
    (strm << _tao_aggregate.f) &&
    (strm << _tao_aggregate.s);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    DynAnyTests::enclosed_struct &_tao_aggregate)
{
  return
    (strm >> _tao_aggregate.f) &&
    (strm >> _tao_aggregate.s);
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_structure/cdr_op_cs.cpp:49

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const DynAnyTests::test_struct &_tao_aggregate)
{
  return
    (strm << ::ACE_OutputCDR::from_char (_tao_aggregate.c)) &&
    (strm << _tao_aggregate.ss) &&
    (strm << _tao_aggregate.es);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    DynAnyTests::test_struct &_tao_aggregate)
{
  return
    (strm >> ::ACE_InputCDR::to_char (_tao_aggregate.c)) &&
    (strm >> _tao_aggregate.ss) &&
    (strm >> _tao_aggregate.es);
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_sequence/cdr_op_cs.cpp:93
#if !defined _TAO_CDR_OP_DynAnyTests_test_seq_CPP_
#define _TAO_CDR_OP_DynAnyTests_test_seq_CPP_

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const DynAnyTests::test_seq &_tao_sequence)
{
  return TAO::marshal_sequence(strm, _tao_sequence);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    DynAnyTests::test_seq &_tao_sequence)
{
  return TAO::demarshal_sequence(strm, _tao_sequence);
}


TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_CDR_OP_DynAnyTests_test_seq_CPP_ */

// TAO_IDL - Generated from
// be/be_visitor_sequence/cdr_op_cs.cpp:93
#if !defined _TAO_CDR_OP_DynAnyTests_SeqShort_CPP_
#define _TAO_CDR_OP_DynAnyTests_SeqShort_CPP_

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const DynAnyTests::SeqShort &_tao_sequence)
{
  return TAO::marshal_sequence(strm, _tao_sequence);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    DynAnyTests::SeqShort &_tao_sequence)
{
  return TAO::demarshal_sequence(strm, _tao_sequence);
}


TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_CDR_OP_DynAnyTests_SeqShort_CPP_ */

// TAO_IDL - Generated from
// be/be_visitor_sequence/cdr_op_cs.cpp:93
#if !defined _TAO_CDR_OP_DynAnyTests_SeqBoolean_CPP_
#define _TAO_CDR_OP_DynAnyTests_SeqBoolean_CPP_

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const DynAnyTests::SeqBoolean &_tao_sequence)
{
  return TAO::marshal_sequence(strm, _tao_sequence);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    DynAnyTests::SeqBoolean &_tao_sequence)
{
  return TAO::demarshal_sequence(strm, _tao_sequence);
}


TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_CDR_OP_DynAnyTests_SeqBoolean_CPP_ */

// TAO_IDL - Generated from
// be/be_visitor_array/cdr_op_cs.cpp:163


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const DynAnyTests::test_array_forany &_tao_array)
{
  return
    strm.write_long_array (
        reinterpret_cast <const ACE_CDR::Long *> (_tao_array.in ()),
        2);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    DynAnyTests::test_array_forany &_tao_array)
{
  return
    strm.read_long_array (
        reinterpret_cast <ACE_CDR::Long *> (_tao_array.out ()),
        2);
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_enum/cdr_op_cs.cpp:34


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (TAO_OutputCDR &strm, DynAnyTests::test_enum _tao_enumerator)
{
  return strm << static_cast< ::CORBA::ULong> (_tao_enumerator);
}

::CORBA::Boolean operator>> (TAO_InputCDR &strm, DynAnyTests::test_enum & _tao_enumerator)
{
  ::CORBA::ULong _tao_temp = 0;
  ::CORBA::Boolean const _tao_success = strm >> _tao_temp;

  if (_tao_success)
    {
      _tao_enumerator = static_cast<DynAnyTests::test_enum> (_tao_temp);
    }

  return _tao_success;
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_structure/cdr_op_cs.cpp:49

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const DynAnyTests::StructTypedefEnum &_tao_aggregate)
{
  return
    (strm << _tao_aggregate.field_1) &&
    (strm << _tao_aggregate.field_2) &&
    (strm << _tao_aggregate.field_3);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    DynAnyTests::StructTypedefEnum &_tao_aggregate)
{
  return
    (strm >> _tao_aggregate.field_1) &&
    (strm >> _tao_aggregate.field_2) &&
    (strm >> _tao_aggregate.field_3);
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_union/cdr_op_cs.cpp:74


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const DynAnyTests::test_union &_tao_union
  )
{
  if ( !(strm << _tao_union._d ()) )
    {
      return false;
    }

  ::CORBA::Boolean result = true;

  switch (_tao_union._d ())
  {
    case DynAnyTests::TE_SECOND:
      {
        result = strm << _tao_union.tc ();
      }
      break;
    case DynAnyTests::TE_FOURTH:
      {
        result = strm << _tao_union.te ();
      }
      break;
    default:
      {
        result = strm << _tao_union.s ();
      }
      break;
    case DynAnyTests::TE_THIRD:
      {
        result = strm << _tao_union.str ();
      }
      break;
    case DynAnyTests::TE_ZEROTH:
      {
        result = strm << ::ACE_OutputCDR::from_octet (_tao_union.o ());
      }
      break;
  }

  return result;
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    DynAnyTests::test_union &_tao_union
  )
{
  DynAnyTests::test_enum _tao_discriminant;
  if ( !(strm >> _tao_discriminant) )
    {
      return false;
    }

  ::CORBA::Boolean result = true;

  switch (_tao_discriminant)
  {
    case DynAnyTests::TE_SECOND:
      {
        ::CORBA::TypeCode_var _tao_union_tmp;
        result = strm >> _tao_union_tmp.out ();

        if (result)
          {
            _tao_union.tc (_tao_union_tmp.in ());
            _tao_union._d (_tao_discriminant);
          }
      }
      break;
    case DynAnyTests::TE_FOURTH:
      {
        DynAnyTests::test_enum _tao_union_tmp =
          static_cast<DynAnyTests::test_enum> (0UL);
        result = strm >> _tao_union_tmp;

        if (result)
          {
            _tao_union.te (_tao_union_tmp);
            _tao_union._d (_tao_discriminant);
          }
      }
      break;
    default:
      {
        CORBA::Short _tao_union_tmp;
        result = strm >> _tao_union_tmp;

        if (result)
          {
            _tao_union.s (_tao_union_tmp);
            _tao_union._d (_tao_discriminant);
          }
      }
      break;
    case DynAnyTests::TE_THIRD:
      {
        ::CORBA::String_var _tao_union_tmp;
        result = strm >> _tao_union_tmp.out ();

        if (result)
          {
            _tao_union.str (_tao_union_tmp);
            _tao_union._d (_tao_discriminant);
          }
      }
      break;
    case DynAnyTests::TE_ZEROTH:
      {
        ::CORBA::Octet _tao_union_tmp;
        ::ACE_InputCDR::to_octet _tao_union_helper (_tao_union_tmp);
        result = strm >> _tao_union_helper;

        if (result)
          {
            _tao_union.o (_tao_union_tmp);
            _tao_union._d (_tao_discriminant);
          }
      }
      break;
  }

  return result;
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_union/cdr_op_cs.cpp:74


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const DynAnyTests::test_implicit_def &_tao_union
  )
{
  ::ACE_OutputCDR::from_boolean tmp (_tao_union._d ());
  if ( !(strm << tmp) )
    {
      return false;
    }

  ::CORBA::Boolean result = true;

  if (_tao_union._d ())
    {
      result = strm << _tao_union.tenum ();
    }

  return result;
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    DynAnyTests::test_implicit_def &_tao_union
  )
{
  CORBA::Boolean _tao_discriminant;
  ::ACE_InputCDR::to_boolean tmp (_tao_discriminant);
  if ( !(strm >> tmp) )
    {
      return false;
    }

  ::CORBA::Boolean result = true;

  _tao_union._default ();
  _tao_union._d (_tao_discriminant);
  if (_tao_discriminant)
    {
      DynAnyTests::test_enum _tao_union_tmp =
        static_cast<DynAnyTests::test_enum> (0UL);
      result = strm >> _tao_union_tmp;

      if (result)
        {
          _tao_union.tenum (_tao_union_tmp);
          _tao_union._d (_tao_discriminant);
        }
    }

  return result;
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_union/cdr_op_cs.cpp:74


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const DynAnyTests::test_union_no_active_member &_tao_union
  )
{
  if ( !(strm << _tao_union._d ()) )
    {
      return false;
    }

  ::CORBA::Boolean result = true;

  switch (_tao_union._d ())
  {
    case 1:
      {
        result = strm << _tao_union.field_long ();
      }
      break;
    case 2:
      {
        result = strm << _tao_union.field_string ();
      }
      break;
    default:
      break;
  }

  return result;
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    DynAnyTests::test_union_no_active_member &_tao_union
  )
{
  CORBA::Long _tao_discriminant;
  if ( !(strm >> _tao_discriminant) )
    {
      return false;
    }

  ::CORBA::Boolean result = true;

  switch (_tao_discriminant)
  {
    case 1:
      {
        CORBA::Long _tao_union_tmp;
        result = strm >> _tao_union_tmp;

        if (result)
          {
            _tao_union.field_long (_tao_union_tmp);
            _tao_union._d (_tao_discriminant);
          }
      }
      break;
    case 2:
      {
        ::CORBA::String_var _tao_union_tmp;
        result = strm >> _tao_union_tmp.out ();

        if (result)
          {
            _tao_union.field_string (_tao_union_tmp);
            _tao_union._d (_tao_discriminant);
          }
      }
      break;
    default:
      _tao_union._default ();
      // For maximum interop compatibility, force the same value as transmitted
      _tao_union._d (_tao_discriminant);
      break;
  }

  return result;
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_structure/cdr_op_cs.cpp:49

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const DynAnyTests::test_struct_with_long_double &_tao_aggregate)
{
  return
    (strm << _tao_aggregate.field_longdouble);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    DynAnyTests::test_struct_with_long_double &_tao_aggregate)
{
  return
    (strm >> _tao_aggregate.field_longdouble);
}

TAO_END_VERSIONED_NAMESPACE_DECL



