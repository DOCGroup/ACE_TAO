// -*- C++ -*-
/**
 * Code generated by the The ACE ORB (TAO) IDL Compiler v2.4.1
 * TAO and the TAO IDL Compiler have been developed by:
 *       Center for Distributed Object Computing
 *       Washington University
 *       St. Louis, MO
 *       USA
 *       http://www.cs.wustl.edu/~schmidt/doc-center.html
 * and
 *       Distributed Object Computing Laboratory
 *       University of California at Irvine
 *       Irvine, CA
 *       USA
 * and
 *       Institute for Software Integrated Systems
 *       Vanderbilt University
 *       Nashville, TN
 *       USA
 *       http://www.isis.vanderbilt.edu/
 *
 * Information about TAO is available at:
 *     http://www.dre.vanderbilt.edu/~schmidt/TAO.html
 **/

// TAO_IDL - Generated from
// be/be_codegen.cpp:458

#ifndef _TAO_IDL_TIMEOUTS_JPFOZO_H_
#define _TAO_IDL_TIMEOUTS_JPFOZO_H_

#include /**/ "ace/pre.h"

#include "timeoutC.h"
#include "tao/PortableServer/Basic_SArguments.h"
#include "tao/PortableServer/Special_Basic_SArguments.h"
#include "tao/PortableServer/Fixed_Size_SArgument_T.h"
#include "tao/PortableServer/Var_Size_SArgument_T.h"
#include "tao/PortableServer/Object_SArg_Traits.h"
#include "tao/PortableServer/UB_String_SArguments.h"
#include "tao/PortableServer/Object_SArg_Traits.h"
#include "tao/PortableServer/get_arg.h"
#include "tao/Special_Basic_Arguments.h"
#include "tao/UB_String_Arguments.h"

#if !defined (ACE_LACKS_PRAGMA_ONCE)
# pragma once
#endif /* ACE_LACKS_PRAGMA_ONCE */

#include "tao/Messaging/MessagingS.h"
#include "tao/PortableServer/PortableServer.h"
#include "tao/PortableServer/Servant_Base.h"

// TAO_IDL - Generated from
// be/be_visitor_arg_traits.cpp:66

TAO_BEGIN_VERSIONED_NAMESPACE_DECL


// Arg traits specializations.
namespace TAO
{

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:306

#if !defined (_MESSAGING_EXCEPTIONHOLDER__SARG_TRAITS_)
#define _MESSAGING_EXCEPTIONHOLDER__SARG_TRAITS_

  template<>
  class SArg_Traits< ::Messaging::ExceptionHolder>
    : public
        Object_SArg_Traits_T<
            ::Messaging::ExceptionHolder *,
            ::Messaging::ExceptionHolder_var,
            ::Messaging::ExceptionHolder_out,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:145

#if !defined (_TIMEOUTOBJ__SARG_TRAITS_)
#define _TIMEOUTOBJ__SARG_TRAITS_

  template<>
  class  SArg_Traits< ::TimeoutObj>
    : public
        Object_SArg_Traits_T<
            ::TimeoutObj_ptr,
            ::TimeoutObj_var,
            ::TimeoutObj_out,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:145

#if !defined (_AMI_TIMEOUTOBJHANDLER__SARG_TRAITS_)
#define _AMI_TIMEOUTOBJHANDLER__SARG_TRAITS_

  template<>
  class  SArg_Traits< ::AMI_TimeoutObjHandler>
    : public
        Object_SArg_Traits_T<
            ::AMI_TimeoutObjHandler_ptr,
            ::AMI_TimeoutObjHandler_var,
            ::AMI_TimeoutObjHandler_out,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

#endif /* end #if !defined */
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_interface/interface_sh.cpp:73

class POA_TimeoutObj;
typedef POA_TimeoutObj *POA_TimeoutObj_ptr;

class  POA_TimeoutObj
  : public virtual PortableServer::ServantBase
{
protected:
  POA_TimeoutObj (void);

public:
  /// Useful for template programming.
  typedef ::TimeoutObj _stub_type;
  typedef ::TimeoutObj_ptr _stub_ptr_type;
  typedef ::TimeoutObj_var _stub_var_type;

  POA_TimeoutObj (const POA_TimeoutObj& rhs);
  virtual ~POA_TimeoutObj (void);

  virtual ::CORBA::Boolean _is_a (const char* logical_type_id);

  virtual void _dispatch (
      TAO_ServerRequest & req,
      TAO::Portable_Server::Servant_Upcall *servant_upcall);

  ::TimeoutObj *_this (void);

  virtual const char* _interface_repository_id (void) const;

  // TAO_IDL - Generated from
  // be/be_visitor_operation/operation_sh.cpp:36

  virtual void sendTimeToWait (
    ::CORBA::Long msec) = 0;

  static void sendTimeToWait_skel (
      TAO_ServerRequest &server_request,
      TAO::Portable_Server::Servant_Upcall *servant_upcall,
      TAO_ServantBase *servant);

  // TAO_IDL - Generated from
  // be/be_visitor_operation/operation_sh.cpp:36

  virtual void shutdown (
    void) = 0;

  static void shutdown_skel (
      TAO_ServerRequest &server_request,
      TAO::Portable_Server::Servant_Upcall *servant_upcall,
      TAO_ServantBase *servant);
};

// TAO_IDL - Generated from
// be/be_visitor_interface/interface_sh.cpp:73

class POA_AMI_TimeoutObjHandler;
typedef POA_AMI_TimeoutObjHandler *POA_AMI_TimeoutObjHandler_ptr;

class  POA_AMI_TimeoutObjHandler
  : public virtual POA_Messaging::ReplyHandler
{
protected:
  POA_AMI_TimeoutObjHandler (void);

public:
  /// Useful for template programming.
  typedef ::AMI_TimeoutObjHandler _stub_type;
  typedef ::AMI_TimeoutObjHandler_ptr _stub_ptr_type;
  typedef ::AMI_TimeoutObjHandler_var _stub_var_type;

  POA_AMI_TimeoutObjHandler (const POA_AMI_TimeoutObjHandler& rhs);
  virtual ~POA_AMI_TimeoutObjHandler (void);

  virtual ::CORBA::Boolean _is_a (const char* logical_type_id);

  virtual void _dispatch (
      TAO_ServerRequest & req,
      TAO::Portable_Server::Servant_Upcall *servant_upcall);

  ::AMI_TimeoutObjHandler *_this (void);

  virtual const char* _interface_repository_id (void) const;

  // TAO_IDL - Generated from
  // be/be_visitor_operation/operation_sh.cpp:36

  virtual void sendTimeToWait (
    void) = 0;

  static void sendTimeToWait_skel (
      TAO_ServerRequest &server_request,
      TAO::Portable_Server::Servant_Upcall *servant_upcall,
      TAO_ServantBase *servant);

  // TAO_IDL - Generated from
  // be/be_visitor_operation/operation_sh.cpp:36

  virtual void sendTimeToWait_excep (
    ::Messaging::ExceptionHolder * excep_holder) = 0;

  static void sendTimeToWait_excep_skel (
      TAO_ServerRequest &server_request,
      TAO::Portable_Server::Servant_Upcall *servant_upcall,
      TAO_ServantBase *servant);
};

#include /**/ "ace/post.h"

#endif /* ifndef */

