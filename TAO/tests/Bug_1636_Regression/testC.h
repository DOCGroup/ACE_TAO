// -*- C++ -*-
/**
 * Code generated by the The ACE ORB (TAO) IDL Compiler v2.4.1
 * TAO and the TAO IDL Compiler have been developed by:
 *       Center for Distributed Object Computing
 *       Washington University
 *       St. Louis, MO
 *       USA
 *       http://www.cs.wustl.edu/~schmidt/doc-center.html
 * and
 *       Distributed Object Computing Laboratory
 *       University of California at Irvine
 *       Irvine, CA
 *       USA
 * and
 *       Institute for Software Integrated Systems
 *       Vanderbilt University
 *       Nashville, TN
 *       USA
 *       http://www.isis.vanderbilt.edu/
 *
 * Information about TAO is available at:
 *     http://www.dre.vanderbilt.edu/~schmidt/TAO.html
 **/

// TAO_IDL - Generated from
// be/be_codegen.cpp:149

#ifndef _TAO_IDL_TESTC_YQNHYG_H_
#define _TAO_IDL_TESTC_YQNHYG_H_

#include /**/ "ace/pre.h"


#include /**/ "ace/config-all.h"

#if !defined (ACE_LACKS_PRAGMA_ONCE)
# pragma once
#endif /* ACE_LACKS_PRAGMA_ONCE */


#include "tao/AnyTypeCode/AnyTypeCode_methods.h"
#include "tao/AnyTypeCode/Any.h"
#include "tao/ORB.h"
#include "tao/Basic_Types.h"
#include "tao/VarOut_T.h"
#include "tao/Arg_Traits_T.h"
#include "tao/Basic_Arguments.h"
#include "tao/Special_Basic_Arguments.h"
#include "tao/Any_Insert_Policy_T.h"
#include "tao/Basic_Argument_T.h"
#include "tao/Fixed_Size_Argument_T.h"
#include "tao/Var_Size_Argument_T.h"
#include /**/ "tao/Version.h"
#include /**/ "tao/Versioned_Namespace.h"

#if TAO_MAJOR_VERSION != 2 || TAO_MINOR_VERSION != 4 || TAO_MICRO_VERSION != 1
#error This file should be regenerated with TAO_IDL
#endif

#if defined (TAO_EXPORT_MACRO)
#undef TAO_EXPORT_MACRO
#endif
#define TAO_EXPORT_MACRO

// TAO_IDL - Generated from
// be/be_visitor_module/module_ch.cpp:35

namespace UnionIecs
{

  // TAO_IDL - Generated from
  // be/be_visitor_enum/enum_ch.cpp:44

  enum E_type_num
  {
    E_type_num_called_party_number,
    E_type_num_calling_party_number,
    E_type_num_inconnu
  };

  typedef E_type_num &E_type_num_out;

  // TAO_IDL - Generated from
  // be/be_visitor_typecode/typecode_decl.cpp:34

  extern  ::CORBA::TypeCode_ptr const _tc_E_type_num;

  // TAO_IDL - Generated from
  // be/be_visitor_typedef/typedef_ch.cpp:370

  typedef ::CORBA::Octet T_champ_num;
  typedef ::CORBA::Octet_out T_champ_num_out;

  // TAO_IDL - Generated from
  // be/be_visitor_typecode/typecode_decl.cpp:34

  extern  ::CORBA::TypeCode_ptr const _tc_T_champ_num;

  // TAO_IDL - Generated from
  // be/be_type.cpp:258

  struct S_i_num;

  typedef
    ::TAO_Fixed_Var_T<
        S_i_num
      >
    S_i_num_var;

  typedef
    S_i_num &
    S_i_num_out;

  // TAO_IDL - Generated from
  // be/be_visitor_structure/structure_ch.cpp:48

  struct  S_i_num
  {

    // TAO_IDL - Generated from
    // be/be_type.cpp:304


    typedef S_i_num_var _var_type;
    typedef S_i_num_out _out_type;

    static void _tao_any_destructor (void *);

    UnionIecs::E_type_num type_num;
    UnionIecs::T_champ_num nature;
  };

  // TAO_IDL - Generated from
  // be/be_visitor_typecode/typecode_decl.cpp:34

  extern  ::CORBA::TypeCode_ptr const _tc_S_i_num;

  // TAO_IDL - Generated from
  // be/be_type.cpp:258

  class S_num;

  typedef
    ::TAO_Fixed_Var_T<
        S_num
      >
    S_num_var;

  typedef
    S_num &
    S_num_out;

  class  S_num
  {
  public:
    S_num (void);
    S_num (const S_num &);
    ~S_num (void);

    S_num &operator= (const S_num &);

    // TAO_IDL - Generated from
    // be/be_visitor_union/discriminant_ch.cpp:100

    void _d ( ::CORBA::Boolean);
    ::CORBA::Boolean _d (void) const;

    // TAO_IDL - Generated from
    // be/be_type.cpp:304


    typedef S_num_var _var_type;
    typedef S_num_out _out_type;

    static void _tao_any_destructor (void *);

    // TAO_IDL - Generated from
    // be/be_visitor_union_branch/public_ch.cpp:656

    void num (const UnionIecs::S_i_num &);
    const UnionIecs::S_i_num &num (void) const;
    UnionIecs::S_i_num &num (void);

    // TAO_IDL - Generated from
    // be/be_visitor_union/union_ch.cpp:121

    void _default (void);
  private:
    ::CORBA::Boolean disc_;

    union
    {
      // TAO_IDL - Generated from
      // be/be_visitor_union_branch/private_ch.cpp:519
      UnionIecs::S_i_num num_;
    } u_;

    /// TAO extension - frees any allocated storage.
    void _reset (void);
  };

  // TAO_IDL - Generated from
  // be/be_visitor_typecode/typecode_decl.cpp:34

  extern  ::CORBA::TypeCode_ptr const _tc_S_num;

// TAO_IDL - Generated from
// be/be_visitor_module/module_ch.cpp:64

} // module UnionIecs

// TAO_IDL - Generated from
// be/be_visitor_arg_traits.cpp:66

TAO_BEGIN_VERSIONED_NAMESPACE_DECL


// Arg traits specializations.
namespace TAO
{

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:902

  template<>
  class Arg_Traits< ::UnionIecs::E_type_num>
    : public
        Basic_Arg_Traits_T<
            ::UnionIecs::E_type_num,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:945

  template<>
  class Arg_Traits< ::UnionIecs::S_i_num>
    : public
        Fixed_Size_Arg_Traits_T<
            ::UnionIecs::S_i_num,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:1056

  template<>
  class Arg_Traits< ::UnionIecs::S_num>
    : public
        Fixed_Size_Arg_Traits_T<
            ::UnionIecs::S_num,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_traits.cpp:60

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Traits specializations.
namespace TAO
{
}
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_enum/any_op_ch.cpp:36

#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace UnionIecs
{


   void operator<<= (::CORBA::Any &, ::UnionIecs::E_type_num);
   ::CORBA::Boolean operator>>= (const ::CORBA::Any &, ::UnionIecs::E_type_num &);
}

#else


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



 void operator<<= (::CORBA::Any &, UnionIecs::E_type_num);
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, UnionIecs::E_type_num &);
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_structure/any_op_ch.cpp:42



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace UnionIecs
{
   void operator<<= (::CORBA::Any &, const ::UnionIecs::S_i_num &); // copying version
   void operator<<= (::CORBA::Any &, ::UnionIecs::S_i_num*); // noncopying version
   ::CORBA::Boolean operator>>= (const ::CORBA::Any &, ::UnionIecs::S_i_num *&); // deprecated
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const ::UnionIecs::S_i_num *&);
}

#else


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 void operator<<= (::CORBA::Any &, const UnionIecs::S_i_num &); // copying version
 void operator<<= (::CORBA::Any &, UnionIecs::S_i_num*); // noncopying version
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, UnionIecs::S_i_num *&); // deprecated
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const UnionIecs::S_i_num *&);
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_union/any_op_ch.cpp:37



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace UnionIecs
{
   void operator<<= (::CORBA::Any &, const ::UnionIecs::S_num &); // copying version
   void operator<<= (::CORBA::Any &, ::UnionIecs::S_num*); // noncopying version
   ::CORBA::Boolean operator>>= (const ::CORBA::Any &, ::UnionIecs::S_num *&); // deprecated
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const ::UnionIecs::S_num *&);
}

#else


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 void operator<<= (::CORBA::Any &, const UnionIecs::S_num &); // copying version
 void operator<<= (::CORBA::Any &, UnionIecs::S_num*); // noncopying version
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, UnionIecs::S_num *&); // deprecated
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const UnionIecs::S_num *&);
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_enum/cdr_op_ch.cpp:34


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 ::CORBA::Boolean operator<< (TAO_OutputCDR &strm, UnionIecs::E_type_num _tao_enumerator);
 ::CORBA::Boolean operator>> (TAO_InputCDR &strm, UnionIecs::E_type_num &_tao_enumerator);

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_structure/cdr_op_ch.cpp:43


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 ::CORBA::Boolean operator<< (TAO_OutputCDR &, const UnionIecs::S_i_num &);
 ::CORBA::Boolean operator>> (TAO_InputCDR &, UnionIecs::S_i_num &);

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_union/cdr_op_ch.cpp:38


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 ::CORBA::Boolean operator<< (TAO_OutputCDR &, const UnionIecs::S_num &);
 ::CORBA::Boolean operator>> (TAO_InputCDR &, UnionIecs::S_num &);

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_codegen.cpp:1700
#if defined (__ACE_INLINE__)
#include "testC.inl"
#endif /* defined INLINE */

#include /**/ "ace/post.h"

#endif /* ifndef */

