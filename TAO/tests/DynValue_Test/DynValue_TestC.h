// -*- C++ -*-
/**
 * Code generated by the The ACE ORB (TAO) IDL Compiler v2.4.1
 * TAO and the TAO IDL Compiler have been developed by:
 *       Center for Distributed Object Computing
 *       Washington University
 *       St. Louis, MO
 *       USA
 *       http://www.cs.wustl.edu/~schmidt/doc-center.html
 * and
 *       Distributed Object Computing Laboratory
 *       University of California at Irvine
 *       Irvine, CA
 *       USA
 * and
 *       Institute for Software Integrated Systems
 *       Vanderbilt University
 *       Nashville, TN
 *       USA
 *       http://www.isis.vanderbilt.edu/
 *
 * Information about TAO is available at:
 *     http://www.dre.vanderbilt.edu/~schmidt/TAO.html
 **/

// TAO_IDL - Generated from
// be/be_codegen.cpp:149

#ifndef _TAO_IDL_DYNVALUE_TESTC_KKAXLP_H_
#define _TAO_IDL_DYNVALUE_TESTC_KKAXLP_H_

#include /**/ "ace/pre.h"


#include /**/ "ace/config-all.h"

#if !defined (ACE_LACKS_PRAGMA_ONCE)
# pragma once
#endif /* ACE_LACKS_PRAGMA_ONCE */


#include "tao/AnyTypeCode/AnyTypeCode_methods.h"
#include "tao/AnyTypeCode/Any.h"
#include "tao/Valuetype/ValueBase.h"
#include "tao/CDR.h"
#include "tao/Valuetype/Valuetype_Adapter_Factory_Impl.h"
#include "tao/Valuetype/ValueFactory.h"
#include "tao/ORB.h"
#include "tao/SystemException.h"
#include "tao/Basic_Types.h"
#include "tao/ORB_Constants.h"
#include "tao/Valuetype/Value_VarOut_T.h"
#include "tao/Arg_Traits_T.h"
#include "tao/Basic_Arguments.h"
#include "tao/Special_Basic_Arguments.h"
#include "tao/Any_Insert_Policy_T.h"
#include "tao/Fixed_Size_Argument_T.h"
#include "tao/Var_Size_Argument_T.h"
#include /**/ "tao/Version.h"
#include /**/ "tao/Versioned_Namespace.h"

#if TAO_MAJOR_VERSION != 2 || TAO_MINOR_VERSION != 4 || TAO_MICRO_VERSION != 1
#error This file should be regenerated with TAO_IDL
#endif

#if defined (TAO_EXPORT_MACRO)
#undef TAO_EXPORT_MACRO
#endif
#define TAO_EXPORT_MACRO

// TAO_IDL - Generated from
// be/be_visitor_module/module_ch.cpp:35

namespace DynValue_Test
{

  // TAO_IDL - Generated from
  // be/be_valuetype.cpp:564



#if !defined (_DYNVALUE_TEST_AVT__VAR_OUT_CH_)
#define _DYNVALUE_TEST_AVT__VAR_OUT_CH_

  class avt;
  typedef
    TAO_Value_Var_T<
        avt
      >
    avt_var;

  typedef
    TAO_Value_Out_T<
        avt
      >
    avt_out;

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // be/be_visitor_valuetype/valuetype_ch.cpp:50

  class  avt
    : public virtual ::CORBA::ValueBase
  {
  public:

    // TAO_IDL - Generated from
    // be/be_type.cpp:304

    typedef avt * _ptr_type;
    typedef avt_var _var_type;
    typedef avt_out _out_type;

    static void _tao_any_destructor (void *);

    static avt* _downcast ( ::CORBA::ValueBase *v);

    /// TAO extensions or internals
    static ::CORBA::Boolean _tao_unmarshal (
        TAO_InputCDR &strm,
        avt *&new_object);

    virtual const char* _tao_obv_repository_id (void) const;

    virtual void _tao_obv_truncatable_repo_ids (Repository_Id_List &) const;

    static const char* _tao_obv_static_repository_id (void);

    virtual ::CORBA::TypeCode_ptr _tao_type (void) const;

  public:

    // TAO_IDL - Generated from
    // be/be_visitor_valuetype/valuetype_ch.cpp:396

  public:
    virtual void print (void) = 0;

  // TAO_IDL - Generated from
  // be/be_visitor_valuetype/valuetype_ch.cpp:238

protected:
  avt (void);
  virtual ~avt (void);


private:
  avt (const avt &);
  void operator= (const avt &);

};

// TAO_IDL - Generated from
// be/be_visitor_typecode/typecode_decl.cpp:34

extern  ::CORBA::TypeCode_ptr const _tc_avt;

// TAO_IDL - Generated from
// be/be_valuetype.cpp:564



#if !defined (_DYNVALUE_TEST_BASEVALUE__VAR_OUT_CH_)
#define _DYNVALUE_TEST_BASEVALUE__VAR_OUT_CH_

class BaseValue;
typedef
  TAO_Value_Var_T<
      BaseValue
    >
  BaseValue_var;

typedef
  TAO_Value_Out_T<
      BaseValue
    >
  BaseValue_out;

#endif /* end #if !defined */

// TAO_IDL - Generated from
// be/be_visitor_valuetype/valuetype_ch.cpp:50

class  BaseValue
  : public virtual avt
{
public:

  // TAO_IDL - Generated from
  // be/be_type.cpp:304

  typedef BaseValue * _ptr_type;
  typedef BaseValue_var _var_type;
  typedef BaseValue_out _out_type;

  static void _tao_any_destructor (void *);

  static BaseValue* _downcast ( ::CORBA::ValueBase *v);

  /// TAO extensions or internals
  static ::CORBA::Boolean _tao_unmarshal (
      TAO_InputCDR &strm,
      BaseValue *&new_object);

  virtual const char* _tao_obv_repository_id (void) const;

  virtual void _tao_obv_truncatable_repo_ids (Repository_Id_List &) const;

  static const char* _tao_obv_static_repository_id (void);

  virtual ::CORBA::TypeCode_ptr _tao_type (void) const;

public:

  // TAO_IDL - Generated from
  // be/be_visitor_valuetype/field_ch.cpp:459

  virtual void Base_us1 (const ::CORBA::UShort) = 0;
  virtual ::CORBA::UShort Base_us1 (void) const = 0;

public:

  // TAO_IDL - Generated from
  // be/be_visitor_valuetype/field_ch.cpp:459

  virtual void Base_us2 (const ::CORBA::UShort) = 0;
  virtual ::CORBA::UShort Base_us2 (void) const = 0;

  // TAO_IDL - Generated from
  // be/be_visitor_valuetype/valuetype_ch.cpp:238

protected:
  BaseValue (void);
  virtual ~BaseValue (void);

  virtual ::CORBA::Boolean _tao_marshal_v (TAO_OutputCDR &) const;
  virtual ::CORBA::Boolean _tao_unmarshal_v (TAO_InputCDR &);
  virtual ::CORBA::Boolean _tao_match_formal_type (ptrdiff_t ) const;

private:
  BaseValue (const BaseValue &);
  void operator= (const BaseValue &);

protected:
  virtual ::CORBA::Boolean
  _tao_marshal__DynValue_Test_BaseValue (TAO_OutputCDR &, TAO_ChunkInfo &) const = 0;

  virtual ::CORBA::Boolean
  _tao_unmarshal__DynValue_Test_BaseValue (TAO_InputCDR &, TAO_ChunkInfo &) = 0;
};

// TAO_IDL - Generated from
// be/be_visitor_typecode/typecode_decl.cpp:34

extern  ::CORBA::TypeCode_ptr const _tc_BaseValue;

// TAO_IDL - Generated from
// be/be_visitor_valuebox/valuebox_ch.cpp:41

class BoxedLong;

typedef
  TAO_Value_Var_T<
      BoxedLong
    >
  BoxedLong_var;

typedef
  TAO_Value_Out_T<
      BoxedLong
    >
  BoxedLong_out;

class  BoxedLong
  : public virtual ::CORBA::DefaultValueRefCountBase
{
public:

  // TAO_IDL - Generated from
  // be/be_type.cpp:304


  typedef BoxedLong_var _var_type;
  typedef BoxedLong_out _out_type;

  static void _tao_any_destructor (void *);

  static BoxedLong* _downcast ( ::CORBA::ValueBase *);
  ::CORBA::ValueBase * _copy_value (void);

  virtual const char* _tao_obv_repository_id (void) const;

  virtual void _tao_obv_truncatable_repo_ids (Repository_Id_List &ids) const;

  static const char* _tao_obv_static_repository_id (void);

  static ::CORBA::Boolean _tao_unmarshal (
      TAO_InputCDR &,
      BoxedLong *&
    );

  virtual ::CORBA::TypeCode_ptr _tao_type (void) const;



  // TAO_IDL - Generated from
  // be/be_visitor_valuebox/valuebox_ch.cpp:690

  // Constructors
  BoxedLong (void);
  BoxedLong (CORBA::Long val);
  BoxedLong (const BoxedLong& val);

  // Assignment operator
  BoxedLong& operator= (CORBA::Long val);

  // Accessor and modifier
  CORBA::Long _value (void) const;
  void _value (CORBA::Long val);

  // Access to the boxed value for method signatures
  CORBA::Long _boxed_in (void) const;
  CORBA::Long& _boxed_inout (void);
  CORBA::Long& _boxed_out (void);

private:
  CORBA::Long _pd_value;


  // TAO_IDL - Generated from
  // be/be_visitor_valuebox/valuebox_ch.cpp:114

protected:
  virtual ~BoxedLong (void);
  virtual ::CORBA::Boolean _tao_marshal_v (TAO_OutputCDR &) const;
  virtual ::CORBA::Boolean _tao_unmarshal_v (TAO_InputCDR &);
  virtual ::CORBA::Boolean _tao_match_formal_type (ptrdiff_t ) const;

private:
  void operator= (const BoxedLong & val);

};

// TAO_IDL - Generated from
// be/be_visitor_typecode/typecode_decl.cpp:34

extern  ::CORBA::TypeCode_ptr const _tc_BoxedLong;

// TAO_IDL - Generated from
// be/be_valuetype.cpp:564



#if !defined (_DYNVALUE_TEST_NESTEDVALUE__VAR_OUT_CH_)
#define _DYNVALUE_TEST_NESTEDVALUE__VAR_OUT_CH_

class NestedValue;
typedef
  TAO_Value_Var_T<
      NestedValue
    >
  NestedValue_var;

typedef
  TAO_Value_Out_T<
      NestedValue
    >
  NestedValue_out;

#endif /* end #if !defined */

// TAO_IDL - Generated from
// be/be_visitor_valuetype/valuetype_ch.cpp:50

class  NestedValue
  : public virtual ::CORBA::ValueBase
{
public:

  // TAO_IDL - Generated from
  // be/be_type.cpp:304

  typedef NestedValue * _ptr_type;
  typedef NestedValue_var _var_type;
  typedef NestedValue_out _out_type;

  static void _tao_any_destructor (void *);

  static NestedValue* _downcast ( ::CORBA::ValueBase *v);

  /// TAO extensions or internals
  static ::CORBA::Boolean _tao_unmarshal (
      TAO_InputCDR &strm,
      NestedValue *&new_object);

  virtual const char* _tao_obv_repository_id (void) const;

  virtual void _tao_obv_truncatable_repo_ids (Repository_Id_List &) const;

  static const char* _tao_obv_static_repository_id (void);

  virtual ::CORBA::TypeCode_ptr _tao_type (void) const;

public:

  // TAO_IDL - Generated from
  // be/be_visitor_valuetype/field_ch.cpp:459

  virtual void Nested_s1 (const ::CORBA::Short) = 0;
  virtual ::CORBA::Short Nested_s1 (void) const = 0;

public:

  // TAO_IDL - Generated from
  // be/be_visitor_valuetype/field_ch.cpp:459

  virtual void Nested_s2 (const ::CORBA::Short) = 0;
  virtual ::CORBA::Short Nested_s2 (void) const = 0;

  // TAO_IDL - Generated from
  // be/be_visitor_valuetype/valuetype_ch.cpp:238

protected:
  NestedValue (void);
  virtual ~NestedValue (void);

  virtual ::CORBA::Boolean _tao_marshal_v (TAO_OutputCDR &) const;
  virtual ::CORBA::Boolean _tao_unmarshal_v (TAO_InputCDR &);
  virtual ::CORBA::Boolean _tao_match_formal_type (ptrdiff_t ) const;

private:
  NestedValue (const NestedValue &);
  void operator= (const NestedValue &);

protected:
  virtual ::CORBA::Boolean
  _tao_marshal__DynValue_Test_NestedValue (TAO_OutputCDR &, TAO_ChunkInfo &) const = 0;

  virtual ::CORBA::Boolean
  _tao_unmarshal__DynValue_Test_NestedValue (TAO_InputCDR &, TAO_ChunkInfo &) = 0;
};

// TAO_IDL - Generated from
// be/be_visitor_valuetype/valuetype_init_ch.cpp:57

class  NestedValue_init
  : public virtual ::CORBA::ValueFactoryBase
{
public:
  NestedValue_init (void);

  static NestedValue_init* _downcast ( ::CORBA::ValueFactoryBase *);

  virtual ::CORBA::ValueBase *
  create_for_unmarshal (void);

  // TAO-specific extensions
public:
  virtual const char* tao_repository_id (void);

protected:
  virtual ~NestedValue_init (void);
};

// TAO_IDL - Generated from
// be/be_visitor_typecode/typecode_decl.cpp:34

extern  ::CORBA::TypeCode_ptr const _tc_NestedValue;

// TAO_IDL - Generated from
// be/be_valuetype.cpp:564



#if !defined (_DYNVALUE_TEST_NULLVALUE__VAR_OUT_CH_)
#define _DYNVALUE_TEST_NULLVALUE__VAR_OUT_CH_

class NullValue;
typedef
  TAO_Value_Var_T<
      NullValue
    >
  NullValue_var;

typedef
  TAO_Value_Out_T<
      NullValue
    >
  NullValue_out;

#endif /* end #if !defined */

// TAO_IDL - Generated from
// be/be_visitor_valuetype/valuetype_ch.cpp:50

class  NullValue
  : public virtual ::CORBA::ValueBase
{
public:

  // TAO_IDL - Generated from
  // be/be_type.cpp:304

  typedef NullValue * _ptr_type;
  typedef NullValue_var _var_type;
  typedef NullValue_out _out_type;

  static void _tao_any_destructor (void *);

  static NullValue* _downcast ( ::CORBA::ValueBase *v);

  /// TAO extensions or internals
  static ::CORBA::Boolean _tao_unmarshal (
      TAO_InputCDR &strm,
      NullValue *&new_object);

  virtual const char* _tao_obv_repository_id (void) const;

  virtual void _tao_obv_truncatable_repo_ids (Repository_Id_List &) const;

  static const char* _tao_obv_static_repository_id (void);

  virtual ::CORBA::TypeCode_ptr _tao_type (void) const;

  // TAO_IDL - Generated from
  // be/be_visitor_valuetype/valuetype_ch.cpp:238

protected:
  NullValue (void);
  virtual ~NullValue (void);

  virtual ::CORBA::Boolean _tao_marshal_v (TAO_OutputCDR &) const;
  virtual ::CORBA::Boolean _tao_unmarshal_v (TAO_InputCDR &);
  virtual ::CORBA::Boolean _tao_match_formal_type (ptrdiff_t ) const;

private:
  NullValue (const NullValue &);
  void operator= (const NullValue &);

protected:
  virtual ::CORBA::Boolean
  _tao_marshal__DynValue_Test_NullValue (TAO_OutputCDR &, TAO_ChunkInfo &) const = 0;

  virtual ::CORBA::Boolean
  _tao_unmarshal__DynValue_Test_NullValue (TAO_InputCDR &, TAO_ChunkInfo &) = 0;
};

// TAO_IDL - Generated from
// be/be_visitor_valuetype/valuetype_init_ch.cpp:57

class  NullValue_init
  : public virtual ::CORBA::ValueFactoryBase
{
public:
  NullValue_init (void);

  static NullValue_init* _downcast ( ::CORBA::ValueFactoryBase *);

  virtual ::CORBA::ValueBase *
  create_for_unmarshal (void);

  // TAO-specific extensions
public:
  virtual const char* tao_repository_id (void);

protected:
  virtual ~NullValue_init (void);
};

// TAO_IDL - Generated from
// be/be_visitor_typecode/typecode_decl.cpp:34

extern  ::CORBA::TypeCode_ptr const _tc_NullValue;

// TAO_IDL - Generated from
// be/be_valuetype.cpp:564



#if !defined (_DYNVALUE_TEST_TRUNC__VAR_OUT_CH_)
#define _DYNVALUE_TEST_TRUNC__VAR_OUT_CH_

class Trunc;
typedef
  TAO_Value_Var_T<
      Trunc
    >
  Trunc_var;

typedef
  TAO_Value_Out_T<
      Trunc
    >
  Trunc_out;

#endif /* end #if !defined */

// TAO_IDL - Generated from
// be/be_visitor_valuetype/valuetype_ch.cpp:50

class  Trunc
  : public virtual BaseValue
{
public:

  // TAO_IDL - Generated from
  // be/be_type.cpp:304

  typedef Trunc * _ptr_type;
  typedef Trunc_var _var_type;
  typedef Trunc_out _out_type;

  static void _tao_any_destructor (void *);

  static Trunc* _downcast ( ::CORBA::ValueBase *v);

  /// TAO extensions or internals
  static ::CORBA::Boolean _tao_unmarshal (
      TAO_InputCDR &strm,
      Trunc *&new_object);

  virtual const char* _tao_obv_repository_id (void) const;

  virtual void _tao_obv_truncatable_repo_ids (Repository_Id_List &) const;

  static const char* _tao_obv_static_repository_id (void);

  virtual ::CORBA::TypeCode_ptr _tao_type (void) const;

public:

  // TAO_IDL - Generated from
  // be/be_visitor_valuetype/field_ch.cpp:318

  virtual void Trunc_bl (DynValue_Test::BoxedLong *) = 0;
  virtual DynValue_Test::BoxedLong *Trunc_bl (void) const = 0;

public:

  // TAO_IDL - Generated from
  // be/be_visitor_valuetype/field_ch.cpp:361

  virtual void Trunc_nested (DynValue_Test::NestedValue *) = 0;
  virtual DynValue_Test::NestedValue *Trunc_nested (void) const = 0;

protected:

  // TAO_IDL - Generated from
  // be/be_visitor_valuetype/field_ch.cpp:361

  virtual void Trunc_null1 (DynValue_Test::NullValue *) = 0;
  virtual DynValue_Test::NullValue *Trunc_null1 (void) const = 0;

protected:

  // TAO_IDL - Generated from
  // be/be_visitor_valuetype/field_ch.cpp:361

  virtual void Trunc_null2 (DynValue_Test::NullValue *) = 0;
  virtual DynValue_Test::NullValue *Trunc_null2 (void) const = 0;

protected:

  // TAO_IDL - Generated from
  // be/be_visitor_valuetype/field_ch.cpp:361

  virtual void Trunc_null3 (DynValue_Test::NullValue *) = 0;
  virtual DynValue_Test::NullValue *Trunc_null3 (void) const = 0;

  // TAO_IDL - Generated from
  // be/be_visitor_valuetype/valuetype_ch.cpp:238

protected:
  Trunc (void);
  virtual ~Trunc (void);

  virtual ::CORBA::Boolean _tao_marshal_v (TAO_OutputCDR &) const;
  virtual ::CORBA::Boolean _tao_unmarshal_v (TAO_InputCDR &);
  virtual ::CORBA::Boolean _tao_match_formal_type (ptrdiff_t ) const;

private:
  Trunc (const Trunc &);
  void operator= (const Trunc &);

protected:
  virtual ::CORBA::Boolean
  _tao_marshal__DynValue_Test_Trunc (TAO_OutputCDR &, TAO_ChunkInfo &) const = 0;

  virtual ::CORBA::Boolean
  _tao_unmarshal__DynValue_Test_Trunc (TAO_InputCDR &, TAO_ChunkInfo &) = 0;
};

// TAO_IDL - Generated from
// be/be_visitor_typecode/typecode_decl.cpp:34

extern  ::CORBA::TypeCode_ptr const _tc_Trunc;

// TAO_IDL - Generated from
// be/be_visitor_module/module_ch.cpp:64

} // module DynValue_Test

// TAO_IDL - Generated from
// be/be_visitor_arg_traits.cpp:66

TAO_BEGIN_VERSIONED_NAMESPACE_DECL


// Arg traits specializations.
namespace TAO
{

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:306

#if !defined (_DYNVALUE_TEST_AVT__ARG_TRAITS_)
#define _DYNVALUE_TEST_AVT__ARG_TRAITS_

  template<>
  class Arg_Traits< ::DynValue_Test::avt>
    : public
        Object_Arg_Traits_T<
            ::DynValue_Test::avt *,
            ::DynValue_Test::avt_var,
            ::DynValue_Test::avt_out,
            TAO::Value_Traits<DynValue_Test::avt>,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:306

#if !defined (_DYNVALUE_TEST_BASEVALUE__ARG_TRAITS_)
#define _DYNVALUE_TEST_BASEVALUE__ARG_TRAITS_

  template<>
  class Arg_Traits< ::DynValue_Test::BaseValue>
    : public
        Object_Arg_Traits_T<
            ::DynValue_Test::BaseValue *,
            ::DynValue_Test::BaseValue_var,
            ::DynValue_Test::BaseValue_out,
            TAO::Value_Traits<DynValue_Test::BaseValue>,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:250

  template<>
  class Arg_Traits< ::DynValue_Test::BoxedLong>
    : public
        Object_Arg_Traits_T<
            ::DynValue_Test::BoxedLong *,
            ::DynValue_Test::BoxedLong_var,
            ::DynValue_Test::BoxedLong_out,
            TAO::Value_Traits<DynValue_Test::BoxedLong>,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:306

#if !defined (_DYNVALUE_TEST_NESTEDVALUE__ARG_TRAITS_)
#define _DYNVALUE_TEST_NESTEDVALUE__ARG_TRAITS_

  template<>
  class Arg_Traits< ::DynValue_Test::NestedValue>
    : public
        Object_Arg_Traits_T<
            ::DynValue_Test::NestedValue *,
            ::DynValue_Test::NestedValue_var,
            ::DynValue_Test::NestedValue_out,
            TAO::Value_Traits<DynValue_Test::NestedValue>,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:306

#if !defined (_DYNVALUE_TEST_NULLVALUE__ARG_TRAITS_)
#define _DYNVALUE_TEST_NULLVALUE__ARG_TRAITS_

  template<>
  class Arg_Traits< ::DynValue_Test::NullValue>
    : public
        Object_Arg_Traits_T<
            ::DynValue_Test::NullValue *,
            ::DynValue_Test::NullValue_var,
            ::DynValue_Test::NullValue_out,
            TAO::Value_Traits<DynValue_Test::NullValue>,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:306

#if !defined (_DYNVALUE_TEST_TRUNC__ARG_TRAITS_)
#define _DYNVALUE_TEST_TRUNC__ARG_TRAITS_

  template<>
  class Arg_Traits< ::DynValue_Test::Trunc>
    : public
        Object_Arg_Traits_T<
            ::DynValue_Test::Trunc *,
            ::DynValue_Test::Trunc_var,
            ::DynValue_Test::Trunc_out,
            TAO::Value_Traits<DynValue_Test::Trunc>,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

#endif /* end #if !defined */
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_valuetype/obv_module.cpp:44

namespace OBV_DynValue_Test
{

  // TAO_IDL - Generated from
  // be/be_visitor_valuetype/valuetype_obv_ch.cpp:44

  // OBV_ class
  class  BaseValue
    : public virtual DynValue_Test::BaseValue
  {

public:

  // TAO_IDL - Generated from
  // be/be_visitor_valuetype/field_ch.cpp:459

  virtual void Base_us1 (const ::CORBA::UShort);
  virtual ::CORBA::UShort Base_us1 (void) const;

public:

  // TAO_IDL - Generated from
  // be/be_visitor_valuetype/field_ch.cpp:459

  virtual void Base_us2 (const ::CORBA::UShort);
  virtual ::CORBA::UShort Base_us2 (void) const;

protected:
  BaseValue (void);
  BaseValue (
      ::CORBA::UShort _tao_init_Base_us1,
      ::CORBA::UShort _tao_init_Base_us2
    );
  virtual ~BaseValue (void);

protected:
  virtual ::CORBA::Boolean
  _tao_marshal__DynValue_Test_BaseValue (TAO_OutputCDR &, TAO_ChunkInfo &) const;

  virtual ::CORBA::Boolean
  _tao_unmarshal__DynValue_Test_BaseValue (TAO_InputCDR &, TAO_ChunkInfo &);

  ::CORBA::Boolean _tao_marshal_state (TAO_OutputCDR &, TAO_ChunkInfo &) const;
  ::CORBA::Boolean _tao_unmarshal_state (TAO_InputCDR &, TAO_ChunkInfo &);
  virtual void truncation_hook (void);

private:
  ::CORBA::UShort _pd_Base_us1;
  ::CORBA::UShort _pd_Base_us2;
  CORBA::Boolean require_truncation_;
};

// TAO_IDL - Generated from
// be/be_visitor_valuetype/valuetype_obv_ch.cpp:44

// OBV_ class
class  NestedValue
  : public virtual DynValue_Test::NestedValue,
    public virtual ::CORBA::DefaultValueRefCountBase
{

public:

  // TAO_IDL - Generated from
  // be/be_visitor_valuetype/field_ch.cpp:459

  virtual void Nested_s1 (const ::CORBA::Short);
  virtual ::CORBA::Short Nested_s1 (void) const;

public:

  // TAO_IDL - Generated from
  // be/be_visitor_valuetype/field_ch.cpp:459

  virtual void Nested_s2 (const ::CORBA::Short);
  virtual ::CORBA::Short Nested_s2 (void) const;

public:
  NestedValue (void);
  NestedValue (
      ::CORBA::Short _tao_init_Nested_s1,
      ::CORBA::Short _tao_init_Nested_s2
    );
  virtual ~NestedValue (void);

public:
  virtual ::CORBA::ValueBase *_copy_value (void);

protected:
  virtual ::CORBA::Boolean
  _tao_marshal__DynValue_Test_NestedValue (TAO_OutputCDR &, TAO_ChunkInfo &) const;

  virtual ::CORBA::Boolean
  _tao_unmarshal__DynValue_Test_NestedValue (TAO_InputCDR &, TAO_ChunkInfo &);

  ::CORBA::Boolean _tao_marshal_state (TAO_OutputCDR &, TAO_ChunkInfo &) const;
  ::CORBA::Boolean _tao_unmarshal_state (TAO_InputCDR &, TAO_ChunkInfo &);
  virtual void truncation_hook (void);

private:
  ::CORBA::Short _pd_Nested_s1;
  ::CORBA::Short _pd_Nested_s2;
  CORBA::Boolean require_truncation_;
};

// TAO_IDL - Generated from
// be/be_visitor_valuetype/valuetype_obv_ch.cpp:44

// OBV_ class
class  NullValue
  : public virtual DynValue_Test::NullValue,
    public virtual ::CORBA::DefaultValueRefCountBase
{

public:
  NullValue (void);
  virtual ~NullValue (void);

public:
  virtual ::CORBA::ValueBase *_copy_value (void);

protected:
  virtual ::CORBA::Boolean
  _tao_marshal__DynValue_Test_NullValue (TAO_OutputCDR &, TAO_ChunkInfo &) const;

  virtual ::CORBA::Boolean
  _tao_unmarshal__DynValue_Test_NullValue (TAO_InputCDR &, TAO_ChunkInfo &);

  ::CORBA::Boolean _tao_marshal_state (TAO_OutputCDR &, TAO_ChunkInfo &) const;
  ::CORBA::Boolean _tao_unmarshal_state (TAO_InputCDR &, TAO_ChunkInfo &);
  virtual void truncation_hook (void);

private:
  CORBA::Boolean require_truncation_;
};

// TAO_IDL - Generated from
// be/be_visitor_valuetype/valuetype_obv_ch.cpp:44

// OBV_ class
class  Trunc
  : public virtual DynValue_Test::Trunc,
    public virtual OBV_DynValue_Test::BaseValue
{

public:

  // TAO_IDL - Generated from
  // be/be_visitor_valuetype/field_ch.cpp:318

  virtual void Trunc_bl (DynValue_Test::BoxedLong *);
  virtual DynValue_Test::BoxedLong *Trunc_bl (void) const;

public:

  // TAO_IDL - Generated from
  // be/be_visitor_valuetype/field_ch.cpp:361

  virtual void Trunc_nested (DynValue_Test::NestedValue *);
  virtual DynValue_Test::NestedValue *Trunc_nested (void) const;

protected:

  // TAO_IDL - Generated from
  // be/be_visitor_valuetype/field_ch.cpp:361

  virtual void Trunc_null1 (DynValue_Test::NullValue *);
  virtual DynValue_Test::NullValue *Trunc_null1 (void) const;

protected:

  // TAO_IDL - Generated from
  // be/be_visitor_valuetype/field_ch.cpp:361

  virtual void Trunc_null2 (DynValue_Test::NullValue *);
  virtual DynValue_Test::NullValue *Trunc_null2 (void) const;

protected:

  // TAO_IDL - Generated from
  // be/be_visitor_valuetype/field_ch.cpp:361

  virtual void Trunc_null3 (DynValue_Test::NullValue *);
  virtual DynValue_Test::NullValue *Trunc_null3 (void) const;

protected:
  Trunc (void);
  Trunc (
      ::CORBA::UShort _tao_init_Base_us1,
      ::CORBA::UShort _tao_init_Base_us2,
      ::DynValue_Test::BoxedLong * _tao_init_Trunc_bl,
      ::DynValue_Test::NestedValue * _tao_init_Trunc_nested,
      ::DynValue_Test::NullValue * _tao_init_Trunc_null1,
      ::DynValue_Test::NullValue * _tao_init_Trunc_null2,
      ::DynValue_Test::NullValue * _tao_init_Trunc_null3
    );
  virtual ~Trunc (void);

protected:
  virtual ::CORBA::Boolean
  _tao_marshal__DynValue_Test_Trunc (TAO_OutputCDR &, TAO_ChunkInfo &) const;

  virtual ::CORBA::Boolean
  _tao_unmarshal__DynValue_Test_Trunc (TAO_InputCDR &, TAO_ChunkInfo &);

  ::CORBA::Boolean _tao_marshal_state (TAO_OutputCDR &, TAO_ChunkInfo &) const;
  ::CORBA::Boolean _tao_unmarshal_state (TAO_InputCDR &, TAO_ChunkInfo &);
  virtual void truncation_hook (void);

private:
  DynValue_Test::BoxedLong_var _pd_Trunc_bl;
  DynValue_Test::NestedValue_var _pd_Trunc_nested;
  DynValue_Test::NullValue_var _pd_Trunc_null1;
  DynValue_Test::NullValue_var _pd_Trunc_null2;
  DynValue_Test::NullValue_var _pd_Trunc_null3;
  CORBA::Boolean require_truncation_;
};
}

// TAO_IDL - Generated from
// be/be_visitor_traits.cpp:60

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Traits specializations.
namespace TAO
{

#if !defined (_DYNVALUE_TEST_AVT__TRAITS_)
#define _DYNVALUE_TEST_AVT__TRAITS_

  template<>
  struct  Value_Traits<DynValue_Test::avt>
  {
    static void add_ref (DynValue_Test::avt *);
    static void remove_ref (DynValue_Test::avt *);
    static void release (DynValue_Test::avt *);
  };

#endif /* end #if !defined */

#if !defined (_DYNVALUE_TEST_BASEVALUE__TRAITS_)
#define _DYNVALUE_TEST_BASEVALUE__TRAITS_

  template<>
  struct  Value_Traits<DynValue_Test::BaseValue>
  {
    static void add_ref (DynValue_Test::BaseValue *);
    static void remove_ref (DynValue_Test::BaseValue *);
    static void release (DynValue_Test::BaseValue *);
  };

#endif /* end #if !defined */

#if !defined (_DYNVALUE_TEST_BOXEDLONG__TRAITS_)
#define _DYNVALUE_TEST_BOXEDLONG__TRAITS_

  template<>
  struct  Value_Traits<DynValue_Test::BoxedLong>
  {
    static void add_ref (DynValue_Test::BoxedLong *);
    static void remove_ref (DynValue_Test::BoxedLong *);
    static void release (DynValue_Test::BoxedLong *);
  };

#endif /* end #if !defined */

#if !defined (_DYNVALUE_TEST_NESTEDVALUE__TRAITS_)
#define _DYNVALUE_TEST_NESTEDVALUE__TRAITS_

  template<>
  struct  Value_Traits<DynValue_Test::NestedValue>
  {
    static void add_ref (DynValue_Test::NestedValue *);
    static void remove_ref (DynValue_Test::NestedValue *);
    static void release (DynValue_Test::NestedValue *);
  };

#endif /* end #if !defined */

#if !defined (_DYNVALUE_TEST_NULLVALUE__TRAITS_)
#define _DYNVALUE_TEST_NULLVALUE__TRAITS_

  template<>
  struct  Value_Traits<DynValue_Test::NullValue>
  {
    static void add_ref (DynValue_Test::NullValue *);
    static void remove_ref (DynValue_Test::NullValue *);
    static void release (DynValue_Test::NullValue *);
  };

#endif /* end #if !defined */

#if !defined (_DYNVALUE_TEST_TRUNC__TRAITS_)
#define _DYNVALUE_TEST_TRUNC__TRAITS_

  template<>
  struct  Value_Traits<DynValue_Test::Trunc>
  {
    static void add_ref (DynValue_Test::Trunc *);
    static void remove_ref (DynValue_Test::Trunc *);
    static void release (DynValue_Test::Trunc *);
  };

#endif /* end #if !defined */
}
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_valuetype/any_op_ch.cpp:43



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace DynValue_Test
{
   void operator<<= ( ::CORBA::Any &, avt *); // copying
   void operator<<= ( ::CORBA::Any &, avt **); // non-copying
   ::CORBA::Boolean operator>>= (const ::CORBA::Any &, avt *&);
}

#else


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 void operator<<= (::CORBA::Any &, DynValue_Test::avt *); // copying
 void operator<<= (::CORBA::Any &, DynValue_Test::avt **); // non-copying
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, DynValue_Test::avt *&);
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_valuetype/any_op_ch.cpp:43



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace DynValue_Test
{
   void operator<<= ( ::CORBA::Any &, BaseValue *); // copying
   void operator<<= ( ::CORBA::Any &, BaseValue **); // non-copying
   ::CORBA::Boolean operator>>= (const ::CORBA::Any &, BaseValue *&);
}

#else


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 void operator<<= (::CORBA::Any &, DynValue_Test::BaseValue *); // copying
 void operator<<= (::CORBA::Any &, DynValue_Test::BaseValue **); // non-copying
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, DynValue_Test::BaseValue *&);
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_valuebox/any_op_ch.cpp:43



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace DynValue_Test
{
   void operator<<= ( ::CORBA::Any &, BoxedLong *); // copying
   void operator<<= ( ::CORBA::Any &, BoxedLong **); // non-copying
   ::CORBA::Boolean operator>>= (const ::CORBA::Any &, BoxedLong *&);
}

#else


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 void operator<<= (::CORBA::Any &, DynValue_Test::BoxedLong *); // copying
 void operator<<= (::CORBA::Any &, DynValue_Test::BoxedLong **); // non-copying
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, DynValue_Test::BoxedLong *&);
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_valuetype/any_op_ch.cpp:43



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace DynValue_Test
{
   void operator<<= ( ::CORBA::Any &, NestedValue *); // copying
   void operator<<= ( ::CORBA::Any &, NestedValue **); // non-copying
   ::CORBA::Boolean operator>>= (const ::CORBA::Any &, NestedValue *&);
}

#else


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 void operator<<= (::CORBA::Any &, DynValue_Test::NestedValue *); // copying
 void operator<<= (::CORBA::Any &, DynValue_Test::NestedValue **); // non-copying
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, DynValue_Test::NestedValue *&);
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_valuetype/any_op_ch.cpp:43



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace DynValue_Test
{
   void operator<<= ( ::CORBA::Any &, NullValue *); // copying
   void operator<<= ( ::CORBA::Any &, NullValue **); // non-copying
   ::CORBA::Boolean operator>>= (const ::CORBA::Any &, NullValue *&);
}

#else


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 void operator<<= (::CORBA::Any &, DynValue_Test::NullValue *); // copying
 void operator<<= (::CORBA::Any &, DynValue_Test::NullValue **); // non-copying
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, DynValue_Test::NullValue *&);
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_valuetype/any_op_ch.cpp:43



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace DynValue_Test
{
   void operator<<= ( ::CORBA::Any &, Trunc *); // copying
   void operator<<= ( ::CORBA::Any &, Trunc **); // non-copying
   ::CORBA::Boolean operator>>= (const ::CORBA::Any &, Trunc *&);
}

#else


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 void operator<<= (::CORBA::Any &, DynValue_Test::Trunc *); // copying
 void operator<<= (::CORBA::Any &, DynValue_Test::Trunc **); // non-copying
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, DynValue_Test::Trunc *&);
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_valuetype.cpp:456


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

namespace CORBA
{
  extern  void add_ref (DynValue_Test::avt *);
  extern  void remove_ref (DynValue_Test::avt *);
}
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_valuetype/cdr_op_ch.cpp:49


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 ::CORBA::Boolean operator<< (TAO_OutputCDR &, const DynValue_Test::avt *);
 ::CORBA::Boolean operator>> (TAO_InputCDR &, DynValue_Test::avt *&);

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_valuetype.cpp:456


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

namespace CORBA
{
  extern  void add_ref (DynValue_Test::BaseValue *);
  extern  void remove_ref (DynValue_Test::BaseValue *);
}
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_valuetype/cdr_op_ch.cpp:49


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 ::CORBA::Boolean operator<< (TAO_OutputCDR &, const DynValue_Test::BaseValue *);
 ::CORBA::Boolean operator>> (TAO_InputCDR &, DynValue_Test::BaseValue *&);

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_valuebox/cdr_op_ch.cpp:39


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 ::CORBA::Boolean operator<< (TAO_OutputCDR &, const DynValue_Test::BoxedLong *);
 ::CORBA::Boolean operator>> (TAO_InputCDR &, DynValue_Test::BoxedLong *&);
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_valuetype.cpp:456


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

namespace CORBA
{
  extern  void add_ref (DynValue_Test::NestedValue *);
  extern  void remove_ref (DynValue_Test::NestedValue *);
}
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_valuetype/cdr_op_ch.cpp:49


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 ::CORBA::Boolean operator<< (TAO_OutputCDR &, const DynValue_Test::NestedValue *);
 ::CORBA::Boolean operator>> (TAO_InputCDR &, DynValue_Test::NestedValue *&);

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_valuetype.cpp:456


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

namespace CORBA
{
  extern  void add_ref (DynValue_Test::NullValue *);
  extern  void remove_ref (DynValue_Test::NullValue *);
}
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_valuetype/cdr_op_ch.cpp:49


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 ::CORBA::Boolean operator<< (TAO_OutputCDR &, const DynValue_Test::NullValue *);
 ::CORBA::Boolean operator>> (TAO_InputCDR &, DynValue_Test::NullValue *&);

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_valuetype.cpp:456


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

namespace CORBA
{
  extern  void add_ref (DynValue_Test::Trunc *);
  extern  void remove_ref (DynValue_Test::Trunc *);
}
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_valuetype/cdr_op_ch.cpp:49


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 ::CORBA::Boolean operator<< (TAO_OutputCDR &, const DynValue_Test::Trunc *);
 ::CORBA::Boolean operator>> (TAO_InputCDR &, DynValue_Test::Trunc *&);

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_codegen.cpp:1700
#if defined (__ACE_INLINE__)
#include "DynValue_TestC.inl"
#endif /* defined INLINE */

#include /**/ "ace/post.h"

#endif /* ifndef */

