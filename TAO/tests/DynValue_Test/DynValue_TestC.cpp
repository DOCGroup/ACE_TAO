// -*- C++ -*-
/**
 * Code generated by the The ACE ORB (TAO) IDL Compiler v2.4.1
 * TAO and the TAO IDL Compiler have been developed by:
 *       Center for Distributed Object Computing
 *       Washington University
 *       St. Louis, MO
 *       USA
 *       http://www.cs.wustl.edu/~schmidt/doc-center.html
 * and
 *       Distributed Object Computing Laboratory
 *       University of California at Irvine
 *       Irvine, CA
 *       USA
 * and
 *       Institute for Software Integrated Systems
 *       Vanderbilt University
 *       Nashville, TN
 *       USA
 *       http://www.isis.vanderbilt.edu/
 *
 * Information about TAO is available at:
 *     http://www.dre.vanderbilt.edu/~schmidt/TAO.html
 **/

// TAO_IDL - Generated from
// be/be_codegen.cpp:373


#include "DynValue_TestC.h"
#include "tao/AnyTypeCode/Null_RefCount_Policy.h"
#include "tao/AnyTypeCode/TypeCode_Constants.h"
#include "tao/AnyTypeCode/Alias_TypeCode_Static.h"
#include "tao/AnyTypeCode/Value_TypeCode_Static.h"
#include "tao/AnyTypeCode/TypeCode_Value_Field.h"
#include "tao/CDR.h"
#include "tao/CDR.h"
#include "tao/AnyTypeCode/Any.h"
#include "tao/AnyTypeCode/Any_Impl_T.h"

#if !defined (__ACE_INLINE__)
#include "DynValue_TestC.inl"
#endif /* !defined INLINE */

// TAO_IDL - Generated from
// be/be_visitor_typecode/value_typecode.cpp:65

static TAO::TypeCode::Value_Field<char const *, ::CORBA::TypeCode_ptr const *> const * const _tao_fields_DynValue_Test_avt = 0;
static TAO::TypeCode::Value<char const *,
                     ::CORBA::TypeCode_ptr const *,
                     TAO::TypeCode::Value_Field<char const *, ::CORBA::TypeCode_ptr const *> const *,
                     TAO::Null_RefCount_Policy>
  _tao_tc_DynValue_Test_avt (
    ::CORBA::tk_value,
    "IDL:DynValue_Test/avt:1.0",
    "avt",
    ::CORBA::VM_ABSTRACT,
    &::CORBA::_tc_null,
    _tao_fields_DynValue_Test_avt,
    0);
  

namespace DynValue_Test
{
  ::CORBA::TypeCode_ptr const _tc_avt =
    &_tao_tc_DynValue_Test_avt;
}

// TAO_IDL - Generated from
// be/be_visitor_valuetype/valuetype_cs.cpp:53

void
TAO::Value_Traits<DynValue_Test::avt>::add_ref (
    DynValue_Test::avt * p)
{
  ::CORBA::add_ref (p);
}

void
TAO::Value_Traits<DynValue_Test::avt>::remove_ref (
    DynValue_Test::avt * p)
{
  ::CORBA::remove_ref (p);
}

void
TAO::Value_Traits<DynValue_Test::avt>::release (
    DynValue_Test::avt * p)
{
  ::CORBA::remove_ref (p);
}

DynValue_Test::avt *
DynValue_Test::avt::_downcast ( ::CORBA::ValueBase *v)
{
  return dynamic_cast< ::DynValue_Test::avt * > (v);
}

const char *
DynValue_Test::avt::_tao_obv_repository_id (void) const
{
  return this->_tao_obv_static_repository_id ();
}

void
DynValue_Test::avt::_tao_obv_truncatable_repo_ids (Repository_Id_List& ids) const
{
  ids.push_back (this->_tao_obv_static_repository_id ());
}

void
DynValue_Test::avt::_tao_any_destructor (void *_tao_void_pointer)
{
  avt *_tao_tmp_pointer =
    static_cast<avt *> (_tao_void_pointer);
  ::CORBA::remove_ref (_tao_tmp_pointer);
}

// TAO extension - the virtual _type method.
::CORBA::TypeCode_ptr DynValue_Test::avt::_tao_type (void) const
{
  return ::DynValue_Test::_tc_avt;
}

DynValue_Test::avt::~avt (void)
{}

::CORBA::Boolean
DynValue_Test::avt::_tao_unmarshal (
    TAO_InputCDR &strm,
    avt *&new_object
  )
{
  ::CORBA::ValueBase *base = 0;
  ::CORBA::Boolean is_indirected = false;
  ::CORBA::Boolean is_null_object = false;
  ::CORBA::Boolean const retval =
    ::CORBA::ValueBase::_tao_unmarshal_pre (
        strm,
        base,
        avt::_tao_obv_static_repository_id (),
        is_null_object,
        is_indirected
      );
  
  ::CORBA::ValueBase_var owner (base);

  if (!retval)
    return false;
  
  if (is_null_object)
    return true;
  
  if (!is_indirected && !base->_tao_unmarshal_v (strm))
    return false;
  
  // Now base must point to the unmarshaled object.
  // Align the pointer to the right subobject.
  new_object = avt::_downcast (base);
  if (0 == new_object)
    return false;
  
  if (is_indirected)
    new_object->_add_ref ();
  
  owner._retn ();
  return true;
}

// TAO_IDL - Generated from
// be/be_visitor_typecode/value_typecode.cpp:65

static TAO::TypeCode::Value_Field<char const *, ::CORBA::TypeCode_ptr const *> const _tao_fields_DynValue_Test_BaseValue[] =
  {
    { "Base_us1", &CORBA::_tc_ushort, ::CORBA::PUBLIC_MEMBER },
    { "Base_us2", &CORBA::_tc_ushort, ::CORBA::PUBLIC_MEMBER }
    
  };
static TAO::TypeCode::Value<char const *,
                     ::CORBA::TypeCode_ptr const *,
                     TAO::TypeCode::Value_Field<char const *, ::CORBA::TypeCode_ptr const *> const *,
                     TAO::Null_RefCount_Policy>
  _tao_tc_DynValue_Test_BaseValue (
    ::CORBA::tk_value,
    "IDL:DynValue_Test/BaseValue:1.0",
    "BaseValue",
    ::CORBA::VM_NONE,
    &::CORBA::_tc_null,
    _tao_fields_DynValue_Test_BaseValue,
    2);
  

namespace DynValue_Test
{
  ::CORBA::TypeCode_ptr const _tc_BaseValue =
    &_tao_tc_DynValue_Test_BaseValue;
}

// TAO_IDL - Generated from
// be/be_visitor_valuetype/valuetype_cs.cpp:53

void
TAO::Value_Traits<DynValue_Test::BaseValue>::add_ref (
    DynValue_Test::BaseValue * p)
{
  ::CORBA::add_ref (p);
}

void
TAO::Value_Traits<DynValue_Test::BaseValue>::remove_ref (
    DynValue_Test::BaseValue * p)
{
  ::CORBA::remove_ref (p);
}

void
TAO::Value_Traits<DynValue_Test::BaseValue>::release (
    DynValue_Test::BaseValue * p)
{
  ::CORBA::remove_ref (p);
}

DynValue_Test::BaseValue *
DynValue_Test::BaseValue::_downcast ( ::CORBA::ValueBase *v)
{
  return dynamic_cast< ::DynValue_Test::BaseValue * > (v);
}

const char *
DynValue_Test::BaseValue::_tao_obv_repository_id (void) const
{
  return this->_tao_obv_static_repository_id ();
}

void
DynValue_Test::BaseValue::_tao_obv_truncatable_repo_ids (Repository_Id_List& ids) const
{
  ids.push_back (this->_tao_obv_static_repository_id ());
}

void
DynValue_Test::BaseValue::_tao_any_destructor (void *_tao_void_pointer)
{
  BaseValue *_tao_tmp_pointer =
    static_cast<BaseValue *> (_tao_void_pointer);
  ::CORBA::remove_ref (_tao_tmp_pointer);
}

// TAO extension - the virtual _type method.
::CORBA::TypeCode_ptr DynValue_Test::BaseValue::_tao_type (void) const
{
  return ::DynValue_Test::_tc_BaseValue;
}

DynValue_Test::BaseValue::~BaseValue (void)
{}

::CORBA::Boolean
DynValue_Test::BaseValue::_tao_marshal_v (TAO_OutputCDR & strm) const
{
  TAO_ChunkInfo ci (this->is_truncatable_ || this->chunking_);
  return this->_tao_marshal__DynValue_Test_BaseValue (strm, ci);
}

::CORBA::Boolean
DynValue_Test::BaseValue::_tao_unmarshal_v (TAO_InputCDR & strm)
{
  TAO_ChunkInfo ci (this->is_truncatable_ || this->chunking_, 1);
  return this->_tao_unmarshal__DynValue_Test_BaseValue (strm,ci);
}

::CORBA::Boolean
DynValue_Test::BaseValue::_tao_match_formal_type (ptrdiff_t formal_type_id) const
{
  return formal_type_id == reinterpret_cast<ptrdiff_t> (DynValue_Test::BaseValue::_downcast);
}

::CORBA::Boolean
DynValue_Test::BaseValue::_tao_unmarshal (
    TAO_InputCDR &strm,
    BaseValue *&new_object
  )
{
  ::CORBA::ValueBase *base = 0;
  ::CORBA::Boolean is_indirected = false;
  ::CORBA::Boolean is_null_object = false;
  ::CORBA::Boolean const retval =
    ::CORBA::ValueBase::_tao_unmarshal_pre (
        strm,
        base,
        BaseValue::_tao_obv_static_repository_id (),
        is_null_object,
        is_indirected
      );
  
  ::CORBA::ValueBase_var owner (base);

  if (!retval)
    return false;
  
  if (is_null_object)
    return true;
  
  if (!is_indirected && !base->_tao_unmarshal_v (strm))
    return false;
  
  // Now base must point to the unmarshaled object.
  // Align the pointer to the right subobject.
  new_object = BaseValue::_downcast (base);
  if (0 == new_object)
    return false;
  
  if (is_indirected)
    new_object->_add_ref ();
  
  owner._retn ();
  return true;
}

// TAO_IDL - Generated from
// be/be_visitor_typecode/alias_typecode.cpp:49

static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_DynValue_Test_BoxedLong (
    ::CORBA::tk_value_box,
    "IDL:DynValue_Test/BoxedLong:1.0",
    "BoxedLong",
    &CORBA::_tc_long);
  

namespace DynValue_Test
{
  ::CORBA::TypeCode_ptr const _tc_BoxedLong =
    &_tao_tc_DynValue_Test_BoxedLong;
}

// TAO_IDL - Generated from
// be/be_visitor_valuebox/valuebox_cs.cpp:52

void
TAO::Value_Traits<DynValue_Test::BoxedLong>::add_ref (
    DynValue_Test::BoxedLong * p
  )
{
  ::CORBA::add_ref (p);
}

void
TAO::Value_Traits<DynValue_Test::BoxedLong>::remove_ref (
    DynValue_Test::BoxedLong * p
  )
{
  ::CORBA::remove_ref (p);
}

void
TAO::Value_Traits<DynValue_Test::BoxedLong>::release (
    DynValue_Test::BoxedLong * p
  )
{
  ::CORBA::remove_ref (p);
}

DynValue_Test::BoxedLong *
DynValue_Test::BoxedLong::_downcast ( ::CORBA::ValueBase *v)
{
  return dynamic_cast< ::DynValue_Test::BoxedLong * > (v);
}

::CORBA::ValueBase *
DynValue_Test::BoxedLong::_copy_value (void)
{
  ::CORBA::ValueBase *result = 0;
  ACE_NEW_RETURN (
    result,
    BoxedLong (*this),
    0);
    
  return result;
}

const char *
DynValue_Test::BoxedLong::_tao_obv_repository_id (void) const
{
  return this->_tao_obv_static_repository_id ();
}

void
DynValue_Test::BoxedLong::_tao_obv_truncatable_repo_ids (Repository_Id_List& ids) const
{
  ids.push_back (this->_tao_obv_static_repository_id ());
}

::CORBA::Boolean
DynValue_Test::BoxedLong::_tao_match_formal_type (ptrdiff_t ) const
{
  return true;
}

void
DynValue_Test::BoxedLong::_tao_any_destructor (void *_tao_void_pointer)
{
  BoxedLong *_tao_tmp_pointer =
    static_cast<BoxedLong *> (_tao_void_pointer);
  ::CORBA::remove_ref (_tao_tmp_pointer);
}

// TAO extension - the virtual _type method.
::CORBA::TypeCode_ptr DynValue_Test::BoxedLong::_tao_type (void) const
{
  return ::DynValue_Test::_tc_BoxedLong;
}

::CORBA::Boolean
DynValue_Test::BoxedLong::_tao_unmarshal (
    TAO_InputCDR &strm,
    BoxedLong *&vb_object
  )
{
  ::CORBA::Boolean is_null_object = false;
  ::CORBA::Boolean is_indirected = false;
  TAO_InputCDR indrected_strm ((size_t) 0);
  if ( ::CORBA::ValueBase::_tao_validate_box_type (
        strm, indrected_strm,
        BoxedLong::_tao_obv_static_repository_id (),
        is_null_object, is_indirected
      ) == false)
    {
      return false;
    }
  
  vb_object = 0;
  if (is_null_object)
    {
      return true;
    }
  
  if (is_indirected)
    {
      return DynValue_Test::BoxedLong::_tao_unmarshal (
             indrected_strm, vb_object);
    }
  
  ACE_NEW_RETURN (
    vb_object,
    BoxedLong,
    false);
  
  return (strm >> vb_object->_pd_value);
}

::CORBA::Boolean
DynValue_Test::BoxedLong::_tao_unmarshal_v (TAO_InputCDR &)
{
  return true;
}



// TAO_IDL - Generated from
// be/be_visitor_valuebox/valuebox_cs.cpp:745

DynValue_Test::BoxedLong::~BoxedLong (void)
{
}

::CORBA::Boolean
DynValue_Test::BoxedLong::_tao_marshal_v (TAO_OutputCDR & strm) const
{
  return (strm << this->_pd_value);
}



// TAO_IDL - Generated from
// be/be_visitor_typecode/value_typecode.cpp:65

static TAO::TypeCode::Value_Field<char const *, ::CORBA::TypeCode_ptr const *> const _tao_fields_DynValue_Test_NestedValue[] =
  {
    { "Nested_s1", &CORBA::_tc_short, ::CORBA::PUBLIC_MEMBER },
    { "Nested_s2", &CORBA::_tc_short, ::CORBA::PUBLIC_MEMBER }
    
  };
static TAO::TypeCode::Value<char const *,
                     ::CORBA::TypeCode_ptr const *,
                     TAO::TypeCode::Value_Field<char const *, ::CORBA::TypeCode_ptr const *> const *,
                     TAO::Null_RefCount_Policy>
  _tao_tc_DynValue_Test_NestedValue (
    ::CORBA::tk_value,
    "IDL:DynValue_Test/NestedValue:1.0",
    "NestedValue",
    ::CORBA::VM_NONE,
    &::CORBA::_tc_null,
    _tao_fields_DynValue_Test_NestedValue,
    2);
  

namespace DynValue_Test
{
  ::CORBA::TypeCode_ptr const _tc_NestedValue =
    &_tao_tc_DynValue_Test_NestedValue;
}

// TAO_IDL - Generated from
// be/be_visitor_valuetype/valuetype_cs.cpp:53

void
TAO::Value_Traits<DynValue_Test::NestedValue>::add_ref (
    DynValue_Test::NestedValue * p)
{
  ::CORBA::add_ref (p);
}

void
TAO::Value_Traits<DynValue_Test::NestedValue>::remove_ref (
    DynValue_Test::NestedValue * p)
{
  ::CORBA::remove_ref (p);
}

void
TAO::Value_Traits<DynValue_Test::NestedValue>::release (
    DynValue_Test::NestedValue * p)
{
  ::CORBA::remove_ref (p);
}

DynValue_Test::NestedValue *
DynValue_Test::NestedValue::_downcast ( ::CORBA::ValueBase *v)
{
  return dynamic_cast< ::DynValue_Test::NestedValue * > (v);
}

const char *
DynValue_Test::NestedValue::_tao_obv_repository_id (void) const
{
  return this->_tao_obv_static_repository_id ();
}

void
DynValue_Test::NestedValue::_tao_obv_truncatable_repo_ids (Repository_Id_List& ids) const
{
  ids.push_back (this->_tao_obv_static_repository_id ());
}

void
DynValue_Test::NestedValue::_tao_any_destructor (void *_tao_void_pointer)
{
  NestedValue *_tao_tmp_pointer =
    static_cast<NestedValue *> (_tao_void_pointer);
  ::CORBA::remove_ref (_tao_tmp_pointer);
}

// TAO extension - the virtual _type method.
::CORBA::TypeCode_ptr DynValue_Test::NestedValue::_tao_type (void) const
{
  return ::DynValue_Test::_tc_NestedValue;
}

DynValue_Test::NestedValue::~NestedValue (void)
{}

::CORBA::Boolean
DynValue_Test::NestedValue::_tao_marshal_v (TAO_OutputCDR & strm) const
{
  TAO_ChunkInfo ci (this->is_truncatable_ || this->chunking_);
  return this->_tao_marshal__DynValue_Test_NestedValue (strm, ci);
}

::CORBA::Boolean
DynValue_Test::NestedValue::_tao_unmarshal_v (TAO_InputCDR & strm)
{
  TAO_ChunkInfo ci (this->is_truncatable_ || this->chunking_, 1);
  return this->_tao_unmarshal__DynValue_Test_NestedValue (strm,ci);
}

::CORBA::Boolean
DynValue_Test::NestedValue::_tao_match_formal_type (ptrdiff_t formal_type_id) const
{
  return formal_type_id == reinterpret_cast<ptrdiff_t> (DynValue_Test::NestedValue::_downcast);
}

::CORBA::Boolean
DynValue_Test::NestedValue::_tao_unmarshal (
    TAO_InputCDR &strm,
    NestedValue *&new_object
  )
{
  ::CORBA::ValueBase *base = 0;
  ::CORBA::Boolean is_indirected = false;
  ::CORBA::Boolean is_null_object = false;
  ::CORBA::Boolean const retval =
    ::CORBA::ValueBase::_tao_unmarshal_pre (
        strm,
        base,
        NestedValue::_tao_obv_static_repository_id (),
        is_null_object,
        is_indirected
      );
  
  ::CORBA::ValueBase_var owner (base);

  if (!retval)
    return false;
  
  if (is_null_object)
    return true;
  
  if (!is_indirected && !base->_tao_unmarshal_v (strm))
    return false;
  
  // Now base must point to the unmarshaled object.
  // Align the pointer to the right subobject.
  new_object = NestedValue::_downcast (base);
  if (0 == new_object)
    return false;
  
  if (is_indirected)
    new_object->_add_ref ();
  
  owner._retn ();
  return true;
}

// TAO_IDL - Generated from
// be/be_visitor_valuetype/valuetype_init_cs.cpp:73

DynValue_Test::NestedValue_init::NestedValue_init (void)
{
}

DynValue_Test::NestedValue_init::~NestedValue_init (void)
{
}

DynValue_Test::NestedValue_init *
DynValue_Test::NestedValue_init::_downcast ( ::CORBA::ValueFactoryBase *v)
{
  return dynamic_cast< ::DynValue_Test::NestedValue_init * > (v);
}

const char*
DynValue_Test::NestedValue_init::tao_repository_id (void)
{
  return ::DynValue_Test::NestedValue::_tao_obv_static_repository_id ();
}

::CORBA::ValueBase *
DynValue_Test::NestedValue_init::create_for_unmarshal (void)
{
  ::CORBA::ValueBase *ret_val = 0;
  ACE_NEW_THROW_EX (
      ret_val,
      OBV_DynValue_Test::NestedValue,
      ::CORBA::NO_MEMORY ()
    );
  return ret_val;
}

// TAO_IDL - Generated from
// be/be_visitor_typecode/value_typecode.cpp:65

static TAO::TypeCode::Value_Field<char const *, ::CORBA::TypeCode_ptr const *> const * const _tao_fields_DynValue_Test_NullValue = 0;
static TAO::TypeCode::Value<char const *,
                     ::CORBA::TypeCode_ptr const *,
                     TAO::TypeCode::Value_Field<char const *, ::CORBA::TypeCode_ptr const *> const *,
                     TAO::Null_RefCount_Policy>
  _tao_tc_DynValue_Test_NullValue (
    ::CORBA::tk_value,
    "IDL:DynValue_Test/NullValue:1.0",
    "NullValue",
    ::CORBA::VM_NONE,
    &::CORBA::_tc_null,
    _tao_fields_DynValue_Test_NullValue,
    0);
  

namespace DynValue_Test
{
  ::CORBA::TypeCode_ptr const _tc_NullValue =
    &_tao_tc_DynValue_Test_NullValue;
}

// TAO_IDL - Generated from
// be/be_visitor_valuetype/valuetype_cs.cpp:53

void
TAO::Value_Traits<DynValue_Test::NullValue>::add_ref (
    DynValue_Test::NullValue * p)
{
  ::CORBA::add_ref (p);
}

void
TAO::Value_Traits<DynValue_Test::NullValue>::remove_ref (
    DynValue_Test::NullValue * p)
{
  ::CORBA::remove_ref (p);
}

void
TAO::Value_Traits<DynValue_Test::NullValue>::release (
    DynValue_Test::NullValue * p)
{
  ::CORBA::remove_ref (p);
}

DynValue_Test::NullValue *
DynValue_Test::NullValue::_downcast ( ::CORBA::ValueBase *v)
{
  return dynamic_cast< ::DynValue_Test::NullValue * > (v);
}

const char *
DynValue_Test::NullValue::_tao_obv_repository_id (void) const
{
  return this->_tao_obv_static_repository_id ();
}

void
DynValue_Test::NullValue::_tao_obv_truncatable_repo_ids (Repository_Id_List& ids) const
{
  ids.push_back (this->_tao_obv_static_repository_id ());
}

void
DynValue_Test::NullValue::_tao_any_destructor (void *_tao_void_pointer)
{
  NullValue *_tao_tmp_pointer =
    static_cast<NullValue *> (_tao_void_pointer);
  ::CORBA::remove_ref (_tao_tmp_pointer);
}

// TAO extension - the virtual _type method.
::CORBA::TypeCode_ptr DynValue_Test::NullValue::_tao_type (void) const
{
  return ::DynValue_Test::_tc_NullValue;
}

DynValue_Test::NullValue::~NullValue (void)
{}

::CORBA::Boolean
DynValue_Test::NullValue::_tao_marshal_v (TAO_OutputCDR & strm) const
{
  TAO_ChunkInfo ci (this->is_truncatable_ || this->chunking_);
  return this->_tao_marshal__DynValue_Test_NullValue (strm, ci);
}

::CORBA::Boolean
DynValue_Test::NullValue::_tao_unmarshal_v (TAO_InputCDR & strm)
{
  TAO_ChunkInfo ci (this->is_truncatable_ || this->chunking_, 1);
  return this->_tao_unmarshal__DynValue_Test_NullValue (strm,ci);
}

::CORBA::Boolean
DynValue_Test::NullValue::_tao_match_formal_type (ptrdiff_t formal_type_id) const
{
  return formal_type_id == reinterpret_cast<ptrdiff_t> (DynValue_Test::NullValue::_downcast);
}

::CORBA::Boolean
DynValue_Test::NullValue::_tao_unmarshal (
    TAO_InputCDR &strm,
    NullValue *&new_object
  )
{
  ::CORBA::ValueBase *base = 0;
  ::CORBA::Boolean is_indirected = false;
  ::CORBA::Boolean is_null_object = false;
  ::CORBA::Boolean const retval =
    ::CORBA::ValueBase::_tao_unmarshal_pre (
        strm,
        base,
        NullValue::_tao_obv_static_repository_id (),
        is_null_object,
        is_indirected
      );
  
  ::CORBA::ValueBase_var owner (base);

  if (!retval)
    return false;
  
  if (is_null_object)
    return true;
  
  if (!is_indirected && !base->_tao_unmarshal_v (strm))
    return false;
  
  // Now base must point to the unmarshaled object.
  // Align the pointer to the right subobject.
  new_object = NullValue::_downcast (base);
  if (0 == new_object)
    return false;
  
  if (is_indirected)
    new_object->_add_ref ();
  
  owner._retn ();
  return true;
}

// TAO_IDL - Generated from
// be/be_visitor_valuetype/valuetype_init_cs.cpp:73

DynValue_Test::NullValue_init::NullValue_init (void)
{
}

DynValue_Test::NullValue_init::~NullValue_init (void)
{
}

DynValue_Test::NullValue_init *
DynValue_Test::NullValue_init::_downcast ( ::CORBA::ValueFactoryBase *v)
{
  return dynamic_cast< ::DynValue_Test::NullValue_init * > (v);
}

const char*
DynValue_Test::NullValue_init::tao_repository_id (void)
{
  return ::DynValue_Test::NullValue::_tao_obv_static_repository_id ();
}

::CORBA::ValueBase *
DynValue_Test::NullValue_init::create_for_unmarshal (void)
{
  ::CORBA::ValueBase *ret_val = 0;
  ACE_NEW_THROW_EX (
      ret_val,
      OBV_DynValue_Test::NullValue,
      ::CORBA::NO_MEMORY ()
    );
  return ret_val;
}

// TAO_IDL - Generated from
// be/be_visitor_typecode/value_typecode.cpp:65

static TAO::TypeCode::Value_Field<char const *, ::CORBA::TypeCode_ptr const *> const _tao_fields_DynValue_Test_Trunc[] =
  {
    { "Trunc_bl", &DynValue_Test::_tc_BoxedLong, ::CORBA::PUBLIC_MEMBER },
    { "Trunc_nested", &DynValue_Test::_tc_NestedValue, ::CORBA::PUBLIC_MEMBER },
    { "Trunc_null1", &DynValue_Test::_tc_NullValue, ::CORBA::PRIVATE_MEMBER },
    { "Trunc_null2", &DynValue_Test::_tc_NullValue, ::CORBA::PRIVATE_MEMBER },
    { "Trunc_null3", &DynValue_Test::_tc_NullValue, ::CORBA::PRIVATE_MEMBER }
    
  };
static TAO::TypeCode::Value<char const *,
                     ::CORBA::TypeCode_ptr const *,
                     TAO::TypeCode::Value_Field<char const *, ::CORBA::TypeCode_ptr const *> const *,
                     TAO::Null_RefCount_Policy>
  _tao_tc_DynValue_Test_Trunc (
    ::CORBA::tk_value,
    "IDL:DynValue_Test/Trunc:1.0",
    "Trunc",
    ::CORBA::VM_TRUNCATABLE,
    &DynValue_Test::_tc_BaseValue,
    _tao_fields_DynValue_Test_Trunc,
    5);
  

namespace DynValue_Test
{
  ::CORBA::TypeCode_ptr const _tc_Trunc =
    &_tao_tc_DynValue_Test_Trunc;
}

// TAO_IDL - Generated from
// be/be_visitor_valuetype/valuetype_cs.cpp:53

void
TAO::Value_Traits<DynValue_Test::Trunc>::add_ref (
    DynValue_Test::Trunc * p)
{
  ::CORBA::add_ref (p);
}

void
TAO::Value_Traits<DynValue_Test::Trunc>::remove_ref (
    DynValue_Test::Trunc * p)
{
  ::CORBA::remove_ref (p);
}

void
TAO::Value_Traits<DynValue_Test::Trunc>::release (
    DynValue_Test::Trunc * p)
{
  ::CORBA::remove_ref (p);
}

DynValue_Test::Trunc *
DynValue_Test::Trunc::_downcast ( ::CORBA::ValueBase *v)
{
  return dynamic_cast< ::DynValue_Test::Trunc * > (v);
}

const char *
DynValue_Test::Trunc::_tao_obv_repository_id (void) const
{
  return this->_tao_obv_static_repository_id ();
}

void
DynValue_Test::Trunc::_tao_obv_truncatable_repo_ids (Repository_Id_List& ids) const
{
  ids.push_back (this->_tao_obv_static_repository_id ());
  DynValue_Test::BaseValue::_tao_obv_truncatable_repo_ids (ids);
}

void
DynValue_Test::Trunc::_tao_any_destructor (void *_tao_void_pointer)
{
  Trunc *_tao_tmp_pointer =
    static_cast<Trunc *> (_tao_void_pointer);
  ::CORBA::remove_ref (_tao_tmp_pointer);
}

// TAO extension - the virtual _type method.
::CORBA::TypeCode_ptr DynValue_Test::Trunc::_tao_type (void) const
{
  return ::DynValue_Test::_tc_Trunc;
}

DynValue_Test::Trunc::~Trunc (void)
{}

::CORBA::Boolean
DynValue_Test::Trunc::_tao_marshal_v (TAO_OutputCDR & strm) const
{
  TAO_ChunkInfo ci (this->is_truncatable_ || this->chunking_);
  return this->_tao_marshal__DynValue_Test_Trunc (strm, ci);
}

::CORBA::Boolean
DynValue_Test::Trunc::_tao_unmarshal_v (TAO_InputCDR & strm)
{
  TAO_ChunkInfo ci (this->is_truncatable_ || this->chunking_, 1);
  return this->_tao_unmarshal__DynValue_Test_Trunc (strm,ci);
}

::CORBA::Boolean
DynValue_Test::Trunc::_tao_match_formal_type (ptrdiff_t formal_type_id) const
{
  return formal_type_id == reinterpret_cast<ptrdiff_t> (DynValue_Test::Trunc::_downcast);
}

::CORBA::Boolean
DynValue_Test::Trunc::_tao_unmarshal (
    TAO_InputCDR &strm,
    Trunc *&new_object
  )
{
  ::CORBA::ValueBase *base = 0;
  ::CORBA::Boolean is_indirected = false;
  ::CORBA::Boolean is_null_object = false;
  ::CORBA::Boolean const retval =
    ::CORBA::ValueBase::_tao_unmarshal_pre (
        strm,
        base,
        Trunc::_tao_obv_static_repository_id (),
        is_null_object,
        is_indirected
      );
  
  ::CORBA::ValueBase_var owner (base);

  if (!retval)
    return false;
  
  if (is_null_object)
    return true;
  
  if (!is_indirected && !base->_tao_unmarshal_v (strm))
    return false;
  
  // Now base must point to the unmarshaled object.
  // Align the pointer to the right subobject.
  new_object = Trunc::_downcast (base);
  if (0 == new_object)
    return false;
  
  if (is_indirected)
    new_object->_add_ref ();
  
  owner._retn ();
  return true;
}

// TAO_IDL - Generated from
// be/be_visitor_valuetype/valuetype_obv_cs.cpp:44

OBV_DynValue_Test::BaseValue::BaseValue (void)
: require_truncation_ (false)
{}

OBV_DynValue_Test::BaseValue::BaseValue (
    ::CORBA::UShort _tao_init_Base_us1,
    ::CORBA::UShort _tao_init_Base_us2)
: require_truncation_ (false)
{
  Base_us1 (_tao_init_Base_us1);
  Base_us2 (_tao_init_Base_us2);
}

OBV_DynValue_Test::BaseValue::~BaseValue (void)
{}

::CORBA::Boolean
OBV_DynValue_Test::BaseValue::_tao_marshal__DynValue_Test_BaseValue (TAO_OutputCDR &strm, TAO_ChunkInfo& ci) const
{
  return _tao_marshal_state (strm, ci);
}

::CORBA::Boolean
OBV_DynValue_Test::BaseValue::_tao_unmarshal__DynValue_Test_BaseValue (TAO_InputCDR &strm, TAO_ChunkInfo& ci)
{
  return _tao_unmarshal_state (strm, ci);
}

// TAO_IDL - Generated from
// be/be_visitor_valuetype/field_cs.cpp:587

/// Accessor to set the member.
void
OBV_DynValue_Test::BaseValue::Base_us1 (const CORBA::UShort val)
{
  // Set the value.
  this->_pd_Base_us1 = val;
}

// Retrieve the member
::CORBA::UShort
OBV_DynValue_Test::BaseValue::Base_us1 (void) const
{
  return this->_pd_Base_us1;
}

// TAO_IDL - Generated from
// be/be_visitor_valuetype/field_cs.cpp:587

/// Accessor to set the member.
void
OBV_DynValue_Test::BaseValue::Base_us2 (const CORBA::UShort val)
{
  // Set the value.
  this->_pd_Base_us2 = val;
}

// Retrieve the member
::CORBA::UShort
OBV_DynValue_Test::BaseValue::Base_us2 (void) const
{
  return this->_pd_Base_us2;
}

// TAO_IDL - Generated from
// be/be_visitor_valuetype/valuetype_obv_cs.cpp:44

OBV_DynValue_Test::NestedValue::NestedValue (void)
: require_truncation_ (false)
{}

OBV_DynValue_Test::NestedValue::NestedValue (
    ::CORBA::Short _tao_init_Nested_s1,
    ::CORBA::Short _tao_init_Nested_s2)
: require_truncation_ (false)
{
  Nested_s1 (_tao_init_Nested_s1);
  Nested_s2 (_tao_init_Nested_s2);
}

OBV_DynValue_Test::NestedValue::~NestedValue (void)
{}

::CORBA::ValueBase *
OBV_DynValue_Test::NestedValue::_copy_value (void)
{
  ::CORBA::ValueBase *ret_val = 0;
  ACE_NEW_THROW_EX (
    ret_val,
    NestedValue (
      Nested_s1 (),
      Nested_s2 ()
    ),
    ::CORBA::NO_MEMORY ()
  );
  return ret_val;
}

::CORBA::Boolean
OBV_DynValue_Test::NestedValue::_tao_marshal__DynValue_Test_NestedValue (TAO_OutputCDR &strm, TAO_ChunkInfo& ci) const
{
  return _tao_marshal_state (strm, ci);
}

::CORBA::Boolean
OBV_DynValue_Test::NestedValue::_tao_unmarshal__DynValue_Test_NestedValue (TAO_InputCDR &strm, TAO_ChunkInfo& ci)
{
  return _tao_unmarshal_state (strm, ci);
}

// TAO_IDL - Generated from
// be/be_visitor_valuetype/field_cs.cpp:587

/// Accessor to set the member.
void
OBV_DynValue_Test::NestedValue::Nested_s1 (const CORBA::Short val)
{
  // Set the value.
  this->_pd_Nested_s1 = val;
}

// Retrieve the member
::CORBA::Short
OBV_DynValue_Test::NestedValue::Nested_s1 (void) const
{
  return this->_pd_Nested_s1;
}

// TAO_IDL - Generated from
// be/be_visitor_valuetype/field_cs.cpp:587

/// Accessor to set the member.
void
OBV_DynValue_Test::NestedValue::Nested_s2 (const CORBA::Short val)
{
  // Set the value.
  this->_pd_Nested_s2 = val;
}

// Retrieve the member
::CORBA::Short
OBV_DynValue_Test::NestedValue::Nested_s2 (void) const
{
  return this->_pd_Nested_s2;
}

// TAO_IDL - Generated from
// be/be_visitor_valuetype/valuetype_obv_cs.cpp:44

OBV_DynValue_Test::NullValue::NullValue (void)
: require_truncation_ (false)
{}

OBV_DynValue_Test::NullValue::~NullValue (void)
{}

::CORBA::ValueBase *
OBV_DynValue_Test::NullValue::_copy_value (void)
{
  ::CORBA::ValueBase *ret_val = 0;
  ACE_NEW_THROW_EX (
    ret_val,
    NullValue (),
    ::CORBA::NO_MEMORY ()
  );
  return ret_val;
}

::CORBA::Boolean
OBV_DynValue_Test::NullValue::_tao_marshal__DynValue_Test_NullValue (TAO_OutputCDR &strm, TAO_ChunkInfo& ci) const
{
  return _tao_marshal_state (strm, ci);
}

::CORBA::Boolean
OBV_DynValue_Test::NullValue::_tao_unmarshal__DynValue_Test_NullValue (TAO_InputCDR &strm, TAO_ChunkInfo& ci)
{
  return _tao_unmarshal_state (strm, ci);
}

// TAO_IDL - Generated from
// be/be_visitor_valuetype/valuetype_obv_cs.cpp:44

OBV_DynValue_Test::Trunc::Trunc (void)
: require_truncation_ (false)
{}

OBV_DynValue_Test::Trunc::Trunc (
    ::CORBA::UShort _tao_init_Base_us1,
    ::CORBA::UShort _tao_init_Base_us2,
    ::DynValue_Test::BoxedLong * _tao_init_Trunc_bl,
    ::DynValue_Test::NestedValue * _tao_init_Trunc_nested,
    ::DynValue_Test::NullValue * _tao_init_Trunc_null1,
    ::DynValue_Test::NullValue * _tao_init_Trunc_null2,
    ::DynValue_Test::NullValue * _tao_init_Trunc_null3)
: require_truncation_ (false)
{
  Base_us1 (_tao_init_Base_us1);
  Base_us2 (_tao_init_Base_us2);
  Trunc_bl (_tao_init_Trunc_bl);
  Trunc_nested (_tao_init_Trunc_nested);
  Trunc_null1 (_tao_init_Trunc_null1);
  Trunc_null2 (_tao_init_Trunc_null2);
  Trunc_null3 (_tao_init_Trunc_null3);
}

OBV_DynValue_Test::Trunc::~Trunc (void)
{}

::CORBA::Boolean
OBV_DynValue_Test::Trunc::_tao_marshal__DynValue_Test_Trunc (TAO_OutputCDR &strm, TAO_ChunkInfo& ci) const
{
  return _tao_marshal_state (strm, ci);
}

::CORBA::Boolean
OBV_DynValue_Test::Trunc::_tao_unmarshal__DynValue_Test_Trunc (TAO_InputCDR &strm, TAO_ChunkInfo& ci)
{
  return _tao_unmarshal_state (strm, ci);
}

// TAO_IDL - Generated from
// be/be_visitor_valuetype/field_cs.cpp:430

/// Accessor to set the member.
void
OBV_DynValue_Test::Trunc::Trunc_bl (DynValue_Test::BoxedLong* val)
{
  ::CORBA::add_ref (val);
  this->_pd_Trunc_bl = val;
}

/// Retrieve the member
DynValue_Test::BoxedLong *
OBV_DynValue_Test::Trunc::Trunc_bl () const
{
  return this->_pd_Trunc_bl.in ();
}

// TAO_IDL - Generated from
// be/be_visitor_valuetype/field_cs.cpp:430

/// Accessor to set the member.
void
OBV_DynValue_Test::Trunc::Trunc_nested (DynValue_Test::NestedValue* val)
{
  ::CORBA::add_ref (val);
  this->_pd_Trunc_nested = val;
}

/// Retrieve the member
DynValue_Test::NestedValue *
OBV_DynValue_Test::Trunc::Trunc_nested () const
{
  return this->_pd_Trunc_nested.in ();
}

// TAO_IDL - Generated from
// be/be_visitor_valuetype/field_cs.cpp:430

/// Accessor to set the member.
void
OBV_DynValue_Test::Trunc::Trunc_null1 (DynValue_Test::NullValue* val)
{
  ::CORBA::add_ref (val);
  this->_pd_Trunc_null1 = val;
}

/// Retrieve the member
DynValue_Test::NullValue *
OBV_DynValue_Test::Trunc::Trunc_null1 () const
{
  return this->_pd_Trunc_null1.in ();
}

// TAO_IDL - Generated from
// be/be_visitor_valuetype/field_cs.cpp:430

/// Accessor to set the member.
void
OBV_DynValue_Test::Trunc::Trunc_null2 (DynValue_Test::NullValue* val)
{
  ::CORBA::add_ref (val);
  this->_pd_Trunc_null2 = val;
}

/// Retrieve the member
DynValue_Test::NullValue *
OBV_DynValue_Test::Trunc::Trunc_null2 () const
{
  return this->_pd_Trunc_null2.in ();
}

// TAO_IDL - Generated from
// be/be_visitor_valuetype/field_cs.cpp:430

/// Accessor to set the member.
void
OBV_DynValue_Test::Trunc::Trunc_null3 (DynValue_Test::NullValue* val)
{
  ::CORBA::add_ref (val);
  this->_pd_Trunc_null3 = val;
}

/// Retrieve the member
DynValue_Test::NullValue *
OBV_DynValue_Test::Trunc::Trunc_null3 () const
{
  return this->_pd_Trunc_null3.in ();
}

// TAO_IDL - Generated from
// be/be_visitor_valuetype/any_op_cs.cpp:45
TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<DynValue_Test::avt>::to_value (
      ::CORBA::ValueBase *&_tao_elem
    ) const
  {
    ::CORBA::add_ref (this->value_);
    _tao_elem = this->value_;
    return true;
  }
}


TAO_END_VERSIONED_NAMESPACE_DECL



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace DynValue_Test
{
  // Copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      avt *_tao_elem
    )
  {
    #ifdef TAO_VALUETYPE_COPYING_ANY_INSERTION_USES_COPY_VALUE
      avt *_tao_copy =
        _tao_elem ?
          avt::_downcast (_tao_elem->_copy_value ())
          : 0;
      _tao_any <<= &_tao_copy;
    #else
      ::CORBA::add_ref (_tao_elem);
      _tao_any <<= &_tao_elem;
    #endif
  }

  // Non-copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      avt **_tao_elem
    )
  {
    TAO::Any_Impl_T<avt>::insert (
        _tao_any,
        avt::_tao_any_destructor,
        _tc_avt,
        *_tao_elem
      );
  }

  ::CORBA::Boolean
  operator>>= (
      const ::CORBA::Any &_tao_any,
      avt *&_tao_elem
    )
  {
    return
      TAO::Any_Impl_T<avt>::extract (
          _tao_any,
          avt::_tao_any_destructor,
          _tc_avt,
          _tao_elem
        );
  }

  
}

#else


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    DynValue_Test::avt *_tao_elem
  )
{
  #ifdef TAO_VALUETYPE_COPYING_ANY_INSERTION_USES_COPY_VALUE
    DynValue_Test::avt *_tao_copy =
      _tao_elem ?
        DynValue_Test::avt::_downcast (_tao_elem->_copy_value ())
        : 0;
    _tao_any <<= &_tao_copy;
  #else
    ::CORBA::add_ref (_tao_elem);
    _tao_any <<= &_tao_elem;
  #endif
}

// Non-copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    DynValue_Test::avt **_tao_elem
  )
{
  TAO::Any_Impl_T<DynValue_Test::avt>::insert (
      _tao_any,
      DynValue_Test::avt::_tao_any_destructor,
      DynValue_Test::_tc_avt,
      *_tao_elem
    );
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    DynValue_Test::avt *&_tao_elem
  )
{
  return
    TAO::Any_Impl_T<DynValue_Test::avt>::extract (
        _tao_any,
        DynValue_Test::avt::_tao_any_destructor,
        DynValue_Test::_tc_avt,
        _tao_elem
      );
}


TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_valuetype/any_op_cs.cpp:45
TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<DynValue_Test::BaseValue>::to_value (
      ::CORBA::ValueBase *&_tao_elem
    ) const
  {
    ::CORBA::add_ref (this->value_);
    _tao_elem = this->value_;
    return true;
  }
}


TAO_END_VERSIONED_NAMESPACE_DECL



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace DynValue_Test
{
  // Copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      BaseValue *_tao_elem
    )
  {
    #ifdef TAO_VALUETYPE_COPYING_ANY_INSERTION_USES_COPY_VALUE
      BaseValue *_tao_copy =
        _tao_elem ?
          BaseValue::_downcast (_tao_elem->_copy_value ())
          : 0;
      _tao_any <<= &_tao_copy;
    #else
      ::CORBA::add_ref (_tao_elem);
      _tao_any <<= &_tao_elem;
    #endif
  }

  // Non-copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      BaseValue **_tao_elem
    )
  {
    TAO::Any_Impl_T<BaseValue>::insert (
        _tao_any,
        BaseValue::_tao_any_destructor,
        _tc_BaseValue,
        *_tao_elem
      );
  }

  ::CORBA::Boolean
  operator>>= (
      const ::CORBA::Any &_tao_any,
      BaseValue *&_tao_elem
    )
  {
    return
      TAO::Any_Impl_T<BaseValue>::extract (
          _tao_any,
          BaseValue::_tao_any_destructor,
          _tc_BaseValue,
          _tao_elem
        );
  }

  
}

#else


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    DynValue_Test::BaseValue *_tao_elem
  )
{
  #ifdef TAO_VALUETYPE_COPYING_ANY_INSERTION_USES_COPY_VALUE
    DynValue_Test::BaseValue *_tao_copy =
      _tao_elem ?
        DynValue_Test::BaseValue::_downcast (_tao_elem->_copy_value ())
        : 0;
    _tao_any <<= &_tao_copy;
  #else
    ::CORBA::add_ref (_tao_elem);
    _tao_any <<= &_tao_elem;
  #endif
}

// Non-copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    DynValue_Test::BaseValue **_tao_elem
  )
{
  TAO::Any_Impl_T<DynValue_Test::BaseValue>::insert (
      _tao_any,
      DynValue_Test::BaseValue::_tao_any_destructor,
      DynValue_Test::_tc_BaseValue,
      *_tao_elem
    );
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    DynValue_Test::BaseValue *&_tao_elem
  )
{
  return
    TAO::Any_Impl_T<DynValue_Test::BaseValue>::extract (
        _tao_any,
        DynValue_Test::BaseValue::_tao_any_destructor,
        DynValue_Test::_tc_BaseValue,
        _tao_elem
      );
}


TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_valuebox/any_op_cs.cpp:46
TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<DynValue_Test::BoxedLong>::to_value (
      ::CORBA::ValueBase *&_tao_elem
    ) const
  {
    ::CORBA::add_ref (this->value_);
    _tao_elem = this->value_;
    return true;
  }
}


TAO_END_VERSIONED_NAMESPACE_DECL



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace DynValue_Test
{
  // Copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      BoxedLong *_tao_elem)
  {
    ::CORBA::add_ref (_tao_elem);
    _tao_any <<= &_tao_elem;
  }

  // Non-copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      BoxedLong **_tao_elem)
  {
    TAO::Any_Impl_T<BoxedLong>::insert (
        _tao_any,
        BoxedLong::_tao_any_destructor,
        _tc_BoxedLong,
        *_tao_elem);
  }

  ::CORBA::Boolean
  operator>>= (
      const ::CORBA::Any &_tao_any,
      BoxedLong *&_tao_elem
    )
  {
    return
      TAO::Any_Impl_T<BoxedLong>::extract (
          _tao_any,
          BoxedLong::_tao_any_destructor,
          _tc_BoxedLong,
          _tao_elem
        );
  }

  
}

#else


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    DynValue_Test::BoxedLong *_tao_elem
  )
{
  ::CORBA::add_ref (_tao_elem);
  _tao_any <<= &_tao_elem;
}

// Non-copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    DynValue_Test::BoxedLong **_tao_elem
  )
{
  TAO::Any_Impl_T<DynValue_Test::BoxedLong>::insert (
      _tao_any,
      DynValue_Test::BoxedLong::_tao_any_destructor,
      DynValue_Test::_tc_BoxedLong,
      *_tao_elem
    );
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    DynValue_Test::BoxedLong *&_tao_elem
  )
{
  return
    TAO::Any_Impl_T<DynValue_Test::BoxedLong>::extract (
        _tao_any,
        DynValue_Test::BoxedLong::_tao_any_destructor,
        DynValue_Test::_tc_BoxedLong,
        _tao_elem
      );
}


TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_valuetype/any_op_cs.cpp:45
TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<DynValue_Test::NestedValue>::to_value (
      ::CORBA::ValueBase *&_tao_elem
    ) const
  {
    ::CORBA::add_ref (this->value_);
    _tao_elem = this->value_;
    return true;
  }
}


TAO_END_VERSIONED_NAMESPACE_DECL



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace DynValue_Test
{
  // Copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      NestedValue *_tao_elem
    )
  {
    #ifdef TAO_VALUETYPE_COPYING_ANY_INSERTION_USES_COPY_VALUE
      NestedValue *_tao_copy =
        _tao_elem ?
          NestedValue::_downcast (_tao_elem->_copy_value ())
          : 0;
      _tao_any <<= &_tao_copy;
    #else
      ::CORBA::add_ref (_tao_elem);
      _tao_any <<= &_tao_elem;
    #endif
  }

  // Non-copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      NestedValue **_tao_elem
    )
  {
    TAO::Any_Impl_T<NestedValue>::insert (
        _tao_any,
        NestedValue::_tao_any_destructor,
        _tc_NestedValue,
        *_tao_elem
      );
  }

  ::CORBA::Boolean
  operator>>= (
      const ::CORBA::Any &_tao_any,
      NestedValue *&_tao_elem
    )
  {
    return
      TAO::Any_Impl_T<NestedValue>::extract (
          _tao_any,
          NestedValue::_tao_any_destructor,
          _tc_NestedValue,
          _tao_elem
        );
  }

  
}

#else


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    DynValue_Test::NestedValue *_tao_elem
  )
{
  #ifdef TAO_VALUETYPE_COPYING_ANY_INSERTION_USES_COPY_VALUE
    DynValue_Test::NestedValue *_tao_copy =
      _tao_elem ?
        DynValue_Test::NestedValue::_downcast (_tao_elem->_copy_value ())
        : 0;
    _tao_any <<= &_tao_copy;
  #else
    ::CORBA::add_ref (_tao_elem);
    _tao_any <<= &_tao_elem;
  #endif
}

// Non-copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    DynValue_Test::NestedValue **_tao_elem
  )
{
  TAO::Any_Impl_T<DynValue_Test::NestedValue>::insert (
      _tao_any,
      DynValue_Test::NestedValue::_tao_any_destructor,
      DynValue_Test::_tc_NestedValue,
      *_tao_elem
    );
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    DynValue_Test::NestedValue *&_tao_elem
  )
{
  return
    TAO::Any_Impl_T<DynValue_Test::NestedValue>::extract (
        _tao_any,
        DynValue_Test::NestedValue::_tao_any_destructor,
        DynValue_Test::_tc_NestedValue,
        _tao_elem
      );
}


TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_valuetype/any_op_cs.cpp:45
TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<DynValue_Test::NullValue>::to_value (
      ::CORBA::ValueBase *&_tao_elem
    ) const
  {
    ::CORBA::add_ref (this->value_);
    _tao_elem = this->value_;
    return true;
  }
}


TAO_END_VERSIONED_NAMESPACE_DECL



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace DynValue_Test
{
  // Copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      NullValue *_tao_elem
    )
  {
    #ifdef TAO_VALUETYPE_COPYING_ANY_INSERTION_USES_COPY_VALUE
      NullValue *_tao_copy =
        _tao_elem ?
          NullValue::_downcast (_tao_elem->_copy_value ())
          : 0;
      _tao_any <<= &_tao_copy;
    #else
      ::CORBA::add_ref (_tao_elem);
      _tao_any <<= &_tao_elem;
    #endif
  }

  // Non-copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      NullValue **_tao_elem
    )
  {
    TAO::Any_Impl_T<NullValue>::insert (
        _tao_any,
        NullValue::_tao_any_destructor,
        _tc_NullValue,
        *_tao_elem
      );
  }

  ::CORBA::Boolean
  operator>>= (
      const ::CORBA::Any &_tao_any,
      NullValue *&_tao_elem
    )
  {
    return
      TAO::Any_Impl_T<NullValue>::extract (
          _tao_any,
          NullValue::_tao_any_destructor,
          _tc_NullValue,
          _tao_elem
        );
  }

  
}

#else


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    DynValue_Test::NullValue *_tao_elem
  )
{
  #ifdef TAO_VALUETYPE_COPYING_ANY_INSERTION_USES_COPY_VALUE
    DynValue_Test::NullValue *_tao_copy =
      _tao_elem ?
        DynValue_Test::NullValue::_downcast (_tao_elem->_copy_value ())
        : 0;
    _tao_any <<= &_tao_copy;
  #else
    ::CORBA::add_ref (_tao_elem);
    _tao_any <<= &_tao_elem;
  #endif
}

// Non-copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    DynValue_Test::NullValue **_tao_elem
  )
{
  TAO::Any_Impl_T<DynValue_Test::NullValue>::insert (
      _tao_any,
      DynValue_Test::NullValue::_tao_any_destructor,
      DynValue_Test::_tc_NullValue,
      *_tao_elem
    );
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    DynValue_Test::NullValue *&_tao_elem
  )
{
  return
    TAO::Any_Impl_T<DynValue_Test::NullValue>::extract (
        _tao_any,
        DynValue_Test::NullValue::_tao_any_destructor,
        DynValue_Test::_tc_NullValue,
        _tao_elem
      );
}


TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_valuetype/any_op_cs.cpp:45
TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<DynValue_Test::Trunc>::to_value (
      ::CORBA::ValueBase *&_tao_elem
    ) const
  {
    ::CORBA::add_ref (this->value_);
    _tao_elem = this->value_;
    return true;
  }
}


TAO_END_VERSIONED_NAMESPACE_DECL



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace DynValue_Test
{
  // Copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      Trunc *_tao_elem
    )
  {
    #ifdef TAO_VALUETYPE_COPYING_ANY_INSERTION_USES_COPY_VALUE
      Trunc *_tao_copy =
        _tao_elem ?
          Trunc::_downcast (_tao_elem->_copy_value ())
          : 0;
      _tao_any <<= &_tao_copy;
    #else
      ::CORBA::add_ref (_tao_elem);
      _tao_any <<= &_tao_elem;
    #endif
  }

  // Non-copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      Trunc **_tao_elem
    )
  {
    TAO::Any_Impl_T<Trunc>::insert (
        _tao_any,
        Trunc::_tao_any_destructor,
        _tc_Trunc,
        *_tao_elem
      );
  }

  ::CORBA::Boolean
  operator>>= (
      const ::CORBA::Any &_tao_any,
      Trunc *&_tao_elem
    )
  {
    return
      TAO::Any_Impl_T<Trunc>::extract (
          _tao_any,
          Trunc::_tao_any_destructor,
          _tc_Trunc,
          _tao_elem
        );
  }

  
}

#else


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    DynValue_Test::Trunc *_tao_elem
  )
{
  #ifdef TAO_VALUETYPE_COPYING_ANY_INSERTION_USES_COPY_VALUE
    DynValue_Test::Trunc *_tao_copy =
      _tao_elem ?
        DynValue_Test::Trunc::_downcast (_tao_elem->_copy_value ())
        : 0;
    _tao_any <<= &_tao_copy;
  #else
    ::CORBA::add_ref (_tao_elem);
    _tao_any <<= &_tao_elem;
  #endif
}

// Non-copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    DynValue_Test::Trunc **_tao_elem
  )
{
  TAO::Any_Impl_T<DynValue_Test::Trunc>::insert (
      _tao_any,
      DynValue_Test::Trunc::_tao_any_destructor,
      DynValue_Test::_tc_Trunc,
      *_tao_elem
    );
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    DynValue_Test::Trunc *&_tao_elem
  )
{
  return
    TAO::Any_Impl_T<DynValue_Test::Trunc>::extract (
        _tao_any,
        DynValue_Test::Trunc::_tao_any_destructor,
        DynValue_Test::_tc_Trunc,
        _tao_elem
      );
}


TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_valuetype.cpp:512

void
CORBA::add_ref (DynValue_Test::avt * vt)
{
  if (vt != 0)
    {
      vt->_add_ref ();
    }
}

void
CORBA::remove_ref (DynValue_Test::avt * vt)
{
  if (vt != 0)
    {
      vt->_remove_ref ();
    }
}

// TAO_IDL - Generated from
// be/be_visitor_valuetype/cdr_op_cs.cpp:60


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean
operator<< (
    TAO_OutputCDR &strm,
    const DynValue_Test::avt *_tao_valuetype
  )
{
  return
    ::CORBA::ValueBase::_tao_marshal (
        strm,
        _tao_valuetype,
        reinterpret_cast<ptrdiff_t> (&DynValue_Test::avt::_downcast)
      );
}

::CORBA::Boolean
operator>> (
    TAO_InputCDR &strm,
    DynValue_Test::avt *&_tao_valuetype
  )
{
  return DynValue_Test::avt::_tao_unmarshal (strm, _tao_valuetype);
}


TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_valuetype.cpp:512

void
CORBA::add_ref (DynValue_Test::BaseValue * vt)
{
  if (vt != 0)
    {
      vt->_add_ref ();
    }
}

void
CORBA::remove_ref (DynValue_Test::BaseValue * vt)
{
  if (vt != 0)
    {
      vt->_remove_ref ();
    }
}

// TAO_IDL - Generated from
// be/be_visitor_valuetype/cdr_op_cs.cpp:60


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean
operator<< (
    TAO_OutputCDR &strm,
    const DynValue_Test::BaseValue *_tao_valuetype
  )
{
  return
    ::CORBA::ValueBase::_tao_marshal (
        strm,
        _tao_valuetype,
        reinterpret_cast<ptrdiff_t> (&DynValue_Test::BaseValue::_downcast)
      );
}

::CORBA::Boolean
operator>> (
    TAO_InputCDR &strm,
    DynValue_Test::BaseValue *&_tao_valuetype
  )
{
  return DynValue_Test::BaseValue::_tao_unmarshal (strm, _tao_valuetype);
}


TAO_END_VERSIONED_NAMESPACE_DECL

// TAO_IDL - Generated from
// be/be_visitor_valuetype/marshal_cs.cpp:33

::CORBA::Boolean
OBV_DynValue_Test::BaseValue::_tao_marshal_state (TAO_OutputCDR &strm, TAO_ChunkInfo&ci) const
{
  if (! ci.start_chunk (strm))
    return false;
  
  CORBA::Boolean const ret = 
      (strm << _pd_Base_us1) &&
      (strm << _pd_Base_us2);
  if ( ! ret) 
    return false; 
  
  if (! ci.end_chunk (strm))
    return false;
  
  return true;
}

::CORBA::Boolean
OBV_DynValue_Test::BaseValue::_tao_unmarshal_state (TAO_InputCDR &strm, TAO_ChunkInfo&ci)
{
  if (!ci.handle_chunking (strm))
    return false;
  
  CORBA::Boolean const ret = 
      (strm >> _pd_Base_us1) &&
      (strm >> _pd_Base_us2);
  if (!ret) 
    return false; 
  
  if (this->require_truncation_)
    return ci.skip_chunks (strm);
  
  else
    return ci.handle_chunking (strm);
  
  
}

void
OBV_DynValue_Test::BaseValue::truncation_hook (void)
{
  this->require_truncation_ = true;
}



// TAO_IDL - Generated from
// be/be_visitor_valuebox/cdr_op_cs.cpp:41


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean
operator<< (
    TAO_OutputCDR &strm,
    const DynValue_Test::BoxedLong *_tao_valuebox
  )
{
  return
    ::CORBA::ValueBase::_tao_marshal (
        strm,
        _tao_valuebox,
        reinterpret_cast<ptrdiff_t> (&DynValue_Test::BoxedLong::_downcast)
      );
}

::CORBA::Boolean
operator>> (
    TAO_InputCDR &strm,
    DynValue_Test::BoxedLong *&_tao_valuebox
  )
{
  return DynValue_Test::BoxedLong::_tao_unmarshal (strm, _tao_valuebox);
}


TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_valuetype.cpp:512

void
CORBA::add_ref (DynValue_Test::NestedValue * vt)
{
  if (vt != 0)
    {
      vt->_add_ref ();
    }
}

void
CORBA::remove_ref (DynValue_Test::NestedValue * vt)
{
  if (vt != 0)
    {
      vt->_remove_ref ();
    }
}

// TAO_IDL - Generated from
// be/be_visitor_valuetype/cdr_op_cs.cpp:60


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean
operator<< (
    TAO_OutputCDR &strm,
    const DynValue_Test::NestedValue *_tao_valuetype
  )
{
  return
    ::CORBA::ValueBase::_tao_marshal (
        strm,
        _tao_valuetype,
        reinterpret_cast<ptrdiff_t> (&DynValue_Test::NestedValue::_downcast)
      );
}

::CORBA::Boolean
operator>> (
    TAO_InputCDR &strm,
    DynValue_Test::NestedValue *&_tao_valuetype
  )
{
  return DynValue_Test::NestedValue::_tao_unmarshal (strm, _tao_valuetype);
}


TAO_END_VERSIONED_NAMESPACE_DECL

// TAO_IDL - Generated from
// be/be_visitor_valuetype/marshal_cs.cpp:33

::CORBA::Boolean
OBV_DynValue_Test::NestedValue::_tao_marshal_state (TAO_OutputCDR &strm, TAO_ChunkInfo&ci) const
{
  if (! ci.start_chunk (strm))
    return false;
  
  CORBA::Boolean const ret = 
      (strm << _pd_Nested_s1) &&
      (strm << _pd_Nested_s2);
  if ( ! ret) 
    return false; 
  
  if (! ci.end_chunk (strm))
    return false;
  
  return true;
}

::CORBA::Boolean
OBV_DynValue_Test::NestedValue::_tao_unmarshal_state (TAO_InputCDR &strm, TAO_ChunkInfo&ci)
{
  if (!ci.handle_chunking (strm))
    return false;
  
  CORBA::Boolean const ret = 
      (strm >> _pd_Nested_s1) &&
      (strm >> _pd_Nested_s2);
  if (!ret) 
    return false; 
  
  if (this->require_truncation_)
    return ci.skip_chunks (strm);
  
  else
    return ci.handle_chunking (strm);
  
  
}

void
OBV_DynValue_Test::NestedValue::truncation_hook (void)
{
  this->require_truncation_ = true;
}



// TAO_IDL - Generated from
// be/be_valuetype.cpp:512

void
CORBA::add_ref (DynValue_Test::NullValue * vt)
{
  if (vt != 0)
    {
      vt->_add_ref ();
    }
}

void
CORBA::remove_ref (DynValue_Test::NullValue * vt)
{
  if (vt != 0)
    {
      vt->_remove_ref ();
    }
}

// TAO_IDL - Generated from
// be/be_visitor_valuetype/cdr_op_cs.cpp:60


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean
operator<< (
    TAO_OutputCDR &strm,
    const DynValue_Test::NullValue *_tao_valuetype
  )
{
  return
    ::CORBA::ValueBase::_tao_marshal (
        strm,
        _tao_valuetype,
        reinterpret_cast<ptrdiff_t> (&DynValue_Test::NullValue::_downcast)
      );
}

::CORBA::Boolean
operator>> (
    TAO_InputCDR &strm,
    DynValue_Test::NullValue *&_tao_valuetype
  )
{
  return DynValue_Test::NullValue::_tao_unmarshal (strm, _tao_valuetype);
}


TAO_END_VERSIONED_NAMESPACE_DECL

// TAO_IDL - Generated from
// be/be_visitor_valuetype/marshal_cs.cpp:33

::CORBA::Boolean
OBV_DynValue_Test::NullValue::_tao_marshal_state (TAO_OutputCDR &, TAO_ChunkInfo&) const
{
  return true;
}

::CORBA::Boolean
OBV_DynValue_Test::NullValue::_tao_unmarshal_state (TAO_InputCDR &, TAO_ChunkInfo&)
{
  return true;
}

void
OBV_DynValue_Test::NullValue::truncation_hook (void)
{
  this->require_truncation_ = true;
}



// TAO_IDL - Generated from
// be/be_valuetype.cpp:512

void
CORBA::add_ref (DynValue_Test::Trunc * vt)
{
  if (vt != 0)
    {
      vt->_add_ref ();
    }
}

void
CORBA::remove_ref (DynValue_Test::Trunc * vt)
{
  if (vt != 0)
    {
      vt->_remove_ref ();
    }
}

// TAO_IDL - Generated from
// be/be_visitor_valuetype/cdr_op_cs.cpp:60


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean
operator<< (
    TAO_OutputCDR &strm,
    const DynValue_Test::Trunc *_tao_valuetype
  )
{
  return
    ::CORBA::ValueBase::_tao_marshal (
        strm,
        _tao_valuetype,
        reinterpret_cast<ptrdiff_t> (&DynValue_Test::Trunc::_downcast)
      );
}

::CORBA::Boolean
operator>> (
    TAO_InputCDR &strm,
    DynValue_Test::Trunc *&_tao_valuetype
  )
{
  return DynValue_Test::Trunc::_tao_unmarshal (strm, _tao_valuetype);
}


TAO_END_VERSIONED_NAMESPACE_DECL

// TAO_IDL - Generated from
// be/be_visitor_valuetype/marshal_cs.cpp:33

::CORBA::Boolean
OBV_DynValue_Test::Trunc::_tao_marshal_state (TAO_OutputCDR &strm, TAO_ChunkInfo&ci) const
{
  if (! ci.start_chunk (strm))
    return false;
  
  if (! this->_tao_marshal__DynValue_Test_BaseValue (strm, ci))
    {
      return false;
    }
  
  if (! ci.start_chunk (strm))
    return false;
  
  CORBA::Boolean const ret = 
      (strm << _pd_Trunc_bl.in ()) &&
      (strm << _pd_Trunc_nested.in ()) &&
      (strm << _pd_Trunc_null1.in ()) &&
      (strm << _pd_Trunc_null2.in ()) &&
      (strm << _pd_Trunc_null3.in ());
  if ( ! ret) 
    return false; 
  
  if (! ci.end_chunk (strm))
    return false;
  
  if (! ci.end_chunk (strm))
    return false;
  
  return true;
}

::CORBA::Boolean
OBV_DynValue_Test::Trunc::_tao_unmarshal_state (TAO_InputCDR &strm, TAO_ChunkInfo&ci)
{
  if (!ci.handle_chunking (strm))
    return false;
  
  if (!this->_tao_unmarshal__DynValue_Test_BaseValue (strm, ci))
    {
      return false;
    }
  
  if (!ci.handle_chunking (strm))
    return false;
  
  CORBA::Boolean const ret = 
      (strm >> _pd_Trunc_bl.out ()) &&
      (strm >> _pd_Trunc_nested.out ()) &&
      (strm >> _pd_Trunc_null1.out ()) &&
      (strm >> _pd_Trunc_null2.out ()) &&
      (strm >> _pd_Trunc_null3.out ());
  if (!ret) 
    return false; 
  
  if (this->require_truncation_)
    return ci.skip_chunks (strm);
  
  else
    return ci.handle_chunking (strm);
  
  
}

void
OBV_DynValue_Test::Trunc::truncation_hook (void)
{
  this->require_truncation_ = true;
}



