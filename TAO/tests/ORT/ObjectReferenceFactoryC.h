// -*- C++ -*-
/**
 * Code generated by the The ACE ORB (TAO) IDL Compiler v2.4.1
 * TAO and the TAO IDL Compiler have been developed by:
 *       Center for Distributed Object Computing
 *       Washington University
 *       St. Louis, MO
 *       USA
 *       http://www.cs.wustl.edu/~schmidt/doc-center.html
 * and
 *       Distributed Object Computing Laboratory
 *       University of California at Irvine
 *       Irvine, CA
 *       USA
 * and
 *       Institute for Software Integrated Systems
 *       Vanderbilt University
 *       Nashville, TN
 *       USA
 *       http://www.isis.vanderbilt.edu/
 *
 * Information about TAO is available at:
 *     http://www.dre.vanderbilt.edu/~schmidt/TAO.html
 **/

// TAO_IDL - Generated from
// be/be_codegen.cpp:149

#ifndef _TAO_IDL_OBJECTREFERENCEFACTORYC_JU15DK_H_
#define _TAO_IDL_OBJECTREFERENCEFACTORYC_JU15DK_H_

#include /**/ "ace/pre.h"


#include /**/ "ace/config-all.h"

#if !defined (ACE_LACKS_PRAGMA_ONCE)
# pragma once
#endif /* ACE_LACKS_PRAGMA_ONCE */


#include "tao/Valuetype/ValueBase.h"
#include "tao/Valuetype/Valuetype_Adapter_Factory_Impl.h"
#include "tao/ORB.h"
#include "tao/Basic_Types.h"
#include "tao/String_Manager_T.h"
#include "tao/Valuetype/Value_VarOut_T.h"
#include "tao/Arg_Traits_T.h"
#include "tao/Basic_Arguments.h"
#include "tao/Special_Basic_Arguments.h"
#include "tao/Any_Insert_Policy_T.h"
#include "tao/Fixed_Size_Argument_T.h"
#include "tao/Var_Size_Argument_T.h"
#include /**/ "tao/Version.h"
#include /**/ "tao/Versioned_Namespace.h"

#include "tao/ObjRefTemplate/ObjectReferenceTemplate_includeC.h"

#if TAO_MAJOR_VERSION != 2 || TAO_MINOR_VERSION != 4 || TAO_MICRO_VERSION != 1
#error This file should be regenerated with TAO_IDL
#endif

#if defined (TAO_EXPORT_MACRO)
#undef TAO_EXPORT_MACRO
#endif
#define TAO_EXPORT_MACRO

// TAO_IDL - Generated from
// be/be_visitor_module/module_ch.cpp:35

namespace ORT_Test
{

  // TAO_IDL - Generated from
  // be/be_valuetype.cpp:564



#if !defined (_ORT_TEST_OBJECTREFERENCEFACTORY__VAR_OUT_CH_)
#define _ORT_TEST_OBJECTREFERENCEFACTORY__VAR_OUT_CH_

  class ObjectReferenceFactory;
  typedef
    TAO_Value_Var_T<
        ObjectReferenceFactory
      >
    ObjectReferenceFactory_var;

  typedef
    TAO_Value_Out_T<
        ObjectReferenceFactory
      >
    ObjectReferenceFactory_out;

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // be/be_visitor_valuetype/valuetype_ch.cpp:50

  class  ObjectReferenceFactory
    : public virtual PortableInterceptor::ObjectReferenceFactory
  {
  public:

    // TAO_IDL - Generated from
    // be/be_type.cpp:304

    typedef ObjectReferenceFactory * _ptr_type;
    typedef ObjectReferenceFactory_var _var_type;
    typedef ObjectReferenceFactory_out _out_type;

    static ObjectReferenceFactory* _downcast ( ::CORBA::ValueBase *v);

    /// TAO extensions or internals
    static ::CORBA::Boolean _tao_unmarshal (
        TAO_InputCDR &strm,
        ObjectReferenceFactory *&new_object);

    virtual const char* _tao_obv_repository_id (void) const;

    virtual void _tao_obv_truncatable_repo_ids (Repository_Id_List &) const;

    static const char* _tao_obv_static_repository_id (void);

    // TAO_IDL - Generated from
    // be/be_visitor_valuetype/valuetype_ch.cpp:238

  protected:
    ObjectReferenceFactory (void);
    virtual ~ObjectReferenceFactory (void);

    virtual ::CORBA::Boolean _tao_marshal_v (TAO_OutputCDR &) const;
    virtual ::CORBA::Boolean _tao_unmarshal_v (TAO_InputCDR &);
    virtual ::CORBA::Boolean _tao_match_formal_type (ptrdiff_t ) const;

  private:
    ObjectReferenceFactory (const ObjectReferenceFactory &);
    void operator= (const ObjectReferenceFactory &);

  protected:
    virtual ::CORBA::Boolean
    _tao_marshal__ORT_Test_ObjectReferenceFactory (TAO_OutputCDR &, TAO_ChunkInfo &) const = 0;

    virtual ::CORBA::Boolean
    _tao_unmarshal__ORT_Test_ObjectReferenceFactory (TAO_InputCDR &, TAO_ChunkInfo &) = 0;
  };

// TAO_IDL - Generated from
// be/be_visitor_module/module_ch.cpp:64

} // module ORT_Test

// TAO_IDL - Generated from
// be/be_visitor_arg_traits.cpp:66

TAO_BEGIN_VERSIONED_NAMESPACE_DECL


// Arg traits specializations.
namespace TAO
{

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:306

#if !defined (_ORT_TEST_OBJECTREFERENCEFACTORY__ARG_TRAITS_)
#define _ORT_TEST_OBJECTREFERENCEFACTORY__ARG_TRAITS_

  template<>
  class Arg_Traits< ::ORT_Test::ObjectReferenceFactory>
    : public
        Object_Arg_Traits_T<
            ::ORT_Test::ObjectReferenceFactory *,
            ::ORT_Test::ObjectReferenceFactory_var,
            ::ORT_Test::ObjectReferenceFactory_out,
            TAO::Value_Traits<ORT_Test::ObjectReferenceFactory>,
            TAO::Any_Insert_Policy_Noop
          >
  {
  };

#endif /* end #if !defined */
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_valuetype/obv_module.cpp:44

namespace OBV_ORT_Test
{

  // TAO_IDL - Generated from
  // be/be_visitor_valuetype/valuetype_obv_ch.cpp:44

  // OBV_ class
  class  ObjectReferenceFactory
    : public virtual ORT_Test::ObjectReferenceFactory
  {

protected:
  ObjectReferenceFactory (void);
  virtual ~ObjectReferenceFactory (void);

protected:
  virtual ::CORBA::Boolean
  _tao_marshal__ORT_Test_ObjectReferenceFactory (TAO_OutputCDR &, TAO_ChunkInfo &) const;

  virtual ::CORBA::Boolean
  _tao_unmarshal__ORT_Test_ObjectReferenceFactory (TAO_InputCDR &, TAO_ChunkInfo &);

  ::CORBA::Boolean _tao_marshal_state (TAO_OutputCDR &, TAO_ChunkInfo &) const;
  ::CORBA::Boolean _tao_unmarshal_state (TAO_InputCDR &, TAO_ChunkInfo &);
  virtual void truncation_hook (void);

private:
  CORBA::Boolean require_truncation_;
};
}

// TAO_IDL - Generated from
// be/be_visitor_traits.cpp:60

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Traits specializations.
namespace TAO
{

#if !defined (_ORT_TEST_OBJECTREFERENCEFACTORY__TRAITS_)
#define _ORT_TEST_OBJECTREFERENCEFACTORY__TRAITS_

  template<>
  struct  Value_Traits<ORT_Test::ObjectReferenceFactory>
  {
    static void add_ref (ORT_Test::ObjectReferenceFactory *);
    static void remove_ref (ORT_Test::ObjectReferenceFactory *);
    static void release (ORT_Test::ObjectReferenceFactory *);
  };

#endif /* end #if !defined */
}
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_valuetype.cpp:456


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

namespace CORBA
{
  extern  void add_ref (ORT_Test::ObjectReferenceFactory *);
  extern  void remove_ref (ORT_Test::ObjectReferenceFactory *);
}
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_valuetype/cdr_op_ch.cpp:49


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 ::CORBA::Boolean operator<< (TAO_OutputCDR &, const ORT_Test::ObjectReferenceFactory *);
 ::CORBA::Boolean operator>> (TAO_InputCDR &, ORT_Test::ObjectReferenceFactory *&);

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_codegen.cpp:1700
#if defined (__ACE_INLINE__)
#include "ObjectReferenceFactoryC.inl"
#endif /* defined INLINE */

#include /**/ "ace/post.h"

#endif /* ifndef */

