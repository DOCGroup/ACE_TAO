// -*- C++ -*-
/**
 * Code generated by the The ACE ORB (TAO) IDL Compiler v2.4.1
 * TAO and the TAO IDL Compiler have been developed by:
 *       Center for Distributed Object Computing
 *       Washington University
 *       St. Louis, MO
 *       USA
 *       http://www.cs.wustl.edu/~schmidt/doc-center.html
 * and
 *       Distributed Object Computing Laboratory
 *       University of California at Irvine
 *       Irvine, CA
 *       USA
 * and
 *       Institute for Software Integrated Systems
 *       Vanderbilt University
 *       Nashville, TN
 *       USA
 *       http://www.isis.vanderbilt.edu/
 *
 * Information about TAO is available at:
 *     http://www.dre.vanderbilt.edu/~schmidt/TAO.html
 **/

// TAO_IDL - Generated from
// be/be_codegen.cpp:373


#include "Foo_BC.h"
#include "tao/AnyTypeCode/Null_RefCount_Policy.h"
#include "tao/AnyTypeCode/TypeCode_Constants.h"
#include "tao/AnyTypeCode/Alias_TypeCode_Static.h"
#include "tao/AnyTypeCode/Objref_TypeCode_Static.h"
#include "tao/AnyTypeCode/Sequence_TypeCode_Static.h"
#include "tao/AnyTypeCode/String_TypeCode_Static.h"
#include "tao/AnyTypeCode/Struct_TypeCode_Static.h"
#include "tao/AnyTypeCode/TypeCode_Struct_Field.h"
#include "tao/CDR.h"
#include "tao/Exception_Data.h"
#include "tao/Invocation_Adapter.h"
#include "tao/Object_T.h"
#include "tao/CDR.h"
#include "tao/AnyTypeCode/Any.h"
#include "tao/AnyTypeCode/Any_Impl_T.h"
#include "tao/AnyTypeCode/Any_Dual_Impl_T.h"
#include "tao/AnyTypeCode/Any_Array_Impl_T.h"
#include "ace/OS_NS_string.h"

#if !defined (__ACE_INLINE__)
#include "Foo_BC.inl"
#endif /* !defined INLINE */

// TAO_IDL - Generated from
// be/be_visitor_sequence/sequence_cs.cpp:70

#if !defined (_BOUNDED_VAR_SIZE_CS_)
#define _BOUNDED_VAR_SIZE_CS_

Bounded_Var_Size::Bounded_Var_Size (void)
{}

Bounded_Var_Size::Bounded_Var_Size (
    ::CORBA::ULong length,
    ::CORBA::Char * buffer,
    ::CORBA::Boolean release
  )
  : ::TAO::bounded_value_sequence<
        ::CORBA::Char,
        32
      >
    (length, buffer, release)
{}

Bounded_Var_Size::Bounded_Var_Size (
    const Bounded_Var_Size &seq)
  : ::TAO::bounded_value_sequence<
        ::CORBA::Char,
        32
      > (seq)
{}

Bounded_Var_Size::~Bounded_Var_Size (void)
{}

void Bounded_Var_Size::_tao_any_destructor (
    void * _tao_void_pointer)
{
  Bounded_Var_Size * _tao_tmp_pointer =
    static_cast<Bounded_Var_Size *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

#endif /* end #if !defined */

// TAO_IDL - Generated from
// be/be_visitor_typecode/alias_typecode.cpp:49



// TAO_IDL - Generated from
// be/be_visitor_typecode/typecode_defn.cpp:461


#ifndef _TAO_TYPECODE_Bounded_Var_Size_GUARD
#define _TAO_TYPECODE_Bounded_Var_Size_GUARD

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

namespace TAO
{
  namespace TypeCode
  {
    namespace
    {
      TAO::TypeCode::Sequence< ::CORBA::TypeCode_ptr const *,
                              TAO::Null_RefCount_Policy>
        Bounded_Var_Size_32 (
          ::CORBA::tk_sequence,
          &CORBA::_tc_char,
          32U);

      ::CORBA::TypeCode_ptr const tc_Bounded_Var_Size_32 =
        &Bounded_Var_Size_32;
    }
  }
}

TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_TYPECODE_Bounded_Var_Size_GUARD */

static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_Bounded_Var_Size (
    ::CORBA::tk_alias,
    "IDL:Bounded_Var_Size:1.0",
    "Bounded_Var_Size",
    &TAO::TypeCode::tc_Bounded_Var_Size_32);

::CORBA::TypeCode_ptr const _tc_Bounded_Var_Size =
  &_tao_tc_Bounded_Var_Size;

// TAO_IDL - Generated from
// be/be_visitor_sequence/sequence_cs.cpp:70

#if !defined (_UNBOUNDED_VAR_SIZE_CS_)
#define _UNBOUNDED_VAR_SIZE_CS_

Unbounded_Var_Size::Unbounded_Var_Size (void)
{}

Unbounded_Var_Size::Unbounded_Var_Size (
    ::CORBA::ULong max)
  : ::TAO::unbounded_value_sequence<
        ::CORBA::Char
      > (max)
{}

Unbounded_Var_Size::Unbounded_Var_Size (
    ::CORBA::ULong max,
    ::CORBA::ULong length,
    ::CORBA::Char * buffer,
    ::CORBA::Boolean release
  )
  : ::TAO::unbounded_value_sequence<
        ::CORBA::Char
      >
    (max, length, buffer, release)
{}

Unbounded_Var_Size::Unbounded_Var_Size (
    const Unbounded_Var_Size &seq)
  : ::TAO::unbounded_value_sequence<
        ::CORBA::Char
      > (seq)
{}

Unbounded_Var_Size::~Unbounded_Var_Size (void)
{}

void Unbounded_Var_Size::_tao_any_destructor (
    void * _tao_void_pointer)
{
  Unbounded_Var_Size * _tao_tmp_pointer =
    static_cast<Unbounded_Var_Size *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

#endif /* end #if !defined */

// TAO_IDL - Generated from
// be/be_visitor_typecode/alias_typecode.cpp:49



// TAO_IDL - Generated from
// be/be_visitor_typecode/typecode_defn.cpp:461


#ifndef _TAO_TYPECODE_Unbounded_Var_Size_GUARD
#define _TAO_TYPECODE_Unbounded_Var_Size_GUARD

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

namespace TAO
{
  namespace TypeCode
  {
    namespace
    {
      TAO::TypeCode::Sequence< ::CORBA::TypeCode_ptr const *,
                              TAO::Null_RefCount_Policy>
        Unbounded_Var_Size_0 (
          ::CORBA::tk_sequence,
          &CORBA::_tc_char,
          0U);

      ::CORBA::TypeCode_ptr const tc_Unbounded_Var_Size_0 =
        &Unbounded_Var_Size_0;
    }
  }
}

TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_TYPECODE_Unbounded_Var_Size_GUARD */

static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_Unbounded_Var_Size (
    ::CORBA::tk_alias,
    "IDL:Unbounded_Var_Size:1.0",
    "Unbounded_Var_Size",
    &TAO::TypeCode::tc_Unbounded_Var_Size_0);

::CORBA::TypeCode_ptr const _tc_Unbounded_Var_Size =
  &_tao_tc_Unbounded_Var_Size;

// TAO_IDL - Generated from
// be/be_visitor_array/array_cs.cpp:94

Fixed_Array_slice *
Fixed_Array_dup (const Fixed_Array_slice *_tao_src_array)
{
  Fixed_Array_slice *_tao_dup_array =
    Fixed_Array_alloc ();

  if (!_tao_dup_array)
    {
      return static_cast <Fixed_Array_slice *> (0);
    }

  Fixed_Array_copy (_tao_dup_array, _tao_src_array);
  return _tao_dup_array;
}

Fixed_Array_slice *
Fixed_Array_alloc (void)
{
  Fixed_Array_slice *retval = 0;
  ACE_NEW_RETURN (retval, ::CORBA::Long[20], 0);
  return retval;
}

void
Fixed_Array_free (
    Fixed_Array_slice *_tao_slice)
{
  delete [] _tao_slice;
}

void
Fixed_Array_copy (
    Fixed_Array_slice * _tao_to,
    const Fixed_Array_slice *_tao_from)
{
  // Copy each individual element.
  for ( ::CORBA::ULong i0 = 0; i0 < 20; ++i0)
    {
      _tao_to[i0] = _tao_from[i0];
    }
}

// TAO_IDL - Generated from
// be/be_visitor_typecode/alias_typecode.cpp:49



// TAO_IDL - Generated from
// be/be_visitor_typecode/typecode_defn.cpp:298


#ifndef _TAO_TYPECODE_Fixed_Array_GUARD
#define _TAO_TYPECODE_Fixed_Array_GUARD

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

namespace TAO
{
  namespace TypeCode
  {
    namespace
    {
      TAO::TypeCode::Sequence< ::CORBA::TypeCode_ptr const *,
                              TAO::Null_RefCount_Policy>
        Fixed_Array_20 (
          ::CORBA::tk_array,
          &CORBA::_tc_long,
          20U);

      ::CORBA::TypeCode_ptr const tc_Fixed_Array =
        &Fixed_Array_20;
    }
  }
}

TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_TYPECODE_Fixed_Array_GUARD */
static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_Fixed_Array (
    ::CORBA::tk_alias,
    "IDL:Fixed_Array:1.0",
    "Fixed_Array",
    &TAO::TypeCode::tc_Fixed_Array);

::CORBA::TypeCode_ptr const _tc_Fixed_Array =
  &_tao_tc_Fixed_Array;

// TAO_IDL - Generated from
// be/be_visitor_array/array_cs.cpp:94

Var_Array_slice *
Var_Array_dup (const Var_Array_slice *_tao_src_array)
{
  Var_Array_slice *_tao_dup_array =
    Var_Array_alloc ();

  if (!_tao_dup_array)
    {
      return static_cast <Var_Array_slice *> (0);
    }

  Var_Array_copy (_tao_dup_array, _tao_src_array);
  return _tao_dup_array;
}

Var_Array_slice *
Var_Array_alloc (void)
{
  Var_Array_slice *retval = 0;
  ACE_NEW_RETURN (retval, ::TAO::String_Manager[3], 0);
  return retval;
}

void
Var_Array_free (
    Var_Array_slice *_tao_slice)
{
  delete [] _tao_slice;
}

void
Var_Array_copy (
    Var_Array_slice * _tao_to,
    const Var_Array_slice *_tao_from)
{
  // Copy each individual element.
  for ( ::CORBA::ULong i0 = 0; i0 < 3; ++i0)
    {
      _tao_to[i0] = _tao_from[i0];
    }
}

// TAO_IDL - Generated from
// be/be_visitor_typecode/alias_typecode.cpp:49



// TAO_IDL - Generated from
// be/be_visitor_typecode/typecode_defn.cpp:298


#ifndef _TAO_TYPECODE_Var_Array_GUARD
#define _TAO_TYPECODE_Var_Array_GUARD

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

namespace TAO
{
  namespace TypeCode
  {
    namespace
    {
      TAO::TypeCode::Sequence< ::CORBA::TypeCode_ptr const *,
                              TAO::Null_RefCount_Policy>
        Var_Array_3 (
          ::CORBA::tk_array,
          &CORBA::_tc_string,
          3U);

      ::CORBA::TypeCode_ptr const tc_Var_Array =
        &Var_Array_3;
    }
  }
}

TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_TYPECODE_Var_Array_GUARD */
static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_Var_Array (
    ::CORBA::tk_alias,
    "IDL:Var_Array:1.0",
    "Var_Array",
    &TAO::TypeCode::tc_Var_Array);

::CORBA::TypeCode_ptr const _tc_Var_Array =
  &_tao_tc_Var_Array;

// TAO_IDL - Generated from
// be/be_visitor_typecode/alias_typecode.cpp:49



// TAO_IDL - Generated from
// be/be_visitor_typecode/typecode_defn.cpp:556


#ifndef _TAO_TYPECODE_CORBA_STRING_20_GUARD
#define _TAO_TYPECODE_CORBA_STRING_20_GUARD

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

namespace TAO
{
  namespace TypeCode
  {
    namespace
    {
      TAO::TypeCode::String<TAO::Null_RefCount_Policy>
        CORBA_STRING_20 (
          ::CORBA::tk_string,
          20U);

      ::CORBA::TypeCode_ptr const tc_CORBA_STRING_20 =
        &CORBA_STRING_20;
    }
  }
}

TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_TYPECODE_CORBA_STRING_20_GUARD */

static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_string_20 (
    ::CORBA::tk_alias,
    "IDL:string_20:1.0",
    "string_20",
    &TAO::TypeCode::tc_CORBA_STRING_20);

::CORBA::TypeCode_ptr const _tc_string_20 =
  &_tao_tc_string_20;

// TAO_IDL - Generated from
// be/be_visitor_typecode/struct_typecode.cpp:86

static TAO::TypeCode::Struct_Field<
  char const *,
  ::CORBA::TypeCode_ptr const *> const
    _tao_fields_TimeOfDay[] =
      {
        { "hour", &CORBA::_tc_short },
        { "minute", &CORBA::_tc_short },
        { "second", &CORBA::_tc_short }
      };

static TAO::TypeCode::Struct<
  char const *,
  ::CORBA::TypeCode_ptr const *,
  TAO::TypeCode::Struct_Field<
    char const *,
    ::CORBA::TypeCode_ptr const *> const *,
  TAO::Null_RefCount_Policy>
_tao_tc_TimeOfDay (
  ::CORBA::tk_struct,
  "IDL:TimeOfDay:1.0",
  "TimeOfDay",
  _tao_fields_TimeOfDay,
  3);

::CORBA::TypeCode_ptr const _tc_TimeOfDay =
  &_tao_tc_TimeOfDay;

// TAO_IDL - Generated from
// be/be_visitor_structure/structure_cs.cpp:56

void
TimeOfDay::_tao_any_destructor (
    void *_tao_void_pointer)
{
  TimeOfDay *_tao_tmp_pointer =
    static_cast<TimeOfDay *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

// TAO_IDL - Generated from
// be/be_visitor_interface/interface_cs.cpp:48

// Traits specializations for Foo_B.

Foo_B_ptr
TAO::Objref_Traits<Foo_B>::duplicate (
    Foo_B_ptr p)
{
  return Foo_B::_duplicate (p);
}

void
TAO::Objref_Traits<Foo_B>::release (
    Foo_B_ptr p)
{
  ::CORBA::release (p);
}

Foo_B_ptr
TAO::Objref_Traits<Foo_B>::nil (void)
{
  return Foo_B::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<Foo_B>::marshal (
    const Foo_B_ptr p,
    TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:88

void
Foo_B::op1 (
  void)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }

  TAO::Arg_Traits< void>::ret_val _tao_retval;

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      1,
      "op1",
      3,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY,
      TAO::TAO_TWOWAY_INVOCATION
      ,
      TAO::TAO_SYNCHRONOUS_INVOCATION,
      false
    );

  _tao_call.invoke (0, 0);
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:88

void
Foo_B::op2 (
  ::CORBA::Long value)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }

  TAO::Arg_Traits< void>::ret_val _tao_retval;
  TAO::Arg_Traits< ::CORBA::Long>::in_arg_val _tao_value (value);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_value
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      2,
      "op2",
      3,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY

    );

  _tao_call.invoke (0, 0);
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:88

::CORBA::Long
Foo_B::op3 (
  ::CORBA::Long value)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }

  TAO::Arg_Traits< ::CORBA::Long>::ret_val _tao_retval;
  TAO::Arg_Traits< ::CORBA::Long>::in_arg_val _tao_value (value);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_value
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      2,
      "op3",
      3,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY

    );

  _tao_call.invoke (0, 0);

  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:88

void
Foo_B::op4 (
  ::CORBA::Long value)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }

  TAO::Arg_Traits< void>::clonable_ret_val _tao_retval;
  TAO::Arg_Traits< ::CORBA::Long>::in_clonable_arg_val _tao_value (value);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_value
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      2,
      "op4",
      3,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY,
      TAO::TAO_ONEWAY_INVOCATION

    );

  _tao_call.invoke (0, 0);
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:88

void
Foo_B::op5 (
  void)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }

  TAO::Arg_Traits< void>::ret_val _tao_retval;

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval
    };

  static TAO::Exception_Data
  _tao_Foo_B_op5_exceptiondata [] =
    {
      {
        "IDL:FooException:1.0",
        FooException::_alloc
#if TAO_HAS_INTERCEPTORS == 1
        , _tc_FooException
#endif /* TAO_HAS_INTERCEPTORS */
      }
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      1,
      "op5",
      3,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY,
      TAO::TAO_TWOWAY_INVOCATION
      ,
      TAO::TAO_SYNCHRONOUS_INVOCATION,
      false
    );

  _tao_call.invoke (
      _tao_Foo_B_op5_exceptiondata,
      1
    );
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:88

::CORBA::Boolean
Foo_B::op6 (
  const ::TimeOfDay & t,
  char *& message)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }

  TAO::Arg_Traits< ::ACE_InputCDR::to_boolean>::ret_val _tao_retval;
  TAO::Arg_Traits< ::TimeOfDay>::in_arg_val _tao_t (t);
  TAO::Arg_Traits< char *>::inout_arg_val _tao_message (message);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_t,
      &_tao_message
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      3,
      "op6",
      3,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY

    );

  _tao_call.invoke (0, 0);

  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:88

void
Foo_B::op7 (
  ::Callback_ptr cb)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }

  TAO::Arg_Traits< void>::ret_val _tao_retval;
  TAO::Arg_Traits< ::Callback>::in_arg_val _tao_cb (cb);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_cb
    };

  static TAO::Exception_Data
  _tao_Foo_B_op7_exceptiondata [] =
    {
      {
        "IDL:FooException:1.0",
        FooException::_alloc
#if TAO_HAS_INTERCEPTORS == 1
        , _tc_FooException
#endif /* TAO_HAS_INTERCEPTORS */
      }
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      2,
      "op7",
      3,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY

    );

  _tao_call.invoke (
      _tao_Foo_B_op7_exceptiondata,
      1
    );
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:88

void
Foo_B::test_unbounded_string_arg (
  const char * message)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }

  TAO::Arg_Traits< void>::clonable_ret_val _tao_retval;
  TAO::Arg_Traits< char *>::in_clonable_arg_val _tao_message (message);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_message
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      2,
      "test_unbounded_string_arg",
      25,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY,
      TAO::TAO_ONEWAY_INVOCATION

    );

  _tao_call.invoke (0, 0);
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:88

void
Foo_B::test_bounded_string_arg (
  const char * message)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }

  TAO::Arg_Traits< void>::clonable_ret_val _tao_retval;
  TAO::Arg_Traits< ::TAO::string_20_20>::in_clonable_arg_val _tao_message (message);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_message
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      2,
      "test_bounded_string_arg",
      23,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY,
      TAO::TAO_ONEWAY_INVOCATION

    );

  _tao_call.invoke (0, 0);
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:88

void
Foo_B::test_fixed_array_arg (
  const ::Fixed_Array message)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }

  TAO::Arg_Traits< void>::clonable_ret_val _tao_retval;
  TAO::Arg_Traits< ::Fixed_Array_tag>::in_clonable_arg_val _tao_message (message);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_message
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      2,
      "test_fixed_array_arg",
      20,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY,
      TAO::TAO_ONEWAY_INVOCATION

    );

  _tao_call.invoke (0, 0);
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:88

void
Foo_B::test_var_array_arg (
  const ::Var_Array messages)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }

  TAO::Arg_Traits< void>::clonable_ret_val _tao_retval;
  TAO::Arg_Traits< ::Var_Array_tag>::in_clonable_arg_val _tao_messages (messages);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_messages
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      2,
      "test_var_array_arg",
      18,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY,
      TAO::TAO_ONEWAY_INVOCATION

    );

  _tao_call.invoke (0, 0);
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:88

void
Foo_B::test_bounded_var_size_arg (
  const ::Bounded_Var_Size & message)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }

  TAO::Arg_Traits< void>::clonable_ret_val _tao_retval;
  TAO::Arg_Traits< ::Bounded_Var_Size>::in_clonable_arg_val _tao_message (message);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_message
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      2,
      "test_bounded_var_size_arg",
      25,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY,
      TAO::TAO_ONEWAY_INVOCATION

    );

  _tao_call.invoke (0, 0);
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:88

void
Foo_B::test_unbounded_var_size_arg (
  const ::Unbounded_Var_Size & message)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }

  TAO::Arg_Traits< void>::clonable_ret_val _tao_retval;
  TAO::Arg_Traits< ::Unbounded_Var_Size>::in_clonable_arg_val _tao_message (message);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_message
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      2,
      "test_unbounded_var_size_arg",
      27,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY,
      TAO::TAO_ONEWAY_INVOCATION

    );

  _tao_call.invoke (0, 0);
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:88

void
Foo_B::test_fixed_size_arg (
  const ::TimeOfDay & t)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }

  TAO::Arg_Traits< void>::clonable_ret_val _tao_retval;
  TAO::Arg_Traits< ::TimeOfDay>::in_clonable_arg_val _tao_t (t);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_t
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      2,
      "test_fixed_size_arg",
      19,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY,
      TAO::TAO_ONEWAY_INVOCATION

    );

  _tao_call.invoke (0, 0);
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:88

void
Foo_B::test_special_basic_arg (
  ::CORBA::Boolean value,
  ::CORBA::Long client_id)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }

  TAO::Arg_Traits< void>::clonable_ret_val _tao_retval;
  TAO::Arg_Traits< ::ACE_InputCDR::to_boolean>::in_clonable_arg_val _tao_value (value);
  TAO::Arg_Traits< ::CORBA::Long>::in_clonable_arg_val _tao_client_id (client_id);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_value,
      &_tao_client_id
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      3,
      "test_special_basic_arg",
      22,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY,
      TAO::TAO_ONEWAY_INVOCATION

    );

  _tao_call.invoke (0, 0);
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:88

void
Foo_B::test_objref_arg (
  ::Callback_ptr cb)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }

  TAO::Arg_Traits< void>::clonable_ret_val _tao_retval;
  TAO::Arg_Traits< ::Callback>::in_clonable_arg_val _tao_cb (cb);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_cb
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      2,
      "test_objref_arg",
      15,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY,
      TAO::TAO_ONEWAY_INVOCATION

    );

  _tao_call.invoke (0, 0);
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:88

void
Foo_B::done (
  void)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }

  TAO::Arg_Traits< void>::ret_val _tao_retval;

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      1,
      "done",
      4,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY,
      TAO::TAO_TWOWAY_INVOCATION
      ,
      TAO::TAO_SYNCHRONOUS_INVOCATION,
      false
    );

  _tao_call.invoke (0, 0);
}

Foo_B::Foo_B (void)
{
}

Foo_B::~Foo_B (void)
{
}

void
Foo_B::_tao_any_destructor (void *_tao_void_pointer)
{
  Foo_B *_tao_tmp_pointer =
    static_cast<Foo_B *> (_tao_void_pointer);
  ::CORBA::release (_tao_tmp_pointer);
}

Foo_B_ptr
Foo_B::_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return
    TAO::Narrow_Utils<Foo_B>::narrow (
        _tao_objref,
        "IDL:Foo_B:1.0");
}

Foo_B_ptr
Foo_B::_unchecked_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return
    TAO::Narrow_Utils<Foo_B>::unchecked_narrow (
        _tao_objref);
}

Foo_B_ptr
Foo_B::_nil (void)
{
  return 0;
}

Foo_B_ptr
Foo_B::_duplicate (Foo_B_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  return obj;
}

void
Foo_B::_tao_release (Foo_B_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
Foo_B::_is_a (const char *value)
{
  if (
      ACE_OS::strcmp (
          value,
          "IDL:Foo_B:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        ) == 0
    )
    {
      return true; // success using local knowledge
    }
  else
    {
      return this->::CORBA::Object::_is_a (value);
    }
}

const char* Foo_B::_interface_repository_id (void) const
{
  return "IDL:Foo_B:1.0";
}

::CORBA::Boolean
Foo_B::marshal (TAO_OutputCDR &cdr)
{
  return (cdr << this);
}

// TAO_IDL - Generated from
// be/be_visitor_typecode/objref_typecode.cpp:70

static TAO::TypeCode::Objref<char const *,
                             TAO::Null_RefCount_Policy>
  _tao_tc_Foo_B (
    ::CORBA::tk_objref,
    "IDL:Foo_B:1.0",
    "Foo_B");

::CORBA::TypeCode_ptr const _tc_Foo_B =
  &_tao_tc_Foo_B;

// TAO_IDL - Generated from
// be/be_visitor_sequence/any_op_cs.cpp:45


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


// Copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    const Bounded_Var_Size &_tao_elem)
{
  TAO::Any_Dual_Impl_T<Bounded_Var_Size>::insert_copy (
      _tao_any,
      Bounded_Var_Size::_tao_any_destructor,
      _tc_Bounded_Var_Size,
      _tao_elem
    );
}

// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    Bounded_Var_Size *_tao_elem)
{
  TAO::Any_Dual_Impl_T<Bounded_Var_Size>::insert (
      _tao_any,
      Bounded_Var_Size::_tao_any_destructor,
      _tc_Bounded_Var_Size,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    Bounded_Var_Size *&_tao_elem)
{
  return _tao_any >>= const_cast<
      const Bounded_Var_Size *&> (
      _tao_elem
    );
}

// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const Bounded_Var_Size *&_tao_elem)
{
  return
    TAO::Any_Dual_Impl_T<Bounded_Var_Size>::extract (
        _tao_any,
        Bounded_Var_Size::_tao_any_destructor,
        _tc_Bounded_Var_Size,
        _tao_elem);
}
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_sequence/any_op_cs.cpp:45


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


// Copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    const Unbounded_Var_Size &_tao_elem)
{
  TAO::Any_Dual_Impl_T<Unbounded_Var_Size>::insert_copy (
      _tao_any,
      Unbounded_Var_Size::_tao_any_destructor,
      _tc_Unbounded_Var_Size,
      _tao_elem
    );
}

// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    Unbounded_Var_Size *_tao_elem)
{
  TAO::Any_Dual_Impl_T<Unbounded_Var_Size>::insert (
      _tao_any,
      Unbounded_Var_Size::_tao_any_destructor,
      _tc_Unbounded_Var_Size,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    Unbounded_Var_Size *&_tao_elem)
{
  return _tao_any >>= const_cast<
      const Unbounded_Var_Size *&> (
      _tao_elem
    );
}

// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const Unbounded_Var_Size *&_tao_elem)
{
  return
    TAO::Any_Dual_Impl_T<Unbounded_Var_Size>::extract (
        _tao_any,
        Unbounded_Var_Size::_tao_any_destructor,
        _tc_Unbounded_Var_Size,
        _tao_elem);
}
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_array/any_op_cs.cpp:37


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

void operator<<= (
    ::CORBA::Any &_tao_any,
    const Fixed_Array_forany &_tao_elem
  )
{
  TAO::Any_Array_Impl_T<
      Fixed_Array_slice,
      Fixed_Array_forany
    >::insert (
        _tao_any,
        Fixed_Array_forany::_tao_any_destructor,
        _tc_Fixed_Array,
        _tao_elem.nocopy ()
          ? _tao_elem.ptr ()
          : Fixed_Array_dup (_tao_elem.in ())
      );
}

::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    Fixed_Array_forany &_tao_elem
  )
{
  return
    TAO::Any_Array_Impl_T<
        Fixed_Array_slice,
        Fixed_Array_forany
      >::extract (
          _tao_any,
          Fixed_Array_forany::_tao_any_destructor,
          _tc_Fixed_Array,
          _tao_elem.out ()
        );
}
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_array/any_op_cs.cpp:37


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

void operator<<= (
    ::CORBA::Any &_tao_any,
    const Var_Array_forany &_tao_elem
  )
{
  TAO::Any_Array_Impl_T<
      Var_Array_slice,
      Var_Array_forany
    >::insert (
        _tao_any,
        Var_Array_forany::_tao_any_destructor,
        _tc_Var_Array,
        _tao_elem.nocopy ()
          ? _tao_elem.ptr ()
          : Var_Array_dup (_tao_elem.in ())
      );
}

::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    Var_Array_forany &_tao_elem
  )
{
  return
    TAO::Any_Array_Impl_T<
        Var_Array_slice,
        Var_Array_forany
      >::extract (
          _tao_any,
          Var_Array_forany::_tao_any_destructor,
          _tc_Var_Array,
          _tao_elem.out ()
        );
}
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_structure/any_op_cs.cpp:43


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

/// Copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  const TimeOfDay &_tao_elem)
{
  TAO::Any_Dual_Impl_T<TimeOfDay>::insert_copy (
    _tao_any,
    TimeOfDay::_tao_any_destructor,
    _tc_TimeOfDay,
    _tao_elem);
}

/// Non-copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  TimeOfDay *_tao_elem)
{
  TAO::Any_Dual_Impl_T<TimeOfDay>::insert (
    _tao_any,
    TimeOfDay::_tao_any_destructor,
    _tc_TimeOfDay,
    _tao_elem);
}

/// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
  const ::CORBA::Any &_tao_any,
  TimeOfDay *&_tao_elem)
{
  return _tao_any >>= const_cast<
      const TimeOfDay *&> (
      _tao_elem);
}

/// Extraction to const pointer.
::CORBA::Boolean operator>>= (
  const ::CORBA::Any &_tao_any,
  const TimeOfDay *&_tao_elem)
{
  return
    TAO::Any_Dual_Impl_T<TimeOfDay>::extract (
      _tao_any,
      TimeOfDay::_tao_any_destructor,
      _tc_TimeOfDay,
      _tao_elem);
}
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_interface/any_op_cs.cpp:38
TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<Foo_B>::to_object (
      ::CORBA::Object_ptr &_tao_elem) const
  {
    _tao_elem = ::CORBA::Object::_duplicate (this->value_);
    return true;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



/// Copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    Foo_B_ptr _tao_elem)
{
  Foo_B_ptr _tao_objptr =
    Foo_B::_duplicate (_tao_elem);
  _tao_any <<= &_tao_objptr;
}

/// Non-copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    Foo_B_ptr *_tao_elem)
{
  TAO::Any_Impl_T<Foo_B>::insert (
      _tao_any,
      Foo_B::_tao_any_destructor,
      _tc_Foo_B,
      *_tao_elem);
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    Foo_B_ptr &_tao_elem)
{
  return
    TAO::Any_Impl_T<Foo_B>::extract (
        _tao_any,
        Foo_B::_tao_any_destructor,
        _tc_Foo_B,
        _tao_elem);
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_sequence/cdr_op_cs.cpp:93
#if !defined _TAO_CDR_OP_Bounded_Var_Size_CPP_
#define _TAO_CDR_OP_Bounded_Var_Size_CPP_

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Bounded_Var_Size &_tao_sequence)
{
  return TAO::marshal_sequence(strm, _tao_sequence);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Bounded_Var_Size &_tao_sequence)
{
  return TAO::demarshal_sequence(strm, _tao_sequence);
}


TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_CDR_OP_Bounded_Var_Size_CPP_ */

// TAO_IDL - Generated from
// be/be_visitor_sequence/cdr_op_cs.cpp:93
#if !defined _TAO_CDR_OP_Unbounded_Var_Size_CPP_
#define _TAO_CDR_OP_Unbounded_Var_Size_CPP_

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Unbounded_Var_Size &_tao_sequence)
{
  return TAO::marshal_sequence(strm, _tao_sequence);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Unbounded_Var_Size &_tao_sequence)
{
  return TAO::demarshal_sequence(strm, _tao_sequence);
}


TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_CDR_OP_Unbounded_Var_Size_CPP_ */

// TAO_IDL - Generated from
// be/be_visitor_array/cdr_op_cs.cpp:163


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Fixed_Array_forany &_tao_array)
{
  return
    strm.write_long_array (
        reinterpret_cast <const ACE_CDR::Long *> (_tao_array.in ()),
        20);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Fixed_Array_forany &_tao_array)
{
  return
    strm.read_long_array (
        reinterpret_cast <ACE_CDR::Long *> (_tao_array.out ()),
        20);
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_array/cdr_op_cs.cpp:163


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Var_Array_forany &_tao_array)
{
  CORBA::Boolean _tao_marshal_flag = true;

  for ( ::CORBA::ULong i0 = 0; i0 < 3 && _tao_marshal_flag; ++i0)
    {
      _tao_marshal_flag = (strm << _tao_array [i0].in ());
    }

  return _tao_marshal_flag;
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Var_Array_forany &_tao_array)
{
  CORBA::Boolean _tao_marshal_flag = true;

  for ( ::CORBA::ULong i0 = 0; i0 < 3 && _tao_marshal_flag; ++i0)
    {
      _tao_marshal_flag = (strm >> _tao_array [i0].out ());
    }

  return _tao_marshal_flag;
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_structure/cdr_op_cs.cpp:49

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const TimeOfDay &_tao_aggregate)
{
  return
    (strm << _tao_aggregate.hour) &&
    (strm << _tao_aggregate.minute) &&
    (strm << _tao_aggregate.second);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    TimeOfDay &_tao_aggregate)
{
  return
    (strm >> _tao_aggregate.hour) &&
    (strm >> _tao_aggregate.minute) &&
    (strm >> _tao_aggregate.second);
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_interface/cdr_op_cs.cpp:51

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Foo_B_ptr _tao_objref)
{
  ::CORBA::Object_ptr _tao_corba_obj = _tao_objref;
  return (strm << _tao_corba_obj);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Foo_B_ptr &_tao_objref)
{
  ::CORBA::Object_var obj;

  if (!(strm >> obj.inout ()))
    {
      return false;
    }

  typedef ::Foo_B RHS_SCOPED_NAME;

  // Narrow to the right type.
  _tao_objref =
    TAO::Narrow_Utils<RHS_SCOPED_NAME>::unchecked_narrow (obj.in ());

  return true;
}

TAO_END_VERSIONED_NAMESPACE_DECL



