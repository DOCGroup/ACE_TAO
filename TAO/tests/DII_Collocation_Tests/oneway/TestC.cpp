// -*- C++ -*-
/**
 * Code generated by the The ACE ORB (TAO) IDL Compiler v2.4.1
 * TAO and the TAO IDL Compiler have been developed by:
 *       Center for Distributed Object Computing
 *       Washington University
 *       St. Louis, MO
 *       USA
 *       http://www.cs.wustl.edu/~schmidt/doc-center.html
 * and
 *       Distributed Object Computing Laboratory
 *       University of California at Irvine
 *       Irvine, CA
 *       USA
 * and
 *       Institute for Software Integrated Systems
 *       Vanderbilt University
 *       Nashville, TN
 *       USA
 *       http://www.isis.vanderbilt.edu/
 *
 * Information about TAO is available at:
 *     http://www.dre.vanderbilt.edu/~schmidt/TAO.html
 **/

// TAO_IDL - Generated from
// be/be_codegen.cpp:373


#include "TestC.h"
#include "tao/AnyTypeCode/Null_RefCount_Policy.h"
#include "tao/AnyTypeCode/TypeCode_Constants.h"
#include "tao/AnyTypeCode/Alias_TypeCode_Static.h"
#include "tao/AnyTypeCode/Objref_TypeCode_Static.h"
#include "tao/AnyTypeCode/Sequence_TypeCode_Static.h"
#include "tao/AnyTypeCode/String_TypeCode_Static.h"
#include "tao/AnyTypeCode/Struct_TypeCode_Static.h"
#include "tao/AnyTypeCode/TypeCode_Struct_Field.h"
#include "tao/CDR.h"
#include "tao/Exception_Data.h"
#include "tao/Invocation_Adapter.h"
#include "tao/Object_T.h"
#include "tao/CDR.h"
#include "tao/AnyTypeCode/Any.h"
#include "tao/AnyTypeCode/Any_Impl_T.h"
#include "tao/AnyTypeCode/Any_Dual_Impl_T.h"
#include "tao/AnyTypeCode/Any_Array_Impl_T.h"
#include "ace/OS_NS_string.h"

#if !defined (__ACE_INLINE__)
#include "TestC.inl"
#endif /* !defined INLINE */

// TAO_IDL - Generated from
// be/be_visitor_sequence/sequence_cs.cpp:70

#if !defined (_TEST_BOUNDED_VAR_SIZE_ARG_CS_)
#define _TEST_BOUNDED_VAR_SIZE_ARG_CS_

Test::Bounded_Var_Size_Arg::Bounded_Var_Size_Arg (void)
{}

Test::Bounded_Var_Size_Arg::Bounded_Var_Size_Arg (
    ::CORBA::ULong length,
    ::CORBA::Char * buffer,
    ::CORBA::Boolean release
  )
  : ::TAO::bounded_value_sequence<
        ::CORBA::Char,
        10
      >
    (length, buffer, release)
{}

Test::Bounded_Var_Size_Arg::Bounded_Var_Size_Arg (
    const Bounded_Var_Size_Arg &seq)
  : ::TAO::bounded_value_sequence<
        ::CORBA::Char,
        10
      > (seq)
{}

Test::Bounded_Var_Size_Arg::~Bounded_Var_Size_Arg (void)
{}

void Test::Bounded_Var_Size_Arg::_tao_any_destructor (
    void * _tao_void_pointer)
{
  Bounded_Var_Size_Arg * _tao_tmp_pointer =
    static_cast<Bounded_Var_Size_Arg *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

#endif /* end #if !defined */

// TAO_IDL - Generated from
// be/be_visitor_typecode/alias_typecode.cpp:49



// TAO_IDL - Generated from
// be/be_visitor_typecode/typecode_defn.cpp:461


#ifndef _TAO_TYPECODE_Test_Bounded_Var_Size_Arg_GUARD
#define _TAO_TYPECODE_Test_Bounded_Var_Size_Arg_GUARD

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

namespace TAO
{
  namespace TypeCode
  {
    namespace
    {
      TAO::TypeCode::Sequence< ::CORBA::TypeCode_ptr const *,
                              TAO::Null_RefCount_Policy>
        Test_Bounded_Var_Size_Arg_10 (
          ::CORBA::tk_sequence,
          &CORBA::_tc_char,
          10U);

      ::CORBA::TypeCode_ptr const tc_Test_Bounded_Var_Size_Arg_10 =
        &Test_Bounded_Var_Size_Arg_10;
    }
  }
}

TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_TYPECODE_Test_Bounded_Var_Size_Arg_GUARD */

static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_Test_Bounded_Var_Size_Arg (
    ::CORBA::tk_alias,
    "IDL:Test/Bounded_Var_Size_Arg:1.0",
    "Bounded_Var_Size_Arg",
    &TAO::TypeCode::tc_Test_Bounded_Var_Size_Arg_10);


namespace Test
{
  ::CORBA::TypeCode_ptr const _tc_Bounded_Var_Size_Arg =
    &_tao_tc_Test_Bounded_Var_Size_Arg;
}

// TAO_IDL - Generated from
// be/be_visitor_sequence/sequence_cs.cpp:70

#if !defined (_TEST_UNBOUNDED_VAR_SIZE_ARG_CS_)
#define _TEST_UNBOUNDED_VAR_SIZE_ARG_CS_

Test::Unbounded_Var_Size_Arg::Unbounded_Var_Size_Arg (void)
{}

Test::Unbounded_Var_Size_Arg::Unbounded_Var_Size_Arg (
    ::CORBA::ULong max)
  : ::TAO::unbounded_value_sequence<
        ::CORBA::Char
      > (max)
{}

Test::Unbounded_Var_Size_Arg::Unbounded_Var_Size_Arg (
    ::CORBA::ULong max,
    ::CORBA::ULong length,
    ::CORBA::Char * buffer,
    ::CORBA::Boolean release
  )
  : ::TAO::unbounded_value_sequence<
        ::CORBA::Char
      >
    (max, length, buffer, release)
{}

Test::Unbounded_Var_Size_Arg::Unbounded_Var_Size_Arg (
    const Unbounded_Var_Size_Arg &seq)
  : ::TAO::unbounded_value_sequence<
        ::CORBA::Char
      > (seq)
{}

Test::Unbounded_Var_Size_Arg::~Unbounded_Var_Size_Arg (void)
{}

void Test::Unbounded_Var_Size_Arg::_tao_any_destructor (
    void * _tao_void_pointer)
{
  Unbounded_Var_Size_Arg * _tao_tmp_pointer =
    static_cast<Unbounded_Var_Size_Arg *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

#endif /* end #if !defined */

// TAO_IDL - Generated from
// be/be_visitor_typecode/alias_typecode.cpp:49



// TAO_IDL - Generated from
// be/be_visitor_typecode/typecode_defn.cpp:461


#ifndef _TAO_TYPECODE_Test_Unbounded_Var_Size_Arg_GUARD
#define _TAO_TYPECODE_Test_Unbounded_Var_Size_Arg_GUARD

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

namespace TAO
{
  namespace TypeCode
  {
    namespace
    {
      TAO::TypeCode::Sequence< ::CORBA::TypeCode_ptr const *,
                              TAO::Null_RefCount_Policy>
        Test_Unbounded_Var_Size_Arg_0 (
          ::CORBA::tk_sequence,
          &CORBA::_tc_char,
          0U);

      ::CORBA::TypeCode_ptr const tc_Test_Unbounded_Var_Size_Arg_0 =
        &Test_Unbounded_Var_Size_Arg_0;
    }
  }
}

TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_TYPECODE_Test_Unbounded_Var_Size_Arg_GUARD */

static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_Test_Unbounded_Var_Size_Arg (
    ::CORBA::tk_alias,
    "IDL:Test/Unbounded_Var_Size_Arg:1.0",
    "Unbounded_Var_Size_Arg",
    &TAO::TypeCode::tc_Test_Unbounded_Var_Size_Arg_0);


namespace Test
{
  ::CORBA::TypeCode_ptr const _tc_Unbounded_Var_Size_Arg =
    &_tao_tc_Test_Unbounded_Var_Size_Arg;
}

// TAO_IDL - Generated from
// be/be_visitor_array/array_cs.cpp:94

Test::Fixed_Array_slice *
Test::Fixed_Array_dup (const Test::Fixed_Array_slice *_tao_src_array)
{
  Test::Fixed_Array_slice *_tao_dup_array =
    Test::Fixed_Array_alloc ();

  if (!_tao_dup_array)
    {
      return static_cast <Test::Fixed_Array_slice *> (0);
    }

  Test::Fixed_Array_copy (_tao_dup_array, _tao_src_array);
  return _tao_dup_array;
}

Test::Fixed_Array_slice *
Test::Fixed_Array_alloc (void)
{
  Test::Fixed_Array_slice *retval = 0;
  ACE_NEW_RETURN (retval, ::CORBA::Long[10], 0);
  return retval;
}

void
Test::Fixed_Array_free (
    Test::Fixed_Array_slice *_tao_slice)
{
  delete [] _tao_slice;
}

void
Test::Fixed_Array_copy (
    Test::Fixed_Array_slice * _tao_to,
    const Test::Fixed_Array_slice *_tao_from)
{
  // Copy each individual element.
  for ( ::CORBA::ULong i0 = 0; i0 < 10; ++i0)
    {
      _tao_to[i0] = _tao_from[i0];
    }
}

// TAO_IDL - Generated from
// be/be_visitor_typecode/alias_typecode.cpp:49



// TAO_IDL - Generated from
// be/be_visitor_typecode/typecode_defn.cpp:298


#ifndef _TAO_TYPECODE_Test_Fixed_Array_GUARD
#define _TAO_TYPECODE_Test_Fixed_Array_GUARD

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

namespace TAO
{
  namespace TypeCode
  {
    namespace
    {
      TAO::TypeCode::Sequence< ::CORBA::TypeCode_ptr const *,
                              TAO::Null_RefCount_Policy>
        Test_Fixed_Array_10 (
          ::CORBA::tk_array,
          &CORBA::_tc_long,
          10U);

      ::CORBA::TypeCode_ptr const tc_Test_Fixed_Array =
        &Test_Fixed_Array_10;
    }
  }
}

TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_TYPECODE_Test_Fixed_Array_GUARD */
static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_Test_Fixed_Array (
    ::CORBA::tk_alias,
    "IDL:Test/Fixed_Array:1.0",
    "Fixed_Array",
    &TAO::TypeCode::tc_Test_Fixed_Array);


namespace Test
{
  ::CORBA::TypeCode_ptr const _tc_Fixed_Array =
    &_tao_tc_Test_Fixed_Array;
}

// TAO_IDL - Generated from
// be/be_visitor_array/array_cs.cpp:94

Test::Var_Array_slice *
Test::Var_Array_dup (const Test::Var_Array_slice *_tao_src_array)
{
  Test::Var_Array_slice *_tao_dup_array =
    Test::Var_Array_alloc ();

  if (!_tao_dup_array)
    {
      return static_cast <Test::Var_Array_slice *> (0);
    }

  Test::Var_Array_copy (_tao_dup_array, _tao_src_array);
  return _tao_dup_array;
}

Test::Var_Array_slice *
Test::Var_Array_alloc (void)
{
  Test::Var_Array_slice *retval = 0;
  ACE_NEW_RETURN (retval, ::TAO::String_Manager[3], 0);
  return retval;
}

void
Test::Var_Array_free (
    Test::Var_Array_slice *_tao_slice)
{
  delete [] _tao_slice;
}

void
Test::Var_Array_copy (
    Test::Var_Array_slice * _tao_to,
    const Test::Var_Array_slice *_tao_from)
{
  // Copy each individual element.
  for ( ::CORBA::ULong i0 = 0; i0 < 3; ++i0)
    {
      _tao_to[i0] = _tao_from[i0];
    }
}

// TAO_IDL - Generated from
// be/be_visitor_typecode/alias_typecode.cpp:49



// TAO_IDL - Generated from
// be/be_visitor_typecode/typecode_defn.cpp:298


#ifndef _TAO_TYPECODE_Test_Var_Array_GUARD
#define _TAO_TYPECODE_Test_Var_Array_GUARD

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

namespace TAO
{
  namespace TypeCode
  {
    namespace
    {
      TAO::TypeCode::Sequence< ::CORBA::TypeCode_ptr const *,
                              TAO::Null_RefCount_Policy>
        Test_Var_Array_3 (
          ::CORBA::tk_array,
          &CORBA::_tc_string,
          3U);

      ::CORBA::TypeCode_ptr const tc_Test_Var_Array =
        &Test_Var_Array_3;
    }
  }
}

TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_TYPECODE_Test_Var_Array_GUARD */
static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_Test_Var_Array (
    ::CORBA::tk_alias,
    "IDL:Test/Var_Array:1.0",
    "Var_Array",
    &TAO::TypeCode::tc_Test_Var_Array);


namespace Test
{
  ::CORBA::TypeCode_ptr const _tc_Var_Array =
    &_tao_tc_Test_Var_Array;
}

// TAO_IDL - Generated from
// be/be_visitor_typecode/alias_typecode.cpp:49



// TAO_IDL - Generated from
// be/be_visitor_typecode/typecode_defn.cpp:556


#ifndef _TAO_TYPECODE_CORBA_STRING_10_GUARD
#define _TAO_TYPECODE_CORBA_STRING_10_GUARD

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

namespace TAO
{
  namespace TypeCode
  {
    namespace
    {
      TAO::TypeCode::String<TAO::Null_RefCount_Policy>
        CORBA_STRING_10 (
          ::CORBA::tk_string,
          10U);

      ::CORBA::TypeCode_ptr const tc_CORBA_STRING_10 =
        &CORBA_STRING_10;
    }
  }
}

TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_TYPECODE_CORBA_STRING_10_GUARD */

static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_Test_Bounded_String (
    ::CORBA::tk_alias,
    "IDL:Test/Bounded_String:1.0",
    "Bounded_String",
    &TAO::TypeCode::tc_CORBA_STRING_10);


namespace Test
{
  ::CORBA::TypeCode_ptr const _tc_Bounded_String =
    &_tao_tc_Test_Bounded_String;
}

// TAO_IDL - Generated from
// be/be_visitor_typecode/struct_typecode.cpp:86

static TAO::TypeCode::Struct_Field<
  char const *,
  ::CORBA::TypeCode_ptr const *> const
    _tao_fields_Test_TimeOfDay[] =
      {
        { "hour", &CORBA::_tc_short },
        { "minute", &CORBA::_tc_short },
        { "second", &CORBA::_tc_short }
      };

static TAO::TypeCode::Struct<
  char const *,
  ::CORBA::TypeCode_ptr const *,
  TAO::TypeCode::Struct_Field<
    char const *,
    ::CORBA::TypeCode_ptr const *> const *,
  TAO::Null_RefCount_Policy>
_tao_tc_Test_TimeOfDay (
  ::CORBA::tk_struct,
  "IDL:Test/TimeOfDay:1.0",
  "TimeOfDay",
  _tao_fields_Test_TimeOfDay,
  3);


namespace Test
{
  ::CORBA::TypeCode_ptr const _tc_TimeOfDay =
    &_tao_tc_Test_TimeOfDay;
}

// TAO_IDL - Generated from
// be/be_visitor_structure/structure_cs.cpp:56

void
Test::TimeOfDay::_tao_any_destructor (
    void *_tao_void_pointer)
{
  TimeOfDay *_tao_tmp_pointer =
    static_cast<TimeOfDay *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

// TAO_IDL - Generated from
// be/be_visitor_interface/interface_cs.cpp:48

// Traits specializations for Test::Simple_Test.

Test::Simple_Test_ptr
TAO::Objref_Traits<Test::Simple_Test>::duplicate (
    Test::Simple_Test_ptr p)
{
  return Test::Simple_Test::_duplicate (p);
}

void
TAO::Objref_Traits<Test::Simple_Test>::release (
    Test::Simple_Test_ptr p)
{
  ::CORBA::release (p);
}

Test::Simple_Test_ptr
TAO::Objref_Traits<Test::Simple_Test>::nil (void)
{
  return Test::Simple_Test::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<Test::Simple_Test>::marshal (
    const Test::Simple_Test_ptr p,
    TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:88

void
Test::Simple_Test::test_method (
  ::CORBA::ULong & error_count)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }

  TAO::Arg_Traits< void>::ret_val _tao_retval;
  TAO::Arg_Traits< ::CORBA::ULong>::inout_arg_val _tao_error_count (error_count);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_error_count
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      2,
      "test_method",
      11,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY

    );

  _tao_call.invoke (0, 0);
}

Test::Simple_Test::Simple_Test (void)
{
}

Test::Simple_Test::~Simple_Test (void)
{
}

void
Test::Simple_Test::_tao_any_destructor (void *_tao_void_pointer)
{
  Simple_Test *_tao_tmp_pointer =
    static_cast<Simple_Test *> (_tao_void_pointer);
  ::CORBA::release (_tao_tmp_pointer);
}

Test::Simple_Test_ptr
Test::Simple_Test::_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return
    TAO::Narrow_Utils<Simple_Test>::narrow (
        _tao_objref,
        "IDL:Test/Simple_Test:1.0");
}

Test::Simple_Test_ptr
Test::Simple_Test::_unchecked_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return
    TAO::Narrow_Utils<Simple_Test>::unchecked_narrow (
        _tao_objref);
}

Test::Simple_Test_ptr
Test::Simple_Test::_nil (void)
{
  return 0;
}

Test::Simple_Test_ptr
Test::Simple_Test::_duplicate (Simple_Test_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  return obj;
}

void
Test::Simple_Test::_tao_release (Simple_Test_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
Test::Simple_Test::_is_a (const char *value)
{
  if (
      ACE_OS::strcmp (
          value,
          "IDL:Test/Simple_Test:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        ) == 0
    )
    {
      return true; // success using local knowledge
    }
  else
    {
      return this->::CORBA::Object::_is_a (value);
    }
}

const char* Test::Simple_Test::_interface_repository_id (void) const
{
  return "IDL:Test/Simple_Test:1.0";
}

::CORBA::Boolean
Test::Simple_Test::marshal (TAO_OutputCDR &cdr)
{
  return (cdr << this);
}

// TAO_IDL - Generated from
// be/be_visitor_typecode/objref_typecode.cpp:70

static TAO::TypeCode::Objref<char const *,
                             TAO::Null_RefCount_Policy>
  _tao_tc_Test_Simple_Test (
    ::CORBA::tk_objref,
    "IDL:Test/Simple_Test:1.0",
    "Simple_Test");


namespace Test
{
  ::CORBA::TypeCode_ptr const _tc_Simple_Test =
    &_tao_tc_Test_Simple_Test;
}

// TAO_IDL - Generated from
// be/be_visitor_interface/interface_cs.cpp:48

// Traits specializations for Test::Hello.

Test::Hello_ptr
TAO::Objref_Traits<Test::Hello>::duplicate (
    Test::Hello_ptr p)
{
  return Test::Hello::_duplicate (p);
}

void
TAO::Objref_Traits<Test::Hello>::release (
    Test::Hello_ptr p)
{
  ::CORBA::release (p);
}

Test::Hello_ptr
TAO::Objref_Traits<Test::Hello>::nil (void)
{
  return Test::Hello::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<Test::Hello>::marshal (
    const Test::Hello_ptr p,
    TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:88

void
Test::Hello::test_basic_arg (
  ::CORBA::Long value)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }

  TAO::Arg_Traits< void>::ret_val _tao_retval;
  TAO::Arg_Traits< ::CORBA::Long>::in_arg_val _tao_value (value);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_value
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      2,
      "test_basic_arg",
      14,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY,
      TAO::TAO_ONEWAY_INVOCATION

    );

  _tao_call.invoke (0, 0);
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:88

void
Test::Hello::test_unbounded_string_arg (
  const char * message)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }

  TAO::Arg_Traits< void>::ret_val _tao_retval;
  TAO::Arg_Traits< char *>::in_arg_val _tao_message (message);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_message
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      2,
      "test_unbounded_string_arg",
      25,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY,
      TAO::TAO_ONEWAY_INVOCATION

    );

  _tao_call.invoke (0, 0);
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:88

void
Test::Hello::test_bounded_string_arg (
  const char * message)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }

  TAO::Arg_Traits< void>::ret_val _tao_retval;
  TAO::Arg_Traits< ::TAO::Bounded_String_10>::in_arg_val _tao_message (message);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_message
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      2,
      "test_bounded_string_arg",
      23,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY,
      TAO::TAO_ONEWAY_INVOCATION

    );

  _tao_call.invoke (0, 0);
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:88

void
Test::Hello::test_fixed_array_arg (
  const ::Test::Fixed_Array message)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }

  TAO::Arg_Traits< void>::ret_val _tao_retval;
  TAO::Arg_Traits< ::Test::Fixed_Array_tag>::in_arg_val _tao_message (message);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_message
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      2,
      "test_fixed_array_arg",
      20,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY,
      TAO::TAO_ONEWAY_INVOCATION

    );

  _tao_call.invoke (0, 0);
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:88

void
Test::Hello::test_var_array_arg (
  const ::Test::Var_Array messages)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }

  TAO::Arg_Traits< void>::ret_val _tao_retval;
  TAO::Arg_Traits< ::Test::Var_Array_tag>::in_arg_val _tao_messages (messages);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_messages
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      2,
      "test_var_array_arg",
      18,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY,
      TAO::TAO_ONEWAY_INVOCATION

    );

  _tao_call.invoke (0, 0);
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:88

void
Test::Hello::test_bounded_var_size_arg (
  const ::Test::Bounded_Var_Size_Arg & message)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }

  TAO::Arg_Traits< void>::ret_val _tao_retval;
  TAO::Arg_Traits< ::Test::Bounded_Var_Size_Arg>::in_arg_val _tao_message (message);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_message
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      2,
      "test_bounded_var_size_arg",
      25,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY,
      TAO::TAO_ONEWAY_INVOCATION

    );

  _tao_call.invoke (0, 0);
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:88

void
Test::Hello::test_unbounded_var_size_arg (
  const ::Test::Unbounded_Var_Size_Arg & message)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }

  TAO::Arg_Traits< void>::ret_val _tao_retval;
  TAO::Arg_Traits< ::Test::Unbounded_Var_Size_Arg>::in_arg_val _tao_message (message);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_message
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      2,
      "test_unbounded_var_size_arg",
      27,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY,
      TAO::TAO_ONEWAY_INVOCATION

    );

  _tao_call.invoke (0, 0);
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:88

void
Test::Hello::test_fixed_size_arg (
  const ::Test::TimeOfDay & t)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }

  TAO::Arg_Traits< void>::ret_val _tao_retval;
  TAO::Arg_Traits< ::Test::TimeOfDay>::in_arg_val _tao_t (t);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_t
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      2,
      "test_fixed_size_arg",
      19,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY,
      TAO::TAO_ONEWAY_INVOCATION

    );

  _tao_call.invoke (0, 0);
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:88

void
Test::Hello::test_special_basic_arg (
  ::CORBA::Char value)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }

  TAO::Arg_Traits< void>::ret_val _tao_retval;
  TAO::Arg_Traits< ::ACE_InputCDR::to_char>::in_arg_val _tao_value (value);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_value
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      2,
      "test_special_basic_arg",
      22,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY,
      TAO::TAO_ONEWAY_INVOCATION

    );

  _tao_call.invoke (0, 0);
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:88

void
Test::Hello::test_objref_arg (
  ::Test::Simple_Test_ptr test)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }

  TAO::Arg_Traits< void>::ret_val _tao_retval;
  TAO::Arg_Traits< ::Test::Simple_Test>::in_arg_val _tao_test (test);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_test
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      2,
      "test_objref_arg",
      15,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY,
      TAO::TAO_ONEWAY_INVOCATION

    );

  _tao_call.invoke (0, 0);
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:88

void
Test::Hello::test_object_arg (
  ::CORBA::Object_ptr o)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }

  TAO::Arg_Traits< void>::ret_val _tao_retval;
  TAO::Arg_Traits< ::CORBA::Object>::in_arg_val _tao_o (o);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_o
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      2,
      "test_object_arg",
      15,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY,
      TAO::TAO_ONEWAY_INVOCATION

    );

  _tao_call.invoke (0, 0);
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:88

void
Test::Hello::test_args_1 (
  ::CORBA::Object_ptr arg1,
  ::CORBA::Char arg2,
  ::Test::Simple_Test_ptr arg3)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }

  TAO::Arg_Traits< void>::ret_val _tao_retval;
  TAO::Arg_Traits< ::CORBA::Object>::in_arg_val _tao_arg1 (arg1);
  TAO::Arg_Traits< ::ACE_InputCDR::to_char>::in_arg_val _tao_arg2 (arg2);
  TAO::Arg_Traits< ::Test::Simple_Test>::in_arg_val _tao_arg3 (arg3);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_arg1,
      &_tao_arg2,
      &_tao_arg3
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      4,
      "test_args_1",
      11,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY,
      TAO::TAO_ONEWAY_INVOCATION

    );

  _tao_call.invoke (0, 0);
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:88

void
Test::Hello::test_args_2 (
  const char * arg1,
  const ::Test::Fixed_Array arg2,
  const ::Test::TimeOfDay & arg3)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }

  TAO::Arg_Traits< void>::ret_val _tao_retval;
  TAO::Arg_Traits< char *>::in_arg_val _tao_arg1 (arg1);
  TAO::Arg_Traits< ::Test::Fixed_Array_tag>::in_arg_val _tao_arg2 (arg2);
  TAO::Arg_Traits< ::Test::TimeOfDay>::in_arg_val _tao_arg3 (arg3);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_arg1,
      &_tao_arg2,
      &_tao_arg3
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      4,
      "test_args_2",
      11,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY,
      TAO::TAO_ONEWAY_INVOCATION

    );

  _tao_call.invoke (0, 0);
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:88

void
Test::Hello::test_args_3 (
  const char * arg1,
  const ::Test::Bounded_Var_Size_Arg & arg2,
  const ::Test::Unbounded_Var_Size_Arg & arg3,
  const ::Test::Var_Array arg4)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }

  TAO::Arg_Traits< void>::ret_val _tao_retval;
  TAO::Arg_Traits< ::TAO::Bounded_String_10>::in_arg_val _tao_arg1 (arg1);
  TAO::Arg_Traits< ::Test::Bounded_Var_Size_Arg>::in_arg_val _tao_arg2 (arg2);
  TAO::Arg_Traits< ::Test::Unbounded_Var_Size_Arg>::in_arg_val _tao_arg3 (arg3);
  TAO::Arg_Traits< ::Test::Var_Array_tag>::in_arg_val _tao_arg4 (arg4);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_arg1,
      &_tao_arg2,
      &_tao_arg3,
      &_tao_arg4
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      5,
      "test_args_3",
      11,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY,
      TAO::TAO_ONEWAY_INVOCATION

    );

  _tao_call.invoke (0, 0);
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:88

char *
Test::Hello::get_string (
  void)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }

  TAO::Arg_Traits< char *>::ret_val _tao_retval;

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      1,
      "get_string",
      10,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY,
      TAO::TAO_TWOWAY_INVOCATION
      ,
      TAO::TAO_SYNCHRONOUS_INVOCATION,
      false
    );

  _tao_call.invoke (0, 0);

  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:88

void
Test::Hello::shutdown (
  void)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }

  TAO::Arg_Traits< void>::ret_val _tao_retval;

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      1,
      "shutdown",
      8,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY,
      TAO::TAO_ONEWAY_INVOCATION,
      TAO::TAO_SYNCHRONOUS_INVOCATION,
      false
    );

  _tao_call.invoke (0, 0);
}

Test::Hello::Hello (void)
{
}

Test::Hello::~Hello (void)
{
}

void
Test::Hello::_tao_any_destructor (void *_tao_void_pointer)
{
  Hello *_tao_tmp_pointer =
    static_cast<Hello *> (_tao_void_pointer);
  ::CORBA::release (_tao_tmp_pointer);
}

Test::Hello_ptr
Test::Hello::_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return
    TAO::Narrow_Utils<Hello>::narrow (
        _tao_objref,
        "IDL:Test/Hello:1.0");
}

Test::Hello_ptr
Test::Hello::_unchecked_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return
    TAO::Narrow_Utils<Hello>::unchecked_narrow (
        _tao_objref);
}

Test::Hello_ptr
Test::Hello::_nil (void)
{
  return 0;
}

Test::Hello_ptr
Test::Hello::_duplicate (Hello_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  return obj;
}

void
Test::Hello::_tao_release (Hello_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
Test::Hello::_is_a (const char *value)
{
  if (
      ACE_OS::strcmp (
          value,
          "IDL:Test/Hello:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        ) == 0
    )
    {
      return true; // success using local knowledge
    }
  else
    {
      return this->::CORBA::Object::_is_a (value);
    }
}

const char* Test::Hello::_interface_repository_id (void) const
{
  return "IDL:Test/Hello:1.0";
}

::CORBA::Boolean
Test::Hello::marshal (TAO_OutputCDR &cdr)
{
  return (cdr << this);
}

// TAO_IDL - Generated from
// be/be_visitor_typecode/objref_typecode.cpp:70

static TAO::TypeCode::Objref<char const *,
                             TAO::Null_RefCount_Policy>
  _tao_tc_Test_Hello (
    ::CORBA::tk_objref,
    "IDL:Test/Hello:1.0",
    "Hello");


namespace Test
{
  ::CORBA::TypeCode_ptr const _tc_Hello =
    &_tao_tc_Test_Hello;
}

// TAO_IDL - Generated from
// be/be_visitor_sequence/any_op_cs.cpp:45


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


TAO_END_VERSIONED_NAMESPACE_DECL



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace Test
{

  // Copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      const ::Test::Bounded_Var_Size_Arg &_tao_elem
    )
  {
    TAO::Any_Dual_Impl_T< ::Test::Bounded_Var_Size_Arg>::insert_copy (
        _tao_any,
        ::Test::Bounded_Var_Size_Arg::_tao_any_destructor,
        ::Test::_tc_Bounded_Var_Size_Arg,
        _tao_elem
      );
}

// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    ::Test::Bounded_Var_Size_Arg *_tao_elem)
{
  TAO::Any_Dual_Impl_T< ::Test::Bounded_Var_Size_Arg>::insert (
      _tao_any,
      ::Test::Bounded_Var_Size_Arg::_tao_any_destructor,
      ::Test::_tc_Bounded_Var_Size_Arg,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    ::Test::Bounded_Var_Size_Arg *&_tao_elem)
{
  return _tao_any >>= const_cast<
      const ::Test::Bounded_Var_Size_Arg *&> (
      _tao_elem
    );
}

// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const ::Test::Bounded_Var_Size_Arg *&_tao_elem)
{
  return
    TAO::Any_Dual_Impl_T< ::Test::Bounded_Var_Size_Arg>::extract (
        _tao_any,
        ::Test::Bounded_Var_Size_Arg::_tao_any_destructor,
        ::Test::_tc_Bounded_Var_Size_Arg,
        _tao_elem
      );
}
}

#else


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


// Copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    const Test::Bounded_Var_Size_Arg &_tao_elem)
{
  TAO::Any_Dual_Impl_T<Test::Bounded_Var_Size_Arg>::insert_copy (
      _tao_any,
      Test::Bounded_Var_Size_Arg::_tao_any_destructor,
      Test::_tc_Bounded_Var_Size_Arg,
      _tao_elem
    );
}

// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    Test::Bounded_Var_Size_Arg *_tao_elem)
{
  TAO::Any_Dual_Impl_T<Test::Bounded_Var_Size_Arg>::insert (
      _tao_any,
      Test::Bounded_Var_Size_Arg::_tao_any_destructor,
      Test::_tc_Bounded_Var_Size_Arg,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    Test::Bounded_Var_Size_Arg *&_tao_elem)
{
  return _tao_any >>= const_cast<
      const Test::Bounded_Var_Size_Arg *&> (
      _tao_elem
    );
}

// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const Test::Bounded_Var_Size_Arg *&_tao_elem)
{
  return
    TAO::Any_Dual_Impl_T<Test::Bounded_Var_Size_Arg>::extract (
        _tao_any,
        Test::Bounded_Var_Size_Arg::_tao_any_destructor,
        Test::_tc_Bounded_Var_Size_Arg,
        _tao_elem);
}
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_sequence/any_op_cs.cpp:45


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


TAO_END_VERSIONED_NAMESPACE_DECL



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace Test
{

  // Copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      const ::Test::Unbounded_Var_Size_Arg &_tao_elem
    )
  {
    TAO::Any_Dual_Impl_T< ::Test::Unbounded_Var_Size_Arg>::insert_copy (
        _tao_any,
        ::Test::Unbounded_Var_Size_Arg::_tao_any_destructor,
        ::Test::_tc_Unbounded_Var_Size_Arg,
        _tao_elem
      );
}

// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    ::Test::Unbounded_Var_Size_Arg *_tao_elem)
{
  TAO::Any_Dual_Impl_T< ::Test::Unbounded_Var_Size_Arg>::insert (
      _tao_any,
      ::Test::Unbounded_Var_Size_Arg::_tao_any_destructor,
      ::Test::_tc_Unbounded_Var_Size_Arg,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    ::Test::Unbounded_Var_Size_Arg *&_tao_elem)
{
  return _tao_any >>= const_cast<
      const ::Test::Unbounded_Var_Size_Arg *&> (
      _tao_elem
    );
}

// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const ::Test::Unbounded_Var_Size_Arg *&_tao_elem)
{
  return
    TAO::Any_Dual_Impl_T< ::Test::Unbounded_Var_Size_Arg>::extract (
        _tao_any,
        ::Test::Unbounded_Var_Size_Arg::_tao_any_destructor,
        ::Test::_tc_Unbounded_Var_Size_Arg,
        _tao_elem
      );
}
}

#else


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


// Copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    const Test::Unbounded_Var_Size_Arg &_tao_elem)
{
  TAO::Any_Dual_Impl_T<Test::Unbounded_Var_Size_Arg>::insert_copy (
      _tao_any,
      Test::Unbounded_Var_Size_Arg::_tao_any_destructor,
      Test::_tc_Unbounded_Var_Size_Arg,
      _tao_elem
    );
}

// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    Test::Unbounded_Var_Size_Arg *_tao_elem)
{
  TAO::Any_Dual_Impl_T<Test::Unbounded_Var_Size_Arg>::insert (
      _tao_any,
      Test::Unbounded_Var_Size_Arg::_tao_any_destructor,
      Test::_tc_Unbounded_Var_Size_Arg,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    Test::Unbounded_Var_Size_Arg *&_tao_elem)
{
  return _tao_any >>= const_cast<
      const Test::Unbounded_Var_Size_Arg *&> (
      _tao_elem
    );
}

// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const Test::Unbounded_Var_Size_Arg *&_tao_elem)
{
  return
    TAO::Any_Dual_Impl_T<Test::Unbounded_Var_Size_Arg>::extract (
        _tao_any,
        Test::Unbounded_Var_Size_Arg::_tao_any_destructor,
        Test::_tc_Unbounded_Var_Size_Arg,
        _tao_elem);
}
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_array/any_op_cs.cpp:37


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

void operator<<= (
    ::CORBA::Any &_tao_any,
    const Test::Fixed_Array_forany &_tao_elem
  )
{
  TAO::Any_Array_Impl_T<
      Test::Fixed_Array_slice,
      Test::Fixed_Array_forany
    >::insert (
        _tao_any,
        Test::Fixed_Array_forany::_tao_any_destructor,
        Test::_tc_Fixed_Array,
        _tao_elem.nocopy ()
          ? _tao_elem.ptr ()
          : Test::Fixed_Array_dup (_tao_elem.in ())
      );
}

::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    Test::Fixed_Array_forany &_tao_elem
  )
{
  return
    TAO::Any_Array_Impl_T<
        Test::Fixed_Array_slice,
        Test::Fixed_Array_forany
      >::extract (
          _tao_any,
          Test::Fixed_Array_forany::_tao_any_destructor,
          Test::_tc_Fixed_Array,
          _tao_elem.out ()
        );
}
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_array/any_op_cs.cpp:37


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

void operator<<= (
    ::CORBA::Any &_tao_any,
    const Test::Var_Array_forany &_tao_elem
  )
{
  TAO::Any_Array_Impl_T<
      Test::Var_Array_slice,
      Test::Var_Array_forany
    >::insert (
        _tao_any,
        Test::Var_Array_forany::_tao_any_destructor,
        Test::_tc_Var_Array,
        _tao_elem.nocopy ()
          ? _tao_elem.ptr ()
          : Test::Var_Array_dup (_tao_elem.in ())
      );
}

::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    Test::Var_Array_forany &_tao_elem
  )
{
  return
    TAO::Any_Array_Impl_T<
        Test::Var_Array_slice,
        Test::Var_Array_forany
      >::extract (
          _tao_any,
          Test::Var_Array_forany::_tao_any_destructor,
          Test::_tc_Var_Array,
          _tao_elem.out ()
        );
}
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_structure/any_op_cs.cpp:43



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace Test
{
  /// Copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      const ::Test::TimeOfDay &_tao_elem)
  {
    TAO::Any_Dual_Impl_T< ::Test::TimeOfDay>::insert_copy (
        _tao_any,
        ::Test::TimeOfDay::_tao_any_destructor,
        ::Test::_tc_TimeOfDay,
        _tao_elem);
}

/// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any, ::
    Test::TimeOfDay *_tao_elem)
{
  TAO::Any_Dual_Impl_T< ::Test::TimeOfDay>::insert (
      _tao_any,
      ::Test::TimeOfDay::_tao_any_destructor,
      ::Test::_tc_TimeOfDay,
      _tao_elem);
}

/// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    ::Test::TimeOfDay *&_tao_elem)
{
  return _tao_any >>= const_cast<
      const ::Test::TimeOfDay *&> (
      _tao_elem);
}

/// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const ::Test::TimeOfDay *&_tao_elem)
{
  return
    TAO::Any_Dual_Impl_T< ::Test::TimeOfDay>::extract (
        _tao_any,
        ::Test::TimeOfDay::_tao_any_destructor,
        ::Test::_tc_TimeOfDay,
        _tao_elem
      );
}
}

#else

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

/// Copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  const Test::TimeOfDay &_tao_elem)
{
  TAO::Any_Dual_Impl_T<Test::TimeOfDay>::insert_copy (
    _tao_any,
    Test::TimeOfDay::_tao_any_destructor,
    Test::_tc_TimeOfDay,
    _tao_elem);
}

/// Non-copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  Test::TimeOfDay *_tao_elem)
{
  TAO::Any_Dual_Impl_T<Test::TimeOfDay>::insert (
    _tao_any,
    Test::TimeOfDay::_tao_any_destructor,
    Test::_tc_TimeOfDay,
    _tao_elem);
}

/// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
  const ::CORBA::Any &_tao_any,
  Test::TimeOfDay *&_tao_elem)
{
  return _tao_any >>= const_cast<
      const Test::TimeOfDay *&> (
      _tao_elem);
}

/// Extraction to const pointer.
::CORBA::Boolean operator>>= (
  const ::CORBA::Any &_tao_any,
  const Test::TimeOfDay *&_tao_elem)
{
  return
    TAO::Any_Dual_Impl_T<Test::TimeOfDay>::extract (
      _tao_any,
      Test::TimeOfDay::_tao_any_destructor,
      Test::_tc_TimeOfDay,
      _tao_elem);
}
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_interface/any_op_cs.cpp:38
TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<Test::Simple_Test>::to_object (
      ::CORBA::Object_ptr &_tao_elem) const
  {
    _tao_elem = ::CORBA::Object::_duplicate (this->value_);
    return true;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace Test
{


  /// Copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      Simple_Test_ptr _tao_elem)
  {
    Simple_Test_ptr _tao_objptr =
      Simple_Test::_duplicate (_tao_elem);
    _tao_any <<= &_tao_objptr;
  }

  /// Non-copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      Simple_Test_ptr *_tao_elem)
  {
    TAO::Any_Impl_T<Simple_Test>::insert (
        _tao_any,
        Simple_Test::_tao_any_destructor,
        _tc_Simple_Test,
        *_tao_elem);
  }

  ::CORBA::Boolean
  operator>>= (
      const ::CORBA::Any &_tao_any,
      Simple_Test_ptr &_tao_elem)
  {
    return
      TAO::Any_Impl_T<Simple_Test>::extract (
          _tao_any,
          Simple_Test::_tao_any_destructor,
          _tc_Simple_Test,
          _tao_elem);
  }
}

#else

TAO_BEGIN_VERSIONED_NAMESPACE_DECL



/// Copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    Test::Simple_Test_ptr _tao_elem)
{
  Test::Simple_Test_ptr _tao_objptr =
    Test::Simple_Test::_duplicate (_tao_elem);
  _tao_any <<= &_tao_objptr;
}

/// Non-copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    Test::Simple_Test_ptr *_tao_elem)
{
  TAO::Any_Impl_T<Test::Simple_Test>::insert (
      _tao_any,
      Test::Simple_Test::_tao_any_destructor,
      Test::_tc_Simple_Test,
      *_tao_elem);
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    Test::Simple_Test_ptr &_tao_elem)
{
  return
    TAO::Any_Impl_T<Test::Simple_Test>::extract (
        _tao_any,
        Test::Simple_Test::_tao_any_destructor,
        Test::_tc_Simple_Test,
        _tao_elem);
}

TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_interface/any_op_cs.cpp:38
TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<Test::Hello>::to_object (
      ::CORBA::Object_ptr &_tao_elem) const
  {
    _tao_elem = ::CORBA::Object::_duplicate (this->value_);
    return true;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace Test
{


  /// Copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      Hello_ptr _tao_elem)
  {
    Hello_ptr _tao_objptr =
      Hello::_duplicate (_tao_elem);
    _tao_any <<= &_tao_objptr;
  }

  /// Non-copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      Hello_ptr *_tao_elem)
  {
    TAO::Any_Impl_T<Hello>::insert (
        _tao_any,
        Hello::_tao_any_destructor,
        _tc_Hello,
        *_tao_elem);
  }

  ::CORBA::Boolean
  operator>>= (
      const ::CORBA::Any &_tao_any,
      Hello_ptr &_tao_elem)
  {
    return
      TAO::Any_Impl_T<Hello>::extract (
          _tao_any,
          Hello::_tao_any_destructor,
          _tc_Hello,
          _tao_elem);
  }
}

#else

TAO_BEGIN_VERSIONED_NAMESPACE_DECL



/// Copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    Test::Hello_ptr _tao_elem)
{
  Test::Hello_ptr _tao_objptr =
    Test::Hello::_duplicate (_tao_elem);
  _tao_any <<= &_tao_objptr;
}

/// Non-copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    Test::Hello_ptr *_tao_elem)
{
  TAO::Any_Impl_T<Test::Hello>::insert (
      _tao_any,
      Test::Hello::_tao_any_destructor,
      Test::_tc_Hello,
      *_tao_elem);
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    Test::Hello_ptr &_tao_elem)
{
  return
    TAO::Any_Impl_T<Test::Hello>::extract (
        _tao_any,
        Test::Hello::_tao_any_destructor,
        Test::_tc_Hello,
        _tao_elem);
}

TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_sequence/cdr_op_cs.cpp:93
#if !defined _TAO_CDR_OP_Test_Bounded_Var_Size_Arg_CPP_
#define _TAO_CDR_OP_Test_Bounded_Var_Size_Arg_CPP_

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Test::Bounded_Var_Size_Arg &_tao_sequence)
{
  return TAO::marshal_sequence(strm, _tao_sequence);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Test::Bounded_Var_Size_Arg &_tao_sequence)
{
  return TAO::demarshal_sequence(strm, _tao_sequence);
}


TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_CDR_OP_Test_Bounded_Var_Size_Arg_CPP_ */

// TAO_IDL - Generated from
// be/be_visitor_sequence/cdr_op_cs.cpp:93
#if !defined _TAO_CDR_OP_Test_Unbounded_Var_Size_Arg_CPP_
#define _TAO_CDR_OP_Test_Unbounded_Var_Size_Arg_CPP_

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Test::Unbounded_Var_Size_Arg &_tao_sequence)
{
  return TAO::marshal_sequence(strm, _tao_sequence);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Test::Unbounded_Var_Size_Arg &_tao_sequence)
{
  return TAO::demarshal_sequence(strm, _tao_sequence);
}


TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_CDR_OP_Test_Unbounded_Var_Size_Arg_CPP_ */

// TAO_IDL - Generated from
// be/be_visitor_array/cdr_op_cs.cpp:163


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Test::Fixed_Array_forany &_tao_array)
{
  return
    strm.write_long_array (
        reinterpret_cast <const ACE_CDR::Long *> (_tao_array.in ()),
        10);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Test::Fixed_Array_forany &_tao_array)
{
  return
    strm.read_long_array (
        reinterpret_cast <ACE_CDR::Long *> (_tao_array.out ()),
        10);
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_array/cdr_op_cs.cpp:163


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Test::Var_Array_forany &_tao_array)
{
  CORBA::Boolean _tao_marshal_flag = true;

  for ( ::CORBA::ULong i0 = 0; i0 < 3 && _tao_marshal_flag; ++i0)
    {
      _tao_marshal_flag = (strm << _tao_array [i0].in ());
    }

  return _tao_marshal_flag;
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Test::Var_Array_forany &_tao_array)
{
  CORBA::Boolean _tao_marshal_flag = true;

  for ( ::CORBA::ULong i0 = 0; i0 < 3 && _tao_marshal_flag; ++i0)
    {
      _tao_marshal_flag = (strm >> _tao_array [i0].out ());
    }

  return _tao_marshal_flag;
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_structure/cdr_op_cs.cpp:49

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Test::TimeOfDay &_tao_aggregate)
{
  return
    (strm << _tao_aggregate.hour) &&
    (strm << _tao_aggregate.minute) &&
    (strm << _tao_aggregate.second);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Test::TimeOfDay &_tao_aggregate)
{
  return
    (strm >> _tao_aggregate.hour) &&
    (strm >> _tao_aggregate.minute) &&
    (strm >> _tao_aggregate.second);
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_interface/cdr_op_cs.cpp:51

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Test::Simple_Test_ptr _tao_objref)
{
  ::CORBA::Object_ptr _tao_corba_obj = _tao_objref;
  return (strm << _tao_corba_obj);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Test::Simple_Test_ptr &_tao_objref)
{
  ::CORBA::Object_var obj;

  if (!(strm >> obj.inout ()))
    {
      return false;
    }

  typedef ::Test::Simple_Test RHS_SCOPED_NAME;

  // Narrow to the right type.
  _tao_objref =
    TAO::Narrow_Utils<RHS_SCOPED_NAME>::unchecked_narrow (obj.in ());

  return true;
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_interface/cdr_op_cs.cpp:51

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Test::Hello_ptr _tao_objref)
{
  ::CORBA::Object_ptr _tao_corba_obj = _tao_objref;
  return (strm << _tao_corba_obj);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Test::Hello_ptr &_tao_objref)
{
  ::CORBA::Object_var obj;

  if (!(strm >> obj.inout ()))
    {
      return false;
    }

  typedef ::Test::Hello RHS_SCOPED_NAME;

  // Narrow to the right type.
  _tao_objref =
    TAO::Narrow_Utils<RHS_SCOPED_NAME>::unchecked_narrow (obj.in ());

  return true;
}

TAO_END_VERSIONED_NAMESPACE_DECL



