// -*- C++ -*-
/**
 * Code generated by the The ACE ORB (TAO) IDL Compiler v2.4.1
 * TAO and the TAO IDL Compiler have been developed by:
 *       Center for Distributed Object Computing
 *       Washington University
 *       St. Louis, MO
 *       USA
 *       http://www.cs.wustl.edu/~schmidt/doc-center.html
 * and
 *       Distributed Object Computing Laboratory
 *       University of California at Irvine
 *       Irvine, CA
 *       USA
 * and
 *       Institute for Software Integrated Systems
 *       Vanderbilt University
 *       Nashville, TN
 *       USA
 *       http://www.isis.vanderbilt.edu/
 *
 * Information about TAO is available at:
 *     http://www.dre.vanderbilt.edu/~schmidt/TAO.html
 **/

// TAO_IDL - Generated from
// be/be_codegen.cpp:149

#ifndef _TAO_IDL_TESTC_8BMHQ9_H_
#define _TAO_IDL_TESTC_8BMHQ9_H_

#include /**/ "ace/pre.h"


#include /**/ "ace/config-all.h"

#if !defined (ACE_LACKS_PRAGMA_ONCE)
# pragma once
#endif /* ACE_LACKS_PRAGMA_ONCE */


#include "tao/AnyTypeCode/AnyTypeCode_methods.h"
#include "tao/AnyTypeCode/Any.h"
#include "tao/Valuetype/ValueBase.h"
#include "tao/Valuetype/Valuetype_Adapter_Factory_Impl.h"
#include "tao/ORB.h"
#include "tao/SystemException.h"
#include "tao/Basic_Types.h"
#include "tao/ORB_Constants.h"
#include "tao/Object.h"
#include "tao/Messaging/Messaging.h"
#include "tao/Sequence_T.h"
#include "tao/Valuetype/Value_VarOut_T.h"
#include "tao/Objref_VarOut_T.h"
#include "tao/Seq_Var_T.h"
#include "tao/Seq_Out_T.h"
#include "tao/Arg_Traits_T.h"
#include "tao/Basic_Arguments.h"
#include "tao/Special_Basic_Arguments.h"
#include "tao/Any_Insert_Policy_T.h"
#include "tao/Fixed_Size_Argument_T.h"
#include "tao/Var_Size_Argument_T.h"
#include "tao/Object_Argument_T.h"
#include /**/ "tao/Version.h"
#include /**/ "tao/Versioned_Namespace.h"

#if TAO_MAJOR_VERSION != 2 || TAO_MINOR_VERSION != 4 || TAO_MICRO_VERSION != 1
#error This file should be regenerated with TAO_IDL
#endif

#if defined (TAO_EXPORT_MACRO)
#undef TAO_EXPORT_MACRO
#endif
#define TAO_EXPORT_MACRO 

// TAO_IDL - Generated from
// be/be_visitor_root/root_ch.cpp:157
TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<typename T> class Narrow_Utils;
}
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_module/module_ch.cpp:35

namespace Test
{

  // TAO_IDL - Generated from
  // be/be_visitor_sequence/sequence_ch.cpp:99

#if !defined (_TEST_PAYLOAD_CH_)
#define _TEST_PAYLOAD_CH_

  class Payload;

  typedef
    ::TAO_FixedSeq_Var_T<
        Payload
      >
    Payload_var;

  typedef
    ::TAO_Seq_Out_T<
        Payload
      >
    Payload_out;

  class  Payload
    : public
        ::TAO::unbounded_value_sequence<
            ::CORBA::Octet
          >
  {
  public:
    Payload (void);
    Payload ( ::CORBA::ULong max);
    Payload (
      ::CORBA::ULong max,
      ::CORBA::ULong length,
      ::CORBA::Octet* buffer,
      ::CORBA::Boolean release = false);
    Payload (const Payload &);
    virtual ~Payload (void);
    

    // TAO_IDL - Generated from
    // be/be_type.cpp:304

    
    typedef Payload_var _var_type;
    typedef Payload_out _out_type;

    static void _tao_any_destructor (void *);

    

#if (TAO_NO_COPY_OCTET_SEQUENCES == 1)
    Payload (
        ::CORBA::ULong length,
        const ACE_Message_Block* mb
      )
      : ::TAO::unbounded_value_sequence< ::CORBA::Octet> (length, mb) {}
#endif /* TAO_NO_COPY_OCTET_SEQUENCE == 1 */
  };

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // be/be_visitor_typecode/typecode_decl.cpp:34

  extern  ::CORBA::TypeCode_ptr const _tc_Payload;

  // TAO_IDL - Generated from
  // be/be_interface.cpp:748

#if !defined (_TEST_AMI_BUFFERING__VAR_OUT_CH_)
#define _TEST_AMI_BUFFERING__VAR_OUT_CH_

  class AMI_AMI_BufferingHandler;
  typedef AMI_AMI_BufferingHandler *AMI_AMI_BufferingHandler_ptr;

  class AMI_Buffering;
  typedef AMI_Buffering *AMI_Buffering_ptr;

  typedef
    TAO_Objref_Var_T<
        AMI_Buffering
      >
    AMI_Buffering_var;
  
  typedef
    TAO_Objref_Out_T<
        AMI_Buffering
      >
    AMI_Buffering_out;

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // be/be_visitor_interface/interface_ch.cpp:40

  class  AMI_Buffering
    : public virtual ::CORBA::Object
  {
  public:
    friend class TAO::Narrow_Utils<AMI_Buffering>;

    // TAO_IDL - Generated from
    // be/be_type.cpp:304

    typedef AMI_Buffering_ptr _ptr_type;
    typedef AMI_Buffering_var _var_type;
    typedef AMI_Buffering_out _out_type;

    static void _tao_any_destructor (void *);

    // The static operations.
    static AMI_Buffering_ptr _duplicate (AMI_Buffering_ptr obj);

    static void _tao_release (AMI_Buffering_ptr obj);

    static AMI_Buffering_ptr _narrow (::CORBA::Object_ptr obj);
    static AMI_Buffering_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
    static AMI_Buffering_ptr _nil (void);

    virtual void receive_data (
      const ::Test::Payload & the_payload);

    virtual void flush (
      void);

    virtual void sync (
      void);

    virtual void shutdown (
      void);

    virtual void sendc_receive_data (
      ::Test::AMI_AMI_BufferingHandler_ptr ami_handler,
      const ::Test::Payload & the_payload);

    virtual void sendc_sync (
      ::Test::AMI_AMI_BufferingHandler_ptr ami_handler);

    virtual void sendc_shutdown (
      ::Test::AMI_AMI_BufferingHandler_ptr ami_handler);

    // TAO_IDL - Generated from
    // be/be_visitor_interface/interface_ch.cpp:137

    virtual ::CORBA::Boolean _is_a (const char *type_id);
    virtual const char* _interface_repository_id (void) const;
    virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);
  
  protected:
    // Concrete interface only.
    AMI_Buffering (void);

    // Concrete non-local interface only.
    AMI_Buffering (
        ::IOP::IOR *ior,
        TAO_ORB_Core *orb_core);
    
    // Non-local interface only.
    AMI_Buffering (
        TAO_Stub *objref,
        ::CORBA::Boolean _tao_collocated = false,
        TAO_Abstract_ServantBase *servant = 0,
        TAO_ORB_Core *orb_core = 0);

    virtual ~AMI_Buffering (void);
  
  private:
    // Private and unimplemented for concrete interfaces.
    AMI_Buffering (const AMI_Buffering &);

    void operator= (const AMI_Buffering &);
  };

  // TAO_IDL - Generated from
  // be/be_visitor_typecode/typecode_decl.cpp:34

  extern  ::CORBA::TypeCode_ptr const _tc_AMI_Buffering;

  // TAO_IDL - Generated from
  // be/be_interface.cpp:748

#if !defined (_TEST_AMI_AMI_BUFFERINGHANDLER__VAR_OUT_CH_)
#define _TEST_AMI_AMI_BUFFERINGHANDLER__VAR_OUT_CH_

  class AMI_AMI_BufferingHandler;
  typedef AMI_AMI_BufferingHandler *AMI_AMI_BufferingHandler_ptr;

  typedef
    TAO_Objref_Var_T<
        AMI_AMI_BufferingHandler
      >
    AMI_AMI_BufferingHandler_var;
  
  typedef
    TAO_Objref_Out_T<
        AMI_AMI_BufferingHandler
      >
    AMI_AMI_BufferingHandler_out;

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // be/be_visitor_interface/interface_ch.cpp:40

  class  AMI_AMI_BufferingHandler
    : public virtual ::Messaging::ReplyHandler
  
  {
  public:
    friend class TAO::Narrow_Utils<AMI_AMI_BufferingHandler>;

    // TAO_IDL - Generated from
    // be/be_type.cpp:304

    typedef AMI_AMI_BufferingHandler_ptr _ptr_type;
    typedef AMI_AMI_BufferingHandler_var _var_type;
    typedef AMI_AMI_BufferingHandler_out _out_type;

    static void _tao_any_destructor (void *);

    // The static operations.
    static AMI_AMI_BufferingHandler_ptr _duplicate (AMI_AMI_BufferingHandler_ptr obj);

    static void _tao_release (AMI_AMI_BufferingHandler_ptr obj);

    static AMI_AMI_BufferingHandler_ptr _narrow (::CORBA::Object_ptr obj);
    static AMI_AMI_BufferingHandler_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
    static AMI_AMI_BufferingHandler_ptr _nil (void);

    virtual void receive_data (
      void);

    static void
    receive_data_reply_stub (
      TAO_InputCDR &_tao_reply_cdr,
      ::Messaging::ReplyHandler_ptr _tao_reply_handler,
      ::CORBA::ULong reply_status);

    virtual void receive_data_excep (
      ::Messaging::ExceptionHolder * excep_holder);

    virtual void sync (
      void);

    static void
    sync_reply_stub (
      TAO_InputCDR &_tao_reply_cdr,
      ::Messaging::ReplyHandler_ptr _tao_reply_handler,
      ::CORBA::ULong reply_status);

    virtual void sync_excep (
      ::Messaging::ExceptionHolder * excep_holder);

    virtual void shutdown (
      void);

    static void
    shutdown_reply_stub (
      TAO_InputCDR &_tao_reply_cdr,
      ::Messaging::ReplyHandler_ptr _tao_reply_handler,
      ::CORBA::ULong reply_status);

    virtual void shutdown_excep (
      ::Messaging::ExceptionHolder * excep_holder);

    // TAO_IDL - Generated from
    // be/be_visitor_interface/interface_ch.cpp:137

    virtual ::CORBA::Boolean _is_a (const char *type_id);
    virtual const char* _interface_repository_id (void) const;
    virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);
  
  protected:
    // Concrete interface only.
    AMI_AMI_BufferingHandler (void);

    // Concrete non-local interface only.
    AMI_AMI_BufferingHandler (
        ::IOP::IOR *ior,
        TAO_ORB_Core *orb_core);
    
    // Non-local interface only.
    AMI_AMI_BufferingHandler (
        TAO_Stub *objref,
        ::CORBA::Boolean _tao_collocated = false,
        TAO_Abstract_ServantBase *servant = 0,
        TAO_ORB_Core *orb_core = 0);

    virtual ~AMI_AMI_BufferingHandler (void);
  
  private:
    // Private and unimplemented for concrete interfaces.
    AMI_AMI_BufferingHandler (const AMI_AMI_BufferingHandler &);

    void operator= (const AMI_AMI_BufferingHandler &);
  };

  // TAO_IDL - Generated from
  // be/be_visitor_typecode/typecode_decl.cpp:34

  extern  ::CORBA::TypeCode_ptr const _tc_AMI_AMI_BufferingHandler;

  // TAO_IDL - Generated from
  // be/be_interface.cpp:748

#if !defined (_TEST_AMI_BUFFERING_ADMIN__VAR_OUT_CH_)
#define _TEST_AMI_BUFFERING_ADMIN__VAR_OUT_CH_

  class AMI_AMI_Buffering_AdminHandler;
  typedef AMI_AMI_Buffering_AdminHandler *AMI_AMI_Buffering_AdminHandler_ptr;

  class AMI_Buffering_Admin;
  typedef AMI_Buffering_Admin *AMI_Buffering_Admin_ptr;

  typedef
    TAO_Objref_Var_T<
        AMI_Buffering_Admin
      >
    AMI_Buffering_Admin_var;
  
  typedef
    TAO_Objref_Out_T<
        AMI_Buffering_Admin
      >
    AMI_Buffering_Admin_out;

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // be/be_visitor_interface/interface_ch.cpp:40

  class  AMI_Buffering_Admin
    : public virtual ::CORBA::Object
  {
  public:
    friend class TAO::Narrow_Utils<AMI_Buffering_Admin>;

    // TAO_IDL - Generated from
    // be/be_type.cpp:304

    typedef AMI_Buffering_Admin_ptr _ptr_type;
    typedef AMI_Buffering_Admin_var _var_type;
    typedef AMI_Buffering_Admin_out _out_type;

    static void _tao_any_destructor (void *);

    // The static operations.
    static AMI_Buffering_Admin_ptr _duplicate (AMI_Buffering_Admin_ptr obj);

    static void _tao_release (AMI_Buffering_Admin_ptr obj);

    static AMI_Buffering_Admin_ptr _narrow (::CORBA::Object_ptr obj);
    static AMI_Buffering_Admin_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
    static AMI_Buffering_Admin_ptr _nil (void);

    virtual ::CORBA::ULong request_count (
      void);

    virtual ::CORBA::ULong bytes_received_count (
      void);

    virtual void request_received (
      ::CORBA::ULong payload_length);

    virtual void flush (
      void);

    virtual void shutdown (
      void);

    virtual void sendc_request_count (
      ::Test::AMI_AMI_Buffering_AdminHandler_ptr ami_handler);

    virtual void sendc_bytes_received_count (
      ::Test::AMI_AMI_Buffering_AdminHandler_ptr ami_handler);

    virtual void sendc_request_received (
      ::Test::AMI_AMI_Buffering_AdminHandler_ptr ami_handler,
      ::CORBA::ULong payload_length);

    virtual void sendc_flush (
      ::Test::AMI_AMI_Buffering_AdminHandler_ptr ami_handler);

    virtual void sendc_shutdown (
      ::Test::AMI_AMI_Buffering_AdminHandler_ptr ami_handler);

    // TAO_IDL - Generated from
    // be/be_visitor_interface/interface_ch.cpp:137

    virtual ::CORBA::Boolean _is_a (const char *type_id);
    virtual const char* _interface_repository_id (void) const;
    virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);
  
  protected:
    // Concrete interface only.
    AMI_Buffering_Admin (void);

    // Concrete non-local interface only.
    AMI_Buffering_Admin (
        ::IOP::IOR *ior,
        TAO_ORB_Core *orb_core);
    
    // Non-local interface only.
    AMI_Buffering_Admin (
        TAO_Stub *objref,
        ::CORBA::Boolean _tao_collocated = false,
        TAO_Abstract_ServantBase *servant = 0,
        TAO_ORB_Core *orb_core = 0);

    virtual ~AMI_Buffering_Admin (void);
  
  private:
    // Private and unimplemented for concrete interfaces.
    AMI_Buffering_Admin (const AMI_Buffering_Admin &);

    void operator= (const AMI_Buffering_Admin &);
  };

  // TAO_IDL - Generated from
  // be/be_visitor_typecode/typecode_decl.cpp:34

  extern  ::CORBA::TypeCode_ptr const _tc_AMI_Buffering_Admin;

  // TAO_IDL - Generated from
  // be/be_interface.cpp:748

#if !defined (_TEST_AMI_AMI_BUFFERING_ADMINHANDLER__VAR_OUT_CH_)
#define _TEST_AMI_AMI_BUFFERING_ADMINHANDLER__VAR_OUT_CH_

  class AMI_AMI_Buffering_AdminHandler;
  typedef AMI_AMI_Buffering_AdminHandler *AMI_AMI_Buffering_AdminHandler_ptr;

  typedef
    TAO_Objref_Var_T<
        AMI_AMI_Buffering_AdminHandler
      >
    AMI_AMI_Buffering_AdminHandler_var;
  
  typedef
    TAO_Objref_Out_T<
        AMI_AMI_Buffering_AdminHandler
      >
    AMI_AMI_Buffering_AdminHandler_out;

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // be/be_visitor_interface/interface_ch.cpp:40

  class  AMI_AMI_Buffering_AdminHandler
    : public virtual ::Messaging::ReplyHandler
  
  {
  public:
    friend class TAO::Narrow_Utils<AMI_AMI_Buffering_AdminHandler>;

    // TAO_IDL - Generated from
    // be/be_type.cpp:304

    typedef AMI_AMI_Buffering_AdminHandler_ptr _ptr_type;
    typedef AMI_AMI_Buffering_AdminHandler_var _var_type;
    typedef AMI_AMI_Buffering_AdminHandler_out _out_type;

    static void _tao_any_destructor (void *);

    // The static operations.
    static AMI_AMI_Buffering_AdminHandler_ptr _duplicate (AMI_AMI_Buffering_AdminHandler_ptr obj);

    static void _tao_release (AMI_AMI_Buffering_AdminHandler_ptr obj);

    static AMI_AMI_Buffering_AdminHandler_ptr _narrow (::CORBA::Object_ptr obj);
    static AMI_AMI_Buffering_AdminHandler_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
    static AMI_AMI_Buffering_AdminHandler_ptr _nil (void);

    virtual void request_count (
      ::CORBA::ULong ami_return_val);

    static void
    request_count_reply_stub (
      TAO_InputCDR &_tao_reply_cdr,
      ::Messaging::ReplyHandler_ptr _tao_reply_handler,
      ::CORBA::ULong reply_status);

    virtual void request_count_excep (
      ::Messaging::ExceptionHolder * excep_holder);

    virtual void bytes_received_count (
      ::CORBA::ULong ami_return_val);

    static void
    bytes_received_count_reply_stub (
      TAO_InputCDR &_tao_reply_cdr,
      ::Messaging::ReplyHandler_ptr _tao_reply_handler,
      ::CORBA::ULong reply_status);

    virtual void bytes_received_count_excep (
      ::Messaging::ExceptionHolder * excep_holder);

    virtual void request_received (
      void);

    static void
    request_received_reply_stub (
      TAO_InputCDR &_tao_reply_cdr,
      ::Messaging::ReplyHandler_ptr _tao_reply_handler,
      ::CORBA::ULong reply_status);

    virtual void request_received_excep (
      ::Messaging::ExceptionHolder * excep_holder);

    virtual void flush (
      void);

    static void
    flush_reply_stub (
      TAO_InputCDR &_tao_reply_cdr,
      ::Messaging::ReplyHandler_ptr _tao_reply_handler,
      ::CORBA::ULong reply_status);

    virtual void flush_excep (
      ::Messaging::ExceptionHolder * excep_holder);

    virtual void shutdown (
      void);

    static void
    shutdown_reply_stub (
      TAO_InputCDR &_tao_reply_cdr,
      ::Messaging::ReplyHandler_ptr _tao_reply_handler,
      ::CORBA::ULong reply_status);

    virtual void shutdown_excep (
      ::Messaging::ExceptionHolder * excep_holder);

    // TAO_IDL - Generated from
    // be/be_visitor_interface/interface_ch.cpp:137

    virtual ::CORBA::Boolean _is_a (const char *type_id);
    virtual const char* _interface_repository_id (void) const;
    virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);
  
  protected:
    // Concrete interface only.
    AMI_AMI_Buffering_AdminHandler (void);

    // Concrete non-local interface only.
    AMI_AMI_Buffering_AdminHandler (
        ::IOP::IOR *ior,
        TAO_ORB_Core *orb_core);
    
    // Non-local interface only.
    AMI_AMI_Buffering_AdminHandler (
        TAO_Stub *objref,
        ::CORBA::Boolean _tao_collocated = false,
        TAO_Abstract_ServantBase *servant = 0,
        TAO_ORB_Core *orb_core = 0);

    virtual ~AMI_AMI_Buffering_AdminHandler (void);
  
  private:
    // Private and unimplemented for concrete interfaces.
    AMI_AMI_Buffering_AdminHandler (const AMI_AMI_Buffering_AdminHandler &);

    void operator= (const AMI_AMI_Buffering_AdminHandler &);
  };

  // TAO_IDL - Generated from
  // be/be_visitor_typecode/typecode_decl.cpp:34

  extern  ::CORBA::TypeCode_ptr const _tc_AMI_AMI_Buffering_AdminHandler;

// TAO_IDL - Generated from
// be/be_visitor_module/module_ch.cpp:64

} // module Test

// TAO_IDL - Generated from
// be/be_visitor_arg_traits.cpp:66

TAO_BEGIN_VERSIONED_NAMESPACE_DECL


// Arg traits specializations.
namespace TAO
{

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:306

#if !defined (_MESSAGING_EXCEPTIONHOLDER__ARG_TRAITS_)
#define _MESSAGING_EXCEPTIONHOLDER__ARG_TRAITS_

  template<>
  class Arg_Traits< ::Messaging::ExceptionHolder>
    : public
        Object_Arg_Traits_T<
            ::Messaging::ExceptionHolder *,
            ::Messaging::ExceptionHolder_var,
            ::Messaging::ExceptionHolder_out,
            TAO::Value_Traits<Messaging::ExceptionHolder>,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:683

  template<>
  class Arg_Traits< ::Test::Payload>
    : public
        Var_Size_Arg_Traits_T<
            ::Test::Payload,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:145

#if !defined (_TEST_AMI_BUFFERING__ARG_TRAITS_)
#define _TEST_AMI_BUFFERING__ARG_TRAITS_

  template<>
  class  Arg_Traits< ::Test::AMI_Buffering>
    : public
        Object_Arg_Traits_T<
            ::Test::AMI_Buffering_ptr,
            ::Test::AMI_Buffering_var,
            ::Test::AMI_Buffering_out,
            TAO::Objref_Traits<Test::AMI_Buffering>,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:145

#if !defined (_TEST_AMI_AMI_BUFFERINGHANDLER__ARG_TRAITS_)
#define _TEST_AMI_AMI_BUFFERINGHANDLER__ARG_TRAITS_

  template<>
  class  Arg_Traits< ::Test::AMI_AMI_BufferingHandler>
    : public
        Object_Arg_Traits_T<
            ::Test::AMI_AMI_BufferingHandler_ptr,
            ::Test::AMI_AMI_BufferingHandler_var,
            ::Test::AMI_AMI_BufferingHandler_out,
            TAO::Objref_Traits<Test::AMI_AMI_BufferingHandler>,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:145

#if !defined (_TEST_AMI_BUFFERING_ADMIN__ARG_TRAITS_)
#define _TEST_AMI_BUFFERING_ADMIN__ARG_TRAITS_

  template<>
  class  Arg_Traits< ::Test::AMI_Buffering_Admin>
    : public
        Object_Arg_Traits_T<
            ::Test::AMI_Buffering_Admin_ptr,
            ::Test::AMI_Buffering_Admin_var,
            ::Test::AMI_Buffering_Admin_out,
            TAO::Objref_Traits<Test::AMI_Buffering_Admin>,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:145

#if !defined (_TEST_AMI_AMI_BUFFERING_ADMINHANDLER__ARG_TRAITS_)
#define _TEST_AMI_AMI_BUFFERING_ADMINHANDLER__ARG_TRAITS_

  template<>
  class  Arg_Traits< ::Test::AMI_AMI_Buffering_AdminHandler>
    : public
        Object_Arg_Traits_T<
            ::Test::AMI_AMI_Buffering_AdminHandler_ptr,
            ::Test::AMI_AMI_Buffering_AdminHandler_var,
            ::Test::AMI_AMI_Buffering_AdminHandler_out,
            TAO::Objref_Traits<Test::AMI_AMI_Buffering_AdminHandler>,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

#endif /* end #if !defined */
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_valuetype/obv_module.cpp:44

namespace OBV_Test
{
}

// TAO_IDL - Generated from
// be/be_visitor_traits.cpp:60

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Traits specializations.
namespace TAO
{

#if !defined (_TEST_AMI_BUFFERING__TRAITS_)
#define _TEST_AMI_BUFFERING__TRAITS_

  template<>
  struct  Objref_Traits< ::Test::AMI_Buffering>
  {
    static ::Test::AMI_Buffering_ptr duplicate (
        ::Test::AMI_Buffering_ptr p);
    static void release (
        ::Test::AMI_Buffering_ptr p);
    static ::Test::AMI_Buffering_ptr nil (void);
    static ::CORBA::Boolean marshal (
        const ::Test::AMI_Buffering_ptr p,
        TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_TEST_AMI_AMI_BUFFERINGHANDLER__TRAITS_)
#define _TEST_AMI_AMI_BUFFERINGHANDLER__TRAITS_

  template<>
  struct  Objref_Traits< ::Test::AMI_AMI_BufferingHandler>
  {
    static ::Test::AMI_AMI_BufferingHandler_ptr duplicate (
        ::Test::AMI_AMI_BufferingHandler_ptr p);
    static void release (
        ::Test::AMI_AMI_BufferingHandler_ptr p);
    static ::Test::AMI_AMI_BufferingHandler_ptr nil (void);
    static ::CORBA::Boolean marshal (
        const ::Test::AMI_AMI_BufferingHandler_ptr p,
        TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_TEST_AMI_BUFFERING_ADMIN__TRAITS_)
#define _TEST_AMI_BUFFERING_ADMIN__TRAITS_

  template<>
  struct  Objref_Traits< ::Test::AMI_Buffering_Admin>
  {
    static ::Test::AMI_Buffering_Admin_ptr duplicate (
        ::Test::AMI_Buffering_Admin_ptr p);
    static void release (
        ::Test::AMI_Buffering_Admin_ptr p);
    static ::Test::AMI_Buffering_Admin_ptr nil (void);
    static ::CORBA::Boolean marshal (
        const ::Test::AMI_Buffering_Admin_ptr p,
        TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_TEST_AMI_AMI_BUFFERING_ADMINHANDLER__TRAITS_)
#define _TEST_AMI_AMI_BUFFERING_ADMINHANDLER__TRAITS_

  template<>
  struct  Objref_Traits< ::Test::AMI_AMI_Buffering_AdminHandler>
  {
    static ::Test::AMI_AMI_Buffering_AdminHandler_ptr duplicate (
        ::Test::AMI_AMI_Buffering_AdminHandler_ptr p);
    static void release (
        ::Test::AMI_AMI_Buffering_AdminHandler_ptr p);
    static ::Test::AMI_AMI_Buffering_AdminHandler_ptr nil (void);
    static ::CORBA::Boolean marshal (
        const ::Test::AMI_AMI_Buffering_AdminHandler_ptr p,
        TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */
}
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_sequence/any_op_ch.cpp:47



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace Test
{
   void operator<<= ( ::CORBA::Any &, const ::Test::Payload &); // copying version
   void operator<<= ( ::CORBA::Any &, ::Test::Payload*); // noncopying version
   ::CORBA::Boolean operator>>= (const ::CORBA::Any &, ::Test::Payload *&); // deprecated
   ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const ::Test::Payload *&);
}

#else


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 void operator<<= ( ::CORBA::Any &, const Test::Payload &); // copying version
 void operator<<= ( ::CORBA::Any &, Test::Payload*); // noncopying version
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, Test::Payload *&); // deprecated
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const Test::Payload *&);
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_interface/any_op_ch.cpp:41



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace Test
{
   void operator<<= ( ::CORBA::Any &, AMI_Buffering_ptr); // copying
   void operator<<= ( ::CORBA::Any &, AMI_Buffering_ptr *); // non-copying
   ::CORBA::Boolean operator>>= (const ::CORBA::Any &, AMI_Buffering_ptr &);
}

#else


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 void operator<<= (::CORBA::Any &, Test::AMI_Buffering_ptr); // copying
 void operator<<= (::CORBA::Any &, Test::AMI_Buffering_ptr *); // non-copying
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, Test::AMI_Buffering_ptr &);
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_interface/any_op_ch.cpp:41



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace Test
{
   void operator<<= ( ::CORBA::Any &, AMI_AMI_BufferingHandler_ptr); // copying
   void operator<<= ( ::CORBA::Any &, AMI_AMI_BufferingHandler_ptr *); // non-copying
   ::CORBA::Boolean operator>>= (const ::CORBA::Any &, AMI_AMI_BufferingHandler_ptr &);
}

#else


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 void operator<<= (::CORBA::Any &, Test::AMI_AMI_BufferingHandler_ptr); // copying
 void operator<<= (::CORBA::Any &, Test::AMI_AMI_BufferingHandler_ptr *); // non-copying
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, Test::AMI_AMI_BufferingHandler_ptr &);
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_interface/any_op_ch.cpp:41



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace Test
{
   void operator<<= ( ::CORBA::Any &, AMI_Buffering_Admin_ptr); // copying
   void operator<<= ( ::CORBA::Any &, AMI_Buffering_Admin_ptr *); // non-copying
   ::CORBA::Boolean operator>>= (const ::CORBA::Any &, AMI_Buffering_Admin_ptr &);
}

#else


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 void operator<<= (::CORBA::Any &, Test::AMI_Buffering_Admin_ptr); // copying
 void operator<<= (::CORBA::Any &, Test::AMI_Buffering_Admin_ptr *); // non-copying
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, Test::AMI_Buffering_Admin_ptr &);
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_interface/any_op_ch.cpp:41



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace Test
{
   void operator<<= ( ::CORBA::Any &, AMI_AMI_Buffering_AdminHandler_ptr); // copying
   void operator<<= ( ::CORBA::Any &, AMI_AMI_Buffering_AdminHandler_ptr *); // non-copying
   ::CORBA::Boolean operator>>= (const ::CORBA::Any &, AMI_AMI_Buffering_AdminHandler_ptr &);
}

#else


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 void operator<<= (::CORBA::Any &, Test::AMI_AMI_Buffering_AdminHandler_ptr); // copying
 void operator<<= (::CORBA::Any &, Test::AMI_AMI_Buffering_AdminHandler_ptr *); // non-copying
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, Test::AMI_AMI_Buffering_AdminHandler_ptr &);
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_sequence/cdr_op_ch.cpp:65

#if !defined _TAO_CDR_OP_Test_Payload_H_
#define _TAO_CDR_OP_Test_Payload_H_
TAO_BEGIN_VERSIONED_NAMESPACE_DECL


 ::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Test::Payload &_tao_sequence);
 ::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Test::Payload &_tao_sequence);

TAO_END_VERSIONED_NAMESPACE_DECL



#endif /* _TAO_CDR_OP_Test_Payload_H_ */

// TAO_IDL - Generated from
// be/be_visitor_interface/cdr_op_ch.cpp:41

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 ::CORBA::Boolean operator<< (TAO_OutputCDR &, const Test::AMI_Buffering_ptr );
 ::CORBA::Boolean operator>> (TAO_InputCDR &, Test::AMI_Buffering_ptr &);

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_interface/cdr_op_ch.cpp:41

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 ::CORBA::Boolean operator<< (TAO_OutputCDR &, const Test::AMI_AMI_BufferingHandler_ptr );
 ::CORBA::Boolean operator>> (TAO_InputCDR &, Test::AMI_AMI_BufferingHandler_ptr &);

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_interface/cdr_op_ch.cpp:41

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 ::CORBA::Boolean operator<< (TAO_OutputCDR &, const Test::AMI_Buffering_Admin_ptr );
 ::CORBA::Boolean operator>> (TAO_InputCDR &, Test::AMI_Buffering_Admin_ptr &);

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_interface/cdr_op_ch.cpp:41

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 ::CORBA::Boolean operator<< (TAO_OutputCDR &, const Test::AMI_AMI_Buffering_AdminHandler_ptr );
 ::CORBA::Boolean operator>> (TAO_InputCDR &, Test::AMI_AMI_Buffering_AdminHandler_ptr &);

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_codegen.cpp:1700
#if defined (__ACE_INLINE__)
#include "TestC.inl"
#endif /* defined INLINE */

#include /**/ "ace/post.h"

#endif /* ifndef */

