// -*- C++ -*-
/**
 * Code generated by the The ACE ORB (TAO) IDL Compiler v2.4.1
 * TAO and the TAO IDL Compiler have been developed by:
 *       Center for Distributed Object Computing
 *       Washington University
 *       St. Louis, MO
 *       USA
 *       http://www.cs.wustl.edu/~schmidt/doc-center.html
 * and
 *       Distributed Object Computing Laboratory
 *       University of California at Irvine
 *       Irvine, CA
 *       USA
 * and
 *       Institute for Software Integrated Systems
 *       Vanderbilt University
 *       Nashville, TN
 *       USA
 *       http://www.isis.vanderbilt.edu/
 *
 * Information about TAO is available at:
 *     http://www.dre.vanderbilt.edu/~schmidt/TAO.html
 **/

// TAO_IDL - Generated from
// be/be_codegen.cpp:458

#ifndef _TAO_IDL_TESTS_6MH5VH_H_
#define _TAO_IDL_TESTS_6MH5VH_H_

#include /**/ "ace/pre.h"

#include "TestC.h"
#include "tao/PortableServer/Basic_SArguments.h"
#include "tao/PortableServer/Special_Basic_SArguments.h"
#include "tao/PortableServer/Fixed_Size_SArgument_T.h"
#include "tao/PortableServer/Var_Size_SArgument_T.h"
#include "tao/PortableServer/Object_SArg_Traits.h"
#include "tao/PortableServer/UB_String_SArguments.h"
#include "tao/PortableServer/Object_SArg_Traits.h"
#include "tao/PortableServer/get_arg.h"
#include "tao/Special_Basic_Arguments.h"
#include "tao/UB_String_Arguments.h"

#if !defined (ACE_LACKS_PRAGMA_ONCE)
# pragma once
#endif /* ACE_LACKS_PRAGMA_ONCE */

#include "tao/PortableServer/PortableServer.h"
#include "tao/PortableServer/Servant_Base.h"

// TAO_IDL - Generated from
// be/be_visitor_arg_traits.cpp:66

TAO_BEGIN_VERSIONED_NAMESPACE_DECL


// Arg traits specializations.
namespace TAO
{

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:145

#if !defined (_TEST_SHUTDOWN_HELPER__SARG_TRAITS_)
#define _TEST_SHUTDOWN_HELPER__SARG_TRAITS_

  template<>
  class  SArg_Traits< ::Test::Shutdown_Helper>
    : public
        Object_SArg_Traits_T<
            ::Test::Shutdown_Helper_ptr,
            ::Test::Shutdown_Helper_var,
            ::Test::Shutdown_Helper_out,
            TAO::Any_Insert_Policy_Noop
          >
  {
  };

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:145

#if !defined (_TEST_ONEWAY_RECEIVER__SARG_TRAITS_)
#define _TEST_ONEWAY_RECEIVER__SARG_TRAITS_

  template<>
  class  SArg_Traits< ::Test::Oneway_Receiver>
    : public
        Object_SArg_Traits_T<
            ::Test::Oneway_Receiver_ptr,
            ::Test::Oneway_Receiver_var,
            ::Test::Oneway_Receiver_out,
            TAO::Any_Insert_Policy_Noop
          >
  {
  };

#endif /* end #if !defined */
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_module/module_sh.cpp:35

namespace POA_Test
{
  

  // TAO_IDL - Generated from
  // be/be_visitor_interface/interface_sh.cpp:73

  class Oneway_Receiver;
  typedef Oneway_Receiver *Oneway_Receiver_ptr;

  class  Oneway_Receiver
    : public virtual PortableServer::ServantBase
  {
  protected:
    Oneway_Receiver (void);
  
  public:
    /// Useful for template programming.
    typedef ::Test::Oneway_Receiver _stub_type;
    typedef ::Test::Oneway_Receiver_ptr _stub_ptr_type;
    typedef ::Test::Oneway_Receiver_var _stub_var_type;

    Oneway_Receiver (const Oneway_Receiver& rhs);
    virtual ~Oneway_Receiver (void);

    virtual ::CORBA::Boolean _is_a (const char* logical_type_id);

    virtual void _dispatch (
        TAO_ServerRequest & req,
        TAO::Portable_Server::Servant_Upcall *servant_upcall);
    
    ::Test::Oneway_Receiver *_this (void);
    
    virtual const char* _interface_repository_id (void) const;

    // TAO_IDL - Generated from
    // be/be_visitor_operation/operation_sh.cpp:36

    virtual void raise_no_permission (
      void) = 0;

    static void raise_no_permission_skel (
        TAO_ServerRequest &server_request,
        TAO::Portable_Server::Servant_Upcall *servant_upcall,
        TAO_ServantBase *servant);

    // TAO_IDL - Generated from
    // be/be_visitor_operation/operation_sh.cpp:36

    virtual void destroy (
      void) = 0;

    static void destroy_skel (
        TAO_ServerRequest &server_request,
        TAO::Portable_Server::Servant_Upcall *servant_upcall,
        TAO_ServantBase *servant);

    // TAO_IDL - Generated from
    // be/be_visitor_operation/operation_sh.cpp:36

    virtual ::Test::Shutdown_Helper_ptr get_shutdown_helper (
      void) = 0;

    static void get_shutdown_helper_skel (
        TAO_ServerRequest &server_request,
        TAO::Portable_Server::Servant_Upcall *servant_upcall,
        TAO_ServantBase *servant);
  };

  // TAO_IDL - Generated from
  // be/be_visitor_interface/interface_sh.cpp:73

  class Shutdown_Helper;
  typedef Shutdown_Helper *Shutdown_Helper_ptr;

  class  Shutdown_Helper
    : public virtual PortableServer::ServantBase
  {
  protected:
    Shutdown_Helper (void);
  
  public:
    /// Useful for template programming.
    typedef ::Test::Shutdown_Helper _stub_type;
    typedef ::Test::Shutdown_Helper_ptr _stub_ptr_type;
    typedef ::Test::Shutdown_Helper_var _stub_var_type;

    Shutdown_Helper (const Shutdown_Helper& rhs);
    virtual ~Shutdown_Helper (void);

    virtual ::CORBA::Boolean _is_a (const char* logical_type_id);

    virtual void _dispatch (
        TAO_ServerRequest & req,
        TAO::Portable_Server::Servant_Upcall *servant_upcall);
    
    ::Test::Shutdown_Helper *_this (void);
    
    virtual const char* _interface_repository_id (void) const;

    // TAO_IDL - Generated from
    // be/be_visitor_operation/operation_sh.cpp:36

    virtual void shutdown (
      void) = 0;

    static void shutdown_skel (
        TAO_ServerRequest &server_request,
        TAO::Portable_Server::Servant_Upcall *servant_upcall,
        TAO_ServantBase *servant);
  };

// TAO_IDL - Generated from
// be/be_visitor_module/module_sh.cpp:66

} // module Test

#include /**/ "ace/post.h"

#endif /* ifndef */

