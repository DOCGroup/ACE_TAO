// -*- C++ -*-
/**
 * Code generated by the The ACE ORB (TAO) IDL Compiler v2.4.1
 * TAO and the TAO IDL Compiler have been developed by:
 *       Center for Distributed Object Computing
 *       Washington University
 *       St. Louis, MO
 *       USA
 *       http://www.cs.wustl.edu/~schmidt/doc-center.html
 * and
 *       Distributed Object Computing Laboratory
 *       University of California at Irvine
 *       Irvine, CA
 *       USA
 * and
 *       Institute for Software Integrated Systems
 *       Vanderbilt University
 *       Nashville, TN
 *       USA
 *       http://www.isis.vanderbilt.edu/
 *
 * Information about TAO is available at:
 *     http://www.dre.vanderbilt.edu/~schmidt/TAO.html
 **/

// TAO_IDL - Generated from
// be/be_codegen.cpp:149

#ifndef _TAO_IDL_DYNANYC_PP1SF1_H_
#define _TAO_IDL_DYNANYC_PP1SF1_H_

#include /**/ "ace/pre.h"


#include /**/ "ace/config-all.h"

#if !defined (ACE_LACKS_PRAGMA_ONCE)
# pragma once
#endif /* ACE_LACKS_PRAGMA_ONCE */


#include "tao/AnyTypeCode/AnyTypeCode_methods.h"
#include "tao/AnyTypeCode/Any.h"
#include "tao/ORB.h"
#include "tao/Basic_Types.h"
#include "tao/AnyTypeCode/TypeCode.h"
#include "tao/AnyTypeCode/TypeCode_Constants.h"
#include "tao/AnyTypeCode/Any.h"
#include "tao/String_Manager_T.h"
#include "tao/VarOut_T.h"
#include "tao/Arg_Traits_T.h"
#include "tao/Basic_Arguments.h"
#include "tao/Special_Basic_Arguments.h"
#include "tao/Any_Insert_Policy_T.h"
#include "tao/Basic_Argument_T.h"
#include "tao/Fixed_Size_Argument_T.h"
#include "tao/Var_Size_Argument_T.h"
#include "tao/UB_String_Arguments.h"
#include /**/ "tao/Version.h"
#include /**/ "tao/Versioned_Namespace.h"

#if TAO_MAJOR_VERSION != 2 || TAO_MINOR_VERSION != 4 || TAO_MICRO_VERSION != 1
#error This file should be regenerated with TAO_IDL
#endif

#if defined (TAO_EXPORT_MACRO)
#undef TAO_EXPORT_MACRO
#endif
#define TAO_EXPORT_MACRO 

// TAO_IDL - Generated from
// be/be_visitor_module/module_ch.cpp:35

namespace DynAnyTest
{

  // TAO_IDL - Generated from
  // be/be_visitor_enum/enum_ch.cpp:44

  enum EventKind
  {
    ALARM_EVENT,
    LOG_EVENT
  };

  typedef EventKind &EventKind_out;

  // TAO_IDL - Generated from
  // be/be_visitor_typecode/typecode_decl.cpp:34

  extern  ::CORBA::TypeCode_ptr const _tc_EventKind;

  // TAO_IDL - Generated from
  // be/be_type.cpp:258

  class EventData;

  typedef
    ::TAO_Var_Var_T<
        EventData
      >
    EventData_var;

  typedef
    ::TAO_Out_T<
        EventData
      >
    EventData_out;

  class  EventData
  {
  public:
    EventData (void);
    EventData (const EventData &);
    ~EventData (void);

    EventData &operator= (const EventData &);

    // TAO_IDL - Generated from
    // be/be_visitor_union/discriminant_ch.cpp:67

    void _d (DynAnyTest::EventKind);
    DynAnyTest::EventKind _d (void) const;

    // TAO_IDL - Generated from
    // be/be_type.cpp:304

    
    typedef EventData_var _var_type;
    typedef EventData_out _out_type;

    static void _tao_any_destructor (void *);

    // TAO_IDL - Generated from
    // be/be_visitor_union_branch/public_ch.cpp:449

    void ev_data (const ::CORBA::Any &);
    const ::CORBA::Any &ev_data (void) const;
    ::CORBA::Any &ev_data (void);

    // TAO_IDL - Generated from
    // be/be_visitor_union_branch/public_ch.cpp:580

    void ev_desc (char *);
    void ev_desc (const char *);
    void ev_desc (const ::CORBA::String_var&);
    const char *ev_desc (void) const;

    // TAO_IDL - Generated from
    // be/be_visitor_union/union_ch.cpp:121

    void _default (void);
  private:
    DynAnyTest::EventKind disc_;

    union
    {
      // TAO_IDL - Generated from
      // be/be_visitor_union_branch/private_ch.cpp:377
      ::CORBA::Any *ev_data_;
      // TAO_IDL - Generated from
      // be/be_visitor_union_branch/private_ch.cpp:474
      char *ev_desc_;
    } u_;

    /// TAO extension - frees any allocated storage.
    void _reset (void);
  };

  // TAO_IDL - Generated from
  // be/be_visitor_typecode/typecode_decl.cpp:34

  extern  ::CORBA::TypeCode_ptr const _tc_EventData;

// TAO_IDL - Generated from
// be/be_visitor_module/module_ch.cpp:64

} // module DynAnyTest

// TAO_IDL - Generated from
// be/be_visitor_arg_traits.cpp:66

TAO_BEGIN_VERSIONED_NAMESPACE_DECL


// Arg traits specializations.
namespace TAO
{

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:902

  template<>
  class Arg_Traits< ::DynAnyTest::EventKind>
    : public
        Basic_Arg_Traits_T<
            ::DynAnyTest::EventKind,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:1056

  template<>
  class Arg_Traits< ::DynAnyTest::EventData>
    : public
        Var_Size_Arg_Traits_T<
            ::DynAnyTest::EventData,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_traits.cpp:60

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Traits specializations.
namespace TAO
{
}
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_enum/any_op_ch.cpp:36

#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace DynAnyTest
{
  

   void operator<<= (::CORBA::Any &, ::DynAnyTest::EventKind);
   ::CORBA::Boolean operator>>= (const ::CORBA::Any &, ::DynAnyTest::EventKind &);
}

#else


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



 void operator<<= (::CORBA::Any &, DynAnyTest::EventKind);
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, DynAnyTest::EventKind &);
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_union/any_op_ch.cpp:37



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace DynAnyTest
{
   void operator<<= (::CORBA::Any &, const ::DynAnyTest::EventData &); // copying version
   void operator<<= (::CORBA::Any &, ::DynAnyTest::EventData*); // noncopying version
   ::CORBA::Boolean operator>>= (const ::CORBA::Any &, ::DynAnyTest::EventData *&); // deprecated
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const ::DynAnyTest::EventData *&);
}

#else


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 void operator<<= (::CORBA::Any &, const DynAnyTest::EventData &); // copying version
 void operator<<= (::CORBA::Any &, DynAnyTest::EventData*); // noncopying version
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, DynAnyTest::EventData *&); // deprecated
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const DynAnyTest::EventData *&);
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_enum/cdr_op_ch.cpp:34


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 ::CORBA::Boolean operator<< (TAO_OutputCDR &strm, DynAnyTest::EventKind _tao_enumerator);
 ::CORBA::Boolean operator>> (TAO_InputCDR &strm, DynAnyTest::EventKind &_tao_enumerator);

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_union/cdr_op_ch.cpp:38


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 ::CORBA::Boolean operator<< (TAO_OutputCDR &, const DynAnyTest::EventData &);
 ::CORBA::Boolean operator>> (TAO_InputCDR &, DynAnyTest::EventData &);

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_codegen.cpp:1700
#if defined (__ACE_INLINE__)
#include "dynanyC.inl"
#endif /* defined INLINE */

#include /**/ "ace/post.h"

#endif /* ifndef */

