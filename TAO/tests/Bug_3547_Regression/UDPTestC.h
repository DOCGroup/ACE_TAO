// -*- C++ -*-
/**
 * Code generated by the The ACE ORB (TAO) IDL Compiler v2.4.1
 * TAO and the TAO IDL Compiler have been developed by:
 *       Center for Distributed Object Computing
 *       Washington University
 *       St. Louis, MO
 *       USA
 *       http://www.cs.wustl.edu/~schmidt/doc-center.html
 * and
 *       Distributed Object Computing Laboratory
 *       University of California at Irvine
 *       Irvine, CA
 *       USA
 * and
 *       Institute for Software Integrated Systems
 *       Vanderbilt University
 *       Nashville, TN
 *       USA
 *       http://www.isis.vanderbilt.edu/
 *
 * Information about TAO is available at:
 *     http://www.dre.vanderbilt.edu/~schmidt/TAO.html
 **/

// TAO_IDL - Generated from
// be/be_codegen.cpp:149

#ifndef _TAO_IDL_UDPTESTC_0SHTWX_H_
#define _TAO_IDL_UDPTESTC_0SHTWX_H_

#include /**/ "ace/pre.h"


#include /**/ "ace/config-all.h"

#if !defined (ACE_LACKS_PRAGMA_ONCE)
# pragma once
#endif /* ACE_LACKS_PRAGMA_ONCE */


#include "tao/ORB.h"
#include "tao/SystemException.h"
#include "tao/Basic_Types.h"
#include "tao/ORB_Constants.h"
#include "tao/Object.h"
#include "tao/Objref_VarOut_T.h"
#include "tao/Array_VarOut_T.h"
#include "tao/Arg_Traits_T.h"
#include "tao/Basic_Arguments.h"
#include "tao/Special_Basic_Arguments.h"
#include "tao/Any_Insert_Policy_T.h"
#include "tao/Fixed_Size_Argument_T.h"
#include "tao/Var_Size_Argument_T.h"
#include "tao/Object_Argument_T.h"
#include "tao/Fixed_Array_Argument_T.h"
#include "tao/Var_Array_Argument_T.h"
#include /**/ "tao/Version.h"
#include /**/ "tao/Versioned_Namespace.h"

#if TAO_MAJOR_VERSION != 2 || TAO_MINOR_VERSION != 4 || TAO_MICRO_VERSION != 1
#error This file should be regenerated with TAO_IDL
#endif

#if defined (TAO_EXPORT_MACRO)
#undef TAO_EXPORT_MACRO
#endif
#define TAO_EXPORT_MACRO

// TAO_IDL - Generated from
// be/be_visitor_root/root_ch.cpp:157
TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<typename T> class Narrow_Utils;
}
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_interface.cpp:748

#if !defined (_UDPTESTI__VAR_OUT_CH_)
#define _UDPTESTI__VAR_OUT_CH_

class UDPTestI;
typedef UDPTestI *UDPTestI_ptr;

typedef
  TAO_Objref_Var_T<
      UDPTestI
    >
  UDPTestI_var;

typedef
  TAO_Objref_Out_T<
      UDPTestI
    >
  UDPTestI_out;

#endif /* end #if !defined */

// TAO_IDL - Generated from
// be/be_visitor_interface/interface_ch.cpp:40

class  UDPTestI
  : public virtual ::CORBA::Object
{
public:
  friend class TAO::Narrow_Utils<UDPTestI>;

  // TAO_IDL - Generated from
  // be/be_type.cpp:304

  typedef UDPTestI_ptr _ptr_type;
  typedef UDPTestI_var _var_type;
  typedef UDPTestI_out _out_type;

  // The static operations.
  static UDPTestI_ptr _duplicate (UDPTestI_ptr obj);

  static void _tao_release (UDPTestI_ptr obj);

  static UDPTestI_ptr _narrow (::CORBA::Object_ptr obj);
  static UDPTestI_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
  static UDPTestI_ptr _nil (void);

  // TAO_IDL - Generated from
  // be/be_visitor_array/array_ch.cpp:52

  typedef ::CORBA::Octet BufferT[1000];
  typedef ::CORBA::Octet BufferT_slice;
  struct BufferT_tag {};


  typedef
    TAO_FixedArray_Var_T<
        BufferT,
        BufferT_slice,
        BufferT_tag
      >
    BufferT_var;

  typedef
    BufferT
    BufferT_out;

  typedef
    TAO_Array_Forany_T<
        BufferT,
        BufferT_slice,
        BufferT_tag
      >
    BufferT_forany;

  static BufferT_slice *
  BufferT_alloc (void);

  static void
  BufferT_free (
      BufferT_slice *_tao_slice);

  static BufferT_slice *
  BufferT_dup (
      const BufferT_slice *_tao_slice);

  static void
  BufferT_copy (
      BufferT_slice *_tao_to,
      const BufferT_slice *_tao_from);

  virtual void send (
    const ::UDPTestI::BufferT Msg);

  // TAO_IDL - Generated from
  // be/be_visitor_interface/interface_ch.cpp:137

  virtual ::CORBA::Boolean _is_a (const char *type_id);
  virtual const char* _interface_repository_id (void) const;
  virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);

protected:
  // Concrete interface only.
  UDPTestI (void);

  // Concrete non-local interface only.
  UDPTestI (
      ::IOP::IOR *ior,
      TAO_ORB_Core *orb_core);

  // Non-local interface only.
  UDPTestI (
      TAO_Stub *objref,
      ::CORBA::Boolean _tao_collocated = false,
      TAO_Abstract_ServantBase *servant = 0,
      TAO_ORB_Core *orb_core = 0);

  virtual ~UDPTestI (void);

private:
  // Private and unimplemented for concrete interfaces.
  UDPTestI (const UDPTestI &);

  void operator= (const UDPTestI &);
};

// TAO_IDL - Generated from
// be/be_visitor_arg_traits.cpp:66

TAO_BEGIN_VERSIONED_NAMESPACE_DECL


// Arg traits specializations.
namespace TAO
{

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:145

#if !defined (_UDPTESTI__ARG_TRAITS_)
#define _UDPTESTI__ARG_TRAITS_

  template<>
  class  Arg_Traits< ::UDPTestI>
    : public
        Object_Arg_Traits_T<
            ::UDPTestI_ptr,
            ::UDPTestI_var,
            ::UDPTestI_out,
            TAO::Objref_Traits<UDPTestI>,
            TAO::Any_Insert_Policy_Noop
          >
  {
  };

#endif /* end #if !defined */

  template<>
  class Arg_Traits< ::UDPTestI::BufferT_tag>
    : public
        Fixed_Array_Arg_Traits_T<
            ::UDPTestI::BufferT_var,
            ::UDPTestI::BufferT_forany,
            TAO::Any_Insert_Policy_Noop
          >
  {
  };
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_traits.cpp:60

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Traits specializations.
namespace TAO
{

#if !defined (_UDPTESTI__TRAITS_)
#define _UDPTESTI__TRAITS_

  template<>
  struct  Objref_Traits< ::UDPTestI>
  {
    static ::UDPTestI_ptr duplicate (
        ::UDPTestI_ptr p);
    static void release (
        ::UDPTestI_ptr p);
    static ::UDPTestI_ptr nil (void);
    static ::CORBA::Boolean marshal (
        const ::UDPTestI_ptr p,
        TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */
  template<>
  struct  Array_Traits<
      UDPTestI::BufferT_forany
    >
  {
    static void free (
        UDPTestI::BufferT_slice * _tao_slice);
    static UDPTestI::BufferT_slice * dup (
        const UDPTestI::BufferT_slice * _tao_slice);
    static void copy (
        UDPTestI::BufferT_slice * _tao_to,
        const UDPTestI::BufferT_slice * _tao_from);
    static UDPTestI::BufferT_slice * alloc (void);
    static void zero (
        UDPTestI::BufferT_slice * _tao_slice);
  };
}
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_interface/cdr_op_ch.cpp:41

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 ::CORBA::Boolean operator<< (TAO_OutputCDR &, const UDPTestI_ptr );
 ::CORBA::Boolean operator>> (TAO_InputCDR &, UDPTestI_ptr &);

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_array/cdr_op_ch.cpp:99


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 CORBA::Boolean operator<< (TAO_OutputCDR &strm, const UDPTestI::BufferT_forany &_tao_array);
 ::CORBA::Boolean operator>> (TAO_InputCDR &, UDPTestI::BufferT_forany &_tao_array);

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// be/be_codegen.cpp:1700
#if defined (__ACE_INLINE__)
#include "UDPTestC.inl"
#endif /* defined INLINE */

#include /**/ "ace/post.h"

#endif /* ifndef */

