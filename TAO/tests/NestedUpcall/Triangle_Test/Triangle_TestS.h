// -*- C++ -*-
/**
 * Code generated by the The ACE ORB (TAO) IDL Compiler v2.4.1
 * TAO and the TAO IDL Compiler have been developed by:
 *       Center for Distributed Object Computing
 *       Washington University
 *       St. Louis, MO
 *       USA
 *       http://www.cs.wustl.edu/~schmidt/doc-center.html
 * and
 *       Distributed Object Computing Laboratory
 *       University of California at Irvine
 *       Irvine, CA
 *       USA
 * and
 *       Institute for Software Integrated Systems
 *       Vanderbilt University
 *       Nashville, TN
 *       USA
 *       http://www.isis.vanderbilt.edu/
 *
 * Information about TAO is available at:
 *     http://www.dre.vanderbilt.edu/~schmidt/TAO.html
 **/

// TAO_IDL - Generated from
// be/be_codegen.cpp:458

#ifndef _TAO_IDL_TRIANGLE_TESTS_UZWSC5_H_
#define _TAO_IDL_TRIANGLE_TESTS_UZWSC5_H_

#include /**/ "ace/pre.h"

#include "Triangle_TestC.h"
#include "tao/PortableServer/Basic_SArguments.h"
#include "tao/PortableServer/Special_Basic_SArguments.h"
#include "tao/PortableServer/Fixed_Size_SArgument_T.h"
#include "tao/PortableServer/Var_Size_SArgument_T.h"
#include "tao/PortableServer/Object_SArg_Traits.h"
#include "tao/PortableServer/UB_String_SArguments.h"
#include "tao/PortableServer/Object_SArg_Traits.h"
#include "tao/PortableServer/get_arg.h"
#include "tao/Special_Basic_Arguments.h"
#include "tao/UB_String_Arguments.h"

#if !defined (ACE_LACKS_PRAGMA_ONCE)
# pragma once
#endif /* ACE_LACKS_PRAGMA_ONCE */

#include "tao/PortableServer/PortableServer.h"
#include "tao/PortableServer/Servant_Base.h"

// TAO_IDL - Generated from
// be/be_visitor_arg_traits.cpp:66

TAO_BEGIN_VERSIONED_NAMESPACE_DECL


// Arg traits specializations.
namespace TAO
{

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:145

#if !defined (_INITIATOR__SARG_TRAITS_)
#define _INITIATOR__SARG_TRAITS_

  template<>
  class  SArg_Traits< ::Initiator>
    : public
        Object_SArg_Traits_T<
            ::Initiator_ptr,
            ::Initiator_var,
            ::Initiator_out,
            TAO::Any_Insert_Policy_Noop
          >
  {
  };

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:145

#if !defined (_OBJECT_A__SARG_TRAITS_)
#define _OBJECT_A__SARG_TRAITS_

  template<>
  class  SArg_Traits< ::Object_A>
    : public
        Object_SArg_Traits_T<
            ::Object_A_ptr,
            ::Object_A_var,
            ::Object_A_out,
            TAO::Any_Insert_Policy_Noop
          >
  {
  };

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:145

#if !defined (_OBJECT_B__SARG_TRAITS_)
#define _OBJECT_B__SARG_TRAITS_

  template<>
  class  SArg_Traits< ::Object_B>
    : public
        Object_SArg_Traits_T<
            ::Object_B_ptr,
            ::Object_B_var,
            ::Object_B_out,
            TAO::Any_Insert_Policy_Noop
          >
  {
  };

#endif /* end #if !defined */
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_interface/interface_sh.cpp:73

class POA_Initiator;
typedef POA_Initiator *POA_Initiator_ptr;

class  POA_Initiator
  : public virtual PortableServer::ServantBase
{
protected:
  POA_Initiator (void);

public:
  /// Useful for template programming.
  typedef ::Initiator _stub_type;
  typedef ::Initiator_ptr _stub_ptr_type;
  typedef ::Initiator_var _stub_var_type;

  POA_Initiator (const POA_Initiator& rhs);
  virtual ~POA_Initiator (void);

  virtual ::CORBA::Boolean _is_a (const char* logical_type_id);

  virtual void _dispatch (
      TAO_ServerRequest & req,
      TAO::Portable_Server::Servant_Upcall *servant_upcall);

  ::Initiator *_this (void);

  virtual const char* _interface_repository_id (void) const;

  // TAO_IDL - Generated from
  // be/be_visitor_operation/operation_sh.cpp:36

  virtual void foo_object_B (
    void) = 0;

  static void foo_object_B_skel (
      TAO_ServerRequest &server_request,
      TAO::Portable_Server::Servant_Upcall *servant_upcall,
      TAO_ServantBase *servant);
};

// TAO_IDL - Generated from
// be/be_visitor_interface/interface_sh.cpp:73

class POA_Object_A;
typedef POA_Object_A *POA_Object_A_ptr;

class  POA_Object_A
  : public virtual PortableServer::ServantBase
{
protected:
  POA_Object_A (void);

public:
  /// Useful for template programming.
  typedef ::Object_A _stub_type;
  typedef ::Object_A_ptr _stub_ptr_type;
  typedef ::Object_A_var _stub_var_type;

  POA_Object_A (const POA_Object_A& rhs);
  virtual ~POA_Object_A (void);

  virtual ::CORBA::Boolean _is_a (const char* logical_type_id);

  virtual void _dispatch (
      TAO_ServerRequest & req,
      TAO::Portable_Server::Servant_Upcall *servant_upcall);

  ::Object_A *_this (void);

  virtual const char* _interface_repository_id (void) const;

  // TAO_IDL - Generated from
  // be/be_visitor_operation/operation_sh.cpp:36

  virtual void foo (
    ::Initiator_ptr theInitiator) = 0;

  static void foo_skel (
      TAO_ServerRequest &server_request,
      TAO::Portable_Server::Servant_Upcall *servant_upcall,
      TAO_ServantBase *servant);

  // TAO_IDL - Generated from
  // be/be_visitor_operation/operation_sh.cpp:36

  virtual void finish (
    void) = 0;

  static void finish_skel (
      TAO_ServerRequest &server_request,
      TAO::Portable_Server::Servant_Upcall *servant_upcall,
      TAO_ServantBase *servant);

  // TAO_IDL - Generated from
  // be/be_visitor_operation/operation_sh.cpp:36

  virtual void shutdown (
    void) = 0;

  static void shutdown_skel (
      TAO_ServerRequest &server_request,
      TAO::Portable_Server::Servant_Upcall *servant_upcall,
      TAO_ServantBase *servant);
};

// TAO_IDL - Generated from
// be/be_visitor_interface/interface_sh.cpp:73

class POA_Object_B;
typedef POA_Object_B *POA_Object_B_ptr;

class  POA_Object_B
  : public virtual PortableServer::ServantBase
{
protected:
  POA_Object_B (void);

public:
  /// Useful for template programming.
  typedef ::Object_B _stub_type;
  typedef ::Object_B_ptr _stub_ptr_type;
  typedef ::Object_B_var _stub_var_type;

  POA_Object_B (const POA_Object_B& rhs);
  virtual ~POA_Object_B (void);

  virtual ::CORBA::Boolean _is_a (const char* logical_type_id);

  virtual void _dispatch (
      TAO_ServerRequest & req,
      TAO::Portable_Server::Servant_Upcall *servant_upcall);

  ::Object_B *_this (void);

  virtual const char* _interface_repository_id (void) const;

  // TAO_IDL - Generated from
  // be/be_visitor_operation/operation_sh.cpp:36

  virtual void foo (
    ::Object_A_ptr theObject_A) = 0;

  static void foo_skel (
      TAO_ServerRequest &server_request,
      TAO::Portable_Server::Servant_Upcall *servant_upcall,
      TAO_ServantBase *servant);

  // TAO_IDL - Generated from
  // be/be_visitor_operation/operation_sh.cpp:36

  virtual void shutdown (
    void) = 0;

  static void shutdown_skel (
      TAO_ServerRequest &server_request,
      TAO::Portable_Server::Servant_Upcall *servant_upcall,
      TAO_ServantBase *servant);
};

#include /**/ "ace/post.h"

#endif /* ifndef */

