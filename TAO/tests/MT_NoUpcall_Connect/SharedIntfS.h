// -*- C++ -*-
/**
 * Code generated by the The ACE ORB (TAO) IDL Compiler v2.4.1
 * TAO and the TAO IDL Compiler have been developed by:
 *       Center for Distributed Object Computing
 *       Washington University
 *       St. Louis, MO
 *       USA
 *       http://www.cs.wustl.edu/~schmidt/doc-center.html
 * and
 *       Distributed Object Computing Laboratory
 *       University of California at Irvine
 *       Irvine, CA
 *       USA
 * and
 *       Institute for Software Integrated Systems
 *       Vanderbilt University
 *       Nashville, TN
 *       USA
 *       http://www.isis.vanderbilt.edu/
 *
 * Information about TAO is available at:
 *     http://www.dre.vanderbilt.edu/~schmidt/TAO.html
 **/

// TAO_IDL - Generated from
// be/be_codegen.cpp:458

#ifndef _TAO_IDL_SHAREDINTFS_TYRFB5_H_
#define _TAO_IDL_SHAREDINTFS_TYRFB5_H_

#include /**/ "ace/pre.h"

#include "SharedIntfC.h"
#include "tao/PortableServer/Basic_SArguments.h"
#include "tao/PortableServer/Special_Basic_SArguments.h"
#include "tao/PortableServer/Fixed_Size_SArgument_T.h"
#include "tao/PortableServer/Var_Size_SArgument_T.h"
#include "tao/PortableServer/Object_SArg_Traits.h"
#include "tao/PortableServer/UB_String_SArguments.h"
#include "tao/PortableServer/Object_SArg_Traits.h"
#include "tao/PortableServer/get_arg.h"
#include "tao/Special_Basic_Arguments.h"
#include "tao/UB_String_Arguments.h"

#if !defined (ACE_LACKS_PRAGMA_ONCE)
# pragma once
#endif /* ACE_LACKS_PRAGMA_ONCE */

#include "tao/Messaging/MessagingS.h"
#include "tao/PortableServer/PortableServer.h"
#include "tao/PortableServer/Servant_Base.h"

// TAO_IDL - Generated from
// be/be_visitor_arg_traits.cpp:66

TAO_BEGIN_VERSIONED_NAMESPACE_DECL


// Arg traits specializations.
namespace TAO
{

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:306

#if !defined (_MESSAGING_EXCEPTIONHOLDER__SARG_TRAITS_)
#define _MESSAGING_EXCEPTIONHOLDER__SARG_TRAITS_

  template<>
  class SArg_Traits< ::Messaging::ExceptionHolder>
    : public
        Object_SArg_Traits_T<
            ::Messaging::ExceptionHolder *,
            ::Messaging::ExceptionHolder_var,
            ::Messaging::ExceptionHolder_out,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:145

#if !defined (_TEST_IDL_SHAREDINTF__SARG_TRAITS_)
#define _TEST_IDL_SHAREDINTF__SARG_TRAITS_

  template<>
  class  SArg_Traits< ::Test_Idl::SharedIntf>
    : public
        Object_SArg_Traits_T<
            ::Test_Idl::SharedIntf_ptr,
            ::Test_Idl::SharedIntf_var,
            ::Test_Idl::SharedIntf_out,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:145

#if !defined (_TEST_IDL_AMI_SHAREDINTFHANDLER__SARG_TRAITS_)
#define _TEST_IDL_AMI_SHAREDINTFHANDLER__SARG_TRAITS_

  template<>
  class  SArg_Traits< ::Test_Idl::AMI_SharedIntfHandler>
    : public
        Object_SArg_Traits_T<
            ::Test_Idl::AMI_SharedIntfHandler_ptr,
            ::Test_Idl::AMI_SharedIntfHandler_var,
            ::Test_Idl::AMI_SharedIntfHandler_out,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

#endif /* end #if !defined */
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_module/module_sh.cpp:35

namespace POA_Test_Idl
{
  

  // TAO_IDL - Generated from
  // be/be_visitor_interface/interface_sh.cpp:73

  class SharedIntf;
  typedef SharedIntf *SharedIntf_ptr;

  class  SharedIntf
    : public virtual PortableServer::ServantBase
  {
  protected:
    SharedIntf (void);
  
  public:
    /// Useful for template programming.
    typedef ::Test_Idl::SharedIntf _stub_type;
    typedef ::Test_Idl::SharedIntf_ptr _stub_ptr_type;
    typedef ::Test_Idl::SharedIntf_var _stub_var_type;

    SharedIntf (const SharedIntf& rhs);
    virtual ~SharedIntf (void);

    virtual ::CORBA::Boolean _is_a (const char* logical_type_id);

    virtual void _dispatch (
        TAO_ServerRequest & req,
        TAO::Portable_Server::Servant_Upcall *servant_upcall);
    
    ::Test_Idl::SharedIntf *_this (void);
    
    virtual const char* _interface_repository_id (void) const;

    // TAO_IDL - Generated from
    // be/be_visitor_operation/operation_sh.cpp:36

    virtual void do_upcall (
      void) = 0;

    static void do_upcall_skel (
        TAO_ServerRequest &server_request,
        TAO::Portable_Server::Servant_Upcall *servant_upcall,
        TAO_ServantBase *servant);

    // TAO_IDL - Generated from
    // be/be_visitor_operation/operation_sh.cpp:36

    virtual void ping (
      void) = 0;

    static void ping_skel (
        TAO_ServerRequest &server_request,
        TAO::Portable_Server::Servant_Upcall *servant_upcall,
        TAO_ServantBase *servant);

    // TAO_IDL - Generated from
    // be/be_visitor_operation/operation_sh.cpp:36

    virtual void farewell (
      void) = 0;

    static void farewell_skel (
        TAO_ServerRequest &server_request,
        TAO::Portable_Server::Servant_Upcall *servant_upcall,
        TAO_ServantBase *servant);
  };

  // TAO_IDL - Generated from
  // be/be_visitor_interface/interface_sh.cpp:73

  class AMI_SharedIntfHandler;
  typedef AMI_SharedIntfHandler *AMI_SharedIntfHandler_ptr;

  class  AMI_SharedIntfHandler
    : public virtual POA_Messaging::ReplyHandler
  {
  protected:
    AMI_SharedIntfHandler (void);
  
  public:
    /// Useful for template programming.
    typedef ::Test_Idl::AMI_SharedIntfHandler _stub_type;
    typedef ::Test_Idl::AMI_SharedIntfHandler_ptr _stub_ptr_type;
    typedef ::Test_Idl::AMI_SharedIntfHandler_var _stub_var_type;

    AMI_SharedIntfHandler (const AMI_SharedIntfHandler& rhs);
    virtual ~AMI_SharedIntfHandler (void);

    virtual ::CORBA::Boolean _is_a (const char* logical_type_id);

    virtual void _dispatch (
        TAO_ServerRequest & req,
        TAO::Portable_Server::Servant_Upcall *servant_upcall);
    
    ::Test_Idl::AMI_SharedIntfHandler *_this (void);
    
    virtual const char* _interface_repository_id (void) const;

    // TAO_IDL - Generated from
    // be/be_visitor_operation/operation_sh.cpp:36

    virtual void do_upcall (
      void) = 0;

    static void do_upcall_skel (
        TAO_ServerRequest &server_request,
        TAO::Portable_Server::Servant_Upcall *servant_upcall,
        TAO_ServantBase *servant);

    // TAO_IDL - Generated from
    // be/be_visitor_operation/operation_sh.cpp:36

    virtual void do_upcall_excep (
      ::Messaging::ExceptionHolder * excep_holder) = 0;

    static void do_upcall_excep_skel (
        TAO_ServerRequest &server_request,
        TAO::Portable_Server::Servant_Upcall *servant_upcall,
        TAO_ServantBase *servant);

    // TAO_IDL - Generated from
    // be/be_visitor_operation/operation_sh.cpp:36

    virtual void ping (
      void) = 0;

    static void ping_skel (
        TAO_ServerRequest &server_request,
        TAO::Portable_Server::Servant_Upcall *servant_upcall,
        TAO_ServantBase *servant);

    // TAO_IDL - Generated from
    // be/be_visitor_operation/operation_sh.cpp:36

    virtual void ping_excep (
      ::Messaging::ExceptionHolder * excep_holder) = 0;

    static void ping_excep_skel (
        TAO_ServerRequest &server_request,
        TAO::Portable_Server::Servant_Upcall *servant_upcall,
        TAO_ServantBase *servant);
  };

// TAO_IDL - Generated from
// be/be_visitor_module/module_sh.cpp:66

} // module Test_Idl

#include /**/ "ace/post.h"

#endif /* ifndef */

