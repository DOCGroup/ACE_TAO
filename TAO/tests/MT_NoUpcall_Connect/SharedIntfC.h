// -*- C++ -*-
/**
 * Code generated by the The ACE ORB (TAO) IDL Compiler v2.4.1
 * TAO and the TAO IDL Compiler have been developed by:
 *       Center for Distributed Object Computing
 *       Washington University
 *       St. Louis, MO
 *       USA
 *       http://www.cs.wustl.edu/~schmidt/doc-center.html
 * and
 *       Distributed Object Computing Laboratory
 *       University of California at Irvine
 *       Irvine, CA
 *       USA
 * and
 *       Institute for Software Integrated Systems
 *       Vanderbilt University
 *       Nashville, TN
 *       USA
 *       http://www.isis.vanderbilt.edu/
 *
 * Information about TAO is available at:
 *     http://www.dre.vanderbilt.edu/~schmidt/TAO.html
 **/

// TAO_IDL - Generated from
// be/be_codegen.cpp:149

#ifndef _TAO_IDL_SHAREDINTFC_JQ1BTL_H_
#define _TAO_IDL_SHAREDINTFC_JQ1BTL_H_

#include /**/ "ace/pre.h"


#include /**/ "ace/config-all.h"

#if !defined (ACE_LACKS_PRAGMA_ONCE)
# pragma once
#endif /* ACE_LACKS_PRAGMA_ONCE */


#include "tao/AnyTypeCode/AnyTypeCode_methods.h"
#include "tao/AnyTypeCode/Any.h"
#include "tao/Valuetype/ValueBase.h"
#include "tao/Valuetype/Valuetype_Adapter_Factory_Impl.h"
#include "tao/ORB.h"
#include "tao/SystemException.h"
#include "tao/Basic_Types.h"
#include "tao/ORB_Constants.h"
#include "tao/Object.h"
#include "tao/Messaging/Messaging.h"
#include "tao/Valuetype/Value_VarOut_T.h"
#include "tao/Objref_VarOut_T.h"
#include "tao/Arg_Traits_T.h"
#include "tao/Basic_Arguments.h"
#include "tao/Special_Basic_Arguments.h"
#include "tao/Any_Insert_Policy_T.h"
#include "tao/Fixed_Size_Argument_T.h"
#include "tao/Var_Size_Argument_T.h"
#include "tao/Object_Argument_T.h"
#include /**/ "tao/Version.h"
#include /**/ "tao/Versioned_Namespace.h"

#if TAO_MAJOR_VERSION != 2 || TAO_MINOR_VERSION != 4 || TAO_MICRO_VERSION != 1
#error This file should be regenerated with TAO_IDL
#endif

#if defined (TAO_EXPORT_MACRO)
#undef TAO_EXPORT_MACRO
#endif
#define TAO_EXPORT_MACRO

// TAO_IDL - Generated from
// be/be_visitor_root/root_ch.cpp:157
TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<typename T> class Narrow_Utils;
}
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_module/module_ch.cpp:35

namespace Test_Idl
{

  // TAO_IDL - Generated from
  // be/be_interface.cpp:748

#if !defined (_TEST_IDL_SHAREDINTF__VAR_OUT_CH_)
#define _TEST_IDL_SHAREDINTF__VAR_OUT_CH_

  class AMI_SharedIntfHandler;
  typedef AMI_SharedIntfHandler *AMI_SharedIntfHandler_ptr;

  class SharedIntf;
  typedef SharedIntf *SharedIntf_ptr;

  typedef
    TAO_Objref_Var_T<
        SharedIntf
      >
    SharedIntf_var;

  typedef
    TAO_Objref_Out_T<
        SharedIntf
      >
    SharedIntf_out;

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // be/be_visitor_interface/interface_ch.cpp:40

  class  SharedIntf
    : public virtual ::CORBA::Object
  {
  public:
    friend class TAO::Narrow_Utils<SharedIntf>;

    // TAO_IDL - Generated from
    // be/be_type.cpp:304

    typedef SharedIntf_ptr _ptr_type;
    typedef SharedIntf_var _var_type;
    typedef SharedIntf_out _out_type;

    static void _tao_any_destructor (void *);

    // The static operations.
    static SharedIntf_ptr _duplicate (SharedIntf_ptr obj);

    static void _tao_release (SharedIntf_ptr obj);

    static SharedIntf_ptr _narrow (::CORBA::Object_ptr obj);
    static SharedIntf_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
    static SharedIntf_ptr _nil (void);

    virtual void do_upcall (
      void);

    virtual void ping (
      void);

    virtual void farewell (
      void);

    virtual void sendc_do_upcall (
      ::Test_Idl::AMI_SharedIntfHandler_ptr ami_handler);

    virtual void sendc_ping (
      ::Test_Idl::AMI_SharedIntfHandler_ptr ami_handler);

    // TAO_IDL - Generated from
    // be/be_visitor_interface/interface_ch.cpp:137

    virtual ::CORBA::Boolean _is_a (const char *type_id);
    virtual const char* _interface_repository_id (void) const;
    virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);

  protected:
    // Concrete interface only.
    SharedIntf (void);

    // Concrete non-local interface only.
    SharedIntf (
        ::IOP::IOR *ior,
        TAO_ORB_Core *orb_core);

    // Non-local interface only.
    SharedIntf (
        TAO_Stub *objref,
        ::CORBA::Boolean _tao_collocated = false,
        TAO_Abstract_ServantBase *servant = 0,
        TAO_ORB_Core *orb_core = 0);

    virtual ~SharedIntf (void);

  private:
    // Private and unimplemented for concrete interfaces.
    SharedIntf (const SharedIntf &);

    void operator= (const SharedIntf &);
  };

  // TAO_IDL - Generated from
  // be/be_visitor_typecode/typecode_decl.cpp:34

  extern  ::CORBA::TypeCode_ptr const _tc_SharedIntf;

  // TAO_IDL - Generated from
  // be/be_interface.cpp:748

#if !defined (_TEST_IDL_AMI_SHAREDINTFHANDLER__VAR_OUT_CH_)
#define _TEST_IDL_AMI_SHAREDINTFHANDLER__VAR_OUT_CH_

  class AMI_SharedIntfHandler;
  typedef AMI_SharedIntfHandler *AMI_SharedIntfHandler_ptr;

  typedef
    TAO_Objref_Var_T<
        AMI_SharedIntfHandler
      >
    AMI_SharedIntfHandler_var;

  typedef
    TAO_Objref_Out_T<
        AMI_SharedIntfHandler
      >
    AMI_SharedIntfHandler_out;

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // be/be_visitor_interface/interface_ch.cpp:40

  class  AMI_SharedIntfHandler
    : public virtual ::Messaging::ReplyHandler

  {
  public:
    friend class TAO::Narrow_Utils<AMI_SharedIntfHandler>;

    // TAO_IDL - Generated from
    // be/be_type.cpp:304

    typedef AMI_SharedIntfHandler_ptr _ptr_type;
    typedef AMI_SharedIntfHandler_var _var_type;
    typedef AMI_SharedIntfHandler_out _out_type;

    static void _tao_any_destructor (void *);

    // The static operations.
    static AMI_SharedIntfHandler_ptr _duplicate (AMI_SharedIntfHandler_ptr obj);

    static void _tao_release (AMI_SharedIntfHandler_ptr obj);

    static AMI_SharedIntfHandler_ptr _narrow (::CORBA::Object_ptr obj);
    static AMI_SharedIntfHandler_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
    static AMI_SharedIntfHandler_ptr _nil (void);

    virtual void do_upcall (
      void);

    static void
    do_upcall_reply_stub (
      TAO_InputCDR &_tao_reply_cdr,
      ::Messaging::ReplyHandler_ptr _tao_reply_handler,
      ::CORBA::ULong reply_status);

    virtual void do_upcall_excep (
      ::Messaging::ExceptionHolder * excep_holder);

    virtual void ping (
      void);

    static void
    ping_reply_stub (
      TAO_InputCDR &_tao_reply_cdr,
      ::Messaging::ReplyHandler_ptr _tao_reply_handler,
      ::CORBA::ULong reply_status);

    virtual void ping_excep (
      ::Messaging::ExceptionHolder * excep_holder);

    // TAO_IDL - Generated from
    // be/be_visitor_interface/interface_ch.cpp:137

    virtual ::CORBA::Boolean _is_a (const char *type_id);
    virtual const char* _interface_repository_id (void) const;
    virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);

  protected:
    // Concrete interface only.
    AMI_SharedIntfHandler (void);

    // Concrete non-local interface only.
    AMI_SharedIntfHandler (
        ::IOP::IOR *ior,
        TAO_ORB_Core *orb_core);

    // Non-local interface only.
    AMI_SharedIntfHandler (
        TAO_Stub *objref,
        ::CORBA::Boolean _tao_collocated = false,
        TAO_Abstract_ServantBase *servant = 0,
        TAO_ORB_Core *orb_core = 0);

    virtual ~AMI_SharedIntfHandler (void);

  private:
    // Private and unimplemented for concrete interfaces.
    AMI_SharedIntfHandler (const AMI_SharedIntfHandler &);

    void operator= (const AMI_SharedIntfHandler &);
  };

  // TAO_IDL - Generated from
  // be/be_visitor_typecode/typecode_decl.cpp:34

  extern  ::CORBA::TypeCode_ptr const _tc_AMI_SharedIntfHandler;

// TAO_IDL - Generated from
// be/be_visitor_module/module_ch.cpp:64

} // module Test_Idl

// TAO_IDL - Generated from
// be/be_visitor_arg_traits.cpp:66

TAO_BEGIN_VERSIONED_NAMESPACE_DECL


// Arg traits specializations.
namespace TAO
{

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:306

#if !defined (_MESSAGING_EXCEPTIONHOLDER__ARG_TRAITS_)
#define _MESSAGING_EXCEPTIONHOLDER__ARG_TRAITS_

  template<>
  class Arg_Traits< ::Messaging::ExceptionHolder>
    : public
        Object_Arg_Traits_T<
            ::Messaging::ExceptionHolder *,
            ::Messaging::ExceptionHolder_var,
            ::Messaging::ExceptionHolder_out,
            TAO::Value_Traits<Messaging::ExceptionHolder>,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:145

#if !defined (_TEST_IDL_SHAREDINTF__ARG_TRAITS_)
#define _TEST_IDL_SHAREDINTF__ARG_TRAITS_

  template<>
  class  Arg_Traits< ::Test_Idl::SharedIntf>
    : public
        Object_Arg_Traits_T<
            ::Test_Idl::SharedIntf_ptr,
            ::Test_Idl::SharedIntf_var,
            ::Test_Idl::SharedIntf_out,
            TAO::Objref_Traits<Test_Idl::SharedIntf>,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:145

#if !defined (_TEST_IDL_AMI_SHAREDINTFHANDLER__ARG_TRAITS_)
#define _TEST_IDL_AMI_SHAREDINTFHANDLER__ARG_TRAITS_

  template<>
  class  Arg_Traits< ::Test_Idl::AMI_SharedIntfHandler>
    : public
        Object_Arg_Traits_T<
            ::Test_Idl::AMI_SharedIntfHandler_ptr,
            ::Test_Idl::AMI_SharedIntfHandler_var,
            ::Test_Idl::AMI_SharedIntfHandler_out,
            TAO::Objref_Traits<Test_Idl::AMI_SharedIntfHandler>,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

#endif /* end #if !defined */
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_valuetype/obv_module.cpp:44

namespace OBV_Test_Idl
{
}

// TAO_IDL - Generated from
// be/be_visitor_traits.cpp:60

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Traits specializations.
namespace TAO
{

#if !defined (_TEST_IDL_SHAREDINTF__TRAITS_)
#define _TEST_IDL_SHAREDINTF__TRAITS_

  template<>
  struct  Objref_Traits< ::Test_Idl::SharedIntf>
  {
    static ::Test_Idl::SharedIntf_ptr duplicate (
        ::Test_Idl::SharedIntf_ptr p);
    static void release (
        ::Test_Idl::SharedIntf_ptr p);
    static ::Test_Idl::SharedIntf_ptr nil (void);
    static ::CORBA::Boolean marshal (
        const ::Test_Idl::SharedIntf_ptr p,
        TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_TEST_IDL_AMI_SHAREDINTFHANDLER__TRAITS_)
#define _TEST_IDL_AMI_SHAREDINTFHANDLER__TRAITS_

  template<>
  struct  Objref_Traits< ::Test_Idl::AMI_SharedIntfHandler>
  {
    static ::Test_Idl::AMI_SharedIntfHandler_ptr duplicate (
        ::Test_Idl::AMI_SharedIntfHandler_ptr p);
    static void release (
        ::Test_Idl::AMI_SharedIntfHandler_ptr p);
    static ::Test_Idl::AMI_SharedIntfHandler_ptr nil (void);
    static ::CORBA::Boolean marshal (
        const ::Test_Idl::AMI_SharedIntfHandler_ptr p,
        TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */
}
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_interface/any_op_ch.cpp:41



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace Test_Idl
{
   void operator<<= ( ::CORBA::Any &, SharedIntf_ptr); // copying
   void operator<<= ( ::CORBA::Any &, SharedIntf_ptr *); // non-copying
   ::CORBA::Boolean operator>>= (const ::CORBA::Any &, SharedIntf_ptr &);
}

#else


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 void operator<<= (::CORBA::Any &, Test_Idl::SharedIntf_ptr); // copying
 void operator<<= (::CORBA::Any &, Test_Idl::SharedIntf_ptr *); // non-copying
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, Test_Idl::SharedIntf_ptr &);
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_interface/any_op_ch.cpp:41



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace Test_Idl
{
   void operator<<= ( ::CORBA::Any &, AMI_SharedIntfHandler_ptr); // copying
   void operator<<= ( ::CORBA::Any &, AMI_SharedIntfHandler_ptr *); // non-copying
   ::CORBA::Boolean operator>>= (const ::CORBA::Any &, AMI_SharedIntfHandler_ptr &);
}

#else


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 void operator<<= (::CORBA::Any &, Test_Idl::AMI_SharedIntfHandler_ptr); // copying
 void operator<<= (::CORBA::Any &, Test_Idl::AMI_SharedIntfHandler_ptr *); // non-copying
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, Test_Idl::AMI_SharedIntfHandler_ptr &);
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_interface/cdr_op_ch.cpp:41

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 ::CORBA::Boolean operator<< (TAO_OutputCDR &, const Test_Idl::SharedIntf_ptr );
 ::CORBA::Boolean operator>> (TAO_InputCDR &, Test_Idl::SharedIntf_ptr &);

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_interface/cdr_op_ch.cpp:41

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 ::CORBA::Boolean operator<< (TAO_OutputCDR &, const Test_Idl::AMI_SharedIntfHandler_ptr );
 ::CORBA::Boolean operator>> (TAO_InputCDR &, Test_Idl::AMI_SharedIntfHandler_ptr &);

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_codegen.cpp:1700
#if defined (__ACE_INLINE__)
#include "SharedIntfC.inl"
#endif /* defined INLINE */

#include /**/ "ace/post.h"

#endif /* ifndef */

