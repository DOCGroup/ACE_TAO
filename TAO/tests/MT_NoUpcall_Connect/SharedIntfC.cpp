// -*- C++ -*-
/**
 * Code generated by the The ACE ORB (TAO) IDL Compiler v2.4.1
 * TAO and the TAO IDL Compiler have been developed by:
 *       Center for Distributed Object Computing
 *       Washington University
 *       St. Louis, MO
 *       USA
 *       http://www.cs.wustl.edu/~schmidt/doc-center.html
 * and
 *       Distributed Object Computing Laboratory
 *       University of California at Irvine
 *       Irvine, CA
 *       USA
 * and
 *       Institute for Software Integrated Systems
 *       Vanderbilt University
 *       Nashville, TN
 *       USA
 *       http://www.isis.vanderbilt.edu/
 *
 * Information about TAO is available at:
 *     http://www.dre.vanderbilt.edu/~schmidt/TAO.html
 **/

// TAO_IDL - Generated from
// be/be_codegen.cpp:373


#include "SharedIntfC.h"
#include "tao/AnyTypeCode/Null_RefCount_Policy.h"
#include "tao/AnyTypeCode/TypeCode_Constants.h"
#include "tao/AnyTypeCode/Alias_TypeCode_Static.h"
#include "tao/AnyTypeCode/Objref_TypeCode_Static.h"
#include "tao/AnyTypeCode/Value_TypeCode_Static.h"
#include "tao/AnyTypeCode/TypeCode_Value_Field.h"
#include "tao/CDR.h"
#include "tao/Exception_Data.h"
#include "tao/Invocation_Adapter.h"
#include "tao/Messaging/Asynch_Invocation_Adapter.h"
#include "tao/Messaging/ExceptionHolder_i.h"
#include "tao/Valuetype/ValueFactory.h"
#include "tao/Object_T.h"
#include "tao/CDR.h"
#include "tao/AnyTypeCode/Any.h"
#include "tao/AnyTypeCode/Any_Impl_T.h"
#include "ace/OS_NS_string.h"

#if !defined (__ACE_INLINE__)
#include "SharedIntfC.inl"
#endif /* !defined INLINE */

// TAO_IDL - Generated from
// be/be_visitor_interface/interface_cs.cpp:48

// Traits specializations for Test_Idl::SharedIntf.

Test_Idl::SharedIntf_ptr
TAO::Objref_Traits<Test_Idl::SharedIntf>::duplicate (
    Test_Idl::SharedIntf_ptr p)
{
  return Test_Idl::SharedIntf::_duplicate (p);
}

void
TAO::Objref_Traits<Test_Idl::SharedIntf>::release (
    Test_Idl::SharedIntf_ptr p)
{
  ::CORBA::release (p);
}

Test_Idl::SharedIntf_ptr
TAO::Objref_Traits<Test_Idl::SharedIntf>::nil (void)
{
  return Test_Idl::SharedIntf::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<Test_Idl::SharedIntf>::marshal (
    const Test_Idl::SharedIntf_ptr p,
    TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:88

void
Test_Idl::SharedIntf::do_upcall (
  void)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }

  TAO::Arg_Traits< void>::ret_val _tao_retval;

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      1,
      "do_upcall",
      9,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY,
      TAO::TAO_TWOWAY_INVOCATION
      ,
      TAO::TAO_SYNCHRONOUS_INVOCATION,
      false
    );

  _tao_call.invoke (0, 0);
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:88

void
Test_Idl::SharedIntf::ping (
  void)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }

  TAO::Arg_Traits< void>::ret_val _tao_retval;

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      1,
      "ping",
      4,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY,
      TAO::TAO_TWOWAY_INVOCATION
      ,
      TAO::TAO_SYNCHRONOUS_INVOCATION,
      false
    );

  _tao_call.invoke (0, 0);
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:88

void
Test_Idl::SharedIntf::farewell (
  void)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }

  TAO::Arg_Traits< void>::ret_val _tao_retval;

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      1,
      "farewell",
      8,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY,
      TAO::TAO_ONEWAY_INVOCATION,
      TAO::TAO_SYNCHRONOUS_INVOCATION,
      false
    );

  _tao_call.invoke (0, 0);
}

// TAO_IDL - Generated from
// be/be_visitor_operation/ami_cs.cpp:55

void
Test_Idl::SharedIntf::sendc_do_upcall (
  ::Test_Idl::AMI_SharedIntfHandler_ptr ami_handler)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }



  TAO::Argument ** _the_tao_operation_signature = 0;

  TAO::Asynch_Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      0,
      "do_upcall",
      9,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY
    );

  _tao_call.invoke (
      ami_handler,
      &Test_Idl::AMI_SharedIntfHandler::do_upcall_reply_stub
    );
}

// TAO_IDL - Generated from
// be/be_visitor_operation/ami_cs.cpp:55

void
Test_Idl::SharedIntf::sendc_ping (
  ::Test_Idl::AMI_SharedIntfHandler_ptr ami_handler)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }



  TAO::Argument ** _the_tao_operation_signature = 0;

  TAO::Asynch_Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      0,
      "ping",
      4,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY
    );

  _tao_call.invoke (
      ami_handler,
      &Test_Idl::AMI_SharedIntfHandler::ping_reply_stub
    );
}

Test_Idl::SharedIntf::SharedIntf (void)
{
}

Test_Idl::SharedIntf::~SharedIntf (void)
{
}

void
Test_Idl::SharedIntf::_tao_any_destructor (void *_tao_void_pointer)
{
  SharedIntf *_tao_tmp_pointer =
    static_cast<SharedIntf *> (_tao_void_pointer);
  ::CORBA::release (_tao_tmp_pointer);
}

Test_Idl::SharedIntf_ptr
Test_Idl::SharedIntf::_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return
    TAO::Narrow_Utils<SharedIntf>::narrow (
        _tao_objref,
        "IDL:Test_Idl/SharedIntf:1.0");
}

Test_Idl::SharedIntf_ptr
Test_Idl::SharedIntf::_unchecked_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return
    TAO::Narrow_Utils<SharedIntf>::unchecked_narrow (
        _tao_objref);
}

Test_Idl::SharedIntf_ptr
Test_Idl::SharedIntf::_nil (void)
{
  return 0;
}

Test_Idl::SharedIntf_ptr
Test_Idl::SharedIntf::_duplicate (SharedIntf_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  return obj;
}

void
Test_Idl::SharedIntf::_tao_release (SharedIntf_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
Test_Idl::SharedIntf::_is_a (const char *value)
{
  if (
      ACE_OS::strcmp (
          value,
          "IDL:Test_Idl/SharedIntf:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        ) == 0
    )
    {
      return true; // success using local knowledge
    }
  else
    {
      return this->::CORBA::Object::_is_a (value);
    }
}

const char* Test_Idl::SharedIntf::_interface_repository_id (void) const
{
  return "IDL:Test_Idl/SharedIntf:1.0";
}

::CORBA::Boolean
Test_Idl::SharedIntf::marshal (TAO_OutputCDR &cdr)
{
  return (cdr << this);
}

// TAO_IDL - Generated from
// be/be_visitor_typecode/objref_typecode.cpp:70

static TAO::TypeCode::Objref<char const *,
                             TAO::Null_RefCount_Policy>
  _tao_tc_Test_Idl_SharedIntf (
    ::CORBA::tk_objref,
    "IDL:Test_Idl/SharedIntf:1.0",
    "SharedIntf");


namespace Test_Idl
{
  ::CORBA::TypeCode_ptr const _tc_SharedIntf =
    &_tao_tc_Test_Idl_SharedIntf;
}

// TAO_IDL - Generated from
// be/be_visitor_interface/interface_cs.cpp:48

// Traits specializations for Test_Idl::AMI_SharedIntfHandler.

Test_Idl::AMI_SharedIntfHandler_ptr
TAO::Objref_Traits<Test_Idl::AMI_SharedIntfHandler>::duplicate (
    Test_Idl::AMI_SharedIntfHandler_ptr p)
{
  return Test_Idl::AMI_SharedIntfHandler::_duplicate (p);
}

void
TAO::Objref_Traits<Test_Idl::AMI_SharedIntfHandler>::release (
    Test_Idl::AMI_SharedIntfHandler_ptr p)
{
  ::CORBA::release (p);
}

Test_Idl::AMI_SharedIntfHandler_ptr
TAO::Objref_Traits<Test_Idl::AMI_SharedIntfHandler>::nil (void)
{
  return Test_Idl::AMI_SharedIntfHandler::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<Test_Idl::AMI_SharedIntfHandler>::marshal (
    const Test_Idl::AMI_SharedIntfHandler_ptr p,
    TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:88

void
Test_Idl::AMI_SharedIntfHandler::do_upcall (
  void)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }

  TAO::Arg_Traits< void>::ret_val _tao_retval;

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      1,
      "do_upcall",
      9,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY,
      TAO::TAO_TWOWAY_INVOCATION
      ,
      TAO::TAO_SYNCHRONOUS_INVOCATION,
      false
    );

  _tao_call.invoke (0, 0);
}

void
Test_Idl::AMI_SharedIntfHandler::do_upcall_reply_stub (
  TAO_InputCDR &_tao_in,
  ::Messaging::ReplyHandler_ptr _tao_reply_handler,
  ::CORBA::ULong reply_status)
{
  // Retrieve Reply Handler object.
  Test_Idl::AMI_SharedIntfHandler_var _tao_reply_handler_object =
    Test_Idl::AMI_SharedIntfHandler::_narrow (_tao_reply_handler);

  // Exception handling
  switch (reply_status)
  {
    case TAO_AMI_REPLY_OK:
    {
      // Demarshall all the arguments.
      // Invoke the call back method.
      _tao_reply_handler_object->do_upcall (

        );
      break;
    }
    case TAO_AMI_REPLY_USER_EXCEPTION:
    case TAO_AMI_REPLY_SYSTEM_EXCEPTION:
    {
      const ACE_Message_Block* cdr = _tao_in.start ();
      ::CORBA::OctetSeq _tao_marshaled_exception (
          static_cast <CORBA::ULong> (cdr->length ()),
          static_cast <CORBA::ULong> (cdr->length ()),
          reinterpret_cast <unsigned char*> (cdr->rd_ptr ()),
          0
        );
      ::Messaging::ExceptionHolder* exception_holder_ptr = 0;
      ACE_NEW (
          exception_holder_ptr,
          ::TAO::ExceptionHolder (
            (reply_status == TAO_AMI_REPLY_SYSTEM_EXCEPTION),
            _tao_in.byte_order (),
            _tao_marshaled_exception,
            0,
            0,
            _tao_in.char_translator (),
            _tao_in.wchar_translator ())
          );

      ::Messaging::ExceptionHolder_var exception_holder_var = exception_holder_ptr;
      _tao_reply_handler_object->do_upcall_excep (
          exception_holder_var
        );
      break;
    }
    case TAO_AMI_REPLY_NOT_OK:
      // @@ Michael: Not even the spec mentions this case.
      //             We have to think about this case.
      break;
  }
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:88

void
Test_Idl::AMI_SharedIntfHandler::do_upcall_excep (
  ::Messaging::ExceptionHolder * excep_holder)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }

  TAO::Arg_Traits< void>::ret_val _tao_retval;
  TAO::Arg_Traits< ::Messaging::ExceptionHolder>::in_arg_val _tao_excep_holder (excep_holder);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_excep_holder
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      2,
      "do_upcall_excep",
      15,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY

    );

  _tao_call.invoke (0, 0);
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:88

void
Test_Idl::AMI_SharedIntfHandler::ping (
  void)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }

  TAO::Arg_Traits< void>::ret_val _tao_retval;

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      1,
      "ping",
      4,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY,
      TAO::TAO_TWOWAY_INVOCATION
      ,
      TAO::TAO_SYNCHRONOUS_INVOCATION,
      false
    );

  _tao_call.invoke (0, 0);
}

void
Test_Idl::AMI_SharedIntfHandler::ping_reply_stub (
  TAO_InputCDR &_tao_in,
  ::Messaging::ReplyHandler_ptr _tao_reply_handler,
  ::CORBA::ULong reply_status)
{
  // Retrieve Reply Handler object.
  Test_Idl::AMI_SharedIntfHandler_var _tao_reply_handler_object =
    Test_Idl::AMI_SharedIntfHandler::_narrow (_tao_reply_handler);

  // Exception handling
  switch (reply_status)
  {
    case TAO_AMI_REPLY_OK:
    {
      // Demarshall all the arguments.
      // Invoke the call back method.
      _tao_reply_handler_object->ping (

        );
      break;
    }
    case TAO_AMI_REPLY_USER_EXCEPTION:
    case TAO_AMI_REPLY_SYSTEM_EXCEPTION:
    {
      const ACE_Message_Block* cdr = _tao_in.start ();
      ::CORBA::OctetSeq _tao_marshaled_exception (
          static_cast <CORBA::ULong> (cdr->length ()),
          static_cast <CORBA::ULong> (cdr->length ()),
          reinterpret_cast <unsigned char*> (cdr->rd_ptr ()),
          0
        );
      ::Messaging::ExceptionHolder* exception_holder_ptr = 0;
      ACE_NEW (
          exception_holder_ptr,
          ::TAO::ExceptionHolder (
            (reply_status == TAO_AMI_REPLY_SYSTEM_EXCEPTION),
            _tao_in.byte_order (),
            _tao_marshaled_exception,
            0,
            0,
            _tao_in.char_translator (),
            _tao_in.wchar_translator ())
          );

      ::Messaging::ExceptionHolder_var exception_holder_var = exception_holder_ptr;
      _tao_reply_handler_object->ping_excep (
          exception_holder_var
        );
      break;
    }
    case TAO_AMI_REPLY_NOT_OK:
      // @@ Michael: Not even the spec mentions this case.
      //             We have to think about this case.
      break;
  }
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:88

void
Test_Idl::AMI_SharedIntfHandler::ping_excep (
  ::Messaging::ExceptionHolder * excep_holder)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }

  TAO::Arg_Traits< void>::ret_val _tao_retval;
  TAO::Arg_Traits< ::Messaging::ExceptionHolder>::in_arg_val _tao_excep_holder (excep_holder);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_excep_holder
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      2,
      "ping_excep",
      10,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY

    );

  _tao_call.invoke (0, 0);
}

Test_Idl::AMI_SharedIntfHandler::AMI_SharedIntfHandler (void)
{
}

Test_Idl::AMI_SharedIntfHandler::~AMI_SharedIntfHandler (void)
{
}

void
Test_Idl::AMI_SharedIntfHandler::_tao_any_destructor (void *_tao_void_pointer)
{
  AMI_SharedIntfHandler *_tao_tmp_pointer =
    static_cast<AMI_SharedIntfHandler *> (_tao_void_pointer);
  ::CORBA::release (_tao_tmp_pointer);
}

Test_Idl::AMI_SharedIntfHandler_ptr
Test_Idl::AMI_SharedIntfHandler::_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return
    TAO::Narrow_Utils<AMI_SharedIntfHandler>::narrow (
        _tao_objref,
        "IDL:Test_Idl/AMI_SharedIntfHandler:1.0");
}

Test_Idl::AMI_SharedIntfHandler_ptr
Test_Idl::AMI_SharedIntfHandler::_unchecked_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return
    TAO::Narrow_Utils<AMI_SharedIntfHandler>::unchecked_narrow (
        _tao_objref);
}

Test_Idl::AMI_SharedIntfHandler_ptr
Test_Idl::AMI_SharedIntfHandler::_nil (void)
{
  return 0;
}

Test_Idl::AMI_SharedIntfHandler_ptr
Test_Idl::AMI_SharedIntfHandler::_duplicate (AMI_SharedIntfHandler_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  return obj;
}

void
Test_Idl::AMI_SharedIntfHandler::_tao_release (AMI_SharedIntfHandler_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
Test_Idl::AMI_SharedIntfHandler::_is_a (const char *value)
{
  if (
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/Messaging/ReplyHandler:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:Test_Idl/AMI_SharedIntfHandler:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        ) == 0
    )
    {
      return true; // success using local knowledge
    }
  else
    {
      return this->::CORBA::Object::_is_a (value);
    }
}

const char* Test_Idl::AMI_SharedIntfHandler::_interface_repository_id (void) const
{
  return "IDL:Test_Idl/AMI_SharedIntfHandler:1.0";
}

::CORBA::Boolean
Test_Idl::AMI_SharedIntfHandler::marshal (TAO_OutputCDR &cdr)
{
  return (cdr << this);
}

// TAO_IDL - Generated from
// be/be_visitor_typecode/objref_typecode.cpp:70

static TAO::TypeCode::Objref<char const *,
                             TAO::Null_RefCount_Policy>
  _tao_tc_Test_Idl_AMI_SharedIntfHandler (
    ::CORBA::tk_objref,
    "IDL:Test_Idl/AMI_SharedIntfHandler:1.0",
    "AMI_SharedIntfHandler");


namespace Test_Idl
{
  ::CORBA::TypeCode_ptr const _tc_AMI_SharedIntfHandler =
    &_tao_tc_Test_Idl_AMI_SharedIntfHandler;
}

// TAO_IDL - Generated from
// be/be_visitor_interface/any_op_cs.cpp:38
TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<Test_Idl::SharedIntf>::to_object (
      ::CORBA::Object_ptr &_tao_elem) const
  {
    _tao_elem = ::CORBA::Object::_duplicate (this->value_);
    return true;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace Test_Idl
{


  /// Copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      SharedIntf_ptr _tao_elem)
  {
    SharedIntf_ptr _tao_objptr =
      SharedIntf::_duplicate (_tao_elem);
    _tao_any <<= &_tao_objptr;
  }

  /// Non-copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      SharedIntf_ptr *_tao_elem)
  {
    TAO::Any_Impl_T<SharedIntf>::insert (
        _tao_any,
        SharedIntf::_tao_any_destructor,
        _tc_SharedIntf,
        *_tao_elem);
  }

  ::CORBA::Boolean
  operator>>= (
      const ::CORBA::Any &_tao_any,
      SharedIntf_ptr &_tao_elem)
  {
    return
      TAO::Any_Impl_T<SharedIntf>::extract (
          _tao_any,
          SharedIntf::_tao_any_destructor,
          _tc_SharedIntf,
          _tao_elem);
  }
}

#else

TAO_BEGIN_VERSIONED_NAMESPACE_DECL



/// Copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    Test_Idl::SharedIntf_ptr _tao_elem)
{
  Test_Idl::SharedIntf_ptr _tao_objptr =
    Test_Idl::SharedIntf::_duplicate (_tao_elem);
  _tao_any <<= &_tao_objptr;
}

/// Non-copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    Test_Idl::SharedIntf_ptr *_tao_elem)
{
  TAO::Any_Impl_T<Test_Idl::SharedIntf>::insert (
      _tao_any,
      Test_Idl::SharedIntf::_tao_any_destructor,
      Test_Idl::_tc_SharedIntf,
      *_tao_elem);
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    Test_Idl::SharedIntf_ptr &_tao_elem)
{
  return
    TAO::Any_Impl_T<Test_Idl::SharedIntf>::extract (
        _tao_any,
        Test_Idl::SharedIntf::_tao_any_destructor,
        Test_Idl::_tc_SharedIntf,
        _tao_elem);
}

TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_interface/any_op_cs.cpp:38
TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<Test_Idl::AMI_SharedIntfHandler>::to_object (
      ::CORBA::Object_ptr &_tao_elem) const
  {
    _tao_elem = ::CORBA::Object::_duplicate (this->value_);
    return true;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace Test_Idl
{


  /// Copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      AMI_SharedIntfHandler_ptr _tao_elem)
  {
    AMI_SharedIntfHandler_ptr _tao_objptr =
      AMI_SharedIntfHandler::_duplicate (_tao_elem);
    _tao_any <<= &_tao_objptr;
  }

  /// Non-copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      AMI_SharedIntfHandler_ptr *_tao_elem)
  {
    TAO::Any_Impl_T<AMI_SharedIntfHandler>::insert (
        _tao_any,
        AMI_SharedIntfHandler::_tao_any_destructor,
        _tc_AMI_SharedIntfHandler,
        *_tao_elem);
  }

  ::CORBA::Boolean
  operator>>= (
      const ::CORBA::Any &_tao_any,
      AMI_SharedIntfHandler_ptr &_tao_elem)
  {
    return
      TAO::Any_Impl_T<AMI_SharedIntfHandler>::extract (
          _tao_any,
          AMI_SharedIntfHandler::_tao_any_destructor,
          _tc_AMI_SharedIntfHandler,
          _tao_elem);
  }
}

#else

TAO_BEGIN_VERSIONED_NAMESPACE_DECL



/// Copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    Test_Idl::AMI_SharedIntfHandler_ptr _tao_elem)
{
  Test_Idl::AMI_SharedIntfHandler_ptr _tao_objptr =
    Test_Idl::AMI_SharedIntfHandler::_duplicate (_tao_elem);
  _tao_any <<= &_tao_objptr;
}

/// Non-copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    Test_Idl::AMI_SharedIntfHandler_ptr *_tao_elem)
{
  TAO::Any_Impl_T<Test_Idl::AMI_SharedIntfHandler>::insert (
      _tao_any,
      Test_Idl::AMI_SharedIntfHandler::_tao_any_destructor,
      Test_Idl::_tc_AMI_SharedIntfHandler,
      *_tao_elem);
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    Test_Idl::AMI_SharedIntfHandler_ptr &_tao_elem)
{
  return
    TAO::Any_Impl_T<Test_Idl::AMI_SharedIntfHandler>::extract (
        _tao_any,
        Test_Idl::AMI_SharedIntfHandler::_tao_any_destructor,
        Test_Idl::_tc_AMI_SharedIntfHandler,
        _tao_elem);
}

TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_interface/cdr_op_cs.cpp:51

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Test_Idl::SharedIntf_ptr _tao_objref)
{
  ::CORBA::Object_ptr _tao_corba_obj = _tao_objref;
  return (strm << _tao_corba_obj);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Test_Idl::SharedIntf_ptr &_tao_objref)
{
  ::CORBA::Object_var obj;

  if (!(strm >> obj.inout ()))
    {
      return false;
    }

  typedef ::Test_Idl::SharedIntf RHS_SCOPED_NAME;

  // Narrow to the right type.
  _tao_objref =
    TAO::Narrow_Utils<RHS_SCOPED_NAME>::unchecked_narrow (obj.in ());

  return true;
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_interface/cdr_op_cs.cpp:51

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Test_Idl::AMI_SharedIntfHandler_ptr _tao_objref)
{
  ::CORBA::Object_ptr _tao_corba_obj = _tao_objref;
  return (strm << _tao_corba_obj);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Test_Idl::AMI_SharedIntfHandler_ptr &_tao_objref)
{
  ::CORBA::Object_var obj;

  if (!(strm >> obj.inout ()))
    {
      return false;
    }

  typedef ::Test_Idl::AMI_SharedIntfHandler RHS_SCOPED_NAME;

  // Narrow to the right type.
  _tao_objref =
    TAO::Narrow_Utils<RHS_SCOPED_NAME>::unchecked_narrow (obj.in ());

  return true;
}

TAO_END_VERSIONED_NAMESPACE_DECL



