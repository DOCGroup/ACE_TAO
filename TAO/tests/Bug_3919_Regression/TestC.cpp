// -*- C++ -*-
/**
 * Code generated by the The ACE ORB (TAO) IDL Compiler v2.4.1
 * TAO and the TAO IDL Compiler have been developed by:
 *       Center for Distributed Object Computing
 *       Washington University
 *       St. Louis, MO
 *       USA
 *       http://www.cs.wustl.edu/~schmidt/doc-center.html
 * and
 *       Distributed Object Computing Laboratory
 *       University of California at Irvine
 *       Irvine, CA
 *       USA
 * and
 *       Institute for Software Integrated Systems
 *       Vanderbilt University
 *       Nashville, TN
 *       USA
 *       http://www.isis.vanderbilt.edu/
 *
 * Information about TAO is available at:
 *     http://www.dre.vanderbilt.edu/~schmidt/TAO.html
 **/

// TAO_IDL - Generated from
// be/be_codegen.cpp:373


#include "TestC.h"
#include "tao/AnyTypeCode/Null_RefCount_Policy.h"
#include "tao/AnyTypeCode/TypeCode_Constants.h"
#include "tao/AnyTypeCode/Alias_TypeCode_Static.h"
#include "tao/AnyTypeCode/Enum_TypeCode_Static.h"
#include "tao/AnyTypeCode/Objref_TypeCode_Static.h"
#include "tao/AnyTypeCode/Sequence_TypeCode_Static.h"
#include "tao/AnyTypeCode/String_TypeCode_Static.h"
#include "tao/AnyTypeCode/Struct_TypeCode_Static.h"
#include "tao/AnyTypeCode/TypeCode_Struct_Field.h"
#include "tao/AnyTypeCode/TypeCode_Case_T.h"
#include "tao/AnyTypeCode/Union_TypeCode_Static.h"
#include "tao/AnyTypeCode/Recursive_Type_TypeCode.h"
#include "tao/CDR.h"
#include "tao/Exception_Data.h"
#include "tao/Invocation_Adapter.h"
#include "tao/Object_T.h"
#include "tao/SystemException.h"
#include "tao/CDR.h"
#include "tao/AnyTypeCode/Any.h"
#include "tao/AnyTypeCode/Any_Impl_T.h"
#include "tao/AnyTypeCode/Any_Dual_Impl_T.h"
#include "tao/AnyTypeCode/Any_Basic_Impl_T.h"
#include "ace/OS_NS_string.h"

#if !defined (__ACE_INLINE__)
#include "TestC.inl"
#endif /* !defined INLINE */

// TAO_IDL - Generated from
// be/be_visitor_exception/exception_cs.cpp:98

Test::Recursive_Type_In_Any_Test_Failed::Recursive_Type_In_Any_Test_Failed (void)
  : ::CORBA::UserException (
        "IDL:Test/Recursive_Type_In_Any_Test_Failed:1.0",
        "Recursive_Type_In_Any_Test_Failed"
      )
{
}

Test::Recursive_Type_In_Any_Test_Failed::~Recursive_Type_In_Any_Test_Failed (void)
{
}

Test::Recursive_Type_In_Any_Test_Failed::Recursive_Type_In_Any_Test_Failed (const ::Test::Recursive_Type_In_Any_Test_Failed &_tao_excp)
  : ::CORBA::UserException (
        _tao_excp._rep_id (),
        _tao_excp._name ()
      )
{
}

Test::Recursive_Type_In_Any_Test_Failed&
Test::Recursive_Type_In_Any_Test_Failed::operator= (const ::Test::Recursive_Type_In_Any_Test_Failed &_tao_excp)
{
  this->::CORBA::UserException::operator= (_tao_excp);
  return *this;
}

void Test::Recursive_Type_In_Any_Test_Failed::_tao_any_destructor (void *_tao_void_pointer)
{
  Recursive_Type_In_Any_Test_Failed *_tao_tmp_pointer =
    static_cast<Recursive_Type_In_Any_Test_Failed *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

Test::Recursive_Type_In_Any_Test_Failed *
Test::Recursive_Type_In_Any_Test_Failed::_downcast ( ::CORBA::Exception *_tao_excp)
{
  return dynamic_cast<Recursive_Type_In_Any_Test_Failed *> (_tao_excp);
}

const Test::Recursive_Type_In_Any_Test_Failed *
Test::Recursive_Type_In_Any_Test_Failed::_downcast ( ::CORBA::Exception const *_tao_excp)
{
  return dynamic_cast<const Recursive_Type_In_Any_Test_Failed *> (_tao_excp);
}

::CORBA::Exception *Test::Recursive_Type_In_Any_Test_Failed::_alloc (void)
{
  ::CORBA::Exception *retval = 0;
  ACE_NEW_RETURN (retval, ::Test::Recursive_Type_In_Any_Test_Failed, 0);
  return retval;
}

::CORBA::Exception *
Test::Recursive_Type_In_Any_Test_Failed::_tao_duplicate (void) const
{
  ::CORBA::Exception *result = 0;
  ACE_NEW_RETURN (
      result,
      ::Test::Recursive_Type_In_Any_Test_Failed (*this),
      0
    );
  return result;
}

void Test::Recursive_Type_In_Any_Test_Failed::_raise (void) const
{
  throw *this;
}

void Test::Recursive_Type_In_Any_Test_Failed::_tao_encode (TAO_OutputCDR &cdr) const
{
  if (!(cdr << *this))
    {
      throw ::CORBA::MARSHAL ();
    }
}

void Test::Recursive_Type_In_Any_Test_Failed::_tao_decode (TAO_InputCDR &cdr)
{
  if (!(cdr >> *this))
    {
      throw ::CORBA::MARSHAL ();
    }
}

// TAO extension - the virtual _type method.
::CORBA::TypeCode_ptr Test::Recursive_Type_In_Any_Test_Failed::_tao_type (void) const
{
  return ::Test::_tc_Recursive_Type_In_Any_Test_Failed;
}

// TAO_IDL - Generated from
// be/be_visitor_typecode/struct_typecode.cpp:86

static TAO::TypeCode::Struct_Field<
  char const *,
  ::CORBA::TypeCode_ptr const *> const * const
    _tao_fields_Test_Recursive_Type_In_Any_Test_Failed = 0;

static TAO::TypeCode::Struct<
  char const *,
  ::CORBA::TypeCode_ptr const *,
  TAO::TypeCode::Struct_Field<
    char const *,
    ::CORBA::TypeCode_ptr const *> const *,
  TAO::Null_RefCount_Policy>
_tao_tc_Test_Recursive_Type_In_Any_Test_Failed (
  ::CORBA::tk_except,
  "IDL:Test/Recursive_Type_In_Any_Test_Failed:1.0",
  "Recursive_Type_In_Any_Test_Failed",
  _tao_fields_Test_Recursive_Type_In_Any_Test_Failed,
  0);


namespace Test
{
  ::CORBA::TypeCode_ptr const _tc_Recursive_Type_In_Any_Test_Failed =
    &_tao_tc_Test_Recursive_Type_In_Any_Test_Failed;
}

// TAO_IDL - Generated from
// be/be_visitor_exception/exception_cs.cpp:98

Test::Demarshaling_From_Any_Failed::Demarshaling_From_Any_Failed (void)
  : ::CORBA::UserException (
        "IDL:Test/Demarshaling_From_Any_Failed:1.0",
        "Demarshaling_From_Any_Failed"
      )
{
}

Test::Demarshaling_From_Any_Failed::~Demarshaling_From_Any_Failed (void)
{
}

Test::Demarshaling_From_Any_Failed::Demarshaling_From_Any_Failed (const ::Test::Demarshaling_From_Any_Failed &_tao_excp)
  : ::CORBA::UserException (
        _tao_excp._rep_id (),
        _tao_excp._name ()
      )
{
}

Test::Demarshaling_From_Any_Failed&
Test::Demarshaling_From_Any_Failed::operator= (const ::Test::Demarshaling_From_Any_Failed &_tao_excp)
{
  this->::CORBA::UserException::operator= (_tao_excp);
  return *this;
}

void Test::Demarshaling_From_Any_Failed::_tao_any_destructor (void *_tao_void_pointer)
{
  Demarshaling_From_Any_Failed *_tao_tmp_pointer =
    static_cast<Demarshaling_From_Any_Failed *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

Test::Demarshaling_From_Any_Failed *
Test::Demarshaling_From_Any_Failed::_downcast ( ::CORBA::Exception *_tao_excp)
{
  return dynamic_cast<Demarshaling_From_Any_Failed *> (_tao_excp);
}

const Test::Demarshaling_From_Any_Failed *
Test::Demarshaling_From_Any_Failed::_downcast ( ::CORBA::Exception const *_tao_excp)
{
  return dynamic_cast<const Demarshaling_From_Any_Failed *> (_tao_excp);
}

::CORBA::Exception *Test::Demarshaling_From_Any_Failed::_alloc (void)
{
  ::CORBA::Exception *retval = 0;
  ACE_NEW_RETURN (retval, ::Test::Demarshaling_From_Any_Failed, 0);
  return retval;
}

::CORBA::Exception *
Test::Demarshaling_From_Any_Failed::_tao_duplicate (void) const
{
  ::CORBA::Exception *result = 0;
  ACE_NEW_RETURN (
      result,
      ::Test::Demarshaling_From_Any_Failed (*this),
      0
    );
  return result;
}

void Test::Demarshaling_From_Any_Failed::_raise (void) const
{
  throw *this;
}

void Test::Demarshaling_From_Any_Failed::_tao_encode (TAO_OutputCDR &cdr) const
{
  if (!(cdr << *this))
    {
      throw ::CORBA::MARSHAL ();
    }
}

void Test::Demarshaling_From_Any_Failed::_tao_decode (TAO_InputCDR &cdr)
{
  if (!(cdr >> *this))
    {
      throw ::CORBA::MARSHAL ();
    }
}

// TAO extension - the virtual _type method.
::CORBA::TypeCode_ptr Test::Demarshaling_From_Any_Failed::_tao_type (void) const
{
  return ::Test::_tc_Demarshaling_From_Any_Failed;
}

// TAO_IDL - Generated from
// be/be_visitor_typecode/struct_typecode.cpp:86

static TAO::TypeCode::Struct_Field<
  char const *,
  ::CORBA::TypeCode_ptr const *> const * const
    _tao_fields_Test_Demarshaling_From_Any_Failed = 0;

static TAO::TypeCode::Struct<
  char const *,
  ::CORBA::TypeCode_ptr const *,
  TAO::TypeCode::Struct_Field<
    char const *,
    ::CORBA::TypeCode_ptr const *> const *,
  TAO::Null_RefCount_Policy>
_tao_tc_Test_Demarshaling_From_Any_Failed (
  ::CORBA::tk_except,
  "IDL:Test/Demarshaling_From_Any_Failed:1.0",
  "Demarshaling_From_Any_Failed",
  _tao_fields_Test_Demarshaling_From_Any_Failed,
  0);


namespace Test
{
  ::CORBA::TypeCode_ptr const _tc_Demarshaling_From_Any_Failed =
    &_tao_tc_Test_Demarshaling_From_Any_Failed;
}

// TAO_IDL - Generated from
// be/be_visitor_typecode/enum_typecode.cpp:29
static char const * const _tao_enumerators_Test_MyAttRefValEnum[] =
  {
    "ArvAttribute",
    "ArvInteger",
    "ArvComposition"

  };

static TAO::TypeCode::Enum<char const *,
                           char const * const *,
                           TAO::Null_RefCount_Policy>
  _tao_tc_Test_MyAttRefValEnum (
    "IDL:Test/MyAttRefValEnum:1.0",
    "MyAttRefValEnum",
    _tao_enumerators_Test_MyAttRefValEnum,
    3);


namespace Test
{
  ::CORBA::TypeCode_ptr const _tc_MyAttRefValEnum =
    &_tao_tc_Test_MyAttRefValEnum;
}

// TAO_IDL - Generated from
// be/be_visitor_typecode/struct_typecode.cpp:86

static TAO::TypeCode::Struct_Field<
  char const *,
  ::CORBA::TypeCode_ptr const *> const
    _tao_fields_Test_MyAttRef[] =
      {
        { "attRefName", &CORBA::_tc_string },
        { "attRefQualifier", &CORBA::_tc_string },
        { "attRefValue", &Test::MyAttRef::_tc_MyAttRefValue }
      };

static TAO::TypeCode::Recursive_Type<
  TAO::TypeCode::Struct<
    char const *,
    ::CORBA::TypeCode_ptr const *,
    TAO::TypeCode::Struct_Field<
      char const *,
      ::CORBA::TypeCode_ptr const *> const *,
    TAO::Null_RefCount_Policy>,
  ::CORBA::TypeCode_ptr const *,
  TAO::TypeCode::Struct_Field<
    char const *,
    ::CORBA::TypeCode_ptr const *> const *>
_tao_tc_Test_MyAttRef (
  ::CORBA::tk_struct,
  "IDL:Test/MyAttRef:1.0",
  "MyAttRef",
  _tao_fields_Test_MyAttRef,
  3);


namespace Test
{
  ::CORBA::TypeCode_ptr const _tc_MyAttRef =
    &_tao_tc_Test_MyAttRef;
}

// TAO_IDL - Generated from
// be/be_visitor_structure/structure_cs.cpp:56

void
Test::MyAttRef::_tao_any_destructor (
    void *_tao_void_pointer)
{
  MyAttRef *_tao_tmp_pointer =
    static_cast<MyAttRef *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

// TAO_IDL - Generated from
// be/be_visitor_sequence/sequence_cs.cpp:70

#if !defined (_TEST_MYATTREF_MYATTREFVALUE__TAO_SEQ_TEST_MYATTREF__CS_)
#define _TEST_MYATTREF_MYATTREFVALUE__TAO_SEQ_TEST_MYATTREF__CS_

Test::MyAttRef::MyAttRefValue::_tao_seq_Test_MyAttRef_::_tao_seq_Test_MyAttRef_ (void)
{}

Test::MyAttRef::MyAttRefValue::_tao_seq_Test_MyAttRef_::_tao_seq_Test_MyAttRef_ (
    ::CORBA::ULong max)
  : ::TAO::unbounded_value_sequence<
        Test::MyAttRef
      > (max)
{}

Test::MyAttRef::MyAttRefValue::_tao_seq_Test_MyAttRef_::_tao_seq_Test_MyAttRef_ (
    ::CORBA::ULong max,
    ::CORBA::ULong length,
    Test::MyAttRef * buffer,
    ::CORBA::Boolean release
  )
  : ::TAO::unbounded_value_sequence<
        Test::MyAttRef
      >
    (max, length, buffer, release)
{}

Test::MyAttRef::MyAttRefValue::_tao_seq_Test_MyAttRef_::_tao_seq_Test_MyAttRef_ (
    const _tao_seq_Test_MyAttRef_ &seq)
  : ::TAO::unbounded_value_sequence<
        Test::MyAttRef
      > (seq)
{}

Test::MyAttRef::MyAttRefValue::_tao_seq_Test_MyAttRef_::~_tao_seq_Test_MyAttRef_ (void)
{}

#endif /* end #if !defined */

// TAO_IDL - Generated from
// be/be_visitor_union/union_cs.cpp:76

Test::MyAttRef::MyAttRefValue::MyAttRefValue (void)
{
  ACE_OS::memset (&this->u_, 0, sizeof (this->u_));
  this->disc_ = (Test::MyAttRefValEnum) -1;
}

Test::MyAttRef::MyAttRefValue::MyAttRefValue (const ::Test::MyAttRef::MyAttRefValue &u)
{
  this->disc_ = u.disc_;
  switch (this->disc_)
  {
    case Test::ArvAttribute:
    {
      this->u_.attrValue_ = ::CORBA::string_dup (u.u_.attrValue_);
    }
    break;
    case Test::ArvInteger:
    {
      this->u_.intValue_ = u.u_.intValue_;
    }
    break;
    case Test::ArvComposition:
    {
      if (u.u_.compValue_ == 0)
        {
          this->u_.compValue_ = 0;
        }
      else
        {
          ACE_NEW (
              this->u_.compValue_,
              Test::MyAttRef::MyAttRefValue::_tao_seq_Test_MyAttRef_ (*u.u_.compValue_)
            );
        }
    }
    break;
    default:
    break;
  }
}

Test::MyAttRef::MyAttRefValue::~MyAttRefValue (void)
{
  // Finalize.
  this->_reset ();
}

void Test::MyAttRef::MyAttRefValue::_tao_any_destructor (void *_tao_void_pointer)
{
  MyAttRefValue *tmp =
    static_cast<MyAttRefValue *> (_tao_void_pointer);
  delete tmp;
}

Test::MyAttRef::MyAttRefValue &
Test::MyAttRef::MyAttRefValue::operator= (const ::Test::MyAttRef::MyAttRefValue &u)
{
  if (&u == this)
    {
      return *this;
    }

  this->_reset ();
  this->disc_ = u.disc_;

  switch (this->disc_)
  {
    case Test::ArvAttribute:
    {
      this->u_.attrValue_ = ::CORBA::string_dup (u.u_.attrValue_);
    }
    break;
    case Test::ArvInteger:
    {
      this->u_.intValue_ = u.u_.intValue_;
    }
    break;
    case Test::ArvComposition:
    {
      if (u.u_.compValue_ == 0)
        {
          this->u_.compValue_ = 0;
        }
      else
        {
          ACE_NEW_RETURN (
              this->u_.compValue_,
              Test::MyAttRef::MyAttRefValue::_tao_seq_Test_MyAttRef_ (*u.u_.compValue_),
              *this
            );
        }
    }
    break;
    default:
    break;
  }

  return *this;
}

/// Reset method to reset old values of a union.
void Test::MyAttRef::MyAttRefValue::_reset (void)
{
  switch (this->disc_)
  {

    case Test::ArvAttribute:
      ::CORBA::string_free (this->u_.attrValue_);
      this->u_.attrValue_ = 0;

    break;

    case Test::ArvInteger:

    break;

    case Test::ArvComposition:
      delete this->u_.compValue_;
      this->u_.compValue_ = 0;

    break;

    default:
    break;
  }
}

// TAO_IDL - Generated from
// be/be_visitor_typecode/union_typecode.cpp:65



// TAO_IDL - Generated from
// be/be_visitor_typecode/typecode_defn.cpp:461


#ifndef _TAO_TYPECODE_Test_MyAttRef_MyAttRefValue__tao_seq_Test_MyAttRef__GUARD
#define _TAO_TYPECODE_Test_MyAttRef_MyAttRefValue__tao_seq_Test_MyAttRef__GUARD

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

namespace TAO
{
  namespace TypeCode
  {
    namespace
    {
      TAO::TypeCode::Sequence< ::CORBA::TypeCode_ptr const *,
                              TAO::Null_RefCount_Policy>
        Test_MyAttRef_MyAttRefValue__tao_seq_Test_MyAttRef__0 (
          ::CORBA::tk_sequence,
          &Test::_tc_MyAttRef,
          0U);

      ::CORBA::TypeCode_ptr const tc_Test_MyAttRef_MyAttRefValue__tao_seq_Test_MyAttRef__0 =
        &Test_MyAttRef_MyAttRefValue__tao_seq_Test_MyAttRef__0;
    }
  }
}

TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_TYPECODE_Test_MyAttRef_MyAttRefValue__tao_seq_Test_MyAttRef__GUARD */

static TAO::TypeCode::Case_T<Test::MyAttRefValEnum, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_Test_MyAttRef_MyAttRefValue__0 (Test::ArvAttribute, "attrValue", &CORBA::_tc_string);
static TAO::TypeCode::Case_T<Test::MyAttRefValEnum, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_Test_MyAttRef_MyAttRefValue__1 (Test::ArvInteger, "intValue", &CORBA::_tc_long);
static TAO::TypeCode::Case_T<Test::MyAttRefValEnum, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_Test_MyAttRef_MyAttRefValue__2 (Test::ArvComposition, "compValue", &TAO::TypeCode::tc_Test_MyAttRef_MyAttRefValue__tao_seq_Test_MyAttRef__0);

static TAO::TypeCode::Case<char const *, ::CORBA::TypeCode_ptr const *> const * const _tao_cases_Test_MyAttRef_MyAttRefValue[] =
  {
    &_tao_cases_Test_MyAttRef_MyAttRefValue__0,
    &_tao_cases_Test_MyAttRef_MyAttRefValue__1,
    &_tao_cases_Test_MyAttRef_MyAttRefValue__2
  };

static TAO::TypeCode::Union<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::TypeCode::Case<char const *, ::CORBA::TypeCode_ptr const *> const * const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_Test_MyAttRef_MyAttRefValue (
    "IDL:Test/MyAttRef/MyAttRefValue:1.0",
    "MyAttRefValue",
    &Test::_tc_MyAttRefValEnum,
    _tao_cases_Test_MyAttRef_MyAttRefValue,
    sizeof (_tao_cases_Test_MyAttRef_MyAttRefValue)/sizeof (_tao_cases_Test_MyAttRef_MyAttRefValue[0]),
    -1);

::CORBA::TypeCode_ptr const Test::MyAttRef::_tc_MyAttRefValue =
  &_tao_tc_Test_MyAttRef_MyAttRefValue;

// TAO_IDL - Generated from
// be/be_visitor_sequence/sequence_cs.cpp:70

#if !defined (_TEST_MYATTREFSEQUENCE_CS_)
#define _TEST_MYATTREFSEQUENCE_CS_

Test::MyAttRefSequence::MyAttRefSequence (void)
{}

Test::MyAttRefSequence::MyAttRefSequence (
    ::CORBA::ULong max)
  : ::TAO::unbounded_value_sequence<
        MyAttRef
      > (max)
{}

Test::MyAttRefSequence::MyAttRefSequence (
    ::CORBA::ULong max,
    ::CORBA::ULong length,
    Test::MyAttRef * buffer,
    ::CORBA::Boolean release
  )
  : ::TAO::unbounded_value_sequence<
        MyAttRef
      >
    (max, length, buffer, release)
{}

Test::MyAttRefSequence::MyAttRefSequence (
    const MyAttRefSequence &seq)
  : ::TAO::unbounded_value_sequence<
        MyAttRef
      > (seq)
{}

Test::MyAttRefSequence::~MyAttRefSequence (void)
{}

void Test::MyAttRefSequence::_tao_any_destructor (
    void * _tao_void_pointer)
{
  MyAttRefSequence * _tao_tmp_pointer =
    static_cast<MyAttRefSequence *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

#endif /* end #if !defined */

// TAO_IDL - Generated from
// be/be_visitor_typecode/alias_typecode.cpp:49



// TAO_IDL - Generated from
// be/be_visitor_typecode/typecode_defn.cpp:461


#ifndef _TAO_TYPECODE_Test_MyAttRefSequence_GUARD
#define _TAO_TYPECODE_Test_MyAttRefSequence_GUARD

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

namespace TAO
{
  namespace TypeCode
  {
    namespace
    {
      TAO::TypeCode::Sequence< ::CORBA::TypeCode_ptr const *,
                              TAO::Null_RefCount_Policy>
        Test_MyAttRefSequence_0 (
          ::CORBA::tk_sequence,
          &Test::_tc_MyAttRef,
          0U);

      ::CORBA::TypeCode_ptr const tc_Test_MyAttRefSequence_0 =
        &Test_MyAttRefSequence_0;
    }
  }
}

TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_TYPECODE_Test_MyAttRefSequence_GUARD */

static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_Test_MyAttRefSequence (
    ::CORBA::tk_alias,
    "IDL:Test/MyAttRefSequence:1.0",
    "MyAttRefSequence",
    &TAO::TypeCode::tc_Test_MyAttRefSequence_0);


namespace Test
{
  ::CORBA::TypeCode_ptr const _tc_MyAttRefSequence =
    &_tao_tc_Test_MyAttRefSequence;
}

// TAO_IDL - Generated from
// be/be_visitor_interface/interface_cs.cpp:48

// Traits specializations for Test::Hello.

Test::Hello_ptr
TAO::Objref_Traits<Test::Hello>::duplicate (
    Test::Hello_ptr p)
{
  return Test::Hello::_duplicate (p);
}

void
TAO::Objref_Traits<Test::Hello>::release (
    Test::Hello_ptr p)
{
  ::CORBA::release (p);
}

Test::Hello_ptr
TAO::Objref_Traits<Test::Hello>::nil (void)
{
  return Test::Hello::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<Test::Hello>::marshal (
    const Test::Hello_ptr p,
    TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:88

::CORBA::Any *
Test::Hello::get_any (
  const ::CORBA::Any & the_any)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }

  TAO::Arg_Traits< ::CORBA::Any>::ret_val _tao_retval;
  TAO::Arg_Traits< ::CORBA::Any>::in_arg_val _tao_the_any (the_any);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_the_any
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      2,
      "get_any",
      7,
      TAO::TAO_CO_NONE

    );

  _tao_call.invoke (0, 0);

  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:88

void
Test::Hello::shutdown (
  void)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }

  TAO::Arg_Traits< void>::ret_val _tao_retval;

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      1,
      "shutdown",
      8,
      TAO::TAO_CO_NONE,
      TAO::TAO_ONEWAY_INVOCATION,
      TAO::TAO_SYNCHRONOUS_INVOCATION,
      false
    );

  _tao_call.invoke (0, 0);
}

Test::Hello::Hello (void)
{
}

Test::Hello::~Hello (void)
{
}

void
Test::Hello::_tao_any_destructor (void *_tao_void_pointer)
{
  Hello *_tao_tmp_pointer =
    static_cast<Hello *> (_tao_void_pointer);
  ::CORBA::release (_tao_tmp_pointer);
}

Test::Hello_ptr
Test::Hello::_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return
    TAO::Narrow_Utils<Hello>::narrow (
        _tao_objref,
        "IDL:Test/Hello:1.0");
}

Test::Hello_ptr
Test::Hello::_unchecked_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return
    TAO::Narrow_Utils<Hello>::unchecked_narrow (
        _tao_objref);
}

Test::Hello_ptr
Test::Hello::_nil (void)
{
  return 0;
}

Test::Hello_ptr
Test::Hello::_duplicate (Hello_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  return obj;
}

void
Test::Hello::_tao_release (Hello_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
Test::Hello::_is_a (const char *value)
{
  if (
      ACE_OS::strcmp (
          value,
          "IDL:Test/Hello:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        ) == 0
    )
    {
      return true; // success using local knowledge
    }
  else
    {
      return this->::CORBA::Object::_is_a (value);
    }
}

const char* Test::Hello::_interface_repository_id (void) const
{
  return "IDL:Test/Hello:1.0";
}

::CORBA::Boolean
Test::Hello::marshal (TAO_OutputCDR &cdr)
{
  return (cdr << this);
}

// TAO_IDL - Generated from
// be/be_visitor_typecode/objref_typecode.cpp:70

static TAO::TypeCode::Objref<char const *,
                             TAO::Null_RefCount_Policy>
  _tao_tc_Test_Hello (
    ::CORBA::tk_objref,
    "IDL:Test/Hello:1.0",
    "Hello");


namespace Test
{
  ::CORBA::TypeCode_ptr const _tc_Hello =
    &_tao_tc_Test_Hello;
}

// TAO_IDL - Generated from
// be/be_visitor_exception/any_op_cs.cpp:38
TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Dual_Impl_T<Test::Recursive_Type_In_Any_Test_Failed>::demarshal_value (TAO_InputCDR & cdr)
  {
    ::CORBA::String_var id;

    if (!(cdr >> id.out ()))
      {
        return false;
      }

    try
      {
        this->value_->_tao_decode (cdr);
      }
    catch (const ::CORBA::Exception &)
      {
        return false;
      }

    return true;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace Test
{


  // Copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      const ::Test::Recursive_Type_In_Any_Test_Failed &_tao_elem)
  {
    TAO::Any_Dual_Impl_T< ::Test::Recursive_Type_In_Any_Test_Failed>::insert_copy (
        _tao_any,
        ::Test::Recursive_Type_In_Any_Test_Failed::_tao_any_destructor,
        ::Test::_tc_Recursive_Type_In_Any_Test_Failed,
        _tao_elem);
  }

  // Non-copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      ::Test::Recursive_Type_In_Any_Test_Failed *_tao_elem)
  {
    TAO::Any_Dual_Impl_T< ::Test::Recursive_Type_In_Any_Test_Failed>::insert (
        _tao_any,
        ::Test::Recursive_Type_In_Any_Test_Failed::_tao_any_destructor,
        ::Test::_tc_Recursive_Type_In_Any_Test_Failed,
        _tao_elem);
  }

  // Extraction to non-const pointer (deprecated).
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      ::Test::Recursive_Type_In_Any_Test_Failed *&_tao_elem)
  {
    return _tao_any >>= const_cast<
        const ::Test::Recursive_Type_In_Any_Test_Failed *&> (
        _tao_elem);
  }

  // Extraction to const pointer.
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      const ::Test::Recursive_Type_In_Any_Test_Failed *&_tao_elem)
  {
    return
      TAO::Any_Dual_Impl_T< ::Test::Recursive_Type_In_Any_Test_Failed>::extract (
          _tao_any,
          ::Test::Recursive_Type_In_Any_Test_Failed::_tao_any_destructor,
          ::Test::_tc_Recursive_Type_In_Any_Test_Failed,
          _tao_elem);
  }
}

#else

TAO_BEGIN_VERSIONED_NAMESPACE_DECL



// Copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    const Test::Recursive_Type_In_Any_Test_Failed &_tao_elem)
{
  TAO::Any_Dual_Impl_T<Test::Recursive_Type_In_Any_Test_Failed>::insert_copy (
      _tao_any,
      Test::Recursive_Type_In_Any_Test_Failed::_tao_any_destructor,
      Test::_tc_Recursive_Type_In_Any_Test_Failed,
      _tao_elem
    );
}

// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    Test::Recursive_Type_In_Any_Test_Failed *_tao_elem)
{
  TAO::Any_Dual_Impl_T<Test::Recursive_Type_In_Any_Test_Failed>::insert (
      _tao_any,
      Test::Recursive_Type_In_Any_Test_Failed::_tao_any_destructor,
      Test::_tc_Recursive_Type_In_Any_Test_Failed,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    Test::Recursive_Type_In_Any_Test_Failed *&_tao_elem)
{
  return _tao_any >>= const_cast<
      const Test::Recursive_Type_In_Any_Test_Failed *&> (
      _tao_elem);
}

// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const Test::Recursive_Type_In_Any_Test_Failed *&_tao_elem
  )
{
  return
    TAO::Any_Dual_Impl_T<Test::Recursive_Type_In_Any_Test_Failed>::extract (
        _tao_any,
        Test::Recursive_Type_In_Any_Test_Failed::_tao_any_destructor,
        Test::_tc_Recursive_Type_In_Any_Test_Failed,
        _tao_elem);
}
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_exception/any_op_cs.cpp:38
TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Dual_Impl_T<Test::Demarshaling_From_Any_Failed>::demarshal_value (TAO_InputCDR & cdr)
  {
    ::CORBA::String_var id;

    if (!(cdr >> id.out ()))
      {
        return false;
      }

    try
      {
        this->value_->_tao_decode (cdr);
      }
    catch (const ::CORBA::Exception &)
      {
        return false;
      }

    return true;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace Test
{


  // Copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      const ::Test::Demarshaling_From_Any_Failed &_tao_elem)
  {
    TAO::Any_Dual_Impl_T< ::Test::Demarshaling_From_Any_Failed>::insert_copy (
        _tao_any,
        ::Test::Demarshaling_From_Any_Failed::_tao_any_destructor,
        ::Test::_tc_Demarshaling_From_Any_Failed,
        _tao_elem);
  }

  // Non-copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      ::Test::Demarshaling_From_Any_Failed *_tao_elem)
  {
    TAO::Any_Dual_Impl_T< ::Test::Demarshaling_From_Any_Failed>::insert (
        _tao_any,
        ::Test::Demarshaling_From_Any_Failed::_tao_any_destructor,
        ::Test::_tc_Demarshaling_From_Any_Failed,
        _tao_elem);
  }

  // Extraction to non-const pointer (deprecated).
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      ::Test::Demarshaling_From_Any_Failed *&_tao_elem)
  {
    return _tao_any >>= const_cast<
        const ::Test::Demarshaling_From_Any_Failed *&> (
        _tao_elem);
  }

  // Extraction to const pointer.
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      const ::Test::Demarshaling_From_Any_Failed *&_tao_elem)
  {
    return
      TAO::Any_Dual_Impl_T< ::Test::Demarshaling_From_Any_Failed>::extract (
          _tao_any,
          ::Test::Demarshaling_From_Any_Failed::_tao_any_destructor,
          ::Test::_tc_Demarshaling_From_Any_Failed,
          _tao_elem);
  }
}

#else

TAO_BEGIN_VERSIONED_NAMESPACE_DECL



// Copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    const Test::Demarshaling_From_Any_Failed &_tao_elem)
{
  TAO::Any_Dual_Impl_T<Test::Demarshaling_From_Any_Failed>::insert_copy (
      _tao_any,
      Test::Demarshaling_From_Any_Failed::_tao_any_destructor,
      Test::_tc_Demarshaling_From_Any_Failed,
      _tao_elem
    );
}

// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    Test::Demarshaling_From_Any_Failed *_tao_elem)
{
  TAO::Any_Dual_Impl_T<Test::Demarshaling_From_Any_Failed>::insert (
      _tao_any,
      Test::Demarshaling_From_Any_Failed::_tao_any_destructor,
      Test::_tc_Demarshaling_From_Any_Failed,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    Test::Demarshaling_From_Any_Failed *&_tao_elem)
{
  return _tao_any >>= const_cast<
      const Test::Demarshaling_From_Any_Failed *&> (
      _tao_elem);
}

// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const Test::Demarshaling_From_Any_Failed *&_tao_elem
  )
{
  return
    TAO::Any_Dual_Impl_T<Test::Demarshaling_From_Any_Failed>::extract (
        _tao_any,
        Test::Demarshaling_From_Any_Failed::_tao_any_destructor,
        Test::_tc_Demarshaling_From_Any_Failed,
        _tao_elem);
}
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_enum/any_op_cs.cpp:35

TAO_BEGIN_VERSIONED_NAMESPACE_DECL


TAO_END_VERSIONED_NAMESPACE_DECL



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace Test
{
  void operator<<= (
      ::CORBA::Any &_tao_any,
      ::Test::MyAttRefValEnum _tao_elem
    )
  {
    TAO::Any_Basic_Impl_T< ::Test::MyAttRefValEnum>::insert (
        _tao_any,
        ::Test::_tc_MyAttRefValEnum,
        _tao_elem
      );
  }

  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      ::Test::MyAttRefValEnum &_tao_elem
    )
  {
    return
      TAO::Any_Basic_Impl_T< ::Test::MyAttRefValEnum>::extract (
          _tao_any,
          ::Test::_tc_MyAttRefValEnum,
          _tao_elem
        );
  }
}

#else

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

void operator<<= (
    ::CORBA::Any &_tao_any,
    Test::MyAttRefValEnum _tao_elem
  )
{
  TAO::Any_Basic_Impl_T<Test::MyAttRefValEnum>::insert (
      _tao_any,
      Test::_tc_MyAttRefValEnum,
      _tao_elem
    );
}

::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    Test::MyAttRefValEnum &_tao_elem
  )
{
  return
    TAO::Any_Basic_Impl_T<Test::MyAttRefValEnum>::extract (
        _tao_any,
        Test::_tc_MyAttRefValEnum,
        _tao_elem
      );
}
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_structure/any_op_cs.cpp:43



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace Test
{
  /// Copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      const ::Test::MyAttRef &_tao_elem)
  {
    TAO::Any_Dual_Impl_T< ::Test::MyAttRef>::insert_copy (
        _tao_any,
        ::Test::MyAttRef::_tao_any_destructor,
        ::Test::_tc_MyAttRef,
        _tao_elem);
}

/// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any, ::
    Test::MyAttRef *_tao_elem)
{
  TAO::Any_Dual_Impl_T< ::Test::MyAttRef>::insert (
      _tao_any,
      ::Test::MyAttRef::_tao_any_destructor,
      ::Test::_tc_MyAttRef,
      _tao_elem);
}

/// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    ::Test::MyAttRef *&_tao_elem)
{
  return _tao_any >>= const_cast<
      const ::Test::MyAttRef *&> (
      _tao_elem);
}

/// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const ::Test::MyAttRef *&_tao_elem)
{
  return
    TAO::Any_Dual_Impl_T< ::Test::MyAttRef>::extract (
        _tao_any,
        ::Test::MyAttRef::_tao_any_destructor,
        ::Test::_tc_MyAttRef,
        _tao_elem
      );
}
}

#else

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

/// Copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  const Test::MyAttRef &_tao_elem)
{
  TAO::Any_Dual_Impl_T<Test::MyAttRef>::insert_copy (
    _tao_any,
    Test::MyAttRef::_tao_any_destructor,
    Test::_tc_MyAttRef,
    _tao_elem);
}

/// Non-copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  Test::MyAttRef *_tao_elem)
{
  TAO::Any_Dual_Impl_T<Test::MyAttRef>::insert (
    _tao_any,
    Test::MyAttRef::_tao_any_destructor,
    Test::_tc_MyAttRef,
    _tao_elem);
}

/// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
  const ::CORBA::Any &_tao_any,
  Test::MyAttRef *&_tao_elem)
{
  return _tao_any >>= const_cast<
      const Test::MyAttRef *&> (
      _tao_elem);
}

/// Extraction to const pointer.
::CORBA::Boolean operator>>= (
  const ::CORBA::Any &_tao_any,
  const Test::MyAttRef *&_tao_elem)
{
  return
    TAO::Any_Dual_Impl_T<Test::MyAttRef>::extract (
      _tao_any,
      Test::MyAttRef::_tao_any_destructor,
      Test::_tc_MyAttRef,
      _tao_elem);
}
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_union/any_op_cs.cpp:37


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    const Test::MyAttRef::MyAttRefValue &_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<Test::MyAttRef::MyAttRefValue>::insert_copy (
      _tao_any,
      Test::MyAttRef::MyAttRefValue::_tao_any_destructor,
      Test::MyAttRef::_tc_MyAttRefValue,
      _tao_elem
    );
}

// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    Test::MyAttRef::MyAttRefValue *_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<Test::MyAttRef::MyAttRefValue>::insert (
      _tao_any,
      Test::MyAttRef::MyAttRefValue::_tao_any_destructor,
      Test::MyAttRef::_tc_MyAttRefValue,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    Test::MyAttRef::MyAttRefValue *&_tao_elem
  )
{
  return _tao_any >>= const_cast<
      const Test::MyAttRef::MyAttRefValue *&> (
      _tao_elem
    );
}

// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const Test::MyAttRef::MyAttRefValue *&_tao_elem
  )
{
  return
    TAO::Any_Dual_Impl_T<Test::MyAttRef::MyAttRefValue>::extract (
        _tao_any,
        Test::MyAttRef::MyAttRefValue::_tao_any_destructor,
        Test::MyAttRef::_tc_MyAttRefValue,
        _tao_elem
      );
}
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_sequence/any_op_cs.cpp:45


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


TAO_END_VERSIONED_NAMESPACE_DECL



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace Test
{

  // Copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      const ::Test::MyAttRefSequence &_tao_elem
    )
  {
    TAO::Any_Dual_Impl_T< ::Test::MyAttRefSequence>::insert_copy (
        _tao_any,
        ::Test::MyAttRefSequence::_tao_any_destructor,
        ::Test::_tc_MyAttRefSequence,
        _tao_elem
      );
}

// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    ::Test::MyAttRefSequence *_tao_elem)
{
  TAO::Any_Dual_Impl_T< ::Test::MyAttRefSequence>::insert (
      _tao_any,
      ::Test::MyAttRefSequence::_tao_any_destructor,
      ::Test::_tc_MyAttRefSequence,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    ::Test::MyAttRefSequence *&_tao_elem)
{
  return _tao_any >>= const_cast<
      const ::Test::MyAttRefSequence *&> (
      _tao_elem
    );
}

// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const ::Test::MyAttRefSequence *&_tao_elem)
{
  return
    TAO::Any_Dual_Impl_T< ::Test::MyAttRefSequence>::extract (
        _tao_any,
        ::Test::MyAttRefSequence::_tao_any_destructor,
        ::Test::_tc_MyAttRefSequence,
        _tao_elem
      );
}
}

#else


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


// Copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    const Test::MyAttRefSequence &_tao_elem)
{
  TAO::Any_Dual_Impl_T<Test::MyAttRefSequence>::insert_copy (
      _tao_any,
      Test::MyAttRefSequence::_tao_any_destructor,
      Test::_tc_MyAttRefSequence,
      _tao_elem
    );
}

// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    Test::MyAttRefSequence *_tao_elem)
{
  TAO::Any_Dual_Impl_T<Test::MyAttRefSequence>::insert (
      _tao_any,
      Test::MyAttRefSequence::_tao_any_destructor,
      Test::_tc_MyAttRefSequence,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    Test::MyAttRefSequence *&_tao_elem)
{
  return _tao_any >>= const_cast<
      const Test::MyAttRefSequence *&> (
      _tao_elem
    );
}

// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const Test::MyAttRefSequence *&_tao_elem)
{
  return
    TAO::Any_Dual_Impl_T<Test::MyAttRefSequence>::extract (
        _tao_any,
        Test::MyAttRefSequence::_tao_any_destructor,
        Test::_tc_MyAttRefSequence,
        _tao_elem);
}
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_interface/any_op_cs.cpp:38
TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<Test::Hello>::to_object (
      ::CORBA::Object_ptr &_tao_elem) const
  {
    _tao_elem = ::CORBA::Object::_duplicate (this->value_);
    return true;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace Test
{


  /// Copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      Hello_ptr _tao_elem)
  {
    Hello_ptr _tao_objptr =
      Hello::_duplicate (_tao_elem);
    _tao_any <<= &_tao_objptr;
  }

  /// Non-copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      Hello_ptr *_tao_elem)
  {
    TAO::Any_Impl_T<Hello>::insert (
        _tao_any,
        Hello::_tao_any_destructor,
        _tc_Hello,
        *_tao_elem);
  }

  ::CORBA::Boolean
  operator>>= (
      const ::CORBA::Any &_tao_any,
      Hello_ptr &_tao_elem)
  {
    return
      TAO::Any_Impl_T<Hello>::extract (
          _tao_any,
          Hello::_tao_any_destructor,
          _tc_Hello,
          _tao_elem);
  }
}

#else

TAO_BEGIN_VERSIONED_NAMESPACE_DECL



/// Copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    Test::Hello_ptr _tao_elem)
{
  Test::Hello_ptr _tao_objptr =
    Test::Hello::_duplicate (_tao_elem);
  _tao_any <<= &_tao_objptr;
}

/// Non-copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    Test::Hello_ptr *_tao_elem)
{
  TAO::Any_Impl_T<Test::Hello>::insert (
      _tao_any,
      Test::Hello::_tao_any_destructor,
      Test::_tc_Hello,
      *_tao_elem);
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    Test::Hello_ptr &_tao_elem)
{
  return
    TAO::Any_Impl_T<Test::Hello>::extract (
        _tao_any,
        Test::Hello::_tao_any_destructor,
        Test::_tc_Hello,
        _tao_elem);
}

TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_exception/cdr_op_cs.cpp:48
TAO_BEGIN_VERSIONED_NAMESPACE_DECL



::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Test::Recursive_Type_In_Any_Test_Failed &_tao_aggregate
  )
{
  // Marshal the repository ID.
  return (strm << _tao_aggregate._rep_id ());
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &,
    Test::Recursive_Type_In_Any_Test_Failed&
  )
{
  return true;
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_exception/cdr_op_cs.cpp:48
TAO_BEGIN_VERSIONED_NAMESPACE_DECL



::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Test::Demarshaling_From_Any_Failed &_tao_aggregate
  )
{
  // Marshal the repository ID.
  return (strm << _tao_aggregate._rep_id ());
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &,
    Test::Demarshaling_From_Any_Failed&
  )
{
  return true;
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_enum/cdr_op_cs.cpp:34


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (TAO_OutputCDR &strm, Test::MyAttRefValEnum _tao_enumerator)
{
  return strm << static_cast< ::CORBA::ULong> (_tao_enumerator);
}

::CORBA::Boolean operator>> (TAO_InputCDR &strm, Test::MyAttRefValEnum & _tao_enumerator)
{
  ::CORBA::ULong _tao_temp = 0;
  ::CORBA::Boolean const _tao_success = strm >> _tao_temp;

  if (_tao_success)
    {
      _tao_enumerator = static_cast<Test::MyAttRefValEnum> (_tao_temp);
    }

  return _tao_success;
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_sequence/cdr_op_cs.cpp:93
#if !defined _TAO_CDR_OP_Test_MyAttRef_MyAttRefValue__tao_seq_Test_MyAttRef__CPP_
#define _TAO_CDR_OP_Test_MyAttRef_MyAttRefValue__tao_seq_Test_MyAttRef__CPP_

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Test::MyAttRef::MyAttRefValue::_tao_seq_Test_MyAttRef_ &_tao_sequence)
{
  return TAO::marshal_sequence(strm, _tao_sequence);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Test::MyAttRef::MyAttRefValue::_tao_seq_Test_MyAttRef_ &_tao_sequence)
{
  return TAO::demarshal_sequence(strm, _tao_sequence);
}


TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_CDR_OP_Test_MyAttRef_MyAttRefValue__tao_seq_Test_MyAttRef__CPP_ */

// TAO_IDL - Generated from
// be/be_visitor_union/cdr_op_cs.cpp:74


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Test::MyAttRef::MyAttRefValue &_tao_union
  )
{
  if ( !(strm << _tao_union._d ()) )
    {
      return false;
    }

  ::CORBA::Boolean result = true;

  switch (_tao_union._d ())
  {
    case Test::ArvAttribute:
      {
        result = strm << _tao_union.attrValue ();
      }
      break;
    case Test::ArvInteger:
      {
        result = strm << _tao_union.intValue ();
      }
      break;
    case Test::ArvComposition:
      {
        result = strm << _tao_union.compValue ();
      }
      break;
    default:
      break;
  }

  return result;
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Test::MyAttRef::MyAttRefValue &_tao_union
  )
{
  Test::MyAttRefValEnum _tao_discriminant;
  if ( !(strm >> _tao_discriminant) )
    {
      return false;
    }

  ::CORBA::Boolean result = true;

  switch (_tao_discriminant)
  {
    case Test::ArvAttribute:
      {
        ::CORBA::String_var _tao_union_tmp;
        result = strm >> _tao_union_tmp.out ();

        if (result)
          {
            _tao_union.attrValue (_tao_union_tmp);
            _tao_union._d (_tao_discriminant);
          }
      }
      break;
    case Test::ArvInteger:
      {
        CORBA::Long _tao_union_tmp;
        result = strm >> _tao_union_tmp;

        if (result)
          {
            _tao_union.intValue (_tao_union_tmp);
            _tao_union._d (_tao_discriminant);
          }
      }
      break;
    case Test::ArvComposition:
      {
        Test::MyAttRef::MyAttRefValue::_tao_seq_Test_MyAttRef_ _tao_union_tmp;
        result = strm >> _tao_union_tmp;

        if (result)
          {
            _tao_union.compValue (_tao_union_tmp);
            _tao_union._d (_tao_discriminant);
          }
      }
      break;
    default:
      _tao_union._default ();
      // For maximum interop compatibility, force the same value as transmitted
      _tao_union._d (_tao_discriminant);
      break;
  }

  return result;
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_structure/cdr_op_cs.cpp:49

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Test::MyAttRef &_tao_aggregate)
{
  return
    (strm << _tao_aggregate.attRefName.in ()) &&
    (strm << _tao_aggregate.attRefQualifier.in ()) &&
    (strm << _tao_aggregate.attRefValue);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Test::MyAttRef &_tao_aggregate)
{
  return
    (strm >> _tao_aggregate.attRefName.out ()) &&
    (strm >> _tao_aggregate.attRefQualifier.out ()) &&
    (strm >> _tao_aggregate.attRefValue);
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_sequence/cdr_op_cs.cpp:93
#if !defined _TAO_CDR_OP_Test_MyAttRefSequence_CPP_
#define _TAO_CDR_OP_Test_MyAttRefSequence_CPP_

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Test::MyAttRefSequence &_tao_sequence)
{
  return TAO::marshal_sequence(strm, _tao_sequence);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Test::MyAttRefSequence &_tao_sequence)
{
  return TAO::demarshal_sequence(strm, _tao_sequence);
}


TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_CDR_OP_Test_MyAttRefSequence_CPP_ */

// TAO_IDL - Generated from
// be/be_visitor_interface/cdr_op_cs.cpp:51

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Test::Hello_ptr _tao_objref)
{
  ::CORBA::Object_ptr _tao_corba_obj = _tao_objref;
  return (strm << _tao_corba_obj);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Test::Hello_ptr &_tao_objref)
{
  ::CORBA::Object_var obj;

  if (!(strm >> obj.inout ()))
    {
      return false;
    }

  typedef ::Test::Hello RHS_SCOPED_NAME;

  // Narrow to the right type.
  _tao_objref =
    TAO::Narrow_Utils<RHS_SCOPED_NAME>::unchecked_narrow (obj.in ());

  return true;
}

TAO_END_VERSIONED_NAMESPACE_DECL



