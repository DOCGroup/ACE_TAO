// -*- C++ -*-
/**
 * Code generated by the The ACE ORB (TAO) IDL Compiler v2.4.1
 * TAO and the TAO IDL Compiler have been developed by:
 *       Center for Distributed Object Computing
 *       Washington University
 *       St. Louis, MO
 *       USA
 *       http://www.cs.wustl.edu/~schmidt/doc-center.html
 * and
 *       Distributed Object Computing Laboratory
 *       University of California at Irvine
 *       Irvine, CA
 *       USA
 * and
 *       Institute for Software Integrated Systems
 *       Vanderbilt University
 *       Nashville, TN
 *       USA
 *       http://www.isis.vanderbilt.edu/
 *
 * Information about TAO is available at:
 *     http://www.dre.vanderbilt.edu/~schmidt/TAO.html
 **/


// TAO_IDL - Generated from
// be/be_visitor_union/union_ci.cpp:36

// *************************************************************
// Inline operations for union Test::MyAttRef::MyAttRefValue
// *************************************************************

// TAO_IDL - Generated from
// be/be_visitor_union/discriminant_ci.cpp:55

ACE_INLINE
void
Test::MyAttRef::MyAttRefValue::_default ()
{
  this->_reset ();
  this->disc_ = static_cast <Test::MyAttRefValEnum> (-1);
}

// Accessor to set the discriminant.
ACE_INLINE
void
Test::MyAttRef::MyAttRefValue::_d (Test::MyAttRefValEnum discval)
{
  this->disc_ = discval;
}

// Accessor to get the discriminant.
ACE_INLINE
Test::MyAttRefValEnum
Test::MyAttRef::MyAttRefValue::_d (void) const
{
  return this->disc_;
}

// TAO_IDL - Generated from
// be/be_visitor_union_branch/public_ci.cpp:862

/// Accessor to set the member.
ACE_INLINE
void
Test::MyAttRef::MyAttRefValue::attrValue (char *val)
{
  // Set the discriminant value.
  this->_reset ();
  this->disc_ = Test::ArvAttribute;
  this->u_.attrValue_ = val;
}

// Accessor to set the member.
ACE_INLINE
void
Test::MyAttRef::MyAttRefValue::attrValue (const char *val)
{
  // Set the discriminant value.
  this->_reset ();
  this->disc_ = Test::ArvAttribute;
  // Set the value.
  this->u_.attrValue_ = ::CORBA::string_dup (val);
}

/// Accessor to set the member.
ACE_INLINE
void
Test::MyAttRef::MyAttRefValue::attrValue (const ::CORBA::String_var &val)
{
  // Set the discriminant value.
  this->_reset ();
  this->disc_ = Test::ArvAttribute;
  // Set the value.
  ::CORBA::String_var attrValue_var = val;
  this->u_.attrValue_ = attrValue_var._retn ();
}

ACE_INLINE
const char *
Test::MyAttRef::MyAttRefValue::attrValue (void) const // get method
{
  return this->u_.attrValue_;
}

// TAO_IDL - Generated from
// be/be_visitor_union_branch/public_ci.cpp:577

// Accessor to set the member.
ACE_INLINE
void
Test::MyAttRef::MyAttRefValue::intValue (CORBA::Long val)
{
  // Set the discriminant value.
  this->_reset ();
  this->disc_ = Test::ArvInteger;
  // Set the value.
  this->u_.intValue_ = val;
}

/// Retrieve the member.
ACE_INLINE
::CORBA::Long
Test::MyAttRef::MyAttRefValue::intValue (void) const
{
  return this->u_.intValue_;
}

// TAO_IDL - Generated from
// be/be_visitor_union_branch/public_ci.cpp:788

/// Accessor to set the member.
ACE_INLINE
void
Test::MyAttRef::MyAttRefValue::compValue (const Test::MyAttRef::MyAttRefValue::_tao_seq_Test_MyAttRef_ &val)
{
  // Set the discriminant value.
  this->_reset ();
  this->disc_ = Test::ArvComposition;
  ACE_NEW (
      this->u_.compValue_,
      Test::MyAttRef::MyAttRefValue::_tao_seq_Test_MyAttRef_ (val)
    );
}

/// Readonly get method.
ACE_INLINE
const Test::MyAttRef::MyAttRefValue::_tao_seq_Test_MyAttRef_ &
Test::MyAttRef::MyAttRefValue::compValue (void) const
{
  return *this->u_.compValue_;
}

/// Read/write get method.
ACE_INLINE
Test::MyAttRef::MyAttRefValue::_tao_seq_Test_MyAttRef_ &
Test::MyAttRef::MyAttRefValue::compValue (void)
{
  return *this->u_.compValue_;
}

// TAO_IDL - Generated from
// be/be_visitor_interface/interface_ci.cpp:59

ACE_INLINE
Test::Hello::Hello (
    TAO_Stub *objref,
    ::CORBA::Boolean _tao_collocated,
    TAO_Abstract_ServantBase *servant,
    TAO_ORB_Core *oc)
  : ::CORBA::Object (objref, _tao_collocated, servant, oc)
{
}

ACE_INLINE
Test::Hello::Hello (
    ::IOP::IOR *ior,
    TAO_ORB_Core *oc)
  : ::CORBA::Object (ior, oc)
{
}

