// -*- C++ -*-
/**
 * Code generated by the The ACE ORB (TAO) IDL Compiler v2.4.1
 * TAO and the TAO IDL Compiler have been developed by:
 *       Center for Distributed Object Computing
 *       Washington University
 *       St. Louis, MO
 *       USA
 *       http://www.cs.wustl.edu/~schmidt/doc-center.html
 * and
 *       Distributed Object Computing Laboratory
 *       University of California at Irvine
 *       Irvine, CA
 *       USA
 * and
 *       Institute for Software Integrated Systems
 *       Vanderbilt University
 *       Nashville, TN
 *       USA
 *       http://www.isis.vanderbilt.edu/
 *
 * Information about TAO is available at:
 *     http://www.dre.vanderbilt.edu/~schmidt/TAO.html
 **/

// TAO_IDL - Generated from
// be/be_codegen.cpp:373


#include "DiamondC.h"
#include "tao/CDR.h"
#include "tao/Exception_Data.h"
#include "tao/Invocation_Adapter.h"
#include "tao/Object_T.h"
#include "ace/OS_NS_string.h"

#if !defined (__ACE_INLINE__)
#include "DiamondC.inl"
#endif /* !defined INLINE */

// TAO_IDL - Generated from
// be/be_visitor_interface/interface_cs.cpp:48

// Traits specializations for Diamond::Top.

Diamond::Top_ptr
TAO::Objref_Traits<Diamond::Top>::duplicate (
    Diamond::Top_ptr p)
{
  return Diamond::Top::_duplicate (p);
}

void
TAO::Objref_Traits<Diamond::Top>::release (
    Diamond::Top_ptr p)
{
  ::CORBA::release (p);
}

Diamond::Top_ptr
TAO::Objref_Traits<Diamond::Top>::nil (void)
{
  return Diamond::Top::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<Diamond::Top>::marshal (
    const Diamond::Top_ptr p,
    TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:88

char *
Diamond::Top::shape (
  void)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  TAO::Arg_Traits< char *>::ret_val _tao_retval;

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      1,
      "shape",
      5,
      TAO::TAO_CO_NONE | TAO::TAO_CO_DIRECT_STRATEGY | TAO::TAO_CO_THRU_POA_STRATEGY,
      TAO::TAO_TWOWAY_INVOCATION
      ,
      TAO::TAO_SYNCHRONOUS_INVOCATION,
      false
    );

  _tao_call.invoke (0, 0);

  return _tao_retval.retn ();
}

Diamond::Top::Top (void)
{
}

Diamond::Top::~Top (void)
{
}

Diamond::Top_ptr
Diamond::Top::_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  Diamond::Top *proxy = 0;

  proxy = TAO::Narrow_Utils<Top>::narrow (
      _tao_objref,
      "IDL:Diamond/Top:1.0");
  return TAO_Diamond_Top_PROXY_FACTORY_ADAPTER::instance ()->create_proxy (proxy);
}

Diamond::Top_ptr
Diamond::Top::_unchecked_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  Diamond::Top *proxy = 0;

  proxy = TAO::Narrow_Utils<Top>::unchecked_narrow (
      _tao_objref);
  return TAO_Diamond_Top_PROXY_FACTORY_ADAPTER::instance ()->create_proxy (proxy);
}

Diamond::Top_ptr
Diamond::Top::_nil (void)
{
  return 0;
}

Diamond::Top_ptr
Diamond::Top::_duplicate (Top_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  return obj;
}

void
Diamond::Top::_tao_release (Top_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
Diamond::Top::_is_a (const char *value)
{
  if (
      ACE_OS::strcmp (
          value,
          "IDL:Diamond/Top:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        ) == 0
    )
    {
      return true; // success using local knowledge
    }
  else
    {
      return this->::CORBA::Object::_is_a (value);
    }
}

const char* Diamond::Top::_interface_repository_id (void) const
{
  return "IDL:Diamond/Top:1.0";
}

::CORBA::Boolean
Diamond::Top::marshal (TAO_OutputCDR &cdr)
{
  return (cdr << this);
}

Diamond::TAO_Diamond_Top_Default_Proxy_Factory::TAO_Diamond_Top_Default_Proxy_Factory (int permanent)
{
  TAO_Diamond_Top_PROXY_FACTORY_ADAPTER::instance ()->register_proxy_factory (this, permanent);
}

Diamond::TAO_Diamond_Top_Default_Proxy_Factory::~TAO_Diamond_Top_Default_Proxy_Factory (void)
{
}

Diamond::Top_ptr
Diamond::TAO_Diamond_Top_Default_Proxy_Factory::create_proxy (
    ::Diamond::Top_ptr proxy
  )
{
  return proxy;
}

Diamond::TAO_Diamond_Top_Proxy_Factory_Adapter::TAO_Diamond_Top_Proxy_Factory_Adapter (void)
  : proxy_factory_ (0),
    one_shot_factory_ (false),
    disable_factory_ (false)
{
}

Diamond::TAO_Diamond_Top_Proxy_Factory_Adapter::~TAO_Diamond_Top_Proxy_Factory_Adapter (void)
{
  // Making sure the factory which the adapter has is destroyed with it.
  if (this->proxy_factory_ != 0)
    {
      delete this->proxy_factory_;
    }
}

void
Diamond::TAO_Diamond_Top_Proxy_Factory_Adapter::register_proxy_factory (
    TAO_Diamond_Top_Default_Proxy_Factory *df,
    bool one_shot_factory
  )
{
  ACE_MT (
      ACE_GUARD (
          TAO_SYNCH_RECURSIVE_MUTEX,
          ace_mon,
          this->lock_
        )
    );
  
  // Remove any existing <proxy_factory_> and replace with the new one.
  this->unregister_proxy_factory ();
  this->proxy_factory_ = df;
  this->one_shot_factory_ = one_shot_factory;
}

void
Diamond::TAO_Diamond_Top_Proxy_Factory_Adapter::unregister_proxy_factory (void)
{
  ACE_MT (
      ACE_GUARD (
          TAO_SYNCH_RECURSIVE_MUTEX,
          ace_mon,
          this->lock_
        )
    );
  
  if (this->one_shot_factory_)
    {
      this->disable_factory_ = true;
    }
  
  if (this->one_shot_factory_ == false && this->proxy_factory_ != 0)
    {
      delete this->proxy_factory_;
      this->proxy_factory_ = 0;
    }
}

Diamond::Top_ptr
Diamond::TAO_Diamond_Top_Proxy_Factory_Adapter::create_proxy (
    ::Diamond::Top_ptr proxy
  )
{
  ACE_MT (ACE_GUARD_RETURN (TAO_SYNCH_RECURSIVE_MUTEX, ace_mon,
    this->lock_, 0));
  
  // To take care of those <unchecked_narrow> methods where we
  // want to override the smart proxy factory if there exists one.
  if (this->disable_factory_)
    {
      this->disable_factory_ = false;
      return proxy;
    }
  
  // Verify that an <proxy_factory_> is available else make one.
  if (this->proxy_factory_ == 0)
    ACE_NEW_RETURN (this->proxy_factory_,
        TAO_Diamond_Top_Default_Proxy_Factory (0),
         0);
      
    
  return this->proxy_factory_->create_proxy (proxy);
}

Diamond::TAO_Diamond_Top_Smart_Proxy_Base::TAO_Diamond_Top_Smart_Proxy_Base (void)
{
}

Diamond::TAO_Diamond_Top_Smart_Proxy_Base::~TAO_Diamond_Top_Smart_Proxy_Base (void)
{
}

TAO_Stub *
Diamond::TAO_Diamond_Top_Smart_Proxy_Base::_stubobj (void) const
{
  return this->base_proxy_->_stubobj ();
}

TAO_Stub *
Diamond::TAO_Diamond_Top_Smart_Proxy_Base::_stubobj (void)
{
  return this->base_proxy_->_stubobj ();
}

char * Diamond::TAO_Diamond_Top_Smart_Proxy_Base::shape  (
  void){
  return this->get_proxy ()->shape (

    );

}

Diamond::Top_ptr
Diamond::TAO_Diamond_Top_Smart_Proxy_Base::get_proxy (void)
  
{
  // Obtain the real proxy stored in <base_proxy_>
  if (CORBA::is_nil (this->proxy_.in ()))
    {
       // Verify whether factory is one-shot, if so disable
       // factory temporarily or not else remove.
      TAO_Diamond_Top_PROXY_FACTORY_ADAPTER::instance ()->unregister_proxy_factory ();
      this->proxy_ = ::Diamond::Top::_narrow (this->base_proxy_.in ());
    }
  return this->proxy_.in ();
}



// TAO_IDL - Generated from
// be/be_visitor_interface/interface_cs.cpp:48

// Traits specializations for Diamond::Left.

Diamond::Left_ptr
TAO::Objref_Traits<Diamond::Left>::duplicate (
    Diamond::Left_ptr p)
{
  return Diamond::Left::_duplicate (p);
}

void
TAO::Objref_Traits<Diamond::Left>::release (
    Diamond::Left_ptr p)
{
  ::CORBA::release (p);
}

Diamond::Left_ptr
TAO::Objref_Traits<Diamond::Left>::nil (void)
{
  return Diamond::Left::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<Diamond::Left>::marshal (
    const Diamond::Left_ptr p,
    TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:88

char *
Diamond::Left::color (
  void)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  TAO::Arg_Traits< char *>::ret_val _tao_retval;

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      1,
      "color",
      5,
      TAO::TAO_CO_NONE | TAO::TAO_CO_DIRECT_STRATEGY | TAO::TAO_CO_THRU_POA_STRATEGY,
      TAO::TAO_TWOWAY_INVOCATION
      ,
      TAO::TAO_SYNCHRONOUS_INVOCATION,
      false
    );

  _tao_call.invoke (0, 0);

  return _tao_retval.retn ();
}

Diamond::Left::Left (void)
{
}

Diamond::Left::~Left (void)
{
}

Diamond::Left_ptr
Diamond::Left::_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  Diamond::Left *proxy = 0;

  proxy = TAO::Narrow_Utils<Left>::narrow (
      _tao_objref,
      "IDL:Diamond/Left:1.0");
  return TAO_Diamond_Left_PROXY_FACTORY_ADAPTER::instance ()->create_proxy (proxy);
}

Diamond::Left_ptr
Diamond::Left::_unchecked_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  Diamond::Left *proxy = 0;

  proxy = TAO::Narrow_Utils<Left>::unchecked_narrow (
      _tao_objref);
  return TAO_Diamond_Left_PROXY_FACTORY_ADAPTER::instance ()->create_proxy (proxy);
}

Diamond::Left_ptr
Diamond::Left::_nil (void)
{
  return 0;
}

Diamond::Left_ptr
Diamond::Left::_duplicate (Left_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  return obj;
}

void
Diamond::Left::_tao_release (Left_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
Diamond::Left::_is_a (const char *value)
{
  if (
      ACE_OS::strcmp (
          value,
          "IDL:Diamond/Top:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:Diamond/Left:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        ) == 0
    )
    {
      return true; // success using local knowledge
    }
  else
    {
      return this->::CORBA::Object::_is_a (value);
    }
}

const char* Diamond::Left::_interface_repository_id (void) const
{
  return "IDL:Diamond/Left:1.0";
}

::CORBA::Boolean
Diamond::Left::marshal (TAO_OutputCDR &cdr)
{
  return (cdr << this);
}

Diamond::TAO_Diamond_Left_Default_Proxy_Factory::TAO_Diamond_Left_Default_Proxy_Factory (int permanent)
{
  TAO_Diamond_Left_PROXY_FACTORY_ADAPTER::instance ()->register_proxy_factory (this, permanent);
}

Diamond::TAO_Diamond_Left_Default_Proxy_Factory::~TAO_Diamond_Left_Default_Proxy_Factory (void)
{
}

Diamond::Left_ptr
Diamond::TAO_Diamond_Left_Default_Proxy_Factory::create_proxy (
    ::Diamond::Left_ptr proxy
  )
{
  return proxy;
}

Diamond::TAO_Diamond_Left_Proxy_Factory_Adapter::TAO_Diamond_Left_Proxy_Factory_Adapter (void)
  : proxy_factory_ (0),
    one_shot_factory_ (false),
    disable_factory_ (false)
{
}

Diamond::TAO_Diamond_Left_Proxy_Factory_Adapter::~TAO_Diamond_Left_Proxy_Factory_Adapter (void)
{
  // Making sure the factory which the adapter has is destroyed with it.
  if (this->proxy_factory_ != 0)
    {
      delete this->proxy_factory_;
    }
}

void
Diamond::TAO_Diamond_Left_Proxy_Factory_Adapter::register_proxy_factory (
    TAO_Diamond_Left_Default_Proxy_Factory *df,
    bool one_shot_factory
  )
{
  ACE_MT (
      ACE_GUARD (
          TAO_SYNCH_RECURSIVE_MUTEX,
          ace_mon,
          this->lock_
        )
    );
  
  // Remove any existing <proxy_factory_> and replace with the new one.
  this->unregister_proxy_factory ();
  this->proxy_factory_ = df;
  this->one_shot_factory_ = one_shot_factory;
}

void
Diamond::TAO_Diamond_Left_Proxy_Factory_Adapter::unregister_proxy_factory (void)
{
  ACE_MT (
      ACE_GUARD (
          TAO_SYNCH_RECURSIVE_MUTEX,
          ace_mon,
          this->lock_
        )
    );
  
  if (this->one_shot_factory_)
    {
      this->disable_factory_ = true;
    }
  
  if (this->one_shot_factory_ == false && this->proxy_factory_ != 0)
    {
      delete this->proxy_factory_;
      this->proxy_factory_ = 0;
    }
}

Diamond::Left_ptr
Diamond::TAO_Diamond_Left_Proxy_Factory_Adapter::create_proxy (
    ::Diamond::Left_ptr proxy
  )
{
  ACE_MT (ACE_GUARD_RETURN (TAO_SYNCH_RECURSIVE_MUTEX, ace_mon,
    this->lock_, 0));
  
  // To take care of those <unchecked_narrow> methods where we
  // want to override the smart proxy factory if there exists one.
  if (this->disable_factory_)
    {
      this->disable_factory_ = false;
      return proxy;
    }
  
  // Verify that an <proxy_factory_> is available else make one.
  if (this->proxy_factory_ == 0)
    ACE_NEW_RETURN (this->proxy_factory_,
        TAO_Diamond_Left_Default_Proxy_Factory (0),
         0);
      
    
  return this->proxy_factory_->create_proxy (proxy);
}

Diamond::TAO_Diamond_Left_Smart_Proxy_Base::TAO_Diamond_Left_Smart_Proxy_Base (void)
{
}

Diamond::TAO_Diamond_Left_Smart_Proxy_Base::~TAO_Diamond_Left_Smart_Proxy_Base (void)
{
}

TAO_Stub *
Diamond::TAO_Diamond_Left_Smart_Proxy_Base::_stubobj (void) const
{
  return this->base_proxy_->_stubobj ();
}

TAO_Stub *
Diamond::TAO_Diamond_Left_Smart_Proxy_Base::_stubobj (void)
{
  return this->base_proxy_->_stubobj ();
}

char * Diamond::TAO_Diamond_Left_Smart_Proxy_Base::color  (
  void){
  return this->get_proxy ()->color (

    );

}

Diamond::Left_ptr
Diamond::TAO_Diamond_Left_Smart_Proxy_Base::get_proxy (void)
  
{
  // Obtain the real proxy stored in <base_proxy_>
  if (CORBA::is_nil (this->proxy_.in ()))
    {
       // Verify whether factory is one-shot, if so disable
       // factory temporarily or not else remove.
      TAO_Diamond_Left_PROXY_FACTORY_ADAPTER::instance ()->unregister_proxy_factory ();
      this->proxy_ = ::Diamond::Left::_narrow (this->base_proxy_.in ());
    }
  return this->proxy_.in ();
}



// TAO_IDL - Generated from
// be/be_visitor_interface/interface_cs.cpp:48

// Traits specializations for Diamond::Right.

Diamond::Right_ptr
TAO::Objref_Traits<Diamond::Right>::duplicate (
    Diamond::Right_ptr p)
{
  return Diamond::Right::_duplicate (p);
}

void
TAO::Objref_Traits<Diamond::Right>::release (
    Diamond::Right_ptr p)
{
  ::CORBA::release (p);
}

Diamond::Right_ptr
TAO::Objref_Traits<Diamond::Right>::nil (void)
{
  return Diamond::Right::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<Diamond::Right>::marshal (
    const Diamond::Right_ptr p,
    TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:88

::CORBA::Long
Diamond::Right::width (
  void)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  TAO::Arg_Traits< ::CORBA::Long>::ret_val _tao_retval;

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      1,
      "width",
      5,
      TAO::TAO_CO_NONE | TAO::TAO_CO_DIRECT_STRATEGY | TAO::TAO_CO_THRU_POA_STRATEGY,
      TAO::TAO_TWOWAY_INVOCATION
      ,
      TAO::TAO_SYNCHRONOUS_INVOCATION,
      false
    );

  _tao_call.invoke (0, 0);

  return _tao_retval.retn ();
}

Diamond::Right::Right (void)
{
}

Diamond::Right::~Right (void)
{
}

Diamond::Right_ptr
Diamond::Right::_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  Diamond::Right *proxy = 0;

  proxy = TAO::Narrow_Utils<Right>::narrow (
      _tao_objref,
      "IDL:Diamond/Right:1.0");
  return TAO_Diamond_Right_PROXY_FACTORY_ADAPTER::instance ()->create_proxy (proxy);
}

Diamond::Right_ptr
Diamond::Right::_unchecked_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  Diamond::Right *proxy = 0;

  proxy = TAO::Narrow_Utils<Right>::unchecked_narrow (
      _tao_objref);
  return TAO_Diamond_Right_PROXY_FACTORY_ADAPTER::instance ()->create_proxy (proxy);
}

Diamond::Right_ptr
Diamond::Right::_nil (void)
{
  return 0;
}

Diamond::Right_ptr
Diamond::Right::_duplicate (Right_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  return obj;
}

void
Diamond::Right::_tao_release (Right_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
Diamond::Right::_is_a (const char *value)
{
  if (
      ACE_OS::strcmp (
          value,
          "IDL:Diamond/Top:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:Diamond/Right:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        ) == 0
    )
    {
      return true; // success using local knowledge
    }
  else
    {
      return this->::CORBA::Object::_is_a (value);
    }
}

const char* Diamond::Right::_interface_repository_id (void) const
{
  return "IDL:Diamond/Right:1.0";
}

::CORBA::Boolean
Diamond::Right::marshal (TAO_OutputCDR &cdr)
{
  return (cdr << this);
}

Diamond::TAO_Diamond_Right_Default_Proxy_Factory::TAO_Diamond_Right_Default_Proxy_Factory (int permanent)
{
  TAO_Diamond_Right_PROXY_FACTORY_ADAPTER::instance ()->register_proxy_factory (this, permanent);
}

Diamond::TAO_Diamond_Right_Default_Proxy_Factory::~TAO_Diamond_Right_Default_Proxy_Factory (void)
{
}

Diamond::Right_ptr
Diamond::TAO_Diamond_Right_Default_Proxy_Factory::create_proxy (
    ::Diamond::Right_ptr proxy
  )
{
  return proxy;
}

Diamond::TAO_Diamond_Right_Proxy_Factory_Adapter::TAO_Diamond_Right_Proxy_Factory_Adapter (void)
  : proxy_factory_ (0),
    one_shot_factory_ (false),
    disable_factory_ (false)
{
}

Diamond::TAO_Diamond_Right_Proxy_Factory_Adapter::~TAO_Diamond_Right_Proxy_Factory_Adapter (void)
{
  // Making sure the factory which the adapter has is destroyed with it.
  if (this->proxy_factory_ != 0)
    {
      delete this->proxy_factory_;
    }
}

void
Diamond::TAO_Diamond_Right_Proxy_Factory_Adapter::register_proxy_factory (
    TAO_Diamond_Right_Default_Proxy_Factory *df,
    bool one_shot_factory
  )
{
  ACE_MT (
      ACE_GUARD (
          TAO_SYNCH_RECURSIVE_MUTEX,
          ace_mon,
          this->lock_
        )
    );
  
  // Remove any existing <proxy_factory_> and replace with the new one.
  this->unregister_proxy_factory ();
  this->proxy_factory_ = df;
  this->one_shot_factory_ = one_shot_factory;
}

void
Diamond::TAO_Diamond_Right_Proxy_Factory_Adapter::unregister_proxy_factory (void)
{
  ACE_MT (
      ACE_GUARD (
          TAO_SYNCH_RECURSIVE_MUTEX,
          ace_mon,
          this->lock_
        )
    );
  
  if (this->one_shot_factory_)
    {
      this->disable_factory_ = true;
    }
  
  if (this->one_shot_factory_ == false && this->proxy_factory_ != 0)
    {
      delete this->proxy_factory_;
      this->proxy_factory_ = 0;
    }
}

Diamond::Right_ptr
Diamond::TAO_Diamond_Right_Proxy_Factory_Adapter::create_proxy (
    ::Diamond::Right_ptr proxy
  )
{
  ACE_MT (ACE_GUARD_RETURN (TAO_SYNCH_RECURSIVE_MUTEX, ace_mon,
    this->lock_, 0));
  
  // To take care of those <unchecked_narrow> methods where we
  // want to override the smart proxy factory if there exists one.
  if (this->disable_factory_)
    {
      this->disable_factory_ = false;
      return proxy;
    }
  
  // Verify that an <proxy_factory_> is available else make one.
  if (this->proxy_factory_ == 0)
    ACE_NEW_RETURN (this->proxy_factory_,
        TAO_Diamond_Right_Default_Proxy_Factory (0),
         0);
      
    
  return this->proxy_factory_->create_proxy (proxy);
}

Diamond::TAO_Diamond_Right_Smart_Proxy_Base::TAO_Diamond_Right_Smart_Proxy_Base (void)
{
}

Diamond::TAO_Diamond_Right_Smart_Proxy_Base::~TAO_Diamond_Right_Smart_Proxy_Base (void)
{
}

TAO_Stub *
Diamond::TAO_Diamond_Right_Smart_Proxy_Base::_stubobj (void) const
{
  return this->base_proxy_->_stubobj ();
}

TAO_Stub *
Diamond::TAO_Diamond_Right_Smart_Proxy_Base::_stubobj (void)
{
  return this->base_proxy_->_stubobj ();
}

::CORBA::Long Diamond::TAO_Diamond_Right_Smart_Proxy_Base::width  (
  void){
  return this->get_proxy ()->width (

    );

}

Diamond::Right_ptr
Diamond::TAO_Diamond_Right_Smart_Proxy_Base::get_proxy (void)
  
{
  // Obtain the real proxy stored in <base_proxy_>
  if (CORBA::is_nil (this->proxy_.in ()))
    {
       // Verify whether factory is one-shot, if so disable
       // factory temporarily or not else remove.
      TAO_Diamond_Right_PROXY_FACTORY_ADAPTER::instance ()->unregister_proxy_factory ();
      this->proxy_ = ::Diamond::Right::_narrow (this->base_proxy_.in ());
    }
  return this->proxy_.in ();
}



// TAO_IDL - Generated from
// be/be_visitor_interface/interface_cs.cpp:48

// Traits specializations for Diamond::Buttom.

Diamond::Buttom_ptr
TAO::Objref_Traits<Diamond::Buttom>::duplicate (
    Diamond::Buttom_ptr p)
{
  return Diamond::Buttom::_duplicate (p);
}

void
TAO::Objref_Traits<Diamond::Buttom>::release (
    Diamond::Buttom_ptr p)
{
  ::CORBA::release (p);
}

Diamond::Buttom_ptr
TAO::Objref_Traits<Diamond::Buttom>::nil (void)
{
  return Diamond::Buttom::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<Diamond::Buttom>::marshal (
    const Diamond::Buttom_ptr p,
    TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:88

char *
Diamond::Buttom::name (
  void)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  TAO::Arg_Traits< char *>::ret_val _tao_retval;

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      1,
      "name",
      4,
      TAO::TAO_CO_NONE | TAO::TAO_CO_DIRECT_STRATEGY | TAO::TAO_CO_THRU_POA_STRATEGY,
      TAO::TAO_TWOWAY_INVOCATION
      ,
      TAO::TAO_SYNCHRONOUS_INVOCATION,
      false
    );

  _tao_call.invoke (0, 0);

  return _tao_retval.retn ();
}

Diamond::Buttom::Buttom (void)
{
}

Diamond::Buttom::~Buttom (void)
{
}

Diamond::Buttom_ptr
Diamond::Buttom::_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  Diamond::Buttom *proxy = 0;

  proxy = TAO::Narrow_Utils<Buttom>::narrow (
      _tao_objref,
      "IDL:Diamond/Buttom:1.0");
  return TAO_Diamond_Buttom_PROXY_FACTORY_ADAPTER::instance ()->create_proxy (proxy);
}

Diamond::Buttom_ptr
Diamond::Buttom::_unchecked_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  Diamond::Buttom *proxy = 0;

  proxy = TAO::Narrow_Utils<Buttom>::unchecked_narrow (
      _tao_objref);
  return TAO_Diamond_Buttom_PROXY_FACTORY_ADAPTER::instance ()->create_proxy (proxy);
}

Diamond::Buttom_ptr
Diamond::Buttom::_nil (void)
{
  return 0;
}

Diamond::Buttom_ptr
Diamond::Buttom::_duplicate (Buttom_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  return obj;
}

void
Diamond::Buttom::_tao_release (Buttom_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
Diamond::Buttom::_is_a (const char *value)
{
  if (
      ACE_OS::strcmp (
          value,
          "IDL:Diamond/Top:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:Diamond/Left:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:Diamond/Right:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:Diamond/Buttom:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        ) == 0
    )
    {
      return true; // success using local knowledge
    }
  else
    {
      return this->::CORBA::Object::_is_a (value);
    }
}

const char* Diamond::Buttom::_interface_repository_id (void) const
{
  return "IDL:Diamond/Buttom:1.0";
}

::CORBA::Boolean
Diamond::Buttom::marshal (TAO_OutputCDR &cdr)
{
  return (cdr << this);
}

Diamond::TAO_Diamond_Buttom_Default_Proxy_Factory::TAO_Diamond_Buttom_Default_Proxy_Factory (int permanent)
{
  TAO_Diamond_Buttom_PROXY_FACTORY_ADAPTER::instance ()->register_proxy_factory (this, permanent);
}

Diamond::TAO_Diamond_Buttom_Default_Proxy_Factory::~TAO_Diamond_Buttom_Default_Proxy_Factory (void)
{
}

Diamond::Buttom_ptr
Diamond::TAO_Diamond_Buttom_Default_Proxy_Factory::create_proxy (
    ::Diamond::Buttom_ptr proxy
  )
{
  return proxy;
}

Diamond::TAO_Diamond_Buttom_Proxy_Factory_Adapter::TAO_Diamond_Buttom_Proxy_Factory_Adapter (void)
  : proxy_factory_ (0),
    one_shot_factory_ (false),
    disable_factory_ (false)
{
}

Diamond::TAO_Diamond_Buttom_Proxy_Factory_Adapter::~TAO_Diamond_Buttom_Proxy_Factory_Adapter (void)
{
  // Making sure the factory which the adapter has is destroyed with it.
  if (this->proxy_factory_ != 0)
    {
      delete this->proxy_factory_;
    }
}

void
Diamond::TAO_Diamond_Buttom_Proxy_Factory_Adapter::register_proxy_factory (
    TAO_Diamond_Buttom_Default_Proxy_Factory *df,
    bool one_shot_factory
  )
{
  ACE_MT (
      ACE_GUARD (
          TAO_SYNCH_RECURSIVE_MUTEX,
          ace_mon,
          this->lock_
        )
    );
  
  // Remove any existing <proxy_factory_> and replace with the new one.
  this->unregister_proxy_factory ();
  this->proxy_factory_ = df;
  this->one_shot_factory_ = one_shot_factory;
}

void
Diamond::TAO_Diamond_Buttom_Proxy_Factory_Adapter::unregister_proxy_factory (void)
{
  ACE_MT (
      ACE_GUARD (
          TAO_SYNCH_RECURSIVE_MUTEX,
          ace_mon,
          this->lock_
        )
    );
  
  if (this->one_shot_factory_)
    {
      this->disable_factory_ = true;
    }
  
  if (this->one_shot_factory_ == false && this->proxy_factory_ != 0)
    {
      delete this->proxy_factory_;
      this->proxy_factory_ = 0;
    }
}

Diamond::Buttom_ptr
Diamond::TAO_Diamond_Buttom_Proxy_Factory_Adapter::create_proxy (
    ::Diamond::Buttom_ptr proxy
  )
{
  ACE_MT (ACE_GUARD_RETURN (TAO_SYNCH_RECURSIVE_MUTEX, ace_mon,
    this->lock_, 0));
  
  // To take care of those <unchecked_narrow> methods where we
  // want to override the smart proxy factory if there exists one.
  if (this->disable_factory_)
    {
      this->disable_factory_ = false;
      return proxy;
    }
  
  // Verify that an <proxy_factory_> is available else make one.
  if (this->proxy_factory_ == 0)
    ACE_NEW_RETURN (this->proxy_factory_,
        TAO_Diamond_Buttom_Default_Proxy_Factory (0),
         0);
      
    
  return this->proxy_factory_->create_proxy (proxy);
}

Diamond::TAO_Diamond_Buttom_Smart_Proxy_Base::TAO_Diamond_Buttom_Smart_Proxy_Base (void)
{
}

Diamond::TAO_Diamond_Buttom_Smart_Proxy_Base::~TAO_Diamond_Buttom_Smart_Proxy_Base (void)
{
}

TAO_Stub *
Diamond::TAO_Diamond_Buttom_Smart_Proxy_Base::_stubobj (void) const
{
  return this->base_proxy_->_stubobj ();
}

TAO_Stub *
Diamond::TAO_Diamond_Buttom_Smart_Proxy_Base::_stubobj (void)
{
  return this->base_proxy_->_stubobj ();
}

char * Diamond::TAO_Diamond_Buttom_Smart_Proxy_Base::name  (
  void){
  return this->get_proxy ()->name (

    );

}

Diamond::Buttom_ptr
Diamond::TAO_Diamond_Buttom_Smart_Proxy_Base::get_proxy (void)
  
{
  // Obtain the real proxy stored in <base_proxy_>
  if (CORBA::is_nil (this->proxy_.in ()))
    {
       // Verify whether factory is one-shot, if so disable
       // factory temporarily or not else remove.
      TAO_Diamond_Buttom_PROXY_FACTORY_ADAPTER::instance ()->unregister_proxy_factory ();
      this->proxy_ = ::Diamond::Buttom::_narrow (this->base_proxy_.in ());
    }
  return this->proxy_.in ();
}



// TAO_IDL - Generated from
// be/be_visitor_interface/cdr_op_cs.cpp:51

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Diamond::Top_ptr _tao_objref)
{
  ::CORBA::Object_ptr _tao_corba_obj = _tao_objref;
  return (strm << _tao_corba_obj);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Diamond::Top_ptr &_tao_objref)
{
  ::CORBA::Object_var obj;

  if (!(strm >> obj.inout ()))
    {
      return false;
    }
  
  typedef ::Diamond::Top RHS_SCOPED_NAME;

  // Narrow to the right type.
  _tao_objref =
    TAO::Narrow_Utils<RHS_SCOPED_NAME>::unchecked_narrow (obj.in ());
    
  return true;
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_interface/cdr_op_cs.cpp:51

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Diamond::Left_ptr _tao_objref)
{
  ::CORBA::Object_ptr _tao_corba_obj = _tao_objref;
  return (strm << _tao_corba_obj);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Diamond::Left_ptr &_tao_objref)
{
  ::CORBA::Object_var obj;

  if (!(strm >> obj.inout ()))
    {
      return false;
    }
  
  typedef ::Diamond::Left RHS_SCOPED_NAME;

  // Narrow to the right type.
  _tao_objref =
    TAO::Narrow_Utils<RHS_SCOPED_NAME>::unchecked_narrow (obj.in ());
    
  return true;
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_interface/cdr_op_cs.cpp:51

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Diamond::Right_ptr _tao_objref)
{
  ::CORBA::Object_ptr _tao_corba_obj = _tao_objref;
  return (strm << _tao_corba_obj);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Diamond::Right_ptr &_tao_objref)
{
  ::CORBA::Object_var obj;

  if (!(strm >> obj.inout ()))
    {
      return false;
    }
  
  typedef ::Diamond::Right RHS_SCOPED_NAME;

  // Narrow to the right type.
  _tao_objref =
    TAO::Narrow_Utils<RHS_SCOPED_NAME>::unchecked_narrow (obj.in ());
    
  return true;
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_interface/cdr_op_cs.cpp:51

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Diamond::Buttom_ptr _tao_objref)
{
  ::CORBA::Object_ptr _tao_corba_obj = _tao_objref;
  return (strm << _tao_corba_obj);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Diamond::Buttom_ptr &_tao_objref)
{
  ::CORBA::Object_var obj;

  if (!(strm >> obj.inout ()))
    {
      return false;
    }
  
  typedef ::Diamond::Buttom RHS_SCOPED_NAME;

  // Narrow to the right type.
  _tao_objref =
    TAO::Narrow_Utils<RHS_SCOPED_NAME>::unchecked_narrow (obj.in ());
    
  return true;
}

TAO_END_VERSIONED_NAMESPACE_DECL



