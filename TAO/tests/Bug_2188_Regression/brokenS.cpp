// -*- C++ -*-
/**
 * Code generated by the The ACE ORB (TAO) IDL Compiler v2.4.1
 * TAO and the TAO IDL Compiler have been developed by:
 *       Center for Distributed Object Computing
 *       Washington University
 *       St. Louis, MO
 *       USA
 *       http://www.cs.wustl.edu/~schmidt/doc-center.html
 * and
 *       Distributed Object Computing Laboratory
 *       University of California at Irvine
 *       Irvine, CA
 *       USA
 * and
 *       Institute for Software Integrated Systems
 *       Vanderbilt University
 *       Nashville, TN
 *       USA
 *       http://www.isis.vanderbilt.edu/
 *
 * Information about TAO is available at:
 *     http://www.dre.vanderbilt.edu/~schmidt/TAO.html
 **/


// TAO_IDL - Generated from
// be/be_codegen.cpp:649

#ifndef _TAO_IDL_BROKENS_ASUTJG_CPP_
#define _TAO_IDL_BROKENS_ASUTJG_CPP_


#include "brokenS.h"
#include "tao/PortableServer/Operation_Table_Perfect_Hash.h"
#include "tao/PortableServer/Upcall_Command.h"
#include "tao/PortableServer/Upcall_Wrapper.h"
#include "tao/TAO_Server_Request.h"
#include "tao/ORB_Core.h"
#include "tao/Profile.h"
#include "tao/Stub.h"
#include "tao/IFR_Client_Adapter.h"
#include "tao/Object_T.h"
#include "tao/AnyTypeCode/TypeCode.h"
#include "tao/AnyTypeCode/DynamicC.h"
#include "tao/CDR.h"
#include "tao/operation_details.h"
#include "tao/PortableInterceptor.h"
#include "ace/Dynamic_Service.h"
#include "ace/Malloc_Allocator.h"

// TAO_IDL - Generated from
// be/be_interface.cpp:1865

class TAO_moola_Account_Perfect_Hash_OpTable
  : public TAO_Perfect_Hash_OpTable
{
private:
  unsigned int hash (const char *str, unsigned int len);

public:
  const TAO_operation_db_entry * lookup (const char *str, unsigned int len);
};

/* C++ code produced by gperf version 2.8 (ACE version) */
/* Command-line: /mnt/win_d/projects/ATCD/ACE/bin/ace_gperf -m -M -J -c -C -D -E -T -f 0 -F 0,0 -a -o -t -p -K opname -L C++ -Z TAO_moola_Account_Perfect_Hash_OpTable -N lookup  */
unsigned int
TAO_moola_Account_Perfect_Hash_OpTable::hash (const char *str, unsigned int len)
{
  static const unsigned char asso_values[] =
    {
     20, 20, 20, 20, 20, 20, 20, 20, 20, 20,
     20, 20, 20, 20, 20, 20, 20, 20, 20, 20,
     20, 20, 20, 20, 20, 20, 20, 20, 20, 20,
     20, 20, 20, 20, 20, 20, 20, 20, 20, 20,
     20, 20, 20, 20, 20, 20, 20, 20, 20, 20,
     20, 20, 20, 20, 20, 20, 20, 20, 20, 20,
     20, 20, 20, 20, 20, 20, 20, 20, 20, 20,
     20, 20, 20, 20, 20, 20, 20, 20, 20, 20,
     20, 20, 20, 20, 20, 20, 20, 20, 20, 20,
     20, 20, 20, 20, 20,  0, 20,  0, 20, 20,
      5,  0, 20, 20, 20, 20, 20, 20, 20, 20,
     20, 20, 20, 20, 20, 20,  5, 20, 20,  0,
     20, 20, 20, 20, 20, 20, 20, 20,
    };
  return len + asso_values[static_cast<int>(str[len - 1])] + asso_values[static_cast<int>(str[0])];
}

const TAO_operation_db_entry *
TAO_moola_Account_Perfect_Hash_OpTable::lookup (const char *str, unsigned int len)
{
  enum
    {
      TOTAL_KEYWORDS = 11,
      MIN_WORD_LENGTH = 5,
      MAX_WORD_LENGTH = 14,
      MIN_HASH_VALUE = 5,
      MAX_HASH_VALUE = 19,
      HASH_VALUE_RANGE = 15,
      DUPLICATES = 3,
      WORDLIST_SIZE = 16
    };

  static const TAO_operation_db_entry wordlist[] =
    {
      {"",0,0},{"",0,0},{"",0,0},{"",0,0},{"",0,0},
      {"_is_a", &TAO_ServantBase::_is_a_thru_poa_skel, 0},
      {"withdraw", &POA_moola::Account::withdraw_skel, 0},
      {"_get_name", &POA_moola::Account::_get_name_skel, 0},
      {"_set_name", &POA_moola::Account::_set_name_skel, 0},
      {"_interface", &TAO_ServantBase::_interface_skel, 0},
      {"_get_balance", &POA_moola::Account::_get_balance_skel, 0},
      {"_set_balance", &POA_moola::Account::_set_balance_skel, 0},
      {"_component", &TAO_ServantBase::_component_thru_poa_skel, 0},
      {"deposit", &POA_moola::Account::deposit_skel, 0},
      {"_non_existent", &TAO_ServantBase::_non_existent_thru_poa_skel, 0},
      {"_repository_id", &TAO_ServantBase::_repository_id_thru_poa_skel, 0},
    };

  static const signed char lookup[] =
    {
       -1,  -1,  -1,  -7,  -2,   5, -10,  -2,   6, -25,   9,  -1, -25,  -1, 
       -1,  12,  -1,  13,  14,  15, 
    };

  if (len <= MAX_WORD_LENGTH && len >= MIN_WORD_LENGTH)
    {
      unsigned int key = hash (str, len);

      if (key <= MAX_HASH_VALUE && key >= MIN_HASH_VALUE)
        {
          int slot = lookup[key];

          if (slot >= 0 && slot < WORDLIST_SIZE)
            {
              const char *s = wordlist[slot].opname;

              if (*str == *s && !ACE_OS::strncmp (str + 1, s + 1, len - 1))
                return &wordlist[slot];
            }
          else if (slot < 0 && slot >= -MAX_HASH_VALUE)
            return 0;
          else
            {
              unsigned int offset = key + slot + (slot > 0 ? -MAX_HASH_VALUE : MAX_HASH_VALUE);
              const TAO_operation_db_entry *base = &wordlist[-lookup[offset]];
              const TAO_operation_db_entry *ptr = base + -lookup[offset + 1];

              while (--ptr >= base)
                if (*str == *ptr->opname && !ACE_OS::strncmp (str + 1, ptr->opname + 1, len - 1))
                  return ptr;
            }
        }
    }
  return 0;
}

static TAO_moola_Account_Perfect_Hash_OpTable tao_moola_Account_optable;

// TAO_IDL - Generated from
// be/be_visitor_interface/interface_ss.cpp:90

POA_moola::Account::Account (void)
  : TAO_ServantBase ()
{
  this->optable_ = &tao_moola_Account_optable;
}

POA_moola::Account::Account (const Account& rhs)
  : TAO_Abstract_ServantBase (rhs),
    TAO_ServantBase (rhs)
{
}

POA_moola::Account::~Account (void)
{
}

namespace POA_moola
{
  

  // TAO_IDL - Generated from
  // be/be_visitor_operation/upcall_command_ss.cpp:80

  class _get_name_Account
    : public TAO::Upcall_Command
  {
  public:
    inline _get_name_Account (
      POA_moola::Account * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< char *>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< char *> (
          this->operation_details_,
          this->args_);
      
      retval =
        this->servant_->name ();
    }
  
  private:
    POA_moola::Account * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_ss.cpp:168

void POA_moola::Account::_get_name_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< char *>::ret_val retval;

  TAO::Argument * const args[] =
    {
      &retval
    };
  
  static size_t const nargs = 1;

  POA_moola::Account * const impl =
    dynamic_cast<POA_moola::Account *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  _get_name_Account command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_moola
{
  

  // TAO_IDL - Generated from
  // be/be_visitor_operation/upcall_command_ss.cpp:80

  class _set_name_Account
    : public TAO::Upcall_Command
  {
  public:
    inline _set_name_Account (
      POA_moola::Account * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< char *>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< char *> (
          this->operation_details_,
          this->args_,
          1);
        
      this->servant_->name (
        arg_1);
    }
  
  private:
    POA_moola::Account * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_ss.cpp:168

void POA_moola::Account::_set_name_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< void>::ret_val retval;
  TAO::SArg_Traits< char *>::in_arg_val _tao_name;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_name
    };
  
  static size_t const nargs = 2;

  POA_moola::Account * const impl =
    dynamic_cast<POA_moola::Account *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  _set_name_Account command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_moola
{
  

  // TAO_IDL - Generated from
  // be/be_visitor_operation/upcall_command_ss.cpp:80

  class _get_balance_Account
    : public TAO::Upcall_Command
  {
  public:
    inline _get_balance_Account (
      POA_moola::Account * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::CORBA::Float>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::CORBA::Float> (
          this->operation_details_,
          this->args_);
      
      retval =
        this->servant_->balance ();
    }
  
  private:
    POA_moola::Account * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_ss.cpp:168

void POA_moola::Account::_get_balance_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::CORBA::Float>::ret_val retval;

  TAO::Argument * const args[] =
    {
      &retval
    };
  
  static size_t const nargs = 1;

  POA_moola::Account * const impl =
    dynamic_cast<POA_moola::Account *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  _get_balance_Account command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_moola
{
  

  // TAO_IDL - Generated from
  // be/be_visitor_operation/upcall_command_ss.cpp:80

  class _set_balance_Account
    : public TAO::Upcall_Command
  {
  public:
    inline _set_balance_Account (
      POA_moola::Account * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::CORBA::Float>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< ::CORBA::Float> (
          this->operation_details_,
          this->args_,
          1);
        
      this->servant_->balance (
        arg_1);
    }
  
  private:
    POA_moola::Account * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_ss.cpp:168

void POA_moola::Account::_set_balance_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< void>::ret_val retval;
  TAO::SArg_Traits< ::CORBA::Float>::in_arg_val _tao_balance;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_balance
    };
  
  static size_t const nargs = 2;

  POA_moola::Account * const impl =
    dynamic_cast<POA_moola::Account *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  _set_balance_Account command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_moola
{
  

  // TAO_IDL - Generated from
  // be/be_visitor_operation/upcall_command_ss.cpp:80

  class deposit_Account
    : public TAO::Upcall_Command
  {
  public:
    inline deposit_Account (
      POA_moola::Account * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::CORBA::Float>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< ::CORBA::Float> (
          this->operation_details_,
          this->args_,
          1);
        
      this->servant_->deposit (
        arg_1);
    }
  
  private:
    POA_moola::Account * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_ss.cpp:168

void POA_moola::Account::deposit_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< void>::ret_val retval;
  TAO::SArg_Traits< ::CORBA::Float>::in_arg_val _tao_amount;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_amount
    };
  
  static size_t const nargs = 2;

  POA_moola::Account * const impl =
    dynamic_cast<POA_moola::Account *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  deposit_Account command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_moola
{
  

  // TAO_IDL - Generated from
  // be/be_visitor_operation/upcall_command_ss.cpp:80

  class withdraw_Account
    : public TAO::Upcall_Command
  {
  public:
    inline withdraw_Account (
      POA_moola::Account * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::CORBA::Float>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< ::CORBA::Float> (
          this->operation_details_,
          this->args_,
          1);
        
      this->servant_->withdraw (
        arg_1);
    }
  
  private:
    POA_moola::Account * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_ss.cpp:168

void POA_moola::Account::withdraw_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< void>::ret_val retval;
  TAO::SArg_Traits< ::CORBA::Float>::in_arg_val _tao_amount;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_amount
    };
  
  static size_t const nargs = 2;

  POA_moola::Account * const impl =
    dynamic_cast<POA_moola::Account *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  withdraw_Account command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}



// TAO_IDL - Generated from
// be/be_visitor_interface/interface_ss.cpp:163



::CORBA::Boolean POA_moola::Account::_is_a (const char* value)
{
  return
    (
      ACE_OS::strcmp (
          value,
          "IDL:moola/Account:1.0"
        ) == 0 ||
      !ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        )
    );
}

const char* POA_moola::Account::_interface_repository_id (void) const
{
  return "IDL:moola/Account:1.0";
}

// TAO_IDL - Generated from
// be/be_visitor_interface/interface_ss.cpp:423

void POA_moola::Account::_dispatch (
  TAO_ServerRequest & req,
  TAO::Portable_Server::Servant_Upcall* servant_upcall)
{
  this->synchronous_upcall_dispatch (req, servant_upcall, this);
}

// TAO_IDL - Generated from
// be/be_visitor_interface/interface_ss.cpp:370

moola::Account *
POA_moola::Account::_this (void)
{
  TAO_Stub *stub = this->_create_stub ();

  TAO_Stub_Auto_Ptr safe_stub (stub);
  ::CORBA::Object_ptr tmp = CORBA::Object_ptr ();

  ::CORBA::Boolean const _tao_opt_colloc =
    stub->servant_orb_var ()->orb_core ()->optimize_collocation_objects ();
  
  ACE_NEW_RETURN (
      tmp,
      ::CORBA::Object (stub, _tao_opt_colloc, this),
      0);
  
  ::CORBA::Object_var obj = tmp;
  (void) safe_stub.release ();

  typedef ::moola::Account STUB_SCOPED_NAME;
  return
    TAO::Narrow_Utils<STUB_SCOPED_NAME>::unchecked_narrow (
        obj.in ());
}

// TAO_IDL - Generated from
// be/be_interface.cpp:1865

class TAO_ArrayTest_Perfect_Hash_OpTable
  : public TAO_Perfect_Hash_OpTable
{
private:
  unsigned int hash (const char *str, unsigned int len);

public:
  const TAO_operation_db_entry * lookup (const char *str, unsigned int len);
};

/* C++ code produced by gperf version 2.8 (ACE version) */
/* Command-line: /mnt/win_d/projects/ATCD/ACE/bin/ace_gperf -m -M -J -c -C -D -E -T -f 0 -F 0,0 -a -o -t -p -K opname -L C++ -Z TAO_ArrayTest_Perfect_Hash_OpTable -N lookup  */
unsigned int
TAO_ArrayTest_Perfect_Hash_OpTable::hash (const char *str, unsigned int len)
{
  static const unsigned char asso_values[] =
    {
     34, 34, 34, 34, 34, 34, 34, 34, 34, 34,
     34, 34, 34, 34, 34, 34, 34, 34, 34, 34,
     34, 34, 34, 34, 34, 34, 34, 34, 34, 34,
     34, 34, 34, 34, 34, 34, 34, 34, 34, 34,
     34, 34, 34, 34, 34, 34, 34, 34, 34, 34,
     34, 34, 34, 34, 34, 34, 34, 34, 34, 34,
     34, 34, 34, 34, 34, 34, 34, 34, 34, 34,
     34, 34, 34, 34, 34, 34, 34, 34, 34, 34,
     34, 34, 34, 34, 34, 34, 34, 34, 34, 34,
     34, 34, 34, 34, 34,  0, 34,  0, 34, 20,
     10,  5, 34, 34, 34, 34, 34, 34, 15, 34,
     34,  0,  0, 34,  0, 15,  0, 20, 34, 34,
     34,  0, 34, 34, 34, 34, 34, 34,
    };
  return len + asso_values[static_cast<int>(str[len - 1])] + asso_values[static_cast<int>(str[0])];
}

const TAO_operation_db_entry *
TAO_ArrayTest_Perfect_Hash_OpTable::lookup (const char *str, unsigned int len)
{
  enum
    {
      TOTAL_KEYWORDS = 42,
      MIN_WORD_LENGTH = 5,
      MAX_WORD_LENGTH = 21,
      MIN_HASH_VALUE = 5,
      MAX_HASH_VALUE = 33,
      HASH_VALUE_RANGE = 29,
      DUPLICATES = 25,
      WORDLIST_SIZE = 47
    };

  static const TAO_operation_db_entry wordlist[] =
    {
      {"",0,0},{"",0,0},{"",0,0},{"",0,0},{"",0,0},
      {"_is_a", &TAO_ServantBase::_is_a_thru_poa_skel, 0},
      {"_component", &TAO_ServantBase::_component_thru_poa_skel, 0},
      {"_get_a_char", &POA_ArrayTest::_get_a_char_skel, 0},
      {"_set_a_char", &POA_ArrayTest::_set_a_char_skel, 0},
      {"octetArrayOp", &POA_ArrayTest::octetArrayOp_skel, 0},
      {"_non_existent", &TAO_ServantBase::_non_existent_thru_poa_skel, 0},
      {"_interface", &TAO_ServantBase::_interface_skel, 0},
      {"_get_a_longArray", &POA_ArrayTest::_get_a_longArray_skel, 0},
      {"_set_a_charArray", &POA_ArrayTest::_set_a_charArray_skel, 0},
      {"_get_a_charArray", &POA_ArrayTest::_get_a_charArray_skel, 0},
      {"_set_a_longArray", &POA_ArrayTest::_set_a_longArray_skel, 0},
      {"_get_a_ulongArray", &POA_ArrayTest::_get_a_ulongArray_skel, 0},
      {"_set_a_floatArray", &POA_ArrayTest::_set_a_floatArray_skel, 0},
      {"_get_a_floatArray", &POA_ArrayTest::_get_a_floatArray_skel, 0},
      {"_set_a_octetArray", &POA_ArrayTest::_set_a_octetArray_skel, 0},
      {"_get_a_octetArray", &POA_ArrayTest::_get_a_octetArray_skel, 0},
      {"_set_a_shortArray", &POA_ArrayTest::_set_a_shortArray_skel, 0},
      {"_get_a_shortArray", &POA_ArrayTest::_get_a_shortArray_skel, 0},
      {"_set_a_ulongArray", &POA_ArrayTest::_set_a_ulongArray_skel, 0},
      {"_get_a_stringArray", &POA_ArrayTest::_get_a_stringArray_skel, 0},
      {"_set_a_myEnumArray", &POA_ArrayTest::_set_a_myEnumArray_skel, 0},
      {"_get_a_myEnumArray", &POA_ArrayTest::_get_a_myEnumArray_skel, 0},
      {"_set_a_bucketArray", &POA_ArrayTest::_set_a_bucketArray_skel, 0},
      {"_get_a_bucketArray", &POA_ArrayTest::_get_a_bucketArray_skel, 0},
      {"_set_a_doubleArray", &POA_ArrayTest::_set_a_doubleArray_skel, 0},
      {"_get_a_doubleArray", &POA_ArrayTest::_get_a_doubleArray_skel, 0},
      {"_set_a_ushortArray", &POA_ArrayTest::_set_a_ushortArray_skel, 0},
      {"_get_a_ushortArray", &POA_ArrayTest::_get_a_ushortArray_skel, 0},
      {"_set_a_stringArray", &POA_ArrayTest::_set_a_stringArray_skel, 0},
      {"_get_a_accountArray", &POA_ArrayTest::_get_a_accountArray_skel, 0},
      {"_set_a_booleanArray", &POA_ArrayTest::_set_a_booleanArray_skel, 0},
      {"_get_a_booleanArray", &POA_ArrayTest::_get_a_booleanArray_skel, 0},
      {"_set_a_accountArray", &POA_ArrayTest::_set_a_accountArray_skel, 0},
      {"_get_a_longArrayArray", &POA_ArrayTest::_get_a_longArrayArray_skel, 0},
      {"_set_a_longArrayArray", &POA_ArrayTest::_set_a_longArrayArray_skel, 0},
      {"doubleArrayOp", &POA_ArrayTest::doubleArrayOp_skel, 0},
      {"_repository_id", &TAO_ServantBase::_repository_id_thru_poa_skel, 0},
      {"longArrayOp", &POA_ArrayTest::longArrayOp_skel, 0},
      {"shortArrayOp", &POA_ArrayTest::shortArrayOp_skel, 0},
      {"stringArrayOp", &POA_ArrayTest::stringArrayOp_skel, 0},
      {"charArrayOp", &POA_ArrayTest::charArrayOp_skel, 0},
      {"ushortArrayOp", &POA_ArrayTest::ushortArrayOp_skel, 0},
    };

  if (len <= MAX_WORD_LENGTH && len >= MIN_WORD_LENGTH)
    {
      unsigned int key = hash (str, len);

      if (key <= MAX_HASH_VALUE && key >= MIN_HASH_VALUE)
        {
            {
              const TAO_operation_db_entry  *resword; 

              switch (key)
                {
                case   5:
                  resword = &wordlist[5]; break;
                case  10:
                  resword = &wordlist[6]; break;
                case  11:
                  resword = &wordlist[7];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  resword = &wordlist[8];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  return 0;
                case  12:
                  resword = &wordlist[9]; break;
                case  13:
                  resword = &wordlist[10]; break;
                case  15:
                  resword = &wordlist[11]; break;
                case  16:
                  resword = &wordlist[12];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  resword = &wordlist[13];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  resword = &wordlist[14];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  resword = &wordlist[15];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  return 0;
                case  17:
                  resword = &wordlist[16];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  resword = &wordlist[17];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  resword = &wordlist[18];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  resword = &wordlist[19];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  resword = &wordlist[20];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  resword = &wordlist[21];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  resword = &wordlist[22];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  resword = &wordlist[23];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  return 0;
                case  18:
                  resword = &wordlist[24];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  resword = &wordlist[25];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  resword = &wordlist[26];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  resword = &wordlist[27];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  resword = &wordlist[28];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  resword = &wordlist[29];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  resword = &wordlist[30];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  resword = &wordlist[31];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  resword = &wordlist[32];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  resword = &wordlist[33];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  return 0;
                case  19:
                  resword = &wordlist[34];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  resword = &wordlist[35];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  resword = &wordlist[36];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  resword = &wordlist[37];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  return 0;
                case  21:
                  resword = &wordlist[38];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  resword = &wordlist[39];
                  if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1)) return resword;
                  return 0;
                case  23:
                  resword = &wordlist[40]; break;
                case  24:
                  resword = &wordlist[41]; break;
                case  26:
                  resword = &wordlist[42]; break;
                case  27:
                  resword = &wordlist[43]; break;
                case  28:
                  resword = &wordlist[44]; break;
                case  31:
                  resword = &wordlist[45]; break;
                case  33:
                  resword = &wordlist[46]; break;
                default: return 0;
                }
              if (*str == *resword->opname && !ACE_OS::strncmp (str + 1, resword->opname + 1, len - 1))
                return resword;
              return 0;
            }
        }
    }
  return 0;
}

static TAO_ArrayTest_Perfect_Hash_OpTable tao_ArrayTest_optable;

// TAO_IDL - Generated from
// be/be_visitor_interface/interface_ss.cpp:90

POA_ArrayTest::POA_ArrayTest (void)
  : TAO_ServantBase ()
{
  this->optable_ = &tao_ArrayTest_optable;
}

POA_ArrayTest::POA_ArrayTest (const POA_ArrayTest& rhs)
  : TAO_Abstract_ServantBase (rhs),
    TAO_ServantBase (rhs)
{
}

POA_ArrayTest::~POA_ArrayTest (void)
{
}


// TAO_IDL - Generated from
// be/be_visitor_operation/upcall_command_ss.cpp:80

class longArrayOp_ArrayTest
  : public TAO::Upcall_Command
{
public:
  inline longArrayOp_ArrayTest (
    POA_ArrayTest * servant,
    TAO_Operation_Details const * operation_details,
    TAO::Argument * const args[])
    : servant_ (servant)
      , operation_details_ (operation_details)
      , args_ (args)
  {
  }

  virtual void execute (void)
  {
    TAO::SArg_Traits< ::LongArray_tag>::ret_arg_type retval =
      TAO::Portable_Server::get_ret_arg< ::LongArray_tag> (
        this->operation_details_,
        this->args_);
    
    TAO::SArg_Traits< ::LongArray_tag>::in_arg_type arg_1 =
      TAO::Portable_Server::get_in_arg< ::LongArray_tag> (
        this->operation_details_,
        this->args_,
        1);
      
    TAO::SArg_Traits< ::LongArray_tag>::inout_arg_type arg_2 =
      TAO::Portable_Server::get_inout_arg< ::LongArray_tag> (
        this->operation_details_,
        this->args_,
        2);
      
    TAO::SArg_Traits< ::LongArray_tag>::out_arg_type arg_3 =
      TAO::Portable_Server::get_out_arg< ::LongArray_tag> (
        this->operation_details_,
        this->args_,
        3);
      
    retval =
      this->servant_->longArrayOp (
        arg_1
        , arg_2
        , arg_3);
  }

private:
  POA_ArrayTest * const servant_;
  TAO_Operation_Details const * const operation_details_;
  TAO::Argument * const * const args_;
};

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_ss.cpp:168

void POA_ArrayTest::longArrayOp_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::LongArray_tag>::ret_val retval;
  TAO::SArg_Traits< ::LongArray_tag>::in_arg_val _tao_p1;
  TAO::SArg_Traits< ::LongArray_tag>::inout_arg_val _tao_p2;
  TAO::SArg_Traits< ::LongArray_tag>::out_arg_val _tao_p3;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_p1,
      &_tao_p2,
      &_tao_p3
    };
  
  static size_t const nargs = 4;

  POA_ArrayTest * const impl =
    dynamic_cast<POA_ArrayTest *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  longArrayOp_ArrayTest command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}



// TAO_IDL - Generated from
// be/be_visitor_operation/upcall_command_ss.cpp:80

class stringArrayOp_ArrayTest
  : public TAO::Upcall_Command
{
public:
  inline stringArrayOp_ArrayTest (
    POA_ArrayTest * servant,
    TAO_Operation_Details const * operation_details,
    TAO::Argument * const args[])
    : servant_ (servant)
      , operation_details_ (operation_details)
      , args_ (args)
  {
  }

  virtual void execute (void)
  {
    TAO::SArg_Traits< ::StringArray_tag>::ret_arg_type retval =
      TAO::Portable_Server::get_ret_arg< ::StringArray_tag> (
        this->operation_details_,
        this->args_);
    
    TAO::SArg_Traits< ::StringArray_tag>::in_arg_type arg_1 =
      TAO::Portable_Server::get_in_arg< ::StringArray_tag> (
        this->operation_details_,
        this->args_,
        1);
      
    TAO::SArg_Traits< ::StringArray_tag>::inout_arg_type arg_2 =
      TAO::Portable_Server::get_inout_arg< ::StringArray_tag> (
        this->operation_details_,
        this->args_,
        2);
      
    TAO::SArg_Traits< ::StringArray_tag>::out_arg_type arg_3 =
      TAO::Portable_Server::get_out_arg< ::StringArray_tag> (
        this->operation_details_,
        this->args_,
        3);
      
    retval =
      this->servant_->stringArrayOp (
        arg_1
        , arg_2
        , arg_3);
  }

private:
  POA_ArrayTest * const servant_;
  TAO_Operation_Details const * const operation_details_;
  TAO::Argument * const * const args_;
};

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_ss.cpp:168

void POA_ArrayTest::stringArrayOp_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::StringArray_tag>::ret_val retval;
  TAO::SArg_Traits< ::StringArray_tag>::in_arg_val _tao_p1;
  TAO::SArg_Traits< ::StringArray_tag>::inout_arg_val _tao_p2;
  TAO::SArg_Traits< ::StringArray_tag>::out_arg_val _tao_p3;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_p1,
      &_tao_p2,
      &_tao_p3
    };
  
  static size_t const nargs = 4;

  POA_ArrayTest * const impl =
    dynamic_cast<POA_ArrayTest *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  stringArrayOp_ArrayTest command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}



// TAO_IDL - Generated from
// be/be_visitor_operation/upcall_command_ss.cpp:80

class shortArrayOp_ArrayTest
  : public TAO::Upcall_Command
{
public:
  inline shortArrayOp_ArrayTest (
    POA_ArrayTest * servant,
    TAO_Operation_Details const * operation_details,
    TAO::Argument * const args[])
    : servant_ (servant)
      , operation_details_ (operation_details)
      , args_ (args)
  {
  }

  virtual void execute (void)
  {
    TAO::SArg_Traits< ::ShortArray_tag>::ret_arg_type retval =
      TAO::Portable_Server::get_ret_arg< ::ShortArray_tag> (
        this->operation_details_,
        this->args_);
    
    TAO::SArg_Traits< ::ShortArray_tag>::in_arg_type arg_1 =
      TAO::Portable_Server::get_in_arg< ::ShortArray_tag> (
        this->operation_details_,
        this->args_,
        1);
      
    TAO::SArg_Traits< ::ShortArray_tag>::inout_arg_type arg_2 =
      TAO::Portable_Server::get_inout_arg< ::ShortArray_tag> (
        this->operation_details_,
        this->args_,
        2);
      
    TAO::SArg_Traits< ::ShortArray_tag>::out_arg_type arg_3 =
      TAO::Portable_Server::get_out_arg< ::ShortArray_tag> (
        this->operation_details_,
        this->args_,
        3);
      
    retval =
      this->servant_->shortArrayOp (
        arg_1
        , arg_2
        , arg_3);
  }

private:
  POA_ArrayTest * const servant_;
  TAO_Operation_Details const * const operation_details_;
  TAO::Argument * const * const args_;
};

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_ss.cpp:168

void POA_ArrayTest::shortArrayOp_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::ShortArray_tag>::ret_val retval;
  TAO::SArg_Traits< ::ShortArray_tag>::in_arg_val _tao_p1;
  TAO::SArg_Traits< ::ShortArray_tag>::inout_arg_val _tao_p2;
  TAO::SArg_Traits< ::ShortArray_tag>::out_arg_val _tao_p3;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_p1,
      &_tao_p2,
      &_tao_p3
    };
  
  static size_t const nargs = 4;

  POA_ArrayTest * const impl =
    dynamic_cast<POA_ArrayTest *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  shortArrayOp_ArrayTest command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}



// TAO_IDL - Generated from
// be/be_visitor_operation/upcall_command_ss.cpp:80

class ushortArrayOp_ArrayTest
  : public TAO::Upcall_Command
{
public:
  inline ushortArrayOp_ArrayTest (
    POA_ArrayTest * servant,
    TAO_Operation_Details const * operation_details,
    TAO::Argument * const args[])
    : servant_ (servant)
      , operation_details_ (operation_details)
      , args_ (args)
  {
  }

  virtual void execute (void)
  {
    TAO::SArg_Traits< ::UShortArray_tag>::ret_arg_type retval =
      TAO::Portable_Server::get_ret_arg< ::UShortArray_tag> (
        this->operation_details_,
        this->args_);
    
    TAO::SArg_Traits< ::UShortArray_tag>::in_arg_type arg_1 =
      TAO::Portable_Server::get_in_arg< ::UShortArray_tag> (
        this->operation_details_,
        this->args_,
        1);
      
    TAO::SArg_Traits< ::UShortArray_tag>::inout_arg_type arg_2 =
      TAO::Portable_Server::get_inout_arg< ::UShortArray_tag> (
        this->operation_details_,
        this->args_,
        2);
      
    TAO::SArg_Traits< ::UShortArray_tag>::out_arg_type arg_3 =
      TAO::Portable_Server::get_out_arg< ::UShortArray_tag> (
        this->operation_details_,
        this->args_,
        3);
      
    retval =
      this->servant_->ushortArrayOp (
        arg_1
        , arg_2
        , arg_3);
  }

private:
  POA_ArrayTest * const servant_;
  TAO_Operation_Details const * const operation_details_;
  TAO::Argument * const * const args_;
};

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_ss.cpp:168

void POA_ArrayTest::ushortArrayOp_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::UShortArray_tag>::ret_val retval;
  TAO::SArg_Traits< ::UShortArray_tag>::in_arg_val _tao_p1;
  TAO::SArg_Traits< ::UShortArray_tag>::inout_arg_val _tao_p2;
  TAO::SArg_Traits< ::UShortArray_tag>::out_arg_val _tao_p3;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_p1,
      &_tao_p2,
      &_tao_p3
    };
  
  static size_t const nargs = 4;

  POA_ArrayTest * const impl =
    dynamic_cast<POA_ArrayTest *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  ushortArrayOp_ArrayTest command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}



// TAO_IDL - Generated from
// be/be_visitor_operation/upcall_command_ss.cpp:80

class charArrayOp_ArrayTest
  : public TAO::Upcall_Command
{
public:
  inline charArrayOp_ArrayTest (
    POA_ArrayTest * servant,
    TAO_Operation_Details const * operation_details,
    TAO::Argument * const args[])
    : servant_ (servant)
      , operation_details_ (operation_details)
      , args_ (args)
  {
  }

  virtual void execute (void)
  {
    TAO::SArg_Traits< ::tmp1CharArray_tag>::ret_arg_type retval =
      TAO::Portable_Server::get_ret_arg< ::tmp1CharArray_tag> (
        this->operation_details_,
        this->args_);
    
    TAO::SArg_Traits< ::tmp1CharArray_tag>::in_arg_type arg_1 =
      TAO::Portable_Server::get_in_arg< ::tmp1CharArray_tag> (
        this->operation_details_,
        this->args_,
        1);
      
    TAO::SArg_Traits< ::tmp1CharArray_tag>::inout_arg_type arg_2 =
      TAO::Portable_Server::get_inout_arg< ::tmp1CharArray_tag> (
        this->operation_details_,
        this->args_,
        2);
      
    TAO::SArg_Traits< ::tmp1CharArray_tag>::out_arg_type arg_3 =
      TAO::Portable_Server::get_out_arg< ::tmp1CharArray_tag> (
        this->operation_details_,
        this->args_,
        3);
      
    retval =
      this->servant_->charArrayOp (
        arg_1
        , arg_2
        , arg_3);
  }

private:
  POA_ArrayTest * const servant_;
  TAO_Operation_Details const * const operation_details_;
  TAO::Argument * const * const args_;
};

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_ss.cpp:168

void POA_ArrayTest::charArrayOp_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::tmp1CharArray_tag>::ret_val retval;
  TAO::SArg_Traits< ::tmp1CharArray_tag>::in_arg_val _tao_p1;
  TAO::SArg_Traits< ::tmp1CharArray_tag>::inout_arg_val _tao_p2;
  TAO::SArg_Traits< ::tmp1CharArray_tag>::out_arg_val _tao_p3;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_p1,
      &_tao_p2,
      &_tao_p3
    };
  
  static size_t const nargs = 4;

  POA_ArrayTest * const impl =
    dynamic_cast<POA_ArrayTest *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  charArrayOp_ArrayTest command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}



// TAO_IDL - Generated from
// be/be_visitor_operation/upcall_command_ss.cpp:80

class octetArrayOp_ArrayTest
  : public TAO::Upcall_Command
{
public:
  inline octetArrayOp_ArrayTest (
    POA_ArrayTest * servant,
    TAO_Operation_Details const * operation_details,
    TAO::Argument * const args[])
    : servant_ (servant)
      , operation_details_ (operation_details)
      , args_ (args)
  {
  }

  virtual void execute (void)
  {
    TAO::SArg_Traits< ::OctetArray_tag>::ret_arg_type retval =
      TAO::Portable_Server::get_ret_arg< ::OctetArray_tag> (
        this->operation_details_,
        this->args_);
    
    TAO::SArg_Traits< ::OctetArray_tag>::in_arg_type arg_1 =
      TAO::Portable_Server::get_in_arg< ::OctetArray_tag> (
        this->operation_details_,
        this->args_,
        1);
      
    TAO::SArg_Traits< ::OctetArray_tag>::inout_arg_type arg_2 =
      TAO::Portable_Server::get_inout_arg< ::OctetArray_tag> (
        this->operation_details_,
        this->args_,
        2);
      
    TAO::SArg_Traits< ::OctetArray_tag>::out_arg_type arg_3 =
      TAO::Portable_Server::get_out_arg< ::OctetArray_tag> (
        this->operation_details_,
        this->args_,
        3);
      
    retval =
      this->servant_->octetArrayOp (
        arg_1
        , arg_2
        , arg_3);
  }

private:
  POA_ArrayTest * const servant_;
  TAO_Operation_Details const * const operation_details_;
  TAO::Argument * const * const args_;
};

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_ss.cpp:168

void POA_ArrayTest::octetArrayOp_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::OctetArray_tag>::ret_val retval;
  TAO::SArg_Traits< ::OctetArray_tag>::in_arg_val _tao_p1;
  TAO::SArg_Traits< ::OctetArray_tag>::inout_arg_val _tao_p2;
  TAO::SArg_Traits< ::OctetArray_tag>::out_arg_val _tao_p3;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_p1,
      &_tao_p2,
      &_tao_p3
    };
  
  static size_t const nargs = 4;

  POA_ArrayTest * const impl =
    dynamic_cast<POA_ArrayTest *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  octetArrayOp_ArrayTest command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}



// TAO_IDL - Generated from
// be/be_visitor_operation/upcall_command_ss.cpp:80

class doubleArrayOp_ArrayTest
  : public TAO::Upcall_Command
{
public:
  inline doubleArrayOp_ArrayTest (
    POA_ArrayTest * servant,
    TAO_Operation_Details const * operation_details,
    TAO::Argument * const args[])
    : servant_ (servant)
      , operation_details_ (operation_details)
      , args_ (args)
  {
  }

  virtual void execute (void)
  {
    TAO::SArg_Traits< ::DoubleArray_tag>::ret_arg_type retval =
      TAO::Portable_Server::get_ret_arg< ::DoubleArray_tag> (
        this->operation_details_,
        this->args_);
    
    TAO::SArg_Traits< ::DoubleArray_tag>::in_arg_type arg_1 =
      TAO::Portable_Server::get_in_arg< ::DoubleArray_tag> (
        this->operation_details_,
        this->args_,
        1);
      
    TAO::SArg_Traits< ::DoubleArray_tag>::inout_arg_type arg_2 =
      TAO::Portable_Server::get_inout_arg< ::DoubleArray_tag> (
        this->operation_details_,
        this->args_,
        2);
      
    TAO::SArg_Traits< ::DoubleArray_tag>::out_arg_type arg_3 =
      TAO::Portable_Server::get_out_arg< ::DoubleArray_tag> (
        this->operation_details_,
        this->args_,
        3);
      
    retval =
      this->servant_->doubleArrayOp (
        arg_1
        , arg_2
        , arg_3);
  }

private:
  POA_ArrayTest * const servant_;
  TAO_Operation_Details const * const operation_details_;
  TAO::Argument * const * const args_;
};

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_ss.cpp:168

void POA_ArrayTest::doubleArrayOp_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::DoubleArray_tag>::ret_val retval;
  TAO::SArg_Traits< ::DoubleArray_tag>::in_arg_val _tao_p1;
  TAO::SArg_Traits< ::DoubleArray_tag>::inout_arg_val _tao_p2;
  TAO::SArg_Traits< ::DoubleArray_tag>::out_arg_val _tao_p3;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_p1,
      &_tao_p2,
      &_tao_p3
    };
  
  static size_t const nargs = 4;

  POA_ArrayTest * const impl =
    dynamic_cast<POA_ArrayTest *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  doubleArrayOp_ArrayTest command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}



// TAO_IDL - Generated from
// be/be_visitor_operation/upcall_command_ss.cpp:80

class _get_a_longArray_ArrayTest
  : public TAO::Upcall_Command
{
public:
  inline _get_a_longArray_ArrayTest (
    POA_ArrayTest * servant,
    TAO_Operation_Details const * operation_details,
    TAO::Argument * const args[])
    : servant_ (servant)
      , operation_details_ (operation_details)
      , args_ (args)
  {
  }

  virtual void execute (void)
  {
    TAO::SArg_Traits< ::LongArray_tag>::ret_arg_type retval =
      TAO::Portable_Server::get_ret_arg< ::LongArray_tag> (
        this->operation_details_,
        this->args_);
    
    retval =
      this->servant_->a_longArray ();
  }

private:
  POA_ArrayTest * const servant_;
  TAO_Operation_Details const * const operation_details_;
  TAO::Argument * const * const args_;
};

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_ss.cpp:168

void POA_ArrayTest::_get_a_longArray_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::LongArray_tag>::ret_val retval;

  TAO::Argument * const args[] =
    {
      &retval
    };
  
  static size_t const nargs = 1;

  POA_ArrayTest * const impl =
    dynamic_cast<POA_ArrayTest *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  _get_a_longArray_ArrayTest command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}



// TAO_IDL - Generated from
// be/be_visitor_operation/upcall_command_ss.cpp:80

class _set_a_longArray_ArrayTest
  : public TAO::Upcall_Command
{
public:
  inline _set_a_longArray_ArrayTest (
    POA_ArrayTest * servant,
    TAO_Operation_Details const * operation_details,
    TAO::Argument * const args[])
    : servant_ (servant)
      , operation_details_ (operation_details)
      , args_ (args)
  {
  }

  virtual void execute (void)
  {
    TAO::SArg_Traits< ::LongArray_tag>::in_arg_type arg_1 =
      TAO::Portable_Server::get_in_arg< ::LongArray_tag> (
        this->operation_details_,
        this->args_,
        1);
      
    this->servant_->a_longArray (
      arg_1);
  }

private:
  POA_ArrayTest * const servant_;
  TAO_Operation_Details const * const operation_details_;
  TAO::Argument * const * const args_;
};

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_ss.cpp:168

void POA_ArrayTest::_set_a_longArray_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< void>::ret_val retval;
  TAO::SArg_Traits< ::LongArray_tag>::in_arg_val _tao_a_longArray;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_a_longArray
    };
  
  static size_t const nargs = 2;

  POA_ArrayTest * const impl =
    dynamic_cast<POA_ArrayTest *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  _set_a_longArray_ArrayTest command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}



// TAO_IDL - Generated from
// be/be_visitor_operation/upcall_command_ss.cpp:80

class _get_a_ulongArray_ArrayTest
  : public TAO::Upcall_Command
{
public:
  inline _get_a_ulongArray_ArrayTest (
    POA_ArrayTest * servant,
    TAO_Operation_Details const * operation_details,
    TAO::Argument * const args[])
    : servant_ (servant)
      , operation_details_ (operation_details)
      , args_ (args)
  {
  }

  virtual void execute (void)
  {
    TAO::SArg_Traits< ::ULongArray_tag>::ret_arg_type retval =
      TAO::Portable_Server::get_ret_arg< ::ULongArray_tag> (
        this->operation_details_,
        this->args_);
    
    retval =
      this->servant_->a_ulongArray ();
  }

private:
  POA_ArrayTest * const servant_;
  TAO_Operation_Details const * const operation_details_;
  TAO::Argument * const * const args_;
};

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_ss.cpp:168

void POA_ArrayTest::_get_a_ulongArray_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::ULongArray_tag>::ret_val retval;

  TAO::Argument * const args[] =
    {
      &retval
    };
  
  static size_t const nargs = 1;

  POA_ArrayTest * const impl =
    dynamic_cast<POA_ArrayTest *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  _get_a_ulongArray_ArrayTest command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}



// TAO_IDL - Generated from
// be/be_visitor_operation/upcall_command_ss.cpp:80

class _set_a_ulongArray_ArrayTest
  : public TAO::Upcall_Command
{
public:
  inline _set_a_ulongArray_ArrayTest (
    POA_ArrayTest * servant,
    TAO_Operation_Details const * operation_details,
    TAO::Argument * const args[])
    : servant_ (servant)
      , operation_details_ (operation_details)
      , args_ (args)
  {
  }

  virtual void execute (void)
  {
    TAO::SArg_Traits< ::ULongArray_tag>::in_arg_type arg_1 =
      TAO::Portable_Server::get_in_arg< ::ULongArray_tag> (
        this->operation_details_,
        this->args_,
        1);
      
    this->servant_->a_ulongArray (
      arg_1);
  }

private:
  POA_ArrayTest * const servant_;
  TAO_Operation_Details const * const operation_details_;
  TAO::Argument * const * const args_;
};

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_ss.cpp:168

void POA_ArrayTest::_set_a_ulongArray_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< void>::ret_val retval;
  TAO::SArg_Traits< ::ULongArray_tag>::in_arg_val _tao_a_ulongArray;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_a_ulongArray
    };
  
  static size_t const nargs = 2;

  POA_ArrayTest * const impl =
    dynamic_cast<POA_ArrayTest *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  _set_a_ulongArray_ArrayTest command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}



// TAO_IDL - Generated from
// be/be_visitor_operation/upcall_command_ss.cpp:80

class _get_a_stringArray_ArrayTest
  : public TAO::Upcall_Command
{
public:
  inline _get_a_stringArray_ArrayTest (
    POA_ArrayTest * servant,
    TAO_Operation_Details const * operation_details,
    TAO::Argument * const args[])
    : servant_ (servant)
      , operation_details_ (operation_details)
      , args_ (args)
  {
  }

  virtual void execute (void)
  {
    TAO::SArg_Traits< ::StringArray_tag>::ret_arg_type retval =
      TAO::Portable_Server::get_ret_arg< ::StringArray_tag> (
        this->operation_details_,
        this->args_);
    
    retval =
      this->servant_->a_stringArray ();
  }

private:
  POA_ArrayTest * const servant_;
  TAO_Operation_Details const * const operation_details_;
  TAO::Argument * const * const args_;
};

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_ss.cpp:168

void POA_ArrayTest::_get_a_stringArray_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::StringArray_tag>::ret_val retval;

  TAO::Argument * const args[] =
    {
      &retval
    };
  
  static size_t const nargs = 1;

  POA_ArrayTest * const impl =
    dynamic_cast<POA_ArrayTest *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  _get_a_stringArray_ArrayTest command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}



// TAO_IDL - Generated from
// be/be_visitor_operation/upcall_command_ss.cpp:80

class _set_a_stringArray_ArrayTest
  : public TAO::Upcall_Command
{
public:
  inline _set_a_stringArray_ArrayTest (
    POA_ArrayTest * servant,
    TAO_Operation_Details const * operation_details,
    TAO::Argument * const args[])
    : servant_ (servant)
      , operation_details_ (operation_details)
      , args_ (args)
  {
  }

  virtual void execute (void)
  {
    TAO::SArg_Traits< ::StringArray_tag>::in_arg_type arg_1 =
      TAO::Portable_Server::get_in_arg< ::StringArray_tag> (
        this->operation_details_,
        this->args_,
        1);
      
    this->servant_->a_stringArray (
      arg_1);
  }

private:
  POA_ArrayTest * const servant_;
  TAO_Operation_Details const * const operation_details_;
  TAO::Argument * const * const args_;
};

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_ss.cpp:168

void POA_ArrayTest::_set_a_stringArray_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< void>::ret_val retval;
  TAO::SArg_Traits< ::StringArray_tag>::in_arg_val _tao_a_stringArray;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_a_stringArray
    };
  
  static size_t const nargs = 2;

  POA_ArrayTest * const impl =
    dynamic_cast<POA_ArrayTest *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  _set_a_stringArray_ArrayTest command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}



// TAO_IDL - Generated from
// be/be_visitor_operation/upcall_command_ss.cpp:80

class _get_a_shortArray_ArrayTest
  : public TAO::Upcall_Command
{
public:
  inline _get_a_shortArray_ArrayTest (
    POA_ArrayTest * servant,
    TAO_Operation_Details const * operation_details,
    TAO::Argument * const args[])
    : servant_ (servant)
      , operation_details_ (operation_details)
      , args_ (args)
  {
  }

  virtual void execute (void)
  {
    TAO::SArg_Traits< ::ShortArray_tag>::ret_arg_type retval =
      TAO::Portable_Server::get_ret_arg< ::ShortArray_tag> (
        this->operation_details_,
        this->args_);
    
    retval =
      this->servant_->a_shortArray ();
  }

private:
  POA_ArrayTest * const servant_;
  TAO_Operation_Details const * const operation_details_;
  TAO::Argument * const * const args_;
};

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_ss.cpp:168

void POA_ArrayTest::_get_a_shortArray_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::ShortArray_tag>::ret_val retval;

  TAO::Argument * const args[] =
    {
      &retval
    };
  
  static size_t const nargs = 1;

  POA_ArrayTest * const impl =
    dynamic_cast<POA_ArrayTest *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  _get_a_shortArray_ArrayTest command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}



// TAO_IDL - Generated from
// be/be_visitor_operation/upcall_command_ss.cpp:80

class _set_a_shortArray_ArrayTest
  : public TAO::Upcall_Command
{
public:
  inline _set_a_shortArray_ArrayTest (
    POA_ArrayTest * servant,
    TAO_Operation_Details const * operation_details,
    TAO::Argument * const args[])
    : servant_ (servant)
      , operation_details_ (operation_details)
      , args_ (args)
  {
  }

  virtual void execute (void)
  {
    TAO::SArg_Traits< ::ShortArray_tag>::in_arg_type arg_1 =
      TAO::Portable_Server::get_in_arg< ::ShortArray_tag> (
        this->operation_details_,
        this->args_,
        1);
      
    this->servant_->a_shortArray (
      arg_1);
  }

private:
  POA_ArrayTest * const servant_;
  TAO_Operation_Details const * const operation_details_;
  TAO::Argument * const * const args_;
};

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_ss.cpp:168

void POA_ArrayTest::_set_a_shortArray_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< void>::ret_val retval;
  TAO::SArg_Traits< ::ShortArray_tag>::in_arg_val _tao_a_shortArray;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_a_shortArray
    };
  
  static size_t const nargs = 2;

  POA_ArrayTest * const impl =
    dynamic_cast<POA_ArrayTest *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  _set_a_shortArray_ArrayTest command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}



// TAO_IDL - Generated from
// be/be_visitor_operation/upcall_command_ss.cpp:80

class _get_a_ushortArray_ArrayTest
  : public TAO::Upcall_Command
{
public:
  inline _get_a_ushortArray_ArrayTest (
    POA_ArrayTest * servant,
    TAO_Operation_Details const * operation_details,
    TAO::Argument * const args[])
    : servant_ (servant)
      , operation_details_ (operation_details)
      , args_ (args)
  {
  }

  virtual void execute (void)
  {
    TAO::SArg_Traits< ::UShortArray_tag>::ret_arg_type retval =
      TAO::Portable_Server::get_ret_arg< ::UShortArray_tag> (
        this->operation_details_,
        this->args_);
    
    retval =
      this->servant_->a_ushortArray ();
  }

private:
  POA_ArrayTest * const servant_;
  TAO_Operation_Details const * const operation_details_;
  TAO::Argument * const * const args_;
};

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_ss.cpp:168

void POA_ArrayTest::_get_a_ushortArray_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::UShortArray_tag>::ret_val retval;

  TAO::Argument * const args[] =
    {
      &retval
    };
  
  static size_t const nargs = 1;

  POA_ArrayTest * const impl =
    dynamic_cast<POA_ArrayTest *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  _get_a_ushortArray_ArrayTest command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}



// TAO_IDL - Generated from
// be/be_visitor_operation/upcall_command_ss.cpp:80

class _set_a_ushortArray_ArrayTest
  : public TAO::Upcall_Command
{
public:
  inline _set_a_ushortArray_ArrayTest (
    POA_ArrayTest * servant,
    TAO_Operation_Details const * operation_details,
    TAO::Argument * const args[])
    : servant_ (servant)
      , operation_details_ (operation_details)
      , args_ (args)
  {
  }

  virtual void execute (void)
  {
    TAO::SArg_Traits< ::UShortArray_tag>::in_arg_type arg_1 =
      TAO::Portable_Server::get_in_arg< ::UShortArray_tag> (
        this->operation_details_,
        this->args_,
        1);
      
    this->servant_->a_ushortArray (
      arg_1);
  }

private:
  POA_ArrayTest * const servant_;
  TAO_Operation_Details const * const operation_details_;
  TAO::Argument * const * const args_;
};

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_ss.cpp:168

void POA_ArrayTest::_set_a_ushortArray_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< void>::ret_val retval;
  TAO::SArg_Traits< ::UShortArray_tag>::in_arg_val _tao_a_ushortArray;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_a_ushortArray
    };
  
  static size_t const nargs = 2;

  POA_ArrayTest * const impl =
    dynamic_cast<POA_ArrayTest *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  _set_a_ushortArray_ArrayTest command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}



// TAO_IDL - Generated from
// be/be_visitor_operation/upcall_command_ss.cpp:80

class _get_a_char_ArrayTest
  : public TAO::Upcall_Command
{
public:
  inline _get_a_char_ArrayTest (
    POA_ArrayTest * servant,
    TAO_Operation_Details const * operation_details,
    TAO::Argument * const args[])
    : servant_ (servant)
      , operation_details_ (operation_details)
      , args_ (args)
  {
  }

  virtual void execute (void)
  {
    TAO::SArg_Traits< ::ACE_InputCDR::to_char>::ret_arg_type retval =
      TAO::Portable_Server::get_ret_arg< ::ACE_InputCDR::to_char> (
        this->operation_details_,
        this->args_);
    
    retval =
      this->servant_->a_char ();
  }

private:
  POA_ArrayTest * const servant_;
  TAO_Operation_Details const * const operation_details_;
  TAO::Argument * const * const args_;
};

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_ss.cpp:168

void POA_ArrayTest::_get_a_char_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::ACE_InputCDR::to_char>::ret_val retval;

  TAO::Argument * const args[] =
    {
      &retval
    };
  
  static size_t const nargs = 1;

  POA_ArrayTest * const impl =
    dynamic_cast<POA_ArrayTest *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  _get_a_char_ArrayTest command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}



// TAO_IDL - Generated from
// be/be_visitor_operation/upcall_command_ss.cpp:80

class _set_a_char_ArrayTest
  : public TAO::Upcall_Command
{
public:
  inline _set_a_char_ArrayTest (
    POA_ArrayTest * servant,
    TAO_Operation_Details const * operation_details,
    TAO::Argument * const args[])
    : servant_ (servant)
      , operation_details_ (operation_details)
      , args_ (args)
  {
  }

  virtual void execute (void)
  {
    TAO::SArg_Traits< ::ACE_InputCDR::to_char>::in_arg_type arg_1 =
      TAO::Portable_Server::get_in_arg< ::ACE_InputCDR::to_char> (
        this->operation_details_,
        this->args_,
        1);
      
    this->servant_->a_char (
      arg_1);
  }

private:
  POA_ArrayTest * const servant_;
  TAO_Operation_Details const * const operation_details_;
  TAO::Argument * const * const args_;
};

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_ss.cpp:168

void POA_ArrayTest::_set_a_char_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< void>::ret_val retval;
  TAO::SArg_Traits< ::ACE_InputCDR::to_char>::in_arg_val _tao_a_char;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_a_char
    };
  
  static size_t const nargs = 2;

  POA_ArrayTest * const impl =
    dynamic_cast<POA_ArrayTest *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  _set_a_char_ArrayTest command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}



// TAO_IDL - Generated from
// be/be_visitor_operation/upcall_command_ss.cpp:80

class _get_a_charArray_ArrayTest
  : public TAO::Upcall_Command
{
public:
  inline _get_a_charArray_ArrayTest (
    POA_ArrayTest * servant,
    TAO_Operation_Details const * operation_details,
    TAO::Argument * const args[])
    : servant_ (servant)
      , operation_details_ (operation_details)
      , args_ (args)
  {
  }

  virtual void execute (void)
  {
    TAO::SArg_Traits< ::tmp1CharArray_tag>::ret_arg_type retval =
      TAO::Portable_Server::get_ret_arg< ::tmp1CharArray_tag> (
        this->operation_details_,
        this->args_);
    
    retval =
      this->servant_->a_charArray ();
  }

private:
  POA_ArrayTest * const servant_;
  TAO_Operation_Details const * const operation_details_;
  TAO::Argument * const * const args_;
};

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_ss.cpp:168

void POA_ArrayTest::_get_a_charArray_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::tmp1CharArray_tag>::ret_val retval;

  TAO::Argument * const args[] =
    {
      &retval
    };
  
  static size_t const nargs = 1;

  POA_ArrayTest * const impl =
    dynamic_cast<POA_ArrayTest *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  _get_a_charArray_ArrayTest command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}



// TAO_IDL - Generated from
// be/be_visitor_operation/upcall_command_ss.cpp:80

class _set_a_charArray_ArrayTest
  : public TAO::Upcall_Command
{
public:
  inline _set_a_charArray_ArrayTest (
    POA_ArrayTest * servant,
    TAO_Operation_Details const * operation_details,
    TAO::Argument * const args[])
    : servant_ (servant)
      , operation_details_ (operation_details)
      , args_ (args)
  {
  }

  virtual void execute (void)
  {
    TAO::SArg_Traits< ::tmp1CharArray_tag>::in_arg_type arg_1 =
      TAO::Portable_Server::get_in_arg< ::tmp1CharArray_tag> (
        this->operation_details_,
        this->args_,
        1);
      
    this->servant_->a_charArray (
      arg_1);
  }

private:
  POA_ArrayTest * const servant_;
  TAO_Operation_Details const * const operation_details_;
  TAO::Argument * const * const args_;
};

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_ss.cpp:168

void POA_ArrayTest::_set_a_charArray_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< void>::ret_val retval;
  TAO::SArg_Traits< ::tmp1CharArray_tag>::in_arg_val _tao_a_charArray;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_a_charArray
    };
  
  static size_t const nargs = 2;

  POA_ArrayTest * const impl =
    dynamic_cast<POA_ArrayTest *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  _set_a_charArray_ArrayTest command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}



// TAO_IDL - Generated from
// be/be_visitor_operation/upcall_command_ss.cpp:80

class _get_a_octetArray_ArrayTest
  : public TAO::Upcall_Command
{
public:
  inline _get_a_octetArray_ArrayTest (
    POA_ArrayTest * servant,
    TAO_Operation_Details const * operation_details,
    TAO::Argument * const args[])
    : servant_ (servant)
      , operation_details_ (operation_details)
      , args_ (args)
  {
  }

  virtual void execute (void)
  {
    TAO::SArg_Traits< ::OctetArray_tag>::ret_arg_type retval =
      TAO::Portable_Server::get_ret_arg< ::OctetArray_tag> (
        this->operation_details_,
        this->args_);
    
    retval =
      this->servant_->a_octetArray ();
  }

private:
  POA_ArrayTest * const servant_;
  TAO_Operation_Details const * const operation_details_;
  TAO::Argument * const * const args_;
};

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_ss.cpp:168

void POA_ArrayTest::_get_a_octetArray_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::OctetArray_tag>::ret_val retval;

  TAO::Argument * const args[] =
    {
      &retval
    };
  
  static size_t const nargs = 1;

  POA_ArrayTest * const impl =
    dynamic_cast<POA_ArrayTest *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  _get_a_octetArray_ArrayTest command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}



// TAO_IDL - Generated from
// be/be_visitor_operation/upcall_command_ss.cpp:80

class _set_a_octetArray_ArrayTest
  : public TAO::Upcall_Command
{
public:
  inline _set_a_octetArray_ArrayTest (
    POA_ArrayTest * servant,
    TAO_Operation_Details const * operation_details,
    TAO::Argument * const args[])
    : servant_ (servant)
      , operation_details_ (operation_details)
      , args_ (args)
  {
  }

  virtual void execute (void)
  {
    TAO::SArg_Traits< ::OctetArray_tag>::in_arg_type arg_1 =
      TAO::Portable_Server::get_in_arg< ::OctetArray_tag> (
        this->operation_details_,
        this->args_,
        1);
      
    this->servant_->a_octetArray (
      arg_1);
  }

private:
  POA_ArrayTest * const servant_;
  TAO_Operation_Details const * const operation_details_;
  TAO::Argument * const * const args_;
};

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_ss.cpp:168

void POA_ArrayTest::_set_a_octetArray_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< void>::ret_val retval;
  TAO::SArg_Traits< ::OctetArray_tag>::in_arg_val _tao_a_octetArray;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_a_octetArray
    };
  
  static size_t const nargs = 2;

  POA_ArrayTest * const impl =
    dynamic_cast<POA_ArrayTest *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  _set_a_octetArray_ArrayTest command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}



// TAO_IDL - Generated from
// be/be_visitor_operation/upcall_command_ss.cpp:80

class _get_a_doubleArray_ArrayTest
  : public TAO::Upcall_Command
{
public:
  inline _get_a_doubleArray_ArrayTest (
    POA_ArrayTest * servant,
    TAO_Operation_Details const * operation_details,
    TAO::Argument * const args[])
    : servant_ (servant)
      , operation_details_ (operation_details)
      , args_ (args)
  {
  }

  virtual void execute (void)
  {
    TAO::SArg_Traits< ::DoubleArray_tag>::ret_arg_type retval =
      TAO::Portable_Server::get_ret_arg< ::DoubleArray_tag> (
        this->operation_details_,
        this->args_);
    
    retval =
      this->servant_->a_doubleArray ();
  }

private:
  POA_ArrayTest * const servant_;
  TAO_Operation_Details const * const operation_details_;
  TAO::Argument * const * const args_;
};

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_ss.cpp:168

void POA_ArrayTest::_get_a_doubleArray_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::DoubleArray_tag>::ret_val retval;

  TAO::Argument * const args[] =
    {
      &retval
    };
  
  static size_t const nargs = 1;

  POA_ArrayTest * const impl =
    dynamic_cast<POA_ArrayTest *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  _get_a_doubleArray_ArrayTest command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}



// TAO_IDL - Generated from
// be/be_visitor_operation/upcall_command_ss.cpp:80

class _set_a_doubleArray_ArrayTest
  : public TAO::Upcall_Command
{
public:
  inline _set_a_doubleArray_ArrayTest (
    POA_ArrayTest * servant,
    TAO_Operation_Details const * operation_details,
    TAO::Argument * const args[])
    : servant_ (servant)
      , operation_details_ (operation_details)
      , args_ (args)
  {
  }

  virtual void execute (void)
  {
    TAO::SArg_Traits< ::DoubleArray_tag>::in_arg_type arg_1 =
      TAO::Portable_Server::get_in_arg< ::DoubleArray_tag> (
        this->operation_details_,
        this->args_,
        1);
      
    this->servant_->a_doubleArray (
      arg_1);
  }

private:
  POA_ArrayTest * const servant_;
  TAO_Operation_Details const * const operation_details_;
  TAO::Argument * const * const args_;
};

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_ss.cpp:168

void POA_ArrayTest::_set_a_doubleArray_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< void>::ret_val retval;
  TAO::SArg_Traits< ::DoubleArray_tag>::in_arg_val _tao_a_doubleArray;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_a_doubleArray
    };
  
  static size_t const nargs = 2;

  POA_ArrayTest * const impl =
    dynamic_cast<POA_ArrayTest *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  _set_a_doubleArray_ArrayTest command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}



// TAO_IDL - Generated from
// be/be_visitor_operation/upcall_command_ss.cpp:80

class _get_a_floatArray_ArrayTest
  : public TAO::Upcall_Command
{
public:
  inline _get_a_floatArray_ArrayTest (
    POA_ArrayTest * servant,
    TAO_Operation_Details const * operation_details,
    TAO::Argument * const args[])
    : servant_ (servant)
      , operation_details_ (operation_details)
      , args_ (args)
  {
  }

  virtual void execute (void)
  {
    TAO::SArg_Traits< ::FloatArray_tag>::ret_arg_type retval =
      TAO::Portable_Server::get_ret_arg< ::FloatArray_tag> (
        this->operation_details_,
        this->args_);
    
    retval =
      this->servant_->a_floatArray ();
  }

private:
  POA_ArrayTest * const servant_;
  TAO_Operation_Details const * const operation_details_;
  TAO::Argument * const * const args_;
};

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_ss.cpp:168

void POA_ArrayTest::_get_a_floatArray_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::FloatArray_tag>::ret_val retval;

  TAO::Argument * const args[] =
    {
      &retval
    };
  
  static size_t const nargs = 1;

  POA_ArrayTest * const impl =
    dynamic_cast<POA_ArrayTest *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  _get_a_floatArray_ArrayTest command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}



// TAO_IDL - Generated from
// be/be_visitor_operation/upcall_command_ss.cpp:80

class _set_a_floatArray_ArrayTest
  : public TAO::Upcall_Command
{
public:
  inline _set_a_floatArray_ArrayTest (
    POA_ArrayTest * servant,
    TAO_Operation_Details const * operation_details,
    TAO::Argument * const args[])
    : servant_ (servant)
      , operation_details_ (operation_details)
      , args_ (args)
  {
  }

  virtual void execute (void)
  {
    TAO::SArg_Traits< ::FloatArray_tag>::in_arg_type arg_1 =
      TAO::Portable_Server::get_in_arg< ::FloatArray_tag> (
        this->operation_details_,
        this->args_,
        1);
      
    this->servant_->a_floatArray (
      arg_1);
  }

private:
  POA_ArrayTest * const servant_;
  TAO_Operation_Details const * const operation_details_;
  TAO::Argument * const * const args_;
};

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_ss.cpp:168

void POA_ArrayTest::_set_a_floatArray_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< void>::ret_val retval;
  TAO::SArg_Traits< ::FloatArray_tag>::in_arg_val _tao_a_floatArray;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_a_floatArray
    };
  
  static size_t const nargs = 2;

  POA_ArrayTest * const impl =
    dynamic_cast<POA_ArrayTest *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  _set_a_floatArray_ArrayTest command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}



// TAO_IDL - Generated from
// be/be_visitor_operation/upcall_command_ss.cpp:80

class _get_a_bucketArray_ArrayTest
  : public TAO::Upcall_Command
{
public:
  inline _get_a_bucketArray_ArrayTest (
    POA_ArrayTest * servant,
    TAO_Operation_Details const * operation_details,
    TAO::Argument * const args[])
    : servant_ (servant)
      , operation_details_ (operation_details)
      , args_ (args)
  {
  }

  virtual void execute (void)
  {
    TAO::SArg_Traits< ::BucketArray_tag>::ret_arg_type retval =
      TAO::Portable_Server::get_ret_arg< ::BucketArray_tag> (
        this->operation_details_,
        this->args_);
    
    retval =
      this->servant_->a_bucketArray ();
  }

private:
  POA_ArrayTest * const servant_;
  TAO_Operation_Details const * const operation_details_;
  TAO::Argument * const * const args_;
};

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_ss.cpp:168

void POA_ArrayTest::_get_a_bucketArray_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::BucketArray_tag>::ret_val retval;

  TAO::Argument * const args[] =
    {
      &retval
    };
  
  static size_t const nargs = 1;

  POA_ArrayTest * const impl =
    dynamic_cast<POA_ArrayTest *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  _get_a_bucketArray_ArrayTest command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}



// TAO_IDL - Generated from
// be/be_visitor_operation/upcall_command_ss.cpp:80

class _set_a_bucketArray_ArrayTest
  : public TAO::Upcall_Command
{
public:
  inline _set_a_bucketArray_ArrayTest (
    POA_ArrayTest * servant,
    TAO_Operation_Details const * operation_details,
    TAO::Argument * const args[])
    : servant_ (servant)
      , operation_details_ (operation_details)
      , args_ (args)
  {
  }

  virtual void execute (void)
  {
    TAO::SArg_Traits< ::BucketArray_tag>::in_arg_type arg_1 =
      TAO::Portable_Server::get_in_arg< ::BucketArray_tag> (
        this->operation_details_,
        this->args_,
        1);
      
    this->servant_->a_bucketArray (
      arg_1);
  }

private:
  POA_ArrayTest * const servant_;
  TAO_Operation_Details const * const operation_details_;
  TAO::Argument * const * const args_;
};

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_ss.cpp:168

void POA_ArrayTest::_set_a_bucketArray_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< void>::ret_val retval;
  TAO::SArg_Traits< ::BucketArray_tag>::in_arg_val _tao_a_bucketArray;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_a_bucketArray
    };
  
  static size_t const nargs = 2;

  POA_ArrayTest * const impl =
    dynamic_cast<POA_ArrayTest *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  _set_a_bucketArray_ArrayTest command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}



// TAO_IDL - Generated from
// be/be_visitor_operation/upcall_command_ss.cpp:80

class _get_a_accountArray_ArrayTest
  : public TAO::Upcall_Command
{
public:
  inline _get_a_accountArray_ArrayTest (
    POA_ArrayTest * servant,
    TAO_Operation_Details const * operation_details,
    TAO::Argument * const args[])
    : servant_ (servant)
      , operation_details_ (operation_details)
      , args_ (args)
  {
  }

  virtual void execute (void)
  {
    TAO::SArg_Traits< ::AccountArray_tag>::ret_arg_type retval =
      TAO::Portable_Server::get_ret_arg< ::AccountArray_tag> (
        this->operation_details_,
        this->args_);
    
    retval =
      this->servant_->a_accountArray ();
  }

private:
  POA_ArrayTest * const servant_;
  TAO_Operation_Details const * const operation_details_;
  TAO::Argument * const * const args_;
};

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_ss.cpp:168

void POA_ArrayTest::_get_a_accountArray_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::AccountArray_tag>::ret_val retval;

  TAO::Argument * const args[] =
    {
      &retval
    };
  
  static size_t const nargs = 1;

  POA_ArrayTest * const impl =
    dynamic_cast<POA_ArrayTest *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  _get_a_accountArray_ArrayTest command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}



// TAO_IDL - Generated from
// be/be_visitor_operation/upcall_command_ss.cpp:80

class _set_a_accountArray_ArrayTest
  : public TAO::Upcall_Command
{
public:
  inline _set_a_accountArray_ArrayTest (
    POA_ArrayTest * servant,
    TAO_Operation_Details const * operation_details,
    TAO::Argument * const args[])
    : servant_ (servant)
      , operation_details_ (operation_details)
      , args_ (args)
  {
  }

  virtual void execute (void)
  {
    TAO::SArg_Traits< ::AccountArray_tag>::in_arg_type arg_1 =
      TAO::Portable_Server::get_in_arg< ::AccountArray_tag> (
        this->operation_details_,
        this->args_,
        1);
      
    this->servant_->a_accountArray (
      arg_1);
  }

private:
  POA_ArrayTest * const servant_;
  TAO_Operation_Details const * const operation_details_;
  TAO::Argument * const * const args_;
};

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_ss.cpp:168

void POA_ArrayTest::_set_a_accountArray_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< void>::ret_val retval;
  TAO::SArg_Traits< ::AccountArray_tag>::in_arg_val _tao_a_accountArray;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_a_accountArray
    };
  
  static size_t const nargs = 2;

  POA_ArrayTest * const impl =
    dynamic_cast<POA_ArrayTest *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  _set_a_accountArray_ArrayTest command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}



// TAO_IDL - Generated from
// be/be_visitor_operation/upcall_command_ss.cpp:80

class _get_a_booleanArray_ArrayTest
  : public TAO::Upcall_Command
{
public:
  inline _get_a_booleanArray_ArrayTest (
    POA_ArrayTest * servant,
    TAO_Operation_Details const * operation_details,
    TAO::Argument * const args[])
    : servant_ (servant)
      , operation_details_ (operation_details)
      , args_ (args)
  {
  }

  virtual void execute (void)
  {
    TAO::SArg_Traits< ::BooleanArray_tag>::ret_arg_type retval =
      TAO::Portable_Server::get_ret_arg< ::BooleanArray_tag> (
        this->operation_details_,
        this->args_);
    
    retval =
      this->servant_->a_booleanArray ();
  }

private:
  POA_ArrayTest * const servant_;
  TAO_Operation_Details const * const operation_details_;
  TAO::Argument * const * const args_;
};

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_ss.cpp:168

void POA_ArrayTest::_get_a_booleanArray_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::BooleanArray_tag>::ret_val retval;

  TAO::Argument * const args[] =
    {
      &retval
    };
  
  static size_t const nargs = 1;

  POA_ArrayTest * const impl =
    dynamic_cast<POA_ArrayTest *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  _get_a_booleanArray_ArrayTest command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}



// TAO_IDL - Generated from
// be/be_visitor_operation/upcall_command_ss.cpp:80

class _set_a_booleanArray_ArrayTest
  : public TAO::Upcall_Command
{
public:
  inline _set_a_booleanArray_ArrayTest (
    POA_ArrayTest * servant,
    TAO_Operation_Details const * operation_details,
    TAO::Argument * const args[])
    : servant_ (servant)
      , operation_details_ (operation_details)
      , args_ (args)
  {
  }

  virtual void execute (void)
  {
    TAO::SArg_Traits< ::BooleanArray_tag>::in_arg_type arg_1 =
      TAO::Portable_Server::get_in_arg< ::BooleanArray_tag> (
        this->operation_details_,
        this->args_,
        1);
      
    this->servant_->a_booleanArray (
      arg_1);
  }

private:
  POA_ArrayTest * const servant_;
  TAO_Operation_Details const * const operation_details_;
  TAO::Argument * const * const args_;
};

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_ss.cpp:168

void POA_ArrayTest::_set_a_booleanArray_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< void>::ret_val retval;
  TAO::SArg_Traits< ::BooleanArray_tag>::in_arg_val _tao_a_booleanArray;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_a_booleanArray
    };
  
  static size_t const nargs = 2;

  POA_ArrayTest * const impl =
    dynamic_cast<POA_ArrayTest *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  _set_a_booleanArray_ArrayTest command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}



// TAO_IDL - Generated from
// be/be_visitor_operation/upcall_command_ss.cpp:80

class _get_a_longArrayArray_ArrayTest
  : public TAO::Upcall_Command
{
public:
  inline _get_a_longArrayArray_ArrayTest (
    POA_ArrayTest * servant,
    TAO_Operation_Details const * operation_details,
    TAO::Argument * const args[])
    : servant_ (servant)
      , operation_details_ (operation_details)
      , args_ (args)
  {
  }

  virtual void execute (void)
  {
    TAO::SArg_Traits< ::LongArrayArray_tag>::ret_arg_type retval =
      TAO::Portable_Server::get_ret_arg< ::LongArrayArray_tag> (
        this->operation_details_,
        this->args_);
    
    retval =
      this->servant_->a_longArrayArray ();
  }

private:
  POA_ArrayTest * const servant_;
  TAO_Operation_Details const * const operation_details_;
  TAO::Argument * const * const args_;
};

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_ss.cpp:168

void POA_ArrayTest::_get_a_longArrayArray_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::LongArrayArray_tag>::ret_val retval;

  TAO::Argument * const args[] =
    {
      &retval
    };
  
  static size_t const nargs = 1;

  POA_ArrayTest * const impl =
    dynamic_cast<POA_ArrayTest *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  _get_a_longArrayArray_ArrayTest command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}



// TAO_IDL - Generated from
// be/be_visitor_operation/upcall_command_ss.cpp:80

class _set_a_longArrayArray_ArrayTest
  : public TAO::Upcall_Command
{
public:
  inline _set_a_longArrayArray_ArrayTest (
    POA_ArrayTest * servant,
    TAO_Operation_Details const * operation_details,
    TAO::Argument * const args[])
    : servant_ (servant)
      , operation_details_ (operation_details)
      , args_ (args)
  {
  }

  virtual void execute (void)
  {
    TAO::SArg_Traits< ::LongArrayArray_tag>::in_arg_type arg_1 =
      TAO::Portable_Server::get_in_arg< ::LongArrayArray_tag> (
        this->operation_details_,
        this->args_,
        1);
      
    this->servant_->a_longArrayArray (
      arg_1);
  }

private:
  POA_ArrayTest * const servant_;
  TAO_Operation_Details const * const operation_details_;
  TAO::Argument * const * const args_;
};

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_ss.cpp:168

void POA_ArrayTest::_set_a_longArrayArray_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< void>::ret_val retval;
  TAO::SArg_Traits< ::LongArrayArray_tag>::in_arg_val _tao_a_longArrayArray;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_a_longArrayArray
    };
  
  static size_t const nargs = 2;

  POA_ArrayTest * const impl =
    dynamic_cast<POA_ArrayTest *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  _set_a_longArrayArray_ArrayTest command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}



// TAO_IDL - Generated from
// be/be_visitor_operation/upcall_command_ss.cpp:80

class _get_a_myEnumArray_ArrayTest
  : public TAO::Upcall_Command
{
public:
  inline _get_a_myEnumArray_ArrayTest (
    POA_ArrayTest * servant,
    TAO_Operation_Details const * operation_details,
    TAO::Argument * const args[])
    : servant_ (servant)
      , operation_details_ (operation_details)
      , args_ (args)
  {
  }

  virtual void execute (void)
  {
    TAO::SArg_Traits< ::MyEnumArray_tag>::ret_arg_type retval =
      TAO::Portable_Server::get_ret_arg< ::MyEnumArray_tag> (
        this->operation_details_,
        this->args_);
    
    retval =
      this->servant_->a_myEnumArray ();
  }

private:
  POA_ArrayTest * const servant_;
  TAO_Operation_Details const * const operation_details_;
  TAO::Argument * const * const args_;
};

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_ss.cpp:168

void POA_ArrayTest::_get_a_myEnumArray_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::MyEnumArray_tag>::ret_val retval;

  TAO::Argument * const args[] =
    {
      &retval
    };
  
  static size_t const nargs = 1;

  POA_ArrayTest * const impl =
    dynamic_cast<POA_ArrayTest *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  _get_a_myEnumArray_ArrayTest command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}



// TAO_IDL - Generated from
// be/be_visitor_operation/upcall_command_ss.cpp:80

class _set_a_myEnumArray_ArrayTest
  : public TAO::Upcall_Command
{
public:
  inline _set_a_myEnumArray_ArrayTest (
    POA_ArrayTest * servant,
    TAO_Operation_Details const * operation_details,
    TAO::Argument * const args[])
    : servant_ (servant)
      , operation_details_ (operation_details)
      , args_ (args)
  {
  }

  virtual void execute (void)
  {
    TAO::SArg_Traits< ::MyEnumArray_tag>::in_arg_type arg_1 =
      TAO::Portable_Server::get_in_arg< ::MyEnumArray_tag> (
        this->operation_details_,
        this->args_,
        1);
      
    this->servant_->a_myEnumArray (
      arg_1);
  }

private:
  POA_ArrayTest * const servant_;
  TAO_Operation_Details const * const operation_details_;
  TAO::Argument * const * const args_;
};

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_ss.cpp:168

void POA_ArrayTest::_set_a_myEnumArray_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< void>::ret_val retval;
  TAO::SArg_Traits< ::MyEnumArray_tag>::in_arg_val _tao_a_myEnumArray;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_a_myEnumArray
    };
  
  static size_t const nargs = 2;

  POA_ArrayTest * const impl =
    dynamic_cast<POA_ArrayTest *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  _set_a_myEnumArray_ArrayTest command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}



// TAO_IDL - Generated from
// be/be_visitor_interface/interface_ss.cpp:163



::CORBA::Boolean POA_ArrayTest::_is_a (const char* value)
{
  return
    (
      ACE_OS::strcmp (
          value,
          "IDL:ArrayTest:1.0"
        ) == 0 ||
      !ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        )
    );
}

const char* POA_ArrayTest::_interface_repository_id (void) const
{
  return "IDL:ArrayTest:1.0";
}

// TAO_IDL - Generated from
// be/be_visitor_interface/interface_ss.cpp:423

void POA_ArrayTest::_dispatch (
  TAO_ServerRequest & req,
  TAO::Portable_Server::Servant_Upcall* servant_upcall)
{
  this->synchronous_upcall_dispatch (req, servant_upcall, this);
}

// TAO_IDL - Generated from
// be/be_visitor_interface/interface_ss.cpp:370

ArrayTest *
POA_ArrayTest::_this (void)
{
  TAO_Stub *stub = this->_create_stub ();

  TAO_Stub_Auto_Ptr safe_stub (stub);
  ::CORBA::Object_ptr tmp = CORBA::Object_ptr ();

  ::CORBA::Boolean const _tao_opt_colloc =
    stub->servant_orb_var ()->orb_core ()->optimize_collocation_objects ();
  
  ACE_NEW_RETURN (
      tmp,
      ::CORBA::Object (stub, _tao_opt_colloc, this),
      0);
  
  ::CORBA::Object_var obj = tmp;
  (void) safe_stub.release ();

  typedef ::ArrayTest STUB_SCOPED_NAME;
  return
    TAO::Narrow_Utils<STUB_SCOPED_NAME>::unchecked_narrow (
        obj.in ());
}

// TAO_IDL - Generated from
// be/be_interface.cpp:1865

class TAO_ServerAdmin_Perfect_Hash_OpTable
  : public TAO_Perfect_Hash_OpTable
{
private:
  unsigned int hash (const char *str, unsigned int len);

public:
  const TAO_operation_db_entry * lookup (const char *str, unsigned int len);
};

/* C++ code produced by gperf version 2.8 (ACE version) */
/* Command-line: /mnt/win_d/projects/ATCD/ACE/bin/ace_gperf -m -M -J -c -C -D -E -T -f 0 -F 0,0 -a -o -t -p -K opname -L C++ -Z TAO_ServerAdmin_Perfect_Hash_OpTable -N lookup  */
unsigned int
TAO_ServerAdmin_Perfect_Hash_OpTable::hash (const char *str, unsigned int len)
{
  static const unsigned char asso_values[] =
    {
     16, 16, 16, 16, 16, 16, 16, 16, 16, 16,
     16, 16, 16, 16, 16, 16, 16, 16, 16, 16,
     16, 16, 16, 16, 16, 16, 16, 16, 16, 16,
     16, 16, 16, 16, 16, 16, 16, 16, 16, 16,
     16, 16, 16, 16, 16, 16, 16, 16, 16, 16,
     16, 16, 16, 16, 16, 16, 16, 16, 16, 16,
     16, 16, 16, 16, 16, 16, 16, 16, 16, 16,
     16, 16, 16, 16, 16, 16, 16, 16, 16, 16,
     16, 16, 16, 16, 16, 16, 16, 16, 16, 16,
     16, 16, 16, 16, 16,  0, 16,  0, 16, 16,
      0,  5, 16, 16, 16, 16, 16, 16, 16, 16,
      0, 16, 16, 16, 16,  0,  0, 16, 16, 16,
     16, 16, 16, 16, 16, 16, 16, 16,
    };
  return len + asso_values[static_cast<int>(str[len - 1])] + asso_values[static_cast<int>(str[0])];
}

const TAO_operation_db_entry *
TAO_ServerAdmin_Perfect_Hash_OpTable::lookup (const char *str, unsigned int len)
{
  enum
    {
      TOTAL_KEYWORDS = 7,
      MIN_WORD_LENGTH = 5,
      MAX_WORD_LENGTH = 14,
      MIN_HASH_VALUE = 5,
      MAX_HASH_VALUE = 15,
      HASH_VALUE_RANGE = 11,
      DUPLICATES = 0,
      WORDLIST_SIZE = 12
    };

  static const TAO_operation_db_entry wordlist[] =
    {
      {"",0,0},{"",0,0},{"",0,0},{"",0,0},{"",0,0},
      {"_is_a", &TAO_ServantBase::_is_a_thru_poa_skel, 0},
      {"target", &POA_ServerAdmin::target_skel, 0},
      {"",0,0},
      {"shutdown", &POA_ServerAdmin::shutdown_skel, 0},
      {"",0,0},
      {"_component", &TAO_ServantBase::_component_thru_poa_skel, 0},
      {"",0,0},{"",0,0},
      {"_non_existent", &TAO_ServantBase::_non_existent_thru_poa_skel, 0},
      {"_repository_id", &TAO_ServantBase::_repository_id_thru_poa_skel, 0},
      {"_interface", &TAO_ServantBase::_interface_skel, 0},
    };

  if (len <= MAX_WORD_LENGTH && len >= MIN_WORD_LENGTH)
    {
      unsigned int key = hash (str, len);

      if (key <= MAX_HASH_VALUE && key >= MIN_HASH_VALUE)
        {
          const char *s = wordlist[key].opname;

          if (*str == *s && !ACE_OS::strncmp (str + 1, s + 1, len - 1))
            return &wordlist[key];
        }
    }
  return 0;
}

static TAO_ServerAdmin_Perfect_Hash_OpTable tao_ServerAdmin_optable;

// TAO_IDL - Generated from
// be/be_visitor_interface/interface_ss.cpp:90

POA_ServerAdmin::POA_ServerAdmin (void)
  : TAO_ServantBase ()
{
  this->optable_ = &tao_ServerAdmin_optable;
}

POA_ServerAdmin::POA_ServerAdmin (const POA_ServerAdmin& rhs)
  : TAO_Abstract_ServantBase (rhs),
    TAO_ServantBase (rhs)
{
}

POA_ServerAdmin::~POA_ServerAdmin (void)
{
}


// TAO_IDL - Generated from
// be/be_visitor_operation/upcall_command_ss.cpp:80

class target_ServerAdmin
  : public TAO::Upcall_Command
{
public:
  inline target_ServerAdmin (
    POA_ServerAdmin * servant,
    TAO_Operation_Details const * operation_details,
    TAO::Argument * const args[])
    : servant_ (servant)
      , operation_details_ (operation_details)
      , args_ (args)
  {
  }

  virtual void execute (void)
  {
    TAO::SArg_Traits< ::ArrayTest>::ret_arg_type retval =
      TAO::Portable_Server::get_ret_arg< ::ArrayTest> (
        this->operation_details_,
        this->args_);
    
    retval =
      this->servant_->target ();
  }

private:
  POA_ServerAdmin * const servant_;
  TAO_Operation_Details const * const operation_details_;
  TAO::Argument * const * const args_;
};

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_ss.cpp:168

void POA_ServerAdmin::target_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::ArrayTest>::ret_val retval;

  TAO::Argument * const args[] =
    {
      &retval
    };
  
  static size_t const nargs = 1;

  POA_ServerAdmin * const impl =
    dynamic_cast<POA_ServerAdmin *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  target_ServerAdmin command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}



// TAO_IDL - Generated from
// be/be_visitor_operation/upcall_command_ss.cpp:80

class shutdown_ServerAdmin
  : public TAO::Upcall_Command
{
public:
  inline shutdown_ServerAdmin (
    POA_ServerAdmin * servant)
    : servant_ (servant)
  {
  }

  virtual void execute (void)
  {
    this->servant_->shutdown ();
  }

private:
  POA_ServerAdmin * const servant_;
};

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_ss.cpp:168

void POA_ServerAdmin::shutdown_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< void>::ret_val retval;

  TAO::Argument * const args[] =
    {
      &retval
    };
  
  static size_t const nargs = 1;

  POA_ServerAdmin * const impl =
    dynamic_cast<POA_ServerAdmin *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  shutdown_ServerAdmin command (
    impl);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}



// TAO_IDL - Generated from
// be/be_visitor_interface/interface_ss.cpp:163



::CORBA::Boolean POA_ServerAdmin::_is_a (const char* value)
{
  return
    (
      ACE_OS::strcmp (
          value,
          "IDL:ServerAdmin:1.0"
        ) == 0 ||
      !ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        )
    );
}

const char* POA_ServerAdmin::_interface_repository_id (void) const
{
  return "IDL:ServerAdmin:1.0";
}

// TAO_IDL - Generated from
// be/be_visitor_interface/interface_ss.cpp:423

void POA_ServerAdmin::_dispatch (
  TAO_ServerRequest & req,
  TAO::Portable_Server::Servant_Upcall* servant_upcall)
{
  this->synchronous_upcall_dispatch (req, servant_upcall, this);
}

// TAO_IDL - Generated from
// be/be_visitor_interface/interface_ss.cpp:370

ServerAdmin *
POA_ServerAdmin::_this (void)
{
  TAO_Stub *stub = this->_create_stub ();

  TAO_Stub_Auto_Ptr safe_stub (stub);
  ::CORBA::Object_ptr tmp = CORBA::Object_ptr ();

  ::CORBA::Boolean const _tao_opt_colloc =
    stub->servant_orb_var ()->orb_core ()->optimize_collocation_objects ();
  
  ACE_NEW_RETURN (
      tmp,
      ::CORBA::Object (stub, _tao_opt_colloc, this),
      0);
  
  ::CORBA::Object_var obj = tmp;
  (void) safe_stub.release ();

  typedef ::ServerAdmin STUB_SCOPED_NAME;
  return
    TAO::Narrow_Utils<STUB_SCOPED_NAME>::unchecked_narrow (
        obj.in ());
}

#endif /* ifndef */

