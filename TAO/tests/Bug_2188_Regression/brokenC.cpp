// -*- C++ -*-
/**
 * Code generated by the The ACE ORB (TAO) IDL Compiler v2.4.1
 * TAO and the TAO IDL Compiler have been developed by:
 *       Center for Distributed Object Computing
 *       Washington University
 *       St. Louis, MO
 *       USA
 *       http://www.cs.wustl.edu/~schmidt/doc-center.html
 * and
 *       Distributed Object Computing Laboratory
 *       University of California at Irvine
 *       Irvine, CA
 *       USA
 * and
 *       Institute for Software Integrated Systems
 *       Vanderbilt University
 *       Nashville, TN
 *       USA
 *       http://www.isis.vanderbilt.edu/
 *
 * Information about TAO is available at:
 *     http://www.dre.vanderbilt.edu/~schmidt/TAO.html
 **/

// TAO_IDL - Generated from
// be/be_codegen.cpp:373


#include "brokenC.h"
#include "tao/CDR.h"
#include "tao/Exception_Data.h"
#include "tao/Invocation_Adapter.h"
#include "tao/Object_T.h"
#include "ace/OS_NS_string.h"

#if !defined (__ACE_INLINE__)
#include "brokenC.inl"
#endif /* !defined INLINE */

// TAO_IDL - Generated from
// be/be_visitor_array/array_cs.cpp:94

tmp1CharArray_slice *
tmp1CharArray_dup (const tmp1CharArray_slice *_tao_src_array)
{
  tmp1CharArray_slice *_tao_dup_array =
    tmp1CharArray_alloc ();

  if (!_tao_dup_array)
    {
      return static_cast <tmp1CharArray_slice *> (0);
    }

  tmp1CharArray_copy (_tao_dup_array, _tao_src_array);
  return _tao_dup_array;
}

tmp1CharArray_slice *
tmp1CharArray_alloc (void)
{
  tmp1CharArray_slice *retval = 0;
  ACE_NEW_RETURN (retval, ::CORBA::Char[10], 0);
  return retval;
}

void
tmp1CharArray_free (
    tmp1CharArray_slice *_tao_slice)
{
  delete [] _tao_slice;
}

void
tmp1CharArray_copy (
    tmp1CharArray_slice * _tao_to,
    const tmp1CharArray_slice *_tao_from)
{
  // Copy each individual element.
  for ( ::CORBA::ULong i0 = 0; i0 < 10; ++i0)
    {
      _tao_to[i0] = _tao_from[i0];
    }
}

// TAO_IDL - Generated from
// be/be_visitor_array/array_cs.cpp:94

OctetArray_slice *
OctetArray_dup (const OctetArray_slice *_tao_src_array)
{
  OctetArray_slice *_tao_dup_array =
    OctetArray_alloc ();

  if (!_tao_dup_array)
    {
      return static_cast <OctetArray_slice *> (0);
    }

  OctetArray_copy (_tao_dup_array, _tao_src_array);
  return _tao_dup_array;
}

OctetArray_slice *
OctetArray_alloc (void)
{
  OctetArray_slice *retval = 0;
  ACE_NEW_RETURN (retval, ::CORBA::Octet[10], 0);
  return retval;
}

void
OctetArray_free (
    OctetArray_slice *_tao_slice)
{
  delete [] _tao_slice;
}

void
OctetArray_copy (
    OctetArray_slice * _tao_to,
    const OctetArray_slice *_tao_from)
{
  // Copy each individual element.
  for ( ::CORBA::ULong i0 = 0; i0 < 10; ++i0)
    {
      _tao_to[i0] = _tao_from[i0];
    }
}

// TAO_IDL - Generated from
// be/be_visitor_array/array_cs.cpp:94

ShortArray_slice *
ShortArray_dup (const ShortArray_slice *_tao_src_array)
{
  ShortArray_slice *_tao_dup_array =
    ShortArray_alloc ();

  if (!_tao_dup_array)
    {
      return static_cast <ShortArray_slice *> (0);
    }

  ShortArray_copy (_tao_dup_array, _tao_src_array);
  return _tao_dup_array;
}

ShortArray_slice *
ShortArray_alloc (void)
{
  ShortArray_slice *retval = 0;
  ACE_NEW_RETURN (retval, ::CORBA::Short[10], 0);
  return retval;
}

void
ShortArray_free (
    ShortArray_slice *_tao_slice)
{
  delete [] _tao_slice;
}

void
ShortArray_copy (
    ShortArray_slice * _tao_to,
    const ShortArray_slice *_tao_from)
{
  // Copy each individual element.
  for ( ::CORBA::ULong i0 = 0; i0 < 10; ++i0)
    {
      _tao_to[i0] = _tao_from[i0];
    }
}

// TAO_IDL - Generated from
// be/be_visitor_array/array_cs.cpp:94

LongArray_slice *
LongArray_dup (const LongArray_slice *_tao_src_array)
{
  LongArray_slice *_tao_dup_array =
    LongArray_alloc ();

  if (!_tao_dup_array)
    {
      return static_cast <LongArray_slice *> (0);
    }

  LongArray_copy (_tao_dup_array, _tao_src_array);
  return _tao_dup_array;
}

LongArray_slice *
LongArray_alloc (void)
{
  LongArray_slice *retval = 0;
  ACE_NEW_RETURN (retval, ::CORBA::Long[10], 0);
  return retval;
}

void
LongArray_free (
    LongArray_slice *_tao_slice)
{
  delete [] _tao_slice;
}

void
LongArray_copy (
    LongArray_slice * _tao_to,
    const LongArray_slice *_tao_from)
{
  // Copy each individual element.
  for ( ::CORBA::ULong i0 = 0; i0 < 10; ++i0)
    {
      _tao_to[i0] = _tao_from[i0];
    }
}

// TAO_IDL - Generated from
// be/be_visitor_array/array_cs.cpp:94

LongLongArray_slice *
LongLongArray_dup (const LongLongArray_slice *_tao_src_array)
{
  LongLongArray_slice *_tao_dup_array =
    LongLongArray_alloc ();

  if (!_tao_dup_array)
    {
      return static_cast <LongLongArray_slice *> (0);
    }

  LongLongArray_copy (_tao_dup_array, _tao_src_array);
  return _tao_dup_array;
}

LongLongArray_slice *
LongLongArray_alloc (void)
{
  LongLongArray_slice *retval = 0;
  ACE_NEW_RETURN (retval, ::CORBA::LongLong[10], 0);
  return retval;
}

void
LongLongArray_free (
    LongLongArray_slice *_tao_slice)
{
  delete [] _tao_slice;
}

void
LongLongArray_copy (
    LongLongArray_slice * _tao_to,
    const LongLongArray_slice *_tao_from)
{
  // Copy each individual element.
  for ( ::CORBA::ULong i0 = 0; i0 < 10; ++i0)
    {
      _tao_to[i0] = _tao_from[i0];
    }
}

// TAO_IDL - Generated from
// be/be_visitor_array/array_cs.cpp:94

UShortArray_slice *
UShortArray_dup (const UShortArray_slice *_tao_src_array)
{
  UShortArray_slice *_tao_dup_array =
    UShortArray_alloc ();

  if (!_tao_dup_array)
    {
      return static_cast <UShortArray_slice *> (0);
    }

  UShortArray_copy (_tao_dup_array, _tao_src_array);
  return _tao_dup_array;
}

UShortArray_slice *
UShortArray_alloc (void)
{
  UShortArray_slice *retval = 0;
  ACE_NEW_RETURN (retval, ::CORBA::UShort[10], 0);
  return retval;
}

void
UShortArray_free (
    UShortArray_slice *_tao_slice)
{
  delete [] _tao_slice;
}

void
UShortArray_copy (
    UShortArray_slice * _tao_to,
    const UShortArray_slice *_tao_from)
{
  // Copy each individual element.
  for ( ::CORBA::ULong i0 = 0; i0 < 10; ++i0)
    {
      _tao_to[i0] = _tao_from[i0];
    }
}

// TAO_IDL - Generated from
// be/be_visitor_array/array_cs.cpp:94

ULongArray_slice *
ULongArray_dup (const ULongArray_slice *_tao_src_array)
{
  ULongArray_slice *_tao_dup_array =
    ULongArray_alloc ();

  if (!_tao_dup_array)
    {
      return static_cast <ULongArray_slice *> (0);
    }

  ULongArray_copy (_tao_dup_array, _tao_src_array);
  return _tao_dup_array;
}

ULongArray_slice *
ULongArray_alloc (void)
{
  ULongArray_slice *retval = 0;
  ACE_NEW_RETURN (retval, ::CORBA::ULong[10], 0);
  return retval;
}

void
ULongArray_free (
    ULongArray_slice *_tao_slice)
{
  delete [] _tao_slice;
}

void
ULongArray_copy (
    ULongArray_slice * _tao_to,
    const ULongArray_slice *_tao_from)
{
  // Copy each individual element.
  for ( ::CORBA::ULong i0 = 0; i0 < 10; ++i0)
    {
      _tao_to[i0] = _tao_from[i0];
    }
}

// TAO_IDL - Generated from
// be/be_visitor_array/array_cs.cpp:94

ULongLongArray_slice *
ULongLongArray_dup (const ULongLongArray_slice *_tao_src_array)
{
  ULongLongArray_slice *_tao_dup_array =
    ULongLongArray_alloc ();

  if (!_tao_dup_array)
    {
      return static_cast <ULongLongArray_slice *> (0);
    }

  ULongLongArray_copy (_tao_dup_array, _tao_src_array);
  return _tao_dup_array;
}

ULongLongArray_slice *
ULongLongArray_alloc (void)
{
  ULongLongArray_slice *retval = 0;
  ACE_NEW_RETURN (retval, ::CORBA::ULongLong[10], 0);
  return retval;
}

void
ULongLongArray_free (
    ULongLongArray_slice *_tao_slice)
{
  delete [] _tao_slice;
}

void
ULongLongArray_copy (
    ULongLongArray_slice * _tao_to,
    const ULongLongArray_slice *_tao_from)
{
  // Copy each individual element.
  for ( ::CORBA::ULong i0 = 0; i0 < 10; ++i0)
    {
      _tao_to[i0] = _tao_from[i0];
    }
}

// TAO_IDL - Generated from
// be/be_visitor_array/array_cs.cpp:94

FloatArray_slice *
FloatArray_dup (const FloatArray_slice *_tao_src_array)
{
  FloatArray_slice *_tao_dup_array =
    FloatArray_alloc ();

  if (!_tao_dup_array)
    {
      return static_cast <FloatArray_slice *> (0);
    }

  FloatArray_copy (_tao_dup_array, _tao_src_array);
  return _tao_dup_array;
}

FloatArray_slice *
FloatArray_alloc (void)
{
  FloatArray_slice *retval = 0;
  ACE_NEW_RETURN (retval, ::CORBA::Float[10], 0);
  return retval;
}

void
FloatArray_free (
    FloatArray_slice *_tao_slice)
{
  delete [] _tao_slice;
}

void
FloatArray_copy (
    FloatArray_slice * _tao_to,
    const FloatArray_slice *_tao_from)
{
  // Copy each individual element.
  for ( ::CORBA::ULong i0 = 0; i0 < 10; ++i0)
    {
      _tao_to[i0] = _tao_from[i0];
    }
}

// TAO_IDL - Generated from
// be/be_visitor_array/array_cs.cpp:94

DoubleArray_slice *
DoubleArray_dup (const DoubleArray_slice *_tao_src_array)
{
  DoubleArray_slice *_tao_dup_array =
    DoubleArray_alloc ();

  if (!_tao_dup_array)
    {
      return static_cast <DoubleArray_slice *> (0);
    }

  DoubleArray_copy (_tao_dup_array, _tao_src_array);
  return _tao_dup_array;
}

DoubleArray_slice *
DoubleArray_alloc (void)
{
  DoubleArray_slice *retval = 0;
  ACE_NEW_RETURN (retval, ::CORBA::Double[10], 0);
  return retval;
}

void
DoubleArray_free (
    DoubleArray_slice *_tao_slice)
{
  delete [] _tao_slice;
}

void
DoubleArray_copy (
    DoubleArray_slice * _tao_to,
    const DoubleArray_slice *_tao_from)
{
  // Copy each individual element.
  for ( ::CORBA::ULong i0 = 0; i0 < 10; ++i0)
    {
      _tao_to[i0] = _tao_from[i0];
    }
}

// TAO_IDL - Generated from
// be/be_visitor_array/array_cs.cpp:94

StringArray_slice *
StringArray_dup (const StringArray_slice *_tao_src_array)
{
  StringArray_slice *_tao_dup_array =
    StringArray_alloc ();

  if (!_tao_dup_array)
    {
      return static_cast <StringArray_slice *> (0);
    }

  StringArray_copy (_tao_dup_array, _tao_src_array);
  return _tao_dup_array;
}

StringArray_slice *
StringArray_alloc (void)
{
  StringArray_slice *retval = 0;
  ACE_NEW_RETURN (retval, ::TAO::String_Manager[10], 0);
  return retval;
}

void
StringArray_free (
    StringArray_slice *_tao_slice)
{
  delete [] _tao_slice;
}

void
StringArray_copy (
    StringArray_slice * _tao_to,
    const StringArray_slice *_tao_from)
{
  // Copy each individual element.
  for ( ::CORBA::ULong i0 = 0; i0 < 10; ++i0)
    {
      _tao_to[i0] = _tao_from[i0];
    }
}

// TAO_IDL - Generated from
// be/be_visitor_array/array_cs.cpp:94

BooleanArray_slice *
BooleanArray_dup (const BooleanArray_slice *_tao_src_array)
{
  BooleanArray_slice *_tao_dup_array =
    BooleanArray_alloc ();

  if (!_tao_dup_array)
    {
      return static_cast <BooleanArray_slice *> (0);
    }

  BooleanArray_copy (_tao_dup_array, _tao_src_array);
  return _tao_dup_array;
}

BooleanArray_slice *
BooleanArray_alloc (void)
{
  BooleanArray_slice *retval = 0;
  ACE_NEW_RETURN (retval, ::CORBA::Boolean[10], 0);
  return retval;
}

void
BooleanArray_free (
    BooleanArray_slice *_tao_slice)
{
  delete [] _tao_slice;
}

void
BooleanArray_copy (
    BooleanArray_slice * _tao_to,
    const BooleanArray_slice *_tao_from)
{
  // Copy each individual element.
  for ( ::CORBA::ULong i0 = 0; i0 < 10; ++i0)
    {
      _tao_to[i0] = _tao_from[i0];
    }
}

// TAO_IDL - Generated from
// be/be_visitor_array/array_cs.cpp:94

MyEnumArray_slice *
MyEnumArray_dup (const MyEnumArray_slice *_tao_src_array)
{
  MyEnumArray_slice *_tao_dup_array =
    MyEnumArray_alloc ();

  if (!_tao_dup_array)
    {
      return static_cast <MyEnumArray_slice *> (0);
    }

  MyEnumArray_copy (_tao_dup_array, _tao_src_array);
  return _tao_dup_array;
}

MyEnumArray_slice *
MyEnumArray_alloc (void)
{
  MyEnumArray_slice *retval = 0;
  ACE_NEW_RETURN (retval, MyEnum[10], 0);
  return retval;
}

void
MyEnumArray_free (
    MyEnumArray_slice *_tao_slice)
{
  delete [] _tao_slice;
}

void
MyEnumArray_copy (
    MyEnumArray_slice * _tao_to,
    const MyEnumArray_slice *_tao_from)
{
  // Copy each individual element.
  for ( ::CORBA::ULong i0 = 0; i0 < 10; ++i0)
    {
      _tao_to[i0] = _tao_from[i0];
    }
}

// TAO_IDL - Generated from
// be/be_visitor_array/array_cs.cpp:94

LongArrayArray_slice *
LongArrayArray_dup (const LongArrayArray_slice *_tao_src_array)
{
  LongArrayArray_slice *_tao_dup_array =
    LongArrayArray_alloc ();

  if (!_tao_dup_array)
    {
      return static_cast <LongArrayArray_slice *> (0);
    }

  LongArrayArray_copy (_tao_dup_array, _tao_src_array);
  return _tao_dup_array;
}

LongArrayArray_slice *
LongArrayArray_alloc (void)
{
  LongArrayArray_slice *retval = 0;
  ACE_NEW_RETURN (retval, ::CORBA::Long[10][10], 0);
  return retval;
}

void
LongArrayArray_free (
    LongArrayArray_slice *_tao_slice)
{
  delete [] _tao_slice;
}

void
LongArrayArray_copy (
    LongArrayArray_slice * _tao_to,
    const LongArrayArray_slice *_tao_from)
{
  // Copy each individual element.
  for ( ::CORBA::ULong i0 = 0; i0 < 10; ++i0)
    {
      for ( ::CORBA::ULong i1 = 0; i1 < 10; ++i1)
        {
          _tao_to[i0][i1] = _tao_from[i0][i1];
        }
    }
}

// TAO_IDL - Generated from
// be/be_visitor_interface/interface_cs.cpp:48

// Traits specializations for moola::Account.

moola::Account_ptr
TAO::Objref_Traits<moola::Account>::duplicate (
    moola::Account_ptr p)
{
  return moola::Account::_duplicate (p);
}

void
TAO::Objref_Traits<moola::Account>::release (
    moola::Account_ptr p)
{
  ::CORBA::release (p);
}

moola::Account_ptr
TAO::Objref_Traits<moola::Account>::nil (void)
{
  return moola::Account::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<moola::Account>::marshal (
    const moola::Account_ptr p,
    TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:88

char *
moola::Account::name (
  void)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }

  TAO::Arg_Traits< char *>::ret_val _tao_retval;

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      1,
      "_get_name",
      9,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY,
      TAO::TAO_TWOWAY_INVOCATION
      ,
      TAO::TAO_SYNCHRONOUS_INVOCATION,
      false
    );

  _tao_call.invoke (0, 0);

  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:88

void
moola::Account::name (
  const char * name)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }

  TAO::Arg_Traits< void>::ret_val _tao_retval;
  TAO::Arg_Traits< char *>::in_arg_val _tao_name (name);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_name
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      2,
      "_set_name",
      9,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY

    );

  _tao_call.invoke (0, 0);
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:88

::moola::CashAmount
moola::Account::balance (
  void)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }

  TAO::Arg_Traits< ::CORBA::Float>::ret_val _tao_retval;

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      1,
      "_get_balance",
      12,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY,
      TAO::TAO_TWOWAY_INVOCATION
      ,
      TAO::TAO_SYNCHRONOUS_INVOCATION,
      false
    );

  _tao_call.invoke (0, 0);

  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:88

void
moola::Account::balance (
  ::moola::CashAmount balance)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }

  TAO::Arg_Traits< void>::ret_val _tao_retval;
  TAO::Arg_Traits< ::CORBA::Float>::in_arg_val _tao_balance (balance);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_balance
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      2,
      "_set_balance",
      12,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY

    );

  _tao_call.invoke (0, 0);
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:88

void
moola::Account::deposit (
  ::moola::CashAmount amount)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }

  TAO::Arg_Traits< void>::ret_val _tao_retval;
  TAO::Arg_Traits< ::CORBA::Float>::in_arg_val _tao_amount (amount);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_amount
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      2,
      "deposit",
      7,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY

    );

  _tao_call.invoke (0, 0);
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:88

void
moola::Account::withdraw (
  ::moola::CashAmount amount)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }

  TAO::Arg_Traits< void>::ret_val _tao_retval;
  TAO::Arg_Traits< ::CORBA::Float>::in_arg_val _tao_amount (amount);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_amount
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      2,
      "withdraw",
      8,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY

    );

  _tao_call.invoke (0, 0);
}

moola::Account::Account (void)
{
}

moola::Account::~Account (void)
{
}

moola::Account_ptr
moola::Account::_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return
    TAO::Narrow_Utils<Account>::narrow (
        _tao_objref,
        "IDL:moola/Account:1.0");
}

moola::Account_ptr
moola::Account::_unchecked_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return
    TAO::Narrow_Utils<Account>::unchecked_narrow (
        _tao_objref);
}

moola::Account_ptr
moola::Account::_nil (void)
{
  return 0;
}

moola::Account_ptr
moola::Account::_duplicate (Account_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  return obj;
}

void
moola::Account::_tao_release (Account_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
moola::Account::_is_a (const char *value)
{
  if (
      ACE_OS::strcmp (
          value,
          "IDL:moola/Account:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        ) == 0
    )
    {
      return true; // success using local knowledge
    }
  else
    {
      return this->::CORBA::Object::_is_a (value);
    }
}

const char* moola::Account::_interface_repository_id (void) const
{
  return "IDL:moola/Account:1.0";
}

::CORBA::Boolean
moola::Account::marshal (TAO_OutputCDR &cdr)
{
  return (cdr << this);
}

// TAO_IDL - Generated from
// be/be_visitor_array/array_cs.cpp:94

BucketArray_slice *
BucketArray_dup (const BucketArray_slice *_tao_src_array)
{
  BucketArray_slice *_tao_dup_array =
    BucketArray_alloc ();

  if (!_tao_dup_array)
    {
      return static_cast <BucketArray_slice *> (0);
    }

  BucketArray_copy (_tao_dup_array, _tao_src_array);
  return _tao_dup_array;
}

BucketArray_slice *
BucketArray_alloc (void)
{
  BucketArray_slice *retval = 0;
  ACE_NEW_RETURN (retval, Bucket[10], 0);
  return retval;
}

void
BucketArray_free (
    BucketArray_slice *_tao_slice)
{
  delete [] _tao_slice;
}

void
BucketArray_copy (
    BucketArray_slice * _tao_to,
    const BucketArray_slice *_tao_from)
{
  // Copy each individual element.
  for ( ::CORBA::ULong i0 = 0; i0 < 10; ++i0)
    {
      _tao_to[i0] = _tao_from[i0];
    }
}

// TAO_IDL - Generated from
// be/be_visitor_array/array_cs.cpp:94

BucketArrayArray_slice *
BucketArrayArray_dup (const BucketArrayArray_slice *_tao_src_array)
{
  BucketArrayArray_slice *_tao_dup_array =
    BucketArrayArray_alloc ();

  if (!_tao_dup_array)
    {
      return static_cast <BucketArrayArray_slice *> (0);
    }

  BucketArrayArray_copy (_tao_dup_array, _tao_src_array);
  return _tao_dup_array;
}

BucketArrayArray_slice *
BucketArrayArray_alloc (void)
{
  BucketArrayArray_slice *retval = 0;
  ACE_NEW_RETURN (retval, Bucket[10][10], 0);
  return retval;
}

void
BucketArrayArray_free (
    BucketArrayArray_slice *_tao_slice)
{
  delete [] _tao_slice;
}

void
BucketArrayArray_copy (
    BucketArrayArray_slice * _tao_to,
    const BucketArrayArray_slice *_tao_from)
{
  // Copy each individual element.
  for ( ::CORBA::ULong i0 = 0; i0 < 10; ++i0)
    {
      for ( ::CORBA::ULong i1 = 0; i1 < 10; ++i1)
        {
          _tao_to[i0][i1] = _tao_from[i0][i1];
        }
    }
}

// TAO_IDL - Generated from
// be/be_visitor_array/array_cs.cpp:94

AccountArray_slice *
AccountArray_dup (const AccountArray_slice *_tao_src_array)
{
  AccountArray_slice *_tao_dup_array =
    AccountArray_alloc ();

  if (!_tao_dup_array)
    {
      return static_cast <AccountArray_slice *> (0);
    }

  AccountArray_copy (_tao_dup_array, _tao_src_array);
  return _tao_dup_array;
}

AccountArray_slice *
AccountArray_alloc (void)
{
  AccountArray_slice *retval = 0;
  ACE_NEW_RETURN (retval, moola::Account_var[10], 0);
  return retval;
}

void
AccountArray_free (
    AccountArray_slice *_tao_slice)
{
  delete [] _tao_slice;
}

void
AccountArray_copy (
    AccountArray_slice * _tao_to,
    const AccountArray_slice *_tao_from)
{
  // Copy each individual element.
  for ( ::CORBA::ULong i0 = 0; i0 < 10; ++i0)
    {
      _tao_to[i0] = _tao_from[i0];
    }
}

// TAO_IDL - Generated from
// be/be_visitor_interface/interface_cs.cpp:48

// Traits specializations for ArrayTest.

ArrayTest_ptr
TAO::Objref_Traits<ArrayTest>::duplicate (
    ArrayTest_ptr p)
{
  return ArrayTest::_duplicate (p);
}

void
TAO::Objref_Traits<ArrayTest>::release (
    ArrayTest_ptr p)
{
  ::CORBA::release (p);
}

ArrayTest_ptr
TAO::Objref_Traits<ArrayTest>::nil (void)
{
  return ArrayTest::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<ArrayTest>::marshal (
    const ArrayTest_ptr p,
    TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:88

::LongArray_slice *
ArrayTest::longArrayOp (
  const ::LongArray p1,
  ::LongArray p2,
  ::LongArray_out p3)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }

  TAO::Arg_Traits< ::LongArray_tag>::ret_val _tao_retval;
  TAO::Arg_Traits< ::LongArray_tag>::in_arg_val _tao_p1 (p1);
  TAO::Arg_Traits< ::LongArray_tag>::inout_arg_val _tao_p2 (p2);
  TAO::Arg_Traits< ::LongArray_tag>::out_arg_val _tao_p3 (p3);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_p1,
      &_tao_p2,
      &_tao_p3
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      4,
      "longArrayOp",
      11,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY

    );

  _tao_call.invoke (0, 0);

  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:88

::StringArray_slice *
ArrayTest::stringArrayOp (
  const ::StringArray p1,
  ::StringArray p2,
  ::StringArray_out p3)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }

  TAO::Arg_Traits< ::StringArray_tag>::ret_val _tao_retval;
  TAO::Arg_Traits< ::StringArray_tag>::in_arg_val _tao_p1 (p1);
  TAO::Arg_Traits< ::StringArray_tag>::inout_arg_val _tao_p2 (p2);
  TAO::Arg_Traits< ::StringArray_tag>::out_arg_val _tao_p3 (p3);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_p1,
      &_tao_p2,
      &_tao_p3
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      4,
      "stringArrayOp",
      13,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY

    );

  _tao_call.invoke (0, 0);

  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:88

::ShortArray_slice *
ArrayTest::shortArrayOp (
  const ::ShortArray p1,
  ::ShortArray p2,
  ::ShortArray_out p3)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }

  TAO::Arg_Traits< ::ShortArray_tag>::ret_val _tao_retval;
  TAO::Arg_Traits< ::ShortArray_tag>::in_arg_val _tao_p1 (p1);
  TAO::Arg_Traits< ::ShortArray_tag>::inout_arg_val _tao_p2 (p2);
  TAO::Arg_Traits< ::ShortArray_tag>::out_arg_val _tao_p3 (p3);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_p1,
      &_tao_p2,
      &_tao_p3
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      4,
      "shortArrayOp",
      12,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY

    );

  _tao_call.invoke (0, 0);

  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:88

::UShortArray_slice *
ArrayTest::ushortArrayOp (
  const ::UShortArray p1,
  ::UShortArray p2,
  ::UShortArray_out p3)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }

  TAO::Arg_Traits< ::UShortArray_tag>::ret_val _tao_retval;
  TAO::Arg_Traits< ::UShortArray_tag>::in_arg_val _tao_p1 (p1);
  TAO::Arg_Traits< ::UShortArray_tag>::inout_arg_val _tao_p2 (p2);
  TAO::Arg_Traits< ::UShortArray_tag>::out_arg_val _tao_p3 (p3);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_p1,
      &_tao_p2,
      &_tao_p3
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      4,
      "ushortArrayOp",
      13,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY

    );

  _tao_call.invoke (0, 0);

  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:88

::CharArray_slice *
ArrayTest::charArrayOp (
  const ::CharArray p1,
  ::CharArray p2,
  ::CharArray_out p3)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }

  TAO::Arg_Traits< ::tmp1CharArray_tag>::ret_val _tao_retval;
  TAO::Arg_Traits< ::tmp1CharArray_tag>::in_arg_val _tao_p1 (p1);
  TAO::Arg_Traits< ::tmp1CharArray_tag>::inout_arg_val _tao_p2 (p2);
  TAO::Arg_Traits< ::tmp1CharArray_tag>::out_arg_val _tao_p3 (p3);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_p1,
      &_tao_p2,
      &_tao_p3
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      4,
      "charArrayOp",
      11,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY

    );

  _tao_call.invoke (0, 0);

  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:88

::OctetArray_slice *
ArrayTest::octetArrayOp (
  const ::OctetArray p1,
  ::OctetArray p2,
  ::OctetArray_out p3)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }

  TAO::Arg_Traits< ::OctetArray_tag>::ret_val _tao_retval;
  TAO::Arg_Traits< ::OctetArray_tag>::in_arg_val _tao_p1 (p1);
  TAO::Arg_Traits< ::OctetArray_tag>::inout_arg_val _tao_p2 (p2);
  TAO::Arg_Traits< ::OctetArray_tag>::out_arg_val _tao_p3 (p3);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_p1,
      &_tao_p2,
      &_tao_p3
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      4,
      "octetArrayOp",
      12,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY

    );

  _tao_call.invoke (0, 0);

  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:88

::DoubleArray_slice *
ArrayTest::doubleArrayOp (
  const ::DoubleArray p1,
  ::DoubleArray p2,
  ::DoubleArray_out p3)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }

  TAO::Arg_Traits< ::DoubleArray_tag>::ret_val _tao_retval;
  TAO::Arg_Traits< ::DoubleArray_tag>::in_arg_val _tao_p1 (p1);
  TAO::Arg_Traits< ::DoubleArray_tag>::inout_arg_val _tao_p2 (p2);
  TAO::Arg_Traits< ::DoubleArray_tag>::out_arg_val _tao_p3 (p3);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_p1,
      &_tao_p2,
      &_tao_p3
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      4,
      "doubleArrayOp",
      13,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY

    );

  _tao_call.invoke (0, 0);

  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:88

::LongArray_slice *
ArrayTest::a_longArray (
  void)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }

  TAO::Arg_Traits< ::LongArray_tag>::ret_val _tao_retval;

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      1,
      "_get_a_longArray",
      16,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY,
      TAO::TAO_TWOWAY_INVOCATION
      ,
      TAO::TAO_SYNCHRONOUS_INVOCATION,
      false
    );

  _tao_call.invoke (0, 0);

  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:88

void
ArrayTest::a_longArray (
  const ::LongArray a_longArray)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }

  TAO::Arg_Traits< void>::ret_val _tao_retval;
  TAO::Arg_Traits< ::LongArray_tag>::in_arg_val _tao_a_longArray (a_longArray);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_a_longArray
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      2,
      "_set_a_longArray",
      16,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY

    );

  _tao_call.invoke (0, 0);
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:88

::ULongArray_slice *
ArrayTest::a_ulongArray (
  void)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }

  TAO::Arg_Traits< ::ULongArray_tag>::ret_val _tao_retval;

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      1,
      "_get_a_ulongArray",
      17,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY,
      TAO::TAO_TWOWAY_INVOCATION
      ,
      TAO::TAO_SYNCHRONOUS_INVOCATION,
      false
    );

  _tao_call.invoke (0, 0);

  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:88

void
ArrayTest::a_ulongArray (
  const ::ULongArray a_ulongArray)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }

  TAO::Arg_Traits< void>::ret_val _tao_retval;
  TAO::Arg_Traits< ::ULongArray_tag>::in_arg_val _tao_a_ulongArray (a_ulongArray);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_a_ulongArray
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      2,
      "_set_a_ulongArray",
      17,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY

    );

  _tao_call.invoke (0, 0);
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:88

::StringArray_slice *
ArrayTest::a_stringArray (
  void)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }

  TAO::Arg_Traits< ::StringArray_tag>::ret_val _tao_retval;

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      1,
      "_get_a_stringArray",
      18,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY,
      TAO::TAO_TWOWAY_INVOCATION
      ,
      TAO::TAO_SYNCHRONOUS_INVOCATION,
      false
    );

  _tao_call.invoke (0, 0);

  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:88

void
ArrayTest::a_stringArray (
  const ::StringArray a_stringArray)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }

  TAO::Arg_Traits< void>::ret_val _tao_retval;
  TAO::Arg_Traits< ::StringArray_tag>::in_arg_val _tao_a_stringArray (a_stringArray);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_a_stringArray
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      2,
      "_set_a_stringArray",
      18,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY

    );

  _tao_call.invoke (0, 0);
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:88

::ShortArray_slice *
ArrayTest::a_shortArray (
  void)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }

  TAO::Arg_Traits< ::ShortArray_tag>::ret_val _tao_retval;

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      1,
      "_get_a_shortArray",
      17,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY,
      TAO::TAO_TWOWAY_INVOCATION
      ,
      TAO::TAO_SYNCHRONOUS_INVOCATION,
      false
    );

  _tao_call.invoke (0, 0);

  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:88

void
ArrayTest::a_shortArray (
  const ::ShortArray a_shortArray)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }

  TAO::Arg_Traits< void>::ret_val _tao_retval;
  TAO::Arg_Traits< ::ShortArray_tag>::in_arg_val _tao_a_shortArray (a_shortArray);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_a_shortArray
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      2,
      "_set_a_shortArray",
      17,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY

    );

  _tao_call.invoke (0, 0);
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:88

::UShortArray_slice *
ArrayTest::a_ushortArray (
  void)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }

  TAO::Arg_Traits< ::UShortArray_tag>::ret_val _tao_retval;

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      1,
      "_get_a_ushortArray",
      18,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY,
      TAO::TAO_TWOWAY_INVOCATION
      ,
      TAO::TAO_SYNCHRONOUS_INVOCATION,
      false
    );

  _tao_call.invoke (0, 0);

  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:88

void
ArrayTest::a_ushortArray (
  const ::UShortArray a_ushortArray)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }

  TAO::Arg_Traits< void>::ret_val _tao_retval;
  TAO::Arg_Traits< ::UShortArray_tag>::in_arg_val _tao_a_ushortArray (a_ushortArray);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_a_ushortArray
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      2,
      "_set_a_ushortArray",
      18,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY

    );

  _tao_call.invoke (0, 0);
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:88

::CORBA::Char
ArrayTest::a_char (
  void)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }

  TAO::Arg_Traits< ::ACE_InputCDR::to_char>::ret_val _tao_retval;

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      1,
      "_get_a_char",
      11,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY,
      TAO::TAO_TWOWAY_INVOCATION
      ,
      TAO::TAO_SYNCHRONOUS_INVOCATION,
      false
    );

  _tao_call.invoke (0, 0);

  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:88

void
ArrayTest::a_char (
  ::CORBA::Char a_char)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }

  TAO::Arg_Traits< void>::ret_val _tao_retval;
  TAO::Arg_Traits< ::ACE_InputCDR::to_char>::in_arg_val _tao_a_char (a_char);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_a_char
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      2,
      "_set_a_char",
      11,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY

    );

  _tao_call.invoke (0, 0);
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:88

::CharArray_slice *
ArrayTest::a_charArray (
  void)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }

  TAO::Arg_Traits< ::tmp1CharArray_tag>::ret_val _tao_retval;

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      1,
      "_get_a_charArray",
      16,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY,
      TAO::TAO_TWOWAY_INVOCATION
      ,
      TAO::TAO_SYNCHRONOUS_INVOCATION,
      false
    );

  _tao_call.invoke (0, 0);

  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:88

void
ArrayTest::a_charArray (
  const ::CharArray a_charArray)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }

  TAO::Arg_Traits< void>::ret_val _tao_retval;
  TAO::Arg_Traits< ::tmp1CharArray_tag>::in_arg_val _tao_a_charArray (a_charArray);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_a_charArray
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      2,
      "_set_a_charArray",
      16,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY

    );

  _tao_call.invoke (0, 0);
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:88

::OctetArray_slice *
ArrayTest::a_octetArray (
  void)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }

  TAO::Arg_Traits< ::OctetArray_tag>::ret_val _tao_retval;

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      1,
      "_get_a_octetArray",
      17,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY,
      TAO::TAO_TWOWAY_INVOCATION
      ,
      TAO::TAO_SYNCHRONOUS_INVOCATION,
      false
    );

  _tao_call.invoke (0, 0);

  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:88

void
ArrayTest::a_octetArray (
  const ::OctetArray a_octetArray)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }

  TAO::Arg_Traits< void>::ret_val _tao_retval;
  TAO::Arg_Traits< ::OctetArray_tag>::in_arg_val _tao_a_octetArray (a_octetArray);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_a_octetArray
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      2,
      "_set_a_octetArray",
      17,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY

    );

  _tao_call.invoke (0, 0);
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:88

::DoubleArray_slice *
ArrayTest::a_doubleArray (
  void)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }

  TAO::Arg_Traits< ::DoubleArray_tag>::ret_val _tao_retval;

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      1,
      "_get_a_doubleArray",
      18,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY,
      TAO::TAO_TWOWAY_INVOCATION
      ,
      TAO::TAO_SYNCHRONOUS_INVOCATION,
      false
    );

  _tao_call.invoke (0, 0);

  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:88

void
ArrayTest::a_doubleArray (
  const ::DoubleArray a_doubleArray)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }

  TAO::Arg_Traits< void>::ret_val _tao_retval;
  TAO::Arg_Traits< ::DoubleArray_tag>::in_arg_val _tao_a_doubleArray (a_doubleArray);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_a_doubleArray
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      2,
      "_set_a_doubleArray",
      18,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY

    );

  _tao_call.invoke (0, 0);
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:88

::FloatArray_slice *
ArrayTest::a_floatArray (
  void)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }

  TAO::Arg_Traits< ::FloatArray_tag>::ret_val _tao_retval;

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      1,
      "_get_a_floatArray",
      17,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY,
      TAO::TAO_TWOWAY_INVOCATION
      ,
      TAO::TAO_SYNCHRONOUS_INVOCATION,
      false
    );

  _tao_call.invoke (0, 0);

  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:88

void
ArrayTest::a_floatArray (
  const ::FloatArray a_floatArray)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }

  TAO::Arg_Traits< void>::ret_val _tao_retval;
  TAO::Arg_Traits< ::FloatArray_tag>::in_arg_val _tao_a_floatArray (a_floatArray);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_a_floatArray
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      2,
      "_set_a_floatArray",
      17,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY

    );

  _tao_call.invoke (0, 0);
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:88

::BucketArray_slice *
ArrayTest::a_bucketArray (
  void)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }

  TAO::Arg_Traits< ::BucketArray_tag>::ret_val _tao_retval;

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      1,
      "_get_a_bucketArray",
      18,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY,
      TAO::TAO_TWOWAY_INVOCATION
      ,
      TAO::TAO_SYNCHRONOUS_INVOCATION,
      false
    );

  _tao_call.invoke (0, 0);

  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:88

void
ArrayTest::a_bucketArray (
  const ::BucketArray a_bucketArray)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }

  TAO::Arg_Traits< void>::ret_val _tao_retval;
  TAO::Arg_Traits< ::BucketArray_tag>::in_arg_val _tao_a_bucketArray (a_bucketArray);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_a_bucketArray
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      2,
      "_set_a_bucketArray",
      18,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY

    );

  _tao_call.invoke (0, 0);
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:88

::AccountArray_slice *
ArrayTest::a_accountArray (
  void)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }

  TAO::Arg_Traits< ::AccountArray_tag>::ret_val _tao_retval;

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      1,
      "_get_a_accountArray",
      19,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY,
      TAO::TAO_TWOWAY_INVOCATION
      ,
      TAO::TAO_SYNCHRONOUS_INVOCATION,
      false
    );

  _tao_call.invoke (0, 0);

  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:88

void
ArrayTest::a_accountArray (
  const ::AccountArray a_accountArray)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }

  TAO::Arg_Traits< void>::ret_val _tao_retval;
  TAO::Arg_Traits< ::AccountArray_tag>::in_arg_val _tao_a_accountArray (a_accountArray);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_a_accountArray
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      2,
      "_set_a_accountArray",
      19,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY

    );

  _tao_call.invoke (0, 0);
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:88

::BooleanArray_slice *
ArrayTest::a_booleanArray (
  void)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }

  TAO::Arg_Traits< ::BooleanArray_tag>::ret_val _tao_retval;

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      1,
      "_get_a_booleanArray",
      19,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY,
      TAO::TAO_TWOWAY_INVOCATION
      ,
      TAO::TAO_SYNCHRONOUS_INVOCATION,
      false
    );

  _tao_call.invoke (0, 0);

  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:88

void
ArrayTest::a_booleanArray (
  const ::BooleanArray a_booleanArray)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }

  TAO::Arg_Traits< void>::ret_val _tao_retval;
  TAO::Arg_Traits< ::BooleanArray_tag>::in_arg_val _tao_a_booleanArray (a_booleanArray);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_a_booleanArray
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      2,
      "_set_a_booleanArray",
      19,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY

    );

  _tao_call.invoke (0, 0);
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:88

::LongArrayArray_slice *
ArrayTest::a_longArrayArray (
  void)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }

  TAO::Arg_Traits< ::LongArrayArray_tag>::ret_val _tao_retval;

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      1,
      "_get_a_longArrayArray",
      21,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY,
      TAO::TAO_TWOWAY_INVOCATION
      ,
      TAO::TAO_SYNCHRONOUS_INVOCATION,
      false
    );

  _tao_call.invoke (0, 0);

  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:88

void
ArrayTest::a_longArrayArray (
  const ::LongArrayArray a_longArrayArray)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }

  TAO::Arg_Traits< void>::ret_val _tao_retval;
  TAO::Arg_Traits< ::LongArrayArray_tag>::in_arg_val _tao_a_longArrayArray (a_longArrayArray);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_a_longArrayArray
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      2,
      "_set_a_longArrayArray",
      21,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY

    );

  _tao_call.invoke (0, 0);
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:88

::MyEnumArray_slice *
ArrayTest::a_myEnumArray (
  void)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }

  TAO::Arg_Traits< ::MyEnumArray_tag>::ret_val _tao_retval;

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      1,
      "_get_a_myEnumArray",
      18,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY,
      TAO::TAO_TWOWAY_INVOCATION
      ,
      TAO::TAO_SYNCHRONOUS_INVOCATION,
      false
    );

  _tao_call.invoke (0, 0);

  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:88

void
ArrayTest::a_myEnumArray (
  const ::MyEnumArray a_myEnumArray)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }

  TAO::Arg_Traits< void>::ret_val _tao_retval;
  TAO::Arg_Traits< ::MyEnumArray_tag>::in_arg_val _tao_a_myEnumArray (a_myEnumArray);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_a_myEnumArray
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      2,
      "_set_a_myEnumArray",
      18,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY

    );

  _tao_call.invoke (0, 0);
}

ArrayTest::ArrayTest (void)
{
}

ArrayTest::~ArrayTest (void)
{
}

ArrayTest_ptr
ArrayTest::_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return
    TAO::Narrow_Utils<ArrayTest>::narrow (
        _tao_objref,
        "IDL:ArrayTest:1.0");
}

ArrayTest_ptr
ArrayTest::_unchecked_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return
    TAO::Narrow_Utils<ArrayTest>::unchecked_narrow (
        _tao_objref);
}

ArrayTest_ptr
ArrayTest::_nil (void)
{
  return 0;
}

ArrayTest_ptr
ArrayTest::_duplicate (ArrayTest_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  return obj;
}

void
ArrayTest::_tao_release (ArrayTest_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
ArrayTest::_is_a (const char *value)
{
  if (
      ACE_OS::strcmp (
          value,
          "IDL:ArrayTest:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        ) == 0
    )
    {
      return true; // success using local knowledge
    }
  else
    {
      return this->::CORBA::Object::_is_a (value);
    }
}

const char* ArrayTest::_interface_repository_id (void) const
{
  return "IDL:ArrayTest:1.0";
}

::CORBA::Boolean
ArrayTest::marshal (TAO_OutputCDR &cdr)
{
  return (cdr << this);
}

// TAO_IDL - Generated from
// be/be_visitor_interface/interface_cs.cpp:48

// Traits specializations for ServerAdmin.

ServerAdmin_ptr
TAO::Objref_Traits<ServerAdmin>::duplicate (
    ServerAdmin_ptr p)
{
  return ServerAdmin::_duplicate (p);
}

void
TAO::Objref_Traits<ServerAdmin>::release (
    ServerAdmin_ptr p)
{
  ::CORBA::release (p);
}

ServerAdmin_ptr
TAO::Objref_Traits<ServerAdmin>::nil (void)
{
  return ServerAdmin::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<ServerAdmin>::marshal (
    const ServerAdmin_ptr p,
    TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:88

::ArrayTest_ptr
ServerAdmin::target (
  void)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }

  TAO::Arg_Traits< ::ArrayTest>::ret_val _tao_retval;

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      1,
      "target",
      6,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY,
      TAO::TAO_TWOWAY_INVOCATION
      ,
      TAO::TAO_SYNCHRONOUS_INVOCATION,
      false
    );

  _tao_call.invoke (0, 0);

  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:88

void
ServerAdmin::shutdown (
  void)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }

  TAO::Arg_Traits< void>::ret_val _tao_retval;

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      1,
      "shutdown",
      8,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY,
      TAO::TAO_ONEWAY_INVOCATION,
      TAO::TAO_SYNCHRONOUS_INVOCATION,
      false
    );

  _tao_call.invoke (0, 0);
}

ServerAdmin::ServerAdmin (void)
{
}

ServerAdmin::~ServerAdmin (void)
{
}

ServerAdmin_ptr
ServerAdmin::_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return
    TAO::Narrow_Utils<ServerAdmin>::narrow (
        _tao_objref,
        "IDL:ServerAdmin:1.0");
}

ServerAdmin_ptr
ServerAdmin::_unchecked_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return
    TAO::Narrow_Utils<ServerAdmin>::unchecked_narrow (
        _tao_objref);
}

ServerAdmin_ptr
ServerAdmin::_nil (void)
{
  return 0;
}

ServerAdmin_ptr
ServerAdmin::_duplicate (ServerAdmin_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  return obj;
}

void
ServerAdmin::_tao_release (ServerAdmin_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
ServerAdmin::_is_a (const char *value)
{
  if (
      ACE_OS::strcmp (
          value,
          "IDL:ServerAdmin:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        ) == 0
    )
    {
      return true; // success using local knowledge
    }
  else
    {
      return this->::CORBA::Object::_is_a (value);
    }
}

const char* ServerAdmin::_interface_repository_id (void) const
{
  return "IDL:ServerAdmin:1.0";
}

::CORBA::Boolean
ServerAdmin::marshal (TAO_OutputCDR &cdr)
{
  return (cdr << this);
}

// TAO_IDL - Generated from
// be/be_visitor_enum/cdr_op_cs.cpp:34


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (TAO_OutputCDR &strm, enum1 _tao_enumerator)
{
  return strm << static_cast< ::CORBA::ULong> (_tao_enumerator);
}

::CORBA::Boolean operator>> (TAO_InputCDR &strm, enum1 & _tao_enumerator)
{
  ::CORBA::ULong _tao_temp = 0;
  ::CORBA::Boolean const _tao_success = strm >> _tao_temp;

  if (_tao_success)
    {
      _tao_enumerator = static_cast<enum1> (_tao_temp);
    }

  return _tao_success;
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_array/cdr_op_cs.cpp:163


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const tmp1CharArray_forany &_tao_array)
{
  return
    strm.write_char_array (
        reinterpret_cast <const ACE_CDR::Char *> (_tao_array.in ()),
        10);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    tmp1CharArray_forany &_tao_array)
{
  return
    strm.read_char_array (
        reinterpret_cast <ACE_CDR::Char *> (_tao_array.out ()),
        10);
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_array/cdr_op_cs.cpp:163


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const OctetArray_forany &_tao_array)
{
  return
    strm.write_octet_array (
        reinterpret_cast <const ACE_CDR::Octet *> (_tao_array.in ()),
        10);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    OctetArray_forany &_tao_array)
{
  return
    strm.read_octet_array (
        reinterpret_cast <ACE_CDR::Octet *> (_tao_array.out ()),
        10);
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_array/cdr_op_cs.cpp:163


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const ShortArray_forany &_tao_array)
{
  return
    strm.write_short_array (
        reinterpret_cast <const ACE_CDR::Short *> (_tao_array.in ()),
        10);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    ShortArray_forany &_tao_array)
{
  return
    strm.read_short_array (
        reinterpret_cast <ACE_CDR::Short *> (_tao_array.out ()),
        10);
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_array/cdr_op_cs.cpp:163


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const LongArray_forany &_tao_array)
{
  return
    strm.write_long_array (
        reinterpret_cast <const ACE_CDR::Long *> (_tao_array.in ()),
        10);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    LongArray_forany &_tao_array)
{
  return
    strm.read_long_array (
        reinterpret_cast <ACE_CDR::Long *> (_tao_array.out ()),
        10);
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_array/cdr_op_cs.cpp:163


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const LongLongArray_forany &_tao_array)
{
  return
    strm.write_longlong_array (
        reinterpret_cast <const ACE_CDR::LongLong *> (_tao_array.in ()),
        10);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    LongLongArray_forany &_tao_array)
{
  return
    strm.read_longlong_array (
        reinterpret_cast <ACE_CDR::LongLong *> (_tao_array.out ()),
        10);
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_array/cdr_op_cs.cpp:163


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const UShortArray_forany &_tao_array)
{
  return
    strm.write_ushort_array (
        reinterpret_cast <const ACE_CDR::UShort *> (_tao_array.in ()),
        10);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    UShortArray_forany &_tao_array)
{
  return
    strm.read_ushort_array (
        reinterpret_cast <ACE_CDR::UShort *> (_tao_array.out ()),
        10);
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_array/cdr_op_cs.cpp:163


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const ULongArray_forany &_tao_array)
{
  return
    strm.write_ulong_array (
        reinterpret_cast <const ACE_CDR::ULong *> (_tao_array.in ()),
        10);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    ULongArray_forany &_tao_array)
{
  return
    strm.read_ulong_array (
        reinterpret_cast <ACE_CDR::ULong *> (_tao_array.out ()),
        10);
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_array/cdr_op_cs.cpp:163


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const ULongLongArray_forany &_tao_array)
{
  return
    strm.write_ulonglong_array (
        reinterpret_cast <const ACE_CDR::ULongLong *> (_tao_array.in ()),
        10);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    ULongLongArray_forany &_tao_array)
{
  return
    strm.read_ulonglong_array (
        reinterpret_cast <ACE_CDR::ULongLong *> (_tao_array.out ()),
        10);
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_array/cdr_op_cs.cpp:163


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const FloatArray_forany &_tao_array)
{
  return
    strm.write_float_array (
        reinterpret_cast <const ACE_CDR::Float *> (_tao_array.in ()),
        10);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    FloatArray_forany &_tao_array)
{
  return
    strm.read_float_array (
        reinterpret_cast <ACE_CDR::Float *> (_tao_array.out ()),
        10);
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_array/cdr_op_cs.cpp:163


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const DoubleArray_forany &_tao_array)
{
  return
    strm.write_double_array (
        reinterpret_cast <const ACE_CDR::Double *> (_tao_array.in ()),
        10);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    DoubleArray_forany &_tao_array)
{
  return
    strm.read_double_array (
        reinterpret_cast <ACE_CDR::Double *> (_tao_array.out ()),
        10);
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_array/cdr_op_cs.cpp:163


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const StringArray_forany &_tao_array)
{
  CORBA::Boolean _tao_marshal_flag = true;

  for ( ::CORBA::ULong i0 = 0; i0 < 10 && _tao_marshal_flag; ++i0)
    {
      _tao_marshal_flag = (strm << _tao_array [i0].in ());
    }

  return _tao_marshal_flag;
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    StringArray_forany &_tao_array)
{
  CORBA::Boolean _tao_marshal_flag = true;

  for ( ::CORBA::ULong i0 = 0; i0 < 10 && _tao_marshal_flag; ++i0)
    {
      _tao_marshal_flag = (strm >> _tao_array [i0].out ());
    }

  return _tao_marshal_flag;
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_array/cdr_op_cs.cpp:163


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const BooleanArray_forany &_tao_array)
{
  return
    strm.write_boolean_array (
        reinterpret_cast <const ACE_CDR::Boolean *> (_tao_array.in ()),
        10);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    BooleanArray_forany &_tao_array)
{
  return
    strm.read_boolean_array (
        reinterpret_cast <ACE_CDR::Boolean *> (_tao_array.out ()),
        10);
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_array/cdr_op_cs.cpp:163


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const MyEnumArray_forany &_tao_array)
{
  CORBA::Boolean _tao_marshal_flag = true;

  for ( ::CORBA::ULong i0 = 0; i0 < 10 && _tao_marshal_flag; ++i0)
    {
      _tao_marshal_flag = (strm << _tao_array [i0]);
    }

  return _tao_marshal_flag;
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    MyEnumArray_forany &_tao_array)
{
  CORBA::Boolean _tao_marshal_flag = true;

  for ( ::CORBA::ULong i0 = 0; i0 < 10 && _tao_marshal_flag; ++i0)
    {
      _tao_marshal_flag = (strm >> _tao_array [i0]);
    }

  return _tao_marshal_flag;
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_array/cdr_op_cs.cpp:163


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const LongArrayArray_forany &_tao_array)
{
  return
    strm.write_long_array (
        reinterpret_cast <const ACE_CDR::Long *> (_tao_array.in ()),
        10*10);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    LongArrayArray_forany &_tao_array)
{
  return
    strm.read_long_array (
        reinterpret_cast <ACE_CDR::Long *> (_tao_array.out ()),
        10*10);
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_interface/cdr_op_cs.cpp:51

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const moola::Account_ptr _tao_objref)
{
  ::CORBA::Object_ptr _tao_corba_obj = _tao_objref;
  return (strm << _tao_corba_obj);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    moola::Account_ptr &_tao_objref)
{
  ::CORBA::Object_var obj;

  if (!(strm >> obj.inout ()))
    {
      return false;
    }

  typedef ::moola::Account RHS_SCOPED_NAME;

  // Narrow to the right type.
  _tao_objref =
    TAO::Narrow_Utils<RHS_SCOPED_NAME>::unchecked_narrow (obj.in ());

  return true;
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_structure/cdr_op_cs.cpp:49

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Bucket &_tao_aggregate)
{
  FloatArray_forany _tao_aggregate_a_floatArray
      #if defined __IBMCPP__ && __IBMCPP__ <= 800
      ((FloatArray_slice*) (
      #else
      (const_cast<
          FloatArray_slice*> (
      #endif
          _tao_aggregate.a_floatArray
        )
    );
  return
    (strm << _tao_aggregate.a_long) &&
    (strm << _tao_aggregate.a_string.in ()) &&
    (strm << _tao_aggregate_a_floatArray) &&
    (strm << _tao_aggregate.a_enum);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Bucket &_tao_aggregate)
{
  FloatArray_forany _tao_aggregate_a_floatArray
      #if defined __IBMCPP__ && __IBMCPP__ <= 800
      ((FloatArray_slice*) (
      #else
      (const_cast<
          FloatArray_slice*> (
      #endif
          _tao_aggregate.a_floatArray
        )
    );
  return
    (strm >> _tao_aggregate.a_long) &&
    (strm >> _tao_aggregate.a_string.out ()) &&
    (strm >> _tao_aggregate_a_floatArray) &&
    (strm >> _tao_aggregate.a_enum);
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_array/cdr_op_cs.cpp:163


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const BucketArray_forany &_tao_array)
{
  CORBA::Boolean _tao_marshal_flag = true;

  for ( ::CORBA::ULong i0 = 0; i0 < 10 && _tao_marshal_flag; ++i0)
    {
      _tao_marshal_flag = (strm << _tao_array [i0]);
    }

  return _tao_marshal_flag;
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    BucketArray_forany &_tao_array)
{
  CORBA::Boolean _tao_marshal_flag = true;

  for ( ::CORBA::ULong i0 = 0; i0 < 10 && _tao_marshal_flag; ++i0)
    {
      _tao_marshal_flag = (strm >> _tao_array [i0]);
    }

  return _tao_marshal_flag;
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_array/cdr_op_cs.cpp:163


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const BucketArrayArray_forany &_tao_array)
{
  CORBA::Boolean _tao_marshal_flag = true;

  for ( ::CORBA::ULong i0 = 0; i0 < 10 && _tao_marshal_flag; ++i0)
    {
      for ( ::CORBA::ULong i1 = 0; i1 < 10 && _tao_marshal_flag; ++i1)
        {
          _tao_marshal_flag = (strm << _tao_array [i0][i1]);
        }
    }

  return _tao_marshal_flag;
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    BucketArrayArray_forany &_tao_array)
{
  CORBA::Boolean _tao_marshal_flag = true;

  for ( ::CORBA::ULong i0 = 0; i0 < 10 && _tao_marshal_flag; ++i0)
    {
      for ( ::CORBA::ULong i1 = 0; i1 < 10 && _tao_marshal_flag; ++i1)
        {
          _tao_marshal_flag = (strm >> _tao_array [i0][i1]);
        }
    }

  return _tao_marshal_flag;
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_array/cdr_op_cs.cpp:163


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const AccountArray_forany &_tao_array)
{
  CORBA::Boolean _tao_marshal_flag = true;

  for ( ::CORBA::ULong i0 = 0; i0 < 10 && _tao_marshal_flag; ++i0)
    {
      _tao_marshal_flag =
        TAO::Objref_Traits<moola::Account>::marshal (_tao_array[i0].in (), strm);
    }

  return _tao_marshal_flag;
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    AccountArray_forany &_tao_array)
{
  CORBA::Boolean _tao_marshal_flag = true;

  for ( ::CORBA::ULong i0 = 0; i0 < 10 && _tao_marshal_flag; ++i0)
    {
      _tao_marshal_flag = (strm >> _tao_array [i0]);
    }

  return _tao_marshal_flag;
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_structure/cdr_op_cs.cpp:49

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const SimpleStruct &_tao_aggregate)
{
  return
    (strm << _tao_aggregate.simpleShort) &&
    (strm << _tao_aggregate.simpleLong);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    SimpleStruct &_tao_aggregate)
{
  return
    (strm >> _tao_aggregate.simpleShort) &&
    (strm >> _tao_aggregate.simpleLong);
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_interface/cdr_op_cs.cpp:51

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const ArrayTest_ptr _tao_objref)
{
  ::CORBA::Object_ptr _tao_corba_obj = _tao_objref;
  return (strm << _tao_corba_obj);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    ArrayTest_ptr &_tao_objref)
{
  ::CORBA::Object_var obj;

  if (!(strm >> obj.inout ()))
    {
      return false;
    }

  typedef ::ArrayTest RHS_SCOPED_NAME;

  // Narrow to the right type.
  _tao_objref =
    TAO::Narrow_Utils<RHS_SCOPED_NAME>::unchecked_narrow (obj.in ());

  return true;
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_interface/cdr_op_cs.cpp:51

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const ServerAdmin_ptr _tao_objref)
{
  ::CORBA::Object_ptr _tao_corba_obj = _tao_objref;
  return (strm << _tao_corba_obj);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    ServerAdmin_ptr &_tao_objref)
{
  ::CORBA::Object_var obj;

  if (!(strm >> obj.inout ()))
    {
      return false;
    }

  typedef ::ServerAdmin RHS_SCOPED_NAME;

  // Narrow to the right type.
  _tao_objref =
    TAO::Narrow_Utils<RHS_SCOPED_NAME>::unchecked_narrow (obj.in ());

  return true;
}

TAO_END_VERSIONED_NAMESPACE_DECL



