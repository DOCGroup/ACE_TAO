// -*- C++ -*-
/**
 * Code generated by the The ACE ORB (TAO) IDL Compiler v2.4.1
 * TAO and the TAO IDL Compiler have been developed by:
 *       Center for Distributed Object Computing
 *       Washington University
 *       St. Louis, MO
 *       USA
 *       http://www.cs.wustl.edu/~schmidt/doc-center.html
 * and
 *       Distributed Object Computing Laboratory
 *       University of California at Irvine
 *       Irvine, CA
 *       USA
 * and
 *       Institute for Software Integrated Systems
 *       Vanderbilt University
 *       Nashville, TN
 *       USA
 *       http://www.isis.vanderbilt.edu/
 *
 * Information about TAO is available at:
 *     http://www.dre.vanderbilt.edu/~schmidt/TAO.html
 **/


// TAO_IDL - Generated from
// be/be_visitor_array/array_ci.cpp:147

TAO_BEGIN_VERSIONED_NAMESPACE_DECL


ACE_INLINE
void
TAO::Array_Traits<tmp1CharArray_forany>::free (
    tmp1CharArray_slice * _tao_slice)
{
  tmp1CharArray_free (_tao_slice);
}

ACE_INLINE
tmp1CharArray_slice *
TAO::Array_Traits<tmp1CharArray_forany>::dup (
    const tmp1CharArray_slice * _tao_slice)
{
  return tmp1CharArray_dup (_tao_slice);
}

ACE_INLINE
void
TAO::Array_Traits<tmp1CharArray_forany>::copy (
    tmp1CharArray_slice * _tao_to,
    const tmp1CharArray_slice * _tao_from)
{
  tmp1CharArray_copy (_tao_to, _tao_from);
}

ACE_INLINE
void
TAO::Array_Traits<tmp1CharArray_forany>::zero (
    tmp1CharArray_slice * _tao_slice)
{
  // Zero each individual element.
  for ( ::CORBA::ULong i0 = 0; i0 < 10; ++i0)
    {
      _tao_slice[i0] = ::CORBA::Char ();
    }
}

ACE_INLINE
tmp1CharArray_slice *
TAO::Array_Traits<tmp1CharArray_forany>::alloc (void)
{
  return tmp1CharArray_alloc ();
}


TAO_END_VERSIONED_NAMESPACE_DECL

ACE_INLINE
tmp2CharArray_slice *
tmp2CharArray_alloc (void)
{
  return tmp1CharArray_alloc ();
}

ACE_INLINE
tmp2CharArray_slice *
tmp2CharArray_dup (
    const tmp2CharArray_slice *_tao_src
  )
{
  return tmp1CharArray_dup (_tao_src);
}

ACE_INLINE
void
tmp2CharArray_copy (
    tmp2CharArray_slice *_tao_dest,
    const tmp2CharArray_slice *_tao_src
  )
{
  tmp1CharArray_copy (_tao_dest, _tao_src);
}

ACE_INLINE
void
tmp2CharArray_free (
    tmp2CharArray_slice *_tao_src
  )
{
  tmp1CharArray_free (_tao_src);
}


ACE_INLINE
CharArray_slice *
CharArray_alloc (void)
{
  return tmp2CharArray_alloc ();
}

ACE_INLINE
CharArray_slice *
CharArray_dup (
    const CharArray_slice *_tao_src
  )
{
  return tmp2CharArray_dup (_tao_src);
}

ACE_INLINE
void
CharArray_copy (
    CharArray_slice *_tao_dest,
    const CharArray_slice *_tao_src
  )
{
  tmp2CharArray_copy (_tao_dest, _tao_src);
}

ACE_INLINE
void
CharArray_free (
    CharArray_slice *_tao_src
  )
{
  tmp2CharArray_free (_tao_src);
}



// TAO_IDL - Generated from
// be/be_visitor_array/array_ci.cpp:147

TAO_BEGIN_VERSIONED_NAMESPACE_DECL


ACE_INLINE
void
TAO::Array_Traits<OctetArray_forany>::free (
    OctetArray_slice * _tao_slice)
{
  OctetArray_free (_tao_slice);
}

ACE_INLINE
OctetArray_slice *
TAO::Array_Traits<OctetArray_forany>::dup (
    const OctetArray_slice * _tao_slice)
{
  return OctetArray_dup (_tao_slice);
}

ACE_INLINE
void
TAO::Array_Traits<OctetArray_forany>::copy (
    OctetArray_slice * _tao_to,
    const OctetArray_slice * _tao_from)
{
  OctetArray_copy (_tao_to, _tao_from);
}

ACE_INLINE
void
TAO::Array_Traits<OctetArray_forany>::zero (
    OctetArray_slice * _tao_slice)
{
  // Zero each individual element.
  for ( ::CORBA::ULong i0 = 0; i0 < 10; ++i0)
    {
      _tao_slice[i0] = ::CORBA::Octet ();
    }
}

ACE_INLINE
OctetArray_slice *
TAO::Array_Traits<OctetArray_forany>::alloc (void)
{
  return OctetArray_alloc ();
}


TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// be/be_visitor_array/array_ci.cpp:147

TAO_BEGIN_VERSIONED_NAMESPACE_DECL


ACE_INLINE
void
TAO::Array_Traits<ShortArray_forany>::free (
    ShortArray_slice * _tao_slice)
{
  ShortArray_free (_tao_slice);
}

ACE_INLINE
ShortArray_slice *
TAO::Array_Traits<ShortArray_forany>::dup (
    const ShortArray_slice * _tao_slice)
{
  return ShortArray_dup (_tao_slice);
}

ACE_INLINE
void
TAO::Array_Traits<ShortArray_forany>::copy (
    ShortArray_slice * _tao_to,
    const ShortArray_slice * _tao_from)
{
  ShortArray_copy (_tao_to, _tao_from);
}

ACE_INLINE
void
TAO::Array_Traits<ShortArray_forany>::zero (
    ShortArray_slice * _tao_slice)
{
  // Zero each individual element.
  for ( ::CORBA::ULong i0 = 0; i0 < 10; ++i0)
    {
      _tao_slice[i0] = ::CORBA::Short ();
    }
}

ACE_INLINE
ShortArray_slice *
TAO::Array_Traits<ShortArray_forany>::alloc (void)
{
  return ShortArray_alloc ();
}


TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// be/be_visitor_array/array_ci.cpp:147

TAO_BEGIN_VERSIONED_NAMESPACE_DECL


ACE_INLINE
void
TAO::Array_Traits<LongArray_forany>::free (
    LongArray_slice * _tao_slice)
{
  LongArray_free (_tao_slice);
}

ACE_INLINE
LongArray_slice *
TAO::Array_Traits<LongArray_forany>::dup (
    const LongArray_slice * _tao_slice)
{
  return LongArray_dup (_tao_slice);
}

ACE_INLINE
void
TAO::Array_Traits<LongArray_forany>::copy (
    LongArray_slice * _tao_to,
    const LongArray_slice * _tao_from)
{
  LongArray_copy (_tao_to, _tao_from);
}

ACE_INLINE
void
TAO::Array_Traits<LongArray_forany>::zero (
    LongArray_slice * _tao_slice)
{
  // Zero each individual element.
  for ( ::CORBA::ULong i0 = 0; i0 < 10; ++i0)
    {
      _tao_slice[i0] = ::CORBA::Long ();
    }
}

ACE_INLINE
LongArray_slice *
TAO::Array_Traits<LongArray_forany>::alloc (void)
{
  return LongArray_alloc ();
}


TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// be/be_visitor_array/array_ci.cpp:147

TAO_BEGIN_VERSIONED_NAMESPACE_DECL


ACE_INLINE
void
TAO::Array_Traits<LongLongArray_forany>::free (
    LongLongArray_slice * _tao_slice)
{
  LongLongArray_free (_tao_slice);
}

ACE_INLINE
LongLongArray_slice *
TAO::Array_Traits<LongLongArray_forany>::dup (
    const LongLongArray_slice * _tao_slice)
{
  return LongLongArray_dup (_tao_slice);
}

ACE_INLINE
void
TAO::Array_Traits<LongLongArray_forany>::copy (
    LongLongArray_slice * _tao_to,
    const LongLongArray_slice * _tao_from)
{
  LongLongArray_copy (_tao_to, _tao_from);
}

ACE_INLINE
void
TAO::Array_Traits<LongLongArray_forany>::zero (
    LongLongArray_slice * _tao_slice)
{
  // Zero each individual element.
  for ( ::CORBA::ULong i0 = 0; i0 < 10; ++i0)
    {
      _tao_slice[i0] = ::CORBA::LongLong ();
    }
}

ACE_INLINE
LongLongArray_slice *
TAO::Array_Traits<LongLongArray_forany>::alloc (void)
{
  return LongLongArray_alloc ();
}


TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// be/be_visitor_array/array_ci.cpp:147

TAO_BEGIN_VERSIONED_NAMESPACE_DECL


ACE_INLINE
void
TAO::Array_Traits<UShortArray_forany>::free (
    UShortArray_slice * _tao_slice)
{
  UShortArray_free (_tao_slice);
}

ACE_INLINE
UShortArray_slice *
TAO::Array_Traits<UShortArray_forany>::dup (
    const UShortArray_slice * _tao_slice)
{
  return UShortArray_dup (_tao_slice);
}

ACE_INLINE
void
TAO::Array_Traits<UShortArray_forany>::copy (
    UShortArray_slice * _tao_to,
    const UShortArray_slice * _tao_from)
{
  UShortArray_copy (_tao_to, _tao_from);
}

ACE_INLINE
void
TAO::Array_Traits<UShortArray_forany>::zero (
    UShortArray_slice * _tao_slice)
{
  // Zero each individual element.
  for ( ::CORBA::ULong i0 = 0; i0 < 10; ++i0)
    {
      _tao_slice[i0] = ::CORBA::UShort ();
    }
}

ACE_INLINE
UShortArray_slice *
TAO::Array_Traits<UShortArray_forany>::alloc (void)
{
  return UShortArray_alloc ();
}


TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// be/be_visitor_array/array_ci.cpp:147

TAO_BEGIN_VERSIONED_NAMESPACE_DECL


ACE_INLINE
void
TAO::Array_Traits<ULongArray_forany>::free (
    ULongArray_slice * _tao_slice)
{
  ULongArray_free (_tao_slice);
}

ACE_INLINE
ULongArray_slice *
TAO::Array_Traits<ULongArray_forany>::dup (
    const ULongArray_slice * _tao_slice)
{
  return ULongArray_dup (_tao_slice);
}

ACE_INLINE
void
TAO::Array_Traits<ULongArray_forany>::copy (
    ULongArray_slice * _tao_to,
    const ULongArray_slice * _tao_from)
{
  ULongArray_copy (_tao_to, _tao_from);
}

ACE_INLINE
void
TAO::Array_Traits<ULongArray_forany>::zero (
    ULongArray_slice * _tao_slice)
{
  // Zero each individual element.
  for ( ::CORBA::ULong i0 = 0; i0 < 10; ++i0)
    {
      _tao_slice[i0] = ::CORBA::ULong ();
    }
}

ACE_INLINE
ULongArray_slice *
TAO::Array_Traits<ULongArray_forany>::alloc (void)
{
  return ULongArray_alloc ();
}


TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// be/be_visitor_array/array_ci.cpp:147

TAO_BEGIN_VERSIONED_NAMESPACE_DECL


ACE_INLINE
void
TAO::Array_Traits<ULongLongArray_forany>::free (
    ULongLongArray_slice * _tao_slice)
{
  ULongLongArray_free (_tao_slice);
}

ACE_INLINE
ULongLongArray_slice *
TAO::Array_Traits<ULongLongArray_forany>::dup (
    const ULongLongArray_slice * _tao_slice)
{
  return ULongLongArray_dup (_tao_slice);
}

ACE_INLINE
void
TAO::Array_Traits<ULongLongArray_forany>::copy (
    ULongLongArray_slice * _tao_to,
    const ULongLongArray_slice * _tao_from)
{
  ULongLongArray_copy (_tao_to, _tao_from);
}

ACE_INLINE
void
TAO::Array_Traits<ULongLongArray_forany>::zero (
    ULongLongArray_slice * _tao_slice)
{
  // Zero each individual element.
  for ( ::CORBA::ULong i0 = 0; i0 < 10; ++i0)
    {
      _tao_slice[i0] = ::CORBA::ULongLong ();
    }
}

ACE_INLINE
ULongLongArray_slice *
TAO::Array_Traits<ULongLongArray_forany>::alloc (void)
{
  return ULongLongArray_alloc ();
}


TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// be/be_visitor_array/array_ci.cpp:147

TAO_BEGIN_VERSIONED_NAMESPACE_DECL


ACE_INLINE
void
TAO::Array_Traits<FloatArray_forany>::free (
    FloatArray_slice * _tao_slice)
{
  FloatArray_free (_tao_slice);
}

ACE_INLINE
FloatArray_slice *
TAO::Array_Traits<FloatArray_forany>::dup (
    const FloatArray_slice * _tao_slice)
{
  return FloatArray_dup (_tao_slice);
}

ACE_INLINE
void
TAO::Array_Traits<FloatArray_forany>::copy (
    FloatArray_slice * _tao_to,
    const FloatArray_slice * _tao_from)
{
  FloatArray_copy (_tao_to, _tao_from);
}

ACE_INLINE
void
TAO::Array_Traits<FloatArray_forany>::zero (
    FloatArray_slice * _tao_slice)
{
  // Zero each individual element.
  for ( ::CORBA::ULong i0 = 0; i0 < 10; ++i0)
    {
      _tao_slice[i0] = ::CORBA::Float ();
    }
}

ACE_INLINE
FloatArray_slice *
TAO::Array_Traits<FloatArray_forany>::alloc (void)
{
  return FloatArray_alloc ();
}


TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// be/be_visitor_array/array_ci.cpp:147

TAO_BEGIN_VERSIONED_NAMESPACE_DECL


ACE_INLINE
void
TAO::Array_Traits<DoubleArray_forany>::free (
    DoubleArray_slice * _tao_slice)
{
  DoubleArray_free (_tao_slice);
}

ACE_INLINE
DoubleArray_slice *
TAO::Array_Traits<DoubleArray_forany>::dup (
    const DoubleArray_slice * _tao_slice)
{
  return DoubleArray_dup (_tao_slice);
}

ACE_INLINE
void
TAO::Array_Traits<DoubleArray_forany>::copy (
    DoubleArray_slice * _tao_to,
    const DoubleArray_slice * _tao_from)
{
  DoubleArray_copy (_tao_to, _tao_from);
}

ACE_INLINE
void
TAO::Array_Traits<DoubleArray_forany>::zero (
    DoubleArray_slice * _tao_slice)
{
  // Zero each individual element.
  for ( ::CORBA::ULong i0 = 0; i0 < 10; ++i0)
    {
      _tao_slice[i0] = ::CORBA::Double ();
    }
}

ACE_INLINE
DoubleArray_slice *
TAO::Array_Traits<DoubleArray_forany>::alloc (void)
{
  return DoubleArray_alloc ();
}


TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// be/be_visitor_array/array_ci.cpp:147

TAO_BEGIN_VERSIONED_NAMESPACE_DECL


ACE_INLINE
void
TAO::Array_Traits<StringArray_forany>::free (
    StringArray_slice * _tao_slice)
{
  StringArray_free (_tao_slice);
}

ACE_INLINE
StringArray_slice *
TAO::Array_Traits<StringArray_forany>::dup (
    const StringArray_slice * _tao_slice)
{
  return StringArray_dup (_tao_slice);
}

ACE_INLINE
void
TAO::Array_Traits<StringArray_forany>::copy (
    StringArray_slice * _tao_to,
    const StringArray_slice * _tao_from)
{
  StringArray_copy (_tao_to, _tao_from);
}

ACE_INLINE
void
TAO::Array_Traits<StringArray_forany>::zero (
    StringArray_slice * _tao_slice)
{
  // Zero each individual element.
  for ( ::CORBA::ULong i0 = 0; i0 < 10; ++i0)
    {
      _tao_slice[i0] = ::TAO::String_Manager ();
    }
}

ACE_INLINE
StringArray_slice *
TAO::Array_Traits<StringArray_forany>::alloc (void)
{
  return StringArray_alloc ();
}


TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// be/be_visitor_array/array_ci.cpp:147

TAO_BEGIN_VERSIONED_NAMESPACE_DECL


ACE_INLINE
void
TAO::Array_Traits<BooleanArray_forany>::free (
    BooleanArray_slice * _tao_slice)
{
  BooleanArray_free (_tao_slice);
}

ACE_INLINE
BooleanArray_slice *
TAO::Array_Traits<BooleanArray_forany>::dup (
    const BooleanArray_slice * _tao_slice)
{
  return BooleanArray_dup (_tao_slice);
}

ACE_INLINE
void
TAO::Array_Traits<BooleanArray_forany>::copy (
    BooleanArray_slice * _tao_to,
    const BooleanArray_slice * _tao_from)
{
  BooleanArray_copy (_tao_to, _tao_from);
}

ACE_INLINE
void
TAO::Array_Traits<BooleanArray_forany>::zero (
    BooleanArray_slice * _tao_slice)
{
  // Zero each individual element.
  for ( ::CORBA::ULong i0 = 0; i0 < 10; ++i0)
    {
      _tao_slice[i0] = ::CORBA::Boolean ();
    }
}

ACE_INLINE
BooleanArray_slice *
TAO::Array_Traits<BooleanArray_forany>::alloc (void)
{
  return BooleanArray_alloc ();
}


TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// be/be_visitor_array/array_ci.cpp:147

TAO_BEGIN_VERSIONED_NAMESPACE_DECL


ACE_INLINE
void
TAO::Array_Traits<MyEnumArray_forany>::free (
    MyEnumArray_slice * _tao_slice)
{
  MyEnumArray_free (_tao_slice);
}

ACE_INLINE
MyEnumArray_slice *
TAO::Array_Traits<MyEnumArray_forany>::dup (
    const MyEnumArray_slice * _tao_slice)
{
  return MyEnumArray_dup (_tao_slice);
}

ACE_INLINE
void
TAO::Array_Traits<MyEnumArray_forany>::copy (
    MyEnumArray_slice * _tao_to,
    const MyEnumArray_slice * _tao_from)
{
  MyEnumArray_copy (_tao_to, _tao_from);
}

ACE_INLINE
void
TAO::Array_Traits<MyEnumArray_forany>::zero (
    MyEnumArray_slice * _tao_slice)
{
  // Zero each individual element.
  for ( ::CORBA::ULong i0 = 0; i0 < 10; ++i0)
    {
      _tao_slice[i0] = MyEnum ();
    }
}

ACE_INLINE
MyEnumArray_slice *
TAO::Array_Traits<MyEnumArray_forany>::alloc (void)
{
  return MyEnumArray_alloc ();
}


TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// be/be_visitor_array/array_ci.cpp:147

TAO_BEGIN_VERSIONED_NAMESPACE_DECL


ACE_INLINE
void
TAO::Array_Traits<LongArrayArray_forany>::free (
    LongArrayArray_slice * _tao_slice)
{
  LongArrayArray_free (_tao_slice);
}

ACE_INLINE
LongArrayArray_slice *
TAO::Array_Traits<LongArrayArray_forany>::dup (
    const LongArrayArray_slice * _tao_slice)
{
  return LongArrayArray_dup (_tao_slice);
}

ACE_INLINE
void
TAO::Array_Traits<LongArrayArray_forany>::copy (
    LongArrayArray_slice * _tao_to,
    const LongArrayArray_slice * _tao_from)
{
  LongArrayArray_copy (_tao_to, _tao_from);
}

ACE_INLINE
void
TAO::Array_Traits<LongArrayArray_forany>::zero (
    LongArrayArray_slice * _tao_slice)
{
  // Zero each individual element.
  for ( ::CORBA::ULong i0 = 0; i0 < 10; ++i0)
    {
      for ( ::CORBA::ULong i1 = 0; i1 < 10; ++i1)
        {
          _tao_slice[i0][i1] = ::CORBA::Long ();
        }
    }
}

ACE_INLINE
LongArrayArray_slice *
TAO::Array_Traits<LongArrayArray_forany>::alloc (void)
{
  return LongArrayArray_alloc ();
}


TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// be/be_visitor_interface/interface_ci.cpp:59

ACE_INLINE
moola::Account::Account (
    TAO_Stub *objref,
    ::CORBA::Boolean _tao_collocated,
    TAO_Abstract_ServantBase *servant,
    TAO_ORB_Core *oc)
  : ::CORBA::Object (objref, _tao_collocated, servant, oc)
{
}

ACE_INLINE
moola::Account::Account (
    ::IOP::IOR *ior,
    TAO_ORB_Core *oc)
  : ::CORBA::Object (ior, oc)
{
}

// TAO_IDL - Generated from
// be/be_visitor_array/array_ci.cpp:147

TAO_BEGIN_VERSIONED_NAMESPACE_DECL


ACE_INLINE
void
TAO::Array_Traits<BucketArray_forany>::free (
    BucketArray_slice * _tao_slice)
{
  BucketArray_free (_tao_slice);
}

ACE_INLINE
BucketArray_slice *
TAO::Array_Traits<BucketArray_forany>::dup (
    const BucketArray_slice * _tao_slice)
{
  return BucketArray_dup (_tao_slice);
}

ACE_INLINE
void
TAO::Array_Traits<BucketArray_forany>::copy (
    BucketArray_slice * _tao_to,
    const BucketArray_slice * _tao_from)
{
  BucketArray_copy (_tao_to, _tao_from);
}

ACE_INLINE
void
TAO::Array_Traits<BucketArray_forany>::zero (
    BucketArray_slice * _tao_slice)
{
  // Zero each individual element.
  for ( ::CORBA::ULong i0 = 0; i0 < 10; ++i0)
    {
      _tao_slice[i0] = Bucket ();
    }
}

ACE_INLINE
BucketArray_slice *
TAO::Array_Traits<BucketArray_forany>::alloc (void)
{
  return BucketArray_alloc ();
}


TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// be/be_visitor_array/array_ci.cpp:147

TAO_BEGIN_VERSIONED_NAMESPACE_DECL


ACE_INLINE
void
TAO::Array_Traits<BucketArrayArray_forany>::free (
    BucketArrayArray_slice * _tao_slice)
{
  BucketArrayArray_free (_tao_slice);
}

ACE_INLINE
BucketArrayArray_slice *
TAO::Array_Traits<BucketArrayArray_forany>::dup (
    const BucketArrayArray_slice * _tao_slice)
{
  return BucketArrayArray_dup (_tao_slice);
}

ACE_INLINE
void
TAO::Array_Traits<BucketArrayArray_forany>::copy (
    BucketArrayArray_slice * _tao_to,
    const BucketArrayArray_slice * _tao_from)
{
  BucketArrayArray_copy (_tao_to, _tao_from);
}

ACE_INLINE
void
TAO::Array_Traits<BucketArrayArray_forany>::zero (
    BucketArrayArray_slice * _tao_slice)
{
  // Zero each individual element.
  for ( ::CORBA::ULong i0 = 0; i0 < 10; ++i0)
    {
      for ( ::CORBA::ULong i1 = 0; i1 < 10; ++i1)
        {
          _tao_slice[i0][i1] = Bucket ();
        }
    }
}

ACE_INLINE
BucketArrayArray_slice *
TAO::Array_Traits<BucketArrayArray_forany>::alloc (void)
{
  return BucketArrayArray_alloc ();
}


TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// be/be_visitor_array/array_ci.cpp:147

TAO_BEGIN_VERSIONED_NAMESPACE_DECL


ACE_INLINE
void
TAO::Array_Traits<AccountArray_forany>::free (
    AccountArray_slice * _tao_slice)
{
  AccountArray_free (_tao_slice);
}

ACE_INLINE
AccountArray_slice *
TAO::Array_Traits<AccountArray_forany>::dup (
    const AccountArray_slice * _tao_slice)
{
  return AccountArray_dup (_tao_slice);
}

ACE_INLINE
void
TAO::Array_Traits<AccountArray_forany>::copy (
    AccountArray_slice * _tao_to,
    const AccountArray_slice * _tao_from)
{
  AccountArray_copy (_tao_to, _tao_from);
}

ACE_INLINE
void
TAO::Array_Traits<AccountArray_forany>::zero (
    AccountArray_slice * _tao_slice)
{
  // Zero each individual element.
  for ( ::CORBA::ULong i0 = 0; i0 < 10; ++i0)
    {
      _tao_slice[i0] = moola::Account_var ();
    }
}

ACE_INLINE
AccountArray_slice *
TAO::Array_Traits<AccountArray_forany>::alloc (void)
{
  return AccountArray_alloc ();
}


TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// be/be_visitor_interface/interface_ci.cpp:59

ACE_INLINE
ArrayTest::ArrayTest (
    TAO_Stub *objref,
    ::CORBA::Boolean _tao_collocated,
    TAO_Abstract_ServantBase *servant,
    TAO_ORB_Core *oc)
  : ::CORBA::Object (objref, _tao_collocated, servant, oc)
{
}

ACE_INLINE
ArrayTest::ArrayTest (
    ::IOP::IOR *ior,
    TAO_ORB_Core *oc)
  : ::CORBA::Object (ior, oc)
{
}

// TAO_IDL - Generated from
// be/be_visitor_interface/interface_ci.cpp:59

ACE_INLINE
ServerAdmin::ServerAdmin (
    TAO_Stub *objref,
    ::CORBA::Boolean _tao_collocated,
    TAO_Abstract_ServantBase *servant,
    TAO_ORB_Core *oc)
  : ::CORBA::Object (objref, _tao_collocated, servant, oc)
{
}

ACE_INLINE
ServerAdmin::ServerAdmin (
    ::IOP::IOR *ior,
    TAO_ORB_Core *oc)
  : ::CORBA::Object (ior, oc)
{
}

