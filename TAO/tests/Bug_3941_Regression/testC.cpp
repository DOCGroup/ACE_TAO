// -*- C++ -*-
/**
 * Code generated by the The ACE ORB (TAO) IDL Compiler v2.4.1
 * TAO and the TAO IDL Compiler have been developed by:
 *       Center for Distributed Object Computing
 *       Washington University
 *       St. Louis, MO
 *       USA
 *       http://www.cs.wustl.edu/~schmidt/doc-center.html
 * and
 *       Distributed Object Computing Laboratory
 *       University of California at Irvine
 *       Irvine, CA
 *       USA
 * and
 *       Institute for Software Integrated Systems
 *       Vanderbilt University
 *       Nashville, TN
 *       USA
 *       http://www.isis.vanderbilt.edu/
 *
 * Information about TAO is available at:
 *     http://www.dre.vanderbilt.edu/~schmidt/TAO.html
 **/

// TAO_IDL - Generated from
// be/be_codegen.cpp:373


#include "testC.h"
#include "tao/AnyTypeCode/Null_RefCount_Policy.h"
#include "tao/AnyTypeCode/TypeCode_Constants.h"
#include "tao/AnyTypeCode/Alias_TypeCode_Static.h"
#include "tao/AnyTypeCode/String_TypeCode_Static.h"
#include "tao/AnyTypeCode/Value_TypeCode_Static.h"
#include "tao/AnyTypeCode/TypeCode_Value_Field.h"
#include "tao/CDR.h"
#include "tao/CDR.h"
#include "tao/AnyTypeCode/Any.h"
#include "tao/AnyTypeCode/Any_Impl_T.h"

#if !defined (__ACE_INLINE__)
#include "testC.inl"
#endif /* !defined INLINE */

// TAO_IDL - Generated from
// be/be_visitor_typecode/value_typecode.cpp:65

static TAO::TypeCode::Value_Field<char const *, ::CORBA::TypeCode_ptr const *> const * const _tao_fields_test_EventBase = 0;
static TAO::TypeCode::Value<char const *,
                     ::CORBA::TypeCode_ptr const *,
                     TAO::TypeCode::Value_Field<char const *, ::CORBA::TypeCode_ptr const *> const *,
                     TAO::Null_RefCount_Policy>
  _tao_tc_test_EventBase (
    ::CORBA::tk_value,
    "IDL:test/EventBase:1.0",
    "EventBase",
    ::CORBA::VM_ABSTRACT,
    &::CORBA::_tc_null,
    _tao_fields_test_EventBase,
    0);
  

namespace test
{
  ::CORBA::TypeCode_ptr const _tc_EventBase =
    &_tao_tc_test_EventBase;
}

// TAO_IDL - Generated from
// be/be_visitor_valuetype/valuetype_cs.cpp:53

void
TAO::Value_Traits<test::EventBase>::add_ref (
    test::EventBase * p)
{
  ::CORBA::add_ref (p);
}

void
TAO::Value_Traits<test::EventBase>::remove_ref (
    test::EventBase * p)
{
  ::CORBA::remove_ref (p);
}

void
TAO::Value_Traits<test::EventBase>::release (
    test::EventBase * p)
{
  ::CORBA::remove_ref (p);
}

test::EventBase *
test::EventBase::_downcast ( ::CORBA::ValueBase *v)
{
  return dynamic_cast< ::test::EventBase * > (v);
}

const char *
test::EventBase::_tao_obv_repository_id (void) const
{
  return this->_tao_obv_static_repository_id ();
}

void
test::EventBase::_tao_obv_truncatable_repo_ids (Repository_Id_List& ids) const
{
  ids.push_back (this->_tao_obv_static_repository_id ());
}

void
test::EventBase::_tao_any_destructor (void *_tao_void_pointer)
{
  EventBase *_tao_tmp_pointer =
    static_cast<EventBase *> (_tao_void_pointer);
  ::CORBA::remove_ref (_tao_tmp_pointer);
}

// TAO extension - the virtual _type method.
::CORBA::TypeCode_ptr test::EventBase::_tao_type (void) const
{
  return ::test::_tc_EventBase;
}

test::EventBase::~EventBase (void)
{}

::CORBA::Boolean
test::EventBase::_tao_unmarshal (
    TAO_InputCDR &strm,
    EventBase *&new_object
  )
{
  ::CORBA::ValueBase *base = 0;
  ::CORBA::Boolean is_indirected = false;
  ::CORBA::Boolean is_null_object = false;
  ::CORBA::Boolean const retval =
    ::CORBA::ValueBase::_tao_unmarshal_pre (
        strm,
        base,
        EventBase::_tao_obv_static_repository_id (),
        is_null_object,
        is_indirected
      );
  
  ::CORBA::ValueBase_var owner (base);

  if (!retval)
    return false;
  
  if (is_null_object)
    return true;
  
  if (!is_indirected && !base->_tao_unmarshal_v (strm))
    return false;
  
  // Now base must point to the unmarshaled object.
  // Align the pointer to the right subobject.
  new_object = EventBase::_downcast (base);
  if (0 == new_object)
    return false;
  
  if (is_indirected)
    new_object->_add_ref ();
  
  owner._retn ();
  return true;
}

// TAO_IDL - Generated from
// be/be_visitor_typecode/value_typecode.cpp:65

static TAO::TypeCode::Value_Field<char const *, ::CORBA::TypeCode_ptr const *> const _tao_fields_test_event0[] =
  {
    { "message", &CORBA::_tc_string, ::CORBA::PUBLIC_MEMBER }
    
  };
static TAO::TypeCode::Value<char const *,
                     ::CORBA::TypeCode_ptr const *,
                     TAO::TypeCode::Value_Field<char const *, ::CORBA::TypeCode_ptr const *> const *,
                     TAO::Null_RefCount_Policy>
  _tao_tc_test_event0 (
    ::CORBA::tk_value,
    "IDL:test/event0:1.0",
    "event0",
    ::CORBA::VM_NONE,
    &::CORBA::_tc_null,
    _tao_fields_test_event0,
    1);
  

namespace test
{
  ::CORBA::TypeCode_ptr const _tc_event0 =
    &_tao_tc_test_event0;
}

// TAO_IDL - Generated from
// be/be_visitor_valuetype/valuetype_cs.cpp:53

void
TAO::Value_Traits<test::event0>::add_ref (
    test::event0 * p)
{
  ::CORBA::add_ref (p);
}

void
TAO::Value_Traits<test::event0>::remove_ref (
    test::event0 * p)
{
  ::CORBA::remove_ref (p);
}

void
TAO::Value_Traits<test::event0>::release (
    test::event0 * p)
{
  ::CORBA::remove_ref (p);
}

test::event0 *
test::event0::_downcast ( ::CORBA::ValueBase *v)
{
  return dynamic_cast< ::test::event0 * > (v);
}

const char *
test::event0::_tao_obv_repository_id (void) const
{
  return this->_tao_obv_static_repository_id ();
}

void
test::event0::_tao_obv_truncatable_repo_ids (Repository_Id_List& ids) const
{
  ids.push_back (this->_tao_obv_static_repository_id ());
}

void
test::event0::_tao_any_destructor (void *_tao_void_pointer)
{
  event0 *_tao_tmp_pointer =
    static_cast<event0 *> (_tao_void_pointer);
  ::CORBA::remove_ref (_tao_tmp_pointer);
}

// TAO extension - the virtual _type method.
::CORBA::TypeCode_ptr test::event0::_tao_type (void) const
{
  return ::test::_tc_event0;
}

test::event0::~event0 (void)
{}

::CORBA::Boolean
test::event0::_tao_marshal_v (TAO_OutputCDR & strm) const
{
  TAO_ChunkInfo ci (this->is_truncatable_ || this->chunking_);
  return this->_tao_marshal__test_event0 (strm, ci);
}

::CORBA::Boolean
test::event0::_tao_unmarshal_v (TAO_InputCDR & strm)
{
  TAO_ChunkInfo ci (this->is_truncatable_ || this->chunking_, 1);
  return this->_tao_unmarshal__test_event0 (strm,ci);
}

::CORBA::Boolean
test::event0::_tao_match_formal_type (ptrdiff_t formal_type_id) const
{
  return formal_type_id == reinterpret_cast<ptrdiff_t> (test::event0::_downcast);
}

::CORBA::Boolean
test::event0::_tao_unmarshal (
    TAO_InputCDR &strm,
    event0 *&new_object
  )
{
  ::CORBA::ValueBase *base = 0;
  ::CORBA::Boolean is_indirected = false;
  ::CORBA::Boolean is_null_object = false;
  ::CORBA::Boolean const retval =
    ::CORBA::ValueBase::_tao_unmarshal_pre (
        strm,
        base,
        event0::_tao_obv_static_repository_id (),
        is_null_object,
        is_indirected
      );
  
  ::CORBA::ValueBase_var owner (base);

  if (!retval)
    return false;
  
  if (is_null_object)
    return true;
  
  if (!is_indirected && !base->_tao_unmarshal_v (strm))
    return false;
  
  // Now base must point to the unmarshaled object.
  // Align the pointer to the right subobject.
  new_object = event0::_downcast (base);
  if (0 == new_object)
    return false;
  
  if (is_indirected)
    new_object->_add_ref ();
  
  owner._retn ();
  return true;
}

// TAO_IDL - Generated from
// be/be_visitor_valuetype/valuetype_init_cs.cpp:73

test::event0_init::event0_init (void)
{
}

test::event0_init::~event0_init (void)
{
}

test::event0_init *
test::event0_init::_downcast ( ::CORBA::ValueFactoryBase *v)
{
  return dynamic_cast< ::test::event0_init * > (v);
}

const char*
test::event0_init::tao_repository_id (void)
{
  return ::test::event0::_tao_obv_static_repository_id ();
}

::CORBA::ValueBase *
test::event0_init::create_for_unmarshal (void)
{
  ::CORBA::ValueBase *ret_val = 0;
  ACE_NEW_THROW_EX (
      ret_val,
      OBV_test::event0,
      ::CORBA::NO_MEMORY ()
    );
  return ret_val;
}

// TAO_IDL - Generated from
// be/be_visitor_typecode/value_typecode.cpp:65

static TAO::TypeCode::Value_Field<char const *, ::CORBA::TypeCode_ptr const *> const _tao_fields_test_event1[] =
  {
    { "l", &CORBA::_tc_long, ::CORBA::PUBLIC_MEMBER }
    
  };
static TAO::TypeCode::Value<char const *,
                     ::CORBA::TypeCode_ptr const *,
                     TAO::TypeCode::Value_Field<char const *, ::CORBA::TypeCode_ptr const *> const *,
                     TAO::Null_RefCount_Policy>
  _tao_tc_test_event1 (
    ::CORBA::tk_value,
    "IDL:test/event1:1.0",
    "event1",
    ::CORBA::VM_NONE,
    &::CORBA::_tc_null,
    _tao_fields_test_event1,
    1);
  

namespace test
{
  ::CORBA::TypeCode_ptr const _tc_event1 =
    &_tao_tc_test_event1;
}

// TAO_IDL - Generated from
// be/be_visitor_valuetype/valuetype_cs.cpp:53

void
TAO::Value_Traits<test::event1>::add_ref (
    test::event1 * p)
{
  ::CORBA::add_ref (p);
}

void
TAO::Value_Traits<test::event1>::remove_ref (
    test::event1 * p)
{
  ::CORBA::remove_ref (p);
}

void
TAO::Value_Traits<test::event1>::release (
    test::event1 * p)
{
  ::CORBA::remove_ref (p);
}

test::event1 *
test::event1::_downcast ( ::CORBA::ValueBase *v)
{
  return dynamic_cast< ::test::event1 * > (v);
}

const char *
test::event1::_tao_obv_repository_id (void) const
{
  return this->_tao_obv_static_repository_id ();
}

void
test::event1::_tao_obv_truncatable_repo_ids (Repository_Id_List& ids) const
{
  ids.push_back (this->_tao_obv_static_repository_id ());
}

void
test::event1::_tao_any_destructor (void *_tao_void_pointer)
{
  event1 *_tao_tmp_pointer =
    static_cast<event1 *> (_tao_void_pointer);
  ::CORBA::remove_ref (_tao_tmp_pointer);
}

// TAO extension - the virtual _type method.
::CORBA::TypeCode_ptr test::event1::_tao_type (void) const
{
  return ::test::_tc_event1;
}

test::event1::~event1 (void)
{}

::CORBA::Boolean
test::event1::_tao_marshal_v (TAO_OutputCDR & strm) const
{
  TAO_ChunkInfo ci (this->is_truncatable_ || this->chunking_);
  return this->_tao_marshal__test_event1 (strm, ci);
}

::CORBA::Boolean
test::event1::_tao_unmarshal_v (TAO_InputCDR & strm)
{
  TAO_ChunkInfo ci (this->is_truncatable_ || this->chunking_, 1);
  return this->_tao_unmarshal__test_event1 (strm,ci);
}

::CORBA::Boolean
test::event1::_tao_match_formal_type (ptrdiff_t formal_type_id) const
{
  return formal_type_id == reinterpret_cast<ptrdiff_t> (test::event1::_downcast);
}

::CORBA::Boolean
test::event1::_tao_unmarshal (
    TAO_InputCDR &strm,
    event1 *&new_object
  )
{
  ::CORBA::ValueBase *base = 0;
  ::CORBA::Boolean is_indirected = false;
  ::CORBA::Boolean is_null_object = false;
  ::CORBA::Boolean const retval =
    ::CORBA::ValueBase::_tao_unmarshal_pre (
        strm,
        base,
        event1::_tao_obv_static_repository_id (),
        is_null_object,
        is_indirected
      );
  
  ::CORBA::ValueBase_var owner (base);

  if (!retval)
    return false;
  
  if (is_null_object)
    return true;
  
  if (!is_indirected && !base->_tao_unmarshal_v (strm))
    return false;
  
  // Now base must point to the unmarshaled object.
  // Align the pointer to the right subobject.
  new_object = event1::_downcast (base);
  if (0 == new_object)
    return false;
  
  if (is_indirected)
    new_object->_add_ref ();
  
  owner._retn ();
  return true;
}

// TAO_IDL - Generated from
// be/be_visitor_valuetype/valuetype_init_cs.cpp:73

test::event1_init::event1_init (void)
{
}

test::event1_init::~event1_init (void)
{
}

test::event1_init *
test::event1_init::_downcast ( ::CORBA::ValueFactoryBase *v)
{
  return dynamic_cast< ::test::event1_init * > (v);
}

const char*
test::event1_init::tao_repository_id (void)
{
  return ::test::event1::_tao_obv_static_repository_id ();
}

::CORBA::ValueBase *
test::event1_init::create_for_unmarshal (void)
{
  ::CORBA::ValueBase *ret_val = 0;
  ACE_NEW_THROW_EX (
      ret_val,
      OBV_test::event1,
      ::CORBA::NO_MEMORY ()
    );
  return ret_val;
}

// TAO_IDL - Generated from
// be/be_visitor_valuetype/valuetype_obv_cs.cpp:44

OBV_test::event0::event0 (void)
: require_truncation_ (false)
{}

OBV_test::event0::event0 (
    const char * _tao_init_message)
: require_truncation_ (false)
{
  message (_tao_init_message);
}

OBV_test::event0::~event0 (void)
{}

::CORBA::ValueBase *
OBV_test::event0::_copy_value (void)
{
  ::CORBA::ValueBase *ret_val = 0;
  ACE_NEW_THROW_EX (
    ret_val,
    event0 (
      message ()
    ),
    ::CORBA::NO_MEMORY ()
  );
  return ret_val;
}

::CORBA::Boolean
OBV_test::event0::_tao_marshal__test_event0 (TAO_OutputCDR &strm, TAO_ChunkInfo& ci) const
{
  return _tao_marshal_state (strm, ci);
}

::CORBA::Boolean
OBV_test::event0::_tao_unmarshal__test_event0 (TAO_InputCDR &strm, TAO_ChunkInfo& ci)
{
  return _tao_unmarshal_state (strm, ci);
}

// TAO_IDL - Generated from
// be/be_visitor_valuetype/field_cs.cpp:834

/// Accessor to set the member.
void
OBV_test::event0::message (char *val)
{
  this->_pd_message = (val);
}

/// Accessor to set the member.
void
OBV_test::event0::message (const char *val)
{
  // Set the value.
  this->_pd_message = ::CORBA::string_dup (val);
}

/// Accessor to set the member.
void
OBV_test::event0::message (const ::CORBA::String_var &val)
{
  ::CORBA::String_var message_var = val;
  this->_pd_message = message_var._retn ();
}

const char *
OBV_test::event0::message (void) const // get method
{
  return this->_pd_message;
}

// TAO_IDL - Generated from
// be/be_visitor_valuetype/valuetype_obv_cs.cpp:44

OBV_test::event1::event1 (void)
: require_truncation_ (false)
{}

OBV_test::event1::event1 (
    ::CORBA::Long _tao_init_l)
: require_truncation_ (false)
{
  l (_tao_init_l);
}

OBV_test::event1::~event1 (void)
{}

::CORBA::ValueBase *
OBV_test::event1::_copy_value (void)
{
  ::CORBA::ValueBase *ret_val = 0;
  ACE_NEW_THROW_EX (
    ret_val,
    event1 (
      l ()
    ),
    ::CORBA::NO_MEMORY ()
  );
  return ret_val;
}

::CORBA::Boolean
OBV_test::event1::_tao_marshal__test_event1 (TAO_OutputCDR &strm, TAO_ChunkInfo& ci) const
{
  return _tao_marshal_state (strm, ci);
}

::CORBA::Boolean
OBV_test::event1::_tao_unmarshal__test_event1 (TAO_InputCDR &strm, TAO_ChunkInfo& ci)
{
  return _tao_unmarshal_state (strm, ci);
}

// TAO_IDL - Generated from
// be/be_visitor_valuetype/field_cs.cpp:587

/// Accessor to set the member.
void
OBV_test::event1::l (const CORBA::Long val)
{
  // Set the value.
  this->_pd_l = val;
}

// Retrieve the member
::CORBA::Long
OBV_test::event1::l (void) const
{
  return this->_pd_l;
}

// TAO_IDL - Generated from
// be/be_visitor_valuetype/any_op_cs.cpp:45
TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<test::EventBase>::to_value (
      ::CORBA::ValueBase *&_tao_elem
    ) const
  {
    ::CORBA::add_ref (this->value_);
    _tao_elem = this->value_;
    return true;
  }
}


TAO_END_VERSIONED_NAMESPACE_DECL



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace test
{
  // Copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      EventBase *_tao_elem
    )
  {
    #ifdef TAO_VALUETYPE_COPYING_ANY_INSERTION_USES_COPY_VALUE
      EventBase *_tao_copy =
        _tao_elem ?
          EventBase::_downcast (_tao_elem->_copy_value ())
          : 0;
      _tao_any <<= &_tao_copy;
    #else
      ::CORBA::add_ref (_tao_elem);
      _tao_any <<= &_tao_elem;
    #endif
  }

  // Non-copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      EventBase **_tao_elem
    )
  {
    TAO::Any_Impl_T<EventBase>::insert (
        _tao_any,
        EventBase::_tao_any_destructor,
        _tc_EventBase,
        *_tao_elem
      );
  }

  ::CORBA::Boolean
  operator>>= (
      const ::CORBA::Any &_tao_any,
      EventBase *&_tao_elem
    )
  {
    return
      TAO::Any_Impl_T<EventBase>::extract (
          _tao_any,
          EventBase::_tao_any_destructor,
          _tc_EventBase,
          _tao_elem
        );
  }

  
}

#else


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    test::EventBase *_tao_elem
  )
{
  #ifdef TAO_VALUETYPE_COPYING_ANY_INSERTION_USES_COPY_VALUE
    test::EventBase *_tao_copy =
      _tao_elem ?
        test::EventBase::_downcast (_tao_elem->_copy_value ())
        : 0;
    _tao_any <<= &_tao_copy;
  #else
    ::CORBA::add_ref (_tao_elem);
    _tao_any <<= &_tao_elem;
  #endif
}

// Non-copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    test::EventBase **_tao_elem
  )
{
  TAO::Any_Impl_T<test::EventBase>::insert (
      _tao_any,
      test::EventBase::_tao_any_destructor,
      test::_tc_EventBase,
      *_tao_elem
    );
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    test::EventBase *&_tao_elem
  )
{
  return
    TAO::Any_Impl_T<test::EventBase>::extract (
        _tao_any,
        test::EventBase::_tao_any_destructor,
        test::_tc_EventBase,
        _tao_elem
      );
}


TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_valuetype/any_op_cs.cpp:45
TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<test::event0>::to_value (
      ::CORBA::ValueBase *&_tao_elem
    ) const
  {
    ::CORBA::add_ref (this->value_);
    _tao_elem = this->value_;
    return true;
  }
}


TAO_END_VERSIONED_NAMESPACE_DECL



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace test
{
  // Copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      event0 *_tao_elem
    )
  {
    #ifdef TAO_VALUETYPE_COPYING_ANY_INSERTION_USES_COPY_VALUE
      event0 *_tao_copy =
        _tao_elem ?
          event0::_downcast (_tao_elem->_copy_value ())
          : 0;
      _tao_any <<= &_tao_copy;
    #else
      ::CORBA::add_ref (_tao_elem);
      _tao_any <<= &_tao_elem;
    #endif
  }

  // Non-copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      event0 **_tao_elem
    )
  {
    TAO::Any_Impl_T<event0>::insert (
        _tao_any,
        event0::_tao_any_destructor,
        _tc_event0,
        *_tao_elem
      );
  }

  ::CORBA::Boolean
  operator>>= (
      const ::CORBA::Any &_tao_any,
      event0 *&_tao_elem
    )
  {
    return
      TAO::Any_Impl_T<event0>::extract (
          _tao_any,
          event0::_tao_any_destructor,
          _tc_event0,
          _tao_elem
        );
  }

  
}

#else


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    test::event0 *_tao_elem
  )
{
  #ifdef TAO_VALUETYPE_COPYING_ANY_INSERTION_USES_COPY_VALUE
    test::event0 *_tao_copy =
      _tao_elem ?
        test::event0::_downcast (_tao_elem->_copy_value ())
        : 0;
    _tao_any <<= &_tao_copy;
  #else
    ::CORBA::add_ref (_tao_elem);
    _tao_any <<= &_tao_elem;
  #endif
}

// Non-copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    test::event0 **_tao_elem
  )
{
  TAO::Any_Impl_T<test::event0>::insert (
      _tao_any,
      test::event0::_tao_any_destructor,
      test::_tc_event0,
      *_tao_elem
    );
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    test::event0 *&_tao_elem
  )
{
  return
    TAO::Any_Impl_T<test::event0>::extract (
        _tao_any,
        test::event0::_tao_any_destructor,
        test::_tc_event0,
        _tao_elem
      );
}


TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_valuetype/any_op_cs.cpp:45
TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<test::event1>::to_value (
      ::CORBA::ValueBase *&_tao_elem
    ) const
  {
    ::CORBA::add_ref (this->value_);
    _tao_elem = this->value_;
    return true;
  }
}


TAO_END_VERSIONED_NAMESPACE_DECL



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace test
{
  // Copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      event1 *_tao_elem
    )
  {
    #ifdef TAO_VALUETYPE_COPYING_ANY_INSERTION_USES_COPY_VALUE
      event1 *_tao_copy =
        _tao_elem ?
          event1::_downcast (_tao_elem->_copy_value ())
          : 0;
      _tao_any <<= &_tao_copy;
    #else
      ::CORBA::add_ref (_tao_elem);
      _tao_any <<= &_tao_elem;
    #endif
  }

  // Non-copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      event1 **_tao_elem
    )
  {
    TAO::Any_Impl_T<event1>::insert (
        _tao_any,
        event1::_tao_any_destructor,
        _tc_event1,
        *_tao_elem
      );
  }

  ::CORBA::Boolean
  operator>>= (
      const ::CORBA::Any &_tao_any,
      event1 *&_tao_elem
    )
  {
    return
      TAO::Any_Impl_T<event1>::extract (
          _tao_any,
          event1::_tao_any_destructor,
          _tc_event1,
          _tao_elem
        );
  }

  
}

#else


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    test::event1 *_tao_elem
  )
{
  #ifdef TAO_VALUETYPE_COPYING_ANY_INSERTION_USES_COPY_VALUE
    test::event1 *_tao_copy =
      _tao_elem ?
        test::event1::_downcast (_tao_elem->_copy_value ())
        : 0;
    _tao_any <<= &_tao_copy;
  #else
    ::CORBA::add_ref (_tao_elem);
    _tao_any <<= &_tao_elem;
  #endif
}

// Non-copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    test::event1 **_tao_elem
  )
{
  TAO::Any_Impl_T<test::event1>::insert (
      _tao_any,
      test::event1::_tao_any_destructor,
      test::_tc_event1,
      *_tao_elem
    );
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    test::event1 *&_tao_elem
  )
{
  return
    TAO::Any_Impl_T<test::event1>::extract (
        _tao_any,
        test::event1::_tao_any_destructor,
        test::_tc_event1,
        _tao_elem
      );
}


TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_valuetype.cpp:512

void
CORBA::add_ref (test::EventBase * vt)
{
  if (vt != 0)
    {
      vt->_add_ref ();
    }
}

void
CORBA::remove_ref (test::EventBase * vt)
{
  if (vt != 0)
    {
      vt->_remove_ref ();
    }
}

// TAO_IDL - Generated from
// be/be_visitor_valuetype/cdr_op_cs.cpp:60


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean
operator<< (
    TAO_OutputCDR &strm,
    const test::EventBase *_tao_valuetype
  )
{
  return
    ::CORBA::ValueBase::_tao_marshal (
        strm,
        _tao_valuetype,
        reinterpret_cast<ptrdiff_t> (&test::EventBase::_downcast)
      );
}

::CORBA::Boolean
operator>> (
    TAO_InputCDR &strm,
    test::EventBase *&_tao_valuetype
  )
{
  return test::EventBase::_tao_unmarshal (strm, _tao_valuetype);
}


TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_valuetype.cpp:512

void
CORBA::add_ref (test::event0 * vt)
{
  if (vt != 0)
    {
      vt->_add_ref ();
    }
}

void
CORBA::remove_ref (test::event0 * vt)
{
  if (vt != 0)
    {
      vt->_remove_ref ();
    }
}

// TAO_IDL - Generated from
// be/be_visitor_valuetype/cdr_op_cs.cpp:60


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean
operator<< (
    TAO_OutputCDR &strm,
    const test::event0 *_tao_valuetype
  )
{
  return
    ::CORBA::ValueBase::_tao_marshal (
        strm,
        _tao_valuetype,
        reinterpret_cast<ptrdiff_t> (&test::event0::_downcast)
      );
}

::CORBA::Boolean
operator>> (
    TAO_InputCDR &strm,
    test::event0 *&_tao_valuetype
  )
{
  return test::event0::_tao_unmarshal (strm, _tao_valuetype);
}


TAO_END_VERSIONED_NAMESPACE_DECL

// TAO_IDL - Generated from
// be/be_visitor_valuetype/marshal_cs.cpp:33

::CORBA::Boolean
OBV_test::event0::_tao_marshal_state (TAO_OutputCDR &strm, TAO_ChunkInfo&ci) const
{
  if (! ci.start_chunk (strm))
    return false;
  
  CORBA::Boolean const ret = 
      (strm << _pd_message.in ());
  if ( ! ret) 
    return false; 
  
  if (! ci.end_chunk (strm))
    return false;
  
  return true;
}

::CORBA::Boolean
OBV_test::event0::_tao_unmarshal_state (TAO_InputCDR &strm, TAO_ChunkInfo&ci)
{
  if (!ci.handle_chunking (strm))
    return false;
  
  CORBA::Boolean const ret = 
      (strm >> _pd_message.out ());
  if (!ret) 
    return false; 
  
  if (this->require_truncation_)
    return ci.skip_chunks (strm);
  
  else
    return ci.handle_chunking (strm);
  
  
}

void
OBV_test::event0::truncation_hook (void)
{
  this->require_truncation_ = true;
}



// TAO_IDL - Generated from
// be/be_valuetype.cpp:512

void
CORBA::add_ref (test::event1 * vt)
{
  if (vt != 0)
    {
      vt->_add_ref ();
    }
}

void
CORBA::remove_ref (test::event1 * vt)
{
  if (vt != 0)
    {
      vt->_remove_ref ();
    }
}

// TAO_IDL - Generated from
// be/be_visitor_valuetype/cdr_op_cs.cpp:60


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean
operator<< (
    TAO_OutputCDR &strm,
    const test::event1 *_tao_valuetype
  )
{
  return
    ::CORBA::ValueBase::_tao_marshal (
        strm,
        _tao_valuetype,
        reinterpret_cast<ptrdiff_t> (&test::event1::_downcast)
      );
}

::CORBA::Boolean
operator>> (
    TAO_InputCDR &strm,
    test::event1 *&_tao_valuetype
  )
{
  return test::event1::_tao_unmarshal (strm, _tao_valuetype);
}


TAO_END_VERSIONED_NAMESPACE_DECL

// TAO_IDL - Generated from
// be/be_visitor_valuetype/marshal_cs.cpp:33

::CORBA::Boolean
OBV_test::event1::_tao_marshal_state (TAO_OutputCDR &strm, TAO_ChunkInfo&ci) const
{
  if (! ci.start_chunk (strm))
    return false;
  
  CORBA::Boolean const ret = 
      (strm << _pd_l);
  if ( ! ret) 
    return false; 
  
  if (! ci.end_chunk (strm))
    return false;
  
  return true;
}

::CORBA::Boolean
OBV_test::event1::_tao_unmarshal_state (TAO_InputCDR &strm, TAO_ChunkInfo&ci)
{
  if (!ci.handle_chunking (strm))
    return false;
  
  CORBA::Boolean const ret = 
      (strm >> _pd_l);
  if (!ret) 
    return false; 
  
  if (this->require_truncation_)
    return ci.skip_chunks (strm);
  
  else
    return ci.handle_chunking (strm);
  
  
}

void
OBV_test::event1::truncation_hook (void)
{
  this->require_truncation_ = true;
}



