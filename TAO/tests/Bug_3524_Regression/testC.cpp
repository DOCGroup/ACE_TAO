// -*- C++ -*-
/**
 * Code generated by the The ACE ORB (TAO) IDL Compiler v2.4.1
 * TAO and the TAO IDL Compiler have been developed by:
 *       Center for Distributed Object Computing
 *       Washington University
 *       St. Louis, MO
 *       USA
 *       http://www.cs.wustl.edu/~schmidt/doc-center.html
 * and
 *       Distributed Object Computing Laboratory
 *       University of California at Irvine
 *       Irvine, CA
 *       USA
 * and
 *       Institute for Software Integrated Systems
 *       Vanderbilt University
 *       Nashville, TN
 *       USA
 *       http://www.isis.vanderbilt.edu/
 *
 * Information about TAO is available at:
 *     http://www.dre.vanderbilt.edu/~schmidt/TAO.html
 **/

// TAO_IDL - Generated from
// be/be_codegen.cpp:373


#include "testC.h"
#include "tao/AnyTypeCode/Null_RefCount_Policy.h"
#include "tao/AnyTypeCode/TypeCode_Constants.h"
#include "tao/AnyTypeCode/Alias_TypeCode_Static.h"
#include "tao/AnyTypeCode/Enum_TypeCode_Static.h"
#include "tao/AnyTypeCode/Objref_TypeCode_Static.h"
#include "tao/AnyTypeCode/Sequence_TypeCode_Static.h"
#include "tao/AnyTypeCode/String_TypeCode_Static.h"
#include "tao/AnyTypeCode/Struct_TypeCode_Static.h"
#include "tao/AnyTypeCode/TypeCode_Struct_Field.h"
#include "tao/AnyTypeCode/TypeCode_Case_T.h"
#include "tao/AnyTypeCode/Union_TypeCode_Static.h"
#include "tao/AnyTypeCode/Value_TypeCode_Static.h"
#include "tao/AnyTypeCode/TypeCode_Value_Field.h"
#include "tao/CDR.h"
#include "tao/Exception_Data.h"
#include "tao/Invocation_Adapter.h"
#include "tao/Object_T.h"
#include "tao/SystemException.h"
#include "tao/CDR.h"
#include "tao/AnyTypeCode/Any.h"
#include "tao/AnyTypeCode/Any_Impl_T.h"
#include "tao/AnyTypeCode/Any_Dual_Impl_T.h"
#include "tao/AnyTypeCode/Any_Array_Impl_T.h"
#include "tao/AnyTypeCode/Any_Basic_Impl_T.h"
#include "ace/OS_NS_string.h"

#if !defined (__ACE_INLINE__)
#include "testC.inl"
#endif /* !defined INLINE */

// TAO_IDL - Generated from
// be/be_visitor_typecode/alias_typecode.cpp:49



// TAO_IDL - Generated from
// be/be_visitor_typecode/typecode_defn.cpp:556


#ifndef _TAO_TYPECODE_CORBA_STRING_10_GUARD
#define _TAO_TYPECODE_CORBA_STRING_10_GUARD

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

namespace TAO
{
  namespace TypeCode
  {
    namespace
    {
      TAO::TypeCode::String<TAO::Null_RefCount_Policy>
        CORBA_STRING_10 (
          ::CORBA::tk_string,
          10U);

      ::CORBA::TypeCode_ptr const tc_CORBA_STRING_10 =
        &CORBA_STRING_10;
    }
  }
}

TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_TYPECODE_CORBA_STRING_10_GUARD */

static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_Test_bounded_string (
    ::CORBA::tk_alias,
    "IDL:Test/bounded_string:1.0",
    "bounded_string",
    &TAO::TypeCode::tc_CORBA_STRING_10);


namespace Test
{
  ::CORBA::TypeCode_ptr const _tc_bounded_string =
    &_tao_tc_Test_bounded_string;
}

// TAO_IDL - Generated from
// be/be_visitor_sequence/sequence_cs.cpp:70

#if !defined (_TEST_SEQ_BD_STR_CS_)
#define _TEST_SEQ_BD_STR_CS_

Test::seq_bd_str::seq_bd_str (void)
{}

Test::seq_bd_str::seq_bd_str (
    ::CORBA::ULong max)
  : ::TAO::unbounded_bd_string_sequence<char, 10> (max)
{}

Test::seq_bd_str::seq_bd_str (
    ::CORBA::ULong max,
    ::CORBA::ULong length,
    ::CORBA::Char * * buffer,
    ::CORBA::Boolean release
  )
  : ::TAO::unbounded_bd_string_sequence<char, 10>
    (max, length, buffer, release)
{}

Test::seq_bd_str::seq_bd_str (
    const seq_bd_str &seq)
  : ::TAO::unbounded_bd_string_sequence<char, 10> (seq)
{}

Test::seq_bd_str::~seq_bd_str (void)
{}

void Test::seq_bd_str::_tao_any_destructor (
    void * _tao_void_pointer)
{
  seq_bd_str * _tao_tmp_pointer =
    static_cast<seq_bd_str *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

#endif /* end #if !defined */

// TAO_IDL - Generated from
// be/be_visitor_typecode/alias_typecode.cpp:49



// TAO_IDL - Generated from
// be/be_visitor_typecode/typecode_defn.cpp:461


#ifndef _TAO_TYPECODE_Test_seq_bd_str_GUARD
#define _TAO_TYPECODE_Test_seq_bd_str_GUARD

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

namespace TAO
{
  namespace TypeCode
  {
    namespace
    {
      TAO::TypeCode::Sequence< ::CORBA::TypeCode_ptr const *,
                              TAO::Null_RefCount_Policy>
        Test_seq_bd_str_0 (
          ::CORBA::tk_sequence,
          &Test::_tc_bounded_string,
          0U);

      ::CORBA::TypeCode_ptr const tc_Test_seq_bd_str_0 =
        &Test_seq_bd_str_0;
    }
  }
}

TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_TYPECODE_Test_seq_bd_str_GUARD */

static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_Test_seq_bd_str (
    ::CORBA::tk_alias,
    "IDL:Test/seq_bd_str:1.0",
    "seq_bd_str",
    &TAO::TypeCode::tc_Test_seq_bd_str_0);


namespace Test
{
  ::CORBA::TypeCode_ptr const _tc_seq_bd_str =
    &_tao_tc_Test_seq_bd_str;
}

// TAO_IDL - Generated from
// be/be_visitor_sequence/sequence_cs.cpp:70

#if !defined (_TEST_SEQ_BDS_STR_CS_)
#define _TEST_SEQ_BDS_STR_CS_

Test::seq_bds_str::seq_bds_str (void)
{}

Test::seq_bds_str::seq_bds_str (
    ::CORBA::ULong max)
  : ::TAO::unbounded_bd_string_sequence<char, 10> (max)
{}

Test::seq_bds_str::seq_bds_str (
    ::CORBA::ULong max,
    ::CORBA::ULong length,
    ::CORBA::Char * * buffer,
    ::CORBA::Boolean release
  )
  : ::TAO::unbounded_bd_string_sequence<char, 10>
    (max, length, buffer, release)
{}

Test::seq_bds_str::seq_bds_str (
    const seq_bds_str &seq)
  : ::TAO::unbounded_bd_string_sequence<char, 10> (seq)
{}

Test::seq_bds_str::~seq_bds_str (void)
{}

void Test::seq_bds_str::_tao_any_destructor (
    void * _tao_void_pointer)
{
  seq_bds_str * _tao_tmp_pointer =
    static_cast<seq_bds_str *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

#endif /* end #if !defined */

// TAO_IDL - Generated from
// be/be_visitor_typecode/alias_typecode.cpp:49



// TAO_IDL - Generated from
// be/be_visitor_typecode/typecode_defn.cpp:461



// TAO_IDL - Generated from
// be/be_visitor_typecode/typecode_defn.cpp:556


#ifndef _TAO_TYPECODE_CORBA_STRING_10_GUARD
#define _TAO_TYPECODE_CORBA_STRING_10_GUARD

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

namespace TAO
{
  namespace TypeCode
  {
    namespace
    {
      TAO::TypeCode::String<TAO::Null_RefCount_Policy>
        CORBA_STRING_10 (
          ::CORBA::tk_string,
          10U);

      ::CORBA::TypeCode_ptr const tc_CORBA_STRING_10 =
        &CORBA_STRING_10;
    }
  }
}

TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_TYPECODE_CORBA_STRING_10_GUARD */


#ifndef _TAO_TYPECODE_Test_seq_bds_str_GUARD
#define _TAO_TYPECODE_Test_seq_bds_str_GUARD

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

namespace TAO
{
  namespace TypeCode
  {
    namespace
    {
      TAO::TypeCode::Sequence< ::CORBA::TypeCode_ptr const *,
                              TAO::Null_RefCount_Policy>
        Test_seq_bds_str_0 (
          ::CORBA::tk_sequence,
          &TAO::TypeCode::tc_CORBA_STRING_10,
          0U);

      ::CORBA::TypeCode_ptr const tc_Test_seq_bds_str_0 =
        &Test_seq_bds_str_0;
    }
  }
}

TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_TYPECODE_Test_seq_bds_str_GUARD */

static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_Test_seq_bds_str (
    ::CORBA::tk_alias,
    "IDL:Test/seq_bds_str:1.0",
    "seq_bds_str",
    &TAO::TypeCode::tc_Test_seq_bds_str_0);


namespace Test
{
  ::CORBA::TypeCode_ptr const _tc_seq_bds_str =
    &_tao_tc_Test_seq_bds_str;
}

// TAO_IDL - Generated from
// be/be_visitor_array/array_cs.cpp:94

Test::arr_bd_str_slice *
Test::arr_bd_str_dup (const Test::arr_bd_str_slice *_tao_src_array)
{
  Test::arr_bd_str_slice *_tao_dup_array =
    Test::arr_bd_str_alloc ();

  if (!_tao_dup_array)
    {
      return static_cast <Test::arr_bd_str_slice *> (0);
    }

  Test::arr_bd_str_copy (_tao_dup_array, _tao_src_array);
  return _tao_dup_array;
}

Test::arr_bd_str_slice *
Test::arr_bd_str_alloc (void)
{
  Test::arr_bd_str_slice *retval = 0;
  ACE_NEW_RETURN (retval, ::TAO::String_Manager[1], 0);
  return retval;
}

void
Test::arr_bd_str_free (
    Test::arr_bd_str_slice *_tao_slice)
{
  delete [] _tao_slice;
}

void
Test::arr_bd_str_copy (
    Test::arr_bd_str_slice * _tao_to,
    const Test::arr_bd_str_slice *_tao_from)
{
  // Copy each individual element.
  for ( ::CORBA::ULong i0 = 0; i0 < 1; ++i0)
    {
      _tao_to[i0] = _tao_from[i0];
    }
}

// TAO_IDL - Generated from
// be/be_visitor_typecode/alias_typecode.cpp:49



// TAO_IDL - Generated from
// be/be_visitor_typecode/typecode_defn.cpp:298


#ifndef _TAO_TYPECODE_Test_arr_bd_str_GUARD
#define _TAO_TYPECODE_Test_arr_bd_str_GUARD

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

namespace TAO
{
  namespace TypeCode
  {
    namespace
    {
      TAO::TypeCode::Sequence< ::CORBA::TypeCode_ptr const *,
                              TAO::Null_RefCount_Policy>
        Test_arr_bd_str_1 (
          ::CORBA::tk_array,
          &Test::_tc_bounded_string,
          1U);

      ::CORBA::TypeCode_ptr const tc_Test_arr_bd_str =
        &Test_arr_bd_str_1;
    }
  }
}

TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_TYPECODE_Test_arr_bd_str_GUARD */
static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_Test_arr_bd_str (
    ::CORBA::tk_alias,
    "IDL:Test/arr_bd_str:1.0",
    "arr_bd_str",
    &TAO::TypeCode::tc_Test_arr_bd_str);


namespace Test
{
  ::CORBA::TypeCode_ptr const _tc_arr_bd_str =
    &_tao_tc_Test_arr_bd_str;
}

// TAO_IDL - Generated from
// be/be_visitor_array/array_cs.cpp:94

Test::arr_bds_str_slice *
Test::arr_bds_str_dup (const Test::arr_bds_str_slice *_tao_src_array)
{
  Test::arr_bds_str_slice *_tao_dup_array =
    Test::arr_bds_str_alloc ();

  if (!_tao_dup_array)
    {
      return static_cast <Test::arr_bds_str_slice *> (0);
    }

  Test::arr_bds_str_copy (_tao_dup_array, _tao_src_array);
  return _tao_dup_array;
}

Test::arr_bds_str_slice *
Test::arr_bds_str_alloc (void)
{
  Test::arr_bds_str_slice *retval = 0;
  ACE_NEW_RETURN (retval, ::TAO::String_Manager[1], 0);
  return retval;
}

void
Test::arr_bds_str_free (
    Test::arr_bds_str_slice *_tao_slice)
{
  delete [] _tao_slice;
}

void
Test::arr_bds_str_copy (
    Test::arr_bds_str_slice * _tao_to,
    const Test::arr_bds_str_slice *_tao_from)
{
  // Copy each individual element.
  for ( ::CORBA::ULong i0 = 0; i0 < 1; ++i0)
    {
      _tao_to[i0] = _tao_from[i0];
    }
}

// TAO_IDL - Generated from
// be/be_visitor_typecode/alias_typecode.cpp:49



// TAO_IDL - Generated from
// be/be_visitor_typecode/typecode_defn.cpp:298



// TAO_IDL - Generated from
// be/be_visitor_typecode/typecode_defn.cpp:556


#ifndef _TAO_TYPECODE_CORBA_STRING_10_GUARD
#define _TAO_TYPECODE_CORBA_STRING_10_GUARD

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

namespace TAO
{
  namespace TypeCode
  {
    namespace
    {
      TAO::TypeCode::String<TAO::Null_RefCount_Policy>
        CORBA_STRING_10 (
          ::CORBA::tk_string,
          10U);

      ::CORBA::TypeCode_ptr const tc_CORBA_STRING_10 =
        &CORBA_STRING_10;
    }
  }
}

TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_TYPECODE_CORBA_STRING_10_GUARD */


#ifndef _TAO_TYPECODE_Test_arr_bds_str_GUARD
#define _TAO_TYPECODE_Test_arr_bds_str_GUARD

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

namespace TAO
{
  namespace TypeCode
  {
    namespace
    {
      TAO::TypeCode::Sequence< ::CORBA::TypeCode_ptr const *,
                              TAO::Null_RefCount_Policy>
        Test_arr_bds_str_1 (
          ::CORBA::tk_array,
          &TAO::TypeCode::tc_CORBA_STRING_10,
          1U);

      ::CORBA::TypeCode_ptr const tc_Test_arr_bds_str =
        &Test_arr_bds_str_1;
    }
  }
}

TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_TYPECODE_Test_arr_bds_str_GUARD */
static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_Test_arr_bds_str (
    ::CORBA::tk_alias,
    "IDL:Test/arr_bds_str:1.0",
    "arr_bds_str",
    &TAO::TypeCode::tc_Test_arr_bds_str);


namespace Test
{
  ::CORBA::TypeCode_ptr const _tc_arr_bds_str =
    &_tao_tc_Test_arr_bds_str;
}

// TAO_IDL - Generated from
// be/be_visitor_typecode/struct_typecode.cpp:86

static TAO::TypeCode::Struct_Field<
  char const *,
  ::CORBA::TypeCode_ptr const *> const
    _tao_fields_Test_sct[] =
      {
        { "a", &CORBA::_tc_string },
        { "b", &Test::_tc_bounded_string },
        { "c", &Test::_tc_bounded_string }
      };

static TAO::TypeCode::Struct<
  char const *,
  ::CORBA::TypeCode_ptr const *,
  TAO::TypeCode::Struct_Field<
    char const *,
    ::CORBA::TypeCode_ptr const *> const *,
  TAO::Null_RefCount_Policy>
_tao_tc_Test_sct (
  ::CORBA::tk_struct,
  "IDL:Test/sct:1.0",
  "sct",
  _tao_fields_Test_sct,
  3);


namespace Test
{
  ::CORBA::TypeCode_ptr const _tc_sct =
    &_tao_tc_Test_sct;
}

// TAO_IDL - Generated from
// be/be_visitor_structure/structure_cs.cpp:56

void
Test::sct::_tao_any_destructor (
    void *_tao_void_pointer)
{
  sct *_tao_tmp_pointer =
    static_cast<sct *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

// TAO_IDL - Generated from
// be/be_visitor_typecode/enum_typecode.cpp:29
static char const * const _tao_enumerators_Test_string_field[] =
  {
    "PLAIN",
    "BOUNDED",
    "TYPEDEFED"

  };

static TAO::TypeCode::Enum<char const *,
                           char const * const *,
                           TAO::Null_RefCount_Policy>
  _tao_tc_Test_string_field (
    "IDL:Test/string_field:1.0",
    "string_field",
    _tao_enumerators_Test_string_field,
    3);


namespace Test
{
  ::CORBA::TypeCode_ptr const _tc_string_field =
    &_tao_tc_Test_string_field;
}

// TAO_IDL - Generated from
// be/be_visitor_union/union_cs.cpp:76

Test::unn::unn (void)
{
  ACE_OS::memset (&this->u_, 0, sizeof (this->u_));
  this->disc_ = Test::PLAIN;
}

Test::unn::unn (const ::Test::unn &u)
{
  this->disc_ = u.disc_;
  switch (this->disc_)
  {
    case Test::BOUNDED:
    {
      this->u_.b_ = ::CORBA::string_dup (u.u_.b_);
    }
    break;
    case Test::TYPEDEFED:
    {
      this->u_.c_ = ::CORBA::string_dup (u.u_.c_);
    }
    break;
    default:
    {
      this->u_.a_ = ::CORBA::string_dup (u.u_.a_);
    }
    break;
  }
}

Test::unn::~unn (void)
{
  // Finalize.
  this->_reset ();
}

void Test::unn::_tao_any_destructor (void *_tao_void_pointer)
{
  unn *tmp =
    static_cast<unn *> (_tao_void_pointer);
  delete tmp;
}

Test::unn &
Test::unn::operator= (const ::Test::unn &u)
{
  if (&u == this)
    {
      return *this;
    }

  this->_reset ();
  this->disc_ = u.disc_;

  switch (this->disc_)
  {
    case Test::BOUNDED:
    {
      this->u_.b_ = ::CORBA::string_dup (u.u_.b_);
    }
    break;
    case Test::TYPEDEFED:
    {
      this->u_.c_ = ::CORBA::string_dup (u.u_.c_);
    }
    break;
    default:
    {
      this->u_.a_ = ::CORBA::string_dup (u.u_.a_);
    }
    break;
  }

  return *this;
}

/// Reset method to reset old values of a union.
void Test::unn::_reset (void)
{
  switch (this->disc_)
  {

    case Test::BOUNDED:
      ::CORBA::string_free (this->u_.b_);
      this->u_.b_ = 0;

    break;

    case Test::TYPEDEFED:
      ::CORBA::string_free (this->u_.c_);
      this->u_.c_ = 0;

    break;

    default:
      ::CORBA::string_free (this->u_.a_);
      this->u_.a_ = 0;

    break;

  }
}

// TAO_IDL - Generated from
// be/be_visitor_typecode/union_typecode.cpp:65

static TAO::TypeCode::Case_T<Test::string_field, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_Test_unn__0 (Test::BOUNDED, "b", &Test::_tc_bounded_string);
static TAO::TypeCode::Case_T<Test::string_field, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_Test_unn__1 (Test::TYPEDEFED, "c", &Test::_tc_bounded_string);
static TAO::TypeCode::Case_T<Test::string_field, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_Test_unn__2 (Test::PLAIN, "a", &CORBA::_tc_string);

static TAO::TypeCode::Case<char const *, ::CORBA::TypeCode_ptr const *> const * const _tao_cases_Test_unn[] =
  {
    &_tao_cases_Test_unn__0,
    &_tao_cases_Test_unn__1,
    &_tao_cases_Test_unn__2
  };

static TAO::TypeCode::Union<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::TypeCode::Case<char const *, ::CORBA::TypeCode_ptr const *> const * const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_Test_unn (
    "IDL:Test/unn:1.0",
    "unn",
    &Test::_tc_string_field,
    _tao_cases_Test_unn,
    sizeof (_tao_cases_Test_unn)/sizeof (_tao_cases_Test_unn[0]),
    2);


namespace Test
{
  ::CORBA::TypeCode_ptr const _tc_unn =
    &_tao_tc_Test_unn;
}

// TAO_IDL - Generated from
// be/be_visitor_exception/exception_ctor.cpp:51

Test::exc::exc (
    const char * _tao_a,
    const char * _tao_b,
    const char * _tao_c)
  : ::CORBA::UserException (
        "IDL:Test/exc:1.0",
        "exc"
      )
{
  this->a = ::CORBA::string_dup (_tao_a);
  this->b = ::CORBA::string_dup (_tao_b);
  this->c = ::CORBA::string_dup (_tao_c);
}



// TAO_IDL - Generated from
// be/be_visitor_exception/exception_cs.cpp:98

Test::exc::exc (void)
  : ::CORBA::UserException (
        "IDL:Test/exc:1.0",
        "exc"
      )
{
}

Test::exc::~exc (void)
{
}

Test::exc::exc (const ::Test::exc &_tao_excp)
  : ::CORBA::UserException (
        _tao_excp._rep_id (),
        _tao_excp._name ()
      )
{
  this->a = ::CORBA::string_dup (_tao_excp.a.in ());
  this->b = ::CORBA::string_dup (_tao_excp.b.in ());
  this->c = ::CORBA::string_dup (_tao_excp.c.in ());
}

Test::exc&
Test::exc::operator= (const ::Test::exc &_tao_excp)
{
  this->::CORBA::UserException::operator= (_tao_excp);
  this->a = ::CORBA::string_dup (_tao_excp.a.in ());
  this->b = ::CORBA::string_dup (_tao_excp.b.in ());
  this->c = ::CORBA::string_dup (_tao_excp.c.in ());
  return *this;
}

void Test::exc::_tao_any_destructor (void *_tao_void_pointer)
{
  exc *_tao_tmp_pointer =
    static_cast<exc *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

Test::exc *
Test::exc::_downcast ( ::CORBA::Exception *_tao_excp)
{
  return dynamic_cast<exc *> (_tao_excp);
}

const Test::exc *
Test::exc::_downcast ( ::CORBA::Exception const *_tao_excp)
{
  return dynamic_cast<const exc *> (_tao_excp);
}

::CORBA::Exception *Test::exc::_alloc (void)
{
  ::CORBA::Exception *retval = 0;
  ACE_NEW_RETURN (retval, ::Test::exc, 0);
  return retval;
}

::CORBA::Exception *
Test::exc::_tao_duplicate (void) const
{
  ::CORBA::Exception *result = 0;
  ACE_NEW_RETURN (
      result,
      ::Test::exc (*this),
      0
    );
  return result;
}

void Test::exc::_raise (void) const
{
  throw *this;
}

void Test::exc::_tao_encode (TAO_OutputCDR &cdr) const
{
  if (!(cdr << *this))
    {
      throw ::CORBA::MARSHAL ();
    }
}

void Test::exc::_tao_decode (TAO_InputCDR &cdr)
{
  if (!(cdr >> *this))
    {
      throw ::CORBA::MARSHAL ();
    }
}

// TAO extension - the virtual _type method.
::CORBA::TypeCode_ptr Test::exc::_tao_type (void) const
{
  return ::Test::_tc_exc;
}

// TAO_IDL - Generated from
// be/be_visitor_typecode/struct_typecode.cpp:86

static TAO::TypeCode::Struct_Field<
  char const *,
  ::CORBA::TypeCode_ptr const *> const
    _tao_fields_Test_exc[] =
      {
        { "a", &CORBA::_tc_string },
        { "b", &Test::_tc_bounded_string },
        { "c", &Test::_tc_bounded_string }
      };

static TAO::TypeCode::Struct<
  char const *,
  ::CORBA::TypeCode_ptr const *,
  TAO::TypeCode::Struct_Field<
    char const *,
    ::CORBA::TypeCode_ptr const *> const *,
  TAO::Null_RefCount_Policy>
_tao_tc_Test_exc (
  ::CORBA::tk_except,
  "IDL:Test/exc:1.0",
  "exc",
  _tao_fields_Test_exc,
  3);


namespace Test
{
  ::CORBA::TypeCode_ptr const _tc_exc =
    &_tao_tc_Test_exc;
}

// TAO_IDL - Generated from
// be/be_visitor_typecode/alias_typecode.cpp:49



// TAO_IDL - Generated from
// be/be_visitor_typecode/typecode_defn.cpp:556


#ifndef _TAO_TYPECODE_CORBA_STRING_10_GUARD
#define _TAO_TYPECODE_CORBA_STRING_10_GUARD

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

namespace TAO
{
  namespace TypeCode
  {
    namespace
    {
      TAO::TypeCode::String<TAO::Null_RefCount_Policy>
        CORBA_STRING_10 (
          ::CORBA::tk_string,
          10U);

      ::CORBA::TypeCode_ptr const tc_CORBA_STRING_10 =
        &CORBA_STRING_10;
    }
  }
}

TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_TYPECODE_CORBA_STRING_10_GUARD */

static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_Test_val_bd_str (
    ::CORBA::tk_value_box,
    "IDL:Test/val_bd_str:1.0",
    "val_bd_str",
    &TAO::TypeCode::tc_CORBA_STRING_10);


namespace Test
{
  ::CORBA::TypeCode_ptr const _tc_val_bd_str =
    &_tao_tc_Test_val_bd_str;
}

// TAO_IDL - Generated from
// be/be_visitor_valuebox/valuebox_cs.cpp:52

void
TAO::Value_Traits<Test::val_bd_str>::add_ref (
    Test::val_bd_str * p
  )
{
  ::CORBA::add_ref (p);
}

void
TAO::Value_Traits<Test::val_bd_str>::remove_ref (
    Test::val_bd_str * p
  )
{
  ::CORBA::remove_ref (p);
}

void
TAO::Value_Traits<Test::val_bd_str>::release (
    Test::val_bd_str * p
  )
{
  ::CORBA::remove_ref (p);
}

Test::val_bd_str *
Test::val_bd_str::_downcast ( ::CORBA::ValueBase *v)
{
  return dynamic_cast< ::Test::val_bd_str * > (v);
}

::CORBA::ValueBase *
Test::val_bd_str::_copy_value (void)
{
  ::CORBA::ValueBase *result = 0;
  ACE_NEW_RETURN (
    result,
    val_bd_str (*this),
    0);

  return result;
}

const char *
Test::val_bd_str::_tao_obv_repository_id (void) const
{
  return this->_tao_obv_static_repository_id ();
}

void
Test::val_bd_str::_tao_obv_truncatable_repo_ids (Repository_Id_List& ids) const
{
  ids.push_back (this->_tao_obv_static_repository_id ());
}

::CORBA::Boolean
Test::val_bd_str::_tao_match_formal_type (ptrdiff_t ) const
{
  return true;
}

void
Test::val_bd_str::_tao_any_destructor (void *_tao_void_pointer)
{
  val_bd_str *_tao_tmp_pointer =
    static_cast<val_bd_str *> (_tao_void_pointer);
  ::CORBA::remove_ref (_tao_tmp_pointer);
}

// TAO extension - the virtual _type method.
::CORBA::TypeCode_ptr Test::val_bd_str::_tao_type (void) const
{
  return ::Test::_tc_val_bd_str;
}

::CORBA::Boolean
Test::val_bd_str::_tao_unmarshal (
    TAO_InputCDR &strm,
    val_bd_str *&vb_object
  )
{
  ::CORBA::Boolean is_null_object = false;
  ::CORBA::Boolean is_indirected = false;
  TAO_InputCDR indrected_strm ((size_t) 0);
  if ( ::CORBA::ValueBase::_tao_validate_box_type (
        strm, indrected_strm,
        val_bd_str::_tao_obv_static_repository_id (),
        is_null_object, is_indirected
      ) == false)
    {
      return false;
    }

  vb_object = 0;
  if (is_null_object)
    {
      return true;
    }

  if (is_indirected)
    {
      return Test::val_bd_str::_tao_unmarshal (
             indrected_strm, vb_object);
    }

  ACE_NEW_RETURN (
    vb_object,
    val_bd_str,
    false);

  return (strm >> ::ACE_InputCDR::to_string (vb_object->_pd_value, 10));
}

::CORBA::Boolean
Test::val_bd_str::_tao_unmarshal_v (TAO_InputCDR &)
{
  return true;
}



// TAO_IDL - Generated from
// be/be_visitor_valuebox/valuebox_cs.cpp:620

Test::val_bd_str::~val_bd_str (void)
{
}

::CORBA::Boolean
Test::val_bd_str::_tao_marshal_v (TAO_OutputCDR & strm) const
{
  return (strm << ::ACE_OutputCDR::from_string (this->_pd_value, 10));
}



// TAO_IDL - Generated from
// be/be_visitor_typecode/alias_typecode.cpp:49



// TAO_IDL - Generated from
// be/be_visitor_typecode/typecode_defn.cpp:556


#ifndef _TAO_TYPECODE_CORBA_STRING_10_GUARD
#define _TAO_TYPECODE_CORBA_STRING_10_GUARD

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

namespace TAO
{
  namespace TypeCode
  {
    namespace
    {
      TAO::TypeCode::String<TAO::Null_RefCount_Policy>
        CORBA_STRING_10 (
          ::CORBA::tk_string,
          10U);

      ::CORBA::TypeCode_ptr const tc_CORBA_STRING_10 =
        &CORBA_STRING_10;
    }
  }
}

TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_TYPECODE_CORBA_STRING_10_GUARD */

static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_Test_val_bds_str (
    ::CORBA::tk_value_box,
    "IDL:Test/val_bds_str:1.0",
    "val_bds_str",
    &TAO::TypeCode::tc_CORBA_STRING_10);


namespace Test
{
  ::CORBA::TypeCode_ptr const _tc_val_bds_str =
    &_tao_tc_Test_val_bds_str;
}

// TAO_IDL - Generated from
// be/be_visitor_valuebox/valuebox_cs.cpp:52

void
TAO::Value_Traits<Test::val_bds_str>::add_ref (
    Test::val_bds_str * p
  )
{
  ::CORBA::add_ref (p);
}

void
TAO::Value_Traits<Test::val_bds_str>::remove_ref (
    Test::val_bds_str * p
  )
{
  ::CORBA::remove_ref (p);
}

void
TAO::Value_Traits<Test::val_bds_str>::release (
    Test::val_bds_str * p
  )
{
  ::CORBA::remove_ref (p);
}

Test::val_bds_str *
Test::val_bds_str::_downcast ( ::CORBA::ValueBase *v)
{
  return dynamic_cast< ::Test::val_bds_str * > (v);
}

::CORBA::ValueBase *
Test::val_bds_str::_copy_value (void)
{
  ::CORBA::ValueBase *result = 0;
  ACE_NEW_RETURN (
    result,
    val_bds_str (*this),
    0);

  return result;
}

const char *
Test::val_bds_str::_tao_obv_repository_id (void) const
{
  return this->_tao_obv_static_repository_id ();
}

void
Test::val_bds_str::_tao_obv_truncatable_repo_ids (Repository_Id_List& ids) const
{
  ids.push_back (this->_tao_obv_static_repository_id ());
}

::CORBA::Boolean
Test::val_bds_str::_tao_match_formal_type (ptrdiff_t ) const
{
  return true;
}

void
Test::val_bds_str::_tao_any_destructor (void *_tao_void_pointer)
{
  val_bds_str *_tao_tmp_pointer =
    static_cast<val_bds_str *> (_tao_void_pointer);
  ::CORBA::remove_ref (_tao_tmp_pointer);
}

// TAO extension - the virtual _type method.
::CORBA::TypeCode_ptr Test::val_bds_str::_tao_type (void) const
{
  return ::Test::_tc_val_bds_str;
}

::CORBA::Boolean
Test::val_bds_str::_tao_unmarshal (
    TAO_InputCDR &strm,
    val_bds_str *&vb_object
  )
{
  ::CORBA::Boolean is_null_object = false;
  ::CORBA::Boolean is_indirected = false;
  TAO_InputCDR indrected_strm ((size_t) 0);
  if ( ::CORBA::ValueBase::_tao_validate_box_type (
        strm, indrected_strm,
        val_bds_str::_tao_obv_static_repository_id (),
        is_null_object, is_indirected
      ) == false)
    {
      return false;
    }

  vb_object = 0;
  if (is_null_object)
    {
      return true;
    }

  if (is_indirected)
    {
      return Test::val_bds_str::_tao_unmarshal (
             indrected_strm, vb_object);
    }

  ACE_NEW_RETURN (
    vb_object,
    val_bds_str,
    false);

  return (strm >> ::ACE_InputCDR::to_string (vb_object->_pd_value, 10));
}

::CORBA::Boolean
Test::val_bds_str::_tao_unmarshal_v (TAO_InputCDR &)
{
  return true;
}



// TAO_IDL - Generated from
// be/be_visitor_valuebox/valuebox_cs.cpp:620

Test::val_bds_str::~val_bds_str (void)
{
}

::CORBA::Boolean
Test::val_bds_str::_tao_marshal_v (TAO_OutputCDR & strm) const
{
  return (strm << ::ACE_OutputCDR::from_string (this->_pd_value, 10));
}



// TAO_IDL - Generated from
// be/be_visitor_typecode/alias_typecode.cpp:49



// TAO_IDL - Generated from
// be/be_visitor_typecode/typecode_defn.cpp:298



// TAO_IDL - Generated from
// be/be_visitor_typecode/typecode_defn.cpp:556


#ifndef _TAO_TYPECODE_CORBA_STRING_10_GUARD
#define _TAO_TYPECODE_CORBA_STRING_10_GUARD

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

namespace TAO
{
  namespace TypeCode
  {
    namespace
    {
      TAO::TypeCode::String<TAO::Null_RefCount_Policy>
        CORBA_STRING_10 (
          ::CORBA::tk_string,
          10U);

      ::CORBA::TypeCode_ptr const tc_CORBA_STRING_10 =
        &CORBA_STRING_10;
    }
  }
}

TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_TYPECODE_CORBA_STRING_10_GUARD */


#ifndef _TAO_TYPECODE_Test_arr_bds_str_GUARD
#define _TAO_TYPECODE_Test_arr_bds_str_GUARD

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

namespace TAO
{
  namespace TypeCode
  {
    namespace
    {
      TAO::TypeCode::Sequence< ::CORBA::TypeCode_ptr const *,
                              TAO::Null_RefCount_Policy>
        Test_arr_bds_str_1 (
          ::CORBA::tk_array,
          &TAO::TypeCode::tc_CORBA_STRING_10,
          1U);

      ::CORBA::TypeCode_ptr const tc_Test_arr_bds_str =
        &Test_arr_bds_str_1;
    }
  }
}

TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_TYPECODE_Test_arr_bds_str_GUARD */
static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_Test_val_arr_bd_str (
    ::CORBA::tk_value_box,
    "IDL:Test/val_arr_bd_str:1.0",
    "val_arr_bd_str",
    &TAO::TypeCode::tc_Test_arr_bds_str);


namespace Test
{
  ::CORBA::TypeCode_ptr const _tc_val_arr_bd_str =
    &_tao_tc_Test_val_arr_bd_str;
}

// TAO_IDL - Generated from
// be/be_visitor_valuebox/valuebox_cs.cpp:52

void
TAO::Value_Traits<Test::val_arr_bd_str>::add_ref (
    Test::val_arr_bd_str * p
  )
{
  ::CORBA::add_ref (p);
}

void
TAO::Value_Traits<Test::val_arr_bd_str>::remove_ref (
    Test::val_arr_bd_str * p
  )
{
  ::CORBA::remove_ref (p);
}

void
TAO::Value_Traits<Test::val_arr_bd_str>::release (
    Test::val_arr_bd_str * p
  )
{
  ::CORBA::remove_ref (p);
}

Test::val_arr_bd_str *
Test::val_arr_bd_str::_downcast ( ::CORBA::ValueBase *v)
{
  return dynamic_cast< ::Test::val_arr_bd_str * > (v);
}

::CORBA::ValueBase *
Test::val_arr_bd_str::_copy_value (void)
{
  ::CORBA::ValueBase *result = 0;
  ACE_NEW_RETURN (
    result,
    val_arr_bd_str (*this),
    0);

  return result;
}

const char *
Test::val_arr_bd_str::_tao_obv_repository_id (void) const
{
  return this->_tao_obv_static_repository_id ();
}

void
Test::val_arr_bd_str::_tao_obv_truncatable_repo_ids (Repository_Id_List& ids) const
{
  ids.push_back (this->_tao_obv_static_repository_id ());
}

::CORBA::Boolean
Test::val_arr_bd_str::_tao_match_formal_type (ptrdiff_t ) const
{
  return true;
}

void
Test::val_arr_bd_str::_tao_any_destructor (void *_tao_void_pointer)
{
  val_arr_bd_str *_tao_tmp_pointer =
    static_cast<val_arr_bd_str *> (_tao_void_pointer);
  ::CORBA::remove_ref (_tao_tmp_pointer);
}

// TAO extension - the virtual _type method.
::CORBA::TypeCode_ptr Test::val_arr_bd_str::_tao_type (void) const
{
  return ::Test::_tc_val_arr_bd_str;
}

::CORBA::Boolean
Test::val_arr_bd_str::_tao_unmarshal (
    TAO_InputCDR &strm,
    val_arr_bd_str *&vb_object
  )
{
  ::CORBA::Boolean is_null_object = false;
  ::CORBA::Boolean is_indirected = false;
  TAO_InputCDR indrected_strm ((size_t) 0);
  if ( ::CORBA::ValueBase::_tao_validate_box_type (
        strm, indrected_strm,
        val_arr_bd_str::_tao_obv_static_repository_id (),
        is_null_object, is_indirected
      ) == false)
    {
      return false;
    }

  vb_object = 0;
  if (is_null_object)
    {
      return true;
    }

  if (is_indirected)
    {
      return Test::val_arr_bd_str::_tao_unmarshal (
             indrected_strm, vb_object);
    }

  ACE_NEW_RETURN (
    vb_object,
    val_arr_bd_str,
    false);

  Test::arr_bds_str_forany temp (vb_object->_boxed_inout ());
  return (strm >> temp);
}

::CORBA::Boolean
Test::val_arr_bd_str::_tao_unmarshal_v (TAO_InputCDR &)
{
  return true;
}



// TAO_IDL - Generated from
// be/be_visitor_valuebox/valuebox_cs.cpp:333

Test::val_arr_bd_str::~val_arr_bd_str (void)
{
}

::CORBA::Boolean
Test::val_arr_bd_str::_tao_marshal_v (TAO_OutputCDR & strm) const
{
  Test::arr_bds_str_forany temp (this->_pd_value.ptr ());
  return (strm << temp);
}



// TAO_IDL - Generated from
// be/be_visitor_typecode/value_typecode.cpp:65

static TAO::TypeCode::Value_Field<char const *, ::CORBA::TypeCode_ptr const *> const _tao_fields_Test_vtp[] =
  {
    { "a", &CORBA::_tc_string, ::CORBA::PUBLIC_MEMBER },
    { "b", &Test::_tc_bounded_string, ::CORBA::PUBLIC_MEMBER },
    { "c", &Test::_tc_bounded_string, ::CORBA::PUBLIC_MEMBER }

  };
static TAO::TypeCode::Value<char const *,
                     ::CORBA::TypeCode_ptr const *,
                     TAO::TypeCode::Value_Field<char const *, ::CORBA::TypeCode_ptr const *> const *,
                     TAO::Null_RefCount_Policy>
  _tao_tc_Test_vtp (
    ::CORBA::tk_value,
    "IDL:Test/vtp:1.0",
    "vtp",
    ::CORBA::VM_NONE,
    &::CORBA::_tc_null,
    _tao_fields_Test_vtp,
    3);


namespace Test
{
  ::CORBA::TypeCode_ptr const _tc_vtp =
    &_tao_tc_Test_vtp;
}

// TAO_IDL - Generated from
// be/be_visitor_valuetype/valuetype_cs.cpp:53

void
TAO::Value_Traits<Test::vtp>::add_ref (
    Test::vtp * p)
{
  ::CORBA::add_ref (p);
}

void
TAO::Value_Traits<Test::vtp>::remove_ref (
    Test::vtp * p)
{
  ::CORBA::remove_ref (p);
}

void
TAO::Value_Traits<Test::vtp>::release (
    Test::vtp * p)
{
  ::CORBA::remove_ref (p);
}

Test::vtp *
Test::vtp::_downcast ( ::CORBA::ValueBase *v)
{
  return dynamic_cast< ::Test::vtp * > (v);
}

const char *
Test::vtp::_tao_obv_repository_id (void) const
{
  return this->_tao_obv_static_repository_id ();
}

void
Test::vtp::_tao_obv_truncatable_repo_ids (Repository_Id_List& ids) const
{
  ids.push_back (this->_tao_obv_static_repository_id ());
}

void
Test::vtp::_tao_any_destructor (void *_tao_void_pointer)
{
  vtp *_tao_tmp_pointer =
    static_cast<vtp *> (_tao_void_pointer);
  ::CORBA::remove_ref (_tao_tmp_pointer);
}

// TAO extension - the virtual _type method.
::CORBA::TypeCode_ptr Test::vtp::_tao_type (void) const
{
  return ::Test::_tc_vtp;
}

Test::vtp::~vtp (void)
{}

::CORBA::Boolean
Test::vtp::_tao_marshal_v (TAO_OutputCDR & strm) const
{
  TAO_ChunkInfo ci (this->is_truncatable_ || this->chunking_);
  return this->_tao_marshal__Test_vtp (strm, ci);
}

::CORBA::Boolean
Test::vtp::_tao_unmarshal_v (TAO_InputCDR & strm)
{
  TAO_ChunkInfo ci (this->is_truncatable_ || this->chunking_, 1);
  return this->_tao_unmarshal__Test_vtp (strm,ci);
}

::CORBA::Boolean
Test::vtp::_tao_match_formal_type (ptrdiff_t formal_type_id) const
{
  return formal_type_id == reinterpret_cast<ptrdiff_t> (Test::vtp::_downcast);
}

::CORBA::Boolean
Test::vtp::_tao_unmarshal (
    TAO_InputCDR &strm,
    vtp *&new_object
  )
{
  ::CORBA::ValueBase *base = 0;
  ::CORBA::Boolean is_indirected = false;
  ::CORBA::Boolean is_null_object = false;
  ::CORBA::Boolean const retval =
    ::CORBA::ValueBase::_tao_unmarshal_pre (
        strm,
        base,
        vtp::_tao_obv_static_repository_id (),
        is_null_object,
        is_indirected
      );

  ::CORBA::ValueBase_var owner (base);

  if (!retval)
    return false;

  if (is_null_object)
    return true;

  if (!is_indirected && !base->_tao_unmarshal_v (strm))
    return false;

  // Now base must point to the unmarshaled object.
  // Align the pointer to the right subobject.
  new_object = vtp::_downcast (base);
  if (0 == new_object)
    return false;

  if (is_indirected)
    new_object->_add_ref ();

  owner._retn ();
  return true;
}

// TAO_IDL - Generated from
// be/be_visitor_valuetype/valuetype_init_cs.cpp:73

Test::vtp_init::vtp_init (void)
{
}

Test::vtp_init::~vtp_init (void)
{
}

Test::vtp_init *
Test::vtp_init::_downcast ( ::CORBA::ValueFactoryBase *v)
{
  return dynamic_cast< ::Test::vtp_init * > (v);
}

const char*
Test::vtp_init::tao_repository_id (void)
{
  return ::Test::vtp::_tao_obv_static_repository_id ();
}

::CORBA::ValueBase *
Test::vtp_init::create_for_unmarshal (void)
{
  ::CORBA::ValueBase *ret_val = 0;
  ACE_NEW_THROW_EX (
      ret_val,
      OBV_Test::vtp,
      ::CORBA::NO_MEMORY ()
    );
  return ret_val;
}

// TAO_IDL - Generated from
// be/be_visitor_interface/interface_cs.cpp:48

// Traits specializations for Test::A.

Test::A_ptr
TAO::Objref_Traits<Test::A>::duplicate (
    Test::A_ptr p)
{
  return Test::A::_duplicate (p);
}

void
TAO::Objref_Traits<Test::A>::release (
    Test::A_ptr p)
{
  ::CORBA::release (p);
}

Test::A_ptr
TAO::Objref_Traits<Test::A>::nil (void)
{
  return Test::A::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<Test::A>::marshal (
    const Test::A_ptr p,
    TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

// TAO_IDL - Generated from
// be/be_visitor_typecode/enum_typecode.cpp:29
static char const * const _tao_enumerators_Test_A_FailOn[] =
  {
    "ARG1",
    "ARG2",
    "ARG3",
    "RETN"

  };

static TAO::TypeCode::Enum<char const *,
                           char const * const *,
                           TAO::Null_RefCount_Policy>
  _tao_tc_Test_A_FailOn (
    "IDL:Test/A/FailOn:1.0",
    "FailOn",
    _tao_enumerators_Test_A_FailOn,
    4);

::CORBA::TypeCode_ptr const Test::A::_tc_FailOn =
  &_tao_tc_Test_A_FailOn;

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:88

char *
Test::A::method (
  ::Test::A::FailOn where,
  const char * arg1,
  ::CORBA::String_out arg2,
  char *& arg3)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }

  TAO::Arg_Traits< ::TAO::bounded_string_10>::ret_val _tao_retval;
  TAO::Arg_Traits< ::Test::A::FailOn>::in_arg_val _tao_where (where);
  TAO::Arg_Traits< ::TAO::bounded_string_10>::in_arg_val _tao_arg1 (arg1);
  TAO::Arg_Traits< ::TAO::bounded_string_10>::out_arg_val _tao_arg2 (arg2);
  TAO::Arg_Traits< ::TAO::bounded_string_10>::inout_arg_val _tao_arg3 (arg3);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_where,
      &_tao_arg1,
      &_tao_arg2,
      &_tao_arg3
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      5,
      "method",
      6,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY

    );

  _tao_call.invoke (0, 0);

  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:88

char *
Test::A::method_s (
  ::Test::A::FailOn where,
  const char * arg1,
  ::CORBA::String_out arg2,
  char *& arg3)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }

  TAO::Arg_Traits< ::TAO::bounded_string_10>::ret_val _tao_retval;
  TAO::Arg_Traits< ::Test::A::FailOn>::in_arg_val _tao_where (where);
  TAO::Arg_Traits< ::TAO::bounded_string_10>::in_arg_val _tao_arg1 (arg1);
  TAO::Arg_Traits< ::TAO::bounded_string_10>::out_arg_val _tao_arg2 (arg2);
  TAO::Arg_Traits< ::TAO::bounded_string_10>::inout_arg_val _tao_arg3 (arg3);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_where,
      &_tao_arg1,
      &_tao_arg2,
      &_tao_arg3
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      5,
      "method_s",
      8,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY

    );

  _tao_call.invoke (0, 0);

  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:88

::Test::seq_bd_str *
Test::A::seq_method (
  ::Test::A::FailOn where,
  const ::Test::seq_bd_str & arg1,
  ::Test::seq_bd_str_out arg2,
  ::Test::seq_bd_str & arg3)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }

  TAO::Arg_Traits< ::Test::seq_bd_str>::ret_val _tao_retval;
  TAO::Arg_Traits< ::Test::A::FailOn>::in_arg_val _tao_where (where);
  TAO::Arg_Traits< ::Test::seq_bd_str>::in_arg_val _tao_arg1 (arg1);
  TAO::Arg_Traits< ::Test::seq_bd_str>::out_arg_val _tao_arg2 (arg2);
  TAO::Arg_Traits< ::Test::seq_bd_str>::inout_arg_val _tao_arg3 (arg3);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_where,
      &_tao_arg1,
      &_tao_arg2,
      &_tao_arg3
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      5,
      "seq_method",
      10,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY

    );

  _tao_call.invoke (0, 0);

  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:88

::Test::seq_bds_str *
Test::A::seq_method_s (
  ::Test::A::FailOn where,
  const ::Test::seq_bds_str & arg1,
  ::Test::seq_bds_str_out arg2,
  ::Test::seq_bds_str & arg3)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }

  TAO::Arg_Traits< ::Test::seq_bds_str>::ret_val _tao_retval;
  TAO::Arg_Traits< ::Test::A::FailOn>::in_arg_val _tao_where (where);
  TAO::Arg_Traits< ::Test::seq_bds_str>::in_arg_val _tao_arg1 (arg1);
  TAO::Arg_Traits< ::Test::seq_bds_str>::out_arg_val _tao_arg2 (arg2);
  TAO::Arg_Traits< ::Test::seq_bds_str>::inout_arg_val _tao_arg3 (arg3);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_where,
      &_tao_arg1,
      &_tao_arg2,
      &_tao_arg3
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      5,
      "seq_method_s",
      12,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY

    );

  _tao_call.invoke (0, 0);

  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:88

::Test::arr_bd_str_slice *
Test::A::arr_method (
  ::Test::A::FailOn where,
  const ::Test::arr_bd_str arg1,
  ::Test::arr_bd_str_out arg2,
  ::Test::arr_bd_str arg3)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }

  TAO::Arg_Traits< ::Test::arr_bd_str_tag>::ret_val _tao_retval;
  TAO::Arg_Traits< ::Test::A::FailOn>::in_arg_val _tao_where (where);
  TAO::Arg_Traits< ::Test::arr_bd_str_tag>::in_arg_val _tao_arg1 (arg1);
  TAO::Arg_Traits< ::Test::arr_bd_str_tag>::out_arg_val _tao_arg2 (arg2);
  TAO::Arg_Traits< ::Test::arr_bd_str_tag>::inout_arg_val _tao_arg3 (arg3);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_where,
      &_tao_arg1,
      &_tao_arg2,
      &_tao_arg3
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      5,
      "arr_method",
      10,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY

    );

  _tao_call.invoke (0, 0);

  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:88

::Test::arr_bds_str_slice *
Test::A::arr_method_s (
  ::Test::A::FailOn where,
  const ::Test::arr_bds_str arg1,
  ::Test::arr_bds_str_out arg2,
  ::Test::arr_bds_str arg3)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }

  TAO::Arg_Traits< ::Test::arr_bds_str_tag>::ret_val _tao_retval;
  TAO::Arg_Traits< ::Test::A::FailOn>::in_arg_val _tao_where (where);
  TAO::Arg_Traits< ::Test::arr_bds_str_tag>::in_arg_val _tao_arg1 (arg1);
  TAO::Arg_Traits< ::Test::arr_bds_str_tag>::out_arg_val _tao_arg2 (arg2);
  TAO::Arg_Traits< ::Test::arr_bds_str_tag>::inout_arg_val _tao_arg3 (arg3);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_where,
      &_tao_arg1,
      &_tao_arg2,
      &_tao_arg3
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      5,
      "arr_method_s",
      12,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY

    );

  _tao_call.invoke (0, 0);

  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:88

::Test::sct *
Test::A::sct_method (
  ::Test::A::FailOn where,
  const ::Test::sct & arg1,
  ::Test::sct_out arg2,
  ::Test::sct & arg3)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }

  TAO::Arg_Traits< ::Test::sct>::ret_val _tao_retval;
  TAO::Arg_Traits< ::Test::A::FailOn>::in_arg_val _tao_where (where);
  TAO::Arg_Traits< ::Test::sct>::in_arg_val _tao_arg1 (arg1);
  TAO::Arg_Traits< ::Test::sct>::out_arg_val _tao_arg2 (arg2);
  TAO::Arg_Traits< ::Test::sct>::inout_arg_val _tao_arg3 (arg3);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_where,
      &_tao_arg1,
      &_tao_arg2,
      &_tao_arg3
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      5,
      "sct_method",
      10,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY

    );

  _tao_call.invoke (0, 0);

  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:88

::Test::unn *
Test::A::unn_method (
  ::Test::A::FailOn where,
  const ::Test::unn & arg1,
  ::Test::unn_out arg2,
  ::Test::unn & arg3)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }

  TAO::Arg_Traits< ::Test::unn>::ret_val _tao_retval;
  TAO::Arg_Traits< ::Test::A::FailOn>::in_arg_val _tao_where (where);
  TAO::Arg_Traits< ::Test::unn>::in_arg_val _tao_arg1 (arg1);
  TAO::Arg_Traits< ::Test::unn>::out_arg_val _tao_arg2 (arg2);
  TAO::Arg_Traits< ::Test::unn>::inout_arg_val _tao_arg3 (arg3);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_where,
      &_tao_arg1,
      &_tao_arg2,
      &_tao_arg3
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      5,
      "unn_method",
      10,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY

    );

  _tao_call.invoke (0, 0);

  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:88

::Test::val_bd_str *
Test::A::vbx_method (
  ::Test::A::FailOn where,
  ::Test::val_bd_str * arg1,
  ::Test::val_bd_str_out arg2,
  ::Test::val_bd_str *& arg3)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }

  TAO::Arg_Traits< ::Test::val_bd_str>::ret_val _tao_retval;
  TAO::Arg_Traits< ::Test::A::FailOn>::in_arg_val _tao_where (where);
  TAO::Arg_Traits< ::Test::val_bd_str>::in_arg_val _tao_arg1 (arg1);
  TAO::Arg_Traits< ::Test::val_bd_str>::out_arg_val _tao_arg2 (arg2);
  TAO::Arg_Traits< ::Test::val_bd_str>::inout_arg_val _tao_arg3 (arg3);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_where,
      &_tao_arg1,
      &_tao_arg2,
      &_tao_arg3
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      5,
      "vbx_method",
      10,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY

    );

  _tao_call.invoke (0, 0);

  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:88

::Test::val_bds_str *
Test::A::vbx_method_s (
  ::Test::A::FailOn where,
  ::Test::val_bds_str * arg1,
  ::Test::val_bds_str_out arg2,
  ::Test::val_bds_str *& arg3)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }

  TAO::Arg_Traits< ::Test::val_bds_str>::ret_val _tao_retval;
  TAO::Arg_Traits< ::Test::A::FailOn>::in_arg_val _tao_where (where);
  TAO::Arg_Traits< ::Test::val_bds_str>::in_arg_val _tao_arg1 (arg1);
  TAO::Arg_Traits< ::Test::val_bds_str>::out_arg_val _tao_arg2 (arg2);
  TAO::Arg_Traits< ::Test::val_bds_str>::inout_arg_val _tao_arg3 (arg3);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_where,
      &_tao_arg1,
      &_tao_arg2,
      &_tao_arg3
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      5,
      "vbx_method_s",
      12,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY

    );

  _tao_call.invoke (0, 0);

  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:88

::Test::vtp *
Test::A::vtp_method (
  ::Test::A::FailOn where,
  ::Test::vtp * arg1,
  ::Test::vtp_out arg2,
  ::Test::vtp *& arg3)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }

  TAO::Arg_Traits< ::Test::vtp>::ret_val _tao_retval;
  TAO::Arg_Traits< ::Test::A::FailOn>::in_arg_val _tao_where (where);
  TAO::Arg_Traits< ::Test::vtp>::in_arg_val _tao_arg1 (arg1);
  TAO::Arg_Traits< ::Test::vtp>::out_arg_val _tao_arg2 (arg2);
  TAO::Arg_Traits< ::Test::vtp>::inout_arg_val _tao_arg3 (arg3);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_where,
      &_tao_arg1,
      &_tao_arg2,
      &_tao_arg3
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      5,
      "vtp_method",
      10,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY

    );

  _tao_call.invoke (0, 0);

  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:88

void
Test::A::exc_method (
  ::Test::string_field f)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }

  TAO::Arg_Traits< void>::ret_val _tao_retval;
  TAO::Arg_Traits< ::Test::string_field>::in_arg_val _tao_f (f);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_f
    };

  static TAO::Exception_Data
  _tao_Test_A_exc_method_exceptiondata [] =
    {
      {
        "IDL:Test/exc:1.0",
        Test::exc::_alloc
#if TAO_HAS_INTERCEPTORS == 1
        , Test::_tc_exc
#endif /* TAO_HAS_INTERCEPTORS */
      }
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      2,
      "exc_method",
      10,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY

    );

  _tao_call.invoke (
      _tao_Test_A_exc_method_exceptiondata,
      1
    );
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:88

void
Test::A::shutdown (
  void)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }

  TAO::Arg_Traits< void>::ret_val _tao_retval;

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      1,
      "shutdown",
      8,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY,
      TAO::TAO_ONEWAY_INVOCATION,
      TAO::TAO_SYNCHRONOUS_INVOCATION,
      false
    );

  _tao_call.invoke (0, 0);
}

Test::A::A (void)
{
}

Test::A::~A (void)
{
}

void
Test::A::_tao_any_destructor (void *_tao_void_pointer)
{
  A *_tao_tmp_pointer =
    static_cast<A *> (_tao_void_pointer);
  ::CORBA::release (_tao_tmp_pointer);
}

Test::A_ptr
Test::A::_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return
    TAO::Narrow_Utils<A>::narrow (
        _tao_objref,
        "IDL:Test/A:1.0");
}

Test::A_ptr
Test::A::_unchecked_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return
    TAO::Narrow_Utils<A>::unchecked_narrow (
        _tao_objref);
}

Test::A_ptr
Test::A::_nil (void)
{
  return 0;
}

Test::A_ptr
Test::A::_duplicate (A_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  return obj;
}

void
Test::A::_tao_release (A_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
Test::A::_is_a (const char *value)
{
  if (
      ACE_OS::strcmp (
          value,
          "IDL:Test/A:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        ) == 0
    )
    {
      return true; // success using local knowledge
    }
  else
    {
      return this->::CORBA::Object::_is_a (value);
    }
}

const char* Test::A::_interface_repository_id (void) const
{
  return "IDL:Test/A:1.0";
}

::CORBA::Boolean
Test::A::marshal (TAO_OutputCDR &cdr)
{
  return (cdr << this);
}

// TAO_IDL - Generated from
// be/be_visitor_typecode/objref_typecode.cpp:70

static TAO::TypeCode::Objref<char const *,
                             TAO::Null_RefCount_Policy>
  _tao_tc_Test_A (
    ::CORBA::tk_objref,
    "IDL:Test/A:1.0",
    "A");


namespace Test
{
  ::CORBA::TypeCode_ptr const _tc_A =
    &_tao_tc_Test_A;
}

// TAO_IDL - Generated from
// be/be_visitor_valuetype/valuetype_obv_cs.cpp:44

OBV_Test::vtp::vtp (void)
: require_truncation_ (false)
{}

OBV_Test::vtp::vtp (
    const char * _tao_init_a,
    const char * _tao_init_b,
    const char * _tao_init_c)
: require_truncation_ (false)
{
  a (_tao_init_a);
  b (_tao_init_b);
  c (_tao_init_c);
}

OBV_Test::vtp::~vtp (void)
{}

::CORBA::ValueBase *
OBV_Test::vtp::_copy_value (void)
{
  ::CORBA::ValueBase *ret_val = 0;
  ACE_NEW_THROW_EX (
    ret_val,
    vtp (
      a (),
      b (),
      c ()
    ),
    ::CORBA::NO_MEMORY ()
  );
  return ret_val;
}

::CORBA::Boolean
OBV_Test::vtp::_tao_marshal__Test_vtp (TAO_OutputCDR &strm, TAO_ChunkInfo& ci) const
{
  return _tao_marshal_state (strm, ci);
}

::CORBA::Boolean
OBV_Test::vtp::_tao_unmarshal__Test_vtp (TAO_InputCDR &strm, TAO_ChunkInfo& ci)
{
  return _tao_unmarshal_state (strm, ci);
}

// TAO_IDL - Generated from
// be/be_visitor_valuetype/field_cs.cpp:834

/// Accessor to set the member.
void
OBV_Test::vtp::a (char *val)
{
  this->_pd_a = (val);
}

/// Accessor to set the member.
void
OBV_Test::vtp::a (const char *val)
{
  // Set the value.
  this->_pd_a = ::CORBA::string_dup (val);
}

/// Accessor to set the member.
void
OBV_Test::vtp::a (const ::CORBA::String_var &val)
{
  ::CORBA::String_var a_var = val;
  this->_pd_a = a_var._retn ();
}

const char *
OBV_Test::vtp::a (void) const // get method
{
  return this->_pd_a;
}

// TAO_IDL - Generated from
// be/be_visitor_valuetype/field_cs.cpp:834

/// Accessor to set the member.
void
OBV_Test::vtp::b (char *val)
{
  this->_pd_b = (val);
}

/// Accessor to set the member.
void
OBV_Test::vtp::b (const char *val)
{
  // Set the value.
  this->_pd_b = ::CORBA::string_dup (val);
}

/// Accessor to set the member.
void
OBV_Test::vtp::b (const ::CORBA::String_var &val)
{
  ::CORBA::String_var b_var = val;
  this->_pd_b = b_var._retn ();
}

const char *
OBV_Test::vtp::b (void) const // get method
{
  return this->_pd_b;
}

// TAO_IDL - Generated from
// be/be_visitor_valuetype/field_cs.cpp:834

/// Accessor to set the member.
void
OBV_Test::vtp::c (char *val)
{
  this->_pd_c = (val);
}

/// Accessor to set the member.
void
OBV_Test::vtp::c (const char *val)
{
  // Set the value.
  this->_pd_c = ::CORBA::string_dup (val);
}

/// Accessor to set the member.
void
OBV_Test::vtp::c (const ::CORBA::String_var &val)
{
  ::CORBA::String_var c_var = val;
  this->_pd_c = c_var._retn ();
}

const char *
OBV_Test::vtp::c (void) const // get method
{
  return this->_pd_c;
}

// TAO_IDL - Generated from
// be/be_visitor_sequence/any_op_cs.cpp:45


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


TAO_END_VERSIONED_NAMESPACE_DECL



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace Test
{

  // Copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      const ::Test::seq_bd_str &_tao_elem
    )
  {
    TAO::Any_Dual_Impl_T< ::Test::seq_bd_str>::insert_copy (
        _tao_any,
        ::Test::seq_bd_str::_tao_any_destructor,
        ::Test::_tc_seq_bd_str,
        _tao_elem
      );
}

// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    ::Test::seq_bd_str *_tao_elem)
{
  TAO::Any_Dual_Impl_T< ::Test::seq_bd_str>::insert (
      _tao_any,
      ::Test::seq_bd_str::_tao_any_destructor,
      ::Test::_tc_seq_bd_str,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    ::Test::seq_bd_str *&_tao_elem)
{
  return _tao_any >>= const_cast<
      const ::Test::seq_bd_str *&> (
      _tao_elem
    );
}

// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const ::Test::seq_bd_str *&_tao_elem)
{
  return
    TAO::Any_Dual_Impl_T< ::Test::seq_bd_str>::extract (
        _tao_any,
        ::Test::seq_bd_str::_tao_any_destructor,
        ::Test::_tc_seq_bd_str,
        _tao_elem
      );
}
}

#else


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


// Copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    const Test::seq_bd_str &_tao_elem)
{
  TAO::Any_Dual_Impl_T<Test::seq_bd_str>::insert_copy (
      _tao_any,
      Test::seq_bd_str::_tao_any_destructor,
      Test::_tc_seq_bd_str,
      _tao_elem
    );
}

// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    Test::seq_bd_str *_tao_elem)
{
  TAO::Any_Dual_Impl_T<Test::seq_bd_str>::insert (
      _tao_any,
      Test::seq_bd_str::_tao_any_destructor,
      Test::_tc_seq_bd_str,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    Test::seq_bd_str *&_tao_elem)
{
  return _tao_any >>= const_cast<
      const Test::seq_bd_str *&> (
      _tao_elem
    );
}

// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const Test::seq_bd_str *&_tao_elem)
{
  return
    TAO::Any_Dual_Impl_T<Test::seq_bd_str>::extract (
        _tao_any,
        Test::seq_bd_str::_tao_any_destructor,
        Test::_tc_seq_bd_str,
        _tao_elem);
}
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_sequence/any_op_cs.cpp:45


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


TAO_END_VERSIONED_NAMESPACE_DECL



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace Test
{

  // Copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      const ::Test::seq_bds_str &_tao_elem
    )
  {
    TAO::Any_Dual_Impl_T< ::Test::seq_bds_str>::insert_copy (
        _tao_any,
        ::Test::seq_bds_str::_tao_any_destructor,
        ::Test::_tc_seq_bds_str,
        _tao_elem
      );
}

// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    ::Test::seq_bds_str *_tao_elem)
{
  TAO::Any_Dual_Impl_T< ::Test::seq_bds_str>::insert (
      _tao_any,
      ::Test::seq_bds_str::_tao_any_destructor,
      ::Test::_tc_seq_bds_str,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    ::Test::seq_bds_str *&_tao_elem)
{
  return _tao_any >>= const_cast<
      const ::Test::seq_bds_str *&> (
      _tao_elem
    );
}

// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const ::Test::seq_bds_str *&_tao_elem)
{
  return
    TAO::Any_Dual_Impl_T< ::Test::seq_bds_str>::extract (
        _tao_any,
        ::Test::seq_bds_str::_tao_any_destructor,
        ::Test::_tc_seq_bds_str,
        _tao_elem
      );
}
}

#else


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


// Copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    const Test::seq_bds_str &_tao_elem)
{
  TAO::Any_Dual_Impl_T<Test::seq_bds_str>::insert_copy (
      _tao_any,
      Test::seq_bds_str::_tao_any_destructor,
      Test::_tc_seq_bds_str,
      _tao_elem
    );
}

// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    Test::seq_bds_str *_tao_elem)
{
  TAO::Any_Dual_Impl_T<Test::seq_bds_str>::insert (
      _tao_any,
      Test::seq_bds_str::_tao_any_destructor,
      Test::_tc_seq_bds_str,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    Test::seq_bds_str *&_tao_elem)
{
  return _tao_any >>= const_cast<
      const Test::seq_bds_str *&> (
      _tao_elem
    );
}

// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const Test::seq_bds_str *&_tao_elem)
{
  return
    TAO::Any_Dual_Impl_T<Test::seq_bds_str>::extract (
        _tao_any,
        Test::seq_bds_str::_tao_any_destructor,
        Test::_tc_seq_bds_str,
        _tao_elem);
}
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_array/any_op_cs.cpp:37


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

void operator<<= (
    ::CORBA::Any &_tao_any,
    const Test::arr_bd_str_forany &_tao_elem
  )
{
  TAO::Any_Array_Impl_T<
      Test::arr_bd_str_slice,
      Test::arr_bd_str_forany
    >::insert (
        _tao_any,
        Test::arr_bd_str_forany::_tao_any_destructor,
        Test::_tc_arr_bd_str,
        _tao_elem.nocopy ()
          ? _tao_elem.ptr ()
          : Test::arr_bd_str_dup (_tao_elem.in ())
      );
}

::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    Test::arr_bd_str_forany &_tao_elem
  )
{
  return
    TAO::Any_Array_Impl_T<
        Test::arr_bd_str_slice,
        Test::arr_bd_str_forany
      >::extract (
          _tao_any,
          Test::arr_bd_str_forany::_tao_any_destructor,
          Test::_tc_arr_bd_str,
          _tao_elem.out ()
        );
}
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_array/any_op_cs.cpp:37


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

void operator<<= (
    ::CORBA::Any &_tao_any,
    const Test::arr_bds_str_forany &_tao_elem
  )
{
  TAO::Any_Array_Impl_T<
      Test::arr_bds_str_slice,
      Test::arr_bds_str_forany
    >::insert (
        _tao_any,
        Test::arr_bds_str_forany::_tao_any_destructor,
        Test::_tc_arr_bds_str,
        _tao_elem.nocopy ()
          ? _tao_elem.ptr ()
          : Test::arr_bds_str_dup (_tao_elem.in ())
      );
}

::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    Test::arr_bds_str_forany &_tao_elem
  )
{
  return
    TAO::Any_Array_Impl_T<
        Test::arr_bds_str_slice,
        Test::arr_bds_str_forany
      >::extract (
          _tao_any,
          Test::arr_bds_str_forany::_tao_any_destructor,
          Test::_tc_arr_bds_str,
          _tao_elem.out ()
        );
}
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_structure/any_op_cs.cpp:43



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace Test
{
  /// Copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      const ::Test::sct &_tao_elem)
  {
    TAO::Any_Dual_Impl_T< ::Test::sct>::insert_copy (
        _tao_any,
        ::Test::sct::_tao_any_destructor,
        ::Test::_tc_sct,
        _tao_elem);
}

/// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any, ::
    Test::sct *_tao_elem)
{
  TAO::Any_Dual_Impl_T< ::Test::sct>::insert (
      _tao_any,
      ::Test::sct::_tao_any_destructor,
      ::Test::_tc_sct,
      _tao_elem);
}

/// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    ::Test::sct *&_tao_elem)
{
  return _tao_any >>= const_cast<
      const ::Test::sct *&> (
      _tao_elem);
}

/// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const ::Test::sct *&_tao_elem)
{
  return
    TAO::Any_Dual_Impl_T< ::Test::sct>::extract (
        _tao_any,
        ::Test::sct::_tao_any_destructor,
        ::Test::_tc_sct,
        _tao_elem
      );
}
}

#else

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

/// Copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  const Test::sct &_tao_elem)
{
  TAO::Any_Dual_Impl_T<Test::sct>::insert_copy (
    _tao_any,
    Test::sct::_tao_any_destructor,
    Test::_tc_sct,
    _tao_elem);
}

/// Non-copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  Test::sct *_tao_elem)
{
  TAO::Any_Dual_Impl_T<Test::sct>::insert (
    _tao_any,
    Test::sct::_tao_any_destructor,
    Test::_tc_sct,
    _tao_elem);
}

/// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
  const ::CORBA::Any &_tao_any,
  Test::sct *&_tao_elem)
{
  return _tao_any >>= const_cast<
      const Test::sct *&> (
      _tao_elem);
}

/// Extraction to const pointer.
::CORBA::Boolean operator>>= (
  const ::CORBA::Any &_tao_any,
  const Test::sct *&_tao_elem)
{
  return
    TAO::Any_Dual_Impl_T<Test::sct>::extract (
      _tao_any,
      Test::sct::_tao_any_destructor,
      Test::_tc_sct,
      _tao_elem);
}
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_enum/any_op_cs.cpp:35

TAO_BEGIN_VERSIONED_NAMESPACE_DECL


TAO_END_VERSIONED_NAMESPACE_DECL



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace Test
{
  void operator<<= (
      ::CORBA::Any &_tao_any,
      ::Test::string_field _tao_elem
    )
  {
    TAO::Any_Basic_Impl_T< ::Test::string_field>::insert (
        _tao_any,
        ::Test::_tc_string_field,
        _tao_elem
      );
  }

  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      ::Test::string_field &_tao_elem
    )
  {
    return
      TAO::Any_Basic_Impl_T< ::Test::string_field>::extract (
          _tao_any,
          ::Test::_tc_string_field,
          _tao_elem
        );
  }
}

#else

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

void operator<<= (
    ::CORBA::Any &_tao_any,
    Test::string_field _tao_elem
  )
{
  TAO::Any_Basic_Impl_T<Test::string_field>::insert (
      _tao_any,
      Test::_tc_string_field,
      _tao_elem
    );
}

::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    Test::string_field &_tao_elem
  )
{
  return
    TAO::Any_Basic_Impl_T<Test::string_field>::extract (
        _tao_any,
        Test::_tc_string_field,
        _tao_elem
      );
}
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_union/any_op_cs.cpp:37


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


TAO_END_VERSIONED_NAMESPACE_DECL



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace Test
{
  // Copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      const ::Test::unn &_tao_elem
    )
  {
    TAO::Any_Dual_Impl_T< ::Test::unn>::insert_copy (
        _tao_any,
        ::Test::unn::_tao_any_destructor,
        ::Test::_tc_unn,
        _tao_elem
      );
}

// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    ::Test::unn *_tao_elem
  )
{
  TAO::Any_Dual_Impl_T< ::Test::unn>::insert (
      _tao_any,
      ::Test::unn::_tao_any_destructor,
      ::Test::_tc_unn,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    ::Test::unn *&_tao_elem
  )
{
  return _tao_any >>= const_cast<
      const ::Test::unn *&> (
      _tao_elem
    );
}

// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const ::Test::unn *&_tao_elem
  )
{
  return
    TAO::Any_Dual_Impl_T< ::Test::unn>::extract (
        _tao_any,
        ::Test::unn::_tao_any_destructor,
        ::Test::_tc_unn,
        _tao_elem
      );
}
}

#else

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    const Test::unn &_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<Test::unn>::insert_copy (
      _tao_any,
      Test::unn::_tao_any_destructor,
      Test::_tc_unn,
      _tao_elem
    );
}

// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    Test::unn *_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<Test::unn>::insert (
      _tao_any,
      Test::unn::_tao_any_destructor,
      Test::_tc_unn,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    Test::unn *&_tao_elem
  )
{
  return _tao_any >>= const_cast<
      const Test::unn *&> (
      _tao_elem
    );
}

// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const Test::unn *&_tao_elem
  )
{
  return
    TAO::Any_Dual_Impl_T<Test::unn>::extract (
        _tao_any,
        Test::unn::_tao_any_destructor,
        Test::_tc_unn,
        _tao_elem
      );
}
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_exception/any_op_cs.cpp:38
TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Dual_Impl_T<Test::exc>::demarshal_value (TAO_InputCDR & cdr)
  {
    ::CORBA::String_var id;

    if (!(cdr >> id.out ()))
      {
        return false;
      }

    try
      {
        this->value_->_tao_decode (cdr);
      }
    catch (const ::CORBA::Exception &)
      {
        return false;
      }

    return true;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace Test
{


  // Copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      const ::Test::exc &_tao_elem)
  {
    TAO::Any_Dual_Impl_T< ::Test::exc>::insert_copy (
        _tao_any,
        ::Test::exc::_tao_any_destructor,
        ::Test::_tc_exc,
        _tao_elem);
  }

  // Non-copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      ::Test::exc *_tao_elem)
  {
    TAO::Any_Dual_Impl_T< ::Test::exc>::insert (
        _tao_any,
        ::Test::exc::_tao_any_destructor,
        ::Test::_tc_exc,
        _tao_elem);
  }

  // Extraction to non-const pointer (deprecated).
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      ::Test::exc *&_tao_elem)
  {
    return _tao_any >>= const_cast<
        const ::Test::exc *&> (
        _tao_elem);
  }

  // Extraction to const pointer.
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      const ::Test::exc *&_tao_elem)
  {
    return
      TAO::Any_Dual_Impl_T< ::Test::exc>::extract (
          _tao_any,
          ::Test::exc::_tao_any_destructor,
          ::Test::_tc_exc,
          _tao_elem);
  }
}

#else

TAO_BEGIN_VERSIONED_NAMESPACE_DECL



// Copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    const Test::exc &_tao_elem)
{
  TAO::Any_Dual_Impl_T<Test::exc>::insert_copy (
      _tao_any,
      Test::exc::_tao_any_destructor,
      Test::_tc_exc,
      _tao_elem
    );
}

// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    Test::exc *_tao_elem)
{
  TAO::Any_Dual_Impl_T<Test::exc>::insert (
      _tao_any,
      Test::exc::_tao_any_destructor,
      Test::_tc_exc,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    Test::exc *&_tao_elem)
{
  return _tao_any >>= const_cast<
      const Test::exc *&> (
      _tao_elem);
}

// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const Test::exc *&_tao_elem
  )
{
  return
    TAO::Any_Dual_Impl_T<Test::exc>::extract (
        _tao_any,
        Test::exc::_tao_any_destructor,
        Test::_tc_exc,
        _tao_elem);
}
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_valuebox/any_op_cs.cpp:46
TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<Test::val_bd_str>::to_value (
      ::CORBA::ValueBase *&_tao_elem
    ) const
  {
    ::CORBA::add_ref (this->value_);
    _tao_elem = this->value_;
    return true;
  }
}


TAO_END_VERSIONED_NAMESPACE_DECL



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace Test
{
  // Copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      val_bd_str *_tao_elem)
  {
    ::CORBA::add_ref (_tao_elem);
    _tao_any <<= &_tao_elem;
  }

  // Non-copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      val_bd_str **_tao_elem)
  {
    TAO::Any_Impl_T<val_bd_str>::insert (
        _tao_any,
        val_bd_str::_tao_any_destructor,
        _tc_val_bd_str,
        *_tao_elem);
  }

  ::CORBA::Boolean
  operator>>= (
      const ::CORBA::Any &_tao_any,
      val_bd_str *&_tao_elem
    )
  {
    return
      TAO::Any_Impl_T<val_bd_str>::extract (
          _tao_any,
          val_bd_str::_tao_any_destructor,
          _tc_val_bd_str,
          _tao_elem
        );
  }


}

#else


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    Test::val_bd_str *_tao_elem
  )
{
  ::CORBA::add_ref (_tao_elem);
  _tao_any <<= &_tao_elem;
}

// Non-copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    Test::val_bd_str **_tao_elem
  )
{
  TAO::Any_Impl_T<Test::val_bd_str>::insert (
      _tao_any,
      Test::val_bd_str::_tao_any_destructor,
      Test::_tc_val_bd_str,
      *_tao_elem
    );
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    Test::val_bd_str *&_tao_elem
  )
{
  return
    TAO::Any_Impl_T<Test::val_bd_str>::extract (
        _tao_any,
        Test::val_bd_str::_tao_any_destructor,
        Test::_tc_val_bd_str,
        _tao_elem
      );
}


TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_valuebox/any_op_cs.cpp:46
TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<Test::val_bds_str>::to_value (
      ::CORBA::ValueBase *&_tao_elem
    ) const
  {
    ::CORBA::add_ref (this->value_);
    _tao_elem = this->value_;
    return true;
  }
}


TAO_END_VERSIONED_NAMESPACE_DECL



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace Test
{
  // Copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      val_bds_str *_tao_elem)
  {
    ::CORBA::add_ref (_tao_elem);
    _tao_any <<= &_tao_elem;
  }

  // Non-copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      val_bds_str **_tao_elem)
  {
    TAO::Any_Impl_T<val_bds_str>::insert (
        _tao_any,
        val_bds_str::_tao_any_destructor,
        _tc_val_bds_str,
        *_tao_elem);
  }

  ::CORBA::Boolean
  operator>>= (
      const ::CORBA::Any &_tao_any,
      val_bds_str *&_tao_elem
    )
  {
    return
      TAO::Any_Impl_T<val_bds_str>::extract (
          _tao_any,
          val_bds_str::_tao_any_destructor,
          _tc_val_bds_str,
          _tao_elem
        );
  }


}

#else


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    Test::val_bds_str *_tao_elem
  )
{
  ::CORBA::add_ref (_tao_elem);
  _tao_any <<= &_tao_elem;
}

// Non-copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    Test::val_bds_str **_tao_elem
  )
{
  TAO::Any_Impl_T<Test::val_bds_str>::insert (
      _tao_any,
      Test::val_bds_str::_tao_any_destructor,
      Test::_tc_val_bds_str,
      *_tao_elem
    );
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    Test::val_bds_str *&_tao_elem
  )
{
  return
    TAO::Any_Impl_T<Test::val_bds_str>::extract (
        _tao_any,
        Test::val_bds_str::_tao_any_destructor,
        Test::_tc_val_bds_str,
        _tao_elem
      );
}


TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_valuebox/any_op_cs.cpp:46
TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<Test::val_arr_bd_str>::to_value (
      ::CORBA::ValueBase *&_tao_elem
    ) const
  {
    ::CORBA::add_ref (this->value_);
    _tao_elem = this->value_;
    return true;
  }
}


TAO_END_VERSIONED_NAMESPACE_DECL



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace Test
{
  // Copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      val_arr_bd_str *_tao_elem)
  {
    ::CORBA::add_ref (_tao_elem);
    _tao_any <<= &_tao_elem;
  }

  // Non-copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      val_arr_bd_str **_tao_elem)
  {
    TAO::Any_Impl_T<val_arr_bd_str>::insert (
        _tao_any,
        val_arr_bd_str::_tao_any_destructor,
        _tc_val_arr_bd_str,
        *_tao_elem);
  }

  ::CORBA::Boolean
  operator>>= (
      const ::CORBA::Any &_tao_any,
      val_arr_bd_str *&_tao_elem
    )
  {
    return
      TAO::Any_Impl_T<val_arr_bd_str>::extract (
          _tao_any,
          val_arr_bd_str::_tao_any_destructor,
          _tc_val_arr_bd_str,
          _tao_elem
        );
  }


}

#else


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    Test::val_arr_bd_str *_tao_elem
  )
{
  ::CORBA::add_ref (_tao_elem);
  _tao_any <<= &_tao_elem;
}

// Non-copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    Test::val_arr_bd_str **_tao_elem
  )
{
  TAO::Any_Impl_T<Test::val_arr_bd_str>::insert (
      _tao_any,
      Test::val_arr_bd_str::_tao_any_destructor,
      Test::_tc_val_arr_bd_str,
      *_tao_elem
    );
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    Test::val_arr_bd_str *&_tao_elem
  )
{
  return
    TAO::Any_Impl_T<Test::val_arr_bd_str>::extract (
        _tao_any,
        Test::val_arr_bd_str::_tao_any_destructor,
        Test::_tc_val_arr_bd_str,
        _tao_elem
      );
}


TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_valuetype/any_op_cs.cpp:45
TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<Test::vtp>::to_value (
      ::CORBA::ValueBase *&_tao_elem
    ) const
  {
    ::CORBA::add_ref (this->value_);
    _tao_elem = this->value_;
    return true;
  }
}


TAO_END_VERSIONED_NAMESPACE_DECL



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace Test
{
  // Copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      vtp *_tao_elem
    )
  {
    #ifdef TAO_VALUETYPE_COPYING_ANY_INSERTION_USES_COPY_VALUE
      vtp *_tao_copy =
        _tao_elem ?
          vtp::_downcast (_tao_elem->_copy_value ())
          : 0;
      _tao_any <<= &_tao_copy;
    #else
      ::CORBA::add_ref (_tao_elem);
      _tao_any <<= &_tao_elem;
    #endif
  }

  // Non-copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      vtp **_tao_elem
    )
  {
    TAO::Any_Impl_T<vtp>::insert (
        _tao_any,
        vtp::_tao_any_destructor,
        _tc_vtp,
        *_tao_elem
      );
  }

  ::CORBA::Boolean
  operator>>= (
      const ::CORBA::Any &_tao_any,
      vtp *&_tao_elem
    )
  {
    return
      TAO::Any_Impl_T<vtp>::extract (
          _tao_any,
          vtp::_tao_any_destructor,
          _tc_vtp,
          _tao_elem
        );
  }


}

#else


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    Test::vtp *_tao_elem
  )
{
  #ifdef TAO_VALUETYPE_COPYING_ANY_INSERTION_USES_COPY_VALUE
    Test::vtp *_tao_copy =
      _tao_elem ?
        Test::vtp::_downcast (_tao_elem->_copy_value ())
        : 0;
    _tao_any <<= &_tao_copy;
  #else
    ::CORBA::add_ref (_tao_elem);
    _tao_any <<= &_tao_elem;
  #endif
}

// Non-copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    Test::vtp **_tao_elem
  )
{
  TAO::Any_Impl_T<Test::vtp>::insert (
      _tao_any,
      Test::vtp::_tao_any_destructor,
      Test::_tc_vtp,
      *_tao_elem
    );
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    Test::vtp *&_tao_elem
  )
{
  return
    TAO::Any_Impl_T<Test::vtp>::extract (
        _tao_any,
        Test::vtp::_tao_any_destructor,
        Test::_tc_vtp,
        _tao_elem
      );
}


TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_interface/any_op_cs.cpp:38
TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<Test::A>::to_object (
      ::CORBA::Object_ptr &_tao_elem) const
  {
    _tao_elem = ::CORBA::Object::_duplicate (this->value_);
    return true;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace Test
{


  /// Copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      A_ptr _tao_elem)
  {
    A_ptr _tao_objptr =
      A::_duplicate (_tao_elem);
    _tao_any <<= &_tao_objptr;
  }

  /// Non-copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      A_ptr *_tao_elem)
  {
    TAO::Any_Impl_T<A>::insert (
        _tao_any,
        A::_tao_any_destructor,
        _tc_A,
        *_tao_elem);
  }

  ::CORBA::Boolean
  operator>>= (
      const ::CORBA::Any &_tao_any,
      A_ptr &_tao_elem)
  {
    return
      TAO::Any_Impl_T<A>::extract (
          _tao_any,
          A::_tao_any_destructor,
          _tc_A,
          _tao_elem);
  }
}

#else

TAO_BEGIN_VERSIONED_NAMESPACE_DECL



/// Copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    Test::A_ptr _tao_elem)
{
  Test::A_ptr _tao_objptr =
    Test::A::_duplicate (_tao_elem);
  _tao_any <<= &_tao_objptr;
}

/// Non-copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    Test::A_ptr *_tao_elem)
{
  TAO::Any_Impl_T<Test::A>::insert (
      _tao_any,
      Test::A::_tao_any_destructor,
      Test::_tc_A,
      *_tao_elem);
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    Test::A_ptr &_tao_elem)
{
  return
    TAO::Any_Impl_T<Test::A>::extract (
        _tao_any,
        Test::A::_tao_any_destructor,
        Test::_tc_A,
        _tao_elem);
}

TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_enum/any_op_cs.cpp:35

TAO_BEGIN_VERSIONED_NAMESPACE_DECL


TAO_END_VERSIONED_NAMESPACE_DECL



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace Test
{
  void operator<<= (
      ::CORBA::Any &_tao_any,
      ::Test::A::FailOn _tao_elem
    )
  {
    TAO::Any_Basic_Impl_T< ::Test::A::FailOn>::insert (
        _tao_any,
        ::Test::A::_tc_FailOn,
        _tao_elem
      );
  }

  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      ::Test::A::FailOn &_tao_elem
    )
  {
    return
      TAO::Any_Basic_Impl_T< ::Test::A::FailOn>::extract (
          _tao_any,
          ::Test::A::_tc_FailOn,
          _tao_elem
        );
  }
}

#else

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

void operator<<= (
    ::CORBA::Any &_tao_any,
    Test::A::FailOn _tao_elem
  )
{
  TAO::Any_Basic_Impl_T<Test::A::FailOn>::insert (
      _tao_any,
      Test::A::_tc_FailOn,
      _tao_elem
    );
}

::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    Test::A::FailOn &_tao_elem
  )
{
  return
    TAO::Any_Basic_Impl_T<Test::A::FailOn>::extract (
        _tao_any,
        Test::A::_tc_FailOn,
        _tao_elem
      );
}
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_sequence/cdr_op_cs.cpp:93
#if !defined _TAO_CDR_OP_Test_seq_bd_str_CPP_
#define _TAO_CDR_OP_Test_seq_bd_str_CPP_

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Test::seq_bd_str &_tao_sequence)
{
  return TAO::marshal_sequence(strm, _tao_sequence);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Test::seq_bd_str &_tao_sequence)
{
  return TAO::demarshal_sequence(strm, _tao_sequence);
}


TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_CDR_OP_Test_seq_bd_str_CPP_ */

// TAO_IDL - Generated from
// be/be_visitor_sequence/cdr_op_cs.cpp:93
#if !defined _TAO_CDR_OP_Test_seq_bds_str_CPP_
#define _TAO_CDR_OP_Test_seq_bds_str_CPP_

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Test::seq_bds_str &_tao_sequence)
{
  return TAO::marshal_sequence(strm, _tao_sequence);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Test::seq_bds_str &_tao_sequence)
{
  return TAO::demarshal_sequence(strm, _tao_sequence);
}


TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_CDR_OP_Test_seq_bds_str_CPP_ */

// TAO_IDL - Generated from
// be/be_visitor_array/cdr_op_cs.cpp:163


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Test::arr_bd_str_forany &_tao_array)
{
  CORBA::Boolean _tao_marshal_flag = true;

  for ( ::CORBA::ULong i0 = 0; i0 < 1 && _tao_marshal_flag; ++i0)
    {
      _tao_marshal_flag = (strm << ACE_OutputCDR::from_string (_tao_array [i0].in (), 10));
    }

  return _tao_marshal_flag;
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Test::arr_bd_str_forany &_tao_array)
{
  CORBA::Boolean _tao_marshal_flag = true;

  for ( ::CORBA::ULong i0 = 0; i0 < 1 && _tao_marshal_flag; ++i0)
    {
      _tao_marshal_flag = (strm >> ACE_InputCDR::to_string (_tao_array [i0].out (), 10));
    }

  return _tao_marshal_flag;
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_array/cdr_op_cs.cpp:163


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Test::arr_bds_str_forany &_tao_array)
{
  CORBA::Boolean _tao_marshal_flag = true;

  for ( ::CORBA::ULong i0 = 0; i0 < 1 && _tao_marshal_flag; ++i0)
    {
      _tao_marshal_flag = (strm << ACE_OutputCDR::from_string (_tao_array [i0].in (), 10));
    }

  return _tao_marshal_flag;
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Test::arr_bds_str_forany &_tao_array)
{
  CORBA::Boolean _tao_marshal_flag = true;

  for ( ::CORBA::ULong i0 = 0; i0 < 1 && _tao_marshal_flag; ++i0)
    {
      _tao_marshal_flag = (strm >> ACE_InputCDR::to_string (_tao_array [i0].out (), 10));
    }

  return _tao_marshal_flag;
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_structure/cdr_op_cs.cpp:49

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Test::sct &_tao_aggregate)
{
  return
    (strm << _tao_aggregate.a.in ()) &&
    (strm << ACE_OutputCDR::from_string (_tao_aggregate.b.in (), 10)) &&
    (strm << ACE_OutputCDR::from_string (_tao_aggregate.c.in (), 10));
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Test::sct &_tao_aggregate)
{
  return
    (strm >> _tao_aggregate.a.out ()) &&
    (strm >> ACE_InputCDR::to_string (_tao_aggregate.b.out (), 10)) &&
    (strm >> ACE_InputCDR::to_string (_tao_aggregate.c.out (), 10));
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_enum/cdr_op_cs.cpp:34


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (TAO_OutputCDR &strm, Test::string_field _tao_enumerator)
{
  return strm << static_cast< ::CORBA::ULong> (_tao_enumerator);
}

::CORBA::Boolean operator>> (TAO_InputCDR &strm, Test::string_field & _tao_enumerator)
{
  ::CORBA::ULong _tao_temp = 0;
  ::CORBA::Boolean const _tao_success = strm >> _tao_temp;

  if (_tao_success)
    {
      _tao_enumerator = static_cast<Test::string_field> (_tao_temp);
    }

  return _tao_success;
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_union/cdr_op_cs.cpp:74


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Test::unn &_tao_union
  )
{
  if ( !(strm << _tao_union._d ()) )
    {
      return false;
    }

  ::CORBA::Boolean result = true;

  switch (_tao_union._d ())
  {
    case Test::BOUNDED:
      {
        result = strm << ACE_OutputCDR::from_string (_tao_union.b (), 10);
      }
      break;
    case Test::TYPEDEFED:
      {
        result = strm << ACE_OutputCDR::from_string (_tao_union.c (), 10);
      }
      break;
    default:
      {
        result = strm << _tao_union.a ();
      }
      break;
  }

  return result;
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Test::unn &_tao_union
  )
{
  Test::string_field _tao_discriminant;
  if ( !(strm >> _tao_discriminant) )
    {
      return false;
    }

  ::CORBA::Boolean result = true;

  switch (_tao_discriminant)
  {
    case Test::BOUNDED:
      {
        ::CORBA::String_var _tao_union_tmp;
        result = strm >> ACE_InputCDR::to_string (_tao_union_tmp.out (), 10);

        if (result)
          {
            _tao_union.b (_tao_union_tmp);
            _tao_union._d (_tao_discriminant);
          }
      }
      break;
    case Test::TYPEDEFED:
      {
        ::CORBA::String_var _tao_union_tmp;
        result = strm >> ACE_InputCDR::to_string (_tao_union_tmp.out (), 10);

        if (result)
          {
            _tao_union.c (_tao_union_tmp);
            _tao_union._d (_tao_discriminant);
          }
      }
      break;
    default:
      {
        ::CORBA::String_var _tao_union_tmp;
        result = strm >> _tao_union_tmp.out ();

        if (result)
          {
            _tao_union.a (_tao_union_tmp);
            _tao_union._d (_tao_discriminant);
          }
      }
      break;
  }

  return result;
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_exception/cdr_op_cs.cpp:48
TAO_BEGIN_VERSIONED_NAMESPACE_DECL



::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Test::exc &_tao_aggregate
  )
{
  // First marshal the repository ID.
  if (strm << _tao_aggregate._rep_id ())
    {
      // Now marshal the members (if any).
      return (
        (strm << _tao_aggregate.a.in ()) &&
        (strm << ACE_OutputCDR::from_string (_tao_aggregate.b.in (), 10)) &&
        (strm << ACE_OutputCDR::from_string (_tao_aggregate.c.in (), 10))
       );
    }
  else
    {
      return false;
    }
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Test::exc &_tao_aggregate
  )
{
  // Demarshal the members.
  return (
    (strm >> _tao_aggregate.a.out ()) &&
    (strm >> ACE_InputCDR::to_string (_tao_aggregate.b.out (), 10)) &&
    (strm >> ACE_InputCDR::to_string (_tao_aggregate.c.out (), 10))
  );
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_valuebox/cdr_op_cs.cpp:41


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean
operator<< (
    TAO_OutputCDR &strm,
    const Test::val_bd_str *_tao_valuebox
  )
{
  return
    ::CORBA::ValueBase::_tao_marshal (
        strm,
        _tao_valuebox,
        reinterpret_cast<ptrdiff_t> (&Test::val_bd_str::_downcast)
      );
}

::CORBA::Boolean
operator>> (
    TAO_InputCDR &strm,
    Test::val_bd_str *&_tao_valuebox
  )
{
  return Test::val_bd_str::_tao_unmarshal (strm, _tao_valuebox);
}


TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_valuebox/cdr_op_cs.cpp:41


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean
operator<< (
    TAO_OutputCDR &strm,
    const Test::val_bds_str *_tao_valuebox
  )
{
  return
    ::CORBA::ValueBase::_tao_marshal (
        strm,
        _tao_valuebox,
        reinterpret_cast<ptrdiff_t> (&Test::val_bds_str::_downcast)
      );
}

::CORBA::Boolean
operator>> (
    TAO_InputCDR &strm,
    Test::val_bds_str *&_tao_valuebox
  )
{
  return Test::val_bds_str::_tao_unmarshal (strm, _tao_valuebox);
}


TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_valuebox/cdr_op_cs.cpp:41


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean
operator<< (
    TAO_OutputCDR &strm,
    const Test::val_arr_bd_str *_tao_valuebox
  )
{
  return
    ::CORBA::ValueBase::_tao_marshal (
        strm,
        _tao_valuebox,
        reinterpret_cast<ptrdiff_t> (&Test::val_arr_bd_str::_downcast)
      );
}

::CORBA::Boolean
operator>> (
    TAO_InputCDR &strm,
    Test::val_arr_bd_str *&_tao_valuebox
  )
{
  return Test::val_arr_bd_str::_tao_unmarshal (strm, _tao_valuebox);
}


TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_valuetype.cpp:512

void
CORBA::add_ref (Test::vtp * vt)
{
  if (vt != 0)
    {
      vt->_add_ref ();
    }
}

void
CORBA::remove_ref (Test::vtp * vt)
{
  if (vt != 0)
    {
      vt->_remove_ref ();
    }
}

// TAO_IDL - Generated from
// be/be_visitor_valuetype/cdr_op_cs.cpp:60


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean
operator<< (
    TAO_OutputCDR &strm,
    const Test::vtp *_tao_valuetype
  )
{
  return
    ::CORBA::ValueBase::_tao_marshal (
        strm,
        _tao_valuetype,
        reinterpret_cast<ptrdiff_t> (&Test::vtp::_downcast)
      );
}

::CORBA::Boolean
operator>> (
    TAO_InputCDR &strm,
    Test::vtp *&_tao_valuetype
  )
{
  return Test::vtp::_tao_unmarshal (strm, _tao_valuetype);
}


TAO_END_VERSIONED_NAMESPACE_DECL

// TAO_IDL - Generated from
// be/be_visitor_valuetype/marshal_cs.cpp:33

::CORBA::Boolean
OBV_Test::vtp::_tao_marshal_state (TAO_OutputCDR &strm, TAO_ChunkInfo&ci) const
{
  if (! ci.start_chunk (strm))
    return false;

  CORBA::Boolean const ret =
      (strm << _pd_a.in ()) &&
      (strm << ACE_OutputCDR::from_string (_pd_b.in (), 10)) &&
      (strm << ACE_OutputCDR::from_string (_pd_c.in (), 10));
  if ( ! ret)
    return false;

  if (! ci.end_chunk (strm))
    return false;

  return true;
}

::CORBA::Boolean
OBV_Test::vtp::_tao_unmarshal_state (TAO_InputCDR &strm, TAO_ChunkInfo&ci)
{
  if (!ci.handle_chunking (strm))
    return false;

  CORBA::Boolean const ret =
      (strm >> _pd_a.out ()) &&
      (strm >> ACE_InputCDR::to_string (_pd_b.out (), 10)) &&
      (strm >> ACE_InputCDR::to_string (_pd_c.out (), 10));
  if (!ret)
    return false;

  if (this->require_truncation_)
    return ci.skip_chunks (strm);

  else
    return ci.handle_chunking (strm);


}

void
OBV_Test::vtp::truncation_hook (void)
{
  this->require_truncation_ = true;
}



// TAO_IDL - Generated from
// be/be_visitor_enum/cdr_op_cs.cpp:34


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (TAO_OutputCDR &strm, Test::A::FailOn _tao_enumerator)
{
  return strm << static_cast< ::CORBA::ULong> (_tao_enumerator);
}

::CORBA::Boolean operator>> (TAO_InputCDR &strm, Test::A::FailOn & _tao_enumerator)
{
  ::CORBA::ULong _tao_temp = 0;
  ::CORBA::Boolean const _tao_success = strm >> _tao_temp;

  if (_tao_success)
    {
      _tao_enumerator = static_cast<Test::A::FailOn> (_tao_temp);
    }

  return _tao_success;
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_interface/cdr_op_cs.cpp:51

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Test::A_ptr _tao_objref)
{
  ::CORBA::Object_ptr _tao_corba_obj = _tao_objref;
  return (strm << _tao_corba_obj);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Test::A_ptr &_tao_objref)
{
  ::CORBA::Object_var obj;

  if (!(strm >> obj.inout ()))
    {
      return false;
    }

  typedef ::Test::A RHS_SCOPED_NAME;

  // Narrow to the right type.
  _tao_objref =
    TAO::Narrow_Utils<RHS_SCOPED_NAME>::unchecked_narrow (obj.in ());

  return true;
}

TAO_END_VERSIONED_NAMESPACE_DECL



