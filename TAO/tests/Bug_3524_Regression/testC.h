// -*- C++ -*-
/**
 * Code generated by the The ACE ORB (TAO) IDL Compiler v2.4.1
 * TAO and the TAO IDL Compiler have been developed by:
 *       Center for Distributed Object Computing
 *       Washington University
 *       St. Louis, MO
 *       USA
 *       http://www.cs.wustl.edu/~schmidt/doc-center.html
 * and
 *       Distributed Object Computing Laboratory
 *       University of California at Irvine
 *       Irvine, CA
 *       USA
 * and
 *       Institute for Software Integrated Systems
 *       Vanderbilt University
 *       Nashville, TN
 *       USA
 *       http://www.isis.vanderbilt.edu/
 *
 * Information about TAO is available at:
 *     http://www.dre.vanderbilt.edu/~schmidt/TAO.html
 **/

// TAO_IDL - Generated from
// be/be_codegen.cpp:149

#ifndef _TAO_IDL_TESTC_XPILYW_H_
#define _TAO_IDL_TESTC_XPILYW_H_

#include /**/ "ace/pre.h"


#include /**/ "ace/config-all.h"

#if !defined (ACE_LACKS_PRAGMA_ONCE)
# pragma once
#endif /* ACE_LACKS_PRAGMA_ONCE */


#include "tao/AnyTypeCode/AnyTypeCode_methods.h"
#include "tao/AnyTypeCode/Any.h"
#include "tao/Valuetype/ValueBase.h"
#include "tao/CDR.h"
#include "tao/Valuetype/Valuetype_Adapter_Factory_Impl.h"
#include "tao/Valuetype/ValueFactory.h"
#include "tao/ORB.h"
#include "tao/SystemException.h"
#include "tao/UserException.h"
#include "tao/Basic_Types.h"
#include "tao/ORB_Constants.h"
#include "tao/Object.h"
#include "tao/String_Manager_T.h"
#include "tao/Sequence_T.h"
#include "tao/Valuetype/Value_VarOut_T.h"
#include "tao/Objref_VarOut_T.h"
#include "tao/Seq_Var_T.h"
#include "tao/Seq_Out_T.h"
#include "tao/VarOut_T.h"
#include "tao/Array_VarOut_T.h"
#include "tao/Arg_Traits_T.h"
#include "tao/Basic_Arguments.h"
#include "tao/Special_Basic_Arguments.h"
#include "tao/Any_Insert_Policy_T.h"
#include "tao/Basic_Argument_T.h"
#include "tao/Fixed_Size_Argument_T.h"
#include "tao/Var_Size_Argument_T.h"
#include "tao/BD_String_Argument_T.h"
#include "tao/AnyTypeCode/Any.h"
#include "tao/Object_Argument_T.h"
#include "tao/UB_String_Arguments.h"
#include "tao/Fixed_Array_Argument_T.h"
#include "tao/Var_Array_Argument_T.h"
#include /**/ "tao/Version.h"
#include /**/ "tao/Versioned_Namespace.h"

#if TAO_MAJOR_VERSION != 2 || TAO_MINOR_VERSION != 4 || TAO_MICRO_VERSION != 1
#error This file should be regenerated with TAO_IDL
#endif

#if defined (TAO_EXPORT_MACRO)
#undef TAO_EXPORT_MACRO
#endif
#define TAO_EXPORT_MACRO

// TAO_IDL - Generated from
// be/be_visitor_root/root_ch.cpp:157
TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<typename T> class Narrow_Utils;
}
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_module/module_ch.cpp:35

namespace Test
{

  // TAO_IDL - Generated from
  // be/be_visitor_constant/constant_ch.cpp:35

  const CORBA::Short BOUND = 10;

  // TAO_IDL - Generated from
  // be/be_visitor_constant/constant_ch.cpp:35

  const char *const FailStr = "A string longer then Test::BOUND";

  // TAO_IDL - Generated from
  // be/be_visitor_typedef/typedef_ch.cpp:404

  typedef char * bounded_string;
  typedef ::CORBA::String_var bounded_string_var;
  typedef ::CORBA::String_out bounded_string_out;

  // TAO_IDL - Generated from
  // be/be_visitor_typecode/typecode_decl.cpp:34

  extern  ::CORBA::TypeCode_ptr const _tc_bounded_string;

  // TAO_IDL - Generated from
  // be/be_visitor_sequence/sequence_ch.cpp:99

#if !defined (_TEST_SEQ_BD_STR_CH_)
#define _TEST_SEQ_BD_STR_CH_

  class seq_bd_str;

  typedef
    ::TAO_VarSeq_Var_T<
        seq_bd_str
      >
    seq_bd_str_var;

  typedef
    ::TAO_Seq_Out_T<
        seq_bd_str
      >
    seq_bd_str_out;

  class  seq_bd_str
    : public
        ::TAO::unbounded_bd_string_sequence<char, 10>
  {
  public:
    seq_bd_str (void);
    seq_bd_str ( ::CORBA::ULong max);
    seq_bd_str (
      ::CORBA::ULong max,
      ::CORBA::ULong length,
      ::CORBA::Char ** buffer,
      ::CORBA::Boolean release = false);
    seq_bd_str (const seq_bd_str &);
    virtual ~seq_bd_str (void);


    // TAO_IDL - Generated from
    // be/be_type.cpp:304


    typedef seq_bd_str_var _var_type;
    typedef seq_bd_str_out _out_type;

    static void _tao_any_destructor (void *);
  };

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // be/be_visitor_typecode/typecode_decl.cpp:34

  extern  ::CORBA::TypeCode_ptr const _tc_seq_bd_str;

  // TAO_IDL - Generated from
  // be/be_visitor_sequence/sequence_ch.cpp:99

#if !defined (_TEST_SEQ_BDS_STR_CH_)
#define _TEST_SEQ_BDS_STR_CH_

  class seq_bds_str;

  typedef
    ::TAO_VarSeq_Var_T<
        seq_bds_str
      >
    seq_bds_str_var;

  typedef
    ::TAO_Seq_Out_T<
        seq_bds_str
      >
    seq_bds_str_out;

  class  seq_bds_str
    : public
        ::TAO::unbounded_bd_string_sequence<char, 10>
  {
  public:
    seq_bds_str (void);
    seq_bds_str ( ::CORBA::ULong max);
    seq_bds_str (
      ::CORBA::ULong max,
      ::CORBA::ULong length,
      ::CORBA::Char ** buffer,
      ::CORBA::Boolean release = false);
    seq_bds_str (const seq_bds_str &);
    virtual ~seq_bds_str (void);


    // TAO_IDL - Generated from
    // be/be_type.cpp:304


    typedef seq_bds_str_var _var_type;
    typedef seq_bds_str_out _out_type;

    static void _tao_any_destructor (void *);
  };

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // be/be_visitor_typecode/typecode_decl.cpp:34

  extern  ::CORBA::TypeCode_ptr const _tc_seq_bds_str;

  // TAO_IDL - Generated from
  // be/be_visitor_array/array_ch.cpp:52

  typedef ::TAO::String_Manager arr_bd_str[1];
  typedef ::TAO::String_Manager arr_bd_str_slice;
  struct arr_bd_str_tag {};


  typedef
    TAO_VarArray_Var_T<
        arr_bd_str,
        arr_bd_str_slice,
        arr_bd_str_tag
      >
    arr_bd_str_var;

  typedef
    TAO_Array_Out_T<
        arr_bd_str,
        arr_bd_str_var,
        arr_bd_str_slice,
        arr_bd_str_tag
      >
    arr_bd_str_out;

  typedef
    TAO_Array_Forany_T<
        arr_bd_str,
        arr_bd_str_slice,
        arr_bd_str_tag
      >
    arr_bd_str_forany;

  TAO_NAMESPACE_STORAGE_CLASS arr_bd_str_slice *
  arr_bd_str_alloc (void);

  TAO_NAMESPACE_STORAGE_CLASS void
  arr_bd_str_free (
      arr_bd_str_slice *_tao_slice);

  TAO_NAMESPACE_STORAGE_CLASS arr_bd_str_slice *
  arr_bd_str_dup (
      const arr_bd_str_slice *_tao_slice);

  TAO_NAMESPACE_STORAGE_CLASS void
  arr_bd_str_copy (
      arr_bd_str_slice *_tao_to,
      const arr_bd_str_slice *_tao_from);

  // TAO_IDL - Generated from
  // be/be_visitor_typecode/typecode_decl.cpp:34

  extern  ::CORBA::TypeCode_ptr const _tc_arr_bd_str;

  // TAO_IDL - Generated from
  // be/be_visitor_array/array_ch.cpp:52

  typedef ::TAO::String_Manager arr_bds_str[1];
  typedef ::TAO::String_Manager arr_bds_str_slice;
  struct arr_bds_str_tag {};


  typedef
    TAO_VarArray_Var_T<
        arr_bds_str,
        arr_bds_str_slice,
        arr_bds_str_tag
      >
    arr_bds_str_var;

  typedef
    TAO_Array_Out_T<
        arr_bds_str,
        arr_bds_str_var,
        arr_bds_str_slice,
        arr_bds_str_tag
      >
    arr_bds_str_out;

  typedef
    TAO_Array_Forany_T<
        arr_bds_str,
        arr_bds_str_slice,
        arr_bds_str_tag
      >
    arr_bds_str_forany;

  TAO_NAMESPACE_STORAGE_CLASS arr_bds_str_slice *
  arr_bds_str_alloc (void);

  TAO_NAMESPACE_STORAGE_CLASS void
  arr_bds_str_free (
      arr_bds_str_slice *_tao_slice);

  TAO_NAMESPACE_STORAGE_CLASS arr_bds_str_slice *
  arr_bds_str_dup (
      const arr_bds_str_slice *_tao_slice);

  TAO_NAMESPACE_STORAGE_CLASS void
  arr_bds_str_copy (
      arr_bds_str_slice *_tao_to,
      const arr_bds_str_slice *_tao_from);

  // TAO_IDL - Generated from
  // be/be_visitor_typecode/typecode_decl.cpp:34

  extern  ::CORBA::TypeCode_ptr const _tc_arr_bds_str;

  // TAO_IDL - Generated from
  // be/be_type.cpp:258

  struct sct;

  typedef
    ::TAO_Var_Var_T<
        sct
      >
    sct_var;

  typedef
    ::TAO_Out_T<
        sct
      >
    sct_out;

  // TAO_IDL - Generated from
  // be/be_visitor_structure/structure_ch.cpp:48

  struct  sct
  {

    // TAO_IDL - Generated from
    // be/be_type.cpp:304


    typedef sct_var _var_type;
    typedef sct_out _out_type;

    static void _tao_any_destructor (void *);

    ::TAO::String_Manager a;
    ::TAO::String_Manager b;
    ::TAO::String_Manager c;
  };

  // TAO_IDL - Generated from
  // be/be_visitor_typecode/typecode_decl.cpp:34

  extern  ::CORBA::TypeCode_ptr const _tc_sct;

  // TAO_IDL - Generated from
  // be/be_visitor_enum/enum_ch.cpp:44

  enum string_field
  {
    PLAIN,
    BOUNDED,
    TYPEDEFED
  };

  typedef string_field &string_field_out;

  // TAO_IDL - Generated from
  // be/be_visitor_typecode/typecode_decl.cpp:34

  extern  ::CORBA::TypeCode_ptr const _tc_string_field;

  // TAO_IDL - Generated from
  // be/be_type.cpp:258

  class unn;

  typedef
    ::TAO_Var_Var_T<
        unn
      >
    unn_var;

  typedef
    ::TAO_Out_T<
        unn
      >
    unn_out;

  class  unn
  {
  public:
    unn (void);
    unn (const unn &);
    ~unn (void);

    unn &operator= (const unn &);

    // TAO_IDL - Generated from
    // be/be_visitor_union/discriminant_ch.cpp:67

    void _d (Test::string_field);
    Test::string_field _d (void) const;

    // TAO_IDL - Generated from
    // be/be_type.cpp:304


    typedef unn_var _var_type;
    typedef unn_out _out_type;

    static void _tao_any_destructor (void *);

    // TAO_IDL - Generated from
    // be/be_visitor_union_branch/public_ch.cpp:580

    void b (char *);
    void b (const char *);
    void b (const ::CORBA::String_var&);
    const char *b (void) const;

    // TAO_IDL - Generated from
    // be/be_visitor_union_branch/public_ch.cpp:580

    void c (char *);
    void c (const char *);
    void c (const ::CORBA::String_var&);
    const char *c (void) const;

    // TAO_IDL - Generated from
    // be/be_visitor_union_branch/public_ch.cpp:580

    void a (char *);
    void a (const char *);
    void a (const ::CORBA::String_var&);
    const char *a (void) const;
  private:
    Test::string_field disc_;

    union
    {
      // TAO_IDL - Generated from
      // be/be_visitor_union_branch/private_ch.cpp:474
      char *b_;
      // TAO_IDL - Generated from
      // be/be_visitor_union_branch/private_ch.cpp:474
      char *c_;
      // TAO_IDL - Generated from
      // be/be_visitor_union_branch/private_ch.cpp:474
      char *a_;
    } u_;

    /// TAO extension - frees any allocated storage.
    void _reset (void);
  };

  // TAO_IDL - Generated from
  // be/be_visitor_typecode/typecode_decl.cpp:34

  extern  ::CORBA::TypeCode_ptr const _tc_unn;

  // TAO_IDL - Generated from
  // be/be_visitor_exception/exception_ch.cpp:41

  class  exc : public ::CORBA::UserException
  {
  public:
    ::TAO::String_Manager a;
    ::TAO::String_Manager b;
    ::TAO::String_Manager c;

    exc (void);
    exc (const exc &);
    ~exc (void);

    exc &operator= (const exc &);

    static void _tao_any_destructor (void *);

    static exc *_downcast ( ::CORBA::Exception *);
    static const exc *_downcast ( ::CORBA::Exception const *);

    static ::CORBA::Exception *_alloc (void);

    virtual ::CORBA::Exception *_tao_duplicate (void) const;

    virtual void _raise (void) const;

    virtual void _tao_encode (TAO_OutputCDR &cdr) const;
    virtual void _tao_decode (TAO_InputCDR &cdr);

    // TAO_IDL - Generated from
    // be/be_visitor_exception/exception_ctor.cpp:51

    exc (
        const char * _tao_a,
        const char * _tao_b,
        const char * _tao_c);

    virtual ::CORBA::TypeCode_ptr _tao_type (void) const;
  };

  // TAO_IDL - Generated from
  // be/be_visitor_typecode/typecode_decl.cpp:34

  extern  ::CORBA::TypeCode_ptr const _tc_exc;

  // TAO_IDL - Generated from
  // be/be_visitor_valuebox/valuebox_ch.cpp:41

  class val_bd_str;

  typedef
    TAO_Value_Var_T<
        val_bd_str
      >
    val_bd_str_var;

  typedef
    TAO_Value_Out_T<
        val_bd_str
      >
    val_bd_str_out;

  class  val_bd_str
    : public virtual ::CORBA::DefaultValueRefCountBase
  {
  public:

    // TAO_IDL - Generated from
    // be/be_type.cpp:304


    typedef val_bd_str_var _var_type;
    typedef val_bd_str_out _out_type;

    static void _tao_any_destructor (void *);

    static val_bd_str* _downcast ( ::CORBA::ValueBase *);
    ::CORBA::ValueBase * _copy_value (void);

    virtual const char* _tao_obv_repository_id (void) const;

    virtual void _tao_obv_truncatable_repo_ids (Repository_Id_List &ids) const;

    static const char* _tao_obv_static_repository_id (void);

    static ::CORBA::Boolean _tao_unmarshal (
        TAO_InputCDR &,
        val_bd_str *&
      );

    virtual ::CORBA::TypeCode_ptr _tao_type (void) const;



    // TAO_IDL - Generated from
    // be/be_visitor_valuebox/valuebox_ch.cpp:406

    // Constructors
    val_bd_str (void);
    val_bd_str (char * val);
    val_bd_str (const char * val);
    val_bd_str (const ::CORBA::String_var& var);
    val_bd_str (const val_bd_str& val);
    // assignment operators
    val_bd_str& operator= (char * val);

    val_bd_str& operator= (const char * val);

    val_bd_str& operator= (const ::CORBA::String_var& var);

    // Accessor
    const char * _value (void) const;

    // Modifiers
    void _value (char * val);
    void _value (const char * val);
    void _value (const ::CORBA::String_var& var);

    // Access to the boxed value for method signatures
    const char * _boxed_in (void) const;
    char *& _boxed_inout (void);
    char *& _boxed_out (void);
    // Allows access and modification using a slot.
    char & operator[] ( ::CORBA::ULong slot);

    // Allows only accessing thru a slot.
    char operator[] ( ::CORBA::ULong slot) const;

  private:
    ::CORBA::String_var _pd_value;


    // TAO_IDL - Generated from
    // be/be_visitor_valuebox/valuebox_ch.cpp:114

  protected:
    virtual ~val_bd_str (void);
    virtual ::CORBA::Boolean _tao_marshal_v (TAO_OutputCDR &) const;
    virtual ::CORBA::Boolean _tao_unmarshal_v (TAO_InputCDR &);
    virtual ::CORBA::Boolean _tao_match_formal_type (ptrdiff_t ) const;

  private:
    void operator= (const val_bd_str & val);

  };

  // TAO_IDL - Generated from
  // be/be_visitor_typecode/typecode_decl.cpp:34

  extern  ::CORBA::TypeCode_ptr const _tc_val_bd_str;

  // TAO_IDL - Generated from
  // be/be_visitor_valuebox/valuebox_ch.cpp:41

  class val_bds_str;

  typedef
    TAO_Value_Var_T<
        val_bds_str
      >
    val_bds_str_var;

  typedef
    TAO_Value_Out_T<
        val_bds_str
      >
    val_bds_str_out;

  class  val_bds_str
    : public virtual ::CORBA::DefaultValueRefCountBase
  {
  public:

    // TAO_IDL - Generated from
    // be/be_type.cpp:304


    typedef val_bds_str_var _var_type;
    typedef val_bds_str_out _out_type;

    static void _tao_any_destructor (void *);

    static val_bds_str* _downcast ( ::CORBA::ValueBase *);
    ::CORBA::ValueBase * _copy_value (void);

    virtual const char* _tao_obv_repository_id (void) const;

    virtual void _tao_obv_truncatable_repo_ids (Repository_Id_List &ids) const;

    static const char* _tao_obv_static_repository_id (void);

    static ::CORBA::Boolean _tao_unmarshal (
        TAO_InputCDR &,
        val_bds_str *&
      );

    virtual ::CORBA::TypeCode_ptr _tao_type (void) const;



    // TAO_IDL - Generated from
    // be/be_visitor_valuebox/valuebox_ch.cpp:406

    // Constructors
    val_bds_str (void);
    val_bds_str (char * val);
    val_bds_str (const char * val);
    val_bds_str (const ::CORBA::String_var& var);
    val_bds_str (const val_bds_str& val);
    // assignment operators
    val_bds_str& operator= (char * val);

    val_bds_str& operator= (const char * val);

    val_bds_str& operator= (const ::CORBA::String_var& var);

    // Accessor
    const char * _value (void) const;

    // Modifiers
    void _value (char * val);
    void _value (const char * val);
    void _value (const ::CORBA::String_var& var);

    // Access to the boxed value for method signatures
    const char * _boxed_in (void) const;
    char *& _boxed_inout (void);
    char *& _boxed_out (void);
    // Allows access and modification using a slot.
    char & operator[] ( ::CORBA::ULong slot);

    // Allows only accessing thru a slot.
    char operator[] ( ::CORBA::ULong slot) const;

  private:
    ::CORBA::String_var _pd_value;


    // TAO_IDL - Generated from
    // be/be_visitor_valuebox/valuebox_ch.cpp:114

  protected:
    virtual ~val_bds_str (void);
    virtual ::CORBA::Boolean _tao_marshal_v (TAO_OutputCDR &) const;
    virtual ::CORBA::Boolean _tao_unmarshal_v (TAO_InputCDR &);
    virtual ::CORBA::Boolean _tao_match_formal_type (ptrdiff_t ) const;

  private:
    void operator= (const val_bds_str & val);

  };

  // TAO_IDL - Generated from
  // be/be_visitor_typecode/typecode_decl.cpp:34

  extern  ::CORBA::TypeCode_ptr const _tc_val_bds_str;

  // TAO_IDL - Generated from
  // be/be_visitor_valuebox/valuebox_ch.cpp:41

  class val_arr_bd_str;

  typedef
    TAO_Value_Var_T<
        val_arr_bd_str
      >
    val_arr_bd_str_var;

  typedef
    TAO_Value_Out_T<
        val_arr_bd_str
      >
    val_arr_bd_str_out;

  class  val_arr_bd_str
    : public virtual ::CORBA::DefaultValueRefCountBase
  {
  public:

    // TAO_IDL - Generated from
    // be/be_type.cpp:304


    typedef val_arr_bd_str_var _var_type;
    typedef val_arr_bd_str_out _out_type;

    static void _tao_any_destructor (void *);

    static val_arr_bd_str* _downcast ( ::CORBA::ValueBase *);
    ::CORBA::ValueBase * _copy_value (void);

    virtual const char* _tao_obv_repository_id (void) const;

    virtual void _tao_obv_truncatable_repo_ids (Repository_Id_List &ids) const;

    static const char* _tao_obv_static_repository_id (void);

    static ::CORBA::Boolean _tao_unmarshal (
        TAO_InputCDR &,
        val_arr_bd_str *&
      );

    virtual ::CORBA::TypeCode_ptr _tao_type (void) const;



    // TAO_IDL - Generated from
    // be/be_visitor_valuebox/valuebox_ch.cpp:167


    // Constructors
    val_arr_bd_str (void);
    val_arr_bd_str (const Test::arr_bds_str val);
    val_arr_bd_str (const val_arr_bd_str& val);

    // assignment operator
    val_arr_bd_str& operator= (const Test::arr_bds_str val);

    // Accessors and modifier
    const Test::arr_bds_str_slice* _value (void) const;
    Test::arr_bds_str_slice* _value (void);
    void _value (const Test::arr_bds_str val);

    const Test::arr_bds_str_slice & operator[] ( ::CORBA::ULong index) const;
    Test::arr_bds_str_slice &  operator[] ( ::CORBA::ULong index);

    const Test::arr_bds_str_slice * _boxed_in (void) const;
    Test::arr_bds_str_slice * _boxed_inout (void);
    Test::arr_bds_str_slice * _boxed_out (void);


  private:
    Test::arr_bds_str_var _pd_value;


    // TAO_IDL - Generated from
    // be/be_visitor_valuebox/valuebox_ch.cpp:114

  protected:
    virtual ~val_arr_bd_str (void);
    virtual ::CORBA::Boolean _tao_marshal_v (TAO_OutputCDR &) const;
    virtual ::CORBA::Boolean _tao_unmarshal_v (TAO_InputCDR &);
    virtual ::CORBA::Boolean _tao_match_formal_type (ptrdiff_t ) const;

  private:
    void operator= (const val_arr_bd_str & val);

  };

  // TAO_IDL - Generated from
  // be/be_visitor_typecode/typecode_decl.cpp:34

  extern  ::CORBA::TypeCode_ptr const _tc_val_arr_bd_str;

  // TAO_IDL - Generated from
  // be/be_valuetype.cpp:564



#if !defined (_TEST_VTP__VAR_OUT_CH_)
#define _TEST_VTP__VAR_OUT_CH_

  class vtp;
  typedef
    TAO_Value_Var_T<
        vtp
      >
    vtp_var;

  typedef
    TAO_Value_Out_T<
        vtp
      >
    vtp_out;

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // be/be_visitor_valuetype/valuetype_ch.cpp:50

  class  vtp
    : public virtual ::CORBA::ValueBase
  {
  public:

    // TAO_IDL - Generated from
    // be/be_type.cpp:304

    typedef vtp * _ptr_type;
    typedef vtp_var _var_type;
    typedef vtp_out _out_type;

    static void _tao_any_destructor (void *);

    static vtp* _downcast ( ::CORBA::ValueBase *v);

    /// TAO extensions or internals
    static ::CORBA::Boolean _tao_unmarshal (
        TAO_InputCDR &strm,
        vtp *&new_object);

    virtual const char* _tao_obv_repository_id (void) const;

    virtual void _tao_obv_truncatable_repo_ids (Repository_Id_List &) const;

    static const char* _tao_obv_static_repository_id (void);

    virtual ::CORBA::TypeCode_ptr _tao_type (void) const;

  public:

    // TAO_IDL - Generated from
    // be/be_visitor_valuetype/field_ch.cpp:608

    virtual void a (char *val) = 0;
    virtual void a (const char *val) = 0;
    virtual void a (const ::CORBA::String_var &val) = 0;
    virtual const char *a (void) const = 0;

  public:

    // TAO_IDL - Generated from
    // be/be_visitor_valuetype/field_ch.cpp:608

    virtual void b (char *val) = 0;
    virtual void b (const char *val) = 0;
    virtual void b (const ::CORBA::String_var &val) = 0;
    virtual const char *b (void) const = 0;

  public:

    // TAO_IDL - Generated from
    // be/be_visitor_valuetype/field_ch.cpp:608

    virtual void c (char *val) = 0;
    virtual void c (const char *val) = 0;
    virtual void c (const ::CORBA::String_var &val) = 0;
    virtual const char *c (void) const = 0;

    // TAO_IDL - Generated from
    // be/be_visitor_valuetype/valuetype_ch.cpp:238

  protected:
    vtp (void);
    virtual ~vtp (void);

    virtual ::CORBA::Boolean _tao_marshal_v (TAO_OutputCDR &) const;
    virtual ::CORBA::Boolean _tao_unmarshal_v (TAO_InputCDR &);
    virtual ::CORBA::Boolean _tao_match_formal_type (ptrdiff_t ) const;

  private:
    vtp (const vtp &);
    void operator= (const vtp &);

  protected:
    virtual ::CORBA::Boolean
    _tao_marshal__Test_vtp (TAO_OutputCDR &, TAO_ChunkInfo &) const = 0;

    virtual ::CORBA::Boolean
    _tao_unmarshal__Test_vtp (TAO_InputCDR &, TAO_ChunkInfo &) = 0;
  };

  // TAO_IDL - Generated from
  // be/be_visitor_valuetype/valuetype_init_ch.cpp:57

  class  vtp_init
    : public virtual ::CORBA::ValueFactoryBase
  {
  public:
    vtp_init (void);

    static vtp_init* _downcast ( ::CORBA::ValueFactoryBase *);

    virtual ::CORBA::ValueBase *
    create_for_unmarshal (void);

    // TAO-specific extensions
  public:
    virtual const char* tao_repository_id (void);

  protected:
    virtual ~vtp_init (void);
  };

  // TAO_IDL - Generated from
  // be/be_visitor_typecode/typecode_decl.cpp:34

  extern  ::CORBA::TypeCode_ptr const _tc_vtp;

  // TAO_IDL - Generated from
  // be/be_interface.cpp:748

#if !defined (_TEST_A__VAR_OUT_CH_)
#define _TEST_A__VAR_OUT_CH_

  class A;
  typedef A *A_ptr;

  typedef
    TAO_Objref_Var_T<
        A
      >
    A_var;

  typedef
    TAO_Objref_Out_T<
        A
      >
    A_out;

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // be/be_visitor_interface/interface_ch.cpp:40

  class  A
    : public virtual ::CORBA::Object
  {
  public:
    friend class TAO::Narrow_Utils<A>;

    // TAO_IDL - Generated from
    // be/be_type.cpp:304

    typedef A_ptr _ptr_type;
    typedef A_var _var_type;
    typedef A_out _out_type;

    static void _tao_any_destructor (void *);

    // The static operations.
    static A_ptr _duplicate (A_ptr obj);

    static void _tao_release (A_ptr obj);

    static A_ptr _narrow (::CORBA::Object_ptr obj);
    static A_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
    static A_ptr _nil (void);

    // TAO_IDL - Generated from
    // be/be_visitor_enum/enum_ch.cpp:44

    enum FailOn
    {
      ARG1,
      ARG2,
      ARG3,
      RETN
    };

    typedef FailOn &FailOn_out;

    // TAO_IDL - Generated from
    // be/be_visitor_typecode/typecode_decl.cpp:34

    static ::CORBA::TypeCode_ptr const _tc_FailOn;

    virtual char * method (
      ::Test::A::FailOn where,
      const char * arg1,
      ::CORBA::String_out arg2,
      char *& arg3);

    virtual char * method_s (
      ::Test::A::FailOn where,
      const char * arg1,
      ::CORBA::String_out arg2,
      char *& arg3);

    virtual ::Test::seq_bd_str * seq_method (
      ::Test::A::FailOn where,
      const ::Test::seq_bd_str & arg1,
      ::Test::seq_bd_str_out arg2,
      ::Test::seq_bd_str & arg3);

    virtual ::Test::seq_bds_str * seq_method_s (
      ::Test::A::FailOn where,
      const ::Test::seq_bds_str & arg1,
      ::Test::seq_bds_str_out arg2,
      ::Test::seq_bds_str & arg3);

    virtual ::Test::arr_bd_str_slice * arr_method (
      ::Test::A::FailOn where,
      const ::Test::arr_bd_str arg1,
      ::Test::arr_bd_str_out arg2,
      ::Test::arr_bd_str arg3);

    virtual ::Test::arr_bds_str_slice * arr_method_s (
      ::Test::A::FailOn where,
      const ::Test::arr_bds_str arg1,
      ::Test::arr_bds_str_out arg2,
      ::Test::arr_bds_str arg3);

    virtual ::Test::sct * sct_method (
      ::Test::A::FailOn where,
      const ::Test::sct & arg1,
      ::Test::sct_out arg2,
      ::Test::sct & arg3);

    virtual ::Test::unn * unn_method (
      ::Test::A::FailOn where,
      const ::Test::unn & arg1,
      ::Test::unn_out arg2,
      ::Test::unn & arg3);

    virtual ::Test::val_bd_str * vbx_method (
      ::Test::A::FailOn where,
      ::Test::val_bd_str * arg1,
      ::Test::val_bd_str_out arg2,
      ::Test::val_bd_str *& arg3);

    virtual ::Test::val_bds_str * vbx_method_s (
      ::Test::A::FailOn where,
      ::Test::val_bds_str * arg1,
      ::Test::val_bds_str_out arg2,
      ::Test::val_bds_str *& arg3);

    virtual ::Test::vtp * vtp_method (
      ::Test::A::FailOn where,
      ::Test::vtp * arg1,
      ::Test::vtp_out arg2,
      ::Test::vtp *& arg3);

    virtual void exc_method (
      ::Test::string_field f);

    virtual void shutdown (
      void);

    // TAO_IDL - Generated from
    // be/be_visitor_interface/interface_ch.cpp:137

    virtual ::CORBA::Boolean _is_a (const char *type_id);
    virtual const char* _interface_repository_id (void) const;
    virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);

  protected:
    // Concrete interface only.
    A (void);

    // Concrete non-local interface only.
    A (
        ::IOP::IOR *ior,
        TAO_ORB_Core *orb_core);

    // Non-local interface only.
    A (
        TAO_Stub *objref,
        ::CORBA::Boolean _tao_collocated = false,
        TAO_Abstract_ServantBase *servant = 0,
        TAO_ORB_Core *orb_core = 0);

    virtual ~A (void);

  private:
    // Private and unimplemented for concrete interfaces.
    A (const A &);

    void operator= (const A &);
  };

  // TAO_IDL - Generated from
  // be/be_visitor_typecode/typecode_decl.cpp:34

  extern  ::CORBA::TypeCode_ptr const _tc_A;

// TAO_IDL - Generated from
// be/be_visitor_module/module_ch.cpp:64

} // module Test

// TAO_IDL - Generated from
// be/be_visitor_arg_traits.cpp:66

TAO_BEGIN_VERSIONED_NAMESPACE_DECL


// Arg traits specializations.
namespace TAO
{

#if !defined (_BOUNDED_STRING10__ARG_TRAITS_)
#define _BOUNDED_STRING10__ARG_TRAITS_

  struct bounded_string_10 {};

  template<>
  class Arg_Traits<bounded_string_10>
    : public
        BD_String_Arg_Traits_T<
            CORBA::String_var,
            10,
            TAO::Any_Insert_Policy_Stream
        >
  {
  };

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:683

  template<>
  class Arg_Traits< ::Test::seq_bd_str>
    : public
        Var_Size_Arg_Traits_T<
            ::Test::seq_bd_str,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:683

  template<>
  class Arg_Traits< ::Test::seq_bds_str>
    : public
        Var_Size_Arg_Traits_T<
            ::Test::seq_bds_str,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

  template<>
  class Arg_Traits< ::Test::arr_bd_str_tag>
    : public
        Var_Array_Arg_Traits_T<
            ::Test::arr_bd_str_out,
            ::Test::arr_bd_str_forany,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

  template<>
  class Arg_Traits< ::Test::arr_bds_str_tag>
    : public
        Var_Array_Arg_Traits_T<
            ::Test::arr_bds_str_out,
            ::Test::arr_bds_str_forany,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:945

  template<>
  class Arg_Traits< ::Test::sct>
    : public
        Var_Size_Arg_Traits_T<
            ::Test::sct,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:902

  template<>
  class Arg_Traits< ::Test::string_field>
    : public
        Basic_Arg_Traits_T<
            ::Test::string_field,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:1056

  template<>
  class Arg_Traits< ::Test::unn>
    : public
        Var_Size_Arg_Traits_T<
            ::Test::unn,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:250

  template<>
  class Arg_Traits< ::Test::val_bd_str>
    : public
        Object_Arg_Traits_T<
            ::Test::val_bd_str *,
            ::Test::val_bd_str_var,
            ::Test::val_bd_str_out,
            TAO::Value_Traits<Test::val_bd_str>,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:250

  template<>
  class Arg_Traits< ::Test::val_bds_str>
    : public
        Object_Arg_Traits_T<
            ::Test::val_bds_str *,
            ::Test::val_bds_str_var,
            ::Test::val_bds_str_out,
            TAO::Value_Traits<Test::val_bds_str>,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:250

  template<>
  class Arg_Traits< ::Test::val_arr_bd_str>
    : public
        Object_Arg_Traits_T<
            ::Test::val_arr_bd_str *,
            ::Test::val_arr_bd_str_var,
            ::Test::val_arr_bd_str_out,
            TAO::Value_Traits<Test::val_arr_bd_str>,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:306

#if !defined (_TEST_VTP__ARG_TRAITS_)
#define _TEST_VTP__ARG_TRAITS_

  template<>
  class Arg_Traits< ::Test::vtp>
    : public
        Object_Arg_Traits_T<
            ::Test::vtp *,
            ::Test::vtp_var,
            ::Test::vtp_out,
            TAO::Value_Traits<Test::vtp>,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:145

#if !defined (_TEST_A__ARG_TRAITS_)
#define _TEST_A__ARG_TRAITS_

  template<>
  class  Arg_Traits< ::Test::A>
    : public
        Object_Arg_Traits_T<
            ::Test::A_ptr,
            ::Test::A_var,
            ::Test::A_out,
            TAO::Objref_Traits<Test::A>,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:902

  template<>
  class Arg_Traits< ::Test::A::FailOn>
    : public
        Basic_Arg_Traits_T<
            ::Test::A::FailOn,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_valuetype/obv_module.cpp:44

namespace OBV_Test
{

  // TAO_IDL - Generated from
  // be/be_visitor_valuetype/valuetype_obv_ch.cpp:44

  // OBV_ class
  class  vtp
    : public virtual Test::vtp,
      public virtual ::CORBA::DefaultValueRefCountBase
  {

public:

  // TAO_IDL - Generated from
  // be/be_visitor_valuetype/field_ch.cpp:608

  virtual void a (char *val);
  virtual void a (const char *val);
  virtual void a (const ::CORBA::String_var &val);
  virtual const char *a (void) const;

public:

  // TAO_IDL - Generated from
  // be/be_visitor_valuetype/field_ch.cpp:608

  virtual void b (char *val);
  virtual void b (const char *val);
  virtual void b (const ::CORBA::String_var &val);
  virtual const char *b (void) const;

public:

  // TAO_IDL - Generated from
  // be/be_visitor_valuetype/field_ch.cpp:608

  virtual void c (char *val);
  virtual void c (const char *val);
  virtual void c (const ::CORBA::String_var &val);
  virtual const char *c (void) const;

public:
  vtp (void);
  vtp (
      const char * _tao_init_a,
      const char * _tao_init_b,
      const char * _tao_init_c
    );
  virtual ~vtp (void);

public:
  virtual ::CORBA::ValueBase *_copy_value (void);

protected:
  virtual ::CORBA::Boolean
  _tao_marshal__Test_vtp (TAO_OutputCDR &, TAO_ChunkInfo &) const;

  virtual ::CORBA::Boolean
  _tao_unmarshal__Test_vtp (TAO_InputCDR &, TAO_ChunkInfo &);

  ::CORBA::Boolean _tao_marshal_state (TAO_OutputCDR &, TAO_ChunkInfo &) const;
  ::CORBA::Boolean _tao_unmarshal_state (TAO_InputCDR &, TAO_ChunkInfo &);
  virtual void truncation_hook (void);

private:
  ::TAO::String_Manager _pd_a;
  ::TAO::String_Manager _pd_b;
  ::TAO::String_Manager _pd_c;
  CORBA::Boolean require_truncation_;
};
}

// TAO_IDL - Generated from
// be/be_visitor_traits.cpp:60

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Traits specializations.
namespace TAO
{
  template<>
  struct  Array_Traits<
      Test::arr_bd_str_forany
    >
  {
    static void free (
        Test::arr_bd_str_slice * _tao_slice);
    static Test::arr_bd_str_slice * dup (
        const Test::arr_bd_str_slice * _tao_slice);
    static void copy (
        Test::arr_bd_str_slice * _tao_to,
        const Test::arr_bd_str_slice * _tao_from);
    static Test::arr_bd_str_slice * alloc (void);
    static void zero (
        Test::arr_bd_str_slice * _tao_slice);
  };
  template<>
  struct  Array_Traits<
      Test::arr_bds_str_forany
    >
  {
    static void free (
        Test::arr_bds_str_slice * _tao_slice);
    static Test::arr_bds_str_slice * dup (
        const Test::arr_bds_str_slice * _tao_slice);
    static void copy (
        Test::arr_bds_str_slice * _tao_to,
        const Test::arr_bds_str_slice * _tao_from);
    static Test::arr_bds_str_slice * alloc (void);
    static void zero (
        Test::arr_bds_str_slice * _tao_slice);
  };

#if !defined (_TEST_VAL_BD_STR__TRAITS_)
#define _TEST_VAL_BD_STR__TRAITS_

  template<>
  struct  Value_Traits<Test::val_bd_str>
  {
    static void add_ref (Test::val_bd_str *);
    static void remove_ref (Test::val_bd_str *);
    static void release (Test::val_bd_str *);
  };

#endif /* end #if !defined */

#if !defined (_TEST_VAL_BDS_STR__TRAITS_)
#define _TEST_VAL_BDS_STR__TRAITS_

  template<>
  struct  Value_Traits<Test::val_bds_str>
  {
    static void add_ref (Test::val_bds_str *);
    static void remove_ref (Test::val_bds_str *);
    static void release (Test::val_bds_str *);
  };

#endif /* end #if !defined */

#if !defined (_TEST_VAL_ARR_BD_STR__TRAITS_)
#define _TEST_VAL_ARR_BD_STR__TRAITS_

  template<>
  struct  Value_Traits<Test::val_arr_bd_str>
  {
    static void add_ref (Test::val_arr_bd_str *);
    static void remove_ref (Test::val_arr_bd_str *);
    static void release (Test::val_arr_bd_str *);
  };

#endif /* end #if !defined */

#if !defined (_TEST_VTP__TRAITS_)
#define _TEST_VTP__TRAITS_

  template<>
  struct  Value_Traits<Test::vtp>
  {
    static void add_ref (Test::vtp *);
    static void remove_ref (Test::vtp *);
    static void release (Test::vtp *);
  };

#endif /* end #if !defined */

#if !defined (_TEST_A__TRAITS_)
#define _TEST_A__TRAITS_

  template<>
  struct  Objref_Traits< ::Test::A>
  {
    static ::Test::A_ptr duplicate (
        ::Test::A_ptr p);
    static void release (
        ::Test::A_ptr p);
    static ::Test::A_ptr nil (void);
    static ::CORBA::Boolean marshal (
        const ::Test::A_ptr p,
        TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */
}
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_sequence/any_op_ch.cpp:47



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace Test
{
   void operator<<= ( ::CORBA::Any &, const ::Test::seq_bd_str &); // copying version
   void operator<<= ( ::CORBA::Any &, ::Test::seq_bd_str*); // noncopying version
   ::CORBA::Boolean operator>>= (const ::CORBA::Any &, ::Test::seq_bd_str *&); // deprecated
   ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const ::Test::seq_bd_str *&);
}

#else


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 void operator<<= ( ::CORBA::Any &, const Test::seq_bd_str &); // copying version
 void operator<<= ( ::CORBA::Any &, Test::seq_bd_str*); // noncopying version
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, Test::seq_bd_str *&); // deprecated
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const Test::seq_bd_str *&);
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_sequence/any_op_ch.cpp:47



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace Test
{
   void operator<<= ( ::CORBA::Any &, const ::Test::seq_bds_str &); // copying version
   void operator<<= ( ::CORBA::Any &, ::Test::seq_bds_str*); // noncopying version
   ::CORBA::Boolean operator>>= (const ::CORBA::Any &, ::Test::seq_bds_str *&); // deprecated
   ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const ::Test::seq_bds_str *&);
}

#else


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 void operator<<= ( ::CORBA::Any &, const Test::seq_bds_str &); // copying version
 void operator<<= ( ::CORBA::Any &, Test::seq_bds_str*); // noncopying version
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, Test::seq_bds_str *&); // deprecated
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const Test::seq_bds_str *&);
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_array/any_op_ch.cpp:37


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 void operator<<= (::CORBA::Any &, const Test::arr_bd_str_forany &);
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, Test::arr_bd_str_forany &);
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_array/any_op_ch.cpp:37


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 void operator<<= (::CORBA::Any &, const Test::arr_bds_str_forany &);
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, Test::arr_bds_str_forany &);
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_structure/any_op_ch.cpp:42



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace Test
{
   void operator<<= (::CORBA::Any &, const ::Test::sct &); // copying version
   void operator<<= (::CORBA::Any &, ::Test::sct*); // noncopying version
   ::CORBA::Boolean operator>>= (const ::CORBA::Any &, ::Test::sct *&); // deprecated
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const ::Test::sct *&);
}

#else


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 void operator<<= (::CORBA::Any &, const Test::sct &); // copying version
 void operator<<= (::CORBA::Any &, Test::sct*); // noncopying version
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, Test::sct *&); // deprecated
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const Test::sct *&);
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_enum/any_op_ch.cpp:36

#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace Test
{


   void operator<<= (::CORBA::Any &, ::Test::string_field);
   ::CORBA::Boolean operator>>= (const ::CORBA::Any &, ::Test::string_field &);
}

#else


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



 void operator<<= (::CORBA::Any &, Test::string_field);
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, Test::string_field &);
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_union/any_op_ch.cpp:37



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace Test
{
   void operator<<= (::CORBA::Any &, const ::Test::unn &); // copying version
   void operator<<= (::CORBA::Any &, ::Test::unn*); // noncopying version
   ::CORBA::Boolean operator>>= (const ::CORBA::Any &, ::Test::unn *&); // deprecated
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const ::Test::unn *&);
}

#else


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 void operator<<= (::CORBA::Any &, const Test::unn &); // copying version
 void operator<<= (::CORBA::Any &, Test::unn*); // noncopying version
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, Test::unn *&); // deprecated
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const Test::unn *&);
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_exception/any_op_ch.cpp:38

#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace Test
{


   void operator<<= (::CORBA::Any &, const ::Test::exc &); // copying version
   void operator<<= (::CORBA::Any &, ::Test::exc*); // noncopying version
   ::CORBA::Boolean operator>>= (const ::CORBA::Any &, ::Test::exc *&); // deprecated
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const ::Test::exc *&);
}

#else


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



 void operator<<= (::CORBA::Any &, const Test::exc &); // copying version
 void operator<<= (::CORBA::Any &, Test::exc*); // noncopying version
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, Test::exc *&); // deprecated
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const Test::exc *&);
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_valuebox/any_op_ch.cpp:43



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace Test
{
   void operator<<= ( ::CORBA::Any &, val_bd_str *); // copying
   void operator<<= ( ::CORBA::Any &, val_bd_str **); // non-copying
   ::CORBA::Boolean operator>>= (const ::CORBA::Any &, val_bd_str *&);
}

#else


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 void operator<<= (::CORBA::Any &, Test::val_bd_str *); // copying
 void operator<<= (::CORBA::Any &, Test::val_bd_str **); // non-copying
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, Test::val_bd_str *&);
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_valuebox/any_op_ch.cpp:43



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace Test
{
   void operator<<= ( ::CORBA::Any &, val_bds_str *); // copying
   void operator<<= ( ::CORBA::Any &, val_bds_str **); // non-copying
   ::CORBA::Boolean operator>>= (const ::CORBA::Any &, val_bds_str *&);
}

#else


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 void operator<<= (::CORBA::Any &, Test::val_bds_str *); // copying
 void operator<<= (::CORBA::Any &, Test::val_bds_str **); // non-copying
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, Test::val_bds_str *&);
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_valuebox/any_op_ch.cpp:43



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace Test
{
   void operator<<= ( ::CORBA::Any &, val_arr_bd_str *); // copying
   void operator<<= ( ::CORBA::Any &, val_arr_bd_str **); // non-copying
   ::CORBA::Boolean operator>>= (const ::CORBA::Any &, val_arr_bd_str *&);
}

#else


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 void operator<<= (::CORBA::Any &, Test::val_arr_bd_str *); // copying
 void operator<<= (::CORBA::Any &, Test::val_arr_bd_str **); // non-copying
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, Test::val_arr_bd_str *&);
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_valuetype/any_op_ch.cpp:43



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace Test
{
   void operator<<= ( ::CORBA::Any &, vtp *); // copying
   void operator<<= ( ::CORBA::Any &, vtp **); // non-copying
   ::CORBA::Boolean operator>>= (const ::CORBA::Any &, vtp *&);
}

#else


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 void operator<<= (::CORBA::Any &, Test::vtp *); // copying
 void operator<<= (::CORBA::Any &, Test::vtp **); // non-copying
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, Test::vtp *&);
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_interface/any_op_ch.cpp:41



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace Test
{
   void operator<<= ( ::CORBA::Any &, A_ptr); // copying
   void operator<<= ( ::CORBA::Any &, A_ptr *); // non-copying
   ::CORBA::Boolean operator>>= (const ::CORBA::Any &, A_ptr &);
}

#else


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 void operator<<= (::CORBA::Any &, Test::A_ptr); // copying
 void operator<<= (::CORBA::Any &, Test::A_ptr *); // non-copying
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, Test::A_ptr &);
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_enum/any_op_ch.cpp:36

#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace Test
{


   void operator<<= (::CORBA::Any &, ::Test::A::FailOn);
   ::CORBA::Boolean operator>>= (const ::CORBA::Any &, ::Test::A::FailOn &);
}

#else


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



 void operator<<= (::CORBA::Any &, Test::A::FailOn);
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, Test::A::FailOn &);
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_sequence/cdr_op_ch.cpp:65

#if !defined _TAO_CDR_OP_Test_seq_bd_str_H_
#define _TAO_CDR_OP_Test_seq_bd_str_H_
TAO_BEGIN_VERSIONED_NAMESPACE_DECL


 ::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Test::seq_bd_str &_tao_sequence);
 ::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Test::seq_bd_str &_tao_sequence);

TAO_END_VERSIONED_NAMESPACE_DECL



#endif /* _TAO_CDR_OP_Test_seq_bd_str_H_ */

// TAO_IDL - Generated from
// be/be_visitor_sequence/cdr_op_ch.cpp:65

#if !defined _TAO_CDR_OP_Test_seq_bds_str_H_
#define _TAO_CDR_OP_Test_seq_bds_str_H_
TAO_BEGIN_VERSIONED_NAMESPACE_DECL


 ::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Test::seq_bds_str &_tao_sequence);
 ::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Test::seq_bds_str &_tao_sequence);

TAO_END_VERSIONED_NAMESPACE_DECL



#endif /* _TAO_CDR_OP_Test_seq_bds_str_H_ */

// TAO_IDL - Generated from
// be/be_visitor_array/cdr_op_ch.cpp:99


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 CORBA::Boolean operator<< (TAO_OutputCDR &strm, const Test::arr_bd_str_forany &_tao_array);
 ::CORBA::Boolean operator>> (TAO_InputCDR &, Test::arr_bd_str_forany &_tao_array);

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// be/be_visitor_array/cdr_op_ch.cpp:99


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 CORBA::Boolean operator<< (TAO_OutputCDR &strm, const Test::arr_bds_str_forany &_tao_array);
 ::CORBA::Boolean operator>> (TAO_InputCDR &, Test::arr_bds_str_forany &_tao_array);

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// be/be_visitor_structure/cdr_op_ch.cpp:43


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 ::CORBA::Boolean operator<< (TAO_OutputCDR &, const Test::sct &);
 ::CORBA::Boolean operator>> (TAO_InputCDR &, Test::sct &);

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_enum/cdr_op_ch.cpp:34


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 ::CORBA::Boolean operator<< (TAO_OutputCDR &strm, Test::string_field _tao_enumerator);
 ::CORBA::Boolean operator>> (TAO_InputCDR &strm, Test::string_field &_tao_enumerator);

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_union/cdr_op_ch.cpp:38


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 ::CORBA::Boolean operator<< (TAO_OutputCDR &, const Test::unn &);
 ::CORBA::Boolean operator>> (TAO_InputCDR &, Test::unn &);

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_exception/cdr_op_ch.cpp:37
TAO_BEGIN_VERSIONED_NAMESPACE_DECL



 ::CORBA::Boolean operator<< (TAO_OutputCDR &, const Test::exc &);
 ::CORBA::Boolean operator>> (TAO_InputCDR &, Test::exc &);

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_valuebox/cdr_op_ch.cpp:39


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 ::CORBA::Boolean operator<< (TAO_OutputCDR &, const Test::val_bd_str *);
 ::CORBA::Boolean operator>> (TAO_InputCDR &, Test::val_bd_str *&);
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_valuebox/cdr_op_ch.cpp:39


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 ::CORBA::Boolean operator<< (TAO_OutputCDR &, const Test::val_bds_str *);
 ::CORBA::Boolean operator>> (TAO_InputCDR &, Test::val_bds_str *&);
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_valuebox/cdr_op_ch.cpp:39


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 ::CORBA::Boolean operator<< (TAO_OutputCDR &, const Test::val_arr_bd_str *);
 ::CORBA::Boolean operator>> (TAO_InputCDR &, Test::val_arr_bd_str *&);
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_valuetype.cpp:456


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

namespace CORBA
{
  extern  void add_ref (Test::vtp *);
  extern  void remove_ref (Test::vtp *);
}
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_valuetype/cdr_op_ch.cpp:49


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 ::CORBA::Boolean operator<< (TAO_OutputCDR &, const Test::vtp *);
 ::CORBA::Boolean operator>> (TAO_InputCDR &, Test::vtp *&);

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_interface/cdr_op_ch.cpp:41

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 ::CORBA::Boolean operator<< (TAO_OutputCDR &, const Test::A_ptr );
 ::CORBA::Boolean operator>> (TAO_InputCDR &, Test::A_ptr &);

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_enum/cdr_op_ch.cpp:34


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 ::CORBA::Boolean operator<< (TAO_OutputCDR &strm, Test::A::FailOn _tao_enumerator);
 ::CORBA::Boolean operator>> (TAO_InputCDR &strm, Test::A::FailOn &_tao_enumerator);

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_codegen.cpp:1700
#if defined (__ACE_INLINE__)
#include "testC.inl"
#endif /* defined INLINE */

#include /**/ "ace/post.h"

#endif /* ifndef */

