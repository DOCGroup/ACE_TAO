// -*- C++ -*-
/**
 * Code generated by the The ACE ORB (TAO) IDL Compiler v2.4.1
 * TAO and the TAO IDL Compiler have been developed by:
 *       Center for Distributed Object Computing
 *       Washington University
 *       St. Louis, MO
 *       USA
 *       http://www.cs.wustl.edu/~schmidt/doc-center.html
 * and
 *       Distributed Object Computing Laboratory
 *       University of California at Irvine
 *       Irvine, CA
 *       USA
 * and
 *       Institute for Software Integrated Systems
 *       Vanderbilt University
 *       Nashville, TN
 *       USA
 *       http://www.isis.vanderbilt.edu/
 *
 * Information about TAO is available at:
 *     http://www.dre.vanderbilt.edu/~schmidt/TAO.html
 **/


// TAO_IDL - Generated from
// be/be_codegen.cpp:649

#ifndef _TAO_IDL_TESTS_BSPIKD_CPP_
#define _TAO_IDL_TESTS_BSPIKD_CPP_


#include "testS.h"
#include "tao/PortableServer/Operation_Table_Perfect_Hash.h"
#include "tao/PortableServer/Upcall_Command.h"
#include "tao/PortableServer/Upcall_Wrapper.h"
#include "tao/TAO_Server_Request.h"
#include "tao/ORB_Core.h"
#include "tao/Profile.h"
#include "tao/Stub.h"
#include "tao/IFR_Client_Adapter.h"
#include "tao/Object_T.h"
#include "tao/AnyTypeCode/TypeCode.h"
#include "tao/AnyTypeCode/DynamicC.h"
#include "tao/CDR.h"
#include "tao/operation_details.h"
#include "tao/PortableInterceptor.h"
#include "ace/Dynamic_Service.h"
#include "ace/Malloc_Allocator.h"

// TAO_IDL - Generated from
// be/be_interface.cpp:1865

class TAO_Test_A_Perfect_Hash_OpTable
  : public TAO_Perfect_Hash_OpTable
{
private:
  unsigned int hash (const char *str, unsigned int len);

public:
  const TAO_operation_db_entry * lookup (const char *str, unsigned int len);
};

/* C++ code produced by gperf version 2.8 (ACE version) */
/* Command-line: /mnt/win_d/projects/ATCD/ACE/bin/ace_gperf -m -M -J -c -C -D -E -T -f 0 -F 0,0 -a -o -t -p -K opname -L C++ -Z TAO_Test_A_Perfect_Hash_OpTable -N lookup  */
unsigned int
TAO_Test_A_Perfect_Hash_OpTable::hash (const char *str, unsigned int len)
{
  static const unsigned char asso_values[] =
    {
     39, 39, 39, 39, 39, 39, 39, 39, 39, 39,
     39, 39, 39, 39, 39, 39, 39, 39, 39, 39,
     39, 39, 39, 39, 39, 39, 39, 39, 39, 39,
     39, 39, 39, 39, 39, 39, 39, 39, 39, 39,
     39, 39, 39, 39, 39, 39, 39, 39, 39, 39,
     39, 39, 39, 39, 39, 39, 39, 39, 39, 39,
     39, 39, 39, 39, 39, 39, 39, 39, 39, 39,
     39, 39, 39, 39, 39, 39, 39, 39, 39, 39,
     39, 39, 39, 39, 39, 39, 39, 39, 39, 39,
     39, 39, 39, 39, 39, 15, 39, 10, 39, 39,
      0,  9, 39, 39, 39, 39, 39, 39, 39,  0,
      5, 39, 39, 39, 39,  0, 10,  5, 15, 39,
     39, 39, 39, 39, 39, 39, 39, 39,
    };
  return len + asso_values[static_cast<int>(str[len - 1])] + asso_values[static_cast<int>(str[0])];
}

const TAO_operation_db_entry *
TAO_Test_A_Perfect_Hash_OpTable::lookup (const char *str, unsigned int len)
{
  enum
    {
      TOTAL_KEYWORDS = 18,
      MIN_WORD_LENGTH = 5,
      MAX_WORD_LENGTH = 14,
      MIN_HASH_VALUE = 6,
      MAX_HASH_VALUE = 38,
      HASH_VALUE_RANGE = 33,
      DUPLICATES = 3,
      WORDLIST_SIZE = 24
    };

  static const TAO_operation_db_entry wordlist[] =
    {
      {"",0,0},{"",0,0},{"",0,0},{"",0,0},{"",0,0},{"",0,0},
      {"method", &POA_Test::A::method_skel, 0},
      {"method_s", &POA_Test::A::method_s_skel, 0},
      {"seq_method", &POA_Test::A::seq_method_skel, 0},
      {"sct_method", &POA_Test::A::sct_method_skel, 0},
      {"seq_method_s", &POA_Test::A::seq_method_s_skel, 0},
      {"shutdown", &POA_Test::A::shutdown_skel, 0},
      {"unn_method", &POA_Test::A::unn_method_skel, 0},
      {"exc_method", &POA_Test::A::exc_method_skel, 0},
      {"arr_method", &POA_Test::A::arr_method_skel, 0},
      {"arr_method_s", &POA_Test::A::arr_method_s_skel, 0},
      {"vbx_method", &POA_Test::A::vbx_method_skel, 0},
      {"vtp_method", &POA_Test::A::vtp_method_skel, 0},
      {"vbx_method_s", &POA_Test::A::vbx_method_s_skel, 0},
      {"_repository_id", &TAO_ServantBase::_repository_id_thru_poa_skel, 0},
      {"_is_a", &TAO_ServantBase::_is_a_thru_poa_skel, 0},
      {"_interface", &TAO_ServantBase::_interface_skel, 0},
      {"_component", &TAO_ServantBase::_component_thru_poa_skel, 0},
      {"_non_existent", &TAO_ServantBase::_non_existent_thru_poa_skel, 0},
    };

  static const signed char lookup[] =
    {
       -1,  -1,  -1,  -1,  -8,  -2,   6,  -1,   7,  -1, -44,  -1,  10,  11,
       -1,  12,  -1,  -1,  -1,  13,  14,  -1,  15, -16,  -2, -40,  -1,  18,
       -1,  19,  20,  -1,  -1,  -1,  21,  22,  -1,  -1,  23,
    };

  if (len <= MAX_WORD_LENGTH && len >= MIN_WORD_LENGTH)
    {
      unsigned int key = hash (str, len);

      if (key <= MAX_HASH_VALUE && key >= MIN_HASH_VALUE)
        {
          int slot = lookup[key];

          if (slot >= 0 && slot < WORDLIST_SIZE)
            {
              const char *s = wordlist[slot].opname;

              if (*str == *s && !ACE_OS::strncmp (str + 1, s + 1, len - 1))
                return &wordlist[slot];
            }
          else if (slot < 0 && slot >= -MAX_HASH_VALUE)
            return 0;
          else
            {
              unsigned int offset = key + slot + (slot > 0 ? -MAX_HASH_VALUE : MAX_HASH_VALUE);
              const TAO_operation_db_entry *base = &wordlist[-lookup[offset]];
              const TAO_operation_db_entry *ptr = base + -lookup[offset + 1];

              while (--ptr >= base)
                if (*str == *ptr->opname && !ACE_OS::strncmp (str + 1, ptr->opname + 1, len - 1))
                  return ptr;
            }
        }
    }
  return 0;
}

static TAO_Test_A_Perfect_Hash_OpTable tao_Test_A_optable;

// TAO_IDL - Generated from
// be/be_visitor_interface/interface_ss.cpp:90

POA_Test::A::A (void)
  : TAO_ServantBase ()
{
  this->optable_ = &tao_Test_A_optable;
}

POA_Test::A::A (const A& rhs)
  : TAO_Abstract_ServantBase (rhs),
    TAO_ServantBase (rhs)
{
}

POA_Test::A::~A (void)
{
}

namespace POA_Test
{


  // TAO_IDL - Generated from
  // be/be_visitor_operation/upcall_command_ss.cpp:80

  class method_A
    : public TAO::Upcall_Command
  {
  public:
    inline method_A (
      POA_Test::A * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::TAO::bounded_string_10>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::TAO::bounded_string_10> (
          this->operation_details_,
          this->args_);

      TAO::SArg_Traits< ::Test::A::FailOn>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< ::Test::A::FailOn> (
          this->operation_details_,
          this->args_,
          1);

      TAO::SArg_Traits< ::TAO::bounded_string_10>::in_arg_type arg_2 =
        TAO::Portable_Server::get_in_arg< ::TAO::bounded_string_10> (
          this->operation_details_,
          this->args_,
          2);

      TAO::SArg_Traits< ::TAO::bounded_string_10>::out_arg_type arg_3 =
        TAO::Portable_Server::get_out_arg< ::TAO::bounded_string_10> (
          this->operation_details_,
          this->args_,
          3);

      TAO::SArg_Traits< ::TAO::bounded_string_10>::inout_arg_type arg_4 =
        TAO::Portable_Server::get_inout_arg< ::TAO::bounded_string_10> (
          this->operation_details_,
          this->args_,
          4);

      retval =
        this->servant_->method (
          arg_1
          , arg_2
          , arg_3
          , arg_4);
    }

  private:
    POA_Test::A * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_ss.cpp:168

void POA_Test::A::method_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::TAO::bounded_string_10>::ret_val retval;
  TAO::SArg_Traits< ::Test::A::FailOn>::in_arg_val _tao_where;
  TAO::SArg_Traits< ::TAO::bounded_string_10>::in_arg_val _tao_arg1;
  TAO::SArg_Traits< ::TAO::bounded_string_10>::out_arg_val _tao_arg2;
  TAO::SArg_Traits< ::TAO::bounded_string_10>::inout_arg_val _tao_arg3;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_where,
      &_tao_arg1,
      &_tao_arg2,
      &_tao_arg3
    };

  static size_t const nargs = 5;

  POA_Test::A * const impl =
    dynamic_cast<POA_Test::A *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  method_A command (
    impl,
    server_request.operation_details (),
    args);

  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_Test
{


  // TAO_IDL - Generated from
  // be/be_visitor_operation/upcall_command_ss.cpp:80

  class method_s_A
    : public TAO::Upcall_Command
  {
  public:
    inline method_s_A (
      POA_Test::A * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::TAO::bounded_string_10>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::TAO::bounded_string_10> (
          this->operation_details_,
          this->args_);

      TAO::SArg_Traits< ::Test::A::FailOn>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< ::Test::A::FailOn> (
          this->operation_details_,
          this->args_,
          1);

      TAO::SArg_Traits< ::TAO::bounded_string_10>::in_arg_type arg_2 =
        TAO::Portable_Server::get_in_arg< ::TAO::bounded_string_10> (
          this->operation_details_,
          this->args_,
          2);

      TAO::SArg_Traits< ::TAO::bounded_string_10>::out_arg_type arg_3 =
        TAO::Portable_Server::get_out_arg< ::TAO::bounded_string_10> (
          this->operation_details_,
          this->args_,
          3);

      TAO::SArg_Traits< ::TAO::bounded_string_10>::inout_arg_type arg_4 =
        TAO::Portable_Server::get_inout_arg< ::TAO::bounded_string_10> (
          this->operation_details_,
          this->args_,
          4);

      retval =
        this->servant_->method_s (
          arg_1
          , arg_2
          , arg_3
          , arg_4);
    }

  private:
    POA_Test::A * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_ss.cpp:168

void POA_Test::A::method_s_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::TAO::bounded_string_10>::ret_val retval;
  TAO::SArg_Traits< ::Test::A::FailOn>::in_arg_val _tao_where;
  TAO::SArg_Traits< ::TAO::bounded_string_10>::in_arg_val _tao_arg1;
  TAO::SArg_Traits< ::TAO::bounded_string_10>::out_arg_val _tao_arg2;
  TAO::SArg_Traits< ::TAO::bounded_string_10>::inout_arg_val _tao_arg3;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_where,
      &_tao_arg1,
      &_tao_arg2,
      &_tao_arg3
    };

  static size_t const nargs = 5;

  POA_Test::A * const impl =
    dynamic_cast<POA_Test::A *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  method_s_A command (
    impl,
    server_request.operation_details (),
    args);

  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_Test
{


  // TAO_IDL - Generated from
  // be/be_visitor_operation/upcall_command_ss.cpp:80

  class seq_method_A
    : public TAO::Upcall_Command
  {
  public:
    inline seq_method_A (
      POA_Test::A * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::Test::seq_bd_str>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::Test::seq_bd_str> (
          this->operation_details_,
          this->args_);

      TAO::SArg_Traits< ::Test::A::FailOn>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< ::Test::A::FailOn> (
          this->operation_details_,
          this->args_,
          1);

      TAO::SArg_Traits< ::Test::seq_bd_str>::in_arg_type arg_2 =
        TAO::Portable_Server::get_in_arg< ::Test::seq_bd_str> (
          this->operation_details_,
          this->args_,
          2);

      TAO::SArg_Traits< ::Test::seq_bd_str>::out_arg_type arg_3 =
        TAO::Portable_Server::get_out_arg< ::Test::seq_bd_str> (
          this->operation_details_,
          this->args_,
          3);

      TAO::SArg_Traits< ::Test::seq_bd_str>::inout_arg_type arg_4 =
        TAO::Portable_Server::get_inout_arg< ::Test::seq_bd_str> (
          this->operation_details_,
          this->args_,
          4);

      retval =
        this->servant_->seq_method (
          arg_1
          , arg_2
          , arg_3
          , arg_4);
    }

  private:
    POA_Test::A * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_ss.cpp:168

void POA_Test::A::seq_method_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::Test::seq_bd_str>::ret_val retval;
  TAO::SArg_Traits< ::Test::A::FailOn>::in_arg_val _tao_where;
  TAO::SArg_Traits< ::Test::seq_bd_str>::in_arg_val _tao_arg1;
  TAO::SArg_Traits< ::Test::seq_bd_str>::out_arg_val _tao_arg2;
  TAO::SArg_Traits< ::Test::seq_bd_str>::inout_arg_val _tao_arg3;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_where,
      &_tao_arg1,
      &_tao_arg2,
      &_tao_arg3
    };

  static size_t const nargs = 5;

  POA_Test::A * const impl =
    dynamic_cast<POA_Test::A *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  seq_method_A command (
    impl,
    server_request.operation_details (),
    args);

  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_Test
{


  // TAO_IDL - Generated from
  // be/be_visitor_operation/upcall_command_ss.cpp:80

  class seq_method_s_A
    : public TAO::Upcall_Command
  {
  public:
    inline seq_method_s_A (
      POA_Test::A * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::Test::seq_bds_str>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::Test::seq_bds_str> (
          this->operation_details_,
          this->args_);

      TAO::SArg_Traits< ::Test::A::FailOn>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< ::Test::A::FailOn> (
          this->operation_details_,
          this->args_,
          1);

      TAO::SArg_Traits< ::Test::seq_bds_str>::in_arg_type arg_2 =
        TAO::Portable_Server::get_in_arg< ::Test::seq_bds_str> (
          this->operation_details_,
          this->args_,
          2);

      TAO::SArg_Traits< ::Test::seq_bds_str>::out_arg_type arg_3 =
        TAO::Portable_Server::get_out_arg< ::Test::seq_bds_str> (
          this->operation_details_,
          this->args_,
          3);

      TAO::SArg_Traits< ::Test::seq_bds_str>::inout_arg_type arg_4 =
        TAO::Portable_Server::get_inout_arg< ::Test::seq_bds_str> (
          this->operation_details_,
          this->args_,
          4);

      retval =
        this->servant_->seq_method_s (
          arg_1
          , arg_2
          , arg_3
          , arg_4);
    }

  private:
    POA_Test::A * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_ss.cpp:168

void POA_Test::A::seq_method_s_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::Test::seq_bds_str>::ret_val retval;
  TAO::SArg_Traits< ::Test::A::FailOn>::in_arg_val _tao_where;
  TAO::SArg_Traits< ::Test::seq_bds_str>::in_arg_val _tao_arg1;
  TAO::SArg_Traits< ::Test::seq_bds_str>::out_arg_val _tao_arg2;
  TAO::SArg_Traits< ::Test::seq_bds_str>::inout_arg_val _tao_arg3;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_where,
      &_tao_arg1,
      &_tao_arg2,
      &_tao_arg3
    };

  static size_t const nargs = 5;

  POA_Test::A * const impl =
    dynamic_cast<POA_Test::A *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  seq_method_s_A command (
    impl,
    server_request.operation_details (),
    args);

  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_Test
{


  // TAO_IDL - Generated from
  // be/be_visitor_operation/upcall_command_ss.cpp:80

  class arr_method_A
    : public TAO::Upcall_Command
  {
  public:
    inline arr_method_A (
      POA_Test::A * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::Test::arr_bd_str_tag>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::Test::arr_bd_str_tag> (
          this->operation_details_,
          this->args_);

      TAO::SArg_Traits< ::Test::A::FailOn>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< ::Test::A::FailOn> (
          this->operation_details_,
          this->args_,
          1);

      TAO::SArg_Traits< ::Test::arr_bd_str_tag>::in_arg_type arg_2 =
        TAO::Portable_Server::get_in_arg< ::Test::arr_bd_str_tag> (
          this->operation_details_,
          this->args_,
          2);

      TAO::SArg_Traits< ::Test::arr_bd_str_tag>::out_arg_type arg_3 =
        TAO::Portable_Server::get_out_arg< ::Test::arr_bd_str_tag> (
          this->operation_details_,
          this->args_,
          3);

      TAO::SArg_Traits< ::Test::arr_bd_str_tag>::inout_arg_type arg_4 =
        TAO::Portable_Server::get_inout_arg< ::Test::arr_bd_str_tag> (
          this->operation_details_,
          this->args_,
          4);

      retval =
        this->servant_->arr_method (
          arg_1
          , arg_2
          , arg_3
          , arg_4);
    }

  private:
    POA_Test::A * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_ss.cpp:168

void POA_Test::A::arr_method_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::Test::arr_bd_str_tag>::ret_val retval;
  TAO::SArg_Traits< ::Test::A::FailOn>::in_arg_val _tao_where;
  TAO::SArg_Traits< ::Test::arr_bd_str_tag>::in_arg_val _tao_arg1;
  TAO::SArg_Traits< ::Test::arr_bd_str_tag>::out_arg_val _tao_arg2;
  TAO::SArg_Traits< ::Test::arr_bd_str_tag>::inout_arg_val _tao_arg3;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_where,
      &_tao_arg1,
      &_tao_arg2,
      &_tao_arg3
    };

  static size_t const nargs = 5;

  POA_Test::A * const impl =
    dynamic_cast<POA_Test::A *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  arr_method_A command (
    impl,
    server_request.operation_details (),
    args);

  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_Test
{


  // TAO_IDL - Generated from
  // be/be_visitor_operation/upcall_command_ss.cpp:80

  class arr_method_s_A
    : public TAO::Upcall_Command
  {
  public:
    inline arr_method_s_A (
      POA_Test::A * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::Test::arr_bds_str_tag>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::Test::arr_bds_str_tag> (
          this->operation_details_,
          this->args_);

      TAO::SArg_Traits< ::Test::A::FailOn>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< ::Test::A::FailOn> (
          this->operation_details_,
          this->args_,
          1);

      TAO::SArg_Traits< ::Test::arr_bds_str_tag>::in_arg_type arg_2 =
        TAO::Portable_Server::get_in_arg< ::Test::arr_bds_str_tag> (
          this->operation_details_,
          this->args_,
          2);

      TAO::SArg_Traits< ::Test::arr_bds_str_tag>::out_arg_type arg_3 =
        TAO::Portable_Server::get_out_arg< ::Test::arr_bds_str_tag> (
          this->operation_details_,
          this->args_,
          3);

      TAO::SArg_Traits< ::Test::arr_bds_str_tag>::inout_arg_type arg_4 =
        TAO::Portable_Server::get_inout_arg< ::Test::arr_bds_str_tag> (
          this->operation_details_,
          this->args_,
          4);

      retval =
        this->servant_->arr_method_s (
          arg_1
          , arg_2
          , arg_3
          , arg_4);
    }

  private:
    POA_Test::A * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_ss.cpp:168

void POA_Test::A::arr_method_s_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::Test::arr_bds_str_tag>::ret_val retval;
  TAO::SArg_Traits< ::Test::A::FailOn>::in_arg_val _tao_where;
  TAO::SArg_Traits< ::Test::arr_bds_str_tag>::in_arg_val _tao_arg1;
  TAO::SArg_Traits< ::Test::arr_bds_str_tag>::out_arg_val _tao_arg2;
  TAO::SArg_Traits< ::Test::arr_bds_str_tag>::inout_arg_val _tao_arg3;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_where,
      &_tao_arg1,
      &_tao_arg2,
      &_tao_arg3
    };

  static size_t const nargs = 5;

  POA_Test::A * const impl =
    dynamic_cast<POA_Test::A *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  arr_method_s_A command (
    impl,
    server_request.operation_details (),
    args);

  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_Test
{


  // TAO_IDL - Generated from
  // be/be_visitor_operation/upcall_command_ss.cpp:80

  class sct_method_A
    : public TAO::Upcall_Command
  {
  public:
    inline sct_method_A (
      POA_Test::A * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::Test::sct>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::Test::sct> (
          this->operation_details_,
          this->args_);

      TAO::SArg_Traits< ::Test::A::FailOn>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< ::Test::A::FailOn> (
          this->operation_details_,
          this->args_,
          1);

      TAO::SArg_Traits< ::Test::sct>::in_arg_type arg_2 =
        TAO::Portable_Server::get_in_arg< ::Test::sct> (
          this->operation_details_,
          this->args_,
          2);

      TAO::SArg_Traits< ::Test::sct>::out_arg_type arg_3 =
        TAO::Portable_Server::get_out_arg< ::Test::sct> (
          this->operation_details_,
          this->args_,
          3);

      TAO::SArg_Traits< ::Test::sct>::inout_arg_type arg_4 =
        TAO::Portable_Server::get_inout_arg< ::Test::sct> (
          this->operation_details_,
          this->args_,
          4);

      retval =
        this->servant_->sct_method (
          arg_1
          , arg_2
          , arg_3
          , arg_4);
    }

  private:
    POA_Test::A * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_ss.cpp:168

void POA_Test::A::sct_method_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::Test::sct>::ret_val retval;
  TAO::SArg_Traits< ::Test::A::FailOn>::in_arg_val _tao_where;
  TAO::SArg_Traits< ::Test::sct>::in_arg_val _tao_arg1;
  TAO::SArg_Traits< ::Test::sct>::out_arg_val _tao_arg2;
  TAO::SArg_Traits< ::Test::sct>::inout_arg_val _tao_arg3;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_where,
      &_tao_arg1,
      &_tao_arg2,
      &_tao_arg3
    };

  static size_t const nargs = 5;

  POA_Test::A * const impl =
    dynamic_cast<POA_Test::A *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  sct_method_A command (
    impl,
    server_request.operation_details (),
    args);

  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_Test
{


  // TAO_IDL - Generated from
  // be/be_visitor_operation/upcall_command_ss.cpp:80

  class unn_method_A
    : public TAO::Upcall_Command
  {
  public:
    inline unn_method_A (
      POA_Test::A * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::Test::unn>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::Test::unn> (
          this->operation_details_,
          this->args_);

      TAO::SArg_Traits< ::Test::A::FailOn>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< ::Test::A::FailOn> (
          this->operation_details_,
          this->args_,
          1);

      TAO::SArg_Traits< ::Test::unn>::in_arg_type arg_2 =
        TAO::Portable_Server::get_in_arg< ::Test::unn> (
          this->operation_details_,
          this->args_,
          2);

      TAO::SArg_Traits< ::Test::unn>::out_arg_type arg_3 =
        TAO::Portable_Server::get_out_arg< ::Test::unn> (
          this->operation_details_,
          this->args_,
          3);

      TAO::SArg_Traits< ::Test::unn>::inout_arg_type arg_4 =
        TAO::Portable_Server::get_inout_arg< ::Test::unn> (
          this->operation_details_,
          this->args_,
          4);

      retval =
        this->servant_->unn_method (
          arg_1
          , arg_2
          , arg_3
          , arg_4);
    }

  private:
    POA_Test::A * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_ss.cpp:168

void POA_Test::A::unn_method_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::Test::unn>::ret_val retval;
  TAO::SArg_Traits< ::Test::A::FailOn>::in_arg_val _tao_where;
  TAO::SArg_Traits< ::Test::unn>::in_arg_val _tao_arg1;
  TAO::SArg_Traits< ::Test::unn>::out_arg_val _tao_arg2;
  TAO::SArg_Traits< ::Test::unn>::inout_arg_val _tao_arg3;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_where,
      &_tao_arg1,
      &_tao_arg2,
      &_tao_arg3
    };

  static size_t const nargs = 5;

  POA_Test::A * const impl =
    dynamic_cast<POA_Test::A *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  unn_method_A command (
    impl,
    server_request.operation_details (),
    args);

  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_Test
{


  // TAO_IDL - Generated from
  // be/be_visitor_operation/upcall_command_ss.cpp:80

  class vbx_method_A
    : public TAO::Upcall_Command
  {
  public:
    inline vbx_method_A (
      POA_Test::A * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::Test::val_bd_str>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::Test::val_bd_str> (
          this->operation_details_,
          this->args_);

      TAO::SArg_Traits< ::Test::A::FailOn>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< ::Test::A::FailOn> (
          this->operation_details_,
          this->args_,
          1);

      TAO::SArg_Traits< ::Test::val_bd_str>::in_arg_type arg_2 =
        TAO::Portable_Server::get_in_arg< ::Test::val_bd_str> (
          this->operation_details_,
          this->args_,
          2);

      TAO::SArg_Traits< ::Test::val_bd_str>::out_arg_type arg_3 =
        TAO::Portable_Server::get_out_arg< ::Test::val_bd_str> (
          this->operation_details_,
          this->args_,
          3);

      TAO::SArg_Traits< ::Test::val_bd_str>::inout_arg_type arg_4 =
        TAO::Portable_Server::get_inout_arg< ::Test::val_bd_str> (
          this->operation_details_,
          this->args_,
          4);

      retval =
        this->servant_->vbx_method (
          arg_1
          , arg_2
          , arg_3
          , arg_4);
    }

  private:
    POA_Test::A * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_ss.cpp:168

void POA_Test::A::vbx_method_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::Test::val_bd_str>::ret_val retval;
  TAO::SArg_Traits< ::Test::A::FailOn>::in_arg_val _tao_where;
  TAO::SArg_Traits< ::Test::val_bd_str>::in_arg_val _tao_arg1;
  TAO::SArg_Traits< ::Test::val_bd_str>::out_arg_val _tao_arg2;
  TAO::SArg_Traits< ::Test::val_bd_str>::inout_arg_val _tao_arg3;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_where,
      &_tao_arg1,
      &_tao_arg2,
      &_tao_arg3
    };

  static size_t const nargs = 5;

  POA_Test::A * const impl =
    dynamic_cast<POA_Test::A *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  vbx_method_A command (
    impl,
    server_request.operation_details (),
    args);

  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_Test
{


  // TAO_IDL - Generated from
  // be/be_visitor_operation/upcall_command_ss.cpp:80

  class vbx_method_s_A
    : public TAO::Upcall_Command
  {
  public:
    inline vbx_method_s_A (
      POA_Test::A * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::Test::val_bds_str>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::Test::val_bds_str> (
          this->operation_details_,
          this->args_);

      TAO::SArg_Traits< ::Test::A::FailOn>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< ::Test::A::FailOn> (
          this->operation_details_,
          this->args_,
          1);

      TAO::SArg_Traits< ::Test::val_bds_str>::in_arg_type arg_2 =
        TAO::Portable_Server::get_in_arg< ::Test::val_bds_str> (
          this->operation_details_,
          this->args_,
          2);

      TAO::SArg_Traits< ::Test::val_bds_str>::out_arg_type arg_3 =
        TAO::Portable_Server::get_out_arg< ::Test::val_bds_str> (
          this->operation_details_,
          this->args_,
          3);

      TAO::SArg_Traits< ::Test::val_bds_str>::inout_arg_type arg_4 =
        TAO::Portable_Server::get_inout_arg< ::Test::val_bds_str> (
          this->operation_details_,
          this->args_,
          4);

      retval =
        this->servant_->vbx_method_s (
          arg_1
          , arg_2
          , arg_3
          , arg_4);
    }

  private:
    POA_Test::A * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_ss.cpp:168

void POA_Test::A::vbx_method_s_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::Test::val_bds_str>::ret_val retval;
  TAO::SArg_Traits< ::Test::A::FailOn>::in_arg_val _tao_where;
  TAO::SArg_Traits< ::Test::val_bds_str>::in_arg_val _tao_arg1;
  TAO::SArg_Traits< ::Test::val_bds_str>::out_arg_val _tao_arg2;
  TAO::SArg_Traits< ::Test::val_bds_str>::inout_arg_val _tao_arg3;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_where,
      &_tao_arg1,
      &_tao_arg2,
      &_tao_arg3
    };

  static size_t const nargs = 5;

  POA_Test::A * const impl =
    dynamic_cast<POA_Test::A *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  vbx_method_s_A command (
    impl,
    server_request.operation_details (),
    args);

  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_Test
{


  // TAO_IDL - Generated from
  // be/be_visitor_operation/upcall_command_ss.cpp:80

  class vtp_method_A
    : public TAO::Upcall_Command
  {
  public:
    inline vtp_method_A (
      POA_Test::A * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::Test::vtp>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::Test::vtp> (
          this->operation_details_,
          this->args_);

      TAO::SArg_Traits< ::Test::A::FailOn>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< ::Test::A::FailOn> (
          this->operation_details_,
          this->args_,
          1);

      TAO::SArg_Traits< ::Test::vtp>::in_arg_type arg_2 =
        TAO::Portable_Server::get_in_arg< ::Test::vtp> (
          this->operation_details_,
          this->args_,
          2);

      TAO::SArg_Traits< ::Test::vtp>::out_arg_type arg_3 =
        TAO::Portable_Server::get_out_arg< ::Test::vtp> (
          this->operation_details_,
          this->args_,
          3);

      TAO::SArg_Traits< ::Test::vtp>::inout_arg_type arg_4 =
        TAO::Portable_Server::get_inout_arg< ::Test::vtp> (
          this->operation_details_,
          this->args_,
          4);

      retval =
        this->servant_->vtp_method (
          arg_1
          , arg_2
          , arg_3
          , arg_4);
    }

  private:
    POA_Test::A * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_ss.cpp:168

void POA_Test::A::vtp_method_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::Test::vtp>::ret_val retval;
  TAO::SArg_Traits< ::Test::A::FailOn>::in_arg_val _tao_where;
  TAO::SArg_Traits< ::Test::vtp>::in_arg_val _tao_arg1;
  TAO::SArg_Traits< ::Test::vtp>::out_arg_val _tao_arg2;
  TAO::SArg_Traits< ::Test::vtp>::inout_arg_val _tao_arg3;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_where,
      &_tao_arg1,
      &_tao_arg2,
      &_tao_arg3
    };

  static size_t const nargs = 5;

  POA_Test::A * const impl =
    dynamic_cast<POA_Test::A *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  vtp_method_A command (
    impl,
    server_request.operation_details (),
    args);

  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_Test
{


  // TAO_IDL - Generated from
  // be/be_visitor_operation/upcall_command_ss.cpp:80

  class exc_method_A
    : public TAO::Upcall_Command
  {
  public:
    inline exc_method_A (
      POA_Test::A * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::Test::string_field>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< ::Test::string_field> (
          this->operation_details_,
          this->args_,
          1);

      this->servant_->exc_method (
        arg_1);
    }

  private:
    POA_Test::A * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_ss.cpp:168

void POA_Test::A::exc_method_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const exceptions[] =
    {
      Test::_tc_exc
    };
  static ::CORBA::ULong const nexceptions = 1;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< void>::ret_val retval;
  TAO::SArg_Traits< ::Test::string_field>::in_arg_val _tao_f;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_f
    };

  static size_t const nargs = 2;

  POA_Test::A * const impl =
    dynamic_cast<POA_Test::A *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  exc_method_A command (
    impl,
    server_request.operation_details (),
    args);

  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_Test
{


  // TAO_IDL - Generated from
  // be/be_visitor_operation/upcall_command_ss.cpp:80

  class shutdown_A
    : public TAO::Upcall_Command
  {
  public:
    inline shutdown_A (
      POA_Test::A * servant)
      : servant_ (servant)
    {
    }

    virtual void execute (void)
    {
      this->servant_->shutdown ();
    }

  private:
    POA_Test::A * const servant_;
  };
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_ss.cpp:168

void POA_Test::A::shutdown_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< void>::ret_val retval;

  TAO::Argument * const args[] =
    {
      &retval
    };

  static size_t const nargs = 1;

  POA_Test::A * const impl =
    dynamic_cast<POA_Test::A *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  shutdown_A command (
    impl);

  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}



// TAO_IDL - Generated from
// be/be_visitor_interface/interface_ss.cpp:163



::CORBA::Boolean POA_Test::A::_is_a (const char* value)
{
  return
    (
      ACE_OS::strcmp (
          value,
          "IDL:Test/A:1.0"
        ) == 0 ||
      !ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        )
    );
}

const char* POA_Test::A::_interface_repository_id (void) const
{
  return "IDL:Test/A:1.0";
}

// TAO_IDL - Generated from
// be/be_visitor_interface/interface_ss.cpp:423

void POA_Test::A::_dispatch (
  TAO_ServerRequest & req,
  TAO::Portable_Server::Servant_Upcall* servant_upcall)
{
  this->synchronous_upcall_dispatch (req, servant_upcall, this);
}

// TAO_IDL - Generated from
// be/be_visitor_interface/interface_ss.cpp:370

Test::A *
POA_Test::A::_this (void)
{
  TAO_Stub *stub = this->_create_stub ();

  TAO_Stub_Auto_Ptr safe_stub (stub);
  ::CORBA::Object_ptr tmp = CORBA::Object_ptr ();

  ::CORBA::Boolean const _tao_opt_colloc =
    stub->servant_orb_var ()->orb_core ()->optimize_collocation_objects ();

  ACE_NEW_RETURN (
      tmp,
      ::CORBA::Object (stub, _tao_opt_colloc, this),
      0);

  ::CORBA::Object_var obj = tmp;
  (void) safe_stub.release ();

  typedef ::Test::A STUB_SCOPED_NAME;
  return
    TAO::Narrow_Utils<STUB_SCOPED_NAME>::unchecked_narrow (
        obj.in ());
}

#endif /* ifndef */

