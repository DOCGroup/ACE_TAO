// -*- C++ -*-
/**
 * Code generated by the The ACE ORB (TAO) IDL Compiler v2.4.1
 * TAO and the TAO IDL Compiler have been developed by:
 *       Center for Distributed Object Computing
 *       Washington University
 *       St. Louis, MO
 *       USA
 *       http://www.cs.wustl.edu/~schmidt/doc-center.html
 * and
 *       Distributed Object Computing Laboratory
 *       University of California at Irvine
 *       Irvine, CA
 *       USA
 * and
 *       Institute for Software Integrated Systems
 *       Vanderbilt University
 *       Nashville, TN
 *       USA
 *       http://www.isis.vanderbilt.edu/
 *
 * Information about TAO is available at:
 *     http://www.dre.vanderbilt.edu/~schmidt/TAO.html
 **/


// TAO_IDL - Generated from
// be/be_visitor_array/array_ci.cpp:147

TAO_BEGIN_VERSIONED_NAMESPACE_DECL


ACE_INLINE
void
TAO::Array_Traits<Test::arr_bd_str_forany>::free (
    Test::arr_bd_str_slice * _tao_slice)
{
  Test::arr_bd_str_free (_tao_slice);
}

ACE_INLINE
Test::arr_bd_str_slice *
TAO::Array_Traits<Test::arr_bd_str_forany>::dup (
    const Test::arr_bd_str_slice * _tao_slice)
{
  return Test::arr_bd_str_dup (_tao_slice);
}

ACE_INLINE
void
TAO::Array_Traits<Test::arr_bd_str_forany>::copy (
    Test::arr_bd_str_slice * _tao_to,
    const Test::arr_bd_str_slice * _tao_from)
{
  Test::arr_bd_str_copy (_tao_to, _tao_from);
}

ACE_INLINE
void
TAO::Array_Traits<Test::arr_bd_str_forany>::zero (
    Test::arr_bd_str_slice * _tao_slice)
{
  // Zero each individual element.
  for ( ::CORBA::ULong i0 = 0; i0 < 1; ++i0)
    {
      _tao_slice[i0] = ::TAO::String_Manager ();
    }
}

ACE_INLINE
Test::arr_bd_str_slice *
TAO::Array_Traits<Test::arr_bd_str_forany>::alloc (void)
{
  return Test::arr_bd_str_alloc ();
}


TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// be/be_visitor_array/array_ci.cpp:147

TAO_BEGIN_VERSIONED_NAMESPACE_DECL


ACE_INLINE
void
TAO::Array_Traits<Test::arr_bds_str_forany>::free (
    Test::arr_bds_str_slice * _tao_slice)
{
  Test::arr_bds_str_free (_tao_slice);
}

ACE_INLINE
Test::arr_bds_str_slice *
TAO::Array_Traits<Test::arr_bds_str_forany>::dup (
    const Test::arr_bds_str_slice * _tao_slice)
{
  return Test::arr_bds_str_dup (_tao_slice);
}

ACE_INLINE
void
TAO::Array_Traits<Test::arr_bds_str_forany>::copy (
    Test::arr_bds_str_slice * _tao_to,
    const Test::arr_bds_str_slice * _tao_from)
{
  Test::arr_bds_str_copy (_tao_to, _tao_from);
}

ACE_INLINE
void
TAO::Array_Traits<Test::arr_bds_str_forany>::zero (
    Test::arr_bds_str_slice * _tao_slice)
{
  // Zero each individual element.
  for ( ::CORBA::ULong i0 = 0; i0 < 1; ++i0)
    {
      _tao_slice[i0] = ::TAO::String_Manager ();
    }
}

ACE_INLINE
Test::arr_bds_str_slice *
TAO::Array_Traits<Test::arr_bds_str_forany>::alloc (void)
{
  return Test::arr_bds_str_alloc ();
}


TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// be/be_visitor_union/union_ci.cpp:36

// *************************************************************
// Inline operations for union Test::unn
// *************************************************************

// TAO_IDL - Generated from
// be/be_visitor_union/discriminant_ci.cpp:55

// Accessor to set the discriminant.
ACE_INLINE
void
Test::unn::_d (Test::string_field discval)
{
  this->disc_ = discval;
}

// Accessor to get the discriminant.
ACE_INLINE
Test::string_field
Test::unn::_d (void) const
{
  return this->disc_;
}

// TAO_IDL - Generated from
// be/be_visitor_union_branch/public_ci.cpp:862

/// Accessor to set the member.
ACE_INLINE
void
Test::unn::b (char *val)
{
  // Set the discriminant value.
  this->_reset ();
  this->disc_ = Test::BOUNDED;
  this->u_.b_ = val;
}

// Accessor to set the member.
ACE_INLINE
void
Test::unn::b (const char *val)
{
  // Set the discriminant value.
  this->_reset ();
  this->disc_ = Test::BOUNDED;
  // Set the value.
  this->u_.b_ = ::CORBA::string_dup (val);
}

/// Accessor to set the member.
ACE_INLINE
void
Test::unn::b (const ::CORBA::String_var &val)
{
  // Set the discriminant value.
  this->_reset ();
  this->disc_ = Test::BOUNDED;
  // Set the value.
  ::CORBA::String_var b_var = val;
  this->u_.b_ = b_var._retn ();
}

ACE_INLINE
const char *
Test::unn::b (void) const // get method
{
  return this->u_.b_;
}

// TAO_IDL - Generated from
// be/be_visitor_union_branch/public_ci.cpp:862

/// Accessor to set the member.
ACE_INLINE
void
Test::unn::c (char *val)
{
  // Set the discriminant value.
  this->_reset ();
  this->disc_ = Test::TYPEDEFED;
  this->u_.c_ = val;
}

// Accessor to set the member.
ACE_INLINE
void
Test::unn::c (const char *val)
{
  // Set the discriminant value.
  this->_reset ();
  this->disc_ = Test::TYPEDEFED;
  // Set the value.
  this->u_.c_ = ::CORBA::string_dup (val);
}

/// Accessor to set the member.
ACE_INLINE
void
Test::unn::c (const ::CORBA::String_var &val)
{
  // Set the discriminant value.
  this->_reset ();
  this->disc_ = Test::TYPEDEFED;
  // Set the value.
  ::CORBA::String_var c_var = val;
  this->u_.c_ = c_var._retn ();
}

ACE_INLINE
const char *
Test::unn::c (void) const // get method
{
  return this->u_.c_;
}

// TAO_IDL - Generated from
// be/be_visitor_union_branch/public_ci.cpp:862

/// Accessor to set the member.
ACE_INLINE
void
Test::unn::a (char *val)
{
  // Set the discriminant value.
  this->_reset ();
  this->disc_ = Test::PLAIN;
  this->u_.a_ = val;
}

// Accessor to set the member.
ACE_INLINE
void
Test::unn::a (const char *val)
{
  // Set the discriminant value.
  this->_reset ();
  this->disc_ = Test::PLAIN;
  // Set the value.
  this->u_.a_ = ::CORBA::string_dup (val);
}

/// Accessor to set the member.
ACE_INLINE
void
Test::unn::a (const ::CORBA::String_var &val)
{
  // Set the discriminant value.
  this->_reset ();
  this->disc_ = Test::PLAIN;
  // Set the value.
  ::CORBA::String_var a_var = val;
  this->u_.a_ = a_var._retn ();
}

ACE_INLINE
const char *
Test::unn::a (void) const // get method
{
  return this->u_.a_;
}

// TAO_IDL - Generated from
// be/be_visitor_valuebox/valuebox_ci.cpp:282

ACE_INLINE
Test::val_bd_str::val_bd_str (void)
{}

ACE_INLINE
Test::val_bd_str::val_bd_str (char * val)
{
  this->_pd_value = val;
}

ACE_INLINE
Test::val_bd_str::val_bd_str (const Test::val_bd_str& val)
  : ::CORBA::ValueBase (val),
    ::CORBA::DefaultValueRefCountBase (val)
{
  this->_pd_value = val._pd_value;
}

ACE_INLINE Test::val_bd_str &
Test::val_bd_str::operator= (char * val)
{
  this->_pd_value = val;
  return *this;
}

ACE_INLINE
Test::val_bd_str::val_bd_str (const char * val)
{
  this->_pd_value = val;
}

ACE_INLINE
Test::val_bd_str::val_bd_str (const ::CORBA::String_var& var)
{
  this->_pd_value = var;
}

ACE_INLINE Test::val_bd_str &
Test::val_bd_str::operator= (const char * val)
{
  this->_pd_value = val;
  return *this;
}

ACE_INLINE Test::val_bd_str &
Test::val_bd_str::operator= (const ::CORBA::String_var& var)
{
  this->_pd_value = var;
  return *this;
}

ACE_INLINE const char *
Test::val_bd_str::_value (void) const
{
  return this->_pd_value.in ();
}

ACE_INLINE void
Test::val_bd_str::_value (char * val)
{
  this->_pd_value = val;
}

ACE_INLINE void
Test::val_bd_str::_value (const char * val)
{
  this->_pd_value = val;
}

ACE_INLINE void
Test::val_bd_str::_value (const ::CORBA::String_var& var)
{
  this->_pd_value = var;
}

ACE_INLINE const char *
Test::val_bd_str::_boxed_in (void) const
{
  return this->_pd_value.in ();
}

ACE_INLINE char *&
Test::val_bd_str::_boxed_inout (void)
{
  return this->_pd_value.inout ();
}

ACE_INLINE char *&
Test::val_bd_str::_boxed_out (void)
{
  return this->_pd_value.out ();
}

ACE_INLINE ::CORBA::Char &
Test::val_bd_str::operator[] ( ::CORBA::ULong slot)
{
  return this->_pd_value[slot];
}

ACE_INLINE ::CORBA::Char
Test::val_bd_str::operator[] ( ::CORBA::ULong slot) const
{
  return this->_pd_value[slot];
}



// TAO_IDL - Generated from
// be/be_visitor_valuebox/valuebox_ci.cpp:49
ACE_INLINE const char*
Test::val_bd_str::_tao_obv_static_repository_id ()
{
  return "IDL:Test/val_bd_str:1.0";
}



// TAO_IDL - Generated from
// be/be_visitor_valuebox/valuebox_ci.cpp:282

ACE_INLINE
Test::val_bds_str::val_bds_str (void)
{}

ACE_INLINE
Test::val_bds_str::val_bds_str (char * val)
{
  this->_pd_value = val;
}

ACE_INLINE
Test::val_bds_str::val_bds_str (const Test::val_bds_str& val)
  : ::CORBA::ValueBase (val),
    ::CORBA::DefaultValueRefCountBase (val)
{
  this->_pd_value = val._pd_value;
}

ACE_INLINE Test::val_bds_str &
Test::val_bds_str::operator= (char * val)
{
  this->_pd_value = val;
  return *this;
}

ACE_INLINE
Test::val_bds_str::val_bds_str (const char * val)
{
  this->_pd_value = val;
}

ACE_INLINE
Test::val_bds_str::val_bds_str (const ::CORBA::String_var& var)
{
  this->_pd_value = var;
}

ACE_INLINE Test::val_bds_str &
Test::val_bds_str::operator= (const char * val)
{
  this->_pd_value = val;
  return *this;
}

ACE_INLINE Test::val_bds_str &
Test::val_bds_str::operator= (const ::CORBA::String_var& var)
{
  this->_pd_value = var;
  return *this;
}

ACE_INLINE const char *
Test::val_bds_str::_value (void) const
{
  return this->_pd_value.in ();
}

ACE_INLINE void
Test::val_bds_str::_value (char * val)
{
  this->_pd_value = val;
}

ACE_INLINE void
Test::val_bds_str::_value (const char * val)
{
  this->_pd_value = val;
}

ACE_INLINE void
Test::val_bds_str::_value (const ::CORBA::String_var& var)
{
  this->_pd_value = var;
}

ACE_INLINE const char *
Test::val_bds_str::_boxed_in (void) const
{
  return this->_pd_value.in ();
}

ACE_INLINE char *&
Test::val_bds_str::_boxed_inout (void)
{
  return this->_pd_value.inout ();
}

ACE_INLINE char *&
Test::val_bds_str::_boxed_out (void)
{
  return this->_pd_value.out ();
}

ACE_INLINE ::CORBA::Char &
Test::val_bds_str::operator[] ( ::CORBA::ULong slot)
{
  return this->_pd_value[slot];
}

ACE_INLINE ::CORBA::Char
Test::val_bds_str::operator[] ( ::CORBA::ULong slot) const
{
  return this->_pd_value[slot];
}



// TAO_IDL - Generated from
// be/be_visitor_valuebox/valuebox_ci.cpp:49
ACE_INLINE const char*
Test::val_bds_str::_tao_obv_static_repository_id ()
{
  return "IDL:Test/val_bds_str:1.0";
}



// TAO_IDL - Generated from
// be/be_visitor_valuebox/valuebox_ci.cpp:72

ACE_INLINE
Test::val_arr_bd_str::val_arr_bd_str (void)
{
  this->_pd_value = Test::arr_bds_str_alloc ();
}

ACE_INLINE
Test::val_arr_bd_str::val_arr_bd_str (const Test::arr_bds_str val)
{
  this->_pd_value = Test::arr_bds_str_dup (val);
}

ACE_INLINE
Test::val_arr_bd_str::val_arr_bd_str (const val_arr_bd_str& val)
  : ::CORBA::ValueBase (val),
    ::CORBA::DefaultValueRefCountBase (val)
{
  this->_pd_value = Test::arr_bds_str_dup (val._pd_value.in ());
}

ACE_INLINE Test::val_arr_bd_str &
Test::val_arr_bd_str::operator= (const Test::arr_bds_str val)
{
  this->_pd_value = Test::arr_bds_str_dup (val);
  return *this;
}

ACE_INLINE const Test::arr_bds_str_slice*
Test::val_arr_bd_str::_value (void) const
{
  return this->_pd_value.in ();
}

ACE_INLINE Test::arr_bds_str_slice*
Test::val_arr_bd_str::_value (void)
{
  return this->_pd_value.inout ();
}

ACE_INLINE void
Test::val_arr_bd_str::_value (const Test::arr_bds_str val)
{
  this->_pd_value = Test::arr_bds_str_dup (val);
}

ACE_INLINE const Test::arr_bds_str_slice &
Test::val_arr_bd_str::operator[] ( ::CORBA::ULong index) const
{
  return this->_pd_value[index];
}

ACE_INLINE Test::arr_bds_str_slice &
Test::val_arr_bd_str::operator[] ( ::CORBA::ULong index)
{
  return this->_pd_value[index];
}

ACE_INLINE const Test::arr_bds_str_slice *
Test::val_arr_bd_str::_boxed_in (void) const
{
  return this->_pd_value.in ();
}

ACE_INLINE Test::arr_bds_str_slice *
Test::val_arr_bd_str::_boxed_inout (void)
{
  return this->_pd_value.inout ();
}

ACE_INLINE Test::arr_bds_str_slice *
Test::val_arr_bd_str::_boxed_out (void)
{
  return this->_pd_value.out ();
}



// TAO_IDL - Generated from
// be/be_visitor_valuebox/valuebox_ci.cpp:49
ACE_INLINE const char*
Test::val_arr_bd_str::_tao_obv_static_repository_id ()
{
  return "IDL:Test/val_arr_bd_str:1.0";
}



// TAO_IDL - Generated from
// be/be_visitor_valuetype/valuetype_ci.cpp:44

ACE_INLINE
Test::vtp::vtp (void)
{}

ACE_INLINE const char*
Test::vtp::_tao_obv_static_repository_id ()
{
  return "IDL:Test/vtp:1.0";
}

// TAO_IDL - Generated from
// be/be_visitor_interface/interface_ci.cpp:59

ACE_INLINE
Test::A::A (
    TAO_Stub *objref,
    ::CORBA::Boolean _tao_collocated,
    TAO_Abstract_ServantBase *servant,
    TAO_ORB_Core *oc)
  : ::CORBA::Object (objref, _tao_collocated, servant, oc)
{
}

ACE_INLINE
Test::A::A (
    ::IOP::IOR *ior,
    TAO_ORB_Core *oc)
  : ::CORBA::Object (ior, oc)
{
}

