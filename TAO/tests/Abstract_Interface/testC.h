// -*- C++ -*-
/**
 * Code generated by the The ACE ORB (TAO) IDL Compiler v2.4.1
 * TAO and the TAO IDL Compiler have been developed by:
 *       Center for Distributed Object Computing
 *       Washington University
 *       St. Louis, MO
 *       USA
 *       http://www.cs.wustl.edu/~schmidt/doc-center.html
 * and
 *       Distributed Object Computing Laboratory
 *       University of California at Irvine
 *       Irvine, CA
 *       USA
 * and
 *       Institute for Software Integrated Systems
 *       Vanderbilt University
 *       Nashville, TN
 *       USA
 *       http://www.isis.vanderbilt.edu/
 *
 * Information about TAO is available at:
 *     http://www.dre.vanderbilt.edu/~schmidt/TAO.html
 **/

// TAO_IDL - Generated from
// be/be_codegen.cpp:149

#ifndef _TAO_IDL_TESTC_5HCROQ_H_
#define _TAO_IDL_TESTC_5HCROQ_H_

#include /**/ "ace/pre.h"


#include /**/ "ace/config-all.h"

#if !defined (ACE_LACKS_PRAGMA_ONCE)
# pragma once
#endif /* ACE_LACKS_PRAGMA_ONCE */


#include "tao/AnyTypeCode/AnyTypeCode_methods.h"
#include "tao/AnyTypeCode/Any.h"
#include "tao/Valuetype/AbstractBase.h"
#include "tao/Valuetype/ValueBase.h"
#include "tao/Valuetype/Valuetype_Adapter_Factory_Impl.h"
#include "tao/Valuetype/ValueFactory.h"
#include "tao/ORB.h"
#include "tao/SystemException.h"
#include "tao/UserException.h"
#include "tao/Basic_Types.h"
#include "tao/ORB_Constants.h"
#include "tao/Object.h"
#include "tao/String_Manager_T.h"
#include "tao/Valuetype/Value_VarOut_T.h"
#include "tao/Objref_VarOut_T.h"
#include "tao/VarOut_T.h"
#include "tao/Arg_Traits_T.h"
#include "tao/Basic_Arguments.h"
#include "tao/Special_Basic_Arguments.h"
#include "tao/Any_Insert_Policy_T.h"
#include "tao/Fixed_Size_Argument_T.h"
#include "tao/Var_Size_Argument_T.h"
#include "tao/Object_Argument_T.h"
#include "tao/UB_String_Arguments.h"
#include /**/ "tao/Version.h"
#include /**/ "tao/Versioned_Namespace.h"

#if TAO_MAJOR_VERSION != 2 || TAO_MINOR_VERSION != 4 || TAO_MICRO_VERSION != 1
#error This file should be regenerated with TAO_IDL
#endif

#if defined (TAO_EXPORT_MACRO)
#undef TAO_EXPORT_MACRO
#endif
#define TAO_EXPORT_MACRO 

// TAO_IDL - Generated from
// be/be_visitor_root/root_ch.cpp:157
TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<typename T> class AbstractBase_Narrow_Utils;
  template<typename T> class Narrow_Utils;
}
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_exception/exception_ch.cpp:41

class  BadInput : public ::CORBA::UserException
{
public:
  ::TAO::String_Manager message;

  BadInput (void);
  BadInput (const BadInput &);
  ~BadInput (void);

  BadInput &operator= (const BadInput &);

  static void _tao_any_destructor (void *);

  static BadInput *_downcast ( ::CORBA::Exception *);
  static const BadInput *_downcast ( ::CORBA::Exception const *);

  static ::CORBA::Exception *_alloc (void);

  virtual ::CORBA::Exception *_tao_duplicate (void) const;

  virtual void _raise (void) const;

  virtual void _tao_encode (TAO_OutputCDR &cdr) const;
  virtual void _tao_decode (TAO_InputCDR &cdr);

  // TAO_IDL - Generated from
  // be/be_visitor_exception/exception_ctor.cpp:51

  BadInput (
      const char * _tao_message);

  virtual ::CORBA::TypeCode_ptr _tao_type (void) const;
};

// TAO_IDL - Generated from
// be/be_visitor_typecode/typecode_decl.cpp:34

extern  ::CORBA::TypeCode_ptr const _tc_BadInput;

// TAO_IDL - Generated from
// be/be_interface.cpp:748

#if !defined (_BASE__VAR_OUT_CH_)
#define _BASE__VAR_OUT_CH_

class base;
typedef base *base_ptr;

typedef
  TAO_Objref_Var_T<
      base
    >
  base_var;

typedef
  TAO_Objref_Out_T<
      base
    >
  base_out;

#endif /* end #if !defined */

// TAO_IDL - Generated from
// be/be_visitor_interface/interface_ch.cpp:40

class  base
  : public virtual ::CORBA::AbstractBase

{
public:
  friend class TAO::AbstractBase_Narrow_Utils<base>;

  // TAO_IDL - Generated from
  // be/be_type.cpp:304

  typedef base_ptr _ptr_type;
  typedef base_var _var_type;
  typedef base_out _out_type;

  static void _tao_any_destructor (void *);

  // The static operations.
  static base_ptr _duplicate (base_ptr obj);

  static void _tao_release (base_ptr obj);

  static base_ptr _narrow (::CORBA::AbstractBase_ptr obj);
  static base_ptr _unchecked_narrow (::CORBA::AbstractBase_ptr obj);
  static base_ptr _nil (void);

  virtual char * base_op (
    const char * inarg);

  // TAO_IDL - Generated from
  // be/be_visitor_interface/interface_ch.cpp:137

  virtual ::CORBA::Boolean _is_a (const char *type_id);
  virtual const char* _interface_repository_id (void) const;
  virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);

protected:
  // Abstract or local interface only.
  base (void);

  // Protected for abstract interfaces.
  base (const base &);

  // Non-local interface only.
  base (
      TAO_Stub *objref,
      ::CORBA::Boolean _tao_collocated = false,
      TAO_Abstract_ServantBase *servant = 0,
      TAO_ORB_Core *orb_core = 0);

  virtual ~base (void);

private:
  void operator= (const base &);
};

// TAO_IDL - Generated from
// be/be_visitor_typecode/typecode_decl.cpp:34

extern  ::CORBA::TypeCode_ptr const _tc_base;

// TAO_IDL - Generated from
// be/be_interface.cpp:748

#if !defined (_FOO__VAR_OUT_CH_)
#define _FOO__VAR_OUT_CH_

class foo;
typedef foo *foo_ptr;

typedef
  TAO_Objref_Var_T<
      foo
    >
  foo_var;

typedef
  TAO_Objref_Out_T<
      foo
    >
  foo_out;

#endif /* end #if !defined */

// TAO_IDL - Generated from
// be/be_visitor_interface/interface_ch.cpp:40

class  foo
  : public virtual ::base,
    public virtual ::CORBA::Object
{
public:
  friend class TAO::Narrow_Utils<foo>;

  // TAO_IDL - Generated from
  // be/be_type.cpp:304

  typedef foo_ptr _ptr_type;
  typedef foo_var _var_type;
  typedef foo_out _out_type;

  static void _tao_any_destructor (void *);

  // The static operations.
  static foo_ptr _duplicate (foo_ptr obj);

  static void _tao_release (foo_ptr obj);

  static foo_ptr _narrow (::CORBA::Object_ptr obj);
  static foo_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
  static foo_ptr _nil (void);

  virtual char * foo_op (
    const char * inarg);

  virtual char * base_op (
    const char * inarg);

  // TAO_IDL - Generated from
  // be/be_visitor_interface/interface_ch.cpp:137

  virtual void _add_ref (void);

  virtual ::CORBA::Boolean _is_a (const char *type_id);
  virtual const char* _interface_repository_id (void) const;
  virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);

protected:
  // Concrete interface only.
  foo (void);

  // Concrete non-local interface only.
  foo (
      ::IOP::IOR *ior,
      TAO_ORB_Core *orb_core);
  
  // Non-local interface only.
  foo (
      TAO_Stub *objref,
      ::CORBA::Boolean _tao_collocated = false,
      TAO_Abstract_ServantBase *servant = 0,
      TAO_ORB_Core *orb_core = 0);

  virtual ~foo (void);

private:
  // Private and unimplemented for concrete interfaces.
  foo (const foo &);

  void operator= (const foo &);
};

// TAO_IDL - Generated from
// be/be_visitor_typecode/typecode_decl.cpp:34

extern  ::CORBA::TypeCode_ptr const _tc_foo;

// TAO_IDL - Generated from
// be/be_interface.cpp:748

#if !defined (_PASSER__VAR_OUT_CH_)
#define _PASSER__VAR_OUT_CH_

class passer;
typedef passer *passer_ptr;

typedef
  TAO_Objref_Var_T<
      passer
    >
  passer_var;

typedef
  TAO_Objref_Out_T<
      passer
    >
  passer_out;

#endif /* end #if !defined */

// TAO_IDL - Generated from
// be/be_visitor_interface/interface_ch.cpp:40

class  passer
  : public virtual ::CORBA::Object
{
public:
  friend class TAO::Narrow_Utils<passer>;

  // TAO_IDL - Generated from
  // be/be_type.cpp:304

  typedef passer_ptr _ptr_type;
  typedef passer_var _var_type;
  typedef passer_out _out_type;

  static void _tao_any_destructor (void *);

  // The static operations.
  static passer_ptr _duplicate (passer_ptr obj);

  static void _tao_release (passer_ptr obj);

  static passer_ptr _narrow (::CORBA::Object_ptr obj);
  static passer_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
  static passer_ptr _nil (void);

  virtual void pass_ops (
    ::base_out outarg);

  virtual void pass_state (
    ::base_out outarg);

  virtual void pass_nil (
    ::base_out outarg);

  virtual void shutdown (
    void);

  // TAO_IDL - Generated from
  // be/be_visitor_interface/interface_ch.cpp:137

  virtual ::CORBA::Boolean _is_a (const char *type_id);
  virtual const char* _interface_repository_id (void) const;
  virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);

protected:
  // Concrete interface only.
  passer (void);

  // Concrete non-local interface only.
  passer (
      ::IOP::IOR *ior,
      TAO_ORB_Core *orb_core);
  
  // Non-local interface only.
  passer (
      TAO_Stub *objref,
      ::CORBA::Boolean _tao_collocated = false,
      TAO_Abstract_ServantBase *servant = 0,
      TAO_ORB_Core *orb_core = 0);

  virtual ~passer (void);

private:
  // Private and unimplemented for concrete interfaces.
  passer (const passer &);

  void operator= (const passer &);
};

// TAO_IDL - Generated from
// be/be_visitor_typecode/typecode_decl.cpp:34

extern  ::CORBA::TypeCode_ptr const _tc_passer;

// TAO_IDL - Generated from
// be/be_valuetype.cpp:564



#if !defined (_BASENODE__VAR_OUT_CH_)
#define _BASENODE__VAR_OUT_CH_

class BaseNode;
typedef
  TAO_Value_Var_T<
      BaseNode
    >
  BaseNode_var;

typedef
  TAO_Value_Out_T<
      BaseNode
    >
  BaseNode_out;

#endif /* end #if !defined */

// TAO_IDL - Generated from
// be/be_visitor_valuetype/valuetype_ch.cpp:50

class  BaseNode
  : public virtual ::CORBA::ValueBase
{
public:

  // TAO_IDL - Generated from
  // be/be_type.cpp:304

  typedef BaseNode * _ptr_type;
  typedef BaseNode_var _var_type;
  typedef BaseNode_out _out_type;

  static void _tao_any_destructor (void *);

  static BaseNode* _downcast ( ::CORBA::ValueBase *v);
  
  /// TAO extensions or internals
  static ::CORBA::Boolean _tao_unmarshal (
      TAO_InputCDR &strm,
      BaseNode *&new_object);
  
  virtual const char* _tao_obv_repository_id (void) const;

  virtual void _tao_obv_truncatable_repo_ids (Repository_Id_List &) const;

  static const char* _tao_obv_static_repository_id (void);

  virtual ::CORBA::TypeCode_ptr _tao_type (void) const;

public:

  // TAO_IDL - Generated from
  // be/be_visitor_valuetype/field_ch.cpp:361

  virtual void left (BaseNode *) = 0;
  virtual BaseNode *left (void) const = 0;

public:

  // TAO_IDL - Generated from
  // be/be_visitor_valuetype/field_ch.cpp:361

  virtual void right (BaseNode *) = 0;
  virtual BaseNode *right (void) const = 0;

  // TAO_IDL - Generated from
  // be/be_visitor_valuetype/valuetype_ch.cpp:238

protected:
  BaseNode (void);
  virtual ~BaseNode (void);

  virtual ::CORBA::Boolean _tao_marshal_v (TAO_OutputCDR &) const;
  virtual ::CORBA::Boolean _tao_unmarshal_v (TAO_InputCDR &);
  virtual ::CORBA::Boolean _tao_match_formal_type (ptrdiff_t ) const;
  
private:
  BaseNode (const BaseNode &);
  void operator= (const BaseNode &);
  
protected:
  virtual ::CORBA::Boolean
  _tao_marshal__BaseNode (TAO_OutputCDR &, TAO_ChunkInfo &) const = 0;

  virtual ::CORBA::Boolean
  _tao_unmarshal__BaseNode (TAO_InputCDR &, TAO_ChunkInfo &) = 0;
};

// TAO_IDL - Generated from
// be/be_visitor_valuetype/valuetype_init_ch.cpp:57

class  BaseNode_init
  : public virtual ::CORBA::ValueFactoryBase
{
public:
  BaseNode_init (void);

  static BaseNode_init* _downcast ( ::CORBA::ValueFactoryBase *);

  virtual ::CORBA::ValueBase *
  create_for_unmarshal (void);

  // TAO-specific extensions
public:
  virtual const char* tao_repository_id (void);

protected:
  virtual ~BaseNode_init (void);
};

// TAO_IDL - Generated from
// be/be_visitor_typecode/typecode_decl.cpp:34

extern  ::CORBA::TypeCode_ptr const _tc_BaseNode;

// TAO_IDL - Generated from
// be/be_valuetype.cpp:564



#if !defined (_STRINGNODE__VAR_OUT_CH_)
#define _STRINGNODE__VAR_OUT_CH_

class StringNode;
typedef
  TAO_Value_Var_T<
      StringNode
    >
  StringNode_var;

typedef
  TAO_Value_Out_T<
      StringNode
    >
  StringNode_out;

#endif /* end #if !defined */

// TAO_IDL - Generated from
// be/be_visitor_valuetype/valuetype_ch.cpp:50

class  StringNode
  : public virtual BaseNode
{
public:

  // TAO_IDL - Generated from
  // be/be_type.cpp:304

  typedef StringNode * _ptr_type;
  typedef StringNode_var _var_type;
  typedef StringNode_out _out_type;

  static void _tao_any_destructor (void *);

  static StringNode* _downcast ( ::CORBA::ValueBase *v);
  
  /// TAO extensions or internals
  static ::CORBA::Boolean _tao_unmarshal (
      TAO_InputCDR &strm,
      StringNode *&new_object);
  
  virtual const char* _tao_obv_repository_id (void) const;

  virtual void _tao_obv_truncatable_repo_ids (Repository_Id_List &) const;

  static const char* _tao_obv_static_repository_id (void);

  virtual ::CORBA::TypeCode_ptr _tao_type (void) const;

public:

  // TAO_IDL - Generated from
  // be/be_visitor_valuetype/field_ch.cpp:608

  virtual void name (char *val) = 0;
  virtual void name (const char *val) = 0;
  virtual void name (const ::CORBA::String_var &val) = 0;
  virtual const char *name (void) const = 0;

  // TAO_IDL - Generated from
  // be/be_visitor_valuetype/valuetype_ch.cpp:238

protected:
  StringNode (void);
  virtual ~StringNode (void);

  virtual ::CORBA::Boolean _tao_marshal_v (TAO_OutputCDR &) const;
  virtual ::CORBA::Boolean _tao_unmarshal_v (TAO_InputCDR &);
  virtual ::CORBA::Boolean _tao_match_formal_type (ptrdiff_t ) const;
  
private:
  StringNode (const StringNode &);
  void operator= (const StringNode &);
  
protected:
  virtual ::CORBA::Boolean
  _tao_marshal__StringNode (TAO_OutputCDR &, TAO_ChunkInfo &) const = 0;

  virtual ::CORBA::Boolean
  _tao_unmarshal__StringNode (TAO_InputCDR &, TAO_ChunkInfo &) = 0;
};

// TAO_IDL - Generated from
// be/be_visitor_valuetype/valuetype_init_ch.cpp:57

class  StringNode_init
  : public virtual ::CORBA::ValueFactoryBase
{
public:
  StringNode_init (void);

  static StringNode_init* _downcast ( ::CORBA::ValueFactoryBase *);

  virtual ::CORBA::ValueBase *
  create_for_unmarshal (void);

  // TAO-specific extensions
public:
  virtual const char* tao_repository_id (void);

protected:
  virtual ~StringNode_init (void);
};

// TAO_IDL - Generated from
// be/be_visitor_typecode/typecode_decl.cpp:34

extern  ::CORBA::TypeCode_ptr const _tc_StringNode;

// TAO_IDL - Generated from
// be/be_valuetype.cpp:564



#if !defined (_TREECONTROLLER__VAR_OUT_CH_)
#define _TREECONTROLLER__VAR_OUT_CH_

class TreeController;
typedef
  TAO_Value_Var_T<
      TreeController
    >
  TreeController_var;

typedef
  TAO_Value_Out_T<
      TreeController
    >
  TreeController_out;

#endif /* end #if !defined */

// TAO_IDL - Generated from
// be/be_visitor_valuetype/valuetype_ch.cpp:50

class  TreeController
  : public virtual ::CORBA::ValueBase,
    public virtual ::base
{
public:

  // TAO_IDL - Generated from
  // be/be_type.cpp:304

  typedef TreeController * _ptr_type;
  typedef TreeController_var _var_type;
  typedef TreeController_out _out_type;

  static void _tao_any_destructor (void *);

  static TreeController* _downcast ( ::CORBA::ValueBase *v);
  
  /// TAO extensions or internals
  static ::CORBA::Boolean _tao_unmarshal (
      TAO_InputCDR &strm,
      TreeController *&new_object);
  
  virtual const char* _tao_obv_repository_id (void) const;

  virtual void _tao_obv_truncatable_repo_ids (Repository_Id_List &) const;

  static const char* _tao_obv_static_repository_id (void);

  virtual ::CORBA::TypeCode_ptr _tao_type (void) const;

public:

  // TAO_IDL - Generated from
  // be/be_visitor_valuetype/field_ch.cpp:361

  virtual void root (BaseNode *) = 0;
  virtual BaseNode *root (void) const = 0;

  // TAO_IDL - Generated from
  // be/be_visitor_valuetype/valuetype_ch.cpp:238

public:
  
  virtual void _add_ref (void) = 0;
  virtual void _remove_ref (void) = 0;
  virtual ::CORBA::ValueBase *_tao_to_value (void);

protected:
  TreeController (void);
  virtual ~TreeController (void);

  virtual ::CORBA::Boolean _tao_marshal_v (TAO_OutputCDR &) const;
  virtual ::CORBA::Boolean _tao_unmarshal_v (TAO_InputCDR &);
  virtual ::CORBA::Boolean _tao_match_formal_type (ptrdiff_t ) const;
  
private:
  TreeController (const TreeController &);
  void operator= (const TreeController &);
  
protected:
  virtual ::CORBA::Boolean
  _tao_marshal__TreeController (TAO_OutputCDR &, TAO_ChunkInfo &) const = 0;

  virtual ::CORBA::Boolean
  _tao_unmarshal__TreeController (TAO_InputCDR &, TAO_ChunkInfo &) = 0;
};

// TAO_IDL - Generated from
// be/be_visitor_valuetype/valuetype_init_ch.cpp:57

class  TreeController_init
  : public virtual ::CORBA::ValueFactoryBase
{
public:
  TreeController_init (void);

  static TreeController_init* _downcast ( ::CORBA::ValueFactoryBase *);

  virtual ::CORBA::ValueBase *
  create_for_unmarshal (void);

  virtual ::CORBA::AbstractBase_ptr
  create_for_unmarshal_abstract (void);

// TAO-specific extensions
public:
  virtual const char* tao_repository_id (void);

protected:
  virtual ~TreeController_init (void);
};

// TAO_IDL - Generated from
// be/be_visitor_typecode/typecode_decl.cpp:34

extern  ::CORBA::TypeCode_ptr const _tc_TreeController;

// TAO_IDL - Generated from
// be/be_visitor_arg_traits.cpp:66

TAO_BEGIN_VERSIONED_NAMESPACE_DECL


// Arg traits specializations.
namespace TAO
{

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:145

#if !defined (_BASE__ARG_TRAITS_)
#define _BASE__ARG_TRAITS_

  template<>
  class  Arg_Traits< ::base>
    : public
        Object_Arg_Traits_T<
            ::base_ptr,
            ::base_var,
            ::base_out,
            TAO::Objref_Traits<base>,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:145

#if !defined (_FOO__ARG_TRAITS_)
#define _FOO__ARG_TRAITS_

  template<>
  class  Arg_Traits< ::foo>
    : public
        Object_Arg_Traits_T<
            ::foo_ptr,
            ::foo_var,
            ::foo_out,
            TAO::Objref_Traits<foo>,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:145

#if !defined (_PASSER__ARG_TRAITS_)
#define _PASSER__ARG_TRAITS_

  template<>
  class  Arg_Traits< ::passer>
    : public
        Object_Arg_Traits_T<
            ::passer_ptr,
            ::passer_var,
            ::passer_out,
            TAO::Objref_Traits<passer>,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:306

#if !defined (_BASENODE__ARG_TRAITS_)
#define _BASENODE__ARG_TRAITS_

  template<>
  class Arg_Traits< ::BaseNode>
    : public
        Object_Arg_Traits_T<
            ::BaseNode *,
            ::BaseNode_var,
            ::BaseNode_out,
            TAO::Value_Traits<BaseNode>,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:306

#if !defined (_STRINGNODE__ARG_TRAITS_)
#define _STRINGNODE__ARG_TRAITS_

  template<>
  class Arg_Traits< ::StringNode>
    : public
        Object_Arg_Traits_T<
            ::StringNode *,
            ::StringNode_var,
            ::StringNode_out,
            TAO::Value_Traits<StringNode>,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:306

#if !defined (_TREECONTROLLER__ARG_TRAITS_)
#define _TREECONTROLLER__ARG_TRAITS_

  template<>
  class Arg_Traits< ::TreeController>
    : public
        Object_Arg_Traits_T<
            ::TreeController *,
            ::TreeController_var,
            ::TreeController_out,
            TAO::Value_Traits<TreeController>,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

#endif /* end #if !defined */
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_root/root_ch.cpp:238

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Overrides of CORBA::release and CORBA::is_nil for
// interfaces that inherit from both CORBA::Object
// and CORBA::AbstractBase.

namespace CORBA
{
  TAO_NAMESPACE_STORAGE_CLASS void release (foo_ptr);
  TAO_NAMESPACE_STORAGE_CLASS ::CORBA::Boolean is_nil (foo_ptr);
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// be/be_visitor_valuetype/valuetype_obv_ch.cpp:44

// OBV_ class
class  OBV_BaseNode
  : public virtual BaseNode,
    public virtual ::CORBA::DefaultValueRefCountBase
{

public:

  // TAO_IDL - Generated from
  // be/be_visitor_valuetype/field_ch.cpp:361

  virtual void left (BaseNode *);
  virtual BaseNode *left (void) const;

public:

  // TAO_IDL - Generated from
  // be/be_visitor_valuetype/field_ch.cpp:361

  virtual void right (BaseNode *);
  virtual BaseNode *right (void) const;

public:
  OBV_BaseNode (void);
  OBV_BaseNode (
      ::BaseNode * _tao_init_left,
      ::BaseNode * _tao_init_right
    );
  virtual ~OBV_BaseNode (void);

public:
  virtual ::CORBA::ValueBase *_copy_value (void);
  
protected:
  virtual ::CORBA::Boolean
  _tao_marshal__BaseNode (TAO_OutputCDR &, TAO_ChunkInfo &) const;

  virtual ::CORBA::Boolean
  _tao_unmarshal__BaseNode (TAO_InputCDR &, TAO_ChunkInfo &);

  ::CORBA::Boolean _tao_marshal_state (TAO_OutputCDR &, TAO_ChunkInfo &) const;
  ::CORBA::Boolean _tao_unmarshal_state (TAO_InputCDR &, TAO_ChunkInfo &);
  virtual void truncation_hook (void);

private:
  BaseNode_var _pd_left;
  BaseNode_var _pd_right;
  CORBA::Boolean require_truncation_;
};

// TAO_IDL - Generated from
// be/be_visitor_valuetype/valuetype_obv_ch.cpp:44

// OBV_ class
class  OBV_StringNode
  : public virtual StringNode,
    public virtual OBV_BaseNode
{

public:

  // TAO_IDL - Generated from
  // be/be_visitor_valuetype/field_ch.cpp:608

  virtual void name (char *val);
  virtual void name (const char *val);
  virtual void name (const ::CORBA::String_var &val);
  virtual const char *name (void) const;

public:
  OBV_StringNode (void);
  OBV_StringNode (
      ::BaseNode * _tao_init_left,
      ::BaseNode * _tao_init_right,
      const char * _tao_init_name
    );
  virtual ~OBV_StringNode (void);
  
protected:
  virtual ::CORBA::Boolean
  _tao_marshal__StringNode (TAO_OutputCDR &, TAO_ChunkInfo &) const;

  virtual ::CORBA::Boolean
  _tao_unmarshal__StringNode (TAO_InputCDR &, TAO_ChunkInfo &);

  ::CORBA::Boolean _tao_marshal_state (TAO_OutputCDR &, TAO_ChunkInfo &) const;
  ::CORBA::Boolean _tao_unmarshal_state (TAO_InputCDR &, TAO_ChunkInfo &);
  virtual void truncation_hook (void);

private:
  ::TAO::String_Manager _pd_name;
  CORBA::Boolean require_truncation_;
};

// TAO_IDL - Generated from
// be/be_visitor_valuetype/valuetype_obv_ch.cpp:44

// OBV_ class
class  OBV_TreeController
  : public virtual TreeController,
    public virtual ::CORBA::DefaultValueRefCountBase
{

public:

  // TAO_IDL - Generated from
  // be/be_visitor_valuetype/field_ch.cpp:361

  virtual void root (BaseNode *);
  virtual BaseNode *root (void) const;

  // TAO_IDL - Generated from
  // be/be_visitor_valuetype/valuetype_obv_ch.cpp:146

  virtual void _add_ref (void);
  virtual void _remove_ref (void);

public:
  OBV_TreeController (void);
  OBV_TreeController (
      ::BaseNode * _tao_init_root
    );
  virtual ~OBV_TreeController (void);

public:
  virtual ::CORBA::ValueBase *_copy_value (void);
  
protected:
  virtual ::CORBA::Boolean
  _tao_marshal__TreeController (TAO_OutputCDR &, TAO_ChunkInfo &) const;

  virtual ::CORBA::Boolean
  _tao_unmarshal__TreeController (TAO_InputCDR &, TAO_ChunkInfo &);

  ::CORBA::Boolean _tao_marshal_state (TAO_OutputCDR &, TAO_ChunkInfo &) const;
  ::CORBA::Boolean _tao_unmarshal_state (TAO_InputCDR &, TAO_ChunkInfo &);
  virtual void truncation_hook (void);

private:
  BaseNode_var _pd_root;
  CORBA::Boolean require_truncation_;
};

// TAO_IDL - Generated from
// be/be_visitor_traits.cpp:60

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Traits specializations.
namespace TAO
{

#if !defined (_BASE__TRAITS_)
#define _BASE__TRAITS_

  template<>
  struct  Objref_Traits< ::base>
  {
    static ::base_ptr duplicate (
        ::base_ptr p);
    static void release (
        ::base_ptr p);
    static ::base_ptr nil (void);
    static ::CORBA::Boolean marshal (
        const ::base_ptr p,
        TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_FOO__TRAITS_)
#define _FOO__TRAITS_

  template<>
  struct  Objref_Traits< ::foo>
  {
    static ::foo_ptr duplicate (
        ::foo_ptr p);
    static void release (
        ::foo_ptr p);
    static ::foo_ptr nil (void);
    static ::CORBA::Boolean marshal (
        const ::foo_ptr p,
        TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_PASSER__TRAITS_)
#define _PASSER__TRAITS_

  template<>
  struct  Objref_Traits< ::passer>
  {
    static ::passer_ptr duplicate (
        ::passer_ptr p);
    static void release (
        ::passer_ptr p);
    static ::passer_ptr nil (void);
    static ::CORBA::Boolean marshal (
        const ::passer_ptr p,
        TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_BASENODE__TRAITS_)
#define _BASENODE__TRAITS_

  template<>
  struct  Value_Traits<BaseNode>
  {
    static void add_ref (BaseNode *);
    static void remove_ref (BaseNode *);
    static void release (BaseNode *);
  };

#endif /* end #if !defined */

#if !defined (_STRINGNODE__TRAITS_)
#define _STRINGNODE__TRAITS_

  template<>
  struct  Value_Traits<StringNode>
  {
    static void add_ref (StringNode *);
    static void remove_ref (StringNode *);
    static void release (StringNode *);
  };

#endif /* end #if !defined */

#if !defined (_TREECONTROLLER__TRAITS_)
#define _TREECONTROLLER__TRAITS_

  template<>
  struct  Value_Traits<TreeController>
  {
    static void add_ref (TreeController *);
    static void remove_ref (TreeController *);
    static void release (TreeController *);
  };

#endif /* end #if !defined */
}
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_exception/any_op_ch.cpp:38
TAO_BEGIN_VERSIONED_NAMESPACE_DECL



 void operator<<= (::CORBA::Any &, const BadInput &); // copying version
 void operator<<= (::CORBA::Any &, BadInput*); // noncopying version
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, BadInput *&); // deprecated
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const BadInput *&);
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_interface/any_op_ch.cpp:41


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 void operator<<= (::CORBA::Any &, base_ptr); // copying
 void operator<<= (::CORBA::Any &, base_ptr *); // non-copying
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, base_ptr &);
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_interface/any_op_ch.cpp:41


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 void operator<<= (::CORBA::Any &, foo_ptr); // copying
 void operator<<= (::CORBA::Any &, foo_ptr *); // non-copying
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, foo_ptr &);
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_interface/any_op_ch.cpp:41


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 void operator<<= (::CORBA::Any &, passer_ptr); // copying
 void operator<<= (::CORBA::Any &, passer_ptr *); // non-copying
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, passer_ptr &);
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_valuetype/any_op_ch.cpp:43


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 void operator<<= (::CORBA::Any &, BaseNode *); // copying
 void operator<<= (::CORBA::Any &, BaseNode **); // non-copying
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, BaseNode *&);
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_valuetype/any_op_ch.cpp:43


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 void operator<<= (::CORBA::Any &, StringNode *); // copying
 void operator<<= (::CORBA::Any &, StringNode **); // non-copying
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, StringNode *&);
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_valuetype/any_op_ch.cpp:43


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 void operator<<= (::CORBA::Any &, TreeController *); // copying
 void operator<<= (::CORBA::Any &, TreeController **); // non-copying
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, TreeController *&);
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_exception/cdr_op_ch.cpp:37
TAO_BEGIN_VERSIONED_NAMESPACE_DECL



 ::CORBA::Boolean operator<< (TAO_OutputCDR &, const BadInput &);
 ::CORBA::Boolean operator>> (TAO_InputCDR &, BadInput &);

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_interface/cdr_op_ch.cpp:41

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 ::CORBA::Boolean operator<< (TAO_OutputCDR &, const base_ptr );
 ::CORBA::Boolean operator>> (TAO_InputCDR &, base_ptr &);

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_interface/cdr_op_ch.cpp:41

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 ::CORBA::Boolean operator<< (TAO_OutputCDR &, const foo_ptr );
 ::CORBA::Boolean operator>> (TAO_InputCDR &, foo_ptr &);

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_interface/cdr_op_ch.cpp:41

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 ::CORBA::Boolean operator<< (TAO_OutputCDR &, const passer_ptr );
 ::CORBA::Boolean operator>> (TAO_InputCDR &, passer_ptr &);

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_valuetype.cpp:456


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

namespace CORBA
{
  extern  void add_ref (BaseNode *);
  extern  void remove_ref (BaseNode *);
}
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_valuetype/cdr_op_ch.cpp:49


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 ::CORBA::Boolean operator<< (TAO_OutputCDR &, const BaseNode *);
 ::CORBA::Boolean operator>> (TAO_InputCDR &, BaseNode *&);

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_valuetype.cpp:456


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

namespace CORBA
{
  extern  void add_ref (StringNode *);
  extern  void remove_ref (StringNode *);
}
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_valuetype/cdr_op_ch.cpp:49


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 ::CORBA::Boolean operator<< (TAO_OutputCDR &, const StringNode *);
 ::CORBA::Boolean operator>> (TAO_InputCDR &, StringNode *&);

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_valuetype.cpp:456


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

namespace CORBA
{
  extern  void add_ref (TreeController *);
  extern  void remove_ref (TreeController *);
}
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_valuetype/cdr_op_ch.cpp:49


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 ::CORBA::Boolean operator<< (TAO_OutputCDR &, const TreeController *);
 ::CORBA::Boolean operator>> (TAO_InputCDR &, TreeController *&);

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_codegen.cpp:1700
#if defined (__ACE_INLINE__)
#include "testC.inl"
#endif /* defined INLINE */

#include /**/ "ace/post.h"

#endif /* ifndef */

