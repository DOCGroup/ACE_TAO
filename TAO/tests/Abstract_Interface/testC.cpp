// -*- C++ -*-
/**
 * Code generated by the The ACE ORB (TAO) IDL Compiler v2.4.1
 * TAO and the TAO IDL Compiler have been developed by:
 *       Center for Distributed Object Computing
 *       Washington University
 *       St. Louis, MO
 *       USA
 *       http://www.cs.wustl.edu/~schmidt/doc-center.html
 * and
 *       Distributed Object Computing Laboratory
 *       University of California at Irvine
 *       Irvine, CA
 *       USA
 * and
 *       Institute for Software Integrated Systems
 *       Vanderbilt University
 *       Nashville, TN
 *       USA
 *       http://www.isis.vanderbilt.edu/
 *
 * Information about TAO is available at:
 *     http://www.dre.vanderbilt.edu/~schmidt/TAO.html
 **/

// TAO_IDL - Generated from
// be/be_codegen.cpp:373


#include "testC.h"
#include "tao/AnyTypeCode/Null_RefCount_Policy.h"
#include "tao/AnyTypeCode/TypeCode_Constants.h"
#include "tao/AnyTypeCode/Alias_TypeCode_Static.h"
#include "tao/AnyTypeCode/Objref_TypeCode_Static.h"
#include "tao/AnyTypeCode/String_TypeCode_Static.h"
#include "tao/AnyTypeCode/Struct_TypeCode_Static.h"
#include "tao/AnyTypeCode/TypeCode_Struct_Field.h"
#include "tao/AnyTypeCode/Value_TypeCode_Static.h"
#include "tao/AnyTypeCode/TypeCode_Value_Field.h"
#include "tao/AnyTypeCode/Recursive_Type_TypeCode.h"
#include "tao/CDR.h"
#include "tao/Exception_Data.h"
#include "tao/Invocation_Adapter.h"
#include "tao/Valuetype/AbstractBase_Invocation_Adapter.h"
#include "tao/Valuetype/AbstractBase_T.h"
#include "tao/Object_T.h"
#include "tao/SystemException.h"
#include "tao/CDR.h"
#include "tao/AnyTypeCode/Any.h"
#include "tao/AnyTypeCode/Any_Impl_T.h"
#include "tao/AnyTypeCode/Any_Dual_Impl_T.h"
#include "ace/OS_NS_string.h"

#if !defined (__ACE_INLINE__)
#include "testC.inl"
#endif /* !defined INLINE */

// TAO_IDL - Generated from
// be/be_visitor_exception/exception_ctor.cpp:51

BadInput::BadInput (
    const char * _tao_message)
  : ::CORBA::UserException (
        "IDL:BadInput:1.0",
        "BadInput"
      )
{
  this->message = ::CORBA::string_dup (_tao_message);
}



// TAO_IDL - Generated from
// be/be_visitor_exception/exception_cs.cpp:98

BadInput::BadInput (void)
  : ::CORBA::UserException (
        "IDL:BadInput:1.0",
        "BadInput"
      )
{
}

BadInput::~BadInput (void)
{
}

BadInput::BadInput (const ::BadInput &_tao_excp)
  : ::CORBA::UserException (
        _tao_excp._rep_id (),
        _tao_excp._name ()
      )
{
  this->message = ::CORBA::string_dup (_tao_excp.message.in ());
}

BadInput&
BadInput::operator= (const ::BadInput &_tao_excp)
{
  this->::CORBA::UserException::operator= (_tao_excp);
  this->message = ::CORBA::string_dup (_tao_excp.message.in ());
  return *this;
}

void BadInput::_tao_any_destructor (void *_tao_void_pointer)
{
  BadInput *_tao_tmp_pointer =
    static_cast<BadInput *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

BadInput *
BadInput::_downcast ( ::CORBA::Exception *_tao_excp)
{
  return dynamic_cast<BadInput *> (_tao_excp);
}

const BadInput *
BadInput::_downcast ( ::CORBA::Exception const *_tao_excp)
{
  return dynamic_cast<const BadInput *> (_tao_excp);
}

::CORBA::Exception *BadInput::_alloc (void)
{
  ::CORBA::Exception *retval = 0;
  ACE_NEW_RETURN (retval, ::BadInput, 0);
  return retval;
}

::CORBA::Exception *
BadInput::_tao_duplicate (void) const
{
  ::CORBA::Exception *result = 0;
  ACE_NEW_RETURN (
      result,
      ::BadInput (*this),
      0
    );
  return result;
}

void BadInput::_raise (void) const
{
  throw *this;
}

void BadInput::_tao_encode (TAO_OutputCDR &cdr) const
{
  if (!(cdr << *this))
    {
      throw ::CORBA::MARSHAL ();
    }
}

void BadInput::_tao_decode (TAO_InputCDR &cdr)
{
  if (!(cdr >> *this))
    {
      throw ::CORBA::MARSHAL ();
    }
}

// TAO extension - the virtual _type method.
::CORBA::TypeCode_ptr BadInput::_tao_type (void) const
{
  return ::_tc_BadInput;
}

// TAO_IDL - Generated from
// be/be_visitor_typecode/struct_typecode.cpp:86

static TAO::TypeCode::Struct_Field<
  char const *,
  ::CORBA::TypeCode_ptr const *> const 
    _tao_fields_BadInput[] =
      {
        { "message", &CORBA::_tc_string }
      };
  
static TAO::TypeCode::Struct<
  char const *,
  ::CORBA::TypeCode_ptr const *,
  TAO::TypeCode::Struct_Field<
    char const *,
    ::CORBA::TypeCode_ptr const *> const *,
  TAO::Null_RefCount_Policy>
_tao_tc_BadInput (
  ::CORBA::tk_except,
  "IDL:BadInput:1.0",
  "BadInput",
  _tao_fields_BadInput,
  1);

::CORBA::TypeCode_ptr const _tc_BadInput =
  &_tao_tc_BadInput;

// TAO_IDL - Generated from
// be/be_visitor_interface/interface_cs.cpp:48

// Traits specializations for base.

base_ptr
TAO::Objref_Traits<base>::duplicate (
    base_ptr p)
{
  return base::_duplicate (p);
}

void
TAO::Objref_Traits<base>::release (
    base_ptr p)
{
  ::CORBA::release (p);
}

base_ptr
TAO::Objref_Traits<base>::nil (void)
{
  return base::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<base>::marshal (
    const base_ptr p,
    TAO_OutputCDR & cdr)
{
  return cdr << p;
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:88

char *
base::base_op (
  const char * inarg)
{
  TAO::Arg_Traits< char *>::ret_val _tao_retval;
  TAO::Arg_Traits< char *>::in_arg_val _tao_inarg (inarg);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_inarg
    };

  static TAO::Exception_Data
  _tao_base_base_op_exceptiondata [] = 
    {
      {
        "IDL:BadInput:1.0",
        BadInput::_alloc
#if TAO_HAS_INTERCEPTORS == 1
        , _tc_BadInput
#endif /* TAO_HAS_INTERCEPTORS */
      }
    };

  TAO::AbstractBase_Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      2,
      "base_op",
      7,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY
      
    );

  _tao_call.invoke (
      _tao_base_base_op_exceptiondata,
      1
    );

  return _tao_retval.retn ();
}

base::~base (void)
{
}

void
base::_tao_any_destructor (void *_tao_void_pointer)
{
  base *_tao_tmp_pointer =
    static_cast<base *> (_tao_void_pointer);
  ::CORBA::release (_tao_tmp_pointer);
}

base_ptr
base::_narrow (
    ::CORBA::AbstractBase_ptr _tao_objref)
{
  return
    TAO::AbstractBase_Narrow_Utils<base>::narrow (
        _tao_objref,
        "IDL:base:1.0");
}

base_ptr
base::_unchecked_narrow (
    ::CORBA::AbstractBase_ptr _tao_objref)
{
  return
    TAO::AbstractBase_Narrow_Utils<base>::unchecked_narrow (
        _tao_objref);
}

base_ptr
base::_nil (void)
{
  return 0;
}

base_ptr
base::_duplicate (base_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  return obj;
}

void
base::_tao_release (base_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
base::_is_a (const char *value)
{
  if (
      ACE_OS::strcmp (
          value,
          "IDL:base:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/AbstractBase:1.0"
        ) == 0
    )
    {
      return true; // success using local knowledge
    }
  else
    {
      return false;
    }
}

const char* base::_interface_repository_id (void) const
{
  return "IDL:base:1.0";
}

::CORBA::Boolean
base::marshal (TAO_OutputCDR &cdr)
{
  return (cdr << this);
}

// TAO_IDL - Generated from
// be/be_visitor_typecode/objref_typecode.cpp:70

static TAO::TypeCode::Objref<char const *,
                             TAO::Null_RefCount_Policy>
  _tao_tc_base (
    ::CORBA::tk_abstract_interface,
    "IDL:base:1.0",
    "base");
  
::CORBA::TypeCode_ptr const _tc_base =
  &_tao_tc_base;

// TAO_IDL - Generated from
// be/be_visitor_interface/interface_cs.cpp:48

// Traits specializations for foo.

foo_ptr
TAO::Objref_Traits<foo>::duplicate (
    foo_ptr p)
{
  return foo::_duplicate (p);
}

void
TAO::Objref_Traits<foo>::release (
    foo_ptr p)
{
  ::CORBA::AbstractBase_ptr abs = p;
  ::CORBA::release (abs);
}

foo_ptr
TAO::Objref_Traits<foo>::nil (void)
{
  return foo::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<foo>::marshal (
    const foo_ptr p,
    TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

void
CORBA::release (foo_ptr p)
{
  ::CORBA::AbstractBase_ptr abs = p;
  ::CORBA::release (abs);
}

::CORBA::Boolean
CORBA::is_nil (foo_ptr p)
{
  ::CORBA::Object_ptr obj = p;
  return ::CORBA::is_nil (obj);
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:88

char *
foo::foo_op (
  const char * inarg)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  TAO::Arg_Traits< char *>::ret_val _tao_retval;
  TAO::Arg_Traits< char *>::in_arg_val _tao_inarg (inarg);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_inarg
    };

  static TAO::Exception_Data
  _tao_foo_foo_op_exceptiondata [] = 
    {
      {
        "IDL:BadInput:1.0",
        BadInput::_alloc
#if TAO_HAS_INTERCEPTORS == 1
        , _tc_BadInput
#endif /* TAO_HAS_INTERCEPTORS */
      }
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      2,
      "foo_op",
      6,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY
      
    );

  _tao_call.invoke (
      _tao_foo_foo_op_exceptiondata,
      1
    );

  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:88

char *
foo::base_op (
  const char * inarg)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  TAO::Arg_Traits< char *>::ret_val _tao_retval;
  TAO::Arg_Traits< char *>::in_arg_val _tao_inarg (inarg);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_inarg
    };

  static TAO::Exception_Data
  _tao_foo_base_op_exceptiondata [] = 
    {
      {
        "IDL:BadInput:1.0",
        BadInput::_alloc
#if TAO_HAS_INTERCEPTORS == 1
        , _tc_BadInput
#endif /* TAO_HAS_INTERCEPTORS */
      }
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      2,
      "base_op",
      7,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY
      
    );

  _tao_call.invoke (
      _tao_foo_base_op_exceptiondata,
      1
    );

  return _tao_retval.retn ();
}

foo::foo (void)
{
}

foo::~foo (void)
{
}

void
foo::_tao_any_destructor (void *_tao_void_pointer)
{
  foo *_tao_tmp_pointer =
    static_cast<foo *> (_tao_void_pointer);
  ::CORBA::release (_tao_tmp_pointer);
}

void
foo::_add_ref (void)
{
  this->::CORBA::Object::_add_ref ();
}

foo_ptr
foo::_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return
    TAO::Narrow_Utils<foo>::narrow (
        _tao_objref,
        "IDL:foo:1.0");
}

foo_ptr
foo::_unchecked_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return
    TAO::Narrow_Utils<foo>::unchecked_narrow (
        _tao_objref);
}

foo_ptr
foo::_nil (void)
{
  return 0;
}

foo_ptr
foo::_duplicate (foo_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  return obj;
}

void
foo::_tao_release (foo_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
foo::_is_a (const char *value)
{
  if (
      ACE_OS::strcmp (
          value,
          "IDL:base:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:foo:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/AbstractBase:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        ) == 0
    )
    {
      return true; // success using local knowledge
    }
  else
    {
      return this->::CORBA::Object::_is_a (value);
    }
}

const char* foo::_interface_repository_id (void) const
{
  return "IDL:foo:1.0";
}

::CORBA::Boolean
foo::marshal (TAO_OutputCDR &cdr)
{
  return (cdr << this);
}

// TAO_IDL - Generated from
// be/be_visitor_typecode/objref_typecode.cpp:70

static TAO::TypeCode::Objref<char const *,
                             TAO::Null_RefCount_Policy>
  _tao_tc_foo (
    ::CORBA::tk_objref,
    "IDL:foo:1.0",
    "foo");
  
::CORBA::TypeCode_ptr const _tc_foo =
  &_tao_tc_foo;

// TAO_IDL - Generated from
// be/be_visitor_interface/interface_cs.cpp:48

// Traits specializations for passer.

passer_ptr
TAO::Objref_Traits<passer>::duplicate (
    passer_ptr p)
{
  return passer::_duplicate (p);
}

void
TAO::Objref_Traits<passer>::release (
    passer_ptr p)
{
  ::CORBA::release (p);
}

passer_ptr
TAO::Objref_Traits<passer>::nil (void)
{
  return passer::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<passer>::marshal (
    const passer_ptr p,
    TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:88

void
passer::pass_ops (
  ::base_out outarg)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  TAO::Arg_Traits< void>::ret_val _tao_retval;
  TAO::Arg_Traits< ::base>::out_arg_val _tao_outarg (outarg);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_outarg
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      2,
      "pass_ops",
      8,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY,
      TAO::TAO_TWOWAY_INVOCATION
      ,
      TAO::TAO_SYNCHRONOUS_INVOCATION,
      false
    );

  _tao_call.invoke (0, 0);
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:88

void
passer::pass_state (
  ::base_out outarg)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  TAO::Arg_Traits< void>::ret_val _tao_retval;
  TAO::Arg_Traits< ::base>::out_arg_val _tao_outarg (outarg);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_outarg
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      2,
      "pass_state",
      10,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY,
      TAO::TAO_TWOWAY_INVOCATION
      ,
      TAO::TAO_SYNCHRONOUS_INVOCATION,
      false
    );

  _tao_call.invoke (0, 0);
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:88

void
passer::pass_nil (
  ::base_out outarg)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  TAO::Arg_Traits< void>::ret_val _tao_retval;
  TAO::Arg_Traits< ::base>::out_arg_val _tao_outarg (outarg);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_outarg
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      2,
      "pass_nil",
      8,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY,
      TAO::TAO_TWOWAY_INVOCATION
      ,
      TAO::TAO_SYNCHRONOUS_INVOCATION,
      false
    );

  _tao_call.invoke (0, 0);
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:88

void
passer::shutdown (
  void)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  TAO::Arg_Traits< void>::ret_val _tao_retval;

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      1,
      "shutdown",
      8,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY,
      TAO::TAO_ONEWAY_INVOCATION,
      TAO::TAO_SYNCHRONOUS_INVOCATION,
      false
    );

  _tao_call.invoke (0, 0);
}

passer::passer (void)
{
}

passer::~passer (void)
{
}

void
passer::_tao_any_destructor (void *_tao_void_pointer)
{
  passer *_tao_tmp_pointer =
    static_cast<passer *> (_tao_void_pointer);
  ::CORBA::release (_tao_tmp_pointer);
}

passer_ptr
passer::_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return
    TAO::Narrow_Utils<passer>::narrow (
        _tao_objref,
        "IDL:passer:1.0");
}

passer_ptr
passer::_unchecked_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return
    TAO::Narrow_Utils<passer>::unchecked_narrow (
        _tao_objref);
}

passer_ptr
passer::_nil (void)
{
  return 0;
}

passer_ptr
passer::_duplicate (passer_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  return obj;
}

void
passer::_tao_release (passer_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
passer::_is_a (const char *value)
{
  if (
      ACE_OS::strcmp (
          value,
          "IDL:passer:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        ) == 0
    )
    {
      return true; // success using local knowledge
    }
  else
    {
      return this->::CORBA::Object::_is_a (value);
    }
}

const char* passer::_interface_repository_id (void) const
{
  return "IDL:passer:1.0";
}

::CORBA::Boolean
passer::marshal (TAO_OutputCDR &cdr)
{
  return (cdr << this);
}

// TAO_IDL - Generated from
// be/be_visitor_typecode/objref_typecode.cpp:70

static TAO::TypeCode::Objref<char const *,
                             TAO::Null_RefCount_Policy>
  _tao_tc_passer (
    ::CORBA::tk_objref,
    "IDL:passer:1.0",
    "passer");
  
::CORBA::TypeCode_ptr const _tc_passer =
  &_tao_tc_passer;

// TAO_IDL - Generated from
// be/be_visitor_typecode/value_typecode.cpp:65

static TAO::TypeCode::Value_Field<char const *, ::CORBA::TypeCode_ptr const *> const _tao_fields_BaseNode[] =
  {
    { "left", &_tc_BaseNode, ::CORBA::PUBLIC_MEMBER },
    { "right", &_tc_BaseNode, ::CORBA::PUBLIC_MEMBER }
    
  };
static TAO::TypeCode::Recursive_Type<
  TAO::TypeCode::Value<char const *,
                       ::CORBA::TypeCode_ptr const *,
                       TAO::TypeCode::Value_Field<char const *, ::CORBA::TypeCode_ptr const *> const *,
                       TAO::Null_RefCount_Policy>,
  ::CORBA::TypeCode_ptr const *,
  TAO::TypeCode::Value_Field<char const *, ::CORBA::TypeCode_ptr const *> const * >

  _tao_tc_BaseNode (
    ::CORBA::tk_value,
    "IDL:BaseNode:1.0",
    "BaseNode",
    ::CORBA::VM_NONE,
    &::CORBA::_tc_null,
    _tao_fields_BaseNode,
    2);
  
::CORBA::TypeCode_ptr const _tc_BaseNode =
  &_tao_tc_BaseNode;

// TAO_IDL - Generated from
// be/be_visitor_valuetype/valuetype_cs.cpp:53

void
TAO::Value_Traits<BaseNode>::add_ref (
    BaseNode * p)
{
  ::CORBA::add_ref (p);
}

void
TAO::Value_Traits<BaseNode>::remove_ref (
    BaseNode * p)
{
  ::CORBA::remove_ref (p);
}

void
TAO::Value_Traits<BaseNode>::release (
    BaseNode * p)
{
  ::CORBA::remove_ref (p);
}

BaseNode *
BaseNode::_downcast ( ::CORBA::ValueBase *v)
{
  return dynamic_cast< ::BaseNode * > (v);
}

const char *
BaseNode::_tao_obv_repository_id (void) const
{
  return this->_tao_obv_static_repository_id ();
}

void
BaseNode::_tao_obv_truncatable_repo_ids (Repository_Id_List& ids) const
{
  ids.push_back (this->_tao_obv_static_repository_id ());
}

void
BaseNode::_tao_any_destructor (void *_tao_void_pointer)
{
  BaseNode *_tao_tmp_pointer =
    static_cast<BaseNode *> (_tao_void_pointer);
  ::CORBA::remove_ref (_tao_tmp_pointer);
}

// TAO extension - the virtual _type method.
::CORBA::TypeCode_ptr BaseNode::_tao_type (void) const
{
  return ::_tc_BaseNode;
}

BaseNode::~BaseNode (void)
{}

::CORBA::Boolean
BaseNode::_tao_marshal_v (TAO_OutputCDR & strm) const
{
  TAO_ChunkInfo ci (this->is_truncatable_ || this->chunking_);
  return this->_tao_marshal__BaseNode (strm, ci);
}

::CORBA::Boolean
BaseNode::_tao_unmarshal_v (TAO_InputCDR & strm)
{
  TAO_ChunkInfo ci (this->is_truncatable_ || this->chunking_, 1);
  return this->_tao_unmarshal__BaseNode (strm,ci);
}

::CORBA::Boolean
BaseNode::_tao_match_formal_type (ptrdiff_t formal_type_id) const
{
  return formal_type_id == reinterpret_cast<ptrdiff_t> (BaseNode::_downcast);
}

::CORBA::Boolean
BaseNode::_tao_unmarshal (
    TAO_InputCDR &strm,
    BaseNode *&new_object
  )
{
  ::CORBA::ValueBase *base = 0;
  ::CORBA::Boolean is_indirected = false;
  ::CORBA::Boolean is_null_object = false;
  ::CORBA::Boolean const retval =
    ::CORBA::ValueBase::_tao_unmarshal_pre (
        strm,
        base,
        BaseNode::_tao_obv_static_repository_id (),
        is_null_object,
        is_indirected
      );
  
  ::CORBA::ValueBase_var owner (base);

  if (!retval)
    return false;
  
  if (is_null_object)
    return true;
  
  if (!is_indirected && !base->_tao_unmarshal_v (strm))
    return false;
  
  // Now base must point to the unmarshaled object.
  // Align the pointer to the right subobject.
  new_object = BaseNode::_downcast (base);
  if (0 == new_object)
    return false;
  
  if (is_indirected)
    new_object->_add_ref ();
  
  owner._retn ();
  return true;
}

// TAO_IDL - Generated from
// be/be_visitor_valuetype/valuetype_init_cs.cpp:73

BaseNode_init::BaseNode_init (void)
{
}

BaseNode_init::~BaseNode_init (void)
{
}

BaseNode_init *
BaseNode_init::_downcast ( ::CORBA::ValueFactoryBase *v)
{
  return dynamic_cast< ::BaseNode_init * > (v);
}

const char*
BaseNode_init::tao_repository_id (void)
{
  return ::BaseNode::_tao_obv_static_repository_id ();
}

::CORBA::ValueBase *
BaseNode_init::create_for_unmarshal (void)
{
  ::CORBA::ValueBase *ret_val = 0;
  ACE_NEW_THROW_EX (
      ret_val,
      OBV_BaseNode,
      ::CORBA::NO_MEMORY ()
    );
  return ret_val;
}

// TAO_IDL - Generated from
// be/be_visitor_typecode/value_typecode.cpp:65

static TAO::TypeCode::Value_Field<char const *, ::CORBA::TypeCode_ptr const *> const _tao_fields_StringNode[] =
  {
    { "name", &CORBA::_tc_string, ::CORBA::PUBLIC_MEMBER }
    
  };
static TAO::TypeCode::Value<char const *,
                     ::CORBA::TypeCode_ptr const *,
                     TAO::TypeCode::Value_Field<char const *, ::CORBA::TypeCode_ptr const *> const *,
                     TAO::Null_RefCount_Policy>
  _tao_tc_StringNode (
    ::CORBA::tk_value,
    "IDL:StringNode:1.0",
    "StringNode",
    ::CORBA::VM_NONE,
    &_tc_BaseNode,
    _tao_fields_StringNode,
    1);
  
::CORBA::TypeCode_ptr const _tc_StringNode =
  &_tao_tc_StringNode;

// TAO_IDL - Generated from
// be/be_visitor_valuetype/valuetype_cs.cpp:53

void
TAO::Value_Traits<StringNode>::add_ref (
    StringNode * p)
{
  ::CORBA::add_ref (p);
}

void
TAO::Value_Traits<StringNode>::remove_ref (
    StringNode * p)
{
  ::CORBA::remove_ref (p);
}

void
TAO::Value_Traits<StringNode>::release (
    StringNode * p)
{
  ::CORBA::remove_ref (p);
}

StringNode *
StringNode::_downcast ( ::CORBA::ValueBase *v)
{
  return dynamic_cast< ::StringNode * > (v);
}

const char *
StringNode::_tao_obv_repository_id (void) const
{
  return this->_tao_obv_static_repository_id ();
}

void
StringNode::_tao_obv_truncatable_repo_ids (Repository_Id_List& ids) const
{
  ids.push_back (this->_tao_obv_static_repository_id ());
}

void
StringNode::_tao_any_destructor (void *_tao_void_pointer)
{
  StringNode *_tao_tmp_pointer =
    static_cast<StringNode *> (_tao_void_pointer);
  ::CORBA::remove_ref (_tao_tmp_pointer);
}

// TAO extension - the virtual _type method.
::CORBA::TypeCode_ptr StringNode::_tao_type (void) const
{
  return ::_tc_StringNode;
}

StringNode::~StringNode (void)
{}

::CORBA::Boolean
StringNode::_tao_marshal_v (TAO_OutputCDR & strm) const
{
  TAO_ChunkInfo ci (this->is_truncatable_ || this->chunking_);
  return this->_tao_marshal__StringNode (strm, ci);
}

::CORBA::Boolean
StringNode::_tao_unmarshal_v (TAO_InputCDR & strm)
{
  TAO_ChunkInfo ci (this->is_truncatable_ || this->chunking_, 1);
  return this->_tao_unmarshal__StringNode (strm,ci);
}

::CORBA::Boolean
StringNode::_tao_match_formal_type (ptrdiff_t formal_type_id) const
{
  return formal_type_id == reinterpret_cast<ptrdiff_t> (StringNode::_downcast);
}

::CORBA::Boolean
StringNode::_tao_unmarshal (
    TAO_InputCDR &strm,
    StringNode *&new_object
  )
{
  ::CORBA::ValueBase *base = 0;
  ::CORBA::Boolean is_indirected = false;
  ::CORBA::Boolean is_null_object = false;
  ::CORBA::Boolean const retval =
    ::CORBA::ValueBase::_tao_unmarshal_pre (
        strm,
        base,
        StringNode::_tao_obv_static_repository_id (),
        is_null_object,
        is_indirected
      );
  
  ::CORBA::ValueBase_var owner (base);

  if (!retval)
    return false;
  
  if (is_null_object)
    return true;
  
  if (!is_indirected && !base->_tao_unmarshal_v (strm))
    return false;
  
  // Now base must point to the unmarshaled object.
  // Align the pointer to the right subobject.
  new_object = StringNode::_downcast (base);
  if (0 == new_object)
    return false;
  
  if (is_indirected)
    new_object->_add_ref ();
  
  owner._retn ();
  return true;
}

// TAO_IDL - Generated from
// be/be_visitor_valuetype/valuetype_init_cs.cpp:73

StringNode_init::StringNode_init (void)
{
}

StringNode_init::~StringNode_init (void)
{
}

StringNode_init *
StringNode_init::_downcast ( ::CORBA::ValueFactoryBase *v)
{
  return dynamic_cast< ::StringNode_init * > (v);
}

const char*
StringNode_init::tao_repository_id (void)
{
  return ::StringNode::_tao_obv_static_repository_id ();
}

::CORBA::ValueBase *
StringNode_init::create_for_unmarshal (void)
{
  ::CORBA::ValueBase *ret_val = 0;
  ACE_NEW_THROW_EX (
      ret_val,
      OBV_StringNode,
      ::CORBA::NO_MEMORY ()
    );
  return ret_val;
}

// TAO_IDL - Generated from
// be/be_visitor_typecode/value_typecode.cpp:65

static TAO::TypeCode::Value_Field<char const *, ::CORBA::TypeCode_ptr const *> const _tao_fields_TreeController[] =
  {
    { "root", &_tc_BaseNode, ::CORBA::PUBLIC_MEMBER }
    
  };
static TAO::TypeCode::Value<char const *,
                     ::CORBA::TypeCode_ptr const *,
                     TAO::TypeCode::Value_Field<char const *, ::CORBA::TypeCode_ptr const *> const *,
                     TAO::Null_RefCount_Policy>
  _tao_tc_TreeController (
    ::CORBA::tk_value,
    "IDL:TreeController:1.0",
    "TreeController",
    ::CORBA::VM_NONE,
    &::CORBA::_tc_null,
    _tao_fields_TreeController,
    1);
  
::CORBA::TypeCode_ptr const _tc_TreeController =
  &_tao_tc_TreeController;

// TAO_IDL - Generated from
// be/be_visitor_valuetype/valuetype_cs.cpp:53

void
TAO::Value_Traits<TreeController>::add_ref (
    TreeController * p)
{
  ::CORBA::add_ref (p);
}

void
TAO::Value_Traits<TreeController>::remove_ref (
    TreeController * p)
{
  ::CORBA::remove_ref (p);
}

void
TAO::Value_Traits<TreeController>::release (
    TreeController * p)
{
  ::CORBA::remove_ref (p);
}

TreeController *
TreeController::_downcast ( ::CORBA::ValueBase *v)
{
  return dynamic_cast< ::TreeController * > (v);
}

const char *
TreeController::_tao_obv_repository_id (void) const
{
  return this->_tao_obv_static_repository_id ();
}

void
TreeController::_tao_obv_truncatable_repo_ids (Repository_Id_List& ids) const
{
  ids.push_back (this->_tao_obv_static_repository_id ());
}

void
TreeController::_tao_any_destructor (void *_tao_void_pointer)
{
  TreeController *_tao_tmp_pointer =
    static_cast<TreeController *> (_tao_void_pointer);
  ::CORBA::remove_ref (_tao_tmp_pointer);
}

// TAO extension - the virtual _type method.
::CORBA::TypeCode_ptr TreeController::_tao_type (void) const
{
  return ::_tc_TreeController;
}

TreeController::~TreeController (void)
{}

::CORBA::Boolean
TreeController::_tao_marshal_v (TAO_OutputCDR & strm) const
{
  TAO_ChunkInfo ci (this->is_truncatable_ || this->chunking_);
  return this->_tao_marshal__TreeController (strm, ci);
}

::CORBA::Boolean
TreeController::_tao_unmarshal_v (TAO_InputCDR & strm)
{
  TAO_ChunkInfo ci (this->is_truncatable_ || this->chunking_, 1);
  return this->_tao_unmarshal__TreeController (strm,ci);
}

::CORBA::Boolean
TreeController::_tao_match_formal_type (ptrdiff_t formal_type_id) const
{
  return formal_type_id == reinterpret_cast<ptrdiff_t> (TreeController::_downcast);
}

::CORBA::Boolean
TreeController::_tao_unmarshal (
    TAO_InputCDR &strm,
    TreeController *&new_object
  )
{
  ::CORBA::ValueBase *base = 0;
  ::CORBA::Boolean is_indirected = false;
  ::CORBA::Boolean is_null_object = false;
  ::CORBA::Boolean const retval =
    ::CORBA::ValueBase::_tao_unmarshal_pre (
        strm,
        base,
        TreeController::_tao_obv_static_repository_id (),
        is_null_object,
        is_indirected
      );
  
  ::CORBA::ValueBase_var owner (base);

  if (!retval)
    return false;
  
  if (is_null_object)
    return true;
  
  if (!is_indirected && !base->_tao_unmarshal_v (strm))
    return false;
  
  // Now base must point to the unmarshaled object.
  // Align the pointer to the right subobject.
  new_object = TreeController::_downcast (base);
  if (0 == new_object)
    return false;
  
  if (is_indirected)
    new_object->_add_ref ();
  
  owner._retn ();
  return true;
}

::CORBA::ValueBase *
TreeController::_tao_to_value (void)
{
  return this;
}

// TAO_IDL - Generated from
// be/be_visitor_valuetype/valuetype_init_cs.cpp:73

TreeController_init::TreeController_init (void)
{
}

TreeController_init::~TreeController_init (void)
{
}

TreeController_init *
TreeController_init::_downcast ( ::CORBA::ValueFactoryBase *v)
{
  return dynamic_cast< ::TreeController_init * > (v);
}

const char*
TreeController_init::tao_repository_id (void)
{
  return ::TreeController::_tao_obv_static_repository_id ();
}

::CORBA::ValueBase *
TreeController_init::create_for_unmarshal (void)
{
  ::CORBA::ValueBase *ret_val = 0;
  ACE_NEW_THROW_EX (
      ret_val,
      OBV_TreeController,
      ::CORBA::NO_MEMORY ()
    );
  return ret_val;
}

::CORBA::AbstractBase_ptr
TreeController_init::create_for_unmarshal_abstract (void)
{
  ::CORBA::AbstractBase *ret_val = 0;
  ACE_NEW_THROW_EX (
      ret_val,
      OBV_TreeController,
      ::CORBA::NO_MEMORY ()
    );
  return ret_val;
}

// TAO_IDL - Generated from
// be/be_visitor_valuetype/valuetype_obv_cs.cpp:44

OBV_BaseNode::OBV_BaseNode (void)
: require_truncation_ (false)
{}

OBV_BaseNode::OBV_BaseNode (
    ::BaseNode * _tao_init_left,
    ::BaseNode * _tao_init_right)
: require_truncation_ (false)
{
  left (_tao_init_left);
  right (_tao_init_right);
}

OBV_BaseNode::~OBV_BaseNode (void)
{}

::CORBA::ValueBase *
OBV_BaseNode::_copy_value (void)
{
  ::CORBA::ValueBase *ret_val = 0;
  ACE_NEW_THROW_EX (
    ret_val,
    OBV_BaseNode (
      (left () ?
        BaseNode::_downcast (left ()->_copy_value ())
        : 0),
      (right () ?
        BaseNode::_downcast (right ()->_copy_value ())
        : 0)
    ),
    ::CORBA::NO_MEMORY ()
  );
  return ret_val;
}

::CORBA::Boolean
OBV_BaseNode::_tao_marshal__BaseNode (TAO_OutputCDR &strm, TAO_ChunkInfo& ci) const
{
  return _tao_marshal_state (strm, ci);
}

::CORBA::Boolean
OBV_BaseNode::_tao_unmarshal__BaseNode (TAO_InputCDR &strm, TAO_ChunkInfo& ci)
{
  return _tao_unmarshal_state (strm, ci);
}

// TAO_IDL - Generated from
// be/be_visitor_valuetype/field_cs.cpp:430

/// Accessor to set the member.
void
OBV_BaseNode::left (BaseNode* val)
{
  ::CORBA::add_ref (val);
  this->_pd_left = val;
}

/// Retrieve the member
BaseNode *
OBV_BaseNode::left () const
{
  return this->_pd_left.in ();
}

// TAO_IDL - Generated from
// be/be_visitor_valuetype/field_cs.cpp:430

/// Accessor to set the member.
void
OBV_BaseNode::right (BaseNode* val)
{
  ::CORBA::add_ref (val);
  this->_pd_right = val;
}

/// Retrieve the member
BaseNode *
OBV_BaseNode::right () const
{
  return this->_pd_right.in ();
}

// TAO_IDL - Generated from
// be/be_visitor_valuetype/valuetype_obv_cs.cpp:44

OBV_StringNode::OBV_StringNode (void)
: require_truncation_ (false)
{}

OBV_StringNode::OBV_StringNode (
    ::BaseNode * _tao_init_left,
    ::BaseNode * _tao_init_right,
    const char * _tao_init_name)
: require_truncation_ (false)
{
  left (_tao_init_left);
  right (_tao_init_right);
  name (_tao_init_name);
}

OBV_StringNode::~OBV_StringNode (void)
{}

::CORBA::Boolean
OBV_StringNode::_tao_marshal__StringNode (TAO_OutputCDR &strm, TAO_ChunkInfo& ci) const
{
  return _tao_marshal_state (strm, ci);
}

::CORBA::Boolean
OBV_StringNode::_tao_unmarshal__StringNode (TAO_InputCDR &strm, TAO_ChunkInfo& ci)
{
  return _tao_unmarshal_state (strm, ci);
}

// TAO_IDL - Generated from
// be/be_visitor_valuetype/field_cs.cpp:834

/// Accessor to set the member.
void
OBV_StringNode::name (char *val)
{
  this->_pd_name = (val);
}

/// Accessor to set the member.
void
OBV_StringNode::name (const char *val)
{
  // Set the value.
  this->_pd_name = ::CORBA::string_dup (val);
}

/// Accessor to set the member.
void
OBV_StringNode::name (const ::CORBA::String_var &val)
{
  ::CORBA::String_var name_var = val;
  this->_pd_name = name_var._retn ();
}

const char *
OBV_StringNode::name (void) const // get method
{
  return this->_pd_name;
}

// TAO_IDL - Generated from
// be/be_visitor_valuetype/valuetype_obv_cs.cpp:44

OBV_TreeController::OBV_TreeController (void)
: require_truncation_ (false)
{}

OBV_TreeController::OBV_TreeController (
    ::BaseNode * _tao_init_root)
: require_truncation_ (false)
{
  root (_tao_init_root);
}

OBV_TreeController::~OBV_TreeController (void)
{}

::CORBA::ValueBase *
OBV_TreeController::_copy_value (void)
{
  ::CORBA::ValueBase *ret_val = 0;
  ACE_NEW_THROW_EX (
    ret_val,
    OBV_TreeController (
      (root () ?
        BaseNode::_downcast (root ()->_copy_value ())
        : 0)
    ),
    ::CORBA::NO_MEMORY ()
  );
  return ret_val;
}

::CORBA::Boolean
OBV_TreeController::_tao_marshal__TreeController (TAO_OutputCDR &strm, TAO_ChunkInfo& ci) const
{
  return _tao_marshal_state (strm, ci);
}

::CORBA::Boolean
OBV_TreeController::_tao_unmarshal__TreeController (TAO_InputCDR &strm, TAO_ChunkInfo& ci)
{
  return _tao_unmarshal_state (strm, ci);
}

// TAO_IDL - Generated from
// be/be_visitor_valuetype/field_cs.cpp:430

/// Accessor to set the member.
void
OBV_TreeController::root (BaseNode* val)
{
  ::CORBA::add_ref (val);
  this->_pd_root = val;
}

/// Retrieve the member
BaseNode *
OBV_TreeController::root () const
{
  return this->_pd_root.in ();
}

void
OBV_TreeController::_add_ref (void)
{
  this->::CORBA::DefaultValueRefCountBase::_add_ref ();
}

void
OBV_TreeController::_remove_ref (void)
{
  this->::CORBA::DefaultValueRefCountBase::_remove_ref ();
}

// TAO_IDL - Generated from
// be/be_visitor_exception/any_op_cs.cpp:38
TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Dual_Impl_T<BadInput>::demarshal_value (TAO_InputCDR & cdr)
  {
    ::CORBA::String_var id;

    if (!(cdr >> id.out ()))
      {
        return false;
      }
    
    try
      {
        this->value_->_tao_decode (cdr);
      }
    catch (const ::CORBA::Exception &)
      {
        return false;
      }

    return true;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



// Copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    const BadInput &_tao_elem)
{
  TAO::Any_Dual_Impl_T<BadInput>::insert_copy (
      _tao_any,
      BadInput::_tao_any_destructor,
      _tc_BadInput,
      _tao_elem
    );
}

// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    BadInput *_tao_elem)
{
  TAO::Any_Dual_Impl_T<BadInput>::insert (
      _tao_any,
      BadInput::_tao_any_destructor,
      _tc_BadInput,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    BadInput *&_tao_elem)
{
  return _tao_any >>= const_cast<
      const BadInput *&> (
      _tao_elem);
}

// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const BadInput *&_tao_elem
  )
{
  return
    TAO::Any_Dual_Impl_T<BadInput>::extract (
        _tao_any,
        BadInput::_tao_any_destructor,
        _tc_BadInput,
        _tao_elem);
}
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_interface/any_op_cs.cpp:38
TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<base>::to_abstract_base (
      ::CORBA::AbstractBase_ptr &_tao_elem) const
  {
    _tao_elem = ::CORBA::AbstractBase::_duplicate (this->value_);
    return true;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



/// Copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    base_ptr _tao_elem)
{
  base_ptr _tao_objptr =
    base::_duplicate (_tao_elem);
  _tao_any <<= &_tao_objptr;
}

/// Non-copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    base_ptr *_tao_elem)
{
  TAO::Any_Impl_T<base>::insert (
      _tao_any,
      base::_tao_any_destructor,
      _tc_base,
      *_tao_elem);
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    base_ptr &_tao_elem)
{
  return
    TAO::Any_Impl_T<base>::extract (
        _tao_any,
        base::_tao_any_destructor,
        _tc_base,
        _tao_elem);
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_interface/any_op_cs.cpp:38
TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<foo>::to_object (
      ::CORBA::Object_ptr &_tao_elem) const
  {
    _tao_elem = ::CORBA::Object::_duplicate (this->value_);
    return true;
  }
}

namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<foo>::to_abstract_base (
      ::CORBA::AbstractBase_ptr &_tao_elem) const
  {
    _tao_elem = ::CORBA::AbstractBase::_duplicate (this->value_);
    return true;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



/// Copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    foo_ptr _tao_elem)
{
  foo_ptr _tao_objptr =
    foo::_duplicate (_tao_elem);
  _tao_any <<= &_tao_objptr;
}

/// Non-copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    foo_ptr *_tao_elem)
{
  TAO::Any_Impl_T<foo>::insert (
      _tao_any,
      foo::_tao_any_destructor,
      _tc_foo,
      *_tao_elem);
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    foo_ptr &_tao_elem)
{
  return
    TAO::Any_Impl_T<foo>::extract (
        _tao_any,
        foo::_tao_any_destructor,
        _tc_foo,
        _tao_elem);
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_interface/any_op_cs.cpp:38
TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<passer>::to_object (
      ::CORBA::Object_ptr &_tao_elem) const
  {
    _tao_elem = ::CORBA::Object::_duplicate (this->value_);
    return true;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



/// Copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    passer_ptr _tao_elem)
{
  passer_ptr _tao_objptr =
    passer::_duplicate (_tao_elem);
  _tao_any <<= &_tao_objptr;
}

/// Non-copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    passer_ptr *_tao_elem)
{
  TAO::Any_Impl_T<passer>::insert (
      _tao_any,
      passer::_tao_any_destructor,
      _tc_passer,
      *_tao_elem);
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    passer_ptr &_tao_elem)
{
  return
    TAO::Any_Impl_T<passer>::extract (
        _tao_any,
        passer::_tao_any_destructor,
        _tc_passer,
        _tao_elem);
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_valuetype/any_op_cs.cpp:45
TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<BaseNode>::to_value (
      ::CORBA::ValueBase *&_tao_elem
    ) const
  {
    ::CORBA::add_ref (this->value_);
    _tao_elem = this->value_;
    return true;
  }
}


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    BaseNode *_tao_elem
  )
{
  #ifdef TAO_VALUETYPE_COPYING_ANY_INSERTION_USES_COPY_VALUE
    BaseNode *_tao_copy =
      _tao_elem ?
        BaseNode::_downcast (_tao_elem->_copy_value ())
        : 0;
    _tao_any <<= &_tao_copy;
  #else
    ::CORBA::add_ref (_tao_elem);
    _tao_any <<= &_tao_elem;
  #endif
}

// Non-copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    BaseNode **_tao_elem
  )
{
  TAO::Any_Impl_T<BaseNode>::insert (
      _tao_any,
      BaseNode::_tao_any_destructor,
      _tc_BaseNode,
      *_tao_elem
    );
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    BaseNode *&_tao_elem
  )
{
  return
    TAO::Any_Impl_T<BaseNode>::extract (
        _tao_any,
        BaseNode::_tao_any_destructor,
        _tc_BaseNode,
        _tao_elem
      );
}


TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_valuetype/any_op_cs.cpp:45
TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<StringNode>::to_value (
      ::CORBA::ValueBase *&_tao_elem
    ) const
  {
    ::CORBA::add_ref (this->value_);
    _tao_elem = this->value_;
    return true;
  }
}


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    StringNode *_tao_elem
  )
{
  #ifdef TAO_VALUETYPE_COPYING_ANY_INSERTION_USES_COPY_VALUE
    StringNode *_tao_copy =
      _tao_elem ?
        StringNode::_downcast (_tao_elem->_copy_value ())
        : 0;
    _tao_any <<= &_tao_copy;
  #else
    ::CORBA::add_ref (_tao_elem);
    _tao_any <<= &_tao_elem;
  #endif
}

// Non-copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    StringNode **_tao_elem
  )
{
  TAO::Any_Impl_T<StringNode>::insert (
      _tao_any,
      StringNode::_tao_any_destructor,
      _tc_StringNode,
      *_tao_elem
    );
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    StringNode *&_tao_elem
  )
{
  return
    TAO::Any_Impl_T<StringNode>::extract (
        _tao_any,
        StringNode::_tao_any_destructor,
        _tc_StringNode,
        _tao_elem
      );
}


TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_valuetype/any_op_cs.cpp:45
TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<TreeController>::to_value (
      ::CORBA::ValueBase *&_tao_elem
    ) const
  {
    ::CORBA::add_ref (this->value_);
    _tao_elem = this->value_;
    return true;
  }
}


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    TreeController *_tao_elem
  )
{
  #ifdef TAO_VALUETYPE_COPYING_ANY_INSERTION_USES_COPY_VALUE
    TreeController *_tao_copy =
      _tao_elem ?
        TreeController::_downcast (_tao_elem->_copy_value ())
        : 0;
    _tao_any <<= &_tao_copy;
  #else
    ::CORBA::add_ref (_tao_elem);
    _tao_any <<= &_tao_elem;
  #endif
}

// Non-copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    TreeController **_tao_elem
  )
{
  TAO::Any_Impl_T<TreeController>::insert (
      _tao_any,
      TreeController::_tao_any_destructor,
      _tc_TreeController,
      *_tao_elem
    );
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    TreeController *&_tao_elem
  )
{
  return
    TAO::Any_Impl_T<TreeController>::extract (
        _tao_any,
        TreeController::_tao_any_destructor,
        _tc_TreeController,
        _tao_elem
      );
}


TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_exception/cdr_op_cs.cpp:48
TAO_BEGIN_VERSIONED_NAMESPACE_DECL



::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const BadInput &_tao_aggregate
  )
{
  // First marshal the repository ID.
  if (strm << _tao_aggregate._rep_id ())
    {
      // Now marshal the members (if any).
      return (
        (strm << _tao_aggregate.message.in ())
       );
    }
  else
    {
      return false;
    }
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    BadInput &_tao_aggregate
  )
{
  // Demarshal the members.
  return (
    (strm >> _tao_aggregate.message.out ())
  );
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_interface/cdr_op_cs.cpp:51

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const base_ptr _tao_objref)
{
  ::CORBA::AbstractBase_ptr _tao_corba_obj = _tao_objref;
  return (strm << _tao_corba_obj);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    base_ptr &_tao_objref)
{
  ::CORBA::AbstractBase_var obj;

  if (!(strm >> obj.inout ()))
    {
      return false;
    }
  
  typedef ::base RHS_SCOPED_NAME;

  // Narrow to the right type.
  _tao_objref =
    TAO::AbstractBase_Narrow_Utils<RHS_SCOPED_NAME>::unchecked_narrow (obj.in ());
    
  return true;
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_interface/cdr_op_cs.cpp:51

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const foo_ptr _tao_objref)
{
  ::CORBA::Object_ptr _tao_corba_obj = _tao_objref;
  return (strm << _tao_corba_obj);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    foo_ptr &_tao_objref)
{
  ::CORBA::Object_var obj;

  if (!(strm >> obj.inout ()))
    {
      return false;
    }
  
  typedef ::foo RHS_SCOPED_NAME;

  // Narrow to the right type.
  _tao_objref =
    TAO::Narrow_Utils<RHS_SCOPED_NAME>::unchecked_narrow (obj.in ());
    
  return true;
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_interface/cdr_op_cs.cpp:51

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const passer_ptr _tao_objref)
{
  ::CORBA::Object_ptr _tao_corba_obj = _tao_objref;
  return (strm << _tao_corba_obj);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    passer_ptr &_tao_objref)
{
  ::CORBA::Object_var obj;

  if (!(strm >> obj.inout ()))
    {
      return false;
    }
  
  typedef ::passer RHS_SCOPED_NAME;

  // Narrow to the right type.
  _tao_objref =
    TAO::Narrow_Utils<RHS_SCOPED_NAME>::unchecked_narrow (obj.in ());
    
  return true;
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_valuetype.cpp:512

void
CORBA::add_ref (BaseNode * vt)
{
  if (vt != 0)
    {
      vt->_add_ref ();
    }
}

void
CORBA::remove_ref (BaseNode * vt)
{
  if (vt != 0)
    {
      vt->_remove_ref ();
    }
}

// TAO_IDL - Generated from
// be/be_visitor_valuetype/cdr_op_cs.cpp:60


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean
operator<< (
    TAO_OutputCDR &strm,
    const BaseNode *_tao_valuetype
  )
{
  return
    ::CORBA::ValueBase::_tao_marshal (
        strm,
        _tao_valuetype,
        reinterpret_cast<ptrdiff_t> (&BaseNode::_downcast)
      );
}

::CORBA::Boolean
operator>> (
    TAO_InputCDR &strm,
    BaseNode *&_tao_valuetype
  )
{
  return BaseNode::_tao_unmarshal (strm, _tao_valuetype);
}


TAO_END_VERSIONED_NAMESPACE_DECL

// TAO_IDL - Generated from
// be/be_visitor_valuetype/marshal_cs.cpp:33

::CORBA::Boolean
OBV_BaseNode::_tao_marshal_state (TAO_OutputCDR &strm, TAO_ChunkInfo&ci) const
{
  if (! ci.start_chunk (strm))
    return false;
  
  CORBA::Boolean const ret = 
      (strm << _pd_left.in ()) &&
      (strm << _pd_right.in ());
  if ( ! ret) 
    return false; 
  
  if (! ci.end_chunk (strm))
    return false;
  
  return true;
}

::CORBA::Boolean
OBV_BaseNode::_tao_unmarshal_state (TAO_InputCDR &strm, TAO_ChunkInfo&ci)
{
  if (!ci.handle_chunking (strm))
    return false;
  
  CORBA::Boolean const ret = 
      (strm >> _pd_left.out ()) &&
      (strm >> _pd_right.out ());
  if (!ret) 
    return false; 
  
  if (this->require_truncation_)
    return ci.skip_chunks (strm);
  
  else
    return ci.handle_chunking (strm);
  
  
}

void
OBV_BaseNode::truncation_hook (void)
{
  this->require_truncation_ = true;
}



// TAO_IDL - Generated from
// be/be_valuetype.cpp:512

void
CORBA::add_ref (StringNode * vt)
{
  if (vt != 0)
    {
      vt->_add_ref ();
    }
}

void
CORBA::remove_ref (StringNode * vt)
{
  if (vt != 0)
    {
      vt->_remove_ref ();
    }
}

// TAO_IDL - Generated from
// be/be_visitor_valuetype/cdr_op_cs.cpp:60


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean
operator<< (
    TAO_OutputCDR &strm,
    const StringNode *_tao_valuetype
  )
{
  return
    ::CORBA::ValueBase::_tao_marshal (
        strm,
        _tao_valuetype,
        reinterpret_cast<ptrdiff_t> (&StringNode::_downcast)
      );
}

::CORBA::Boolean
operator>> (
    TAO_InputCDR &strm,
    StringNode *&_tao_valuetype
  )
{
  return StringNode::_tao_unmarshal (strm, _tao_valuetype);
}


TAO_END_VERSIONED_NAMESPACE_DECL

// TAO_IDL - Generated from
// be/be_visitor_valuetype/marshal_cs.cpp:33

::CORBA::Boolean
OBV_StringNode::_tao_marshal_state (TAO_OutputCDR &strm, TAO_ChunkInfo&ci) const
{
  if (! ci.start_chunk (strm))
    return false;
  
  if (! this->_tao_marshal__BaseNode (strm, ci))
    {
      return false;
    }
  
  if (! ci.start_chunk (strm))
    return false;
  
  CORBA::Boolean const ret = 
      (strm << _pd_name.in ());
  if ( ! ret) 
    return false; 
  
  if (! ci.end_chunk (strm))
    return false;
  
  if (! ci.end_chunk (strm))
    return false;
  
  return true;
}

::CORBA::Boolean
OBV_StringNode::_tao_unmarshal_state (TAO_InputCDR &strm, TAO_ChunkInfo&ci)
{
  if (!ci.handle_chunking (strm))
    return false;
  
  if (!this->_tao_unmarshal__BaseNode (strm, ci))
    {
      return false;
    }
  
  if (!ci.handle_chunking (strm))
    return false;
  
  CORBA::Boolean const ret = 
      (strm >> _pd_name.out ());
  if (!ret) 
    return false; 
  
  if (this->require_truncation_)
    return ci.skip_chunks (strm);
  
  else
    return ci.handle_chunking (strm);
  
  
}

void
OBV_StringNode::truncation_hook (void)
{
  this->require_truncation_ = true;
}



// TAO_IDL - Generated from
// be/be_valuetype.cpp:512

void
CORBA::add_ref (TreeController * vt)
{
  if (vt != 0)
    {
      vt->_add_ref ();
    }
}

void
CORBA::remove_ref (TreeController * vt)
{
  if (vt != 0)
    {
      vt->_remove_ref ();
    }
}

// TAO_IDL - Generated from
// be/be_visitor_valuetype/cdr_op_cs.cpp:60


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean
operator<< (
    TAO_OutputCDR &strm,
    const TreeController *_tao_valuetype
  )
{
  return
    ::CORBA::ValueBase::_tao_marshal (
        strm,
        _tao_valuetype,
        reinterpret_cast<ptrdiff_t> (&TreeController::_downcast)
      );
}

::CORBA::Boolean
operator>> (
    TAO_InputCDR &strm,
    TreeController *&_tao_valuetype
  )
{
  return TreeController::_tao_unmarshal (strm, _tao_valuetype);
}


TAO_END_VERSIONED_NAMESPACE_DECL

// TAO_IDL - Generated from
// be/be_visitor_valuetype/marshal_cs.cpp:33

::CORBA::Boolean
OBV_TreeController::_tao_marshal_state (TAO_OutputCDR &strm, TAO_ChunkInfo&ci) const
{
  if (! ci.start_chunk (strm))
    return false;
  
  CORBA::Boolean const ret = 
      (strm << _pd_root.in ());
  if ( ! ret) 
    return false; 
  
  if (! ci.end_chunk (strm))
    return false;
  
  return true;
}

::CORBA::Boolean
OBV_TreeController::_tao_unmarshal_state (TAO_InputCDR &strm, TAO_ChunkInfo&ci)
{
  if (!ci.handle_chunking (strm))
    return false;
  
  CORBA::Boolean const ret = 
      (strm >> _pd_root.out ());
  if (!ret) 
    return false; 
  
  if (this->require_truncation_)
    return ci.skip_chunks (strm);
  
  else
    return ci.handle_chunking (strm);
  
  
}

void
OBV_TreeController::truncation_hook (void)
{
  this->require_truncation_ = true;
}



