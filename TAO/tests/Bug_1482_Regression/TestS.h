// -*- C++ -*-
/**
 * Code generated by the The ACE ORB (TAO) IDL Compiler v2.4.1
 * TAO and the TAO IDL Compiler have been developed by:
 *       Center for Distributed Object Computing
 *       Washington University
 *       St. Louis, MO
 *       USA
 *       http://www.cs.wustl.edu/~schmidt/doc-center.html
 * and
 *       Distributed Object Computing Laboratory
 *       University of California at Irvine
 *       Irvine, CA
 *       USA
 * and
 *       Institute for Software Integrated Systems
 *       Vanderbilt University
 *       Nashville, TN
 *       USA
 *       http://www.isis.vanderbilt.edu/
 *
 * Information about TAO is available at:
 *     http://www.dre.vanderbilt.edu/~schmidt/TAO.html
 **/

// TAO_IDL - Generated from
// be/be_codegen.cpp:458

#ifndef _TAO_IDL_TESTS_TDJFIG_H_
#define _TAO_IDL_TESTS_TDJFIG_H_

#include /**/ "ace/pre.h"

#include "TestC.h"
#include "tao/PortableServer/Basic_SArguments.h"
#include "tao/PortableServer/Special_Basic_SArguments.h"
#include "tao/PortableServer/Fixed_Size_SArgument_T.h"
#include "tao/PortableServer/Var_Size_SArgument_T.h"
#include "tao/PortableServer/Object_SArg_Traits.h"
#include "tao/PortableServer/UB_String_SArguments.h"
#include "tao/PortableServer/Object_SArg_Traits.h"
#include "tao/PortableServer/get_arg.h"
#include "tao/Special_Basic_Arguments.h"
#include "tao/UB_String_Arguments.h"

#if !defined (ACE_LACKS_PRAGMA_ONCE)
# pragma once
#endif /* ACE_LACKS_PRAGMA_ONCE */

#include "tao/Messaging/MessagingS.h"
#include "tao/PortableServer/PortableServer.h"
#include "tao/PortableServer/Servant_Base.h"
#include "tao/Messaging/AMH_Response_Handler.h"

// TAO_IDL - Generated from
// be/be_visitor_arg_traits.cpp:66

TAO_BEGIN_VERSIONED_NAMESPACE_DECL


// Arg traits specializations.
namespace TAO
{

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:306

#if !defined (_MESSAGING_EXCEPTIONHOLDER__SARG_TRAITS_)
#define _MESSAGING_EXCEPTIONHOLDER__SARG_TRAITS_

  template<>
  class SArg_Traits< ::Messaging::ExceptionHolder>
    : public
        Object_SArg_Traits_T<
            ::Messaging::ExceptionHolder *,
            ::Messaging::ExceptionHolder_var,
            ::Messaging::ExceptionHolder_out,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:145

#if !defined (_TEST_HELLO__SARG_TRAITS_)
#define _TEST_HELLO__SARG_TRAITS_

  template<>
  class  SArg_Traits< ::Test::Hello>
    : public
        Object_SArg_Traits_T<
            ::Test::Hello_ptr,
            ::Test::Hello_var,
            ::Test::Hello_out,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:306

#if !defined (_TEST_AMH_HELLOEXCEPTIONHOLDER__SARG_TRAITS_)
#define _TEST_AMH_HELLOEXCEPTIONHOLDER__SARG_TRAITS_

  template<>
  class SArg_Traits< ::Test::AMH_HelloExceptionHolder>
    : public
        Object_SArg_Traits_T<
            ::Test::AMH_HelloExceptionHolder *,
            ::Test::AMH_HelloExceptionHolder_var,
            ::Test::AMH_HelloExceptionHolder_out,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:145

#if !defined (_TEST_AMI_HELLOHANDLER__SARG_TRAITS_)
#define _TEST_AMI_HELLOHANDLER__SARG_TRAITS_

  template<>
  class  SArg_Traits< ::Test::AMI_HelloHandler>
    : public
        Object_SArg_Traits_T<
            ::Test::AMI_HelloHandler_ptr,
            ::Test::AMI_HelloHandler_var,
            ::Test::AMI_HelloHandler_out,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

#endif /* end #if !defined */
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_module/module_sh.cpp:35

namespace POA_Test
{
  

  // TAO_IDL - Generated from
  // be/be_visitor_interface/amh_sh.cpp:46

  class AMH_Hello;
  typedef AMH_Hello *AMH_Hello_ptr;

  class  AMH_Hello
    : public virtual PortableServer::ServantBase
  {
  protected:
    AMH_Hello (void);
  
  public:
    AMH_Hello (const AMH_Hello& rhs);
    virtual ~AMH_Hello (void);


    virtual ::CORBA::Boolean _is_a (const char* logical_type_id);

    virtual void _dispatch (
        TAO_ServerRequest &req,
        TAO::Portable_Server::Servant_Upcall *_servant_upcall);
    
    Test::Hello *_this (void);

  virtual const char* _interface_repository_id (void) const;

  // TAO_IDL - Generated from
  // be/be_visitor_operation/amh_sh.cpp:127

  static void next_prime_skel (
      TAO_ServerRequest &_tao_req,
      TAO::Portable_Server::Servant_Upcall *_tao_obj,
      TAO_ServantBase *_tao_servant_upcall);
    
  virtual void next_prime (
      Test::AMH_HelloResponseHandler_ptr _tao_rh
    ) = 0;
  
};

// TAO_IDL - Generated from
// be/be_visitor_interface/interface_sh.cpp:73

class Hello;
typedef Hello *Hello_ptr;

class  Hello
  : public virtual PortableServer::ServantBase
{
protected:
  Hello (void);

public:
  /// Useful for template programming.
  typedef ::Test::Hello _stub_type;
  typedef ::Test::Hello_ptr _stub_ptr_type;
  typedef ::Test::Hello_var _stub_var_type;

  Hello (const Hello& rhs);
  virtual ~Hello (void);

  virtual ::CORBA::Boolean _is_a (const char* logical_type_id);

  virtual void _dispatch (
      TAO_ServerRequest & req,
      TAO::Portable_Server::Servant_Upcall *servant_upcall);
  
  ::Test::Hello *_this (void);
  
  virtual const char* _interface_repository_id (void) const;

  // TAO_IDL - Generated from
  // be/be_visitor_operation/operation_sh.cpp:36

  virtual ::CORBA::ULong next_prime (
    void) = 0;

  static void next_prime_skel (
      TAO_ServerRequest &server_request,
      TAO::Portable_Server::Servant_Upcall *servant_upcall,
      TAO_ServantBase *servant);
};

// TAO_IDL - Generated from
// be/be_visitor_interface/amh_rh_sh.cpp:50

class TAO_AMH_HelloResponseHandler;
typedef TAO_AMH_HelloResponseHandler *TAO_AMH_HelloResponseHandler_ptr;

class  TAO_AMH_HelloResponseHandler
  : public TAO_AMH_Response_Handler,
    public ::Test::AMH_HelloResponseHandler
{
public:
  TAO_AMH_HelloResponseHandler (void);
  virtual ~TAO_AMH_HelloResponseHandler (void);

  // TAO_IDL - Generated from
  // be/be_visitor_operation/amh_rh_sh.cpp:60

  virtual void next_prime (
    ::CORBA::ULong return_value);

  // TAO_IDL - Generated from
  // be/be_visitor_operation/amh_rh_sh.cpp:60

  virtual void next_prime_excep (
    ::Test::AMH_HelloExceptionHolder * holder);
};

// TAO_IDL - Generated from
// be/be_visitor_interface/interface_sh.cpp:73

class AMI_HelloHandler;
typedef AMI_HelloHandler *AMI_HelloHandler_ptr;

class  AMI_HelloHandler
  : public virtual POA_Messaging::ReplyHandler
{
protected:
  AMI_HelloHandler (void);

public:
  /// Useful for template programming.
  typedef ::Test::AMI_HelloHandler _stub_type;
  typedef ::Test::AMI_HelloHandler_ptr _stub_ptr_type;
  typedef ::Test::AMI_HelloHandler_var _stub_var_type;

  AMI_HelloHandler (const AMI_HelloHandler& rhs);
  virtual ~AMI_HelloHandler (void);

  virtual ::CORBA::Boolean _is_a (const char* logical_type_id);

  virtual void _dispatch (
      TAO_ServerRequest & req,
      TAO::Portable_Server::Servant_Upcall *servant_upcall);
  
  ::Test::AMI_HelloHandler *_this (void);
  
  virtual const char* _interface_repository_id (void) const;

  // TAO_IDL - Generated from
  // be/be_visitor_operation/operation_sh.cpp:36

  virtual void next_prime (
    ::CORBA::ULong ami_return_val) = 0;

  static void next_prime_skel (
      TAO_ServerRequest &server_request,
      TAO::Portable_Server::Servant_Upcall *servant_upcall,
      TAO_ServantBase *servant);

  // TAO_IDL - Generated from
  // be/be_visitor_operation/operation_sh.cpp:36

  virtual void next_prime_excep (
    ::Messaging::ExceptionHolder * excep_holder) = 0;

  static void next_prime_excep_skel (
      TAO_ServerRequest &server_request,
      TAO::Portable_Server::Servant_Upcall *servant_upcall,
      TAO_ServantBase *servant);
};

// TAO_IDL - Generated from
// be/be_visitor_module/module_sh.cpp:66

} // module Test

#include /**/ "ace/post.h"

#endif /* ifndef */

