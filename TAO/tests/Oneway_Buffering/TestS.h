// -*- C++ -*-
/**
 * Code generated by the The ACE ORB (TAO) IDL Compiler v2.4.1
 * TAO and the TAO IDL Compiler have been developed by:
 *       Center for Distributed Object Computing
 *       Washington University
 *       St. Louis, MO
 *       USA
 *       http://www.cs.wustl.edu/~schmidt/doc-center.html
 * and
 *       Distributed Object Computing Laboratory
 *       University of California at Irvine
 *       Irvine, CA
 *       USA
 * and
 *       Institute for Software Integrated Systems
 *       Vanderbilt University
 *       Nashville, TN
 *       USA
 *       http://www.isis.vanderbilt.edu/
 *
 * Information about TAO is available at:
 *     http://www.dre.vanderbilt.edu/~schmidt/TAO.html
 **/

// TAO_IDL - Generated from
// be/be_codegen.cpp:458

#ifndef _TAO_IDL_TESTS_VSRNKB_H_
#define _TAO_IDL_TESTS_VSRNKB_H_

#include /**/ "ace/pre.h"

#include "TestC.h"
#include "tao/PortableServer/Basic_SArguments.h"
#include "tao/PortableServer/Special_Basic_SArguments.h"
#include "tao/PortableServer/Fixed_Size_SArgument_T.h"
#include "tao/PortableServer/Var_Size_SArgument_T.h"
#include "tao/PortableServer/Object_SArg_Traits.h"
#include "tao/PortableServer/UB_String_SArguments.h"
#include "tao/PortableServer/get_arg.h"
#include "tao/Special_Basic_Arguments.h"
#include "tao/UB_String_Arguments.h"

#if !defined (ACE_LACKS_PRAGMA_ONCE)
# pragma once
#endif /* ACE_LACKS_PRAGMA_ONCE */

#include "tao/PortableServer/PortableServer.h"
#include "tao/PortableServer/Servant_Base.h"

// TAO_IDL - Generated from
// be/be_visitor_arg_traits.cpp:66

TAO_BEGIN_VERSIONED_NAMESPACE_DECL


// Arg traits specializations.
namespace TAO
{

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:683

  template<>
  class SArg_Traits< ::Test::Payload>
    : public
        Var_Size_SArg_Traits_T<
            ::Test::Payload,
            TAO::Any_Insert_Policy_Noop
          >
  {
  };

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:145

#if !defined (_TEST_ONEWAY_BUFFERING__SARG_TRAITS_)
#define _TEST_ONEWAY_BUFFERING__SARG_TRAITS_

  template<>
  class  SArg_Traits< ::Test::Oneway_Buffering>
    : public
        Object_SArg_Traits_T<
            ::Test::Oneway_Buffering_ptr,
            ::Test::Oneway_Buffering_var,
            ::Test::Oneway_Buffering_out,
            TAO::Any_Insert_Policy_Noop
          >
  {
  };

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:145

#if !defined (_TEST_ONEWAY_BUFFERING_ADMIN__SARG_TRAITS_)
#define _TEST_ONEWAY_BUFFERING_ADMIN__SARG_TRAITS_

  template<>
  class  SArg_Traits< ::Test::Oneway_Buffering_Admin>
    : public
        Object_SArg_Traits_T<
            ::Test::Oneway_Buffering_Admin_ptr,
            ::Test::Oneway_Buffering_Admin_var,
            ::Test::Oneway_Buffering_Admin_out,
            TAO::Any_Insert_Policy_Noop
          >
  {
  };

#endif /* end #if !defined */
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_module/module_sh.cpp:35

namespace POA_Test
{


  // TAO_IDL - Generated from
  // be/be_visitor_interface/interface_sh.cpp:73

  class Oneway_Buffering;
  typedef Oneway_Buffering *Oneway_Buffering_ptr;

  class  Oneway_Buffering
    : public virtual PortableServer::ServantBase
  {
  protected:
    Oneway_Buffering (void);

  public:
    /// Useful for template programming.
    typedef ::Test::Oneway_Buffering _stub_type;
    typedef ::Test::Oneway_Buffering_ptr _stub_ptr_type;
    typedef ::Test::Oneway_Buffering_var _stub_var_type;

    Oneway_Buffering (const Oneway_Buffering& rhs);
    virtual ~Oneway_Buffering (void);

    virtual ::CORBA::Boolean _is_a (const char* logical_type_id);

    virtual void _dispatch (
        TAO_ServerRequest & req,
        TAO::Portable_Server::Servant_Upcall *servant_upcall);

    ::Test::Oneway_Buffering *_this (void);

    virtual const char* _interface_repository_id (void) const;

    // TAO_IDL - Generated from
    // be/be_visitor_operation/operation_sh.cpp:36

    virtual void receive_data (
      const ::Test::Payload & the_payload) = 0;

    static void receive_data_skel (
        TAO_ServerRequest &server_request,
        TAO::Portable_Server::Servant_Upcall *servant_upcall,
        TAO_ServantBase *servant);

    // TAO_IDL - Generated from
    // be/be_visitor_operation/operation_sh.cpp:36

    virtual void flush (
      void) = 0;

    static void flush_skel (
        TAO_ServerRequest &server_request,
        TAO::Portable_Server::Servant_Upcall *servant_upcall,
        TAO_ServantBase *servant);

    // TAO_IDL - Generated from
    // be/be_visitor_operation/operation_sh.cpp:36

    virtual void sync (
      void) = 0;

    static void sync_skel (
        TAO_ServerRequest &server_request,
        TAO::Portable_Server::Servant_Upcall *servant_upcall,
        TAO_ServantBase *servant);

    // TAO_IDL - Generated from
    // be/be_visitor_operation/operation_sh.cpp:36

    virtual void shutdown (
      void) = 0;

    static void shutdown_skel (
        TAO_ServerRequest &server_request,
        TAO::Portable_Server::Servant_Upcall *servant_upcall,
        TAO_ServantBase *servant);
  };

  // TAO_IDL - Generated from
  // be/be_visitor_interface/interface_sh.cpp:73

  class Oneway_Buffering_Admin;
  typedef Oneway_Buffering_Admin *Oneway_Buffering_Admin_ptr;

  class  Oneway_Buffering_Admin
    : public virtual PortableServer::ServantBase
  {
  protected:
    Oneway_Buffering_Admin (void);

  public:
    /// Useful for template programming.
    typedef ::Test::Oneway_Buffering_Admin _stub_type;
    typedef ::Test::Oneway_Buffering_Admin_ptr _stub_ptr_type;
    typedef ::Test::Oneway_Buffering_Admin_var _stub_var_type;

    Oneway_Buffering_Admin (const Oneway_Buffering_Admin& rhs);
    virtual ~Oneway_Buffering_Admin (void);

    virtual ::CORBA::Boolean _is_a (const char* logical_type_id);

    virtual void _dispatch (
        TAO_ServerRequest & req,
        TAO::Portable_Server::Servant_Upcall *servant_upcall);

    ::Test::Oneway_Buffering_Admin *_this (void);

    virtual const char* _interface_repository_id (void) const;

    // TAO_IDL - Generated from
    // be/be_visitor_operation/operation_sh.cpp:36

    virtual ::CORBA::ULong request_count (
      ::CORBA::ULong expected_count) = 0;

    static void request_count_skel (
        TAO_ServerRequest &server_request,
        TAO::Portable_Server::Servant_Upcall *servant_upcall,
        TAO_ServantBase *servant);

    // TAO_IDL - Generated from
    // be/be_visitor_operation/operation_sh.cpp:36

    virtual ::CORBA::ULong bytes_received_count (
      ::CORBA::ULong expected_count) = 0;

    static void bytes_received_count_skel (
        TAO_ServerRequest &server_request,
        TAO::Portable_Server::Servant_Upcall *servant_upcall,
        TAO_ServantBase *servant);

    // TAO_IDL - Generated from
    // be/be_visitor_operation/operation_sh.cpp:36

    virtual void request_received (
      ::CORBA::ULong payload_length) = 0;

    static void request_received_skel (
        TAO_ServerRequest &server_request,
        TAO::Portable_Server::Servant_Upcall *servant_upcall,
        TAO_ServantBase *servant);

    // TAO_IDL - Generated from
    // be/be_visitor_operation/operation_sh.cpp:36

    virtual void flush (
      void) = 0;

    static void flush_skel (
        TAO_ServerRequest &server_request,
        TAO::Portable_Server::Servant_Upcall *servant_upcall,
        TAO_ServantBase *servant);

    // TAO_IDL - Generated from
    // be/be_visitor_operation/operation_sh.cpp:36

    virtual void shutdown (
      void) = 0;

    static void shutdown_skel (
        TAO_ServerRequest &server_request,
        TAO::Portable_Server::Servant_Upcall *servant_upcall,
        TAO_ServantBase *servant);
  };

// TAO_IDL - Generated from
// be/be_visitor_module/module_sh.cpp:66

} // module Test

#include /**/ "ace/post.h"

#endif /* ifndef */

