// -*- C++ -*-
/**
 * Code generated by the The ACE ORB (TAO) IDL Compiler v2.4.1
 * TAO and the TAO IDL Compiler have been developed by:
 *       Center for Distributed Object Computing
 *       Washington University
 *       St. Louis, MO
 *       USA
 *       http://www.cs.wustl.edu/~schmidt/doc-center.html
 * and
 *       Distributed Object Computing Laboratory
 *       University of California at Irvine
 *       Irvine, CA
 *       USA
 * and
 *       Institute for Software Integrated Systems
 *       Vanderbilt University
 *       Nashville, TN
 *       USA
 *       http://www.isis.vanderbilt.edu/
 *
 * Information about TAO is available at:
 *     http://www.dre.vanderbilt.edu/~schmidt/TAO.html
 **/

// TAO_IDL - Generated from
// be/be_codegen.cpp:149

#ifndef _TAO_IDL_TESTC_HWYTUA_H_
#define _TAO_IDL_TESTC_HWYTUA_H_

#include /**/ "ace/pre.h"


#include /**/ "ace/config-all.h"

#if !defined (ACE_LACKS_PRAGMA_ONCE)
# pragma once
#endif /* ACE_LACKS_PRAGMA_ONCE */


#include "tao/AnyTypeCode/AnyTypeCode_methods.h"
#include "tao/AnyTypeCode/Any.h"
#include "tao/ORB.h"
#include "tao/SystemException.h"
#include "tao/Basic_Types.h"
#include "tao/ORB_Constants.h"
#include "tao/Object.h"
#include "tao/AnyTypeCode/TypeCode.h"
#include "tao/AnyTypeCode/TypeCode_Constants.h"
#include "tao/AnyTypeCode/Any.h"
#include "tao/String_Manager_T.h"
#include "tao/Sequence_T.h"
#include "tao/Objref_VarOut_T.h"
#include "tao/Seq_Var_T.h"
#include "tao/Seq_Out_T.h"
#include "tao/VarOut_T.h"
#include "tao/Array_VarOut_T.h"
#include "tao/Arg_Traits_T.h"
#include "tao/Basic_Arguments.h"
#include "tao/Special_Basic_Arguments.h"
#include "tao/Any_Insert_Policy_T.h"
#include "tao/Fixed_Size_Argument_T.h"
#include "tao/Var_Size_Argument_T.h"
#include "tao/Object_Argument_T.h"
#include "tao/UB_String_Arguments.h"
#include "tao/Fixed_Array_Argument_T.h"
#include "tao/Var_Array_Argument_T.h"
#include "tao/AnyTypeCode/Any_Arg_Traits.h"
#include /**/ "tao/Version.h"
#include /**/ "tao/Versioned_Namespace.h"

#if TAO_MAJOR_VERSION != 2 || TAO_MINOR_VERSION != 4 || TAO_MICRO_VERSION != 1
#error This file should be regenerated with TAO_IDL
#endif

#if defined (TAO_EXPORT_MACRO)
#undef TAO_EXPORT_MACRO
#endif
#define TAO_EXPORT_MACRO 

// TAO_IDL - Generated from
// be/be_visitor_root/root_ch.cpp:157
TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<typename T> class Narrow_Utils;
}
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_module/module_ch.cpp:35

namespace Test
{

  // TAO_IDL - Generated from
  // be/be_type.cpp:258

  struct MyNonVarStruct;

  typedef
    ::TAO_Fixed_Var_T<
        MyNonVarStruct
      >
    MyNonVarStruct_var;

  typedef
    MyNonVarStruct &
    MyNonVarStruct_out;

  // TAO_IDL - Generated from
  // be/be_visitor_structure/structure_ch.cpp:48

  struct  MyNonVarStruct
  {

    // TAO_IDL - Generated from
    // be/be_type.cpp:304

    
    typedef MyNonVarStruct_var _var_type;
    typedef MyNonVarStruct_out _out_type;

    static void _tao_any_destructor (void *);
    
    ::CORBA::Long val;
  };

  // TAO_IDL - Generated from
  // be/be_visitor_typecode/typecode_decl.cpp:34

  extern  ::CORBA::TypeCode_ptr const _tc_MyNonVarStruct;

  // TAO_IDL - Generated from
  // be/be_type.cpp:258

  struct MyVarStruct;

  typedef
    ::TAO_Var_Var_T<
        MyVarStruct
      >
    MyVarStruct_var;

  typedef
    ::TAO_Out_T<
        MyVarStruct
      >
    MyVarStruct_out;

  // TAO_IDL - Generated from
  // be/be_visitor_structure/structure_ch.cpp:48

  struct  MyVarStruct
  {

    // TAO_IDL - Generated from
    // be/be_type.cpp:304

    
    typedef MyVarStruct_var _var_type;
    typedef MyVarStruct_out _out_type;

    static void _tao_any_destructor (void *);
    
    ::TAO::String_Manager val;
  };

  // TAO_IDL - Generated from
  // be/be_visitor_typecode/typecode_decl.cpp:34

  extern  ::CORBA::TypeCode_ptr const _tc_MyVarStruct;

  // TAO_IDL - Generated from
  // be/be_type.cpp:258

  class MyNonVarUnion;

  typedef
    ::TAO_Fixed_Var_T<
        MyNonVarUnion
      >
    MyNonVarUnion_var;

  typedef
    MyNonVarUnion &
    MyNonVarUnion_out;

  class  MyNonVarUnion
  {
  public:
    MyNonVarUnion (void);
    MyNonVarUnion (const MyNonVarUnion &);
    ~MyNonVarUnion (void);

    MyNonVarUnion &operator= (const MyNonVarUnion &);

    // TAO_IDL - Generated from
    // be/be_visitor_union/discriminant_ch.cpp:100

    void _d ( ::CORBA::Short);
    ::CORBA::Short _d (void) const;

    // TAO_IDL - Generated from
    // be/be_type.cpp:304

    
    typedef MyNonVarUnion_var _var_type;
    typedef MyNonVarUnion_out _out_type;

    static void _tao_any_destructor (void *);

    // TAO_IDL - Generated from
    // be/be_visitor_union_branch/public_ch.cpp:449

    void valLong ( ::CORBA::Long);
    ::CORBA::Long valLong (void) const;

    // TAO_IDL - Generated from
    // be/be_visitor_union_branch/public_ch.cpp:449

    void valShort ( ::CORBA::Short);
    ::CORBA::Short valShort (void) const;

    // TAO_IDL - Generated from
    // be/be_visitor_union/union_ch.cpp:121

    void _default (void);
  private:
    ::CORBA::Short disc_;

    union
    {
      // TAO_IDL - Generated from
      // be/be_visitor_union_branch/private_ch.cpp:377
      ::CORBA::Long valLong_;
      // TAO_IDL - Generated from
      // be/be_visitor_union_branch/private_ch.cpp:377
      ::CORBA::Short valShort_;
    } u_;

    /// TAO extension - frees any allocated storage.
    void _reset (void);
  };

  // TAO_IDL - Generated from
  // be/be_visitor_typecode/typecode_decl.cpp:34

  extern  ::CORBA::TypeCode_ptr const _tc_MyNonVarUnion;

  // TAO_IDL - Generated from
  // be/be_type.cpp:258

  class MyVarUnion;

  typedef
    ::TAO_Var_Var_T<
        MyVarUnion
      >
    MyVarUnion_var;

  typedef
    ::TAO_Out_T<
        MyVarUnion
      >
    MyVarUnion_out;

  class  MyVarUnion
  {
  public:
    MyVarUnion (void);
    MyVarUnion (const MyVarUnion &);
    ~MyVarUnion (void);

    MyVarUnion &operator= (const MyVarUnion &);

    // TAO_IDL - Generated from
    // be/be_visitor_union/discriminant_ch.cpp:100

    void _d ( ::CORBA::Short);
    ::CORBA::Short _d (void) const;

    // TAO_IDL - Generated from
    // be/be_type.cpp:304

    
    typedef MyVarUnion_var _var_type;
    typedef MyVarUnion_out _out_type;

    static void _tao_any_destructor (void *);

    // TAO_IDL - Generated from
    // be/be_visitor_union_branch/public_ch.cpp:449

    void valLong ( ::CORBA::Long);
    ::CORBA::Long valLong (void) const;

    // TAO_IDL - Generated from
    // be/be_visitor_union_branch/public_ch.cpp:580

    void valString (char *);
    void valString (const char *);
    void valString (const ::CORBA::String_var&);
    const char *valString (void) const;

    // TAO_IDL - Generated from
    // be/be_visitor_union/union_ch.cpp:121

    void _default (void);
  private:
    ::CORBA::Short disc_;

    union
    {
      // TAO_IDL - Generated from
      // be/be_visitor_union_branch/private_ch.cpp:377
      ::CORBA::Long valLong_;
      // TAO_IDL - Generated from
      // be/be_visitor_union_branch/private_ch.cpp:474
      char *valString_;
    } u_;

    /// TAO extension - frees any allocated storage.
    void _reset (void);
  };

  // TAO_IDL - Generated from
  // be/be_visitor_typecode/typecode_decl.cpp:34

  extern  ::CORBA::TypeCode_ptr const _tc_MyVarUnion;

  // TAO_IDL - Generated from
  // be/be_visitor_sequence/sequence_ch.cpp:99

#if !defined (_TEST_MYSEQOFLONG_CH_)
#define _TEST_MYSEQOFLONG_CH_

  class MySeqOfLong;

  typedef
    ::TAO_FixedSeq_Var_T<
        MySeqOfLong
      >
    MySeqOfLong_var;

  typedef
    ::TAO_Seq_Out_T<
        MySeqOfLong
      >
    MySeqOfLong_out;

  class  MySeqOfLong
    : public
        ::TAO::unbounded_value_sequence<
            ::CORBA::Long
          >
  {
  public:
    MySeqOfLong (void);
    MySeqOfLong ( ::CORBA::ULong max);
    MySeqOfLong (
      ::CORBA::ULong max,
      ::CORBA::ULong length,
      ::CORBA::Long* buffer,
      ::CORBA::Boolean release = false);
    MySeqOfLong (const MySeqOfLong &);
    virtual ~MySeqOfLong (void);
    

    // TAO_IDL - Generated from
    // be/be_type.cpp:304

    
    typedef MySeqOfLong_var _var_type;
    typedef MySeqOfLong_out _out_type;

    static void _tao_any_destructor (void *);
  };

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // be/be_visitor_typecode/typecode_decl.cpp:34

  extern  ::CORBA::TypeCode_ptr const _tc_MySeqOfLong;

  // TAO_IDL - Generated from
  // be/be_visitor_array/array_ch.cpp:52

  typedef MySeqOfLong MyArray[2];
  typedef MySeqOfLong MyArray_slice;
  struct MyArray_tag {};
  

  typedef
    TAO_VarArray_Var_T<
        MyArray,
        MyArray_slice,
        MyArray_tag
      >
    MyArray_var;

  typedef
    TAO_Array_Out_T<
        MyArray,
        MyArray_var,
        MyArray_slice,
        MyArray_tag
      >
    MyArray_out;

  typedef
    TAO_Array_Forany_T<
        MyArray,
        MyArray_slice,
        MyArray_tag
      >
    MyArray_forany;

  TAO_NAMESPACE_STORAGE_CLASS MyArray_slice *
  MyArray_alloc (void);

  TAO_NAMESPACE_STORAGE_CLASS void
  MyArray_free (
      MyArray_slice *_tao_slice);
  
  TAO_NAMESPACE_STORAGE_CLASS MyArray_slice *
  MyArray_dup (
      const MyArray_slice *_tao_slice);
  
  TAO_NAMESPACE_STORAGE_CLASS void
  MyArray_copy (
      MyArray_slice *_tao_to,
      const MyArray_slice *_tao_from);

  // TAO_IDL - Generated from
  // be/be_visitor_typecode/typecode_decl.cpp:34

  extern  ::CORBA::TypeCode_ptr const _tc_MyArray;

  // TAO_IDL - Generated from
  // be/be_interface.cpp:748

#if !defined (_TEST_FOO__VAR_OUT_CH_)
#define _TEST_FOO__VAR_OUT_CH_

  class Foo;
  typedef Foo *Foo_ptr;

  typedef
    TAO_Objref_Var_T<
        Foo
      >
    Foo_var;
  
  typedef
    TAO_Objref_Out_T<
        Foo
      >
    Foo_out;

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // be/be_visitor_interface/interface_ch.cpp:40

  class  Foo
    : public virtual ::CORBA::Object
  {
  public:
    friend class TAO::Narrow_Utils<Foo>;

    // TAO_IDL - Generated from
    // be/be_type.cpp:304

    typedef Foo_ptr _ptr_type;
    typedef Foo_var _var_type;
    typedef Foo_out _out_type;

    static void _tao_any_destructor (void *);

    // The static operations.
    static Foo_ptr _duplicate (Foo_ptr obj);

    static void _tao_release (Foo_ptr obj);

    static Foo_ptr _narrow (::CORBA::Object_ptr obj);
    static Foo_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
    static Foo_ptr _nil (void);

    virtual ::CORBA::Long TestLong (
      ::CORBA::Long a,
      ::CORBA::Long_out b,
      ::CORBA::Long & c);

    virtual char * TestString (
      const char * a,
      ::CORBA::String_out b,
      char *& c);

    virtual ::Test::MyNonVarStruct TestNonVarStruct (
      const ::Test::MyNonVarStruct & a,
      ::Test::MyNonVarStruct_out b,
      ::Test::MyNonVarStruct & c);

    virtual ::Test::MyVarStruct * TestVarStruct (
      const ::Test::MyVarStruct & a,
      ::Test::MyVarStruct_out b,
      ::Test::MyVarStruct & c);

    virtual ::Test::MyNonVarUnion TestNonVarUnion (
      const ::Test::MyNonVarUnion & a,
      ::Test::MyNonVarUnion_out b,
      ::Test::MyNonVarUnion & c);

    virtual ::Test::MyVarUnion * TestVarUnion (
      const ::Test::MyVarUnion & a,
      ::Test::MyVarUnion_out b,
      ::Test::MyVarUnion & c);

    virtual ::Test::MySeqOfLong * TestSeqOfLong (
      const ::Test::MySeqOfLong & a,
      ::Test::MySeqOfLong_out b,
      ::Test::MySeqOfLong & c);

    virtual ::CORBA::Any * TestAny (
      const ::CORBA::Any & a,
      ::CORBA::Any_out b,
      ::CORBA::Any & c);

    virtual ::Test::MyArray_slice * TestArray (
      const ::Test::MyArray a,
      ::Test::MyArray_out b,
      ::Test::MyArray c);

    virtual ::CORBA::Object_ptr TestObject (
      ::CORBA::Object_ptr a,
      ::CORBA::Object_out b,
      ::CORBA::Object_ptr & c);

    virtual void ShutdownServer (
      void);

    // TAO_IDL - Generated from
    // be/be_visitor_interface/interface_ch.cpp:137

    virtual ::CORBA::Boolean _is_a (const char *type_id);
    virtual const char* _interface_repository_id (void) const;
    virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);
  
  protected:
    // Concrete interface only.
    Foo (void);

    // Concrete non-local interface only.
    Foo (
        ::IOP::IOR *ior,
        TAO_ORB_Core *orb_core);
    
    // Non-local interface only.
    Foo (
        TAO_Stub *objref,
        ::CORBA::Boolean _tao_collocated = false,
        TAO_Abstract_ServantBase *servant = 0,
        TAO_ORB_Core *orb_core = 0);

    virtual ~Foo (void);
  
  private:
    // Private and unimplemented for concrete interfaces.
    Foo (const Foo &);

    void operator= (const Foo &);
  };

  // TAO_IDL - Generated from
  // be/be_visitor_typecode/typecode_decl.cpp:34

  extern  ::CORBA::TypeCode_ptr const _tc_Foo;

// TAO_IDL - Generated from
// be/be_visitor_module/module_ch.cpp:64

} // module Test

// TAO_IDL - Generated from
// be/be_visitor_arg_traits.cpp:66

TAO_BEGIN_VERSIONED_NAMESPACE_DECL


// Arg traits specializations.
namespace TAO
{

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:945

  template<>
  class Arg_Traits< ::Test::MyNonVarStruct>
    : public
        Fixed_Size_Arg_Traits_T<
            ::Test::MyNonVarStruct,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:945

  template<>
  class Arg_Traits< ::Test::MyVarStruct>
    : public
        Var_Size_Arg_Traits_T<
            ::Test::MyVarStruct,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:1056

  template<>
  class Arg_Traits< ::Test::MyNonVarUnion>
    : public
        Fixed_Size_Arg_Traits_T<
            ::Test::MyNonVarUnion,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:1056

  template<>
  class Arg_Traits< ::Test::MyVarUnion>
    : public
        Var_Size_Arg_Traits_T<
            ::Test::MyVarUnion,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:683

  template<>
  class Arg_Traits< ::Test::MySeqOfLong>
    : public
        Var_Size_Arg_Traits_T<
            ::Test::MySeqOfLong,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

  template<>
  class Arg_Traits< ::Test::MyArray_tag>
    : public
        Var_Array_Arg_Traits_T<
            ::Test::MyArray_out,
            ::Test::MyArray_forany,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:145

#if !defined (_TEST_FOO__ARG_TRAITS_)
#define _TEST_FOO__ARG_TRAITS_

  template<>
  class  Arg_Traits< ::Test::Foo>
    : public
        Object_Arg_Traits_T<
            ::Test::Foo_ptr,
            ::Test::Foo_var,
            ::Test::Foo_out,
            TAO::Objref_Traits<Test::Foo>,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

#endif /* end #if !defined */
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_traits.cpp:60

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Traits specializations.
namespace TAO
{
  template<>
  struct  Array_Traits<
      Test::MyArray_forany
    >
  {
    static void free (
        Test::MyArray_slice * _tao_slice);
    static Test::MyArray_slice * dup (
        const Test::MyArray_slice * _tao_slice);
    static void copy (
        Test::MyArray_slice * _tao_to,
        const Test::MyArray_slice * _tao_from);
    static Test::MyArray_slice * alloc (void);
    static void zero (
        Test::MyArray_slice * _tao_slice);
  };

#if !defined (_TEST_FOO__TRAITS_)
#define _TEST_FOO__TRAITS_

  template<>
  struct  Objref_Traits< ::Test::Foo>
  {
    static ::Test::Foo_ptr duplicate (
        ::Test::Foo_ptr p);
    static void release (
        ::Test::Foo_ptr p);
    static ::Test::Foo_ptr nil (void);
    static ::CORBA::Boolean marshal (
        const ::Test::Foo_ptr p,
        TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */
}
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_structure/any_op_ch.cpp:42



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace Test
{
   void operator<<= (::CORBA::Any &, const ::Test::MyNonVarStruct &); // copying version
   void operator<<= (::CORBA::Any &, ::Test::MyNonVarStruct*); // noncopying version
   ::CORBA::Boolean operator>>= (const ::CORBA::Any &, ::Test::MyNonVarStruct *&); // deprecated
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const ::Test::MyNonVarStruct *&);
}

#else


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 void operator<<= (::CORBA::Any &, const Test::MyNonVarStruct &); // copying version
 void operator<<= (::CORBA::Any &, Test::MyNonVarStruct*); // noncopying version
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, Test::MyNonVarStruct *&); // deprecated
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const Test::MyNonVarStruct *&);
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_structure/any_op_ch.cpp:42



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace Test
{
   void operator<<= (::CORBA::Any &, const ::Test::MyVarStruct &); // copying version
   void operator<<= (::CORBA::Any &, ::Test::MyVarStruct*); // noncopying version
   ::CORBA::Boolean operator>>= (const ::CORBA::Any &, ::Test::MyVarStruct *&); // deprecated
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const ::Test::MyVarStruct *&);
}

#else


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 void operator<<= (::CORBA::Any &, const Test::MyVarStruct &); // copying version
 void operator<<= (::CORBA::Any &, Test::MyVarStruct*); // noncopying version
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, Test::MyVarStruct *&); // deprecated
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const Test::MyVarStruct *&);
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_union/any_op_ch.cpp:37



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace Test
{
   void operator<<= (::CORBA::Any &, const ::Test::MyNonVarUnion &); // copying version
   void operator<<= (::CORBA::Any &, ::Test::MyNonVarUnion*); // noncopying version
   ::CORBA::Boolean operator>>= (const ::CORBA::Any &, ::Test::MyNonVarUnion *&); // deprecated
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const ::Test::MyNonVarUnion *&);
}

#else


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 void operator<<= (::CORBA::Any &, const Test::MyNonVarUnion &); // copying version
 void operator<<= (::CORBA::Any &, Test::MyNonVarUnion*); // noncopying version
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, Test::MyNonVarUnion *&); // deprecated
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const Test::MyNonVarUnion *&);
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_union/any_op_ch.cpp:37



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace Test
{
   void operator<<= (::CORBA::Any &, const ::Test::MyVarUnion &); // copying version
   void operator<<= (::CORBA::Any &, ::Test::MyVarUnion*); // noncopying version
   ::CORBA::Boolean operator>>= (const ::CORBA::Any &, ::Test::MyVarUnion *&); // deprecated
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const ::Test::MyVarUnion *&);
}

#else


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 void operator<<= (::CORBA::Any &, const Test::MyVarUnion &); // copying version
 void operator<<= (::CORBA::Any &, Test::MyVarUnion*); // noncopying version
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, Test::MyVarUnion *&); // deprecated
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const Test::MyVarUnion *&);
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_sequence/any_op_ch.cpp:47



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace Test
{
   void operator<<= ( ::CORBA::Any &, const ::Test::MySeqOfLong &); // copying version
   void operator<<= ( ::CORBA::Any &, ::Test::MySeqOfLong*); // noncopying version
   ::CORBA::Boolean operator>>= (const ::CORBA::Any &, ::Test::MySeqOfLong *&); // deprecated
   ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const ::Test::MySeqOfLong *&);
}

#else


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 void operator<<= ( ::CORBA::Any &, const Test::MySeqOfLong &); // copying version
 void operator<<= ( ::CORBA::Any &, Test::MySeqOfLong*); // noncopying version
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, Test::MySeqOfLong *&); // deprecated
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const Test::MySeqOfLong *&);
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_array/any_op_ch.cpp:37


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 void operator<<= (::CORBA::Any &, const Test::MyArray_forany &);
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, Test::MyArray_forany &);
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_interface/any_op_ch.cpp:41



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace Test
{
   void operator<<= ( ::CORBA::Any &, Foo_ptr); // copying
   void operator<<= ( ::CORBA::Any &, Foo_ptr *); // non-copying
   ::CORBA::Boolean operator>>= (const ::CORBA::Any &, Foo_ptr &);
}

#else


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 void operator<<= (::CORBA::Any &, Test::Foo_ptr); // copying
 void operator<<= (::CORBA::Any &, Test::Foo_ptr *); // non-copying
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, Test::Foo_ptr &);
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_structure/cdr_op_ch.cpp:43


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 ::CORBA::Boolean operator<< (TAO_OutputCDR &, const Test::MyNonVarStruct &);
 ::CORBA::Boolean operator>> (TAO_InputCDR &, Test::MyNonVarStruct &);

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_structure/cdr_op_ch.cpp:43


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 ::CORBA::Boolean operator<< (TAO_OutputCDR &, const Test::MyVarStruct &);
 ::CORBA::Boolean operator>> (TAO_InputCDR &, Test::MyVarStruct &);

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_union/cdr_op_ch.cpp:38


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 ::CORBA::Boolean operator<< (TAO_OutputCDR &, const Test::MyNonVarUnion &);
 ::CORBA::Boolean operator>> (TAO_InputCDR &, Test::MyNonVarUnion &);

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_union/cdr_op_ch.cpp:38


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 ::CORBA::Boolean operator<< (TAO_OutputCDR &, const Test::MyVarUnion &);
 ::CORBA::Boolean operator>> (TAO_InputCDR &, Test::MyVarUnion &);

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_sequence/cdr_op_ch.cpp:65

#if !defined _TAO_CDR_OP_Test_MySeqOfLong_H_
#define _TAO_CDR_OP_Test_MySeqOfLong_H_
TAO_BEGIN_VERSIONED_NAMESPACE_DECL


 ::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Test::MySeqOfLong &_tao_sequence);
 ::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Test::MySeqOfLong &_tao_sequence);

TAO_END_VERSIONED_NAMESPACE_DECL



#endif /* _TAO_CDR_OP_Test_MySeqOfLong_H_ */

// TAO_IDL - Generated from
// be/be_visitor_array/cdr_op_ch.cpp:99


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 CORBA::Boolean operator<< (TAO_OutputCDR &strm, const Test::MyArray_forany &_tao_array);
 ::CORBA::Boolean operator>> (TAO_InputCDR &, Test::MyArray_forany &_tao_array);

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// be/be_visitor_interface/cdr_op_ch.cpp:41

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 ::CORBA::Boolean operator<< (TAO_OutputCDR &, const Test::Foo_ptr );
 ::CORBA::Boolean operator>> (TAO_InputCDR &, Test::Foo_ptr &);

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_codegen.cpp:1700
#if defined (__ACE_INLINE__)
#include "TestC.inl"
#endif /* defined INLINE */

#include /**/ "ace/post.h"

#endif /* ifndef */

