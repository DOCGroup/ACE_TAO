// -*- C++ -*-
/**
 * Code generated by the The ACE ORB (TAO) IDL Compiler v2.4.1
 * TAO and the TAO IDL Compiler have been developed by:
 *       Center for Distributed Object Computing
 *       Washington University
 *       St. Louis, MO
 *       USA
 *       http://www.cs.wustl.edu/~schmidt/doc-center.html
 * and
 *       Distributed Object Computing Laboratory
 *       University of California at Irvine
 *       Irvine, CA
 *       USA
 * and
 *       Institute for Software Integrated Systems
 *       Vanderbilt University
 *       Nashville, TN
 *       USA
 *       http://www.isis.vanderbilt.edu/
 *
 * Information about TAO is available at:
 *     http://www.dre.vanderbilt.edu/~schmidt/TAO.html
 **/

// TAO_IDL - Generated from
// be/be_codegen.cpp:373


#include "TestC.h"
#include "tao/AnyTypeCode/Null_RefCount_Policy.h"
#include "tao/AnyTypeCode/TypeCode_Constants.h"
#include "tao/AnyTypeCode/Alias_TypeCode_Static.h"
#include "tao/AnyTypeCode/Objref_TypeCode_Static.h"
#include "tao/AnyTypeCode/Sequence_TypeCode_Static.h"
#include "tao/AnyTypeCode/String_TypeCode_Static.h"
#include "tao/AnyTypeCode/Struct_TypeCode_Static.h"
#include "tao/AnyTypeCode/TypeCode_Struct_Field.h"
#include "tao/AnyTypeCode/TypeCode_Case_T.h"
#include "tao/AnyTypeCode/Union_TypeCode_Static.h"
#include "tao/CDR.h"
#include "tao/Exception_Data.h"
#include "tao/Invocation_Adapter.h"
#include "tao/Object_T.h"
#include "tao/CDR.h"
#include "tao/AnyTypeCode/Any.h"
#include "tao/AnyTypeCode/Any_Impl_T.h"
#include "tao/AnyTypeCode/Any_Dual_Impl_T.h"
#include "tao/AnyTypeCode/Any_Array_Impl_T.h"
#include "ace/OS_NS_string.h"

#if !defined (__ACE_INLINE__)
#include "TestC.inl"
#endif /* !defined INLINE */

// TAO_IDL - Generated from
// be/be_visitor_typecode/struct_typecode.cpp:86

static TAO::TypeCode::Struct_Field<
  char const *,
  ::CORBA::TypeCode_ptr const *> const 
    _tao_fields_Test_MyNonVarStruct[] =
      {
        { "val", &CORBA::_tc_long }
      };
  
static TAO::TypeCode::Struct<
  char const *,
  ::CORBA::TypeCode_ptr const *,
  TAO::TypeCode::Struct_Field<
    char const *,
    ::CORBA::TypeCode_ptr const *> const *,
  TAO::Null_RefCount_Policy>
_tao_tc_Test_MyNonVarStruct (
  ::CORBA::tk_struct,
  "IDL:Test/MyNonVarStruct:1.0",
  "MyNonVarStruct",
  _tao_fields_Test_MyNonVarStruct,
  1);


namespace Test
{
  ::CORBA::TypeCode_ptr const _tc_MyNonVarStruct =
    &_tao_tc_Test_MyNonVarStruct;
}

// TAO_IDL - Generated from
// be/be_visitor_structure/structure_cs.cpp:56

void
Test::MyNonVarStruct::_tao_any_destructor (
    void *_tao_void_pointer)
{
  MyNonVarStruct *_tao_tmp_pointer =
    static_cast<MyNonVarStruct *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

// TAO_IDL - Generated from
// be/be_visitor_typecode/struct_typecode.cpp:86

static TAO::TypeCode::Struct_Field<
  char const *,
  ::CORBA::TypeCode_ptr const *> const 
    _tao_fields_Test_MyVarStruct[] =
      {
        { "val", &CORBA::_tc_string }
      };
  
static TAO::TypeCode::Struct<
  char const *,
  ::CORBA::TypeCode_ptr const *,
  TAO::TypeCode::Struct_Field<
    char const *,
    ::CORBA::TypeCode_ptr const *> const *,
  TAO::Null_RefCount_Policy>
_tao_tc_Test_MyVarStruct (
  ::CORBA::tk_struct,
  "IDL:Test/MyVarStruct:1.0",
  "MyVarStruct",
  _tao_fields_Test_MyVarStruct,
  1);


namespace Test
{
  ::CORBA::TypeCode_ptr const _tc_MyVarStruct =
    &_tao_tc_Test_MyVarStruct;
}

// TAO_IDL - Generated from
// be/be_visitor_structure/structure_cs.cpp:56

void
Test::MyVarStruct::_tao_any_destructor (
    void *_tao_void_pointer)
{
  MyVarStruct *_tao_tmp_pointer =
    static_cast<MyVarStruct *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

// TAO_IDL - Generated from
// be/be_visitor_union/union_cs.cpp:76

Test::MyNonVarUnion::MyNonVarUnion (void)
{
  ACE_OS::memset (&this->u_, 0, sizeof (this->u_));
  this->disc_ = -32768;
}

Test::MyNonVarUnion::MyNonVarUnion (const ::Test::MyNonVarUnion &u)
{
  this->disc_ = u.disc_;
  switch (this->disc_)
  {
    case 1:
    {
      this->u_.valLong_ = u.u_.valLong_;
    }
    break;
    case 2:
    {
      this->u_.valShort_ = u.u_.valShort_;
    }
    break;
    default:
    break;
  }
}

Test::MyNonVarUnion::~MyNonVarUnion (void)
{
  // Finalize.
  this->_reset ();
}

void Test::MyNonVarUnion::_tao_any_destructor (void *_tao_void_pointer)
{
  MyNonVarUnion *tmp =
    static_cast<MyNonVarUnion *> (_tao_void_pointer);
  delete tmp;
}

Test::MyNonVarUnion &
Test::MyNonVarUnion::operator= (const ::Test::MyNonVarUnion &u)
{
  if (&u == this)
    {
      return *this;
    }
  
  this->_reset ();
  this->disc_ = u.disc_;

  switch (this->disc_)
  {
    case 1:
    {
      this->u_.valLong_ = u.u_.valLong_;
    }
    break;
    case 2:
    {
      this->u_.valShort_ = u.u_.valShort_;
    }
    break;
    default:
    break;
  }
  
  return *this;
}

/// Reset method to reset old values of a union.
void Test::MyNonVarUnion::_reset (void)
{
  switch (this->disc_)
  {
    
    case 1:
      
    break;
    
    case 2:
      
    break;
    
    default:
    break;
  }
}

// TAO_IDL - Generated from
// be/be_visitor_typecode/union_typecode.cpp:65

static TAO::TypeCode::Case_T<CORBA::Short, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_Test_MyNonVarUnion__0 (1, "valLong", &CORBA::_tc_long);
static TAO::TypeCode::Case_T<CORBA::Short, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_Test_MyNonVarUnion__1 (2, "valShort", &CORBA::_tc_short);

static TAO::TypeCode::Case<char const *, ::CORBA::TypeCode_ptr const *> const * const _tao_cases_Test_MyNonVarUnion[] =
  {
    &_tao_cases_Test_MyNonVarUnion__0,
    &_tao_cases_Test_MyNonVarUnion__1
  };

static TAO::TypeCode::Union<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::TypeCode::Case<char const *, ::CORBA::TypeCode_ptr const *> const * const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_Test_MyNonVarUnion (
    "IDL:Test/MyNonVarUnion:1.0",
    "MyNonVarUnion",
    &CORBA::_tc_short,
    _tao_cases_Test_MyNonVarUnion,
    sizeof (_tao_cases_Test_MyNonVarUnion)/sizeof (_tao_cases_Test_MyNonVarUnion[0]),
    -1);
  

namespace Test
{
  ::CORBA::TypeCode_ptr const _tc_MyNonVarUnion =
    &_tao_tc_Test_MyNonVarUnion;
}

// TAO_IDL - Generated from
// be/be_visitor_union/union_cs.cpp:76

Test::MyVarUnion::MyVarUnion (void)
{
  ACE_OS::memset (&this->u_, 0, sizeof (this->u_));
  this->disc_ = -32768;
}

Test::MyVarUnion::MyVarUnion (const ::Test::MyVarUnion &u)
{
  this->disc_ = u.disc_;
  switch (this->disc_)
  {
    case 1:
    {
      this->u_.valLong_ = u.u_.valLong_;
    }
    break;
    case 2:
    {
      this->u_.valString_ = ::CORBA::string_dup (u.u_.valString_);
    }
    break;
    default:
    break;
  }
}

Test::MyVarUnion::~MyVarUnion (void)
{
  // Finalize.
  this->_reset ();
}

void Test::MyVarUnion::_tao_any_destructor (void *_tao_void_pointer)
{
  MyVarUnion *tmp =
    static_cast<MyVarUnion *> (_tao_void_pointer);
  delete tmp;
}

Test::MyVarUnion &
Test::MyVarUnion::operator= (const ::Test::MyVarUnion &u)
{
  if (&u == this)
    {
      return *this;
    }
  
  this->_reset ();
  this->disc_ = u.disc_;

  switch (this->disc_)
  {
    case 1:
    {
      this->u_.valLong_ = u.u_.valLong_;
    }
    break;
    case 2:
    {
      this->u_.valString_ = ::CORBA::string_dup (u.u_.valString_);
    }
    break;
    default:
    break;
  }
  
  return *this;
}

/// Reset method to reset old values of a union.
void Test::MyVarUnion::_reset (void)
{
  switch (this->disc_)
  {
    
    case 1:
      
    break;
    
    case 2:
      ::CORBA::string_free (this->u_.valString_);
      this->u_.valString_ = 0;
      
    break;
    
    default:
    break;
  }
}

// TAO_IDL - Generated from
// be/be_visitor_typecode/union_typecode.cpp:65

static TAO::TypeCode::Case_T<CORBA::Short, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_Test_MyVarUnion__0 (1, "valLong", &CORBA::_tc_long);
static TAO::TypeCode::Case_T<CORBA::Short, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_Test_MyVarUnion__1 (2, "valString", &CORBA::_tc_string);

static TAO::TypeCode::Case<char const *, ::CORBA::TypeCode_ptr const *> const * const _tao_cases_Test_MyVarUnion[] =
  {
    &_tao_cases_Test_MyVarUnion__0,
    &_tao_cases_Test_MyVarUnion__1
  };

static TAO::TypeCode::Union<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::TypeCode::Case<char const *, ::CORBA::TypeCode_ptr const *> const * const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_Test_MyVarUnion (
    "IDL:Test/MyVarUnion:1.0",
    "MyVarUnion",
    &CORBA::_tc_short,
    _tao_cases_Test_MyVarUnion,
    sizeof (_tao_cases_Test_MyVarUnion)/sizeof (_tao_cases_Test_MyVarUnion[0]),
    -1);
  

namespace Test
{
  ::CORBA::TypeCode_ptr const _tc_MyVarUnion =
    &_tao_tc_Test_MyVarUnion;
}

// TAO_IDL - Generated from
// be/be_visitor_sequence/sequence_cs.cpp:70

#if !defined (_TEST_MYSEQOFLONG_CS_)
#define _TEST_MYSEQOFLONG_CS_

Test::MySeqOfLong::MySeqOfLong (void)
{}

Test::MySeqOfLong::MySeqOfLong (
    ::CORBA::ULong max)
  : ::TAO::unbounded_value_sequence<
        ::CORBA::Long
      > (max)
{}

Test::MySeqOfLong::MySeqOfLong (
    ::CORBA::ULong max,
    ::CORBA::ULong length,
    ::CORBA::Long * buffer,
    ::CORBA::Boolean release
  )
  : ::TAO::unbounded_value_sequence<
        ::CORBA::Long
      >
    (max, length, buffer, release)
{}

Test::MySeqOfLong::MySeqOfLong (
    const MySeqOfLong &seq)
  : ::TAO::unbounded_value_sequence<
        ::CORBA::Long
      > (seq)
{}

Test::MySeqOfLong::~MySeqOfLong (void)
{}

void Test::MySeqOfLong::_tao_any_destructor (
    void * _tao_void_pointer)
{
  MySeqOfLong * _tao_tmp_pointer =
    static_cast<MySeqOfLong *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

#endif /* end #if !defined */

// TAO_IDL - Generated from
// be/be_visitor_typecode/alias_typecode.cpp:49



// TAO_IDL - Generated from
// be/be_visitor_typecode/typecode_defn.cpp:461


#ifndef _TAO_TYPECODE_Test_MySeqOfLong_GUARD
#define _TAO_TYPECODE_Test_MySeqOfLong_GUARD

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

namespace TAO
{
  namespace TypeCode
  {
    namespace
    {
      TAO::TypeCode::Sequence< ::CORBA::TypeCode_ptr const *,
                              TAO::Null_RefCount_Policy>
        Test_MySeqOfLong_0 (
          ::CORBA::tk_sequence,
          &CORBA::_tc_long,
          0U);
        
      ::CORBA::TypeCode_ptr const tc_Test_MySeqOfLong_0 =
        &Test_MySeqOfLong_0;
    }
  }
}

TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_TYPECODE_Test_MySeqOfLong_GUARD */

static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_Test_MySeqOfLong (
    ::CORBA::tk_alias,
    "IDL:Test/MySeqOfLong:1.0",
    "MySeqOfLong",
    &TAO::TypeCode::tc_Test_MySeqOfLong_0);
  

namespace Test
{
  ::CORBA::TypeCode_ptr const _tc_MySeqOfLong =
    &_tao_tc_Test_MySeqOfLong;
}

// TAO_IDL - Generated from
// be/be_visitor_array/array_cs.cpp:94

Test::MyArray_slice *
Test::MyArray_dup (const Test::MyArray_slice *_tao_src_array)
{
  Test::MyArray_slice *_tao_dup_array =
    Test::MyArray_alloc ();
  
  if (!_tao_dup_array)
    {
      return static_cast <Test::MyArray_slice *> (0);
    }
  
  Test::MyArray_copy (_tao_dup_array, _tao_src_array);
  return _tao_dup_array;
}

Test::MyArray_slice *
Test::MyArray_alloc (void)
{
  Test::MyArray_slice *retval = 0;
  ACE_NEW_RETURN (retval, Test::MySeqOfLong[2], 0);
  return retval;
}

void
Test::MyArray_free (
    Test::MyArray_slice *_tao_slice)
{
  delete [] _tao_slice;
}

void
Test::MyArray_copy (
    Test::MyArray_slice * _tao_to,
    const Test::MyArray_slice *_tao_from)
{
  // Copy each individual element.
  for ( ::CORBA::ULong i0 = 0; i0 < 2; ++i0)
    {
      _tao_to[i0] = _tao_from[i0];
    }
}

// TAO_IDL - Generated from
// be/be_visitor_typecode/alias_typecode.cpp:49



// TAO_IDL - Generated from
// be/be_visitor_typecode/typecode_defn.cpp:298


#ifndef _TAO_TYPECODE_Test_MyArray_GUARD
#define _TAO_TYPECODE_Test_MyArray_GUARD

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

namespace TAO
{
  namespace TypeCode
  {
    namespace
    {
      TAO::TypeCode::Sequence< ::CORBA::TypeCode_ptr const *,
                              TAO::Null_RefCount_Policy>
        Test_MyArray_2 (
          ::CORBA::tk_array,
          &Test::_tc_MySeqOfLong,
          2U);
        
      ::CORBA::TypeCode_ptr const tc_Test_MyArray =
        &Test_MyArray_2;
    }
  }
}

TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_TYPECODE_Test_MyArray_GUARD */
static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_Test_MyArray (
    ::CORBA::tk_alias,
    "IDL:Test/MyArray:1.0",
    "MyArray",
    &TAO::TypeCode::tc_Test_MyArray);
  

namespace Test
{
  ::CORBA::TypeCode_ptr const _tc_MyArray =
    &_tao_tc_Test_MyArray;
}

// TAO_IDL - Generated from
// be/be_visitor_interface/interface_cs.cpp:48

// Traits specializations for Test::Foo.

Test::Foo_ptr
TAO::Objref_Traits<Test::Foo>::duplicate (
    Test::Foo_ptr p)
{
  return Test::Foo::_duplicate (p);
}

void
TAO::Objref_Traits<Test::Foo>::release (
    Test::Foo_ptr p)
{
  ::CORBA::release (p);
}

Test::Foo_ptr
TAO::Objref_Traits<Test::Foo>::nil (void)
{
  return Test::Foo::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<Test::Foo>::marshal (
    const Test::Foo_ptr p,
    TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:88

::CORBA::Long
Test::Foo::TestLong (
  ::CORBA::Long a,
  ::CORBA::Long_out b,
  ::CORBA::Long & c)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  TAO::Arg_Traits< ::CORBA::Long>::ret_val _tao_retval;
  TAO::Arg_Traits< ::CORBA::Long>::in_arg_val _tao_a (a);
  TAO::Arg_Traits< ::CORBA::Long>::out_arg_val _tao_b (b);
  TAO::Arg_Traits< ::CORBA::Long>::inout_arg_val _tao_c (c);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_a,
      &_tao_b,
      &_tao_c
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      4,
      "TestLong",
      8,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY
      
    );

  _tao_call.invoke (0, 0);

  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:88

char *
Test::Foo::TestString (
  const char * a,
  ::CORBA::String_out b,
  char *& c)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  TAO::Arg_Traits< char *>::ret_val _tao_retval;
  TAO::Arg_Traits< char *>::in_arg_val _tao_a (a);
  TAO::Arg_Traits< char *>::out_arg_val _tao_b (b);
  TAO::Arg_Traits< char *>::inout_arg_val _tao_c (c);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_a,
      &_tao_b,
      &_tao_c
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      4,
      "TestString",
      10,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY
      
    );

  _tao_call.invoke (0, 0);

  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:88

::Test::MyNonVarStruct
Test::Foo::TestNonVarStruct (
  const ::Test::MyNonVarStruct & a,
  ::Test::MyNonVarStruct_out b,
  ::Test::MyNonVarStruct & c)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  TAO::Arg_Traits< ::Test::MyNonVarStruct>::ret_val _tao_retval;
  TAO::Arg_Traits< ::Test::MyNonVarStruct>::in_arg_val _tao_a (a);
  TAO::Arg_Traits< ::Test::MyNonVarStruct>::out_arg_val _tao_b (b);
  TAO::Arg_Traits< ::Test::MyNonVarStruct>::inout_arg_val _tao_c (c);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_a,
      &_tao_b,
      &_tao_c
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      4,
      "TestNonVarStruct",
      16,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY
      
    );

  _tao_call.invoke (0, 0);

  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:88

::Test::MyVarStruct *
Test::Foo::TestVarStruct (
  const ::Test::MyVarStruct & a,
  ::Test::MyVarStruct_out b,
  ::Test::MyVarStruct & c)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  TAO::Arg_Traits< ::Test::MyVarStruct>::ret_val _tao_retval;
  TAO::Arg_Traits< ::Test::MyVarStruct>::in_arg_val _tao_a (a);
  TAO::Arg_Traits< ::Test::MyVarStruct>::out_arg_val _tao_b (b);
  TAO::Arg_Traits< ::Test::MyVarStruct>::inout_arg_val _tao_c (c);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_a,
      &_tao_b,
      &_tao_c
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      4,
      "TestVarStruct",
      13,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY
      
    );

  _tao_call.invoke (0, 0);

  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:88

::Test::MyNonVarUnion
Test::Foo::TestNonVarUnion (
  const ::Test::MyNonVarUnion & a,
  ::Test::MyNonVarUnion_out b,
  ::Test::MyNonVarUnion & c)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  TAO::Arg_Traits< ::Test::MyNonVarUnion>::ret_val _tao_retval;
  TAO::Arg_Traits< ::Test::MyNonVarUnion>::in_arg_val _tao_a (a);
  TAO::Arg_Traits< ::Test::MyNonVarUnion>::out_arg_val _tao_b (b);
  TAO::Arg_Traits< ::Test::MyNonVarUnion>::inout_arg_val _tao_c (c);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_a,
      &_tao_b,
      &_tao_c
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      4,
      "TestNonVarUnion",
      15,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY
      
    );

  _tao_call.invoke (0, 0);

  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:88

::Test::MyVarUnion *
Test::Foo::TestVarUnion (
  const ::Test::MyVarUnion & a,
  ::Test::MyVarUnion_out b,
  ::Test::MyVarUnion & c)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  TAO::Arg_Traits< ::Test::MyVarUnion>::ret_val _tao_retval;
  TAO::Arg_Traits< ::Test::MyVarUnion>::in_arg_val _tao_a (a);
  TAO::Arg_Traits< ::Test::MyVarUnion>::out_arg_val _tao_b (b);
  TAO::Arg_Traits< ::Test::MyVarUnion>::inout_arg_val _tao_c (c);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_a,
      &_tao_b,
      &_tao_c
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      4,
      "TestVarUnion",
      12,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY
      
    );

  _tao_call.invoke (0, 0);

  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:88

::Test::MySeqOfLong *
Test::Foo::TestSeqOfLong (
  const ::Test::MySeqOfLong & a,
  ::Test::MySeqOfLong_out b,
  ::Test::MySeqOfLong & c)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  TAO::Arg_Traits< ::Test::MySeqOfLong>::ret_val _tao_retval;
  TAO::Arg_Traits< ::Test::MySeqOfLong>::in_arg_val _tao_a (a);
  TAO::Arg_Traits< ::Test::MySeqOfLong>::out_arg_val _tao_b (b);
  TAO::Arg_Traits< ::Test::MySeqOfLong>::inout_arg_val _tao_c (c);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_a,
      &_tao_b,
      &_tao_c
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      4,
      "TestSeqOfLong",
      13,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY
      
    );

  _tao_call.invoke (0, 0);

  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:88

::CORBA::Any *
Test::Foo::TestAny (
  const ::CORBA::Any & a,
  ::CORBA::Any_out b,
  ::CORBA::Any & c)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  TAO::Arg_Traits< ::CORBA::Any>::ret_val _tao_retval;
  TAO::Arg_Traits< ::CORBA::Any>::in_arg_val _tao_a (a);
  TAO::Arg_Traits< ::CORBA::Any>::out_arg_val _tao_b (b);
  TAO::Arg_Traits< ::CORBA::Any>::inout_arg_val _tao_c (c);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_a,
      &_tao_b,
      &_tao_c
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      4,
      "TestAny",
      7,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY
      
    );

  _tao_call.invoke (0, 0);

  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:88

::Test::MyArray_slice *
Test::Foo::TestArray (
  const ::Test::MyArray a,
  ::Test::MyArray_out b,
  ::Test::MyArray c)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  TAO::Arg_Traits< ::Test::MyArray_tag>::ret_val _tao_retval;
  TAO::Arg_Traits< ::Test::MyArray_tag>::in_arg_val _tao_a (a);
  TAO::Arg_Traits< ::Test::MyArray_tag>::out_arg_val _tao_b (b);
  TAO::Arg_Traits< ::Test::MyArray_tag>::inout_arg_val _tao_c (c);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_a,
      &_tao_b,
      &_tao_c
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      4,
      "TestArray",
      9,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY
      
    );

  _tao_call.invoke (0, 0);

  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:88

::CORBA::Object_ptr
Test::Foo::TestObject (
  ::CORBA::Object_ptr a,
  ::CORBA::Object_out b,
  ::CORBA::Object_ptr & c)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  TAO::Arg_Traits< ::CORBA::Object>::ret_val _tao_retval;
  TAO::Arg_Traits< ::CORBA::Object>::in_arg_val _tao_a (a);
  TAO::Arg_Traits< ::CORBA::Object>::out_arg_val _tao_b (b);
  TAO::Arg_Traits< ::CORBA::Object>::inout_arg_val _tao_c (c);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_a,
      &_tao_b,
      &_tao_c
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      4,
      "TestObject",
      10,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY
      
    );

  _tao_call.invoke (0, 0);

  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:88

void
Test::Foo::ShutdownServer (
  void)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  TAO::Arg_Traits< void>::ret_val _tao_retval;

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      1,
      "ShutdownServer",
      14,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY,
      TAO::TAO_ONEWAY_INVOCATION,
      TAO::TAO_SYNCHRONOUS_INVOCATION,
      false
    );

  _tao_call.invoke (0, 0);
}

Test::Foo::Foo (void)
{
}

Test::Foo::~Foo (void)
{
}

void
Test::Foo::_tao_any_destructor (void *_tao_void_pointer)
{
  Foo *_tao_tmp_pointer =
    static_cast<Foo *> (_tao_void_pointer);
  ::CORBA::release (_tao_tmp_pointer);
}

Test::Foo_ptr
Test::Foo::_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return
    TAO::Narrow_Utils<Foo>::narrow (
        _tao_objref,
        "IDL:Test/Foo:1.0");
}

Test::Foo_ptr
Test::Foo::_unchecked_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return
    TAO::Narrow_Utils<Foo>::unchecked_narrow (
        _tao_objref);
}

Test::Foo_ptr
Test::Foo::_nil (void)
{
  return 0;
}

Test::Foo_ptr
Test::Foo::_duplicate (Foo_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  return obj;
}

void
Test::Foo::_tao_release (Foo_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
Test::Foo::_is_a (const char *value)
{
  if (
      ACE_OS::strcmp (
          value,
          "IDL:Test/Foo:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        ) == 0
    )
    {
      return true; // success using local knowledge
    }
  else
    {
      return this->::CORBA::Object::_is_a (value);
    }
}

const char* Test::Foo::_interface_repository_id (void) const
{
  return "IDL:Test/Foo:1.0";
}

::CORBA::Boolean
Test::Foo::marshal (TAO_OutputCDR &cdr)
{
  return (cdr << this);
}

// TAO_IDL - Generated from
// be/be_visitor_typecode/objref_typecode.cpp:70

static TAO::TypeCode::Objref<char const *,
                             TAO::Null_RefCount_Policy>
  _tao_tc_Test_Foo (
    ::CORBA::tk_objref,
    "IDL:Test/Foo:1.0",
    "Foo");
  

namespace Test
{
  ::CORBA::TypeCode_ptr const _tc_Foo =
    &_tao_tc_Test_Foo;
}

// TAO_IDL - Generated from
// be/be_visitor_structure/any_op_cs.cpp:43



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace Test
{
  /// Copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      const ::Test::MyNonVarStruct &_tao_elem)
  {
    TAO::Any_Dual_Impl_T< ::Test::MyNonVarStruct>::insert_copy (
        _tao_any,
        ::Test::MyNonVarStruct::_tao_any_destructor,
        ::Test::_tc_MyNonVarStruct,
        _tao_elem);
}

/// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any, ::
    Test::MyNonVarStruct *_tao_elem)
{
  TAO::Any_Dual_Impl_T< ::Test::MyNonVarStruct>::insert (
      _tao_any,
      ::Test::MyNonVarStruct::_tao_any_destructor,
      ::Test::_tc_MyNonVarStruct,
      _tao_elem);
}

/// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    ::Test::MyNonVarStruct *&_tao_elem)
{
  return _tao_any >>= const_cast<
      const ::Test::MyNonVarStruct *&> (
      _tao_elem);
}

/// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const ::Test::MyNonVarStruct *&_tao_elem)
{
  return
    TAO::Any_Dual_Impl_T< ::Test::MyNonVarStruct>::extract (
        _tao_any,
        ::Test::MyNonVarStruct::_tao_any_destructor,
        ::Test::_tc_MyNonVarStruct,
        _tao_elem
      );
}
}

#else

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

/// Copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  const Test::MyNonVarStruct &_tao_elem)
{
  TAO::Any_Dual_Impl_T<Test::MyNonVarStruct>::insert_copy (
    _tao_any,
    Test::MyNonVarStruct::_tao_any_destructor,
    Test::_tc_MyNonVarStruct,
    _tao_elem);
}

/// Non-copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  Test::MyNonVarStruct *_tao_elem)
{
  TAO::Any_Dual_Impl_T<Test::MyNonVarStruct>::insert (
    _tao_any,
    Test::MyNonVarStruct::_tao_any_destructor,
    Test::_tc_MyNonVarStruct,
    _tao_elem);
}

/// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
  const ::CORBA::Any &_tao_any,
  Test::MyNonVarStruct *&_tao_elem)
{
  return _tao_any >>= const_cast<
      const Test::MyNonVarStruct *&> (
      _tao_elem);
}

/// Extraction to const pointer.
::CORBA::Boolean operator>>= (
  const ::CORBA::Any &_tao_any,
  const Test::MyNonVarStruct *&_tao_elem)
{
  return
    TAO::Any_Dual_Impl_T<Test::MyNonVarStruct>::extract (
      _tao_any,
      Test::MyNonVarStruct::_tao_any_destructor,
      Test::_tc_MyNonVarStruct,
      _tao_elem);
}
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_structure/any_op_cs.cpp:43



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace Test
{
  /// Copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      const ::Test::MyVarStruct &_tao_elem)
  {
    TAO::Any_Dual_Impl_T< ::Test::MyVarStruct>::insert_copy (
        _tao_any,
        ::Test::MyVarStruct::_tao_any_destructor,
        ::Test::_tc_MyVarStruct,
        _tao_elem);
}

/// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any, ::
    Test::MyVarStruct *_tao_elem)
{
  TAO::Any_Dual_Impl_T< ::Test::MyVarStruct>::insert (
      _tao_any,
      ::Test::MyVarStruct::_tao_any_destructor,
      ::Test::_tc_MyVarStruct,
      _tao_elem);
}

/// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    ::Test::MyVarStruct *&_tao_elem)
{
  return _tao_any >>= const_cast<
      const ::Test::MyVarStruct *&> (
      _tao_elem);
}

/// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const ::Test::MyVarStruct *&_tao_elem)
{
  return
    TAO::Any_Dual_Impl_T< ::Test::MyVarStruct>::extract (
        _tao_any,
        ::Test::MyVarStruct::_tao_any_destructor,
        ::Test::_tc_MyVarStruct,
        _tao_elem
      );
}
}

#else

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

/// Copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  const Test::MyVarStruct &_tao_elem)
{
  TAO::Any_Dual_Impl_T<Test::MyVarStruct>::insert_copy (
    _tao_any,
    Test::MyVarStruct::_tao_any_destructor,
    Test::_tc_MyVarStruct,
    _tao_elem);
}

/// Non-copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  Test::MyVarStruct *_tao_elem)
{
  TAO::Any_Dual_Impl_T<Test::MyVarStruct>::insert (
    _tao_any,
    Test::MyVarStruct::_tao_any_destructor,
    Test::_tc_MyVarStruct,
    _tao_elem);
}

/// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
  const ::CORBA::Any &_tao_any,
  Test::MyVarStruct *&_tao_elem)
{
  return _tao_any >>= const_cast<
      const Test::MyVarStruct *&> (
      _tao_elem);
}

/// Extraction to const pointer.
::CORBA::Boolean operator>>= (
  const ::CORBA::Any &_tao_any,
  const Test::MyVarStruct *&_tao_elem)
{
  return
    TAO::Any_Dual_Impl_T<Test::MyVarStruct>::extract (
      _tao_any,
      Test::MyVarStruct::_tao_any_destructor,
      Test::_tc_MyVarStruct,
      _tao_elem);
}
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_union/any_op_cs.cpp:37


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


TAO_END_VERSIONED_NAMESPACE_DECL



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace Test
{
  // Copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      const ::Test::MyNonVarUnion &_tao_elem
    )
  {
    TAO::Any_Dual_Impl_T< ::Test::MyNonVarUnion>::insert_copy (
        _tao_any,
        ::Test::MyNonVarUnion::_tao_any_destructor,
        ::Test::_tc_MyNonVarUnion,
        _tao_elem
      );
}

// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    ::Test::MyNonVarUnion *_tao_elem
  )
{
  TAO::Any_Dual_Impl_T< ::Test::MyNonVarUnion>::insert (
      _tao_any,
      ::Test::MyNonVarUnion::_tao_any_destructor,
      ::Test::_tc_MyNonVarUnion,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    ::Test::MyNonVarUnion *&_tao_elem
  )
{
  return _tao_any >>= const_cast<
      const ::Test::MyNonVarUnion *&> (
      _tao_elem
    );
}

// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const ::Test::MyNonVarUnion *&_tao_elem
  )
{
  return
    TAO::Any_Dual_Impl_T< ::Test::MyNonVarUnion>::extract (
        _tao_any,
        ::Test::MyNonVarUnion::_tao_any_destructor,
        ::Test::_tc_MyNonVarUnion,
        _tao_elem
      );
}
}

#else

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    const Test::MyNonVarUnion &_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<Test::MyNonVarUnion>::insert_copy (
      _tao_any,
      Test::MyNonVarUnion::_tao_any_destructor,
      Test::_tc_MyNonVarUnion,
      _tao_elem
    );
}

// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    Test::MyNonVarUnion *_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<Test::MyNonVarUnion>::insert (
      _tao_any,
      Test::MyNonVarUnion::_tao_any_destructor,
      Test::_tc_MyNonVarUnion,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    Test::MyNonVarUnion *&_tao_elem
  )
{
  return _tao_any >>= const_cast<
      const Test::MyNonVarUnion *&> (
      _tao_elem
    );
}

// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const Test::MyNonVarUnion *&_tao_elem
  )
{
  return
    TAO::Any_Dual_Impl_T<Test::MyNonVarUnion>::extract (
        _tao_any,
        Test::MyNonVarUnion::_tao_any_destructor,
        Test::_tc_MyNonVarUnion,
        _tao_elem
      );
}
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_union/any_op_cs.cpp:37


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


TAO_END_VERSIONED_NAMESPACE_DECL



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace Test
{
  // Copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      const ::Test::MyVarUnion &_tao_elem
    )
  {
    TAO::Any_Dual_Impl_T< ::Test::MyVarUnion>::insert_copy (
        _tao_any,
        ::Test::MyVarUnion::_tao_any_destructor,
        ::Test::_tc_MyVarUnion,
        _tao_elem
      );
}

// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    ::Test::MyVarUnion *_tao_elem
  )
{
  TAO::Any_Dual_Impl_T< ::Test::MyVarUnion>::insert (
      _tao_any,
      ::Test::MyVarUnion::_tao_any_destructor,
      ::Test::_tc_MyVarUnion,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    ::Test::MyVarUnion *&_tao_elem
  )
{
  return _tao_any >>= const_cast<
      const ::Test::MyVarUnion *&> (
      _tao_elem
    );
}

// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const ::Test::MyVarUnion *&_tao_elem
  )
{
  return
    TAO::Any_Dual_Impl_T< ::Test::MyVarUnion>::extract (
        _tao_any,
        ::Test::MyVarUnion::_tao_any_destructor,
        ::Test::_tc_MyVarUnion,
        _tao_elem
      );
}
}

#else

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    const Test::MyVarUnion &_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<Test::MyVarUnion>::insert_copy (
      _tao_any,
      Test::MyVarUnion::_tao_any_destructor,
      Test::_tc_MyVarUnion,
      _tao_elem
    );
}

// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    Test::MyVarUnion *_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<Test::MyVarUnion>::insert (
      _tao_any,
      Test::MyVarUnion::_tao_any_destructor,
      Test::_tc_MyVarUnion,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    Test::MyVarUnion *&_tao_elem
  )
{
  return _tao_any >>= const_cast<
      const Test::MyVarUnion *&> (
      _tao_elem
    );
}

// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const Test::MyVarUnion *&_tao_elem
  )
{
  return
    TAO::Any_Dual_Impl_T<Test::MyVarUnion>::extract (
        _tao_any,
        Test::MyVarUnion::_tao_any_destructor,
        Test::_tc_MyVarUnion,
        _tao_elem
      );
}
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_sequence/any_op_cs.cpp:45


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


TAO_END_VERSIONED_NAMESPACE_DECL



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace Test
{
  
  // Copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      const ::Test::MySeqOfLong &_tao_elem
    )
  {
    TAO::Any_Dual_Impl_T< ::Test::MySeqOfLong>::insert_copy (
        _tao_any,
        ::Test::MySeqOfLong::_tao_any_destructor,
        ::Test::_tc_MySeqOfLong,
        _tao_elem
      );
}

// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    ::Test::MySeqOfLong *_tao_elem)
{
  TAO::Any_Dual_Impl_T< ::Test::MySeqOfLong>::insert (
      _tao_any,
      ::Test::MySeqOfLong::_tao_any_destructor,
      ::Test::_tc_MySeqOfLong,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    ::Test::MySeqOfLong *&_tao_elem)
{
  return _tao_any >>= const_cast<
      const ::Test::MySeqOfLong *&> (
      _tao_elem
    );
}

// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const ::Test::MySeqOfLong *&_tao_elem)
{
  return
    TAO::Any_Dual_Impl_T< ::Test::MySeqOfLong>::extract (
        _tao_any,
        ::Test::MySeqOfLong::_tao_any_destructor,
        ::Test::_tc_MySeqOfLong,
        _tao_elem
      );
}
}

#else


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


// Copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    const Test::MySeqOfLong &_tao_elem)
{
  TAO::Any_Dual_Impl_T<Test::MySeqOfLong>::insert_copy (
      _tao_any,
      Test::MySeqOfLong::_tao_any_destructor,
      Test::_tc_MySeqOfLong,
      _tao_elem
    );
}

// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    Test::MySeqOfLong *_tao_elem)
{
  TAO::Any_Dual_Impl_T<Test::MySeqOfLong>::insert (
      _tao_any,
      Test::MySeqOfLong::_tao_any_destructor,
      Test::_tc_MySeqOfLong,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    Test::MySeqOfLong *&_tao_elem)
{
  return _tao_any >>= const_cast<
      const Test::MySeqOfLong *&> (
      _tao_elem
    );
}

// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const Test::MySeqOfLong *&_tao_elem)
{
  return
    TAO::Any_Dual_Impl_T<Test::MySeqOfLong>::extract (
        _tao_any,
        Test::MySeqOfLong::_tao_any_destructor,
        Test::_tc_MySeqOfLong,
        _tao_elem);
}
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_array/any_op_cs.cpp:37


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

void operator<<= (
    ::CORBA::Any &_tao_any,
    const Test::MyArray_forany &_tao_elem
  )
{
  TAO::Any_Array_Impl_T<
      Test::MyArray_slice,
      Test::MyArray_forany
    >::insert (
        _tao_any,
        Test::MyArray_forany::_tao_any_destructor,
        Test::_tc_MyArray,
        _tao_elem.nocopy ()
          ? _tao_elem.ptr ()
          : Test::MyArray_dup (_tao_elem.in ())
      );
}

::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    Test::MyArray_forany &_tao_elem
  )
{
  return
    TAO::Any_Array_Impl_T<
        Test::MyArray_slice,
        Test::MyArray_forany
      >::extract (
          _tao_any,
          Test::MyArray_forany::_tao_any_destructor,
          Test::_tc_MyArray,
          _tao_elem.out ()
        );
}
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_interface/any_op_cs.cpp:38
TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<Test::Foo>::to_object (
      ::CORBA::Object_ptr &_tao_elem) const
  {
    _tao_elem = ::CORBA::Object::_duplicate (this->value_);
    return true;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace Test
{
  

  /// Copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      Foo_ptr _tao_elem)
  {
    Foo_ptr _tao_objptr =
      Foo::_duplicate (_tao_elem);
    _tao_any <<= &_tao_objptr;
  }

  /// Non-copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      Foo_ptr *_tao_elem)
  {
    TAO::Any_Impl_T<Foo>::insert (
        _tao_any,
        Foo::_tao_any_destructor,
        _tc_Foo,
        *_tao_elem);
  }

  ::CORBA::Boolean
  operator>>= (
      const ::CORBA::Any &_tao_any,
      Foo_ptr &_tao_elem)
  {
    return
      TAO::Any_Impl_T<Foo>::extract (
          _tao_any,
          Foo::_tao_any_destructor,
          _tc_Foo,
          _tao_elem);
  }
}

#else

TAO_BEGIN_VERSIONED_NAMESPACE_DECL



/// Copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    Test::Foo_ptr _tao_elem)
{
  Test::Foo_ptr _tao_objptr =
    Test::Foo::_duplicate (_tao_elem);
  _tao_any <<= &_tao_objptr;
}

/// Non-copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    Test::Foo_ptr *_tao_elem)
{
  TAO::Any_Impl_T<Test::Foo>::insert (
      _tao_any,
      Test::Foo::_tao_any_destructor,
      Test::_tc_Foo,
      *_tao_elem);
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    Test::Foo_ptr &_tao_elem)
{
  return
    TAO::Any_Impl_T<Test::Foo>::extract (
        _tao_any,
        Test::Foo::_tao_any_destructor,
        Test::_tc_Foo,
        _tao_elem);
}

TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_structure/cdr_op_cs.cpp:49

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Test::MyNonVarStruct &_tao_aggregate)
{
  return
    (strm << _tao_aggregate.val);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Test::MyNonVarStruct &_tao_aggregate)
{
  return
    (strm >> _tao_aggregate.val);
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_structure/cdr_op_cs.cpp:49

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Test::MyVarStruct &_tao_aggregate)
{
  return
    (strm << _tao_aggregate.val.in ());
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Test::MyVarStruct &_tao_aggregate)
{
  return
    (strm >> _tao_aggregate.val.out ());
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_union/cdr_op_cs.cpp:74


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Test::MyNonVarUnion &_tao_union
  )
{
  if ( !(strm << _tao_union._d ()) )
    {
      return false;
    }
  
  ::CORBA::Boolean result = true;

  switch (_tao_union._d ())
  {
    case 1:
      {
        result = strm << _tao_union.valLong ();
      }
      break;
    case 2:
      {
        result = strm << _tao_union.valShort ();
      }
      break;
    default:
      break;
  }

  return result;
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Test::MyNonVarUnion &_tao_union
  )
{
  CORBA::Short _tao_discriminant;
  if ( !(strm >> _tao_discriminant) )
    {
      return false;
    }
  
  ::CORBA::Boolean result = true;

  switch (_tao_discriminant)
  {
    case 1:
      {
        CORBA::Long _tao_union_tmp;
        result = strm >> _tao_union_tmp;

        if (result)
          {
            _tao_union.valLong (_tao_union_tmp);
            _tao_union._d (_tao_discriminant);
          }
      }
      break;
    case 2:
      {
        CORBA::Short _tao_union_tmp;
        result = strm >> _tao_union_tmp;

        if (result)
          {
            _tao_union.valShort (_tao_union_tmp);
            _tao_union._d (_tao_discriminant);
          }
      }
      break;
    default:
      _tao_union._default ();
      // For maximum interop compatibility, force the same value as transmitted
      _tao_union._d (_tao_discriminant);
      break;
  }

  return result;
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_union/cdr_op_cs.cpp:74


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Test::MyVarUnion &_tao_union
  )
{
  if ( !(strm << _tao_union._d ()) )
    {
      return false;
    }
  
  ::CORBA::Boolean result = true;

  switch (_tao_union._d ())
  {
    case 1:
      {
        result = strm << _tao_union.valLong ();
      }
      break;
    case 2:
      {
        result = strm << _tao_union.valString ();
      }
      break;
    default:
      break;
  }

  return result;
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Test::MyVarUnion &_tao_union
  )
{
  CORBA::Short _tao_discriminant;
  if ( !(strm >> _tao_discriminant) )
    {
      return false;
    }
  
  ::CORBA::Boolean result = true;

  switch (_tao_discriminant)
  {
    case 1:
      {
        CORBA::Long _tao_union_tmp;
        result = strm >> _tao_union_tmp;

        if (result)
          {
            _tao_union.valLong (_tao_union_tmp);
            _tao_union._d (_tao_discriminant);
          }
      }
      break;
    case 2:
      {
        ::CORBA::String_var _tao_union_tmp;
        result = strm >> _tao_union_tmp.out ();

        if (result)
          {
            _tao_union.valString (_tao_union_tmp);
            _tao_union._d (_tao_discriminant);
          }
      }
      break;
    default:
      _tao_union._default ();
      // For maximum interop compatibility, force the same value as transmitted
      _tao_union._d (_tao_discriminant);
      break;
  }

  return result;
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_sequence/cdr_op_cs.cpp:93
#if !defined _TAO_CDR_OP_Test_MySeqOfLong_CPP_
#define _TAO_CDR_OP_Test_MySeqOfLong_CPP_

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Test::MySeqOfLong &_tao_sequence)
{
  return TAO::marshal_sequence(strm, _tao_sequence);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Test::MySeqOfLong &_tao_sequence)
{
  return TAO::demarshal_sequence(strm, _tao_sequence);
}


TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_CDR_OP_Test_MySeqOfLong_CPP_ */

// TAO_IDL - Generated from
// be/be_visitor_array/cdr_op_cs.cpp:163


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Test::MyArray_forany &_tao_array)
{
  CORBA::Boolean _tao_marshal_flag = true;
  
  for ( ::CORBA::ULong i0 = 0; i0 < 2 && _tao_marshal_flag; ++i0)
    {
      _tao_marshal_flag = (strm << _tao_array [i0]);
    }

  return _tao_marshal_flag;
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Test::MyArray_forany &_tao_array)
{
  CORBA::Boolean _tao_marshal_flag = true;
  
  for ( ::CORBA::ULong i0 = 0; i0 < 2 && _tao_marshal_flag; ++i0)
    {
      _tao_marshal_flag = (strm >> _tao_array [i0]);
    }

  return _tao_marshal_flag;
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_interface/cdr_op_cs.cpp:51

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Test::Foo_ptr _tao_objref)
{
  ::CORBA::Object_ptr _tao_corba_obj = _tao_objref;
  return (strm << _tao_corba_obj);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Test::Foo_ptr &_tao_objref)
{
  ::CORBA::Object_var obj;

  if (!(strm >> obj.inout ()))
    {
      return false;
    }
  
  typedef ::Test::Foo RHS_SCOPED_NAME;

  // Narrow to the right type.
  _tao_objref =
    TAO::Narrow_Utils<RHS_SCOPED_NAME>::unchecked_narrow (obj.in ());
    
  return true;
}

TAO_END_VERSIONED_NAMESPACE_DECL



