// -*- C++ -*-
/**
 * Code generated by the The ACE ORB (TAO) IDL Compiler v2.4.1
 * TAO and the TAO IDL Compiler have been developed by:
 *       Center for Distributed Object Computing
 *       Washington University
 *       St. Louis, MO
 *       USA
 *       http://www.cs.wustl.edu/~schmidt/doc-center.html
 * and
 *       Distributed Object Computing Laboratory
 *       University of California at Irvine
 *       Irvine, CA
 *       USA
 * and
 *       Institute for Software Integrated Systems
 *       Vanderbilt University
 *       Nashville, TN
 *       USA
 *       http://www.isis.vanderbilt.edu/
 *
 * Information about TAO is available at:
 *     http://www.dre.vanderbilt.edu/~schmidt/TAO.html
 **/


// TAO_IDL - Generated from
// be/be_visitor_union/union_ci.cpp:36

// *************************************************************
// Inline operations for union Test::MyNonVarUnion
// *************************************************************

// TAO_IDL - Generated from
// be/be_visitor_union/discriminant_ci.cpp:145

ACE_INLINE
void
Test::MyNonVarUnion::_default ()
{
  this->_reset ();
  this->disc_ = -32768;
}

// Accessor to set the discriminant.
ACE_INLINE
void
Test::MyNonVarUnion::_d ( ::CORBA::Short discval)
{
  this->disc_ = discval;
}

// Accessor to get the discriminant.
ACE_INLINE
::CORBA::Short
Test::MyNonVarUnion::_d (void) const
{
  return this->disc_;
}

// TAO_IDL - Generated from
// be/be_visitor_union_branch/public_ci.cpp:577

// Accessor to set the member.
ACE_INLINE
void
Test::MyNonVarUnion::valLong (CORBA::Long val)
{
  // Set the discriminant value.
  this->_reset ();
  this->disc_ = 1;
  // Set the value.
  this->u_.valLong_ = val;
}

/// Retrieve the member.
ACE_INLINE
::CORBA::Long
Test::MyNonVarUnion::valLong (void) const
{
  return this->u_.valLong_;
}

// TAO_IDL - Generated from
// be/be_visitor_union_branch/public_ci.cpp:577

// Accessor to set the member.
ACE_INLINE
void
Test::MyNonVarUnion::valShort (CORBA::Short val)
{
  // Set the discriminant value.
  this->_reset ();
  this->disc_ = 2;
  // Set the value.
  this->u_.valShort_ = val;
}

/// Retrieve the member.
ACE_INLINE
::CORBA::Short
Test::MyNonVarUnion::valShort (void) const
{
  return this->u_.valShort_;
}

// TAO_IDL - Generated from
// be/be_visitor_union/union_ci.cpp:36

// *************************************************************
// Inline operations for union Test::MyVarUnion
// *************************************************************

// TAO_IDL - Generated from
// be/be_visitor_union/discriminant_ci.cpp:145

ACE_INLINE
void
Test::MyVarUnion::_default ()
{
  this->_reset ();
  this->disc_ = -32768;
}

// Accessor to set the discriminant.
ACE_INLINE
void
Test::MyVarUnion::_d ( ::CORBA::Short discval)
{
  this->disc_ = discval;
}

// Accessor to get the discriminant.
ACE_INLINE
::CORBA::Short
Test::MyVarUnion::_d (void) const
{
  return this->disc_;
}

// TAO_IDL - Generated from
// be/be_visitor_union_branch/public_ci.cpp:577

// Accessor to set the member.
ACE_INLINE
void
Test::MyVarUnion::valLong (CORBA::Long val)
{
  // Set the discriminant value.
  this->_reset ();
  this->disc_ = 1;
  // Set the value.
  this->u_.valLong_ = val;
}

/// Retrieve the member.
ACE_INLINE
::CORBA::Long
Test::MyVarUnion::valLong (void) const
{
  return this->u_.valLong_;
}

// TAO_IDL - Generated from
// be/be_visitor_union_branch/public_ci.cpp:862

/// Accessor to set the member.
ACE_INLINE
void
Test::MyVarUnion::valString (char *val)
{
  // Set the discriminant value.
  this->_reset ();
  this->disc_ = 2;
  this->u_.valString_ = val;
}

// Accessor to set the member.
ACE_INLINE
void
Test::MyVarUnion::valString (const char *val)
{
  // Set the discriminant value.
  this->_reset ();
  this->disc_ = 2;
  // Set the value.
  this->u_.valString_ = ::CORBA::string_dup (val);
}

/// Accessor to set the member.
ACE_INLINE
void
Test::MyVarUnion::valString (const ::CORBA::String_var &val)
{
  // Set the discriminant value.
  this->_reset ();
  this->disc_ = 2;
  // Set the value.
  ::CORBA::String_var valString_var = val;
  this->u_.valString_ = valString_var._retn ();
}

ACE_INLINE
const char *
Test::MyVarUnion::valString (void) const // get method
{
  return this->u_.valString_;
}

// TAO_IDL - Generated from
// be/be_visitor_array/array_ci.cpp:147

TAO_BEGIN_VERSIONED_NAMESPACE_DECL


ACE_INLINE
void
TAO::Array_Traits<Test::MyArray_forany>::free (
    Test::MyArray_slice * _tao_slice)
{
  Test::MyArray_free (_tao_slice);
}

ACE_INLINE
Test::MyArray_slice *
TAO::Array_Traits<Test::MyArray_forany>::dup (
    const Test::MyArray_slice * _tao_slice)
{
  return Test::MyArray_dup (_tao_slice);
}

ACE_INLINE
void
TAO::Array_Traits<Test::MyArray_forany>::copy (
    Test::MyArray_slice * _tao_to,
    const Test::MyArray_slice * _tao_from)
{
  Test::MyArray_copy (_tao_to, _tao_from);
}

ACE_INLINE
void
TAO::Array_Traits<Test::MyArray_forany>::zero (
    Test::MyArray_slice * _tao_slice)
{
  // Zero each individual element.
  for ( ::CORBA::ULong i0 = 0; i0 < 2; ++i0)
    {
      _tao_slice[i0] = Test::MySeqOfLong ();
    }
}

ACE_INLINE
Test::MyArray_slice *
TAO::Array_Traits<Test::MyArray_forany>::alloc (void)
{
  return Test::MyArray_alloc ();
}


TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// be/be_visitor_interface/interface_ci.cpp:59

ACE_INLINE
Test::Foo::Foo (
    TAO_Stub *objref,
    ::CORBA::Boolean _tao_collocated,
    TAO_Abstract_ServantBase *servant,
    TAO_ORB_Core *oc)
  : ::CORBA::Object (objref, _tao_collocated, servant, oc)
{
}

ACE_INLINE
Test::Foo::Foo (
    ::IOP::IOR *ior,
    TAO_ORB_Core *oc)
  : ::CORBA::Object (ior, oc)
{
}

