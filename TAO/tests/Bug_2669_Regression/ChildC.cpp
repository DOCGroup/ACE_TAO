// -*- C++ -*-
/**
 * Code generated by the The ACE ORB (TAO) IDL Compiler v2.4.1
 * TAO and the TAO IDL Compiler have been developed by:
 *       Center for Distributed Object Computing
 *       Washington University
 *       St. Louis, MO
 *       USA
 *       http://www.cs.wustl.edu/~schmidt/doc-center.html
 * and
 *       Distributed Object Computing Laboratory
 *       University of California at Irvine
 *       Irvine, CA
 *       USA
 * and
 *       Institute for Software Integrated Systems
 *       Vanderbilt University
 *       Nashville, TN
 *       USA
 *       http://www.isis.vanderbilt.edu/
 *
 * Information about TAO is available at:
 *     http://www.dre.vanderbilt.edu/~schmidt/TAO.html
 **/

// TAO_IDL - Generated from
// be/be_codegen.cpp:373


#include "ChildC.h"
#include "tao/AnyTypeCode/Null_RefCount_Policy.h"
#include "tao/AnyTypeCode/TypeCode_Constants.h"
#include "tao/AnyTypeCode/Alias_TypeCode_Static.h"
#include "tao/AnyTypeCode/Objref_TypeCode_Static.h"
#include "tao/AnyTypeCode/Value_TypeCode_Static.h"
#include "tao/AnyTypeCode/TypeCode_Value_Field.h"
#include "tao/CDR.h"
#include "tao/Messaging/Asynch_Invocation_Adapter.h"
#include "tao/Messaging/ExceptionHolder_i.h"
#include "tao/Valuetype/ValueFactory.h"
#include "tao/Object_T.h"
#include "tao/CDR.h"
#include "tao/AnyTypeCode/Any.h"
#include "tao/AnyTypeCode/Any_Impl_T.h"
#include "ace/OS_NS_string.h"

#if !defined (__ACE_INLINE__)
#include "ChildC.inl"
#endif /* !defined INLINE */

// TAO_IDL - Generated from
// be/be_visitor_interface/interface_cs.cpp:48

// Traits specializations for ChildInterface.

ChildInterface_ptr
TAO::Objref_Traits<ChildInterface>::duplicate (
    ChildInterface_ptr p)
{
  return ChildInterface::_duplicate (p);
}

void
TAO::Objref_Traits<ChildInterface>::release (
    ChildInterface_ptr p)
{
  ::CORBA::release (p);
}

ChildInterface_ptr
TAO::Objref_Traits<ChildInterface>::nil (void)
{
  return ChildInterface::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<ChildInterface>::marshal (
    const ChildInterface_ptr p,
    TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

ChildInterface::ChildInterface (void)
{
}

ChildInterface::~ChildInterface (void)
{
}

void
ChildInterface::_tao_any_destructor (void *_tao_void_pointer)
{
  ChildInterface *_tao_tmp_pointer =
    static_cast<ChildInterface *> (_tao_void_pointer);
  ::CORBA::release (_tao_tmp_pointer);
}

ChildInterface_ptr
ChildInterface::_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return
    TAO::Narrow_Utils<ChildInterface>::narrow (
        _tao_objref,
        "IDL:child.pragma.prefix/ChildInterface:1.0");
}

ChildInterface_ptr
ChildInterface::_unchecked_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return
    TAO::Narrow_Utils<ChildInterface>::unchecked_narrow (
        _tao_objref);
}

ChildInterface_ptr
ChildInterface::_nil (void)
{
  return 0;
}

ChildInterface_ptr
ChildInterface::_duplicate (ChildInterface_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  return obj;
}

void
ChildInterface::_tao_release (ChildInterface_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
ChildInterface::_is_a (const char *value)
{
  if (
      ACE_OS::strcmp (
          value,
          "IDL:parent.pragma.prefix/ParentInterface:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:child.pragma.prefix/ChildInterface:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        ) == 0
    )
    {
      return true; // success using local knowledge
    }
  else
    {
      return this->::CORBA::Object::_is_a (value);
    }
}

const char* ChildInterface::_interface_repository_id (void) const
{
  return "IDL:child.pragma.prefix/ChildInterface:1.0";
}

::CORBA::Boolean
ChildInterface::marshal (TAO_OutputCDR &cdr)
{
  return (cdr << this);
}

// TAO_IDL - Generated from
// be/be_visitor_typecode/objref_typecode.cpp:70

static TAO::TypeCode::Objref<char const *,
                             TAO::Null_RefCount_Policy>
  _tao_tc_ChildInterface (
    ::CORBA::tk_objref,
    "IDL:child.pragma.prefix/ChildInterface:1.0",
    "ChildInterface");
  
::CORBA::TypeCode_ptr const _tc_ChildInterface =
  &_tao_tc_ChildInterface;

// TAO_IDL - Generated from
// be/be_visitor_interface/interface_cs.cpp:48

// Traits specializations for AMI_ChildInterfaceHandler.

AMI_ChildInterfaceHandler_ptr
TAO::Objref_Traits<AMI_ChildInterfaceHandler>::duplicate (
    AMI_ChildInterfaceHandler_ptr p)
{
  return AMI_ChildInterfaceHandler::_duplicate (p);
}

void
TAO::Objref_Traits<AMI_ChildInterfaceHandler>::release (
    AMI_ChildInterfaceHandler_ptr p)
{
  ::CORBA::release (p);
}

AMI_ChildInterfaceHandler_ptr
TAO::Objref_Traits<AMI_ChildInterfaceHandler>::nil (void)
{
  return AMI_ChildInterfaceHandler::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<AMI_ChildInterfaceHandler>::marshal (
    const AMI_ChildInterfaceHandler_ptr p,
    TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

AMI_ChildInterfaceHandler::AMI_ChildInterfaceHandler (void)
{
}

AMI_ChildInterfaceHandler::~AMI_ChildInterfaceHandler (void)
{
}

void
AMI_ChildInterfaceHandler::_tao_any_destructor (void *_tao_void_pointer)
{
  AMI_ChildInterfaceHandler *_tao_tmp_pointer =
    static_cast<AMI_ChildInterfaceHandler *> (_tao_void_pointer);
  ::CORBA::release (_tao_tmp_pointer);
}

AMI_ChildInterfaceHandler_ptr
AMI_ChildInterfaceHandler::_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return
    TAO::Narrow_Utils<AMI_ChildInterfaceHandler>::narrow (
        _tao_objref,
        "IDL:child.pragma.prefix/AMI_ChildInterfaceHandler:1.0");
}

AMI_ChildInterfaceHandler_ptr
AMI_ChildInterfaceHandler::_unchecked_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return
    TAO::Narrow_Utils<AMI_ChildInterfaceHandler>::unchecked_narrow (
        _tao_objref);
}

AMI_ChildInterfaceHandler_ptr
AMI_ChildInterfaceHandler::_nil (void)
{
  return 0;
}

AMI_ChildInterfaceHandler_ptr
AMI_ChildInterfaceHandler::_duplicate (AMI_ChildInterfaceHandler_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  return obj;
}

void
AMI_ChildInterfaceHandler::_tao_release (AMI_ChildInterfaceHandler_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
AMI_ChildInterfaceHandler::_is_a (const char *value)
{
  if (
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/Messaging/ReplyHandler:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:parent.pragma.prefix/AMI_ParentInterfaceHandler:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:child.pragma.prefix/AMI_ChildInterfaceHandler:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        ) == 0
    )
    {
      return true; // success using local knowledge
    }
  else
    {
      return this->::CORBA::Object::_is_a (value);
    }
}

const char* AMI_ChildInterfaceHandler::_interface_repository_id (void) const
{
  return "IDL:child.pragma.prefix/AMI_ChildInterfaceHandler:1.0";
}

::CORBA::Boolean
AMI_ChildInterfaceHandler::marshal (TAO_OutputCDR &cdr)
{
  return (cdr << this);
}

// TAO_IDL - Generated from
// be/be_visitor_typecode/objref_typecode.cpp:70

static TAO::TypeCode::Objref<char const *,
                             TAO::Null_RefCount_Policy>
  _tao_tc_AMI_ChildInterfaceHandler (
    ::CORBA::tk_objref,
    "IDL:child.pragma.prefix/AMI_ChildInterfaceHandler:1.0",
    "AMI_ChildInterfaceHandler");
  
::CORBA::TypeCode_ptr const _tc_AMI_ChildInterfaceHandler =
  &_tao_tc_AMI_ChildInterfaceHandler;

// TAO_IDL - Generated from
// be/be_visitor_interface/interface_cs.cpp:48

// Traits specializations for ChildModule::ChildInterface.

ChildModule::ChildInterface_ptr
TAO::Objref_Traits<ChildModule::ChildInterface>::duplicate (
    ChildModule::ChildInterface_ptr p)
{
  return ChildModule::ChildInterface::_duplicate (p);
}

void
TAO::Objref_Traits<ChildModule::ChildInterface>::release (
    ChildModule::ChildInterface_ptr p)
{
  ::CORBA::release (p);
}

ChildModule::ChildInterface_ptr
TAO::Objref_Traits<ChildModule::ChildInterface>::nil (void)
{
  return ChildModule::ChildInterface::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<ChildModule::ChildInterface>::marshal (
    const ChildModule::ChildInterface_ptr p,
    TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

ChildModule::ChildInterface::ChildInterface (void)
{
}

ChildModule::ChildInterface::~ChildInterface (void)
{
}

void
ChildModule::ChildInterface::_tao_any_destructor (void *_tao_void_pointer)
{
  ChildInterface *_tao_tmp_pointer =
    static_cast<ChildInterface *> (_tao_void_pointer);
  ::CORBA::release (_tao_tmp_pointer);
}

ChildModule::ChildInterface_ptr
ChildModule::ChildInterface::_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return
    TAO::Narrow_Utils<ChildInterface>::narrow (
        _tao_objref,
        "IDL:child.pragma.prefix/ChildModule/ChildInterface:1.0");
}

ChildModule::ChildInterface_ptr
ChildModule::ChildInterface::_unchecked_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return
    TAO::Narrow_Utils<ChildInterface>::unchecked_narrow (
        _tao_objref);
}

ChildModule::ChildInterface_ptr
ChildModule::ChildInterface::_nil (void)
{
  return 0;
}

ChildModule::ChildInterface_ptr
ChildModule::ChildInterface::_duplicate (ChildInterface_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  return obj;
}

void
ChildModule::ChildInterface::_tao_release (ChildInterface_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
ChildModule::ChildInterface::_is_a (const char *value)
{
  if (
      ACE_OS::strcmp (
          value,
          "IDL:parent.pragma.prefix/ParentModule/ParentInterface:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:child.pragma.prefix/ChildModule/ChildInterface:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        ) == 0
    )
    {
      return true; // success using local knowledge
    }
  else
    {
      return this->::CORBA::Object::_is_a (value);
    }
}

const char* ChildModule::ChildInterface::_interface_repository_id (void) const
{
  return "IDL:child.pragma.prefix/ChildModule/ChildInterface:1.0";
}

::CORBA::Boolean
ChildModule::ChildInterface::marshal (TAO_OutputCDR &cdr)
{
  return (cdr << this);
}

// TAO_IDL - Generated from
// be/be_visitor_typecode/objref_typecode.cpp:70

static TAO::TypeCode::Objref<char const *,
                             TAO::Null_RefCount_Policy>
  _tao_tc_ChildModule_ChildInterface (
    ::CORBA::tk_objref,
    "IDL:child.pragma.prefix/ChildModule/ChildInterface:1.0",
    "ChildInterface");
  

namespace ChildModule
{
  ::CORBA::TypeCode_ptr const _tc_ChildInterface =
    &_tao_tc_ChildModule_ChildInterface;
}

// TAO_IDL - Generated from
// be/be_visitor_interface/interface_cs.cpp:48

// Traits specializations for ChildModule::AMI_ChildInterfaceHandler.

ChildModule::AMI_ChildInterfaceHandler_ptr
TAO::Objref_Traits<ChildModule::AMI_ChildInterfaceHandler>::duplicate (
    ChildModule::AMI_ChildInterfaceHandler_ptr p)
{
  return ChildModule::AMI_ChildInterfaceHandler::_duplicate (p);
}

void
TAO::Objref_Traits<ChildModule::AMI_ChildInterfaceHandler>::release (
    ChildModule::AMI_ChildInterfaceHandler_ptr p)
{
  ::CORBA::release (p);
}

ChildModule::AMI_ChildInterfaceHandler_ptr
TAO::Objref_Traits<ChildModule::AMI_ChildInterfaceHandler>::nil (void)
{
  return ChildModule::AMI_ChildInterfaceHandler::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<ChildModule::AMI_ChildInterfaceHandler>::marshal (
    const ChildModule::AMI_ChildInterfaceHandler_ptr p,
    TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

ChildModule::AMI_ChildInterfaceHandler::AMI_ChildInterfaceHandler (void)
{
}

ChildModule::AMI_ChildInterfaceHandler::~AMI_ChildInterfaceHandler (void)
{
}

void
ChildModule::AMI_ChildInterfaceHandler::_tao_any_destructor (void *_tao_void_pointer)
{
  AMI_ChildInterfaceHandler *_tao_tmp_pointer =
    static_cast<AMI_ChildInterfaceHandler *> (_tao_void_pointer);
  ::CORBA::release (_tao_tmp_pointer);
}

ChildModule::AMI_ChildInterfaceHandler_ptr
ChildModule::AMI_ChildInterfaceHandler::_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return
    TAO::Narrow_Utils<AMI_ChildInterfaceHandler>::narrow (
        _tao_objref,
        "IDL:child.pragma.prefix/ChildModule/AMI_ChildInterfaceHandler:1.0");
}

ChildModule::AMI_ChildInterfaceHandler_ptr
ChildModule::AMI_ChildInterfaceHandler::_unchecked_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return
    TAO::Narrow_Utils<AMI_ChildInterfaceHandler>::unchecked_narrow (
        _tao_objref);
}

ChildModule::AMI_ChildInterfaceHandler_ptr
ChildModule::AMI_ChildInterfaceHandler::_nil (void)
{
  return 0;
}

ChildModule::AMI_ChildInterfaceHandler_ptr
ChildModule::AMI_ChildInterfaceHandler::_duplicate (AMI_ChildInterfaceHandler_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  return obj;
}

void
ChildModule::AMI_ChildInterfaceHandler::_tao_release (AMI_ChildInterfaceHandler_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
ChildModule::AMI_ChildInterfaceHandler::_is_a (const char *value)
{
  if (
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/Messaging/ReplyHandler:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:parent.pragma.prefix/ParentModule/AMI_ParentInterfaceHandler:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:child.pragma.prefix/ChildModule/AMI_ChildInterfaceHandler:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        ) == 0
    )
    {
      return true; // success using local knowledge
    }
  else
    {
      return this->::CORBA::Object::_is_a (value);
    }
}

const char* ChildModule::AMI_ChildInterfaceHandler::_interface_repository_id (void) const
{
  return "IDL:child.pragma.prefix/ChildModule/AMI_ChildInterfaceHandler:1.0";
}

::CORBA::Boolean
ChildModule::AMI_ChildInterfaceHandler::marshal (TAO_OutputCDR &cdr)
{
  return (cdr << this);
}

// TAO_IDL - Generated from
// be/be_visitor_typecode/objref_typecode.cpp:70

static TAO::TypeCode::Objref<char const *,
                             TAO::Null_RefCount_Policy>
  _tao_tc_ChildModule_AMI_ChildInterfaceHandler (
    ::CORBA::tk_objref,
    "IDL:child.pragma.prefix/ChildModule/AMI_ChildInterfaceHandler:1.0",
    "AMI_ChildInterfaceHandler");
  

namespace ChildModule
{
  ::CORBA::TypeCode_ptr const _tc_AMI_ChildInterfaceHandler =
    &_tao_tc_ChildModule_AMI_ChildInterfaceHandler;
}

// TAO_IDL - Generated from
// be/be_visitor_interface/any_op_cs.cpp:38
TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<ChildInterface>::to_object (
      ::CORBA::Object_ptr &_tao_elem) const
  {
    _tao_elem = ::CORBA::Object::_duplicate (this->value_);
    return true;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



/// Copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    ChildInterface_ptr _tao_elem)
{
  ChildInterface_ptr _tao_objptr =
    ChildInterface::_duplicate (_tao_elem);
  _tao_any <<= &_tao_objptr;
}

/// Non-copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    ChildInterface_ptr *_tao_elem)
{
  TAO::Any_Impl_T<ChildInterface>::insert (
      _tao_any,
      ChildInterface::_tao_any_destructor,
      _tc_ChildInterface,
      *_tao_elem);
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    ChildInterface_ptr &_tao_elem)
{
  return
    TAO::Any_Impl_T<ChildInterface>::extract (
        _tao_any,
        ChildInterface::_tao_any_destructor,
        _tc_ChildInterface,
        _tao_elem);
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_interface/any_op_cs.cpp:38
TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<AMI_ChildInterfaceHandler>::to_object (
      ::CORBA::Object_ptr &_tao_elem) const
  {
    _tao_elem = ::CORBA::Object::_duplicate (this->value_);
    return true;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



/// Copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    AMI_ChildInterfaceHandler_ptr _tao_elem)
{
  AMI_ChildInterfaceHandler_ptr _tao_objptr =
    AMI_ChildInterfaceHandler::_duplicate (_tao_elem);
  _tao_any <<= &_tao_objptr;
}

/// Non-copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    AMI_ChildInterfaceHandler_ptr *_tao_elem)
{
  TAO::Any_Impl_T<AMI_ChildInterfaceHandler>::insert (
      _tao_any,
      AMI_ChildInterfaceHandler::_tao_any_destructor,
      _tc_AMI_ChildInterfaceHandler,
      *_tao_elem);
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    AMI_ChildInterfaceHandler_ptr &_tao_elem)
{
  return
    TAO::Any_Impl_T<AMI_ChildInterfaceHandler>::extract (
        _tao_any,
        AMI_ChildInterfaceHandler::_tao_any_destructor,
        _tc_AMI_ChildInterfaceHandler,
        _tao_elem);
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_interface/any_op_cs.cpp:38
TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<ChildModule::ChildInterface>::to_object (
      ::CORBA::Object_ptr &_tao_elem) const
  {
    _tao_elem = ::CORBA::Object::_duplicate (this->value_);
    return true;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace ChildModule
{
  

  /// Copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      ChildInterface_ptr _tao_elem)
  {
    ChildInterface_ptr _tao_objptr =
      ChildInterface::_duplicate (_tao_elem);
    _tao_any <<= &_tao_objptr;
  }

  /// Non-copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      ChildInterface_ptr *_tao_elem)
  {
    TAO::Any_Impl_T<ChildInterface>::insert (
        _tao_any,
        ChildInterface::_tao_any_destructor,
        _tc_ChildInterface,
        *_tao_elem);
  }

  ::CORBA::Boolean
  operator>>= (
      const ::CORBA::Any &_tao_any,
      ChildInterface_ptr &_tao_elem)
  {
    return
      TAO::Any_Impl_T<ChildInterface>::extract (
          _tao_any,
          ChildInterface::_tao_any_destructor,
          _tc_ChildInterface,
          _tao_elem);
  }
}

#else

TAO_BEGIN_VERSIONED_NAMESPACE_DECL



/// Copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    ChildModule::ChildInterface_ptr _tao_elem)
{
  ChildModule::ChildInterface_ptr _tao_objptr =
    ChildModule::ChildInterface::_duplicate (_tao_elem);
  _tao_any <<= &_tao_objptr;
}

/// Non-copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    ChildModule::ChildInterface_ptr *_tao_elem)
{
  TAO::Any_Impl_T<ChildModule::ChildInterface>::insert (
      _tao_any,
      ChildModule::ChildInterface::_tao_any_destructor,
      ChildModule::_tc_ChildInterface,
      *_tao_elem);
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    ChildModule::ChildInterface_ptr &_tao_elem)
{
  return
    TAO::Any_Impl_T<ChildModule::ChildInterface>::extract (
        _tao_any,
        ChildModule::ChildInterface::_tao_any_destructor,
        ChildModule::_tc_ChildInterface,
        _tao_elem);
}

TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_interface/any_op_cs.cpp:38
TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<ChildModule::AMI_ChildInterfaceHandler>::to_object (
      ::CORBA::Object_ptr &_tao_elem) const
  {
    _tao_elem = ::CORBA::Object::_duplicate (this->value_);
    return true;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace ChildModule
{
  

  /// Copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      AMI_ChildInterfaceHandler_ptr _tao_elem)
  {
    AMI_ChildInterfaceHandler_ptr _tao_objptr =
      AMI_ChildInterfaceHandler::_duplicate (_tao_elem);
    _tao_any <<= &_tao_objptr;
  }

  /// Non-copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      AMI_ChildInterfaceHandler_ptr *_tao_elem)
  {
    TAO::Any_Impl_T<AMI_ChildInterfaceHandler>::insert (
        _tao_any,
        AMI_ChildInterfaceHandler::_tao_any_destructor,
        _tc_AMI_ChildInterfaceHandler,
        *_tao_elem);
  }

  ::CORBA::Boolean
  operator>>= (
      const ::CORBA::Any &_tao_any,
      AMI_ChildInterfaceHandler_ptr &_tao_elem)
  {
    return
      TAO::Any_Impl_T<AMI_ChildInterfaceHandler>::extract (
          _tao_any,
          AMI_ChildInterfaceHandler::_tao_any_destructor,
          _tc_AMI_ChildInterfaceHandler,
          _tao_elem);
  }
}

#else

TAO_BEGIN_VERSIONED_NAMESPACE_DECL



/// Copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    ChildModule::AMI_ChildInterfaceHandler_ptr _tao_elem)
{
  ChildModule::AMI_ChildInterfaceHandler_ptr _tao_objptr =
    ChildModule::AMI_ChildInterfaceHandler::_duplicate (_tao_elem);
  _tao_any <<= &_tao_objptr;
}

/// Non-copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    ChildModule::AMI_ChildInterfaceHandler_ptr *_tao_elem)
{
  TAO::Any_Impl_T<ChildModule::AMI_ChildInterfaceHandler>::insert (
      _tao_any,
      ChildModule::AMI_ChildInterfaceHandler::_tao_any_destructor,
      ChildModule::_tc_AMI_ChildInterfaceHandler,
      *_tao_elem);
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    ChildModule::AMI_ChildInterfaceHandler_ptr &_tao_elem)
{
  return
    TAO::Any_Impl_T<ChildModule::AMI_ChildInterfaceHandler>::extract (
        _tao_any,
        ChildModule::AMI_ChildInterfaceHandler::_tao_any_destructor,
        ChildModule::_tc_AMI_ChildInterfaceHandler,
        _tao_elem);
}

TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_interface/cdr_op_cs.cpp:51

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const ChildInterface_ptr _tao_objref)
{
  ::CORBA::Object_ptr _tao_corba_obj = _tao_objref;
  return (strm << _tao_corba_obj);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    ChildInterface_ptr &_tao_objref)
{
  ::CORBA::Object_var obj;

  if (!(strm >> obj.inout ()))
    {
      return false;
    }
  
  typedef ::ChildInterface RHS_SCOPED_NAME;

  // Narrow to the right type.
  _tao_objref =
    TAO::Narrow_Utils<RHS_SCOPED_NAME>::unchecked_narrow (obj.in ());
    
  return true;
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_interface/cdr_op_cs.cpp:51

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const AMI_ChildInterfaceHandler_ptr _tao_objref)
{
  ::CORBA::Object_ptr _tao_corba_obj = _tao_objref;
  return (strm << _tao_corba_obj);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    AMI_ChildInterfaceHandler_ptr &_tao_objref)
{
  ::CORBA::Object_var obj;

  if (!(strm >> obj.inout ()))
    {
      return false;
    }
  
  typedef ::AMI_ChildInterfaceHandler RHS_SCOPED_NAME;

  // Narrow to the right type.
  _tao_objref =
    TAO::Narrow_Utils<RHS_SCOPED_NAME>::unchecked_narrow (obj.in ());
    
  return true;
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_interface/cdr_op_cs.cpp:51

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const ChildModule::ChildInterface_ptr _tao_objref)
{
  ::CORBA::Object_ptr _tao_corba_obj = _tao_objref;
  return (strm << _tao_corba_obj);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    ChildModule::ChildInterface_ptr &_tao_objref)
{
  ::CORBA::Object_var obj;

  if (!(strm >> obj.inout ()))
    {
      return false;
    }
  
  typedef ::ChildModule::ChildInterface RHS_SCOPED_NAME;

  // Narrow to the right type.
  _tao_objref =
    TAO::Narrow_Utils<RHS_SCOPED_NAME>::unchecked_narrow (obj.in ());
    
  return true;
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_interface/cdr_op_cs.cpp:51

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const ChildModule::AMI_ChildInterfaceHandler_ptr _tao_objref)
{
  ::CORBA::Object_ptr _tao_corba_obj = _tao_objref;
  return (strm << _tao_corba_obj);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    ChildModule::AMI_ChildInterfaceHandler_ptr &_tao_objref)
{
  ::CORBA::Object_var obj;

  if (!(strm >> obj.inout ()))
    {
      return false;
    }
  
  typedef ::ChildModule::AMI_ChildInterfaceHandler RHS_SCOPED_NAME;

  // Narrow to the right type.
  _tao_objref =
    TAO::Narrow_Utils<RHS_SCOPED_NAME>::unchecked_narrow (obj.in ());
    
  return true;
}

TAO_END_VERSIONED_NAMESPACE_DECL



