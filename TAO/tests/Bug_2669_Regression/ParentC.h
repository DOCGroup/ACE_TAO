// -*- C++ -*-
/**
 * Code generated by the The ACE ORB (TAO) IDL Compiler v2.4.1
 * TAO and the TAO IDL Compiler have been developed by:
 *       Center for Distributed Object Computing
 *       Washington University
 *       St. Louis, MO
 *       USA
 *       http://www.cs.wustl.edu/~schmidt/doc-center.html
 * and
 *       Distributed Object Computing Laboratory
 *       University of California at Irvine
 *       Irvine, CA
 *       USA
 * and
 *       Institute for Software Integrated Systems
 *       Vanderbilt University
 *       Nashville, TN
 *       USA
 *       http://www.isis.vanderbilt.edu/
 *
 * Information about TAO is available at:
 *     http://www.dre.vanderbilt.edu/~schmidt/TAO.html
 **/

// TAO_IDL - Generated from
// be/be_codegen.cpp:149

#ifndef _TAO_IDL_PARENTC_MWM9UO_H_
#define _TAO_IDL_PARENTC_MWM9UO_H_

#include /**/ "ace/pre.h"


#include /**/ "ace/config-all.h"

#if !defined (ACE_LACKS_PRAGMA_ONCE)
# pragma once
#endif /* ACE_LACKS_PRAGMA_ONCE */


#include "tao/AnyTypeCode/AnyTypeCode_methods.h"
#include "tao/AnyTypeCode/Any.h"
#include "tao/ORB.h"
#include "tao/Basic_Types.h"
#include "tao/Object.h"
#include "tao/Messaging/Messaging.h"
#include "tao/Objref_VarOut_T.h"
#include "tao/Arg_Traits_T.h"
#include "tao/Basic_Arguments.h"
#include "tao/Special_Basic_Arguments.h"
#include "tao/Any_Insert_Policy_T.h"
#include "tao/Fixed_Size_Argument_T.h"
#include "tao/Var_Size_Argument_T.h"
#include "tao/Object_Argument_T.h"
#include /**/ "tao/Version.h"
#include /**/ "tao/Versioned_Namespace.h"

#if TAO_MAJOR_VERSION != 2 || TAO_MINOR_VERSION != 4 || TAO_MICRO_VERSION != 1
#error This file should be regenerated with TAO_IDL
#endif

#if defined (TAO_EXPORT_MACRO)
#undef TAO_EXPORT_MACRO
#endif
#define TAO_EXPORT_MACRO 

// TAO_IDL - Generated from
// be/be_visitor_root/root_ch.cpp:157
TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<typename T> class Narrow_Utils;
}
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_interface.cpp:748

#if !defined (_PARENTINTERFACE__VAR_OUT_CH_)
#define _PARENTINTERFACE__VAR_OUT_CH_

class AMI_ParentInterfaceHandler;
typedef AMI_ParentInterfaceHandler *AMI_ParentInterfaceHandler_ptr;

class ParentInterface;
typedef ParentInterface *ParentInterface_ptr;

typedef
  TAO_Objref_Var_T<
      ParentInterface
    >
  ParentInterface_var;

typedef
  TAO_Objref_Out_T<
      ParentInterface
    >
  ParentInterface_out;

#endif /* end #if !defined */

// TAO_IDL - Generated from
// be/be_visitor_interface/interface_ch.cpp:40

class  ParentInterface
  : public virtual ::CORBA::Object
{
public:
  friend class TAO::Narrow_Utils<ParentInterface>;

  // TAO_IDL - Generated from
  // be/be_type.cpp:304

  typedef ParentInterface_ptr _ptr_type;
  typedef ParentInterface_var _var_type;
  typedef ParentInterface_out _out_type;

  static void _tao_any_destructor (void *);

  // The static operations.
  static ParentInterface_ptr _duplicate (ParentInterface_ptr obj);

  static void _tao_release (ParentInterface_ptr obj);

  static ParentInterface_ptr _narrow (::CORBA::Object_ptr obj);
  static ParentInterface_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
  static ParentInterface_ptr _nil (void);

  // TAO_IDL - Generated from
  // be/be_visitor_interface/interface_ch.cpp:137

  virtual ::CORBA::Boolean _is_a (const char *type_id);
  virtual const char* _interface_repository_id (void) const;
  virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);

protected:
  // Concrete interface only.
  ParentInterface (void);

  // Concrete non-local interface only.
  ParentInterface (
      ::IOP::IOR *ior,
      TAO_ORB_Core *orb_core);
  
  // Non-local interface only.
  ParentInterface (
      TAO_Stub *objref,
      ::CORBA::Boolean _tao_collocated = false,
      TAO_Abstract_ServantBase *servant = 0,
      TAO_ORB_Core *orb_core = 0);

  virtual ~ParentInterface (void);

private:
  // Private and unimplemented for concrete interfaces.
  ParentInterface (const ParentInterface &);

  void operator= (const ParentInterface &);
};

// TAO_IDL - Generated from
// be/be_visitor_typecode/typecode_decl.cpp:34

extern  ::CORBA::TypeCode_ptr const _tc_ParentInterface;

// TAO_IDL - Generated from
// be/be_interface.cpp:748

#if !defined (_AMI_PARENTINTERFACEHANDLER__VAR_OUT_CH_)
#define _AMI_PARENTINTERFACEHANDLER__VAR_OUT_CH_

class AMI_ParentInterfaceHandler;
typedef AMI_ParentInterfaceHandler *AMI_ParentInterfaceHandler_ptr;

typedef
  TAO_Objref_Var_T<
      AMI_ParentInterfaceHandler
    >
  AMI_ParentInterfaceHandler_var;

typedef
  TAO_Objref_Out_T<
      AMI_ParentInterfaceHandler
    >
  AMI_ParentInterfaceHandler_out;

#endif /* end #if !defined */

// TAO_IDL - Generated from
// be/be_visitor_interface/interface_ch.cpp:40

class  AMI_ParentInterfaceHandler
  : public virtual ::Messaging::ReplyHandler

{
public:
  friend class TAO::Narrow_Utils<AMI_ParentInterfaceHandler>;

  // TAO_IDL - Generated from
  // be/be_type.cpp:304

  typedef AMI_ParentInterfaceHandler_ptr _ptr_type;
  typedef AMI_ParentInterfaceHandler_var _var_type;
  typedef AMI_ParentInterfaceHandler_out _out_type;

  static void _tao_any_destructor (void *);

  // The static operations.
  static AMI_ParentInterfaceHandler_ptr _duplicate (AMI_ParentInterfaceHandler_ptr obj);

  static void _tao_release (AMI_ParentInterfaceHandler_ptr obj);

  static AMI_ParentInterfaceHandler_ptr _narrow (::CORBA::Object_ptr obj);
  static AMI_ParentInterfaceHandler_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
  static AMI_ParentInterfaceHandler_ptr _nil (void);

  // TAO_IDL - Generated from
  // be/be_visitor_interface/interface_ch.cpp:137

  virtual ::CORBA::Boolean _is_a (const char *type_id);
  virtual const char* _interface_repository_id (void) const;
  virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);

protected:
  // Concrete interface only.
  AMI_ParentInterfaceHandler (void);

  // Concrete non-local interface only.
  AMI_ParentInterfaceHandler (
      ::IOP::IOR *ior,
      TAO_ORB_Core *orb_core);
  
  // Non-local interface only.
  AMI_ParentInterfaceHandler (
      TAO_Stub *objref,
      ::CORBA::Boolean _tao_collocated = false,
      TAO_Abstract_ServantBase *servant = 0,
      TAO_ORB_Core *orb_core = 0);

  virtual ~AMI_ParentInterfaceHandler (void);

private:
  // Private and unimplemented for concrete interfaces.
  AMI_ParentInterfaceHandler (const AMI_ParentInterfaceHandler &);

  void operator= (const AMI_ParentInterfaceHandler &);
};

// TAO_IDL - Generated from
// be/be_visitor_typecode/typecode_decl.cpp:34

extern  ::CORBA::TypeCode_ptr const _tc_AMI_ParentInterfaceHandler;

// TAO_IDL - Generated from
// be/be_visitor_module/module_ch.cpp:35

namespace ParentModule
{

  // TAO_IDL - Generated from
  // be/be_interface.cpp:748

#if !defined (_PARENTMODULE_PARENTINTERFACE__VAR_OUT_CH_)
#define _PARENTMODULE_PARENTINTERFACE__VAR_OUT_CH_

  class AMI_ParentInterfaceHandler;
  typedef AMI_ParentInterfaceHandler *AMI_ParentInterfaceHandler_ptr;

  class ParentInterface;
  typedef ParentInterface *ParentInterface_ptr;

  typedef
    TAO_Objref_Var_T<
        ParentInterface
      >
    ParentInterface_var;
  
  typedef
    TAO_Objref_Out_T<
        ParentInterface
      >
    ParentInterface_out;

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // be/be_visitor_interface/interface_ch.cpp:40

  class  ParentInterface
    : public virtual ::CORBA::Object
  {
  public:
    friend class TAO::Narrow_Utils<ParentInterface>;

    // TAO_IDL - Generated from
    // be/be_type.cpp:304

    typedef ParentInterface_ptr _ptr_type;
    typedef ParentInterface_var _var_type;
    typedef ParentInterface_out _out_type;

    static void _tao_any_destructor (void *);

    // The static operations.
    static ParentInterface_ptr _duplicate (ParentInterface_ptr obj);

    static void _tao_release (ParentInterface_ptr obj);

    static ParentInterface_ptr _narrow (::CORBA::Object_ptr obj);
    static ParentInterface_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
    static ParentInterface_ptr _nil (void);

    // TAO_IDL - Generated from
    // be/be_visitor_interface/interface_ch.cpp:137

    virtual ::CORBA::Boolean _is_a (const char *type_id);
    virtual const char* _interface_repository_id (void) const;
    virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);
  
  protected:
    // Concrete interface only.
    ParentInterface (void);

    // Concrete non-local interface only.
    ParentInterface (
        ::IOP::IOR *ior,
        TAO_ORB_Core *orb_core);
    
    // Non-local interface only.
    ParentInterface (
        TAO_Stub *objref,
        ::CORBA::Boolean _tao_collocated = false,
        TAO_Abstract_ServantBase *servant = 0,
        TAO_ORB_Core *orb_core = 0);

    virtual ~ParentInterface (void);
  
  private:
    // Private and unimplemented for concrete interfaces.
    ParentInterface (const ParentInterface &);

    void operator= (const ParentInterface &);
  };

  // TAO_IDL - Generated from
  // be/be_visitor_typecode/typecode_decl.cpp:34

  extern  ::CORBA::TypeCode_ptr const _tc_ParentInterface;

  // TAO_IDL - Generated from
  // be/be_interface.cpp:748

#if !defined (_PARENTMODULE_AMI_PARENTINTERFACEHANDLER__VAR_OUT_CH_)
#define _PARENTMODULE_AMI_PARENTINTERFACEHANDLER__VAR_OUT_CH_

  class AMI_ParentInterfaceHandler;
  typedef AMI_ParentInterfaceHandler *AMI_ParentInterfaceHandler_ptr;

  typedef
    TAO_Objref_Var_T<
        AMI_ParentInterfaceHandler
      >
    AMI_ParentInterfaceHandler_var;
  
  typedef
    TAO_Objref_Out_T<
        AMI_ParentInterfaceHandler
      >
    AMI_ParentInterfaceHandler_out;

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // be/be_visitor_interface/interface_ch.cpp:40

  class  AMI_ParentInterfaceHandler
    : public virtual ::Messaging::ReplyHandler
  
  {
  public:
    friend class TAO::Narrow_Utils<AMI_ParentInterfaceHandler>;

    // TAO_IDL - Generated from
    // be/be_type.cpp:304

    typedef AMI_ParentInterfaceHandler_ptr _ptr_type;
    typedef AMI_ParentInterfaceHandler_var _var_type;
    typedef AMI_ParentInterfaceHandler_out _out_type;

    static void _tao_any_destructor (void *);

    // The static operations.
    static AMI_ParentInterfaceHandler_ptr _duplicate (AMI_ParentInterfaceHandler_ptr obj);

    static void _tao_release (AMI_ParentInterfaceHandler_ptr obj);

    static AMI_ParentInterfaceHandler_ptr _narrow (::CORBA::Object_ptr obj);
    static AMI_ParentInterfaceHandler_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
    static AMI_ParentInterfaceHandler_ptr _nil (void);

    // TAO_IDL - Generated from
    // be/be_visitor_interface/interface_ch.cpp:137

    virtual ::CORBA::Boolean _is_a (const char *type_id);
    virtual const char* _interface_repository_id (void) const;
    virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);
  
  protected:
    // Concrete interface only.
    AMI_ParentInterfaceHandler (void);

    // Concrete non-local interface only.
    AMI_ParentInterfaceHandler (
        ::IOP::IOR *ior,
        TAO_ORB_Core *orb_core);
    
    // Non-local interface only.
    AMI_ParentInterfaceHandler (
        TAO_Stub *objref,
        ::CORBA::Boolean _tao_collocated = false,
        TAO_Abstract_ServantBase *servant = 0,
        TAO_ORB_Core *orb_core = 0);

    virtual ~AMI_ParentInterfaceHandler (void);
  
  private:
    // Private and unimplemented for concrete interfaces.
    AMI_ParentInterfaceHandler (const AMI_ParentInterfaceHandler &);

    void operator= (const AMI_ParentInterfaceHandler &);
  };

  // TAO_IDL - Generated from
  // be/be_visitor_typecode/typecode_decl.cpp:34

  extern  ::CORBA::TypeCode_ptr const _tc_AMI_ParentInterfaceHandler;

// TAO_IDL - Generated from
// be/be_visitor_module/module_ch.cpp:64

} // module ParentModule

// TAO_IDL - Generated from
// be/be_visitor_arg_traits.cpp:66

TAO_BEGIN_VERSIONED_NAMESPACE_DECL


// Arg traits specializations.
namespace TAO
{

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:306

#if !defined (_MESSAGING_EXCEPTIONHOLDER__ARG_TRAITS_)
#define _MESSAGING_EXCEPTIONHOLDER__ARG_TRAITS_

  template<>
  class Arg_Traits< ::Messaging::ExceptionHolder>
    : public
        Object_Arg_Traits_T<
            ::Messaging::ExceptionHolder *,
            ::Messaging::ExceptionHolder_var,
            ::Messaging::ExceptionHolder_out,
            TAO::Value_Traits<Messaging::ExceptionHolder>,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:145

#if !defined (_PARENTINTERFACE__ARG_TRAITS_)
#define _PARENTINTERFACE__ARG_TRAITS_

  template<>
  class  Arg_Traits< ::ParentInterface>
    : public
        Object_Arg_Traits_T<
            ::ParentInterface_ptr,
            ::ParentInterface_var,
            ::ParentInterface_out,
            TAO::Objref_Traits<ParentInterface>,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:145

#if !defined (_AMI_PARENTINTERFACEHANDLER__ARG_TRAITS_)
#define _AMI_PARENTINTERFACEHANDLER__ARG_TRAITS_

  template<>
  class  Arg_Traits< ::AMI_ParentInterfaceHandler>
    : public
        Object_Arg_Traits_T<
            ::AMI_ParentInterfaceHandler_ptr,
            ::AMI_ParentInterfaceHandler_var,
            ::AMI_ParentInterfaceHandler_out,
            TAO::Objref_Traits<AMI_ParentInterfaceHandler>,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:145

#if !defined (_PARENTMODULE_PARENTINTERFACE__ARG_TRAITS_)
#define _PARENTMODULE_PARENTINTERFACE__ARG_TRAITS_

  template<>
  class  Arg_Traits< ::ParentModule::ParentInterface>
    : public
        Object_Arg_Traits_T<
            ::ParentModule::ParentInterface_ptr,
            ::ParentModule::ParentInterface_var,
            ::ParentModule::ParentInterface_out,
            TAO::Objref_Traits<ParentModule::ParentInterface>,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:145

#if !defined (_PARENTMODULE_AMI_PARENTINTERFACEHANDLER__ARG_TRAITS_)
#define _PARENTMODULE_AMI_PARENTINTERFACEHANDLER__ARG_TRAITS_

  template<>
  class  Arg_Traits< ::ParentModule::AMI_ParentInterfaceHandler>
    : public
        Object_Arg_Traits_T<
            ::ParentModule::AMI_ParentInterfaceHandler_ptr,
            ::ParentModule::AMI_ParentInterfaceHandler_var,
            ::ParentModule::AMI_ParentInterfaceHandler_out,
            TAO::Objref_Traits<ParentModule::AMI_ParentInterfaceHandler>,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

#endif /* end #if !defined */
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_traits.cpp:60

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Traits specializations.
namespace TAO
{

#if !defined (_PARENTINTERFACE__TRAITS_)
#define _PARENTINTERFACE__TRAITS_

  template<>
  struct  Objref_Traits< ::ParentInterface>
  {
    static ::ParentInterface_ptr duplicate (
        ::ParentInterface_ptr p);
    static void release (
        ::ParentInterface_ptr p);
    static ::ParentInterface_ptr nil (void);
    static ::CORBA::Boolean marshal (
        const ::ParentInterface_ptr p,
        TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_AMI_PARENTINTERFACEHANDLER__TRAITS_)
#define _AMI_PARENTINTERFACEHANDLER__TRAITS_

  template<>
  struct  Objref_Traits< ::AMI_ParentInterfaceHandler>
  {
    static ::AMI_ParentInterfaceHandler_ptr duplicate (
        ::AMI_ParentInterfaceHandler_ptr p);
    static void release (
        ::AMI_ParentInterfaceHandler_ptr p);
    static ::AMI_ParentInterfaceHandler_ptr nil (void);
    static ::CORBA::Boolean marshal (
        const ::AMI_ParentInterfaceHandler_ptr p,
        TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_PARENTMODULE_PARENTINTERFACE__TRAITS_)
#define _PARENTMODULE_PARENTINTERFACE__TRAITS_

  template<>
  struct  Objref_Traits< ::ParentModule::ParentInterface>
  {
    static ::ParentModule::ParentInterface_ptr duplicate (
        ::ParentModule::ParentInterface_ptr p);
    static void release (
        ::ParentModule::ParentInterface_ptr p);
    static ::ParentModule::ParentInterface_ptr nil (void);
    static ::CORBA::Boolean marshal (
        const ::ParentModule::ParentInterface_ptr p,
        TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_PARENTMODULE_AMI_PARENTINTERFACEHANDLER__TRAITS_)
#define _PARENTMODULE_AMI_PARENTINTERFACEHANDLER__TRAITS_

  template<>
  struct  Objref_Traits< ::ParentModule::AMI_ParentInterfaceHandler>
  {
    static ::ParentModule::AMI_ParentInterfaceHandler_ptr duplicate (
        ::ParentModule::AMI_ParentInterfaceHandler_ptr p);
    static void release (
        ::ParentModule::AMI_ParentInterfaceHandler_ptr p);
    static ::ParentModule::AMI_ParentInterfaceHandler_ptr nil (void);
    static ::CORBA::Boolean marshal (
        const ::ParentModule::AMI_ParentInterfaceHandler_ptr p,
        TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */
}
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_interface/any_op_ch.cpp:41


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 void operator<<= (::CORBA::Any &, ParentInterface_ptr); // copying
 void operator<<= (::CORBA::Any &, ParentInterface_ptr *); // non-copying
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, ParentInterface_ptr &);
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_interface/any_op_ch.cpp:41


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 void operator<<= (::CORBA::Any &, AMI_ParentInterfaceHandler_ptr); // copying
 void operator<<= (::CORBA::Any &, AMI_ParentInterfaceHandler_ptr *); // non-copying
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, AMI_ParentInterfaceHandler_ptr &);
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_interface/any_op_ch.cpp:41



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace ParentModule
{
   void operator<<= ( ::CORBA::Any &, ParentInterface_ptr); // copying
   void operator<<= ( ::CORBA::Any &, ParentInterface_ptr *); // non-copying
   ::CORBA::Boolean operator>>= (const ::CORBA::Any &, ParentInterface_ptr &);
}

#else


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 void operator<<= (::CORBA::Any &, ParentModule::ParentInterface_ptr); // copying
 void operator<<= (::CORBA::Any &, ParentModule::ParentInterface_ptr *); // non-copying
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, ParentModule::ParentInterface_ptr &);
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_interface/any_op_ch.cpp:41



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace ParentModule
{
   void operator<<= ( ::CORBA::Any &, AMI_ParentInterfaceHandler_ptr); // copying
   void operator<<= ( ::CORBA::Any &, AMI_ParentInterfaceHandler_ptr *); // non-copying
   ::CORBA::Boolean operator>>= (const ::CORBA::Any &, AMI_ParentInterfaceHandler_ptr &);
}

#else


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 void operator<<= (::CORBA::Any &, ParentModule::AMI_ParentInterfaceHandler_ptr); // copying
 void operator<<= (::CORBA::Any &, ParentModule::AMI_ParentInterfaceHandler_ptr *); // non-copying
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, ParentModule::AMI_ParentInterfaceHandler_ptr &);
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_interface/cdr_op_ch.cpp:41

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 ::CORBA::Boolean operator<< (TAO_OutputCDR &, const ParentInterface_ptr );
 ::CORBA::Boolean operator>> (TAO_InputCDR &, ParentInterface_ptr &);

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_interface/cdr_op_ch.cpp:41

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 ::CORBA::Boolean operator<< (TAO_OutputCDR &, const AMI_ParentInterfaceHandler_ptr );
 ::CORBA::Boolean operator>> (TAO_InputCDR &, AMI_ParentInterfaceHandler_ptr &);

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_interface/cdr_op_ch.cpp:41

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 ::CORBA::Boolean operator<< (TAO_OutputCDR &, const ParentModule::ParentInterface_ptr );
 ::CORBA::Boolean operator>> (TAO_InputCDR &, ParentModule::ParentInterface_ptr &);

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_interface/cdr_op_ch.cpp:41

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 ::CORBA::Boolean operator<< (TAO_OutputCDR &, const ParentModule::AMI_ParentInterfaceHandler_ptr );
 ::CORBA::Boolean operator>> (TAO_InputCDR &, ParentModule::AMI_ParentInterfaceHandler_ptr &);

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_codegen.cpp:1700
#if defined (__ACE_INLINE__)
#include "ParentC.inl"
#endif /* defined INLINE */

#include /**/ "ace/post.h"

#endif /* ifndef */

