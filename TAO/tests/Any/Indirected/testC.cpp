// -*- C++ -*-
/**
 * Code generated by the The ACE ORB (TAO) IDL Compiler v2.4.1
 * TAO and the TAO IDL Compiler have been developed by:
 *       Center for Distributed Object Computing
 *       Washington University
 *       St. Louis, MO
 *       USA
 *       http://www.cs.wustl.edu/~schmidt/doc-center.html
 * and
 *       Distributed Object Computing Laboratory
 *       University of California at Irvine
 *       Irvine, CA
 *       USA
 * and
 *       Institute for Software Integrated Systems
 *       Vanderbilt University
 *       Nashville, TN
 *       USA
 *       http://www.isis.vanderbilt.edu/
 *
 * Information about TAO is available at:
 *     http://www.dre.vanderbilt.edu/~schmidt/TAO.html
 **/

// TAO_IDL - Generated from
// be/be_codegen.cpp:373


#include "testC.h"
#include "tao/AnyTypeCode/Null_RefCount_Policy.h"
#include "tao/AnyTypeCode/TypeCode_Constants.h"
#include "tao/AnyTypeCode/Alias_TypeCode_Static.h"
#include "tao/AnyTypeCode/Sequence_TypeCode_Static.h"
#include "tao/AnyTypeCode/Struct_TypeCode_Static.h"
#include "tao/AnyTypeCode/TypeCode_Struct_Field.h"
#include "tao/AnyTypeCode/TypeCode_Case_T.h"
#include "tao/AnyTypeCode/Union_TypeCode_Static.h"
#include "tao/AnyTypeCode/Recursive_Type_TypeCode.h"
#include "tao/CDR.h"
#include "tao/CDR.h"
#include "tao/AnyTypeCode/Any_Dual_Impl_T.h"
#include "ace/OS_NS_string.h"

#if !defined (__ACE_INLINE__)
#include "testC.inl"
#endif /* !defined INLINE */

// TAO_IDL - Generated from
// be/be_visitor_sequence/sequence_cs.cpp:70

#if !defined (_TEST_RECURSIVESTRUCTSEQ3_CS_)
#define _TEST_RECURSIVESTRUCTSEQ3_CS_

Test::RecursiveStructSeq3::RecursiveStructSeq3 (void)
{}

Test::RecursiveStructSeq3::RecursiveStructSeq3 (
    ::CORBA::ULong max)
  : ::TAO::unbounded_value_sequence<
        RecursiveStruct3
      > (max)
{}

Test::RecursiveStructSeq3::RecursiveStructSeq3 (
    ::CORBA::ULong max,
    ::CORBA::ULong length,
    Test::RecursiveStruct3 * buffer,
    ::CORBA::Boolean release
  )
  : ::TAO::unbounded_value_sequence<
        RecursiveStruct3
      >
    (max, length, buffer, release)
{}

Test::RecursiveStructSeq3::RecursiveStructSeq3 (
    const RecursiveStructSeq3 &seq)
  : ::TAO::unbounded_value_sequence<
        RecursiveStruct3
      > (seq)
{}

Test::RecursiveStructSeq3::~RecursiveStructSeq3 (void)
{}

void Test::RecursiveStructSeq3::_tao_any_destructor (
    void * _tao_void_pointer)
{
  RecursiveStructSeq3 * _tao_tmp_pointer =
    static_cast<RecursiveStructSeq3 *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

#endif /* end #if !defined */

// TAO_IDL - Generated from
// be/be_visitor_typecode/alias_typecode.cpp:49



// TAO_IDL - Generated from
// be/be_visitor_typecode/typecode_defn.cpp:461


#ifndef _TAO_TYPECODE_Test_RecursiveStructSeq3_GUARD
#define _TAO_TYPECODE_Test_RecursiveStructSeq3_GUARD

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

namespace TAO
{
  namespace TypeCode
  {
    namespace
    {
      TAO::TypeCode::Sequence< ::CORBA::TypeCode_ptr const *,
                              TAO::Null_RefCount_Policy>
        Test_RecursiveStructSeq3_0 (
          ::CORBA::tk_sequence,
          &Test::_tc_RecursiveStruct3,
          0U);
        
      ::CORBA::TypeCode_ptr const tc_Test_RecursiveStructSeq3_0 =
        &Test_RecursiveStructSeq3_0;
    }
  }
}

TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_TYPECODE_Test_RecursiveStructSeq3_GUARD */

static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_Test_RecursiveStructSeq3 (
    ::CORBA::tk_alias,
    "IDL:Test/RecursiveStructSeq3:1.0",
    "RecursiveStructSeq3",
    &TAO::TypeCode::tc_Test_RecursiveStructSeq3_0);
  

namespace Test
{
  ::CORBA::TypeCode_ptr const _tc_RecursiveStructSeq3 =
    &_tao_tc_Test_RecursiveStructSeq3;
}

// TAO_IDL - Generated from
// be/be_visitor_union/union_cs.cpp:76

Test::RecursiveUnion3::RecursiveUnion3 (void)
{
  ACE_OS::memset (&this->u_, 0, sizeof (this->u_));
  this->disc_ = -32768;
}

Test::RecursiveUnion3::RecursiveUnion3 (const ::Test::RecursiveUnion3 &u)
{
  this->disc_ = u.disc_;
  switch (this->disc_)
  {
    case 0:
    {
      this->u_.a_ = u.u_.a_;
    }
    break;
    case 1:
    {
      if (u.u_.b_ == 0)
        {
          this->u_.b_ = 0;
        }
      else
        {
          ACE_NEW (
              this->u_.b_,
              Test::RecursiveStructSeq3 (*u.u_.b_)
            );
        }
    }
    break;
    case 2:
    {
      if (u.u_.c_ == 0)
        {
          this->u_.c_ = 0;
        }
      else
        {
          ACE_NEW (
              this->u_.c_,
              Test::RecursiveStructSeq3 (*u.u_.c_)
            );
        }
    }
    break;
    default:
    break;
  }
}

Test::RecursiveUnion3::~RecursiveUnion3 (void)
{
  // Finalize.
  this->_reset ();
}

void Test::RecursiveUnion3::_tao_any_destructor (void *_tao_void_pointer)
{
  RecursiveUnion3 *tmp =
    static_cast<RecursiveUnion3 *> (_tao_void_pointer);
  delete tmp;
}

Test::RecursiveUnion3 &
Test::RecursiveUnion3::operator= (const ::Test::RecursiveUnion3 &u)
{
  if (&u == this)
    {
      return *this;
    }
  
  this->_reset ();
  this->disc_ = u.disc_;

  switch (this->disc_)
  {
    case 0:
    {
      this->u_.a_ = u.u_.a_;
    }
    break;
    case 1:
    {
      if (u.u_.b_ == 0)
        {
          this->u_.b_ = 0;
        }
      else
        {
          ACE_NEW_RETURN (
              this->u_.b_,
              Test::RecursiveStructSeq3 (*u.u_.b_),
              *this
            );
        }
    }
    break;
    case 2:
    {
      if (u.u_.c_ == 0)
        {
          this->u_.c_ = 0;
        }
      else
        {
          ACE_NEW_RETURN (
              this->u_.c_,
              Test::RecursiveStructSeq3 (*u.u_.c_),
              *this
            );
        }
    }
    break;
    default:
    break;
  }
  
  return *this;
}

/// Reset method to reset old values of a union.
void Test::RecursiveUnion3::_reset (void)
{
  switch (this->disc_)
  {
    
    case 0:
      
    break;
    
    case 1:
      delete this->u_.b_;
      this->u_.b_ = 0;
      
    break;
    
    case 2:
      delete this->u_.c_;
      this->u_.c_ = 0;
      
    break;
    
    default:
    break;
  }
}

// TAO_IDL - Generated from
// be/be_visitor_typecode/union_typecode.cpp:65



// TAO_IDL - Generated from
// be/be_visitor_typecode/typecode_defn.cpp:461



// TAO_IDL - Generated from
// be/be_visitor_typecode/typecode_defn.cpp:461

static TAO::TypeCode::Case_T<CORBA::Short, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_Test_RecursiveUnion3__0 (0, "a", &CORBA::_tc_short);
static TAO::TypeCode::Case_T<CORBA::Short, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_Test_RecursiveUnion3__1 (1, "b", &Test::_tc_RecursiveStructSeq3);
static TAO::TypeCode::Case_T<CORBA::Short, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_Test_RecursiveUnion3__2 (2, "c", &Test::_tc_RecursiveStructSeq3);

static TAO::TypeCode::Case<char const *, ::CORBA::TypeCode_ptr const *> const * const _tao_cases_Test_RecursiveUnion3[] =
  {
    &_tao_cases_Test_RecursiveUnion3__0,
    &_tao_cases_Test_RecursiveUnion3__1,
    &_tao_cases_Test_RecursiveUnion3__2
  };

static TAO::TypeCode::Union<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::TypeCode::Case<char const *, ::CORBA::TypeCode_ptr const *> const * const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_Test_RecursiveUnion3 (
    "IDL:Test/RecursiveUnion3:1.0",
    "RecursiveUnion3",
    &CORBA::_tc_short,
    _tao_cases_Test_RecursiveUnion3,
    sizeof (_tao_cases_Test_RecursiveUnion3)/sizeof (_tao_cases_Test_RecursiveUnion3[0]),
    -1);
  

namespace Test
{
  ::CORBA::TypeCode_ptr const _tc_RecursiveUnion3 =
    &_tao_tc_Test_RecursiveUnion3;
}

// TAO_IDL - Generated from
// be/be_visitor_typecode/struct_typecode.cpp:86

static TAO::TypeCode::Struct_Field<
  char const *,
  ::CORBA::TypeCode_ptr const *> const 
    _tao_fields_Test_RecursiveStruct3[] =
      {
        { "uni", &Test::_tc_RecursiveUnion3 }
      };
  
static TAO::TypeCode::Recursive_Type<
  TAO::TypeCode::Struct<
    char const *,
    ::CORBA::TypeCode_ptr const *,
    TAO::TypeCode::Struct_Field<
      char const *,
      ::CORBA::TypeCode_ptr const *> const *,
    TAO::Null_RefCount_Policy>,
  ::CORBA::TypeCode_ptr const *,
  TAO::TypeCode::Struct_Field<
    char const *,
    ::CORBA::TypeCode_ptr const *> const *>
_tao_tc_Test_RecursiveStruct3 (
  ::CORBA::tk_struct,
  "IDL:Test/RecursiveStruct3:1.0",
  "RecursiveStruct3",
  _tao_fields_Test_RecursiveStruct3,
  1);


namespace Test
{
  ::CORBA::TypeCode_ptr const _tc_RecursiveStruct3 =
    &_tao_tc_Test_RecursiveStruct3;
}

// TAO_IDL - Generated from
// be/be_visitor_structure/structure_cs.cpp:56

void
Test::RecursiveStruct3::_tao_any_destructor (
    void *_tao_void_pointer)
{
  RecursiveStruct3 *_tao_tmp_pointer =
    static_cast<RecursiveStruct3 *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

// TAO_IDL - Generated from
// be/be_visitor_sequence/any_op_cs.cpp:45


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


TAO_END_VERSIONED_NAMESPACE_DECL



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace Test
{
  
  // Copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      const ::Test::RecursiveStructSeq3 &_tao_elem
    )
  {
    TAO::Any_Dual_Impl_T< ::Test::RecursiveStructSeq3>::insert_copy (
        _tao_any,
        ::Test::RecursiveStructSeq3::_tao_any_destructor,
        ::Test::_tc_RecursiveStructSeq3,
        _tao_elem
      );
}

// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    ::Test::RecursiveStructSeq3 *_tao_elem)
{
  TAO::Any_Dual_Impl_T< ::Test::RecursiveStructSeq3>::insert (
      _tao_any,
      ::Test::RecursiveStructSeq3::_tao_any_destructor,
      ::Test::_tc_RecursiveStructSeq3,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    ::Test::RecursiveStructSeq3 *&_tao_elem)
{
  return _tao_any >>= const_cast<
      const ::Test::RecursiveStructSeq3 *&> (
      _tao_elem
    );
}

// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const ::Test::RecursiveStructSeq3 *&_tao_elem)
{
  return
    TAO::Any_Dual_Impl_T< ::Test::RecursiveStructSeq3>::extract (
        _tao_any,
        ::Test::RecursiveStructSeq3::_tao_any_destructor,
        ::Test::_tc_RecursiveStructSeq3,
        _tao_elem
      );
}
}

#else


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


// Copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    const Test::RecursiveStructSeq3 &_tao_elem)
{
  TAO::Any_Dual_Impl_T<Test::RecursiveStructSeq3>::insert_copy (
      _tao_any,
      Test::RecursiveStructSeq3::_tao_any_destructor,
      Test::_tc_RecursiveStructSeq3,
      _tao_elem
    );
}

// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    Test::RecursiveStructSeq3 *_tao_elem)
{
  TAO::Any_Dual_Impl_T<Test::RecursiveStructSeq3>::insert (
      _tao_any,
      Test::RecursiveStructSeq3::_tao_any_destructor,
      Test::_tc_RecursiveStructSeq3,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    Test::RecursiveStructSeq3 *&_tao_elem)
{
  return _tao_any >>= const_cast<
      const Test::RecursiveStructSeq3 *&> (
      _tao_elem
    );
}

// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const Test::RecursiveStructSeq3 *&_tao_elem)
{
  return
    TAO::Any_Dual_Impl_T<Test::RecursiveStructSeq3>::extract (
        _tao_any,
        Test::RecursiveStructSeq3::_tao_any_destructor,
        Test::_tc_RecursiveStructSeq3,
        _tao_elem);
}
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_union/any_op_cs.cpp:37


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


TAO_END_VERSIONED_NAMESPACE_DECL



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace Test
{
  // Copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      const ::Test::RecursiveUnion3 &_tao_elem
    )
  {
    TAO::Any_Dual_Impl_T< ::Test::RecursiveUnion3>::insert_copy (
        _tao_any,
        ::Test::RecursiveUnion3::_tao_any_destructor,
        ::Test::_tc_RecursiveUnion3,
        _tao_elem
      );
}

// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    ::Test::RecursiveUnion3 *_tao_elem
  )
{
  TAO::Any_Dual_Impl_T< ::Test::RecursiveUnion3>::insert (
      _tao_any,
      ::Test::RecursiveUnion3::_tao_any_destructor,
      ::Test::_tc_RecursiveUnion3,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    ::Test::RecursiveUnion3 *&_tao_elem
  )
{
  return _tao_any >>= const_cast<
      const ::Test::RecursiveUnion3 *&> (
      _tao_elem
    );
}

// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const ::Test::RecursiveUnion3 *&_tao_elem
  )
{
  return
    TAO::Any_Dual_Impl_T< ::Test::RecursiveUnion3>::extract (
        _tao_any,
        ::Test::RecursiveUnion3::_tao_any_destructor,
        ::Test::_tc_RecursiveUnion3,
        _tao_elem
      );
}
}

#else

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    const Test::RecursiveUnion3 &_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<Test::RecursiveUnion3>::insert_copy (
      _tao_any,
      Test::RecursiveUnion3::_tao_any_destructor,
      Test::_tc_RecursiveUnion3,
      _tao_elem
    );
}

// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    Test::RecursiveUnion3 *_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<Test::RecursiveUnion3>::insert (
      _tao_any,
      Test::RecursiveUnion3::_tao_any_destructor,
      Test::_tc_RecursiveUnion3,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    Test::RecursiveUnion3 *&_tao_elem
  )
{
  return _tao_any >>= const_cast<
      const Test::RecursiveUnion3 *&> (
      _tao_elem
    );
}

// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const Test::RecursiveUnion3 *&_tao_elem
  )
{
  return
    TAO::Any_Dual_Impl_T<Test::RecursiveUnion3>::extract (
        _tao_any,
        Test::RecursiveUnion3::_tao_any_destructor,
        Test::_tc_RecursiveUnion3,
        _tao_elem
      );
}
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_structure/any_op_cs.cpp:43



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace Test
{
  /// Copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      const ::Test::RecursiveStruct3 &_tao_elem)
  {
    TAO::Any_Dual_Impl_T< ::Test::RecursiveStruct3>::insert_copy (
        _tao_any,
        ::Test::RecursiveStruct3::_tao_any_destructor,
        ::Test::_tc_RecursiveStruct3,
        _tao_elem);
}

/// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any, ::
    Test::RecursiveStruct3 *_tao_elem)
{
  TAO::Any_Dual_Impl_T< ::Test::RecursiveStruct3>::insert (
      _tao_any,
      ::Test::RecursiveStruct3::_tao_any_destructor,
      ::Test::_tc_RecursiveStruct3,
      _tao_elem);
}

/// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    ::Test::RecursiveStruct3 *&_tao_elem)
{
  return _tao_any >>= const_cast<
      const ::Test::RecursiveStruct3 *&> (
      _tao_elem);
}

/// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const ::Test::RecursiveStruct3 *&_tao_elem)
{
  return
    TAO::Any_Dual_Impl_T< ::Test::RecursiveStruct3>::extract (
        _tao_any,
        ::Test::RecursiveStruct3::_tao_any_destructor,
        ::Test::_tc_RecursiveStruct3,
        _tao_elem
      );
}
}

#else

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

/// Copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  const Test::RecursiveStruct3 &_tao_elem)
{
  TAO::Any_Dual_Impl_T<Test::RecursiveStruct3>::insert_copy (
    _tao_any,
    Test::RecursiveStruct3::_tao_any_destructor,
    Test::_tc_RecursiveStruct3,
    _tao_elem);
}

/// Non-copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  Test::RecursiveStruct3 *_tao_elem)
{
  TAO::Any_Dual_Impl_T<Test::RecursiveStruct3>::insert (
    _tao_any,
    Test::RecursiveStruct3::_tao_any_destructor,
    Test::_tc_RecursiveStruct3,
    _tao_elem);
}

/// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
  const ::CORBA::Any &_tao_any,
  Test::RecursiveStruct3 *&_tao_elem)
{
  return _tao_any >>= const_cast<
      const Test::RecursiveStruct3 *&> (
      _tao_elem);
}

/// Extraction to const pointer.
::CORBA::Boolean operator>>= (
  const ::CORBA::Any &_tao_any,
  const Test::RecursiveStruct3 *&_tao_elem)
{
  return
    TAO::Any_Dual_Impl_T<Test::RecursiveStruct3>::extract (
      _tao_any,
      Test::RecursiveStruct3::_tao_any_destructor,
      Test::_tc_RecursiveStruct3,
      _tao_elem);
}
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_sequence/cdr_op_cs.cpp:93
#if !defined _TAO_CDR_OP_Test_RecursiveStructSeq3_CPP_
#define _TAO_CDR_OP_Test_RecursiveStructSeq3_CPP_

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Test::RecursiveStructSeq3 &_tao_sequence)
{
  return TAO::marshal_sequence(strm, _tao_sequence);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Test::RecursiveStructSeq3 &_tao_sequence)
{
  return TAO::demarshal_sequence(strm, _tao_sequence);
}


TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_CDR_OP_Test_RecursiveStructSeq3_CPP_ */

// TAO_IDL - Generated from
// be/be_visitor_union/cdr_op_cs.cpp:74


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Test::RecursiveUnion3 &_tao_union
  )
{
  if ( !(strm << _tao_union._d ()) )
    {
      return false;
    }
  
  ::CORBA::Boolean result = true;

  switch (_tao_union._d ())
  {
    case 0:
      {
        result = strm << _tao_union.a ();
      }
      break;
    case 1:
      {
        result = strm << _tao_union.b ();
      }
      break;
    case 2:
      {
        result = strm << _tao_union.c ();
      }
      break;
    default:
      break;
  }

  return result;
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Test::RecursiveUnion3 &_tao_union
  )
{
  CORBA::Short _tao_discriminant;
  if ( !(strm >> _tao_discriminant) )
    {
      return false;
    }
  
  ::CORBA::Boolean result = true;

  switch (_tao_discriminant)
  {
    case 0:
      {
        CORBA::Short _tao_union_tmp;
        result = strm >> _tao_union_tmp;

        if (result)
          {
            _tao_union.a (_tao_union_tmp);
            _tao_union._d (_tao_discriminant);
          }
      }
      break;
    case 1:
      {
        Test::RecursiveStructSeq3 _tao_union_tmp;
        result = strm >> _tao_union_tmp;

        if (result)
          {
            _tao_union.b (_tao_union_tmp);
            _tao_union._d (_tao_discriminant);
          }
      }
      break;
    case 2:
      {
        Test::RecursiveStructSeq3 _tao_union_tmp;
        result = strm >> _tao_union_tmp;

        if (result)
          {
            _tao_union.c (_tao_union_tmp);
            _tao_union._d (_tao_discriminant);
          }
      }
      break;
    default:
      _tao_union._default ();
      // For maximum interop compatibility, force the same value as transmitted
      _tao_union._d (_tao_discriminant);
      break;
  }

  return result;
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_structure/cdr_op_cs.cpp:49

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Test::RecursiveStruct3 &_tao_aggregate)
{
  return
    (strm << _tao_aggregate.uni);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Test::RecursiveStruct3 &_tao_aggregate)
{
  return
    (strm >> _tao_aggregate.uni);
}

TAO_END_VERSIONED_NAMESPACE_DECL



