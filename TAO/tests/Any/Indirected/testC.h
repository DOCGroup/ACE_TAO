// -*- C++ -*-
/**
 * Code generated by the The ACE ORB (TAO) IDL Compiler v2.4.1
 * TAO and the TAO IDL Compiler have been developed by:
 *       Center for Distributed Object Computing
 *       Washington University
 *       St. Louis, MO
 *       USA
 *       http://www.cs.wustl.edu/~schmidt/doc-center.html
 * and
 *       Distributed Object Computing Laboratory
 *       University of California at Irvine
 *       Irvine, CA
 *       USA
 * and
 *       Institute for Software Integrated Systems
 *       Vanderbilt University
 *       Nashville, TN
 *       USA
 *       http://www.isis.vanderbilt.edu/
 *
 * Information about TAO is available at:
 *     http://www.dre.vanderbilt.edu/~schmidt/TAO.html
 **/

// TAO_IDL - Generated from
// be/be_codegen.cpp:149

#ifndef _TAO_IDL_TESTC_YLEN5E_H_
#define _TAO_IDL_TESTC_YLEN5E_H_

#include /**/ "ace/pre.h"


#include /**/ "ace/config-all.h"

#if !defined (ACE_LACKS_PRAGMA_ONCE)
# pragma once
#endif /* ACE_LACKS_PRAGMA_ONCE */


#include "tao/AnyTypeCode/AnyTypeCode_methods.h"
#include "tao/AnyTypeCode/Any.h"
#include "tao/ORB.h"
#include "tao/Basic_Types.h"
#include "tao/Sequence_T.h"
#include "tao/Seq_Var_T.h"
#include "tao/Seq_Out_T.h"
#include "tao/VarOut_T.h"
#include "tao/Arg_Traits_T.h"
#include "tao/Basic_Arguments.h"
#include "tao/Special_Basic_Arguments.h"
#include "tao/Any_Insert_Policy_T.h"
#include "tao/Fixed_Size_Argument_T.h"
#include "tao/Var_Size_Argument_T.h"
#include /**/ "tao/Version.h"
#include /**/ "tao/Versioned_Namespace.h"

#if TAO_MAJOR_VERSION != 2 || TAO_MINOR_VERSION != 4 || TAO_MICRO_VERSION != 1
#error This file should be regenerated with TAO_IDL
#endif

#if defined (TAO_EXPORT_MACRO)
#undef TAO_EXPORT_MACRO
#endif
#define TAO_EXPORT_MACRO 

// TAO_IDL - Generated from
// be/be_visitor_module/module_ch.cpp:35

namespace Test
{

  // TAO_IDL - Generated from
  // be/be_type.cpp:258

  struct RecursiveStruct3;

  typedef
    ::TAO_Var_Var_T<
        RecursiveStruct3
      >
    RecursiveStruct3_var;

  typedef
    ::TAO_Out_T<
        RecursiveStruct3
      >
    RecursiveStruct3_out;

  // TAO_IDL - Generated from
  // be/be_visitor_sequence/sequence_ch.cpp:99

#if !defined (_TEST_RECURSIVESTRUCTSEQ3_CH_)
#define _TEST_RECURSIVESTRUCTSEQ3_CH_

  class RecursiveStructSeq3;

  typedef
    ::TAO_VarSeq_Var_T<
        RecursiveStructSeq3
      >
    RecursiveStructSeq3_var;

  typedef
    ::TAO_Seq_Out_T<
        RecursiveStructSeq3
      >
    RecursiveStructSeq3_out;

  class  RecursiveStructSeq3
    : public
        ::TAO::unbounded_value_sequence<
            RecursiveStruct3
          >
  {
  public:
    RecursiveStructSeq3 (void);
    RecursiveStructSeq3 ( ::CORBA::ULong max);
    RecursiveStructSeq3 (
      ::CORBA::ULong max,
      ::CORBA::ULong length,
      RecursiveStruct3* buffer,
      ::CORBA::Boolean release = false);
    RecursiveStructSeq3 (const RecursiveStructSeq3 &);
    virtual ~RecursiveStructSeq3 (void);
    

    // TAO_IDL - Generated from
    // be/be_type.cpp:304

    
    typedef RecursiveStructSeq3_var _var_type;
    typedef RecursiveStructSeq3_out _out_type;

    static void _tao_any_destructor (void *);
  };

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // be/be_visitor_typecode/typecode_decl.cpp:34

  extern  ::CORBA::TypeCode_ptr const _tc_RecursiveStructSeq3;

  // TAO_IDL - Generated from
  // be/be_type.cpp:258

  class RecursiveUnion3;

  typedef
    ::TAO_Var_Var_T<
        RecursiveUnion3
      >
    RecursiveUnion3_var;

  typedef
    ::TAO_Out_T<
        RecursiveUnion3
      >
    RecursiveUnion3_out;

  class  RecursiveUnion3
  {
  public:
    RecursiveUnion3 (void);
    RecursiveUnion3 (const RecursiveUnion3 &);
    ~RecursiveUnion3 (void);

    RecursiveUnion3 &operator= (const RecursiveUnion3 &);

    // TAO_IDL - Generated from
    // be/be_visitor_union/discriminant_ch.cpp:100

    void _d ( ::CORBA::Short);
    ::CORBA::Short _d (void) const;

    // TAO_IDL - Generated from
    // be/be_type.cpp:304

    
    typedef RecursiveUnion3_var _var_type;
    typedef RecursiveUnion3_out _out_type;

    static void _tao_any_destructor (void *);

    // TAO_IDL - Generated from
    // be/be_visitor_union_branch/public_ch.cpp:449

    void a ( ::CORBA::Short);
    ::CORBA::Short a (void) const;

    // TAO_IDL - Generated from
    // be/be_visitor_union_branch/public_ch.cpp:548

    void b (const Test::RecursiveStructSeq3 &);
    const Test::RecursiveStructSeq3 &b (void) const;
    Test::RecursiveStructSeq3 &b (void);

    // TAO_IDL - Generated from
    // be/be_visitor_union_branch/public_ch.cpp:548

    void c (const Test::RecursiveStructSeq3 &);
    const Test::RecursiveStructSeq3 &c (void) const;
    Test::RecursiveStructSeq3 &c (void);

    // TAO_IDL - Generated from
    // be/be_visitor_union/union_ch.cpp:121

    void _default (void);
  private:
    ::CORBA::Short disc_;

    union
    {
      // TAO_IDL - Generated from
      // be/be_visitor_union_branch/private_ch.cpp:377
      ::CORBA::Short a_;
      // TAO_IDL - Generated from
      // be/be_visitor_union_branch/private_ch.cpp:444
      Test::RecursiveStructSeq3 *b_;
      // TAO_IDL - Generated from
      // be/be_visitor_union_branch/private_ch.cpp:444
      Test::RecursiveStructSeq3 *c_;
    } u_;

    /// TAO extension - frees any allocated storage.
    void _reset (void);
  };

  // TAO_IDL - Generated from
  // be/be_visitor_typecode/typecode_decl.cpp:34

  extern  ::CORBA::TypeCode_ptr const _tc_RecursiveUnion3;

  // TAO_IDL - Generated from
  // be/be_visitor_structure/structure_ch.cpp:48

  struct  RecursiveStruct3
  {

    // TAO_IDL - Generated from
    // be/be_type.cpp:304

    
    typedef RecursiveStruct3_var _var_type;
    typedef RecursiveStruct3_out _out_type;

    static void _tao_any_destructor (void *);
    
    

    Test::RecursiveUnion3 uni;
  };

  // TAO_IDL - Generated from
  // be/be_visitor_typecode/typecode_decl.cpp:34

  extern  ::CORBA::TypeCode_ptr const _tc_RecursiveStruct3;

// TAO_IDL - Generated from
// be/be_visitor_module/module_ch.cpp:64

} // module Test

// TAO_IDL - Generated from
// be/be_visitor_arg_traits.cpp:66

TAO_BEGIN_VERSIONED_NAMESPACE_DECL


// Arg traits specializations.
namespace TAO
{

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:683

  template<>
  class Arg_Traits< ::Test::RecursiveStructSeq3>
    : public
        Var_Size_Arg_Traits_T<
            ::Test::RecursiveStructSeq3,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:1056

  template<>
  class Arg_Traits< ::Test::RecursiveUnion3>
    : public
        Var_Size_Arg_Traits_T<
            ::Test::RecursiveUnion3,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:945

  template<>
  class Arg_Traits< ::Test::RecursiveStruct3>
    : public
        Var_Size_Arg_Traits_T<
            ::Test::RecursiveStruct3,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_traits.cpp:60

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Traits specializations.
namespace TAO
{
}
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_sequence/any_op_ch.cpp:47



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace Test
{
   void operator<<= ( ::CORBA::Any &, const ::Test::RecursiveStructSeq3 &); // copying version
   void operator<<= ( ::CORBA::Any &, ::Test::RecursiveStructSeq3*); // noncopying version
   ::CORBA::Boolean operator>>= (const ::CORBA::Any &, ::Test::RecursiveStructSeq3 *&); // deprecated
   ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const ::Test::RecursiveStructSeq3 *&);
}

#else


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 void operator<<= ( ::CORBA::Any &, const Test::RecursiveStructSeq3 &); // copying version
 void operator<<= ( ::CORBA::Any &, Test::RecursiveStructSeq3*); // noncopying version
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, Test::RecursiveStructSeq3 *&); // deprecated
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const Test::RecursiveStructSeq3 *&);
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_union/any_op_ch.cpp:37



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace Test
{
   void operator<<= (::CORBA::Any &, const ::Test::RecursiveUnion3 &); // copying version
   void operator<<= (::CORBA::Any &, ::Test::RecursiveUnion3*); // noncopying version
   ::CORBA::Boolean operator>>= (const ::CORBA::Any &, ::Test::RecursiveUnion3 *&); // deprecated
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const ::Test::RecursiveUnion3 *&);
}

#else


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 void operator<<= (::CORBA::Any &, const Test::RecursiveUnion3 &); // copying version
 void operator<<= (::CORBA::Any &, Test::RecursiveUnion3*); // noncopying version
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, Test::RecursiveUnion3 *&); // deprecated
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const Test::RecursiveUnion3 *&);
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_structure/any_op_ch.cpp:42



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace Test
{
   void operator<<= (::CORBA::Any &, const ::Test::RecursiveStruct3 &); // copying version
   void operator<<= (::CORBA::Any &, ::Test::RecursiveStruct3*); // noncopying version
   ::CORBA::Boolean operator>>= (const ::CORBA::Any &, ::Test::RecursiveStruct3 *&); // deprecated
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const ::Test::RecursiveStruct3 *&);
}

#else


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 void operator<<= (::CORBA::Any &, const Test::RecursiveStruct3 &); // copying version
 void operator<<= (::CORBA::Any &, Test::RecursiveStruct3*); // noncopying version
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, Test::RecursiveStruct3 *&); // deprecated
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const Test::RecursiveStruct3 *&);
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_sequence/cdr_op_ch.cpp:65

#if !defined _TAO_CDR_OP_Test_RecursiveStructSeq3_H_
#define _TAO_CDR_OP_Test_RecursiveStructSeq3_H_
TAO_BEGIN_VERSIONED_NAMESPACE_DECL


 ::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Test::RecursiveStructSeq3 &_tao_sequence);
 ::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Test::RecursiveStructSeq3 &_tao_sequence);

TAO_END_VERSIONED_NAMESPACE_DECL



#endif /* _TAO_CDR_OP_Test_RecursiveStructSeq3_H_ */

// TAO_IDL - Generated from
// be/be_visitor_union/cdr_op_ch.cpp:38


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 ::CORBA::Boolean operator<< (TAO_OutputCDR &, const Test::RecursiveUnion3 &);
 ::CORBA::Boolean operator>> (TAO_InputCDR &, Test::RecursiveUnion3 &);

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_structure/cdr_op_ch.cpp:43


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 ::CORBA::Boolean operator<< (TAO_OutputCDR &, const Test::RecursiveStruct3 &);
 ::CORBA::Boolean operator>> (TAO_InputCDR &, Test::RecursiveStruct3 &);

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_codegen.cpp:1700
#if defined (__ACE_INLINE__)
#include "testC.inl"
#endif /* defined INLINE */

#include /**/ "ace/post.h"

#endif /* ifndef */

