// -*- C++ -*-
/**
 * Code generated by the The ACE ORB (TAO) IDL Compiler v2.4.1
 * TAO and the TAO IDL Compiler have been developed by:
 *       Center for Distributed Object Computing
 *       Washington University
 *       St. Louis, MO
 *       USA
 *       http://www.cs.wustl.edu/~schmidt/doc-center.html
 * and
 *       Distributed Object Computing Laboratory
 *       University of California at Irvine
 *       Irvine, CA
 *       USA
 * and
 *       Institute for Software Integrated Systems
 *       Vanderbilt University
 *       Nashville, TN
 *       USA
 *       http://www.isis.vanderbilt.edu/
 *
 * Information about TAO is available at:
 *     http://www.dre.vanderbilt.edu/~schmidt/TAO.html
 **/

// TAO_IDL - Generated from
// be/be_codegen.cpp:149

#ifndef _TAO_IDL_TESTC_OEVSXK_H_
#define _TAO_IDL_TESTC_OEVSXK_H_

#include /**/ "ace/pre.h"


#include /**/ "ace/config-all.h"

#if !defined (ACE_LACKS_PRAGMA_ONCE)
# pragma once
#endif /* ACE_LACKS_PRAGMA_ONCE */


#include "tao/AnyTypeCode/AnyTypeCode_methods.h"
#include "tao/AnyTypeCode/Any.h"
#include "tao/Valuetype/ValueBase.h"
#include "tao/Valuetype/Valuetype_Adapter_Factory_Impl.h"
#include "tao/Valuetype/ValueFactory.h"
#include "tao/ORB.h"
#include "tao/SystemException.h"
#include "tao/UserException.h"
#include "tao/Basic_Types.h"
#include "tao/ORB_Constants.h"
#include "tao/Object.h"
#include "tao/AnyTypeCode/TypeCode.h"
#include "tao/AnyTypeCode/TypeCode_Constants.h"
#include "tao/AnyTypeCode/Any.h"
#include "tao/String_Manager_T.h"
#include "tao/AnyTypeCode/OctetSeqA.h"
#include "tao/AnyTypeCode/StringSeqA.h"
#include "tao/Valuetype/Sequence_T.h"
#include "tao/Sequence_T.h"
#include "tao/Valuetype/Value_VarOut_T.h"
#include "tao/Objref_VarOut_T.h"
#include "tao/Seq_Var_T.h"
#include "tao/Seq_Out_T.h"
#include "tao/VarOut_T.h"
#include "tao/Arg_Traits_T.h"
#include "tao/Basic_Arguments.h"
#include "tao/Special_Basic_Arguments.h"
#include "tao/Any_Insert_Policy_T.h"
#include "tao/Basic_Argument_T.h"
#include "tao/Fixed_Size_Argument_T.h"
#include "tao/Var_Size_Argument_T.h"
#include "tao/Object_Argument_T.h"
#include "tao/UB_String_Arguments.h"
#include "tao/AnyTypeCode/Any_Arg_Traits.h"
#include /**/ "tao/Version.h"
#include /**/ "tao/Versioned_Namespace.h"

#include "tao/OctetSeqC.h"
#include "tao/StringSeqC.h"

#if TAO_MAJOR_VERSION != 2 || TAO_MINOR_VERSION != 4 || TAO_MICRO_VERSION != 1
#error This file should be regenerated with TAO_IDL
#endif

#if defined (TAO_EXPORT_MACRO)
#undef TAO_EXPORT_MACRO
#endif
#define TAO_EXPORT_MACRO

// TAO_IDL - Generated from
// be/be_visitor_root/root_ch.cpp:157
TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<typename T> class Narrow_Utils;
}
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_module/module_ch.cpp:35

namespace Test
{

  // TAO_IDL - Generated from
  // be/be_visitor_exception/exception_ch.cpp:41

  class  Recursive_Type_In_Any_Test_Failed : public ::CORBA::UserException
  {
  public:

    Recursive_Type_In_Any_Test_Failed (void);
    Recursive_Type_In_Any_Test_Failed (const Recursive_Type_In_Any_Test_Failed &);
    ~Recursive_Type_In_Any_Test_Failed (void);

    Recursive_Type_In_Any_Test_Failed &operator= (const Recursive_Type_In_Any_Test_Failed &);

    static void _tao_any_destructor (void *);

    static Recursive_Type_In_Any_Test_Failed *_downcast ( ::CORBA::Exception *);
    static const Recursive_Type_In_Any_Test_Failed *_downcast ( ::CORBA::Exception const *);

    static ::CORBA::Exception *_alloc (void);

    virtual ::CORBA::Exception *_tao_duplicate (void) const;

    virtual void _raise (void) const;

    virtual void _tao_encode (TAO_OutputCDR &cdr) const;
    virtual void _tao_decode (TAO_InputCDR &cdr);

    virtual ::CORBA::TypeCode_ptr _tao_type (void) const;
  };

  // TAO_IDL - Generated from
  // be/be_visitor_typecode/typecode_decl.cpp:34

  extern  ::CORBA::TypeCode_ptr const _tc_Recursive_Type_In_Any_Test_Failed;

  // TAO_IDL - Generated from
  // be/be_visitor_exception/exception_ch.cpp:41

  class  Demarshaling_From_Any_Failed : public ::CORBA::UserException
  {
  public:

    Demarshaling_From_Any_Failed (void);
    Demarshaling_From_Any_Failed (const Demarshaling_From_Any_Failed &);
    ~Demarshaling_From_Any_Failed (void);

    Demarshaling_From_Any_Failed &operator= (const Demarshaling_From_Any_Failed &);

    static void _tao_any_destructor (void *);

    static Demarshaling_From_Any_Failed *_downcast ( ::CORBA::Exception *);
    static const Demarshaling_From_Any_Failed *_downcast ( ::CORBA::Exception const *);

    static ::CORBA::Exception *_alloc (void);

    virtual ::CORBA::Exception *_tao_duplicate (void) const;

    virtual void _raise (void) const;

    virtual void _tao_encode (TAO_OutputCDR &cdr) const;
    virtual void _tao_decode (TAO_InputCDR &cdr);

    virtual ::CORBA::TypeCode_ptr _tao_type (void) const;
  };

  // TAO_IDL - Generated from
  // be/be_visitor_typecode/typecode_decl.cpp:34

  extern  ::CORBA::TypeCode_ptr const _tc_Demarshaling_From_Any_Failed;

  // TAO_IDL - Generated from
  // be/be_type.cpp:258

  struct RecursiveStruct;

  typedef
    ::TAO_Var_Var_T<
        RecursiveStruct
      >
    RecursiveStruct_var;

  typedef
    ::TAO_Out_T<
        RecursiveStruct
      >
    RecursiveStruct_out;

  // TAO_IDL - Generated from
  // be/be_visitor_sequence/sequence_ch.cpp:99

#if !defined (_TEST_RECURSIVESTRUCTSEQ_CH_)
#define _TEST_RECURSIVESTRUCTSEQ_CH_

  class RecursiveStructSeq;

  typedef
    ::TAO_VarSeq_Var_T<
        RecursiveStructSeq
      >
    RecursiveStructSeq_var;

  typedef
    ::TAO_Seq_Out_T<
        RecursiveStructSeq
      >
    RecursiveStructSeq_out;

  class  RecursiveStructSeq
    : public
        ::TAO::unbounded_value_sequence<
            RecursiveStruct
          >
  {
  public:
    RecursiveStructSeq (void);
    RecursiveStructSeq ( ::CORBA::ULong max);
    RecursiveStructSeq (
      ::CORBA::ULong max,
      ::CORBA::ULong length,
      RecursiveStruct* buffer,
      ::CORBA::Boolean release = false);
    RecursiveStructSeq (const RecursiveStructSeq &);
    virtual ~RecursiveStructSeq (void);


    // TAO_IDL - Generated from
    // be/be_type.cpp:304


    typedef RecursiveStructSeq_var _var_type;
    typedef RecursiveStructSeq_out _out_type;

    static void _tao_any_destructor (void *);
  };

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // be/be_visitor_typecode/typecode_decl.cpp:34

  extern  ::CORBA::TypeCode_ptr const _tc_RecursiveStructSeq;

  // TAO_IDL - Generated from
  // be/be_visitor_structure/structure_ch.cpp:48

  struct  RecursiveStruct
  {

    // TAO_IDL - Generated from
    // be/be_type.cpp:304


    typedef RecursiveStruct_var _var_type;
    typedef RecursiveStruct_out _out_type;

    static void _tao_any_destructor (void *);

    Test::RecursiveStructSeq recursive_structs;
    ::CORBA::Long i;
    Test::RecursiveStructSeq recursive_structs_second;
  };

  // TAO_IDL - Generated from
  // be/be_visitor_typecode/typecode_decl.cpp:34

  extern  ::CORBA::TypeCode_ptr const _tc_RecursiveStruct;

  // TAO_IDL - Generated from
  // be/be_type.cpp:258

  struct NestedRecursiveStruct;

  typedef
    ::TAO_Var_Var_T<
        NestedRecursiveStruct
      >
    NestedRecursiveStruct_var;

  typedef
    ::TAO_Out_T<
        NestedRecursiveStruct
      >
    NestedRecursiveStruct_out;

  // TAO_IDL - Generated from
  // be/be_visitor_sequence/sequence_ch.cpp:99

#if !defined (_TEST_NESTEDRECURSIVESTRUCTSEQ_CH_)
#define _TEST_NESTEDRECURSIVESTRUCTSEQ_CH_

  class NestedRecursiveStructSeq;

  typedef
    ::TAO_VarSeq_Var_T<
        NestedRecursiveStructSeq
      >
    NestedRecursiveStructSeq_var;

  typedef
    ::TAO_Seq_Out_T<
        NestedRecursiveStructSeq
      >
    NestedRecursiveStructSeq_out;

  class  NestedRecursiveStructSeq
    : public
        ::TAO::unbounded_value_sequence<
            NestedRecursiveStruct
          >
  {
  public:
    NestedRecursiveStructSeq (void);
    NestedRecursiveStructSeq ( ::CORBA::ULong max);
    NestedRecursiveStructSeq (
      ::CORBA::ULong max,
      ::CORBA::ULong length,
      NestedRecursiveStruct* buffer,
      ::CORBA::Boolean release = false);
    NestedRecursiveStructSeq (const NestedRecursiveStructSeq &);
    virtual ~NestedRecursiveStructSeq (void);


    // TAO_IDL - Generated from
    // be/be_type.cpp:304


    typedef NestedRecursiveStructSeq_var _var_type;
    typedef NestedRecursiveStructSeq_out _out_type;

    static void _tao_any_destructor (void *);
  };

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // be/be_visitor_typecode/typecode_decl.cpp:34

  extern  ::CORBA::TypeCode_ptr const _tc_NestedRecursiveStructSeq;

  // TAO_IDL - Generated from
  // be/be_visitor_structure/structure_ch.cpp:48

  struct  NestedRecursiveStruct
  {

    // TAO_IDL - Generated from
    // be/be_type.cpp:304


    typedef NestedRecursiveStruct_var _var_type;
    typedef NestedRecursiveStruct_out _out_type;

    static void _tao_any_destructor (void *);



    // TAO_IDL - Generated from
    // be/be_type.cpp:258

    struct InnerStruct;

    typedef
      ::TAO_Var_Var_T<
          InnerStruct
        >
      InnerStruct_var;

    typedef
      ::TAO_Out_T<
          InnerStruct
        >
      InnerStruct_out;

    // TAO_IDL - Generated from
    // be/be_visitor_structure/structure_ch.cpp:48

    struct  InnerStruct
    {

      // TAO_IDL - Generated from
      // be/be_type.cpp:304


      typedef InnerStruct_var _var_type;
      typedef InnerStruct_out _out_type;

      static void _tao_any_destructor (void *);

      Test::NestedRecursiveStructSeq recursive_structs;
    };

    // TAO_IDL - Generated from
    // be/be_visitor_typecode/typecode_decl.cpp:34

    static ::CORBA::TypeCode_ptr const _tc_InnerStruct;Test::NestedRecursiveStruct::InnerStruct ins;
    ::CORBA::Long i;
  };

  // TAO_IDL - Generated from
  // be/be_visitor_typecode/typecode_decl.cpp:34

  extern  ::CORBA::TypeCode_ptr const _tc_NestedRecursiveStruct;

  // TAO_IDL - Generated from
  // be/be_type.cpp:258

  class RecursiveUnion;

  typedef
    ::TAO_Var_Var_T<
        RecursiveUnion
      >
    RecursiveUnion_var;

  typedef
    ::TAO_Out_T<
        RecursiveUnion
      >
    RecursiveUnion_out;

  // TAO_IDL - Generated from
  // be/be_visitor_sequence/sequence_ch.cpp:99

#if !defined (_TEST_RECURSIVEUNIONSEQ_CH_)
#define _TEST_RECURSIVEUNIONSEQ_CH_

  class RecursiveUnionSeq;

  typedef
    ::TAO_VarSeq_Var_T<
        RecursiveUnionSeq
      >
    RecursiveUnionSeq_var;

  typedef
    ::TAO_Seq_Out_T<
        RecursiveUnionSeq
      >
    RecursiveUnionSeq_out;

  class  RecursiveUnionSeq
    : public
        ::TAO::unbounded_value_sequence<
            RecursiveUnion
          >
  {
  public:
    RecursiveUnionSeq (void);
    RecursiveUnionSeq ( ::CORBA::ULong max);
    RecursiveUnionSeq (
      ::CORBA::ULong max,
      ::CORBA::ULong length,
      RecursiveUnion* buffer,
      ::CORBA::Boolean release = false);
    RecursiveUnionSeq (const RecursiveUnionSeq &);
    virtual ~RecursiveUnionSeq (void);


    // TAO_IDL - Generated from
    // be/be_type.cpp:304


    typedef RecursiveUnionSeq_var _var_type;
    typedef RecursiveUnionSeq_out _out_type;

    static void _tao_any_destructor (void *);
  };

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // be/be_visitor_typecode/typecode_decl.cpp:34

  extern  ::CORBA::TypeCode_ptr const _tc_RecursiveUnionSeq;

  class  RecursiveUnion
  {
  public:
    RecursiveUnion (void);
    RecursiveUnion (const RecursiveUnion &);
    ~RecursiveUnion (void);

    RecursiveUnion &operator= (const RecursiveUnion &);

    // TAO_IDL - Generated from
    // be/be_visitor_union/discriminant_ch.cpp:100

    void _d ( ::CORBA::Short);
    ::CORBA::Short _d (void) const;

    // TAO_IDL - Generated from
    // be/be_type.cpp:304


    typedef RecursiveUnion_var _var_type;
    typedef RecursiveUnion_out _out_type;

    static void _tao_any_destructor (void *);

    // TAO_IDL - Generated from
    // be/be_visitor_union_branch/public_ch.cpp:548

    void recursive_unions (const Test::RecursiveUnionSeq &);
    const Test::RecursiveUnionSeq &recursive_unions (void) const;
    Test::RecursiveUnionSeq &recursive_unions (void);

    // TAO_IDL - Generated from
    // be/be_visitor_union_branch/public_ch.cpp:449

    void a ( ::CORBA::Short);
    ::CORBA::Short a (void) const;

    // TAO_IDL - Generated from
    // be/be_visitor_union_branch/public_ch.cpp:548

    void recursive_unions_second (const Test::RecursiveUnionSeq &);
    const Test::RecursiveUnionSeq &recursive_unions_second (void) const;
    Test::RecursiveUnionSeq &recursive_unions_second (void);

    // TAO_IDL - Generated from
    // be/be_visitor_union_branch/public_ch.cpp:449

    void i ( ::CORBA::Long);
    ::CORBA::Long i (void) const;
  private:
    ::CORBA::Short disc_;

    union
    {
      // TAO_IDL - Generated from
      // be/be_visitor_union_branch/private_ch.cpp:444
      Test::RecursiveUnionSeq *recursive_unions_;
      // TAO_IDL - Generated from
      // be/be_visitor_union_branch/private_ch.cpp:377
      ::CORBA::Short a_;
      // TAO_IDL - Generated from
      // be/be_visitor_union_branch/private_ch.cpp:444
      Test::RecursiveUnionSeq *recursive_unions_second_;
      // TAO_IDL - Generated from
      // be/be_visitor_union_branch/private_ch.cpp:377
      ::CORBA::Long i_;
    } u_;

    /// TAO extension - frees any allocated storage.
    void _reset (void);
  };

  // TAO_IDL - Generated from
  // be/be_visitor_typecode/typecode_decl.cpp:34

  extern  ::CORBA::TypeCode_ptr const _tc_RecursiveUnion;

  // TAO_IDL - Generated from
  // be/be_type.cpp:258

  class RecursiveUnion2;

  typedef
    ::TAO_Var_Var_T<
        RecursiveUnion2
      >
    RecursiveUnion2_var;

  typedef
    ::TAO_Out_T<
        RecursiveUnion2
      >
    RecursiveUnion2_out;

  // TAO_IDL - Generated from
  // be/be_visitor_sequence/sequence_ch.cpp:99

#if !defined (_TEST_RECURSIVEUNIONSEQ2_CH_)
#define _TEST_RECURSIVEUNIONSEQ2_CH_

  class RecursiveUnionSeq2;

  typedef
    ::TAO_VarSeq_Var_T<
        RecursiveUnionSeq2
      >
    RecursiveUnionSeq2_var;

  typedef
    ::TAO_Seq_Out_T<
        RecursiveUnionSeq2
      >
    RecursiveUnionSeq2_out;

  class  RecursiveUnionSeq2
    : public
        ::TAO::unbounded_value_sequence<
            RecursiveUnion2
          >
  {
  public:
    RecursiveUnionSeq2 (void);
    RecursiveUnionSeq2 ( ::CORBA::ULong max);
    RecursiveUnionSeq2 (
      ::CORBA::ULong max,
      ::CORBA::ULong length,
      RecursiveUnion2* buffer,
      ::CORBA::Boolean release = false);
    RecursiveUnionSeq2 (const RecursiveUnionSeq2 &);
    virtual ~RecursiveUnionSeq2 (void);


    // TAO_IDL - Generated from
    // be/be_type.cpp:304


    typedef RecursiveUnionSeq2_var _var_type;
    typedef RecursiveUnionSeq2_out _out_type;

    static void _tao_any_destructor (void *);
  };

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // be/be_visitor_typecode/typecode_decl.cpp:34

  extern  ::CORBA::TypeCode_ptr const _tc_RecursiveUnionSeq2;

  class  RecursiveUnion2
  {
  public:
    RecursiveUnion2 (void);
    RecursiveUnion2 (const RecursiveUnion2 &);
    ~RecursiveUnion2 (void);

    RecursiveUnion2 &operator= (const RecursiveUnion2 &);

    // TAO_IDL - Generated from
    // be/be_visitor_union/discriminant_ch.cpp:100

    void _d ( ::CORBA::Short);
    ::CORBA::Short _d (void) const;

    // TAO_IDL - Generated from
    // be/be_type.cpp:304


    typedef RecursiveUnion2_var _var_type;
    typedef RecursiveUnion2_out _out_type;

    static void _tao_any_destructor (void *);

    // TAO_IDL - Generated from
    // be/be_type.cpp:258

    struct Innerstruct3a;

    typedef
      ::TAO_Var_Var_T<
          Innerstruct3a
        >
      Innerstruct3a_var;

    typedef
      ::TAO_Out_T<
          Innerstruct3a
        >
      Innerstruct3a_out;

    // TAO_IDL - Generated from
    // be/be_visitor_structure/structure_ch.cpp:48

    struct  Innerstruct3a
    {

      // TAO_IDL - Generated from
      // be/be_type.cpp:304


      typedef Innerstruct3a_var _var_type;
      typedef Innerstruct3a_out _out_type;

      static void _tao_any_destructor (void *);

      Test::RecursiveUnionSeq2 recursive_unions;
    };

    // TAO_IDL - Generated from
    // be/be_visitor_typecode/typecode_decl.cpp:34

    static ::CORBA::TypeCode_ptr const _tc_Innerstruct3a;

    // TAO_IDL - Generated from
    // be/be_visitor_union_branch/public_ch.cpp:656

    void insb (const Innerstruct3a &);
    const Innerstruct3a &insb (void) const;
    Innerstruct3a &insb (void);

    // TAO_IDL - Generated from
    // be/be_visitor_union_branch/public_ch.cpp:449

    void a ( ::CORBA::Short);
    ::CORBA::Short a (void) const;

    // TAO_IDL - Generated from
    // be/be_type.cpp:258

    struct Innerstruct3b;

    typedef
      ::TAO_Var_Var_T<
          Innerstruct3b
        >
      Innerstruct3b_var;

    typedef
      ::TAO_Out_T<
          Innerstruct3b
        >
      Innerstruct3b_out;

    // TAO_IDL - Generated from
    // be/be_visitor_structure/structure_ch.cpp:48

    struct  Innerstruct3b
    {

      // TAO_IDL - Generated from
      // be/be_type.cpp:304


      typedef Innerstruct3b_var _var_type;
      typedef Innerstruct3b_out _out_type;

      static void _tao_any_destructor (void *);

      Test::RecursiveUnionSeq2 recursive_unions_second;
    };

    // TAO_IDL - Generated from
    // be/be_visitor_typecode/typecode_decl.cpp:34

    static ::CORBA::TypeCode_ptr const _tc_Innerstruct3b;

    // TAO_IDL - Generated from
    // be/be_visitor_union_branch/public_ch.cpp:656

    void insa (const Innerstruct3b &);
    const Innerstruct3b &insa (void) const;
    Innerstruct3b &insa (void);

    // TAO_IDL - Generated from
    // be/be_visitor_union_branch/public_ch.cpp:449

    void i ( ::CORBA::Long);
    ::CORBA::Long i (void) const;
  private:
    ::CORBA::Short disc_;

    union
    {
      // TAO_IDL - Generated from
      // be/be_visitor_union_branch/private_ch.cpp:519
      Innerstruct3a *insb_;
      // TAO_IDL - Generated from
      // be/be_visitor_union_branch/private_ch.cpp:377
      ::CORBA::Short a_;
      // TAO_IDL - Generated from
      // be/be_visitor_union_branch/private_ch.cpp:519
      Innerstruct3b *insa_;
      // TAO_IDL - Generated from
      // be/be_visitor_union_branch/private_ch.cpp:377
      ::CORBA::Long i_;
    } u_;

    /// TAO extension - frees any allocated storage.
    void _reset (void);
  };

  // TAO_IDL - Generated from
  // be/be_visitor_typecode/typecode_decl.cpp:34

  extern  ::CORBA::TypeCode_ptr const _tc_RecursiveUnion2;

  // TAO_IDL - Generated from
  // be/be_type.cpp:258

  struct RecursiveStruct3;

  typedef
    ::TAO_Var_Var_T<
        RecursiveStruct3
      >
    RecursiveStruct3_var;

  typedef
    ::TAO_Out_T<
        RecursiveStruct3
      >
    RecursiveStruct3_out;

  // TAO_IDL - Generated from
  // be/be_visitor_sequence/sequence_ch.cpp:99

#if !defined (_TEST_RECURSIVESTRUCTSEQ3_CH_)
#define _TEST_RECURSIVESTRUCTSEQ3_CH_

  class RecursiveStructSeq3;

  typedef
    ::TAO_VarSeq_Var_T<
        RecursiveStructSeq3
      >
    RecursiveStructSeq3_var;

  typedef
    ::TAO_Seq_Out_T<
        RecursiveStructSeq3
      >
    RecursiveStructSeq3_out;

  class  RecursiveStructSeq3
    : public
        ::TAO::unbounded_value_sequence<
            RecursiveStruct3
          >
  {
  public:
    RecursiveStructSeq3 (void);
    RecursiveStructSeq3 ( ::CORBA::ULong max);
    RecursiveStructSeq3 (
      ::CORBA::ULong max,
      ::CORBA::ULong length,
      RecursiveStruct3* buffer,
      ::CORBA::Boolean release = false);
    RecursiveStructSeq3 (const RecursiveStructSeq3 &);
    virtual ~RecursiveStructSeq3 (void);


    // TAO_IDL - Generated from
    // be/be_type.cpp:304


    typedef RecursiveStructSeq3_var _var_type;
    typedef RecursiveStructSeq3_out _out_type;

    static void _tao_any_destructor (void *);
  };

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // be/be_visitor_typecode/typecode_decl.cpp:34

  extern  ::CORBA::TypeCode_ptr const _tc_RecursiveStructSeq3;

  // TAO_IDL - Generated from
  // be/be_type.cpp:258

  class RecursiveUnion3;

  typedef
    ::TAO_Var_Var_T<
        RecursiveUnion3
      >
    RecursiveUnion3_var;

  typedef
    ::TAO_Out_T<
        RecursiveUnion3
      >
    RecursiveUnion3_out;

  class  RecursiveUnion3
  {
  public:
    RecursiveUnion3 (void);
    RecursiveUnion3 (const RecursiveUnion3 &);
    ~RecursiveUnion3 (void);

    RecursiveUnion3 &operator= (const RecursiveUnion3 &);

    // TAO_IDL - Generated from
    // be/be_visitor_union/discriminant_ch.cpp:100

    void _d ( ::CORBA::Short);
    ::CORBA::Short _d (void) const;

    // TAO_IDL - Generated from
    // be/be_type.cpp:304


    typedef RecursiveUnion3_var _var_type;
    typedef RecursiveUnion3_out _out_type;

    static void _tao_any_destructor (void *);

    // TAO_IDL - Generated from
    // be/be_visitor_union_branch/public_ch.cpp:449

    void a ( ::CORBA::Short);
    ::CORBA::Short a (void) const;

    // TAO_IDL - Generated from
    // be/be_visitor_union_branch/public_ch.cpp:548

    void b (const Test::RecursiveStructSeq3 &);
    const Test::RecursiveStructSeq3 &b (void) const;
    Test::RecursiveStructSeq3 &b (void);

    // TAO_IDL - Generated from
    // be/be_visitor_union_branch/public_ch.cpp:548

    void c (const Test::RecursiveStructSeq3 &);
    const Test::RecursiveStructSeq3 &c (void) const;
    Test::RecursiveStructSeq3 &c (void);

    // TAO_IDL - Generated from
    // be/be_visitor_union/union_ch.cpp:121

    void _default (void);
  private:
    ::CORBA::Short disc_;

    union
    {
      // TAO_IDL - Generated from
      // be/be_visitor_union_branch/private_ch.cpp:377
      ::CORBA::Short a_;
      // TAO_IDL - Generated from
      // be/be_visitor_union_branch/private_ch.cpp:444
      Test::RecursiveStructSeq3 *b_;
      // TAO_IDL - Generated from
      // be/be_visitor_union_branch/private_ch.cpp:444
      Test::RecursiveStructSeq3 *c_;
    } u_;

    /// TAO extension - frees any allocated storage.
    void _reset (void);
  };

  // TAO_IDL - Generated from
  // be/be_visitor_typecode/typecode_decl.cpp:34

  extern  ::CORBA::TypeCode_ptr const _tc_RecursiveUnion3;

  // TAO_IDL - Generated from
  // be/be_visitor_structure/structure_ch.cpp:48

  struct  RecursiveStruct3
  {

    // TAO_IDL - Generated from
    // be/be_type.cpp:304


    typedef RecursiveStruct3_var _var_type;
    typedef RecursiveStruct3_out _out_type;

    static void _tao_any_destructor (void *);



    Test::RecursiveUnion3 uni;
  };

  // TAO_IDL - Generated from
  // be/be_visitor_typecode/typecode_decl.cpp:34

  extern  ::CORBA::TypeCode_ptr const _tc_RecursiveStruct3;

  // TAO_IDL - Generated from
  // be/be_type.cpp:258

  class RecursiveUnionNoDefault;

  typedef
    ::TAO_Var_Var_T<
        RecursiveUnionNoDefault
      >
    RecursiveUnionNoDefault_var;

  typedef
    ::TAO_Out_T<
        RecursiveUnionNoDefault
      >
    RecursiveUnionNoDefault_out;

  // TAO_IDL - Generated from
  // be/be_visitor_sequence/sequence_ch.cpp:99

#if !defined (_TEST_RECURSIVEUNIONSEQNODEFAULT_CH_)
#define _TEST_RECURSIVEUNIONSEQNODEFAULT_CH_

  class RecursiveUnionSeqNoDefault;

  typedef
    ::TAO_VarSeq_Var_T<
        RecursiveUnionSeqNoDefault
      >
    RecursiveUnionSeqNoDefault_var;

  typedef
    ::TAO_Seq_Out_T<
        RecursiveUnionSeqNoDefault
      >
    RecursiveUnionSeqNoDefault_out;

  class  RecursiveUnionSeqNoDefault
    : public
        ::TAO::unbounded_value_sequence<
            RecursiveUnionNoDefault
          >
  {
  public:
    RecursiveUnionSeqNoDefault (void);
    RecursiveUnionSeqNoDefault ( ::CORBA::ULong max);
    RecursiveUnionSeqNoDefault (
      ::CORBA::ULong max,
      ::CORBA::ULong length,
      RecursiveUnionNoDefault* buffer,
      ::CORBA::Boolean release = false);
    RecursiveUnionSeqNoDefault (const RecursiveUnionSeqNoDefault &);
    virtual ~RecursiveUnionSeqNoDefault (void);


    // TAO_IDL - Generated from
    // be/be_type.cpp:304


    typedef RecursiveUnionSeqNoDefault_var _var_type;
    typedef RecursiveUnionSeqNoDefault_out _out_type;

    static void _tao_any_destructor (void *);
  };

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // be/be_visitor_typecode/typecode_decl.cpp:34

  extern  ::CORBA::TypeCode_ptr const _tc_RecursiveUnionSeqNoDefault;

  class  RecursiveUnionNoDefault
  {
  public:
    RecursiveUnionNoDefault (void);
    RecursiveUnionNoDefault (const RecursiveUnionNoDefault &);
    ~RecursiveUnionNoDefault (void);

    RecursiveUnionNoDefault &operator= (const RecursiveUnionNoDefault &);

    // TAO_IDL - Generated from
    // be/be_visitor_union/discriminant_ch.cpp:100

    void _d ( ::CORBA::Short);
    ::CORBA::Short _d (void) const;

    // TAO_IDL - Generated from
    // be/be_type.cpp:304


    typedef RecursiveUnionNoDefault_var _var_type;
    typedef RecursiveUnionNoDefault_out _out_type;

    static void _tao_any_destructor (void *);

    // TAO_IDL - Generated from
    // be/be_visitor_union_branch/public_ch.cpp:548

    void recursive_unions (const Test::RecursiveUnionSeqNoDefault &);
    const Test::RecursiveUnionSeqNoDefault &recursive_unions (void) const;
    Test::RecursiveUnionSeqNoDefault &recursive_unions (void);

    // TAO_IDL - Generated from
    // be/be_visitor_union_branch/public_ch.cpp:449

    void a ( ::CORBA::Short);
    ::CORBA::Short a (void) const;

    // TAO_IDL - Generated from
    // be/be_visitor_union_branch/public_ch.cpp:548

    void recursive_unions_second (const Test::RecursiveUnionSeqNoDefault &);
    const Test::RecursiveUnionSeqNoDefault &recursive_unions_second (void) const;
    Test::RecursiveUnionSeqNoDefault &recursive_unions_second (void);

    // TAO_IDL - Generated from
    // be/be_visitor_union/union_ch.cpp:121

    void _default (void);
  private:
    ::CORBA::Short disc_;

    union
    {
      // TAO_IDL - Generated from
      // be/be_visitor_union_branch/private_ch.cpp:444
      Test::RecursiveUnionSeqNoDefault *recursive_unions_;
      // TAO_IDL - Generated from
      // be/be_visitor_union_branch/private_ch.cpp:377
      ::CORBA::Short a_;
      // TAO_IDL - Generated from
      // be/be_visitor_union_branch/private_ch.cpp:444
      Test::RecursiveUnionSeqNoDefault *recursive_unions_second_;
    } u_;

    /// TAO extension - frees any allocated storage.
    void _reset (void);
  };

  // TAO_IDL - Generated from
  // be/be_visitor_typecode/typecode_decl.cpp:34

  extern  ::CORBA::TypeCode_ptr const _tc_RecursiveUnionNoDefault;

  // TAO_IDL - Generated from
  // be/be_visitor_enum/enum_ch.cpp:44

  enum VSort
  {
    UNKNOWN_TYPE,
    RECURSIVE_TYPE,
    LONG_STYPE,
    BOOL_STYPE
  };

  typedef VSort &VSort_out;

  // TAO_IDL - Generated from
  // be/be_visitor_typecode/typecode_decl.cpp:34

  extern  ::CORBA::TypeCode_ptr const _tc_VSort;

  // TAO_IDL - Generated from
  // be/be_type.cpp:258

  class VSortRecursiveUnion;

  typedef
    ::TAO_Var_Var_T<
        VSortRecursiveUnion
      >
    VSortRecursiveUnion_var;

  typedef
    ::TAO_Out_T<
        VSortRecursiveUnion
      >
    VSortRecursiveUnion_out;

  // TAO_IDL - Generated from
  // be/be_visitor_sequence/sequence_ch.cpp:99

#if !defined (_TEST_VSORTRECURSIVEUNIONSEQ_CH_)
#define _TEST_VSORTRECURSIVEUNIONSEQ_CH_

  class VSortRecursiveUnionSeq;

  typedef
    ::TAO_VarSeq_Var_T<
        VSortRecursiveUnionSeq
      >
    VSortRecursiveUnionSeq_var;

  typedef
    ::TAO_Seq_Out_T<
        VSortRecursiveUnionSeq
      >
    VSortRecursiveUnionSeq_out;

  class  VSortRecursiveUnionSeq
    : public
        ::TAO::unbounded_value_sequence<
            VSortRecursiveUnion
          >
  {
  public:
    VSortRecursiveUnionSeq (void);
    VSortRecursiveUnionSeq ( ::CORBA::ULong max);
    VSortRecursiveUnionSeq (
      ::CORBA::ULong max,
      ::CORBA::ULong length,
      VSortRecursiveUnion* buffer,
      ::CORBA::Boolean release = false);
    VSortRecursiveUnionSeq (const VSortRecursiveUnionSeq &);
    virtual ~VSortRecursiveUnionSeq (void);


    // TAO_IDL - Generated from
    // be/be_type.cpp:304


    typedef VSortRecursiveUnionSeq_var _var_type;
    typedef VSortRecursiveUnionSeq_out _out_type;

    static void _tao_any_destructor (void *);
  };

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // be/be_visitor_typecode/typecode_decl.cpp:34

  extern  ::CORBA::TypeCode_ptr const _tc_VSortRecursiveUnionSeq;

  class  VSortRecursiveUnion
  {
  public:
    VSortRecursiveUnion (void);
    VSortRecursiveUnion (const VSortRecursiveUnion &);
    ~VSortRecursiveUnion (void);

    VSortRecursiveUnion &operator= (const VSortRecursiveUnion &);

    // TAO_IDL - Generated from
    // be/be_visitor_union/discriminant_ch.cpp:67

    void _d (Test::VSort);
    Test::VSort _d (void) const;

    // TAO_IDL - Generated from
    // be/be_type.cpp:304


    typedef VSortRecursiveUnion_var _var_type;
    typedef VSortRecursiveUnion_out _out_type;

    static void _tao_any_destructor (void *);

    // TAO_IDL - Generated from
    // be/be_visitor_union_branch/public_ch.cpp:548

    void recursive_unions (const Test::VSortRecursiveUnionSeq &);
    const Test::VSortRecursiveUnionSeq &recursive_unions (void) const;
    Test::VSortRecursiveUnionSeq &recursive_unions (void);

    // TAO_IDL - Generated from
    // be/be_visitor_union_branch/public_ch.cpp:449

    void i ( ::CORBA::Long);
    ::CORBA::Long i (void) const;

    // TAO_IDL - Generated from
    // be/be_visitor_union/union_ch.cpp:121

    void _default (void);
  private:
    Test::VSort disc_;

    union
    {
      // TAO_IDL - Generated from
      // be/be_visitor_union_branch/private_ch.cpp:444
      Test::VSortRecursiveUnionSeq *recursive_unions_;
      // TAO_IDL - Generated from
      // be/be_visitor_union_branch/private_ch.cpp:377
      ::CORBA::Long i_;
    } u_;

    /// TAO extension - frees any allocated storage.
    void _reset (void);
  };

  // TAO_IDL - Generated from
  // be/be_visitor_typecode/typecode_decl.cpp:34

  extern  ::CORBA::TypeCode_ptr const _tc_VSortRecursiveUnion;

  // TAO_IDL - Generated from
  // be/be_type.cpp:258

  class EnumUnion;

  typedef
    ::TAO_Fixed_Var_T<
        EnumUnion
      >
    EnumUnion_var;

  typedef
    EnumUnion &
    EnumUnion_out;

  class  EnumUnion
  {
  public:
    EnumUnion (void);
    EnumUnion (const EnumUnion &);
    ~EnumUnion (void);

    EnumUnion &operator= (const EnumUnion &);

    // TAO_IDL - Generated from
    // be/be_visitor_union/discriminant_ch.cpp:67

    void _d (Test::VSort);
    Test::VSort _d (void) const;

    // TAO_IDL - Generated from
    // be/be_type.cpp:304


    typedef EnumUnion_var _var_type;
    typedef EnumUnion_out _out_type;

    static void _tao_any_destructor (void *);

    // TAO_IDL - Generated from
    // be/be_visitor_union_branch/public_ch.cpp:449

    void a ( ::CORBA::Boolean);
    ::CORBA::Boolean a (void) const;

    // TAO_IDL - Generated from
    // be/be_visitor_union_branch/public_ch.cpp:449

    void i ( ::CORBA::Long);
    ::CORBA::Long i (void) const;

    // TAO_IDL - Generated from
    // be/be_visitor_union/union_ch.cpp:121

    void _default (void);
  private:
    Test::VSort disc_;

    union
    {
      // TAO_IDL - Generated from
      // be/be_visitor_union_branch/private_ch.cpp:377
      ::CORBA::Boolean a_;
      // TAO_IDL - Generated from
      // be/be_visitor_union_branch/private_ch.cpp:377
      ::CORBA::Long i_;
    } u_;

    /// TAO extension - frees any allocated storage.
    void _reset (void);
  };

  // TAO_IDL - Generated from
  // be/be_visitor_typecode/typecode_decl.cpp:34

  extern  ::CORBA::TypeCode_ptr const _tc_EnumUnion;

  // TAO_IDL - Generated from
  // be/be_valuetype.cpp:564



#if !defined (_TEST_INDIRECTLYRECURSIVEVALUETYPE__VAR_OUT_CH_)
#define _TEST_INDIRECTLYRECURSIVEVALUETYPE__VAR_OUT_CH_

  class IndirectlyRecursiveValuetype;
  typedef
    TAO_Value_Var_T<
        IndirectlyRecursiveValuetype
      >
    IndirectlyRecursiveValuetype_var;

  typedef
    TAO_Value_Out_T<
        IndirectlyRecursiveValuetype
      >
    IndirectlyRecursiveValuetype_out;

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // be/be_visitor_sequence/sequence_ch.cpp:99

#if !defined (_TEST_INDIRECTLYRECURSIVEVALUETYPESEQ_CH_)
#define _TEST_INDIRECTLYRECURSIVEVALUETYPESEQ_CH_

  class IndirectlyRecursiveValuetypeSeq;

  typedef
    ::TAO_VarSeq_Var_T<
        IndirectlyRecursiveValuetypeSeq
      >
    IndirectlyRecursiveValuetypeSeq_var;

  typedef
    ::TAO_Seq_Out_T<
        IndirectlyRecursiveValuetypeSeq
      >
    IndirectlyRecursiveValuetypeSeq_out;

  class  IndirectlyRecursiveValuetypeSeq
    : public
        ::TAO::unbounded_valuetype_sequence<
            IndirectlyRecursiveValuetype,
            IndirectlyRecursiveValuetype_var
          >
  {
  public:
    IndirectlyRecursiveValuetypeSeq (void);
    IndirectlyRecursiveValuetypeSeq ( ::CORBA::ULong max);
    IndirectlyRecursiveValuetypeSeq (
      ::CORBA::ULong max,
      ::CORBA::ULong length,
      IndirectlyRecursiveValuetype ** buffer,
      ::CORBA::Boolean release = false);
    IndirectlyRecursiveValuetypeSeq (const IndirectlyRecursiveValuetypeSeq &);
    virtual ~IndirectlyRecursiveValuetypeSeq (void);


    // TAO_IDL - Generated from
    // be/be_type.cpp:304


    typedef IndirectlyRecursiveValuetypeSeq_var _var_type;
    typedef IndirectlyRecursiveValuetypeSeq_out _out_type;

    static void _tao_any_destructor (void *);
  };

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // be/be_visitor_typecode/typecode_decl.cpp:34

  extern  ::CORBA::TypeCode_ptr const _tc_IndirectlyRecursiveValuetypeSeq;

  // TAO_IDL - Generated from
  // be/be_visitor_valuetype/valuetype_ch.cpp:50

  class  IndirectlyRecursiveValuetype
    : public virtual ::CORBA::ValueBase
  {
  public:

    // TAO_IDL - Generated from
    // be/be_type.cpp:304

    typedef IndirectlyRecursiveValuetype * _ptr_type;
    typedef IndirectlyRecursiveValuetype_var _var_type;
    typedef IndirectlyRecursiveValuetype_out _out_type;

    static void _tao_any_destructor (void *);

    static IndirectlyRecursiveValuetype* _downcast ( ::CORBA::ValueBase *v);

    /// TAO extensions or internals
    static ::CORBA::Boolean _tao_unmarshal (
        TAO_InputCDR &strm,
        IndirectlyRecursiveValuetype *&new_object);

    virtual const char* _tao_obv_repository_id (void) const;

    virtual void _tao_obv_truncatable_repo_ids (Repository_Id_List &) const;

    static const char* _tao_obv_static_repository_id (void);

    virtual ::CORBA::TypeCode_ptr _tao_type (void) const;

  public:

    // TAO_IDL - Generated from
    // be/be_visitor_valuetype/field_ch.cpp:533

    virtual void recursive_valuetypes (const Test::IndirectlyRecursiveValuetypeSeq &) = 0;
    virtual const Test::IndirectlyRecursiveValuetypeSeq &recursive_valuetypes (void) const = 0;
    virtual Test::IndirectlyRecursiveValuetypeSeq &recursive_valuetypes (void) = 0;

    // TAO_IDL - Generated from
    // be/be_visitor_valuetype/valuetype_ch.cpp:238

  protected:
    IndirectlyRecursiveValuetype (void);
    virtual ~IndirectlyRecursiveValuetype (void);

    virtual ::CORBA::Boolean _tao_marshal_v (TAO_OutputCDR &) const;
    virtual ::CORBA::Boolean _tao_unmarshal_v (TAO_InputCDR &);
    virtual ::CORBA::Boolean _tao_match_formal_type (ptrdiff_t ) const;

  private:
    IndirectlyRecursiveValuetype (const IndirectlyRecursiveValuetype &);
    void operator= (const IndirectlyRecursiveValuetype &);

  protected:
    virtual ::CORBA::Boolean
    _tao_marshal__Test_IndirectlyRecursiveValuetype (TAO_OutputCDR &, TAO_ChunkInfo &) const = 0;

    virtual ::CORBA::Boolean
    _tao_unmarshal__Test_IndirectlyRecursiveValuetype (TAO_InputCDR &, TAO_ChunkInfo &) = 0;
  };

  // TAO_IDL - Generated from
  // be/be_visitor_valuetype/valuetype_init_ch.cpp:57

  class  IndirectlyRecursiveValuetype_init
    : public virtual ::CORBA::ValueFactoryBase
  {
  public:
    IndirectlyRecursiveValuetype_init (void);

    static IndirectlyRecursiveValuetype_init* _downcast ( ::CORBA::ValueFactoryBase *);

    virtual ::CORBA::ValueBase *
    create_for_unmarshal (void);

    // TAO-specific extensions
  public:
    virtual const char* tao_repository_id (void);

  protected:
    virtual ~IndirectlyRecursiveValuetype_init (void);
  };

  // TAO_IDL - Generated from
  // be/be_visitor_typecode/typecode_decl.cpp:34

  extern  ::CORBA::TypeCode_ptr const _tc_IndirectlyRecursiveValuetype;

  // TAO_IDL - Generated from
  // be/be_valuetype.cpp:564



#if !defined (_TEST_DIRECTLYRECURSIVEVALUETYPE__VAR_OUT_CH_)
#define _TEST_DIRECTLYRECURSIVEVALUETYPE__VAR_OUT_CH_

  class DirectlyRecursiveValuetype;
  typedef
    TAO_Value_Var_T<
        DirectlyRecursiveValuetype
      >
    DirectlyRecursiveValuetype_var;

  typedef
    TAO_Value_Out_T<
        DirectlyRecursiveValuetype
      >
    DirectlyRecursiveValuetype_out;

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // be/be_visitor_valuetype/valuetype_ch.cpp:50

  class  DirectlyRecursiveValuetype
    : public virtual ::CORBA::ValueBase
  {
  public:

    // TAO_IDL - Generated from
    // be/be_type.cpp:304

    typedef DirectlyRecursiveValuetype * _ptr_type;
    typedef DirectlyRecursiveValuetype_var _var_type;
    typedef DirectlyRecursiveValuetype_out _out_type;

    static void _tao_any_destructor (void *);

    static DirectlyRecursiveValuetype* _downcast ( ::CORBA::ValueBase *v);

    /// TAO extensions or internals
    static ::CORBA::Boolean _tao_unmarshal (
        TAO_InputCDR &strm,
        DirectlyRecursiveValuetype *&new_object);

    virtual const char* _tao_obv_repository_id (void) const;

    virtual void _tao_obv_truncatable_repo_ids (Repository_Id_List &) const;

    static const char* _tao_obv_static_repository_id (void);

    virtual ::CORBA::TypeCode_ptr _tao_type (void) const;

  public:

    // TAO_IDL - Generated from
    // be/be_visitor_valuetype/field_ch.cpp:361

    virtual void recursive_valuetype (Test::DirectlyRecursiveValuetype *) = 0;
    virtual Test::DirectlyRecursiveValuetype *recursive_valuetype (void) const = 0;

  public:

    // TAO_IDL - Generated from
    // be/be_visitor_valuetype/field_ch.cpp:361

    virtual void recursive_valuetype_second (Test::DirectlyRecursiveValuetype *) = 0;
    virtual Test::DirectlyRecursiveValuetype *recursive_valuetype_second (void) const = 0;

    // TAO_IDL - Generated from
    // be/be_visitor_valuetype/valuetype_ch.cpp:238

  protected:
    DirectlyRecursiveValuetype (void);
    virtual ~DirectlyRecursiveValuetype (void);

    virtual ::CORBA::Boolean _tao_marshal_v (TAO_OutputCDR &) const;
    virtual ::CORBA::Boolean _tao_unmarshal_v (TAO_InputCDR &);
    virtual ::CORBA::Boolean _tao_match_formal_type (ptrdiff_t ) const;

  private:
    DirectlyRecursiveValuetype (const DirectlyRecursiveValuetype &);
    void operator= (const DirectlyRecursiveValuetype &);

  protected:
    virtual ::CORBA::Boolean
    _tao_marshal__Test_DirectlyRecursiveValuetype (TAO_OutputCDR &, TAO_ChunkInfo &) const = 0;

    virtual ::CORBA::Boolean
    _tao_unmarshal__Test_DirectlyRecursiveValuetype (TAO_InputCDR &, TAO_ChunkInfo &) = 0;
  };

  // TAO_IDL - Generated from
  // be/be_visitor_valuetype/valuetype_init_ch.cpp:57

  class  DirectlyRecursiveValuetype_init
    : public virtual ::CORBA::ValueFactoryBase
  {
  public:
    DirectlyRecursiveValuetype_init (void);

    static DirectlyRecursiveValuetype_init* _downcast ( ::CORBA::ValueFactoryBase *);

    virtual ::CORBA::ValueBase *
    create_for_unmarshal (void);

    // TAO-specific extensions
  public:
    virtual const char* tao_repository_id (void);

  protected:
    virtual ~DirectlyRecursiveValuetype_init (void);
  };

  // TAO_IDL - Generated from
  // be/be_visitor_typecode/typecode_decl.cpp:34

  extern  ::CORBA::TypeCode_ptr const _tc_DirectlyRecursiveValuetype;

  // TAO_IDL - Generated from
  // be/be_visitor_enum/enum_ch.cpp:44

  enum PositionEnum
  {
    unknownpos
  };

  typedef PositionEnum &PositionEnum_out;

  // TAO_IDL - Generated from
  // be/be_visitor_typecode/typecode_decl.cpp:34

  extern  ::CORBA::TypeCode_ptr const _tc_PositionEnum;

  // TAO_IDL - Generated from
  // be/be_type.cpp:258

  struct Position;

  typedef
    ::TAO_Fixed_Var_T<
        Position
      >
    Position_var;

  typedef
    Position &
    Position_out;

  // TAO_IDL - Generated from
  // be/be_visitor_structure/structure_ch.cpp:48

  struct  Position
  {

    // TAO_IDL - Generated from
    // be/be_type.cpp:304


    typedef Position_var _var_type;
    typedef Position_out _out_type;

    static void _tao_any_destructor (void *);

    Test::PositionEnum type;
  };

  // TAO_IDL - Generated from
  // be/be_visitor_typecode/typecode_decl.cpp:34

  extern  ::CORBA::TypeCode_ptr const _tc_Position;

  // TAO_IDL - Generated from
  // be/be_visitor_typedef/typedef_ch.cpp:463

  typedef CORBA::OctetSeq OctetSeq;
  typedef CORBA::OctetSeq_var OctetSeq_var;
  typedef CORBA::OctetSeq_out OctetSeq_out;

  // TAO_IDL - Generated from
  // be/be_visitor_typecode/typecode_decl.cpp:34

  extern  ::CORBA::TypeCode_ptr const _tc_OctetSeq;

  // TAO_IDL - Generated from
  // be/be_visitor_enum/enum_ch.cpp:44

  enum ValueSort
  {
    POSITION_TYPE,
    OCTET_SEQ_TYPE
  };

  typedef ValueSort &ValueSort_out;

  // TAO_IDL - Generated from
  // be/be_visitor_typecode/typecode_decl.cpp:34

  extern  ::CORBA::TypeCode_ptr const _tc_ValueSort;

  // TAO_IDL - Generated from
  // be/be_type.cpp:258

  class NonRecursiveUnionWithEnum;

  typedef
    ::TAO_Var_Var_T<
        NonRecursiveUnionWithEnum
      >
    NonRecursiveUnionWithEnum_var;

  typedef
    ::TAO_Out_T<
        NonRecursiveUnionWithEnum
      >
    NonRecursiveUnionWithEnum_out;

  class  NonRecursiveUnionWithEnum
  {
  public:
    NonRecursiveUnionWithEnum (void);
    NonRecursiveUnionWithEnum (const NonRecursiveUnionWithEnum &);
    ~NonRecursiveUnionWithEnum (void);

    NonRecursiveUnionWithEnum &operator= (const NonRecursiveUnionWithEnum &);

    // TAO_IDL - Generated from
    // be/be_visitor_union/discriminant_ch.cpp:67

    void _d (Test::ValueSort);
    Test::ValueSort _d (void) const;

    // TAO_IDL - Generated from
    // be/be_type.cpp:304


    typedef NonRecursiveUnionWithEnum_var _var_type;
    typedef NonRecursiveUnionWithEnum_out _out_type;

    static void _tao_any_destructor (void *);

    // TAO_IDL - Generated from
    // be/be_visitor_union_branch/public_ch.cpp:656

    void position_val (const Test::Position &);
    const Test::Position &position_val (void) const;
    Test::Position &position_val (void);

    // TAO_IDL - Generated from
    // be/be_visitor_union_branch/public_ch.cpp:548

    void octet_seq_val (const Test::OctetSeq &);
    const Test::OctetSeq &octet_seq_val (void) const;
    Test::OctetSeq &octet_seq_val (void);

    // TAO_IDL - Generated from
    // be/be_visitor_union/union_ch.cpp:121

    void _default (void);
  private:
    Test::ValueSort disc_;

    union
    {
      // TAO_IDL - Generated from
      // be/be_visitor_union_branch/private_ch.cpp:519
      Test::Position position_val_;
      // TAO_IDL - Generated from
      // be/be_visitor_union_branch/private_ch.cpp:444
      Test::OctetSeq *octet_seq_val_;
    } u_;

    /// TAO extension - frees any allocated storage.
    void _reset (void);
  };

  // TAO_IDL - Generated from
  // be/be_visitor_typecode/typecode_decl.cpp:34

  extern  ::CORBA::TypeCode_ptr const _tc_NonRecursiveUnionWithEnum;

  // TAO_IDL - Generated from
  // be/be_visitor_enum/enum_ch.cpp:44

  enum ValueSort2
  {
    SYMBOL_TYPE2
  };

  typedef ValueSort2 &ValueSort2_out;

  // TAO_IDL - Generated from
  // be/be_visitor_typecode/typecode_decl.cpp:34

  extern  ::CORBA::TypeCode_ptr const _tc_ValueSort2;

  // TAO_IDL - Generated from
  // be/be_type.cpp:258

  struct Symbol2;

  typedef
    ::TAO_Var_Var_T<
        Symbol2
      >
    Symbol2_var;

  typedef
    ::TAO_Out_T<
        Symbol2
      >
    Symbol2_out;

  // TAO_IDL - Generated from
  // be/be_visitor_structure/structure_ch.cpp:48

  struct  Symbol2
  {

    // TAO_IDL - Generated from
    // be/be_type.cpp:304


    typedef Symbol2_var _var_type;
    typedef Symbol2_out _out_type;

    static void _tao_any_destructor (void *);

    ::TAO::String_Manager name;
  };

  // TAO_IDL - Generated from
  // be/be_visitor_typecode/typecode_decl.cpp:34

  extern  ::CORBA::TypeCode_ptr const _tc_Symbol2;

  // TAO_IDL - Generated from
  // be/be_type.cpp:258

  class NonRecursiveUnionWithStringStruct;

  typedef
    ::TAO_Var_Var_T<
        NonRecursiveUnionWithStringStruct
      >
    NonRecursiveUnionWithStringStruct_var;

  typedef
    ::TAO_Out_T<
        NonRecursiveUnionWithStringStruct
      >
    NonRecursiveUnionWithStringStruct_out;

  class  NonRecursiveUnionWithStringStruct
  {
  public:
    NonRecursiveUnionWithStringStruct (void);
    NonRecursiveUnionWithStringStruct (const NonRecursiveUnionWithStringStruct &);
    ~NonRecursiveUnionWithStringStruct (void);

    NonRecursiveUnionWithStringStruct &operator= (const NonRecursiveUnionWithStringStruct &);

    // TAO_IDL - Generated from
    // be/be_visitor_union/discriminant_ch.cpp:67

    void _d (Test::ValueSort2);
    Test::ValueSort2 _d (void) const;

    // TAO_IDL - Generated from
    // be/be_type.cpp:304


    typedef NonRecursiveUnionWithStringStruct_var _var_type;
    typedef NonRecursiveUnionWithStringStruct_out _out_type;

    static void _tao_any_destructor (void *);

    // TAO_IDL - Generated from
    // be/be_visitor_union_branch/public_ch.cpp:656

    void symbol_val (const Test::Symbol2 &);
    const Test::Symbol2 &symbol_val (void) const;
    Test::Symbol2 &symbol_val (void);

    // TAO_IDL - Generated from
    // be/be_visitor_union/union_ch.cpp:121

    void _default (void);
  private:
    Test::ValueSort2 disc_;

    union
    {
      // TAO_IDL - Generated from
      // be/be_visitor_union_branch/private_ch.cpp:519
      Test::Symbol2 *symbol_val_;
    } u_;

    /// TAO extension - frees any allocated storage.
    void _reset (void);
  };

  // TAO_IDL - Generated from
  // be/be_visitor_typecode/typecode_decl.cpp:34

  extern  ::CORBA::TypeCode_ptr const _tc_NonRecursiveUnionWithStringStruct;

  // TAO_IDL - Generated from
  // be/be_interface.cpp:748

#if !defined (_TEST_HELLO__VAR_OUT_CH_)
#define _TEST_HELLO__VAR_OUT_CH_

  class Hello;
  typedef Hello *Hello_ptr;

  typedef
    TAO_Objref_Var_T<
        Hello
      >
    Hello_var;

  typedef
    TAO_Objref_Out_T<
        Hello
      >
    Hello_out;

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // be/be_visitor_interface/interface_ch.cpp:40

  class  Hello
    : public virtual ::CORBA::Object
  {
  public:
    friend class TAO::Narrow_Utils<Hello>;

    // TAO_IDL - Generated from
    // be/be_type.cpp:304

    typedef Hello_ptr _ptr_type;
    typedef Hello_var _var_type;
    typedef Hello_out _out_type;

    static void _tao_any_destructor (void *);

    // The static operations.
    static Hello_ptr _duplicate (Hello_ptr obj);

    static void _tao_release (Hello_ptr obj);

    static Hello_ptr _narrow (::CORBA::Object_ptr obj);
    static Hello_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
    static Hello_ptr _nil (void);

    virtual ::CORBA::Any * get_any (
      const ::CORBA::Any & the_any);

    virtual void shutdown (
      void);

    // TAO_IDL - Generated from
    // be/be_visitor_interface/interface_ch.cpp:137

    virtual ::CORBA::Boolean _is_a (const char *type_id);
    virtual const char* _interface_repository_id (void) const;
    virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);

  protected:
    // Concrete interface only.
    Hello (void);

    // Concrete non-local interface only.
    Hello (
        ::IOP::IOR *ior,
        TAO_ORB_Core *orb_core);

    // Non-local interface only.
    Hello (
        TAO_Stub *objref,
        ::CORBA::Boolean _tao_collocated = false,
        TAO_Abstract_ServantBase *servant = 0,
        TAO_ORB_Core *orb_core = 0);

    virtual ~Hello (void);

  private:
    // Private and unimplemented for concrete interfaces.
    Hello (const Hello &);

    void operator= (const Hello &);
  };

  // TAO_IDL - Generated from
  // be/be_visitor_typecode/typecode_decl.cpp:34

  extern  ::CORBA::TypeCode_ptr const _tc_Hello;

  // TAO_IDL - Generated from
  // be/be_valuetype.cpp:564



#if !defined (_TEST_RECURSIVE2__VAR_OUT_CH_)
#define _TEST_RECURSIVE2__VAR_OUT_CH_

  class Recursive2;
  typedef
    TAO_Value_Var_T<
        Recursive2
      >
    Recursive2_var;

  typedef
    TAO_Value_Out_T<
        Recursive2
      >
    Recursive2_out;

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // be/be_visitor_sequence/sequence_ch.cpp:99

#if !defined (_TEST_RECURSIVE2SEQ2_CH_)
#define _TEST_RECURSIVE2SEQ2_CH_

  class Recursive2Seq2;

  typedef
    ::TAO_VarSeq_Var_T<
        Recursive2Seq2
      >
    Recursive2Seq2_var;

  typedef
    ::TAO_Seq_Out_T<
        Recursive2Seq2
      >
    Recursive2Seq2_out;

  class  Recursive2Seq2
    : public
        ::TAO::unbounded_valuetype_sequence<
            Recursive2,
            Recursive2_var
          >
  {
  public:
    Recursive2Seq2 (void);
    Recursive2Seq2 ( ::CORBA::ULong max);
    Recursive2Seq2 (
      ::CORBA::ULong max,
      ::CORBA::ULong length,
      Recursive2 ** buffer,
      ::CORBA::Boolean release = false);
    Recursive2Seq2 (const Recursive2Seq2 &);
    virtual ~Recursive2Seq2 (void);


    // TAO_IDL - Generated from
    // be/be_type.cpp:304


    typedef Recursive2Seq2_var _var_type;
    typedef Recursive2Seq2_out _out_type;

    static void _tao_any_destructor (void *);
  };

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // be/be_visitor_typecode/typecode_decl.cpp:34

  extern  ::CORBA::TypeCode_ptr const _tc_Recursive2Seq2;

  // TAO_IDL - Generated from
  // be/be_visitor_valuetype/valuetype_ch.cpp:50

  class  Recursive2
    : public virtual ::CORBA::ValueBase
  {
  public:

    // TAO_IDL - Generated from
    // be/be_type.cpp:304

    typedef Recursive2 * _ptr_type;
    typedef Recursive2_var _var_type;
    typedef Recursive2_out _out_type;

    static void _tao_any_destructor (void *);

    static Recursive2* _downcast ( ::CORBA::ValueBase *v);

    /// TAO extensions or internals
    static ::CORBA::Boolean _tao_unmarshal (
        TAO_InputCDR &strm,
        Recursive2 *&new_object);

    virtual const char* _tao_obv_repository_id (void) const;

    virtual void _tao_obv_truncatable_repo_ids (Repository_Id_List &) const;

    static const char* _tao_obv_static_repository_id (void);

    virtual ::CORBA::TypeCode_ptr _tao_type (void) const;

  public:

    // TAO_IDL - Generated from
    // be/be_type.cpp:258

    struct Innerstruct3a;

    typedef
      ::TAO_Var_Var_T<
          Innerstruct3a
        >
      Innerstruct3a_var;

    typedef
      ::TAO_Out_T<
          Innerstruct3a
        >
      Innerstruct3a_out;

    // TAO_IDL - Generated from
    // be/be_visitor_structure/structure_ch.cpp:48

    struct  Innerstruct3a
    {

      // TAO_IDL - Generated from
      // be/be_type.cpp:304


      typedef Innerstruct3a_var _var_type;
      typedef Innerstruct3a_out _out_type;

      static void _tao_any_destructor (void *);

      Test::Recursive2Seq2 recursive_unions;
    };

    // TAO_IDL - Generated from
    // be/be_visitor_typecode/typecode_decl.cpp:34

    static ::CORBA::TypeCode_ptr const _tc_Innerstruct3a;

  public:

    // TAO_IDL - Generated from
    // be/be_visitor_valuetype/field_ch.cpp:674

    virtual void insa (const Test::Recursive2::Innerstruct3a &) = 0;
    virtual const Test::Recursive2::Innerstruct3a &insa (void) const = 0;
    virtual Test::Recursive2::Innerstruct3a &insa (void) = 0;

  public:

    // TAO_IDL - Generated from
    // be/be_visitor_valuetype/field_ch.cpp:459

    virtual void a (const ::CORBA::Short) = 0;
    virtual ::CORBA::Short a (void) const = 0;

  public:

    // TAO_IDL - Generated from
    // be/be_type.cpp:258

    struct Innerstruct3b;

    typedef
      ::TAO_Var_Var_T<
          Innerstruct3b
        >
      Innerstruct3b_var;

    typedef
      ::TAO_Out_T<
          Innerstruct3b
        >
      Innerstruct3b_out;

    // TAO_IDL - Generated from
    // be/be_visitor_structure/structure_ch.cpp:48

    struct  Innerstruct3b
    {

      // TAO_IDL - Generated from
      // be/be_type.cpp:304


      typedef Innerstruct3b_var _var_type;
      typedef Innerstruct3b_out _out_type;

      static void _tao_any_destructor (void *);

      Test::Recursive2Seq2 recursive_second;
    };

    // TAO_IDL - Generated from
    // be/be_visitor_typecode/typecode_decl.cpp:34

    static ::CORBA::TypeCode_ptr const _tc_Innerstruct3b;

  public:

    // TAO_IDL - Generated from
    // be/be_visitor_valuetype/field_ch.cpp:674

    virtual void insb (const Test::Recursive2::Innerstruct3b &) = 0;
    virtual const Test::Recursive2::Innerstruct3b &insb (void) const = 0;
    virtual Test::Recursive2::Innerstruct3b &insb (void) = 0;

    // TAO_IDL - Generated from
    // be/be_visitor_valuetype/valuetype_ch.cpp:238

  protected:
    Recursive2 (void);
    virtual ~Recursive2 (void);

    virtual ::CORBA::Boolean _tao_marshal_v (TAO_OutputCDR &) const;
    virtual ::CORBA::Boolean _tao_unmarshal_v (TAO_InputCDR &);
    virtual ::CORBA::Boolean _tao_match_formal_type (ptrdiff_t ) const;

  private:
    Recursive2 (const Recursive2 &);
    void operator= (const Recursive2 &);

  protected:
    virtual ::CORBA::Boolean
    _tao_marshal__Test_Recursive2 (TAO_OutputCDR &, TAO_ChunkInfo &) const = 0;

    virtual ::CORBA::Boolean
    _tao_unmarshal__Test_Recursive2 (TAO_InputCDR &, TAO_ChunkInfo &) = 0;
  };

  // TAO_IDL - Generated from
  // be/be_visitor_valuetype/valuetype_init_ch.cpp:57

  class  Recursive2_init
    : public virtual ::CORBA::ValueFactoryBase
  {
  public:
    Recursive2_init (void);

    static Recursive2_init* _downcast ( ::CORBA::ValueFactoryBase *);

    virtual ::CORBA::ValueBase *
    create_for_unmarshal (void);

    // TAO-specific extensions
  public:
    virtual const char* tao_repository_id (void);

  protected:
    virtual ~Recursive2_init (void);
  };

  // TAO_IDL - Generated from
  // be/be_visitor_typecode/typecode_decl.cpp:34

  extern  ::CORBA::TypeCode_ptr const _tc_Recursive2;

  // TAO_IDL - Generated from
  // be/be_valuetype.cpp:564



#if !defined (_TEST_RECURSIVE3__VAR_OUT_CH_)
#define _TEST_RECURSIVE3__VAR_OUT_CH_

  class Recursive3;
  typedef
    TAO_Value_Var_T<
        Recursive3
      >
    Recursive3_var;

  typedef
    TAO_Value_Out_T<
        Recursive3
      >
    Recursive3_out;

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // be/be_visitor_sequence/sequence_ch.cpp:99

#if !defined (_TEST_RECURSIVESEQ3_CH_)
#define _TEST_RECURSIVESEQ3_CH_

  class RecursiveSeq3;

  typedef
    ::TAO_VarSeq_Var_T<
        RecursiveSeq3
      >
    RecursiveSeq3_var;

  typedef
    ::TAO_Seq_Out_T<
        RecursiveSeq3
      >
    RecursiveSeq3_out;

  class  RecursiveSeq3
    : public
        ::TAO::unbounded_valuetype_sequence<
            Recursive3,
            Recursive3_var
          >
  {
  public:
    RecursiveSeq3 (void);
    RecursiveSeq3 ( ::CORBA::ULong max);
    RecursiveSeq3 (
      ::CORBA::ULong max,
      ::CORBA::ULong length,
      Recursive3 ** buffer,
      ::CORBA::Boolean release = false);
    RecursiveSeq3 (const RecursiveSeq3 &);
    virtual ~RecursiveSeq3 (void);


    // TAO_IDL - Generated from
    // be/be_type.cpp:304


    typedef RecursiveSeq3_var _var_type;
    typedef RecursiveSeq3_out _out_type;

    static void _tao_any_destructor (void *);
  };

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // be/be_visitor_typecode/typecode_decl.cpp:34

  extern  ::CORBA::TypeCode_ptr const _tc_RecursiveSeq3;

  // TAO_IDL - Generated from
  // be/be_visitor_valuetype/valuetype_ch.cpp:50

  class  Recursive3
    : public virtual ::CORBA::ValueBase
  {
  public:

    // TAO_IDL - Generated from
    // be/be_type.cpp:304

    typedef Recursive3 * _ptr_type;
    typedef Recursive3_var _var_type;
    typedef Recursive3_out _out_type;

    static void _tao_any_destructor (void *);

    static Recursive3* _downcast ( ::CORBA::ValueBase *v);

    /// TAO extensions or internals
    static ::CORBA::Boolean _tao_unmarshal (
        TAO_InputCDR &strm,
        Recursive3 *&new_object);

    virtual const char* _tao_obv_repository_id (void) const;

    virtual void _tao_obv_truncatable_repo_ids (Repository_Id_List &) const;

    static const char* _tao_obv_static_repository_id (void);

    virtual ::CORBA::TypeCode_ptr _tao_type (void) const;

  public:

    // TAO_IDL - Generated from
    // be/be_visitor_valuetype/field_ch.cpp:533

    virtual void seq1 (const Test::RecursiveSeq3 &) = 0;
    virtual const Test::RecursiveSeq3 &seq1 (void) const = 0;
    virtual Test::RecursiveSeq3 &seq1 (void) = 0;

  public:

    // TAO_IDL - Generated from
    // be/be_visitor_valuetype/field_ch.cpp:459

    virtual void a (const ::CORBA::Short) = 0;
    virtual ::CORBA::Short a (void) const = 0;

  public:

    // TAO_IDL - Generated from
    // be/be_visitor_valuetype/field_ch.cpp:533

    virtual void seq2 (const Test::RecursiveSeq3 &) = 0;
    virtual const Test::RecursiveSeq3 &seq2 (void) const = 0;
    virtual Test::RecursiveSeq3 &seq2 (void) = 0;

    // TAO_IDL - Generated from
    // be/be_visitor_valuetype/valuetype_ch.cpp:238

  protected:
    Recursive3 (void);
    virtual ~Recursive3 (void);

    virtual ::CORBA::Boolean _tao_marshal_v (TAO_OutputCDR &) const;
    virtual ::CORBA::Boolean _tao_unmarshal_v (TAO_InputCDR &);
    virtual ::CORBA::Boolean _tao_match_formal_type (ptrdiff_t ) const;

  private:
    Recursive3 (const Recursive3 &);
    void operator= (const Recursive3 &);

  protected:
    virtual ::CORBA::Boolean
    _tao_marshal__Test_Recursive3 (TAO_OutputCDR &, TAO_ChunkInfo &) const = 0;

    virtual ::CORBA::Boolean
    _tao_unmarshal__Test_Recursive3 (TAO_InputCDR &, TAO_ChunkInfo &) = 0;
  };

  // TAO_IDL - Generated from
  // be/be_visitor_valuetype/valuetype_init_ch.cpp:57

  class  Recursive3_init
    : public virtual ::CORBA::ValueFactoryBase
  {
  public:
    Recursive3_init (void);

    static Recursive3_init* _downcast ( ::CORBA::ValueFactoryBase *);

    virtual ::CORBA::ValueBase *
    create_for_unmarshal (void);

    // TAO-specific extensions
  public:
    virtual const char* tao_repository_id (void);

  protected:
    virtual ~Recursive3_init (void);
  };

  // TAO_IDL - Generated from
  // be/be_visitor_typecode/typecode_decl.cpp:34

  extern  ::CORBA::TypeCode_ptr const _tc_Recursive3;

// TAO_IDL - Generated from
// be/be_visitor_module/module_ch.cpp:64

} // module Test

// TAO_IDL - Generated from
// be/be_visitor_arg_traits.cpp:66

TAO_BEGIN_VERSIONED_NAMESPACE_DECL


// Arg traits specializations.
namespace TAO
{

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:683

  template<>
  class Arg_Traits< ::Test::RecursiveStructSeq>
    : public
        Var_Size_Arg_Traits_T<
            ::Test::RecursiveStructSeq,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:945

  template<>
  class Arg_Traits< ::Test::RecursiveStruct>
    : public
        Var_Size_Arg_Traits_T<
            ::Test::RecursiveStruct,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:683

  template<>
  class Arg_Traits< ::Test::NestedRecursiveStructSeq>
    : public
        Var_Size_Arg_Traits_T<
            ::Test::NestedRecursiveStructSeq,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:945

  template<>
  class Arg_Traits< ::Test::NestedRecursiveStruct>
    : public
        Var_Size_Arg_Traits_T<
            ::Test::NestedRecursiveStruct,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:945

  template<>
  class Arg_Traits< ::Test::NestedRecursiveStruct::InnerStruct>
    : public
        Var_Size_Arg_Traits_T<
            ::Test::NestedRecursiveStruct::InnerStruct,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:683

  template<>
  class Arg_Traits< ::Test::RecursiveUnionSeq>
    : public
        Var_Size_Arg_Traits_T<
            ::Test::RecursiveUnionSeq,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:1056

  template<>
  class Arg_Traits< ::Test::RecursiveUnion>
    : public
        Var_Size_Arg_Traits_T<
            ::Test::RecursiveUnion,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:683

  template<>
  class Arg_Traits< ::Test::RecursiveUnionSeq2>
    : public
        Var_Size_Arg_Traits_T<
            ::Test::RecursiveUnionSeq2,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:1056

  template<>
  class Arg_Traits< ::Test::RecursiveUnion2>
    : public
        Var_Size_Arg_Traits_T<
            ::Test::RecursiveUnion2,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:945

  template<>
  class Arg_Traits< ::Test::RecursiveUnion2::Innerstruct3a>
    : public
        Var_Size_Arg_Traits_T<
            ::Test::RecursiveUnion2::Innerstruct3a,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:945

  template<>
  class Arg_Traits< ::Test::RecursiveUnion2::Innerstruct3b>
    : public
        Var_Size_Arg_Traits_T<
            ::Test::RecursiveUnion2::Innerstruct3b,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:683

  template<>
  class Arg_Traits< ::Test::RecursiveStructSeq3>
    : public
        Var_Size_Arg_Traits_T<
            ::Test::RecursiveStructSeq3,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:1056

  template<>
  class Arg_Traits< ::Test::RecursiveUnion3>
    : public
        Var_Size_Arg_Traits_T<
            ::Test::RecursiveUnion3,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:945

  template<>
  class Arg_Traits< ::Test::RecursiveStruct3>
    : public
        Var_Size_Arg_Traits_T<
            ::Test::RecursiveStruct3,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:683

  template<>
  class Arg_Traits< ::Test::RecursiveUnionSeqNoDefault>
    : public
        Var_Size_Arg_Traits_T<
            ::Test::RecursiveUnionSeqNoDefault,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:1056

  template<>
  class Arg_Traits< ::Test::RecursiveUnionNoDefault>
    : public
        Var_Size_Arg_Traits_T<
            ::Test::RecursiveUnionNoDefault,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:902

  template<>
  class Arg_Traits< ::Test::VSort>
    : public
        Basic_Arg_Traits_T<
            ::Test::VSort,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:683

  template<>
  class Arg_Traits< ::Test::VSortRecursiveUnionSeq>
    : public
        Var_Size_Arg_Traits_T<
            ::Test::VSortRecursiveUnionSeq,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:1056

  template<>
  class Arg_Traits< ::Test::VSortRecursiveUnion>
    : public
        Var_Size_Arg_Traits_T<
            ::Test::VSortRecursiveUnion,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:1056

  template<>
  class Arg_Traits< ::Test::EnumUnion>
    : public
        Fixed_Size_Arg_Traits_T<
            ::Test::EnumUnion,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:306

#if !defined (_TEST_INDIRECTLYRECURSIVEVALUETYPE__ARG_TRAITS_)
#define _TEST_INDIRECTLYRECURSIVEVALUETYPE__ARG_TRAITS_

  template<>
  class Arg_Traits< ::Test::IndirectlyRecursiveValuetype>
    : public
        Object_Arg_Traits_T<
            ::Test::IndirectlyRecursiveValuetype *,
            ::Test::IndirectlyRecursiveValuetype_var,
            ::Test::IndirectlyRecursiveValuetype_out,
            TAO::Value_Traits<Test::IndirectlyRecursiveValuetype>,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:683

  template<>
  class Arg_Traits< ::Test::IndirectlyRecursiveValuetypeSeq>
    : public
        Var_Size_Arg_Traits_T<
            ::Test::IndirectlyRecursiveValuetypeSeq,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:306

#if !defined (_TEST_DIRECTLYRECURSIVEVALUETYPE__ARG_TRAITS_)
#define _TEST_DIRECTLYRECURSIVEVALUETYPE__ARG_TRAITS_

  template<>
  class Arg_Traits< ::Test::DirectlyRecursiveValuetype>
    : public
        Object_Arg_Traits_T<
            ::Test::DirectlyRecursiveValuetype *,
            ::Test::DirectlyRecursiveValuetype_var,
            ::Test::DirectlyRecursiveValuetype_out,
            TAO::Value_Traits<Test::DirectlyRecursiveValuetype>,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:902

  template<>
  class Arg_Traits< ::Test::PositionEnum>
    : public
        Basic_Arg_Traits_T<
            ::Test::PositionEnum,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:945

  template<>
  class Arg_Traits< ::Test::Position>
    : public
        Fixed_Size_Arg_Traits_T<
            ::Test::Position,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:902

  template<>
  class Arg_Traits< ::Test::ValueSort>
    : public
        Basic_Arg_Traits_T<
            ::Test::ValueSort,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:1056

  template<>
  class Arg_Traits< ::Test::NonRecursiveUnionWithEnum>
    : public
        Var_Size_Arg_Traits_T<
            ::Test::NonRecursiveUnionWithEnum,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:902

  template<>
  class Arg_Traits< ::Test::ValueSort2>
    : public
        Basic_Arg_Traits_T<
            ::Test::ValueSort2,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:945

  template<>
  class Arg_Traits< ::Test::Symbol2>
    : public
        Var_Size_Arg_Traits_T<
            ::Test::Symbol2,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:1056

  template<>
  class Arg_Traits< ::Test::NonRecursiveUnionWithStringStruct>
    : public
        Var_Size_Arg_Traits_T<
            ::Test::NonRecursiveUnionWithStringStruct,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:145

#if !defined (_TEST_HELLO__ARG_TRAITS_)
#define _TEST_HELLO__ARG_TRAITS_

  template<>
  class  Arg_Traits< ::Test::Hello>
    : public
        Object_Arg_Traits_T<
            ::Test::Hello_ptr,
            ::Test::Hello_var,
            ::Test::Hello_out,
            TAO::Objref_Traits<Test::Hello>,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:306

#if !defined (_TEST_RECURSIVE2__ARG_TRAITS_)
#define _TEST_RECURSIVE2__ARG_TRAITS_

  template<>
  class Arg_Traits< ::Test::Recursive2>
    : public
        Object_Arg_Traits_T<
            ::Test::Recursive2 *,
            ::Test::Recursive2_var,
            ::Test::Recursive2_out,
            TAO::Value_Traits<Test::Recursive2>,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:945

  template<>
  class Arg_Traits< ::Test::Recursive2::Innerstruct3a>
    : public
        Var_Size_Arg_Traits_T<
            ::Test::Recursive2::Innerstruct3a,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:683

  template<>
  class Arg_Traits< ::Test::Recursive2Seq2>
    : public
        Var_Size_Arg_Traits_T<
            ::Test::Recursive2Seq2,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:945

  template<>
  class Arg_Traits< ::Test::Recursive2::Innerstruct3b>
    : public
        Var_Size_Arg_Traits_T<
            ::Test::Recursive2::Innerstruct3b,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:306

#if !defined (_TEST_RECURSIVE3__ARG_TRAITS_)
#define _TEST_RECURSIVE3__ARG_TRAITS_

  template<>
  class Arg_Traits< ::Test::Recursive3>
    : public
        Object_Arg_Traits_T<
            ::Test::Recursive3 *,
            ::Test::Recursive3_var,
            ::Test::Recursive3_out,
            TAO::Value_Traits<Test::Recursive3>,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:683

  template<>
  class Arg_Traits< ::Test::RecursiveSeq3>
    : public
        Var_Size_Arg_Traits_T<
            ::Test::RecursiveSeq3,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_valuetype/obv_module.cpp:44

namespace OBV_Test
{

  // TAO_IDL - Generated from
  // be/be_visitor_valuetype/valuetype_obv_ch.cpp:44

  // OBV_ class
  class  IndirectlyRecursiveValuetype
    : public virtual Test::IndirectlyRecursiveValuetype,
      public virtual ::CORBA::DefaultValueRefCountBase
  {

public:

  // TAO_IDL - Generated from
  // be/be_visitor_valuetype/field_ch.cpp:533

  virtual void recursive_valuetypes (const Test::IndirectlyRecursiveValuetypeSeq &);
  virtual const Test::IndirectlyRecursiveValuetypeSeq &recursive_valuetypes (void) const;
  virtual Test::IndirectlyRecursiveValuetypeSeq &recursive_valuetypes (void);

public:
  IndirectlyRecursiveValuetype (void);
  IndirectlyRecursiveValuetype (
      const ::Test::IndirectlyRecursiveValuetypeSeq & _tao_init_recursive_valuetypes
    );
  virtual ~IndirectlyRecursiveValuetype (void);

public:
  virtual ::CORBA::ValueBase *_copy_value (void);

protected:
  virtual ::CORBA::Boolean
  _tao_marshal__Test_IndirectlyRecursiveValuetype (TAO_OutputCDR &, TAO_ChunkInfo &) const;

  virtual ::CORBA::Boolean
  _tao_unmarshal__Test_IndirectlyRecursiveValuetype (TAO_InputCDR &, TAO_ChunkInfo &);

  ::CORBA::Boolean _tao_marshal_state (TAO_OutputCDR &, TAO_ChunkInfo &) const;
  ::CORBA::Boolean _tao_unmarshal_state (TAO_InputCDR &, TAO_ChunkInfo &);
  virtual void truncation_hook (void);

private:
  Test::IndirectlyRecursiveValuetypeSeq _pd_recursive_valuetypes;
  CORBA::Boolean require_truncation_;
};

// TAO_IDL - Generated from
// be/be_visitor_valuetype/valuetype_obv_ch.cpp:44

// OBV_ class
class  DirectlyRecursiveValuetype
  : public virtual Test::DirectlyRecursiveValuetype,
    public virtual ::CORBA::DefaultValueRefCountBase
{

public:

  // TAO_IDL - Generated from
  // be/be_visitor_valuetype/field_ch.cpp:361

  virtual void recursive_valuetype (Test::DirectlyRecursiveValuetype *);
  virtual Test::DirectlyRecursiveValuetype *recursive_valuetype (void) const;

public:

  // TAO_IDL - Generated from
  // be/be_visitor_valuetype/field_ch.cpp:361

  virtual void recursive_valuetype_second (Test::DirectlyRecursiveValuetype *);
  virtual Test::DirectlyRecursiveValuetype *recursive_valuetype_second (void) const;

public:
  DirectlyRecursiveValuetype (void);
  DirectlyRecursiveValuetype (
      ::Test::DirectlyRecursiveValuetype * _tao_init_recursive_valuetype,
      ::Test::DirectlyRecursiveValuetype * _tao_init_recursive_valuetype_second
    );
  virtual ~DirectlyRecursiveValuetype (void);

public:
  virtual ::CORBA::ValueBase *_copy_value (void);

protected:
  virtual ::CORBA::Boolean
  _tao_marshal__Test_DirectlyRecursiveValuetype (TAO_OutputCDR &, TAO_ChunkInfo &) const;

  virtual ::CORBA::Boolean
  _tao_unmarshal__Test_DirectlyRecursiveValuetype (TAO_InputCDR &, TAO_ChunkInfo &);

  ::CORBA::Boolean _tao_marshal_state (TAO_OutputCDR &, TAO_ChunkInfo &) const;
  ::CORBA::Boolean _tao_unmarshal_state (TAO_InputCDR &, TAO_ChunkInfo &);
  virtual void truncation_hook (void);

private:
  Test::DirectlyRecursiveValuetype_var _pd_recursive_valuetype;
  Test::DirectlyRecursiveValuetype_var _pd_recursive_valuetype_second;
  CORBA::Boolean require_truncation_;
};

// TAO_IDL - Generated from
// be/be_visitor_valuetype/valuetype_obv_ch.cpp:44

// OBV_ class
class  Recursive2
  : public virtual Test::Recursive2,
    public virtual ::CORBA::DefaultValueRefCountBase
{

public:

public:

  // TAO_IDL - Generated from
  // be/be_visitor_valuetype/field_ch.cpp:674

  virtual void insa (const Test::Recursive2::Innerstruct3a &);
  virtual const Test::Recursive2::Innerstruct3a &insa (void) const;
  virtual Test::Recursive2::Innerstruct3a &insa (void);

public:

  // TAO_IDL - Generated from
  // be/be_visitor_valuetype/field_ch.cpp:459

  virtual void a (const ::CORBA::Short);
  virtual ::CORBA::Short a (void) const;

public:

public:

  // TAO_IDL - Generated from
  // be/be_visitor_valuetype/field_ch.cpp:674

  virtual void insb (const Test::Recursive2::Innerstruct3b &);
  virtual const Test::Recursive2::Innerstruct3b &insb (void) const;
  virtual Test::Recursive2::Innerstruct3b &insb (void);

public:
  Recursive2 (void);
  Recursive2 (
      const ::Test::Recursive2::Innerstruct3a & _tao_init_insa,
      ::CORBA::Short _tao_init_a,
      const ::Test::Recursive2::Innerstruct3b & _tao_init_insb
    );
  virtual ~Recursive2 (void);

public:
  virtual ::CORBA::ValueBase *_copy_value (void);

protected:
  virtual ::CORBA::Boolean
  _tao_marshal__Test_Recursive2 (TAO_OutputCDR &, TAO_ChunkInfo &) const;

  virtual ::CORBA::Boolean
  _tao_unmarshal__Test_Recursive2 (TAO_InputCDR &, TAO_ChunkInfo &);

  ::CORBA::Boolean _tao_marshal_state (TAO_OutputCDR &, TAO_ChunkInfo &) const;
  ::CORBA::Boolean _tao_unmarshal_state (TAO_InputCDR &, TAO_ChunkInfo &);
  virtual void truncation_hook (void);

private:
  Test::Recursive2::Innerstruct3a _pd_insa;
  ::CORBA::Short _pd_a;
  Test::Recursive2::Innerstruct3b _pd_insb;
  CORBA::Boolean require_truncation_;
};

// TAO_IDL - Generated from
// be/be_visitor_valuetype/valuetype_obv_ch.cpp:44

// OBV_ class
class  Recursive3
  : public virtual Test::Recursive3,
    public virtual ::CORBA::DefaultValueRefCountBase
{

public:

  // TAO_IDL - Generated from
  // be/be_visitor_valuetype/field_ch.cpp:533

  virtual void seq1 (const Test::RecursiveSeq3 &);
  virtual const Test::RecursiveSeq3 &seq1 (void) const;
  virtual Test::RecursiveSeq3 &seq1 (void);

public:

  // TAO_IDL - Generated from
  // be/be_visitor_valuetype/field_ch.cpp:459

  virtual void a (const ::CORBA::Short);
  virtual ::CORBA::Short a (void) const;

public:

  // TAO_IDL - Generated from
  // be/be_visitor_valuetype/field_ch.cpp:533

  virtual void seq2 (const Test::RecursiveSeq3 &);
  virtual const Test::RecursiveSeq3 &seq2 (void) const;
  virtual Test::RecursiveSeq3 &seq2 (void);

public:
  Recursive3 (void);
  Recursive3 (
      const ::Test::RecursiveSeq3 & _tao_init_seq1,
      ::CORBA::Short _tao_init_a,
      const ::Test::RecursiveSeq3 & _tao_init_seq2
    );
  virtual ~Recursive3 (void);

public:
  virtual ::CORBA::ValueBase *_copy_value (void);

protected:
  virtual ::CORBA::Boolean
  _tao_marshal__Test_Recursive3 (TAO_OutputCDR &, TAO_ChunkInfo &) const;

  virtual ::CORBA::Boolean
  _tao_unmarshal__Test_Recursive3 (TAO_InputCDR &, TAO_ChunkInfo &);

  ::CORBA::Boolean _tao_marshal_state (TAO_OutputCDR &, TAO_ChunkInfo &) const;
  ::CORBA::Boolean _tao_unmarshal_state (TAO_InputCDR &, TAO_ChunkInfo &);
  virtual void truncation_hook (void);

private:
  Test::RecursiveSeq3 _pd_seq1;
  ::CORBA::Short _pd_a;
  Test::RecursiveSeq3 _pd_seq2;
  CORBA::Boolean require_truncation_;
};
}

// TAO_IDL - Generated from
// be/be_visitor_traits.cpp:60

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Traits specializations.
namespace TAO
{

#if !defined (_TEST_INDIRECTLYRECURSIVEVALUETYPE__TRAITS_)
#define _TEST_INDIRECTLYRECURSIVEVALUETYPE__TRAITS_

  template<>
  struct  Value_Traits<Test::IndirectlyRecursiveValuetype>
  {
    static void add_ref (Test::IndirectlyRecursiveValuetype *);
    static void remove_ref (Test::IndirectlyRecursiveValuetype *);
    static void release (Test::IndirectlyRecursiveValuetype *);
  };

#endif /* end #if !defined */

#if !defined (_TEST_DIRECTLYRECURSIVEVALUETYPE__TRAITS_)
#define _TEST_DIRECTLYRECURSIVEVALUETYPE__TRAITS_

  template<>
  struct  Value_Traits<Test::DirectlyRecursiveValuetype>
  {
    static void add_ref (Test::DirectlyRecursiveValuetype *);
    static void remove_ref (Test::DirectlyRecursiveValuetype *);
    static void release (Test::DirectlyRecursiveValuetype *);
  };

#endif /* end #if !defined */

#if !defined (_TEST_HELLO__TRAITS_)
#define _TEST_HELLO__TRAITS_

  template<>
  struct  Objref_Traits< ::Test::Hello>
  {
    static ::Test::Hello_ptr duplicate (
        ::Test::Hello_ptr p);
    static void release (
        ::Test::Hello_ptr p);
    static ::Test::Hello_ptr nil (void);
    static ::CORBA::Boolean marshal (
        const ::Test::Hello_ptr p,
        TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_TEST_RECURSIVE2__TRAITS_)
#define _TEST_RECURSIVE2__TRAITS_

  template<>
  struct  Value_Traits<Test::Recursive2>
  {
    static void add_ref (Test::Recursive2 *);
    static void remove_ref (Test::Recursive2 *);
    static void release (Test::Recursive2 *);
  };

#endif /* end #if !defined */

#if !defined (_TEST_RECURSIVE3__TRAITS_)
#define _TEST_RECURSIVE3__TRAITS_

  template<>
  struct  Value_Traits<Test::Recursive3>
  {
    static void add_ref (Test::Recursive3 *);
    static void remove_ref (Test::Recursive3 *);
    static void release (Test::Recursive3 *);
  };

#endif /* end #if !defined */
}
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_exception/any_op_ch.cpp:38

#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace Test
{


   void operator<<= (::CORBA::Any &, const ::Test::Recursive_Type_In_Any_Test_Failed &); // copying version
   void operator<<= (::CORBA::Any &, ::Test::Recursive_Type_In_Any_Test_Failed*); // noncopying version
   ::CORBA::Boolean operator>>= (const ::CORBA::Any &, ::Test::Recursive_Type_In_Any_Test_Failed *&); // deprecated
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const ::Test::Recursive_Type_In_Any_Test_Failed *&);
}

#else


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



 void operator<<= (::CORBA::Any &, const Test::Recursive_Type_In_Any_Test_Failed &); // copying version
 void operator<<= (::CORBA::Any &, Test::Recursive_Type_In_Any_Test_Failed*); // noncopying version
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, Test::Recursive_Type_In_Any_Test_Failed *&); // deprecated
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const Test::Recursive_Type_In_Any_Test_Failed *&);
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_exception/any_op_ch.cpp:38

#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace Test
{


   void operator<<= (::CORBA::Any &, const ::Test::Demarshaling_From_Any_Failed &); // copying version
   void operator<<= (::CORBA::Any &, ::Test::Demarshaling_From_Any_Failed*); // noncopying version
   ::CORBA::Boolean operator>>= (const ::CORBA::Any &, ::Test::Demarshaling_From_Any_Failed *&); // deprecated
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const ::Test::Demarshaling_From_Any_Failed *&);
}

#else


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



 void operator<<= (::CORBA::Any &, const Test::Demarshaling_From_Any_Failed &); // copying version
 void operator<<= (::CORBA::Any &, Test::Demarshaling_From_Any_Failed*); // noncopying version
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, Test::Demarshaling_From_Any_Failed *&); // deprecated
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const Test::Demarshaling_From_Any_Failed *&);
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_sequence/any_op_ch.cpp:47



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace Test
{
   void operator<<= ( ::CORBA::Any &, const ::Test::RecursiveStructSeq &); // copying version
   void operator<<= ( ::CORBA::Any &, ::Test::RecursiveStructSeq*); // noncopying version
   ::CORBA::Boolean operator>>= (const ::CORBA::Any &, ::Test::RecursiveStructSeq *&); // deprecated
   ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const ::Test::RecursiveStructSeq *&);
}

#else


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 void operator<<= ( ::CORBA::Any &, const Test::RecursiveStructSeq &); // copying version
 void operator<<= ( ::CORBA::Any &, Test::RecursiveStructSeq*); // noncopying version
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, Test::RecursiveStructSeq *&); // deprecated
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const Test::RecursiveStructSeq *&);
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_structure/any_op_ch.cpp:42



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace Test
{
   void operator<<= (::CORBA::Any &, const ::Test::RecursiveStruct &); // copying version
   void operator<<= (::CORBA::Any &, ::Test::RecursiveStruct*); // noncopying version
   ::CORBA::Boolean operator>>= (const ::CORBA::Any &, ::Test::RecursiveStruct *&); // deprecated
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const ::Test::RecursiveStruct *&);
}

#else


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 void operator<<= (::CORBA::Any &, const Test::RecursiveStruct &); // copying version
 void operator<<= (::CORBA::Any &, Test::RecursiveStruct*); // noncopying version
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, Test::RecursiveStruct *&); // deprecated
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const Test::RecursiveStruct *&);
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_sequence/any_op_ch.cpp:47



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace Test
{
   void operator<<= ( ::CORBA::Any &, const ::Test::NestedRecursiveStructSeq &); // copying version
   void operator<<= ( ::CORBA::Any &, ::Test::NestedRecursiveStructSeq*); // noncopying version
   ::CORBA::Boolean operator>>= (const ::CORBA::Any &, ::Test::NestedRecursiveStructSeq *&); // deprecated
   ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const ::Test::NestedRecursiveStructSeq *&);
}

#else


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 void operator<<= ( ::CORBA::Any &, const Test::NestedRecursiveStructSeq &); // copying version
 void operator<<= ( ::CORBA::Any &, Test::NestedRecursiveStructSeq*); // noncopying version
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, Test::NestedRecursiveStructSeq *&); // deprecated
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const Test::NestedRecursiveStructSeq *&);
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_structure/any_op_ch.cpp:42



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace Test
{
   void operator<<= (::CORBA::Any &, const ::Test::NestedRecursiveStruct &); // copying version
   void operator<<= (::CORBA::Any &, ::Test::NestedRecursiveStruct*); // noncopying version
   ::CORBA::Boolean operator>>= (const ::CORBA::Any &, ::Test::NestedRecursiveStruct *&); // deprecated
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const ::Test::NestedRecursiveStruct *&);
}

#else


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 void operator<<= (::CORBA::Any &, const Test::NestedRecursiveStruct &); // copying version
 void operator<<= (::CORBA::Any &, Test::NestedRecursiveStruct*); // noncopying version
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, Test::NestedRecursiveStruct *&); // deprecated
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const Test::NestedRecursiveStruct *&);
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_structure/any_op_ch.cpp:42



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace Test
{
   void operator<<= (::CORBA::Any &, const ::Test::NestedRecursiveStruct::InnerStruct &); // copying version
   void operator<<= (::CORBA::Any &, ::Test::NestedRecursiveStruct::InnerStruct*); // noncopying version
   ::CORBA::Boolean operator>>= (const ::CORBA::Any &, ::Test::NestedRecursiveStruct::InnerStruct *&); // deprecated
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const ::Test::NestedRecursiveStruct::InnerStruct *&);
}

#else


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 void operator<<= (::CORBA::Any &, const Test::NestedRecursiveStruct::InnerStruct &); // copying version
 void operator<<= (::CORBA::Any &, Test::NestedRecursiveStruct::InnerStruct*); // noncopying version
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, Test::NestedRecursiveStruct::InnerStruct *&); // deprecated
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const Test::NestedRecursiveStruct::InnerStruct *&);
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_sequence/any_op_ch.cpp:47



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace Test
{
   void operator<<= ( ::CORBA::Any &, const ::Test::RecursiveUnionSeq &); // copying version
   void operator<<= ( ::CORBA::Any &, ::Test::RecursiveUnionSeq*); // noncopying version
   ::CORBA::Boolean operator>>= (const ::CORBA::Any &, ::Test::RecursiveUnionSeq *&); // deprecated
   ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const ::Test::RecursiveUnionSeq *&);
}

#else


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 void operator<<= ( ::CORBA::Any &, const Test::RecursiveUnionSeq &); // copying version
 void operator<<= ( ::CORBA::Any &, Test::RecursiveUnionSeq*); // noncopying version
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, Test::RecursiveUnionSeq *&); // deprecated
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const Test::RecursiveUnionSeq *&);
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_union/any_op_ch.cpp:37



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace Test
{
   void operator<<= (::CORBA::Any &, const ::Test::RecursiveUnion &); // copying version
   void operator<<= (::CORBA::Any &, ::Test::RecursiveUnion*); // noncopying version
   ::CORBA::Boolean operator>>= (const ::CORBA::Any &, ::Test::RecursiveUnion *&); // deprecated
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const ::Test::RecursiveUnion *&);
}

#else


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 void operator<<= (::CORBA::Any &, const Test::RecursiveUnion &); // copying version
 void operator<<= (::CORBA::Any &, Test::RecursiveUnion*); // noncopying version
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, Test::RecursiveUnion *&); // deprecated
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const Test::RecursiveUnion *&);
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_sequence/any_op_ch.cpp:47



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace Test
{
   void operator<<= ( ::CORBA::Any &, const ::Test::RecursiveUnionSeq2 &); // copying version
   void operator<<= ( ::CORBA::Any &, ::Test::RecursiveUnionSeq2*); // noncopying version
   ::CORBA::Boolean operator>>= (const ::CORBA::Any &, ::Test::RecursiveUnionSeq2 *&); // deprecated
   ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const ::Test::RecursiveUnionSeq2 *&);
}

#else


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 void operator<<= ( ::CORBA::Any &, const Test::RecursiveUnionSeq2 &); // copying version
 void operator<<= ( ::CORBA::Any &, Test::RecursiveUnionSeq2*); // noncopying version
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, Test::RecursiveUnionSeq2 *&); // deprecated
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const Test::RecursiveUnionSeq2 *&);
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_union/any_op_ch.cpp:37



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace Test
{
   void operator<<= (::CORBA::Any &, const ::Test::RecursiveUnion2 &); // copying version
   void operator<<= (::CORBA::Any &, ::Test::RecursiveUnion2*); // noncopying version
   ::CORBA::Boolean operator>>= (const ::CORBA::Any &, ::Test::RecursiveUnion2 *&); // deprecated
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const ::Test::RecursiveUnion2 *&);
}

#else


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 void operator<<= (::CORBA::Any &, const Test::RecursiveUnion2 &); // copying version
 void operator<<= (::CORBA::Any &, Test::RecursiveUnion2*); // noncopying version
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, Test::RecursiveUnion2 *&); // deprecated
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const Test::RecursiveUnion2 *&);
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_structure/any_op_ch.cpp:42



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace Test
{
   void operator<<= (::CORBA::Any &, const ::Test::RecursiveUnion2::Innerstruct3a &); // copying version
   void operator<<= (::CORBA::Any &, ::Test::RecursiveUnion2::Innerstruct3a*); // noncopying version
   ::CORBA::Boolean operator>>= (const ::CORBA::Any &, ::Test::RecursiveUnion2::Innerstruct3a *&); // deprecated
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const ::Test::RecursiveUnion2::Innerstruct3a *&);
}

#else


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 void operator<<= (::CORBA::Any &, const Test::RecursiveUnion2::Innerstruct3a &); // copying version
 void operator<<= (::CORBA::Any &, Test::RecursiveUnion2::Innerstruct3a*); // noncopying version
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, Test::RecursiveUnion2::Innerstruct3a *&); // deprecated
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const Test::RecursiveUnion2::Innerstruct3a *&);
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_structure/any_op_ch.cpp:42



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace Test
{
   void operator<<= (::CORBA::Any &, const ::Test::RecursiveUnion2::Innerstruct3b &); // copying version
   void operator<<= (::CORBA::Any &, ::Test::RecursiveUnion2::Innerstruct3b*); // noncopying version
   ::CORBA::Boolean operator>>= (const ::CORBA::Any &, ::Test::RecursiveUnion2::Innerstruct3b *&); // deprecated
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const ::Test::RecursiveUnion2::Innerstruct3b *&);
}

#else


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 void operator<<= (::CORBA::Any &, const Test::RecursiveUnion2::Innerstruct3b &); // copying version
 void operator<<= (::CORBA::Any &, Test::RecursiveUnion2::Innerstruct3b*); // noncopying version
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, Test::RecursiveUnion2::Innerstruct3b *&); // deprecated
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const Test::RecursiveUnion2::Innerstruct3b *&);
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_sequence/any_op_ch.cpp:47



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace Test
{
   void operator<<= ( ::CORBA::Any &, const ::Test::RecursiveStructSeq3 &); // copying version
   void operator<<= ( ::CORBA::Any &, ::Test::RecursiveStructSeq3*); // noncopying version
   ::CORBA::Boolean operator>>= (const ::CORBA::Any &, ::Test::RecursiveStructSeq3 *&); // deprecated
   ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const ::Test::RecursiveStructSeq3 *&);
}

#else


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 void operator<<= ( ::CORBA::Any &, const Test::RecursiveStructSeq3 &); // copying version
 void operator<<= ( ::CORBA::Any &, Test::RecursiveStructSeq3*); // noncopying version
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, Test::RecursiveStructSeq3 *&); // deprecated
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const Test::RecursiveStructSeq3 *&);
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_union/any_op_ch.cpp:37



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace Test
{
   void operator<<= (::CORBA::Any &, const ::Test::RecursiveUnion3 &); // copying version
   void operator<<= (::CORBA::Any &, ::Test::RecursiveUnion3*); // noncopying version
   ::CORBA::Boolean operator>>= (const ::CORBA::Any &, ::Test::RecursiveUnion3 *&); // deprecated
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const ::Test::RecursiveUnion3 *&);
}

#else


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 void operator<<= (::CORBA::Any &, const Test::RecursiveUnion3 &); // copying version
 void operator<<= (::CORBA::Any &, Test::RecursiveUnion3*); // noncopying version
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, Test::RecursiveUnion3 *&); // deprecated
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const Test::RecursiveUnion3 *&);
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_structure/any_op_ch.cpp:42



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace Test
{
   void operator<<= (::CORBA::Any &, const ::Test::RecursiveStruct3 &); // copying version
   void operator<<= (::CORBA::Any &, ::Test::RecursiveStruct3*); // noncopying version
   ::CORBA::Boolean operator>>= (const ::CORBA::Any &, ::Test::RecursiveStruct3 *&); // deprecated
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const ::Test::RecursiveStruct3 *&);
}

#else


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 void operator<<= (::CORBA::Any &, const Test::RecursiveStruct3 &); // copying version
 void operator<<= (::CORBA::Any &, Test::RecursiveStruct3*); // noncopying version
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, Test::RecursiveStruct3 *&); // deprecated
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const Test::RecursiveStruct3 *&);
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_sequence/any_op_ch.cpp:47



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace Test
{
   void operator<<= ( ::CORBA::Any &, const ::Test::RecursiveUnionSeqNoDefault &); // copying version
   void operator<<= ( ::CORBA::Any &, ::Test::RecursiveUnionSeqNoDefault*); // noncopying version
   ::CORBA::Boolean operator>>= (const ::CORBA::Any &, ::Test::RecursiveUnionSeqNoDefault *&); // deprecated
   ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const ::Test::RecursiveUnionSeqNoDefault *&);
}

#else


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 void operator<<= ( ::CORBA::Any &, const Test::RecursiveUnionSeqNoDefault &); // copying version
 void operator<<= ( ::CORBA::Any &, Test::RecursiveUnionSeqNoDefault*); // noncopying version
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, Test::RecursiveUnionSeqNoDefault *&); // deprecated
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const Test::RecursiveUnionSeqNoDefault *&);
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_union/any_op_ch.cpp:37



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace Test
{
   void operator<<= (::CORBA::Any &, const ::Test::RecursiveUnionNoDefault &); // copying version
   void operator<<= (::CORBA::Any &, ::Test::RecursiveUnionNoDefault*); // noncopying version
   ::CORBA::Boolean operator>>= (const ::CORBA::Any &, ::Test::RecursiveUnionNoDefault *&); // deprecated
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const ::Test::RecursiveUnionNoDefault *&);
}

#else


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 void operator<<= (::CORBA::Any &, const Test::RecursiveUnionNoDefault &); // copying version
 void operator<<= (::CORBA::Any &, Test::RecursiveUnionNoDefault*); // noncopying version
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, Test::RecursiveUnionNoDefault *&); // deprecated
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const Test::RecursiveUnionNoDefault *&);
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_enum/any_op_ch.cpp:36

#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace Test
{


   void operator<<= (::CORBA::Any &, ::Test::VSort);
   ::CORBA::Boolean operator>>= (const ::CORBA::Any &, ::Test::VSort &);
}

#else


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



 void operator<<= (::CORBA::Any &, Test::VSort);
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, Test::VSort &);
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_sequence/any_op_ch.cpp:47



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace Test
{
   void operator<<= ( ::CORBA::Any &, const ::Test::VSortRecursiveUnionSeq &); // copying version
   void operator<<= ( ::CORBA::Any &, ::Test::VSortRecursiveUnionSeq*); // noncopying version
   ::CORBA::Boolean operator>>= (const ::CORBA::Any &, ::Test::VSortRecursiveUnionSeq *&); // deprecated
   ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const ::Test::VSortRecursiveUnionSeq *&);
}

#else


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 void operator<<= ( ::CORBA::Any &, const Test::VSortRecursiveUnionSeq &); // copying version
 void operator<<= ( ::CORBA::Any &, Test::VSortRecursiveUnionSeq*); // noncopying version
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, Test::VSortRecursiveUnionSeq *&); // deprecated
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const Test::VSortRecursiveUnionSeq *&);
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_union/any_op_ch.cpp:37



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace Test
{
   void operator<<= (::CORBA::Any &, const ::Test::VSortRecursiveUnion &); // copying version
   void operator<<= (::CORBA::Any &, ::Test::VSortRecursiveUnion*); // noncopying version
   ::CORBA::Boolean operator>>= (const ::CORBA::Any &, ::Test::VSortRecursiveUnion *&); // deprecated
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const ::Test::VSortRecursiveUnion *&);
}

#else


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 void operator<<= (::CORBA::Any &, const Test::VSortRecursiveUnion &); // copying version
 void operator<<= (::CORBA::Any &, Test::VSortRecursiveUnion*); // noncopying version
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, Test::VSortRecursiveUnion *&); // deprecated
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const Test::VSortRecursiveUnion *&);
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_union/any_op_ch.cpp:37



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace Test
{
   void operator<<= (::CORBA::Any &, const ::Test::EnumUnion &); // copying version
   void operator<<= (::CORBA::Any &, ::Test::EnumUnion*); // noncopying version
   ::CORBA::Boolean operator>>= (const ::CORBA::Any &, ::Test::EnumUnion *&); // deprecated
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const ::Test::EnumUnion *&);
}

#else


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 void operator<<= (::CORBA::Any &, const Test::EnumUnion &); // copying version
 void operator<<= (::CORBA::Any &, Test::EnumUnion*); // noncopying version
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, Test::EnumUnion *&); // deprecated
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const Test::EnumUnion *&);
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_sequence/any_op_ch.cpp:47



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace Test
{
   void operator<<= ( ::CORBA::Any &, const ::Test::IndirectlyRecursiveValuetypeSeq &); // copying version
   void operator<<= ( ::CORBA::Any &, ::Test::IndirectlyRecursiveValuetypeSeq*); // noncopying version
   ::CORBA::Boolean operator>>= (const ::CORBA::Any &, ::Test::IndirectlyRecursiveValuetypeSeq *&); // deprecated
   ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const ::Test::IndirectlyRecursiveValuetypeSeq *&);
}

#else


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 void operator<<= ( ::CORBA::Any &, const Test::IndirectlyRecursiveValuetypeSeq &); // copying version
 void operator<<= ( ::CORBA::Any &, Test::IndirectlyRecursiveValuetypeSeq*); // noncopying version
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, Test::IndirectlyRecursiveValuetypeSeq *&); // deprecated
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const Test::IndirectlyRecursiveValuetypeSeq *&);
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_valuetype/any_op_ch.cpp:43



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace Test
{
   void operator<<= ( ::CORBA::Any &, IndirectlyRecursiveValuetype *); // copying
   void operator<<= ( ::CORBA::Any &, IndirectlyRecursiveValuetype **); // non-copying
   ::CORBA::Boolean operator>>= (const ::CORBA::Any &, IndirectlyRecursiveValuetype *&);
}

#else


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 void operator<<= (::CORBA::Any &, Test::IndirectlyRecursiveValuetype *); // copying
 void operator<<= (::CORBA::Any &, Test::IndirectlyRecursiveValuetype **); // non-copying
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, Test::IndirectlyRecursiveValuetype *&);
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_valuetype/any_op_ch.cpp:43



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace Test
{
   void operator<<= ( ::CORBA::Any &, DirectlyRecursiveValuetype *); // copying
   void operator<<= ( ::CORBA::Any &, DirectlyRecursiveValuetype **); // non-copying
   ::CORBA::Boolean operator>>= (const ::CORBA::Any &, DirectlyRecursiveValuetype *&);
}

#else


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 void operator<<= (::CORBA::Any &, Test::DirectlyRecursiveValuetype *); // copying
 void operator<<= (::CORBA::Any &, Test::DirectlyRecursiveValuetype **); // non-copying
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, Test::DirectlyRecursiveValuetype *&);
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_enum/any_op_ch.cpp:36

#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace Test
{


   void operator<<= (::CORBA::Any &, ::Test::PositionEnum);
   ::CORBA::Boolean operator>>= (const ::CORBA::Any &, ::Test::PositionEnum &);
}

#else


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



 void operator<<= (::CORBA::Any &, Test::PositionEnum);
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, Test::PositionEnum &);
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_structure/any_op_ch.cpp:42



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace Test
{
   void operator<<= (::CORBA::Any &, const ::Test::Position &); // copying version
   void operator<<= (::CORBA::Any &, ::Test::Position*); // noncopying version
   ::CORBA::Boolean operator>>= (const ::CORBA::Any &, ::Test::Position *&); // deprecated
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const ::Test::Position *&);
}

#else


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 void operator<<= (::CORBA::Any &, const Test::Position &); // copying version
 void operator<<= (::CORBA::Any &, Test::Position*); // noncopying version
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, Test::Position *&); // deprecated
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const Test::Position *&);
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_enum/any_op_ch.cpp:36

#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace Test
{


   void operator<<= (::CORBA::Any &, ::Test::ValueSort);
   ::CORBA::Boolean operator>>= (const ::CORBA::Any &, ::Test::ValueSort &);
}

#else


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



 void operator<<= (::CORBA::Any &, Test::ValueSort);
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, Test::ValueSort &);
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_union/any_op_ch.cpp:37



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace Test
{
   void operator<<= (::CORBA::Any &, const ::Test::NonRecursiveUnionWithEnum &); // copying version
   void operator<<= (::CORBA::Any &, ::Test::NonRecursiveUnionWithEnum*); // noncopying version
   ::CORBA::Boolean operator>>= (const ::CORBA::Any &, ::Test::NonRecursiveUnionWithEnum *&); // deprecated
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const ::Test::NonRecursiveUnionWithEnum *&);
}

#else


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 void operator<<= (::CORBA::Any &, const Test::NonRecursiveUnionWithEnum &); // copying version
 void operator<<= (::CORBA::Any &, Test::NonRecursiveUnionWithEnum*); // noncopying version
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, Test::NonRecursiveUnionWithEnum *&); // deprecated
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const Test::NonRecursiveUnionWithEnum *&);
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_enum/any_op_ch.cpp:36

#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace Test
{


   void operator<<= (::CORBA::Any &, ::Test::ValueSort2);
   ::CORBA::Boolean operator>>= (const ::CORBA::Any &, ::Test::ValueSort2 &);
}

#else


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



 void operator<<= (::CORBA::Any &, Test::ValueSort2);
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, Test::ValueSort2 &);
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_structure/any_op_ch.cpp:42



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace Test
{
   void operator<<= (::CORBA::Any &, const ::Test::Symbol2 &); // copying version
   void operator<<= (::CORBA::Any &, ::Test::Symbol2*); // noncopying version
   ::CORBA::Boolean operator>>= (const ::CORBA::Any &, ::Test::Symbol2 *&); // deprecated
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const ::Test::Symbol2 *&);
}

#else


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 void operator<<= (::CORBA::Any &, const Test::Symbol2 &); // copying version
 void operator<<= (::CORBA::Any &, Test::Symbol2*); // noncopying version
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, Test::Symbol2 *&); // deprecated
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const Test::Symbol2 *&);
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_union/any_op_ch.cpp:37



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace Test
{
   void operator<<= (::CORBA::Any &, const ::Test::NonRecursiveUnionWithStringStruct &); // copying version
   void operator<<= (::CORBA::Any &, ::Test::NonRecursiveUnionWithStringStruct*); // noncopying version
   ::CORBA::Boolean operator>>= (const ::CORBA::Any &, ::Test::NonRecursiveUnionWithStringStruct *&); // deprecated
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const ::Test::NonRecursiveUnionWithStringStruct *&);
}

#else


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 void operator<<= (::CORBA::Any &, const Test::NonRecursiveUnionWithStringStruct &); // copying version
 void operator<<= (::CORBA::Any &, Test::NonRecursiveUnionWithStringStruct*); // noncopying version
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, Test::NonRecursiveUnionWithStringStruct *&); // deprecated
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const Test::NonRecursiveUnionWithStringStruct *&);
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_interface/any_op_ch.cpp:41



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace Test
{
   void operator<<= ( ::CORBA::Any &, Hello_ptr); // copying
   void operator<<= ( ::CORBA::Any &, Hello_ptr *); // non-copying
   ::CORBA::Boolean operator>>= (const ::CORBA::Any &, Hello_ptr &);
}

#else


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 void operator<<= (::CORBA::Any &, Test::Hello_ptr); // copying
 void operator<<= (::CORBA::Any &, Test::Hello_ptr *); // non-copying
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, Test::Hello_ptr &);
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_sequence/any_op_ch.cpp:47



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace Test
{
   void operator<<= ( ::CORBA::Any &, const ::Test::Recursive2Seq2 &); // copying version
   void operator<<= ( ::CORBA::Any &, ::Test::Recursive2Seq2*); // noncopying version
   ::CORBA::Boolean operator>>= (const ::CORBA::Any &, ::Test::Recursive2Seq2 *&); // deprecated
   ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const ::Test::Recursive2Seq2 *&);
}

#else


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 void operator<<= ( ::CORBA::Any &, const Test::Recursive2Seq2 &); // copying version
 void operator<<= ( ::CORBA::Any &, Test::Recursive2Seq2*); // noncopying version
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, Test::Recursive2Seq2 *&); // deprecated
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const Test::Recursive2Seq2 *&);
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_valuetype/any_op_ch.cpp:43



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace Test
{
   void operator<<= ( ::CORBA::Any &, Recursive2 *); // copying
   void operator<<= ( ::CORBA::Any &, Recursive2 **); // non-copying
   ::CORBA::Boolean operator>>= (const ::CORBA::Any &, Recursive2 *&);
}

#else


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 void operator<<= (::CORBA::Any &, Test::Recursive2 *); // copying
 void operator<<= (::CORBA::Any &, Test::Recursive2 **); // non-copying
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, Test::Recursive2 *&);
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_sequence/any_op_ch.cpp:47



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace Test
{
   void operator<<= ( ::CORBA::Any &, const ::Test::RecursiveSeq3 &); // copying version
   void operator<<= ( ::CORBA::Any &, ::Test::RecursiveSeq3*); // noncopying version
   ::CORBA::Boolean operator>>= (const ::CORBA::Any &, ::Test::RecursiveSeq3 *&); // deprecated
   ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const ::Test::RecursiveSeq3 *&);
}

#else


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 void operator<<= ( ::CORBA::Any &, const Test::RecursiveSeq3 &); // copying version
 void operator<<= ( ::CORBA::Any &, Test::RecursiveSeq3*); // noncopying version
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, Test::RecursiveSeq3 *&); // deprecated
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const Test::RecursiveSeq3 *&);
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_valuetype/any_op_ch.cpp:43



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace Test
{
   void operator<<= ( ::CORBA::Any &, Recursive3 *); // copying
   void operator<<= ( ::CORBA::Any &, Recursive3 **); // non-copying
   ::CORBA::Boolean operator>>= (const ::CORBA::Any &, Recursive3 *&);
}

#else


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 void operator<<= (::CORBA::Any &, Test::Recursive3 *); // copying
 void operator<<= (::CORBA::Any &, Test::Recursive3 **); // non-copying
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, Test::Recursive3 *&);
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_exception/cdr_op_ch.cpp:37
TAO_BEGIN_VERSIONED_NAMESPACE_DECL



 ::CORBA::Boolean operator<< (TAO_OutputCDR &, const Test::Recursive_Type_In_Any_Test_Failed &);
 ::CORBA::Boolean operator>> (TAO_InputCDR &, Test::Recursive_Type_In_Any_Test_Failed &);

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_exception/cdr_op_ch.cpp:37
TAO_BEGIN_VERSIONED_NAMESPACE_DECL



 ::CORBA::Boolean operator<< (TAO_OutputCDR &, const Test::Demarshaling_From_Any_Failed &);
 ::CORBA::Boolean operator>> (TAO_InputCDR &, Test::Demarshaling_From_Any_Failed &);

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_sequence/cdr_op_ch.cpp:65

#if !defined _TAO_CDR_OP_Test_RecursiveStructSeq_H_
#define _TAO_CDR_OP_Test_RecursiveStructSeq_H_
TAO_BEGIN_VERSIONED_NAMESPACE_DECL


 ::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Test::RecursiveStructSeq &_tao_sequence);
 ::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Test::RecursiveStructSeq &_tao_sequence);

TAO_END_VERSIONED_NAMESPACE_DECL



#endif /* _TAO_CDR_OP_Test_RecursiveStructSeq_H_ */

// TAO_IDL - Generated from
// be/be_visitor_structure/cdr_op_ch.cpp:43


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 ::CORBA::Boolean operator<< (TAO_OutputCDR &, const Test::RecursiveStruct &);
 ::CORBA::Boolean operator>> (TAO_InputCDR &, Test::RecursiveStruct &);

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_sequence/cdr_op_ch.cpp:65

#if !defined _TAO_CDR_OP_Test_NestedRecursiveStructSeq_H_
#define _TAO_CDR_OP_Test_NestedRecursiveStructSeq_H_
TAO_BEGIN_VERSIONED_NAMESPACE_DECL


 ::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Test::NestedRecursiveStructSeq &_tao_sequence);
 ::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Test::NestedRecursiveStructSeq &_tao_sequence);

TAO_END_VERSIONED_NAMESPACE_DECL



#endif /* _TAO_CDR_OP_Test_NestedRecursiveStructSeq_H_ */

// TAO_IDL - Generated from
// be/be_visitor_structure/cdr_op_ch.cpp:43


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 ::CORBA::Boolean operator<< (TAO_OutputCDR &, const Test::NestedRecursiveStruct &);
 ::CORBA::Boolean operator>> (TAO_InputCDR &, Test::NestedRecursiveStruct &);

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_structure/cdr_op_ch.cpp:43


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 ::CORBA::Boolean operator<< (TAO_OutputCDR &, const Test::NestedRecursiveStruct::InnerStruct &);
 ::CORBA::Boolean operator>> (TAO_InputCDR &, Test::NestedRecursiveStruct::InnerStruct &);

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_sequence/cdr_op_ch.cpp:65

#if !defined _TAO_CDR_OP_Test_RecursiveUnionSeq_H_
#define _TAO_CDR_OP_Test_RecursiveUnionSeq_H_
TAO_BEGIN_VERSIONED_NAMESPACE_DECL


 ::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Test::RecursiveUnionSeq &_tao_sequence);
 ::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Test::RecursiveUnionSeq &_tao_sequence);

TAO_END_VERSIONED_NAMESPACE_DECL



#endif /* _TAO_CDR_OP_Test_RecursiveUnionSeq_H_ */

// TAO_IDL - Generated from
// be/be_visitor_union/cdr_op_ch.cpp:38


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 ::CORBA::Boolean operator<< (TAO_OutputCDR &, const Test::RecursiveUnion &);
 ::CORBA::Boolean operator>> (TAO_InputCDR &, Test::RecursiveUnion &);

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_sequence/cdr_op_ch.cpp:65

#if !defined _TAO_CDR_OP_Test_RecursiveUnionSeq2_H_
#define _TAO_CDR_OP_Test_RecursiveUnionSeq2_H_
TAO_BEGIN_VERSIONED_NAMESPACE_DECL


 ::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Test::RecursiveUnionSeq2 &_tao_sequence);
 ::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Test::RecursiveUnionSeq2 &_tao_sequence);

TAO_END_VERSIONED_NAMESPACE_DECL



#endif /* _TAO_CDR_OP_Test_RecursiveUnionSeq2_H_ */

// TAO_IDL - Generated from
// be/be_visitor_union/cdr_op_ch.cpp:38


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 ::CORBA::Boolean operator<< (TAO_OutputCDR &, const Test::RecursiveUnion2 &);
 ::CORBA::Boolean operator>> (TAO_InputCDR &, Test::RecursiveUnion2 &);

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_structure/cdr_op_ch.cpp:43


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 ::CORBA::Boolean operator<< (TAO_OutputCDR &, const Test::RecursiveUnion2::Innerstruct3a &);
 ::CORBA::Boolean operator>> (TAO_InputCDR &, Test::RecursiveUnion2::Innerstruct3a &);

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_structure/cdr_op_ch.cpp:43


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 ::CORBA::Boolean operator<< (TAO_OutputCDR &, const Test::RecursiveUnion2::Innerstruct3b &);
 ::CORBA::Boolean operator>> (TAO_InputCDR &, Test::RecursiveUnion2::Innerstruct3b &);

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_sequence/cdr_op_ch.cpp:65

#if !defined _TAO_CDR_OP_Test_RecursiveStructSeq3_H_
#define _TAO_CDR_OP_Test_RecursiveStructSeq3_H_
TAO_BEGIN_VERSIONED_NAMESPACE_DECL


 ::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Test::RecursiveStructSeq3 &_tao_sequence);
 ::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Test::RecursiveStructSeq3 &_tao_sequence);

TAO_END_VERSIONED_NAMESPACE_DECL



#endif /* _TAO_CDR_OP_Test_RecursiveStructSeq3_H_ */

// TAO_IDL - Generated from
// be/be_visitor_union/cdr_op_ch.cpp:38


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 ::CORBA::Boolean operator<< (TAO_OutputCDR &, const Test::RecursiveUnion3 &);
 ::CORBA::Boolean operator>> (TAO_InputCDR &, Test::RecursiveUnion3 &);

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_structure/cdr_op_ch.cpp:43


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 ::CORBA::Boolean operator<< (TAO_OutputCDR &, const Test::RecursiveStruct3 &);
 ::CORBA::Boolean operator>> (TAO_InputCDR &, Test::RecursiveStruct3 &);

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_sequence/cdr_op_ch.cpp:65

#if !defined _TAO_CDR_OP_Test_RecursiveUnionSeqNoDefault_H_
#define _TAO_CDR_OP_Test_RecursiveUnionSeqNoDefault_H_
TAO_BEGIN_VERSIONED_NAMESPACE_DECL


 ::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Test::RecursiveUnionSeqNoDefault &_tao_sequence);
 ::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Test::RecursiveUnionSeqNoDefault &_tao_sequence);

TAO_END_VERSIONED_NAMESPACE_DECL



#endif /* _TAO_CDR_OP_Test_RecursiveUnionSeqNoDefault_H_ */

// TAO_IDL - Generated from
// be/be_visitor_union/cdr_op_ch.cpp:38


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 ::CORBA::Boolean operator<< (TAO_OutputCDR &, const Test::RecursiveUnionNoDefault &);
 ::CORBA::Boolean operator>> (TAO_InputCDR &, Test::RecursiveUnionNoDefault &);

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_enum/cdr_op_ch.cpp:34


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 ::CORBA::Boolean operator<< (TAO_OutputCDR &strm, Test::VSort _tao_enumerator);
 ::CORBA::Boolean operator>> (TAO_InputCDR &strm, Test::VSort &_tao_enumerator);

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_sequence/cdr_op_ch.cpp:65

#if !defined _TAO_CDR_OP_Test_VSortRecursiveUnionSeq_H_
#define _TAO_CDR_OP_Test_VSortRecursiveUnionSeq_H_
TAO_BEGIN_VERSIONED_NAMESPACE_DECL


 ::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Test::VSortRecursiveUnionSeq &_tao_sequence);
 ::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Test::VSortRecursiveUnionSeq &_tao_sequence);

TAO_END_VERSIONED_NAMESPACE_DECL



#endif /* _TAO_CDR_OP_Test_VSortRecursiveUnionSeq_H_ */

// TAO_IDL - Generated from
// be/be_visitor_union/cdr_op_ch.cpp:38


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 ::CORBA::Boolean operator<< (TAO_OutputCDR &, const Test::VSortRecursiveUnion &);
 ::CORBA::Boolean operator>> (TAO_InputCDR &, Test::VSortRecursiveUnion &);

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_union/cdr_op_ch.cpp:38


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 ::CORBA::Boolean operator<< (TAO_OutputCDR &, const Test::EnumUnion &);
 ::CORBA::Boolean operator>> (TAO_InputCDR &, Test::EnumUnion &);

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_sequence/cdr_op_ch.cpp:65

#if !defined _TAO_CDR_OP_Test_IndirectlyRecursiveValuetypeSeq_H_
#define _TAO_CDR_OP_Test_IndirectlyRecursiveValuetypeSeq_H_
TAO_BEGIN_VERSIONED_NAMESPACE_DECL


 ::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Test::IndirectlyRecursiveValuetypeSeq &_tao_sequence);
 ::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Test::IndirectlyRecursiveValuetypeSeq &_tao_sequence);

TAO_END_VERSIONED_NAMESPACE_DECL



#endif /* _TAO_CDR_OP_Test_IndirectlyRecursiveValuetypeSeq_H_ */

// TAO_IDL - Generated from
// be/be_valuetype.cpp:456


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

namespace CORBA
{
  extern  void add_ref (Test::IndirectlyRecursiveValuetype *);
  extern  void remove_ref (Test::IndirectlyRecursiveValuetype *);
}
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_valuetype/cdr_op_ch.cpp:49


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 ::CORBA::Boolean operator<< (TAO_OutputCDR &, const Test::IndirectlyRecursiveValuetype *);
 ::CORBA::Boolean operator>> (TAO_InputCDR &, Test::IndirectlyRecursiveValuetype *&);

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_valuetype.cpp:456


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

namespace CORBA
{
  extern  void add_ref (Test::DirectlyRecursiveValuetype *);
  extern  void remove_ref (Test::DirectlyRecursiveValuetype *);
}
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_valuetype/cdr_op_ch.cpp:49


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 ::CORBA::Boolean operator<< (TAO_OutputCDR &, const Test::DirectlyRecursiveValuetype *);
 ::CORBA::Boolean operator>> (TAO_InputCDR &, Test::DirectlyRecursiveValuetype *&);

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_enum/cdr_op_ch.cpp:34


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 ::CORBA::Boolean operator<< (TAO_OutputCDR &strm, Test::PositionEnum _tao_enumerator);
 ::CORBA::Boolean operator>> (TAO_InputCDR &strm, Test::PositionEnum &_tao_enumerator);

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_structure/cdr_op_ch.cpp:43


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 ::CORBA::Boolean operator<< (TAO_OutputCDR &, const Test::Position &);
 ::CORBA::Boolean operator>> (TAO_InputCDR &, Test::Position &);

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_enum/cdr_op_ch.cpp:34


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 ::CORBA::Boolean operator<< (TAO_OutputCDR &strm, Test::ValueSort _tao_enumerator);
 ::CORBA::Boolean operator>> (TAO_InputCDR &strm, Test::ValueSort &_tao_enumerator);

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_union/cdr_op_ch.cpp:38


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 ::CORBA::Boolean operator<< (TAO_OutputCDR &, const Test::NonRecursiveUnionWithEnum &);
 ::CORBA::Boolean operator>> (TAO_InputCDR &, Test::NonRecursiveUnionWithEnum &);

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_enum/cdr_op_ch.cpp:34


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 ::CORBA::Boolean operator<< (TAO_OutputCDR &strm, Test::ValueSort2 _tao_enumerator);
 ::CORBA::Boolean operator>> (TAO_InputCDR &strm, Test::ValueSort2 &_tao_enumerator);

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_structure/cdr_op_ch.cpp:43


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 ::CORBA::Boolean operator<< (TAO_OutputCDR &, const Test::Symbol2 &);
 ::CORBA::Boolean operator>> (TAO_InputCDR &, Test::Symbol2 &);

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_union/cdr_op_ch.cpp:38


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 ::CORBA::Boolean operator<< (TAO_OutputCDR &, const Test::NonRecursiveUnionWithStringStruct &);
 ::CORBA::Boolean operator>> (TAO_InputCDR &, Test::NonRecursiveUnionWithStringStruct &);

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_interface/cdr_op_ch.cpp:41

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 ::CORBA::Boolean operator<< (TAO_OutputCDR &, const Test::Hello_ptr );
 ::CORBA::Boolean operator>> (TAO_InputCDR &, Test::Hello_ptr &);

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_sequence/cdr_op_ch.cpp:65

#if !defined _TAO_CDR_OP_Test_Recursive2Seq2_H_
#define _TAO_CDR_OP_Test_Recursive2Seq2_H_
TAO_BEGIN_VERSIONED_NAMESPACE_DECL


 ::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Test::Recursive2Seq2 &_tao_sequence);
 ::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Test::Recursive2Seq2 &_tao_sequence);

TAO_END_VERSIONED_NAMESPACE_DECL



#endif /* _TAO_CDR_OP_Test_Recursive2Seq2_H_ */

// TAO_IDL - Generated from
// be/be_valuetype.cpp:456


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

namespace CORBA
{
  extern  void add_ref (Test::Recursive2 *);
  extern  void remove_ref (Test::Recursive2 *);
}
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_valuetype/cdr_op_ch.cpp:49


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 ::CORBA::Boolean operator<< (TAO_OutputCDR &, const Test::Recursive2 *);
 ::CORBA::Boolean operator>> (TAO_InputCDR &, Test::Recursive2 *&);

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_structure/cdr_op_ch.cpp:43


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 ::CORBA::Boolean operator<< (TAO_OutputCDR &, const Test::Recursive2::Innerstruct3a &);
 ::CORBA::Boolean operator>> (TAO_InputCDR &, Test::Recursive2::Innerstruct3a &);

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_structure/cdr_op_ch.cpp:43


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 ::CORBA::Boolean operator<< (TAO_OutputCDR &, const Test::Recursive2::Innerstruct3b &);
 ::CORBA::Boolean operator>> (TAO_InputCDR &, Test::Recursive2::Innerstruct3b &);

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_sequence/cdr_op_ch.cpp:65

#if !defined _TAO_CDR_OP_Test_RecursiveSeq3_H_
#define _TAO_CDR_OP_Test_RecursiveSeq3_H_
TAO_BEGIN_VERSIONED_NAMESPACE_DECL


 ::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Test::RecursiveSeq3 &_tao_sequence);
 ::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Test::RecursiveSeq3 &_tao_sequence);

TAO_END_VERSIONED_NAMESPACE_DECL



#endif /* _TAO_CDR_OP_Test_RecursiveSeq3_H_ */

// TAO_IDL - Generated from
// be/be_valuetype.cpp:456


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

namespace CORBA
{
  extern  void add_ref (Test::Recursive3 *);
  extern  void remove_ref (Test::Recursive3 *);
}
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_valuetype/cdr_op_ch.cpp:49


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 ::CORBA::Boolean operator<< (TAO_OutputCDR &, const Test::Recursive3 *);
 ::CORBA::Boolean operator>> (TAO_InputCDR &, Test::Recursive3 *&);

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_codegen.cpp:1700
#if defined (__ACE_INLINE__)
#include "TestC.inl"
#endif /* defined INLINE */

#include /**/ "ace/post.h"

#endif /* ifndef */

