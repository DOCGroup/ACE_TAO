// -*- C++ -*-
/**
 * Code generated by the The ACE ORB (TAO) IDL Compiler v2.4.1
 * TAO and the TAO IDL Compiler have been developed by:
 *       Center for Distributed Object Computing
 *       Washington University
 *       St. Louis, MO
 *       USA
 *       http://www.cs.wustl.edu/~schmidt/doc-center.html
 * and
 *       Distributed Object Computing Laboratory
 *       University of California at Irvine
 *       Irvine, CA
 *       USA
 * and
 *       Institute for Software Integrated Systems
 *       Vanderbilt University
 *       Nashville, TN
 *       USA
 *       http://www.isis.vanderbilt.edu/
 *
 * Information about TAO is available at:
 *     http://www.dre.vanderbilt.edu/~schmidt/TAO.html
 **/

// TAO_IDL - Generated from
// be/be_codegen.cpp:373


#include "NonRecursiveC.h"
#include "tao/AnyTypeCode/Null_RefCount_Policy.h"
#include "tao/AnyTypeCode/TypeCode_Constants.h"
#include "tao/AnyTypeCode/Alias_TypeCode_Static.h"
#include "tao/AnyTypeCode/Struct_TypeCode_Static.h"
#include "tao/AnyTypeCode/TypeCode_Struct_Field.h"
#include "tao/CDR.h"
#include "tao/CDR.h"
#include "tao/AnyTypeCode/Any_Dual_Impl_T.h"

#if !defined (__ACE_INLINE__)
#include "NonRecursiveC.inl"
#endif /* !defined INLINE */

// TAO_IDL - Generated from
// be/be_visitor_typecode/struct_typecode.cpp:86

static TAO::TypeCode::Struct_Field<
  char const *,
  ::CORBA::TypeCode_ptr const *> const
    _tao_fields_Foo_Nested[] =
      {
        { "z", &CORBA::_tc_boolean }
      };

static TAO::TypeCode::Struct<
  char const *,
  ::CORBA::TypeCode_ptr const *,
  TAO::TypeCode::Struct_Field<
    char const *,
    ::CORBA::TypeCode_ptr const *> const *,
  TAO::Null_RefCount_Policy>
_tao_tc_Foo_Nested (
  ::CORBA::tk_struct,
  "IDL:Foo/Nested:1.0",
  "Nested",
  _tao_fields_Foo_Nested,
  1);


namespace Foo
{
  ::CORBA::TypeCode_ptr const _tc_Nested =
    &_tao_tc_Foo_Nested;
}

// TAO_IDL - Generated from
// be/be_visitor_structure/structure_cs.cpp:56

void
Foo::Nested::_tao_any_destructor (
    void *_tao_void_pointer)
{
  Nested *_tao_tmp_pointer =
    static_cast<Nested *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

// TAO_IDL - Generated from
// be/be_visitor_typecode/alias_typecode.cpp:49

static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_Bar_Nested (
    ::CORBA::tk_alias,
    "IDL:Bar/Nested:1.0",
    "Nested",
    &Foo::_tc_Nested);


namespace Bar
{
  ::CORBA::TypeCode_ptr const _tc_Nested =
    &_tao_tc_Bar_Nested;
}

// TAO_IDL - Generated from
// be/be_visitor_typecode/struct_typecode.cpp:86

static TAO::TypeCode::Struct_Field<
  char const *,
  ::CORBA::TypeCode_ptr const *> const
    _tao_fields_Bar_Baz[] =
      {
        { "one", &Bar::_tc_Nested },
        { "two", &Bar::_tc_Nested }
      };

static TAO::TypeCode::Struct<
  char const *,
  ::CORBA::TypeCode_ptr const *,
  TAO::TypeCode::Struct_Field<
    char const *,
    ::CORBA::TypeCode_ptr const *> const *,
  TAO::Null_RefCount_Policy>
_tao_tc_Bar_Baz (
  ::CORBA::tk_struct,
  "IDL:Bar/Baz:1.0",
  "Baz",
  _tao_fields_Bar_Baz,
  2);


namespace Bar
{
  ::CORBA::TypeCode_ptr const _tc_Baz =
    &_tao_tc_Bar_Baz;
}

// TAO_IDL - Generated from
// be/be_visitor_structure/structure_cs.cpp:56

void
Bar::Baz::_tao_any_destructor (
    void *_tao_void_pointer)
{
  Baz *_tao_tmp_pointer =
    static_cast<Baz *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

// TAO_IDL - Generated from
// be/be_visitor_structure/any_op_cs.cpp:43



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace Foo
{
  /// Copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      const ::Foo::Nested &_tao_elem)
  {
    TAO::Any_Dual_Impl_T< ::Foo::Nested>::insert_copy (
        _tao_any,
        ::Foo::Nested::_tao_any_destructor,
        ::Foo::_tc_Nested,
        _tao_elem);
}

/// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any, ::
    Foo::Nested *_tao_elem)
{
  TAO::Any_Dual_Impl_T< ::Foo::Nested>::insert (
      _tao_any,
      ::Foo::Nested::_tao_any_destructor,
      ::Foo::_tc_Nested,
      _tao_elem);
}

/// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    ::Foo::Nested *&_tao_elem)
{
  return _tao_any >>= const_cast<
      const ::Foo::Nested *&> (
      _tao_elem);
}

/// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const ::Foo::Nested *&_tao_elem)
{
  return
    TAO::Any_Dual_Impl_T< ::Foo::Nested>::extract (
        _tao_any,
        ::Foo::Nested::_tao_any_destructor,
        ::Foo::_tc_Nested,
        _tao_elem
      );
}
}

#else

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

/// Copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  const Foo::Nested &_tao_elem)
{
  TAO::Any_Dual_Impl_T<Foo::Nested>::insert_copy (
    _tao_any,
    Foo::Nested::_tao_any_destructor,
    Foo::_tc_Nested,
    _tao_elem);
}

/// Non-copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  Foo::Nested *_tao_elem)
{
  TAO::Any_Dual_Impl_T<Foo::Nested>::insert (
    _tao_any,
    Foo::Nested::_tao_any_destructor,
    Foo::_tc_Nested,
    _tao_elem);
}

/// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
  const ::CORBA::Any &_tao_any,
  Foo::Nested *&_tao_elem)
{
  return _tao_any >>= const_cast<
      const Foo::Nested *&> (
      _tao_elem);
}

/// Extraction to const pointer.
::CORBA::Boolean operator>>= (
  const ::CORBA::Any &_tao_any,
  const Foo::Nested *&_tao_elem)
{
  return
    TAO::Any_Dual_Impl_T<Foo::Nested>::extract (
      _tao_any,
      Foo::Nested::_tao_any_destructor,
      Foo::_tc_Nested,
      _tao_elem);
}
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_structure/any_op_cs.cpp:43



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace Bar
{
  /// Copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      const ::Bar::Baz &_tao_elem)
  {
    TAO::Any_Dual_Impl_T< ::Bar::Baz>::insert_copy (
        _tao_any,
        ::Bar::Baz::_tao_any_destructor,
        ::Bar::_tc_Baz,
        _tao_elem);
}

/// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any, ::
    Bar::Baz *_tao_elem)
{
  TAO::Any_Dual_Impl_T< ::Bar::Baz>::insert (
      _tao_any,
      ::Bar::Baz::_tao_any_destructor,
      ::Bar::_tc_Baz,
      _tao_elem);
}

/// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    ::Bar::Baz *&_tao_elem)
{
  return _tao_any >>= const_cast<
      const ::Bar::Baz *&> (
      _tao_elem);
}

/// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const ::Bar::Baz *&_tao_elem)
{
  return
    TAO::Any_Dual_Impl_T< ::Bar::Baz>::extract (
        _tao_any,
        ::Bar::Baz::_tao_any_destructor,
        ::Bar::_tc_Baz,
        _tao_elem
      );
}
}

#else

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

/// Copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  const Bar::Baz &_tao_elem)
{
  TAO::Any_Dual_Impl_T<Bar::Baz>::insert_copy (
    _tao_any,
    Bar::Baz::_tao_any_destructor,
    Bar::_tc_Baz,
    _tao_elem);
}

/// Non-copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  Bar::Baz *_tao_elem)
{
  TAO::Any_Dual_Impl_T<Bar::Baz>::insert (
    _tao_any,
    Bar::Baz::_tao_any_destructor,
    Bar::_tc_Baz,
    _tao_elem);
}

/// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
  const ::CORBA::Any &_tao_any,
  Bar::Baz *&_tao_elem)
{
  return _tao_any >>= const_cast<
      const Bar::Baz *&> (
      _tao_elem);
}

/// Extraction to const pointer.
::CORBA::Boolean operator>>= (
  const ::CORBA::Any &_tao_any,
  const Bar::Baz *&_tao_elem)
{
  return
    TAO::Any_Dual_Impl_T<Bar::Baz>::extract (
      _tao_any,
      Bar::Baz::_tao_any_destructor,
      Bar::_tc_Baz,
      _tao_elem);
}
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_structure/cdr_op_cs.cpp:49

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Foo::Nested &_tao_aggregate)
{
  return
    (strm << ::ACE_OutputCDR::from_boolean (_tao_aggregate.z));
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Foo::Nested &_tao_aggregate)
{
  return
    (strm >> ::ACE_InputCDR::to_boolean (_tao_aggregate.z));
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_structure/cdr_op_cs.cpp:49

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Bar::Baz &_tao_aggregate)
{
  return
    (strm << _tao_aggregate.one) &&
    (strm << _tao_aggregate.two);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Bar::Baz &_tao_aggregate)
{
  return
    (strm >> _tao_aggregate.one) &&
    (strm >> _tao_aggregate.two);
}

TAO_END_VERSIONED_NAMESPACE_DECL



