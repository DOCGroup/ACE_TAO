// -*- C++ -*-
/**
 * Code generated by the The ACE ORB (TAO) IDL Compiler v2.4.1
 * TAO and the TAO IDL Compiler have been developed by:
 *       Center for Distributed Object Computing
 *       Washington University
 *       St. Louis, MO
 *       USA
 *       http://www.cs.wustl.edu/~schmidt/doc-center.html
 * and
 *       Distributed Object Computing Laboratory
 *       University of California at Irvine
 *       Irvine, CA
 *       USA
 * and
 *       Institute for Software Integrated Systems
 *       Vanderbilt University
 *       Nashville, TN
 *       USA
 *       http://www.isis.vanderbilt.edu/
 *
 * Information about TAO is available at:
 *     http://www.dre.vanderbilt.edu/~schmidt/TAO.html
 **/


// TAO_IDL - Generated from
// be/be_visitor_union/union_ci.cpp:36

// *************************************************************
// Inline operations for union Test::RecursiveUnion
// *************************************************************

// TAO_IDL - Generated from
// be/be_visitor_union/discriminant_ci.cpp:145



// Accessor to set the discriminant.
ACE_INLINE
void
Test::RecursiveUnion::_d ( ::CORBA::Short discval)
{
  this->disc_ = discval;
}

// Accessor to get the discriminant.
ACE_INLINE
::CORBA::Short
Test::RecursiveUnion::_d (void) const
{
  return this->disc_;
}

// TAO_IDL - Generated from
// be/be_visitor_union_branch/public_ci.cpp:788

/// Accessor to set the member.
ACE_INLINE
void
Test::RecursiveUnion::recursive_unions (const Test::RecursiveUnionSeq &val)
{
  // Set the discriminant value.
  this->_reset ();
  this->disc_ = 0;
  ACE_NEW (
      this->u_.recursive_unions_,
      Test::RecursiveUnionSeq (val)
    );
}

/// Readonly get method.
ACE_INLINE
const Test::RecursiveUnionSeq &
Test::RecursiveUnion::recursive_unions (void) const
{
  return *this->u_.recursive_unions_;
}

/// Read/write get method.
ACE_INLINE
Test::RecursiveUnionSeq &
Test::RecursiveUnion::recursive_unions (void)
{
  return *this->u_.recursive_unions_;
}

// TAO_IDL - Generated from
// be/be_visitor_union_branch/public_ci.cpp:577

// Accessor to set the member.
ACE_INLINE
void
Test::RecursiveUnion::a (CORBA::Short val)
{
  // Set the discriminant value.
  this->_reset ();
  this->disc_ = 1;
  // Set the value.
  this->u_.a_ = val;
}

/// Retrieve the member.
ACE_INLINE
::CORBA::Short
Test::RecursiveUnion::a (void) const
{
  return this->u_.a_;
}

// TAO_IDL - Generated from
// be/be_visitor_union_branch/public_ci.cpp:788

/// Accessor to set the member.
ACE_INLINE
void
Test::RecursiveUnion::recursive_unions_second (const Test::RecursiveUnionSeq &val)
{
  // Set the discriminant value.
  this->_reset ();
  this->disc_ = 2;
  ACE_NEW (
      this->u_.recursive_unions_second_,
      Test::RecursiveUnionSeq (val)
    );
}

/// Readonly get method.
ACE_INLINE
const Test::RecursiveUnionSeq &
Test::RecursiveUnion::recursive_unions_second (void) const
{
  return *this->u_.recursive_unions_second_;
}

/// Read/write get method.
ACE_INLINE
Test::RecursiveUnionSeq &
Test::RecursiveUnion::recursive_unions_second (void)
{
  return *this->u_.recursive_unions_second_;
}

// TAO_IDL - Generated from
// be/be_visitor_union_branch/public_ci.cpp:577

// Accessor to set the member.
ACE_INLINE
void
Test::RecursiveUnion::i (CORBA::Long val)
{
  // Set the discriminant value.
  this->_reset ();
  this->disc_ = -32768;
  // Set the value.
  this->u_.i_ = val;
}

/// Retrieve the member.
ACE_INLINE
::CORBA::Long
Test::RecursiveUnion::i (void) const
{
  return this->u_.i_;
}

// TAO_IDL - Generated from
// be/be_visitor_union/union_ci.cpp:36

// *************************************************************
// Inline operations for union Test::RecursiveUnion2
// *************************************************************

// TAO_IDL - Generated from
// be/be_visitor_union/discriminant_ci.cpp:145



// Accessor to set the discriminant.
ACE_INLINE
void
Test::RecursiveUnion2::_d ( ::CORBA::Short discval)
{
  this->disc_ = discval;
}

// Accessor to get the discriminant.
ACE_INLINE
::CORBA::Short
Test::RecursiveUnion2::_d (void) const
{
  return this->disc_;
}

// TAO_IDL - Generated from
// be/be_visitor_union_branch/public_ci.cpp:1065

/// Accessor to set the member.
ACE_INLINE
void
Test::RecursiveUnion2::insb (const Test::RecursiveUnion2::Innerstruct3a &val)
{
  // Set the discriminant value.
  this->_reset ();
  this->disc_ = 0;
  ACE_NEW (
      this->u_.insb_,
      Test::RecursiveUnion2::Innerstruct3a (val)
    );
}

// Readonly get method.
ACE_INLINE
const Test::RecursiveUnion2::Innerstruct3a &
Test::RecursiveUnion2::insb (void) const
{
  return *this->u_.insb_;
}

// Read/write get method.
ACE_INLINE
Test::RecursiveUnion2::Innerstruct3a &
Test::RecursiveUnion2::insb (void)
{
  return *this->u_.insb_;
}

// TAO_IDL - Generated from
// be/be_visitor_union_branch/public_ci.cpp:577

// Accessor to set the member.
ACE_INLINE
void
Test::RecursiveUnion2::a (CORBA::Short val)
{
  // Set the discriminant value.
  this->_reset ();
  this->disc_ = 1;
  // Set the value.
  this->u_.a_ = val;
}

/// Retrieve the member.
ACE_INLINE
::CORBA::Short
Test::RecursiveUnion2::a (void) const
{
  return this->u_.a_;
}

// TAO_IDL - Generated from
// be/be_visitor_union_branch/public_ci.cpp:1065

/// Accessor to set the member.
ACE_INLINE
void
Test::RecursiveUnion2::insa (const Test::RecursiveUnion2::Innerstruct3b &val)
{
  // Set the discriminant value.
  this->_reset ();
  this->disc_ = 2;
  ACE_NEW (
      this->u_.insa_,
      Test::RecursiveUnion2::Innerstruct3b (val)
    );
}

// Readonly get method.
ACE_INLINE
const Test::RecursiveUnion2::Innerstruct3b &
Test::RecursiveUnion2::insa (void) const
{
  return *this->u_.insa_;
}

// Read/write get method.
ACE_INLINE
Test::RecursiveUnion2::Innerstruct3b &
Test::RecursiveUnion2::insa (void)
{
  return *this->u_.insa_;
}

// TAO_IDL - Generated from
// be/be_visitor_union_branch/public_ci.cpp:577

// Accessor to set the member.
ACE_INLINE
void
Test::RecursiveUnion2::i (CORBA::Long val)
{
  // Set the discriminant value.
  this->_reset ();
  this->disc_ = -32768;
  // Set the value.
  this->u_.i_ = val;
}

/// Retrieve the member.
ACE_INLINE
::CORBA::Long
Test::RecursiveUnion2::i (void) const
{
  return this->u_.i_;
}

// TAO_IDL - Generated from
// be/be_visitor_union/union_ci.cpp:36

// *************************************************************
// Inline operations for union Test::RecursiveUnion3
// *************************************************************

// TAO_IDL - Generated from
// be/be_visitor_union/discriminant_ci.cpp:145

ACE_INLINE
void
Test::RecursiveUnion3::_default ()
{
  this->_reset ();
  this->disc_ = -32768;
}

// Accessor to set the discriminant.
ACE_INLINE
void
Test::RecursiveUnion3::_d ( ::CORBA::Short discval)
{
  this->disc_ = discval;
}

// Accessor to get the discriminant.
ACE_INLINE
::CORBA::Short
Test::RecursiveUnion3::_d (void) const
{
  return this->disc_;
}

// TAO_IDL - Generated from
// be/be_visitor_union_branch/public_ci.cpp:577

// Accessor to set the member.
ACE_INLINE
void
Test::RecursiveUnion3::a (CORBA::Short val)
{
  // Set the discriminant value.
  this->_reset ();
  this->disc_ = 0;
  // Set the value.
  this->u_.a_ = val;
}

/// Retrieve the member.
ACE_INLINE
::CORBA::Short
Test::RecursiveUnion3::a (void) const
{
  return this->u_.a_;
}

// TAO_IDL - Generated from
// be/be_visitor_union_branch/public_ci.cpp:788

/// Accessor to set the member.
ACE_INLINE
void
Test::RecursiveUnion3::b (const Test::RecursiveStructSeq3 &val)
{
  // Set the discriminant value.
  this->_reset ();
  this->disc_ = 1;
  ACE_NEW (
      this->u_.b_,
      Test::RecursiveStructSeq3 (val)
    );
}

/// Readonly get method.
ACE_INLINE
const Test::RecursiveStructSeq3 &
Test::RecursiveUnion3::b (void) const
{
  return *this->u_.b_;
}

/// Read/write get method.
ACE_INLINE
Test::RecursiveStructSeq3 &
Test::RecursiveUnion3::b (void)
{
  return *this->u_.b_;
}

// TAO_IDL - Generated from
// be/be_visitor_union_branch/public_ci.cpp:788

/// Accessor to set the member.
ACE_INLINE
void
Test::RecursiveUnion3::c (const Test::RecursiveStructSeq3 &val)
{
  // Set the discriminant value.
  this->_reset ();
  this->disc_ = 2;
  ACE_NEW (
      this->u_.c_,
      Test::RecursiveStructSeq3 (val)
    );
}

/// Readonly get method.
ACE_INLINE
const Test::RecursiveStructSeq3 &
Test::RecursiveUnion3::c (void) const
{
  return *this->u_.c_;
}

/// Read/write get method.
ACE_INLINE
Test::RecursiveStructSeq3 &
Test::RecursiveUnion3::c (void)
{
  return *this->u_.c_;
}

// TAO_IDL - Generated from
// be/be_visitor_union/union_ci.cpp:36

// *************************************************************
// Inline operations for union Test::RecursiveUnionNoDefault
// *************************************************************

// TAO_IDL - Generated from
// be/be_visitor_union/discriminant_ci.cpp:145

ACE_INLINE
void
Test::RecursiveUnionNoDefault::_default ()
{
  this->_reset ();
  this->disc_ = -32768;
}

// Accessor to set the discriminant.
ACE_INLINE
void
Test::RecursiveUnionNoDefault::_d ( ::CORBA::Short discval)
{
  this->disc_ = discval;
}

// Accessor to get the discriminant.
ACE_INLINE
::CORBA::Short
Test::RecursiveUnionNoDefault::_d (void) const
{
  return this->disc_;
}

// TAO_IDL - Generated from
// be/be_visitor_union_branch/public_ci.cpp:788

/// Accessor to set the member.
ACE_INLINE
void
Test::RecursiveUnionNoDefault::recursive_unions (const Test::RecursiveUnionSeqNoDefault &val)
{
  // Set the discriminant value.
  this->_reset ();
  this->disc_ = 0;
  ACE_NEW (
      this->u_.recursive_unions_,
      Test::RecursiveUnionSeqNoDefault (val)
    );
}

/// Readonly get method.
ACE_INLINE
const Test::RecursiveUnionSeqNoDefault &
Test::RecursiveUnionNoDefault::recursive_unions (void) const
{
  return *this->u_.recursive_unions_;
}

/// Read/write get method.
ACE_INLINE
Test::RecursiveUnionSeqNoDefault &
Test::RecursiveUnionNoDefault::recursive_unions (void)
{
  return *this->u_.recursive_unions_;
}

// TAO_IDL - Generated from
// be/be_visitor_union_branch/public_ci.cpp:577

// Accessor to set the member.
ACE_INLINE
void
Test::RecursiveUnionNoDefault::a (CORBA::Short val)
{
  // Set the discriminant value.
  this->_reset ();
  this->disc_ = 1;
  // Set the value.
  this->u_.a_ = val;
}

/// Retrieve the member.
ACE_INLINE
::CORBA::Short
Test::RecursiveUnionNoDefault::a (void) const
{
  return this->u_.a_;
}

// TAO_IDL - Generated from
// be/be_visitor_union_branch/public_ci.cpp:788

/// Accessor to set the member.
ACE_INLINE
void
Test::RecursiveUnionNoDefault::recursive_unions_second (const Test::RecursiveUnionSeqNoDefault &val)
{
  // Set the discriminant value.
  this->_reset ();
  this->disc_ = 2;
  ACE_NEW (
      this->u_.recursive_unions_second_,
      Test::RecursiveUnionSeqNoDefault (val)
    );
}

/// Readonly get method.
ACE_INLINE
const Test::RecursiveUnionSeqNoDefault &
Test::RecursiveUnionNoDefault::recursive_unions_second (void) const
{
  return *this->u_.recursive_unions_second_;
}

/// Read/write get method.
ACE_INLINE
Test::RecursiveUnionSeqNoDefault &
Test::RecursiveUnionNoDefault::recursive_unions_second (void)
{
  return *this->u_.recursive_unions_second_;
}

// TAO_IDL - Generated from
// be/be_visitor_union/union_ci.cpp:36

// *************************************************************
// Inline operations for union Test::VSortRecursiveUnion
// *************************************************************

// TAO_IDL - Generated from
// be/be_visitor_union/discriminant_ci.cpp:55

ACE_INLINE
void
Test::VSortRecursiveUnion::_default ()
{
  this->_reset ();
  this->disc_ = Test::UNKNOWN_TYPE;
}

// Accessor to set the discriminant.
ACE_INLINE
void
Test::VSortRecursiveUnion::_d (Test::VSort discval)
{
  this->disc_ = discval;
}

// Accessor to get the discriminant.
ACE_INLINE
Test::VSort
Test::VSortRecursiveUnion::_d (void) const
{
  return this->disc_;
}

// TAO_IDL - Generated from
// be/be_visitor_union_branch/public_ci.cpp:788

/// Accessor to set the member.
ACE_INLINE
void
Test::VSortRecursiveUnion::recursive_unions (const Test::VSortRecursiveUnionSeq &val)
{
  // Set the discriminant value.
  this->_reset ();
  this->disc_ = Test::RECURSIVE_TYPE;
  ACE_NEW (
      this->u_.recursive_unions_,
      Test::VSortRecursiveUnionSeq (val)
    );
}

/// Readonly get method.
ACE_INLINE
const Test::VSortRecursiveUnionSeq &
Test::VSortRecursiveUnion::recursive_unions (void) const
{
  return *this->u_.recursive_unions_;
}

/// Read/write get method.
ACE_INLINE
Test::VSortRecursiveUnionSeq &
Test::VSortRecursiveUnion::recursive_unions (void)
{
  return *this->u_.recursive_unions_;
}

// TAO_IDL - Generated from
// be/be_visitor_union_branch/public_ci.cpp:577

// Accessor to set the member.
ACE_INLINE
void
Test::VSortRecursiveUnion::i (CORBA::Long val)
{
  // Set the discriminant value.
  this->_reset ();
  this->disc_ = Test::LONG_STYPE;
  // Set the value.
  this->u_.i_ = val;
}

/// Retrieve the member.
ACE_INLINE
::CORBA::Long
Test::VSortRecursiveUnion::i (void) const
{
  return this->u_.i_;
}

// TAO_IDL - Generated from
// be/be_visitor_union/union_ci.cpp:36

// *************************************************************
// Inline operations for union Test::EnumUnion
// *************************************************************

// TAO_IDL - Generated from
// be/be_visitor_union/discriminant_ci.cpp:55

ACE_INLINE
void
Test::EnumUnion::_default ()
{
  this->_reset ();
  this->disc_ = Test::UNKNOWN_TYPE;
}

// Accessor to set the discriminant.
ACE_INLINE
void
Test::EnumUnion::_d (Test::VSort discval)
{
  this->disc_ = discval;
}

// Accessor to get the discriminant.
ACE_INLINE
Test::VSort
Test::EnumUnion::_d (void) const
{
  return this->disc_;
}

// TAO_IDL - Generated from
// be/be_visitor_union_branch/public_ci.cpp:577

// Accessor to set the member.
ACE_INLINE
void
Test::EnumUnion::a (CORBA::Boolean val)
{
  // Set the discriminant value.
  this->_reset ();
  this->disc_ = Test::BOOL_STYPE;
  // Set the value.
  this->u_.a_ = val;
}

/// Retrieve the member.
ACE_INLINE
::CORBA::Boolean
Test::EnumUnion::a (void) const
{
  return this->u_.a_;
}

// TAO_IDL - Generated from
// be/be_visitor_union_branch/public_ci.cpp:577

// Accessor to set the member.
ACE_INLINE
void
Test::EnumUnion::i (CORBA::Long val)
{
  // Set the discriminant value.
  this->_reset ();
  this->disc_ = Test::LONG_STYPE;
  // Set the value.
  this->u_.i_ = val;
}

/// Retrieve the member.
ACE_INLINE
::CORBA::Long
Test::EnumUnion::i (void) const
{
  return this->u_.i_;
}

// TAO_IDL - Generated from
// be/be_visitor_valuetype/valuetype_ci.cpp:44

ACE_INLINE
Test::IndirectlyRecursiveValuetype::IndirectlyRecursiveValuetype (void)
{}

ACE_INLINE const char*
Test::IndirectlyRecursiveValuetype::_tao_obv_static_repository_id ()
{
  return "IDL:Test/IndirectlyRecursiveValuetype:1.0";
}

// TAO_IDL - Generated from
// be/be_visitor_valuetype/valuetype_ci.cpp:44

ACE_INLINE
Test::DirectlyRecursiveValuetype::DirectlyRecursiveValuetype (void)
{}

ACE_INLINE const char*
Test::DirectlyRecursiveValuetype::_tao_obv_static_repository_id ()
{
  return "IDL:Test/DirectlyRecursiveValuetype:1.0";
}

// TAO_IDL - Generated from
// be/be_visitor_union/union_ci.cpp:36

// *************************************************************
// Inline operations for union Test::NonRecursiveUnionWithEnum
// *************************************************************

// TAO_IDL - Generated from
// be/be_visitor_union/discriminant_ci.cpp:55

ACE_INLINE
void
Test::NonRecursiveUnionWithEnum::_default ()
{
  this->_reset ();
  this->disc_ = static_cast <Test::ValueSort> (-1);
}

// Accessor to set the discriminant.
ACE_INLINE
void
Test::NonRecursiveUnionWithEnum::_d (Test::ValueSort discval)
{
  this->disc_ = discval;
}

// Accessor to get the discriminant.
ACE_INLINE
Test::ValueSort
Test::NonRecursiveUnionWithEnum::_d (void) const
{
  return this->disc_;
}

// TAO_IDL - Generated from
// be/be_visitor_union_branch/public_ci.cpp:1065

/// Accessor to set the member.
ACE_INLINE
void
Test::NonRecursiveUnionWithEnum::position_val (const Test::Position &val)
{
  // Set the discriminant value.
  this->_reset ();
  this->disc_ = Test::POSITION_TYPE;
  this->u_.position_val_ = val;
}

// Readonly get method.
ACE_INLINE
const Test::Position &
Test::NonRecursiveUnionWithEnum::position_val (void) const
{
  return this->u_.position_val_;
}

// Read/write get method.
ACE_INLINE
Test::Position &
Test::NonRecursiveUnionWithEnum::position_val (void)
{
  return this->u_.position_val_;
}

// TAO_IDL - Generated from
// be/be_visitor_union_branch/public_ci.cpp:788

/// Accessor to set the member.
ACE_INLINE
void
Test::NonRecursiveUnionWithEnum::octet_seq_val (const Test::OctetSeq &val)
{
  // Set the discriminant value.
  this->_reset ();
  this->disc_ = Test::OCTET_SEQ_TYPE;
  ACE_NEW (
      this->u_.octet_seq_val_,
      Test::OctetSeq (val)
    );
}

/// Readonly get method.
ACE_INLINE
const Test::OctetSeq &
Test::NonRecursiveUnionWithEnum::octet_seq_val (void) const
{
  return *this->u_.octet_seq_val_;
}

/// Read/write get method.
ACE_INLINE
Test::OctetSeq &
Test::NonRecursiveUnionWithEnum::octet_seq_val (void)
{
  return *this->u_.octet_seq_val_;
}

// TAO_IDL - Generated from
// be/be_visitor_union/union_ci.cpp:36

// *************************************************************
// Inline operations for union Test::NonRecursiveUnionWithStringStruct
// *************************************************************

// TAO_IDL - Generated from
// be/be_visitor_union/discriminant_ci.cpp:55

ACE_INLINE
void
Test::NonRecursiveUnionWithStringStruct::_default ()
{
  this->_reset ();
  this->disc_ = static_cast <Test::ValueSort2> (-1);
}

// Accessor to set the discriminant.
ACE_INLINE
void
Test::NonRecursiveUnionWithStringStruct::_d (Test::ValueSort2 discval)
{
  this->disc_ = discval;
}

// Accessor to get the discriminant.
ACE_INLINE
Test::ValueSort2
Test::NonRecursiveUnionWithStringStruct::_d (void) const
{
  return this->disc_;
}

// TAO_IDL - Generated from
// be/be_visitor_union_branch/public_ci.cpp:1065

/// Accessor to set the member.
ACE_INLINE
void
Test::NonRecursiveUnionWithStringStruct::symbol_val (const Test::Symbol2 &val)
{
  // Set the discriminant value.
  this->_reset ();
  this->disc_ = Test::SYMBOL_TYPE2;
  ACE_NEW (
      this->u_.symbol_val_,
      Test::Symbol2 (val)
    );
}

// Readonly get method.
ACE_INLINE
const Test::Symbol2 &
Test::NonRecursiveUnionWithStringStruct::symbol_val (void) const
{
  return *this->u_.symbol_val_;
}

// Read/write get method.
ACE_INLINE
Test::Symbol2 &
Test::NonRecursiveUnionWithStringStruct::symbol_val (void)
{
  return *this->u_.symbol_val_;
}

// TAO_IDL - Generated from
// be/be_visitor_interface/interface_ci.cpp:59

ACE_INLINE
Test::Hello::Hello (
    TAO_Stub *objref,
    ::CORBA::Boolean _tao_collocated,
    TAO_Abstract_ServantBase *servant,
    TAO_ORB_Core *oc)
  : ::CORBA::Object (objref, _tao_collocated, servant, oc)
{
}

ACE_INLINE
Test::Hello::Hello (
    ::IOP::IOR *ior,
    TAO_ORB_Core *oc)
  : ::CORBA::Object (ior, oc)
{
}

// TAO_IDL - Generated from
// be/be_visitor_valuetype/valuetype_ci.cpp:44

ACE_INLINE
Test::Recursive2::Recursive2 (void)
{}

ACE_INLINE const char*
Test::Recursive2::_tao_obv_static_repository_id ()
{
  return "IDL:Test/Recursive2:1.0";
}

// TAO_IDL - Generated from
// be/be_visitor_valuetype/valuetype_ci.cpp:44

ACE_INLINE
Test::Recursive3::Recursive3 (void)
{}

ACE_INLINE const char*
Test::Recursive3::_tao_obv_static_repository_id ()
{
  return "IDL:Test/Recursive3:1.0";
}

