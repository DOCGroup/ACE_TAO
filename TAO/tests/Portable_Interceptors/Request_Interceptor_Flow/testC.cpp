// -*- C++ -*-
/**
 * Code generated by the The ACE ORB (TAO) IDL Compiler v2.4.1
 * TAO and the TAO IDL Compiler have been developed by:
 *       Center for Distributed Object Computing
 *       Washington University
 *       St. Louis, MO
 *       USA
 *       http://www.cs.wustl.edu/~schmidt/doc-center.html
 * and
 *       Distributed Object Computing Laboratory
 *       University of California at Irvine
 *       Irvine, CA
 *       USA
 * and
 *       Institute for Software Integrated Systems
 *       Vanderbilt University
 *       Nashville, TN
 *       USA
 *       http://www.isis.vanderbilt.edu/
 *
 * Information about TAO is available at:
 *     http://www.dre.vanderbilt.edu/~schmidt/TAO.html
 **/

// TAO_IDL - Generated from
// be/be_codegen.cpp:373


#include "testC.h"
#include "tao/AnyTypeCode/Null_RefCount_Policy.h"
#include "tao/AnyTypeCode/TypeCode_Constants.h"
#include "tao/AnyTypeCode/Alias_TypeCode_Static.h"
#include "tao/AnyTypeCode/Objref_TypeCode_Static.h"
#include "tao/AnyTypeCode/Struct_TypeCode_Static.h"
#include "tao/AnyTypeCode/TypeCode_Struct_Field.h"
#include "tao/CDR.h"
#include "tao/Exception_Data.h"
#include "tao/Invocation_Adapter.h"
#include "tao/Object_T.h"
#include "tao/SystemException.h"
#include "ace/OS_NS_string.h"

#if !defined (__ACE_INLINE__)
#include "testC.inl"
#endif /* !defined INLINE */

// TAO_IDL - Generated from
// be/be_visitor_interface/interface_cs.cpp:48

// Traits specializations for Test.

Test_ptr
TAO::Objref_Traits<Test>::duplicate (
    Test_ptr p)
{
  return Test::_duplicate (p);
}

void
TAO::Objref_Traits<Test>::release (
    Test_ptr p)
{
  ::CORBA::release (p);
}

Test_ptr
TAO::Objref_Traits<Test>::nil (void)
{
  return Test::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<Test>::marshal (
    const Test_ptr p,
    TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

// TAO_IDL - Generated from
// be/be_visitor_typecode/alias_typecode.cpp:49

static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_Test_TestScenario (
    ::CORBA::tk_alias,
    "IDL:Test/TestScenario:1.0",
    "TestScenario",
    &CORBA::_tc_short);

::CORBA::TypeCode_ptr const Test::_tc_TestScenario =
  &_tao_tc_Test_TestScenario;

// TAO_IDL - Generated from
// be/be_visitor_exception/exception_cs.cpp:98

Test::X::X (void)
  : ::CORBA::UserException (
        "IDL:Test/X:1.0",
        "X"
      )
{
}

Test::X::~X (void)
{
}

Test::X::X (const ::Test::X &_tao_excp)
  : ::CORBA::UserException (
        _tao_excp._rep_id (),
        _tao_excp._name ()
      )
{
}

Test::X&
Test::X::operator= (const ::Test::X &_tao_excp)
{
  this->::CORBA::UserException::operator= (_tao_excp);
  return *this;
}

Test::X *
Test::X::_downcast ( ::CORBA::Exception *_tao_excp)
{
  return dynamic_cast<X *> (_tao_excp);
}

const Test::X *
Test::X::_downcast ( ::CORBA::Exception const *_tao_excp)
{
  return dynamic_cast<const X *> (_tao_excp);
}

::CORBA::Exception *Test::X::_alloc (void)
{
  ::CORBA::Exception *retval = 0;
  ACE_NEW_RETURN (retval, ::Test::X, 0);
  return retval;
}

::CORBA::Exception *
Test::X::_tao_duplicate (void) const
{
  ::CORBA::Exception *result = 0;
  ACE_NEW_RETURN (
      result,
      ::Test::X (*this),
      0
    );
  return result;
}

void Test::X::_raise (void) const
{
  throw *this;
}

void Test::X::_tao_encode (TAO_OutputCDR &cdr) const
{
  if (!(cdr << *this))
    {
      throw ::CORBA::MARSHAL ();
    }
}

void Test::X::_tao_decode (TAO_InputCDR &cdr)
{
  if (!(cdr >> *this))
    {
      throw ::CORBA::MARSHAL ();
    }
}

// TAO extension - the virtual _type method.
::CORBA::TypeCode_ptr Test::X::_tao_type (void) const
{
  return ::Test::_tc_X;
}

// TAO_IDL - Generated from
// be/be_visitor_typecode/struct_typecode.cpp:86

static TAO::TypeCode::Struct_Field<
  char const *,
  ::CORBA::TypeCode_ptr const *> const * const
    _tao_fields_Test_X = 0;

static TAO::TypeCode::Struct<
  char const *,
  ::CORBA::TypeCode_ptr const *,
  TAO::TypeCode::Struct_Field<
    char const *,
    ::CORBA::TypeCode_ptr const *> const *,
  TAO::Null_RefCount_Policy>
_tao_tc_Test_X (
  ::CORBA::tk_except,
  "IDL:Test/X:1.0",
  "X",
  _tao_fields_Test_X,
  0);

::CORBA::TypeCode_ptr const Test::_tc_X =
  &_tao_tc_Test_X;

// TAO_IDL - Generated from
// be/be_visitor_exception/exception_ctor.cpp:51

Test::UnknownScenario::UnknownScenario (
    ::Test::TestScenario _tao_scenario)
  : ::CORBA::UserException (
        "IDL:Test/UnknownScenario:1.0",
        "UnknownScenario"
      )
{
  this->scenario = _tao_scenario;
}



// TAO_IDL - Generated from
// be/be_visitor_exception/exception_cs.cpp:98

Test::UnknownScenario::UnknownScenario (void)
  : ::CORBA::UserException (
        "IDL:Test/UnknownScenario:1.0",
        "UnknownScenario"
      )
{
}

Test::UnknownScenario::~UnknownScenario (void)
{
}

Test::UnknownScenario::UnknownScenario (const ::Test::UnknownScenario &_tao_excp)
  : ::CORBA::UserException (
        _tao_excp._rep_id (),
        _tao_excp._name ()
      )
{
  this->scenario = _tao_excp.scenario;
}

Test::UnknownScenario&
Test::UnknownScenario::operator= (const ::Test::UnknownScenario &_tao_excp)
{
  this->::CORBA::UserException::operator= (_tao_excp);
  this->scenario = _tao_excp.scenario;
  return *this;
}

Test::UnknownScenario *
Test::UnknownScenario::_downcast ( ::CORBA::Exception *_tao_excp)
{
  return dynamic_cast<UnknownScenario *> (_tao_excp);
}

const Test::UnknownScenario *
Test::UnknownScenario::_downcast ( ::CORBA::Exception const *_tao_excp)
{
  return dynamic_cast<const UnknownScenario *> (_tao_excp);
}

::CORBA::Exception *Test::UnknownScenario::_alloc (void)
{
  ::CORBA::Exception *retval = 0;
  ACE_NEW_RETURN (retval, ::Test::UnknownScenario, 0);
  return retval;
}

::CORBA::Exception *
Test::UnknownScenario::_tao_duplicate (void) const
{
  ::CORBA::Exception *result = 0;
  ACE_NEW_RETURN (
      result,
      ::Test::UnknownScenario (*this),
      0
    );
  return result;
}

void Test::UnknownScenario::_raise (void) const
{
  throw *this;
}

void Test::UnknownScenario::_tao_encode (TAO_OutputCDR &cdr) const
{
  if (!(cdr << *this))
    {
      throw ::CORBA::MARSHAL ();
    }
}

void Test::UnknownScenario::_tao_decode (TAO_InputCDR &cdr)
{
  if (!(cdr >> *this))
    {
      throw ::CORBA::MARSHAL ();
    }
}

// TAO extension - the virtual _type method.
::CORBA::TypeCode_ptr Test::UnknownScenario::_tao_type (void) const
{
  return ::Test::_tc_UnknownScenario;
}

// TAO_IDL - Generated from
// be/be_visitor_typecode/struct_typecode.cpp:86

static TAO::TypeCode::Struct_Field<
  char const *,
  ::CORBA::TypeCode_ptr const *> const
    _tao_fields_Test_UnknownScenario[] =
      {
        { "scenario", &Test::_tc_TestScenario }
      };

static TAO::TypeCode::Struct<
  char const *,
  ::CORBA::TypeCode_ptr const *,
  TAO::TypeCode::Struct_Field<
    char const *,
    ::CORBA::TypeCode_ptr const *> const *,
  TAO::Null_RefCount_Policy>
_tao_tc_Test_UnknownScenario (
  ::CORBA::tk_except,
  "IDL:Test/UnknownScenario:1.0",
  "UnknownScenario",
  _tao_fields_Test_UnknownScenario,
  1);

::CORBA::TypeCode_ptr const Test::_tc_UnknownScenario =
  &_tao_tc_Test_UnknownScenario;

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:88

void
Test::client_test (
  ::Test::TestScenario scenario)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }

  TAO::Arg_Traits< void>::ret_val _tao_retval;
  TAO::Arg_Traits< ::CORBA::Short>::in_arg_val _tao_scenario (scenario);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_scenario
    };

  static TAO::Exception_Data
  _tao_Test_client_test_exceptiondata [] =
    {
      {
        "IDL:Test/X:1.0",
        Test::X::_alloc
#if TAO_HAS_INTERCEPTORS == 1
        , Test::_tc_X
#endif /* TAO_HAS_INTERCEPTORS */
      },

      {
        "IDL:Test/UnknownScenario:1.0",
        Test::UnknownScenario::_alloc
#if TAO_HAS_INTERCEPTORS == 1
        , Test::_tc_UnknownScenario
#endif /* TAO_HAS_INTERCEPTORS */
      }
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      2,
      "client_test",
      11,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY

    );

  _tao_call.invoke (
      _tao_Test_client_test_exceptiondata,
      2
    );
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:88

void
Test::server_test (
  ::Test::TestScenario scenario,
  ::CORBA::ULongSeq_out myseq)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }

  TAO::Arg_Traits< void>::ret_val _tao_retval;
  TAO::Arg_Traits< ::CORBA::Short>::in_arg_val _tao_scenario (scenario);
  TAO::Arg_Traits< ::CORBA::ULongSeq>::out_arg_val _tao_myseq (myseq);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_scenario,
      &_tao_myseq
    };

  static TAO::Exception_Data
  _tao_Test_server_test_exceptiondata [] =
    {
      {
        "IDL:Test/X:1.0",
        Test::X::_alloc
#if TAO_HAS_INTERCEPTORS == 1
        , Test::_tc_X
#endif /* TAO_HAS_INTERCEPTORS */
      },

      {
        "IDL:Test/UnknownScenario:1.0",
        Test::UnknownScenario::_alloc
#if TAO_HAS_INTERCEPTORS == 1
        , Test::_tc_UnknownScenario
#endif /* TAO_HAS_INTERCEPTORS */
      }
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      3,
      "server_test",
      11,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY

    );

  _tao_call.invoke (
      _tao_Test_server_test_exceptiondata,
      2
    );
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:88

void
Test::shutdown (
  void)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }

  TAO::Arg_Traits< void>::ret_val _tao_retval;

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      1,
      "shutdown",
      8,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY,
      TAO::TAO_ONEWAY_INVOCATION,
      TAO::TAO_SYNCHRONOUS_INVOCATION,
      false
    );

  _tao_call.invoke (0, 0);
}

Test::Test (void)
{
}

Test::~Test (void)
{
}

Test_ptr
Test::_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return
    TAO::Narrow_Utils<Test>::narrow (
        _tao_objref,
        "IDL:Test:1.0");
}

Test_ptr
Test::_unchecked_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return
    TAO::Narrow_Utils<Test>::unchecked_narrow (
        _tao_objref);
}

Test_ptr
Test::_nil (void)
{
  return 0;
}

Test_ptr
Test::_duplicate (Test_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  return obj;
}

void
Test::_tao_release (Test_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
Test::_is_a (const char *value)
{
  if (
      ACE_OS::strcmp (
          value,
          "IDL:Test:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        ) == 0
    )
    {
      return true; // success using local knowledge
    }
  else
    {
      return this->::CORBA::Object::_is_a (value);
    }
}

const char* Test::_interface_repository_id (void) const
{
  return "IDL:Test:1.0";
}

::CORBA::Boolean
Test::marshal (TAO_OutputCDR &cdr)
{
  return (cdr << this);
}

// TAO_IDL - Generated from
// be/be_visitor_typecode/objref_typecode.cpp:70

static TAO::TypeCode::Objref<char const *,
                             TAO::Null_RefCount_Policy>
  _tao_tc_Test (
    ::CORBA::tk_objref,
    "IDL:Test:1.0",
    "Test");

::CORBA::TypeCode_ptr const _tc_Test =
  &_tao_tc_Test;

// TAO_IDL - Generated from
// be/be_visitor_exception/cdr_op_cs.cpp:48
TAO_BEGIN_VERSIONED_NAMESPACE_DECL



::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Test::X &_tao_aggregate
  )
{
  // Marshal the repository ID.
  return (strm << _tao_aggregate._rep_id ());
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &,
    Test::X&
  )
{
  return true;
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_exception/cdr_op_cs.cpp:48
TAO_BEGIN_VERSIONED_NAMESPACE_DECL



::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Test::UnknownScenario &_tao_aggregate
  )
{
  // First marshal the repository ID.
  if (strm << _tao_aggregate._rep_id ())
    {
      // Now marshal the members (if any).
      return (
        (strm << _tao_aggregate.scenario)
       );
    }
  else
    {
      return false;
    }
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Test::UnknownScenario &_tao_aggregate
  )
{
  // Demarshal the members.
  return (
    (strm >> _tao_aggregate.scenario)
  );
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_interface/cdr_op_cs.cpp:51

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Test_ptr _tao_objref)
{
  ::CORBA::Object_ptr _tao_corba_obj = _tao_objref;
  return (strm << _tao_corba_obj);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Test_ptr &_tao_objref)
{
  ::CORBA::Object_var obj;

  if (!(strm >> obj.inout ()))
    {
      return false;
    }

  typedef ::Test RHS_SCOPED_NAME;

  // Narrow to the right type.
  _tao_objref =
    TAO::Narrow_Utils<RHS_SCOPED_NAME>::unchecked_narrow (obj.in ());

  return true;
}

TAO_END_VERSIONED_NAMESPACE_DECL



