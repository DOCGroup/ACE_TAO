// -*- C++ -*-
/**
 * Code generated by the The ACE ORB (TAO) IDL Compiler v2.4.1
 * TAO and the TAO IDL Compiler have been developed by:
 *       Center for Distributed Object Computing
 *       Washington University
 *       St. Louis, MO
 *       USA
 *       http://www.cs.wustl.edu/~schmidt/doc-center.html
 * and
 *       Distributed Object Computing Laboratory
 *       University of California at Irvine
 *       Irvine, CA
 *       USA
 * and
 *       Institute for Software Integrated Systems
 *       Vanderbilt University
 *       Nashville, TN
 *       USA
 *       http://www.isis.vanderbilt.edu/
 *
 * Information about TAO is available at:
 *     http://www.dre.vanderbilt.edu/~schmidt/TAO.html
 **/

// TAO_IDL - Generated from
// be/be_codegen.cpp:149

#ifndef _TAO_IDL_TESTC_PCXHVC_H_
#define _TAO_IDL_TESTC_PCXHVC_H_

#include /**/ "ace/pre.h"


#include /**/ "ace/config-all.h"

#if !defined (ACE_LACKS_PRAGMA_ONCE)
# pragma once
#endif /* ACE_LACKS_PRAGMA_ONCE */


#include "tao/AnyTypeCode/AnyTypeCode_methods.h"
#include "tao/AnyTypeCode/Any.h"
#include "tao/ORB.h"
#include "tao/SystemException.h"
#include "tao/UserException.h"
#include "tao/Basic_Types.h"
#include "tao/ORB_Constants.h"
#include "tao/Object.h"
#include "tao/Objref_VarOut_T.h"
#include "tao/VarOut_T.h"
#include "tao/Arg_Traits_T.h"
#include "tao/Basic_Arguments.h"
#include "tao/Special_Basic_Arguments.h"
#include "tao/Any_Insert_Policy_T.h"
#include "tao/Fixed_Size_Argument_T.h"
#include "tao/Var_Size_Argument_T.h"
#include "tao/Object_Argument_T.h"
#include "tao/UB_String_Arguments.h"
#include /**/ "tao/Version.h"
#include /**/ "tao/Versioned_Namespace.h"

#if TAO_MAJOR_VERSION != 2 || TAO_MINOR_VERSION != 4 || TAO_MICRO_VERSION != 1
#error This file should be regenerated with TAO_IDL
#endif

#if defined (TAO_EXPORT_MACRO)
#undef TAO_EXPORT_MACRO
#endif
#define TAO_EXPORT_MACRO

// TAO_IDL - Generated from
// be/be_visitor_root/root_ch.cpp:157
TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<typename T> class Narrow_Utils;
}
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_module/module_ch.cpp:35

namespace Test_Interceptors
{

  // TAO_IDL - Generated from
  // be/be_visitor_exception/exception_ch.cpp:41

  class  Invalid : public ::CORBA::UserException
  {
  public:

    Invalid (void);
    Invalid (const Invalid &);
    ~Invalid (void);

    Invalid &operator= (const Invalid &);

    static void _tao_any_destructor (void *);

    static Invalid *_downcast ( ::CORBA::Exception *);
    static const Invalid *_downcast ( ::CORBA::Exception const *);

    static ::CORBA::Exception *_alloc (void);

    virtual ::CORBA::Exception *_tao_duplicate (void) const;

    virtual void _raise (void) const;

    virtual void _tao_encode (TAO_OutputCDR &cdr) const;
    virtual void _tao_decode (TAO_InputCDR &cdr);

    virtual ::CORBA::TypeCode_ptr _tao_type (void) const;
  };

  // TAO_IDL - Generated from
  // be/be_visitor_typecode/typecode_decl.cpp:34

  extern  ::CORBA::TypeCode_ptr const _tc_Invalid;

  // TAO_IDL - Generated from
  // be/be_interface.cpp:748

#if !defined (_TEST_INTERCEPTORS_SECURE_VAULT__VAR_OUT_CH_)
#define _TEST_INTERCEPTORS_SECURE_VAULT__VAR_OUT_CH_

  class Secure_Vault;
  typedef Secure_Vault *Secure_Vault_ptr;

  typedef
    TAO_Objref_Var_T<
        Secure_Vault
      >
    Secure_Vault_var;

  typedef
    TAO_Objref_Out_T<
        Secure_Vault
      >
    Secure_Vault_out;

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // be/be_visitor_interface/interface_ch.cpp:40

  class  Secure_Vault
    : public virtual ::CORBA::Object
  {
  public:
    friend class TAO::Narrow_Utils<Secure_Vault>;

    // TAO_IDL - Generated from
    // be/be_type.cpp:304

    typedef Secure_Vault_ptr _ptr_type;
    typedef Secure_Vault_var _var_type;
    typedef Secure_Vault_out _out_type;

    static void _tao_any_destructor (void *);

    // The static operations.
    static Secure_Vault_ptr _duplicate (Secure_Vault_ptr obj);

    static void _tao_release (Secure_Vault_ptr obj);

    static Secure_Vault_ptr _narrow (::CORBA::Object_ptr obj);
    static Secure_Vault_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
    static Secure_Vault_ptr _nil (void);

    // TAO_IDL - Generated from
    // be/be_type.cpp:258

    struct Record;

    typedef
      ::TAO_Fixed_Var_T<
          Record
        >
      Record_var;

    typedef
      Record &
      Record_out;

    // TAO_IDL - Generated from
    // be/be_visitor_structure/structure_ch.cpp:48

    struct  Record
    {

      // TAO_IDL - Generated from
      // be/be_type.cpp:304


      typedef Record_var _var_type;
      typedef Record_out _out_type;

      static void _tao_any_destructor (void *);

      ::CORBA::Long check_num;
      ::CORBA::Long amount;
    };

    // TAO_IDL - Generated from
    // be/be_visitor_typecode/typecode_decl.cpp:34

    static ::CORBA::TypeCode_ptr const _tc_Record;

    virtual ::CORBA::Short ready (
      void);

    virtual void authenticate (
      const char * user);

    virtual ::CORBA::Long update_records (
      ::CORBA::Long id,
      const ::Test_Interceptors::Secure_Vault::Record & val);

    virtual void shutdown (
      void);

    // TAO_IDL - Generated from
    // be/be_visitor_interface/interface_ch.cpp:137

    virtual ::CORBA::Boolean _is_a (const char *type_id);
    virtual const char* _interface_repository_id (void) const;
    virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);

  protected:
    // Concrete interface only.
    Secure_Vault (void);

    // Concrete non-local interface only.
    Secure_Vault (
        ::IOP::IOR *ior,
        TAO_ORB_Core *orb_core);

    // Non-local interface only.
    Secure_Vault (
        TAO_Stub *objref,
        ::CORBA::Boolean _tao_collocated = false,
        TAO_Abstract_ServantBase *servant = 0,
        TAO_ORB_Core *orb_core = 0);

    virtual ~Secure_Vault (void);

  private:
    // Private and unimplemented for concrete interfaces.
    Secure_Vault (const Secure_Vault &);

    void operator= (const Secure_Vault &);
  };

  // TAO_IDL - Generated from
  // be/be_visitor_typecode/typecode_decl.cpp:34

  extern  ::CORBA::TypeCode_ptr const _tc_Secure_Vault;

// TAO_IDL - Generated from
// be/be_visitor_module/module_ch.cpp:64

} // module Test_Interceptors

// TAO_IDL - Generated from
// be/be_visitor_arg_traits.cpp:66

TAO_BEGIN_VERSIONED_NAMESPACE_DECL


// Arg traits specializations.
namespace TAO
{

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:145

#if !defined (_TEST_INTERCEPTORS_SECURE_VAULT__ARG_TRAITS_)
#define _TEST_INTERCEPTORS_SECURE_VAULT__ARG_TRAITS_

  template<>
  class  Arg_Traits< ::Test_Interceptors::Secure_Vault>
    : public
        Object_Arg_Traits_T<
            ::Test_Interceptors::Secure_Vault_ptr,
            ::Test_Interceptors::Secure_Vault_var,
            ::Test_Interceptors::Secure_Vault_out,
            TAO::Objref_Traits<Test_Interceptors::Secure_Vault>,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:945

  template<>
  class Arg_Traits< ::Test_Interceptors::Secure_Vault::Record>
    : public
        Fixed_Size_Arg_Traits_T<
            ::Test_Interceptors::Secure_Vault::Record,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_traits.cpp:60

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Traits specializations.
namespace TAO
{

#if !defined (_TEST_INTERCEPTORS_SECURE_VAULT__TRAITS_)
#define _TEST_INTERCEPTORS_SECURE_VAULT__TRAITS_

  template<>
  struct  Objref_Traits< ::Test_Interceptors::Secure_Vault>
  {
    static ::Test_Interceptors::Secure_Vault_ptr duplicate (
        ::Test_Interceptors::Secure_Vault_ptr p);
    static void release (
        ::Test_Interceptors::Secure_Vault_ptr p);
    static ::Test_Interceptors::Secure_Vault_ptr nil (void);
    static ::CORBA::Boolean marshal (
        const ::Test_Interceptors::Secure_Vault_ptr p,
        TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */
}
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_exception/any_op_ch.cpp:38

#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace Test_Interceptors
{


   void operator<<= (::CORBA::Any &, const ::Test_Interceptors::Invalid &); // copying version
   void operator<<= (::CORBA::Any &, ::Test_Interceptors::Invalid*); // noncopying version
   ::CORBA::Boolean operator>>= (const ::CORBA::Any &, ::Test_Interceptors::Invalid *&); // deprecated
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const ::Test_Interceptors::Invalid *&);
}

#else


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



 void operator<<= (::CORBA::Any &, const Test_Interceptors::Invalid &); // copying version
 void operator<<= (::CORBA::Any &, Test_Interceptors::Invalid*); // noncopying version
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, Test_Interceptors::Invalid *&); // deprecated
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const Test_Interceptors::Invalid *&);
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_interface/any_op_ch.cpp:41



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace Test_Interceptors
{
   void operator<<= ( ::CORBA::Any &, Secure_Vault_ptr); // copying
   void operator<<= ( ::CORBA::Any &, Secure_Vault_ptr *); // non-copying
   ::CORBA::Boolean operator>>= (const ::CORBA::Any &, Secure_Vault_ptr &);
}

#else


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 void operator<<= (::CORBA::Any &, Test_Interceptors::Secure_Vault_ptr); // copying
 void operator<<= (::CORBA::Any &, Test_Interceptors::Secure_Vault_ptr *); // non-copying
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, Test_Interceptors::Secure_Vault_ptr &);
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_structure/any_op_ch.cpp:42



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace Test_Interceptors
{
   void operator<<= (::CORBA::Any &, const ::Test_Interceptors::Secure_Vault::Record &); // copying version
   void operator<<= (::CORBA::Any &, ::Test_Interceptors::Secure_Vault::Record*); // noncopying version
   ::CORBA::Boolean operator>>= (const ::CORBA::Any &, ::Test_Interceptors::Secure_Vault::Record *&); // deprecated
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const ::Test_Interceptors::Secure_Vault::Record *&);
}

#else


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 void operator<<= (::CORBA::Any &, const Test_Interceptors::Secure_Vault::Record &); // copying version
 void operator<<= (::CORBA::Any &, Test_Interceptors::Secure_Vault::Record*); // noncopying version
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, Test_Interceptors::Secure_Vault::Record *&); // deprecated
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const Test_Interceptors::Secure_Vault::Record *&);
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_exception/cdr_op_ch.cpp:37
TAO_BEGIN_VERSIONED_NAMESPACE_DECL



 ::CORBA::Boolean operator<< (TAO_OutputCDR &, const Test_Interceptors::Invalid &);
 ::CORBA::Boolean operator>> (TAO_InputCDR &, Test_Interceptors::Invalid &);

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_interface/cdr_op_ch.cpp:41

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 ::CORBA::Boolean operator<< (TAO_OutputCDR &, const Test_Interceptors::Secure_Vault_ptr );
 ::CORBA::Boolean operator>> (TAO_InputCDR &, Test_Interceptors::Secure_Vault_ptr &);

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_structure/cdr_op_ch.cpp:43


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 ::CORBA::Boolean operator<< (TAO_OutputCDR &, const Test_Interceptors::Secure_Vault::Record &);
 ::CORBA::Boolean operator>> (TAO_InputCDR &, Test_Interceptors::Secure_Vault::Record &);

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_codegen.cpp:1700
#if defined (__ACE_INLINE__)
#include "testC.inl"
#endif /* defined INLINE */

#include /**/ "ace/post.h"

#endif /* ifndef */

