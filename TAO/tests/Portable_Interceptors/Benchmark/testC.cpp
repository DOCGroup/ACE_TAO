// -*- C++ -*-
/**
 * Code generated by the The ACE ORB (TAO) IDL Compiler v2.4.1
 * TAO and the TAO IDL Compiler have been developed by:
 *       Center for Distributed Object Computing
 *       Washington University
 *       St. Louis, MO
 *       USA
 *       http://www.cs.wustl.edu/~schmidt/doc-center.html
 * and
 *       Distributed Object Computing Laboratory
 *       University of California at Irvine
 *       Irvine, CA
 *       USA
 * and
 *       Institute for Software Integrated Systems
 *       Vanderbilt University
 *       Nashville, TN
 *       USA
 *       http://www.isis.vanderbilt.edu/
 *
 * Information about TAO is available at:
 *     http://www.dre.vanderbilt.edu/~schmidt/TAO.html
 **/

// TAO_IDL - Generated from
// be/be_codegen.cpp:373


#include "testC.h"
#include "tao/AnyTypeCode/Null_RefCount_Policy.h"
#include "tao/AnyTypeCode/TypeCode_Constants.h"
#include "tao/AnyTypeCode/Alias_TypeCode_Static.h"
#include "tao/AnyTypeCode/Objref_TypeCode_Static.h"
#include "tao/AnyTypeCode/String_TypeCode_Static.h"
#include "tao/AnyTypeCode/Struct_TypeCode_Static.h"
#include "tao/AnyTypeCode/TypeCode_Struct_Field.h"
#include "tao/CDR.h"
#include "tao/Exception_Data.h"
#include "tao/Invocation_Adapter.h"
#include "tao/Object_T.h"
#include "tao/SystemException.h"
#include "tao/CDR.h"
#include "tao/AnyTypeCode/Any.h"
#include "tao/AnyTypeCode/Any_Impl_T.h"
#include "tao/AnyTypeCode/Any_Dual_Impl_T.h"
#include "ace/OS_NS_string.h"

#if !defined (__ACE_INLINE__)
#include "testC.inl"
#endif /* !defined INLINE */

// TAO_IDL - Generated from
// be/be_visitor_exception/exception_cs.cpp:98

Test_Interceptors::Invalid::Invalid (void)
  : ::CORBA::UserException (
        "IDL:Test_Interceptors/Invalid:1.0",
        "Invalid"
      )
{
}

Test_Interceptors::Invalid::~Invalid (void)
{
}

Test_Interceptors::Invalid::Invalid (const ::Test_Interceptors::Invalid &_tao_excp)
  : ::CORBA::UserException (
        _tao_excp._rep_id (),
        _tao_excp._name ()
      )
{
}

Test_Interceptors::Invalid&
Test_Interceptors::Invalid::operator= (const ::Test_Interceptors::Invalid &_tao_excp)
{
  this->::CORBA::UserException::operator= (_tao_excp);
  return *this;
}

void Test_Interceptors::Invalid::_tao_any_destructor (void *_tao_void_pointer)
{
  Invalid *_tao_tmp_pointer =
    static_cast<Invalid *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

Test_Interceptors::Invalid *
Test_Interceptors::Invalid::_downcast ( ::CORBA::Exception *_tao_excp)
{
  return dynamic_cast<Invalid *> (_tao_excp);
}

const Test_Interceptors::Invalid *
Test_Interceptors::Invalid::_downcast ( ::CORBA::Exception const *_tao_excp)
{
  return dynamic_cast<const Invalid *> (_tao_excp);
}

::CORBA::Exception *Test_Interceptors::Invalid::_alloc (void)
{
  ::CORBA::Exception *retval = 0;
  ACE_NEW_RETURN (retval, ::Test_Interceptors::Invalid, 0);
  return retval;
}

::CORBA::Exception *
Test_Interceptors::Invalid::_tao_duplicate (void) const
{
  ::CORBA::Exception *result = 0;
  ACE_NEW_RETURN (
      result,
      ::Test_Interceptors::Invalid (*this),
      0
    );
  return result;
}

void Test_Interceptors::Invalid::_raise (void) const
{
  throw *this;
}

void Test_Interceptors::Invalid::_tao_encode (TAO_OutputCDR &cdr) const
{
  if (!(cdr << *this))
    {
      throw ::CORBA::MARSHAL ();
    }
}

void Test_Interceptors::Invalid::_tao_decode (TAO_InputCDR &cdr)
{
  if (!(cdr >> *this))
    {
      throw ::CORBA::MARSHAL ();
    }
}

// TAO extension - the virtual _type method.
::CORBA::TypeCode_ptr Test_Interceptors::Invalid::_tao_type (void) const
{
  return ::Test_Interceptors::_tc_Invalid;
}

// TAO_IDL - Generated from
// be/be_visitor_typecode/struct_typecode.cpp:86

static TAO::TypeCode::Struct_Field<
  char const *,
  ::CORBA::TypeCode_ptr const *> const * const 
    _tao_fields_Test_Interceptors_Invalid = 0;
  
static TAO::TypeCode::Struct<
  char const *,
  ::CORBA::TypeCode_ptr const *,
  TAO::TypeCode::Struct_Field<
    char const *,
    ::CORBA::TypeCode_ptr const *> const *,
  TAO::Null_RefCount_Policy>
_tao_tc_Test_Interceptors_Invalid (
  ::CORBA::tk_except,
  "IDL:Test_Interceptors/Invalid:1.0",
  "Invalid",
  _tao_fields_Test_Interceptors_Invalid,
  0);


namespace Test_Interceptors
{
  ::CORBA::TypeCode_ptr const _tc_Invalid =
    &_tao_tc_Test_Interceptors_Invalid;
}

// TAO_IDL - Generated from
// be/be_visitor_interface/interface_cs.cpp:48

// Traits specializations for Test_Interceptors::Secure_Vault.

Test_Interceptors::Secure_Vault_ptr
TAO::Objref_Traits<Test_Interceptors::Secure_Vault>::duplicate (
    Test_Interceptors::Secure_Vault_ptr p)
{
  return Test_Interceptors::Secure_Vault::_duplicate (p);
}

void
TAO::Objref_Traits<Test_Interceptors::Secure_Vault>::release (
    Test_Interceptors::Secure_Vault_ptr p)
{
  ::CORBA::release (p);
}

Test_Interceptors::Secure_Vault_ptr
TAO::Objref_Traits<Test_Interceptors::Secure_Vault>::nil (void)
{
  return Test_Interceptors::Secure_Vault::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<Test_Interceptors::Secure_Vault>::marshal (
    const Test_Interceptors::Secure_Vault_ptr p,
    TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

// TAO_IDL - Generated from
// be/be_visitor_typecode/struct_typecode.cpp:86

static TAO::TypeCode::Struct_Field<
  char const *,
  ::CORBA::TypeCode_ptr const *> const 
    _tao_fields_Test_Interceptors_Secure_Vault_Record[] =
      {
        { "check_num", &CORBA::_tc_long },
        { "amount", &CORBA::_tc_long }
      };
  
static TAO::TypeCode::Struct<
  char const *,
  ::CORBA::TypeCode_ptr const *,
  TAO::TypeCode::Struct_Field<
    char const *,
    ::CORBA::TypeCode_ptr const *> const *,
  TAO::Null_RefCount_Policy>
_tao_tc_Test_Interceptors_Secure_Vault_Record (
  ::CORBA::tk_struct,
  "IDL:Test_Interceptors/Secure_Vault/Record:1.0",
  "Record",
  _tao_fields_Test_Interceptors_Secure_Vault_Record,
  2);

::CORBA::TypeCode_ptr const Test_Interceptors::Secure_Vault::_tc_Record =
  &_tao_tc_Test_Interceptors_Secure_Vault_Record;

// TAO_IDL - Generated from
// be/be_visitor_structure/structure_cs.cpp:56

void
Test_Interceptors::Secure_Vault::Record::_tao_any_destructor (
    void *_tao_void_pointer)
{
  Record *_tao_tmp_pointer =
    static_cast<Record *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:88

::CORBA::Short
Test_Interceptors::Secure_Vault::ready (
  void)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  TAO::Arg_Traits< ::CORBA::Short>::ret_val _tao_retval;

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      1,
      "ready",
      5,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY,
      TAO::TAO_TWOWAY_INVOCATION
      ,
      TAO::TAO_SYNCHRONOUS_INVOCATION,
      false
    );

  _tao_call.invoke (0, 0);

  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:88

void
Test_Interceptors::Secure_Vault::authenticate (
  const char * user)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  TAO::Arg_Traits< void>::ret_val _tao_retval;
  TAO::Arg_Traits< char *>::in_arg_val _tao_user (user);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_user
    };

  static TAO::Exception_Data
  _tao_Test_Interceptors_Secure_Vault_authenticate_exceptiondata [] = 
    {
      {
        "IDL:Test_Interceptors/Invalid:1.0",
        Test_Interceptors::Invalid::_alloc
#if TAO_HAS_INTERCEPTORS == 1
        , Test_Interceptors::_tc_Invalid
#endif /* TAO_HAS_INTERCEPTORS */
      }
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      2,
      "authenticate",
      12,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY
      
    );

  _tao_call.invoke (
      _tao_Test_Interceptors_Secure_Vault_authenticate_exceptiondata,
      1
    );
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:88

::CORBA::Long
Test_Interceptors::Secure_Vault::update_records (
  ::CORBA::Long id,
  const ::Test_Interceptors::Secure_Vault::Record & val)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  TAO::Arg_Traits< ::CORBA::Long>::ret_val _tao_retval;
  TAO::Arg_Traits< ::CORBA::Long>::in_arg_val _tao_id (id);
  TAO::Arg_Traits< ::Test_Interceptors::Secure_Vault::Record>::in_arg_val _tao_val (val);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_id,
      &_tao_val
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      3,
      "update_records",
      14,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY
      
    );

  _tao_call.invoke (0, 0);

  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:88

void
Test_Interceptors::Secure_Vault::shutdown (
  void)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  TAO::Arg_Traits< void>::ret_val _tao_retval;

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      1,
      "shutdown",
      8,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY,
      TAO::TAO_ONEWAY_INVOCATION,
      TAO::TAO_SYNCHRONOUS_INVOCATION,
      false
    );

  _tao_call.invoke (0, 0);
}

Test_Interceptors::Secure_Vault::Secure_Vault (void)
{
}

Test_Interceptors::Secure_Vault::~Secure_Vault (void)
{
}

void
Test_Interceptors::Secure_Vault::_tao_any_destructor (void *_tao_void_pointer)
{
  Secure_Vault *_tao_tmp_pointer =
    static_cast<Secure_Vault *> (_tao_void_pointer);
  ::CORBA::release (_tao_tmp_pointer);
}

Test_Interceptors::Secure_Vault_ptr
Test_Interceptors::Secure_Vault::_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return
    TAO::Narrow_Utils<Secure_Vault>::narrow (
        _tao_objref,
        "IDL:Test_Interceptors/Secure_Vault:1.0");
}

Test_Interceptors::Secure_Vault_ptr
Test_Interceptors::Secure_Vault::_unchecked_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return
    TAO::Narrow_Utils<Secure_Vault>::unchecked_narrow (
        _tao_objref);
}

Test_Interceptors::Secure_Vault_ptr
Test_Interceptors::Secure_Vault::_nil (void)
{
  return 0;
}

Test_Interceptors::Secure_Vault_ptr
Test_Interceptors::Secure_Vault::_duplicate (Secure_Vault_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  return obj;
}

void
Test_Interceptors::Secure_Vault::_tao_release (Secure_Vault_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
Test_Interceptors::Secure_Vault::_is_a (const char *value)
{
  if (
      ACE_OS::strcmp (
          value,
          "IDL:Test_Interceptors/Secure_Vault:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        ) == 0
    )
    {
      return true; // success using local knowledge
    }
  else
    {
      return this->::CORBA::Object::_is_a (value);
    }
}

const char* Test_Interceptors::Secure_Vault::_interface_repository_id (void) const
{
  return "IDL:Test_Interceptors/Secure_Vault:1.0";
}

::CORBA::Boolean
Test_Interceptors::Secure_Vault::marshal (TAO_OutputCDR &cdr)
{
  return (cdr << this);
}

// TAO_IDL - Generated from
// be/be_visitor_typecode/objref_typecode.cpp:70

static TAO::TypeCode::Objref<char const *,
                             TAO::Null_RefCount_Policy>
  _tao_tc_Test_Interceptors_Secure_Vault (
    ::CORBA::tk_objref,
    "IDL:Test_Interceptors/Secure_Vault:1.0",
    "Secure_Vault");
  

namespace Test_Interceptors
{
  ::CORBA::TypeCode_ptr const _tc_Secure_Vault =
    &_tao_tc_Test_Interceptors_Secure_Vault;
}

// TAO_IDL - Generated from
// be/be_visitor_exception/any_op_cs.cpp:38
TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Dual_Impl_T<Test_Interceptors::Invalid>::demarshal_value (TAO_InputCDR & cdr)
  {
    ::CORBA::String_var id;

    if (!(cdr >> id.out ()))
      {
        return false;
      }
    
    try
      {
        this->value_->_tao_decode (cdr);
      }
    catch (const ::CORBA::Exception &)
      {
        return false;
      }

    return true;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace Test_Interceptors
{
  

  // Copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      const ::Test_Interceptors::Invalid &_tao_elem)
  {
    TAO::Any_Dual_Impl_T< ::Test_Interceptors::Invalid>::insert_copy (
        _tao_any,
        ::Test_Interceptors::Invalid::_tao_any_destructor,
        ::Test_Interceptors::_tc_Invalid,
        _tao_elem);
  }

  // Non-copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      ::Test_Interceptors::Invalid *_tao_elem)
  {
    TAO::Any_Dual_Impl_T< ::Test_Interceptors::Invalid>::insert (
        _tao_any,
        ::Test_Interceptors::Invalid::_tao_any_destructor,
        ::Test_Interceptors::_tc_Invalid,
        _tao_elem);
  }

  // Extraction to non-const pointer (deprecated).
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      ::Test_Interceptors::Invalid *&_tao_elem)
  {
    return _tao_any >>= const_cast<
        const ::Test_Interceptors::Invalid *&> (
        _tao_elem);
  }

  // Extraction to const pointer.
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      const ::Test_Interceptors::Invalid *&_tao_elem)
  {
    return
      TAO::Any_Dual_Impl_T< ::Test_Interceptors::Invalid>::extract (
          _tao_any,
          ::Test_Interceptors::Invalid::_tao_any_destructor,
          ::Test_Interceptors::_tc_Invalid,
          _tao_elem);
  }
}

#else

TAO_BEGIN_VERSIONED_NAMESPACE_DECL



// Copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    const Test_Interceptors::Invalid &_tao_elem)
{
  TAO::Any_Dual_Impl_T<Test_Interceptors::Invalid>::insert_copy (
      _tao_any,
      Test_Interceptors::Invalid::_tao_any_destructor,
      Test_Interceptors::_tc_Invalid,
      _tao_elem
    );
}

// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    Test_Interceptors::Invalid *_tao_elem)
{
  TAO::Any_Dual_Impl_T<Test_Interceptors::Invalid>::insert (
      _tao_any,
      Test_Interceptors::Invalid::_tao_any_destructor,
      Test_Interceptors::_tc_Invalid,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    Test_Interceptors::Invalid *&_tao_elem)
{
  return _tao_any >>= const_cast<
      const Test_Interceptors::Invalid *&> (
      _tao_elem);
}

// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const Test_Interceptors::Invalid *&_tao_elem
  )
{
  return
    TAO::Any_Dual_Impl_T<Test_Interceptors::Invalid>::extract (
        _tao_any,
        Test_Interceptors::Invalid::_tao_any_destructor,
        Test_Interceptors::_tc_Invalid,
        _tao_elem);
}
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_interface/any_op_cs.cpp:38
TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<Test_Interceptors::Secure_Vault>::to_object (
      ::CORBA::Object_ptr &_tao_elem) const
  {
    _tao_elem = ::CORBA::Object::_duplicate (this->value_);
    return true;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace Test_Interceptors
{
  

  /// Copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      Secure_Vault_ptr _tao_elem)
  {
    Secure_Vault_ptr _tao_objptr =
      Secure_Vault::_duplicate (_tao_elem);
    _tao_any <<= &_tao_objptr;
  }

  /// Non-copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      Secure_Vault_ptr *_tao_elem)
  {
    TAO::Any_Impl_T<Secure_Vault>::insert (
        _tao_any,
        Secure_Vault::_tao_any_destructor,
        _tc_Secure_Vault,
        *_tao_elem);
  }

  ::CORBA::Boolean
  operator>>= (
      const ::CORBA::Any &_tao_any,
      Secure_Vault_ptr &_tao_elem)
  {
    return
      TAO::Any_Impl_T<Secure_Vault>::extract (
          _tao_any,
          Secure_Vault::_tao_any_destructor,
          _tc_Secure_Vault,
          _tao_elem);
  }
}

#else

TAO_BEGIN_VERSIONED_NAMESPACE_DECL



/// Copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    Test_Interceptors::Secure_Vault_ptr _tao_elem)
{
  Test_Interceptors::Secure_Vault_ptr _tao_objptr =
    Test_Interceptors::Secure_Vault::_duplicate (_tao_elem);
  _tao_any <<= &_tao_objptr;
}

/// Non-copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    Test_Interceptors::Secure_Vault_ptr *_tao_elem)
{
  TAO::Any_Impl_T<Test_Interceptors::Secure_Vault>::insert (
      _tao_any,
      Test_Interceptors::Secure_Vault::_tao_any_destructor,
      Test_Interceptors::_tc_Secure_Vault,
      *_tao_elem);
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    Test_Interceptors::Secure_Vault_ptr &_tao_elem)
{
  return
    TAO::Any_Impl_T<Test_Interceptors::Secure_Vault>::extract (
        _tao_any,
        Test_Interceptors::Secure_Vault::_tao_any_destructor,
        Test_Interceptors::_tc_Secure_Vault,
        _tao_elem);
}

TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_structure/any_op_cs.cpp:43



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace Test_Interceptors
{
  /// Copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      const ::Test_Interceptors::Secure_Vault::Record &_tao_elem)
  {
    TAO::Any_Dual_Impl_T< ::Test_Interceptors::Secure_Vault::Record>::insert_copy (
        _tao_any,
        ::Test_Interceptors::Secure_Vault::Record::_tao_any_destructor,
        ::Test_Interceptors::Secure_Vault::_tc_Record,
        _tao_elem);
}

/// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any, ::
    Test_Interceptors::Secure_Vault::Record *_tao_elem)
{
  TAO::Any_Dual_Impl_T< ::Test_Interceptors::Secure_Vault::Record>::insert (
      _tao_any,
      ::Test_Interceptors::Secure_Vault::Record::_tao_any_destructor,
      ::Test_Interceptors::Secure_Vault::_tc_Record,
      _tao_elem);
}

/// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    ::Test_Interceptors::Secure_Vault::Record *&_tao_elem)
{
  return _tao_any >>= const_cast<
      const ::Test_Interceptors::Secure_Vault::Record *&> (
      _tao_elem);
}

/// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const ::Test_Interceptors::Secure_Vault::Record *&_tao_elem)
{
  return
    TAO::Any_Dual_Impl_T< ::Test_Interceptors::Secure_Vault::Record>::extract (
        _tao_any,
        ::Test_Interceptors::Secure_Vault::Record::_tao_any_destructor,
        ::Test_Interceptors::Secure_Vault::_tc_Record,
        _tao_elem
      );
}
}

#else

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

/// Copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  const Test_Interceptors::Secure_Vault::Record &_tao_elem)
{
  TAO::Any_Dual_Impl_T<Test_Interceptors::Secure_Vault::Record>::insert_copy (
    _tao_any,
    Test_Interceptors::Secure_Vault::Record::_tao_any_destructor,
    Test_Interceptors::Secure_Vault::_tc_Record,
    _tao_elem);
}

/// Non-copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  Test_Interceptors::Secure_Vault::Record *_tao_elem)
{
  TAO::Any_Dual_Impl_T<Test_Interceptors::Secure_Vault::Record>::insert (
    _tao_any,
    Test_Interceptors::Secure_Vault::Record::_tao_any_destructor,
    Test_Interceptors::Secure_Vault::_tc_Record,
    _tao_elem);
}

/// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
  const ::CORBA::Any &_tao_any,
  Test_Interceptors::Secure_Vault::Record *&_tao_elem)
{
  return _tao_any >>= const_cast<
      const Test_Interceptors::Secure_Vault::Record *&> (
      _tao_elem);
}

/// Extraction to const pointer.
::CORBA::Boolean operator>>= (
  const ::CORBA::Any &_tao_any,
  const Test_Interceptors::Secure_Vault::Record *&_tao_elem)
{
  return
    TAO::Any_Dual_Impl_T<Test_Interceptors::Secure_Vault::Record>::extract (
      _tao_any,
      Test_Interceptors::Secure_Vault::Record::_tao_any_destructor,
      Test_Interceptors::Secure_Vault::_tc_Record,
      _tao_elem);
}
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_exception/cdr_op_cs.cpp:48
TAO_BEGIN_VERSIONED_NAMESPACE_DECL



::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Test_Interceptors::Invalid &_tao_aggregate
  )
{
  // Marshal the repository ID.
  return (strm << _tao_aggregate._rep_id ());
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &,
    Test_Interceptors::Invalid&
  )
{
  return true;
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_structure/cdr_op_cs.cpp:49

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Test_Interceptors::Secure_Vault::Record &_tao_aggregate)
{
  return
    (strm << _tao_aggregate.check_num) &&
    (strm << _tao_aggregate.amount);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Test_Interceptors::Secure_Vault::Record &_tao_aggregate)
{
  return
    (strm >> _tao_aggregate.check_num) &&
    (strm >> _tao_aggregate.amount);
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_interface/cdr_op_cs.cpp:51

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Test_Interceptors::Secure_Vault_ptr _tao_objref)
{
  ::CORBA::Object_ptr _tao_corba_obj = _tao_objref;
  return (strm << _tao_corba_obj);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Test_Interceptors::Secure_Vault_ptr &_tao_objref)
{
  ::CORBA::Object_var obj;

  if (!(strm >> obj.inout ()))
    {
      return false;
    }
  
  typedef ::Test_Interceptors::Secure_Vault RHS_SCOPED_NAME;

  // Narrow to the right type.
  _tao_objref =
    TAO::Narrow_Utils<RHS_SCOPED_NAME>::unchecked_narrow (obj.in ());
    
  return true;
}

TAO_END_VERSIONED_NAMESPACE_DECL



