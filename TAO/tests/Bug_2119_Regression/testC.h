// -*- C++ -*-
/**
 * Code generated by the The ACE ORB (TAO) IDL Compiler v2.4.1
 * TAO and the TAO IDL Compiler have been developed by:
 *       Center for Distributed Object Computing
 *       Washington University
 *       St. Louis, MO
 *       USA
 *       http://www.cs.wustl.edu/~schmidt/doc-center.html
 * and
 *       Distributed Object Computing Laboratory
 *       University of California at Irvine
 *       Irvine, CA
 *       USA
 * and
 *       Institute for Software Integrated Systems
 *       Vanderbilt University
 *       Nashville, TN
 *       USA
 *       http://www.isis.vanderbilt.edu/
 *
 * Information about TAO is available at:
 *     http://www.dre.vanderbilt.edu/~schmidt/TAO.html
 **/

// TAO_IDL - Generated from
// be/be_codegen.cpp:149

#ifndef _TAO_IDL_TESTC_N5BHQM_H_
#define _TAO_IDL_TESTC_N5BHQM_H_

#include /**/ "ace/pre.h"


#include /**/ "ace/config-all.h"

#if !defined (ACE_LACKS_PRAGMA_ONCE)
# pragma once
#endif /* ACE_LACKS_PRAGMA_ONCE */


#include "tao/AnyTypeCode/AnyTypeCode_methods.h"
#include "tao/AnyTypeCode/Any.h"
#include "tao/Valuetype/ValueBase.h"
#include "tao/Valuetype/Valuetype_Adapter_Factory_Impl.h"
#include "tao/Valuetype/ValueFactory.h"
#include "tao/ORB.h"
#include "tao/SystemException.h"
#include "tao/Basic_Types.h"
#include "tao/ORB_Constants.h"
#include "tao/Valuetype/Sequence_T.h"
#include "tao/Sequence_T.h"
#include "tao/Valuetype/Value_VarOut_T.h"
#include "tao/Seq_Var_T.h"
#include "tao/Seq_Out_T.h"
#include "tao/Arg_Traits_T.h"
#include "tao/Basic_Arguments.h"
#include "tao/Special_Basic_Arguments.h"
#include "tao/Any_Insert_Policy_T.h"
#include "tao/Fixed_Size_Argument_T.h"
#include "tao/Var_Size_Argument_T.h"
#include "tao/Object_Argument_T.h"
#include /**/ "tao/Version.h"
#include /**/ "tao/Versioned_Namespace.h"

#if TAO_MAJOR_VERSION != 2 || TAO_MINOR_VERSION != 4 || TAO_MICRO_VERSION != 1
#error This file should be regenerated with TAO_IDL
#endif

#if defined (TAO_EXPORT_MACRO)
#undef TAO_EXPORT_MACRO
#endif
#define TAO_EXPORT_MACRO 

// TAO_IDL - Generated from
// be/be_valuetype.cpp:564



#if !defined (_MYVALUETYPE__VAR_OUT_CH_)
#define _MYVALUETYPE__VAR_OUT_CH_

class MyValueType;
typedef
  TAO_Value_Var_T<
      MyValueType
    >
  MyValueType_var;

typedef
  TAO_Value_Out_T<
      MyValueType
    >
  MyValueType_out;

#endif /* end #if !defined */

// TAO_IDL - Generated from
// be/be_visitor_sequence/sequence_ch.cpp:99

#if !defined (_MYVALUETYPE_SEQ_CH_)
#define _MYVALUETYPE_SEQ_CH_

class MyValueType_Seq;

typedef
  ::TAO_VarSeq_Var_T<
      MyValueType_Seq
    >
  MyValueType_Seq_var;

typedef
  ::TAO_Seq_Out_T<
      MyValueType_Seq
    >
  MyValueType_Seq_out;

class  MyValueType_Seq
  : public
      ::TAO::unbounded_valuetype_sequence<
          MyValueType,
          MyValueType_var
        >
{
public:
  MyValueType_Seq (void);
  MyValueType_Seq ( ::CORBA::ULong max);
  MyValueType_Seq (
    ::CORBA::ULong max,
    ::CORBA::ULong length,
    MyValueType ** buffer,
    ::CORBA::Boolean release = false);
  MyValueType_Seq (const MyValueType_Seq &);
  virtual ~MyValueType_Seq (void);
  

  // TAO_IDL - Generated from
  // be/be_type.cpp:304

  
  typedef MyValueType_Seq_var _var_type;
  typedef MyValueType_Seq_out _out_type;

  static void _tao_any_destructor (void *);
};

#endif /* end #if !defined */

// TAO_IDL - Generated from
// be/be_visitor_typecode/typecode_decl.cpp:34

extern  ::CORBA::TypeCode_ptr const _tc_MyValueType_Seq;

// TAO_IDL - Generated from
// be/be_visitor_valuetype/valuetype_ch.cpp:50

class  MyValueType
  : public virtual ::CORBA::ValueBase
{
public:

  // TAO_IDL - Generated from
  // be/be_type.cpp:304

  typedef MyValueType * _ptr_type;
  typedef MyValueType_var _var_type;
  typedef MyValueType_out _out_type;

  static void _tao_any_destructor (void *);

  static MyValueType* _downcast ( ::CORBA::ValueBase *v);
  
  /// TAO extensions or internals
  static ::CORBA::Boolean _tao_unmarshal (
      TAO_InputCDR &strm,
      MyValueType *&new_object);
  
  virtual const char* _tao_obv_repository_id (void) const;

  virtual void _tao_obv_truncatable_repo_ids (Repository_Id_List &) const;

  static const char* _tao_obv_static_repository_id (void);

  virtual ::CORBA::TypeCode_ptr _tao_type (void) const;

protected:

  // TAO_IDL - Generated from
  // be/be_visitor_valuetype/field_ch.cpp:533

  virtual void myValueTypes (const MyValueType_Seq &) = 0;
  virtual const MyValueType_Seq &myValueTypes (void) const = 0;
  virtual MyValueType_Seq &myValueTypes (void) = 0;

  // TAO_IDL - Generated from
  // be/be_visitor_valuetype/valuetype_ch.cpp:238

protected:
  MyValueType (void);
  virtual ~MyValueType (void);

  virtual ::CORBA::Boolean _tao_marshal_v (TAO_OutputCDR &) const;
  virtual ::CORBA::Boolean _tao_unmarshal_v (TAO_InputCDR &);
  virtual ::CORBA::Boolean _tao_match_formal_type (ptrdiff_t ) const;
  
private:
  MyValueType (const MyValueType &);
  void operator= (const MyValueType &);
  
protected:
  virtual ::CORBA::Boolean
  _tao_marshal__MyValueType (TAO_OutputCDR &, TAO_ChunkInfo &) const = 0;

  virtual ::CORBA::Boolean
  _tao_unmarshal__MyValueType (TAO_InputCDR &, TAO_ChunkInfo &) = 0;
};

// TAO_IDL - Generated from
// be/be_visitor_valuetype/valuetype_init_ch.cpp:57

class  MyValueType_init
  : public virtual ::CORBA::ValueFactoryBase
{
public:
  MyValueType_init (void);

  static MyValueType_init* _downcast ( ::CORBA::ValueFactoryBase *);

  virtual ::CORBA::ValueBase *
  create_for_unmarshal (void);

  // TAO-specific extensions
public:
  virtual const char* tao_repository_id (void);

protected:
  virtual ~MyValueType_init (void);
};

// TAO_IDL - Generated from
// be/be_visitor_typecode/typecode_decl.cpp:34

extern  ::CORBA::TypeCode_ptr const _tc_MyValueType;

// TAO_IDL - Generated from
// be/be_visitor_arg_traits.cpp:66

TAO_BEGIN_VERSIONED_NAMESPACE_DECL


// Arg traits specializations.
namespace TAO
{

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:306

#if !defined (_MYVALUETYPE__ARG_TRAITS_)
#define _MYVALUETYPE__ARG_TRAITS_

  template<>
  class Arg_Traits< ::MyValueType>
    : public
        Object_Arg_Traits_T<
            ::MyValueType *,
            ::MyValueType_var,
            ::MyValueType_out,
            TAO::Value_Traits<MyValueType>,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:683

  template<>
  class Arg_Traits< ::MyValueType_Seq>
    : public
        Var_Size_Arg_Traits_T<
            ::MyValueType_Seq,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_valuetype/valuetype_obv_ch.cpp:44

// OBV_ class
class  OBV_MyValueType
  : public virtual MyValueType,
    public virtual ::CORBA::DefaultValueRefCountBase
{

protected:

  // TAO_IDL - Generated from
  // be/be_visitor_valuetype/field_ch.cpp:533

  virtual void myValueTypes (const MyValueType_Seq &);
  virtual const MyValueType_Seq &myValueTypes (void) const;
  virtual MyValueType_Seq &myValueTypes (void);

public:
  OBV_MyValueType (void);
  OBV_MyValueType (
      const ::MyValueType_Seq & _tao_init_myValueTypes
    );
  virtual ~OBV_MyValueType (void);

public:
  virtual ::CORBA::ValueBase *_copy_value (void);
  
protected:
  virtual ::CORBA::Boolean
  _tao_marshal__MyValueType (TAO_OutputCDR &, TAO_ChunkInfo &) const;

  virtual ::CORBA::Boolean
  _tao_unmarshal__MyValueType (TAO_InputCDR &, TAO_ChunkInfo &);

  ::CORBA::Boolean _tao_marshal_state (TAO_OutputCDR &, TAO_ChunkInfo &) const;
  ::CORBA::Boolean _tao_unmarshal_state (TAO_InputCDR &, TAO_ChunkInfo &);
  virtual void truncation_hook (void);

private:
  MyValueType_Seq _pd_myValueTypes;
  CORBA::Boolean require_truncation_;
};

// TAO_IDL - Generated from
// be/be_visitor_traits.cpp:60

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Traits specializations.
namespace TAO
{

#if !defined (_MYVALUETYPE__TRAITS_)
#define _MYVALUETYPE__TRAITS_

  template<>
  struct  Value_Traits<MyValueType>
  {
    static void add_ref (MyValueType *);
    static void remove_ref (MyValueType *);
    static void release (MyValueType *);
  };

#endif /* end #if !defined */
}
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_sequence/any_op_ch.cpp:47


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 void operator<<= ( ::CORBA::Any &, const MyValueType_Seq &); // copying version
 void operator<<= ( ::CORBA::Any &, MyValueType_Seq*); // noncopying version
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, MyValueType_Seq *&); // deprecated
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const MyValueType_Seq *&);
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_valuetype/any_op_ch.cpp:43


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 void operator<<= (::CORBA::Any &, MyValueType *); // copying
 void operator<<= (::CORBA::Any &, MyValueType **); // non-copying
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, MyValueType *&);
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_sequence/cdr_op_ch.cpp:65

#if !defined _TAO_CDR_OP_MyValueType_Seq_H_
#define _TAO_CDR_OP_MyValueType_Seq_H_
TAO_BEGIN_VERSIONED_NAMESPACE_DECL


 ::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const MyValueType_Seq &_tao_sequence);
 ::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    MyValueType_Seq &_tao_sequence);

TAO_END_VERSIONED_NAMESPACE_DECL



#endif /* _TAO_CDR_OP_MyValueType_Seq_H_ */

// TAO_IDL - Generated from
// be/be_valuetype.cpp:456


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

namespace CORBA
{
  extern  void add_ref (MyValueType *);
  extern  void remove_ref (MyValueType *);
}
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_valuetype/cdr_op_ch.cpp:49


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 ::CORBA::Boolean operator<< (TAO_OutputCDR &, const MyValueType *);
 ::CORBA::Boolean operator>> (TAO_InputCDR &, MyValueType *&);

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_codegen.cpp:1700
#if defined (__ACE_INLINE__)
#include "testC.inl"
#endif /* defined INLINE */

#include /**/ "ace/post.h"

#endif /* ifndef */

