// -*- C++ -*-
/**
 * Code generated by the The ACE ORB (TAO) IDL Compiler v2.4.1
 * TAO and the TAO IDL Compiler have been developed by:
 *       Center for Distributed Object Computing
 *       Washington University
 *       St. Louis, MO
 *       USA
 *       http://www.cs.wustl.edu/~schmidt/doc-center.html
 * and
 *       Distributed Object Computing Laboratory
 *       University of California at Irvine
 *       Irvine, CA
 *       USA
 * and
 *       Institute for Software Integrated Systems
 *       Vanderbilt University
 *       Nashville, TN
 *       USA
 *       http://www.isis.vanderbilt.edu/
 *
 * Information about TAO is available at:
 *     http://www.dre.vanderbilt.edu/~schmidt/TAO.html
 **/

// TAO_IDL - Generated from
// be/be_codegen.cpp:373


#include "testC.h"
#include "tao/AnyTypeCode/Null_RefCount_Policy.h"
#include "tao/AnyTypeCode/TypeCode_Constants.h"
#include "tao/AnyTypeCode/Alias_TypeCode_Static.h"
#include "tao/AnyTypeCode/Sequence_TypeCode_Static.h"
#include "tao/AnyTypeCode/Value_TypeCode_Static.h"
#include "tao/AnyTypeCode/TypeCode_Value_Field.h"
#include "tao/AnyTypeCode/Recursive_Type_TypeCode.h"
#include "tao/CDR.h"
#include "tao/CDR.h"
#include "tao/AnyTypeCode/Any.h"
#include "tao/AnyTypeCode/Any_Impl_T.h"
#include "tao/AnyTypeCode/Any_Dual_Impl_T.h"

#if !defined (__ACE_INLINE__)
#include "testC.inl"
#endif /* !defined INLINE */

// TAO_IDL - Generated from
// be/be_visitor_sequence/sequence_cs.cpp:70

#if !defined (_MYVALUETYPE_SEQ_CS_)
#define _MYVALUETYPE_SEQ_CS_

MyValueType_Seq::MyValueType_Seq (void)
{}

MyValueType_Seq::MyValueType_Seq (
    ::CORBA::ULong max)
  : ::TAO::unbounded_valuetype_sequence<
        MyValueType,
        MyValueType_var
      > (max)
{}

MyValueType_Seq::MyValueType_Seq (
    ::CORBA::ULong max,
    ::CORBA::ULong length,
    MyValueType * * buffer,
    ::CORBA::Boolean release
  )
  : ::TAO::unbounded_valuetype_sequence<
        MyValueType,
        MyValueType_var
      >
    (max, length, buffer, release)
{}

MyValueType_Seq::MyValueType_Seq (
    const MyValueType_Seq &seq)
  : ::TAO::unbounded_valuetype_sequence<
        MyValueType,
        MyValueType_var
      > (seq)
{}

MyValueType_Seq::~MyValueType_Seq (void)
{}

void MyValueType_Seq::_tao_any_destructor (
    void * _tao_void_pointer)
{
  MyValueType_Seq * _tao_tmp_pointer =
    static_cast<MyValueType_Seq *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

#endif /* end #if !defined */

// TAO_IDL - Generated from
// be/be_visitor_typecode/alias_typecode.cpp:49



// TAO_IDL - Generated from
// be/be_visitor_typecode/typecode_defn.cpp:461


#ifndef _TAO_TYPECODE_MyValueType_Seq_GUARD
#define _TAO_TYPECODE_MyValueType_Seq_GUARD

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

namespace TAO
{
  namespace TypeCode
  {
    namespace
    {
      TAO::TypeCode::Sequence< ::CORBA::TypeCode_ptr const *,
                              TAO::Null_RefCount_Policy>
        MyValueType_Seq_0 (
          ::CORBA::tk_sequence,
          &_tc_MyValueType,
          0U);

      ::CORBA::TypeCode_ptr const tc_MyValueType_Seq_0 =
        &MyValueType_Seq_0;
    }
  }
}

TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_TYPECODE_MyValueType_Seq_GUARD */

static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_MyValueType_Seq (
    ::CORBA::tk_alias,
    "IDL:MyValueType_Seq:1.0",
    "MyValueType_Seq",
    &TAO::TypeCode::tc_MyValueType_Seq_0);

::CORBA::TypeCode_ptr const _tc_MyValueType_Seq =
  &_tao_tc_MyValueType_Seq;

// TAO_IDL - Generated from
// be/be_visitor_typecode/value_typecode.cpp:65



// TAO_IDL - Generated from
// be/be_visitor_typecode/typecode_defn.cpp:461

static TAO::TypeCode::Value_Field<char const *, ::CORBA::TypeCode_ptr const *> const _tao_fields_MyValueType[] =
  {
    { "myValueTypes", &_tc_MyValueType_Seq, ::CORBA::PRIVATE_MEMBER }

  };
static TAO::TypeCode::Recursive_Type<
  TAO::TypeCode::Value<char const *,
                       ::CORBA::TypeCode_ptr const *,
                       TAO::TypeCode::Value_Field<char const *, ::CORBA::TypeCode_ptr const *> const *,
                       TAO::Null_RefCount_Policy>,
  ::CORBA::TypeCode_ptr const *,
  TAO::TypeCode::Value_Field<char const *, ::CORBA::TypeCode_ptr const *> const * >

  _tao_tc_MyValueType (
    ::CORBA::tk_value,
    "IDL:MyValueType:1.0",
    "MyValueType",
    ::CORBA::VM_NONE,
    &::CORBA::_tc_null,
    _tao_fields_MyValueType,
    1);

::CORBA::TypeCode_ptr const _tc_MyValueType =
  &_tao_tc_MyValueType;

// TAO_IDL - Generated from
// be/be_visitor_valuetype/valuetype_cs.cpp:53

void
TAO::Value_Traits<MyValueType>::add_ref (
    MyValueType * p)
{
  ::CORBA::add_ref (p);
}

void
TAO::Value_Traits<MyValueType>::remove_ref (
    MyValueType * p)
{
  ::CORBA::remove_ref (p);
}

void
TAO::Value_Traits<MyValueType>::release (
    MyValueType * p)
{
  ::CORBA::remove_ref (p);
}

MyValueType *
MyValueType::_downcast ( ::CORBA::ValueBase *v)
{
  return dynamic_cast< ::MyValueType * > (v);
}

const char *
MyValueType::_tao_obv_repository_id (void) const
{
  return this->_tao_obv_static_repository_id ();
}

void
MyValueType::_tao_obv_truncatable_repo_ids (Repository_Id_List& ids) const
{
  ids.push_back (this->_tao_obv_static_repository_id ());
}

void
MyValueType::_tao_any_destructor (void *_tao_void_pointer)
{
  MyValueType *_tao_tmp_pointer =
    static_cast<MyValueType *> (_tao_void_pointer);
  ::CORBA::remove_ref (_tao_tmp_pointer);
}

// TAO extension - the virtual _type method.
::CORBA::TypeCode_ptr MyValueType::_tao_type (void) const
{
  return ::_tc_MyValueType;
}

MyValueType::~MyValueType (void)
{}

::CORBA::Boolean
MyValueType::_tao_marshal_v (TAO_OutputCDR & strm) const
{
  TAO_ChunkInfo ci (this->is_truncatable_ || this->chunking_);
  return this->_tao_marshal__MyValueType (strm, ci);
}

::CORBA::Boolean
MyValueType::_tao_unmarshal_v (TAO_InputCDR & strm)
{
  TAO_ChunkInfo ci (this->is_truncatable_ || this->chunking_, 1);
  return this->_tao_unmarshal__MyValueType (strm,ci);
}

::CORBA::Boolean
MyValueType::_tao_match_formal_type (ptrdiff_t formal_type_id) const
{
  return formal_type_id == reinterpret_cast<ptrdiff_t> (MyValueType::_downcast);
}

::CORBA::Boolean
MyValueType::_tao_unmarshal (
    TAO_InputCDR &strm,
    MyValueType *&new_object
  )
{
  ::CORBA::ValueBase *base = 0;
  ::CORBA::Boolean is_indirected = false;
  ::CORBA::Boolean is_null_object = false;
  ::CORBA::Boolean const retval =
    ::CORBA::ValueBase::_tao_unmarshal_pre (
        strm,
        base,
        MyValueType::_tao_obv_static_repository_id (),
        is_null_object,
        is_indirected
      );

  ::CORBA::ValueBase_var owner (base);

  if (!retval)
    return false;

  if (is_null_object)
    return true;

  if (!is_indirected && !base->_tao_unmarshal_v (strm))
    return false;

  // Now base must point to the unmarshaled object.
  // Align the pointer to the right subobject.
  new_object = MyValueType::_downcast (base);
  if (0 == new_object)
    return false;

  if (is_indirected)
    new_object->_add_ref ();

  owner._retn ();
  return true;
}

// TAO_IDL - Generated from
// be/be_visitor_valuetype/valuetype_init_cs.cpp:73

MyValueType_init::MyValueType_init (void)
{
}

MyValueType_init::~MyValueType_init (void)
{
}

MyValueType_init *
MyValueType_init::_downcast ( ::CORBA::ValueFactoryBase *v)
{
  return dynamic_cast< ::MyValueType_init * > (v);
}

const char*
MyValueType_init::tao_repository_id (void)
{
  return ::MyValueType::_tao_obv_static_repository_id ();
}

::CORBA::ValueBase *
MyValueType_init::create_for_unmarshal (void)
{
  ::CORBA::ValueBase *ret_val = 0;
  ACE_NEW_THROW_EX (
      ret_val,
      OBV_MyValueType,
      ::CORBA::NO_MEMORY ()
    );
  return ret_val;
}

// TAO_IDL - Generated from
// be/be_visitor_valuetype/valuetype_obv_cs.cpp:44

OBV_MyValueType::OBV_MyValueType (void)
: require_truncation_ (false)
{}

OBV_MyValueType::OBV_MyValueType (
    const ::MyValueType_Seq & _tao_init_myValueTypes)
: require_truncation_ (false)
{
  myValueTypes (_tao_init_myValueTypes);
}

OBV_MyValueType::~OBV_MyValueType (void)
{}

::CORBA::ValueBase *
OBV_MyValueType::_copy_value (void)
{
  ::CORBA::ValueBase *ret_val = 0;
  ACE_NEW_THROW_EX (
    ret_val,
    OBV_MyValueType (
      myValueTypes ()
    ),
    ::CORBA::NO_MEMORY ()
  );
  return ret_val;
}

::CORBA::Boolean
OBV_MyValueType::_tao_marshal__MyValueType (TAO_OutputCDR &strm, TAO_ChunkInfo& ci) const
{
  return _tao_marshal_state (strm, ci);
}

::CORBA::Boolean
OBV_MyValueType::_tao_unmarshal__MyValueType (TAO_InputCDR &strm, TAO_ChunkInfo& ci)
{
  return _tao_unmarshal_state (strm, ci);
}

// TAO_IDL - Generated from
// be/be_visitor_valuetype/field_cs.cpp:762

/// Accessor to set the member.
void
OBV_MyValueType::myValueTypes (const MyValueType_Seq &val)
{
  this->_pd_myValueTypes = val;
}

/// Readonly get method.
const MyValueType_Seq &
OBV_MyValueType::myValueTypes (void) const
{
  return this->_pd_myValueTypes;
}

/// Read/write get method.
MyValueType_Seq &
OBV_MyValueType::myValueTypes (void)
{
  return this->_pd_myValueTypes;
}

// TAO_IDL - Generated from
// be/be_visitor_sequence/any_op_cs.cpp:45


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


// Copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    const MyValueType_Seq &_tao_elem)
{
  TAO::Any_Dual_Impl_T<MyValueType_Seq>::insert_copy (
      _tao_any,
      MyValueType_Seq::_tao_any_destructor,
      _tc_MyValueType_Seq,
      _tao_elem
    );
}

// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    MyValueType_Seq *_tao_elem)
{
  TAO::Any_Dual_Impl_T<MyValueType_Seq>::insert (
      _tao_any,
      MyValueType_Seq::_tao_any_destructor,
      _tc_MyValueType_Seq,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    MyValueType_Seq *&_tao_elem)
{
  return _tao_any >>= const_cast<
      const MyValueType_Seq *&> (
      _tao_elem
    );
}

// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const MyValueType_Seq *&_tao_elem)
{
  return
    TAO::Any_Dual_Impl_T<MyValueType_Seq>::extract (
        _tao_any,
        MyValueType_Seq::_tao_any_destructor,
        _tc_MyValueType_Seq,
        _tao_elem);
}
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_valuetype/any_op_cs.cpp:45
TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<MyValueType>::to_value (
      ::CORBA::ValueBase *&_tao_elem
    ) const
  {
    ::CORBA::add_ref (this->value_);
    _tao_elem = this->value_;
    return true;
  }
}


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    MyValueType *_tao_elem
  )
{
  #ifdef TAO_VALUETYPE_COPYING_ANY_INSERTION_USES_COPY_VALUE
    MyValueType *_tao_copy =
      _tao_elem ?
        MyValueType::_downcast (_tao_elem->_copy_value ())
        : 0;
    _tao_any <<= &_tao_copy;
  #else
    ::CORBA::add_ref (_tao_elem);
    _tao_any <<= &_tao_elem;
  #endif
}

// Non-copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    MyValueType **_tao_elem
  )
{
  TAO::Any_Impl_T<MyValueType>::insert (
      _tao_any,
      MyValueType::_tao_any_destructor,
      _tc_MyValueType,
      *_tao_elem
    );
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    MyValueType *&_tao_elem
  )
{
  return
    TAO::Any_Impl_T<MyValueType>::extract (
        _tao_any,
        MyValueType::_tao_any_destructor,
        _tc_MyValueType,
        _tao_elem
      );
}


TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_sequence/cdr_op_cs.cpp:93
#if !defined _TAO_CDR_OP_MyValueType_Seq_CPP_
#define _TAO_CDR_OP_MyValueType_Seq_CPP_

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const MyValueType_Seq &_tao_sequence)
{
  return TAO::marshal_sequence(strm, _tao_sequence);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    MyValueType_Seq &_tao_sequence)
{
  return TAO::demarshal_sequence(strm, _tao_sequence);
}


TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_CDR_OP_MyValueType_Seq_CPP_ */

// TAO_IDL - Generated from
// be/be_valuetype.cpp:512

void
CORBA::add_ref (MyValueType * vt)
{
  if (vt != 0)
    {
      vt->_add_ref ();
    }
}

void
CORBA::remove_ref (MyValueType * vt)
{
  if (vt != 0)
    {
      vt->_remove_ref ();
    }
}

// TAO_IDL - Generated from
// be/be_visitor_valuetype/cdr_op_cs.cpp:60


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean
operator<< (
    TAO_OutputCDR &strm,
    const MyValueType *_tao_valuetype
  )
{
  return
    ::CORBA::ValueBase::_tao_marshal (
        strm,
        _tao_valuetype,
        reinterpret_cast<ptrdiff_t> (&MyValueType::_downcast)
      );
}

::CORBA::Boolean
operator>> (
    TAO_InputCDR &strm,
    MyValueType *&_tao_valuetype
  )
{
  return MyValueType::_tao_unmarshal (strm, _tao_valuetype);
}


TAO_END_VERSIONED_NAMESPACE_DECL

// TAO_IDL - Generated from
// be/be_visitor_valuetype/marshal_cs.cpp:33

::CORBA::Boolean
OBV_MyValueType::_tao_marshal_state (TAO_OutputCDR &strm, TAO_ChunkInfo&ci) const
{
  if (! ci.start_chunk (strm))
    return false;

  CORBA::Boolean const ret =
      (strm << _pd_myValueTypes);
  if ( ! ret)
    return false;

  if (! ci.end_chunk (strm))
    return false;

  return true;
}

::CORBA::Boolean
OBV_MyValueType::_tao_unmarshal_state (TAO_InputCDR &strm, TAO_ChunkInfo&ci)
{
  if (!ci.handle_chunking (strm))
    return false;

  CORBA::Boolean const ret =
      (strm >> _pd_myValueTypes);
  if (!ret)
    return false;

  if (this->require_truncation_)
    return ci.skip_chunks (strm);

  else
    return ci.handle_chunking (strm);


}

void
OBV_MyValueType::truncation_hook (void)
{
  this->require_truncation_ = true;
}



