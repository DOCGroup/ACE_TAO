// -*- C++ -*-
/**
 * Code generated by the The ACE ORB (TAO) IDL Compiler v2.4.1
 * TAO and the TAO IDL Compiler have been developed by:
 *       Center for Distributed Object Computing
 *       Washington University
 *       St. Louis, MO
 *       USA
 *       http://www.cs.wustl.edu/~schmidt/doc-center.html
 * and
 *       Distributed Object Computing Laboratory
 *       University of California at Irvine
 *       Irvine, CA
 *       USA
 * and
 *       Institute for Software Integrated Systems
 *       Vanderbilt University
 *       Nashville, TN
 *       USA
 *       http://www.isis.vanderbilt.edu/
 *
 * Information about TAO is available at:
 *     http://www.dre.vanderbilt.edu/~schmidt/TAO.html
 **/

// TAO_IDL - Generated from
// be/be_codegen.cpp:149

#ifndef _TAO_IDL_TESTC_AHXGRN_H_
#define _TAO_IDL_TESTC_AHXGRN_H_

#include /**/ "ace/pre.h"


#include /**/ "ace/config-all.h"

#if !defined (ACE_LACKS_PRAGMA_ONCE)
# pragma once
#endif /* ACE_LACKS_PRAGMA_ONCE */


#include "tao/AnyTypeCode/AnyTypeCode_methods.h"
#include "tao/AnyTypeCode/Any.h"
#include "tao/Valuetype/ValueBase.h"
#include "tao/Valuetype/Valuetype_Adapter_Factory_Impl.h"
#include "tao/Valuetype/ValueFactory.h"
#include "tao/ORB.h"
#include "tao/SystemException.h"
#include "tao/Basic_Types.h"
#include "tao/ORB_Constants.h"
#include "tao/Object.h"
#include "tao/Valuetype/Value_VarOut_T.h"
#include "tao/Objref_VarOut_T.h"
#include "tao/Arg_Traits_T.h"
#include "tao/Basic_Arguments.h"
#include "tao/Special_Basic_Arguments.h"
#include "tao/Any_Insert_Policy_T.h"
#include "tao/Fixed_Size_Argument_T.h"
#include "tao/Var_Size_Argument_T.h"
#include "tao/Object_Argument_T.h"
#include /**/ "tao/Version.h"
#include /**/ "tao/Versioned_Namespace.h"

#if TAO_MAJOR_VERSION != 2 || TAO_MINOR_VERSION != 4 || TAO_MICRO_VERSION != 1
#error This file should be regenerated with TAO_IDL
#endif

#if defined (TAO_EXPORT_MACRO)
#undef TAO_EXPORT_MACRO
#endif
#define TAO_EXPORT_MACRO

// TAO_IDL - Generated from
// be/be_visitor_root/root_ch.cpp:157
TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<typename T> class Narrow_Utils;
}
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_module/module_ch.cpp:35

namespace Foo
{

  // TAO_IDL - Generated from
  // be/be_visitor_module/module_ch.cpp:35

  namespace Bar
  {

    // TAO_IDL - Generated from
    // be/be_interface.cpp:748

#if !defined (_FOO_BAR_A__VAR_OUT_CH_)
#define _FOO_BAR_A__VAR_OUT_CH_

    class A;
    typedef A *A_ptr;

    typedef
      TAO_Objref_Var_T<
          A
        >
      A_var;

    typedef
      TAO_Objref_Out_T<
          A
        >
      A_out;

#endif /* end #if !defined */

    // TAO_IDL - Generated from
    // be/be_visitor_interface/interface_ch.cpp:40

    class  A
      : public virtual ::CORBA::Object
    {
    public:
      friend class TAO::Narrow_Utils<A>;

      // TAO_IDL - Generated from
      // be/be_type.cpp:304

      typedef A_ptr _ptr_type;
      typedef A_var _var_type;
      typedef A_out _out_type;

      static void _tao_any_destructor (void *);

      // The static operations.
      static A_ptr _duplicate (A_ptr obj);

      static void _tao_release (A_ptr obj);

      static A_ptr _narrow (::CORBA::Object_ptr obj);
      static A_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
      static A_ptr _nil (void);

      virtual ::CORBA::Long op1 (
        void);

      virtual ::CORBA::Long op2 (
        void);

      // TAO_IDL - Generated from
      // be/be_visitor_interface/interface_ch.cpp:137

      virtual ::CORBA::Boolean _is_a (const char *type_id);
      virtual const char* _interface_repository_id (void) const;
      virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);

    protected:
      // Concrete interface only.
      A (void);

      // Concrete non-local interface only.
      A (
          ::IOP::IOR *ior,
          TAO_ORB_Core *orb_core);

      // Non-local interface only.
      A (
          TAO_Stub *objref,
          ::CORBA::Boolean _tao_collocated = false,
          TAO_Abstract_ServantBase *servant = 0,
          TAO_ORB_Core *orb_core = 0);

      virtual ~A (void);

    private:
      // Private and unimplemented for concrete interfaces.
      A (const A &);

      void operator= (const A &);
    };

    // TAO_IDL - Generated from
    // be/be_visitor_typecode/typecode_decl.cpp:34

    extern  ::CORBA::TypeCode_ptr const _tc_A;

    // TAO_IDL - Generated from
    // be/be_valuetype.cpp:564



#if !defined (_FOO_BAR_AMH_AEXCEPTIONHOLDER__VAR_OUT_CH_)
#define _FOO_BAR_AMH_AEXCEPTIONHOLDER__VAR_OUT_CH_

    class AMH_AExceptionHolder;
    typedef
      TAO_Value_Var_T<
          AMH_AExceptionHolder
        >
      AMH_AExceptionHolder_var;

    typedef
      TAO_Value_Out_T<
          AMH_AExceptionHolder
        >
      AMH_AExceptionHolder_out;

#endif /* end #if !defined */

    // TAO_IDL - Generated from
    // be/be_visitor_valuetype/valuetype_ch.cpp:50

    class  AMH_AExceptionHolder
      : public virtual ::CORBA::DefaultValueRefCountBase
    {
    public:

      // TAO_IDL - Generated from
      // be/be_type.cpp:304

      typedef AMH_AExceptionHolder * _ptr_type;
      typedef AMH_AExceptionHolder_var _var_type;
      typedef AMH_AExceptionHolder_out _out_type;

      static void _tao_any_destructor (void *);

      AMH_AExceptionHolder ( ::CORBA::Exception *ex)
        : exception (ex)
      {}

      virtual ~AMH_AExceptionHolder (void);
      virtual ::CORBA::ValueBase *_copy_value (void);

      static AMH_AExceptionHolder* _downcast ( ::CORBA::ValueBase *v);

      /// TAO extensions or internals
      static ::CORBA::Boolean _tao_unmarshal (
          TAO_InputCDR &strm,
          AMH_AExceptionHolder *&new_object);

      virtual const char* _tao_obv_repository_id (void) const;

      virtual void _tao_obv_truncatable_repo_ids (Repository_Id_List &) const;

      static const char* _tao_obv_static_repository_id (void);

      virtual ::CORBA::TypeCode_ptr _tao_type (void) const;

    public:

      // TAO_IDL - Generated from
      // be/be_visitor_valuetype/valuetype_ch.cpp:396

    public:
      virtual void raise_op1 (void);

  public:

    // TAO_IDL - Generated from
    // be/be_visitor_valuetype/valuetype_ch.cpp:396

  public:
    virtual void raise_op2 (void);

  // TAO_IDL - Generated from
  // be/be_visitor_valuetype/valuetype_ch.cpp:238

protected:
  AMH_AExceptionHolder (void);
  virtual ::CORBA::Boolean _tao_marshal_v (TAO_OutputCDR &) const;
  virtual ::CORBA::Boolean _tao_unmarshal_v (TAO_InputCDR &);
  virtual ::CORBA::Boolean _tao_match_formal_type (ptrdiff_t ) const;

private:
  AMH_AExceptionHolder (const AMH_AExceptionHolder &);
  void operator= (const AMH_AExceptionHolder &);

  ::CORBA::Exception *exception;

protected:
  virtual ::CORBA::Boolean
  _tao_marshal__Foo_Bar_AMH_AExceptionHolder (TAO_OutputCDR &, TAO_ChunkInfo &) const;

  virtual ::CORBA::Boolean
  _tao_unmarshal__Foo_Bar_AMH_AExceptionHolder (TAO_InputCDR &, TAO_ChunkInfo &);
};

// TAO_IDL - Generated from
// be/be_visitor_typecode/typecode_decl.cpp:34

extern  ::CORBA::TypeCode_ptr const _tc_AMH_AExceptionHolder;

// TAO_IDL - Generated from
// be/be_interface.cpp:748

#if !defined (_FOO_BAR_AMH_ARESPONSEHANDLER__VAR_OUT_CH_)
#define _FOO_BAR_AMH_ARESPONSEHANDLER__VAR_OUT_CH_

class AMH_AResponseHandler;
typedef AMH_AResponseHandler *AMH_AResponseHandler_ptr;

typedef
  TAO_Objref_Var_T<
      AMH_AResponseHandler
    >
  AMH_AResponseHandler_var;

typedef
  TAO_Objref_Out_T<
      AMH_AResponseHandler
    >
  AMH_AResponseHandler_out;

#endif /* end #if !defined */

// TAO_IDL - Generated from
// be/be_visitor_interface/interface_ch.cpp:40

class  AMH_AResponseHandler
  : public virtual ::CORBA::Object
{
public:

  // TAO_IDL - Generated from
  // be/be_type.cpp:304

  typedef AMH_AResponseHandler_ptr _ptr_type;
  typedef AMH_AResponseHandler_var _var_type;
  typedef AMH_AResponseHandler_out _out_type;

  static void _tao_any_destructor (void *);

  // The static operations.
  static AMH_AResponseHandler_ptr _duplicate (AMH_AResponseHandler_ptr obj);

  static void _tao_release (AMH_AResponseHandler_ptr obj);

  static AMH_AResponseHandler_ptr _narrow (::CORBA::Object_ptr obj);
  static AMH_AResponseHandler_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
  static AMH_AResponseHandler_ptr _nil (void);

  virtual void op1 (
    ::CORBA::Long return_value) = 0;

  virtual void op1_excep (
    ::Foo::Bar::AMH_AExceptionHolder * holder) = 0;

  virtual void op2 (
    ::CORBA::Long return_value) = 0;

  virtual void op2_excep (
    ::Foo::Bar::AMH_AExceptionHolder * holder) = 0;

  // TAO_IDL - Generated from
  // be/be_visitor_interface/interface_ch.cpp:137

  virtual ::CORBA::Boolean _is_a (const char *type_id);
  virtual const char* _interface_repository_id (void) const;
  virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);

protected:
  // Abstract or local interface only.
  AMH_AResponseHandler (void);



  virtual ~AMH_AResponseHandler (void);

private:
  // Private and unimplemented for concrete interfaces.
  AMH_AResponseHandler (const AMH_AResponseHandler &);

  void operator= (const AMH_AResponseHandler &);
};

// TAO_IDL - Generated from
// be/be_visitor_typecode/typecode_decl.cpp:34

extern  ::CORBA::TypeCode_ptr const _tc_AMH_AResponseHandler;

// TAO_IDL - Generated from
// be/be_interface.cpp:748

#if !defined (_FOO_BAR_B__VAR_OUT_CH_)
#define _FOO_BAR_B__VAR_OUT_CH_

class B;
typedef B *B_ptr;

typedef
  TAO_Objref_Var_T<
      B
    >
  B_var;

typedef
  TAO_Objref_Out_T<
      B
    >
  B_out;

#endif /* end #if !defined */

// TAO_IDL - Generated from
// be/be_visitor_interface/interface_ch.cpp:40

class  B
  : public virtual ::CORBA::Object
{
public:
  friend class TAO::Narrow_Utils<B>;

  // TAO_IDL - Generated from
  // be/be_type.cpp:304

  typedef B_ptr _ptr_type;
  typedef B_var _var_type;
  typedef B_out _out_type;

  static void _tao_any_destructor (void *);

  // The static operations.
  static B_ptr _duplicate (B_ptr obj);

  static void _tao_release (B_ptr obj);

  static B_ptr _narrow (::CORBA::Object_ptr obj);
  static B_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
  static B_ptr _nil (void);

  virtual ::CORBA::Long op3 (
    void);

  // TAO_IDL - Generated from
  // be/be_visitor_interface/interface_ch.cpp:137

  virtual ::CORBA::Boolean _is_a (const char *type_id);
  virtual const char* _interface_repository_id (void) const;
  virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);

protected:
  // Concrete interface only.
  B (void);

  // Concrete non-local interface only.
  B (
      ::IOP::IOR *ior,
      TAO_ORB_Core *orb_core);

  // Non-local interface only.
  B (
      TAO_Stub *objref,
      ::CORBA::Boolean _tao_collocated = false,
      TAO_Abstract_ServantBase *servant = 0,
      TAO_ORB_Core *orb_core = 0);

  virtual ~B (void);

private:
  // Private and unimplemented for concrete interfaces.
  B (const B &);

  void operator= (const B &);
};

// TAO_IDL - Generated from
// be/be_visitor_typecode/typecode_decl.cpp:34

extern  ::CORBA::TypeCode_ptr const _tc_B;

// TAO_IDL - Generated from
// be/be_valuetype.cpp:564



#if !defined (_FOO_BAR_AMH_BEXCEPTIONHOLDER__VAR_OUT_CH_)
#define _FOO_BAR_AMH_BEXCEPTIONHOLDER__VAR_OUT_CH_

class AMH_BExceptionHolder;
typedef
  TAO_Value_Var_T<
      AMH_BExceptionHolder
    >
  AMH_BExceptionHolder_var;

typedef
  TAO_Value_Out_T<
      AMH_BExceptionHolder
    >
  AMH_BExceptionHolder_out;

#endif /* end #if !defined */

// TAO_IDL - Generated from
// be/be_visitor_valuetype/valuetype_ch.cpp:50

class  AMH_BExceptionHolder
  : public virtual ::CORBA::DefaultValueRefCountBase
{
public:

  // TAO_IDL - Generated from
  // be/be_type.cpp:304

  typedef AMH_BExceptionHolder * _ptr_type;
  typedef AMH_BExceptionHolder_var _var_type;
  typedef AMH_BExceptionHolder_out _out_type;

  static void _tao_any_destructor (void *);

  AMH_BExceptionHolder ( ::CORBA::Exception *ex)
    : exception (ex)
  {}

  virtual ~AMH_BExceptionHolder (void);
  virtual ::CORBA::ValueBase *_copy_value (void);

  static AMH_BExceptionHolder* _downcast ( ::CORBA::ValueBase *v);

  /// TAO extensions or internals
  static ::CORBA::Boolean _tao_unmarshal (
      TAO_InputCDR &strm,
      AMH_BExceptionHolder *&new_object);

  virtual const char* _tao_obv_repository_id (void) const;

  virtual void _tao_obv_truncatable_repo_ids (Repository_Id_List &) const;

  static const char* _tao_obv_static_repository_id (void);

  virtual ::CORBA::TypeCode_ptr _tao_type (void) const;

public:

  // TAO_IDL - Generated from
  // be/be_visitor_valuetype/valuetype_ch.cpp:396

public:
  virtual void raise_op3 (void);

// TAO_IDL - Generated from
// be/be_visitor_valuetype/valuetype_ch.cpp:238

protected:
  AMH_BExceptionHolder (void);
  virtual ::CORBA::Boolean _tao_marshal_v (TAO_OutputCDR &) const;
  virtual ::CORBA::Boolean _tao_unmarshal_v (TAO_InputCDR &);
  virtual ::CORBA::Boolean _tao_match_formal_type (ptrdiff_t ) const;

private:
  AMH_BExceptionHolder (const AMH_BExceptionHolder &);
  void operator= (const AMH_BExceptionHolder &);

  ::CORBA::Exception *exception;

protected:
  virtual ::CORBA::Boolean
  _tao_marshal__Foo_Bar_AMH_BExceptionHolder (TAO_OutputCDR &, TAO_ChunkInfo &) const;

  virtual ::CORBA::Boolean
  _tao_unmarshal__Foo_Bar_AMH_BExceptionHolder (TAO_InputCDR &, TAO_ChunkInfo &);
};

// TAO_IDL - Generated from
// be/be_visitor_typecode/typecode_decl.cpp:34

extern  ::CORBA::TypeCode_ptr const _tc_AMH_BExceptionHolder;

// TAO_IDL - Generated from
// be/be_interface.cpp:748

#if !defined (_FOO_BAR_AMH_BRESPONSEHANDLER__VAR_OUT_CH_)
#define _FOO_BAR_AMH_BRESPONSEHANDLER__VAR_OUT_CH_

class AMH_BResponseHandler;
typedef AMH_BResponseHandler *AMH_BResponseHandler_ptr;

typedef
  TAO_Objref_Var_T<
      AMH_BResponseHandler
    >
  AMH_BResponseHandler_var;

typedef
  TAO_Objref_Out_T<
      AMH_BResponseHandler
    >
  AMH_BResponseHandler_out;

#endif /* end #if !defined */

// TAO_IDL - Generated from
// be/be_visitor_interface/interface_ch.cpp:40

class  AMH_BResponseHandler
  : public virtual ::CORBA::Object
{
public:

  // TAO_IDL - Generated from
  // be/be_type.cpp:304

  typedef AMH_BResponseHandler_ptr _ptr_type;
  typedef AMH_BResponseHandler_var _var_type;
  typedef AMH_BResponseHandler_out _out_type;

  static void _tao_any_destructor (void *);

  // The static operations.
  static AMH_BResponseHandler_ptr _duplicate (AMH_BResponseHandler_ptr obj);

  static void _tao_release (AMH_BResponseHandler_ptr obj);

  static AMH_BResponseHandler_ptr _narrow (::CORBA::Object_ptr obj);
  static AMH_BResponseHandler_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
  static AMH_BResponseHandler_ptr _nil (void);

  virtual void op3 (
    ::CORBA::Long return_value) = 0;

  virtual void op3_excep (
    ::Foo::Bar::AMH_BExceptionHolder * holder) = 0;

  // TAO_IDL - Generated from
  // be/be_visitor_interface/interface_ch.cpp:137

  virtual ::CORBA::Boolean _is_a (const char *type_id);
  virtual const char* _interface_repository_id (void) const;
  virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);

protected:
  // Abstract or local interface only.
  AMH_BResponseHandler (void);



  virtual ~AMH_BResponseHandler (void);

private:
  // Private and unimplemented for concrete interfaces.
  AMH_BResponseHandler (const AMH_BResponseHandler &);

  void operator= (const AMH_BResponseHandler &);
};

// TAO_IDL - Generated from
// be/be_visitor_typecode/typecode_decl.cpp:34

extern  ::CORBA::TypeCode_ptr const _tc_AMH_BResponseHandler;

// TAO_IDL - Generated from
// be/be_visitor_module/module_ch.cpp:64

} // module Foo::Bar

// TAO_IDL - Generated from
// be/be_visitor_module/module_ch.cpp:64

} // module Foo

// TAO_IDL - Generated from
// be/be_visitor_module/module_ch.cpp:35

namespace Baz
{

  // TAO_IDL - Generated from
  // be/be_interface.cpp:748

#if !defined (_BAZ_C__VAR_OUT_CH_)
#define _BAZ_C__VAR_OUT_CH_

  class C;
  typedef C *C_ptr;

  typedef
    TAO_Objref_Var_T<
        C
      >
    C_var;

  typedef
    TAO_Objref_Out_T<
        C
      >
    C_out;

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // be/be_visitor_interface/interface_ch.cpp:40

  class  C
    : public virtual ::Foo::Bar::A,
      public virtual ::Foo::Bar::B

  {
  public:
    friend class TAO::Narrow_Utils<C>;

    // TAO_IDL - Generated from
    // be/be_type.cpp:304

    typedef C_ptr _ptr_type;
    typedef C_var _var_type;
    typedef C_out _out_type;

    static void _tao_any_destructor (void *);

    // The static operations.
    static C_ptr _duplicate (C_ptr obj);

    static void _tao_release (C_ptr obj);

    static C_ptr _narrow (::CORBA::Object_ptr obj);
    static C_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
    static C_ptr _nil (void);

    virtual ::CORBA::Long op4 (
      void);

    virtual void shutdown (
      void);

    // TAO_IDL - Generated from
    // be/be_visitor_interface/interface_ch.cpp:137

    virtual ::CORBA::Boolean _is_a (const char *type_id);
    virtual const char* _interface_repository_id (void) const;
    virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);

  protected:
    // Concrete interface only.
    C (void);

    // Concrete non-local interface only.
    C (
        ::IOP::IOR *ior,
        TAO_ORB_Core *orb_core);

    // Non-local interface only.
    C (
        TAO_Stub *objref,
        ::CORBA::Boolean _tao_collocated = false,
        TAO_Abstract_ServantBase *servant = 0,
        TAO_ORB_Core *orb_core = 0);

    virtual ~C (void);

  private:
    // Private and unimplemented for concrete interfaces.
    C (const C &);

    void operator= (const C &);
  };

  // TAO_IDL - Generated from
  // be/be_visitor_typecode/typecode_decl.cpp:34

  extern  ::CORBA::TypeCode_ptr const _tc_C;

  // TAO_IDL - Generated from
  // be/be_valuetype.cpp:564



#if !defined (_BAZ_AMH_CEXCEPTIONHOLDER__VAR_OUT_CH_)
#define _BAZ_AMH_CEXCEPTIONHOLDER__VAR_OUT_CH_

  class AMH_CExceptionHolder;
  typedef
    TAO_Value_Var_T<
        AMH_CExceptionHolder
      >
    AMH_CExceptionHolder_var;

  typedef
    TAO_Value_Out_T<
        AMH_CExceptionHolder
      >
    AMH_CExceptionHolder_out;

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // be/be_visitor_valuetype/valuetype_ch.cpp:50

  class  AMH_CExceptionHolder
    : public virtual ::CORBA::DefaultValueRefCountBase
  {
  public:

    // TAO_IDL - Generated from
    // be/be_type.cpp:304

    typedef AMH_CExceptionHolder * _ptr_type;
    typedef AMH_CExceptionHolder_var _var_type;
    typedef AMH_CExceptionHolder_out _out_type;

    static void _tao_any_destructor (void *);

    AMH_CExceptionHolder ( ::CORBA::Exception *ex)
      : exception (ex)
    {}

    virtual ~AMH_CExceptionHolder (void);
    virtual ::CORBA::ValueBase *_copy_value (void);

    static AMH_CExceptionHolder* _downcast ( ::CORBA::ValueBase *v);

    /// TAO extensions or internals
    static ::CORBA::Boolean _tao_unmarshal (
        TAO_InputCDR &strm,
        AMH_CExceptionHolder *&new_object);

    virtual const char* _tao_obv_repository_id (void) const;

    virtual void _tao_obv_truncatable_repo_ids (Repository_Id_List &) const;

    static const char* _tao_obv_static_repository_id (void);

    virtual ::CORBA::TypeCode_ptr _tao_type (void) const;

  public:

    // TAO_IDL - Generated from
    // be/be_visitor_valuetype/valuetype_ch.cpp:396

  public:
    virtual void raise_op4 (void);

public:

  // TAO_IDL - Generated from
  // be/be_visitor_valuetype/valuetype_ch.cpp:396

public:
  virtual void raise_shutdown (void);

// TAO_IDL - Generated from
// be/be_visitor_valuetype/valuetype_ch.cpp:238

protected:
  AMH_CExceptionHolder (void);
  virtual ::CORBA::Boolean _tao_marshal_v (TAO_OutputCDR &) const;
  virtual ::CORBA::Boolean _tao_unmarshal_v (TAO_InputCDR &);
  virtual ::CORBA::Boolean _tao_match_formal_type (ptrdiff_t ) const;

private:
  AMH_CExceptionHolder (const AMH_CExceptionHolder &);
  void operator= (const AMH_CExceptionHolder &);

  ::CORBA::Exception *exception;

protected:
  virtual ::CORBA::Boolean
  _tao_marshal__Baz_AMH_CExceptionHolder (TAO_OutputCDR &, TAO_ChunkInfo &) const;

  virtual ::CORBA::Boolean
  _tao_unmarshal__Baz_AMH_CExceptionHolder (TAO_InputCDR &, TAO_ChunkInfo &);
};

// TAO_IDL - Generated from
// be/be_visitor_typecode/typecode_decl.cpp:34

extern  ::CORBA::TypeCode_ptr const _tc_AMH_CExceptionHolder;

// TAO_IDL - Generated from
// be/be_interface.cpp:748

#if !defined (_BAZ_AMH_CRESPONSEHANDLER__VAR_OUT_CH_)
#define _BAZ_AMH_CRESPONSEHANDLER__VAR_OUT_CH_

class AMH_CResponseHandler;
typedef AMH_CResponseHandler *AMH_CResponseHandler_ptr;

typedef
  TAO_Objref_Var_T<
      AMH_CResponseHandler
    >
  AMH_CResponseHandler_var;

typedef
  TAO_Objref_Out_T<
      AMH_CResponseHandler
    >
  AMH_CResponseHandler_out;

#endif /* end #if !defined */

// TAO_IDL - Generated from
// be/be_visitor_interface/interface_ch.cpp:40

class  AMH_CResponseHandler
  : public virtual ::CORBA::Object
{
public:

  // TAO_IDL - Generated from
  // be/be_type.cpp:304

  typedef AMH_CResponseHandler_ptr _ptr_type;
  typedef AMH_CResponseHandler_var _var_type;
  typedef AMH_CResponseHandler_out _out_type;

  static void _tao_any_destructor (void *);

  // The static operations.
  static AMH_CResponseHandler_ptr _duplicate (AMH_CResponseHandler_ptr obj);

  static void _tao_release (AMH_CResponseHandler_ptr obj);

  static AMH_CResponseHandler_ptr _narrow (::CORBA::Object_ptr obj);
  static AMH_CResponseHandler_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
  static AMH_CResponseHandler_ptr _nil (void);

  virtual void op4 (
    ::CORBA::Long return_value) = 0;

  virtual void op4_excep (
    ::Baz::AMH_CExceptionHolder * holder) = 0;

  virtual void shutdown (
    void) = 0;

  virtual void shutdown_excep (
    ::Baz::AMH_CExceptionHolder * holder) = 0;

  // TAO_IDL - Generated from
  // be/be_visitor_interface/interface_ch.cpp:137

  virtual ::CORBA::Boolean _is_a (const char *type_id);
  virtual const char* _interface_repository_id (void) const;
  virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);

protected:
  // Abstract or local interface only.
  AMH_CResponseHandler (void);



  virtual ~AMH_CResponseHandler (void);

private:
  // Private and unimplemented for concrete interfaces.
  AMH_CResponseHandler (const AMH_CResponseHandler &);

  void operator= (const AMH_CResponseHandler &);
};

// TAO_IDL - Generated from
// be/be_visitor_typecode/typecode_decl.cpp:34

extern  ::CORBA::TypeCode_ptr const _tc_AMH_CResponseHandler;

// TAO_IDL - Generated from
// be/be_visitor_module/module_ch.cpp:64

} // module Baz

// TAO_IDL - Generated from
// be/be_visitor_arg_traits.cpp:66

TAO_BEGIN_VERSIONED_NAMESPACE_DECL


// Arg traits specializations.
namespace TAO
{

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:145

#if !defined (_FOO_BAR_A__ARG_TRAITS_)
#define _FOO_BAR_A__ARG_TRAITS_

  template<>
  class  Arg_Traits< ::Foo::Bar::A>
    : public
        Object_Arg_Traits_T<
            ::Foo::Bar::A_ptr,
            ::Foo::Bar::A_var,
            ::Foo::Bar::A_out,
            TAO::Objref_Traits<Foo::Bar::A>,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:306

#if !defined (_FOO_BAR_AMH_AEXCEPTIONHOLDER__ARG_TRAITS_)
#define _FOO_BAR_AMH_AEXCEPTIONHOLDER__ARG_TRAITS_

  template<>
  class Arg_Traits< ::Foo::Bar::AMH_AExceptionHolder>
    : public
        Object_Arg_Traits_T<
            ::Foo::Bar::AMH_AExceptionHolder *,
            ::Foo::Bar::AMH_AExceptionHolder_var,
            ::Foo::Bar::AMH_AExceptionHolder_out,
            TAO::Value_Traits<Foo::Bar::AMH_AExceptionHolder>,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:145

#if !defined (_FOO_BAR_B__ARG_TRAITS_)
#define _FOO_BAR_B__ARG_TRAITS_

  template<>
  class  Arg_Traits< ::Foo::Bar::B>
    : public
        Object_Arg_Traits_T<
            ::Foo::Bar::B_ptr,
            ::Foo::Bar::B_var,
            ::Foo::Bar::B_out,
            TAO::Objref_Traits<Foo::Bar::B>,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:306

#if !defined (_FOO_BAR_AMH_BEXCEPTIONHOLDER__ARG_TRAITS_)
#define _FOO_BAR_AMH_BEXCEPTIONHOLDER__ARG_TRAITS_

  template<>
  class Arg_Traits< ::Foo::Bar::AMH_BExceptionHolder>
    : public
        Object_Arg_Traits_T<
            ::Foo::Bar::AMH_BExceptionHolder *,
            ::Foo::Bar::AMH_BExceptionHolder_var,
            ::Foo::Bar::AMH_BExceptionHolder_out,
            TAO::Value_Traits<Foo::Bar::AMH_BExceptionHolder>,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:145

#if !defined (_BAZ_C__ARG_TRAITS_)
#define _BAZ_C__ARG_TRAITS_

  template<>
  class  Arg_Traits< ::Baz::C>
    : public
        Object_Arg_Traits_T<
            ::Baz::C_ptr,
            ::Baz::C_var,
            ::Baz::C_out,
            TAO::Objref_Traits<Baz::C>,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:306

#if !defined (_BAZ_AMH_CEXCEPTIONHOLDER__ARG_TRAITS_)
#define _BAZ_AMH_CEXCEPTIONHOLDER__ARG_TRAITS_

  template<>
  class Arg_Traits< ::Baz::AMH_CExceptionHolder>
    : public
        Object_Arg_Traits_T<
            ::Baz::AMH_CExceptionHolder *,
            ::Baz::AMH_CExceptionHolder_var,
            ::Baz::AMH_CExceptionHolder_out,
            TAO::Value_Traits<Baz::AMH_CExceptionHolder>,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

#endif /* end #if !defined */
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_valuetype/obv_module.cpp:44

namespace OBV_Foo
{

  // TAO_IDL - Generated from
  // be/be_visitor_valuetype/obv_module.cpp:44

  namespace Bar
  {

    // TAO_IDL - Generated from
    // be/be_visitor_valuetype/valuetype_obv_ch.cpp:44

    // OBV_ class
    class  AMH_AExceptionHolder
      : public virtual Foo::Bar::AMH_AExceptionHolder
    {

  protected:
    AMH_AExceptionHolder (void);
    virtual ~AMH_AExceptionHolder (void);

  protected:
    virtual ::CORBA::Boolean
    _tao_marshal__Foo_Bar_AMH_AExceptionHolder (TAO_OutputCDR &, TAO_ChunkInfo &) const;

    virtual ::CORBA::Boolean
    _tao_unmarshal__Foo_Bar_AMH_AExceptionHolder (TAO_InputCDR &, TAO_ChunkInfo &);

    ::CORBA::Boolean _tao_marshal_state (TAO_OutputCDR &, TAO_ChunkInfo &) const;
    ::CORBA::Boolean _tao_unmarshal_state (TAO_InputCDR &, TAO_ChunkInfo &);
    virtual void truncation_hook (void);

  private:
    CORBA::Boolean require_truncation_;
  };

  // TAO_IDL - Generated from
  // be/be_visitor_valuetype/valuetype_obv_ch.cpp:44

  // OBV_ class
  class  AMH_BExceptionHolder
    : public virtual Foo::Bar::AMH_BExceptionHolder
  {

protected:
  AMH_BExceptionHolder (void);
  virtual ~AMH_BExceptionHolder (void);

protected:
  virtual ::CORBA::Boolean
  _tao_marshal__Foo_Bar_AMH_BExceptionHolder (TAO_OutputCDR &, TAO_ChunkInfo &) const;

  virtual ::CORBA::Boolean
  _tao_unmarshal__Foo_Bar_AMH_BExceptionHolder (TAO_InputCDR &, TAO_ChunkInfo &);

  ::CORBA::Boolean _tao_marshal_state (TAO_OutputCDR &, TAO_ChunkInfo &) const;
  ::CORBA::Boolean _tao_unmarshal_state (TAO_InputCDR &, TAO_ChunkInfo &);
  virtual void truncation_hook (void);

private:
  CORBA::Boolean require_truncation_;
};
}
}

// TAO_IDL - Generated from
// be/be_visitor_valuetype/obv_module.cpp:44

namespace OBV_Baz
{

  // TAO_IDL - Generated from
  // be/be_visitor_valuetype/valuetype_obv_ch.cpp:44

  // OBV_ class
  class  AMH_CExceptionHolder
    : public virtual Baz::AMH_CExceptionHolder
  {

protected:
  AMH_CExceptionHolder (void);
  virtual ~AMH_CExceptionHolder (void);

protected:
  virtual ::CORBA::Boolean
  _tao_marshal__Baz_AMH_CExceptionHolder (TAO_OutputCDR &, TAO_ChunkInfo &) const;

  virtual ::CORBA::Boolean
  _tao_unmarshal__Baz_AMH_CExceptionHolder (TAO_InputCDR &, TAO_ChunkInfo &);

  ::CORBA::Boolean _tao_marshal_state (TAO_OutputCDR &, TAO_ChunkInfo &) const;
  ::CORBA::Boolean _tao_unmarshal_state (TAO_InputCDR &, TAO_ChunkInfo &);
  virtual void truncation_hook (void);

private:
  CORBA::Boolean require_truncation_;
};
}

// TAO_IDL - Generated from
// be/be_visitor_traits.cpp:60

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Traits specializations.
namespace TAO
{

#if !defined (_FOO_BAR_A__TRAITS_)
#define _FOO_BAR_A__TRAITS_

  template<>
  struct  Objref_Traits< ::Foo::Bar::A>
  {
    static ::Foo::Bar::A_ptr duplicate (
        ::Foo::Bar::A_ptr p);
    static void release (
        ::Foo::Bar::A_ptr p);
    static ::Foo::Bar::A_ptr nil (void);
    static ::CORBA::Boolean marshal (
        const ::Foo::Bar::A_ptr p,
        TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_FOO_BAR_AMH_AEXCEPTIONHOLDER__TRAITS_)
#define _FOO_BAR_AMH_AEXCEPTIONHOLDER__TRAITS_

  template<>
  struct  Value_Traits<Foo::Bar::AMH_AExceptionHolder>
  {
    static void add_ref (Foo::Bar::AMH_AExceptionHolder *);
    static void remove_ref (Foo::Bar::AMH_AExceptionHolder *);
    static void release (Foo::Bar::AMH_AExceptionHolder *);
  };

#endif /* end #if !defined */

#if !defined (_FOO_BAR_AMH_ARESPONSEHANDLER__TRAITS_)
#define _FOO_BAR_AMH_ARESPONSEHANDLER__TRAITS_

  template<>
  struct  Objref_Traits< ::Foo::Bar::AMH_AResponseHandler>
  {
    static ::Foo::Bar::AMH_AResponseHandler_ptr duplicate (
        ::Foo::Bar::AMH_AResponseHandler_ptr p);
    static void release (
        ::Foo::Bar::AMH_AResponseHandler_ptr p);
    static ::Foo::Bar::AMH_AResponseHandler_ptr nil (void);
    static ::CORBA::Boolean marshal (
        const ::Foo::Bar::AMH_AResponseHandler_ptr p,
        TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_FOO_BAR_B__TRAITS_)
#define _FOO_BAR_B__TRAITS_

  template<>
  struct  Objref_Traits< ::Foo::Bar::B>
  {
    static ::Foo::Bar::B_ptr duplicate (
        ::Foo::Bar::B_ptr p);
    static void release (
        ::Foo::Bar::B_ptr p);
    static ::Foo::Bar::B_ptr nil (void);
    static ::CORBA::Boolean marshal (
        const ::Foo::Bar::B_ptr p,
        TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_FOO_BAR_AMH_BEXCEPTIONHOLDER__TRAITS_)
#define _FOO_BAR_AMH_BEXCEPTIONHOLDER__TRAITS_

  template<>
  struct  Value_Traits<Foo::Bar::AMH_BExceptionHolder>
  {
    static void add_ref (Foo::Bar::AMH_BExceptionHolder *);
    static void remove_ref (Foo::Bar::AMH_BExceptionHolder *);
    static void release (Foo::Bar::AMH_BExceptionHolder *);
  };

#endif /* end #if !defined */

#if !defined (_FOO_BAR_AMH_BRESPONSEHANDLER__TRAITS_)
#define _FOO_BAR_AMH_BRESPONSEHANDLER__TRAITS_

  template<>
  struct  Objref_Traits< ::Foo::Bar::AMH_BResponseHandler>
  {
    static ::Foo::Bar::AMH_BResponseHandler_ptr duplicate (
        ::Foo::Bar::AMH_BResponseHandler_ptr p);
    static void release (
        ::Foo::Bar::AMH_BResponseHandler_ptr p);
    static ::Foo::Bar::AMH_BResponseHandler_ptr nil (void);
    static ::CORBA::Boolean marshal (
        const ::Foo::Bar::AMH_BResponseHandler_ptr p,
        TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_BAZ_C__TRAITS_)
#define _BAZ_C__TRAITS_

  template<>
  struct  Objref_Traits< ::Baz::C>
  {
    static ::Baz::C_ptr duplicate (
        ::Baz::C_ptr p);
    static void release (
        ::Baz::C_ptr p);
    static ::Baz::C_ptr nil (void);
    static ::CORBA::Boolean marshal (
        const ::Baz::C_ptr p,
        TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_BAZ_AMH_CEXCEPTIONHOLDER__TRAITS_)
#define _BAZ_AMH_CEXCEPTIONHOLDER__TRAITS_

  template<>
  struct  Value_Traits<Baz::AMH_CExceptionHolder>
  {
    static void add_ref (Baz::AMH_CExceptionHolder *);
    static void remove_ref (Baz::AMH_CExceptionHolder *);
    static void release (Baz::AMH_CExceptionHolder *);
  };

#endif /* end #if !defined */

#if !defined (_BAZ_AMH_CRESPONSEHANDLER__TRAITS_)
#define _BAZ_AMH_CRESPONSEHANDLER__TRAITS_

  template<>
  struct  Objref_Traits< ::Baz::AMH_CResponseHandler>
  {
    static ::Baz::AMH_CResponseHandler_ptr duplicate (
        ::Baz::AMH_CResponseHandler_ptr p);
    static void release (
        ::Baz::AMH_CResponseHandler_ptr p);
    static ::Baz::AMH_CResponseHandler_ptr nil (void);
    static ::CORBA::Boolean marshal (
        const ::Baz::AMH_CResponseHandler_ptr p,
        TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */
}
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_interface/any_op_ch.cpp:41



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace Foo
{

  namespace Bar
  {
     void operator<<= ( ::CORBA::Any &, A_ptr); // copying
     void operator<<= ( ::CORBA::Any &, A_ptr *); // non-copying
     ::CORBA::Boolean operator>>= (const ::CORBA::Any &, A_ptr &);
  }
}

#else


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 void operator<<= (::CORBA::Any &, Foo::Bar::A_ptr); // copying
 void operator<<= (::CORBA::Any &, Foo::Bar::A_ptr *); // non-copying
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, Foo::Bar::A_ptr &);
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_valuetype/any_op_ch.cpp:43



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace Foo
{

  namespace Bar
  {
     void operator<<= ( ::CORBA::Any &, AMH_AExceptionHolder *); // copying
     void operator<<= ( ::CORBA::Any &, AMH_AExceptionHolder **); // non-copying
     ::CORBA::Boolean operator>>= (const ::CORBA::Any &, AMH_AExceptionHolder *&);
  }
}

#else


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 void operator<<= (::CORBA::Any &, Foo::Bar::AMH_AExceptionHolder *); // copying
 void operator<<= (::CORBA::Any &, Foo::Bar::AMH_AExceptionHolder **); // non-copying
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, Foo::Bar::AMH_AExceptionHolder *&);
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_interface/any_op_ch.cpp:41



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace Foo
{

  namespace Bar
  {
     void operator<<= ( ::CORBA::Any &, AMH_AResponseHandler_ptr); // copying
     void operator<<= ( ::CORBA::Any &, AMH_AResponseHandler_ptr *); // non-copying
     ::CORBA::Boolean operator>>= (const ::CORBA::Any &, AMH_AResponseHandler_ptr &);
  }
}

#else


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 void operator<<= (::CORBA::Any &, Foo::Bar::AMH_AResponseHandler_ptr); // copying
 void operator<<= (::CORBA::Any &, Foo::Bar::AMH_AResponseHandler_ptr *); // non-copying
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, Foo::Bar::AMH_AResponseHandler_ptr &);
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_interface/any_op_ch.cpp:41



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace Foo
{

  namespace Bar
  {
     void operator<<= ( ::CORBA::Any &, B_ptr); // copying
     void operator<<= ( ::CORBA::Any &, B_ptr *); // non-copying
     ::CORBA::Boolean operator>>= (const ::CORBA::Any &, B_ptr &);
  }
}

#else


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 void operator<<= (::CORBA::Any &, Foo::Bar::B_ptr); // copying
 void operator<<= (::CORBA::Any &, Foo::Bar::B_ptr *); // non-copying
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, Foo::Bar::B_ptr &);
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_valuetype/any_op_ch.cpp:43



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace Foo
{

  namespace Bar
  {
     void operator<<= ( ::CORBA::Any &, AMH_BExceptionHolder *); // copying
     void operator<<= ( ::CORBA::Any &, AMH_BExceptionHolder **); // non-copying
     ::CORBA::Boolean operator>>= (const ::CORBA::Any &, AMH_BExceptionHolder *&);
  }
}

#else


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 void operator<<= (::CORBA::Any &, Foo::Bar::AMH_BExceptionHolder *); // copying
 void operator<<= (::CORBA::Any &, Foo::Bar::AMH_BExceptionHolder **); // non-copying
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, Foo::Bar::AMH_BExceptionHolder *&);
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_interface/any_op_ch.cpp:41



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace Foo
{

  namespace Bar
  {
     void operator<<= ( ::CORBA::Any &, AMH_BResponseHandler_ptr); // copying
     void operator<<= ( ::CORBA::Any &, AMH_BResponseHandler_ptr *); // non-copying
     ::CORBA::Boolean operator>>= (const ::CORBA::Any &, AMH_BResponseHandler_ptr &);
  }
}

#else


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 void operator<<= (::CORBA::Any &, Foo::Bar::AMH_BResponseHandler_ptr); // copying
 void operator<<= (::CORBA::Any &, Foo::Bar::AMH_BResponseHandler_ptr *); // non-copying
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, Foo::Bar::AMH_BResponseHandler_ptr &);
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_interface/any_op_ch.cpp:41



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace Baz
{
   void operator<<= ( ::CORBA::Any &, C_ptr); // copying
   void operator<<= ( ::CORBA::Any &, C_ptr *); // non-copying
   ::CORBA::Boolean operator>>= (const ::CORBA::Any &, C_ptr &);
}

#else


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 void operator<<= (::CORBA::Any &, Baz::C_ptr); // copying
 void operator<<= (::CORBA::Any &, Baz::C_ptr *); // non-copying
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, Baz::C_ptr &);
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_valuetype/any_op_ch.cpp:43



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace Baz
{
   void operator<<= ( ::CORBA::Any &, AMH_CExceptionHolder *); // copying
   void operator<<= ( ::CORBA::Any &, AMH_CExceptionHolder **); // non-copying
   ::CORBA::Boolean operator>>= (const ::CORBA::Any &, AMH_CExceptionHolder *&);
}

#else


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 void operator<<= (::CORBA::Any &, Baz::AMH_CExceptionHolder *); // copying
 void operator<<= (::CORBA::Any &, Baz::AMH_CExceptionHolder **); // non-copying
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, Baz::AMH_CExceptionHolder *&);
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_interface/any_op_ch.cpp:41



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace Baz
{
   void operator<<= ( ::CORBA::Any &, AMH_CResponseHandler_ptr); // copying
   void operator<<= ( ::CORBA::Any &, AMH_CResponseHandler_ptr *); // non-copying
   ::CORBA::Boolean operator>>= (const ::CORBA::Any &, AMH_CResponseHandler_ptr &);
}

#else


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 void operator<<= (::CORBA::Any &, Baz::AMH_CResponseHandler_ptr); // copying
 void operator<<= (::CORBA::Any &, Baz::AMH_CResponseHandler_ptr *); // non-copying
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, Baz::AMH_CResponseHandler_ptr &);
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_interface/cdr_op_ch.cpp:41

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 ::CORBA::Boolean operator<< (TAO_OutputCDR &, const Foo::Bar::A_ptr );
 ::CORBA::Boolean operator>> (TAO_InputCDR &, Foo::Bar::A_ptr &);

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_valuetype.cpp:456


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

namespace CORBA
{
  extern  void add_ref (Foo::Bar::AMH_AExceptionHolder *);
  extern  void remove_ref (Foo::Bar::AMH_AExceptionHolder *);
}
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_valuetype/cdr_op_ch.cpp:49


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 ::CORBA::Boolean operator<< (TAO_OutputCDR &, const Foo::Bar::AMH_AExceptionHolder *);
 ::CORBA::Boolean operator>> (TAO_InputCDR &, Foo::Bar::AMH_AExceptionHolder *&);

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_interface/cdr_op_ch.cpp:41

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 ::CORBA::Boolean operator<< (TAO_OutputCDR &, const Foo::Bar::B_ptr );
 ::CORBA::Boolean operator>> (TAO_InputCDR &, Foo::Bar::B_ptr &);

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_valuetype.cpp:456


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

namespace CORBA
{
  extern  void add_ref (Foo::Bar::AMH_BExceptionHolder *);
  extern  void remove_ref (Foo::Bar::AMH_BExceptionHolder *);
}
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_valuetype/cdr_op_ch.cpp:49


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 ::CORBA::Boolean operator<< (TAO_OutputCDR &, const Foo::Bar::AMH_BExceptionHolder *);
 ::CORBA::Boolean operator>> (TAO_InputCDR &, Foo::Bar::AMH_BExceptionHolder *&);

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_interface/cdr_op_ch.cpp:41

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 ::CORBA::Boolean operator<< (TAO_OutputCDR &, const Baz::C_ptr );
 ::CORBA::Boolean operator>> (TAO_InputCDR &, Baz::C_ptr &);

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_valuetype.cpp:456


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

namespace CORBA
{
  extern  void add_ref (Baz::AMH_CExceptionHolder *);
  extern  void remove_ref (Baz::AMH_CExceptionHolder *);
}
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_valuetype/cdr_op_ch.cpp:49


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 ::CORBA::Boolean operator<< (TAO_OutputCDR &, const Baz::AMH_CExceptionHolder *);
 ::CORBA::Boolean operator>> (TAO_InputCDR &, Baz::AMH_CExceptionHolder *&);

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_codegen.cpp:1700
#if defined (__ACE_INLINE__)
#include "TestC.inl"
#endif /* defined INLINE */

#include /**/ "ace/post.h"

#endif /* ifndef */

