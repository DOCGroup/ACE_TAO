// -*- C++ -*-
/**
 * Code generated by the The ACE ORB (TAO) IDL Compiler v2.4.1
 * TAO and the TAO IDL Compiler have been developed by:
 *       Center for Distributed Object Computing
 *       Washington University
 *       St. Louis, MO
 *       USA
 *       http://www.cs.wustl.edu/~schmidt/doc-center.html
 * and
 *       Distributed Object Computing Laboratory
 *       University of California at Irvine
 *       Irvine, CA
 *       USA
 * and
 *       Institute for Software Integrated Systems
 *       Vanderbilt University
 *       Nashville, TN
 *       USA
 *       http://www.isis.vanderbilt.edu/
 *
 * Information about TAO is available at:
 *     http://www.dre.vanderbilt.edu/~schmidt/TAO.html
 **/

// TAO_IDL - Generated from
// be/be_codegen.cpp:373

#include "_pch.h"
#include "MessengerC.h"
#include "tao/AnyTypeCode/Null_RefCount_Policy.h"
#include "tao/AnyTypeCode/TypeCode_Constants.h"
#include "tao/AnyTypeCode/Alias_TypeCode_Static.h"
#include "tao/AnyTypeCode/Objref_TypeCode_Static.h"
#include "tao/AnyTypeCode/Sequence_TypeCode_Static.h"
#include "tao/AnyTypeCode/String_TypeCode_Static.h"
#include "tao/AnyTypeCode/Value_TypeCode_Static.h"
#include "tao/AnyTypeCode/TypeCode_Value_Field.h"
#include "tao/CDR.h"
#include "tao/Exception_Data.h"
#include "tao/Invocation_Adapter.h"
#include "tao/Valuetype/ValueFactory.h"
#include "tao/Object_T.h"
#include "tao/CDR.h"
#include "tao/AnyTypeCode/Any.h"
#include "tao/AnyTypeCode/Any_Impl_T.h"
#include "tao/AnyTypeCode/Any_Dual_Impl_T.h"
#include "ace/OS_NS_string.h"

#if !defined (__ACE_INLINE__)
#include "MessengerC.inl"
#endif /* !defined INLINE */

// TAO_IDL - Generated from
// be/be_visitor_typecode/value_typecode.cpp:65



// TAO_IDL - Generated from
// be/be_visitor_typecode/typecode_defn.cpp:461

static TAO::TypeCode::Value_Field<char const *, ::CORBA::TypeCode_ptr const *> const _tao_fields_Message[] =
  {
    { "addrs_", &Message::_tc_AddrList, ::CORBA::PRIVATE_MEMBER },
    { "user_", &CORBA::_tc_string, ::CORBA::PRIVATE_MEMBER },
    { "subject_", &CORBA::_tc_string, ::CORBA::PRIVATE_MEMBER },
    { "text_", &CORBA::_tc_string, ::CORBA::PRIVATE_MEMBER }

  };
static TAO::TypeCode::Value<char const *,
                     ::CORBA::TypeCode_ptr const *,
                     TAO::TypeCode::Value_Field<char const *, ::CORBA::TypeCode_ptr const *> const *,
                     TAO::Null_RefCount_Policy>
  _tao_tc_Message (
    ::CORBA::tk_value,
    "IDL:Message:1.0",
    "Message",
    ::CORBA::VM_NONE,
    &::CORBA::_tc_null,
    _tao_fields_Message,
    4);

::CORBA::TypeCode_ptr const _tc_Message =
  &_tao_tc_Message;

// TAO_IDL - Generated from
// be/be_visitor_valuetype/valuetype_cs.cpp:53

void
TAO::Value_Traits<Message>::add_ref (
    Message * p)
{
  ::CORBA::add_ref (p);
}

void
TAO::Value_Traits<Message>::remove_ref (
    Message * p)
{
  ::CORBA::remove_ref (p);
}

void
TAO::Value_Traits<Message>::release (
    Message * p)
{
  ::CORBA::remove_ref (p);
}

Message *
Message::_downcast ( ::CORBA::ValueBase *v)
{
  return dynamic_cast< ::Message * > (v);
}

const char *
Message::_tao_obv_repository_id (void) const
{
  return this->_tao_obv_static_repository_id ();
}

void
Message::_tao_obv_truncatable_repo_ids (Repository_Id_List& ids) const
{
  ids.push_back (this->_tao_obv_static_repository_id ());
}

void
Message::_tao_any_destructor (void *_tao_void_pointer)
{
  Message *_tao_tmp_pointer =
    static_cast<Message *> (_tao_void_pointer);
  ::CORBA::remove_ref (_tao_tmp_pointer);
}

// TAO extension - the virtual _type method.
::CORBA::TypeCode_ptr Message::_tao_type (void) const
{
  return ::_tc_Message;
}

Message::~Message (void)
{}

::CORBA::Boolean
Message::_tao_marshal_v (TAO_OutputCDR & strm) const
{
  TAO_ChunkInfo ci (this->is_truncatable_ || this->chunking_);
  return this->_tao_marshal__Message (strm, ci);
}

::CORBA::Boolean
Message::_tao_unmarshal_v (TAO_InputCDR & strm)
{
  TAO_ChunkInfo ci (this->is_truncatable_ || this->chunking_, 1);
  return this->_tao_unmarshal__Message (strm,ci);
}

::CORBA::Boolean
Message::_tao_match_formal_type (ptrdiff_t formal_type_id) const
{
  return formal_type_id == reinterpret_cast<ptrdiff_t> (Message::_downcast);
}

::CORBA::Boolean
Message::_tao_unmarshal (
    TAO_InputCDR &strm,
    Message *&new_object
  )
{
  ::CORBA::ValueBase *base = 0;
  ::CORBA::Boolean is_indirected = false;
  ::CORBA::Boolean is_null_object = false;
  ::CORBA::Boolean const retval =
    ::CORBA::ValueBase::_tao_unmarshal_pre (
        strm,
        base,
        Message::_tao_obv_static_repository_id (),
        is_null_object,
        is_indirected
      );

  ::CORBA::ValueBase_var owner (base);

  if (!retval)
    return false;

  if (is_null_object)
    return true;

  if (!is_indirected && !base->_tao_unmarshal_v (strm))
    return false;

  // Now base must point to the unmarshaled object.
  // Align the pointer to the right subobject.
  new_object = Message::_downcast (base);
  if (0 == new_object)
    return false;

  if (is_indirected)
    new_object->_add_ref ();

  owner._retn ();
  return true;
}

// TAO_IDL - Generated from
// be/be_visitor_sequence/sequence_cs.cpp:70

#if !defined (_MESSAGE_ADDRLIST_CS_)
#define _MESSAGE_ADDRLIST_CS_

Message::AddrList::AddrList (void)
{}

Message::AddrList::AddrList (
    ::CORBA::ULong max)
  : ::TAO::unbounded_basic_string_sequence<char> (max)
{}

Message::AddrList::AddrList (
    ::CORBA::ULong max,
    ::CORBA::ULong length,
    ::CORBA::Char * * buffer,
    ::CORBA::Boolean release
  )
  : ::TAO::unbounded_basic_string_sequence<char>
    (max, length, buffer, release)
{}

Message::AddrList::AddrList (
    const AddrList &seq)
  : ::TAO::unbounded_basic_string_sequence<char> (seq)
{}

Message::AddrList::~AddrList (void)
{}

void Message::AddrList::_tao_any_destructor (
    void * _tao_void_pointer)
{
  AddrList * _tao_tmp_pointer =
    static_cast<AddrList *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

#endif /* end #if !defined */

// TAO_IDL - Generated from
// be/be_visitor_typecode/alias_typecode.cpp:49



// TAO_IDL - Generated from
// be/be_visitor_typecode/typecode_defn.cpp:461


#ifndef _TAO_TYPECODE_Message_AddrList_GUARD
#define _TAO_TYPECODE_Message_AddrList_GUARD

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

namespace TAO
{
  namespace TypeCode
  {
    namespace
    {
      TAO::TypeCode::Sequence< ::CORBA::TypeCode_ptr const *,
                              TAO::Null_RefCount_Policy>
        Message_AddrList_0 (
          ::CORBA::tk_sequence,
          &CORBA::_tc_string,
          0U);

      ::CORBA::TypeCode_ptr const tc_Message_AddrList_0 =
        &Message_AddrList_0;
    }
  }
}

TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_TYPECODE_Message_AddrList_GUARD */

static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_Message_AddrList (
    ::CORBA::tk_alias,
    "IDL:Message/AddrList:1.0",
    "AddrList",
    &TAO::TypeCode::tc_Message_AddrList_0);

::CORBA::TypeCode_ptr const Message::_tc_AddrList =
  &_tao_tc_Message_AddrList;

// TAO_IDL - Generated from
// be/be_visitor_interface/interface_cs.cpp:48

// Traits specializations for Messenger.

Messenger_ptr
TAO::Objref_Traits<Messenger>::duplicate (
    Messenger_ptr p)
{
  return Messenger::_duplicate (p);
}

void
TAO::Objref_Traits<Messenger>::release (
    Messenger_ptr p)
{
  ::CORBA::release (p);
}

Messenger_ptr
TAO::Objref_Traits<Messenger>::nil (void)
{
  return Messenger::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<Messenger>::marshal (
    const Messenger_ptr p,
    TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:88

::CORBA::Boolean
Messenger::send_message (
  ::Message *& msg)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }

  TAO::Arg_Traits< ::ACE_InputCDR::to_boolean>::ret_val _tao_retval;
  TAO::Arg_Traits< ::Message>::inout_arg_val _tao_msg (msg);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_msg
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      2,
      "send_message",
      12,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY

    );

  _tao_call.invoke (0, 0);

  return _tao_retval.retn ();
}

Messenger::Messenger (void)
{
}

Messenger::~Messenger (void)
{
}

void
Messenger::_tao_any_destructor (void *_tao_void_pointer)
{
  Messenger *_tao_tmp_pointer =
    static_cast<Messenger *> (_tao_void_pointer);
  ::CORBA::release (_tao_tmp_pointer);
}

Messenger_ptr
Messenger::_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return
    TAO::Narrow_Utils<Messenger>::narrow (
        _tao_objref,
        "IDL:Messenger:1.0");
}

Messenger_ptr
Messenger::_unchecked_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return
    TAO::Narrow_Utils<Messenger>::unchecked_narrow (
        _tao_objref);
}

Messenger_ptr
Messenger::_nil (void)
{
  return 0;
}

Messenger_ptr
Messenger::_duplicate (Messenger_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  return obj;
}

void
Messenger::_tao_release (Messenger_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
Messenger::_is_a (const char *value)
{
  if (
      ACE_OS::strcmp (
          value,
          "IDL:Messenger:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        ) == 0
    )
    {
      return true; // success using local knowledge
    }
  else
    {
      return this->::CORBA::Object::_is_a (value);
    }
}

const char* Messenger::_interface_repository_id (void) const
{
  return "IDL:Messenger:1.0";
}

::CORBA::Boolean
Messenger::marshal (TAO_OutputCDR &cdr)
{
  return (cdr << this);
}

// TAO_IDL - Generated from
// be/be_visitor_typecode/objref_typecode.cpp:70

static TAO::TypeCode::Objref<char const *,
                             TAO::Null_RefCount_Policy>
  _tao_tc_Messenger (
    ::CORBA::tk_objref,
    "IDL:Messenger:1.0",
    "Messenger");

::CORBA::TypeCode_ptr const _tc_Messenger =
  &_tao_tc_Messenger;

// TAO_IDL - Generated from
// be/be_visitor_valuetype/valuetype_obv_cs.cpp:44

OBV_Message::OBV_Message (void)
: require_truncation_ (false)
{}

OBV_Message::OBV_Message (
    const ::Message::AddrList & _tao_init_addrs_,
    const char * _tao_init_user_,
    const char * _tao_init_subject_,
    const char * _tao_init_text_)
: require_truncation_ (false)
{
  addrs_ (_tao_init_addrs_);
  user_ (_tao_init_user_);
  subject_ (_tao_init_subject_);
  text_ (_tao_init_text_);
}

OBV_Message::~OBV_Message (void)
{}

::CORBA::Boolean
OBV_Message::_tao_marshal__Message (TAO_OutputCDR &strm, TAO_ChunkInfo& ci) const
{
  return _tao_marshal_state (strm, ci);
}

::CORBA::Boolean
OBV_Message::_tao_unmarshal__Message (TAO_InputCDR &strm, TAO_ChunkInfo& ci)
{
  return _tao_unmarshal_state (strm, ci);
}

// TAO_IDL - Generated from
// be/be_visitor_valuetype/field_cs.cpp:762

/// Accessor to set the member.
void
OBV_Message::addrs_ (const Message::AddrList &val)
{
  this->_pd_addrs_ = val;
}

/// Readonly get method.
const Message::AddrList &
OBV_Message::addrs_ (void) const
{
  return this->_pd_addrs_;
}

/// Read/write get method.
Message::AddrList &
OBV_Message::addrs_ (void)
{
  return this->_pd_addrs_;
}

// TAO_IDL - Generated from
// be/be_visitor_valuetype/field_cs.cpp:834

/// Accessor to set the member.
void
OBV_Message::user_ (char *val)
{
  this->_pd_user_ = (val);
}

/// Accessor to set the member.
void
OBV_Message::user_ (const char *val)
{
  // Set the value.
  this->_pd_user_ = ::CORBA::string_dup (val);
}

/// Accessor to set the member.
void
OBV_Message::user_ (const ::CORBA::String_var &val)
{
  ::CORBA::String_var user__var = val;
  this->_pd_user_ = user__var._retn ();
}

const char *
OBV_Message::user_ (void) const // get method
{
  return this->_pd_user_;
}

// TAO_IDL - Generated from
// be/be_visitor_valuetype/field_cs.cpp:834

/// Accessor to set the member.
void
OBV_Message::subject_ (char *val)
{
  this->_pd_subject_ = (val);
}

/// Accessor to set the member.
void
OBV_Message::subject_ (const char *val)
{
  // Set the value.
  this->_pd_subject_ = ::CORBA::string_dup (val);
}

/// Accessor to set the member.
void
OBV_Message::subject_ (const ::CORBA::String_var &val)
{
  ::CORBA::String_var subject__var = val;
  this->_pd_subject_ = subject__var._retn ();
}

const char *
OBV_Message::subject_ (void) const // get method
{
  return this->_pd_subject_;
}

// TAO_IDL - Generated from
// be/be_visitor_valuetype/field_cs.cpp:834

/// Accessor to set the member.
void
OBV_Message::text_ (char *val)
{
  this->_pd_text_ = (val);
}

/// Accessor to set the member.
void
OBV_Message::text_ (const char *val)
{
  // Set the value.
  this->_pd_text_ = ::CORBA::string_dup (val);
}

/// Accessor to set the member.
void
OBV_Message::text_ (const ::CORBA::String_var &val)
{
  ::CORBA::String_var text__var = val;
  this->_pd_text_ = text__var._retn ();
}

const char *
OBV_Message::text_ (void) const // get method
{
  return this->_pd_text_;
}

// TAO_IDL - Generated from
// be/be_visitor_valuetype/any_op_cs.cpp:45
TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<Message>::to_value (
      ::CORBA::ValueBase *&_tao_elem
    ) const
  {
    ::CORBA::add_ref (this->value_);
    _tao_elem = this->value_;
    return true;
  }
}


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    Message *_tao_elem
  )
{
  #ifdef TAO_VALUETYPE_COPYING_ANY_INSERTION_USES_COPY_VALUE
    Message *_tao_copy =
      _tao_elem ?
        Message::_downcast (_tao_elem->_copy_value ())
        : 0;
    _tao_any <<= &_tao_copy;
  #else
    ::CORBA::add_ref (_tao_elem);
    _tao_any <<= &_tao_elem;
  #endif
}

// Non-copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    Message **_tao_elem
  )
{
  TAO::Any_Impl_T<Message>::insert (
      _tao_any,
      Message::_tao_any_destructor,
      _tc_Message,
      *_tao_elem
    );
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    Message *&_tao_elem
  )
{
  return
    TAO::Any_Impl_T<Message>::extract (
        _tao_any,
        Message::_tao_any_destructor,
        _tc_Message,
        _tao_elem
      );
}


TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_interface/any_op_cs.cpp:38
TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<Messenger>::to_object (
      ::CORBA::Object_ptr &_tao_elem) const
  {
    _tao_elem = ::CORBA::Object::_duplicate (this->value_);
    return true;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



/// Copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    Messenger_ptr _tao_elem)
{
  Messenger_ptr _tao_objptr =
    Messenger::_duplicate (_tao_elem);
  _tao_any <<= &_tao_objptr;
}

/// Non-copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    Messenger_ptr *_tao_elem)
{
  TAO::Any_Impl_T<Messenger>::insert (
      _tao_any,
      Messenger::_tao_any_destructor,
      _tc_Messenger,
      *_tao_elem);
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    Messenger_ptr &_tao_elem)
{
  return
    TAO::Any_Impl_T<Messenger>::extract (
        _tao_any,
        Messenger::_tao_any_destructor,
        _tc_Messenger,
        _tao_elem);
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_valuetype.cpp:512

void
CORBA::add_ref (Message * vt)
{
  if (vt != 0)
    {
      vt->_add_ref ();
    }
}

void
CORBA::remove_ref (Message * vt)
{
  if (vt != 0)
    {
      vt->_remove_ref ();
    }
}

// TAO_IDL - Generated from
// be/be_visitor_sequence/cdr_op_cs.cpp:93
#if !defined _TAO_CDR_OP_Message_AddrList_CPP_
#define _TAO_CDR_OP_Message_AddrList_CPP_

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Message::AddrList &_tao_sequence)
{
  return TAO::marshal_sequence(strm, _tao_sequence);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Message::AddrList &_tao_sequence)
{
  return TAO::demarshal_sequence(strm, _tao_sequence);
}


TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_CDR_OP_Message_AddrList_CPP_ */

// TAO_IDL - Generated from
// be/be_visitor_valuetype/cdr_op_cs.cpp:60


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean
operator<< (
    TAO_OutputCDR &strm,
    const Message *_tao_valuetype
  )
{
  return
    ::CORBA::ValueBase::_tao_marshal (
        strm,
        _tao_valuetype,
        reinterpret_cast<ptrdiff_t> (&Message::_downcast)
      );
}

::CORBA::Boolean
operator>> (
    TAO_InputCDR &strm,
    Message *&_tao_valuetype
  )
{
  return Message::_tao_unmarshal (strm, _tao_valuetype);
}


TAO_END_VERSIONED_NAMESPACE_DECL

// TAO_IDL - Generated from
// be/be_visitor_valuetype/marshal_cs.cpp:33

::CORBA::Boolean
OBV_Message::_tao_marshal_state (TAO_OutputCDR &strm, TAO_ChunkInfo&ci) const
{
  if (! ci.start_chunk (strm))
    return false;

  CORBA::Boolean const ret =
      (strm << _pd_addrs_) &&
      (strm << _pd_user_.in ()) &&
      (strm << _pd_subject_.in ()) &&
      (strm << _pd_text_.in ());
  if ( ! ret)
    return false;

  if (! ci.end_chunk (strm))
    return false;

  return true;
}

::CORBA::Boolean
OBV_Message::_tao_unmarshal_state (TAO_InputCDR &strm, TAO_ChunkInfo&ci)
{
  if (!ci.handle_chunking (strm))
    return false;

  CORBA::Boolean const ret =
      (strm >> _pd_addrs_) &&
      (strm >> _pd_user_.out ()) &&
      (strm >> _pd_subject_.out ()) &&
      (strm >> _pd_text_.out ());
  if (!ret)
    return false;

  if (this->require_truncation_)
    return ci.skip_chunks (strm);

  else
    return ci.handle_chunking (strm);


}

void
OBV_Message::truncation_hook (void)
{
  this->require_truncation_ = true;
}



// TAO_IDL - Generated from
// be/be_visitor_interface/cdr_op_cs.cpp:51

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Messenger_ptr _tao_objref)
{
  ::CORBA::Object_ptr _tao_corba_obj = _tao_objref;
  return (strm << _tao_corba_obj);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Messenger_ptr &_tao_objref)
{
  ::CORBA::Object_var obj;

  if (!(strm >> obj.inout ()))
    {
      return false;
    }

  typedef ::Messenger RHS_SCOPED_NAME;

  // Narrow to the right type.
  _tao_objref =
    TAO::Narrow_Utils<RHS_SCOPED_NAME>::unchecked_narrow (obj.in ());

  return true;
}

TAO_END_VERSIONED_NAMESPACE_DECL



