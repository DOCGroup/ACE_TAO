// -*- C++ -*-
/**
 * Code generated by the The ACE ORB (TAO) IDL Compiler v2.4.1
 * TAO and the TAO IDL Compiler have been developed by:
 *       Center for Distributed Object Computing
 *       Washington University
 *       St. Louis, MO
 *       USA
 *       http://www.cs.wustl.edu/~schmidt/doc-center.html
 * and
 *       Distributed Object Computing Laboratory
 *       University of California at Irvine
 *       Irvine, CA
 *       USA
 * and
 *       Institute for Software Integrated Systems
 *       Vanderbilt University
 *       Nashville, TN
 *       USA
 *       http://www.isis.vanderbilt.edu/
 *
 * Information about TAO is available at:
 *     http://www.dre.vanderbilt.edu/~schmidt/TAO.html
 **/

// TAO_IDL - Generated from
// be/be_codegen.cpp:149

#ifndef _TAO_IDL_BANKC_RLTVPZ_H_
#define _TAO_IDL_BANKC_RLTVPZ_H_

#include /**/ "ace/pre.h"


#include /**/ "ace/config-all.h"

#if !defined (ACE_LACKS_PRAGMA_ONCE)
# pragma once
#endif /* ACE_LACKS_PRAGMA_ONCE */


#include "tao/AnyTypeCode/AnyTypeCode_methods.h"
#include "tao/AnyTypeCode/Any.h"
#include "tao/Valuetype/ValueBase.h"
#include "tao/Valuetype/Valuetype_Adapter_Factory_Impl.h"
#include "tao/Valuetype/ValueFactory.h"
#include "tao/ORB.h"
#include "tao/SystemException.h"
#include "tao/Basic_Types.h"
#include "tao/ORB_Constants.h"
#include "tao/Object.h"
#include "tao/String_Manager_T.h"
#include "tao/Valuetype/Value_VarOut_T.h"
#include "tao/Objref_VarOut_T.h"
#include "tao/Arg_Traits_T.h"
#include "tao/Basic_Arguments.h"
#include "tao/Special_Basic_Arguments.h"
#include "tao/Any_Insert_Policy_T.h"
#include "tao/Fixed_Size_Argument_T.h"
#include "tao/Var_Size_Argument_T.h"
#include "tao/Object_Argument_T.h"
#include "tao/UB_String_Arguments.h"
#include /**/ "tao/Version.h"
#include /**/ "tao/Versioned_Namespace.h"

#if TAO_MAJOR_VERSION != 2 || TAO_MINOR_VERSION != 4 || TAO_MICRO_VERSION != 1
#error This file should be regenerated with TAO_IDL
#endif

#if defined (TAO_EXPORT_MACRO)
#undef TAO_EXPORT_MACRO
#endif
#define TAO_EXPORT_MACRO 

// TAO_IDL - Generated from
// be/be_visitor_root/root_ch.cpp:157
TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<typename T> class Narrow_Utils;
}
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_valuetype.cpp:564



#if !defined (_PERSON__VAR_OUT_CH_)
#define _PERSON__VAR_OUT_CH_

class Person;
typedef
  TAO_Value_Var_T<
      Person
    >
  Person_var;

typedef
  TAO_Value_Out_T<
      Person
    >
  Person_out;

#endif /* end #if !defined */

// TAO_IDL - Generated from
// be/be_visitor_valuetype/valuetype_ch.cpp:50

class  Person
  : public virtual ::CORBA::ValueBase
{
public:

  // TAO_IDL - Generated from
  // be/be_type.cpp:304

  typedef Person * _ptr_type;
  typedef Person_var _var_type;
  typedef Person_out _out_type;

  static void _tao_any_destructor (void *);

  static Person* _downcast ( ::CORBA::ValueBase *v);
  
  /// TAO extensions or internals
  static ::CORBA::Boolean _tao_unmarshal (
      TAO_InputCDR &strm,
      Person *&new_object);
  
  virtual const char* _tao_obv_repository_id (void) const;

  virtual void _tao_obv_truncatable_repo_ids (Repository_Id_List &) const;

  static const char* _tao_obv_static_repository_id (void);

  virtual ::CORBA::TypeCode_ptr _tao_type (void) const;

public:

  // TAO_IDL - Generated from
  // be/be_visitor_valuetype/field_ch.cpp:608

  virtual void name (char *val) = 0;
  virtual void name (const char *val) = 0;
  virtual void name (const ::CORBA::String_var &val) = 0;
  virtual const char *name (void) const = 0;

public:

  // TAO_IDL - Generated from
  // be/be_visitor_valuetype/field_ch.cpp:459

  virtual void balance (const ::CORBA::Long) = 0;
  virtual ::CORBA::Long balance (void) const = 0;

public:

public:

  // TAO_IDL - Generated from
  // be/be_visitor_valuetype/valuetype_ch.cpp:396
  
public:
  virtual void debit (
      ::CORBA::Long
    ) = 0;

  // TAO_IDL - Generated from
  // be/be_visitor_valuetype/valuetype_ch.cpp:238

protected:
  Person (void);
  virtual ~Person (void);

  virtual ::CORBA::Boolean _tao_marshal_v (TAO_OutputCDR &) const;
  virtual ::CORBA::Boolean _tao_unmarshal_v (TAO_InputCDR &);
  virtual ::CORBA::Boolean _tao_match_formal_type (ptrdiff_t ) const;
  
private:
  Person (const Person &);
  void operator= (const Person &);
  
protected:
  virtual ::CORBA::Boolean
  _tao_marshal__Person (TAO_OutputCDR &, TAO_ChunkInfo &) const = 0;

  virtual ::CORBA::Boolean
  _tao_unmarshal__Person (TAO_InputCDR &, TAO_ChunkInfo &) = 0;
};

// TAO_IDL - Generated from
// be/be_visitor_valuetype/valuetype_init_ch.cpp:57

class  Person_init
  : public virtual ::CORBA::ValueFactoryBase
{
public:

  virtual Person* create (
    const char * name) = 0;

  static Person_init* _downcast ( ::CORBA::ValueFactoryBase *);

  // TAO-specific extensions
public:
  virtual const char* tao_repository_id (void);

protected:
  Person_init (void);

protected:
  virtual ~Person_init (void);
};

// TAO_IDL - Generated from
// be/be_visitor_typecode/typecode_decl.cpp:34

extern  ::CORBA::TypeCode_ptr const _tc_Person;

// TAO_IDL - Generated from
// be/be_interface.cpp:748

#if !defined (_TRANSACTION__VAR_OUT_CH_)
#define _TRANSACTION__VAR_OUT_CH_

class Transaction;
typedef Transaction *Transaction_ptr;

typedef
  TAO_Objref_Var_T<
      Transaction
    >
  Transaction_var;

typedef
  TAO_Objref_Out_T<
      Transaction
    >
  Transaction_out;

#endif /* end #if !defined */

// TAO_IDL - Generated from
// be/be_visitor_interface/interface_ch.cpp:40

class  Transaction
  : public virtual ::CORBA::Object
{
public:
  friend class TAO::Narrow_Utils<Transaction>;

  // TAO_IDL - Generated from
  // be/be_type.cpp:304

  typedef Transaction_ptr _ptr_type;
  typedef Transaction_var _var_type;
  typedef Transaction_out _out_type;

  static void _tao_any_destructor (void *);

  // The static operations.
  static Transaction_ptr _duplicate (Transaction_ptr obj);

  static void _tao_release (Transaction_ptr obj);

  static Transaction_ptr _narrow (::CORBA::Object_ptr obj);
  static Transaction_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
  static Transaction_ptr _nil (void);

  virtual ::CORBA::Long update (
    ::Person * p);

  // TAO_IDL - Generated from
  // be/be_visitor_interface/interface_ch.cpp:137

  virtual ::CORBA::Boolean _is_a (const char *type_id);
  virtual const char* _interface_repository_id (void) const;
  virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);

protected:
  // Concrete interface only.
  Transaction (void);

  // Concrete non-local interface only.
  Transaction (
      ::IOP::IOR *ior,
      TAO_ORB_Core *orb_core);
  
  // Non-local interface only.
  Transaction (
      TAO_Stub *objref,
      ::CORBA::Boolean _tao_collocated = false,
      TAO_Abstract_ServantBase *servant = 0,
      TAO_ORB_Core *orb_core = 0);

  virtual ~Transaction (void);

private:
  // Private and unimplemented for concrete interfaces.
  Transaction (const Transaction &);

  void operator= (const Transaction &);
};

// TAO_IDL - Generated from
// be/be_visitor_typecode/typecode_decl.cpp:34

extern  ::CORBA::TypeCode_ptr const _tc_Transaction;

// TAO_IDL - Generated from
// be/be_visitor_arg_traits.cpp:66

TAO_BEGIN_VERSIONED_NAMESPACE_DECL


// Arg traits specializations.
namespace TAO
{

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:306

#if !defined (_PERSON__ARG_TRAITS_)
#define _PERSON__ARG_TRAITS_

  template<>
  class Arg_Traits< ::Person>
    : public
        Object_Arg_Traits_T<
            ::Person *,
            ::Person_var,
            ::Person_out,
            TAO::Value_Traits<Person>,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:145

#if !defined (_TRANSACTION__ARG_TRAITS_)
#define _TRANSACTION__ARG_TRAITS_

  template<>
  class  Arg_Traits< ::Transaction>
    : public
        Object_Arg_Traits_T<
            ::Transaction_ptr,
            ::Transaction_var,
            ::Transaction_out,
            TAO::Objref_Traits<Transaction>,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

#endif /* end #if !defined */
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_valuetype/valuetype_obv_ch.cpp:44

// OBV_ class
class  OBV_Person
  : public virtual Person
{

public:

  // TAO_IDL - Generated from
  // be/be_visitor_valuetype/field_ch.cpp:608

  virtual void name (char *val);
  virtual void name (const char *val);
  virtual void name (const ::CORBA::String_var &val);
  virtual const char *name (void) const;

public:

  // TAO_IDL - Generated from
  // be/be_visitor_valuetype/field_ch.cpp:459

  virtual void balance (const ::CORBA::Long);
  virtual ::CORBA::Long balance (void) const;

public:

protected:
  OBV_Person (void);
  OBV_Person (
      const char * _tao_init_name,
      ::CORBA::Long _tao_init_balance
    );
  virtual ~OBV_Person (void);
  
protected:
  virtual ::CORBA::Boolean
  _tao_marshal__Person (TAO_OutputCDR &, TAO_ChunkInfo &) const;

  virtual ::CORBA::Boolean
  _tao_unmarshal__Person (TAO_InputCDR &, TAO_ChunkInfo &);

  ::CORBA::Boolean _tao_marshal_state (TAO_OutputCDR &, TAO_ChunkInfo &) const;
  ::CORBA::Boolean _tao_unmarshal_state (TAO_InputCDR &, TAO_ChunkInfo &);
  virtual void truncation_hook (void);

private:
  ::TAO::String_Manager _pd_name;
  ::CORBA::Long _pd_balance;
  CORBA::Boolean require_truncation_;
};

// TAO_IDL - Generated from
// be/be_visitor_traits.cpp:60

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Traits specializations.
namespace TAO
{

#if !defined (_PERSON__TRAITS_)
#define _PERSON__TRAITS_

  template<>
  struct  Value_Traits<Person>
  {
    static void add_ref (Person *);
    static void remove_ref (Person *);
    static void release (Person *);
  };

#endif /* end #if !defined */

#if !defined (_TRANSACTION__TRAITS_)
#define _TRANSACTION__TRAITS_

  template<>
  struct  Objref_Traits< ::Transaction>
  {
    static ::Transaction_ptr duplicate (
        ::Transaction_ptr p);
    static void release (
        ::Transaction_ptr p);
    static ::Transaction_ptr nil (void);
    static ::CORBA::Boolean marshal (
        const ::Transaction_ptr p,
        TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */
}
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_valuetype/any_op_ch.cpp:43


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 void operator<<= (::CORBA::Any &, Person *); // copying
 void operator<<= (::CORBA::Any &, Person **); // non-copying
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, Person *&);
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_interface/any_op_ch.cpp:41


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 void operator<<= (::CORBA::Any &, Transaction_ptr); // copying
 void operator<<= (::CORBA::Any &, Transaction_ptr *); // non-copying
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, Transaction_ptr &);
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_valuetype.cpp:456


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

namespace CORBA
{
  extern  void add_ref (Person *);
  extern  void remove_ref (Person *);
}
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_valuetype/cdr_op_ch.cpp:49


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 ::CORBA::Boolean operator<< (TAO_OutputCDR &, const Person *);
 ::CORBA::Boolean operator>> (TAO_InputCDR &, Person *&);

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_interface/cdr_op_ch.cpp:41

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 ::CORBA::Boolean operator<< (TAO_OutputCDR &, const Transaction_ptr );
 ::CORBA::Boolean operator>> (TAO_InputCDR &, Transaction_ptr &);

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_codegen.cpp:1700
#if defined (__ACE_INLINE__)
#include "bankC.inl"
#endif /* defined INLINE */

#include /**/ "ace/post.h"

#endif /* ifndef */

