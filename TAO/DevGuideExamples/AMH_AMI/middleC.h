// -*- C++ -*-
/**
 * Code generated by the The ACE ORB (TAO) IDL Compiler v2.4.1
 * TAO and the TAO IDL Compiler have been developed by:
 *       Center for Distributed Object Computing
 *       Washington University
 *       St. Louis, MO
 *       USA
 *       http://www.cs.wustl.edu/~schmidt/doc-center.html
 * and
 *       Distributed Object Computing Laboratory
 *       University of California at Irvine
 *       Irvine, CA
 *       USA
 * and
 *       Institute for Software Integrated Systems
 *       Vanderbilt University
 *       Nashville, TN
 *       USA
 *       http://www.isis.vanderbilt.edu/
 *
 * Information about TAO is available at:
 *     http://www.dre.vanderbilt.edu/~schmidt/TAO.html
 **/

// TAO_IDL - Generated from
// be/be_codegen.cpp:149

#ifndef _TAO_IDL_MIDDLEC_SHTZ1Z_H_
#define _TAO_IDL_MIDDLEC_SHTZ1Z_H_

#include /**/ "ace/pre.h"


#include /**/ "ace/config-all.h"

#if !defined (ACE_LACKS_PRAGMA_ONCE)
# pragma once
#endif /* ACE_LACKS_PRAGMA_ONCE */


#include "tao/AnyTypeCode/AnyTypeCode_methods.h"
#include "tao/AnyTypeCode/Any.h"
#include "tao/Valuetype/ValueBase.h"
#include "tao/Valuetype/Valuetype_Adapter_Factory_Impl.h"
#include "tao/Valuetype/ValueFactory.h"
#include "tao/ORB.h"
#include "tao/SystemException.h"
#include "tao/Basic_Types.h"
#include "tao/ORB_Constants.h"
#include "tao/Object.h"
#include "tao/Messaging/Messaging.h"
#include "tao/Valuetype/Value_VarOut_T.h"
#include "tao/Objref_VarOut_T.h"
#include "tao/Arg_Traits_T.h"
#include "tao/Basic_Arguments.h"
#include "tao/Special_Basic_Arguments.h"
#include "tao/Any_Insert_Policy_T.h"
#include "tao/Fixed_Size_Argument_T.h"
#include "tao/Var_Size_Argument_T.h"
#include "tao/Object_Argument_T.h"
#include "tao/UB_String_Arguments.h"
#include /**/ "tao/Version.h"
#include /**/ "tao/Versioned_Namespace.h"

#if TAO_MAJOR_VERSION != 2 || TAO_MINOR_VERSION != 4 || TAO_MICRO_VERSION != 1
#error This file should be regenerated with TAO_IDL
#endif

#if defined (TAO_EXPORT_MACRO)
#undef TAO_EXPORT_MACRO
#endif
#define TAO_EXPORT_MACRO 

// TAO_IDL - Generated from
// be/be_visitor_root/root_ch.cpp:157
TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<typename T> class Narrow_Utils;
}
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_interface.cpp:748

#if !defined (_MIDDLE__VAR_OUT_CH_)
#define _MIDDLE__VAR_OUT_CH_

class AMI_MiddleHandler;
typedef AMI_MiddleHandler *AMI_MiddleHandler_ptr;

class Middle;
typedef Middle *Middle_ptr;

typedef
  TAO_Objref_Var_T<
      Middle
    >
  Middle_var;

typedef
  TAO_Objref_Out_T<
      Middle
    >
  Middle_out;

#endif /* end #if !defined */

// TAO_IDL - Generated from
// be/be_visitor_interface/interface_ch.cpp:40

class  Middle
  : public virtual ::CORBA::Object
{
public:
  friend class TAO::Narrow_Utils<Middle>;

  // TAO_IDL - Generated from
  // be/be_type.cpp:304

  typedef Middle_ptr _ptr_type;
  typedef Middle_var _var_type;
  typedef Middle_out _out_type;

  static void _tao_any_destructor (void *);

  // The static operations.
  static Middle_ptr _duplicate (Middle_ptr obj);

  static void _tao_release (Middle_ptr obj);

  static Middle_ptr _narrow (::CORBA::Object_ptr obj);
  static Middle_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
  static Middle_ptr _nil (void);

  virtual char * get_the_answer (
    const char * question);

  virtual void sendc_get_the_answer (
    ::AMI_MiddleHandler_ptr ami_handler,
    const char * question);

  // TAO_IDL - Generated from
  // be/be_visitor_interface/interface_ch.cpp:137

  virtual ::CORBA::Boolean _is_a (const char *type_id);
  virtual const char* _interface_repository_id (void) const;
  virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);

protected:
  // Concrete interface only.
  Middle (void);

  // Concrete non-local interface only.
  Middle (
      ::IOP::IOR *ior,
      TAO_ORB_Core *orb_core);
  
  // Non-local interface only.
  Middle (
      TAO_Stub *objref,
      ::CORBA::Boolean _tao_collocated = false,
      TAO_Abstract_ServantBase *servant = 0,
      TAO_ORB_Core *orb_core = 0);

  virtual ~Middle (void);

private:
  // Private and unimplemented for concrete interfaces.
  Middle (const Middle &);

  void operator= (const Middle &);
};

// TAO_IDL - Generated from
// be/be_visitor_typecode/typecode_decl.cpp:34

extern  ::CORBA::TypeCode_ptr const _tc_Middle;

// TAO_IDL - Generated from
// be/be_valuetype.cpp:564



#if !defined (_AMH_MIDDLEEXCEPTIONHOLDER__VAR_OUT_CH_)
#define _AMH_MIDDLEEXCEPTIONHOLDER__VAR_OUT_CH_

class AMH_MiddleExceptionHolder;
typedef
  TAO_Value_Var_T<
      AMH_MiddleExceptionHolder
    >
  AMH_MiddleExceptionHolder_var;

typedef
  TAO_Value_Out_T<
      AMH_MiddleExceptionHolder
    >
  AMH_MiddleExceptionHolder_out;

#endif /* end #if !defined */

// TAO_IDL - Generated from
// be/be_visitor_valuetype/valuetype_ch.cpp:50

class  AMH_MiddleExceptionHolder
  : public virtual ::CORBA::DefaultValueRefCountBase
{
public:

  // TAO_IDL - Generated from
  // be/be_type.cpp:304

  typedef AMH_MiddleExceptionHolder * _ptr_type;
  typedef AMH_MiddleExceptionHolder_var _var_type;
  typedef AMH_MiddleExceptionHolder_out _out_type;

  static void _tao_any_destructor (void *);

  AMH_MiddleExceptionHolder ( ::CORBA::Exception *ex)
    : exception (ex)
  {}

  virtual ~AMH_MiddleExceptionHolder (void);
  virtual ::CORBA::ValueBase *_copy_value (void);

  static AMH_MiddleExceptionHolder* _downcast ( ::CORBA::ValueBase *v);
  
  /// TAO extensions or internals
  static ::CORBA::Boolean _tao_unmarshal (
      TAO_InputCDR &strm,
      AMH_MiddleExceptionHolder *&new_object);
  
  virtual const char* _tao_obv_repository_id (void) const;

  virtual void _tao_obv_truncatable_repo_ids (Repository_Id_List &) const;

  static const char* _tao_obv_static_repository_id (void);

  virtual ::CORBA::TypeCode_ptr _tao_type (void) const;

public:

  // TAO_IDL - Generated from
  // be/be_visitor_valuetype/valuetype_ch.cpp:396
  
public:
  virtual void raise_get_the_answer (void);

public:

  // TAO_IDL - Generated from
  // be/be_visitor_valuetype/valuetype_ch.cpp:396
  
public:
  virtual void raise_sendc_get_the_answer (void);

// TAO_IDL - Generated from
// be/be_visitor_valuetype/valuetype_ch.cpp:238

protected:
  AMH_MiddleExceptionHolder (void);
  virtual ::CORBA::Boolean _tao_marshal_v (TAO_OutputCDR &) const;
  virtual ::CORBA::Boolean _tao_unmarshal_v (TAO_InputCDR &);
  virtual ::CORBA::Boolean _tao_match_formal_type (ptrdiff_t ) const;
  
private:
  AMH_MiddleExceptionHolder (const AMH_MiddleExceptionHolder &);
  void operator= (const AMH_MiddleExceptionHolder &);
  
  ::CORBA::Exception *exception;
  
protected:
  virtual ::CORBA::Boolean
  _tao_marshal__AMH_MiddleExceptionHolder (TAO_OutputCDR &, TAO_ChunkInfo &) const;

  virtual ::CORBA::Boolean
  _tao_unmarshal__AMH_MiddleExceptionHolder (TAO_InputCDR &, TAO_ChunkInfo &);
};

// TAO_IDL - Generated from
// be/be_visitor_typecode/typecode_decl.cpp:34

extern  ::CORBA::TypeCode_ptr const _tc_AMH_MiddleExceptionHolder;

// TAO_IDL - Generated from
// be/be_interface.cpp:748

#if !defined (_AMH_MIDDLERESPONSEHANDLER__VAR_OUT_CH_)
#define _AMH_MIDDLERESPONSEHANDLER__VAR_OUT_CH_

class AMI_AMH_MiddleResponseHandlerHandler;
typedef AMI_AMH_MiddleResponseHandlerHandler *AMI_AMH_MiddleResponseHandlerHandler_ptr;

class AMH_MiddleResponseHandler;
typedef AMH_MiddleResponseHandler *AMH_MiddleResponseHandler_ptr;

typedef
  TAO_Objref_Var_T<
      AMH_MiddleResponseHandler
    >
  AMH_MiddleResponseHandler_var;

typedef
  TAO_Objref_Out_T<
      AMH_MiddleResponseHandler
    >
  AMH_MiddleResponseHandler_out;

#endif /* end #if !defined */

// TAO_IDL - Generated from
// be/be_visitor_interface/interface_ch.cpp:40

class  AMH_MiddleResponseHandler
  : public virtual ::CORBA::Object
{
public:

  // TAO_IDL - Generated from
  // be/be_type.cpp:304

  typedef AMH_MiddleResponseHandler_ptr _ptr_type;
  typedef AMH_MiddleResponseHandler_var _var_type;
  typedef AMH_MiddleResponseHandler_out _out_type;

  static void _tao_any_destructor (void *);

  // The static operations.
  static AMH_MiddleResponseHandler_ptr _duplicate (AMH_MiddleResponseHandler_ptr obj);

  static void _tao_release (AMH_MiddleResponseHandler_ptr obj);

  static AMH_MiddleResponseHandler_ptr _narrow (::CORBA::Object_ptr obj);
  static AMH_MiddleResponseHandler_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
  static AMH_MiddleResponseHandler_ptr _nil (void);

  virtual void get_the_answer (
    const char * return_value) = 0;

  virtual void get_the_answer_excep (
    ::AMH_MiddleExceptionHolder * holder) = 0;

  // TAO_IDL - Generated from
  // be/be_visitor_interface/interface_ch.cpp:137

  virtual ::CORBA::Boolean _is_a (const char *type_id);
  virtual const char* _interface_repository_id (void) const;
  virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);

protected:
  // Abstract or local interface only.
  AMH_MiddleResponseHandler (void);

  

  virtual ~AMH_MiddleResponseHandler (void);

private:
  // Private and unimplemented for concrete interfaces.
  AMH_MiddleResponseHandler (const AMH_MiddleResponseHandler &);

  void operator= (const AMH_MiddleResponseHandler &);
};

// TAO_IDL - Generated from
// be/be_visitor_typecode/typecode_decl.cpp:34

extern  ::CORBA::TypeCode_ptr const _tc_AMH_MiddleResponseHandler;

// TAO_IDL - Generated from
// be/be_interface.cpp:748

#if !defined (_AMI_MIDDLEHANDLER__VAR_OUT_CH_)
#define _AMI_MIDDLEHANDLER__VAR_OUT_CH_

class AMI_MiddleHandler;
typedef AMI_MiddleHandler *AMI_MiddleHandler_ptr;

typedef
  TAO_Objref_Var_T<
      AMI_MiddleHandler
    >
  AMI_MiddleHandler_var;

typedef
  TAO_Objref_Out_T<
      AMI_MiddleHandler
    >
  AMI_MiddleHandler_out;

#endif /* end #if !defined */

// TAO_IDL - Generated from
// be/be_visitor_interface/interface_ch.cpp:40

class  AMI_MiddleHandler
  : public virtual ::Messaging::ReplyHandler

{
public:
  friend class TAO::Narrow_Utils<AMI_MiddleHandler>;

  // TAO_IDL - Generated from
  // be/be_type.cpp:304

  typedef AMI_MiddleHandler_ptr _ptr_type;
  typedef AMI_MiddleHandler_var _var_type;
  typedef AMI_MiddleHandler_out _out_type;

  static void _tao_any_destructor (void *);

  // The static operations.
  static AMI_MiddleHandler_ptr _duplicate (AMI_MiddleHandler_ptr obj);

  static void _tao_release (AMI_MiddleHandler_ptr obj);

  static AMI_MiddleHandler_ptr _narrow (::CORBA::Object_ptr obj);
  static AMI_MiddleHandler_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
  static AMI_MiddleHandler_ptr _nil (void);

  virtual void get_the_answer (
    const char * ami_return_val);

  static void
  get_the_answer_reply_stub (
    TAO_InputCDR &_tao_reply_cdr,
    ::Messaging::ReplyHandler_ptr _tao_reply_handler,
    ::CORBA::ULong reply_status);

  virtual void get_the_answer_excep (
    ::Messaging::ExceptionHolder * excep_holder);

  // TAO_IDL - Generated from
  // be/be_visitor_interface/interface_ch.cpp:137

  virtual ::CORBA::Boolean _is_a (const char *type_id);
  virtual const char* _interface_repository_id (void) const;
  virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);

protected:
  // Concrete interface only.
  AMI_MiddleHandler (void);

  // Concrete non-local interface only.
  AMI_MiddleHandler (
      ::IOP::IOR *ior,
      TAO_ORB_Core *orb_core);
  
  // Non-local interface only.
  AMI_MiddleHandler (
      TAO_Stub *objref,
      ::CORBA::Boolean _tao_collocated = false,
      TAO_Abstract_ServantBase *servant = 0,
      TAO_ORB_Core *orb_core = 0);

  virtual ~AMI_MiddleHandler (void);

private:
  // Private and unimplemented for concrete interfaces.
  AMI_MiddleHandler (const AMI_MiddleHandler &);

  void operator= (const AMI_MiddleHandler &);
};

// TAO_IDL - Generated from
// be/be_visitor_typecode/typecode_decl.cpp:34

extern  ::CORBA::TypeCode_ptr const _tc_AMI_MiddleHandler;

// TAO_IDL - Generated from
// be/be_visitor_arg_traits.cpp:66

TAO_BEGIN_VERSIONED_NAMESPACE_DECL


// Arg traits specializations.
namespace TAO
{

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:306

#if !defined (_MESSAGING_EXCEPTIONHOLDER__ARG_TRAITS_)
#define _MESSAGING_EXCEPTIONHOLDER__ARG_TRAITS_

  template<>
  class Arg_Traits< ::Messaging::ExceptionHolder>
    : public
        Object_Arg_Traits_T<
            ::Messaging::ExceptionHolder *,
            ::Messaging::ExceptionHolder_var,
            ::Messaging::ExceptionHolder_out,
            TAO::Value_Traits<Messaging::ExceptionHolder>,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:145

#if !defined (_MIDDLE__ARG_TRAITS_)
#define _MIDDLE__ARG_TRAITS_

  template<>
  class  Arg_Traits< ::Middle>
    : public
        Object_Arg_Traits_T<
            ::Middle_ptr,
            ::Middle_var,
            ::Middle_out,
            TAO::Objref_Traits<Middle>,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:306

#if !defined (_AMH_MIDDLEEXCEPTIONHOLDER__ARG_TRAITS_)
#define _AMH_MIDDLEEXCEPTIONHOLDER__ARG_TRAITS_

  template<>
  class Arg_Traits< ::AMH_MiddleExceptionHolder>
    : public
        Object_Arg_Traits_T<
            ::AMH_MiddleExceptionHolder *,
            ::AMH_MiddleExceptionHolder_var,
            ::AMH_MiddleExceptionHolder_out,
            TAO::Value_Traits<AMH_MiddleExceptionHolder>,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:145

#if !defined (_AMI_MIDDLEHANDLER__ARG_TRAITS_)
#define _AMI_MIDDLEHANDLER__ARG_TRAITS_

  template<>
  class  Arg_Traits< ::AMI_MiddleHandler>
    : public
        Object_Arg_Traits_T<
            ::AMI_MiddleHandler_ptr,
            ::AMI_MiddleHandler_var,
            ::AMI_MiddleHandler_out,
            TAO::Objref_Traits<AMI_MiddleHandler>,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

#endif /* end #if !defined */
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_valuetype/valuetype_obv_ch.cpp:44

// OBV_ class
class  OBV_AMH_MiddleExceptionHolder
  : public virtual AMH_MiddleExceptionHolder
{

protected:
  OBV_AMH_MiddleExceptionHolder (void);
  virtual ~OBV_AMH_MiddleExceptionHolder (void);
  
protected:
  virtual ::CORBA::Boolean
  _tao_marshal__AMH_MiddleExceptionHolder (TAO_OutputCDR &, TAO_ChunkInfo &) const;

  virtual ::CORBA::Boolean
  _tao_unmarshal__AMH_MiddleExceptionHolder (TAO_InputCDR &, TAO_ChunkInfo &);

  ::CORBA::Boolean _tao_marshal_state (TAO_OutputCDR &, TAO_ChunkInfo &) const;
  ::CORBA::Boolean _tao_unmarshal_state (TAO_InputCDR &, TAO_ChunkInfo &);
  virtual void truncation_hook (void);

private:
  CORBA::Boolean require_truncation_;
};

// TAO_IDL - Generated from
// be/be_visitor_traits.cpp:60

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Traits specializations.
namespace TAO
{

#if !defined (_MIDDLE__TRAITS_)
#define _MIDDLE__TRAITS_

  template<>
  struct  Objref_Traits< ::Middle>
  {
    static ::Middle_ptr duplicate (
        ::Middle_ptr p);
    static void release (
        ::Middle_ptr p);
    static ::Middle_ptr nil (void);
    static ::CORBA::Boolean marshal (
        const ::Middle_ptr p,
        TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_AMH_MIDDLEEXCEPTIONHOLDER__TRAITS_)
#define _AMH_MIDDLEEXCEPTIONHOLDER__TRAITS_

  template<>
  struct  Value_Traits<AMH_MiddleExceptionHolder>
  {
    static void add_ref (AMH_MiddleExceptionHolder *);
    static void remove_ref (AMH_MiddleExceptionHolder *);
    static void release (AMH_MiddleExceptionHolder *);
  };

#endif /* end #if !defined */

#if !defined (_AMH_MIDDLERESPONSEHANDLER__TRAITS_)
#define _AMH_MIDDLERESPONSEHANDLER__TRAITS_

  template<>
  struct  Objref_Traits< ::AMH_MiddleResponseHandler>
  {
    static ::AMH_MiddleResponseHandler_ptr duplicate (
        ::AMH_MiddleResponseHandler_ptr p);
    static void release (
        ::AMH_MiddleResponseHandler_ptr p);
    static ::AMH_MiddleResponseHandler_ptr nil (void);
    static ::CORBA::Boolean marshal (
        const ::AMH_MiddleResponseHandler_ptr p,
        TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_AMI_MIDDLEHANDLER__TRAITS_)
#define _AMI_MIDDLEHANDLER__TRAITS_

  template<>
  struct  Objref_Traits< ::AMI_MiddleHandler>
  {
    static ::AMI_MiddleHandler_ptr duplicate (
        ::AMI_MiddleHandler_ptr p);
    static void release (
        ::AMI_MiddleHandler_ptr p);
    static ::AMI_MiddleHandler_ptr nil (void);
    static ::CORBA::Boolean marshal (
        const ::AMI_MiddleHandler_ptr p,
        TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */
}
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_interface/any_op_ch.cpp:41


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 void operator<<= (::CORBA::Any &, Middle_ptr); // copying
 void operator<<= (::CORBA::Any &, Middle_ptr *); // non-copying
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, Middle_ptr &);
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_valuetype/any_op_ch.cpp:43


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 void operator<<= (::CORBA::Any &, AMH_MiddleExceptionHolder *); // copying
 void operator<<= (::CORBA::Any &, AMH_MiddleExceptionHolder **); // non-copying
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, AMH_MiddleExceptionHolder *&);
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_interface/any_op_ch.cpp:41


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 void operator<<= (::CORBA::Any &, AMH_MiddleResponseHandler_ptr); // copying
 void operator<<= (::CORBA::Any &, AMH_MiddleResponseHandler_ptr *); // non-copying
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, AMH_MiddleResponseHandler_ptr &);
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_interface/any_op_ch.cpp:41


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 void operator<<= (::CORBA::Any &, AMI_MiddleHandler_ptr); // copying
 void operator<<= (::CORBA::Any &, AMI_MiddleHandler_ptr *); // non-copying
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, AMI_MiddleHandler_ptr &);
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_interface/cdr_op_ch.cpp:41

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 ::CORBA::Boolean operator<< (TAO_OutputCDR &, const Middle_ptr );
 ::CORBA::Boolean operator>> (TAO_InputCDR &, Middle_ptr &);

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_valuetype.cpp:456


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

namespace CORBA
{
  extern  void add_ref (AMH_MiddleExceptionHolder *);
  extern  void remove_ref (AMH_MiddleExceptionHolder *);
}
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_valuetype/cdr_op_ch.cpp:49


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 ::CORBA::Boolean operator<< (TAO_OutputCDR &, const AMH_MiddleExceptionHolder *);
 ::CORBA::Boolean operator>> (TAO_InputCDR &, AMH_MiddleExceptionHolder *&);

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_interface/cdr_op_ch.cpp:41

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 ::CORBA::Boolean operator<< (TAO_OutputCDR &, const AMI_MiddleHandler_ptr );
 ::CORBA::Boolean operator>> (TAO_InputCDR &, AMI_MiddleHandler_ptr &);

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_codegen.cpp:1700
#if defined (__ACE_INLINE__)
#include "middleC.inl"
#endif /* defined INLINE */

#include /**/ "ace/post.h"

#endif /* ifndef */

