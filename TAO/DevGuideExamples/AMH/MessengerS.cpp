// -*- C++ -*-
/**
 * Code generated by the The ACE ORB (TAO) IDL Compiler v2.4.1
 * TAO and the TAO IDL Compiler have been developed by:
 *       Center for Distributed Object Computing
 *       Washington University
 *       St. Louis, MO
 *       USA
 *       http://www.cs.wustl.edu/~schmidt/doc-center.html
 * and
 *       Distributed Object Computing Laboratory
 *       University of California at Irvine
 *       Irvine, CA
 *       USA
 * and
 *       Institute for Software Integrated Systems
 *       Vanderbilt University
 *       Nashville, TN
 *       USA
 *       http://www.isis.vanderbilt.edu/
 *
 * Information about TAO is available at:
 *     http://www.dre.vanderbilt.edu/~schmidt/TAO.html
 **/


// TAO_IDL - Generated from
// be/be_codegen.cpp:649

#include "amh_pch.h"
#ifndef _TAO_IDL_MESSENGERS_V5ZIGB_CPP_
#define _TAO_IDL_MESSENGERS_V5ZIGB_CPP_


#include "MessengerS.h"
#include "tao/PortableServer/Operation_Table_Perfect_Hash.h"
#include "tao/PortableServer/Upcall_Command.h"
#include "tao/PortableServer/Upcall_Wrapper.h"
#include "tao/TAO_Server_Request.h"
#include "tao/ORB_Core.h"
#include "tao/Profile.h"
#include "tao/Stub.h"
#include "tao/IFR_Client_Adapter.h"
#include "tao/Object_T.h"
#include "tao/AnyTypeCode/TypeCode.h"
#include "tao/AnyTypeCode/DynamicC.h"
#include "tao/CDR.h"
#include "tao/operation_details.h"
#include "tao/PortableInterceptor.h"
#include "tao/Thread_Lane_Resources.h"
#include "tao/Buffer_Allocator_T.h"
#include "tao/Messaging/AMH_Skeletons.h"
#include "ace/Auto_Functor.h"
#include "ace/Dynamic_Service.h"
#include "ace/Malloc_Allocator.h"

// TAO_IDL - Generated from
// be/be_interface.cpp:1865

class TAO_DevGuide_AMH_Messenger_Perfect_Hash_OpTable
  : public TAO_Perfect_Hash_OpTable
{
private:
  unsigned int hash (const char *str, unsigned int len);

public:
  const TAO_operation_db_entry * lookup (const char *str, unsigned int len);
};

/* C++ code produced by gperf version 2.8 (ACE version) */
/* Command-line: /mnt/win_d/projects/ATCD/ACE/bin/ace_gperf -m -M -J -c -C -D -E -T -f 0 -F 0,0 -a -o -t -p -K opname -L C++ -Z TAO_DevGuide_AMH_Messenger_Perfect_Hash_OpTable -N lookup  */
unsigned int
TAO_DevGuide_AMH_Messenger_Perfect_Hash_OpTable::hash (const char *str, unsigned int len)
{
  static const unsigned char asso_values[] =
    {
     18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
     18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
     18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
     18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
     18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
     18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
     18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
     18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
     18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
     18, 18, 18, 18, 18,  0, 18,  0, 18, 18,
      0,  5, 18, 18, 18, 18, 18, 18, 18, 18,
     18, 18, 18, 18, 18,  0,  0, 18, 18, 18,
     18, 18, 18, 18, 18, 18, 18, 18,
    };
  return len + asso_values[static_cast<int>(str[len - 1])] + asso_values[static_cast<int>(str[0])];
}

const TAO_operation_db_entry *
TAO_DevGuide_AMH_Messenger_Perfect_Hash_OpTable::lookup (const char *str, unsigned int len)
{
  enum
    {
      TOTAL_KEYWORDS = 6,
      MIN_WORD_LENGTH = 5,
      MAX_WORD_LENGTH = 14,
      MIN_HASH_VALUE = 5,
      MAX_HASH_VALUE = 17,
      HASH_VALUE_RANGE = 13,
      DUPLICATES = 0,
      WORDLIST_SIZE = 11
    };

  static const TAO_operation_db_entry wordlist[] =
    {
      {"",0,0},{"",0,0},{"",0,0},{"",0,0},{"",0,0},
      {"_is_a", &TAO_AMH_Skeletons::_is_a_amh_skel, 0},
      {"",0,0},{"",0,0},{"",0,0},{"",0,0},
      {"_component", &TAO_AMH_Skeletons::_component_amh_skel, 0},
      {"",0,0},{"",0,0},
      {"_non_existent", &TAO_AMH_Skeletons::_non_existent_amh_skel, 0},
      {"_repository_id", &TAO_AMH_Skeletons::_repository_id_amh_skel, 0},
      {"_interface", &TAO_AMH_Skeletons::_interface_amh_skel, 0},
      {"",0,0},
      {"send_message", &POA_DevGuide::AMH_Messenger::send_message_skel, 0},
    };

  if (len <= MAX_WORD_LENGTH && len >= MIN_WORD_LENGTH)
    {
      unsigned int key = hash (str, len);

      if (key <= MAX_HASH_VALUE && key >= MIN_HASH_VALUE)
        {
          const char *s = wordlist[key].opname;

          if (*str == *s && !ACE_OS::strncmp (str + 1, s + 1, len - 1))
            return &wordlist[key];
        }
    }
  return 0;
}

static TAO_DevGuide_AMH_Messenger_Perfect_Hash_OpTable tao_DevGuide_AMH_Messenger_optable;

// TAO_IDL - Generated from
// be/be_visitor_interface/interface_ss.cpp:90

POA_DevGuide::AMH_Messenger::AMH_Messenger (void)
  : TAO_ServantBase ()
{
  this->optable_ = &tao_DevGuide_AMH_Messenger_optable;
}

POA_DevGuide::AMH_Messenger::AMH_Messenger (const AMH_Messenger& rhs)
  : TAO_Abstract_ServantBase (rhs),
    TAO_ServantBase (rhs)
{
}

POA_DevGuide::AMH_Messenger::~AMH_Messenger (void)
{
}


// TAO_IDL - Generated from
// be/be_visitor_operation/amh_ss.cpp:305

void
POA_DevGuide::AMH_Messenger::send_message_skel (
    TAO_ServerRequest & _tao_server_request,
    TAO::Portable_Server::Servant_Upcall * /* context */,
    TAO_ServantBase * _tao_servant)
{
  POA_DevGuide::AMH_Messenger * const _tao_impl =
    dynamic_cast<POA_DevGuide::AMH_Messenger *> (_tao_servant);
  if (!_tao_impl)
    throw ::CORBA::INTERNAL ();

  ::CORBA::String_var user_name;
  ::CORBA::String_var subject;
  ::CORBA::String_var message;
  TAO_InputCDR & _tao_in = *_tao_server_request.incoming ();

  if (!(
      (_tao_in >> user_name.out ()) &&
      (_tao_in >> subject.out ()) &&
      (_tao_in >> message.out ())
    ))
    throw ::CORBA::MARSHAL();

  TAO_ORB_Core *orb_core =
    _tao_server_request.orb ()->orb_core ();

  TAO_AMH_BUFFER_ALLOCATOR* amh_allocator =
    orb_core->lane_resources ().amh_response_handler_allocator ();

  TAO::TAO_Buffer_Allocator<
      POA_DevGuide::TAO_AMH_MessengerResponseHandler,
      TAO_AMH_BUFFER_ALLOCATOR
    > buffer_allocator (amh_allocator);

  POA_DevGuide::TAO_AMH_MessengerResponseHandler_ptr _tao_rh_ptr =
    buffer_allocator.allocate();

  if (!_tao_rh_ptr)
    throw ::CORBA::NO_MEMORY ();

  _tao_rh_ptr->init (_tao_server_request, amh_allocator);

  ACE_Utils::Auto_Functor <POA_DevGuide::TAO_AMH_MessengerResponseHandler, TAO::ARH_Refcount_Functor> safe_rd_(_tao_rh_ptr);

  _tao_impl->send_message (
      safe_rd_.get (),
      user_name.in (),
      subject.in (),
      message.in ()
    );
}

// TAO_IDL - Generated from
// be/be_visitor_interface/interface_ss.cpp:163



::CORBA::Boolean POA_DevGuide::AMH_Messenger::_is_a (const char* value)
{
  return
    (
      ACE_OS::strcmp (
          value,
          "IDL:DevGuide/Messenger:1.0"
        ) == 0 ||
      !ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        )
    );
}

const char* POA_DevGuide::AMH_Messenger::_interface_repository_id (void) const
{
  return "IDL:DevGuide/Messenger:1.0";
}

// TAO_IDL - Generated from
// be/be_visitor_interface/amh_ss.cpp:116

void
POA_DevGuide::AMH_Messenger::_dispatch (
    TAO_ServerRequest &req,
    TAO::Portable_Server::Servant_Upcall *context)
{
  this->asynchronous_upcall_dispatch (req,context,this);
}

// TAO_IDL - Generated from
// be/be_visitor_interface/amh_ss.cpp:65

DevGuide::Messenger*
POA_DevGuide::AMH_Messenger::_this (void)
{
  TAO_Stub *stub = this->_create_stub ();

  TAO_Stub_Auto_Ptr safe_stub (stub);
  ::CORBA::Object_ptr tmp = CORBA::Object_ptr ();

  ::CORBA::Boolean _tao_opt_colloc =
    stub->servant_orb_var ()->orb_core ()->optimize_collocation_objects ();

  ACE_NEW_RETURN (
      tmp,
      ::CORBA::Object (stub, _tao_opt_colloc, this),
      0
    );

  ::CORBA::Object_var obj = tmp;
  (void) safe_stub.release ();

  typedef ::DevGuide::Messenger STUB_SCOPED_NAME;
  return
    TAO::Narrow_Utils<STUB_SCOPED_NAME>::unchecked_narrow (obj.in ());

}

// TAO_IDL - Generated from
// be/be_interface.cpp:1865

class TAO_DevGuide_Messenger_Perfect_Hash_OpTable
  : public TAO_Perfect_Hash_OpTable
{
private:
  unsigned int hash (const char *str, unsigned int len);

public:
  const TAO_operation_db_entry * lookup (const char *str, unsigned int len);
};

/* C++ code produced by gperf version 2.8 (ACE version) */
/* Command-line: /mnt/win_d/projects/ATCD/ACE/bin/ace_gperf -m -M -J -c -C -D -E -T -f 0 -F 0,0 -a -o -t -p -K opname -L C++ -Z TAO_DevGuide_Messenger_Perfect_Hash_OpTable -N lookup  */
unsigned int
TAO_DevGuide_Messenger_Perfect_Hash_OpTable::hash (const char *str, unsigned int len)
{
  static const unsigned char asso_values[] =
    {
     18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
     18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
     18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
     18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
     18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
     18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
     18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
     18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
     18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
     18, 18, 18, 18, 18,  0, 18,  0, 18, 18,
      0,  5, 18, 18, 18, 18, 18, 18, 18, 18,
     18, 18, 18, 18, 18,  0,  0, 18, 18, 18,
     18, 18, 18, 18, 18, 18, 18, 18,
    };
  return len + asso_values[static_cast<int>(str[len - 1])] + asso_values[static_cast<int>(str[0])];
}

const TAO_operation_db_entry *
TAO_DevGuide_Messenger_Perfect_Hash_OpTable::lookup (const char *str, unsigned int len)
{
  enum
    {
      TOTAL_KEYWORDS = 6,
      MIN_WORD_LENGTH = 5,
      MAX_WORD_LENGTH = 14,
      MIN_HASH_VALUE = 5,
      MAX_HASH_VALUE = 17,
      HASH_VALUE_RANGE = 13,
      DUPLICATES = 0,
      WORDLIST_SIZE = 11
    };

  static const TAO_operation_db_entry wordlist[] =
    {
      {"",0,0},{"",0,0},{"",0,0},{"",0,0},{"",0,0},
      {"_is_a", &TAO_ServantBase::_is_a_thru_poa_skel, 0},
      {"",0,0},{"",0,0},{"",0,0},{"",0,0},
      {"_component", &TAO_ServantBase::_component_thru_poa_skel, 0},
      {"",0,0},{"",0,0},
      {"_non_existent", &TAO_ServantBase::_non_existent_thru_poa_skel, 0},
      {"_repository_id", &TAO_ServantBase::_repository_id_thru_poa_skel, 0},
      {"_interface", &TAO_ServantBase::_interface_skel, 0},
      {"",0,0},
      {"send_message", &POA_DevGuide::Messenger::send_message_skel, 0},
    };

  if (len <= MAX_WORD_LENGTH && len >= MIN_WORD_LENGTH)
    {
      unsigned int key = hash (str, len);

      if (key <= MAX_HASH_VALUE && key >= MIN_HASH_VALUE)
        {
          const char *s = wordlist[key].opname;

          if (*str == *s && !ACE_OS::strncmp (str + 1, s + 1, len - 1))
            return &wordlist[key];
        }
    }
  return 0;
}

static TAO_DevGuide_Messenger_Perfect_Hash_OpTable tao_DevGuide_Messenger_optable;

// TAO_IDL - Generated from
// be/be_visitor_interface/interface_ss.cpp:90

POA_DevGuide::Messenger::Messenger (void)
  : TAO_ServantBase ()
{
  this->optable_ = &tao_DevGuide_Messenger_optable;
}

POA_DevGuide::Messenger::Messenger (const Messenger& rhs)
  : TAO_Abstract_ServantBase (rhs),
    TAO_ServantBase (rhs)
{
}

POA_DevGuide::Messenger::~Messenger (void)
{
}

namespace POA_DevGuide
{


  // TAO_IDL - Generated from
  // be/be_visitor_operation/upcall_command_ss.cpp:80

  class send_message_Messenger
    : public TAO::Upcall_Command
  {
  public:
    inline send_message_Messenger (
      POA_DevGuide::Messenger * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::ACE_InputCDR::to_boolean>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::ACE_InputCDR::to_boolean> (
          this->operation_details_,
          this->args_);

      TAO::SArg_Traits< char *>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< char *> (
          this->operation_details_,
          this->args_,
          1);

      TAO::SArg_Traits< char *>::in_arg_type arg_2 =
        TAO::Portable_Server::get_in_arg< char *> (
          this->operation_details_,
          this->args_,
          2);

      TAO::SArg_Traits< char *>::inout_arg_type arg_3 =
        TAO::Portable_Server::get_inout_arg< char *> (
          this->operation_details_,
          this->args_,
          3);

      retval =
        this->servant_->send_message (
          arg_1
          , arg_2
          , arg_3);
    }

  private:
    POA_DevGuide::Messenger * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_ss.cpp:168

void POA_DevGuide::Messenger::send_message_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::ACE_InputCDR::to_boolean>::ret_val retval;
  TAO::SArg_Traits< char *>::in_arg_val _tao_user_name;
  TAO::SArg_Traits< char *>::in_arg_val _tao_subject;
  TAO::SArg_Traits< char *>::inout_arg_val _tao_message;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_user_name,
      &_tao_subject,
      &_tao_message
    };

  static size_t const nargs = 4;

  POA_DevGuide::Messenger * const impl =
    dynamic_cast<POA_DevGuide::Messenger *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  send_message_Messenger command (
    impl,
    server_request.operation_details (),
    args);

  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}



// TAO_IDL - Generated from
// be/be_visitor_interface/interface_ss.cpp:163



::CORBA::Boolean POA_DevGuide::Messenger::_is_a (const char* value)
{
  return
    (
      ACE_OS::strcmp (
          value,
          "IDL:DevGuide/Messenger:1.0"
        ) == 0 ||
      !ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        )
    );
}

const char* POA_DevGuide::Messenger::_interface_repository_id (void) const
{
  return "IDL:DevGuide/Messenger:1.0";
}

// TAO_IDL - Generated from
// be/be_visitor_interface/interface_ss.cpp:423

void POA_DevGuide::Messenger::_dispatch (
  TAO_ServerRequest & req,
  TAO::Portable_Server::Servant_Upcall* servant_upcall)
{
  this->synchronous_upcall_dispatch (req, servant_upcall, this);
}

// TAO_IDL - Generated from
// be/be_visitor_interface/interface_ss.cpp:370

DevGuide::Messenger *
POA_DevGuide::Messenger::_this (void)
{
  TAO_Stub *stub = this->_create_stub ();

  TAO_Stub_Auto_Ptr safe_stub (stub);
  ::CORBA::Object_ptr tmp = CORBA::Object_ptr ();

  ::CORBA::Boolean const _tao_opt_colloc =
    stub->servant_orb_var ()->orb_core ()->optimize_collocation_objects ();

  ACE_NEW_RETURN (
      tmp,
      ::CORBA::Object (stub, _tao_opt_colloc, this),
      0);

  ::CORBA::Object_var obj = tmp;
  (void) safe_stub.release ();

  typedef ::DevGuide::Messenger STUB_SCOPED_NAME;
  return
    TAO::Narrow_Utils<STUB_SCOPED_NAME>::unchecked_narrow (
        obj.in ());
}

// TAO_IDL - Generated from
// be/be_visitor_interface/amh_rh_ss.cpp:68

POA_DevGuide::TAO_AMH_MessengerResponseHandler::TAO_AMH_MessengerResponseHandler (void)
: TAO_AMH_Response_Handler (),
  ::DevGuide::AMH_MessengerResponseHandler ()
{
}

POA_DevGuide::TAO_AMH_MessengerResponseHandler::~TAO_AMH_MessengerResponseHandler (void)
{
}

// TAO_IDL - Generated from
// be/be_visitor_operation/amh_rh_ss.cpp:77

void
POA_DevGuide::TAO_AMH_MessengerResponseHandler::send_message (
  ::CORBA::Boolean return_value,
  const char * message)
{
  this->_tao_rh_init_reply ();

  if (!(
      (_tao_out << ::ACE_OutputCDR::from_boolean (return_value)) &&
      (_tao_out << message)
    ))
    {
      throw ::CORBA::MARSHAL();
    }

  this->_tao_rh_send_reply ();
}

// TAO_IDL - Generated from
// be/be_visitor_operation/amh_rh_ss.cpp:77

void
POA_DevGuide::TAO_AMH_MessengerResponseHandler::send_message_excep (
  ::DevGuide::AMH_MessengerExceptionHolder * holder)
{
  try
  {
    holder->raise_send_message ();
  }
  catch ( ::CORBA::Exception& ex)
  {
    this->_tao_rh_send_exception (ex);
  }
}

#endif /* ifndef */

