// -*- C++ -*-
/**
 * Code generated by the The ACE ORB (TAO) IDL Compiler v2.4.1
 * TAO and the TAO IDL Compiler have been developed by:
 *       Center for Distributed Object Computing
 *       Washington University
 *       St. Louis, MO
 *       USA
 *       http://www.cs.wustl.edu/~schmidt/doc-center.html
 * and
 *       Distributed Object Computing Laboratory
 *       University of California at Irvine
 *       Irvine, CA
 *       USA
 * and
 *       Institute for Software Integrated Systems
 *       Vanderbilt University
 *       Nashville, TN
 *       USA
 *       http://www.isis.vanderbilt.edu/
 *
 * Information about TAO is available at:
 *     http://www.dre.vanderbilt.edu/~schmidt/TAO.html
 **/

// TAO_IDL - Generated from
// be/be_codegen.cpp:149

#ifndef _TAO_IDL_BROKERC_JQL1GS_H_
#define _TAO_IDL_BROKERC_JQL1GS_H_

#include /**/ "ace/pre.h"


#include /**/ "ace/config-all.h"

#if !defined (ACE_LACKS_PRAGMA_ONCE)
# pragma once
#endif /* ACE_LACKS_PRAGMA_ONCE */


#include /**/ "Common_Export.h"
#include "tao/AnyTypeCode/AnyTypeCode_methods.h"
#include "tao/AnyTypeCode/Any.h"
#include "tao/ORB.h"
#include "tao/SystemException.h"
#include "tao/Basic_Types.h"
#include "tao/ORB_Constants.h"
#include "tao/Object.h"
#include "tao/String_Manager_T.h"
#include "tao/Objref_VarOut_T.h"
#include "tao/Arg_Traits_T.h"
#include "tao/Basic_Arguments.h"
#include "tao/Special_Basic_Arguments.h"
#include "tao/Any_Insert_Policy_T.h"
#include "tao/Fixed_Size_Argument_T.h"
#include "tao/Var_Size_Argument_T.h"
#include "tao/Object_Argument_T.h"
#include "tao/UB_String_Arguments.h"
#include /**/ "tao/Version.h"
#include /**/ "tao/Versioned_Namespace.h"

#include "CommonC.h"
#include "DistributorC.h"

#if TAO_MAJOR_VERSION != 2 || TAO_MINOR_VERSION != 4 || TAO_MICRO_VERSION != 1
#error This file should be regenerated with TAO_IDL
#endif

#if defined (TAO_EXPORT_MACRO)
#undef TAO_EXPORT_MACRO
#endif
#define TAO_EXPORT_MACRO RTCORBA_Quoter_Common_Export

// TAO_IDL - Generated from
// be/be_visitor_root/root_ch.cpp:157
TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<typename T> class Narrow_Utils;
}
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_module/module_ch.cpp:35

namespace Stock
{

  // TAO_IDL - Generated from
  // be/be_interface.cpp:748

#if !defined (_STOCK_STOCKBROKER__VAR_OUT_CH_)
#define _STOCK_STOCKBROKER__VAR_OUT_CH_

  class StockBroker;
  typedef StockBroker *StockBroker_ptr;

  typedef
    TAO_Objref_Var_T<
        StockBroker
      >
    StockBroker_var;

  typedef
    TAO_Objref_Out_T<
        StockBroker
      >
    StockBroker_out;

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // be/be_visitor_interface/interface_ch.cpp:40

  class RTCORBA_Quoter_Common_Export StockBroker
    : public virtual ::CORBA::Object
  {
  public:
    friend class TAO::Narrow_Utils<StockBroker>;

    // TAO_IDL - Generated from
    // be/be_type.cpp:304

    typedef StockBroker_ptr _ptr_type;
    typedef StockBroker_var _var_type;
    typedef StockBroker_out _out_type;

    static void _tao_any_destructor (void *);

    // The static operations.
    static StockBroker_ptr _duplicate (StockBroker_ptr obj);

    static void _tao_release (StockBroker_ptr obj);

    static StockBroker_ptr _narrow (::CORBA::Object_ptr obj);
    static StockBroker_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
    static StockBroker_ptr _nil (void);

    virtual ::Stock::StockNameConsumer_ptr get_consumer_notifier (
      void);

    virtual void connect_quoter_info (
      ::Stock::StockQuoter_ptr c);

    virtual ::Stock::StockQuoter_ptr disconnect_quoter_info (
      void);

    virtual ::Stock::StockQuoter_ptr get_connection_quoter_info (
      void);

    virtual void shutdown (
      void);

    // TAO_IDL - Generated from
    // be/be_visitor_interface/interface_ch.cpp:137

    virtual ::CORBA::Boolean _is_a (const char *type_id);
    virtual const char* _interface_repository_id (void) const;
    virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);

  protected:
    // Concrete interface only.
    StockBroker (void);

    // Concrete non-local interface only.
    StockBroker (
        ::IOP::IOR *ior,
        TAO_ORB_Core *orb_core);

    // Non-local interface only.
    StockBroker (
        TAO_Stub *objref,
        ::CORBA::Boolean _tao_collocated = false,
        TAO_Abstract_ServantBase *servant = 0,
        TAO_ORB_Core *orb_core = 0);

    virtual ~StockBroker (void);

  private:
    // Private and unimplemented for concrete interfaces.
    StockBroker (const StockBroker &);

    void operator= (const StockBroker &);
  };

  // TAO_IDL - Generated from
  // be/be_visitor_typecode/typecode_decl.cpp:34

  extern RTCORBA_Quoter_Common_Export ::CORBA::TypeCode_ptr const _tc_StockBroker;

  // TAO_IDL - Generated from
  // be/be_interface.cpp:748

#if !defined (_STOCK_STOCKBROKERHOME__VAR_OUT_CH_)
#define _STOCK_STOCKBROKERHOME__VAR_OUT_CH_

  class StockBrokerHome;
  typedef StockBrokerHome *StockBrokerHome_ptr;

  typedef
    TAO_Objref_Var_T<
        StockBrokerHome
      >
    StockBrokerHome_var;

  typedef
    TAO_Objref_Out_T<
        StockBrokerHome
      >
    StockBrokerHome_out;

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // be/be_visitor_interface/interface_ch.cpp:40

  class RTCORBA_Quoter_Common_Export StockBrokerHome
    : public virtual ::CORBA::Object
  {
  public:
    friend class TAO::Narrow_Utils<StockBrokerHome>;

    // TAO_IDL - Generated from
    // be/be_type.cpp:304

    typedef StockBrokerHome_ptr _ptr_type;
    typedef StockBrokerHome_var _var_type;
    typedef StockBrokerHome_out _out_type;

    static void _tao_any_destructor (void *);

    // The static operations.
    static StockBrokerHome_ptr _duplicate (StockBrokerHome_ptr obj);

    static void _tao_release (StockBrokerHome_ptr obj);

    static StockBrokerHome_ptr _narrow (::CORBA::Object_ptr obj);
    static StockBrokerHome_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
    static StockBrokerHome_ptr _nil (void);

    virtual ::Stock::StockBroker_ptr create (
      ::Stock::StockDistributor_ptr dist,
      const char * stock_name);

    // TAO_IDL - Generated from
    // be/be_visitor_interface/interface_ch.cpp:137

    virtual ::CORBA::Boolean _is_a (const char *type_id);
    virtual const char* _interface_repository_id (void) const;
    virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);

  protected:
    // Concrete interface only.
    StockBrokerHome (void);

    // Concrete non-local interface only.
    StockBrokerHome (
        ::IOP::IOR *ior,
        TAO_ORB_Core *orb_core);

    // Non-local interface only.
    StockBrokerHome (
        TAO_Stub *objref,
        ::CORBA::Boolean _tao_collocated = false,
        TAO_Abstract_ServantBase *servant = 0,
        TAO_ORB_Core *orb_core = 0);

    virtual ~StockBrokerHome (void);

  private:
    // Private and unimplemented for concrete interfaces.
    StockBrokerHome (const StockBrokerHome &);

    void operator= (const StockBrokerHome &);
  };

  // TAO_IDL - Generated from
  // be/be_visitor_typecode/typecode_decl.cpp:34

  extern RTCORBA_Quoter_Common_Export ::CORBA::TypeCode_ptr const _tc_StockBrokerHome;

// TAO_IDL - Generated from
// be/be_visitor_module/module_ch.cpp:64

} // module Stock

// TAO_IDL - Generated from
// be/be_visitor_arg_traits.cpp:66

TAO_BEGIN_VERSIONED_NAMESPACE_DECL


// Arg traits specializations.
namespace TAO
{

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:145

#if !defined (_STOCK_STOCKBROKER__ARG_TRAITS_)
#define _STOCK_STOCKBROKER__ARG_TRAITS_

  template<>
  class  Arg_Traits< ::Stock::StockBroker>
    : public
        Object_Arg_Traits_T<
            ::Stock::StockBroker_ptr,
            ::Stock::StockBroker_var,
            ::Stock::StockBroker_out,
            TAO::Objref_Traits<Stock::StockBroker>,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:145

#if !defined (_STOCK_STOCKBROKERHOME__ARG_TRAITS_)
#define _STOCK_STOCKBROKERHOME__ARG_TRAITS_

  template<>
  class  Arg_Traits< ::Stock::StockBrokerHome>
    : public
        Object_Arg_Traits_T<
            ::Stock::StockBrokerHome_ptr,
            ::Stock::StockBrokerHome_var,
            ::Stock::StockBrokerHome_out,
            TAO::Objref_Traits<Stock::StockBrokerHome>,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

#endif /* end #if !defined */
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_traits.cpp:60

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Traits specializations.
namespace TAO
{

#if !defined (_STOCK_STOCKBROKER__TRAITS_)
#define _STOCK_STOCKBROKER__TRAITS_

  template<>
  struct RTCORBA_Quoter_Common_Export Objref_Traits< ::Stock::StockBroker>
  {
    static ::Stock::StockBroker_ptr duplicate (
        ::Stock::StockBroker_ptr p);
    static void release (
        ::Stock::StockBroker_ptr p);
    static ::Stock::StockBroker_ptr nil (void);
    static ::CORBA::Boolean marshal (
        const ::Stock::StockBroker_ptr p,
        TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_STOCK_STOCKBROKERHOME__TRAITS_)
#define _STOCK_STOCKBROKERHOME__TRAITS_

  template<>
  struct RTCORBA_Quoter_Common_Export Objref_Traits< ::Stock::StockBrokerHome>
  {
    static ::Stock::StockBrokerHome_ptr duplicate (
        ::Stock::StockBrokerHome_ptr p);
    static void release (
        ::Stock::StockBrokerHome_ptr p);
    static ::Stock::StockBrokerHome_ptr nil (void);
    static ::CORBA::Boolean marshal (
        const ::Stock::StockBrokerHome_ptr p,
        TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */
}
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_interface/any_op_ch.cpp:41



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace Stock
{
  RTCORBA_Quoter_Common_Export void operator<<= ( ::CORBA::Any &, StockBroker_ptr); // copying
  RTCORBA_Quoter_Common_Export void operator<<= ( ::CORBA::Any &, StockBroker_ptr *); // non-copying
  RTCORBA_Quoter_Common_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, StockBroker_ptr &);
}

#else


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

RTCORBA_Quoter_Common_Export void operator<<= (::CORBA::Any &, Stock::StockBroker_ptr); // copying
RTCORBA_Quoter_Common_Export void operator<<= (::CORBA::Any &, Stock::StockBroker_ptr *); // non-copying
RTCORBA_Quoter_Common_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, Stock::StockBroker_ptr &);
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_interface/any_op_ch.cpp:41



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace Stock
{
  RTCORBA_Quoter_Common_Export void operator<<= ( ::CORBA::Any &, StockBrokerHome_ptr); // copying
  RTCORBA_Quoter_Common_Export void operator<<= ( ::CORBA::Any &, StockBrokerHome_ptr *); // non-copying
  RTCORBA_Quoter_Common_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, StockBrokerHome_ptr &);
}

#else


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

RTCORBA_Quoter_Common_Export void operator<<= (::CORBA::Any &, Stock::StockBrokerHome_ptr); // copying
RTCORBA_Quoter_Common_Export void operator<<= (::CORBA::Any &, Stock::StockBrokerHome_ptr *); // non-copying
RTCORBA_Quoter_Common_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, Stock::StockBrokerHome_ptr &);
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_interface/cdr_op_ch.cpp:41

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

RTCORBA_Quoter_Common_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const Stock::StockBroker_ptr );
RTCORBA_Quoter_Common_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, Stock::StockBroker_ptr &);

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_interface/cdr_op_ch.cpp:41

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

RTCORBA_Quoter_Common_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const Stock::StockBrokerHome_ptr );
RTCORBA_Quoter_Common_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, Stock::StockBrokerHome_ptr &);

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_codegen.cpp:1700
#if defined (__ACE_INLINE__)
#include "BrokerC.inl"
#endif /* defined INLINE */

#include /**/ "ace/post.h"

#endif /* ifndef */

