// -*- C++ -*-
/**
 * Code generated by the The ACE ORB (TAO) IDL Compiler v2.4.1
 * TAO and the TAO IDL Compiler have been developed by:
 *       Center for Distributed Object Computing
 *       Washington University
 *       St. Louis, MO
 *       USA
 *       http://www.cs.wustl.edu/~schmidt/doc-center.html
 * and
 *       Distributed Object Computing Laboratory
 *       University of California at Irvine
 *       Irvine, CA
 *       USA
 * and
 *       Institute for Software Integrated Systems
 *       Vanderbilt University
 *       Nashville, TN
 *       USA
 *       http://www.isis.vanderbilt.edu/
 *
 * Information about TAO is available at:
 *     http://www.dre.vanderbilt.edu/~schmidt/TAO.html
 **/

// TAO_IDL - Generated from
// be/be_codegen.cpp:149

#ifndef _TAO_IDL_DISTRIBUTORC_XDTDIF_H_
#define _TAO_IDL_DISTRIBUTORC_XDTDIF_H_

#include /**/ "ace/pre.h"


#include /**/ "ace/config-all.h"

#if !defined (ACE_LACKS_PRAGMA_ONCE)
# pragma once
#endif /* ACE_LACKS_PRAGMA_ONCE */


#include /**/ "Common_Export.h"
#include "tao/AnyTypeCode/AnyTypeCode_methods.h"
#include "tao/AnyTypeCode/Any.h"
#include "tao/ORB.h"
#include "tao/SystemException.h"
#include "tao/UserException.h"
#include "tao/Basic_Types.h"
#include "tao/ORB_Constants.h"
#include "tao/Object.h"
#include "tao/String_Manager_T.h"
#include "tao/RTCORBA/RTCORBA_includeA.h"
#include "tao/Objref_VarOut_T.h"
#include "tao/VarOut_T.h"
#include "tao/Arg_Traits_T.h"
#include "tao/Basic_Arguments.h"
#include "tao/Special_Basic_Arguments.h"
#include "tao/Any_Insert_Policy_T.h"
#include "tao/Fixed_Size_Argument_T.h"
#include "tao/Var_Size_Argument_T.h"
#include "tao/Object_Argument_T.h"
#include /**/ "tao/Version.h"
#include /**/ "tao/Versioned_Namespace.h"

#include "CommonC.h"
#include "tao/RTCORBA/RTCORBA_includeC.h"

#if TAO_MAJOR_VERSION != 2 || TAO_MINOR_VERSION != 4 || TAO_MICRO_VERSION != 1
#error This file should be regenerated with TAO_IDL
#endif

#if defined (TAO_EXPORT_MACRO)
#undef TAO_EXPORT_MACRO
#endif
#define TAO_EXPORT_MACRO RTCORBA_Quoter_Common_Export

// TAO_IDL - Generated from
// be/be_visitor_root/root_ch.cpp:157
TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<typename T> class Narrow_Utils;
}
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_module/module_ch.cpp:35

namespace Stock
{

  // TAO_IDL - Generated from
  // be/be_visitor_exception/exception_ch.cpp:41

  class RTCORBA_Quoter_Common_Export Invalid_Subscription : public ::CORBA::UserException
  {
  public:

    Invalid_Subscription (void);
    Invalid_Subscription (const Invalid_Subscription &);
    ~Invalid_Subscription (void);

    Invalid_Subscription &operator= (const Invalid_Subscription &);

    static void _tao_any_destructor (void *);

    static Invalid_Subscription *_downcast ( ::CORBA::Exception *);
    static const Invalid_Subscription *_downcast ( ::CORBA::Exception const *);

    static ::CORBA::Exception *_alloc (void);

    virtual ::CORBA::Exception *_tao_duplicate (void) const;

    virtual void _raise (void) const;

    virtual void _tao_encode (TAO_OutputCDR &cdr) const;
    virtual void _tao_decode (TAO_InputCDR &cdr);

    virtual ::CORBA::TypeCode_ptr _tao_type (void) const;
  };

  // TAO_IDL - Generated from
  // be/be_visitor_typecode/typecode_decl.cpp:34

  extern RTCORBA_Quoter_Common_Export ::CORBA::TypeCode_ptr const _tc_Invalid_Subscription;

  // TAO_IDL - Generated from
  // be/be_interface.cpp:748

#if !defined (_STOCK_STOCKDISTRIBUTOR__VAR_OUT_CH_)
#define _STOCK_STOCKDISTRIBUTOR__VAR_OUT_CH_

  class StockDistributor;
  typedef StockDistributor *StockDistributor_ptr;

  typedef
    TAO_Objref_Var_T<
        StockDistributor
      >
    StockDistributor_var;
  
  typedef
    TAO_Objref_Out_T<
        StockDistributor
      >
    StockDistributor_out;

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // be/be_visitor_interface/interface_ch.cpp:40

  class RTCORBA_Quoter_Common_Export StockDistributor
    : public virtual ::Stock::Trigger
  
  {
  public:
    friend class TAO::Narrow_Utils<StockDistributor>;

    // TAO_IDL - Generated from
    // be/be_type.cpp:304

    typedef StockDistributor_ptr _ptr_type;
    typedef StockDistributor_var _var_type;
    typedef StockDistributor_out _out_type;

    static void _tao_any_destructor (void *);

    // The static operations.
    static StockDistributor_ptr _duplicate (StockDistributor_ptr obj);

    static void _tao_release (StockDistributor_ptr obj);

    static StockDistributor_ptr _narrow (::CORBA::Object_ptr obj);
    static StockDistributor_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
    static StockDistributor_ptr _nil (void);

    virtual ::Stock::Cookie * subscribe_notifier (
      ::Stock::StockNameConsumer_ptr c,
      ::RTCORBA::Priority priority);

    virtual ::Stock::StockNameConsumer_ptr unsubscribe_notifier (
      ::Stock::Cookie * ck);

    virtual ::Stock::StockQuoter_ptr provide_quoter_info (
      ::Stock::Cookie * ck);

    virtual ::CORBA::Long notification_rate (
      void);

    virtual void notification_rate (
      ::CORBA::Long notification_rate);

    virtual void shutdown (
      void);

    // TAO_IDL - Generated from
    // be/be_visitor_interface/interface_ch.cpp:137

    virtual ::CORBA::Boolean _is_a (const char *type_id);
    virtual const char* _interface_repository_id (void) const;
    virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);
  
  protected:
    // Concrete interface only.
    StockDistributor (void);

    // Concrete non-local interface only.
    StockDistributor (
        ::IOP::IOR *ior,
        TAO_ORB_Core *orb_core);
    
    // Non-local interface only.
    StockDistributor (
        TAO_Stub *objref,
        ::CORBA::Boolean _tao_collocated = false,
        TAO_Abstract_ServantBase *servant = 0,
        TAO_ORB_Core *orb_core = 0);

    virtual ~StockDistributor (void);
  
  private:
    // Private and unimplemented for concrete interfaces.
    StockDistributor (const StockDistributor &);

    void operator= (const StockDistributor &);
  };

  // TAO_IDL - Generated from
  // be/be_visitor_typecode/typecode_decl.cpp:34

  extern RTCORBA_Quoter_Common_Export ::CORBA::TypeCode_ptr const _tc_StockDistributor;

  // TAO_IDL - Generated from
  // be/be_interface.cpp:748

#if !defined (_STOCK_STOCKDISTRIBUTORHOME__VAR_OUT_CH_)
#define _STOCK_STOCKDISTRIBUTORHOME__VAR_OUT_CH_

  class StockDistributorHome;
  typedef StockDistributorHome *StockDistributorHome_ptr;

  typedef
    TAO_Objref_Var_T<
        StockDistributorHome
      >
    StockDistributorHome_var;
  
  typedef
    TAO_Objref_Out_T<
        StockDistributorHome
      >
    StockDistributorHome_out;

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // be/be_visitor_interface/interface_ch.cpp:40

  class RTCORBA_Quoter_Common_Export StockDistributorHome
    : public virtual ::CORBA::Object
  {
  public:
    friend class TAO::Narrow_Utils<StockDistributorHome>;

    // TAO_IDL - Generated from
    // be/be_type.cpp:304

    typedef StockDistributorHome_ptr _ptr_type;
    typedef StockDistributorHome_var _var_type;
    typedef StockDistributorHome_out _out_type;

    static void _tao_any_destructor (void *);

    // The static operations.
    static StockDistributorHome_ptr _duplicate (StockDistributorHome_ptr obj);

    static void _tao_release (StockDistributorHome_ptr obj);

    static StockDistributorHome_ptr _narrow (::CORBA::Object_ptr obj);
    static StockDistributorHome_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
    static StockDistributorHome_ptr _nil (void);

    virtual ::Stock::StockDistributor_ptr create (
      void);

    // TAO_IDL - Generated from
    // be/be_visitor_interface/interface_ch.cpp:137

    virtual ::CORBA::Boolean _is_a (const char *type_id);
    virtual const char* _interface_repository_id (void) const;
    virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);
  
  protected:
    // Concrete interface only.
    StockDistributorHome (void);

    // Concrete non-local interface only.
    StockDistributorHome (
        ::IOP::IOR *ior,
        TAO_ORB_Core *orb_core);
    
    // Non-local interface only.
    StockDistributorHome (
        TAO_Stub *objref,
        ::CORBA::Boolean _tao_collocated = false,
        TAO_Abstract_ServantBase *servant = 0,
        TAO_ORB_Core *orb_core = 0);

    virtual ~StockDistributorHome (void);
  
  private:
    // Private and unimplemented for concrete interfaces.
    StockDistributorHome (const StockDistributorHome &);

    void operator= (const StockDistributorHome &);
  };

  // TAO_IDL - Generated from
  // be/be_visitor_typecode/typecode_decl.cpp:34

  extern RTCORBA_Quoter_Common_Export ::CORBA::TypeCode_ptr const _tc_StockDistributorHome;

// TAO_IDL - Generated from
// be/be_visitor_module/module_ch.cpp:64

} // module Stock

// TAO_IDL - Generated from
// be/be_visitor_arg_traits.cpp:66

TAO_BEGIN_VERSIONED_NAMESPACE_DECL


// Arg traits specializations.
namespace TAO
{

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:145

#if !defined (_STOCK_STOCKDISTRIBUTOR__ARG_TRAITS_)
#define _STOCK_STOCKDISTRIBUTOR__ARG_TRAITS_

  template<>
  class  Arg_Traits< ::Stock::StockDistributor>
    : public
        Object_Arg_Traits_T<
            ::Stock::StockDistributor_ptr,
            ::Stock::StockDistributor_var,
            ::Stock::StockDistributor_out,
            TAO::Objref_Traits<Stock::StockDistributor>,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:145

#if !defined (_STOCK_STOCKDISTRIBUTORHOME__ARG_TRAITS_)
#define _STOCK_STOCKDISTRIBUTORHOME__ARG_TRAITS_

  template<>
  class  Arg_Traits< ::Stock::StockDistributorHome>
    : public
        Object_Arg_Traits_T<
            ::Stock::StockDistributorHome_ptr,
            ::Stock::StockDistributorHome_var,
            ::Stock::StockDistributorHome_out,
            TAO::Objref_Traits<Stock::StockDistributorHome>,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

#endif /* end #if !defined */
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_traits.cpp:60

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Traits specializations.
namespace TAO
{

#if !defined (_STOCK_STOCKDISTRIBUTOR__TRAITS_)
#define _STOCK_STOCKDISTRIBUTOR__TRAITS_

  template<>
  struct RTCORBA_Quoter_Common_Export Objref_Traits< ::Stock::StockDistributor>
  {
    static ::Stock::StockDistributor_ptr duplicate (
        ::Stock::StockDistributor_ptr p);
    static void release (
        ::Stock::StockDistributor_ptr p);
    static ::Stock::StockDistributor_ptr nil (void);
    static ::CORBA::Boolean marshal (
        const ::Stock::StockDistributor_ptr p,
        TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_STOCK_STOCKDISTRIBUTORHOME__TRAITS_)
#define _STOCK_STOCKDISTRIBUTORHOME__TRAITS_

  template<>
  struct RTCORBA_Quoter_Common_Export Objref_Traits< ::Stock::StockDistributorHome>
  {
    static ::Stock::StockDistributorHome_ptr duplicate (
        ::Stock::StockDistributorHome_ptr p);
    static void release (
        ::Stock::StockDistributorHome_ptr p);
    static ::Stock::StockDistributorHome_ptr nil (void);
    static ::CORBA::Boolean marshal (
        const ::Stock::StockDistributorHome_ptr p,
        TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */
}
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_exception/any_op_ch.cpp:38

#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace Stock
{
  

  RTCORBA_Quoter_Common_Export void operator<<= (::CORBA::Any &, const ::Stock::Invalid_Subscription &); // copying version
  RTCORBA_Quoter_Common_Export void operator<<= (::CORBA::Any &, ::Stock::Invalid_Subscription*); // noncopying version
  RTCORBA_Quoter_Common_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, ::Stock::Invalid_Subscription *&); // deprecated
RTCORBA_Quoter_Common_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const ::Stock::Invalid_Subscription *&);
}

#else


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



RTCORBA_Quoter_Common_Export void operator<<= (::CORBA::Any &, const Stock::Invalid_Subscription &); // copying version
RTCORBA_Quoter_Common_Export void operator<<= (::CORBA::Any &, Stock::Invalid_Subscription*); // noncopying version
RTCORBA_Quoter_Common_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, Stock::Invalid_Subscription *&); // deprecated
RTCORBA_Quoter_Common_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const Stock::Invalid_Subscription *&);
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_interface/any_op_ch.cpp:41



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace Stock
{
  RTCORBA_Quoter_Common_Export void operator<<= ( ::CORBA::Any &, StockDistributor_ptr); // copying
  RTCORBA_Quoter_Common_Export void operator<<= ( ::CORBA::Any &, StockDistributor_ptr *); // non-copying
  RTCORBA_Quoter_Common_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, StockDistributor_ptr &);
}

#else


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

RTCORBA_Quoter_Common_Export void operator<<= (::CORBA::Any &, Stock::StockDistributor_ptr); // copying
RTCORBA_Quoter_Common_Export void operator<<= (::CORBA::Any &, Stock::StockDistributor_ptr *); // non-copying
RTCORBA_Quoter_Common_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, Stock::StockDistributor_ptr &);
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_interface/any_op_ch.cpp:41



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace Stock
{
  RTCORBA_Quoter_Common_Export void operator<<= ( ::CORBA::Any &, StockDistributorHome_ptr); // copying
  RTCORBA_Quoter_Common_Export void operator<<= ( ::CORBA::Any &, StockDistributorHome_ptr *); // non-copying
  RTCORBA_Quoter_Common_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, StockDistributorHome_ptr &);
}

#else


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

RTCORBA_Quoter_Common_Export void operator<<= (::CORBA::Any &, Stock::StockDistributorHome_ptr); // copying
RTCORBA_Quoter_Common_Export void operator<<= (::CORBA::Any &, Stock::StockDistributorHome_ptr *); // non-copying
RTCORBA_Quoter_Common_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, Stock::StockDistributorHome_ptr &);
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_exception/cdr_op_ch.cpp:37
TAO_BEGIN_VERSIONED_NAMESPACE_DECL



RTCORBA_Quoter_Common_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const Stock::Invalid_Subscription &);
RTCORBA_Quoter_Common_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, Stock::Invalid_Subscription &);

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_interface/cdr_op_ch.cpp:41

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

RTCORBA_Quoter_Common_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const Stock::StockDistributor_ptr );
RTCORBA_Quoter_Common_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, Stock::StockDistributor_ptr &);

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_interface/cdr_op_ch.cpp:41

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

RTCORBA_Quoter_Common_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const Stock::StockDistributorHome_ptr );
RTCORBA_Quoter_Common_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, Stock::StockDistributorHome_ptr &);

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_codegen.cpp:1700
#if defined (__ACE_INLINE__)
#include "DistributorC.inl"
#endif /* defined INLINE */

#include /**/ "ace/post.h"

#endif /* ifndef */

