// -*- C++ -*-
/**
 * Code generated by the The ACE ORB (TAO) IDL Compiler v2.4.1
 * TAO and the TAO IDL Compiler have been developed by:
 *       Center for Distributed Object Computing
 *       Washington University
 *       St. Louis, MO
 *       USA
 *       http://www.cs.wustl.edu/~schmidt/doc-center.html
 * and
 *       Distributed Object Computing Laboratory
 *       University of California at Irvine
 *       Irvine, CA
 *       USA
 * and
 *       Institute for Software Integrated Systems
 *       Vanderbilt University
 *       Nashville, TN
 *       USA
 *       http://www.isis.vanderbilt.edu/
 *
 * Information about TAO is available at:
 *     http://www.dre.vanderbilt.edu/~schmidt/TAO.html
 **/

// TAO_IDL - Generated from
// be/be_codegen.cpp:149

#ifndef _TAO_IDL_COMMONC_OKY2ZL_H_
#define _TAO_IDL_COMMONC_OKY2ZL_H_

#include /**/ "ace/pre.h"


#include /**/ "ace/config-all.h"

#if !defined (ACE_LACKS_PRAGMA_ONCE)
# pragma once
#endif /* ACE_LACKS_PRAGMA_ONCE */


#include /**/ "Common_Export.h"
#include "tao/AnyTypeCode/AnyTypeCode_methods.h"
#include "tao/AnyTypeCode/Any.h"
#include "tao/Valuetype/ValueBase.h"
#include "tao/Valuetype/Valuetype_Adapter_Factory_Impl.h"
#include "tao/Valuetype/ValueFactory.h"
#include "tao/ORB.h"
#include "tao/SystemException.h"
#include "tao/UserException.h"
#include "tao/Basic_Types.h"
#include "tao/ORB_Constants.h"
#include "tao/Object.h"
#include "tao/String_Manager_T.h"
#include "tao/AnyTypeCode/StringSeqA.h"
#include "tao/Valuetype/Value_VarOut_T.h"
#include "tao/Objref_VarOut_T.h"
#include "tao/VarOut_T.h"
#include "tao/Arg_Traits_T.h"
#include "tao/Basic_Arguments.h"
#include "tao/Special_Basic_Arguments.h"
#include "tao/Any_Insert_Policy_T.h"
#include "tao/Fixed_Size_Argument_T.h"
#include "tao/Var_Size_Argument_T.h"
#include "tao/Object_Argument_T.h"
#include "tao/UB_String_Arguments.h"
#include /**/ "tao/Version.h"
#include /**/ "tao/Versioned_Namespace.h"

#include "tao/StringSeqC.h"

#if TAO_MAJOR_VERSION != 2 || TAO_MINOR_VERSION != 4 || TAO_MICRO_VERSION != 1
#error This file should be regenerated with TAO_IDL
#endif

#if defined (TAO_EXPORT_MACRO)
#undef TAO_EXPORT_MACRO
#endif
#define TAO_EXPORT_MACRO RTCORBA_Quoter_Common_Export

// TAO_IDL - Generated from
// be/be_visitor_root/root_ch.cpp:157
TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<typename T> class Narrow_Utils;
}
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_module/module_ch.cpp:35

namespace Stock
{

  // TAO_IDL - Generated from
  // be/be_visitor_exception/exception_ch.cpp:41

  class RTCORBA_Quoter_Common_Export Invalid_Stock : public ::CORBA::UserException
  {
  public:

    Invalid_Stock (void);
    Invalid_Stock (const Invalid_Stock &);
    ~Invalid_Stock (void);

    Invalid_Stock &operator= (const Invalid_Stock &);

    static void _tao_any_destructor (void *);

    static Invalid_Stock *_downcast ( ::CORBA::Exception *);
    static const Invalid_Stock *_downcast ( ::CORBA::Exception const *);

    static ::CORBA::Exception *_alloc (void);

    virtual ::CORBA::Exception *_tao_duplicate (void) const;

    virtual void _raise (void) const;

    virtual void _tao_encode (TAO_OutputCDR &cdr) const;
    virtual void _tao_decode (TAO_InputCDR &cdr);

    virtual ::CORBA::TypeCode_ptr _tao_type (void) const;
  };

  // TAO_IDL - Generated from
  // be/be_visitor_typecode/typecode_decl.cpp:34

  extern RTCORBA_Quoter_Common_Export ::CORBA::TypeCode_ptr const _tc_Invalid_Stock;

  // TAO_IDL - Generated from
  // be/be_type.cpp:258

  struct StockInfo;

  typedef
    ::TAO_Var_Var_T<
        StockInfo
      >
    StockInfo_var;

  typedef
    ::TAO_Out_T<
        StockInfo
      >
    StockInfo_out;

  // TAO_IDL - Generated from
  // be/be_visitor_structure/structure_ch.cpp:48

  struct RTCORBA_Quoter_Common_Export StockInfo
  {

    // TAO_IDL - Generated from
    // be/be_type.cpp:304

    
    typedef StockInfo_var _var_type;
    typedef StockInfo_out _out_type;

    static void _tao_any_destructor (void *);
    
    ::TAO::String_Manager name;
    ::CORBA::Long high;
    ::CORBA::Long low;
    ::CORBA::Long last;
  };

  // TAO_IDL - Generated from
  // be/be_visitor_typecode/typecode_decl.cpp:34

  extern RTCORBA_Quoter_Common_Export ::CORBA::TypeCode_ptr const _tc_StockInfo;

  // TAO_IDL - Generated from
  // be/be_valuetype.cpp:564

  

#if !defined (_STOCK_STOCKNAMES__VAR_OUT_CH_)
#define _STOCK_STOCKNAMES__VAR_OUT_CH_

  class StockNames;
  typedef
    TAO_Value_Var_T<
        StockNames
      >
    StockNames_var;
  
  typedef
    TAO_Value_Out_T<
        StockNames
      >
    StockNames_out;

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // be/be_visitor_valuetype/valuetype_ch.cpp:50

  class RTCORBA_Quoter_Common_Export StockNames
    : public virtual ::CORBA::ValueBase
  {
  public:

    // TAO_IDL - Generated from
    // be/be_type.cpp:304

    typedef StockNames * _ptr_type;
    typedef StockNames_var _var_type;
    typedef StockNames_out _out_type;

    static void _tao_any_destructor (void *);

    static StockNames* _downcast ( ::CORBA::ValueBase *v);
    
    /// TAO extensions or internals
    static ::CORBA::Boolean _tao_unmarshal (
        TAO_InputCDR &strm,
        StockNames *&new_object);
    
    virtual const char* _tao_obv_repository_id (void) const;

    virtual void _tao_obv_truncatable_repo_ids (Repository_Id_List &) const;

    static const char* _tao_obv_static_repository_id (void);

    virtual ::CORBA::TypeCode_ptr _tao_type (void) const;
  
  public:

    // TAO_IDL - Generated from
    // be/be_visitor_valuetype/field_ch.cpp:533

    virtual void names (const CORBA::StringSeq &) = 0;
    virtual const CORBA::StringSeq &names (void) const = 0;
    virtual CORBA::StringSeq &names (void) = 0;

    // TAO_IDL - Generated from
    // be/be_visitor_valuetype/valuetype_ch.cpp:238
  
  protected:
    StockNames (void);
    virtual ~StockNames (void);

    virtual ::CORBA::Boolean _tao_marshal_v (TAO_OutputCDR &) const;
    virtual ::CORBA::Boolean _tao_unmarshal_v (TAO_InputCDR &);
    virtual ::CORBA::Boolean _tao_match_formal_type (ptrdiff_t ) const;
    
  private:
    StockNames (const StockNames &);
    void operator= (const StockNames &);
    
  protected:
    virtual ::CORBA::Boolean
    _tao_marshal__Stock_StockNames (TAO_OutputCDR &, TAO_ChunkInfo &) const = 0;

    virtual ::CORBA::Boolean
    _tao_unmarshal__Stock_StockNames (TAO_InputCDR &, TAO_ChunkInfo &) = 0;
  };

  // TAO_IDL - Generated from
  // be/be_visitor_valuetype/valuetype_init_ch.cpp:57

  class RTCORBA_Quoter_Common_Export StockNames_init
    : public virtual ::CORBA::ValueFactoryBase
  {
  public:
    StockNames_init (void);

    static StockNames_init* _downcast ( ::CORBA::ValueFactoryBase *);

    virtual ::CORBA::ValueBase *
    create_for_unmarshal (void);

    // TAO-specific extensions
  public:
    virtual const char* tao_repository_id (void);
  
  protected:
    virtual ~StockNames_init (void);
  };

  // TAO_IDL - Generated from
  // be/be_visitor_typecode/typecode_decl.cpp:34

  extern RTCORBA_Quoter_Common_Export ::CORBA::TypeCode_ptr const _tc_StockNames;

  // TAO_IDL - Generated from
  // be/be_valuetype.cpp:564

  

#if !defined (_STOCK_COOKIE__VAR_OUT_CH_)
#define _STOCK_COOKIE__VAR_OUT_CH_

  class Cookie;
  typedef
    TAO_Value_Var_T<
        Cookie
      >
    Cookie_var;
  
  typedef
    TAO_Value_Out_T<
        Cookie
      >
    Cookie_out;

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // be/be_visitor_valuetype/valuetype_ch.cpp:50

  class RTCORBA_Quoter_Common_Export Cookie
    : public virtual ::CORBA::ValueBase
  {
  public:

    // TAO_IDL - Generated from
    // be/be_type.cpp:304

    typedef Cookie * _ptr_type;
    typedef Cookie_var _var_type;
    typedef Cookie_out _out_type;

    static void _tao_any_destructor (void *);

    static Cookie* _downcast ( ::CORBA::ValueBase *v);
    
    /// TAO extensions or internals
    static ::CORBA::Boolean _tao_unmarshal (
        TAO_InputCDR &strm,
        Cookie *&new_object);
    
    virtual const char* _tao_obv_repository_id (void) const;

    virtual void _tao_obv_truncatable_repo_ids (Repository_Id_List &) const;

    static const char* _tao_obv_static_repository_id (void);

    virtual ::CORBA::TypeCode_ptr _tao_type (void) const;
  
  public:

    // TAO_IDL - Generated from
    // be/be_visitor_valuetype/field_ch.cpp:608

    virtual void cookie_id (char *val) = 0;
    virtual void cookie_id (const char *val) = 0;
    virtual void cookie_id (const ::CORBA::String_var &val) = 0;
    virtual const char *cookie_id (void) const = 0;

    // TAO_IDL - Generated from
    // be/be_visitor_valuetype/valuetype_ch.cpp:238
  
  protected:
    Cookie (void);
    virtual ~Cookie (void);

    virtual ::CORBA::Boolean _tao_marshal_v (TAO_OutputCDR &) const;
    virtual ::CORBA::Boolean _tao_unmarshal_v (TAO_InputCDR &);
    virtual ::CORBA::Boolean _tao_match_formal_type (ptrdiff_t ) const;
    
  private:
    Cookie (const Cookie &);
    void operator= (const Cookie &);
    
  protected:
    virtual ::CORBA::Boolean
    _tao_marshal__Stock_Cookie (TAO_OutputCDR &, TAO_ChunkInfo &) const = 0;

    virtual ::CORBA::Boolean
    _tao_unmarshal__Stock_Cookie (TAO_InputCDR &, TAO_ChunkInfo &) = 0;
  };

  // TAO_IDL - Generated from
  // be/be_visitor_valuetype/valuetype_init_ch.cpp:57

  class RTCORBA_Quoter_Common_Export Cookie_init
    : public virtual ::CORBA::ValueFactoryBase
  {
  public:
    Cookie_init (void);

    static Cookie_init* _downcast ( ::CORBA::ValueFactoryBase *);

    virtual ::CORBA::ValueBase *
    create_for_unmarshal (void);

    // TAO-specific extensions
  public:
    virtual const char* tao_repository_id (void);
  
  protected:
    virtual ~Cookie_init (void);
  };

  // TAO_IDL - Generated from
  // be/be_visitor_typecode/typecode_decl.cpp:34

  extern RTCORBA_Quoter_Common_Export ::CORBA::TypeCode_ptr const _tc_Cookie;

  // TAO_IDL - Generated from
  // be/be_interface.cpp:748

#if !defined (_STOCK_TRIGGER__VAR_OUT_CH_)
#define _STOCK_TRIGGER__VAR_OUT_CH_

  class Trigger;
  typedef Trigger *Trigger_ptr;

  typedef
    TAO_Objref_Var_T<
        Trigger
      >
    Trigger_var;
  
  typedef
    TAO_Objref_Out_T<
        Trigger
      >
    Trigger_out;

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // be/be_visitor_interface/interface_ch.cpp:40

  class RTCORBA_Quoter_Common_Export Trigger
    : public virtual ::CORBA::Object
  {
  public:
    friend class TAO::Narrow_Utils<Trigger>;

    // TAO_IDL - Generated from
    // be/be_type.cpp:304

    typedef Trigger_ptr _ptr_type;
    typedef Trigger_var _var_type;
    typedef Trigger_out _out_type;

    static void _tao_any_destructor (void *);

    // The static operations.
    static Trigger_ptr _duplicate (Trigger_ptr obj);

    static void _tao_release (Trigger_ptr obj);

    static Trigger_ptr _narrow (::CORBA::Object_ptr obj);
    static Trigger_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
    static Trigger_ptr _nil (void);

    virtual void start (
      void);

    virtual void stop (
      void);

    // TAO_IDL - Generated from
    // be/be_visitor_interface/interface_ch.cpp:137

    virtual ::CORBA::Boolean _is_a (const char *type_id);
    virtual const char* _interface_repository_id (void) const;
    virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);
  
  protected:
    // Concrete interface only.
    Trigger (void);

    // Concrete non-local interface only.
    Trigger (
        ::IOP::IOR *ior,
        TAO_ORB_Core *orb_core);
    
    // Non-local interface only.
    Trigger (
        TAO_Stub *objref,
        ::CORBA::Boolean _tao_collocated = false,
        TAO_Abstract_ServantBase *servant = 0,
        TAO_ORB_Core *orb_core = 0);

    virtual ~Trigger (void);
  
  private:
    // Private and unimplemented for concrete interfaces.
    Trigger (const Trigger &);

    void operator= (const Trigger &);
  };

  // TAO_IDL - Generated from
  // be/be_visitor_typecode/typecode_decl.cpp:34

  extern RTCORBA_Quoter_Common_Export ::CORBA::TypeCode_ptr const _tc_Trigger;

  // TAO_IDL - Generated from
  // be/be_interface.cpp:748

#if !defined (_STOCK_STOCKNAMECONSUMER__VAR_OUT_CH_)
#define _STOCK_STOCKNAMECONSUMER__VAR_OUT_CH_

  class StockNameConsumer;
  typedef StockNameConsumer *StockNameConsumer_ptr;

  typedef
    TAO_Objref_Var_T<
        StockNameConsumer
      >
    StockNameConsumer_var;
  
  typedef
    TAO_Objref_Out_T<
        StockNameConsumer
      >
    StockNameConsumer_out;

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // be/be_visitor_interface/interface_ch.cpp:40

  class RTCORBA_Quoter_Common_Export StockNameConsumer
    : public virtual ::CORBA::Object
  {
  public:
    friend class TAO::Narrow_Utils<StockNameConsumer>;

    // TAO_IDL - Generated from
    // be/be_type.cpp:304

    typedef StockNameConsumer_ptr _ptr_type;
    typedef StockNameConsumer_var _var_type;
    typedef StockNameConsumer_out _out_type;

    static void _tao_any_destructor (void *);

    // The static operations.
    static StockNameConsumer_ptr _duplicate (StockNameConsumer_ptr obj);

    static void _tao_release (StockNameConsumer_ptr obj);

    static StockNameConsumer_ptr _narrow (::CORBA::Object_ptr obj);
    static StockNameConsumer_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
    static StockNameConsumer_ptr _nil (void);

    virtual void push_StockName (
      ::Stock::StockNames * the_stocknames);

    virtual ::Stock::Cookie * cookie_ (
      void);

    virtual void cookie_ (
      ::Stock::Cookie * cookie_);

    // TAO_IDL - Generated from
    // be/be_visitor_interface/interface_ch.cpp:137

    virtual ::CORBA::Boolean _is_a (const char *type_id);
    virtual const char* _interface_repository_id (void) const;
    virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);
  
  protected:
    // Concrete interface only.
    StockNameConsumer (void);

    // Concrete non-local interface only.
    StockNameConsumer (
        ::IOP::IOR *ior,
        TAO_ORB_Core *orb_core);
    
    // Non-local interface only.
    StockNameConsumer (
        TAO_Stub *objref,
        ::CORBA::Boolean _tao_collocated = false,
        TAO_Abstract_ServantBase *servant = 0,
        TAO_ORB_Core *orb_core = 0);

    virtual ~StockNameConsumer (void);
  
  private:
    // Private and unimplemented for concrete interfaces.
    StockNameConsumer (const StockNameConsumer &);

    void operator= (const StockNameConsumer &);
  };

  // TAO_IDL - Generated from
  // be/be_visitor_typecode/typecode_decl.cpp:34

  extern RTCORBA_Quoter_Common_Export ::CORBA::TypeCode_ptr const _tc_StockNameConsumer;

  // TAO_IDL - Generated from
  // be/be_interface.cpp:748

#if !defined (_STOCK_STOCKQUOTER__VAR_OUT_CH_)
#define _STOCK_STOCKQUOTER__VAR_OUT_CH_

  class StockQuoter;
  typedef StockQuoter *StockQuoter_ptr;

  typedef
    TAO_Objref_Var_T<
        StockQuoter
      >
    StockQuoter_var;
  
  typedef
    TAO_Objref_Out_T<
        StockQuoter
      >
    StockQuoter_out;

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // be/be_visitor_interface/interface_ch.cpp:40

  class RTCORBA_Quoter_Common_Export StockQuoter
    : public virtual ::CORBA::Object
  {
  public:
    friend class TAO::Narrow_Utils<StockQuoter>;

    // TAO_IDL - Generated from
    // be/be_type.cpp:304

    typedef StockQuoter_ptr _ptr_type;
    typedef StockQuoter_var _var_type;
    typedef StockQuoter_out _out_type;

    static void _tao_any_destructor (void *);

    // The static operations.
    static StockQuoter_ptr _duplicate (StockQuoter_ptr obj);

    static void _tao_release (StockQuoter_ptr obj);

    static StockQuoter_ptr _narrow (::CORBA::Object_ptr obj);
    static StockQuoter_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
    static StockQuoter_ptr _nil (void);

    virtual ::Stock::StockInfo * get_stock_info (
      const char * stock_name);

    // TAO_IDL - Generated from
    // be/be_visitor_interface/interface_ch.cpp:137

    virtual ::CORBA::Boolean _is_a (const char *type_id);
    virtual const char* _interface_repository_id (void) const;
    virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);
  
  protected:
    // Concrete interface only.
    StockQuoter (void);

    // Concrete non-local interface only.
    StockQuoter (
        ::IOP::IOR *ior,
        TAO_ORB_Core *orb_core);
    
    // Non-local interface only.
    StockQuoter (
        TAO_Stub *objref,
        ::CORBA::Boolean _tao_collocated = false,
        TAO_Abstract_ServantBase *servant = 0,
        TAO_ORB_Core *orb_core = 0);

    virtual ~StockQuoter (void);
  
  private:
    // Private and unimplemented for concrete interfaces.
    StockQuoter (const StockQuoter &);

    void operator= (const StockQuoter &);
  };

  // TAO_IDL - Generated from
  // be/be_visitor_typecode/typecode_decl.cpp:34

  extern RTCORBA_Quoter_Common_Export ::CORBA::TypeCode_ptr const _tc_StockQuoter;

// TAO_IDL - Generated from
// be/be_visitor_module/module_ch.cpp:64

} // module Stock

// TAO_IDL - Generated from
// be/be_visitor_arg_traits.cpp:66

TAO_BEGIN_VERSIONED_NAMESPACE_DECL


// Arg traits specializations.
namespace TAO
{

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:945

  template<>
  class Arg_Traits< ::Stock::StockInfo>
    : public
        Var_Size_Arg_Traits_T<
            ::Stock::StockInfo,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:306

#if !defined (_STOCK_STOCKNAMES__ARG_TRAITS_)
#define _STOCK_STOCKNAMES__ARG_TRAITS_

  template<>
  class Arg_Traits< ::Stock::StockNames>
    : public
        Object_Arg_Traits_T<
            ::Stock::StockNames *,
            ::Stock::StockNames_var,
            ::Stock::StockNames_out,
            TAO::Value_Traits<Stock::StockNames>,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:306

#if !defined (_STOCK_COOKIE__ARG_TRAITS_)
#define _STOCK_COOKIE__ARG_TRAITS_

  template<>
  class Arg_Traits< ::Stock::Cookie>
    : public
        Object_Arg_Traits_T<
            ::Stock::Cookie *,
            ::Stock::Cookie_var,
            ::Stock::Cookie_out,
            TAO::Value_Traits<Stock::Cookie>,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:145

#if !defined (_STOCK_TRIGGER__ARG_TRAITS_)
#define _STOCK_TRIGGER__ARG_TRAITS_

  template<>
  class  Arg_Traits< ::Stock::Trigger>
    : public
        Object_Arg_Traits_T<
            ::Stock::Trigger_ptr,
            ::Stock::Trigger_var,
            ::Stock::Trigger_out,
            TAO::Objref_Traits<Stock::Trigger>,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:145

#if !defined (_STOCK_STOCKNAMECONSUMER__ARG_TRAITS_)
#define _STOCK_STOCKNAMECONSUMER__ARG_TRAITS_

  template<>
  class  Arg_Traits< ::Stock::StockNameConsumer>
    : public
        Object_Arg_Traits_T<
            ::Stock::StockNameConsumer_ptr,
            ::Stock::StockNameConsumer_var,
            ::Stock::StockNameConsumer_out,
            TAO::Objref_Traits<Stock::StockNameConsumer>,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:145

#if !defined (_STOCK_STOCKQUOTER__ARG_TRAITS_)
#define _STOCK_STOCKQUOTER__ARG_TRAITS_

  template<>
  class  Arg_Traits< ::Stock::StockQuoter>
    : public
        Object_Arg_Traits_T<
            ::Stock::StockQuoter_ptr,
            ::Stock::StockQuoter_var,
            ::Stock::StockQuoter_out,
            TAO::Objref_Traits<Stock::StockQuoter>,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

#endif /* end #if !defined */
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_valuetype/obv_module.cpp:44

namespace OBV_Stock
{

  // TAO_IDL - Generated from
  // be/be_visitor_valuetype/valuetype_obv_ch.cpp:44

  // OBV_ class
  class RTCORBA_Quoter_Common_Export StockNames
    : public virtual Stock::StockNames,
      public virtual ::CORBA::DefaultValueRefCountBase
  {

public:

  // TAO_IDL - Generated from
  // be/be_visitor_valuetype/field_ch.cpp:533

  virtual void names (const CORBA::StringSeq &);
  virtual const CORBA::StringSeq &names (void) const;
  virtual CORBA::StringSeq &names (void);

public:
  StockNames (void);
  StockNames (
      const ::CORBA::StringSeq & _tao_init_names
    );
  virtual ~StockNames (void);

public:
  virtual ::CORBA::ValueBase *_copy_value (void);
  
protected:
  virtual ::CORBA::Boolean
  _tao_marshal__Stock_StockNames (TAO_OutputCDR &, TAO_ChunkInfo &) const;

  virtual ::CORBA::Boolean
  _tao_unmarshal__Stock_StockNames (TAO_InputCDR &, TAO_ChunkInfo &);

  ::CORBA::Boolean _tao_marshal_state (TAO_OutputCDR &, TAO_ChunkInfo &) const;
  ::CORBA::Boolean _tao_unmarshal_state (TAO_InputCDR &, TAO_ChunkInfo &);
  virtual void truncation_hook (void);

private:
  CORBA::StringSeq _pd_names;
  CORBA::Boolean require_truncation_;
};

// TAO_IDL - Generated from
// be/be_visitor_valuetype/valuetype_obv_ch.cpp:44

// OBV_ class
class RTCORBA_Quoter_Common_Export Cookie
  : public virtual Stock::Cookie,
    public virtual ::CORBA::DefaultValueRefCountBase
{

public:

  // TAO_IDL - Generated from
  // be/be_visitor_valuetype/field_ch.cpp:608

  virtual void cookie_id (char *val);
  virtual void cookie_id (const char *val);
  virtual void cookie_id (const ::CORBA::String_var &val);
  virtual const char *cookie_id (void) const;

public:
  Cookie (void);
  Cookie (
      const char * _tao_init_cookie_id
    );
  virtual ~Cookie (void);

public:
  virtual ::CORBA::ValueBase *_copy_value (void);
  
protected:
  virtual ::CORBA::Boolean
  _tao_marshal__Stock_Cookie (TAO_OutputCDR &, TAO_ChunkInfo &) const;

  virtual ::CORBA::Boolean
  _tao_unmarshal__Stock_Cookie (TAO_InputCDR &, TAO_ChunkInfo &);

  ::CORBA::Boolean _tao_marshal_state (TAO_OutputCDR &, TAO_ChunkInfo &) const;
  ::CORBA::Boolean _tao_unmarshal_state (TAO_InputCDR &, TAO_ChunkInfo &);
  virtual void truncation_hook (void);

private:
  ::TAO::String_Manager _pd_cookie_id;
  CORBA::Boolean require_truncation_;
};
}

// TAO_IDL - Generated from
// be/be_visitor_traits.cpp:60

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Traits specializations.
namespace TAO
{

#if !defined (_STOCK_STOCKNAMES__TRAITS_)
#define _STOCK_STOCKNAMES__TRAITS_

  template<>
  struct RTCORBA_Quoter_Common_Export Value_Traits<Stock::StockNames>
  {
    static void add_ref (Stock::StockNames *);
    static void remove_ref (Stock::StockNames *);
    static void release (Stock::StockNames *);
  };

#endif /* end #if !defined */

#if !defined (_STOCK_COOKIE__TRAITS_)
#define _STOCK_COOKIE__TRAITS_

  template<>
  struct RTCORBA_Quoter_Common_Export Value_Traits<Stock::Cookie>
  {
    static void add_ref (Stock::Cookie *);
    static void remove_ref (Stock::Cookie *);
    static void release (Stock::Cookie *);
  };

#endif /* end #if !defined */

#if !defined (_STOCK_TRIGGER__TRAITS_)
#define _STOCK_TRIGGER__TRAITS_

  template<>
  struct RTCORBA_Quoter_Common_Export Objref_Traits< ::Stock::Trigger>
  {
    static ::Stock::Trigger_ptr duplicate (
        ::Stock::Trigger_ptr p);
    static void release (
        ::Stock::Trigger_ptr p);
    static ::Stock::Trigger_ptr nil (void);
    static ::CORBA::Boolean marshal (
        const ::Stock::Trigger_ptr p,
        TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_STOCK_STOCKNAMECONSUMER__TRAITS_)
#define _STOCK_STOCKNAMECONSUMER__TRAITS_

  template<>
  struct RTCORBA_Quoter_Common_Export Objref_Traits< ::Stock::StockNameConsumer>
  {
    static ::Stock::StockNameConsumer_ptr duplicate (
        ::Stock::StockNameConsumer_ptr p);
    static void release (
        ::Stock::StockNameConsumer_ptr p);
    static ::Stock::StockNameConsumer_ptr nil (void);
    static ::CORBA::Boolean marshal (
        const ::Stock::StockNameConsumer_ptr p,
        TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_STOCK_STOCKQUOTER__TRAITS_)
#define _STOCK_STOCKQUOTER__TRAITS_

  template<>
  struct RTCORBA_Quoter_Common_Export Objref_Traits< ::Stock::StockQuoter>
  {
    static ::Stock::StockQuoter_ptr duplicate (
        ::Stock::StockQuoter_ptr p);
    static void release (
        ::Stock::StockQuoter_ptr p);
    static ::Stock::StockQuoter_ptr nil (void);
    static ::CORBA::Boolean marshal (
        const ::Stock::StockQuoter_ptr p,
        TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */
}
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_exception/any_op_ch.cpp:38

#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace Stock
{
  

  RTCORBA_Quoter_Common_Export void operator<<= (::CORBA::Any &, const ::Stock::Invalid_Stock &); // copying version
  RTCORBA_Quoter_Common_Export void operator<<= (::CORBA::Any &, ::Stock::Invalid_Stock*); // noncopying version
  RTCORBA_Quoter_Common_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, ::Stock::Invalid_Stock *&); // deprecated
RTCORBA_Quoter_Common_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const ::Stock::Invalid_Stock *&);
}

#else


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



RTCORBA_Quoter_Common_Export void operator<<= (::CORBA::Any &, const Stock::Invalid_Stock &); // copying version
RTCORBA_Quoter_Common_Export void operator<<= (::CORBA::Any &, Stock::Invalid_Stock*); // noncopying version
RTCORBA_Quoter_Common_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, Stock::Invalid_Stock *&); // deprecated
RTCORBA_Quoter_Common_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const Stock::Invalid_Stock *&);
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_structure/any_op_ch.cpp:42



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace Stock
{
  RTCORBA_Quoter_Common_Export void operator<<= (::CORBA::Any &, const ::Stock::StockInfo &); // copying version
  RTCORBA_Quoter_Common_Export void operator<<= (::CORBA::Any &, ::Stock::StockInfo*); // noncopying version
  RTCORBA_Quoter_Common_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, ::Stock::StockInfo *&); // deprecated
RTCORBA_Quoter_Common_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const ::Stock::StockInfo *&);
}

#else


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

RTCORBA_Quoter_Common_Export void operator<<= (::CORBA::Any &, const Stock::StockInfo &); // copying version
RTCORBA_Quoter_Common_Export void operator<<= (::CORBA::Any &, Stock::StockInfo*); // noncopying version
RTCORBA_Quoter_Common_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, Stock::StockInfo *&); // deprecated
RTCORBA_Quoter_Common_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const Stock::StockInfo *&);
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_valuetype/any_op_ch.cpp:43



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace Stock
{
  RTCORBA_Quoter_Common_Export void operator<<= ( ::CORBA::Any &, StockNames *); // copying
  RTCORBA_Quoter_Common_Export void operator<<= ( ::CORBA::Any &, StockNames **); // non-copying
  RTCORBA_Quoter_Common_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, StockNames *&);
}

#else


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

RTCORBA_Quoter_Common_Export void operator<<= (::CORBA::Any &, Stock::StockNames *); // copying
RTCORBA_Quoter_Common_Export void operator<<= (::CORBA::Any &, Stock::StockNames **); // non-copying
RTCORBA_Quoter_Common_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, Stock::StockNames *&);
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_valuetype/any_op_ch.cpp:43



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace Stock
{
  RTCORBA_Quoter_Common_Export void operator<<= ( ::CORBA::Any &, Cookie *); // copying
  RTCORBA_Quoter_Common_Export void operator<<= ( ::CORBA::Any &, Cookie **); // non-copying
  RTCORBA_Quoter_Common_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, Cookie *&);
}

#else


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

RTCORBA_Quoter_Common_Export void operator<<= (::CORBA::Any &, Stock::Cookie *); // copying
RTCORBA_Quoter_Common_Export void operator<<= (::CORBA::Any &, Stock::Cookie **); // non-copying
RTCORBA_Quoter_Common_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, Stock::Cookie *&);
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_interface/any_op_ch.cpp:41



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace Stock
{
  RTCORBA_Quoter_Common_Export void operator<<= ( ::CORBA::Any &, Trigger_ptr); // copying
  RTCORBA_Quoter_Common_Export void operator<<= ( ::CORBA::Any &, Trigger_ptr *); // non-copying
  RTCORBA_Quoter_Common_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, Trigger_ptr &);
}

#else


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

RTCORBA_Quoter_Common_Export void operator<<= (::CORBA::Any &, Stock::Trigger_ptr); // copying
RTCORBA_Quoter_Common_Export void operator<<= (::CORBA::Any &, Stock::Trigger_ptr *); // non-copying
RTCORBA_Quoter_Common_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, Stock::Trigger_ptr &);
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_interface/any_op_ch.cpp:41



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace Stock
{
  RTCORBA_Quoter_Common_Export void operator<<= ( ::CORBA::Any &, StockNameConsumer_ptr); // copying
  RTCORBA_Quoter_Common_Export void operator<<= ( ::CORBA::Any &, StockNameConsumer_ptr *); // non-copying
  RTCORBA_Quoter_Common_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, StockNameConsumer_ptr &);
}

#else


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

RTCORBA_Quoter_Common_Export void operator<<= (::CORBA::Any &, Stock::StockNameConsumer_ptr); // copying
RTCORBA_Quoter_Common_Export void operator<<= (::CORBA::Any &, Stock::StockNameConsumer_ptr *); // non-copying
RTCORBA_Quoter_Common_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, Stock::StockNameConsumer_ptr &);
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_interface/any_op_ch.cpp:41



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace Stock
{
  RTCORBA_Quoter_Common_Export void operator<<= ( ::CORBA::Any &, StockQuoter_ptr); // copying
  RTCORBA_Quoter_Common_Export void operator<<= ( ::CORBA::Any &, StockQuoter_ptr *); // non-copying
  RTCORBA_Quoter_Common_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, StockQuoter_ptr &);
}

#else


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

RTCORBA_Quoter_Common_Export void operator<<= (::CORBA::Any &, Stock::StockQuoter_ptr); // copying
RTCORBA_Quoter_Common_Export void operator<<= (::CORBA::Any &, Stock::StockQuoter_ptr *); // non-copying
RTCORBA_Quoter_Common_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, Stock::StockQuoter_ptr &);
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_exception/cdr_op_ch.cpp:37
TAO_BEGIN_VERSIONED_NAMESPACE_DECL



RTCORBA_Quoter_Common_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const Stock::Invalid_Stock &);
RTCORBA_Quoter_Common_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, Stock::Invalid_Stock &);

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_structure/cdr_op_ch.cpp:43


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

RTCORBA_Quoter_Common_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const Stock::StockInfo &);
RTCORBA_Quoter_Common_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, Stock::StockInfo &);

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_valuetype.cpp:456


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

namespace CORBA
{
  extern RTCORBA_Quoter_Common_Export void add_ref (Stock::StockNames *);
  extern RTCORBA_Quoter_Common_Export void remove_ref (Stock::StockNames *);
}
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_valuetype/cdr_op_ch.cpp:49


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

RTCORBA_Quoter_Common_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const Stock::StockNames *);
RTCORBA_Quoter_Common_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, Stock::StockNames *&);

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_valuetype.cpp:456


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

namespace CORBA
{
  extern RTCORBA_Quoter_Common_Export void add_ref (Stock::Cookie *);
  extern RTCORBA_Quoter_Common_Export void remove_ref (Stock::Cookie *);
}
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_valuetype/cdr_op_ch.cpp:49


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

RTCORBA_Quoter_Common_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const Stock::Cookie *);
RTCORBA_Quoter_Common_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, Stock::Cookie *&);

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_interface/cdr_op_ch.cpp:41

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

RTCORBA_Quoter_Common_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const Stock::Trigger_ptr );
RTCORBA_Quoter_Common_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, Stock::Trigger_ptr &);

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_interface/cdr_op_ch.cpp:41

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

RTCORBA_Quoter_Common_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const Stock::StockNameConsumer_ptr );
RTCORBA_Quoter_Common_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, Stock::StockNameConsumer_ptr &);

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_interface/cdr_op_ch.cpp:41

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

RTCORBA_Quoter_Common_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const Stock::StockQuoter_ptr );
RTCORBA_Quoter_Common_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, Stock::StockQuoter_ptr &);

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_codegen.cpp:1700
#if defined (__ACE_INLINE__)
#include "CommonC.inl"
#endif /* defined INLINE */

#include /**/ "ace/post.h"

#endif /* ifndef */

