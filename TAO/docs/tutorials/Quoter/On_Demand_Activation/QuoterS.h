// -*- C++ -*-
/**
 * Code generated by the The ACE ORB (TAO) IDL Compiler v2.4.1
 * TAO and the TAO IDL Compiler have been developed by:
 *       Center for Distributed Object Computing
 *       Washington University
 *       St. Louis, MO
 *       USA
 *       http://www.cs.wustl.edu/~schmidt/doc-center.html
 * and
 *       Distributed Object Computing Laboratory
 *       University of California at Irvine
 *       Irvine, CA
 *       USA
 * and
 *       Institute for Software Integrated Systems
 *       Vanderbilt University
 *       Nashville, TN
 *       USA
 *       http://www.isis.vanderbilt.edu/
 *
 * Information about TAO is available at:
 *     http://www.dre.vanderbilt.edu/~schmidt/TAO.html
 **/

// TAO_IDL - Generated from
// be/be_codegen.cpp:458

#ifndef _TAO_IDL_QUOTERS_6TSRZN_H_
#define _TAO_IDL_QUOTERS_6TSRZN_H_

#include /**/ "ace/pre.h"

#include "QuoterC.h"
#include "tao/PortableServer/Basic_SArguments.h"
#include "tao/PortableServer/Special_Basic_SArguments.h"
#include "tao/PortableServer/Fixed_Size_SArgument_T.h"
#include "tao/PortableServer/Var_Size_SArgument_T.h"
#include "tao/PortableServer/Object_SArg_Traits.h"
#include "tao/PortableServer/UB_String_SArguments.h"
#include "tao/PortableServer/Object_SArg_Traits.h"
#include "tao/PortableServer/get_arg.h"
#include "tao/Special_Basic_Arguments.h"
#include "tao/UB_String_Arguments.h"

#if !defined (ACE_LACKS_PRAGMA_ONCE)
# pragma once
#endif /* ACE_LACKS_PRAGMA_ONCE */

#include "tao/Messaging/MessagingS.h"
#include "tao/PortableServer/PortableServer.h"
#include "tao/PortableServer/Servant_Base.h"

// TAO_IDL - Generated from
// be/be_visitor_arg_traits.cpp:66

TAO_BEGIN_VERSIONED_NAMESPACE_DECL


// Arg traits specializations.
namespace TAO
{

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:306

#if !defined (_MESSAGING_EXCEPTIONHOLDER__SARG_TRAITS_)
#define _MESSAGING_EXCEPTIONHOLDER__SARG_TRAITS_

  template<>
  class SArg_Traits< ::Messaging::ExceptionHolder>
    : public
        Object_SArg_Traits_T<
            ::Messaging::ExceptionHolder *,
            ::Messaging::ExceptionHolder_var,
            ::Messaging::ExceptionHolder_out,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:145

#if !defined (_QUOTER_STOCK__SARG_TRAITS_)
#define _QUOTER_STOCK__SARG_TRAITS_

  template<>
  class  SArg_Traits< ::Quoter::Stock>
    : public
        Object_SArg_Traits_T<
            ::Quoter::Stock_ptr,
            ::Quoter::Stock_var,
            ::Quoter::Stock_out,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:145

#if !defined (_QUOTER_STOCK_FACTORY__SARG_TRAITS_)
#define _QUOTER_STOCK_FACTORY__SARG_TRAITS_

  template<>
  class  SArg_Traits< ::Quoter::Stock_Factory>
    : public
        Object_SArg_Traits_T<
            ::Quoter::Stock_Factory_ptr,
            ::Quoter::Stock_Factory_var,
            ::Quoter::Stock_Factory_out,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:145

#if !defined (_QUOTER_AMI_STOCK_FACTORYHANDLER__SARG_TRAITS_)
#define _QUOTER_AMI_STOCK_FACTORYHANDLER__SARG_TRAITS_

  template<>
  class  SArg_Traits< ::Quoter::AMI_Stock_FactoryHandler>
    : public
        Object_SArg_Traits_T<
            ::Quoter::AMI_Stock_FactoryHandler_ptr,
            ::Quoter::AMI_Stock_FactoryHandler_var,
            ::Quoter::AMI_Stock_FactoryHandler_out,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:145

#if !defined (_QUOTER_AMI_STOCKHANDLER__SARG_TRAITS_)
#define _QUOTER_AMI_STOCKHANDLER__SARG_TRAITS_

  template<>
  class  SArg_Traits< ::Quoter::AMI_StockHandler>
    : public
        Object_SArg_Traits_T<
            ::Quoter::AMI_StockHandler_ptr,
            ::Quoter::AMI_StockHandler_var,
            ::Quoter::AMI_StockHandler_out,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:145

#if !defined (_QUOTER_SINGLE_QUERY_STOCK__SARG_TRAITS_)
#define _QUOTER_SINGLE_QUERY_STOCK__SARG_TRAITS_

  template<>
  class  SArg_Traits< ::Quoter::Single_Query_Stock>
    : public
        Object_SArg_Traits_T<
            ::Quoter::Single_Query_Stock_ptr,
            ::Quoter::Single_Query_Stock_var,
            ::Quoter::Single_Query_Stock_out,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:145

#if !defined (_QUOTER_AMI_SINGLE_QUERY_STOCKHANDLER__SARG_TRAITS_)
#define _QUOTER_AMI_SINGLE_QUERY_STOCKHANDLER__SARG_TRAITS_

  template<>
  class  SArg_Traits< ::Quoter::AMI_Single_Query_StockHandler>
    : public
        Object_SArg_Traits_T<
            ::Quoter::AMI_Single_Query_StockHandler_ptr,
            ::Quoter::AMI_Single_Query_StockHandler_var,
            ::Quoter::AMI_Single_Query_StockHandler_out,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

#endif /* end #if !defined */
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_module/module_sh.cpp:35

namespace POA_Quoter
{
  

  // TAO_IDL - Generated from
  // be/be_visitor_interface/interface_sh.cpp:73

  class Stock_Factory;
  typedef Stock_Factory *Stock_Factory_ptr;

  class  Stock_Factory
    : public virtual PortableServer::ServantBase
  {
  protected:
    Stock_Factory (void);
  
  public:
    /// Useful for template programming.
    typedef ::Quoter::Stock_Factory _stub_type;
    typedef ::Quoter::Stock_Factory_ptr _stub_ptr_type;
    typedef ::Quoter::Stock_Factory_var _stub_var_type;

    Stock_Factory (const Stock_Factory& rhs);
    virtual ~Stock_Factory (void);

    virtual ::CORBA::Boolean _is_a (const char* logical_type_id);

    virtual void _dispatch (
        TAO_ServerRequest & req,
        TAO::Portable_Server::Servant_Upcall *servant_upcall);
    
    ::Quoter::Stock_Factory *_this (void);
    
    virtual const char* _interface_repository_id (void) const;

    // TAO_IDL - Generated from
    // be/be_visitor_operation/operation_sh.cpp:36

    virtual ::Quoter::Stock_ptr get_stock (
      const char * stock_symbol) = 0;

    static void get_stock_skel (
        TAO_ServerRequest &server_request,
        TAO::Portable_Server::Servant_Upcall *servant_upcall,
        TAO_ServantBase *servant);
  };

  // TAO_IDL - Generated from
  // be/be_visitor_interface/interface_sh.cpp:73

  class AMI_Stock_FactoryHandler;
  typedef AMI_Stock_FactoryHandler *AMI_Stock_FactoryHandler_ptr;

  class  AMI_Stock_FactoryHandler
    : public virtual POA_Messaging::ReplyHandler
  {
  protected:
    AMI_Stock_FactoryHandler (void);
  
  public:
    /// Useful for template programming.
    typedef ::Quoter::AMI_Stock_FactoryHandler _stub_type;
    typedef ::Quoter::AMI_Stock_FactoryHandler_ptr _stub_ptr_type;
    typedef ::Quoter::AMI_Stock_FactoryHandler_var _stub_var_type;

    AMI_Stock_FactoryHandler (const AMI_Stock_FactoryHandler& rhs);
    virtual ~AMI_Stock_FactoryHandler (void);

    virtual ::CORBA::Boolean _is_a (const char* logical_type_id);

    virtual void _dispatch (
        TAO_ServerRequest & req,
        TAO::Portable_Server::Servant_Upcall *servant_upcall);
    
    ::Quoter::AMI_Stock_FactoryHandler *_this (void);
    
    virtual const char* _interface_repository_id (void) const;

    // TAO_IDL - Generated from
    // be/be_visitor_operation/operation_sh.cpp:36

    virtual void get_stock (
      ::Quoter::Stock_ptr ami_return_val) = 0;

    static void get_stock_skel (
        TAO_ServerRequest &server_request,
        TAO::Portable_Server::Servant_Upcall *servant_upcall,
        TAO_ServantBase *servant);

    // TAO_IDL - Generated from
    // be/be_visitor_operation/operation_sh.cpp:36

    virtual void get_stock_excep (
      ::Messaging::ExceptionHolder * excep_holder) = 0;

    static void get_stock_excep_skel (
        TAO_ServerRequest &server_request,
        TAO::Portable_Server::Servant_Upcall *servant_upcall,
        TAO_ServantBase *servant);
  };

  // TAO_IDL - Generated from
  // be/be_visitor_interface/interface_sh.cpp:73

  class Stock;
  typedef Stock *Stock_ptr;

  class  Stock
    : public virtual PortableServer::ServantBase
  {
  protected:
    Stock (void);
  
  public:
    /// Useful for template programming.
    typedef ::Quoter::Stock _stub_type;
    typedef ::Quoter::Stock_ptr _stub_ptr_type;
    typedef ::Quoter::Stock_var _stub_var_type;

    Stock (const Stock& rhs);
    virtual ~Stock (void);

    virtual ::CORBA::Boolean _is_a (const char* logical_type_id);

    virtual void _dispatch (
        TAO_ServerRequest & req,
        TAO::Portable_Server::Servant_Upcall *servant_upcall);
    
    ::Quoter::Stock *_this (void);
    
    virtual const char* _interface_repository_id (void) const;

    // TAO_IDL - Generated from
    // be/be_visitor_operation/operation_sh.cpp:36

    virtual char * symbol (
      void) = 0;

    static void _get_symbol_skel (
        TAO_ServerRequest &server_request,
        TAO::Portable_Server::Servant_Upcall *servant_upcall,
        TAO_ServantBase *servant);

    // TAO_IDL - Generated from
    // be/be_visitor_operation/operation_sh.cpp:36

    virtual char * full_name (
      void) = 0;

    static void _get_full_name_skel (
        TAO_ServerRequest &server_request,
        TAO::Portable_Server::Servant_Upcall *servant_upcall,
        TAO_ServantBase *servant);

    // TAO_IDL - Generated from
    // be/be_visitor_operation/operation_sh.cpp:36

    virtual ::CORBA::Double price (
      void) = 0;

    static void price_skel (
        TAO_ServerRequest &server_request,
        TAO::Portable_Server::Servant_Upcall *servant_upcall,
        TAO_ServantBase *servant);
  };

  // TAO_IDL - Generated from
  // be/be_visitor_interface/interface_sh.cpp:73

  class AMI_StockHandler;
  typedef AMI_StockHandler *AMI_StockHandler_ptr;

  class  AMI_StockHandler
    : public virtual POA_Messaging::ReplyHandler
  {
  protected:
    AMI_StockHandler (void);
  
  public:
    /// Useful for template programming.
    typedef ::Quoter::AMI_StockHandler _stub_type;
    typedef ::Quoter::AMI_StockHandler_ptr _stub_ptr_type;
    typedef ::Quoter::AMI_StockHandler_var _stub_var_type;

    AMI_StockHandler (const AMI_StockHandler& rhs);
    virtual ~AMI_StockHandler (void);

    virtual ::CORBA::Boolean _is_a (const char* logical_type_id);

    virtual void _dispatch (
        TAO_ServerRequest & req,
        TAO::Portable_Server::Servant_Upcall *servant_upcall);
    
    ::Quoter::AMI_StockHandler *_this (void);
    
    virtual const char* _interface_repository_id (void) const;

    // TAO_IDL - Generated from
    // be/be_visitor_operation/operation_sh.cpp:36

    virtual void get_symbol (
      const char * ami_return_val) = 0;

    static void get_symbol_skel (
        TAO_ServerRequest &server_request,
        TAO::Portable_Server::Servant_Upcall *servant_upcall,
        TAO_ServantBase *servant);

    // TAO_IDL - Generated from
    // be/be_visitor_operation/operation_sh.cpp:36

    virtual void get_symbol_excep (
      ::Messaging::ExceptionHolder * excep_holder) = 0;

    static void get_symbol_excep_skel (
        TAO_ServerRequest &server_request,
        TAO::Portable_Server::Servant_Upcall *servant_upcall,
        TAO_ServantBase *servant);

    // TAO_IDL - Generated from
    // be/be_visitor_operation/operation_sh.cpp:36

    virtual void get_full_name (
      const char * ami_return_val) = 0;

    static void get_full_name_skel (
        TAO_ServerRequest &server_request,
        TAO::Portable_Server::Servant_Upcall *servant_upcall,
        TAO_ServantBase *servant);

    // TAO_IDL - Generated from
    // be/be_visitor_operation/operation_sh.cpp:36

    virtual void get_full_name_excep (
      ::Messaging::ExceptionHolder * excep_holder) = 0;

    static void get_full_name_excep_skel (
        TAO_ServerRequest &server_request,
        TAO::Portable_Server::Servant_Upcall *servant_upcall,
        TAO_ServantBase *servant);

    // TAO_IDL - Generated from
    // be/be_visitor_operation/operation_sh.cpp:36

    virtual void price (
      ::CORBA::Double ami_return_val) = 0;

    static void price_skel (
        TAO_ServerRequest &server_request,
        TAO::Portable_Server::Servant_Upcall *servant_upcall,
        TAO_ServantBase *servant);

    // TAO_IDL - Generated from
    // be/be_visitor_operation/operation_sh.cpp:36

    virtual void price_excep (
      ::Messaging::ExceptionHolder * excep_holder) = 0;

    static void price_excep_skel (
        TAO_ServerRequest &server_request,
        TAO::Portable_Server::Servant_Upcall *servant_upcall,
        TAO_ServantBase *servant);
  };

  // TAO_IDL - Generated from
  // be/be_visitor_interface/interface_sh.cpp:73

  class Single_Query_Stock;
  typedef Single_Query_Stock *Single_Query_Stock_ptr;

  class  Single_Query_Stock
    : public virtual POA_Quoter::Stock
  {
  protected:
    Single_Query_Stock (void);
  
  public:
    /// Useful for template programming.
    typedef ::Quoter::Single_Query_Stock _stub_type;
    typedef ::Quoter::Single_Query_Stock_ptr _stub_ptr_type;
    typedef ::Quoter::Single_Query_Stock_var _stub_var_type;

    Single_Query_Stock (const Single_Query_Stock& rhs);
    virtual ~Single_Query_Stock (void);

    virtual ::CORBA::Boolean _is_a (const char* logical_type_id);

    virtual void _dispatch (
        TAO_ServerRequest & req,
        TAO::Portable_Server::Servant_Upcall *servant_upcall);
    
    ::Quoter::Single_Query_Stock *_this (void);
    
    virtual const char* _interface_repository_id (void) const;

    // TAO_IDL - Generated from
    // be/be_visitor_operation/operation_sh.cpp:36

    virtual ::CORBA::Double get_price_and_names (
      ::CORBA::String_out symbol,
      ::CORBA::String_out full_name) = 0;

    static void get_price_and_names_skel (
        TAO_ServerRequest &server_request,
        TAO::Portable_Server::Servant_Upcall *servant_upcall,
        TAO_ServantBase *servant);
  };

  // TAO_IDL - Generated from
  // be/be_visitor_interface/interface_sh.cpp:73

  class AMI_Single_Query_StockHandler;
  typedef AMI_Single_Query_StockHandler *AMI_Single_Query_StockHandler_ptr;

  class  AMI_Single_Query_StockHandler
    : public virtual POA_Quoter::AMI_StockHandler
  {
  protected:
    AMI_Single_Query_StockHandler (void);
  
  public:
    /// Useful for template programming.
    typedef ::Quoter::AMI_Single_Query_StockHandler _stub_type;
    typedef ::Quoter::AMI_Single_Query_StockHandler_ptr _stub_ptr_type;
    typedef ::Quoter::AMI_Single_Query_StockHandler_var _stub_var_type;

    AMI_Single_Query_StockHandler (const AMI_Single_Query_StockHandler& rhs);
    virtual ~AMI_Single_Query_StockHandler (void);

    virtual ::CORBA::Boolean _is_a (const char* logical_type_id);

    virtual void _dispatch (
        TAO_ServerRequest & req,
        TAO::Portable_Server::Servant_Upcall *servant_upcall);
    
    ::Quoter::AMI_Single_Query_StockHandler *_this (void);
    
    virtual const char* _interface_repository_id (void) const;

    // TAO_IDL - Generated from
    // be/be_visitor_operation/operation_sh.cpp:36

    virtual void get_price_and_names (
      ::CORBA::Double ami_return_val,
      const char * symbol,
      const char * full_name) = 0;

    static void get_price_and_names_skel (
        TAO_ServerRequest &server_request,
        TAO::Portable_Server::Servant_Upcall *servant_upcall,
        TAO_ServantBase *servant);

    // TAO_IDL - Generated from
    // be/be_visitor_operation/operation_sh.cpp:36

    virtual void get_price_and_names_excep (
      ::Messaging::ExceptionHolder * excep_holder) = 0;

    static void get_price_and_names_excep_skel (
        TAO_ServerRequest &server_request,
        TAO::Portable_Server::Servant_Upcall *servant_upcall,
        TAO_ServantBase *servant);
  };

// TAO_IDL - Generated from
// be/be_visitor_module/module_sh.cpp:66

} // module Quoter

#include /**/ "ace/post.h"

#endif /* ifndef */

