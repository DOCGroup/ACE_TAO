#line 2 "fe/idl.yy.cpp"

#line 4 "fe/idl.yy.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define yy_create_buffer tao_yy_create_buffer
#define yy_delete_buffer tao_yy_delete_buffer
#define yy_scan_buffer tao_yy_scan_buffer
#define yy_scan_string tao_yy_scan_string
#define yy_scan_bytes tao_yy_scan_bytes
#define yy_init_buffer tao_yy_init_buffer
#define yy_flush_buffer tao_yy_flush_buffer
#define yy_load_buffer_state tao_yy_load_buffer_state
#define yy_switch_to_buffer tao_yy_switch_to_buffer
#define yypush_buffer_state tao_yypush_buffer_state
#define yypop_buffer_state tao_yypop_buffer_state
#define yyensure_buffer_stack tao_yyensure_buffer_stack
#define yy_flex_debug tao_yy_flex_debug
#define yyin tao_yyin
#define yyleng tao_yyleng
#define yylex tao_yylex
#define yylineno tao_yylineno
#define yyout tao_yyout
#define yyrestart tao_yyrestart
#define yytext tao_yytext
#define yywrap tao_yywrap
#define yyalloc tao_yyalloc
#define yyrealloc tao_yyrealloc
#define yyfree tao_yyfree

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 4
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

#ifdef yy_create_buffer
#define tao_yy_create_buffer_ALREADY_DEFINED
#else
#define yy_create_buffer tao_yy_create_buffer
#endif

#ifdef yy_delete_buffer
#define tao_yy_delete_buffer_ALREADY_DEFINED
#else
#define yy_delete_buffer tao_yy_delete_buffer
#endif

#ifdef yy_scan_buffer
#define tao_yy_scan_buffer_ALREADY_DEFINED
#else
#define yy_scan_buffer tao_yy_scan_buffer
#endif

#ifdef yy_scan_string
#define tao_yy_scan_string_ALREADY_DEFINED
#else
#define yy_scan_string tao_yy_scan_string
#endif

#ifdef yy_scan_bytes
#define tao_yy_scan_bytes_ALREADY_DEFINED
#else
#define yy_scan_bytes tao_yy_scan_bytes
#endif

#ifdef yy_init_buffer
#define tao_yy_init_buffer_ALREADY_DEFINED
#else
#define yy_init_buffer tao_yy_init_buffer
#endif

#ifdef yy_flush_buffer
#define tao_yy_flush_buffer_ALREADY_DEFINED
#else
#define yy_flush_buffer tao_yy_flush_buffer
#endif

#ifdef yy_load_buffer_state
#define tao_yy_load_buffer_state_ALREADY_DEFINED
#else
#define yy_load_buffer_state tao_yy_load_buffer_state
#endif

#ifdef yy_switch_to_buffer
#define tao_yy_switch_to_buffer_ALREADY_DEFINED
#else
#define yy_switch_to_buffer tao_yy_switch_to_buffer
#endif

#ifdef yypush_buffer_state
#define tao_yypush_buffer_state_ALREADY_DEFINED
#else
#define yypush_buffer_state tao_yypush_buffer_state
#endif

#ifdef yypop_buffer_state
#define tao_yypop_buffer_state_ALREADY_DEFINED
#else
#define yypop_buffer_state tao_yypop_buffer_state
#endif

#ifdef yyensure_buffer_stack
#define tao_yyensure_buffer_stack_ALREADY_DEFINED
#else
#define yyensure_buffer_stack tao_yyensure_buffer_stack
#endif

#ifdef yylex
#define tao_yylex_ALREADY_DEFINED
#else
#define yylex tao_yylex
#endif

#ifdef yyrestart
#define tao_yyrestart_ALREADY_DEFINED
#else
#define yyrestart tao_yyrestart
#endif

#ifdef yylex_init
#define tao_yylex_init_ALREADY_DEFINED
#else
#define yylex_init tao_yylex_init
#endif

#ifdef yylex_init_extra
#define tao_yylex_init_extra_ALREADY_DEFINED
#else
#define yylex_init_extra tao_yylex_init_extra
#endif

#ifdef yylex_destroy
#define tao_yylex_destroy_ALREADY_DEFINED
#else
#define yylex_destroy tao_yylex_destroy
#endif

#ifdef yyget_debug
#define tao_yyget_debug_ALREADY_DEFINED
#else
#define yyget_debug tao_yyget_debug
#endif

#ifdef yyset_debug
#define tao_yyset_debug_ALREADY_DEFINED
#else
#define yyset_debug tao_yyset_debug
#endif

#ifdef yyget_extra
#define tao_yyget_extra_ALREADY_DEFINED
#else
#define yyget_extra tao_yyget_extra
#endif

#ifdef yyset_extra
#define tao_yyset_extra_ALREADY_DEFINED
#else
#define yyset_extra tao_yyset_extra
#endif

#ifdef yyget_in
#define tao_yyget_in_ALREADY_DEFINED
#else
#define yyget_in tao_yyget_in
#endif

#ifdef yyset_in
#define tao_yyset_in_ALREADY_DEFINED
#else
#define yyset_in tao_yyset_in
#endif

#ifdef yyget_out
#define tao_yyget_out_ALREADY_DEFINED
#else
#define yyget_out tao_yyget_out
#endif

#ifdef yyset_out
#define tao_yyset_out_ALREADY_DEFINED
#else
#define yyset_out tao_yyset_out
#endif

#ifdef yyget_leng
#define tao_yyget_leng_ALREADY_DEFINED
#else
#define yyget_leng tao_yyget_leng
#endif

#ifdef yyget_text
#define tao_yyget_text_ALREADY_DEFINED
#else
#define yyget_text tao_yyget_text
#endif

#ifdef yyget_lineno
#define tao_yyget_lineno_ALREADY_DEFINED
#else
#define yyget_lineno tao_yyget_lineno
#endif

#ifdef yyset_lineno
#define tao_yyset_lineno_ALREADY_DEFINED
#else
#define yyset_lineno tao_yyset_lineno
#endif

#ifdef yywrap
#define tao_yywrap_ALREADY_DEFINED
#else
#define yywrap tao_yywrap
#endif

#ifdef yyalloc
#define tao_yyalloc_ALREADY_DEFINED
#else
#define yyalloc tao_yyalloc
#endif

#ifdef yyrealloc
#define tao_yyrealloc_ALREADY_DEFINED
#else
#define yyrealloc tao_yyrealloc
#endif

#ifdef yyfree
#define tao_yyfree_ALREADY_DEFINED
#else
#define yyfree tao_yyfree
#endif

#ifdef yytext
#define tao_yytext_ALREADY_DEFINED
#else
#define yytext tao_yytext
#endif

#ifdef yyleng
#define tao_yyleng_ALREADY_DEFINED
#else
#define yyleng tao_yyleng
#endif

#ifdef yyin
#define tao_yyin_ALREADY_DEFINED
#else
#define yyin tao_yyin
#endif

#ifdef yyout
#define tao_yyout_ALREADY_DEFINED
#else
#define yyout tao_yyout
#endif

#ifdef yy_flex_debug
#define tao_yy_flex_debug_ALREADY_DEFINED
#else
#define yy_flex_debug tao_yy_flex_debug
#endif

#ifdef yylineno
#define tao_yylineno_ALREADY_DEFINED
#else
#define yylineno tao_yylineno
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include "ace/OS_NS_stdio.h"
#include "ace/OS_NS_errno.h"

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L || defined (__HP_aCC)

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types.
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t;
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#ifndef SIZE_MAX
#define SIZE_MAX               (~(size_t)0)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
 */
#define YY_SC_TO_UI(c) ((YY_CHAR) (c))

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *
/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START
/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )
#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

extern int yyleng;

extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    #define YY_LINENO_REWIND_TO(ptr)

/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
    do \
        { \
        /* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
        *yy_cp = (yy_hold_char); \
        YY_RESTORE_YY_MORE_OFFSET \
        (yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
        YY_DO_BEFORE_ACTION; /* set up yytext again */ \
        } \
    while ( 0 )
#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
    {
    FILE *yy_input_file;

    char *yy_ch_buf;        /* input buffer */
    char *yy_buf_pos;        /* current position in input buffer */

    /* Size of input buffer in bytes, not including room for EOB
     * characters.
     */
    int yy_buf_size;

    /* Number of characters read into yy_ch_buf, not including EOB
     * characters.
     */
    int yy_n_chars;

    /* Whether we "own" the buffer - i.e., we know we created it,
     * and can realloc() it to grow it, and should free() it to
     * delete it.
     */
    int yy_is_our_buffer;

    /* Whether this is an "interactive" input source; if so, and
     * if we're using stdio for input, then we want to use getc()
     * instead of fread(), to make sure we stop fetching input after
     * each newline.
     */
    int yy_is_interactive;

    /* Whether we're considered to be at the beginning of a line.
     * If so, '^' rules will be active on the next match, otherwise
     * not.
     */
    int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */

    /* Whether to try to fill the input buffer when we reach the
     * end of it.
     */
    int yy_fill_buffer;

    int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
    /* When an EOF's been seen but there's still some text to process
     * then we mark the buffer as YY_EOF_PENDING, to indicate that we
     * shouldn't try reading from the input source any more.  We might
     * still have a bunch of tokens to match, though, because of
     * possible backing-up.
     *
     * When we actually see the EOF, we change the status to "new"
     * (via yyrestart()), so that the user can continue scanning by
     * just pointing yyin at a new input file.
     */
#define YY_BUFFER_EOF_PENDING 2

    };
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or 0.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : 0)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * 0 or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;
static int yy_n_chars;        /* number of characters read into yy_ch_buf */
int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = 0;
static int yy_init = 0;        /* whether we need to initialize */
static int yy_start = 0;    /* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart ( FILE *input_file  );
void yy_switch_to_buffer ( YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE yy_create_buffer ( FILE *file, int size  );
void yy_delete_buffer ( YY_BUFFER_STATE b  );
void yy_flush_buffer ( YY_BUFFER_STATE b  );
void yypush_buffer_state ( YY_BUFFER_STATE new_buffer  );
void yypop_buffer_state ( void );

static void yyensure_buffer_stack ( void );
static void yy_load_buffer_state ( void );
static void yy_init_buffer ( YY_BUFFER_STATE b, FILE *file  );
#define YY_FLUSH_BUFFER yy_flush_buffer( YY_CURRENT_BUFFER )

YY_BUFFER_STATE yy_scan_buffer ( char *base, yy_size_t size  );
YY_BUFFER_STATE yy_scan_string ( const char *yy_str  );
YY_BUFFER_STATE yy_scan_bytes ( const char *bytes, int len  );

void *yyalloc ( yy_size_t  );
void *yyrealloc ( void *, yy_size_t  );
void yyfree ( void *  );

#define yy_new_buffer yy_create_buffer
#define yy_set_interactive(is_interactive) \
    { \
    if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
        YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
    } \
    YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
    }
#define yy_set_bol(at_bol) \
    { \
    if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
        YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
    } \
    YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
    }
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */
typedef flex_uint8_t YY_CHAR;

FILE *yyin = 0, *yyout = 0;

typedef int yy_state_type;

extern int yylineno;
int yylineno = 1;

extern char yytext[];

static yy_state_type yy_get_previous_state ( void );
static yy_state_type yy_try_NUL_trans ( yy_state_type current_state  );
static int yy_get_next_buffer ( void );
static void yynoreturn yy_fatal_error ( const char* msg  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
    (yytext_ptr) = yy_bp; \
    yyleng = (int) (yy_cp - yy_bp); \
    (yy_hold_char) = *yy_cp; \
    *yy_cp = '\0'; \
    if ( yyleng >= YYLMAX ) \
        YY_FATAL_ERROR( "token too large, exceeds YYLMAX" ); \
    yy_flex_strncpy( yytext, (yytext_ptr), yyleng + 1 ); \
    (yy_c_buf_p) = yy_cp;
#define YY_NUM_RULES 113
#define YY_END_OF_BUFFER 114
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
    {
    flex_int32_t yy_verify;
    flex_int32_t yy_nxt;
    };
static const flex_int16_t yy_accept[605] =
    {   0,
      110,  110,  114,  112,  110,  111,  111,  112,  112,  112,
      112,  112,   85,   81,  112,  112,  112,   75,   76,   76,
       76,   76,   76,   76,   76,   76,   76,   76,   76,   76,
       76,   76,   76,   76,   76,   76,   76,   76,   76,   76,
       76,   76,   76,  110,  112,  111,  110,    0,   86,    0,
        0,    0,    0,   84,   80,   77,  109,    0,   77,   85,
        0,   79,    0,    0,   81,   73,   71,   72,    0,   76,
       76,    0,    0,   76,   76,   76,   76,   76,   76,   76,
       76,   76,   76,   76,   76,   76,   76,   76,   76,   76,
       76,   76,   76,   76,   76,   76,   68,   76,   76,   76,

       76,   76,   76,   76,   76,   76,   76,   76,   76,   76,
       76,   76,   76,   76,   76,   76,   76,   76,   76,   76,
       76,   76,   76,   76,  110,    0,    0,  104,    0,    0,
        0,    0,    0,    0,    0,   86,    0,    0,    0,   88,
        0,   88,    0,    0,   84,    0,   80,    0,   77,    0,
      108,  108,   77,    0,   78,   83,    0,   76,    0,   87,
        0,    0,    0,   76,   76,   76,   76,    1,   76,   76,
       76,   76,   76,   76,   76,   76,   76,   76,   76,   76,
       76,   76,   76,   76,   76,   76,   76,   76,   76,   76,
       76,   76,   76,   76,   76,   76,   76,   76,   76,   69,

       76,   76,   76,   76,   76,   76,   76,   76,   76,   76,
       76,   76,   76,   76,   76,   76,   76,   76,   76,   76,
       76,    0,    0,    0,    0,    0,    0,    0,    0,   91,
       89,    0,    0,   82,    0,   77,   78,    0,   76,   87,
        0,    0,    0,    0,   92,    0,   76,   65,   76,   76,
       76,   76,   20,   27,   76,   76,   76,   76,   76,   76,
       76,   76,   13,   76,   76,   76,   76,   76,   76,   76,
       48,   76,   76,   76,   76,   24,   76,   76,   76,   76,
       76,   76,   76,   60,   76,   76,   76,   76,   76,   76,
       76,   76,   76,   76,   76,   76,   76,   76,   76,   76,

       76,   57,   76,   31,   76,   76,    0,    0,    0,    0,
        0,    0,    0,  105,    0,    0,    0,    0,    0,    0,
        0,   89,    0,   90,    0,    0,   66,    0,    0,    0,
       76,   76,   64,   76,   76,   76,   76,   10,   76,   76,
       76,   76,   76,   44,   76,   76,   76,   76,   18,   22,
       76,   76,   67,   76,   33,   76,   76,   76,   76,   76,
       30,   76,   76,   76,   76,   76,   76,   76,   76,   76,
       76,   25,   76,   76,   76,   76,   76,   76,   76,   76,
       76,   17,   76,   76,   28,   76,  100,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,   93,    0,    2,   76,   76,   76,   76,   76,   76,
       76,   35,   76,   23,   76,   76,   76,   46,   76,   49,
       76,   76,   76,    3,   76,   32,   70,   76,   76,   76,
       76,   38,   76,    4,   76,   76,   76,   14,   12,   76,
       19,   76,   76,   55,   76,   76,   76,   76,   76,    0,
       98,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   76,   76,   29,   76,
       76,   76,    8,   21,   76,   76,   36,   76,   76,   58,
       76,   76,   76,   76,   37,   76,   76,   76,   76,   76,
       76,   76,   11,   76,   76,   76,   76,   15,    0,    0,

       96,   96,    0,    0,  102,    0,    0,  101,    0,    0,
        0,    0,    0,    0,    0,    0,   34,   76,   76,   76,
       43,   76,   76,   76,   76,   76,   50,   62,   76,   52,
       76,    5,   16,   76,   39,   76,   59,   76,   26,   76,
        0,  106,  106,    0,    0,    0,    0,   99,    0,    0,
        0,    0,    0,    0,    0,    0,    6,   42,   63,   45,
        7,   47,    9,   76,   76,   53,   54,   76,   76,   41,
        0,    0,    0,   94,   94,    0,    0,   97,   97,    0,
        0,    0,    0,    0,   61,   51,   76,   56,    0,    0,
      107,  107,    0,    0,    0,    0,   40,    0,  103,    0,

       95,   95,   74,    0
    } ;

static const YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    5,    1,    6,    7,    1,    1,    1,    8,    1,
        1,    9,   10,    1,   11,   12,   13,   14,   15,   15,
       15,   15,   15,   15,   15,   16,   16,   17,    1,   18,
       19,   20,   21,   22,   23,   24,   24,   25,   26,   27,
       28,   28,   28,   28,   28,   29,   28,   28,   30,   28,
       28,   31,   32,   33,   34,   28,   28,   35,   28,   28,
        1,   36,    1,    1,   28,    1,   37,   38,   39,   40,

       41,   42,   43,   44,   45,   46,   47,   48,   49,   50,
       51,   52,   53,   54,   55,   56,   57,   58,   59,   60,
       61,   28,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static const YY_CHAR yy_meta[62] =
    {   0,
        1,    1,    2,    1,    1,    3,    1,    4,    1,    1,
        1,    1,    1,    5,    5,    6,    1,    1,    1,    1,
        3,    1,    6,    6,    6,    6,    6,    7,    7,    7,
        7,    7,    7,    7,    7,    3,    5,    5,    6,    6,
        6,    5,    7,    7,    7,    7,    7,    7,    7,    8,
        7,    7,    7,    8,    7,    8,    9,    8,    7,    8,
        7
    } ;

static const flex_int16_t yy_base[634] =
    {   0,
        0,   60, 1192, 1193,   61, 1193, 1193,   58, 1155,   56,
       59,   67,   83,   75, 1173, 1171, 1168, 1150,    0, 1163,
       71, 1147, 1153,   54, 1132,   68,   37,   71,   48, 1141,
     1130,   33, 1129,   77, 1142,   87,   76,   66,   91,   52,
       86,  101,  100,  144,  154, 1157,  140,  147,  158,  147,
     1169,  157,  162,  152,  179,  207, 1193,  176,  170,  199,
      238, 1193,  227,    0,  244, 1193, 1193, 1193, 1126,    0,
     1146,  167, 1138, 1127, 1138, 1116, 1125, 1108, 1112, 1116,
     1111, 1128,  132, 1109, 1121, 1105, 1116, 1103, 1118, 1119,
     1118,  138, 1105, 1099, 1105, 1101,  175,  150, 1102, 1097,

     1110, 1101, 1092, 1091, 1105, 1089, 1090,   66, 1105, 1097,
     1104,  154, 1089, 1085, 1086, 1092, 1079, 1083,  163, 1093,
     1085, 1087, 1087, 1074,  260,    0,  187, 1193, 1123,  272,
     1083, 1087, 1081, 1071, 1105,  266,  210,  221,  267, 1193,
     1115, 1114,  275, 1113,  280,    0,  285,  298, 1193,  312,
     1193,  314,    0,  308,  313,    0, 1070, 1087,  238,  302,
      322, 1110,  290, 1076, 1090, 1059, 1077,    0, 1059, 1064,
     1070, 1056, 1057,  288, 1052, 1070, 1068, 1049, 1055, 1053,
     1061, 1045, 1060, 1058, 1061, 1043, 1055, 1044, 1037, 1052,
     1055, 1048, 1053, 1035, 1031, 1031, 1041, 1044, 1025,    0,

     1027,  281, 1024, 1033, 1025, 1039, 1021, 1023, 1022,  289,
     1023, 1018, 1023, 1031, 1020, 1025, 1014, 1011, 1027, 1029,
     1011, 1058, 1057, 1014, 1020, 1010, 1022,  378,  335, 1193,
     1193,  337, 1050,    0,  342,  348, 1193, 1006, 1030,  368,
     1049,  255,  353,    0, 1193,    0, 1015,    0,  999,  997,
     1006, 1009,    0,    0,  998, 1007,  297, 1006,  995,  988,
      996,  988,    0,  986,  989,  989,  998,  998,  981,  999,
        0,  981,  978,  979,  984,    0,  988,  979,  981,  983,
      969,  970,  988,  968,  986,  985,  976,  975,  978,  967,
      976,  979,  959,  964,  974,  961,  972,  971,  355,  959,

      965,    0,  966,    0,  952,  960,  998,  381,  962,  952,
      960,  957,  951, 1193,  203,  413,  953,  957,  951,  941,
      296, 1193,  986, 1193,  985,  936,    0,  395,  429,  983,
      934,  952,    0,  950,  950,  936,  946,    0,  935,  923,
      933,  933,  939,    0,  923,  922,  923,  922,    0,    0,
      930,  918,    0,  931,    0,  931,  917,  929,  917,  927,
        0,  906,  905,  911,  908,  923,  135,  907,  911,  910,
      914,    0,  915,  901,  902,  911,  917,  912,  912,  914,
      896,    0,  899,  892,    0,  897, 1193,  458,  364,  890,
      434,  896,  938,  937,  894,  900,  890,  902,  901,  342,

      466, 1193,  929,    0,  897,  878,  884,  892,  876,  890,
      874,    0,  873,    0,  867,  882,  865,    0,  870,    0,
      887,  868,  758,    0,  761,    0,    0,  741,  703,  720,
      719,    0,  700,    0,  684,  692,  675,    0,    0,  673,
        0,  672,  685,    0,  677,  684,  683,  661,  678,  481,
     1193,  496,  400,  386,  511,  516,  683,  712,  437,  676,
      661,  668,  664,  647,  524,  687,  625,  613,    0,  614,
      606,  580,    0,    0,  579,  578,    0,  585,  586,    0,
      570,  578,  569,  538,    0,  529,  542,  520,  539,  518,
      503,  508,    0,  483,  481,  475,  462,    0,  539,  411,

     1193,  443,  473,  565, 1193,  503,  406, 1193,  573,  417,
      432,  577,  438,  414,  370,  449,    0,  410,  382,  383,
        0,  392,  375,  369,  372,  358,    0,    0,  357,    0,
      332,    0,    0,  319,    0,  334,    0,  320,    0,  319,
      525, 1193,  531,  313,  593,  553,  597, 1193,  601,  569,
      473,  618,  622,  625,  243,  215,    0,    0,    0,    0,
        0,    0,    0,  189,  169,    0,    0,  180,  141,    0,
      640,  644,  647, 1193,  649,  659,  663, 1193,  668,  673,
      148,  134,  531,   36,    0,    0,   43,    0,  683,  675,
     1193,  679,   63,  687,  689,    0,    0,  698, 1193,  702,

     1193,  712, 1193, 1193,  733,  742,  747,  754,  762,  771,
      776,  782,  791,  797,  799,  803,  812,  818,  820,  822,
      825,  831,  837,  843,  849,  855,  864,  873,  882,  891,
      900,  909,  918
    } ;

static const flex_int16_t yy_def[634] =
    {   0,
      604,    1,  604,  604,  604,  604,  604,  605,  606,  604,
      604,  604,  604,  604,  604,  604,  604,  604,  607,  607,
      607,  607,  607,  607,  607,  607,  607,  607,  607,  607,
      607,  607,  607,  607,  607,  607,  607,  607,  607,  607,
      607,  607,  607,  604,  604,  604,  604,  605,  604,  608,
      604,  609,  604,   13,  604,  604,  604,  610,   56,  604,
      604,  604,  604,  611,  604,  604,  604,  604,  604,  607,
      607,  612,  613,  607,  607,  607,  607,  607,  607,  607,
      607,  607,  607,  607,  607,  607,  607,  607,  607,  607,
      607,  607,  607,  607,  607,  607,  607,  607,  607,  607,

      607,  607,  607,  607,  607,  607,  607,  607,  607,  607,
      607,  607,  607,  607,  607,  607,  607,  607,  607,  607,
      607,  607,  607,  607,  604,   45,   45,  604,  127,  604,
      604,  604,  604,  604,  604,  604,  605,  605,  605,  604,
      604,  604,  604,  614,  604,  615,  604,  604,  604,  610,
      604,  610,   59,  604,  604,  611,  604,  607,  612,  604,
      616,  604,  604,  607,  607,  607,  607,  607,  607,  607,
      607,  607,  607,  607,  607,  607,  607,  607,  607,  607,
      607,  607,  607,  607,  607,  607,  607,  607,  607,  607,
      607,  607,  607,  607,  607,  607,  607,  607,  607,  607,

      607,  607,  607,  607,  607,  607,  607,  607,  607,  607,
      607,  607,  607,  607,  607,  607,  607,  607,  607,  607,
      607,  617,  604,  604,  604,  604,  604,  604,  605,  604,
      604,  604,  618,  615,  604,  604,  604,  604,  607,  604,
      604,  612,  612,  619,  604,  620,  607,  607,  607,  607,
      607,  607,  607,  607,  607,  607,  607,  607,  607,  607,
      607,  607,  607,  607,  607,  607,  607,  607,  607,  607,
      607,  607,  607,  607,  607,  607,  607,  607,  607,  607,
      607,  607,  607,  607,  607,  607,  607,  607,  607,  607,
      607,  607,  607,  607,  607,  607,  607,  607,  607,  607,

      607,  607,  607,  607,  607,  607,  617,  604,  604,  604,
      604,  604,  228,  604,  228,  604,  604,  604,  604,  604,
      605,  604,  604,  604,  604,  604,  607,  612,  612,  621,
      607,  607,  607,  607,  607,  607,  607,  607,  607,  607,
      607,  607,  607,  607,  607,  607,  607,  607,  607,  607,
      607,  607,  607,  607,  607,  607,  607,  607,  607,  607,
      607,  607,  607,  607,  607,  607,  607,  607,  607,  607,
      607,  607,  607,  607,  607,  607,  607,  607,  607,  607,
      607,  607,  607,  607,  607,  607,  604,  604,  604,  604,
      604,  604,  622,  604,  604,  604,  604,  604,  604,  612,

      329,  604,  623,  607,  607,  607,  607,  607,  607,  607,
      607,  607,  607,  607,  607,  607,  607,  607,  607,  607,
      607,  607,  607,  607,  607,  607,  607,  607,  607,  607,
      607,  607,  607,  607,  607,  607,  607,  607,  607,  607,
      607,  607,  607,  607,  607,  607,  607,  607,  607,  604,
      604,  604,  624,  604,  604,  604,  604,  622,  604,  604,
      604,  604,  604,  604,  329,  625,  607,  607,  607,  607,
      607,  607,  607,  607,  607,  607,  607,  607,  607,  607,
      607,  607,  607,  607,  607,  607,  607,  607,  607,  607,
      607,  607,  607,  607,  607,  607,  607,  607,  604,  624,

      604,  624,  626,  604,  604,  627,  604,  604,  604,  604,
      604,  604,  604,  604,  612,  604,  607,  607,  607,  607,
      607,  607,  607,  607,  607,  607,  607,  607,  607,  607,
      607,  607,  607,  607,  607,  607,  607,  607,  607,  607,
      626,  604,  626,  627,  604,  628,  604,  604,  604,  629,
      604,  604,  604,  604,  604,  604,  607,  607,  607,  607,
      607,  607,  607,  607,  607,  607,  607,  607,  607,  607,
      604,  604,  628,  604,  628,  604,  629,  604,  629,  630,
      631,  604,  604,  604,  607,  607,  607,  607,  604,  630,
      604,  630,  631,  604,  632,  633,  607,  604,  604,  632,

      604,  632,  604,    0,  604,  604,  604,  604,  604,  604,
      604,  604,  604,  604,  604,  604,  604,  604,  604,  604,
      604,  604,  604,  604,  604,  604,  604,  604,  604,  604,
      604,  604,  604
    } ;

static const flex_int16_t yy_nxt[1255] =
    {   0,
        4,    5,    6,    7,    5,    8,    4,    9,    4,    4,
       10,   11,   12,   13,   14,   14,   15,   16,    4,   17,
        7,   18,   19,   19,   19,   19,   20,   19,   21,   22,
       19,   19,   23,   19,   19,    4,   24,   25,   26,   27,
       28,   29,   30,   31,   32,   19,   19,   33,   34,   35,
       36,   37,   19,   38,   39,   40,   41,   42,   43,   19,
       19,   44,   47,   49,   44,   47,   45,   53,  594,   54,
       55,   55,   56,   56,   56,   57,   72,   85,   73,   58,
       46,   96,   97,  597,   91,  596,   59,   86,   65,   65,
       65,   76,   92,   50,   59,   93,   60,   60,   61,   62,

       63,   77,  110,   78,   81,  117,  111,   62,   63,   79,
      202,   82,  118,   99,   62,   63,  203,   64,   83,   87,
       88,  100,   62,   63,   84,  104,  107,  101,   89,  108,
       90,  112,  109,  102,  113,  119,  105,  121,  123,  581,
      120,   47,   64,  106,   47,  125,  114,  115,  125,  116,
      126,  122,   49,  594,  124,  127,  128,  128,  129,  136,
      139,  139,  136,  137,  142,  145,  145,  130,  130,  130,
      143,  143,  160,  432,  128,   56,   56,   56,  151,  152,
      173,  174,   50,  153,  153,  153,  146,  183,  191,  433,
       59,  144,  147,  147,  147,  131,  152,  184,  132,  192,

      588,  133,  161,   62,   63,  134,  207,  215,  393,  208,
       59,  146,   60,   60,   61,   49,  144,  216,   62,   63,
       56,   56,   56,   62,   63,  189,   49,  587,  604,  586,
      190,   62,  148,  149,  604,  149,  154,  154,   62,   63,
      155,  155,  155,  160,  585,   50,   62,  148,  149,   59,
      604,   61,   61,   61,  149,   59,   50,   65,   65,   65,
      160,  125,   62,   63,  125,  584,  126,  136,   62,   63,
      136,  137,   49,  161,  128,  128,  223,   62,   63,  583,
      229,  229,  231,   62,   63,  130,  130,  130,  232,  232,
      161,   59,  128,  145,  145,   61,   59,  245,  147,  147,

      147,   49,   50,  240,   62,   63,  240,  235,  235,   62,
       63,  236,  236,  236,  151,  152,  151,  152,  545,   62,
       63,  155,  155,  155,   62,   63,  155,  155,  155,  285,
      241,   50,  152,  294,  152,  243,  243,  256,  286,  237,
       49,  237,  257,  258,  322,  295,  246,  160,  321,  321,
      323,  323,  338,  339,  237,  236,  236,  236,  160,  570,
      237,  236,  236,  236,  569,  453,  328,  328,  453,  240,
       50,  568,  240,  567,  149,  160,  149,  161,  244,  313,
      314,  314,  315,  387,  387,  388,  566,  503,  161,  149,
      503,  316,  316,  316,  378,  149,  241,  565,  314,  379,

      160,  387,  501,  502,  380,  161,  381,  546,  400,  400,
      546,  564,  563,  501,  502,  314,  314,  394,  550,  317,
      502,  550,  318,  562,  561,  319,  316,  316,  316,  320,
      161,  502,  560,  314,  160,  455,  559,  558,  455,  508,
      508,  509,  401,  401,  401,  501,  502,  456,  456,  456,
      557,  401,  401,  401,  401,  401,  402,  508,  556,  450,
      451,  451,  450,  502,  161,  401,  401,  401,  401,  401,
      401,  452,  452,  452,  580,  542,  543,  580,  451,  465,
      465,  465,  450,  451,  451,  450,  555,  551,  465,  465,
      465,  465,  465,  543,  499,  499,  499,  450,  451,  451,

      450,  451,  465,  465,  465,  465,  465,  465,  545,  452,
      452,  452,  455,  540,  539,  455,  451,  504,  505,  505,
      504,  506,  538,  537,  456,  456,  456,  542,  543,  456,
      456,  456,  595,  542,  543,  595,  505,  515,  515,  515,
      450,  451,  451,  450,  536,  543,  515,  515,  515,  515,
      515,  543,  499,  499,  499,  574,  575,  535,  534,  451,
      515,  515,  515,  515,  515,  515,  504,  505,  505,  504,
      506,  578,  579,  575,  547,  548,  548,  547,  552,  533,
      532,  553,  531,  530,  529,  505,  549,  549,  549,  579,
      554,  554,  554,  548,  571,  505,  505,  571,  547,  548,

      548,  547,  547,  548,  548,  547,  572,  572,  572,  528,
      576,  576,  576,  505,  549,  549,  549,  548,  527,  552,
      526,  548,  553,  552,  525,  524,  553,  581,  523,  582,
      522,  554,  554,  554,  521,  554,  554,  554,  554,  554,
      554,  571,  505,  505,  571,  589,  505,  505,  589,  574,
      575,  574,  575,  572,  572,  572,  520,  572,  572,  572,
      505,  548,  548,  519,  505,  578,  579,  575,  518,  575,
      578,  579,  576,  576,  576,  591,  592,  591,  592,  548,
      517,  591,  592,  579,  589,  505,  505,  589,  579,  599,
      599,  601,  602,  592,  402,  592,  598,  598,  598,  592,

      505,  505,  514,  505,  601,  602,  513,  599,  512,  602,
      511,  598,  598,  598,  601,  602,  510,  459,  505,  507,
      498,  497,  602,  496,  495,  494,  493,  492,  491,  490,
      489,  488,  602,   48,   48,   48,   48,   48,   48,   48,
       48,   48,   51,  487,   51,   51,   51,   51,   51,   51,
       51,   70,   70,   70,   70,   70,  138,  138,  138,  486,
      485,  138,  141,  484,  141,  141,  141,  141,  141,  141,
      141,  150,  150,  150,  150,  150,  150,  150,  150,  150,
      156,  156,  159,  159,  159,  159,  159,  159,  159,  159,
      159,  162,  483,  162,  162,  162,  162,  162,  162,  162,

      233,  233,  233,  234,  234,  242,  242,  242,  482,  481,
      242,  242,  307,  307,  307,  307,  307,  307,  307,  307,
      307,  325,  325,  325,  329,  329,  330,  330,  403,  403,
      403,  458,  458,  458,  458,  458,  458,  458,  458,  458,
      466,  466,  466,  500,  500,  500,  500,  500,  500,  500,
      500,  500,  516,  516,  516,  541,  541,  541,  541,  541,
      541,  541,  541,  541,  544,  544,  544,  544,  544,  544,
      544,  544,  544,  573,  573,  573,  573,  573,  573,  573,
      573,  573,  577,  577,  577,  577,  577,  577,  577,  577,
      577,  590,  590,  590,  590,  590,  590,  590,  590,  590,

      593,  593,  593,  593,  593,  593,  593,  593,  593,  600,
      600,  600,  600,  600,  600,  600,  600,  600,  603,  603,
      603,  603,  480,  479,  478,  477,  476,  475,  474,  473,
      472,  471,  470,  469,  468,  467,  402,  464,  463,  462,
      461,  460,  393,  459,  457,  454,  449,  448,  447,  446,
      445,  444,  443,  442,  441,  440,  439,  438,  437,  436,
      435,  434,  431,  430,  429,  428,  427,  426,  425,  424,
      423,  422,  421,  420,  419,  418,  417,  416,  415,  414,
      413,  412,  411,  410,  409,  408,  407,  406,  405,  404,
      402,  399,  324,  322,  398,  397,  396,  395,  604,  392,

      391,  390,  389,  308,  386,  385,  384,  383,  382,  377,
      376,  375,  374,  373,  372,  371,  370,  369,  368,  367,
      366,  365,  364,  363,  362,  361,  360,  359,  358,  357,
      356,  355,  354,  353,  352,  351,  350,  349,  348,  347,
      346,  345,  344,  343,  342,  341,  340,  337,  336,  335,
      334,  333,  332,  331,   72,  327,  326,  324,  312,  311,
      310,  309,  222,  308,  306,  305,  304,  303,  302,  301,
      300,  299,  298,  297,  296,  293,  292,  291,  290,  289,
      288,  287,  284,  283,  282,  281,  280,  279,  278,  277,
      276,  275,  274,  273,  272,  271,  270,  269,  268,  267,

      266,  265,  264,  263,  262,  261,  260,  259,  255,  254,
      253,  252,  251,  250,  249,  248,  247,  245,  239,  238,
      230,  230,  230,  228,  227,  226,  225,  224,  222,  221,
      220,  219,  218,  217,  214,  213,  212,  211,  210,  209,
      206,  205,  204,  201,  200,  199,  198,  197,  196,  195,
      194,  193,  188,  187,  186,  185,  182,  181,  180,  179,
      178,  177,  176,  175,  172,  171,  170,  169,  168,  167,
      166,  165,  164,  163,  158,  157,  140,  135,  103,   98,
       95,   94,   80,   75,   74,   71,   69,   68,   67,   66,
       52,  604,    3,  604,  604,  604,  604,  604,  604,  604,

      604,  604,  604,  604,  604,  604,  604,  604,  604,  604,
      604,  604,  604,  604,  604,  604,  604,  604,  604,  604,
      604,  604,  604,  604,  604,  604,  604,  604,  604,  604,
      604,  604,  604,  604,  604,  604,  604,  604,  604,  604,
      604,  604,  604,  604,  604,  604,  604,  604,  604,  604,
      604,  604,  604,  604
    } ;

static const flex_int16_t yy_chk[1255] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    5,    8,    2,    5,    2,   10,  593,   10,
       10,   10,   11,   11,   11,   12,   21,   27,   21,   12,
        2,   32,   32,  587,   29,  584,   14,   27,   14,   14,
       14,   24,   29,    8,   13,   29,   13,   13,   13,   14,

       14,   24,   38,   24,   26,   40,   38,   13,   13,   24,
      108,   26,   40,   34,   14,   14,  108,   13,   26,   28,
       28,   34,   13,   13,   26,   36,   37,   34,   28,   37,
       28,   39,   37,   34,   39,   41,   36,   42,   43,  582,
       41,   47,   13,   36,   47,   44,   39,   39,   44,   39,
       44,   42,   48,  581,   43,   45,   45,   45,   45,   49,
       50,   50,   49,   49,   52,   54,   54,   45,   45,   45,
       52,   52,   72,  367,   45,   53,   53,   53,   58,   58,
       83,   83,   48,   59,   59,   59,   54,   92,   98,  367,
       55,   52,   55,   55,   55,   45,   58,   92,   45,   98,

      569,   45,   72,   55,   55,   45,  112,  119,  315,  112,
       60,   54,   60,   60,   60,  137,   52,  119,   55,   55,
       56,   56,   56,   60,   60,   97,  138,  568,  127,  565,
       97,   56,   56,   56,  127,   56,   63,   63,   60,   60,
       63,   63,   63,  159,  564,  137,   56,   56,   56,   61,
      315,   61,   61,   61,   56,   65,  138,   65,   65,   65,
      242,  125,   61,   61,  125,  556,  125,  136,   65,   65,
      136,  136,  139,  159,  130,  130,  130,   61,   61,  555,
      139,  139,  143,   65,   65,  130,  130,  130,  143,  143,
      242,  145,  130,  145,  145,  145,  147,  163,  147,  147,

      147,  321,  139,  160,  145,  145,  160,  148,  148,  147,
      147,  148,  148,  148,  150,  150,  152,  152,  544,  145,
      145,  154,  154,  154,  147,  147,  155,  155,  155,  202,
      160,  321,  150,  210,  152,  161,  161,  174,  202,  155,
      229,  155,  174,  174,  232,  210,  163,  400,  229,  229,
      232,  232,  257,  257,  155,  235,  235,  235,  243,  540,
      155,  236,  236,  236,  538,  389,  243,  243,  389,  240,
      229,  536,  240,  534,  236,  515,  236,  400,  161,  228,
      228,  228,  228,  308,  308,  308,  531,  454,  243,  236,
      454,  228,  228,  228,  299,  236,  240,  529,  228,  299,

      328,  308,  453,  453,  299,  515,  299,  507,  328,  328,
      507,  526,  525,  500,  500,  316,  316,  316,  510,  228,
      453,  510,  228,  524,  523,  228,  316,  316,  316,  228,
      328,  500,  522,  316,  329,  391,  520,  519,  391,  459,
      459,  459,  329,  329,  329,  502,  502,  391,  391,  391,
      518,  329,  329,  329,  329,  329,  516,  459,  514,  388,
      388,  388,  388,  502,  329,  329,  329,  329,  329,  329,
      329,  388,  388,  388,  551,  503,  503,  551,  388,  401,
      401,  401,  450,  450,  450,  450,  513,  511,  401,  401,
      401,  401,  401,  503,  450,  450,  450,  452,  452,  452,

      452,  450,  401,  401,  401,  401,  401,  401,  506,  452,
      452,  452,  455,  497,  496,  455,  452,  456,  456,  456,
      456,  456,  495,  494,  455,  455,  455,  541,  541,  456,
      456,  456,  583,  543,  543,  583,  456,  465,  465,  465,
      499,  499,  499,  499,  492,  541,  465,  465,  465,  465,
      465,  543,  499,  499,  499,  546,  546,  491,  490,  499,
      465,  465,  465,  465,  465,  465,  504,  504,  504,  504,
      504,  550,  550,  546,  509,  509,  509,  509,  512,  489,
      488,  512,  487,  486,  484,  504,  509,  509,  509,  550,
      512,  512,  512,  509,  545,  545,  545,  545,  547,  547,

      547,  547,  549,  549,  549,  549,  545,  545,  545,  483,
      547,  547,  547,  545,  549,  549,  549,  547,  482,  552,
      481,  549,  552,  553,  479,  478,  553,  553,  476,  554,
      475,  552,  552,  552,  472,  553,  553,  553,  554,  554,
      554,  571,  571,  571,  571,  572,  572,  572,  572,  573,
      573,  575,  575,  571,  571,  571,  471,  572,  572,  572,
      571,  576,  576,  470,  572,  577,  577,  573,  468,  575,
      579,  579,  576,  576,  576,  580,  580,  590,  590,  576,
      467,  592,  592,  577,  589,  589,  589,  589,  579,  594,
      594,  595,  595,  580,  466,  590,  589,  589,  589,  592,

      598,  598,  464,  589,  600,  600,  463,  594,  462,  595,
      461,  598,  598,  598,  602,  602,  460,  458,  598,  457,
      449,  448,  600,  447,  446,  445,  443,  442,  440,  437,
      436,  435,  602,  605,  605,  605,  605,  605,  605,  605,
      605,  605,  606,  433,  606,  606,  606,  606,  606,  606,
      606,  607,  607,  607,  607,  607,  608,  608,  608,  431,
      430,  608,  609,  429,  609,  609,  609,  609,  609,  609,
      609,  610,  610,  610,  610,  610,  610,  610,  610,  610,
      611,  611,  612,  612,  612,  612,  612,  612,  612,  612,
      612,  613,  428,  613,  613,  613,  613,  613,  613,  613,

      614,  614,  614,  615,  615,  616,  616,  616,  425,  423,
      616,  616,  617,  617,  617,  617,  617,  617,  617,  617,
      617,  618,  618,  618,  619,  619,  620,  620,  621,  621,
      621,  622,  622,  622,  622,  622,  622,  622,  622,  622,
      623,  623,  623,  624,  624,  624,  624,  624,  624,  624,
      624,  624,  625,  625,  625,  626,  626,  626,  626,  626,
      626,  626,  626,  626,  627,  627,  627,  627,  627,  627,
      627,  627,  627,  628,  628,  628,  628,  628,  628,  628,
      628,  628,  629,  629,  629,  629,  629,  629,  629,  629,
      629,  630,  630,  630,  630,  630,  630,  630,  630,  630,

      631,  631,  631,  631,  631,  631,  631,  631,  631,  632,
      632,  632,  632,  632,  632,  632,  632,  632,  633,  633,
      633,  633,  422,  421,  419,  417,  416,  415,  413,  411,
      410,  409,  408,  407,  406,  405,  403,  399,  398,  397,
      396,  395,  394,  393,  392,  390,  386,  384,  383,  381,
      380,  379,  378,  377,  376,  375,  374,  373,  371,  370,
      369,  368,  366,  365,  364,  363,  362,  360,  359,  358,
      357,  356,  354,  352,  351,  348,  347,  346,  345,  343,
      342,  341,  340,  339,  337,  336,  335,  334,  332,  331,
      330,  326,  325,  323,  320,  319,  318,  317,  313,  312,

      311,  310,  309,  307,  306,  305,  303,  301,  300,  298,
      297,  296,  295,  294,  293,  292,  291,  290,  289,  288,
      287,  286,  285,  284,  283,  282,  281,  280,  279,  278,
      277,  275,  274,  273,  272,  270,  269,  268,  267,  266,
      265,  264,  262,  261,  260,  259,  258,  256,  255,  252,
      251,  250,  249,  247,  241,  239,  238,  233,  227,  226,
      225,  224,  223,  222,  221,  220,  219,  218,  217,  216,
      215,  214,  213,  212,  211,  209,  208,  207,  206,  205,
      204,  203,  201,  199,  198,  197,  196,  195,  194,  193,
      192,  191,  190,  189,  188,  187,  186,  185,  184,  183,

      182,  181,  180,  179,  178,  177,  176,  175,  173,  172,
      171,  170,  169,  167,  166,  165,  164,  162,  158,  157,
      144,  142,  141,  135,  134,  133,  132,  131,  129,  124,
      123,  122,  121,  120,  118,  117,  116,  115,  114,  113,
      111,  110,  109,  107,  106,  105,  104,  103,  102,  101,
      100,   99,   96,   95,   94,   93,   91,   90,   89,   88,
       87,   86,   85,   84,   82,   81,   80,   79,   78,   77,
       76,   75,   74,   73,   71,   69,   51,   46,   35,   33,
       31,   30,   25,   23,   22,   20,   18,   17,   16,   15,
        9,    3,  604,  604,  604,  604,  604,  604,  604,  604,

      604,  604,  604,  604,  604,  604,  604,  604,  604,  604,
      604,  604,  604,  604,  604,  604,  604,  604,  604,  604,
      604,  604,  604,  604,  604,  604,  604,  604,  604,  604,
      604,  604,  604,  604,  604,  604,  604,  604,  604,  604,
      604,  604,  604,  604,  604,  604,  604,  604,  604,  604,
      604,  604,  604,  604
    } ;

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int yy_flex_debug;
int yy_flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#ifndef YYLMAX
#define YYLMAX 8192
#endif

char yytext[YYLMAX];
char *yytext_ptr;
#line 1 "fe/idl.ll"
#line 2 "fe/idl.ll"
/*

COPYRIGHT

Copyright 1992, 1993, 1994 Sun Microsystems, Inc.  Printed in the United
States of America.  All Rights Reserved.

This product is protected by copyright and distributed under the following
license restricting its use.

The Interface Definition Language Compiler Front End (CFE) is made
available for your use provided that you include this license and copyright
notice on all media and documentation and the software program in which
this product is incorporated in whole or part. You may copy and extend
functionality (but may not remove functionality) of the Interface
Definition Language CFE without charge, but you are not authorized to
license or distribute it to anyone else except as part of a product or
program developed by you or with the express written consent of Sun
Microsystems, Inc. ("Sun").

The names of Sun Microsystems, Inc. and any of its subsidiaries or
affiliates may not be used in advertising or publicity pertaining to
distribution of Interface Definition Language CFE as permitted herein.

This license is effective until terminated by Sun for failure to comply
with this license.  Upon termination, you shall destroy or return all code
and documentation for the Interface Definition Language CFE.

IDL_INTERFACE DEFINITION LANGUAGE CFE IS PROVIDED AS IS WITH NO WARRANTIES OF
IDL_ANY KIND INCLUDING THE WARRANTIES OF DESIGN, MERCHANTIBILITY AND FITNESS
FOR A PARTICULAR PURPOSE, NONINFRINGEMENT, OR ARISING FROM A COURSE OF
DEALING, USAGE OR TRADE PRACTICE.

IDL_INTERFACE DEFINITION LANGUAGE CFE IS PROVIDED WITH NO SUPPORT AND WITHOUT
IDL_ANY OBLIGATION ON THE PART OF Sun OR IDL_ANY OF ITS SUBSIDIARIES OR AFFILIATES
TO ASSIST IDL_IN ITS USE, CORRECTION, MODIFICATION OR ENHANCEMENT.

SUN OR IDL_ANY OF ITS SUBSIDIARIES OR AFFILIATES SHALL HAVE NO LIABILITY WITH
RESPECT TO THE INFRINGEMENT OF COPYRIGHTS, TRADE SECRETS OR IDL_ANY PATENTS BY
IDL_INTERFACE DEFINITION LANGUAGE CFE OR IDL_ANY PART THEREOF.

IDL_IN NO EVENT WILL SUN OR IDL_ANY OF ITS SUBSIDIARIES OR AFFILIATES BE LIABLE FOR
IDL_ANY LOST REVENUE OR PROFITS OR OTHER SPECIAL, INDIRECT AND CONSEQUENTIAL
DAMAGES, EVEN IF SUN HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.

Use, duplication, or disclosure by the government is subject to
restrictions as set forth in subparagraph (c)(1)(ii) of the Rights in
Technical Data and Computer Software clause at DFARS 252.227-7013 and FAR
52.227-19.

Sun, Sun Microsystems and the Sun logo are trademarks or registered
trademarks of Sun Microsystems, Inc.

SunSoft, Inc.
2550 Garcia Avenue
Mountain View, California  94043

NOTE:

SunOS, SunSoft, Sun, Solaris, Sun Microsystems or the Sun logo are
trademarks or registered trademarks of Sun Microsystems, Inc.

 */

/*
 * idl.ll - Lexical scanner for IDL
 */

#include "global_extern.h"
#include "nr_extern.h"
#include "utl_strlist.h"
#include "utl_exprlist.h"
#include "utl_labellist.h"
#include "utl_decllist.h"
#include "utl_string.h"
#include "utl_err.h"
#include "ast_union_label.h"
#include "ast_field.h"
#include "ast_expression.h"
#include "ast_argument.h"
#include "ast_operation.h"
#include "ast_root.h"
#include "fe_interface_header.h"
#include "fe_obv_header.h"
#include "fe_component_header.h"
#include "fe_home_header.h"
#include "fe_private.h"
#include "fe_extern.h"
#include "ast_annotation_appl.h"
#include "idl.tab.hpp"

static char *               idl_wstring_escape_reader (char *);
static ACE_CDR::WChar       idl_wchar_escape_reader (char *);
static ACE_CDR::Char        idl_escape_reader (char *);
static ACE_CDR::Double      idl_atof (char *);
static ACE_CDR::LongLong    idl_atoi (char *, long);
static ACE_CDR::ULongLong   idl_atoui (char *, long);
static void                 idl_parse_line_and_file (char *);
static void                 idl_store_pragma (char *);
static char *               idl_get_pragma_string (char *);
static bool                 idl_valid_version (char *);
static AST_Decl *           idl_find_node (const char *);

#define ace_yytext yytext

#ifdef USE_MCPP_BUFFER_LEXING
#include "mcpp_yyinput.h"
#endif /*USE_MCPP_BUFFER_LEXING*/

#if defined __ANDROID__ && defined ECHO
#undef ECHO
#endif

#line 1303 "fe/idl.yy.cpp"
/* SO we don't choke on files that use \r\n */
#line 1305 "fe/idl.yy.cpp"

#define INITIAL 0

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include "ace/os_include/os_ctype.h"
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals ( void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy ( void );

int yyget_debug ( void );

void yyset_debug ( int debug_flag  );

YY_EXTRA_TYPE yyget_extra ( void );

void yyset_extra ( YY_EXTRA_TYPE user_defined  );

FILE *yyget_in ( void );

void yyset_in  ( FILE * _in_str  );

FILE *yyget_out ( void );

void yyset_out  ( FILE * _out_str  );

            int yyget_leng ( void );

char *yyget_text ( void );

int yyget_lineno ( void );

void yyset_lineno ( int _line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap ( void );
#else
extern int yywrap ( void );
#endif
#endif

#ifndef YY_NO_UNPUT

    static void yyunput ( int c, char *buf_ptr  );

#endif

#ifndef yytext_ptr
static void yy_flex_strncpy ( char *, const char *, int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen ( const char * );
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput ( void );
#else
static int input ( void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, (size_t) yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
    if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
        { \
        int c = '*'; \
        int n; \
        for ( n = 0; n < max_size && \
                 (c = ACE_OS::getc( yyin )) != EOF && c != '\n'; ++n ) \
            buf[n] = (char) c; \
        if ( c == '\n' ) \
            buf[n++] = (char) c; \
        if ( c == EOF && ferror( yyin ) ) \
            YY_FATAL_ERROR( "input in flex scanner failed" ); \
        result = n; \
        } \
    else \
        { \
        errno=0; \
        while ( (result = (int) fread(buf, 1, (yy_size_t) max_size, yyin)) == 0 && ferror(yyin)) \
            { \
            if( errno != EINTR) \
                { \
                YY_FATAL_ERROR( "input in flex scanner failed" ); \
                break; \
                } \
            errno=0; \
            clearerr(yyin); \
            } \
        }\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex (void);

#define YY_DECL int yylex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

#define YY_RULE_SETUP \
    if ( yyleng > 0 ) \
        YY_CURRENT_BUFFER_LVALUE->yy_at_bol = \
                (yytext[yyleng - 1] == '\n'); \
    YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
    yy_state_type yy_current_state;
    char *yy_cp, *yy_bp;
    int yy_act;

    if ( !(yy_init) )
        {
        (yy_init) = 1;

#ifdef YY_USER_INIT
        YY_USER_INIT;
#endif

        if ( ! (yy_start) )
            (yy_start) = 1;    /* first start state */

        if ( ! yyin )
            yyin = stdin;

        if ( ! yyout )
            yyout = stdout;

        if ( ! YY_CURRENT_BUFFER ) {
            yyensure_buffer_stack ();
            YY_CURRENT_BUFFER_LVALUE =
                yy_create_buffer( yyin, YY_BUF_SIZE );
        }

        yy_load_buffer_state(  );
        }

    {
#line 123 "fe/idl.ll"


#line 1528 "fe/idl.yy.cpp"

    while ( /*CONSTCOND*/1 )        /* loops until end-of-file is reached */
        {
        yy_cp = (yy_c_buf_p);

        /* Support of yytext. */
        *yy_cp = (yy_hold_char);

        /* yy_bp points to the position in yy_ch_buf of the start of
         * the current run.
         */
        yy_bp = yy_cp;

        yy_current_state = (yy_start);
        yy_current_state += YY_AT_BOL();
yy_match:
        do
            {
            YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
            if ( yy_accept[yy_current_state] )
                {
                (yy_last_accepting_state) = yy_current_state;
                (yy_last_accepting_cpos) = yy_cp;
                }
            while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
                {
                yy_current_state = (int) yy_def[yy_current_state];
                if ( yy_current_state >= 605 )
                    yy_c = yy_meta[yy_c];
                }
            yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
            ++yy_cp;
            }
        while ( yy_current_state != 604 );
        yy_cp = (yy_last_accepting_cpos);
        yy_current_state = (yy_last_accepting_state);

yy_find_action:
        yy_act = yy_accept[yy_current_state];

        YY_DO_BEFORE_ACTION;

do_action:    /* This label is used only to access EOF actions. */

        switch ( yy_act )
    { /* beginning of action switch */
            case 0: /* must back up */
            /* undo the effects of YY_DO_BEFORE_ACTION */
            *yy_cp = (yy_hold_char);
            yy_cp = (yy_last_accepting_cpos);
            yy_current_state = (yy_last_accepting_state);
            goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 125 "fe/idl.ll"
return IDL_ANY;
    YY_BREAK
case 2:
YY_RULE_SETUP
#line 126 "fe/idl.ll"
return IDL_OBJECT;
    YY_BREAK
case 3:
YY_RULE_SETUP
#line 127 "fe/idl.ll"
return IDL_MODULE;
    YY_BREAK
case 4:
YY_RULE_SETUP
#line 128 "fe/idl.ll"
return IDL_RAISES;
    YY_BREAK
case 5:
YY_RULE_SETUP
#line 129 "fe/idl.ll"
return IDL_READONLY;
    YY_BREAK
case 6:
YY_RULE_SETUP
#line 130 "fe/idl.ll"
return IDL_ATTRIBUTE;
    YY_BREAK
case 7:
YY_RULE_SETUP
#line 131 "fe/idl.ll"
return IDL_EXCEPTION;
    YY_BREAK
case 8:
YY_RULE_SETUP
#line 132 "fe/idl.ll"
return IDL_CONTEXT;
    YY_BREAK
case 9:
YY_RULE_SETUP
#line 133 "fe/idl.ll"
return IDL_INTERFACE;
    YY_BREAK
case 10:
YY_RULE_SETUP
#line 134 "fe/idl.ll"
return IDL_CONST;
    YY_BREAK
case 11:
YY_RULE_SETUP
#line 135 "fe/idl.ll"
return IDL_TYPEDEF;
    YY_BREAK
case 12:
YY_RULE_SETUP
#line 136 "fe/idl.ll"
return IDL_STRUCT;
    YY_BREAK
case 13:
YY_RULE_SETUP
#line 137 "fe/idl.ll"
return IDL_ENUM;
    YY_BREAK
case 14:
YY_RULE_SETUP
#line 138 "fe/idl.ll"
return IDL_STRING;
    YY_BREAK
case 15:
YY_RULE_SETUP
#line 139 "fe/idl.ll"
return IDL_WSTRING;
    YY_BREAK
case 16:
YY_RULE_SETUP
#line 140 "fe/idl.ll"
return IDL_SEQUENCE;
    YY_BREAK
case 17:
YY_RULE_SETUP
#line 141 "fe/idl.ll"
return IDL_UNION;
    YY_BREAK
case 18:
YY_RULE_SETUP
#line 142 "fe/idl.ll"
return IDL_FIXED;
    YY_BREAK
case 19:
YY_RULE_SETUP
#line 143 "fe/idl.ll"
return IDL_SWITCH;
    YY_BREAK
case 20:
YY_RULE_SETUP
#line 144 "fe/idl.ll"
return IDL_CASE;
    YY_BREAK
case 21:
YY_RULE_SETUP
#line 145 "fe/idl.ll"
return IDL_DEFAULT;
    YY_BREAK
case 22:
YY_RULE_SETUP
#line 146 "fe/idl.ll"
return IDL_FLOAT;
    YY_BREAK
case 23:
YY_RULE_SETUP
#line 147 "fe/idl.ll"
return IDL_DOUBLE;
    YY_BREAK
case 24:
YY_RULE_SETUP
#line 148 "fe/idl.ll"
return IDL_LONG;
    YY_BREAK
case 25:
YY_RULE_SETUP
#line 149 "fe/idl.ll"
return IDL_SHORT;
    YY_BREAK
case 26:
YY_RULE_SETUP
#line 150 "fe/idl.ll"
return IDL_UNSIGNED;
    YY_BREAK
case 27:
YY_RULE_SETUP
#line 151 "fe/idl.ll"
return IDL_CHAR;
    YY_BREAK
case 28:
YY_RULE_SETUP
#line 152 "fe/idl.ll"
return IDL_WCHAR;
    YY_BREAK
case 29:
YY_RULE_SETUP
#line 153 "fe/idl.ll"
return IDL_BOOLEAN;
    YY_BREAK
case 30:
YY_RULE_SETUP
#line 154 "fe/idl.ll"
return IDL_OCTET;
    YY_BREAK
case 31:
YY_RULE_SETUP
#line 155 "fe/idl.ll"
return IDL_VOID;
    YY_BREAK
case 32:
YY_RULE_SETUP
#line 156 "fe/idl.ll"
return IDL_NATIVE;
    YY_BREAK
case 33:
YY_RULE_SETUP
#line 157 "fe/idl.ll"
return IDL_LOCAL;
    YY_BREAK
case 34:
YY_RULE_SETUP
#line 158 "fe/idl.ll"
return IDL_ABSTRACT;
    YY_BREAK
case 35:
YY_RULE_SETUP
#line 160 "fe/idl.ll"
return IDL_CUSTOM;
    YY_BREAK
case 36:
YY_RULE_SETUP
#line 161 "fe/idl.ll"
return IDL_FACTORY;
    YY_BREAK
case 37:
YY_RULE_SETUP
#line 162 "fe/idl.ll"
return IDL_PRIVATE;
    YY_BREAK
case 38:
YY_RULE_SETUP
#line 163 "fe/idl.ll"
return IDL_PUBLIC;
    YY_BREAK
case 39:
YY_RULE_SETUP
#line 164 "fe/idl.ll"
return IDL_SUPPORTS;
    YY_BREAK
case 40:
YY_RULE_SETUP
#line 165 "fe/idl.ll"
return IDL_TRUNCATABLE;
    YY_BREAK
case 41:
YY_RULE_SETUP
#line 166 "fe/idl.ll"
return IDL_VALUETYPE;
    YY_BREAK
case 42:
YY_RULE_SETUP
#line 168 "fe/idl.ll"
return IDL_COMPONENT;
    YY_BREAK
case 43:
YY_RULE_SETUP
#line 169 "fe/idl.ll"
return IDL_CONSUMES;
    YY_BREAK
case 44:
YY_RULE_SETUP
#line 170 "fe/idl.ll"
return IDL_EMITS;
    YY_BREAK
case 45:
YY_RULE_SETUP
#line 171 "fe/idl.ll"
return IDL_EVENTTYPE;
    YY_BREAK
case 46:
YY_RULE_SETUP
#line 172 "fe/idl.ll"
return IDL_FINDER;
    YY_BREAK
case 47:
YY_RULE_SETUP
#line 173 "fe/idl.ll"
return IDL_GETRAISES;
    YY_BREAK
case 48:
YY_RULE_SETUP
#line 174 "fe/idl.ll"
return IDL_HOME;
    YY_BREAK
case 49:
YY_RULE_SETUP
#line 175 "fe/idl.ll"
return IDL_IMPORT;
    YY_BREAK
case 50:
YY_RULE_SETUP
#line 176 "fe/idl.ll"
return IDL_MULTIPLE;
    YY_BREAK
case 51:
YY_RULE_SETUP
#line 177 "fe/idl.ll"
return IDL_PRIMARYKEY;
    YY_BREAK
case 52:
YY_RULE_SETUP
#line 178 "fe/idl.ll"
return IDL_PROVIDES;
    YY_BREAK
case 53:
YY_RULE_SETUP
#line 179 "fe/idl.ll"
return IDL_PUBLISHES;
    YY_BREAK
case 54:
YY_RULE_SETUP
#line 180 "fe/idl.ll"
return IDL_SETRAISES;
    YY_BREAK
case 55:
YY_RULE_SETUP
#line 181 "fe/idl.ll"
return IDL_TYPEID;
    YY_BREAK
case 56:
YY_RULE_SETUP
#line 182 "fe/idl.ll"
return IDL_TYPEPREFIX;
    YY_BREAK
case 57:
YY_RULE_SETUP
#line 183 "fe/idl.ll"
return IDL_USES;
    YY_BREAK
case 58:
YY_RULE_SETUP
#line 184 "fe/idl.ll"
return IDL_MANAGES;
    YY_BREAK
case 59:
YY_RULE_SETUP
#line 186 "fe/idl.ll"
return IDL_TYPENAME;
    YY_BREAK
case 60:
YY_RULE_SETUP
#line 187 "fe/idl.ll"
return IDL_PORT;
    YY_BREAK
case 61:
YY_RULE_SETUP
#line 188 "fe/idl.ll"
return IDL_MIRRORPORT;
    YY_BREAK
case 62:
YY_RULE_SETUP
#line 189 "fe/idl.ll"
return IDL_PORTTYPE;
    YY_BREAK
case 63:
YY_RULE_SETUP
#line 190 "fe/idl.ll"
return IDL_CONNECTOR;
    YY_BREAK
case 64:
YY_RULE_SETUP
#line 191 "fe/idl.ll"
return IDL_ALIAS;
    YY_BREAK
case 65:
YY_RULE_SETUP
#line 193 "fe/idl.ll"
return IDL_TRUETOK;
    YY_BREAK
case 66:
YY_RULE_SETUP
#line 194 "fe/idl.ll"
return IDL_FALSETOK;
    YY_BREAK
case 67:
YY_RULE_SETUP
#line 196 "fe/idl.ll"
return IDL_INOUT;
    YY_BREAK
case 68:
YY_RULE_SETUP
#line 197 "fe/idl.ll"
return IDL_IN;
    YY_BREAK
case 69:
YY_RULE_SETUP
#line 198 "fe/idl.ll"
return IDL_OUT;
    YY_BREAK
case 70:
YY_RULE_SETUP
#line 199 "fe/idl.ll"
return IDL_ONEWAY;
    YY_BREAK
case 71:
YY_RULE_SETUP
#line 201 "fe/idl.ll"
return IDL_LEFT_SHIFT;
    YY_BREAK
case 72:
YY_RULE_SETUP
#line 202 "fe/idl.ll"
return IDL_RIGHT_SHIFT;
    YY_BREAK
case 73:
YY_RULE_SETUP
#line 203 "fe/idl.ll"
{
                  tao_yylval.strval = ACE::strnew ("::");
                  return IDL_SCOPE_DELIMITOR;
                }
    YY_BREAK
case 74:
/* rule 74 can match eol */
YY_RULE_SETUP
#line 208 "fe/idl.ll"
return IDL_ANNOTATION_DECL; // Allow annotation names that start with "annotation"
    YY_BREAK
case 75:
YY_RULE_SETUP
#line 209 "fe/idl.ll"
return IDL_ANNOTATION_SYMBOL;
    YY_BREAK
case 76:
YY_RULE_SETUP
#line 211 "fe/idl.ll"
{
  // Make sure that this identifier is not a C++ keyword. If it is,
  // prepend it with a _cxx_. Lookup in the perfect hash table for C++
  // keyword and grab the mapping.  BTW, the reason for the odd
  // regular expression is to handle EBCDIC, as well as ASCII.

  TAO_IDL_CPP_Keyword_Table cpp_key_tbl;
  const TAO_IDL_CPP_Keyword_Entry *entry = 0;
  if (!idl_global->preserve_cpp_keywords())
    {
      // This check will ensure that escaped C++ keywords will be
      // caught and prepended with '_cxx' as non-escaped keywords
      // are now prepended with '_cxx_'.
      const char *tmp =
        ace_yytext[0] == '_' ? ace_yytext + 1 : ace_yytext;

      entry =
        cpp_key_tbl.lookup (tmp,
                            static_cast<unsigned int> (ACE_OS::strlen (tmp)));
    }

  if (entry)
    {
      tao_yylval.strval = ACE::strnew (entry->mapping_);
    }
  else
    {
      tao_yylval.strval = ACE::strnew (ace_yytext);
    }

  return IDENTIFIER;
}
    YY_BREAK
case 77:
YY_RULE_SETUP
#line 244 "fe/idl.ll"
{
                  tao_yylval.dval = idl_atof (ace_yytext);
                  return IDL_FLOATING_PT_LITERAL;
                }
    YY_BREAK
case 78:
YY_RULE_SETUP
#line 248 "fe/idl.ll"
{
                  tao_yylval.dval = idl_atof (ace_yytext);
                  return IDL_FLOATING_PT_LITERAL;
                }
    YY_BREAK
case 79:
YY_RULE_SETUP
#line 253 "fe/idl.ll"
{
                  tao_yylval.fixval = ACE_CDR::Fixed::from_string (ace_yytext);
                  return IDL_FIXED_PT_LITERAL;
                }
    YY_BREAK
case 80:
YY_RULE_SETUP
#line 258 "fe/idl.ll"
{
                  tao_yylval.ival = idl_atoi (ace_yytext, 10);
                  return IDL_INTEGER_LITERAL;
                }
    YY_BREAK
case 81:
YY_RULE_SETUP
#line 262 "fe/idl.ll"
{
                  tao_yylval.uival = idl_atoui (ace_yytext, 10);
                  return IDL_UINTEGER_LITERAL;
                }
    YY_BREAK
case 82:
YY_RULE_SETUP
#line 266 "fe/idl.ll"
{
                  tao_yylval.ival = idl_atoi (ace_yytext, 16);
                  return IDL_INTEGER_LITERAL;
                }
    YY_BREAK
case 83:
YY_RULE_SETUP
#line 270 "fe/idl.ll"
{
                  tao_yylval.uival = idl_atoui (ace_yytext, 16);
                  return IDL_UINTEGER_LITERAL;
                }
    YY_BREAK
case 84:
YY_RULE_SETUP
#line 274 "fe/idl.ll"
{
                  tao_yylval.ival = idl_atoi (ace_yytext, 8);
                  return IDL_INTEGER_LITERAL;
                }
    YY_BREAK
case 85:
YY_RULE_SETUP
#line 278 "fe/idl.ll"
{
                  tao_yylval.uival = idl_atoui (ace_yytext, 8);
                  return IDL_UINTEGER_LITERAL;
                }
    YY_BREAK
case 86:
/* rule 86 can match eol */
YY_RULE_SETUP
#line 283 "fe/idl.ll"
{
                  /* Skip the quotes */
                  char * const tmp = ace_yytext;
                  for (size_t i = ACE_OS::strlen (tmp); i-- != 0; )
                    {
                      if (isspace(tmp[i]))
                        {
                          tmp[i] = '\0';
                        }
                      else
                        {
                          break;
                        }
                    }
                  tmp[ACE_OS::strlen (tmp) - 1] = '\0';
                  ACE_NEW_RETURN (tao_yylval.sval,
                                  UTL_String (tmp + 1, true),
                                  IDL_STRING_LITERAL);
                  return IDL_STRING_LITERAL;
                }
    YY_BREAK
case 87:
/* rule 87 can match eol */
YY_RULE_SETUP
#line 303 "fe/idl.ll"
{
                  /* Skip the bookends */
                  char * const tmp = ACE_OS::strdup (ace_yytext);
                  for (size_t i = ACE_OS::strlen (tmp); i-- != 0; )
                    {
                      if (isspace(tmp[i]))
                        {
                          tmp[i] = '\0';
                        }
                      else
                        {
                          break;
                        }
                    }
                  tmp[ACE_OS::strlen (tmp) - 1] = '\0';
                  tao_yylval.wsval = idl_wstring_escape_reader (tmp + 2);
                  return IDL_WSTRING_LITERAL;
                }
    YY_BREAK
case 88:
YY_RULE_SETUP
#line 321 "fe/idl.ll"
{
                  tao_yylval.cval = ace_yytext[1];
                  return IDL_CHARACTER_LITERAL;
                }
    YY_BREAK
case 89:
YY_RULE_SETUP
#line 325 "fe/idl.ll"
{
                  // octal character constant
                  tao_yylval.cval = idl_escape_reader (ace_yytext + 1);
                  return IDL_CHARACTER_LITERAL;
                }
    YY_BREAK
case 90:
YY_RULE_SETUP
#line 330 "fe/idl.ll"
{
                  // hexadecimal character constant
                  tao_yylval.cval = idl_escape_reader (ace_yytext + 1);
                  return IDL_CHARACTER_LITERAL;
                }
    YY_BREAK
case 91:
YY_RULE_SETUP
#line 335 "fe/idl.ll"
{
                  tao_yylval.cval = idl_escape_reader (ace_yytext + 1);
                  return IDL_CHARACTER_LITERAL;
                }
    YY_BREAK
case 92:
YY_RULE_SETUP
#line 339 "fe/idl.ll"
{
                  // wide character constant
                  tao_yylval.wcval = ace_yytext[2];
                  return IDL_WCHAR_LITERAL;
                }
    YY_BREAK
case 93:
YY_RULE_SETUP
#line 344 "fe/idl.ll"
{
                  // hexadecimal wide character constant
                  tao_yylval.wcval = idl_wchar_escape_reader (ace_yytext + 2);
                  return IDL_WCHAR_LITERAL;
                }
    YY_BREAK
case 94:
/* rule 94 can match eol */
#line 350 "fe/idl.ll"
case 95:
/* rule 95 can match eol */
YY_RULE_SETUP
#line 350 "fe/idl.ll"
{/* remember pragma */
                  idl_global->set_lineno (idl_global->lineno () + 1);
                  idl_store_pragma (ace_yytext);
                  break;
                }
    YY_BREAK
case 96:
/* rule 96 can match eol */
#line 356 "fe/idl.ll"
case 97:
/* rule 97 can match eol */
YY_RULE_SETUP
#line 356 "fe/idl.ll"
{/* ignore file */
                  idl_global->set_lineno(idl_global->lineno () + 1);
                  break;
                }
    YY_BREAK
case 98:
/* rule 98 can match eol */
#line 361 "fe/idl.ll"
case 99:
/* rule 99 can match eol */
YY_RULE_SETUP
#line 361 "fe/idl.ll"
{
                  idl_parse_line_and_file (ace_yytext);
                  break;
                }
    YY_BREAK
case 100:
/* rule 100 can match eol */
#line 366 "fe/idl.ll"
case 101:
/* rule 101 can match eol */
YY_RULE_SETUP
#line 366 "fe/idl.ll"
{
                  idl_parse_line_and_file (ace_yytext);
                  break;
                }
    YY_BREAK
case 102:
/* rule 102 can match eol */
#line 371 "fe/idl.ll"
case 103:
/* rule 103 can match eol */
YY_RULE_SETUP
#line 371 "fe/idl.ll"
{
                  idl_parse_line_and_file (ace_yytext);
                  break;
                }
    YY_BREAK
case 104:
/* rule 104 can match eol */
#line 376 "fe/idl.ll"
case 105:
/* rule 105 can match eol */
YY_RULE_SETUP
#line 376 "fe/idl.ll"
{
                  idl_parse_line_and_file (ace_yytext);
                  break;
                }
    YY_BREAK
case 106:
/* rule 106 can match eol */
#line 381 "fe/idl.ll"
case 107:
/* rule 107 can match eol */
YY_RULE_SETUP
#line 381 "fe/idl.ll"
{
                  /* ignore cpp ident */
                  idl_global->set_lineno (idl_global->lineno () + 1);
                  break;
                }
    YY_BREAK
case 108:
/* rule 108 can match eol */
YY_RULE_SETUP
#line 386 "fe/idl.ll"
{
                  /* ignore comments */
                  idl_global->set_lineno(idl_global->lineno () + 1);
                  break;
                }
    YY_BREAK
case 109:
YY_RULE_SETUP
#line 391 "fe/idl.ll"
{
                  for (;;)
                    {
                      char const c = yyinput ();
                      if (c == '*')
                        {
                          char const next = yyinput ();
                          if (next == '/')
                            break;
                          else
                            yyunput (c, 0);
                        }
                      else if (c == '\n')
                        {
                          idl_global->set_lineno (idl_global->lineno () + 1);
                        }
                    }
                  break;
                }
    YY_BREAK
case 110:
YY_RULE_SETUP
#line 410 "fe/idl.ll"
break;
    YY_BREAK
case 111:
/* rule 111 can match eol */
YY_RULE_SETUP
#line 411 "fe/idl.ll"
{
                  idl_global->set_lineno (idl_global->lineno () + 1);
                  break;
                }
    YY_BREAK
case 112:
YY_RULE_SETUP
#line 415 "fe/idl.ll"
return ace_yytext[0];
    YY_BREAK
case 113:
YY_RULE_SETUP
#line 417 "fe/idl.ll"
ECHO;
    YY_BREAK
#line 2312 "fe/idl.yy.cpp"
case YY_STATE_EOF(INITIAL):
    yyterminate();

    case YY_END_OF_BUFFER:
        {
        /* Amount of text matched not including the EOB char. */
        int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

        /* Undo the effects of YY_DO_BEFORE_ACTION. */
        *yy_cp = (yy_hold_char);
        YY_RESTORE_YY_MORE_OFFSET

        if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
            {
            /* We're scanning a new file or input source.  It's
             * possible that this happened because the user
             * just pointed yyin at a new source and called
             * yylex().  If so, then we have to assure
             * consistency between YY_CURRENT_BUFFER and our
             * globals.  Here is the right place to do so, because
             * this is the first action (other than possibly a
             * back-up) that will match for the new input source.
             */
            (yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
            YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
            YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
            }

        /* Note that here we test for yy_c_buf_p "<=" to the position
         * of the first EOB in the buffer, since yy_c_buf_p will
         * already have been incremented past the NUL character
         * (since all states make transitions on EOB to the
         * end-of-buffer state).  Contrast this with the test
         * in input().
         */
        if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
            { /* This was really a NUL. */
            yy_state_type yy_next_state;

            (yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

            yy_current_state = yy_get_previous_state(  );

            /* Okay, we're now positioned to make the NUL
             * transition.  We couldn't have
             * yy_get_previous_state() go ahead and do it
             * for us because it doesn't know how to deal
             * with the possibility of jamming (and we don't
             * want to build jamming into it because then it
             * will run more slowly).
             */

            yy_next_state = yy_try_NUL_trans( yy_current_state );

            yy_bp = (yytext_ptr) + YY_MORE_ADJ;

            if ( yy_next_state )
                {
                /* Consume the NUL. */
                yy_cp = ++(yy_c_buf_p);
                yy_current_state = yy_next_state;
                goto yy_match;
                }

            else
                {
                yy_cp = (yy_last_accepting_cpos);
                yy_current_state = (yy_last_accepting_state);
                goto yy_find_action;
                }
            }

        else switch ( yy_get_next_buffer(  ) )
            {
            case EOB_ACT_END_OF_FILE:
                {
                (yy_did_buffer_switch_on_eof) = 0;

                if ( yywrap(  ) )
                    {
                    /* Note: because we've taken care in
                     * yy_get_next_buffer() to have set up
                     * yytext, we can now set up
                     * yy_c_buf_p so that if some total
                     * hoser (like flex itself) wants to
                     * call the scanner after we return the
                     * YY_NULL, it'll still work - another
                     * YY_NULL will get returned.
                     */
                    (yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

                    yy_act = YY_STATE_EOF(YY_START);
                    goto do_action;
                    }

                else
                    {
                    if ( ! (yy_did_buffer_switch_on_eof) )
                        YY_NEW_FILE;
                    }
                break;
                }

            case EOB_ACT_CONTINUE_SCAN:
                (yy_c_buf_p) =
                    (yytext_ptr) + yy_amount_of_matched_text;

                yy_current_state = yy_get_previous_state(  );

                yy_cp = (yy_c_buf_p);
                yy_bp = (yytext_ptr) + YY_MORE_ADJ;
                goto yy_match;

            case EOB_ACT_LAST_MATCH:
                (yy_c_buf_p) =
                &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

                yy_current_state = yy_get_previous_state(  );

                yy_cp = (yy_c_buf_p);
                yy_bp = (yytext_ptr) + YY_MORE_ADJ;
                goto yy_find_action;
            }
        break;
        }

    default:
        YY_FATAL_ERROR(
            "fatal flex scanner internal error--no action found" );
    } /* end of action switch */
        } /* end of scanning one token */
    } /* end of user's declarations */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *    EOB_ACT_LAST_MATCH -
 *    EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *    EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
        char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
    char *source = (yytext_ptr);
    int number_to_move, i;
    int ret_val;

    if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
        YY_FATAL_ERROR(
        "fatal flex scanner internal error--end of buffer missed" );

    if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
        { /* Don't try to fill the buffer, so this is an EOF. */
        if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
            {
            /* We matched a single character, the EOB, so
             * treat this as a final EOF.
             */
            return EOB_ACT_END_OF_FILE;
            }

        else
            {
            /* We matched some text prior to the EOB, first
             * process it.
             */
            return EOB_ACT_LAST_MATCH;
            }
        }

    /* Try to read more data. */

    /* First move last chars to start of buffer. */
    number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr) - 1);

    for ( i = 0; i < number_to_move; ++i )
        *(dest++) = *(source++);

    if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
        /* don't do the read, it's not guaranteed to return an EOF,
         * just force an EOF
         */
        YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

    else
        {
            int num_to_read =
            YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

        while ( num_to_read <= 0 )
            { /* Not enough room in the buffer - grow it. */

            /* just a shorter name for the current buffer */
            YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

            int yy_c_buf_p_offset =
                (int) ((yy_c_buf_p) - b->yy_ch_buf);

            if ( b->yy_is_our_buffer )
                {
                int new_size = b->yy_buf_size * 2;

                if ( new_size <= 0 )
                    b->yy_buf_size += b->yy_buf_size / 8;
                else
                    b->yy_buf_size *= 2;

                b->yy_ch_buf = (char *)
                    /* Include room in for 2 EOB chars. */
                    yyrealloc( (void *) b->yy_ch_buf,
                             (yy_size_t) (b->yy_buf_size + 2)  );
                }
            else
                /* Can't grow it, we don't own it. */
                b->yy_ch_buf = 0;

            if ( ! b->yy_ch_buf )
                YY_FATAL_ERROR(
                "fatal error - scanner input buffer overflow" );

            (yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

            num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
                        number_to_move - 1;

            }

        if ( num_to_read > YY_READ_BUF_SIZE )
            num_to_read = YY_READ_BUF_SIZE;

        /* Read in more data. */
        YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
            (yy_n_chars), num_to_read );

        YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
        }

    if ( (yy_n_chars) == 0 )
        {
        if ( number_to_move == YY_MORE_ADJ )
            {
            ret_val = EOB_ACT_END_OF_FILE;
            yyrestart( yyin  );
            }

        else
            {
            ret_val = EOB_ACT_LAST_MATCH;
            YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
                YY_BUFFER_EOF_PENDING;
            }
        }

    else
        ret_val = EOB_ACT_CONTINUE_SCAN;

    if (((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
        /* Extend the array by 50%, plus the number we really need. */
        int new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
        YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc(
            (void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf, (yy_size_t) new_size  );
        if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
            YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
        /* "- 2" to take care of EOB's */
        YY_CURRENT_BUFFER_LVALUE->yy_buf_size = (int) (new_size - 2);
    }

    (yy_n_chars) += number_to_move;
    YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
    YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

    (yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

    return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
    yy_state_type yy_current_state;
    char *yy_cp;

    yy_current_state = (yy_start);
    yy_current_state += YY_AT_BOL();

    for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
        {
        YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
        if ( yy_accept[yy_current_state] )
            {
            (yy_last_accepting_state) = yy_current_state;
            (yy_last_accepting_cpos) = yy_cp;
            }
        while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
            {
            yy_current_state = (int) yy_def[yy_current_state];
            if ( yy_current_state >= 605 )
                yy_c = yy_meta[yy_c];
            }
        yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
        }

    return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *    next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
    int yy_is_jam;
        char *yy_cp = (yy_c_buf_p);

    YY_CHAR yy_c = 1;
    if ( yy_accept[yy_current_state] )
        {
        (yy_last_accepting_state) = yy_current_state;
        (yy_last_accepting_cpos) = yy_cp;
        }
    while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
        {
        yy_current_state = (int) yy_def[yy_current_state];
        if ( yy_current_state >= 605 )
            yy_c = yy_meta[yy_c];
        }
    yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
    yy_is_jam = (yy_current_state == 604);

        return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT

    static void yyunput (int c, char * yy_bp )
{
    char *yy_cp;

    yy_cp = (yy_c_buf_p);

    /* undo effects of setting up yytext */
    *yy_cp = (yy_hold_char);

    if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
        { /* need to shift things up to make room */
        /* +2 for EOB chars. */
        int number_to_move = (yy_n_chars) + 2;
        char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
                    YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
        char *source =
                &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

        while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
            *--dest = *--source;

        yy_cp += (int) (dest - source);
        yy_bp += (int) (dest - source);
        YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
            (yy_n_chars) = (int) YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

        if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
            YY_FATAL_ERROR( "flex scanner push-back overflow" );
        }

    *--yy_cp = (char) c;

    (yytext_ptr) = yy_bp;
    (yy_hold_char) = *yy_cp;
    (yy_c_buf_p) = yy_cp;
}

#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
    int c;

    *(yy_c_buf_p) = (yy_hold_char);

    if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
        {
        /* yy_c_buf_p now points to the character we want to return.
         * If this occurs *before* the EOB characters, then it's a
         * valid NUL; if not, then we've hit the end of the buffer.
         */
        if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
            /* This was really a NUL. */
            *(yy_c_buf_p) = '\0';

        else
            { /* need more input */
            int offset = (int) ((yy_c_buf_p) - (yytext_ptr));
            ++(yy_c_buf_p);

            switch ( yy_get_next_buffer(  ) )
                {
                case EOB_ACT_LAST_MATCH:
                    /* This happens because yy_g_n_b()
                     * sees that we've accumulated a
                     * token and flags that we need to
                     * try matching the token before
                     * proceeding.  But for input(),
                     * there's no matching to consider.
                     * So convert the EOB_ACT_LAST_MATCH
                     * to EOB_ACT_END_OF_FILE.
                     */

                    /* Reset buffer status. */
                    yyrestart( yyin );

                    /*FALLTHROUGH*/

                case EOB_ACT_END_OF_FILE:
                    {
                    if ( yywrap(  ) )
                        return 0;

                    if ( ! (yy_did_buffer_switch_on_eof) )
                        YY_NEW_FILE;
#ifdef __cplusplus
                    return yyinput();
#else
                    return input();
#endif
                    }

                case EOB_ACT_CONTINUE_SCAN:
                    (yy_c_buf_p) = (yytext_ptr) + offset;
                    break;
                }
            }
        }

    c = *(unsigned char *) (yy_c_buf_p);    /* cast for 8-bit char's */
    *(yy_c_buf_p) = '\0';    /* preserve yytext */
    (yy_hold_char) = *++(yy_c_buf_p);

    YY_CURRENT_BUFFER_LVALUE->yy_at_bol = (c == '\n');

    return c;
}
#endif    /* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 *
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file )
{

    if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
        YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
    }

    yy_init_buffer( YY_CURRENT_BUFFER, input_file );
    yy_load_buffer_state(  );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 *
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{

    /* TODO. We should be able to replace this entire function body
     * with
     *        yypop_buffer_state();
     *        yypush_buffer_state(new_buffer);
     */
    yyensure_buffer_stack ();
    if ( YY_CURRENT_BUFFER == new_buffer )
        return;

    if ( YY_CURRENT_BUFFER )
        {
        /* Flush out information for old buffer. */
        *(yy_c_buf_p) = (yy_hold_char);
        YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
        YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
        }

    YY_CURRENT_BUFFER_LVALUE = new_buffer;
    yy_load_buffer_state(  );

    /* We don't actually know whether we did this switch during
     * EOF (yywrap()) processing, but the only time this flag
     * is looked at is after yywrap() is called, so it's safe
     * to go ahead and always set it.
     */
    (yy_did_buffer_switch_on_eof) = 1;
}

static void yy_load_buffer_state  (void)
{
        (yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
    (yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
    yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
    (yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 *
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size )
{
    YY_BUFFER_STATE b;

    b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state )  );
    if ( ! b )
        YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

    b->yy_buf_size = size;

    /* yy_ch_buf has to be 2 characters longer than the size given because
     * we need to put in 2 end-of-buffer characters.
     */
    b->yy_ch_buf = (char *) yyalloc( (yy_size_t) (b->yy_buf_size + 2)  );
    if ( ! b->yy_ch_buf )
        YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

    b->yy_is_our_buffer = 1;

    yy_init_buffer( b, file );

    return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 *
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b )
{

    if ( ! b )
        return;

    if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
        YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

    if ( b->yy_is_our_buffer )
        yyfree( (void *) b->yy_ch_buf  );

    yyfree( (void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
    int oerrno = errno;

    yy_flush_buffer( b );

    b->yy_input_file = file;
    b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = 0;

    errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 *
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b )
{
        if ( ! b )
        return;

    b->yy_n_chars = 0;

    /* We always need two end-of-buffer characters.  The first causes
     * a transition to the end-of-buffer state.  The second causes
     * a jam in that state.
     */
    b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
    b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

    b->yy_buf_pos = &b->yy_ch_buf[0];

    b->yy_at_bol = 1;
    b->yy_buffer_status = YY_BUFFER_NEW;

    if ( b == YY_CURRENT_BUFFER )
        yy_load_buffer_state(  );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer )
{
        if (new_buffer == 0)
        return;

    yyensure_buffer_stack();

    /* This block is copied from yy_switch_to_buffer. */
    if ( YY_CURRENT_BUFFER )
        {
        /* Flush out information for old buffer. */
        *(yy_c_buf_p) = (yy_hold_char);
        YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
        YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
        }

    /* Only push if top exists. Otherwise, replace top. */
    if (YY_CURRENT_BUFFER)
        (yy_buffer_stack_top)++;
    YY_CURRENT_BUFFER_LVALUE = new_buffer;

    /* copied from yy_switch_to_buffer. */
    yy_load_buffer_state(  );
    (yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *
 */
void yypop_buffer_state (void)
{
        if (!YY_CURRENT_BUFFER)
        return;

    yy_delete_buffer(YY_CURRENT_BUFFER );
    YY_CURRENT_BUFFER_LVALUE = 0;
    if ((yy_buffer_stack_top) > 0)
        --(yy_buffer_stack_top);

    if (YY_CURRENT_BUFFER) {
        yy_load_buffer_state(  );
        (yy_did_buffer_switch_on_eof) = 1;
    }
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (void)
{
    yy_size_t num_to_alloc;

    if (!(yy_buffer_stack)) {

        /* First allocation is just for 2 elements, since we don't know if this
         * scanner will even need a stack. We use 2 instead of 1 to avoid an
         * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
        (yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
                                (num_to_alloc * sizeof(struct yy_buffer_state*)
                                );
        if ( ! (yy_buffer_stack) )
            YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

        memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));

        (yy_buffer_stack_max) = num_to_alloc;
        (yy_buffer_stack_top) = 0;
        return;
    }

    if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

        /* Increase the buffer to prepare for a possible push. */
        yy_size_t grow_size = 8 /* arbitrary grow size */;

        num_to_alloc = (yy_buffer_stack_max) + grow_size;
        (yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
                                ((yy_buffer_stack),
                                num_to_alloc * sizeof(struct yy_buffer_state*)
                                );
        if ( ! (yy_buffer_stack) )
            YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

        /* zero only the new slots.*/
        memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
        (yy_buffer_stack_max) = num_to_alloc;
    }
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 *
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size )
{
    YY_BUFFER_STATE b;

    if ( size < 2 ||
         base[size-2] != YY_END_OF_BUFFER_CHAR ||
         base[size-1] != YY_END_OF_BUFFER_CHAR )
        /* They forgot to leave room for the EOB's. */
        return 0;

    b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state )  );
    if ( ! b )
        YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

    b->yy_buf_size = (int) (size - 2);    /* "- 2" to take care of EOB's */
    b->yy_buf_pos = b->yy_ch_buf = base;
    b->yy_is_our_buffer = 0;
    b->yy_input_file = 0;
    b->yy_n_chars = b->yy_buf_size;
    b->yy_is_interactive = 0;
    b->yy_at_bol = 1;
    b->yy_fill_buffer = 0;
    b->yy_buffer_status = YY_BUFFER_NEW;

    yy_switch_to_buffer( b  );

    return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 *
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (const char * yystr )
{

    return yy_scan_bytes( yystr, (int) strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 *
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (const char * yybytes, int  _yybytes_len )
{
    YY_BUFFER_STATE b;
    char *buf;
    yy_size_t n;
    int i;

    /* Get memory for full buffer, including space for trailing EOB's. */
    n = (yy_size_t) (_yybytes_len + 2);
    buf = (char *) yyalloc( n  );
    if ( ! buf )
        YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

    for ( i = 0; i < _yybytes_len; ++i )
        buf[i] = yybytes[i];

    buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

    b = yy_scan_buffer( buf, n );
    if ( ! b )
        YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

    /* It's okay to grow etc. this buffer, and we should throw it
     * away when we're done.
     */
    b->yy_is_our_buffer = 1;

    return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yynoreturn yy_fatal_error (const char* msg )
{
            fprintf( stderr, "%s\n", msg );
    exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
    do \
        { \
        /* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
        yytext[yyleng] = (yy_hold_char); \
        (yy_c_buf_p) = yytext + yyless_macro_arg; \
        (yy_hold_char) = *(yy_c_buf_p); \
        *(yy_c_buf_p) = '\0'; \
        yyleng = yyless_macro_arg; \
        } \
    while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 *
 */
int yyget_lineno  (void)
{

    return yylineno;
}

/** Get the input stream.
 *
 */
FILE *yyget_in  (void)
{
        return yyin;
}

/** Get the output stream.
 *
 */
FILE *yyget_out  (void)
{
        return yyout;
}

/** Get the length of the current token.
 *
 */
int yyget_leng  (void)
{
        return yyleng;
}

/** Get the current token.
 *
 */

char *yyget_text  (void)
{
        return yytext;
}

/** Set the current line number.
 * @param _line_number line number
 *
 */
void yyset_lineno (int  _line_number )
{

    yylineno = _line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param _in_str A readable stream.
 *
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  _in_str )
{
        yyin = _in_str ;
}

void yyset_out (FILE *  _out_str )
{
        yyout = _out_str ;
}

int yyget_debug  (void)
{
        return yy_flex_debug;
}

void yyset_debug (int  _bdebug )
{
        yy_flex_debug = _bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = 0;
    (yy_init) = 0;
    (yy_start) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = 0;
    yyout = 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (void)
{

    /* Pop the buffer stack, destroying each element. */
    while(YY_CURRENT_BUFFER){
        yy_delete_buffer( YY_CURRENT_BUFFER  );
        YY_CURRENT_BUFFER_LVALUE = 0;
        yypop_buffer_state();
    }

    /* Destroy the stack itself. */
    yyfree((yy_buffer_stack) );
    (yy_buffer_stack) = 0;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, const char * s2, int n )
{

    int i;
    for ( i = 0; i < n; ++i )
        s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (const char * s )
{
    int n;
    for ( n = 0; s[n]; ++n )
        ;

    return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
            return malloc(size);
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{

    /* The cast to (char *) in the following accommodates both
     * implementations that use char* generic pointers, and those
     * that use void* generic pointers.  It works with the latter
     * because both ANSI C and C++ allow castless assignment from
     * any pointer type to void*, and deal with argument conversions
     * as though doing an assignment.
     */
    return realloc(ptr, size);
}

void yyfree (void * ptr )
{
            free( (char *) ptr );    /* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 417 "fe/idl.ll"

        /* subroutines */

static bool
same_file (char *path1, char *path2)
{
  char fullpath1 [MAXPATHLEN + 1] = {0};
  char fullpath2 [MAXPATHLEN + 1] = {0};

  char *fp1 = ACE_OS::realpath (path1, fullpath1);
  char *fp2 = ACE_OS::realpath (path2, fullpath2);

  return
    (fp1 == 0 || fp2 == 0)
      ? false
      : FE_Utils::path_cmp (fullpath1,fullpath2) == 0;
}

// Parse a #line statement generated by the C preprocessor
static void
idl_parse_line_and_file (char *buf)
{
  char *r = buf;
  char *h = 0;
  UTL_String *nm = 0;

  // Skip initial '#'.
  if (*r != '#')
    {
      return;
    }
  else
    {
      ++r;
    }

  // Check to see if we're running under the screwy Microsoft scheme
  // of putting #line num instead of #num.

  if (ACE_OS::strncmp (r, "line", 4) == 0)
    {
      r += 5;
    }

  // Find line number.
  while (isspace (*r))
    {
      ++r;
    }

  h = r;

  for (; isdigit (*r); ++r)
    {
      continue;
    }

  *r++ = 0;
  idl_global->set_lineno ((long) idl_atoui (h, 10));

  // Find file name, if present.
  for (; *r != '"'; ++r)
    {
      if (*r == '\n' || *r == '\0')
        {
          return;
        }
    }

  h = ++r;

  for (; *r != '"'; ++r)
    {
      continue;
    }

  *r = 0;
  UTL_String *tmp = 0;

  if (*h == '\0')
    {
      ACE_ERROR ((LM_ERROR,
                  ACE_TEXT ("IDL: No input files\n")));

      throw Bailout ();
    }
  else
    {
      long i;
      long j;

      // Put Microsoft-style pathnames into a canonical form.
      for (i = 0, j = 0; h[j] != '\0'; i++, j++)
        {
          if (h[j] == '\\' && h[j + 1] == '\\')
            {
              j++;
            }

            h[i] = h[j];
        }

      h[i] = '\0';
#if defined (ACE_OPENVMS)
      // translate this into *nix format as the OpenVMS preprocessor
      // possibly produced VMS-style paths here.
      char trans_path[MAXPATHLEN] = "";
      char *temp_h = IDL_GlobalData::translateName (h, trans_path);
      if (temp_h)
        h = temp_h;
      else
        {
          ACE_ERROR ((LM_ERROR,
                      ACE_TEXT ("Unable to construct full file pathname\n")));
          throw Bailout ();
        }
#endif
      ACE_NEW (tmp,
               UTL_String (h, true));
      idl_global->update_prefix (tmp->get_string ());
      idl_global->set_filename (tmp);
    }

  UTL_String *fname = idl_global->filename ();
  bool in_main_file = false;

  bool is_real_filename =
    fname->compare (idl_global->real_filename ())
    || same_file (fname->get_string(),
                  idl_global->real_filename ()->get_string ());

  bool is_main_filename = false;

  if (!is_real_filename)
    {
#if defined (ACE_OPENVMS)
      char full_path[MAXPATHLEN] = "";
      char *full_fname = ACE_OS::realpath (fname->get_string (), full_path);
      // I don't see the benefit of using ->compare since this is targeted at IDL identifiers
      // not at filenames and in the case of OpenVMS (case-insensitive filesystem) gets really
      // problematic as filenames retrieved through different mechanisms may give different
      // casing.
      is_main_filename = FE_Utils::path_cmp (idl_global->main_filename ()->get_string (),
                                             full_fname) == 0;
#else
      is_main_filename =
        fname->compare (idl_global->main_filename ())
        || same_file (fname->get_string (),
                      idl_global->main_filename ()->get_string ());
#endif
    }

  if (is_real_filename || is_main_filename)
    {
      in_main_file = true;
    }

  idl_global->set_in_main_file (in_main_file);

  // Strip off any command line -I prefix that may have been added
  // by the preprocessor.
  if (!(idl_global->in_main_file ()) && idl_global->import ())
    {
      ACE_NEW (nm,
               UTL_String (
                 FE_Utils::stripped_preproc_include (
                   fname->get_string ()), true));

      // This call also manages the #pragma prefix.
      idl_global->store_include_file_name (nm);
    }
}

// Store a #pragma line into the list of pragmas
static void
idl_store_pragma (char *buf)
{
  char *sp = buf + 1;
  int crunched = 0;

  // Remove all the blanks between the '#' and the 'pragma'.
  while (*sp != 'p')
    {
      ++sp;
      ++crunched;
    }

  char *tp = buf + 1;

  // This copies the crunched string back to the original, and
  // also compensates for the behavior of the Sun preprocessor,
  // which put spaces around the double colons of a non-quoted
  // scoped name, a case which is possible in #pragma version.
  // Also eats whitespace, which some preprocessors (for example
  // Intel) don't automatically do.
  while (*sp != '\n')
    {
      if (*sp == ' ' && (*(sp + 1) == ':' || *(sp + 1) == ' '))
        {
          ++crunched;
        }
      else if (*sp == ':' && *(sp + 1) == ' ')
        {
          *tp = *sp;
          ++crunched;
          ++sp;
          ++tp;
        }
      else
        {
          *tp = *sp;
          ++tp;
        }

      ++sp;
    }

  // The '\n' is still <crunched> spaces too far away, with
  // garbage characters in between.
  sp -= crunched;
  *sp = '\0';

  if (ACE_OS::strstr (buf + 8, "import") != 0)
    {
      idl_global->set_import (true);
      return;
    }

  if (ACE_OS::strstr (buf + 8, "include") != 0)
    {
      idl_global->set_import (false);
      return;
    }

  if (ACE_OS::strncmp (buf + 8, "prefix", 6) == 0)
    {
      char *new_prefix = idl_get_pragma_string (buf);

      if (new_prefix != 0)
        {
          unsigned long depth = idl_global->scopes ().depth ();

          // We replace the prefix only if there is a prefix already
          // associated with this file, otherwise we add the prefix.
          char *ext_id = idl_global->filename ()->get_string ();
          ACE_Hash_Map_Entry<char *, char *> *entry = 0;
          int const status =
            idl_global->file_prefixes ().find (ext_id, entry);

          if (status == 0)
            {
              if (ACE_OS::strcmp (entry->int_id_, "") != 0)
                {
                  char *trash = 0;
                  idl_global->pragma_prefixes ().pop (trash);
                  delete [] trash;
                }
              else if (depth == 1)
                {
                  // Remove the default "" and bind the new prefix.
                  ACE::strdelete (entry->ext_id_);
                  ACE::strdelete (entry->int_id_);
                  (void) idl_global->file_prefixes ().unbind (entry);
                  (void) idl_global->file_prefixes ().bind (ACE::strnew (ext_id),
                                                            ACE::strnew (new_prefix));
                }
            }

          UTL_Scope *top_scope = idl_global->scopes ().top ();

          if (depth > 1)
            {
              top_scope->has_prefix (true);
              ScopeAsDecl (top_scope)->prefix_scope (top_scope);
            }

          idl_global->pragma_prefixes ().push (new_prefix);

          if (depth == 1)
            {
              idl_global->root ()->prefix (new_prefix);
            }

          if (idl_global->in_main_file ())
            {
              idl_global->root ()->set_imported (false);
              top_scope->has_prefix (true);
            }

          if (status != 0)
            {
              (void) idl_global->file_prefixes ().bind (ACE::strnew (ext_id),
                                                        ACE::strnew (new_prefix));
            }
        }
    }
  else if (ACE_OS::strncmp (buf + 8, "version", 7) == 0)
    {
      char *tmp = buf + 16;

      while (*tmp == ' ' || *tmp == '\t')
        {
          ++tmp;
        }

      char *number = ACE_OS::strchr (tmp, ' ');

      if (number == 0)
        {
          number = ACE_OS::strchr (tmp, '\t');
        }

      // Used later to trim the type string.
      ptrdiff_t cutoff = number - tmp;

      // Most likely this means there is only a version number
      // without an identifier to apply it to.
      if (number == 0)
        {
          const char *msg = "no identifier or scoped name";
          idl_global->err ()->version_syntax_error (msg);
          return;
        }

      while (*number == ' ' || *number == '\t')
        {
          ++number;
        }

      size_t len = ACE_OS::strlen (number);

      // For some reason, the SunCC preprocessor adds a trailing space, which
      // messes with idl_valid_version() below, so we check and remove.
      while (number[len - 1] == ' ')
        {
          number[len - 1] = '\0';
          len = ACE_OS::strlen (number);
        }

      // Trim the type string after trimming the number string.
      tmp[cutoff] = '\0';

      // This call adds a proper null terminator to tmp, so no need to
      // do it here.
      AST_Decl *d = idl_find_node (tmp);

      if (d == 0)
        {
          return;
        }

      if (!idl_valid_version (number))
        {
          idl_global->err ()->version_number_error (number);
          return;
        }

      d->version (ACE::strnew (number));
    }
  else if (ACE_OS::strncmp (buf + 8, "ident", 5) == 0)
    {
      idl_global->ident_string (buf + 8);
    }
  else if (ACE_OS::strncmp (buf + 8, "ID", 2) == 0)
    {
      char *tmp = buf + 11;

      while (*tmp == ' ')
        {
          ++tmp;
        }

      ACE_CString work (tmp);
      work = work.substr (0, work.find (' '));

      AST_Decl *d = idl_find_node (work.c_str ());

      if (d == 0)
        {
          return;
        }

      char *new_id = idl_get_pragma_string (buf);

      if (new_id != 0)
        {
          if (d->typeid_set ())
            {
              idl_global->err ()->id_reset_error (d->repoID (),
                                                  new_id);
              return;
            }

          d->repoID (new_id);
          d->typeid_set (true);
        }
    }
  else if (ACE_OS::strncmp (buf + 8, "DCPS_DATA_TYPE", 14) == 0)
    {
      char *sample_type = idl_get_pragma_string (buf);
      idl_global->add_dcps_data_type (sample_type);

      // Delete sample_type since add_dcps_data_type() doesn't take its ownership.
      delete [] sample_type;
    }
  else if (ACE_OS::strncmp (buf + 8, "DCPS_DATA_KEY", 13) == 0)
    {
      char *tmp = idl_get_pragma_string (buf);

      // Split up data type and key strings
      char *sample_type = tmp;

      while (*tmp && !isspace (*tmp))
        {
          ++tmp;
        }

      while (isspace (*tmp))
        {
          *tmp = '\0';
          tmp++;
        }

      char *key = tmp;

      if (!idl_global->add_dcps_data_key (sample_type, key))
        {
          ACE_ERROR((LM_ERROR, "DCPS_DATA_TYPE \"%C\" not found for key \"%C\"\n",
            sample_type, key));
        }

      // Delete sample_type since add_dcps_data_key() doesn't take its ownership.
      delete [] sample_type;
    }
  else if (ACE_OS::strncmp (buf + 8, "DCPS_DATA_SEQUENCE_TYPE", 23) == 0)
    {
      char *seq_type = idl_get_pragma_string (buf);
      idl_global->set_dcps_sequence_type (seq_type);

      delete [] seq_type;
    }
  else if (ACE_OS::strncmp (buf + 8, "DCPS_SUPPORT_ZERO_COPY_READ", 27) == 0)
    {
      idl_global->dcps_support_zero_copy_read (true);
    }
  else if (ACE_OS::strncmp (buf + 8, "DCPS_GEN_ZERO_COPY_READ", 23) == 0)
    {
      idl_global->dcps_gen_zero_copy_read (true);
    }
  else if (ACE_OS::strncmp (buf + 8, "ciao lem", 8) == 0)
    {
      char *tmp = idl_get_pragma_string (buf);
      idl_global->add_ciao_lem_file_names (tmp);

      // Delete tmp since add_ciao_lem_file_names() doesn't take its ownership.
      delete [] tmp;
    }
  else if (ACE_OS::strncmp (buf + 8, "ndds typesupport", 16) == 0)
    {
      char *tmp = idl_get_pragma_string (buf);
      idl_global->add_ciao_rti_ts_file_names (tmp);

      // Delete tmp since add_ciao_rti_ts_file_names() doesn't take its ownership.
      delete [] tmp;
    }
  else if (ACE_OS::strncmp (buf + 8, "coredx typesupport", 18) == 0)
    {
      char *tmp = idl_get_pragma_string (buf);
      idl_global->add_ciao_coredx_ts_file_names (tmp);

      // Delete tmp since add_ciao_coredx_ts_file_names() doesn't take its ownership.
      delete [] tmp;
    }
  else if (ACE_OS::strncmp (buf + 8, "opendds typesupport", 19) == 0)
    {
      char *tmp = idl_get_pragma_string (buf);
      idl_global->add_ciao_oci_ts_file_names (tmp);

      // Delete tmp since add_ciao_oci_ts_file_names() doesn't take its ownership.
      delete [] tmp;
    }
  else if (ACE_OS::strncmp (buf + 8, "splice typesupport", 18) == 0)
    {
      char *tmp = idl_get_pragma_string (buf);
      idl_global->add_ciao_spl_ts_file_names (tmp);

      // Delete tmp since add_ciao_spl_ts_file_names() doesn't take its ownership.
      delete [] tmp;
    }
  else if ((ACE_OS::strncmp (buf + 8, "ciao ami4ccm interface", 22) == 0) ||
           (ACE_OS::strncmp (buf + 8, "ami4ccm interface", 17) == 0))
    {
      if (idl_global->in_main_file ())
        {
          char *tmp = idl_get_pragma_string (buf);
          idl_global->add_ciao_ami_iface_names (tmp);

          // Delete tmp since add_ciao_ami_iface_names() doesn't take its ownership.
          delete [] tmp;
        }
    }
  else if ((ACE_OS::strncmp (buf + 8, "ciao ami4ccm receptacle", 23) == 0) ||
           (ACE_OS::strncmp (buf + 8, "ami4ccm receptacle", 18) == 0))
    {
      char *tmp = idl_get_pragma_string (buf);

      if (idl_global->in_main_file ())
        {
          idl_global->add_ciao_ami_recep_names (tmp);
        }
      else
        {
          /// This is intended for the executor IDL file,
          /// when a pragma is seen in the main file, but
          /// it will do no harm in other cases.
          idl_global->add_included_ami_recep_names (tmp);
        }

      // Delete tmp since add_ciao_spl_ts_file_names() doesn't take its ownership.
      delete [] tmp;
    }
  else if ((ACE_OS::strncmp (buf + 8, "ciao ami4ccm idl", 16) == 0) ||
           (ACE_OS::strncmp (buf + 8, "ami4ccm idl", 11) == 0))
    {
      char *tmp = idl_get_pragma_string (buf);

      /// These pragmas are found in the file where the interface
      /// that has a AMI4CCM_* counterpart in the *A.idl file
      /// is declared. We add the filename to the list in all
      /// IDL files *except* the one where it is found, to
      /// eliminate a circular include of xxxC.h and xxxAC.h.
      if (!idl_global->in_main_file ())
        {
          idl_global->add_ciao_ami_idl_fnames (tmp);
        }

      // Delete tmp since add_ciao_ami_idl_fnames() doesn't take its ownership.
      delete [] tmp;
    }
  else if (ACE_OS::strncmp (buf + 8, "dds4ccm impl", 12) == 0)
    {
      char *tmp = idl_get_pragma_string (buf);

      idl_global->add_dds4ccm_impl_fnames (tmp);

      // Delete tmp since add_dds4ccm_impl_fnames() doesn't take its ownership.
      delete [] tmp;
    }
}

/*
 * idl_atoi - Convert a string of digits into a negative integer according to base b
 */
static ACE_CDR::LongLong
idl_atoi (char *s, long b)
{
  ACE_CDR::LongLong r = ACE_CDR_LONGLONG_INITIALIZER;

  // Skip over the dash and possibly spaces after the dash
  while (*s == '-' || *s == ' ' || *s == '\t')
    {
      ++s;
    }

  if (b == 8 && *s == '0')
    {
      ++s;
    }
  else if (b == 16 && *s == '0' && (*(s + 1) == 'x' || *(s + 1) == 'X'))
    {
      s += 2;
    }

  for (; *s; ++s)
    {
      if (*s <= '9' && *s >= '0')
        {
          r = (r * b) + (*s - '0');
        }
      else if (b > 10 && *s <= 'f' && *s >= 'a')
        {
          r = (r * b) + (*s - 'a' + 10);
        }
      else if (b > 10 && *s <= 'F' && *s >= 'A')
        {
          r = (r * b) + (*s - 'A' + 10);
        }
      else
        {
          break;
        }
    }

  return -r;
}

/*
 * idl_atoui - Convert a string of digits into an unsigned integer according to base b
 */
static ACE_CDR::ULongLong
idl_atoui (char *s, long b)
{
  ACE_CDR::ULongLong r = 0;

  if (b == 8 && *s == '0')
    {
      ++s;
    }
  else if (b == 16 && *s == '0' && (*(s + 1) == 'x' || *(s + 1) == 'X'))
    {
      s += 2;
    }

  for (; *s; ++s)
    {
      if (*s <= '9' && *s >= '0')
        {
          r = (r * b) + (*s - '0');
        }
      else if (b > 10 && *s <= 'f' && *s >= 'a')
        {
          r = (r * b) + (*s - 'a' + 10);
        }
      else if (b > 10 && *s <= 'F' && *s >= 'A')
        {
          r = (r * b) + (*s - 'A' + 10);
        }
      else
        {
          break;
        }
    }

  return r;
}

/*
 * Convert a string to a float; atof doesn't seem to work, always.
 */
static ACE_CDR::Double
idl_atof (char *s)
{
  double d = 0.0;
  double e, k;
  long neg = 0, negexp = 0;

  if (*s == '-')
    {
      neg = 1;

      // Skip over the dash and possibly spaces after the dash
      while (*s == '-' || *s == ' ' || *s == '\t')
        {
          ++s;
        }
    }

  while (*s >= '0' && *s <= '9')
    {
      d = (d * 10) + *s - '0';
      ++s;
    }

  if (*s == '.')
    {
      ++s;
      e = 10;

      while (*s >= '0' && *s <= '9')
        {
          d += (*s - '0') / (e * 1.0);
          e *= 10;
          ++s;
        }
    }

  if (*s == 'e' || *s == 'E')
    {
      ++s;

      if (*s == '-')
        {
            negexp = 1;
            s++;
        }
      else if (*s == '+')
        {
          ++s;
        }

      e = 0;

      while (*s >= '0' && *s <= '9')
        {
          e = (e * 10) + *s - '0';
          ++s;
        }

      if (e > 0)
        {
          for (k = 1; e > 0; k *= 10, e--) ;

          if (negexp)
            {
              d /= k;
            }
          else
            {
              d *= k;
            }
        }
    }

  if (neg)
    {
      d *= -1.0;
    }

  return d;
}

/*
 * Convert (some) escaped characters into their ascii values
 */
static char
idl_escape_reader (char *str)
{
  if (str[0] != '\\')
    {
      return str[0];
    }

  switch (str[1])
  {
    case 'n':
      return '\n';
    case 't':
      return '\t';
    case 'v':
      return '\v';
    case 'b':
      return '\b';
    case 'r':
      return '\r';
    case 'f':
      return '\f';
    case 'a':
      return '\a';
    case '\\':
      return '\\';
    case '\?':
      return '?';
    case '\'':
      return '\'';
    case '"':
      return '"';
    case 'x':
      {
        int i;

        // hex value
        for (i = 2; str[i] != '\0' && isxdigit (str[i]); ++i)
          {
            continue;
          }

        char save = str[i];
        str[i] = '\0';
        char out = (char)idl_atoui(&str[2], 16);
        str[i] = save;
        return out;
      }
      ACE_NOTREACHED (break;)
    default:
      // check for octal value
      if (str[1] >= '0' && str[1] <= '7')
        {
          int i;

          for (i = 1; str[i] >= '0' && str[i] <= '7'; ++i)
            {
              continue;
            }

          char save = str[i];
          str[i] = '\0';
          char out = (char)idl_atoui(&str[1], 8);
          str[i] = save;
          return out;
        }
      else
        {
          return str[1] - 'a';
        }
      ACE_NOTREACHED  (break;)
  }
}
/*
 * Convert escaped hex digits into a wchar
 */
static ACE_CDR::WChar
idl_wchar_escape_reader (char *str)
{
  if (str[0] != '\\' || str[1] != 'u')
    {
      return 0;
    }

  int i;
  // get the hex digits
  for (i = 2; str[i] != '\0' && isxdigit (str[i]); i++)
    {
      continue;
    }
  char save = str[i];
  str[i] = '\0';
  ACE_CDR::WChar out = (ACE_CDR::WChar) idl_atoui (&str[2], 16);
  str[i] = save;
  return out;
}

/*
 * Checks wstring for validity
 */
static char *
idl_wstring_escape_reader (char *str)
{
  return str;
}

static char *
idl_get_pragma_string (char *pragma)
{
  // Get pointers to each end of the substring between the quotes.
  const char *firstquote = ACE_OS::strchr (pragma, '"');

  if (firstquote == 0)
    {
      idl_global->err ()->syntax_error (
          IDL_GlobalData::PS_PragmaPrefixSyntax
        );

      return 0;
    }

  const char *start = firstquote + 1;
  const char *end = ACE_OS::strchr (start, '"');

  if (end == 0)
    {
      idl_global->err ()->syntax_error (
          IDL_GlobalData::PS_PragmaPrefixSyntax
        );

      return 0;
    }

  int len = static_cast<int> (end - start);
  char *retval = 0;

  ACE_NEW_RETURN (retval,
                  char[len + 1],
                  0);

  ACE_OS::strncpy (retval,
                   start,
                   len);

  retval[len] = '\0';
  return retval;
}

static bool
idl_valid_version (char *s)
{
  // Nothing preceding decimal point.
  if (*s == '.')
    {
      return 0;
    }

  char *minor = ACE_OS::strchr (s, '.');
  int i;

  if (minor == 0)
    {
      // No decimal point.
      return 0;
    }

  if (*(minor + 1) == '\0')
    {
      // Nothing following decimal point.
      return 0;
    }

  char *tmp = minor + 1;

  for (i = 0; tmp[i] != '\0'; ++i)
    {
      if (!isdigit (tmp[i]))
        {
          return 0;
        }
    }

  ptrdiff_t const len = minor - s;

  for (i = 0; i < len; ++i)
    {
      if (!isdigit (s[i]))
        {
          return 0;
        }
    }

  // Major and minor version numbers must be unsigned shorts.
  if (ACE_OS::atoi (minor + 1) > ACE_UINT16_MAX
      || ACE_OS::atoi (s) > ACE_UINT16_MAX)
    {
      return 0;
    }

  return 1;
}

static AST_Decl *
idl_find_node (const char *s)
{
  UTL_ScopedName * node = FE_Utils::string_to_scoped_name (s);
  AST_Decl * d = 0;

  if (node != 0)
    {
      d = idl_global->scopes ().top_non_null ()->lookup_by_name (node);

      if (d == 0)
        {
          idl_global->err ()->lookup_error (node);
        }

      node->destroy ();
      delete node;
    }

  return d;
}

