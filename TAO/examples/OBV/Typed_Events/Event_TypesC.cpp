// -*- C++ -*-
/**
 * Code generated by the The ACE ORB (TAO) IDL Compiler v2.4.1
 * TAO and the TAO IDL Compiler have been developed by:
 *       Center for Distributed Object Computing
 *       Washington University
 *       St. Louis, MO
 *       USA
 *       http://www.cs.wustl.edu/~schmidt/doc-center.html
 * and
 *       Distributed Object Computing Laboratory
 *       University of California at Irvine
 *       Irvine, CA
 *       USA
 * and
 *       Institute for Software Integrated Systems
 *       Vanderbilt University
 *       Nashville, TN
 *       USA
 *       http://www.isis.vanderbilt.edu/
 *
 * Information about TAO is available at:
 *     http://www.dre.vanderbilt.edu/~schmidt/TAO.html
 **/

// TAO_IDL - Generated from
// be/be_codegen.cpp:373


#include "Event_TypesC.h"
#include "tao/AnyTypeCode/Null_RefCount_Policy.h"
#include "tao/AnyTypeCode/TypeCode_Constants.h"
#include "tao/AnyTypeCode/Alias_TypeCode_Static.h"
#include "tao/AnyTypeCode/Objref_TypeCode_Static.h"
#include "tao/AnyTypeCode/Sequence_TypeCode_Static.h"
#include "tao/AnyTypeCode/String_TypeCode_Static.h"
#include "tao/AnyTypeCode/Value_TypeCode_Static.h"
#include "tao/AnyTypeCode/TypeCode_Value_Field.h"
#include "tao/AnyTypeCode/Recursive_Type_TypeCode.h"
#include "tao/CDR.h"
#include "tao/Exception_Data.h"
#include "tao/Invocation_Adapter.h"
#include "tao/Valuetype/ValueFactory.h"
#include "tao/Object_T.h"
#include "ace/OS_NS_string.h"

#if !defined (__ACE_INLINE__)
#include "Event_TypesC.inl"
#endif /* !defined INLINE */

// TAO_IDL - Generated from
// be/be_visitor_typecode/value_typecode.cpp:65

static TAO::TypeCode::Value_Field<char const *, ::CORBA::TypeCode_ptr const *> const _tao_fields_Event[] =
  {
    { "time_", &CORBA::_tc_long, ::CORBA::PUBLIC_MEMBER },
    { "origin_id_", &CORBA::_tc_ulong, ::CORBA::PUBLIC_MEMBER }

  };
static TAO::TypeCode::Value<char const *,
                     ::CORBA::TypeCode_ptr const *,
                     TAO::TypeCode::Value_Field<char const *, ::CORBA::TypeCode_ptr const *> const *,
                     TAO::Null_RefCount_Policy>
  _tao_tc_Event (
    ::CORBA::tk_value,
    "IDL:Event:1.0",
    "Event",
    ::CORBA::VM_NONE,
    &::CORBA::_tc_null,
    _tao_fields_Event,
    2);

::CORBA::TypeCode_ptr const _tc_Event =
  &_tao_tc_Event;

// TAO_IDL - Generated from
// be/be_visitor_valuetype/valuetype_cs.cpp:53

void
TAO::Value_Traits<Event>::add_ref (
    Event * p)
{
  ::CORBA::add_ref (p);
}

void
TAO::Value_Traits<Event>::remove_ref (
    Event * p)
{
  ::CORBA::remove_ref (p);
}

void
TAO::Value_Traits<Event>::release (
    Event * p)
{
  ::CORBA::remove_ref (p);
}

Event *
Event::_downcast ( ::CORBA::ValueBase *v)
{
  return dynamic_cast< ::Event * > (v);
}

const char *
Event::_tao_obv_repository_id (void) const
{
  return this->_tao_obv_static_repository_id ();
}

void
Event::_tao_obv_truncatable_repo_ids (Repository_Id_List& ids) const
{
  ids.push_back (this->_tao_obv_static_repository_id ());
}

// TAO extension - the virtual _type method.
::CORBA::TypeCode_ptr Event::_tao_type (void) const
{
  return ::_tc_Event;
}

Event::~Event (void)
{}

::CORBA::Boolean
Event::_tao_marshal_v (TAO_OutputCDR & strm) const
{
  TAO_ChunkInfo ci (this->is_truncatable_ || this->chunking_);
  return this->_tao_marshal__Event (strm, ci);
}

::CORBA::Boolean
Event::_tao_unmarshal_v (TAO_InputCDR & strm)
{
  TAO_ChunkInfo ci (this->is_truncatable_ || this->chunking_, 1);
  return this->_tao_unmarshal__Event (strm,ci);
}

::CORBA::Boolean
Event::_tao_match_formal_type (ptrdiff_t formal_type_id) const
{
  return formal_type_id == reinterpret_cast<ptrdiff_t> (Event::_downcast);
}

::CORBA::Boolean
Event::_tao_unmarshal (
    TAO_InputCDR &strm,
    Event *&new_object
  )
{
  ::CORBA::ValueBase *base = 0;
  ::CORBA::Boolean is_indirected = false;
  ::CORBA::Boolean is_null_object = false;
  ::CORBA::Boolean const retval =
    ::CORBA::ValueBase::_tao_unmarshal_pre (
        strm,
        base,
        Event::_tao_obv_static_repository_id (),
        is_null_object,
        is_indirected
      );

  ::CORBA::ValueBase_var owner (base);

  if (!retval)
    return false;

  if (is_null_object)
    return true;

  if (!is_indirected && !base->_tao_unmarshal_v (strm))
    return false;

  // Now base must point to the unmarshaled object.
  // Align the pointer to the right subobject.
  new_object = Event::_downcast (base);
  if (0 == new_object)
    return false;

  if (is_indirected)
    new_object->_add_ref ();

  owner._retn ();
  return true;
}

// TAO_IDL - Generated from
// be/be_visitor_typecode/value_typecode.cpp:65

static TAO::TypeCode::Value_Field<char const *, ::CORBA::TypeCode_ptr const *> const _tao_fields_Temperature[] =
  {
    { "temperature_", &CORBA::_tc_float, ::CORBA::PUBLIC_MEMBER }

  };
static TAO::TypeCode::Value<char const *,
                     ::CORBA::TypeCode_ptr const *,
                     TAO::TypeCode::Value_Field<char const *, ::CORBA::TypeCode_ptr const *> const *,
                     TAO::Null_RefCount_Policy>
  _tao_tc_Temperature (
    ::CORBA::tk_value,
    "IDL:Temperature:1.0",
    "Temperature",
    ::CORBA::VM_NONE,
    &_tc_Event,
    _tao_fields_Temperature,
    1);

::CORBA::TypeCode_ptr const _tc_Temperature =
  &_tao_tc_Temperature;

// TAO_IDL - Generated from
// be/be_visitor_valuetype/valuetype_cs.cpp:53

void
TAO::Value_Traits<Temperature>::add_ref (
    Temperature * p)
{
  ::CORBA::add_ref (p);
}

void
TAO::Value_Traits<Temperature>::remove_ref (
    Temperature * p)
{
  ::CORBA::remove_ref (p);
}

void
TAO::Value_Traits<Temperature>::release (
    Temperature * p)
{
  ::CORBA::remove_ref (p);
}

Temperature *
Temperature::_downcast ( ::CORBA::ValueBase *v)
{
  return dynamic_cast< ::Temperature * > (v);
}

const char *
Temperature::_tao_obv_repository_id (void) const
{
  return this->_tao_obv_static_repository_id ();
}

void
Temperature::_tao_obv_truncatable_repo_ids (Repository_Id_List& ids) const
{
  ids.push_back (this->_tao_obv_static_repository_id ());
}

// TAO extension - the virtual _type method.
::CORBA::TypeCode_ptr Temperature::_tao_type (void) const
{
  return ::_tc_Temperature;
}

Temperature::~Temperature (void)
{}

::CORBA::Boolean
Temperature::_tao_marshal_v (TAO_OutputCDR & strm) const
{
  TAO_ChunkInfo ci (this->is_truncatable_ || this->chunking_);
  return this->_tao_marshal__Temperature (strm, ci);
}

::CORBA::Boolean
Temperature::_tao_unmarshal_v (TAO_InputCDR & strm)
{
  TAO_ChunkInfo ci (this->is_truncatable_ || this->chunking_, 1);
  return this->_tao_unmarshal__Temperature (strm,ci);
}

::CORBA::Boolean
Temperature::_tao_match_formal_type (ptrdiff_t formal_type_id) const
{
  return formal_type_id == reinterpret_cast<ptrdiff_t> (Temperature::_downcast);
}

::CORBA::Boolean
Temperature::_tao_unmarshal (
    TAO_InputCDR &strm,
    Temperature *&new_object
  )
{
  ::CORBA::ValueBase *base = 0;
  ::CORBA::Boolean is_indirected = false;
  ::CORBA::Boolean is_null_object = false;
  ::CORBA::Boolean const retval =
    ::CORBA::ValueBase::_tao_unmarshal_pre (
        strm,
        base,
        Temperature::_tao_obv_static_repository_id (),
        is_null_object,
        is_indirected
      );

  ::CORBA::ValueBase_var owner (base);

  if (!retval)
    return false;

  if (is_null_object)
    return true;

  if (!is_indirected && !base->_tao_unmarshal_v (strm))
    return false;

  // Now base must point to the unmarshaled object.
  // Align the pointer to the right subobject.
  new_object = Temperature::_downcast (base);
  if (0 == new_object)
    return false;

  if (is_indirected)
    new_object->_add_ref ();

  owner._retn ();
  return true;
}

// TAO_IDL - Generated from
// be/be_visitor_array/array_cs.cpp:94

Point_slice *
Point_dup (const Point_slice *_tao_src_array)
{
  Point_slice *_tao_dup_array =
    Point_alloc ();

  if (!_tao_dup_array)
    {
      return static_cast <Point_slice *> (0);
    }

  Point_copy (_tao_dup_array, _tao_src_array);
  return _tao_dup_array;
}

Point_slice *
Point_alloc (void)
{
  Point_slice *retval = 0;
  ACE_NEW_RETURN (retval, ::CORBA::Float[3], 0);
  return retval;
}

void
Point_free (
    Point_slice *_tao_slice)
{
  delete [] _tao_slice;
}

void
Point_copy (
    Point_slice * _tao_to,
    const Point_slice *_tao_from)
{
  // Copy each individual element.
  for ( ::CORBA::ULong i0 = 0; i0 < 3; ++i0)
    {
      _tao_to[i0] = _tao_from[i0];
    }
}

// TAO_IDL - Generated from
// be/be_visitor_typecode/alias_typecode.cpp:49



// TAO_IDL - Generated from
// be/be_visitor_typecode/typecode_defn.cpp:298


#ifndef _TAO_TYPECODE_Point_GUARD
#define _TAO_TYPECODE_Point_GUARD

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

namespace TAO
{
  namespace TypeCode
  {
    namespace
    {
      TAO::TypeCode::Sequence< ::CORBA::TypeCode_ptr const *,
                              TAO::Null_RefCount_Policy>
        Point_3 (
          ::CORBA::tk_array,
          &CORBA::_tc_float,
          3U);

      ::CORBA::TypeCode_ptr const tc_Point =
        &Point_3;
    }
  }
}

TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_TYPECODE_Point_GUARD */
static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_Point (
    ::CORBA::tk_alias,
    "IDL:Point:1.0",
    "Point",
    &TAO::TypeCode::tc_Point);

::CORBA::TypeCode_ptr const _tc_Point =
  &_tao_tc_Point;

// TAO_IDL - Generated from
// be/be_visitor_typecode/value_typecode.cpp:65



// TAO_IDL - Generated from
// be/be_visitor_typecode/typecode_defn.cpp:298

static TAO::TypeCode::Value_Field<char const *, ::CORBA::TypeCode_ptr const *> const _tao_fields_Position[] =
  {
    { "xyz", &_tc_Point, ::CORBA::PUBLIC_MEMBER }

  };
static TAO::TypeCode::Value<char const *,
                     ::CORBA::TypeCode_ptr const *,
                     TAO::TypeCode::Value_Field<char const *, ::CORBA::TypeCode_ptr const *> const *,
                     TAO::Null_RefCount_Policy>
  _tao_tc_Position (
    ::CORBA::tk_value,
    "IDL:Position:1.0",
    "Position",
    ::CORBA::VM_NONE,
    &_tc_Event,
    _tao_fields_Position,
    1);

::CORBA::TypeCode_ptr const _tc_Position =
  &_tao_tc_Position;

// TAO_IDL - Generated from
// be/be_visitor_valuetype/valuetype_cs.cpp:53

void
TAO::Value_Traits<Position>::add_ref (
    Position * p)
{
  ::CORBA::add_ref (p);
}

void
TAO::Value_Traits<Position>::remove_ref (
    Position * p)
{
  ::CORBA::remove_ref (p);
}

void
TAO::Value_Traits<Position>::release (
    Position * p)
{
  ::CORBA::remove_ref (p);
}

Position *
Position::_downcast ( ::CORBA::ValueBase *v)
{
  return dynamic_cast< ::Position * > (v);
}

const char *
Position::_tao_obv_repository_id (void) const
{
  return this->_tao_obv_static_repository_id ();
}

void
Position::_tao_obv_truncatable_repo_ids (Repository_Id_List& ids) const
{
  ids.push_back (this->_tao_obv_static_repository_id ());
}

// TAO extension - the virtual _type method.
::CORBA::TypeCode_ptr Position::_tao_type (void) const
{
  return ::_tc_Position;
}

Position::~Position (void)
{}

::CORBA::Boolean
Position::_tao_marshal_v (TAO_OutputCDR & strm) const
{
  TAO_ChunkInfo ci (this->is_truncatable_ || this->chunking_);
  return this->_tao_marshal__Position (strm, ci);
}

::CORBA::Boolean
Position::_tao_unmarshal_v (TAO_InputCDR & strm)
{
  TAO_ChunkInfo ci (this->is_truncatable_ || this->chunking_, 1);
  return this->_tao_unmarshal__Position (strm,ci);
}

::CORBA::Boolean
Position::_tao_match_formal_type (ptrdiff_t formal_type_id) const
{
  return formal_type_id == reinterpret_cast<ptrdiff_t> (Position::_downcast);
}

::CORBA::Boolean
Position::_tao_unmarshal (
    TAO_InputCDR &strm,
    Position *&new_object
  )
{
  ::CORBA::ValueBase *base = 0;
  ::CORBA::Boolean is_indirected = false;
  ::CORBA::Boolean is_null_object = false;
  ::CORBA::Boolean const retval =
    ::CORBA::ValueBase::_tao_unmarshal_pre (
        strm,
        base,
        Position::_tao_obv_static_repository_id (),
        is_null_object,
        is_indirected
      );

  ::CORBA::ValueBase_var owner (base);

  if (!retval)
    return false;

  if (is_null_object)
    return true;

  if (!is_indirected && !base->_tao_unmarshal_v (strm))
    return false;

  // Now base must point to the unmarshaled object.
  // Align the pointer to the right subobject.
  new_object = Position::_downcast (base);
  if (0 == new_object)
    return false;

  if (is_indirected)
    new_object->_add_ref ();

  owner._retn ();
  return true;
}

// TAO_IDL - Generated from
// be/be_visitor_typecode/value_typecode.cpp:65

static TAO::TypeCode::Value_Field<char const *, ::CORBA::TypeCode_ptr const *> const _tao_fields_Log_Msg[] =
  {
    { "urgency", &CORBA::_tc_short, ::CORBA::PUBLIC_MEMBER },
    { "message", &CORBA::_tc_string, ::CORBA::PUBLIC_MEMBER }

  };
static TAO::TypeCode::Value<char const *,
                     ::CORBA::TypeCode_ptr const *,
                     TAO::TypeCode::Value_Field<char const *, ::CORBA::TypeCode_ptr const *> const *,
                     TAO::Null_RefCount_Policy>
  _tao_tc_Log_Msg (
    ::CORBA::tk_value,
    "IDL:Log_Msg:1.0",
    "Log_Msg",
    ::CORBA::VM_NONE,
    &_tc_Event,
    _tao_fields_Log_Msg,
    2);

::CORBA::TypeCode_ptr const _tc_Log_Msg =
  &_tao_tc_Log_Msg;

// TAO_IDL - Generated from
// be/be_visitor_valuetype/valuetype_cs.cpp:53

void
TAO::Value_Traits<Log_Msg>::add_ref (
    Log_Msg * p)
{
  ::CORBA::add_ref (p);
}

void
TAO::Value_Traits<Log_Msg>::remove_ref (
    Log_Msg * p)
{
  ::CORBA::remove_ref (p);
}

void
TAO::Value_Traits<Log_Msg>::release (
    Log_Msg * p)
{
  ::CORBA::remove_ref (p);
}

Log_Msg *
Log_Msg::_downcast ( ::CORBA::ValueBase *v)
{
  return dynamic_cast< ::Log_Msg * > (v);
}

const char *
Log_Msg::_tao_obv_repository_id (void) const
{
  return this->_tao_obv_static_repository_id ();
}

void
Log_Msg::_tao_obv_truncatable_repo_ids (Repository_Id_List& ids) const
{
  ids.push_back (this->_tao_obv_static_repository_id ());
}

// TAO extension - the virtual _type method.
::CORBA::TypeCode_ptr Log_Msg::_tao_type (void) const
{
  return ::_tc_Log_Msg;
}

Log_Msg::~Log_Msg (void)
{}

::CORBA::Boolean
Log_Msg::_tao_marshal_v (TAO_OutputCDR & strm) const
{
  TAO_ChunkInfo ci (this->is_truncatable_ || this->chunking_);
  return this->_tao_marshal__Log_Msg (strm, ci);
}

::CORBA::Boolean
Log_Msg::_tao_unmarshal_v (TAO_InputCDR & strm)
{
  TAO_ChunkInfo ci (this->is_truncatable_ || this->chunking_, 1);
  return this->_tao_unmarshal__Log_Msg (strm,ci);
}

::CORBA::Boolean
Log_Msg::_tao_match_formal_type (ptrdiff_t formal_type_id) const
{
  return formal_type_id == reinterpret_cast<ptrdiff_t> (Log_Msg::_downcast);
}

::CORBA::Boolean
Log_Msg::_tao_unmarshal (
    TAO_InputCDR &strm,
    Log_Msg *&new_object
  )
{
  ::CORBA::ValueBase *base = 0;
  ::CORBA::Boolean is_indirected = false;
  ::CORBA::Boolean is_null_object = false;
  ::CORBA::Boolean const retval =
    ::CORBA::ValueBase::_tao_unmarshal_pre (
        strm,
        base,
        Log_Msg::_tao_obv_static_repository_id (),
        is_null_object,
        is_indirected
      );

  ::CORBA::ValueBase_var owner (base);

  if (!retval)
    return false;

  if (is_null_object)
    return true;

  if (!is_indirected && !base->_tao_unmarshal_v (strm))
    return false;

  // Now base must point to the unmarshaled object.
  // Align the pointer to the right subobject.
  new_object = Log_Msg::_downcast (base);
  if (0 == new_object)
    return false;

  if (is_indirected)
    new_object->_add_ref ();

  owner._retn ();
  return true;
}

// TAO_IDL - Generated from
// be/be_visitor_typecode/value_typecode.cpp:65

static TAO::TypeCode::Value_Field<char const *, ::CORBA::TypeCode_ptr const *> const _tao_fields_Event_List_Link[] =
  {
    { "my_event", &_tc_Event, ::CORBA::PRIVATE_MEMBER },
    { "next", &_tc_Event_List_Link, ::CORBA::PRIVATE_MEMBER }

  };
static TAO::TypeCode::Recursive_Type<
  TAO::TypeCode::Value<char const *,
                       ::CORBA::TypeCode_ptr const *,
                       TAO::TypeCode::Value_Field<char const *, ::CORBA::TypeCode_ptr const *> const *,
                       TAO::Null_RefCount_Policy>,
  ::CORBA::TypeCode_ptr const *,
  TAO::TypeCode::Value_Field<char const *, ::CORBA::TypeCode_ptr const *> const * >

  _tao_tc_Event_List_Link (
    ::CORBA::tk_value,
    "IDL:Event_List_Link:1.0",
    "Event_List_Link",
    ::CORBA::VM_NONE,
    &::CORBA::_tc_null,
    _tao_fields_Event_List_Link,
    2);

::CORBA::TypeCode_ptr const _tc_Event_List_Link =
  &_tao_tc_Event_List_Link;

// TAO_IDL - Generated from
// be/be_visitor_valuetype/valuetype_cs.cpp:53

void
TAO::Value_Traits<Event_List_Link>::add_ref (
    Event_List_Link * p)
{
  ::CORBA::add_ref (p);
}

void
TAO::Value_Traits<Event_List_Link>::remove_ref (
    Event_List_Link * p)
{
  ::CORBA::remove_ref (p);
}

void
TAO::Value_Traits<Event_List_Link>::release (
    Event_List_Link * p)
{
  ::CORBA::remove_ref (p);
}

Event_List_Link *
Event_List_Link::_downcast ( ::CORBA::ValueBase *v)
{
  return dynamic_cast< ::Event_List_Link * > (v);
}

const char *
Event_List_Link::_tao_obv_repository_id (void) const
{
  return this->_tao_obv_static_repository_id ();
}

void
Event_List_Link::_tao_obv_truncatable_repo_ids (Repository_Id_List& ids) const
{
  ids.push_back (this->_tao_obv_static_repository_id ());
}

// TAO extension - the virtual _type method.
::CORBA::TypeCode_ptr Event_List_Link::_tao_type (void) const
{
  return ::_tc_Event_List_Link;
}

Event_List_Link::~Event_List_Link (void)
{}

::CORBA::Boolean
Event_List_Link::_tao_marshal_v (TAO_OutputCDR & strm) const
{
  TAO_ChunkInfo ci (this->is_truncatable_ || this->chunking_);
  return this->_tao_marshal__Event_List_Link (strm, ci);
}

::CORBA::Boolean
Event_List_Link::_tao_unmarshal_v (TAO_InputCDR & strm)
{
  TAO_ChunkInfo ci (this->is_truncatable_ || this->chunking_, 1);
  return this->_tao_unmarshal__Event_List_Link (strm,ci);
}

::CORBA::Boolean
Event_List_Link::_tao_match_formal_type (ptrdiff_t formal_type_id) const
{
  return formal_type_id == reinterpret_cast<ptrdiff_t> (Event_List_Link::_downcast);
}

::CORBA::Boolean
Event_List_Link::_tao_unmarshal (
    TAO_InputCDR &strm,
    Event_List_Link *&new_object
  )
{
  ::CORBA::ValueBase *base = 0;
  ::CORBA::Boolean is_indirected = false;
  ::CORBA::Boolean is_null_object = false;
  ::CORBA::Boolean const retval =
    ::CORBA::ValueBase::_tao_unmarshal_pre (
        strm,
        base,
        Event_List_Link::_tao_obv_static_repository_id (),
        is_null_object,
        is_indirected
      );

  ::CORBA::ValueBase_var owner (base);

  if (!retval)
    return false;

  if (is_null_object)
    return true;

  if (!is_indirected && !base->_tao_unmarshal_v (strm))
    return false;

  // Now base must point to the unmarshaled object.
  // Align the pointer to the right subobject.
  new_object = Event_List_Link::_downcast (base);
  if (0 == new_object)
    return false;

  if (is_indirected)
    new_object->_add_ref ();

  owner._retn ();
  return true;
}

// TAO_IDL - Generated from
// be/be_visitor_typecode/value_typecode.cpp:65

static TAO::TypeCode::Value_Field<char const *, ::CORBA::TypeCode_ptr const *> const _tao_fields_Event_List[] =
  {
    { "first_link", &_tc_Event_List_Link, ::CORBA::PUBLIC_MEMBER }

  };
static TAO::TypeCode::Value<char const *,
                     ::CORBA::TypeCode_ptr const *,
                     TAO::TypeCode::Value_Field<char const *, ::CORBA::TypeCode_ptr const *> const *,
                     TAO::Null_RefCount_Policy>
  _tao_tc_Event_List (
    ::CORBA::tk_value,
    "IDL:Event_List:1.0",
    "Event_List",
    ::CORBA::VM_NONE,
    &::CORBA::_tc_null,
    _tao_fields_Event_List,
    1);

::CORBA::TypeCode_ptr const _tc_Event_List =
  &_tao_tc_Event_List;

// TAO_IDL - Generated from
// be/be_visitor_valuetype/valuetype_cs.cpp:53

void
TAO::Value_Traits<Event_List>::add_ref (
    Event_List * p)
{
  ::CORBA::add_ref (p);
}

void
TAO::Value_Traits<Event_List>::remove_ref (
    Event_List * p)
{
  ::CORBA::remove_ref (p);
}

void
TAO::Value_Traits<Event_List>::release (
    Event_List * p)
{
  ::CORBA::remove_ref (p);
}

Event_List *
Event_List::_downcast ( ::CORBA::ValueBase *v)
{
  return dynamic_cast< ::Event_List * > (v);
}

const char *
Event_List::_tao_obv_repository_id (void) const
{
  return this->_tao_obv_static_repository_id ();
}

void
Event_List::_tao_obv_truncatable_repo_ids (Repository_Id_List& ids) const
{
  ids.push_back (this->_tao_obv_static_repository_id ());
}

// TAO extension - the virtual _type method.
::CORBA::TypeCode_ptr Event_List::_tao_type (void) const
{
  return ::_tc_Event_List;
}

Event_List::~Event_List (void)
{}

::CORBA::Boolean
Event_List::_tao_marshal_v (TAO_OutputCDR & strm) const
{
  TAO_ChunkInfo ci (this->is_truncatable_ || this->chunking_);
  return this->_tao_marshal__Event_List (strm, ci);
}

::CORBA::Boolean
Event_List::_tao_unmarshal_v (TAO_InputCDR & strm)
{
  TAO_ChunkInfo ci (this->is_truncatable_ || this->chunking_, 1);
  return this->_tao_unmarshal__Event_List (strm,ci);
}

::CORBA::Boolean
Event_List::_tao_match_formal_type (ptrdiff_t formal_type_id) const
{
  return formal_type_id == reinterpret_cast<ptrdiff_t> (Event_List::_downcast);
}

::CORBA::Boolean
Event_List::_tao_unmarshal (
    TAO_InputCDR &strm,
    Event_List *&new_object
  )
{
  ::CORBA::ValueBase *base = 0;
  ::CORBA::Boolean is_indirected = false;
  ::CORBA::Boolean is_null_object = false;
  ::CORBA::Boolean const retval =
    ::CORBA::ValueBase::_tao_unmarshal_pre (
        strm,
        base,
        Event_List::_tao_obv_static_repository_id (),
        is_null_object,
        is_indirected
      );

  ::CORBA::ValueBase_var owner (base);

  if (!retval)
    return false;

  if (is_null_object)
    return true;

  if (!is_indirected && !base->_tao_unmarshal_v (strm))
    return false;

  // Now base must point to the unmarshaled object.
  // Align the pointer to the right subobject.
  new_object = Event_List::_downcast (base);
  if (0 == new_object)
    return false;

  if (is_indirected)
    new_object->_add_ref ();

  owner._retn ();
  return true;
}

// TAO_IDL - Generated from
// be/be_visitor_interface/interface_cs.cpp:48

// Traits specializations for Checkpoint.

Checkpoint_ptr
TAO::Objref_Traits<Checkpoint>::duplicate (
    Checkpoint_ptr p)
{
  return Checkpoint::_duplicate (p);
}

void
TAO::Objref_Traits<Checkpoint>::release (
    Checkpoint_ptr p)
{
  ::CORBA::release (p);
}

Checkpoint_ptr
TAO::Objref_Traits<Checkpoint>::nil (void)
{
  return Checkpoint::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<Checkpoint>::marshal (
    const Checkpoint_ptr p,
    TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:88

void
Checkpoint::put_event (
  ::Event * e)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }

  TAO::Arg_Traits< void>::ret_val _tao_retval;
  TAO::Arg_Traits< ::Event>::in_arg_val _tao_e (e);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_e
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      2,
      "put_event",
      9,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY

    );

  _tao_call.invoke (0, 0);
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:88

::Event_List *
Checkpoint::get_critical_events (
  void)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }

  TAO::Arg_Traits< ::Event_List>::ret_val _tao_retval;

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      1,
      "get_critical_events",
      19,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY,
      TAO::TAO_TWOWAY_INVOCATION
      ,
      TAO::TAO_SYNCHRONOUS_INVOCATION,
      false
    );

  _tao_call.invoke (0, 0);

  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:88

void
Checkpoint::shutdown (
  void)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }

  TAO::Arg_Traits< void>::ret_val _tao_retval;

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      1,
      "shutdown",
      8,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY,
      TAO::TAO_ONEWAY_INVOCATION,
      TAO::TAO_SYNCHRONOUS_INVOCATION,
      false
    );

  _tao_call.invoke (0, 0);
}

Checkpoint::Checkpoint (void)
{
}

Checkpoint::~Checkpoint (void)
{
}

Checkpoint_ptr
Checkpoint::_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return
    TAO::Narrow_Utils<Checkpoint>::narrow (
        _tao_objref,
        "IDL:Checkpoint:1.0");
}

Checkpoint_ptr
Checkpoint::_unchecked_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return
    TAO::Narrow_Utils<Checkpoint>::unchecked_narrow (
        _tao_objref);
}

Checkpoint_ptr
Checkpoint::_nil (void)
{
  return 0;
}

Checkpoint_ptr
Checkpoint::_duplicate (Checkpoint_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  return obj;
}

void
Checkpoint::_tao_release (Checkpoint_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
Checkpoint::_is_a (const char *value)
{
  if (
      ACE_OS::strcmp (
          value,
          "IDL:Checkpoint:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        ) == 0
    )
    {
      return true; // success using local knowledge
    }
  else
    {
      return this->::CORBA::Object::_is_a (value);
    }
}

const char* Checkpoint::_interface_repository_id (void) const
{
  return "IDL:Checkpoint:1.0";
}

::CORBA::Boolean
Checkpoint::marshal (TAO_OutputCDR &cdr)
{
  return (cdr << this);
}

// TAO_IDL - Generated from
// be/be_visitor_typecode/objref_typecode.cpp:70

static TAO::TypeCode::Objref<char const *,
                             TAO::Null_RefCount_Policy>
  _tao_tc_Checkpoint (
    ::CORBA::tk_objref,
    "IDL:Checkpoint:1.0",
    "Checkpoint");

::CORBA::TypeCode_ptr const _tc_Checkpoint =
  &_tao_tc_Checkpoint;

// TAO_IDL - Generated from
// be/be_visitor_typecode/value_typecode.cpp:65

static TAO::TypeCode::Value_Field<char const *, ::CORBA::TypeCode_ptr const *> const * const _tao_fields_Criterion = 0;
static TAO::TypeCode::Value<char const *,
                     ::CORBA::TypeCode_ptr const *,
                     TAO::TypeCode::Value_Field<char const *, ::CORBA::TypeCode_ptr const *> const *,
                     TAO::Null_RefCount_Policy>
  _tao_tc_Criterion (
    ::CORBA::tk_value,
    "IDL:Criterion:1.0",
    "Criterion",
    ::CORBA::VM_ABSTRACT,
    &::CORBA::_tc_null,
    _tao_fields_Criterion,
    0);

::CORBA::TypeCode_ptr const _tc_Criterion =
  &_tao_tc_Criterion;

// TAO_IDL - Generated from
// be/be_visitor_valuetype/valuetype_cs.cpp:53

void
TAO::Value_Traits<Criterion>::add_ref (
    Criterion * p)
{
  ::CORBA::add_ref (p);
}

void
TAO::Value_Traits<Criterion>::remove_ref (
    Criterion * p)
{
  ::CORBA::remove_ref (p);
}

void
TAO::Value_Traits<Criterion>::release (
    Criterion * p)
{
  ::CORBA::remove_ref (p);
}

Criterion *
Criterion::_downcast ( ::CORBA::ValueBase *v)
{
  return dynamic_cast< ::Criterion * > (v);
}

const char *
Criterion::_tao_obv_repository_id (void) const
{
  return this->_tao_obv_static_repository_id ();
}

void
Criterion::_tao_obv_truncatable_repo_ids (Repository_Id_List& ids) const
{
  ids.push_back (this->_tao_obv_static_repository_id ());
}

// TAO extension - the virtual _type method.
::CORBA::TypeCode_ptr Criterion::_tao_type (void) const
{
  return ::_tc_Criterion;
}

Criterion::~Criterion (void)
{}

::CORBA::Boolean
Criterion::_tao_unmarshal (
    TAO_InputCDR &strm,
    Criterion *&new_object
  )
{
  ::CORBA::ValueBase *base = 0;
  ::CORBA::Boolean is_indirected = false;
  ::CORBA::Boolean is_null_object = false;
  ::CORBA::Boolean const retval =
    ::CORBA::ValueBase::_tao_unmarshal_pre (
        strm,
        base,
        Criterion::_tao_obv_static_repository_id (),
        is_null_object,
        is_indirected
      );

  ::CORBA::ValueBase_var owner (base);

  if (!retval)
    return false;

  if (is_null_object)
    return true;

  if (!is_indirected && !base->_tao_unmarshal_v (strm))
    return false;

  // Now base must point to the unmarshaled object.
  // Align the pointer to the right subobject.
  new_object = Criterion::_downcast (base);
  if (0 == new_object)
    return false;

  if (is_indirected)
    new_object->_add_ref ();

  owner._retn ();
  return true;
}

// TAO_IDL - Generated from
// be/be_visitor_typecode/value_typecode.cpp:65

static TAO::TypeCode::Value_Field<char const *, ::CORBA::TypeCode_ptr const *> const _tao_fields_Temperature_Criterion[] =
  {
    { "meltingpoint", &_tc_Temperature, ::CORBA::PRIVATE_MEMBER }

  };
static TAO::TypeCode::Value<char const *,
                     ::CORBA::TypeCode_ptr const *,
                     TAO::TypeCode::Value_Field<char const *, ::CORBA::TypeCode_ptr const *> const *,
                     TAO::Null_RefCount_Policy>
  _tao_tc_Temperature_Criterion (
    ::CORBA::tk_value,
    "IDL:Temperature_Criterion:1.0",
    "Temperature_Criterion",
    ::CORBA::VM_NONE,
    &_tc_Event,
    _tao_fields_Temperature_Criterion,
    1);

::CORBA::TypeCode_ptr const _tc_Temperature_Criterion =
  &_tao_tc_Temperature_Criterion;

// TAO_IDL - Generated from
// be/be_visitor_valuetype/valuetype_cs.cpp:53

void
TAO::Value_Traits<Temperature_Criterion>::add_ref (
    Temperature_Criterion * p)
{
  ::CORBA::add_ref (p);
}

void
TAO::Value_Traits<Temperature_Criterion>::remove_ref (
    Temperature_Criterion * p)
{
  ::CORBA::remove_ref (p);
}

void
TAO::Value_Traits<Temperature_Criterion>::release (
    Temperature_Criterion * p)
{
  ::CORBA::remove_ref (p);
}

Temperature_Criterion *
Temperature_Criterion::_downcast ( ::CORBA::ValueBase *v)
{
  return dynamic_cast< ::Temperature_Criterion * > (v);
}

const char *
Temperature_Criterion::_tao_obv_repository_id (void) const
{
  return this->_tao_obv_static_repository_id ();
}

void
Temperature_Criterion::_tao_obv_truncatable_repo_ids (Repository_Id_List& ids) const
{
  ids.push_back (this->_tao_obv_static_repository_id ());
}

// TAO extension - the virtual _type method.
::CORBA::TypeCode_ptr Temperature_Criterion::_tao_type (void) const
{
  return ::_tc_Temperature_Criterion;
}

Temperature_Criterion::~Temperature_Criterion (void)
{}

::CORBA::Boolean
Temperature_Criterion::_tao_marshal_v (TAO_OutputCDR & strm) const
{
  TAO_ChunkInfo ci (this->is_truncatable_ || this->chunking_);
  return this->_tao_marshal__Temperature_Criterion (strm, ci);
}

::CORBA::Boolean
Temperature_Criterion::_tao_unmarshal_v (TAO_InputCDR & strm)
{
  TAO_ChunkInfo ci (this->is_truncatable_ || this->chunking_, 1);
  return this->_tao_unmarshal__Temperature_Criterion (strm,ci);
}

::CORBA::Boolean
Temperature_Criterion::_tao_match_formal_type (ptrdiff_t formal_type_id) const
{
  return formal_type_id == reinterpret_cast<ptrdiff_t> (Temperature_Criterion::_downcast);
}

::CORBA::Boolean
Temperature_Criterion::_tao_unmarshal (
    TAO_InputCDR &strm,
    Temperature_Criterion *&new_object
  )
{
  ::CORBA::ValueBase *base = 0;
  ::CORBA::Boolean is_indirected = false;
  ::CORBA::Boolean is_null_object = false;
  ::CORBA::Boolean const retval =
    ::CORBA::ValueBase::_tao_unmarshal_pre (
        strm,
        base,
        Temperature_Criterion::_tao_obv_static_repository_id (),
        is_null_object,
        is_indirected
      );

  ::CORBA::ValueBase_var owner (base);

  if (!retval)
    return false;

  if (is_null_object)
    return true;

  if (!is_indirected && !base->_tao_unmarshal_v (strm))
    return false;

  // Now base must point to the unmarshaled object.
  // Align the pointer to the right subobject.
  new_object = Temperature_Criterion::_downcast (base);
  if (0 == new_object)
    return false;

  if (is_indirected)
    new_object->_add_ref ();

  owner._retn ();
  return true;
}

// TAO_IDL - Generated from
// be/be_visitor_typecode/value_typecode.cpp:65

static TAO::TypeCode::Value_Field<char const *, ::CORBA::TypeCode_ptr const *> const _tao_fields_Position_Criterion[] =
  {
    { "leftbottom", &_tc_Position, ::CORBA::PRIVATE_MEMBER },
    { "topright", &_tc_Position, ::CORBA::PRIVATE_MEMBER }

  };
static TAO::TypeCode::Value<char const *,
                     ::CORBA::TypeCode_ptr const *,
                     TAO::TypeCode::Value_Field<char const *, ::CORBA::TypeCode_ptr const *> const *,
                     TAO::Null_RefCount_Policy>
  _tao_tc_Position_Criterion (
    ::CORBA::tk_value,
    "IDL:Position_Criterion:1.0",
    "Position_Criterion",
    ::CORBA::VM_NONE,
    &_tc_Event,
    _tao_fields_Position_Criterion,
    2);

::CORBA::TypeCode_ptr const _tc_Position_Criterion =
  &_tao_tc_Position_Criterion;

// TAO_IDL - Generated from
// be/be_visitor_valuetype/valuetype_cs.cpp:53

void
TAO::Value_Traits<Position_Criterion>::add_ref (
    Position_Criterion * p)
{
  ::CORBA::add_ref (p);
}

void
TAO::Value_Traits<Position_Criterion>::remove_ref (
    Position_Criterion * p)
{
  ::CORBA::remove_ref (p);
}

void
TAO::Value_Traits<Position_Criterion>::release (
    Position_Criterion * p)
{
  ::CORBA::remove_ref (p);
}

Position_Criterion *
Position_Criterion::_downcast ( ::CORBA::ValueBase *v)
{
  return dynamic_cast< ::Position_Criterion * > (v);
}

const char *
Position_Criterion::_tao_obv_repository_id (void) const
{
  return this->_tao_obv_static_repository_id ();
}

void
Position_Criterion::_tao_obv_truncatable_repo_ids (Repository_Id_List& ids) const
{
  ids.push_back (this->_tao_obv_static_repository_id ());
}

// TAO extension - the virtual _type method.
::CORBA::TypeCode_ptr Position_Criterion::_tao_type (void) const
{
  return ::_tc_Position_Criterion;
}

Position_Criterion::~Position_Criterion (void)
{}

::CORBA::Boolean
Position_Criterion::_tao_marshal_v (TAO_OutputCDR & strm) const
{
  TAO_ChunkInfo ci (this->is_truncatable_ || this->chunking_);
  return this->_tao_marshal__Position_Criterion (strm, ci);
}

::CORBA::Boolean
Position_Criterion::_tao_unmarshal_v (TAO_InputCDR & strm)
{
  TAO_ChunkInfo ci (this->is_truncatable_ || this->chunking_, 1);
  return this->_tao_unmarshal__Position_Criterion (strm,ci);
}

::CORBA::Boolean
Position_Criterion::_tao_match_formal_type (ptrdiff_t formal_type_id) const
{
  return formal_type_id == reinterpret_cast<ptrdiff_t> (Position_Criterion::_downcast);
}

::CORBA::Boolean
Position_Criterion::_tao_unmarshal (
    TAO_InputCDR &strm,
    Position_Criterion *&new_object
  )
{
  ::CORBA::ValueBase *base = 0;
  ::CORBA::Boolean is_indirected = false;
  ::CORBA::Boolean is_null_object = false;
  ::CORBA::Boolean const retval =
    ::CORBA::ValueBase::_tao_unmarshal_pre (
        strm,
        base,
        Position_Criterion::_tao_obv_static_repository_id (),
        is_null_object,
        is_indirected
      );

  ::CORBA::ValueBase_var owner (base);

  if (!retval)
    return false;

  if (is_null_object)
    return true;

  if (!is_indirected && !base->_tao_unmarshal_v (strm))
    return false;

  // Now base must point to the unmarshaled object.
  // Align the pointer to the right subobject.
  new_object = Position_Criterion::_downcast (base);
  if (0 == new_object)
    return false;

  if (is_indirected)
    new_object->_add_ref ();

  owner._retn ();
  return true;
}

// TAO_IDL - Generated from
// be/be_visitor_typecode/value_typecode.cpp:65

static TAO::TypeCode::Value_Field<char const *, ::CORBA::TypeCode_ptr const *> const * const _tao_fields_Log_Msg_Criterion = 0;
static TAO::TypeCode::Value<char const *,
                     ::CORBA::TypeCode_ptr const *,
                     TAO::TypeCode::Value_Field<char const *, ::CORBA::TypeCode_ptr const *> const *,
                     TAO::Null_RefCount_Policy>
  _tao_tc_Log_Msg_Criterion (
    ::CORBA::tk_value,
    "IDL:Log_Msg_Criterion:1.0",
    "Log_Msg_Criterion",
    ::CORBA::VM_NONE,
    &_tc_Event,
    _tao_fields_Log_Msg_Criterion,
    0);

::CORBA::TypeCode_ptr const _tc_Log_Msg_Criterion =
  &_tao_tc_Log_Msg_Criterion;

// TAO_IDL - Generated from
// be/be_visitor_valuetype/valuetype_cs.cpp:53

void
TAO::Value_Traits<Log_Msg_Criterion>::add_ref (
    Log_Msg_Criterion * p)
{
  ::CORBA::add_ref (p);
}

void
TAO::Value_Traits<Log_Msg_Criterion>::remove_ref (
    Log_Msg_Criterion * p)
{
  ::CORBA::remove_ref (p);
}

void
TAO::Value_Traits<Log_Msg_Criterion>::release (
    Log_Msg_Criterion * p)
{
  ::CORBA::remove_ref (p);
}

Log_Msg_Criterion *
Log_Msg_Criterion::_downcast ( ::CORBA::ValueBase *v)
{
  return dynamic_cast< ::Log_Msg_Criterion * > (v);
}

const char *
Log_Msg_Criterion::_tao_obv_repository_id (void) const
{
  return this->_tao_obv_static_repository_id ();
}

void
Log_Msg_Criterion::_tao_obv_truncatable_repo_ids (Repository_Id_List& ids) const
{
  ids.push_back (this->_tao_obv_static_repository_id ());
}

// TAO extension - the virtual _type method.
::CORBA::TypeCode_ptr Log_Msg_Criterion::_tao_type (void) const
{
  return ::_tc_Log_Msg_Criterion;
}

Log_Msg_Criterion::~Log_Msg_Criterion (void)
{}

::CORBA::Boolean
Log_Msg_Criterion::_tao_marshal_v (TAO_OutputCDR & strm) const
{
  TAO_ChunkInfo ci (this->is_truncatable_ || this->chunking_);
  return this->_tao_marshal__Log_Msg_Criterion (strm, ci);
}

::CORBA::Boolean
Log_Msg_Criterion::_tao_unmarshal_v (TAO_InputCDR & strm)
{
  TAO_ChunkInfo ci (this->is_truncatable_ || this->chunking_, 1);
  return this->_tao_unmarshal__Log_Msg_Criterion (strm,ci);
}

::CORBA::Boolean
Log_Msg_Criterion::_tao_match_formal_type (ptrdiff_t formal_type_id) const
{
  return formal_type_id == reinterpret_cast<ptrdiff_t> (Log_Msg_Criterion::_downcast);
}

::CORBA::Boolean
Log_Msg_Criterion::_tao_unmarshal (
    TAO_InputCDR &strm,
    Log_Msg_Criterion *&new_object
  )
{
  ::CORBA::ValueBase *base = 0;
  ::CORBA::Boolean is_indirected = false;
  ::CORBA::Boolean is_null_object = false;
  ::CORBA::Boolean const retval =
    ::CORBA::ValueBase::_tao_unmarshal_pre (
        strm,
        base,
        Log_Msg_Criterion::_tao_obv_static_repository_id (),
        is_null_object,
        is_indirected
      );

  ::CORBA::ValueBase_var owner (base);

  if (!retval)
    return false;

  if (is_null_object)
    return true;

  if (!is_indirected && !base->_tao_unmarshal_v (strm))
    return false;

  // Now base must point to the unmarshaled object.
  // Align the pointer to the right subobject.
  new_object = Log_Msg_Criterion::_downcast (base);
  if (0 == new_object)
    return false;

  if (is_indirected)
    new_object->_add_ref ();

  owner._retn ();
  return true;
}

// TAO_IDL - Generated from
// be/be_visitor_typecode/value_typecode.cpp:65

static TAO::TypeCode::Value_Field<char const *, ::CORBA::TypeCode_ptr const *> const _tao_fields_Criterion_List[] =
  {
    { "my_list", &_tc_Event_List, ::CORBA::PUBLIC_MEMBER }

  };
static TAO::TypeCode::Value<char const *,
                     ::CORBA::TypeCode_ptr const *,
                     TAO::TypeCode::Value_Field<char const *, ::CORBA::TypeCode_ptr const *> const *,
                     TAO::Null_RefCount_Policy>
  _tao_tc_Criterion_List (
    ::CORBA::tk_value,
    "IDL:Criterion_List:1.0",
    "Criterion_List",
    ::CORBA::VM_NONE,
    &::CORBA::_tc_null,
    _tao_fields_Criterion_List,
    1);

::CORBA::TypeCode_ptr const _tc_Criterion_List =
  &_tao_tc_Criterion_List;

// TAO_IDL - Generated from
// be/be_visitor_valuetype/valuetype_cs.cpp:53

void
TAO::Value_Traits<Criterion_List>::add_ref (
    Criterion_List * p)
{
  ::CORBA::add_ref (p);
}

void
TAO::Value_Traits<Criterion_List>::remove_ref (
    Criterion_List * p)
{
  ::CORBA::remove_ref (p);
}

void
TAO::Value_Traits<Criterion_List>::release (
    Criterion_List * p)
{
  ::CORBA::remove_ref (p);
}

Criterion_List *
Criterion_List::_downcast ( ::CORBA::ValueBase *v)
{
  return dynamic_cast< ::Criterion_List * > (v);
}

const char *
Criterion_List::_tao_obv_repository_id (void) const
{
  return this->_tao_obv_static_repository_id ();
}

void
Criterion_List::_tao_obv_truncatable_repo_ids (Repository_Id_List& ids) const
{
  ids.push_back (this->_tao_obv_static_repository_id ());
}

// TAO extension - the virtual _type method.
::CORBA::TypeCode_ptr Criterion_List::_tao_type (void) const
{
  return ::_tc_Criterion_List;
}

Criterion_List::~Criterion_List (void)
{}

::CORBA::Boolean
Criterion_List::_tao_marshal_v (TAO_OutputCDR & strm) const
{
  TAO_ChunkInfo ci (this->is_truncatable_ || this->chunking_);
  return this->_tao_marshal__Criterion_List (strm, ci);
}

::CORBA::Boolean
Criterion_List::_tao_unmarshal_v (TAO_InputCDR & strm)
{
  TAO_ChunkInfo ci (this->is_truncatable_ || this->chunking_, 1);
  return this->_tao_unmarshal__Criterion_List (strm,ci);
}

::CORBA::Boolean
Criterion_List::_tao_match_formal_type (ptrdiff_t formal_type_id) const
{
  return formal_type_id == reinterpret_cast<ptrdiff_t> (Criterion_List::_downcast);
}

::CORBA::Boolean
Criterion_List::_tao_unmarshal (
    TAO_InputCDR &strm,
    Criterion_List *&new_object
  )
{
  ::CORBA::ValueBase *base = 0;
  ::CORBA::Boolean is_indirected = false;
  ::CORBA::Boolean is_null_object = false;
  ::CORBA::Boolean const retval =
    ::CORBA::ValueBase::_tao_unmarshal_pre (
        strm,
        base,
        Criterion_List::_tao_obv_static_repository_id (),
        is_null_object,
        is_indirected
      );

  ::CORBA::ValueBase_var owner (base);

  if (!retval)
    return false;

  if (is_null_object)
    return true;

  if (!is_indirected && !base->_tao_unmarshal_v (strm))
    return false;

  // Now base must point to the unmarshaled object.
  // Align the pointer to the right subobject.
  new_object = Criterion_List::_downcast (base);
  if (0 == new_object)
    return false;

  if (is_indirected)
    new_object->_add_ref ();

  owner._retn ();
  return true;
}

// TAO_IDL - Generated from
// be/be_visitor_valuetype/valuetype_obv_cs.cpp:44

OBV_Event::OBV_Event (void)
: require_truncation_ (false)
{}

OBV_Event::OBV_Event (
    ::CORBA::Long _tao_init_time_,
    ::CORBA::ULong _tao_init_origin_id_)
: require_truncation_ (false)
{
  time_ (_tao_init_time_);
  origin_id_ (_tao_init_origin_id_);
}

OBV_Event::~OBV_Event (void)
{}

::CORBA::Boolean
OBV_Event::_tao_marshal__Event (TAO_OutputCDR &strm, TAO_ChunkInfo& ci) const
{
  return _tao_marshal_state (strm, ci);
}

::CORBA::Boolean
OBV_Event::_tao_unmarshal__Event (TAO_InputCDR &strm, TAO_ChunkInfo& ci)
{
  return _tao_unmarshal_state (strm, ci);
}

// TAO_IDL - Generated from
// be/be_visitor_valuetype/field_cs.cpp:587

/// Accessor to set the member.
void
OBV_Event::time_ (const CORBA::Long val)
{
  // Set the value.
  this->_pd_time_ = val;
}

// Retrieve the member
::CORBA::Long
OBV_Event::time_ (void) const
{
  return this->_pd_time_;
}

// TAO_IDL - Generated from
// be/be_visitor_valuetype/field_cs.cpp:587

/// Accessor to set the member.
void
OBV_Event::origin_id_ (const CORBA::ULong val)
{
  // Set the value.
  this->_pd_origin_id_ = val;
}

// Retrieve the member
::CORBA::ULong
OBV_Event::origin_id_ (void) const
{
  return this->_pd_origin_id_;
}

// TAO_IDL - Generated from
// be/be_visitor_valuetype/valuetype_obv_cs.cpp:44

OBV_Temperature::OBV_Temperature (void)
: require_truncation_ (false)
{}

OBV_Temperature::OBV_Temperature (
    ::CORBA::Long _tao_init_time_,
    ::CORBA::ULong _tao_init_origin_id_,
    ::CORBA::Float _tao_init_temperature_)
: require_truncation_ (false)
{
  time_ (_tao_init_time_);
  origin_id_ (_tao_init_origin_id_);
  temperature_ (_tao_init_temperature_);
}

OBV_Temperature::~OBV_Temperature (void)
{}

::CORBA::Boolean
OBV_Temperature::_tao_marshal__Temperature (TAO_OutputCDR &strm, TAO_ChunkInfo& ci) const
{
  return _tao_marshal_state (strm, ci);
}

::CORBA::Boolean
OBV_Temperature::_tao_unmarshal__Temperature (TAO_InputCDR &strm, TAO_ChunkInfo& ci)
{
  return _tao_unmarshal_state (strm, ci);
}

// TAO_IDL - Generated from
// be/be_visitor_valuetype/field_cs.cpp:587

/// Accessor to set the member.
void
OBV_Temperature::temperature_ (const CORBA::Float val)
{
  // Set the value.
  this->_pd_temperature_ = val;
}

// Retrieve the member
::CORBA::Float
OBV_Temperature::temperature_ (void) const
{
  return this->_pd_temperature_;
}

// TAO_IDL - Generated from
// be/be_visitor_valuetype/valuetype_obv_cs.cpp:44

OBV_Position::OBV_Position (void)
: require_truncation_ (false)
{}

OBV_Position::OBV_Position (
    ::CORBA::Long _tao_init_time_,
    ::CORBA::ULong _tao_init_origin_id_,
    const ::Point _tao_init_xyz)
: require_truncation_ (false)
{
  time_ (_tao_init_time_);
  origin_id_ (_tao_init_origin_id_);
  xyz (_tao_init_xyz);
}

OBV_Position::~OBV_Position (void)
{}

::CORBA::Boolean
OBV_Position::_tao_marshal__Position (TAO_OutputCDR &strm, TAO_ChunkInfo& ci) const
{
  return _tao_marshal_state (strm, ci);
}

::CORBA::Boolean
OBV_Position::_tao_unmarshal__Position (TAO_InputCDR &strm, TAO_ChunkInfo& ci)
{
  return _tao_unmarshal_state (strm, ci);
}

// TAO_IDL - Generated from
// be/be_visitor_valuetype/field_cs.cpp:142

/// Accessor to set the member.
void
OBV_Position::xyz (const Point val)
{
  Point_copy (_pd_xyz, val);
}
/// Retrieve the member.
const Point_slice *
OBV_Position::xyz (void) const
{
  return this->_pd_xyz;
}

/// Retrieve the member.
Point_slice *
OBV_Position::xyz (void)
{
  return this->_pd_xyz;
}

// TAO_IDL - Generated from
// be/be_visitor_valuetype/valuetype_obv_cs.cpp:44

OBV_Log_Msg::OBV_Log_Msg (void)
: require_truncation_ (false)
{}

OBV_Log_Msg::OBV_Log_Msg (
    ::CORBA::Long _tao_init_time_,
    ::CORBA::ULong _tao_init_origin_id_,
    ::CORBA::Short _tao_init_urgency,
    const char * _tao_init_message)
: require_truncation_ (false)
{
  time_ (_tao_init_time_);
  origin_id_ (_tao_init_origin_id_);
  urgency (_tao_init_urgency);
  message (_tao_init_message);
}

OBV_Log_Msg::~OBV_Log_Msg (void)
{}

::CORBA::Boolean
OBV_Log_Msg::_tao_marshal__Log_Msg (TAO_OutputCDR &strm, TAO_ChunkInfo& ci) const
{
  return _tao_marshal_state (strm, ci);
}

::CORBA::Boolean
OBV_Log_Msg::_tao_unmarshal__Log_Msg (TAO_InputCDR &strm, TAO_ChunkInfo& ci)
{
  return _tao_unmarshal_state (strm, ci);
}

// TAO_IDL - Generated from
// be/be_visitor_valuetype/field_cs.cpp:587

/// Accessor to set the member.
void
OBV_Log_Msg::urgency (const CORBA::Short val)
{
  // Set the value.
  this->_pd_urgency = val;
}

// Retrieve the member
::CORBA::Short
OBV_Log_Msg::urgency (void) const
{
  return this->_pd_urgency;
}

// TAO_IDL - Generated from
// be/be_visitor_valuetype/field_cs.cpp:834

/// Accessor to set the member.
void
OBV_Log_Msg::message (char *val)
{
  this->_pd_message = (val);
}

/// Accessor to set the member.
void
OBV_Log_Msg::message (const char *val)
{
  // Set the value.
  this->_pd_message = ::CORBA::string_dup (val);
}

/// Accessor to set the member.
void
OBV_Log_Msg::message (const ::CORBA::String_var &val)
{
  ::CORBA::String_var message_var = val;
  this->_pd_message = message_var._retn ();
}

const char *
OBV_Log_Msg::message (void) const // get method
{
  return this->_pd_message;
}

// TAO_IDL - Generated from
// be/be_visitor_valuetype/valuetype_obv_cs.cpp:44

OBV_Event_List_Link::OBV_Event_List_Link (void)
: require_truncation_ (false)
{}

OBV_Event_List_Link::OBV_Event_List_Link (
    ::Event * _tao_init_my_event,
    ::Event_List_Link * _tao_init_next)
: require_truncation_ (false)
{
  my_event (_tao_init_my_event);
  next (_tao_init_next);
}

OBV_Event_List_Link::~OBV_Event_List_Link (void)
{}

::CORBA::Boolean
OBV_Event_List_Link::_tao_marshal__Event_List_Link (TAO_OutputCDR &strm, TAO_ChunkInfo& ci) const
{
  return _tao_marshal_state (strm, ci);
}

::CORBA::Boolean
OBV_Event_List_Link::_tao_unmarshal__Event_List_Link (TAO_InputCDR &strm, TAO_ChunkInfo& ci)
{
  return _tao_unmarshal_state (strm, ci);
}

// TAO_IDL - Generated from
// be/be_visitor_valuetype/field_cs.cpp:430

/// Accessor to set the member.
void
OBV_Event_List_Link::my_event (Event* val)
{
  ::CORBA::add_ref (val);
  this->_pd_my_event = val;
}

/// Retrieve the member
Event *
OBV_Event_List_Link::my_event () const
{
  return this->_pd_my_event.in ();
}

// TAO_IDL - Generated from
// be/be_visitor_valuetype/field_cs.cpp:430

/// Accessor to set the member.
void
OBV_Event_List_Link::next (Event_List_Link* val)
{
  ::CORBA::add_ref (val);
  this->_pd_next = val;
}

/// Retrieve the member
Event_List_Link *
OBV_Event_List_Link::next () const
{
  return this->_pd_next.in ();
}

// TAO_IDL - Generated from
// be/be_visitor_valuetype/valuetype_obv_cs.cpp:44

OBV_Event_List::OBV_Event_List (void)
: require_truncation_ (false)
{}

OBV_Event_List::OBV_Event_List (
    ::Event_List_Link * _tao_init_first_link)
: require_truncation_ (false)
{
  first_link (_tao_init_first_link);
}

OBV_Event_List::~OBV_Event_List (void)
{}

::CORBA::Boolean
OBV_Event_List::_tao_marshal__Event_List (TAO_OutputCDR &strm, TAO_ChunkInfo& ci) const
{
  return _tao_marshal_state (strm, ci);
}

::CORBA::Boolean
OBV_Event_List::_tao_unmarshal__Event_List (TAO_InputCDR &strm, TAO_ChunkInfo& ci)
{
  return _tao_unmarshal_state (strm, ci);
}

// TAO_IDL - Generated from
// be/be_visitor_valuetype/field_cs.cpp:430

/// Accessor to set the member.
void
OBV_Event_List::first_link (Event_List_Link* val)
{
  ::CORBA::add_ref (val);
  this->_pd_first_link = val;
}

/// Retrieve the member
Event_List_Link *
OBV_Event_List::first_link () const
{
  return this->_pd_first_link.in ();
}

// TAO_IDL - Generated from
// be/be_visitor_valuetype/valuetype_obv_cs.cpp:44

OBV_Temperature_Criterion::OBV_Temperature_Criterion (void)
: require_truncation_ (false)
{}

OBV_Temperature_Criterion::OBV_Temperature_Criterion (
    ::CORBA::Long _tao_init_time_,
    ::CORBA::ULong _tao_init_origin_id_,
    ::Temperature * _tao_init_meltingpoint)
: require_truncation_ (false)
{
  time_ (_tao_init_time_);
  origin_id_ (_tao_init_origin_id_);
  meltingpoint (_tao_init_meltingpoint);
}

OBV_Temperature_Criterion::~OBV_Temperature_Criterion (void)
{}

::CORBA::Boolean
OBV_Temperature_Criterion::_tao_marshal__Temperature_Criterion (TAO_OutputCDR &strm, TAO_ChunkInfo& ci) const
{
  return _tao_marshal_state (strm, ci);
}

::CORBA::Boolean
OBV_Temperature_Criterion::_tao_unmarshal__Temperature_Criterion (TAO_InputCDR &strm, TAO_ChunkInfo& ci)
{
  return _tao_unmarshal_state (strm, ci);
}

// TAO_IDL - Generated from
// be/be_visitor_valuetype/field_cs.cpp:430

/// Accessor to set the member.
void
OBV_Temperature_Criterion::meltingpoint (Temperature* val)
{
  ::CORBA::add_ref (val);
  this->_pd_meltingpoint = val;
}

/// Retrieve the member
Temperature *
OBV_Temperature_Criterion::meltingpoint () const
{
  return this->_pd_meltingpoint.in ();
}

// TAO_IDL - Generated from
// be/be_visitor_valuetype/valuetype_obv_cs.cpp:44

OBV_Position_Criterion::OBV_Position_Criterion (void)
: require_truncation_ (false)
{}

OBV_Position_Criterion::OBV_Position_Criterion (
    ::CORBA::Long _tao_init_time_,
    ::CORBA::ULong _tao_init_origin_id_,
    ::Position * _tao_init_leftbottom,
    ::Position * _tao_init_topright)
: require_truncation_ (false)
{
  time_ (_tao_init_time_);
  origin_id_ (_tao_init_origin_id_);
  leftbottom (_tao_init_leftbottom);
  topright (_tao_init_topright);
}

OBV_Position_Criterion::~OBV_Position_Criterion (void)
{}

::CORBA::Boolean
OBV_Position_Criterion::_tao_marshal__Position_Criterion (TAO_OutputCDR &strm, TAO_ChunkInfo& ci) const
{
  return _tao_marshal_state (strm, ci);
}

::CORBA::Boolean
OBV_Position_Criterion::_tao_unmarshal__Position_Criterion (TAO_InputCDR &strm, TAO_ChunkInfo& ci)
{
  return _tao_unmarshal_state (strm, ci);
}

// TAO_IDL - Generated from
// be/be_visitor_valuetype/field_cs.cpp:430

/// Accessor to set the member.
void
OBV_Position_Criterion::leftbottom (Position* val)
{
  ::CORBA::add_ref (val);
  this->_pd_leftbottom = val;
}

/// Retrieve the member
Position *
OBV_Position_Criterion::leftbottom () const
{
  return this->_pd_leftbottom.in ();
}

// TAO_IDL - Generated from
// be/be_visitor_valuetype/field_cs.cpp:430

/// Accessor to set the member.
void
OBV_Position_Criterion::topright (Position* val)
{
  ::CORBA::add_ref (val);
  this->_pd_topright = val;
}

/// Retrieve the member
Position *
OBV_Position_Criterion::topright () const
{
  return this->_pd_topright.in ();
}

// TAO_IDL - Generated from
// be/be_visitor_valuetype/valuetype_obv_cs.cpp:44

OBV_Log_Msg_Criterion::OBV_Log_Msg_Criterion (void)
: require_truncation_ (false)
{}

OBV_Log_Msg_Criterion::OBV_Log_Msg_Criterion (
    ::CORBA::Long _tao_init_time_,
    ::CORBA::ULong _tao_init_origin_id_)
: require_truncation_ (false)
{
  time_ (_tao_init_time_);
  origin_id_ (_tao_init_origin_id_);
}

OBV_Log_Msg_Criterion::~OBV_Log_Msg_Criterion (void)
{}

::CORBA::Boolean
OBV_Log_Msg_Criterion::_tao_marshal__Log_Msg_Criterion (TAO_OutputCDR &strm, TAO_ChunkInfo& ci) const
{
  return _tao_marshal_state (strm, ci);
}

::CORBA::Boolean
OBV_Log_Msg_Criterion::_tao_unmarshal__Log_Msg_Criterion (TAO_InputCDR &strm, TAO_ChunkInfo& ci)
{
  return _tao_unmarshal_state (strm, ci);
}

// TAO_IDL - Generated from
// be/be_visitor_valuetype/valuetype_obv_cs.cpp:44

OBV_Criterion_List::OBV_Criterion_List (void)
: require_truncation_ (false)
{}

OBV_Criterion_List::OBV_Criterion_List (
    ::Event_List * _tao_init_my_list)
: require_truncation_ (false)
{
  my_list (_tao_init_my_list);
}

OBV_Criterion_List::~OBV_Criterion_List (void)
{}

::CORBA::Boolean
OBV_Criterion_List::_tao_marshal__Criterion_List (TAO_OutputCDR &strm, TAO_ChunkInfo& ci) const
{
  return _tao_marshal_state (strm, ci);
}

::CORBA::Boolean
OBV_Criterion_List::_tao_unmarshal__Criterion_List (TAO_InputCDR &strm, TAO_ChunkInfo& ci)
{
  return _tao_unmarshal_state (strm, ci);
}

// TAO_IDL - Generated from
// be/be_visitor_valuetype/field_cs.cpp:430

/// Accessor to set the member.
void
OBV_Criterion_List::my_list (Event_List* val)
{
  ::CORBA::add_ref (val);
  this->_pd_my_list = val;
}

/// Retrieve the member
Event_List *
OBV_Criterion_List::my_list () const
{
  return this->_pd_my_list.in ();
}

// TAO_IDL - Generated from
// be/be_valuetype.cpp:512

void
CORBA::add_ref (Event * vt)
{
  if (vt != 0)
    {
      vt->_add_ref ();
    }
}

void
CORBA::remove_ref (Event * vt)
{
  if (vt != 0)
    {
      vt->_remove_ref ();
    }
}

// TAO_IDL - Generated from
// be/be_visitor_valuetype/cdr_op_cs.cpp:60


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean
operator<< (
    TAO_OutputCDR &strm,
    const Event *_tao_valuetype
  )
{
  return
    ::CORBA::ValueBase::_tao_marshal (
        strm,
        _tao_valuetype,
        reinterpret_cast<ptrdiff_t> (&Event::_downcast)
      );
}

::CORBA::Boolean
operator>> (
    TAO_InputCDR &strm,
    Event *&_tao_valuetype
  )
{
  return Event::_tao_unmarshal (strm, _tao_valuetype);
}


TAO_END_VERSIONED_NAMESPACE_DECL

// TAO_IDL - Generated from
// be/be_visitor_valuetype/marshal_cs.cpp:33

::CORBA::Boolean
OBV_Event::_tao_marshal_state (TAO_OutputCDR &strm, TAO_ChunkInfo&ci) const
{
  if (! ci.start_chunk (strm))
    return false;

  CORBA::Boolean const ret =
      (strm << _pd_time_) &&
      (strm << _pd_origin_id_);
  if ( ! ret)
    return false;

  if (! ci.end_chunk (strm))
    return false;

  return true;
}

::CORBA::Boolean
OBV_Event::_tao_unmarshal_state (TAO_InputCDR &strm, TAO_ChunkInfo&ci)
{
  if (!ci.handle_chunking (strm))
    return false;

  CORBA::Boolean const ret =
      (strm >> _pd_time_) &&
      (strm >> _pd_origin_id_);
  if (!ret)
    return false;

  if (this->require_truncation_)
    return ci.skip_chunks (strm);

  else
    return ci.handle_chunking (strm);


}

void
OBV_Event::truncation_hook (void)
{
  this->require_truncation_ = true;
}



// TAO_IDL - Generated from
// be/be_valuetype.cpp:512

void
CORBA::add_ref (Temperature * vt)
{
  if (vt != 0)
    {
      vt->_add_ref ();
    }
}

void
CORBA::remove_ref (Temperature * vt)
{
  if (vt != 0)
    {
      vt->_remove_ref ();
    }
}

// TAO_IDL - Generated from
// be/be_visitor_valuetype/cdr_op_cs.cpp:60


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean
operator<< (
    TAO_OutputCDR &strm,
    const Temperature *_tao_valuetype
  )
{
  return
    ::CORBA::ValueBase::_tao_marshal (
        strm,
        _tao_valuetype,
        reinterpret_cast<ptrdiff_t> (&Temperature::_downcast)
      );
}

::CORBA::Boolean
operator>> (
    TAO_InputCDR &strm,
    Temperature *&_tao_valuetype
  )
{
  return Temperature::_tao_unmarshal (strm, _tao_valuetype);
}


TAO_END_VERSIONED_NAMESPACE_DECL

// TAO_IDL - Generated from
// be/be_visitor_valuetype/marshal_cs.cpp:33

::CORBA::Boolean
OBV_Temperature::_tao_marshal_state (TAO_OutputCDR &strm, TAO_ChunkInfo&ci) const
{
  if (! ci.start_chunk (strm))
    return false;

  if (! this->_tao_marshal__Event (strm, ci))
    {
      return false;
    }

  if (! ci.start_chunk (strm))
    return false;

  CORBA::Boolean const ret =
      (strm << _pd_temperature_);
  if ( ! ret)
    return false;

  if (! ci.end_chunk (strm))
    return false;

  if (! ci.end_chunk (strm))
    return false;

  return true;
}

::CORBA::Boolean
OBV_Temperature::_tao_unmarshal_state (TAO_InputCDR &strm, TAO_ChunkInfo&ci)
{
  if (!ci.handle_chunking (strm))
    return false;

  if (!this->_tao_unmarshal__Event (strm, ci))
    {
      return false;
    }

  if (!ci.handle_chunking (strm))
    return false;

  CORBA::Boolean const ret =
      (strm >> _pd_temperature_);
  if (!ret)
    return false;

  if (this->require_truncation_)
    return ci.skip_chunks (strm);

  else
    return ci.handle_chunking (strm);


}

void
OBV_Temperature::truncation_hook (void)
{
  this->require_truncation_ = true;
}



// TAO_IDL - Generated from
// be/be_visitor_array/cdr_op_cs.cpp:163


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Point_forany &_tao_array)
{
  return
    strm.write_float_array (
        reinterpret_cast <const ACE_CDR::Float *> (_tao_array.in ()),
        3);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Point_forany &_tao_array)
{
  return
    strm.read_float_array (
        reinterpret_cast <ACE_CDR::Float *> (_tao_array.out ()),
        3);
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_valuetype.cpp:512

void
CORBA::add_ref (Position * vt)
{
  if (vt != 0)
    {
      vt->_add_ref ();
    }
}

void
CORBA::remove_ref (Position * vt)
{
  if (vt != 0)
    {
      vt->_remove_ref ();
    }
}

// TAO_IDL - Generated from
// be/be_visitor_valuetype/cdr_op_cs.cpp:60


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean
operator<< (
    TAO_OutputCDR &strm,
    const Position *_tao_valuetype
  )
{
  return
    ::CORBA::ValueBase::_tao_marshal (
        strm,
        _tao_valuetype,
        reinterpret_cast<ptrdiff_t> (&Position::_downcast)
      );
}

::CORBA::Boolean
operator>> (
    TAO_InputCDR &strm,
    Position *&_tao_valuetype
  )
{
  return Position::_tao_unmarshal (strm, _tao_valuetype);
}


TAO_END_VERSIONED_NAMESPACE_DECL

// TAO_IDL - Generated from
// be/be_visitor_valuetype/marshal_cs.cpp:33

::CORBA::Boolean
OBV_Position::_tao_marshal_state (TAO_OutputCDR &strm, TAO_ChunkInfo&ci) const
{
  if (! ci.start_chunk (strm))
    return false;

  if (! this->_tao_marshal__Event (strm, ci))
    {
      return false;
    }

  Point_forany _tao__pd_xyz
      (const_cast<
          Point_slice*> (
          _pd_xyz
        )
    );
  if (! ci.start_chunk (strm))
    return false;

  CORBA::Boolean const ret =
      (strm << _tao__pd_xyz);
  if ( ! ret)
    return false;

  if (! ci.end_chunk (strm))
    return false;

  if (! ci.end_chunk (strm))
    return false;

  return true;
}

::CORBA::Boolean
OBV_Position::_tao_unmarshal_state (TAO_InputCDR &strm, TAO_ChunkInfo&ci)
{
  if (!ci.handle_chunking (strm))
    return false;

  if (!this->_tao_unmarshal__Event (strm, ci))
    {
      return false;
    }

  Point_forany _tao__pd_xyz
      (const_cast<
          Point_slice*> (
          _pd_xyz
        )
    );
  if (!ci.handle_chunking (strm))
    return false;

  CORBA::Boolean const ret =
      (strm >> _tao__pd_xyz);
  if (!ret)
    return false;

  if (this->require_truncation_)
    return ci.skip_chunks (strm);

  else
    return ci.handle_chunking (strm);


}

void
OBV_Position::truncation_hook (void)
{
  this->require_truncation_ = true;
}



// TAO_IDL - Generated from
// be/be_valuetype.cpp:512

void
CORBA::add_ref (Log_Msg * vt)
{
  if (vt != 0)
    {
      vt->_add_ref ();
    }
}

void
CORBA::remove_ref (Log_Msg * vt)
{
  if (vt != 0)
    {
      vt->_remove_ref ();
    }
}

// TAO_IDL - Generated from
// be/be_visitor_valuetype/cdr_op_cs.cpp:60


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean
operator<< (
    TAO_OutputCDR &strm,
    const Log_Msg *_tao_valuetype
  )
{
  return
    ::CORBA::ValueBase::_tao_marshal (
        strm,
        _tao_valuetype,
        reinterpret_cast<ptrdiff_t> (&Log_Msg::_downcast)
      );
}

::CORBA::Boolean
operator>> (
    TAO_InputCDR &strm,
    Log_Msg *&_tao_valuetype
  )
{
  return Log_Msg::_tao_unmarshal (strm, _tao_valuetype);
}


TAO_END_VERSIONED_NAMESPACE_DECL

// TAO_IDL - Generated from
// be/be_visitor_valuetype/marshal_cs.cpp:33

::CORBA::Boolean
OBV_Log_Msg::_tao_marshal_state (TAO_OutputCDR &strm, TAO_ChunkInfo&ci) const
{
  if (! ci.start_chunk (strm))
    return false;

  if (! this->_tao_marshal__Event (strm, ci))
    {
      return false;
    }

  if (! ci.start_chunk (strm))
    return false;

  CORBA::Boolean const ret =
      (strm << _pd_urgency) &&
      (strm << _pd_message.in ());
  if ( ! ret)
    return false;

  if (! ci.end_chunk (strm))
    return false;

  if (! ci.end_chunk (strm))
    return false;

  return true;
}

::CORBA::Boolean
OBV_Log_Msg::_tao_unmarshal_state (TAO_InputCDR &strm, TAO_ChunkInfo&ci)
{
  if (!ci.handle_chunking (strm))
    return false;

  if (!this->_tao_unmarshal__Event (strm, ci))
    {
      return false;
    }

  if (!ci.handle_chunking (strm))
    return false;

  CORBA::Boolean const ret =
      (strm >> _pd_urgency) &&
      (strm >> _pd_message.out ());
  if (!ret)
    return false;

  if (this->require_truncation_)
    return ci.skip_chunks (strm);

  else
    return ci.handle_chunking (strm);


}

void
OBV_Log_Msg::truncation_hook (void)
{
  this->require_truncation_ = true;
}



// TAO_IDL - Generated from
// be/be_valuetype.cpp:512

void
CORBA::add_ref (Event_List_Link * vt)
{
  if (vt != 0)
    {
      vt->_add_ref ();
    }
}

void
CORBA::remove_ref (Event_List_Link * vt)
{
  if (vt != 0)
    {
      vt->_remove_ref ();
    }
}

// TAO_IDL - Generated from
// be/be_visitor_valuetype/cdr_op_cs.cpp:60


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean
operator<< (
    TAO_OutputCDR &strm,
    const Event_List_Link *_tao_valuetype
  )
{
  return
    ::CORBA::ValueBase::_tao_marshal (
        strm,
        _tao_valuetype,
        reinterpret_cast<ptrdiff_t> (&Event_List_Link::_downcast)
      );
}

::CORBA::Boolean
operator>> (
    TAO_InputCDR &strm,
    Event_List_Link *&_tao_valuetype
  )
{
  return Event_List_Link::_tao_unmarshal (strm, _tao_valuetype);
}


TAO_END_VERSIONED_NAMESPACE_DECL

// TAO_IDL - Generated from
// be/be_visitor_valuetype/marshal_cs.cpp:33

::CORBA::Boolean
OBV_Event_List_Link::_tao_marshal_state (TAO_OutputCDR &strm, TAO_ChunkInfo&ci) const
{
  if (! ci.start_chunk (strm))
    return false;

  CORBA::Boolean const ret =
      (strm << _pd_my_event.in ()) &&
      (strm << _pd_next.in ());
  if ( ! ret)
    return false;

  if (! ci.end_chunk (strm))
    return false;

  return true;
}

::CORBA::Boolean
OBV_Event_List_Link::_tao_unmarshal_state (TAO_InputCDR &strm, TAO_ChunkInfo&ci)
{
  if (!ci.handle_chunking (strm))
    return false;

  CORBA::Boolean const ret =
      (strm >> _pd_my_event.out ()) &&
      (strm >> _pd_next.out ());
  if (!ret)
    return false;

  if (this->require_truncation_)
    return ci.skip_chunks (strm);

  else
    return ci.handle_chunking (strm);


}

void
OBV_Event_List_Link::truncation_hook (void)
{
  this->require_truncation_ = true;
}



// TAO_IDL - Generated from
// be/be_valuetype.cpp:512

void
CORBA::add_ref (Event_List * vt)
{
  if (vt != 0)
    {
      vt->_add_ref ();
    }
}

void
CORBA::remove_ref (Event_List * vt)
{
  if (vt != 0)
    {
      vt->_remove_ref ();
    }
}

// TAO_IDL - Generated from
// be/be_visitor_valuetype/cdr_op_cs.cpp:60


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean
operator<< (
    TAO_OutputCDR &strm,
    const Event_List *_tao_valuetype
  )
{
  return
    ::CORBA::ValueBase::_tao_marshal (
        strm,
        _tao_valuetype,
        reinterpret_cast<ptrdiff_t> (&Event_List::_downcast)
      );
}

::CORBA::Boolean
operator>> (
    TAO_InputCDR &strm,
    Event_List *&_tao_valuetype
  )
{
  return Event_List::_tao_unmarshal (strm, _tao_valuetype);
}


TAO_END_VERSIONED_NAMESPACE_DECL

// TAO_IDL - Generated from
// be/be_visitor_valuetype/marshal_cs.cpp:33

::CORBA::Boolean
OBV_Event_List::_tao_marshal_state (TAO_OutputCDR &strm, TAO_ChunkInfo&ci) const
{
  if (! ci.start_chunk (strm))
    return false;

  CORBA::Boolean const ret =
      (strm << _pd_first_link.in ());
  if ( ! ret)
    return false;

  if (! ci.end_chunk (strm))
    return false;

  return true;
}

::CORBA::Boolean
OBV_Event_List::_tao_unmarshal_state (TAO_InputCDR &strm, TAO_ChunkInfo&ci)
{
  if (!ci.handle_chunking (strm))
    return false;

  CORBA::Boolean const ret =
      (strm >> _pd_first_link.out ());
  if (!ret)
    return false;

  if (this->require_truncation_)
    return ci.skip_chunks (strm);

  else
    return ci.handle_chunking (strm);


}

void
OBV_Event_List::truncation_hook (void)
{
  this->require_truncation_ = true;
}



// TAO_IDL - Generated from
// be/be_visitor_interface/cdr_op_cs.cpp:51

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Checkpoint_ptr _tao_objref)
{
  ::CORBA::Object_ptr _tao_corba_obj = _tao_objref;
  return (strm << _tao_corba_obj);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Checkpoint_ptr &_tao_objref)
{
  ::CORBA::Object_var obj;

  if (!(strm >> obj.inout ()))
    {
      return false;
    }

  typedef ::Checkpoint RHS_SCOPED_NAME;

  // Narrow to the right type.
  _tao_objref =
    TAO::Narrow_Utils<RHS_SCOPED_NAME>::unchecked_narrow (obj.in ());

  return true;
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_valuetype.cpp:512

void
CORBA::add_ref (Criterion * vt)
{
  if (vt != 0)
    {
      vt->_add_ref ();
    }
}

void
CORBA::remove_ref (Criterion * vt)
{
  if (vt != 0)
    {
      vt->_remove_ref ();
    }
}

// TAO_IDL - Generated from
// be/be_visitor_valuetype/cdr_op_cs.cpp:60


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean
operator<< (
    TAO_OutputCDR &strm,
    const Criterion *_tao_valuetype
  )
{
  return
    ::CORBA::ValueBase::_tao_marshal (
        strm,
        _tao_valuetype,
        reinterpret_cast<ptrdiff_t> (&Criterion::_downcast)
      );
}

::CORBA::Boolean
operator>> (
    TAO_InputCDR &strm,
    Criterion *&_tao_valuetype
  )
{
  return Criterion::_tao_unmarshal (strm, _tao_valuetype);
}


TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_valuetype.cpp:512

void
CORBA::add_ref (Temperature_Criterion * vt)
{
  if (vt != 0)
    {
      vt->_add_ref ();
    }
}

void
CORBA::remove_ref (Temperature_Criterion * vt)
{
  if (vt != 0)
    {
      vt->_remove_ref ();
    }
}

// TAO_IDL - Generated from
// be/be_visitor_valuetype/cdr_op_cs.cpp:60


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean
operator<< (
    TAO_OutputCDR &strm,
    const Temperature_Criterion *_tao_valuetype
  )
{
  return
    ::CORBA::ValueBase::_tao_marshal (
        strm,
        _tao_valuetype,
        reinterpret_cast<ptrdiff_t> (&Temperature_Criterion::_downcast)
      );
}

::CORBA::Boolean
operator>> (
    TAO_InputCDR &strm,
    Temperature_Criterion *&_tao_valuetype
  )
{
  return Temperature_Criterion::_tao_unmarshal (strm, _tao_valuetype);
}


TAO_END_VERSIONED_NAMESPACE_DECL

// TAO_IDL - Generated from
// be/be_visitor_valuetype/marshal_cs.cpp:33

::CORBA::Boolean
OBV_Temperature_Criterion::_tao_marshal_state (TAO_OutputCDR &strm, TAO_ChunkInfo&ci) const
{
  if (! ci.start_chunk (strm))
    return false;

  if (! this->_tao_marshal__Event (strm, ci))
    {
      return false;
    }

  if (! ci.start_chunk (strm))
    return false;

  CORBA::Boolean const ret =
      (strm << _pd_meltingpoint.in ());
  if ( ! ret)
    return false;

  if (! ci.end_chunk (strm))
    return false;

  if (! ci.end_chunk (strm))
    return false;

  return true;
}

::CORBA::Boolean
OBV_Temperature_Criterion::_tao_unmarshal_state (TAO_InputCDR &strm, TAO_ChunkInfo&ci)
{
  if (!ci.handle_chunking (strm))
    return false;

  if (!this->_tao_unmarshal__Event (strm, ci))
    {
      return false;
    }

  if (!ci.handle_chunking (strm))
    return false;

  CORBA::Boolean const ret =
      (strm >> _pd_meltingpoint.out ());
  if (!ret)
    return false;

  if (this->require_truncation_)
    return ci.skip_chunks (strm);

  else
    return ci.handle_chunking (strm);


}

void
OBV_Temperature_Criterion::truncation_hook (void)
{
  this->require_truncation_ = true;
}



// TAO_IDL - Generated from
// be/be_valuetype.cpp:512

void
CORBA::add_ref (Position_Criterion * vt)
{
  if (vt != 0)
    {
      vt->_add_ref ();
    }
}

void
CORBA::remove_ref (Position_Criterion * vt)
{
  if (vt != 0)
    {
      vt->_remove_ref ();
    }
}

// TAO_IDL - Generated from
// be/be_visitor_valuetype/cdr_op_cs.cpp:60


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean
operator<< (
    TAO_OutputCDR &strm,
    const Position_Criterion *_tao_valuetype
  )
{
  return
    ::CORBA::ValueBase::_tao_marshal (
        strm,
        _tao_valuetype,
        reinterpret_cast<ptrdiff_t> (&Position_Criterion::_downcast)
      );
}

::CORBA::Boolean
operator>> (
    TAO_InputCDR &strm,
    Position_Criterion *&_tao_valuetype
  )
{
  return Position_Criterion::_tao_unmarshal (strm, _tao_valuetype);
}


TAO_END_VERSIONED_NAMESPACE_DECL

// TAO_IDL - Generated from
// be/be_visitor_valuetype/marshal_cs.cpp:33

::CORBA::Boolean
OBV_Position_Criterion::_tao_marshal_state (TAO_OutputCDR &strm, TAO_ChunkInfo&ci) const
{
  if (! ci.start_chunk (strm))
    return false;

  if (! this->_tao_marshal__Event (strm, ci))
    {
      return false;
    }

  if (! ci.start_chunk (strm))
    return false;

  CORBA::Boolean const ret =
      (strm << _pd_leftbottom.in ()) &&
      (strm << _pd_topright.in ());
  if ( ! ret)
    return false;

  if (! ci.end_chunk (strm))
    return false;

  if (! ci.end_chunk (strm))
    return false;

  return true;
}

::CORBA::Boolean
OBV_Position_Criterion::_tao_unmarshal_state (TAO_InputCDR &strm, TAO_ChunkInfo&ci)
{
  if (!ci.handle_chunking (strm))
    return false;

  if (!this->_tao_unmarshal__Event (strm, ci))
    {
      return false;
    }

  if (!ci.handle_chunking (strm))
    return false;

  CORBA::Boolean const ret =
      (strm >> _pd_leftbottom.out ()) &&
      (strm >> _pd_topright.out ());
  if (!ret)
    return false;

  if (this->require_truncation_)
    return ci.skip_chunks (strm);

  else
    return ci.handle_chunking (strm);


}

void
OBV_Position_Criterion::truncation_hook (void)
{
  this->require_truncation_ = true;
}



// TAO_IDL - Generated from
// be/be_valuetype.cpp:512

void
CORBA::add_ref (Log_Msg_Criterion * vt)
{
  if (vt != 0)
    {
      vt->_add_ref ();
    }
}

void
CORBA::remove_ref (Log_Msg_Criterion * vt)
{
  if (vt != 0)
    {
      vt->_remove_ref ();
    }
}

// TAO_IDL - Generated from
// be/be_visitor_valuetype/cdr_op_cs.cpp:60


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean
operator<< (
    TAO_OutputCDR &strm,
    const Log_Msg_Criterion *_tao_valuetype
  )
{
  return
    ::CORBA::ValueBase::_tao_marshal (
        strm,
        _tao_valuetype,
        reinterpret_cast<ptrdiff_t> (&Log_Msg_Criterion::_downcast)
      );
}

::CORBA::Boolean
operator>> (
    TAO_InputCDR &strm,
    Log_Msg_Criterion *&_tao_valuetype
  )
{
  return Log_Msg_Criterion::_tao_unmarshal (strm, _tao_valuetype);
}


TAO_END_VERSIONED_NAMESPACE_DECL

// TAO_IDL - Generated from
// be/be_visitor_valuetype/marshal_cs.cpp:33

::CORBA::Boolean
OBV_Log_Msg_Criterion::_tao_marshal_state (TAO_OutputCDR &strm, TAO_ChunkInfo&ci) const
{
  if (! ci.start_chunk (strm))
    return false;

  if (! this->_tao_marshal__Event (strm, ci))
    {
      return false;
    }

  if (! ci.end_chunk (strm))
    return false;

  return true;
}

::CORBA::Boolean
OBV_Log_Msg_Criterion::_tao_unmarshal_state (TAO_InputCDR &strm, TAO_ChunkInfo&ci)
{
  if (!ci.handle_chunking (strm))
    return false;

  if (!this->_tao_unmarshal__Event (strm, ci))
    {
      return false;
    }

  return true;
}

void
OBV_Log_Msg_Criterion::truncation_hook (void)
{
  this->require_truncation_ = true;
}



// TAO_IDL - Generated from
// be/be_valuetype.cpp:512

void
CORBA::add_ref (Criterion_List * vt)
{
  if (vt != 0)
    {
      vt->_add_ref ();
    }
}

void
CORBA::remove_ref (Criterion_List * vt)
{
  if (vt != 0)
    {
      vt->_remove_ref ();
    }
}

// TAO_IDL - Generated from
// be/be_visitor_valuetype/cdr_op_cs.cpp:60


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean
operator<< (
    TAO_OutputCDR &strm,
    const Criterion_List *_tao_valuetype
  )
{
  return
    ::CORBA::ValueBase::_tao_marshal (
        strm,
        _tao_valuetype,
        reinterpret_cast<ptrdiff_t> (&Criterion_List::_downcast)
      );
}

::CORBA::Boolean
operator>> (
    TAO_InputCDR &strm,
    Criterion_List *&_tao_valuetype
  )
{
  return Criterion_List::_tao_unmarshal (strm, _tao_valuetype);
}


TAO_END_VERSIONED_NAMESPACE_DECL

// TAO_IDL - Generated from
// be/be_visitor_valuetype/marshal_cs.cpp:33

::CORBA::Boolean
OBV_Criterion_List::_tao_marshal_state (TAO_OutputCDR &strm, TAO_ChunkInfo&ci) const
{
  if (! ci.start_chunk (strm))
    return false;

  CORBA::Boolean const ret =
      (strm << _pd_my_list.in ());
  if ( ! ret)
    return false;

  if (! ci.end_chunk (strm))
    return false;

  return true;
}

::CORBA::Boolean
OBV_Criterion_List::_tao_unmarshal_state (TAO_InputCDR &strm, TAO_ChunkInfo&ci)
{
  if (!ci.handle_chunking (strm))
    return false;

  CORBA::Boolean const ret =
      (strm >> _pd_my_list.out ());
  if (!ret)
    return false;

  if (this->require_truncation_)
    return ci.skip_chunks (strm);

  else
    return ci.handle_chunking (strm);


}

void
OBV_Criterion_List::truncation_hook (void)
{
  this->require_truncation_ = true;
}



