// -*- C++ -*-
/**
 * Code generated by the The ACE ORB (TAO) IDL Compiler v2.4.1
 * TAO and the TAO IDL Compiler have been developed by:
 *       Center for Distributed Object Computing
 *       Washington University
 *       St. Louis, MO
 *       USA
 *       http://www.cs.wustl.edu/~schmidt/doc-center.html
 * and
 *       Distributed Object Computing Laboratory
 *       University of California at Irvine
 *       Irvine, CA
 *       USA
 * and
 *       Institute for Software Integrated Systems
 *       Vanderbilt University
 *       Nashville, TN
 *       USA
 *       http://www.isis.vanderbilt.edu/
 *
 * Information about TAO is available at:
 *     http://www.dre.vanderbilt.edu/~schmidt/TAO.html
 **/

// TAO_IDL - Generated from
// be/be_codegen.cpp:373


#include "Kokyu_qosC.h"
#include "tao/AnyTypeCode/Null_RefCount_Policy.h"
#include "tao/AnyTypeCode/TypeCode_Constants.h"
#include "tao/AnyTypeCode/Alias_TypeCode_Static.h"
#include "tao/AnyTypeCode/Sequence_TypeCode_Static.h"
#include "tao/AnyTypeCode/Struct_TypeCode_Static.h"
#include "tao/AnyTypeCode/TypeCode_Struct_Field.h"
#include "tao/CDR.h"
#include "tao/ORB_Core.h"
#include "tao/CDR.h"
#include "tao/AnyTypeCode/Any_Dual_Impl_T.h"

#if !defined (__ACE_INLINE__)
#include "Kokyu_qosC.inl"
#endif /* !defined INLINE */

// TAO_IDL - Generated from
// be/be_visitor_sequence/sequence_cs.cpp:70

#if !defined (_KOKYU_GUIDTYPE_CS_)
#define _KOKYU_GUIDTYPE_CS_

Kokyu::GuidType::GuidType (void)
{}

Kokyu::GuidType::GuidType (
    ::CORBA::ULong max)
  : ::TAO::unbounded_value_sequence<
        ::CORBA::Octet
      > (max)
{}

Kokyu::GuidType::GuidType (
    ::CORBA::ULong max,
    ::CORBA::ULong length,
    ::CORBA::Octet * buffer,
    ::CORBA::Boolean release
  )
  : ::TAO::unbounded_value_sequence<
        ::CORBA::Octet
      >
    (max, length, buffer, release)
{}

Kokyu::GuidType::GuidType (
    const GuidType &seq)
  : ::TAO::unbounded_value_sequence<
        ::CORBA::Octet
      > (seq)
{}

Kokyu::GuidType::~GuidType (void)
{}

void Kokyu::GuidType::_tao_any_destructor (
    void * _tao_void_pointer)
{
  GuidType * _tao_tmp_pointer =
    static_cast<GuidType *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

#endif /* end #if !defined */

// TAO_IDL - Generated from
// be/be_visitor_typecode/alias_typecode.cpp:49



// TAO_IDL - Generated from
// be/be_visitor_typecode/typecode_defn.cpp:461


#ifndef _TAO_TYPECODE_Kokyu_GuidType_GUARD
#define _TAO_TYPECODE_Kokyu_GuidType_GUARD

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

namespace TAO
{
  namespace TypeCode
  {
    namespace
    {
      TAO::TypeCode::Sequence< ::CORBA::TypeCode_ptr const *,
                              TAO::Null_RefCount_Policy>
        Kokyu_GuidType_0 (
          ::CORBA::tk_sequence,
          &CORBA::_tc_octet,
          0U);

      ::CORBA::TypeCode_ptr const tc_Kokyu_GuidType_0 =
        &Kokyu_GuidType_0;
    }
  }
}

TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_TYPECODE_Kokyu_GuidType_GUARD */

static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_Kokyu_GuidType (
    ::CORBA::tk_alias,
    "IDL:omg.org/Kokyu/GuidType:1.0",
    "GuidType",
    &TAO::TypeCode::tc_Kokyu_GuidType_0);


namespace Kokyu
{
  ::CORBA::TypeCode_ptr const _tc_GuidType =
    &_tao_tc_Kokyu_GuidType;
}

// TAO_IDL - Generated from
// be/be_visitor_typecode/struct_typecode.cpp:86



// TAO_IDL - Generated from
// be/be_visitor_typecode/typecode_defn.cpp:461

static TAO::TypeCode::Struct_Field<
  char const *,
  ::CORBA::TypeCode_ptr const *> const
    _tao_fields_Kokyu_Svc_Ctxt_DSRT_QoS[] =
      {
        { "guid", &Kokyu::_tc_GuidType },
        { "importance", &CORBA::_tc_long },
        { "criticality", &CORBA::_tc_long },
        { "desired_priority", &RTCORBA::_tc_Priority },
        { "deadline", &TimeBase::_tc_TimeT },
        { "estimated_initial_execution_time", &TimeBase::_tc_TimeT }
      };

static TAO::TypeCode::Struct<
  char const *,
  ::CORBA::TypeCode_ptr const *,
  TAO::TypeCode::Struct_Field<
    char const *,
    ::CORBA::TypeCode_ptr const *> const *,
  TAO::Null_RefCount_Policy>
_tao_tc_Kokyu_Svc_Ctxt_DSRT_QoS (
  ::CORBA::tk_struct,
  "IDL:omg.org/Kokyu/Svc_Ctxt_DSRT_QoS:1.0",
  "Svc_Ctxt_DSRT_QoS",
  _tao_fields_Kokyu_Svc_Ctxt_DSRT_QoS,
  6);


namespace Kokyu
{
  ::CORBA::TypeCode_ptr const _tc_Svc_Ctxt_DSRT_QoS =
    &_tao_tc_Kokyu_Svc_Ctxt_DSRT_QoS;
}

// TAO_IDL - Generated from
// be/be_visitor_structure/structure_cs.cpp:56

void
Kokyu::Svc_Ctxt_DSRT_QoS::_tao_any_destructor (
    void *_tao_void_pointer)
{
  Svc_Ctxt_DSRT_QoS *_tao_tmp_pointer =
    static_cast<Svc_Ctxt_DSRT_QoS *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

// TAO_IDL - Generated from
// be/be_visitor_sequence/any_op_cs.cpp:45


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


TAO_END_VERSIONED_NAMESPACE_DECL



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace Kokyu
{

  // Copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      const ::Kokyu::GuidType &_tao_elem
    )
  {
    TAO::Any_Dual_Impl_T< ::Kokyu::GuidType>::insert_copy (
        _tao_any,
        ::Kokyu::GuidType::_tao_any_destructor,
        ::Kokyu::_tc_GuidType,
        _tao_elem
      );
}

// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    ::Kokyu::GuidType *_tao_elem)
{
  TAO::Any_Dual_Impl_T< ::Kokyu::GuidType>::insert (
      _tao_any,
      ::Kokyu::GuidType::_tao_any_destructor,
      ::Kokyu::_tc_GuidType,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    ::Kokyu::GuidType *&_tao_elem)
{
  return _tao_any >>= const_cast<
      const ::Kokyu::GuidType *&> (
      _tao_elem
    );
}

// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const ::Kokyu::GuidType *&_tao_elem)
{
  return
    TAO::Any_Dual_Impl_T< ::Kokyu::GuidType>::extract (
        _tao_any,
        ::Kokyu::GuidType::_tao_any_destructor,
        ::Kokyu::_tc_GuidType,
        _tao_elem
      );
}
}

#else


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


// Copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    const Kokyu::GuidType &_tao_elem)
{
  TAO::Any_Dual_Impl_T<Kokyu::GuidType>::insert_copy (
      _tao_any,
      Kokyu::GuidType::_tao_any_destructor,
      Kokyu::_tc_GuidType,
      _tao_elem
    );
}

// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    Kokyu::GuidType *_tao_elem)
{
  TAO::Any_Dual_Impl_T<Kokyu::GuidType>::insert (
      _tao_any,
      Kokyu::GuidType::_tao_any_destructor,
      Kokyu::_tc_GuidType,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    Kokyu::GuidType *&_tao_elem)
{
  return _tao_any >>= const_cast<
      const Kokyu::GuidType *&> (
      _tao_elem
    );
}

// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const Kokyu::GuidType *&_tao_elem)
{
  return
    TAO::Any_Dual_Impl_T<Kokyu::GuidType>::extract (
        _tao_any,
        Kokyu::GuidType::_tao_any_destructor,
        Kokyu::_tc_GuidType,
        _tao_elem);
}
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_structure/any_op_cs.cpp:43



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace Kokyu
{
  /// Copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      const ::Kokyu::Svc_Ctxt_DSRT_QoS &_tao_elem)
  {
    TAO::Any_Dual_Impl_T< ::Kokyu::Svc_Ctxt_DSRT_QoS>::insert_copy (
        _tao_any,
        ::Kokyu::Svc_Ctxt_DSRT_QoS::_tao_any_destructor,
        ::Kokyu::_tc_Svc_Ctxt_DSRT_QoS,
        _tao_elem);
}

/// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any, ::
    Kokyu::Svc_Ctxt_DSRT_QoS *_tao_elem)
{
  TAO::Any_Dual_Impl_T< ::Kokyu::Svc_Ctxt_DSRT_QoS>::insert (
      _tao_any,
      ::Kokyu::Svc_Ctxt_DSRT_QoS::_tao_any_destructor,
      ::Kokyu::_tc_Svc_Ctxt_DSRT_QoS,
      _tao_elem);
}

/// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    ::Kokyu::Svc_Ctxt_DSRT_QoS *&_tao_elem)
{
  return _tao_any >>= const_cast<
      const ::Kokyu::Svc_Ctxt_DSRT_QoS *&> (
      _tao_elem);
}

/// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const ::Kokyu::Svc_Ctxt_DSRT_QoS *&_tao_elem)
{
  return
    TAO::Any_Dual_Impl_T< ::Kokyu::Svc_Ctxt_DSRT_QoS>::extract (
        _tao_any,
        ::Kokyu::Svc_Ctxt_DSRT_QoS::_tao_any_destructor,
        ::Kokyu::_tc_Svc_Ctxt_DSRT_QoS,
        _tao_elem
      );
}
}

#else

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

/// Copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  const Kokyu::Svc_Ctxt_DSRT_QoS &_tao_elem)
{
  TAO::Any_Dual_Impl_T<Kokyu::Svc_Ctxt_DSRT_QoS>::insert_copy (
    _tao_any,
    Kokyu::Svc_Ctxt_DSRT_QoS::_tao_any_destructor,
    Kokyu::_tc_Svc_Ctxt_DSRT_QoS,
    _tao_elem);
}

/// Non-copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  Kokyu::Svc_Ctxt_DSRT_QoS *_tao_elem)
{
  TAO::Any_Dual_Impl_T<Kokyu::Svc_Ctxt_DSRT_QoS>::insert (
    _tao_any,
    Kokyu::Svc_Ctxt_DSRT_QoS::_tao_any_destructor,
    Kokyu::_tc_Svc_Ctxt_DSRT_QoS,
    _tao_elem);
}

/// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
  const ::CORBA::Any &_tao_any,
  Kokyu::Svc_Ctxt_DSRT_QoS *&_tao_elem)
{
  return _tao_any >>= const_cast<
      const Kokyu::Svc_Ctxt_DSRT_QoS *&> (
      _tao_elem);
}

/// Extraction to const pointer.
::CORBA::Boolean operator>>= (
  const ::CORBA::Any &_tao_any,
  const Kokyu::Svc_Ctxt_DSRT_QoS *&_tao_elem)
{
  return
    TAO::Any_Dual_Impl_T<Kokyu::Svc_Ctxt_DSRT_QoS>::extract (
      _tao_any,
      Kokyu::Svc_Ctxt_DSRT_QoS::_tao_any_destructor,
      Kokyu::_tc_Svc_Ctxt_DSRT_QoS,
      _tao_elem);
}
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_sequence/cdr_op_cs.cpp:93
#if !defined _TAO_CDR_OP_Kokyu_GuidType_CPP_
#define _TAO_CDR_OP_Kokyu_GuidType_CPP_

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Kokyu::GuidType &_tao_sequence)
{
  return TAO::marshal_sequence(strm, _tao_sequence);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Kokyu::GuidType &_tao_sequence)
{
  return TAO::demarshal_sequence(strm, _tao_sequence);
}


TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_CDR_OP_Kokyu_GuidType_CPP_ */

// TAO_IDL - Generated from
// be/be_visitor_structure/cdr_op_cs.cpp:49

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Kokyu::Svc_Ctxt_DSRT_QoS &_tao_aggregate)
{
  return
    (strm << _tao_aggregate.guid) &&
    (strm << _tao_aggregate.importance) &&
    (strm << _tao_aggregate.criticality) &&
    (strm << _tao_aggregate.desired_priority) &&
    (strm << _tao_aggregate.deadline) &&
    (strm << _tao_aggregate.estimated_initial_execution_time);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Kokyu::Svc_Ctxt_DSRT_QoS &_tao_aggregate)
{
  return
    (strm >> _tao_aggregate.guid) &&
    (strm >> _tao_aggregate.importance) &&
    (strm >> _tao_aggregate.criticality) &&
    (strm >> _tao_aggregate.desired_priority) &&
    (strm >> _tao_aggregate.deadline) &&
    (strm >> _tao_aggregate.estimated_initial_execution_time);
}

TAO_END_VERSIONED_NAMESPACE_DECL



