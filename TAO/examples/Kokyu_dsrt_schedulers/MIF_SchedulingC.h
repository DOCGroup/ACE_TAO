// -*- C++ -*-
/**
 * Code generated by the The ACE ORB (TAO) IDL Compiler v2.4.1
 * TAO and the TAO IDL Compiler have been developed by:
 *       Center for Distributed Object Computing
 *       Washington University
 *       St. Louis, MO
 *       USA
 *       http://www.cs.wustl.edu/~schmidt/doc-center.html
 * and
 *       Distributed Object Computing Laboratory
 *       University of California at Irvine
 *       Irvine, CA
 *       USA
 * and
 *       Institute for Software Integrated Systems
 *       Vanderbilt University
 *       Nashville, TN
 *       USA
 *       http://www.isis.vanderbilt.edu/
 *
 * Information about TAO is available at:
 *     http://www.dre.vanderbilt.edu/~schmidt/TAO.html
 **/

// TAO_IDL - Generated from
// be/be_codegen.cpp:149

#ifndef _TAO_IDL_MIF_SCHEDULINGC_AZOY9T_H_
#define _TAO_IDL_MIF_SCHEDULINGC_AZOY9T_H_

#include /**/ "ace/pre.h"


#include /**/ "ace/config-all.h"

#if !defined (ACE_LACKS_PRAGMA_ONCE)
# pragma once
#endif /* ACE_LACKS_PRAGMA_ONCE */


#include /**/ "Kokyu_dsrt_schedulers_export.h"
#include "tao/AnyTypeCode/AnyTypeCode_methods.h"
#include "tao/AnyTypeCode/Any.h"
#include "tao/ORB.h"
#include "tao/SystemException.h"
#include "tao/Basic_Types.h"
#include "tao/ORB_Constants.h"
#include "tao/Object.h"
#include "tao/AnyTypeCode/TypeCode.h"
#include "tao/AnyTypeCode/TypeCode_Constants.h"
#include "tao/String_Manager_T.h"
#include "tao/RTScheduling/RTScheduler_includeA.h"
#include "tao/RTCORBA/RTCORBA_includeA.h"
#include "tao/Objref_VarOut_T.h"
#include "tao/VarOut_T.h"
#include "tao/Arg_Traits_T.h"
#include "tao/Basic_Arguments.h"
#include "tao/Special_Basic_Arguments.h"
#include "tao/Any_Insert_Policy_T.h"
#include "tao/Fixed_Size_Argument_T.h"
#include "tao/Var_Size_Argument_T.h"
#include "tao/Object_Argument_T.h"
#include /**/ "tao/Version.h"
#include /**/ "tao/Versioned_Namespace.h"

#include "tao/RTScheduling/RTScheduler_includeC.h"
#include "tao/RTCORBA/RTCORBA_includeC.h"

#if TAO_MAJOR_VERSION != 2 || TAO_MINOR_VERSION != 4 || TAO_MICRO_VERSION != 1
#error This file should be regenerated with TAO_IDL
#endif

#if defined (TAO_EXPORT_MACRO)
#undef TAO_EXPORT_MACRO
#endif
#define TAO_EXPORT_MACRO Kokyu_DSRT_Schedulers_Export

// TAO_IDL - Generated from
// be/be_visitor_module/module_ch.cpp:35

namespace MIF_Scheduling
{

  // TAO_IDL - Generated from
  // be/be_type.cpp:258

  struct SchedulingParameter;

  typedef
    ::TAO_Fixed_Var_T<
        SchedulingParameter
      >
    SchedulingParameter_var;

  typedef
    SchedulingParameter &
    SchedulingParameter_out;

  // TAO_IDL - Generated from
  // be/be_visitor_structure/structure_ch.cpp:48

  struct Kokyu_DSRT_Schedulers_Export SchedulingParameter
  {

    // TAO_IDL - Generated from
    // be/be_type.cpp:304


    typedef SchedulingParameter_var _var_type;
    typedef SchedulingParameter_out _out_type;

    static void _tao_any_destructor (void *);

    ::CORBA::Long importance;
  };

  // TAO_IDL - Generated from
  // be/be_visitor_typecode/typecode_decl.cpp:34

  extern Kokyu_DSRT_Schedulers_Export ::CORBA::TypeCode_ptr const _tc_SchedulingParameter;

  // TAO_IDL - Generated from
  // be/be_interface.cpp:748

#if !defined (_MIF_SCHEDULING_SCHEDULINGPARAMETERPOLICY__VAR_OUT_CH_)
#define _MIF_SCHEDULING_SCHEDULINGPARAMETERPOLICY__VAR_OUT_CH_

  class SchedulingParameterPolicy;
  typedef SchedulingParameterPolicy *SchedulingParameterPolicy_ptr;

  typedef
    TAO_Objref_Var_T<
        SchedulingParameterPolicy
      >
    SchedulingParameterPolicy_var;

  typedef
    TAO_Objref_Out_T<
        SchedulingParameterPolicy
      >
    SchedulingParameterPolicy_out;

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // be/be_visitor_interface/interface_ch.cpp:40

  class Kokyu_DSRT_Schedulers_Export SchedulingParameterPolicy
    : public virtual ::CORBA::Policy

  {
  public:

    // TAO_IDL - Generated from
    // be/be_type.cpp:304

    typedef SchedulingParameterPolicy_ptr _ptr_type;
    typedef SchedulingParameterPolicy_var _var_type;
    typedef SchedulingParameterPolicy_out _out_type;

    static void _tao_any_destructor (void *);

    // The static operations.
    static SchedulingParameterPolicy_ptr _duplicate (SchedulingParameterPolicy_ptr obj);

    static void _tao_release (SchedulingParameterPolicy_ptr obj);

    static SchedulingParameterPolicy_ptr _narrow (::CORBA::Object_ptr obj);
    static SchedulingParameterPolicy_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
    static SchedulingParameterPolicy_ptr _nil (void);

    virtual ::MIF_Scheduling::SchedulingParameter value (
      void) = 0;

    virtual void value (
      const ::MIF_Scheduling::SchedulingParameter & value) = 0;

    virtual ::CORBA::Policy_ptr copy (
      void) = 0;

    virtual void destroy (
      void) = 0;

    // TAO_IDL - Generated from
    // be/be_visitor_interface/interface_ch.cpp:137

    virtual ::CORBA::Boolean _is_a (const char *type_id);
    virtual const char* _interface_repository_id (void) const;
    virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);

  protected:
    // Abstract or local interface only.
    SchedulingParameterPolicy (void);



    virtual ~SchedulingParameterPolicy (void);

  private:
    // Private and unimplemented for concrete interfaces.
    SchedulingParameterPolicy (const SchedulingParameterPolicy &);

    void operator= (const SchedulingParameterPolicy &);
  };

  // TAO_IDL - Generated from
  // be/be_visitor_typecode/typecode_decl.cpp:34

  extern Kokyu_DSRT_Schedulers_Export ::CORBA::TypeCode_ptr const _tc_SchedulingParameterPolicy;

  // TAO_IDL - Generated from
  // be/be_interface.cpp:748

#if !defined (_MIF_SCHEDULING_SCHEDULER__VAR_OUT_CH_)
#define _MIF_SCHEDULING_SCHEDULER__VAR_OUT_CH_

  class Scheduler;
  typedef Scheduler *Scheduler_ptr;

  typedef
    TAO_Objref_Var_T<
        Scheduler
      >
    Scheduler_var;

  typedef
    TAO_Objref_Out_T<
        Scheduler
      >
    Scheduler_out;

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // be/be_visitor_interface/interface_ch.cpp:40

  class Kokyu_DSRT_Schedulers_Export Scheduler
    : public virtual ::RTScheduling::Scheduler

  {
  public:

    // TAO_IDL - Generated from
    // be/be_type.cpp:304

    typedef Scheduler_ptr _ptr_type;
    typedef Scheduler_var _var_type;
    typedef Scheduler_out _out_type;

    static void _tao_any_destructor (void *);

    // The static operations.
    static Scheduler_ptr _duplicate (Scheduler_ptr obj);

    static void _tao_release (Scheduler_ptr obj);

    static Scheduler_ptr _narrow (::CORBA::Object_ptr obj);
    static Scheduler_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
    static Scheduler_ptr _nil (void);

    virtual ::MIF_Scheduling::SchedulingParameterPolicy_ptr create_scheduling_parameter (
      const ::MIF_Scheduling::SchedulingParameter & value) = 0;

    // TAO_IDL - Generated from
    // be/be_visitor_interface/interface_ch.cpp:137

    virtual ::CORBA::Boolean _is_a (const char *type_id);
    virtual const char* _interface_repository_id (void) const;
    virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);

  protected:
    // Abstract or local interface only.
    Scheduler (void);



    virtual ~Scheduler (void);

  private:
    // Private and unimplemented for concrete interfaces.
    Scheduler (const Scheduler &);

    void operator= (const Scheduler &);
  };

  // TAO_IDL - Generated from
  // be/be_visitor_typecode/typecode_decl.cpp:34

  extern Kokyu_DSRT_Schedulers_Export ::CORBA::TypeCode_ptr const _tc_Scheduler;

// TAO_IDL - Generated from
// be/be_visitor_module/module_ch.cpp:64

} // module MIF_Scheduling

// TAO_IDL - Generated from
// be/be_visitor_arg_traits.cpp:66

TAO_BEGIN_VERSIONED_NAMESPACE_DECL


// Arg traits specializations.
namespace TAO
{

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:945

  template<>
  class Arg_Traits< ::MIF_Scheduling::SchedulingParameter>
    : public
        Fixed_Size_Arg_Traits_T<
            ::MIF_Scheduling::SchedulingParameter,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_traits.cpp:60

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Traits specializations.
namespace TAO
{

#if !defined (_MIF_SCHEDULING_SCHEDULINGPARAMETERPOLICY__TRAITS_)
#define _MIF_SCHEDULING_SCHEDULINGPARAMETERPOLICY__TRAITS_

  template<>
  struct Kokyu_DSRT_Schedulers_Export Objref_Traits< ::MIF_Scheduling::SchedulingParameterPolicy>
  {
    static ::MIF_Scheduling::SchedulingParameterPolicy_ptr duplicate (
        ::MIF_Scheduling::SchedulingParameterPolicy_ptr p);
    static void release (
        ::MIF_Scheduling::SchedulingParameterPolicy_ptr p);
    static ::MIF_Scheduling::SchedulingParameterPolicy_ptr nil (void);
    static ::CORBA::Boolean marshal (
        const ::MIF_Scheduling::SchedulingParameterPolicy_ptr p,
        TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_MIF_SCHEDULING_SCHEDULER__TRAITS_)
#define _MIF_SCHEDULING_SCHEDULER__TRAITS_

  template<>
  struct Kokyu_DSRT_Schedulers_Export Objref_Traits< ::MIF_Scheduling::Scheduler>
  {
    static ::MIF_Scheduling::Scheduler_ptr duplicate (
        ::MIF_Scheduling::Scheduler_ptr p);
    static void release (
        ::MIF_Scheduling::Scheduler_ptr p);
    static ::MIF_Scheduling::Scheduler_ptr nil (void);
    static ::CORBA::Boolean marshal (
        const ::MIF_Scheduling::Scheduler_ptr p,
        TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */
}
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_structure/any_op_ch.cpp:42



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace MIF_Scheduling
{
  Kokyu_DSRT_Schedulers_Export void operator<<= (::CORBA::Any &, const ::MIF_Scheduling::SchedulingParameter &); // copying version
  Kokyu_DSRT_Schedulers_Export void operator<<= (::CORBA::Any &, ::MIF_Scheduling::SchedulingParameter*); // noncopying version
  Kokyu_DSRT_Schedulers_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, ::MIF_Scheduling::SchedulingParameter *&); // deprecated
Kokyu_DSRT_Schedulers_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const ::MIF_Scheduling::SchedulingParameter *&);
}

#else


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

Kokyu_DSRT_Schedulers_Export void operator<<= (::CORBA::Any &, const MIF_Scheduling::SchedulingParameter &); // copying version
Kokyu_DSRT_Schedulers_Export void operator<<= (::CORBA::Any &, MIF_Scheduling::SchedulingParameter*); // noncopying version
Kokyu_DSRT_Schedulers_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, MIF_Scheduling::SchedulingParameter *&); // deprecated
Kokyu_DSRT_Schedulers_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const MIF_Scheduling::SchedulingParameter *&);
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_interface/any_op_ch.cpp:41



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace MIF_Scheduling
{
  Kokyu_DSRT_Schedulers_Export void operator<<= ( ::CORBA::Any &, SchedulingParameterPolicy_ptr); // copying
  Kokyu_DSRT_Schedulers_Export void operator<<= ( ::CORBA::Any &, SchedulingParameterPolicy_ptr *); // non-copying
  Kokyu_DSRT_Schedulers_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, SchedulingParameterPolicy_ptr &);
}

#else


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

Kokyu_DSRT_Schedulers_Export void operator<<= (::CORBA::Any &, MIF_Scheduling::SchedulingParameterPolicy_ptr); // copying
Kokyu_DSRT_Schedulers_Export void operator<<= (::CORBA::Any &, MIF_Scheduling::SchedulingParameterPolicy_ptr *); // non-copying
Kokyu_DSRT_Schedulers_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, MIF_Scheduling::SchedulingParameterPolicy_ptr &);
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_interface/any_op_ch.cpp:41



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace MIF_Scheduling
{
  Kokyu_DSRT_Schedulers_Export void operator<<= ( ::CORBA::Any &, Scheduler_ptr); // copying
  Kokyu_DSRT_Schedulers_Export void operator<<= ( ::CORBA::Any &, Scheduler_ptr *); // non-copying
  Kokyu_DSRT_Schedulers_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, Scheduler_ptr &);
}

#else


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

Kokyu_DSRT_Schedulers_Export void operator<<= (::CORBA::Any &, MIF_Scheduling::Scheduler_ptr); // copying
Kokyu_DSRT_Schedulers_Export void operator<<= (::CORBA::Any &, MIF_Scheduling::Scheduler_ptr *); // non-copying
Kokyu_DSRT_Schedulers_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, MIF_Scheduling::Scheduler_ptr &);
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_structure/cdr_op_ch.cpp:43


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

Kokyu_DSRT_Schedulers_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const MIF_Scheduling::SchedulingParameter &);
Kokyu_DSRT_Schedulers_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, MIF_Scheduling::SchedulingParameter &);

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_codegen.cpp:1700
#if defined (__ACE_INLINE__)
#include "MIF_SchedulingC.inl"
#endif /* defined INLINE */

#include /**/ "ace/post.h"

#endif /* ifndef */

