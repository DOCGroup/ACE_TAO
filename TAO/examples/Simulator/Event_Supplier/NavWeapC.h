// -*- C++ -*-
/**
 * Code generated by the The ACE ORB (TAO) IDL Compiler v2.4.1
 * TAO and the TAO IDL Compiler have been developed by:
 *       Center for Distributed Object Computing
 *       Washington University
 *       St. Louis, MO
 *       USA
 *       http://www.cs.wustl.edu/~schmidt/doc-center.html
 * and
 *       Distributed Object Computing Laboratory
 *       University of California at Irvine
 *       Irvine, CA
 *       USA
 * and
 *       Institute for Software Integrated Systems
 *       Vanderbilt University
 *       Nashville, TN
 *       USA
 *       http://www.isis.vanderbilt.edu/
 *
 * Information about TAO is available at:
 *     http://www.dre.vanderbilt.edu/~schmidt/TAO.html
 **/

// TAO_IDL - Generated from
// be/be_codegen.cpp:149

#ifndef _TAO_IDL_NAVWEAPC_ABSXQR_H_
#define _TAO_IDL_NAVWEAPC_ABSXQR_H_

#include /**/ "ace/pre.h"


#include /**/ "ace/config-all.h"

#if !defined (ACE_LACKS_PRAGMA_ONCE)
# pragma once
#endif /* ACE_LACKS_PRAGMA_ONCE */


#include "tao/AnyTypeCode/AnyTypeCode_methods.h"
#include "tao/AnyTypeCode/Any.h"
#include "tao/ORB.h"
#include "tao/SystemException.h"
#include "tao/Basic_Types.h"
#include "tao/ORB_Constants.h"
#include "tao/Object.h"
#include "tao/String_Manager_T.h"
#include "tao/AnyTypeCode/TimeBaseA.h"
#include "tao/Objref_VarOut_T.h"
#include "tao/VarOut_T.h"
#include "tao/Arg_Traits_T.h"
#include "tao/Basic_Arguments.h"
#include "tao/Special_Basic_Arguments.h"
#include "tao/Any_Insert_Policy_T.h"
#include "tao/Fixed_Size_Argument_T.h"
#include "tao/Var_Size_Argument_T.h"
#include "tao/Object_Argument_T.h"
#include "tao/UB_String_Arguments.h"
#include /**/ "tao/Version.h"
#include /**/ "tao/Versioned_Namespace.h"

#include "tao/TimeBaseC.h"

#if TAO_MAJOR_VERSION != 2 || TAO_MINOR_VERSION != 4 || TAO_MICRO_VERSION != 1
#error This file should be regenerated with TAO_IDL
#endif

#if defined (TAO_EXPORT_MACRO)
#undef TAO_EXPORT_MACRO
#endif
#define TAO_EXPORT_MACRO 

// TAO_IDL - Generated from
// be/be_visitor_root/root_ch.cpp:157
TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<typename T> class Narrow_Utils;
}
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_type.cpp:258

struct Navigation;

typedef
  ::TAO_Fixed_Var_T<
      Navigation
    >
  Navigation_var;

typedef
  Navigation &
  Navigation_out;

// TAO_IDL - Generated from
// be/be_visitor_structure/structure_ch.cpp:48

struct  Navigation
{

  // TAO_IDL - Generated from
  // be/be_type.cpp:304

  
  typedef Navigation_var _var_type;
  typedef Navigation_out _out_type;

  static void _tao_any_destructor (void *);
  
  ::CORBA::Long position_latitude;
  ::CORBA::Long position_longitude;
  ::CORBA::ULong altitude;
  ::CORBA::Long heading;
  ::CORBA::Long roll;
  ::CORBA::Long pitch;
  ::CORBA::Double utilization;
  ::CORBA::Double overhead;
  TimeBase::TimeT arrival_time;
  TimeBase::TimeT deadline_time;
  TimeBase::TimeT completion_time;
  TimeBase::TimeT computation_time;
  ::CORBA::ULong criticality;
  ::CORBA::ULong update_data;
};

// TAO_IDL - Generated from
// be/be_visitor_typecode/typecode_decl.cpp:34

extern  ::CORBA::TypeCode_ptr const _tc_Navigation;

// TAO_IDL - Generated from
// be/be_type.cpp:258

struct Weapons;

typedef
  ::TAO_Var_Var_T<
      Weapons
    >
  Weapons_var;

typedef
  ::TAO_Out_T<
      Weapons
    >
  Weapons_out;

// TAO_IDL - Generated from
// be/be_visitor_structure/structure_ch.cpp:48

struct  Weapons
{

  // TAO_IDL - Generated from
  // be/be_type.cpp:304

  
  typedef Weapons_var _var_type;
  typedef Weapons_out _out_type;

  static void _tao_any_destructor (void *);
  
  ::CORBA::ULong number_of_weapons;
  ::TAO::String_Manager weapon1_identifier;
  ::CORBA::ULong weapon1_status;
  ::TAO::String_Manager weapon2_identifier;
  ::CORBA::ULong weapon2_status;
  ::TAO::String_Manager weapon3_identifier;
  ::CORBA::ULong weapon3_status;
  ::TAO::String_Manager weapon4_identifier;
  ::CORBA::ULong weapon4_status;
  ::TAO::String_Manager weapon5_identifier;
  ::CORBA::ULong weapon5_status;
  ::CORBA::Double utilization;
  ::CORBA::Double overhead;
  TimeBase::TimeT arrival_time;
  TimeBase::TimeT deadline_time;
  TimeBase::TimeT completion_time;
  TimeBase::TimeT computation_time;
  ::CORBA::ULong criticality;
  ::CORBA::ULong update_data;
};

// TAO_IDL - Generated from
// be/be_visitor_typecode/typecode_decl.cpp:34

extern  ::CORBA::TypeCode_ptr const _tc_Weapons;

// TAO_IDL - Generated from
// be/be_interface.cpp:748

#if !defined (_NAVWEAPTERMINATOR__VAR_OUT_CH_)
#define _NAVWEAPTERMINATOR__VAR_OUT_CH_

class NavWeapTerminator;
typedef NavWeapTerminator *NavWeapTerminator_ptr;

typedef
  TAO_Objref_Var_T<
      NavWeapTerminator
    >
  NavWeapTerminator_var;

typedef
  TAO_Objref_Out_T<
      NavWeapTerminator
    >
  NavWeapTerminator_out;

#endif /* end #if !defined */

// TAO_IDL - Generated from
// be/be_visitor_interface/interface_ch.cpp:40

class  NavWeapTerminator
  : public virtual ::CORBA::Object
{
public:
  friend class TAO::Narrow_Utils<NavWeapTerminator>;

  // TAO_IDL - Generated from
  // be/be_type.cpp:304

  typedef NavWeapTerminator_ptr _ptr_type;
  typedef NavWeapTerminator_var _var_type;
  typedef NavWeapTerminator_out _out_type;

  static void _tao_any_destructor (void *);

  // The static operations.
  static NavWeapTerminator_ptr _duplicate (NavWeapTerminator_ptr obj);

  static void _tao_release (NavWeapTerminator_ptr obj);

  static NavWeapTerminator_ptr _narrow (::CORBA::Object_ptr obj);
  static NavWeapTerminator_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
  static NavWeapTerminator_ptr _nil (void);

  virtual void shutdown (
    void);

  // TAO_IDL - Generated from
  // be/be_visitor_interface/interface_ch.cpp:137

  virtual ::CORBA::Boolean _is_a (const char *type_id);
  virtual const char* _interface_repository_id (void) const;
  virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);

protected:
  // Concrete interface only.
  NavWeapTerminator (void);

  // Concrete non-local interface only.
  NavWeapTerminator (
      ::IOP::IOR *ior,
      TAO_ORB_Core *orb_core);
  
  // Non-local interface only.
  NavWeapTerminator (
      TAO_Stub *objref,
      ::CORBA::Boolean _tao_collocated = false,
      TAO_Abstract_ServantBase *servant = 0,
      TAO_ORB_Core *orb_core = 0);

  virtual ~NavWeapTerminator (void);

private:
  // Private and unimplemented for concrete interfaces.
  NavWeapTerminator (const NavWeapTerminator &);

  void operator= (const NavWeapTerminator &);
};

// TAO_IDL - Generated from
// be/be_visitor_typecode/typecode_decl.cpp:34

extern  ::CORBA::TypeCode_ptr const _tc_NavWeapTerminator;

// TAO_IDL - Generated from
// be/be_visitor_arg_traits.cpp:66

TAO_BEGIN_VERSIONED_NAMESPACE_DECL


// Arg traits specializations.
namespace TAO
{

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:945

  template<>
  class Arg_Traits< ::Navigation>
    : public
        Fixed_Size_Arg_Traits_T<
            ::Navigation,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:945

  template<>
  class Arg_Traits< ::Weapons>
    : public
        Var_Size_Arg_Traits_T<
            ::Weapons,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:145

#if !defined (_NAVWEAPTERMINATOR__ARG_TRAITS_)
#define _NAVWEAPTERMINATOR__ARG_TRAITS_

  template<>
  class  Arg_Traits< ::NavWeapTerminator>
    : public
        Object_Arg_Traits_T<
            ::NavWeapTerminator_ptr,
            ::NavWeapTerminator_var,
            ::NavWeapTerminator_out,
            TAO::Objref_Traits<NavWeapTerminator>,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

#endif /* end #if !defined */
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_traits.cpp:60

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Traits specializations.
namespace TAO
{

#if !defined (_NAVWEAPTERMINATOR__TRAITS_)
#define _NAVWEAPTERMINATOR__TRAITS_

  template<>
  struct  Objref_Traits< ::NavWeapTerminator>
  {
    static ::NavWeapTerminator_ptr duplicate (
        ::NavWeapTerminator_ptr p);
    static void release (
        ::NavWeapTerminator_ptr p);
    static ::NavWeapTerminator_ptr nil (void);
    static ::CORBA::Boolean marshal (
        const ::NavWeapTerminator_ptr p,
        TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */
}
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_structure/any_op_ch.cpp:42


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 void operator<<= (::CORBA::Any &, const Navigation &); // copying version
 void operator<<= (::CORBA::Any &, Navigation*); // noncopying version
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, Navigation *&); // deprecated
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const Navigation *&);
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_structure/any_op_ch.cpp:42


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 void operator<<= (::CORBA::Any &, const Weapons &); // copying version
 void operator<<= (::CORBA::Any &, Weapons*); // noncopying version
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, Weapons *&); // deprecated
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const Weapons *&);
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_interface/any_op_ch.cpp:41


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 void operator<<= (::CORBA::Any &, NavWeapTerminator_ptr); // copying
 void operator<<= (::CORBA::Any &, NavWeapTerminator_ptr *); // non-copying
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, NavWeapTerminator_ptr &);
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_structure/cdr_op_ch.cpp:43


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 ::CORBA::Boolean operator<< (TAO_OutputCDR &, const Navigation &);
 ::CORBA::Boolean operator>> (TAO_InputCDR &, Navigation &);

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_structure/cdr_op_ch.cpp:43


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 ::CORBA::Boolean operator<< (TAO_OutputCDR &, const Weapons &);
 ::CORBA::Boolean operator>> (TAO_InputCDR &, Weapons &);

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_interface/cdr_op_ch.cpp:41

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 ::CORBA::Boolean operator<< (TAO_OutputCDR &, const NavWeapTerminator_ptr );
 ::CORBA::Boolean operator>> (TAO_InputCDR &, NavWeapTerminator_ptr &);

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_codegen.cpp:1700
#if defined (__ACE_INLINE__)
#include "NavWeapC.inl"
#endif /* defined INLINE */

#include /**/ "ace/post.h"

#endif /* ifndef */

