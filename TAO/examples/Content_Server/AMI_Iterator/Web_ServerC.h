// -*- C++ -*-
/**
 * Code generated by the The ACE ORB (TAO) IDL Compiler v2.4.1
 * TAO and the TAO IDL Compiler have been developed by:
 *       Center for Distributed Object Computing
 *       Washington University
 *       St. Louis, MO
 *       USA
 *       http://www.cs.wustl.edu/~schmidt/doc-center.html
 * and
 *       Distributed Object Computing Laboratory
 *       University of California at Irvine
 *       Irvine, CA
 *       USA
 * and
 *       Institute for Software Integrated Systems
 *       Vanderbilt University
 *       Nashville, TN
 *       USA
 *       http://www.isis.vanderbilt.edu/
 *
 * Information about TAO is available at:
 *     http://www.dre.vanderbilt.edu/~schmidt/TAO.html
 **/

// TAO_IDL - Generated from
// be/be_codegen.cpp:149

#ifndef _TAO_IDL_WEB_SERVERC_HAXPXI_H_
#define _TAO_IDL_WEB_SERVERC_HAXPXI_H_

#include /**/ "ace/pre.h"


#include /**/ "ace/config-all.h"

#if !defined (ACE_LACKS_PRAGMA_ONCE)
# pragma once
#endif /* ACE_LACKS_PRAGMA_ONCE */


#include "tao/AnyTypeCode/AnyTypeCode_methods.h"
#include "tao/AnyTypeCode/Any.h"
#include "tao/Valuetype/ValueBase.h"
#include "tao/Valuetype/Valuetype_Adapter_Factory_Impl.h"
#include "tao/ORB.h"
#include "tao/SystemException.h"
#include "tao/UserException.h"
#include "tao/Basic_Types.h"
#include "tao/ORB_Constants.h"
#include "tao/Object.h"
#include "tao/String_Manager_T.h"
#include "tao/Messaging/Messaging.h"
#include "tao/Sequence_T.h"
#include "tao/Valuetype/Value_VarOut_T.h"
#include "tao/Objref_VarOut_T.h"
#include "tao/Seq_Var_T.h"
#include "tao/Seq_Out_T.h"
#include "tao/VarOut_T.h"
#include "tao/Arg_Traits_T.h"
#include "tao/Basic_Arguments.h"
#include "tao/Special_Basic_Arguments.h"
#include "tao/Any_Insert_Policy_T.h"
#include "tao/Fixed_Size_Argument_T.h"
#include "tao/Var_Size_Argument_T.h"
#include "tao/Object_Argument_T.h"
#include "tao/Special_Basic_Arguments.h"
#include "tao/UB_String_Arguments.h"
#include /**/ "tao/Version.h"
#include /**/ "tao/Versioned_Namespace.h"

#if TAO_MAJOR_VERSION != 2 || TAO_MINOR_VERSION != 4 || TAO_MICRO_VERSION != 1
#error This file should be regenerated with TAO_IDL
#endif

#if defined (TAO_EXPORT_MACRO)
#undef TAO_EXPORT_MACRO
#endif
#define TAO_EXPORT_MACRO

// TAO_IDL - Generated from
// be/be_visitor_root/root_ch.cpp:157
TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<typename T> class Narrow_Utils;
}
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_module/module_ch.cpp:35

namespace Web_Server
{

  // TAO_IDL - Generated from
  // be/be_visitor_sequence/sequence_ch.cpp:99

#if !defined (_WEB_SERVER_CHUNK_TYPE_CH_)
#define _WEB_SERVER_CHUNK_TYPE_CH_

  class Chunk_Type;

  typedef
    ::TAO_FixedSeq_Var_T<
        Chunk_Type
      >
    Chunk_Type_var;

  typedef
    ::TAO_Seq_Out_T<
        Chunk_Type
      >
    Chunk_Type_out;

  class  Chunk_Type
    : public
        ::TAO::unbounded_value_sequence<
            ::CORBA::Octet
          >
  {
  public:
    Chunk_Type (void);
    Chunk_Type ( ::CORBA::ULong max);
    Chunk_Type (
      ::CORBA::ULong max,
      ::CORBA::ULong length,
      ::CORBA::Octet* buffer,
      ::CORBA::Boolean release = false);
    Chunk_Type (const Chunk_Type &);
    virtual ~Chunk_Type (void);


    // TAO_IDL - Generated from
    // be/be_type.cpp:304


    typedef Chunk_Type_var _var_type;
    typedef Chunk_Type_out _out_type;

    static void _tao_any_destructor (void *);



#if (TAO_NO_COPY_OCTET_SEQUENCES == 1)
    Chunk_Type (
        ::CORBA::ULong length,
        const ACE_Message_Block* mb
      )
      : ::TAO::unbounded_value_sequence< ::CORBA::Octet> (length, mb) {}
#endif /* TAO_NO_COPY_OCTET_SEQUENCE == 1 */
  };

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // be/be_visitor_typecode/typecode_decl.cpp:34

  extern  ::CORBA::TypeCode_ptr const _tc_Chunk_Type;

  // TAO_IDL - Generated from
  // be/be_interface.cpp:748

#if !defined (_WEB_SERVER_CONTENT_ITERATOR__VAR_OUT_CH_)
#define _WEB_SERVER_CONTENT_ITERATOR__VAR_OUT_CH_

  class AMI_Content_IteratorHandler;
  typedef AMI_Content_IteratorHandler *AMI_Content_IteratorHandler_ptr;

  class Content_Iterator;
  typedef Content_Iterator *Content_Iterator_ptr;

  typedef
    TAO_Objref_Var_T<
        Content_Iterator
      >
    Content_Iterator_var;

  typedef
    TAO_Objref_Out_T<
        Content_Iterator
      >
    Content_Iterator_out;

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // be/be_visitor_interface/interface_ch.cpp:40

  class  Content_Iterator
    : public virtual ::CORBA::Object
  {
  public:
    friend class TAO::Narrow_Utils<Content_Iterator>;

    // TAO_IDL - Generated from
    // be/be_type.cpp:304

    typedef Content_Iterator_ptr _ptr_type;
    typedef Content_Iterator_var _var_type;
    typedef Content_Iterator_out _out_type;

    static void _tao_any_destructor (void *);

    // The static operations.
    static Content_Iterator_ptr _duplicate (Content_Iterator_ptr obj);

    static void _tao_release (Content_Iterator_ptr obj);

    static Content_Iterator_ptr _narrow (::CORBA::Object_ptr obj);
    static Content_Iterator_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
    static Content_Iterator_ptr _nil (void);

    virtual ::CORBA::Boolean next_chunk (
      ::CORBA::ULongLong offset,
      ::Web_Server::Chunk_Type_out chunk);

    virtual void destroy (
      void);

    virtual void sendc_next_chunk (
      ::Web_Server::AMI_Content_IteratorHandler_ptr ami_handler,
      ::CORBA::ULongLong offset);

    virtual void sendc_destroy (
      ::Web_Server::AMI_Content_IteratorHandler_ptr ami_handler);

    // TAO_IDL - Generated from
    // be/be_visitor_interface/interface_ch.cpp:137

    virtual ::CORBA::Boolean _is_a (const char *type_id);
    virtual const char* _interface_repository_id (void) const;
    virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);

  protected:
    // Concrete interface only.
    Content_Iterator (void);

    // Concrete non-local interface only.
    Content_Iterator (
        ::IOP::IOR *ior,
        TAO_ORB_Core *orb_core);

    // Non-local interface only.
    Content_Iterator (
        TAO_Stub *objref,
        ::CORBA::Boolean _tao_collocated = false,
        TAO_Abstract_ServantBase *servant = 0,
        TAO_ORB_Core *orb_core = 0);

    virtual ~Content_Iterator (void);

  private:
    // Private and unimplemented for concrete interfaces.
    Content_Iterator (const Content_Iterator &);

    void operator= (const Content_Iterator &);
  };

  // TAO_IDL - Generated from
  // be/be_visitor_typecode/typecode_decl.cpp:34

  extern  ::CORBA::TypeCode_ptr const _tc_Content_Iterator;

  // TAO_IDL - Generated from
  // be/be_interface.cpp:748

#if !defined (_WEB_SERVER_AMI_CONTENT_ITERATORHANDLER__VAR_OUT_CH_)
#define _WEB_SERVER_AMI_CONTENT_ITERATORHANDLER__VAR_OUT_CH_

  class AMI_Content_IteratorHandler;
  typedef AMI_Content_IteratorHandler *AMI_Content_IteratorHandler_ptr;

  typedef
    TAO_Objref_Var_T<
        AMI_Content_IteratorHandler
      >
    AMI_Content_IteratorHandler_var;

  typedef
    TAO_Objref_Out_T<
        AMI_Content_IteratorHandler
      >
    AMI_Content_IteratorHandler_out;

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // be/be_visitor_interface/interface_ch.cpp:40

  class  AMI_Content_IteratorHandler
    : public virtual ::Messaging::ReplyHandler

  {
  public:
    friend class TAO::Narrow_Utils<AMI_Content_IteratorHandler>;

    // TAO_IDL - Generated from
    // be/be_type.cpp:304

    typedef AMI_Content_IteratorHandler_ptr _ptr_type;
    typedef AMI_Content_IteratorHandler_var _var_type;
    typedef AMI_Content_IteratorHandler_out _out_type;

    static void _tao_any_destructor (void *);

    // The static operations.
    static AMI_Content_IteratorHandler_ptr _duplicate (AMI_Content_IteratorHandler_ptr obj);

    static void _tao_release (AMI_Content_IteratorHandler_ptr obj);

    static AMI_Content_IteratorHandler_ptr _narrow (::CORBA::Object_ptr obj);
    static AMI_Content_IteratorHandler_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
    static AMI_Content_IteratorHandler_ptr _nil (void);

    virtual void next_chunk (
      ::CORBA::Boolean ami_return_val,
      const ::Web_Server::Chunk_Type & chunk);

    static void
    next_chunk_reply_stub (
      TAO_InputCDR &_tao_reply_cdr,
      ::Messaging::ReplyHandler_ptr _tao_reply_handler,
      ::CORBA::ULong reply_status);

    virtual void next_chunk_excep (
      ::Messaging::ExceptionHolder * excep_holder);

    virtual void destroy (
      void);

    static void
    destroy_reply_stub (
      TAO_InputCDR &_tao_reply_cdr,
      ::Messaging::ReplyHandler_ptr _tao_reply_handler,
      ::CORBA::ULong reply_status);

    virtual void destroy_excep (
      ::Messaging::ExceptionHolder * excep_holder);

    // TAO_IDL - Generated from
    // be/be_visitor_interface/interface_ch.cpp:137

    virtual ::CORBA::Boolean _is_a (const char *type_id);
    virtual const char* _interface_repository_id (void) const;
    virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);

  protected:
    // Concrete interface only.
    AMI_Content_IteratorHandler (void);

    // Concrete non-local interface only.
    AMI_Content_IteratorHandler (
        ::IOP::IOR *ior,
        TAO_ORB_Core *orb_core);

    // Non-local interface only.
    AMI_Content_IteratorHandler (
        TAO_Stub *objref,
        ::CORBA::Boolean _tao_collocated = false,
        TAO_Abstract_ServantBase *servant = 0,
        TAO_ORB_Core *orb_core = 0);

    virtual ~AMI_Content_IteratorHandler (void);

  private:
    // Private and unimplemented for concrete interfaces.
    AMI_Content_IteratorHandler (const AMI_Content_IteratorHandler &);

    void operator= (const AMI_Content_IteratorHandler &);
  };

  // TAO_IDL - Generated from
  // be/be_visitor_typecode/typecode_decl.cpp:34

  extern  ::CORBA::TypeCode_ptr const _tc_AMI_Content_IteratorHandler;

  // TAO_IDL - Generated from
  // be/be_visitor_exception/exception_ch.cpp:41

  class  Error_Result : public ::CORBA::UserException
  {
  public:
    ::CORBA::Short status;

    Error_Result (void);
    Error_Result (const Error_Result &);
    ~Error_Result (void);

    Error_Result &operator= (const Error_Result &);

    static void _tao_any_destructor (void *);

    static Error_Result *_downcast ( ::CORBA::Exception *);
    static const Error_Result *_downcast ( ::CORBA::Exception const *);

    static ::CORBA::Exception *_alloc (void);

    virtual ::CORBA::Exception *_tao_duplicate (void) const;

    virtual void _raise (void) const;

    virtual void _tao_encode (TAO_OutputCDR &cdr) const;
    virtual void _tao_decode (TAO_InputCDR &cdr);

    // TAO_IDL - Generated from
    // be/be_visitor_exception/exception_ctor.cpp:51

    Error_Result (
        ::CORBA::Short _tao_status);

    virtual ::CORBA::TypeCode_ptr _tao_type (void) const;
  };

  // TAO_IDL - Generated from
  // be/be_visitor_typecode/typecode_decl.cpp:34

  extern  ::CORBA::TypeCode_ptr const _tc_Error_Result;

  // TAO_IDL - Generated from
  // be/be_type.cpp:258

  struct Metadata_Type;

  typedef
    ::TAO_Var_Var_T<
        Metadata_Type
      >
    Metadata_Type_var;

  typedef
    ::TAO_Out_T<
        Metadata_Type
      >
    Metadata_Type_out;

  // TAO_IDL - Generated from
  // be/be_visitor_structure/structure_ch.cpp:48

  struct  Metadata_Type
  {

    // TAO_IDL - Generated from
    // be/be_type.cpp:304


    typedef Metadata_Type_var _var_type;
    typedef Metadata_Type_out _out_type;

    static void _tao_any_destructor (void *);

    ::TAO::String_Manager modification_date;
    ::TAO::String_Manager content_type;
  };

  // TAO_IDL - Generated from
  // be/be_visitor_typecode/typecode_decl.cpp:34

  extern  ::CORBA::TypeCode_ptr const _tc_Metadata_Type;

  // TAO_IDL - Generated from
  // be/be_interface.cpp:748

#if !defined (_WEB_SERVER_ITERATOR_FACTORY__VAR_OUT_CH_)
#define _WEB_SERVER_ITERATOR_FACTORY__VAR_OUT_CH_

  class AMI_Iterator_FactoryHandler;
  typedef AMI_Iterator_FactoryHandler *AMI_Iterator_FactoryHandler_ptr;

  class Iterator_Factory;
  typedef Iterator_Factory *Iterator_Factory_ptr;

  typedef
    TAO_Objref_Var_T<
        Iterator_Factory
      >
    Iterator_Factory_var;

  typedef
    TAO_Objref_Out_T<
        Iterator_Factory
      >
    Iterator_Factory_out;

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // be/be_visitor_interface/interface_ch.cpp:40

  class  Iterator_Factory
    : public virtual ::CORBA::Object
  {
  public:
    friend class TAO::Narrow_Utils<Iterator_Factory>;

    // TAO_IDL - Generated from
    // be/be_type.cpp:304

    typedef Iterator_Factory_ptr _ptr_type;
    typedef Iterator_Factory_var _var_type;
    typedef Iterator_Factory_out _out_type;

    static void _tao_any_destructor (void *);

    // The static operations.
    static Iterator_Factory_ptr _duplicate (Iterator_Factory_ptr obj);

    static void _tao_release (Iterator_Factory_ptr obj);

    static Iterator_Factory_ptr _narrow (::CORBA::Object_ptr obj);
    static Iterator_Factory_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
    static Iterator_Factory_ptr _nil (void);

    virtual void get_iterator (
      const char * pathname,
      ::Web_Server::Content_Iterator_out contents,
      ::Web_Server::Metadata_Type_out metadata);

    virtual void sendc_get_iterator (
      ::Web_Server::AMI_Iterator_FactoryHandler_ptr ami_handler,
      const char * pathname);

    // TAO_IDL - Generated from
    // be/be_visitor_interface/interface_ch.cpp:137

    virtual ::CORBA::Boolean _is_a (const char *type_id);
    virtual const char* _interface_repository_id (void) const;
    virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);

  protected:
    // Concrete interface only.
    Iterator_Factory (void);

    // Concrete non-local interface only.
    Iterator_Factory (
        ::IOP::IOR *ior,
        TAO_ORB_Core *orb_core);

    // Non-local interface only.
    Iterator_Factory (
        TAO_Stub *objref,
        ::CORBA::Boolean _tao_collocated = false,
        TAO_Abstract_ServantBase *servant = 0,
        TAO_ORB_Core *orb_core = 0);

    virtual ~Iterator_Factory (void);

  private:
    // Private and unimplemented for concrete interfaces.
    Iterator_Factory (const Iterator_Factory &);

    void operator= (const Iterator_Factory &);
  };

  // TAO_IDL - Generated from
  // be/be_visitor_typecode/typecode_decl.cpp:34

  extern  ::CORBA::TypeCode_ptr const _tc_Iterator_Factory;

  // TAO_IDL - Generated from
  // be/be_interface.cpp:748

#if !defined (_WEB_SERVER_AMI_ITERATOR_FACTORYHANDLER__VAR_OUT_CH_)
#define _WEB_SERVER_AMI_ITERATOR_FACTORYHANDLER__VAR_OUT_CH_

  class AMI_Iterator_FactoryHandler;
  typedef AMI_Iterator_FactoryHandler *AMI_Iterator_FactoryHandler_ptr;

  typedef
    TAO_Objref_Var_T<
        AMI_Iterator_FactoryHandler
      >
    AMI_Iterator_FactoryHandler_var;

  typedef
    TAO_Objref_Out_T<
        AMI_Iterator_FactoryHandler
      >
    AMI_Iterator_FactoryHandler_out;

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // be/be_visitor_interface/interface_ch.cpp:40

  class  AMI_Iterator_FactoryHandler
    : public virtual ::Messaging::ReplyHandler

  {
  public:
    friend class TAO::Narrow_Utils<AMI_Iterator_FactoryHandler>;

    // TAO_IDL - Generated from
    // be/be_type.cpp:304

    typedef AMI_Iterator_FactoryHandler_ptr _ptr_type;
    typedef AMI_Iterator_FactoryHandler_var _var_type;
    typedef AMI_Iterator_FactoryHandler_out _out_type;

    static void _tao_any_destructor (void *);

    // The static operations.
    static AMI_Iterator_FactoryHandler_ptr _duplicate (AMI_Iterator_FactoryHandler_ptr obj);

    static void _tao_release (AMI_Iterator_FactoryHandler_ptr obj);

    static AMI_Iterator_FactoryHandler_ptr _narrow (::CORBA::Object_ptr obj);
    static AMI_Iterator_FactoryHandler_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
    static AMI_Iterator_FactoryHandler_ptr _nil (void);

    virtual void get_iterator (
      ::Web_Server::Content_Iterator_ptr contents,
      const ::Web_Server::Metadata_Type & metadata);

    static void
    get_iterator_reply_stub (
      TAO_InputCDR &_tao_reply_cdr,
      ::Messaging::ReplyHandler_ptr _tao_reply_handler,
      ::CORBA::ULong reply_status);

    virtual void get_iterator_excep (
      ::Messaging::ExceptionHolder * excep_holder);

    // TAO_IDL - Generated from
    // be/be_visitor_interface/interface_ch.cpp:137

    virtual ::CORBA::Boolean _is_a (const char *type_id);
    virtual const char* _interface_repository_id (void) const;
    virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);

  protected:
    // Concrete interface only.
    AMI_Iterator_FactoryHandler (void);

    // Concrete non-local interface only.
    AMI_Iterator_FactoryHandler (
        ::IOP::IOR *ior,
        TAO_ORB_Core *orb_core);

    // Non-local interface only.
    AMI_Iterator_FactoryHandler (
        TAO_Stub *objref,
        ::CORBA::Boolean _tao_collocated = false,
        TAO_Abstract_ServantBase *servant = 0,
        TAO_ORB_Core *orb_core = 0);

    virtual ~AMI_Iterator_FactoryHandler (void);

  private:
    // Private and unimplemented for concrete interfaces.
    AMI_Iterator_FactoryHandler (const AMI_Iterator_FactoryHandler &);

    void operator= (const AMI_Iterator_FactoryHandler &);
  };

  // TAO_IDL - Generated from
  // be/be_visitor_typecode/typecode_decl.cpp:34

  extern  ::CORBA::TypeCode_ptr const _tc_AMI_Iterator_FactoryHandler;

// TAO_IDL - Generated from
// be/be_visitor_module/module_ch.cpp:64

} // module Web_Server

// TAO_IDL - Generated from
// be/be_visitor_arg_traits.cpp:66

TAO_BEGIN_VERSIONED_NAMESPACE_DECL


// Arg traits specializations.
namespace TAO
{

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:306

#if !defined (_MESSAGING_EXCEPTIONHOLDER__ARG_TRAITS_)
#define _MESSAGING_EXCEPTIONHOLDER__ARG_TRAITS_

  template<>
  class Arg_Traits< ::Messaging::ExceptionHolder>
    : public
        Object_Arg_Traits_T<
            ::Messaging::ExceptionHolder *,
            ::Messaging::ExceptionHolder_var,
            ::Messaging::ExceptionHolder_out,
            TAO::Value_Traits<Messaging::ExceptionHolder>,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:683

  template<>
  class Arg_Traits< ::Web_Server::Chunk_Type>
    : public
        Var_Size_Arg_Traits_T<
            ::Web_Server::Chunk_Type,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:145

#if !defined (_WEB_SERVER_CONTENT_ITERATOR__ARG_TRAITS_)
#define _WEB_SERVER_CONTENT_ITERATOR__ARG_TRAITS_

  template<>
  class  Arg_Traits< ::Web_Server::Content_Iterator>
    : public
        Object_Arg_Traits_T<
            ::Web_Server::Content_Iterator_ptr,
            ::Web_Server::Content_Iterator_var,
            ::Web_Server::Content_Iterator_out,
            TAO::Objref_Traits<Web_Server::Content_Iterator>,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:145

#if !defined (_WEB_SERVER_AMI_CONTENT_ITERATORHANDLER__ARG_TRAITS_)
#define _WEB_SERVER_AMI_CONTENT_ITERATORHANDLER__ARG_TRAITS_

  template<>
  class  Arg_Traits< ::Web_Server::AMI_Content_IteratorHandler>
    : public
        Object_Arg_Traits_T<
            ::Web_Server::AMI_Content_IteratorHandler_ptr,
            ::Web_Server::AMI_Content_IteratorHandler_var,
            ::Web_Server::AMI_Content_IteratorHandler_out,
            TAO::Objref_Traits<Web_Server::AMI_Content_IteratorHandler>,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:945

  template<>
  class Arg_Traits< ::Web_Server::Metadata_Type>
    : public
        Var_Size_Arg_Traits_T<
            ::Web_Server::Metadata_Type,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:145

#if !defined (_WEB_SERVER_ITERATOR_FACTORY__ARG_TRAITS_)
#define _WEB_SERVER_ITERATOR_FACTORY__ARG_TRAITS_

  template<>
  class  Arg_Traits< ::Web_Server::Iterator_Factory>
    : public
        Object_Arg_Traits_T<
            ::Web_Server::Iterator_Factory_ptr,
            ::Web_Server::Iterator_Factory_var,
            ::Web_Server::Iterator_Factory_out,
            TAO::Objref_Traits<Web_Server::Iterator_Factory>,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:145

#if !defined (_WEB_SERVER_AMI_ITERATOR_FACTORYHANDLER__ARG_TRAITS_)
#define _WEB_SERVER_AMI_ITERATOR_FACTORYHANDLER__ARG_TRAITS_

  template<>
  class  Arg_Traits< ::Web_Server::AMI_Iterator_FactoryHandler>
    : public
        Object_Arg_Traits_T<
            ::Web_Server::AMI_Iterator_FactoryHandler_ptr,
            ::Web_Server::AMI_Iterator_FactoryHandler_var,
            ::Web_Server::AMI_Iterator_FactoryHandler_out,
            TAO::Objref_Traits<Web_Server::AMI_Iterator_FactoryHandler>,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

#endif /* end #if !defined */
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_valuetype/obv_module.cpp:44

namespace OBV_Web_Server
{
}

// TAO_IDL - Generated from
// be/be_visitor_traits.cpp:60

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Traits specializations.
namespace TAO
{

#if !defined (_WEB_SERVER_CONTENT_ITERATOR__TRAITS_)
#define _WEB_SERVER_CONTENT_ITERATOR__TRAITS_

  template<>
  struct  Objref_Traits< ::Web_Server::Content_Iterator>
  {
    static ::Web_Server::Content_Iterator_ptr duplicate (
        ::Web_Server::Content_Iterator_ptr p);
    static void release (
        ::Web_Server::Content_Iterator_ptr p);
    static ::Web_Server::Content_Iterator_ptr nil (void);
    static ::CORBA::Boolean marshal (
        const ::Web_Server::Content_Iterator_ptr p,
        TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_WEB_SERVER_AMI_CONTENT_ITERATORHANDLER__TRAITS_)
#define _WEB_SERVER_AMI_CONTENT_ITERATORHANDLER__TRAITS_

  template<>
  struct  Objref_Traits< ::Web_Server::AMI_Content_IteratorHandler>
  {
    static ::Web_Server::AMI_Content_IteratorHandler_ptr duplicate (
        ::Web_Server::AMI_Content_IteratorHandler_ptr p);
    static void release (
        ::Web_Server::AMI_Content_IteratorHandler_ptr p);
    static ::Web_Server::AMI_Content_IteratorHandler_ptr nil (void);
    static ::CORBA::Boolean marshal (
        const ::Web_Server::AMI_Content_IteratorHandler_ptr p,
        TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_WEB_SERVER_ITERATOR_FACTORY__TRAITS_)
#define _WEB_SERVER_ITERATOR_FACTORY__TRAITS_

  template<>
  struct  Objref_Traits< ::Web_Server::Iterator_Factory>
  {
    static ::Web_Server::Iterator_Factory_ptr duplicate (
        ::Web_Server::Iterator_Factory_ptr p);
    static void release (
        ::Web_Server::Iterator_Factory_ptr p);
    static ::Web_Server::Iterator_Factory_ptr nil (void);
    static ::CORBA::Boolean marshal (
        const ::Web_Server::Iterator_Factory_ptr p,
        TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_WEB_SERVER_AMI_ITERATOR_FACTORYHANDLER__TRAITS_)
#define _WEB_SERVER_AMI_ITERATOR_FACTORYHANDLER__TRAITS_

  template<>
  struct  Objref_Traits< ::Web_Server::AMI_Iterator_FactoryHandler>
  {
    static ::Web_Server::AMI_Iterator_FactoryHandler_ptr duplicate (
        ::Web_Server::AMI_Iterator_FactoryHandler_ptr p);
    static void release (
        ::Web_Server::AMI_Iterator_FactoryHandler_ptr p);
    static ::Web_Server::AMI_Iterator_FactoryHandler_ptr nil (void);
    static ::CORBA::Boolean marshal (
        const ::Web_Server::AMI_Iterator_FactoryHandler_ptr p,
        TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */
}
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_sequence/any_op_ch.cpp:47



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace Web_Server
{
   void operator<<= ( ::CORBA::Any &, const ::Web_Server::Chunk_Type &); // copying version
   void operator<<= ( ::CORBA::Any &, ::Web_Server::Chunk_Type*); // noncopying version
   ::CORBA::Boolean operator>>= (const ::CORBA::Any &, ::Web_Server::Chunk_Type *&); // deprecated
   ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const ::Web_Server::Chunk_Type *&);
}

#else


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 void operator<<= ( ::CORBA::Any &, const Web_Server::Chunk_Type &); // copying version
 void operator<<= ( ::CORBA::Any &, Web_Server::Chunk_Type*); // noncopying version
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, Web_Server::Chunk_Type *&); // deprecated
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const Web_Server::Chunk_Type *&);
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_interface/any_op_ch.cpp:41



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace Web_Server
{
   void operator<<= ( ::CORBA::Any &, Content_Iterator_ptr); // copying
   void operator<<= ( ::CORBA::Any &, Content_Iterator_ptr *); // non-copying
   ::CORBA::Boolean operator>>= (const ::CORBA::Any &, Content_Iterator_ptr &);
}

#else


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 void operator<<= (::CORBA::Any &, Web_Server::Content_Iterator_ptr); // copying
 void operator<<= (::CORBA::Any &, Web_Server::Content_Iterator_ptr *); // non-copying
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, Web_Server::Content_Iterator_ptr &);
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_interface/any_op_ch.cpp:41



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace Web_Server
{
   void operator<<= ( ::CORBA::Any &, AMI_Content_IteratorHandler_ptr); // copying
   void operator<<= ( ::CORBA::Any &, AMI_Content_IteratorHandler_ptr *); // non-copying
   ::CORBA::Boolean operator>>= (const ::CORBA::Any &, AMI_Content_IteratorHandler_ptr &);
}

#else


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 void operator<<= (::CORBA::Any &, Web_Server::AMI_Content_IteratorHandler_ptr); // copying
 void operator<<= (::CORBA::Any &, Web_Server::AMI_Content_IteratorHandler_ptr *); // non-copying
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, Web_Server::AMI_Content_IteratorHandler_ptr &);
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_exception/any_op_ch.cpp:38

#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace Web_Server
{


   void operator<<= (::CORBA::Any &, const ::Web_Server::Error_Result &); // copying version
   void operator<<= (::CORBA::Any &, ::Web_Server::Error_Result*); // noncopying version
   ::CORBA::Boolean operator>>= (const ::CORBA::Any &, ::Web_Server::Error_Result *&); // deprecated
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const ::Web_Server::Error_Result *&);
}

#else


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



 void operator<<= (::CORBA::Any &, const Web_Server::Error_Result &); // copying version
 void operator<<= (::CORBA::Any &, Web_Server::Error_Result*); // noncopying version
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, Web_Server::Error_Result *&); // deprecated
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const Web_Server::Error_Result *&);
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_structure/any_op_ch.cpp:42



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace Web_Server
{
   void operator<<= (::CORBA::Any &, const ::Web_Server::Metadata_Type &); // copying version
   void operator<<= (::CORBA::Any &, ::Web_Server::Metadata_Type*); // noncopying version
   ::CORBA::Boolean operator>>= (const ::CORBA::Any &, ::Web_Server::Metadata_Type *&); // deprecated
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const ::Web_Server::Metadata_Type *&);
}

#else


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 void operator<<= (::CORBA::Any &, const Web_Server::Metadata_Type &); // copying version
 void operator<<= (::CORBA::Any &, Web_Server::Metadata_Type*); // noncopying version
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, Web_Server::Metadata_Type *&); // deprecated
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const Web_Server::Metadata_Type *&);
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_interface/any_op_ch.cpp:41



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace Web_Server
{
   void operator<<= ( ::CORBA::Any &, Iterator_Factory_ptr); // copying
   void operator<<= ( ::CORBA::Any &, Iterator_Factory_ptr *); // non-copying
   ::CORBA::Boolean operator>>= (const ::CORBA::Any &, Iterator_Factory_ptr &);
}

#else


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 void operator<<= (::CORBA::Any &, Web_Server::Iterator_Factory_ptr); // copying
 void operator<<= (::CORBA::Any &, Web_Server::Iterator_Factory_ptr *); // non-copying
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, Web_Server::Iterator_Factory_ptr &);
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_interface/any_op_ch.cpp:41



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace Web_Server
{
   void operator<<= ( ::CORBA::Any &, AMI_Iterator_FactoryHandler_ptr); // copying
   void operator<<= ( ::CORBA::Any &, AMI_Iterator_FactoryHandler_ptr *); // non-copying
   ::CORBA::Boolean operator>>= (const ::CORBA::Any &, AMI_Iterator_FactoryHandler_ptr &);
}

#else


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 void operator<<= (::CORBA::Any &, Web_Server::AMI_Iterator_FactoryHandler_ptr); // copying
 void operator<<= (::CORBA::Any &, Web_Server::AMI_Iterator_FactoryHandler_ptr *); // non-copying
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, Web_Server::AMI_Iterator_FactoryHandler_ptr &);
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_sequence/cdr_op_ch.cpp:65

#if !defined _TAO_CDR_OP_Web_Server_Chunk_Type_H_
#define _TAO_CDR_OP_Web_Server_Chunk_Type_H_
TAO_BEGIN_VERSIONED_NAMESPACE_DECL


 ::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Web_Server::Chunk_Type &_tao_sequence);
 ::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Web_Server::Chunk_Type &_tao_sequence);

TAO_END_VERSIONED_NAMESPACE_DECL



#endif /* _TAO_CDR_OP_Web_Server_Chunk_Type_H_ */

// TAO_IDL - Generated from
// be/be_visitor_interface/cdr_op_ch.cpp:41

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 ::CORBA::Boolean operator<< (TAO_OutputCDR &, const Web_Server::Content_Iterator_ptr );
 ::CORBA::Boolean operator>> (TAO_InputCDR &, Web_Server::Content_Iterator_ptr &);

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_interface/cdr_op_ch.cpp:41

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 ::CORBA::Boolean operator<< (TAO_OutputCDR &, const Web_Server::AMI_Content_IteratorHandler_ptr );
 ::CORBA::Boolean operator>> (TAO_InputCDR &, Web_Server::AMI_Content_IteratorHandler_ptr &);

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_exception/cdr_op_ch.cpp:37
TAO_BEGIN_VERSIONED_NAMESPACE_DECL



 ::CORBA::Boolean operator<< (TAO_OutputCDR &, const Web_Server::Error_Result &);
 ::CORBA::Boolean operator>> (TAO_InputCDR &, Web_Server::Error_Result &);

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_structure/cdr_op_ch.cpp:43


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 ::CORBA::Boolean operator<< (TAO_OutputCDR &, const Web_Server::Metadata_Type &);
 ::CORBA::Boolean operator>> (TAO_InputCDR &, Web_Server::Metadata_Type &);

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_interface/cdr_op_ch.cpp:41

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 ::CORBA::Boolean operator<< (TAO_OutputCDR &, const Web_Server::Iterator_Factory_ptr );
 ::CORBA::Boolean operator>> (TAO_InputCDR &, Web_Server::Iterator_Factory_ptr &);

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_interface/cdr_op_ch.cpp:41

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 ::CORBA::Boolean operator<< (TAO_OutputCDR &, const Web_Server::AMI_Iterator_FactoryHandler_ptr );
 ::CORBA::Boolean operator>> (TAO_InputCDR &, Web_Server::AMI_Iterator_FactoryHandler_ptr &);

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_codegen.cpp:1700
#if defined (__ACE_INLINE__)
#include "Web_ServerC.inl"
#endif /* defined INLINE */

#include /**/ "ace/post.h"

#endif /* ifndef */

