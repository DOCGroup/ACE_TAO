// -*- C++ -*-
/**
 * Code generated by the The ACE ORB (TAO) IDL Compiler v2.4.1
 * TAO and the TAO IDL Compiler have been developed by:
 *       Center for Distributed Object Computing
 *       Washington University
 *       St. Louis, MO
 *       USA
 *       http://www.cs.wustl.edu/~schmidt/doc-center.html
 * and
 *       Distributed Object Computing Laboratory
 *       University of California at Irvine
 *       Irvine, CA
 *       USA
 * and
 *       Institute for Software Integrated Systems
 *       Vanderbilt University
 *       Nashville, TN
 *       USA
 *       http://www.isis.vanderbilt.edu/
 *
 * Information about TAO is available at:
 *     http://www.dre.vanderbilt.edu/~schmidt/TAO.html
 **/

// TAO_IDL - Generated from
// be/be_codegen.cpp:373


#include "Push_Web_ServerC.h"
#include "tao/AnyTypeCode/Null_RefCount_Policy.h"
#include "tao/AnyTypeCode/TypeCode_Constants.h"
#include "tao/AnyTypeCode/Alias_TypeCode_Static.h"
#include "tao/AnyTypeCode/Objref_TypeCode_Static.h"
#include "tao/AnyTypeCode/Sequence_TypeCode_Static.h"
#include "tao/AnyTypeCode/String_TypeCode_Static.h"
#include "tao/AnyTypeCode/Struct_TypeCode_Static.h"
#include "tao/AnyTypeCode/TypeCode_Struct_Field.h"
#include "tao/AnyTypeCode/Value_TypeCode_Static.h"
#include "tao/AnyTypeCode/TypeCode_Value_Field.h"
#include "tao/CDR.h"
#include "tao/Exception_Data.h"
#include "tao/Invocation_Adapter.h"
#include "tao/Messaging/Asynch_Invocation_Adapter.h"
#include "tao/Messaging/ExceptionHolder_i.h"
#include "tao/Valuetype/ValueFactory.h"
#include "tao/Object_T.h"
#include "tao/ORB_Core.h"
#include "tao/SystemException.h"
#include "tao/CDR.h"
#include "tao/AnyTypeCode/Any.h"
#include "tao/AnyTypeCode/Any_Impl_T.h"
#include "tao/AnyTypeCode/Any_Dual_Impl_T.h"
#include "ace/OS_NS_string.h"

#if !defined (__ACE_INLINE__)
#include "Push_Web_ServerC.inl"
#endif /* !defined INLINE */

// TAO_IDL - Generated from
// be/be_visitor_sequence/sequence_cs.cpp:70

#if !defined (_WEB_SERVER_CHUNK_TYPE_CS_)
#define _WEB_SERVER_CHUNK_TYPE_CS_

Web_Server::Chunk_Type::Chunk_Type (void)
{}

Web_Server::Chunk_Type::Chunk_Type (
    ::CORBA::ULong max)
  : ::TAO::unbounded_value_sequence<
        ::CORBA::Octet
      > (max)
{}

Web_Server::Chunk_Type::Chunk_Type (
    ::CORBA::ULong max,
    ::CORBA::ULong length,
    ::CORBA::Octet * buffer,
    ::CORBA::Boolean release
  )
  : ::TAO::unbounded_value_sequence<
        ::CORBA::Octet
      >
    (max, length, buffer, release)
{}

Web_Server::Chunk_Type::Chunk_Type (
    const Chunk_Type &seq)
  : ::TAO::unbounded_value_sequence<
        ::CORBA::Octet
      > (seq)
{}

Web_Server::Chunk_Type::~Chunk_Type (void)
{}

void Web_Server::Chunk_Type::_tao_any_destructor (
    void * _tao_void_pointer)
{
  Chunk_Type * _tao_tmp_pointer =
    static_cast<Chunk_Type *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

#endif /* end #if !defined */

// TAO_IDL - Generated from
// be/be_visitor_typecode/alias_typecode.cpp:49



// TAO_IDL - Generated from
// be/be_visitor_typecode/typecode_defn.cpp:461


#ifndef _TAO_TYPECODE_Web_Server_Chunk_Type_GUARD
#define _TAO_TYPECODE_Web_Server_Chunk_Type_GUARD

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

namespace TAO
{
  namespace TypeCode
  {
    namespace
    {
      TAO::TypeCode::Sequence< ::CORBA::TypeCode_ptr const *,
                              TAO::Null_RefCount_Policy>
        Web_Server_Chunk_Type_0 (
          ::CORBA::tk_sequence,
          &CORBA::_tc_octet,
          0U);

      ::CORBA::TypeCode_ptr const tc_Web_Server_Chunk_Type_0 =
        &Web_Server_Chunk_Type_0;
    }
  }
}

TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_TYPECODE_Web_Server_Chunk_Type_GUARD */

static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_Web_Server_Chunk_Type (
    ::CORBA::tk_alias,
    "IDL:Web_Server/Chunk_Type:1.0",
    "Chunk_Type",
    &TAO::TypeCode::tc_Web_Server_Chunk_Type_0);


namespace Web_Server
{
  ::CORBA::TypeCode_ptr const _tc_Chunk_Type =
    &_tao_tc_Web_Server_Chunk_Type;
}

// TAO_IDL - Generated from
// be/be_visitor_interface/interface_cs.cpp:48

// Traits specializations for Web_Server::Callback.

Web_Server::Callback_ptr
TAO::Objref_Traits<Web_Server::Callback>::duplicate (
    Web_Server::Callback_ptr p)
{
  return Web_Server::Callback::_duplicate (p);
}

void
TAO::Objref_Traits<Web_Server::Callback>::release (
    Web_Server::Callback_ptr p)
{
  ::CORBA::release (p);
}

Web_Server::Callback_ptr
TAO::Objref_Traits<Web_Server::Callback>::nil (void)
{
  return Web_Server::Callback::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<Web_Server::Callback>::marshal (
    const Web_Server::Callback_ptr p,
    TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:88

void
Web_Server::Callback::next_chunk (
  const ::Web_Server::Chunk_Type & chunk,
  ::CORBA::Boolean last_chunk)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }

  TAO::Arg_Traits< void>::ret_val _tao_retval;
  TAO::Arg_Traits< ::Web_Server::Chunk_Type>::in_arg_val _tao_chunk (chunk);
  TAO::Arg_Traits< ::ACE_InputCDR::to_boolean>::in_arg_val _tao_last_chunk (last_chunk);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_chunk,
      &_tao_last_chunk
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      3,
      "next_chunk",
      10,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY

    );

  _tao_call.invoke (0, 0);
}

// TAO_IDL - Generated from
// be/be_visitor_operation/ami_cs.cpp:55

void
Web_Server::Callback::sendc_next_chunk (
  ::Web_Server::AMI_CallbackHandler_ptr ami_handler,
  const ::Web_Server::Chunk_Type & chunk,
  ::CORBA::Boolean last_chunk)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }



  TAO::Arg_Traits<void>::ret_val _tao_retval;
  TAO::Arg_Traits< ::Web_Server::Chunk_Type>::in_arg_val _tao_chunk (chunk);
  TAO::Arg_Traits< ::ACE_InputCDR::to_boolean>::in_arg_val _tao_last_chunk (last_chunk);

  TAO::Argument *_the_tao_operation_signature[] =
    {
      &_tao_retval,
      &_tao_chunk,
      &_tao_last_chunk
    };

  TAO::Asynch_Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      3,
      "next_chunk",
      10,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY
    );

  _tao_call.invoke (
      ami_handler,
      &Web_Server::AMI_CallbackHandler::next_chunk_reply_stub
    );
}

Web_Server::Callback::Callback (void)
{
}

Web_Server::Callback::~Callback (void)
{
}

void
Web_Server::Callback::_tao_any_destructor (void *_tao_void_pointer)
{
  Callback *_tao_tmp_pointer =
    static_cast<Callback *> (_tao_void_pointer);
  ::CORBA::release (_tao_tmp_pointer);
}

Web_Server::Callback_ptr
Web_Server::Callback::_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return
    TAO::Narrow_Utils<Callback>::narrow (
        _tao_objref,
        "IDL:Web_Server/Callback:1.0");
}

Web_Server::Callback_ptr
Web_Server::Callback::_unchecked_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return
    TAO::Narrow_Utils<Callback>::unchecked_narrow (
        _tao_objref);
}

Web_Server::Callback_ptr
Web_Server::Callback::_nil (void)
{
  return 0;
}

Web_Server::Callback_ptr
Web_Server::Callback::_duplicate (Callback_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  return obj;
}

void
Web_Server::Callback::_tao_release (Callback_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
Web_Server::Callback::_is_a (const char *value)
{
  if (
      ACE_OS::strcmp (
          value,
          "IDL:Web_Server/Callback:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        ) == 0
    )
    {
      return true; // success using local knowledge
    }
  else
    {
      return this->::CORBA::Object::_is_a (value);
    }
}

const char* Web_Server::Callback::_interface_repository_id (void) const
{
  return "IDL:Web_Server/Callback:1.0";
}

::CORBA::Boolean
Web_Server::Callback::marshal (TAO_OutputCDR &cdr)
{
  return (cdr << this);
}

// TAO_IDL - Generated from
// be/be_visitor_typecode/objref_typecode.cpp:70

static TAO::TypeCode::Objref<char const *,
                             TAO::Null_RefCount_Policy>
  _tao_tc_Web_Server_Callback (
    ::CORBA::tk_objref,
    "IDL:Web_Server/Callback:1.0",
    "Callback");


namespace Web_Server
{
  ::CORBA::TypeCode_ptr const _tc_Callback =
    &_tao_tc_Web_Server_Callback;
}

// TAO_IDL - Generated from
// be/be_visitor_interface/interface_cs.cpp:48

// Traits specializations for Web_Server::AMI_CallbackHandler.

Web_Server::AMI_CallbackHandler_ptr
TAO::Objref_Traits<Web_Server::AMI_CallbackHandler>::duplicate (
    Web_Server::AMI_CallbackHandler_ptr p)
{
  return Web_Server::AMI_CallbackHandler::_duplicate (p);
}

void
TAO::Objref_Traits<Web_Server::AMI_CallbackHandler>::release (
    Web_Server::AMI_CallbackHandler_ptr p)
{
  ::CORBA::release (p);
}

Web_Server::AMI_CallbackHandler_ptr
TAO::Objref_Traits<Web_Server::AMI_CallbackHandler>::nil (void)
{
  return Web_Server::AMI_CallbackHandler::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<Web_Server::AMI_CallbackHandler>::marshal (
    const Web_Server::AMI_CallbackHandler_ptr p,
    TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:88

void
Web_Server::AMI_CallbackHandler::next_chunk (
  void)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }

  TAO::Arg_Traits< void>::ret_val _tao_retval;

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      1,
      "next_chunk",
      10,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY,
      TAO::TAO_TWOWAY_INVOCATION
      ,
      TAO::TAO_SYNCHRONOUS_INVOCATION,
      false
    );

  _tao_call.invoke (0, 0);
}

void
Web_Server::AMI_CallbackHandler::next_chunk_reply_stub (
  TAO_InputCDR &_tao_in,
  ::Messaging::ReplyHandler_ptr _tao_reply_handler,
  ::CORBA::ULong reply_status)
{
  // Retrieve Reply Handler object.
  Web_Server::AMI_CallbackHandler_var _tao_reply_handler_object =
    Web_Server::AMI_CallbackHandler::_narrow (_tao_reply_handler);

  // Exception handling
  switch (reply_status)
  {
    case TAO_AMI_REPLY_OK:
    {
      // Demarshall all the arguments.
      // Invoke the call back method.
      _tao_reply_handler_object->next_chunk (

        );
      break;
    }
    case TAO_AMI_REPLY_USER_EXCEPTION:
    case TAO_AMI_REPLY_SYSTEM_EXCEPTION:
    {
      const ACE_Message_Block* cdr = _tao_in.start ();
      ::CORBA::OctetSeq _tao_marshaled_exception (
          static_cast <CORBA::ULong> (cdr->length ()),
          static_cast <CORBA::ULong> (cdr->length ()),
          reinterpret_cast <unsigned char*> (cdr->rd_ptr ()),
          0
        );
      ::Messaging::ExceptionHolder* exception_holder_ptr = 0;
      ACE_NEW (
          exception_holder_ptr,
          ::TAO::ExceptionHolder (
            (reply_status == TAO_AMI_REPLY_SYSTEM_EXCEPTION),
            _tao_in.byte_order (),
            _tao_marshaled_exception,
            0,
            0,
            _tao_in.char_translator (),
            _tao_in.wchar_translator ())
          );

      ::Messaging::ExceptionHolder_var exception_holder_var = exception_holder_ptr;
      _tao_reply_handler_object->next_chunk_excep (
          exception_holder_var
        );
      break;
    }
    case TAO_AMI_REPLY_NOT_OK:
      // @@ Michael: Not even the spec mentions this case.
      //             We have to think about this case.
      break;
  }
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:88

void
Web_Server::AMI_CallbackHandler::next_chunk_excep (
  ::Messaging::ExceptionHolder * excep_holder)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }

  TAO::Arg_Traits< void>::ret_val _tao_retval;
  TAO::Arg_Traits< ::Messaging::ExceptionHolder>::in_arg_val _tao_excep_holder (excep_holder);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_excep_holder
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      2,
      "next_chunk_excep",
      16,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY

    );

  _tao_call.invoke (0, 0);
}

Web_Server::AMI_CallbackHandler::AMI_CallbackHandler (void)
{
}

Web_Server::AMI_CallbackHandler::~AMI_CallbackHandler (void)
{
}

void
Web_Server::AMI_CallbackHandler::_tao_any_destructor (void *_tao_void_pointer)
{
  AMI_CallbackHandler *_tao_tmp_pointer =
    static_cast<AMI_CallbackHandler *> (_tao_void_pointer);
  ::CORBA::release (_tao_tmp_pointer);
}

Web_Server::AMI_CallbackHandler_ptr
Web_Server::AMI_CallbackHandler::_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return
    TAO::Narrow_Utils<AMI_CallbackHandler>::narrow (
        _tao_objref,
        "IDL:Web_Server/AMI_CallbackHandler:1.0");
}

Web_Server::AMI_CallbackHandler_ptr
Web_Server::AMI_CallbackHandler::_unchecked_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return
    TAO::Narrow_Utils<AMI_CallbackHandler>::unchecked_narrow (
        _tao_objref);
}

Web_Server::AMI_CallbackHandler_ptr
Web_Server::AMI_CallbackHandler::_nil (void)
{
  return 0;
}

Web_Server::AMI_CallbackHandler_ptr
Web_Server::AMI_CallbackHandler::_duplicate (AMI_CallbackHandler_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  return obj;
}

void
Web_Server::AMI_CallbackHandler::_tao_release (AMI_CallbackHandler_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
Web_Server::AMI_CallbackHandler::_is_a (const char *value)
{
  if (
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/Messaging/ReplyHandler:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:Web_Server/AMI_CallbackHandler:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        ) == 0
    )
    {
      return true; // success using local knowledge
    }
  else
    {
      return this->::CORBA::Object::_is_a (value);
    }
}

const char* Web_Server::AMI_CallbackHandler::_interface_repository_id (void) const
{
  return "IDL:Web_Server/AMI_CallbackHandler:1.0";
}

::CORBA::Boolean
Web_Server::AMI_CallbackHandler::marshal (TAO_OutputCDR &cdr)
{
  return (cdr << this);
}

// TAO_IDL - Generated from
// be/be_visitor_typecode/objref_typecode.cpp:70

static TAO::TypeCode::Objref<char const *,
                             TAO::Null_RefCount_Policy>
  _tao_tc_Web_Server_AMI_CallbackHandler (
    ::CORBA::tk_objref,
    "IDL:Web_Server/AMI_CallbackHandler:1.0",
    "AMI_CallbackHandler");


namespace Web_Server
{
  ::CORBA::TypeCode_ptr const _tc_AMI_CallbackHandler =
    &_tao_tc_Web_Server_AMI_CallbackHandler;
}

// TAO_IDL - Generated from
// be/be_visitor_exception/exception_ctor.cpp:51

Web_Server::Error_Result::Error_Result (
    ::CORBA::Short _tao_status)
  : ::CORBA::UserException (
        "IDL:Web_Server/Error_Result:1.0",
        "Error_Result"
      )
{
  this->status = _tao_status;
}



// TAO_IDL - Generated from
// be/be_visitor_exception/exception_cs.cpp:98

Web_Server::Error_Result::Error_Result (void)
  : ::CORBA::UserException (
        "IDL:Web_Server/Error_Result:1.0",
        "Error_Result"
      )
{
}

Web_Server::Error_Result::~Error_Result (void)
{
}

Web_Server::Error_Result::Error_Result (const ::Web_Server::Error_Result &_tao_excp)
  : ::CORBA::UserException (
        _tao_excp._rep_id (),
        _tao_excp._name ()
      )
{
  this->status = _tao_excp.status;
}

Web_Server::Error_Result&
Web_Server::Error_Result::operator= (const ::Web_Server::Error_Result &_tao_excp)
{
  this->::CORBA::UserException::operator= (_tao_excp);
  this->status = _tao_excp.status;
  return *this;
}

void Web_Server::Error_Result::_tao_any_destructor (void *_tao_void_pointer)
{
  Error_Result *_tao_tmp_pointer =
    static_cast<Error_Result *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

Web_Server::Error_Result *
Web_Server::Error_Result::_downcast ( ::CORBA::Exception *_tao_excp)
{
  return dynamic_cast<Error_Result *> (_tao_excp);
}

const Web_Server::Error_Result *
Web_Server::Error_Result::_downcast ( ::CORBA::Exception const *_tao_excp)
{
  return dynamic_cast<const Error_Result *> (_tao_excp);
}

::CORBA::Exception *Web_Server::Error_Result::_alloc (void)
{
  ::CORBA::Exception *retval = 0;
  ACE_NEW_RETURN (retval, ::Web_Server::Error_Result, 0);
  return retval;
}

::CORBA::Exception *
Web_Server::Error_Result::_tao_duplicate (void) const
{
  ::CORBA::Exception *result = 0;
  ACE_NEW_RETURN (
      result,
      ::Web_Server::Error_Result (*this),
      0
    );
  return result;
}

void Web_Server::Error_Result::_raise (void) const
{
  throw *this;
}

void Web_Server::Error_Result::_tao_encode (TAO_OutputCDR &cdr) const
{
  if (!(cdr << *this))
    {
      throw ::CORBA::MARSHAL ();
    }
}

void Web_Server::Error_Result::_tao_decode (TAO_InputCDR &cdr)
{
  if (!(cdr >> *this))
    {
      throw ::CORBA::MARSHAL ();
    }
}

// TAO extension - the virtual _type method.
::CORBA::TypeCode_ptr Web_Server::Error_Result::_tao_type (void) const
{
  return ::Web_Server::_tc_Error_Result;
}

// TAO_IDL - Generated from
// be/be_visitor_typecode/struct_typecode.cpp:86

static TAO::TypeCode::Struct_Field<
  char const *,
  ::CORBA::TypeCode_ptr const *> const
    _tao_fields_Web_Server_Error_Result[] =
      {
        { "status", &CORBA::_tc_short }
      };

static TAO::TypeCode::Struct<
  char const *,
  ::CORBA::TypeCode_ptr const *,
  TAO::TypeCode::Struct_Field<
    char const *,
    ::CORBA::TypeCode_ptr const *> const *,
  TAO::Null_RefCount_Policy>
_tao_tc_Web_Server_Error_Result (
  ::CORBA::tk_except,
  "IDL:Web_Server/Error_Result:1.0",
  "Error_Result",
  _tao_fields_Web_Server_Error_Result,
  1);


namespace Web_Server
{
  ::CORBA::TypeCode_ptr const _tc_Error_Result =
    &_tao_tc_Web_Server_Error_Result;
}

// TAO_IDL - Generated from
// be/be_visitor_typecode/struct_typecode.cpp:86

static TAO::TypeCode::Struct_Field<
  char const *,
  ::CORBA::TypeCode_ptr const *> const
    _tao_fields_Web_Server_Metadata_Type[] =
      {
        { "modification_date", &CORBA::_tc_string },
        { "content_type", &CORBA::_tc_string }
      };

static TAO::TypeCode::Struct<
  char const *,
  ::CORBA::TypeCode_ptr const *,
  TAO::TypeCode::Struct_Field<
    char const *,
    ::CORBA::TypeCode_ptr const *> const *,
  TAO::Null_RefCount_Policy>
_tao_tc_Web_Server_Metadata_Type (
  ::CORBA::tk_struct,
  "IDL:Web_Server/Metadata_Type:1.0",
  "Metadata_Type",
  _tao_fields_Web_Server_Metadata_Type,
  2);


namespace Web_Server
{
  ::CORBA::TypeCode_ptr const _tc_Metadata_Type =
    &_tao_tc_Web_Server_Metadata_Type;
}

// TAO_IDL - Generated from
// be/be_visitor_structure/structure_cs.cpp:56

void
Web_Server::Metadata_Type::_tao_any_destructor (
    void *_tao_void_pointer)
{
  Metadata_Type *_tao_tmp_pointer =
    static_cast<Metadata_Type *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

// TAO_IDL - Generated from
// be/be_visitor_interface/interface_cs.cpp:48

// Traits specializations for Web_Server::Iterator_Factory.

Web_Server::Iterator_Factory_ptr
TAO::Objref_Traits<Web_Server::Iterator_Factory>::duplicate (
    Web_Server::Iterator_Factory_ptr p)
{
  return Web_Server::Iterator_Factory::_duplicate (p);
}

void
TAO::Objref_Traits<Web_Server::Iterator_Factory>::release (
    Web_Server::Iterator_Factory_ptr p)
{
  ::CORBA::release (p);
}

Web_Server::Iterator_Factory_ptr
TAO::Objref_Traits<Web_Server::Iterator_Factory>::nil (void)
{
  return Web_Server::Iterator_Factory::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<Web_Server::Iterator_Factory>::marshal (
    const Web_Server::Iterator_Factory_ptr p,
    TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:88

::Web_Server::Metadata_Type *
Web_Server::Iterator_Factory::register_callback (
  const char * pathname,
  ::Web_Server::Callback_ptr client_callback)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }

  TAO::Arg_Traits< ::Web_Server::Metadata_Type>::ret_val _tao_retval;
  TAO::Arg_Traits< char *>::in_arg_val _tao_pathname (pathname);
  TAO::Arg_Traits< ::Web_Server::Callback>::in_arg_val _tao_client_callback (client_callback);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_pathname,
      &_tao_client_callback
    };

  static TAO::Exception_Data
  _tao_Web_Server_Iterator_Factory_register_callback_exceptiondata [] =
    {
      {
        "IDL:Web_Server/Error_Result:1.0",
        Web_Server::Error_Result::_alloc
#if TAO_HAS_INTERCEPTORS == 1
        , Web_Server::_tc_Error_Result
#endif /* TAO_HAS_INTERCEPTORS */
      }
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      3,
      "register_callback",
      17,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY

    );

  _tao_call.invoke (
      _tao_Web_Server_Iterator_Factory_register_callback_exceptiondata,
      1
    );

  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// be/be_visitor_operation/ami_cs.cpp:55

void
Web_Server::Iterator_Factory::sendc_register_callback (
  ::Web_Server::AMI_Iterator_FactoryHandler_ptr ami_handler,
  const char * pathname,
  ::Web_Server::Callback_ptr client_callback)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }



  TAO::Arg_Traits<void>::ret_val _tao_retval;
  TAO::Arg_Traits< char *>::in_arg_val _tao_pathname (pathname);
  TAO::Arg_Traits< ::Web_Server::Callback>::in_arg_val _tao_client_callback (client_callback);

  TAO::Argument *_the_tao_operation_signature[] =
    {
      &_tao_retval,
      &_tao_pathname,
      &_tao_client_callback
    };

  TAO::Asynch_Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      3,
      "register_callback",
      17,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY
    );

  _tao_call.invoke (
      ami_handler,
      &Web_Server::AMI_Iterator_FactoryHandler::register_callback_reply_stub
    );
}

Web_Server::Iterator_Factory::Iterator_Factory (void)
{
}

Web_Server::Iterator_Factory::~Iterator_Factory (void)
{
}

void
Web_Server::Iterator_Factory::_tao_any_destructor (void *_tao_void_pointer)
{
  Iterator_Factory *_tao_tmp_pointer =
    static_cast<Iterator_Factory *> (_tao_void_pointer);
  ::CORBA::release (_tao_tmp_pointer);
}

Web_Server::Iterator_Factory_ptr
Web_Server::Iterator_Factory::_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return
    TAO::Narrow_Utils<Iterator_Factory>::narrow (
        _tao_objref,
        "IDL:Web_Server/Iterator_Factory:1.0");
}

Web_Server::Iterator_Factory_ptr
Web_Server::Iterator_Factory::_unchecked_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return
    TAO::Narrow_Utils<Iterator_Factory>::unchecked_narrow (
        _tao_objref);
}

Web_Server::Iterator_Factory_ptr
Web_Server::Iterator_Factory::_nil (void)
{
  return 0;
}

Web_Server::Iterator_Factory_ptr
Web_Server::Iterator_Factory::_duplicate (Iterator_Factory_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  return obj;
}

void
Web_Server::Iterator_Factory::_tao_release (Iterator_Factory_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
Web_Server::Iterator_Factory::_is_a (const char *value)
{
  if (
      ACE_OS::strcmp (
          value,
          "IDL:Web_Server/Iterator_Factory:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        ) == 0
    )
    {
      return true; // success using local knowledge
    }
  else
    {
      return this->::CORBA::Object::_is_a (value);
    }
}

const char* Web_Server::Iterator_Factory::_interface_repository_id (void) const
{
  return "IDL:Web_Server/Iterator_Factory:1.0";
}

::CORBA::Boolean
Web_Server::Iterator_Factory::marshal (TAO_OutputCDR &cdr)
{
  return (cdr << this);
}

// TAO_IDL - Generated from
// be/be_visitor_typecode/objref_typecode.cpp:70

static TAO::TypeCode::Objref<char const *,
                             TAO::Null_RefCount_Policy>
  _tao_tc_Web_Server_Iterator_Factory (
    ::CORBA::tk_objref,
    "IDL:Web_Server/Iterator_Factory:1.0",
    "Iterator_Factory");


namespace Web_Server
{
  ::CORBA::TypeCode_ptr const _tc_Iterator_Factory =
    &_tao_tc_Web_Server_Iterator_Factory;
}

// TAO_IDL - Generated from
// be/be_visitor_interface/interface_cs.cpp:48

// Traits specializations for Web_Server::AMI_Iterator_FactoryHandler.

Web_Server::AMI_Iterator_FactoryHandler_ptr
TAO::Objref_Traits<Web_Server::AMI_Iterator_FactoryHandler>::duplicate (
    Web_Server::AMI_Iterator_FactoryHandler_ptr p)
{
  return Web_Server::AMI_Iterator_FactoryHandler::_duplicate (p);
}

void
TAO::Objref_Traits<Web_Server::AMI_Iterator_FactoryHandler>::release (
    Web_Server::AMI_Iterator_FactoryHandler_ptr p)
{
  ::CORBA::release (p);
}

Web_Server::AMI_Iterator_FactoryHandler_ptr
TAO::Objref_Traits<Web_Server::AMI_Iterator_FactoryHandler>::nil (void)
{
  return Web_Server::AMI_Iterator_FactoryHandler::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<Web_Server::AMI_Iterator_FactoryHandler>::marshal (
    const Web_Server::AMI_Iterator_FactoryHandler_ptr p,
    TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:88

void
Web_Server::AMI_Iterator_FactoryHandler::register_callback (
  const ::Web_Server::Metadata_Type & ami_return_val)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }

  TAO::Arg_Traits< void>::ret_val _tao_retval;
  TAO::Arg_Traits< ::Web_Server::Metadata_Type>::in_arg_val _tao_ami_return_val (ami_return_val);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_ami_return_val
    };

  static TAO::Exception_Data
  _tao_Web_Server_AMI_Iterator_FactoryHandler_register_callback_exceptiondata [] =
    {
      {
        "IDL:Web_Server/Error_Result:1.0",
        Web_Server::Error_Result::_alloc
#if TAO_HAS_INTERCEPTORS == 1
        , Web_Server::_tc_Error_Result
#endif /* TAO_HAS_INTERCEPTORS */
      }
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      2,
      "register_callback",
      17,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY

    );

  _tao_call.invoke (
      _tao_Web_Server_AMI_Iterator_FactoryHandler_register_callback_exceptiondata,
      1
    );
}

void
Web_Server::AMI_Iterator_FactoryHandler::register_callback_reply_stub (
  TAO_InputCDR &_tao_in,
  ::Messaging::ReplyHandler_ptr _tao_reply_handler,
  ::CORBA::ULong reply_status)
{
  // Retrieve Reply Handler object.
  Web_Server::AMI_Iterator_FactoryHandler_var _tao_reply_handler_object =
    Web_Server::AMI_Iterator_FactoryHandler::_narrow (_tao_reply_handler);

  // Exception handling
  switch (reply_status)
  {
    case TAO_AMI_REPLY_OK:
    {

      ::Web_Server::Metadata_Type ami_return_val;      // Demarshall all the arguments.
      if (!(

            (_tao_in >> ami_return_val)
         ))
        throw ::CORBA::MARSHAL ();

      // Invoke the call back method.
      _tao_reply_handler_object->register_callback (

          ami_return_val
        );
      break;
    }
    case TAO_AMI_REPLY_USER_EXCEPTION:
    case TAO_AMI_REPLY_SYSTEM_EXCEPTION:
    {
      const ACE_Message_Block* cdr = _tao_in.start ();

      static TAO::Exception_Data exceptions_data [] =
      {
        {
          "IDL:Web_Server/Error_Result:1.0",
          Web_Server::Error_Result::_alloc
#if TAO_HAS_INTERCEPTORS == 1
          , Web_Server::_tc_Error_Result
#endif /* TAO_HAS_INTERCEPTORS */
        }
      };

      ::CORBA::ULong const exceptions_count = 1;

      ::CORBA::OctetSeq _tao_marshaled_exception (
          static_cast <CORBA::ULong> (cdr->length ()),
          static_cast <CORBA::ULong> (cdr->length ()),
          reinterpret_cast <unsigned char*> (cdr->rd_ptr ()),
          0
        );
      ::Messaging::ExceptionHolder* exception_holder_ptr = 0;
      ACE_NEW (
          exception_holder_ptr,
          ::TAO::ExceptionHolder (
            (reply_status == TAO_AMI_REPLY_SYSTEM_EXCEPTION),
            _tao_in.byte_order (),
            _tao_marshaled_exception,
            exceptions_data,
            exceptions_count,
            _tao_in.char_translator (),
            _tao_in.wchar_translator ())
          );

      ::Messaging::ExceptionHolder_var exception_holder_var = exception_holder_ptr;
      _tao_reply_handler_object->register_callback_excep (
          exception_holder_var
        );
      break;
    }
    case TAO_AMI_REPLY_NOT_OK:
      // @@ Michael: Not even the spec mentions this case.
      //             We have to think about this case.
      break;
  }
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:88

void
Web_Server::AMI_Iterator_FactoryHandler::register_callback_excep (
  ::Messaging::ExceptionHolder * excep_holder)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }

  TAO::Arg_Traits< void>::ret_val _tao_retval;
  TAO::Arg_Traits< ::Messaging::ExceptionHolder>::in_arg_val _tao_excep_holder (excep_holder);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_excep_holder
    };

  static TAO::Exception_Data
  _tao_Web_Server_AMI_Iterator_FactoryHandler_register_callback_excep_exceptiondata [] =
    {
      {
        "IDL:Web_Server/Error_Result:1.0",
        Web_Server::Error_Result::_alloc
#if TAO_HAS_INTERCEPTORS == 1
        , Web_Server::_tc_Error_Result
#endif /* TAO_HAS_INTERCEPTORS */
      }
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      2,
      "register_callback_excep",
      23,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY

    );

  _tao_call.invoke (
      _tao_Web_Server_AMI_Iterator_FactoryHandler_register_callback_excep_exceptiondata,
      1
    );
}

Web_Server::AMI_Iterator_FactoryHandler::AMI_Iterator_FactoryHandler (void)
{
}

Web_Server::AMI_Iterator_FactoryHandler::~AMI_Iterator_FactoryHandler (void)
{
}

void
Web_Server::AMI_Iterator_FactoryHandler::_tao_any_destructor (void *_tao_void_pointer)
{
  AMI_Iterator_FactoryHandler *_tao_tmp_pointer =
    static_cast<AMI_Iterator_FactoryHandler *> (_tao_void_pointer);
  ::CORBA::release (_tao_tmp_pointer);
}

Web_Server::AMI_Iterator_FactoryHandler_ptr
Web_Server::AMI_Iterator_FactoryHandler::_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return
    TAO::Narrow_Utils<AMI_Iterator_FactoryHandler>::narrow (
        _tao_objref,
        "IDL:Web_Server/AMI_Iterator_FactoryHandler:1.0");
}

Web_Server::AMI_Iterator_FactoryHandler_ptr
Web_Server::AMI_Iterator_FactoryHandler::_unchecked_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return
    TAO::Narrow_Utils<AMI_Iterator_FactoryHandler>::unchecked_narrow (
        _tao_objref);
}

Web_Server::AMI_Iterator_FactoryHandler_ptr
Web_Server::AMI_Iterator_FactoryHandler::_nil (void)
{
  return 0;
}

Web_Server::AMI_Iterator_FactoryHandler_ptr
Web_Server::AMI_Iterator_FactoryHandler::_duplicate (AMI_Iterator_FactoryHandler_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  return obj;
}

void
Web_Server::AMI_Iterator_FactoryHandler::_tao_release (AMI_Iterator_FactoryHandler_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
Web_Server::AMI_Iterator_FactoryHandler::_is_a (const char *value)
{
  if (
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/Messaging/ReplyHandler:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:Web_Server/AMI_Iterator_FactoryHandler:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        ) == 0
    )
    {
      return true; // success using local knowledge
    }
  else
    {
      return this->::CORBA::Object::_is_a (value);
    }
}

const char* Web_Server::AMI_Iterator_FactoryHandler::_interface_repository_id (void) const
{
  return "IDL:Web_Server/AMI_Iterator_FactoryHandler:1.0";
}

::CORBA::Boolean
Web_Server::AMI_Iterator_FactoryHandler::marshal (TAO_OutputCDR &cdr)
{
  return (cdr << this);
}

// TAO_IDL - Generated from
// be/be_visitor_typecode/objref_typecode.cpp:70

static TAO::TypeCode::Objref<char const *,
                             TAO::Null_RefCount_Policy>
  _tao_tc_Web_Server_AMI_Iterator_FactoryHandler (
    ::CORBA::tk_objref,
    "IDL:Web_Server/AMI_Iterator_FactoryHandler:1.0",
    "AMI_Iterator_FactoryHandler");


namespace Web_Server
{
  ::CORBA::TypeCode_ptr const _tc_AMI_Iterator_FactoryHandler =
    &_tao_tc_Web_Server_AMI_Iterator_FactoryHandler;
}

// TAO_IDL - Generated from
// be/be_visitor_sequence/any_op_cs.cpp:45


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


TAO_END_VERSIONED_NAMESPACE_DECL



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace Web_Server
{

  // Copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      const ::Web_Server::Chunk_Type &_tao_elem
    )
  {
    TAO::Any_Dual_Impl_T< ::Web_Server::Chunk_Type>::insert_copy (
        _tao_any,
        ::Web_Server::Chunk_Type::_tao_any_destructor,
        ::Web_Server::_tc_Chunk_Type,
        _tao_elem
      );
}

// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    ::Web_Server::Chunk_Type *_tao_elem)
{
  TAO::Any_Dual_Impl_T< ::Web_Server::Chunk_Type>::insert (
      _tao_any,
      ::Web_Server::Chunk_Type::_tao_any_destructor,
      ::Web_Server::_tc_Chunk_Type,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    ::Web_Server::Chunk_Type *&_tao_elem)
{
  return _tao_any >>= const_cast<
      const ::Web_Server::Chunk_Type *&> (
      _tao_elem
    );
}

// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const ::Web_Server::Chunk_Type *&_tao_elem)
{
  return
    TAO::Any_Dual_Impl_T< ::Web_Server::Chunk_Type>::extract (
        _tao_any,
        ::Web_Server::Chunk_Type::_tao_any_destructor,
        ::Web_Server::_tc_Chunk_Type,
        _tao_elem
      );
}
}

#else


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


// Copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    const Web_Server::Chunk_Type &_tao_elem)
{
  TAO::Any_Dual_Impl_T<Web_Server::Chunk_Type>::insert_copy (
      _tao_any,
      Web_Server::Chunk_Type::_tao_any_destructor,
      Web_Server::_tc_Chunk_Type,
      _tao_elem
    );
}

// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    Web_Server::Chunk_Type *_tao_elem)
{
  TAO::Any_Dual_Impl_T<Web_Server::Chunk_Type>::insert (
      _tao_any,
      Web_Server::Chunk_Type::_tao_any_destructor,
      Web_Server::_tc_Chunk_Type,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    Web_Server::Chunk_Type *&_tao_elem)
{
  return _tao_any >>= const_cast<
      const Web_Server::Chunk_Type *&> (
      _tao_elem
    );
}

// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const Web_Server::Chunk_Type *&_tao_elem)
{
  return
    TAO::Any_Dual_Impl_T<Web_Server::Chunk_Type>::extract (
        _tao_any,
        Web_Server::Chunk_Type::_tao_any_destructor,
        Web_Server::_tc_Chunk_Type,
        _tao_elem);
}
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_interface/any_op_cs.cpp:38
TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<Web_Server::Callback>::to_object (
      ::CORBA::Object_ptr &_tao_elem) const
  {
    _tao_elem = ::CORBA::Object::_duplicate (this->value_);
    return true;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace Web_Server
{


  /// Copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      Callback_ptr _tao_elem)
  {
    Callback_ptr _tao_objptr =
      Callback::_duplicate (_tao_elem);
    _tao_any <<= &_tao_objptr;
  }

  /// Non-copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      Callback_ptr *_tao_elem)
  {
    TAO::Any_Impl_T<Callback>::insert (
        _tao_any,
        Callback::_tao_any_destructor,
        _tc_Callback,
        *_tao_elem);
  }

  ::CORBA::Boolean
  operator>>= (
      const ::CORBA::Any &_tao_any,
      Callback_ptr &_tao_elem)
  {
    return
      TAO::Any_Impl_T<Callback>::extract (
          _tao_any,
          Callback::_tao_any_destructor,
          _tc_Callback,
          _tao_elem);
  }
}

#else

TAO_BEGIN_VERSIONED_NAMESPACE_DECL



/// Copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    Web_Server::Callback_ptr _tao_elem)
{
  Web_Server::Callback_ptr _tao_objptr =
    Web_Server::Callback::_duplicate (_tao_elem);
  _tao_any <<= &_tao_objptr;
}

/// Non-copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    Web_Server::Callback_ptr *_tao_elem)
{
  TAO::Any_Impl_T<Web_Server::Callback>::insert (
      _tao_any,
      Web_Server::Callback::_tao_any_destructor,
      Web_Server::_tc_Callback,
      *_tao_elem);
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    Web_Server::Callback_ptr &_tao_elem)
{
  return
    TAO::Any_Impl_T<Web_Server::Callback>::extract (
        _tao_any,
        Web_Server::Callback::_tao_any_destructor,
        Web_Server::_tc_Callback,
        _tao_elem);
}

TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_interface/any_op_cs.cpp:38
TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<Web_Server::AMI_CallbackHandler>::to_object (
      ::CORBA::Object_ptr &_tao_elem) const
  {
    _tao_elem = ::CORBA::Object::_duplicate (this->value_);
    return true;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace Web_Server
{


  /// Copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      AMI_CallbackHandler_ptr _tao_elem)
  {
    AMI_CallbackHandler_ptr _tao_objptr =
      AMI_CallbackHandler::_duplicate (_tao_elem);
    _tao_any <<= &_tao_objptr;
  }

  /// Non-copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      AMI_CallbackHandler_ptr *_tao_elem)
  {
    TAO::Any_Impl_T<AMI_CallbackHandler>::insert (
        _tao_any,
        AMI_CallbackHandler::_tao_any_destructor,
        _tc_AMI_CallbackHandler,
        *_tao_elem);
  }

  ::CORBA::Boolean
  operator>>= (
      const ::CORBA::Any &_tao_any,
      AMI_CallbackHandler_ptr &_tao_elem)
  {
    return
      TAO::Any_Impl_T<AMI_CallbackHandler>::extract (
          _tao_any,
          AMI_CallbackHandler::_tao_any_destructor,
          _tc_AMI_CallbackHandler,
          _tao_elem);
  }
}

#else

TAO_BEGIN_VERSIONED_NAMESPACE_DECL



/// Copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    Web_Server::AMI_CallbackHandler_ptr _tao_elem)
{
  Web_Server::AMI_CallbackHandler_ptr _tao_objptr =
    Web_Server::AMI_CallbackHandler::_duplicate (_tao_elem);
  _tao_any <<= &_tao_objptr;
}

/// Non-copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    Web_Server::AMI_CallbackHandler_ptr *_tao_elem)
{
  TAO::Any_Impl_T<Web_Server::AMI_CallbackHandler>::insert (
      _tao_any,
      Web_Server::AMI_CallbackHandler::_tao_any_destructor,
      Web_Server::_tc_AMI_CallbackHandler,
      *_tao_elem);
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    Web_Server::AMI_CallbackHandler_ptr &_tao_elem)
{
  return
    TAO::Any_Impl_T<Web_Server::AMI_CallbackHandler>::extract (
        _tao_any,
        Web_Server::AMI_CallbackHandler::_tao_any_destructor,
        Web_Server::_tc_AMI_CallbackHandler,
        _tao_elem);
}

TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_exception/any_op_cs.cpp:38
TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Dual_Impl_T<Web_Server::Error_Result>::demarshal_value (TAO_InputCDR & cdr)
  {
    ::CORBA::String_var id;

    if (!(cdr >> id.out ()))
      {
        return false;
      }

    try
      {
        this->value_->_tao_decode (cdr);
      }
    catch (const ::CORBA::Exception &)
      {
        return false;
      }

    return true;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace Web_Server
{


  // Copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      const ::Web_Server::Error_Result &_tao_elem)
  {
    TAO::Any_Dual_Impl_T< ::Web_Server::Error_Result>::insert_copy (
        _tao_any,
        ::Web_Server::Error_Result::_tao_any_destructor,
        ::Web_Server::_tc_Error_Result,
        _tao_elem);
  }

  // Non-copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      ::Web_Server::Error_Result *_tao_elem)
  {
    TAO::Any_Dual_Impl_T< ::Web_Server::Error_Result>::insert (
        _tao_any,
        ::Web_Server::Error_Result::_tao_any_destructor,
        ::Web_Server::_tc_Error_Result,
        _tao_elem);
  }

  // Extraction to non-const pointer (deprecated).
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      ::Web_Server::Error_Result *&_tao_elem)
  {
    return _tao_any >>= const_cast<
        const ::Web_Server::Error_Result *&> (
        _tao_elem);
  }

  // Extraction to const pointer.
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      const ::Web_Server::Error_Result *&_tao_elem)
  {
    return
      TAO::Any_Dual_Impl_T< ::Web_Server::Error_Result>::extract (
          _tao_any,
          ::Web_Server::Error_Result::_tao_any_destructor,
          ::Web_Server::_tc_Error_Result,
          _tao_elem);
  }
}

#else

TAO_BEGIN_VERSIONED_NAMESPACE_DECL



// Copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    const Web_Server::Error_Result &_tao_elem)
{
  TAO::Any_Dual_Impl_T<Web_Server::Error_Result>::insert_copy (
      _tao_any,
      Web_Server::Error_Result::_tao_any_destructor,
      Web_Server::_tc_Error_Result,
      _tao_elem
    );
}

// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    Web_Server::Error_Result *_tao_elem)
{
  TAO::Any_Dual_Impl_T<Web_Server::Error_Result>::insert (
      _tao_any,
      Web_Server::Error_Result::_tao_any_destructor,
      Web_Server::_tc_Error_Result,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    Web_Server::Error_Result *&_tao_elem)
{
  return _tao_any >>= const_cast<
      const Web_Server::Error_Result *&> (
      _tao_elem);
}

// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const Web_Server::Error_Result *&_tao_elem
  )
{
  return
    TAO::Any_Dual_Impl_T<Web_Server::Error_Result>::extract (
        _tao_any,
        Web_Server::Error_Result::_tao_any_destructor,
        Web_Server::_tc_Error_Result,
        _tao_elem);
}
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_structure/any_op_cs.cpp:43



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace Web_Server
{
  /// Copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      const ::Web_Server::Metadata_Type &_tao_elem)
  {
    TAO::Any_Dual_Impl_T< ::Web_Server::Metadata_Type>::insert_copy (
        _tao_any,
        ::Web_Server::Metadata_Type::_tao_any_destructor,
        ::Web_Server::_tc_Metadata_Type,
        _tao_elem);
}

/// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any, ::
    Web_Server::Metadata_Type *_tao_elem)
{
  TAO::Any_Dual_Impl_T< ::Web_Server::Metadata_Type>::insert (
      _tao_any,
      ::Web_Server::Metadata_Type::_tao_any_destructor,
      ::Web_Server::_tc_Metadata_Type,
      _tao_elem);
}

/// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    ::Web_Server::Metadata_Type *&_tao_elem)
{
  return _tao_any >>= const_cast<
      const ::Web_Server::Metadata_Type *&> (
      _tao_elem);
}

/// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const ::Web_Server::Metadata_Type *&_tao_elem)
{
  return
    TAO::Any_Dual_Impl_T< ::Web_Server::Metadata_Type>::extract (
        _tao_any,
        ::Web_Server::Metadata_Type::_tao_any_destructor,
        ::Web_Server::_tc_Metadata_Type,
        _tao_elem
      );
}
}

#else

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

/// Copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  const Web_Server::Metadata_Type &_tao_elem)
{
  TAO::Any_Dual_Impl_T<Web_Server::Metadata_Type>::insert_copy (
    _tao_any,
    Web_Server::Metadata_Type::_tao_any_destructor,
    Web_Server::_tc_Metadata_Type,
    _tao_elem);
}

/// Non-copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  Web_Server::Metadata_Type *_tao_elem)
{
  TAO::Any_Dual_Impl_T<Web_Server::Metadata_Type>::insert (
    _tao_any,
    Web_Server::Metadata_Type::_tao_any_destructor,
    Web_Server::_tc_Metadata_Type,
    _tao_elem);
}

/// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
  const ::CORBA::Any &_tao_any,
  Web_Server::Metadata_Type *&_tao_elem)
{
  return _tao_any >>= const_cast<
      const Web_Server::Metadata_Type *&> (
      _tao_elem);
}

/// Extraction to const pointer.
::CORBA::Boolean operator>>= (
  const ::CORBA::Any &_tao_any,
  const Web_Server::Metadata_Type *&_tao_elem)
{
  return
    TAO::Any_Dual_Impl_T<Web_Server::Metadata_Type>::extract (
      _tao_any,
      Web_Server::Metadata_Type::_tao_any_destructor,
      Web_Server::_tc_Metadata_Type,
      _tao_elem);
}
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_interface/any_op_cs.cpp:38
TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<Web_Server::Iterator_Factory>::to_object (
      ::CORBA::Object_ptr &_tao_elem) const
  {
    _tao_elem = ::CORBA::Object::_duplicate (this->value_);
    return true;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace Web_Server
{


  /// Copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      Iterator_Factory_ptr _tao_elem)
  {
    Iterator_Factory_ptr _tao_objptr =
      Iterator_Factory::_duplicate (_tao_elem);
    _tao_any <<= &_tao_objptr;
  }

  /// Non-copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      Iterator_Factory_ptr *_tao_elem)
  {
    TAO::Any_Impl_T<Iterator_Factory>::insert (
        _tao_any,
        Iterator_Factory::_tao_any_destructor,
        _tc_Iterator_Factory,
        *_tao_elem);
  }

  ::CORBA::Boolean
  operator>>= (
      const ::CORBA::Any &_tao_any,
      Iterator_Factory_ptr &_tao_elem)
  {
    return
      TAO::Any_Impl_T<Iterator_Factory>::extract (
          _tao_any,
          Iterator_Factory::_tao_any_destructor,
          _tc_Iterator_Factory,
          _tao_elem);
  }
}

#else

TAO_BEGIN_VERSIONED_NAMESPACE_DECL



/// Copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    Web_Server::Iterator_Factory_ptr _tao_elem)
{
  Web_Server::Iterator_Factory_ptr _tao_objptr =
    Web_Server::Iterator_Factory::_duplicate (_tao_elem);
  _tao_any <<= &_tao_objptr;
}

/// Non-copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    Web_Server::Iterator_Factory_ptr *_tao_elem)
{
  TAO::Any_Impl_T<Web_Server::Iterator_Factory>::insert (
      _tao_any,
      Web_Server::Iterator_Factory::_tao_any_destructor,
      Web_Server::_tc_Iterator_Factory,
      *_tao_elem);
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    Web_Server::Iterator_Factory_ptr &_tao_elem)
{
  return
    TAO::Any_Impl_T<Web_Server::Iterator_Factory>::extract (
        _tao_any,
        Web_Server::Iterator_Factory::_tao_any_destructor,
        Web_Server::_tc_Iterator_Factory,
        _tao_elem);
}

TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_interface/any_op_cs.cpp:38
TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<Web_Server::AMI_Iterator_FactoryHandler>::to_object (
      ::CORBA::Object_ptr &_tao_elem) const
  {
    _tao_elem = ::CORBA::Object::_duplicate (this->value_);
    return true;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace Web_Server
{


  /// Copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      AMI_Iterator_FactoryHandler_ptr _tao_elem)
  {
    AMI_Iterator_FactoryHandler_ptr _tao_objptr =
      AMI_Iterator_FactoryHandler::_duplicate (_tao_elem);
    _tao_any <<= &_tao_objptr;
  }

  /// Non-copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      AMI_Iterator_FactoryHandler_ptr *_tao_elem)
  {
    TAO::Any_Impl_T<AMI_Iterator_FactoryHandler>::insert (
        _tao_any,
        AMI_Iterator_FactoryHandler::_tao_any_destructor,
        _tc_AMI_Iterator_FactoryHandler,
        *_tao_elem);
  }

  ::CORBA::Boolean
  operator>>= (
      const ::CORBA::Any &_tao_any,
      AMI_Iterator_FactoryHandler_ptr &_tao_elem)
  {
    return
      TAO::Any_Impl_T<AMI_Iterator_FactoryHandler>::extract (
          _tao_any,
          AMI_Iterator_FactoryHandler::_tao_any_destructor,
          _tc_AMI_Iterator_FactoryHandler,
          _tao_elem);
  }
}

#else

TAO_BEGIN_VERSIONED_NAMESPACE_DECL



/// Copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    Web_Server::AMI_Iterator_FactoryHandler_ptr _tao_elem)
{
  Web_Server::AMI_Iterator_FactoryHandler_ptr _tao_objptr =
    Web_Server::AMI_Iterator_FactoryHandler::_duplicate (_tao_elem);
  _tao_any <<= &_tao_objptr;
}

/// Non-copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    Web_Server::AMI_Iterator_FactoryHandler_ptr *_tao_elem)
{
  TAO::Any_Impl_T<Web_Server::AMI_Iterator_FactoryHandler>::insert (
      _tao_any,
      Web_Server::AMI_Iterator_FactoryHandler::_tao_any_destructor,
      Web_Server::_tc_AMI_Iterator_FactoryHandler,
      *_tao_elem);
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    Web_Server::AMI_Iterator_FactoryHandler_ptr &_tao_elem)
{
  return
    TAO::Any_Impl_T<Web_Server::AMI_Iterator_FactoryHandler>::extract (
        _tao_any,
        Web_Server::AMI_Iterator_FactoryHandler::_tao_any_destructor,
        Web_Server::_tc_AMI_Iterator_FactoryHandler,
        _tao_elem);
}

TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_sequence/cdr_op_cs.cpp:93
#if !defined _TAO_CDR_OP_Web_Server_Chunk_Type_CPP_
#define _TAO_CDR_OP_Web_Server_Chunk_Type_CPP_

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Web_Server::Chunk_Type &_tao_sequence)
{
  return TAO::marshal_sequence(strm, _tao_sequence);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Web_Server::Chunk_Type &_tao_sequence)
{
  return TAO::demarshal_sequence(strm, _tao_sequence);
}


TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_CDR_OP_Web_Server_Chunk_Type_CPP_ */

// TAO_IDL - Generated from
// be/be_visitor_interface/cdr_op_cs.cpp:51

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Web_Server::Callback_ptr _tao_objref)
{
  ::CORBA::Object_ptr _tao_corba_obj = _tao_objref;
  return (strm << _tao_corba_obj);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Web_Server::Callback_ptr &_tao_objref)
{
  ::CORBA::Object_var obj;

  if (!(strm >> obj.inout ()))
    {
      return false;
    }

  typedef ::Web_Server::Callback RHS_SCOPED_NAME;

  // Narrow to the right type.
  _tao_objref =
    TAO::Narrow_Utils<RHS_SCOPED_NAME>::unchecked_narrow (obj.in ());

  return true;
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_interface/cdr_op_cs.cpp:51

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Web_Server::AMI_CallbackHandler_ptr _tao_objref)
{
  ::CORBA::Object_ptr _tao_corba_obj = _tao_objref;
  return (strm << _tao_corba_obj);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Web_Server::AMI_CallbackHandler_ptr &_tao_objref)
{
  ::CORBA::Object_var obj;

  if (!(strm >> obj.inout ()))
    {
      return false;
    }

  typedef ::Web_Server::AMI_CallbackHandler RHS_SCOPED_NAME;

  // Narrow to the right type.
  _tao_objref =
    TAO::Narrow_Utils<RHS_SCOPED_NAME>::unchecked_narrow (obj.in ());

  return true;
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_exception/cdr_op_cs.cpp:48
TAO_BEGIN_VERSIONED_NAMESPACE_DECL



::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Web_Server::Error_Result &_tao_aggregate
  )
{
  // First marshal the repository ID.
  if (strm << _tao_aggregate._rep_id ())
    {
      // Now marshal the members (if any).
      return (
        (strm << _tao_aggregate.status)
       );
    }
  else
    {
      return false;
    }
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Web_Server::Error_Result &_tao_aggregate
  )
{
  // Demarshal the members.
  return (
    (strm >> _tao_aggregate.status)
  );
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_structure/cdr_op_cs.cpp:49

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Web_Server::Metadata_Type &_tao_aggregate)
{
  return
    (strm << _tao_aggregate.modification_date.in ()) &&
    (strm << _tao_aggregate.content_type.in ());
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Web_Server::Metadata_Type &_tao_aggregate)
{
  return
    (strm >> _tao_aggregate.modification_date.out ()) &&
    (strm >> _tao_aggregate.content_type.out ());
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_interface/cdr_op_cs.cpp:51

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Web_Server::Iterator_Factory_ptr _tao_objref)
{
  ::CORBA::Object_ptr _tao_corba_obj = _tao_objref;
  return (strm << _tao_corba_obj);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Web_Server::Iterator_Factory_ptr &_tao_objref)
{
  ::CORBA::Object_var obj;

  if (!(strm >> obj.inout ()))
    {
      return false;
    }

  typedef ::Web_Server::Iterator_Factory RHS_SCOPED_NAME;

  // Narrow to the right type.
  _tao_objref =
    TAO::Narrow_Utils<RHS_SCOPED_NAME>::unchecked_narrow (obj.in ());

  return true;
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_interface/cdr_op_cs.cpp:51

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Web_Server::AMI_Iterator_FactoryHandler_ptr _tao_objref)
{
  ::CORBA::Object_ptr _tao_corba_obj = _tao_objref;
  return (strm << _tao_corba_obj);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Web_Server::AMI_Iterator_FactoryHandler_ptr &_tao_objref)
{
  ::CORBA::Object_var obj;

  if (!(strm >> obj.inout ()))
    {
      return false;
    }

  typedef ::Web_Server::AMI_Iterator_FactoryHandler RHS_SCOPED_NAME;

  // Narrow to the right type.
  _tao_objref =
    TAO::Narrow_Utils<RHS_SCOPED_NAME>::unchecked_narrow (obj.in ());

  return true;
}

TAO_END_VERSIONED_NAMESPACE_DECL



