// -*- C++ -*-
/**
 * Code generated by the The ACE ORB (TAO) IDL Compiler v2.4.1
 * TAO and the TAO IDL Compiler have been developed by:
 *       Center for Distributed Object Computing
 *       Washington University
 *       St. Louis, MO
 *       USA
 *       http://www.cs.wustl.edu/~schmidt/doc-center.html
 * and
 *       Distributed Object Computing Laboratory
 *       University of California at Irvine
 *       Irvine, CA
 *       USA
 * and
 *       Institute for Software Integrated Systems
 *       Vanderbilt University
 *       Nashville, TN
 *       USA
 *       http://www.isis.vanderbilt.edu/
 *
 * Information about TAO is available at:
 *     http://www.dre.vanderbilt.edu/~schmidt/TAO.html
 **/

// TAO_IDL - Generated from
// be/be_codegen.cpp:373


#include "Web_ServerC.h"
#include "tao/CDR.h"
#include "tao/Exception_Data.h"
#include "tao/Invocation_Adapter.h"
#include "tao/Object_T.h"
#include "tao/ORB_Core.h"
#include "tao/SystemException.h"
#include "ace/OS_NS_string.h"

#if !defined (__ACE_INLINE__)
#include "Web_ServerC.inl"
#endif /* !defined INLINE */

// TAO_IDL - Generated from
// be/be_visitor_sequence/sequence_cs.cpp:70

#if !defined (_WEB_SERVER_CHUNK_TYPE_CS_)
#define _WEB_SERVER_CHUNK_TYPE_CS_

Web_Server::Chunk_Type::Chunk_Type (void)
{}

Web_Server::Chunk_Type::Chunk_Type (
    ::CORBA::ULong max)
  : ::TAO::unbounded_value_sequence<
        ::CORBA::Octet
      > (max)
{}

Web_Server::Chunk_Type::Chunk_Type (
    ::CORBA::ULong max,
    ::CORBA::ULong length,
    ::CORBA::Octet * buffer,
    ::CORBA::Boolean release
  )
  : ::TAO::unbounded_value_sequence<
        ::CORBA::Octet
      >
    (max, length, buffer, release)
{}

Web_Server::Chunk_Type::Chunk_Type (
    const Chunk_Type &seq)
  : ::TAO::unbounded_value_sequence<
        ::CORBA::Octet
      > (seq)
{}

Web_Server::Chunk_Type::~Chunk_Type (void)
{}

#endif /* end #if !defined */

// TAO_IDL - Generated from
// be/be_visitor_interface/interface_cs.cpp:48

// Traits specializations for Web_Server::Content_Iterator.

Web_Server::Content_Iterator_ptr
TAO::Objref_Traits<Web_Server::Content_Iterator>::duplicate (
    Web_Server::Content_Iterator_ptr p)
{
  return Web_Server::Content_Iterator::_duplicate (p);
}

void
TAO::Objref_Traits<Web_Server::Content_Iterator>::release (
    Web_Server::Content_Iterator_ptr p)
{
  ::CORBA::release (p);
}

Web_Server::Content_Iterator_ptr
TAO::Objref_Traits<Web_Server::Content_Iterator>::nil (void)
{
  return Web_Server::Content_Iterator::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<Web_Server::Content_Iterator>::marshal (
    const Web_Server::Content_Iterator_ptr p,
    TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:88

::CORBA::Boolean
Web_Server::Content_Iterator::next_chunk (
  ::CORBA::ULongLong offset,
  ::Web_Server::Chunk_Type_out chunk)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }

  TAO::Arg_Traits< ::ACE_InputCDR::to_boolean>::ret_val _tao_retval;
  TAO::Arg_Traits< ::CORBA::ULongLong>::in_arg_val _tao_offset (offset);
  TAO::Arg_Traits< ::Web_Server::Chunk_Type>::out_arg_val _tao_chunk (chunk);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_offset,
      &_tao_chunk
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      3,
      "next_chunk",
      10,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY

    );

  _tao_call.invoke (0, 0);

  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:88

void
Web_Server::Content_Iterator::destroy (
  void)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }

  TAO::Arg_Traits< void>::ret_val _tao_retval;

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      1,
      "destroy",
      7,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY,
      TAO::TAO_TWOWAY_INVOCATION
      ,
      TAO::TAO_SYNCHRONOUS_INVOCATION,
      false
    );

  _tao_call.invoke (0, 0);
}

Web_Server::Content_Iterator::Content_Iterator (void)
{
}

Web_Server::Content_Iterator::~Content_Iterator (void)
{
}

Web_Server::Content_Iterator_ptr
Web_Server::Content_Iterator::_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return
    TAO::Narrow_Utils<Content_Iterator>::narrow (
        _tao_objref,
        "IDL:Web_Server/Content_Iterator:1.0");
}

Web_Server::Content_Iterator_ptr
Web_Server::Content_Iterator::_unchecked_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return
    TAO::Narrow_Utils<Content_Iterator>::unchecked_narrow (
        _tao_objref);
}

Web_Server::Content_Iterator_ptr
Web_Server::Content_Iterator::_nil (void)
{
  return 0;
}

Web_Server::Content_Iterator_ptr
Web_Server::Content_Iterator::_duplicate (Content_Iterator_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  return obj;
}

void
Web_Server::Content_Iterator::_tao_release (Content_Iterator_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
Web_Server::Content_Iterator::_is_a (const char *value)
{
  if (
      ACE_OS::strcmp (
          value,
          "IDL:Web_Server/Content_Iterator:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        ) == 0
    )
    {
      return true; // success using local knowledge
    }
  else
    {
      return this->::CORBA::Object::_is_a (value);
    }
}

const char* Web_Server::Content_Iterator::_interface_repository_id (void) const
{
  return "IDL:Web_Server/Content_Iterator:1.0";
}

::CORBA::Boolean
Web_Server::Content_Iterator::marshal (TAO_OutputCDR &cdr)
{
  return (cdr << this);
}

// TAO_IDL - Generated from
// be/be_visitor_exception/exception_ctor.cpp:51

Web_Server::Error_Result::Error_Result (
    ::CORBA::Short _tao_status)
  : ::CORBA::UserException (
        "IDL:Web_Server/Error_Result:1.0",
        "Error_Result"
      )
{
  this->status = _tao_status;
}



// TAO_IDL - Generated from
// be/be_visitor_exception/exception_cs.cpp:98

Web_Server::Error_Result::Error_Result (void)
  : ::CORBA::UserException (
        "IDL:Web_Server/Error_Result:1.0",
        "Error_Result"
      )
{
}

Web_Server::Error_Result::~Error_Result (void)
{
}

Web_Server::Error_Result::Error_Result (const ::Web_Server::Error_Result &_tao_excp)
  : ::CORBA::UserException (
        _tao_excp._rep_id (),
        _tao_excp._name ()
      )
{
  this->status = _tao_excp.status;
}

Web_Server::Error_Result&
Web_Server::Error_Result::operator= (const ::Web_Server::Error_Result &_tao_excp)
{
  this->::CORBA::UserException::operator= (_tao_excp);
  this->status = _tao_excp.status;
  return *this;
}

Web_Server::Error_Result *
Web_Server::Error_Result::_downcast ( ::CORBA::Exception *_tao_excp)
{
  return dynamic_cast<Error_Result *> (_tao_excp);
}

const Web_Server::Error_Result *
Web_Server::Error_Result::_downcast ( ::CORBA::Exception const *_tao_excp)
{
  return dynamic_cast<const Error_Result *> (_tao_excp);
}

::CORBA::Exception *Web_Server::Error_Result::_alloc (void)
{
  ::CORBA::Exception *retval = 0;
  ACE_NEW_RETURN (retval, ::Web_Server::Error_Result, 0);
  return retval;
}

::CORBA::Exception *
Web_Server::Error_Result::_tao_duplicate (void) const
{
  ::CORBA::Exception *result = 0;
  ACE_NEW_RETURN (
      result,
      ::Web_Server::Error_Result (*this),
      0
    );
  return result;
}

void Web_Server::Error_Result::_raise (void) const
{
  throw *this;
}

void Web_Server::Error_Result::_tao_encode (TAO_OutputCDR &cdr) const
{
  if (!(cdr << *this))
    {
      throw ::CORBA::MARSHAL ();
    }
}

void Web_Server::Error_Result::_tao_decode (TAO_InputCDR &cdr)
{
  if (!(cdr >> *this))
    {
      throw ::CORBA::MARSHAL ();
    }
}



// TAO_IDL - Generated from
// be/be_visitor_interface/interface_cs.cpp:48

// Traits specializations for Web_Server::Iterator_Factory.

Web_Server::Iterator_Factory_ptr
TAO::Objref_Traits<Web_Server::Iterator_Factory>::duplicate (
    Web_Server::Iterator_Factory_ptr p)
{
  return Web_Server::Iterator_Factory::_duplicate (p);
}

void
TAO::Objref_Traits<Web_Server::Iterator_Factory>::release (
    Web_Server::Iterator_Factory_ptr p)
{
  ::CORBA::release (p);
}

Web_Server::Iterator_Factory_ptr
TAO::Objref_Traits<Web_Server::Iterator_Factory>::nil (void)
{
  return Web_Server::Iterator_Factory::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<Web_Server::Iterator_Factory>::marshal (
    const Web_Server::Iterator_Factory_ptr p,
    TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:88

void
Web_Server::Iterator_Factory::get_iterator (
  const char * pathname,
  ::Web_Server::Content_Iterator_out contents,
  ::Web_Server::Metadata_Type_out metadata)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }

  TAO::Arg_Traits< void>::ret_val _tao_retval;
  TAO::Arg_Traits< char *>::in_arg_val _tao_pathname (pathname);
  TAO::Arg_Traits< ::Web_Server::Content_Iterator>::out_arg_val _tao_contents (contents);
  TAO::Arg_Traits< ::Web_Server::Metadata_Type>::out_arg_val _tao_metadata (metadata);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_pathname,
      &_tao_contents,
      &_tao_metadata
    };

  static TAO::Exception_Data
  _tao_Web_Server_Iterator_Factory_get_iterator_exceptiondata [] =
    {
      {
        "IDL:Web_Server/Error_Result:1.0",
        Web_Server::Error_Result::_alloc
#if TAO_HAS_INTERCEPTORS == 1
        , 0
#endif /* TAO_HAS_INTERCEPTORS */
      }
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      4,
      "get_iterator",
      12,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY

    );

  _tao_call.invoke (
      _tao_Web_Server_Iterator_Factory_get_iterator_exceptiondata,
      1
    );
}

Web_Server::Iterator_Factory::Iterator_Factory (void)
{
}

Web_Server::Iterator_Factory::~Iterator_Factory (void)
{
}

Web_Server::Iterator_Factory_ptr
Web_Server::Iterator_Factory::_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return
    TAO::Narrow_Utils<Iterator_Factory>::narrow (
        _tao_objref,
        "IDL:Web_Server/Iterator_Factory:1.0");
}

Web_Server::Iterator_Factory_ptr
Web_Server::Iterator_Factory::_unchecked_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return
    TAO::Narrow_Utils<Iterator_Factory>::unchecked_narrow (
        _tao_objref);
}

Web_Server::Iterator_Factory_ptr
Web_Server::Iterator_Factory::_nil (void)
{
  return 0;
}

Web_Server::Iterator_Factory_ptr
Web_Server::Iterator_Factory::_duplicate (Iterator_Factory_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  return obj;
}

void
Web_Server::Iterator_Factory::_tao_release (Iterator_Factory_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
Web_Server::Iterator_Factory::_is_a (const char *value)
{
  if (
      ACE_OS::strcmp (
          value,
          "IDL:Web_Server/Iterator_Factory:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        ) == 0
    )
    {
      return true; // success using local knowledge
    }
  else
    {
      return this->::CORBA::Object::_is_a (value);
    }
}

const char* Web_Server::Iterator_Factory::_interface_repository_id (void) const
{
  return "IDL:Web_Server/Iterator_Factory:1.0";
}

::CORBA::Boolean
Web_Server::Iterator_Factory::marshal (TAO_OutputCDR &cdr)
{
  return (cdr << this);
}

// TAO_IDL - Generated from
// be/be_visitor_sequence/cdr_op_cs.cpp:93
#if !defined _TAO_CDR_OP_Web_Server_Chunk_Type_CPP_
#define _TAO_CDR_OP_Web_Server_Chunk_Type_CPP_

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Web_Server::Chunk_Type &_tao_sequence)
{
  return TAO::marshal_sequence(strm, _tao_sequence);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Web_Server::Chunk_Type &_tao_sequence)
{
  return TAO::demarshal_sequence(strm, _tao_sequence);
}


TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_CDR_OP_Web_Server_Chunk_Type_CPP_ */

// TAO_IDL - Generated from
// be/be_visitor_interface/cdr_op_cs.cpp:51

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Web_Server::Content_Iterator_ptr _tao_objref)
{
  ::CORBA::Object_ptr _tao_corba_obj = _tao_objref;
  return (strm << _tao_corba_obj);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Web_Server::Content_Iterator_ptr &_tao_objref)
{
  ::CORBA::Object_var obj;

  if (!(strm >> obj.inout ()))
    {
      return false;
    }

  typedef ::Web_Server::Content_Iterator RHS_SCOPED_NAME;

  // Narrow to the right type.
  _tao_objref =
    TAO::Narrow_Utils<RHS_SCOPED_NAME>::unchecked_narrow (obj.in ());

  return true;
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_exception/cdr_op_cs.cpp:48
TAO_BEGIN_VERSIONED_NAMESPACE_DECL



::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Web_Server::Error_Result &_tao_aggregate
  )
{
  // First marshal the repository ID.
  if (strm << _tao_aggregate._rep_id ())
    {
      // Now marshal the members (if any).
      return (
        (strm << _tao_aggregate.status)
       );
    }
  else
    {
      return false;
    }
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Web_Server::Error_Result &_tao_aggregate
  )
{
  // Demarshal the members.
  return (
    (strm >> _tao_aggregate.status)
  );
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_structure/cdr_op_cs.cpp:49

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Web_Server::Metadata_Type &_tao_aggregate)
{
  return
    (strm << _tao_aggregate.modification_date.in ()) &&
    (strm << _tao_aggregate.content_type.in ());
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Web_Server::Metadata_Type &_tao_aggregate)
{
  return
    (strm >> _tao_aggregate.modification_date.out ()) &&
    (strm >> _tao_aggregate.content_type.out ());
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_interface/cdr_op_cs.cpp:51

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Web_Server::Iterator_Factory_ptr _tao_objref)
{
  ::CORBA::Object_ptr _tao_corba_obj = _tao_objref;
  return (strm << _tao_corba_obj);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Web_Server::Iterator_Factory_ptr &_tao_objref)
{
  ::CORBA::Object_var obj;

  if (!(strm >> obj.inout ()))
    {
      return false;
    }

  typedef ::Web_Server::Iterator_Factory RHS_SCOPED_NAME;

  // Narrow to the right type.
  _tao_objref =
    TAO::Narrow_Utils<RHS_SCOPED_NAME>::unchecked_narrow (obj.in ());

  return true;
}

TAO_END_VERSIONED_NAMESPACE_DECL



