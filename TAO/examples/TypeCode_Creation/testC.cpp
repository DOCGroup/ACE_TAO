// -*- C++ -*-
/**
 * Code generated by the The ACE ORB (TAO) IDL Compiler v2.4.1
 * TAO and the TAO IDL Compiler have been developed by:
 *       Center for Distributed Object Computing
 *       Washington University
 *       St. Louis, MO
 *       USA
 *       http://www.cs.wustl.edu/~schmidt/doc-center.html
 * and
 *       Distributed Object Computing Laboratory
 *       University of California at Irvine
 *       Irvine, CA
 *       USA
 * and
 *       Institute for Software Integrated Systems
 *       Vanderbilt University
 *       Nashville, TN
 *       USA
 *       http://www.isis.vanderbilt.edu/
 *
 * Information about TAO is available at:
 *     http://www.dre.vanderbilt.edu/~schmidt/TAO.html
 **/

// TAO_IDL - Generated from
// be/be_codegen.cpp:373


#include "testC.h"
#include "tao/AnyTypeCode/Null_RefCount_Policy.h"
#include "tao/AnyTypeCode/TypeCode_Constants.h"
#include "tao/AnyTypeCode/Alias_TypeCode_Static.h"
#include "tao/AnyTypeCode/Objref_TypeCode_Static.h"
#include "tao/AnyTypeCode/String_TypeCode_Static.h"
#include "tao/AnyTypeCode/Struct_TypeCode_Static.h"
#include "tao/AnyTypeCode/TypeCode_Struct_Field.h"
#include "tao/AnyTypeCode/TypeCode_Case_T.h"
#include "tao/AnyTypeCode/Union_TypeCode_Static.h"
#include "tao/CDR.h"
#include "tao/Object_T.h"
#include "tao/CDR.h"
#include "tao/AnyTypeCode/Any.h"
#include "tao/AnyTypeCode/Any_Impl_T.h"
#include "tao/AnyTypeCode/Any_Dual_Impl_T.h"
#include "ace/OS_NS_string.h"

#if !defined (__ACE_INLINE__)
#include "testC.inl"
#endif /* !defined INLINE */

// TAO_IDL - Generated from
// be/be_visitor_interface/interface_cs.cpp:48

// Traits specializations for iface.

iface_ptr
TAO::Objref_Traits<iface>::duplicate (
    iface_ptr p)
{
  return iface::_duplicate (p);
}

void
TAO::Objref_Traits<iface>::release (
    iface_ptr p)
{
  ::CORBA::release (p);
}

iface_ptr
TAO::Objref_Traits<iface>::nil (void)
{
  return iface::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<iface>::marshal (
    const iface_ptr p,
    TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

iface::iface (void)
{
}

iface::~iface (void)
{
}

void
iface::_tao_any_destructor (void *_tao_void_pointer)
{
  iface *_tao_tmp_pointer =
    static_cast<iface *> (_tao_void_pointer);
  ::CORBA::release (_tao_tmp_pointer);
}

iface_ptr
iface::_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return
    TAO::Narrow_Utils<iface>::narrow (
        _tao_objref,
        "IDL:iface:1.0");
}

iface_ptr
iface::_unchecked_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return
    TAO::Narrow_Utils<iface>::unchecked_narrow (
        _tao_objref);
}

iface_ptr
iface::_nil (void)
{
  return 0;
}

iface_ptr
iface::_duplicate (iface_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  return obj;
}

void
iface::_tao_release (iface_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
iface::_is_a (const char *value)
{
  if (
      ACE_OS::strcmp (
          value,
          "IDL:iface:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        ) == 0
    )
    {
      return true; // success using local knowledge
    }
  else
    {
      return this->::CORBA::Object::_is_a (value);
    }
}

const char* iface::_interface_repository_id (void) const
{
  return "IDL:iface:1.0";
}

::CORBA::Boolean
iface::marshal (TAO_OutputCDR &cdr)
{
  return (cdr << this);
}

// TAO_IDL - Generated from
// be/be_visitor_typecode/objref_typecode.cpp:70

static TAO::TypeCode::Objref<char const *,
                             TAO::Null_RefCount_Policy>
  _tao_tc_iface (
    ::CORBA::tk_objref,
    "IDL:iface:1.0",
    "iface");

::CORBA::TypeCode_ptr const _tc_iface =
  &_tao_tc_iface;

// TAO_IDL - Generated from
// be/be_visitor_union/union_cs.cpp:76

foo::foo (void)
{
  ACE_OS::memset (&this->u_, 0, sizeof (this->u_));
  this->disc_ = -32768;
}

foo::foo (const ::foo &u)
{
  this->disc_ = u.disc_;
  switch (this->disc_)
  {
    case 3:
    case 4:
    case 1:
    {
      this->u_.foo_str_member_ = ::CORBA::string_dup (u.u_.foo_str_member_);
    }
    break;
    default:
    {
      if (u.u_.foo_iface_member_ == 0)
        {
          this->u_.foo_iface_member_ = 0;
        }
      else
        {
          typedef iface_var OBJECT_FIELD;
          ACE_NEW (
              this->u_.foo_iface_member_,
              OBJECT_FIELD (
                  iface::_duplicate (
                      u.u_.foo_iface_member_->in ()
                    )
                )
            );
        }
    }
    break;
    case 0:
    {
      if (u.u_.foo_iface_member2_ == 0)
        {
          this->u_.foo_iface_member2_ = 0;
        }
      else
        {
          typedef iface_var OBJECT_FIELD;
          ACE_NEW (
              this->u_.foo_iface_member2_,
              OBJECT_FIELD (
                  iface::_duplicate (
                      u.u_.foo_iface_member2_->in ()
                    )
                )
            );
        }
    }
    break;
  }
}

foo::~foo (void)
{
  // Finalize.
  this->_reset ();
}

void foo::_tao_any_destructor (void *_tao_void_pointer)
{
  foo *tmp =
    static_cast<foo *> (_tao_void_pointer);
  delete tmp;
}

foo &
foo::operator= (const ::foo &u)
{
  if (&u == this)
    {
      return *this;
    }

  this->_reset ();
  this->disc_ = u.disc_;

  switch (this->disc_)
  {
    case 3:
    case 4:
    case 1:
    {
      this->u_.foo_str_member_ = ::CORBA::string_dup (u.u_.foo_str_member_);
    }
    break;
    default:
    {
      if (u.u_.foo_iface_member_ == 0)
        {
          this->u_.foo_iface_member_ = 0;
        }
      else
        {
          typedef iface_var OBJECT_FIELD;
          ACE_NEW_RETURN (
              this->u_.foo_iface_member_,
              OBJECT_FIELD (
                  iface::_duplicate (
                      u.u_.foo_iface_member_->in ()
                    )
                ),
              *this
            );
        }
    }
    break;
    case 0:
    {
      if (u.u_.foo_iface_member2_ == 0)
        {
          this->u_.foo_iface_member2_ = 0;
        }
      else
        {
          typedef iface_var OBJECT_FIELD;
          ACE_NEW_RETURN (
              this->u_.foo_iface_member2_,
              OBJECT_FIELD (
                  iface::_duplicate (
                      u.u_.foo_iface_member2_->in ()
                    )
                ),
              *this
            );
        }
    }
    break;
  }

  return *this;
}

/// Reset method to reset old values of a union.
void foo::_reset (void)
{
  switch (this->disc_)
  {

    case 3:
    case 4:
    case 1:
      ::CORBA::string_free (this->u_.foo_str_member_);
      this->u_.foo_str_member_ = 0;

    break;

    default:
      delete this->u_.foo_iface_member_;
      this->u_.foo_iface_member_ = 0;

    break;

    case 0:
      delete this->u_.foo_iface_member2_;
      this->u_.foo_iface_member2_ = 0;

    break;

  }
}

// TAO_IDL - Generated from
// be/be_visitor_typecode/union_typecode.cpp:65

static TAO::TypeCode::Case_T<CORBA::Short, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_foo__0 (3, "foo_str_member", &CORBA::_tc_string);
static TAO::TypeCode::Case_T<CORBA::Short, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_foo__1 (4, "foo_str_member", &CORBA::_tc_string);
static TAO::TypeCode::Case_T<CORBA::Short, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_foo__2 (1, "foo_str_member", &CORBA::_tc_string);
static TAO::TypeCode::Case_T<CORBA::Short, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_foo__3 (-32768, "foo_iface_member", &_tc_iface);
static TAO::TypeCode::Case_T<CORBA::Short, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_foo__4 (0, "foo_iface_member2", &_tc_iface);

static TAO::TypeCode::Case<char const *, ::CORBA::TypeCode_ptr const *> const * const _tao_cases_foo[] =
  {
    &_tao_cases_foo__0,
    &_tao_cases_foo__1,
    &_tao_cases_foo__2,
    &_tao_cases_foo__3,
    &_tao_cases_foo__4
  };

static TAO::TypeCode::Union<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::TypeCode::Case<char const *, ::CORBA::TypeCode_ptr const *> const * const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_foo (
    "IDL:foo:1.0",
    "foo",
    &CORBA::_tc_short,
    _tao_cases_foo,
    sizeof (_tao_cases_foo)/sizeof (_tao_cases_foo[0]),
    1);

::CORBA::TypeCode_ptr const _tc_foo =
  &_tao_tc_foo;

// TAO_IDL - Generated from
// be/be_visitor_typecode/struct_typecode.cpp:86

static TAO::TypeCode::Struct_Field<
  char const *,
  ::CORBA::TypeCode_ptr const *> const
    _tao_fields_bar[] =
      {
        { "bar_long_member", &CORBA::_tc_long },
        { "bar_foo_member", &_tc_foo }
      };

static TAO::TypeCode::Struct<
  char const *,
  ::CORBA::TypeCode_ptr const *,
  TAO::TypeCode::Struct_Field<
    char const *,
    ::CORBA::TypeCode_ptr const *> const *,
  TAO::Null_RefCount_Policy>
_tao_tc_bar (
  ::CORBA::tk_struct,
  "IDL:bar:1.0",
  "bar",
  _tao_fields_bar,
  2);

::CORBA::TypeCode_ptr const _tc_bar =
  &_tao_tc_bar;

// TAO_IDL - Generated from
// be/be_visitor_structure/structure_cs.cpp:56

void
bar::_tao_any_destructor (
    void *_tao_void_pointer)
{
  bar *_tao_tmp_pointer =
    static_cast<bar *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

// TAO_IDL - Generated from
// be/be_visitor_interface/any_op_cs.cpp:38
TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<iface>::to_object (
      ::CORBA::Object_ptr &_tao_elem) const
  {
    _tao_elem = ::CORBA::Object::_duplicate (this->value_);
    return true;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



/// Copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    iface_ptr _tao_elem)
{
  iface_ptr _tao_objptr =
    iface::_duplicate (_tao_elem);
  _tao_any <<= &_tao_objptr;
}

/// Non-copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    iface_ptr *_tao_elem)
{
  TAO::Any_Impl_T<iface>::insert (
      _tao_any,
      iface::_tao_any_destructor,
      _tc_iface,
      *_tao_elem);
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    iface_ptr &_tao_elem)
{
  return
    TAO::Any_Impl_T<iface>::extract (
        _tao_any,
        iface::_tao_any_destructor,
        _tc_iface,
        _tao_elem);
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_union/any_op_cs.cpp:37


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    const foo &_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<foo>::insert_copy (
      _tao_any,
      foo::_tao_any_destructor,
      _tc_foo,
      _tao_elem
    );
}

// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    foo *_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<foo>::insert (
      _tao_any,
      foo::_tao_any_destructor,
      _tc_foo,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    foo *&_tao_elem
  )
{
  return _tao_any >>= const_cast<
      const foo *&> (
      _tao_elem
    );
}

// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const foo *&_tao_elem
  )
{
  return
    TAO::Any_Dual_Impl_T<foo>::extract (
        _tao_any,
        foo::_tao_any_destructor,
        _tc_foo,
        _tao_elem
      );
}
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_structure/any_op_cs.cpp:43


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

/// Copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  const bar &_tao_elem)
{
  TAO::Any_Dual_Impl_T<bar>::insert_copy (
    _tao_any,
    bar::_tao_any_destructor,
    _tc_bar,
    _tao_elem);
}

/// Non-copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  bar *_tao_elem)
{
  TAO::Any_Dual_Impl_T<bar>::insert (
    _tao_any,
    bar::_tao_any_destructor,
    _tc_bar,
    _tao_elem);
}

/// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
  const ::CORBA::Any &_tao_any,
  bar *&_tao_elem)
{
  return _tao_any >>= const_cast<
      const bar *&> (
      _tao_elem);
}

/// Extraction to const pointer.
::CORBA::Boolean operator>>= (
  const ::CORBA::Any &_tao_any,
  const bar *&_tao_elem)
{
  return
    TAO::Any_Dual_Impl_T<bar>::extract (
      _tao_any,
      bar::_tao_any_destructor,
      _tc_bar,
      _tao_elem);
}
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_interface/cdr_op_cs.cpp:51

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const iface_ptr _tao_objref)
{
  ::CORBA::Object_ptr _tao_corba_obj = _tao_objref;
  return (strm << _tao_corba_obj);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    iface_ptr &_tao_objref)
{
  ::CORBA::Object_var obj;

  if (!(strm >> obj.inout ()))
    {
      return false;
    }

  typedef ::iface RHS_SCOPED_NAME;

  // Narrow to the right type.
  _tao_objref =
    TAO::Narrow_Utils<RHS_SCOPED_NAME>::unchecked_narrow (obj.in ());

  return true;
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_union/cdr_op_cs.cpp:74


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const foo &_tao_union
  )
{
  if ( !(strm << _tao_union._d ()) )
    {
      return false;
    }

  ::CORBA::Boolean result = true;

  switch (_tao_union._d ())
  {
    case 3:
    case 4:
    case 1:
      {
        result = strm << _tao_union.foo_str_member ();
      }
      break;
    default:
      {
        result =
          TAO::Objref_Traits<iface>::marshal (
              _tao_union.foo_iface_member (),
              strm
            );
      }
      break;
    case 0:
      {
        result =
          TAO::Objref_Traits<iface>::marshal (
              _tao_union.foo_iface_member2 (),
              strm
            );
      }
      break;
  }

  return result;
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    foo &_tao_union
  )
{
  CORBA::Short _tao_discriminant;
  if ( !(strm >> _tao_discriminant) )
    {
      return false;
    }

  ::CORBA::Boolean result = true;

  switch (_tao_discriminant)
  {
    case 3:
    case 4:
    case 1:
      {
        ::CORBA::String_var _tao_union_tmp;
        result = strm >> _tao_union_tmp.out ();

        if (result)
          {
            _tao_union.foo_str_member (_tao_union_tmp);
            _tao_union._d (_tao_discriminant);
          }
      }
      break;
    default:
      {
        iface_var _tao_union_tmp;
        result = strm >> _tao_union_tmp.inout ();

        if (result)
          {
            _tao_union.foo_iface_member (_tao_union_tmp.in ());
            _tao_union._d (_tao_discriminant);
          }
      }
      break;
    case 0:
      {
        iface_var _tao_union_tmp;
        result = strm >> _tao_union_tmp.inout ();

        if (result)
          {
            _tao_union.foo_iface_member2 (_tao_union_tmp.in ());
            _tao_union._d (_tao_discriminant);
          }
      }
      break;
  }

  return result;
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_structure/cdr_op_cs.cpp:49

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const bar &_tao_aggregate)
{
  return
    (strm << _tao_aggregate.bar_long_member) &&
    (strm << _tao_aggregate.bar_foo_member);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    bar &_tao_aggregate)
{
  return
    (strm >> _tao_aggregate.bar_long_member) &&
    (strm >> _tao_aggregate.bar_foo_member);
}

TAO_END_VERSIONED_NAMESPACE_DECL



