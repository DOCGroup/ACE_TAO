// -*- C++ -*-
/**
 * Code generated by the The ACE ORB (TAO) IDL Compiler v2.4.1
 * TAO and the TAO IDL Compiler have been developed by:
 *       Center for Distributed Object Computing
 *       Washington University
 *       St. Louis, MO
 *       USA
 *       http://www.cs.wustl.edu/~schmidt/doc-center.html
 * and
 *       Distributed Object Computing Laboratory
 *       University of California at Irvine
 *       Irvine, CA
 *       USA
 * and
 *       Institute for Software Integrated Systems
 *       Vanderbilt University
 *       Nashville, TN
 *       USA
 *       http://www.isis.vanderbilt.edu/
 *
 * Information about TAO is available at:
 *     http://www.dre.vanderbilt.edu/~schmidt/TAO.html
 **/

// TAO_IDL - Generated from
// be/be_codegen.cpp:149

#ifndef _TAO_IDL_CCSC_FJ7S4Y_H_
#define _TAO_IDL_CCSC_FJ7S4Y_H_

#include /**/ "ace/pre.h"


#include /**/ "ace/config-all.h"

#if !defined (ACE_LACKS_PRAGMA_ONCE)
# pragma once
#endif /* ACE_LACKS_PRAGMA_ONCE */


#include "tao/ORB.h"
#include "tao/SystemException.h"
#include "tao/UserException.h"
#include "tao/Basic_Types.h"
#include "tao/ORB_Constants.h"
#include "tao/Object.h"
#include "tao/String_Manager_T.h"
#include "tao/Sequence_T.h"
#include "tao/Objref_VarOut_T.h"
#include "tao/Seq_Var_T.h"
#include "tao/Seq_Out_T.h"
#include "tao/VarOut_T.h"
#include "tao/Arg_Traits_T.h"
#include "tao/Basic_Arguments.h"
#include "tao/Special_Basic_Arguments.h"
#include "tao/Any_Insert_Policy_T.h"
#include "tao/Basic_Argument_T.h"
#include "tao/Fixed_Size_Argument_T.h"
#include "tao/Var_Size_Argument_T.h"
#include "tao/Object_Argument_T.h"
#include "tao/UB_String_Arguments.h"
#include /**/ "tao/Version.h"
#include /**/ "tao/Versioned_Namespace.h"

#if TAO_MAJOR_VERSION != 2 || TAO_MINOR_VERSION != 4 || TAO_MICRO_VERSION != 1
#error This file should be regenerated with TAO_IDL
#endif

#if defined (TAO_EXPORT_MACRO)
#undef TAO_EXPORT_MACRO
#endif
#define TAO_EXPORT_MACRO

// TAO_IDL - Generated from
// be/be_visitor_root/root_ch.cpp:157
TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<typename T> class Narrow_Utils;
}
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_module/module_ch.cpp:35

namespace CCS
{

  // TAO_IDL - Generated from
  // be/be_visitor_typedef/typedef_ch.cpp:370

  typedef ::CORBA::ULong AssetType;
  typedef ::CORBA::ULong_out AssetType_out;

  // TAO_IDL - Generated from
  // be/be_visitor_typedef/typedef_ch.cpp:404

  typedef char * ModelType;
  typedef ::CORBA::String_var ModelType_var;
  typedef ::CORBA::String_out ModelType_out;

  // TAO_IDL - Generated from
  // be/be_visitor_typedef/typedef_ch.cpp:370

  typedef ::CORBA::Short TempType;
  typedef ::CORBA::Short_out TempType_out;

  // TAO_IDL - Generated from
  // be/be_visitor_typedef/typedef_ch.cpp:404

  typedef char * LocType;
  typedef ::CORBA::String_var LocType_var;
  typedef ::CORBA::String_out LocType_out;

  // TAO_IDL - Generated from
  // be/be_interface.cpp:748

#if !defined (_CCS_THERMOMETER__VAR_OUT_CH_)
#define _CCS_THERMOMETER__VAR_OUT_CH_

  class Thermometer;
  typedef Thermometer *Thermometer_ptr;

  typedef
    TAO_Objref_Var_T<
        Thermometer
      >
    Thermometer_var;

  typedef
    TAO_Objref_Out_T<
        Thermometer
      >
    Thermometer_out;

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // be/be_visitor_interface/interface_ch.cpp:40

  class  Thermometer
    : public virtual ::CORBA::Object
  {
  public:
    friend class TAO::Narrow_Utils<Thermometer>;

    // TAO_IDL - Generated from
    // be/be_type.cpp:304

    typedef Thermometer_ptr _ptr_type;
    typedef Thermometer_var _var_type;
    typedef Thermometer_out _out_type;

    // The static operations.
    static Thermometer_ptr _duplicate (Thermometer_ptr obj);

    static void _tao_release (Thermometer_ptr obj);

    static Thermometer_ptr _narrow (::CORBA::Object_ptr obj);
    static Thermometer_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
    static Thermometer_ptr _nil (void);

    virtual char * model (
      void);

    virtual ::CCS::AssetType asset_num (
      void);

    virtual ::CCS::TempType temperature (
      void);

    virtual char * location (
      void);

    virtual void location (
      const char * location);

    virtual void remove (
      void);

    // TAO_IDL - Generated from
    // be/be_visitor_interface/interface_ch.cpp:137

    virtual ::CORBA::Boolean _is_a (const char *type_id);
    virtual const char* _interface_repository_id (void) const;
    virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);

  protected:
    // Concrete interface only.
    Thermometer (void);

    // Concrete non-local interface only.
    Thermometer (
        ::IOP::IOR *ior,
        TAO_ORB_Core *orb_core);

    // Non-local interface only.
    Thermometer (
        TAO_Stub *objref,
        ::CORBA::Boolean _tao_collocated = false,
        TAO_Abstract_ServantBase *servant = 0,
        TAO_ORB_Core *orb_core = 0);

    virtual ~Thermometer (void);

  private:
    // Private and unimplemented for concrete interfaces.
    Thermometer (const Thermometer &);

    void operator= (const Thermometer &);
  };

  // TAO_IDL - Generated from
  // be/be_interface.cpp:748

#if !defined (_CCS_THERMOSTAT__VAR_OUT_CH_)
#define _CCS_THERMOSTAT__VAR_OUT_CH_

  class Thermostat;
  typedef Thermostat *Thermostat_ptr;

  typedef
    TAO_Objref_Var_T<
        Thermostat
      >
    Thermostat_var;

  typedef
    TAO_Objref_Out_T<
        Thermostat
      >
    Thermostat_out;

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // be/be_visitor_interface/interface_ch.cpp:40

  class  Thermostat
    : public virtual ::CCS::Thermometer

  {
  public:
    friend class TAO::Narrow_Utils<Thermostat>;

    // TAO_IDL - Generated from
    // be/be_type.cpp:304

    typedef Thermostat_ptr _ptr_type;
    typedef Thermostat_var _var_type;
    typedef Thermostat_out _out_type;

    // The static operations.
    static Thermostat_ptr _duplicate (Thermostat_ptr obj);

    static void _tao_release (Thermostat_ptr obj);

    static Thermostat_ptr _narrow (::CORBA::Object_ptr obj);
    static Thermostat_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
    static Thermostat_ptr _nil (void);

    // TAO_IDL - Generated from
    // be/be_type.cpp:258

    struct BtData;

    typedef
      ::TAO_Var_Var_T<
          BtData
        >
      BtData_var;

    typedef
      ::TAO_Out_T<
          BtData
        >
      BtData_out;

    // TAO_IDL - Generated from
    // be/be_visitor_structure/structure_ch.cpp:48

    struct  BtData
    {

      // TAO_IDL - Generated from
      // be/be_type.cpp:304


      typedef BtData_var _var_type;
      typedef BtData_out _out_type;

      CCS::TempType requested;
      CCS::TempType min_permitted;
      CCS::TempType max_permitted;
      ::TAO::String_Manager error_msg;
    };

    // TAO_IDL - Generated from
    // be/be_visitor_exception/exception_ch.cpp:41

    class  BadTemp : public ::CORBA::UserException
    {
    public:
      CCS::Thermostat::BtData details;

      BadTemp (void);
      BadTemp (const BadTemp &);
      ~BadTemp (void);

      BadTemp &operator= (const BadTemp &);

      static BadTemp *_downcast ( ::CORBA::Exception *);
      static const BadTemp *_downcast ( ::CORBA::Exception const *);

      static ::CORBA::Exception *_alloc (void);

      virtual ::CORBA::Exception *_tao_duplicate (void) const;

      virtual void _raise (void) const;

      virtual void _tao_encode (TAO_OutputCDR &cdr) const;
      virtual void _tao_decode (TAO_InputCDR &cdr);

      // TAO_IDL - Generated from
      // be/be_visitor_exception/exception_ctor.cpp:51

      BadTemp (
          const CCS::Thermostat::BtData & _tao_details);
    };

    virtual ::CCS::TempType get_nominal (
      void);

    virtual ::CCS::TempType set_nominal (
      ::CCS::TempType new_temp);

    // TAO_IDL - Generated from
    // be/be_visitor_interface/interface_ch.cpp:137

    virtual ::CORBA::Boolean _is_a (const char *type_id);
    virtual const char* _interface_repository_id (void) const;
    virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);

  protected:
    // Concrete interface only.
    Thermostat (void);

    // Concrete non-local interface only.
    Thermostat (
        ::IOP::IOR *ior,
        TAO_ORB_Core *orb_core);

    // Non-local interface only.
    Thermostat (
        TAO_Stub *objref,
        ::CORBA::Boolean _tao_collocated = false,
        TAO_Abstract_ServantBase *servant = 0,
        TAO_ORB_Core *orb_core = 0);

    virtual ~Thermostat (void);

  private:
    // Private and unimplemented for concrete interfaces.
    Thermostat (const Thermostat &);

    void operator= (const Thermostat &);
  };

  // TAO_IDL - Generated from
  // be/be_interface.cpp:748

#if !defined (_CCS_CONTROLLER__VAR_OUT_CH_)
#define _CCS_CONTROLLER__VAR_OUT_CH_

  class Controller;
  typedef Controller *Controller_ptr;

  typedef
    TAO_Objref_Var_T<
        Controller
      >
    Controller_var;

  typedef
    TAO_Objref_Out_T<
        Controller
      >
    Controller_out;

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // be/be_visitor_interface/interface_ch.cpp:40

  class  Controller
    : public virtual ::CORBA::Object
  {
  public:
    friend class TAO::Narrow_Utils<Controller>;

    // TAO_IDL - Generated from
    // be/be_type.cpp:304

    typedef Controller_ptr _ptr_type;
    typedef Controller_var _var_type;
    typedef Controller_out _out_type;

    // The static operations.
    static Controller_ptr _duplicate (Controller_ptr obj);

    static void _tao_release (Controller_ptr obj);

    static Controller_ptr _narrow (::CORBA::Object_ptr obj);
    static Controller_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
    static Controller_ptr _nil (void);

    // TAO_IDL - Generated from
    // be/be_visitor_exception/exception_ch.cpp:41

    class  DuplicateAsset : public ::CORBA::UserException
    {
    public:

      DuplicateAsset (void);
      DuplicateAsset (const DuplicateAsset &);
      ~DuplicateAsset (void);

      DuplicateAsset &operator= (const DuplicateAsset &);

      static DuplicateAsset *_downcast ( ::CORBA::Exception *);
      static const DuplicateAsset *_downcast ( ::CORBA::Exception const *);

      static ::CORBA::Exception *_alloc (void);

      virtual ::CORBA::Exception *_tao_duplicate (void) const;

      virtual void _raise (void) const;

      virtual void _tao_encode (TAO_OutputCDR &cdr) const;
      virtual void _tao_decode (TAO_InputCDR &cdr);
    };

    virtual ::CCS::Thermometer_ptr create_thermometer (
      ::CCS::AssetType anum,
      const char * loc);

    virtual ::CCS::Thermostat_ptr create_thermostat (
      ::CCS::AssetType anum,
      const char * loc,
      ::CCS::TempType temp);

    // TAO_IDL - Generated from
    // be/be_visitor_sequence/sequence_ch.cpp:99

#if !defined (_CCS_CONTROLLER_THERMOMETERSEQ_CH_)
#define _CCS_CONTROLLER_THERMOMETERSEQ_CH_

    class ThermometerSeq;

    typedef
      ::TAO_VarSeq_Var_T<
          ThermometerSeq
        >
      ThermometerSeq_var;

    typedef
      ::TAO_Seq_Out_T<
          ThermometerSeq
        >
      ThermometerSeq_out;

    class  ThermometerSeq
      : public
          ::TAO::unbounded_object_reference_sequence<
              CCS::Thermometer,
              CCS::Thermometer_var
            >
    {
    public:
      ThermometerSeq (void);
      ThermometerSeq ( ::CORBA::ULong max);
      ThermometerSeq (
        ::CORBA::ULong max,
        ::CORBA::ULong length,
        CCS::Thermometer_ptr* buffer,
        ::CORBA::Boolean release = false);
      ThermometerSeq (const ThermometerSeq &);
      virtual ~ThermometerSeq (void);


      // TAO_IDL - Generated from
      // be/be_type.cpp:304


      typedef ThermometerSeq_var _var_type;
      typedef ThermometerSeq_out _out_type;
    };

#endif /* end #if !defined */

    // TAO_IDL - Generated from
    // be/be_visitor_sequence/sequence_ch.cpp:99

#if !defined (_CCS_CONTROLLER_THERMOSTATSEQ_CH_)
#define _CCS_CONTROLLER_THERMOSTATSEQ_CH_

    class ThermostatSeq;

    typedef
      ::TAO_VarSeq_Var_T<
          ThermostatSeq
        >
      ThermostatSeq_var;

    typedef
      ::TAO_Seq_Out_T<
          ThermostatSeq
        >
      ThermostatSeq_out;

    class  ThermostatSeq
      : public
          ::TAO::unbounded_object_reference_sequence<
              CCS::Thermostat,
              CCS::Thermostat_var
            >
    {
    public:
      ThermostatSeq (void);
      ThermostatSeq ( ::CORBA::ULong max);
      ThermostatSeq (
        ::CORBA::ULong max,
        ::CORBA::ULong length,
        CCS::Thermostat_ptr* buffer,
        ::CORBA::Boolean release = false);
      ThermostatSeq (const ThermostatSeq &);
      virtual ~ThermostatSeq (void);


      // TAO_IDL - Generated from
      // be/be_type.cpp:304


      typedef ThermostatSeq_var _var_type;
      typedef ThermostatSeq_out _out_type;
    };

#endif /* end #if !defined */

    // TAO_IDL - Generated from
    // be/be_visitor_enum/enum_ch.cpp:44

    enum SearchCriterion
    {
      ASSET,
      LOCATION,
      MODEL
    };

    typedef SearchCriterion &SearchCriterion_out;

    // TAO_IDL - Generated from
    // be/be_type.cpp:258

    class KeyType;

    typedef
      ::TAO_Var_Var_T<
          KeyType
        >
      KeyType_var;

    typedef
      ::TAO_Out_T<
          KeyType
        >
      KeyType_out;

    class  KeyType
    {
    public:
      KeyType (void);
      KeyType (const KeyType &);
      ~KeyType (void);

      KeyType &operator= (const KeyType &);

      // TAO_IDL - Generated from
      // be/be_visitor_union/discriminant_ch.cpp:67

      void _d (CCS::Controller::SearchCriterion);
      CCS::Controller::SearchCriterion _d (void) const;

      // TAO_IDL - Generated from
      // be/be_type.cpp:304


      typedef KeyType_var _var_type;
      typedef KeyType_out _out_type;

      // TAO_IDL - Generated from
      // be/be_visitor_union_branch/public_ch.cpp:449

      void asset_num ( CCS::AssetType);
      CCS::AssetType asset_num (void) const;

      // TAO_IDL - Generated from
      // be/be_visitor_union_branch/public_ch.cpp:580

      void loc (char *);
      void loc (const char *);
      void loc (const ::CORBA::String_var&);
      const char *loc (void) const;

      // TAO_IDL - Generated from
      // be/be_visitor_union_branch/public_ch.cpp:580

      void model_desc (char *);
      void model_desc (const char *);
      void model_desc (const ::CORBA::String_var&);
      const char *model_desc (void) const;

      // TAO_IDL - Generated from
      // be/be_visitor_union/union_ch.cpp:121

      void _default (void);
    private:
      CCS::Controller::SearchCriterion disc_;

      union
      {
        // TAO_IDL - Generated from
        // be/be_visitor_union_branch/private_ch.cpp:377
        CCS::AssetType asset_num_;
        // TAO_IDL - Generated from
        // be/be_visitor_union_branch/private_ch.cpp:474
        char *loc_;
        // TAO_IDL - Generated from
        // be/be_visitor_union_branch/private_ch.cpp:474
        char *model_desc_;
      } u_;

      /// TAO extension - frees any allocated storage.
      void _reset (void);
    };

    // TAO_IDL - Generated from
    // be/be_type.cpp:258

    struct SearchType;

    typedef
      ::TAO_Var_Var_T<
          SearchType
        >
      SearchType_var;

    typedef
      ::TAO_Out_T<
          SearchType
        >
      SearchType_out;

    // TAO_IDL - Generated from
    // be/be_visitor_structure/structure_ch.cpp:48

    struct  SearchType
    {

      // TAO_IDL - Generated from
      // be/be_type.cpp:304


      typedef SearchType_var _var_type;
      typedef SearchType_out _out_type;



      CCS::Controller::KeyType key;
      CCS::Thermometer_var device;
    };

    // TAO_IDL - Generated from
    // be/be_visitor_sequence/sequence_ch.cpp:99

#if !defined (_CCS_CONTROLLER_SEARCHSEQ_CH_)
#define _CCS_CONTROLLER_SEARCHSEQ_CH_

    class SearchSeq;

    typedef
      ::TAO_VarSeq_Var_T<
          SearchSeq
        >
      SearchSeq_var;

    typedef
      ::TAO_Seq_Out_T<
          SearchSeq
        >
      SearchSeq_out;

    class  SearchSeq
      : public
          ::TAO::unbounded_value_sequence<
              SearchType
            >
    {
    public:
      SearchSeq (void);
      SearchSeq ( ::CORBA::ULong max);
      SearchSeq (
        ::CORBA::ULong max,
        ::CORBA::ULong length,
        SearchType* buffer,
        ::CORBA::Boolean release = false);
      SearchSeq (const SearchSeq &);
      virtual ~SearchSeq (void);


      // TAO_IDL - Generated from
      // be/be_type.cpp:304


      typedef SearchSeq_var _var_type;
      typedef SearchSeq_out _out_type;
    };

#endif /* end #if !defined */

    // TAO_IDL - Generated from
    // be/be_type.cpp:258

    struct ErrorDetails;

    typedef
      ::TAO_Var_Var_T<
          ErrorDetails
        >
      ErrorDetails_var;

    typedef
      ::TAO_Out_T<
          ErrorDetails
        >
      ErrorDetails_out;

    // TAO_IDL - Generated from
    // be/be_visitor_structure/structure_ch.cpp:48

    struct  ErrorDetails
    {

      // TAO_IDL - Generated from
      // be/be_type.cpp:304


      typedef ErrorDetails_var _var_type;
      typedef ErrorDetails_out _out_type;

      CCS::Thermostat_var tmstat_ref;
      CCS::Thermostat::BtData info;
    };

    // TAO_IDL - Generated from
    // be/be_visitor_sequence/sequence_ch.cpp:99

#if !defined (_CCS_CONTROLLER_ERRSEQ_CH_)
#define _CCS_CONTROLLER_ERRSEQ_CH_

    class ErrSeq;

    typedef
      ::TAO_VarSeq_Var_T<
          ErrSeq
        >
      ErrSeq_var;

    typedef
      ::TAO_Seq_Out_T<
          ErrSeq
        >
      ErrSeq_out;

    class  ErrSeq
      : public
          ::TAO::unbounded_value_sequence<
              ErrorDetails
            >
    {
    public:
      ErrSeq (void);
      ErrSeq ( ::CORBA::ULong max);
      ErrSeq (
        ::CORBA::ULong max,
        ::CORBA::ULong length,
        ErrorDetails* buffer,
        ::CORBA::Boolean release = false);
      ErrSeq (const ErrSeq &);
      virtual ~ErrSeq (void);


      // TAO_IDL - Generated from
      // be/be_type.cpp:304


      typedef ErrSeq_var _var_type;
      typedef ErrSeq_out _out_type;
    };

#endif /* end #if !defined */

    // TAO_IDL - Generated from
    // be/be_visitor_exception/exception_ch.cpp:41

    class  EChange : public ::CORBA::UserException
    {
    public:
      CCS::Controller::ErrSeq errors;

      EChange (void);
      EChange (const EChange &);
      ~EChange (void);

      EChange &operator= (const EChange &);

      static EChange *_downcast ( ::CORBA::Exception *);
      static const EChange *_downcast ( ::CORBA::Exception const *);

      static ::CORBA::Exception *_alloc (void);

      virtual ::CORBA::Exception *_tao_duplicate (void) const;

      virtual void _raise (void) const;

      virtual void _tao_encode (TAO_OutputCDR &cdr) const;
      virtual void _tao_decode (TAO_InputCDR &cdr);

      // TAO_IDL - Generated from
      // be/be_visitor_exception/exception_ctor.cpp:51

      EChange (
          const CCS::Controller::ErrSeq & _tao_errors);
    };

    virtual ::CCS::Controller::ThermometerSeq * list (
      void);

    virtual void find (
      ::CCS::Controller::SearchSeq & slist);

    virtual void change (
      const ::CCS::Controller::ThermostatSeq & tlist,
      ::CORBA::Short delta);

    // TAO_IDL - Generated from
    // be/be_visitor_interface/interface_ch.cpp:137

    virtual ::CORBA::Boolean _is_a (const char *type_id);
    virtual const char* _interface_repository_id (void) const;
    virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);

  protected:
    // Concrete interface only.
    Controller (void);

    // Concrete non-local interface only.
    Controller (
        ::IOP::IOR *ior,
        TAO_ORB_Core *orb_core);

    // Non-local interface only.
    Controller (
        TAO_Stub *objref,
        ::CORBA::Boolean _tao_collocated = false,
        TAO_Abstract_ServantBase *servant = 0,
        TAO_ORB_Core *orb_core = 0);

    virtual ~Controller (void);

  private:
    // Private and unimplemented for concrete interfaces.
    Controller (const Controller &);

    void operator= (const Controller &);
  };

// TAO_IDL - Generated from
// be/be_visitor_module/module_ch.cpp:64

} // module CCS

// TAO_IDL - Generated from
// be/be_visitor_arg_traits.cpp:66

TAO_BEGIN_VERSIONED_NAMESPACE_DECL


// Arg traits specializations.
namespace TAO
{

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:145

#if !defined (_CCS_THERMOMETER__ARG_TRAITS_)
#define _CCS_THERMOMETER__ARG_TRAITS_

  template<>
  class  Arg_Traits< ::CCS::Thermometer>
    : public
        Object_Arg_Traits_T<
            ::CCS::Thermometer_ptr,
            ::CCS::Thermometer_var,
            ::CCS::Thermometer_out,
            TAO::Objref_Traits<CCS::Thermometer>,
            TAO::Any_Insert_Policy_Noop
          >
  {
  };

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:145

#if !defined (_CCS_THERMOSTAT__ARG_TRAITS_)
#define _CCS_THERMOSTAT__ARG_TRAITS_

  template<>
  class  Arg_Traits< ::CCS::Thermostat>
    : public
        Object_Arg_Traits_T<
            ::CCS::Thermostat_ptr,
            ::CCS::Thermostat_var,
            ::CCS::Thermostat_out,
            TAO::Objref_Traits<CCS::Thermostat>,
            TAO::Any_Insert_Policy_Noop
          >
  {
  };

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:945

  template<>
  class Arg_Traits< ::CCS::Thermostat::BtData>
    : public
        Var_Size_Arg_Traits_T<
            ::CCS::Thermostat::BtData,
            TAO::Any_Insert_Policy_Noop
          >
  {
  };

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:145

#if !defined (_CCS_CONTROLLER__ARG_TRAITS_)
#define _CCS_CONTROLLER__ARG_TRAITS_

  template<>
  class  Arg_Traits< ::CCS::Controller>
    : public
        Object_Arg_Traits_T<
            ::CCS::Controller_ptr,
            ::CCS::Controller_var,
            ::CCS::Controller_out,
            TAO::Objref_Traits<CCS::Controller>,
            TAO::Any_Insert_Policy_Noop
          >
  {
  };

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:683

  template<>
  class Arg_Traits< ::CCS::Controller::ThermometerSeq>
    : public
        Var_Size_Arg_Traits_T<
            ::CCS::Controller::ThermometerSeq,
            TAO::Any_Insert_Policy_Noop
          >
  {
  };

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:683

  template<>
  class Arg_Traits< ::CCS::Controller::ThermostatSeq>
    : public
        Var_Size_Arg_Traits_T<
            ::CCS::Controller::ThermostatSeq,
            TAO::Any_Insert_Policy_Noop
          >
  {
  };

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:902

  template<>
  class Arg_Traits< ::CCS::Controller::SearchCriterion>
    : public
        Basic_Arg_Traits_T<
            ::CCS::Controller::SearchCriterion,
            TAO::Any_Insert_Policy_Noop
          >
  {
  };

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:1056

  template<>
  class Arg_Traits< ::CCS::Controller::KeyType>
    : public
        Var_Size_Arg_Traits_T<
            ::CCS::Controller::KeyType,
            TAO::Any_Insert_Policy_Noop
          >
  {
  };

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:945

  template<>
  class Arg_Traits< ::CCS::Controller::SearchType>
    : public
        Var_Size_Arg_Traits_T<
            ::CCS::Controller::SearchType,
            TAO::Any_Insert_Policy_Noop
          >
  {
  };

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:683

  template<>
  class Arg_Traits< ::CCS::Controller::SearchSeq>
    : public
        Var_Size_Arg_Traits_T<
            ::CCS::Controller::SearchSeq,
            TAO::Any_Insert_Policy_Noop
          >
  {
  };

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:945

  template<>
  class Arg_Traits< ::CCS::Controller::ErrorDetails>
    : public
        Var_Size_Arg_Traits_T<
            ::CCS::Controller::ErrorDetails,
            TAO::Any_Insert_Policy_Noop
          >
  {
  };

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:683

  template<>
  class Arg_Traits< ::CCS::Controller::ErrSeq>
    : public
        Var_Size_Arg_Traits_T<
            ::CCS::Controller::ErrSeq,
            TAO::Any_Insert_Policy_Noop
          >
  {
  };
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_traits.cpp:60

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Traits specializations.
namespace TAO
{

#if !defined (_CCS_THERMOMETER__TRAITS_)
#define _CCS_THERMOMETER__TRAITS_

  template<>
  struct  Objref_Traits< ::CCS::Thermometer>
  {
    static ::CCS::Thermometer_ptr duplicate (
        ::CCS::Thermometer_ptr p);
    static void release (
        ::CCS::Thermometer_ptr p);
    static ::CCS::Thermometer_ptr nil (void);
    static ::CORBA::Boolean marshal (
        const ::CCS::Thermometer_ptr p,
        TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_CCS_THERMOSTAT__TRAITS_)
#define _CCS_THERMOSTAT__TRAITS_

  template<>
  struct  Objref_Traits< ::CCS::Thermostat>
  {
    static ::CCS::Thermostat_ptr duplicate (
        ::CCS::Thermostat_ptr p);
    static void release (
        ::CCS::Thermostat_ptr p);
    static ::CCS::Thermostat_ptr nil (void);
    static ::CORBA::Boolean marshal (
        const ::CCS::Thermostat_ptr p,
        TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_CCS_CONTROLLER__TRAITS_)
#define _CCS_CONTROLLER__TRAITS_

  template<>
  struct  Objref_Traits< ::CCS::Controller>
  {
    static ::CCS::Controller_ptr duplicate (
        ::CCS::Controller_ptr p);
    static void release (
        ::CCS::Controller_ptr p);
    static ::CCS::Controller_ptr nil (void);
    static ::CORBA::Boolean marshal (
        const ::CCS::Controller_ptr p,
        TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */
}
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_interface/cdr_op_ch.cpp:41

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 ::CORBA::Boolean operator<< (TAO_OutputCDR &, const CCS::Thermometer_ptr );
 ::CORBA::Boolean operator>> (TAO_InputCDR &, CCS::Thermometer_ptr &);

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_interface/cdr_op_ch.cpp:41

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 ::CORBA::Boolean operator<< (TAO_OutputCDR &, const CCS::Thermostat_ptr );
 ::CORBA::Boolean operator>> (TAO_InputCDR &, CCS::Thermostat_ptr &);

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_structure/cdr_op_ch.cpp:43


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 ::CORBA::Boolean operator<< (TAO_OutputCDR &, const CCS::Thermostat::BtData &);
 ::CORBA::Boolean operator>> (TAO_InputCDR &, CCS::Thermostat::BtData &);

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_exception/cdr_op_ch.cpp:37
TAO_BEGIN_VERSIONED_NAMESPACE_DECL



 ::CORBA::Boolean operator<< (TAO_OutputCDR &, const CCS::Thermostat::BadTemp &);
 ::CORBA::Boolean operator>> (TAO_InputCDR &, CCS::Thermostat::BadTemp &);

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_interface/cdr_op_ch.cpp:41

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 ::CORBA::Boolean operator<< (TAO_OutputCDR &, const CCS::Controller_ptr );
 ::CORBA::Boolean operator>> (TAO_InputCDR &, CCS::Controller_ptr &);

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_exception/cdr_op_ch.cpp:37
TAO_BEGIN_VERSIONED_NAMESPACE_DECL



 ::CORBA::Boolean operator<< (TAO_OutputCDR &, const CCS::Controller::DuplicateAsset &);
 ::CORBA::Boolean operator>> (TAO_InputCDR &, CCS::Controller::DuplicateAsset &);

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_sequence/cdr_op_ch.cpp:65

#if !defined _TAO_CDR_OP_CCS_Controller_ThermometerSeq_H_
#define _TAO_CDR_OP_CCS_Controller_ThermometerSeq_H_
TAO_BEGIN_VERSIONED_NAMESPACE_DECL


 ::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const CCS::Controller::ThermometerSeq &_tao_sequence);
 ::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    CCS::Controller::ThermometerSeq &_tao_sequence);

TAO_END_VERSIONED_NAMESPACE_DECL



#endif /* _TAO_CDR_OP_CCS_Controller_ThermometerSeq_H_ */

// TAO_IDL - Generated from
// be/be_visitor_sequence/cdr_op_ch.cpp:65

#if !defined _TAO_CDR_OP_CCS_Controller_ThermostatSeq_H_
#define _TAO_CDR_OP_CCS_Controller_ThermostatSeq_H_
TAO_BEGIN_VERSIONED_NAMESPACE_DECL


 ::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const CCS::Controller::ThermostatSeq &_tao_sequence);
 ::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    CCS::Controller::ThermostatSeq &_tao_sequence);

TAO_END_VERSIONED_NAMESPACE_DECL



#endif /* _TAO_CDR_OP_CCS_Controller_ThermostatSeq_H_ */

// TAO_IDL - Generated from
// be/be_visitor_enum/cdr_op_ch.cpp:34


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 ::CORBA::Boolean operator<< (TAO_OutputCDR &strm, CCS::Controller::SearchCriterion _tao_enumerator);
 ::CORBA::Boolean operator>> (TAO_InputCDR &strm, CCS::Controller::SearchCriterion &_tao_enumerator);

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_union/cdr_op_ch.cpp:38


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 ::CORBA::Boolean operator<< (TAO_OutputCDR &, const CCS::Controller::KeyType &);
 ::CORBA::Boolean operator>> (TAO_InputCDR &, CCS::Controller::KeyType &);

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_structure/cdr_op_ch.cpp:43


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 ::CORBA::Boolean operator<< (TAO_OutputCDR &, const CCS::Controller::SearchType &);
 ::CORBA::Boolean operator>> (TAO_InputCDR &, CCS::Controller::SearchType &);

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_sequence/cdr_op_ch.cpp:65

#if !defined _TAO_CDR_OP_CCS_Controller_SearchSeq_H_
#define _TAO_CDR_OP_CCS_Controller_SearchSeq_H_
TAO_BEGIN_VERSIONED_NAMESPACE_DECL


 ::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const CCS::Controller::SearchSeq &_tao_sequence);
 ::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    CCS::Controller::SearchSeq &_tao_sequence);

TAO_END_VERSIONED_NAMESPACE_DECL



#endif /* _TAO_CDR_OP_CCS_Controller_SearchSeq_H_ */

// TAO_IDL - Generated from
// be/be_visitor_structure/cdr_op_ch.cpp:43


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 ::CORBA::Boolean operator<< (TAO_OutputCDR &, const CCS::Controller::ErrorDetails &);
 ::CORBA::Boolean operator>> (TAO_InputCDR &, CCS::Controller::ErrorDetails &);

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_sequence/cdr_op_ch.cpp:65

#if !defined _TAO_CDR_OP_CCS_Controller_ErrSeq_H_
#define _TAO_CDR_OP_CCS_Controller_ErrSeq_H_
TAO_BEGIN_VERSIONED_NAMESPACE_DECL


 ::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const CCS::Controller::ErrSeq &_tao_sequence);
 ::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    CCS::Controller::ErrSeq &_tao_sequence);

TAO_END_VERSIONED_NAMESPACE_DECL



#endif /* _TAO_CDR_OP_CCS_Controller_ErrSeq_H_ */

// TAO_IDL - Generated from
// be/be_visitor_exception/cdr_op_ch.cpp:37
TAO_BEGIN_VERSIONED_NAMESPACE_DECL



 ::CORBA::Boolean operator<< (TAO_OutputCDR &, const CCS::Controller::EChange &);
 ::CORBA::Boolean operator>> (TAO_InputCDR &, CCS::Controller::EChange &);

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_codegen.cpp:1700
#if defined (__ACE_INLINE__)
#include "CCSC.inl"
#endif /* defined INLINE */

#include /**/ "ace/post.h"

#endif /* ifndef */

