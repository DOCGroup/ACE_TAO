// -*- C++ -*-
/**
 * Code generated by the The ACE ORB (TAO) IDL Compiler v2.4.1
 * TAO and the TAO IDL Compiler have been developed by:
 *       Center for Distributed Object Computing
 *       Washington University
 *       St. Louis, MO
 *       USA
 *       http://www.cs.wustl.edu/~schmidt/doc-center.html
 * and
 *       Distributed Object Computing Laboratory
 *       University of California at Irvine
 *       Irvine, CA
 *       USA
 * and
 *       Institute for Software Integrated Systems
 *       Vanderbilt University
 *       Nashville, TN
 *       USA
 *       http://www.isis.vanderbilt.edu/
 *
 * Information about TAO is available at:
 *     http://www.dre.vanderbilt.edu/~schmidt/TAO.html
 **/

// TAO_IDL - Generated from
// be/be_codegen.cpp:373


#include "CCSC.h"
#include "tao/CDR.h"
#include "tao/Exception_Data.h"
#include "tao/Invocation_Adapter.h"
#include "tao/Object_T.h"
#include "tao/SystemException.h"
#include "ace/OS_NS_string.h"

#if !defined (__ACE_INLINE__)
#include "CCSC.inl"
#endif /* !defined INLINE */

// TAO_IDL - Generated from
// be/be_visitor_interface/interface_cs.cpp:48

// Traits specializations for CCS::Thermometer.

CCS::Thermometer_ptr
TAO::Objref_Traits<CCS::Thermometer>::duplicate (
    CCS::Thermometer_ptr p)
{
  return CCS::Thermometer::_duplicate (p);
}

void
TAO::Objref_Traits<CCS::Thermometer>::release (
    CCS::Thermometer_ptr p)
{
  ::CORBA::release (p);
}

CCS::Thermometer_ptr
TAO::Objref_Traits<CCS::Thermometer>::nil (void)
{
  return CCS::Thermometer::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<CCS::Thermometer>::marshal (
    const CCS::Thermometer_ptr p,
    TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:88

char *
CCS::Thermometer::model (
  void)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  TAO::Arg_Traits< char *>::ret_val _tao_retval;

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      1,
      "_get_model",
      10,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY,
      TAO::TAO_TWOWAY_INVOCATION
      ,
      TAO::TAO_SYNCHRONOUS_INVOCATION,
      false
    );

  _tao_call.invoke (0, 0);

  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:88

::CCS::AssetType
CCS::Thermometer::asset_num (
  void)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  TAO::Arg_Traits< ::CORBA::ULong>::ret_val _tao_retval;

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      1,
      "_get_asset_num",
      14,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY,
      TAO::TAO_TWOWAY_INVOCATION
      ,
      TAO::TAO_SYNCHRONOUS_INVOCATION,
      false
    );

  _tao_call.invoke (0, 0);

  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:88

::CCS::TempType
CCS::Thermometer::temperature (
  void)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  TAO::Arg_Traits< ::CORBA::Short>::ret_val _tao_retval;

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      1,
      "_get_temperature",
      16,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY,
      TAO::TAO_TWOWAY_INVOCATION
      ,
      TAO::TAO_SYNCHRONOUS_INVOCATION,
      false
    );

  _tao_call.invoke (0, 0);

  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:88

char *
CCS::Thermometer::location (
  void)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  TAO::Arg_Traits< char *>::ret_val _tao_retval;

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      1,
      "_get_location",
      13,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY,
      TAO::TAO_TWOWAY_INVOCATION
      ,
      TAO::TAO_SYNCHRONOUS_INVOCATION,
      false
    );

  _tao_call.invoke (0, 0);

  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:88

void
CCS::Thermometer::location (
  const char * location)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  TAO::Arg_Traits< void>::ret_val _tao_retval;
  TAO::Arg_Traits< char *>::in_arg_val _tao_location (location);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_location
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      2,
      "_set_location",
      13,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY
      
    );

  _tao_call.invoke (0, 0);
}

CCS::Thermometer::Thermometer (void)
{
}

CCS::Thermometer::~Thermometer (void)
{
}

CCS::Thermometer_ptr
CCS::Thermometer::_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return
    TAO::Narrow_Utils<Thermometer>::narrow (
        _tao_objref,
        "IDL:acme.com/CCS/Thermometer:1.0");
}

CCS::Thermometer_ptr
CCS::Thermometer::_unchecked_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return
    TAO::Narrow_Utils<Thermometer>::unchecked_narrow (
        _tao_objref);
}

CCS::Thermometer_ptr
CCS::Thermometer::_nil (void)
{
  return 0;
}

CCS::Thermometer_ptr
CCS::Thermometer::_duplicate (Thermometer_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  return obj;
}

void
CCS::Thermometer::_tao_release (Thermometer_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
CCS::Thermometer::_is_a (const char *value)
{
  if (
      ACE_OS::strcmp (
          value,
          "IDL:acme.com/CCS/Thermometer:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        ) == 0
    )
    {
      return true; // success using local knowledge
    }
  else
    {
      return this->::CORBA::Object::_is_a (value);
    }
}

const char* CCS::Thermometer::_interface_repository_id (void) const
{
  return "IDL:acme.com/CCS/Thermometer:1.0";
}

::CORBA::Boolean
CCS::Thermometer::marshal (TAO_OutputCDR &cdr)
{
  return (cdr << this);
}

// TAO_IDL - Generated from
// be/be_visitor_interface/interface_cs.cpp:48

// Traits specializations for CCS::Thermostat.

CCS::Thermostat_ptr
TAO::Objref_Traits<CCS::Thermostat>::duplicate (
    CCS::Thermostat_ptr p)
{
  return CCS::Thermostat::_duplicate (p);
}

void
TAO::Objref_Traits<CCS::Thermostat>::release (
    CCS::Thermostat_ptr p)
{
  ::CORBA::release (p);
}

CCS::Thermostat_ptr
TAO::Objref_Traits<CCS::Thermostat>::nil (void)
{
  return CCS::Thermostat::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<CCS::Thermostat>::marshal (
    const CCS::Thermostat_ptr p,
    TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

// TAO_IDL - Generated from
// be/be_visitor_exception/exception_ctor.cpp:51

CCS::Thermostat::BadTemp::BadTemp (
    const CCS::Thermostat::BtData & _tao_details)
  : ::CORBA::UserException (
        "IDL:acme.com/CCS/Thermostat/BadTemp:1.0",
        "BadTemp"
      )
{
  this->details = _tao_details;
}



// TAO_IDL - Generated from
// be/be_visitor_exception/exception_cs.cpp:98

CCS::Thermostat::BadTemp::BadTemp (void)
  : ::CORBA::UserException (
        "IDL:acme.com/CCS/Thermostat/BadTemp:1.0",
        "BadTemp"
      )
{
}

CCS::Thermostat::BadTemp::~BadTemp (void)
{
}

CCS::Thermostat::BadTemp::BadTemp (const ::CCS::Thermostat::BadTemp &_tao_excp)
  : ::CORBA::UserException (
        _tao_excp._rep_id (),
        _tao_excp._name ()
      )
{
  this->details = _tao_excp.details;
}

CCS::Thermostat::BadTemp&
CCS::Thermostat::BadTemp::operator= (const ::CCS::Thermostat::BadTemp &_tao_excp)
{
  this->::CORBA::UserException::operator= (_tao_excp);
  this->details = _tao_excp.details;
  return *this;
}

CCS::Thermostat::BadTemp *
CCS::Thermostat::BadTemp::_downcast ( ::CORBA::Exception *_tao_excp)
{
  return dynamic_cast<BadTemp *> (_tao_excp);
}

const CCS::Thermostat::BadTemp *
CCS::Thermostat::BadTemp::_downcast ( ::CORBA::Exception const *_tao_excp)
{
  return dynamic_cast<const BadTemp *> (_tao_excp);
}

::CORBA::Exception *CCS::Thermostat::BadTemp::_alloc (void)
{
  ::CORBA::Exception *retval = 0;
  ACE_NEW_RETURN (retval, ::CCS::Thermostat::BadTemp, 0);
  return retval;
}

::CORBA::Exception *
CCS::Thermostat::BadTemp::_tao_duplicate (void) const
{
  ::CORBA::Exception *result = 0;
  ACE_NEW_RETURN (
      result,
      ::CCS::Thermostat::BadTemp (*this),
      0
    );
  return result;
}

void CCS::Thermostat::BadTemp::_raise (void) const
{
  throw *this;
}

void CCS::Thermostat::BadTemp::_tao_encode (TAO_OutputCDR &cdr) const
{
  if (!(cdr << *this))
    {
      throw ::CORBA::MARSHAL ();
    }
}

void CCS::Thermostat::BadTemp::_tao_decode (TAO_InputCDR &cdr)
{
  if (!(cdr >> *this))
    {
      throw ::CORBA::MARSHAL ();
    }
}



// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:88

::CCS::TempType
CCS::Thermostat::get_nominal (
  void)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  TAO::Arg_Traits< ::CORBA::Short>::ret_val _tao_retval;

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      1,
      "get_nominal",
      11,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY,
      TAO::TAO_TWOWAY_INVOCATION
      ,
      TAO::TAO_SYNCHRONOUS_INVOCATION,
      false
    );

  _tao_call.invoke (0, 0);

  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:88

::CCS::TempType
CCS::Thermostat::set_nominal (
  ::CCS::TempType new_temp)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  TAO::Arg_Traits< ::CORBA::Short>::ret_val _tao_retval;
  TAO::Arg_Traits< ::CORBA::Short>::in_arg_val _tao_new_temp (new_temp);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_new_temp
    };

  static TAO::Exception_Data
  _tao_CCS_Thermostat_set_nominal_exceptiondata [] = 
    {
      {
        "IDL:acme.com/CCS/Thermostat/BadTemp:1.0",
        CCS::Thermostat::BadTemp::_alloc
#if TAO_HAS_INTERCEPTORS == 1
        , 0
#endif /* TAO_HAS_INTERCEPTORS */
      }
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      2,
      "set_nominal",
      11,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY
      
    );

  _tao_call.invoke (
      _tao_CCS_Thermostat_set_nominal_exceptiondata,
      1
    );

  return _tao_retval.retn ();
}

CCS::Thermostat::Thermostat (void)
{
}

CCS::Thermostat::~Thermostat (void)
{
}

CCS::Thermostat_ptr
CCS::Thermostat::_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return
    TAO::Narrow_Utils<Thermostat>::narrow (
        _tao_objref,
        "IDL:acme.com/CCS/Thermostat:1.0");
}

CCS::Thermostat_ptr
CCS::Thermostat::_unchecked_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return
    TAO::Narrow_Utils<Thermostat>::unchecked_narrow (
        _tao_objref);
}

CCS::Thermostat_ptr
CCS::Thermostat::_nil (void)
{
  return 0;
}

CCS::Thermostat_ptr
CCS::Thermostat::_duplicate (Thermostat_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  return obj;
}

void
CCS::Thermostat::_tao_release (Thermostat_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
CCS::Thermostat::_is_a (const char *value)
{
  if (
      ACE_OS::strcmp (
          value,
          "IDL:acme.com/CCS/Thermometer:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:acme.com/CCS/Thermostat:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        ) == 0
    )
    {
      return true; // success using local knowledge
    }
  else
    {
      return this->::CORBA::Object::_is_a (value);
    }
}

const char* CCS::Thermostat::_interface_repository_id (void) const
{
  return "IDL:acme.com/CCS/Thermostat:1.0";
}

::CORBA::Boolean
CCS::Thermostat::marshal (TAO_OutputCDR &cdr)
{
  return (cdr << this);
}

// TAO_IDL - Generated from
// be/be_visitor_interface/interface_cs.cpp:48

// Traits specializations for CCS::Controller.

CCS::Controller_ptr
TAO::Objref_Traits<CCS::Controller>::duplicate (
    CCS::Controller_ptr p)
{
  return CCS::Controller::_duplicate (p);
}

void
TAO::Objref_Traits<CCS::Controller>::release (
    CCS::Controller_ptr p)
{
  ::CORBA::release (p);
}

CCS::Controller_ptr
TAO::Objref_Traits<CCS::Controller>::nil (void)
{
  return CCS::Controller::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<CCS::Controller>::marshal (
    const CCS::Controller_ptr p,
    TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

// TAO_IDL - Generated from
// be/be_visitor_sequence/sequence_cs.cpp:70

#if !defined (_CCS_CONTROLLER_THERMOMETERSEQ_CS_)
#define _CCS_CONTROLLER_THERMOMETERSEQ_CS_

CCS::Controller::ThermometerSeq::ThermometerSeq (void)
{}

CCS::Controller::ThermometerSeq::ThermometerSeq (
    ::CORBA::ULong max)
  : ::TAO::unbounded_object_reference_sequence<
        CCS::Thermometer,
        CCS::Thermometer_var
      > (max)
{}

CCS::Controller::ThermometerSeq::ThermometerSeq (
    ::CORBA::ULong max,
    ::CORBA::ULong length,
    CCS::Thermometer_ptr * buffer,
    ::CORBA::Boolean release
  )
  : ::TAO::unbounded_object_reference_sequence<
        CCS::Thermometer,
        CCS::Thermometer_var
      >
    (max, length, buffer, release)
{}

CCS::Controller::ThermometerSeq::ThermometerSeq (
    const ThermometerSeq &seq)
  : ::TAO::unbounded_object_reference_sequence<
        CCS::Thermometer,
        CCS::Thermometer_var
      > (seq)
{}

CCS::Controller::ThermometerSeq::~ThermometerSeq (void)
{}

#endif /* end #if !defined */

// TAO_IDL - Generated from
// be/be_visitor_sequence/sequence_cs.cpp:70

#if !defined (_CCS_CONTROLLER_THERMOSTATSEQ_CS_)
#define _CCS_CONTROLLER_THERMOSTATSEQ_CS_

CCS::Controller::ThermostatSeq::ThermostatSeq (void)
{}

CCS::Controller::ThermostatSeq::ThermostatSeq (
    ::CORBA::ULong max)
  : ::TAO::unbounded_object_reference_sequence<
        CCS::Thermostat,
        CCS::Thermostat_var
      > (max)
{}

CCS::Controller::ThermostatSeq::ThermostatSeq (
    ::CORBA::ULong max,
    ::CORBA::ULong length,
    CCS::Thermostat_ptr * buffer,
    ::CORBA::Boolean release
  )
  : ::TAO::unbounded_object_reference_sequence<
        CCS::Thermostat,
        CCS::Thermostat_var
      >
    (max, length, buffer, release)
{}

CCS::Controller::ThermostatSeq::ThermostatSeq (
    const ThermostatSeq &seq)
  : ::TAO::unbounded_object_reference_sequence<
        CCS::Thermostat,
        CCS::Thermostat_var
      > (seq)
{}

CCS::Controller::ThermostatSeq::~ThermostatSeq (void)
{}

#endif /* end #if !defined */

// TAO_IDL - Generated from
// be/be_visitor_union/union_cs.cpp:76

CCS::Controller::KeyType::KeyType (void)
{
  ACE_OS::memset (&this->u_, 0, sizeof (this->u_));
  this->disc_ = (CCS::Controller::SearchCriterion) -1;
}

CCS::Controller::KeyType::KeyType (const ::CCS::Controller::KeyType &u)
{
  this->disc_ = u.disc_;
  switch (this->disc_)
  {
    case CCS::Controller::ASSET:
    {
      this->u_.asset_num_ = u.u_.asset_num_;
    }
    break;
    case CCS::Controller::LOCATION:
    {
      this->u_.loc_ = ::CORBA::string_dup (u.u_.loc_);
    }
    break;
    case CCS::Controller::MODEL:
    {
      this->u_.model_desc_ = ::CORBA::string_dup (u.u_.model_desc_);
    }
    break;
    default:
    break;
  }
}

CCS::Controller::KeyType::~KeyType (void)
{
  // Finalize.
  this->_reset ();
}

CCS::Controller::KeyType &
CCS::Controller::KeyType::operator= (const ::CCS::Controller::KeyType &u)
{
  if (&u == this)
    {
      return *this;
    }
  
  this->_reset ();
  this->disc_ = u.disc_;

  switch (this->disc_)
  {
    case CCS::Controller::ASSET:
    {
      this->u_.asset_num_ = u.u_.asset_num_;
    }
    break;
    case CCS::Controller::LOCATION:
    {
      this->u_.loc_ = ::CORBA::string_dup (u.u_.loc_);
    }
    break;
    case CCS::Controller::MODEL:
    {
      this->u_.model_desc_ = ::CORBA::string_dup (u.u_.model_desc_);
    }
    break;
    default:
    break;
  }
  
  return *this;
}

/// Reset method to reset old values of a union.
void CCS::Controller::KeyType::_reset (void)
{
  switch (this->disc_)
  {
    
    case CCS::Controller::ASSET:
      
    break;
    
    case CCS::Controller::LOCATION:
      ::CORBA::string_free (this->u_.loc_);
      this->u_.loc_ = 0;
      
    break;
    
    case CCS::Controller::MODEL:
      ::CORBA::string_free (this->u_.model_desc_);
      this->u_.model_desc_ = 0;
      
    break;
    
    default:
    break;
  }
}

// TAO_IDL - Generated from
// be/be_visitor_sequence/sequence_cs.cpp:70

#if !defined (_CCS_CONTROLLER_SEARCHSEQ_CS_)
#define _CCS_CONTROLLER_SEARCHSEQ_CS_

CCS::Controller::SearchSeq::SearchSeq (void)
{}

CCS::Controller::SearchSeq::SearchSeq (
    ::CORBA::ULong max)
  : ::TAO::unbounded_value_sequence<
        SearchType
      > (max)
{}

CCS::Controller::SearchSeq::SearchSeq (
    ::CORBA::ULong max,
    ::CORBA::ULong length,
    CCS::Controller::SearchType * buffer,
    ::CORBA::Boolean release
  )
  : ::TAO::unbounded_value_sequence<
        SearchType
      >
    (max, length, buffer, release)
{}

CCS::Controller::SearchSeq::SearchSeq (
    const SearchSeq &seq)
  : ::TAO::unbounded_value_sequence<
        SearchType
      > (seq)
{}

CCS::Controller::SearchSeq::~SearchSeq (void)
{}

#endif /* end #if !defined */

// TAO_IDL - Generated from
// be/be_visitor_sequence/sequence_cs.cpp:70

#if !defined (_CCS_CONTROLLER_ERRSEQ_CS_)
#define _CCS_CONTROLLER_ERRSEQ_CS_

CCS::Controller::ErrSeq::ErrSeq (void)
{}

CCS::Controller::ErrSeq::ErrSeq (
    ::CORBA::ULong max)
  : ::TAO::unbounded_value_sequence<
        ErrorDetails
      > (max)
{}

CCS::Controller::ErrSeq::ErrSeq (
    ::CORBA::ULong max,
    ::CORBA::ULong length,
    CCS::Controller::ErrorDetails * buffer,
    ::CORBA::Boolean release
  )
  : ::TAO::unbounded_value_sequence<
        ErrorDetails
      >
    (max, length, buffer, release)
{}

CCS::Controller::ErrSeq::ErrSeq (
    const ErrSeq &seq)
  : ::TAO::unbounded_value_sequence<
        ErrorDetails
      > (seq)
{}

CCS::Controller::ErrSeq::~ErrSeq (void)
{}

#endif /* end #if !defined */

// TAO_IDL - Generated from
// be/be_visitor_exception/exception_ctor.cpp:51

CCS::Controller::EChange::EChange (
    const CCS::Controller::ErrSeq & _tao_errors)
  : ::CORBA::UserException (
        "IDL:acme.com/CCS/Controller/EChange:1.0",
        "EChange"
      )
{
  this->errors = _tao_errors;
}



// TAO_IDL - Generated from
// be/be_visitor_exception/exception_cs.cpp:98

CCS::Controller::EChange::EChange (void)
  : ::CORBA::UserException (
        "IDL:acme.com/CCS/Controller/EChange:1.0",
        "EChange"
      )
{
}

CCS::Controller::EChange::~EChange (void)
{
}

CCS::Controller::EChange::EChange (const ::CCS::Controller::EChange &_tao_excp)
  : ::CORBA::UserException (
        _tao_excp._rep_id (),
        _tao_excp._name ()
      )
{
  this->errors = _tao_excp.errors;
}

CCS::Controller::EChange&
CCS::Controller::EChange::operator= (const ::CCS::Controller::EChange &_tao_excp)
{
  this->::CORBA::UserException::operator= (_tao_excp);
  this->errors = _tao_excp.errors;
  return *this;
}

CCS::Controller::EChange *
CCS::Controller::EChange::_downcast ( ::CORBA::Exception *_tao_excp)
{
  return dynamic_cast<EChange *> (_tao_excp);
}

const CCS::Controller::EChange *
CCS::Controller::EChange::_downcast ( ::CORBA::Exception const *_tao_excp)
{
  return dynamic_cast<const EChange *> (_tao_excp);
}

::CORBA::Exception *CCS::Controller::EChange::_alloc (void)
{
  ::CORBA::Exception *retval = 0;
  ACE_NEW_RETURN (retval, ::CCS::Controller::EChange, 0);
  return retval;
}

::CORBA::Exception *
CCS::Controller::EChange::_tao_duplicate (void) const
{
  ::CORBA::Exception *result = 0;
  ACE_NEW_RETURN (
      result,
      ::CCS::Controller::EChange (*this),
      0
    );
  return result;
}

void CCS::Controller::EChange::_raise (void) const
{
  throw *this;
}

void CCS::Controller::EChange::_tao_encode (TAO_OutputCDR &cdr) const
{
  if (!(cdr << *this))
    {
      throw ::CORBA::MARSHAL ();
    }
}

void CCS::Controller::EChange::_tao_decode (TAO_InputCDR &cdr)
{
  if (!(cdr >> *this))
    {
      throw ::CORBA::MARSHAL ();
    }
}



// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:88

::CCS::Controller::ThermometerSeq *
CCS::Controller::list (
  void)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  TAO::Arg_Traits< ::CCS::Controller::ThermometerSeq>::ret_val _tao_retval;

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      1,
      "list",
      4,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY,
      TAO::TAO_TWOWAY_INVOCATION
      ,
      TAO::TAO_SYNCHRONOUS_INVOCATION,
      false
    );

  _tao_call.invoke (0, 0);

  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:88

void
CCS::Controller::find (
  ::CCS::Controller::SearchSeq & slist)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  TAO::Arg_Traits< void>::ret_val _tao_retval;
  TAO::Arg_Traits< ::CCS::Controller::SearchSeq>::inout_arg_val _tao_slist (slist);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_slist
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      2,
      "find",
      4,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY
      
    );

  _tao_call.invoke (0, 0);
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:88

void
CCS::Controller::change (
  const ::CCS::Controller::ThermostatSeq & tlist,
  ::CORBA::Short delta)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  TAO::Arg_Traits< void>::ret_val _tao_retval;
  TAO::Arg_Traits< ::CCS::Controller::ThermostatSeq>::in_arg_val _tao_tlist (tlist);
  TAO::Arg_Traits< ::CORBA::Short>::in_arg_val _tao_delta (delta);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_tlist,
      &_tao_delta
    };

  static TAO::Exception_Data
  _tao_CCS_Controller_change_exceptiondata [] = 
    {
      {
        "IDL:acme.com/CCS/Controller/EChange:1.0",
        CCS::Controller::EChange::_alloc
#if TAO_HAS_INTERCEPTORS == 1
        , 0
#endif /* TAO_HAS_INTERCEPTORS */
      }
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      3,
      "change",
      6,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY
      
    );

  _tao_call.invoke (
      _tao_CCS_Controller_change_exceptiondata,
      1
    );
}

CCS::Controller::Controller (void)
{
}

CCS::Controller::~Controller (void)
{
}

CCS::Controller_ptr
CCS::Controller::_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return
    TAO::Narrow_Utils<Controller>::narrow (
        _tao_objref,
        "IDL:acme.com/CCS/Controller:1.0");
}

CCS::Controller_ptr
CCS::Controller::_unchecked_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return
    TAO::Narrow_Utils<Controller>::unchecked_narrow (
        _tao_objref);
}

CCS::Controller_ptr
CCS::Controller::_nil (void)
{
  return 0;
}

CCS::Controller_ptr
CCS::Controller::_duplicate (Controller_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  return obj;
}

void
CCS::Controller::_tao_release (Controller_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
CCS::Controller::_is_a (const char *value)
{
  if (
      ACE_OS::strcmp (
          value,
          "IDL:acme.com/CCS/Controller:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        ) == 0
    )
    {
      return true; // success using local knowledge
    }
  else
    {
      return this->::CORBA::Object::_is_a (value);
    }
}

const char* CCS::Controller::_interface_repository_id (void) const
{
  return "IDL:acme.com/CCS/Controller:1.0";
}

::CORBA::Boolean
CCS::Controller::marshal (TAO_OutputCDR &cdr)
{
  return (cdr << this);
}

// TAO_IDL - Generated from
// be/be_visitor_interface/cdr_op_cs.cpp:51

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const CCS::Thermometer_ptr _tao_objref)
{
  ::CORBA::Object_ptr _tao_corba_obj = _tao_objref;
  return (strm << _tao_corba_obj);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    CCS::Thermometer_ptr &_tao_objref)
{
  ::CORBA::Object_var obj;

  if (!(strm >> obj.inout ()))
    {
      return false;
    }
  
  typedef ::CCS::Thermometer RHS_SCOPED_NAME;

  // Narrow to the right type.
  _tao_objref =
    TAO::Narrow_Utils<RHS_SCOPED_NAME>::unchecked_narrow (obj.in ());
    
  return true;
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_structure/cdr_op_cs.cpp:49

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const CCS::Thermostat::BtData &_tao_aggregate)
{
  return
    (strm << _tao_aggregate.requested) &&
    (strm << _tao_aggregate.min_permitted) &&
    (strm << _tao_aggregate.max_permitted) &&
    (strm << _tao_aggregate.error_msg.in ());
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    CCS::Thermostat::BtData &_tao_aggregate)
{
  return
    (strm >> _tao_aggregate.requested) &&
    (strm >> _tao_aggregate.min_permitted) &&
    (strm >> _tao_aggregate.max_permitted) &&
    (strm >> _tao_aggregate.error_msg.out ());
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_exception/cdr_op_cs.cpp:48
TAO_BEGIN_VERSIONED_NAMESPACE_DECL



::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const CCS::Thermostat::BadTemp &_tao_aggregate
  )
{
  // First marshal the repository ID.
  if (strm << _tao_aggregate._rep_id ())
    {
      // Now marshal the members (if any).
      return (
        (strm << _tao_aggregate.details)
       );
    }
  else
    {
      return false;
    }
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    CCS::Thermostat::BadTemp &_tao_aggregate
  )
{
  // Demarshal the members.
  return (
    (strm >> _tao_aggregate.details)
  );
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_interface/cdr_op_cs.cpp:51

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const CCS::Thermostat_ptr _tao_objref)
{
  ::CORBA::Object_ptr _tao_corba_obj = _tao_objref;
  return (strm << _tao_corba_obj);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    CCS::Thermostat_ptr &_tao_objref)
{
  ::CORBA::Object_var obj;

  if (!(strm >> obj.inout ()))
    {
      return false;
    }
  
  typedef ::CCS::Thermostat RHS_SCOPED_NAME;

  // Narrow to the right type.
  _tao_objref =
    TAO::Narrow_Utils<RHS_SCOPED_NAME>::unchecked_narrow (obj.in ());
    
  return true;
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_sequence/cdr_op_cs.cpp:93
#if !defined _TAO_CDR_OP_CCS_Controller_ThermometerSeq_CPP_
#define _TAO_CDR_OP_CCS_Controller_ThermometerSeq_CPP_

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const CCS::Controller::ThermometerSeq &_tao_sequence)
{
  return TAO::marshal_sequence(strm, _tao_sequence);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    CCS::Controller::ThermometerSeq &_tao_sequence)
{
  return TAO::demarshal_sequence(strm, _tao_sequence);
}


TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_CDR_OP_CCS_Controller_ThermometerSeq_CPP_ */

// TAO_IDL - Generated from
// be/be_visitor_sequence/cdr_op_cs.cpp:93
#if !defined _TAO_CDR_OP_CCS_Controller_ThermostatSeq_CPP_
#define _TAO_CDR_OP_CCS_Controller_ThermostatSeq_CPP_

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const CCS::Controller::ThermostatSeq &_tao_sequence)
{
  return TAO::marshal_sequence(strm, _tao_sequence);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    CCS::Controller::ThermostatSeq &_tao_sequence)
{
  return TAO::demarshal_sequence(strm, _tao_sequence);
}


TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_CDR_OP_CCS_Controller_ThermostatSeq_CPP_ */

// TAO_IDL - Generated from
// be/be_visitor_enum/cdr_op_cs.cpp:34


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (TAO_OutputCDR &strm, CCS::Controller::SearchCriterion _tao_enumerator)
{
  return strm << static_cast< ::CORBA::ULong> (_tao_enumerator);
}

::CORBA::Boolean operator>> (TAO_InputCDR &strm, CCS::Controller::SearchCriterion & _tao_enumerator)
{
  ::CORBA::ULong _tao_temp = 0;
  ::CORBA::Boolean const _tao_success = strm >> _tao_temp;
  
  if (_tao_success)
    {
      _tao_enumerator = static_cast<CCS::Controller::SearchCriterion> (_tao_temp);
    }
  
  return _tao_success;
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_union/cdr_op_cs.cpp:74


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const CCS::Controller::KeyType &_tao_union
  )
{
  if ( !(strm << _tao_union._d ()) )
    {
      return false;
    }
  
  ::CORBA::Boolean result = true;

  switch (_tao_union._d ())
  {
    case CCS::Controller::ASSET:
      {
        result = strm << _tao_union.asset_num ();
      }
      break;
    case CCS::Controller::LOCATION:
      {
        result = strm << _tao_union.loc ();
      }
      break;
    case CCS::Controller::MODEL:
      {
        result = strm << _tao_union.model_desc ();
      }
      break;
    default:
      break;
  }

  return result;
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    CCS::Controller::KeyType &_tao_union
  )
{
  CCS::Controller::SearchCriterion _tao_discriminant;
  if ( !(strm >> _tao_discriminant) )
    {
      return false;
    }
  
  ::CORBA::Boolean result = true;

  switch (_tao_discriminant)
  {
    case CCS::Controller::ASSET:
      {
        CORBA::ULong _tao_union_tmp;
        result = strm >> _tao_union_tmp;

        if (result)
          {
            _tao_union.asset_num (_tao_union_tmp);
            _tao_union._d (_tao_discriminant);
          }
      }
      break;
    case CCS::Controller::LOCATION:
      {
        ::CORBA::String_var _tao_union_tmp;
        result = strm >> _tao_union_tmp.out ();

        if (result)
          {
            _tao_union.loc (_tao_union_tmp);
            _tao_union._d (_tao_discriminant);
          }
      }
      break;
    case CCS::Controller::MODEL:
      {
        ::CORBA::String_var _tao_union_tmp;
        result = strm >> _tao_union_tmp.out ();

        if (result)
          {
            _tao_union.model_desc (_tao_union_tmp);
            _tao_union._d (_tao_discriminant);
          }
      }
      break;
    default:
      _tao_union._default ();
      // For maximum interop compatibility, force the same value as transmitted
      _tao_union._d (_tao_discriminant);
      break;
  }

  return result;
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_structure/cdr_op_cs.cpp:49

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const CCS::Controller::SearchType &_tao_aggregate)
{
  return
    (strm << _tao_aggregate.key) &&
    ::CORBA::Object::marshal (
        _tao_aggregate.device.in (),
        strm
      );
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    CCS::Controller::SearchType &_tao_aggregate)
{
  return
    (strm >> _tao_aggregate.key) &&
    (strm >> _tao_aggregate.device.out ());
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_sequence/cdr_op_cs.cpp:93
#if !defined _TAO_CDR_OP_CCS_Controller_SearchSeq_CPP_
#define _TAO_CDR_OP_CCS_Controller_SearchSeq_CPP_

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const CCS::Controller::SearchSeq &_tao_sequence)
{
  return TAO::marshal_sequence(strm, _tao_sequence);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    CCS::Controller::SearchSeq &_tao_sequence)
{
  return TAO::demarshal_sequence(strm, _tao_sequence);
}


TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_CDR_OP_CCS_Controller_SearchSeq_CPP_ */

// TAO_IDL - Generated from
// be/be_visitor_structure/cdr_op_cs.cpp:49

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const CCS::Controller::ErrorDetails &_tao_aggregate)
{
  return
    ::CORBA::Object::marshal (
        _tao_aggregate.tmstat_ref.in (),
        strm
      ) &&
    (strm << _tao_aggregate.info);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    CCS::Controller::ErrorDetails &_tao_aggregate)
{
  return
    (strm >> _tao_aggregate.tmstat_ref.out ()) &&
    (strm >> _tao_aggregate.info);
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_sequence/cdr_op_cs.cpp:93
#if !defined _TAO_CDR_OP_CCS_Controller_ErrSeq_CPP_
#define _TAO_CDR_OP_CCS_Controller_ErrSeq_CPP_

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const CCS::Controller::ErrSeq &_tao_sequence)
{
  return TAO::marshal_sequence(strm, _tao_sequence);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    CCS::Controller::ErrSeq &_tao_sequence)
{
  return TAO::demarshal_sequence(strm, _tao_sequence);
}


TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_CDR_OP_CCS_Controller_ErrSeq_CPP_ */

// TAO_IDL - Generated from
// be/be_visitor_exception/cdr_op_cs.cpp:48
TAO_BEGIN_VERSIONED_NAMESPACE_DECL



::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const CCS::Controller::EChange &_tao_aggregate
  )
{
  // First marshal the repository ID.
  if (strm << _tao_aggregate._rep_id ())
    {
      // Now marshal the members (if any).
      return (
        (strm << _tao_aggregate.errors)
       );
    }
  else
    {
      return false;
    }
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    CCS::Controller::EChange &_tao_aggregate
  )
{
  // Demarshal the members.
  return (
    (strm >> _tao_aggregate.errors)
  );
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_interface/cdr_op_cs.cpp:51

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const CCS::Controller_ptr _tao_objref)
{
  ::CORBA::Object_ptr _tao_corba_obj = _tao_objref;
  return (strm << _tao_corba_obj);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    CCS::Controller_ptr &_tao_objref)
{
  ::CORBA::Object_var obj;

  if (!(strm >> obj.inout ()))
    {
      return false;
    }
  
  typedef ::CCS::Controller RHS_SCOPED_NAME;

  // Narrow to the right type.
  _tao_objref =
    TAO::Narrow_Utils<RHS_SCOPED_NAME>::unchecked_narrow (obj.in ());
    
  return true;
}

TAO_END_VERSIONED_NAMESPACE_DECL



