// -*- C++ -*-
/**
 * Code generated by the The ACE ORB (TAO) IDL Compiler v2.4.1
 * TAO and the TAO IDL Compiler have been developed by:
 *       Center for Distributed Object Computing
 *       Washington University
 *       St. Louis, MO
 *       USA
 *       http://www.cs.wustl.edu/~schmidt/doc-center.html
 * and
 *       Distributed Object Computing Laboratory
 *       University of California at Irvine
 *       Irvine, CA
 *       USA
 * and
 *       Institute for Software Integrated Systems
 *       Vanderbilt University
 *       Nashville, TN
 *       USA
 *       http://www.isis.vanderbilt.edu/
 *
 * Information about TAO is available at:
 *     http://www.dre.vanderbilt.edu/~schmidt/TAO.html
 **/

// TAO_IDL - Generated from
// be/be_codegen.cpp:149

#ifndef _TAO_IDL_BANKC_BPZ8CR_H_
#define _TAO_IDL_BANKC_BPZ8CR_H_

#include /**/ "ace/pre.h"


#include /**/ "ace/config-all.h"

#if !defined (ACE_LACKS_PRAGMA_ONCE)
# pragma once
#endif /* ACE_LACKS_PRAGMA_ONCE */


#include "tao/AnyTypeCode/AnyTypeCode_methods.h"
#include "tao/AnyTypeCode/Any.h"
#include "tao/ORB.h"
#include "tao/SystemException.h"
#include "tao/UserException.h"
#include "tao/Basic_Types.h"
#include "tao/ORB_Constants.h"
#include "tao/Object.h"
#include "tao/String_Manager_T.h"
#include "tao/Objref_VarOut_T.h"
#include "tao/VarOut_T.h"
#include "tao/Arg_Traits_T.h"
#include "tao/Basic_Arguments.h"
#include "tao/Special_Basic_Arguments.h"
#include "tao/Any_Insert_Policy_T.h"
#include "tao/Fixed_Size_Argument_T.h"
#include "tao/Var_Size_Argument_T.h"
#include "tao/Object_Argument_T.h"
#include "tao/UB_String_Arguments.h"
#include /**/ "tao/Version.h"
#include /**/ "tao/Versioned_Namespace.h"

#if TAO_MAJOR_VERSION != 2 || TAO_MINOR_VERSION != 4 || TAO_MICRO_VERSION != 1
#error This file should be regenerated with TAO_IDL
#endif

#if defined (TAO_EXPORT_MACRO)
#undef TAO_EXPORT_MACRO
#endif
#define TAO_EXPORT_MACRO 

// TAO_IDL - Generated from
// be/be_visitor_root/root_ch.cpp:157
TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<typename T> class Narrow_Utils;
}
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_module/module_ch.cpp:35

namespace Bank
{

  // TAO_IDL - Generated from
  // be/be_interface.cpp:748

#if !defined (_BANK_ACCOUNT__VAR_OUT_CH_)
#define _BANK_ACCOUNT__VAR_OUT_CH_

  class Account;
  typedef Account *Account_ptr;

  typedef
    TAO_Objref_Var_T<
        Account
      >
    Account_var;
  
  typedef
    TAO_Objref_Out_T<
        Account
      >
    Account_out;

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // be/be_visitor_interface/interface_ch.cpp:40

  class  Account
    : public virtual ::CORBA::Object
  {
  public:
    friend class TAO::Narrow_Utils<Account>;

    // TAO_IDL - Generated from
    // be/be_type.cpp:304

    typedef Account_ptr _ptr_type;
    typedef Account_var _var_type;
    typedef Account_out _out_type;

    static void _tao_any_destructor (void *);

    // The static operations.
    static Account_ptr _duplicate (Account_ptr obj);

    static void _tao_release (Account_ptr obj);

    static Account_ptr _narrow (::CORBA::Object_ptr obj);
    static Account_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
    static Account_ptr _nil (void);

    // TAO_IDL - Generated from
    // be/be_visitor_exception/exception_ch.cpp:41

    class  Overdraft : public ::CORBA::UserException
    {
    public:
      ::TAO::String_Manager reason;

      Overdraft (void);
      Overdraft (const Overdraft &);
      ~Overdraft (void);

      Overdraft &operator= (const Overdraft &);

      static void _tao_any_destructor (void *);

      static Overdraft *_downcast ( ::CORBA::Exception *);
      static const Overdraft *_downcast ( ::CORBA::Exception const *);

      static ::CORBA::Exception *_alloc (void);

      virtual ::CORBA::Exception *_tao_duplicate (void) const;

      virtual void _raise (void) const;

      virtual void _tao_encode (TAO_OutputCDR &cdr) const;
      virtual void _tao_decode (TAO_InputCDR &cdr);

      // TAO_IDL - Generated from
      // be/be_visitor_exception/exception_ctor.cpp:51

      Overdraft (
          const char * _tao_reason);

      virtual ::CORBA::TypeCode_ptr _tao_type (void) const;
    };

    // TAO_IDL - Generated from
    // be/be_visitor_typecode/typecode_decl.cpp:34

    static ::CORBA::TypeCode_ptr const _tc_Overdraft;

    virtual ::CORBA::Float balance (
      void);

    virtual void deposit (
      ::CORBA::Float amount);

    virtual void withdraw (
      ::CORBA::Float amount);

    virtual char * name (
      void);

    virtual void name (
      const char * name);

    // TAO_IDL - Generated from
    // be/be_visitor_interface/interface_ch.cpp:137

    virtual ::CORBA::Boolean _is_a (const char *type_id);
    virtual const char* _interface_repository_id (void) const;
    virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);
  
  protected:
    // Concrete interface only.
    Account (void);

    // Concrete non-local interface only.
    Account (
        ::IOP::IOR *ior,
        TAO_ORB_Core *orb_core);
    
    // Non-local interface only.
    Account (
        TAO_Stub *objref,
        ::CORBA::Boolean _tao_collocated = false,
        TAO_Abstract_ServantBase *servant = 0,
        TAO_ORB_Core *orb_core = 0);

    virtual ~Account (void);
  
  private:
    // Private and unimplemented for concrete interfaces.
    Account (const Account &);

    void operator= (const Account &);
  };

  // TAO_IDL - Generated from
  // be/be_visitor_typecode/typecode_decl.cpp:34

  extern  ::CORBA::TypeCode_ptr const _tc_Account;

  // TAO_IDL - Generated from
  // be/be_interface.cpp:748

#if !defined (_BANK_ACCOUNTMANAGER__VAR_OUT_CH_)
#define _BANK_ACCOUNTMANAGER__VAR_OUT_CH_

  class AccountManager;
  typedef AccountManager *AccountManager_ptr;

  typedef
    TAO_Objref_Var_T<
        AccountManager
      >
    AccountManager_var;
  
  typedef
    TAO_Objref_Out_T<
        AccountManager
      >
    AccountManager_out;

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // be/be_visitor_interface/interface_ch.cpp:40

  class  AccountManager
    : public virtual ::CORBA::Object
  {
  public:
    friend class TAO::Narrow_Utils<AccountManager>;

    // TAO_IDL - Generated from
    // be/be_type.cpp:304

    typedef AccountManager_ptr _ptr_type;
    typedef AccountManager_var _var_type;
    typedef AccountManager_out _out_type;

    static void _tao_any_destructor (void *);

    // The static operations.
    static AccountManager_ptr _duplicate (AccountManager_ptr obj);

    static void _tao_release (AccountManager_ptr obj);

    static AccountManager_ptr _narrow (::CORBA::Object_ptr obj);
    static AccountManager_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
    static AccountManager_ptr _nil (void);

    virtual ::Bank::Account_ptr open (
      const char * name,
      ::CORBA::Float initial_balance);

    virtual void close (
      ::Bank::Account_ptr account_);

    virtual void shutdown (
      void);

    // TAO_IDL - Generated from
    // be/be_visitor_interface/interface_ch.cpp:137

    virtual ::CORBA::Boolean _is_a (const char *type_id);
    virtual const char* _interface_repository_id (void) const;
    virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);
  
  protected:
    // Concrete interface only.
    AccountManager (void);

    // Concrete non-local interface only.
    AccountManager (
        ::IOP::IOR *ior,
        TAO_ORB_Core *orb_core);
    
    // Non-local interface only.
    AccountManager (
        TAO_Stub *objref,
        ::CORBA::Boolean _tao_collocated = false,
        TAO_Abstract_ServantBase *servant = 0,
        TAO_ORB_Core *orb_core = 0);

    virtual ~AccountManager (void);
  
  private:
    // Private and unimplemented for concrete interfaces.
    AccountManager (const AccountManager &);

    void operator= (const AccountManager &);
  };

  // TAO_IDL - Generated from
  // be/be_visitor_typecode/typecode_decl.cpp:34

  extern  ::CORBA::TypeCode_ptr const _tc_AccountManager;

// TAO_IDL - Generated from
// be/be_visitor_module/module_ch.cpp:64

} // module Bank

// TAO_IDL - Generated from
// be/be_visitor_arg_traits.cpp:66

TAO_BEGIN_VERSIONED_NAMESPACE_DECL


// Arg traits specializations.
namespace TAO
{

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:145

#if !defined (_BANK_ACCOUNT__ARG_TRAITS_)
#define _BANK_ACCOUNT__ARG_TRAITS_

  template<>
  class  Arg_Traits< ::Bank::Account>
    : public
        Object_Arg_Traits_T<
            ::Bank::Account_ptr,
            ::Bank::Account_var,
            ::Bank::Account_out,
            TAO::Objref_Traits<Bank::Account>,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:145

#if !defined (_BANK_ACCOUNTMANAGER__ARG_TRAITS_)
#define _BANK_ACCOUNTMANAGER__ARG_TRAITS_

  template<>
  class  Arg_Traits< ::Bank::AccountManager>
    : public
        Object_Arg_Traits_T<
            ::Bank::AccountManager_ptr,
            ::Bank::AccountManager_var,
            ::Bank::AccountManager_out,
            TAO::Objref_Traits<Bank::AccountManager>,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

#endif /* end #if !defined */
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_traits.cpp:60

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Traits specializations.
namespace TAO
{

#if !defined (_BANK_ACCOUNT__TRAITS_)
#define _BANK_ACCOUNT__TRAITS_

  template<>
  struct  Objref_Traits< ::Bank::Account>
  {
    static ::Bank::Account_ptr duplicate (
        ::Bank::Account_ptr p);
    static void release (
        ::Bank::Account_ptr p);
    static ::Bank::Account_ptr nil (void);
    static ::CORBA::Boolean marshal (
        const ::Bank::Account_ptr p,
        TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_BANK_ACCOUNTMANAGER__TRAITS_)
#define _BANK_ACCOUNTMANAGER__TRAITS_

  template<>
  struct  Objref_Traits< ::Bank::AccountManager>
  {
    static ::Bank::AccountManager_ptr duplicate (
        ::Bank::AccountManager_ptr p);
    static void release (
        ::Bank::AccountManager_ptr p);
    static ::Bank::AccountManager_ptr nil (void);
    static ::CORBA::Boolean marshal (
        const ::Bank::AccountManager_ptr p,
        TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */
}
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_interface/any_op_ch.cpp:41



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace Bank
{
   void operator<<= ( ::CORBA::Any &, Account_ptr); // copying
   void operator<<= ( ::CORBA::Any &, Account_ptr *); // non-copying
   ::CORBA::Boolean operator>>= (const ::CORBA::Any &, Account_ptr &);
}

#else


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 void operator<<= (::CORBA::Any &, Bank::Account_ptr); // copying
 void operator<<= (::CORBA::Any &, Bank::Account_ptr *); // non-copying
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, Bank::Account_ptr &);
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_exception/any_op_ch.cpp:38

#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace Bank
{
  

   void operator<<= (::CORBA::Any &, const ::Bank::Account::Overdraft &); // copying version
   void operator<<= (::CORBA::Any &, ::Bank::Account::Overdraft*); // noncopying version
   ::CORBA::Boolean operator>>= (const ::CORBA::Any &, ::Bank::Account::Overdraft *&); // deprecated
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const ::Bank::Account::Overdraft *&);
}

#else


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



 void operator<<= (::CORBA::Any &, const Bank::Account::Overdraft &); // copying version
 void operator<<= (::CORBA::Any &, Bank::Account::Overdraft*); // noncopying version
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, Bank::Account::Overdraft *&); // deprecated
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const Bank::Account::Overdraft *&);
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_interface/any_op_ch.cpp:41



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace Bank
{
   void operator<<= ( ::CORBA::Any &, AccountManager_ptr); // copying
   void operator<<= ( ::CORBA::Any &, AccountManager_ptr *); // non-copying
   ::CORBA::Boolean operator>>= (const ::CORBA::Any &, AccountManager_ptr &);
}

#else


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 void operator<<= (::CORBA::Any &, Bank::AccountManager_ptr); // copying
 void operator<<= (::CORBA::Any &, Bank::AccountManager_ptr *); // non-copying
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, Bank::AccountManager_ptr &);
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_interface/cdr_op_ch.cpp:41

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 ::CORBA::Boolean operator<< (TAO_OutputCDR &, const Bank::Account_ptr );
 ::CORBA::Boolean operator>> (TAO_InputCDR &, Bank::Account_ptr &);

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_exception/cdr_op_ch.cpp:37
TAO_BEGIN_VERSIONED_NAMESPACE_DECL



 ::CORBA::Boolean operator<< (TAO_OutputCDR &, const Bank::Account::Overdraft &);
 ::CORBA::Boolean operator>> (TAO_InputCDR &, Bank::Account::Overdraft &);

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_interface/cdr_op_ch.cpp:41

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 ::CORBA::Boolean operator<< (TAO_OutputCDR &, const Bank::AccountManager_ptr );
 ::CORBA::Boolean operator>> (TAO_InputCDR &, Bank::AccountManager_ptr &);

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_codegen.cpp:1700
#if defined (__ACE_INLINE__)
#include "BankC.inl"
#endif /* defined INLINE */

#include /**/ "ace/post.h"

#endif /* ifndef */

