// -*- C++ -*-
/**
 * Code generated by the The ACE ORB (TAO) IDL Compiler v2.4.1
 * TAO and the TAO IDL Compiler have been developed by:
 *       Center for Distributed Object Computing
 *       Washington University
 *       St. Louis, MO
 *       USA
 *       http://www.cs.wustl.edu/~schmidt/doc-center.html
 * and
 *       Distributed Object Computing Laboratory
 *       University of California at Irvine
 *       Irvine, CA
 *       USA
 * and
 *       Institute for Software Integrated Systems
 *       Vanderbilt University
 *       Nashville, TN
 *       USA
 *       http://www.isis.vanderbilt.edu/
 *
 * Information about TAO is available at:
 *     http://www.dre.vanderbilt.edu/~schmidt/TAO.html
 **/

// TAO_IDL - Generated from
// be/be_codegen.cpp:373


#include "BankC.h"
#include "tao/AnyTypeCode/Null_RefCount_Policy.h"
#include "tao/AnyTypeCode/TypeCode_Constants.h"
#include "tao/AnyTypeCode/Alias_TypeCode_Static.h"
#include "tao/AnyTypeCode/Objref_TypeCode_Static.h"
#include "tao/AnyTypeCode/String_TypeCode_Static.h"
#include "tao/AnyTypeCode/Struct_TypeCode_Static.h"
#include "tao/AnyTypeCode/TypeCode_Struct_Field.h"
#include "tao/CDR.h"
#include "tao/Exception_Data.h"
#include "tao/Invocation_Adapter.h"
#include "tao/Object_T.h"
#include "tao/SystemException.h"
#include "tao/CDR.h"
#include "tao/AnyTypeCode/Any.h"
#include "tao/AnyTypeCode/Any_Impl_T.h"
#include "tao/AnyTypeCode/Any_Dual_Impl_T.h"
#include "ace/OS_NS_string.h"

#if !defined (__ACE_INLINE__)
#include "BankC.inl"
#endif /* !defined INLINE */

// TAO_IDL - Generated from
// be/be_visitor_interface/interface_cs.cpp:48

// Traits specializations for Bank::Account.

Bank::Account_ptr
TAO::Objref_Traits<Bank::Account>::duplicate (
    Bank::Account_ptr p)
{
  return Bank::Account::_duplicate (p);
}

void
TAO::Objref_Traits<Bank::Account>::release (
    Bank::Account_ptr p)
{
  ::CORBA::release (p);
}

Bank::Account_ptr
TAO::Objref_Traits<Bank::Account>::nil (void)
{
  return Bank::Account::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<Bank::Account>::marshal (
    const Bank::Account_ptr p,
    TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

// TAO_IDL - Generated from
// be/be_visitor_exception/exception_ctor.cpp:51

Bank::Account::Overdraft::Overdraft (
    const char * _tao_reason)
  : ::CORBA::UserException (
        "IDL:Bank/Account/Overdraft:1.0",
        "Overdraft"
      )
{
  this->reason = ::CORBA::string_dup (_tao_reason);
}



// TAO_IDL - Generated from
// be/be_visitor_exception/exception_cs.cpp:98

Bank::Account::Overdraft::Overdraft (void)
  : ::CORBA::UserException (
        "IDL:Bank/Account/Overdraft:1.0",
        "Overdraft"
      )
{
}

Bank::Account::Overdraft::~Overdraft (void)
{
}

Bank::Account::Overdraft::Overdraft (const ::Bank::Account::Overdraft &_tao_excp)
  : ::CORBA::UserException (
        _tao_excp._rep_id (),
        _tao_excp._name ()
      )
{
  this->reason = ::CORBA::string_dup (_tao_excp.reason.in ());
}

Bank::Account::Overdraft&
Bank::Account::Overdraft::operator= (const ::Bank::Account::Overdraft &_tao_excp)
{
  this->::CORBA::UserException::operator= (_tao_excp);
  this->reason = ::CORBA::string_dup (_tao_excp.reason.in ());
  return *this;
}

void Bank::Account::Overdraft::_tao_any_destructor (void *_tao_void_pointer)
{
  Overdraft *_tao_tmp_pointer =
    static_cast<Overdraft *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

Bank::Account::Overdraft *
Bank::Account::Overdraft::_downcast ( ::CORBA::Exception *_tao_excp)
{
  return dynamic_cast<Overdraft *> (_tao_excp);
}

const Bank::Account::Overdraft *
Bank::Account::Overdraft::_downcast ( ::CORBA::Exception const *_tao_excp)
{
  return dynamic_cast<const Overdraft *> (_tao_excp);
}

::CORBA::Exception *Bank::Account::Overdraft::_alloc (void)
{
  ::CORBA::Exception *retval = 0;
  ACE_NEW_RETURN (retval, ::Bank::Account::Overdraft, 0);
  return retval;
}

::CORBA::Exception *
Bank::Account::Overdraft::_tao_duplicate (void) const
{
  ::CORBA::Exception *result = 0;
  ACE_NEW_RETURN (
      result,
      ::Bank::Account::Overdraft (*this),
      0
    );
  return result;
}

void Bank::Account::Overdraft::_raise (void) const
{
  throw *this;
}

void Bank::Account::Overdraft::_tao_encode (TAO_OutputCDR &cdr) const
{
  if (!(cdr << *this))
    {
      throw ::CORBA::MARSHAL ();
    }
}

void Bank::Account::Overdraft::_tao_decode (TAO_InputCDR &cdr)
{
  if (!(cdr >> *this))
    {
      throw ::CORBA::MARSHAL ();
    }
}

// TAO extension - the virtual _type method.
::CORBA::TypeCode_ptr Bank::Account::Overdraft::_tao_type (void) const
{
  return ::Bank::Account::_tc_Overdraft;
}

// TAO_IDL - Generated from
// be/be_visitor_typecode/struct_typecode.cpp:86

static TAO::TypeCode::Struct_Field<
  char const *,
  ::CORBA::TypeCode_ptr const *> const 
    _tao_fields_Bank_Account_Overdraft[] =
      {
        { "reason", &CORBA::_tc_string }
      };
  
static TAO::TypeCode::Struct<
  char const *,
  ::CORBA::TypeCode_ptr const *,
  TAO::TypeCode::Struct_Field<
    char const *,
    ::CORBA::TypeCode_ptr const *> const *,
  TAO::Null_RefCount_Policy>
_tao_tc_Bank_Account_Overdraft (
  ::CORBA::tk_except,
  "IDL:Bank/Account/Overdraft:1.0",
  "Overdraft",
  _tao_fields_Bank_Account_Overdraft,
  1);

::CORBA::TypeCode_ptr const Bank::Account::_tc_Overdraft =
  &_tao_tc_Bank_Account_Overdraft;

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:88

::CORBA::Float
Bank::Account::balance (
  void)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  TAO::Arg_Traits< ::CORBA::Float>::ret_val _tao_retval;

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      1,
      "_get_balance",
      12,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY,
      TAO::TAO_TWOWAY_INVOCATION
      ,
      TAO::TAO_SYNCHRONOUS_INVOCATION,
      false
    );

  _tao_call.invoke (0, 0);

  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:88

void
Bank::Account::deposit (
  ::CORBA::Float amount)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  TAO::Arg_Traits< void>::ret_val _tao_retval;
  TAO::Arg_Traits< ::CORBA::Float>::in_arg_val _tao_amount (amount);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_amount
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      2,
      "deposit",
      7,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY
      
    );

  _tao_call.invoke (0, 0);
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:88

void
Bank::Account::withdraw (
  ::CORBA::Float amount)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  TAO::Arg_Traits< void>::ret_val _tao_retval;
  TAO::Arg_Traits< ::CORBA::Float>::in_arg_val _tao_amount (amount);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_amount
    };

  static TAO::Exception_Data
  _tao_Bank_Account_withdraw_exceptiondata [] = 
    {
      {
        "IDL:Bank/Account/Overdraft:1.0",
        Bank::Account::Overdraft::_alloc
#if TAO_HAS_INTERCEPTORS == 1
        , Bank::Account::_tc_Overdraft
#endif /* TAO_HAS_INTERCEPTORS */
      }
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      2,
      "withdraw",
      8,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY
      
    );

  _tao_call.invoke (
      _tao_Bank_Account_withdraw_exceptiondata,
      1
    );
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:88

char *
Bank::Account::name (
  void)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  TAO::Arg_Traits< char *>::ret_val _tao_retval;

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      1,
      "_get_name",
      9,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY,
      TAO::TAO_TWOWAY_INVOCATION
      ,
      TAO::TAO_SYNCHRONOUS_INVOCATION,
      false
    );

  _tao_call.invoke (0, 0);

  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:88

void
Bank::Account::name (
  const char * name)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  TAO::Arg_Traits< void>::ret_val _tao_retval;
  TAO::Arg_Traits< char *>::in_arg_val _tao_name (name);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_name
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      2,
      "_set_name",
      9,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY
      
    );

  _tao_call.invoke (0, 0);
}

Bank::Account::Account (void)
{
}

Bank::Account::~Account (void)
{
}

void
Bank::Account::_tao_any_destructor (void *_tao_void_pointer)
{
  Account *_tao_tmp_pointer =
    static_cast<Account *> (_tao_void_pointer);
  ::CORBA::release (_tao_tmp_pointer);
}

Bank::Account_ptr
Bank::Account::_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return
    TAO::Narrow_Utils<Account>::narrow (
        _tao_objref,
        "IDL:Bank/Account:1.0");
}

Bank::Account_ptr
Bank::Account::_unchecked_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return
    TAO::Narrow_Utils<Account>::unchecked_narrow (
        _tao_objref);
}

Bank::Account_ptr
Bank::Account::_nil (void)
{
  return 0;
}

Bank::Account_ptr
Bank::Account::_duplicate (Account_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  return obj;
}

void
Bank::Account::_tao_release (Account_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
Bank::Account::_is_a (const char *value)
{
  if (
      ACE_OS::strcmp (
          value,
          "IDL:Bank/Account:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        ) == 0
    )
    {
      return true; // success using local knowledge
    }
  else
    {
      return this->::CORBA::Object::_is_a (value);
    }
}

const char* Bank::Account::_interface_repository_id (void) const
{
  return "IDL:Bank/Account:1.0";
}

::CORBA::Boolean
Bank::Account::marshal (TAO_OutputCDR &cdr)
{
  return (cdr << this);
}

// TAO_IDL - Generated from
// be/be_visitor_typecode/objref_typecode.cpp:70

static TAO::TypeCode::Objref<char const *,
                             TAO::Null_RefCount_Policy>
  _tao_tc_Bank_Account (
    ::CORBA::tk_objref,
    "IDL:Bank/Account:1.0",
    "Account");
  

namespace Bank
{
  ::CORBA::TypeCode_ptr const _tc_Account =
    &_tao_tc_Bank_Account;
}

// TAO_IDL - Generated from
// be/be_visitor_interface/interface_cs.cpp:48

// Traits specializations for Bank::AccountManager.

Bank::AccountManager_ptr
TAO::Objref_Traits<Bank::AccountManager>::duplicate (
    Bank::AccountManager_ptr p)
{
  return Bank::AccountManager::_duplicate (p);
}

void
TAO::Objref_Traits<Bank::AccountManager>::release (
    Bank::AccountManager_ptr p)
{
  ::CORBA::release (p);
}

Bank::AccountManager_ptr
TAO::Objref_Traits<Bank::AccountManager>::nil (void)
{
  return Bank::AccountManager::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<Bank::AccountManager>::marshal (
    const Bank::AccountManager_ptr p,
    TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:88

::Bank::Account_ptr
Bank::AccountManager::open (
  const char * name,
  ::CORBA::Float initial_balance)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  TAO::Arg_Traits< ::Bank::Account>::ret_val _tao_retval;
  TAO::Arg_Traits< char *>::in_arg_val _tao_name (name);
  TAO::Arg_Traits< ::CORBA::Float>::in_arg_val _tao_initial_balance (initial_balance);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_name,
      &_tao_initial_balance
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      3,
      "open",
      4,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY
      
    );

  _tao_call.invoke (0, 0);

  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:88

void
Bank::AccountManager::close (
  ::Bank::Account_ptr account_)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  TAO::Arg_Traits< void>::ret_val _tao_retval;
  TAO::Arg_Traits< ::Bank::Account>::in_arg_val _tao_account_ (account_);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_account_
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      2,
      "close",
      5,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY
      
    );

  _tao_call.invoke (0, 0);
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:88

void
Bank::AccountManager::shutdown (
  void)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  TAO::Arg_Traits< void>::ret_val _tao_retval;

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      1,
      "shutdown",
      8,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY,
      TAO::TAO_TWOWAY_INVOCATION
      ,
      TAO::TAO_SYNCHRONOUS_INVOCATION,
      false
    );

  _tao_call.invoke (0, 0);
}

Bank::AccountManager::AccountManager (void)
{
}

Bank::AccountManager::~AccountManager (void)
{
}

void
Bank::AccountManager::_tao_any_destructor (void *_tao_void_pointer)
{
  AccountManager *_tao_tmp_pointer =
    static_cast<AccountManager *> (_tao_void_pointer);
  ::CORBA::release (_tao_tmp_pointer);
}

Bank::AccountManager_ptr
Bank::AccountManager::_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return
    TAO::Narrow_Utils<AccountManager>::narrow (
        _tao_objref,
        "IDL:Bank/AccountManager:1.0");
}

Bank::AccountManager_ptr
Bank::AccountManager::_unchecked_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return
    TAO::Narrow_Utils<AccountManager>::unchecked_narrow (
        _tao_objref);
}

Bank::AccountManager_ptr
Bank::AccountManager::_nil (void)
{
  return 0;
}

Bank::AccountManager_ptr
Bank::AccountManager::_duplicate (AccountManager_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  return obj;
}

void
Bank::AccountManager::_tao_release (AccountManager_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
Bank::AccountManager::_is_a (const char *value)
{
  if (
      ACE_OS::strcmp (
          value,
          "IDL:Bank/AccountManager:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        ) == 0
    )
    {
      return true; // success using local knowledge
    }
  else
    {
      return this->::CORBA::Object::_is_a (value);
    }
}

const char* Bank::AccountManager::_interface_repository_id (void) const
{
  return "IDL:Bank/AccountManager:1.0";
}

::CORBA::Boolean
Bank::AccountManager::marshal (TAO_OutputCDR &cdr)
{
  return (cdr << this);
}

// TAO_IDL - Generated from
// be/be_visitor_typecode/objref_typecode.cpp:70

static TAO::TypeCode::Objref<char const *,
                             TAO::Null_RefCount_Policy>
  _tao_tc_Bank_AccountManager (
    ::CORBA::tk_objref,
    "IDL:Bank/AccountManager:1.0",
    "AccountManager");
  

namespace Bank
{
  ::CORBA::TypeCode_ptr const _tc_AccountManager =
    &_tao_tc_Bank_AccountManager;
}

// TAO_IDL - Generated from
// be/be_visitor_interface/any_op_cs.cpp:38
TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<Bank::Account>::to_object (
      ::CORBA::Object_ptr &_tao_elem) const
  {
    _tao_elem = ::CORBA::Object::_duplicate (this->value_);
    return true;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace Bank
{
  

  /// Copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      Account_ptr _tao_elem)
  {
    Account_ptr _tao_objptr =
      Account::_duplicate (_tao_elem);
    _tao_any <<= &_tao_objptr;
  }

  /// Non-copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      Account_ptr *_tao_elem)
  {
    TAO::Any_Impl_T<Account>::insert (
        _tao_any,
        Account::_tao_any_destructor,
        _tc_Account,
        *_tao_elem);
  }

  ::CORBA::Boolean
  operator>>= (
      const ::CORBA::Any &_tao_any,
      Account_ptr &_tao_elem)
  {
    return
      TAO::Any_Impl_T<Account>::extract (
          _tao_any,
          Account::_tao_any_destructor,
          _tc_Account,
          _tao_elem);
  }
}

#else

TAO_BEGIN_VERSIONED_NAMESPACE_DECL



/// Copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    Bank::Account_ptr _tao_elem)
{
  Bank::Account_ptr _tao_objptr =
    Bank::Account::_duplicate (_tao_elem);
  _tao_any <<= &_tao_objptr;
}

/// Non-copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    Bank::Account_ptr *_tao_elem)
{
  TAO::Any_Impl_T<Bank::Account>::insert (
      _tao_any,
      Bank::Account::_tao_any_destructor,
      Bank::_tc_Account,
      *_tao_elem);
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    Bank::Account_ptr &_tao_elem)
{
  return
    TAO::Any_Impl_T<Bank::Account>::extract (
        _tao_any,
        Bank::Account::_tao_any_destructor,
        Bank::_tc_Account,
        _tao_elem);
}

TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_exception/any_op_cs.cpp:38
TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Dual_Impl_T<Bank::Account::Overdraft>::demarshal_value (TAO_InputCDR & cdr)
  {
    ::CORBA::String_var id;

    if (!(cdr >> id.out ()))
      {
        return false;
      }
    
    try
      {
        this->value_->_tao_decode (cdr);
      }
    catch (const ::CORBA::Exception &)
      {
        return false;
      }

    return true;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace Bank
{
  

  // Copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      const ::Bank::Account::Overdraft &_tao_elem)
  {
    TAO::Any_Dual_Impl_T< ::Bank::Account::Overdraft>::insert_copy (
        _tao_any,
        ::Bank::Account::Overdraft::_tao_any_destructor,
        ::Bank::Account::_tc_Overdraft,
        _tao_elem);
  }

  // Non-copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      ::Bank::Account::Overdraft *_tao_elem)
  {
    TAO::Any_Dual_Impl_T< ::Bank::Account::Overdraft>::insert (
        _tao_any,
        ::Bank::Account::Overdraft::_tao_any_destructor,
        ::Bank::Account::_tc_Overdraft,
        _tao_elem);
  }

  // Extraction to non-const pointer (deprecated).
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      ::Bank::Account::Overdraft *&_tao_elem)
  {
    return _tao_any >>= const_cast<
        const ::Bank::Account::Overdraft *&> (
        _tao_elem);
  }

  // Extraction to const pointer.
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      const ::Bank::Account::Overdraft *&_tao_elem)
  {
    return
      TAO::Any_Dual_Impl_T< ::Bank::Account::Overdraft>::extract (
          _tao_any,
          ::Bank::Account::Overdraft::_tao_any_destructor,
          ::Bank::Account::_tc_Overdraft,
          _tao_elem);
  }
}

#else

TAO_BEGIN_VERSIONED_NAMESPACE_DECL



// Copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    const Bank::Account::Overdraft &_tao_elem)
{
  TAO::Any_Dual_Impl_T<Bank::Account::Overdraft>::insert_copy (
      _tao_any,
      Bank::Account::Overdraft::_tao_any_destructor,
      Bank::Account::_tc_Overdraft,
      _tao_elem
    );
}

// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    Bank::Account::Overdraft *_tao_elem)
{
  TAO::Any_Dual_Impl_T<Bank::Account::Overdraft>::insert (
      _tao_any,
      Bank::Account::Overdraft::_tao_any_destructor,
      Bank::Account::_tc_Overdraft,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    Bank::Account::Overdraft *&_tao_elem)
{
  return _tao_any >>= const_cast<
      const Bank::Account::Overdraft *&> (
      _tao_elem);
}

// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const Bank::Account::Overdraft *&_tao_elem
  )
{
  return
    TAO::Any_Dual_Impl_T<Bank::Account::Overdraft>::extract (
        _tao_any,
        Bank::Account::Overdraft::_tao_any_destructor,
        Bank::Account::_tc_Overdraft,
        _tao_elem);
}
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_interface/any_op_cs.cpp:38
TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<Bank::AccountManager>::to_object (
      ::CORBA::Object_ptr &_tao_elem) const
  {
    _tao_elem = ::CORBA::Object::_duplicate (this->value_);
    return true;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace Bank
{
  

  /// Copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      AccountManager_ptr _tao_elem)
  {
    AccountManager_ptr _tao_objptr =
      AccountManager::_duplicate (_tao_elem);
    _tao_any <<= &_tao_objptr;
  }

  /// Non-copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      AccountManager_ptr *_tao_elem)
  {
    TAO::Any_Impl_T<AccountManager>::insert (
        _tao_any,
        AccountManager::_tao_any_destructor,
        _tc_AccountManager,
        *_tao_elem);
  }

  ::CORBA::Boolean
  operator>>= (
      const ::CORBA::Any &_tao_any,
      AccountManager_ptr &_tao_elem)
  {
    return
      TAO::Any_Impl_T<AccountManager>::extract (
          _tao_any,
          AccountManager::_tao_any_destructor,
          _tc_AccountManager,
          _tao_elem);
  }
}

#else

TAO_BEGIN_VERSIONED_NAMESPACE_DECL



/// Copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    Bank::AccountManager_ptr _tao_elem)
{
  Bank::AccountManager_ptr _tao_objptr =
    Bank::AccountManager::_duplicate (_tao_elem);
  _tao_any <<= &_tao_objptr;
}

/// Non-copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    Bank::AccountManager_ptr *_tao_elem)
{
  TAO::Any_Impl_T<Bank::AccountManager>::insert (
      _tao_any,
      Bank::AccountManager::_tao_any_destructor,
      Bank::_tc_AccountManager,
      *_tao_elem);
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    Bank::AccountManager_ptr &_tao_elem)
{
  return
    TAO::Any_Impl_T<Bank::AccountManager>::extract (
        _tao_any,
        Bank::AccountManager::_tao_any_destructor,
        Bank::_tc_AccountManager,
        _tao_elem);
}

TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_exception/cdr_op_cs.cpp:48
TAO_BEGIN_VERSIONED_NAMESPACE_DECL



::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Bank::Account::Overdraft &_tao_aggregate
  )
{
  // First marshal the repository ID.
  if (strm << _tao_aggregate._rep_id ())
    {
      // Now marshal the members (if any).
      return (
        (strm << _tao_aggregate.reason.in ())
       );
    }
  else
    {
      return false;
    }
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Bank::Account::Overdraft &_tao_aggregate
  )
{
  // Demarshal the members.
  return (
    (strm >> _tao_aggregate.reason.out ())
  );
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_interface/cdr_op_cs.cpp:51

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Bank::Account_ptr _tao_objref)
{
  ::CORBA::Object_ptr _tao_corba_obj = _tao_objref;
  return (strm << _tao_corba_obj);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Bank::Account_ptr &_tao_objref)
{
  ::CORBA::Object_var obj;

  if (!(strm >> obj.inout ()))
    {
      return false;
    }
  
  typedef ::Bank::Account RHS_SCOPED_NAME;

  // Narrow to the right type.
  _tao_objref =
    TAO::Narrow_Utils<RHS_SCOPED_NAME>::unchecked_narrow (obj.in ());
    
  return true;
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_interface/cdr_op_cs.cpp:51

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Bank::AccountManager_ptr _tao_objref)
{
  ::CORBA::Object_ptr _tao_corba_obj = _tao_objref;
  return (strm << _tao_corba_obj);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Bank::AccountManager_ptr &_tao_objref)
{
  ::CORBA::Object_var obj;

  if (!(strm >> obj.inout ()))
    {
      return false;
    }
  
  typedef ::Bank::AccountManager RHS_SCOPED_NAME;

  // Narrow to the right type.
  _tao_objref =
    TAO::Narrow_Utils<RHS_SCOPED_NAME>::unchecked_narrow (obj.in ());
    
  return true;
}

TAO_END_VERSIONED_NAMESPACE_DECL



