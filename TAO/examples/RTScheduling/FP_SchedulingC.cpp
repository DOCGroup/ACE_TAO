// -*- C++ -*-
/**
 * Code generated by the The ACE ORB (TAO) IDL Compiler v2.4.1
 * TAO and the TAO IDL Compiler have been developed by:
 *       Center for Distributed Object Computing
 *       Washington University
 *       St. Louis, MO
 *       USA
 *       http://www.cs.wustl.edu/~schmidt/doc-center.html
 * and
 *       Distributed Object Computing Laboratory
 *       University of California at Irvine
 *       Irvine, CA
 *       USA
 * and
 *       Institute for Software Integrated Systems
 *       Vanderbilt University
 *       Nashville, TN
 *       USA
 *       http://www.isis.vanderbilt.edu/
 *
 * Information about TAO is available at:
 *     http://www.dre.vanderbilt.edu/~schmidt/TAO.html
 **/

// TAO_IDL - Generated from
// be/be_codegen.cpp:373


#include "FP_SchedulingC.h"
#include "tao/CDR.h"
#include "ace/OS_NS_string.h"

#if !defined (__ACE_INLINE__)
#include "FP_SchedulingC.inl"
#endif /* !defined INLINE */

// TAO_IDL - Generated from
// be/be_visitor_interface/interface_cs.cpp:48

// Traits specializations for FP_Scheduling::SegmentSchedulingParameterPolicy.

FP_Scheduling::SegmentSchedulingParameterPolicy_ptr
TAO::Objref_Traits<FP_Scheduling::SegmentSchedulingParameterPolicy>::duplicate (
    FP_Scheduling::SegmentSchedulingParameterPolicy_ptr p)
{
  return FP_Scheduling::SegmentSchedulingParameterPolicy::_duplicate (p);
}

void
TAO::Objref_Traits<FP_Scheduling::SegmentSchedulingParameterPolicy>::release (
    FP_Scheduling::SegmentSchedulingParameterPolicy_ptr p)
{
  ::CORBA::release (p);
}

FP_Scheduling::SegmentSchedulingParameterPolicy_ptr
TAO::Objref_Traits<FP_Scheduling::SegmentSchedulingParameterPolicy>::nil (void)
{
  return FP_Scheduling::SegmentSchedulingParameterPolicy::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<FP_Scheduling::SegmentSchedulingParameterPolicy>::marshal (
    const FP_Scheduling::SegmentSchedulingParameterPolicy_ptr p,
    TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

FP_Scheduling::SegmentSchedulingParameterPolicy::SegmentSchedulingParameterPolicy (void)
{}

FP_Scheduling::SegmentSchedulingParameterPolicy::~SegmentSchedulingParameterPolicy (void)
{
}

FP_Scheduling::SegmentSchedulingParameterPolicy_ptr
FP_Scheduling::SegmentSchedulingParameterPolicy::_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return SegmentSchedulingParameterPolicy::_duplicate (
      dynamic_cast<SegmentSchedulingParameterPolicy_ptr> (_tao_objref)
    );
}

FP_Scheduling::SegmentSchedulingParameterPolicy_ptr
FP_Scheduling::SegmentSchedulingParameterPolicy::_unchecked_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return SegmentSchedulingParameterPolicy::_duplicate (
      dynamic_cast<SegmentSchedulingParameterPolicy_ptr> (_tao_objref)
    );
}

FP_Scheduling::SegmentSchedulingParameterPolicy_ptr
FP_Scheduling::SegmentSchedulingParameterPolicy::_nil (void)
{
  return 0;
}

FP_Scheduling::SegmentSchedulingParameterPolicy_ptr
FP_Scheduling::SegmentSchedulingParameterPolicy::_duplicate (SegmentSchedulingParameterPolicy_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  return obj;
}

void
FP_Scheduling::SegmentSchedulingParameterPolicy::_tao_release (SegmentSchedulingParameterPolicy_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
FP_Scheduling::SegmentSchedulingParameterPolicy::_is_a (const char *value)
{
  if (
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Policy:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:FP_Scheduling/SegmentSchedulingParameterPolicy:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/LocalObject:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        ) == 0
    )
    {
      return true; // success using local knowledge
    }
  else
    {
      return false;
    }
}

const char* FP_Scheduling::SegmentSchedulingParameterPolicy::_interface_repository_id (void) const
{
  return "IDL:FP_Scheduling/SegmentSchedulingParameterPolicy:1.0";
}

::CORBA::Boolean
FP_Scheduling::SegmentSchedulingParameterPolicy::marshal (TAO_OutputCDR & /* cdr */)
{
  return false;
}

// TAO_IDL - Generated from
// be/be_visitor_interface/interface_cs.cpp:48

// Traits specializations for FP_Scheduling::FP_Scheduler.

FP_Scheduling::FP_Scheduler_ptr
TAO::Objref_Traits<FP_Scheduling::FP_Scheduler>::duplicate (
    FP_Scheduling::FP_Scheduler_ptr p)
{
  return FP_Scheduling::FP_Scheduler::_duplicate (p);
}

void
TAO::Objref_Traits<FP_Scheduling::FP_Scheduler>::release (
    FP_Scheduling::FP_Scheduler_ptr p)
{
  ::CORBA::release (p);
}

FP_Scheduling::FP_Scheduler_ptr
TAO::Objref_Traits<FP_Scheduling::FP_Scheduler>::nil (void)
{
  return FP_Scheduling::FP_Scheduler::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<FP_Scheduling::FP_Scheduler>::marshal (
    const FP_Scheduling::FP_Scheduler_ptr p,
    TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

FP_Scheduling::FP_Scheduler::FP_Scheduler (void)
{}

FP_Scheduling::FP_Scheduler::~FP_Scheduler (void)
{
}

FP_Scheduling::FP_Scheduler_ptr
FP_Scheduling::FP_Scheduler::_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return FP_Scheduler::_duplicate (
      dynamic_cast<FP_Scheduler_ptr> (_tao_objref)
    );
}

FP_Scheduling::FP_Scheduler_ptr
FP_Scheduling::FP_Scheduler::_unchecked_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return FP_Scheduler::_duplicate (
      dynamic_cast<FP_Scheduler_ptr> (_tao_objref)
    );
}

FP_Scheduling::FP_Scheduler_ptr
FP_Scheduling::FP_Scheduler::_nil (void)
{
  return 0;
}

FP_Scheduling::FP_Scheduler_ptr
FP_Scheduling::FP_Scheduler::_duplicate (FP_Scheduler_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  return obj;
}

void
FP_Scheduling::FP_Scheduler::_tao_release (FP_Scheduler_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
FP_Scheduling::FP_Scheduler::_is_a (const char *value)
{
  if (
      ACE_OS::strcmp (
          value,
          "IDL:RTScheduling/Scheduler:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:FP_Scheduling/FP_Scheduler:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/LocalObject:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        ) == 0
    )
    {
      return true; // success using local knowledge
    }
  else
    {
      return false;
    }
}

const char* FP_Scheduling::FP_Scheduler::_interface_repository_id (void) const
{
  return "IDL:FP_Scheduling/FP_Scheduler:1.0";
}

::CORBA::Boolean
FP_Scheduling::FP_Scheduler::marshal (TAO_OutputCDR & /* cdr */)
{
  return false;
}

