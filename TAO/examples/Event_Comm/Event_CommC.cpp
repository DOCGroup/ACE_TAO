// -*- C++ -*-
/**
 * Code generated by the The ACE ORB (TAO) IDL Compiler v2.4.1
 * TAO and the TAO IDL Compiler have been developed by:
 *       Center for Distributed Object Computing
 *       Washington University
 *       St. Louis, MO
 *       USA
 *       http://www.cs.wustl.edu/~schmidt/doc-center.html
 * and
 *       Distributed Object Computing Laboratory
 *       University of California at Irvine
 *       Irvine, CA
 *       USA
 * and
 *       Institute for Software Integrated Systems
 *       Vanderbilt University
 *       Nashville, TN
 *       USA
 *       http://www.isis.vanderbilt.edu/
 *
 * Information about TAO is available at:
 *     http://www.dre.vanderbilt.edu/~schmidt/TAO.html
 **/

// TAO_IDL - Generated from
// be/be_codegen.cpp:373


#include "Event_CommC.h"
#include "tao/CDR.h"
#include "tao/Exception_Data.h"
#include "tao/Invocation_Adapter.h"
#include "tao/Object_T.h"
#include "tao/SystemException.h"
#include "ace/OS_NS_string.h"

#if !defined (__ACE_INLINE__)
#include "Event_CommC.inl"
#endif /* !defined INLINE */

// TAO_IDL - Generated from
// be/be_visitor_interface/interface_cs.cpp:48

// Traits specializations for Event_Comm::Consumer.

Event_Comm::Consumer_ptr
TAO::Objref_Traits<Event_Comm::Consumer>::duplicate (
    Event_Comm::Consumer_ptr p)
{
  return Event_Comm::Consumer::_duplicate (p);
}

void
TAO::Objref_Traits<Event_Comm::Consumer>::release (
    Event_Comm::Consumer_ptr p)
{
  ::CORBA::release (p);
}

Event_Comm::Consumer_ptr
TAO::Objref_Traits<Event_Comm::Consumer>::nil (void)
{
  return Event_Comm::Consumer::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<Event_Comm::Consumer>::marshal (
    const Event_Comm::Consumer_ptr p,
    TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:88

void
Event_Comm::Consumer::push (
  const ::Event_Comm::Event & event_instance)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  TAO::Arg_Traits< void>::ret_val _tao_retval;
  TAO::Arg_Traits< ::Event_Comm::Event>::in_arg_val _tao_event_instance (event_instance);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_event_instance
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      2,
      "push",
      4,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY
      
    );

  _tao_call.invoke (0, 0);
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:88

void
Event_Comm::Consumer::disconnect (
  const char * reason)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  TAO::Arg_Traits< void>::ret_val _tao_retval;
  TAO::Arg_Traits< char *>::in_arg_val _tao_reason (reason);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_reason
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      2,
      "disconnect",
      10,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY
      
    );

  _tao_call.invoke (0, 0);
}

Event_Comm::Consumer::Consumer (void)
{
}

Event_Comm::Consumer::~Consumer (void)
{
}

Event_Comm::Consumer_ptr
Event_Comm::Consumer::_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return
    TAO::Narrow_Utils<Consumer>::narrow (
        _tao_objref,
        "IDL:Event_Comm/Consumer:1.0");
}

Event_Comm::Consumer_ptr
Event_Comm::Consumer::_unchecked_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return
    TAO::Narrow_Utils<Consumer>::unchecked_narrow (
        _tao_objref);
}

Event_Comm::Consumer_ptr
Event_Comm::Consumer::_nil (void)
{
  return 0;
}

Event_Comm::Consumer_ptr
Event_Comm::Consumer::_duplicate (Consumer_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  return obj;
}

void
Event_Comm::Consumer::_tao_release (Consumer_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
Event_Comm::Consumer::_is_a (const char *value)
{
  if (
      ACE_OS::strcmp (
          value,
          "IDL:Event_Comm/Consumer:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        ) == 0
    )
    {
      return true; // success using local knowledge
    }
  else
    {
      return this->::CORBA::Object::_is_a (value);
    }
}

const char* Event_Comm::Consumer::_interface_repository_id (void) const
{
  return "IDL:Event_Comm/Consumer:1.0";
}

::CORBA::Boolean
Event_Comm::Consumer::marshal (TAO_OutputCDR &cdr)
{
  return (cdr << this);
}

// TAO_IDL - Generated from
// be/be_visitor_interface/interface_cs.cpp:48

// Traits specializations for Event_Comm::Notifier.

Event_Comm::Notifier_ptr
TAO::Objref_Traits<Event_Comm::Notifier>::duplicate (
    Event_Comm::Notifier_ptr p)
{
  return Event_Comm::Notifier::_duplicate (p);
}

void
TAO::Objref_Traits<Event_Comm::Notifier>::release (
    Event_Comm::Notifier_ptr p)
{
  ::CORBA::release (p);
}

Event_Comm::Notifier_ptr
TAO::Objref_Traits<Event_Comm::Notifier>::nil (void)
{
  return Event_Comm::Notifier::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<Event_Comm::Notifier>::marshal (
    const Event_Comm::Notifier_ptr p,
    TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

// TAO_IDL - Generated from
// be/be_visitor_exception/exception_ctor.cpp:51

Event_Comm::Notifier::CannotSubscribe::CannotSubscribe (
    const char * _tao_reason_)
  : ::CORBA::UserException (
        "IDL:Event_Comm/Notifier/CannotSubscribe:1.0",
        "CannotSubscribe"
      )
{
  this->reason_ = ::CORBA::string_dup (_tao_reason_);
}



// TAO_IDL - Generated from
// be/be_visitor_exception/exception_cs.cpp:98

Event_Comm::Notifier::CannotSubscribe::CannotSubscribe (void)
  : ::CORBA::UserException (
        "IDL:Event_Comm/Notifier/CannotSubscribe:1.0",
        "CannotSubscribe"
      )
{
}

Event_Comm::Notifier::CannotSubscribe::~CannotSubscribe (void)
{
}

Event_Comm::Notifier::CannotSubscribe::CannotSubscribe (const ::Event_Comm::Notifier::CannotSubscribe &_tao_excp)
  : ::CORBA::UserException (
        _tao_excp._rep_id (),
        _tao_excp._name ()
      )
{
  this->reason_ = ::CORBA::string_dup (_tao_excp.reason_.in ());
}

Event_Comm::Notifier::CannotSubscribe&
Event_Comm::Notifier::CannotSubscribe::operator= (const ::Event_Comm::Notifier::CannotSubscribe &_tao_excp)
{
  this->::CORBA::UserException::operator= (_tao_excp);
  this->reason_ = ::CORBA::string_dup (_tao_excp.reason_.in ());
  return *this;
}

Event_Comm::Notifier::CannotSubscribe *
Event_Comm::Notifier::CannotSubscribe::_downcast ( ::CORBA::Exception *_tao_excp)
{
  return dynamic_cast<CannotSubscribe *> (_tao_excp);
}

const Event_Comm::Notifier::CannotSubscribe *
Event_Comm::Notifier::CannotSubscribe::_downcast ( ::CORBA::Exception const *_tao_excp)
{
  return dynamic_cast<const CannotSubscribe *> (_tao_excp);
}

::CORBA::Exception *Event_Comm::Notifier::CannotSubscribe::_alloc (void)
{
  ::CORBA::Exception *retval = 0;
  ACE_NEW_RETURN (retval, ::Event_Comm::Notifier::CannotSubscribe, 0);
  return retval;
}

::CORBA::Exception *
Event_Comm::Notifier::CannotSubscribe::_tao_duplicate (void) const
{
  ::CORBA::Exception *result = 0;
  ACE_NEW_RETURN (
      result,
      ::Event_Comm::Notifier::CannotSubscribe (*this),
      0
    );
  return result;
}

void Event_Comm::Notifier::CannotSubscribe::_raise (void) const
{
  throw *this;
}

void Event_Comm::Notifier::CannotSubscribe::_tao_encode (TAO_OutputCDR &cdr) const
{
  if (!(cdr << *this))
    {
      throw ::CORBA::MARSHAL ();
    }
}

void Event_Comm::Notifier::CannotSubscribe::_tao_decode (TAO_InputCDR &cdr)
{
  if (!(cdr >> *this))
    {
      throw ::CORBA::MARSHAL ();
    }
}



// TAO_IDL - Generated from
// be/be_visitor_exception/exception_ctor.cpp:51

Event_Comm::Notifier::CannotUnsubscribe::CannotUnsubscribe (
    const char * _tao_reason_)
  : ::CORBA::UserException (
        "IDL:Event_Comm/Notifier/CannotUnsubscribe:1.0",
        "CannotUnsubscribe"
      )
{
  this->reason_ = ::CORBA::string_dup (_tao_reason_);
}



// TAO_IDL - Generated from
// be/be_visitor_exception/exception_cs.cpp:98

Event_Comm::Notifier::CannotUnsubscribe::CannotUnsubscribe (void)
  : ::CORBA::UserException (
        "IDL:Event_Comm/Notifier/CannotUnsubscribe:1.0",
        "CannotUnsubscribe"
      )
{
}

Event_Comm::Notifier::CannotUnsubscribe::~CannotUnsubscribe (void)
{
}

Event_Comm::Notifier::CannotUnsubscribe::CannotUnsubscribe (const ::Event_Comm::Notifier::CannotUnsubscribe &_tao_excp)
  : ::CORBA::UserException (
        _tao_excp._rep_id (),
        _tao_excp._name ()
      )
{
  this->reason_ = ::CORBA::string_dup (_tao_excp.reason_.in ());
}

Event_Comm::Notifier::CannotUnsubscribe&
Event_Comm::Notifier::CannotUnsubscribe::operator= (const ::Event_Comm::Notifier::CannotUnsubscribe &_tao_excp)
{
  this->::CORBA::UserException::operator= (_tao_excp);
  this->reason_ = ::CORBA::string_dup (_tao_excp.reason_.in ());
  return *this;
}

Event_Comm::Notifier::CannotUnsubscribe *
Event_Comm::Notifier::CannotUnsubscribe::_downcast ( ::CORBA::Exception *_tao_excp)
{
  return dynamic_cast<CannotUnsubscribe *> (_tao_excp);
}

const Event_Comm::Notifier::CannotUnsubscribe *
Event_Comm::Notifier::CannotUnsubscribe::_downcast ( ::CORBA::Exception const *_tao_excp)
{
  return dynamic_cast<const CannotUnsubscribe *> (_tao_excp);
}

::CORBA::Exception *Event_Comm::Notifier::CannotUnsubscribe::_alloc (void)
{
  ::CORBA::Exception *retval = 0;
  ACE_NEW_RETURN (retval, ::Event_Comm::Notifier::CannotUnsubscribe, 0);
  return retval;
}

::CORBA::Exception *
Event_Comm::Notifier::CannotUnsubscribe::_tao_duplicate (void) const
{
  ::CORBA::Exception *result = 0;
  ACE_NEW_RETURN (
      result,
      ::Event_Comm::Notifier::CannotUnsubscribe (*this),
      0
    );
  return result;
}

void Event_Comm::Notifier::CannotUnsubscribe::_raise (void) const
{
  throw *this;
}

void Event_Comm::Notifier::CannotUnsubscribe::_tao_encode (TAO_OutputCDR &cdr) const
{
  if (!(cdr << *this))
    {
      throw ::CORBA::MARSHAL ();
    }
}

void Event_Comm::Notifier::CannotUnsubscribe::_tao_decode (TAO_InputCDR &cdr)
{
  if (!(cdr >> *this))
    {
      throw ::CORBA::MARSHAL ();
    }
}



// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:88

void
Event_Comm::Notifier::disconnect (
  const char * reason)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  TAO::Arg_Traits< void>::ret_val _tao_retval;
  TAO::Arg_Traits< char *>::in_arg_val _tao_reason (reason);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_reason
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      2,
      "disconnect",
      10,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY
      
    );

  _tao_call.invoke (0, 0);
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:88

void
Event_Comm::Notifier::push (
  const ::Event_Comm::Event & event_instance)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  TAO::Arg_Traits< void>::ret_val _tao_retval;
  TAO::Arg_Traits< ::Event_Comm::Event>::in_arg_val _tao_event_instance (event_instance);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_event_instance
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      2,
      "push",
      4,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY
      
    );

  _tao_call.invoke (0, 0);
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:88

void
Event_Comm::Notifier::subscribe (
  ::Event_Comm::Consumer_ptr subscriber,
  const char * filtering_criteria)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  TAO::Arg_Traits< void>::ret_val _tao_retval;
  TAO::Arg_Traits< ::Event_Comm::Consumer>::in_arg_val _tao_subscriber (subscriber);
  TAO::Arg_Traits< char *>::in_arg_val _tao_filtering_criteria (filtering_criteria);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_subscriber,
      &_tao_filtering_criteria
    };

  static TAO::Exception_Data
  _tao_Event_Comm_Notifier_subscribe_exceptiondata [] = 
    {
      {
        "IDL:Event_Comm/Notifier/CannotSubscribe:1.0",
        Event_Comm::Notifier::CannotSubscribe::_alloc
#if TAO_HAS_INTERCEPTORS == 1
        , 0
#endif /* TAO_HAS_INTERCEPTORS */
      }
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      3,
      "subscribe",
      9,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY
      
    );

  _tao_call.invoke (
      _tao_Event_Comm_Notifier_subscribe_exceptiondata,
      1
    );
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:88

void
Event_Comm::Notifier::unsubscribe (
  ::Event_Comm::Consumer_ptr unsubscriber,
  const char * filtering_criteria)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  TAO::Arg_Traits< void>::ret_val _tao_retval;
  TAO::Arg_Traits< ::Event_Comm::Consumer>::in_arg_val _tao_unsubscriber (unsubscriber);
  TAO::Arg_Traits< char *>::in_arg_val _tao_filtering_criteria (filtering_criteria);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_unsubscriber,
      &_tao_filtering_criteria
    };

  static TAO::Exception_Data
  _tao_Event_Comm_Notifier_unsubscribe_exceptiondata [] = 
    {
      {
        "IDL:Event_Comm/Notifier/CannotUnsubscribe:1.0",
        Event_Comm::Notifier::CannotUnsubscribe::_alloc
#if TAO_HAS_INTERCEPTORS == 1
        , 0
#endif /* TAO_HAS_INTERCEPTORS */
      }
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      3,
      "unsubscribe",
      11,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY
      
    );

  _tao_call.invoke (
      _tao_Event_Comm_Notifier_unsubscribe_exceptiondata,
      1
    );
}

Event_Comm::Notifier::Notifier (void)
{
}

Event_Comm::Notifier::~Notifier (void)
{
}

Event_Comm::Notifier_ptr
Event_Comm::Notifier::_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return
    TAO::Narrow_Utils<Notifier>::narrow (
        _tao_objref,
        "IDL:Event_Comm/Notifier:1.0");
}

Event_Comm::Notifier_ptr
Event_Comm::Notifier::_unchecked_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return
    TAO::Narrow_Utils<Notifier>::unchecked_narrow (
        _tao_objref);
}

Event_Comm::Notifier_ptr
Event_Comm::Notifier::_nil (void)
{
  return 0;
}

Event_Comm::Notifier_ptr
Event_Comm::Notifier::_duplicate (Notifier_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  return obj;
}

void
Event_Comm::Notifier::_tao_release (Notifier_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
Event_Comm::Notifier::_is_a (const char *value)
{
  if (
      ACE_OS::strcmp (
          value,
          "IDL:Event_Comm/Notifier:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        ) == 0
    )
    {
      return true; // success using local knowledge
    }
  else
    {
      return this->::CORBA::Object::_is_a (value);
    }
}

const char* Event_Comm::Notifier::_interface_repository_id (void) const
{
  return "IDL:Event_Comm/Notifier:1.0";
}

::CORBA::Boolean
Event_Comm::Notifier::marshal (TAO_OutputCDR &cdr)
{
  return (cdr << this);
}

// TAO_IDL - Generated from
// be/be_visitor_structure/cdr_op_cs.cpp:49

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Event_Comm::Event &_tao_aggregate)
{
  return
    (strm << _tao_aggregate.tag_.in ()) &&
    (strm << _tao_aggregate.value_) &&
    (strm << _tao_aggregate.object_ref_.in ());
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Event_Comm::Event &_tao_aggregate)
{
  return
    (strm >> _tao_aggregate.tag_.out ()) &&
    (strm >> _tao_aggregate.value_) &&
    (strm >> _tao_aggregate.object_ref_.out ());
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_interface/cdr_op_cs.cpp:51

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Event_Comm::Consumer_ptr _tao_objref)
{
  ::CORBA::Object_ptr _tao_corba_obj = _tao_objref;
  return (strm << _tao_corba_obj);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Event_Comm::Consumer_ptr &_tao_objref)
{
  ::CORBA::Object_var obj;

  if (!(strm >> obj.inout ()))
    {
      return false;
    }
  
  typedef ::Event_Comm::Consumer RHS_SCOPED_NAME;

  // Narrow to the right type.
  _tao_objref =
    TAO::Narrow_Utils<RHS_SCOPED_NAME>::unchecked_narrow (obj.in ());
    
  return true;
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_exception/cdr_op_cs.cpp:48
TAO_BEGIN_VERSIONED_NAMESPACE_DECL



::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Event_Comm::Notifier::CannotSubscribe &_tao_aggregate
  )
{
  // First marshal the repository ID.
  if (strm << _tao_aggregate._rep_id ())
    {
      // Now marshal the members (if any).
      return (
        (strm << _tao_aggregate.reason_.in ())
       );
    }
  else
    {
      return false;
    }
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Event_Comm::Notifier::CannotSubscribe &_tao_aggregate
  )
{
  // Demarshal the members.
  return (
    (strm >> _tao_aggregate.reason_.out ())
  );
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_exception/cdr_op_cs.cpp:48
TAO_BEGIN_VERSIONED_NAMESPACE_DECL



::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Event_Comm::Notifier::CannotUnsubscribe &_tao_aggregate
  )
{
  // First marshal the repository ID.
  if (strm << _tao_aggregate._rep_id ())
    {
      // Now marshal the members (if any).
      return (
        (strm << _tao_aggregate.reason_.in ())
       );
    }
  else
    {
      return false;
    }
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Event_Comm::Notifier::CannotUnsubscribe &_tao_aggregate
  )
{
  // Demarshal the members.
  return (
    (strm >> _tao_aggregate.reason_.out ())
  );
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_interface/cdr_op_cs.cpp:51

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Event_Comm::Notifier_ptr _tao_objref)
{
  ::CORBA::Object_ptr _tao_corba_obj = _tao_objref;
  return (strm << _tao_corba_obj);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Event_Comm::Notifier_ptr &_tao_objref)
{
  ::CORBA::Object_var obj;

  if (!(strm >> obj.inout ()))
    {
      return false;
    }
  
  typedef ::Event_Comm::Notifier RHS_SCOPED_NAME;

  // Narrow to the right type.
  _tao_objref =
    TAO::Narrow_Utils<RHS_SCOPED_NAME>::unchecked_narrow (obj.in ());
    
  return true;
}

TAO_END_VERSIONED_NAMESPACE_DECL



