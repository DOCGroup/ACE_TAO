// -*- C++ -*-
/**
 * Code generated by the The ACE ORB (TAO) IDL Compiler v2.4.1
 * TAO and the TAO IDL Compiler have been developed by:
 *       Center for Distributed Object Computing
 *       Washington University
 *       St. Louis, MO
 *       USA
 *       http://www.cs.wustl.edu/~schmidt/doc-center.html
 * and
 *       Distributed Object Computing Laboratory
 *       University of California at Irvine
 *       Irvine, CA
 *       USA
 * and
 *       Institute for Software Integrated Systems
 *       Vanderbilt University
 *       Nashville, TN
 *       USA
 *       http://www.isis.vanderbilt.edu/
 *
 * Information about TAO is available at:
 *     http://www.dre.vanderbilt.edu/~schmidt/TAO.html
 **/

// TAO_IDL - Generated from
// be/be_codegen.cpp:149

#ifndef _TAO_IDL_QUOTERC_MLEIOJ_H_
#define _TAO_IDL_QUOTERC_MLEIOJ_H_

#include /**/ "ace/pre.h"


#include /**/ "ace/config-all.h"

#if !defined (ACE_LACKS_PRAGMA_ONCE)
# pragma once
#endif /* ACE_LACKS_PRAGMA_ONCE */


#include "tao/ORB.h"
#include "tao/SystemException.h"
#include "tao/UserException.h"
#include "tao/Basic_Types.h"
#include "tao/ORB_Constants.h"
#include "tao/Object.h"
#include "tao/String_Manager_T.h"
#include "tao/Sequence_T.h"
#include "tao/Objref_VarOut_T.h"
#include "tao/Seq_Var_T.h"
#include "tao/Seq_Out_T.h"
#include "tao/VarOut_T.h"
#include "tao/Arg_Traits_T.h"
#include "tao/Basic_Arguments.h"
#include "tao/Special_Basic_Arguments.h"
#include "tao/Any_Insert_Policy_T.h"
#include "tao/Fixed_Size_Argument_T.h"
#include "tao/Var_Size_Argument_T.h"
#include "tao/Object_Argument_T.h"
#include "tao/UB_String_Arguments.h"
#include /**/ "tao/Version.h"
#include /**/ "tao/Versioned_Namespace.h"

#include "orbsvcs/CosLifeCycleC.h"

#if TAO_MAJOR_VERSION != 2 || TAO_MINOR_VERSION != 4 || TAO_MICRO_VERSION != 1
#error This file should be regenerated with TAO_IDL
#endif

#if defined (TAO_EXPORT_MACRO)
#undef TAO_EXPORT_MACRO
#endif
#define TAO_EXPORT_MACRO

// TAO_IDL - Generated from
// be/be_visitor_root/root_ch.cpp:157
TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<typename T> class Narrow_Utils;
}
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_module/module_ch.cpp:35

namespace Stock
{

  // TAO_IDL - Generated from
  // be/be_visitor_exception/exception_ch.cpp:41

  class  Invalid_Stock : public ::CORBA::UserException
  {
  public:

    Invalid_Stock (void);
    Invalid_Stock (const Invalid_Stock &);
    ~Invalid_Stock (void);

    Invalid_Stock &operator= (const Invalid_Stock &);

    static Invalid_Stock *_downcast ( ::CORBA::Exception *);
    static const Invalid_Stock *_downcast ( ::CORBA::Exception const *);

    static ::CORBA::Exception *_alloc (void);

    virtual ::CORBA::Exception *_tao_duplicate (void) const;

    virtual void _raise (void) const;

    virtual void _tao_encode (TAO_OutputCDR &cdr) const;
    virtual void _tao_decode (TAO_InputCDR &cdr);
  };

  // TAO_IDL - Generated from
  // be/be_visitor_exception/exception_ch.cpp:41

  class  Invalid_Quoter : public ::CORBA::UserException
  {
  public:

    Invalid_Quoter (void);
    Invalid_Quoter (const Invalid_Quoter &);
    ~Invalid_Quoter (void);

    Invalid_Quoter &operator= (const Invalid_Quoter &);

    static Invalid_Quoter *_downcast ( ::CORBA::Exception *);
    static const Invalid_Quoter *_downcast ( ::CORBA::Exception const *);

    static ::CORBA::Exception *_alloc (void);

    virtual ::CORBA::Exception *_tao_duplicate (void) const;

    virtual void _raise (void) const;

    virtual void _tao_encode (TAO_OutputCDR &cdr) const;
    virtual void _tao_decode (TAO_InputCDR &cdr);
  };

  // TAO_IDL - Generated from
  // be/be_interface.cpp:748

#if !defined (_STOCK_QUOTER__VAR_OUT_CH_)
#define _STOCK_QUOTER__VAR_OUT_CH_

  class Quoter;
  typedef Quoter *Quoter_ptr;

  typedef
    TAO_Objref_Var_T<
        Quoter
      >
    Quoter_var;

  typedef
    TAO_Objref_Out_T<
        Quoter
      >
    Quoter_out;

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // be/be_visitor_interface/interface_ch.cpp:40

  class  Quoter
    : public virtual ::CosLifeCycle::LifeCycleObject

  {
  public:
    friend class TAO::Narrow_Utils<Quoter>;

    // TAO_IDL - Generated from
    // be/be_type.cpp:304

    typedef Quoter_ptr _ptr_type;
    typedef Quoter_var _var_type;
    typedef Quoter_out _out_type;

    // The static operations.
    static Quoter_ptr _duplicate (Quoter_ptr obj);

    static void _tao_release (Quoter_ptr obj);

    static Quoter_ptr _narrow (::CORBA::Object_ptr obj);
    static Quoter_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
    static Quoter_ptr _nil (void);

    virtual ::CORBA::Long get_quote (
      const char * stock_name);

    // TAO_IDL - Generated from
    // be/be_visitor_interface/interface_ch.cpp:137

    virtual ::CORBA::Boolean _is_a (const char *type_id);
    virtual const char* _interface_repository_id (void) const;
    virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);

  protected:
    // Concrete interface only.
    Quoter (void);

    // Concrete non-local interface only.
    Quoter (
        ::IOP::IOR *ior,
        TAO_ORB_Core *orb_core);

    // Non-local interface only.
    Quoter (
        TAO_Stub *objref,
        ::CORBA::Boolean _tao_collocated = false,
        TAO_Abstract_ServantBase *servant = 0,
        TAO_ORB_Core *orb_core = 0);

    virtual ~Quoter (void);

  private:
    // Private and unimplemented for concrete interfaces.
    Quoter (const Quoter &);

    void operator= (const Quoter &);
  };

  // TAO_IDL - Generated from
  // be/be_interface.cpp:748

#if !defined (_STOCK_QUOTER_FACTORY__VAR_OUT_CH_)
#define _STOCK_QUOTER_FACTORY__VAR_OUT_CH_

  class Quoter_Factory;
  typedef Quoter_Factory *Quoter_Factory_ptr;

  typedef
    TAO_Objref_Var_T<
        Quoter_Factory
      >
    Quoter_Factory_var;

  typedef
    TAO_Objref_Out_T<
        Quoter_Factory
      >
    Quoter_Factory_out;

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // be/be_visitor_interface/interface_ch.cpp:40

  class  Quoter_Factory
    : public virtual ::CORBA::Object
  {
  public:
    friend class TAO::Narrow_Utils<Quoter_Factory>;

    // TAO_IDL - Generated from
    // be/be_type.cpp:304

    typedef Quoter_Factory_ptr _ptr_type;
    typedef Quoter_Factory_var _var_type;
    typedef Quoter_Factory_out _out_type;

    // The static operations.
    static Quoter_Factory_ptr _duplicate (Quoter_Factory_ptr obj);

    static void _tao_release (Quoter_Factory_ptr obj);

    static Quoter_Factory_ptr _narrow (::CORBA::Object_ptr obj);
    static Quoter_Factory_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
    static Quoter_Factory_ptr _nil (void);

    virtual ::Stock::Quoter_ptr create_quoter (
      const char * name);

    // TAO_IDL - Generated from
    // be/be_visitor_interface/interface_ch.cpp:137

    virtual ::CORBA::Boolean _is_a (const char *type_id);
    virtual const char* _interface_repository_id (void) const;
    virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);

  protected:
    // Concrete interface only.
    Quoter_Factory (void);

    // Concrete non-local interface only.
    Quoter_Factory (
        ::IOP::IOR *ior,
        TAO_ORB_Core *orb_core);

    // Non-local interface only.
    Quoter_Factory (
        TAO_Stub *objref,
        ::CORBA::Boolean _tao_collocated = false,
        TAO_Abstract_ServantBase *servant = 0,
        TAO_ORB_Core *orb_core = 0);

    virtual ~Quoter_Factory (void);

  private:
    // Private and unimplemented for concrete interfaces.
    Quoter_Factory (const Quoter_Factory &);

    void operator= (const Quoter_Factory &);
  };

  // TAO_IDL - Generated from
  // be/be_interface.cpp:748

#if !defined (_STOCK_QUOTER_FACTORY_FINDER__VAR_OUT_CH_)
#define _STOCK_QUOTER_FACTORY_FINDER__VAR_OUT_CH_

  class Quoter_Factory_Finder;
  typedef Quoter_Factory_Finder *Quoter_Factory_Finder_ptr;

  typedef
    TAO_Objref_Var_T<
        Quoter_Factory_Finder
      >
    Quoter_Factory_Finder_var;

  typedef
    TAO_Objref_Out_T<
        Quoter_Factory_Finder
      >
    Quoter_Factory_Finder_out;

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // be/be_visitor_interface/interface_ch.cpp:40

  class  Quoter_Factory_Finder
    : public virtual ::CosLifeCycle::FactoryFinder

  {
  public:
    friend class TAO::Narrow_Utils<Quoter_Factory_Finder>;

    // TAO_IDL - Generated from
    // be/be_type.cpp:304

    typedef Quoter_Factory_Finder_ptr _ptr_type;
    typedef Quoter_Factory_Finder_var _var_type;
    typedef Quoter_Factory_Finder_out _out_type;

    // The static operations.
    static Quoter_Factory_Finder_ptr _duplicate (Quoter_Factory_Finder_ptr obj);

    static void _tao_release (Quoter_Factory_Finder_ptr obj);

    static Quoter_Factory_Finder_ptr _narrow (::CORBA::Object_ptr obj);
    static Quoter_Factory_Finder_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
    static Quoter_Factory_Finder_ptr _nil (void);

    // TAO_IDL - Generated from
    // be/be_visitor_interface/interface_ch.cpp:137

    virtual ::CORBA::Boolean _is_a (const char *type_id);
    virtual const char* _interface_repository_id (void) const;
    virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);

  protected:
    // Concrete interface only.
    Quoter_Factory_Finder (void);

    // Concrete non-local interface only.
    Quoter_Factory_Finder (
        ::IOP::IOR *ior,
        TAO_ORB_Core *orb_core);

    // Non-local interface only.
    Quoter_Factory_Finder (
        TAO_Stub *objref,
        ::CORBA::Boolean _tao_collocated = false,
        TAO_Abstract_ServantBase *servant = 0,
        TAO_ORB_Core *orb_core = 0);

    virtual ~Quoter_Factory_Finder (void);

  private:
    // Private and unimplemented for concrete interfaces.
    Quoter_Factory_Finder (const Quoter_Factory_Finder &);

    void operator= (const Quoter_Factory_Finder &);
  };

  // TAO_IDL - Generated from
  // be/be_interface.cpp:748

#if !defined (_STOCK_QUOTER_GENERIC_FACTORY__VAR_OUT_CH_)
#define _STOCK_QUOTER_GENERIC_FACTORY__VAR_OUT_CH_

  class Quoter_Generic_Factory;
  typedef Quoter_Generic_Factory *Quoter_Generic_Factory_ptr;

  typedef
    TAO_Objref_Var_T<
        Quoter_Generic_Factory
      >
    Quoter_Generic_Factory_var;

  typedef
    TAO_Objref_Out_T<
        Quoter_Generic_Factory
      >
    Quoter_Generic_Factory_out;

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // be/be_visitor_interface/interface_ch.cpp:40

  class  Quoter_Generic_Factory
    : public virtual ::CosLifeCycle::GenericFactory

  {
  public:
    friend class TAO::Narrow_Utils<Quoter_Generic_Factory>;

    // TAO_IDL - Generated from
    // be/be_type.cpp:304

    typedef Quoter_Generic_Factory_ptr _ptr_type;
    typedef Quoter_Generic_Factory_var _var_type;
    typedef Quoter_Generic_Factory_out _out_type;

    // The static operations.
    static Quoter_Generic_Factory_ptr _duplicate (Quoter_Generic_Factory_ptr obj);

    static void _tao_release (Quoter_Generic_Factory_ptr obj);

    static Quoter_Generic_Factory_ptr _narrow (::CORBA::Object_ptr obj);
    static Quoter_Generic_Factory_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
    static Quoter_Generic_Factory_ptr _nil (void);

    // TAO_IDL - Generated from
    // be/be_visitor_interface/interface_ch.cpp:137

    virtual ::CORBA::Boolean _is_a (const char *type_id);
    virtual const char* _interface_repository_id (void) const;
    virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);

  protected:
    // Concrete interface only.
    Quoter_Generic_Factory (void);

    // Concrete non-local interface only.
    Quoter_Generic_Factory (
        ::IOP::IOR *ior,
        TAO_ORB_Core *orb_core);

    // Non-local interface only.
    Quoter_Generic_Factory (
        TAO_Stub *objref,
        ::CORBA::Boolean _tao_collocated = false,
        TAO_Abstract_ServantBase *servant = 0,
        TAO_ORB_Core *orb_core = 0);

    virtual ~Quoter_Generic_Factory (void);

  private:
    // Private and unimplemented for concrete interfaces.
    Quoter_Generic_Factory (const Quoter_Generic_Factory &);

    void operator= (const Quoter_Generic_Factory &);
  };

  // TAO_IDL - Generated from
  // be/be_interface.cpp:748

#if !defined (_STOCK_QUOTER_LIFE_CYCLE_SERVICE__VAR_OUT_CH_)
#define _STOCK_QUOTER_LIFE_CYCLE_SERVICE__VAR_OUT_CH_

  class Quoter_Life_Cycle_Service;
  typedef Quoter_Life_Cycle_Service *Quoter_Life_Cycle_Service_ptr;

  typedef
    TAO_Objref_Var_T<
        Quoter_Life_Cycle_Service
      >
    Quoter_Life_Cycle_Service_var;

  typedef
    TAO_Objref_Out_T<
        Quoter_Life_Cycle_Service
      >
    Quoter_Life_Cycle_Service_out;

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // be/be_visitor_interface/interface_ch.cpp:40

  class  Quoter_Life_Cycle_Service
    : public virtual ::CosLifeCycle::GenericFactory

  {
  public:
    friend class TAO::Narrow_Utils<Quoter_Life_Cycle_Service>;

    // TAO_IDL - Generated from
    // be/be_type.cpp:304

    typedef Quoter_Life_Cycle_Service_ptr _ptr_type;
    typedef Quoter_Life_Cycle_Service_var _var_type;
    typedef Quoter_Life_Cycle_Service_out _out_type;

    // The static operations.
    static Quoter_Life_Cycle_Service_ptr _duplicate (Quoter_Life_Cycle_Service_ptr obj);

    static void _tao_release (Quoter_Life_Cycle_Service_ptr obj);

    static Quoter_Life_Cycle_Service_ptr _narrow (::CORBA::Object_ptr obj);
    static Quoter_Life_Cycle_Service_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
    static Quoter_Life_Cycle_Service_ptr _nil (void);

    virtual void register_factory (
      const char * name,
      const char * location,
      const char * description,
      ::CORBA::Object_ptr object);

    // TAO_IDL - Generated from
    // be/be_visitor_interface/interface_ch.cpp:137

    virtual ::CORBA::Boolean _is_a (const char *type_id);
    virtual const char* _interface_repository_id (void) const;
    virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);

  protected:
    // Concrete interface only.
    Quoter_Life_Cycle_Service (void);

    // Concrete non-local interface only.
    Quoter_Life_Cycle_Service (
        ::IOP::IOR *ior,
        TAO_ORB_Core *orb_core);

    // Non-local interface only.
    Quoter_Life_Cycle_Service (
        TAO_Stub *objref,
        ::CORBA::Boolean _tao_collocated = false,
        TAO_Abstract_ServantBase *servant = 0,
        TAO_ORB_Core *orb_core = 0);

    virtual ~Quoter_Life_Cycle_Service (void);

  private:
    // Private and unimplemented for concrete interfaces.
    Quoter_Life_Cycle_Service (const Quoter_Life_Cycle_Service &);

    void operator= (const Quoter_Life_Cycle_Service &);
  };

  // TAO_IDL - Generated from
  // be/be_interface.cpp:748

#if !defined (_STOCK_CRITERIA_EVALUATOR__VAR_OUT_CH_)
#define _STOCK_CRITERIA_EVALUATOR__VAR_OUT_CH_

  class Criteria_Evaluator;
  typedef Criteria_Evaluator *Criteria_Evaluator_ptr;

  typedef
    TAO_Objref_Var_T<
        Criteria_Evaluator
      >
    Criteria_Evaluator_var;

  typedef
    TAO_Objref_Out_T<
        Criteria_Evaluator
      >
    Criteria_Evaluator_out;

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // be/be_visitor_interface/interface_ch.cpp:40

  class  Criteria_Evaluator
    : public virtual ::CORBA::Object
  {
  public:
    friend class TAO::Narrow_Utils<Criteria_Evaluator>;

    // TAO_IDL - Generated from
    // be/be_type.cpp:304

    typedef Criteria_Evaluator_ptr _ptr_type;
    typedef Criteria_Evaluator_var _var_type;
    typedef Criteria_Evaluator_out _out_type;

    // The static operations.
    static Criteria_Evaluator_ptr _duplicate (Criteria_Evaluator_ptr obj);

    static void _tao_release (Criteria_Evaluator_ptr obj);

    static Criteria_Evaluator_ptr _narrow (::CORBA::Object_ptr obj);
    static Criteria_Evaluator_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
    static Criteria_Evaluator_ptr _nil (void);

    // TAO_IDL - Generated from
    // be/be_visitor_sequence/sequence_ch.cpp:99

#if !defined (_STOCK_CRITERIA_EVALUATOR_SEQNAMEDVALUEPAIR_CH_)
#define _STOCK_CRITERIA_EVALUATOR_SEQNAMEDVALUEPAIR_CH_

    class SeqNamedValuePair;

    typedef
      ::TAO_VarSeq_Var_T<
          SeqNamedValuePair
        >
      SeqNamedValuePair_var;

    typedef
      ::TAO_Seq_Out_T<
          SeqNamedValuePair
        >
      SeqNamedValuePair_out;

    class  SeqNamedValuePair
      : public
          ::TAO::unbounded_value_sequence<
              CosLifeCycle::NameValuePair
            >
    {
    public:
      SeqNamedValuePair (void);
      SeqNamedValuePair ( ::CORBA::ULong max);
      SeqNamedValuePair (
        ::CORBA::ULong max,
        ::CORBA::ULong length,
        CosLifeCycle::NameValuePair* buffer,
        ::CORBA::Boolean release = false);
      SeqNamedValuePair (const SeqNamedValuePair &);
      virtual ~SeqNamedValuePair (void);


      // TAO_IDL - Generated from
      // be/be_type.cpp:304


      typedef SeqNamedValuePair_var _var_type;
      typedef SeqNamedValuePair_out _out_type;
    };

#endif /* end #if !defined */

    // TAO_IDL - Generated from
    // be/be_visitor_typedef/typedef_ch.cpp:463

    typedef CosLifeCycle::Criteria Criteria;
    typedef CosLifeCycle::Criteria_var Criteria_var;
    typedef CosLifeCycle::Criteria_out Criteria_out;

    // TAO_IDL - Generated from
    // be/be_visitor_exception/exception_ch.cpp:41

    class  NotAvailable : public ::CORBA::UserException
    {
    public:
      ::TAO::String_Manager reason;

      NotAvailable (void);
      NotAvailable (const NotAvailable &);
      ~NotAvailable (void);

      NotAvailable &operator= (const NotAvailable &);

      static NotAvailable *_downcast ( ::CORBA::Exception *);
      static const NotAvailable *_downcast ( ::CORBA::Exception const *);

      static ::CORBA::Exception *_alloc (void);

      virtual ::CORBA::Exception *_tao_duplicate (void) const;

      virtual void _raise (void) const;

      virtual void _tao_encode (TAO_OutputCDR &cdr) const;
      virtual void _tao_decode (TAO_InputCDR &cdr);

      // TAO_IDL - Generated from
      // be/be_visitor_exception/exception_ctor.cpp:51

      NotAvailable (
          const char * _tao_reason);
    };

    virtual ::Stock::Criteria_Evaluator::SeqNamedValuePair * getInitialization (
      void);

    virtual char * getFilter (
      void);

    virtual ::Stock::Criteria_Evaluator::SeqNamedValuePair * getLogicalLocation (
      void);

    virtual char * getPreferences (
      void);

    virtual void setCriteria (
      const ::Stock::Criteria_Evaluator::Criteria & criteria_);

    // TAO_IDL - Generated from
    // be/be_visitor_interface/interface_ch.cpp:137

    virtual ::CORBA::Boolean _is_a (const char *type_id);
    virtual const char* _interface_repository_id (void) const;
    virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);

  protected:
    // Concrete interface only.
    Criteria_Evaluator (void);

    // Concrete non-local interface only.
    Criteria_Evaluator (
        ::IOP::IOR *ior,
        TAO_ORB_Core *orb_core);

    // Non-local interface only.
    Criteria_Evaluator (
        TAO_Stub *objref,
        ::CORBA::Boolean _tao_collocated = false,
        TAO_Abstract_ServantBase *servant = 0,
        TAO_ORB_Core *orb_core = 0);

    virtual ~Criteria_Evaluator (void);

  private:
    // Private and unimplemented for concrete interfaces.
    Criteria_Evaluator (const Criteria_Evaluator &);

    void operator= (const Criteria_Evaluator &);
  };

// TAO_IDL - Generated from
// be/be_visitor_module/module_ch.cpp:64

} // module Stock

// TAO_IDL - Generated from
// be/be_visitor_arg_traits.cpp:66

TAO_BEGIN_VERSIONED_NAMESPACE_DECL


// Arg traits specializations.
namespace TAO
{

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:145

#if !defined (_STOCK_QUOTER__ARG_TRAITS_)
#define _STOCK_QUOTER__ARG_TRAITS_

  template<>
  class  Arg_Traits< ::Stock::Quoter>
    : public
        Object_Arg_Traits_T<
            ::Stock::Quoter_ptr,
            ::Stock::Quoter_var,
            ::Stock::Quoter_out,
            TAO::Objref_Traits<Stock::Quoter>,
            TAO::Any_Insert_Policy_Noop
          >
  {
  };

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:145

#if !defined (_STOCK_QUOTER_FACTORY__ARG_TRAITS_)
#define _STOCK_QUOTER_FACTORY__ARG_TRAITS_

  template<>
  class  Arg_Traits< ::Stock::Quoter_Factory>
    : public
        Object_Arg_Traits_T<
            ::Stock::Quoter_Factory_ptr,
            ::Stock::Quoter_Factory_var,
            ::Stock::Quoter_Factory_out,
            TAO::Objref_Traits<Stock::Quoter_Factory>,
            TAO::Any_Insert_Policy_Noop
          >
  {
  };

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:145

#if !defined (_STOCK_QUOTER_FACTORY_FINDER__ARG_TRAITS_)
#define _STOCK_QUOTER_FACTORY_FINDER__ARG_TRAITS_

  template<>
  class  Arg_Traits< ::Stock::Quoter_Factory_Finder>
    : public
        Object_Arg_Traits_T<
            ::Stock::Quoter_Factory_Finder_ptr,
            ::Stock::Quoter_Factory_Finder_var,
            ::Stock::Quoter_Factory_Finder_out,
            TAO::Objref_Traits<Stock::Quoter_Factory_Finder>,
            TAO::Any_Insert_Policy_Noop
          >
  {
  };

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:145

#if !defined (_STOCK_QUOTER_GENERIC_FACTORY__ARG_TRAITS_)
#define _STOCK_QUOTER_GENERIC_FACTORY__ARG_TRAITS_

  template<>
  class  Arg_Traits< ::Stock::Quoter_Generic_Factory>
    : public
        Object_Arg_Traits_T<
            ::Stock::Quoter_Generic_Factory_ptr,
            ::Stock::Quoter_Generic_Factory_var,
            ::Stock::Quoter_Generic_Factory_out,
            TAO::Objref_Traits<Stock::Quoter_Generic_Factory>,
            TAO::Any_Insert_Policy_Noop
          >
  {
  };

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:145

#if !defined (_STOCK_QUOTER_LIFE_CYCLE_SERVICE__ARG_TRAITS_)
#define _STOCK_QUOTER_LIFE_CYCLE_SERVICE__ARG_TRAITS_

  template<>
  class  Arg_Traits< ::Stock::Quoter_Life_Cycle_Service>
    : public
        Object_Arg_Traits_T<
            ::Stock::Quoter_Life_Cycle_Service_ptr,
            ::Stock::Quoter_Life_Cycle_Service_var,
            ::Stock::Quoter_Life_Cycle_Service_out,
            TAO::Objref_Traits<Stock::Quoter_Life_Cycle_Service>,
            TAO::Any_Insert_Policy_Noop
          >
  {
  };

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:145

#if !defined (_STOCK_CRITERIA_EVALUATOR__ARG_TRAITS_)
#define _STOCK_CRITERIA_EVALUATOR__ARG_TRAITS_

  template<>
  class  Arg_Traits< ::Stock::Criteria_Evaluator>
    : public
        Object_Arg_Traits_T<
            ::Stock::Criteria_Evaluator_ptr,
            ::Stock::Criteria_Evaluator_var,
            ::Stock::Criteria_Evaluator_out,
            TAO::Objref_Traits<Stock::Criteria_Evaluator>,
            TAO::Any_Insert_Policy_Noop
          >
  {
  };

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:683

  template<>
  class Arg_Traits< ::Stock::Criteria_Evaluator::SeqNamedValuePair>
    : public
        Var_Size_Arg_Traits_T<
            ::Stock::Criteria_Evaluator::SeqNamedValuePair,
            TAO::Any_Insert_Policy_Noop
          >
  {
  };
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_traits.cpp:60

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Traits specializations.
namespace TAO
{

#if !defined (_STOCK_QUOTER__TRAITS_)
#define _STOCK_QUOTER__TRAITS_

  template<>
  struct  Objref_Traits< ::Stock::Quoter>
  {
    static ::Stock::Quoter_ptr duplicate (
        ::Stock::Quoter_ptr p);
    static void release (
        ::Stock::Quoter_ptr p);
    static ::Stock::Quoter_ptr nil (void);
    static ::CORBA::Boolean marshal (
        const ::Stock::Quoter_ptr p,
        TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_STOCK_QUOTER_FACTORY__TRAITS_)
#define _STOCK_QUOTER_FACTORY__TRAITS_

  template<>
  struct  Objref_Traits< ::Stock::Quoter_Factory>
  {
    static ::Stock::Quoter_Factory_ptr duplicate (
        ::Stock::Quoter_Factory_ptr p);
    static void release (
        ::Stock::Quoter_Factory_ptr p);
    static ::Stock::Quoter_Factory_ptr nil (void);
    static ::CORBA::Boolean marshal (
        const ::Stock::Quoter_Factory_ptr p,
        TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_STOCK_QUOTER_FACTORY_FINDER__TRAITS_)
#define _STOCK_QUOTER_FACTORY_FINDER__TRAITS_

  template<>
  struct  Objref_Traits< ::Stock::Quoter_Factory_Finder>
  {
    static ::Stock::Quoter_Factory_Finder_ptr duplicate (
        ::Stock::Quoter_Factory_Finder_ptr p);
    static void release (
        ::Stock::Quoter_Factory_Finder_ptr p);
    static ::Stock::Quoter_Factory_Finder_ptr nil (void);
    static ::CORBA::Boolean marshal (
        const ::Stock::Quoter_Factory_Finder_ptr p,
        TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_STOCK_QUOTER_GENERIC_FACTORY__TRAITS_)
#define _STOCK_QUOTER_GENERIC_FACTORY__TRAITS_

  template<>
  struct  Objref_Traits< ::Stock::Quoter_Generic_Factory>
  {
    static ::Stock::Quoter_Generic_Factory_ptr duplicate (
        ::Stock::Quoter_Generic_Factory_ptr p);
    static void release (
        ::Stock::Quoter_Generic_Factory_ptr p);
    static ::Stock::Quoter_Generic_Factory_ptr nil (void);
    static ::CORBA::Boolean marshal (
        const ::Stock::Quoter_Generic_Factory_ptr p,
        TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_STOCK_QUOTER_LIFE_CYCLE_SERVICE__TRAITS_)
#define _STOCK_QUOTER_LIFE_CYCLE_SERVICE__TRAITS_

  template<>
  struct  Objref_Traits< ::Stock::Quoter_Life_Cycle_Service>
  {
    static ::Stock::Quoter_Life_Cycle_Service_ptr duplicate (
        ::Stock::Quoter_Life_Cycle_Service_ptr p);
    static void release (
        ::Stock::Quoter_Life_Cycle_Service_ptr p);
    static ::Stock::Quoter_Life_Cycle_Service_ptr nil (void);
    static ::CORBA::Boolean marshal (
        const ::Stock::Quoter_Life_Cycle_Service_ptr p,
        TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_STOCK_CRITERIA_EVALUATOR__TRAITS_)
#define _STOCK_CRITERIA_EVALUATOR__TRAITS_

  template<>
  struct  Objref_Traits< ::Stock::Criteria_Evaluator>
  {
    static ::Stock::Criteria_Evaluator_ptr duplicate (
        ::Stock::Criteria_Evaluator_ptr p);
    static void release (
        ::Stock::Criteria_Evaluator_ptr p);
    static ::Stock::Criteria_Evaluator_ptr nil (void);
    static ::CORBA::Boolean marshal (
        const ::Stock::Criteria_Evaluator_ptr p,
        TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */
}
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_exception/cdr_op_ch.cpp:37
TAO_BEGIN_VERSIONED_NAMESPACE_DECL



 ::CORBA::Boolean operator<< (TAO_OutputCDR &, const Stock::Invalid_Stock &);
 ::CORBA::Boolean operator>> (TAO_InputCDR &, Stock::Invalid_Stock &);

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_exception/cdr_op_ch.cpp:37
TAO_BEGIN_VERSIONED_NAMESPACE_DECL



 ::CORBA::Boolean operator<< (TAO_OutputCDR &, const Stock::Invalid_Quoter &);
 ::CORBA::Boolean operator>> (TAO_InputCDR &, Stock::Invalid_Quoter &);

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_interface/cdr_op_ch.cpp:41

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 ::CORBA::Boolean operator<< (TAO_OutputCDR &, const Stock::Quoter_ptr );
 ::CORBA::Boolean operator>> (TAO_InputCDR &, Stock::Quoter_ptr &);

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_interface/cdr_op_ch.cpp:41

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 ::CORBA::Boolean operator<< (TAO_OutputCDR &, const Stock::Quoter_Factory_ptr );
 ::CORBA::Boolean operator>> (TAO_InputCDR &, Stock::Quoter_Factory_ptr &);

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_interface/cdr_op_ch.cpp:41

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 ::CORBA::Boolean operator<< (TAO_OutputCDR &, const Stock::Quoter_Factory_Finder_ptr );
 ::CORBA::Boolean operator>> (TAO_InputCDR &, Stock::Quoter_Factory_Finder_ptr &);

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_interface/cdr_op_ch.cpp:41

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 ::CORBA::Boolean operator<< (TAO_OutputCDR &, const Stock::Quoter_Generic_Factory_ptr );
 ::CORBA::Boolean operator>> (TAO_InputCDR &, Stock::Quoter_Generic_Factory_ptr &);

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_interface/cdr_op_ch.cpp:41

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 ::CORBA::Boolean operator<< (TAO_OutputCDR &, const Stock::Quoter_Life_Cycle_Service_ptr );
 ::CORBA::Boolean operator>> (TAO_InputCDR &, Stock::Quoter_Life_Cycle_Service_ptr &);

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_interface/cdr_op_ch.cpp:41

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 ::CORBA::Boolean operator<< (TAO_OutputCDR &, const Stock::Criteria_Evaluator_ptr );
 ::CORBA::Boolean operator>> (TAO_InputCDR &, Stock::Criteria_Evaluator_ptr &);

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_sequence/cdr_op_ch.cpp:65

#if !defined _TAO_CDR_OP_Stock_Criteria_Evaluator_SeqNamedValuePair_H_
#define _TAO_CDR_OP_Stock_Criteria_Evaluator_SeqNamedValuePair_H_
TAO_BEGIN_VERSIONED_NAMESPACE_DECL


 ::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Stock::Criteria_Evaluator::SeqNamedValuePair &_tao_sequence);
 ::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Stock::Criteria_Evaluator::SeqNamedValuePair &_tao_sequence);

TAO_END_VERSIONED_NAMESPACE_DECL



#endif /* _TAO_CDR_OP_Stock_Criteria_Evaluator_SeqNamedValuePair_H_ */

// TAO_IDL - Generated from
// be/be_visitor_exception/cdr_op_ch.cpp:37
TAO_BEGIN_VERSIONED_NAMESPACE_DECL



 ::CORBA::Boolean operator<< (TAO_OutputCDR &, const Stock::Criteria_Evaluator::NotAvailable &);
 ::CORBA::Boolean operator>> (TAO_InputCDR &, Stock::Criteria_Evaluator::NotAvailable &);

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_codegen.cpp:1700
#if defined (__ACE_INLINE__)
#include "QuoterC.inl"
#endif /* defined INLINE */

#include /**/ "ace/post.h"

#endif /* ifndef */

