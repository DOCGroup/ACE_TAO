// -*- C++ -*-
/**
 * Code generated by the The ACE ORB (TAO) IDL Compiler v2.4.1
 * TAO and the TAO IDL Compiler have been developed by:
 *       Center for Distributed Object Computing
 *       Washington University
 *       St. Louis, MO
 *       USA
 *       http://www.cs.wustl.edu/~schmidt/doc-center.html
 * and
 *       Distributed Object Computing Laboratory
 *       University of California at Irvine
 *       Irvine, CA
 *       USA
 * and
 *       Institute for Software Integrated Systems
 *       Vanderbilt University
 *       Nashville, TN
 *       USA
 *       http://www.isis.vanderbilt.edu/
 *
 * Information about TAO is available at:
 *     http://www.dre.vanderbilt.edu/~schmidt/TAO.html
 **/

// TAO_IDL - Generated from
// be/be_codegen.cpp:373


#include "TestC.h"
#include "tao/AnyTypeCode/Null_RefCount_Policy.h"
#include "tao/AnyTypeCode/TypeCode_Constants.h"
#include "tao/AnyTypeCode/Alias_TypeCode_Static.h"
#include "tao/AnyTypeCode/Objref_TypeCode_Static.h"
#include "tao/AnyTypeCode/Value_TypeCode_Static.h"
#include "tao/AnyTypeCode/TypeCode_Value_Field.h"
#include "tao/CDR.h"
#include "tao/Exception_Data.h"
#include "tao/Invocation_Adapter.h"
#include "tao/Object_T.h"
#include "tao/CDR.h"
#include "tao/AnyTypeCode/Any.h"
#include "tao/AnyTypeCode/Any_Impl_T.h"
#include "ace/OS_NS_string.h"
#include "ace/Auto_Ptr.h"

#if !defined (__ACE_INLINE__)
#include "TestC.inl"
#endif /* !defined INLINE */

// TAO_IDL - Generated from
// be/be_visitor_typecode/alias_typecode.cpp:49

static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_Test_Timestamp (
    ::CORBA::tk_alias,
    "IDL:Test/Timestamp:1.0",
    "Timestamp",
    &CORBA::_tc_ulonglong);
  

namespace Test
{
  ::CORBA::TypeCode_ptr const _tc_Timestamp =
    &_tao_tc_Test_Timestamp;
}

// TAO_IDL - Generated from
// be/be_visitor_interface/interface_cs.cpp:48

// Traits specializations for Test::Roundtrip.

Test::Roundtrip_ptr
TAO::Objref_Traits<Test::Roundtrip>::duplicate (
    Test::Roundtrip_ptr p)
{
  return Test::Roundtrip::_duplicate (p);
}

void
TAO::Objref_Traits<Test::Roundtrip>::release (
    Test::Roundtrip_ptr p)
{
  ::CORBA::release (p);
}

Test::Roundtrip_ptr
TAO::Objref_Traits<Test::Roundtrip>::nil (void)
{
  return Test::Roundtrip::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<Test::Roundtrip>::marshal (
    const Test::Roundtrip_ptr p,
    TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:88

void
Test::Roundtrip::start_test (
  void)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  TAO::Arg_Traits< void>::ret_val _tao_retval;

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      1,
      "start_test",
      10,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY,
      TAO::TAO_TWOWAY_INVOCATION
      ,
      TAO::TAO_SYNCHRONOUS_INVOCATION,
      false
    );

  _tao_call.invoke (0, 0);
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:88

void
Test::Roundtrip::end_test (
  void)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  TAO::Arg_Traits< void>::ret_val _tao_retval;

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      1,
      "end_test",
      8,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY,
      TAO::TAO_TWOWAY_INVOCATION
      ,
      TAO::TAO_SYNCHRONOUS_INVOCATION,
      false
    );

  _tao_call.invoke (0, 0);
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:88

::Test::Timestamp
Test::Roundtrip::test_method (
  ::Test::Timestamp send_time)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  TAO::Arg_Traits< ::CORBA::ULongLong>::ret_val _tao_retval;
  TAO::Arg_Traits< ::CORBA::ULongLong>::in_arg_val _tao_send_time (send_time);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_send_time
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      2,
      "test_method",
      11,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY
      
    );

  _tao_call.invoke (0, 0);

  return _tao_retval.retn ();
}

Test::Roundtrip::Roundtrip (void)
{
}

Test::Roundtrip::~Roundtrip (void)
{
}

void
Test::Roundtrip::_tao_any_destructor (void *_tao_void_pointer)
{
  Roundtrip *_tao_tmp_pointer =
    static_cast<Roundtrip *> (_tao_void_pointer);
  ::CORBA::release (_tao_tmp_pointer);
}

Test::Roundtrip_ptr
Test::Roundtrip::_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return
    TAO::Narrow_Utils<Roundtrip>::narrow (
        _tao_objref,
        "IDL:Test/Roundtrip:1.0");
}

Test::Roundtrip_ptr
Test::Roundtrip::_unchecked_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return
    TAO::Narrow_Utils<Roundtrip>::unchecked_narrow (
        _tao_objref);
}

Test::Roundtrip_ptr
Test::Roundtrip::_nil (void)
{
  return 0;
}

Test::Roundtrip_ptr
Test::Roundtrip::_duplicate (Roundtrip_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  return obj;
}

void
Test::Roundtrip::_tao_release (Roundtrip_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
Test::Roundtrip::_is_a (const char *value)
{
  if (
      ACE_OS::strcmp (
          value,
          "IDL:Test/Roundtrip:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        ) == 0
    )
    {
      return true; // success using local knowledge
    }
  else
    {
      return this->::CORBA::Object::_is_a (value);
    }
}

const char* Test::Roundtrip::_interface_repository_id (void) const
{
  return "IDL:Test/Roundtrip:1.0";
}

::CORBA::Boolean
Test::Roundtrip::marshal (TAO_OutputCDR &cdr)
{
  return (cdr << this);
}

// TAO_IDL - Generated from
// be/be_visitor_typecode/objref_typecode.cpp:70

static TAO::TypeCode::Objref<char const *,
                             TAO::Null_RefCount_Policy>
  _tao_tc_Test_Roundtrip (
    ::CORBA::tk_objref,
    "IDL:Test/Roundtrip:1.0",
    "Roundtrip");
  

namespace Test
{
  ::CORBA::TypeCode_ptr const _tc_Roundtrip =
    &_tao_tc_Test_Roundtrip;
}

// TAO_IDL - Generated from
// be/be_visitor_typecode/value_typecode.cpp:65

static TAO::TypeCode::Value_Field<char const *, ::CORBA::TypeCode_ptr const *> const * const _tao_fields_Test_AMH_RoundtripExceptionHolder = 0;
static TAO::TypeCode::Value<char const *,
                     ::CORBA::TypeCode_ptr const *,
                     TAO::TypeCode::Value_Field<char const *, ::CORBA::TypeCode_ptr const *> const *,
                     TAO::Null_RefCount_Policy>
  _tao_tc_Test_AMH_RoundtripExceptionHolder (
    ::CORBA::tk_value,
    "IDL:Test/AMH_RoundtripExceptionHolder:1.0",
    "AMH_RoundtripExceptionHolder",
    ::CORBA::VM_NONE,
    &::CORBA::_tc_null,
    _tao_fields_Test_AMH_RoundtripExceptionHolder,
    0);
  

namespace Test
{
  ::CORBA::TypeCode_ptr const _tc_AMH_RoundtripExceptionHolder =
    &_tao_tc_Test_AMH_RoundtripExceptionHolder;
}

// TAO_IDL - Generated from
// be/be_visitor_valuetype/valuetype_cs.cpp:53

void
TAO::Value_Traits<Test::AMH_RoundtripExceptionHolder>::add_ref (
    Test::AMH_RoundtripExceptionHolder * p)
{
  ::CORBA::add_ref (p);
}

void
TAO::Value_Traits<Test::AMH_RoundtripExceptionHolder>::remove_ref (
    Test::AMH_RoundtripExceptionHolder * p)
{
  ::CORBA::remove_ref (p);
}

void
TAO::Value_Traits<Test::AMH_RoundtripExceptionHolder>::release (
    Test::AMH_RoundtripExceptionHolder * p)
{
  ::CORBA::remove_ref (p);
}

Test::AMH_RoundtripExceptionHolder *
Test::AMH_RoundtripExceptionHolder::_downcast ( ::CORBA::ValueBase *v)
{
  return dynamic_cast< ::Test::AMH_RoundtripExceptionHolder * > (v);
}

const char *
Test::AMH_RoundtripExceptionHolder::_tao_obv_repository_id (void) const
{
  return this->_tao_obv_static_repository_id ();
}

void
Test::AMH_RoundtripExceptionHolder::_tao_obv_truncatable_repo_ids (Repository_Id_List& ids) const
{
  ids.push_back (this->_tao_obv_static_repository_id ());
}

void
Test::AMH_RoundtripExceptionHolder::_tao_any_destructor (void *_tao_void_pointer)
{
  AMH_RoundtripExceptionHolder *_tao_tmp_pointer =
    static_cast<AMH_RoundtripExceptionHolder *> (_tao_void_pointer);
  ::CORBA::remove_ref (_tao_tmp_pointer);
}

// TAO extension - the virtual _type method.
::CORBA::TypeCode_ptr Test::AMH_RoundtripExceptionHolder::_tao_type (void) const
{
  return ::Test::_tc_AMH_RoundtripExceptionHolder;
}

Test::AMH_RoundtripExceptionHolder::~AMH_RoundtripExceptionHolder (void)
{}

::CORBA::ValueBase *
Test::AMH_RoundtripExceptionHolder::_copy_value (void)
{
  ::CORBA::ValueBase *ret_val = 0;
  ACE_NEW_THROW_EX (
    ret_val,
    AMH_RoundtripExceptionHolder (),
    ::CORBA::NO_MEMORY ()
  );
  return ret_val;
}

::CORBA::Boolean
Test::AMH_RoundtripExceptionHolder::_tao_marshal_v (TAO_OutputCDR &) const
{
  return true;
}

::CORBA::Boolean
Test::AMH_RoundtripExceptionHolder::_tao_unmarshal_v (TAO_InputCDR &)
{
  return true;
}

::CORBA::Boolean
Test::AMH_RoundtripExceptionHolder::_tao_match_formal_type (ptrdiff_t ) const
{
  return false;
}

::CORBA::Boolean
Test::AMH_RoundtripExceptionHolder::_tao_marshal__Test_AMH_RoundtripExceptionHolder (TAO_OutputCDR &, TAO_ChunkInfo&) const
{
  return true;
}

::CORBA::Boolean
Test::AMH_RoundtripExceptionHolder::_tao_unmarshal__Test_AMH_RoundtripExceptionHolder (TAO_InputCDR &, TAO_ChunkInfo&)
{
  return true;
}

::CORBA::Boolean
Test::AMH_RoundtripExceptionHolder::_tao_unmarshal (
    TAO_InputCDR &strm,
    AMH_RoundtripExceptionHolder *&new_object
  )
{
  ::CORBA::ValueBase *base = 0;
  ::CORBA::Boolean is_indirected = false;
  ::CORBA::Boolean is_null_object = false;
  ::CORBA::Boolean const retval =
    ::CORBA::ValueBase::_tao_unmarshal_pre (
        strm,
        base,
        AMH_RoundtripExceptionHolder::_tao_obv_static_repository_id (),
        is_null_object,
        is_indirected
      );
  
  ::CORBA::ValueBase_var owner (base);

  if (!retval)
    return false;
  
  if (is_null_object)
    return true;
  
  if (!is_indirected && !base->_tao_unmarshal_v (strm))
    return false;
  
  // Now base must point to the unmarshaled object.
  // Align the pointer to the right subobject.
  new_object = AMH_RoundtripExceptionHolder::_downcast (base);
  if (0 == new_object)
    return false;
  
  if (is_indirected)
    new_object->_add_ref ();
  
  owner._retn ();
  return true;
}

// TAO_IDL - Generated from
// be/be_visitor_valuetype/valuetype_cs.cpp:421

void
Test::AMH_RoundtripExceptionHolder::raise_start_test (void)
{
auto_ptr< ::CORBA::Exception> safety (this->exception);
this->exception->_raise ();
}


// TAO_IDL - Generated from
// be/be_visitor_valuetype/valuetype_cs.cpp:421

void
Test::AMH_RoundtripExceptionHolder::raise_end_test (void)
{
auto_ptr< ::CORBA::Exception> safety (this->exception);
this->exception->_raise ();
}


// TAO_IDL - Generated from
// be/be_visitor_valuetype/valuetype_cs.cpp:421

void
Test::AMH_RoundtripExceptionHolder::raise_test_method (void)
{
auto_ptr< ::CORBA::Exception> safety (this->exception);
this->exception->_raise ();
}


// TAO_IDL - Generated from
// be/be_visitor_interface/interface_cs.cpp:48

// Traits specializations for Test::AMH_RoundtripResponseHandler.

Test::AMH_RoundtripResponseHandler_ptr
TAO::Objref_Traits<Test::AMH_RoundtripResponseHandler>::duplicate (
    Test::AMH_RoundtripResponseHandler_ptr p)
{
  return Test::AMH_RoundtripResponseHandler::_duplicate (p);
}

void
TAO::Objref_Traits<Test::AMH_RoundtripResponseHandler>::release (
    Test::AMH_RoundtripResponseHandler_ptr p)
{
  ::CORBA::release (p);
}

Test::AMH_RoundtripResponseHandler_ptr
TAO::Objref_Traits<Test::AMH_RoundtripResponseHandler>::nil (void)
{
  return Test::AMH_RoundtripResponseHandler::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<Test::AMH_RoundtripResponseHandler>::marshal (
    const Test::AMH_RoundtripResponseHandler_ptr p,
    TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

Test::AMH_RoundtripResponseHandler::AMH_RoundtripResponseHandler (void)
{}

Test::AMH_RoundtripResponseHandler::~AMH_RoundtripResponseHandler (void)
{
}

void
Test::AMH_RoundtripResponseHandler::_tao_any_destructor (void *_tao_void_pointer)
{
  AMH_RoundtripResponseHandler *_tao_tmp_pointer =
    static_cast<AMH_RoundtripResponseHandler *> (_tao_void_pointer);
  ::CORBA::release (_tao_tmp_pointer);
}

Test::AMH_RoundtripResponseHandler_ptr
Test::AMH_RoundtripResponseHandler::_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return AMH_RoundtripResponseHandler::_duplicate (
      dynamic_cast<AMH_RoundtripResponseHandler_ptr> (_tao_objref)
    );
}

Test::AMH_RoundtripResponseHandler_ptr
Test::AMH_RoundtripResponseHandler::_unchecked_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return AMH_RoundtripResponseHandler::_duplicate (
      dynamic_cast<AMH_RoundtripResponseHandler_ptr> (_tao_objref)
    );
}

Test::AMH_RoundtripResponseHandler_ptr
Test::AMH_RoundtripResponseHandler::_nil (void)
{
  return 0;
}

Test::AMH_RoundtripResponseHandler_ptr
Test::AMH_RoundtripResponseHandler::_duplicate (AMH_RoundtripResponseHandler_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  return obj;
}

void
Test::AMH_RoundtripResponseHandler::_tao_release (AMH_RoundtripResponseHandler_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
Test::AMH_RoundtripResponseHandler::_is_a (const char *value)
{
  if (
      ACE_OS::strcmp (
          value,
          "IDL:Test/AMH_RoundtripResponseHandler:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/LocalObject:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        ) == 0
    )
    {
      return true; // success using local knowledge
    }
  else
    {
      return false;
    }
}

const char* Test::AMH_RoundtripResponseHandler::_interface_repository_id (void) const
{
  return "IDL:Test/AMH_RoundtripResponseHandler:1.0";
}

::CORBA::Boolean
Test::AMH_RoundtripResponseHandler::marshal (TAO_OutputCDR & /* cdr */)
{
  return false;
}

// TAO_IDL - Generated from
// be/be_visitor_typecode/objref_typecode.cpp:70

static TAO::TypeCode::Objref<char const *,
                             TAO::Null_RefCount_Policy>
  _tao_tc_Test_AMH_RoundtripResponseHandler (
    ::CORBA::tk_local_interface,
    "IDL:Test/AMH_RoundtripResponseHandler:1.0",
    "AMH_RoundtripResponseHandler");
  

namespace Test
{
  ::CORBA::TypeCode_ptr const _tc_AMH_RoundtripResponseHandler =
    &_tao_tc_Test_AMH_RoundtripResponseHandler;
}

// TAO_IDL - Generated from
// be/be_visitor_valuetype/valuetype_obv_cs.cpp:44

OBV_Test::AMH_RoundtripExceptionHolder::AMH_RoundtripExceptionHolder (void)
: require_truncation_ (false)
{}

OBV_Test::AMH_RoundtripExceptionHolder::~AMH_RoundtripExceptionHolder (void)
{}

::CORBA::Boolean
OBV_Test::AMH_RoundtripExceptionHolder::_tao_marshal__Test_AMH_RoundtripExceptionHolder (TAO_OutputCDR &strm, TAO_ChunkInfo& ci) const
{
  return _tao_marshal_state (strm, ci);
}

::CORBA::Boolean
OBV_Test::AMH_RoundtripExceptionHolder::_tao_unmarshal__Test_AMH_RoundtripExceptionHolder (TAO_InputCDR &strm, TAO_ChunkInfo& ci)
{
  return _tao_unmarshal_state (strm, ci);
}

// TAO_IDL - Generated from
// be/be_visitor_interface/any_op_cs.cpp:38
TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<Test::Roundtrip>::to_object (
      ::CORBA::Object_ptr &_tao_elem) const
  {
    _tao_elem = ::CORBA::Object::_duplicate (this->value_);
    return true;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace Test
{
  

  /// Copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      Roundtrip_ptr _tao_elem)
  {
    Roundtrip_ptr _tao_objptr =
      Roundtrip::_duplicate (_tao_elem);
    _tao_any <<= &_tao_objptr;
  }

  /// Non-copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      Roundtrip_ptr *_tao_elem)
  {
    TAO::Any_Impl_T<Roundtrip>::insert (
        _tao_any,
        Roundtrip::_tao_any_destructor,
        _tc_Roundtrip,
        *_tao_elem);
  }

  ::CORBA::Boolean
  operator>>= (
      const ::CORBA::Any &_tao_any,
      Roundtrip_ptr &_tao_elem)
  {
    return
      TAO::Any_Impl_T<Roundtrip>::extract (
          _tao_any,
          Roundtrip::_tao_any_destructor,
          _tc_Roundtrip,
          _tao_elem);
  }
}

#else

TAO_BEGIN_VERSIONED_NAMESPACE_DECL



/// Copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    Test::Roundtrip_ptr _tao_elem)
{
  Test::Roundtrip_ptr _tao_objptr =
    Test::Roundtrip::_duplicate (_tao_elem);
  _tao_any <<= &_tao_objptr;
}

/// Non-copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    Test::Roundtrip_ptr *_tao_elem)
{
  TAO::Any_Impl_T<Test::Roundtrip>::insert (
      _tao_any,
      Test::Roundtrip::_tao_any_destructor,
      Test::_tc_Roundtrip,
      *_tao_elem);
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    Test::Roundtrip_ptr &_tao_elem)
{
  return
    TAO::Any_Impl_T<Test::Roundtrip>::extract (
        _tao_any,
        Test::Roundtrip::_tao_any_destructor,
        Test::_tc_Roundtrip,
        _tao_elem);
}

TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_valuetype/any_op_cs.cpp:45
TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<Test::AMH_RoundtripExceptionHolder>::to_value (
      ::CORBA::ValueBase *&_tao_elem
    ) const
  {
    ::CORBA::add_ref (this->value_);
    _tao_elem = this->value_;
    return true;
  }
}


TAO_END_VERSIONED_NAMESPACE_DECL



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace Test
{
  // Copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      AMH_RoundtripExceptionHolder *_tao_elem
    )
  {
    #ifdef TAO_VALUETYPE_COPYING_ANY_INSERTION_USES_COPY_VALUE
      AMH_RoundtripExceptionHolder *_tao_copy =
        _tao_elem ?
          AMH_RoundtripExceptionHolder::_downcast (_tao_elem->_copy_value ())
          : 0;
      _tao_any <<= &_tao_copy;
    #else
      ::CORBA::add_ref (_tao_elem);
      _tao_any <<= &_tao_elem;
    #endif
  }

  // Non-copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      AMH_RoundtripExceptionHolder **_tao_elem
    )
  {
    TAO::Any_Impl_T<AMH_RoundtripExceptionHolder>::insert (
        _tao_any,
        AMH_RoundtripExceptionHolder::_tao_any_destructor,
        _tc_AMH_RoundtripExceptionHolder,
        *_tao_elem
      );
  }

  ::CORBA::Boolean
  operator>>= (
      const ::CORBA::Any &_tao_any,
      AMH_RoundtripExceptionHolder *&_tao_elem
    )
  {
    return
      TAO::Any_Impl_T<AMH_RoundtripExceptionHolder>::extract (
          _tao_any,
          AMH_RoundtripExceptionHolder::_tao_any_destructor,
          _tc_AMH_RoundtripExceptionHolder,
          _tao_elem
        );
  }

  
}

#else


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    Test::AMH_RoundtripExceptionHolder *_tao_elem
  )
{
  #ifdef TAO_VALUETYPE_COPYING_ANY_INSERTION_USES_COPY_VALUE
    Test::AMH_RoundtripExceptionHolder *_tao_copy =
      _tao_elem ?
        Test::AMH_RoundtripExceptionHolder::_downcast (_tao_elem->_copy_value ())
        : 0;
    _tao_any <<= &_tao_copy;
  #else
    ::CORBA::add_ref (_tao_elem);
    _tao_any <<= &_tao_elem;
  #endif
}

// Non-copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    Test::AMH_RoundtripExceptionHolder **_tao_elem
  )
{
  TAO::Any_Impl_T<Test::AMH_RoundtripExceptionHolder>::insert (
      _tao_any,
      Test::AMH_RoundtripExceptionHolder::_tao_any_destructor,
      Test::_tc_AMH_RoundtripExceptionHolder,
      *_tao_elem
    );
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    Test::AMH_RoundtripExceptionHolder *&_tao_elem
  )
{
  return
    TAO::Any_Impl_T<Test::AMH_RoundtripExceptionHolder>::extract (
        _tao_any,
        Test::AMH_RoundtripExceptionHolder::_tao_any_destructor,
        Test::_tc_AMH_RoundtripExceptionHolder,
        _tao_elem
      );
}


TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_interface/any_op_cs.cpp:38
TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<Test::AMH_RoundtripResponseHandler>::to_object (
      ::CORBA::Object_ptr &_tao_elem) const
  {
    _tao_elem = ::CORBA::Object::_duplicate (this->value_);
    return true;
  }
}

namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<Test::AMH_RoundtripResponseHandler>::marshal_value (TAO_OutputCDR &)
  {
    return false;
  }

  template<>
  ::CORBA::Boolean
  Any_Impl_T<Test::AMH_RoundtripResponseHandler>::demarshal_value (TAO_InputCDR &)
  {
    return false;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace Test
{
  

  /// Copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      AMH_RoundtripResponseHandler_ptr _tao_elem)
  {
    AMH_RoundtripResponseHandler_ptr _tao_objptr =
      AMH_RoundtripResponseHandler::_duplicate (_tao_elem);
    _tao_any <<= &_tao_objptr;
  }

  /// Non-copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      AMH_RoundtripResponseHandler_ptr *_tao_elem)
  {
    TAO::Any_Impl_T<AMH_RoundtripResponseHandler>::insert (
        _tao_any,
        AMH_RoundtripResponseHandler::_tao_any_destructor,
        _tc_AMH_RoundtripResponseHandler,
        *_tao_elem);
  }

  ::CORBA::Boolean
  operator>>= (
      const ::CORBA::Any &_tao_any,
      AMH_RoundtripResponseHandler_ptr &_tao_elem)
  {
    return
      TAO::Any_Impl_T<AMH_RoundtripResponseHandler>::extract (
          _tao_any,
          AMH_RoundtripResponseHandler::_tao_any_destructor,
          _tc_AMH_RoundtripResponseHandler,
          _tao_elem);
  }
}

#else

TAO_BEGIN_VERSIONED_NAMESPACE_DECL



/// Copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    Test::AMH_RoundtripResponseHandler_ptr _tao_elem)
{
  Test::AMH_RoundtripResponseHandler_ptr _tao_objptr =
    Test::AMH_RoundtripResponseHandler::_duplicate (_tao_elem);
  _tao_any <<= &_tao_objptr;
}

/// Non-copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    Test::AMH_RoundtripResponseHandler_ptr *_tao_elem)
{
  TAO::Any_Impl_T<Test::AMH_RoundtripResponseHandler>::insert (
      _tao_any,
      Test::AMH_RoundtripResponseHandler::_tao_any_destructor,
      Test::_tc_AMH_RoundtripResponseHandler,
      *_tao_elem);
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    Test::AMH_RoundtripResponseHandler_ptr &_tao_elem)
{
  return
    TAO::Any_Impl_T<Test::AMH_RoundtripResponseHandler>::extract (
        _tao_any,
        Test::AMH_RoundtripResponseHandler::_tao_any_destructor,
        Test::_tc_AMH_RoundtripResponseHandler,
        _tao_elem);
}

TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_interface/cdr_op_cs.cpp:51

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Test::Roundtrip_ptr _tao_objref)
{
  ::CORBA::Object_ptr _tao_corba_obj = _tao_objref;
  return (strm << _tao_corba_obj);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Test::Roundtrip_ptr &_tao_objref)
{
  ::CORBA::Object_var obj;

  if (!(strm >> obj.inout ()))
    {
      return false;
    }
  
  typedef ::Test::Roundtrip RHS_SCOPED_NAME;

  // Narrow to the right type.
  _tao_objref =
    TAO::Narrow_Utils<RHS_SCOPED_NAME>::unchecked_narrow (obj.in ());
    
  return true;
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_valuetype.cpp:512

void
CORBA::add_ref (Test::AMH_RoundtripExceptionHolder * vt)
{
  if (vt != 0)
    {
      vt->_add_ref ();
    }
}

void
CORBA::remove_ref (Test::AMH_RoundtripExceptionHolder * vt)
{
  if (vt != 0)
    {
      vt->_remove_ref ();
    }
}

// TAO_IDL - Generated from
// be/be_visitor_valuetype/cdr_op_cs.cpp:60


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean
operator<< (
    TAO_OutputCDR &strm,
    const Test::AMH_RoundtripExceptionHolder *_tao_valuetype
  )
{
  return
    ::CORBA::ValueBase::_tao_marshal (
        strm,
        _tao_valuetype,
        reinterpret_cast<ptrdiff_t> (&Test::AMH_RoundtripExceptionHolder::_downcast)
      );
}

::CORBA::Boolean
operator>> (
    TAO_InputCDR &strm,
    Test::AMH_RoundtripExceptionHolder *&_tao_valuetype
  )
{
  return Test::AMH_RoundtripExceptionHolder::_tao_unmarshal (strm, _tao_valuetype);
}


TAO_END_VERSIONED_NAMESPACE_DECL

// TAO_IDL - Generated from
// be/be_visitor_valuetype/marshal_cs.cpp:33

::CORBA::Boolean
OBV_Test::AMH_RoundtripExceptionHolder::_tao_marshal_state (TAO_OutputCDR &, TAO_ChunkInfo&) const
{
  return true;
}

::CORBA::Boolean
OBV_Test::AMH_RoundtripExceptionHolder::_tao_unmarshal_state (TAO_InputCDR &, TAO_ChunkInfo&)
{
  return true;
}

void
OBV_Test::AMH_RoundtripExceptionHolder::truncation_hook (void)
{
  this->require_truncation_ = true;
}



