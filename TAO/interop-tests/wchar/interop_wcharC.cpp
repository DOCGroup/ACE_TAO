// -*- C++ -*-
/**
 * Code generated by the The ACE ORB (TAO) IDL Compiler v2.4.1
 * TAO and the TAO IDL Compiler have been developed by:
 *       Center for Distributed Object Computing
 *       Washington University
 *       St. Louis, MO
 *       USA
 *       http://www.cs.wustl.edu/~schmidt/doc-center.html
 * and
 *       Distributed Object Computing Laboratory
 *       University of California at Irvine
 *       Irvine, CA
 *       USA
 * and
 *       Institute for Software Integrated Systems
 *       Vanderbilt University
 *       Nashville, TN
 *       USA
 *       http://www.isis.vanderbilt.edu/
 *
 * Information about TAO is available at:
 *     http://www.dre.vanderbilt.edu/~schmidt/TAO.html
 **/

// TAO_IDL - Generated from
// be/be_codegen.cpp:373


#include "interop_wcharC.h"
#include "tao/AnyTypeCode/Null_RefCount_Policy.h"
#include "tao/AnyTypeCode/TypeCode_Constants.h"
#include "tao/AnyTypeCode/Alias_TypeCode_Static.h"
#include "tao/AnyTypeCode/Enum_TypeCode_Static.h"
#include "tao/AnyTypeCode/Objref_TypeCode_Static.h"
#include "tao/AnyTypeCode/Sequence_TypeCode_Static.h"
#include "tao/AnyTypeCode/String_TypeCode_Static.h"
#include "tao/AnyTypeCode/Struct_TypeCode_Static.h"
#include "tao/AnyTypeCode/TypeCode_Struct_Field.h"
#include "tao/AnyTypeCode/TypeCode_Case_T.h"
#include "tao/AnyTypeCode/Union_TypeCode_Static.h"
#include "tao/CDR.h"
#include "tao/Exception_Data.h"
#include "tao/Invocation_Adapter.h"
#include "tao/Object_T.h"
#include "tao/SystemException.h"
#include "tao/CDR.h"
#include "tao/AnyTypeCode/Any.h"
#include "tao/AnyTypeCode/Any_Impl_T.h"
#include "tao/AnyTypeCode/Any_Dual_Impl_T.h"
#include "tao/AnyTypeCode/Any_Array_Impl_T.h"
#include "tao/AnyTypeCode/Any_Basic_Impl_T.h"
#include "ace/OS_NS_string.h"

#if !defined (__ACE_INLINE__)
#include "interop_wcharC.inl"
#endif /* !defined INLINE */

// TAO_IDL - Generated from
// be/be_visitor_array/array_cs.cpp:94

interop::warray_slice *
interop::warray_dup (const interop::warray_slice *_tao_src_array)
{
  interop::warray_slice *_tao_dup_array =
    interop::warray_alloc ();
  
  if (!_tao_dup_array)
    {
      return static_cast <interop::warray_slice *> (0);
    }
  
  interop::warray_copy (_tao_dup_array, _tao_src_array);
  return _tao_dup_array;
}

interop::warray_slice *
interop::warray_alloc (void)
{
  interop::warray_slice *retval = 0;
  ACE_NEW_RETURN (retval, ::CORBA::WChar[10], 0);
  return retval;
}

void
interop::warray_free (
    interop::warray_slice *_tao_slice)
{
  delete [] _tao_slice;
}

void
interop::warray_copy (
    interop::warray_slice * _tao_to,
    const interop::warray_slice *_tao_from)
{
  // Copy each individual element.
  for ( ::CORBA::ULong i0 = 0; i0 < 10; ++i0)
    {
      _tao_to[i0] = _tao_from[i0];
    }
}

// TAO_IDL - Generated from
// be/be_visitor_typecode/alias_typecode.cpp:49



// TAO_IDL - Generated from
// be/be_visitor_typecode/typecode_defn.cpp:298


#ifndef _TAO_TYPECODE_interop_warray_GUARD
#define _TAO_TYPECODE_interop_warray_GUARD

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

namespace TAO
{
  namespace TypeCode
  {
    namespace
    {
      TAO::TypeCode::Sequence< ::CORBA::TypeCode_ptr const *,
                              TAO::Null_RefCount_Policy>
        interop_warray_10 (
          ::CORBA::tk_array,
          &CORBA::_tc_wchar,
          10U);
        
      ::CORBA::TypeCode_ptr const tc_interop_warray =
        &interop_warray_10;
    }
  }
}

TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_TYPECODE_interop_warray_GUARD */
static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_interop_warray (
    ::CORBA::tk_alias,
    "IDL:interop/warray:1.0",
    "warray",
    &TAO::TypeCode::tc_interop_warray);
  

namespace interop
{
  ::CORBA::TypeCode_ptr const _tc_warray =
    &_tao_tc_interop_warray;
}

// TAO_IDL - Generated from
// be/be_visitor_typecode/struct_typecode.cpp:86



// TAO_IDL - Generated from
// be/be_visitor_typecode/typecode_defn.cpp:298

static TAO::TypeCode::Struct_Field<
  char const *,
  ::CORBA::TypeCode_ptr const *> const 
    _tao_fields_interop_wstruct[] =
      {
        { "st_char", &CORBA::_tc_wchar },
        { "st_string", &CORBA::_tc_wstring },
        { "st_array", &interop::_tc_warray },
        { "st_any", &CORBA::_tc_any }
      };
  
static TAO::TypeCode::Struct<
  char const *,
  ::CORBA::TypeCode_ptr const *,
  TAO::TypeCode::Struct_Field<
    char const *,
    ::CORBA::TypeCode_ptr const *> const *,
  TAO::Null_RefCount_Policy>
_tao_tc_interop_wstruct (
  ::CORBA::tk_struct,
  "IDL:interop/wstruct:1.0",
  "wstruct",
  _tao_fields_interop_wstruct,
  4);


namespace interop
{
  ::CORBA::TypeCode_ptr const _tc_wstruct =
    &_tao_tc_interop_wstruct;
}

// TAO_IDL - Generated from
// be/be_visitor_structure/structure_cs.cpp:56

void
interop::wstruct::_tao_any_destructor (
    void *_tao_void_pointer)
{
  wstruct *_tao_tmp_pointer =
    static_cast<wstruct *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

// TAO_IDL - Generated from
// be/be_visitor_sequence/sequence_cs.cpp:70

#if !defined (_INTEROP_WSTRUCTSEQ_CS_)
#define _INTEROP_WSTRUCTSEQ_CS_

interop::wstructseq::wstructseq (void)
{}

interop::wstructseq::wstructseq (
    ::CORBA::ULong max)
  : ::TAO::unbounded_value_sequence<
        wstruct
      > (max)
{}

interop::wstructseq::wstructseq (
    ::CORBA::ULong max,
    ::CORBA::ULong length,
    interop::wstruct * buffer,
    ::CORBA::Boolean release
  )
  : ::TAO::unbounded_value_sequence<
        wstruct
      >
    (max, length, buffer, release)
{}

interop::wstructseq::wstructseq (
    const wstructseq &seq)
  : ::TAO::unbounded_value_sequence<
        wstruct
      > (seq)
{}

interop::wstructseq::~wstructseq (void)
{}

void interop::wstructseq::_tao_any_destructor (
    void * _tao_void_pointer)
{
  wstructseq * _tao_tmp_pointer =
    static_cast<wstructseq *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

#endif /* end #if !defined */

// TAO_IDL - Generated from
// be/be_visitor_typecode/alias_typecode.cpp:49



// TAO_IDL - Generated from
// be/be_visitor_typecode/typecode_defn.cpp:461


#ifndef _TAO_TYPECODE_interop_wstructseq_GUARD
#define _TAO_TYPECODE_interop_wstructseq_GUARD

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

namespace TAO
{
  namespace TypeCode
  {
    namespace
    {
      TAO::TypeCode::Sequence< ::CORBA::TypeCode_ptr const *,
                              TAO::Null_RefCount_Policy>
        interop_wstructseq_0 (
          ::CORBA::tk_sequence,
          &interop::_tc_wstruct,
          0U);
        
      ::CORBA::TypeCode_ptr const tc_interop_wstructseq_0 =
        &interop_wstructseq_0;
    }
  }
}

TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_TYPECODE_interop_wstructseq_GUARD */

static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_interop_wstructseq (
    ::CORBA::tk_alias,
    "IDL:interop/wstructseq:1.0",
    "wstructseq",
    &TAO::TypeCode::tc_interop_wstructseq_0);
  

namespace interop
{
  ::CORBA::TypeCode_ptr const _tc_wstructseq =
    &_tao_tc_interop_wstructseq;
}

// TAO_IDL - Generated from
// be/be_visitor_typecode/enum_typecode.cpp:29
static char const * const _tao_enumerators_interop_wchar_types[] =
  {
    "is_wchar",
    "is_wstring",
    "is_warray"
    
  };

static TAO::TypeCode::Enum<char const *,
                           char const * const *,
                           TAO::Null_RefCount_Policy>
  _tao_tc_interop_wchar_types (
    "IDL:interop/wchar_types:1.0",
    "wchar_types",
    _tao_enumerators_interop_wchar_types,
    3);
  

namespace interop
{
  ::CORBA::TypeCode_ptr const _tc_wchar_types =
    &_tao_tc_interop_wchar_types;
}

// TAO_IDL - Generated from
// be/be_visitor_union/union_cs.cpp:76

interop::wunion::wunion (void)
{
  ACE_OS::memset (&this->u_, 0, sizeof (this->u_));
  this->disc_ = (interop::wchar_types) -1;
}

interop::wunion::wunion (const ::interop::wunion &u)
{
  this->disc_ = u.disc_;
  switch (this->disc_)
  {
    case interop::is_wchar:
    {
      this->u_.u_char_ = u.u_.u_char_;
    }
    break;
    case interop::is_wstring:
    {
      this->u_.u_string_ = ::CORBA::wstring_dup (u.u_.u_string_);
    }
    break;
    case interop::is_warray:
    {
      // Make a deep copy.
      this->u_.u_array_ = 
        interop::warray_dup (u.u_.u_array_);
    }
    break;
    default:
    break;
  }
}

interop::wunion::~wunion (void)
{
  // Finalize.
  this->_reset ();
}

void interop::wunion::_tao_any_destructor (void *_tao_void_pointer)
{
  wunion *tmp =
    static_cast<wunion *> (_tao_void_pointer);
  delete tmp;
}

interop::wunion &
interop::wunion::operator= (const ::interop::wunion &u)
{
  if (&u == this)
    {
      return *this;
    }
  
  this->_reset ();
  this->disc_ = u.disc_;

  switch (this->disc_)
  {
    case interop::is_wchar:
    {
      this->u_.u_char_ = u.u_.u_char_;
    }
    break;
    case interop::is_wstring:
    {
      this->u_.u_string_ = ::CORBA::wstring_dup (u.u_.u_string_);
    }
    break;
    case interop::is_warray:
    {
      // Make a deep copy.
      this->u_.u_array_ = 
        interop::warray_dup (u.u_.u_array_);
    }
    break;
    default:
    break;
  }
  
  return *this;
}

/// Reset method to reset old values of a union.
void interop::wunion::_reset (void)
{
  switch (this->disc_)
  {
    
    case interop::is_wchar:
      
    break;
    
    case interop::is_wstring:
      ::CORBA::wstring_free (this->u_.u_string_);
      this->u_.u_string_ = 0;
      
    break;
    
    case interop::is_warray:
      interop::warray_free (this->u_.u_array_);
      this->u_.u_array_ = 0;
      
    break;
    
    default:
    break;
  }
}

// TAO_IDL - Generated from
// be/be_visitor_typecode/union_typecode.cpp:65



// TAO_IDL - Generated from
// be/be_visitor_typecode/typecode_defn.cpp:298

static TAO::TypeCode::Case_T<interop::wchar_types, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_interop_wunion__0 (interop::is_wchar, "u_char", &CORBA::_tc_wchar);
static TAO::TypeCode::Case_T<interop::wchar_types, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_interop_wunion__1 (interop::is_wstring, "u_string", &CORBA::_tc_wstring);
static TAO::TypeCode::Case_T<interop::wchar_types, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_interop_wunion__2 (interop::is_warray, "u_array", &interop::_tc_warray);

static TAO::TypeCode::Case<char const *, ::CORBA::TypeCode_ptr const *> const * const _tao_cases_interop_wunion[] =
  {
    &_tao_cases_interop_wunion__0,
    &_tao_cases_interop_wunion__1,
    &_tao_cases_interop_wunion__2
  };

static TAO::TypeCode::Union<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::TypeCode::Case<char const *, ::CORBA::TypeCode_ptr const *> const * const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_interop_wunion (
    "IDL:interop/wunion:1.0",
    "wunion",
    &interop::_tc_wchar_types,
    _tao_cases_interop_wunion,
    sizeof (_tao_cases_interop_wunion)/sizeof (_tao_cases_interop_wunion[0]),
    -1);
  

namespace interop
{
  ::CORBA::TypeCode_ptr const _tc_wunion =
    &_tao_tc_interop_wunion;
}

// TAO_IDL - Generated from
// be/be_visitor_interface/interface_cs.cpp:48

// Traits specializations for interop::WChar_Passer.

interop::WChar_Passer_ptr
TAO::Objref_Traits<interop::WChar_Passer>::duplicate (
    interop::WChar_Passer_ptr p)
{
  return interop::WChar_Passer::_duplicate (p);
}

void
TAO::Objref_Traits<interop::WChar_Passer>::release (
    interop::WChar_Passer_ptr p)
{
  ::CORBA::release (p);
}

interop::WChar_Passer_ptr
TAO::Objref_Traits<interop::WChar_Passer>::nil (void)
{
  return interop::WChar_Passer::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<interop::WChar_Passer>::marshal (
    const interop::WChar_Passer_ptr p,
    TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:88

char *
interop::WChar_Passer::orb_name (
  void)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  TAO::Arg_Traits< char *>::ret_val _tao_retval;

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      1,
      "_get_orb_name",
      13,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY,
      TAO::TAO_TWOWAY_INVOCATION
      ,
      TAO::TAO_SYNCHRONOUS_INVOCATION,
      false
    );

  _tao_call.invoke (0, 0);

  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:88

::CORBA::Boolean
interop::WChar_Passer::wchar_to_server (
  ::CORBA::WChar test,
  ::CORBA::Short key)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  TAO::Arg_Traits< ::ACE_InputCDR::to_boolean>::ret_val _tao_retval;
  TAO::Arg_Traits< ::ACE_InputCDR::to_wchar>::in_arg_val _tao_test (test);
  TAO::Arg_Traits< ::CORBA::Short>::in_arg_val _tao_key (key);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_test,
      &_tao_key
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      3,
      "wchar_to_server",
      15,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY
      
    );

  _tao_call.invoke (0, 0);

  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:88

::CORBA::WChar
interop::WChar_Passer::wchar_from_server (
  ::CORBA::Short key)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  TAO::Arg_Traits< ::ACE_InputCDR::to_wchar>::ret_val _tao_retval;
  TAO::Arg_Traits< ::CORBA::Short>::in_arg_val _tao_key (key);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_key
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      2,
      "wchar_from_server",
      17,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY
      
    );

  _tao_call.invoke (0, 0);

  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:88

::CORBA::Boolean
interop::WChar_Passer::wstring_to_server (
  const ::CORBA::WChar * test,
  ::CORBA::Short key)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  TAO::Arg_Traits< ::ACE_InputCDR::to_boolean>::ret_val _tao_retval;
  TAO::Arg_Traits< ::CORBA::WChar *>::in_arg_val _tao_test (test);
  TAO::Arg_Traits< ::CORBA::Short>::in_arg_val _tao_key (key);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_test,
      &_tao_key
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      3,
      "wstring_to_server",
      17,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY
      
    );

  _tao_call.invoke (0, 0);

  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:88

::CORBA::WChar *
interop::WChar_Passer::wstring_from_server (
  ::CORBA::Short key)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  TAO::Arg_Traits< ::CORBA::WChar *>::ret_val _tao_retval;
  TAO::Arg_Traits< ::CORBA::Short>::in_arg_val _tao_key (key);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_key
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      2,
      "wstring_from_server",
      19,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY
      
    );

  _tao_call.invoke (0, 0);

  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:88

::CORBA::Boolean
interop::WChar_Passer::warray_to_server (
  const ::interop::warray test,
  ::CORBA::Short key)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  TAO::Arg_Traits< ::ACE_InputCDR::to_boolean>::ret_val _tao_retval;
  TAO::Arg_Traits< ::interop::warray_tag>::in_arg_val _tao_test (test);
  TAO::Arg_Traits< ::CORBA::Short>::in_arg_val _tao_key (key);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_test,
      &_tao_key
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      3,
      "warray_to_server",
      16,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY
      
    );

  _tao_call.invoke (0, 0);

  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:88

::interop::warray_slice *
interop::WChar_Passer::warray_from_server (
  ::CORBA::Short key)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  TAO::Arg_Traits< ::interop::warray_tag>::ret_val _tao_retval;
  TAO::Arg_Traits< ::CORBA::Short>::in_arg_val _tao_key (key);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_key
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      2,
      "warray_from_server",
      18,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY
      
    );

  _tao_call.invoke (0, 0);

  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:88

::CORBA::Boolean
interop::WChar_Passer::wstruct_to_server (
  const ::interop::wstruct & test,
  ::CORBA::Short key)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  TAO::Arg_Traits< ::ACE_InputCDR::to_boolean>::ret_val _tao_retval;
  TAO::Arg_Traits< ::interop::wstruct>::in_arg_val _tao_test (test);
  TAO::Arg_Traits< ::CORBA::Short>::in_arg_val _tao_key (key);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_test,
      &_tao_key
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      3,
      "wstruct_to_server",
      17,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY
      
    );

  _tao_call.invoke (0, 0);

  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:88

::interop::wstruct *
interop::WChar_Passer::wstruct_from_server (
  ::CORBA::Short key)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  TAO::Arg_Traits< ::interop::wstruct>::ret_val _tao_retval;
  TAO::Arg_Traits< ::CORBA::Short>::in_arg_val _tao_key (key);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_key
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      2,
      "wstruct_from_server",
      19,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY
      
    );

  _tao_call.invoke (0, 0);

  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:88

::CORBA::Boolean
interop::WChar_Passer::wstructseq_to_server (
  const ::interop::wstructseq & test,
  ::CORBA::Short key)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  TAO::Arg_Traits< ::ACE_InputCDR::to_boolean>::ret_val _tao_retval;
  TAO::Arg_Traits< ::interop::wstructseq>::in_arg_val _tao_test (test);
  TAO::Arg_Traits< ::CORBA::Short>::in_arg_val _tao_key (key);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_test,
      &_tao_key
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      3,
      "wstructseq_to_server",
      20,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY
      
    );

  _tao_call.invoke (0, 0);

  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:88

::interop::wstructseq *
interop::WChar_Passer::wstructseq_from_server (
  ::CORBA::Short key)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  TAO::Arg_Traits< ::interop::wstructseq>::ret_val _tao_retval;
  TAO::Arg_Traits< ::CORBA::Short>::in_arg_val _tao_key (key);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_key
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      2,
      "wstructseq_from_server",
      22,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY
      
    );

  _tao_call.invoke (0, 0);

  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:88

::CORBA::Boolean
interop::WChar_Passer::wunion_to_server (
  const ::interop::wunion & test,
  ::CORBA::Short key)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  TAO::Arg_Traits< ::ACE_InputCDR::to_boolean>::ret_val _tao_retval;
  TAO::Arg_Traits< ::interop::wunion>::in_arg_val _tao_test (test);
  TAO::Arg_Traits< ::CORBA::Short>::in_arg_val _tao_key (key);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_test,
      &_tao_key
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      3,
      "wunion_to_server",
      16,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY
      
    );

  _tao_call.invoke (0, 0);

  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:88

::interop::wunion *
interop::WChar_Passer::wunion_from_server (
  ::CORBA::Short key,
  ::interop::wchar_types type)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  TAO::Arg_Traits< ::interop::wunion>::ret_val _tao_retval;
  TAO::Arg_Traits< ::CORBA::Short>::in_arg_val _tao_key (key);
  TAO::Arg_Traits< ::interop::wchar_types>::in_arg_val _tao_type (type);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_key,
      &_tao_type
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      3,
      "wunion_from_server",
      18,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY
      
    );

  _tao_call.invoke (0, 0);

  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:88

::CORBA::Boolean
interop::WChar_Passer::any_to_server (
  const ::CORBA::Any & test,
  ::CORBA::Short key)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  TAO::Arg_Traits< ::ACE_InputCDR::to_boolean>::ret_val _tao_retval;
  TAO::Arg_Traits< ::CORBA::Any>::in_arg_val _tao_test (test);
  TAO::Arg_Traits< ::CORBA::Short>::in_arg_val _tao_key (key);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_test,
      &_tao_key
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      3,
      "any_to_server",
      13,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY
      
    );

  _tao_call.invoke (0, 0);

  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:88

::CORBA::Any *
interop::WChar_Passer::any_from_server (
  ::CORBA::Short key,
  ::interop::wchar_types type)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  TAO::Arg_Traits< ::CORBA::Any>::ret_val _tao_retval;
  TAO::Arg_Traits< ::CORBA::Short>::in_arg_val _tao_key (key);
  TAO::Arg_Traits< ::interop::wchar_types>::in_arg_val _tao_type (type);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_key,
      &_tao_type
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      3,
      "any_from_server",
      15,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY
      
    );

  _tao_call.invoke (0, 0);

  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:88

::CORBA::Any *
interop::WChar_Passer::any_echo (
  const ::CORBA::Any & test)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  TAO::Arg_Traits< ::CORBA::Any>::ret_val _tao_retval;
  TAO::Arg_Traits< ::CORBA::Any>::in_arg_val _tao_test (test);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_test
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      2,
      "any_echo",
      8,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY
      
    );

  _tao_call.invoke (0, 0);

  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// be/be_visitor_exception/exception_ctor.cpp:51

interop::WChar_Passer::WStringException::WStringException (
    const ::CORBA::WChar * _tao_why,
    ::CORBA::WChar _tao_whynot)
  : ::CORBA::UserException (
        "IDL:interop/WChar_Passer/WStringException:1.0",
        "WStringException"
      )
{
  this->why = ::CORBA::wstring_dup (_tao_why);
  this->whynot = _tao_whynot;
}



// TAO_IDL - Generated from
// be/be_visitor_exception/exception_cs.cpp:98

interop::WChar_Passer::WStringException::WStringException (void)
  : ::CORBA::UserException (
        "IDL:interop/WChar_Passer/WStringException:1.0",
        "WStringException"
      )
{
}

interop::WChar_Passer::WStringException::~WStringException (void)
{
}

interop::WChar_Passer::WStringException::WStringException (const ::interop::WChar_Passer::WStringException &_tao_excp)
  : ::CORBA::UserException (
        _tao_excp._rep_id (),
        _tao_excp._name ()
      )
{
  this->why = ::CORBA::wstring_dup (_tao_excp.why.in ());
  this->whynot = _tao_excp.whynot;
}

interop::WChar_Passer::WStringException&
interop::WChar_Passer::WStringException::operator= (const ::interop::WChar_Passer::WStringException &_tao_excp)
{
  this->::CORBA::UserException::operator= (_tao_excp);
  this->why = ::CORBA::wstring_dup (_tao_excp.why.in ());
  this->whynot = _tao_excp.whynot;
  return *this;
}

void interop::WChar_Passer::WStringException::_tao_any_destructor (void *_tao_void_pointer)
{
  WStringException *_tao_tmp_pointer =
    static_cast<WStringException *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

interop::WChar_Passer::WStringException *
interop::WChar_Passer::WStringException::_downcast ( ::CORBA::Exception *_tao_excp)
{
  return dynamic_cast<WStringException *> (_tao_excp);
}

const interop::WChar_Passer::WStringException *
interop::WChar_Passer::WStringException::_downcast ( ::CORBA::Exception const *_tao_excp)
{
  return dynamic_cast<const WStringException *> (_tao_excp);
}

::CORBA::Exception *interop::WChar_Passer::WStringException::_alloc (void)
{
  ::CORBA::Exception *retval = 0;
  ACE_NEW_RETURN (retval, ::interop::WChar_Passer::WStringException, 0);
  return retval;
}

::CORBA::Exception *
interop::WChar_Passer::WStringException::_tao_duplicate (void) const
{
  ::CORBA::Exception *result = 0;
  ACE_NEW_RETURN (
      result,
      ::interop::WChar_Passer::WStringException (*this),
      0
    );
  return result;
}

void interop::WChar_Passer::WStringException::_raise (void) const
{
  throw *this;
}

void interop::WChar_Passer::WStringException::_tao_encode (TAO_OutputCDR &cdr) const
{
  if (!(cdr << *this))
    {
      throw ::CORBA::MARSHAL ();
    }
}

void interop::WChar_Passer::WStringException::_tao_decode (TAO_InputCDR &cdr)
{
  if (!(cdr >> *this))
    {
      throw ::CORBA::MARSHAL ();
    }
}

// TAO extension - the virtual _type method.
::CORBA::TypeCode_ptr interop::WChar_Passer::WStringException::_tao_type (void) const
{
  return ::interop::WChar_Passer::_tc_WStringException;
}

// TAO_IDL - Generated from
// be/be_visitor_typecode/struct_typecode.cpp:86

static TAO::TypeCode::Struct_Field<
  char const *,
  ::CORBA::TypeCode_ptr const *> const 
    _tao_fields_interop_WChar_Passer_WStringException[] =
      {
        { "why", &CORBA::_tc_wstring },
        { "whynot", &CORBA::_tc_wchar }
      };
  
static TAO::TypeCode::Struct<
  char const *,
  ::CORBA::TypeCode_ptr const *,
  TAO::TypeCode::Struct_Field<
    char const *,
    ::CORBA::TypeCode_ptr const *> const *,
  TAO::Null_RefCount_Policy>
_tao_tc_interop_WChar_Passer_WStringException (
  ::CORBA::tk_except,
  "IDL:interop/WChar_Passer/WStringException:1.0",
  "WStringException",
  _tao_fields_interop_WChar_Passer_WStringException,
  2);

::CORBA::TypeCode_ptr const interop::WChar_Passer::_tc_WStringException =
  &_tao_tc_interop_WChar_Passer_WStringException;

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:88

void
interop::WChar_Passer::exception_test (
  ::CORBA::Short key)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  TAO::Arg_Traits< void>::ret_val _tao_retval;
  TAO::Arg_Traits< ::CORBA::Short>::in_arg_val _tao_key (key);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_key
    };

  static TAO::Exception_Data
  _tao_interop_WChar_Passer_exception_test_exceptiondata [] = 
    {
      {
        "IDL:interop/WChar_Passer/WStringException:1.0",
        interop::WChar_Passer::WStringException::_alloc
#if TAO_HAS_INTERCEPTORS == 1
        , interop::WChar_Passer::_tc_WStringException
#endif /* TAO_HAS_INTERCEPTORS */
      }
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      2,
      "exception_test",
      14,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY
      
    );

  _tao_call.invoke (
      _tao_interop_WChar_Passer_exception_test_exceptiondata,
      1
    );
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:88

void
interop::WChar_Passer::shutdown (
  void)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  TAO::Arg_Traits< void>::ret_val _tao_retval;

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      1,
      "shutdown",
      8,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY,
      TAO::TAO_ONEWAY_INVOCATION,
      TAO::TAO_SYNCHRONOUS_INVOCATION,
      false
    );

  _tao_call.invoke (0, 0);
}

interop::WChar_Passer::WChar_Passer (void)
{
}

interop::WChar_Passer::~WChar_Passer (void)
{
}

void
interop::WChar_Passer::_tao_any_destructor (void *_tao_void_pointer)
{
  WChar_Passer *_tao_tmp_pointer =
    static_cast<WChar_Passer *> (_tao_void_pointer);
  ::CORBA::release (_tao_tmp_pointer);
}

interop::WChar_Passer_ptr
interop::WChar_Passer::_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return
    TAO::Narrow_Utils<WChar_Passer>::narrow (
        _tao_objref,
        "IDL:interop/WChar_Passer:1.0");
}

interop::WChar_Passer_ptr
interop::WChar_Passer::_unchecked_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return
    TAO::Narrow_Utils<WChar_Passer>::unchecked_narrow (
        _tao_objref);
}

interop::WChar_Passer_ptr
interop::WChar_Passer::_nil (void)
{
  return 0;
}

interop::WChar_Passer_ptr
interop::WChar_Passer::_duplicate (WChar_Passer_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  return obj;
}

void
interop::WChar_Passer::_tao_release (WChar_Passer_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
interop::WChar_Passer::_is_a (const char *value)
{
  if (
      ACE_OS::strcmp (
          value,
          "IDL:interop/WChar_Passer:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        ) == 0
    )
    {
      return true; // success using local knowledge
    }
  else
    {
      return this->::CORBA::Object::_is_a (value);
    }
}

const char* interop::WChar_Passer::_interface_repository_id (void) const
{
  return "IDL:interop/WChar_Passer:1.0";
}

::CORBA::Boolean
interop::WChar_Passer::marshal (TAO_OutputCDR &cdr)
{
  return (cdr << this);
}

// TAO_IDL - Generated from
// be/be_visitor_typecode/objref_typecode.cpp:70

static TAO::TypeCode::Objref<char const *,
                             TAO::Null_RefCount_Policy>
  _tao_tc_interop_WChar_Passer (
    ::CORBA::tk_objref,
    "IDL:interop/WChar_Passer:1.0",
    "WChar_Passer");
  

namespace interop
{
  ::CORBA::TypeCode_ptr const _tc_WChar_Passer =
    &_tao_tc_interop_WChar_Passer;
}

// TAO_IDL - Generated from
// be/be_visitor_array/any_op_cs.cpp:37


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

void operator<<= (
    ::CORBA::Any &_tao_any,
    const interop::warray_forany &_tao_elem
  )
{
  TAO::Any_Array_Impl_T<
      interop::warray_slice,
      interop::warray_forany
    >::insert (
        _tao_any,
        interop::warray_forany::_tao_any_destructor,
        interop::_tc_warray,
        _tao_elem.nocopy ()
          ? _tao_elem.ptr ()
          : interop::warray_dup (_tao_elem.in ())
      );
}

::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    interop::warray_forany &_tao_elem
  )
{
  return
    TAO::Any_Array_Impl_T<
        interop::warray_slice,
        interop::warray_forany
      >::extract (
          _tao_any,
          interop::warray_forany::_tao_any_destructor,
          interop::_tc_warray,
          _tao_elem.out ()
        );
}
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_structure/any_op_cs.cpp:43



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace interop
{
  /// Copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      const ::interop::wstruct &_tao_elem)
  {
    TAO::Any_Dual_Impl_T< ::interop::wstruct>::insert_copy (
        _tao_any,
        ::interop::wstruct::_tao_any_destructor,
        ::interop::_tc_wstruct,
        _tao_elem);
}

/// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any, ::
    interop::wstruct *_tao_elem)
{
  TAO::Any_Dual_Impl_T< ::interop::wstruct>::insert (
      _tao_any,
      ::interop::wstruct::_tao_any_destructor,
      ::interop::_tc_wstruct,
      _tao_elem);
}

/// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    ::interop::wstruct *&_tao_elem)
{
  return _tao_any >>= const_cast<
      const ::interop::wstruct *&> (
      _tao_elem);
}

/// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const ::interop::wstruct *&_tao_elem)
{
  return
    TAO::Any_Dual_Impl_T< ::interop::wstruct>::extract (
        _tao_any,
        ::interop::wstruct::_tao_any_destructor,
        ::interop::_tc_wstruct,
        _tao_elem
      );
}
}

#else

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

/// Copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  const interop::wstruct &_tao_elem)
{
  TAO::Any_Dual_Impl_T<interop::wstruct>::insert_copy (
    _tao_any,
    interop::wstruct::_tao_any_destructor,
    interop::_tc_wstruct,
    _tao_elem);
}

/// Non-copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  interop::wstruct *_tao_elem)
{
  TAO::Any_Dual_Impl_T<interop::wstruct>::insert (
    _tao_any,
    interop::wstruct::_tao_any_destructor,
    interop::_tc_wstruct,
    _tao_elem);
}

/// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
  const ::CORBA::Any &_tao_any,
  interop::wstruct *&_tao_elem)
{
  return _tao_any >>= const_cast<
      const interop::wstruct *&> (
      _tao_elem);
}

/// Extraction to const pointer.
::CORBA::Boolean operator>>= (
  const ::CORBA::Any &_tao_any,
  const interop::wstruct *&_tao_elem)
{
  return
    TAO::Any_Dual_Impl_T<interop::wstruct>::extract (
      _tao_any,
      interop::wstruct::_tao_any_destructor,
      interop::_tc_wstruct,
      _tao_elem);
}
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_sequence/any_op_cs.cpp:45


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


TAO_END_VERSIONED_NAMESPACE_DECL



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace interop
{
  
  // Copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      const ::interop::wstructseq &_tao_elem
    )
  {
    TAO::Any_Dual_Impl_T< ::interop::wstructseq>::insert_copy (
        _tao_any,
        ::interop::wstructseq::_tao_any_destructor,
        ::interop::_tc_wstructseq,
        _tao_elem
      );
}

// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    ::interop::wstructseq *_tao_elem)
{
  TAO::Any_Dual_Impl_T< ::interop::wstructseq>::insert (
      _tao_any,
      ::interop::wstructseq::_tao_any_destructor,
      ::interop::_tc_wstructseq,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    ::interop::wstructseq *&_tao_elem)
{
  return _tao_any >>= const_cast<
      const ::interop::wstructseq *&> (
      _tao_elem
    );
}

// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const ::interop::wstructseq *&_tao_elem)
{
  return
    TAO::Any_Dual_Impl_T< ::interop::wstructseq>::extract (
        _tao_any,
        ::interop::wstructseq::_tao_any_destructor,
        ::interop::_tc_wstructseq,
        _tao_elem
      );
}
}

#else


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


// Copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    const interop::wstructseq &_tao_elem)
{
  TAO::Any_Dual_Impl_T<interop::wstructseq>::insert_copy (
      _tao_any,
      interop::wstructseq::_tao_any_destructor,
      interop::_tc_wstructseq,
      _tao_elem
    );
}

// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    interop::wstructseq *_tao_elem)
{
  TAO::Any_Dual_Impl_T<interop::wstructseq>::insert (
      _tao_any,
      interop::wstructseq::_tao_any_destructor,
      interop::_tc_wstructseq,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    interop::wstructseq *&_tao_elem)
{
  return _tao_any >>= const_cast<
      const interop::wstructseq *&> (
      _tao_elem
    );
}

// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const interop::wstructseq *&_tao_elem)
{
  return
    TAO::Any_Dual_Impl_T<interop::wstructseq>::extract (
        _tao_any,
        interop::wstructseq::_tao_any_destructor,
        interop::_tc_wstructseq,
        _tao_elem);
}
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_enum/any_op_cs.cpp:35

TAO_BEGIN_VERSIONED_NAMESPACE_DECL


TAO_END_VERSIONED_NAMESPACE_DECL



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace interop
{
  void operator<<= (
      ::CORBA::Any &_tao_any,
      ::interop::wchar_types _tao_elem
    )
  {
    TAO::Any_Basic_Impl_T< ::interop::wchar_types>::insert (
        _tao_any,
        ::interop::_tc_wchar_types,
        _tao_elem
      );
  }

  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      ::interop::wchar_types &_tao_elem
    )
  {
    return
      TAO::Any_Basic_Impl_T< ::interop::wchar_types>::extract (
          _tao_any,
          ::interop::_tc_wchar_types,
          _tao_elem 
        );
  }
}

#else

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

void operator<<= (
    ::CORBA::Any &_tao_any,
    interop::wchar_types _tao_elem
  )
{
  TAO::Any_Basic_Impl_T<interop::wchar_types>::insert (
      _tao_any,
      interop::_tc_wchar_types,
      _tao_elem
    );
}

::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    interop::wchar_types &_tao_elem
  )
{
  return
    TAO::Any_Basic_Impl_T<interop::wchar_types>::extract (
        _tao_any,
        interop::_tc_wchar_types,
        _tao_elem 
      );
}
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_union/any_op_cs.cpp:37


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


TAO_END_VERSIONED_NAMESPACE_DECL



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace interop
{
  // Copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      const ::interop::wunion &_tao_elem
    )
  {
    TAO::Any_Dual_Impl_T< ::interop::wunion>::insert_copy (
        _tao_any,
        ::interop::wunion::_tao_any_destructor,
        ::interop::_tc_wunion,
        _tao_elem
      );
}

// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    ::interop::wunion *_tao_elem
  )
{
  TAO::Any_Dual_Impl_T< ::interop::wunion>::insert (
      _tao_any,
      ::interop::wunion::_tao_any_destructor,
      ::interop::_tc_wunion,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    ::interop::wunion *&_tao_elem
  )
{
  return _tao_any >>= const_cast<
      const ::interop::wunion *&> (
      _tao_elem
    );
}

// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const ::interop::wunion *&_tao_elem
  )
{
  return
    TAO::Any_Dual_Impl_T< ::interop::wunion>::extract (
        _tao_any,
        ::interop::wunion::_tao_any_destructor,
        ::interop::_tc_wunion,
        _tao_elem
      );
}
}

#else

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    const interop::wunion &_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<interop::wunion>::insert_copy (
      _tao_any,
      interop::wunion::_tao_any_destructor,
      interop::_tc_wunion,
      _tao_elem
    );
}

// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    interop::wunion *_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<interop::wunion>::insert (
      _tao_any,
      interop::wunion::_tao_any_destructor,
      interop::_tc_wunion,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    interop::wunion *&_tao_elem
  )
{
  return _tao_any >>= const_cast<
      const interop::wunion *&> (
      _tao_elem
    );
}

// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const interop::wunion *&_tao_elem
  )
{
  return
    TAO::Any_Dual_Impl_T<interop::wunion>::extract (
        _tao_any,
        interop::wunion::_tao_any_destructor,
        interop::_tc_wunion,
        _tao_elem
      );
}
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_interface/any_op_cs.cpp:38
TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<interop::WChar_Passer>::to_object (
      ::CORBA::Object_ptr &_tao_elem) const
  {
    _tao_elem = ::CORBA::Object::_duplicate (this->value_);
    return true;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace interop
{
  

  /// Copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      WChar_Passer_ptr _tao_elem)
  {
    WChar_Passer_ptr _tao_objptr =
      WChar_Passer::_duplicate (_tao_elem);
    _tao_any <<= &_tao_objptr;
  }

  /// Non-copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      WChar_Passer_ptr *_tao_elem)
  {
    TAO::Any_Impl_T<WChar_Passer>::insert (
        _tao_any,
        WChar_Passer::_tao_any_destructor,
        _tc_WChar_Passer,
        *_tao_elem);
  }

  ::CORBA::Boolean
  operator>>= (
      const ::CORBA::Any &_tao_any,
      WChar_Passer_ptr &_tao_elem)
  {
    return
      TAO::Any_Impl_T<WChar_Passer>::extract (
          _tao_any,
          WChar_Passer::_tao_any_destructor,
          _tc_WChar_Passer,
          _tao_elem);
  }
}

#else

TAO_BEGIN_VERSIONED_NAMESPACE_DECL



/// Copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    interop::WChar_Passer_ptr _tao_elem)
{
  interop::WChar_Passer_ptr _tao_objptr =
    interop::WChar_Passer::_duplicate (_tao_elem);
  _tao_any <<= &_tao_objptr;
}

/// Non-copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    interop::WChar_Passer_ptr *_tao_elem)
{
  TAO::Any_Impl_T<interop::WChar_Passer>::insert (
      _tao_any,
      interop::WChar_Passer::_tao_any_destructor,
      interop::_tc_WChar_Passer,
      *_tao_elem);
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    interop::WChar_Passer_ptr &_tao_elem)
{
  return
    TAO::Any_Impl_T<interop::WChar_Passer>::extract (
        _tao_any,
        interop::WChar_Passer::_tao_any_destructor,
        interop::_tc_WChar_Passer,
        _tao_elem);
}

TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_exception/any_op_cs.cpp:38
TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Dual_Impl_T<interop::WChar_Passer::WStringException>::demarshal_value (TAO_InputCDR & cdr)
  {
    ::CORBA::String_var id;

    if (!(cdr >> id.out ()))
      {
        return false;
      }
    
    try
      {
        this->value_->_tao_decode (cdr);
      }
    catch (const ::CORBA::Exception &)
      {
        return false;
      }

    return true;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace interop
{
  

  // Copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      const ::interop::WChar_Passer::WStringException &_tao_elem)
  {
    TAO::Any_Dual_Impl_T< ::interop::WChar_Passer::WStringException>::insert_copy (
        _tao_any,
        ::interop::WChar_Passer::WStringException::_tao_any_destructor,
        ::interop::WChar_Passer::_tc_WStringException,
        _tao_elem);
  }

  // Non-copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      ::interop::WChar_Passer::WStringException *_tao_elem)
  {
    TAO::Any_Dual_Impl_T< ::interop::WChar_Passer::WStringException>::insert (
        _tao_any,
        ::interop::WChar_Passer::WStringException::_tao_any_destructor,
        ::interop::WChar_Passer::_tc_WStringException,
        _tao_elem);
  }

  // Extraction to non-const pointer (deprecated).
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      ::interop::WChar_Passer::WStringException *&_tao_elem)
  {
    return _tao_any >>= const_cast<
        const ::interop::WChar_Passer::WStringException *&> (
        _tao_elem);
  }

  // Extraction to const pointer.
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      const ::interop::WChar_Passer::WStringException *&_tao_elem)
  {
    return
      TAO::Any_Dual_Impl_T< ::interop::WChar_Passer::WStringException>::extract (
          _tao_any,
          ::interop::WChar_Passer::WStringException::_tao_any_destructor,
          ::interop::WChar_Passer::_tc_WStringException,
          _tao_elem);
  }
}

#else

TAO_BEGIN_VERSIONED_NAMESPACE_DECL



// Copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    const interop::WChar_Passer::WStringException &_tao_elem)
{
  TAO::Any_Dual_Impl_T<interop::WChar_Passer::WStringException>::insert_copy (
      _tao_any,
      interop::WChar_Passer::WStringException::_tao_any_destructor,
      interop::WChar_Passer::_tc_WStringException,
      _tao_elem
    );
}

// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    interop::WChar_Passer::WStringException *_tao_elem)
{
  TAO::Any_Dual_Impl_T<interop::WChar_Passer::WStringException>::insert (
      _tao_any,
      interop::WChar_Passer::WStringException::_tao_any_destructor,
      interop::WChar_Passer::_tc_WStringException,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    interop::WChar_Passer::WStringException *&_tao_elem)
{
  return _tao_any >>= const_cast<
      const interop::WChar_Passer::WStringException *&> (
      _tao_elem);
}

// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const interop::WChar_Passer::WStringException *&_tao_elem
  )
{
  return
    TAO::Any_Dual_Impl_T<interop::WChar_Passer::WStringException>::extract (
        _tao_any,
        interop::WChar_Passer::WStringException::_tao_any_destructor,
        interop::WChar_Passer::_tc_WStringException,
        _tao_elem);
}
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_array/cdr_op_cs.cpp:163


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const interop::warray_forany &_tao_array)
{
  return
    strm.write_wchar_array (
        reinterpret_cast <const ACE_CDR::WChar *> (_tao_array.in ()),
        10);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    interop::warray_forany &_tao_array)
{
  return
    strm.read_wchar_array (
        reinterpret_cast <ACE_CDR::WChar *> (_tao_array.out ()),
        10);
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_structure/cdr_op_cs.cpp:49

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const interop::wstruct &_tao_aggregate)
{
  interop::warray_forany _tao_aggregate_st_array
      #if defined __IBMCPP__ && __IBMCPP__ <= 800
      ((interop::warray_slice*) (
      #else
      (const_cast<
          interop::warray_slice*> (
      #endif
          _tao_aggregate.st_array
        )
    );
  return
    (strm << ::ACE_OutputCDR::from_wchar (_tao_aggregate.st_char)) &&
    (strm << _tao_aggregate.st_string.in ()) &&
    (strm << _tao_aggregate_st_array) &&
    (strm << _tao_aggregate.st_any);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    interop::wstruct &_tao_aggregate)
{
  interop::warray_forany _tao_aggregate_st_array
      #if defined __IBMCPP__ && __IBMCPP__ <= 800
      ((interop::warray_slice*) (
      #else
      (const_cast<
          interop::warray_slice*> (
      #endif
          _tao_aggregate.st_array
        )
    );
  return
    (strm >> ::ACE_InputCDR::to_wchar (_tao_aggregate.st_char)) &&
    (strm >> _tao_aggregate.st_string.out ()) &&
    (strm >> _tao_aggregate_st_array) &&
    (strm >> _tao_aggregate.st_any);
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_sequence/cdr_op_cs.cpp:93
#if !defined _TAO_CDR_OP_interop_wstructseq_CPP_
#define _TAO_CDR_OP_interop_wstructseq_CPP_

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const interop::wstructseq &_tao_sequence)
{
  return TAO::marshal_sequence(strm, _tao_sequence);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    interop::wstructseq &_tao_sequence)
{
  return TAO::demarshal_sequence(strm, _tao_sequence);
}


TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_CDR_OP_interop_wstructseq_CPP_ */

// TAO_IDL - Generated from
// be/be_visitor_enum/cdr_op_cs.cpp:34


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (TAO_OutputCDR &strm, interop::wchar_types _tao_enumerator)
{
  return strm << static_cast< ::CORBA::ULong> (_tao_enumerator);
}

::CORBA::Boolean operator>> (TAO_InputCDR &strm, interop::wchar_types & _tao_enumerator)
{
  ::CORBA::ULong _tao_temp = 0;
  ::CORBA::Boolean const _tao_success = strm >> _tao_temp;
  
  if (_tao_success)
    {
      _tao_enumerator = static_cast<interop::wchar_types> (_tao_temp);
    }
  
  return _tao_success;
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_union/cdr_op_cs.cpp:74


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const interop::wunion &_tao_union
  )
{
  if ( !(strm << _tao_union._d ()) )
    {
      return false;
    }
  
  ::CORBA::Boolean result = true;

  switch (_tao_union._d ())
  {
    case interop::is_wchar:
      {
        result = strm << ::ACE_OutputCDR::from_wchar (_tao_union.u_char ());
      }
      break;
    case interop::is_wstring:
      {
        result = strm << _tao_union.u_string ();
      }
      break;
    case interop::is_warray:
      {
        interop::warray_forany _tao_union_tmp (
            _tao_union.u_array ()
          );
        result = strm << _tao_union_tmp;
      }
      break;
    default:
      break;
  }

  return result;
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    interop::wunion &_tao_union
  )
{
  interop::wchar_types _tao_discriminant;
  if ( !(strm >> _tao_discriminant) )
    {
      return false;
    }
  
  ::CORBA::Boolean result = true;

  switch (_tao_discriminant)
  {
    case interop::is_wchar:
      {
        ::CORBA::WChar _tao_union_tmp;
        ::ACE_InputCDR::to_wchar _tao_union_helper (_tao_union_tmp);
        result = strm >> _tao_union_helper;

        if (result)
          {
            _tao_union.u_char (_tao_union_tmp);
            _tao_union._d (_tao_discriminant);
          }
      }
      break;
    case interop::is_wstring:
      {
        ::CORBA::WString_var _tao_union_tmp;
        result = strm >> _tao_union_tmp.out ();

        if (result)
          {
            _tao_union.u_string (_tao_union_tmp);
            _tao_union._d (_tao_discriminant);
          }
      }
      break;
    case interop::is_warray:
      {
        interop::warray _tao_union_tmp;
        interop::warray_forany _tao_union_helper (
            _tao_union_tmp
          );
        result = strm >> _tao_union_helper;

        if (result)
          {
            _tao_union.u_array (_tao_union_tmp);
            _tao_union._d (_tao_discriminant);
          }
      }
      break;
    default:
      _tao_union._default ();
      // For maximum interop compatibility, force the same value as transmitted
      _tao_union._d (_tao_discriminant);
      break;
  }

  return result;
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_exception/cdr_op_cs.cpp:48
TAO_BEGIN_VERSIONED_NAMESPACE_DECL



::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const interop::WChar_Passer::WStringException &_tao_aggregate
  )
{
  // First marshal the repository ID.
  if (strm << _tao_aggregate._rep_id ())
    {
      // Now marshal the members (if any).
      return (
        (strm << _tao_aggregate.why.in ()) &&
        (strm << ::ACE_OutputCDR::from_wchar (_tao_aggregate.whynot))
       );
    }
  else
    {
      return false;
    }
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    interop::WChar_Passer::WStringException &_tao_aggregate
  )
{
  // Demarshal the members.
  return (
    (strm >> _tao_aggregate.why.out ()) &&
    (strm >> ::ACE_InputCDR::to_wchar (_tao_aggregate.whynot))
  );
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_interface/cdr_op_cs.cpp:51

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const interop::WChar_Passer_ptr _tao_objref)
{
  ::CORBA::Object_ptr _tao_corba_obj = _tao_objref;
  return (strm << _tao_corba_obj);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    interop::WChar_Passer_ptr &_tao_objref)
{
  ::CORBA::Object_var obj;

  if (!(strm >> obj.inout ()))
    {
      return false;
    }
  
  typedef ::interop::WChar_Passer RHS_SCOPED_NAME;

  // Narrow to the right type.
  _tao_objref =
    TAO::Narrow_Utils<RHS_SCOPED_NAME>::unchecked_narrow (obj.in ());
    
  return true;
}

TAO_END_VERSIONED_NAMESPACE_DECL



