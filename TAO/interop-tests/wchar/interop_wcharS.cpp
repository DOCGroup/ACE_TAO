// -*- C++ -*-
/**
 * Code generated by the The ACE ORB (TAO) IDL Compiler v2.4.1
 * TAO and the TAO IDL Compiler have been developed by:
 *       Center for Distributed Object Computing
 *       Washington University
 *       St. Louis, MO
 *       USA
 *       http://www.cs.wustl.edu/~schmidt/doc-center.html
 * and
 *       Distributed Object Computing Laboratory
 *       University of California at Irvine
 *       Irvine, CA
 *       USA
 * and
 *       Institute for Software Integrated Systems
 *       Vanderbilt University
 *       Nashville, TN
 *       USA
 *       http://www.isis.vanderbilt.edu/
 *
 * Information about TAO is available at:
 *     http://www.dre.vanderbilt.edu/~schmidt/TAO.html
 **/


// TAO_IDL - Generated from
// be/be_codegen.cpp:649

#ifndef _TAO_IDL_INTEROP_WCHARS_0Z2LES_CPP_
#define _TAO_IDL_INTEROP_WCHARS_0Z2LES_CPP_


#include "interop_wcharS.h"
#include "tao/PortableServer/Operation_Table_Perfect_Hash.h"
#include "tao/PortableServer/Upcall_Command.h"
#include "tao/PortableServer/Upcall_Wrapper.h"
#include "tao/TAO_Server_Request.h"
#include "tao/ORB_Core.h"
#include "tao/Profile.h"
#include "tao/Stub.h"
#include "tao/IFR_Client_Adapter.h"
#include "tao/Object_T.h"
#include "tao/AnyTypeCode/TypeCode.h"
#include "tao/AnyTypeCode/DynamicC.h"
#include "tao/CDR.h"
#include "tao/operation_details.h"
#include "tao/PortableInterceptor.h"
#include "ace/Dynamic_Service.h"
#include "ace/Malloc_Allocator.h"

// TAO_IDL - Generated from
// be/be_interface.cpp:1865

class TAO_interop_WChar_Passer_Perfect_Hash_OpTable
  : public TAO_Perfect_Hash_OpTable
{
private:
  unsigned int hash (const char *str, unsigned int len);

public:
  const TAO_operation_db_entry * lookup (const char *str, unsigned int len);
};

/* C++ code produced by gperf version 2.8 (ACE version) */
/* Command-line: /mnt/win_d/projects/ATCD/ACE/bin/ace_gperf -m -M -J -c -C -D -E -T -f 0 -F 0,0 -a -o -t -p -K opname -L C++ -Z TAO_interop_WChar_Passer_Perfect_Hash_OpTable -N lookup  */
unsigned int
TAO_interop_WChar_Passer_Perfect_Hash_OpTable::hash (const char *str, unsigned int len)
{
  static const unsigned char asso_values[] =
    {
     45, 45, 45, 45, 45, 45, 45, 45, 45, 45,
     45, 45, 45, 45, 45, 45, 45, 45, 45, 45,
     45, 45, 45, 45, 45, 45, 45, 45, 45, 45,
     45, 45, 45, 45, 45, 45, 45, 45, 45, 45,
     45, 45, 45, 45, 45, 45, 45, 45, 45, 45,
     45, 45, 45, 45, 45, 45, 45, 45, 45, 45,
     45, 45, 45, 45, 45, 45, 45, 45, 45, 45,
     45, 45, 45, 45, 45, 45, 45, 45, 45, 45,
     45, 45, 45, 45, 45, 45, 45, 45, 45, 45,
     45, 45, 45, 45, 45,  0, 45, 20, 45, 45,
      0, 30, 45, 45, 45, 45, 45, 45, 45, 45,
      0,  0, 45, 45,  0,  0,  0, 45, 45,  0,
     45, 45, 45, 45, 45, 45, 45, 45,
    };
  return len + asso_values[static_cast<int>(str[len - 1])] + asso_values[static_cast<int>(str[0])];
}

const TAO_operation_db_entry *
TAO_interop_WChar_Passer_Perfect_Hash_OpTable::lookup (const char *str, unsigned int len)
{
  enum
    {
      TOTAL_KEYWORDS = 23,
      MIN_WORD_LENGTH = 5,
      MAX_WORD_LENGTH = 22,
      MIN_HASH_VALUE = 8,
      MAX_HASH_VALUE = 44,
      HASH_VALUE_RANGE = 37,
      DUPLICATES = 6,
      WORDLIST_SIZE = 31
    };

  static const TAO_operation_db_entry wordlist[] =
    {
      {"",0,0},{"",0,0},{"",0,0},{"",0,0},{"",0,0},{"",0,0},{"",0,0},{"",0,0},
      {"shutdown", &POA_interop::WChar_Passer::shutdown_skel, 0},
      {"_component", &TAO_ServantBase::_component_thru_poa_skel, 0},
      {"_non_existent", &TAO_ServantBase::_non_existent_thru_poa_skel, 0},
      {"_repository_id", &TAO_ServantBase::_repository_id_thru_poa_skel, 0},
      {"wchar_to_server", &POA_interop::WChar_Passer::wchar_to_server_skel, 0},
      {"warray_to_server", &POA_interop::WChar_Passer::warray_to_server_skel, 0},
      {"wunion_to_server", &POA_interop::WChar_Passer::wunion_to_server_skel, 0},
      {"wchar_from_server", &POA_interop::WChar_Passer::wchar_from_server_skel, 0},
      {"wstruct_to_server", &POA_interop::WChar_Passer::wstruct_to_server_skel, 0},
      {"wstring_to_server", &POA_interop::WChar_Passer::wstring_to_server_skel, 0},
      {"warray_from_server", &POA_interop::WChar_Passer::warray_from_server_skel, 0},
      {"wunion_from_server", &POA_interop::WChar_Passer::wunion_from_server_skel, 0},
      {"wstring_from_server", &POA_interop::WChar_Passer::wstring_from_server_skel, 0},
      {"wstruct_from_server", &POA_interop::WChar_Passer::wstruct_from_server_skel, 0},
      {"wstructseq_to_server", &POA_interop::WChar_Passer::wstructseq_to_server_skel, 0},
      {"wstructseq_from_server", &POA_interop::WChar_Passer::wstructseq_from_server_skel, 0},
      {"_is_a", &TAO_ServantBase::_is_a_thru_poa_skel, 0},
      {"any_echo", &POA_interop::WChar_Passer::any_echo_skel, 0},
      {"any_to_server", &POA_interop::WChar_Passer::any_to_server_skel, 0},
      {"any_from_server", &POA_interop::WChar_Passer::any_from_server_skel, 0},
      {"_interface", &TAO_ServantBase::_interface_skel, 0},
      {"_get_orb_name", &POA_interop::WChar_Passer::_get_orb_name_skel, 0},
      {"exception_test", &POA_interop::WChar_Passer::exception_test_skel, 0},
    };

  static const signed char lookup[] =
    {
       -1,  -1, -13,  -2, -15,  -3, -18,  -2,   8,  -1,   9, -20,  -2,  10,
       11,  12, -58, -57, -56, -52,  22,  -1,  23,  -1,  -1,  24,  -1,  -1,
       25,  -1,  -1,  -1,  -1,  26,  -1,  27,  -1,  -1,  -1,  -1,  28,  -1,
       -1,  29,  30,
    };

  if (len <= MAX_WORD_LENGTH && len >= MIN_WORD_LENGTH)
    {
      unsigned int key = hash (str, len);

      if (key <= MAX_HASH_VALUE && key >= MIN_HASH_VALUE)
        {
          int slot = lookup[key];

          if (slot >= 0 && slot < WORDLIST_SIZE)
            {
              const char *s = wordlist[slot].opname;

              if (*str == *s && !ACE_OS::strncmp (str + 1, s + 1, len - 1))
                return &wordlist[slot];
            }
          else if (slot < 0 && slot >= -MAX_HASH_VALUE)
            return 0;
          else
            {
              unsigned int offset = key + slot + (slot > 0 ? -MAX_HASH_VALUE : MAX_HASH_VALUE);
              const TAO_operation_db_entry *base = &wordlist[-lookup[offset]];
              const TAO_operation_db_entry *ptr = base + -lookup[offset + 1];

              while (--ptr >= base)
                if (*str == *ptr->opname && !ACE_OS::strncmp (str + 1, ptr->opname + 1, len - 1))
                  return ptr;
            }
        }
    }
  return 0;
}

static TAO_interop_WChar_Passer_Perfect_Hash_OpTable tao_interop_WChar_Passer_optable;

// TAO_IDL - Generated from
// be/be_visitor_interface/interface_ss.cpp:90

POA_interop::WChar_Passer::WChar_Passer (void)
  : TAO_ServantBase ()
{
  this->optable_ = &tao_interop_WChar_Passer_optable;
}

POA_interop::WChar_Passer::WChar_Passer (const WChar_Passer& rhs)
  : TAO_Abstract_ServantBase (rhs),
    TAO_ServantBase (rhs)
{
}

POA_interop::WChar_Passer::~WChar_Passer (void)
{
}

namespace POA_interop
{


  // TAO_IDL - Generated from
  // be/be_visitor_operation/upcall_command_ss.cpp:80

  class _get_orb_name_WChar_Passer
    : public TAO::Upcall_Command
  {
  public:
    inline _get_orb_name_WChar_Passer (
      POA_interop::WChar_Passer * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< char *>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< char *> (
          this->operation_details_,
          this->args_);

      retval =
        this->servant_->orb_name ();
    }

  private:
    POA_interop::WChar_Passer * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_ss.cpp:168

void POA_interop::WChar_Passer::_get_orb_name_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< char *>::ret_val retval;

  TAO::Argument * const args[] =
    {
      &retval
    };

  static size_t const nargs = 1;

  POA_interop::WChar_Passer * const impl =
    dynamic_cast<POA_interop::WChar_Passer *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  _get_orb_name_WChar_Passer command (
    impl,
    server_request.operation_details (),
    args);

  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_interop
{


  // TAO_IDL - Generated from
  // be/be_visitor_operation/upcall_command_ss.cpp:80

  class wchar_to_server_WChar_Passer
    : public TAO::Upcall_Command
  {
  public:
    inline wchar_to_server_WChar_Passer (
      POA_interop::WChar_Passer * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::ACE_InputCDR::to_boolean>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::ACE_InputCDR::to_boolean> (
          this->operation_details_,
          this->args_);

      TAO::SArg_Traits< ::ACE_InputCDR::to_wchar>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< ::ACE_InputCDR::to_wchar> (
          this->operation_details_,
          this->args_,
          1);

      TAO::SArg_Traits< ::CORBA::Short>::in_arg_type arg_2 =
        TAO::Portable_Server::get_in_arg< ::CORBA::Short> (
          this->operation_details_,
          this->args_,
          2);

      retval =
        this->servant_->wchar_to_server (
          arg_1
          , arg_2);
    }

  private:
    POA_interop::WChar_Passer * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_ss.cpp:168

void POA_interop::WChar_Passer::wchar_to_server_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::ACE_InputCDR::to_boolean>::ret_val retval;
  TAO::SArg_Traits< ::ACE_InputCDR::to_wchar>::in_arg_val _tao_test;
  TAO::SArg_Traits< ::CORBA::Short>::in_arg_val _tao_key;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_test,
      &_tao_key
    };

  static size_t const nargs = 3;

  POA_interop::WChar_Passer * const impl =
    dynamic_cast<POA_interop::WChar_Passer *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  wchar_to_server_WChar_Passer command (
    impl,
    server_request.operation_details (),
    args);

  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_interop
{


  // TAO_IDL - Generated from
  // be/be_visitor_operation/upcall_command_ss.cpp:80

  class wchar_from_server_WChar_Passer
    : public TAO::Upcall_Command
  {
  public:
    inline wchar_from_server_WChar_Passer (
      POA_interop::WChar_Passer * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::ACE_InputCDR::to_wchar>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::ACE_InputCDR::to_wchar> (
          this->operation_details_,
          this->args_);

      TAO::SArg_Traits< ::CORBA::Short>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< ::CORBA::Short> (
          this->operation_details_,
          this->args_,
          1);

      retval =
        this->servant_->wchar_from_server (
          arg_1);
    }

  private:
    POA_interop::WChar_Passer * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_ss.cpp:168

void POA_interop::WChar_Passer::wchar_from_server_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::ACE_InputCDR::to_wchar>::ret_val retval;
  TAO::SArg_Traits< ::CORBA::Short>::in_arg_val _tao_key;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_key
    };

  static size_t const nargs = 2;

  POA_interop::WChar_Passer * const impl =
    dynamic_cast<POA_interop::WChar_Passer *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  wchar_from_server_WChar_Passer command (
    impl,
    server_request.operation_details (),
    args);

  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_interop
{


  // TAO_IDL - Generated from
  // be/be_visitor_operation/upcall_command_ss.cpp:80

  class wstring_to_server_WChar_Passer
    : public TAO::Upcall_Command
  {
  public:
    inline wstring_to_server_WChar_Passer (
      POA_interop::WChar_Passer * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::ACE_InputCDR::to_boolean>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::ACE_InputCDR::to_boolean> (
          this->operation_details_,
          this->args_);

      TAO::SArg_Traits< ::CORBA::WChar *>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< ::CORBA::WChar *> (
          this->operation_details_,
          this->args_,
          1);

      TAO::SArg_Traits< ::CORBA::Short>::in_arg_type arg_2 =
        TAO::Portable_Server::get_in_arg< ::CORBA::Short> (
          this->operation_details_,
          this->args_,
          2);

      retval =
        this->servant_->wstring_to_server (
          arg_1
          , arg_2);
    }

  private:
    POA_interop::WChar_Passer * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_ss.cpp:168

void POA_interop::WChar_Passer::wstring_to_server_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::ACE_InputCDR::to_boolean>::ret_val retval;
  TAO::SArg_Traits< ::CORBA::WChar *>::in_arg_val _tao_test;
  TAO::SArg_Traits< ::CORBA::Short>::in_arg_val _tao_key;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_test,
      &_tao_key
    };

  static size_t const nargs = 3;

  POA_interop::WChar_Passer * const impl =
    dynamic_cast<POA_interop::WChar_Passer *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  wstring_to_server_WChar_Passer command (
    impl,
    server_request.operation_details (),
    args);

  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_interop
{


  // TAO_IDL - Generated from
  // be/be_visitor_operation/upcall_command_ss.cpp:80

  class wstring_from_server_WChar_Passer
    : public TAO::Upcall_Command
  {
  public:
    inline wstring_from_server_WChar_Passer (
      POA_interop::WChar_Passer * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::CORBA::WChar *>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::CORBA::WChar *> (
          this->operation_details_,
          this->args_);

      TAO::SArg_Traits< ::CORBA::Short>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< ::CORBA::Short> (
          this->operation_details_,
          this->args_,
          1);

      retval =
        this->servant_->wstring_from_server (
          arg_1);
    }

  private:
    POA_interop::WChar_Passer * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_ss.cpp:168

void POA_interop::WChar_Passer::wstring_from_server_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::CORBA::WChar *>::ret_val retval;
  TAO::SArg_Traits< ::CORBA::Short>::in_arg_val _tao_key;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_key
    };

  static size_t const nargs = 2;

  POA_interop::WChar_Passer * const impl =
    dynamic_cast<POA_interop::WChar_Passer *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  wstring_from_server_WChar_Passer command (
    impl,
    server_request.operation_details (),
    args);

  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_interop
{


  // TAO_IDL - Generated from
  // be/be_visitor_operation/upcall_command_ss.cpp:80

  class warray_to_server_WChar_Passer
    : public TAO::Upcall_Command
  {
  public:
    inline warray_to_server_WChar_Passer (
      POA_interop::WChar_Passer * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::ACE_InputCDR::to_boolean>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::ACE_InputCDR::to_boolean> (
          this->operation_details_,
          this->args_);

      TAO::SArg_Traits< ::interop::warray_tag>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< ::interop::warray_tag> (
          this->operation_details_,
          this->args_,
          1);

      TAO::SArg_Traits< ::CORBA::Short>::in_arg_type arg_2 =
        TAO::Portable_Server::get_in_arg< ::CORBA::Short> (
          this->operation_details_,
          this->args_,
          2);

      retval =
        this->servant_->warray_to_server (
          arg_1
          , arg_2);
    }

  private:
    POA_interop::WChar_Passer * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_ss.cpp:168

void POA_interop::WChar_Passer::warray_to_server_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::ACE_InputCDR::to_boolean>::ret_val retval;
  TAO::SArg_Traits< ::interop::warray_tag>::in_arg_val _tao_test;
  TAO::SArg_Traits< ::CORBA::Short>::in_arg_val _tao_key;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_test,
      &_tao_key
    };

  static size_t const nargs = 3;

  POA_interop::WChar_Passer * const impl =
    dynamic_cast<POA_interop::WChar_Passer *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  warray_to_server_WChar_Passer command (
    impl,
    server_request.operation_details (),
    args);

  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_interop
{


  // TAO_IDL - Generated from
  // be/be_visitor_operation/upcall_command_ss.cpp:80

  class warray_from_server_WChar_Passer
    : public TAO::Upcall_Command
  {
  public:
    inline warray_from_server_WChar_Passer (
      POA_interop::WChar_Passer * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::interop::warray_tag>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::interop::warray_tag> (
          this->operation_details_,
          this->args_);

      TAO::SArg_Traits< ::CORBA::Short>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< ::CORBA::Short> (
          this->operation_details_,
          this->args_,
          1);

      retval =
        this->servant_->warray_from_server (
          arg_1);
    }

  private:
    POA_interop::WChar_Passer * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_ss.cpp:168

void POA_interop::WChar_Passer::warray_from_server_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::interop::warray_tag>::ret_val retval;
  TAO::SArg_Traits< ::CORBA::Short>::in_arg_val _tao_key;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_key
    };

  static size_t const nargs = 2;

  POA_interop::WChar_Passer * const impl =
    dynamic_cast<POA_interop::WChar_Passer *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  warray_from_server_WChar_Passer command (
    impl,
    server_request.operation_details (),
    args);

  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_interop
{


  // TAO_IDL - Generated from
  // be/be_visitor_operation/upcall_command_ss.cpp:80

  class wstruct_to_server_WChar_Passer
    : public TAO::Upcall_Command
  {
  public:
    inline wstruct_to_server_WChar_Passer (
      POA_interop::WChar_Passer * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::ACE_InputCDR::to_boolean>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::ACE_InputCDR::to_boolean> (
          this->operation_details_,
          this->args_);

      TAO::SArg_Traits< ::interop::wstruct>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< ::interop::wstruct> (
          this->operation_details_,
          this->args_,
          1);

      TAO::SArg_Traits< ::CORBA::Short>::in_arg_type arg_2 =
        TAO::Portable_Server::get_in_arg< ::CORBA::Short> (
          this->operation_details_,
          this->args_,
          2);

      retval =
        this->servant_->wstruct_to_server (
          arg_1
          , arg_2);
    }

  private:
    POA_interop::WChar_Passer * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_ss.cpp:168

void POA_interop::WChar_Passer::wstruct_to_server_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::ACE_InputCDR::to_boolean>::ret_val retval;
  TAO::SArg_Traits< ::interop::wstruct>::in_arg_val _tao_test;
  TAO::SArg_Traits< ::CORBA::Short>::in_arg_val _tao_key;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_test,
      &_tao_key
    };

  static size_t const nargs = 3;

  POA_interop::WChar_Passer * const impl =
    dynamic_cast<POA_interop::WChar_Passer *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  wstruct_to_server_WChar_Passer command (
    impl,
    server_request.operation_details (),
    args);

  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_interop
{


  // TAO_IDL - Generated from
  // be/be_visitor_operation/upcall_command_ss.cpp:80

  class wstruct_from_server_WChar_Passer
    : public TAO::Upcall_Command
  {
  public:
    inline wstruct_from_server_WChar_Passer (
      POA_interop::WChar_Passer * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::interop::wstruct>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::interop::wstruct> (
          this->operation_details_,
          this->args_);

      TAO::SArg_Traits< ::CORBA::Short>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< ::CORBA::Short> (
          this->operation_details_,
          this->args_,
          1);

      retval =
        this->servant_->wstruct_from_server (
          arg_1);
    }

  private:
    POA_interop::WChar_Passer * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_ss.cpp:168

void POA_interop::WChar_Passer::wstruct_from_server_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::interop::wstruct>::ret_val retval;
  TAO::SArg_Traits< ::CORBA::Short>::in_arg_val _tao_key;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_key
    };

  static size_t const nargs = 2;

  POA_interop::WChar_Passer * const impl =
    dynamic_cast<POA_interop::WChar_Passer *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  wstruct_from_server_WChar_Passer command (
    impl,
    server_request.operation_details (),
    args);

  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_interop
{


  // TAO_IDL - Generated from
  // be/be_visitor_operation/upcall_command_ss.cpp:80

  class wstructseq_to_server_WChar_Passer
    : public TAO::Upcall_Command
  {
  public:
    inline wstructseq_to_server_WChar_Passer (
      POA_interop::WChar_Passer * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::ACE_InputCDR::to_boolean>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::ACE_InputCDR::to_boolean> (
          this->operation_details_,
          this->args_);

      TAO::SArg_Traits< ::interop::wstructseq>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< ::interop::wstructseq> (
          this->operation_details_,
          this->args_,
          1);

      TAO::SArg_Traits< ::CORBA::Short>::in_arg_type arg_2 =
        TAO::Portable_Server::get_in_arg< ::CORBA::Short> (
          this->operation_details_,
          this->args_,
          2);

      retval =
        this->servant_->wstructseq_to_server (
          arg_1
          , arg_2);
    }

  private:
    POA_interop::WChar_Passer * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_ss.cpp:168

void POA_interop::WChar_Passer::wstructseq_to_server_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::ACE_InputCDR::to_boolean>::ret_val retval;
  TAO::SArg_Traits< ::interop::wstructseq>::in_arg_val _tao_test;
  TAO::SArg_Traits< ::CORBA::Short>::in_arg_val _tao_key;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_test,
      &_tao_key
    };

  static size_t const nargs = 3;

  POA_interop::WChar_Passer * const impl =
    dynamic_cast<POA_interop::WChar_Passer *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  wstructseq_to_server_WChar_Passer command (
    impl,
    server_request.operation_details (),
    args);

  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_interop
{


  // TAO_IDL - Generated from
  // be/be_visitor_operation/upcall_command_ss.cpp:80

  class wstructseq_from_server_WChar_Passer
    : public TAO::Upcall_Command
  {
  public:
    inline wstructseq_from_server_WChar_Passer (
      POA_interop::WChar_Passer * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::interop::wstructseq>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::interop::wstructseq> (
          this->operation_details_,
          this->args_);

      TAO::SArg_Traits< ::CORBA::Short>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< ::CORBA::Short> (
          this->operation_details_,
          this->args_,
          1);

      retval =
        this->servant_->wstructseq_from_server (
          arg_1);
    }

  private:
    POA_interop::WChar_Passer * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_ss.cpp:168

void POA_interop::WChar_Passer::wstructseq_from_server_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::interop::wstructseq>::ret_val retval;
  TAO::SArg_Traits< ::CORBA::Short>::in_arg_val _tao_key;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_key
    };

  static size_t const nargs = 2;

  POA_interop::WChar_Passer * const impl =
    dynamic_cast<POA_interop::WChar_Passer *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  wstructseq_from_server_WChar_Passer command (
    impl,
    server_request.operation_details (),
    args);

  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_interop
{


  // TAO_IDL - Generated from
  // be/be_visitor_operation/upcall_command_ss.cpp:80

  class wunion_to_server_WChar_Passer
    : public TAO::Upcall_Command
  {
  public:
    inline wunion_to_server_WChar_Passer (
      POA_interop::WChar_Passer * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::ACE_InputCDR::to_boolean>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::ACE_InputCDR::to_boolean> (
          this->operation_details_,
          this->args_);

      TAO::SArg_Traits< ::interop::wunion>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< ::interop::wunion> (
          this->operation_details_,
          this->args_,
          1);

      TAO::SArg_Traits< ::CORBA::Short>::in_arg_type arg_2 =
        TAO::Portable_Server::get_in_arg< ::CORBA::Short> (
          this->operation_details_,
          this->args_,
          2);

      retval =
        this->servant_->wunion_to_server (
          arg_1
          , arg_2);
    }

  private:
    POA_interop::WChar_Passer * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_ss.cpp:168

void POA_interop::WChar_Passer::wunion_to_server_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::ACE_InputCDR::to_boolean>::ret_val retval;
  TAO::SArg_Traits< ::interop::wunion>::in_arg_val _tao_test;
  TAO::SArg_Traits< ::CORBA::Short>::in_arg_val _tao_key;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_test,
      &_tao_key
    };

  static size_t const nargs = 3;

  POA_interop::WChar_Passer * const impl =
    dynamic_cast<POA_interop::WChar_Passer *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  wunion_to_server_WChar_Passer command (
    impl,
    server_request.operation_details (),
    args);

  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_interop
{


  // TAO_IDL - Generated from
  // be/be_visitor_operation/upcall_command_ss.cpp:80

  class wunion_from_server_WChar_Passer
    : public TAO::Upcall_Command
  {
  public:
    inline wunion_from_server_WChar_Passer (
      POA_interop::WChar_Passer * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::interop::wunion>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::interop::wunion> (
          this->operation_details_,
          this->args_);

      TAO::SArg_Traits< ::CORBA::Short>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< ::CORBA::Short> (
          this->operation_details_,
          this->args_,
          1);

      TAO::SArg_Traits< ::interop::wchar_types>::in_arg_type arg_2 =
        TAO::Portable_Server::get_in_arg< ::interop::wchar_types> (
          this->operation_details_,
          this->args_,
          2);

      retval =
        this->servant_->wunion_from_server (
          arg_1
          , arg_2);
    }

  private:
    POA_interop::WChar_Passer * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_ss.cpp:168

void POA_interop::WChar_Passer::wunion_from_server_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::interop::wunion>::ret_val retval;
  TAO::SArg_Traits< ::CORBA::Short>::in_arg_val _tao_key;
  TAO::SArg_Traits< ::interop::wchar_types>::in_arg_val _tao_type;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_key,
      &_tao_type
    };

  static size_t const nargs = 3;

  POA_interop::WChar_Passer * const impl =
    dynamic_cast<POA_interop::WChar_Passer *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  wunion_from_server_WChar_Passer command (
    impl,
    server_request.operation_details (),
    args);

  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_interop
{


  // TAO_IDL - Generated from
  // be/be_visitor_operation/upcall_command_ss.cpp:80

  class any_to_server_WChar_Passer
    : public TAO::Upcall_Command
  {
  public:
    inline any_to_server_WChar_Passer (
      POA_interop::WChar_Passer * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::ACE_InputCDR::to_boolean>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::ACE_InputCDR::to_boolean> (
          this->operation_details_,
          this->args_);

      TAO::SArg_Traits< ::CORBA::Any>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< ::CORBA::Any> (
          this->operation_details_,
          this->args_,
          1);

      TAO::SArg_Traits< ::CORBA::Short>::in_arg_type arg_2 =
        TAO::Portable_Server::get_in_arg< ::CORBA::Short> (
          this->operation_details_,
          this->args_,
          2);

      retval =
        this->servant_->any_to_server (
          arg_1
          , arg_2);
    }

  private:
    POA_interop::WChar_Passer * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_ss.cpp:168

void POA_interop::WChar_Passer::any_to_server_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::ACE_InputCDR::to_boolean>::ret_val retval;
  TAO::SArg_Traits< ::CORBA::Any>::in_arg_val _tao_test;
  TAO::SArg_Traits< ::CORBA::Short>::in_arg_val _tao_key;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_test,
      &_tao_key
    };

  static size_t const nargs = 3;

  POA_interop::WChar_Passer * const impl =
    dynamic_cast<POA_interop::WChar_Passer *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  any_to_server_WChar_Passer command (
    impl,
    server_request.operation_details (),
    args);

  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_interop
{


  // TAO_IDL - Generated from
  // be/be_visitor_operation/upcall_command_ss.cpp:80

  class any_from_server_WChar_Passer
    : public TAO::Upcall_Command
  {
  public:
    inline any_from_server_WChar_Passer (
      POA_interop::WChar_Passer * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::CORBA::Any>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::CORBA::Any> (
          this->operation_details_,
          this->args_);

      TAO::SArg_Traits< ::CORBA::Short>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< ::CORBA::Short> (
          this->operation_details_,
          this->args_,
          1);

      TAO::SArg_Traits< ::interop::wchar_types>::in_arg_type arg_2 =
        TAO::Portable_Server::get_in_arg< ::interop::wchar_types> (
          this->operation_details_,
          this->args_,
          2);

      retval =
        this->servant_->any_from_server (
          arg_1
          , arg_2);
    }

  private:
    POA_interop::WChar_Passer * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_ss.cpp:168

void POA_interop::WChar_Passer::any_from_server_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::CORBA::Any>::ret_val retval;
  TAO::SArg_Traits< ::CORBA::Short>::in_arg_val _tao_key;
  TAO::SArg_Traits< ::interop::wchar_types>::in_arg_val _tao_type;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_key,
      &_tao_type
    };

  static size_t const nargs = 3;

  POA_interop::WChar_Passer * const impl =
    dynamic_cast<POA_interop::WChar_Passer *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  any_from_server_WChar_Passer command (
    impl,
    server_request.operation_details (),
    args);

  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_interop
{


  // TAO_IDL - Generated from
  // be/be_visitor_operation/upcall_command_ss.cpp:80

  class any_echo_WChar_Passer
    : public TAO::Upcall_Command
  {
  public:
    inline any_echo_WChar_Passer (
      POA_interop::WChar_Passer * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::CORBA::Any>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::CORBA::Any> (
          this->operation_details_,
          this->args_);

      TAO::SArg_Traits< ::CORBA::Any>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< ::CORBA::Any> (
          this->operation_details_,
          this->args_,
          1);

      retval =
        this->servant_->any_echo (
          arg_1);
    }

  private:
    POA_interop::WChar_Passer * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_ss.cpp:168

void POA_interop::WChar_Passer::any_echo_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::CORBA::Any>::ret_val retval;
  TAO::SArg_Traits< ::CORBA::Any>::in_arg_val _tao_test;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_test
    };

  static size_t const nargs = 2;

  POA_interop::WChar_Passer * const impl =
    dynamic_cast<POA_interop::WChar_Passer *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  any_echo_WChar_Passer command (
    impl,
    server_request.operation_details (),
    args);

  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_interop
{


  // TAO_IDL - Generated from
  // be/be_visitor_operation/upcall_command_ss.cpp:80

  class exception_test_WChar_Passer
    : public TAO::Upcall_Command
  {
  public:
    inline exception_test_WChar_Passer (
      POA_interop::WChar_Passer * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::CORBA::Short>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< ::CORBA::Short> (
          this->operation_details_,
          this->args_,
          1);

      this->servant_->exception_test (
        arg_1);
    }

  private:
    POA_interop::WChar_Passer * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_ss.cpp:168

void POA_interop::WChar_Passer::exception_test_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const exceptions[] =
    {
      interop::WChar_Passer::_tc_WStringException
    };
  static ::CORBA::ULong const nexceptions = 1;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< void>::ret_val retval;
  TAO::SArg_Traits< ::CORBA::Short>::in_arg_val _tao_key;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_key
    };

  static size_t const nargs = 2;

  POA_interop::WChar_Passer * const impl =
    dynamic_cast<POA_interop::WChar_Passer *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  exception_test_WChar_Passer command (
    impl,
    server_request.operation_details (),
    args);

  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_interop
{


  // TAO_IDL - Generated from
  // be/be_visitor_operation/upcall_command_ss.cpp:80

  class shutdown_WChar_Passer
    : public TAO::Upcall_Command
  {
  public:
    inline shutdown_WChar_Passer (
      POA_interop::WChar_Passer * servant)
      : servant_ (servant)
    {
    }

    virtual void execute (void)
    {
      this->servant_->shutdown ();
    }

  private:
    POA_interop::WChar_Passer * const servant_;
  };
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_ss.cpp:168

void POA_interop::WChar_Passer::shutdown_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< void>::ret_val retval;

  TAO::Argument * const args[] =
    {
      &retval
    };

  static size_t const nargs = 1;

  POA_interop::WChar_Passer * const impl =
    dynamic_cast<POA_interop::WChar_Passer *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  shutdown_WChar_Passer command (
    impl);

  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}



// TAO_IDL - Generated from
// be/be_visitor_interface/interface_ss.cpp:163



::CORBA::Boolean POA_interop::WChar_Passer::_is_a (const char* value)
{
  return
    (
      ACE_OS::strcmp (
          value,
          "IDL:interop/WChar_Passer:1.0"
        ) == 0 ||
      !ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        )
    );
}

const char* POA_interop::WChar_Passer::_interface_repository_id (void) const
{
  return "IDL:interop/WChar_Passer:1.0";
}

// TAO_IDL - Generated from
// be/be_visitor_interface/interface_ss.cpp:423

void POA_interop::WChar_Passer::_dispatch (
  TAO_ServerRequest & req,
  TAO::Portable_Server::Servant_Upcall* servant_upcall)
{
  this->synchronous_upcall_dispatch (req, servant_upcall, this);
}

// TAO_IDL - Generated from
// be/be_visitor_interface/interface_ss.cpp:370

interop::WChar_Passer *
POA_interop::WChar_Passer::_this (void)
{
  TAO_Stub *stub = this->_create_stub ();

  TAO_Stub_Auto_Ptr safe_stub (stub);
  ::CORBA::Object_ptr tmp = CORBA::Object_ptr ();

  ::CORBA::Boolean const _tao_opt_colloc =
    stub->servant_orb_var ()->orb_core ()->optimize_collocation_objects ();

  ACE_NEW_RETURN (
      tmp,
      ::CORBA::Object (stub, _tao_opt_colloc, this),
      0);

  ::CORBA::Object_var obj = tmp;
  (void) safe_stub.release ();

  typedef ::interop::WChar_Passer STUB_SCOPED_NAME;
  return
    TAO::Narrow_Utils<STUB_SCOPED_NAME>::unchecked_narrow (
        obj.in ());
}

#endif /* ifndef */

