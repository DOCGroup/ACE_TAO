// -*- C++ -*-
/**
 * Code generated by the The ACE ORB (TAO) IDL Compiler v2.4.1
 * TAO and the TAO IDL Compiler have been developed by:
 *       Center for Distributed Object Computing
 *       Washington University
 *       St. Louis, MO
 *       USA
 *       http://www.cs.wustl.edu/~schmidt/doc-center.html
 * and
 *       Distributed Object Computing Laboratory
 *       University of California at Irvine
 *       Irvine, CA
 *       USA
 * and
 *       Institute for Software Integrated Systems
 *       Vanderbilt University
 *       Nashville, TN
 *       USA
 *       http://www.isis.vanderbilt.edu/
 *
 * Information about TAO is available at:
 *     http://www.dre.vanderbilt.edu/~schmidt/TAO.html
 **/

// TAO_IDL - Generated from
// be/be_codegen.cpp:373


#include "DemoC.h"
#include "tao/AnyTypeCode/Null_RefCount_Policy.h"
#include "tao/AnyTypeCode/TypeCode_Constants.h"
#include "tao/AnyTypeCode/Alias_TypeCode_Static.h"
#include "tao/AnyTypeCode/Objref_TypeCode_Static.h"
#include "tao/AnyTypeCode/Sequence_TypeCode_Static.h"
#include "tao/AnyTypeCode/String_TypeCode_Static.h"
#include "tao/AnyTypeCode/Struct_TypeCode_Static.h"
#include "tao/AnyTypeCode/TypeCode_Struct_Field.h"
#include "tao/AnyTypeCode/TypeCode_Case_T.h"
#include "tao/AnyTypeCode/Union_TypeCode_Static.h"
#include "tao/AnyTypeCode/Value_TypeCode_Static.h"
#include "tao/AnyTypeCode/TypeCode_Value_Field.h"
#include "tao/AnyTypeCode/Recursive_Type_TypeCode.h"
#include "tao/CDR.h"
#include "tao/Exception_Data.h"
#include "tao/Invocation_Adapter.h"
#include "tao/Object_T.h"
#include "tao/CDR.h"
#include "tao/AnyTypeCode/Any.h"
#include "tao/AnyTypeCode/Any_Impl_T.h"
#include "tao/AnyTypeCode/Any_Dual_Impl_T.h"
#include "ace/OS_NS_string.h"

#if !defined (__ACE_INLINE__)
#include "DemoC.inl"
#endif /* !defined INLINE */

// TAO_IDL - Generated from
// be/be_visitor_typecode/struct_typecode.cpp:86

static TAO::TypeCode::Struct_Field<
  char const *,
  ::CORBA::TypeCode_ptr const *> const
    _tao_fields_Demo_BaseStruct[] =
      {
        { "str", &CORBA::_tc_string }
      };

static TAO::TypeCode::Struct<
  char const *,
  ::CORBA::TypeCode_ptr const *,
  TAO::TypeCode::Struct_Field<
    char const *,
    ::CORBA::TypeCode_ptr const *> const *,
  TAO::Null_RefCount_Policy>
_tao_tc_Demo_BaseStruct (
  ::CORBA::tk_struct,
  "IDL:Demo/BaseStruct:1.0",
  "BaseStruct",
  _tao_fields_Demo_BaseStruct,
  1);


namespace Demo
{
  ::CORBA::TypeCode_ptr const _tc_BaseStruct =
    &_tao_tc_Demo_BaseStruct;
}

// TAO_IDL - Generated from
// be/be_visitor_structure/structure_cs.cpp:56

void
Demo::BaseStruct::_tao_any_destructor (
    void *_tao_void_pointer)
{
  BaseStruct *_tao_tmp_pointer =
    static_cast<BaseStruct *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

// TAO_IDL - Generated from
// be/be_visitor_sequence/sequence_cs.cpp:70

#if !defined (_DEMO_NESTEDSEQ_CS_)
#define _DEMO_NESTEDSEQ_CS_

Demo::NestedSeq::NestedSeq (void)
{}

Demo::NestedSeq::NestedSeq (
    ::CORBA::ULong max)
  : ::TAO::unbounded_value_sequence<
        NestedStruct
      > (max)
{}

Demo::NestedSeq::NestedSeq (
    ::CORBA::ULong max,
    ::CORBA::ULong length,
    Demo::NestedStruct * buffer,
    ::CORBA::Boolean release
  )
  : ::TAO::unbounded_value_sequence<
        NestedStruct
      >
    (max, length, buffer, release)
{}

Demo::NestedSeq::NestedSeq (
    const NestedSeq &seq)
  : ::TAO::unbounded_value_sequence<
        NestedStruct
      > (seq)
{}

Demo::NestedSeq::~NestedSeq (void)
{}

void Demo::NestedSeq::_tao_any_destructor (
    void * _tao_void_pointer)
{
  NestedSeq * _tao_tmp_pointer =
    static_cast<NestedSeq *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

#endif /* end #if !defined */

// TAO_IDL - Generated from
// be/be_visitor_typecode/alias_typecode.cpp:49



// TAO_IDL - Generated from
// be/be_visitor_typecode/typecode_defn.cpp:461


#ifndef _TAO_TYPECODE_Demo_NestedSeq_GUARD
#define _TAO_TYPECODE_Demo_NestedSeq_GUARD

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

namespace TAO
{
  namespace TypeCode
  {
    namespace
    {
      TAO::TypeCode::Sequence< ::CORBA::TypeCode_ptr const *,
                              TAO::Null_RefCount_Policy>
        Demo_NestedSeq_0 (
          ::CORBA::tk_sequence,
          &Demo::_tc_NestedStruct,
          0U);

      ::CORBA::TypeCode_ptr const tc_Demo_NestedSeq_0 =
        &Demo_NestedSeq_0;
    }
  }
}

TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_TYPECODE_Demo_NestedSeq_GUARD */

static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_Demo_NestedSeq (
    ::CORBA::tk_alias,
    "IDL:Demo/NestedSeq:1.0",
    "NestedSeq",
    &TAO::TypeCode::tc_Demo_NestedSeq_0);


namespace Demo
{
  ::CORBA::TypeCode_ptr const _tc_NestedSeq =
    &_tao_tc_Demo_NestedSeq;
}

// TAO_IDL - Generated from
// be/be_visitor_typecode/struct_typecode.cpp:86



// TAO_IDL - Generated from
// be/be_visitor_typecode/typecode_defn.cpp:461

static TAO::TypeCode::Struct_Field<
  char const *,
  ::CORBA::TypeCode_ptr const *> const
    _tao_fields_Demo_NestedStruct[] =
      {
        { "foo1", &Demo::_tc_BaseStruct },
        { "foo2", &Demo::_tc_BaseStruct },
        { "foo3", &Demo::_tc_BaseStruct },
        { "bars", &Demo::_tc_NestedSeq }
      };

static TAO::TypeCode::Recursive_Type<
  TAO::TypeCode::Struct<
    char const *,
    ::CORBA::TypeCode_ptr const *,
    TAO::TypeCode::Struct_Field<
      char const *,
      ::CORBA::TypeCode_ptr const *> const *,
    TAO::Null_RefCount_Policy>,
  ::CORBA::TypeCode_ptr const *,
  TAO::TypeCode::Struct_Field<
    char const *,
    ::CORBA::TypeCode_ptr const *> const *>
_tao_tc_Demo_NestedStruct (
  ::CORBA::tk_struct,
  "IDL:Demo/NestedStruct:1.0",
  "NestedStruct",
  _tao_fields_Demo_NestedStruct,
  4);


namespace Demo
{
  ::CORBA::TypeCode_ptr const _tc_NestedStruct =
    &_tao_tc_Demo_NestedStruct;
}

// TAO_IDL - Generated from
// be/be_visitor_structure/structure_cs.cpp:56

void
Demo::NestedStruct::_tao_any_destructor (
    void *_tao_void_pointer)
{
  NestedStruct *_tao_tmp_pointer =
    static_cast<NestedStruct *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

// TAO_IDL - Generated from
// be/be_visitor_union/union_cs.cpp:76

Demo::BaseUnion::BaseUnion (void)
{
  ACE_OS::memset (&this->u_, 0, sizeof (this->u_));
  this->disc_ = -32768;
}

Demo::BaseUnion::BaseUnion (const ::Demo::BaseUnion &u)
{
  this->disc_ = u.disc_;
  switch (this->disc_)
  {
    case 1:
    {
      this->u_.str_ = ::CORBA::string_dup (u.u_.str_);
    }
    break;
    case 2:
    {
      this->u_.l_ = u.u_.l_;
    }
    break;
    default:
    {
      this->u_.s_ = u.u_.s_;
    }
    break;
  }
}

Demo::BaseUnion::~BaseUnion (void)
{
  // Finalize.
  this->_reset ();
}

void Demo::BaseUnion::_tao_any_destructor (void *_tao_void_pointer)
{
  BaseUnion *tmp =
    static_cast<BaseUnion *> (_tao_void_pointer);
  delete tmp;
}

Demo::BaseUnion &
Demo::BaseUnion::operator= (const ::Demo::BaseUnion &u)
{
  if (&u == this)
    {
      return *this;
    }

  this->_reset ();
  this->disc_ = u.disc_;

  switch (this->disc_)
  {
    case 1:
    {
      this->u_.str_ = ::CORBA::string_dup (u.u_.str_);
    }
    break;
    case 2:
    {
      this->u_.l_ = u.u_.l_;
    }
    break;
    default:
    {
      this->u_.s_ = u.u_.s_;
    }
    break;
  }

  return *this;
}

/// Reset method to reset old values of a union.
void Demo::BaseUnion::_reset (void)
{
  switch (this->disc_)
  {

    case 1:
      ::CORBA::string_free (this->u_.str_);
      this->u_.str_ = 0;

    break;

    case 2:

    break;

    default:

    break;

  }
}

// TAO_IDL - Generated from
// be/be_visitor_typecode/union_typecode.cpp:65

static TAO::TypeCode::Case_T<CORBA::Short, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_Demo_BaseUnion__0 (1, "str", &CORBA::_tc_string);
static TAO::TypeCode::Case_T<CORBA::Short, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_Demo_BaseUnion__1 (2, "l", &CORBA::_tc_long);
static TAO::TypeCode::Case_T<CORBA::Short, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_Demo_BaseUnion__2 (-32768, "s", &CORBA::_tc_short);

static TAO::TypeCode::Case<char const *, ::CORBA::TypeCode_ptr const *> const * const _tao_cases_Demo_BaseUnion[] =
  {
    &_tao_cases_Demo_BaseUnion__0,
    &_tao_cases_Demo_BaseUnion__1,
    &_tao_cases_Demo_BaseUnion__2
  };

static TAO::TypeCode::Union<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::TypeCode::Case<char const *, ::CORBA::TypeCode_ptr const *> const * const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_Demo_BaseUnion (
    "IDL:Demo/BaseUnion:1.0",
    "BaseUnion",
    &CORBA::_tc_short,
    _tao_cases_Demo_BaseUnion,
    sizeof (_tao_cases_Demo_BaseUnion)/sizeof (_tao_cases_Demo_BaseUnion[0]),
    2);


namespace Demo
{
  ::CORBA::TypeCode_ptr const _tc_BaseUnion =
    &_tao_tc_Demo_BaseUnion;
}

// TAO_IDL - Generated from
// be/be_visitor_union/union_cs.cpp:76

Demo::NestedUnion::NestedUnion (void)
{
  ACE_OS::memset (&this->u_, 0, sizeof (this->u_));
  this->disc_ = -32768;
}

Demo::NestedUnion::NestedUnion (const ::Demo::NestedUnion &u)
{
  this->disc_ = u.disc_;
  switch (this->disc_)
  {
    case 1:
    {
      if (u.u_.bar1_ == 0)
        {
          this->u_.bar1_ = 0;
        }
      else
        {
          ACE_NEW (
              this->u_.bar1_,
              Demo::BaseUnion (*u.u_.bar1_)
            );
        }
    }
    break;
    case 2:
    {
      if (u.u_.bar2_ == 0)
        {
          this->u_.bar2_ = 0;
        }
      else
        {
          ACE_NEW (
              this->u_.bar2_,
              Demo::BaseUnion (*u.u_.bar2_)
            );
        }
    }
    break;
    default:
    {
      if (u.u_.defaultBar_ == 0)
        {
          this->u_.defaultBar_ = 0;
        }
      else
        {
          ACE_NEW (
              this->u_.defaultBar_,
              Demo::BaseUnion (*u.u_.defaultBar_)
            );
        }
    }
    break;
  }
}

Demo::NestedUnion::~NestedUnion (void)
{
  // Finalize.
  this->_reset ();
}

void Demo::NestedUnion::_tao_any_destructor (void *_tao_void_pointer)
{
  NestedUnion *tmp =
    static_cast<NestedUnion *> (_tao_void_pointer);
  delete tmp;
}

Demo::NestedUnion &
Demo::NestedUnion::operator= (const ::Demo::NestedUnion &u)
{
  if (&u == this)
    {
      return *this;
    }

  this->_reset ();
  this->disc_ = u.disc_;

  switch (this->disc_)
  {
    case 1:
    {
      if (u.u_.bar1_ == 0)
        {
          this->u_.bar1_ = 0;
        }
      else
        {
          ACE_NEW_RETURN (
              this->u_.bar1_,
              Demo::BaseUnion (*u.u_.bar1_),
              *this
            );
        }
    }
    break;
    case 2:
    {
      if (u.u_.bar2_ == 0)
        {
          this->u_.bar2_ = 0;
        }
      else
        {
          ACE_NEW_RETURN (
              this->u_.bar2_,
              Demo::BaseUnion (*u.u_.bar2_),
              *this
            );
        }
    }
    break;
    default:
    {
      if (u.u_.defaultBar_ == 0)
        {
          this->u_.defaultBar_ = 0;
        }
      else
        {
          ACE_NEW_RETURN (
              this->u_.defaultBar_,
              Demo::BaseUnion (*u.u_.defaultBar_),
              *this
            );
        }
    }
    break;
  }

  return *this;
}

/// Reset method to reset old values of a union.
void Demo::NestedUnion::_reset (void)
{
  switch (this->disc_)
  {

    case 1:
      delete this->u_.bar1_;
      this->u_.bar1_ = 0;

    break;

    case 2:
      delete this->u_.bar2_;
      this->u_.bar2_ = 0;

    break;

    default:
      delete this->u_.defaultBar_;
      this->u_.defaultBar_ = 0;

    break;

  }
}

// TAO_IDL - Generated from
// be/be_visitor_typecode/union_typecode.cpp:65

static TAO::TypeCode::Case_T<CORBA::Short, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_Demo_NestedUnion__0 (1, "bar1", &Demo::_tc_BaseUnion);
static TAO::TypeCode::Case_T<CORBA::Short, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_Demo_NestedUnion__1 (2, "bar2", &Demo::_tc_BaseUnion);
static TAO::TypeCode::Case_T<CORBA::Short, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_Demo_NestedUnion__2 (-32768, "defaultBar", &Demo::_tc_BaseUnion);

static TAO::TypeCode::Case<char const *, ::CORBA::TypeCode_ptr const *> const * const _tao_cases_Demo_NestedUnion[] =
  {
    &_tao_cases_Demo_NestedUnion__0,
    &_tao_cases_Demo_NestedUnion__1,
    &_tao_cases_Demo_NestedUnion__2
  };

static TAO::TypeCode::Union<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::TypeCode::Case<char const *, ::CORBA::TypeCode_ptr const *> const * const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_Demo_NestedUnion (
    "IDL:Demo/NestedUnion:1.0",
    "NestedUnion",
    &CORBA::_tc_short,
    _tao_cases_Demo_NestedUnion,
    sizeof (_tao_cases_Demo_NestedUnion)/sizeof (_tao_cases_Demo_NestedUnion[0]),
    2);


namespace Demo
{
  ::CORBA::TypeCode_ptr const _tc_NestedUnion =
    &_tao_tc_Demo_NestedUnion;
}

// TAO_IDL - Generated from
// be/be_visitor_typecode/value_typecode.cpp:65

static TAO::TypeCode::Value_Field<char const *, ::CORBA::TypeCode_ptr const *> const _tao_fields_Demo_BaseValue[] =
  {
    { "str", &CORBA::_tc_string, ::CORBA::PUBLIC_MEMBER }

  };
static TAO::TypeCode::Value<char const *,
                     ::CORBA::TypeCode_ptr const *,
                     TAO::TypeCode::Value_Field<char const *, ::CORBA::TypeCode_ptr const *> const *,
                     TAO::Null_RefCount_Policy>
  _tao_tc_Demo_BaseValue (
    ::CORBA::tk_value,
    "IDL:Demo/BaseValue:1.0",
    "BaseValue",
    ::CORBA::VM_NONE,
    &::CORBA::_tc_null,
    _tao_fields_Demo_BaseValue,
    1);


namespace Demo
{
  ::CORBA::TypeCode_ptr const _tc_BaseValue =
    &_tao_tc_Demo_BaseValue;
}

// TAO_IDL - Generated from
// be/be_visitor_valuetype/valuetype_cs.cpp:53

void
TAO::Value_Traits<Demo::BaseValue>::add_ref (
    Demo::BaseValue * p)
{
  ::CORBA::add_ref (p);
}

void
TAO::Value_Traits<Demo::BaseValue>::remove_ref (
    Demo::BaseValue * p)
{
  ::CORBA::remove_ref (p);
}

void
TAO::Value_Traits<Demo::BaseValue>::release (
    Demo::BaseValue * p)
{
  ::CORBA::remove_ref (p);
}

Demo::BaseValue *
Demo::BaseValue::_downcast ( ::CORBA::ValueBase *v)
{
  return dynamic_cast< ::Demo::BaseValue * > (v);
}

const char *
Demo::BaseValue::_tao_obv_repository_id (void) const
{
  return this->_tao_obv_static_repository_id ();
}

void
Demo::BaseValue::_tao_obv_truncatable_repo_ids (Repository_Id_List& ids) const
{
  ids.push_back (this->_tao_obv_static_repository_id ());
}

void
Demo::BaseValue::_tao_any_destructor (void *_tao_void_pointer)
{
  BaseValue *_tao_tmp_pointer =
    static_cast<BaseValue *> (_tao_void_pointer);
  ::CORBA::remove_ref (_tao_tmp_pointer);
}

// TAO extension - the virtual _type method.
::CORBA::TypeCode_ptr Demo::BaseValue::_tao_type (void) const
{
  return ::Demo::_tc_BaseValue;
}

Demo::BaseValue::~BaseValue (void)
{}

::CORBA::Boolean
Demo::BaseValue::_tao_marshal_v (TAO_OutputCDR & strm) const
{
  TAO_ChunkInfo ci (this->is_truncatable_ || this->chunking_);
  return this->_tao_marshal__Demo_BaseValue (strm, ci);
}

::CORBA::Boolean
Demo::BaseValue::_tao_unmarshal_v (TAO_InputCDR & strm)
{
  TAO_ChunkInfo ci (this->is_truncatable_ || this->chunking_, 1);
  return this->_tao_unmarshal__Demo_BaseValue (strm,ci);
}

::CORBA::Boolean
Demo::BaseValue::_tao_match_formal_type (ptrdiff_t formal_type_id) const
{
  return formal_type_id == reinterpret_cast<ptrdiff_t> (Demo::BaseValue::_downcast);
}

::CORBA::Boolean
Demo::BaseValue::_tao_unmarshal (
    TAO_InputCDR &strm,
    BaseValue *&new_object
  )
{
  ::CORBA::ValueBase *base = 0;
  ::CORBA::Boolean is_indirected = false;
  ::CORBA::Boolean is_null_object = false;
  ::CORBA::Boolean const retval =
    ::CORBA::ValueBase::_tao_unmarshal_pre (
        strm,
        base,
        BaseValue::_tao_obv_static_repository_id (),
        is_null_object,
        is_indirected
      );

  ::CORBA::ValueBase_var owner (base);

  if (!retval)
    return false;

  if (is_null_object)
    return true;

  if (!is_indirected && !base->_tao_unmarshal_v (strm))
    return false;

  // Now base must point to the unmarshaled object.
  // Align the pointer to the right subobject.
  new_object = BaseValue::_downcast (base);
  if (0 == new_object)
    return false;

  if (is_indirected)
    new_object->_add_ref ();

  owner._retn ();
  return true;
}

// TAO_IDL - Generated from
// be/be_visitor_valuetype/valuetype_init_cs.cpp:73

Demo::BaseValue_init::BaseValue_init (void)
{
}

Demo::BaseValue_init::~BaseValue_init (void)
{
}

Demo::BaseValue_init *
Demo::BaseValue_init::_downcast ( ::CORBA::ValueFactoryBase *v)
{
  return dynamic_cast< ::Demo::BaseValue_init * > (v);
}

const char*
Demo::BaseValue_init::tao_repository_id (void)
{
  return ::Demo::BaseValue::_tao_obv_static_repository_id ();
}

// TAO_IDL - Generated from
// be/be_visitor_typecode/value_typecode.cpp:65

static TAO::TypeCode::Value_Field<char const *, ::CORBA::TypeCode_ptr const *> const _tao_fields_Demo_NestedValue[] =
  {
    { "foo1", &Demo::_tc_BaseValue, ::CORBA::PUBLIC_MEMBER },
    { "foo2", &Demo::_tc_BaseValue, ::CORBA::PUBLIC_MEMBER }

  };
static TAO::TypeCode::Value<char const *,
                     ::CORBA::TypeCode_ptr const *,
                     TAO::TypeCode::Value_Field<char const *, ::CORBA::TypeCode_ptr const *> const *,
                     TAO::Null_RefCount_Policy>
  _tao_tc_Demo_NestedValue (
    ::CORBA::tk_value,
    "IDL:Demo/NestedValue:1.0",
    "NestedValue",
    ::CORBA::VM_NONE,
    &::CORBA::_tc_null,
    _tao_fields_Demo_NestedValue,
    2);


namespace Demo
{
  ::CORBA::TypeCode_ptr const _tc_NestedValue =
    &_tao_tc_Demo_NestedValue;
}

// TAO_IDL - Generated from
// be/be_visitor_valuetype/valuetype_cs.cpp:53

void
TAO::Value_Traits<Demo::NestedValue>::add_ref (
    Demo::NestedValue * p)
{
  ::CORBA::add_ref (p);
}

void
TAO::Value_Traits<Demo::NestedValue>::remove_ref (
    Demo::NestedValue * p)
{
  ::CORBA::remove_ref (p);
}

void
TAO::Value_Traits<Demo::NestedValue>::release (
    Demo::NestedValue * p)
{
  ::CORBA::remove_ref (p);
}

Demo::NestedValue *
Demo::NestedValue::_downcast ( ::CORBA::ValueBase *v)
{
  return dynamic_cast< ::Demo::NestedValue * > (v);
}

const char *
Demo::NestedValue::_tao_obv_repository_id (void) const
{
  return this->_tao_obv_static_repository_id ();
}

void
Demo::NestedValue::_tao_obv_truncatable_repo_ids (Repository_Id_List& ids) const
{
  ids.push_back (this->_tao_obv_static_repository_id ());
}

void
Demo::NestedValue::_tao_any_destructor (void *_tao_void_pointer)
{
  NestedValue *_tao_tmp_pointer =
    static_cast<NestedValue *> (_tao_void_pointer);
  ::CORBA::remove_ref (_tao_tmp_pointer);
}

// TAO extension - the virtual _type method.
::CORBA::TypeCode_ptr Demo::NestedValue::_tao_type (void) const
{
  return ::Demo::_tc_NestedValue;
}

Demo::NestedValue::~NestedValue (void)
{}

::CORBA::Boolean
Demo::NestedValue::_tao_marshal_v (TAO_OutputCDR & strm) const
{
  TAO_ChunkInfo ci (this->is_truncatable_ || this->chunking_);
  return this->_tao_marshal__Demo_NestedValue (strm, ci);
}

::CORBA::Boolean
Demo::NestedValue::_tao_unmarshal_v (TAO_InputCDR & strm)
{
  TAO_ChunkInfo ci (this->is_truncatable_ || this->chunking_, 1);
  return this->_tao_unmarshal__Demo_NestedValue (strm,ci);
}

::CORBA::Boolean
Demo::NestedValue::_tao_match_formal_type (ptrdiff_t formal_type_id) const
{
  return formal_type_id == reinterpret_cast<ptrdiff_t> (Demo::NestedValue::_downcast);
}

::CORBA::Boolean
Demo::NestedValue::_tao_unmarshal (
    TAO_InputCDR &strm,
    NestedValue *&new_object
  )
{
  ::CORBA::ValueBase *base = 0;
  ::CORBA::Boolean is_indirected = false;
  ::CORBA::Boolean is_null_object = false;
  ::CORBA::Boolean const retval =
    ::CORBA::ValueBase::_tao_unmarshal_pre (
        strm,
        base,
        NestedValue::_tao_obv_static_repository_id (),
        is_null_object,
        is_indirected
      );

  ::CORBA::ValueBase_var owner (base);

  if (!retval)
    return false;

  if (is_null_object)
    return true;

  if (!is_indirected && !base->_tao_unmarshal_v (strm))
    return false;

  // Now base must point to the unmarshaled object.
  // Align the pointer to the right subobject.
  new_object = NestedValue::_downcast (base);
  if (0 == new_object)
    return false;

  if (is_indirected)
    new_object->_add_ref ();

  owner._retn ();
  return true;
}

// TAO_IDL - Generated from
// be/be_visitor_valuetype/valuetype_init_cs.cpp:73

Demo::NestedValue_init::NestedValue_init (void)
{
}

Demo::NestedValue_init::~NestedValue_init (void)
{
}

Demo::NestedValue_init *
Demo::NestedValue_init::_downcast ( ::CORBA::ValueFactoryBase *v)
{
  return dynamic_cast< ::Demo::NestedValue_init * > (v);
}

const char*
Demo::NestedValue_init::tao_repository_id (void)
{
  return ::Demo::NestedValue::_tao_obv_static_repository_id ();
}

::CORBA::ValueBase *
Demo::NestedValue_init::create_for_unmarshal (void)
{
  ::CORBA::ValueBase *ret_val = 0;
  ACE_NEW_THROW_EX (
      ret_val,
      OBV_Demo::NestedValue,
      ::CORBA::NO_MEMORY ()
    );
  return ret_val;
}

// TAO_IDL - Generated from
// be/be_visitor_interface/interface_cs.cpp:48

// Traits specializations for Demo::ATC_Test.

Demo::ATC_Test_ptr
TAO::Objref_Traits<Demo::ATC_Test>::duplicate (
    Demo::ATC_Test_ptr p)
{
  return Demo::ATC_Test::_duplicate (p);
}

void
TAO::Objref_Traits<Demo::ATC_Test>::release (
    Demo::ATC_Test_ptr p)
{
  ::CORBA::release (p);
}

Demo::ATC_Test_ptr
TAO::Objref_Traits<Demo::ATC_Test>::nil (void)
{
  return Demo::ATC_Test::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<Demo::ATC_Test>::marshal (
    const Demo::ATC_Test_ptr p,
    TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:88

char *
Demo::ATC_Test::do_struct (
  const ::CORBA::Any & a)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }

  TAO::Arg_Traits< char *>::ret_val _tao_retval;
  TAO::Arg_Traits< ::CORBA::Any>::in_arg_val _tao_a (a);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_a
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      2,
      "do_struct",
      9,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY

    );

  _tao_call.invoke (0, 0);

  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:88

char *
Demo::ATC_Test::do_union (
  const ::CORBA::Any & a)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }

  TAO::Arg_Traits< char *>::ret_val _tao_retval;
  TAO::Arg_Traits< ::CORBA::Any>::in_arg_val _tao_a (a);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_a
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      2,
      "do_union",
      8,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY

    );

  _tao_call.invoke (0, 0);

  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:88

char *
Demo::ATC_Test::do_value (
  const ::CORBA::Any & a)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }

  TAO::Arg_Traits< char *>::ret_val _tao_retval;
  TAO::Arg_Traits< ::CORBA::Any>::in_arg_val _tao_a (a);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_a
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      2,
      "do_value",
      8,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY

    );

  _tao_call.invoke (0, 0);

  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:88

void
Demo::ATC_Test::shutdown (
  void)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }

  TAO::Arg_Traits< void>::ret_val _tao_retval;

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      1,
      "shutdown",
      8,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY,
      TAO::TAO_ONEWAY_INVOCATION,
      TAO::TAO_SYNCHRONOUS_INVOCATION,
      false
    );

  _tao_call.invoke (0, 0);
}

Demo::ATC_Test::ATC_Test (void)
{
}

Demo::ATC_Test::~ATC_Test (void)
{
}

void
Demo::ATC_Test::_tao_any_destructor (void *_tao_void_pointer)
{
  ATC_Test *_tao_tmp_pointer =
    static_cast<ATC_Test *> (_tao_void_pointer);
  ::CORBA::release (_tao_tmp_pointer);
}

Demo::ATC_Test_ptr
Demo::ATC_Test::_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return
    TAO::Narrow_Utils<ATC_Test>::narrow (
        _tao_objref,
        "IDL:Demo/ATC_Test:1.0");
}

Demo::ATC_Test_ptr
Demo::ATC_Test::_unchecked_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return
    TAO::Narrow_Utils<ATC_Test>::unchecked_narrow (
        _tao_objref);
}

Demo::ATC_Test_ptr
Demo::ATC_Test::_nil (void)
{
  return 0;
}

Demo::ATC_Test_ptr
Demo::ATC_Test::_duplicate (ATC_Test_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  return obj;
}

void
Demo::ATC_Test::_tao_release (ATC_Test_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
Demo::ATC_Test::_is_a (const char *value)
{
  if (
      ACE_OS::strcmp (
          value,
          "IDL:Demo/ATC_Test:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        ) == 0
    )
    {
      return true; // success using local knowledge
    }
  else
    {
      return this->::CORBA::Object::_is_a (value);
    }
}

const char* Demo::ATC_Test::_interface_repository_id (void) const
{
  return "IDL:Demo/ATC_Test:1.0";
}

::CORBA::Boolean
Demo::ATC_Test::marshal (TAO_OutputCDR &cdr)
{
  return (cdr << this);
}

// TAO_IDL - Generated from
// be/be_visitor_typecode/objref_typecode.cpp:70

static TAO::TypeCode::Objref<char const *,
                             TAO::Null_RefCount_Policy>
  _tao_tc_Demo_ATC_Test (
    ::CORBA::tk_objref,
    "IDL:Demo/ATC_Test:1.0",
    "ATC_Test");


namespace Demo
{
  ::CORBA::TypeCode_ptr const _tc_ATC_Test =
    &_tao_tc_Demo_ATC_Test;
}

// TAO_IDL - Generated from
// be/be_visitor_valuetype/valuetype_obv_cs.cpp:44

OBV_Demo::BaseValue::BaseValue (void)
: require_truncation_ (false)
{}

OBV_Demo::BaseValue::BaseValue (
    const char * _tao_init_str)
: require_truncation_ (false)
{
  str (_tao_init_str);
}

OBV_Demo::BaseValue::~BaseValue (void)
{}

::CORBA::Boolean
OBV_Demo::BaseValue::_tao_marshal__Demo_BaseValue (TAO_OutputCDR &strm, TAO_ChunkInfo& ci) const
{
  return _tao_marshal_state (strm, ci);
}

::CORBA::Boolean
OBV_Demo::BaseValue::_tao_unmarshal__Demo_BaseValue (TAO_InputCDR &strm, TAO_ChunkInfo& ci)
{
  return _tao_unmarshal_state (strm, ci);
}

// TAO_IDL - Generated from
// be/be_visitor_valuetype/field_cs.cpp:834

/// Accessor to set the member.
void
OBV_Demo::BaseValue::str (char *val)
{
  this->_pd_str = (val);
}

/// Accessor to set the member.
void
OBV_Demo::BaseValue::str (const char *val)
{
  // Set the value.
  this->_pd_str = ::CORBA::string_dup (val);
}

/// Accessor to set the member.
void
OBV_Demo::BaseValue::str (const ::CORBA::String_var &val)
{
  ::CORBA::String_var str_var = val;
  this->_pd_str = str_var._retn ();
}

const char *
OBV_Demo::BaseValue::str (void) const // get method
{
  return this->_pd_str;
}

// TAO_IDL - Generated from
// be/be_visitor_valuetype/valuetype_obv_cs.cpp:44

OBV_Demo::NestedValue::NestedValue (void)
: require_truncation_ (false)
{}

OBV_Demo::NestedValue::NestedValue (
    ::Demo::BaseValue * _tao_init_foo1,
    ::Demo::BaseValue * _tao_init_foo2)
: require_truncation_ (false)
{
  foo1 (_tao_init_foo1);
  foo2 (_tao_init_foo2);
}

OBV_Demo::NestedValue::~NestedValue (void)
{}

::CORBA::ValueBase *
OBV_Demo::NestedValue::_copy_value (void)
{
  ::CORBA::ValueBase *ret_val = 0;
  ACE_NEW_THROW_EX (
    ret_val,
    NestedValue (
      (foo1 () ?
        Demo::BaseValue::_downcast (foo1 ()->_copy_value ())
        : 0),
      (foo2 () ?
        Demo::BaseValue::_downcast (foo2 ()->_copy_value ())
        : 0)
    ),
    ::CORBA::NO_MEMORY ()
  );
  return ret_val;
}

::CORBA::Boolean
OBV_Demo::NestedValue::_tao_marshal__Demo_NestedValue (TAO_OutputCDR &strm, TAO_ChunkInfo& ci) const
{
  return _tao_marshal_state (strm, ci);
}

::CORBA::Boolean
OBV_Demo::NestedValue::_tao_unmarshal__Demo_NestedValue (TAO_InputCDR &strm, TAO_ChunkInfo& ci)
{
  return _tao_unmarshal_state (strm, ci);
}

// TAO_IDL - Generated from
// be/be_visitor_valuetype/field_cs.cpp:430

/// Accessor to set the member.
void
OBV_Demo::NestedValue::foo1 (Demo::BaseValue* val)
{
  ::CORBA::add_ref (val);
  this->_pd_foo1 = val;
}

/// Retrieve the member
Demo::BaseValue *
OBV_Demo::NestedValue::foo1 () const
{
  return this->_pd_foo1.in ();
}

// TAO_IDL - Generated from
// be/be_visitor_valuetype/field_cs.cpp:430

/// Accessor to set the member.
void
OBV_Demo::NestedValue::foo2 (Demo::BaseValue* val)
{
  ::CORBA::add_ref (val);
  this->_pd_foo2 = val;
}

/// Retrieve the member
Demo::BaseValue *
OBV_Demo::NestedValue::foo2 () const
{
  return this->_pd_foo2.in ();
}

// TAO_IDL - Generated from
// be/be_visitor_structure/any_op_cs.cpp:43



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace Demo
{
  /// Copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      const ::Demo::BaseStruct &_tao_elem)
  {
    TAO::Any_Dual_Impl_T< ::Demo::BaseStruct>::insert_copy (
        _tao_any,
        ::Demo::BaseStruct::_tao_any_destructor,
        ::Demo::_tc_BaseStruct,
        _tao_elem);
}

/// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any, ::
    Demo::BaseStruct *_tao_elem)
{
  TAO::Any_Dual_Impl_T< ::Demo::BaseStruct>::insert (
      _tao_any,
      ::Demo::BaseStruct::_tao_any_destructor,
      ::Demo::_tc_BaseStruct,
      _tao_elem);
}

/// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    ::Demo::BaseStruct *&_tao_elem)
{
  return _tao_any >>= const_cast<
      const ::Demo::BaseStruct *&> (
      _tao_elem);
}

/// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const ::Demo::BaseStruct *&_tao_elem)
{
  return
    TAO::Any_Dual_Impl_T< ::Demo::BaseStruct>::extract (
        _tao_any,
        ::Demo::BaseStruct::_tao_any_destructor,
        ::Demo::_tc_BaseStruct,
        _tao_elem
      );
}
}

#else

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

/// Copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  const Demo::BaseStruct &_tao_elem)
{
  TAO::Any_Dual_Impl_T<Demo::BaseStruct>::insert_copy (
    _tao_any,
    Demo::BaseStruct::_tao_any_destructor,
    Demo::_tc_BaseStruct,
    _tao_elem);
}

/// Non-copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  Demo::BaseStruct *_tao_elem)
{
  TAO::Any_Dual_Impl_T<Demo::BaseStruct>::insert (
    _tao_any,
    Demo::BaseStruct::_tao_any_destructor,
    Demo::_tc_BaseStruct,
    _tao_elem);
}

/// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
  const ::CORBA::Any &_tao_any,
  Demo::BaseStruct *&_tao_elem)
{
  return _tao_any >>= const_cast<
      const Demo::BaseStruct *&> (
      _tao_elem);
}

/// Extraction to const pointer.
::CORBA::Boolean operator>>= (
  const ::CORBA::Any &_tao_any,
  const Demo::BaseStruct *&_tao_elem)
{
  return
    TAO::Any_Dual_Impl_T<Demo::BaseStruct>::extract (
      _tao_any,
      Demo::BaseStruct::_tao_any_destructor,
      Demo::_tc_BaseStruct,
      _tao_elem);
}
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_sequence/any_op_cs.cpp:45


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


TAO_END_VERSIONED_NAMESPACE_DECL



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace Demo
{

  // Copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      const ::Demo::NestedSeq &_tao_elem
    )
  {
    TAO::Any_Dual_Impl_T< ::Demo::NestedSeq>::insert_copy (
        _tao_any,
        ::Demo::NestedSeq::_tao_any_destructor,
        ::Demo::_tc_NestedSeq,
        _tao_elem
      );
}

// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    ::Demo::NestedSeq *_tao_elem)
{
  TAO::Any_Dual_Impl_T< ::Demo::NestedSeq>::insert (
      _tao_any,
      ::Demo::NestedSeq::_tao_any_destructor,
      ::Demo::_tc_NestedSeq,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    ::Demo::NestedSeq *&_tao_elem)
{
  return _tao_any >>= const_cast<
      const ::Demo::NestedSeq *&> (
      _tao_elem
    );
}

// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const ::Demo::NestedSeq *&_tao_elem)
{
  return
    TAO::Any_Dual_Impl_T< ::Demo::NestedSeq>::extract (
        _tao_any,
        ::Demo::NestedSeq::_tao_any_destructor,
        ::Demo::_tc_NestedSeq,
        _tao_elem
      );
}
}

#else


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


// Copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    const Demo::NestedSeq &_tao_elem)
{
  TAO::Any_Dual_Impl_T<Demo::NestedSeq>::insert_copy (
      _tao_any,
      Demo::NestedSeq::_tao_any_destructor,
      Demo::_tc_NestedSeq,
      _tao_elem
    );
}

// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    Demo::NestedSeq *_tao_elem)
{
  TAO::Any_Dual_Impl_T<Demo::NestedSeq>::insert (
      _tao_any,
      Demo::NestedSeq::_tao_any_destructor,
      Demo::_tc_NestedSeq,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    Demo::NestedSeq *&_tao_elem)
{
  return _tao_any >>= const_cast<
      const Demo::NestedSeq *&> (
      _tao_elem
    );
}

// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const Demo::NestedSeq *&_tao_elem)
{
  return
    TAO::Any_Dual_Impl_T<Demo::NestedSeq>::extract (
        _tao_any,
        Demo::NestedSeq::_tao_any_destructor,
        Demo::_tc_NestedSeq,
        _tao_elem);
}
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_structure/any_op_cs.cpp:43



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace Demo
{
  /// Copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      const ::Demo::NestedStruct &_tao_elem)
  {
    TAO::Any_Dual_Impl_T< ::Demo::NestedStruct>::insert_copy (
        _tao_any,
        ::Demo::NestedStruct::_tao_any_destructor,
        ::Demo::_tc_NestedStruct,
        _tao_elem);
}

/// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any, ::
    Demo::NestedStruct *_tao_elem)
{
  TAO::Any_Dual_Impl_T< ::Demo::NestedStruct>::insert (
      _tao_any,
      ::Demo::NestedStruct::_tao_any_destructor,
      ::Demo::_tc_NestedStruct,
      _tao_elem);
}

/// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    ::Demo::NestedStruct *&_tao_elem)
{
  return _tao_any >>= const_cast<
      const ::Demo::NestedStruct *&> (
      _tao_elem);
}

/// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const ::Demo::NestedStruct *&_tao_elem)
{
  return
    TAO::Any_Dual_Impl_T< ::Demo::NestedStruct>::extract (
        _tao_any,
        ::Demo::NestedStruct::_tao_any_destructor,
        ::Demo::_tc_NestedStruct,
        _tao_elem
      );
}
}

#else

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

/// Copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  const Demo::NestedStruct &_tao_elem)
{
  TAO::Any_Dual_Impl_T<Demo::NestedStruct>::insert_copy (
    _tao_any,
    Demo::NestedStruct::_tao_any_destructor,
    Demo::_tc_NestedStruct,
    _tao_elem);
}

/// Non-copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  Demo::NestedStruct *_tao_elem)
{
  TAO::Any_Dual_Impl_T<Demo::NestedStruct>::insert (
    _tao_any,
    Demo::NestedStruct::_tao_any_destructor,
    Demo::_tc_NestedStruct,
    _tao_elem);
}

/// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
  const ::CORBA::Any &_tao_any,
  Demo::NestedStruct *&_tao_elem)
{
  return _tao_any >>= const_cast<
      const Demo::NestedStruct *&> (
      _tao_elem);
}

/// Extraction to const pointer.
::CORBA::Boolean operator>>= (
  const ::CORBA::Any &_tao_any,
  const Demo::NestedStruct *&_tao_elem)
{
  return
    TAO::Any_Dual_Impl_T<Demo::NestedStruct>::extract (
      _tao_any,
      Demo::NestedStruct::_tao_any_destructor,
      Demo::_tc_NestedStruct,
      _tao_elem);
}
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_union/any_op_cs.cpp:37


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


TAO_END_VERSIONED_NAMESPACE_DECL



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace Demo
{
  // Copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      const ::Demo::BaseUnion &_tao_elem
    )
  {
    TAO::Any_Dual_Impl_T< ::Demo::BaseUnion>::insert_copy (
        _tao_any,
        ::Demo::BaseUnion::_tao_any_destructor,
        ::Demo::_tc_BaseUnion,
        _tao_elem
      );
}

// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    ::Demo::BaseUnion *_tao_elem
  )
{
  TAO::Any_Dual_Impl_T< ::Demo::BaseUnion>::insert (
      _tao_any,
      ::Demo::BaseUnion::_tao_any_destructor,
      ::Demo::_tc_BaseUnion,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    ::Demo::BaseUnion *&_tao_elem
  )
{
  return _tao_any >>= const_cast<
      const ::Demo::BaseUnion *&> (
      _tao_elem
    );
}

// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const ::Demo::BaseUnion *&_tao_elem
  )
{
  return
    TAO::Any_Dual_Impl_T< ::Demo::BaseUnion>::extract (
        _tao_any,
        ::Demo::BaseUnion::_tao_any_destructor,
        ::Demo::_tc_BaseUnion,
        _tao_elem
      );
}
}

#else

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    const Demo::BaseUnion &_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<Demo::BaseUnion>::insert_copy (
      _tao_any,
      Demo::BaseUnion::_tao_any_destructor,
      Demo::_tc_BaseUnion,
      _tao_elem
    );
}

// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    Demo::BaseUnion *_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<Demo::BaseUnion>::insert (
      _tao_any,
      Demo::BaseUnion::_tao_any_destructor,
      Demo::_tc_BaseUnion,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    Demo::BaseUnion *&_tao_elem
  )
{
  return _tao_any >>= const_cast<
      const Demo::BaseUnion *&> (
      _tao_elem
    );
}

// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const Demo::BaseUnion *&_tao_elem
  )
{
  return
    TAO::Any_Dual_Impl_T<Demo::BaseUnion>::extract (
        _tao_any,
        Demo::BaseUnion::_tao_any_destructor,
        Demo::_tc_BaseUnion,
        _tao_elem
      );
}
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_union/any_op_cs.cpp:37


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


TAO_END_VERSIONED_NAMESPACE_DECL



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace Demo
{
  // Copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      const ::Demo::NestedUnion &_tao_elem
    )
  {
    TAO::Any_Dual_Impl_T< ::Demo::NestedUnion>::insert_copy (
        _tao_any,
        ::Demo::NestedUnion::_tao_any_destructor,
        ::Demo::_tc_NestedUnion,
        _tao_elem
      );
}

// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    ::Demo::NestedUnion *_tao_elem
  )
{
  TAO::Any_Dual_Impl_T< ::Demo::NestedUnion>::insert (
      _tao_any,
      ::Demo::NestedUnion::_tao_any_destructor,
      ::Demo::_tc_NestedUnion,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    ::Demo::NestedUnion *&_tao_elem
  )
{
  return _tao_any >>= const_cast<
      const ::Demo::NestedUnion *&> (
      _tao_elem
    );
}

// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const ::Demo::NestedUnion *&_tao_elem
  )
{
  return
    TAO::Any_Dual_Impl_T< ::Demo::NestedUnion>::extract (
        _tao_any,
        ::Demo::NestedUnion::_tao_any_destructor,
        ::Demo::_tc_NestedUnion,
        _tao_elem
      );
}
}

#else

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    const Demo::NestedUnion &_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<Demo::NestedUnion>::insert_copy (
      _tao_any,
      Demo::NestedUnion::_tao_any_destructor,
      Demo::_tc_NestedUnion,
      _tao_elem
    );
}

// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    Demo::NestedUnion *_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<Demo::NestedUnion>::insert (
      _tao_any,
      Demo::NestedUnion::_tao_any_destructor,
      Demo::_tc_NestedUnion,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    Demo::NestedUnion *&_tao_elem
  )
{
  return _tao_any >>= const_cast<
      const Demo::NestedUnion *&> (
      _tao_elem
    );
}

// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const Demo::NestedUnion *&_tao_elem
  )
{
  return
    TAO::Any_Dual_Impl_T<Demo::NestedUnion>::extract (
        _tao_any,
        Demo::NestedUnion::_tao_any_destructor,
        Demo::_tc_NestedUnion,
        _tao_elem
      );
}
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_valuetype/any_op_cs.cpp:45
TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<Demo::BaseValue>::to_value (
      ::CORBA::ValueBase *&_tao_elem
    ) const
  {
    ::CORBA::add_ref (this->value_);
    _tao_elem = this->value_;
    return true;
  }
}


TAO_END_VERSIONED_NAMESPACE_DECL



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace Demo
{
  // Copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      BaseValue *_tao_elem
    )
  {
    #ifdef TAO_VALUETYPE_COPYING_ANY_INSERTION_USES_COPY_VALUE
      BaseValue *_tao_copy =
        _tao_elem ?
          BaseValue::_downcast (_tao_elem->_copy_value ())
          : 0;
      _tao_any <<= &_tao_copy;
    #else
      ::CORBA::add_ref (_tao_elem);
      _tao_any <<= &_tao_elem;
    #endif
  }

  // Non-copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      BaseValue **_tao_elem
    )
  {
    TAO::Any_Impl_T<BaseValue>::insert (
        _tao_any,
        BaseValue::_tao_any_destructor,
        _tc_BaseValue,
        *_tao_elem
      );
  }

  ::CORBA::Boolean
  operator>>= (
      const ::CORBA::Any &_tao_any,
      BaseValue *&_tao_elem
    )
  {
    return
      TAO::Any_Impl_T<BaseValue>::extract (
          _tao_any,
          BaseValue::_tao_any_destructor,
          _tc_BaseValue,
          _tao_elem
        );
  }


}

#else


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    Demo::BaseValue *_tao_elem
  )
{
  #ifdef TAO_VALUETYPE_COPYING_ANY_INSERTION_USES_COPY_VALUE
    Demo::BaseValue *_tao_copy =
      _tao_elem ?
        Demo::BaseValue::_downcast (_tao_elem->_copy_value ())
        : 0;
    _tao_any <<= &_tao_copy;
  #else
    ::CORBA::add_ref (_tao_elem);
    _tao_any <<= &_tao_elem;
  #endif
}

// Non-copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    Demo::BaseValue **_tao_elem
  )
{
  TAO::Any_Impl_T<Demo::BaseValue>::insert (
      _tao_any,
      Demo::BaseValue::_tao_any_destructor,
      Demo::_tc_BaseValue,
      *_tao_elem
    );
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    Demo::BaseValue *&_tao_elem
  )
{
  return
    TAO::Any_Impl_T<Demo::BaseValue>::extract (
        _tao_any,
        Demo::BaseValue::_tao_any_destructor,
        Demo::_tc_BaseValue,
        _tao_elem
      );
}


TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_valuetype/any_op_cs.cpp:45
TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<Demo::NestedValue>::to_value (
      ::CORBA::ValueBase *&_tao_elem
    ) const
  {
    ::CORBA::add_ref (this->value_);
    _tao_elem = this->value_;
    return true;
  }
}


TAO_END_VERSIONED_NAMESPACE_DECL



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace Demo
{
  // Copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      NestedValue *_tao_elem
    )
  {
    #ifdef TAO_VALUETYPE_COPYING_ANY_INSERTION_USES_COPY_VALUE
      NestedValue *_tao_copy =
        _tao_elem ?
          NestedValue::_downcast (_tao_elem->_copy_value ())
          : 0;
      _tao_any <<= &_tao_copy;
    #else
      ::CORBA::add_ref (_tao_elem);
      _tao_any <<= &_tao_elem;
    #endif
  }

  // Non-copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      NestedValue **_tao_elem
    )
  {
    TAO::Any_Impl_T<NestedValue>::insert (
        _tao_any,
        NestedValue::_tao_any_destructor,
        _tc_NestedValue,
        *_tao_elem
      );
  }

  ::CORBA::Boolean
  operator>>= (
      const ::CORBA::Any &_tao_any,
      NestedValue *&_tao_elem
    )
  {
    return
      TAO::Any_Impl_T<NestedValue>::extract (
          _tao_any,
          NestedValue::_tao_any_destructor,
          _tc_NestedValue,
          _tao_elem
        );
  }


}

#else


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    Demo::NestedValue *_tao_elem
  )
{
  #ifdef TAO_VALUETYPE_COPYING_ANY_INSERTION_USES_COPY_VALUE
    Demo::NestedValue *_tao_copy =
      _tao_elem ?
        Demo::NestedValue::_downcast (_tao_elem->_copy_value ())
        : 0;
    _tao_any <<= &_tao_copy;
  #else
    ::CORBA::add_ref (_tao_elem);
    _tao_any <<= &_tao_elem;
  #endif
}

// Non-copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    Demo::NestedValue **_tao_elem
  )
{
  TAO::Any_Impl_T<Demo::NestedValue>::insert (
      _tao_any,
      Demo::NestedValue::_tao_any_destructor,
      Demo::_tc_NestedValue,
      *_tao_elem
    );
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    Demo::NestedValue *&_tao_elem
  )
{
  return
    TAO::Any_Impl_T<Demo::NestedValue>::extract (
        _tao_any,
        Demo::NestedValue::_tao_any_destructor,
        Demo::_tc_NestedValue,
        _tao_elem
      );
}


TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_interface/any_op_cs.cpp:38
TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<Demo::ATC_Test>::to_object (
      ::CORBA::Object_ptr &_tao_elem) const
  {
    _tao_elem = ::CORBA::Object::_duplicate (this->value_);
    return true;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace Demo
{


  /// Copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      ATC_Test_ptr _tao_elem)
  {
    ATC_Test_ptr _tao_objptr =
      ATC_Test::_duplicate (_tao_elem);
    _tao_any <<= &_tao_objptr;
  }

  /// Non-copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      ATC_Test_ptr *_tao_elem)
  {
    TAO::Any_Impl_T<ATC_Test>::insert (
        _tao_any,
        ATC_Test::_tao_any_destructor,
        _tc_ATC_Test,
        *_tao_elem);
  }

  ::CORBA::Boolean
  operator>>= (
      const ::CORBA::Any &_tao_any,
      ATC_Test_ptr &_tao_elem)
  {
    return
      TAO::Any_Impl_T<ATC_Test>::extract (
          _tao_any,
          ATC_Test::_tao_any_destructor,
          _tc_ATC_Test,
          _tao_elem);
  }
}

#else

TAO_BEGIN_VERSIONED_NAMESPACE_DECL



/// Copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    Demo::ATC_Test_ptr _tao_elem)
{
  Demo::ATC_Test_ptr _tao_objptr =
    Demo::ATC_Test::_duplicate (_tao_elem);
  _tao_any <<= &_tao_objptr;
}

/// Non-copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    Demo::ATC_Test_ptr *_tao_elem)
{
  TAO::Any_Impl_T<Demo::ATC_Test>::insert (
      _tao_any,
      Demo::ATC_Test::_tao_any_destructor,
      Demo::_tc_ATC_Test,
      *_tao_elem);
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    Demo::ATC_Test_ptr &_tao_elem)
{
  return
    TAO::Any_Impl_T<Demo::ATC_Test>::extract (
        _tao_any,
        Demo::ATC_Test::_tao_any_destructor,
        Demo::_tc_ATC_Test,
        _tao_elem);
}

TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_structure/cdr_op_cs.cpp:49

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Demo::BaseStruct &_tao_aggregate)
{
  return
    (strm << _tao_aggregate.str.in ());
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Demo::BaseStruct &_tao_aggregate)
{
  return
    (strm >> _tao_aggregate.str.out ());
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_sequence/cdr_op_cs.cpp:93
#if !defined _TAO_CDR_OP_Demo_NestedSeq_CPP_
#define _TAO_CDR_OP_Demo_NestedSeq_CPP_

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Demo::NestedSeq &_tao_sequence)
{
  return TAO::marshal_sequence(strm, _tao_sequence);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Demo::NestedSeq &_tao_sequence)
{
  return TAO::demarshal_sequence(strm, _tao_sequence);
}


TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_CDR_OP_Demo_NestedSeq_CPP_ */

// TAO_IDL - Generated from
// be/be_visitor_structure/cdr_op_cs.cpp:49

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Demo::NestedStruct &_tao_aggregate)
{
  return
    (strm << _tao_aggregate.foo1) &&
    (strm << _tao_aggregate.foo2) &&
    (strm << _tao_aggregate.foo3) &&
    (strm << _tao_aggregate.bars);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Demo::NestedStruct &_tao_aggregate)
{
  return
    (strm >> _tao_aggregate.foo1) &&
    (strm >> _tao_aggregate.foo2) &&
    (strm >> _tao_aggregate.foo3) &&
    (strm >> _tao_aggregate.bars);
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_union/cdr_op_cs.cpp:74


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Demo::BaseUnion &_tao_union
  )
{
  if ( !(strm << _tao_union._d ()) )
    {
      return false;
    }

  ::CORBA::Boolean result = true;

  switch (_tao_union._d ())
  {
    case 1:
      {
        result = strm << _tao_union.str ();
      }
      break;
    case 2:
      {
        result = strm << _tao_union.l ();
      }
      break;
    default:
      {
        result = strm << _tao_union.s ();
      }
      break;
  }

  return result;
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Demo::BaseUnion &_tao_union
  )
{
  CORBA::Short _tao_discriminant;
  if ( !(strm >> _tao_discriminant) )
    {
      return false;
    }

  ::CORBA::Boolean result = true;

  switch (_tao_discriminant)
  {
    case 1:
      {
        ::CORBA::String_var _tao_union_tmp;
        result = strm >> _tao_union_tmp.out ();

        if (result)
          {
            _tao_union.str (_tao_union_tmp);
            _tao_union._d (_tao_discriminant);
          }
      }
      break;
    case 2:
      {
        CORBA::Long _tao_union_tmp;
        result = strm >> _tao_union_tmp;

        if (result)
          {
            _tao_union.l (_tao_union_tmp);
            _tao_union._d (_tao_discriminant);
          }
      }
      break;
    default:
      {
        CORBA::Short _tao_union_tmp;
        result = strm >> _tao_union_tmp;

        if (result)
          {
            _tao_union.s (_tao_union_tmp);
            _tao_union._d (_tao_discriminant);
          }
      }
      break;
  }

  return result;
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_union/cdr_op_cs.cpp:74


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Demo::NestedUnion &_tao_union
  )
{
  if ( !(strm << _tao_union._d ()) )
    {
      return false;
    }

  ::CORBA::Boolean result = true;

  switch (_tao_union._d ())
  {
    case 1:
      {
        result = strm << _tao_union.bar1 ();
      }
      break;
    case 2:
      {
        result = strm << _tao_union.bar2 ();
      }
      break;
    default:
      {
        result = strm << _tao_union.defaultBar ();
      }
      break;
  }

  return result;
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Demo::NestedUnion &_tao_union
  )
{
  CORBA::Short _tao_discriminant;
  if ( !(strm >> _tao_discriminant) )
    {
      return false;
    }

  ::CORBA::Boolean result = true;

  switch (_tao_discriminant)
  {
    case 1:
      {
        Demo::BaseUnion _tao_union_tmp;
        result = strm >> _tao_union_tmp;

        if (result)
          {
            _tao_union.bar1 (_tao_union_tmp);
            _tao_union._d (_tao_discriminant);
          }

      }
      break;
    case 2:
      {
        Demo::BaseUnion _tao_union_tmp;
        result = strm >> _tao_union_tmp;

        if (result)
          {
            _tao_union.bar2 (_tao_union_tmp);
            _tao_union._d (_tao_discriminant);
          }

      }
      break;
    default:
      {
        Demo::BaseUnion _tao_union_tmp;
        result = strm >> _tao_union_tmp;

        if (result)
          {
            _tao_union.defaultBar (_tao_union_tmp);
            _tao_union._d (_tao_discriminant);
          }

      }
      break;
  }

  return result;
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_valuetype.cpp:512

void
CORBA::add_ref (Demo::BaseValue * vt)
{
  if (vt != 0)
    {
      vt->_add_ref ();
    }
}

void
CORBA::remove_ref (Demo::BaseValue * vt)
{
  if (vt != 0)
    {
      vt->_remove_ref ();
    }
}

// TAO_IDL - Generated from
// be/be_visitor_valuetype/cdr_op_cs.cpp:60


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean
operator<< (
    TAO_OutputCDR &strm,
    const Demo::BaseValue *_tao_valuetype
  )
{
  return
    ::CORBA::ValueBase::_tao_marshal (
        strm,
        _tao_valuetype,
        reinterpret_cast<ptrdiff_t> (&Demo::BaseValue::_downcast)
      );
}

::CORBA::Boolean
operator>> (
    TAO_InputCDR &strm,
    Demo::BaseValue *&_tao_valuetype
  )
{
  return Demo::BaseValue::_tao_unmarshal (strm, _tao_valuetype);
}


TAO_END_VERSIONED_NAMESPACE_DECL

// TAO_IDL - Generated from
// be/be_visitor_valuetype/marshal_cs.cpp:33

::CORBA::Boolean
OBV_Demo::BaseValue::_tao_marshal_state (TAO_OutputCDR &strm, TAO_ChunkInfo&ci) const
{
  if (! ci.start_chunk (strm))
    return false;

  CORBA::Boolean const ret =
      (strm << _pd_str.in ());
  if ( ! ret)
    return false;

  if (! ci.end_chunk (strm))
    return false;

  return true;
}

::CORBA::Boolean
OBV_Demo::BaseValue::_tao_unmarshal_state (TAO_InputCDR &strm, TAO_ChunkInfo&ci)
{
  if (!ci.handle_chunking (strm))
    return false;

  CORBA::Boolean const ret =
      (strm >> _pd_str.out ());
  if (!ret)
    return false;

  if (this->require_truncation_)
    return ci.skip_chunks (strm);

  else
    return ci.handle_chunking (strm);


}

void
OBV_Demo::BaseValue::truncation_hook (void)
{
  this->require_truncation_ = true;
}



// TAO_IDL - Generated from
// be/be_valuetype.cpp:512

void
CORBA::add_ref (Demo::NestedValue * vt)
{
  if (vt != 0)
    {
      vt->_add_ref ();
    }
}

void
CORBA::remove_ref (Demo::NestedValue * vt)
{
  if (vt != 0)
    {
      vt->_remove_ref ();
    }
}

// TAO_IDL - Generated from
// be/be_visitor_valuetype/cdr_op_cs.cpp:60


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean
operator<< (
    TAO_OutputCDR &strm,
    const Demo::NestedValue *_tao_valuetype
  )
{
  return
    ::CORBA::ValueBase::_tao_marshal (
        strm,
        _tao_valuetype,
        reinterpret_cast<ptrdiff_t> (&Demo::NestedValue::_downcast)
      );
}

::CORBA::Boolean
operator>> (
    TAO_InputCDR &strm,
    Demo::NestedValue *&_tao_valuetype
  )
{
  return Demo::NestedValue::_tao_unmarshal (strm, _tao_valuetype);
}


TAO_END_VERSIONED_NAMESPACE_DECL

// TAO_IDL - Generated from
// be/be_visitor_valuetype/marshal_cs.cpp:33

::CORBA::Boolean
OBV_Demo::NestedValue::_tao_marshal_state (TAO_OutputCDR &strm, TAO_ChunkInfo&ci) const
{
  if (! ci.start_chunk (strm))
    return false;

  CORBA::Boolean const ret =
      (strm << _pd_foo1.in ()) &&
      (strm << _pd_foo2.in ());
  if ( ! ret)
    return false;

  if (! ci.end_chunk (strm))
    return false;

  return true;
}

::CORBA::Boolean
OBV_Demo::NestedValue::_tao_unmarshal_state (TAO_InputCDR &strm, TAO_ChunkInfo&ci)
{
  if (!ci.handle_chunking (strm))
    return false;

  CORBA::Boolean const ret =
      (strm >> _pd_foo1.out ()) &&
      (strm >> _pd_foo2.out ());
  if (!ret)
    return false;

  if (this->require_truncation_)
    return ci.skip_chunks (strm);

  else
    return ci.handle_chunking (strm);


}

void
OBV_Demo::NestedValue::truncation_hook (void)
{
  this->require_truncation_ = true;
}



// TAO_IDL - Generated from
// be/be_visitor_interface/cdr_op_cs.cpp:51

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Demo::ATC_Test_ptr _tao_objref)
{
  ::CORBA::Object_ptr _tao_corba_obj = _tao_objref;
  return (strm << _tao_corba_obj);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Demo::ATC_Test_ptr &_tao_objref)
{
  ::CORBA::Object_var obj;

  if (!(strm >> obj.inout ()))
    {
      return false;
    }

  typedef ::Demo::ATC_Test RHS_SCOPED_NAME;

  // Narrow to the right type.
  _tao_objref =
    TAO::Narrow_Utils<RHS_SCOPED_NAME>::unchecked_narrow (obj.in ());

  return true;
}

TAO_END_VERSIONED_NAMESPACE_DECL



