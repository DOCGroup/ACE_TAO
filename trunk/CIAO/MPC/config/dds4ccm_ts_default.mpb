// -*- MPC -*-
// $Id$

feature(dds4ccm_opendds) : dds4ccm, dcps_ts_defaults, dcps, typecode {
  Define_Custom(DDSGenerator) : TypeSupport {
    commandflags += -Wb,opendds_sequence_suffix=DDSSeq
    keyword opendds_ts_flags = commandflags
    keyword dds_ts_flags = commandflags
  }
}

feature(dds4ccm_splice) : dds4ccm, splice_ts_defaults {
  Define_Custom(DDSGenerator) : SpliceTypeSupport {
    keyword dds_ts_flags = commandflags
  }
}

feature(dds4ccm_coredx) : dds4ccm, coredx_ts_defaults, coredxlib {
  Define_Custom(DDSGenerator) : CoreDXTypeSupport {
    keyword dds_ts_flags = commandflags
  }
}

feature(dds4ccm_ndds) : dds4ccm, ndds_idltocpp_ts_defaults {
}

feature(!dds4ccm_opendds) {
  // this allows the user's project to reference opendds_ts_flags,
  // which will simply be ignored
  Define_Custom(OpenDDSDummyTypeSupport) {
    keyword opendds_ts_flags
  }
}

feature(!dds4ccm_ndds) {
  // this allows the user's project to reference ndds_ts_flags,
  // which will simply be ignored
  Define_Custom(NDDSDummyTypeSupport) {
    keyword ndds_ts_flags
  }
}

feature(!dds4ccm_splice) {
  // this allows the user's project to reference splice_ts_flags,
  // which will simply be ignored
  Define_Custom(SpliceDummyTypeSupport) {
    keyword splice_ts_flags
  }
}

feature(!dds4ccm_coredx) {
  // this allows the user's project to reference coredx_ts_flags,
  // which will simply be ignored
  Define_Custom(CoreDXDummyTypeSupport) {
    keyword coredx_ts_flags
  }
}

feature(!dds4ccm_opendds, !dds4ccm_ndds, !dds4ccm_splice, !dds4ccm_coredx) : typecode {
  Define_Custom(DDSGenerator) {
    keyword dds_ts_flags
  }
}

