// $Id$
// This file is generated with "generate_component_mpc.pl Foo"

project(Foo_idl_gen) : componentidldefaults   {
  custom_only = 1
  idlflags += -Wb,stub_export_macro=FOO_STUB_Export \
              -Wb,stub_export_include=Foo_stub_export.h \
              -Wb,skel_export_macro=FOO_SVNT_Export \
              -Wb,skel_export_include=Foo_svnt_export.h \
              -Wb,exec_export_macro=FOO_EXEC_Export \
              -Wb,exec_export_include=Foo_exec_export.h \
              -Gxhex -Gxhsk -Gxhst -Gex

  IDL_Files {
    Foo.idl
  }
}

project(Foo_lem_gen) : ciaoidldefaults   {
  after += Foo_idl_gen
  custom_only = 1
  idlflags += -Wb,stub_export_macro=FOO_LEM_STUB_Export \
              -Wb,stub_export_include=Foo_lem_stub_export.h \
              -SS -Gxhst

  IDL_Files {
    FooE.idl
  }
}

project(Foo_lem_stub) : ccm_svnt   {
  after += Foo_lem_gen Foo_stub 
  libs  +=  Foo_stub
  
  
  sharedname = Foo_lem_stub
  dynamicflags   = FOO_LEM_STUB_BUILD_DLL

  IDL_Files {
  }

  Source_Files {
    FooEC.cpp
  }

  Header_Files {
    FooEC.h
    Foo_lem_stub_export.h
  }

  Inline_Files {
    FooEC.inl
  }
}

project(Foo_stub) : ccm_stub   {
  after += Foo_idl_gen 
  libs  += 
  
  
  sharedname = Foo_stub
  dynamicflags   = FOO_STUB_BUILD_DLL

  IDL_Files {
  }

  Source_Files {
    FooC.cpp
  }

  Header_Files {
    FooC.h
    Foo_stub_export.h
  }

  Inline_Files {
    FooC.inl
  }
}

project(Foo_exec) : ciao_executor   {
  after   += Foo_lem_stub Foo_stub
  sharedname = Foo_exec
  libs += Foo_stub Foo_lem_stub 
  
  
  dynamicflags   = FOO_EXEC_BUILD_DLL

  IDL_Files {
  }

  Source_Files {
    Foo_exec.cpp
  }

  Header_Files {
    Foo_exec.h
    Foo_exec_export.h
  }

  Inline_Files {
  }
}


project(Foo_svnt) : ciao_servant   {
  after      +=   Foo_lem_stub
  sharedname  = Foo_svnt
  libs       += Foo_stub Foo_lem_stub  
  
  
  dynamicflags = FOO_SVNT_BUILD_DLL
  
  IDL_Files {
  }

  Source_Files {
    FooS.cpp
    Foo_svnt.cpp
  }

  Header_Files {
    FooS.h
    Foo_svnt.h
    Foo_svnt_export.h
  }

  Inline_Files {
    FooS.inl
  }
}


