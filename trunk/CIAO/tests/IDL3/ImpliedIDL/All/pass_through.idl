// $Id$
/**
 * @file pass_through.idl
 * @author Jeff Parsons <j.parsons@vanderbilt.edu>
 *
 * Tests tool's regeneration of IDL2 constructs, which
 * should be basically unchanged.
 */

#pragma prefix "glooby"

#include "include.idl"
#include "raw_include.idl"

module pre_mod
{
  module inner
  {
    typedef long fork;
  };
  
  union uke switch (which)
  {
    case ONE:
    case ZERO: string str_mem;
    default: short s_mem;
  };
};

module mod
{
  typeid mod "rama:lama/ding:dong";

  interface base
  {
    readonly attribute unsigned long long ull_attr
      raises (pre_mod::wrong);
  };

  interface foo
  {
    typeprefix foo "preefy";
    
    exception wrongety_wrong
    {
      base unrelated;
      string explanation;
    };
    
    attribute base base_attr
      getraises (wrongety_wrong)
      setraises (pre_mod::wrong, wrongety_wrong);     
  };

  interface bleep;

  abstract interface bar
  {
    base bar_op (in base inarg);
  };

  interface bleep : base, foo
  {
    oneway void oneway_op (in string strarg, in any anyarg);
    bleep get_me ();
    pre_mod::uke get_uke (out boolean success)
      raises (pre_mod::wrong, foo::wrongety_wrong);
    void throw_something ()
      raises (pre_mod::wrong);
  };

  abstract valuetype vt_abase
  {
  };

  valuetype vt_cbase
  {
    private bleep priv_bleep;
    public string pub_str;
    factory vt_init (in bleep bleeparg, in string stringarg)
      raises (pre_mod::wrong);
  };

  valuetype vt : vt_cbase, vt_abase supports foo, bar
  {
    factory vt_default ();
  };
};

