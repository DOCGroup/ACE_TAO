// -*- MPC -*-
// $Id$

project(Lem_Pragma_idl_gen) : componentidldefaults {
  custom_only = 1
  idlflags += -Wb,stub_export_macro=KEYWORD_CLASH_STUB_Export \
              -Wb,stub_export_include=Lem_Pragma_stub_export.h \
              -Wb,skel_export_macro=KEYWORD_CLASH_SVNT_Export \
              -Wb,skel_export_include=Lem_Pragma_svnt_export.h \
              -Wb,exec_export_macro=KEYWORD_CLASH_EXEC_Export \
              -Wb,exec_export_include=Lem_Pragma_exec_export.h 

  IDL_Files {
    A.idl
    B.idl
  }

  IDL_Files {
    idlflags += -Gex -Gxhst -Gxhsk -Gxhex
    C.idl
  }
}

project(Lem_Pragma_lem_gen) : ciaoidldefaults {
  after += Lem_Pragma_idl_gen
  custom_only = 1
  idlflags += -Wb,export_macro=KEYWORD_CLASH_EXEC_Export \
              -Wb,export_include=Lem_Pragma_exec_export.h \
              -SS

  IDL_Files {
    AE.idl
    BE.idl
    CE.idl
  }
}

project(Lem_Pragma_stub) : ccm_stub {
  after += Lem_Pragma_idl_gen
  sharedname = Lem_Pragma_stub
  dynamicflags = KEYWORD_CLASH_STUB_BUILD_DLL

  IDL_Files {
  }

  Source_Files {
    AC.cpp
    BC.cpp
    CC.cpp
  }

  Header_Files {
    AC.h
    BC.h
    CC.h
    Lem_Pragma_stub_export.h
  }

  Inline_Files {
    AC.inl
    BC.inl
    CC.inl
  }
}

project(Lem_Pragma_exec) : ciao_executor {
  after   += Lem_Pragma_lem_gen Lem_Pragma_stub
  sharedname = Lem_Pragma_exec
  libs += Lem_Pragma_stub

  dynamicflags = KEYWORD_CLASH_EXEC_BUILD_DLL

  IDL_Files {
  }

  Source_Files {
    AEC.cpp
    BEC.cpp
    CEC.cpp
    C_exec.cpp
  }

  Header_Files {
    AEC.h
    BEC.h
    CEC.h
    C_exec.h
    Lem_Pragma_exec_export.h
  }

  Inline_Files {
    AEC.inl
    BEC.inl
    CEC.inl
  }
}

project(Lem_Pragma_svnt) : ciao_servant {
  after      += Lem_Pragma_exec
  sharedname  = Lem_Pragma_svnt
  libs       += Lem_Pragma_exec \
                Lem_Pragma_stub

  dynamicflags = KEYWORD_CLASH_SVNT_BUILD_DLL

  IDL_Files {
  }

  Source_Files {
    AS.cpp
    A_svnt.cpp
    BS.cpp
    B_svnt.cpp
    CS.cpp
    C_svnt.cpp
  }

  Header_Files {
    AS.h
    A_svnt.h
    BS.h
    B_svnt.h
    CS.h
    C_svnt.h
    Lem_Pragma_svnt_export.h
  }

  Inline_Files {
    AS.inl
    BS.inl
    CS.inl
  }
}


