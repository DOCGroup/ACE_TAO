// -*- MPC -*-
// $Id$

project(CIAO_IDL3_TO_XMI_BE) : acelib, install_lib, ciao_output, ace_xml_utils, xerces, tao_idl_fe {
  sharedname   = CIAO_IDL3_TO_XMI_BE
  dynamicflags += CIAO_IDL3_TO_XMI_BUILD_DLL

  Source_Files {
    be_global.cpp
    be_helper.cpp
    be_init.cpp
    be_produce.cpp
    be_sunsoft.cpp
    be_util.cpp
    IDL3_to_XMI_visitor.cpp
    IR_Simulator_visitor.cpp
    Literals.cpp
    identifier_helper.cpp
  }

  Header_Files {
    be_extern.h
    be_global.h
    be_helper.h
    be_sunsoft.h
    be_util.h
    IDL3_to_XMI_visitor.h
    CIAO_IDL3_TO_XMI_Export.h
  }
}

project(CIAO_IDL3_TO_XMI_EXE) : aceexe, install, ciao_output, ace_xml_utils, xerces, tao_idl_fe {
  after          += CIAO_IDL3_TO_XMI_BE
  exename         = tao_idl3_to_xmi
  libs           += CIAO_IDL3_TO_XMI_BE
  includes       += $(TAO_ROOT) .
  exeout          = $(CIAO_ROOT)/bin

  // Adding a strict ordering dependency with TAO_IDL_EXE. It appears on some systems, there
  // can be a race between these two projects for tao_idl.cpp, causing some errors.
  after          += TAO_IDL_EXE

  // This is necessary for MPC to pull in rules.ciao.GNU
  includes       += $(CIAO_ROOT)

  verbatim(gnuace, local) {
    ifeq ($(TAO_IDL_PREPROCESSOR),)
      CPPFLAGS += -DTAO_IDL_PREPROCESSOR=\\\"$(strip $(CXX))\\\"
    else
      CPPFLAGS += -DTAO_IDL_PREPROCESSOR=\\\"$(subst \\,\\,$(TAO_IDL_PREPROCESSOR))\\\"
    endif

    VPATH = $(TAO_ROOT)/TAO_IDL $(TAO_ROOT)/TAO_IDL/driver
  }

  Source_Files {
    $(TAO_ROOT)/TAO_IDL/driver/drv_args.cpp
    $(TAO_ROOT)/TAO_IDL/driver/drv_preproc.cpp
    $(TAO_ROOT)/TAO_IDL/tao_idl.cpp
  }

  Header_Files {
    $(TAO_ROOT)/TAO_IDL/include/drv_extern.h
  }

  verbatim(gnuace, postinstall) {
"	@$(MKDIR) $(INSTALL_PREFIX)/share/ciao/bin"
"	ln -sf $(INSTALL_PREFIX)/bin/tao_idl3_to_xmi $(INSTALL_PREFIX)/share/ciao/bin"
  }
}
