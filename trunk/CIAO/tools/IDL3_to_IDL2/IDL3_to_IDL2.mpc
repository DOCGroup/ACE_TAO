// -*- MPC -*-
// $Id$

project(TAO_IDL3_TO_IDL2_BE) : acelib, install_lib, ciao_output, tao_idl_fe {
  sharedname   = TAO_IDL3_TO_IDL2_BE
  dynamicflags += TAO_IDL3_TO_IDL2_BE_BUILD_DLL

  // This is necessary for MPC to pull in rules.ciao.GNU
  includes += $(CIAO_ROOT)

  Source_Files {
    basic_visitor.cpp
    be_global.cpp
    be_helper.cpp
    be_init.cpp
    be_produce.cpp
    be_sunsoft.cpp
    be_util.cpp
    checking_visitor.cpp
    identifier_helper.cpp
    idl3_to_idl2_visitor.cpp
    idl3p_checking_visitor.cpp
  }

  Header_Files {
    basic_visitor.h
    be_extern.h
    be_global.h
    be_helper.h
    be_sunsoft.h
    checking_visitor.h
    identifier_helper.h
    idl3_to_idl2_visitor.h
    TAO_IDL3_TO_IDL2_BE_Export.h
    idl3p_checking_visitor.h
  }
}

project(TAO_IDL3_TO_IDL2_EXE) : aceexe, install, ciao_output, tao_idl_fe {
  after          += TAO_IDL3_TO_IDL2_BE
  exename         = tao_idl3_to_idl2
  libs           += TAO_IDL3_TO_IDL2_BE
  includes       += $(TAO_ROOT)
  exeout          = $(ACE_ROOT)/bin

  // Adding a strict ordering dependency with TAO_IDL_EXE.  It appears on some systems, there
  // can be a race between these two projects for tao_idl.cpp, causing some erroors.
  after += TAO_IDL_EXE

  // This is necessary for MPC to pull in rules.ciao.GNU
  includes += $(CIAO_ROOT) .

  verbatim(gnuace, local) {
    ifeq ($(TAO_IDL_PREPROCESSOR),)
      CPPFLAGS += -DTAO_IDL_PREPROCESSOR=\\\"$(strip $(CXX))\\\"
    else
      CPPFLAGS += -DTAO_IDL_PREPROCESSOR=\\\"$(subst \\,\\,$(TAO_IDL_PREPROCESSOR))\\\"
    endif
  }

  Source_Files {
    $(TAO_ROOT)/TAO_IDL/driver/drv_args.cpp
    $(TAO_ROOT)/TAO_IDL/driver/drv_preproc.cpp
    $(TAO_ROOT)/TAO_IDL/tao_idl.cpp
  }

  Header_Files {
    $(TAO_ROOT)/TAO_IDL/include/drv_extern.h
  }

  verbatim(gnuace, postinstall) {
"	@$(MKDIR) $(INSTALL_PREFIX)/share/ciao/bin"
"	ln -sf $(INSTALL_PREFIX)/bin/tao_idl3_to_idl2 $(INSTALL_PREFIX)/share/ciao/bin"
  }
}
