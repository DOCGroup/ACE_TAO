/* $Id$
 * This code was generated by the XML Schema Compiler.
 *
 * Changes made to this code will most likely be overwritten
 * when the handlers are recompiled.
 *
 * If you find errors or feel that there are bugfixes to be made,
 * please contact the current XSC maintainer:
 *             Will Otte <wotte@dre.vanderbilt.edu>
 */

// Fix for Borland compilers, which seem to have a broken
// <string> include.
#ifdef __BORLANDC__
# include <string.h>
#endif

#include "cid.hpp"

namespace CIAO
{
  namespace Config_Handlers
  {
    // ComponentPackageReference
    // 

    ComponentPackageReference::
    ComponentPackageReference (::CIAO::Config_Handlers::ComponentInterfaceDescription const& requiredType__)
    : 
    ::XSCRT::Type (), 
    requiredType_ (new ::CIAO::Config_Handlers::ComponentInterfaceDescription (requiredType__)),
    regulator__ ()
    {
      requiredType_->container (this);
    }

    ComponentPackageReference::
    ComponentPackageReference (ComponentPackageReference const& s)
    :
    ::XSCRT::Type (),
    requiredUUID_ (s.requiredUUID_.get () ? new ::XMLSchema::string< ACE_TCHAR > (*s.requiredUUID_) : 0),
    requiredName_ (s.requiredName_.get () ? new ::XMLSchema::string< ACE_TCHAR > (*s.requiredName_) : 0),
    requiredType_ (new ::CIAO::Config_Handlers::ComponentInterfaceDescription (*s.requiredType_)),
    regulator__ ()
    {
      if (requiredUUID_.get ()) requiredUUID_->container (this);
      if (requiredName_.get ()) requiredName_->container (this);
      requiredType_->container (this);
    }

    ComponentPackageReference& ComponentPackageReference::
    operator= (ComponentPackageReference const& s)
    {
      if (s.requiredUUID_.get ())
        requiredUUID (*(s.requiredUUID_));
      else
        requiredUUID_.reset (0);

      if (s.requiredName_.get ())
        requiredName (*(s.requiredName_));
      else
        requiredName_.reset (0);

      requiredType (*s.requiredType_);

      return *this;
    }


    // ComponentPackageReference
    // 
    bool ComponentPackageReference::
    requiredUUID_p () const
    {
      return requiredUUID_.get () != 0;
    }

    ::XMLSchema::string< ACE_TCHAR > const& ComponentPackageReference::
    requiredUUID () const
    {
      return *requiredUUID_;
    }

    void ComponentPackageReference::
    requiredUUID (::XMLSchema::string< ACE_TCHAR > const& e)
    {
      if (requiredUUID_.get ())
      {
        *requiredUUID_ = e;
      }

      else
      {
        requiredUUID_ = ::std::auto_ptr< ::XMLSchema::string< ACE_TCHAR > > (new ::XMLSchema::string< ACE_TCHAR > (e));
        requiredUUID_->container (this);
      }
    }

    // ComponentPackageReference
    // 
    bool ComponentPackageReference::
    requiredName_p () const
    {
      return requiredName_.get () != 0;
    }

    ::XMLSchema::string< ACE_TCHAR > const& ComponentPackageReference::
    requiredName () const
    {
      return *requiredName_;
    }

    void ComponentPackageReference::
    requiredName (::XMLSchema::string< ACE_TCHAR > const& e)
    {
      if (requiredName_.get ())
      {
        *requiredName_ = e;
      }

      else
      {
        requiredName_ = ::std::auto_ptr< ::XMLSchema::string< ACE_TCHAR > > (new ::XMLSchema::string< ACE_TCHAR > (e));
        requiredName_->container (this);
      }
    }

    // ComponentPackageReference
    // 
    ::CIAO::Config_Handlers::ComponentInterfaceDescription const& ComponentPackageReference::
    requiredType () const
    {
      return *requiredType_;
    }

    void ComponentPackageReference::
    requiredType (::CIAO::Config_Handlers::ComponentInterfaceDescription const& e)
    {
      *requiredType_ = e;
    }


    // SubcomponentInstantiationDescription
    // 

    SubcomponentInstantiationDescription::
    SubcomponentInstantiationDescription (::XMLSchema::string< ACE_TCHAR > const& name__)
    : 
    name_ (new ::XMLSchema::string< ACE_TCHAR > (name__)),
    regulator__ ()
    {
      name_->container (this);
    }

    SubcomponentInstantiationDescription::
    SubcomponentInstantiationDescription (SubcomponentInstantiationDescription const& s)
    :
    ::XSCRT::Type (),
    name_ (new ::XMLSchema::string< ACE_TCHAR > (*s.name_)),
    basePackage_ (s.basePackage_.get () ? new ::CIAO::Config_Handlers::ComponentPackageDescription (*s.basePackage_) : 0),
    specializedConfig_ (s.specializedConfig_.get () ? new ::CIAO::Config_Handlers::PackageConfiguration (*s.specializedConfig_) : 0),
    selectRequirement_ (s.selectRequirement_),
    configProperty_ (s.configProperty_),
    referencedPackage_ (s.referencedPackage_.get () ? new ::CIAO::Config_Handlers::ComponentPackageReference (*s.referencedPackage_) : 0),
    importedPackage_ (s.importedPackage_.get () ? new ::CIAO::Config_Handlers::ComponentPackageImport (*s.importedPackage_) : 0),
    id_ (s.id_.get () ? new ::XMLSchema::ID< ACE_TCHAR > (*s.id_) : 0),
    regulator__ ()
    {
      name_->container (this);
      if (basePackage_.get ()) basePackage_->container (this);
      if (specializedConfig_.get ()) specializedConfig_->container (this);
      if (referencedPackage_.get ()) referencedPackage_->container (this);
      if (importedPackage_.get ()) importedPackage_->container (this);
      if (id_.get ()) id_->container (this);
    }

    SubcomponentInstantiationDescription& SubcomponentInstantiationDescription::
    operator= (SubcomponentInstantiationDescription const& s)
    {
      name (*s.name_);

      if (s.basePackage_.get ())
        basePackage (*(s.basePackage_));
      else
        basePackage_.reset (0);

      if (s.specializedConfig_.get ())
        specializedConfig (*(s.specializedConfig_));
      else
        specializedConfig_.reset (0);

      selectRequirement_ = s.selectRequirement_;

      configProperty_ = s.configProperty_;

      if (s.referencedPackage_.get ())
        referencedPackage (*(s.referencedPackage_));
      else
        referencedPackage_.reset (0);

      if (s.importedPackage_.get ())
        importedPackage (*(s.importedPackage_));
      else
        importedPackage_.reset (0);

      if (s.id_.get ()) id (*(s.id_));
      else id_ = ::std::auto_ptr< ::XMLSchema::ID< ACE_TCHAR > > (0);

      return *this;
    }


    // SubcomponentInstantiationDescription
    // 
    ::XMLSchema::string< ACE_TCHAR > const& SubcomponentInstantiationDescription::
    name () const
    {
      return *name_;
    }

    void SubcomponentInstantiationDescription::
    name (::XMLSchema::string< ACE_TCHAR > const& e)
    {
      *name_ = e;
    }

    // SubcomponentInstantiationDescription
    // 
    bool SubcomponentInstantiationDescription::
    basePackage_p () const
    {
      return basePackage_.get () != 0;
    }

    ::CIAO::Config_Handlers::ComponentPackageDescription const& SubcomponentInstantiationDescription::
    basePackage () const
    {
      return *basePackage_;
    }

    void SubcomponentInstantiationDescription::
    basePackage (::CIAO::Config_Handlers::ComponentPackageDescription const& e)
    {
      if (basePackage_.get ())
      {
        *basePackage_ = e;
      }

      else
      {
        basePackage_ = ::std::auto_ptr< ::CIAO::Config_Handlers::ComponentPackageDescription > (new ::CIAO::Config_Handlers::ComponentPackageDescription (e));
        basePackage_->container (this);
      }
    }

    // SubcomponentInstantiationDescription
    // 
    bool SubcomponentInstantiationDescription::
    specializedConfig_p () const
    {
      return specializedConfig_.get () != 0;
    }

    ::CIAO::Config_Handlers::PackageConfiguration const& SubcomponentInstantiationDescription::
    specializedConfig () const
    {
      return *specializedConfig_;
    }

    void SubcomponentInstantiationDescription::
    specializedConfig (::CIAO::Config_Handlers::PackageConfiguration const& e)
    {
      if (specializedConfig_.get ())
      {
        *specializedConfig_ = e;
      }

      else
      {
        specializedConfig_ = ::std::auto_ptr< ::CIAO::Config_Handlers::PackageConfiguration > (new ::CIAO::Config_Handlers::PackageConfiguration (e));
        specializedConfig_->container (this);
      }
    }

    // SubcomponentInstantiationDescription
    // 
    SubcomponentInstantiationDescription::selectRequirement_iterator SubcomponentInstantiationDescription::
    begin_selectRequirement ()
    {
      return selectRequirement_.begin ();
    }

    SubcomponentInstantiationDescription::selectRequirement_iterator SubcomponentInstantiationDescription::
    end_selectRequirement ()
    {
      return selectRequirement_.end ();
    }

    SubcomponentInstantiationDescription::selectRequirement_const_iterator SubcomponentInstantiationDescription::
    begin_selectRequirement () const
    {
      return selectRequirement_.begin ();
    }

    SubcomponentInstantiationDescription::selectRequirement_const_iterator SubcomponentInstantiationDescription::
    end_selectRequirement () const
    {
      return selectRequirement_.end ();
    }

    void SubcomponentInstantiationDescription::
    add_selectRequirement (ACE_Refcounted_Auto_Ptr < ::CIAO::Config_Handlers::Requirement, ACE_Null_Mutex >  const& e)
    {
      selectRequirement_.push_back (e);
    }

    size_t SubcomponentInstantiationDescription::
    count_selectRequirement(void) const
    {
      return selectRequirement_.size ();
    }

    // SubcomponentInstantiationDescription
    // 
    SubcomponentInstantiationDescription::configProperty_iterator SubcomponentInstantiationDescription::
    begin_configProperty ()
    {
      return configProperty_.begin ();
    }

    SubcomponentInstantiationDescription::configProperty_iterator SubcomponentInstantiationDescription::
    end_configProperty ()
    {
      return configProperty_.end ();
    }

    SubcomponentInstantiationDescription::configProperty_const_iterator SubcomponentInstantiationDescription::
    begin_configProperty () const
    {
      return configProperty_.begin ();
    }

    SubcomponentInstantiationDescription::configProperty_const_iterator SubcomponentInstantiationDescription::
    end_configProperty () const
    {
      return configProperty_.end ();
    }

    void SubcomponentInstantiationDescription::
    add_configProperty (ACE_Refcounted_Auto_Ptr < ::CIAO::Config_Handlers::Property, ACE_Null_Mutex >  const& e)
    {
      configProperty_.push_back (e);
    }

    size_t SubcomponentInstantiationDescription::
    count_configProperty(void) const
    {
      return configProperty_.size ();
    }

    // SubcomponentInstantiationDescription
    // 
    bool SubcomponentInstantiationDescription::
    referencedPackage_p () const
    {
      return referencedPackage_.get () != 0;
    }

    ::CIAO::Config_Handlers::ComponentPackageReference const& SubcomponentInstantiationDescription::
    referencedPackage () const
    {
      return *referencedPackage_;
    }

    void SubcomponentInstantiationDescription::
    referencedPackage (::CIAO::Config_Handlers::ComponentPackageReference const& e)
    {
      if (referencedPackage_.get ())
      {
        *referencedPackage_ = e;
      }

      else
      {
        referencedPackage_ = ::std::auto_ptr< ::CIAO::Config_Handlers::ComponentPackageReference > (new ::CIAO::Config_Handlers::ComponentPackageReference (e));
        referencedPackage_->container (this);
      }
    }

    // SubcomponentInstantiationDescription
    // 
    bool SubcomponentInstantiationDescription::
    importedPackage_p () const
    {
      return importedPackage_.get () != 0;
    }

    ::CIAO::Config_Handlers::ComponentPackageImport const& SubcomponentInstantiationDescription::
    importedPackage () const
    {
      return *importedPackage_;
    }

    void SubcomponentInstantiationDescription::
    importedPackage (::CIAO::Config_Handlers::ComponentPackageImport const& e)
    {
      if (importedPackage_.get ())
      {
        *importedPackage_ = e;
      }

      else
      {
        importedPackage_ = ::std::auto_ptr< ::CIAO::Config_Handlers::ComponentPackageImport > (new ::CIAO::Config_Handlers::ComponentPackageImport (e));
        importedPackage_->container (this);
      }
    }

    // SubcomponentInstantiationDescription
    // 
    bool SubcomponentInstantiationDescription::
    id_p () const
    {
      return id_.get () != 0;
    }

    ::XMLSchema::ID< ACE_TCHAR > const& SubcomponentInstantiationDescription::
    id () const
    {
      return *id_;
    }

    ::XMLSchema::ID< ACE_TCHAR >& SubcomponentInstantiationDescription::
    id ()
    {
      return *id_;
    }

    void SubcomponentInstantiationDescription::
    id (::XMLSchema::ID< ACE_TCHAR > const& e)
    {
      if (id_.get ())
      {
        *id_ = e;
      }

      else
      {
        id_ = ::std::auto_ptr< ::XMLSchema::ID< ACE_TCHAR > > (new ::XMLSchema::ID< ACE_TCHAR > (e));
        id_->container (this);
      }
    }


    // SubcomponentPropertyReference
    // 

    SubcomponentPropertyReference::
    SubcomponentPropertyReference (::XMLSchema::string< ACE_TCHAR > const& propertyName__,
                                   ::CIAO::Config_Handlers::IdRef const& instance__)
    : 
    propertyName_ (new ::XMLSchema::string< ACE_TCHAR > (propertyName__)),
    instance_ (new ::CIAO::Config_Handlers::IdRef (instance__)),
    regulator__ ()
    {
      propertyName_->container (this);
      instance_->container (this);
    }

    SubcomponentPropertyReference::
    SubcomponentPropertyReference (SubcomponentPropertyReference const& s)
    :
    ::XSCRT::Type (),
    propertyName_ (new ::XMLSchema::string< ACE_TCHAR > (*s.propertyName_)),
    instance_ (new ::CIAO::Config_Handlers::IdRef (*s.instance_)),
    regulator__ ()
    {
      propertyName_->container (this);
      instance_->container (this);
    }

    SubcomponentPropertyReference& SubcomponentPropertyReference::
    operator= (SubcomponentPropertyReference const& s)
    {
      propertyName (*s.propertyName_);

      instance (*s.instance_);

      return *this;
    }


    // SubcomponentPropertyReference
    // 
    ::XMLSchema::string< ACE_TCHAR > const& SubcomponentPropertyReference::
    propertyName () const
    {
      return *propertyName_;
    }

    void SubcomponentPropertyReference::
    propertyName (::XMLSchema::string< ACE_TCHAR > const& e)
    {
      *propertyName_ = e;
    }

    // SubcomponentPropertyReference
    // 
    ::CIAO::Config_Handlers::IdRef const& SubcomponentPropertyReference::
    instance () const
    {
      return *instance_;
    }

    void SubcomponentPropertyReference::
    instance (::CIAO::Config_Handlers::IdRef const& e)
    {
      *instance_ = e;
    }


    // AssemblyPropertyMapping
    // 

    AssemblyPropertyMapping::
    AssemblyPropertyMapping (::XMLSchema::string< ACE_TCHAR > const& name__,
                             ::XMLSchema::string< ACE_TCHAR > const& externalName__)
    : 
    name_ (new ::XMLSchema::string< ACE_TCHAR > (name__)),
    externalName_ (new ::XMLSchema::string< ACE_TCHAR > (externalName__)),
    regulator__ ()
    {
      name_->container (this);
      externalName_->container (this);
    }

    AssemblyPropertyMapping::
    AssemblyPropertyMapping (AssemblyPropertyMapping const& s)
    :
    ::XSCRT::Type (),
    name_ (new ::XMLSchema::string< ACE_TCHAR > (*s.name_)),
    externalName_ (new ::XMLSchema::string< ACE_TCHAR > (*s.externalName_)),
    delegatesTo_ (s.delegatesTo_),
    regulator__ ()
    {
      name_->container (this);
      externalName_->container (this);
    }

    AssemblyPropertyMapping& AssemblyPropertyMapping::
    operator= (AssemblyPropertyMapping const& s)
    {
      name (*s.name_);

      externalName (*s.externalName_);

      delegatesTo_ = s.delegatesTo_;

      return *this;
    }


    // AssemblyPropertyMapping
    // 
    ::XMLSchema::string< ACE_TCHAR > const& AssemblyPropertyMapping::
    name () const
    {
      return *name_;
    }

    void AssemblyPropertyMapping::
    name (::XMLSchema::string< ACE_TCHAR > const& e)
    {
      *name_ = e;
    }

    // AssemblyPropertyMapping
    // 
    ::XMLSchema::string< ACE_TCHAR > const& AssemblyPropertyMapping::
    externalName () const
    {
      return *externalName_;
    }

    void AssemblyPropertyMapping::
    externalName (::XMLSchema::string< ACE_TCHAR > const& e)
    {
      *externalName_ = e;
    }

    // AssemblyPropertyMapping
    // 
    AssemblyPropertyMapping::delegatesTo_iterator AssemblyPropertyMapping::
    begin_delegatesTo ()
    {
      return delegatesTo_.begin ();
    }

    AssemblyPropertyMapping::delegatesTo_iterator AssemblyPropertyMapping::
    end_delegatesTo ()
    {
      return delegatesTo_.end ();
    }

    AssemblyPropertyMapping::delegatesTo_const_iterator AssemblyPropertyMapping::
    begin_delegatesTo () const
    {
      return delegatesTo_.begin ();
    }

    AssemblyPropertyMapping::delegatesTo_const_iterator AssemblyPropertyMapping::
    end_delegatesTo () const
    {
      return delegatesTo_.end ();
    }

    void AssemblyPropertyMapping::
    add_delegatesTo (ACE_Refcounted_Auto_Ptr < ::CIAO::Config_Handlers::SubcomponentPropertyReference, ACE_Null_Mutex >  const& e)
    {
      delegatesTo_.push_back (e);
    }

    size_t AssemblyPropertyMapping::
    count_delegatesTo(void) const
    {
      return delegatesTo_.size ();
    }


    // LocalityKind
    // 

    LocalityKind::Value LocalityKind::
    integral () const
    {
      return v_;
    }

    bool
    operator== (::CIAO::Config_Handlers::LocalityKind const& a, ::CIAO::Config_Handlers::LocalityKind const& b)
    {
      return a.v_ == b.v_;
    }

    bool
    operator!= (::CIAO::Config_Handlers::LocalityKind const& a, ::CIAO::Config_Handlers::LocalityKind const& b)
    {
      return a.v_ != b.v_;
    }

    LocalityKind::
    LocalityKind (LocalityKind::Value v)
    : v_ (v)
    {
    }

    // Locality
    // 

    Locality::
    Locality (::CIAO::Config_Handlers::LocalityKind const& constraint__,
              ::CIAO::Config_Handlers::IdRef const& constrainedInstance__)
    : 
    constraint_ (new ::CIAO::Config_Handlers::LocalityKind (constraint__)),
    constrainedInstance_ (new ::CIAO::Config_Handlers::IdRef (constrainedInstance__)),
    regulator__ ()
    {
      constraint_->container (this);
      constrainedInstance_->container (this);
    }

    Locality::
    Locality (Locality const& s)
    :
    ::XSCRT::Type (),
    constraint_ (new ::CIAO::Config_Handlers::LocalityKind (*s.constraint_)),
    constrainedInstance_ (new ::CIAO::Config_Handlers::IdRef (*s.constrainedInstance_)),
    regulator__ ()
    {
      constraint_->container (this);
      constrainedInstance_->container (this);
    }

    Locality& Locality::
    operator= (Locality const& s)
    {
      constraint (*s.constraint_);

      constrainedInstance (*s.constrainedInstance_);

      return *this;
    }


    // Locality
    // 
    ::CIAO::Config_Handlers::LocalityKind const& Locality::
    constraint () const
    {
      return *constraint_;
    }

    void Locality::
    constraint (::CIAO::Config_Handlers::LocalityKind const& e)
    {
      *constraint_ = e;
    }

    // Locality
    // 
    ::CIAO::Config_Handlers::IdRef const& Locality::
    constrainedInstance () const
    {
      return *constrainedInstance_;
    }

    void Locality::
    constrainedInstance (::CIAO::Config_Handlers::IdRef const& e)
    {
      *constrainedInstance_ = e;
    }


    // ComponentAssemblyDescription
    // 

    ComponentAssemblyDescription::
    ComponentAssemblyDescription ()
    : 
    regulator__ ()
    {
    }

    ComponentAssemblyDescription::
    ComponentAssemblyDescription (ComponentAssemblyDescription const& s)
    :
    ::XSCRT::Type (),
    instance_ (s.instance_),
    connection_ (s.connection_),
    externalProperty_ (s.externalProperty_),
    locality_ (s.locality_),
    regulator__ ()
    {
    }

    ComponentAssemblyDescription& ComponentAssemblyDescription::
    operator= (ComponentAssemblyDescription const& s)
    {
      instance_ = s.instance_;

      connection_ = s.connection_;

      externalProperty_ = s.externalProperty_;

      locality_ = s.locality_;

      return *this;
    }


    // ComponentAssemblyDescription
    // 
    ComponentAssemblyDescription::instance_iterator ComponentAssemblyDescription::
    begin_instance ()
    {
      return instance_.begin ();
    }

    ComponentAssemblyDescription::instance_iterator ComponentAssemblyDescription::
    end_instance ()
    {
      return instance_.end ();
    }

    ComponentAssemblyDescription::instance_const_iterator ComponentAssemblyDescription::
    begin_instance () const
    {
      return instance_.begin ();
    }

    ComponentAssemblyDescription::instance_const_iterator ComponentAssemblyDescription::
    end_instance () const
    {
      return instance_.end ();
    }

    void ComponentAssemblyDescription::
    add_instance (ACE_Refcounted_Auto_Ptr < ::CIAO::Config_Handlers::SubcomponentInstantiationDescription, ACE_Null_Mutex >  const& e)
    {
      instance_.push_back (e);
    }

    size_t ComponentAssemblyDescription::
    count_instance(void) const
    {
      return instance_.size ();
    }

    // ComponentAssemblyDescription
    // 
    ComponentAssemblyDescription::connection_iterator ComponentAssemblyDescription::
    begin_connection ()
    {
      return connection_.begin ();
    }

    ComponentAssemblyDescription::connection_iterator ComponentAssemblyDescription::
    end_connection ()
    {
      return connection_.end ();
    }

    ComponentAssemblyDescription::connection_const_iterator ComponentAssemblyDescription::
    begin_connection () const
    {
      return connection_.begin ();
    }

    ComponentAssemblyDescription::connection_const_iterator ComponentAssemblyDescription::
    end_connection () const
    {
      return connection_.end ();
    }

    void ComponentAssemblyDescription::
    add_connection (ACE_Refcounted_Auto_Ptr < ::CIAO::Config_Handlers::AssemblyConnectionDescription, ACE_Null_Mutex >  const& e)
    {
      connection_.push_back (e);
    }

    size_t ComponentAssemblyDescription::
    count_connection(void) const
    {
      return connection_.size ();
    }

    // ComponentAssemblyDescription
    // 
    ComponentAssemblyDescription::externalProperty_iterator ComponentAssemblyDescription::
    begin_externalProperty ()
    {
      return externalProperty_.begin ();
    }

    ComponentAssemblyDescription::externalProperty_iterator ComponentAssemblyDescription::
    end_externalProperty ()
    {
      return externalProperty_.end ();
    }

    ComponentAssemblyDescription::externalProperty_const_iterator ComponentAssemblyDescription::
    begin_externalProperty () const
    {
      return externalProperty_.begin ();
    }

    ComponentAssemblyDescription::externalProperty_const_iterator ComponentAssemblyDescription::
    end_externalProperty () const
    {
      return externalProperty_.end ();
    }

    void ComponentAssemblyDescription::
    add_externalProperty (ACE_Refcounted_Auto_Ptr < ::CIAO::Config_Handlers::AssemblyPropertyMapping, ACE_Null_Mutex >  const& e)
    {
      externalProperty_.push_back (e);
    }

    size_t ComponentAssemblyDescription::
    count_externalProperty(void) const
    {
      return externalProperty_.size ();
    }

    // ComponentAssemblyDescription
    // 
    ComponentAssemblyDescription::locality_iterator ComponentAssemblyDescription::
    begin_locality ()
    {
      return locality_.begin ();
    }

    ComponentAssemblyDescription::locality_iterator ComponentAssemblyDescription::
    end_locality ()
    {
      return locality_.end ();
    }

    ComponentAssemblyDescription::locality_const_iterator ComponentAssemblyDescription::
    begin_locality () const
    {
      return locality_.begin ();
    }

    ComponentAssemblyDescription::locality_const_iterator ComponentAssemblyDescription::
    end_locality () const
    {
      return locality_.end ();
    }

    void ComponentAssemblyDescription::
    add_locality (ACE_Refcounted_Auto_Ptr < ::CIAO::Config_Handlers::Locality, ACE_Null_Mutex >  const& e)
    {
      locality_.push_back (e);
    }

    size_t ComponentAssemblyDescription::
    count_locality(void) const
    {
      return locality_.size ();
    }


    // MonolithicImplementationDescription
    // 

    MonolithicImplementationDescription::
    MonolithicImplementationDescription ()
    : 
    regulator__ ()
    {
    }

    MonolithicImplementationDescription::
    MonolithicImplementationDescription (MonolithicImplementationDescription const& s)
    :
    ::XSCRT::Type (),
    nodeExecParameter_ (s.nodeExecParameter_),
    componentExecParameter_ (s.componentExecParameter_),
    deployRequirement_ (s.deployRequirement_),
    primaryArtifact_ (s.primaryArtifact_),
    regulator__ ()
    {
    }

    MonolithicImplementationDescription& MonolithicImplementationDescription::
    operator= (MonolithicImplementationDescription const& s)
    {
      nodeExecParameter_ = s.nodeExecParameter_;

      componentExecParameter_ = s.componentExecParameter_;

      deployRequirement_ = s.deployRequirement_;

      primaryArtifact_ = s.primaryArtifact_;

      return *this;
    }


    // MonolithicImplementationDescription
    // 
    MonolithicImplementationDescription::nodeExecParameter_iterator MonolithicImplementationDescription::
    begin_nodeExecParameter ()
    {
      return nodeExecParameter_.begin ();
    }

    MonolithicImplementationDescription::nodeExecParameter_iterator MonolithicImplementationDescription::
    end_nodeExecParameter ()
    {
      return nodeExecParameter_.end ();
    }

    MonolithicImplementationDescription::nodeExecParameter_const_iterator MonolithicImplementationDescription::
    begin_nodeExecParameter () const
    {
      return nodeExecParameter_.begin ();
    }

    MonolithicImplementationDescription::nodeExecParameter_const_iterator MonolithicImplementationDescription::
    end_nodeExecParameter () const
    {
      return nodeExecParameter_.end ();
    }

    void MonolithicImplementationDescription::
    add_nodeExecParameter (ACE_Refcounted_Auto_Ptr < ::CIAO::Config_Handlers::Property, ACE_Null_Mutex >  const& e)
    {
      nodeExecParameter_.push_back (e);
    }

    size_t MonolithicImplementationDescription::
    count_nodeExecParameter(void) const
    {
      return nodeExecParameter_.size ();
    }

    // MonolithicImplementationDescription
    // 
    MonolithicImplementationDescription::componentExecParameter_iterator MonolithicImplementationDescription::
    begin_componentExecParameter ()
    {
      return componentExecParameter_.begin ();
    }

    MonolithicImplementationDescription::componentExecParameter_iterator MonolithicImplementationDescription::
    end_componentExecParameter ()
    {
      return componentExecParameter_.end ();
    }

    MonolithicImplementationDescription::componentExecParameter_const_iterator MonolithicImplementationDescription::
    begin_componentExecParameter () const
    {
      return componentExecParameter_.begin ();
    }

    MonolithicImplementationDescription::componentExecParameter_const_iterator MonolithicImplementationDescription::
    end_componentExecParameter () const
    {
      return componentExecParameter_.end ();
    }

    void MonolithicImplementationDescription::
    add_componentExecParameter (ACE_Refcounted_Auto_Ptr < ::CIAO::Config_Handlers::Property, ACE_Null_Mutex >  const& e)
    {
      componentExecParameter_.push_back (e);
    }

    size_t MonolithicImplementationDescription::
    count_componentExecParameter(void) const
    {
      return componentExecParameter_.size ();
    }

    // MonolithicImplementationDescription
    // 
    MonolithicImplementationDescription::deployRequirement_iterator MonolithicImplementationDescription::
    begin_deployRequirement ()
    {
      return deployRequirement_.begin ();
    }

    MonolithicImplementationDescription::deployRequirement_iterator MonolithicImplementationDescription::
    end_deployRequirement ()
    {
      return deployRequirement_.end ();
    }

    MonolithicImplementationDescription::deployRequirement_const_iterator MonolithicImplementationDescription::
    begin_deployRequirement () const
    {
      return deployRequirement_.begin ();
    }

    MonolithicImplementationDescription::deployRequirement_const_iterator MonolithicImplementationDescription::
    end_deployRequirement () const
    {
      return deployRequirement_.end ();
    }

    void MonolithicImplementationDescription::
    add_deployRequirement (ACE_Refcounted_Auto_Ptr < ::CIAO::Config_Handlers::ImplementationRequirement, ACE_Null_Mutex >  const& e)
    {
      deployRequirement_.push_back (e);
    }

    size_t MonolithicImplementationDescription::
    count_deployRequirement(void) const
    {
      return deployRequirement_.size ();
    }

    // MonolithicImplementationDescription
    // 
    MonolithicImplementationDescription::primaryArtifact_iterator MonolithicImplementationDescription::
    begin_primaryArtifact ()
    {
      return primaryArtifact_.begin ();
    }

    MonolithicImplementationDescription::primaryArtifact_iterator MonolithicImplementationDescription::
    end_primaryArtifact ()
    {
      return primaryArtifact_.end ();
    }

    MonolithicImplementationDescription::primaryArtifact_const_iterator MonolithicImplementationDescription::
    begin_primaryArtifact () const
    {
      return primaryArtifact_.begin ();
    }

    MonolithicImplementationDescription::primaryArtifact_const_iterator MonolithicImplementationDescription::
    end_primaryArtifact () const
    {
      return primaryArtifact_.end ();
    }

    void MonolithicImplementationDescription::
    add_primaryArtifact (ACE_Refcounted_Auto_Ptr < ::CIAO::Config_Handlers::NamedImplementationArtifact, ACE_Null_Mutex >  const& e)
    {
      primaryArtifact_.push_back (e);
    }

    size_t MonolithicImplementationDescription::
    count_primaryArtifact(void) const
    {
      return primaryArtifact_.size ();
    }


    // ComponentImplementationDescription
    // 

    ComponentImplementationDescription::
    ComponentImplementationDescription ()
    : 
    regulator__ ()
    {
    }

    ComponentImplementationDescription::
    ComponentImplementationDescription (ComponentImplementationDescription const& s)
    :
    ::XSCRT::Type (),
    label_ (s.label_.get () ? new ::XMLSchema::string< ACE_TCHAR > (*s.label_) : 0),
    UUID_ (s.UUID_.get () ? new ::XMLSchema::string< ACE_TCHAR > (*s.UUID_) : 0),
    implements_ (s.implements_.get () ? new ::CIAO::Config_Handlers::ComponentInterfaceDescription (*s.implements_) : 0),
    assemblyImpl_ (s.assemblyImpl_.get () ? new ::CIAO::Config_Handlers::ComponentAssemblyDescription (*s.assemblyImpl_) : 0),
    monolithicImpl_ (s.monolithicImpl_.get () ? new ::CIAO::Config_Handlers::MonolithicImplementationDescription (*s.monolithicImpl_) : 0),
    configProperty_ (s.configProperty_),
    capability_ (s.capability_),
    dependsOn_ (s.dependsOn_),
    infoProperty_ (s.infoProperty_),
    href_ (s.href_.get () ? new ::XMLSchema::string< ACE_TCHAR > (*s.href_) : 0),
    regulator__ ()
    {
      if (label_.get ()) label_->container (this);
      if (UUID_.get ()) UUID_->container (this);
      if (implements_.get ()) implements_->container (this);
      if (assemblyImpl_.get ()) assemblyImpl_->container (this);
      if (monolithicImpl_.get ()) monolithicImpl_->container (this);
      if (href_.get ()) href_->container (this);
    }

    ComponentImplementationDescription& ComponentImplementationDescription::
    operator= (ComponentImplementationDescription const& s)
    {
      if (s.label_.get ())
        label (*(s.label_));
      else
        label_.reset (0);

      if (s.UUID_.get ())
        UUID (*(s.UUID_));
      else
        UUID_.reset (0);

      if (s.implements_.get ())
        implements (*(s.implements_));
      else
        implements_.reset (0);

      if (s.assemblyImpl_.get ())
        assemblyImpl (*(s.assemblyImpl_));
      else
        assemblyImpl_.reset (0);

      if (s.monolithicImpl_.get ())
        monolithicImpl (*(s.monolithicImpl_));
      else
        monolithicImpl_.reset (0);

      configProperty_ = s.configProperty_;

      capability_ = s.capability_;

      dependsOn_ = s.dependsOn_;

      infoProperty_ = s.infoProperty_;

      if (s.href_.get ()) href (*(s.href_));
      else href_ = ::std::auto_ptr< ::XMLSchema::string< ACE_TCHAR > > (0);

      return *this;
    }


    // ComponentImplementationDescription
    // 
    bool ComponentImplementationDescription::
    label_p () const
    {
      return label_.get () != 0;
    }

    ::XMLSchema::string< ACE_TCHAR > const& ComponentImplementationDescription::
    label () const
    {
      return *label_;
    }

    void ComponentImplementationDescription::
    label (::XMLSchema::string< ACE_TCHAR > const& e)
    {
      if (label_.get ())
      {
        *label_ = e;
      }

      else
      {
        label_ = ::std::auto_ptr< ::XMLSchema::string< ACE_TCHAR > > (new ::XMLSchema::string< ACE_TCHAR > (e));
        label_->container (this);
      }
    }

    // ComponentImplementationDescription
    // 
    bool ComponentImplementationDescription::
    UUID_p () const
    {
      return UUID_.get () != 0;
    }

    ::XMLSchema::string< ACE_TCHAR > const& ComponentImplementationDescription::
    UUID () const
    {
      return *UUID_;
    }

    void ComponentImplementationDescription::
    UUID (::XMLSchema::string< ACE_TCHAR > const& e)
    {
      if (UUID_.get ())
      {
        *UUID_ = e;
      }

      else
      {
        UUID_ = ::std::auto_ptr< ::XMLSchema::string< ACE_TCHAR > > (new ::XMLSchema::string< ACE_TCHAR > (e));
        UUID_->container (this);
      }
    }

    // ComponentImplementationDescription
    // 
    bool ComponentImplementationDescription::
    implements_p () const
    {
      return implements_.get () != 0;
    }

    ::CIAO::Config_Handlers::ComponentInterfaceDescription const& ComponentImplementationDescription::
    implements () const
    {
      return *implements_;
    }

    void ComponentImplementationDescription::
    implements (::CIAO::Config_Handlers::ComponentInterfaceDescription const& e)
    {
      if (implements_.get ())
      {
        *implements_ = e;
      }

      else
      {
        implements_ = ::std::auto_ptr< ::CIAO::Config_Handlers::ComponentInterfaceDescription > (new ::CIAO::Config_Handlers::ComponentInterfaceDescription (e));
        implements_->container (this);
      }
    }

    // ComponentImplementationDescription
    // 
    bool ComponentImplementationDescription::
    assemblyImpl_p () const
    {
      return assemblyImpl_.get () != 0;
    }

    ::CIAO::Config_Handlers::ComponentAssemblyDescription const& ComponentImplementationDescription::
    assemblyImpl () const
    {
      return *assemblyImpl_;
    }

    void ComponentImplementationDescription::
    assemblyImpl (::CIAO::Config_Handlers::ComponentAssemblyDescription const& e)
    {
      if (assemblyImpl_.get ())
      {
        *assemblyImpl_ = e;
      }

      else
      {
        assemblyImpl_ = ::std::auto_ptr< ::CIAO::Config_Handlers::ComponentAssemblyDescription > (new ::CIAO::Config_Handlers::ComponentAssemblyDescription (e));
        assemblyImpl_->container (this);
      }
    }

    // ComponentImplementationDescription
    // 
    bool ComponentImplementationDescription::
    monolithicImpl_p () const
    {
      return monolithicImpl_.get () != 0;
    }

    ::CIAO::Config_Handlers::MonolithicImplementationDescription const& ComponentImplementationDescription::
    monolithicImpl () const
    {
      return *monolithicImpl_;
    }

    void ComponentImplementationDescription::
    monolithicImpl (::CIAO::Config_Handlers::MonolithicImplementationDescription const& e)
    {
      if (monolithicImpl_.get ())
      {
        *monolithicImpl_ = e;
      }

      else
      {
        monolithicImpl_ = ::std::auto_ptr< ::CIAO::Config_Handlers::MonolithicImplementationDescription > (new ::CIAO::Config_Handlers::MonolithicImplementationDescription (e));
        monolithicImpl_->container (this);
      }
    }

    // ComponentImplementationDescription
    // 
    ComponentImplementationDescription::configProperty_iterator ComponentImplementationDescription::
    begin_configProperty ()
    {
      return configProperty_.begin ();
    }

    ComponentImplementationDescription::configProperty_iterator ComponentImplementationDescription::
    end_configProperty ()
    {
      return configProperty_.end ();
    }

    ComponentImplementationDescription::configProperty_const_iterator ComponentImplementationDescription::
    begin_configProperty () const
    {
      return configProperty_.begin ();
    }

    ComponentImplementationDescription::configProperty_const_iterator ComponentImplementationDescription::
    end_configProperty () const
    {
      return configProperty_.end ();
    }

    void ComponentImplementationDescription::
    add_configProperty (ACE_Refcounted_Auto_Ptr < ::CIAO::Config_Handlers::Property, ACE_Null_Mutex >  const& e)
    {
      configProperty_.push_back (e);
    }

    size_t ComponentImplementationDescription::
    count_configProperty(void) const
    {
      return configProperty_.size ();
    }

    // ComponentImplementationDescription
    // 
    ComponentImplementationDescription::capability_iterator ComponentImplementationDescription::
    begin_capability ()
    {
      return capability_.begin ();
    }

    ComponentImplementationDescription::capability_iterator ComponentImplementationDescription::
    end_capability ()
    {
      return capability_.end ();
    }

    ComponentImplementationDescription::capability_const_iterator ComponentImplementationDescription::
    begin_capability () const
    {
      return capability_.begin ();
    }

    ComponentImplementationDescription::capability_const_iterator ComponentImplementationDescription::
    end_capability () const
    {
      return capability_.end ();
    }

    void ComponentImplementationDescription::
    add_capability (ACE_Refcounted_Auto_Ptr < ::CIAO::Config_Handlers::Capability, ACE_Null_Mutex >  const& e)
    {
      capability_.push_back (e);
    }

    size_t ComponentImplementationDescription::
    count_capability(void) const
    {
      return capability_.size ();
    }

    // ComponentImplementationDescription
    // 
    ComponentImplementationDescription::dependsOn_iterator ComponentImplementationDescription::
    begin_dependsOn ()
    {
      return dependsOn_.begin ();
    }

    ComponentImplementationDescription::dependsOn_iterator ComponentImplementationDescription::
    end_dependsOn ()
    {
      return dependsOn_.end ();
    }

    ComponentImplementationDescription::dependsOn_const_iterator ComponentImplementationDescription::
    begin_dependsOn () const
    {
      return dependsOn_.begin ();
    }

    ComponentImplementationDescription::dependsOn_const_iterator ComponentImplementationDescription::
    end_dependsOn () const
    {
      return dependsOn_.end ();
    }

    void ComponentImplementationDescription::
    add_dependsOn (ACE_Refcounted_Auto_Ptr < ::CIAO::Config_Handlers::ImplementationDependency, ACE_Null_Mutex >  const& e)
    {
      dependsOn_.push_back (e);
    }

    size_t ComponentImplementationDescription::
    count_dependsOn(void) const
    {
      return dependsOn_.size ();
    }

    // ComponentImplementationDescription
    // 
    ComponentImplementationDescription::infoProperty_iterator ComponentImplementationDescription::
    begin_infoProperty ()
    {
      return infoProperty_.begin ();
    }

    ComponentImplementationDescription::infoProperty_iterator ComponentImplementationDescription::
    end_infoProperty ()
    {
      return infoProperty_.end ();
    }

    ComponentImplementationDescription::infoProperty_const_iterator ComponentImplementationDescription::
    begin_infoProperty () const
    {
      return infoProperty_.begin ();
    }

    ComponentImplementationDescription::infoProperty_const_iterator ComponentImplementationDescription::
    end_infoProperty () const
    {
      return infoProperty_.end ();
    }

    void ComponentImplementationDescription::
    add_infoProperty (ACE_Refcounted_Auto_Ptr < ::CIAO::Config_Handlers::Property, ACE_Null_Mutex >  const& e)
    {
      infoProperty_.push_back (e);
    }

    size_t ComponentImplementationDescription::
    count_infoProperty(void) const
    {
      return infoProperty_.size ();
    }

    // ComponentImplementationDescription
    // 
    bool ComponentImplementationDescription::
    href_p () const
    {
      return href_.get () != 0;
    }

    ::XMLSchema::string< ACE_TCHAR > const& ComponentImplementationDescription::
    href () const
    {
      return *href_;
    }

    ::XMLSchema::string< ACE_TCHAR >& ComponentImplementationDescription::
    href ()
    {
      return *href_;
    }

    void ComponentImplementationDescription::
    href (::XMLSchema::string< ACE_TCHAR > const& e)
    {
      if (href_.get ())
      {
        *href_ = e;
      }

      else
      {
        href_ = ::std::auto_ptr< ::XMLSchema::string< ACE_TCHAR > > (new ::XMLSchema::string< ACE_TCHAR > (e));
        href_->container (this);
      }
    }


    // ConnectorImplementationDescription
    // 

    ConnectorImplementationDescription::
    ConnectorImplementationDescription ()
    : 
    regulator__ ()
    {
    }

    ConnectorImplementationDescription::
    ConnectorImplementationDescription (ConnectorImplementationDescription const& s)
    :
    ::XSCRT::Type (),
    label_ (s.label_.get () ? new ::XMLSchema::string< ACE_TCHAR > (*s.label_) : 0),
    UUID_ (s.UUID_.get () ? new ::XMLSchema::string< ACE_TCHAR > (*s.UUID_) : 0),
    implements_ (s.implements_.get () ? new ::CIAO::Config_Handlers::ComponentInterfaceDescription (*s.implements_) : 0),
    assemblyImpl_ (s.assemblyImpl_.get () ? new ::CIAO::Config_Handlers::ComponentAssemblyDescription (*s.assemblyImpl_) : 0),
    monolithicImpl_ (s.monolithicImpl_.get () ? new ::CIAO::Config_Handlers::MonolithicImplementationDescription (*s.monolithicImpl_) : 0),
    configProperty_ (s.configProperty_),
    capability_ (s.capability_),
    dependsOn_ (s.dependsOn_),
    infoProperty_ (s.infoProperty_),
    href_ (s.href_.get () ? new ::XMLSchema::string< ACE_TCHAR > (*s.href_) : 0),
    regulator__ ()
    {
      if (label_.get ()) label_->container (this);
      if (UUID_.get ()) UUID_->container (this);
      if (implements_.get ()) implements_->container (this);
      if (assemblyImpl_.get ()) assemblyImpl_->container (this);
      if (monolithicImpl_.get ()) monolithicImpl_->container (this);
      if (href_.get ()) href_->container (this);
    }

    ConnectorImplementationDescription& ConnectorImplementationDescription::
    operator= (ConnectorImplementationDescription const& s)
    {
      if (s.label_.get ())
        label (*(s.label_));
      else
        label_.reset (0);

      if (s.UUID_.get ())
        UUID (*(s.UUID_));
      else
        UUID_.reset (0);

      if (s.implements_.get ())
        implements (*(s.implements_));
      else
        implements_.reset (0);

      if (s.assemblyImpl_.get ())
        assemblyImpl (*(s.assemblyImpl_));
      else
        assemblyImpl_.reset (0);

      if (s.monolithicImpl_.get ())
        monolithicImpl (*(s.monolithicImpl_));
      else
        monolithicImpl_.reset (0);

      configProperty_ = s.configProperty_;

      capability_ = s.capability_;

      dependsOn_ = s.dependsOn_;

      infoProperty_ = s.infoProperty_;

      if (s.href_.get ()) href (*(s.href_));
      else href_ = ::std::auto_ptr< ::XMLSchema::string< ACE_TCHAR > > (0);

      return *this;
    }


    // ConnectorImplementationDescription
    // 
    bool ConnectorImplementationDescription::
    label_p () const
    {
      return label_.get () != 0;
    }

    ::XMLSchema::string< ACE_TCHAR > const& ConnectorImplementationDescription::
    label () const
    {
      return *label_;
    }

    void ConnectorImplementationDescription::
    label (::XMLSchema::string< ACE_TCHAR > const& e)
    {
      if (label_.get ())
      {
        *label_ = e;
      }

      else
      {
        label_ = ::std::auto_ptr< ::XMLSchema::string< ACE_TCHAR > > (new ::XMLSchema::string< ACE_TCHAR > (e));
        label_->container (this);
      }
    }

    // ConnectorImplementationDescription
    // 
    bool ConnectorImplementationDescription::
    UUID_p () const
    {
      return UUID_.get () != 0;
    }

    ::XMLSchema::string< ACE_TCHAR > const& ConnectorImplementationDescription::
    UUID () const
    {
      return *UUID_;
    }

    void ConnectorImplementationDescription::
    UUID (::XMLSchema::string< ACE_TCHAR > const& e)
    {
      if (UUID_.get ())
      {
        *UUID_ = e;
      }

      else
      {
        UUID_ = ::std::auto_ptr< ::XMLSchema::string< ACE_TCHAR > > (new ::XMLSchema::string< ACE_TCHAR > (e));
        UUID_->container (this);
      }
    }

    // ConnectorImplementationDescription
    // 
    bool ConnectorImplementationDescription::
    implements_p () const
    {
      return implements_.get () != 0;
    }

    ::CIAO::Config_Handlers::ComponentInterfaceDescription const& ConnectorImplementationDescription::
    implements () const
    {
      return *implements_;
    }

    void ConnectorImplementationDescription::
    implements (::CIAO::Config_Handlers::ComponentInterfaceDescription const& e)
    {
      if (implements_.get ())
      {
        *implements_ = e;
      }

      else
      {
        implements_ = ::std::auto_ptr< ::CIAO::Config_Handlers::ComponentInterfaceDescription > (new ::CIAO::Config_Handlers::ComponentInterfaceDescription (e));
        implements_->container (this);
      }
    }

    // ConnectorImplementationDescription
    // 
    bool ConnectorImplementationDescription::
    assemblyImpl_p () const
    {
      return assemblyImpl_.get () != 0;
    }

    ::CIAO::Config_Handlers::ComponentAssemblyDescription const& ConnectorImplementationDescription::
    assemblyImpl () const
    {
      return *assemblyImpl_;
    }

    void ConnectorImplementationDescription::
    assemblyImpl (::CIAO::Config_Handlers::ComponentAssemblyDescription const& e)
    {
      if (assemblyImpl_.get ())
      {
        *assemblyImpl_ = e;
      }

      else
      {
        assemblyImpl_ = ::std::auto_ptr< ::CIAO::Config_Handlers::ComponentAssemblyDescription > (new ::CIAO::Config_Handlers::ComponentAssemblyDescription (e));
        assemblyImpl_->container (this);
      }
    }

    // ConnectorImplementationDescription
    // 
    bool ConnectorImplementationDescription::
    monolithicImpl_p () const
    {
      return monolithicImpl_.get () != 0;
    }

    ::CIAO::Config_Handlers::MonolithicImplementationDescription const& ConnectorImplementationDescription::
    monolithicImpl () const
    {
      return *monolithicImpl_;
    }

    void ConnectorImplementationDescription::
    monolithicImpl (::CIAO::Config_Handlers::MonolithicImplementationDescription const& e)
    {
      if (monolithicImpl_.get ())
      {
        *monolithicImpl_ = e;
      }

      else
      {
        monolithicImpl_ = ::std::auto_ptr< ::CIAO::Config_Handlers::MonolithicImplementationDescription > (new ::CIAO::Config_Handlers::MonolithicImplementationDescription (e));
        monolithicImpl_->container (this);
      }
    }

    // ConnectorImplementationDescription
    // 
    ConnectorImplementationDescription::configProperty_iterator ConnectorImplementationDescription::
    begin_configProperty ()
    {
      return configProperty_.begin ();
    }

    ConnectorImplementationDescription::configProperty_iterator ConnectorImplementationDescription::
    end_configProperty ()
    {
      return configProperty_.end ();
    }

    ConnectorImplementationDescription::configProperty_const_iterator ConnectorImplementationDescription::
    begin_configProperty () const
    {
      return configProperty_.begin ();
    }

    ConnectorImplementationDescription::configProperty_const_iterator ConnectorImplementationDescription::
    end_configProperty () const
    {
      return configProperty_.end ();
    }

    void ConnectorImplementationDescription::
    add_configProperty (ACE_Refcounted_Auto_Ptr < ::CIAO::Config_Handlers::Property, ACE_Null_Mutex >  const& e)
    {
      configProperty_.push_back (e);
    }

    size_t ConnectorImplementationDescription::
    count_configProperty(void) const
    {
      return configProperty_.size ();
    }

    // ConnectorImplementationDescription
    // 
    ConnectorImplementationDescription::capability_iterator ConnectorImplementationDescription::
    begin_capability ()
    {
      return capability_.begin ();
    }

    ConnectorImplementationDescription::capability_iterator ConnectorImplementationDescription::
    end_capability ()
    {
      return capability_.end ();
    }

    ConnectorImplementationDescription::capability_const_iterator ConnectorImplementationDescription::
    begin_capability () const
    {
      return capability_.begin ();
    }

    ConnectorImplementationDescription::capability_const_iterator ConnectorImplementationDescription::
    end_capability () const
    {
      return capability_.end ();
    }

    void ConnectorImplementationDescription::
    add_capability (ACE_Refcounted_Auto_Ptr < ::CIAO::Config_Handlers::Capability, ACE_Null_Mutex >  const& e)
    {
      capability_.push_back (e);
    }

    size_t ConnectorImplementationDescription::
    count_capability(void) const
    {
      return capability_.size ();
    }

    // ConnectorImplementationDescription
    // 
    ConnectorImplementationDescription::dependsOn_iterator ConnectorImplementationDescription::
    begin_dependsOn ()
    {
      return dependsOn_.begin ();
    }

    ConnectorImplementationDescription::dependsOn_iterator ConnectorImplementationDescription::
    end_dependsOn ()
    {
      return dependsOn_.end ();
    }

    ConnectorImplementationDescription::dependsOn_const_iterator ConnectorImplementationDescription::
    begin_dependsOn () const
    {
      return dependsOn_.begin ();
    }

    ConnectorImplementationDescription::dependsOn_const_iterator ConnectorImplementationDescription::
    end_dependsOn () const
    {
      return dependsOn_.end ();
    }

    void ConnectorImplementationDescription::
    add_dependsOn (ACE_Refcounted_Auto_Ptr < ::CIAO::Config_Handlers::ImplementationDependency, ACE_Null_Mutex >  const& e)
    {
      dependsOn_.push_back (e);
    }

    size_t ConnectorImplementationDescription::
    count_dependsOn(void) const
    {
      return dependsOn_.size ();
    }

    // ConnectorImplementationDescription
    // 
    ConnectorImplementationDescription::infoProperty_iterator ConnectorImplementationDescription::
    begin_infoProperty ()
    {
      return infoProperty_.begin ();
    }

    ConnectorImplementationDescription::infoProperty_iterator ConnectorImplementationDescription::
    end_infoProperty ()
    {
      return infoProperty_.end ();
    }

    ConnectorImplementationDescription::infoProperty_const_iterator ConnectorImplementationDescription::
    begin_infoProperty () const
    {
      return infoProperty_.begin ();
    }

    ConnectorImplementationDescription::infoProperty_const_iterator ConnectorImplementationDescription::
    end_infoProperty () const
    {
      return infoProperty_.end ();
    }

    void ConnectorImplementationDescription::
    add_infoProperty (ACE_Refcounted_Auto_Ptr < ::CIAO::Config_Handlers::Property, ACE_Null_Mutex >  const& e)
    {
      infoProperty_.push_back (e);
    }

    size_t ConnectorImplementationDescription::
    count_infoProperty(void) const
    {
      return infoProperty_.size ();
    }

    // ConnectorImplementationDescription
    // 
    bool ConnectorImplementationDescription::
    href_p () const
    {
      return href_.get () != 0;
    }

    ::XMLSchema::string< ACE_TCHAR > const& ConnectorImplementationDescription::
    href () const
    {
      return *href_;
    }

    ::XMLSchema::string< ACE_TCHAR >& ConnectorImplementationDescription::
    href ()
    {
      return *href_;
    }

    void ConnectorImplementationDescription::
    href (::XMLSchema::string< ACE_TCHAR > const& e)
    {
      if (href_.get ())
      {
        *href_ = e;
      }

      else
      {
        href_ = ::std::auto_ptr< ::XMLSchema::string< ACE_TCHAR > > (new ::XMLSchema::string< ACE_TCHAR > (e));
        href_->container (this);
      }
    }
  }
}

namespace CIAO
{
  namespace Config_Handlers
  {
    // ComponentPackageReference
    //

    ComponentPackageReference::
    ComponentPackageReference (::XSCRT::XML::Element< ACE_TCHAR > const& e)
    :Base (e), regulator__ ()
    {

      ::XSCRT::Parser< ACE_TCHAR > p (e);

      while (p.more_elements ())
      {
        ::XSCRT::XML::Element< ACE_TCHAR > e (p.next_element ());
        ::std::basic_string< ACE_TCHAR > n (::XSCRT::XML::uq_name (e.name ()));

        if (n == ACE_TEXT("requiredUUID"))
        {
          ::XMLSchema::string< ACE_TCHAR > t (e);
          requiredUUID (t);
        }

        else if (n == ACE_TEXT("requiredName"))
        {
          ::XMLSchema::string< ACE_TCHAR > t (e);
          requiredName (t);
        }

        else if (n == ACE_TEXT("requiredType"))
        {
          requiredType_ = ::std::auto_ptr< ::CIAO::Config_Handlers::ComponentInterfaceDescription > (new ::CIAO::Config_Handlers::ComponentInterfaceDescription (e));
          requiredType_->container (this);
        }

        else 
        {
        }
      }
    }

    // SubcomponentInstantiationDescription
    //

    SubcomponentInstantiationDescription::
    SubcomponentInstantiationDescription (::XSCRT::XML::Element< ACE_TCHAR > const& e)
    :Base (e), regulator__ ()
    {

      ::XSCRT::Parser< ACE_TCHAR > p (e);

      while (p.more_elements ())
      {
        ::XSCRT::XML::Element< ACE_TCHAR > e (p.next_element ());
        ::std::basic_string< ACE_TCHAR > n (::XSCRT::XML::uq_name (e.name ()));

        if (n == ACE_TEXT("name"))
        {
          name_ = ::std::auto_ptr< ::XMLSchema::string< ACE_TCHAR > > (new ::XMLSchema::string< ACE_TCHAR > (e));
          name_->container (this);
        }

        else if (n == ACE_TEXT("basePackage"))
        {
          ::CIAO::Config_Handlers::ComponentPackageDescription t (e);
          basePackage (t);
        }

        else if (n == ACE_TEXT("specializedConfig"))
        {
          ::CIAO::Config_Handlers::PackageConfiguration t (e);
          specializedConfig (t);
        }

        else if (n == ACE_TEXT("selectRequirement"))
        {
          ACE_Refcounted_Auto_Ptr < ::CIAO::Config_Handlers::Requirement, ACE_Null_Mutex >  t (new ::CIAO::Config_Handlers::Requirement (e));
          add_selectRequirement (t);
        }

        else if (n == ACE_TEXT("configProperty"))
        {
          ACE_Refcounted_Auto_Ptr < ::CIAO::Config_Handlers::Property, ACE_Null_Mutex >  t (new ::CIAO::Config_Handlers::Property (e));
          add_configProperty (t);
        }

        else if (n == ACE_TEXT("referencedPackage"))
        {
          ::CIAO::Config_Handlers::ComponentPackageReference t (e);
          referencedPackage (t);
        }

        else if (n == ACE_TEXT("importedPackage"))
        {
          ::CIAO::Config_Handlers::ComponentPackageImport t (e);
          importedPackage (t);
        }

        else 
        {
        }
      }

      while (p.more_attributes ())
      {
        ::XSCRT::XML::Attribute< ACE_TCHAR > a (p.next_attribute ());
        ::std::basic_string< ACE_TCHAR > n (::XSCRT::XML::uq_name (a.name ()));
        if (n == ACE_TEXT ("id"))
        {
          ::XMLSchema::ID< ACE_TCHAR > t (a);
          id (t);
          std::basic_string<ACE_TCHAR> temp ((*id_).c_str());
          (*ACE_Singleton<ID_Map::TSS_ID_Map, ACE_Null_Mutex>::instance())->
          add_id(temp, dynamic_cast<XSCRT::Type*> (this));
        }

        else 
        {
        }
      }
    }

    // SubcomponentPropertyReference
    //

    SubcomponentPropertyReference::
    SubcomponentPropertyReference (::XSCRT::XML::Element< ACE_TCHAR > const& e)
    :Base (e), regulator__ ()
    {

      ::XSCRT::Parser< ACE_TCHAR > p (e);

      while (p.more_elements ())
      {
        ::XSCRT::XML::Element< ACE_TCHAR > e (p.next_element ());
        ::std::basic_string< ACE_TCHAR > n (::XSCRT::XML::uq_name (e.name ()));

        if (n == ACE_TEXT("propertyName"))
        {
          propertyName_ = ::std::auto_ptr< ::XMLSchema::string< ACE_TCHAR > > (new ::XMLSchema::string< ACE_TCHAR > (e));
          propertyName_->container (this);
        }

        else if (n == ACE_TEXT("instance"))
        {
          instance_ = ::std::auto_ptr< ::CIAO::Config_Handlers::IdRef > (new ::CIAO::Config_Handlers::IdRef (e));
          instance_->container (this);
        }

        else 
        {
        }
      }
    }

    // AssemblyPropertyMapping
    //

    AssemblyPropertyMapping::
    AssemblyPropertyMapping (::XSCRT::XML::Element< ACE_TCHAR > const& e)
    :Base (e), regulator__ ()
    {

      ::XSCRT::Parser< ACE_TCHAR > p (e);

      while (p.more_elements ())
      {
        ::XSCRT::XML::Element< ACE_TCHAR > e (p.next_element ());
        ::std::basic_string< ACE_TCHAR > n (::XSCRT::XML::uq_name (e.name ()));

        if (n == ACE_TEXT("name"))
        {
          name_ = ::std::auto_ptr< ::XMLSchema::string< ACE_TCHAR > > (new ::XMLSchema::string< ACE_TCHAR > (e));
          name_->container (this);
        }

        else if (n == ACE_TEXT("externalName"))
        {
          externalName_ = ::std::auto_ptr< ::XMLSchema::string< ACE_TCHAR > > (new ::XMLSchema::string< ACE_TCHAR > (e));
          externalName_->container (this);
        }

        else if (n == ACE_TEXT("delegatesTo"))
        {
          ACE_Refcounted_Auto_Ptr < ::CIAO::Config_Handlers::SubcomponentPropertyReference, ACE_Null_Mutex >  t (new ::CIAO::Config_Handlers::SubcomponentPropertyReference (e));
          add_delegatesTo (t);
        }

        else 
        {
        }
      }
    }

    // LocalityKind
    //

    LocalityKind::
    LocalityKind (::XSCRT::XML::Element< ACE_TCHAR > const& e)
    : ::XSCRT::Type (e)
    {
      ::std::basic_string< ACE_TCHAR > v (e.value ());

      if (v == ACE_TEXT ("SameNodeAnyProcess")) v_ = SameNodeAnyProcess_l;
      else if (v == ACE_TEXT ("SameNodeSameProcess")) v_ = SameNodeSameProcess_l;
      else if (v == ACE_TEXT ("SameNodeDifferentProcess")) v_ = SameNodeDifferentProcess_l;
      else if (v == ACE_TEXT ("DifferentNode")) v_ = DifferentNode_l;
      else if (v == ACE_TEXT ("DifferentProcess")) v_ = DifferentProcess_l;
      else if (v == ACE_TEXT ("NoConstraint")) v_ = NoConstraint_l;
      else 
      {
      }
    }

    LocalityKind::
    LocalityKind (::XSCRT::XML::Attribute< ACE_TCHAR > const& a)
    : ::XSCRT::Type (a)
    {
      ::std::basic_string< ACE_TCHAR > v (a.value ());

      if (v == ACE_TEXT ("SameNodeAnyProcess")) v_ = SameNodeAnyProcess_l;
      else if (v == ACE_TEXT ("SameNodeSameProcess")) v_ = SameNodeSameProcess_l;
      else if (v == ACE_TEXT ("SameNodeDifferentProcess")) v_ = SameNodeDifferentProcess_l;
      else if (v == ACE_TEXT ("DifferentNode")) v_ = DifferentNode_l;
      else if (v == ACE_TEXT ("DifferentProcess")) v_ = DifferentProcess_l;
      else if (v == ACE_TEXT ("NoConstraint")) v_ = NoConstraint_l;
      else 
      {
      }
    }

    LocalityKind const LocalityKind::SameNodeAnyProcess (LocalityKind::SameNodeAnyProcess_l);
    LocalityKind const LocalityKind::SameNodeSameProcess (LocalityKind::SameNodeSameProcess_l);
    LocalityKind const LocalityKind::SameNodeDifferentProcess (LocalityKind::SameNodeDifferentProcess_l);
    LocalityKind const LocalityKind::DifferentNode (LocalityKind::DifferentNode_l);
    LocalityKind const LocalityKind::DifferentProcess (LocalityKind::DifferentProcess_l);
    LocalityKind const LocalityKind::NoConstraint (LocalityKind::NoConstraint_l);

    // Locality
    //

    Locality::
    Locality (::XSCRT::XML::Element< ACE_TCHAR > const& e)
    :Base (e), regulator__ ()
    {

      ::XSCRT::Parser< ACE_TCHAR > p (e);

      while (p.more_elements ())
      {
        ::XSCRT::XML::Element< ACE_TCHAR > e (p.next_element ());
        ::std::basic_string< ACE_TCHAR > n (::XSCRT::XML::uq_name (e.name ()));

        if (n == ACE_TEXT("constraint"))
        {
          constraint_ = ::std::auto_ptr< ::CIAO::Config_Handlers::LocalityKind > (new ::CIAO::Config_Handlers::LocalityKind (e));
          constraint_->container (this);
        }

        else if (n == ACE_TEXT("constrainedInstance"))
        {
          constrainedInstance_ = ::std::auto_ptr< ::CIAO::Config_Handlers::IdRef > (new ::CIAO::Config_Handlers::IdRef (e));
          constrainedInstance_->container (this);
        }

        else 
        {
        }
      }
    }

    // ComponentAssemblyDescription
    //

    ComponentAssemblyDescription::
    ComponentAssemblyDescription (::XSCRT::XML::Element< ACE_TCHAR > const& e)
    :Base (e), regulator__ ()
    {

      ::XSCRT::Parser< ACE_TCHAR > p (e);

      while (p.more_elements ())
      {
        ::XSCRT::XML::Element< ACE_TCHAR > e (p.next_element ());
        ::std::basic_string< ACE_TCHAR > n (::XSCRT::XML::uq_name (e.name ()));

        if (n == ACE_TEXT("instance"))
        {
          ACE_Refcounted_Auto_Ptr < ::CIAO::Config_Handlers::SubcomponentInstantiationDescription, ACE_Null_Mutex >  t (new ::CIAO::Config_Handlers::SubcomponentInstantiationDescription (e));
          add_instance (t);
        }

        else if (n == ACE_TEXT("connection"))
        {
          ACE_Refcounted_Auto_Ptr < ::CIAO::Config_Handlers::AssemblyConnectionDescription, ACE_Null_Mutex >  t (new ::CIAO::Config_Handlers::AssemblyConnectionDescription (e));
          add_connection (t);
        }

        else if (n == ACE_TEXT("externalProperty"))
        {
          ACE_Refcounted_Auto_Ptr < ::CIAO::Config_Handlers::AssemblyPropertyMapping, ACE_Null_Mutex >  t (new ::CIAO::Config_Handlers::AssemblyPropertyMapping (e));
          add_externalProperty (t);
        }

        else if (n == ACE_TEXT("locality"))
        {
          ACE_Refcounted_Auto_Ptr < ::CIAO::Config_Handlers::Locality, ACE_Null_Mutex >  t (new ::CIAO::Config_Handlers::Locality (e));
          add_locality (t);
        }

        else 
        {
        }
      }
    }

    // MonolithicImplementationDescription
    //

    MonolithicImplementationDescription::
    MonolithicImplementationDescription (::XSCRT::XML::Element< ACE_TCHAR > const& e)
    :Base (e), regulator__ ()
    {

      ::XSCRT::Parser< ACE_TCHAR > p (e);

      while (p.more_elements ())
      {
        ::XSCRT::XML::Element< ACE_TCHAR > e (p.next_element ());
        ::std::basic_string< ACE_TCHAR > n (::XSCRT::XML::uq_name (e.name ()));

        if (n == ACE_TEXT("nodeExecParameter"))
        {
          ACE_Refcounted_Auto_Ptr < ::CIAO::Config_Handlers::Property, ACE_Null_Mutex >  t (new ::CIAO::Config_Handlers::Property (e));
          add_nodeExecParameter (t);
        }

        else if (n == ACE_TEXT("componentExecParameter"))
        {
          ACE_Refcounted_Auto_Ptr < ::CIAO::Config_Handlers::Property, ACE_Null_Mutex >  t (new ::CIAO::Config_Handlers::Property (e));
          add_componentExecParameter (t);
        }

        else if (n == ACE_TEXT("deployRequirement"))
        {
          ACE_Refcounted_Auto_Ptr < ::CIAO::Config_Handlers::ImplementationRequirement, ACE_Null_Mutex >  t (new ::CIAO::Config_Handlers::ImplementationRequirement (e));
          add_deployRequirement (t);
        }

        else if (n == ACE_TEXT("primaryArtifact"))
        {
          ACE_Refcounted_Auto_Ptr < ::CIAO::Config_Handlers::NamedImplementationArtifact, ACE_Null_Mutex >  t (new ::CIAO::Config_Handlers::NamedImplementationArtifact (e));
          add_primaryArtifact (t);
        }

        else 
        {
        }
      }
    }

    // ComponentImplementationDescription
    //

    ComponentImplementationDescription::
    ComponentImplementationDescription (::XSCRT::XML::Element< ACE_TCHAR > const& e)
    :Base (e), regulator__ ()
    {

      ::XSCRT::Parser< ACE_TCHAR > p (e);

      while (p.more_elements ())
      {
        ::XSCRT::XML::Element< ACE_TCHAR > e (p.next_element ());
        ::std::basic_string< ACE_TCHAR > n (::XSCRT::XML::uq_name (e.name ()));

        if (n == ACE_TEXT("label"))
        {
          ::XMLSchema::string< ACE_TCHAR > t (e);
          label (t);
        }

        else if (n == ACE_TEXT("UUID"))
        {
          ::XMLSchema::string< ACE_TCHAR > t (e);
          UUID (t);
        }

        else if (n == ACE_TEXT("implements"))
        {
          ::CIAO::Config_Handlers::ComponentInterfaceDescription t (e);
          implements (t);
        }

        else if (n == ACE_TEXT("assemblyImpl"))
        {
          ::CIAO::Config_Handlers::ComponentAssemblyDescription t (e);
          assemblyImpl (t);
        }

        else if (n == ACE_TEXT("monolithicImpl"))
        {
          ::CIAO::Config_Handlers::MonolithicImplementationDescription t (e);
          monolithicImpl (t);
        }

        else if (n == ACE_TEXT("configProperty"))
        {
          ACE_Refcounted_Auto_Ptr < ::CIAO::Config_Handlers::Property, ACE_Null_Mutex >  t (new ::CIAO::Config_Handlers::Property (e));
          add_configProperty (t);
        }

        else if (n == ACE_TEXT("capability"))
        {
          ACE_Refcounted_Auto_Ptr < ::CIAO::Config_Handlers::Capability, ACE_Null_Mutex >  t (new ::CIAO::Config_Handlers::Capability (e));
          add_capability (t);
        }

        else if (n == ACE_TEXT("dependsOn"))
        {
          ACE_Refcounted_Auto_Ptr < ::CIAO::Config_Handlers::ImplementationDependency, ACE_Null_Mutex >  t (new ::CIAO::Config_Handlers::ImplementationDependency (e));
          add_dependsOn (t);
        }

        else if (n == ACE_TEXT("infoProperty"))
        {
          ACE_Refcounted_Auto_Ptr < ::CIAO::Config_Handlers::Property, ACE_Null_Mutex >  t (new ::CIAO::Config_Handlers::Property (e));
          add_infoProperty (t);
        }

        else 
        {
        }
      }

      while (p.more_attributes ())
      {
        ::XSCRT::XML::Attribute< ACE_TCHAR > a (p.next_attribute ());
        ::std::basic_string< ACE_TCHAR > n (::XSCRT::XML::uq_name (a.name ()));
        if (n == ACE_TEXT ("href"))
        {
          ::XMLSchema::string< ACE_TCHAR > t (a);
          href (t);
        }

        else 
        {
        }
      }
    }

    // ConnectorImplementationDescription
    //

    ConnectorImplementationDescription::
    ConnectorImplementationDescription (::XSCRT::XML::Element< ACE_TCHAR > const& e)
    :Base (e), regulator__ ()
    {

      ::XSCRT::Parser< ACE_TCHAR > p (e);

      while (p.more_elements ())
      {
        ::XSCRT::XML::Element< ACE_TCHAR > e (p.next_element ());
        ::std::basic_string< ACE_TCHAR > n (::XSCRT::XML::uq_name (e.name ()));

        if (n == ACE_TEXT("label"))
        {
          ::XMLSchema::string< ACE_TCHAR > t (e);
          label (t);
        }

        else if (n == ACE_TEXT("UUID"))
        {
          ::XMLSchema::string< ACE_TCHAR > t (e);
          UUID (t);
        }

        else if (n == ACE_TEXT("implements"))
        {
          ::CIAO::Config_Handlers::ComponentInterfaceDescription t (e);
          implements (t);
        }

        else if (n == ACE_TEXT("assemblyImpl"))
        {
          ::CIAO::Config_Handlers::ComponentAssemblyDescription t (e);
          assemblyImpl (t);
        }

        else if (n == ACE_TEXT("monolithicImpl"))
        {
          ::CIAO::Config_Handlers::MonolithicImplementationDescription t (e);
          monolithicImpl (t);
        }

        else if (n == ACE_TEXT("configProperty"))
        {
          ACE_Refcounted_Auto_Ptr < ::CIAO::Config_Handlers::Property, ACE_Null_Mutex >  t (new ::CIAO::Config_Handlers::Property (e));
          add_configProperty (t);
        }

        else if (n == ACE_TEXT("capability"))
        {
          ACE_Refcounted_Auto_Ptr < ::CIAO::Config_Handlers::Capability, ACE_Null_Mutex >  t (new ::CIAO::Config_Handlers::Capability (e));
          add_capability (t);
        }

        else if (n == ACE_TEXT("dependsOn"))
        {
          ACE_Refcounted_Auto_Ptr < ::CIAO::Config_Handlers::ImplementationDependency, ACE_Null_Mutex >  t (new ::CIAO::Config_Handlers::ImplementationDependency (e));
          add_dependsOn (t);
        }

        else if (n == ACE_TEXT("infoProperty"))
        {
          ACE_Refcounted_Auto_Ptr < ::CIAO::Config_Handlers::Property, ACE_Null_Mutex >  t (new ::CIAO::Config_Handlers::Property (e));
          add_infoProperty (t);
        }

        else 
        {
        }
      }

      while (p.more_attributes ())
      {
        ::XSCRT::XML::Attribute< ACE_TCHAR > a (p.next_attribute ());
        ::std::basic_string< ACE_TCHAR > n (::XSCRT::XML::uq_name (a.name ()));
        if (n == ACE_TEXT ("href"))
        {
          ::XMLSchema::string< ACE_TCHAR > t (a);
          href (t);
        }

        else 
        {
        }
      }
    }
  }
}

namespace CIAO
{
  namespace Config_Handlers
  {
  }
}

#include "XMLSchema/TypeInfo.hpp"

namespace CIAO
{
  namespace Config_Handlers
  {
    namespace
    {
      ::XMLSchema::TypeInfoInitializer < ACE_TCHAR > XMLSchemaTypeInfoInitializer_ (::XSCRT::extended_type_info_map ());

      struct ComponentPackageReferenceTypeInfoInitializer
      {
        ComponentPackageReferenceTypeInfoInitializer ()
        {
          ::XSCRT::TypeId id (typeid (::CIAO::Config_Handlers::ComponentPackageReference));
          ::XSCRT::ExtendedTypeInfo nf (id);

          nf.add_base (::XSCRT::ExtendedTypeInfo::Access::public_, false, typeid (::XSCRT::Type));
          ::XSCRT::extended_type_info_map ().insert (::std::make_pair (id, nf));
        }
      };

      ComponentPackageReferenceTypeInfoInitializer ComponentPackageReferenceTypeInfoInitializer_;

      struct SubcomponentInstantiationDescriptionTypeInfoInitializer
      {
        SubcomponentInstantiationDescriptionTypeInfoInitializer ()
        {
          ::XSCRT::TypeId id (typeid (::CIAO::Config_Handlers::SubcomponentInstantiationDescription));
          ::XSCRT::ExtendedTypeInfo nf (id);

          nf.add_base (::XSCRT::ExtendedTypeInfo::Access::public_, false, typeid (::XSCRT::Type));
          ::XSCRT::extended_type_info_map ().insert (::std::make_pair (id, nf));
        }
      };

      SubcomponentInstantiationDescriptionTypeInfoInitializer SubcomponentInstantiationDescriptionTypeInfoInitializer_;

      struct SubcomponentPropertyReferenceTypeInfoInitializer
      {
        SubcomponentPropertyReferenceTypeInfoInitializer ()
        {
          ::XSCRT::TypeId id (typeid (::CIAO::Config_Handlers::SubcomponentPropertyReference));
          ::XSCRT::ExtendedTypeInfo nf (id);

          nf.add_base (::XSCRT::ExtendedTypeInfo::Access::public_, false, typeid (::XSCRT::Type));
          ::XSCRT::extended_type_info_map ().insert (::std::make_pair (id, nf));
        }
      };

      SubcomponentPropertyReferenceTypeInfoInitializer SubcomponentPropertyReferenceTypeInfoInitializer_;

      struct AssemblyPropertyMappingTypeInfoInitializer
      {
        AssemblyPropertyMappingTypeInfoInitializer ()
        {
          ::XSCRT::TypeId id (typeid (::CIAO::Config_Handlers::AssemblyPropertyMapping));
          ::XSCRT::ExtendedTypeInfo nf (id);

          nf.add_base (::XSCRT::ExtendedTypeInfo::Access::public_, false, typeid (::XSCRT::Type));
          ::XSCRT::extended_type_info_map ().insert (::std::make_pair (id, nf));
        }
      };

      AssemblyPropertyMappingTypeInfoInitializer AssemblyPropertyMappingTypeInfoInitializer_;

      struct LocalityKindTypeInfoInitializer
      {
        LocalityKindTypeInfoInitializer ()
        {
          ::XSCRT::TypeId id (typeid (LocalityKind));
          ::XSCRT::ExtendedTypeInfo nf (id);

          nf.add_base (::XSCRT::ExtendedTypeInfo::Access::public_, false, typeid (::XSCRT::Type));

          ::XSCRT::extended_type_info_map ().insert (::std::make_pair (id, nf));
        }
      };

      LocalityKindTypeInfoInitializer LocalityKindTypeInfoInitializer_;

      struct LocalityTypeInfoInitializer
      {
        LocalityTypeInfoInitializer ()
        {
          ::XSCRT::TypeId id (typeid (::CIAO::Config_Handlers::Locality));
          ::XSCRT::ExtendedTypeInfo nf (id);

          nf.add_base (::XSCRT::ExtendedTypeInfo::Access::public_, false, typeid (::XSCRT::Type));
          ::XSCRT::extended_type_info_map ().insert (::std::make_pair (id, nf));
        }
      };

      LocalityTypeInfoInitializer LocalityTypeInfoInitializer_;

      struct ComponentAssemblyDescriptionTypeInfoInitializer
      {
        ComponentAssemblyDescriptionTypeInfoInitializer ()
        {
          ::XSCRT::TypeId id (typeid (::CIAO::Config_Handlers::ComponentAssemblyDescription));
          ::XSCRT::ExtendedTypeInfo nf (id);

          nf.add_base (::XSCRT::ExtendedTypeInfo::Access::public_, false, typeid (::XSCRT::Type));
          ::XSCRT::extended_type_info_map ().insert (::std::make_pair (id, nf));
        }
      };

      ComponentAssemblyDescriptionTypeInfoInitializer ComponentAssemblyDescriptionTypeInfoInitializer_;

      struct MonolithicImplementationDescriptionTypeInfoInitializer
      {
        MonolithicImplementationDescriptionTypeInfoInitializer ()
        {
          ::XSCRT::TypeId id (typeid (::CIAO::Config_Handlers::MonolithicImplementationDescription));
          ::XSCRT::ExtendedTypeInfo nf (id);

          nf.add_base (::XSCRT::ExtendedTypeInfo::Access::public_, false, typeid (::XSCRT::Type));
          ::XSCRT::extended_type_info_map ().insert (::std::make_pair (id, nf));
        }
      };

      MonolithicImplementationDescriptionTypeInfoInitializer MonolithicImplementationDescriptionTypeInfoInitializer_;

      struct ComponentImplementationDescriptionTypeInfoInitializer
      {
        ComponentImplementationDescriptionTypeInfoInitializer ()
        {
          ::XSCRT::TypeId id (typeid (::CIAO::Config_Handlers::ComponentImplementationDescription));
          ::XSCRT::ExtendedTypeInfo nf (id);

          nf.add_base (::XSCRT::ExtendedTypeInfo::Access::public_, false, typeid (::XSCRT::Type));
          ::XSCRT::extended_type_info_map ().insert (::std::make_pair (id, nf));
        }
      };

      ComponentImplementationDescriptionTypeInfoInitializer ComponentImplementationDescriptionTypeInfoInitializer_;

      struct ConnectorImplementationDescriptionTypeInfoInitializer
      {
        ConnectorImplementationDescriptionTypeInfoInitializer ()
        {
          ::XSCRT::TypeId id (typeid (::CIAO::Config_Handlers::ConnectorImplementationDescription));
          ::XSCRT::ExtendedTypeInfo nf (id);

          nf.add_base (::XSCRT::ExtendedTypeInfo::Access::public_, false, typeid (::XSCRT::Type));
          ::XSCRT::extended_type_info_map ().insert (::std::make_pair (id, nf));
        }
      };

      ConnectorImplementationDescriptionTypeInfoInitializer ConnectorImplementationDescriptionTypeInfoInitializer_;
    }
  }
}

namespace CIAO
{
  namespace Config_Handlers
  {
    namespace Traversal
    {
      // ComponentPackageReference
      //
      //

      void ComponentPackageReference::
      traverse (Type& o)
      {
        pre (o);
        if (o.requiredUUID_p ()) requiredUUID (o);
        else requiredUUID_none (o);
        if (o.requiredName_p ()) requiredName (o);
        else requiredName_none (o);
        requiredType (o);
        post (o);
      }

      void ComponentPackageReference::
      traverse (Type const& o)
      {
        pre (o);
        if (o.requiredUUID_p ()) requiredUUID (o);
        else requiredUUID_none (o);
        if (o.requiredName_p ()) requiredName (o);
        else requiredName_none (o);
        requiredType (o);
        post (o);
      }

      void ComponentPackageReference::
      pre (Type&)
      {
      }

      void ComponentPackageReference::
      pre (Type const&)
      {
      }

      void ComponentPackageReference::
      requiredUUID (Type& o)
      {
        dispatch (o.requiredUUID ());
      }

      void ComponentPackageReference::
      requiredUUID (Type const& o)
      {
        dispatch (o.requiredUUID ());
      }

      void ComponentPackageReference::
      requiredUUID_none (Type&)
      {
      }

      void ComponentPackageReference::
      requiredUUID_none (Type const&)
      {
      }

      void ComponentPackageReference::
      requiredName (Type& o)
      {
        dispatch (o.requiredName ());
      }

      void ComponentPackageReference::
      requiredName (Type const& o)
      {
        dispatch (o.requiredName ());
      }

      void ComponentPackageReference::
      requiredName_none (Type&)
      {
      }

      void ComponentPackageReference::
      requiredName_none (Type const&)
      {
      }

      void ComponentPackageReference::
      requiredType (Type& o)
      {
        dispatch (o.requiredType ());
      }

      void ComponentPackageReference::
      requiredType (Type const& o)
      {
        dispatch (o.requiredType ());
      }

      void ComponentPackageReference::
      post (Type&)
      {
      }

      void ComponentPackageReference::
      post (Type const&)
      {
      }

      // SubcomponentInstantiationDescription
      //
      //

      void SubcomponentInstantiationDescription::
      traverse (Type& o)
      {
        pre (o);
        name (o);
        if (o.basePackage_p ()) basePackage (o);
        else basePackage_none (o);
        if (o.specializedConfig_p ()) specializedConfig (o);
        else specializedConfig_none (o);
        selectRequirement (o);
        configProperty (o);
        if (o.referencedPackage_p ()) referencedPackage (o);
        else referencedPackage_none (o);
        if (o.importedPackage_p ()) importedPackage (o);
        else importedPackage_none (o);
        if (o.id_p ()) id (o);
        else id_none (o);
        post (o);
      }

      void SubcomponentInstantiationDescription::
      traverse (Type const& o)
      {
        pre (o);
        name (o);
        if (o.basePackage_p ()) basePackage (o);
        else basePackage_none (o);
        if (o.specializedConfig_p ()) specializedConfig (o);
        else specializedConfig_none (o);
        selectRequirement (o);
        configProperty (o);
        if (o.referencedPackage_p ()) referencedPackage (o);
        else referencedPackage_none (o);
        if (o.importedPackage_p ()) importedPackage (o);
        else importedPackage_none (o);
        if (o.id_p ()) id (o);
        else id_none (o);
        post (o);
      }

      void SubcomponentInstantiationDescription::
      pre (Type&)
      {
      }

      void SubcomponentInstantiationDescription::
      pre (Type const&)
      {
      }

      void SubcomponentInstantiationDescription::
      name (Type& o)
      {
        dispatch (o.name ());
      }

      void SubcomponentInstantiationDescription::
      name (Type const& o)
      {
        dispatch (o.name ());
      }

      void SubcomponentInstantiationDescription::
      basePackage (Type& o)
      {
        dispatch (o.basePackage ());
      }

      void SubcomponentInstantiationDescription::
      basePackage (Type const& o)
      {
        dispatch (o.basePackage ());
      }

      void SubcomponentInstantiationDescription::
      basePackage_none (Type&)
      {
      }

      void SubcomponentInstantiationDescription::
      basePackage_none (Type const&)
      {
      }

      void SubcomponentInstantiationDescription::
      specializedConfig (Type& o)
      {
        dispatch (o.specializedConfig ());
      }

      void SubcomponentInstantiationDescription::
      specializedConfig (Type const& o)
      {
        dispatch (o.specializedConfig ());
      }

      void SubcomponentInstantiationDescription::
      specializedConfig_none (Type&)
      {
      }

      void SubcomponentInstantiationDescription::
      specializedConfig_none (Type const&)
      {
      }

      void SubcomponentInstantiationDescription::
      selectRequirement (Type& o)
      {
        // VC6 anathema strikes again
        //
        ::CIAO::Config_Handlers::SubcomponentInstantiationDescription::selectRequirement_iterator b (o.begin_selectRequirement()), e (o.end_selectRequirement());

        if (b != e)
        {
          selectRequirement_pre (o);
          for (; b != e;)
          {
            dispatch (*(*b));
            if (++b != e) selectRequirement_next (o);
          }

          selectRequirement_post (o);
        }

        else selectRequirement_none (o);
      }

      void SubcomponentInstantiationDescription::
      selectRequirement (Type const& o)
      {
        // VC6 anathema strikes again
        //
        ::CIAO::Config_Handlers::SubcomponentInstantiationDescription::selectRequirement_const_iterator b (o.begin_selectRequirement()), e (o.end_selectRequirement());

        if (b != e)
        {
          selectRequirement_pre (o);
          for (; b != e;)
          {
            dispatch (*(*b));
            if (++b != e) selectRequirement_next (o);
          }

          selectRequirement_post (o);
        }

        else selectRequirement_none (o);
      }

      void SubcomponentInstantiationDescription::
      selectRequirement_pre (Type&)
      {
      }

      void SubcomponentInstantiationDescription::
      selectRequirement_pre (Type const&)
      {
      }

      void SubcomponentInstantiationDescription::
      selectRequirement_next (Type&)
      {
      }

      void SubcomponentInstantiationDescription::
      selectRequirement_next (Type const&)
      {
      }

      void SubcomponentInstantiationDescription::
      selectRequirement_post (Type&)
      {
      }

      void SubcomponentInstantiationDescription::
      selectRequirement_post (Type const&)
      {
      }

      void SubcomponentInstantiationDescription::
      selectRequirement_none (Type&)
      {
      }

      void SubcomponentInstantiationDescription::
      selectRequirement_none (Type const&)
      {
      }

      void SubcomponentInstantiationDescription::
      configProperty (Type& o)
      {
        // VC6 anathema strikes again
        //
        ::CIAO::Config_Handlers::SubcomponentInstantiationDescription::configProperty_iterator b (o.begin_configProperty()), e (o.end_configProperty());

        if (b != e)
        {
          configProperty_pre (o);
          for (; b != e;)
          {
            dispatch (*(*b));
            if (++b != e) configProperty_next (o);
          }

          configProperty_post (o);
        }

        else configProperty_none (o);
      }

      void SubcomponentInstantiationDescription::
      configProperty (Type const& o)
      {
        // VC6 anathema strikes again
        //
        ::CIAO::Config_Handlers::SubcomponentInstantiationDescription::configProperty_const_iterator b (o.begin_configProperty()), e (o.end_configProperty());

        if (b != e)
        {
          configProperty_pre (o);
          for (; b != e;)
          {
            dispatch (*(*b));
            if (++b != e) configProperty_next (o);
          }

          configProperty_post (o);
        }

        else configProperty_none (o);
      }

      void SubcomponentInstantiationDescription::
      configProperty_pre (Type&)
      {
      }

      void SubcomponentInstantiationDescription::
      configProperty_pre (Type const&)
      {
      }

      void SubcomponentInstantiationDescription::
      configProperty_next (Type&)
      {
      }

      void SubcomponentInstantiationDescription::
      configProperty_next (Type const&)
      {
      }

      void SubcomponentInstantiationDescription::
      configProperty_post (Type&)
      {
      }

      void SubcomponentInstantiationDescription::
      configProperty_post (Type const&)
      {
      }

      void SubcomponentInstantiationDescription::
      configProperty_none (Type&)
      {
      }

      void SubcomponentInstantiationDescription::
      configProperty_none (Type const&)
      {
      }

      void SubcomponentInstantiationDescription::
      referencedPackage (Type& o)
      {
        dispatch (o.referencedPackage ());
      }

      void SubcomponentInstantiationDescription::
      referencedPackage (Type const& o)
      {
        dispatch (o.referencedPackage ());
      }

      void SubcomponentInstantiationDescription::
      referencedPackage_none (Type&)
      {
      }

      void SubcomponentInstantiationDescription::
      referencedPackage_none (Type const&)
      {
      }

      void SubcomponentInstantiationDescription::
      importedPackage (Type& o)
      {
        dispatch (o.importedPackage ());
      }

      void SubcomponentInstantiationDescription::
      importedPackage (Type const& o)
      {
        dispatch (o.importedPackage ());
      }

      void SubcomponentInstantiationDescription::
      importedPackage_none (Type&)
      {
      }

      void SubcomponentInstantiationDescription::
      importedPackage_none (Type const&)
      {
      }

      void SubcomponentInstantiationDescription::
      id (Type& o)
      {
        dispatch (o.id ());
      }

      void SubcomponentInstantiationDescription::
      id (Type const& o)
      {
        dispatch (o.id ());
      }

      void SubcomponentInstantiationDescription::
      id_none (Type&)
      {
      }

      void SubcomponentInstantiationDescription::
      id_none (Type const&)
      {
      }

      void SubcomponentInstantiationDescription::
      post (Type&)
      {
      }

      void SubcomponentInstantiationDescription::
      post (Type const&)
      {
      }

      // SubcomponentPropertyReference
      //
      //

      void SubcomponentPropertyReference::
      traverse (Type& o)
      {
        pre (o);
        propertyName (o);
        instance (o);
        post (o);
      }

      void SubcomponentPropertyReference::
      traverse (Type const& o)
      {
        pre (o);
        propertyName (o);
        instance (o);
        post (o);
      }

      void SubcomponentPropertyReference::
      pre (Type&)
      {
      }

      void SubcomponentPropertyReference::
      pre (Type const&)
      {
      }

      void SubcomponentPropertyReference::
      propertyName (Type& o)
      {
        dispatch (o.propertyName ());
      }

      void SubcomponentPropertyReference::
      propertyName (Type const& o)
      {
        dispatch (o.propertyName ());
      }

      void SubcomponentPropertyReference::
      instance (Type& o)
      {
        dispatch (o.instance ());
      }

      void SubcomponentPropertyReference::
      instance (Type const& o)
      {
        dispatch (o.instance ());
      }

      void SubcomponentPropertyReference::
      post (Type&)
      {
      }

      void SubcomponentPropertyReference::
      post (Type const&)
      {
      }

      // AssemblyPropertyMapping
      //
      //

      void AssemblyPropertyMapping::
      traverse (Type& o)
      {
        pre (o);
        name (o);
        externalName (o);
        delegatesTo (o);
        post (o);
      }

      void AssemblyPropertyMapping::
      traverse (Type const& o)
      {
        pre (o);
        name (o);
        externalName (o);
        delegatesTo (o);
        post (o);
      }

      void AssemblyPropertyMapping::
      pre (Type&)
      {
      }

      void AssemblyPropertyMapping::
      pre (Type const&)
      {
      }

      void AssemblyPropertyMapping::
      name (Type& o)
      {
        dispatch (o.name ());
      }

      void AssemblyPropertyMapping::
      name (Type const& o)
      {
        dispatch (o.name ());
      }

      void AssemblyPropertyMapping::
      externalName (Type& o)
      {
        dispatch (o.externalName ());
      }

      void AssemblyPropertyMapping::
      externalName (Type const& o)
      {
        dispatch (o.externalName ());
      }

      void AssemblyPropertyMapping::
      delegatesTo (Type& o)
      {
        // VC6 anathema strikes again
        //
        ::CIAO::Config_Handlers::AssemblyPropertyMapping::delegatesTo_iterator b (o.begin_delegatesTo()), e (o.end_delegatesTo());

        if (b != e)
        {
          delegatesTo_pre (o);
          for (; b != e;)
          {
            dispatch (*(*b));
            if (++b != e) delegatesTo_next (o);
          }

          delegatesTo_post (o);
        }

        else delegatesTo_none (o);
      }

      void AssemblyPropertyMapping::
      delegatesTo (Type const& o)
      {
        // VC6 anathema strikes again
        //
        ::CIAO::Config_Handlers::AssemblyPropertyMapping::delegatesTo_const_iterator b (o.begin_delegatesTo()), e (o.end_delegatesTo());

        if (b != e)
        {
          delegatesTo_pre (o);
          for (; b != e;)
          {
            dispatch (*(*b));
            if (++b != e) delegatesTo_next (o);
          }

          delegatesTo_post (o);
        }

        else delegatesTo_none (o);
      }

      void AssemblyPropertyMapping::
      delegatesTo_pre (Type&)
      {
      }

      void AssemblyPropertyMapping::
      delegatesTo_pre (Type const&)
      {
      }

      void AssemblyPropertyMapping::
      delegatesTo_next (Type&)
      {
      }

      void AssemblyPropertyMapping::
      delegatesTo_next (Type const&)
      {
      }

      void AssemblyPropertyMapping::
      delegatesTo_post (Type&)
      {
      }

      void AssemblyPropertyMapping::
      delegatesTo_post (Type const&)
      {
      }

      void AssemblyPropertyMapping::
      delegatesTo_none (Type&)
      {
      }

      void AssemblyPropertyMapping::
      delegatesTo_none (Type const&)
      {
      }

      void AssemblyPropertyMapping::
      post (Type&)
      {
      }

      void AssemblyPropertyMapping::
      post (Type const&)
      {
      }

      // Locality
      //
      //

      void Locality::
      traverse (Type& o)
      {
        pre (o);
        constraint (o);
        constrainedInstance (o);
        post (o);
      }

      void Locality::
      traverse (Type const& o)
      {
        pre (o);
        constraint (o);
        constrainedInstance (o);
        post (o);
      }

      void Locality::
      pre (Type&)
      {
      }

      void Locality::
      pre (Type const&)
      {
      }

      void Locality::
      constraint (Type& o)
      {
        dispatch (o.constraint ());
      }

      void Locality::
      constraint (Type const& o)
      {
        dispatch (o.constraint ());
      }

      void Locality::
      constrainedInstance (Type& o)
      {
        dispatch (o.constrainedInstance ());
      }

      void Locality::
      constrainedInstance (Type const& o)
      {
        dispatch (o.constrainedInstance ());
      }

      void Locality::
      post (Type&)
      {
      }

      void Locality::
      post (Type const&)
      {
      }

      // ComponentAssemblyDescription
      //
      //

      void ComponentAssemblyDescription::
      traverse (Type& o)
      {
        pre (o);
        instance (o);
        connection (o);
        externalProperty (o);
        locality (o);
        post (o);
      }

      void ComponentAssemblyDescription::
      traverse (Type const& o)
      {
        pre (o);
        instance (o);
        connection (o);
        externalProperty (o);
        locality (o);
        post (o);
      }

      void ComponentAssemblyDescription::
      pre (Type&)
      {
      }

      void ComponentAssemblyDescription::
      pre (Type const&)
      {
      }

      void ComponentAssemblyDescription::
      instance (Type& o)
      {
        // VC6 anathema strikes again
        //
        ::CIAO::Config_Handlers::ComponentAssemblyDescription::instance_iterator b (o.begin_instance()), e (o.end_instance());

        if (b != e)
        {
          instance_pre (o);
          for (; b != e;)
          {
            dispatch (*(*b));
            if (++b != e) instance_next (o);
          }

          instance_post (o);
        }

        else instance_none (o);
      }

      void ComponentAssemblyDescription::
      instance (Type const& o)
      {
        // VC6 anathema strikes again
        //
        ::CIAO::Config_Handlers::ComponentAssemblyDescription::instance_const_iterator b (o.begin_instance()), e (o.end_instance());

        if (b != e)
        {
          instance_pre (o);
          for (; b != e;)
          {
            dispatch (*(*b));
            if (++b != e) instance_next (o);
          }

          instance_post (o);
        }

        else instance_none (o);
      }

      void ComponentAssemblyDescription::
      instance_pre (Type&)
      {
      }

      void ComponentAssemblyDescription::
      instance_pre (Type const&)
      {
      }

      void ComponentAssemblyDescription::
      instance_next (Type&)
      {
      }

      void ComponentAssemblyDescription::
      instance_next (Type const&)
      {
      }

      void ComponentAssemblyDescription::
      instance_post (Type&)
      {
      }

      void ComponentAssemblyDescription::
      instance_post (Type const&)
      {
      }

      void ComponentAssemblyDescription::
      instance_none (Type&)
      {
      }

      void ComponentAssemblyDescription::
      instance_none (Type const&)
      {
      }

      void ComponentAssemblyDescription::
      connection (Type& o)
      {
        // VC6 anathema strikes again
        //
        ::CIAO::Config_Handlers::ComponentAssemblyDescription::connection_iterator b (o.begin_connection()), e (o.end_connection());

        if (b != e)
        {
          connection_pre (o);
          for (; b != e;)
          {
            dispatch (*(*b));
            if (++b != e) connection_next (o);
          }

          connection_post (o);
        }

        else connection_none (o);
      }

      void ComponentAssemblyDescription::
      connection (Type const& o)
      {
        // VC6 anathema strikes again
        //
        ::CIAO::Config_Handlers::ComponentAssemblyDescription::connection_const_iterator b (o.begin_connection()), e (o.end_connection());

        if (b != e)
        {
          connection_pre (o);
          for (; b != e;)
          {
            dispatch (*(*b));
            if (++b != e) connection_next (o);
          }

          connection_post (o);
        }

        else connection_none (o);
      }

      void ComponentAssemblyDescription::
      connection_pre (Type&)
      {
      }

      void ComponentAssemblyDescription::
      connection_pre (Type const&)
      {
      }

      void ComponentAssemblyDescription::
      connection_next (Type&)
      {
      }

      void ComponentAssemblyDescription::
      connection_next (Type const&)
      {
      }

      void ComponentAssemblyDescription::
      connection_post (Type&)
      {
      }

      void ComponentAssemblyDescription::
      connection_post (Type const&)
      {
      }

      void ComponentAssemblyDescription::
      connection_none (Type&)
      {
      }

      void ComponentAssemblyDescription::
      connection_none (Type const&)
      {
      }

      void ComponentAssemblyDescription::
      externalProperty (Type& o)
      {
        // VC6 anathema strikes again
        //
        ::CIAO::Config_Handlers::ComponentAssemblyDescription::externalProperty_iterator b (o.begin_externalProperty()), e (o.end_externalProperty());

        if (b != e)
        {
          externalProperty_pre (o);
          for (; b != e;)
          {
            dispatch (*(*b));
            if (++b != e) externalProperty_next (o);
          }

          externalProperty_post (o);
        }

        else externalProperty_none (o);
      }

      void ComponentAssemblyDescription::
      externalProperty (Type const& o)
      {
        // VC6 anathema strikes again
        //
        ::CIAO::Config_Handlers::ComponentAssemblyDescription::externalProperty_const_iterator b (o.begin_externalProperty()), e (o.end_externalProperty());

        if (b != e)
        {
          externalProperty_pre (o);
          for (; b != e;)
          {
            dispatch (*(*b));
            if (++b != e) externalProperty_next (o);
          }

          externalProperty_post (o);
        }

        else externalProperty_none (o);
      }

      void ComponentAssemblyDescription::
      externalProperty_pre (Type&)
      {
      }

      void ComponentAssemblyDescription::
      externalProperty_pre (Type const&)
      {
      }

      void ComponentAssemblyDescription::
      externalProperty_next (Type&)
      {
      }

      void ComponentAssemblyDescription::
      externalProperty_next (Type const&)
      {
      }

      void ComponentAssemblyDescription::
      externalProperty_post (Type&)
      {
      }

      void ComponentAssemblyDescription::
      externalProperty_post (Type const&)
      {
      }

      void ComponentAssemblyDescription::
      externalProperty_none (Type&)
      {
      }

      void ComponentAssemblyDescription::
      externalProperty_none (Type const&)
      {
      }

      void ComponentAssemblyDescription::
      locality (Type& o)
      {
        // VC6 anathema strikes again
        //
        ::CIAO::Config_Handlers::ComponentAssemblyDescription::locality_iterator b (o.begin_locality()), e (o.end_locality());

        if (b != e)
        {
          locality_pre (o);
          for (; b != e;)
          {
            dispatch (*(*b));
            if (++b != e) locality_next (o);
          }

          locality_post (o);
        }

        else locality_none (o);
      }

      void ComponentAssemblyDescription::
      locality (Type const& o)
      {
        // VC6 anathema strikes again
        //
        ::CIAO::Config_Handlers::ComponentAssemblyDescription::locality_const_iterator b (o.begin_locality()), e (o.end_locality());

        if (b != e)
        {
          locality_pre (o);
          for (; b != e;)
          {
            dispatch (*(*b));
            if (++b != e) locality_next (o);
          }

          locality_post (o);
        }

        else locality_none (o);
      }

      void ComponentAssemblyDescription::
      locality_pre (Type&)
      {
      }

      void ComponentAssemblyDescription::
      locality_pre (Type const&)
      {
      }

      void ComponentAssemblyDescription::
      locality_next (Type&)
      {
      }

      void ComponentAssemblyDescription::
      locality_next (Type const&)
      {
      }

      void ComponentAssemblyDescription::
      locality_post (Type&)
      {
      }

      void ComponentAssemblyDescription::
      locality_post (Type const&)
      {
      }

      void ComponentAssemblyDescription::
      locality_none (Type&)
      {
      }

      void ComponentAssemblyDescription::
      locality_none (Type const&)
      {
      }

      void ComponentAssemblyDescription::
      post (Type&)
      {
      }

      void ComponentAssemblyDescription::
      post (Type const&)
      {
      }

      // MonolithicImplementationDescription
      //
      //

      void MonolithicImplementationDescription::
      traverse (Type& o)
      {
        pre (o);
        nodeExecParameter (o);
        componentExecParameter (o);
        deployRequirement (o);
        primaryArtifact (o);
        post (o);
      }

      void MonolithicImplementationDescription::
      traverse (Type const& o)
      {
        pre (o);
        nodeExecParameter (o);
        componentExecParameter (o);
        deployRequirement (o);
        primaryArtifact (o);
        post (o);
      }

      void MonolithicImplementationDescription::
      pre (Type&)
      {
      }

      void MonolithicImplementationDescription::
      pre (Type const&)
      {
      }

      void MonolithicImplementationDescription::
      nodeExecParameter (Type& o)
      {
        // VC6 anathema strikes again
        //
        ::CIAO::Config_Handlers::MonolithicImplementationDescription::nodeExecParameter_iterator b (o.begin_nodeExecParameter()), e (o.end_nodeExecParameter());

        if (b != e)
        {
          nodeExecParameter_pre (o);
          for (; b != e;)
          {
            dispatch (*(*b));
            if (++b != e) nodeExecParameter_next (o);
          }

          nodeExecParameter_post (o);
        }

        else nodeExecParameter_none (o);
      }

      void MonolithicImplementationDescription::
      nodeExecParameter (Type const& o)
      {
        // VC6 anathema strikes again
        //
        ::CIAO::Config_Handlers::MonolithicImplementationDescription::nodeExecParameter_const_iterator b (o.begin_nodeExecParameter()), e (o.end_nodeExecParameter());

        if (b != e)
        {
          nodeExecParameter_pre (o);
          for (; b != e;)
          {
            dispatch (*(*b));
            if (++b != e) nodeExecParameter_next (o);
          }

          nodeExecParameter_post (o);
        }

        else nodeExecParameter_none (o);
      }

      void MonolithicImplementationDescription::
      nodeExecParameter_pre (Type&)
      {
      }

      void MonolithicImplementationDescription::
      nodeExecParameter_pre (Type const&)
      {
      }

      void MonolithicImplementationDescription::
      nodeExecParameter_next (Type&)
      {
      }

      void MonolithicImplementationDescription::
      nodeExecParameter_next (Type const&)
      {
      }

      void MonolithicImplementationDescription::
      nodeExecParameter_post (Type&)
      {
      }

      void MonolithicImplementationDescription::
      nodeExecParameter_post (Type const&)
      {
      }

      void MonolithicImplementationDescription::
      nodeExecParameter_none (Type&)
      {
      }

      void MonolithicImplementationDescription::
      nodeExecParameter_none (Type const&)
      {
      }

      void MonolithicImplementationDescription::
      componentExecParameter (Type& o)
      {
        // VC6 anathema strikes again
        //
        ::CIAO::Config_Handlers::MonolithicImplementationDescription::componentExecParameter_iterator b (o.begin_componentExecParameter()), e (o.end_componentExecParameter());

        if (b != e)
        {
          componentExecParameter_pre (o);
          for (; b != e;)
          {
            dispatch (*(*b));
            if (++b != e) componentExecParameter_next (o);
          }

          componentExecParameter_post (o);
        }

        else componentExecParameter_none (o);
      }

      void MonolithicImplementationDescription::
      componentExecParameter (Type const& o)
      {
        // VC6 anathema strikes again
        //
        ::CIAO::Config_Handlers::MonolithicImplementationDescription::componentExecParameter_const_iterator b (o.begin_componentExecParameter()), e (o.end_componentExecParameter());

        if (b != e)
        {
          componentExecParameter_pre (o);
          for (; b != e;)
          {
            dispatch (*(*b));
            if (++b != e) componentExecParameter_next (o);
          }

          componentExecParameter_post (o);
        }

        else componentExecParameter_none (o);
      }

      void MonolithicImplementationDescription::
      componentExecParameter_pre (Type&)
      {
      }

      void MonolithicImplementationDescription::
      componentExecParameter_pre (Type const&)
      {
      }

      void MonolithicImplementationDescription::
      componentExecParameter_next (Type&)
      {
      }

      void MonolithicImplementationDescription::
      componentExecParameter_next (Type const&)
      {
      }

      void MonolithicImplementationDescription::
      componentExecParameter_post (Type&)
      {
      }

      void MonolithicImplementationDescription::
      componentExecParameter_post (Type const&)
      {
      }

      void MonolithicImplementationDescription::
      componentExecParameter_none (Type&)
      {
      }

      void MonolithicImplementationDescription::
      componentExecParameter_none (Type const&)
      {
      }

      void MonolithicImplementationDescription::
      deployRequirement (Type& o)
      {
        // VC6 anathema strikes again
        //
        ::CIAO::Config_Handlers::MonolithicImplementationDescription::deployRequirement_iterator b (o.begin_deployRequirement()), e (o.end_deployRequirement());

        if (b != e)
        {
          deployRequirement_pre (o);
          for (; b != e;)
          {
            dispatch (*(*b));
            if (++b != e) deployRequirement_next (o);
          }

          deployRequirement_post (o);
        }

        else deployRequirement_none (o);
      }

      void MonolithicImplementationDescription::
      deployRequirement (Type const& o)
      {
        // VC6 anathema strikes again
        //
        ::CIAO::Config_Handlers::MonolithicImplementationDescription::deployRequirement_const_iterator b (o.begin_deployRequirement()), e (o.end_deployRequirement());

        if (b != e)
        {
          deployRequirement_pre (o);
          for (; b != e;)
          {
            dispatch (*(*b));
            if (++b != e) deployRequirement_next (o);
          }

          deployRequirement_post (o);
        }

        else deployRequirement_none (o);
      }

      void MonolithicImplementationDescription::
      deployRequirement_pre (Type&)
      {
      }

      void MonolithicImplementationDescription::
      deployRequirement_pre (Type const&)
      {
      }

      void MonolithicImplementationDescription::
      deployRequirement_next (Type&)
      {
      }

      void MonolithicImplementationDescription::
      deployRequirement_next (Type const&)
      {
      }

      void MonolithicImplementationDescription::
      deployRequirement_post (Type&)
      {
      }

      void MonolithicImplementationDescription::
      deployRequirement_post (Type const&)
      {
      }

      void MonolithicImplementationDescription::
      deployRequirement_none (Type&)
      {
      }

      void MonolithicImplementationDescription::
      deployRequirement_none (Type const&)
      {
      }

      void MonolithicImplementationDescription::
      primaryArtifact (Type& o)
      {
        // VC6 anathema strikes again
        //
        ::CIAO::Config_Handlers::MonolithicImplementationDescription::primaryArtifact_iterator b (o.begin_primaryArtifact()), e (o.end_primaryArtifact());

        if (b != e)
        {
          primaryArtifact_pre (o);
          for (; b != e;)
          {
            dispatch (*(*b));
            if (++b != e) primaryArtifact_next (o);
          }

          primaryArtifact_post (o);
        }

        else primaryArtifact_none (o);
      }

      void MonolithicImplementationDescription::
      primaryArtifact (Type const& o)
      {
        // VC6 anathema strikes again
        //
        ::CIAO::Config_Handlers::MonolithicImplementationDescription::primaryArtifact_const_iterator b (o.begin_primaryArtifact()), e (o.end_primaryArtifact());

        if (b != e)
        {
          primaryArtifact_pre (o);
          for (; b != e;)
          {
            dispatch (*(*b));
            if (++b != e) primaryArtifact_next (o);
          }

          primaryArtifact_post (o);
        }

        else primaryArtifact_none (o);
      }

      void MonolithicImplementationDescription::
      primaryArtifact_pre (Type&)
      {
      }

      void MonolithicImplementationDescription::
      primaryArtifact_pre (Type const&)
      {
      }

      void MonolithicImplementationDescription::
      primaryArtifact_next (Type&)
      {
      }

      void MonolithicImplementationDescription::
      primaryArtifact_next (Type const&)
      {
      }

      void MonolithicImplementationDescription::
      primaryArtifact_post (Type&)
      {
      }

      void MonolithicImplementationDescription::
      primaryArtifact_post (Type const&)
      {
      }

      void MonolithicImplementationDescription::
      primaryArtifact_none (Type&)
      {
      }

      void MonolithicImplementationDescription::
      primaryArtifact_none (Type const&)
      {
      }

      void MonolithicImplementationDescription::
      post (Type&)
      {
      }

      void MonolithicImplementationDescription::
      post (Type const&)
      {
      }

      // ComponentImplementationDescription
      //
      //

      void ComponentImplementationDescription::
      traverse (Type& o)
      {
        pre (o);
        if (o.label_p ()) label (o);
        else label_none (o);
        if (o.UUID_p ()) UUID (o);
        else UUID_none (o);
        if (o.implements_p ()) implements (o);
        else implements_none (o);
        if (o.assemblyImpl_p ()) assemblyImpl (o);
        else assemblyImpl_none (o);
        if (o.monolithicImpl_p ()) monolithicImpl (o);
        else monolithicImpl_none (o);
        configProperty (o);
        capability (o);
        dependsOn (o);
        infoProperty (o);
        if (o.href_p ()) href (o);
        else href_none (o);
        post (o);
      }

      void ComponentImplementationDescription::
      traverse (Type const& o)
      {
        pre (o);
        if (o.label_p ()) label (o);
        else label_none (o);
        if (o.UUID_p ()) UUID (o);
        else UUID_none (o);
        if (o.implements_p ()) implements (o);
        else implements_none (o);
        if (o.assemblyImpl_p ()) assemblyImpl (o);
        else assemblyImpl_none (o);
        if (o.monolithicImpl_p ()) monolithicImpl (o);
        else monolithicImpl_none (o);
        configProperty (o);
        capability (o);
        dependsOn (o);
        infoProperty (o);
        if (o.href_p ()) href (o);
        else href_none (o);
        post (o);
      }

      void ComponentImplementationDescription::
      pre (Type&)
      {
      }

      void ComponentImplementationDescription::
      pre (Type const&)
      {
      }

      void ComponentImplementationDescription::
      label (Type& o)
      {
        dispatch (o.label ());
      }

      void ComponentImplementationDescription::
      label (Type const& o)
      {
        dispatch (o.label ());
      }

      void ComponentImplementationDescription::
      label_none (Type&)
      {
      }

      void ComponentImplementationDescription::
      label_none (Type const&)
      {
      }

      void ComponentImplementationDescription::
      UUID (Type& o)
      {
        dispatch (o.UUID ());
      }

      void ComponentImplementationDescription::
      UUID (Type const& o)
      {
        dispatch (o.UUID ());
      }

      void ComponentImplementationDescription::
      UUID_none (Type&)
      {
      }

      void ComponentImplementationDescription::
      UUID_none (Type const&)
      {
      }

      void ComponentImplementationDescription::
      implements (Type& o)
      {
        dispatch (o.implements ());
      }

      void ComponentImplementationDescription::
      implements (Type const& o)
      {
        dispatch (o.implements ());
      }

      void ComponentImplementationDescription::
      implements_none (Type&)
      {
      }

      void ComponentImplementationDescription::
      implements_none (Type const&)
      {
      }

      void ComponentImplementationDescription::
      assemblyImpl (Type& o)
      {
        dispatch (o.assemblyImpl ());
      }

      void ComponentImplementationDescription::
      assemblyImpl (Type const& o)
      {
        dispatch (o.assemblyImpl ());
      }

      void ComponentImplementationDescription::
      assemblyImpl_none (Type&)
      {
      }

      void ComponentImplementationDescription::
      assemblyImpl_none (Type const&)
      {
      }

      void ComponentImplementationDescription::
      monolithicImpl (Type& o)
      {
        dispatch (o.monolithicImpl ());
      }

      void ComponentImplementationDescription::
      monolithicImpl (Type const& o)
      {
        dispatch (o.monolithicImpl ());
      }

      void ComponentImplementationDescription::
      monolithicImpl_none (Type&)
      {
      }

      void ComponentImplementationDescription::
      monolithicImpl_none (Type const&)
      {
      }

      void ComponentImplementationDescription::
      configProperty (Type& o)
      {
        // VC6 anathema strikes again
        //
        ::CIAO::Config_Handlers::ComponentImplementationDescription::configProperty_iterator b (o.begin_configProperty()), e (o.end_configProperty());

        if (b != e)
        {
          configProperty_pre (o);
          for (; b != e;)
          {
            dispatch (*(*b));
            if (++b != e) configProperty_next (o);
          }

          configProperty_post (o);
        }

        else configProperty_none (o);
      }

      void ComponentImplementationDescription::
      configProperty (Type const& o)
      {
        // VC6 anathema strikes again
        //
        ::CIAO::Config_Handlers::ComponentImplementationDescription::configProperty_const_iterator b (o.begin_configProperty()), e (o.end_configProperty());

        if (b != e)
        {
          configProperty_pre (o);
          for (; b != e;)
          {
            dispatch (*(*b));
            if (++b != e) configProperty_next (o);
          }

          configProperty_post (o);
        }

        else configProperty_none (o);
      }

      void ComponentImplementationDescription::
      configProperty_pre (Type&)
      {
      }

      void ComponentImplementationDescription::
      configProperty_pre (Type const&)
      {
      }

      void ComponentImplementationDescription::
      configProperty_next (Type&)
      {
      }

      void ComponentImplementationDescription::
      configProperty_next (Type const&)
      {
      }

      void ComponentImplementationDescription::
      configProperty_post (Type&)
      {
      }

      void ComponentImplementationDescription::
      configProperty_post (Type const&)
      {
      }

      void ComponentImplementationDescription::
      configProperty_none (Type&)
      {
      }

      void ComponentImplementationDescription::
      configProperty_none (Type const&)
      {
      }

      void ComponentImplementationDescription::
      capability (Type& o)
      {
        // VC6 anathema strikes again
        //
        ::CIAO::Config_Handlers::ComponentImplementationDescription::capability_iterator b (o.begin_capability()), e (o.end_capability());

        if (b != e)
        {
          capability_pre (o);
          for (; b != e;)
          {
            dispatch (*(*b));
            if (++b != e) capability_next (o);
          }

          capability_post (o);
        }

        else capability_none (o);
      }

      void ComponentImplementationDescription::
      capability (Type const& o)
      {
        // VC6 anathema strikes again
        //
        ::CIAO::Config_Handlers::ComponentImplementationDescription::capability_const_iterator b (o.begin_capability()), e (o.end_capability());

        if (b != e)
        {
          capability_pre (o);
          for (; b != e;)
          {
            dispatch (*(*b));
            if (++b != e) capability_next (o);
          }

          capability_post (o);
        }

        else capability_none (o);
      }

      void ComponentImplementationDescription::
      capability_pre (Type&)
      {
      }

      void ComponentImplementationDescription::
      capability_pre (Type const&)
      {
      }

      void ComponentImplementationDescription::
      capability_next (Type&)
      {
      }

      void ComponentImplementationDescription::
      capability_next (Type const&)
      {
      }

      void ComponentImplementationDescription::
      capability_post (Type&)
      {
      }

      void ComponentImplementationDescription::
      capability_post (Type const&)
      {
      }

      void ComponentImplementationDescription::
      capability_none (Type&)
      {
      }

      void ComponentImplementationDescription::
      capability_none (Type const&)
      {
      }

      void ComponentImplementationDescription::
      dependsOn (Type& o)
      {
        // VC6 anathema strikes again
        //
        ::CIAO::Config_Handlers::ComponentImplementationDescription::dependsOn_iterator b (o.begin_dependsOn()), e (o.end_dependsOn());

        if (b != e)
        {
          dependsOn_pre (o);
          for (; b != e;)
          {
            dispatch (*(*b));
            if (++b != e) dependsOn_next (o);
          }

          dependsOn_post (o);
        }

        else dependsOn_none (o);
      }

      void ComponentImplementationDescription::
      dependsOn (Type const& o)
      {
        // VC6 anathema strikes again
        //
        ::CIAO::Config_Handlers::ComponentImplementationDescription::dependsOn_const_iterator b (o.begin_dependsOn()), e (o.end_dependsOn());

        if (b != e)
        {
          dependsOn_pre (o);
          for (; b != e;)
          {
            dispatch (*(*b));
            if (++b != e) dependsOn_next (o);
          }

          dependsOn_post (o);
        }

        else dependsOn_none (o);
      }

      void ComponentImplementationDescription::
      dependsOn_pre (Type&)
      {
      }

      void ComponentImplementationDescription::
      dependsOn_pre (Type const&)
      {
      }

      void ComponentImplementationDescription::
      dependsOn_next (Type&)
      {
      }

      void ComponentImplementationDescription::
      dependsOn_next (Type const&)
      {
      }

      void ComponentImplementationDescription::
      dependsOn_post (Type&)
      {
      }

      void ComponentImplementationDescription::
      dependsOn_post (Type const&)
      {
      }

      void ComponentImplementationDescription::
      dependsOn_none (Type&)
      {
      }

      void ComponentImplementationDescription::
      dependsOn_none (Type const&)
      {
      }

      void ComponentImplementationDescription::
      infoProperty (Type& o)
      {
        // VC6 anathema strikes again
        //
        ::CIAO::Config_Handlers::ComponentImplementationDescription::infoProperty_iterator b (o.begin_infoProperty()), e (o.end_infoProperty());

        if (b != e)
        {
          infoProperty_pre (o);
          for (; b != e;)
          {
            dispatch (*(*b));
            if (++b != e) infoProperty_next (o);
          }

          infoProperty_post (o);
        }

        else infoProperty_none (o);
      }

      void ComponentImplementationDescription::
      infoProperty (Type const& o)
      {
        // VC6 anathema strikes again
        //
        ::CIAO::Config_Handlers::ComponentImplementationDescription::infoProperty_const_iterator b (o.begin_infoProperty()), e (o.end_infoProperty());

        if (b != e)
        {
          infoProperty_pre (o);
          for (; b != e;)
          {
            dispatch (*(*b));
            if (++b != e) infoProperty_next (o);
          }

          infoProperty_post (o);
        }

        else infoProperty_none (o);
      }

      void ComponentImplementationDescription::
      infoProperty_pre (Type&)
      {
      }

      void ComponentImplementationDescription::
      infoProperty_pre (Type const&)
      {
      }

      void ComponentImplementationDescription::
      infoProperty_next (Type&)
      {
      }

      void ComponentImplementationDescription::
      infoProperty_next (Type const&)
      {
      }

      void ComponentImplementationDescription::
      infoProperty_post (Type&)
      {
      }

      void ComponentImplementationDescription::
      infoProperty_post (Type const&)
      {
      }

      void ComponentImplementationDescription::
      infoProperty_none (Type&)
      {
      }

      void ComponentImplementationDescription::
      infoProperty_none (Type const&)
      {
      }

      void ComponentImplementationDescription::
      href (Type& o)
      {
        dispatch (o.href ());
      }

      void ComponentImplementationDescription::
      href (Type const& o)
      {
        dispatch (o.href ());
      }

      void ComponentImplementationDescription::
      href_none (Type&)
      {
      }

      void ComponentImplementationDescription::
      href_none (Type const&)
      {
      }

      void ComponentImplementationDescription::
      post (Type&)
      {
      }

      void ComponentImplementationDescription::
      post (Type const&)
      {
      }

      // ConnectorImplementationDescription
      //
      //

      void ConnectorImplementationDescription::
      traverse (Type& o)
      {
        pre (o);
        if (o.label_p ()) label (o);
        else label_none (o);
        if (o.UUID_p ()) UUID (o);
        else UUID_none (o);
        if (o.implements_p ()) implements (o);
        else implements_none (o);
        if (o.assemblyImpl_p ()) assemblyImpl (o);
        else assemblyImpl_none (o);
        if (o.monolithicImpl_p ()) monolithicImpl (o);
        else monolithicImpl_none (o);
        configProperty (o);
        capability (o);
        dependsOn (o);
        infoProperty (o);
        if (o.href_p ()) href (o);
        else href_none (o);
        post (o);
      }

      void ConnectorImplementationDescription::
      traverse (Type const& o)
      {
        pre (o);
        if (o.label_p ()) label (o);
        else label_none (o);
        if (o.UUID_p ()) UUID (o);
        else UUID_none (o);
        if (o.implements_p ()) implements (o);
        else implements_none (o);
        if (o.assemblyImpl_p ()) assemblyImpl (o);
        else assemblyImpl_none (o);
        if (o.monolithicImpl_p ()) monolithicImpl (o);
        else monolithicImpl_none (o);
        configProperty (o);
        capability (o);
        dependsOn (o);
        infoProperty (o);
        if (o.href_p ()) href (o);
        else href_none (o);
        post (o);
      }

      void ConnectorImplementationDescription::
      pre (Type&)
      {
      }

      void ConnectorImplementationDescription::
      pre (Type const&)
      {
      }

      void ConnectorImplementationDescription::
      label (Type& o)
      {
        dispatch (o.label ());
      }

      void ConnectorImplementationDescription::
      label (Type const& o)
      {
        dispatch (o.label ());
      }

      void ConnectorImplementationDescription::
      label_none (Type&)
      {
      }

      void ConnectorImplementationDescription::
      label_none (Type const&)
      {
      }

      void ConnectorImplementationDescription::
      UUID (Type& o)
      {
        dispatch (o.UUID ());
      }

      void ConnectorImplementationDescription::
      UUID (Type const& o)
      {
        dispatch (o.UUID ());
      }

      void ConnectorImplementationDescription::
      UUID_none (Type&)
      {
      }

      void ConnectorImplementationDescription::
      UUID_none (Type const&)
      {
      }

      void ConnectorImplementationDescription::
      implements (Type& o)
      {
        dispatch (o.implements ());
      }

      void ConnectorImplementationDescription::
      implements (Type const& o)
      {
        dispatch (o.implements ());
      }

      void ConnectorImplementationDescription::
      implements_none (Type&)
      {
      }

      void ConnectorImplementationDescription::
      implements_none (Type const&)
      {
      }

      void ConnectorImplementationDescription::
      assemblyImpl (Type& o)
      {
        dispatch (o.assemblyImpl ());
      }

      void ConnectorImplementationDescription::
      assemblyImpl (Type const& o)
      {
        dispatch (o.assemblyImpl ());
      }

      void ConnectorImplementationDescription::
      assemblyImpl_none (Type&)
      {
      }

      void ConnectorImplementationDescription::
      assemblyImpl_none (Type const&)
      {
      }

      void ConnectorImplementationDescription::
      monolithicImpl (Type& o)
      {
        dispatch (o.monolithicImpl ());
      }

      void ConnectorImplementationDescription::
      monolithicImpl (Type const& o)
      {
        dispatch (o.monolithicImpl ());
      }

      void ConnectorImplementationDescription::
      monolithicImpl_none (Type&)
      {
      }

      void ConnectorImplementationDescription::
      monolithicImpl_none (Type const&)
      {
      }

      void ConnectorImplementationDescription::
      configProperty (Type& o)
      {
        // VC6 anathema strikes again
        //
        ::CIAO::Config_Handlers::ConnectorImplementationDescription::configProperty_iterator b (o.begin_configProperty()), e (o.end_configProperty());

        if (b != e)
        {
          configProperty_pre (o);
          for (; b != e;)
          {
            dispatch (*(*b));
            if (++b != e) configProperty_next (o);
          }

          configProperty_post (o);
        }

        else configProperty_none (o);
      }

      void ConnectorImplementationDescription::
      configProperty (Type const& o)
      {
        // VC6 anathema strikes again
        //
        ::CIAO::Config_Handlers::ConnectorImplementationDescription::configProperty_const_iterator b (o.begin_configProperty()), e (o.end_configProperty());

        if (b != e)
        {
          configProperty_pre (o);
          for (; b != e;)
          {
            dispatch (*(*b));
            if (++b != e) configProperty_next (o);
          }

          configProperty_post (o);
        }

        else configProperty_none (o);
      }

      void ConnectorImplementationDescription::
      configProperty_pre (Type&)
      {
      }

      void ConnectorImplementationDescription::
      configProperty_pre (Type const&)
      {
      }

      void ConnectorImplementationDescription::
      configProperty_next (Type&)
      {
      }

      void ConnectorImplementationDescription::
      configProperty_next (Type const&)
      {
      }

      void ConnectorImplementationDescription::
      configProperty_post (Type&)
      {
      }

      void ConnectorImplementationDescription::
      configProperty_post (Type const&)
      {
      }

      void ConnectorImplementationDescription::
      configProperty_none (Type&)
      {
      }

      void ConnectorImplementationDescription::
      configProperty_none (Type const&)
      {
      }

      void ConnectorImplementationDescription::
      capability (Type& o)
      {
        // VC6 anathema strikes again
        //
        ::CIAO::Config_Handlers::ConnectorImplementationDescription::capability_iterator b (o.begin_capability()), e (o.end_capability());

        if (b != e)
        {
          capability_pre (o);
          for (; b != e;)
          {
            dispatch (*(*b));
            if (++b != e) capability_next (o);
          }

          capability_post (o);
        }

        else capability_none (o);
      }

      void ConnectorImplementationDescription::
      capability (Type const& o)
      {
        // VC6 anathema strikes again
        //
        ::CIAO::Config_Handlers::ConnectorImplementationDescription::capability_const_iterator b (o.begin_capability()), e (o.end_capability());

        if (b != e)
        {
          capability_pre (o);
          for (; b != e;)
          {
            dispatch (*(*b));
            if (++b != e) capability_next (o);
          }

          capability_post (o);
        }

        else capability_none (o);
      }

      void ConnectorImplementationDescription::
      capability_pre (Type&)
      {
      }

      void ConnectorImplementationDescription::
      capability_pre (Type const&)
      {
      }

      void ConnectorImplementationDescription::
      capability_next (Type&)
      {
      }

      void ConnectorImplementationDescription::
      capability_next (Type const&)
      {
      }

      void ConnectorImplementationDescription::
      capability_post (Type&)
      {
      }

      void ConnectorImplementationDescription::
      capability_post (Type const&)
      {
      }

      void ConnectorImplementationDescription::
      capability_none (Type&)
      {
      }

      void ConnectorImplementationDescription::
      capability_none (Type const&)
      {
      }

      void ConnectorImplementationDescription::
      dependsOn (Type& o)
      {
        // VC6 anathema strikes again
        //
        ::CIAO::Config_Handlers::ConnectorImplementationDescription::dependsOn_iterator b (o.begin_dependsOn()), e (o.end_dependsOn());

        if (b != e)
        {
          dependsOn_pre (o);
          for (; b != e;)
          {
            dispatch (*(*b));
            if (++b != e) dependsOn_next (o);
          }

          dependsOn_post (o);
        }

        else dependsOn_none (o);
      }

      void ConnectorImplementationDescription::
      dependsOn (Type const& o)
      {
        // VC6 anathema strikes again
        //
        ::CIAO::Config_Handlers::ConnectorImplementationDescription::dependsOn_const_iterator b (o.begin_dependsOn()), e (o.end_dependsOn());

        if (b != e)
        {
          dependsOn_pre (o);
          for (; b != e;)
          {
            dispatch (*(*b));
            if (++b != e) dependsOn_next (o);
          }

          dependsOn_post (o);
        }

        else dependsOn_none (o);
      }

      void ConnectorImplementationDescription::
      dependsOn_pre (Type&)
      {
      }

      void ConnectorImplementationDescription::
      dependsOn_pre (Type const&)
      {
      }

      void ConnectorImplementationDescription::
      dependsOn_next (Type&)
      {
      }

      void ConnectorImplementationDescription::
      dependsOn_next (Type const&)
      {
      }

      void ConnectorImplementationDescription::
      dependsOn_post (Type&)
      {
      }

      void ConnectorImplementationDescription::
      dependsOn_post (Type const&)
      {
      }

      void ConnectorImplementationDescription::
      dependsOn_none (Type&)
      {
      }

      void ConnectorImplementationDescription::
      dependsOn_none (Type const&)
      {
      }

      void ConnectorImplementationDescription::
      infoProperty (Type& o)
      {
        // VC6 anathema strikes again
        //
        ::CIAO::Config_Handlers::ConnectorImplementationDescription::infoProperty_iterator b (o.begin_infoProperty()), e (o.end_infoProperty());

        if (b != e)
        {
          infoProperty_pre (o);
          for (; b != e;)
          {
            dispatch (*(*b));
            if (++b != e) infoProperty_next (o);
          }

          infoProperty_post (o);
        }

        else infoProperty_none (o);
      }

      void ConnectorImplementationDescription::
      infoProperty (Type const& o)
      {
        // VC6 anathema strikes again
        //
        ::CIAO::Config_Handlers::ConnectorImplementationDescription::infoProperty_const_iterator b (o.begin_infoProperty()), e (o.end_infoProperty());

        if (b != e)
        {
          infoProperty_pre (o);
          for (; b != e;)
          {
            dispatch (*(*b));
            if (++b != e) infoProperty_next (o);
          }

          infoProperty_post (o);
        }

        else infoProperty_none (o);
      }

      void ConnectorImplementationDescription::
      infoProperty_pre (Type&)
      {
      }

      void ConnectorImplementationDescription::
      infoProperty_pre (Type const&)
      {
      }

      void ConnectorImplementationDescription::
      infoProperty_next (Type&)
      {
      }

      void ConnectorImplementationDescription::
      infoProperty_next (Type const&)
      {
      }

      void ConnectorImplementationDescription::
      infoProperty_post (Type&)
      {
      }

      void ConnectorImplementationDescription::
      infoProperty_post (Type const&)
      {
      }

      void ConnectorImplementationDescription::
      infoProperty_none (Type&)
      {
      }

      void ConnectorImplementationDescription::
      infoProperty_none (Type const&)
      {
      }

      void ConnectorImplementationDescription::
      href (Type& o)
      {
        dispatch (o.href ());
      }

      void ConnectorImplementationDescription::
      href (Type const& o)
      {
        dispatch (o.href ());
      }

      void ConnectorImplementationDescription::
      href_none (Type&)
      {
      }

      void ConnectorImplementationDescription::
      href_none (Type const&)
      {
      }

      void ConnectorImplementationDescription::
      post (Type&)
      {
      }

      void ConnectorImplementationDescription::
      post (Type const&)
      {
      }
    }
  }
}

namespace CIAO
{
  namespace Config_Handlers
  {
    namespace Writer
    {
      // ComponentPackageReference
      //
      //

      ComponentPackageReference::
      ComponentPackageReference (::XSCRT::XML::Element< ACE_TCHAR >& e)
      : ::XSCRT::Writer< ACE_TCHAR > (e)
      {
      }

      ComponentPackageReference::
      ComponentPackageReference ()
      {
      }

      void ComponentPackageReference::
      traverse (Type const& o)
      {
        Traversal::ComponentPackageReference::traverse (o);
      }

      void ComponentPackageReference::
      requiredUUID (Type const& o)
      {
        push_ (::XSCRT::XML::Element< ACE_TCHAR > (ACE_TEXT ("requiredUUID"), top_ ()));
        Traversal::ComponentPackageReference::requiredUUID (o);
        pop_ ();
      }

      void ComponentPackageReference::
      requiredName (Type const& o)
      {
        push_ (::XSCRT::XML::Element< ACE_TCHAR > (ACE_TEXT ("requiredName"), top_ ()));
        Traversal::ComponentPackageReference::requiredName (o);
        pop_ ();
      }

      void ComponentPackageReference::
      requiredType (Type const& o)
      {
        push_ (::XSCRT::XML::Element< ACE_TCHAR > (ACE_TEXT ("requiredType"), top_ ()));
        Traversal::ComponentPackageReference::requiredType (o);
        pop_ ();
      }

      // SubcomponentInstantiationDescription
      //
      //

      SubcomponentInstantiationDescription::
      SubcomponentInstantiationDescription (::XSCRT::XML::Element< ACE_TCHAR >& e)
      : ::XSCRT::Writer< ACE_TCHAR > (e)
      {
      }

      SubcomponentInstantiationDescription::
      SubcomponentInstantiationDescription ()
      {
      }

      void SubcomponentInstantiationDescription::
      traverse (Type const& o)
      {
        Traversal::SubcomponentInstantiationDescription::traverse (o);
      }

      void SubcomponentInstantiationDescription::
      name (Type const& o)
      {
        push_ (::XSCRT::XML::Element< ACE_TCHAR > (ACE_TEXT ("name"), top_ ()));
        Traversal::SubcomponentInstantiationDescription::name (o);
        pop_ ();
      }

      void SubcomponentInstantiationDescription::
      basePackage (Type const& o)
      {
        push_ (::XSCRT::XML::Element< ACE_TCHAR > (ACE_TEXT ("basePackage"), top_ ()));
        Traversal::SubcomponentInstantiationDescription::basePackage (o);
        pop_ ();
      }

      void SubcomponentInstantiationDescription::
      specializedConfig (Type const& o)
      {
        push_ (::XSCRT::XML::Element< ACE_TCHAR > (ACE_TEXT ("specializedConfig"), top_ ()));
        Traversal::SubcomponentInstantiationDescription::specializedConfig (o);
        pop_ ();
      }

      void SubcomponentInstantiationDescription::
      selectRequirement_pre (Type const&)
      {
        push_ (::XSCRT::XML::Element< ACE_TCHAR > (ACE_TEXT ("selectRequirement"), top_ ()));
      }

      void SubcomponentInstantiationDescription::
      selectRequirement_next (Type const& o)
      {
        selectRequirement_post (o);
        selectRequirement_pre (o);
      }

      void SubcomponentInstantiationDescription::
      selectRequirement_post (Type const&)
      {
        pop_ ();
      }

      void SubcomponentInstantiationDescription::
      configProperty_pre (Type const&)
      {
        push_ (::XSCRT::XML::Element< ACE_TCHAR > (ACE_TEXT ("configProperty"), top_ ()));
      }

      void SubcomponentInstantiationDescription::
      configProperty_next (Type const& o)
      {
        configProperty_post (o);
        configProperty_pre (o);
      }

      void SubcomponentInstantiationDescription::
      configProperty_post (Type const&)
      {
        pop_ ();
      }

      void SubcomponentInstantiationDescription::
      referencedPackage (Type const& o)
      {
        push_ (::XSCRT::XML::Element< ACE_TCHAR > (ACE_TEXT ("referencedPackage"), top_ ()));
        Traversal::SubcomponentInstantiationDescription::referencedPackage (o);
        pop_ ();
      }

      void SubcomponentInstantiationDescription::
      importedPackage (Type const& o)
      {
        push_ (::XSCRT::XML::Element< ACE_TCHAR > (ACE_TEXT ("importedPackage"), top_ ()));
        Traversal::SubcomponentInstantiationDescription::importedPackage (o);
        pop_ ();
      }

      void SubcomponentInstantiationDescription::
      id (Type const& o)
      {
        ::XSCRT::XML::Attribute< ACE_TCHAR > a (ACE_TEXT ("id"), ACE_TEXT (""), top_ ());
        attr_ (&a);
        Traversal::SubcomponentInstantiationDescription::id (o);
        attr_ (0);
      }

      // SubcomponentPropertyReference
      //
      //

      SubcomponentPropertyReference::
      SubcomponentPropertyReference (::XSCRT::XML::Element< ACE_TCHAR >& e)
      : ::XSCRT::Writer< ACE_TCHAR > (e)
      {
      }

      SubcomponentPropertyReference::
      SubcomponentPropertyReference ()
      {
      }

      void SubcomponentPropertyReference::
      traverse (Type const& o)
      {
        Traversal::SubcomponentPropertyReference::traverse (o);
      }

      void SubcomponentPropertyReference::
      propertyName (Type const& o)
      {
        push_ (::XSCRT::XML::Element< ACE_TCHAR > (ACE_TEXT ("propertyName"), top_ ()));
        Traversal::SubcomponentPropertyReference::propertyName (o);
        pop_ ();
      }

      void SubcomponentPropertyReference::
      instance (Type const& o)
      {
        push_ (::XSCRT::XML::Element< ACE_TCHAR > (ACE_TEXT ("instance"), top_ ()));
        Traversal::SubcomponentPropertyReference::instance (o);
        pop_ ();
      }

      // AssemblyPropertyMapping
      //
      //

      AssemblyPropertyMapping::
      AssemblyPropertyMapping (::XSCRT::XML::Element< ACE_TCHAR >& e)
      : ::XSCRT::Writer< ACE_TCHAR > (e)
      {
      }

      AssemblyPropertyMapping::
      AssemblyPropertyMapping ()
      {
      }

      void AssemblyPropertyMapping::
      traverse (Type const& o)
      {
        Traversal::AssemblyPropertyMapping::traverse (o);
      }

      void AssemblyPropertyMapping::
      name (Type const& o)
      {
        push_ (::XSCRT::XML::Element< ACE_TCHAR > (ACE_TEXT ("name"), top_ ()));
        Traversal::AssemblyPropertyMapping::name (o);
        pop_ ();
      }

      void AssemblyPropertyMapping::
      externalName (Type const& o)
      {
        push_ (::XSCRT::XML::Element< ACE_TCHAR > (ACE_TEXT ("externalName"), top_ ()));
        Traversal::AssemblyPropertyMapping::externalName (o);
        pop_ ();
      }

      void AssemblyPropertyMapping::
      delegatesTo_pre (Type const&)
      {
        push_ (::XSCRT::XML::Element< ACE_TCHAR > (ACE_TEXT ("delegatesTo"), top_ ()));
      }

      void AssemblyPropertyMapping::
      delegatesTo_next (Type const& o)
      {
        delegatesTo_post (o);
        delegatesTo_pre (o);
      }

      void AssemblyPropertyMapping::
      delegatesTo_post (Type const&)
      {
        pop_ ();
      }

      // LocalityKind
      //
      //

      LocalityKind::
      LocalityKind (::XSCRT::XML::Element< ACE_TCHAR >& e)
      : ::XSCRT::Writer< ACE_TCHAR > (e)
      {
      }

      LocalityKind::
      LocalityKind ()
      {
      }

      void LocalityKind::
      traverse (Type const& o)
      {
        ::std::basic_string< ACE_TCHAR > s;

        if (o == ::CIAO::Config_Handlers::LocalityKind::SameNodeAnyProcess) s = ACE_TEXT ("SameNodeAnyProcess");
        else if (o == ::CIAO::Config_Handlers::LocalityKind::SameNodeSameProcess) s = ACE_TEXT ("SameNodeSameProcess");
        else if (o == ::CIAO::Config_Handlers::LocalityKind::SameNodeDifferentProcess) s = ACE_TEXT ("SameNodeDifferentProcess");
        else if (o == ::CIAO::Config_Handlers::LocalityKind::DifferentNode) s = ACE_TEXT ("DifferentNode");
        else if (o == ::CIAO::Config_Handlers::LocalityKind::DifferentProcess) s = ACE_TEXT ("DifferentProcess");
        else if (o == ::CIAO::Config_Handlers::LocalityKind::NoConstraint) s = ACE_TEXT ("NoConstraint");
        else 
        {
        }

        if (::XSCRT::XML::Attribute< ACE_TCHAR >* a = attr_ ())
        {
          a->value (s);
        }

        else
        {
          top_().value (s);
        }
      }

      // Locality
      //
      //

      Locality::
      Locality (::XSCRT::XML::Element< ACE_TCHAR >& e)
      : ::XSCRT::Writer< ACE_TCHAR > (e)
      {
      }

      Locality::
      Locality ()
      {
      }

      void Locality::
      traverse (Type const& o)
      {
        Traversal::Locality::traverse (o);
      }

      void Locality::
      constraint (Type const& o)
      {
        push_ (::XSCRT::XML::Element< ACE_TCHAR > (ACE_TEXT ("constraint"), top_ ()));
        Traversal::Locality::constraint (o);
        pop_ ();
      }

      void Locality::
      constrainedInstance (Type const& o)
      {
        push_ (::XSCRT::XML::Element< ACE_TCHAR > (ACE_TEXT ("constrainedInstance"), top_ ()));
        Traversal::Locality::constrainedInstance (o);
        pop_ ();
      }

      // ComponentAssemblyDescription
      //
      //

      ComponentAssemblyDescription::
      ComponentAssemblyDescription (::XSCRT::XML::Element< ACE_TCHAR >& e)
      : ::XSCRT::Writer< ACE_TCHAR > (e)
      {
      }

      ComponentAssemblyDescription::
      ComponentAssemblyDescription ()
      {
      }

      void ComponentAssemblyDescription::
      traverse (Type const& o)
      {
        Traversal::ComponentAssemblyDescription::traverse (o);
      }

      void ComponentAssemblyDescription::
      instance_pre (Type const&)
      {
        push_ (::XSCRT::XML::Element< ACE_TCHAR > (ACE_TEXT ("instance"), top_ ()));
      }

      void ComponentAssemblyDescription::
      instance_next (Type const& o)
      {
        instance_post (o);
        instance_pre (o);
      }

      void ComponentAssemblyDescription::
      instance_post (Type const&)
      {
        pop_ ();
      }

      void ComponentAssemblyDescription::
      connection_pre (Type const&)
      {
        push_ (::XSCRT::XML::Element< ACE_TCHAR > (ACE_TEXT ("connection"), top_ ()));
      }

      void ComponentAssemblyDescription::
      connection_next (Type const& o)
      {
        connection_post (o);
        connection_pre (o);
      }

      void ComponentAssemblyDescription::
      connection_post (Type const&)
      {
        pop_ ();
      }

      void ComponentAssemblyDescription::
      externalProperty_pre (Type const&)
      {
        push_ (::XSCRT::XML::Element< ACE_TCHAR > (ACE_TEXT ("externalProperty"), top_ ()));
      }

      void ComponentAssemblyDescription::
      externalProperty_next (Type const& o)
      {
        externalProperty_post (o);
        externalProperty_pre (o);
      }

      void ComponentAssemblyDescription::
      externalProperty_post (Type const&)
      {
        pop_ ();
      }

      void ComponentAssemblyDescription::
      locality_pre (Type const&)
      {
        push_ (::XSCRT::XML::Element< ACE_TCHAR > (ACE_TEXT ("locality"), top_ ()));
      }

      void ComponentAssemblyDescription::
      locality_next (Type const& o)
      {
        locality_post (o);
        locality_pre (o);
      }

      void ComponentAssemblyDescription::
      locality_post (Type const&)
      {
        pop_ ();
      }

      // MonolithicImplementationDescription
      //
      //

      MonolithicImplementationDescription::
      MonolithicImplementationDescription (::XSCRT::XML::Element< ACE_TCHAR >& e)
      : ::XSCRT::Writer< ACE_TCHAR > (e)
      {
      }

      MonolithicImplementationDescription::
      MonolithicImplementationDescription ()
      {
      }

      void MonolithicImplementationDescription::
      traverse (Type const& o)
      {
        Traversal::MonolithicImplementationDescription::traverse (o);
      }

      void MonolithicImplementationDescription::
      nodeExecParameter_pre (Type const&)
      {
        push_ (::XSCRT::XML::Element< ACE_TCHAR > (ACE_TEXT ("nodeExecParameter"), top_ ()));
      }

      void MonolithicImplementationDescription::
      nodeExecParameter_next (Type const& o)
      {
        nodeExecParameter_post (o);
        nodeExecParameter_pre (o);
      }

      void MonolithicImplementationDescription::
      nodeExecParameter_post (Type const&)
      {
        pop_ ();
      }

      void MonolithicImplementationDescription::
      componentExecParameter_pre (Type const&)
      {
        push_ (::XSCRT::XML::Element< ACE_TCHAR > (ACE_TEXT ("componentExecParameter"), top_ ()));
      }

      void MonolithicImplementationDescription::
      componentExecParameter_next (Type const& o)
      {
        componentExecParameter_post (o);
        componentExecParameter_pre (o);
      }

      void MonolithicImplementationDescription::
      componentExecParameter_post (Type const&)
      {
        pop_ ();
      }

      void MonolithicImplementationDescription::
      deployRequirement_pre (Type const&)
      {
        push_ (::XSCRT::XML::Element< ACE_TCHAR > (ACE_TEXT ("deployRequirement"), top_ ()));
      }

      void MonolithicImplementationDescription::
      deployRequirement_next (Type const& o)
      {
        deployRequirement_post (o);
        deployRequirement_pre (o);
      }

      void MonolithicImplementationDescription::
      deployRequirement_post (Type const&)
      {
        pop_ ();
      }

      void MonolithicImplementationDescription::
      primaryArtifact_pre (Type const&)
      {
        push_ (::XSCRT::XML::Element< ACE_TCHAR > (ACE_TEXT ("primaryArtifact"), top_ ()));
      }

      void MonolithicImplementationDescription::
      primaryArtifact_next (Type const& o)
      {
        primaryArtifact_post (o);
        primaryArtifact_pre (o);
      }

      void MonolithicImplementationDescription::
      primaryArtifact_post (Type const&)
      {
        pop_ ();
      }

      // ComponentImplementationDescription
      //
      //

      ComponentImplementationDescription::
      ComponentImplementationDescription (::XSCRT::XML::Element< ACE_TCHAR >& e)
      : ::XSCRT::Writer< ACE_TCHAR > (e)
      {
      }

      ComponentImplementationDescription::
      ComponentImplementationDescription ()
      {
      }

      void ComponentImplementationDescription::
      traverse (Type const& o)
      {
        Traversal::ComponentImplementationDescription::traverse (o);
      }

      void ComponentImplementationDescription::
      label (Type const& o)
      {
        push_ (::XSCRT::XML::Element< ACE_TCHAR > (ACE_TEXT ("label"), top_ ()));
        Traversal::ComponentImplementationDescription::label (o);
        pop_ ();
      }

      void ComponentImplementationDescription::
      UUID (Type const& o)
      {
        push_ (::XSCRT::XML::Element< ACE_TCHAR > (ACE_TEXT ("UUID"), top_ ()));
        Traversal::ComponentImplementationDescription::UUID (o);
        pop_ ();
      }

      void ComponentImplementationDescription::
      implements (Type const& o)
      {
        push_ (::XSCRT::XML::Element< ACE_TCHAR > (ACE_TEXT ("implements"), top_ ()));
        Traversal::ComponentImplementationDescription::implements (o);
        pop_ ();
      }

      void ComponentImplementationDescription::
      assemblyImpl (Type const& o)
      {
        push_ (::XSCRT::XML::Element< ACE_TCHAR > (ACE_TEXT ("assemblyImpl"), top_ ()));
        Traversal::ComponentImplementationDescription::assemblyImpl (o);
        pop_ ();
      }

      void ComponentImplementationDescription::
      monolithicImpl (Type const& o)
      {
        push_ (::XSCRT::XML::Element< ACE_TCHAR > (ACE_TEXT ("monolithicImpl"), top_ ()));
        Traversal::ComponentImplementationDescription::monolithicImpl (o);
        pop_ ();
      }

      void ComponentImplementationDescription::
      configProperty_pre (Type const&)
      {
        push_ (::XSCRT::XML::Element< ACE_TCHAR > (ACE_TEXT ("configProperty"), top_ ()));
      }

      void ComponentImplementationDescription::
      configProperty_next (Type const& o)
      {
        configProperty_post (o);
        configProperty_pre (o);
      }

      void ComponentImplementationDescription::
      configProperty_post (Type const&)
      {
        pop_ ();
      }

      void ComponentImplementationDescription::
      capability_pre (Type const&)
      {
        push_ (::XSCRT::XML::Element< ACE_TCHAR > (ACE_TEXT ("capability"), top_ ()));
      }

      void ComponentImplementationDescription::
      capability_next (Type const& o)
      {
        capability_post (o);
        capability_pre (o);
      }

      void ComponentImplementationDescription::
      capability_post (Type const&)
      {
        pop_ ();
      }

      void ComponentImplementationDescription::
      dependsOn_pre (Type const&)
      {
        push_ (::XSCRT::XML::Element< ACE_TCHAR > (ACE_TEXT ("dependsOn"), top_ ()));
      }

      void ComponentImplementationDescription::
      dependsOn_next (Type const& o)
      {
        dependsOn_post (o);
        dependsOn_pre (o);
      }

      void ComponentImplementationDescription::
      dependsOn_post (Type const&)
      {
        pop_ ();
      }

      void ComponentImplementationDescription::
      infoProperty_pre (Type const&)
      {
        push_ (::XSCRT::XML::Element< ACE_TCHAR > (ACE_TEXT ("infoProperty"), top_ ()));
      }

      void ComponentImplementationDescription::
      infoProperty_next (Type const& o)
      {
        infoProperty_post (o);
        infoProperty_pre (o);
      }

      void ComponentImplementationDescription::
      infoProperty_post (Type const&)
      {
        pop_ ();
      }

      void ComponentImplementationDescription::
      href (Type const& o)
      {
        ::XSCRT::XML::Attribute< ACE_TCHAR > a (ACE_TEXT ("href"), ACE_TEXT (""), top_ ());
        attr_ (&a);
        Traversal::ComponentImplementationDescription::href (o);
        attr_ (0);
      }

      // ConnectorImplementationDescription
      //
      //

      ConnectorImplementationDescription::
      ConnectorImplementationDescription (::XSCRT::XML::Element< ACE_TCHAR >& e)
      : ::XSCRT::Writer< ACE_TCHAR > (e)
      {
      }

      ConnectorImplementationDescription::
      ConnectorImplementationDescription ()
      {
      }

      void ConnectorImplementationDescription::
      traverse (Type const& o)
      {
        Traversal::ConnectorImplementationDescription::traverse (o);
      }

      void ConnectorImplementationDescription::
      label (Type const& o)
      {
        push_ (::XSCRT::XML::Element< ACE_TCHAR > (ACE_TEXT ("label"), top_ ()));
        Traversal::ConnectorImplementationDescription::label (o);
        pop_ ();
      }

      void ConnectorImplementationDescription::
      UUID (Type const& o)
      {
        push_ (::XSCRT::XML::Element< ACE_TCHAR > (ACE_TEXT ("UUID"), top_ ()));
        Traversal::ConnectorImplementationDescription::UUID (o);
        pop_ ();
      }

      void ConnectorImplementationDescription::
      implements (Type const& o)
      {
        push_ (::XSCRT::XML::Element< ACE_TCHAR > (ACE_TEXT ("implements"), top_ ()));
        Traversal::ConnectorImplementationDescription::implements (o);
        pop_ ();
      }

      void ConnectorImplementationDescription::
      assemblyImpl (Type const& o)
      {
        push_ (::XSCRT::XML::Element< ACE_TCHAR > (ACE_TEXT ("assemblyImpl"), top_ ()));
        Traversal::ConnectorImplementationDescription::assemblyImpl (o);
        pop_ ();
      }

      void ConnectorImplementationDescription::
      monolithicImpl (Type const& o)
      {
        push_ (::XSCRT::XML::Element< ACE_TCHAR > (ACE_TEXT ("monolithicImpl"), top_ ()));
        Traversal::ConnectorImplementationDescription::monolithicImpl (o);
        pop_ ();
      }

      void ConnectorImplementationDescription::
      configProperty_pre (Type const&)
      {
        push_ (::XSCRT::XML::Element< ACE_TCHAR > (ACE_TEXT ("configProperty"), top_ ()));
      }

      void ConnectorImplementationDescription::
      configProperty_next (Type const& o)
      {
        configProperty_post (o);
        configProperty_pre (o);
      }

      void ConnectorImplementationDescription::
      configProperty_post (Type const&)
      {
        pop_ ();
      }

      void ConnectorImplementationDescription::
      capability_pre (Type const&)
      {
        push_ (::XSCRT::XML::Element< ACE_TCHAR > (ACE_TEXT ("capability"), top_ ()));
      }

      void ConnectorImplementationDescription::
      capability_next (Type const& o)
      {
        capability_post (o);
        capability_pre (o);
      }

      void ConnectorImplementationDescription::
      capability_post (Type const&)
      {
        pop_ ();
      }

      void ConnectorImplementationDescription::
      dependsOn_pre (Type const&)
      {
        push_ (::XSCRT::XML::Element< ACE_TCHAR > (ACE_TEXT ("dependsOn"), top_ ()));
      }

      void ConnectorImplementationDescription::
      dependsOn_next (Type const& o)
      {
        dependsOn_post (o);
        dependsOn_pre (o);
      }

      void ConnectorImplementationDescription::
      dependsOn_post (Type const&)
      {
        pop_ ();
      }

      void ConnectorImplementationDescription::
      infoProperty_pre (Type const&)
      {
        push_ (::XSCRT::XML::Element< ACE_TCHAR > (ACE_TEXT ("infoProperty"), top_ ()));
      }

      void ConnectorImplementationDescription::
      infoProperty_next (Type const& o)
      {
        infoProperty_post (o);
        infoProperty_pre (o);
      }

      void ConnectorImplementationDescription::
      infoProperty_post (Type const&)
      {
        pop_ ();
      }

      void ConnectorImplementationDescription::
      href (Type const& o)
      {
        ::XSCRT::XML::Attribute< ACE_TCHAR > a (ACE_TEXT ("href"), ACE_TEXT (""), top_ ());
        attr_ (&a);
        Traversal::ConnectorImplementationDescription::href (o);
        attr_ (0);
      }
    }
  }
}

namespace CIAO
{
  namespace Config_Handlers
  {
  }
}

