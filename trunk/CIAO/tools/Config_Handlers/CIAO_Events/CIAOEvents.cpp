/* $Id$
 * This code was generated by the XML Schema Compiler.
 *
 * Changes made to this code will most likely be overwritten
 * when the handlers are recompiled.
 *
 * If you find errors or feel that there are bugfixes to be made,
 * please contact the current XSC maintainer:
 *             Will Otte <wotte@dre.vanderbilt.edu>
 */

#include "CIAOEvents.hpp"

namespace CIAO
{
  namespace Config_Handlers
  {

      // EventServiceType
      //

      EventServiceType::Value EventServiceType::
      integral () const
      {
        return v_;
      }

      bool
      operator== (::CIAO::Config_Handlers::EventServiceType const& a, ::CIAO::Config_Handlers::EventServiceType const& b)
      {
        return a.v_ == b.v_;
      }

      bool
      operator!= (::CIAO::Config_Handlers::EventServiceType const& a, ::CIAO::Config_Handlers::EventServiceType const& b)
      {
        return a.v_ != b.v_;
      }

      EventServiceType::
      EventServiceType (EventServiceType::Value v)
      : v_ (v)
      {
      }

      // CIAOEventsDef
      //

      CIAOEventsDef::
      CIAOEventsDef ()
      :
      ::XSCRT::Type (),
      regulator__ ()
      {
      }

      CIAOEventsDef::
      CIAOEventsDef (::CIAO::Config_Handlers::CIAOEventsDef const& s)
      :
      ::XSCRT::Type (),
      id_ (s.id_.get () ? new ::XMLSchema::ID< ACE_TCHAR > (*s.id_) : 0),
      regulator__ ()
      {
        {
          for (eventServiceConfiguration_const_iterator i (s.eventServiceConfiguration_.begin ());i != s.eventServiceConfiguration_.end ();++i) add_eventServiceConfiguration (*i);
        }

        if (id_.get ()) id_->container (this);
      }

      ::CIAO::Config_Handlers::CIAOEventsDef& CIAOEventsDef::
      operator= (::CIAO::Config_Handlers::CIAOEventsDef const& s)
      {
        eventServiceConfiguration_.clear ();
        {
          for (eventServiceConfiguration_const_iterator i (s.eventServiceConfiguration_.begin ());i != s.eventServiceConfiguration_.end ();++i) add_eventServiceConfiguration (*i);
        }

        if (s.id_.get ()) id (*(s.id_));
        else id_ = ::std::auto_ptr< ::XMLSchema::ID< ACE_TCHAR > > (0);

        return *this;
      }


      // CIAOEventsDef
      //
      CIAOEventsDef::eventServiceConfiguration_iterator CIAOEventsDef::
      begin_eventServiceConfiguration ()
      {
        return eventServiceConfiguration_.begin ();
      }

      CIAOEventsDef::eventServiceConfiguration_iterator CIAOEventsDef::
      end_eventServiceConfiguration ()
      {
        return eventServiceConfiguration_.end ();
      }

      CIAOEventsDef::eventServiceConfiguration_const_iterator CIAOEventsDef::
      begin_eventServiceConfiguration () const
      {
        return eventServiceConfiguration_.begin ();
      }

      CIAOEventsDef::eventServiceConfiguration_const_iterator CIAOEventsDef::
      end_eventServiceConfiguration () const
      {
        return eventServiceConfiguration_.end ();
      }

      void CIAOEventsDef::
      add_eventServiceConfiguration (::CIAO::Config_Handlers::EventServiceDescription const& e)
      {
        eventServiceConfiguration_.push_back (e);
      }

      size_t CIAOEventsDef::
      count_eventServiceConfiguration(void) const
      {
        return eventServiceConfiguration_.size ();
      }

      // CIAOEventsDef
      //
      bool CIAOEventsDef::
      id_p () const
      {
        return id_.get () != 0;
      }

      ::XMLSchema::ID< ACE_TCHAR > const& CIAOEventsDef::
      id () const
      {
        return *id_;
      }

      ::XMLSchema::ID< ACE_TCHAR >& CIAOEventsDef::
      id ()
      {
        return *id_;
      }

      void CIAOEventsDef::
      id (::XMLSchema::ID< ACE_TCHAR > const& e)
      {
        if (id_.get ())
        {
          *id_ = e;
        }

        else
        {
          id_ = ::std::auto_ptr< ::XMLSchema::ID< ACE_TCHAR > > (new ::XMLSchema::ID< ACE_TCHAR > (e));
          id_->container (this);
        }
      }


      // EventServiceDescription
      //

      EventServiceDescription::
      EventServiceDescription (::XMLSchema::string< ACE_TCHAR > const& name__,
                               ::XMLSchema::string< ACE_TCHAR > const& node__,
                               ::CIAO::Config_Handlers::EventServiceType const& type__,
                               ::XMLSchema::string< ACE_TCHAR > const& svc_cfg_file__)
      :
      ::XSCRT::Type (),
      name_ (new ::XMLSchema::string< ACE_TCHAR > (name__)),
      node_ (new ::XMLSchema::string< ACE_TCHAR > (node__)),
      type_ (new ::CIAO::Config_Handlers::EventServiceType (type__)),
      svc_cfg_file_ (new ::XMLSchema::string< ACE_TCHAR > (svc_cfg_file__)),
      regulator__ ()
      {
        name_->container (this);
        node_->container (this);
        type_->container (this);
        svc_cfg_file_->container (this);
      }

      EventServiceDescription::
      EventServiceDescription (::CIAO::Config_Handlers::EventServiceDescription const& s)
      :
      ::XSCRT::Type (),
      name_ (new ::XMLSchema::string< ACE_TCHAR > (*s.name_)),
      node_ (new ::XMLSchema::string< ACE_TCHAR > (*s.node_)),
      type_ (new ::CIAO::Config_Handlers::EventServiceType (*s.type_)),
      svc_cfg_file_ (new ::XMLSchema::string< ACE_TCHAR > (*s.svc_cfg_file_)),
      id_ (s.id_.get () ? new ::XMLSchema::ID< ACE_TCHAR > (*s.id_) : 0),
      regulator__ ()
      {
        name_->container (this);
        node_->container (this);
        type_->container (this);
        svc_cfg_file_->container (this);
        {
          for (filter_const_iterator i (s.filter_.begin ());i != s.filter_.end ();++i) add_filter (*i);
        }

        if (id_.get ()) id_->container (this);
      }

      ::CIAO::Config_Handlers::EventServiceDescription& EventServiceDescription::
      operator= (::CIAO::Config_Handlers::EventServiceDescription const& s)
      {
        name (s.name ());

        node (s.node ());

        type (s.type ());

        svc_cfg_file (s.svc_cfg_file ());

        filter_.clear ();
        {
          for (filter_const_iterator i (s.filter_.begin ());i != s.filter_.end ();++i) add_filter (*i);
        }

        if (s.id_.get ()) id (*(s.id_));
        else id_ = ::std::auto_ptr< ::XMLSchema::ID< ACE_TCHAR > > (0);

        return *this;
      }


      // EventServiceDescription
      //
      ::XMLSchema::string< ACE_TCHAR > const& EventServiceDescription::
      name () const
      {
        return *name_;
      }

      void EventServiceDescription::
      name (::XMLSchema::string< ACE_TCHAR > const& e)
      {
        *name_ = e;
      }

      // EventServiceDescription
      //
      ::XMLSchema::string< ACE_TCHAR > const& EventServiceDescription::
      node () const
      {
        return *node_;
      }

      void EventServiceDescription::
      node (::XMLSchema::string< ACE_TCHAR > const& e)
      {
        *node_ = e;
      }

      // EventServiceDescription
      //
      ::CIAO::Config_Handlers::EventServiceType const& EventServiceDescription::
      type () const
      {
        return *type_;
      }

      void EventServiceDescription::
      type (::CIAO::Config_Handlers::EventServiceType const& e)
      {
        *type_ = e;
      }

      // EventServiceDescription
      //
      ::XMLSchema::string< ACE_TCHAR > const& EventServiceDescription::
      svc_cfg_file () const
      {
        return *svc_cfg_file_;
      }

      void EventServiceDescription::
      svc_cfg_file (::XMLSchema::string< ACE_TCHAR > const& e)
      {
        *svc_cfg_file_ = e;
      }

      // EventServiceDescription
      //
      EventServiceDescription::filter_iterator EventServiceDescription::
      begin_filter ()
      {
        return filter_.begin ();
      }

      EventServiceDescription::filter_iterator EventServiceDescription::
      end_filter ()
      {
        return filter_.end ();
      }

      EventServiceDescription::filter_const_iterator EventServiceDescription::
      begin_filter () const
      {
        return filter_.begin ();
      }

      EventServiceDescription::filter_const_iterator EventServiceDescription::
      end_filter () const
      {
        return filter_.end ();
      }

      void EventServiceDescription::
      add_filter (::CIAO::Config_Handlers::Filter const& e)
      {
        filter_.push_back (e);
      }

      size_t EventServiceDescription::
      count_filter(void) const
      {
        return filter_.size ();
      }

      // EventServiceDescription
      //
      bool EventServiceDescription::
      id_p () const
      {
        return id_.get () != 0;
      }

      ::XMLSchema::ID< ACE_TCHAR > const& EventServiceDescription::
      id () const
      {
        return *id_;
      }

      ::XMLSchema::ID< ACE_TCHAR >& EventServiceDescription::
      id ()
      {
        return *id_;
      }

      void EventServiceDescription::
      id (::XMLSchema::ID< ACE_TCHAR > const& e)
      {
        if (id_.get ())
        {
          *id_ = e;
        }

        else
        {
          id_ = ::std::auto_ptr< ::XMLSchema::ID< ACE_TCHAR > > (new ::XMLSchema::ID< ACE_TCHAR > (e));
          id_->container (this);
        }
      }


      // FilterType
      //

      FilterType::Value FilterType::
      integral () const
      {
        return v_;
      }

      bool
      operator== (::CIAO::Config_Handlers::FilterType const& a, ::CIAO::Config_Handlers::FilterType const& b)
      {
        return a.v_ == b.v_;
      }

      bool
      operator!= (::CIAO::Config_Handlers::FilterType const& a, ::CIAO::Config_Handlers::FilterType const& b)
      {
        return a.v_ != b.v_;
      }

      FilterType::
      FilterType (FilterType::Value v)
      : v_ (v)
      {
      }

      // Filter
      //

      Filter::
      Filter (::XMLSchema::string< ACE_TCHAR > const& name__,
              ::CIAO::Config_Handlers::FilterType const& type__)
      :
      ::XSCRT::Type (),
      name_ (new ::XMLSchema::string< ACE_TCHAR > (name__)),
      type_ (new ::CIAO::Config_Handlers::FilterType (type__)),
      regulator__ ()
      {
        name_->container (this);
        type_->container (this);
      }

      Filter::
      Filter (::CIAO::Config_Handlers::Filter const& s)
      :
      ::XSCRT::Type (),
      name_ (new ::XMLSchema::string< ACE_TCHAR > (*s.name_)),
      type_ (new ::CIAO::Config_Handlers::FilterType (*s.type_)),
      id_ (s.id_.get () ? new ::XMLSchema::ID< ACE_TCHAR > (*s.id_) : 0),
      regulator__ ()
      {
        name_->container (this);
        type_->container (this);
        {
          for (source_const_iterator i (s.source_.begin ());i != s.source_.end ();++i) add_source (*i);
        }

        if (id_.get ()) id_->container (this);
      }

      ::CIAO::Config_Handlers::Filter& Filter::
      operator= (::CIAO::Config_Handlers::Filter const& s)
      {
        name (s.name ());

        type (s.type ());

        source_.clear ();
        {
          for (source_const_iterator i (s.source_.begin ());i != s.source_.end ();++i) add_source (*i);
        }

        if (s.id_.get ()) id (*(s.id_));
        else id_ = ::std::auto_ptr< ::XMLSchema::ID< ACE_TCHAR > > (0);

        return *this;
      }


      // Filter
      //
      ::XMLSchema::string< ACE_TCHAR > const& Filter::
      name () const
      {
        return *name_;
      }

      void Filter::
      name (::XMLSchema::string< ACE_TCHAR > const& e)
      {
        *name_ = e;
      }

      // Filter
      //
      ::CIAO::Config_Handlers::FilterType const& Filter::
      type () const
      {
        return *type_;
      }

      void Filter::
      type (::CIAO::Config_Handlers::FilterType const& e)
      {
        *type_ = e;
      }

      // Filter
      //
      Filter::source_iterator Filter::
      begin_source ()
      {
        return source_.begin ();
      }

      Filter::source_iterator Filter::
      end_source ()
      {
        return source_.end ();
      }

      Filter::source_const_iterator Filter::
      begin_source () const
      {
        return source_.begin ();
      }

      Filter::source_const_iterator Filter::
      end_source () const
      {
        return source_.end ();
      }

      void Filter::
      add_source (::XMLSchema::string< ACE_TCHAR > const& e)
      {
        source_.push_back (e);
      }

      size_t Filter::
      count_source(void) const
      {
        return source_.size ();
      }

      // Filter
      //
      bool Filter::
      id_p () const
      {
        return id_.get () != 0;
      }

      ::XMLSchema::ID< ACE_TCHAR > const& Filter::
      id () const
      {
        return *id_;
      }

      ::XMLSchema::ID< ACE_TCHAR >& Filter::
      id ()
      {
        return *id_;
      }

      void Filter::
      id (::XMLSchema::ID< ACE_TCHAR > const& e)
      {
        if (id_.get ())
        {
          *id_ = e;
        }

        else
        {
          id_ = ::std::auto_ptr< ::XMLSchema::ID< ACE_TCHAR > > (new ::XMLSchema::ID< ACE_TCHAR > (e));
          id_->container (this);
        }
      }


      // MCastSenderDescription
      //

      MCastSenderDescription::
      MCastSenderDescription (::XMLSchema::string< ACE_TCHAR > const& node__,
                              ::CIAO::Config_Handlers::EventServiceType const& type__,
                              ::XMLSchema::string< ACE_TCHAR > const& svc_cfg_file__)
      :
      ::XSCRT::Type (),
      node_ (new ::XMLSchema::string< ACE_TCHAR > (node__)),
      type_ (new ::CIAO::Config_Handlers::EventServiceType (type__)),
      svc_cfg_file_ (new ::XMLSchema::string< ACE_TCHAR > (svc_cfg_file__)),
      regulator__ ()
      {
        node_->container (this);
        type_->container (this);
        svc_cfg_file_->container (this);
      }

      MCastSenderDescription::
      MCastSenderDescription (::CIAO::Config_Handlers::MCastSenderDescription const& s)
      :
      ::XSCRT::Type (),
      node_ (new ::XMLSchema::string< ACE_TCHAR > (*s.node_)),
      type_ (new ::CIAO::Config_Handlers::EventServiceType (*s.type_)),
      svc_cfg_file_ (new ::XMLSchema::string< ACE_TCHAR > (*s.svc_cfg_file_)),
      id_ (s.id_.get () ? new ::XMLSchema::ID< ACE_TCHAR > (*s.id_) : 0),
      regulator__ ()
      {
        node_->container (this);
        type_->container (this);
        svc_cfg_file_->container (this);
        if (id_.get ()) id_->container (this);
      }

      ::CIAO::Config_Handlers::MCastSenderDescription& MCastSenderDescription::
      operator= (::CIAO::Config_Handlers::MCastSenderDescription const& s)
      {
        node (s.node ());

        type (s.type ());

        svc_cfg_file (s.svc_cfg_file ());

        if (s.id_.get ()) id (*(s.id_));
        else id_ = ::std::auto_ptr< ::XMLSchema::ID< ACE_TCHAR > > (0);

        return *this;
      }


      // MCastSenderDescription
      //
      ::XMLSchema::string< ACE_TCHAR > const& MCastSenderDescription::
      node () const
      {
        return *node_;
      }

      void MCastSenderDescription::
      node (::XMLSchema::string< ACE_TCHAR > const& e)
      {
        *node_ = e;
      }

      // MCastSenderDescription
      //
      ::CIAO::Config_Handlers::EventServiceType const& MCastSenderDescription::
      type () const
      {
        return *type_;
      }

      void MCastSenderDescription::
      type (::CIAO::Config_Handlers::EventServiceType const& e)
      {
        *type_ = e;
      }

      // MCastSenderDescription
      //
      ::XMLSchema::string< ACE_TCHAR > const& MCastSenderDescription::
      svc_cfg_file () const
      {
        return *svc_cfg_file_;
      }

      void MCastSenderDescription::
      svc_cfg_file (::XMLSchema::string< ACE_TCHAR > const& e)
      {
        *svc_cfg_file_ = e;
      }

      // MCastSenderDescription
      //
      bool MCastSenderDescription::
      id_p () const
      {
        return id_.get () != 0;
      }

      ::XMLSchema::ID< ACE_TCHAR > const& MCastSenderDescription::
      id () const
      {
        return *id_;
      }

      ::XMLSchema::ID< ACE_TCHAR >& MCastSenderDescription::
      id ()
      {
        return *id_;
      }

      void MCastSenderDescription::
      id (::XMLSchema::ID< ACE_TCHAR > const& e)
      {
        if (id_.get ())
        {
          *id_ = e;
        }

        else
        {
          id_ = ::std::auto_ptr< ::XMLSchema::ID< ACE_TCHAR > > (new ::XMLSchema::ID< ACE_TCHAR > (e));
          id_->container (this);
        }
      }


      // MCastReceiverDescription
      //

      MCastReceiverDescription::
      MCastReceiverDescription (::XMLSchema::string< ACE_TCHAR > const& node__,
                                ::CIAO::Config_Handlers::EventServiceType const& type__,
                                ::XMLSchema::string< ACE_TCHAR > const& svc_cfg_file__)
      :
      ::XSCRT::Type (),
      node_ (new ::XMLSchema::string< ACE_TCHAR > (node__)),
      type_ (new ::CIAO::Config_Handlers::EventServiceType (type__)),
      svc_cfg_file_ (new ::XMLSchema::string< ACE_TCHAR > (svc_cfg_file__)),
      regulator__ ()
      {
        node_->container (this);
        type_->container (this);
        svc_cfg_file_->container (this);
      }

      MCastReceiverDescription::
      MCastReceiverDescription (::CIAO::Config_Handlers::MCastReceiverDescription const& s)
      :
      ::XSCRT::Type (),
      node_ (new ::XMLSchema::string< ACE_TCHAR > (*s.node_)),
      type_ (new ::CIAO::Config_Handlers::EventServiceType (*s.type_)),
      svc_cfg_file_ (new ::XMLSchema::string< ACE_TCHAR > (*s.svc_cfg_file_)),
      id_ (s.id_.get () ? new ::XMLSchema::ID< ACE_TCHAR > (*s.id_) : 0),
      regulator__ ()
      {
        node_->container (this);
        type_->container (this);
        svc_cfg_file_->container (this);
        if (id_.get ()) id_->container (this);
      }

      ::CIAO::Config_Handlers::MCastReceiverDescription& MCastReceiverDescription::
      operator= (::CIAO::Config_Handlers::MCastReceiverDescription const& s)
      {
        node (s.node ());

        type (s.type ());

        svc_cfg_file (s.svc_cfg_file ());

        if (s.id_.get ()) id (*(s.id_));
        else id_ = ::std::auto_ptr< ::XMLSchema::ID< ACE_TCHAR > > (0);

        return *this;
      }


      // MCastReceiverDescription
      //
      ::XMLSchema::string< ACE_TCHAR > const& MCastReceiverDescription::
      node () const
      {
        return *node_;
      }

      void MCastReceiverDescription::
      node (::XMLSchema::string< ACE_TCHAR > const& e)
      {
        *node_ = e;
      }

      // MCastReceiverDescription
      //
      ::CIAO::Config_Handlers::EventServiceType const& MCastReceiverDescription::
      type () const
      {
        return *type_;
      }

      void MCastReceiverDescription::
      type (::CIAO::Config_Handlers::EventServiceType const& e)
      {
        *type_ = e;
      }

      // MCastReceiverDescription
      //
      ::XMLSchema::string< ACE_TCHAR > const& MCastReceiverDescription::
      svc_cfg_file () const
      {
        return *svc_cfg_file_;
      }

      void MCastReceiverDescription::
      svc_cfg_file (::XMLSchema::string< ACE_TCHAR > const& e)
      {
        *svc_cfg_file_ = e;
      }

      // MCastReceiverDescription
      //
      bool MCastReceiverDescription::
      id_p () const
      {
        return id_.get () != 0;
      }

      ::XMLSchema::ID< ACE_TCHAR > const& MCastReceiverDescription::
      id () const
      {
        return *id_;
      }

      ::XMLSchema::ID< ACE_TCHAR >& MCastReceiverDescription::
      id ()
      {
        return *id_;
      }

      void MCastReceiverDescription::
      id (::XMLSchema::ID< ACE_TCHAR > const& e)
      {
        if (id_.get ())
        {
          *id_ = e;
        }

        else
        {
          id_ = ::std::auto_ptr< ::XMLSchema::ID< ACE_TCHAR > > (new ::XMLSchema::ID< ACE_TCHAR > (e));
          id_->container (this);
        }
      }


      // EC_to_MCastSender
      //

      EC_to_MCastSender::
      EC_to_MCastSender (::XMLSchema::string< ACE_TCHAR > const& destination__)
      :
      ::XSCRT::Type (),
      destination_ (new ::XMLSchema::string< ACE_TCHAR > (destination__)),
      regulator__ ()
      {
        destination_->container (this);
      }

      EC_to_MCastSender::
      EC_to_MCastSender (::CIAO::Config_Handlers::EC_to_MCastSender const& s)
      :
      ::XSCRT::Type (),
      destination_ (new ::XMLSchema::string< ACE_TCHAR > (*s.destination_)),
      id_ (s.id_.get () ? new ::XMLSchema::ID< ACE_TCHAR > (*s.id_) : 0),
      regulator__ ()
      {
        destination_->container (this);
        if (id_.get ()) id_->container (this);
      }

      ::CIAO::Config_Handlers::EC_to_MCastSender& EC_to_MCastSender::
      operator= (::CIAO::Config_Handlers::EC_to_MCastSender const& s)
      {
        destination (s.destination ());

        if (s.id_.get ()) id (*(s.id_));
        else id_ = ::std::auto_ptr< ::XMLSchema::ID< ACE_TCHAR > > (0);

        return *this;
      }


      // EC_to_MCastSender
      //
      ::XMLSchema::string< ACE_TCHAR > const& EC_to_MCastSender::
      destination () const
      {
        return *destination_;
      }

      void EC_to_MCastSender::
      destination (::XMLSchema::string< ACE_TCHAR > const& e)
      {
        *destination_ = e;
      }

      // EC_to_MCastSender
      //
      bool EC_to_MCastSender::
      id_p () const
      {
        return id_.get () != 0;
      }

      ::XMLSchema::ID< ACE_TCHAR > const& EC_to_MCastSender::
      id () const
      {
        return *id_;
      }

      ::XMLSchema::ID< ACE_TCHAR >& EC_to_MCastSender::
      id ()
      {
        return *id_;
      }

      void EC_to_MCastSender::
      id (::XMLSchema::ID< ACE_TCHAR > const& e)
      {
        if (id_.get ())
        {
          *id_ = e;
        }

        else
        {
          id_ = ::std::auto_ptr< ::XMLSchema::ID< ACE_TCHAR > > (new ::XMLSchema::ID< ACE_TCHAR > (e));
          id_->container (this);
        }
      }


      // MCastReceiver_to_EC
      //

      MCastReceiver_to_EC::
      MCastReceiver_to_EC (::XMLSchema::string< ACE_TCHAR > const& source__,
                           ::XMLSchema::string< ACE_TCHAR > const& destination__)
      :
      ::XSCRT::Type (),
      source_ (new ::XMLSchema::string< ACE_TCHAR > (source__)),
      destination_ (new ::XMLSchema::string< ACE_TCHAR > (destination__)),
      regulator__ ()
      {
        source_->container (this);
        destination_->container (this);
      }

      MCastReceiver_to_EC::
      MCastReceiver_to_EC (::CIAO::Config_Handlers::MCastReceiver_to_EC const& s)
      :
      ::XSCRT::Type (),
      source_ (new ::XMLSchema::string< ACE_TCHAR > (*s.source_)),
      destination_ (new ::XMLSchema::string< ACE_TCHAR > (*s.destination_)),
      id_ (s.id_.get () ? new ::XMLSchema::ID< ACE_TCHAR > (*s.id_) : 0),
      regulator__ ()
      {
        source_->container (this);
        destination_->container (this);
        if (id_.get ()) id_->container (this);
      }

      ::CIAO::Config_Handlers::MCastReceiver_to_EC& MCastReceiver_to_EC::
      operator= (::CIAO::Config_Handlers::MCastReceiver_to_EC const& s)
      {
        source (s.source ());

        destination (s.destination ());

        if (s.id_.get ()) id (*(s.id_));
        else id_ = ::std::auto_ptr< ::XMLSchema::ID< ACE_TCHAR > > (0);

        return *this;
      }


      // MCastReceiver_to_EC
      //
      ::XMLSchema::string< ACE_TCHAR > const& MCastReceiver_to_EC::
      source () const
      {
        return *source_;
      }

      void MCastReceiver_to_EC::
      source (::XMLSchema::string< ACE_TCHAR > const& e)
      {
        *source_ = e;
      }

      // MCastReceiver_to_EC
      //
      ::XMLSchema::string< ACE_TCHAR > const& MCastReceiver_to_EC::
      destination () const
      {
        return *destination_;
      }

      void MCastReceiver_to_EC::
      destination (::XMLSchema::string< ACE_TCHAR > const& e)
      {
        *destination_ = e;
      }

      // MCastReceiver_to_EC
      //
      bool MCastReceiver_to_EC::
      id_p () const
      {
        return id_.get () != 0;
      }

      ::XMLSchema::ID< ACE_TCHAR > const& MCastReceiver_to_EC::
      id () const
      {
        return *id_;
      }

      ::XMLSchema::ID< ACE_TCHAR >& MCastReceiver_to_EC::
      id ()
      {
        return *id_;
      }

      void MCastReceiver_to_EC::
      id (::XMLSchema::ID< ACE_TCHAR > const& e)
      {
        if (id_.get ())
        {
          *id_ = e;
        }

        else
        {
          id_ = ::std::auto_ptr< ::XMLSchema::ID< ACE_TCHAR > > (new ::XMLSchema::ID< ACE_TCHAR > (e));
          id_->container (this);
        }
      }
    }

}

namespace CIAO
{
  namespace Config_Handlers
  {

      // EventServiceType
      //

      EventServiceType::
      EventServiceType (::XSCRT::XML::Element< ACE_TCHAR > const& e)
      : ::XSCRT::Type (e)
      {
        ::std::basic_string< ACE_TCHAR > v (e.value ());

        if (v == "EC") v_ = EC_l;
        else if (v == "RTEC") v_ = RTEC_l;
        else if (v == "NOTIFY") v_ = NOTIFY_l;
        else if (v == "RTNOTIFY") v_ = RTNOTIFY_l;
        else
        {
        }
      }

      EventServiceType::
      EventServiceType (::XSCRT::XML::Attribute< ACE_TCHAR > const& a)
      : ::XSCRT::Type (a)
      {
        ::std::basic_string< ACE_TCHAR > v (a.value ());

        if (v == "EC") v_ = EC_l;
        else if (v == "RTEC") v_ = RTEC_l;
        else if (v == "NOTIFY") v_ = NOTIFY_l;
        else if (v == "RTNOTIFY") v_ = RTNOTIFY_l;
        else
        {
        }
      }

      EventServiceType const EventServiceType::EC (EventServiceType::EC_l);
      EventServiceType const EventServiceType::RTEC (EventServiceType::RTEC_l);
      EventServiceType const EventServiceType::NOTIFY (EventServiceType::NOTIFY_l);
      EventServiceType const EventServiceType::RTNOTIFY (EventServiceType::RTNOTIFY_l);

      // CIAOEventsDef
      //

      CIAOEventsDef::
      CIAOEventsDef (::XSCRT::XML::Element< ACE_TCHAR > const& e)
      :Base__ (e), regulator__ ()
      {

        ::XSCRT::Parser< ACE_TCHAR > p (e);

        while (p.more_elements ())
        {
          ::XSCRT::XML::Element< ACE_TCHAR > e (p.next_element ());
          ::std::basic_string< ACE_TCHAR > n (::XSCRT::XML::uq_name (e.name ()));

          if (n == "eventServiceConfiguration")
          {
            ::CIAO::Config_Handlers::EventServiceDescription t (e);
            add_eventServiceConfiguration (t);
          }

          else
          {
          }
        }

        while (p.more_attributes ())
        {
          ::XSCRT::XML::Attribute< ACE_TCHAR > a (p.next_attribute ());
          ::std::basic_string< ACE_TCHAR > n (::XSCRT::XML::uq_name (a.name ()));
          if (n == "id")
          {
            ::XMLSchema::ID< ACE_TCHAR > t (a);
            id (t);
          }

          else
          {
          }
        }
      }

      // EventServiceDescription
      //

      EventServiceDescription::
      EventServiceDescription (::XSCRT::XML::Element< ACE_TCHAR > const& e)
      :Base__ (e), regulator__ ()
      {

        ::XSCRT::Parser< ACE_TCHAR > p (e);

        while (p.more_elements ())
        {
          ::XSCRT::XML::Element< ACE_TCHAR > e (p.next_element ());
          ::std::basic_string< ACE_TCHAR > n (::XSCRT::XML::uq_name (e.name ()));

          if (n == "name")
          {
            name_ = ::std::auto_ptr< ::XMLSchema::string< ACE_TCHAR > > (new ::XMLSchema::string< ACE_TCHAR > (e));
            name_->container (this);
          }

          else if (n == "node")
          {
            node_ = ::std::auto_ptr< ::XMLSchema::string< ACE_TCHAR > > (new ::XMLSchema::string< ACE_TCHAR > (e));
            node_->container (this);
          }

          else if (n == "type")
          {
            type_ = ::std::auto_ptr< ::CIAO::Config_Handlers::EventServiceType > (new ::CIAO::Config_Handlers::EventServiceType (e));
            type_->container (this);
          }

          else if (n == "svc_cfg_file")
          {
            svc_cfg_file_ = ::std::auto_ptr< ::XMLSchema::string< ACE_TCHAR > > (new ::XMLSchema::string< ACE_TCHAR > (e));
            svc_cfg_file_->container (this);
          }

          else if (n == "filter")
          {
            ::CIAO::Config_Handlers::Filter t (e);
            add_filter (t);
          }

          else
          {
          }
        }

        while (p.more_attributes ())
        {
          ::XSCRT::XML::Attribute< ACE_TCHAR > a (p.next_attribute ());
          ::std::basic_string< ACE_TCHAR > n (::XSCRT::XML::uq_name (a.name ()));
          if (n == "id")
          {
            ::XMLSchema::ID< ACE_TCHAR > t (a);
            id (t);
          }

          else
          {
          }
        }
      }

      // FilterType
      //

      FilterType::
      FilterType (::XSCRT::XML::Element< ACE_TCHAR > const& e)
      : ::XSCRT::Type (e)
      {
        ::std::basic_string< ACE_TCHAR > v (e.value ());

        if (v == "CONJUNCTION") v_ = CONJUNCTION_l;
        else if (v == "DISJUNCTION") v_ = DISJUNCTION_l;
        else if (v == "LOGICAL_AND") v_ = LOGICAL_AND_l;
        else if (v == "NEGATE") v_ = NEGATE_l;
        else
        {
        }
      }

      FilterType::
      FilterType (::XSCRT::XML::Attribute< ACE_TCHAR > const& a)
      : ::XSCRT::Type (a)
      {
        ::std::basic_string< ACE_TCHAR > v (a.value ());

        if (v == "CONJUNCTION") v_ = CONJUNCTION_l;
        else if (v == "DISJUNCTION") v_ = DISJUNCTION_l;
        else if (v == "LOGICAL_AND") v_ = LOGICAL_AND_l;
        else if (v == "NEGATE") v_ = NEGATE_l;
        else
        {
        }
      }

      FilterType const FilterType::CONJUNCTION (FilterType::CONJUNCTION_l);
      FilterType const FilterType::DISJUNCTION (FilterType::DISJUNCTION_l);
      FilterType const FilterType::LOGICAL_AND (FilterType::LOGICAL_AND_l);
      FilterType const FilterType::NEGATE (FilterType::NEGATE_l);

      // Filter
      //

      Filter::
      Filter (::XSCRT::XML::Element< ACE_TCHAR > const& e)
      :Base__ (e), regulator__ ()
      {

        ::XSCRT::Parser< ACE_TCHAR > p (e);

        while (p.more_elements ())
        {
          ::XSCRT::XML::Element< ACE_TCHAR > e (p.next_element ());
          ::std::basic_string< ACE_TCHAR > n (::XSCRT::XML::uq_name (e.name ()));

          if (n == "name")
          {
            name_ = ::std::auto_ptr< ::XMLSchema::string< ACE_TCHAR > > (new ::XMLSchema::string< ACE_TCHAR > (e));
            name_->container (this);
          }

          else if (n == "type")
          {
            type_ = ::std::auto_ptr< ::CIAO::Config_Handlers::FilterType > (new ::CIAO::Config_Handlers::FilterType (e));
            type_->container (this);
          }

          else if (n == "source")
          {
            ::XMLSchema::string< ACE_TCHAR > t (e);
            add_source (t);
          }

          else
          {
          }
        }

        while (p.more_attributes ())
        {
          ::XSCRT::XML::Attribute< ACE_TCHAR > a (p.next_attribute ());
          ::std::basic_string< ACE_TCHAR > n (::XSCRT::XML::uq_name (a.name ()));
          if (n == "id")
          {
            ::XMLSchema::ID< ACE_TCHAR > t (a);
            id (t);
          }

          else
          {
          }
        }
      }

      // MCastSenderDescription
      //

      MCastSenderDescription::
      MCastSenderDescription (::XSCRT::XML::Element< ACE_TCHAR > const& e)
      :Base__ (e), regulator__ ()
      {

        ::XSCRT::Parser< ACE_TCHAR > p (e);

        while (p.more_elements ())
        {
          ::XSCRT::XML::Element< ACE_TCHAR > e (p.next_element ());
          ::std::basic_string< ACE_TCHAR > n (::XSCRT::XML::uq_name (e.name ()));

          if (n == "node")
          {
            node_ = ::std::auto_ptr< ::XMLSchema::string< ACE_TCHAR > > (new ::XMLSchema::string< ACE_TCHAR > (e));
            node_->container (this);
          }

          else if (n == "type")
          {
            type_ = ::std::auto_ptr< ::CIAO::Config_Handlers::EventServiceType > (new ::CIAO::Config_Handlers::EventServiceType (e));
            type_->container (this);
          }

          else if (n == "svc_cfg_file")
          {
            svc_cfg_file_ = ::std::auto_ptr< ::XMLSchema::string< ACE_TCHAR > > (new ::XMLSchema::string< ACE_TCHAR > (e));
            svc_cfg_file_->container (this);
          }

          else
          {
          }
        }

        while (p.more_attributes ())
        {
          ::XSCRT::XML::Attribute< ACE_TCHAR > a (p.next_attribute ());
          ::std::basic_string< ACE_TCHAR > n (::XSCRT::XML::uq_name (a.name ()));
          if (n == "id")
          {
            ::XMLSchema::ID< ACE_TCHAR > t (a);
            id (t);
          }

          else
          {
          }
        }
      }

      // MCastReceiverDescription
      //

      MCastReceiverDescription::
      MCastReceiverDescription (::XSCRT::XML::Element< ACE_TCHAR > const& e)
      :Base__ (e), regulator__ ()
      {

        ::XSCRT::Parser< ACE_TCHAR > p (e);

        while (p.more_elements ())
        {
          ::XSCRT::XML::Element< ACE_TCHAR > e (p.next_element ());
          ::std::basic_string< ACE_TCHAR > n (::XSCRT::XML::uq_name (e.name ()));

          if (n == "node")
          {
            node_ = ::std::auto_ptr< ::XMLSchema::string< ACE_TCHAR > > (new ::XMLSchema::string< ACE_TCHAR > (e));
            node_->container (this);
          }

          else if (n == "type")
          {
            type_ = ::std::auto_ptr< ::CIAO::Config_Handlers::EventServiceType > (new ::CIAO::Config_Handlers::EventServiceType (e));
            type_->container (this);
          }

          else if (n == "svc_cfg_file")
          {
            svc_cfg_file_ = ::std::auto_ptr< ::XMLSchema::string< ACE_TCHAR > > (new ::XMLSchema::string< ACE_TCHAR > (e));
            svc_cfg_file_->container (this);
          }

          else
          {
          }
        }

        while (p.more_attributes ())
        {
          ::XSCRT::XML::Attribute< ACE_TCHAR > a (p.next_attribute ());
          ::std::basic_string< ACE_TCHAR > n (::XSCRT::XML::uq_name (a.name ()));
          if (n == "id")
          {
            ::XMLSchema::ID< ACE_TCHAR > t (a);
            id (t);
          }

          else
          {
          }
        }
      }

      // EC_to_MCastSender
      //

      EC_to_MCastSender::
      EC_to_MCastSender (::XSCRT::XML::Element< ACE_TCHAR > const& e)
      :Base__ (e), regulator__ ()
      {

        ::XSCRT::Parser< ACE_TCHAR > p (e);

        while (p.more_elements ())
        {
          ::XSCRT::XML::Element< ACE_TCHAR > e (p.next_element ());
          ::std::basic_string< ACE_TCHAR > n (::XSCRT::XML::uq_name (e.name ()));

          if (n == "destination")
          {
            destination_ = ::std::auto_ptr< ::XMLSchema::string< ACE_TCHAR > > (new ::XMLSchema::string< ACE_TCHAR > (e));
            destination_->container (this);
          }

          else
          {
          }
        }

        while (p.more_attributes ())
        {
          ::XSCRT::XML::Attribute< ACE_TCHAR > a (p.next_attribute ());
          ::std::basic_string< ACE_TCHAR > n (::XSCRT::XML::uq_name (a.name ()));
          if (n == "id")
          {
            ::XMLSchema::ID< ACE_TCHAR > t (a);
            id (t);
          }

          else
          {
          }
        }
      }

      // MCastReceiver_to_EC
      //

      MCastReceiver_to_EC::
      MCastReceiver_to_EC (::XSCRT::XML::Element< ACE_TCHAR > const& e)
      :Base__ (e), regulator__ ()
      {

        ::XSCRT::Parser< ACE_TCHAR > p (e);

        while (p.more_elements ())
        {
          ::XSCRT::XML::Element< ACE_TCHAR > e (p.next_element ());
          ::std::basic_string< ACE_TCHAR > n (::XSCRT::XML::uq_name (e.name ()));

          if (n == "source")
          {
            source_ = ::std::auto_ptr< ::XMLSchema::string< ACE_TCHAR > > (new ::XMLSchema::string< ACE_TCHAR > (e));
            source_->container (this);
          }

          else if (n == "destination")
          {
            destination_ = ::std::auto_ptr< ::XMLSchema::string< ACE_TCHAR > > (new ::XMLSchema::string< ACE_TCHAR > (e));
            destination_->container (this);
          }

          else
          {
          }
        }

        while (p.more_attributes ())
        {
          ::XSCRT::XML::Attribute< ACE_TCHAR > a (p.next_attribute ());
          ::std::basic_string< ACE_TCHAR > n (::XSCRT::XML::uq_name (a.name ()));
          if (n == "id")
          {
            ::XMLSchema::ID< ACE_TCHAR > t (a);
            id (t);
          }

          else
          {
          }
        }
      }
    }

}

namespace CIAO
{
  namespace Config_Handlers
  {

      ::CIAO::Config_Handlers::CIAOEventsDef
      CIAOEvents (xercesc::DOMDocument const* d)
      {
        ::XSCRT::XML::Element< ACE_TCHAR > e (d->getDocumentElement ());
        if (e.name () == "CIAOEvents")
        {
          ::CIAO::Config_Handlers::CIAOEventsDef r (e);
          return r;
        }

        else
        {
          throw 1;
        }
      }
    }

}

#include "XMLSchema/TypeInfo.hpp"

namespace CIAO
{
  namespace Config_Handlers
  {

      namespace
      {
        ::XMLSchema::TypeInfoInitializer < ACE_TCHAR > XMLSchemaTypeInfoInitializer_ (::XSCRT::extended_type_info_map ());

        struct EventServiceTypeTypeInfoInitializer
        {
          EventServiceTypeTypeInfoInitializer ()
          {
            ::XSCRT::TypeId id (typeid (EventServiceType));
            ::XSCRT::ExtendedTypeInfo nf (id);

            nf.add_base (::XSCRT::ExtendedTypeInfo::Access::public_, false, typeid (::XSCRT::Type));

            ::XSCRT::extended_type_info_map ().insert (::std::make_pair (id, nf));
          }
        };

        EventServiceTypeTypeInfoInitializer EventServiceTypeTypeInfoInitializer_;

        struct CIAOEventsDefTypeInfoInitializer
        {
          CIAOEventsDefTypeInfoInitializer ()
          {
            ::XSCRT::TypeId id (typeid (CIAOEventsDef));
            ::XSCRT::ExtendedTypeInfo nf (id);

            nf.add_base (::XSCRT::ExtendedTypeInfo::Access::public_, false, typeid (::XSCRT::Type));
            ::XSCRT::extended_type_info_map ().insert (::std::make_pair (id, nf));
          }
        };

        CIAOEventsDefTypeInfoInitializer CIAOEventsDefTypeInfoInitializer_;

        struct EventServiceDescriptionTypeInfoInitializer
        {
          EventServiceDescriptionTypeInfoInitializer ()
          {
            ::XSCRT::TypeId id (typeid (EventServiceDescription));
            ::XSCRT::ExtendedTypeInfo nf (id);

            nf.add_base (::XSCRT::ExtendedTypeInfo::Access::public_, false, typeid (::XSCRT::Type));
            ::XSCRT::extended_type_info_map ().insert (::std::make_pair (id, nf));
          }
        };

        EventServiceDescriptionTypeInfoInitializer EventServiceDescriptionTypeInfoInitializer_;

        struct FilterTypeTypeInfoInitializer
        {
          FilterTypeTypeInfoInitializer ()
          {
            ::XSCRT::TypeId id (typeid (FilterType));
            ::XSCRT::ExtendedTypeInfo nf (id);

            nf.add_base (::XSCRT::ExtendedTypeInfo::Access::public_, false, typeid (::XSCRT::Type));

            ::XSCRT::extended_type_info_map ().insert (::std::make_pair (id, nf));
          }
        };

        FilterTypeTypeInfoInitializer FilterTypeTypeInfoInitializer_;

        struct FilterTypeInfoInitializer
        {
          FilterTypeInfoInitializer ()
          {
            ::XSCRT::TypeId id (typeid (Filter));
            ::XSCRT::ExtendedTypeInfo nf (id);

            nf.add_base (::XSCRT::ExtendedTypeInfo::Access::public_, false, typeid (::XSCRT::Type));
            ::XSCRT::extended_type_info_map ().insert (::std::make_pair (id, nf));
          }
        };

        FilterTypeInfoInitializer FilterTypeInfoInitializer_;

        struct MCastSenderDescriptionTypeInfoInitializer
        {
          MCastSenderDescriptionTypeInfoInitializer ()
          {
            ::XSCRT::TypeId id (typeid (MCastSenderDescription));
            ::XSCRT::ExtendedTypeInfo nf (id);

            nf.add_base (::XSCRT::ExtendedTypeInfo::Access::public_, false, typeid (::XSCRT::Type));
            ::XSCRT::extended_type_info_map ().insert (::std::make_pair (id, nf));
          }
        };

        MCastSenderDescriptionTypeInfoInitializer MCastSenderDescriptionTypeInfoInitializer_;

        struct MCastReceiverDescriptionTypeInfoInitializer
        {
          MCastReceiverDescriptionTypeInfoInitializer ()
          {
            ::XSCRT::TypeId id (typeid (MCastReceiverDescription));
            ::XSCRT::ExtendedTypeInfo nf (id);

            nf.add_base (::XSCRT::ExtendedTypeInfo::Access::public_, false, typeid (::XSCRT::Type));
            ::XSCRT::extended_type_info_map ().insert (::std::make_pair (id, nf));
          }
        };

        MCastReceiverDescriptionTypeInfoInitializer MCastReceiverDescriptionTypeInfoInitializer_;

        struct EC_to_MCastSenderTypeInfoInitializer
        {
          EC_to_MCastSenderTypeInfoInitializer ()
          {
            ::XSCRT::TypeId id (typeid (EC_to_MCastSender));
            ::XSCRT::ExtendedTypeInfo nf (id);

            nf.add_base (::XSCRT::ExtendedTypeInfo::Access::public_, false, typeid (::XSCRT::Type));
            ::XSCRT::extended_type_info_map ().insert (::std::make_pair (id, nf));
          }
        };

        EC_to_MCastSenderTypeInfoInitializer EC_to_MCastSenderTypeInfoInitializer_;

        struct MCastReceiver_to_ECTypeInfoInitializer
        {
          MCastReceiver_to_ECTypeInfoInitializer ()
          {
            ::XSCRT::TypeId id (typeid (MCastReceiver_to_EC));
            ::XSCRT::ExtendedTypeInfo nf (id);

            nf.add_base (::XSCRT::ExtendedTypeInfo::Access::public_, false, typeid (::XSCRT::Type));
            ::XSCRT::extended_type_info_map ().insert (::std::make_pair (id, nf));
          }
        };

        MCastReceiver_to_ECTypeInfoInitializer MCastReceiver_to_ECTypeInfoInitializer_;
      }
    }

}

namespace CIAO
{
  namespace Config_Handlers
  {

      namespace Traversal
      {
        // CIAOEventsDef
        //
        //

        void CIAOEventsDef::
        traverse (Type& o)
        {
          pre (o);
          eventServiceConfiguration (o);
          if (o.id_p ()) id (o);
          else id_none (o);
          post (o);
        }

        void CIAOEventsDef::
        traverse (Type const& o)
        {
          pre (o);
          eventServiceConfiguration (o);
          if (o.id_p ()) id (o);
          else id_none (o);
          post (o);
        }

        void CIAOEventsDef::
        pre (Type&)
        {
        }

        void CIAOEventsDef::
        pre (Type const&)
        {
        }

        void CIAOEventsDef::
        eventServiceConfiguration (Type& o)
        {
          // VC6 anathema strikes again
          //
          CIAOEventsDef::Type::eventServiceConfiguration_iterator b (o.begin_eventServiceConfiguration()), e (o.end_eventServiceConfiguration());

          if (b != e)
          {
            eventServiceConfiguration_pre (o);
            for (; b != e;)
            {
              dispatch (*b);
              if (++b != e) eventServiceConfiguration_next (o);
            }

            eventServiceConfiguration_post (o);
          }
        }

        void CIAOEventsDef::
        eventServiceConfiguration (Type const& o)
        {
          // VC6 anathema strikes again
          //
          CIAOEventsDef::Type::eventServiceConfiguration_const_iterator b (o.begin_eventServiceConfiguration()), e (o.end_eventServiceConfiguration());

          if (b != e)
          {
            eventServiceConfiguration_pre (o);
            for (; b != e;)
            {
              dispatch (*b);
              if (++b != e) eventServiceConfiguration_next (o);
            }

            eventServiceConfiguration_post (o);
          }
        }

        void CIAOEventsDef::
        eventServiceConfiguration_pre (Type&)
        {
        }

        void CIAOEventsDef::
        eventServiceConfiguration_pre (Type const&)
        {
        }

        void CIAOEventsDef::
        eventServiceConfiguration_next (Type&)
        {
        }

        void CIAOEventsDef::
        eventServiceConfiguration_next (Type const&)
        {
        }

        void CIAOEventsDef::
        eventServiceConfiguration_post (Type&)
        {
        }

        void CIAOEventsDef::
        eventServiceConfiguration_post (Type const&)
        {
        }

        void CIAOEventsDef::
        id (Type& o)
        {
          dispatch (o.id ());
        }

        void CIAOEventsDef::
        id (Type const& o)
        {
          dispatch (o.id ());
        }

        void CIAOEventsDef::
        id_none (Type&)
        {
        }

        void CIAOEventsDef::
        id_none (Type const&)
        {
        }

        void CIAOEventsDef::
        post (Type&)
        {
        }

        void CIAOEventsDef::
        post (Type const&)
        {
        }

        // EventServiceDescription
        //
        //

        void EventServiceDescription::
        traverse (Type& o)
        {
          pre (o);
          name (o);
          node (o);
          type (o);
          svc_cfg_file (o);
          filter (o);
          if (o.id_p ()) id (o);
          else id_none (o);
          post (o);
        }

        void EventServiceDescription::
        traverse (Type const& o)
        {
          pre (o);
          name (o);
          node (o);
          type (o);
          svc_cfg_file (o);
          filter (o);
          if (o.id_p ()) id (o);
          else id_none (o);
          post (o);
        }

        void EventServiceDescription::
        pre (Type&)
        {
        }

        void EventServiceDescription::
        pre (Type const&)
        {
        }

        void EventServiceDescription::
        name (Type& o)
        {
          dispatch (o.name ());
        }

        void EventServiceDescription::
        name (Type const& o)
        {
          dispatch (o.name ());
        }

        void EventServiceDescription::
        node (Type& o)
        {
          dispatch (o.node ());
        }

        void EventServiceDescription::
        node (Type const& o)
        {
          dispatch (o.node ());
        }

        void EventServiceDescription::
        type (Type& o)
        {
          dispatch (o.type ());
        }

        void EventServiceDescription::
        type (Type const& o)
        {
          dispatch (o.type ());
        }

        void EventServiceDescription::
        svc_cfg_file (Type& o)
        {
          dispatch (o.svc_cfg_file ());
        }

        void EventServiceDescription::
        svc_cfg_file (Type const& o)
        {
          dispatch (o.svc_cfg_file ());
        }

        void EventServiceDescription::
        filter (Type& o)
        {
          // VC6 anathema strikes again
          //
          EventServiceDescription::Type::filter_iterator b (o.begin_filter()), e (o.end_filter());

          if (b != e)
          {
            filter_pre (o);
            for (; b != e;)
            {
              dispatch (*b);
              if (++b != e) filter_next (o);
            }

            filter_post (o);
          }

          else filter_none (o);
        }

        void EventServiceDescription::
        filter (Type const& o)
        {
          // VC6 anathema strikes again
          //
          EventServiceDescription::Type::filter_const_iterator b (o.begin_filter()), e (o.end_filter());

          if (b != e)
          {
            filter_pre (o);
            for (; b != e;)
            {
              dispatch (*b);
              if (++b != e) filter_next (o);
            }

            filter_post (o);
          }

          else filter_none (o);
        }

        void EventServiceDescription::
        filter_pre (Type&)
        {
        }

        void EventServiceDescription::
        filter_pre (Type const&)
        {
        }

        void EventServiceDescription::
        filter_next (Type&)
        {
        }

        void EventServiceDescription::
        filter_next (Type const&)
        {
        }

        void EventServiceDescription::
        filter_post (Type&)
        {
        }

        void EventServiceDescription::
        filter_post (Type const&)
        {
        }

        void EventServiceDescription::
        filter_none (Type&)
        {
        }

        void EventServiceDescription::
        filter_none (Type const&)
        {
        }

        void EventServiceDescription::
        id (Type& o)
        {
          dispatch (o.id ());
        }

        void EventServiceDescription::
        id (Type const& o)
        {
          dispatch (o.id ());
        }

        void EventServiceDescription::
        id_none (Type&)
        {
        }

        void EventServiceDescription::
        id_none (Type const&)
        {
        }

        void EventServiceDescription::
        post (Type&)
        {
        }

        void EventServiceDescription::
        post (Type const&)
        {
        }

        // Filter
        //
        //

        void Filter::
        traverse (Type& o)
        {
          pre (o);
          name (o);
          type (o);
          source (o);
          if (o.id_p ()) id (o);
          else id_none (o);
          post (o);
        }

        void Filter::
        traverse (Type const& o)
        {
          pre (o);
          name (o);
          type (o);
          source (o);
          if (o.id_p ()) id (o);
          else id_none (o);
          post (o);
        }

        void Filter::
        pre (Type&)
        {
        }

        void Filter::
        pre (Type const&)
        {
        }

        void Filter::
        name (Type& o)
        {
          dispatch (o.name ());
        }

        void Filter::
        name (Type const& o)
        {
          dispatch (o.name ());
        }

        void Filter::
        type (Type& o)
        {
          dispatch (o.type ());
        }

        void Filter::
        type (Type const& o)
        {
          dispatch (o.type ());
        }

        void Filter::
        source (Type& o)
        {
          // VC6 anathema strikes again
          //
          Filter::Type::source_iterator b (o.begin_source()), e (o.end_source());

          if (b != e)
          {
            source_pre (o);
            for (; b != e;)
            {
              dispatch (*b);
              if (++b != e) source_next (o);
            }

            source_post (o);
          }
        }

        void Filter::
        source (Type const& o)
        {
          // VC6 anathema strikes again
          //
          Filter::Type::source_const_iterator b (o.begin_source()), e (o.end_source());

          if (b != e)
          {
            source_pre (o);
            for (; b != e;)
            {
              dispatch (*b);
              if (++b != e) source_next (o);
            }

            source_post (o);
          }
        }

        void Filter::
        source_pre (Type&)
        {
        }

        void Filter::
        source_pre (Type const&)
        {
        }

        void Filter::
        source_next (Type&)
        {
        }

        void Filter::
        source_next (Type const&)
        {
        }

        void Filter::
        source_post (Type&)
        {
        }

        void Filter::
        source_post (Type const&)
        {
        }

        void Filter::
        id (Type& o)
        {
          dispatch (o.id ());
        }

        void Filter::
        id (Type const& o)
        {
          dispatch (o.id ());
        }

        void Filter::
        id_none (Type&)
        {
        }

        void Filter::
        id_none (Type const&)
        {
        }

        void Filter::
        post (Type&)
        {
        }

        void Filter::
        post (Type const&)
        {
        }

        // MCastSenderDescription
        //
        //

        void MCastSenderDescription::
        traverse (Type& o)
        {
          pre (o);
          node (o);
          type (o);
          svc_cfg_file (o);
          if (o.id_p ()) id (o);
          else id_none (o);
          post (o);
        }

        void MCastSenderDescription::
        traverse (Type const& o)
        {
          pre (o);
          node (o);
          type (o);
          svc_cfg_file (o);
          if (o.id_p ()) id (o);
          else id_none (o);
          post (o);
        }

        void MCastSenderDescription::
        pre (Type&)
        {
        }

        void MCastSenderDescription::
        pre (Type const&)
        {
        }

        void MCastSenderDescription::
        node (Type& o)
        {
          dispatch (o.node ());
        }

        void MCastSenderDescription::
        node (Type const& o)
        {
          dispatch (o.node ());
        }

        void MCastSenderDescription::
        type (Type& o)
        {
          dispatch (o.type ());
        }

        void MCastSenderDescription::
        type (Type const& o)
        {
          dispatch (o.type ());
        }

        void MCastSenderDescription::
        svc_cfg_file (Type& o)
        {
          dispatch (o.svc_cfg_file ());
        }

        void MCastSenderDescription::
        svc_cfg_file (Type const& o)
        {
          dispatch (o.svc_cfg_file ());
        }

        void MCastSenderDescription::
        id (Type& o)
        {
          dispatch (o.id ());
        }

        void MCastSenderDescription::
        id (Type const& o)
        {
          dispatch (o.id ());
        }

        void MCastSenderDescription::
        id_none (Type&)
        {
        }

        void MCastSenderDescription::
        id_none (Type const&)
        {
        }

        void MCastSenderDescription::
        post (Type&)
        {
        }

        void MCastSenderDescription::
        post (Type const&)
        {
        }

        // MCastReceiverDescription
        //
        //

        void MCastReceiverDescription::
        traverse (Type& o)
        {
          pre (o);
          node (o);
          type (o);
          svc_cfg_file (o);
          if (o.id_p ()) id (o);
          else id_none (o);
          post (o);
        }

        void MCastReceiverDescription::
        traverse (Type const& o)
        {
          pre (o);
          node (o);
          type (o);
          svc_cfg_file (o);
          if (o.id_p ()) id (o);
          else id_none (o);
          post (o);
        }

        void MCastReceiverDescription::
        pre (Type&)
        {
        }

        void MCastReceiverDescription::
        pre (Type const&)
        {
        }

        void MCastReceiverDescription::
        node (Type& o)
        {
          dispatch (o.node ());
        }

        void MCastReceiverDescription::
        node (Type const& o)
        {
          dispatch (o.node ());
        }

        void MCastReceiverDescription::
        type (Type& o)
        {
          dispatch (o.type ());
        }

        void MCastReceiverDescription::
        type (Type const& o)
        {
          dispatch (o.type ());
        }

        void MCastReceiverDescription::
        svc_cfg_file (Type& o)
        {
          dispatch (o.svc_cfg_file ());
        }

        void MCastReceiverDescription::
        svc_cfg_file (Type const& o)
        {
          dispatch (o.svc_cfg_file ());
        }

        void MCastReceiverDescription::
        id (Type& o)
        {
          dispatch (o.id ());
        }

        void MCastReceiverDescription::
        id (Type const& o)
        {
          dispatch (o.id ());
        }

        void MCastReceiverDescription::
        id_none (Type&)
        {
        }

        void MCastReceiverDescription::
        id_none (Type const&)
        {
        }

        void MCastReceiverDescription::
        post (Type&)
        {
        }

        void MCastReceiverDescription::
        post (Type const&)
        {
        }

        // EC_to_MCastSender
        //
        //

        void EC_to_MCastSender::
        traverse (Type& o)
        {
          pre (o);
          destination (o);
          if (o.id_p ()) id (o);
          else id_none (o);
          post (o);
        }

        void EC_to_MCastSender::
        traverse (Type const& o)
        {
          pre (o);
          destination (o);
          if (o.id_p ()) id (o);
          else id_none (o);
          post (o);
        }

        void EC_to_MCastSender::
        pre (Type&)
        {
        }

        void EC_to_MCastSender::
        pre (Type const&)
        {
        }

        void EC_to_MCastSender::
        destination (Type& o)
        {
          dispatch (o.destination ());
        }

        void EC_to_MCastSender::
        destination (Type const& o)
        {
          dispatch (o.destination ());
        }

        void EC_to_MCastSender::
        id (Type& o)
        {
          dispatch (o.id ());
        }

        void EC_to_MCastSender::
        id (Type const& o)
        {
          dispatch (o.id ());
        }

        void EC_to_MCastSender::
        id_none (Type&)
        {
        }

        void EC_to_MCastSender::
        id_none (Type const&)
        {
        }

        void EC_to_MCastSender::
        post (Type&)
        {
        }

        void EC_to_MCastSender::
        post (Type const&)
        {
        }

        // MCastReceiver_to_EC
        //
        //

        void MCastReceiver_to_EC::
        traverse (Type& o)
        {
          pre (o);
          source (o);
          destination (o);
          if (o.id_p ()) id (o);
          else id_none (o);
          post (o);
        }

        void MCastReceiver_to_EC::
        traverse (Type const& o)
        {
          pre (o);
          source (o);
          destination (o);
          if (o.id_p ()) id (o);
          else id_none (o);
          post (o);
        }

        void MCastReceiver_to_EC::
        pre (Type&)
        {
        }

        void MCastReceiver_to_EC::
        pre (Type const&)
        {
        }

        void MCastReceiver_to_EC::
        source (Type& o)
        {
          dispatch (o.source ());
        }

        void MCastReceiver_to_EC::
        source (Type const& o)
        {
          dispatch (o.source ());
        }

        void MCastReceiver_to_EC::
        destination (Type& o)
        {
          dispatch (o.destination ());
        }

        void MCastReceiver_to_EC::
        destination (Type const& o)
        {
          dispatch (o.destination ());
        }

        void MCastReceiver_to_EC::
        id (Type& o)
        {
          dispatch (o.id ());
        }

        void MCastReceiver_to_EC::
        id (Type const& o)
        {
          dispatch (o.id ());
        }

        void MCastReceiver_to_EC::
        id_none (Type&)
        {
        }

        void MCastReceiver_to_EC::
        id_none (Type const&)
        {
        }

        void MCastReceiver_to_EC::
        post (Type&)
        {
        }

        void MCastReceiver_to_EC::
        post (Type const&)
        {
        }
      }
    }

}

namespace CIAO
{
  namespace Config_Handlers
  {

      namespace Writer
      {
        // EventServiceType
        //
        //

        EventServiceType::
        EventServiceType (::XSCRT::XML::Element< ACE_TCHAR >& e)
        : ::XSCRT::Writer< ACE_TCHAR > (e)
        {
        }

        EventServiceType::
        EventServiceType ()
        {
        }

        void EventServiceType::
        traverse (Type const& o)
        {
          ::std::basic_string< ACE_TCHAR > s;

          if (o == ::CIAO::Config_Handlers::EventServiceType::EC) s = "EC";
          else if (o == ::CIAO::Config_Handlers::EventServiceType::RTEC) s = "RTEC";
          else if (o == ::CIAO::Config_Handlers::EventServiceType::NOTIFY) s = "NOTIFY";
          else if (o == ::CIAO::Config_Handlers::EventServiceType::RTNOTIFY) s = "RTNOTIFY";
          else
          {
          }

          if (::XSCRT::XML::Attribute< ACE_TCHAR >* a = attr_ ())
          {
            a->value (s);
          }

          else
          {
            top_().value (s);
          }
        }

        // CIAOEventsDef
        //
        //

        CIAOEventsDef::
        CIAOEventsDef (::XSCRT::XML::Element< ACE_TCHAR >& e)
        : ::XSCRT::Writer< ACE_TCHAR > (e)
        {
        }

        CIAOEventsDef::
        CIAOEventsDef ()
        {
        }

        void CIAOEventsDef::
        traverse (Type const& o)
        {
          Traversal::CIAOEventsDef::traverse (o);
        }

        void CIAOEventsDef::
        eventServiceConfiguration_pre (Type const&)
        {
          push_ (::XSCRT::XML::Element< ACE_TCHAR > ("eventServiceConfiguration", top_ ()));
        }

        void CIAOEventsDef::
        eventServiceConfiguration_next (Type const& o)
        {
          eventServiceConfiguration_post (o);
          eventServiceConfiguration_pre (o);
        }

        void CIAOEventsDef::
        eventServiceConfiguration_post (Type const&)
        {
          pop_ ();
        }

        void CIAOEventsDef::
        id (Type const& o)
        {
          ::XSCRT::XML::Attribute< ACE_TCHAR > a ("id", "", top_ ());
          attr_ (&a);
          Traversal::CIAOEventsDef::id (o);
          attr_ (0);
        }

        // EventServiceDescription
        //
        //

        EventServiceDescription::
        EventServiceDescription (::XSCRT::XML::Element< ACE_TCHAR >& e)
        : ::XSCRT::Writer< ACE_TCHAR > (e)
        {
        }

        EventServiceDescription::
        EventServiceDescription ()
        {
        }

        void EventServiceDescription::
        traverse (Type const& o)
        {
          Traversal::EventServiceDescription::traverse (o);
        }

        void EventServiceDescription::
        name (Type const& o)
        {
          push_ (::XSCRT::XML::Element< ACE_TCHAR > ("name", top_ ()));
          Traversal::EventServiceDescription::name (o);
          pop_ ();
        }

        void EventServiceDescription::
        node (Type const& o)
        {
          push_ (::XSCRT::XML::Element< ACE_TCHAR > ("node", top_ ()));
          Traversal::EventServiceDescription::node (o);
          pop_ ();
        }

        void EventServiceDescription::
        type (Type const& o)
        {
          push_ (::XSCRT::XML::Element< ACE_TCHAR > ("type", top_ ()));
          Traversal::EventServiceDescription::type (o);
          pop_ ();
        }

        void EventServiceDescription::
        svc_cfg_file (Type const& o)
        {
          push_ (::XSCRT::XML::Element< ACE_TCHAR > ("svc_cfg_file", top_ ()));
          Traversal::EventServiceDescription::svc_cfg_file (o);
          pop_ ();
        }

        void EventServiceDescription::
        filter_pre (Type const&)
        {
          push_ (::XSCRT::XML::Element< ACE_TCHAR > ("filter", top_ ()));
        }

        void EventServiceDescription::
        filter_next (Type const& o)
        {
          filter_post (o);
          filter_pre (o);
        }

        void EventServiceDescription::
        filter_post (Type const&)
        {
          pop_ ();
        }

        void EventServiceDescription::
        id (Type const& o)
        {
          ::XSCRT::XML::Attribute< ACE_TCHAR > a ("id", "", top_ ());
          attr_ (&a);
          Traversal::EventServiceDescription::id (o);
          attr_ (0);
        }

        // FilterType
        //
        //

        FilterType::
        FilterType (::XSCRT::XML::Element< ACE_TCHAR >& e)
        : ::XSCRT::Writer< ACE_TCHAR > (e)
        {
        }

        FilterType::
        FilterType ()
        {
        }

        void FilterType::
        traverse (Type const& o)
        {
          ::std::basic_string< ACE_TCHAR > s;

          if (o == ::CIAO::Config_Handlers::FilterType::CONJUNCTION) s = "CONJUNCTION";
          else if (o == ::CIAO::Config_Handlers::FilterType::DISJUNCTION) s = "DISJUNCTION";
          else if (o == ::CIAO::Config_Handlers::FilterType::LOGICAL_AND) s = "LOGICAL_AND";
          else if (o == ::CIAO::Config_Handlers::FilterType::NEGATE) s = "NEGATE";
          else
          {
          }

          if (::XSCRT::XML::Attribute< ACE_TCHAR >* a = attr_ ())
          {
            a->value (s);
          }

          else
          {
            top_().value (s);
          }
        }

        // Filter
        //
        //

        Filter::
        Filter (::XSCRT::XML::Element< ACE_TCHAR >& e)
        : ::XSCRT::Writer< ACE_TCHAR > (e)
        {
        }

        Filter::
        Filter ()
        {
        }

        void Filter::
        traverse (Type const& o)
        {
          Traversal::Filter::traverse (o);
        }

        void Filter::
        name (Type const& o)
        {
          push_ (::XSCRT::XML::Element< ACE_TCHAR > ("name", top_ ()));
          Traversal::Filter::name (o);
          pop_ ();
        }

        void Filter::
        type (Type const& o)
        {
          push_ (::XSCRT::XML::Element< ACE_TCHAR > ("type", top_ ()));
          Traversal::Filter::type (o);
          pop_ ();
        }

        void Filter::
        source_pre (Type const&)
        {
          push_ (::XSCRT::XML::Element< ACE_TCHAR > ("source", top_ ()));
        }

        void Filter::
        source_next (Type const& o)
        {
          source_post (o);
          source_pre (o);
        }

        void Filter::
        source_post (Type const&)
        {
          pop_ ();
        }

        void Filter::
        id (Type const& o)
        {
          ::XSCRT::XML::Attribute< ACE_TCHAR > a ("id", "", top_ ());
          attr_ (&a);
          Traversal::Filter::id (o);
          attr_ (0);
        }

        // MCastSenderDescription
        //
        //

        MCastSenderDescription::
        MCastSenderDescription (::XSCRT::XML::Element< ACE_TCHAR >& e)
        : ::XSCRT::Writer< ACE_TCHAR > (e)
        {
        }

        MCastSenderDescription::
        MCastSenderDescription ()
        {
        }

        void MCastSenderDescription::
        traverse (Type const& o)
        {
          Traversal::MCastSenderDescription::traverse (o);
        }

        void MCastSenderDescription::
        node (Type const& o)
        {
          push_ (::XSCRT::XML::Element< ACE_TCHAR > ("node", top_ ()));
          Traversal::MCastSenderDescription::node (o);
          pop_ ();
        }

        void MCastSenderDescription::
        type (Type const& o)
        {
          push_ (::XSCRT::XML::Element< ACE_TCHAR > ("type", top_ ()));
          Traversal::MCastSenderDescription::type (o);
          pop_ ();
        }

        void MCastSenderDescription::
        svc_cfg_file (Type const& o)
        {
          push_ (::XSCRT::XML::Element< ACE_TCHAR > ("svc_cfg_file", top_ ()));
          Traversal::MCastSenderDescription::svc_cfg_file (o);
          pop_ ();
        }

        void MCastSenderDescription::
        id (Type const& o)
        {
          ::XSCRT::XML::Attribute< ACE_TCHAR > a ("id", "", top_ ());
          attr_ (&a);
          Traversal::MCastSenderDescription::id (o);
          attr_ (0);
        }

        // MCastReceiverDescription
        //
        //

        MCastReceiverDescription::
        MCastReceiverDescription (::XSCRT::XML::Element< ACE_TCHAR >& e)
        : ::XSCRT::Writer< ACE_TCHAR > (e)
        {
        }

        MCastReceiverDescription::
        MCastReceiverDescription ()
        {
        }

        void MCastReceiverDescription::
        traverse (Type const& o)
        {
          Traversal::MCastReceiverDescription::traverse (o);
        }

        void MCastReceiverDescription::
        node (Type const& o)
        {
          push_ (::XSCRT::XML::Element< ACE_TCHAR > ("node", top_ ()));
          Traversal::MCastReceiverDescription::node (o);
          pop_ ();
        }

        void MCastReceiverDescription::
        type (Type const& o)
        {
          push_ (::XSCRT::XML::Element< ACE_TCHAR > ("type", top_ ()));
          Traversal::MCastReceiverDescription::type (o);
          pop_ ();
        }

        void MCastReceiverDescription::
        svc_cfg_file (Type const& o)
        {
          push_ (::XSCRT::XML::Element< ACE_TCHAR > ("svc_cfg_file", top_ ()));
          Traversal::MCastReceiverDescription::svc_cfg_file (o);
          pop_ ();
        }

        void MCastReceiverDescription::
        id (Type const& o)
        {
          ::XSCRT::XML::Attribute< ACE_TCHAR > a ("id", "", top_ ());
          attr_ (&a);
          Traversal::MCastReceiverDescription::id (o);
          attr_ (0);
        }

        // EC_to_MCastSender
        //
        //

        EC_to_MCastSender::
        EC_to_MCastSender (::XSCRT::XML::Element< ACE_TCHAR >& e)
        : ::XSCRT::Writer< ACE_TCHAR > (e)
        {
        }

        EC_to_MCastSender::
        EC_to_MCastSender ()
        {
        }

        void EC_to_MCastSender::
        traverse (Type const& o)
        {
          Traversal::EC_to_MCastSender::traverse (o);
        }

        void EC_to_MCastSender::
        destination (Type const& o)
        {
          push_ (::XSCRT::XML::Element< ACE_TCHAR > ("destination", top_ ()));
          Traversal::EC_to_MCastSender::destination (o);
          pop_ ();
        }

        void EC_to_MCastSender::
        id (Type const& o)
        {
          ::XSCRT::XML::Attribute< ACE_TCHAR > a ("id", "", top_ ());
          attr_ (&a);
          Traversal::EC_to_MCastSender::id (o);
          attr_ (0);
        }

        // MCastReceiver_to_EC
        //
        //

        MCastReceiver_to_EC::
        MCastReceiver_to_EC (::XSCRT::XML::Element< ACE_TCHAR >& e)
        : ::XSCRT::Writer< ACE_TCHAR > (e)
        {
        }

        MCastReceiver_to_EC::
        MCastReceiver_to_EC ()
        {
        }

        void MCastReceiver_to_EC::
        traverse (Type const& o)
        {
          Traversal::MCastReceiver_to_EC::traverse (o);
        }

        void MCastReceiver_to_EC::
        source (Type const& o)
        {
          push_ (::XSCRT::XML::Element< ACE_TCHAR > ("source", top_ ()));
          Traversal::MCastReceiver_to_EC::source (o);
          pop_ ();
        }

        void MCastReceiver_to_EC::
        destination (Type const& o)
        {
          push_ (::XSCRT::XML::Element< ACE_TCHAR > ("destination", top_ ()));
          Traversal::MCastReceiver_to_EC::destination (o);
          pop_ ();
        }

        void MCastReceiver_to_EC::
        id (Type const& o)
        {
          ::XSCRT::XML::Attribute< ACE_TCHAR > a ("id", "", top_ ());
          attr_ (&a);
          Traversal::MCastReceiver_to_EC::id (o);
          attr_ (0);
        }
      }
    }

}

namespace CIAO
{
  namespace Config_Handlers
  {

      void
      CIAOEvents (::CIAO::Config_Handlers::CIAOEventsDef const& s, xercesc::DOMDocument* d)
      {
        ::XSCRT::XML::Element< ACE_TCHAR > e (d->getDocumentElement ());
        if (e.name () != "CIAOEvents")
        {
          throw 1;
        }

        struct W : virtual ::CIAO::Config_Handlers::Writer::CIAOEventsDef,
        virtual ::CIAO::Config_Handlers::Writer::EventServiceDescription,
        virtual ::XMLSchema::Writer::FundamentalType< ::XMLSchema::string< ACE_TCHAR >, ACE_TCHAR >,
        virtual ::CIAO::Config_Handlers::Writer::EventServiceType,
        virtual ::CIAO::Config_Handlers::Writer::Filter,
        virtual ::CIAO::Config_Handlers::Writer::FilterType,
        virtual ::XMLSchema::Writer::FundamentalType< ::XMLSchema::ID< ACE_TCHAR >, ACE_TCHAR >,
        virtual ::XSCRT::Writer< ACE_TCHAR >
        {
          W (::XSCRT::XML::Element< ACE_TCHAR >& e)
          : ::XSCRT::Writer< ACE_TCHAR > (e)
          {
          }
        };

        W w (e);
        w.dispatch (s);
      }
    }

}

