// $Id$

#ifndef HELLO_BASE_IDL
#define HELLO_BASE_IDL

#include "Base/Hello.idl"
#include "tao/Messaging/Messaging.pidl"

module Hello
{
  // Callback interface from AMI-component to Sender component
  local interface AMI_MyFooCallback : ::Messaging::ReplyHandler
  {
    void foo (in long ami_return_val, in string answer);
    void foo_excep   (in Messaging::ExceptionHolder excep_holder);

    void hello (in long ami_return_val);
    void hello_excep   (in Messaging::ExceptionHolder excep_holder);

    void get_rw_attrib (in short ami_return_val);
    void get_rw_attrib_excep (in Messaging::ExceptionHolder excep_holder);

    void set_rw_attrib ();
    void set_rw_attrib_excep (in Messaging::ExceptionHolder excep_holder);

    void get_ro_attrib (in short ami_return_val);
    void get_ro_attrib_excep (in Messaging::ExceptionHolder excep_holder);
  };

  // AMI component. Sender calls AMI-component and AMI-component calls Receiver
  // using the AMI_foo interface.
  // Example of a global reply handler
  local interface AMI_MyFoo
  {
    void sendc_foo (in AMI_MyFooCallback ami_handler, in string in_str);
    void sendc_hello (in AMI_MyFooCallback ami_handler);

    //asynch method for handling attributes
    void sendc_get_rw_attrib (in AMI_MyFooCallback ami_handler);
    void sendc_set_rw_attrib (in AMI_MyFooCallback ami_handler, in short rw_attrib);
    void sendc_get_ro_attrib (in AMI_MyFooCallback ami_handler);
  };
};

#endif /* HELLO_BASE_IDL */
