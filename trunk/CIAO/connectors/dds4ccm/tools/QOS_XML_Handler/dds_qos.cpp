/* $Id$
 * This code was generated by the XML Schema Compiler.
 *
 * Changes made to this code will most likely be overwritten
 * when the handlers are recompiled.
 *
 * If you find errors or feel that there are bugfixes to be made,
 * please contact the current XSC maintainer:
 *             Will Otte <wotte@dre.vanderbilt.edu>
 */
#include "dds_qos.hpp"

namespace dds
{
  // destinationOrderKind
  //

  destinationOrderKind::Value destinationOrderKind::
  integral () const
  {
    return v_;
  }

  bool
  operator== (::dds::destinationOrderKind const& a, ::dds::destinationOrderKind const& b)
  {
    return a.v_ == b.v_;
  }

  bool
  operator!= (::dds::destinationOrderKind const& a, ::dds::destinationOrderKind const& b)
  {
    return a.v_ != b.v_;
  }

  destinationOrderKind::
  destinationOrderKind (destinationOrderKind::Value v)
  : v_ (v)
  {
  }

  // durabilityKind
  //

  durabilityKind::Value durabilityKind::
  integral () const
  {
    return v_;
  }

  bool
  operator== (::dds::durabilityKind const& a, ::dds::durabilityKind const& b)
  {
    return a.v_ == b.v_;
  }

  bool
  operator!= (::dds::durabilityKind const& a, ::dds::durabilityKind const& b)
  {
    return a.v_ != b.v_;
  }

  durabilityKind::
  durabilityKind (durabilityKind::Value v)
  : v_ (v)
  {
  }

  // historyKind
  //

  historyKind::Value historyKind::
  integral () const
  {
    return v_;
  }

  bool
  operator== (::dds::historyKind const& a, ::dds::historyKind const& b)
  {
    return a.v_ == b.v_;
  }

  bool
  operator!= (::dds::historyKind const& a, ::dds::historyKind const& b)
  {
    return a.v_ != b.v_;
  }

  historyKind::
  historyKind (historyKind::Value v)
  : v_ (v)
  {
  }

  // livelinessKind
  //

  livelinessKind::Value livelinessKind::
  integral () const
  {
    return v_;
  }

  bool
  operator== (::dds::livelinessKind const& a, ::dds::livelinessKind const& b)
  {
    return a.v_ == b.v_;
  }

  bool
  operator!= (::dds::livelinessKind const& a, ::dds::livelinessKind const& b)
  {
    return a.v_ != b.v_;
  }

  livelinessKind::
  livelinessKind (livelinessKind::Value v)
  : v_ (v)
  {
  }

  // presentationAccessScopeKind
  //

  presentationAccessScopeKind::Value presentationAccessScopeKind::
  integral () const
  {
    return v_;
  }

  bool
  operator== (::dds::presentationAccessScopeKind const& a, ::dds::presentationAccessScopeKind const& b)
  {
    return a.v_ == b.v_;
  }

  bool
  operator!= (::dds::presentationAccessScopeKind const& a, ::dds::presentationAccessScopeKind const& b)
  {
    return a.v_ != b.v_;
  }

  presentationAccessScopeKind::
  presentationAccessScopeKind (presentationAccessScopeKind::Value v)
  : v_ (v)
  {
  }

  // reliabilityKind
  //

  reliabilityKind::Value reliabilityKind::
  integral () const
  {
    return v_;
  }

  bool
  operator== (::dds::reliabilityKind const& a, ::dds::reliabilityKind const& b)
  {
    return a.v_ == b.v_;
  }

  bool
  operator!= (::dds::reliabilityKind const& a, ::dds::reliabilityKind const& b)
  {
    return a.v_ != b.v_;
  }

  reliabilityKind::
  reliabilityKind (reliabilityKind::Value v)
  : v_ (v)
  {
  }

  // ownershipKind
  //

  ownershipKind::Value ownershipKind::
  integral () const
  {
    return v_;
  }

  bool
  operator== (::dds::ownershipKind const& a, ::dds::ownershipKind const& b)
  {
    return a.v_ == b.v_;
  }

  bool
  operator!= (::dds::ownershipKind const& a, ::dds::ownershipKind const& b)
  {
    return a.v_ != b.v_;
  }

  ownershipKind::
  ownershipKind (ownershipKind::Value v)
  : v_ (v)
  {
  }

  // duration
  //

  duration::
  duration ()
  :
  ::XSCRT::Type (),
  regulator__ ()
  {
  }

  duration::
  duration (duration const& s)
  :
  ::XSCRT::Type (),
  sec_ (s.sec_.get () ? new ::XMLSchema::string< ACE_TCHAR > (*s.sec_) : 0),
  nanosec_ (s.nanosec_.get () ? new ::XMLSchema::string< ACE_TCHAR > (*s.nanosec_) : 0),
  regulator__ ()
  {
    if (sec_.get ()) sec_->container (this);
    if (nanosec_.get ()) nanosec_->container (this);
  }

  duration& duration::
  operator= (duration const& s)
  {
    if (&s != this)
    {
      if (s.sec_.get ())
        sec (*(s.sec_));
      else
        sec_.reset (0);

      if (s.nanosec_.get ())
        nanosec (*(s.nanosec_));
      else
        nanosec_.reset (0);
    }

    return *this;
  }


  // duration
  //
  bool duration::
  sec_p () const
  {
    return sec_.get () != 0;
  }

  ::XMLSchema::string< ACE_TCHAR > const& duration::
  sec () const
  {
    return *sec_;
  }

  void duration::
  sec (::XMLSchema::string< ACE_TCHAR > const& e)
  {
    if (sec_.get ())
    {
      *sec_ = e;
    }

    else
    {
      sec_ = ::std::auto_ptr< ::XMLSchema::string< ACE_TCHAR > > (new ::XMLSchema::string< ACE_TCHAR > (e));
      sec_->container (this);
    }
  }

  // duration
  //
  bool duration::
  nanosec_p () const
  {
    return nanosec_.get () != 0;
  }

  ::XMLSchema::string< ACE_TCHAR > const& duration::
  nanosec () const
  {
    return *nanosec_;
  }

  void duration::
  nanosec (::XMLSchema::string< ACE_TCHAR > const& e)
  {
    if (nanosec_.get ())
    {
      *nanosec_ = e;
    }

    else
    {
      nanosec_ = ::std::auto_ptr< ::XMLSchema::string< ACE_TCHAR > > (new ::XMLSchema::string< ACE_TCHAR > (e));
      nanosec_->container (this);
    }
  }


  // stringSeq
  //

  stringSeq::
  stringSeq ()
  :
  regulator__ ()
  {
  }

  stringSeq::
  stringSeq (stringSeq const& s)
  :
  ::XSCRT::Type (),
  element_ (s.element_),
  regulator__ ()
  {
  }

  stringSeq& stringSeq::
  operator= (stringSeq const& s)
  {
    if (&s != this)
    {
      element_ = s.element_;
    }

    return *this;
  }


  // stringSeq
  //
  stringSeq::element_iterator stringSeq::
  begin_element ()
  {
    return element_.begin ();
  }

  stringSeq::element_iterator stringSeq::
  end_element ()
  {
    return element_.end ();
  }

  stringSeq::element_const_iterator stringSeq::
  begin_element () const
  {
    return element_.begin ();
  }

  stringSeq::element_const_iterator stringSeq::
  end_element () const
  {
    return element_.end ();
  }

  void stringSeq::
  add_element (ACE_Refcounted_Auto_Ptr < ::XMLSchema::string< ACE_TCHAR >, ACE_Null_Mutex >  const& e)
  {
    element_.push_back (e);
  }

  size_t stringSeq::
  count_element(void) const
  {
    return element_.size ();
  }


  // deadlineQosPolicy
  //

  deadlineQosPolicy::
  deadlineQosPolicy ()
  :
  regulator__ ()
  {
  }

  deadlineQosPolicy::
  deadlineQosPolicy (deadlineQosPolicy const& s)
  :
  ::XSCRT::Type (),
  period_ (s.period_.get () ? new ::dds::duration (*s.period_) : 0),
  regulator__ ()
  {
    if (period_.get ()) period_->container (this);
  }

  deadlineQosPolicy& deadlineQosPolicy::
  operator= (deadlineQosPolicy const& s)
  {
    if (&s != this)
    {
      if (s.period_.get ())
        period (*(s.period_));
      else
        period_.reset (0);
    }

    return *this;
  }


  // deadlineQosPolicy
  //
  bool deadlineQosPolicy::
  period_p () const
  {
    return period_.get () != 0;
  }

  ::dds::duration const& deadlineQosPolicy::
  period () const
  {
    return *period_;
  }

  void deadlineQosPolicy::
  period (::dds::duration const& e)
  {
    if (period_.get ())
    {
      *period_ = e;
    }

    else
    {
      period_ = ::std::auto_ptr< ::dds::duration > (new ::dds::duration (e));
      period_->container (this);
    }
  }


  // destinationOrderQosPolicy
  //

  destinationOrderQosPolicy::
  destinationOrderQosPolicy ()
  :
  regulator__ ()
  {
  }

  destinationOrderQosPolicy::
  destinationOrderQosPolicy (destinationOrderQosPolicy const& s)
  :
  ::XSCRT::Type (),
  kind_ (s.kind_.get () ? new ::dds::destinationOrderKind (*s.kind_) : 0),
  regulator__ ()
  {
    if (kind_.get ()) kind_->container (this);
  }

  destinationOrderQosPolicy& destinationOrderQosPolicy::
  operator= (destinationOrderQosPolicy const& s)
  {
    if (&s != this)
    {
      if (s.kind_.get ())
        kind (*(s.kind_));
      else
        kind_.reset (0);
    }

    return *this;
  }


  // destinationOrderQosPolicy
  //
  bool destinationOrderQosPolicy::
  kind_p () const
  {
    return kind_.get () != 0;
  }

  ::dds::destinationOrderKind const& destinationOrderQosPolicy::
  kind () const
  {
    return *kind_;
  }

  void destinationOrderQosPolicy::
  kind (::dds::destinationOrderKind const& e)
  {
    if (kind_.get ())
    {
      *kind_ = e;
    }

    else
    {
      kind_ = ::std::auto_ptr< ::dds::destinationOrderKind > (new ::dds::destinationOrderKind (e));
      kind_->container (this);
    }
  }


  // durabilityQosPolicy
  //

  durabilityQosPolicy::
  durabilityQosPolicy ()
  :
  regulator__ ()
  {
  }

  durabilityQosPolicy::
  durabilityQosPolicy (durabilityQosPolicy const& s)
  :
  ::XSCRT::Type (),
  kind_ (s.kind_.get () ? new ::dds::durabilityKind (*s.kind_) : 0),
  regulator__ ()
  {
    if (kind_.get ()) kind_->container (this);
  }

  durabilityQosPolicy& durabilityQosPolicy::
  operator= (durabilityQosPolicy const& s)
  {
    if (&s != this)
    {
      if (s.kind_.get ())
        kind (*(s.kind_));
      else
        kind_.reset (0);
    }

    return *this;
  }


  // durabilityQosPolicy
  //
  bool durabilityQosPolicy::
  kind_p () const
  {
    return kind_.get () != 0;
  }

  ::dds::durabilityKind const& durabilityQosPolicy::
  kind () const
  {
    return *kind_;
  }

  void durabilityQosPolicy::
  kind (::dds::durabilityKind const& e)
  {
    if (kind_.get ())
    {
      *kind_ = e;
    }

    else
    {
      kind_ = ::std::auto_ptr< ::dds::durabilityKind > (new ::dds::durabilityKind (e));
      kind_->container (this);
    }
  }


  // durabilityServiceQosPolicy
  //

  durabilityServiceQosPolicy::
  durabilityServiceQosPolicy ()
  :
  regulator__ ()
  {
  }

  durabilityServiceQosPolicy::
  durabilityServiceQosPolicy (durabilityServiceQosPolicy const& s)
  :
  ::XSCRT::Type (),
  service_cleanup_delay_ (s.service_cleanup_delay_.get () ? new ::dds::duration (*s.service_cleanup_delay_) : 0),
  history_kind_ (s.history_kind_.get () ? new ::dds::historyKind (*s.history_kind_) : 0),
  history_depth_ (s.history_depth_.get () ? new ::XMLSchema::positiveInteger (*s.history_depth_) : 0),
  max_samples_ (s.max_samples_.get () ? new ::XMLSchema::string< ACE_TCHAR > (*s.max_samples_) : 0),
  max_instances_ (s.max_instances_.get () ? new ::XMLSchema::string< ACE_TCHAR > (*s.max_instances_) : 0),
  max_samples_per_instance_ (s.max_samples_per_instance_.get () ? new ::XMLSchema::string< ACE_TCHAR > (*s.max_samples_per_instance_) : 0),
  regulator__ ()
  {
    if (service_cleanup_delay_.get ()) service_cleanup_delay_->container (this);
    if (history_kind_.get ()) history_kind_->container (this);
    if (history_depth_.get ()) history_depth_->container (this);
    if (max_samples_.get ()) max_samples_->container (this);
    if (max_instances_.get ()) max_instances_->container (this);
    if (max_samples_per_instance_.get ()) max_samples_per_instance_->container (this);
  }

  durabilityServiceQosPolicy& durabilityServiceQosPolicy::
  operator= (durabilityServiceQosPolicy const& s)
  {
    if (&s != this)
    {
      if (s.service_cleanup_delay_.get ())
        service_cleanup_delay (*(s.service_cleanup_delay_));
      else
        service_cleanup_delay_.reset (0);

      if (s.history_kind_.get ())
        history_kind (*(s.history_kind_));
      else
        history_kind_.reset (0);

      if (s.history_depth_.get ())
        history_depth (*(s.history_depth_));
      else
        history_depth_.reset (0);

      if (s.max_samples_.get ())
        max_samples (*(s.max_samples_));
      else
        max_samples_.reset (0);

      if (s.max_instances_.get ())
        max_instances (*(s.max_instances_));
      else
        max_instances_.reset (0);

      if (s.max_samples_per_instance_.get ())
        max_samples_per_instance (*(s.max_samples_per_instance_));
      else
        max_samples_per_instance_.reset (0);
    }

    return *this;
  }


  // durabilityServiceQosPolicy
  //
  bool durabilityServiceQosPolicy::
  service_cleanup_delay_p () const
  {
    return service_cleanup_delay_.get () != 0;
  }

  ::dds::duration const& durabilityServiceQosPolicy::
  service_cleanup_delay () const
  {
    return *service_cleanup_delay_;
  }

  void durabilityServiceQosPolicy::
  service_cleanup_delay (::dds::duration const& e)
  {
    if (service_cleanup_delay_.get ())
    {
      *service_cleanup_delay_ = e;
    }

    else
    {
      service_cleanup_delay_ = ::std::auto_ptr< ::dds::duration > (new ::dds::duration (e));
      service_cleanup_delay_->container (this);
    }
  }

  // durabilityServiceQosPolicy
  //
  bool durabilityServiceQosPolicy::
  history_kind_p () const
  {
    return history_kind_.get () != 0;
  }

  ::dds::historyKind const& durabilityServiceQosPolicy::
  history_kind () const
  {
    return *history_kind_;
  }

  void durabilityServiceQosPolicy::
  history_kind (::dds::historyKind const& e)
  {
    if (history_kind_.get ())
    {
      *history_kind_ = e;
    }

    else
    {
      history_kind_ = ::std::auto_ptr< ::dds::historyKind > (new ::dds::historyKind (e));
      history_kind_->container (this);
    }
  }

  // durabilityServiceQosPolicy
  //
  bool durabilityServiceQosPolicy::
  history_depth_p () const
  {
    return history_depth_.get () != 0;
  }

  ::XMLSchema::positiveInteger const& durabilityServiceQosPolicy::
  history_depth () const
  {
    return *history_depth_;
  }

  void durabilityServiceQosPolicy::
  history_depth (::XMLSchema::positiveInteger const& e)
  {
    if (history_depth_.get ())
    {
      *history_depth_ = e;
    }

    else
    {
      history_depth_ = ::std::auto_ptr< ::XMLSchema::positiveInteger > (new ::XMLSchema::positiveInteger (e));
      history_depth_->container (this);
    }
  }

  // durabilityServiceQosPolicy
  //
  bool durabilityServiceQosPolicy::
  max_samples_p () const
  {
    return max_samples_.get () != 0;
  }

  ::XMLSchema::string< ACE_TCHAR > const& durabilityServiceQosPolicy::
  max_samples () const
  {
    return *max_samples_;
  }

  void durabilityServiceQosPolicy::
  max_samples (::XMLSchema::string< ACE_TCHAR > const& e)
  {
    if (max_samples_.get ())
    {
      *max_samples_ = e;
    }

    else
    {
      max_samples_ = ::std::auto_ptr< ::XMLSchema::string< ACE_TCHAR > > (new ::XMLSchema::string< ACE_TCHAR > (e));
      max_samples_->container (this);
    }
  }

  // durabilityServiceQosPolicy
  //
  bool durabilityServiceQosPolicy::
  max_instances_p () const
  {
    return max_instances_.get () != 0;
  }

  ::XMLSchema::string< ACE_TCHAR > const& durabilityServiceQosPolicy::
  max_instances () const
  {
    return *max_instances_;
  }

  void durabilityServiceQosPolicy::
  max_instances (::XMLSchema::string< ACE_TCHAR > const& e)
  {
    if (max_instances_.get ())
    {
      *max_instances_ = e;
    }

    else
    {
      max_instances_ = ::std::auto_ptr< ::XMLSchema::string< ACE_TCHAR > > (new ::XMLSchema::string< ACE_TCHAR > (e));
      max_instances_->container (this);
    }
  }

  // durabilityServiceQosPolicy
  //
  bool durabilityServiceQosPolicy::
  max_samples_per_instance_p () const
  {
    return max_samples_per_instance_.get () != 0;
  }

  ::XMLSchema::string< ACE_TCHAR > const& durabilityServiceQosPolicy::
  max_samples_per_instance () const
  {
    return *max_samples_per_instance_;
  }

  void durabilityServiceQosPolicy::
  max_samples_per_instance (::XMLSchema::string< ACE_TCHAR > const& e)
  {
    if (max_samples_per_instance_.get ())
    {
      *max_samples_per_instance_ = e;
    }

    else
    {
      max_samples_per_instance_ = ::std::auto_ptr< ::XMLSchema::string< ACE_TCHAR > > (new ::XMLSchema::string< ACE_TCHAR > (e));
      max_samples_per_instance_->container (this);
    }
  }


  // entityFactoryQosPolicy
  //

  entityFactoryQosPolicy::
  entityFactoryQosPolicy ()
  :
  regulator__ ()
  {
  }

  entityFactoryQosPolicy::
  entityFactoryQosPolicy (entityFactoryQosPolicy const& s)
  :
  ::XSCRT::Type (),
  autoenable_created_entities_ (s.autoenable_created_entities_.get () ? new ::XMLSchema::boolean (*s.autoenable_created_entities_) : 0),
  regulator__ ()
  {
    if (autoenable_created_entities_.get ()) autoenable_created_entities_->container (this);
  }

  entityFactoryQosPolicy& entityFactoryQosPolicy::
  operator= (entityFactoryQosPolicy const& s)
  {
    if (&s != this)
    {
      if (s.autoenable_created_entities_.get ())
        autoenable_created_entities (*(s.autoenable_created_entities_));
      else
        autoenable_created_entities_.reset (0);
    }

    return *this;
  }


  // entityFactoryQosPolicy
  //
  bool entityFactoryQosPolicy::
  autoenable_created_entities_p () const
  {
    return autoenable_created_entities_.get () != 0;
  }

  ::XMLSchema::boolean const& entityFactoryQosPolicy::
  autoenable_created_entities () const
  {
    return *autoenable_created_entities_;
  }

  void entityFactoryQosPolicy::
  autoenable_created_entities (::XMLSchema::boolean const& e)
  {
    if (autoenable_created_entities_.get ())
    {
      *autoenable_created_entities_ = e;
    }

    else
    {
      autoenable_created_entities_ = ::std::auto_ptr< ::XMLSchema::boolean > (new ::XMLSchema::boolean (e));
      autoenable_created_entities_->container (this);
    }
  }


  // groupDataQosPolicy
  //

  groupDataQosPolicy::
  groupDataQosPolicy ()
  :
  regulator__ ()
  {
  }

  groupDataQosPolicy::
  groupDataQosPolicy (groupDataQosPolicy const& s)
  :
  ::XSCRT::Type (),
  value_ (s.value_.get () ? new ::XMLSchema::string< ACE_TCHAR > (*s.value_) : 0),
  regulator__ ()
  {
    if (value_.get ()) value_->container (this);
  }

  groupDataQosPolicy& groupDataQosPolicy::
  operator= (groupDataQosPolicy const& s)
  {
    if (&s != this)
    {
      if (s.value_.get ())
        value (*(s.value_));
      else
        value_.reset (0);
    }

    return *this;
  }


  // groupDataQosPolicy
  //
  bool groupDataQosPolicy::
  value_p () const
  {
    return value_.get () != 0;
  }

  ::XMLSchema::string< ACE_TCHAR > const& groupDataQosPolicy::
  value () const
  {
    return *value_;
  }

  void groupDataQosPolicy::
  value (::XMLSchema::string< ACE_TCHAR > const& e)
  {
    if (value_.get ())
    {
      *value_ = e;
    }

    else
    {
      value_ = ::std::auto_ptr< ::XMLSchema::string< ACE_TCHAR > > (new ::XMLSchema::string< ACE_TCHAR > (e));
      value_->container (this);
    }
  }


  // historyQosPolicy
  //

  historyQosPolicy::
  historyQosPolicy ()
  :
  regulator__ ()
  {
  }

  historyQosPolicy::
  historyQosPolicy (historyQosPolicy const& s)
  :
  ::XSCRT::Type (),
  kind_ (s.kind_.get () ? new ::dds::historyKind (*s.kind_) : 0),
  depth_ (s.depth_.get () ? new ::XMLSchema::positiveInteger (*s.depth_) : 0),
  regulator__ ()
  {
    if (kind_.get ()) kind_->container (this);
    if (depth_.get ()) depth_->container (this);
  }

  historyQosPolicy& historyQosPolicy::
  operator= (historyQosPolicy const& s)
  {
    if (&s != this)
    {
      if (s.kind_.get ())
        kind (*(s.kind_));
      else
        kind_.reset (0);

      if (s.depth_.get ())
        depth (*(s.depth_));
      else
        depth_.reset (0);
    }

    return *this;
  }


  // historyQosPolicy
  //
  bool historyQosPolicy::
  kind_p () const
  {
    return kind_.get () != 0;
  }

  ::dds::historyKind const& historyQosPolicy::
  kind () const
  {
    return *kind_;
  }

  void historyQosPolicy::
  kind (::dds::historyKind const& e)
  {
    if (kind_.get ())
    {
      *kind_ = e;
    }

    else
    {
      kind_ = ::std::auto_ptr< ::dds::historyKind > (new ::dds::historyKind (e));
      kind_->container (this);
    }
  }

  // historyQosPolicy
  //
  bool historyQosPolicy::
  depth_p () const
  {
    return depth_.get () != 0;
  }

  ::XMLSchema::positiveInteger const& historyQosPolicy::
  depth () const
  {
    return *depth_;
  }

  void historyQosPolicy::
  depth (::XMLSchema::positiveInteger const& e)
  {
    if (depth_.get ())
    {
      *depth_ = e;
    }

    else
    {
      depth_ = ::std::auto_ptr< ::XMLSchema::positiveInteger > (new ::XMLSchema::positiveInteger (e));
      depth_->container (this);
    }
  }


  // latencyBudgetQosPolicy
  //

  latencyBudgetQosPolicy::
  latencyBudgetQosPolicy ()
  :
  regulator__ ()
  {
  }

  latencyBudgetQosPolicy::
  latencyBudgetQosPolicy (latencyBudgetQosPolicy const& s)
  :
  ::XSCRT::Type (),
  duration_ (s.duration_.get () ? new ::dds::duration (*s.duration_) : 0),
  regulator__ ()
  {
    if (duration_.get ()) duration_->container (this);
  }

  latencyBudgetQosPolicy& latencyBudgetQosPolicy::
  operator= (latencyBudgetQosPolicy const& s)
  {
    if (&s != this)
    {
      if (s.duration_.get ())
        duration (*(s.duration_));
      else
        duration_.reset (0);
    }

    return *this;
  }


  // latencyBudgetQosPolicy
  //
  bool latencyBudgetQosPolicy::
  duration_p () const
  {
    return duration_.get () != 0;
  }

  ::dds::duration const& latencyBudgetQosPolicy::
  duration () const
  {
    return *duration_;
  }

  void latencyBudgetQosPolicy::
  duration (::dds::duration const& e)
  {
    if (duration_.get ())
    {
      *duration_ = e;
    }

    else
    {
      duration_ = ::std::auto_ptr< ::dds::duration > (new ::dds::duration (e));
      duration_->container (this);
    }
  }


  // lifespanQosPolicy
  //

  lifespanQosPolicy::
  lifespanQosPolicy ()
  :
  regulator__ ()
  {
  }

  lifespanQosPolicy::
  lifespanQosPolicy (lifespanQosPolicy const& s)
  :
  ::XSCRT::Type (),
  duration_ (s.duration_.get () ? new ::dds::duration (*s.duration_) : 0),
  regulator__ ()
  {
    if (duration_.get ()) duration_->container (this);
  }

  lifespanQosPolicy& lifespanQosPolicy::
  operator= (lifespanQosPolicy const& s)
  {
    if (&s != this)
    {
      if (s.duration_.get ())
        duration (*(s.duration_));
      else
        duration_.reset (0);
    }

    return *this;
  }


  // lifespanQosPolicy
  //
  bool lifespanQosPolicy::
  duration_p () const
  {
    return duration_.get () != 0;
  }

  ::dds::duration const& lifespanQosPolicy::
  duration () const
  {
    return *duration_;
  }

  void lifespanQosPolicy::
  duration (::dds::duration const& e)
  {
    if (duration_.get ())
    {
      *duration_ = e;
    }

    else
    {
      duration_ = ::std::auto_ptr< ::dds::duration > (new ::dds::duration (e));
      duration_->container (this);
    }
  }


  // livelinessQosPolicy
  //

  livelinessQosPolicy::
  livelinessQosPolicy ()
  :
  regulator__ ()
  {
  }

  livelinessQosPolicy::
  livelinessQosPolicy (livelinessQosPolicy const& s)
  :
  ::XSCRT::Type (),
  kind_ (s.kind_.get () ? new ::dds::livelinessKind (*s.kind_) : 0),
  lease_duration_ (s.lease_duration_.get () ? new ::dds::duration (*s.lease_duration_) : 0),
  regulator__ ()
  {
    if (kind_.get ()) kind_->container (this);
    if (lease_duration_.get ()) lease_duration_->container (this);
  }

  livelinessQosPolicy& livelinessQosPolicy::
  operator= (livelinessQosPolicy const& s)
  {
    if (&s != this)
    {
      if (s.kind_.get ())
        kind (*(s.kind_));
      else
        kind_.reset (0);

      if (s.lease_duration_.get ())
        lease_duration (*(s.lease_duration_));
      else
        lease_duration_.reset (0);
    }

    return *this;
  }


  // livelinessQosPolicy
  //
  bool livelinessQosPolicy::
  kind_p () const
  {
    return kind_.get () != 0;
  }

  ::dds::livelinessKind const& livelinessQosPolicy::
  kind () const
  {
    return *kind_;
  }

  void livelinessQosPolicy::
  kind (::dds::livelinessKind const& e)
  {
    if (kind_.get ())
    {
      *kind_ = e;
    }

    else
    {
      kind_ = ::std::auto_ptr< ::dds::livelinessKind > (new ::dds::livelinessKind (e));
      kind_->container (this);
    }
  }

  // livelinessQosPolicy
  //
  bool livelinessQosPolicy::
  lease_duration_p () const
  {
    return lease_duration_.get () != 0;
  }

  ::dds::duration const& livelinessQosPolicy::
  lease_duration () const
  {
    return *lease_duration_;
  }

  void livelinessQosPolicy::
  lease_duration (::dds::duration const& e)
  {
    if (lease_duration_.get ())
    {
      *lease_duration_ = e;
    }

    else
    {
      lease_duration_ = ::std::auto_ptr< ::dds::duration > (new ::dds::duration (e));
      lease_duration_->container (this);
    }
  }


  // ownershipQosPolicy
  //

  ownershipQosPolicy::
  ownershipQosPolicy ()
  :
  regulator__ ()
  {
  }

  ownershipQosPolicy::
  ownershipQosPolicy (ownershipQosPolicy const& s)
  :
  ::XSCRT::Type (),
  kind_ (s.kind_.get () ? new ::dds::ownershipKind (*s.kind_) : 0),
  regulator__ ()
  {
    if (kind_.get ()) kind_->container (this);
  }

  ownershipQosPolicy& ownershipQosPolicy::
  operator= (ownershipQosPolicy const& s)
  {
    if (&s != this)
    {
      if (s.kind_.get ())
        kind (*(s.kind_));
      else
        kind_.reset (0);
    }

    return *this;
  }


  // ownershipQosPolicy
  //
  bool ownershipQosPolicy::
  kind_p () const
  {
    return kind_.get () != 0;
  }

  ::dds::ownershipKind const& ownershipQosPolicy::
  kind () const
  {
    return *kind_;
  }

  void ownershipQosPolicy::
  kind (::dds::ownershipKind const& e)
  {
    if (kind_.get ())
    {
      *kind_ = e;
    }

    else
    {
      kind_ = ::std::auto_ptr< ::dds::ownershipKind > (new ::dds::ownershipKind (e));
      kind_->container (this);
    }
  }


  // ownershipStrengthQosPolicy
  //

  ownershipStrengthQosPolicy::
  ownershipStrengthQosPolicy ()
  :
  regulator__ ()
  {
  }

  ownershipStrengthQosPolicy::
  ownershipStrengthQosPolicy (ownershipStrengthQosPolicy const& s)
  :
  ::XSCRT::Type (),
  value_ (s.value_.get () ? new ::XMLSchema::nonNegativeInteger (*s.value_) : 0),
  regulator__ ()
  {
    if (value_.get ()) value_->container (this);
  }

  ownershipStrengthQosPolicy& ownershipStrengthQosPolicy::
  operator= (ownershipStrengthQosPolicy const& s)
  {
    if (&s != this)
    {
      if (s.value_.get ())
        value (*(s.value_));
      else
        value_.reset (0);
    }

    return *this;
  }


  // ownershipStrengthQosPolicy
  //
  bool ownershipStrengthQosPolicy::
  value_p () const
  {
    return value_.get () != 0;
  }

  ::XMLSchema::nonNegativeInteger const& ownershipStrengthQosPolicy::
  value () const
  {
    return *value_;
  }

  void ownershipStrengthQosPolicy::
  value (::XMLSchema::nonNegativeInteger const& e)
  {
    if (value_.get ())
    {
      *value_ = e;
    }

    else
    {
      value_ = ::std::auto_ptr< ::XMLSchema::nonNegativeInteger > (new ::XMLSchema::nonNegativeInteger (e));
      value_->container (this);
    }
  }


  // partitionQosPolicy
  //

  partitionQosPolicy::
  partitionQosPolicy ()
  :
  regulator__ ()
  {
  }

  partitionQosPolicy::
  partitionQosPolicy (partitionQosPolicy const& s)
  :
  ::XSCRT::Type (),
  name_ (s.name_.get () ? new ::dds::stringSeq (*s.name_) : 0),
  regulator__ ()
  {
    if (name_.get ()) name_->container (this);
  }

  partitionQosPolicy& partitionQosPolicy::
  operator= (partitionQosPolicy const& s)
  {
    if (&s != this)
    {
      if (s.name_.get ())
        name (*(s.name_));
      else
        name_.reset (0);
    }

    return *this;
  }


  // partitionQosPolicy
  //
  bool partitionQosPolicy::
  name_p () const
  {
    return name_.get () != 0;
  }

  ::dds::stringSeq const& partitionQosPolicy::
  name () const
  {
    return *name_;
  }

  void partitionQosPolicy::
  name (::dds::stringSeq const& e)
  {
    if (name_.get ())
    {
      *name_ = e;
    }

    else
    {
      name_ = ::std::auto_ptr< ::dds::stringSeq > (new ::dds::stringSeq (e));
      name_->container (this);
    }
  }


  // presentationQosPolicy
  //

  presentationQosPolicy::
  presentationQosPolicy ()
  :
  regulator__ ()
  {
  }

  presentationQosPolicy::
  presentationQosPolicy (presentationQosPolicy const& s)
  :
  ::XSCRT::Type (),
  access_scope_ (s.access_scope_.get () ? new ::dds::presentationAccessScopeKind (*s.access_scope_) : 0),
  coherent_access_ (s.coherent_access_.get () ? new ::XMLSchema::boolean (*s.coherent_access_) : 0),
  ordered_access_ (s.ordered_access_.get () ? new ::XMLSchema::boolean (*s.ordered_access_) : 0),
  regulator__ ()
  {
    if (access_scope_.get ()) access_scope_->container (this);
    if (coherent_access_.get ()) coherent_access_->container (this);
    if (ordered_access_.get ()) ordered_access_->container (this);
  }

  presentationQosPolicy& presentationQosPolicy::
  operator= (presentationQosPolicy const& s)
  {
    if (&s != this)
    {
      if (s.access_scope_.get ())
        access_scope (*(s.access_scope_));
      else
        access_scope_.reset (0);

      if (s.coherent_access_.get ())
        coherent_access (*(s.coherent_access_));
      else
        coherent_access_.reset (0);

      if (s.ordered_access_.get ())
        ordered_access (*(s.ordered_access_));
      else
        ordered_access_.reset (0);
    }

    return *this;
  }


  // presentationQosPolicy
  //
  bool presentationQosPolicy::
  access_scope_p () const
  {
    return access_scope_.get () != 0;
  }

  ::dds::presentationAccessScopeKind const& presentationQosPolicy::
  access_scope () const
  {
    return *access_scope_;
  }

  void presentationQosPolicy::
  access_scope (::dds::presentationAccessScopeKind const& e)
  {
    if (access_scope_.get ())
    {
      *access_scope_ = e;
    }

    else
    {
      access_scope_ = ::std::auto_ptr< ::dds::presentationAccessScopeKind > (new ::dds::presentationAccessScopeKind (e));
      access_scope_->container (this);
    }
  }

  // presentationQosPolicy
  //
  bool presentationQosPolicy::
  coherent_access_p () const
  {
    return coherent_access_.get () != 0;
  }

  ::XMLSchema::boolean const& presentationQosPolicy::
  coherent_access () const
  {
    return *coherent_access_;
  }

  void presentationQosPolicy::
  coherent_access (::XMLSchema::boolean const& e)
  {
    if (coherent_access_.get ())
    {
      *coherent_access_ = e;
    }

    else
    {
      coherent_access_ = ::std::auto_ptr< ::XMLSchema::boolean > (new ::XMLSchema::boolean (e));
      coherent_access_->container (this);
    }
  }

  // presentationQosPolicy
  //
  bool presentationQosPolicy::
  ordered_access_p () const
  {
    return ordered_access_.get () != 0;
  }

  ::XMLSchema::boolean const& presentationQosPolicy::
  ordered_access () const
  {
    return *ordered_access_;
  }

  void presentationQosPolicy::
  ordered_access (::XMLSchema::boolean const& e)
  {
    if (ordered_access_.get ())
    {
      *ordered_access_ = e;
    }

    else
    {
      ordered_access_ = ::std::auto_ptr< ::XMLSchema::boolean > (new ::XMLSchema::boolean (e));
      ordered_access_->container (this);
    }
  }


  // readerDataLifecycleQosPolicy
  //

  readerDataLifecycleQosPolicy::
  readerDataLifecycleQosPolicy ()
  :
  regulator__ ()
  {
  }

  readerDataLifecycleQosPolicy::
  readerDataLifecycleQosPolicy (readerDataLifecycleQosPolicy const& s)
  :
  ::XSCRT::Type (),
  autopurge_nowriter_samples_delay_ (s.autopurge_nowriter_samples_delay_.get () ? new ::dds::duration (*s.autopurge_nowriter_samples_delay_) : 0),
  autopurge_disposed_samples_delay_ (s.autopurge_disposed_samples_delay_.get () ? new ::dds::duration (*s.autopurge_disposed_samples_delay_) : 0),
  regulator__ ()
  {
    if (autopurge_nowriter_samples_delay_.get ()) autopurge_nowriter_samples_delay_->container (this);
    if (autopurge_disposed_samples_delay_.get ()) autopurge_disposed_samples_delay_->container (this);
  }

  readerDataLifecycleQosPolicy& readerDataLifecycleQosPolicy::
  operator= (readerDataLifecycleQosPolicy const& s)
  {
    if (&s != this)
    {
      if (s.autopurge_nowriter_samples_delay_.get ())
        autopurge_nowriter_samples_delay (*(s.autopurge_nowriter_samples_delay_));
      else
        autopurge_nowriter_samples_delay_.reset (0);

      if (s.autopurge_disposed_samples_delay_.get ())
        autopurge_disposed_samples_delay (*(s.autopurge_disposed_samples_delay_));
      else
        autopurge_disposed_samples_delay_.reset (0);
    }

    return *this;
  }


  // readerDataLifecycleQosPolicy
  //
  bool readerDataLifecycleQosPolicy::
  autopurge_nowriter_samples_delay_p () const
  {
    return autopurge_nowriter_samples_delay_.get () != 0;
  }

  ::dds::duration const& readerDataLifecycleQosPolicy::
  autopurge_nowriter_samples_delay () const
  {
    return *autopurge_nowriter_samples_delay_;
  }

  void readerDataLifecycleQosPolicy::
  autopurge_nowriter_samples_delay (::dds::duration const& e)
  {
    if (autopurge_nowriter_samples_delay_.get ())
    {
      *autopurge_nowriter_samples_delay_ = e;
    }

    else
    {
      autopurge_nowriter_samples_delay_ = ::std::auto_ptr< ::dds::duration > (new ::dds::duration (e));
      autopurge_nowriter_samples_delay_->container (this);
    }
  }

  // readerDataLifecycleQosPolicy
  //
  bool readerDataLifecycleQosPolicy::
  autopurge_disposed_samples_delay_p () const
  {
    return autopurge_disposed_samples_delay_.get () != 0;
  }

  ::dds::duration const& readerDataLifecycleQosPolicy::
  autopurge_disposed_samples_delay () const
  {
    return *autopurge_disposed_samples_delay_;
  }

  void readerDataLifecycleQosPolicy::
  autopurge_disposed_samples_delay (::dds::duration const& e)
  {
    if (autopurge_disposed_samples_delay_.get ())
    {
      *autopurge_disposed_samples_delay_ = e;
    }

    else
    {
      autopurge_disposed_samples_delay_ = ::std::auto_ptr< ::dds::duration > (new ::dds::duration (e));
      autopurge_disposed_samples_delay_->container (this);
    }
  }


  // reliabilityQosPolicy
  //

  reliabilityQosPolicy::
  reliabilityQosPolicy ()
  :
  regulator__ ()
  {
  }

  reliabilityQosPolicy::
  reliabilityQosPolicy (reliabilityQosPolicy const& s)
  :
  ::XSCRT::Type (),
  kind_ (s.kind_.get () ? new ::dds::reliabilityKind (*s.kind_) : 0),
  max_blocking_time_ (s.max_blocking_time_.get () ? new ::dds::duration (*s.max_blocking_time_) : 0),
  regulator__ ()
  {
    if (kind_.get ()) kind_->container (this);
    if (max_blocking_time_.get ()) max_blocking_time_->container (this);
  }

  reliabilityQosPolicy& reliabilityQosPolicy::
  operator= (reliabilityQosPolicy const& s)
  {
    if (&s != this)
    {
      if (s.kind_.get ())
        kind (*(s.kind_));
      else
        kind_.reset (0);

      if (s.max_blocking_time_.get ())
        max_blocking_time (*(s.max_blocking_time_));
      else
        max_blocking_time_.reset (0);
    }

    return *this;
  }


  // reliabilityQosPolicy
  //
  bool reliabilityQosPolicy::
  kind_p () const
  {
    return kind_.get () != 0;
  }

  ::dds::reliabilityKind const& reliabilityQosPolicy::
  kind () const
  {
    return *kind_;
  }

  void reliabilityQosPolicy::
  kind (::dds::reliabilityKind const& e)
  {
    if (kind_.get ())
    {
      *kind_ = e;
    }

    else
    {
      kind_ = ::std::auto_ptr< ::dds::reliabilityKind > (new ::dds::reliabilityKind (e));
      kind_->container (this);
    }
  }

  // reliabilityQosPolicy
  //
  bool reliabilityQosPolicy::
  max_blocking_time_p () const
  {
    return max_blocking_time_.get () != 0;
  }

  ::dds::duration const& reliabilityQosPolicy::
  max_blocking_time () const
  {
    return *max_blocking_time_;
  }

  void reliabilityQosPolicy::
  max_blocking_time (::dds::duration const& e)
  {
    if (max_blocking_time_.get ())
    {
      *max_blocking_time_ = e;
    }

    else
    {
      max_blocking_time_ = ::std::auto_ptr< ::dds::duration > (new ::dds::duration (e));
      max_blocking_time_->container (this);
    }
  }


  // resourceLimitsQosPolicy
  //

  resourceLimitsQosPolicy::
  resourceLimitsQosPolicy ()
  :
  regulator__ ()
  {
  }

  resourceLimitsQosPolicy::
  resourceLimitsQosPolicy (resourceLimitsQosPolicy const& s)
  :
  ::XSCRT::Type (),
  max_samples_ (s.max_samples_.get () ? new ::XMLSchema::string< ACE_TCHAR > (*s.max_samples_) : 0),
  max_instances_ (s.max_instances_.get () ? new ::XMLSchema::string< ACE_TCHAR > (*s.max_instances_) : 0),
  max_samples_per_instance_ (s.max_samples_per_instance_.get () ? new ::XMLSchema::string< ACE_TCHAR > (*s.max_samples_per_instance_) : 0),
  initial_samples_ (s.initial_samples_.get () ? new ::XMLSchema::positiveInteger (*s.initial_samples_) : 0),
  initial_instances_ (s.initial_instances_.get () ? new ::XMLSchema::positiveInteger (*s.initial_instances_) : 0),
  regulator__ ()
  {
    if (max_samples_.get ()) max_samples_->container (this);
    if (max_instances_.get ()) max_instances_->container (this);
    if (max_samples_per_instance_.get ()) max_samples_per_instance_->container (this);
    if (initial_samples_.get ()) initial_samples_->container (this);
    if (initial_instances_.get ()) initial_instances_->container (this);
  }

  resourceLimitsQosPolicy& resourceLimitsQosPolicy::
  operator= (resourceLimitsQosPolicy const& s)
  {
    if (&s != this)
    {
      if (s.max_samples_.get ())
        max_samples (*(s.max_samples_));
      else
        max_samples_.reset (0);

      if (s.max_instances_.get ())
        max_instances (*(s.max_instances_));
      else
        max_instances_.reset (0);

      if (s.max_samples_per_instance_.get ())
        max_samples_per_instance (*(s.max_samples_per_instance_));
      else
        max_samples_per_instance_.reset (0);

      if (s.initial_samples_.get ())
        initial_samples (*(s.initial_samples_));
      else
        initial_samples_.reset (0);

      if (s.initial_instances_.get ())
        initial_instances (*(s.initial_instances_));
      else
        initial_instances_.reset (0);
    }

    return *this;
  }


  // resourceLimitsQosPolicy
  //
  bool resourceLimitsQosPolicy::
  max_samples_p () const
  {
    return max_samples_.get () != 0;
  }

  ::XMLSchema::string< ACE_TCHAR > const& resourceLimitsQosPolicy::
  max_samples () const
  {
    return *max_samples_;
  }

  void resourceLimitsQosPolicy::
  max_samples (::XMLSchema::string< ACE_TCHAR > const& e)
  {
    if (max_samples_.get ())
    {
      *max_samples_ = e;
    }

    else
    {
      max_samples_ = ::std::auto_ptr< ::XMLSchema::string< ACE_TCHAR > > (new ::XMLSchema::string< ACE_TCHAR > (e));
      max_samples_->container (this);
    }
  }

  // resourceLimitsQosPolicy
  //
  bool resourceLimitsQosPolicy::
  max_instances_p () const
  {
    return max_instances_.get () != 0;
  }

  ::XMLSchema::string< ACE_TCHAR > const& resourceLimitsQosPolicy::
  max_instances () const
  {
    return *max_instances_;
  }

  void resourceLimitsQosPolicy::
  max_instances (::XMLSchema::string< ACE_TCHAR > const& e)
  {
    if (max_instances_.get ())
    {
      *max_instances_ = e;
    }

    else
    {
      max_instances_ = ::std::auto_ptr< ::XMLSchema::string< ACE_TCHAR > > (new ::XMLSchema::string< ACE_TCHAR > (e));
      max_instances_->container (this);
    }
  }

  // resourceLimitsQosPolicy
  //
  bool resourceLimitsQosPolicy::
  max_samples_per_instance_p () const
  {
    return max_samples_per_instance_.get () != 0;
  }

  ::XMLSchema::string< ACE_TCHAR > const& resourceLimitsQosPolicy::
  max_samples_per_instance () const
  {
    return *max_samples_per_instance_;
  }

  void resourceLimitsQosPolicy::
  max_samples_per_instance (::XMLSchema::string< ACE_TCHAR > const& e)
  {
    if (max_samples_per_instance_.get ())
    {
      *max_samples_per_instance_ = e;
    }

    else
    {
      max_samples_per_instance_ = ::std::auto_ptr< ::XMLSchema::string< ACE_TCHAR > > (new ::XMLSchema::string< ACE_TCHAR > (e));
      max_samples_per_instance_->container (this);
    }
  }

  // resourceLimitsQosPolicy
  //
  bool resourceLimitsQosPolicy::
  initial_samples_p () const
  {
    return initial_samples_.get () != 0;
  }

  ::XMLSchema::positiveInteger const& resourceLimitsQosPolicy::
  initial_samples () const
  {
    return *initial_samples_;
  }

  void resourceLimitsQosPolicy::
  initial_samples (::XMLSchema::positiveInteger const& e)
  {
    if (initial_samples_.get ())
    {
      *initial_samples_ = e;
    }

    else
    {
      initial_samples_ = ::std::auto_ptr< ::XMLSchema::positiveInteger > (new ::XMLSchema::positiveInteger (e));
      initial_samples_->container (this);
    }
  }

  // resourceLimitsQosPolicy
  //
  bool resourceLimitsQosPolicy::
  initial_instances_p () const
  {
    return initial_instances_.get () != 0;
  }

  ::XMLSchema::positiveInteger const& resourceLimitsQosPolicy::
  initial_instances () const
  {
    return *initial_instances_;
  }

  void resourceLimitsQosPolicy::
  initial_instances (::XMLSchema::positiveInteger const& e)
  {
    if (initial_instances_.get ())
    {
      *initial_instances_ = e;
    }

    else
    {
      initial_instances_ = ::std::auto_ptr< ::XMLSchema::positiveInteger > (new ::XMLSchema::positiveInteger (e));
      initial_instances_->container (this);
    }
  }


  // timeBasedFilterQosPolicy
  //

  timeBasedFilterQosPolicy::
  timeBasedFilterQosPolicy ()
  :
  regulator__ ()
  {
  }

  timeBasedFilterQosPolicy::
  timeBasedFilterQosPolicy (timeBasedFilterQosPolicy const& s)
  :
  ::XSCRT::Type (),
  minimum_separation_ (s.minimum_separation_.get () ? new ::dds::duration (*s.minimum_separation_) : 0),
  regulator__ ()
  {
    if (minimum_separation_.get ()) minimum_separation_->container (this);
  }

  timeBasedFilterQosPolicy& timeBasedFilterQosPolicy::
  operator= (timeBasedFilterQosPolicy const& s)
  {
    if (&s != this)
    {
      if (s.minimum_separation_.get ())
        minimum_separation (*(s.minimum_separation_));
      else
        minimum_separation_.reset (0);
    }

    return *this;
  }


  // timeBasedFilterQosPolicy
  //
  bool timeBasedFilterQosPolicy::
  minimum_separation_p () const
  {
    return minimum_separation_.get () != 0;
  }

  ::dds::duration const& timeBasedFilterQosPolicy::
  minimum_separation () const
  {
    return *minimum_separation_;
  }

  void timeBasedFilterQosPolicy::
  minimum_separation (::dds::duration const& e)
  {
    if (minimum_separation_.get ())
    {
      *minimum_separation_ = e;
    }

    else
    {
      minimum_separation_ = ::std::auto_ptr< ::dds::duration > (new ::dds::duration (e));
      minimum_separation_->container (this);
    }
  }


  // topicDataQosPolicy
  //

  topicDataQosPolicy::
  topicDataQosPolicy ()
  :
  regulator__ ()
  {
  }

  topicDataQosPolicy::
  topicDataQosPolicy (topicDataQosPolicy const& s)
  :
  ::XSCRT::Type (),
  value_ (s.value_.get () ? new ::XMLSchema::string< ACE_TCHAR > (*s.value_) : 0),
  regulator__ ()
  {
    if (value_.get ()) value_->container (this);
  }

  topicDataQosPolicy& topicDataQosPolicy::
  operator= (topicDataQosPolicy const& s)
  {
    if (&s != this)
    {
      if (s.value_.get ())
        value (*(s.value_));
      else
        value_.reset (0);
    }

    return *this;
  }


  // topicDataQosPolicy
  //
  bool topicDataQosPolicy::
  value_p () const
  {
    return value_.get () != 0;
  }

  ::XMLSchema::string< ACE_TCHAR > const& topicDataQosPolicy::
  value () const
  {
    return *value_;
  }

  void topicDataQosPolicy::
  value (::XMLSchema::string< ACE_TCHAR > const& e)
  {
    if (value_.get ())
    {
      *value_ = e;
    }

    else
    {
      value_ = ::std::auto_ptr< ::XMLSchema::string< ACE_TCHAR > > (new ::XMLSchema::string< ACE_TCHAR > (e));
      value_->container (this);
    }
  }


  // transportPriorityQosPolicy
  //

  transportPriorityQosPolicy::
  transportPriorityQosPolicy ()
  :
  regulator__ ()
  {
  }

  transportPriorityQosPolicy::
  transportPriorityQosPolicy (transportPriorityQosPolicy const& s)
  :
  ::XSCRT::Type (),
  value_ (s.value_.get () ? new ::XMLSchema::nonNegativeInteger (*s.value_) : 0),
  regulator__ ()
  {
    if (value_.get ()) value_->container (this);
  }

  transportPriorityQosPolicy& transportPriorityQosPolicy::
  operator= (transportPriorityQosPolicy const& s)
  {
    if (&s != this)
    {
      if (s.value_.get ())
        value (*(s.value_));
      else
        value_.reset (0);
    }

    return *this;
  }


  // transportPriorityQosPolicy
  //
  bool transportPriorityQosPolicy::
  value_p () const
  {
    return value_.get () != 0;
  }

  ::XMLSchema::nonNegativeInteger const& transportPriorityQosPolicy::
  value () const
  {
    return *value_;
  }

  void transportPriorityQosPolicy::
  value (::XMLSchema::nonNegativeInteger const& e)
  {
    if (value_.get ())
    {
      *value_ = e;
    }

    else
    {
      value_ = ::std::auto_ptr< ::XMLSchema::nonNegativeInteger > (new ::XMLSchema::nonNegativeInteger (e));
      value_->container (this);
    }
  }


  // userDataQosPolicy
  //

  userDataQosPolicy::
  userDataQosPolicy ()
  :
  regulator__ ()
  {
  }

  userDataQosPolicy::
  userDataQosPolicy (userDataQosPolicy const& s)
  :
  ::XSCRT::Type (),
  value_ (s.value_.get () ? new ::XMLSchema::string< ACE_TCHAR > (*s.value_) : 0),
  regulator__ ()
  {
    if (value_.get ()) value_->container (this);
  }

  userDataQosPolicy& userDataQosPolicy::
  operator= (userDataQosPolicy const& s)
  {
    if (&s != this)
    {
      if (s.value_.get ())
        value (*(s.value_));
      else
        value_.reset (0);
    }

    return *this;
  }


  // userDataQosPolicy
  //
  bool userDataQosPolicy::
  value_p () const
  {
    return value_.get () != 0;
  }

  ::XMLSchema::string< ACE_TCHAR > const& userDataQosPolicy::
  value () const
  {
    return *value_;
  }

  void userDataQosPolicy::
  value (::XMLSchema::string< ACE_TCHAR > const& e)
  {
    if (value_.get ())
    {
      *value_ = e;
    }

    else
    {
      value_ = ::std::auto_ptr< ::XMLSchema::string< ACE_TCHAR > > (new ::XMLSchema::string< ACE_TCHAR > (e));
      value_->container (this);
    }
  }


  // writerDataLifecycleQosPolicy
  //

  writerDataLifecycleQosPolicy::
  writerDataLifecycleQosPolicy ()
  :
  regulator__ ()
  {
  }

  writerDataLifecycleQosPolicy::
  writerDataLifecycleQosPolicy (writerDataLifecycleQosPolicy const& s)
  :
  ::XSCRT::Type (),
  autodispose_unregistered_instances_ (s.autodispose_unregistered_instances_.get () ? new ::XMLSchema::boolean (*s.autodispose_unregistered_instances_) : 0),
  regulator__ ()
  {
    if (autodispose_unregistered_instances_.get ()) autodispose_unregistered_instances_->container (this);
  }

  writerDataLifecycleQosPolicy& writerDataLifecycleQosPolicy::
  operator= (writerDataLifecycleQosPolicy const& s)
  {
    if (&s != this)
    {
      if (s.autodispose_unregistered_instances_.get ())
        autodispose_unregistered_instances (*(s.autodispose_unregistered_instances_));
      else
        autodispose_unregistered_instances_.reset (0);
    }

    return *this;
  }


  // writerDataLifecycleQosPolicy
  //
  bool writerDataLifecycleQosPolicy::
  autodispose_unregistered_instances_p () const
  {
    return autodispose_unregistered_instances_.get () != 0;
  }

  ::XMLSchema::boolean const& writerDataLifecycleQosPolicy::
  autodispose_unregistered_instances () const
  {
    return *autodispose_unregistered_instances_;
  }

  void writerDataLifecycleQosPolicy::
  autodispose_unregistered_instances (::XMLSchema::boolean const& e)
  {
    if (autodispose_unregistered_instances_.get ())
    {
      *autodispose_unregistered_instances_ = e;
    }

    else
    {
      autodispose_unregistered_instances_ = ::std::auto_ptr< ::XMLSchema::boolean > (new ::XMLSchema::boolean (e));
      autodispose_unregistered_instances_->container (this);
    }
  }


  // domainparticipantQos
  //

  domainparticipantQos::
  domainparticipantQos ()
  :
  regulator__ ()
  {
  }

  domainparticipantQos::
  domainparticipantQos (domainparticipantQos const& s)
  :
  ::XSCRT::Type (),
  user_data_ (s.user_data_.get () ? new ::dds::userDataQosPolicy (*s.user_data_) : 0),
  entity_factory_ (s.entity_factory_.get () ? new ::dds::entityFactoryQosPolicy (*s.entity_factory_) : 0),
  name_ (s.name_.get () ? new ::XMLSchema::string< ACE_TCHAR > (*s.name_) : 0),
  base_name_ (s.base_name_.get () ? new ::XMLSchema::string< ACE_TCHAR > (*s.base_name_) : 0),
  topic_filter_ (s.topic_filter_.get () ? new ::XMLSchema::string< ACE_TCHAR > (*s.topic_filter_) : 0),
  regulator__ ()
  {
    if (user_data_.get ()) user_data_->container (this);
    if (entity_factory_.get ()) entity_factory_->container (this);
    if (name_.get ()) name_->container (this);
    if (base_name_.get ()) base_name_->container (this);
    if (topic_filter_.get ()) topic_filter_->container (this);
  }

  domainparticipantQos& domainparticipantQos::
  operator= (domainparticipantQos const& s)
  {
    if (&s != this)
    {
      if (s.user_data_.get ())
        user_data (*(s.user_data_));
      else
        user_data_.reset (0);

      if (s.entity_factory_.get ())
        entity_factory (*(s.entity_factory_));
      else
        entity_factory_.reset (0);

      if (s.name_.get ()) name (*(s.name_));
      else name_ = ::std::auto_ptr< ::XMLSchema::string< ACE_TCHAR > > (0);

      if (s.base_name_.get ()) base_name (*(s.base_name_));
      else base_name_ = ::std::auto_ptr< ::XMLSchema::string< ACE_TCHAR > > (0);

      if (s.topic_filter_.get ()) topic_filter (*(s.topic_filter_));
      else topic_filter_ = ::std::auto_ptr< ::XMLSchema::string< ACE_TCHAR > > (0);
    }

    return *this;
  }


  // domainparticipantQos
  //
  bool domainparticipantQos::
  user_data_p () const
  {
    return user_data_.get () != 0;
  }

  ::dds::userDataQosPolicy const& domainparticipantQos::
  user_data () const
  {
    return *user_data_;
  }

  void domainparticipantQos::
  user_data (::dds::userDataQosPolicy const& e)
  {
    if (user_data_.get ())
    {
      *user_data_ = e;
    }

    else
    {
      user_data_ = ::std::auto_ptr< ::dds::userDataQosPolicy > (new ::dds::userDataQosPolicy (e));
      user_data_->container (this);
    }
  }

  // domainparticipantQos
  //
  bool domainparticipantQos::
  entity_factory_p () const
  {
    return entity_factory_.get () != 0;
  }

  ::dds::entityFactoryQosPolicy const& domainparticipantQos::
  entity_factory () const
  {
    return *entity_factory_;
  }

  void domainparticipantQos::
  entity_factory (::dds::entityFactoryQosPolicy const& e)
  {
    if (entity_factory_.get ())
    {
      *entity_factory_ = e;
    }

    else
    {
      entity_factory_ = ::std::auto_ptr< ::dds::entityFactoryQosPolicy > (new ::dds::entityFactoryQosPolicy (e));
      entity_factory_->container (this);
    }
  }

  // domainparticipantQos
  //
  bool domainparticipantQos::
  name_p () const
  {
    return name_.get () != 0;
  }

  ::XMLSchema::string< ACE_TCHAR > const& domainparticipantQos::
  name () const
  {
    return *name_;
  }

  ::XMLSchema::string< ACE_TCHAR >& domainparticipantQos::
  name ()
  {
    return *name_;
  }

  void domainparticipantQos::
  name (::XMLSchema::string< ACE_TCHAR > const& e)
  {
    if (name_.get ())
    {
      *name_ = e;
    }

    else
    {
      name_ = ::std::auto_ptr< ::XMLSchema::string< ACE_TCHAR > > (new ::XMLSchema::string< ACE_TCHAR > (e));
      name_->container (this);
    }
  }

  // domainparticipantQos
  //
  bool domainparticipantQos::
  base_name_p () const
  {
    return base_name_.get () != 0;
  }

  ::XMLSchema::string< ACE_TCHAR > const& domainparticipantQos::
  base_name () const
  {
    return *base_name_;
  }

  ::XMLSchema::string< ACE_TCHAR >& domainparticipantQos::
  base_name ()
  {
    return *base_name_;
  }

  void domainparticipantQos::
  base_name (::XMLSchema::string< ACE_TCHAR > const& e)
  {
    if (base_name_.get ())
    {
      *base_name_ = e;
    }

    else
    {
      base_name_ = ::std::auto_ptr< ::XMLSchema::string< ACE_TCHAR > > (new ::XMLSchema::string< ACE_TCHAR > (e));
      base_name_->container (this);
    }
  }

  // domainparticipantQos
  //
  bool domainparticipantQos::
  topic_filter_p () const
  {
    return topic_filter_.get () != 0;
  }

  ::XMLSchema::string< ACE_TCHAR > const& domainparticipantQos::
  topic_filter () const
  {
    return *topic_filter_;
  }

  ::XMLSchema::string< ACE_TCHAR >& domainparticipantQos::
  topic_filter ()
  {
    return *topic_filter_;
  }

  void domainparticipantQos::
  topic_filter (::XMLSchema::string< ACE_TCHAR > const& e)
  {
    if (topic_filter_.get ())
    {
      *topic_filter_ = e;
    }

    else
    {
      topic_filter_ = ::std::auto_ptr< ::XMLSchema::string< ACE_TCHAR > > (new ::XMLSchema::string< ACE_TCHAR > (e));
      topic_filter_->container (this);
    }
  }


  // publisherQos
  //

  publisherQos::
  publisherQos ()
  :
  regulator__ ()
  {
  }

  publisherQos::
  publisherQos (publisherQos const& s)
  :
  ::XSCRT::Type (),
  presentation_ (s.presentation_.get () ? new ::dds::presentationQosPolicy (*s.presentation_) : 0),
  partition_ (s.partition_.get () ? new ::dds::partitionQosPolicy (*s.partition_) : 0),
  group_data_ (s.group_data_.get () ? new ::dds::groupDataQosPolicy (*s.group_data_) : 0),
  entity_factory_ (s.entity_factory_.get () ? new ::dds::entityFactoryQosPolicy (*s.entity_factory_) : 0),
  name_ (s.name_.get () ? new ::XMLSchema::string< ACE_TCHAR > (*s.name_) : 0),
  base_name_ (s.base_name_.get () ? new ::XMLSchema::string< ACE_TCHAR > (*s.base_name_) : 0),
  topic_filter_ (s.topic_filter_.get () ? new ::XMLSchema::string< ACE_TCHAR > (*s.topic_filter_) : 0),
  regulator__ ()
  {
    if (presentation_.get ()) presentation_->container (this);
    if (partition_.get ()) partition_->container (this);
    if (group_data_.get ()) group_data_->container (this);
    if (entity_factory_.get ()) entity_factory_->container (this);
    if (name_.get ()) name_->container (this);
    if (base_name_.get ()) base_name_->container (this);
    if (topic_filter_.get ()) topic_filter_->container (this);
  }

  publisherQos& publisherQos::
  operator= (publisherQos const& s)
  {
    if (&s != this)
    {
      if (s.presentation_.get ())
        presentation (*(s.presentation_));
      else
        presentation_.reset (0);

      if (s.partition_.get ())
        partition (*(s.partition_));
      else
        partition_.reset (0);

      if (s.group_data_.get ())
        group_data (*(s.group_data_));
      else
        group_data_.reset (0);

      if (s.entity_factory_.get ())
        entity_factory (*(s.entity_factory_));
      else
        entity_factory_.reset (0);

      if (s.name_.get ()) name (*(s.name_));
      else name_ = ::std::auto_ptr< ::XMLSchema::string< ACE_TCHAR > > (0);

      if (s.base_name_.get ()) base_name (*(s.base_name_));
      else base_name_ = ::std::auto_ptr< ::XMLSchema::string< ACE_TCHAR > > (0);

      if (s.topic_filter_.get ()) topic_filter (*(s.topic_filter_));
      else topic_filter_ = ::std::auto_ptr< ::XMLSchema::string< ACE_TCHAR > > (0);
    }

    return *this;
  }


  // publisherQos
  //
  bool publisherQos::
  presentation_p () const
  {
    return presentation_.get () != 0;
  }

  ::dds::presentationQosPolicy const& publisherQos::
  presentation () const
  {
    return *presentation_;
  }

  void publisherQos::
  presentation (::dds::presentationQosPolicy const& e)
  {
    if (presentation_.get ())
    {
      *presentation_ = e;
    }

    else
    {
      presentation_ = ::std::auto_ptr< ::dds::presentationQosPolicy > (new ::dds::presentationQosPolicy (e));
      presentation_->container (this);
    }
  }

  // publisherQos
  //
  bool publisherQos::
  partition_p () const
  {
    return partition_.get () != 0;
  }

  ::dds::partitionQosPolicy const& publisherQos::
  partition () const
  {
    return *partition_;
  }

  void publisherQos::
  partition (::dds::partitionQosPolicy const& e)
  {
    if (partition_.get ())
    {
      *partition_ = e;
    }

    else
    {
      partition_ = ::std::auto_ptr< ::dds::partitionQosPolicy > (new ::dds::partitionQosPolicy (e));
      partition_->container (this);
    }
  }

  // publisherQos
  //
  bool publisherQos::
  group_data_p () const
  {
    return group_data_.get () != 0;
  }

  ::dds::groupDataQosPolicy const& publisherQos::
  group_data () const
  {
    return *group_data_;
  }

  void publisherQos::
  group_data (::dds::groupDataQosPolicy const& e)
  {
    if (group_data_.get ())
    {
      *group_data_ = e;
    }

    else
    {
      group_data_ = ::std::auto_ptr< ::dds::groupDataQosPolicy > (new ::dds::groupDataQosPolicy (e));
      group_data_->container (this);
    }
  }

  // publisherQos
  //
  bool publisherQos::
  entity_factory_p () const
  {
    return entity_factory_.get () != 0;
  }

  ::dds::entityFactoryQosPolicy const& publisherQos::
  entity_factory () const
  {
    return *entity_factory_;
  }

  void publisherQos::
  entity_factory (::dds::entityFactoryQosPolicy const& e)
  {
    if (entity_factory_.get ())
    {
      *entity_factory_ = e;
    }

    else
    {
      entity_factory_ = ::std::auto_ptr< ::dds::entityFactoryQosPolicy > (new ::dds::entityFactoryQosPolicy (e));
      entity_factory_->container (this);
    }
  }

  // publisherQos
  //
  bool publisherQos::
  name_p () const
  {
    return name_.get () != 0;
  }

  ::XMLSchema::string< ACE_TCHAR > const& publisherQos::
  name () const
  {
    return *name_;
  }

  ::XMLSchema::string< ACE_TCHAR >& publisherQos::
  name ()
  {
    return *name_;
  }

  void publisherQos::
  name (::XMLSchema::string< ACE_TCHAR > const& e)
  {
    if (name_.get ())
    {
      *name_ = e;
    }

    else
    {
      name_ = ::std::auto_ptr< ::XMLSchema::string< ACE_TCHAR > > (new ::XMLSchema::string< ACE_TCHAR > (e));
      name_->container (this);
    }
  }

  // publisherQos
  //
  bool publisherQos::
  base_name_p () const
  {
    return base_name_.get () != 0;
  }

  ::XMLSchema::string< ACE_TCHAR > const& publisherQos::
  base_name () const
  {
    return *base_name_;
  }

  ::XMLSchema::string< ACE_TCHAR >& publisherQos::
  base_name ()
  {
    return *base_name_;
  }

  void publisherQos::
  base_name (::XMLSchema::string< ACE_TCHAR > const& e)
  {
    if (base_name_.get ())
    {
      *base_name_ = e;
    }

    else
    {
      base_name_ = ::std::auto_ptr< ::XMLSchema::string< ACE_TCHAR > > (new ::XMLSchema::string< ACE_TCHAR > (e));
      base_name_->container (this);
    }
  }

  // publisherQos
  //
  bool publisherQos::
  topic_filter_p () const
  {
    return topic_filter_.get () != 0;
  }

  ::XMLSchema::string< ACE_TCHAR > const& publisherQos::
  topic_filter () const
  {
    return *topic_filter_;
  }

  ::XMLSchema::string< ACE_TCHAR >& publisherQos::
  topic_filter ()
  {
    return *topic_filter_;
  }

  void publisherQos::
  topic_filter (::XMLSchema::string< ACE_TCHAR > const& e)
  {
    if (topic_filter_.get ())
    {
      *topic_filter_ = e;
    }

    else
    {
      topic_filter_ = ::std::auto_ptr< ::XMLSchema::string< ACE_TCHAR > > (new ::XMLSchema::string< ACE_TCHAR > (e));
      topic_filter_->container (this);
    }
  }


  // subscriberQos
  //

  subscriberQos::
  subscriberQos ()
  :
  regulator__ ()
  {
  }

  subscriberQos::
  subscriberQos (subscriberQos const& s)
  :
  ::XSCRT::Type (),
  presentation_ (s.presentation_.get () ? new ::dds::presentationQosPolicy (*s.presentation_) : 0),
  partition_ (s.partition_.get () ? new ::dds::partitionQosPolicy (*s.partition_) : 0),
  group_data_ (s.group_data_.get () ? new ::dds::groupDataQosPolicy (*s.group_data_) : 0),
  entity_factory_ (s.entity_factory_.get () ? new ::dds::entityFactoryQosPolicy (*s.entity_factory_) : 0),
  name_ (s.name_.get () ? new ::XMLSchema::string< ACE_TCHAR > (*s.name_) : 0),
  base_name_ (s.base_name_.get () ? new ::XMLSchema::string< ACE_TCHAR > (*s.base_name_) : 0),
  topic_filter_ (s.topic_filter_.get () ? new ::XMLSchema::string< ACE_TCHAR > (*s.topic_filter_) : 0),
  regulator__ ()
  {
    if (presentation_.get ()) presentation_->container (this);
    if (partition_.get ()) partition_->container (this);
    if (group_data_.get ()) group_data_->container (this);
    if (entity_factory_.get ()) entity_factory_->container (this);
    if (name_.get ()) name_->container (this);
    if (base_name_.get ()) base_name_->container (this);
    if (topic_filter_.get ()) topic_filter_->container (this);
  }

  subscriberQos& subscriberQos::
  operator= (subscriberQos const& s)
  {
    if (&s != this)
    {
      if (s.presentation_.get ())
        presentation (*(s.presentation_));
      else
        presentation_.reset (0);

      if (s.partition_.get ())
        partition (*(s.partition_));
      else
        partition_.reset (0);

      if (s.group_data_.get ())
        group_data (*(s.group_data_));
      else
        group_data_.reset (0);

      if (s.entity_factory_.get ())
        entity_factory (*(s.entity_factory_));
      else
        entity_factory_.reset (0);

      if (s.name_.get ()) name (*(s.name_));
      else name_ = ::std::auto_ptr< ::XMLSchema::string< ACE_TCHAR > > (0);

      if (s.base_name_.get ()) base_name (*(s.base_name_));
      else base_name_ = ::std::auto_ptr< ::XMLSchema::string< ACE_TCHAR > > (0);

      if (s.topic_filter_.get ()) topic_filter (*(s.topic_filter_));
      else topic_filter_ = ::std::auto_ptr< ::XMLSchema::string< ACE_TCHAR > > (0);
    }

    return *this;
  }


  // subscriberQos
  //
  bool subscriberQos::
  presentation_p () const
  {
    return presentation_.get () != 0;
  }

  ::dds::presentationQosPolicy const& subscriberQos::
  presentation () const
  {
    return *presentation_;
  }

  void subscriberQos::
  presentation (::dds::presentationQosPolicy const& e)
  {
    if (presentation_.get ())
    {
      *presentation_ = e;
    }

    else
    {
      presentation_ = ::std::auto_ptr< ::dds::presentationQosPolicy > (new ::dds::presentationQosPolicy (e));
      presentation_->container (this);
    }
  }

  // subscriberQos
  //
  bool subscriberQos::
  partition_p () const
  {
    return partition_.get () != 0;
  }

  ::dds::partitionQosPolicy const& subscriberQos::
  partition () const
  {
    return *partition_;
  }

  void subscriberQos::
  partition (::dds::partitionQosPolicy const& e)
  {
    if (partition_.get ())
    {
      *partition_ = e;
    }

    else
    {
      partition_ = ::std::auto_ptr< ::dds::partitionQosPolicy > (new ::dds::partitionQosPolicy (e));
      partition_->container (this);
    }
  }

  // subscriberQos
  //
  bool subscriberQos::
  group_data_p () const
  {
    return group_data_.get () != 0;
  }

  ::dds::groupDataQosPolicy const& subscriberQos::
  group_data () const
  {
    return *group_data_;
  }

  void subscriberQos::
  group_data (::dds::groupDataQosPolicy const& e)
  {
    if (group_data_.get ())
    {
      *group_data_ = e;
    }

    else
    {
      group_data_ = ::std::auto_ptr< ::dds::groupDataQosPolicy > (new ::dds::groupDataQosPolicy (e));
      group_data_->container (this);
    }
  }

  // subscriberQos
  //
  bool subscriberQos::
  entity_factory_p () const
  {
    return entity_factory_.get () != 0;
  }

  ::dds::entityFactoryQosPolicy const& subscriberQos::
  entity_factory () const
  {
    return *entity_factory_;
  }

  void subscriberQos::
  entity_factory (::dds::entityFactoryQosPolicy const& e)
  {
    if (entity_factory_.get ())
    {
      *entity_factory_ = e;
    }

    else
    {
      entity_factory_ = ::std::auto_ptr< ::dds::entityFactoryQosPolicy > (new ::dds::entityFactoryQosPolicy (e));
      entity_factory_->container (this);
    }
  }

  // subscriberQos
  //
  bool subscriberQos::
  name_p () const
  {
    return name_.get () != 0;
  }

  ::XMLSchema::string< ACE_TCHAR > const& subscriberQos::
  name () const
  {
    return *name_;
  }

  ::XMLSchema::string< ACE_TCHAR >& subscriberQos::
  name ()
  {
    return *name_;
  }

  void subscriberQos::
  name (::XMLSchema::string< ACE_TCHAR > const& e)
  {
    if (name_.get ())
    {
      *name_ = e;
    }

    else
    {
      name_ = ::std::auto_ptr< ::XMLSchema::string< ACE_TCHAR > > (new ::XMLSchema::string< ACE_TCHAR > (e));
      name_->container (this);
    }
  }

  // subscriberQos
  //
  bool subscriberQos::
  base_name_p () const
  {
    return base_name_.get () != 0;
  }

  ::XMLSchema::string< ACE_TCHAR > const& subscriberQos::
  base_name () const
  {
    return *base_name_;
  }

  ::XMLSchema::string< ACE_TCHAR >& subscriberQos::
  base_name ()
  {
    return *base_name_;
  }

  void subscriberQos::
  base_name (::XMLSchema::string< ACE_TCHAR > const& e)
  {
    if (base_name_.get ())
    {
      *base_name_ = e;
    }

    else
    {
      base_name_ = ::std::auto_ptr< ::XMLSchema::string< ACE_TCHAR > > (new ::XMLSchema::string< ACE_TCHAR > (e));
      base_name_->container (this);
    }
  }

  // subscriberQos
  //
  bool subscriberQos::
  topic_filter_p () const
  {
    return topic_filter_.get () != 0;
  }

  ::XMLSchema::string< ACE_TCHAR > const& subscriberQos::
  topic_filter () const
  {
    return *topic_filter_;
  }

  ::XMLSchema::string< ACE_TCHAR >& subscriberQos::
  topic_filter ()
  {
    return *topic_filter_;
  }

  void subscriberQos::
  topic_filter (::XMLSchema::string< ACE_TCHAR > const& e)
  {
    if (topic_filter_.get ())
    {
      *topic_filter_ = e;
    }

    else
    {
      topic_filter_ = ::std::auto_ptr< ::XMLSchema::string< ACE_TCHAR > > (new ::XMLSchema::string< ACE_TCHAR > (e));
      topic_filter_->container (this);
    }
  }


  // topicQos
  //

  topicQos::
  topicQos ()
  :
  regulator__ ()
  {
  }

  topicQos::
  topicQos (topicQos const& s)
  :
  ::XSCRT::Type (),
  topic_data_ (s.topic_data_.get () ? new ::dds::topicDataQosPolicy (*s.topic_data_) : 0),
  durability_ (s.durability_.get () ? new ::dds::durabilityQosPolicy (*s.durability_) : 0),
  durability_service_ (s.durability_service_.get () ? new ::dds::durabilityServiceQosPolicy (*s.durability_service_) : 0),
  deadline_ (s.deadline_.get () ? new ::dds::deadlineQosPolicy (*s.deadline_) : 0),
  latency_budget_ (s.latency_budget_.get () ? new ::dds::latencyBudgetQosPolicy (*s.latency_budget_) : 0),
  liveliness_ (s.liveliness_.get () ? new ::dds::livelinessQosPolicy (*s.liveliness_) : 0),
  reliability_ (s.reliability_.get () ? new ::dds::reliabilityQosPolicy (*s.reliability_) : 0),
  destination_order_ (s.destination_order_.get () ? new ::dds::destinationOrderQosPolicy (*s.destination_order_) : 0),
  history_ (s.history_.get () ? new ::dds::historyQosPolicy (*s.history_) : 0),
  resource_limits_ (s.resource_limits_.get () ? new ::dds::resourceLimitsQosPolicy (*s.resource_limits_) : 0),
  transport_priority_ (s.transport_priority_.get () ? new ::dds::transportPriorityQosPolicy (*s.transport_priority_) : 0),
  lifespan_ (s.lifespan_.get () ? new ::dds::lifespanQosPolicy (*s.lifespan_) : 0),
  ownership_ (s.ownership_.get () ? new ::dds::ownershipQosPolicy (*s.ownership_) : 0),
  name_ (s.name_.get () ? new ::XMLSchema::string< ACE_TCHAR > (*s.name_) : 0),
  base_name_ (s.base_name_.get () ? new ::XMLSchema::string< ACE_TCHAR > (*s.base_name_) : 0),
  topic_filter_ (s.topic_filter_.get () ? new ::XMLSchema::string< ACE_TCHAR > (*s.topic_filter_) : 0),
  regulator__ ()
  {
    if (topic_data_.get ()) topic_data_->container (this);
    if (durability_.get ()) durability_->container (this);
    if (durability_service_.get ()) durability_service_->container (this);
    if (deadline_.get ()) deadline_->container (this);
    if (latency_budget_.get ()) latency_budget_->container (this);
    if (liveliness_.get ()) liveliness_->container (this);
    if (reliability_.get ()) reliability_->container (this);
    if (destination_order_.get ()) destination_order_->container (this);
    if (history_.get ()) history_->container (this);
    if (resource_limits_.get ()) resource_limits_->container (this);
    if (transport_priority_.get ()) transport_priority_->container (this);
    if (lifespan_.get ()) lifespan_->container (this);
    if (ownership_.get ()) ownership_->container (this);
    if (name_.get ()) name_->container (this);
    if (base_name_.get ()) base_name_->container (this);
    if (topic_filter_.get ()) topic_filter_->container (this);
  }

  topicQos& topicQos::
  operator= (topicQos const& s)
  {
    if (&s != this)
    {
      if (s.topic_data_.get ())
        topic_data (*(s.topic_data_));
      else
        topic_data_.reset (0);

      if (s.durability_.get ())
        durability (*(s.durability_));
      else
        durability_.reset (0);

      if (s.durability_service_.get ())
        durability_service (*(s.durability_service_));
      else
        durability_service_.reset (0);

      if (s.deadline_.get ())
        deadline (*(s.deadline_));
      else
        deadline_.reset (0);

      if (s.latency_budget_.get ())
        latency_budget (*(s.latency_budget_));
      else
        latency_budget_.reset (0);

      if (s.liveliness_.get ())
        liveliness (*(s.liveliness_));
      else
        liveliness_.reset (0);

      if (s.reliability_.get ())
        reliability (*(s.reliability_));
      else
        reliability_.reset (0);

      if (s.destination_order_.get ())
        destination_order (*(s.destination_order_));
      else
        destination_order_.reset (0);

      if (s.history_.get ())
        history (*(s.history_));
      else
        history_.reset (0);

      if (s.resource_limits_.get ())
        resource_limits (*(s.resource_limits_));
      else
        resource_limits_.reset (0);

      if (s.transport_priority_.get ())
        transport_priority (*(s.transport_priority_));
      else
        transport_priority_.reset (0);

      if (s.lifespan_.get ())
        lifespan (*(s.lifespan_));
      else
        lifespan_.reset (0);

      if (s.ownership_.get ())
        ownership (*(s.ownership_));
      else
        ownership_.reset (0);

      if (s.name_.get ()) name (*(s.name_));
      else name_ = ::std::auto_ptr< ::XMLSchema::string< ACE_TCHAR > > (0);

      if (s.base_name_.get ()) base_name (*(s.base_name_));
      else base_name_ = ::std::auto_ptr< ::XMLSchema::string< ACE_TCHAR > > (0);

      if (s.topic_filter_.get ()) topic_filter (*(s.topic_filter_));
      else topic_filter_ = ::std::auto_ptr< ::XMLSchema::string< ACE_TCHAR > > (0);
    }

    return *this;
  }


  // topicQos
  //
  bool topicQos::
  topic_data_p () const
  {
    return topic_data_.get () != 0;
  }

  ::dds::topicDataQosPolicy const& topicQos::
  topic_data () const
  {
    return *topic_data_;
  }

  void topicQos::
  topic_data (::dds::topicDataQosPolicy const& e)
  {
    if (topic_data_.get ())
    {
      *topic_data_ = e;
    }

    else
    {
      topic_data_ = ::std::auto_ptr< ::dds::topicDataQosPolicy > (new ::dds::topicDataQosPolicy (e));
      topic_data_->container (this);
    }
  }

  // topicQos
  //
  bool topicQos::
  durability_p () const
  {
    return durability_.get () != 0;
  }

  ::dds::durabilityQosPolicy const& topicQos::
  durability () const
  {
    return *durability_;
  }

  void topicQos::
  durability (::dds::durabilityQosPolicy const& e)
  {
    if (durability_.get ())
    {
      *durability_ = e;
    }

    else
    {
      durability_ = ::std::auto_ptr< ::dds::durabilityQosPolicy > (new ::dds::durabilityQosPolicy (e));
      durability_->container (this);
    }
  }

  // topicQos
  //
  bool topicQos::
  durability_service_p () const
  {
    return durability_service_.get () != 0;
  }

  ::dds::durabilityServiceQosPolicy const& topicQos::
  durability_service () const
  {
    return *durability_service_;
  }

  void topicQos::
  durability_service (::dds::durabilityServiceQosPolicy const& e)
  {
    if (durability_service_.get ())
    {
      *durability_service_ = e;
    }

    else
    {
      durability_service_ = ::std::auto_ptr< ::dds::durabilityServiceQosPolicy > (new ::dds::durabilityServiceQosPolicy (e));
      durability_service_->container (this);
    }
  }

  // topicQos
  //
  bool topicQos::
  deadline_p () const
  {
    return deadline_.get () != 0;
  }

  ::dds::deadlineQosPolicy const& topicQos::
  deadline () const
  {
    return *deadline_;
  }

  void topicQos::
  deadline (::dds::deadlineQosPolicy const& e)
  {
    if (deadline_.get ())
    {
      *deadline_ = e;
    }

    else
    {
      deadline_ = ::std::auto_ptr< ::dds::deadlineQosPolicy > (new ::dds::deadlineQosPolicy (e));
      deadline_->container (this);
    }
  }

  // topicQos
  //
  bool topicQos::
  latency_budget_p () const
  {
    return latency_budget_.get () != 0;
  }

  ::dds::latencyBudgetQosPolicy const& topicQos::
  latency_budget () const
  {
    return *latency_budget_;
  }

  void topicQos::
  latency_budget (::dds::latencyBudgetQosPolicy const& e)
  {
    if (latency_budget_.get ())
    {
      *latency_budget_ = e;
    }

    else
    {
      latency_budget_ = ::std::auto_ptr< ::dds::latencyBudgetQosPolicy > (new ::dds::latencyBudgetQosPolicy (e));
      latency_budget_->container (this);
    }
  }

  // topicQos
  //
  bool topicQos::
  liveliness_p () const
  {
    return liveliness_.get () != 0;
  }

  ::dds::livelinessQosPolicy const& topicQos::
  liveliness () const
  {
    return *liveliness_;
  }

  void topicQos::
  liveliness (::dds::livelinessQosPolicy const& e)
  {
    if (liveliness_.get ())
    {
      *liveliness_ = e;
    }

    else
    {
      liveliness_ = ::std::auto_ptr< ::dds::livelinessQosPolicy > (new ::dds::livelinessQosPolicy (e));
      liveliness_->container (this);
    }
  }

  // topicQos
  //
  bool topicQos::
  reliability_p () const
  {
    return reliability_.get () != 0;
  }

  ::dds::reliabilityQosPolicy const& topicQos::
  reliability () const
  {
    return *reliability_;
  }

  void topicQos::
  reliability (::dds::reliabilityQosPolicy const& e)
  {
    if (reliability_.get ())
    {
      *reliability_ = e;
    }

    else
    {
      reliability_ = ::std::auto_ptr< ::dds::reliabilityQosPolicy > (new ::dds::reliabilityQosPolicy (e));
      reliability_->container (this);
    }
  }

  // topicQos
  //
  bool topicQos::
  destination_order_p () const
  {
    return destination_order_.get () != 0;
  }

  ::dds::destinationOrderQosPolicy const& topicQos::
  destination_order () const
  {
    return *destination_order_;
  }

  void topicQos::
  destination_order (::dds::destinationOrderQosPolicy const& e)
  {
    if (destination_order_.get ())
    {
      *destination_order_ = e;
    }

    else
    {
      destination_order_ = ::std::auto_ptr< ::dds::destinationOrderQosPolicy > (new ::dds::destinationOrderQosPolicy (e));
      destination_order_->container (this);
    }
  }

  // topicQos
  //
  bool topicQos::
  history_p () const
  {
    return history_.get () != 0;
  }

  ::dds::historyQosPolicy const& topicQos::
  history () const
  {
    return *history_;
  }

  void topicQos::
  history (::dds::historyQosPolicy const& e)
  {
    if (history_.get ())
    {
      *history_ = e;
    }

    else
    {
      history_ = ::std::auto_ptr< ::dds::historyQosPolicy > (new ::dds::historyQosPolicy (e));
      history_->container (this);
    }
  }

  // topicQos
  //
  bool topicQos::
  resource_limits_p () const
  {
    return resource_limits_.get () != 0;
  }

  ::dds::resourceLimitsQosPolicy const& topicQos::
  resource_limits () const
  {
    return *resource_limits_;
  }

  void topicQos::
  resource_limits (::dds::resourceLimitsQosPolicy const& e)
  {
    if (resource_limits_.get ())
    {
      *resource_limits_ = e;
    }

    else
    {
      resource_limits_ = ::std::auto_ptr< ::dds::resourceLimitsQosPolicy > (new ::dds::resourceLimitsQosPolicy (e));
      resource_limits_->container (this);
    }
  }

  // topicQos
  //
  bool topicQos::
  transport_priority_p () const
  {
    return transport_priority_.get () != 0;
  }

  ::dds::transportPriorityQosPolicy const& topicQos::
  transport_priority () const
  {
    return *transport_priority_;
  }

  void topicQos::
  transport_priority (::dds::transportPriorityQosPolicy const& e)
  {
    if (transport_priority_.get ())
    {
      *transport_priority_ = e;
    }

    else
    {
      transport_priority_ = ::std::auto_ptr< ::dds::transportPriorityQosPolicy > (new ::dds::transportPriorityQosPolicy (e));
      transport_priority_->container (this);
    }
  }

  // topicQos
  //
  bool topicQos::
  lifespan_p () const
  {
    return lifespan_.get () != 0;
  }

  ::dds::lifespanQosPolicy const& topicQos::
  lifespan () const
  {
    return *lifespan_;
  }

  void topicQos::
  lifespan (::dds::lifespanQosPolicy const& e)
  {
    if (lifespan_.get ())
    {
      *lifespan_ = e;
    }

    else
    {
      lifespan_ = ::std::auto_ptr< ::dds::lifespanQosPolicy > (new ::dds::lifespanQosPolicy (e));
      lifespan_->container (this);
    }
  }

  // topicQos
  //
  bool topicQos::
  ownership_p () const
  {
    return ownership_.get () != 0;
  }

  ::dds::ownershipQosPolicy const& topicQos::
  ownership () const
  {
    return *ownership_;
  }

  void topicQos::
  ownership (::dds::ownershipQosPolicy const& e)
  {
    if (ownership_.get ())
    {
      *ownership_ = e;
    }

    else
    {
      ownership_ = ::std::auto_ptr< ::dds::ownershipQosPolicy > (new ::dds::ownershipQosPolicy (e));
      ownership_->container (this);
    }
  }

  // topicQos
  //
  bool topicQos::
  name_p () const
  {
    return name_.get () != 0;
  }

  ::XMLSchema::string< ACE_TCHAR > const& topicQos::
  name () const
  {
    return *name_;
  }

  ::XMLSchema::string< ACE_TCHAR >& topicQos::
  name ()
  {
    return *name_;
  }

  void topicQos::
  name (::XMLSchema::string< ACE_TCHAR > const& e)
  {
    if (name_.get ())
    {
      *name_ = e;
    }

    else
    {
      name_ = ::std::auto_ptr< ::XMLSchema::string< ACE_TCHAR > > (new ::XMLSchema::string< ACE_TCHAR > (e));
      name_->container (this);
    }
  }

  // topicQos
  //
  bool topicQos::
  base_name_p () const
  {
    return base_name_.get () != 0;
  }

  ::XMLSchema::string< ACE_TCHAR > const& topicQos::
  base_name () const
  {
    return *base_name_;
  }

  ::XMLSchema::string< ACE_TCHAR >& topicQos::
  base_name ()
  {
    return *base_name_;
  }

  void topicQos::
  base_name (::XMLSchema::string< ACE_TCHAR > const& e)
  {
    if (base_name_.get ())
    {
      *base_name_ = e;
    }

    else
    {
      base_name_ = ::std::auto_ptr< ::XMLSchema::string< ACE_TCHAR > > (new ::XMLSchema::string< ACE_TCHAR > (e));
      base_name_->container (this);
    }
  }

  // topicQos
  //
  bool topicQos::
  topic_filter_p () const
  {
    return topic_filter_.get () != 0;
  }

  ::XMLSchema::string< ACE_TCHAR > const& topicQos::
  topic_filter () const
  {
    return *topic_filter_;
  }

  ::XMLSchema::string< ACE_TCHAR >& topicQos::
  topic_filter ()
  {
    return *topic_filter_;
  }

  void topicQos::
  topic_filter (::XMLSchema::string< ACE_TCHAR > const& e)
  {
    if (topic_filter_.get ())
    {
      *topic_filter_ = e;
    }

    else
    {
      topic_filter_ = ::std::auto_ptr< ::XMLSchema::string< ACE_TCHAR > > (new ::XMLSchema::string< ACE_TCHAR > (e));
      topic_filter_->container (this);
    }
  }


  // datareaderQos
  //

  datareaderQos::
  datareaderQos ()
  :
  regulator__ ()
  {
  }

  datareaderQos::
  datareaderQos (datareaderQos const& s)
  :
  ::XSCRT::Type (),
  durability_ (s.durability_.get () ? new ::dds::durabilityQosPolicy (*s.durability_) : 0),
  deadline_ (s.deadline_.get () ? new ::dds::deadlineQosPolicy (*s.deadline_) : 0),
  latency_budget_ (s.latency_budget_.get () ? new ::dds::latencyBudgetQosPolicy (*s.latency_budget_) : 0),
  liveliness_ (s.liveliness_.get () ? new ::dds::livelinessQosPolicy (*s.liveliness_) : 0),
  reliability_ (s.reliability_.get () ? new ::dds::reliabilityQosPolicy (*s.reliability_) : 0),
  destination_order_ (s.destination_order_.get () ? new ::dds::destinationOrderQosPolicy (*s.destination_order_) : 0),
  history_ (s.history_.get () ? new ::dds::historyQosPolicy (*s.history_) : 0),
  resource_limits_ (s.resource_limits_.get () ? new ::dds::resourceLimitsQosPolicy (*s.resource_limits_) : 0),
  user_data_ (s.user_data_.get () ? new ::dds::userDataQosPolicy (*s.user_data_) : 0),
  ownership_ (s.ownership_.get () ? new ::dds::ownershipQosPolicy (*s.ownership_) : 0),
  time_based_filter_ (s.time_based_filter_.get () ? new ::dds::timeBasedFilterQosPolicy (*s.time_based_filter_) : 0),
  reader_data_lifecycle_ (s.reader_data_lifecycle_.get () ? new ::dds::readerDataLifecycleQosPolicy (*s.reader_data_lifecycle_) : 0),
  name_ (s.name_.get () ? new ::XMLSchema::string< ACE_TCHAR > (*s.name_) : 0),
  base_name_ (s.base_name_.get () ? new ::XMLSchema::string< ACE_TCHAR > (*s.base_name_) : 0),
  topic_filter_ (s.topic_filter_.get () ? new ::XMLSchema::string< ACE_TCHAR > (*s.topic_filter_) : 0),
  regulator__ ()
  {
    if (durability_.get ()) durability_->container (this);
    if (deadline_.get ()) deadline_->container (this);
    if (latency_budget_.get ()) latency_budget_->container (this);
    if (liveliness_.get ()) liveliness_->container (this);
    if (reliability_.get ()) reliability_->container (this);
    if (destination_order_.get ()) destination_order_->container (this);
    if (history_.get ()) history_->container (this);
    if (resource_limits_.get ()) resource_limits_->container (this);
    if (user_data_.get ()) user_data_->container (this);
    if (ownership_.get ()) ownership_->container (this);
    if (time_based_filter_.get ()) time_based_filter_->container (this);
    if (reader_data_lifecycle_.get ()) reader_data_lifecycle_->container (this);
    if (name_.get ()) name_->container (this);
    if (base_name_.get ()) base_name_->container (this);
    if (topic_filter_.get ()) topic_filter_->container (this);
  }

  datareaderQos& datareaderQos::
  operator= (datareaderQos const& s)
  {
    if (&s != this)
    {
      if (s.durability_.get ())
        durability (*(s.durability_));
      else
        durability_.reset (0);

      if (s.deadline_.get ())
        deadline (*(s.deadline_));
      else
        deadline_.reset (0);

      if (s.latency_budget_.get ())
        latency_budget (*(s.latency_budget_));
      else
        latency_budget_.reset (0);

      if (s.liveliness_.get ())
        liveliness (*(s.liveliness_));
      else
        liveliness_.reset (0);

      if (s.reliability_.get ())
        reliability (*(s.reliability_));
      else
        reliability_.reset (0);

      if (s.destination_order_.get ())
        destination_order (*(s.destination_order_));
      else
        destination_order_.reset (0);

      if (s.history_.get ())
        history (*(s.history_));
      else
        history_.reset (0);

      if (s.resource_limits_.get ())
        resource_limits (*(s.resource_limits_));
      else
        resource_limits_.reset (0);

      if (s.user_data_.get ())
        user_data (*(s.user_data_));
      else
        user_data_.reset (0);

      if (s.ownership_.get ())
        ownership (*(s.ownership_));
      else
        ownership_.reset (0);

      if (s.time_based_filter_.get ())
        time_based_filter (*(s.time_based_filter_));
      else
        time_based_filter_.reset (0);

      if (s.reader_data_lifecycle_.get ())
        reader_data_lifecycle (*(s.reader_data_lifecycle_));
      else
        reader_data_lifecycle_.reset (0);

      if (s.name_.get ()) name (*(s.name_));
      else name_ = ::std::auto_ptr< ::XMLSchema::string< ACE_TCHAR > > (0);

      if (s.base_name_.get ()) base_name (*(s.base_name_));
      else base_name_ = ::std::auto_ptr< ::XMLSchema::string< ACE_TCHAR > > (0);

      if (s.topic_filter_.get ()) topic_filter (*(s.topic_filter_));
      else topic_filter_ = ::std::auto_ptr< ::XMLSchema::string< ACE_TCHAR > > (0);
    }

    return *this;
  }


  // datareaderQos
  //
  bool datareaderQos::
  durability_p () const
  {
    return durability_.get () != 0;
  }

  ::dds::durabilityQosPolicy const& datareaderQos::
  durability () const
  {
    return *durability_;
  }

  void datareaderQos::
  durability (::dds::durabilityQosPolicy const& e)
  {
    if (durability_.get ())
    {
      *durability_ = e;
    }

    else
    {
      durability_ = ::std::auto_ptr< ::dds::durabilityQosPolicy > (new ::dds::durabilityQosPolicy (e));
      durability_->container (this);
    }
  }

  // datareaderQos
  //
  bool datareaderQos::
  deadline_p () const
  {
    return deadline_.get () != 0;
  }

  ::dds::deadlineQosPolicy const& datareaderQos::
  deadline () const
  {
    return *deadline_;
  }

  void datareaderQos::
  deadline (::dds::deadlineQosPolicy const& e)
  {
    if (deadline_.get ())
    {
      *deadline_ = e;
    }

    else
    {
      deadline_ = ::std::auto_ptr< ::dds::deadlineQosPolicy > (new ::dds::deadlineQosPolicy (e));
      deadline_->container (this);
    }
  }

  // datareaderQos
  //
  bool datareaderQos::
  latency_budget_p () const
  {
    return latency_budget_.get () != 0;
  }

  ::dds::latencyBudgetQosPolicy const& datareaderQos::
  latency_budget () const
  {
    return *latency_budget_;
  }

  void datareaderQos::
  latency_budget (::dds::latencyBudgetQosPolicy const& e)
  {
    if (latency_budget_.get ())
    {
      *latency_budget_ = e;
    }

    else
    {
      latency_budget_ = ::std::auto_ptr< ::dds::latencyBudgetQosPolicy > (new ::dds::latencyBudgetQosPolicy (e));
      latency_budget_->container (this);
    }
  }

  // datareaderQos
  //
  bool datareaderQos::
  liveliness_p () const
  {
    return liveliness_.get () != 0;
  }

  ::dds::livelinessQosPolicy const& datareaderQos::
  liveliness () const
  {
    return *liveliness_;
  }

  void datareaderQos::
  liveliness (::dds::livelinessQosPolicy const& e)
  {
    if (liveliness_.get ())
    {
      *liveliness_ = e;
    }

    else
    {
      liveliness_ = ::std::auto_ptr< ::dds::livelinessQosPolicy > (new ::dds::livelinessQosPolicy (e));
      liveliness_->container (this);
    }
  }

  // datareaderQos
  //
  bool datareaderQos::
  reliability_p () const
  {
    return reliability_.get () != 0;
  }

  ::dds::reliabilityQosPolicy const& datareaderQos::
  reliability () const
  {
    return *reliability_;
  }

  void datareaderQos::
  reliability (::dds::reliabilityQosPolicy const& e)
  {
    if (reliability_.get ())
    {
      *reliability_ = e;
    }

    else
    {
      reliability_ = ::std::auto_ptr< ::dds::reliabilityQosPolicy > (new ::dds::reliabilityQosPolicy (e));
      reliability_->container (this);
    }
  }

  // datareaderQos
  //
  bool datareaderQos::
  destination_order_p () const
  {
    return destination_order_.get () != 0;
  }

  ::dds::destinationOrderQosPolicy const& datareaderQos::
  destination_order () const
  {
    return *destination_order_;
  }

  void datareaderQos::
  destination_order (::dds::destinationOrderQosPolicy const& e)
  {
    if (destination_order_.get ())
    {
      *destination_order_ = e;
    }

    else
    {
      destination_order_ = ::std::auto_ptr< ::dds::destinationOrderQosPolicy > (new ::dds::destinationOrderQosPolicy (e));
      destination_order_->container (this);
    }
  }

  // datareaderQos
  //
  bool datareaderQos::
  history_p () const
  {
    return history_.get () != 0;
  }

  ::dds::historyQosPolicy const& datareaderQos::
  history () const
  {
    return *history_;
  }

  void datareaderQos::
  history (::dds::historyQosPolicy const& e)
  {
    if (history_.get ())
    {
      *history_ = e;
    }

    else
    {
      history_ = ::std::auto_ptr< ::dds::historyQosPolicy > (new ::dds::historyQosPolicy (e));
      history_->container (this);
    }
  }

  // datareaderQos
  //
  bool datareaderQos::
  resource_limits_p () const
  {
    return resource_limits_.get () != 0;
  }

  ::dds::resourceLimitsQosPolicy const& datareaderQos::
  resource_limits () const
  {
    return *resource_limits_;
  }

  void datareaderQos::
  resource_limits (::dds::resourceLimitsQosPolicy const& e)
  {
    if (resource_limits_.get ())
    {
      *resource_limits_ = e;
    }

    else
    {
      resource_limits_ = ::std::auto_ptr< ::dds::resourceLimitsQosPolicy > (new ::dds::resourceLimitsQosPolicy (e));
      resource_limits_->container (this);
    }
  }

  // datareaderQos
  //
  bool datareaderQos::
  user_data_p () const
  {
    return user_data_.get () != 0;
  }

  ::dds::userDataQosPolicy const& datareaderQos::
  user_data () const
  {
    return *user_data_;
  }

  void datareaderQos::
  user_data (::dds::userDataQosPolicy const& e)
  {
    if (user_data_.get ())
    {
      *user_data_ = e;
    }

    else
    {
      user_data_ = ::std::auto_ptr< ::dds::userDataQosPolicy > (new ::dds::userDataQosPolicy (e));
      user_data_->container (this);
    }
  }

  // datareaderQos
  //
  bool datareaderQos::
  ownership_p () const
  {
    return ownership_.get () != 0;
  }

  ::dds::ownershipQosPolicy const& datareaderQos::
  ownership () const
  {
    return *ownership_;
  }

  void datareaderQos::
  ownership (::dds::ownershipQosPolicy const& e)
  {
    if (ownership_.get ())
    {
      *ownership_ = e;
    }

    else
    {
      ownership_ = ::std::auto_ptr< ::dds::ownershipQosPolicy > (new ::dds::ownershipQosPolicy (e));
      ownership_->container (this);
    }
  }

  // datareaderQos
  //
  bool datareaderQos::
  time_based_filter_p () const
  {
    return time_based_filter_.get () != 0;
  }

  ::dds::timeBasedFilterQosPolicy const& datareaderQos::
  time_based_filter () const
  {
    return *time_based_filter_;
  }

  void datareaderQos::
  time_based_filter (::dds::timeBasedFilterQosPolicy const& e)
  {
    if (time_based_filter_.get ())
    {
      *time_based_filter_ = e;
    }

    else
    {
      time_based_filter_ = ::std::auto_ptr< ::dds::timeBasedFilterQosPolicy > (new ::dds::timeBasedFilterQosPolicy (e));
      time_based_filter_->container (this);
    }
  }

  // datareaderQos
  //
  bool datareaderQos::
  reader_data_lifecycle_p () const
  {
    return reader_data_lifecycle_.get () != 0;
  }

  ::dds::readerDataLifecycleQosPolicy const& datareaderQos::
  reader_data_lifecycle () const
  {
    return *reader_data_lifecycle_;
  }

  void datareaderQos::
  reader_data_lifecycle (::dds::readerDataLifecycleQosPolicy const& e)
  {
    if (reader_data_lifecycle_.get ())
    {
      *reader_data_lifecycle_ = e;
    }

    else
    {
      reader_data_lifecycle_ = ::std::auto_ptr< ::dds::readerDataLifecycleQosPolicy > (new ::dds::readerDataLifecycleQosPolicy (e));
      reader_data_lifecycle_->container (this);
    }
  }

  // datareaderQos
  //
  bool datareaderQos::
  name_p () const
  {
    return name_.get () != 0;
  }

  ::XMLSchema::string< ACE_TCHAR > const& datareaderQos::
  name () const
  {
    return *name_;
  }

  ::XMLSchema::string< ACE_TCHAR >& datareaderQos::
  name ()
  {
    return *name_;
  }

  void datareaderQos::
  name (::XMLSchema::string< ACE_TCHAR > const& e)
  {
    if (name_.get ())
    {
      *name_ = e;
    }

    else
    {
      name_ = ::std::auto_ptr< ::XMLSchema::string< ACE_TCHAR > > (new ::XMLSchema::string< ACE_TCHAR > (e));
      name_->container (this);
    }
  }

  // datareaderQos
  //
  bool datareaderQos::
  base_name_p () const
  {
    return base_name_.get () != 0;
  }

  ::XMLSchema::string< ACE_TCHAR > const& datareaderQos::
  base_name () const
  {
    return *base_name_;
  }

  ::XMLSchema::string< ACE_TCHAR >& datareaderQos::
  base_name ()
  {
    return *base_name_;
  }

  void datareaderQos::
  base_name (::XMLSchema::string< ACE_TCHAR > const& e)
  {
    if (base_name_.get ())
    {
      *base_name_ = e;
    }

    else
    {
      base_name_ = ::std::auto_ptr< ::XMLSchema::string< ACE_TCHAR > > (new ::XMLSchema::string< ACE_TCHAR > (e));
      base_name_->container (this);
    }
  }

  // datareaderQos
  //
  bool datareaderQos::
  topic_filter_p () const
  {
    return topic_filter_.get () != 0;
  }

  ::XMLSchema::string< ACE_TCHAR > const& datareaderQos::
  topic_filter () const
  {
    return *topic_filter_;
  }

  ::XMLSchema::string< ACE_TCHAR >& datareaderQos::
  topic_filter ()
  {
    return *topic_filter_;
  }

  void datareaderQos::
  topic_filter (::XMLSchema::string< ACE_TCHAR > const& e)
  {
    if (topic_filter_.get ())
    {
      *topic_filter_ = e;
    }

    else
    {
      topic_filter_ = ::std::auto_ptr< ::XMLSchema::string< ACE_TCHAR > > (new ::XMLSchema::string< ACE_TCHAR > (e));
      topic_filter_->container (this);
    }
  }


  // datawriterQos
  //

  datawriterQos::
  datawriterQos ()
  :
  regulator__ ()
  {
  }

  datawriterQos::
  datawriterQos (datawriterQos const& s)
  :
  ::XSCRT::Type (),
  durability_ (s.durability_.get () ? new ::dds::durabilityQosPolicy (*s.durability_) : 0),
  durability_service_ (s.durability_service_.get () ? new ::dds::durabilityServiceQosPolicy (*s.durability_service_) : 0),
  deadline_ (s.deadline_.get () ? new ::dds::deadlineQosPolicy (*s.deadline_) : 0),
  latency_budget_ (s.latency_budget_.get () ? new ::dds::latencyBudgetQosPolicy (*s.latency_budget_) : 0),
  liveliness_ (s.liveliness_.get () ? new ::dds::livelinessQosPolicy (*s.liveliness_) : 0),
  reliability_ (s.reliability_.get () ? new ::dds::reliabilityQosPolicy (*s.reliability_) : 0),
  destination_order_ (s.destination_order_.get () ? new ::dds::destinationOrderQosPolicy (*s.destination_order_) : 0),
  history_ (s.history_.get () ? new ::dds::historyQosPolicy (*s.history_) : 0),
  resource_limits_ (s.resource_limits_.get () ? new ::dds::resourceLimitsQosPolicy (*s.resource_limits_) : 0),
  transport_priority_ (s.transport_priority_.get () ? new ::dds::transportPriorityQosPolicy (*s.transport_priority_) : 0),
  lifespan_ (s.lifespan_.get () ? new ::dds::lifespanQosPolicy (*s.lifespan_) : 0),
  user_data_ (s.user_data_.get () ? new ::dds::userDataQosPolicy (*s.user_data_) : 0),
  ownership_ (s.ownership_.get () ? new ::dds::ownershipQosPolicy (*s.ownership_) : 0),
  ownership_strength_ (s.ownership_strength_.get () ? new ::dds::ownershipStrengthQosPolicy (*s.ownership_strength_) : 0),
  writer_data_lifecycle_ (s.writer_data_lifecycle_.get () ? new ::dds::writerDataLifecycleQosPolicy (*s.writer_data_lifecycle_) : 0),
  name_ (s.name_.get () ? new ::XMLSchema::string< ACE_TCHAR > (*s.name_) : 0),
  base_name_ (s.base_name_.get () ? new ::XMLSchema::string< ACE_TCHAR > (*s.base_name_) : 0),
  topic_filter_ (s.topic_filter_.get () ? new ::XMLSchema::string< ACE_TCHAR > (*s.topic_filter_) : 0),
  regulator__ ()
  {
    if (durability_.get ()) durability_->container (this);
    if (durability_service_.get ()) durability_service_->container (this);
    if (deadline_.get ()) deadline_->container (this);
    if (latency_budget_.get ()) latency_budget_->container (this);
    if (liveliness_.get ()) liveliness_->container (this);
    if (reliability_.get ()) reliability_->container (this);
    if (destination_order_.get ()) destination_order_->container (this);
    if (history_.get ()) history_->container (this);
    if (resource_limits_.get ()) resource_limits_->container (this);
    if (transport_priority_.get ()) transport_priority_->container (this);
    if (lifespan_.get ()) lifespan_->container (this);
    if (user_data_.get ()) user_data_->container (this);
    if (ownership_.get ()) ownership_->container (this);
    if (ownership_strength_.get ()) ownership_strength_->container (this);
    if (writer_data_lifecycle_.get ()) writer_data_lifecycle_->container (this);
    if (name_.get ()) name_->container (this);
    if (base_name_.get ()) base_name_->container (this);
    if (topic_filter_.get ()) topic_filter_->container (this);
  }

  datawriterQos& datawriterQos::
  operator= (datawriterQos const& s)
  {
    if (&s != this)
    {
      if (s.durability_.get ())
        durability (*(s.durability_));
      else
        durability_.reset (0);

      if (s.durability_service_.get ())
        durability_service (*(s.durability_service_));
      else
        durability_service_.reset (0);

      if (s.deadline_.get ())
        deadline (*(s.deadline_));
      else
        deadline_.reset (0);

      if (s.latency_budget_.get ())
        latency_budget (*(s.latency_budget_));
      else
        latency_budget_.reset (0);

      if (s.liveliness_.get ())
        liveliness (*(s.liveliness_));
      else
        liveliness_.reset (0);

      if (s.reliability_.get ())
        reliability (*(s.reliability_));
      else
        reliability_.reset (0);

      if (s.destination_order_.get ())
        destination_order (*(s.destination_order_));
      else
        destination_order_.reset (0);

      if (s.history_.get ())
        history (*(s.history_));
      else
        history_.reset (0);

      if (s.resource_limits_.get ())
        resource_limits (*(s.resource_limits_));
      else
        resource_limits_.reset (0);

      if (s.transport_priority_.get ())
        transport_priority (*(s.transport_priority_));
      else
        transport_priority_.reset (0);

      if (s.lifespan_.get ())
        lifespan (*(s.lifespan_));
      else
        lifespan_.reset (0);

      if (s.user_data_.get ())
        user_data (*(s.user_data_));
      else
        user_data_.reset (0);

      if (s.ownership_.get ())
        ownership (*(s.ownership_));
      else
        ownership_.reset (0);

      if (s.ownership_strength_.get ())
        ownership_strength (*(s.ownership_strength_));
      else
        ownership_strength_.reset (0);

      if (s.writer_data_lifecycle_.get ())
        writer_data_lifecycle (*(s.writer_data_lifecycle_));
      else
        writer_data_lifecycle_.reset (0);

      if (s.name_.get ()) name (*(s.name_));
      else name_ = ::std::auto_ptr< ::XMLSchema::string< ACE_TCHAR > > (0);

      if (s.base_name_.get ()) base_name (*(s.base_name_));
      else base_name_ = ::std::auto_ptr< ::XMLSchema::string< ACE_TCHAR > > (0);

      if (s.topic_filter_.get ()) topic_filter (*(s.topic_filter_));
      else topic_filter_ = ::std::auto_ptr< ::XMLSchema::string< ACE_TCHAR > > (0);
    }

    return *this;
  }


  // datawriterQos
  //
  bool datawriterQos::
  durability_p () const
  {
    return durability_.get () != 0;
  }

  ::dds::durabilityQosPolicy const& datawriterQos::
  durability () const
  {
    return *durability_;
  }

  void datawriterQos::
  durability (::dds::durabilityQosPolicy const& e)
  {
    if (durability_.get ())
    {
      *durability_ = e;
    }

    else
    {
      durability_ = ::std::auto_ptr< ::dds::durabilityQosPolicy > (new ::dds::durabilityQosPolicy (e));
      durability_->container (this);
    }
  }

  // datawriterQos
  //
  bool datawriterQos::
  durability_service_p () const
  {
    return durability_service_.get () != 0;
  }

  ::dds::durabilityServiceQosPolicy const& datawriterQos::
  durability_service () const
  {
    return *durability_service_;
  }

  void datawriterQos::
  durability_service (::dds::durabilityServiceQosPolicy const& e)
  {
    if (durability_service_.get ())
    {
      *durability_service_ = e;
    }

    else
    {
      durability_service_ = ::std::auto_ptr< ::dds::durabilityServiceQosPolicy > (new ::dds::durabilityServiceQosPolicy (e));
      durability_service_->container (this);
    }
  }

  // datawriterQos
  //
  bool datawriterQos::
  deadline_p () const
  {
    return deadline_.get () != 0;
  }

  ::dds::deadlineQosPolicy const& datawriterQos::
  deadline () const
  {
    return *deadline_;
  }

  void datawriterQos::
  deadline (::dds::deadlineQosPolicy const& e)
  {
    if (deadline_.get ())
    {
      *deadline_ = e;
    }

    else
    {
      deadline_ = ::std::auto_ptr< ::dds::deadlineQosPolicy > (new ::dds::deadlineQosPolicy (e));
      deadline_->container (this);
    }
  }

  // datawriterQos
  //
  bool datawriterQos::
  latency_budget_p () const
  {
    return latency_budget_.get () != 0;
  }

  ::dds::latencyBudgetQosPolicy const& datawriterQos::
  latency_budget () const
  {
    return *latency_budget_;
  }

  void datawriterQos::
  latency_budget (::dds::latencyBudgetQosPolicy const& e)
  {
    if (latency_budget_.get ())
    {
      *latency_budget_ = e;
    }

    else
    {
      latency_budget_ = ::std::auto_ptr< ::dds::latencyBudgetQosPolicy > (new ::dds::latencyBudgetQosPolicy (e));
      latency_budget_->container (this);
    }
  }

  // datawriterQos
  //
  bool datawriterQos::
  liveliness_p () const
  {
    return liveliness_.get () != 0;
  }

  ::dds::livelinessQosPolicy const& datawriterQos::
  liveliness () const
  {
    return *liveliness_;
  }

  void datawriterQos::
  liveliness (::dds::livelinessQosPolicy const& e)
  {
    if (liveliness_.get ())
    {
      *liveliness_ = e;
    }

    else
    {
      liveliness_ = ::std::auto_ptr< ::dds::livelinessQosPolicy > (new ::dds::livelinessQosPolicy (e));
      liveliness_->container (this);
    }
  }

  // datawriterQos
  //
  bool datawriterQos::
  reliability_p () const
  {
    return reliability_.get () != 0;
  }

  ::dds::reliabilityQosPolicy const& datawriterQos::
  reliability () const
  {
    return *reliability_;
  }

  void datawriterQos::
  reliability (::dds::reliabilityQosPolicy const& e)
  {
    if (reliability_.get ())
    {
      *reliability_ = e;
    }

    else
    {
      reliability_ = ::std::auto_ptr< ::dds::reliabilityQosPolicy > (new ::dds::reliabilityQosPolicy (e));
      reliability_->container (this);
    }
  }

  // datawriterQos
  //
  bool datawriterQos::
  destination_order_p () const
  {
    return destination_order_.get () != 0;
  }

  ::dds::destinationOrderQosPolicy const& datawriterQos::
  destination_order () const
  {
    return *destination_order_;
  }

  void datawriterQos::
  destination_order (::dds::destinationOrderQosPolicy const& e)
  {
    if (destination_order_.get ())
    {
      *destination_order_ = e;
    }

    else
    {
      destination_order_ = ::std::auto_ptr< ::dds::destinationOrderQosPolicy > (new ::dds::destinationOrderQosPolicy (e));
      destination_order_->container (this);
    }
  }

  // datawriterQos
  //
  bool datawriterQos::
  history_p () const
  {
    return history_.get () != 0;
  }

  ::dds::historyQosPolicy const& datawriterQos::
  history () const
  {
    return *history_;
  }

  void datawriterQos::
  history (::dds::historyQosPolicy const& e)
  {
    if (history_.get ())
    {
      *history_ = e;
    }

    else
    {
      history_ = ::std::auto_ptr< ::dds::historyQosPolicy > (new ::dds::historyQosPolicy (e));
      history_->container (this);
    }
  }

  // datawriterQos
  //
  bool datawriterQos::
  resource_limits_p () const
  {
    return resource_limits_.get () != 0;
  }

  ::dds::resourceLimitsQosPolicy const& datawriterQos::
  resource_limits () const
  {
    return *resource_limits_;
  }

  void datawriterQos::
  resource_limits (::dds::resourceLimitsQosPolicy const& e)
  {
    if (resource_limits_.get ())
    {
      *resource_limits_ = e;
    }

    else
    {
      resource_limits_ = ::std::auto_ptr< ::dds::resourceLimitsQosPolicy > (new ::dds::resourceLimitsQosPolicy (e));
      resource_limits_->container (this);
    }
  }

  // datawriterQos
  //
  bool datawriterQos::
  transport_priority_p () const
  {
    return transport_priority_.get () != 0;
  }

  ::dds::transportPriorityQosPolicy const& datawriterQos::
  transport_priority () const
  {
    return *transport_priority_;
  }

  void datawriterQos::
  transport_priority (::dds::transportPriorityQosPolicy const& e)
  {
    if (transport_priority_.get ())
    {
      *transport_priority_ = e;
    }

    else
    {
      transport_priority_ = ::std::auto_ptr< ::dds::transportPriorityQosPolicy > (new ::dds::transportPriorityQosPolicy (e));
      transport_priority_->container (this);
    }
  }

  // datawriterQos
  //
  bool datawriterQos::
  lifespan_p () const
  {
    return lifespan_.get () != 0;
  }

  ::dds::lifespanQosPolicy const& datawriterQos::
  lifespan () const
  {
    return *lifespan_;
  }

  void datawriterQos::
  lifespan (::dds::lifespanQosPolicy const& e)
  {
    if (lifespan_.get ())
    {
      *lifespan_ = e;
    }

    else
    {
      lifespan_ = ::std::auto_ptr< ::dds::lifespanQosPolicy > (new ::dds::lifespanQosPolicy (e));
      lifespan_->container (this);
    }
  }

  // datawriterQos
  //
  bool datawriterQos::
  user_data_p () const
  {
    return user_data_.get () != 0;
  }

  ::dds::userDataQosPolicy const& datawriterQos::
  user_data () const
  {
    return *user_data_;
  }

  void datawriterQos::
  user_data (::dds::userDataQosPolicy const& e)
  {
    if (user_data_.get ())
    {
      *user_data_ = e;
    }

    else
    {
      user_data_ = ::std::auto_ptr< ::dds::userDataQosPolicy > (new ::dds::userDataQosPolicy (e));
      user_data_->container (this);
    }
  }

  // datawriterQos
  //
  bool datawriterQos::
  ownership_p () const
  {
    return ownership_.get () != 0;
  }

  ::dds::ownershipQosPolicy const& datawriterQos::
  ownership () const
  {
    return *ownership_;
  }

  void datawriterQos::
  ownership (::dds::ownershipQosPolicy const& e)
  {
    if (ownership_.get ())
    {
      *ownership_ = e;
    }

    else
    {
      ownership_ = ::std::auto_ptr< ::dds::ownershipQosPolicy > (new ::dds::ownershipQosPolicy (e));
      ownership_->container (this);
    }
  }

  // datawriterQos
  //
  bool datawriterQos::
  ownership_strength_p () const
  {
    return ownership_strength_.get () != 0;
  }

  ::dds::ownershipStrengthQosPolicy const& datawriterQos::
  ownership_strength () const
  {
    return *ownership_strength_;
  }

  void datawriterQos::
  ownership_strength (::dds::ownershipStrengthQosPolicy const& e)
  {
    if (ownership_strength_.get ())
    {
      *ownership_strength_ = e;
    }

    else
    {
      ownership_strength_ = ::std::auto_ptr< ::dds::ownershipStrengthQosPolicy > (new ::dds::ownershipStrengthQosPolicy (e));
      ownership_strength_->container (this);
    }
  }

  // datawriterQos
  //
  bool datawriterQos::
  writer_data_lifecycle_p () const
  {
    return writer_data_lifecycle_.get () != 0;
  }

  ::dds::writerDataLifecycleQosPolicy const& datawriterQos::
  writer_data_lifecycle () const
  {
    return *writer_data_lifecycle_;
  }

  void datawriterQos::
  writer_data_lifecycle (::dds::writerDataLifecycleQosPolicy const& e)
  {
    if (writer_data_lifecycle_.get ())
    {
      *writer_data_lifecycle_ = e;
    }

    else
    {
      writer_data_lifecycle_ = ::std::auto_ptr< ::dds::writerDataLifecycleQosPolicy > (new ::dds::writerDataLifecycleQosPolicy (e));
      writer_data_lifecycle_->container (this);
    }
  }

  // datawriterQos
  //
  bool datawriterQos::
  name_p () const
  {
    return name_.get () != 0;
  }

  ::XMLSchema::string< ACE_TCHAR > const& datawriterQos::
  name () const
  {
    return *name_;
  }

  ::XMLSchema::string< ACE_TCHAR >& datawriterQos::
  name ()
  {
    return *name_;
  }

  void datawriterQos::
  name (::XMLSchema::string< ACE_TCHAR > const& e)
  {
    if (name_.get ())
    {
      *name_ = e;
    }

    else
    {
      name_ = ::std::auto_ptr< ::XMLSchema::string< ACE_TCHAR > > (new ::XMLSchema::string< ACE_TCHAR > (e));
      name_->container (this);
    }
  }

  // datawriterQos
  //
  bool datawriterQos::
  base_name_p () const
  {
    return base_name_.get () != 0;
  }

  ::XMLSchema::string< ACE_TCHAR > const& datawriterQos::
  base_name () const
  {
    return *base_name_;
  }

  ::XMLSchema::string< ACE_TCHAR >& datawriterQos::
  base_name ()
  {
    return *base_name_;
  }

  void datawriterQos::
  base_name (::XMLSchema::string< ACE_TCHAR > const& e)
  {
    if (base_name_.get ())
    {
      *base_name_ = e;
    }

    else
    {
      base_name_ = ::std::auto_ptr< ::XMLSchema::string< ACE_TCHAR > > (new ::XMLSchema::string< ACE_TCHAR > (e));
      base_name_->container (this);
    }
  }

  // datawriterQos
  //
  bool datawriterQos::
  topic_filter_p () const
  {
    return topic_filter_.get () != 0;
  }

  ::XMLSchema::string< ACE_TCHAR > const& datawriterQos::
  topic_filter () const
  {
    return *topic_filter_;
  }

  ::XMLSchema::string< ACE_TCHAR >& datawriterQos::
  topic_filter ()
  {
    return *topic_filter_;
  }

  void datawriterQos::
  topic_filter (::XMLSchema::string< ACE_TCHAR > const& e)
  {
    if (topic_filter_.get ())
    {
      *topic_filter_ = e;
    }

    else
    {
      topic_filter_ = ::std::auto_ptr< ::XMLSchema::string< ACE_TCHAR > > (new ::XMLSchema::string< ACE_TCHAR > (e));
      topic_filter_->container (this);
    }
  }


  // qosProfile
  //

  qosProfile::
  qosProfile (::XMLSchema::string< ACE_TCHAR > const& name__)
  :
  name_ (new ::XMLSchema::string< ACE_TCHAR > (name__)),
  regulator__ ()
  {
    name_->container (this);
  }

  qosProfile::
  qosProfile (qosProfile const& s)
  :
  ::XSCRT::Type (),
  datareader_qos_ (s.datareader_qos_),
  datawriter_qos_ (s.datawriter_qos_),
  topic_qos_ (s.topic_qos_),
  domainparticipant_qos_ (s.domainparticipant_qos_),
  publisher_qos_ (s.publisher_qos_),
  subscriber_qos_ (s.subscriber_qos_),
  name_ (new ::XMLSchema::string< ACE_TCHAR > (*s.name_)),
  base_name_ (s.base_name_.get () ? new ::XMLSchema::string< ACE_TCHAR > (*s.base_name_) : 0),
  regulator__ ()
  {
    name_->container (this);
    if (base_name_.get ()) base_name_->container (this);
  }

  qosProfile& qosProfile::
  operator= (qosProfile const& s)
  {
    if (&s != this)
    {
      datareader_qos_ = s.datareader_qos_;

      datawriter_qos_ = s.datawriter_qos_;

      topic_qos_ = s.topic_qos_;

      domainparticipant_qos_ = s.domainparticipant_qos_;

      publisher_qos_ = s.publisher_qos_;

      subscriber_qos_ = s.subscriber_qos_;

      name (s.name ());

      if (s.base_name_.get ()) base_name (*(s.base_name_));
      else base_name_ = ::std::auto_ptr< ::XMLSchema::string< ACE_TCHAR > > (0);
    }

    return *this;
  }


  // qosProfile
  //
  qosProfile::datareader_qos_iterator qosProfile::
  begin_datareader_qos ()
  {
    return datareader_qos_.begin ();
  }

  qosProfile::datareader_qos_iterator qosProfile::
  end_datareader_qos ()
  {
    return datareader_qos_.end ();
  }

  qosProfile::datareader_qos_const_iterator qosProfile::
  begin_datareader_qos () const
  {
    return datareader_qos_.begin ();
  }

  qosProfile::datareader_qos_const_iterator qosProfile::
  end_datareader_qos () const
  {
    return datareader_qos_.end ();
  }

  void qosProfile::
  add_datareader_qos (ACE_Refcounted_Auto_Ptr < ::dds::datareaderQos, ACE_Null_Mutex >  const& e)
  {
    datareader_qos_.push_back (e);
  }

  size_t qosProfile::
  count_datareader_qos(void) const
  {
    return datareader_qos_.size ();
  }

  // qosProfile
  //
  qosProfile::datawriter_qos_iterator qosProfile::
  begin_datawriter_qos ()
  {
    return datawriter_qos_.begin ();
  }

  qosProfile::datawriter_qos_iterator qosProfile::
  end_datawriter_qos ()
  {
    return datawriter_qos_.end ();
  }

  qosProfile::datawriter_qos_const_iterator qosProfile::
  begin_datawriter_qos () const
  {
    return datawriter_qos_.begin ();
  }

  qosProfile::datawriter_qos_const_iterator qosProfile::
  end_datawriter_qos () const
  {
    return datawriter_qos_.end ();
  }

  void qosProfile::
  add_datawriter_qos (ACE_Refcounted_Auto_Ptr < ::dds::datawriterQos, ACE_Null_Mutex >  const& e)
  {
    datawriter_qos_.push_back (e);
  }

  size_t qosProfile::
  count_datawriter_qos(void) const
  {
    return datawriter_qos_.size ();
  }

  // qosProfile
  //
  qosProfile::topic_qos_iterator qosProfile::
  begin_topic_qos ()
  {
    return topic_qos_.begin ();
  }

  qosProfile::topic_qos_iterator qosProfile::
  end_topic_qos ()
  {
    return topic_qos_.end ();
  }

  qosProfile::topic_qos_const_iterator qosProfile::
  begin_topic_qos () const
  {
    return topic_qos_.begin ();
  }

  qosProfile::topic_qos_const_iterator qosProfile::
  end_topic_qos () const
  {
    return topic_qos_.end ();
  }

  void qosProfile::
  add_topic_qos (ACE_Refcounted_Auto_Ptr < ::dds::topicQos, ACE_Null_Mutex >  const& e)
  {
    topic_qos_.push_back (e);
  }

  size_t qosProfile::
  count_topic_qos(void) const
  {
    return topic_qos_.size ();
  }

  // qosProfile
  //
  qosProfile::domainparticipant_qos_iterator qosProfile::
  begin_domainparticipant_qos ()
  {
    return domainparticipant_qos_.begin ();
  }

  qosProfile::domainparticipant_qos_iterator qosProfile::
  end_domainparticipant_qos ()
  {
    return domainparticipant_qos_.end ();
  }

  qosProfile::domainparticipant_qos_const_iterator qosProfile::
  begin_domainparticipant_qos () const
  {
    return domainparticipant_qos_.begin ();
  }

  qosProfile::domainparticipant_qos_const_iterator qosProfile::
  end_domainparticipant_qos () const
  {
    return domainparticipant_qos_.end ();
  }

  void qosProfile::
  add_domainparticipant_qos (ACE_Refcounted_Auto_Ptr < ::dds::domainparticipantQos, ACE_Null_Mutex >  const& e)
  {
    domainparticipant_qos_.push_back (e);
  }

  size_t qosProfile::
  count_domainparticipant_qos(void) const
  {
    return domainparticipant_qos_.size ();
  }

  // qosProfile
  //
  qosProfile::publisher_qos_iterator qosProfile::
  begin_publisher_qos ()
  {
    return publisher_qos_.begin ();
  }

  qosProfile::publisher_qos_iterator qosProfile::
  end_publisher_qos ()
  {
    return publisher_qos_.end ();
  }

  qosProfile::publisher_qos_const_iterator qosProfile::
  begin_publisher_qos () const
  {
    return publisher_qos_.begin ();
  }

  qosProfile::publisher_qos_const_iterator qosProfile::
  end_publisher_qos () const
  {
    return publisher_qos_.end ();
  }

  void qosProfile::
  add_publisher_qos (ACE_Refcounted_Auto_Ptr < ::dds::publisherQos, ACE_Null_Mutex >  const& e)
  {
    publisher_qos_.push_back (e);
  }

  size_t qosProfile::
  count_publisher_qos(void) const
  {
    return publisher_qos_.size ();
  }

  // qosProfile
  //
  qosProfile::subscriber_qos_iterator qosProfile::
  begin_subscriber_qos ()
  {
    return subscriber_qos_.begin ();
  }

  qosProfile::subscriber_qos_iterator qosProfile::
  end_subscriber_qos ()
  {
    return subscriber_qos_.end ();
  }

  qosProfile::subscriber_qos_const_iterator qosProfile::
  begin_subscriber_qos () const
  {
    return subscriber_qos_.begin ();
  }

  qosProfile::subscriber_qos_const_iterator qosProfile::
  end_subscriber_qos () const
  {
    return subscriber_qos_.end ();
  }

  void qosProfile::
  add_subscriber_qos (ACE_Refcounted_Auto_Ptr < ::dds::subscriberQos, ACE_Null_Mutex >  const& e)
  {
    subscriber_qos_.push_back (e);
  }

  size_t qosProfile::
  count_subscriber_qos(void) const
  {
    return subscriber_qos_.size ();
  }

  // qosProfile
  //
  ::XMLSchema::string< ACE_TCHAR > const& qosProfile::
  name () const
  {
    return *name_;
  }

  ::XMLSchema::string< ACE_TCHAR >& qosProfile::
  name ()
  {
    return *name_;
  }

  void qosProfile::
  name (::XMLSchema::string< ACE_TCHAR > const& e)
  {
    *name_ = e;
  }

  // qosProfile
  //
  bool qosProfile::
  base_name_p () const
  {
    return base_name_.get () != 0;
  }

  ::XMLSchema::string< ACE_TCHAR > const& qosProfile::
  base_name () const
  {
    return *base_name_;
  }

  ::XMLSchema::string< ACE_TCHAR >& qosProfile::
  base_name ()
  {
    return *base_name_;
  }

  void qosProfile::
  base_name (::XMLSchema::string< ACE_TCHAR > const& e)
  {
    if (base_name_.get ())
    {
      *base_name_ = e;
    }

    else
    {
      base_name_ = ::std::auto_ptr< ::XMLSchema::string< ACE_TCHAR > > (new ::XMLSchema::string< ACE_TCHAR > (e));
      base_name_->container (this);
    }
  }


  // qosProfile_seq
  //

  qosProfile_seq::
  qosProfile_seq ()
  :
  regulator__ ()
  {
  }

  qosProfile_seq::
  qosProfile_seq (qosProfile_seq const& s)
  :
  ::XSCRT::Type (),
  qos_profile_ (s.qos_profile_),
  regulator__ ()
  {
  }

  qosProfile_seq& qosProfile_seq::
  operator= (qosProfile_seq const& s)
  {
    if (&s != this)
    {
      qos_profile_ = s.qos_profile_;
    }

    return *this;
  }


  // qosProfile_seq
  //
  qosProfile_seq::qos_profile_iterator qosProfile_seq::
  begin_qos_profile ()
  {
    return qos_profile_.begin ();
  }

  qosProfile_seq::qos_profile_iterator qosProfile_seq::
  end_qos_profile ()
  {
    return qos_profile_.end ();
  }

  qosProfile_seq::qos_profile_const_iterator qosProfile_seq::
  begin_qos_profile () const
  {
    return qos_profile_.begin ();
  }

  qosProfile_seq::qos_profile_const_iterator qosProfile_seq::
  end_qos_profile () const
  {
    return qos_profile_.end ();
  }

  void qosProfile_seq::
  add_qos_profile (ACE_Refcounted_Auto_Ptr < ::dds::qosProfile, ACE_Null_Mutex >  const& e)
  {
    qos_profile_.push_back (e);
  }

  size_t qosProfile_seq::
  count_qos_profile(void) const
  {
    return qos_profile_.size ();
  }
}

namespace dds
{
  // destinationOrderKind
  //

  destinationOrderKind::
  destinationOrderKind (::XSCRT::XML::Element< ACE_TCHAR > const& e)
  : ::XSCRT::Type (e)
  {
    ::std::basic_string< ACE_TCHAR > v (e.value ());

    if (v == ACE_TEXT ("BY_RECEPTION_TIMESTAMP_DESTINATIONORDER_QOS")) v_ = BY_RECEPTION_TIMESTAMP_DESTINATIONORDER_QOS_l;
    else if (v == ACE_TEXT ("BY_SOURCE_TIMESTAMP_DESTINATIONORDER_QOS")) v_ = BY_SOURCE_TIMESTAMP_DESTINATIONORDER_QOS_l;
    else
    {
    }
  }

  destinationOrderKind::
  destinationOrderKind (::XSCRT::XML::Attribute< ACE_TCHAR > const& a)
  : ::XSCRT::Type (a)
  {
    ::std::basic_string< ACE_TCHAR > v (a.value ());

    if (v == ACE_TEXT ("BY_RECEPTION_TIMESTAMP_DESTINATIONORDER_QOS")) v_ = BY_RECEPTION_TIMESTAMP_DESTINATIONORDER_QOS_l;
    else if (v == ACE_TEXT ("BY_SOURCE_TIMESTAMP_DESTINATIONORDER_QOS")) v_ = BY_SOURCE_TIMESTAMP_DESTINATIONORDER_QOS_l;
    else
    {
    }
  }

  destinationOrderKind const destinationOrderKind::BY_RECEPTION_TIMESTAMP_DESTINATIONORDER_QOS (destinationOrderKind::BY_RECEPTION_TIMESTAMP_DESTINATIONORDER_QOS_l);
  destinationOrderKind const destinationOrderKind::BY_SOURCE_TIMESTAMP_DESTINATIONORDER_QOS (destinationOrderKind::BY_SOURCE_TIMESTAMP_DESTINATIONORDER_QOS_l);

  // durabilityKind
  //

  durabilityKind::
  durabilityKind (::XSCRT::XML::Element< ACE_TCHAR > const& e)
  : ::XSCRT::Type (e)
  {
    ::std::basic_string< ACE_TCHAR > v (e.value ());

    if (v == ACE_TEXT ("VOLATILE_DURABILITY_QOS")) v_ = VOLATILE_DURABILITY_QOS_l;
    else if (v == ACE_TEXT ("TRANSIENT_LOCAL_DURABILITY_QOS")) v_ = TRANSIENT_LOCAL_DURABILITY_QOS_l;
    else if (v == ACE_TEXT ("TRANSIENT_DURABILITY_QOS")) v_ = TRANSIENT_DURABILITY_QOS_l;
    else if (v == ACE_TEXT ("PERSISTENT_DURABILITY_QOS")) v_ = PERSISTENT_DURABILITY_QOS_l;
    else
    {
    }
  }

  durabilityKind::
  durabilityKind (::XSCRT::XML::Attribute< ACE_TCHAR > const& a)
  : ::XSCRT::Type (a)
  {
    ::std::basic_string< ACE_TCHAR > v (a.value ());

    if (v == ACE_TEXT ("VOLATILE_DURABILITY_QOS")) v_ = VOLATILE_DURABILITY_QOS_l;
    else if (v == ACE_TEXT ("TRANSIENT_LOCAL_DURABILITY_QOS")) v_ = TRANSIENT_LOCAL_DURABILITY_QOS_l;
    else if (v == ACE_TEXT ("TRANSIENT_DURABILITY_QOS")) v_ = TRANSIENT_DURABILITY_QOS_l;
    else if (v == ACE_TEXT ("PERSISTENT_DURABILITY_QOS")) v_ = PERSISTENT_DURABILITY_QOS_l;
    else
    {
    }
  }

  durabilityKind const durabilityKind::VOLATILE_DURABILITY_QOS (durabilityKind::VOLATILE_DURABILITY_QOS_l);
  durabilityKind const durabilityKind::TRANSIENT_LOCAL_DURABILITY_QOS (durabilityKind::TRANSIENT_LOCAL_DURABILITY_QOS_l);
  durabilityKind const durabilityKind::TRANSIENT_DURABILITY_QOS (durabilityKind::TRANSIENT_DURABILITY_QOS_l);
  durabilityKind const durabilityKind::PERSISTENT_DURABILITY_QOS (durabilityKind::PERSISTENT_DURABILITY_QOS_l);

  // historyKind
  //

  historyKind::
  historyKind (::XSCRT::XML::Element< ACE_TCHAR > const& e)
  : ::XSCRT::Type (e)
  {
    ::std::basic_string< ACE_TCHAR > v (e.value ());

    if (v == ACE_TEXT ("KEEP_LAST_HISTORY_QOS")) v_ = KEEP_LAST_HISTORY_QOS_l;
    else if (v == ACE_TEXT ("KEEP_ALL_HISTORY_QOS")) v_ = KEEP_ALL_HISTORY_QOS_l;
    else
    {
    }
  }

  historyKind::
  historyKind (::XSCRT::XML::Attribute< ACE_TCHAR > const& a)
  : ::XSCRT::Type (a)
  {
    ::std::basic_string< ACE_TCHAR > v (a.value ());

    if (v == ACE_TEXT ("KEEP_LAST_HISTORY_QOS")) v_ = KEEP_LAST_HISTORY_QOS_l;
    else if (v == ACE_TEXT ("KEEP_ALL_HISTORY_QOS")) v_ = KEEP_ALL_HISTORY_QOS_l;
    else
    {
    }
  }

  historyKind const historyKind::KEEP_LAST_HISTORY_QOS (historyKind::KEEP_LAST_HISTORY_QOS_l);
  historyKind const historyKind::KEEP_ALL_HISTORY_QOS (historyKind::KEEP_ALL_HISTORY_QOS_l);

  // livelinessKind
  //

  livelinessKind::
  livelinessKind (::XSCRT::XML::Element< ACE_TCHAR > const& e)
  : ::XSCRT::Type (e)
  {
    ::std::basic_string< ACE_TCHAR > v (e.value ());

    if (v == ACE_TEXT ("AUTOMATIC_LIVELINESS_QOS")) v_ = AUTOMATIC_LIVELINESS_QOS_l;
    else if (v == ACE_TEXT ("MANUAL_BY_PARTICIPANT_LIVELINESS_QOS")) v_ = MANUAL_BY_PARTICIPANT_LIVELINESS_QOS_l;
    else if (v == ACE_TEXT ("MANUAL_BY_TOPIC_LIVELINESS_QOS")) v_ = MANUAL_BY_TOPIC_LIVELINESS_QOS_l;
    else
    {
    }
  }

  livelinessKind::
  livelinessKind (::XSCRT::XML::Attribute< ACE_TCHAR > const& a)
  : ::XSCRT::Type (a)
  {
    ::std::basic_string< ACE_TCHAR > v (a.value ());

    if (v == ACE_TEXT ("AUTOMATIC_LIVELINESS_QOS")) v_ = AUTOMATIC_LIVELINESS_QOS_l;
    else if (v == ACE_TEXT ("MANUAL_BY_PARTICIPANT_LIVELINESS_QOS")) v_ = MANUAL_BY_PARTICIPANT_LIVELINESS_QOS_l;
    else if (v == ACE_TEXT ("MANUAL_BY_TOPIC_LIVELINESS_QOS")) v_ = MANUAL_BY_TOPIC_LIVELINESS_QOS_l;
    else
    {
    }
  }

  livelinessKind const livelinessKind::AUTOMATIC_LIVELINESS_QOS (livelinessKind::AUTOMATIC_LIVELINESS_QOS_l);
  livelinessKind const livelinessKind::MANUAL_BY_PARTICIPANT_LIVELINESS_QOS (livelinessKind::MANUAL_BY_PARTICIPANT_LIVELINESS_QOS_l);
  livelinessKind const livelinessKind::MANUAL_BY_TOPIC_LIVELINESS_QOS (livelinessKind::MANUAL_BY_TOPIC_LIVELINESS_QOS_l);

  // presentationAccessScopeKind
  //

  presentationAccessScopeKind::
  presentationAccessScopeKind (::XSCRT::XML::Element< ACE_TCHAR > const& e)
  : ::XSCRT::Type (e)
  {
    ::std::basic_string< ACE_TCHAR > v (e.value ());

    if (v == ACE_TEXT ("INSTANCE_PRESENTATION_QOS")) v_ = INSTANCE_PRESENTATION_QOS_l;
    else if (v == ACE_TEXT ("TOPIC_PRESENTATION_QOS")) v_ = TOPIC_PRESENTATION_QOS_l;
    else if (v == ACE_TEXT ("GROUP_PRESENTATION_QOS")) v_ = GROUP_PRESENTATION_QOS_l;
    else
    {
    }
  }

  presentationAccessScopeKind::
  presentationAccessScopeKind (::XSCRT::XML::Attribute< ACE_TCHAR > const& a)
  : ::XSCRT::Type (a)
  {
    ::std::basic_string< ACE_TCHAR > v (a.value ());

    if (v == ACE_TEXT ("INSTANCE_PRESENTATION_QOS")) v_ = INSTANCE_PRESENTATION_QOS_l;
    else if (v == ACE_TEXT ("TOPIC_PRESENTATION_QOS")) v_ = TOPIC_PRESENTATION_QOS_l;
    else if (v == ACE_TEXT ("GROUP_PRESENTATION_QOS")) v_ = GROUP_PRESENTATION_QOS_l;
    else
    {
    }
  }

  presentationAccessScopeKind const presentationAccessScopeKind::INSTANCE_PRESENTATION_QOS (presentationAccessScopeKind::INSTANCE_PRESENTATION_QOS_l);
  presentationAccessScopeKind const presentationAccessScopeKind::TOPIC_PRESENTATION_QOS (presentationAccessScopeKind::TOPIC_PRESENTATION_QOS_l);
  presentationAccessScopeKind const presentationAccessScopeKind::GROUP_PRESENTATION_QOS (presentationAccessScopeKind::GROUP_PRESENTATION_QOS_l);

  // reliabilityKind
  //

  reliabilityKind::
  reliabilityKind (::XSCRT::XML::Element< ACE_TCHAR > const& e)
  : ::XSCRT::Type (e)
  {
    ::std::basic_string< ACE_TCHAR > v (e.value ());

    if (v == ACE_TEXT ("BEST_EFFORT_RELIABILITY_QOS")) v_ = BEST_EFFORT_RELIABILITY_QOS_l;
    else if (v == ACE_TEXT ("RELIABLE_RELIABILITY_QOS")) v_ = RELIABLE_RELIABILITY_QOS_l;
    else
    {
    }
  }

  reliabilityKind::
  reliabilityKind (::XSCRT::XML::Attribute< ACE_TCHAR > const& a)
  : ::XSCRT::Type (a)
  {
    ::std::basic_string< ACE_TCHAR > v (a.value ());

    if (v == ACE_TEXT ("BEST_EFFORT_RELIABILITY_QOS")) v_ = BEST_EFFORT_RELIABILITY_QOS_l;
    else if (v == ACE_TEXT ("RELIABLE_RELIABILITY_QOS")) v_ = RELIABLE_RELIABILITY_QOS_l;
    else
    {
    }
  }

  reliabilityKind const reliabilityKind::BEST_EFFORT_RELIABILITY_QOS (reliabilityKind::BEST_EFFORT_RELIABILITY_QOS_l);
  reliabilityKind const reliabilityKind::RELIABLE_RELIABILITY_QOS (reliabilityKind::RELIABLE_RELIABILITY_QOS_l);

  // ownershipKind
  //

  ownershipKind::
  ownershipKind (::XSCRT::XML::Element< ACE_TCHAR > const& e)
  : ::XSCRT::Type (e)
  {
    ::std::basic_string< ACE_TCHAR > v (e.value ());

    if (v == ACE_TEXT ("SHARED_OWNERSHIP_QOS")) v_ = SHARED_OWNERSHIP_QOS_l;
    else if (v == ACE_TEXT ("EXCLUSIVE_OWNERSHIP_QOS")) v_ = EXCLUSIVE_OWNERSHIP_QOS_l;
    else
    {
    }
  }

  ownershipKind::
  ownershipKind (::XSCRT::XML::Attribute< ACE_TCHAR > const& a)
  : ::XSCRT::Type (a)
  {
    ::std::basic_string< ACE_TCHAR > v (a.value ());

    if (v == ACE_TEXT ("SHARED_OWNERSHIP_QOS")) v_ = SHARED_OWNERSHIP_QOS_l;
    else if (v == ACE_TEXT ("EXCLUSIVE_OWNERSHIP_QOS")) v_ = EXCLUSIVE_OWNERSHIP_QOS_l;
    else
    {
    }
  }

  ownershipKind const ownershipKind::SHARED_OWNERSHIP_QOS (ownershipKind::SHARED_OWNERSHIP_QOS_l);
  ownershipKind const ownershipKind::EXCLUSIVE_OWNERSHIP_QOS (ownershipKind::EXCLUSIVE_OWNERSHIP_QOS_l);

  // duration
  //

  duration::
  duration (::XSCRT::XML::Element< ACE_TCHAR > const& e)
  :Base (e), regulator__ ()
  {

    ::XSCRT::Parser< ACE_TCHAR > p (e);

    while (p.more_elements ())
    {
      ::XSCRT::XML::Element< ACE_TCHAR > e (p.next_element ());
      ::std::basic_string< ACE_TCHAR > n (::XSCRT::XML::uq_name (e.name ()));

      if (n == "sec")
      {
        ::XMLSchema::string< ACE_TCHAR > t (e);
        sec (t);
      }

      else if (n == "nanosec")
      {
        ::XMLSchema::string< ACE_TCHAR > t (e);
        nanosec (t);
      }

      else
      {
      }
    }
  }

  // stringSeq
  //

  stringSeq::
  stringSeq (::XSCRT::XML::Element< ACE_TCHAR > const& e)
  :Base (e), regulator__ ()
  {

    ::XSCRT::Parser< ACE_TCHAR > p (e);

    while (p.more_elements ())
    {
      ::XSCRT::XML::Element< ACE_TCHAR > e (p.next_element ());
      ::std::basic_string< ACE_TCHAR > n (::XSCRT::XML::uq_name (e.name ()));

      if (n == "element")
      {
        ACE_Refcounted_Auto_Ptr < ::XMLSchema::string< ACE_TCHAR >, ACE_Null_Mutex >  t (new ::XMLSchema::string< ACE_TCHAR > (e));
        add_element (t);
      }

      else
      {
      }
    }
  }

  // deadlineQosPolicy
  //

  deadlineQosPolicy::
  deadlineQosPolicy (::XSCRT::XML::Element< ACE_TCHAR > const& e)
  :Base (e), regulator__ ()
  {

    ::XSCRT::Parser< ACE_TCHAR > p (e);

    while (p.more_elements ())
    {
      ::XSCRT::XML::Element< ACE_TCHAR > e (p.next_element ());
      ::std::basic_string< ACE_TCHAR > n (::XSCRT::XML::uq_name (e.name ()));

      if (n == "period")
      {
        ::dds::duration t (e);
        period (t);
      }

      else
      {
      }
    }
  }

  // destinationOrderQosPolicy
  //

  destinationOrderQosPolicy::
  destinationOrderQosPolicy (::XSCRT::XML::Element< ACE_TCHAR > const& e)
  :Base (e), regulator__ ()
  {

    ::XSCRT::Parser< ACE_TCHAR > p (e);

    while (p.more_elements ())
    {
      ::XSCRT::XML::Element< ACE_TCHAR > e (p.next_element ());
      ::std::basic_string< ACE_TCHAR > n (::XSCRT::XML::uq_name (e.name ()));

      if (n == "kind")
      {
        ::dds::destinationOrderKind t (e);
        kind (t);
      }

      else
      {
      }
    }
  }

  // durabilityQosPolicy
  //

  durabilityQosPolicy::
  durabilityQosPolicy (::XSCRT::XML::Element< ACE_TCHAR > const& e)
  :Base (e), regulator__ ()
  {

    ::XSCRT::Parser< ACE_TCHAR > p (e);

    while (p.more_elements ())
    {
      ::XSCRT::XML::Element< ACE_TCHAR > e (p.next_element ());
      ::std::basic_string< ACE_TCHAR > n (::XSCRT::XML::uq_name (e.name ()));

      if (n == "kind")
      {
        ::dds::durabilityKind t (e);
        kind (t);
      }

      else
      {
      }
    }
  }

  // durabilityServiceQosPolicy
  //

  durabilityServiceQosPolicy::
  durabilityServiceQosPolicy (::XSCRT::XML::Element< ACE_TCHAR > const& e)
  :Base (e), regulator__ ()
  {

    ::XSCRT::Parser< ACE_TCHAR > p (e);

    while (p.more_elements ())
    {
      ::XSCRT::XML::Element< ACE_TCHAR > e (p.next_element ());
      ::std::basic_string< ACE_TCHAR > n (::XSCRT::XML::uq_name (e.name ()));

      if (n == "service_cleanup_delay")
      {
        ::dds::duration t (e);
        service_cleanup_delay (t);
      }

      else if (n == "history_kind")
      {
        ::dds::historyKind t (e);
        history_kind (t);
      }

      else if (n == "history_depth")
      {
        ::XMLSchema::positiveInteger t (e);
        history_depth (t);
      }

      else if (n == "max_samples")
      {
        ::XMLSchema::string< ACE_TCHAR > t (e);
        max_samples (t);
      }

      else if (n == "max_instances")
      {
        ::XMLSchema::string< ACE_TCHAR > t (e);
        max_instances (t);
      }

      else if (n == "max_samples_per_instance")
      {
        ::XMLSchema::string< ACE_TCHAR > t (e);
        max_samples_per_instance (t);
      }

      else
      {
      }
    }
  }

  // entityFactoryQosPolicy
  //

  entityFactoryQosPolicy::
  entityFactoryQosPolicy (::XSCRT::XML::Element< ACE_TCHAR > const& e)
  :Base (e), regulator__ ()
  {

    ::XSCRT::Parser< ACE_TCHAR > p (e);

    while (p.more_elements ())
    {
      ::XSCRT::XML::Element< ACE_TCHAR > e (p.next_element ());
      ::std::basic_string< ACE_TCHAR > n (::XSCRT::XML::uq_name (e.name ()));

      if (n == "autoenable_created_entities")
      {
        ::XMLSchema::boolean t (e);
        autoenable_created_entities (t);
      }

      else
      {
      }
    }
  }

  // groupDataQosPolicy
  //

  groupDataQosPolicy::
  groupDataQosPolicy (::XSCRT::XML::Element< ACE_TCHAR > const& e)
  :Base (e), regulator__ ()
  {

    ::XSCRT::Parser< ACE_TCHAR > p (e);

    while (p.more_elements ())
    {
      ::XSCRT::XML::Element< ACE_TCHAR > e (p.next_element ());
      ::std::basic_string< ACE_TCHAR > n (::XSCRT::XML::uq_name (e.name ()));

      if (n == "value")
      {
        ::XMLSchema::string< ACE_TCHAR > t (e);
        value (t);
      }

      else
      {
      }
    }
  }

  // historyQosPolicy
  //

  historyQosPolicy::
  historyQosPolicy (::XSCRT::XML::Element< ACE_TCHAR > const& e)
  :Base (e), regulator__ ()
  {

    ::XSCRT::Parser< ACE_TCHAR > p (e);

    while (p.more_elements ())
    {
      ::XSCRT::XML::Element< ACE_TCHAR > e (p.next_element ());
      ::std::basic_string< ACE_TCHAR > n (::XSCRT::XML::uq_name (e.name ()));

      if (n == "kind")
      {
        ::dds::historyKind t (e);
        kind (t);
      }

      else if (n == "depth")
      {
        ::XMLSchema::positiveInteger t (e);
        depth (t);
      }

      else
      {
      }
    }
  }

  // latencyBudgetQosPolicy
  //

  latencyBudgetQosPolicy::
  latencyBudgetQosPolicy (::XSCRT::XML::Element< ACE_TCHAR > const& e)
  :Base (e), regulator__ ()
  {

    ::XSCRT::Parser< ACE_TCHAR > p (e);

    while (p.more_elements ())
    {
      ::XSCRT::XML::Element< ACE_TCHAR > e (p.next_element ());
      ::std::basic_string< ACE_TCHAR > n (::XSCRT::XML::uq_name (e.name ()));

      if (n == "duration")
      {
        ::dds::duration t (e);
        duration (t);
      }

      else
      {
      }
    }
  }

  // lifespanQosPolicy
  //

  lifespanQosPolicy::
  lifespanQosPolicy (::XSCRT::XML::Element< ACE_TCHAR > const& e)
  :Base (e), regulator__ ()
  {

    ::XSCRT::Parser< ACE_TCHAR > p (e);

    while (p.more_elements ())
    {
      ::XSCRT::XML::Element< ACE_TCHAR > e (p.next_element ());
      ::std::basic_string< ACE_TCHAR > n (::XSCRT::XML::uq_name (e.name ()));

      if (n == "duration")
      {
        ::dds::duration t (e);
        duration (t);
      }

      else
      {
      }
    }
  }

  // livelinessQosPolicy
  //

  livelinessQosPolicy::
  livelinessQosPolicy (::XSCRT::XML::Element< ACE_TCHAR > const& e)
  :Base (e), regulator__ ()
  {

    ::XSCRT::Parser< ACE_TCHAR > p (e);

    while (p.more_elements ())
    {
      ::XSCRT::XML::Element< ACE_TCHAR > e (p.next_element ());
      ::std::basic_string< ACE_TCHAR > n (::XSCRT::XML::uq_name (e.name ()));

      if (n == "kind")
      {
        ::dds::livelinessKind t (e);
        kind (t);
      }

      else if (n == "lease_duration")
      {
        ::dds::duration t (e);
        lease_duration (t);
      }

      else
      {
      }
    }
  }

  // ownershipQosPolicy
  //

  ownershipQosPolicy::
  ownershipQosPolicy (::XSCRT::XML::Element< ACE_TCHAR > const& e)
  :Base (e), regulator__ ()
  {

    ::XSCRT::Parser< ACE_TCHAR > p (e);

    while (p.more_elements ())
    {
      ::XSCRT::XML::Element< ACE_TCHAR > e (p.next_element ());
      ::std::basic_string< ACE_TCHAR > n (::XSCRT::XML::uq_name (e.name ()));

      if (n == "kind")
      {
        ::dds::ownershipKind t (e);
        kind (t);
      }

      else
      {
      }
    }
  }

  // ownershipStrengthQosPolicy
  //

  ownershipStrengthQosPolicy::
  ownershipStrengthQosPolicy (::XSCRT::XML::Element< ACE_TCHAR > const& e)
  :Base (e), regulator__ ()
  {

    ::XSCRT::Parser< ACE_TCHAR > p (e);

    while (p.more_elements ())
    {
      ::XSCRT::XML::Element< ACE_TCHAR > e (p.next_element ());
      ::std::basic_string< ACE_TCHAR > n (::XSCRT::XML::uq_name (e.name ()));

      if (n == "value")
      {
        ::XMLSchema::nonNegativeInteger t (e);
        value (t);
      }

      else
      {
      }
    }
  }

  // partitionQosPolicy
  //

  partitionQosPolicy::
  partitionQosPolicy (::XSCRT::XML::Element< ACE_TCHAR > const& e)
  :Base (e), regulator__ ()
  {

    ::XSCRT::Parser< ACE_TCHAR > p (e);

    while (p.more_elements ())
    {
      ::XSCRT::XML::Element< ACE_TCHAR > e (p.next_element ());
      ::std::basic_string< ACE_TCHAR > n (::XSCRT::XML::uq_name (e.name ()));

      if (n == "name")
      {
        ::dds::stringSeq t (e);
        name (t);
      }

      else
      {
      }
    }
  }

  // presentationQosPolicy
  //

  presentationQosPolicy::
  presentationQosPolicy (::XSCRT::XML::Element< ACE_TCHAR > const& e)
  :Base (e), regulator__ ()
  {

    ::XSCRT::Parser< ACE_TCHAR > p (e);

    while (p.more_elements ())
    {
      ::XSCRT::XML::Element< ACE_TCHAR > e (p.next_element ());
      ::std::basic_string< ACE_TCHAR > n (::XSCRT::XML::uq_name (e.name ()));

      if (n == "access_scope")
      {
        ::dds::presentationAccessScopeKind t (e);
        access_scope (t);
      }

      else if (n == "coherent_access")
      {
        ::XMLSchema::boolean t (e);
        coherent_access (t);
      }

      else if (n == "ordered_access")
      {
        ::XMLSchema::boolean t (e);
        ordered_access (t);
      }

      else
      {
      }
    }
  }

  // readerDataLifecycleQosPolicy
  //

  readerDataLifecycleQosPolicy::
  readerDataLifecycleQosPolicy (::XSCRT::XML::Element< ACE_TCHAR > const& e)
  :Base (e), regulator__ ()
  {

    ::XSCRT::Parser< ACE_TCHAR > p (e);

    while (p.more_elements ())
    {
      ::XSCRT::XML::Element< ACE_TCHAR > e (p.next_element ());
      ::std::basic_string< ACE_TCHAR > n (::XSCRT::XML::uq_name (e.name ()));

      if (n == "autopurge_nowriter_samples_delay")
      {
        ::dds::duration t (e);
        autopurge_nowriter_samples_delay (t);
      }

      else if (n == "autopurge_disposed_samples_delay")
      {
        ::dds::duration t (e);
        autopurge_disposed_samples_delay (t);
      }

      else
      {
      }
    }
  }

  // reliabilityQosPolicy
  //

  reliabilityQosPolicy::
  reliabilityQosPolicy (::XSCRT::XML::Element< ACE_TCHAR > const& e)
  :Base (e), regulator__ ()
  {

    ::XSCRT::Parser< ACE_TCHAR > p (e);

    while (p.more_elements ())
    {
      ::XSCRT::XML::Element< ACE_TCHAR > e (p.next_element ());
      ::std::basic_string< ACE_TCHAR > n (::XSCRT::XML::uq_name (e.name ()));

      if (n == "kind")
      {
        ::dds::reliabilityKind t (e);
        kind (t);
      }

      else if (n == "max_blocking_time")
      {
        ::dds::duration t (e);
        max_blocking_time (t);
      }

      else
      {
      }
    }
  }

  // resourceLimitsQosPolicy
  //

  resourceLimitsQosPolicy::
  resourceLimitsQosPolicy (::XSCRT::XML::Element< ACE_TCHAR > const& e)
  :Base (e), regulator__ ()
  {

    ::XSCRT::Parser< ACE_TCHAR > p (e);

    while (p.more_elements ())
    {
      ::XSCRT::XML::Element< ACE_TCHAR > e (p.next_element ());
      ::std::basic_string< ACE_TCHAR > n (::XSCRT::XML::uq_name (e.name ()));

      if (n == "max_samples")
      {
        ::XMLSchema::string< ACE_TCHAR > t (e);
        max_samples (t);
      }

      else if (n == "max_instances")
      {
        ::XMLSchema::string< ACE_TCHAR > t (e);
        max_instances (t);
      }

      else if (n == "max_samples_per_instance")
      {
        ::XMLSchema::string< ACE_TCHAR > t (e);
        max_samples_per_instance (t);
      }

      else if (n == "initial_samples")
      {
        ::XMLSchema::positiveInteger t (e);
        initial_samples (t);
      }

      else if (n == "initial_instances")
      {
        ::XMLSchema::positiveInteger t (e);
        initial_instances (t);
      }

      else
      {
      }
    }
  }

  // timeBasedFilterQosPolicy
  //

  timeBasedFilterQosPolicy::
  timeBasedFilterQosPolicy (::XSCRT::XML::Element< ACE_TCHAR > const& e)
  :Base (e), regulator__ ()
  {

    ::XSCRT::Parser< ACE_TCHAR > p (e);

    while (p.more_elements ())
    {
      ::XSCRT::XML::Element< ACE_TCHAR > e (p.next_element ());
      ::std::basic_string< ACE_TCHAR > n (::XSCRT::XML::uq_name (e.name ()));

      if (n == "minimum_separation")
      {
        ::dds::duration t (e);
        minimum_separation (t);
      }

      else
      {
      }
    }
  }

  // topicDataQosPolicy
  //

  topicDataQosPolicy::
  topicDataQosPolicy (::XSCRT::XML::Element< ACE_TCHAR > const& e)
  :Base (e), regulator__ ()
  {

    ::XSCRT::Parser< ACE_TCHAR > p (e);

    while (p.more_elements ())
    {
      ::XSCRT::XML::Element< ACE_TCHAR > e (p.next_element ());
      ::std::basic_string< ACE_TCHAR > n (::XSCRT::XML::uq_name (e.name ()));

      if (n == "value")
      {
        ::XMLSchema::string< ACE_TCHAR > t (e);
        value (t);
      }

      else
      {
      }
    }
  }

  // transportPriorityQosPolicy
  //

  transportPriorityQosPolicy::
  transportPriorityQosPolicy (::XSCRT::XML::Element< ACE_TCHAR > const& e)
  :Base (e), regulator__ ()
  {

    ::XSCRT::Parser< ACE_TCHAR > p (e);

    while (p.more_elements ())
    {
      ::XSCRT::XML::Element< ACE_TCHAR > e (p.next_element ());
      ::std::basic_string< ACE_TCHAR > n (::XSCRT::XML::uq_name (e.name ()));

      if (n == "value")
      {
        ::XMLSchema::nonNegativeInteger t (e);
        value (t);
      }

      else
      {
      }
    }
  }

  // userDataQosPolicy
  //

  userDataQosPolicy::
  userDataQosPolicy (::XSCRT::XML::Element< ACE_TCHAR > const& e)
  :Base (e), regulator__ ()
  {

    ::XSCRT::Parser< ACE_TCHAR > p (e);

    while (p.more_elements ())
    {
      ::XSCRT::XML::Element< ACE_TCHAR > e (p.next_element ());
      ::std::basic_string< ACE_TCHAR > n (::XSCRT::XML::uq_name (e.name ()));

      if (n == "value")
      {
        ::XMLSchema::string< ACE_TCHAR > t (e);
        value (t);
      }

      else
      {
      }
    }
  }

  // writerDataLifecycleQosPolicy
  //

  writerDataLifecycleQosPolicy::
  writerDataLifecycleQosPolicy (::XSCRT::XML::Element< ACE_TCHAR > const& e)
  :Base (e), regulator__ ()
  {

    ::XSCRT::Parser< ACE_TCHAR > p (e);

    while (p.more_elements ())
    {
      ::XSCRT::XML::Element< ACE_TCHAR > e (p.next_element ());
      ::std::basic_string< ACE_TCHAR > n (::XSCRT::XML::uq_name (e.name ()));

      if (n == "autodispose_unregistered_instances")
      {
        ::XMLSchema::boolean t (e);
        autodispose_unregistered_instances (t);
      }

      else
      {
      }
    }
  }

  // domainparticipantQos
  //

  domainparticipantQos::
  domainparticipantQos (::XSCRT::XML::Element< ACE_TCHAR > const& e)
  :Base (e), regulator__ ()
  {

    ::XSCRT::Parser< ACE_TCHAR > p (e);

    while (p.more_elements ())
    {
      ::XSCRT::XML::Element< ACE_TCHAR > e (p.next_element ());
      ::std::basic_string< ACE_TCHAR > n (::XSCRT::XML::uq_name (e.name ()));

      if (n == "user_data")
      {
        ::dds::userDataQosPolicy t (e);
        user_data (t);
      }

      else if (n == "entity_factory")
      {
        ::dds::entityFactoryQosPolicy t (e);
        entity_factory (t);
      }

      else
      {
      }
    }

    while (p.more_attributes ())
    {
      ::XSCRT::XML::Attribute< ACE_TCHAR > a (p.next_attribute ());
      ::std::basic_string< ACE_TCHAR > n (::XSCRT::XML::uq_name (a.name ()));
      if (n == ACE_TEXT ("name"))
      {
        ::XMLSchema::string< ACE_TCHAR > t (a);
        name (t);
      }

      else if (n == ACE_TEXT ("base_name"))
      {
        ::XMLSchema::string< ACE_TCHAR > t (a);
        base_name (t);
      }

      else if (n == ACE_TEXT ("topic_filter"))
      {
        ::XMLSchema::string< ACE_TCHAR > t (a);
        topic_filter (t);
      }

      else
      {
      }
    }
  }

  // publisherQos
  //

  publisherQos::
  publisherQos (::XSCRT::XML::Element< ACE_TCHAR > const& e)
  :Base (e), regulator__ ()
  {

    ::XSCRT::Parser< ACE_TCHAR > p (e);

    while (p.more_elements ())
    {
      ::XSCRT::XML::Element< ACE_TCHAR > e (p.next_element ());
      ::std::basic_string< ACE_TCHAR > n (::XSCRT::XML::uq_name (e.name ()));

      if (n == "presentation")
      {
        ::dds::presentationQosPolicy t (e);
        presentation (t);
      }

      else if (n == "partition")
      {
        ::dds::partitionQosPolicy t (e);
        partition (t);
      }

      else if (n == "group_data")
      {
        ::dds::groupDataQosPolicy t (e);
        group_data (t);
      }

      else if (n == "entity_factory")
      {
        ::dds::entityFactoryQosPolicy t (e);
        entity_factory (t);
      }

      else
      {
      }
    }

    while (p.more_attributes ())
    {
      ::XSCRT::XML::Attribute< ACE_TCHAR > a (p.next_attribute ());
      ::std::basic_string< ACE_TCHAR > n (::XSCRT::XML::uq_name (a.name ()));
      if (n == ACE_TEXT ("name"))
      {
        ::XMLSchema::string< ACE_TCHAR > t (a);
        name (t);
      }

      else if (n == ACE_TEXT ("base_name"))
      {
        ::XMLSchema::string< ACE_TCHAR > t (a);
        base_name (t);
      }

      else if (n == ACE_TEXT ("topic_filter"))
      {
        ::XMLSchema::string< ACE_TCHAR > t (a);
        topic_filter (t);
      }

      else
      {
      }
    }
  }

  // subscriberQos
  //

  subscriberQos::
  subscriberQos (::XSCRT::XML::Element< ACE_TCHAR > const& e)
  :Base (e), regulator__ ()
  {

    ::XSCRT::Parser< ACE_TCHAR > p (e);

    while (p.more_elements ())
    {
      ::XSCRT::XML::Element< ACE_TCHAR > e (p.next_element ());
      ::std::basic_string< ACE_TCHAR > n (::XSCRT::XML::uq_name (e.name ()));

      if (n == "presentation")
      {
        ::dds::presentationQosPolicy t (e);
        presentation (t);
      }

      else if (n == "partition")
      {
        ::dds::partitionQosPolicy t (e);
        partition (t);
      }

      else if (n == "group_data")
      {
        ::dds::groupDataQosPolicy t (e);
        group_data (t);
      }

      else if (n == "entity_factory")
      {
        ::dds::entityFactoryQosPolicy t (e);
        entity_factory (t);
      }

      else
      {
      }
    }

    while (p.more_attributes ())
    {
      ::XSCRT::XML::Attribute< ACE_TCHAR > a (p.next_attribute ());
      ::std::basic_string< ACE_TCHAR > n (::XSCRT::XML::uq_name (a.name ()));
      if (n == ACE_TEXT ("name"))
      {
        ::XMLSchema::string< ACE_TCHAR > t (a);
        name (t);
      }

      else if (n == ACE_TEXT ("base_name"))
      {
        ::XMLSchema::string< ACE_TCHAR > t (a);
        base_name (t);
      }

      else if (n == ACE_TEXT ("topic_filter"))
      {
        ::XMLSchema::string< ACE_TCHAR > t (a);
        topic_filter (t);
      }

      else
      {
      }
    }
  }

  // topicQos
  //

  topicQos::
  topicQos (::XSCRT::XML::Element< ACE_TCHAR > const& e)
  :Base (e), regulator__ ()
  {

    ::XSCRT::Parser< ACE_TCHAR > p (e);

    while (p.more_elements ())
    {
      ::XSCRT::XML::Element< ACE_TCHAR > e (p.next_element ());
      ::std::basic_string< ACE_TCHAR > n (::XSCRT::XML::uq_name (e.name ()));

      if (n == "topic_data")
      {
        ::dds::topicDataQosPolicy t (e);
        topic_data (t);
      }

      else if (n == "durability")
      {
        ::dds::durabilityQosPolicy t (e);
        durability (t);
      }

      else if (n == "durability_service")
      {
        ::dds::durabilityServiceQosPolicy t (e);
        durability_service (t);
      }

      else if (n == "deadline")
      {
        ::dds::deadlineQosPolicy t (e);
        deadline (t);
      }

      else if (n == "latency_budget")
      {
        ::dds::latencyBudgetQosPolicy t (e);
        latency_budget (t);
      }

      else if (n == "liveliness")
      {
        ::dds::livelinessQosPolicy t (e);
        liveliness (t);
      }

      else if (n == "reliability")
      {
        ::dds::reliabilityQosPolicy t (e);
        reliability (t);
      }

      else if (n == "destination_order")
      {
        ::dds::destinationOrderQosPolicy t (e);
        destination_order (t);
      }

      else if (n == "history")
      {
        ::dds::historyQosPolicy t (e);
        history (t);
      }

      else if (n == "resource_limits")
      {
        ::dds::resourceLimitsQosPolicy t (e);
        resource_limits (t);
      }

      else if (n == "transport_priority")
      {
        ::dds::transportPriorityQosPolicy t (e);
        transport_priority (t);
      }

      else if (n == "lifespan")
      {
        ::dds::lifespanQosPolicy t (e);
        lifespan (t);
      }

      else if (n == "ownership")
      {
        ::dds::ownershipQosPolicy t (e);
        ownership (t);
      }

      else
      {
      }
    }

    while (p.more_attributes ())
    {
      ::XSCRT::XML::Attribute< ACE_TCHAR > a (p.next_attribute ());
      ::std::basic_string< ACE_TCHAR > n (::XSCRT::XML::uq_name (a.name ()));
      if (n == ACE_TEXT ("name"))
      {
        ::XMLSchema::string< ACE_TCHAR > t (a);
        name (t);
      }

      else if (n == ACE_TEXT ("base_name"))
      {
        ::XMLSchema::string< ACE_TCHAR > t (a);
        base_name (t);
      }

      else if (n == ACE_TEXT ("topic_filter"))
      {
        ::XMLSchema::string< ACE_TCHAR > t (a);
        topic_filter (t);
      }

      else
      {
      }
    }
  }

  // datareaderQos
  //

  datareaderQos::
  datareaderQos (::XSCRT::XML::Element< ACE_TCHAR > const& e)
  :Base (e), regulator__ ()
  {

    ::XSCRT::Parser< ACE_TCHAR > p (e);

    while (p.more_elements ())
    {
      ::XSCRT::XML::Element< ACE_TCHAR > e (p.next_element ());
      ::std::basic_string< ACE_TCHAR > n (::XSCRT::XML::uq_name (e.name ()));

      if (n == "durability")
      {
        ::dds::durabilityQosPolicy t (e);
        durability (t);
      }

      else if (n == "deadline")
      {
        ::dds::deadlineQosPolicy t (e);
        deadline (t);
      }

      else if (n == "latency_budget")
      {
        ::dds::latencyBudgetQosPolicy t (e);
        latency_budget (t);
      }

      else if (n == "liveliness")
      {
        ::dds::livelinessQosPolicy t (e);
        liveliness (t);
      }

      else if (n == "reliability")
      {
        ::dds::reliabilityQosPolicy t (e);
        reliability (t);
      }

      else if (n == "destination_order")
      {
        ::dds::destinationOrderQosPolicy t (e);
        destination_order (t);
      }

      else if (n == "history")
      {
        ::dds::historyQosPolicy t (e);
        history (t);
      }

      else if (n == "resource_limits")
      {
        ::dds::resourceLimitsQosPolicy t (e);
        resource_limits (t);
      }

      else if (n == "user_data")
      {
        ::dds::userDataQosPolicy t (e);
        user_data (t);
      }

      else if (n == "ownership")
      {
        ::dds::ownershipQosPolicy t (e);
        ownership (t);
      }

      else if (n == "time_based_filter")
      {
        ::dds::timeBasedFilterQosPolicy t (e);
        time_based_filter (t);
      }

      else if (n == "reader_data_lifecycle")
      {
        ::dds::readerDataLifecycleQosPolicy t (e);
        reader_data_lifecycle (t);
      }

      else
      {
      }
    }

    while (p.more_attributes ())
    {
      ::XSCRT::XML::Attribute< ACE_TCHAR > a (p.next_attribute ());
      ::std::basic_string< ACE_TCHAR > n (::XSCRT::XML::uq_name (a.name ()));
      if (n == ACE_TEXT ("name"))
      {
        ::XMLSchema::string< ACE_TCHAR > t (a);
        name (t);
      }

      else if (n == ACE_TEXT ("base_name"))
      {
        ::XMLSchema::string< ACE_TCHAR > t (a);
        base_name (t);
      }

      else if (n == ACE_TEXT ("topic_filter"))
      {
        ::XMLSchema::string< ACE_TCHAR > t (a);
        topic_filter (t);
      }

      else
      {
      }
    }
  }

  // datawriterQos
  //

  datawriterQos::
  datawriterQos (::XSCRT::XML::Element< ACE_TCHAR > const& e)
  :Base (e), regulator__ ()
  {

    ::XSCRT::Parser< ACE_TCHAR > p (e);

    while (p.more_elements ())
    {
      ::XSCRT::XML::Element< ACE_TCHAR > e (p.next_element ());
      ::std::basic_string< ACE_TCHAR > n (::XSCRT::XML::uq_name (e.name ()));

      if (n == "durability")
      {
        ::dds::durabilityQosPolicy t (e);
        durability (t);
      }

      else if (n == "durability_service")
      {
        ::dds::durabilityServiceQosPolicy t (e);
        durability_service (t);
      }

      else if (n == "deadline")
      {
        ::dds::deadlineQosPolicy t (e);
        deadline (t);
      }

      else if (n == "latency_budget")
      {
        ::dds::latencyBudgetQosPolicy t (e);
        latency_budget (t);
      }

      else if (n == "liveliness")
      {
        ::dds::livelinessQosPolicy t (e);
        liveliness (t);
      }

      else if (n == "reliability")
      {
        ::dds::reliabilityQosPolicy t (e);
        reliability (t);
      }

      else if (n == "destination_order")
      {
        ::dds::destinationOrderQosPolicy t (e);
        destination_order (t);
      }

      else if (n == "history")
      {
        ::dds::historyQosPolicy t (e);
        history (t);
      }

      else if (n == "resource_limits")
      {
        ::dds::resourceLimitsQosPolicy t (e);
        resource_limits (t);
      }

      else if (n == "transport_priority")
      {
        ::dds::transportPriorityQosPolicy t (e);
        transport_priority (t);
      }

      else if (n == "lifespan")
      {
        ::dds::lifespanQosPolicy t (e);
        lifespan (t);
      }

      else if (n == "user_data")
      {
        ::dds::userDataQosPolicy t (e);
        user_data (t);
      }

      else if (n == "ownership")
      {
        ::dds::ownershipQosPolicy t (e);
        ownership (t);
      }

      else if (n == "ownership_strength")
      {
        ::dds::ownershipStrengthQosPolicy t (e);
        ownership_strength (t);
      }

      else if (n == "writer_data_lifecycle")
      {
        ::dds::writerDataLifecycleQosPolicy t (e);
        writer_data_lifecycle (t);
      }

      else
      {
      }
    }

    while (p.more_attributes ())
    {
      ::XSCRT::XML::Attribute< ACE_TCHAR > a (p.next_attribute ());
      ::std::basic_string< ACE_TCHAR > n (::XSCRT::XML::uq_name (a.name ()));
      if (n == ACE_TEXT ("name"))
      {
        ::XMLSchema::string< ACE_TCHAR > t (a);
        name (t);
      }

      else if (n == ACE_TEXT ("base_name"))
      {
        ::XMLSchema::string< ACE_TCHAR > t (a);
        base_name (t);
      }

      else if (n == ACE_TEXT ("topic_filter"))
      {
        ::XMLSchema::string< ACE_TCHAR > t (a);
        topic_filter (t);
      }

      else
      {
      }
    }
  }

  // qosProfile
  //

  qosProfile::
  qosProfile (::XSCRT::XML::Element< ACE_TCHAR > const& e)
  :Base (e), regulator__ ()
  {

    ::XSCRT::Parser< ACE_TCHAR > p (e);

    while (p.more_elements ())
    {
      ::XSCRT::XML::Element< ACE_TCHAR > e (p.next_element ());
      ::std::basic_string< ACE_TCHAR > n (::XSCRT::XML::uq_name (e.name ()));

      if (n == "datareader_qos")
      {
        ACE_Refcounted_Auto_Ptr < ::dds::datareaderQos, ACE_Null_Mutex >  t (new ::dds::datareaderQos (e));
        add_datareader_qos (t);
      }

      else if (n == "datawriter_qos")
      {
        ACE_Refcounted_Auto_Ptr < ::dds::datawriterQos, ACE_Null_Mutex >  t (new ::dds::datawriterQos (e));
        add_datawriter_qos (t);
      }

      else if (n == "topic_qos")
      {
        ACE_Refcounted_Auto_Ptr < ::dds::topicQos, ACE_Null_Mutex >  t (new ::dds::topicQos (e));
        add_topic_qos (t);
      }

      else if (n == "domainparticipant_qos")
      {
        ACE_Refcounted_Auto_Ptr < ::dds::domainparticipantQos, ACE_Null_Mutex >  t (new ::dds::domainparticipantQos (e));
        add_domainparticipant_qos (t);
      }

      else if (n == "publisher_qos")
      {
        ACE_Refcounted_Auto_Ptr < ::dds::publisherQos, ACE_Null_Mutex >  t (new ::dds::publisherQos (e));
        add_publisher_qos (t);
      }

      else if (n == "subscriber_qos")
      {
        ACE_Refcounted_Auto_Ptr < ::dds::subscriberQos, ACE_Null_Mutex >  t (new ::dds::subscriberQos (e));
        add_subscriber_qos (t);
      }

      else
      {
      }
    }

    while (p.more_attributes ())
    {
      ::XSCRT::XML::Attribute< ACE_TCHAR > a (p.next_attribute ());
      ::std::basic_string< ACE_TCHAR > n (::XSCRT::XML::uq_name (a.name ()));
      if (n == ACE_TEXT ("name"))
      {
        name_ = ::std::auto_ptr< ::XMLSchema::string< ACE_TCHAR > > (new ::XMLSchema::string< ACE_TCHAR > (a));
        name_->container (this);
      }

      else if (n == ACE_TEXT ("base_name"))
      {
        ::XMLSchema::string< ACE_TCHAR > t (a);
        base_name (t);
      }

      else
      {
      }
    }
  }

  // qosProfile_seq
  //

  qosProfile_seq::
  qosProfile_seq (::XSCRT::XML::Element< ACE_TCHAR > const& e)
  :Base (e), regulator__ ()
  {

    ::XSCRT::Parser< ACE_TCHAR > p (e);

    while (p.more_elements ())
    {
      ::XSCRT::XML::Element< ACE_TCHAR > e (p.next_element ());
      ::std::basic_string< ACE_TCHAR > n (::XSCRT::XML::uq_name (e.name ()));

      if (n == "qos_profile")
      {
        ACE_Refcounted_Auto_Ptr < ::dds::qosProfile, ACE_Null_Mutex >  t (new ::dds::qosProfile (e));
        add_qos_profile (t);
      }

      else
      {
      }
    }
  }
}

namespace dds
{
  namespace reader
  {
    ::dds::qosProfile_seq
    dds (xercesc::DOMDocument const* d)
    {
      //Initiate our Singleton as an ACE_TSS object (ensures thread
      //specific storage
      ID_Map::TSS_ID_Map* TSS_ID_Map (ACE_Singleton<ID_Map::TSS_ID_Map, ACE_Null_Mutex>::instance());


      ::XSCRT::XML::Element< ACE_TCHAR > e (d->getDocumentElement ());
      if (e.name () == ACE_TEXT("dds"))
      {
        ::dds::qosProfile_seq r (e);

        (*TSS_ID_Map)->resolve_idref();

        return r;
      }

      else
      {
        throw 1;
      }
    }
  }
}

#include "ace/XML_Utils/XMLSchema/TypeInfo.hpp"

namespace dds
{
  namespace
  {
    ::XMLSchema::TypeInfoInitializer < ACE_TCHAR > XMLSchemaTypeInfoInitializer_ (::XSCRT::extended_type_info_map ());

    struct destinationOrderKindTypeInfoInitializer
    {
      destinationOrderKindTypeInfoInitializer ()
      {
        ::XSCRT::TypeId id (typeid (destinationOrderKind));
        ::XSCRT::ExtendedTypeInfo nf (id);

        nf.add_base (::XSCRT::ExtendedTypeInfo::Access::public_, false, typeid (::XSCRT::Type));

        ::XSCRT::extended_type_info_map ().insert (::std::make_pair (id, nf));
      }
    };

    destinationOrderKindTypeInfoInitializer destinationOrderKindTypeInfoInitializer_;

    struct durabilityKindTypeInfoInitializer
    {
      durabilityKindTypeInfoInitializer ()
      {
        ::XSCRT::TypeId id (typeid (durabilityKind));
        ::XSCRT::ExtendedTypeInfo nf (id);

        nf.add_base (::XSCRT::ExtendedTypeInfo::Access::public_, false, typeid (::XSCRT::Type));

        ::XSCRT::extended_type_info_map ().insert (::std::make_pair (id, nf));
      }
    };

    durabilityKindTypeInfoInitializer durabilityKindTypeInfoInitializer_;

    struct historyKindTypeInfoInitializer
    {
      historyKindTypeInfoInitializer ()
      {
        ::XSCRT::TypeId id (typeid (historyKind));
        ::XSCRT::ExtendedTypeInfo nf (id);

        nf.add_base (::XSCRT::ExtendedTypeInfo::Access::public_, false, typeid (::XSCRT::Type));

        ::XSCRT::extended_type_info_map ().insert (::std::make_pair (id, nf));
      }
    };

    historyKindTypeInfoInitializer historyKindTypeInfoInitializer_;

    struct livelinessKindTypeInfoInitializer
    {
      livelinessKindTypeInfoInitializer ()
      {
        ::XSCRT::TypeId id (typeid (livelinessKind));
        ::XSCRT::ExtendedTypeInfo nf (id);

        nf.add_base (::XSCRT::ExtendedTypeInfo::Access::public_, false, typeid (::XSCRT::Type));

        ::XSCRT::extended_type_info_map ().insert (::std::make_pair (id, nf));
      }
    };

    livelinessKindTypeInfoInitializer livelinessKindTypeInfoInitializer_;

    struct presentationAccessScopeKindTypeInfoInitializer
    {
      presentationAccessScopeKindTypeInfoInitializer ()
      {
        ::XSCRT::TypeId id (typeid (presentationAccessScopeKind));
        ::XSCRT::ExtendedTypeInfo nf (id);

        nf.add_base (::XSCRT::ExtendedTypeInfo::Access::public_, false, typeid (::XSCRT::Type));

        ::XSCRT::extended_type_info_map ().insert (::std::make_pair (id, nf));
      }
    };

    presentationAccessScopeKindTypeInfoInitializer presentationAccessScopeKindTypeInfoInitializer_;

    struct reliabilityKindTypeInfoInitializer
    {
      reliabilityKindTypeInfoInitializer ()
      {
        ::XSCRT::TypeId id (typeid (reliabilityKind));
        ::XSCRT::ExtendedTypeInfo nf (id);

        nf.add_base (::XSCRT::ExtendedTypeInfo::Access::public_, false, typeid (::XSCRT::Type));

        ::XSCRT::extended_type_info_map ().insert (::std::make_pair (id, nf));
      }
    };

    reliabilityKindTypeInfoInitializer reliabilityKindTypeInfoInitializer_;

    struct ownershipKindTypeInfoInitializer
    {
      ownershipKindTypeInfoInitializer ()
      {
        ::XSCRT::TypeId id (typeid (ownershipKind));
        ::XSCRT::ExtendedTypeInfo nf (id);

        nf.add_base (::XSCRT::ExtendedTypeInfo::Access::public_, false, typeid (::XSCRT::Type));

        ::XSCRT::extended_type_info_map ().insert (::std::make_pair (id, nf));
      }
    };

    ownershipKindTypeInfoInitializer ownershipKindTypeInfoInitializer_;

    struct durationTypeInfoInitializer
    {
      durationTypeInfoInitializer ()
      {
        ::XSCRT::TypeId id (typeid (::dds::duration));
        ::XSCRT::ExtendedTypeInfo nf (id);

        nf.add_base (::XSCRT::ExtendedTypeInfo::Access::public_, false, typeid (::XSCRT::Type));
        ::XSCRT::extended_type_info_map ().insert (::std::make_pair (id, nf));
      }
    };

    durationTypeInfoInitializer durationTypeInfoInitializer_;

    struct stringSeqTypeInfoInitializer
    {
      stringSeqTypeInfoInitializer ()
      {
        ::XSCRT::TypeId id (typeid (::dds::stringSeq));
        ::XSCRT::ExtendedTypeInfo nf (id);

        nf.add_base (::XSCRT::ExtendedTypeInfo::Access::public_, false, typeid (::XSCRT::Type));
        ::XSCRT::extended_type_info_map ().insert (::std::make_pair (id, nf));
      }
    };

    stringSeqTypeInfoInitializer stringSeqTypeInfoInitializer_;

    struct deadlineQosPolicyTypeInfoInitializer
    {
      deadlineQosPolicyTypeInfoInitializer ()
      {
        ::XSCRT::TypeId id (typeid (::dds::deadlineQosPolicy));
        ::XSCRT::ExtendedTypeInfo nf (id);

        nf.add_base (::XSCRT::ExtendedTypeInfo::Access::public_, false, typeid (::XSCRT::Type));
        ::XSCRT::extended_type_info_map ().insert (::std::make_pair (id, nf));
      }
    };

    deadlineQosPolicyTypeInfoInitializer deadlineQosPolicyTypeInfoInitializer_;

    struct destinationOrderQosPolicyTypeInfoInitializer
    {
      destinationOrderQosPolicyTypeInfoInitializer ()
      {
        ::XSCRT::TypeId id (typeid (::dds::destinationOrderQosPolicy));
        ::XSCRT::ExtendedTypeInfo nf (id);

        nf.add_base (::XSCRT::ExtendedTypeInfo::Access::public_, false, typeid (::XSCRT::Type));
        ::XSCRT::extended_type_info_map ().insert (::std::make_pair (id, nf));
      }
    };

    destinationOrderQosPolicyTypeInfoInitializer destinationOrderQosPolicyTypeInfoInitializer_;

    struct durabilityQosPolicyTypeInfoInitializer
    {
      durabilityQosPolicyTypeInfoInitializer ()
      {
        ::XSCRT::TypeId id (typeid (::dds::durabilityQosPolicy));
        ::XSCRT::ExtendedTypeInfo nf (id);

        nf.add_base (::XSCRT::ExtendedTypeInfo::Access::public_, false, typeid (::XSCRT::Type));
        ::XSCRT::extended_type_info_map ().insert (::std::make_pair (id, nf));
      }
    };

    durabilityQosPolicyTypeInfoInitializer durabilityQosPolicyTypeInfoInitializer_;

    struct durabilityServiceQosPolicyTypeInfoInitializer
    {
      durabilityServiceQosPolicyTypeInfoInitializer ()
      {
        ::XSCRT::TypeId id (typeid (::dds::durabilityServiceQosPolicy));
        ::XSCRT::ExtendedTypeInfo nf (id);

        nf.add_base (::XSCRT::ExtendedTypeInfo::Access::public_, false, typeid (::XSCRT::Type));
        ::XSCRT::extended_type_info_map ().insert (::std::make_pair (id, nf));
      }
    };

    durabilityServiceQosPolicyTypeInfoInitializer durabilityServiceQosPolicyTypeInfoInitializer_;

    struct entityFactoryQosPolicyTypeInfoInitializer
    {
      entityFactoryQosPolicyTypeInfoInitializer ()
      {
        ::XSCRT::TypeId id (typeid (::dds::entityFactoryQosPolicy));
        ::XSCRT::ExtendedTypeInfo nf (id);

        nf.add_base (::XSCRT::ExtendedTypeInfo::Access::public_, false, typeid (::XSCRT::Type));
        ::XSCRT::extended_type_info_map ().insert (::std::make_pair (id, nf));
      }
    };

    entityFactoryQosPolicyTypeInfoInitializer entityFactoryQosPolicyTypeInfoInitializer_;

    struct groupDataQosPolicyTypeInfoInitializer
    {
      groupDataQosPolicyTypeInfoInitializer ()
      {
        ::XSCRT::TypeId id (typeid (::dds::groupDataQosPolicy));
        ::XSCRT::ExtendedTypeInfo nf (id);

        nf.add_base (::XSCRT::ExtendedTypeInfo::Access::public_, false, typeid (::XSCRT::Type));
        ::XSCRT::extended_type_info_map ().insert (::std::make_pair (id, nf));
      }
    };

    groupDataQosPolicyTypeInfoInitializer groupDataQosPolicyTypeInfoInitializer_;

    struct historyQosPolicyTypeInfoInitializer
    {
      historyQosPolicyTypeInfoInitializer ()
      {
        ::XSCRT::TypeId id (typeid (::dds::historyQosPolicy));
        ::XSCRT::ExtendedTypeInfo nf (id);

        nf.add_base (::XSCRT::ExtendedTypeInfo::Access::public_, false, typeid (::XSCRT::Type));
        ::XSCRT::extended_type_info_map ().insert (::std::make_pair (id, nf));
      }
    };

    historyQosPolicyTypeInfoInitializer historyQosPolicyTypeInfoInitializer_;

    struct latencyBudgetQosPolicyTypeInfoInitializer
    {
      latencyBudgetQosPolicyTypeInfoInitializer ()
      {
        ::XSCRT::TypeId id (typeid (::dds::latencyBudgetQosPolicy));
        ::XSCRT::ExtendedTypeInfo nf (id);

        nf.add_base (::XSCRT::ExtendedTypeInfo::Access::public_, false, typeid (::XSCRT::Type));
        ::XSCRT::extended_type_info_map ().insert (::std::make_pair (id, nf));
      }
    };

    latencyBudgetQosPolicyTypeInfoInitializer latencyBudgetQosPolicyTypeInfoInitializer_;

    struct lifespanQosPolicyTypeInfoInitializer
    {
      lifespanQosPolicyTypeInfoInitializer ()
      {
        ::XSCRT::TypeId id (typeid (::dds::lifespanQosPolicy));
        ::XSCRT::ExtendedTypeInfo nf (id);

        nf.add_base (::XSCRT::ExtendedTypeInfo::Access::public_, false, typeid (::XSCRT::Type));
        ::XSCRT::extended_type_info_map ().insert (::std::make_pair (id, nf));
      }
    };

    lifespanQosPolicyTypeInfoInitializer lifespanQosPolicyTypeInfoInitializer_;

    struct livelinessQosPolicyTypeInfoInitializer
    {
      livelinessQosPolicyTypeInfoInitializer ()
      {
        ::XSCRT::TypeId id (typeid (::dds::livelinessQosPolicy));
        ::XSCRT::ExtendedTypeInfo nf (id);

        nf.add_base (::XSCRT::ExtendedTypeInfo::Access::public_, false, typeid (::XSCRT::Type));
        ::XSCRT::extended_type_info_map ().insert (::std::make_pair (id, nf));
      }
    };

    livelinessQosPolicyTypeInfoInitializer livelinessQosPolicyTypeInfoInitializer_;

    struct ownershipQosPolicyTypeInfoInitializer
    {
      ownershipQosPolicyTypeInfoInitializer ()
      {
        ::XSCRT::TypeId id (typeid (::dds::ownershipQosPolicy));
        ::XSCRT::ExtendedTypeInfo nf (id);

        nf.add_base (::XSCRT::ExtendedTypeInfo::Access::public_, false, typeid (::XSCRT::Type));
        ::XSCRT::extended_type_info_map ().insert (::std::make_pair (id, nf));
      }
    };

    ownershipQosPolicyTypeInfoInitializer ownershipQosPolicyTypeInfoInitializer_;

    struct ownershipStrengthQosPolicyTypeInfoInitializer
    {
      ownershipStrengthQosPolicyTypeInfoInitializer ()
      {
        ::XSCRT::TypeId id (typeid (::dds::ownershipStrengthQosPolicy));
        ::XSCRT::ExtendedTypeInfo nf (id);

        nf.add_base (::XSCRT::ExtendedTypeInfo::Access::public_, false, typeid (::XSCRT::Type));
        ::XSCRT::extended_type_info_map ().insert (::std::make_pair (id, nf));
      }
    };

    ownershipStrengthQosPolicyTypeInfoInitializer ownershipStrengthQosPolicyTypeInfoInitializer_;

    struct partitionQosPolicyTypeInfoInitializer
    {
      partitionQosPolicyTypeInfoInitializer ()
      {
        ::XSCRT::TypeId id (typeid (::dds::partitionQosPolicy));
        ::XSCRT::ExtendedTypeInfo nf (id);

        nf.add_base (::XSCRT::ExtendedTypeInfo::Access::public_, false, typeid (::XSCRT::Type));
        ::XSCRT::extended_type_info_map ().insert (::std::make_pair (id, nf));
      }
    };

    partitionQosPolicyTypeInfoInitializer partitionQosPolicyTypeInfoInitializer_;

    struct presentationQosPolicyTypeInfoInitializer
    {
      presentationQosPolicyTypeInfoInitializer ()
      {
        ::XSCRT::TypeId id (typeid (::dds::presentationQosPolicy));
        ::XSCRT::ExtendedTypeInfo nf (id);

        nf.add_base (::XSCRT::ExtendedTypeInfo::Access::public_, false, typeid (::XSCRT::Type));
        ::XSCRT::extended_type_info_map ().insert (::std::make_pair (id, nf));
      }
    };

    presentationQosPolicyTypeInfoInitializer presentationQosPolicyTypeInfoInitializer_;

    struct readerDataLifecycleQosPolicyTypeInfoInitializer
    {
      readerDataLifecycleQosPolicyTypeInfoInitializer ()
      {
        ::XSCRT::TypeId id (typeid (::dds::readerDataLifecycleQosPolicy));
        ::XSCRT::ExtendedTypeInfo nf (id);

        nf.add_base (::XSCRT::ExtendedTypeInfo::Access::public_, false, typeid (::XSCRT::Type));
        ::XSCRT::extended_type_info_map ().insert (::std::make_pair (id, nf));
      }
    };

    readerDataLifecycleQosPolicyTypeInfoInitializer readerDataLifecycleQosPolicyTypeInfoInitializer_;

    struct reliabilityQosPolicyTypeInfoInitializer
    {
      reliabilityQosPolicyTypeInfoInitializer ()
      {
        ::XSCRT::TypeId id (typeid (::dds::reliabilityQosPolicy));
        ::XSCRT::ExtendedTypeInfo nf (id);

        nf.add_base (::XSCRT::ExtendedTypeInfo::Access::public_, false, typeid (::XSCRT::Type));
        ::XSCRT::extended_type_info_map ().insert (::std::make_pair (id, nf));
      }
    };

    reliabilityQosPolicyTypeInfoInitializer reliabilityQosPolicyTypeInfoInitializer_;

    struct resourceLimitsQosPolicyTypeInfoInitializer
    {
      resourceLimitsQosPolicyTypeInfoInitializer ()
      {
        ::XSCRT::TypeId id (typeid (::dds::resourceLimitsQosPolicy));
        ::XSCRT::ExtendedTypeInfo nf (id);

        nf.add_base (::XSCRT::ExtendedTypeInfo::Access::public_, false, typeid (::XSCRT::Type));
        ::XSCRT::extended_type_info_map ().insert (::std::make_pair (id, nf));
      }
    };

    resourceLimitsQosPolicyTypeInfoInitializer resourceLimitsQosPolicyTypeInfoInitializer_;

    struct timeBasedFilterQosPolicyTypeInfoInitializer
    {
      timeBasedFilterQosPolicyTypeInfoInitializer ()
      {
        ::XSCRT::TypeId id (typeid (::dds::timeBasedFilterQosPolicy));
        ::XSCRT::ExtendedTypeInfo nf (id);

        nf.add_base (::XSCRT::ExtendedTypeInfo::Access::public_, false, typeid (::XSCRT::Type));
        ::XSCRT::extended_type_info_map ().insert (::std::make_pair (id, nf));
      }
    };

    timeBasedFilterQosPolicyTypeInfoInitializer timeBasedFilterQosPolicyTypeInfoInitializer_;

    struct topicDataQosPolicyTypeInfoInitializer
    {
      topicDataQosPolicyTypeInfoInitializer ()
      {
        ::XSCRT::TypeId id (typeid (::dds::topicDataQosPolicy));
        ::XSCRT::ExtendedTypeInfo nf (id);

        nf.add_base (::XSCRT::ExtendedTypeInfo::Access::public_, false, typeid (::XSCRT::Type));
        ::XSCRT::extended_type_info_map ().insert (::std::make_pair (id, nf));
      }
    };

    topicDataQosPolicyTypeInfoInitializer topicDataQosPolicyTypeInfoInitializer_;

    struct transportPriorityQosPolicyTypeInfoInitializer
    {
      transportPriorityQosPolicyTypeInfoInitializer ()
      {
        ::XSCRT::TypeId id (typeid (::dds::transportPriorityQosPolicy));
        ::XSCRT::ExtendedTypeInfo nf (id);

        nf.add_base (::XSCRT::ExtendedTypeInfo::Access::public_, false, typeid (::XSCRT::Type));
        ::XSCRT::extended_type_info_map ().insert (::std::make_pair (id, nf));
      }
    };

    transportPriorityQosPolicyTypeInfoInitializer transportPriorityQosPolicyTypeInfoInitializer_;

    struct userDataQosPolicyTypeInfoInitializer
    {
      userDataQosPolicyTypeInfoInitializer ()
      {
        ::XSCRT::TypeId id (typeid (::dds::userDataQosPolicy));
        ::XSCRT::ExtendedTypeInfo nf (id);

        nf.add_base (::XSCRT::ExtendedTypeInfo::Access::public_, false, typeid (::XSCRT::Type));
        ::XSCRT::extended_type_info_map ().insert (::std::make_pair (id, nf));
      }
    };

    userDataQosPolicyTypeInfoInitializer userDataQosPolicyTypeInfoInitializer_;

    struct writerDataLifecycleQosPolicyTypeInfoInitializer
    {
      writerDataLifecycleQosPolicyTypeInfoInitializer ()
      {
        ::XSCRT::TypeId id (typeid (::dds::writerDataLifecycleQosPolicy));
        ::XSCRT::ExtendedTypeInfo nf (id);

        nf.add_base (::XSCRT::ExtendedTypeInfo::Access::public_, false, typeid (::XSCRT::Type));
        ::XSCRT::extended_type_info_map ().insert (::std::make_pair (id, nf));
      }
    };

    writerDataLifecycleQosPolicyTypeInfoInitializer writerDataLifecycleQosPolicyTypeInfoInitializer_;

    struct domainparticipantQosTypeInfoInitializer
    {
      domainparticipantQosTypeInfoInitializer ()
      {
        ::XSCRT::TypeId id (typeid (::dds::domainparticipantQos));
        ::XSCRT::ExtendedTypeInfo nf (id);

        nf.add_base (::XSCRT::ExtendedTypeInfo::Access::public_, false, typeid (::XSCRT::Type));
        ::XSCRT::extended_type_info_map ().insert (::std::make_pair (id, nf));
      }
    };

    domainparticipantQosTypeInfoInitializer domainparticipantQosTypeInfoInitializer_;

    struct publisherQosTypeInfoInitializer
    {
      publisherQosTypeInfoInitializer ()
      {
        ::XSCRT::TypeId id (typeid (::dds::publisherQos));
        ::XSCRT::ExtendedTypeInfo nf (id);

        nf.add_base (::XSCRT::ExtendedTypeInfo::Access::public_, false, typeid (::XSCRT::Type));
        ::XSCRT::extended_type_info_map ().insert (::std::make_pair (id, nf));
      }
    };

    publisherQosTypeInfoInitializer publisherQosTypeInfoInitializer_;

    struct subscriberQosTypeInfoInitializer
    {
      subscriberQosTypeInfoInitializer ()
      {
        ::XSCRT::TypeId id (typeid (::dds::subscriberQos));
        ::XSCRT::ExtendedTypeInfo nf (id);

        nf.add_base (::XSCRT::ExtendedTypeInfo::Access::public_, false, typeid (::XSCRT::Type));
        ::XSCRT::extended_type_info_map ().insert (::std::make_pair (id, nf));
      }
    };

    subscriberQosTypeInfoInitializer subscriberQosTypeInfoInitializer_;

    struct topicQosTypeInfoInitializer
    {
      topicQosTypeInfoInitializer ()
      {
        ::XSCRT::TypeId id (typeid (::dds::topicQos));
        ::XSCRT::ExtendedTypeInfo nf (id);

        nf.add_base (::XSCRT::ExtendedTypeInfo::Access::public_, false, typeid (::XSCRT::Type));
        ::XSCRT::extended_type_info_map ().insert (::std::make_pair (id, nf));
      }
    };

    topicQosTypeInfoInitializer topicQosTypeInfoInitializer_;

    struct datareaderQosTypeInfoInitializer
    {
      datareaderQosTypeInfoInitializer ()
      {
        ::XSCRT::TypeId id (typeid (::dds::datareaderQos));
        ::XSCRT::ExtendedTypeInfo nf (id);

        nf.add_base (::XSCRT::ExtendedTypeInfo::Access::public_, false, typeid (::XSCRT::Type));
        ::XSCRT::extended_type_info_map ().insert (::std::make_pair (id, nf));
      }
    };

    datareaderQosTypeInfoInitializer datareaderQosTypeInfoInitializer_;

    struct datawriterQosTypeInfoInitializer
    {
      datawriterQosTypeInfoInitializer ()
      {
        ::XSCRT::TypeId id (typeid (::dds::datawriterQos));
        ::XSCRT::ExtendedTypeInfo nf (id);

        nf.add_base (::XSCRT::ExtendedTypeInfo::Access::public_, false, typeid (::XSCRT::Type));
        ::XSCRT::extended_type_info_map ().insert (::std::make_pair (id, nf));
      }
    };

    datawriterQosTypeInfoInitializer datawriterQosTypeInfoInitializer_;

    struct qosProfileTypeInfoInitializer
    {
      qosProfileTypeInfoInitializer ()
      {
        ::XSCRT::TypeId id (typeid (::dds::qosProfile));
        ::XSCRT::ExtendedTypeInfo nf (id);

        nf.add_base (::XSCRT::ExtendedTypeInfo::Access::public_, false, typeid (::XSCRT::Type));
        ::XSCRT::extended_type_info_map ().insert (::std::make_pair (id, nf));
      }
    };

    qosProfileTypeInfoInitializer qosProfileTypeInfoInitializer_;

    struct qosProfile_seqTypeInfoInitializer
    {
      qosProfile_seqTypeInfoInitializer ()
      {
        ::XSCRT::TypeId id (typeid (::dds::qosProfile_seq));
        ::XSCRT::ExtendedTypeInfo nf (id);

        nf.add_base (::XSCRT::ExtendedTypeInfo::Access::public_, false, typeid (::XSCRT::Type));
        ::XSCRT::extended_type_info_map ().insert (::std::make_pair (id, nf));
      }
    };

    qosProfile_seqTypeInfoInitializer qosProfile_seqTypeInfoInitializer_;
  }
}

namespace dds
{
  namespace Traversal
  {
    // duration
    //
    //

    void duration::
    traverse (Type& o)
    {
      pre (o);
      if (o.sec_p ()) sec (o);
      else sec_none (o);
      if (o.nanosec_p ()) nanosec (o);
      else nanosec_none (o);
      post (o);
    }

    void duration::
    traverse (Type const& o)
    {
      pre (o);
      if (o.sec_p ()) sec (o);
      else sec_none (o);
      if (o.nanosec_p ()) nanosec (o);
      else nanosec_none (o);
      post (o);
    }

    void duration::
    pre (Type&)
    {
    }

    void duration::
    pre (Type const&)
    {
    }

    void duration::
    sec (Type& o)
    {
      dispatch (o.sec ());
    }

    void duration::
    sec (Type const& o)
    {
      dispatch (o.sec ());
    }

    void duration::
    sec_none (Type&)
    {
    }

    void duration::
    sec_none (Type const&)
    {
    }

    void duration::
    nanosec (Type& o)
    {
      dispatch (o.nanosec ());
    }

    void duration::
    nanosec (Type const& o)
    {
      dispatch (o.nanosec ());
    }

    void duration::
    nanosec_none (Type&)
    {
    }

    void duration::
    nanosec_none (Type const&)
    {
    }

    void duration::
    post (Type&)
    {
    }

    void duration::
    post (Type const&)
    {
    }

    // stringSeq
    //
    //

    void stringSeq::
    traverse (Type& o)
    {
      pre (o);
      element (o);
      post (o);
    }

    void stringSeq::
    traverse (Type const& o)
    {
      pre (o);
      element (o);
      post (o);
    }

    void stringSeq::
    pre (Type&)
    {
    }

    void stringSeq::
    pre (Type const&)
    {
    }

    void stringSeq::
    element (Type& o)
    {
      // VC6 anathema strikes again
      //
      ::dds::stringSeq::element_iterator b (o.begin_element()), e (o.end_element());

      if (b != e)
      {
        element_pre (o);
        for (; b != e;)
        {
          dispatch (*(*b));
          if (++b != e) element_next (o);
        }

        element_post (o);
      }

      else element_none (o);
    }

    void stringSeq::
    element (Type const& o)
    {
      // VC6 anathema strikes again
      //
      ::dds::stringSeq::element_const_iterator b (o.begin_element()), e (o.end_element());

      if (b != e)
      {
        element_pre (o);
        for (; b != e;)
        {
          dispatch (*(*b));
          if (++b != e) element_next (o);
        }

        element_post (o);
      }

      else element_none (o);
    }

    void stringSeq::
    element_pre (Type&)
    {
    }

    void stringSeq::
    element_pre (Type const&)
    {
    }

    void stringSeq::
    element_next (Type&)
    {
    }

    void stringSeq::
    element_next (Type const&)
    {
    }

    void stringSeq::
    element_post (Type&)
    {
    }

    void stringSeq::
    element_post (Type const&)
    {
    }

    void stringSeq::
    element_none (Type&)
    {
    }

    void stringSeq::
    element_none (Type const&)
    {
    }

    void stringSeq::
    post (Type&)
    {
    }

    void stringSeq::
    post (Type const&)
    {
    }

    // deadlineQosPolicy
    //
    //

    void deadlineQosPolicy::
    traverse (Type& o)
    {
      pre (o);
      if (o.period_p ()) period (o);
      else period_none (o);
      post (o);
    }

    void deadlineQosPolicy::
    traverse (Type const& o)
    {
      pre (o);
      if (o.period_p ()) period (o);
      else period_none (o);
      post (o);
    }

    void deadlineQosPolicy::
    pre (Type&)
    {
    }

    void deadlineQosPolicy::
    pre (Type const&)
    {
    }

    void deadlineQosPolicy::
    period (Type& o)
    {
      dispatch (o.period ());
    }

    void deadlineQosPolicy::
    period (Type const& o)
    {
      dispatch (o.period ());
    }

    void deadlineQosPolicy::
    period_none (Type&)
    {
    }

    void deadlineQosPolicy::
    period_none (Type const&)
    {
    }

    void deadlineQosPolicy::
    post (Type&)
    {
    }

    void deadlineQosPolicy::
    post (Type const&)
    {
    }

    // destinationOrderQosPolicy
    //
    //

    void destinationOrderQosPolicy::
    traverse (Type& o)
    {
      pre (o);
      if (o.kind_p ()) kind (o);
      else kind_none (o);
      post (o);
    }

    void destinationOrderQosPolicy::
    traverse (Type const& o)
    {
      pre (o);
      if (o.kind_p ()) kind (o);
      else kind_none (o);
      post (o);
    }

    void destinationOrderQosPolicy::
    pre (Type&)
    {
    }

    void destinationOrderQosPolicy::
    pre (Type const&)
    {
    }

    void destinationOrderQosPolicy::
    kind (Type& o)
    {
      dispatch (o.kind ());
    }

    void destinationOrderQosPolicy::
    kind (Type const& o)
    {
      dispatch (o.kind ());
    }

    void destinationOrderQosPolicy::
    kind_none (Type&)
    {
    }

    void destinationOrderQosPolicy::
    kind_none (Type const&)
    {
    }

    void destinationOrderQosPolicy::
    post (Type&)
    {
    }

    void destinationOrderQosPolicy::
    post (Type const&)
    {
    }

    // durabilityQosPolicy
    //
    //

    void durabilityQosPolicy::
    traverse (Type& o)
    {
      pre (o);
      if (o.kind_p ()) kind (o);
      else kind_none (o);
      post (o);
    }

    void durabilityQosPolicy::
    traverse (Type const& o)
    {
      pre (o);
      if (o.kind_p ()) kind (o);
      else kind_none (o);
      post (o);
    }

    void durabilityQosPolicy::
    pre (Type&)
    {
    }

    void durabilityQosPolicy::
    pre (Type const&)
    {
    }

    void durabilityQosPolicy::
    kind (Type& o)
    {
      dispatch (o.kind ());
    }

    void durabilityQosPolicy::
    kind (Type const& o)
    {
      dispatch (o.kind ());
    }

    void durabilityQosPolicy::
    kind_none (Type&)
    {
    }

    void durabilityQosPolicy::
    kind_none (Type const&)
    {
    }

    void durabilityQosPolicy::
    post (Type&)
    {
    }

    void durabilityQosPolicy::
    post (Type const&)
    {
    }

    // durabilityServiceQosPolicy
    //
    //

    void durabilityServiceQosPolicy::
    traverse (Type& o)
    {
      pre (o);
      if (o.service_cleanup_delay_p ()) service_cleanup_delay (o);
      else service_cleanup_delay_none (o);
      if (o.history_kind_p ()) history_kind (o);
      else history_kind_none (o);
      if (o.history_depth_p ()) history_depth (o);
      else history_depth_none (o);
      if (o.max_samples_p ()) max_samples (o);
      else max_samples_none (o);
      if (o.max_instances_p ()) max_instances (o);
      else max_instances_none (o);
      if (o.max_samples_per_instance_p ()) max_samples_per_instance (o);
      else max_samples_per_instance_none (o);
      post (o);
    }

    void durabilityServiceQosPolicy::
    traverse (Type const& o)
    {
      pre (o);
      if (o.service_cleanup_delay_p ()) service_cleanup_delay (o);
      else service_cleanup_delay_none (o);
      if (o.history_kind_p ()) history_kind (o);
      else history_kind_none (o);
      if (o.history_depth_p ()) history_depth (o);
      else history_depth_none (o);
      if (o.max_samples_p ()) max_samples (o);
      else max_samples_none (o);
      if (o.max_instances_p ()) max_instances (o);
      else max_instances_none (o);
      if (o.max_samples_per_instance_p ()) max_samples_per_instance (o);
      else max_samples_per_instance_none (o);
      post (o);
    }

    void durabilityServiceQosPolicy::
    pre (Type&)
    {
    }

    void durabilityServiceQosPolicy::
    pre (Type const&)
    {
    }

    void durabilityServiceQosPolicy::
    service_cleanup_delay (Type& o)
    {
      dispatch (o.service_cleanup_delay ());
    }

    void durabilityServiceQosPolicy::
    service_cleanup_delay (Type const& o)
    {
      dispatch (o.service_cleanup_delay ());
    }

    void durabilityServiceQosPolicy::
    service_cleanup_delay_none (Type&)
    {
    }

    void durabilityServiceQosPolicy::
    service_cleanup_delay_none (Type const&)
    {
    }

    void durabilityServiceQosPolicy::
    history_kind (Type& o)
    {
      dispatch (o.history_kind ());
    }

    void durabilityServiceQosPolicy::
    history_kind (Type const& o)
    {
      dispatch (o.history_kind ());
    }

    void durabilityServiceQosPolicy::
    history_kind_none (Type&)
    {
    }

    void durabilityServiceQosPolicy::
    history_kind_none (Type const&)
    {
    }

    void durabilityServiceQosPolicy::
    history_depth (Type& o)
    {
      dispatch (o.history_depth ());
    }

    void durabilityServiceQosPolicy::
    history_depth (Type const& o)
    {
      dispatch (o.history_depth ());
    }

    void durabilityServiceQosPolicy::
    history_depth_none (Type&)
    {
    }

    void durabilityServiceQosPolicy::
    history_depth_none (Type const&)
    {
    }

    void durabilityServiceQosPolicy::
    max_samples (Type& o)
    {
      dispatch (o.max_samples ());
    }

    void durabilityServiceQosPolicy::
    max_samples (Type const& o)
    {
      dispatch (o.max_samples ());
    }

    void durabilityServiceQosPolicy::
    max_samples_none (Type&)
    {
    }

    void durabilityServiceQosPolicy::
    max_samples_none (Type const&)
    {
    }

    void durabilityServiceQosPolicy::
    max_instances (Type& o)
    {
      dispatch (o.max_instances ());
    }

    void durabilityServiceQosPolicy::
    max_instances (Type const& o)
    {
      dispatch (o.max_instances ());
    }

    void durabilityServiceQosPolicy::
    max_instances_none (Type&)
    {
    }

    void durabilityServiceQosPolicy::
    max_instances_none (Type const&)
    {
    }

    void durabilityServiceQosPolicy::
    max_samples_per_instance (Type& o)
    {
      dispatch (o.max_samples_per_instance ());
    }

    void durabilityServiceQosPolicy::
    max_samples_per_instance (Type const& o)
    {
      dispatch (o.max_samples_per_instance ());
    }

    void durabilityServiceQosPolicy::
    max_samples_per_instance_none (Type&)
    {
    }

    void durabilityServiceQosPolicy::
    max_samples_per_instance_none (Type const&)
    {
    }

    void durabilityServiceQosPolicy::
    post (Type&)
    {
    }

    void durabilityServiceQosPolicy::
    post (Type const&)
    {
    }

    // entityFactoryQosPolicy
    //
    //

    void entityFactoryQosPolicy::
    traverse (Type& o)
    {
      pre (o);
      if (o.autoenable_created_entities_p ()) autoenable_created_entities (o);
      else autoenable_created_entities_none (o);
      post (o);
    }

    void entityFactoryQosPolicy::
    traverse (Type const& o)
    {
      pre (o);
      if (o.autoenable_created_entities_p ()) autoenable_created_entities (o);
      else autoenable_created_entities_none (o);
      post (o);
    }

    void entityFactoryQosPolicy::
    pre (Type&)
    {
    }

    void entityFactoryQosPolicy::
    pre (Type const&)
    {
    }

    void entityFactoryQosPolicy::
    autoenable_created_entities (Type& o)
    {
      dispatch (o.autoenable_created_entities ());
    }

    void entityFactoryQosPolicy::
    autoenable_created_entities (Type const& o)
    {
      dispatch (o.autoenable_created_entities ());
    }

    void entityFactoryQosPolicy::
    autoenable_created_entities_none (Type&)
    {
    }

    void entityFactoryQosPolicy::
    autoenable_created_entities_none (Type const&)
    {
    }

    void entityFactoryQosPolicy::
    post (Type&)
    {
    }

    void entityFactoryQosPolicy::
    post (Type const&)
    {
    }

    // groupDataQosPolicy
    //
    //

    void groupDataQosPolicy::
    traverse (Type& o)
    {
      pre (o);
      if (o.value_p ()) value (o);
      else value_none (o);
      post (o);
    }

    void groupDataQosPolicy::
    traverse (Type const& o)
    {
      pre (o);
      if (o.value_p ()) value (o);
      else value_none (o);
      post (o);
    }

    void groupDataQosPolicy::
    pre (Type&)
    {
    }

    void groupDataQosPolicy::
    pre (Type const&)
    {
    }

    void groupDataQosPolicy::
    value (Type& o)
    {
      dispatch (o.value ());
    }

    void groupDataQosPolicy::
    value (Type const& o)
    {
      dispatch (o.value ());
    }

    void groupDataQosPolicy::
    value_none (Type&)
    {
    }

    void groupDataQosPolicy::
    value_none (Type const&)
    {
    }

    void groupDataQosPolicy::
    post (Type&)
    {
    }

    void groupDataQosPolicy::
    post (Type const&)
    {
    }

    // historyQosPolicy
    //
    //

    void historyQosPolicy::
    traverse (Type& o)
    {
      pre (o);
      if (o.kind_p ()) kind (o);
      else kind_none (o);
      if (o.depth_p ()) depth (o);
      else depth_none (o);
      post (o);
    }

    void historyQosPolicy::
    traverse (Type const& o)
    {
      pre (o);
      if (o.kind_p ()) kind (o);
      else kind_none (o);
      if (o.depth_p ()) depth (o);
      else depth_none (o);
      post (o);
    }

    void historyQosPolicy::
    pre (Type&)
    {
    }

    void historyQosPolicy::
    pre (Type const&)
    {
    }

    void historyQosPolicy::
    kind (Type& o)
    {
      dispatch (o.kind ());
    }

    void historyQosPolicy::
    kind (Type const& o)
    {
      dispatch (o.kind ());
    }

    void historyQosPolicy::
    kind_none (Type&)
    {
    }

    void historyQosPolicy::
    kind_none (Type const&)
    {
    }

    void historyQosPolicy::
    depth (Type& o)
    {
      dispatch (o.depth ());
    }

    void historyQosPolicy::
    depth (Type const& o)
    {
      dispatch (o.depth ());
    }

    void historyQosPolicy::
    depth_none (Type&)
    {
    }

    void historyQosPolicy::
    depth_none (Type const&)
    {
    }

    void historyQosPolicy::
    post (Type&)
    {
    }

    void historyQosPolicy::
    post (Type const&)
    {
    }

    // latencyBudgetQosPolicy
    //
    //

    void latencyBudgetQosPolicy::
    traverse (Type& o)
    {
      pre (o);
      if (o.duration_p ()) duration (o);
      else duration_none (o);
      post (o);
    }

    void latencyBudgetQosPolicy::
    traverse (Type const& o)
    {
      pre (o);
      if (o.duration_p ()) duration (o);
      else duration_none (o);
      post (o);
    }

    void latencyBudgetQosPolicy::
    pre (Type&)
    {
    }

    void latencyBudgetQosPolicy::
    pre (Type const&)
    {
    }

    void latencyBudgetQosPolicy::
    duration (Type& o)
    {
      dispatch (o.duration ());
    }

    void latencyBudgetQosPolicy::
    duration (Type const& o)
    {
      dispatch (o.duration ());
    }

    void latencyBudgetQosPolicy::
    duration_none (Type&)
    {
    }

    void latencyBudgetQosPolicy::
    duration_none (Type const&)
    {
    }

    void latencyBudgetQosPolicy::
    post (Type&)
    {
    }

    void latencyBudgetQosPolicy::
    post (Type const&)
    {
    }

    // lifespanQosPolicy
    //
    //

    void lifespanQosPolicy::
    traverse (Type& o)
    {
      pre (o);
      if (o.duration_p ()) duration (o);
      else duration_none (o);
      post (o);
    }

    void lifespanQosPolicy::
    traverse (Type const& o)
    {
      pre (o);
      if (o.duration_p ()) duration (o);
      else duration_none (o);
      post (o);
    }

    void lifespanQosPolicy::
    pre (Type&)
    {
    }

    void lifespanQosPolicy::
    pre (Type const&)
    {
    }

    void lifespanQosPolicy::
    duration (Type& o)
    {
      dispatch (o.duration ());
    }

    void lifespanQosPolicy::
    duration (Type const& o)
    {
      dispatch (o.duration ());
    }

    void lifespanQosPolicy::
    duration_none (Type&)
    {
    }

    void lifespanQosPolicy::
    duration_none (Type const&)
    {
    }

    void lifespanQosPolicy::
    post (Type&)
    {
    }

    void lifespanQosPolicy::
    post (Type const&)
    {
    }

    // livelinessQosPolicy
    //
    //

    void livelinessQosPolicy::
    traverse (Type& o)
    {
      pre (o);
      if (o.kind_p ()) kind (o);
      else kind_none (o);
      if (o.lease_duration_p ()) lease_duration (o);
      else lease_duration_none (o);
      post (o);
    }

    void livelinessQosPolicy::
    traverse (Type const& o)
    {
      pre (o);
      if (o.kind_p ()) kind (o);
      else kind_none (o);
      if (o.lease_duration_p ()) lease_duration (o);
      else lease_duration_none (o);
      post (o);
    }

    void livelinessQosPolicy::
    pre (Type&)
    {
    }

    void livelinessQosPolicy::
    pre (Type const&)
    {
    }

    void livelinessQosPolicy::
    kind (Type& o)
    {
      dispatch (o.kind ());
    }

    void livelinessQosPolicy::
    kind (Type const& o)
    {
      dispatch (o.kind ());
    }

    void livelinessQosPolicy::
    kind_none (Type&)
    {
    }

    void livelinessQosPolicy::
    kind_none (Type const&)
    {
    }

    void livelinessQosPolicy::
    lease_duration (Type& o)
    {
      dispatch (o.lease_duration ());
    }

    void livelinessQosPolicy::
    lease_duration (Type const& o)
    {
      dispatch (o.lease_duration ());
    }

    void livelinessQosPolicy::
    lease_duration_none (Type&)
    {
    }

    void livelinessQosPolicy::
    lease_duration_none (Type const&)
    {
    }

    void livelinessQosPolicy::
    post (Type&)
    {
    }

    void livelinessQosPolicy::
    post (Type const&)
    {
    }

    // ownershipQosPolicy
    //
    //

    void ownershipQosPolicy::
    traverse (Type& o)
    {
      pre (o);
      if (o.kind_p ()) kind (o);
      else kind_none (o);
      post (o);
    }

    void ownershipQosPolicy::
    traverse (Type const& o)
    {
      pre (o);
      if (o.kind_p ()) kind (o);
      else kind_none (o);
      post (o);
    }

    void ownershipQosPolicy::
    pre (Type&)
    {
    }

    void ownershipQosPolicy::
    pre (Type const&)
    {
    }

    void ownershipQosPolicy::
    kind (Type& o)
    {
      dispatch (o.kind ());
    }

    void ownershipQosPolicy::
    kind (Type const& o)
    {
      dispatch (o.kind ());
    }

    void ownershipQosPolicy::
    kind_none (Type&)
    {
    }

    void ownershipQosPolicy::
    kind_none (Type const&)
    {
    }

    void ownershipQosPolicy::
    post (Type&)
    {
    }

    void ownershipQosPolicy::
    post (Type const&)
    {
    }

    // ownershipStrengthQosPolicy
    //
    //

    void ownershipStrengthQosPolicy::
    traverse (Type& o)
    {
      pre (o);
      if (o.value_p ()) value (o);
      else value_none (o);
      post (o);
    }

    void ownershipStrengthQosPolicy::
    traverse (Type const& o)
    {
      pre (o);
      if (o.value_p ()) value (o);
      else value_none (o);
      post (o);
    }

    void ownershipStrengthQosPolicy::
    pre (Type&)
    {
    }

    void ownershipStrengthQosPolicy::
    pre (Type const&)
    {
    }

    void ownershipStrengthQosPolicy::
    value (Type& o)
    {
      dispatch (o.value ());
    }

    void ownershipStrengthQosPolicy::
    value (Type const& o)
    {
      dispatch (o.value ());
    }

    void ownershipStrengthQosPolicy::
    value_none (Type&)
    {
    }

    void ownershipStrengthQosPolicy::
    value_none (Type const&)
    {
    }

    void ownershipStrengthQosPolicy::
    post (Type&)
    {
    }

    void ownershipStrengthQosPolicy::
    post (Type const&)
    {
    }

    // partitionQosPolicy
    //
    //

    void partitionQosPolicy::
    traverse (Type& o)
    {
      pre (o);
      if (o.name_p ()) name (o);
      else name_none (o);
      post (o);
    }

    void partitionQosPolicy::
    traverse (Type const& o)
    {
      pre (o);
      if (o.name_p ()) name (o);
      else name_none (o);
      post (o);
    }

    void partitionQosPolicy::
    pre (Type&)
    {
    }

    void partitionQosPolicy::
    pre (Type const&)
    {
    }

    void partitionQosPolicy::
    name (Type& o)
    {
      dispatch (o.name ());
    }

    void partitionQosPolicy::
    name (Type const& o)
    {
      dispatch (o.name ());
    }

    void partitionQosPolicy::
    name_none (Type&)
    {
    }

    void partitionQosPolicy::
    name_none (Type const&)
    {
    }

    void partitionQosPolicy::
    post (Type&)
    {
    }

    void partitionQosPolicy::
    post (Type const&)
    {
    }

    // presentationQosPolicy
    //
    //

    void presentationQosPolicy::
    traverse (Type& o)
    {
      pre (o);
      if (o.access_scope_p ()) access_scope (o);
      else access_scope_none (o);
      if (o.coherent_access_p ()) coherent_access (o);
      else coherent_access_none (o);
      if (o.ordered_access_p ()) ordered_access (o);
      else ordered_access_none (o);
      post (o);
    }

    void presentationQosPolicy::
    traverse (Type const& o)
    {
      pre (o);
      if (o.access_scope_p ()) access_scope (o);
      else access_scope_none (o);
      if (o.coherent_access_p ()) coherent_access (o);
      else coherent_access_none (o);
      if (o.ordered_access_p ()) ordered_access (o);
      else ordered_access_none (o);
      post (o);
    }

    void presentationQosPolicy::
    pre (Type&)
    {
    }

    void presentationQosPolicy::
    pre (Type const&)
    {
    }

    void presentationQosPolicy::
    access_scope (Type& o)
    {
      dispatch (o.access_scope ());
    }

    void presentationQosPolicy::
    access_scope (Type const& o)
    {
      dispatch (o.access_scope ());
    }

    void presentationQosPolicy::
    access_scope_none (Type&)
    {
    }

    void presentationQosPolicy::
    access_scope_none (Type const&)
    {
    }

    void presentationQosPolicy::
    coherent_access (Type& o)
    {
      dispatch (o.coherent_access ());
    }

    void presentationQosPolicy::
    coherent_access (Type const& o)
    {
      dispatch (o.coherent_access ());
    }

    void presentationQosPolicy::
    coherent_access_none (Type&)
    {
    }

    void presentationQosPolicy::
    coherent_access_none (Type const&)
    {
    }

    void presentationQosPolicy::
    ordered_access (Type& o)
    {
      dispatch (o.ordered_access ());
    }

    void presentationQosPolicy::
    ordered_access (Type const& o)
    {
      dispatch (o.ordered_access ());
    }

    void presentationQosPolicy::
    ordered_access_none (Type&)
    {
    }

    void presentationQosPolicy::
    ordered_access_none (Type const&)
    {
    }

    void presentationQosPolicy::
    post (Type&)
    {
    }

    void presentationQosPolicy::
    post (Type const&)
    {
    }

    // readerDataLifecycleQosPolicy
    //
    //

    void readerDataLifecycleQosPolicy::
    traverse (Type& o)
    {
      pre (o);
      if (o.autopurge_nowriter_samples_delay_p ()) autopurge_nowriter_samples_delay (o);
      else autopurge_nowriter_samples_delay_none (o);
      if (o.autopurge_disposed_samples_delay_p ()) autopurge_disposed_samples_delay (o);
      else autopurge_disposed_samples_delay_none (o);
      post (o);
    }

    void readerDataLifecycleQosPolicy::
    traverse (Type const& o)
    {
      pre (o);
      if (o.autopurge_nowriter_samples_delay_p ()) autopurge_nowriter_samples_delay (o);
      else autopurge_nowriter_samples_delay_none (o);
      if (o.autopurge_disposed_samples_delay_p ()) autopurge_disposed_samples_delay (o);
      else autopurge_disposed_samples_delay_none (o);
      post (o);
    }

    void readerDataLifecycleQosPolicy::
    pre (Type&)
    {
    }

    void readerDataLifecycleQosPolicy::
    pre (Type const&)
    {
    }

    void readerDataLifecycleQosPolicy::
    autopurge_nowriter_samples_delay (Type& o)
    {
      dispatch (o.autopurge_nowriter_samples_delay ());
    }

    void readerDataLifecycleQosPolicy::
    autopurge_nowriter_samples_delay (Type const& o)
    {
      dispatch (o.autopurge_nowriter_samples_delay ());
    }

    void readerDataLifecycleQosPolicy::
    autopurge_nowriter_samples_delay_none (Type&)
    {
    }

    void readerDataLifecycleQosPolicy::
    autopurge_nowriter_samples_delay_none (Type const&)
    {
    }

    void readerDataLifecycleQosPolicy::
    autopurge_disposed_samples_delay (Type& o)
    {
      dispatch (o.autopurge_disposed_samples_delay ());
    }

    void readerDataLifecycleQosPolicy::
    autopurge_disposed_samples_delay (Type const& o)
    {
      dispatch (o.autopurge_disposed_samples_delay ());
    }

    void readerDataLifecycleQosPolicy::
    autopurge_disposed_samples_delay_none (Type&)
    {
    }

    void readerDataLifecycleQosPolicy::
    autopurge_disposed_samples_delay_none (Type const&)
    {
    }

    void readerDataLifecycleQosPolicy::
    post (Type&)
    {
    }

    void readerDataLifecycleQosPolicy::
    post (Type const&)
    {
    }

    // reliabilityQosPolicy
    //
    //

    void reliabilityQosPolicy::
    traverse (Type& o)
    {
      pre (o);
      if (o.kind_p ()) kind (o);
      else kind_none (o);
      if (o.max_blocking_time_p ()) max_blocking_time (o);
      else max_blocking_time_none (o);
      post (o);
    }

    void reliabilityQosPolicy::
    traverse (Type const& o)
    {
      pre (o);
      if (o.kind_p ()) kind (o);
      else kind_none (o);
      if (o.max_blocking_time_p ()) max_blocking_time (o);
      else max_blocking_time_none (o);
      post (o);
    }

    void reliabilityQosPolicy::
    pre (Type&)
    {
    }

    void reliabilityQosPolicy::
    pre (Type const&)
    {
    }

    void reliabilityQosPolicy::
    kind (Type& o)
    {
      dispatch (o.kind ());
    }

    void reliabilityQosPolicy::
    kind (Type const& o)
    {
      dispatch (o.kind ());
    }

    void reliabilityQosPolicy::
    kind_none (Type&)
    {
    }

    void reliabilityQosPolicy::
    kind_none (Type const&)
    {
    }

    void reliabilityQosPolicy::
    max_blocking_time (Type& o)
    {
      dispatch (o.max_blocking_time ());
    }

    void reliabilityQosPolicy::
    max_blocking_time (Type const& o)
    {
      dispatch (o.max_blocking_time ());
    }

    void reliabilityQosPolicy::
    max_blocking_time_none (Type&)
    {
    }

    void reliabilityQosPolicy::
    max_blocking_time_none (Type const&)
    {
    }

    void reliabilityQosPolicy::
    post (Type&)
    {
    }

    void reliabilityQosPolicy::
    post (Type const&)
    {
    }

    // resourceLimitsQosPolicy
    //
    //

    void resourceLimitsQosPolicy::
    traverse (Type& o)
    {
      pre (o);
      if (o.max_samples_p ()) max_samples (o);
      else max_samples_none (o);
      if (o.max_instances_p ()) max_instances (o);
      else max_instances_none (o);
      if (o.max_samples_per_instance_p ()) max_samples_per_instance (o);
      else max_samples_per_instance_none (o);
      if (o.initial_samples_p ()) initial_samples (o);
      else initial_samples_none (o);
      if (o.initial_instances_p ()) initial_instances (o);
      else initial_instances_none (o);
      post (o);
    }

    void resourceLimitsQosPolicy::
    traverse (Type const& o)
    {
      pre (o);
      if (o.max_samples_p ()) max_samples (o);
      else max_samples_none (o);
      if (o.max_instances_p ()) max_instances (o);
      else max_instances_none (o);
      if (o.max_samples_per_instance_p ()) max_samples_per_instance (o);
      else max_samples_per_instance_none (o);
      if (o.initial_samples_p ()) initial_samples (o);
      else initial_samples_none (o);
      if (o.initial_instances_p ()) initial_instances (o);
      else initial_instances_none (o);
      post (o);
    }

    void resourceLimitsQosPolicy::
    pre (Type&)
    {
    }

    void resourceLimitsQosPolicy::
    pre (Type const&)
    {
    }

    void resourceLimitsQosPolicy::
    max_samples (Type& o)
    {
      dispatch (o.max_samples ());
    }

    void resourceLimitsQosPolicy::
    max_samples (Type const& o)
    {
      dispatch (o.max_samples ());
    }

    void resourceLimitsQosPolicy::
    max_samples_none (Type&)
    {
    }

    void resourceLimitsQosPolicy::
    max_samples_none (Type const&)
    {
    }

    void resourceLimitsQosPolicy::
    max_instances (Type& o)
    {
      dispatch (o.max_instances ());
    }

    void resourceLimitsQosPolicy::
    max_instances (Type const& o)
    {
      dispatch (o.max_instances ());
    }

    void resourceLimitsQosPolicy::
    max_instances_none (Type&)
    {
    }

    void resourceLimitsQosPolicy::
    max_instances_none (Type const&)
    {
    }

    void resourceLimitsQosPolicy::
    max_samples_per_instance (Type& o)
    {
      dispatch (o.max_samples_per_instance ());
    }

    void resourceLimitsQosPolicy::
    max_samples_per_instance (Type const& o)
    {
      dispatch (o.max_samples_per_instance ());
    }

    void resourceLimitsQosPolicy::
    max_samples_per_instance_none (Type&)
    {
    }

    void resourceLimitsQosPolicy::
    max_samples_per_instance_none (Type const&)
    {
    }

    void resourceLimitsQosPolicy::
    initial_samples (Type& o)
    {
      dispatch (o.initial_samples ());
    }

    void resourceLimitsQosPolicy::
    initial_samples (Type const& o)
    {
      dispatch (o.initial_samples ());
    }

    void resourceLimitsQosPolicy::
    initial_samples_none (Type&)
    {
    }

    void resourceLimitsQosPolicy::
    initial_samples_none (Type const&)
    {
    }

    void resourceLimitsQosPolicy::
    initial_instances (Type& o)
    {
      dispatch (o.initial_instances ());
    }

    void resourceLimitsQosPolicy::
    initial_instances (Type const& o)
    {
      dispatch (o.initial_instances ());
    }

    void resourceLimitsQosPolicy::
    initial_instances_none (Type&)
    {
    }

    void resourceLimitsQosPolicy::
    initial_instances_none (Type const&)
    {
    }

    void resourceLimitsQosPolicy::
    post (Type&)
    {
    }

    void resourceLimitsQosPolicy::
    post (Type const&)
    {
    }

    // timeBasedFilterQosPolicy
    //
    //

    void timeBasedFilterQosPolicy::
    traverse (Type& o)
    {
      pre (o);
      if (o.minimum_separation_p ()) minimum_separation (o);
      else minimum_separation_none (o);
      post (o);
    }

    void timeBasedFilterQosPolicy::
    traverse (Type const& o)
    {
      pre (o);
      if (o.minimum_separation_p ()) minimum_separation (o);
      else minimum_separation_none (o);
      post (o);
    }

    void timeBasedFilterQosPolicy::
    pre (Type&)
    {
    }

    void timeBasedFilterQosPolicy::
    pre (Type const&)
    {
    }

    void timeBasedFilterQosPolicy::
    minimum_separation (Type& o)
    {
      dispatch (o.minimum_separation ());
    }

    void timeBasedFilterQosPolicy::
    minimum_separation (Type const& o)
    {
      dispatch (o.minimum_separation ());
    }

    void timeBasedFilterQosPolicy::
    minimum_separation_none (Type&)
    {
    }

    void timeBasedFilterQosPolicy::
    minimum_separation_none (Type const&)
    {
    }

    void timeBasedFilterQosPolicy::
    post (Type&)
    {
    }

    void timeBasedFilterQosPolicy::
    post (Type const&)
    {
    }

    // topicDataQosPolicy
    //
    //

    void topicDataQosPolicy::
    traverse (Type& o)
    {
      pre (o);
      if (o.value_p ()) value (o);
      else value_none (o);
      post (o);
    }

    void topicDataQosPolicy::
    traverse (Type const& o)
    {
      pre (o);
      if (o.value_p ()) value (o);
      else value_none (o);
      post (o);
    }

    void topicDataQosPolicy::
    pre (Type&)
    {
    }

    void topicDataQosPolicy::
    pre (Type const&)
    {
    }

    void topicDataQosPolicy::
    value (Type& o)
    {
      dispatch (o.value ());
    }

    void topicDataQosPolicy::
    value (Type const& o)
    {
      dispatch (o.value ());
    }

    void topicDataQosPolicy::
    value_none (Type&)
    {
    }

    void topicDataQosPolicy::
    value_none (Type const&)
    {
    }

    void topicDataQosPolicy::
    post (Type&)
    {
    }

    void topicDataQosPolicy::
    post (Type const&)
    {
    }

    // transportPriorityQosPolicy
    //
    //

    void transportPriorityQosPolicy::
    traverse (Type& o)
    {
      pre (o);
      if (o.value_p ()) value (o);
      else value_none (o);
      post (o);
    }

    void transportPriorityQosPolicy::
    traverse (Type const& o)
    {
      pre (o);
      if (o.value_p ()) value (o);
      else value_none (o);
      post (o);
    }

    void transportPriorityQosPolicy::
    pre (Type&)
    {
    }

    void transportPriorityQosPolicy::
    pre (Type const&)
    {
    }

    void transportPriorityQosPolicy::
    value (Type& o)
    {
      dispatch (o.value ());
    }

    void transportPriorityQosPolicy::
    value (Type const& o)
    {
      dispatch (o.value ());
    }

    void transportPriorityQosPolicy::
    value_none (Type&)
    {
    }

    void transportPriorityQosPolicy::
    value_none (Type const&)
    {
    }

    void transportPriorityQosPolicy::
    post (Type&)
    {
    }

    void transportPriorityQosPolicy::
    post (Type const&)
    {
    }

    // userDataQosPolicy
    //
    //

    void userDataQosPolicy::
    traverse (Type& o)
    {
      pre (o);
      if (o.value_p ()) value (o);
      else value_none (o);
      post (o);
    }

    void userDataQosPolicy::
    traverse (Type const& o)
    {
      pre (o);
      if (o.value_p ()) value (o);
      else value_none (o);
      post (o);
    }

    void userDataQosPolicy::
    pre (Type&)
    {
    }

    void userDataQosPolicy::
    pre (Type const&)
    {
    }

    void userDataQosPolicy::
    value (Type& o)
    {
      dispatch (o.value ());
    }

    void userDataQosPolicy::
    value (Type const& o)
    {
      dispatch (o.value ());
    }

    void userDataQosPolicy::
    value_none (Type&)
    {
    }

    void userDataQosPolicy::
    value_none (Type const&)
    {
    }

    void userDataQosPolicy::
    post (Type&)
    {
    }

    void userDataQosPolicy::
    post (Type const&)
    {
    }

    // writerDataLifecycleQosPolicy
    //
    //

    void writerDataLifecycleQosPolicy::
    traverse (Type& o)
    {
      pre (o);
      if (o.autodispose_unregistered_instances_p ()) autodispose_unregistered_instances (o);
      else autodispose_unregistered_instances_none (o);
      post (o);
    }

    void writerDataLifecycleQosPolicy::
    traverse (Type const& o)
    {
      pre (o);
      if (o.autodispose_unregistered_instances_p ()) autodispose_unregistered_instances (o);
      else autodispose_unregistered_instances_none (o);
      post (o);
    }

    void writerDataLifecycleQosPolicy::
    pre (Type&)
    {
    }

    void writerDataLifecycleQosPolicy::
    pre (Type const&)
    {
    }

    void writerDataLifecycleQosPolicy::
    autodispose_unregistered_instances (Type& o)
    {
      dispatch (o.autodispose_unregistered_instances ());
    }

    void writerDataLifecycleQosPolicy::
    autodispose_unregistered_instances (Type const& o)
    {
      dispatch (o.autodispose_unregistered_instances ());
    }

    void writerDataLifecycleQosPolicy::
    autodispose_unregistered_instances_none (Type&)
    {
    }

    void writerDataLifecycleQosPolicy::
    autodispose_unregistered_instances_none (Type const&)
    {
    }

    void writerDataLifecycleQosPolicy::
    post (Type&)
    {
    }

    void writerDataLifecycleQosPolicy::
    post (Type const&)
    {
    }

    // domainparticipantQos
    //
    //

    void domainparticipantQos::
    traverse (Type& o)
    {
      pre (o);
      if (o.user_data_p ()) user_data (o);
      else user_data_none (o);
      if (o.entity_factory_p ()) entity_factory (o);
      else entity_factory_none (o);
      if (o.name_p ()) name (o);
      else name_none (o);
      if (o.base_name_p ()) base_name (o);
      else base_name_none (o);
      if (o.topic_filter_p ()) topic_filter (o);
      else topic_filter_none (o);
      post (o);
    }

    void domainparticipantQos::
    traverse (Type const& o)
    {
      pre (o);
      if (o.user_data_p ()) user_data (o);
      else user_data_none (o);
      if (o.entity_factory_p ()) entity_factory (o);
      else entity_factory_none (o);
      if (o.name_p ()) name (o);
      else name_none (o);
      if (o.base_name_p ()) base_name (o);
      else base_name_none (o);
      if (o.topic_filter_p ()) topic_filter (o);
      else topic_filter_none (o);
      post (o);
    }

    void domainparticipantQos::
    pre (Type&)
    {
    }

    void domainparticipantQos::
    pre (Type const&)
    {
    }

    void domainparticipantQos::
    user_data (Type& o)
    {
      dispatch (o.user_data ());
    }

    void domainparticipantQos::
    user_data (Type const& o)
    {
      dispatch (o.user_data ());
    }

    void domainparticipantQos::
    user_data_none (Type&)
    {
    }

    void domainparticipantQos::
    user_data_none (Type const&)
    {
    }

    void domainparticipantQos::
    entity_factory (Type& o)
    {
      dispatch (o.entity_factory ());
    }

    void domainparticipantQos::
    entity_factory (Type const& o)
    {
      dispatch (o.entity_factory ());
    }

    void domainparticipantQos::
    entity_factory_none (Type&)
    {
    }

    void domainparticipantQos::
    entity_factory_none (Type const&)
    {
    }

    void domainparticipantQos::
    name (Type& o)
    {
      dispatch (o.name ());
    }

    void domainparticipantQos::
    name (Type const& o)
    {
      dispatch (o.name ());
    }

    void domainparticipantQos::
    name_none (Type&)
    {
    }

    void domainparticipantQos::
    name_none (Type const&)
    {
    }

    void domainparticipantQos::
    base_name (Type& o)
    {
      dispatch (o.base_name ());
    }

    void domainparticipantQos::
    base_name (Type const& o)
    {
      dispatch (o.base_name ());
    }

    void domainparticipantQos::
    base_name_none (Type&)
    {
    }

    void domainparticipantQos::
    base_name_none (Type const&)
    {
    }

    void domainparticipantQos::
    topic_filter (Type& o)
    {
      dispatch (o.topic_filter ());
    }

    void domainparticipantQos::
    topic_filter (Type const& o)
    {
      dispatch (o.topic_filter ());
    }

    void domainparticipantQos::
    topic_filter_none (Type&)
    {
    }

    void domainparticipantQos::
    topic_filter_none (Type const&)
    {
    }

    void domainparticipantQos::
    post (Type&)
    {
    }

    void domainparticipantQos::
    post (Type const&)
    {
    }

    // publisherQos
    //
    //

    void publisherQos::
    traverse (Type& o)
    {
      pre (o);
      if (o.presentation_p ()) presentation (o);
      else presentation_none (o);
      if (o.partition_p ()) partition (o);
      else partition_none (o);
      if (o.group_data_p ()) group_data (o);
      else group_data_none (o);
      if (o.entity_factory_p ()) entity_factory (o);
      else entity_factory_none (o);
      if (o.name_p ()) name (o);
      else name_none (o);
      if (o.base_name_p ()) base_name (o);
      else base_name_none (o);
      if (o.topic_filter_p ()) topic_filter (o);
      else topic_filter_none (o);
      post (o);
    }

    void publisherQos::
    traverse (Type const& o)
    {
      pre (o);
      if (o.presentation_p ()) presentation (o);
      else presentation_none (o);
      if (o.partition_p ()) partition (o);
      else partition_none (o);
      if (o.group_data_p ()) group_data (o);
      else group_data_none (o);
      if (o.entity_factory_p ()) entity_factory (o);
      else entity_factory_none (o);
      if (o.name_p ()) name (o);
      else name_none (o);
      if (o.base_name_p ()) base_name (o);
      else base_name_none (o);
      if (o.topic_filter_p ()) topic_filter (o);
      else topic_filter_none (o);
      post (o);
    }

    void publisherQos::
    pre (Type&)
    {
    }

    void publisherQos::
    pre (Type const&)
    {
    }

    void publisherQos::
    presentation (Type& o)
    {
      dispatch (o.presentation ());
    }

    void publisherQos::
    presentation (Type const& o)
    {
      dispatch (o.presentation ());
    }

    void publisherQos::
    presentation_none (Type&)
    {
    }

    void publisherQos::
    presentation_none (Type const&)
    {
    }

    void publisherQos::
    partition (Type& o)
    {
      dispatch (o.partition ());
    }

    void publisherQos::
    partition (Type const& o)
    {
      dispatch (o.partition ());
    }

    void publisherQos::
    partition_none (Type&)
    {
    }

    void publisherQos::
    partition_none (Type const&)
    {
    }

    void publisherQos::
    group_data (Type& o)
    {
      dispatch (o.group_data ());
    }

    void publisherQos::
    group_data (Type const& o)
    {
      dispatch (o.group_data ());
    }

    void publisherQos::
    group_data_none (Type&)
    {
    }

    void publisherQos::
    group_data_none (Type const&)
    {
    }

    void publisherQos::
    entity_factory (Type& o)
    {
      dispatch (o.entity_factory ());
    }

    void publisherQos::
    entity_factory (Type const& o)
    {
      dispatch (o.entity_factory ());
    }

    void publisherQos::
    entity_factory_none (Type&)
    {
    }

    void publisherQos::
    entity_factory_none (Type const&)
    {
    }

    void publisherQos::
    name (Type& o)
    {
      dispatch (o.name ());
    }

    void publisherQos::
    name (Type const& o)
    {
      dispatch (o.name ());
    }

    void publisherQos::
    name_none (Type&)
    {
    }

    void publisherQos::
    name_none (Type const&)
    {
    }

    void publisherQos::
    base_name (Type& o)
    {
      dispatch (o.base_name ());
    }

    void publisherQos::
    base_name (Type const& o)
    {
      dispatch (o.base_name ());
    }

    void publisherQos::
    base_name_none (Type&)
    {
    }

    void publisherQos::
    base_name_none (Type const&)
    {
    }

    void publisherQos::
    topic_filter (Type& o)
    {
      dispatch (o.topic_filter ());
    }

    void publisherQos::
    topic_filter (Type const& o)
    {
      dispatch (o.topic_filter ());
    }

    void publisherQos::
    topic_filter_none (Type&)
    {
    }

    void publisherQos::
    topic_filter_none (Type const&)
    {
    }

    void publisherQos::
    post (Type&)
    {
    }

    void publisherQos::
    post (Type const&)
    {
    }

    // subscriberQos
    //
    //

    void subscriberQos::
    traverse (Type& o)
    {
      pre (o);
      if (o.presentation_p ()) presentation (o);
      else presentation_none (o);
      if (o.partition_p ()) partition (o);
      else partition_none (o);
      if (o.group_data_p ()) group_data (o);
      else group_data_none (o);
      if (o.entity_factory_p ()) entity_factory (o);
      else entity_factory_none (o);
      if (o.name_p ()) name (o);
      else name_none (o);
      if (o.base_name_p ()) base_name (o);
      else base_name_none (o);
      if (o.topic_filter_p ()) topic_filter (o);
      else topic_filter_none (o);
      post (o);
    }

    void subscriberQos::
    traverse (Type const& o)
    {
      pre (o);
      if (o.presentation_p ()) presentation (o);
      else presentation_none (o);
      if (o.partition_p ()) partition (o);
      else partition_none (o);
      if (o.group_data_p ()) group_data (o);
      else group_data_none (o);
      if (o.entity_factory_p ()) entity_factory (o);
      else entity_factory_none (o);
      if (o.name_p ()) name (o);
      else name_none (o);
      if (o.base_name_p ()) base_name (o);
      else base_name_none (o);
      if (o.topic_filter_p ()) topic_filter (o);
      else topic_filter_none (o);
      post (o);
    }

    void subscriberQos::
    pre (Type&)
    {
    }

    void subscriberQos::
    pre (Type const&)
    {
    }

    void subscriberQos::
    presentation (Type& o)
    {
      dispatch (o.presentation ());
    }

    void subscriberQos::
    presentation (Type const& o)
    {
      dispatch (o.presentation ());
    }

    void subscriberQos::
    presentation_none (Type&)
    {
    }

    void subscriberQos::
    presentation_none (Type const&)
    {
    }

    void subscriberQos::
    partition (Type& o)
    {
      dispatch (o.partition ());
    }

    void subscriberQos::
    partition (Type const& o)
    {
      dispatch (o.partition ());
    }

    void subscriberQos::
    partition_none (Type&)
    {
    }

    void subscriberQos::
    partition_none (Type const&)
    {
    }

    void subscriberQos::
    group_data (Type& o)
    {
      dispatch (o.group_data ());
    }

    void subscriberQos::
    group_data (Type const& o)
    {
      dispatch (o.group_data ());
    }

    void subscriberQos::
    group_data_none (Type&)
    {
    }

    void subscriberQos::
    group_data_none (Type const&)
    {
    }

    void subscriberQos::
    entity_factory (Type& o)
    {
      dispatch (o.entity_factory ());
    }

    void subscriberQos::
    entity_factory (Type const& o)
    {
      dispatch (o.entity_factory ());
    }

    void subscriberQos::
    entity_factory_none (Type&)
    {
    }

    void subscriberQos::
    entity_factory_none (Type const&)
    {
    }

    void subscriberQos::
    name (Type& o)
    {
      dispatch (o.name ());
    }

    void subscriberQos::
    name (Type const& o)
    {
      dispatch (o.name ());
    }

    void subscriberQos::
    name_none (Type&)
    {
    }

    void subscriberQos::
    name_none (Type const&)
    {
    }

    void subscriberQos::
    base_name (Type& o)
    {
      dispatch (o.base_name ());
    }

    void subscriberQos::
    base_name (Type const& o)
    {
      dispatch (o.base_name ());
    }

    void subscriberQos::
    base_name_none (Type&)
    {
    }

    void subscriberQos::
    base_name_none (Type const&)
    {
    }

    void subscriberQos::
    topic_filter (Type& o)
    {
      dispatch (o.topic_filter ());
    }

    void subscriberQos::
    topic_filter (Type const& o)
    {
      dispatch (o.topic_filter ());
    }

    void subscriberQos::
    topic_filter_none (Type&)
    {
    }

    void subscriberQos::
    topic_filter_none (Type const&)
    {
    }

    void subscriberQos::
    post (Type&)
    {
    }

    void subscriberQos::
    post (Type const&)
    {
    }

    // topicQos
    //
    //

    void topicQos::
    traverse (Type& o)
    {
      pre (o);
      if (o.topic_data_p ()) topic_data (o);
      else topic_data_none (o);
      if (o.durability_p ()) durability (o);
      else durability_none (o);
      if (o.durability_service_p ()) durability_service (o);
      else durability_service_none (o);
      if (o.deadline_p ()) deadline (o);
      else deadline_none (o);
      if (o.latency_budget_p ()) latency_budget (o);
      else latency_budget_none (o);
      if (o.liveliness_p ()) liveliness (o);
      else liveliness_none (o);
      if (o.reliability_p ()) reliability (o);
      else reliability_none (o);
      if (o.destination_order_p ()) destination_order (o);
      else destination_order_none (o);
      if (o.history_p ()) history (o);
      else history_none (o);
      if (o.resource_limits_p ()) resource_limits (o);
      else resource_limits_none (o);
      if (o.transport_priority_p ()) transport_priority (o);
      else transport_priority_none (o);
      if (o.lifespan_p ()) lifespan (o);
      else lifespan_none (o);
      if (o.ownership_p ()) ownership (o);
      else ownership_none (o);
      if (o.name_p ()) name (o);
      else name_none (o);
      if (o.base_name_p ()) base_name (o);
      else base_name_none (o);
      if (o.topic_filter_p ()) topic_filter (o);
      else topic_filter_none (o);
      post (o);
    }

    void topicQos::
    traverse (Type const& o)
    {
      pre (o);
      if (o.topic_data_p ()) topic_data (o);
      else topic_data_none (o);
      if (o.durability_p ()) durability (o);
      else durability_none (o);
      if (o.durability_service_p ()) durability_service (o);
      else durability_service_none (o);
      if (o.deadline_p ()) deadline (o);
      else deadline_none (o);
      if (o.latency_budget_p ()) latency_budget (o);
      else latency_budget_none (o);
      if (o.liveliness_p ()) liveliness (o);
      else liveliness_none (o);
      if (o.reliability_p ()) reliability (o);
      else reliability_none (o);
      if (o.destination_order_p ()) destination_order (o);
      else destination_order_none (o);
      if (o.history_p ()) history (o);
      else history_none (o);
      if (o.resource_limits_p ()) resource_limits (o);
      else resource_limits_none (o);
      if (o.transport_priority_p ()) transport_priority (o);
      else transport_priority_none (o);
      if (o.lifespan_p ()) lifespan (o);
      else lifespan_none (o);
      if (o.ownership_p ()) ownership (o);
      else ownership_none (o);
      if (o.name_p ()) name (o);
      else name_none (o);
      if (o.base_name_p ()) base_name (o);
      else base_name_none (o);
      if (o.topic_filter_p ()) topic_filter (o);
      else topic_filter_none (o);
      post (o);
    }

    void topicQos::
    pre (Type&)
    {
    }

    void topicQos::
    pre (Type const&)
    {
    }

    void topicQos::
    topic_data (Type& o)
    {
      dispatch (o.topic_data ());
    }

    void topicQos::
    topic_data (Type const& o)
    {
      dispatch (o.topic_data ());
    }

    void topicQos::
    topic_data_none (Type&)
    {
    }

    void topicQos::
    topic_data_none (Type const&)
    {
    }

    void topicQos::
    durability (Type& o)
    {
      dispatch (o.durability ());
    }

    void topicQos::
    durability (Type const& o)
    {
      dispatch (o.durability ());
    }

    void topicQos::
    durability_none (Type&)
    {
    }

    void topicQos::
    durability_none (Type const&)
    {
    }

    void topicQos::
    durability_service (Type& o)
    {
      dispatch (o.durability_service ());
    }

    void topicQos::
    durability_service (Type const& o)
    {
      dispatch (o.durability_service ());
    }

    void topicQos::
    durability_service_none (Type&)
    {
    }

    void topicQos::
    durability_service_none (Type const&)
    {
    }

    void topicQos::
    deadline (Type& o)
    {
      dispatch (o.deadline ());
    }

    void topicQos::
    deadline (Type const& o)
    {
      dispatch (o.deadline ());
    }

    void topicQos::
    deadline_none (Type&)
    {
    }

    void topicQos::
    deadline_none (Type const&)
    {
    }

    void topicQos::
    latency_budget (Type& o)
    {
      dispatch (o.latency_budget ());
    }

    void topicQos::
    latency_budget (Type const& o)
    {
      dispatch (o.latency_budget ());
    }

    void topicQos::
    latency_budget_none (Type&)
    {
    }

    void topicQos::
    latency_budget_none (Type const&)
    {
    }

    void topicQos::
    liveliness (Type& o)
    {
      dispatch (o.liveliness ());
    }

    void topicQos::
    liveliness (Type const& o)
    {
      dispatch (o.liveliness ());
    }

    void topicQos::
    liveliness_none (Type&)
    {
    }

    void topicQos::
    liveliness_none (Type const&)
    {
    }

    void topicQos::
    reliability (Type& o)
    {
      dispatch (o.reliability ());
    }

    void topicQos::
    reliability (Type const& o)
    {
      dispatch (o.reliability ());
    }

    void topicQos::
    reliability_none (Type&)
    {
    }

    void topicQos::
    reliability_none (Type const&)
    {
    }

    void topicQos::
    destination_order (Type& o)
    {
      dispatch (o.destination_order ());
    }

    void topicQos::
    destination_order (Type const& o)
    {
      dispatch (o.destination_order ());
    }

    void topicQos::
    destination_order_none (Type&)
    {
    }

    void topicQos::
    destination_order_none (Type const&)
    {
    }

    void topicQos::
    history (Type& o)
    {
      dispatch (o.history ());
    }

    void topicQos::
    history (Type const& o)
    {
      dispatch (o.history ());
    }

    void topicQos::
    history_none (Type&)
    {
    }

    void topicQos::
    history_none (Type const&)
    {
    }

    void topicQos::
    resource_limits (Type& o)
    {
      dispatch (o.resource_limits ());
    }

    void topicQos::
    resource_limits (Type const& o)
    {
      dispatch (o.resource_limits ());
    }

    void topicQos::
    resource_limits_none (Type&)
    {
    }

    void topicQos::
    resource_limits_none (Type const&)
    {
    }

    void topicQos::
    transport_priority (Type& o)
    {
      dispatch (o.transport_priority ());
    }

    void topicQos::
    transport_priority (Type const& o)
    {
      dispatch (o.transport_priority ());
    }

    void topicQos::
    transport_priority_none (Type&)
    {
    }

    void topicQos::
    transport_priority_none (Type const&)
    {
    }

    void topicQos::
    lifespan (Type& o)
    {
      dispatch (o.lifespan ());
    }

    void topicQos::
    lifespan (Type const& o)
    {
      dispatch (o.lifespan ());
    }

    void topicQos::
    lifespan_none (Type&)
    {
    }

    void topicQos::
    lifespan_none (Type const&)
    {
    }

    void topicQos::
    ownership (Type& o)
    {
      dispatch (o.ownership ());
    }

    void topicQos::
    ownership (Type const& o)
    {
      dispatch (o.ownership ());
    }

    void topicQos::
    ownership_none (Type&)
    {
    }

    void topicQos::
    ownership_none (Type const&)
    {
    }

    void topicQos::
    name (Type& o)
    {
      dispatch (o.name ());
    }

    void topicQos::
    name (Type const& o)
    {
      dispatch (o.name ());
    }

    void topicQos::
    name_none (Type&)
    {
    }

    void topicQos::
    name_none (Type const&)
    {
    }

    void topicQos::
    base_name (Type& o)
    {
      dispatch (o.base_name ());
    }

    void topicQos::
    base_name (Type const& o)
    {
      dispatch (o.base_name ());
    }

    void topicQos::
    base_name_none (Type&)
    {
    }

    void topicQos::
    base_name_none (Type const&)
    {
    }

    void topicQos::
    topic_filter (Type& o)
    {
      dispatch (o.topic_filter ());
    }

    void topicQos::
    topic_filter (Type const& o)
    {
      dispatch (o.topic_filter ());
    }

    void topicQos::
    topic_filter_none (Type&)
    {
    }

    void topicQos::
    topic_filter_none (Type const&)
    {
    }

    void topicQos::
    post (Type&)
    {
    }

    void topicQos::
    post (Type const&)
    {
    }

    // datareaderQos
    //
    //

    void datareaderQos::
    traverse (Type& o)
    {
      pre (o);
      if (o.durability_p ()) durability (o);
      else durability_none (o);
      if (o.deadline_p ()) deadline (o);
      else deadline_none (o);
      if (o.latency_budget_p ()) latency_budget (o);
      else latency_budget_none (o);
      if (o.liveliness_p ()) liveliness (o);
      else liveliness_none (o);
      if (o.reliability_p ()) reliability (o);
      else reliability_none (o);
      if (o.destination_order_p ()) destination_order (o);
      else destination_order_none (o);
      if (o.history_p ()) history (o);
      else history_none (o);
      if (o.resource_limits_p ()) resource_limits (o);
      else resource_limits_none (o);
      if (o.user_data_p ()) user_data (o);
      else user_data_none (o);
      if (o.ownership_p ()) ownership (o);
      else ownership_none (o);
      if (o.time_based_filter_p ()) time_based_filter (o);
      else time_based_filter_none (o);
      if (o.reader_data_lifecycle_p ()) reader_data_lifecycle (o);
      else reader_data_lifecycle_none (o);
      if (o.name_p ()) name (o);
      else name_none (o);
      if (o.base_name_p ()) base_name (o);
      else base_name_none (o);
      if (o.topic_filter_p ()) topic_filter (o);
      else topic_filter_none (o);
      post (o);
    }

    void datareaderQos::
    traverse (Type const& o)
    {
      pre (o);
      if (o.durability_p ()) durability (o);
      else durability_none (o);
      if (o.deadline_p ()) deadline (o);
      else deadline_none (o);
      if (o.latency_budget_p ()) latency_budget (o);
      else latency_budget_none (o);
      if (o.liveliness_p ()) liveliness (o);
      else liveliness_none (o);
      if (o.reliability_p ()) reliability (o);
      else reliability_none (o);
      if (o.destination_order_p ()) destination_order (o);
      else destination_order_none (o);
      if (o.history_p ()) history (o);
      else history_none (o);
      if (o.resource_limits_p ()) resource_limits (o);
      else resource_limits_none (o);
      if (o.user_data_p ()) user_data (o);
      else user_data_none (o);
      if (o.ownership_p ()) ownership (o);
      else ownership_none (o);
      if (o.time_based_filter_p ()) time_based_filter (o);
      else time_based_filter_none (o);
      if (o.reader_data_lifecycle_p ()) reader_data_lifecycle (o);
      else reader_data_lifecycle_none (o);
      if (o.name_p ()) name (o);
      else name_none (o);
      if (o.base_name_p ()) base_name (o);
      else base_name_none (o);
      if (o.topic_filter_p ()) topic_filter (o);
      else topic_filter_none (o);
      post (o);
    }

    void datareaderQos::
    pre (Type&)
    {
    }

    void datareaderQos::
    pre (Type const&)
    {
    }

    void datareaderQos::
    durability (Type& o)
    {
      dispatch (o.durability ());
    }

    void datareaderQos::
    durability (Type const& o)
    {
      dispatch (o.durability ());
    }

    void datareaderQos::
    durability_none (Type&)
    {
    }

    void datareaderQos::
    durability_none (Type const&)
    {
    }

    void datareaderQos::
    deadline (Type& o)
    {
      dispatch (o.deadline ());
    }

    void datareaderQos::
    deadline (Type const& o)
    {
      dispatch (o.deadline ());
    }

    void datareaderQos::
    deadline_none (Type&)
    {
    }

    void datareaderQos::
    deadline_none (Type const&)
    {
    }

    void datareaderQos::
    latency_budget (Type& o)
    {
      dispatch (o.latency_budget ());
    }

    void datareaderQos::
    latency_budget (Type const& o)
    {
      dispatch (o.latency_budget ());
    }

    void datareaderQos::
    latency_budget_none (Type&)
    {
    }

    void datareaderQos::
    latency_budget_none (Type const&)
    {
    }

    void datareaderQos::
    liveliness (Type& o)
    {
      dispatch (o.liveliness ());
    }

    void datareaderQos::
    liveliness (Type const& o)
    {
      dispatch (o.liveliness ());
    }

    void datareaderQos::
    liveliness_none (Type&)
    {
    }

    void datareaderQos::
    liveliness_none (Type const&)
    {
    }

    void datareaderQos::
    reliability (Type& o)
    {
      dispatch (o.reliability ());
    }

    void datareaderQos::
    reliability (Type const& o)
    {
      dispatch (o.reliability ());
    }

    void datareaderQos::
    reliability_none (Type&)
    {
    }

    void datareaderQos::
    reliability_none (Type const&)
    {
    }

    void datareaderQos::
    destination_order (Type& o)
    {
      dispatch (o.destination_order ());
    }

    void datareaderQos::
    destination_order (Type const& o)
    {
      dispatch (o.destination_order ());
    }

    void datareaderQos::
    destination_order_none (Type&)
    {
    }

    void datareaderQos::
    destination_order_none (Type const&)
    {
    }

    void datareaderQos::
    history (Type& o)
    {
      dispatch (o.history ());
    }

    void datareaderQos::
    history (Type const& o)
    {
      dispatch (o.history ());
    }

    void datareaderQos::
    history_none (Type&)
    {
    }

    void datareaderQos::
    history_none (Type const&)
    {
    }

    void datareaderQos::
    resource_limits (Type& o)
    {
      dispatch (o.resource_limits ());
    }

    void datareaderQos::
    resource_limits (Type const& o)
    {
      dispatch (o.resource_limits ());
    }

    void datareaderQos::
    resource_limits_none (Type&)
    {
    }

    void datareaderQos::
    resource_limits_none (Type const&)
    {
    }

    void datareaderQos::
    user_data (Type& o)
    {
      dispatch (o.user_data ());
    }

    void datareaderQos::
    user_data (Type const& o)
    {
      dispatch (o.user_data ());
    }

    void datareaderQos::
    user_data_none (Type&)
    {
    }

    void datareaderQos::
    user_data_none (Type const&)
    {
    }

    void datareaderQos::
    ownership (Type& o)
    {
      dispatch (o.ownership ());
    }

    void datareaderQos::
    ownership (Type const& o)
    {
      dispatch (o.ownership ());
    }

    void datareaderQos::
    ownership_none (Type&)
    {
    }

    void datareaderQos::
    ownership_none (Type const&)
    {
    }

    void datareaderQos::
    time_based_filter (Type& o)
    {
      dispatch (o.time_based_filter ());
    }

    void datareaderQos::
    time_based_filter (Type const& o)
    {
      dispatch (o.time_based_filter ());
    }

    void datareaderQos::
    time_based_filter_none (Type&)
    {
    }

    void datareaderQos::
    time_based_filter_none (Type const&)
    {
    }

    void datareaderQos::
    reader_data_lifecycle (Type& o)
    {
      dispatch (o.reader_data_lifecycle ());
    }

    void datareaderQos::
    reader_data_lifecycle (Type const& o)
    {
      dispatch (o.reader_data_lifecycle ());
    }

    void datareaderQos::
    reader_data_lifecycle_none (Type&)
    {
    }

    void datareaderQos::
    reader_data_lifecycle_none (Type const&)
    {
    }

    void datareaderQos::
    name (Type& o)
    {
      dispatch (o.name ());
    }

    void datareaderQos::
    name (Type const& o)
    {
      dispatch (o.name ());
    }

    void datareaderQos::
    name_none (Type&)
    {
    }

    void datareaderQos::
    name_none (Type const&)
    {
    }

    void datareaderQos::
    base_name (Type& o)
    {
      dispatch (o.base_name ());
    }

    void datareaderQos::
    base_name (Type const& o)
    {
      dispatch (o.base_name ());
    }

    void datareaderQos::
    base_name_none (Type&)
    {
    }

    void datareaderQos::
    base_name_none (Type const&)
    {
    }

    void datareaderQos::
    topic_filter (Type& o)
    {
      dispatch (o.topic_filter ());
    }

    void datareaderQos::
    topic_filter (Type const& o)
    {
      dispatch (o.topic_filter ());
    }

    void datareaderQos::
    topic_filter_none (Type&)
    {
    }

    void datareaderQos::
    topic_filter_none (Type const&)
    {
    }

    void datareaderQos::
    post (Type&)
    {
    }

    void datareaderQos::
    post (Type const&)
    {
    }

    // datawriterQos
    //
    //

    void datawriterQos::
    traverse (Type& o)
    {
      pre (o);
      if (o.durability_p ()) durability (o);
      else durability_none (o);
      if (o.durability_service_p ()) durability_service (o);
      else durability_service_none (o);
      if (o.deadline_p ()) deadline (o);
      else deadline_none (o);
      if (o.latency_budget_p ()) latency_budget (o);
      else latency_budget_none (o);
      if (o.liveliness_p ()) liveliness (o);
      else liveliness_none (o);
      if (o.reliability_p ()) reliability (o);
      else reliability_none (o);
      if (o.destination_order_p ()) destination_order (o);
      else destination_order_none (o);
      if (o.history_p ()) history (o);
      else history_none (o);
      if (o.resource_limits_p ()) resource_limits (o);
      else resource_limits_none (o);
      if (o.transport_priority_p ()) transport_priority (o);
      else transport_priority_none (o);
      if (o.lifespan_p ()) lifespan (o);
      else lifespan_none (o);
      if (o.user_data_p ()) user_data (o);
      else user_data_none (o);
      if (o.ownership_p ()) ownership (o);
      else ownership_none (o);
      if (o.ownership_strength_p ()) ownership_strength (o);
      else ownership_strength_none (o);
      if (o.writer_data_lifecycle_p ()) writer_data_lifecycle (o);
      else writer_data_lifecycle_none (o);
      if (o.name_p ()) name (o);
      else name_none (o);
      if (o.base_name_p ()) base_name (o);
      else base_name_none (o);
      if (o.topic_filter_p ()) topic_filter (o);
      else topic_filter_none (o);
      post (o);
    }

    void datawriterQos::
    traverse (Type const& o)
    {
      pre (o);
      if (o.durability_p ()) durability (o);
      else durability_none (o);
      if (o.durability_service_p ()) durability_service (o);
      else durability_service_none (o);
      if (o.deadline_p ()) deadline (o);
      else deadline_none (o);
      if (o.latency_budget_p ()) latency_budget (o);
      else latency_budget_none (o);
      if (o.liveliness_p ()) liveliness (o);
      else liveliness_none (o);
      if (o.reliability_p ()) reliability (o);
      else reliability_none (o);
      if (o.destination_order_p ()) destination_order (o);
      else destination_order_none (o);
      if (o.history_p ()) history (o);
      else history_none (o);
      if (o.resource_limits_p ()) resource_limits (o);
      else resource_limits_none (o);
      if (o.transport_priority_p ()) transport_priority (o);
      else transport_priority_none (o);
      if (o.lifespan_p ()) lifespan (o);
      else lifespan_none (o);
      if (o.user_data_p ()) user_data (o);
      else user_data_none (o);
      if (o.ownership_p ()) ownership (o);
      else ownership_none (o);
      if (o.ownership_strength_p ()) ownership_strength (o);
      else ownership_strength_none (o);
      if (o.writer_data_lifecycle_p ()) writer_data_lifecycle (o);
      else writer_data_lifecycle_none (o);
      if (o.name_p ()) name (o);
      else name_none (o);
      if (o.base_name_p ()) base_name (o);
      else base_name_none (o);
      if (o.topic_filter_p ()) topic_filter (o);
      else topic_filter_none (o);
      post (o);
    }

    void datawriterQos::
    pre (Type&)
    {
    }

    void datawriterQos::
    pre (Type const&)
    {
    }

    void datawriterQos::
    durability (Type& o)
    {
      dispatch (o.durability ());
    }

    void datawriterQos::
    durability (Type const& o)
    {
      dispatch (o.durability ());
    }

    void datawriterQos::
    durability_none (Type&)
    {
    }

    void datawriterQos::
    durability_none (Type const&)
    {
    }

    void datawriterQos::
    durability_service (Type& o)
    {
      dispatch (o.durability_service ());
    }

    void datawriterQos::
    durability_service (Type const& o)
    {
      dispatch (o.durability_service ());
    }

    void datawriterQos::
    durability_service_none (Type&)
    {
    }

    void datawriterQos::
    durability_service_none (Type const&)
    {
    }

    void datawriterQos::
    deadline (Type& o)
    {
      dispatch (o.deadline ());
    }

    void datawriterQos::
    deadline (Type const& o)
    {
      dispatch (o.deadline ());
    }

    void datawriterQos::
    deadline_none (Type&)
    {
    }

    void datawriterQos::
    deadline_none (Type const&)
    {
    }

    void datawriterQos::
    latency_budget (Type& o)
    {
      dispatch (o.latency_budget ());
    }

    void datawriterQos::
    latency_budget (Type const& o)
    {
      dispatch (o.latency_budget ());
    }

    void datawriterQos::
    latency_budget_none (Type&)
    {
    }

    void datawriterQos::
    latency_budget_none (Type const&)
    {
    }

    void datawriterQos::
    liveliness (Type& o)
    {
      dispatch (o.liveliness ());
    }

    void datawriterQos::
    liveliness (Type const& o)
    {
      dispatch (o.liveliness ());
    }

    void datawriterQos::
    liveliness_none (Type&)
    {
    }

    void datawriterQos::
    liveliness_none (Type const&)
    {
    }

    void datawriterQos::
    reliability (Type& o)
    {
      dispatch (o.reliability ());
    }

    void datawriterQos::
    reliability (Type const& o)
    {
      dispatch (o.reliability ());
    }

    void datawriterQos::
    reliability_none (Type&)
    {
    }

    void datawriterQos::
    reliability_none (Type const&)
    {
    }

    void datawriterQos::
    destination_order (Type& o)
    {
      dispatch (o.destination_order ());
    }

    void datawriterQos::
    destination_order (Type const& o)
    {
      dispatch (o.destination_order ());
    }

    void datawriterQos::
    destination_order_none (Type&)
    {
    }

    void datawriterQos::
    destination_order_none (Type const&)
    {
    }

    void datawriterQos::
    history (Type& o)
    {
      dispatch (o.history ());
    }

    void datawriterQos::
    history (Type const& o)
    {
      dispatch (o.history ());
    }

    void datawriterQos::
    history_none (Type&)
    {
    }

    void datawriterQos::
    history_none (Type const&)
    {
    }

    void datawriterQos::
    resource_limits (Type& o)
    {
      dispatch (o.resource_limits ());
    }

    void datawriterQos::
    resource_limits (Type const& o)
    {
      dispatch (o.resource_limits ());
    }

    void datawriterQos::
    resource_limits_none (Type&)
    {
    }

    void datawriterQos::
    resource_limits_none (Type const&)
    {
    }

    void datawriterQos::
    transport_priority (Type& o)
    {
      dispatch (o.transport_priority ());
    }

    void datawriterQos::
    transport_priority (Type const& o)
    {
      dispatch (o.transport_priority ());
    }

    void datawriterQos::
    transport_priority_none (Type&)
    {
    }

    void datawriterQos::
    transport_priority_none (Type const&)
    {
    }

    void datawriterQos::
    lifespan (Type& o)
    {
      dispatch (o.lifespan ());
    }

    void datawriterQos::
    lifespan (Type const& o)
    {
      dispatch (o.lifespan ());
    }

    void datawriterQos::
    lifespan_none (Type&)
    {
    }

    void datawriterQos::
    lifespan_none (Type const&)
    {
    }

    void datawriterQos::
    user_data (Type& o)
    {
      dispatch (o.user_data ());
    }

    void datawriterQos::
    user_data (Type const& o)
    {
      dispatch (o.user_data ());
    }

    void datawriterQos::
    user_data_none (Type&)
    {
    }

    void datawriterQos::
    user_data_none (Type const&)
    {
    }

    void datawriterQos::
    ownership (Type& o)
    {
      dispatch (o.ownership ());
    }

    void datawriterQos::
    ownership (Type const& o)
    {
      dispatch (o.ownership ());
    }

    void datawriterQos::
    ownership_none (Type&)
    {
    }

    void datawriterQos::
    ownership_none (Type const&)
    {
    }

    void datawriterQos::
    ownership_strength (Type& o)
    {
      dispatch (o.ownership_strength ());
    }

    void datawriterQos::
    ownership_strength (Type const& o)
    {
      dispatch (o.ownership_strength ());
    }

    void datawriterQos::
    ownership_strength_none (Type&)
    {
    }

    void datawriterQos::
    ownership_strength_none (Type const&)
    {
    }

    void datawriterQos::
    writer_data_lifecycle (Type& o)
    {
      dispatch (o.writer_data_lifecycle ());
    }

    void datawriterQos::
    writer_data_lifecycle (Type const& o)
    {
      dispatch (o.writer_data_lifecycle ());
    }

    void datawriterQos::
    writer_data_lifecycle_none (Type&)
    {
    }

    void datawriterQos::
    writer_data_lifecycle_none (Type const&)
    {
    }

    void datawriterQos::
    name (Type& o)
    {
      dispatch (o.name ());
    }

    void datawriterQos::
    name (Type const& o)
    {
      dispatch (o.name ());
    }

    void datawriterQos::
    name_none (Type&)
    {
    }

    void datawriterQos::
    name_none (Type const&)
    {
    }

    void datawriterQos::
    base_name (Type& o)
    {
      dispatch (o.base_name ());
    }

    void datawriterQos::
    base_name (Type const& o)
    {
      dispatch (o.base_name ());
    }

    void datawriterQos::
    base_name_none (Type&)
    {
    }

    void datawriterQos::
    base_name_none (Type const&)
    {
    }

    void datawriterQos::
    topic_filter (Type& o)
    {
      dispatch (o.topic_filter ());
    }

    void datawriterQos::
    topic_filter (Type const& o)
    {
      dispatch (o.topic_filter ());
    }

    void datawriterQos::
    topic_filter_none (Type&)
    {
    }

    void datawriterQos::
    topic_filter_none (Type const&)
    {
    }

    void datawriterQos::
    post (Type&)
    {
    }

    void datawriterQos::
    post (Type const&)
    {
    }

    // qosProfile
    //
    //

    void qosProfile::
    traverse (Type& o)
    {
      pre (o);
      datareader_qos (o);
      datawriter_qos (o);
      topic_qos (o);
      domainparticipant_qos (o);
      publisher_qos (o);
      subscriber_qos (o);
      name (o);
      if (o.base_name_p ()) base_name (o);
      else base_name_none (o);
      post (o);
    }

    void qosProfile::
    traverse (Type const& o)
    {
      pre (o);
      datareader_qos (o);
      datawriter_qos (o);
      topic_qos (o);
      domainparticipant_qos (o);
      publisher_qos (o);
      subscriber_qos (o);
      name (o);
      if (o.base_name_p ()) base_name (o);
      else base_name_none (o);
      post (o);
    }

    void qosProfile::
    pre (Type&)
    {
    }

    void qosProfile::
    pre (Type const&)
    {
    }

    void qosProfile::
    datareader_qos (Type& o)
    {
      // VC6 anathema strikes again
      //
      ::dds::qosProfile::datareader_qos_iterator b (o.begin_datareader_qos()), e (o.end_datareader_qos());

      if (b != e)
      {
        datareader_qos_pre (o);
        for (; b != e;)
        {
          dispatch (*(*b));
          if (++b != e) datareader_qos_next (o);
        }

        datareader_qos_post (o);
      }

      else datareader_qos_none (o);
    }

    void qosProfile::
    datareader_qos (Type const& o)
    {
      // VC6 anathema strikes again
      //
      ::dds::qosProfile::datareader_qos_const_iterator b (o.begin_datareader_qos()), e (o.end_datareader_qos());

      if (b != e)
      {
        datareader_qos_pre (o);
        for (; b != e;)
        {
          dispatch (*(*b));
          if (++b != e) datareader_qos_next (o);
        }

        datareader_qos_post (o);
      }

      else datareader_qos_none (o);
    }

    void qosProfile::
    datareader_qos_pre (Type&)
    {
    }

    void qosProfile::
    datareader_qos_pre (Type const&)
    {
    }

    void qosProfile::
    datareader_qos_next (Type&)
    {
    }

    void qosProfile::
    datareader_qos_next (Type const&)
    {
    }

    void qosProfile::
    datareader_qos_post (Type&)
    {
    }

    void qosProfile::
    datareader_qos_post (Type const&)
    {
    }

    void qosProfile::
    datareader_qos_none (Type&)
    {
    }

    void qosProfile::
    datareader_qos_none (Type const&)
    {
    }

    void qosProfile::
    datawriter_qos (Type& o)
    {
      // VC6 anathema strikes again
      //
      ::dds::qosProfile::datawriter_qos_iterator b (o.begin_datawriter_qos()), e (o.end_datawriter_qos());

      if (b != e)
      {
        datawriter_qos_pre (o);
        for (; b != e;)
        {
          dispatch (*(*b));
          if (++b != e) datawriter_qos_next (o);
        }

        datawriter_qos_post (o);
      }

      else datawriter_qos_none (o);
    }

    void qosProfile::
    datawriter_qos (Type const& o)
    {
      // VC6 anathema strikes again
      //
      ::dds::qosProfile::datawriter_qos_const_iterator b (o.begin_datawriter_qos()), e (o.end_datawriter_qos());

      if (b != e)
      {
        datawriter_qos_pre (o);
        for (; b != e;)
        {
          dispatch (*(*b));
          if (++b != e) datawriter_qos_next (o);
        }

        datawriter_qos_post (o);
      }

      else datawriter_qos_none (o);
    }

    void qosProfile::
    datawriter_qos_pre (Type&)
    {
    }

    void qosProfile::
    datawriter_qos_pre (Type const&)
    {
    }

    void qosProfile::
    datawriter_qos_next (Type&)
    {
    }

    void qosProfile::
    datawriter_qos_next (Type const&)
    {
    }

    void qosProfile::
    datawriter_qos_post (Type&)
    {
    }

    void qosProfile::
    datawriter_qos_post (Type const&)
    {
    }

    void qosProfile::
    datawriter_qos_none (Type&)
    {
    }

    void qosProfile::
    datawriter_qos_none (Type const&)
    {
    }

    void qosProfile::
    topic_qos (Type& o)
    {
      // VC6 anathema strikes again
      //
      ::dds::qosProfile::topic_qos_iterator b (o.begin_topic_qos()), e (o.end_topic_qos());

      if (b != e)
      {
        topic_qos_pre (o);
        for (; b != e;)
        {
          dispatch (*(*b));
          if (++b != e) topic_qos_next (o);
        }

        topic_qos_post (o);
      }

      else topic_qos_none (o);
    }

    void qosProfile::
    topic_qos (Type const& o)
    {
      // VC6 anathema strikes again
      //
      ::dds::qosProfile::topic_qos_const_iterator b (o.begin_topic_qos()), e (o.end_topic_qos());

      if (b != e)
      {
        topic_qos_pre (o);
        for (; b != e;)
        {
          dispatch (*(*b));
          if (++b != e) topic_qos_next (o);
        }

        topic_qos_post (o);
      }

      else topic_qos_none (o);
    }

    void qosProfile::
    topic_qos_pre (Type&)
    {
    }

    void qosProfile::
    topic_qos_pre (Type const&)
    {
    }

    void qosProfile::
    topic_qos_next (Type&)
    {
    }

    void qosProfile::
    topic_qos_next (Type const&)
    {
    }

    void qosProfile::
    topic_qos_post (Type&)
    {
    }

    void qosProfile::
    topic_qos_post (Type const&)
    {
    }

    void qosProfile::
    topic_qos_none (Type&)
    {
    }

    void qosProfile::
    topic_qos_none (Type const&)
    {
    }

    void qosProfile::
    domainparticipant_qos (Type& o)
    {
      // VC6 anathema strikes again
      //
      ::dds::qosProfile::domainparticipant_qos_iterator b (o.begin_domainparticipant_qos()), e (o.end_domainparticipant_qos());

      if (b != e)
      {
        domainparticipant_qos_pre (o);
        for (; b != e;)
        {
          dispatch (*(*b));
          if (++b != e) domainparticipant_qos_next (o);
        }

        domainparticipant_qos_post (o);
      }

      else domainparticipant_qos_none (o);
    }

    void qosProfile::
    domainparticipant_qos (Type const& o)
    {
      // VC6 anathema strikes again
      //
      ::dds::qosProfile::domainparticipant_qos_const_iterator b (o.begin_domainparticipant_qos()), e (o.end_domainparticipant_qos());

      if (b != e)
      {
        domainparticipant_qos_pre (o);
        for (; b != e;)
        {
          dispatch (*(*b));
          if (++b != e) domainparticipant_qos_next (o);
        }

        domainparticipant_qos_post (o);
      }

      else domainparticipant_qos_none (o);
    }

    void qosProfile::
    domainparticipant_qos_pre (Type&)
    {
    }

    void qosProfile::
    domainparticipant_qos_pre (Type const&)
    {
    }

    void qosProfile::
    domainparticipant_qos_next (Type&)
    {
    }

    void qosProfile::
    domainparticipant_qos_next (Type const&)
    {
    }

    void qosProfile::
    domainparticipant_qos_post (Type&)
    {
    }

    void qosProfile::
    domainparticipant_qos_post (Type const&)
    {
    }

    void qosProfile::
    domainparticipant_qos_none (Type&)
    {
    }

    void qosProfile::
    domainparticipant_qos_none (Type const&)
    {
    }

    void qosProfile::
    publisher_qos (Type& o)
    {
      // VC6 anathema strikes again
      //
      ::dds::qosProfile::publisher_qos_iterator b (o.begin_publisher_qos()), e (o.end_publisher_qos());

      if (b != e)
      {
        publisher_qos_pre (o);
        for (; b != e;)
        {
          dispatch (*(*b));
          if (++b != e) publisher_qos_next (o);
        }

        publisher_qos_post (o);
      }

      else publisher_qos_none (o);
    }

    void qosProfile::
    publisher_qos (Type const& o)
    {
      // VC6 anathema strikes again
      //
      ::dds::qosProfile::publisher_qos_const_iterator b (o.begin_publisher_qos()), e (o.end_publisher_qos());

      if (b != e)
      {
        publisher_qos_pre (o);
        for (; b != e;)
        {
          dispatch (*(*b));
          if (++b != e) publisher_qos_next (o);
        }

        publisher_qos_post (o);
      }

      else publisher_qos_none (o);
    }

    void qosProfile::
    publisher_qos_pre (Type&)
    {
    }

    void qosProfile::
    publisher_qos_pre (Type const&)
    {
    }

    void qosProfile::
    publisher_qos_next (Type&)
    {
    }

    void qosProfile::
    publisher_qos_next (Type const&)
    {
    }

    void qosProfile::
    publisher_qos_post (Type&)
    {
    }

    void qosProfile::
    publisher_qos_post (Type const&)
    {
    }

    void qosProfile::
    publisher_qos_none (Type&)
    {
    }

    void qosProfile::
    publisher_qos_none (Type const&)
    {
    }

    void qosProfile::
    subscriber_qos (Type& o)
    {
      // VC6 anathema strikes again
      //
      ::dds::qosProfile::subscriber_qos_iterator b (o.begin_subscriber_qos()), e (o.end_subscriber_qos());

      if (b != e)
      {
        subscriber_qos_pre (o);
        for (; b != e;)
        {
          dispatch (*(*b));
          if (++b != e) subscriber_qos_next (o);
        }

        subscriber_qos_post (o);
      }

      else subscriber_qos_none (o);
    }

    void qosProfile::
    subscriber_qos (Type const& o)
    {
      // VC6 anathema strikes again
      //
      ::dds::qosProfile::subscriber_qos_const_iterator b (o.begin_subscriber_qos()), e (o.end_subscriber_qos());

      if (b != e)
      {
        subscriber_qos_pre (o);
        for (; b != e;)
        {
          dispatch (*(*b));
          if (++b != e) subscriber_qos_next (o);
        }

        subscriber_qos_post (o);
      }

      else subscriber_qos_none (o);
    }

    void qosProfile::
    subscriber_qos_pre (Type&)
    {
    }

    void qosProfile::
    subscriber_qos_pre (Type const&)
    {
    }

    void qosProfile::
    subscriber_qos_next (Type&)
    {
    }

    void qosProfile::
    subscriber_qos_next (Type const&)
    {
    }

    void qosProfile::
    subscriber_qos_post (Type&)
    {
    }

    void qosProfile::
    subscriber_qos_post (Type const&)
    {
    }

    void qosProfile::
    subscriber_qos_none (Type&)
    {
    }

    void qosProfile::
    subscriber_qos_none (Type const&)
    {
    }

    void qosProfile::
    name (Type& o)
    {
      dispatch (o.name ());
    }

    void qosProfile::
    name (Type const& o)
    {
      dispatch (o.name ());
    }

    void qosProfile::
    base_name (Type& o)
    {
      dispatch (o.base_name ());
    }

    void qosProfile::
    base_name (Type const& o)
    {
      dispatch (o.base_name ());
    }

    void qosProfile::
    base_name_none (Type&)
    {
    }

    void qosProfile::
    base_name_none (Type const&)
    {
    }

    void qosProfile::
    post (Type&)
    {
    }

    void qosProfile::
    post (Type const&)
    {
    }

    // qosProfile_seq
    //
    //

    void qosProfile_seq::
    traverse (Type& o)
    {
      pre (o);
      qos_profile (o);
      post (o);
    }

    void qosProfile_seq::
    traverse (Type const& o)
    {
      pre (o);
      qos_profile (o);
      post (o);
    }

    void qosProfile_seq::
    pre (Type&)
    {
    }

    void qosProfile_seq::
    pre (Type const&)
    {
    }

    void qosProfile_seq::
    qos_profile (Type& o)
    {
      // VC6 anathema strikes again
      //
      ::dds::qosProfile_seq::qos_profile_iterator b (o.begin_qos_profile()), e (o.end_qos_profile());

      if (b != e)
      {
        qos_profile_pre (o);
        for (; b != e;)
        {
          dispatch (*(*b));
          if (++b != e) qos_profile_next (o);
        }

        qos_profile_post (o);
      }

      else qos_profile_none (o);
    }

    void qosProfile_seq::
    qos_profile (Type const& o)
    {
      // VC6 anathema strikes again
      //
      ::dds::qosProfile_seq::qos_profile_const_iterator b (o.begin_qos_profile()), e (o.end_qos_profile());

      if (b != e)
      {
        qos_profile_pre (o);
        for (; b != e;)
        {
          dispatch (*(*b));
          if (++b != e) qos_profile_next (o);
        }

        qos_profile_post (o);
      }

      else qos_profile_none (o);
    }

    void qosProfile_seq::
    qos_profile_pre (Type&)
    {
    }

    void qosProfile_seq::
    qos_profile_pre (Type const&)
    {
    }

    void qosProfile_seq::
    qos_profile_next (Type&)
    {
    }

    void qosProfile_seq::
    qos_profile_next (Type const&)
    {
    }

    void qosProfile_seq::
    qos_profile_post (Type&)
    {
    }

    void qosProfile_seq::
    qos_profile_post (Type const&)
    {
    }

    void qosProfile_seq::
    qos_profile_none (Type&)
    {
    }

    void qosProfile_seq::
    qos_profile_none (Type const&)
    {
    }

    void qosProfile_seq::
    post (Type&)
    {
    }

    void qosProfile_seq::
    post (Type const&)
    {
    }
  }
}

namespace dds
{
  namespace Writer
  {
    // destinationOrderKind
    //
    //

    destinationOrderKind::
    destinationOrderKind (::XSCRT::XML::Element< ACE_TCHAR >& e)
    : ::XSCRT::Writer< ACE_TCHAR > (e)
    {
    }

    destinationOrderKind::
    destinationOrderKind ()
    {
    }

    void destinationOrderKind::
    traverse (Type const& o)
    {
      ::std::basic_string< ACE_TCHAR > s;

      if (o == ::dds::destinationOrderKind::BY_RECEPTION_TIMESTAMP_DESTINATIONORDER_QOS) s = ACE_TEXT ("BY_RECEPTION_TIMESTAMP_DESTINATIONORDER_QOS");
      else if (o == ::dds::destinationOrderKind::BY_SOURCE_TIMESTAMP_DESTINATIONORDER_QOS) s = ACE_TEXT ("BY_SOURCE_TIMESTAMP_DESTINATIONORDER_QOS");
      else
      {
      }

      if (::XSCRT::XML::Attribute< ACE_TCHAR >* a = attr_ ())
      {
        a->value (s);
      }

      else
      {
        top_().value (s);
      }
    }

    // durabilityKind
    //
    //

    durabilityKind::
    durabilityKind (::XSCRT::XML::Element< ACE_TCHAR >& e)
    : ::XSCRT::Writer< ACE_TCHAR > (e)
    {
    }

    durabilityKind::
    durabilityKind ()
    {
    }

    void durabilityKind::
    traverse (Type const& o)
    {
      ::std::basic_string< ACE_TCHAR > s;

      if (o == ::dds::durabilityKind::VOLATILE_DURABILITY_QOS) s = ACE_TEXT ("VOLATILE_DURABILITY_QOS");
      else if (o == ::dds::durabilityKind::TRANSIENT_LOCAL_DURABILITY_QOS) s = ACE_TEXT ("TRANSIENT_LOCAL_DURABILITY_QOS");
      else if (o == ::dds::durabilityKind::TRANSIENT_DURABILITY_QOS) s = ACE_TEXT ("TRANSIENT_DURABILITY_QOS");
      else if (o == ::dds::durabilityKind::PERSISTENT_DURABILITY_QOS) s = ACE_TEXT ("PERSISTENT_DURABILITY_QOS");
      else
      {
      }

      if (::XSCRT::XML::Attribute< ACE_TCHAR >* a = attr_ ())
      {
        a->value (s);
      }

      else
      {
        top_().value (s);
      }
    }

    // historyKind
    //
    //

    historyKind::
    historyKind (::XSCRT::XML::Element< ACE_TCHAR >& e)
    : ::XSCRT::Writer< ACE_TCHAR > (e)
    {
    }

    historyKind::
    historyKind ()
    {
    }

    void historyKind::
    traverse (Type const& o)
    {
      ::std::basic_string< ACE_TCHAR > s;

      if (o == ::dds::historyKind::KEEP_LAST_HISTORY_QOS) s = ACE_TEXT ("KEEP_LAST_HISTORY_QOS");
      else if (o == ::dds::historyKind::KEEP_ALL_HISTORY_QOS) s = ACE_TEXT ("KEEP_ALL_HISTORY_QOS");
      else
      {
      }

      if (::XSCRT::XML::Attribute< ACE_TCHAR >* a = attr_ ())
      {
        a->value (s);
      }

      else
      {
        top_().value (s);
      }
    }

    // livelinessKind
    //
    //

    livelinessKind::
    livelinessKind (::XSCRT::XML::Element< ACE_TCHAR >& e)
    : ::XSCRT::Writer< ACE_TCHAR > (e)
    {
    }

    livelinessKind::
    livelinessKind ()
    {
    }

    void livelinessKind::
    traverse (Type const& o)
    {
      ::std::basic_string< ACE_TCHAR > s;

      if (o == ::dds::livelinessKind::AUTOMATIC_LIVELINESS_QOS) s = ACE_TEXT ("AUTOMATIC_LIVELINESS_QOS");
      else if (o == ::dds::livelinessKind::MANUAL_BY_PARTICIPANT_LIVELINESS_QOS) s = ACE_TEXT ("MANUAL_BY_PARTICIPANT_LIVELINESS_QOS");
      else if (o == ::dds::livelinessKind::MANUAL_BY_TOPIC_LIVELINESS_QOS) s = ACE_TEXT ("MANUAL_BY_TOPIC_LIVELINESS_QOS");
      else
      {
      }

      if (::XSCRT::XML::Attribute< ACE_TCHAR >* a = attr_ ())
      {
        a->value (s);
      }

      else
      {
        top_().value (s);
      }
    }

    // presentationAccessScopeKind
    //
    //

    presentationAccessScopeKind::
    presentationAccessScopeKind (::XSCRT::XML::Element< ACE_TCHAR >& e)
    : ::XSCRT::Writer< ACE_TCHAR > (e)
    {
    }

    presentationAccessScopeKind::
    presentationAccessScopeKind ()
    {
    }

    void presentationAccessScopeKind::
    traverse (Type const& o)
    {
      ::std::basic_string< ACE_TCHAR > s;

      if (o == ::dds::presentationAccessScopeKind::INSTANCE_PRESENTATION_QOS) s = ACE_TEXT ("INSTANCE_PRESENTATION_QOS");
      else if (o == ::dds::presentationAccessScopeKind::TOPIC_PRESENTATION_QOS) s = ACE_TEXT ("TOPIC_PRESENTATION_QOS");
      else if (o == ::dds::presentationAccessScopeKind::GROUP_PRESENTATION_QOS) s = ACE_TEXT ("GROUP_PRESENTATION_QOS");
      else
      {
      }

      if (::XSCRT::XML::Attribute< ACE_TCHAR >* a = attr_ ())
      {
        a->value (s);
      }

      else
      {
        top_().value (s);
      }
    }

    // reliabilityKind
    //
    //

    reliabilityKind::
    reliabilityKind (::XSCRT::XML::Element< ACE_TCHAR >& e)
    : ::XSCRT::Writer< ACE_TCHAR > (e)
    {
    }

    reliabilityKind::
    reliabilityKind ()
    {
    }

    void reliabilityKind::
    traverse (Type const& o)
    {
      ::std::basic_string< ACE_TCHAR > s;

      if (o == ::dds::reliabilityKind::BEST_EFFORT_RELIABILITY_QOS) s = ACE_TEXT ("BEST_EFFORT_RELIABILITY_QOS");
      else if (o == ::dds::reliabilityKind::RELIABLE_RELIABILITY_QOS) s = ACE_TEXT ("RELIABLE_RELIABILITY_QOS");
      else
      {
      }

      if (::XSCRT::XML::Attribute< ACE_TCHAR >* a = attr_ ())
      {
        a->value (s);
      }

      else
      {
        top_().value (s);
      }
    }

    // ownershipKind
    //
    //

    ownershipKind::
    ownershipKind (::XSCRT::XML::Element< ACE_TCHAR >& e)
    : ::XSCRT::Writer< ACE_TCHAR > (e)
    {
    }

    ownershipKind::
    ownershipKind ()
    {
    }

    void ownershipKind::
    traverse (Type const& o)
    {
      ::std::basic_string< ACE_TCHAR > s;

      if (o == ::dds::ownershipKind::SHARED_OWNERSHIP_QOS) s = ACE_TEXT ("SHARED_OWNERSHIP_QOS");
      else if (o == ::dds::ownershipKind::EXCLUSIVE_OWNERSHIP_QOS) s = ACE_TEXT ("EXCLUSIVE_OWNERSHIP_QOS");
      else
      {
      }

      if (::XSCRT::XML::Attribute< ACE_TCHAR >* a = attr_ ())
      {
        a->value (s);
      }

      else
      {
        top_().value (s);
      }
    }

    // duration
    //
    //

    duration::
    duration (::XSCRT::XML::Element< ACE_TCHAR >& e)
    : ::XSCRT::Writer< ACE_TCHAR > (e)
    {
    }

    duration::
    duration ()
    {
    }

    void duration::
    traverse (Type const& o)
    {
      Traversal::duration::traverse (o);
    }

    void duration::
    sec (Type const& o)
    {
      push_ (::XSCRT::XML::Element< ACE_TCHAR > (ACE_TEXT("sec"), ACE_TEXT("http://www.omg.org/dds"), top_ ()));
      Traversal::duration::sec (o);
      pop_ ();
    }

    void duration::
    nanosec (Type const& o)
    {
      push_ (::XSCRT::XML::Element< ACE_TCHAR > (ACE_TEXT("nanosec"), ACE_TEXT("http://www.omg.org/dds"), top_ ()));
      Traversal::duration::nanosec (o);
      pop_ ();
    }

    // stringSeq
    //
    //

    stringSeq::
    stringSeq (::XSCRT::XML::Element< ACE_TCHAR >& e)
    : ::XSCRT::Writer< ACE_TCHAR > (e)
    {
    }

    stringSeq::
    stringSeq ()
    {
    }

    void stringSeq::
    traverse (Type const& o)
    {
      Traversal::stringSeq::traverse (o);
    }

    void stringSeq::
    element_pre (Type const&)
    {
      push_ (::XSCRT::XML::Element< ACE_TCHAR > (ACE_TEXT("element"), ACE_TEXT("http://www.omg.org/dds"), top_ ()));
    }

    void stringSeq::
    element_next (Type const& o)
    {
      element_post (o);
      element_pre (o);
    }

    void stringSeq::
    element_post (Type const&)
    {
      pop_ ();
    }

    // deadlineQosPolicy
    //
    //

    deadlineQosPolicy::
    deadlineQosPolicy (::XSCRT::XML::Element< ACE_TCHAR >& e)
    : ::XSCRT::Writer< ACE_TCHAR > (e)
    {
    }

    deadlineQosPolicy::
    deadlineQosPolicy ()
    {
    }

    void deadlineQosPolicy::
    traverse (Type const& o)
    {
      Traversal::deadlineQosPolicy::traverse (o);
    }

    void deadlineQosPolicy::
    period (Type const& o)
    {
      push_ (::XSCRT::XML::Element< ACE_TCHAR > (ACE_TEXT("period"), ACE_TEXT("http://www.omg.org/dds"), top_ ()));
      Traversal::deadlineQosPolicy::period (o);
      pop_ ();
    }

    // destinationOrderQosPolicy
    //
    //

    destinationOrderQosPolicy::
    destinationOrderQosPolicy (::XSCRT::XML::Element< ACE_TCHAR >& e)
    : ::XSCRT::Writer< ACE_TCHAR > (e)
    {
    }

    destinationOrderQosPolicy::
    destinationOrderQosPolicy ()
    {
    }

    void destinationOrderQosPolicy::
    traverse (Type const& o)
    {
      Traversal::destinationOrderQosPolicy::traverse (o);
    }

    void destinationOrderQosPolicy::
    kind (Type const& o)
    {
      push_ (::XSCRT::XML::Element< ACE_TCHAR > (ACE_TEXT("kind"), ACE_TEXT("http://www.omg.org/dds"), top_ ()));
      Traversal::destinationOrderQosPolicy::kind (o);
      pop_ ();
    }

    // durabilityQosPolicy
    //
    //

    durabilityQosPolicy::
    durabilityQosPolicy (::XSCRT::XML::Element< ACE_TCHAR >& e)
    : ::XSCRT::Writer< ACE_TCHAR > (e)
    {
    }

    durabilityQosPolicy::
    durabilityQosPolicy ()
    {
    }

    void durabilityQosPolicy::
    traverse (Type const& o)
    {
      Traversal::durabilityQosPolicy::traverse (o);
    }

    void durabilityQosPolicy::
    kind (Type const& o)
    {
      push_ (::XSCRT::XML::Element< ACE_TCHAR > (ACE_TEXT("kind"), ACE_TEXT("http://www.omg.org/dds"), top_ ()));
      Traversal::durabilityQosPolicy::kind (o);
      pop_ ();
    }

    // durabilityServiceQosPolicy
    //
    //

    durabilityServiceQosPolicy::
    durabilityServiceQosPolicy (::XSCRT::XML::Element< ACE_TCHAR >& e)
    : ::XSCRT::Writer< ACE_TCHAR > (e)
    {
    }

    durabilityServiceQosPolicy::
    durabilityServiceQosPolicy ()
    {
    }

    void durabilityServiceQosPolicy::
    traverse (Type const& o)
    {
      Traversal::durabilityServiceQosPolicy::traverse (o);
    }

    void durabilityServiceQosPolicy::
    service_cleanup_delay (Type const& o)
    {
      push_ (::XSCRT::XML::Element< ACE_TCHAR > (ACE_TEXT("service_cleanup_delay"), ACE_TEXT("http://www.omg.org/dds"), top_ ()));
      Traversal::durabilityServiceQosPolicy::service_cleanup_delay (o);
      pop_ ();
    }

    void durabilityServiceQosPolicy::
    history_kind (Type const& o)
    {
      push_ (::XSCRT::XML::Element< ACE_TCHAR > (ACE_TEXT("history_kind"), ACE_TEXT("http://www.omg.org/dds"), top_ ()));
      Traversal::durabilityServiceQosPolicy::history_kind (o);
      pop_ ();
    }

    void durabilityServiceQosPolicy::
    history_depth (Type const& o)
    {
      push_ (::XSCRT::XML::Element< ACE_TCHAR > (ACE_TEXT("history_depth"), ACE_TEXT("http://www.omg.org/dds"), top_ ()));
      Traversal::durabilityServiceQosPolicy::history_depth (o);
      pop_ ();
    }

    void durabilityServiceQosPolicy::
    max_samples (Type const& o)
    {
      push_ (::XSCRT::XML::Element< ACE_TCHAR > (ACE_TEXT("max_samples"), ACE_TEXT("http://www.omg.org/dds"), top_ ()));
      Traversal::durabilityServiceQosPolicy::max_samples (o);
      pop_ ();
    }

    void durabilityServiceQosPolicy::
    max_instances (Type const& o)
    {
      push_ (::XSCRT::XML::Element< ACE_TCHAR > (ACE_TEXT("max_instances"), ACE_TEXT("http://www.omg.org/dds"), top_ ()));
      Traversal::durabilityServiceQosPolicy::max_instances (o);
      pop_ ();
    }

    void durabilityServiceQosPolicy::
    max_samples_per_instance (Type const& o)
    {
      push_ (::XSCRT::XML::Element< ACE_TCHAR > (ACE_TEXT("max_samples_per_instance"), ACE_TEXT("http://www.omg.org/dds"), top_ ()));
      Traversal::durabilityServiceQosPolicy::max_samples_per_instance (o);
      pop_ ();
    }

    // entityFactoryQosPolicy
    //
    //

    entityFactoryQosPolicy::
    entityFactoryQosPolicy (::XSCRT::XML::Element< ACE_TCHAR >& e)
    : ::XSCRT::Writer< ACE_TCHAR > (e)
    {
    }

    entityFactoryQosPolicy::
    entityFactoryQosPolicy ()
    {
    }

    void entityFactoryQosPolicy::
    traverse (Type const& o)
    {
      Traversal::entityFactoryQosPolicy::traverse (o);
    }

    void entityFactoryQosPolicy::
    autoenable_created_entities (Type const& o)
    {
      push_ (::XSCRT::XML::Element< ACE_TCHAR > (ACE_TEXT("autoenable_created_entities"), ACE_TEXT("http://www.omg.org/dds"), top_ ()));
      Traversal::entityFactoryQosPolicy::autoenable_created_entities (o);
      pop_ ();
    }

    // groupDataQosPolicy
    //
    //

    groupDataQosPolicy::
    groupDataQosPolicy (::XSCRT::XML::Element< ACE_TCHAR >& e)
    : ::XSCRT::Writer< ACE_TCHAR > (e)
    {
    }

    groupDataQosPolicy::
    groupDataQosPolicy ()
    {
    }

    void groupDataQosPolicy::
    traverse (Type const& o)
    {
      Traversal::groupDataQosPolicy::traverse (o);
    }

    void groupDataQosPolicy::
    value (Type const& o)
    {
      push_ (::XSCRT::XML::Element< ACE_TCHAR > (ACE_TEXT("value"), ACE_TEXT("http://www.omg.org/dds"), top_ ()));
      Traversal::groupDataQosPolicy::value (o);
      pop_ ();
    }

    // historyQosPolicy
    //
    //

    historyQosPolicy::
    historyQosPolicy (::XSCRT::XML::Element< ACE_TCHAR >& e)
    : ::XSCRT::Writer< ACE_TCHAR > (e)
    {
    }

    historyQosPolicy::
    historyQosPolicy ()
    {
    }

    void historyQosPolicy::
    traverse (Type const& o)
    {
      Traversal::historyQosPolicy::traverse (o);
    }

    void historyQosPolicy::
    kind (Type const& o)
    {
      push_ (::XSCRT::XML::Element< ACE_TCHAR > (ACE_TEXT("kind"), ACE_TEXT("http://www.omg.org/dds"), top_ ()));
      Traversal::historyQosPolicy::kind (o);
      pop_ ();
    }

    void historyQosPolicy::
    depth (Type const& o)
    {
      push_ (::XSCRT::XML::Element< ACE_TCHAR > (ACE_TEXT("depth"), ACE_TEXT("http://www.omg.org/dds"), top_ ()));
      Traversal::historyQosPolicy::depth (o);
      pop_ ();
    }

    // latencyBudgetQosPolicy
    //
    //

    latencyBudgetQosPolicy::
    latencyBudgetQosPolicy (::XSCRT::XML::Element< ACE_TCHAR >& e)
    : ::XSCRT::Writer< ACE_TCHAR > (e)
    {
    }

    latencyBudgetQosPolicy::
    latencyBudgetQosPolicy ()
    {
    }

    void latencyBudgetQosPolicy::
    traverse (Type const& o)
    {
      Traversal::latencyBudgetQosPolicy::traverse (o);
    }

    void latencyBudgetQosPolicy::
    duration (Type const& o)
    {
      push_ (::XSCRT::XML::Element< ACE_TCHAR > (ACE_TEXT("duration"), ACE_TEXT("http://www.omg.org/dds"), top_ ()));
      Traversal::latencyBudgetQosPolicy::duration (o);
      pop_ ();
    }

    // lifespanQosPolicy
    //
    //

    lifespanQosPolicy::
    lifespanQosPolicy (::XSCRT::XML::Element< ACE_TCHAR >& e)
    : ::XSCRT::Writer< ACE_TCHAR > (e)
    {
    }

    lifespanQosPolicy::
    lifespanQosPolicy ()
    {
    }

    void lifespanQosPolicy::
    traverse (Type const& o)
    {
      Traversal::lifespanQosPolicy::traverse (o);
    }

    void lifespanQosPolicy::
    duration (Type const& o)
    {
      push_ (::XSCRT::XML::Element< ACE_TCHAR > (ACE_TEXT("duration"), ACE_TEXT("http://www.omg.org/dds"), top_ ()));
      Traversal::lifespanQosPolicy::duration (o);
      pop_ ();
    }

    // livelinessQosPolicy
    //
    //

    livelinessQosPolicy::
    livelinessQosPolicy (::XSCRT::XML::Element< ACE_TCHAR >& e)
    : ::XSCRT::Writer< ACE_TCHAR > (e)
    {
    }

    livelinessQosPolicy::
    livelinessQosPolicy ()
    {
    }

    void livelinessQosPolicy::
    traverse (Type const& o)
    {
      Traversal::livelinessQosPolicy::traverse (o);
    }

    void livelinessQosPolicy::
    kind (Type const& o)
    {
      push_ (::XSCRT::XML::Element< ACE_TCHAR > (ACE_TEXT("kind"), ACE_TEXT("http://www.omg.org/dds"), top_ ()));
      Traversal::livelinessQosPolicy::kind (o);
      pop_ ();
    }

    void livelinessQosPolicy::
    lease_duration (Type const& o)
    {
      push_ (::XSCRT::XML::Element< ACE_TCHAR > (ACE_TEXT("lease_duration"), ACE_TEXT("http://www.omg.org/dds"), top_ ()));
      Traversal::livelinessQosPolicy::lease_duration (o);
      pop_ ();
    }

    // ownershipQosPolicy
    //
    //

    ownershipQosPolicy::
    ownershipQosPolicy (::XSCRT::XML::Element< ACE_TCHAR >& e)
    : ::XSCRT::Writer< ACE_TCHAR > (e)
    {
    }

    ownershipQosPolicy::
    ownershipQosPolicy ()
    {
    }

    void ownershipQosPolicy::
    traverse (Type const& o)
    {
      Traversal::ownershipQosPolicy::traverse (o);
    }

    void ownershipQosPolicy::
    kind (Type const& o)
    {
      push_ (::XSCRT::XML::Element< ACE_TCHAR > (ACE_TEXT("kind"), ACE_TEXT("http://www.omg.org/dds"), top_ ()));
      Traversal::ownershipQosPolicy::kind (o);
      pop_ ();
    }

    // ownershipStrengthQosPolicy
    //
    //

    ownershipStrengthQosPolicy::
    ownershipStrengthQosPolicy (::XSCRT::XML::Element< ACE_TCHAR >& e)
    : ::XSCRT::Writer< ACE_TCHAR > (e)
    {
    }

    ownershipStrengthQosPolicy::
    ownershipStrengthQosPolicy ()
    {
    }

    void ownershipStrengthQosPolicy::
    traverse (Type const& o)
    {
      Traversal::ownershipStrengthQosPolicy::traverse (o);
    }

    void ownershipStrengthQosPolicy::
    value (Type const& o)
    {
      push_ (::XSCRT::XML::Element< ACE_TCHAR > (ACE_TEXT("value"), ACE_TEXT("http://www.omg.org/dds"), top_ ()));
      Traversal::ownershipStrengthQosPolicy::value (o);
      pop_ ();
    }

    // partitionQosPolicy
    //
    //

    partitionQosPolicy::
    partitionQosPolicy (::XSCRT::XML::Element< ACE_TCHAR >& e)
    : ::XSCRT::Writer< ACE_TCHAR > (e)
    {
    }

    partitionQosPolicy::
    partitionQosPolicy ()
    {
    }

    void partitionQosPolicy::
    traverse (Type const& o)
    {
      Traversal::partitionQosPolicy::traverse (o);
    }

    void partitionQosPolicy::
    name (Type const& o)
    {
      push_ (::XSCRT::XML::Element< ACE_TCHAR > (ACE_TEXT("name"), ACE_TEXT("http://www.omg.org/dds"), top_ ()));
      Traversal::partitionQosPolicy::name (o);
      pop_ ();
    }

    // presentationQosPolicy
    //
    //

    presentationQosPolicy::
    presentationQosPolicy (::XSCRT::XML::Element< ACE_TCHAR >& e)
    : ::XSCRT::Writer< ACE_TCHAR > (e)
    {
    }

    presentationQosPolicy::
    presentationQosPolicy ()
    {
    }

    void presentationQosPolicy::
    traverse (Type const& o)
    {
      Traversal::presentationQosPolicy::traverse (o);
    }

    void presentationQosPolicy::
    access_scope (Type const& o)
    {
      push_ (::XSCRT::XML::Element< ACE_TCHAR > (ACE_TEXT("access_scope"), ACE_TEXT("http://www.omg.org/dds"), top_ ()));
      Traversal::presentationQosPolicy::access_scope (o);
      pop_ ();
    }

    void presentationQosPolicy::
    coherent_access (Type const& o)
    {
      push_ (::XSCRT::XML::Element< ACE_TCHAR > (ACE_TEXT("coherent_access"), ACE_TEXT("http://www.omg.org/dds"), top_ ()));
      Traversal::presentationQosPolicy::coherent_access (o);
      pop_ ();
    }

    void presentationQosPolicy::
    ordered_access (Type const& o)
    {
      push_ (::XSCRT::XML::Element< ACE_TCHAR > (ACE_TEXT("ordered_access"), ACE_TEXT("http://www.omg.org/dds"), top_ ()));
      Traversal::presentationQosPolicy::ordered_access (o);
      pop_ ();
    }

    // readerDataLifecycleQosPolicy
    //
    //

    readerDataLifecycleQosPolicy::
    readerDataLifecycleQosPolicy (::XSCRT::XML::Element< ACE_TCHAR >& e)
    : ::XSCRT::Writer< ACE_TCHAR > (e)
    {
    }

    readerDataLifecycleQosPolicy::
    readerDataLifecycleQosPolicy ()
    {
    }

    void readerDataLifecycleQosPolicy::
    traverse (Type const& o)
    {
      Traversal::readerDataLifecycleQosPolicy::traverse (o);
    }

    void readerDataLifecycleQosPolicy::
    autopurge_nowriter_samples_delay (Type const& o)
    {
      push_ (::XSCRT::XML::Element< ACE_TCHAR > (ACE_TEXT("autopurge_nowriter_samples_delay"), ACE_TEXT("http://www.omg.org/dds"), top_ ()));
      Traversal::readerDataLifecycleQosPolicy::autopurge_nowriter_samples_delay (o);
      pop_ ();
    }

    void readerDataLifecycleQosPolicy::
    autopurge_disposed_samples_delay (Type const& o)
    {
      push_ (::XSCRT::XML::Element< ACE_TCHAR > (ACE_TEXT("autopurge_disposed_samples_delay"), ACE_TEXT("http://www.omg.org/dds"), top_ ()));
      Traversal::readerDataLifecycleQosPolicy::autopurge_disposed_samples_delay (o);
      pop_ ();
    }

    // reliabilityQosPolicy
    //
    //

    reliabilityQosPolicy::
    reliabilityQosPolicy (::XSCRT::XML::Element< ACE_TCHAR >& e)
    : ::XSCRT::Writer< ACE_TCHAR > (e)
    {
    }

    reliabilityQosPolicy::
    reliabilityQosPolicy ()
    {
    }

    void reliabilityQosPolicy::
    traverse (Type const& o)
    {
      Traversal::reliabilityQosPolicy::traverse (o);
    }

    void reliabilityQosPolicy::
    kind (Type const& o)
    {
      push_ (::XSCRT::XML::Element< ACE_TCHAR > (ACE_TEXT("kind"), ACE_TEXT("http://www.omg.org/dds"), top_ ()));
      Traversal::reliabilityQosPolicy::kind (o);
      pop_ ();
    }

    void reliabilityQosPolicy::
    max_blocking_time (Type const& o)
    {
      push_ (::XSCRT::XML::Element< ACE_TCHAR > (ACE_TEXT("max_blocking_time"), ACE_TEXT("http://www.omg.org/dds"), top_ ()));
      Traversal::reliabilityQosPolicy::max_blocking_time (o);
      pop_ ();
    }

    // resourceLimitsQosPolicy
    //
    //

    resourceLimitsQosPolicy::
    resourceLimitsQosPolicy (::XSCRT::XML::Element< ACE_TCHAR >& e)
    : ::XSCRT::Writer< ACE_TCHAR > (e)
    {
    }

    resourceLimitsQosPolicy::
    resourceLimitsQosPolicy ()
    {
    }

    void resourceLimitsQosPolicy::
    traverse (Type const& o)
    {
      Traversal::resourceLimitsQosPolicy::traverse (o);
    }

    void resourceLimitsQosPolicy::
    max_samples (Type const& o)
    {
      push_ (::XSCRT::XML::Element< ACE_TCHAR > (ACE_TEXT("max_samples"), ACE_TEXT("http://www.omg.org/dds"), top_ ()));
      Traversal::resourceLimitsQosPolicy::max_samples (o);
      pop_ ();
    }

    void resourceLimitsQosPolicy::
    max_instances (Type const& o)
    {
      push_ (::XSCRT::XML::Element< ACE_TCHAR > (ACE_TEXT("max_instances"), ACE_TEXT("http://www.omg.org/dds"), top_ ()));
      Traversal::resourceLimitsQosPolicy::max_instances (o);
      pop_ ();
    }

    void resourceLimitsQosPolicy::
    max_samples_per_instance (Type const& o)
    {
      push_ (::XSCRT::XML::Element< ACE_TCHAR > (ACE_TEXT("max_samples_per_instance"), ACE_TEXT("http://www.omg.org/dds"), top_ ()));
      Traversal::resourceLimitsQosPolicy::max_samples_per_instance (o);
      pop_ ();
    }

    void resourceLimitsQosPolicy::
    initial_samples (Type const& o)
    {
      push_ (::XSCRT::XML::Element< ACE_TCHAR > (ACE_TEXT("initial_samples"), ACE_TEXT("http://www.omg.org/dds"), top_ ()));
      Traversal::resourceLimitsQosPolicy::initial_samples (o);
      pop_ ();
    }

    void resourceLimitsQosPolicy::
    initial_instances (Type const& o)
    {
      push_ (::XSCRT::XML::Element< ACE_TCHAR > (ACE_TEXT("initial_instances"), ACE_TEXT("http://www.omg.org/dds"), top_ ()));
      Traversal::resourceLimitsQosPolicy::initial_instances (o);
      pop_ ();
    }

    // timeBasedFilterQosPolicy
    //
    //

    timeBasedFilterQosPolicy::
    timeBasedFilterQosPolicy (::XSCRT::XML::Element< ACE_TCHAR >& e)
    : ::XSCRT::Writer< ACE_TCHAR > (e)
    {
    }

    timeBasedFilterQosPolicy::
    timeBasedFilterQosPolicy ()
    {
    }

    void timeBasedFilterQosPolicy::
    traverse (Type const& o)
    {
      Traversal::timeBasedFilterQosPolicy::traverse (o);
    }

    void timeBasedFilterQosPolicy::
    minimum_separation (Type const& o)
    {
      push_ (::XSCRT::XML::Element< ACE_TCHAR > (ACE_TEXT("minimum_separation"), ACE_TEXT("http://www.omg.org/dds"), top_ ()));
      Traversal::timeBasedFilterQosPolicy::minimum_separation (o);
      pop_ ();
    }

    // topicDataQosPolicy
    //
    //

    topicDataQosPolicy::
    topicDataQosPolicy (::XSCRT::XML::Element< ACE_TCHAR >& e)
    : ::XSCRT::Writer< ACE_TCHAR > (e)
    {
    }

    topicDataQosPolicy::
    topicDataQosPolicy ()
    {
    }

    void topicDataQosPolicy::
    traverse (Type const& o)
    {
      Traversal::topicDataQosPolicy::traverse (o);
    }

    void topicDataQosPolicy::
    value (Type const& o)
    {
      push_ (::XSCRT::XML::Element< ACE_TCHAR > (ACE_TEXT("value"), ACE_TEXT("http://www.omg.org/dds"), top_ ()));
      Traversal::topicDataQosPolicy::value (o);
      pop_ ();
    }

    // transportPriorityQosPolicy
    //
    //

    transportPriorityQosPolicy::
    transportPriorityQosPolicy (::XSCRT::XML::Element< ACE_TCHAR >& e)
    : ::XSCRT::Writer< ACE_TCHAR > (e)
    {
    }

    transportPriorityQosPolicy::
    transportPriorityQosPolicy ()
    {
    }

    void transportPriorityQosPolicy::
    traverse (Type const& o)
    {
      Traversal::transportPriorityQosPolicy::traverse (o);
    }

    void transportPriorityQosPolicy::
    value (Type const& o)
    {
      push_ (::XSCRT::XML::Element< ACE_TCHAR > (ACE_TEXT("value"), ACE_TEXT("http://www.omg.org/dds"), top_ ()));
      Traversal::transportPriorityQosPolicy::value (o);
      pop_ ();
    }

    // userDataQosPolicy
    //
    //

    userDataQosPolicy::
    userDataQosPolicy (::XSCRT::XML::Element< ACE_TCHAR >& e)
    : ::XSCRT::Writer< ACE_TCHAR > (e)
    {
    }

    userDataQosPolicy::
    userDataQosPolicy ()
    {
    }

    void userDataQosPolicy::
    traverse (Type const& o)
    {
      Traversal::userDataQosPolicy::traverse (o);
    }

    void userDataQosPolicy::
    value (Type const& o)
    {
      push_ (::XSCRT::XML::Element< ACE_TCHAR > (ACE_TEXT("value"), ACE_TEXT("http://www.omg.org/dds"), top_ ()));
      Traversal::userDataQosPolicy::value (o);
      pop_ ();
    }

    // writerDataLifecycleQosPolicy
    //
    //

    writerDataLifecycleQosPolicy::
    writerDataLifecycleQosPolicy (::XSCRT::XML::Element< ACE_TCHAR >& e)
    : ::XSCRT::Writer< ACE_TCHAR > (e)
    {
    }

    writerDataLifecycleQosPolicy::
    writerDataLifecycleQosPolicy ()
    {
    }

    void writerDataLifecycleQosPolicy::
    traverse (Type const& o)
    {
      Traversal::writerDataLifecycleQosPolicy::traverse (o);
    }

    void writerDataLifecycleQosPolicy::
    autodispose_unregistered_instances (Type const& o)
    {
      push_ (::XSCRT::XML::Element< ACE_TCHAR > (ACE_TEXT("autodispose_unregistered_instances"), ACE_TEXT("http://www.omg.org/dds"), top_ ()));
      Traversal::writerDataLifecycleQosPolicy::autodispose_unregistered_instances (o);
      pop_ ();
    }

    // domainparticipantQos
    //
    //

    domainparticipantQos::
    domainparticipantQos (::XSCRT::XML::Element< ACE_TCHAR >& e)
    : ::XSCRT::Writer< ACE_TCHAR > (e)
    {
    }

    domainparticipantQos::
    domainparticipantQos ()
    {
    }

    void domainparticipantQos::
    traverse (Type const& o)
    {
      Traversal::domainparticipantQos::traverse (o);
    }

    void domainparticipantQos::
    user_data (Type const& o)
    {
      push_ (::XSCRT::XML::Element< ACE_TCHAR > (ACE_TEXT("user_data"), ACE_TEXT("http://www.omg.org/dds"), top_ ()));
      Traversal::domainparticipantQos::user_data (o);
      pop_ ();
    }

    void domainparticipantQos::
    entity_factory (Type const& o)
    {
      push_ (::XSCRT::XML::Element< ACE_TCHAR > (ACE_TEXT("entity_factory"), ACE_TEXT("http://www.omg.org/dds"), top_ ()));
      Traversal::domainparticipantQos::entity_factory (o);
      pop_ ();
    }

    void domainparticipantQos::
    name (Type const& o)
    {
      ::XSCRT::XML::Attribute< ACE_TCHAR > a (ACE_TEXT ("name"), ACE_TEXT (""), top_ ());
      attr_ (&a);
      Traversal::domainparticipantQos::name (o);
      attr_ (0);
    }

    void domainparticipantQos::
    base_name (Type const& o)
    {
      ::XSCRT::XML::Attribute< ACE_TCHAR > a (ACE_TEXT ("base_name"), ACE_TEXT (""), top_ ());
      attr_ (&a);
      Traversal::domainparticipantQos::base_name (o);
      attr_ (0);
    }

    void domainparticipantQos::
    topic_filter (Type const& o)
    {
      ::XSCRT::XML::Attribute< ACE_TCHAR > a (ACE_TEXT ("topic_filter"), ACE_TEXT (""), top_ ());
      attr_ (&a);
      Traversal::domainparticipantQos::topic_filter (o);
      attr_ (0);
    }

    // publisherQos
    //
    //

    publisherQos::
    publisherQos (::XSCRT::XML::Element< ACE_TCHAR >& e)
    : ::XSCRT::Writer< ACE_TCHAR > (e)
    {
    }

    publisherQos::
    publisherQos ()
    {
    }

    void publisherQos::
    traverse (Type const& o)
    {
      Traversal::publisherQos::traverse (o);
    }

    void publisherQos::
    presentation (Type const& o)
    {
      push_ (::XSCRT::XML::Element< ACE_TCHAR > (ACE_TEXT("presentation"), ACE_TEXT("http://www.omg.org/dds"), top_ ()));
      Traversal::publisherQos::presentation (o);
      pop_ ();
    }

    void publisherQos::
    partition (Type const& o)
    {
      push_ (::XSCRT::XML::Element< ACE_TCHAR > (ACE_TEXT("partition"), ACE_TEXT("http://www.omg.org/dds"), top_ ()));
      Traversal::publisherQos::partition (o);
      pop_ ();
    }

    void publisherQos::
    group_data (Type const& o)
    {
      push_ (::XSCRT::XML::Element< ACE_TCHAR > (ACE_TEXT("group_data"), ACE_TEXT("http://www.omg.org/dds"), top_ ()));
      Traversal::publisherQos::group_data (o);
      pop_ ();
    }

    void publisherQos::
    entity_factory (Type const& o)
    {
      push_ (::XSCRT::XML::Element< ACE_TCHAR > (ACE_TEXT("entity_factory"), ACE_TEXT("http://www.omg.org/dds"), top_ ()));
      Traversal::publisherQos::entity_factory (o);
      pop_ ();
    }

    void publisherQos::
    name (Type const& o)
    {
      ::XSCRT::XML::Attribute< ACE_TCHAR > a (ACE_TEXT ("name"), ACE_TEXT (""), top_ ());
      attr_ (&a);
      Traversal::publisherQos::name (o);
      attr_ (0);
    }

    void publisherQos::
    base_name (Type const& o)
    {
      ::XSCRT::XML::Attribute< ACE_TCHAR > a (ACE_TEXT ("base_name"), ACE_TEXT (""), top_ ());
      attr_ (&a);
      Traversal::publisherQos::base_name (o);
      attr_ (0);
    }

    void publisherQos::
    topic_filter (Type const& o)
    {
      ::XSCRT::XML::Attribute< ACE_TCHAR > a (ACE_TEXT ("topic_filter"), ACE_TEXT (""), top_ ());
      attr_ (&a);
      Traversal::publisherQos::topic_filter (o);
      attr_ (0);
    }

    // subscriberQos
    //
    //

    subscriberQos::
    subscriberQos (::XSCRT::XML::Element< ACE_TCHAR >& e)
    : ::XSCRT::Writer< ACE_TCHAR > (e)
    {
    }

    subscriberQos::
    subscriberQos ()
    {
    }

    void subscriberQos::
    traverse (Type const& o)
    {
      Traversal::subscriberQos::traverse (o);
    }

    void subscriberQos::
    presentation (Type const& o)
    {
      push_ (::XSCRT::XML::Element< ACE_TCHAR > (ACE_TEXT("presentation"), ACE_TEXT("http://www.omg.org/dds"), top_ ()));
      Traversal::subscriberQos::presentation (o);
      pop_ ();
    }

    void subscriberQos::
    partition (Type const& o)
    {
      push_ (::XSCRT::XML::Element< ACE_TCHAR > (ACE_TEXT("partition"), ACE_TEXT("http://www.omg.org/dds"), top_ ()));
      Traversal::subscriberQos::partition (o);
      pop_ ();
    }

    void subscriberQos::
    group_data (Type const& o)
    {
      push_ (::XSCRT::XML::Element< ACE_TCHAR > (ACE_TEXT("group_data"), ACE_TEXT("http://www.omg.org/dds"), top_ ()));
      Traversal::subscriberQos::group_data (o);
      pop_ ();
    }

    void subscriberQos::
    entity_factory (Type const& o)
    {
      push_ (::XSCRT::XML::Element< ACE_TCHAR > (ACE_TEXT("entity_factory"), ACE_TEXT("http://www.omg.org/dds"), top_ ()));
      Traversal::subscriberQos::entity_factory (o);
      pop_ ();
    }

    void subscriberQos::
    name (Type const& o)
    {
      ::XSCRT::XML::Attribute< ACE_TCHAR > a (ACE_TEXT ("name"), ACE_TEXT (""), top_ ());
      attr_ (&a);
      Traversal::subscriberQos::name (o);
      attr_ (0);
    }

    void subscriberQos::
    base_name (Type const& o)
    {
      ::XSCRT::XML::Attribute< ACE_TCHAR > a (ACE_TEXT ("base_name"), ACE_TEXT (""), top_ ());
      attr_ (&a);
      Traversal::subscriberQos::base_name (o);
      attr_ (0);
    }

    void subscriberQos::
    topic_filter (Type const& o)
    {
      ::XSCRT::XML::Attribute< ACE_TCHAR > a (ACE_TEXT ("topic_filter"), ACE_TEXT (""), top_ ());
      attr_ (&a);
      Traversal::subscriberQos::topic_filter (o);
      attr_ (0);
    }

    // topicQos
    //
    //

    topicQos::
    topicQos (::XSCRT::XML::Element< ACE_TCHAR >& e)
    : ::XSCRT::Writer< ACE_TCHAR > (e)
    {
    }

    topicQos::
    topicQos ()
    {
    }

    void topicQos::
    traverse (Type const& o)
    {
      Traversal::topicQos::traverse (o);
    }

    void topicQos::
    topic_data (Type const& o)
    {
      push_ (::XSCRT::XML::Element< ACE_TCHAR > (ACE_TEXT("topic_data"), ACE_TEXT("http://www.omg.org/dds"), top_ ()));
      Traversal::topicQos::topic_data (o);
      pop_ ();
    }

    void topicQos::
    durability (Type const& o)
    {
      push_ (::XSCRT::XML::Element< ACE_TCHAR > (ACE_TEXT("durability"), ACE_TEXT("http://www.omg.org/dds"), top_ ()));
      Traversal::topicQos::durability (o);
      pop_ ();
    }

    void topicQos::
    durability_service (Type const& o)
    {
      push_ (::XSCRT::XML::Element< ACE_TCHAR > (ACE_TEXT("durability_service"), ACE_TEXT("http://www.omg.org/dds"), top_ ()));
      Traversal::topicQos::durability_service (o);
      pop_ ();
    }

    void topicQos::
    deadline (Type const& o)
    {
      push_ (::XSCRT::XML::Element< ACE_TCHAR > (ACE_TEXT("deadline"), ACE_TEXT("http://www.omg.org/dds"), top_ ()));
      Traversal::topicQos::deadline (o);
      pop_ ();
    }

    void topicQos::
    latency_budget (Type const& o)
    {
      push_ (::XSCRT::XML::Element< ACE_TCHAR > (ACE_TEXT("latency_budget"), ACE_TEXT("http://www.omg.org/dds"), top_ ()));
      Traversal::topicQos::latency_budget (o);
      pop_ ();
    }

    void topicQos::
    liveliness (Type const& o)
    {
      push_ (::XSCRT::XML::Element< ACE_TCHAR > (ACE_TEXT("liveliness"), ACE_TEXT("http://www.omg.org/dds"), top_ ()));
      Traversal::topicQos::liveliness (o);
      pop_ ();
    }

    void topicQos::
    reliability (Type const& o)
    {
      push_ (::XSCRT::XML::Element< ACE_TCHAR > (ACE_TEXT("reliability"), ACE_TEXT("http://www.omg.org/dds"), top_ ()));
      Traversal::topicQos::reliability (o);
      pop_ ();
    }

    void topicQos::
    destination_order (Type const& o)
    {
      push_ (::XSCRT::XML::Element< ACE_TCHAR > (ACE_TEXT("destination_order"), ACE_TEXT("http://www.omg.org/dds"), top_ ()));
      Traversal::topicQos::destination_order (o);
      pop_ ();
    }

    void topicQos::
    history (Type const& o)
    {
      push_ (::XSCRT::XML::Element< ACE_TCHAR > (ACE_TEXT("history"), ACE_TEXT("http://www.omg.org/dds"), top_ ()));
      Traversal::topicQos::history (o);
      pop_ ();
    }

    void topicQos::
    resource_limits (Type const& o)
    {
      push_ (::XSCRT::XML::Element< ACE_TCHAR > (ACE_TEXT("resource_limits"), ACE_TEXT("http://www.omg.org/dds"), top_ ()));
      Traversal::topicQos::resource_limits (o);
      pop_ ();
    }

    void topicQos::
    transport_priority (Type const& o)
    {
      push_ (::XSCRT::XML::Element< ACE_TCHAR > (ACE_TEXT("transport_priority"), ACE_TEXT("http://www.omg.org/dds"), top_ ()));
      Traversal::topicQos::transport_priority (o);
      pop_ ();
    }

    void topicQos::
    lifespan (Type const& o)
    {
      push_ (::XSCRT::XML::Element< ACE_TCHAR > (ACE_TEXT("lifespan"), ACE_TEXT("http://www.omg.org/dds"), top_ ()));
      Traversal::topicQos::lifespan (o);
      pop_ ();
    }

    void topicQos::
    ownership (Type const& o)
    {
      push_ (::XSCRT::XML::Element< ACE_TCHAR > (ACE_TEXT("ownership"), ACE_TEXT("http://www.omg.org/dds"), top_ ()));
      Traversal::topicQos::ownership (o);
      pop_ ();
    }

    void topicQos::
    name (Type const& o)
    {
      ::XSCRT::XML::Attribute< ACE_TCHAR > a (ACE_TEXT ("name"), ACE_TEXT (""), top_ ());
      attr_ (&a);
      Traversal::topicQos::name (o);
      attr_ (0);
    }

    void topicQos::
    base_name (Type const& o)
    {
      ::XSCRT::XML::Attribute< ACE_TCHAR > a (ACE_TEXT ("base_name"), ACE_TEXT (""), top_ ());
      attr_ (&a);
      Traversal::topicQos::base_name (o);
      attr_ (0);
    }

    void topicQos::
    topic_filter (Type const& o)
    {
      ::XSCRT::XML::Attribute< ACE_TCHAR > a (ACE_TEXT ("topic_filter"), ACE_TEXT (""), top_ ());
      attr_ (&a);
      Traversal::topicQos::topic_filter (o);
      attr_ (0);
    }

    // datareaderQos
    //
    //

    datareaderQos::
    datareaderQos (::XSCRT::XML::Element< ACE_TCHAR >& e)
    : ::XSCRT::Writer< ACE_TCHAR > (e)
    {
    }

    datareaderQos::
    datareaderQos ()
    {
    }

    void datareaderQos::
    traverse (Type const& o)
    {
      Traversal::datareaderQos::traverse (o);
    }

    void datareaderQos::
    durability (Type const& o)
    {
      push_ (::XSCRT::XML::Element< ACE_TCHAR > (ACE_TEXT("durability"), ACE_TEXT("http://www.omg.org/dds"), top_ ()));
      Traversal::datareaderQos::durability (o);
      pop_ ();
    }

    void datareaderQos::
    deadline (Type const& o)
    {
      push_ (::XSCRT::XML::Element< ACE_TCHAR > (ACE_TEXT("deadline"), ACE_TEXT("http://www.omg.org/dds"), top_ ()));
      Traversal::datareaderQos::deadline (o);
      pop_ ();
    }

    void datareaderQos::
    latency_budget (Type const& o)
    {
      push_ (::XSCRT::XML::Element< ACE_TCHAR > (ACE_TEXT("latency_budget"), ACE_TEXT("http://www.omg.org/dds"), top_ ()));
      Traversal::datareaderQos::latency_budget (o);
      pop_ ();
    }

    void datareaderQos::
    liveliness (Type const& o)
    {
      push_ (::XSCRT::XML::Element< ACE_TCHAR > (ACE_TEXT("liveliness"), ACE_TEXT("http://www.omg.org/dds"), top_ ()));
      Traversal::datareaderQos::liveliness (o);
      pop_ ();
    }

    void datareaderQos::
    reliability (Type const& o)
    {
      push_ (::XSCRT::XML::Element< ACE_TCHAR > (ACE_TEXT("reliability"), ACE_TEXT("http://www.omg.org/dds"), top_ ()));
      Traversal::datareaderQos::reliability (o);
      pop_ ();
    }

    void datareaderQos::
    destination_order (Type const& o)
    {
      push_ (::XSCRT::XML::Element< ACE_TCHAR > (ACE_TEXT("destination_order"), ACE_TEXT("http://www.omg.org/dds"), top_ ()));
      Traversal::datareaderQos::destination_order (o);
      pop_ ();
    }

    void datareaderQos::
    history (Type const& o)
    {
      push_ (::XSCRT::XML::Element< ACE_TCHAR > (ACE_TEXT("history"), ACE_TEXT("http://www.omg.org/dds"), top_ ()));
      Traversal::datareaderQos::history (o);
      pop_ ();
    }

    void datareaderQos::
    resource_limits (Type const& o)
    {
      push_ (::XSCRT::XML::Element< ACE_TCHAR > (ACE_TEXT("resource_limits"), ACE_TEXT("http://www.omg.org/dds"), top_ ()));
      Traversal::datareaderQos::resource_limits (o);
      pop_ ();
    }

    void datareaderQos::
    user_data (Type const& o)
    {
      push_ (::XSCRT::XML::Element< ACE_TCHAR > (ACE_TEXT("user_data"), ACE_TEXT("http://www.omg.org/dds"), top_ ()));
      Traversal::datareaderQos::user_data (o);
      pop_ ();
    }

    void datareaderQos::
    ownership (Type const& o)
    {
      push_ (::XSCRT::XML::Element< ACE_TCHAR > (ACE_TEXT("ownership"), ACE_TEXT("http://www.omg.org/dds"), top_ ()));
      Traversal::datareaderQos::ownership (o);
      pop_ ();
    }

    void datareaderQos::
    time_based_filter (Type const& o)
    {
      push_ (::XSCRT::XML::Element< ACE_TCHAR > (ACE_TEXT("time_based_filter"), ACE_TEXT("http://www.omg.org/dds"), top_ ()));
      Traversal::datareaderQos::time_based_filter (o);
      pop_ ();
    }

    void datareaderQos::
    reader_data_lifecycle (Type const& o)
    {
      push_ (::XSCRT::XML::Element< ACE_TCHAR > (ACE_TEXT("reader_data_lifecycle"), ACE_TEXT("http://www.omg.org/dds"), top_ ()));
      Traversal::datareaderQos::reader_data_lifecycle (o);
      pop_ ();
    }

    void datareaderQos::
    name (Type const& o)
    {
      ::XSCRT::XML::Attribute< ACE_TCHAR > a (ACE_TEXT ("name"), ACE_TEXT (""), top_ ());
      attr_ (&a);
      Traversal::datareaderQos::name (o);
      attr_ (0);
    }

    void datareaderQos::
    base_name (Type const& o)
    {
      ::XSCRT::XML::Attribute< ACE_TCHAR > a (ACE_TEXT ("base_name"), ACE_TEXT (""), top_ ());
      attr_ (&a);
      Traversal::datareaderQos::base_name (o);
      attr_ (0);
    }

    void datareaderQos::
    topic_filter (Type const& o)
    {
      ::XSCRT::XML::Attribute< ACE_TCHAR > a (ACE_TEXT ("topic_filter"), ACE_TEXT (""), top_ ());
      attr_ (&a);
      Traversal::datareaderQos::topic_filter (o);
      attr_ (0);
    }

    // datawriterQos
    //
    //

    datawriterQos::
    datawriterQos (::XSCRT::XML::Element< ACE_TCHAR >& e)
    : ::XSCRT::Writer< ACE_TCHAR > (e)
    {
    }

    datawriterQos::
    datawriterQos ()
    {
    }

    void datawriterQos::
    traverse (Type const& o)
    {
      Traversal::datawriterQos::traverse (o);
    }

    void datawriterQos::
    durability (Type const& o)
    {
      push_ (::XSCRT::XML::Element< ACE_TCHAR > (ACE_TEXT("durability"), ACE_TEXT("http://www.omg.org/dds"), top_ ()));
      Traversal::datawriterQos::durability (o);
      pop_ ();
    }

    void datawriterQos::
    durability_service (Type const& o)
    {
      push_ (::XSCRT::XML::Element< ACE_TCHAR > (ACE_TEXT("durability_service"), ACE_TEXT("http://www.omg.org/dds"), top_ ()));
      Traversal::datawriterQos::durability_service (o);
      pop_ ();
    }

    void datawriterQos::
    deadline (Type const& o)
    {
      push_ (::XSCRT::XML::Element< ACE_TCHAR > (ACE_TEXT("deadline"), ACE_TEXT("http://www.omg.org/dds"), top_ ()));
      Traversal::datawriterQos::deadline (o);
      pop_ ();
    }

    void datawriterQos::
    latency_budget (Type const& o)
    {
      push_ (::XSCRT::XML::Element< ACE_TCHAR > (ACE_TEXT("latency_budget"), ACE_TEXT("http://www.omg.org/dds"), top_ ()));
      Traversal::datawriterQos::latency_budget (o);
      pop_ ();
    }

    void datawriterQos::
    liveliness (Type const& o)
    {
      push_ (::XSCRT::XML::Element< ACE_TCHAR > (ACE_TEXT("liveliness"), ACE_TEXT("http://www.omg.org/dds"), top_ ()));
      Traversal::datawriterQos::liveliness (o);
      pop_ ();
    }

    void datawriterQos::
    reliability (Type const& o)
    {
      push_ (::XSCRT::XML::Element< ACE_TCHAR > (ACE_TEXT("reliability"), ACE_TEXT("http://www.omg.org/dds"), top_ ()));
      Traversal::datawriterQos::reliability (o);
      pop_ ();
    }

    void datawriterQos::
    destination_order (Type const& o)
    {
      push_ (::XSCRT::XML::Element< ACE_TCHAR > (ACE_TEXT("destination_order"), ACE_TEXT("http://www.omg.org/dds"), top_ ()));
      Traversal::datawriterQos::destination_order (o);
      pop_ ();
    }

    void datawriterQos::
    history (Type const& o)
    {
      push_ (::XSCRT::XML::Element< ACE_TCHAR > (ACE_TEXT("history"), ACE_TEXT("http://www.omg.org/dds"), top_ ()));
      Traversal::datawriterQos::history (o);
      pop_ ();
    }

    void datawriterQos::
    resource_limits (Type const& o)
    {
      push_ (::XSCRT::XML::Element< ACE_TCHAR > (ACE_TEXT("resource_limits"), ACE_TEXT("http://www.omg.org/dds"), top_ ()));
      Traversal::datawriterQos::resource_limits (o);
      pop_ ();
    }

    void datawriterQos::
    transport_priority (Type const& o)
    {
      push_ (::XSCRT::XML::Element< ACE_TCHAR > (ACE_TEXT("transport_priority"), ACE_TEXT("http://www.omg.org/dds"), top_ ()));
      Traversal::datawriterQos::transport_priority (o);
      pop_ ();
    }

    void datawriterQos::
    lifespan (Type const& o)
    {
      push_ (::XSCRT::XML::Element< ACE_TCHAR > (ACE_TEXT("lifespan"), ACE_TEXT("http://www.omg.org/dds"), top_ ()));
      Traversal::datawriterQos::lifespan (o);
      pop_ ();
    }

    void datawriterQos::
    user_data (Type const& o)
    {
      push_ (::XSCRT::XML::Element< ACE_TCHAR > (ACE_TEXT("user_data"), ACE_TEXT("http://www.omg.org/dds"), top_ ()));
      Traversal::datawriterQos::user_data (o);
      pop_ ();
    }

    void datawriterQos::
    ownership (Type const& o)
    {
      push_ (::XSCRT::XML::Element< ACE_TCHAR > (ACE_TEXT("ownership"), ACE_TEXT("http://www.omg.org/dds"), top_ ()));
      Traversal::datawriterQos::ownership (o);
      pop_ ();
    }

    void datawriterQos::
    ownership_strength (Type const& o)
    {
      push_ (::XSCRT::XML::Element< ACE_TCHAR > (ACE_TEXT("ownership_strength"), ACE_TEXT("http://www.omg.org/dds"), top_ ()));
      Traversal::datawriterQos::ownership_strength (o);
      pop_ ();
    }

    void datawriterQos::
    writer_data_lifecycle (Type const& o)
    {
      push_ (::XSCRT::XML::Element< ACE_TCHAR > (ACE_TEXT("writer_data_lifecycle"), ACE_TEXT("http://www.omg.org/dds"), top_ ()));
      Traversal::datawriterQos::writer_data_lifecycle (o);
      pop_ ();
    }

    void datawriterQos::
    name (Type const& o)
    {
      ::XSCRT::XML::Attribute< ACE_TCHAR > a (ACE_TEXT ("name"), ACE_TEXT (""), top_ ());
      attr_ (&a);
      Traversal::datawriterQos::name (o);
      attr_ (0);
    }

    void datawriterQos::
    base_name (Type const& o)
    {
      ::XSCRT::XML::Attribute< ACE_TCHAR > a (ACE_TEXT ("base_name"), ACE_TEXT (""), top_ ());
      attr_ (&a);
      Traversal::datawriterQos::base_name (o);
      attr_ (0);
    }

    void datawriterQos::
    topic_filter (Type const& o)
    {
      ::XSCRT::XML::Attribute< ACE_TCHAR > a (ACE_TEXT ("topic_filter"), ACE_TEXT (""), top_ ());
      attr_ (&a);
      Traversal::datawriterQos::topic_filter (o);
      attr_ (0);
    }

    // qosProfile
    //
    //

    qosProfile::
    qosProfile (::XSCRT::XML::Element< ACE_TCHAR >& e)
    : ::XSCRT::Writer< ACE_TCHAR > (e)
    {
    }

    qosProfile::
    qosProfile ()
    {
    }

    void qosProfile::
    traverse (Type const& o)
    {
      Traversal::qosProfile::traverse (o);
    }

    void qosProfile::
    datareader_qos_pre (Type const&)
    {
      push_ (::XSCRT::XML::Element< ACE_TCHAR > (ACE_TEXT("datareader_qos"), ACE_TEXT("http://www.omg.org/dds"), top_ ()));
    }

    void qosProfile::
    datareader_qos_next (Type const& o)
    {
      datareader_qos_post (o);
      datareader_qos_pre (o);
    }

    void qosProfile::
    datareader_qos_post (Type const&)
    {
      pop_ ();
    }

    void qosProfile::
    datawriter_qos_pre (Type const&)
    {
      push_ (::XSCRT::XML::Element< ACE_TCHAR > (ACE_TEXT("datawriter_qos"), ACE_TEXT("http://www.omg.org/dds"), top_ ()));
    }

    void qosProfile::
    datawriter_qos_next (Type const& o)
    {
      datawriter_qos_post (o);
      datawriter_qos_pre (o);
    }

    void qosProfile::
    datawriter_qos_post (Type const&)
    {
      pop_ ();
    }

    void qosProfile::
    topic_qos_pre (Type const&)
    {
      push_ (::XSCRT::XML::Element< ACE_TCHAR > (ACE_TEXT("topic_qos"), ACE_TEXT("http://www.omg.org/dds"), top_ ()));
    }

    void qosProfile::
    topic_qos_next (Type const& o)
    {
      topic_qos_post (o);
      topic_qos_pre (o);
    }

    void qosProfile::
    topic_qos_post (Type const&)
    {
      pop_ ();
    }

    void qosProfile::
    domainparticipant_qos_pre (Type const&)
    {
      push_ (::XSCRT::XML::Element< ACE_TCHAR > (ACE_TEXT("domainparticipant_qos"), ACE_TEXT("http://www.omg.org/dds"), top_ ()));
    }

    void qosProfile::
    domainparticipant_qos_next (Type const& o)
    {
      domainparticipant_qos_post (o);
      domainparticipant_qos_pre (o);
    }

    void qosProfile::
    domainparticipant_qos_post (Type const&)
    {
      pop_ ();
    }

    void qosProfile::
    publisher_qos_pre (Type const&)
    {
      push_ (::XSCRT::XML::Element< ACE_TCHAR > (ACE_TEXT("publisher_qos"), ACE_TEXT("http://www.omg.org/dds"), top_ ()));
    }

    void qosProfile::
    publisher_qos_next (Type const& o)
    {
      publisher_qos_post (o);
      publisher_qos_pre (o);
    }

    void qosProfile::
    publisher_qos_post (Type const&)
    {
      pop_ ();
    }

    void qosProfile::
    subscriber_qos_pre (Type const&)
    {
      push_ (::XSCRT::XML::Element< ACE_TCHAR > (ACE_TEXT("subscriber_qos"), ACE_TEXT("http://www.omg.org/dds"), top_ ()));
    }

    void qosProfile::
    subscriber_qos_next (Type const& o)
    {
      subscriber_qos_post (o);
      subscriber_qos_pre (o);
    }

    void qosProfile::
    subscriber_qos_post (Type const&)
    {
      pop_ ();
    }

    void qosProfile::
    name (Type const& o)
    {
      ::XSCRT::XML::Attribute< ACE_TCHAR > a (ACE_TEXT ("name"), ACE_TEXT (""), top_ ());
      attr_ (&a);
      Traversal::qosProfile::name (o);
      attr_ (0);
    }

    void qosProfile::
    base_name (Type const& o)
    {
      ::XSCRT::XML::Attribute< ACE_TCHAR > a (ACE_TEXT ("base_name"), ACE_TEXT (""), top_ ());
      attr_ (&a);
      Traversal::qosProfile::base_name (o);
      attr_ (0);
    }

    // qosProfile_seq
    //
    //

    qosProfile_seq::
    qosProfile_seq (::XSCRT::XML::Element< ACE_TCHAR >& e)
    : ::XSCRT::Writer< ACE_TCHAR > (e)
    {
    }

    qosProfile_seq::
    qosProfile_seq ()
    {
    }

    void qosProfile_seq::
    traverse (Type const& o)
    {
      Traversal::qosProfile_seq::traverse (o);
    }

    void qosProfile_seq::
    qos_profile_pre (Type const&)
    {
      push_ (::XSCRT::XML::Element< ACE_TCHAR > (ACE_TEXT("qos_profile"), ACE_TEXT("http://www.omg.org/dds"), top_ ()));
    }

    void qosProfile_seq::
    qos_profile_next (Type const& o)
    {
      qos_profile_post (o);
      qos_profile_pre (o);
    }

    void qosProfile_seq::
    qos_profile_post (Type const&)
    {
      pop_ ();
    }
  }
}

namespace dds
{
  namespace writer
  {
    void
    dds (::dds::qosProfile_seq const& s, xercesc::DOMDocument* d)
    {
      ::XSCRT::XML::Element< ACE_TCHAR > e (d->getDocumentElement ());
      if (e.name () != ACE_TEXT ("dds"))
      {
        throw 1;
      }

      struct W : virtual ::dds::Writer::qosProfile_seq,
      virtual ::dds::Writer::qosProfile,
      virtual ::dds::Writer::datareaderQos,
      virtual ::dds::Writer::durabilityQosPolicy,
      virtual ::dds::Writer::durabilityKind,
      virtual ::dds::Writer::deadlineQosPolicy,
      virtual ::dds::Writer::duration,
      virtual ::XMLSchema::Writer::FundamentalType< ::XMLSchema::string< ACE_TCHAR >, ACE_TCHAR >,
      virtual ::dds::Writer::latencyBudgetQosPolicy,
      virtual ::dds::Writer::livelinessQosPolicy,
      virtual ::dds::Writer::livelinessKind,
      virtual ::dds::Writer::reliabilityQosPolicy,
      virtual ::dds::Writer::reliabilityKind,
      virtual ::dds::Writer::destinationOrderQosPolicy,
      virtual ::dds::Writer::destinationOrderKind,
      virtual ::dds::Writer::historyQosPolicy,
      virtual ::dds::Writer::historyKind,
      //virtual ::XMLSchema::Writer::FundamentalType< ::XMLSchema::positiveInteger, ACE_TCHAR >,
      virtual ::dds::Writer::resourceLimitsQosPolicy,
      virtual ::dds::Writer::userDataQosPolicy,
      virtual ::dds::Writer::ownershipQosPolicy,
      virtual ::dds::Writer::ownershipKind,
      virtual ::dds::Writer::timeBasedFilterQosPolicy,
      virtual ::dds::Writer::readerDataLifecycleQosPolicy,
      virtual ::dds::Writer::datawriterQos,
      virtual ::dds::Writer::durabilityServiceQosPolicy,
      virtual ::dds::Writer::transportPriorityQosPolicy,
      virtual ::XMLSchema::Writer::FundamentalType< ::XMLSchema::nonNegativeInteger, ACE_TCHAR >,
      virtual ::dds::Writer::lifespanQosPolicy,
      virtual ::dds::Writer::ownershipStrengthQosPolicy,
      virtual ::dds::Writer::writerDataLifecycleQosPolicy,
      virtual ::XMLSchema::Writer::FundamentalType< ::XMLSchema::boolean, ACE_TCHAR >,
      virtual ::dds::Writer::topicQos,
      virtual ::dds::Writer::topicDataQosPolicy,
      virtual ::dds::Writer::domainparticipantQos,
      virtual ::dds::Writer::entityFactoryQosPolicy,
      virtual ::dds::Writer::publisherQos,
      virtual ::dds::Writer::presentationQosPolicy,
      virtual ::dds::Writer::presentationAccessScopeKind,
      virtual ::dds::Writer::partitionQosPolicy,
      virtual ::dds::Writer::stringSeq,
      virtual ::dds::Writer::groupDataQosPolicy,
      virtual ::dds::Writer::subscriberQos
      //virtual ::XSCRT::Writer< ACE_TCHAR >
      {
        W (::XSCRT::XML::Element< ACE_TCHAR >& e)
        : ::XSCRT::Writer< ACE_TCHAR > (e)
        {
        }
      };

      W w (e);
      w.dispatch (s);
    }
  }
}

