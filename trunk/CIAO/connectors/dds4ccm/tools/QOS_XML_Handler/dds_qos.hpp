/* $Id$
 * This code was generated by the XML Schema Compiler.
 *
 * Changes made to this code will most likely be overwritten
 * when the handlers are recompiled.
 *
 * If you find errors or feel that there are bugfixes to be made,
 * please contact the current XSC maintainer:
 *             Will Otte <wotte@dre.vanderbilt.edu>
 */
#ifndef DDS_QOS_HPP
#define DDS_QOS_HPP

#include "XML_QOS_Handler_Export.h"
// Forward declarations.
//
namespace dds
{
  class destinationOrderKind;
  class durabilityKind;
  class historyKind;
  class livelinessKind;
  class presentationAccessScopeKind;
  class reliabilityKind;
  class ownershipKind;
  class duration;
  class stringSeq;
  class deadlineQosPolicy;
  class destinationOrderQosPolicy;
  class durabilityQosPolicy;
  class durabilityServiceQosPolicy;
  class entityFactoryQosPolicy;
  class groupDataQosPolicy;
  class historyQosPolicy;
  class latencyBudgetQosPolicy;
  class lifespanQosPolicy;
  class livelinessQosPolicy;
  class ownershipQosPolicy;
  class ownershipStrengthQosPolicy;
  class partitionQosPolicy;
  class presentationQosPolicy;
  class readerDataLifecycleQosPolicy;
  class reliabilityQosPolicy;
  class resourceLimitsQosPolicy;
  class timeBasedFilterQosPolicy;
  class topicDataQosPolicy;
  class transportPriorityQosPolicy;
  class userDataQosPolicy;
  class writerDataLifecycleQosPolicy;
  class domainparticipantQos;
  class publisherQos;
  class subscriberQos;
  class topicQos;
  class datareaderQos;
  class datawriterQos;
  class qosProfile;
  class qosProfile_seq;
}

#include <memory>
#include <string>
#include <list>
#include "XMLSchema/Types.hpp"
#include "XMLSchema/id_map.hpp"
#include "ace/Refcounted_Auto_Ptr.h"
#include "ace/Null_Mutex.h"
#include "ace/TSS_T.h"
#include "ace/ace_wchar.h"
#include "ace/Singleton.h"

namespace dds
{
  class XML_QOS_Handler_Export destinationOrderKind : public ::XSCRT::Type
  {
    public:
    destinationOrderKind (::XSCRT::XML::Element< ACE_TCHAR > const&);
    destinationOrderKind (::XSCRT::XML::Attribute< ACE_TCHAR > const&);

    static destinationOrderKind const BY_RECEPTION_TIMESTAMP_DESTINATIONORDER_QOS;
    static destinationOrderKind const BY_SOURCE_TIMESTAMP_DESTINATIONORDER_QOS;

    enum Value
    {
      BY_RECEPTION_TIMESTAMP_DESTINATIONORDER_QOS_l, BY_SOURCE_TIMESTAMP_DESTINATIONORDER_QOS_l
    };


    Value
    integral () const;

    friend bool XML_QOS_Handler_Export
    operator== (destinationOrderKind const& a, destinationOrderKind const& b);

    friend bool XML_QOS_Handler_Export
    operator!= (destinationOrderKind const& a, destinationOrderKind const& b);

    private:
    destinationOrderKind (Value v);

    Value v_;
  };

  bool XML_QOS_Handler_Export operator== (destinationOrderKind const &a, destinationOrderKind const &b);

  bool XML_QOS_Handler_Export operator!= (destinationOrderKind const &a, destinationOrderKind const &b);


  class XML_QOS_Handler_Export durabilityKind : public ::XSCRT::Type
  {
    public:
    durabilityKind (::XSCRT::XML::Element< ACE_TCHAR > const&);
    durabilityKind (::XSCRT::XML::Attribute< ACE_TCHAR > const&);

    static durabilityKind const VOLATILE_DURABILITY_QOS;
    static durabilityKind const TRANSIENT_LOCAL_DURABILITY_QOS;
    static durabilityKind const TRANSIENT_DURABILITY_QOS;
    static durabilityKind const PERSISTENT_DURABILITY_QOS;

    enum Value
    {
      VOLATILE_DURABILITY_QOS_l, TRANSIENT_LOCAL_DURABILITY_QOS_l, TRANSIENT_DURABILITY_QOS_l, PERSISTENT_DURABILITY_QOS_l
    };


    Value
    integral () const;

    friend bool XML_QOS_Handler_Export
    operator== (durabilityKind const& a, durabilityKind const& b);

    friend bool XML_QOS_Handler_Export
    operator!= (durabilityKind const& a, durabilityKind const& b);

    private:
    durabilityKind (Value v);

    Value v_;
  };

  bool XML_QOS_Handler_Export operator== (durabilityKind const &a, durabilityKind const &b);

  bool XML_QOS_Handler_Export operator!= (durabilityKind const &a, durabilityKind const &b);


  class XML_QOS_Handler_Export historyKind : public ::XSCRT::Type
  {
    public:
    historyKind (::XSCRT::XML::Element< ACE_TCHAR > const&);
    historyKind (::XSCRT::XML::Attribute< ACE_TCHAR > const&);

    static historyKind const KEEP_LAST_HISTORY_QOS;
    static historyKind const KEEP_ALL_HISTORY_QOS;

    enum Value
    {
      KEEP_LAST_HISTORY_QOS_l, KEEP_ALL_HISTORY_QOS_l
    };


    Value
    integral () const;

    friend bool XML_QOS_Handler_Export
    operator== (historyKind const& a, historyKind const& b);

    friend bool XML_QOS_Handler_Export
    operator!= (historyKind const& a, historyKind const& b);

    private:
    historyKind (Value v);

    Value v_;
  };

  bool XML_QOS_Handler_Export operator== (historyKind const &a, historyKind const &b);

  bool XML_QOS_Handler_Export operator!= (historyKind const &a, historyKind const &b);


  class XML_QOS_Handler_Export livelinessKind : public ::XSCRT::Type
  {
    public:
    livelinessKind (::XSCRT::XML::Element< ACE_TCHAR > const&);
    livelinessKind (::XSCRT::XML::Attribute< ACE_TCHAR > const&);

    static livelinessKind const AUTOMATIC_LIVELINESS_QOS;
    static livelinessKind const MANUAL_BY_PARTICIPANT_LIVELINESS_QOS;
    static livelinessKind const MANUAL_BY_TOPIC_LIVELINESS_QOS;

    enum Value
    {
      AUTOMATIC_LIVELINESS_QOS_l, MANUAL_BY_PARTICIPANT_LIVELINESS_QOS_l, MANUAL_BY_TOPIC_LIVELINESS_QOS_l
    };


    Value
    integral () const;

    friend bool XML_QOS_Handler_Export
    operator== (livelinessKind const& a, livelinessKind const& b);

    friend bool XML_QOS_Handler_Export
    operator!= (livelinessKind const& a, livelinessKind const& b);

    private:
    livelinessKind (Value v);

    Value v_;
  };

  bool XML_QOS_Handler_Export operator== (livelinessKind const &a, livelinessKind const &b);

  bool XML_QOS_Handler_Export operator!= (livelinessKind const &a, livelinessKind const &b);


  class XML_QOS_Handler_Export presentationAccessScopeKind : public ::XSCRT::Type
  {
    public:
    presentationAccessScopeKind (::XSCRT::XML::Element< ACE_TCHAR > const&);
    presentationAccessScopeKind (::XSCRT::XML::Attribute< ACE_TCHAR > const&);

    static presentationAccessScopeKind const INSTANCE_PRESENTATION_QOS;
    static presentationAccessScopeKind const TOPIC_PRESENTATION_QOS;
    static presentationAccessScopeKind const GROUP_PRESENTATION_QOS;

    enum Value
    {
      INSTANCE_PRESENTATION_QOS_l, TOPIC_PRESENTATION_QOS_l, GROUP_PRESENTATION_QOS_l
    };


    Value
    integral () const;

    friend bool XML_QOS_Handler_Export
    operator== (presentationAccessScopeKind const& a, presentationAccessScopeKind const& b);

    friend bool XML_QOS_Handler_Export
    operator!= (presentationAccessScopeKind const& a, presentationAccessScopeKind const& b);

    private:
    presentationAccessScopeKind (Value v);

    Value v_;
  };

  bool XML_QOS_Handler_Export operator== (presentationAccessScopeKind const &a, presentationAccessScopeKind const &b);

  bool XML_QOS_Handler_Export operator!= (presentationAccessScopeKind const &a, presentationAccessScopeKind const &b);


  class XML_QOS_Handler_Export reliabilityKind : public ::XSCRT::Type
  {
    public:
    reliabilityKind (::XSCRT::XML::Element< ACE_TCHAR > const&);
    reliabilityKind (::XSCRT::XML::Attribute< ACE_TCHAR > const&);

    static reliabilityKind const BEST_EFFORT_RELIABILITY_QOS;
    static reliabilityKind const RELIABLE_RELIABILITY_QOS;

    enum Value
    {
      BEST_EFFORT_RELIABILITY_QOS_l, RELIABLE_RELIABILITY_QOS_l
    };


    Value
    integral () const;

    friend bool XML_QOS_Handler_Export
    operator== (reliabilityKind const& a, reliabilityKind const& b);

    friend bool XML_QOS_Handler_Export
    operator!= (reliabilityKind const& a, reliabilityKind const& b);

    private:
    reliabilityKind (Value v);

    Value v_;
  };

  bool XML_QOS_Handler_Export operator== (reliabilityKind const &a, reliabilityKind const &b);

  bool XML_QOS_Handler_Export operator!= (reliabilityKind const &a, reliabilityKind const &b);


  class XML_QOS_Handler_Export ownershipKind : public ::XSCRT::Type
  {
    public:
    ownershipKind (::XSCRT::XML::Element< ACE_TCHAR > const&);
    ownershipKind (::XSCRT::XML::Attribute< ACE_TCHAR > const&);

    static ownershipKind const SHARED_OWNERSHIP_QOS;
    static ownershipKind const EXCLUSIVE_OWNERSHIP_QOS;

    enum Value
    {
      SHARED_OWNERSHIP_QOS_l, EXCLUSIVE_OWNERSHIP_QOS_l
    };


    Value
    integral () const;

    friend bool XML_QOS_Handler_Export
    operator== (ownershipKind const& a, ownershipKind const& b);

    friend bool XML_QOS_Handler_Export
    operator!= (ownershipKind const& a, ownershipKind const& b);

    private:
    ownershipKind (Value v);

    Value v_;
  };

  bool XML_QOS_Handler_Export operator== (ownershipKind const &a, ownershipKind const &b);

  bool XML_QOS_Handler_Export operator!= (ownershipKind const &a, ownershipKind const &b);


  class XML_QOS_Handler_Export duration : public ::XSCRT::Type
  {
    typedef ::XSCRT::Type Base;

    public:
    typedef ACE_Refcounted_Auto_Ptr < ::dds::duration, ACE_Null_Mutex > _ptr;

    // sec
    //
    public:
    bool sec_p () const;
    ::XMLSchema::string< ACE_TCHAR > const& sec () const;
    void sec (::XMLSchema::string< ACE_TCHAR > const& );

    protected:
    ::std::auto_ptr< ::XMLSchema::string< ACE_TCHAR > > sec_;

    // nanosec
    //
    public:
    bool nanosec_p () const;
    ::XMLSchema::string< ACE_TCHAR > const& nanosec () const;
    void nanosec (::XMLSchema::string< ACE_TCHAR > const& );

    protected:
    ::std::auto_ptr< ::XMLSchema::string< ACE_TCHAR > > nanosec_;

    public:
    duration ();

    duration (::XSCRT::XML::Element< ACE_TCHAR > const&);
    duration (duration const& s);

    duration&
    operator= (duration const& s);

    private:
    char regulator__;
  };


  class XML_QOS_Handler_Export stringSeq : public ::XSCRT::Type
  {
    typedef ::XSCRT::Type Base;

    public:
    typedef ACE_Refcounted_Auto_Ptr < ::dds::stringSeq, ACE_Null_Mutex > _ptr;

    // element
    //
    public:
    typedef ::std::list< ACE_Refcounted_Auto_Ptr < ::XMLSchema::string< ACE_TCHAR >, ACE_Null_Mutex > >::iterator element_iterator;
    typedef ::std::list< ACE_Refcounted_Auto_Ptr < ::XMLSchema::string< ACE_TCHAR >, ACE_Null_Mutex > >::const_iterator element_const_iterator;
    element_iterator begin_element ();
    element_iterator end_element ();
    element_const_iterator begin_element () const;
    element_const_iterator end_element () const;
    void add_element ( ACE_Refcounted_Auto_Ptr < ::XMLSchema::string< ACE_TCHAR >, ACE_Null_Mutex > const& );
    XSCRT::Type* get_element_ptr ( std::basic_string<ACE_TCHAR> idref );
    void set_element_ptr (std::basic_string<ACE_TCHAR> idref );
    size_t count_element (void) const;

    protected:
    ::std::list< ACE_Refcounted_Auto_Ptr < ::XMLSchema::string< ACE_TCHAR >, ACE_Null_Mutex > > element_;

    public:
    stringSeq ();

    stringSeq (::XSCRT::XML::Element< ACE_TCHAR > const&);
    stringSeq (stringSeq const& s);

    stringSeq&
    operator= (stringSeq const& s);

    private:
    char regulator__;
  };


  class XML_QOS_Handler_Export deadlineQosPolicy : public ::XSCRT::Type
  {
    typedef ::XSCRT::Type Base;

    public:
    typedef ACE_Refcounted_Auto_Ptr < ::dds::deadlineQosPolicy, ACE_Null_Mutex > _ptr;

    // period
    //
    public:
    bool period_p () const;
    ::dds::duration const& period () const;
    void period (::dds::duration const& );

    protected:
    ::std::auto_ptr< ::dds::duration > period_;

    public:
    deadlineQosPolicy ();

    deadlineQosPolicy (::XSCRT::XML::Element< ACE_TCHAR > const&);
    deadlineQosPolicy (deadlineQosPolicy const& s);

    deadlineQosPolicy&
    operator= (deadlineQosPolicy const& s);

    private:
    char regulator__;
  };


  class XML_QOS_Handler_Export destinationOrderQosPolicy : public ::XSCRT::Type
  {
    typedef ::XSCRT::Type Base;

    public:
    typedef ACE_Refcounted_Auto_Ptr < ::dds::destinationOrderQosPolicy, ACE_Null_Mutex > _ptr;

    // kind
    //
    public:
    bool kind_p () const;
    ::dds::destinationOrderKind const& kind () const;
    void kind (::dds::destinationOrderKind const& );

    protected:
    ::std::auto_ptr< ::dds::destinationOrderKind > kind_;

    public:
    destinationOrderQosPolicy ();

    destinationOrderQosPolicy (::XSCRT::XML::Element< ACE_TCHAR > const&);
    destinationOrderQosPolicy (destinationOrderQosPolicy const& s);

    destinationOrderQosPolicy&
    operator= (destinationOrderQosPolicy const& s);

    private:
    char regulator__;
  };


  class XML_QOS_Handler_Export durabilityQosPolicy : public ::XSCRT::Type
  {
    typedef ::XSCRT::Type Base;

    public:
    typedef ACE_Refcounted_Auto_Ptr < ::dds::durabilityQosPolicy, ACE_Null_Mutex > _ptr;

    // kind
    //
    public:
    bool kind_p () const;
    ::dds::durabilityKind const& kind () const;
    void kind (::dds::durabilityKind const& );

    protected:
    ::std::auto_ptr< ::dds::durabilityKind > kind_;

    public:
    durabilityQosPolicy ();

    durabilityQosPolicy (::XSCRT::XML::Element< ACE_TCHAR > const&);
    durabilityQosPolicy (durabilityQosPolicy const& s);

    durabilityQosPolicy&
    operator= (durabilityQosPolicy const& s);

    private:
    char regulator__;
  };


  class XML_QOS_Handler_Export durabilityServiceQosPolicy : public ::XSCRT::Type
  {
    typedef ::XSCRT::Type Base;

    public:
    typedef ACE_Refcounted_Auto_Ptr < ::dds::durabilityServiceQosPolicy, ACE_Null_Mutex > _ptr;

    // service_cleanup_delay
    //
    public:
    bool service_cleanup_delay_p () const;
    ::dds::duration const& service_cleanup_delay () const;
    void service_cleanup_delay (::dds::duration const& );

    protected:
    ::std::auto_ptr< ::dds::duration > service_cleanup_delay_;

    // history_kind
    //
    public:
    bool history_kind_p () const;
    ::dds::historyKind const& history_kind () const;
    void history_kind (::dds::historyKind const& );

    protected:
    ::std::auto_ptr< ::dds::historyKind > history_kind_;

    // history_depth
    //
    public:
    bool history_depth_p () const;
    ::XMLSchema::positiveInteger const& history_depth () const;
    void history_depth (::XMLSchema::positiveInteger const& );

    protected:
    ::std::auto_ptr< ::XMLSchema::positiveInteger > history_depth_;

    // max_samples
    //
    public:
    bool max_samples_p () const;
    ::XMLSchema::string< ACE_TCHAR > const& max_samples () const;
    void max_samples (::XMLSchema::string< ACE_TCHAR > const& );

    protected:
    ::std::auto_ptr< ::XMLSchema::string< ACE_TCHAR > > max_samples_;

    // max_instances
    //
    public:
    bool max_instances_p () const;
    ::XMLSchema::string< ACE_TCHAR > const& max_instances () const;
    void max_instances (::XMLSchema::string< ACE_TCHAR > const& );

    protected:
    ::std::auto_ptr< ::XMLSchema::string< ACE_TCHAR > > max_instances_;

    // max_samples_per_instance
    //
    public:
    bool max_samples_per_instance_p () const;
    ::XMLSchema::string< ACE_TCHAR > const& max_samples_per_instance () const;
    void max_samples_per_instance (::XMLSchema::string< ACE_TCHAR > const& );

    protected:
    ::std::auto_ptr< ::XMLSchema::string< ACE_TCHAR > > max_samples_per_instance_;

    public:
    durabilityServiceQosPolicy ();

    durabilityServiceQosPolicy (::XSCRT::XML::Element< ACE_TCHAR > const&);
    durabilityServiceQosPolicy (durabilityServiceQosPolicy const& s);

    durabilityServiceQosPolicy&
    operator= (durabilityServiceQosPolicy const& s);

    private:
    char regulator__;
  };


  class XML_QOS_Handler_Export entityFactoryQosPolicy : public ::XSCRT::Type
  {
    typedef ::XSCRT::Type Base;

    public:
    typedef ACE_Refcounted_Auto_Ptr < ::dds::entityFactoryQosPolicy, ACE_Null_Mutex > _ptr;

    // autoenable_created_entities
    //
    public:
    bool autoenable_created_entities_p () const;
    ::XMLSchema::boolean const& autoenable_created_entities () const;
    void autoenable_created_entities (::XMLSchema::boolean const& );

    protected:
    ::std::auto_ptr< ::XMLSchema::boolean > autoenable_created_entities_;

    public:
    entityFactoryQosPolicy ();

    entityFactoryQosPolicy (::XSCRT::XML::Element< ACE_TCHAR > const&);
    entityFactoryQosPolicy (entityFactoryQosPolicy const& s);

    entityFactoryQosPolicy&
    operator= (entityFactoryQosPolicy const& s);

    private:
    char regulator__;
  };


  class XML_QOS_Handler_Export groupDataQosPolicy : public ::XSCRT::Type
  {
    typedef ::XSCRT::Type Base;

    public:
    typedef ACE_Refcounted_Auto_Ptr < ::dds::groupDataQosPolicy, ACE_Null_Mutex > _ptr;

    // value
    //
    public:
    bool value_p () const;
    ::XMLSchema::string< ACE_TCHAR > const& value () const;
    void value (::XMLSchema::string< ACE_TCHAR > const& );

    protected:
    ::std::auto_ptr< ::XMLSchema::string< ACE_TCHAR > > value_;

    public:
    groupDataQosPolicy ();

    groupDataQosPolicy (::XSCRT::XML::Element< ACE_TCHAR > const&);
    groupDataQosPolicy (groupDataQosPolicy const& s);

    groupDataQosPolicy&
    operator= (groupDataQosPolicy const& s);

    private:
    char regulator__;
  };


  class XML_QOS_Handler_Export historyQosPolicy : public ::XSCRT::Type
  {
    typedef ::XSCRT::Type Base;

    public:
    typedef ACE_Refcounted_Auto_Ptr < ::dds::historyQosPolicy, ACE_Null_Mutex > _ptr;

    // kind
    //
    public:
    bool kind_p () const;
    ::dds::historyKind const& kind () const;
    void kind (::dds::historyKind const& );

    protected:
    ::std::auto_ptr< ::dds::historyKind > kind_;

    // depth
    //
    public:
    bool depth_p () const;
    ::XMLSchema::positiveInteger const& depth () const;
    void depth (::XMLSchema::positiveInteger const& );

    protected:
    ::std::auto_ptr< ::XMLSchema::positiveInteger > depth_;

    public:
    historyQosPolicy ();

    historyQosPolicy (::XSCRT::XML::Element< ACE_TCHAR > const&);
    historyQosPolicy (historyQosPolicy const& s);

    historyQosPolicy&
    operator= (historyQosPolicy const& s);

    private:
    char regulator__;
  };


  class XML_QOS_Handler_Export latencyBudgetQosPolicy : public ::XSCRT::Type
  {
    typedef ::XSCRT::Type Base;

    public:
    typedef ACE_Refcounted_Auto_Ptr < ::dds::latencyBudgetQosPolicy, ACE_Null_Mutex > _ptr;

    // duration
    //
    public:
    bool duration_p () const;
    ::dds::duration const& duration () const;
    void duration (::dds::duration const& );

    protected:
    ::std::auto_ptr< ::dds::duration > duration_;

    public:
    latencyBudgetQosPolicy ();

    latencyBudgetQosPolicy (::XSCRT::XML::Element< ACE_TCHAR > const&);
    latencyBudgetQosPolicy (latencyBudgetQosPolicy const& s);

    latencyBudgetQosPolicy&
    operator= (latencyBudgetQosPolicy const& s);

    private:
    char regulator__;
  };


  class XML_QOS_Handler_Export lifespanQosPolicy : public ::XSCRT::Type
  {
    typedef ::XSCRT::Type Base;

    public:
    typedef ACE_Refcounted_Auto_Ptr < ::dds::lifespanQosPolicy, ACE_Null_Mutex > _ptr;

    // duration
    //
    public:
    bool duration_p () const;
    ::dds::duration const& duration () const;
    void duration (::dds::duration const& );

    protected:
    ::std::auto_ptr< ::dds::duration > duration_;

    public:
    lifespanQosPolicy ();

    lifespanQosPolicy (::XSCRT::XML::Element< ACE_TCHAR > const&);
    lifespanQosPolicy (lifespanQosPolicy const& s);

    lifespanQosPolicy&
    operator= (lifespanQosPolicy const& s);

    private:
    char regulator__;
  };


  class XML_QOS_Handler_Export livelinessQosPolicy : public ::XSCRT::Type
  {
    typedef ::XSCRT::Type Base;

    public:
    typedef ACE_Refcounted_Auto_Ptr < ::dds::livelinessQosPolicy, ACE_Null_Mutex > _ptr;

    // kind
    //
    public:
    bool kind_p () const;
    ::dds::livelinessKind const& kind () const;
    void kind (::dds::livelinessKind const& );

    protected:
    ::std::auto_ptr< ::dds::livelinessKind > kind_;

    // lease_duration
    //
    public:
    bool lease_duration_p () const;
    ::dds::duration const& lease_duration () const;
    void lease_duration (::dds::duration const& );

    protected:
    ::std::auto_ptr< ::dds::duration > lease_duration_;

    public:
    livelinessQosPolicy ();

    livelinessQosPolicy (::XSCRT::XML::Element< ACE_TCHAR > const&);
    livelinessQosPolicy (livelinessQosPolicy const& s);

    livelinessQosPolicy&
    operator= (livelinessQosPolicy const& s);

    private:
    char regulator__;
  };


  class XML_QOS_Handler_Export ownershipQosPolicy : public ::XSCRT::Type
  {
    typedef ::XSCRT::Type Base;

    public:
    typedef ACE_Refcounted_Auto_Ptr < ::dds::ownershipQosPolicy, ACE_Null_Mutex > _ptr;

    // kind
    //
    public:
    bool kind_p () const;
    ::dds::ownershipKind const& kind () const;
    void kind (::dds::ownershipKind const& );

    protected:
    ::std::auto_ptr< ::dds::ownershipKind > kind_;

    public:
    ownershipQosPolicy ();

    ownershipQosPolicy (::XSCRT::XML::Element< ACE_TCHAR > const&);
    ownershipQosPolicy (ownershipQosPolicy const& s);

    ownershipQosPolicy&
    operator= (ownershipQosPolicy const& s);

    private:
    char regulator__;
  };


  class XML_QOS_Handler_Export ownershipStrengthQosPolicy : public ::XSCRT::Type
  {
    typedef ::XSCRT::Type Base;

    public:
    typedef ACE_Refcounted_Auto_Ptr < ::dds::ownershipStrengthQosPolicy, ACE_Null_Mutex > _ptr;

    // value
    //
    public:
    bool value_p () const;
    ::XMLSchema::nonNegativeInteger const& value () const;
    void value (::XMLSchema::nonNegativeInteger const& );

    protected:
    ::std::auto_ptr< ::XMLSchema::nonNegativeInteger > value_;

    public:
    ownershipStrengthQosPolicy ();

    ownershipStrengthQosPolicy (::XSCRT::XML::Element< ACE_TCHAR > const&);
    ownershipStrengthQosPolicy (ownershipStrengthQosPolicy const& s);

    ownershipStrengthQosPolicy&
    operator= (ownershipStrengthQosPolicy const& s);

    private:
    char regulator__;
  };


  class XML_QOS_Handler_Export partitionQosPolicy : public ::XSCRT::Type
  {
    typedef ::XSCRT::Type Base;

    public:
    typedef ACE_Refcounted_Auto_Ptr < ::dds::partitionQosPolicy, ACE_Null_Mutex > _ptr;

    // name
    //
    public:
    bool name_p () const;
    ::dds::stringSeq const& name () const;
    void name (::dds::stringSeq const& );

    protected:
    ::std::auto_ptr< ::dds::stringSeq > name_;

    public:
    partitionQosPolicy ();

    partitionQosPolicy (::XSCRT::XML::Element< ACE_TCHAR > const&);
    partitionQosPolicy (partitionQosPolicy const& s);

    partitionQosPolicy&
    operator= (partitionQosPolicy const& s);

    private:
    char regulator__;
  };


  class XML_QOS_Handler_Export presentationQosPolicy : public ::XSCRT::Type
  {
    typedef ::XSCRT::Type Base;

    public:
    typedef ACE_Refcounted_Auto_Ptr < ::dds::presentationQosPolicy, ACE_Null_Mutex > _ptr;

    // access_scope
    //
    public:
    bool access_scope_p () const;
    ::dds::presentationAccessScopeKind const& access_scope () const;
    void access_scope (::dds::presentationAccessScopeKind const& );

    protected:
    ::std::auto_ptr< ::dds::presentationAccessScopeKind > access_scope_;

    // coherent_access
    //
    public:
    bool coherent_access_p () const;
    ::XMLSchema::boolean const& coherent_access () const;
    void coherent_access (::XMLSchema::boolean const& );

    protected:
    ::std::auto_ptr< ::XMLSchema::boolean > coherent_access_;

    // ordered_access
    //
    public:
    bool ordered_access_p () const;
    ::XMLSchema::boolean const& ordered_access () const;
    void ordered_access (::XMLSchema::boolean const& );

    protected:
    ::std::auto_ptr< ::XMLSchema::boolean > ordered_access_;

    public:
    presentationQosPolicy ();

    presentationQosPolicy (::XSCRT::XML::Element< ACE_TCHAR > const&);
    presentationQosPolicy (presentationQosPolicy const& s);

    presentationQosPolicy&
    operator= (presentationQosPolicy const& s);

    private:
    char regulator__;
  };


  class XML_QOS_Handler_Export readerDataLifecycleQosPolicy : public ::XSCRT::Type
  {
    typedef ::XSCRT::Type Base;

    public:
    typedef ACE_Refcounted_Auto_Ptr < ::dds::readerDataLifecycleQosPolicy, ACE_Null_Mutex > _ptr;

    // autopurge_nowriter_samples_delay
    //
    public:
    bool autopurge_nowriter_samples_delay_p () const;
    ::dds::duration const& autopurge_nowriter_samples_delay () const;
    void autopurge_nowriter_samples_delay (::dds::duration const& );

    protected:
    ::std::auto_ptr< ::dds::duration > autopurge_nowriter_samples_delay_;

    // autopurge_disposed_samples_delay
    //
    public:
    bool autopurge_disposed_samples_delay_p () const;
    ::dds::duration const& autopurge_disposed_samples_delay () const;
    void autopurge_disposed_samples_delay (::dds::duration const& );

    protected:
    ::std::auto_ptr< ::dds::duration > autopurge_disposed_samples_delay_;

    public:
    readerDataLifecycleQosPolicy ();

    readerDataLifecycleQosPolicy (::XSCRT::XML::Element< ACE_TCHAR > const&);
    readerDataLifecycleQosPolicy (readerDataLifecycleQosPolicy const& s);

    readerDataLifecycleQosPolicy&
    operator= (readerDataLifecycleQosPolicy const& s);

    private:
    char regulator__;
  };


  class XML_QOS_Handler_Export reliabilityQosPolicy : public ::XSCRT::Type
  {
    typedef ::XSCRT::Type Base;

    public:
    typedef ACE_Refcounted_Auto_Ptr < ::dds::reliabilityQosPolicy, ACE_Null_Mutex > _ptr;

    // kind
    //
    public:
    bool kind_p () const;
    ::dds::reliabilityKind const& kind () const;
    void kind (::dds::reliabilityKind const& );

    protected:
    ::std::auto_ptr< ::dds::reliabilityKind > kind_;

    // max_blocking_time
    //
    public:
    bool max_blocking_time_p () const;
    ::dds::duration const& max_blocking_time () const;
    void max_blocking_time (::dds::duration const& );

    protected:
    ::std::auto_ptr< ::dds::duration > max_blocking_time_;

    public:
    reliabilityQosPolicy ();

    reliabilityQosPolicy (::XSCRT::XML::Element< ACE_TCHAR > const&);
    reliabilityQosPolicy (reliabilityQosPolicy const& s);

    reliabilityQosPolicy&
    operator= (reliabilityQosPolicy const& s);

    private:
    char regulator__;
  };


  class XML_QOS_Handler_Export resourceLimitsQosPolicy : public ::XSCRT::Type
  {
    typedef ::XSCRT::Type Base;

    public:
    typedef ACE_Refcounted_Auto_Ptr < ::dds::resourceLimitsQosPolicy, ACE_Null_Mutex > _ptr;

    // max_samples
    //
    public:
    bool max_samples_p () const;
    ::XMLSchema::string< ACE_TCHAR > const& max_samples () const;
    void max_samples (::XMLSchema::string< ACE_TCHAR > const& );

    protected:
    ::std::auto_ptr< ::XMLSchema::string< ACE_TCHAR > > max_samples_;

    // max_instances
    //
    public:
    bool max_instances_p () const;
    ::XMLSchema::string< ACE_TCHAR > const& max_instances () const;
    void max_instances (::XMLSchema::string< ACE_TCHAR > const& );

    protected:
    ::std::auto_ptr< ::XMLSchema::string< ACE_TCHAR > > max_instances_;

    // max_samples_per_instance
    //
    public:
    bool max_samples_per_instance_p () const;
    ::XMLSchema::string< ACE_TCHAR > const& max_samples_per_instance () const;
    void max_samples_per_instance (::XMLSchema::string< ACE_TCHAR > const& );

    protected:
    ::std::auto_ptr< ::XMLSchema::string< ACE_TCHAR > > max_samples_per_instance_;

    // initial_samples
    //
    public:
    bool initial_samples_p () const;
    ::XMLSchema::positiveInteger const& initial_samples () const;
    void initial_samples (::XMLSchema::positiveInteger const& );

    protected:
    ::std::auto_ptr< ::XMLSchema::positiveInteger > initial_samples_;

    // initial_instances
    //
    public:
    bool initial_instances_p () const;
    ::XMLSchema::positiveInteger const& initial_instances () const;
    void initial_instances (::XMLSchema::positiveInteger const& );

    protected:
    ::std::auto_ptr< ::XMLSchema::positiveInteger > initial_instances_;

    public:
    resourceLimitsQosPolicy ();

    resourceLimitsQosPolicy (::XSCRT::XML::Element< ACE_TCHAR > const&);
    resourceLimitsQosPolicy (resourceLimitsQosPolicy const& s);

    resourceLimitsQosPolicy&
    operator= (resourceLimitsQosPolicy const& s);

    private:
    char regulator__;
  };


  class XML_QOS_Handler_Export timeBasedFilterQosPolicy : public ::XSCRT::Type
  {
    typedef ::XSCRT::Type Base;

    public:
    typedef ACE_Refcounted_Auto_Ptr < ::dds::timeBasedFilterQosPolicy, ACE_Null_Mutex > _ptr;

    // minimum_separation
    //
    public:
    bool minimum_separation_p () const;
    ::dds::duration const& minimum_separation () const;
    void minimum_separation (::dds::duration const& );

    protected:
    ::std::auto_ptr< ::dds::duration > minimum_separation_;

    public:
    timeBasedFilterQosPolicy ();

    timeBasedFilterQosPolicy (::XSCRT::XML::Element< ACE_TCHAR > const&);
    timeBasedFilterQosPolicy (timeBasedFilterQosPolicy const& s);

    timeBasedFilterQosPolicy&
    operator= (timeBasedFilterQosPolicy const& s);

    private:
    char regulator__;
  };


  class XML_QOS_Handler_Export topicDataQosPolicy : public ::XSCRT::Type
  {
    typedef ::XSCRT::Type Base;

    public:
    typedef ACE_Refcounted_Auto_Ptr < ::dds::topicDataQosPolicy, ACE_Null_Mutex > _ptr;

    // value
    //
    public:
    bool value_p () const;
    ::XMLSchema::string< ACE_TCHAR > const& value () const;
    void value (::XMLSchema::string< ACE_TCHAR > const& );

    protected:
    ::std::auto_ptr< ::XMLSchema::string< ACE_TCHAR > > value_;

    public:
    topicDataQosPolicy ();

    topicDataQosPolicy (::XSCRT::XML::Element< ACE_TCHAR > const&);
    topicDataQosPolicy (topicDataQosPolicy const& s);

    topicDataQosPolicy&
    operator= (topicDataQosPolicy const& s);

    private:
    char regulator__;
  };


  class XML_QOS_Handler_Export transportPriorityQosPolicy : public ::XSCRT::Type
  {
    typedef ::XSCRT::Type Base;

    public:
    typedef ACE_Refcounted_Auto_Ptr < ::dds::transportPriorityQosPolicy, ACE_Null_Mutex > _ptr;

    // value
    //
    public:
    bool value_p () const;
    ::XMLSchema::nonNegativeInteger const& value () const;
    void value (::XMLSchema::nonNegativeInteger const& );

    protected:
    ::std::auto_ptr< ::XMLSchema::nonNegativeInteger > value_;

    public:
    transportPriorityQosPolicy ();

    transportPriorityQosPolicy (::XSCRT::XML::Element< ACE_TCHAR > const&);
    transportPriorityQosPolicy (transportPriorityQosPolicy const& s);

    transportPriorityQosPolicy&
    operator= (transportPriorityQosPolicy const& s);

    private:
    char regulator__;
  };


  class XML_QOS_Handler_Export userDataQosPolicy : public ::XSCRT::Type
  {
    typedef ::XSCRT::Type Base;

    public:
    typedef ACE_Refcounted_Auto_Ptr < ::dds::userDataQosPolicy, ACE_Null_Mutex > _ptr;

    // value
    //
    public:
    bool value_p () const;
    ::XMLSchema::string< ACE_TCHAR > const& value () const;
    void value (::XMLSchema::string< ACE_TCHAR > const& );

    protected:
    ::std::auto_ptr< ::XMLSchema::string< ACE_TCHAR > > value_;

    public:
    userDataQosPolicy ();

    userDataQosPolicy (::XSCRT::XML::Element< ACE_TCHAR > const&);
    userDataQosPolicy (userDataQosPolicy const& s);

    userDataQosPolicy&
    operator= (userDataQosPolicy const& s);

    private:
    char regulator__;
  };


  class XML_QOS_Handler_Export writerDataLifecycleQosPolicy : public ::XSCRT::Type
  {
    typedef ::XSCRT::Type Base;

    public:
    typedef ACE_Refcounted_Auto_Ptr < ::dds::writerDataLifecycleQosPolicy, ACE_Null_Mutex > _ptr;

    // autodispose_unregistered_instances
    //
    public:
    bool autodispose_unregistered_instances_p () const;
    ::XMLSchema::boolean const& autodispose_unregistered_instances () const;
    void autodispose_unregistered_instances (::XMLSchema::boolean const& );

    protected:
    ::std::auto_ptr< ::XMLSchema::boolean > autodispose_unregistered_instances_;

    public:
    writerDataLifecycleQosPolicy ();

    writerDataLifecycleQosPolicy (::XSCRT::XML::Element< ACE_TCHAR > const&);
    writerDataLifecycleQosPolicy (writerDataLifecycleQosPolicy const& s);

    writerDataLifecycleQosPolicy&
    operator= (writerDataLifecycleQosPolicy const& s);

    private:
    char regulator__;
  };


  class XML_QOS_Handler_Export domainparticipantQos : public ::XSCRT::Type
  {
    typedef ::XSCRT::Type Base;

    public:
    typedef ACE_Refcounted_Auto_Ptr < ::dds::domainparticipantQos, ACE_Null_Mutex > _ptr;

    // user_data
    //
    public:
    bool user_data_p () const;
    ::dds::userDataQosPolicy const& user_data () const;
    void user_data (::dds::userDataQosPolicy const& );

    protected:
    ::std::auto_ptr< ::dds::userDataQosPolicy > user_data_;

    // entity_factory
    //
    public:
    bool entity_factory_p () const;
    ::dds::entityFactoryQosPolicy const& entity_factory () const;
    void entity_factory (::dds::entityFactoryQosPolicy const& );

    protected:
    ::std::auto_ptr< ::dds::entityFactoryQosPolicy > entity_factory_;

    // name
    //
    public:
    bool name_p () const;
    ::XMLSchema::string< ACE_TCHAR > const& name () const;
    ::XMLSchema::string< ACE_TCHAR >& name ();
    void name (::XMLSchema::string< ACE_TCHAR > const& );

    protected:
    ::std::auto_ptr< ::XMLSchema::string< ACE_TCHAR > > name_;

    // base_name
    //
    public:
    bool base_name_p () const;
    ::XMLSchema::string< ACE_TCHAR > const& base_name () const;
    ::XMLSchema::string< ACE_TCHAR >& base_name ();
    void base_name (::XMLSchema::string< ACE_TCHAR > const& );

    protected:
    ::std::auto_ptr< ::XMLSchema::string< ACE_TCHAR > > base_name_;

    // topic_filter
    //
    public:
    bool topic_filter_p () const;
    ::XMLSchema::string< ACE_TCHAR > const& topic_filter () const;
    ::XMLSchema::string< ACE_TCHAR >& topic_filter ();
    void topic_filter (::XMLSchema::string< ACE_TCHAR > const& );

    protected:
    ::std::auto_ptr< ::XMLSchema::string< ACE_TCHAR > > topic_filter_;

    public:
    domainparticipantQos ();

    domainparticipantQos (::XSCRT::XML::Element< ACE_TCHAR > const&);
    domainparticipantQos (domainparticipantQos const& s);

    domainparticipantQos&
    operator= (domainparticipantQos const& s);

    private:
    char regulator__;
  };


  class XML_QOS_Handler_Export publisherQos : public ::XSCRT::Type
  {
    typedef ::XSCRT::Type Base;

    public:
    typedef ACE_Refcounted_Auto_Ptr < ::dds::publisherQos, ACE_Null_Mutex > _ptr;

    // presentation
    //
    public:
    bool presentation_p () const;
    ::dds::presentationQosPolicy const& presentation () const;
    void presentation (::dds::presentationQosPolicy const& );

    protected:
    ::std::auto_ptr< ::dds::presentationQosPolicy > presentation_;

    // partition
    //
    public:
    bool partition_p () const;
    ::dds::partitionQosPolicy const& partition () const;
    void partition (::dds::partitionQosPolicy const& );

    protected:
    ::std::auto_ptr< ::dds::partitionQosPolicy > partition_;

    // group_data
    //
    public:
    bool group_data_p () const;
    ::dds::groupDataQosPolicy const& group_data () const;
    void group_data (::dds::groupDataQosPolicy const& );

    protected:
    ::std::auto_ptr< ::dds::groupDataQosPolicy > group_data_;

    // entity_factory
    //
    public:
    bool entity_factory_p () const;
    ::dds::entityFactoryQosPolicy const& entity_factory () const;
    void entity_factory (::dds::entityFactoryQosPolicy const& );

    protected:
    ::std::auto_ptr< ::dds::entityFactoryQosPolicy > entity_factory_;

    // name
    //
    public:
    bool name_p () const;
    ::XMLSchema::string< ACE_TCHAR > const& name () const;
    ::XMLSchema::string< ACE_TCHAR >& name ();
    void name (::XMLSchema::string< ACE_TCHAR > const& );

    protected:
    ::std::auto_ptr< ::XMLSchema::string< ACE_TCHAR > > name_;

    // base_name
    //
    public:
    bool base_name_p () const;
    ::XMLSchema::string< ACE_TCHAR > const& base_name () const;
    ::XMLSchema::string< ACE_TCHAR >& base_name ();
    void base_name (::XMLSchema::string< ACE_TCHAR > const& );

    protected:
    ::std::auto_ptr< ::XMLSchema::string< ACE_TCHAR > > base_name_;

    // topic_filter
    //
    public:
    bool topic_filter_p () const;
    ::XMLSchema::string< ACE_TCHAR > const& topic_filter () const;
    ::XMLSchema::string< ACE_TCHAR >& topic_filter ();
    void topic_filter (::XMLSchema::string< ACE_TCHAR > const& );

    protected:
    ::std::auto_ptr< ::XMLSchema::string< ACE_TCHAR > > topic_filter_;

    public:
    publisherQos ();

    publisherQos (::XSCRT::XML::Element< ACE_TCHAR > const&);
    publisherQos (publisherQos const& s);

    publisherQos&
    operator= (publisherQos const& s);

    private:
    char regulator__;
  };


  class XML_QOS_Handler_Export subscriberQos : public ::XSCRT::Type
  {
    typedef ::XSCRT::Type Base;

    public:
    typedef ACE_Refcounted_Auto_Ptr < ::dds::subscriberQos, ACE_Null_Mutex > _ptr;

    // presentation
    //
    public:
    bool presentation_p () const;
    ::dds::presentationQosPolicy const& presentation () const;
    void presentation (::dds::presentationQosPolicy const& );

    protected:
    ::std::auto_ptr< ::dds::presentationQosPolicy > presentation_;

    // partition
    //
    public:
    bool partition_p () const;
    ::dds::partitionQosPolicy const& partition () const;
    void partition (::dds::partitionQosPolicy const& );

    protected:
    ::std::auto_ptr< ::dds::partitionQosPolicy > partition_;

    // group_data
    //
    public:
    bool group_data_p () const;
    ::dds::groupDataQosPolicy const& group_data () const;
    void group_data (::dds::groupDataQosPolicy const& );

    protected:
    ::std::auto_ptr< ::dds::groupDataQosPolicy > group_data_;

    // entity_factory
    //
    public:
    bool entity_factory_p () const;
    ::dds::entityFactoryQosPolicy const& entity_factory () const;
    void entity_factory (::dds::entityFactoryQosPolicy const& );

    protected:
    ::std::auto_ptr< ::dds::entityFactoryQosPolicy > entity_factory_;

    // name
    //
    public:
    bool name_p () const;
    ::XMLSchema::string< ACE_TCHAR > const& name () const;
    ::XMLSchema::string< ACE_TCHAR >& name ();
    void name (::XMLSchema::string< ACE_TCHAR > const& );

    protected:
    ::std::auto_ptr< ::XMLSchema::string< ACE_TCHAR > > name_;

    // base_name
    //
    public:
    bool base_name_p () const;
    ::XMLSchema::string< ACE_TCHAR > const& base_name () const;
    ::XMLSchema::string< ACE_TCHAR >& base_name ();
    void base_name (::XMLSchema::string< ACE_TCHAR > const& );

    protected:
    ::std::auto_ptr< ::XMLSchema::string< ACE_TCHAR > > base_name_;

    // topic_filter
    //
    public:
    bool topic_filter_p () const;
    ::XMLSchema::string< ACE_TCHAR > const& topic_filter () const;
    ::XMLSchema::string< ACE_TCHAR >& topic_filter ();
    void topic_filter (::XMLSchema::string< ACE_TCHAR > const& );

    protected:
    ::std::auto_ptr< ::XMLSchema::string< ACE_TCHAR > > topic_filter_;

    public:
    subscriberQos ();

    subscriberQos (::XSCRT::XML::Element< ACE_TCHAR > const&);
    subscriberQos (subscriberQos const& s);

    subscriberQos&
    operator= (subscriberQos const& s);

    private:
    char regulator__;
  };


  class XML_QOS_Handler_Export topicQos : public ::XSCRT::Type
  {
    typedef ::XSCRT::Type Base;

    public:
    typedef ACE_Refcounted_Auto_Ptr < ::dds::topicQos, ACE_Null_Mutex > _ptr;

    // topic_data
    //
    public:
    bool topic_data_p () const;
    ::dds::topicDataQosPolicy const& topic_data () const;
    void topic_data (::dds::topicDataQosPolicy const& );

    protected:
    ::std::auto_ptr< ::dds::topicDataQosPolicy > topic_data_;

    // durability
    //
    public:
    bool durability_p () const;
    ::dds::durabilityQosPolicy const& durability () const;
    void durability (::dds::durabilityQosPolicy const& );

    protected:
    ::std::auto_ptr< ::dds::durabilityQosPolicy > durability_;

    // durability_service
    //
    public:
    bool durability_service_p () const;
    ::dds::durabilityServiceQosPolicy const& durability_service () const;
    void durability_service (::dds::durabilityServiceQosPolicy const& );

    protected:
    ::std::auto_ptr< ::dds::durabilityServiceQosPolicy > durability_service_;

    // deadline
    //
    public:
    bool deadline_p () const;
    ::dds::deadlineQosPolicy const& deadline () const;
    void deadline (::dds::deadlineQosPolicy const& );

    protected:
    ::std::auto_ptr< ::dds::deadlineQosPolicy > deadline_;

    // latency_budget
    //
    public:
    bool latency_budget_p () const;
    ::dds::latencyBudgetQosPolicy const& latency_budget () const;
    void latency_budget (::dds::latencyBudgetQosPolicy const& );

    protected:
    ::std::auto_ptr< ::dds::latencyBudgetQosPolicy > latency_budget_;

    // liveliness
    //
    public:
    bool liveliness_p () const;
    ::dds::livelinessQosPolicy const& liveliness () const;
    void liveliness (::dds::livelinessQosPolicy const& );

    protected:
    ::std::auto_ptr< ::dds::livelinessQosPolicy > liveliness_;

    // reliability
    //
    public:
    bool reliability_p () const;
    ::dds::reliabilityQosPolicy const& reliability () const;
    void reliability (::dds::reliabilityQosPolicy const& );

    protected:
    ::std::auto_ptr< ::dds::reliabilityQosPolicy > reliability_;

    // destination_order
    //
    public:
    bool destination_order_p () const;
    ::dds::destinationOrderQosPolicy const& destination_order () const;
    void destination_order (::dds::destinationOrderQosPolicy const& );

    protected:
    ::std::auto_ptr< ::dds::destinationOrderQosPolicy > destination_order_;

    // history
    //
    public:
    bool history_p () const;
    ::dds::historyQosPolicy const& history () const;
    void history (::dds::historyQosPolicy const& );

    protected:
    ::std::auto_ptr< ::dds::historyQosPolicy > history_;

    // resource_limits
    //
    public:
    bool resource_limits_p () const;
    ::dds::resourceLimitsQosPolicy const& resource_limits () const;
    void resource_limits (::dds::resourceLimitsQosPolicy const& );

    protected:
    ::std::auto_ptr< ::dds::resourceLimitsQosPolicy > resource_limits_;

    // transport_priority
    //
    public:
    bool transport_priority_p () const;
    ::dds::transportPriorityQosPolicy const& transport_priority () const;
    void transport_priority (::dds::transportPriorityQosPolicy const& );

    protected:
    ::std::auto_ptr< ::dds::transportPriorityQosPolicy > transport_priority_;

    // lifespan
    //
    public:
    bool lifespan_p () const;
    ::dds::lifespanQosPolicy const& lifespan () const;
    void lifespan (::dds::lifespanQosPolicy const& );

    protected:
    ::std::auto_ptr< ::dds::lifespanQosPolicy > lifespan_;

    // ownership
    //
    public:
    bool ownership_p () const;
    ::dds::ownershipQosPolicy const& ownership () const;
    void ownership (::dds::ownershipQosPolicy const& );

    protected:
    ::std::auto_ptr< ::dds::ownershipQosPolicy > ownership_;

    // name
    //
    public:
    bool name_p () const;
    ::XMLSchema::string< ACE_TCHAR > const& name () const;
    ::XMLSchema::string< ACE_TCHAR >& name ();
    void name (::XMLSchema::string< ACE_TCHAR > const& );

    protected:
    ::std::auto_ptr< ::XMLSchema::string< ACE_TCHAR > > name_;

    // base_name
    //
    public:
    bool base_name_p () const;
    ::XMLSchema::string< ACE_TCHAR > const& base_name () const;
    ::XMLSchema::string< ACE_TCHAR >& base_name ();
    void base_name (::XMLSchema::string< ACE_TCHAR > const& );

    protected:
    ::std::auto_ptr< ::XMLSchema::string< ACE_TCHAR > > base_name_;

    // topic_filter
    //
    public:
    bool topic_filter_p () const;
    ::XMLSchema::string< ACE_TCHAR > const& topic_filter () const;
    ::XMLSchema::string< ACE_TCHAR >& topic_filter ();
    void topic_filter (::XMLSchema::string< ACE_TCHAR > const& );

    protected:
    ::std::auto_ptr< ::XMLSchema::string< ACE_TCHAR > > topic_filter_;

    public:
    topicQos ();

    topicQos (::XSCRT::XML::Element< ACE_TCHAR > const&);
    topicQos (topicQos const& s);

    topicQos&
    operator= (topicQos const& s);

    private:
    char regulator__;
  };


  class XML_QOS_Handler_Export datareaderQos : public ::XSCRT::Type
  {
    typedef ::XSCRT::Type Base;

    public:
    typedef ACE_Refcounted_Auto_Ptr < ::dds::datareaderQos, ACE_Null_Mutex > _ptr;

    // durability
    //
    public:
    bool durability_p () const;
    ::dds::durabilityQosPolicy const& durability () const;
    void durability (::dds::durabilityQosPolicy const& );

    protected:
    ::std::auto_ptr< ::dds::durabilityQosPolicy > durability_;

    // deadline
    //
    public:
    bool deadline_p () const;
    ::dds::deadlineQosPolicy const& deadline () const;
    void deadline (::dds::deadlineQosPolicy const& );

    protected:
    ::std::auto_ptr< ::dds::deadlineQosPolicy > deadline_;

    // latency_budget
    //
    public:
    bool latency_budget_p () const;
    ::dds::latencyBudgetQosPolicy const& latency_budget () const;
    void latency_budget (::dds::latencyBudgetQosPolicy const& );

    protected:
    ::std::auto_ptr< ::dds::latencyBudgetQosPolicy > latency_budget_;

    // liveliness
    //
    public:
    bool liveliness_p () const;
    ::dds::livelinessQosPolicy const& liveliness () const;
    void liveliness (::dds::livelinessQosPolicy const& );

    protected:
    ::std::auto_ptr< ::dds::livelinessQosPolicy > liveliness_;

    // reliability
    //
    public:
    bool reliability_p () const;
    ::dds::reliabilityQosPolicy const& reliability () const;
    void reliability (::dds::reliabilityQosPolicy const& );

    protected:
    ::std::auto_ptr< ::dds::reliabilityQosPolicy > reliability_;

    // destination_order
    //
    public:
    bool destination_order_p () const;
    ::dds::destinationOrderQosPolicy const& destination_order () const;
    void destination_order (::dds::destinationOrderQosPolicy const& );

    protected:
    ::std::auto_ptr< ::dds::destinationOrderQosPolicy > destination_order_;

    // history
    //
    public:
    bool history_p () const;
    ::dds::historyQosPolicy const& history () const;
    void history (::dds::historyQosPolicy const& );

    protected:
    ::std::auto_ptr< ::dds::historyQosPolicy > history_;

    // resource_limits
    //
    public:
    bool resource_limits_p () const;
    ::dds::resourceLimitsQosPolicy const& resource_limits () const;
    void resource_limits (::dds::resourceLimitsQosPolicy const& );

    protected:
    ::std::auto_ptr< ::dds::resourceLimitsQosPolicy > resource_limits_;

    // user_data
    //
    public:
    bool user_data_p () const;
    ::dds::userDataQosPolicy const& user_data () const;
    void user_data (::dds::userDataQosPolicy const& );

    protected:
    ::std::auto_ptr< ::dds::userDataQosPolicy > user_data_;

    // ownership
    //
    public:
    bool ownership_p () const;
    ::dds::ownershipQosPolicy const& ownership () const;
    void ownership (::dds::ownershipQosPolicy const& );

    protected:
    ::std::auto_ptr< ::dds::ownershipQosPolicy > ownership_;

    // time_based_filter
    //
    public:
    bool time_based_filter_p () const;
    ::dds::timeBasedFilterQosPolicy const& time_based_filter () const;
    void time_based_filter (::dds::timeBasedFilterQosPolicy const& );

    protected:
    ::std::auto_ptr< ::dds::timeBasedFilterQosPolicy > time_based_filter_;

    // reader_data_lifecycle
    //
    public:
    bool reader_data_lifecycle_p () const;
    ::dds::readerDataLifecycleQosPolicy const& reader_data_lifecycle () const;
    void reader_data_lifecycle (::dds::readerDataLifecycleQosPolicy const& );

    protected:
    ::std::auto_ptr< ::dds::readerDataLifecycleQosPolicy > reader_data_lifecycle_;

    // name
    //
    public:
    bool name_p () const;
    ::XMLSchema::string< ACE_TCHAR > const& name () const;
    ::XMLSchema::string< ACE_TCHAR >& name ();
    void name (::XMLSchema::string< ACE_TCHAR > const& );

    protected:
    ::std::auto_ptr< ::XMLSchema::string< ACE_TCHAR > > name_;

    // base_name
    //
    public:
    bool base_name_p () const;
    ::XMLSchema::string< ACE_TCHAR > const& base_name () const;
    ::XMLSchema::string< ACE_TCHAR >& base_name ();
    void base_name (::XMLSchema::string< ACE_TCHAR > const& );

    protected:
    ::std::auto_ptr< ::XMLSchema::string< ACE_TCHAR > > base_name_;

    // topic_filter
    //
    public:
    bool topic_filter_p () const;
    ::XMLSchema::string< ACE_TCHAR > const& topic_filter () const;
    ::XMLSchema::string< ACE_TCHAR >& topic_filter ();
    void topic_filter (::XMLSchema::string< ACE_TCHAR > const& );

    protected:
    ::std::auto_ptr< ::XMLSchema::string< ACE_TCHAR > > topic_filter_;

    public:
    datareaderQos ();

    datareaderQos (::XSCRT::XML::Element< ACE_TCHAR > const&);
    datareaderQos (datareaderQos const& s);

    datareaderQos&
    operator= (datareaderQos const& s);

    private:
    char regulator__;
  };


  class XML_QOS_Handler_Export datawriterQos : public ::XSCRT::Type
  {
    typedef ::XSCRT::Type Base;

    public:
    typedef ACE_Refcounted_Auto_Ptr < ::dds::datawriterQos, ACE_Null_Mutex > _ptr;

    // durability
    //
    public:
    bool durability_p () const;
    ::dds::durabilityQosPolicy const& durability () const;
    void durability (::dds::durabilityQosPolicy const& );

    protected:
    ::std::auto_ptr< ::dds::durabilityQosPolicy > durability_;

    // durability_service
    //
    public:
    bool durability_service_p () const;
    ::dds::durabilityServiceQosPolicy const& durability_service () const;
    void durability_service (::dds::durabilityServiceQosPolicy const& );

    protected:
    ::std::auto_ptr< ::dds::durabilityServiceQosPolicy > durability_service_;

    // deadline
    //
    public:
    bool deadline_p () const;
    ::dds::deadlineQosPolicy const& deadline () const;
    void deadline (::dds::deadlineQosPolicy const& );

    protected:
    ::std::auto_ptr< ::dds::deadlineQosPolicy > deadline_;

    // latency_budget
    //
    public:
    bool latency_budget_p () const;
    ::dds::latencyBudgetQosPolicy const& latency_budget () const;
    void latency_budget (::dds::latencyBudgetQosPolicy const& );

    protected:
    ::std::auto_ptr< ::dds::latencyBudgetQosPolicy > latency_budget_;

    // liveliness
    //
    public:
    bool liveliness_p () const;
    ::dds::livelinessQosPolicy const& liveliness () const;
    void liveliness (::dds::livelinessQosPolicy const& );

    protected:
    ::std::auto_ptr< ::dds::livelinessQosPolicy > liveliness_;

    // reliability
    //
    public:
    bool reliability_p () const;
    ::dds::reliabilityQosPolicy const& reliability () const;
    void reliability (::dds::reliabilityQosPolicy const& );

    protected:
    ::std::auto_ptr< ::dds::reliabilityQosPolicy > reliability_;

    // destination_order
    //
    public:
    bool destination_order_p () const;
    ::dds::destinationOrderQosPolicy const& destination_order () const;
    void destination_order (::dds::destinationOrderQosPolicy const& );

    protected:
    ::std::auto_ptr< ::dds::destinationOrderQosPolicy > destination_order_;

    // history
    //
    public:
    bool history_p () const;
    ::dds::historyQosPolicy const& history () const;
    void history (::dds::historyQosPolicy const& );

    protected:
    ::std::auto_ptr< ::dds::historyQosPolicy > history_;

    // resource_limits
    //
    public:
    bool resource_limits_p () const;
    ::dds::resourceLimitsQosPolicy const& resource_limits () const;
    void resource_limits (::dds::resourceLimitsQosPolicy const& );

    protected:
    ::std::auto_ptr< ::dds::resourceLimitsQosPolicy > resource_limits_;

    // transport_priority
    //
    public:
    bool transport_priority_p () const;
    ::dds::transportPriorityQosPolicy const& transport_priority () const;
    void transport_priority (::dds::transportPriorityQosPolicy const& );

    protected:
    ::std::auto_ptr< ::dds::transportPriorityQosPolicy > transport_priority_;

    // lifespan
    //
    public:
    bool lifespan_p () const;
    ::dds::lifespanQosPolicy const& lifespan () const;
    void lifespan (::dds::lifespanQosPolicy const& );

    protected:
    ::std::auto_ptr< ::dds::lifespanQosPolicy > lifespan_;

    // user_data
    //
    public:
    bool user_data_p () const;
    ::dds::userDataQosPolicy const& user_data () const;
    void user_data (::dds::userDataQosPolicy const& );

    protected:
    ::std::auto_ptr< ::dds::userDataQosPolicy > user_data_;

    // ownership
    //
    public:
    bool ownership_p () const;
    ::dds::ownershipQosPolicy const& ownership () const;
    void ownership (::dds::ownershipQosPolicy const& );

    protected:
    ::std::auto_ptr< ::dds::ownershipQosPolicy > ownership_;

    // ownership_strength
    //
    public:
    bool ownership_strength_p () const;
    ::dds::ownershipStrengthQosPolicy const& ownership_strength () const;
    void ownership_strength (::dds::ownershipStrengthQosPolicy const& );

    protected:
    ::std::auto_ptr< ::dds::ownershipStrengthQosPolicy > ownership_strength_;

    // writer_data_lifecycle
    //
    public:
    bool writer_data_lifecycle_p () const;
    ::dds::writerDataLifecycleQosPolicy const& writer_data_lifecycle () const;
    void writer_data_lifecycle (::dds::writerDataLifecycleQosPolicy const& );

    protected:
    ::std::auto_ptr< ::dds::writerDataLifecycleQosPolicy > writer_data_lifecycle_;

    // name
    //
    public:
    bool name_p () const;
    ::XMLSchema::string< ACE_TCHAR > const& name () const;
    ::XMLSchema::string< ACE_TCHAR >& name ();
    void name (::XMLSchema::string< ACE_TCHAR > const& );

    protected:
    ::std::auto_ptr< ::XMLSchema::string< ACE_TCHAR > > name_;

    // base_name
    //
    public:
    bool base_name_p () const;
    ::XMLSchema::string< ACE_TCHAR > const& base_name () const;
    ::XMLSchema::string< ACE_TCHAR >& base_name ();
    void base_name (::XMLSchema::string< ACE_TCHAR > const& );

    protected:
    ::std::auto_ptr< ::XMLSchema::string< ACE_TCHAR > > base_name_;

    // topic_filter
    //
    public:
    bool topic_filter_p () const;
    ::XMLSchema::string< ACE_TCHAR > const& topic_filter () const;
    ::XMLSchema::string< ACE_TCHAR >& topic_filter ();
    void topic_filter (::XMLSchema::string< ACE_TCHAR > const& );

    protected:
    ::std::auto_ptr< ::XMLSchema::string< ACE_TCHAR > > topic_filter_;

    public:
    datawriterQos ();

    datawriterQos (::XSCRT::XML::Element< ACE_TCHAR > const&);
    datawriterQos (datawriterQos const& s);

    datawriterQos&
    operator= (datawriterQos const& s);

    private:
    char regulator__;
  };


  class XML_QOS_Handler_Export qosProfile : public ::XSCRT::Type
  {
    typedef ::XSCRT::Type Base;

    public:
    typedef ACE_Refcounted_Auto_Ptr < ::dds::qosProfile, ACE_Null_Mutex > _ptr;

    // datareader_qos
    //
    public:
    typedef ::std::list< ACE_Refcounted_Auto_Ptr < ::dds::datareaderQos, ACE_Null_Mutex > >::iterator datareader_qos_iterator;
    typedef ::std::list< ACE_Refcounted_Auto_Ptr < ::dds::datareaderQos, ACE_Null_Mutex > >::const_iterator datareader_qos_const_iterator;
    datareader_qos_iterator begin_datareader_qos ();
    datareader_qos_iterator end_datareader_qos ();
    datareader_qos_const_iterator begin_datareader_qos () const;
    datareader_qos_const_iterator end_datareader_qos () const;
    void add_datareader_qos ( ACE_Refcounted_Auto_Ptr < ::dds::datareaderQos, ACE_Null_Mutex > const& );
    XSCRT::Type* get_datareader_qos_ptr ( std::basic_string<ACE_TCHAR> idref );
    void set_datareader_qos_ptr (std::basic_string<ACE_TCHAR> idref );
    size_t count_datareader_qos (void) const;

    protected:
    ::std::list< ACE_Refcounted_Auto_Ptr < ::dds::datareaderQos, ACE_Null_Mutex > > datareader_qos_;

    // datawriter_qos
    //
    public:
    typedef ::std::list< ACE_Refcounted_Auto_Ptr < ::dds::datawriterQos, ACE_Null_Mutex > >::iterator datawriter_qos_iterator;
    typedef ::std::list< ACE_Refcounted_Auto_Ptr < ::dds::datawriterQos, ACE_Null_Mutex > >::const_iterator datawriter_qos_const_iterator;
    datawriter_qos_iterator begin_datawriter_qos ();
    datawriter_qos_iterator end_datawriter_qos ();
    datawriter_qos_const_iterator begin_datawriter_qos () const;
    datawriter_qos_const_iterator end_datawriter_qos () const;
    void add_datawriter_qos ( ACE_Refcounted_Auto_Ptr < ::dds::datawriterQos, ACE_Null_Mutex > const& );
    XSCRT::Type* get_datawriter_qos_ptr ( std::basic_string<ACE_TCHAR> idref );
    void set_datawriter_qos_ptr (std::basic_string<ACE_TCHAR> idref );
    size_t count_datawriter_qos (void) const;

    protected:
    ::std::list< ACE_Refcounted_Auto_Ptr < ::dds::datawriterQos, ACE_Null_Mutex > > datawriter_qos_;

    // topic_qos
    //
    public:
    typedef ::std::list< ACE_Refcounted_Auto_Ptr < ::dds::topicQos, ACE_Null_Mutex > >::iterator topic_qos_iterator;
    typedef ::std::list< ACE_Refcounted_Auto_Ptr < ::dds::topicQos, ACE_Null_Mutex > >::const_iterator topic_qos_const_iterator;
    topic_qos_iterator begin_topic_qos ();
    topic_qos_iterator end_topic_qos ();
    topic_qos_const_iterator begin_topic_qos () const;
    topic_qos_const_iterator end_topic_qos () const;
    void add_topic_qos ( ACE_Refcounted_Auto_Ptr < ::dds::topicQos, ACE_Null_Mutex > const& );
    XSCRT::Type* get_topic_qos_ptr ( std::basic_string<ACE_TCHAR> idref );
    void set_topic_qos_ptr (std::basic_string<ACE_TCHAR> idref );
    size_t count_topic_qos (void) const;

    protected:
    ::std::list< ACE_Refcounted_Auto_Ptr < ::dds::topicQos, ACE_Null_Mutex > > topic_qos_;

    // domainparticipant_qos
    //
    public:
    typedef ::std::list< ACE_Refcounted_Auto_Ptr < ::dds::domainparticipantQos, ACE_Null_Mutex > >::iterator domainparticipant_qos_iterator;
    typedef ::std::list< ACE_Refcounted_Auto_Ptr < ::dds::domainparticipantQos, ACE_Null_Mutex > >::const_iterator domainparticipant_qos_const_iterator;
    domainparticipant_qos_iterator begin_domainparticipant_qos ();
    domainparticipant_qos_iterator end_domainparticipant_qos ();
    domainparticipant_qos_const_iterator begin_domainparticipant_qos () const;
    domainparticipant_qos_const_iterator end_domainparticipant_qos () const;
    void add_domainparticipant_qos ( ACE_Refcounted_Auto_Ptr < ::dds::domainparticipantQos, ACE_Null_Mutex > const& );
    XSCRT::Type* get_domainparticipant_qos_ptr ( std::basic_string<ACE_TCHAR> idref );
    void set_domainparticipant_qos_ptr (std::basic_string<ACE_TCHAR> idref );
    size_t count_domainparticipant_qos (void) const;

    protected:
    ::std::list< ACE_Refcounted_Auto_Ptr < ::dds::domainparticipantQos, ACE_Null_Mutex > > domainparticipant_qos_;

    // publisher_qos
    //
    public:
    typedef ::std::list< ACE_Refcounted_Auto_Ptr < ::dds::publisherQos, ACE_Null_Mutex > >::iterator publisher_qos_iterator;
    typedef ::std::list< ACE_Refcounted_Auto_Ptr < ::dds::publisherQos, ACE_Null_Mutex > >::const_iterator publisher_qos_const_iterator;
    publisher_qos_iterator begin_publisher_qos ();
    publisher_qos_iterator end_publisher_qos ();
    publisher_qos_const_iterator begin_publisher_qos () const;
    publisher_qos_const_iterator end_publisher_qos () const;
    void add_publisher_qos ( ACE_Refcounted_Auto_Ptr < ::dds::publisherQos, ACE_Null_Mutex > const& );
    XSCRT::Type* get_publisher_qos_ptr ( std::basic_string<ACE_TCHAR> idref );
    void set_publisher_qos_ptr (std::basic_string<ACE_TCHAR> idref );
    size_t count_publisher_qos (void) const;

    protected:
    ::std::list< ACE_Refcounted_Auto_Ptr < ::dds::publisherQos, ACE_Null_Mutex > > publisher_qos_;

    // subscriber_qos
    //
    public:
    typedef ::std::list< ACE_Refcounted_Auto_Ptr < ::dds::subscriberQos, ACE_Null_Mutex > >::iterator subscriber_qos_iterator;
    typedef ::std::list< ACE_Refcounted_Auto_Ptr < ::dds::subscriberQos, ACE_Null_Mutex > >::const_iterator subscriber_qos_const_iterator;
    subscriber_qos_iterator begin_subscriber_qos ();
    subscriber_qos_iterator end_subscriber_qos ();
    subscriber_qos_const_iterator begin_subscriber_qos () const;
    subscriber_qos_const_iterator end_subscriber_qos () const;
    void add_subscriber_qos ( ACE_Refcounted_Auto_Ptr < ::dds::subscriberQos, ACE_Null_Mutex > const& );
    XSCRT::Type* get_subscriber_qos_ptr ( std::basic_string<ACE_TCHAR> idref );
    void set_subscriber_qos_ptr (std::basic_string<ACE_TCHAR> idref );
    size_t count_subscriber_qos (void) const;

    protected:
    ::std::list< ACE_Refcounted_Auto_Ptr < ::dds::subscriberQos, ACE_Null_Mutex > > subscriber_qos_;

    // name
    //
    public:
    ::XMLSchema::string< ACE_TCHAR > const& name () const;
    ::XMLSchema::string< ACE_TCHAR >& name ();
    void name (::XMLSchema::string< ACE_TCHAR > const& );

    protected:
    ::std::auto_ptr< ::XMLSchema::string< ACE_TCHAR > > name_;

    // base_name
    //
    public:
    bool base_name_p () const;
    ::XMLSchema::string< ACE_TCHAR > const& base_name () const;
    ::XMLSchema::string< ACE_TCHAR >& base_name ();
    void base_name (::XMLSchema::string< ACE_TCHAR > const& );

    protected:
    ::std::auto_ptr< ::XMLSchema::string< ACE_TCHAR > > base_name_;

    public:
    qosProfile (::XMLSchema::string< ACE_TCHAR > const& name__);

    qosProfile (::XSCRT::XML::Element< ACE_TCHAR > const&);
    qosProfile (qosProfile const& s);

    qosProfile&
    operator= (qosProfile const& s);

    private:
    char regulator__;
  };


  class XML_QOS_Handler_Export qosProfile_seq : public ::XSCRT::Type
  {
    typedef ::XSCRT::Type Base;

    public:
    typedef ACE_Refcounted_Auto_Ptr < ::dds::qosProfile_seq, ACE_Null_Mutex > _ptr;

    // qos_profile
    //
    public:
    typedef ::std::list< ACE_Refcounted_Auto_Ptr < ::dds::qosProfile, ACE_Null_Mutex > >::iterator qos_profile_iterator;
    typedef ::std::list< ACE_Refcounted_Auto_Ptr < ::dds::qosProfile, ACE_Null_Mutex > >::const_iterator qos_profile_const_iterator;
    qos_profile_iterator begin_qos_profile ();
    qos_profile_iterator end_qos_profile ();
    qos_profile_const_iterator begin_qos_profile () const;
    qos_profile_const_iterator end_qos_profile () const;
    void add_qos_profile ( ACE_Refcounted_Auto_Ptr < ::dds::qosProfile, ACE_Null_Mutex > const& );
    XSCRT::Type* get_qos_profile_ptr ( std::basic_string<ACE_TCHAR> idref );
    void set_qos_profile_ptr (std::basic_string<ACE_TCHAR> idref );
    size_t count_qos_profile (void) const;

    protected:
    ::std::list< ACE_Refcounted_Auto_Ptr < ::dds::qosProfile, ACE_Null_Mutex > > qos_profile_;

    public:
    qosProfile_seq ();

    qosProfile_seq (::XSCRT::XML::Element< ACE_TCHAR > const&);
    qosProfile_seq (qosProfile_seq const& s);

    qosProfile_seq&
    operator= (qosProfile_seq const& s);

    private:
    char regulator__;
  };
}

namespace dds
{
  namespace reader
  {
    XML_QOS_Handler_Export
    ::dds::qosProfile_seq
    dds (xercesc::DOMDocument const*);
  }
}

#include "XMLSchema/Traversal.hpp"

namespace dds
{
  namespace Traversal
  {
    typedef
    ::XMLSchema::Traversal::Traverser< ::dds::destinationOrderKind >
    destinationOrderKind;

    typedef
    ::XMLSchema::Traversal::Traverser< ::dds::durabilityKind >
    durabilityKind;

    typedef
    ::XMLSchema::Traversal::Traverser< ::dds::historyKind >
    historyKind;

    typedef
    ::XMLSchema::Traversal::Traverser< ::dds::livelinessKind >
    livelinessKind;

    typedef
    ::XMLSchema::Traversal::Traverser< ::dds::presentationAccessScopeKind >
    presentationAccessScopeKind;

    typedef
    ::XMLSchema::Traversal::Traverser< ::dds::reliabilityKind >
    reliabilityKind;

    typedef
    ::XMLSchema::Traversal::Traverser< ::dds::ownershipKind >
    ownershipKind;

    struct XML_QOS_Handler_Export duration : ::XMLSchema::Traversal::Traverser< ::dds::duration >
    {
      virtual void
      traverse (Type&);

      virtual void
      traverse (Type const&);

      virtual void
      pre (Type&);

      virtual void
      pre (Type const&);

      virtual void
      sec (Type&);

      virtual void
      sec (Type const&);

      virtual void
      sec_none (Type&);

      virtual void
      sec_none (Type const&);

      virtual void
      nanosec (Type&);

      virtual void
      nanosec (Type const&);

      virtual void
      nanosec_none (Type&);

      virtual void
      nanosec_none (Type const&);

      virtual void
      post (Type&);

      virtual void
      post (Type const&);
    };

    struct XML_QOS_Handler_Export stringSeq : ::XMLSchema::Traversal::Traverser< ::dds::stringSeq >
    {
      virtual void
      traverse (Type&);

      virtual void
      traverse (Type const&);

      virtual void
      pre (Type&);

      virtual void
      pre (Type const&);

      virtual void
      element (Type&);

      virtual void
      element (Type const&);

      virtual void
      element_pre (Type&);

      virtual void
      element_pre (Type const&);

      virtual void
      element_next (Type&);

      virtual void
      element_next (Type const&);

      virtual void
      element_post (Type&);

      virtual void
      element_post (Type const&);

      virtual void
      element_none (Type&);

      virtual void
      element_none (Type const&);

      virtual void
      post (Type&);

      virtual void
      post (Type const&);
    };

    struct XML_QOS_Handler_Export deadlineQosPolicy : ::XMLSchema::Traversal::Traverser< ::dds::deadlineQosPolicy >
    {
      virtual void
      traverse (Type&);

      virtual void
      traverse (Type const&);

      virtual void
      pre (Type&);

      virtual void
      pre (Type const&);

      virtual void
      period (Type&);

      virtual void
      period (Type const&);

      virtual void
      period_none (Type&);

      virtual void
      period_none (Type const&);

      virtual void
      post (Type&);

      virtual void
      post (Type const&);
    };

    struct XML_QOS_Handler_Export destinationOrderQosPolicy : ::XMLSchema::Traversal::Traverser< ::dds::destinationOrderQosPolicy >
    {
      virtual void
      traverse (Type&);

      virtual void
      traverse (Type const&);

      virtual void
      pre (Type&);

      virtual void
      pre (Type const&);

      virtual void
      kind (Type&);

      virtual void
      kind (Type const&);

      virtual void
      kind_none (Type&);

      virtual void
      kind_none (Type const&);

      virtual void
      post (Type&);

      virtual void
      post (Type const&);
    };

    struct XML_QOS_Handler_Export durabilityQosPolicy : ::XMLSchema::Traversal::Traverser< ::dds::durabilityQosPolicy >
    {
      virtual void
      traverse (Type&);

      virtual void
      traverse (Type const&);

      virtual void
      pre (Type&);

      virtual void
      pre (Type const&);

      virtual void
      kind (Type&);

      virtual void
      kind (Type const&);

      virtual void
      kind_none (Type&);

      virtual void
      kind_none (Type const&);

      virtual void
      post (Type&);

      virtual void
      post (Type const&);
    };

    struct XML_QOS_Handler_Export durabilityServiceQosPolicy : ::XMLSchema::Traversal::Traverser< ::dds::durabilityServiceQosPolicy >
    {
      virtual void
      traverse (Type&);

      virtual void
      traverse (Type const&);

      virtual void
      pre (Type&);

      virtual void
      pre (Type const&);

      virtual void
      service_cleanup_delay (Type&);

      virtual void
      service_cleanup_delay (Type const&);

      virtual void
      service_cleanup_delay_none (Type&);

      virtual void
      service_cleanup_delay_none (Type const&);

      virtual void
      history_kind (Type&);

      virtual void
      history_kind (Type const&);

      virtual void
      history_kind_none (Type&);

      virtual void
      history_kind_none (Type const&);

      virtual void
      history_depth (Type&);

      virtual void
      history_depth (Type const&);

      virtual void
      history_depth_none (Type&);

      virtual void
      history_depth_none (Type const&);

      virtual void
      max_samples (Type&);

      virtual void
      max_samples (Type const&);

      virtual void
      max_samples_none (Type&);

      virtual void
      max_samples_none (Type const&);

      virtual void
      max_instances (Type&);

      virtual void
      max_instances (Type const&);

      virtual void
      max_instances_none (Type&);

      virtual void
      max_instances_none (Type const&);

      virtual void
      max_samples_per_instance (Type&);

      virtual void
      max_samples_per_instance (Type const&);

      virtual void
      max_samples_per_instance_none (Type&);

      virtual void
      max_samples_per_instance_none (Type const&);

      virtual void
      post (Type&);

      virtual void
      post (Type const&);
    };

    struct XML_QOS_Handler_Export entityFactoryQosPolicy : ::XMLSchema::Traversal::Traverser< ::dds::entityFactoryQosPolicy >
    {
      virtual void
      traverse (Type&);

      virtual void
      traverse (Type const&);

      virtual void
      pre (Type&);

      virtual void
      pre (Type const&);

      virtual void
      autoenable_created_entities (Type&);

      virtual void
      autoenable_created_entities (Type const&);

      virtual void
      autoenable_created_entities_none (Type&);

      virtual void
      autoenable_created_entities_none (Type const&);

      virtual void
      post (Type&);

      virtual void
      post (Type const&);
    };

    struct XML_QOS_Handler_Export groupDataQosPolicy : ::XMLSchema::Traversal::Traverser< ::dds::groupDataQosPolicy >
    {
      virtual void
      traverse (Type&);

      virtual void
      traverse (Type const&);

      virtual void
      pre (Type&);

      virtual void
      pre (Type const&);

      virtual void
      value (Type&);

      virtual void
      value (Type const&);

      virtual void
      value_none (Type&);

      virtual void
      value_none (Type const&);

      virtual void
      post (Type&);

      virtual void
      post (Type const&);
    };

    struct XML_QOS_Handler_Export historyQosPolicy : ::XMLSchema::Traversal::Traverser< ::dds::historyQosPolicy >
    {
      virtual void
      traverse (Type&);

      virtual void
      traverse (Type const&);

      virtual void
      pre (Type&);

      virtual void
      pre (Type const&);

      virtual void
      kind (Type&);

      virtual void
      kind (Type const&);

      virtual void
      kind_none (Type&);

      virtual void
      kind_none (Type const&);

      virtual void
      depth (Type&);

      virtual void
      depth (Type const&);

      virtual void
      depth_none (Type&);

      virtual void
      depth_none (Type const&);

      virtual void
      post (Type&);

      virtual void
      post (Type const&);
    };

    struct XML_QOS_Handler_Export latencyBudgetQosPolicy : ::XMLSchema::Traversal::Traverser< ::dds::latencyBudgetQosPolicy >
    {
      virtual void
      traverse (Type&);

      virtual void
      traverse (Type const&);

      virtual void
      pre (Type&);

      virtual void
      pre (Type const&);

      virtual void
      duration (Type&);

      virtual void
      duration (Type const&);

      virtual void
      duration_none (Type&);

      virtual void
      duration_none (Type const&);

      virtual void
      post (Type&);

      virtual void
      post (Type const&);
    };

    struct XML_QOS_Handler_Export lifespanQosPolicy : ::XMLSchema::Traversal::Traverser< ::dds::lifespanQosPolicy >
    {
      virtual void
      traverse (Type&);

      virtual void
      traverse (Type const&);

      virtual void
      pre (Type&);

      virtual void
      pre (Type const&);

      virtual void
      duration (Type&);

      virtual void
      duration (Type const&);

      virtual void
      duration_none (Type&);

      virtual void
      duration_none (Type const&);

      virtual void
      post (Type&);

      virtual void
      post (Type const&);
    };

    struct XML_QOS_Handler_Export livelinessQosPolicy : ::XMLSchema::Traversal::Traverser< ::dds::livelinessQosPolicy >
    {
      virtual void
      traverse (Type&);

      virtual void
      traverse (Type const&);

      virtual void
      pre (Type&);

      virtual void
      pre (Type const&);

      virtual void
      kind (Type&);

      virtual void
      kind (Type const&);

      virtual void
      kind_none (Type&);

      virtual void
      kind_none (Type const&);

      virtual void
      lease_duration (Type&);

      virtual void
      lease_duration (Type const&);

      virtual void
      lease_duration_none (Type&);

      virtual void
      lease_duration_none (Type const&);

      virtual void
      post (Type&);

      virtual void
      post (Type const&);
    };

    struct XML_QOS_Handler_Export ownershipQosPolicy : ::XMLSchema::Traversal::Traverser< ::dds::ownershipQosPolicy >
    {
      virtual void
      traverse (Type&);

      virtual void
      traverse (Type const&);

      virtual void
      pre (Type&);

      virtual void
      pre (Type const&);

      virtual void
      kind (Type&);

      virtual void
      kind (Type const&);

      virtual void
      kind_none (Type&);

      virtual void
      kind_none (Type const&);

      virtual void
      post (Type&);

      virtual void
      post (Type const&);
    };

    struct XML_QOS_Handler_Export ownershipStrengthQosPolicy : ::XMLSchema::Traversal::Traverser< ::dds::ownershipStrengthQosPolicy >
    {
      virtual void
      traverse (Type&);

      virtual void
      traverse (Type const&);

      virtual void
      pre (Type&);

      virtual void
      pre (Type const&);

      virtual void
      value (Type&);

      virtual void
      value (Type const&);

      virtual void
      value_none (Type&);

      virtual void
      value_none (Type const&);

      virtual void
      post (Type&);

      virtual void
      post (Type const&);
    };

    struct XML_QOS_Handler_Export partitionQosPolicy : ::XMLSchema::Traversal::Traverser< ::dds::partitionQosPolicy >
    {
      virtual void
      traverse (Type&);

      virtual void
      traverse (Type const&);

      virtual void
      pre (Type&);

      virtual void
      pre (Type const&);

      virtual void
      name (Type&);

      virtual void
      name (Type const&);

      virtual void
      name_none (Type&);

      virtual void
      name_none (Type const&);

      virtual void
      post (Type&);

      virtual void
      post (Type const&);
    };

    struct XML_QOS_Handler_Export presentationQosPolicy : ::XMLSchema::Traversal::Traverser< ::dds::presentationQosPolicy >
    {
      virtual void
      traverse (Type&);

      virtual void
      traverse (Type const&);

      virtual void
      pre (Type&);

      virtual void
      pre (Type const&);

      virtual void
      access_scope (Type&);

      virtual void
      access_scope (Type const&);

      virtual void
      access_scope_none (Type&);

      virtual void
      access_scope_none (Type const&);

      virtual void
      coherent_access (Type&);

      virtual void
      coherent_access (Type const&);

      virtual void
      coherent_access_none (Type&);

      virtual void
      coherent_access_none (Type const&);

      virtual void
      ordered_access (Type&);

      virtual void
      ordered_access (Type const&);

      virtual void
      ordered_access_none (Type&);

      virtual void
      ordered_access_none (Type const&);

      virtual void
      post (Type&);

      virtual void
      post (Type const&);
    };

    struct XML_QOS_Handler_Export readerDataLifecycleQosPolicy : ::XMLSchema::Traversal::Traverser< ::dds::readerDataLifecycleQosPolicy >
    {
      virtual void
      traverse (Type&);

      virtual void
      traverse (Type const&);

      virtual void
      pre (Type&);

      virtual void
      pre (Type const&);

      virtual void
      autopurge_nowriter_samples_delay (Type&);

      virtual void
      autopurge_nowriter_samples_delay (Type const&);

      virtual void
      autopurge_nowriter_samples_delay_none (Type&);

      virtual void
      autopurge_nowriter_samples_delay_none (Type const&);

      virtual void
      autopurge_disposed_samples_delay (Type&);

      virtual void
      autopurge_disposed_samples_delay (Type const&);

      virtual void
      autopurge_disposed_samples_delay_none (Type&);

      virtual void
      autopurge_disposed_samples_delay_none (Type const&);

      virtual void
      post (Type&);

      virtual void
      post (Type const&);
    };

    struct XML_QOS_Handler_Export reliabilityQosPolicy : ::XMLSchema::Traversal::Traverser< ::dds::reliabilityQosPolicy >
    {
      virtual void
      traverse (Type&);

      virtual void
      traverse (Type const&);

      virtual void
      pre (Type&);

      virtual void
      pre (Type const&);

      virtual void
      kind (Type&);

      virtual void
      kind (Type const&);

      virtual void
      kind_none (Type&);

      virtual void
      kind_none (Type const&);

      virtual void
      max_blocking_time (Type&);

      virtual void
      max_blocking_time (Type const&);

      virtual void
      max_blocking_time_none (Type&);

      virtual void
      max_blocking_time_none (Type const&);

      virtual void
      post (Type&);

      virtual void
      post (Type const&);
    };

    struct XML_QOS_Handler_Export resourceLimitsQosPolicy : ::XMLSchema::Traversal::Traverser< ::dds::resourceLimitsQosPolicy >
    {
      virtual void
      traverse (Type&);

      virtual void
      traverse (Type const&);

      virtual void
      pre (Type&);

      virtual void
      pre (Type const&);

      virtual void
      max_samples (Type&);

      virtual void
      max_samples (Type const&);

      virtual void
      max_samples_none (Type&);

      virtual void
      max_samples_none (Type const&);

      virtual void
      max_instances (Type&);

      virtual void
      max_instances (Type const&);

      virtual void
      max_instances_none (Type&);

      virtual void
      max_instances_none (Type const&);

      virtual void
      max_samples_per_instance (Type&);

      virtual void
      max_samples_per_instance (Type const&);

      virtual void
      max_samples_per_instance_none (Type&);

      virtual void
      max_samples_per_instance_none (Type const&);

      virtual void
      initial_samples (Type&);

      virtual void
      initial_samples (Type const&);

      virtual void
      initial_samples_none (Type&);

      virtual void
      initial_samples_none (Type const&);

      virtual void
      initial_instances (Type&);

      virtual void
      initial_instances (Type const&);

      virtual void
      initial_instances_none (Type&);

      virtual void
      initial_instances_none (Type const&);

      virtual void
      post (Type&);

      virtual void
      post (Type const&);
    };

    struct XML_QOS_Handler_Export timeBasedFilterQosPolicy : ::XMLSchema::Traversal::Traverser< ::dds::timeBasedFilterQosPolicy >
    {
      virtual void
      traverse (Type&);

      virtual void
      traverse (Type const&);

      virtual void
      pre (Type&);

      virtual void
      pre (Type const&);

      virtual void
      minimum_separation (Type&);

      virtual void
      minimum_separation (Type const&);

      virtual void
      minimum_separation_none (Type&);

      virtual void
      minimum_separation_none (Type const&);

      virtual void
      post (Type&);

      virtual void
      post (Type const&);
    };

    struct XML_QOS_Handler_Export topicDataQosPolicy : ::XMLSchema::Traversal::Traverser< ::dds::topicDataQosPolicy >
    {
      virtual void
      traverse (Type&);

      virtual void
      traverse (Type const&);

      virtual void
      pre (Type&);

      virtual void
      pre (Type const&);

      virtual void
      value (Type&);

      virtual void
      value (Type const&);

      virtual void
      value_none (Type&);

      virtual void
      value_none (Type const&);

      virtual void
      post (Type&);

      virtual void
      post (Type const&);
    };

    struct XML_QOS_Handler_Export transportPriorityQosPolicy : ::XMLSchema::Traversal::Traverser< ::dds::transportPriorityQosPolicy >
    {
      virtual void
      traverse (Type&);

      virtual void
      traverse (Type const&);

      virtual void
      pre (Type&);

      virtual void
      pre (Type const&);

      virtual void
      value (Type&);

      virtual void
      value (Type const&);

      virtual void
      value_none (Type&);

      virtual void
      value_none (Type const&);

      virtual void
      post (Type&);

      virtual void
      post (Type const&);
    };

    struct XML_QOS_Handler_Export userDataQosPolicy : ::XMLSchema::Traversal::Traverser< ::dds::userDataQosPolicy >
    {
      virtual void
      traverse (Type&);

      virtual void
      traverse (Type const&);

      virtual void
      pre (Type&);

      virtual void
      pre (Type const&);

      virtual void
      value (Type&);

      virtual void
      value (Type const&);

      virtual void
      value_none (Type&);

      virtual void
      value_none (Type const&);

      virtual void
      post (Type&);

      virtual void
      post (Type const&);
    };

    struct XML_QOS_Handler_Export writerDataLifecycleQosPolicy : ::XMLSchema::Traversal::Traverser< ::dds::writerDataLifecycleQosPolicy >
    {
      virtual void
      traverse (Type&);

      virtual void
      traverse (Type const&);

      virtual void
      pre (Type&);

      virtual void
      pre (Type const&);

      virtual void
      autodispose_unregistered_instances (Type&);

      virtual void
      autodispose_unregistered_instances (Type const&);

      virtual void
      autodispose_unregistered_instances_none (Type&);

      virtual void
      autodispose_unregistered_instances_none (Type const&);

      virtual void
      post (Type&);

      virtual void
      post (Type const&);
    };

    struct XML_QOS_Handler_Export domainparticipantQos : ::XMLSchema::Traversal::Traverser< ::dds::domainparticipantQos >
    {
      virtual void
      traverse (Type&);

      virtual void
      traverse (Type const&);

      virtual void
      pre (Type&);

      virtual void
      pre (Type const&);

      virtual void
      user_data (Type&);

      virtual void
      user_data (Type const&);

      virtual void
      user_data_none (Type&);

      virtual void
      user_data_none (Type const&);

      virtual void
      entity_factory (Type&);

      virtual void
      entity_factory (Type const&);

      virtual void
      entity_factory_none (Type&);

      virtual void
      entity_factory_none (Type const&);

      virtual void
      name (Type&);

      virtual void
      name (Type const&);

      virtual void
      name_none (Type&);

      virtual void
      name_none (Type const&);

      virtual void
      base_name (Type&);

      virtual void
      base_name (Type const&);

      virtual void
      base_name_none (Type&);

      virtual void
      base_name_none (Type const&);

      virtual void
      topic_filter (Type&);

      virtual void
      topic_filter (Type const&);

      virtual void
      topic_filter_none (Type&);

      virtual void
      topic_filter_none (Type const&);

      virtual void
      post (Type&);

      virtual void
      post (Type const&);
    };

    struct XML_QOS_Handler_Export publisherQos : ::XMLSchema::Traversal::Traverser< ::dds::publisherQos >
    {
      virtual void
      traverse (Type&);

      virtual void
      traverse (Type const&);

      virtual void
      pre (Type&);

      virtual void
      pre (Type const&);

      virtual void
      presentation (Type&);

      virtual void
      presentation (Type const&);

      virtual void
      presentation_none (Type&);

      virtual void
      presentation_none (Type const&);

      virtual void
      partition (Type&);

      virtual void
      partition (Type const&);

      virtual void
      partition_none (Type&);

      virtual void
      partition_none (Type const&);

      virtual void
      group_data (Type&);

      virtual void
      group_data (Type const&);

      virtual void
      group_data_none (Type&);

      virtual void
      group_data_none (Type const&);

      virtual void
      entity_factory (Type&);

      virtual void
      entity_factory (Type const&);

      virtual void
      entity_factory_none (Type&);

      virtual void
      entity_factory_none (Type const&);

      virtual void
      name (Type&);

      virtual void
      name (Type const&);

      virtual void
      name_none (Type&);

      virtual void
      name_none (Type const&);

      virtual void
      base_name (Type&);

      virtual void
      base_name (Type const&);

      virtual void
      base_name_none (Type&);

      virtual void
      base_name_none (Type const&);

      virtual void
      topic_filter (Type&);

      virtual void
      topic_filter (Type const&);

      virtual void
      topic_filter_none (Type&);

      virtual void
      topic_filter_none (Type const&);

      virtual void
      post (Type&);

      virtual void
      post (Type const&);
    };

    struct XML_QOS_Handler_Export subscriberQos : ::XMLSchema::Traversal::Traverser< ::dds::subscriberQos >
    {
      virtual void
      traverse (Type&);

      virtual void
      traverse (Type const&);

      virtual void
      pre (Type&);

      virtual void
      pre (Type const&);

      virtual void
      presentation (Type&);

      virtual void
      presentation (Type const&);

      virtual void
      presentation_none (Type&);

      virtual void
      presentation_none (Type const&);

      virtual void
      partition (Type&);

      virtual void
      partition (Type const&);

      virtual void
      partition_none (Type&);

      virtual void
      partition_none (Type const&);

      virtual void
      group_data (Type&);

      virtual void
      group_data (Type const&);

      virtual void
      group_data_none (Type&);

      virtual void
      group_data_none (Type const&);

      virtual void
      entity_factory (Type&);

      virtual void
      entity_factory (Type const&);

      virtual void
      entity_factory_none (Type&);

      virtual void
      entity_factory_none (Type const&);

      virtual void
      name (Type&);

      virtual void
      name (Type const&);

      virtual void
      name_none (Type&);

      virtual void
      name_none (Type const&);

      virtual void
      base_name (Type&);

      virtual void
      base_name (Type const&);

      virtual void
      base_name_none (Type&);

      virtual void
      base_name_none (Type const&);

      virtual void
      topic_filter (Type&);

      virtual void
      topic_filter (Type const&);

      virtual void
      topic_filter_none (Type&);

      virtual void
      topic_filter_none (Type const&);

      virtual void
      post (Type&);

      virtual void
      post (Type const&);
    };

    struct XML_QOS_Handler_Export topicQos : ::XMLSchema::Traversal::Traverser< ::dds::topicQos >
    {
      virtual void
      traverse (Type&);

      virtual void
      traverse (Type const&);

      virtual void
      pre (Type&);

      virtual void
      pre (Type const&);

      virtual void
      topic_data (Type&);

      virtual void
      topic_data (Type const&);

      virtual void
      topic_data_none (Type&);

      virtual void
      topic_data_none (Type const&);

      virtual void
      durability (Type&);

      virtual void
      durability (Type const&);

      virtual void
      durability_none (Type&);

      virtual void
      durability_none (Type const&);

      virtual void
      durability_service (Type&);

      virtual void
      durability_service (Type const&);

      virtual void
      durability_service_none (Type&);

      virtual void
      durability_service_none (Type const&);

      virtual void
      deadline (Type&);

      virtual void
      deadline (Type const&);

      virtual void
      deadline_none (Type&);

      virtual void
      deadline_none (Type const&);

      virtual void
      latency_budget (Type&);

      virtual void
      latency_budget (Type const&);

      virtual void
      latency_budget_none (Type&);

      virtual void
      latency_budget_none (Type const&);

      virtual void
      liveliness (Type&);

      virtual void
      liveliness (Type const&);

      virtual void
      liveliness_none (Type&);

      virtual void
      liveliness_none (Type const&);

      virtual void
      reliability (Type&);

      virtual void
      reliability (Type const&);

      virtual void
      reliability_none (Type&);

      virtual void
      reliability_none (Type const&);

      virtual void
      destination_order (Type&);

      virtual void
      destination_order (Type const&);

      virtual void
      destination_order_none (Type&);

      virtual void
      destination_order_none (Type const&);

      virtual void
      history (Type&);

      virtual void
      history (Type const&);

      virtual void
      history_none (Type&);

      virtual void
      history_none (Type const&);

      virtual void
      resource_limits (Type&);

      virtual void
      resource_limits (Type const&);

      virtual void
      resource_limits_none (Type&);

      virtual void
      resource_limits_none (Type const&);

      virtual void
      transport_priority (Type&);

      virtual void
      transport_priority (Type const&);

      virtual void
      transport_priority_none (Type&);

      virtual void
      transport_priority_none (Type const&);

      virtual void
      lifespan (Type&);

      virtual void
      lifespan (Type const&);

      virtual void
      lifespan_none (Type&);

      virtual void
      lifespan_none (Type const&);

      virtual void
      ownership (Type&);

      virtual void
      ownership (Type const&);

      virtual void
      ownership_none (Type&);

      virtual void
      ownership_none (Type const&);

      virtual void
      name (Type&);

      virtual void
      name (Type const&);

      virtual void
      name_none (Type&);

      virtual void
      name_none (Type const&);

      virtual void
      base_name (Type&);

      virtual void
      base_name (Type const&);

      virtual void
      base_name_none (Type&);

      virtual void
      base_name_none (Type const&);

      virtual void
      topic_filter (Type&);

      virtual void
      topic_filter (Type const&);

      virtual void
      topic_filter_none (Type&);

      virtual void
      topic_filter_none (Type const&);

      virtual void
      post (Type&);

      virtual void
      post (Type const&);
    };

    struct XML_QOS_Handler_Export datareaderQos : ::XMLSchema::Traversal::Traverser< ::dds::datareaderQos >
    {
      virtual void
      traverse (Type&);

      virtual void
      traverse (Type const&);

      virtual void
      pre (Type&);

      virtual void
      pre (Type const&);

      virtual void
      durability (Type&);

      virtual void
      durability (Type const&);

      virtual void
      durability_none (Type&);

      virtual void
      durability_none (Type const&);

      virtual void
      deadline (Type&);

      virtual void
      deadline (Type const&);

      virtual void
      deadline_none (Type&);

      virtual void
      deadline_none (Type const&);

      virtual void
      latency_budget (Type&);

      virtual void
      latency_budget (Type const&);

      virtual void
      latency_budget_none (Type&);

      virtual void
      latency_budget_none (Type const&);

      virtual void
      liveliness (Type&);

      virtual void
      liveliness (Type const&);

      virtual void
      liveliness_none (Type&);

      virtual void
      liveliness_none (Type const&);

      virtual void
      reliability (Type&);

      virtual void
      reliability (Type const&);

      virtual void
      reliability_none (Type&);

      virtual void
      reliability_none (Type const&);

      virtual void
      destination_order (Type&);

      virtual void
      destination_order (Type const&);

      virtual void
      destination_order_none (Type&);

      virtual void
      destination_order_none (Type const&);

      virtual void
      history (Type&);

      virtual void
      history (Type const&);

      virtual void
      history_none (Type&);

      virtual void
      history_none (Type const&);

      virtual void
      resource_limits (Type&);

      virtual void
      resource_limits (Type const&);

      virtual void
      resource_limits_none (Type&);

      virtual void
      resource_limits_none (Type const&);

      virtual void
      user_data (Type&);

      virtual void
      user_data (Type const&);

      virtual void
      user_data_none (Type&);

      virtual void
      user_data_none (Type const&);

      virtual void
      ownership (Type&);

      virtual void
      ownership (Type const&);

      virtual void
      ownership_none (Type&);

      virtual void
      ownership_none (Type const&);

      virtual void
      time_based_filter (Type&);

      virtual void
      time_based_filter (Type const&);

      virtual void
      time_based_filter_none (Type&);

      virtual void
      time_based_filter_none (Type const&);

      virtual void
      reader_data_lifecycle (Type&);

      virtual void
      reader_data_lifecycle (Type const&);

      virtual void
      reader_data_lifecycle_none (Type&);

      virtual void
      reader_data_lifecycle_none (Type const&);

      virtual void
      name (Type&);

      virtual void
      name (Type const&);

      virtual void
      name_none (Type&);

      virtual void
      name_none (Type const&);

      virtual void
      base_name (Type&);

      virtual void
      base_name (Type const&);

      virtual void
      base_name_none (Type&);

      virtual void
      base_name_none (Type const&);

      virtual void
      topic_filter (Type&);

      virtual void
      topic_filter (Type const&);

      virtual void
      topic_filter_none (Type&);

      virtual void
      topic_filter_none (Type const&);

      virtual void
      post (Type&);

      virtual void
      post (Type const&);
    };

    struct XML_QOS_Handler_Export datawriterQos : ::XMLSchema::Traversal::Traverser< ::dds::datawriterQos >
    {
      virtual void
      traverse (Type&);

      virtual void
      traverse (Type const&);

      virtual void
      pre (Type&);

      virtual void
      pre (Type const&);

      virtual void
      durability (Type&);

      virtual void
      durability (Type const&);

      virtual void
      durability_none (Type&);

      virtual void
      durability_none (Type const&);

      virtual void
      durability_service (Type&);

      virtual void
      durability_service (Type const&);

      virtual void
      durability_service_none (Type&);

      virtual void
      durability_service_none (Type const&);

      virtual void
      deadline (Type&);

      virtual void
      deadline (Type const&);

      virtual void
      deadline_none (Type&);

      virtual void
      deadline_none (Type const&);

      virtual void
      latency_budget (Type&);

      virtual void
      latency_budget (Type const&);

      virtual void
      latency_budget_none (Type&);

      virtual void
      latency_budget_none (Type const&);

      virtual void
      liveliness (Type&);

      virtual void
      liveliness (Type const&);

      virtual void
      liveliness_none (Type&);

      virtual void
      liveliness_none (Type const&);

      virtual void
      reliability (Type&);

      virtual void
      reliability (Type const&);

      virtual void
      reliability_none (Type&);

      virtual void
      reliability_none (Type const&);

      virtual void
      destination_order (Type&);

      virtual void
      destination_order (Type const&);

      virtual void
      destination_order_none (Type&);

      virtual void
      destination_order_none (Type const&);

      virtual void
      history (Type&);

      virtual void
      history (Type const&);

      virtual void
      history_none (Type&);

      virtual void
      history_none (Type const&);

      virtual void
      resource_limits (Type&);

      virtual void
      resource_limits (Type const&);

      virtual void
      resource_limits_none (Type&);

      virtual void
      resource_limits_none (Type const&);

      virtual void
      transport_priority (Type&);

      virtual void
      transport_priority (Type const&);

      virtual void
      transport_priority_none (Type&);

      virtual void
      transport_priority_none (Type const&);

      virtual void
      lifespan (Type&);

      virtual void
      lifespan (Type const&);

      virtual void
      lifespan_none (Type&);

      virtual void
      lifespan_none (Type const&);

      virtual void
      user_data (Type&);

      virtual void
      user_data (Type const&);

      virtual void
      user_data_none (Type&);

      virtual void
      user_data_none (Type const&);

      virtual void
      ownership (Type&);

      virtual void
      ownership (Type const&);

      virtual void
      ownership_none (Type&);

      virtual void
      ownership_none (Type const&);

      virtual void
      ownership_strength (Type&);

      virtual void
      ownership_strength (Type const&);

      virtual void
      ownership_strength_none (Type&);

      virtual void
      ownership_strength_none (Type const&);

      virtual void
      writer_data_lifecycle (Type&);

      virtual void
      writer_data_lifecycle (Type const&);

      virtual void
      writer_data_lifecycle_none (Type&);

      virtual void
      writer_data_lifecycle_none (Type const&);

      virtual void
      name (Type&);

      virtual void
      name (Type const&);

      virtual void
      name_none (Type&);

      virtual void
      name_none (Type const&);

      virtual void
      base_name (Type&);

      virtual void
      base_name (Type const&);

      virtual void
      base_name_none (Type&);

      virtual void
      base_name_none (Type const&);

      virtual void
      topic_filter (Type&);

      virtual void
      topic_filter (Type const&);

      virtual void
      topic_filter_none (Type&);

      virtual void
      topic_filter_none (Type const&);

      virtual void
      post (Type&);

      virtual void
      post (Type const&);
    };

    struct XML_QOS_Handler_Export qosProfile : ::XMLSchema::Traversal::Traverser< ::dds::qosProfile >
    {
      virtual void
      traverse (Type&);

      virtual void
      traverse (Type const&);

      virtual void
      pre (Type&);

      virtual void
      pre (Type const&);

      virtual void
      datareader_qos (Type&);

      virtual void
      datareader_qos (Type const&);

      virtual void
      datareader_qos_pre (Type&);

      virtual void
      datareader_qos_pre (Type const&);

      virtual void
      datareader_qos_next (Type&);

      virtual void
      datareader_qos_next (Type const&);

      virtual void
      datareader_qos_post (Type&);

      virtual void
      datareader_qos_post (Type const&);

      virtual void
      datareader_qos_none (Type&);

      virtual void
      datareader_qos_none (Type const&);

      virtual void
      datawriter_qos (Type&);

      virtual void
      datawriter_qos (Type const&);

      virtual void
      datawriter_qos_pre (Type&);

      virtual void
      datawriter_qos_pre (Type const&);

      virtual void
      datawriter_qos_next (Type&);

      virtual void
      datawriter_qos_next (Type const&);

      virtual void
      datawriter_qos_post (Type&);

      virtual void
      datawriter_qos_post (Type const&);

      virtual void
      datawriter_qos_none (Type&);

      virtual void
      datawriter_qos_none (Type const&);

      virtual void
      topic_qos (Type&);

      virtual void
      topic_qos (Type const&);

      virtual void
      topic_qos_pre (Type&);

      virtual void
      topic_qos_pre (Type const&);

      virtual void
      topic_qos_next (Type&);

      virtual void
      topic_qos_next (Type const&);

      virtual void
      topic_qos_post (Type&);

      virtual void
      topic_qos_post (Type const&);

      virtual void
      topic_qos_none (Type&);

      virtual void
      topic_qos_none (Type const&);

      virtual void
      domainparticipant_qos (Type&);

      virtual void
      domainparticipant_qos (Type const&);

      virtual void
      domainparticipant_qos_pre (Type&);

      virtual void
      domainparticipant_qos_pre (Type const&);

      virtual void
      domainparticipant_qos_next (Type&);

      virtual void
      domainparticipant_qos_next (Type const&);

      virtual void
      domainparticipant_qos_post (Type&);

      virtual void
      domainparticipant_qos_post (Type const&);

      virtual void
      domainparticipant_qos_none (Type&);

      virtual void
      domainparticipant_qos_none (Type const&);

      virtual void
      publisher_qos (Type&);

      virtual void
      publisher_qos (Type const&);

      virtual void
      publisher_qos_pre (Type&);

      virtual void
      publisher_qos_pre (Type const&);

      virtual void
      publisher_qos_next (Type&);

      virtual void
      publisher_qos_next (Type const&);

      virtual void
      publisher_qos_post (Type&);

      virtual void
      publisher_qos_post (Type const&);

      virtual void
      publisher_qos_none (Type&);

      virtual void
      publisher_qos_none (Type const&);

      virtual void
      subscriber_qos (Type&);

      virtual void
      subscriber_qos (Type const&);

      virtual void
      subscriber_qos_pre (Type&);

      virtual void
      subscriber_qos_pre (Type const&);

      virtual void
      subscriber_qos_next (Type&);

      virtual void
      subscriber_qos_next (Type const&);

      virtual void
      subscriber_qos_post (Type&);

      virtual void
      subscriber_qos_post (Type const&);

      virtual void
      subscriber_qos_none (Type&);

      virtual void
      subscriber_qos_none (Type const&);

      virtual void
      name (Type&);

      virtual void
      name (Type const&);

      virtual void
      base_name (Type&);

      virtual void
      base_name (Type const&);

      virtual void
      base_name_none (Type&);

      virtual void
      base_name_none (Type const&);

      virtual void
      post (Type&);

      virtual void
      post (Type const&);
    };

    struct XML_QOS_Handler_Export qosProfile_seq : ::XMLSchema::Traversal::Traverser< ::dds::qosProfile_seq >
    {
      virtual void
      traverse (Type&);

      virtual void
      traverse (Type const&);

      virtual void
      pre (Type&);

      virtual void
      pre (Type const&);

      virtual void
      qos_profile (Type&);

      virtual void
      qos_profile (Type const&);

      virtual void
      qos_profile_pre (Type&);

      virtual void
      qos_profile_pre (Type const&);

      virtual void
      qos_profile_next (Type&);

      virtual void
      qos_profile_next (Type const&);

      virtual void
      qos_profile_post (Type&);

      virtual void
      qos_profile_post (Type const&);

      virtual void
      qos_profile_none (Type&);

      virtual void
      qos_profile_none (Type const&);

      virtual void
      post (Type&);

      virtual void
      post (Type const&);
    };
  }
}

#include "XMLSchema/Writer.hpp"

namespace dds
{
  namespace Writer
  {
    struct destinationOrderKind : Traversal::destinationOrderKind,
    virtual ::XSCRT::Writer< ACE_TCHAR >
    {
      destinationOrderKind (::XSCRT::XML::Element< ACE_TCHAR >&);

      virtual void
      traverse (Type &o)
      {
        this->traverse (const_cast <Type const &> (o));
      }

      virtual void
      traverse (Type const&);

      protected:
      destinationOrderKind ();
    };

    struct durabilityKind : Traversal::durabilityKind,
    virtual ::XSCRT::Writer< ACE_TCHAR >
    {
      durabilityKind (::XSCRT::XML::Element< ACE_TCHAR >&);

      virtual void
      traverse (Type &o)
      {
        this->traverse (const_cast <Type const &> (o));
      }

      virtual void
      traverse (Type const&);

      protected:
      durabilityKind ();
    };

    struct historyKind : Traversal::historyKind,
    virtual ::XSCRT::Writer< ACE_TCHAR >
    {
      historyKind (::XSCRT::XML::Element< ACE_TCHAR >&);

      virtual void
      traverse (Type &o)
      {
        this->traverse (const_cast <Type const &> (o));
      }

      virtual void
      traverse (Type const&);

      protected:
      historyKind ();
    };

    struct livelinessKind : Traversal::livelinessKind,
    virtual ::XSCRT::Writer< ACE_TCHAR >
    {
      livelinessKind (::XSCRT::XML::Element< ACE_TCHAR >&);

      virtual void
      traverse (Type &o)
      {
        this->traverse (const_cast <Type const &> (o));
      }

      virtual void
      traverse (Type const&);

      protected:
      livelinessKind ();
    };

    struct presentationAccessScopeKind : Traversal::presentationAccessScopeKind,
    virtual ::XSCRT::Writer< ACE_TCHAR >
    {
      presentationAccessScopeKind (::XSCRT::XML::Element< ACE_TCHAR >&);

      virtual void
      traverse (Type &o)
      {
        this->traverse (const_cast <Type const &> (o));
      }

      virtual void
      traverse (Type const&);

      protected:
      presentationAccessScopeKind ();
    };

    struct reliabilityKind : Traversal::reliabilityKind,
    virtual ::XSCRT::Writer< ACE_TCHAR >
    {
      reliabilityKind (::XSCRT::XML::Element< ACE_TCHAR >&);

      virtual void
      traverse (Type &o)
      {
        this->traverse (const_cast <Type const &> (o));
      }

      virtual void
      traverse (Type const&);

      protected:
      reliabilityKind ();
    };

    struct ownershipKind : Traversal::ownershipKind,
    virtual ::XSCRT::Writer< ACE_TCHAR >
    {
      ownershipKind (::XSCRT::XML::Element< ACE_TCHAR >&);

      virtual void
      traverse (Type &o)
      {
        this->traverse (const_cast <Type const &> (o));
      }

      virtual void
      traverse (Type const&);

      protected:
      ownershipKind ();
    };

    struct duration : Traversal::duration,
    virtual ::XSCRT::Writer< ACE_TCHAR >
    {
      typedef ::dds::duration Type;
      duration (::XSCRT::XML::Element< ACE_TCHAR >&);

      virtual void
      traverse (Type &o)
      {
        this->traverse (const_cast <Type const &> (o));
      }

      virtual void
      traverse (Type const&);

      virtual void
      sec (Type &o)
      {
        this->sec (const_cast <Type const &> (o));
      }

      virtual void
      sec (Type const&);

      virtual void
      nanosec (Type &o)
      {
        this->nanosec (const_cast <Type const &> (o));
      }

      virtual void
      nanosec (Type const&);

      protected:
      duration ();
    };

    struct stringSeq : Traversal::stringSeq,
    virtual ::XSCRT::Writer< ACE_TCHAR >
    {
      typedef ::dds::stringSeq Type;
      stringSeq (::XSCRT::XML::Element< ACE_TCHAR >&);

      virtual void
      traverse (Type &o)
      {
        this->traverse (const_cast <Type const &> (o));
      }

      virtual void
      traverse (Type const&);

      virtual void
      element_pre (Type &o)
      {
        this->element_pre (const_cast <Type const &> (o));
      }

      virtual void
      element_pre (Type const&);

      virtual void
      element_next (Type &o)
      {
        this->element_next (const_cast <Type const &> (o));
      }

      virtual void
      element_next (Type const&);

      virtual void
      element_post (Type &o)
      {
        this->element_post (const_cast <Type const &> (o));
      }

      virtual void
      element_post (Type const&);

      protected:
      stringSeq ();
    };

    struct deadlineQosPolicy : Traversal::deadlineQosPolicy,
    virtual ::XSCRT::Writer< ACE_TCHAR >
    {
      typedef ::dds::deadlineQosPolicy Type;
      deadlineQosPolicy (::XSCRT::XML::Element< ACE_TCHAR >&);

      virtual void
      traverse (Type &o)
      {
        this->traverse (const_cast <Type const &> (o));
      }

      virtual void
      traverse (Type const&);

      virtual void
      period (Type &o)
      {
        this->period (const_cast <Type const &> (o));
      }

      virtual void
      period (Type const&);

      protected:
      deadlineQosPolicy ();
    };

    struct destinationOrderQosPolicy : Traversal::destinationOrderQosPolicy,
    virtual ::XSCRT::Writer< ACE_TCHAR >
    {
      typedef ::dds::destinationOrderQosPolicy Type;
      destinationOrderQosPolicy (::XSCRT::XML::Element< ACE_TCHAR >&);

      virtual void
      traverse (Type &o)
      {
        this->traverse (const_cast <Type const &> (o));
      }

      virtual void
      traverse (Type const&);

      virtual void
      kind (Type &o)
      {
        this->kind (const_cast <Type const &> (o));
      }

      virtual void
      kind (Type const&);

      protected:
      destinationOrderQosPolicy ();
    };

    struct durabilityQosPolicy : Traversal::durabilityQosPolicy,
    virtual ::XSCRT::Writer< ACE_TCHAR >
    {
      typedef ::dds::durabilityQosPolicy Type;
      durabilityQosPolicy (::XSCRT::XML::Element< ACE_TCHAR >&);

      virtual void
      traverse (Type &o)
      {
        this->traverse (const_cast <Type const &> (o));
      }

      virtual void
      traverse (Type const&);

      virtual void
      kind (Type &o)
      {
        this->kind (const_cast <Type const &> (o));
      }

      virtual void
      kind (Type const&);

      protected:
      durabilityQosPolicy ();
    };

    struct durabilityServiceQosPolicy : Traversal::durabilityServiceQosPolicy,
    virtual ::XSCRT::Writer< ACE_TCHAR >
    {
      typedef ::dds::durabilityServiceQosPolicy Type;
      durabilityServiceQosPolicy (::XSCRT::XML::Element< ACE_TCHAR >&);

      virtual void
      traverse (Type &o)
      {
        this->traverse (const_cast <Type const &> (o));
      }

      virtual void
      traverse (Type const&);

      virtual void
      service_cleanup_delay (Type &o)
      {
        this->service_cleanup_delay (const_cast <Type const &> (o));
      }

      virtual void
      service_cleanup_delay (Type const&);

      virtual void
      history_kind (Type &o)
      {
        this->history_kind (const_cast <Type const &> (o));
      }

      virtual void
      history_kind (Type const&);

      virtual void
      history_depth (Type &o)
      {
        this->history_depth (const_cast <Type const &> (o));
      }

      virtual void
      history_depth (Type const&);

      virtual void
      max_samples (Type &o)
      {
        this->max_samples (const_cast <Type const &> (o));
      }

      virtual void
      max_samples (Type const&);

      virtual void
      max_instances (Type &o)
      {
        this->max_instances (const_cast <Type const &> (o));
      }

      virtual void
      max_instances (Type const&);

      virtual void
      max_samples_per_instance (Type &o)
      {
        this->max_samples_per_instance (const_cast <Type const &> (o));
      }

      virtual void
      max_samples_per_instance (Type const&);

      protected:
      durabilityServiceQosPolicy ();
    };

    struct entityFactoryQosPolicy : Traversal::entityFactoryQosPolicy,
    virtual ::XSCRT::Writer< ACE_TCHAR >
    {
      typedef ::dds::entityFactoryQosPolicy Type;
      entityFactoryQosPolicy (::XSCRT::XML::Element< ACE_TCHAR >&);

      virtual void
      traverse (Type &o)
      {
        this->traverse (const_cast <Type const &> (o));
      }

      virtual void
      traverse (Type const&);

      virtual void
      autoenable_created_entities (Type &o)
      {
        this->autoenable_created_entities (const_cast <Type const &> (o));
      }

      virtual void
      autoenable_created_entities (Type const&);

      protected:
      entityFactoryQosPolicy ();
    };

    struct groupDataQosPolicy : Traversal::groupDataQosPolicy,
    virtual ::XSCRT::Writer< ACE_TCHAR >
    {
      typedef ::dds::groupDataQosPolicy Type;
      groupDataQosPolicy (::XSCRT::XML::Element< ACE_TCHAR >&);

      virtual void
      traverse (Type &o)
      {
        this->traverse (const_cast <Type const &> (o));
      }

      virtual void
      traverse (Type const&);

      virtual void
      value (Type &o)
      {
        this->value (const_cast <Type const &> (o));
      }

      virtual void
      value (Type const&);

      protected:
      groupDataQosPolicy ();
    };

    struct historyQosPolicy : Traversal::historyQosPolicy,
    virtual ::XSCRT::Writer< ACE_TCHAR >
    {
      typedef ::dds::historyQosPolicy Type;
      historyQosPolicy (::XSCRT::XML::Element< ACE_TCHAR >&);

      virtual void
      traverse (Type &o)
      {
        this->traverse (const_cast <Type const &> (o));
      }

      virtual void
      traverse (Type const&);

      virtual void
      kind (Type &o)
      {
        this->kind (const_cast <Type const &> (o));
      }

      virtual void
      kind (Type const&);

      virtual void
      depth (Type &o)
      {
        this->depth (const_cast <Type const &> (o));
      }

      virtual void
      depth (Type const&);

      protected:
      historyQosPolicy ();
    };

    struct latencyBudgetQosPolicy : Traversal::latencyBudgetQosPolicy,
    virtual ::XSCRT::Writer< ACE_TCHAR >
    {
      typedef ::dds::latencyBudgetQosPolicy Type;
      latencyBudgetQosPolicy (::XSCRT::XML::Element< ACE_TCHAR >&);

      virtual void
      traverse (Type &o)
      {
        this->traverse (const_cast <Type const &> (o));
      }

      virtual void
      traverse (Type const&);

      virtual void
      duration (Type &o)
      {
        this->duration (const_cast <Type const &> (o));
      }

      virtual void
      duration (Type const&);

      protected:
      latencyBudgetQosPolicy ();
    };

    struct lifespanQosPolicy : Traversal::lifespanQosPolicy,
    virtual ::XSCRT::Writer< ACE_TCHAR >
    {
      typedef ::dds::lifespanQosPolicy Type;
      lifespanQosPolicy (::XSCRT::XML::Element< ACE_TCHAR >&);

      virtual void
      traverse (Type &o)
      {
        this->traverse (const_cast <Type const &> (o));
      }

      virtual void
      traverse (Type const&);

      virtual void
      duration (Type &o)
      {
        this->duration (const_cast <Type const &> (o));
      }

      virtual void
      duration (Type const&);

      protected:
      lifespanQosPolicy ();
    };

    struct livelinessQosPolicy : Traversal::livelinessQosPolicy,
    virtual ::XSCRT::Writer< ACE_TCHAR >
    {
      typedef ::dds::livelinessQosPolicy Type;
      livelinessQosPolicy (::XSCRT::XML::Element< ACE_TCHAR >&);

      virtual void
      traverse (Type &o)
      {
        this->traverse (const_cast <Type const &> (o));
      }

      virtual void
      traverse (Type const&);

      virtual void
      kind (Type &o)
      {
        this->kind (const_cast <Type const &> (o));
      }

      virtual void
      kind (Type const&);

      virtual void
      lease_duration (Type &o)
      {
        this->lease_duration (const_cast <Type const &> (o));
      }

      virtual void
      lease_duration (Type const&);

      protected:
      livelinessQosPolicy ();
    };

    struct ownershipQosPolicy : Traversal::ownershipQosPolicy,
    virtual ::XSCRT::Writer< ACE_TCHAR >
    {
      typedef ::dds::ownershipQosPolicy Type;
      ownershipQosPolicy (::XSCRT::XML::Element< ACE_TCHAR >&);

      virtual void
      traverse (Type &o)
      {
        this->traverse (const_cast <Type const &> (o));
      }

      virtual void
      traverse (Type const&);

      virtual void
      kind (Type &o)
      {
        this->kind (const_cast <Type const &> (o));
      }

      virtual void
      kind (Type const&);

      protected:
      ownershipQosPolicy ();
    };

    struct ownershipStrengthQosPolicy : Traversal::ownershipStrengthQosPolicy,
    virtual ::XSCRT::Writer< ACE_TCHAR >
    {
      typedef ::dds::ownershipStrengthQosPolicy Type;
      ownershipStrengthQosPolicy (::XSCRT::XML::Element< ACE_TCHAR >&);

      virtual void
      traverse (Type &o)
      {
        this->traverse (const_cast <Type const &> (o));
      }

      virtual void
      traverse (Type const&);

      virtual void
      value (Type &o)
      {
        this->value (const_cast <Type const &> (o));
      }

      virtual void
      value (Type const&);

      protected:
      ownershipStrengthQosPolicy ();
    };

    struct partitionQosPolicy : Traversal::partitionQosPolicy,
    virtual ::XSCRT::Writer< ACE_TCHAR >
    {
      typedef ::dds::partitionQosPolicy Type;
      partitionQosPolicy (::XSCRT::XML::Element< ACE_TCHAR >&);

      virtual void
      traverse (Type &o)
      {
        this->traverse (const_cast <Type const &> (o));
      }

      virtual void
      traverse (Type const&);

      virtual void
      name (Type &o)
      {
        this->name (const_cast <Type const &> (o));
      }

      virtual void
      name (Type const&);

      protected:
      partitionQosPolicy ();
    };

    struct presentationQosPolicy : Traversal::presentationQosPolicy,
    virtual ::XSCRT::Writer< ACE_TCHAR >
    {
      typedef ::dds::presentationQosPolicy Type;
      presentationQosPolicy (::XSCRT::XML::Element< ACE_TCHAR >&);

      virtual void
      traverse (Type &o)
      {
        this->traverse (const_cast <Type const &> (o));
      }

      virtual void
      traverse (Type const&);

      virtual void
      access_scope (Type &o)
      {
        this->access_scope (const_cast <Type const &> (o));
      }

      virtual void
      access_scope (Type const&);

      virtual void
      coherent_access (Type &o)
      {
        this->coherent_access (const_cast <Type const &> (o));
      }

      virtual void
      coherent_access (Type const&);

      virtual void
      ordered_access (Type &o)
      {
        this->ordered_access (const_cast <Type const &> (o));
      }

      virtual void
      ordered_access (Type const&);

      protected:
      presentationQosPolicy ();
    };

    struct readerDataLifecycleQosPolicy : Traversal::readerDataLifecycleQosPolicy,
    virtual ::XSCRT::Writer< ACE_TCHAR >
    {
      typedef ::dds::readerDataLifecycleQosPolicy Type;
      readerDataLifecycleQosPolicy (::XSCRT::XML::Element< ACE_TCHAR >&);

      virtual void
      traverse (Type &o)
      {
        this->traverse (const_cast <Type const &> (o));
      }

      virtual void
      traverse (Type const&);

      virtual void
      autopurge_nowriter_samples_delay (Type &o)
      {
        this->autopurge_nowriter_samples_delay (const_cast <Type const &> (o));
      }

      virtual void
      autopurge_nowriter_samples_delay (Type const&);

      virtual void
      autopurge_disposed_samples_delay (Type &o)
      {
        this->autopurge_disposed_samples_delay (const_cast <Type const &> (o));
      }

      virtual void
      autopurge_disposed_samples_delay (Type const&);

      protected:
      readerDataLifecycleQosPolicy ();
    };

    struct reliabilityQosPolicy : Traversal::reliabilityQosPolicy,
    virtual ::XSCRT::Writer< ACE_TCHAR >
    {
      typedef ::dds::reliabilityQosPolicy Type;
      reliabilityQosPolicy (::XSCRT::XML::Element< ACE_TCHAR >&);

      virtual void
      traverse (Type &o)
      {
        this->traverse (const_cast <Type const &> (o));
      }

      virtual void
      traverse (Type const&);

      virtual void
      kind (Type &o)
      {
        this->kind (const_cast <Type const &> (o));
      }

      virtual void
      kind (Type const&);

      virtual void
      max_blocking_time (Type &o)
      {
        this->max_blocking_time (const_cast <Type const &> (o));
      }

      virtual void
      max_blocking_time (Type const&);

      protected:
      reliabilityQosPolicy ();
    };

    struct resourceLimitsQosPolicy : Traversal::resourceLimitsQosPolicy,
    virtual ::XSCRT::Writer< ACE_TCHAR >
    {
      typedef ::dds::resourceLimitsQosPolicy Type;
      resourceLimitsQosPolicy (::XSCRT::XML::Element< ACE_TCHAR >&);

      virtual void
      traverse (Type &o)
      {
        this->traverse (const_cast <Type const &> (o));
      }

      virtual void
      traverse (Type const&);

      virtual void
      max_samples (Type &o)
      {
        this->max_samples (const_cast <Type const &> (o));
      }

      virtual void
      max_samples (Type const&);

      virtual void
      max_instances (Type &o)
      {
        this->max_instances (const_cast <Type const &> (o));
      }

      virtual void
      max_instances (Type const&);

      virtual void
      max_samples_per_instance (Type &o)
      {
        this->max_samples_per_instance (const_cast <Type const &> (o));
      }

      virtual void
      max_samples_per_instance (Type const&);

      virtual void
      initial_samples (Type &o)
      {
        this->initial_samples (const_cast <Type const &> (o));
      }

      virtual void
      initial_samples (Type const&);

      virtual void
      initial_instances (Type &o)
      {
        this->initial_instances (const_cast <Type const &> (o));
      }

      virtual void
      initial_instances (Type const&);

      protected:
      resourceLimitsQosPolicy ();
    };

    struct timeBasedFilterQosPolicy : Traversal::timeBasedFilterQosPolicy,
    virtual ::XSCRT::Writer< ACE_TCHAR >
    {
      typedef ::dds::timeBasedFilterQosPolicy Type;
      timeBasedFilterQosPolicy (::XSCRT::XML::Element< ACE_TCHAR >&);

      virtual void
      traverse (Type &o)
      {
        this->traverse (const_cast <Type const &> (o));
      }

      virtual void
      traverse (Type const&);

      virtual void
      minimum_separation (Type &o)
      {
        this->minimum_separation (const_cast <Type const &> (o));
      }

      virtual void
      minimum_separation (Type const&);

      protected:
      timeBasedFilterQosPolicy ();
    };

    struct topicDataQosPolicy : Traversal::topicDataQosPolicy,
    virtual ::XSCRT::Writer< ACE_TCHAR >
    {
      typedef ::dds::topicDataQosPolicy Type;
      topicDataQosPolicy (::XSCRT::XML::Element< ACE_TCHAR >&);

      virtual void
      traverse (Type &o)
      {
        this->traverse (const_cast <Type const &> (o));
      }

      virtual void
      traverse (Type const&);

      virtual void
      value (Type &o)
      {
        this->value (const_cast <Type const &> (o));
      }

      virtual void
      value (Type const&);

      protected:
      topicDataQosPolicy ();
    };

    struct transportPriorityQosPolicy : Traversal::transportPriorityQosPolicy,
    virtual ::XSCRT::Writer< ACE_TCHAR >
    {
      typedef ::dds::transportPriorityQosPolicy Type;
      transportPriorityQosPolicy (::XSCRT::XML::Element< ACE_TCHAR >&);

      virtual void
      traverse (Type &o)
      {
        this->traverse (const_cast <Type const &> (o));
      }

      virtual void
      traverse (Type const&);

      virtual void
      value (Type &o)
      {
        this->value (const_cast <Type const &> (o));
      }

      virtual void
      value (Type const&);

      protected:
      transportPriorityQosPolicy ();
    };

    struct userDataQosPolicy : Traversal::userDataQosPolicy,
    virtual ::XSCRT::Writer< ACE_TCHAR >
    {
      typedef ::dds::userDataQosPolicy Type;
      userDataQosPolicy (::XSCRT::XML::Element< ACE_TCHAR >&);

      virtual void
      traverse (Type &o)
      {
        this->traverse (const_cast <Type const &> (o));
      }

      virtual void
      traverse (Type const&);

      virtual void
      value (Type &o)
      {
        this->value (const_cast <Type const &> (o));
      }

      virtual void
      value (Type const&);

      protected:
      userDataQosPolicy ();
    };

    struct writerDataLifecycleQosPolicy : Traversal::writerDataLifecycleQosPolicy,
    virtual ::XSCRT::Writer< ACE_TCHAR >
    {
      typedef ::dds::writerDataLifecycleQosPolicy Type;
      writerDataLifecycleQosPolicy (::XSCRT::XML::Element< ACE_TCHAR >&);

      virtual void
      traverse (Type &o)
      {
        this->traverse (const_cast <Type const &> (o));
      }

      virtual void
      traverse (Type const&);

      virtual void
      autodispose_unregistered_instances (Type &o)
      {
        this->autodispose_unregistered_instances (const_cast <Type const &> (o));
      }

      virtual void
      autodispose_unregistered_instances (Type const&);

      protected:
      writerDataLifecycleQosPolicy ();
    };

    struct domainparticipantQos : Traversal::domainparticipantQos,
    virtual ::XSCRT::Writer< ACE_TCHAR >
    {
      typedef ::dds::domainparticipantQos Type;
      domainparticipantQos (::XSCRT::XML::Element< ACE_TCHAR >&);

      virtual void
      traverse (Type &o)
      {
        this->traverse (const_cast <Type const &> (o));
      }

      virtual void
      traverse (Type const&);

      virtual void
      user_data (Type &o)
      {
        this->user_data (const_cast <Type const &> (o));
      }

      virtual void
      user_data (Type const&);

      virtual void
      entity_factory (Type &o)
      {
        this->entity_factory (const_cast <Type const &> (o));
      }

      virtual void
      entity_factory (Type const&);

      virtual void
      name (Type &o)
      {
        this->name (const_cast <Type const &> (o));
      }

      virtual void
      name (Type const&);

      virtual void
      base_name (Type &o)
      {
        this->base_name (const_cast <Type const &> (o));
      }

      virtual void
      base_name (Type const&);

      virtual void
      topic_filter (Type &o)
      {
        this->topic_filter (const_cast <Type const &> (o));
      }

      virtual void
      topic_filter (Type const&);

      protected:
      domainparticipantQos ();
    };

    struct publisherQos : Traversal::publisherQos,
    virtual ::XSCRT::Writer< ACE_TCHAR >
    {
      typedef ::dds::publisherQos Type;
      publisherQos (::XSCRT::XML::Element< ACE_TCHAR >&);

      virtual void
      traverse (Type &o)
      {
        this->traverse (const_cast <Type const &> (o));
      }

      virtual void
      traverse (Type const&);

      virtual void
      presentation (Type &o)
      {
        this->presentation (const_cast <Type const &> (o));
      }

      virtual void
      presentation (Type const&);

      virtual void
      partition (Type &o)
      {
        this->partition (const_cast <Type const &> (o));
      }

      virtual void
      partition (Type const&);

      virtual void
      group_data (Type &o)
      {
        this->group_data (const_cast <Type const &> (o));
      }

      virtual void
      group_data (Type const&);

      virtual void
      entity_factory (Type &o)
      {
        this->entity_factory (const_cast <Type const &> (o));
      }

      virtual void
      entity_factory (Type const&);

      virtual void
      name (Type &o)
      {
        this->name (const_cast <Type const &> (o));
      }

      virtual void
      name (Type const&);

      virtual void
      base_name (Type &o)
      {
        this->base_name (const_cast <Type const &> (o));
      }

      virtual void
      base_name (Type const&);

      virtual void
      topic_filter (Type &o)
      {
        this->topic_filter (const_cast <Type const &> (o));
      }

      virtual void
      topic_filter (Type const&);

      protected:
      publisherQos ();
    };

    struct subscriberQos : Traversal::subscriberQos,
    virtual ::XSCRT::Writer< ACE_TCHAR >
    {
      typedef ::dds::subscriberQos Type;
      subscriberQos (::XSCRT::XML::Element< ACE_TCHAR >&);

      virtual void
      traverse (Type &o)
      {
        this->traverse (const_cast <Type const &> (o));
      }

      virtual void
      traverse (Type const&);

      virtual void
      presentation (Type &o)
      {
        this->presentation (const_cast <Type const &> (o));
      }

      virtual void
      presentation (Type const&);

      virtual void
      partition (Type &o)
      {
        this->partition (const_cast <Type const &> (o));
      }

      virtual void
      partition (Type const&);

      virtual void
      group_data (Type &o)
      {
        this->group_data (const_cast <Type const &> (o));
      }

      virtual void
      group_data (Type const&);

      virtual void
      entity_factory (Type &o)
      {
        this->entity_factory (const_cast <Type const &> (o));
      }

      virtual void
      entity_factory (Type const&);

      virtual void
      name (Type &o)
      {
        this->name (const_cast <Type const &> (o));
      }

      virtual void
      name (Type const&);

      virtual void
      base_name (Type &o)
      {
        this->base_name (const_cast <Type const &> (o));
      }

      virtual void
      base_name (Type const&);

      virtual void
      topic_filter (Type &o)
      {
        this->topic_filter (const_cast <Type const &> (o));
      }

      virtual void
      topic_filter (Type const&);

      protected:
      subscriberQos ();
    };

    struct topicQos : Traversal::topicQos,
    virtual ::XSCRT::Writer< ACE_TCHAR >
    {
      typedef ::dds::topicQos Type;
      topicQos (::XSCRT::XML::Element< ACE_TCHAR >&);

      virtual void
      traverse (Type &o)
      {
        this->traverse (const_cast <Type const &> (o));
      }

      virtual void
      traverse (Type const&);

      virtual void
      topic_data (Type &o)
      {
        this->topic_data (const_cast <Type const &> (o));
      }

      virtual void
      topic_data (Type const&);

      virtual void
      durability (Type &o)
      {
        this->durability (const_cast <Type const &> (o));
      }

      virtual void
      durability (Type const&);

      virtual void
      durability_service (Type &o)
      {
        this->durability_service (const_cast <Type const &> (o));
      }

      virtual void
      durability_service (Type const&);

      virtual void
      deadline (Type &o)
      {
        this->deadline (const_cast <Type const &> (o));
      }

      virtual void
      deadline (Type const&);

      virtual void
      latency_budget (Type &o)
      {
        this->latency_budget (const_cast <Type const &> (o));
      }

      virtual void
      latency_budget (Type const&);

      virtual void
      liveliness (Type &o)
      {
        this->liveliness (const_cast <Type const &> (o));
      }

      virtual void
      liveliness (Type const&);

      virtual void
      reliability (Type &o)
      {
        this->reliability (const_cast <Type const &> (o));
      }

      virtual void
      reliability (Type const&);

      virtual void
      destination_order (Type &o)
      {
        this->destination_order (const_cast <Type const &> (o));
      }

      virtual void
      destination_order (Type const&);

      virtual void
      history (Type &o)
      {
        this->history (const_cast <Type const &> (o));
      }

      virtual void
      history (Type const&);

      virtual void
      resource_limits (Type &o)
      {
        this->resource_limits (const_cast <Type const &> (o));
      }

      virtual void
      resource_limits (Type const&);

      virtual void
      transport_priority (Type &o)
      {
        this->transport_priority (const_cast <Type const &> (o));
      }

      virtual void
      transport_priority (Type const&);

      virtual void
      lifespan (Type &o)
      {
        this->lifespan (const_cast <Type const &> (o));
      }

      virtual void
      lifespan (Type const&);

      virtual void
      ownership (Type &o)
      {
        this->ownership (const_cast <Type const &> (o));
      }

      virtual void
      ownership (Type const&);

      virtual void
      name (Type &o)
      {
        this->name (const_cast <Type const &> (o));
      }

      virtual void
      name (Type const&);

      virtual void
      base_name (Type &o)
      {
        this->base_name (const_cast <Type const &> (o));
      }

      virtual void
      base_name (Type const&);

      virtual void
      topic_filter (Type &o)
      {
        this->topic_filter (const_cast <Type const &> (o));
      }

      virtual void
      topic_filter (Type const&);

      protected:
      topicQos ();
    };

    struct datareaderQos : Traversal::datareaderQos,
    virtual ::XSCRT::Writer< ACE_TCHAR >
    {
      typedef ::dds::datareaderQos Type;
      datareaderQos (::XSCRT::XML::Element< ACE_TCHAR >&);

      virtual void
      traverse (Type &o)
      {
        this->traverse (const_cast <Type const &> (o));
      }

      virtual void
      traverse (Type const&);

      virtual void
      durability (Type &o)
      {
        this->durability (const_cast <Type const &> (o));
      }

      virtual void
      durability (Type const&);

      virtual void
      deadline (Type &o)
      {
        this->deadline (const_cast <Type const &> (o));
      }

      virtual void
      deadline (Type const&);

      virtual void
      latency_budget (Type &o)
      {
        this->latency_budget (const_cast <Type const &> (o));
      }

      virtual void
      latency_budget (Type const&);

      virtual void
      liveliness (Type &o)
      {
        this->liveliness (const_cast <Type const &> (o));
      }

      virtual void
      liveliness (Type const&);

      virtual void
      reliability (Type &o)
      {
        this->reliability (const_cast <Type const &> (o));
      }

      virtual void
      reliability (Type const&);

      virtual void
      destination_order (Type &o)
      {
        this->destination_order (const_cast <Type const &> (o));
      }

      virtual void
      destination_order (Type const&);

      virtual void
      history (Type &o)
      {
        this->history (const_cast <Type const &> (o));
      }

      virtual void
      history (Type const&);

      virtual void
      resource_limits (Type &o)
      {
        this->resource_limits (const_cast <Type const &> (o));
      }

      virtual void
      resource_limits (Type const&);

      virtual void
      user_data (Type &o)
      {
        this->user_data (const_cast <Type const &> (o));
      }

      virtual void
      user_data (Type const&);

      virtual void
      ownership (Type &o)
      {
        this->ownership (const_cast <Type const &> (o));
      }

      virtual void
      ownership (Type const&);

      virtual void
      time_based_filter (Type &o)
      {
        this->time_based_filter (const_cast <Type const &> (o));
      }

      virtual void
      time_based_filter (Type const&);

      virtual void
      reader_data_lifecycle (Type &o)
      {
        this->reader_data_lifecycle (const_cast <Type const &> (o));
      }

      virtual void
      reader_data_lifecycle (Type const&);

      virtual void
      name (Type &o)
      {
        this->name (const_cast <Type const &> (o));
      }

      virtual void
      name (Type const&);

      virtual void
      base_name (Type &o)
      {
        this->base_name (const_cast <Type const &> (o));
      }

      virtual void
      base_name (Type const&);

      virtual void
      topic_filter (Type &o)
      {
        this->topic_filter (const_cast <Type const &> (o));
      }

      virtual void
      topic_filter (Type const&);

      protected:
      datareaderQos ();
    };

    struct datawriterQos : Traversal::datawriterQos,
    virtual ::XSCRT::Writer< ACE_TCHAR >
    {
      typedef ::dds::datawriterQos Type;
      datawriterQos (::XSCRT::XML::Element< ACE_TCHAR >&);

      virtual void
      traverse (Type &o)
      {
        this->traverse (const_cast <Type const &> (o));
      }

      virtual void
      traverse (Type const&);

      virtual void
      durability (Type &o)
      {
        this->durability (const_cast <Type const &> (o));
      }

      virtual void
      durability (Type const&);

      virtual void
      durability_service (Type &o)
      {
        this->durability_service (const_cast <Type const &> (o));
      }

      virtual void
      durability_service (Type const&);

      virtual void
      deadline (Type &o)
      {
        this->deadline (const_cast <Type const &> (o));
      }

      virtual void
      deadline (Type const&);

      virtual void
      latency_budget (Type &o)
      {
        this->latency_budget (const_cast <Type const &> (o));
      }

      virtual void
      latency_budget (Type const&);

      virtual void
      liveliness (Type &o)
      {
        this->liveliness (const_cast <Type const &> (o));
      }

      virtual void
      liveliness (Type const&);

      virtual void
      reliability (Type &o)
      {
        this->reliability (const_cast <Type const &> (o));
      }

      virtual void
      reliability (Type const&);

      virtual void
      destination_order (Type &o)
      {
        this->destination_order (const_cast <Type const &> (o));
      }

      virtual void
      destination_order (Type const&);

      virtual void
      history (Type &o)
      {
        this->history (const_cast <Type const &> (o));
      }

      virtual void
      history (Type const&);

      virtual void
      resource_limits (Type &o)
      {
        this->resource_limits (const_cast <Type const &> (o));
      }

      virtual void
      resource_limits (Type const&);

      virtual void
      transport_priority (Type &o)
      {
        this->transport_priority (const_cast <Type const &> (o));
      }

      virtual void
      transport_priority (Type const&);

      virtual void
      lifespan (Type &o)
      {
        this->lifespan (const_cast <Type const &> (o));
      }

      virtual void
      lifespan (Type const&);

      virtual void
      user_data (Type &o)
      {
        this->user_data (const_cast <Type const &> (o));
      }

      virtual void
      user_data (Type const&);

      virtual void
      ownership (Type &o)
      {
        this->ownership (const_cast <Type const &> (o));
      }

      virtual void
      ownership (Type const&);

      virtual void
      ownership_strength (Type &o)
      {
        this->ownership_strength (const_cast <Type const &> (o));
      }

      virtual void
      ownership_strength (Type const&);

      virtual void
      writer_data_lifecycle (Type &o)
      {
        this->writer_data_lifecycle (const_cast <Type const &> (o));
      }

      virtual void
      writer_data_lifecycle (Type const&);

      virtual void
      name (Type &o)
      {
        this->name (const_cast <Type const &> (o));
      }

      virtual void
      name (Type const&);

      virtual void
      base_name (Type &o)
      {
        this->base_name (const_cast <Type const &> (o));
      }

      virtual void
      base_name (Type const&);

      virtual void
      topic_filter (Type &o)
      {
        this->topic_filter (const_cast <Type const &> (o));
      }

      virtual void
      topic_filter (Type const&);

      protected:
      datawriterQos ();
    };

    struct qosProfile : Traversal::qosProfile,
    virtual ::XSCRT::Writer< ACE_TCHAR >
    {
      typedef ::dds::qosProfile Type;
      qosProfile (::XSCRT::XML::Element< ACE_TCHAR >&);

      virtual void
      traverse (Type &o)
      {
        this->traverse (const_cast <Type const &> (o));
      }

      virtual void
      traverse (Type const&);

      virtual void
      datareader_qos_pre (Type &o)
      {
        this->datareader_qos_pre (const_cast <Type const &> (o));
      }

      virtual void
      datareader_qos_pre (Type const&);

      virtual void
      datareader_qos_next (Type &o)
      {
        this->datareader_qos_next (const_cast <Type const &> (o));
      }

      virtual void
      datareader_qos_next (Type const&);

      virtual void
      datareader_qos_post (Type &o)
      {
        this->datareader_qos_post (const_cast <Type const &> (o));
      }

      virtual void
      datareader_qos_post (Type const&);

      virtual void
      datawriter_qos_pre (Type &o)
      {
        this->datawriter_qos_pre (const_cast <Type const &> (o));
      }

      virtual void
      datawriter_qos_pre (Type const&);

      virtual void
      datawriter_qos_next (Type &o)
      {
        this->datawriter_qos_next (const_cast <Type const &> (o));
      }

      virtual void
      datawriter_qos_next (Type const&);

      virtual void
      datawriter_qos_post (Type &o)
      {
        this->datawriter_qos_post (const_cast <Type const &> (o));
      }

      virtual void
      datawriter_qos_post (Type const&);

      virtual void
      topic_qos_pre (Type &o)
      {
        this->topic_qos_pre (const_cast <Type const &> (o));
      }

      virtual void
      topic_qos_pre (Type const&);

      virtual void
      topic_qos_next (Type &o)
      {
        this->topic_qos_next (const_cast <Type const &> (o));
      }

      virtual void
      topic_qos_next (Type const&);

      virtual void
      topic_qos_post (Type &o)
      {
        this->topic_qos_post (const_cast <Type const &> (o));
      }

      virtual void
      topic_qos_post (Type const&);

      virtual void
      domainparticipant_qos_pre (Type &o)
      {
        this->domainparticipant_qos_pre (const_cast <Type const &> (o));
      }

      virtual void
      domainparticipant_qos_pre (Type const&);

      virtual void
      domainparticipant_qos_next (Type &o)
      {
        this->domainparticipant_qos_next (const_cast <Type const &> (o));
      }

      virtual void
      domainparticipant_qos_next (Type const&);

      virtual void
      domainparticipant_qos_post (Type &o)
      {
        this->domainparticipant_qos_post (const_cast <Type const &> (o));
      }

      virtual void
      domainparticipant_qos_post (Type const&);

      virtual void
      publisher_qos_pre (Type &o)
      {
        this->publisher_qos_pre (const_cast <Type const &> (o));
      }

      virtual void
      publisher_qos_pre (Type const&);

      virtual void
      publisher_qos_next (Type &o)
      {
        this->publisher_qos_next (const_cast <Type const &> (o));
      }

      virtual void
      publisher_qos_next (Type const&);

      virtual void
      publisher_qos_post (Type &o)
      {
        this->publisher_qos_post (const_cast <Type const &> (o));
      }

      virtual void
      publisher_qos_post (Type const&);

      virtual void
      subscriber_qos_pre (Type &o)
      {
        this->subscriber_qos_pre (const_cast <Type const &> (o));
      }

      virtual void
      subscriber_qos_pre (Type const&);

      virtual void
      subscriber_qos_next (Type &o)
      {
        this->subscriber_qos_next (const_cast <Type const &> (o));
      }

      virtual void
      subscriber_qos_next (Type const&);

      virtual void
      subscriber_qos_post (Type &o)
      {
        this->subscriber_qos_post (const_cast <Type const &> (o));
      }

      virtual void
      subscriber_qos_post (Type const&);

      virtual void
      name (Type &o)
      {
        this->name (const_cast <Type const &> (o));
      }

      virtual void
      name (Type const&);

      virtual void
      base_name (Type &o)
      {
        this->base_name (const_cast <Type const &> (o));
      }

      virtual void
      base_name (Type const&);

      protected:
      qosProfile ();
    };

    struct qosProfile_seq : Traversal::qosProfile_seq,
    virtual ::XSCRT::Writer< ACE_TCHAR >
    {
      typedef ::dds::qosProfile_seq Type;
      qosProfile_seq (::XSCRT::XML::Element< ACE_TCHAR >&);

      virtual void
      traverse (Type &o)
      {
        this->traverse (const_cast <Type const &> (o));
      }

      virtual void
      traverse (Type const&);

      virtual void
      qos_profile_pre (Type &o)
      {
        this->qos_profile_pre (const_cast <Type const &> (o));
      }

      virtual void
      qos_profile_pre (Type const&);

      virtual void
      qos_profile_next (Type &o)
      {
        this->qos_profile_next (const_cast <Type const &> (o));
      }

      virtual void
      qos_profile_next (Type const&);

      virtual void
      qos_profile_post (Type &o)
      {
        this->qos_profile_post (const_cast <Type const &> (o));
      }

      virtual void
      qos_profile_post (Type const&);

      protected:
      qosProfile_seq ();
    };
  }
}

namespace dds
{
  namespace writer
  {
    XML_QOS_Handler_Export
    void
    dds (::dds::qosProfile_seq const&, xercesc::DOMDocument*);
  }
}

#endif // DDS_QOS_HPP
