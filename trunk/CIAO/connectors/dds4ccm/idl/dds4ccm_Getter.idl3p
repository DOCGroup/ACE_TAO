// $Id$

/**
 * @file dds4CCM_Getter.idl3p
 *
 */

#ifndef DDS4CCM_Getter_IDL3P
#define DDS4CCM_Getter_IDL3P

#include "dds4ccm/idl/dds4ccm_Base.idl3"

module CCM_DDS
{
  interface Getter<typename T> {
    typedef sequence<T> T$Seq;
    boolean get_all (out T$Seq instances, out ReadInfoSeq infos)
      raises (InternalError);
    boolean get_all_history (out T$Seq instances, out ReadInfoSeq infos)
      raises (InternalError);
    boolean get_one (inout T an_instance, out ReadInfo info)
      raises (NonExistent,
              InternalError);
    boolean get_one_history (in T an_instance,
                             out T$Seq instances, out ReadInfoSeq infos)
      raises (NonExistent,
              InternalError);
    boolean get_next (out T an_instance, out ReadInfo info)
      raises (InternalError);
    attribute QueryFilter filter
    setraises (BadParameter);
    attribute DDS::Duration_t time_out;
    //  behaviour
    //  - get operations are performed with the following parameters
    //  - NO_READ
    //  - NEW or NOT_NEW
    //  - ALIVE or NOT_ALIVE
    //  - through the query as specified in the filter ("" means no query)
    //  - within the time limit specified in time_out
    //  - all operations returns TRUE if data are provided,
    //      FALSE if time-out occurred
    //  - data returned:
    //    - get_all returns for all the instances their last sample
    //    - get_all_history returns all the samples of all instances
    //    - get_one returns the last sample of the given instance
    //    - get_one_history returns all the samples for the given instance
    //    - get_next returns each read sample one by one
  };
};

#endif /* DDS4CCM_Getter_IDL3P */
