// $Id$

#ifndef DDS_CCM_BASE_IDL
#define DDS_CCM_BASE_IDL

#include  <Components.idl>
#include "connectors/dds4ccm/idl/dds4ccm_ListenerControl.idl3"
#include "connectors/dds4ccm/idl/dds4ccm_ListenerControlE.idl"
#include "connectors/dds4ccm/idl/dds4ccm_PortStatusListener.idl3"
#include "connectors/dds4ccm/idl/dds4ccm_PortStatusListenerE.idl"
#include "connectors/dds4ccm/idl/dds4ccm_ConnectorStatusListener.idl3"
#include "connectors/dds4ccm/idl/dds4ccm_ConnectorStatusListenerE.idl"
#include "connectors/dds4ccm/idl/dds4ccm_ListenerControl.idl3"
#include "connectors/dds4ccm/idl/dds_rtf2_dcpsE.idl"

#define TYPED_MODULE(TYPE, TYPE_SEQ, TYPE_MODULE) \
module CCM_DDS \
{ \
  module TYPE_MODULE { \
        interface InstanceHandleManager { \
          DDS::InstanceHandle_t register_instance (in TYPE datum); \
          void unregister_instance (in TYPE datum, in DDS::InstanceHandle_t instance_handle); \
        }; \
        interface Writer : InstanceHandleManager \
        { \
          void write (in TYPE an_instance) \
            raises (InternalError); \
          void write_many (in TYPE_SEQ an_instance) \
            raises (InternalError); \
        }; \
        interface Updater \
        { \
          void create (in TYPE an_instance) \
              raises (AlreadyCreated, \
                      InternalError); \
          void update(in TYPE an_instance) \
              raises (NonExistent, \
                      InternalError); \
          void delete (in TYPE an_instance) \
              raises (NonExistent, \
                      InternalError); \
          readonly attribute boolean is_lifecycle_checked; \
          attribute boolean is_coherent_write; \
        }; \
        interface Getter \
        { \
          boolean get_all (out TYPE_SEQ instances, out ReadInfoSeq infos) \
                  raises (InternalError); \
          boolean get_all_history (out TYPE_SEQ instances, out ReadInfoSeq infos) \
                  raises (InternalError); \
          boolean get_one (inout TYPE an_instance, out ReadInfo info) \
                  raises (NonExistent, \
                          InternalError); \
          boolean get_one_history (in TYPE an_instance, \
                                 out TYPE_SEQ instances, out ReadInfoSeq infos) \
                  raises (NonExistent, \
                          InternalError); \
          boolean get_next (out TYPE an_instance, out ReadInfo info) \
                  raises (InternalError); \
          attribute QueryFilter filter \
                  setraises (BadParameter); \
          attribute DDS::Duration_t time_out; \
        }; \
        interface Reader \
        { \
          void read_all (out TYPE_SEQ instances, out ReadInfoSeq infos) \
            raises (InternalError); \
          void read_all_history (out TYPE_SEQ instances, out ReadInfoSeq infos) \
            raises (InternalError); \
          void read_one (inout TYPE an_instance, out ReadInfo info) \
            raises (NonExistent, \
                    InternalError); \
          void read_one_history (in TYPE an_instance, \
                                 out TYPE_SEQ instances, out ReadInfoSeq infos) \
            raises (NonExistent, \
                    InternalError); \
          attribute QueryFilter filter \
            setraises (BadParameter); \
        }; \
        interface RawListener \
        { \
          void on_data (in TYPE an_instance, in ReadInfo info); \
        }; \
        porttype DDS_Write { \
          uses Writer data; \
          uses DDS::DataWriter    dds_entity; \
        }; \
        porttype DDS_Update { \
          uses Updater data; \
        }; \
        porttype DDS_Listen { \
          uses Reader data; \
          uses Getter get_data; \
          uses CCM_DDS::ListenerControl data_control; \
          provides RawListener data_listener; \
          uses DDS::DataReader dds_entity; \
          provides CCM_DDS::PortStatusListener status; \
        }; \
        component DDS_MonoConnector { \
          attribute string topic_name; \
          readonly attribute DDS::StringSeq key_fields; \
          attribute DDS::DomainId_t domain_id; \
          attribute string qos_profile; \
        }; \
    }; \
}; \

#endif
