// $Id$

/**
 * @file Shapes_Connector.idl3
 * @author Marcel Smit <msmit@remedy.nl>
 *
 * by-hand translation of the idl3p.
 */

#ifndef SHAPES_CONNECTOR_IDL3_
#define SHAPES_CONNECTOR_IDL3_

#include  <Components.idl>
#include "dds4ccm/idl/dds4ccm_ListenerControl.idl3"
#include "dds4ccm/idl/dds4ccm_ListenerControlE.idl"
#include "dds4ccm/idl/dds4ccm_PortStatusListener.idl3"
#include "dds4ccm/idl/dds4ccm_PortStatusListenerE.idl"
#include "dds4ccm/idl/dds4ccm_ConnectorStatusListener.idl3"
#include "dds4ccm/idl/dds4ccm_ListenerControl.idl3"
#include "dds4ccm/idl/dds_rtf2_dcpsE.idl"
#include "Base/Shapes_Base.idl"

module CCM_DDS
{
  // @from DDS_Write for Shapes::ShapeType
  interface ShapeType_Writer
  {
    void write (in ShapeType an_instance)
      raises (InternalError);
  };

  // @from DDS_Update for Shapes::ShapeType
  interface ShapeType_Updater
  {
    void create (in ShapeType an_instance)
        raises (AlreadyCreated,
                InternalError);
    void update(in ShapeType an_instance)
        raises (NonExistent,
                InternalError);
    void delete (in ShapeType an_instance)
        raises (NonExistent,
                InternalError);
    readonly attribute boolean is_lifecycle_checked;
  };
  
  interface ShapeType_Getter
  {
    boolean get_all (out ShapeType_Seq instances, out ReadInfoSeq infos)
            raises (InternalError);
    boolean get_all_history (out ShapeType_Seq instances, out ReadInfoSeq infos)
            raises (InternalError);
    boolean get_one (inout ShapeType an_instance, out ReadInfo info)
            raises (NonExistent,
                    InternalError);
    boolean get_one_history (in ShapeType an_instance,
                           out ShapeType_Seq instances, out ReadInfoSeq infos)
            raises (NonExistent,
                    InternalError);
    boolean get_next (out ShapeType an_instance, out ReadInfo info)
            raises (InternalError);
    attribute QueryFilter filter
            setraises (BadParameter);
    attribute DDS::Duration_t time_out;
  };
  
  // @from Reader<T> from DDS_RawListen for Shapes::ShapeType
  interface ShapeType_Reader
  {
    void read_all (out ShapeType_Seq instances, out ReadInfoSeq infos)
      raises (InternalError);

    void read_all_history (out ShapeType_Seq instances, out ReadInfoSeq infos)
      raises (InternalError);

    void read_one (inout ShapeType an_instance, out ReadInfo info)
      raises (NonExistent,
              InternalError);

    void read_one_history (in ShapeType an_instance,
                           out ShapeType_Seq instances, out ReadInfoSeq infos)
      raises (NonExistent,
              InternalError);

    attribute QueryFilter filter
      setraises (BadParameter);
  };

  // @from RawListener for Shapes::ShapeType
  interface ShapeType_RawListener
  {
    void on_data (in ShapeType an_instance, in ReadInfo info);
  };
};

module Shapes
{
  component Shapes_Connector
  {
    // @from DDS_TopicBase
    attribute string topic_name;
    readonly attribute DDS::StringSeq key_fields;

    // @from DDS_TopicBase : DDS_Base
    uses CCM_DDS::ConnectorStatusListener error_listener;
    attribute DDS::DomainId_t domain_id;
    attribute string qos_profile;

    // @from DDS_Write for ShapeType
    provides CCM_DDS::ShapeType_Writer info_in_data;
    provides DDS::DataWriter info_in_dds_entity;

    // @from DDS_Update for ShapeType
    provides CCM_DDS::ShapeType_Updater info_update_data;

    // @from DDS_RawListen for ShapeType
    provides CCM_DDS::ShapeType_Reader info_out_data;
    provides CCM_DDS::ShapeType_Getter info_get_out_data;
    provides CCM_DDS::ListenerControl info_out_control;
    uses CCM_DDS::ShapeType_RawListener info_out_listener;
    provides DDS::DataReader info_out_dds_entity;
    uses CCM_DDS::PortStatusListener info_out_status;
  };
};

#endif /* SHAPES_CONNECTOR_IDL3_ */
