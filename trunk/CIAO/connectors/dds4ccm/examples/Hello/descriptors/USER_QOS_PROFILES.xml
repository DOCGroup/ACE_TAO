<?xml version="1.0" encoding="utf-8"?>
<!--

Description
XML QoS Profile

The QoS configuration of the DDS entities in the generated example is
loaded from this file.

This file is used only when it is in the current working directory
or when the enviroment variable
NDDS_QOS_PROFILES is defined and points to this file.

For more information about XML QoS Profiles see Chapter 15 in the
RTI Data Distribution Service user manual.
-->
<dds xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="c:/ndds/ndds.4.4d/scripts/../resource/rtiddsgen/../qos_profiles_4.4d/schema/rti_dds_qos_profiles.xsd" version="4.4d">
  <!-- QoS Library containing the QoS profile used in the generated example.

        A QoS library is a named set of QoS profiles.
    -->
  <qos_library name="HelloTest_Library">
    <!-- QoS profile used to configure reliable communication between the DataWriter
             and DataReader created in the example code.

             A QoS profile groups a set of related QoS.
        -->
    <qos_profile name="Hello_Profile" is_default_qos="true">
            <participant_qos>
                <participant_name>
                    <name>RTI Hello World Example</name>
                </participant_name>

    <!-- increase total property string max length -->
    <resource_limits>
        <participant_property_string_max_length>
          2048
        </participant_property_string_max_length>
    </resource_limits>

                <property>
                    <value>

      <!-- ================= -->
      <!-- enable monitoring -->
      <!-- ================= -->

                        <element>
                            <name>rti.monitor.library</name>
          <!-- must match the library type for the DDS
                                 application -->
          <!--
                            <value>rtimonitoring</value>
                            <value>rtimonitoringd</value>
          -->
                            <value>rtimonitoring</value>
          <propagate>false</propagate>
                        </element>

                        <element>
                            <name>rti.monitor.create_function</name>
                            <value>RTIDefaultMonitor_create</value>
          <propagate>false</propagate>
                        </element>

      <!-- ========================= -->
      <!-- monitoring configurations -->
      <!-- ========================= -->

      <!-- how often to sample and publish monitoirng
                             topics in seconds, default 5 -->
      <!--
                        <element>
                            <name>rti.monitor.config.publish_period</name>
                            <value>5</value>
          <propagate>false</propagate>
                        </element>
      -->

      <!-- monitoring topics that are sent out,
           default * (no filter) -->
      <!--
                        <element>
                            <name>rti.monitor.config.topics</name>
                            <value>*</value>
          <propagate>false</propagate>
                        </element>
      -->

      <!-- user topic filter, default * (no filter) -->
      <!--
                        <element>
                            <name>rti.monitor.config.usertopics</name>
                            <value>*</value>
          <propagate>false</propagate>
                        </element>
      -->

      <!-- Uncomment this if you want statistics to be
           published by a new separate particpant,
           with the specified domain ID. Default:
           not specified (use user participant for
           publishing monitoring data) -->
      <!--
                        <element>
                            <name>rti.monitor.config.new_participant_domain_id</name>
                            <value>10</value>
          <propagate>false</propagate>
                        </element>
      -->

      <!-- Uncomment this if you want to use specific
           QoS profile for entities created by
           monitoring. Default: not specified
           (use internal QoS values) -->
      <!--
                        <element>
                            <name>rti.monitor.config.qos_library</name>
                            <value>RTIMonitoringQosLibrary</value>
          <propagate>false</propagate>
                        </element>
                        <element>
                            <name>rti.monitor.config.qos_profile</name>
                            <value>RTIMonitoringPublishingQosProfile</value>
          <propagate>false</propagate>
                        </element>
      -->

      <!-- Uncomment this if you want to control the
           property of the thread that sample and publish
           monitoring data -->
      <!-- default -2 for windows, -999999 for linux -->
      <!--
                        <element>
                            <name>rti.monitor.config.publish_thread_priority</name>
                            <value>-2</value>
          <propagate>false</propagate>
                        </element>
      -->
      <!-- default 0 for windows, -1 for linux -->
      <!--
                        <element>
                            <name>rti.monitor.config.publish_thread_stacksize</name>
                            <value>0</value>
          <propagate>false</propagate>
                        </element>
      -->
      <!-- default FLOATING_POINT | STDIO -->
      <!--
                        <element>
                            <name>rti.monitor.config.publish_thread_options</name>
                            <value></value>
          <propagate>false</propagate>
                        </element>
      -->

      <!-- do we want to montior memory and CPU usage,
           default true -->
      <!--
                        <element>
                            <name>rti.monitor.config.get_process_statistics</name>
                            <value>true</value>
          <propagate>false</propagate>
                        </element>
      -->

      <!-- Do we want to skip monitoring internal entitities
           and not include them in entity counts,
           default true -->
      <!--
                        <element>
                            <name>rti.monitor.config.skip_monitor_entities</name>
                            <value>true</value>
          <propagate>false</propagate>
                        </element>
      -->

      <!-- do you want monitoring library to reset
           status change count after access, default false -->
      <!--
                        <element>
                            <name>rti.monitor.config.reset_status_change_counts</name>
                            <value>false</value>
          <propagate>false</propagate>
                        </element>
      -->

      <!-- monitoring library verbosity for internal
           debugging purpose, default 1 -->
      <!--
                        <element>
                            <name>rti.monitor.config.verbosity</name>
                            <value>1</value>
          <propagate>false</propagate>
                        </element>
      -->

      <!-- maximum size of the preallocated buffer.
           If sample serialized size is
           larger than this value (unless the value is -1),
           dynamic memory allocation will be used.
           Default -1 (preallocated buffer is set
           according to max size serialized of the data
           type, no dynamic memory allocation) -->
      <!--
                        <element>
                            <name>rti.monitor.config.writer_pool_buffer_max_size</name>
                            <value>-1</value>
          <propagate>false</propagate>
                        </element>
      -->

                    </value>
                </property>

          <!-- monitoring types can have large data -->
                <receiver_pool>
                    <buffer_size>65530</buffer_size>
                </receiver_pool>

            </participant_qos>
      <!-- QoS used to configure the data writer created in the example code -->
      <datawriter_qos>
        <reliability>
          <kind>BEST_EFFORT_RELIABILITY_QOS</kind>
        </reliability>
        <durability>
          <kind>TRANSIENT_DURABILITY_QOS</kind>
        </durability>
        <history>
          <kind>KEEP_ALL_HISTORY_QOS</kind>
        </history>
        <protocol>
          <rtps_reliable_writer>
            <max_heartbeat_retries>10</max_heartbeat_retries>
          </rtps_reliable_writer>
        </protocol>
       </datawriter_qos>
      <!-- QoS used to configure the data reader created in the example code -->
      <datareader_qos>
        <reliability>
          <kind>BEST_EFFORT_RELIABILITY_QOS</kind>
        </reliability>
        <history>
          <kind>KEEP_ALL_HISTORY_QOS</kind>
        </history>
        <durability>
          <kind>TRANSIENT_DURABILITY_QOS</kind>
        </durability>
      </datareader_qos>

    </qos_profile>
  </qos_library>
</dds>