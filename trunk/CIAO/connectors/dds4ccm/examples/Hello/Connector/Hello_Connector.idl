// $Id$

/**
 * @file Hello_Connector.idl
 * @author Marcel Smit <msmit@remedy.nl>
 *
 * by-hand translation of the idl3p.
 */

#ifndef HELLO_CONNECTOR_IDL_
#define HELLO_CONNECTOR_IDL_

#include  <Components.idl>
#include "connectors/dds4ccm/idl/dds4ccm_ListenerControl.idl3"
#include "connectors/dds4ccm/idl/dds4ccm_ListenerControlE.idl"
#include "connectors/dds4ccm/idl/dds4ccm_PortStatusListener.idl3"
#include "connectors/dds4ccm/idl/dds4ccm_PortStatusListenerE.idl"
#include "connectors/dds4ccm/idl/dds4ccm_ConnectorStatusListener.idl3"
#include "connectors/dds4ccm/idl/dds4ccm_ListenerControl.idl3"
#include "connectors/dds4ccm/idl/dds_rtf2_dcpsE.idl"
#include "Base/Hello_Base.idl"

module CCM_DDS
{
  interface DDSHello_InstanceHandleManager {
    DDS::InstanceHandle_t register_instance (in DDSHello datum);
    void unregister_instance (in DDSHello datum, in DDS::InstanceHandle_t instance_handle);
  };

  // @from DDS_Write for Hello::DDSHello
  interface DDSHello_Writer : DDSHello_InstanceHandleManager
  {
    void write (in DDSHello an_instance)
      raises (InternalError);
    void write_many (in DDSHello_Seq an_instance)
      raises (InternalError);
  };

  // @from DDS_Update for Hello::DDSHello
  interface DDSHello_Updater
  {
    void create (in DDSHello an_instance)
        raises (AlreadyCreated,
                InternalError);
    void update(in DDSHello an_instance)
        raises (NonExistent,
                InternalError);
    void delete (in DDSHello an_instance)
        raises (NonExistent,
                InternalError);
    readonly attribute boolean is_lifecycle_checked;
    attribute boolean is_coherent_write;
  };

  interface DDSHello_Getter
  {
    boolean get_all (out DDSHello_Seq instances, out ReadInfoSeq infos)
            raises (InternalError);
    boolean get_all_history (out DDSHello_Seq instances, out ReadInfoSeq infos)
            raises (InternalError);
    boolean get_one (inout DDSHello an_instance, out ReadInfo info)
            raises (NonExistent,
                    InternalError);
    boolean get_one_history (in DDSHello an_instance,
                           out DDSHello_Seq instances, out ReadInfoSeq infos)
            raises (NonExistent,
                    InternalError);
    boolean get_next (out DDSHello an_instance, out ReadInfo info)
            raises (InternalError);
    attribute QueryFilter filter
            setraises (BadParameter);
    attribute DDS::Duration_t time_out;
  };

  // @from Reader<T> from DDS_RawListen for Hello::DDSHello
  interface DDSHello_Reader
  {
    void read_all (out DDSHello_Seq instances, out ReadInfoSeq infos)
      raises (InternalError);

    void read_all_history (out DDSHello_Seq instances, out ReadInfoSeq infos)
      raises (InternalError);

    void read_one (inout DDSHello an_instance, out ReadInfo info)
      raises (NonExistent,
              InternalError);

    void read_one_history (in DDSHello an_instance,
                           out DDSHello_Seq instances, out ReadInfoSeq infos)
      raises (NonExistent,
              InternalError);

    attribute QueryFilter filter
      setraises (BadParameter);
  };

  // @from RawListener for Hello::DDSHello
  interface DDSHello_RawListener
  {
    void on_data (in DDSHello an_instance, in ReadInfo info);
  };

  porttype DDS_Write {
    uses CCM_DDS::DDSHello_Writer data;
    uses DDS::DataWriter    dds_entity;
  };
  porttype DDS_Update {
    uses CCM_DDS::DDSHello_Updater data;
  };
  porttype DDS_Listen {
    uses CCM_DDS::DDSHello_Reader data;
    uses CCM_DDS::DDSHello_Getter get_data;
    uses CCM_DDS::ListenerControl data_control;
    provides CCM_DDS::DDSHello_RawListener data_listener;
    uses DDS::DataReader dds_entity;
    provides CCM_DDS::PortStatusListener status;
  };
};

module Hello
{
  component Hello_Connector
  {
    // @from DDS_TopicBase
    attribute string topic_name;
    readonly attribute DDS::StringSeq key_fields;

    // @from DDS_TopicBase : DDS_Base
    uses CCM_DDS::ConnectorStatusListener error_listener;
    attribute DDS::DomainId_t domain_id;
    attribute string qos_profile;

    // @from DDS_Write for DDSHello
    mirrorport CCM_DDS::DDS_Write info_in;

    // @from DDS_Update for DDSHello
    mirrorport CCM_DDS::DDS_Update info_update;

    // @from DDS_RawListen for DDSHello
    mirrorport CCM_DDS::DDS_Listen info_out;
  };
};


/*
For future use: IDL3 plus
#include <dds4ccm/idl/dds4ccm_Connector_Base.idl3p>
#include <dds4ccm/idl/dds4ccm_Port_RawListen.idl3p>
#include <dds4ccm/idl/dds4ccm_Port_Write.idl3p>

module Hello
{
  connector Hello_Connector : CCM_DDS::DDS_TopicBase
  {
    mirrorport CCM_DDS::DDS_Write <DDSHello> info_in;
    mirrorport CCM_DDS::DDS_RawListen <DDSHello> info_out;
  };
};
*/

#endif /* HELLO_CONNECTOR_IDL_ */


