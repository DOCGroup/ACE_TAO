Sun Jan  5 10:48:23 1997  Douglas C. Schmidt  <schmidt@tango.cs.wustl.edu>

	* tests: Added a new test for ACE_Message_Block, which is called
 	  Message_Block_Test.cpp (no surprise there ;-)).  This test
 	  exercises the reference counting mechanisms.

	* ace/Message_Block.h: Made the destructors for ACE_Message_Block
 	  and ACE_Data_Block virtual, so that these classes can be
 	  subclassed and ACE_Message_Blocks can delete these
	  subclasses (either via release() or delete).  Thanks to Tilo
	  Christ for suggesting this.

	* ace/Message_Block.cpp: Modified the implementation
	  of ACE_Message_Block/ACE_Data_Block so that we always create
	  an allocator_strategy_.  By default, this strategy will be
	  ACE_Allocator_Adapter <ACE_Malloc <ACE_Local_Memory_Pool, ACE_Null_Mutex> >;
	  This greatly simplifies the code.

	* ace/Message_Block.h: It's now possible to assign a
 	  Message_Block's priority when you create it.

	* ace/Reactor: Sped things up some more by merging the Reactor's
 	  any_ready() and fill_in_ready() methods together.  This reduces
 	  redundant computations.

	* ace/Reactor: Changed the name of ACE_Reactor::detach() to
 	  ACE_Reactor::remove_handler_i() and changed the name of
 	  ACE_Reactor::attach() to ACE_Reactor::register_handler_i().
  	  This is more consistent with the other naming schemes.

	* ace/Reactor.cpp: Reworked the implementation of the Handler
 	  Repository's unbind() method in order to simplfy the logic.
  	  Also merged in all the Reactor's detach() functionality into the
 	  unbind() method in order to localize all the handler removal
 	  processing.

	* ace/Reactor[Ex].cpp: Added more descriptive errno entries for
 	  failed operations in the handler repository.

	* ace/Reactor.cpp: Modified the implementation of the Handler
 	  Repository's bind() method so that it reports an error if you
 	  try to register an Event_Handler for an invalid HANDLE.

	* ace/Reactor.cpp: Reimplemented the internals of the Reactor to
 	  prepare for the upcoming merge of the Reactor and ReactorEx to
 	  use a single code base.

	* ace/Timer_Queue.cpp: Modified the behavior of the expire()
 	  methods so that they return the number of ACE_Event_Handlers
 	  whose handle_timeout() method was called.

Sat Jan  4 11:47:05 1997  Douglas C. Schmidt  <schmidt@tango.cs.wustl.edu>

	* ace/Reactor.h: Removed the #ifdefs for ACE_HAS_POLL.  This will
 	  be recast as a strategy in subsequent implementations.

	* ace/Reactor.cpp: Added a new call,
 	  ACE_Handler_Repository::handle_in_range(), which checks to make
 	  sure that the HANDLE is within the range of 0 .. max_handlep1_.
  	  This factors out some redundant code.

	* ace/Reactor.cpp: Sped up the performance of the Reactor by
 	  removing redundant calls to
 	  ACE_Handler_Repository::invalid_handle() and
 	  ACE_Handler_Repository::find().

	* tests/Reactors_Test.cpp: Added a test for
 	  the new Reactor::notify() method with timeouts.

	* examples/Reactor/Misc/notification.cpp (svc): Added a test for
 	  the new Reactor::notify() method with timeouts.

	* ace/Reactor[Ex]: Modified the Reactor and ReactorEx so that they
 	  use timed send() operations for their notify() methods.  This
 	  makes it possible for users to bound the amount of time they're
 	  willing to wait to try and notify the Reactor.  This is mostly
 	  useful to avoid infinite blocking if there is congestion in the
 	  Reactor's notification mechanism.

	* ace/ACE.cpp: Added a new timed send() method that uses the
 	  write() system call on UNIX and the socket send() call on Win32.
  	  This new method is used in the new ACE_Reactor::notify() method,
 	  which now supported timed notifications.

	* ace/Reactor.cpp (ACE_Handler_Repository): To simplify the code
 	  and reduce unnecessary #ifdefs, I've merged the max_handlep1_
 	  and cur_size_ fields (which are now called max_handlep1_).

Fri Jan  3 10:47:15 1997  Douglas C. Schmidt  <schmidt@tango.cs.wustl.edu>

	* ace: Replaced all uses of "delete mb" with mb->release ();

	* ace/Stream_Modules.cpp: Replaced the use of explicit bit
	  twiddling with the ACE_BIT* macros.

	* ace/Message_Block.cpp: Make sure that we use the
 	  allocator_strategy_ to create the memory for the reference count
 	  since this may need to go into shared memory if that's the
 	  memory pool where the Message_Block allocations are coming from.

	* ace/OS.h: Added two new macros, ACE_ALLOCATOR_RETURN and
	  ACE_ALLOCATOR, which are similar to ACE_NEW_RETURN and ACE_NEW, 
	  except that these

	* ace/Message_Block.cpp (release): Make sure to "delete this"
 	  outside the scope of the locking_strategy_.

	* ace/Service_Object.cpp: Added a destructor to ACE_Service_Type.
  	  Thanks to Per.Andersson@hfera.ericsson.se (Per Andersson) for
 	  suggesting this.

	* ace/Service_Object.i: Be smarter about how we reassign the name_
 	  pointer, i.e., delete the old one and make a copy.  Thanks to
 	  Per.Andersson@hfera.ericsson.se (Per Andersson) for reporting
 	  this.

	* ace/Module.cpp (open): Rearranged the assignments to
 	  reader_q->mod_ and writer_q->mod_ so that we don't try to
 	  initialize through NULL pointers.  Thanks to
 	  Per.Andersson@hfera.ericsson.se (Per Andersson) for reporting
 	  this.

	* ace/Service_Record.cpp (ACE_Service_Record): Initialized name_
 	  to NULL so that the following change works correctly now.
  	  Thanks to Per.Andersson@hfera.ericsson.se (Per Andersson) for
 	  reporting this.

	* ace/Service_Record.i (name): Make sure to delete [] (char *)
 	  this->name_ before allocating a new one.  Thanks to
 	  Per.Andersson@hfera.ericsson.se (Per Andersson) for reporting
 	  this.

	* ace/Message_Block: Reworked the reference counting implemention
 	  so that reference counts are shared correctly amongst their
 	  various owners.  This requires making a deep copy the "header"
 	  portion, but a shallow copy of the "data."

	* ace/Message_Block.cpp (ACE_Message_Block): Updated all three
 	  ACE_Message_Block constructors so that they all call the init()
 	  method.  This centralizes all the initialization logic in one
 	  place.

Thu Jan  2 00:42:21 1997  Douglas C. Schmidt  <schmidt@tango.cs.wustl.edu>

	* ace/Message_Block.cpp (ACE_Message_Block): Make sure to set the
 	  cont_ field to 0 after "releasing" it so that we don't
 	  mistakenly think it's still around later on.  This problem arose
 	  in the ACE_Message_Queue::close() method, which was trying to
 	  count the number of bytes being freed.

	* ace/Message_Queue.cpp (close): Fixed a subtle bug where we
 	  weren't actually deleting messages from the
 	  ACE_Message_Queue::close() routine.  This should work now...

	* ace/Message_Queue.cpp (close): Replaced the use of "delete mb"
 	  with "mb->release()" since the Message_Blocks are now reference
 	  counted.  

	* ace/Message_Block: Enhanced the reference counting scheme so
 	  that you can increment and decrement the count by an arbitrary
 	  amount.  This is particular useful when you know you'll be
 	  sending the same Message_Block to N consumers.

	* ace/Singleton: The dump() must be used same as instance()
          (without supplying an object) so it must be declarated *static*,
	  i.e.,

	  static void dump (void);

	  Thanks to Sandro Doro <alex@aureus.sublink.org> for reporting
 	  this.

	* examples/ASX/Event_Server: Completely rewrote and retested the
 	  ACE Event Server example.  The new code is *much* easier to
 	  understand, has many more comments, is more robust, and compiles
 	  much faster since I removed many of the templates.

	* examples/ASX/Event_Server/Tranceiver/tranceiver.cpp: Fixed the
 	  tranceiver so that it shuts down correctly when the Event_Server
 	  exits.

	* examples/Connection/non_blocking/CPP-connector.cpp: Fixed a
 	  problem where we were trying to select() on ACE_STDIN on Win32.
  	  Naturally, this doesn't work, so we used the
 	  ACE::register_stdin_handler() to fix this.  Thanks to
 	  Samuel_Bercovici <Samuel_Bercovici_at_EFT__AD2@mail.icomverse.com>
	  for reporting this.

	* examples/ASX/Event_Server/Event_Server/Options: Changed the
 	  Options class to be a Singleton...

	* ace/Task.h: Added "const" method qualifier to accessor methods
 	  like is_reader() and is_writer().

Wed Jan  1 00:10:47 1997  Douglas C. Schmidt  <schmidt@tango.cs.wustl.edu>

	* ace/Message_Block: Added a new static release() method that
 	  behaves like the non-static method release(), except that it
 	  checks if <mb> is 0.  This is similar to CORBA::release(), which
 	  is useful if you want to eliminate lots of checks for NULL
 	  pointers before calling release() on them.

	* Updated all places in ACE where we use
 	  ACE_Event_Handler::READ_MASK when we should be using
 	  ACE_Event_Handler::ACCEPT_MASK.

	* examples/Service_Configurator/IPC-tests/server/Handle_Thr_Stream.cpp:
 	  Changed the name of the acceptor class from Handle_Thr_Stream to
 	  Handle_Thr_Acceptor, which is more accurate.

	* ace/Reactor: Since we've now got an
 	  ACE_Event_Handler::ACCEPT_MASK (intended primarily to accept
 	  connections asynchronously using Win32 overlapped I/O) we can
 	  now use this with the ACE_Reactor, as well.  In particular, any
 	  time that we are registering a "passive-mode" socket acceptor we
 	  can now specify ACE_Event_Handler::ACCEPT_MASK.  This is much
 	  more intuitive than using the READ_MASK (which never made any
 	  sense...).  The ACE_Reactor now treats the ACCEPT_MASK as a
 	  READ_MASK internally, so you can still use READ_MASK if you'd
 	  like (i.e., this change doesn't break any existing code).

	* ace/Event_Handler: Changed "get_priority" and "set_priority" to
 	  simply "priority(void)" and "priority(int)" to be more
 	  consistent with other parts of ACE.

	* apps/Gateway/Gateway: Updated the Gateway so that the
	  concurrency strategies can now be specified on the
	  command-line (or in the svc.conf file), rather than being
	  determined at compile-time.  This is much more flexible.
	  See the ./apps/Gateway/Gateway/README file for details.

	* apps/Gateway/Gateway: Verified that all the multi-threading
 	  strategies still work.

	* ace/Message_Block.cpp (ACE_Message_Block): Make sure that we
 	  "release" the continuation field, rather than delete it, since
 	  its reference count may be > 1.

	* ace/Log_Msg.cpp (log): Change the abort_prog logic a bit so that
 	  we always print a message to stderr if we're exiting,
 	  regardless...  Thanks to David Levine for pointing this out.

	* apps/Gateway/Gateway: Moved all of the configuration file
 	  parsing logic *outside* of the Event_Channel into the Gateway
 	  class so that we wouldn't have unnecessary dependencies.

	* apps/Gateway/Gateway: Redesigned the Gateway so that the
 	  Proxy_Handlers (i.e., the Consumer_Proxy and Supplier_Proxy)
 	  most of their work to the Event_Channel.  This "lightweight
 	  proxy" design is an improvement since it is now possible to
 	  emulate the COS Event Channel semantics within the Event_Channel
 	  "kernel."

	* Happy new year!  Let's start a new ChangeLog to celebrate the
	  new year.

