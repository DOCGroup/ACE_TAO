
/*  A Bison parser, made from idl.yy
 by  GNU Bison version 1.25
  */

#define YYBISON 1  /* Identify Bison output.  */

#define	IDENTIFIER	258
#define	CONST	259
#define	MODULE	260
#define	INTERFACE	261
#define	TYPEDEF	262
#define	LONG	263
#define	SHORT	264
#define	UNSIGNED	265
#define	DOUBLE	266
#define	FLOAT	267
#define	CHAR	268
#define	WCHAR	269
#define	OCTET	270
#define	BOOLEAN	271
#define	ANY	272
#define	STRUCT	273
#define	UNION	274
#define	SWITCH	275
#define	ENUM	276
#define	SEQUENCE	277
#define	STRING	278
#define	WSTRING	279
#define	EXCEPTION	280
#define	CASE	281
#define	DEFAULT	282
#define	READONLY	283
#define	ATTRIBUTE	284
#define	ONEWAY	285
#define	IDEMPOTENT	286
#define	VOID	287
#define	IN	288
#define	OUT	289
#define	INOUT	290
#define	RAISES	291
#define	CONTEXT	292
#define	INTEGER_LITERAL	293
#define	STRING_LITERAL	294
#define	CHARACTER_LITERAL	295
#define	FLOATING_PT_LITERAL	296
#define	TRUETOK	297
#define	FALSETOK	298
#define	SCOPE_DELIMITOR	299
#define	LEFT_SHIFT	300
#define	RIGHT_SHIFT	301

#line 72 "idl.yy"

#include "idl.h"
#include "idl_extern.h"

#include "fe_private.h"

#include <stdio.h>

#if (defined(apollo) || defined(hpux)) && defined(__cplusplus)
extern	"C" int yywrap();
#endif	// (defined(apollo) || defined(hpux)) && defined(__cplusplus)

void yyerror (char *);
int yylex (void);
extern "C" int yywrap (void);

#line 93 "idl.yy"
typedef union {
  AST_Decl		*dcval;		/* Decl value		*/
  UTL_StrList		*slval;		/* String list		*/
  UTL_NameList		*nlval;		/* Name list		*/
  UTL_ExprList		*elval;		/* Expression list	*/
  UTL_LabelList		*llval;		/* Label list		*/
  UTL_DeclList		*dlval;		/* Declaration list	*/
  FE_InterfaceHeader	*ihval;		/* Interface header	*/
  AST_Expression	*exval;		/* Expression value	*/
  AST_UnionLabel	*ulval;		/* Union label		*/
  AST_Field		*ffval;		/* Field value		*/
  AST_Expression::ExprType etval;	/* Expression type	*/
  AST_Argument::Direction dival;	/* Argument direction	*/
  AST_Operation::Flags	ofval;		/* Operation flags	*/
  FE_Declarator		*deval;		/* Declarator value	*/
  idl_bool		bval;		/* Boolean value	*/
  long			ival;		/* Long value		*/
  double		dval;		/* Double value		*/
  float			fval;		/* Float value		*/
  char			cval;		/* Char value		*/

  String		*sval;		/* String value		*/
  char			*strval;	/* char * value		*/
  Identifier		*idval;		/* Identifier		*/
  UTL_IdList		*idlist;	/* Identifier list	*/
} YYSTYPE;
#ifndef YYDEBUG
#define YYDEBUG 1
#endif

#include <stdio.h>

#ifndef __cplusplus
#ifndef __STDC__
#define const
#endif
#endif



#define	YYFINAL		393
#define	YYFLAG		-32768
#define	YYNTBASE	68

#define YYTRANSLATE(x) ((unsigned)(x) <= 301 ? yytranslate[x] : 253)

static const char yytranslate[] = {     0,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,    60,    55,     2,    62,
    63,    58,    56,    51,    57,     2,    59,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,    50,    47,    65,
    52,    64,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
    66,     2,    67,    54,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,    48,    53,    49,    61,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     1,     2,     3,     4,     5,
     6,     7,     8,     9,    10,    11,    12,    13,    14,    15,
    16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
    26,    27,    28,    29,    30,    31,    32,    33,    34,    35,
    36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
    46
};

#if YYDEBUG != 0
static const short yyprhs[] = {     0,
     0,     2,     5,     6,     7,    11,    12,    16,    17,    21,
    22,    26,    27,    31,    32,    36,    37,    38,    39,    40,
    50,    52,    54,    55,    56,    57,    65,    66,    70,    73,
    74,    78,    79,    82,    83,    84,    88,    89,    93,    94,
    98,    99,   103,   104,   108,   109,   113,   116,   117,   122,
   123,   125,   126,   130,   131,   136,   138,   140,   141,   142,
   143,   144,   154,   156,   158,   160,   162,   164,   166,   168,
   170,   172,   174,   176,   180,   182,   186,   188,   192,   194,
   198,   202,   204,   208,   212,   214,   218,   222,   226,   228,
   231,   234,   237,   239,   241,   245,   247,   249,   251,   253,
   255,   257,   259,   260,   264,   266,   268,   270,   271,   275,
   277,   279,   281,   283,   285,   287,   289,   291,   293,   295,
   297,   299,   301,   303,   305,   307,   309,   312,   313,   318,
   319,   321,   323,   326,   327,   332,   333,   335,   337,   339,
   341,   343,   346,   348,   351,   355,   358,   360,   362,   365,
   367,   369,   371,   373,   375,   376,   377,   378,   379,   389,
   392,   395,   396,   397,   398,   404,   405,   409,   410,   411,
   412,   413,   414,   415,   416,   417,   435,   437,   439,   441,
   443,   445,   447,   450,   453,   454,   455,   456,   462,   463,
   467,   470,   473,   474,   475,   479,   480,   481,   487,   488,
   492,   493,   494,   495,   496,   506,   509,   510,   515,   516,
   518,   519,   520,   527,   530,   531,   532,   538,   539,   540,
   547,   549,   551,   552,   553,   560,   562,   564,   565,   569,
   572,   575,   576,   577,   578,   584,   585,   586,   593,   595,
   596,   597,   598,   599,   600,   610,   611,   612,   613,   614,
   625,   627,   629,   630,   632,   634,   635,   639,   640,   645,
   648,   649,   654,   655,   656,   657,   663,   665,   667,   669,
   671,   673,   675,   676,   677,   684,   685,   686,   687,   694,
   695,   698,   699,   704
};

static const short yyrhs[] = {    69,
     0,    70,    69,     0,     0,     0,   126,    71,    47,     0,
     0,   108,    72,    47,     0,     0,   221,    73,    47,     0,
     0,    82,    74,    47,     0,     0,    77,    75,    47,     0,
     0,     1,    76,    47,     0,     0,     0,     0,     0,     5,
    78,     3,    79,    48,    80,    69,    81,    49,     0,    83,
     0,   107,     0,     0,     0,     0,    89,    84,    48,    85,
    92,    86,    49,     0,     0,     6,    88,   106,     0,    87,
    90,     0,     0,    50,    91,   100,     0,     0,    92,    93,
     0,     0,     0,   126,    94,    47,     0,     0,   108,    95,
    47,     0,     0,   221,    96,    47,     0,     0,   217,    97,
    47,     0,     0,   226,    98,    47,     0,     0,     1,    99,
    47,     0,   103,   101,     0,     0,   101,    51,   102,   103,
     0,     0,   106,     0,     0,    44,   104,   106,     0,     0,
   103,    44,   105,   106,     0,     3,     0,    87,     0,     0,
     0,     0,     0,     4,   109,   113,   110,   106,   111,    52,
   112,   114,     0,   144,     0,   148,     0,   149,     0,   150,
     0,   147,     0,   202,     0,   206,     0,   103,     0,   115,
     0,   116,     0,   117,     0,   116,    53,   117,     0,   118,
     0,   117,    54,   118,     0,   119,     0,   118,    55,   119,
     0,   120,     0,   119,    45,   120,     0,   119,    46,   120,
     0,   121,     0,   120,    56,   121,     0,   120,    57,   121,
     0,   122,     0,   121,    58,   122,     0,   121,    59,   122,
     0,   121,    60,   122,     0,   123,     0,    56,   123,     0,
    57,   123,     0,    61,   123,     0,   103,     0,   124,     0,
    62,   115,    63,     0,    38,     0,    39,     0,    40,     0,
    41,     0,    42,     0,    43,     0,   115,     0,     0,     7,
   127,   128,     0,   152,     0,   163,     0,   187,     0,     0,
   130,   129,   135,     0,   131,     0,   134,     0,   132,     0,
   133,     0,   103,     0,   144,     0,   147,     0,   148,     0,
   150,     0,   149,     0,   151,     0,   196,     0,   202,     0,
   206,     0,   152,     0,   163,     0,   187,     0,   138,   136,
     0,     0,   136,    51,   137,   138,     0,     0,   142,     0,
   143,     0,   142,   140,     0,     0,   140,    51,   141,   142,
     0,     0,   106,     0,   210,     0,   145,     0,   146,     0,
     8,     0,     8,     8,     0,     9,     0,    10,     8,     0,
    10,     8,     8,     0,    10,     9,     0,    11,     0,    12,
     0,     8,    11,     0,    13,     0,    14,     0,    15,     0,
    16,     0,    17,     0,     0,     0,     0,     0,    18,   153,
   106,   154,    48,   155,   157,   156,    49,     0,   159,   158,
     0,   158,   159,     0,     0,     0,     0,   130,   160,   135,
   161,    47,     0,     0,     1,   162,    47,     0,     0,     0,
     0,     0,     0,     0,     0,     0,    19,   164,   106,   165,
    20,   166,    62,   167,   172,   168,    63,   169,    48,   170,
   173,   171,    49,     0,   144,     0,   148,     0,   149,     0,
   150,     0,   187,     0,   103,     0,   175,   174,     0,   174,
   175,     0,     0,     0,     0,   179,   176,   185,   177,    47,
     0,     0,     1,   178,    47,     0,   181,   180,     0,   180,
   181,     0,     0,     0,    27,   182,    50,     0,     0,     0,
    26,   183,   115,   184,    50,     0,     0,   130,   186,   138,
     0,     0,     0,     0,     0,    21,   188,   106,   189,    48,
   190,   192,   191,    49,     0,   195,   193,     0,     0,   193,
    51,   194,   195,     0,     0,     3,     0,     0,     0,   199,
    51,   197,   125,   198,    64,     0,   199,    64,     0,     0,
     0,    22,   200,    65,   201,   131,     0,     0,     0,   205,
    65,   203,   125,   204,    64,     0,   205,     0,    23,     0,
     0,     0,   209,    65,   207,   125,   208,    64,     0,   209,
     0,    24,     0,     0,   106,   211,   212,     0,   214,   213,
     0,   213,   214,     0,     0,     0,     0,    66,   215,   125,
   216,    67,     0,     0,     0,   220,    29,   218,   242,   219,
   139,     0,    28,     0,     0,     0,     0,     0,     0,    25,
   222,   106,   223,    48,   224,   158,   225,    49,     0,     0,
     0,     0,     0,   231,   232,   227,     3,   228,   233,   229,
   244,   230,   247,     0,    30,     0,    31,     0,     0,   242,
     0,    32,     0,     0,    62,   234,    63,     0,     0,    62,
   235,   236,    63,     0,   239,   237,     0,     0,   237,    51,
   238,   239,     0,     0,     0,     0,   243,   240,   242,   241,
   138,     0,   132,     0,   202,     0,   103,     0,    33,     0,
    34,     0,    35,     0,     0,     0,    36,   245,    62,   246,
   100,    63,     0,     0,     0,     0,    37,   248,    62,   249,
   250,    63,     0,     0,    39,   251,     0,     0,   251,    51,
   252,    39,     0,     0
};

#endif

#if YYDEBUG != 0
static const short yyrline[] = { 0,
   226,   229,   230,   234,   239,   242,   247,   250,   255,   258,
   263,   266,   271,   274,   279,   285,   290,   311,   315,   319,
   329,   330,   333,   419,   423,   427,   436,   442,   448,   463,
   468,   471,   478,   479,   483,   488,   491,   496,   499,   504,
   507,   512,   515,   520,   523,   528,   534,   542,   548,   558,
   565,   571,   576,   582,   588,   596,   602,   622,   628,   632,
   636,   640,   667,   668,   669,   670,   671,   672,   676,   680,
   717,   719,   721,   722,   729,   730,   737,   738,   745,   746,
   750,   757,   758,   762,   769,   770,   774,   778,   785,   786,
   792,   798,   807,   816,   817,   824,   828,   832,   836,   840,
   845,   852,   861,   865,   866,   867,   868,   871,   877,   910,
   911,   915,   919,   920,   934,   935,   936,   937,   938,   939,
   943,   944,   945,   949,   950,   951,   954,   962,   968,   978,
   985,   986,   989,   997,  1003,  1013,  1019,  1027,  1037,  1038,
  1042,  1046,  1050,  1057,  1061,  1065,  1072,  1076,  1080,  1087,
  1091,  1098,  1105,  1112,  1118,  1124,  1148,  1152,  1156,  1172,
  1175,  1176,  1179,  1185,  1189,  1221,  1226,  1232,  1238,  1242,
  1246,  1250,  1254,  1283,  1287,  1291,  1307,  1312,  1316,  1320,
  1324,  1325,  1387,  1390,  1391,  1394,  1400,  1404,  1431,  1436,
  1442,  1450,  1459,  1466,  1471,  1478,  1483,  1487,  1495,  1501,
  1525,  1531,  1558,  1562,  1566,  1580,  1583,  1589,  1589,  1592,
  1616,  1622,  1626,  1655,  1688,  1698,  1702,  1709,  1715,  1719,
  1736,  1753,  1761,  1767,  1771,  1788,  1805,  1812,  1818,  1830,
  1838,  1847,  1853,  1859,  1863,  1877,  1884,  1888,  1921,  1926,
  1932,  1938,  1962,  1966,  1970,  1979,  1986,  2015,  2019,  2023,
  2047,  2052,  2057,  2064,  2065,  2074,  2079,  2082,  2087,  2093,
  2096,  2102,  2102,  2105,  2111,  2115,  2136,  2140,  2141,  2155,
  2159,  2163,  2170,  2175,  2179,  2184,  2191,  2196,  2200,  2205,
  2211,  2219,  2225,  2233
};
#endif


#if YYDEBUG != 0 || defined (YYERROR_VERBOSE)

static const char * const yytname[] = {   "$","error","$undefined.","IDENTIFIER",
"CONST","MODULE","INTERFACE","TYPEDEF","LONG","SHORT","UNSIGNED","DOUBLE","FLOAT",
"CHAR","WCHAR","OCTET","BOOLEAN","ANY","STRUCT","UNION","SWITCH","ENUM","SEQUENCE",
"STRING","WSTRING","EXCEPTION","CASE","DEFAULT","READONLY","ATTRIBUTE","ONEWAY",
"IDEMPOTENT","VOID","IN","OUT","INOUT","RAISES","CONTEXT","INTEGER_LITERAL",
"STRING_LITERAL","CHARACTER_LITERAL","FLOATING_PT_LITERAL","TRUETOK","FALSETOK",
"SCOPE_DELIMITOR","LEFT_SHIFT","RIGHT_SHIFT","';'","'{'","'}'","':'","','","'='",
"'|'","'^'","'&'","'+'","'-'","'*'","'/'","'%'","'~'","'('","')'","'>'","'<'",
"'['","']'","start","definitions","definition","@1","@2","@3","@4","@5","@6",
"module","@7","@8","@9","@10","interface_def","interface","@11","@12","@13",
"interface_decl","@14","interface_header","inheritance_spec","@15","exports",
"export","@16","@17","@18","@19","@20","@21","at_least_one_scoped_name","scoped_names",
"@22","scoped_name","@23","@24","id","forward","const_dcl","@25","@26","@27",
"@28","const_type","expression","const_expr","or_expr","xor_expr","and_expr",
"shift_expr","add_expr","mult_expr","unary_expr","primary_expr","literal","positive_int_expr",
"type_dcl","@29","type_declarator","@30","type_spec","simple_type_spec","base_type_spec",
"template_type_spec","constructed_type_spec","at_least_one_declarator","declarators",
"@31","declarator","at_least_one_simple_declarator","simple_declarators","@32",
"simple_declarator","complex_declarator","integer_type","signed_int","unsigned_int",
"floating_pt_type","char_type","octet_type","boolean_type","any_type","struct_type",
"@33","@34","@35","@36","at_least_one_member","members","member","@37","@38",
"@39","union_type","@40","@41","@42","@43","@44","@45","@46","@47","switch_type_spec",
"at_least_one_case_branch","case_branches","case_branch","@48","@49","@50","at_least_one_case_label",
"case_labels","case_label","@51","@52","@53","element_spec","@54","enum_type",
"@55","@56","@57","@58","at_least_one_enumerator","enumerators","@59","enumerator",
"sequence_type_spec","@60","@61","seq_head","@62","@63","string_type_spec","@64",
"@65","string_head","wstring_type_spec","@66","@67","wstring_head","array_declarator",
"@68","at_least_one_array_dim","array_dims","array_dim","@69","@70","attribute",
"@71","@72","opt_readonly","exception","@73","@74","@75","@76","operation","@77",
"@78","@79","@80","opt_op_attribute","op_type_spec","parameter_list","@81","@82",
"at_least_one_parameter","parameters","@83","parameter","@84","@85","param_type_spec",
"direction","opt_raises","@86","@87","opt_context","@88","@89","at_least_one_string_literal",
"string_literals","@90", NULL
};
#endif

static const short yyr1[] = {     0,
    68,    69,    69,    71,    70,    72,    70,    73,    70,    74,
    70,    75,    70,    76,    70,    78,    79,    80,    81,    77,
    82,    82,    84,    85,    86,    83,    88,    87,    89,    91,
    90,    90,    92,    92,    94,    93,    95,    93,    96,    93,
    97,    93,    98,    93,    99,    93,   100,   102,   101,   101,
   103,   104,   103,   105,   103,   106,   107,   109,   110,   111,
   112,   108,   113,   113,   113,   113,   113,   113,   113,   113,
   114,   115,   116,   116,   117,   117,   118,   118,   119,   119,
   119,   120,   120,   120,   121,   121,   121,   121,   122,   122,
   122,   122,   123,   123,   123,   124,   124,   124,   124,   124,
   124,   125,   127,   126,   126,   126,   126,   129,   128,   130,
   130,   131,   131,   131,   132,   132,   132,   132,   132,   132,
   133,   133,   133,   134,   134,   134,   135,   137,   136,   136,
   138,   138,   139,   141,   140,   140,   142,   143,   144,   144,
   145,   145,   145,   146,   146,   146,   147,   147,   147,   148,
   148,   149,   150,   151,   153,   154,   155,   156,   152,   157,
   158,   158,   160,   161,   159,   162,   159,   164,   165,   166,
   167,   168,   169,   170,   171,   163,   172,   172,   172,   172,
   172,   172,   173,   174,   174,   176,   177,   175,   178,   175,
   179,   180,   180,   182,   181,   183,   184,   181,   186,   185,
   188,   189,   190,   191,   187,   192,   194,   193,   193,   195,
   197,   198,   196,   196,   200,   201,   199,   203,   204,   202,
   202,   205,   207,   208,   206,   206,   209,   211,   210,   212,
   213,   213,   215,   216,   214,   218,   219,   217,   220,   220,
   222,   223,   224,   225,   221,   227,   228,   229,   230,   226,
   231,   231,   231,   232,   232,   234,   233,   235,   233,   236,
   238,   237,   237,   240,   241,   239,   242,   242,   242,   243,
   243,   243,   245,   246,   244,   244,   248,   249,   247,   247,
   250,   252,   251,   251
};

static const short yyr2[] = {     0,
     1,     2,     0,     0,     3,     0,     3,     0,     3,     0,
     3,     0,     3,     0,     3,     0,     0,     0,     0,     9,
     1,     1,     0,     0,     0,     7,     0,     3,     2,     0,
     3,     0,     2,     0,     0,     3,     0,     3,     0,     3,
     0,     3,     0,     3,     0,     3,     2,     0,     4,     0,
     1,     0,     3,     0,     4,     1,     1,     0,     0,     0,
     0,     9,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     3,     1,     3,     1,     3,     1,     3,
     3,     1,     3,     3,     1,     3,     3,     3,     1,     2,
     2,     2,     1,     1,     3,     1,     1,     1,     1,     1,
     1,     1,     0,     3,     1,     1,     1,     0,     3,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     2,     0,     4,     0,
     1,     1,     2,     0,     4,     0,     1,     1,     1,     1,
     1,     2,     1,     2,     3,     2,     1,     1,     2,     1,
     1,     1,     1,     1,     0,     0,     0,     0,     9,     2,
     2,     0,     0,     0,     5,     0,     3,     0,     0,     0,
     0,     0,     0,     0,     0,    17,     1,     1,     1,     1,
     1,     1,     2,     2,     0,     0,     0,     5,     0,     3,
     2,     2,     0,     0,     3,     0,     0,     5,     0,     3,
     0,     0,     0,     0,     9,     2,     0,     4,     0,     1,
     0,     0,     6,     2,     0,     0,     5,     0,     0,     6,
     1,     1,     0,     0,     6,     1,     1,     0,     3,     2,
     2,     0,     0,     0,     5,     0,     0,     6,     1,     0,
     0,     0,     0,     0,     9,     0,     0,     0,     0,    10,
     1,     1,     0,     1,     1,     0,     3,     0,     4,     2,
     0,     4,     0,     0,     0,     5,     1,     1,     1,     1,
     1,     1,     0,     0,     6,     0,     0,     0,     6,     0,
     2,     0,     4,     0
};

static const short yydefact[] = {     0,
    14,    58,    16,    27,   103,   155,   168,   201,   241,     1,
     0,    12,    10,    21,    32,    23,    22,     6,     4,   105,
   106,   107,     8,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     2,     0,     0,    30,    29,     0,     0,     0,
     0,    15,    56,   141,   143,     0,   147,   148,   150,   151,
   152,   153,   222,   227,    52,    70,    51,    59,    63,   139,
   140,    67,    64,    65,    66,    68,   221,    69,   226,    17,
    28,   154,   215,   114,   104,   108,   110,   112,   113,   111,
   115,   116,   117,   119,   118,   120,   124,   125,   126,   121,
     0,   122,   123,   156,   169,   202,   242,    13,    11,     0,
    24,     7,     5,     9,   142,   149,   144,   146,     0,    54,
     0,   218,   223,     0,     0,     0,   211,   214,     0,     0,
     0,     0,    31,    50,    34,   145,    53,     0,    60,     0,
     0,    18,   216,   137,   109,   130,   131,   132,   138,     0,
   157,   170,   203,   243,    47,     0,    55,     0,    96,    97,
    98,    99,   100,   101,     0,     0,     0,     0,    93,   102,
    72,    73,    75,    77,    79,    82,    85,    89,    94,   219,
   224,     0,     0,     0,   127,   212,     0,     0,     0,   162,
    48,    45,   239,   251,   252,     0,    33,    37,    35,    41,
     0,    39,    43,     0,    61,    90,    91,    92,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,    19,   217,   233,   229,   232,   128,     0,   166,   163,
   158,   162,   171,   210,   204,   209,     0,     0,     0,    26,
     0,     0,     0,   236,     0,     0,   255,   269,   267,   268,
   246,   254,     0,    95,    74,    76,    78,    80,    81,    83,
    84,    86,    87,    88,   220,   225,     0,     0,   230,     0,
   213,     0,     0,     0,     0,     0,     0,   206,   161,     0,
    49,    46,    38,    36,    42,     0,    40,    44,     0,    62,
    71,    20,   234,   231,   129,   167,   164,   159,   141,   182,
   177,   178,   179,   180,   172,   181,   205,   207,   245,   237,
   247,     0,     0,     0,     0,     0,     0,   235,   165,   173,
   208,   137,   238,   136,   258,   248,     0,   133,     0,     0,
   276,   174,   134,   257,   270,   271,   272,     0,   263,   264,
   273,   249,     0,     0,   259,   260,     0,     0,   280,   189,
   196,   194,   175,   185,   186,   193,   135,   261,   265,   274,
   277,   250,     0,     0,     0,     0,     0,     0,   191,     0,
     0,     0,     0,   190,   197,   195,   176,   184,   199,   187,
   192,   262,   266,     0,   278,     0,     0,     0,   275,     0,
   198,   200,   188,   284,     0,   281,   279,   282,     0,   283,
     0,     0,     0
};

static const short yydefgoto[] = {   391,
    10,    11,    40,    39,    41,    35,    34,    24,    12,    26,
   114,   172,   257,    13,    14,    38,   125,   186,    15,    27,
    16,    37,   100,   146,   187,   232,   231,   235,   233,   236,
   229,   123,   145,   228,   159,   109,   128,    57,    17,    18,
    25,   111,   148,   243,    58,   280,   160,   161,   162,   163,
   164,   165,   166,   167,   168,   169,   170,    19,    28,    75,
   116,   220,    77,    78,    79,    80,   135,   175,   260,   136,
   313,   318,   334,   137,   138,    81,    60,    61,    82,    83,
    84,    85,    86,    87,    29,   119,   177,   264,   221,   227,
   269,   263,   303,   262,    88,    30,   120,   178,   266,   304,
   317,   333,   356,   295,   343,   357,   344,   358,   378,   353,
   345,   359,   346,   355,   354,   376,   370,   377,    89,    31,
   121,   179,   267,   225,   268,   305,   226,    90,   140,   218,
    91,   115,   173,    92,   130,   210,    67,    93,   131,   211,
    69,   139,   174,   215,   259,   216,   258,   302,   190,   276,
   306,   191,    23,    32,   122,   180,   270,   193,   279,   307,
   321,   339,   194,   241,   316,   319,   320,   328,   336,   360,
   329,   337,   361,   242,   330,   332,   338,   362,   352,   363,
   380,   385,   386,   389
};

static const short yypact[] = {   455,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
    99,-32768,-32768,-32768,     0,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,   -14,   128,    35,    45,   391,    45,    45,
    45,    45,-32768,    12,    48,-32768,-32768,     5,    74,    87,
   100,-32768,-32768,    41,-32768,    47,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,   105,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,    85,-32768,    88,-32768,
-32768,-32768,-32768,   105,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
   -10,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,    22,
-32768,-32768,-32768,-32768,-32768,-32768,   147,-32768,    45,-32768,
    45,-32768,-32768,   109,    94,    45,-32768,-32768,   112,   144,
   117,   118,-32768,   105,-32768,-32768,-32768,    45,-32768,    29,
    29,-32768,-32768,   102,-32768,-32768,-32768,-32768,-32768,    29,
-32768,-32768,-32768,-32768,   116,   280,-32768,   119,-32768,-32768,
-32768,-32768,-32768,-32768,    36,    36,    36,    29,   105,-32768,
   120,   115,   121,    65,    69,     3,-32768,-32768,-32768,-32768,
-32768,    39,   414,   108,   126,-32768,   367,   122,   176,-32768,
-32768,-32768,-32768,-32768,-32768,   131,-32768,-32768,-32768,-32768,
   152,-32768,-32768,   207,-32768,-32768,-32768,-32768,   123,    29,
    29,    29,    29,    29,    29,    29,    29,    29,    29,   125,
   138,-32768,-32768,-32768,-32768,-32768,-32768,   148,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,   182,    22,   164,-32768,
   166,   167,   178,-32768,   180,   181,-32768,   105,-32768,-32768,
-32768,-32768,    29,-32768,   115,   121,    65,    69,    69,     3,
     3,-32768,-32768,-32768,-32768,-32768,   183,    29,   108,    45,
-32768,   187,    45,   186,   343,    21,   188,   189,-32768,   192,
   105,-32768,-32768,-32768,-32768,   431,-32768,-32768,   226,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,   230,   105,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,   175,   196,   185,   176,    45,   194,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,   195,-32768,   197,   193,   198,    59,
   214,-32768,-32768,-32768,-32768,-32768,-32768,   199,-32768,-32768,
-32768,-32768,    86,    45,-32768,   208,   431,   201,   223,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,   217,    29,   215,   218,    96,   391,   101,    59,
    45,    22,   204,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,   205,-32768,   219,    45,   224,-32768,   231,
-32768,-32768,-32768,-32768,   209,   222,-32768,-32768,   235,-32768,
   275,   277,-32768
};

static const short yypgoto[] = {-32768,
     6,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,   -84,-32768,-32768,   -19,-32768,-32768,   -27,-32768,   134,
-32768,-32768,-32768,-32768,-32768,-32768,  -147,-32768,    82,    84,
    98,   -74,   -73,  -100,   -41,-32768,  -112,   140,-32768,-32768,
-32768,   -21,   129,  -174,-32768,-32768,    43,-32768,-32768,  -242,
-32768,-32768,-32768,  -283,-32768,   -17,-32768,-32768,   279,   -13,
   -12,   -11,-32768,    15,-32768,-32768,-32768,-32768,-32768,    92,
   139,-32768,-32768,-32768,    16,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,   -42,-32768,-32768,-32768,
-32768,-32768,   -40,-32768,-32768,-32768,-32768,-32768,    10,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,    17,-32768,-32768,-32768,
-32768,-32768,-32768,   -24,-32768,-32768,-32768,   292,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,    61,-32768,-32768,-32768,-32768,
-32768,-32768,   177,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
   -39,-32768,-32768,  -254,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768
};


#define	YYLAST		480


static const short yytable[] = {    71,
    66,    94,    95,    96,    97,    56,    76,    59,    74,    22,
   199,    63,    64,    65,    20,    21,    33,   285,   171,   239,
    22,   300,   314,    43,    43,    20,    21,   176,   289,    45,
    46,    43,    42,    49,    50,    51,    52,    70,    43,     1,
   117,     8,     2,     3,     4,     5,   -57,    43,   105,    36,
   347,   106,   101,   118,   107,   108,     6,     7,    98,     8,
   207,   208,   209,     9,    55,    55,   149,   150,   151,   152,
   153,   154,    55,   149,   150,   151,   152,   153,   154,    55,
   124,   127,   349,   129,   155,   156,   340,    -3,   134,   157,
   158,   325,   326,   327,    99,   281,   340,   158,    -3,     1,
   147,   239,     2,     3,     4,     5,   252,   253,   254,   203,
   204,   341,   342,   196,   197,   198,     6,     7,   373,     8,
   102,   341,   342,     9,   205,   206,   341,   342,   248,   249,
    43,   250,   251,   103,   382,    44,    45,    46,    47,    48,
    49,    50,    51,    52,  -183,   283,   104,    -3,   110,   112,
    53,    54,   113,    74,   126,    22,   132,    74,   133,   141,
    20,    21,   239,   142,   143,   144,   181,  -228,   201,   240,
   195,    55,   200,   214,   238,   202,   217,   212,   224,   230,
   234,    22,   219,   223,    43,   244,    20,    21,   255,    44,
    45,    46,    47,    48,    49,    50,    51,    52,    72,     6,
     7,   256,     8,    73,    53,    54,   365,    74,   271,    43,
   272,   261,   273,   274,    44,    45,    46,    47,    48,    49,
    50,    51,    52,    72,   275,    55,   277,   278,   301,    53,
  -244,   282,   134,   286,   288,   134,   297,   105,   237,   298,
   299,   308,   309,   323,   322,    74,   290,   310,   291,   331,
    55,   240,   292,   293,   294,   315,   238,  -256,   348,   351,
   324,   335,   350,   364,   366,   375,   367,   379,   381,   384,
   383,   387,   388,   390,   392,   296,   393,   374,   312,   188,
   182,   245,  -253,     2,   246,   189,     5,  -253,  -253,  -253,
  -253,  -253,  -253,  -253,  -253,  -253,  -253,     6,     7,   247,
     8,   213,  -253,    62,     9,   287,   312,   183,  -240,   184,
   185,  -253,   240,   265,   368,   222,    68,   238,   371,   284,
   372,   311,   192,  -253,     0,     0,     0,     0,   -25,     0,
     0,     0,     0,   134,     0,     0,   369,     0,    74,     0,
     0,     0,   124,   219,     0,    43,     0,     0,     0,   134,
    44,    45,    46,    47,    48,    49,    50,    51,    52,    72,
     6,     7,     0,     8,    73,    53,    54,   219,     0,    43,
     0,     0,     0,     0,    44,    45,    46,    47,    48,    49,
    50,    51,    52,    72,     6,     7,    55,     8,    73,    53,
    54,  -160,     0,    43,     0,     0,     0,     0,    44,    45,
    46,    47,    48,    49,    50,    51,    52,    72,     6,     7,
    55,     8,    73,    53,    54,     0,    43,     0,     0,     0,
     0,    44,    45,    46,    47,    48,    49,    50,    51,    52,
    72,     0,     0,    43,    55,    73,    53,    54,    44,    45,
    46,    47,    48,    49,    50,    51,    52,    72,     0,     0,
     0,     0,     0,    53,    -3,     1,     0,    55,     2,     3,
     4,     5,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     6,     7,    55,     8,     0,     0,     0,     9
};

static const short yycheck[] = {    27,
    25,    29,    30,    31,    32,    25,    28,    25,    28,     0,
   158,    25,    25,    25,     0,     0,    11,   260,   131,   194,
    11,   276,   306,     3,     3,    11,    11,   140,     8,     9,
    10,     3,    47,    13,    14,    15,    16,     3,     3,     1,
    51,    21,     4,     5,     6,     7,    47,     3,     8,    50,
   334,    11,    48,    64,     8,     9,    18,    19,    47,    21,
    58,    59,    60,    25,    44,    44,    38,    39,    40,    41,
    42,    43,    44,    38,    39,    40,    41,    42,    43,    44,
   100,   109,   337,   111,    56,    57,     1,    49,   116,    61,
    62,    33,    34,    35,    47,   243,     1,    62,     0,     1,
   128,   276,     4,     5,     6,     7,   207,   208,   209,    45,
    46,    26,    27,   155,   156,   157,    18,    19,   361,    21,
    47,    26,    27,    25,    56,    57,    26,    27,   203,   204,
     3,   205,   206,    47,   377,     8,     9,    10,    11,    12,
    13,    14,    15,    16,    49,   258,    47,    49,    44,    65,
    23,    24,    65,   173,     8,   146,    48,   177,    65,    48,
   146,   146,   337,    20,    48,    48,    51,    66,    54,   194,
    52,    44,    53,    66,   194,    55,    51,   172,     3,    49,
    29,   172,     1,    62,     3,    63,   172,   172,    64,     8,
     9,    10,    11,    12,    13,    14,    15,    16,    17,    18,
    19,    64,    21,    22,    23,    24,   354,   227,   228,     3,
    47,    64,    47,    47,     8,     9,    10,    11,    12,    13,
    14,    15,    16,    17,    47,    44,    47,    47,     3,    23,
    49,    49,   260,    47,    49,   263,    49,     8,    32,    51,
    49,    67,    47,    51,    48,   265,   266,    63,   266,    36,
    44,   276,   266,   266,   266,    62,   276,    63,    51,    37,
    63,    63,    62,    47,    50,    62,    49,    63,    50,    39,
    47,    63,    51,    39,     0,   266,     0,   362,   306,   146,
     1,   200,     3,     4,   201,   146,     7,     8,     9,    10,
    11,    12,    13,    14,    15,    16,    17,    18,    19,   202,
    21,   173,    23,    25,    25,   263,   334,    28,    29,    30,
    31,    32,   337,   222,   357,   177,    25,   337,   359,   259,
   360,   305,   146,    44,    -1,    -1,    -1,    -1,    49,    -1,
    -1,    -1,    -1,   361,    -1,    -1,   358,    -1,   358,    -1,
    -1,    -1,   362,     1,    -1,     3,    -1,    -1,    -1,   377,
     8,     9,    10,    11,    12,    13,    14,    15,    16,    17,
    18,    19,    -1,    21,    22,    23,    24,     1,    -1,     3,
    -1,    -1,    -1,    -1,     8,     9,    10,    11,    12,    13,
    14,    15,    16,    17,    18,    19,    44,    21,    22,    23,
    24,    49,    -1,     3,    -1,    -1,    -1,    -1,     8,     9,
    10,    11,    12,    13,    14,    15,    16,    17,    18,    19,
    44,    21,    22,    23,    24,    -1,     3,    -1,    -1,    -1,
    -1,     8,     9,    10,    11,    12,    13,    14,    15,    16,
    17,    -1,    -1,     3,    44,    22,    23,    24,     8,     9,
    10,    11,    12,    13,    14,    15,    16,    17,    -1,    -1,
    -1,    -1,    -1,    23,     0,     1,    -1,    44,     4,     5,
     6,     7,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    18,    19,    44,    21,    -1,    -1,    -1,    25
};
/* -*-C-*-  Note some compilers choke on comments on `#line' lines.  */
#line 3 "/project/mambo/gokhale/share/bison.simple"

/* Skeleton output parser for bison,
   Copyright (C) 1984, 1989, 1990 Free Software Foundation, Inc.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2, or (at your option)
   any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.  */

/* As a special exception, when this file is copied by Bison into a
   Bison output file, you may use that output file without restriction.
   This special exception was added by the Free Software Foundation
   in version 1.24 of Bison.  */

#ifndef alloca
#ifdef __GNUC__
#define alloca __builtin_alloca
#else /* not GNU C.  */
#if (!defined (__STDC__) && defined (sparc)) || defined (__sparc__) || defined (__sparc) || defined (__sgi)
#include <alloca.h>
#else /* not sparc */
#if defined (MSDOS) && !defined (__TURBOC__)
#include <malloc.h>
#else /* not MSDOS, or __TURBOC__ */
#if defined(_AIX)
#include <malloc.h>
 #pragma alloca
#else /* not MSDOS, __TURBOC__, or _AIX */
#ifdef __hpux
#ifdef __cplusplus
extern "C" {
void *alloca (unsigned int);
};
#else /* not __cplusplus */
void *alloca ();
#endif /* not __cplusplus */
#endif /* __hpux */
#endif /* not _AIX */
#endif /* not MSDOS, or __TURBOC__ */
#endif /* not sparc.  */
#endif /* not GNU C.  */
#endif /* alloca not defined.  */

/* This is the parser code that is written into each bison parser
  when the %semantic_parser declaration is not specified in the grammar.
  It was written by Richard Stallman by simplifying the hairy parser
  used when %semantic_parser is specified.  */

/* Note: there must be only one dollar sign in this file.
   It is replaced by the list of actions, each action
   as one case of the switch.  */

#define yyerrok		(yyerrstatus = 0)
#define yyclearin	(yychar = YYEMPTY)
#define YYEMPTY		-2
#define YYEOF		0
#define YYACCEPT	return(0)
#define YYABORT 	return(1)
#define YYERROR		goto yyerrlab1
/* Like YYERROR except do call yyerror.
   This remains here temporarily to ease the
   transition to the new meaning of YYERROR, for GCC.
   Once GCC version 2 has supplanted version 1, this can go.  */
#define YYFAIL		goto yyerrlab
#define YYRECOVERING()  (!!yyerrstatus)
#define YYBACKUP(token, value) \
do								\
  if (yychar == YYEMPTY && yylen == 1)				\
    { yychar = (token), yylval = (value);			\
      yychar1 = YYTRANSLATE (yychar);				\
      YYPOPSTACK;						\
      goto yybackup;						\
    }								\
  else								\
    { yyerror ("syntax error: cannot back up"); YYERROR; }	\
while (0)

#define YYTERROR	1
#define YYERRCODE	256

#ifndef YYPURE
#define YYLEX		yylex()
#endif

#ifdef YYPURE
#ifdef YYLSP_NEEDED
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, &yylloc, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval, &yylloc)
#endif
#else /* not YYLSP_NEEDED */
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval)
#endif
#endif /* not YYLSP_NEEDED */
#endif

/* If nonreentrant, generate the variables here */

#ifndef YYPURE

int	yychar;			/*  the lookahead symbol		*/
YYSTYPE	yylval;			/*  the semantic value of the		*/
				/*  lookahead symbol			*/

#ifdef YYLSP_NEEDED
YYLTYPE yylloc;			/*  location data for the lookahead	*/
				/*  symbol				*/
#endif

int yynerrs;			/*  number of parse errors so far       */
#endif  /* not YYPURE */

#if YYDEBUG != 0
int yydebug;			/*  nonzero means print parse trace	*/
/* Since this is uninitialized, it does not stop multiple parsers
   from coexisting.  */
#endif

/*  YYINITDEPTH indicates the initial size of the parser's stacks	*/

#ifndef	YYINITDEPTH
#define YYINITDEPTH 200
#endif

/*  YYMAXDEPTH is the maximum size the stacks can grow to
    (effective only if the built-in stack extension method is used).  */

#if YYMAXDEPTH == 0
#undef YYMAXDEPTH
#endif

#ifndef YYMAXDEPTH
#define YYMAXDEPTH 10000
#endif

/* Prevent warning if -Wstrict-prototypes.  */
#ifdef __GNUC__
int yyparse (void);
#endif

#if __GNUC__ > 1		/* GNU C and GNU C++ define this.  */
#define __yy_memcpy(TO,FROM,COUNT)	__builtin_memcpy(TO,FROM,COUNT)
#else				/* not GNU C or C++ */
#ifndef __cplusplus

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (to, from, count)
     char *to;
     char *from;
     int count;
{
  register char *f = from;
  register char *t = to;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#else /* __cplusplus */

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (char *to, char *from, int count)
{
  register char *f = from;
  register char *t = to;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#endif
#endif

#line 196 "/project/mambo/gokhale/share/bison.simple"

/* The user can define YYPARSE_PARAM as the name of an argument to be passed
   into yyparse.  The argument should have type void *.
   It should actually point to an object.
   Grammar actions can access the variable by casting it
   to the proper pointer type.  */

#ifdef YYPARSE_PARAM
#ifdef __cplusplus
#define YYPARSE_PARAM_ARG void *YYPARSE_PARAM
#define YYPARSE_PARAM_DECL
#else /* not __cplusplus */
#define YYPARSE_PARAM_ARG YYPARSE_PARAM
#define YYPARSE_PARAM_DECL void *YYPARSE_PARAM;
#endif /* not __cplusplus */
#else /* not YYPARSE_PARAM */
#define YYPARSE_PARAM_ARG
#define YYPARSE_PARAM_DECL
#endif /* not YYPARSE_PARAM */

int
yyparse(YYPARSE_PARAM_ARG)
     YYPARSE_PARAM_DECL
{
  register int yystate;
  register int yyn;
  register short *yyssp;
  register YYSTYPE *yyvsp;
  int yyerrstatus;	/*  number of tokens to shift before error messages enabled */
  int yychar1 = 0;		/*  lookahead token as an internal (translated) token number */

  short	yyssa[YYINITDEPTH];	/*  the state stack			*/
  YYSTYPE yyvsa[YYINITDEPTH];	/*  the semantic value stack		*/

  short *yyss = yyssa;		/*  refer to the stacks thru separate pointers */
  YYSTYPE *yyvs = yyvsa;	/*  to allow yyoverflow to reallocate them elsewhere */

#ifdef YYLSP_NEEDED
  YYLTYPE yylsa[YYINITDEPTH];	/*  the location stack			*/
  YYLTYPE *yyls = yylsa;
  YYLTYPE *yylsp;

#define YYPOPSTACK   (yyvsp--, yyssp--, yylsp--)
#else
#define YYPOPSTACK   (yyvsp--, yyssp--)
#endif

  int yystacksize = YYINITDEPTH;

#ifdef YYPURE
  int yychar;
  YYSTYPE yylval;
  int yynerrs;
#ifdef YYLSP_NEEDED
  YYLTYPE yylloc;
#endif
#endif

  YYSTYPE yyval;		/*  the variable used to return		*/
				/*  semantic values from the action	*/
				/*  routines				*/

  int yylen;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Starting parse\n");
#endif

  yystate = 0;
  yyerrstatus = 0;
  yynerrs = 0;
  yychar = YYEMPTY;		/* Cause a token to be read.  */

  /* Initialize stack pointers.
     Waste one element of value and location stack
     so that they stay on the same level as the state stack.
     The wasted elements are never initialized.  */

  yyssp = yyss - 1;
  yyvsp = yyvs;
#ifdef YYLSP_NEEDED
  yylsp = yyls;
#endif

/* Push a new state, which is found in  yystate  .  */
/* In all cases, when you get here, the value and location stacks
   have just been pushed. so pushing a state here evens the stacks.  */
yynewstate:

  *++yyssp = yystate;

  if (yyssp >= yyss + yystacksize - 1)
    {
      /* Give user a chance to reallocate the stack */
      /* Use copies of these so that the &'s don't force the real ones into memory. */
      YYSTYPE *yyvs1 = yyvs;
      short *yyss1 = yyss;
#ifdef YYLSP_NEEDED
      YYLTYPE *yyls1 = yyls;
#endif

      /* Get the current used size of the three stacks, in elements.  */
      int size = yyssp - yyss + 1;

#ifdef yyoverflow
      /* Each stack pointer address is followed by the size of
	 the data in use in that stack, in bytes.  */
#ifdef YYLSP_NEEDED
      /* This used to be a conditional around just the two extra args,
	 but that might be undefined if yyoverflow is a macro.  */
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yyls1, size * sizeof (*yylsp),
		 &yystacksize);
#else
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yystacksize);
#endif

      yyss = yyss1; yyvs = yyvs1;
#ifdef YYLSP_NEEDED
      yyls = yyls1;
#endif
#else /* no yyoverflow */
      /* Extend the stack our own way.  */
      if (yystacksize >= YYMAXDEPTH)
	{
	  yyerror("parser stack overflow");
	  return 2;
	}
      yystacksize *= 2;
      if (yystacksize > YYMAXDEPTH)
	yystacksize = YYMAXDEPTH;
      yyss = (short *) alloca (yystacksize * sizeof (*yyssp));
      __yy_memcpy ((char *)yyss, (char *)yyss1, size * sizeof (*yyssp));
      yyvs = (YYSTYPE *) alloca (yystacksize * sizeof (*yyvsp));
      __yy_memcpy ((char *)yyvs, (char *)yyvs1, size * sizeof (*yyvsp));
#ifdef YYLSP_NEEDED
      yyls = (YYLTYPE *) alloca (yystacksize * sizeof (*yylsp));
      __yy_memcpy ((char *)yyls, (char *)yyls1, size * sizeof (*yylsp));
#endif
#endif /* no yyoverflow */

      yyssp = yyss + size - 1;
      yyvsp = yyvs + size - 1;
#ifdef YYLSP_NEEDED
      yylsp = yyls + size - 1;
#endif

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Stack size increased to %d\n", yystacksize);
#endif

      if (yyssp >= yyss + yystacksize - 1)
	YYABORT;
    }

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Entering state %d\n", yystate);
#endif

  goto yybackup;
 yybackup:

/* Do appropriate processing given the current state.  */
/* Read a lookahead token if we need one and don't already have one.  */
/* yyresume: */

  /* First try to decide what to do without reference to lookahead token.  */

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* yychar is either YYEMPTY or YYEOF
     or a valid token in external form.  */

  if (yychar == YYEMPTY)
    {
#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Reading a token: ");
#endif
      yychar = YYLEX;
    }

  /* Convert token to internal form (in yychar1) for indexing tables with */

  if (yychar <= 0)		/* This means end of input. */
    {
      yychar1 = 0;
      yychar = YYEOF;		/* Don't call YYLEX any more */

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Now at end of input.\n");
#endif
    }
  else
    {
      yychar1 = YYTRANSLATE(yychar);

#if YYDEBUG != 0
      if (yydebug)
	{
	  fprintf (stderr, "Next token is %d (%s", yychar, yytname[yychar1]);
	  /* Give the individual parser a way to print the precise meaning
	     of a token, for further debugging info.  */
#ifdef YYPRINT
	  YYPRINT (stderr, yychar, yylval);
#endif
	  fprintf (stderr, ")\n");
	}
#endif
    }

  yyn += yychar1;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != yychar1)
    goto yydefault;

  yyn = yytable[yyn];

  /* yyn is what to do for this token type in this state.
     Negative => reduce, -yyn is rule number.
     Positive => shift, yyn is new state.
       New state is final state => don't bother to shift,
       just return success.
     0, or most negative number => error.  */

  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrlab;

  if (yyn == YYFINAL)
    YYACCEPT;

  /* Shift the lookahead token.  */

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting token %d (%s), ", yychar, yytname[yychar1]);
#endif

  /* Discard the token being shifted unless it is eof.  */
  if (yychar != YYEOF)
    yychar = YYEMPTY;

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  /* count tokens shifted since error; after three, turn off error status.  */
  if (yyerrstatus) yyerrstatus--;

  yystate = yyn;
  goto yynewstate;

/* Do the default action for the current state.  */
yydefault:

  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;

/* Do a reduction.  yyn is the number of a rule to reduce with.  */
yyreduce:
  yylen = yyr2[yyn];
  if (yylen > 0)
    yyval = yyvsp[1-yylen]; /* implement default value of the action */

#if YYDEBUG != 0
  if (yydebug)
    {
      int i;

      fprintf (stderr, "Reducing via rule %d (line %d), ",
	       yyn, yyrline[yyn]);

      /* Print the symbols being reduced, and their result.  */
      for (i = yyprhs[yyn]; yyrhs[i] > 0; i++)
	fprintf (stderr, "%s ", yytname[yyrhs[i]]);
      fprintf (stderr, " -> %s\n", yytname[yyr1[yyn]]);
    }
#endif


  switch (yyn) {

case 4:
#line 235 "idl.yy"
{
	  idl_global->set_parse_state(IDL_GlobalData::PS_TypeDeclSeen);
        ;
    break;}
case 5:
#line 239 "idl.yy"
{
	  idl_global->set_parse_state(IDL_GlobalData::PS_NoState);
        ;
    break;}
case 6:
#line 243 "idl.yy"
{
	  idl_global->set_parse_state(IDL_GlobalData::PS_ConstDeclSeen);
        ;
    break;}
case 7:
#line 247 "idl.yy"
{
	  idl_global->set_parse_state(IDL_GlobalData::PS_NoState);
        ;
    break;}
case 8:
#line 251 "idl.yy"
{
	  idl_global->set_parse_state(IDL_GlobalData::PS_ExceptDeclSeen);
        ;
    break;}
case 9:
#line 255 "idl.yy"
{
	  idl_global->set_parse_state(IDL_GlobalData::PS_NoState);
        ;
    break;}
case 10:
#line 259 "idl.yy"
{
	  idl_global->set_parse_state(IDL_GlobalData::PS_InterfaceDeclSeen);
        ;
    break;}
case 11:
#line 263 "idl.yy"
{
	  idl_global->set_parse_state(IDL_GlobalData::PS_NoState);
        ;
    break;}
case 12:
#line 267 "idl.yy"
{
	  idl_global->set_parse_state(IDL_GlobalData::PS_ModuleDeclSeen);
        ;
    break;}
case 13:
#line 271 "idl.yy"
{
	  idl_global->set_parse_state(IDL_GlobalData::PS_NoState);
        ;
    break;}
case 14:
#line 275 "idl.yy"
{
	  idl_global->err()->syntax_error(idl_global->parse_state());
	;
    break;}
case 15:
#line 279 "idl.yy"
{
	  idl_global->set_parse_state(IDL_GlobalData::PS_NoState);
	  yyerrok;
	;
    break;}
case 16:
#line 286 "idl.yy"
{
	    idl_global->set_parse_state(IDL_GlobalData::PS_ModuleSeen);
	  ;
    break;}
case 17:
#line 290 "idl.yy"
{
	    UTL_ScopedName 	*n =
		new UTL_ScopedName(new Identifier(yyvsp[0].strval, 1, 0, I_FALSE), NULL);
	    AST_Module		*m = NULL;
	    UTL_Scope		*s = idl_global->scopes()->top_non_null();
	    UTL_StrList		*p = idl_global->pragmas();

	    idl_global->set_parse_state(IDL_GlobalData::PS_ModuleIDSeen);
	    /*
	     * Make a new module and add it to the enclosing scope
	     */
	    if (s != NULL) {
	      m = idl_global->gen()->create_module(n, p);
	      (void) s->fe_add_module(m);
	    }
	    /*
	     * Push it on the stack
	     */
	    idl_global->scopes()->push(m);
	  ;
    break;}
case 18:
#line 311 "idl.yy"
{
	    idl_global->set_parse_state(IDL_GlobalData::PS_ModuleSqSeen);
	  ;
    break;}
case 19:
#line 315 "idl.yy"
{
	    idl_global->set_parse_state(IDL_GlobalData::PS_ModuleBodySeen);
	  ;
    break;}
case 20:
#line 319 "idl.yy"
{
	    idl_global->set_parse_state(IDL_GlobalData::PS_ModuleQsSeen);
	    /*
	     * Finished with this module - pop it from the scope stack
	     */
	    idl_global->scopes()->pop();
	  ;
    break;}
case 23:
#line 335 "idl.yy"
{
	  UTL_Scope     *s = idl_global->scopes()->top_non_null();
	  AST_Interface *i = NULL;
	  AST_Decl	*v = NULL;
	  UTL_StrList   *p = idl_global->pragmas();
	  AST_Decl	*d = NULL;
	  AST_Interface *fd = NULL;

	  ACE_UNUSED_ARG (v);

	  /*
	   * Make a new interface node and add it to its enclosing scope
	   */
	  if (s != NULL && yyvsp[0].ihval != NULL) {
	    i = idl_global->gen()->create_interface(yyvsp[0].ihval->interface_name(),
						    yyvsp[0].ihval->inherits(),
						    yyvsp[0].ihval->n_inherits(),
						    p);
	    if (i != NULL &&
		(d = s->lookup_by_name(i->name(), I_FALSE)) != NULL) {
	      /*
	       * See if we're defining a forward declared interface.
	       */
	      if (d->node_type() == AST_Decl::NT_interface) {
		/*
		 * Narrow to an interface
		 */
		fd = AST_Interface::narrow_from_decl(d);
		/*
		 * Successful?
		 */
		if (fd == NULL) {
		  /*
		   * Should we give an error here?
		   */
		}
		/*
		 * If it is a forward declared interface..
		 */
		else if (!fd->is_defined()) {
		  /*
		   * Check if redefining in same scope
		   */
		  if (fd->defined_in() != s) {
		    idl_global->err()
		       ->error3(UTL_Error::EIDL_SCOPE_CONFLICT,
				i,
				fd,
				ScopeAsDecl(s));
		  }
		  /*
		   * All OK, do the redefinition
		   */
		  else {
		    fd->set_inherits(yyvsp[0].ihval->inherits());
		    fd->set_n_inherits(yyvsp[0].ihval->n_inherits());
		    /*
		     * Update place of definition
		     */
		    fd->set_imported(idl_global->imported());
		    fd->set_in_main_file(idl_global->in_main_file());
		    fd->set_line(idl_global->lineno());
		    fd->set_file_name(idl_global->filename());
		    fd->add_pragmas(p);
		    /*
		     * Use full definition node
		     */
		    delete i;
		    i = fd;
		  }
	        }
	      }
	    }
	    /*
	     * Add the interface to its definition scope
	     */
	    (void) s->fe_add_interface(i);
	  }
	  /*
	   * Push it on the scope stack
	   */
	  idl_global->scopes()->push(i);
        ;
    break;}
case 24:
#line 419 "idl.yy"
{
	  idl_global->set_parse_state(IDL_GlobalData::PS_InterfaceSqSeen);
	;
    break;}
case 25:
#line 423 "idl.yy"
{
	  idl_global->set_parse_state(IDL_GlobalData::PS_InterfaceBodySeen);
	;
    break;}
case 26:
#line 427 "idl.yy"
{
	  idl_global->set_parse_state(IDL_GlobalData::PS_InterfaceQsSeen);
	  /*
	   * Done with this interface - pop it off the scopes stack
	   */
	  idl_global->scopes()->pop();
	;
    break;}
case 27:
#line 438 "idl.yy"
{
	   idl_global->set_parse_state(IDL_GlobalData::PS_InterfaceSeen);
	 ;
    break;}
case 28:
#line 442 "idl.yy"
{
	   idl_global->set_parse_state(IDL_GlobalData::PS_InterfaceIDSeen);
	   yyval.idval = yyvsp[0].idval;
	 ;
    break;}
case 29:
#line 450 "idl.yy"
{
	  idl_global->set_parse_state(IDL_GlobalData::PS_InheritSpecSeen);
	  /*
	   * Create an AST representation of the information in the header
	   * part of an interface - this representation contains a computed
	   * list of all interfaces which this interface inherits from,
	   * recursively
	   */
	  yyval.ihval = new FE_InterfaceHeader(new UTL_ScopedName(yyvsp[-1].idval, NULL), yyvsp[0].nlval);
	;
    break;}
case 30:
#line 464 "idl.yy"
{
	  idl_global->set_parse_state(IDL_GlobalData::PS_InheritColonSeen);
        ;
    break;}
case 31:
#line 468 "idl.yy"
{
	  yyval.nlval = yyvsp[0].nlval;
	;
    break;}
case 32:
#line 472 "idl.yy"
{
	  yyval.nlval = NULL;
	;
    break;}
case 35:
#line 484 "idl.yy"
{
	  idl_global->set_parse_state(IDL_GlobalData::PS_TypeDeclSeen);
        ;
    break;}
case 36:
#line 488 "idl.yy"
{
	  idl_global->set_parse_state(IDL_GlobalData::PS_NoState);
        ;
    break;}
case 37:
#line 492 "idl.yy"
{
	  idl_global->set_parse_state(IDL_GlobalData::PS_ConstDeclSeen);
        ;
    break;}
case 38:
#line 496 "idl.yy"
{
	  idl_global->set_parse_state(IDL_GlobalData::PS_NoState);
        ;
    break;}
case 39:
#line 500 "idl.yy"
{
	  idl_global->set_parse_state(IDL_GlobalData::PS_ExceptDeclSeen);
        ;
    break;}
case 40:
#line 504 "idl.yy"
{
	  idl_global->set_parse_state(IDL_GlobalData::PS_NoState);
        ;
    break;}
case 41:
#line 508 "idl.yy"
{
	  idl_global->set_parse_state(IDL_GlobalData::PS_AttrDeclSeen);
        ;
    break;}
case 42:
#line 512 "idl.yy"
{
	  idl_global->set_parse_state(IDL_GlobalData::PS_NoState);
        ;
    break;}
case 43:
#line 516 "idl.yy"
{
	  idl_global->set_parse_state(IDL_GlobalData::PS_OpDeclSeen);
        ;
    break;}
case 44:
#line 520 "idl.yy"
{
	  idl_global->set_parse_state(IDL_GlobalData::PS_NoState);
        ;
    break;}
case 45:
#line 524 "idl.yy"
{
	  idl_global->err()->syntax_error(idl_global->parse_state());
	;
    break;}
case 46:
#line 528 "idl.yy"
{
	  idl_global->set_parse_state(IDL_GlobalData::PS_NoState);
	  yyerrok;
	;
    break;}
case 47:
#line 536 "idl.yy"
{
	  yyval.nlval = new UTL_NameList(yyvsp[-1].idlist, yyvsp[0].nlval);
	;
    break;}
case 48:
#line 544 "idl.yy"
{
	  idl_global->set_parse_state(IDL_GlobalData::PS_SNListCommaSeen);
        ;
    break;}
case 49:
#line 548 "idl.yy"
{
	  idl_global->set_parse_state(IDL_GlobalData::PS_ScopedNameSeen);

	  if (yyvsp[-3].nlval == NULL)
	    yyval.nlval = new UTL_NameList(yyvsp[0].idlist, NULL);
	  else {
	    yyvsp[-3].nlval->nconc(new UTL_NameList(yyvsp[0].idlist, NULL));
	    yyval.nlval = yyvsp[-3].nlval;
	  }
	;
    break;}
case 50:
#line 559 "idl.yy"
{
	  yyval.nlval = NULL;
	;
    break;}
case 51:
#line 566 "idl.yy"
{
	  idl_global->set_parse_state(IDL_GlobalData::PS_SN_IDSeen);

	  yyval.idlist = new UTL_IdList(yyvsp[0].idval, NULL);
	;
    break;}
case 52:
#line 572 "idl.yy"
{
	  idl_global->set_parse_state(IDL_GlobalData::PS_ScopeDelimSeen);
        ;
    break;}
case 53:
#line 576 "idl.yy"
{
	  idl_global->set_parse_state(IDL_GlobalData::PS_SN_IDSeen);

	  yyval.idlist = new UTL_IdList(new Identifier(yyvsp[-2].strval, 1, 0, I_FALSE),
			      new UTL_IdList(yyvsp[0].idval, NULL));
	;
    break;}
case 54:
#line 584 "idl.yy"
{
	  idl_global->set_parse_state(IDL_GlobalData::PS_ScopeDelimSeen);
        ;
    break;}
case 55:
#line 588 "idl.yy"
{
	  idl_global->set_parse_state(IDL_GlobalData::PS_SN_IDSeen);

	  yyvsp[-3].idlist->nconc(new UTL_IdList(yyvsp[0].idval, NULL));
	  yyval.idlist = yyvsp[-3].idlist;
	;
    break;}
case 56:
#line 597 "idl.yy"
{
            yyval.idval = new Identifier(yyvsp[0].strval, 1, 0, I_FALSE);
        ;
    break;}
case 57:
#line 604 "idl.yy"
{
	  UTL_Scope		*s = idl_global->scopes()->top_non_null();
	  UTL_ScopedName	*n = new UTL_ScopedName(yyvsp[0].idval, NULL);
	  AST_InterfaceFwd	*f = NULL;
	  UTL_StrList		*p = idl_global->pragmas();

	  idl_global->set_parse_state(IDL_GlobalData::PS_ForwardDeclSeen);
	  /*
	   * Create a node representing a forward declaration of an
	   * interface. Store it in the enclosing scope
	   */
	  if (s != NULL) {
	    f = idl_global->gen()->create_interface_fwd(n, p);
	    (void) s->fe_add_interface_fwd(f);
	  }
	;
    break;}
case 58:
#line 624 "idl.yy"
{
	  idl_global->set_parse_state(IDL_GlobalData::PS_ConstSeen);
        ;
    break;}
case 59:
#line 628 "idl.yy"
{
	  idl_global->set_parse_state(IDL_GlobalData::PS_ConstTypeSeen);
        ;
    break;}
case 60:
#line 632 "idl.yy"
{
	  idl_global->set_parse_state(IDL_GlobalData::PS_ConstIDSeen);
        ;
    break;}
case 61:
#line 636 "idl.yy"
{
	  idl_global->set_parse_state(IDL_GlobalData::PS_ConstAssignSeen);
        ;
    break;}
case 62:
#line 640 "idl.yy"
{
	  UTL_ScopedName	*n = new UTL_ScopedName(yyvsp[-4].idval, NULL);
	  UTL_Scope		*s = idl_global->scopes()->top_non_null();
	  AST_Constant		*c = NULL;
	  UTL_StrList		*p = idl_global->pragmas();
	  AST_Decl		*v = NULL;

	  ACE_UNUSED_ARG (v);

	  idl_global->set_parse_state(IDL_GlobalData::PS_ConstExprSeen);
	  /*
	   * Create a node representing a constant declaration. Store
	   * it in the enclosing scope
	   */
	  if (yyvsp[0].exval != NULL && s != NULL) {
	    if (yyvsp[0].exval->coerce(yyvsp[-6].etval) == NULL)
	      idl_global->err()->coercion_error(yyvsp[0].exval, yyvsp[-6].etval);
	    else {
	      c =
		idl_global->gen()->create_constant(yyvsp[-6].etval, yyvsp[0].exval, n, p);
	      (void) s->fe_add_constant(c);
	    }
	  }
	;
    break;}
case 68:
#line 673 "idl.yy"
{
	  yyval.etval = AST_Expression::EV_string;
	;
    break;}
case 69:
#line 677 "idl.yy"
{
	  yyval.etval = AST_Expression::EV_wstring;
        ;
    break;}
case 70:
#line 681 "idl.yy"
{
	  UTL_Scope		*s = idl_global->scopes()->top_non_null();
	  AST_Decl		*d = NULL;
	  AST_PredefinedType	*c = NULL;
	  AST_Typedef		*t = NULL;

	  /*
	   * If the constant's type is a scoped name, it must resolve
	   * to a scalar constant type
	   */
	  if (s != NULL && (d = s->lookup_by_name(yyvsp[0].idlist, I_TRUE)) != NULL) {
	    /*
	     * Look through typedefs
	     */
	    while (d->node_type() == AST_Decl::NT_typedef) {
	      t = AST_Typedef::narrow_from_decl(d);
	      if (t == NULL)
	        break;
	      d = t->base_type();
	    }
	    if (d == NULL)
	      yyval.etval = AST_Expression::EV_any;
	    else if (d->node_type() == AST_Decl::NT_pre_defined) {
	      c = AST_PredefinedType::narrow_from_decl(d);
	      if (c != NULL) {
	         yyval.etval = idl_global->PredefinedTypeToExprType(c->pt());
	      } else {
	         yyval.etval = AST_Expression::EV_any;
	      }
	    } else
	      yyval.etval = AST_Expression::EV_any;
	  } else
	    yyval.etval = AST_Expression::EV_any;
	;
    break;}
case 74:
#line 723 "idl.yy"
{
	  yyval.exval = idl_global->gen()->create_expr(AST_Expression::EC_or, yyvsp[-2].exval, yyvsp[0].exval);
	;
    break;}
case 76:
#line 731 "idl.yy"
{
	  yyval.exval = idl_global->gen()->create_expr(AST_Expression::EC_xor, yyvsp[-2].exval, yyvsp[0].exval);
	;
    break;}
case 78:
#line 739 "idl.yy"
{
	  yyval.exval = idl_global->gen()->create_expr(AST_Expression::EC_and, yyvsp[-2].exval, yyvsp[0].exval);
	;
    break;}
case 80:
#line 747 "idl.yy"
{
	  yyval.exval = idl_global->gen()->create_expr(AST_Expression::EC_right,yyvsp[-2].exval,yyvsp[0].exval);
	;
    break;}
case 81:
#line 751 "idl.yy"
{
	  yyval.exval = idl_global->gen()->create_expr(AST_Expression::EC_left,yyvsp[-2].exval,yyvsp[0].exval);
	;
    break;}
case 83:
#line 759 "idl.yy"
{
	  yyval.exval = idl_global->gen()->create_expr(AST_Expression::EC_add, yyvsp[-2].exval, yyvsp[0].exval);
	;
    break;}
case 84:
#line 763 "idl.yy"
{
	  yyval.exval = idl_global->gen()->create_expr(AST_Expression::EC_minus,yyvsp[-2].exval,yyvsp[0].exval);
	;
    break;}
case 86:
#line 771 "idl.yy"
{
	  yyval.exval = idl_global->gen()->create_expr(AST_Expression::EC_mul, yyvsp[-2].exval, yyvsp[0].exval);
	;
    break;}
case 87:
#line 775 "idl.yy"
{
	  yyval.exval = idl_global->gen()->create_expr(AST_Expression::EC_div, yyvsp[-2].exval, yyvsp[0].exval);
	;
    break;}
case 88:
#line 779 "idl.yy"
{
	  yyval.exval = idl_global->gen()->create_expr(AST_Expression::EC_mod, yyvsp[-2].exval, yyvsp[0].exval);
	;
    break;}
case 90:
#line 787 "idl.yy"
{
	  yyval.exval = idl_global->gen()->create_expr(AST_Expression::EC_u_plus,
					      yyvsp[0].exval,
					      NULL);
	;
    break;}
case 91:
#line 793 "idl.yy"
{
	  yyval.exval = idl_global->gen()->create_expr(AST_Expression::EC_u_minus,
					      yyvsp[0].exval,
					      NULL);
	;
    break;}
case 92:
#line 799 "idl.yy"
{
	  yyval.exval = idl_global->gen()->create_expr(AST_Expression::EC_bit_neg,
					      yyvsp[0].exval,
					      NULL);
	;
    break;}
case 93:
#line 808 "idl.yy"
{
	  /*
	   * An expression which is a scoped name is not resolved now,
	   * but only when it is evaluated (such as when it is assigned
	   * as a constant value)
	   */
	  yyval.exval = idl_global->gen()->create_expr(yyvsp[0].idlist);
	;
    break;}
case 95:
#line 818 "idl.yy"
{
	  yyval.exval = yyvsp[-1].exval;
	;
    break;}
case 96:
#line 825 "idl.yy"
{
	  yyval.exval = idl_global->gen()->create_expr(yyvsp[0].ival);
	;
    break;}
case 97:
#line 829 "idl.yy"
{
	  yyval.exval = idl_global->gen()->create_expr(yyvsp[0].sval);
	;
    break;}
case 98:
#line 833 "idl.yy"
{
	  yyval.exval = idl_global->gen()->create_expr(yyvsp[0].cval);
	;
    break;}
case 99:
#line 837 "idl.yy"
{
	  yyval.exval = idl_global->gen()->create_expr(yyvsp[0].dval);
	;
    break;}
case 100:
#line 841 "idl.yy"
{
	  yyval.exval = idl_global->gen()->create_expr((idl_bool) I_TRUE,
					    AST_Expression::EV_bool);
	;
    break;}
case 101:
#line 846 "idl.yy"
{
	  yyval.exval = idl_global->gen()->create_expr((idl_bool) I_FALSE,
					    AST_Expression::EV_bool);
	;
    break;}
case 102:
#line 854 "idl.yy"
{
	    yyvsp[0].exval->evaluate(AST_Expression::EK_const);
	    yyval.exval = idl_global->gen()->create_expr(yyvsp[0].exval, AST_Expression::EV_ulong);
	;
    break;}
case 103:
#line 862 "idl.yy"
{
	    idl_global->set_parse_state(IDL_GlobalData::PS_TypedefSeen);
	  ;
    break;}
case 104:
#line 865 "idl.yy"
{yyval.ival = 0;;
    break;}
case 105:
#line 866 "idl.yy"
{ yyval.ival = 0;;
    break;}
case 106:
#line 867 "idl.yy"
{ yyval.ival = 0;;
    break;}
case 107:
#line 868 "idl.yy"
{ yyval.ival = 0;;
    break;}
case 108:
#line 873 "idl.yy"
{
	  idl_global->set_parse_state(IDL_GlobalData::PS_TypeSpecSeen);
        ;
    break;}
case 109:
#line 877 "idl.yy"
{
	  UTL_Scope		*s = idl_global->scopes()->top_non_null();
	  UTL_DecllistActiveIterator *l;
	  FE_Declarator		*d = NULL;
	  AST_Typedef		*t = NULL;
	  AST_Decl		*v = NULL;
	  UTL_StrList		*p = idl_global->pragmas();

          ACE_UNUSED_ARG (v);

	  idl_global->set_parse_state(IDL_GlobalData::PS_DeclaratorsSeen);
	  /*
	   * Create a list of type renamings. Add them to the
	   * enclosing scope
	   */
	  if (s != NULL && yyvsp[-2].dcval != NULL && yyvsp[0].dlval != NULL) {
	    l = new UTL_DecllistActiveIterator(yyvsp[0].dlval);
	    for (;!(l->is_done()); l->next()) {
	      d = l->item();
	      if (d == NULL)
		continue;
              AST_Type * tp = d->compose(yyvsp[-2].dcval);
              if (tp == NULL)
		continue;
	      t = idl_global->gen()->create_typedef(tp, d->name(), p);
	      (void) s->fe_add_typedef(t);
	    }
	    delete l;
	  }
	;
    break;}
case 112:
#line 916 "idl.yy"
{
	  yyval.dcval = idl_global->scopes()->bottom()->lookup_primitive_type(yyvsp[0].etval);
	;
    break;}
case 114:
#line 921 "idl.yy"
{
	  UTL_Scope	*s = idl_global->scopes()->top_non_null();
	  AST_Decl	*d = NULL;

	  if (s != NULL)
	    d = s->lookup_by_name(yyvsp[0].idlist, I_TRUE);
	  if (d == NULL)
	    idl_global->err()->lookup_error(yyvsp[0].idlist);
	  yyval.dcval = d;
	;
    break;}
case 127:
#line 956 "idl.yy"
{
	  yyval.dlval = new UTL_DeclList(yyvsp[-1].deval, yyvsp[0].dlval);
	;
    break;}
case 128:
#line 964 "idl.yy"
{
	  idl_global->set_parse_state(IDL_GlobalData::PS_DeclsCommaSeen);
        ;
    break;}
case 129:
#line 968 "idl.yy"
{
	  idl_global->set_parse_state(IDL_GlobalData::PS_DeclsDeclSeen);

	  if (yyvsp[-3].dlval == NULL)
	    yyval.dlval = new UTL_DeclList(yyvsp[0].deval, NULL);
	  else {
	    yyvsp[-3].dlval->nconc(new UTL_DeclList(yyvsp[0].deval, NULL));
	    yyval.dlval = yyvsp[-3].dlval;
	  }
	;
    break;}
case 130:
#line 979 "idl.yy"
{
	  yyval.dlval = NULL;
	;
    break;}
case 133:
#line 991 "idl.yy"
{
	  yyval.dlval = new UTL_DeclList(yyvsp[-1].deval, yyvsp[0].dlval);
	;
    break;}
case 134:
#line 999 "idl.yy"
{
	  idl_global->set_parse_state(IDL_GlobalData::PS_DeclsCommaSeen);
        ;
    break;}
case 135:
#line 1003 "idl.yy"
{
	  idl_global->set_parse_state(IDL_GlobalData::PS_DeclsDeclSeen);

	  if (yyvsp[-3].dlval == NULL)
	    yyval.dlval = new UTL_DeclList(yyvsp[0].deval, NULL);
	  else {
	    yyvsp[-3].dlval->nconc(new UTL_DeclList(yyvsp[0].deval, NULL));
	    yyval.dlval = yyvsp[-3].dlval;
	  }
	;
    break;}
case 136:
#line 1014 "idl.yy"
{
	  yyval.dlval = NULL;
	;
    break;}
case 137:
#line 1021 "idl.yy"
{
	  yyval.deval = new FE_Declarator(new UTL_ScopedName(yyvsp[0].idval, NULL),
				 FE_Declarator::FD_simple, NULL);
	;
    break;}
case 138:
#line 1029 "idl.yy"
{
	  yyval.deval = new FE_Declarator(new UTL_ScopedName(yyvsp[0].dcval->local_name(), NULL),
				 FE_Declarator::FD_complex,
				 yyvsp[0].dcval);
	;
    break;}
case 141:
#line 1043 "idl.yy"
{
	  yyval.etval = AST_Expression::EV_long;
	;
    break;}
case 142:
#line 1047 "idl.yy"
{
	  yyval.etval = AST_Expression::EV_longlong;
        ;
    break;}
case 143:
#line 1051 "idl.yy"
{
	  yyval.etval = AST_Expression::EV_short;
	;
    break;}
case 144:
#line 1058 "idl.yy"
{
	  yyval.etval = AST_Expression::EV_ulong;
	;
    break;}
case 145:
#line 1062 "idl.yy"
{
	  yyval.etval = AST_Expression::EV_ulonglong;
        ;
    break;}
case 146:
#line 1066 "idl.yy"
{
	  yyval.etval = AST_Expression::EV_ushort;
	;
    break;}
case 147:
#line 1073 "idl.yy"
{
	  yyval.etval = AST_Expression::EV_double;
	;
    break;}
case 148:
#line 1077 "idl.yy"
{
	  yyval.etval = AST_Expression::EV_float;
	;
    break;}
case 149:
#line 1081 "idl.yy"
{
	  yyval.etval = AST_Expression::EV_longdouble;
        ;
    break;}
case 150:
#line 1088 "idl.yy"
{
	  yyval.etval = AST_Expression::EV_char;
	;
    break;}
case 151:
#line 1092 "idl.yy"
{
	  yyval.etval = AST_Expression::EV_wchar;
        ;
    break;}
case 152:
#line 1099 "idl.yy"
{
          yyval.etval = AST_Expression::EV_octet;
	;
    break;}
case 153:
#line 1106 "idl.yy"
{
	  yyval.etval = AST_Expression::EV_bool;
        ;
    break;}
case 154:
#line 1113 "idl.yy"
{
	  yyval.etval = AST_Expression::EV_any;
	;
    break;}
case 155:
#line 1120 "idl.yy"
{
	  idl_global->set_parse_state(IDL_GlobalData::PS_StructSeen);
        ;
    break;}
case 156:
#line 1124 "idl.yy"
{
	  UTL_Scope		*s = idl_global->scopes()->top_non_null();
	  UTL_ScopedName	*n = new UTL_ScopedName(yyvsp[0].idval, NULL);
	  AST_Structure		*d = NULL;
	  UTL_StrList		*p = idl_global->pragmas();
	  AST_Decl		*v = NULL;

          ACE_UNUSED_ARG (v);

	  idl_global->set_parse_state(IDL_GlobalData::PS_StructIDSeen);
	  /*
	   * Create a node representing a struct declaration. Add it
	   * to the enclosing scope
	   */
	  if (s != NULL) {
	    d = idl_global->gen()->create_structure(n, p);
	    (void) s->fe_add_structure(d);
	  }
	  /*
	   * Push the scope of the struct on the scopes stack
	   */
	  idl_global->scopes()->push(d);
	;
    break;}
case 157:
#line 1148 "idl.yy"
{
	  idl_global->set_parse_state(IDL_GlobalData::PS_StructSqSeen);
        ;
    break;}
case 158:
#line 1152 "idl.yy"
{
	  idl_global->set_parse_state(IDL_GlobalData::PS_StructBodySeen);
        ;
    break;}
case 159:
#line 1156 "idl.yy"
{
	  idl_global->set_parse_state(IDL_GlobalData::PS_StructQsSeen);
	  /*
	   * Done with this struct. Pop its scope off the scopes stack
	   */
	  if (idl_global->scopes()->top() == NULL)
	    yyval.dcval = NULL;
	  else {
	    yyval.dcval =
	      AST_Structure::narrow_from_scope(
				   idl_global->scopes()->top_non_null());
	    idl_global->scopes()->pop();
	  }
	;
    break;}
case 163:
#line 1181 "idl.yy"
{
	  idl_global->set_parse_state(IDL_GlobalData::PS_MemberTypeSeen);
        ;
    break;}
case 164:
#line 1185 "idl.yy"
{
	  idl_global->set_parse_state(IDL_GlobalData::PS_MemberDeclsSeen);
        ;
    break;}
case 165:
#line 1189 "idl.yy"
{
	  UTL_Scope		*s = idl_global->scopes()->top_non_null();
	  UTL_DecllistActiveIterator *l = NULL;
	  FE_Declarator		*d = NULL;
	  AST_Field		*f = NULL;
	  UTL_StrList		*p = idl_global->pragmas();

	  idl_global->set_parse_state(IDL_GlobalData::PS_MemberDeclsCompleted);
	  /*
	   * Check for illegal recursive use of type
	   */
	  if (yyvsp[-4].dcval != NULL && AST_illegal_recursive_type(yyvsp[-4].dcval))
	    idl_global->err()->error1(UTL_Error::EIDL_RECURSIVE_TYPE, yyvsp[-4].dcval);
	  /*
	   * Create a node representing a struct or exception member
	   * Add it to the enclosing scope
	   */
	  else if (s != NULL && yyvsp[-4].dcval != NULL && yyvsp[-2].dlval != NULL) {
	    l = new UTL_DecllistActiveIterator(yyvsp[-2].dlval);
	    for (;!(l->is_done()); l->next()) {
	      d = l->item();
	      if (d == NULL)
		continue;
 	      AST_Type *tp = d->compose(yyvsp[-4].dcval);
	      if (tp == NULL)
		continue;
	      f = idl_global->gen()->create_field(tp, d->name(), p);
	      (void) s->fe_add_field(f);
	    }
	    delete l;
	  }
	;
    break;}
case 166:
#line 1222 "idl.yy"
{
	  idl_global->err()->syntax_error(idl_global->parse_state());
	;
    break;}
case 167:
#line 1226 "idl.yy"
{
	  idl_global->set_parse_state(IDL_GlobalData::PS_NoState);
	  yyerrok;
	;
    break;}
case 168:
#line 1234 "idl.yy"
{
	  idl_global->set_parse_state(IDL_GlobalData::PS_UnionSeen);
        ;
    break;}
case 169:
#line 1238 "idl.yy"
{
	  idl_global->set_parse_state(IDL_GlobalData::PS_UnionIDSeen);
        ;
    break;}
case 170:
#line 1242 "idl.yy"
{
	  idl_global->set_parse_state(IDL_GlobalData::PS_SwitchSeen);
        ;
    break;}
case 171:
#line 1246 "idl.yy"
{
	  idl_global->set_parse_state(IDL_GlobalData::PS_SwitchOpenParSeen);
        ;
    break;}
case 172:
#line 1250 "idl.yy"
{
	  idl_global->set_parse_state(IDL_GlobalData::PS_SwitchTypeSeen);
        ;
    break;}
case 173:
#line 1254 "idl.yy"
{
	  UTL_Scope		*s = idl_global->scopes()->top_non_null();
	  UTL_ScopedName	*n = new UTL_ScopedName(yyvsp[-8].idval, NULL);
	  AST_Union		*u = NULL;
	  AST_Decl		*v = NULL;
	  UTL_StrList		*p = idl_global->pragmas();

          ACE_UNUSED_ARG (v);

	  idl_global->set_parse_state(IDL_GlobalData::PS_SwitchCloseParSeen);
	  /*
	   * Create a node representing a union. Add it to its enclosing
	   * scope
	   */
	  if (yyvsp[-2].dcval != NULL && s != NULL) {
 	    AST_ConcreteType    *tp = AST_ConcreteType::narrow_from_decl(yyvsp[-2].dcval);
            if (tp == NULL) {
              idl_global->err()->not_a_type(yyvsp[-2].dcval);
            } else {
	      u = idl_global->gen()->create_union(tp, n, p);
	      (void) s->fe_add_union(u);
 	    }
	  }
	  /*
	   * Push the scope of the union on the scopes stack
	   */
	  idl_global->scopes()->push(u);
	;
    break;}
case 174:
#line 1283 "idl.yy"
{
	  idl_global->set_parse_state(IDL_GlobalData::PS_UnionSqSeen);
        ;
    break;}
case 175:
#line 1287 "idl.yy"
{
	  idl_global->set_parse_state(IDL_GlobalData::PS_UnionBodySeen);
        ;
    break;}
case 176:
#line 1291 "idl.yy"
{
	  idl_global->set_parse_state(IDL_GlobalData::PS_UnionQsSeen);
	  /*
	   * Done with this union. Pop its scope from the scopes stack
	   */
	  if (idl_global->scopes()->top() == NULL)
	    yyval.dcval = NULL;
	  else {
	    yyval.dcval =
	      AST_Union::narrow_from_scope(
				idl_global->scopes()->top_non_null());
	    idl_global->scopes()->pop();
	  }
	;
    break;}
case 177:
#line 1309 "idl.yy"
{
	  yyval.dcval = idl_global->scopes()->bottom()->lookup_primitive_type(yyvsp[0].etval);
	;
    break;}
case 178:
#line 1313 "idl.yy"
{
	  yyval.dcval = idl_global->scopes()->bottom()->lookup_primitive_type(yyvsp[0].etval);
	;
    break;}
case 179:
#line 1317 "idl.yy"
{
	  yyval.dcval = idl_global->scopes()->bottom()->lookup_primitive_type(yyvsp[0].etval);
	;
    break;}
case 180:
#line 1321 "idl.yy"
{
	  yyval.dcval = idl_global->scopes()->bottom()->lookup_primitive_type(yyvsp[0].etval);
	;
    break;}
case 182:
#line 1326 "idl.yy"
{
	  UTL_Scope		*s = idl_global->scopes()->top_non_null();
	  AST_Decl		*d = NULL;
	  AST_PredefinedType	*p = NULL;
	  AST_Typedef		*t = NULL;
	  long			found = I_FALSE;

	  /*
	   * The discriminator is a scoped name. Try to resolve to
	   * one of the scalar types or to an enum. Thread through
	   * typedef's to arrive at the base type at the end of the
	   * chain
	   */
	  if (s != NULL && (d = s->lookup_by_name(yyvsp[0].idlist, I_TRUE)) != NULL) {
	    while (!found) {
	      switch (d->node_type()) {
	      case AST_Decl::NT_enum:
		yyval.dcval = d;
		found = I_TRUE;
		break;
	      case AST_Decl::NT_pre_defined:
		p = AST_PredefinedType::narrow_from_decl(d);
		if (p != NULL) {
		  switch (p->pt()) {
		  case AST_PredefinedType::PT_long:
		  case AST_PredefinedType::PT_ulong:
		  case AST_PredefinedType::PT_longlong:
		  case AST_PredefinedType::PT_ulonglong:
		  case AST_PredefinedType::PT_short:
		  case AST_PredefinedType::PT_char:
		  case AST_PredefinedType::PT_wchar:
		  case AST_PredefinedType::PT_octet:
		  case AST_PredefinedType::PT_boolean:
		    yyval.dcval = p;
		    found = I_TRUE;
		    break;
		  default:
		    yyval.dcval = NULL;
		    found = I_TRUE;
		    break;
		  }
		}
		break;
	      case AST_Decl::NT_typedef:
		t = AST_Typedef::narrow_from_decl(d);
		if (t != NULL) d = t->base_type();
		break;
	      default:
		yyval.dcval = NULL;
		found = I_TRUE;
		break;
	      }
	    }
	  } else
	    yyval.dcval = NULL;

	  if (yyval.dcval == NULL)
	    idl_global->err()->lookup_error(yyvsp[0].idlist);
	;
    break;}
case 186:
#line 1396 "idl.yy"
{
	  idl_global->set_parse_state(IDL_GlobalData::PS_UnionLabelSeen);
        ;
    break;}
case 187:
#line 1400 "idl.yy"
{
	  idl_global->set_parse_state(IDL_GlobalData::PS_UnionElemSeen);
        ;
    break;}
case 188:
#line 1404 "idl.yy"
{
	  UTL_Scope		*s = idl_global->scopes()->top_non_null();
	  UTL_LabellistActiveIterator *l = NULL;
	  AST_UnionLabel	*d = NULL;
	  AST_UnionBranch	*b = NULL;
	  AST_Field		*f = yyvsp[-2].ffval;

	  idl_global->set_parse_state(IDL_GlobalData::PS_UnionElemCompleted);
	  /*
	   * Create several nodes representing branches of a union.
	   * Add them to the enclosing scope (the union scope)
	   */
	  if (s != NULL && yyvsp[-4].llval != NULL && yyvsp[-2].ffval != NULL) {
	    l = new UTL_LabellistActiveIterator(yyvsp[-4].llval);
	    for (;!(l->is_done()); l->next()) {
	      d = l->item();
	      if (d == NULL)
		continue;
	      b = idl_global->gen()->create_union_branch(d,
						      f->field_type(),
						      f->name(),
						      f->pragmas());
	      (void) s->fe_add_union_branch(b);
	    }
	    delete l;
	  }
	;
    break;}
case 189:
#line 1432 "idl.yy"
{
	  idl_global->err()->syntax_error(idl_global->parse_state());
	;
    break;}
case 190:
#line 1436 "idl.yy"
{
	  idl_global->set_parse_state(IDL_GlobalData::PS_NoState);
	  yyerrok;
	;
    break;}
case 191:
#line 1444 "idl.yy"
{
	  yyval.llval = new UTL_LabelList(yyvsp[-1].ulval, yyvsp[0].llval);
	;
    break;}
case 192:
#line 1451 "idl.yy"
{
	  if (yyvsp[-1].llval == NULL)
	    yyval.llval = new UTL_LabelList(yyvsp[0].ulval, NULL);
	  else {
	    yyvsp[-1].llval->nconc(new UTL_LabelList(yyvsp[0].ulval, NULL));
	    yyval.llval = yyvsp[-1].llval;
	  }
	;
    break;}
case 193:
#line 1460 "idl.yy"
{
	  yyval.llval = NULL;
	;
    break;}
case 194:
#line 1467 "idl.yy"
{
	  idl_global->set_parse_state(IDL_GlobalData::PS_DefaultSeen);
        ;
    break;}
case 195:
#line 1471 "idl.yy"
{
	  idl_global->set_parse_state(IDL_GlobalData::PS_LabelColonSeen);

	  yyval.ulval = idl_global->gen()->
	            create_union_label(AST_UnionLabel::UL_default,
				       NULL);
	;
    break;}
case 196:
#line 1479 "idl.yy"
{
	  idl_global->set_parse_state(IDL_GlobalData::PS_CaseSeen);
        ;
    break;}
case 197:
#line 1483 "idl.yy"
{
	  idl_global->set_parse_state(IDL_GlobalData::PS_LabelExprSeen);
        ;
    break;}
case 198:
#line 1487 "idl.yy"
{
	  idl_global->set_parse_state(IDL_GlobalData::PS_LabelColonSeen);

	  yyval.ulval = idl_global->gen()->create_union_label(AST_UnionLabel::UL_label,
						     yyvsp[-2].exval);
	;
    break;}
case 199:
#line 1497 "idl.yy"
{
	  idl_global->set_parse_state(IDL_GlobalData::PS_UnionElemTypeSeen);
        ;
    break;}
case 200:
#line 1501 "idl.yy"
{
	  idl_global->set_parse_state(IDL_GlobalData::PS_UnionElemDeclSeen);
	  /*
	   * Check for illegal recursive use of type
	   */
	  if (yyvsp[-2].dcval != NULL && AST_illegal_recursive_type(yyvsp[-2].dcval))
	    idl_global->err()->error1(UTL_Error::EIDL_RECURSIVE_TYPE, yyvsp[-2].dcval);
	  /*
	   * Create a field in a union branch
	   */
	  else if (yyvsp[-2].dcval == NULL || yyvsp[0].deval == NULL)
	    yyval.ffval = NULL;
	  else {
	    AST_Type *tp = yyvsp[0].deval->compose(yyvsp[-2].dcval);
	    if (tp == NULL)
	      yyval.ffval = NULL;
 	    else
	      yyval.ffval = idl_global->gen()->create_field(tp,
			        		   yyvsp[0].deval->name(),
			        		   idl_global->pragmas());
	  }
	;
    break;}
case 201:
#line 1527 "idl.yy"
{
	  idl_global->set_parse_state(IDL_GlobalData::PS_EnumSeen);
        ;
    break;}
case 202:
#line 1531 "idl.yy"
{
	  UTL_Scope		*s = idl_global->scopes()->top_non_null();
	  UTL_ScopedName	*n = new UTL_ScopedName(yyvsp[0].idval, NULL);
	  AST_Enum		*e = NULL;
	  AST_Decl		*v = NULL;
	  UTL_StrList		*p = idl_global->pragmas();

          ACE_UNUSED_ARG (v);

	  idl_global->set_parse_state(IDL_GlobalData::PS_EnumIDSeen);
	  /*
	   * Create a node representing an enum and add it to its
	   * enclosing scope
	   */
	  if (s != NULL) {
	    e = idl_global->gen()->create_enum(n, p);
	    /*
	     * Add it to its defining scope
	     */
	    (void) s->fe_add_enum(e);
	  }
	  /*
	   * Push the enum scope on the scopes stack
	   */
	  idl_global->scopes()->push(e);
	;
    break;}
case 203:
#line 1558 "idl.yy"
{
	  idl_global->set_parse_state(IDL_GlobalData::PS_EnumSqSeen);
        ;
    break;}
case 204:
#line 1562 "idl.yy"
{
	  idl_global->set_parse_state(IDL_GlobalData::PS_EnumBodySeen);
        ;
    break;}
case 205:
#line 1566 "idl.yy"
{
	  idl_global->set_parse_state(IDL_GlobalData::PS_EnumQsSeen);
	  /*
	   * Done with this enum. Pop its scope from the scopes stack
	   */
	  if (idl_global->scopes()->top() == NULL)
	    yyval.dcval = NULL;
	  else {
	    yyval.dcval = AST_Enum::narrow_from_scope(idl_global->scopes()->top_non_null());
	    idl_global->scopes()->pop();
	  }
	;
    break;}
case 207:
#line 1585 "idl.yy"
{
	  idl_global->set_parse_state(IDL_GlobalData::PS_EnumCommaSeen);
        ;
    break;}
case 210:
#line 1594 "idl.yy"
{
	  UTL_Scope		*s = idl_global->scopes()->top_non_null();
	  UTL_ScopedName	*n =
		new UTL_ScopedName(new Identifier(yyvsp[0].strval, 1, 0, I_FALSE), NULL);
	  AST_EnumVal		*e = NULL;
	  AST_Enum		*c = NULL;
	  UTL_StrList		*p = idl_global->pragmas();

	  /*
	   * Create a node representing one enumerator in an enum
	   * Add it to the enclosing scope (the enum scope)
	   */
	  if (s != NULL && s->scope_node_type() == AST_Decl::NT_enum) {
	    c = AST_Enum::narrow_from_scope(s);
	    if (c != NULL)
	      e = idl_global->gen()->create_enum_val(c->next_enum_val(), n, p);
	    (void) s->fe_add_enum_val(e);
	  }
	;
    break;}
case 211:
#line 1618 "idl.yy"
{
	  idl_global->set_parse_state(IDL_GlobalData::PS_SequenceCommaSeen);
        ;
    break;}
case 212:
#line 1622 "idl.yy"
{
	  idl_global->set_parse_state(IDL_GlobalData::PS_SequenceExprSeen);
        ;
    break;}
case 213:
#line 1626 "idl.yy"
{
	  idl_global->set_parse_state(IDL_GlobalData::PS_SequenceQsSeen);
	  /*
	   * Remove sequence marker from scopes stack
	   */
	  if (idl_global->scopes()->top() == NULL)
	    idl_global->scopes()->pop();
	  /*
	   * Create a node representing a sequence
	   */
	  if (yyvsp[-2].exval == NULL || yyvsp[-2].exval->coerce(AST_Expression::EV_ulong) == NULL) {
	    idl_global->err()->coercion_error(yyvsp[-2].exval, AST_Expression::EV_ulong);
	    yyval.dcval = NULL;
	  } else if (yyvsp[-5].dcval == NULL) {
	    yyval.dcval = NULL;
	  } else {
 	    AST_Type *tp = AST_Type::narrow_from_decl(yyvsp[-5].dcval);
	    if (tp == NULL)
	      yyval.dcval = NULL;
	    else {
	      yyval.dcval = idl_global->gen()->create_sequence(yyvsp[-2].exval, tp);
	      /*
	       * Add this AST_Sequence to the types defined in the global scope
	       */
	      (void) idl_global->root()
		        ->fe_add_sequence(AST_Sequence::narrow_from_decl(yyval.dcval));
 	    }
	  }
	;
    break;}
case 214:
#line 1657 "idl.yy"
{
	  idl_global->set_parse_state(IDL_GlobalData::PS_SequenceQsSeen);
	  /*
	   * Remove sequence marker from scopes stack
	   */
	  if (idl_global->scopes()->top() == NULL)
	    idl_global->scopes()->pop();
	  /*
	   * Create a node representing a sequence
	   */
	  if (yyvsp[-1].dcval == NULL)
	    yyval.dcval = NULL;
	  else {
	    AST_Type *tp = AST_Type::narrow_from_decl(yyvsp[-1].dcval);
	    if (tp == NULL)
	      yyval.dcval = NULL;
            else {
	      yyval.dcval =
	        idl_global->gen()->create_sequence(
		  	     idl_global->gen()->create_expr((unsigned long) 0),
			     tp);
	      /*
	       * Add this AST_Sequence to the types defined in the global scope
	       */
	      (void) idl_global->root()
		        ->fe_add_sequence(AST_Sequence::narrow_from_decl(yyval.dcval));
	    }
	  }
	;
    break;}
case 215:
#line 1690 "idl.yy"
{
	  idl_global->set_parse_state(IDL_GlobalData::PS_SequenceSeen);
	  /*
	   * Push a sequence marker on scopes stack
	   */
	  idl_global->scopes()->push(NULL);
	;
    break;}
case 216:
#line 1698 "idl.yy"
{
	  idl_global->set_parse_state(IDL_GlobalData::PS_SequenceSqSeen);
        ;
    break;}
case 217:
#line 1702 "idl.yy"
{
	  idl_global->set_parse_state(IDL_GlobalData::PS_SequenceTypeSeen);
	  yyval.dcval = yyvsp[0].dcval;
        ;
    break;}
case 218:
#line 1711 "idl.yy"
{
	  idl_global->set_parse_state(IDL_GlobalData::PS_StringSqSeen);
        ;
    break;}
case 219:
#line 1715 "idl.yy"
{
	   idl_global->set_parse_state(IDL_GlobalData::PS_StringExprSeen);
        ;
    break;}
case 220:
#line 1719 "idl.yy"
{
	  idl_global->set_parse_state(IDL_GlobalData::PS_StringQsSeen);
	  /*
	   * Create a node representing a string
	   */
	  if (yyvsp[-2].exval == NULL || yyvsp[-2].exval->coerce(AST_Expression::EV_ulong) == NULL) {
	    idl_global->err()->coercion_error(yyvsp[-2].exval, AST_Expression::EV_ulong);
	    yyval.dcval = NULL;
	  } else {
	    yyval.dcval = idl_global->gen()->create_string(yyvsp[-2].exval);
	    /*
	     * Add this AST_String to the types defined in the global scope
	     */
	    (void) idl_global->root()
		      ->fe_add_string(AST_String::narrow_from_decl(yyval.dcval));
	  }
	;
    break;}
case 221:
#line 1737 "idl.yy"
{
	  idl_global->set_parse_state(IDL_GlobalData::PS_StringCompleted);
	  /*
	   * Create a node representing a string
	   */
	  yyval.dcval =
	    idl_global->gen()->create_string(
			 idl_global->gen()->create_expr((unsigned long) 0));
	  /*
	   * Add this AST_String to the types defined in the global scope
	   */
	  (void) idl_global->root()
                    ->fe_add_string(AST_String::narrow_from_decl(yyval.dcval));
	;
    break;}
case 222:
#line 1755 "idl.yy"
{
	  idl_global->set_parse_state(IDL_GlobalData::PS_StringSeen);
        ;
    break;}
case 223:
#line 1763 "idl.yy"
{
	  idl_global->set_parse_state(IDL_GlobalData::PS_StringSqSeen);
        ;
    break;}
case 224:
#line 1767 "idl.yy"
{
	   idl_global->set_parse_state(IDL_GlobalData::PS_StringExprSeen);
        ;
    break;}
case 225:
#line 1771 "idl.yy"
{
	  idl_global->set_parse_state(IDL_GlobalData::PS_StringQsSeen);
	  /*
	   * Create a node representing a string
	   */
	  if (yyvsp[-2].exval == NULL || yyvsp[-2].exval->coerce(AST_Expression::EV_ulong) == NULL) {
	    idl_global->err()->coercion_error(yyvsp[-2].exval, AST_Expression::EV_ulong);
	    yyval.dcval = NULL;
	  } else {
	    yyval.dcval = idl_global->gen()->create_wstring(yyvsp[-2].exval);
	    /*
	     * Add this AST_String to the types defined in the global scope
	     */
	    (void) idl_global->root()
		      ->fe_add_string(AST_String::narrow_from_decl(yyval.dcval));
	  }
	;
    break;}
case 226:
#line 1789 "idl.yy"
{
	  idl_global->set_parse_state(IDL_GlobalData::PS_StringCompleted);
	  /*
	   * Create a node representing a string
	   */
	  yyval.dcval =
	    idl_global->gen()->create_wstring(
			 idl_global->gen()->create_expr((unsigned long) 0));
	  /*
	   * Add this AST_String to the types defined in the global scope
	   */
	  (void) idl_global->root()
                    ->fe_add_string(AST_String::narrow_from_decl(yyval.dcval));
	;
    break;}
case 227:
#line 1807 "idl.yy"
{
	  idl_global->set_parse_state(IDL_GlobalData::PS_StringSeen);
        ;
    break;}
case 228:
#line 1814 "idl.yy"
{
	  idl_global->set_parse_state(IDL_GlobalData::PS_ArrayIDSeen);
        ;
    break;}
case 229:
#line 1818 "idl.yy"
{
	  idl_global->set_parse_state(IDL_GlobalData::PS_ArrayCompleted);
	  /*
	   * Create a node representing an array
	   */
	  if (yyvsp[0].elval != NULL) {
	     yyval.dcval = idl_global->gen()->create_array(new UTL_ScopedName(yyvsp[-2].idval, NULL),
						  yyvsp[0].elval->length(), yyvsp[0].elval);
	  }
	;
    break;}
case 230:
#line 1832 "idl.yy"
{
	  yyval.elval = new UTL_ExprList(yyvsp[-1].exval, yyvsp[0].elval);
	;
    break;}
case 231:
#line 1839 "idl.yy"
{
	  if (yyvsp[-1].elval == NULL)
	    yyval.elval = new UTL_ExprList(yyvsp[0].exval, NULL);
	  else {
	    yyvsp[-1].elval->nconc(new UTL_ExprList(yyvsp[0].exval, NULL));
	    yyval.elval = yyvsp[-1].elval;
	  }
	;
    break;}
case 232:
#line 1848 "idl.yy"
{
	  yyval.elval = NULL;
	;
    break;}
case 233:
#line 1855 "idl.yy"
{
	  idl_global->set_parse_state(IDL_GlobalData::PS_DimSqSeen);
        ;
    break;}
case 234:
#line 1859 "idl.yy"
{
	  idl_global->set_parse_state(IDL_GlobalData::PS_DimExprSeen);
        ;
    break;}
case 235:
#line 1863 "idl.yy"
{
	  idl_global->set_parse_state(IDL_GlobalData::PS_DimQsSeen);
	  /*
	   * Array dimensions are expressions which must be coerced to
	   * positive integers
	   */
	  if (yyvsp[-2].exval == NULL || yyvsp[-2].exval->coerce(AST_Expression::EV_ulong) == NULL) {
	    idl_global->err()->coercion_error(yyvsp[-2].exval, AST_Expression::EV_ulong);
	    yyval.exval = NULL;
	  } else
	    yyval.exval = yyvsp[-2].exval;
	;
    break;}
case 236:
#line 1880 "idl.yy"
{
	  idl_global->set_parse_state(IDL_GlobalData::PS_AttrSeen);
        ;
    break;}
case 237:
#line 1884 "idl.yy"
{
	  idl_global->set_parse_state(IDL_GlobalData::PS_AttrTypeSeen);
        ;
    break;}
case 238:
#line 1888 "idl.yy"
{
	  UTL_Scope		*s = idl_global->scopes()->top_non_null();
	  UTL_DecllistActiveIterator *l = NULL;
	  AST_Attribute		*a = NULL;
	  FE_Declarator		*d = NULL;
	  UTL_StrList		*p = idl_global->pragmas();

	  idl_global->set_parse_state(IDL_GlobalData::PS_AttrCompleted);
	  /*
	   * Create nodes representing attributes and add them to the
	   * enclosing scope
	   */
	  if (s != NULL && yyvsp[-2].dcval != NULL && yyvsp[0].dlval != NULL) {
	    l = new UTL_DecllistActiveIterator(yyvsp[0].dlval);
	    for (;!(l->is_done()); l->next()) {
	      d = l->item();
	      if (d == NULL)
		continue;
	      AST_Type *tp = d->compose(yyvsp[-2].dcval);
 	      if (tp == NULL)
	 	continue;
	      a = idl_global->gen()->create_attribute(yyvsp[-5].bval, tp, d->name(), p);
	      /*
	       * Add one attribute to the enclosing scope
	       */
	      (void) s->fe_add_attribute(a);
	    }
	    delete l;
	  }
	;
    break;}
case 239:
#line 1922 "idl.yy"
{
	  idl_global->set_parse_state(IDL_GlobalData::PS_AttrROSeen);
	  yyval.bval = I_TRUE;
	;
    break;}
case 240:
#line 1927 "idl.yy"
{
	  yyval.bval = I_FALSE;
	;
    break;}
case 241:
#line 1934 "idl.yy"
{
	  idl_global->set_parse_state(IDL_GlobalData::PS_ExceptSeen);
	;
    break;}
case 242:
#line 1938 "idl.yy"
{
	  UTL_Scope		*s = idl_global->scopes()->top_non_null();
	  UTL_ScopedName	*n = new UTL_ScopedName(yyvsp[0].idval, NULL);
	  AST_Exception		*e = NULL;
	  UTL_StrList		*p = idl_global->pragmas();
	  AST_Decl		*v = NULL;

          ACE_UNUSED_ARG (v);

	  idl_global->set_parse_state(IDL_GlobalData::PS_ExceptIDSeen);
	  /*
	   * Create a node representing an exception and add it to
	   * the enclosing scope
	   */
	  if (s != NULL) {
	    e = idl_global->gen()->create_exception(n, p);
	    (void) s->fe_add_exception(e);
	  }
	  /*
	   * Push the exception scope on the scope stack
	   */
	  idl_global->scopes()->push(e);
	;
    break;}
case 243:
#line 1962 "idl.yy"
{
	  idl_global->set_parse_state(IDL_GlobalData::PS_ExceptSqSeen);
        ;
    break;}
case 244:
#line 1966 "idl.yy"
{
	  idl_global->set_parse_state(IDL_GlobalData::PS_ExceptBodySeen);
        ;
    break;}
case 245:
#line 1970 "idl.yy"
{
	  idl_global->set_parse_state(IDL_GlobalData::PS_ExceptQsSeen);
	  /*
	   * Done with this exception. Pop its scope from the scope stack
	   */
	  idl_global->scopes()->pop();
	;
    break;}
case 246:
#line 1982 "idl.yy"
{
	  idl_global->set_parse_state(IDL_GlobalData::PS_OpTypeSeen);
        ;
    break;}
case 247:
#line 1986 "idl.yy"
{
	  UTL_Scope		*s = idl_global->scopes()->top_non_null();
	  UTL_ScopedName	*n =
		new UTL_ScopedName(new Identifier(yyvsp[0].strval, 1, 0, I_FALSE), NULL);
	  AST_Operation		*o = NULL;
	  UTL_StrList		*p = idl_global->pragmas();

	  idl_global->set_parse_state(IDL_GlobalData::PS_OpIDSeen);
	  /*
	   * Create a node representing an operation on an interface
	   * and add it to its enclosing scope
	   */
	  if (s != NULL && yyvsp[-2].dcval != NULL) {
	    AST_Type *tp = AST_Type::narrow_from_decl(yyvsp[-2].dcval);
            if (tp == NULL) {
              idl_global->err()->not_a_type(yyvsp[-2].dcval);
            } else if (tp->node_type() == AST_Decl::NT_except) {
              idl_global->err()->not_a_type(yyvsp[-2].dcval);
            } else {
	      o = idl_global->gen()->create_operation(tp, yyvsp[-3].ofval, n, p);
	      (void) s->fe_add_operation(o);
	    }
	  }
	  /*
	   * Push the operation scope onto the scopes stack
	   */
	  idl_global->scopes()->push(o);
	;
    break;}
case 248:
#line 2015 "idl.yy"
{
	  idl_global->set_parse_state(IDL_GlobalData::PS_OpParsCompleted);
        ;
    break;}
case 249:
#line 2019 "idl.yy"
{
	  idl_global->set_parse_state(IDL_GlobalData::PS_OpRaiseCompleted);
        ;
    break;}
case 250:
#line 2023 "idl.yy"
{
	  UTL_Scope		*s = idl_global->scopes()->top_non_null();
	  AST_Operation		*o = NULL;

	  idl_global->set_parse_state(IDL_GlobalData::PS_OpCompleted);
	  /*
	   * Add exceptions and context to the operation
	   */
	  if (s != NULL && s->scope_node_type() == AST_Decl::NT_op) {
	    o = AST_Operation::narrow_from_scope(s);

	    if (yyvsp[-2].nlval != NULL && o != NULL)
	      (void) o->fe_add_exceptions(yyvsp[-2].nlval);
	    if (yyvsp[0].slval != NULL)
	      (void) o->fe_add_context(yyvsp[0].slval);
	  }
	  /*
	   * Done with this operation. Pop its scope from the scopes stack
	   */
	  idl_global->scopes()->pop();
	;
    break;}
case 251:
#line 2048 "idl.yy"
{
	  idl_global->set_parse_state(IDL_GlobalData::PS_OpAttrSeen);
	  yyval.ofval = AST_Operation::OP_oneway;
	;
    break;}
case 252:
#line 2053 "idl.yy"
{
	  idl_global->set_parse_state(IDL_GlobalData::PS_OpAttrSeen);
	  yyval.ofval = AST_Operation::OP_idempotent;
	;
    break;}
case 253:
#line 2058 "idl.yy"
{
	  yyval.ofval = AST_Operation::OP_noflags;
	;
    break;}
case 255:
#line 2066 "idl.yy"
{
	  yyval.dcval =
	    idl_global->scopes()->bottom()
	       ->lookup_primitive_type(AST_Expression::EV_void);
	;
    break;}
case 256:
#line 2075 "idl.yy"
{
	  idl_global->set_parse_state(IDL_GlobalData::PS_OpSqSeen);
        ;
    break;}
case 257:
#line 2079 "idl.yy"
{
	  idl_global->set_parse_state(IDL_GlobalData::PS_OpQsSeen);
        ;
    break;}
case 258:
#line 2083 "idl.yy"
{
	  idl_global->set_parse_state(IDL_GlobalData::PS_OpSqSeen);
        ;
    break;}
case 259:
#line 2088 "idl.yy"
{
	  idl_global->set_parse_state(IDL_GlobalData::PS_OpQsSeen);
        ;
    break;}
case 261:
#line 2098 "idl.yy"
{
	  idl_global->set_parse_state(IDL_GlobalData::PS_OpParCommaSeen);
        ;
    break;}
case 264:
#line 2107 "idl.yy"
{
	  idl_global->set_parse_state(IDL_GlobalData::PS_OpParDirSeen);
        ;
    break;}
case 265:
#line 2111 "idl.yy"
{
	  idl_global->set_parse_state(IDL_GlobalData::PS_OpParTypeSeen);
        ;
    break;}
case 266:
#line 2115 "idl.yy"
{
	  UTL_Scope		*s = idl_global->scopes()->top_non_null();
	  AST_Argument		*a = NULL;
	  UTL_StrList		*p = idl_global->pragmas();

	  idl_global->set_parse_state(IDL_GlobalData::PS_OpParDeclSeen);
	  /*
	   * Create a node representing an argument to an operation
	   * Add it to the enclosing scope (the operation scope)
	   */
	  if (yyvsp[-2].dcval != NULL && yyvsp[0].deval != NULL && s != NULL) {
	    AST_Type *tp = yyvsp[0].deval->compose(yyvsp[-2].dcval);
	    if (tp != NULL) {
	      a = idl_global->gen()->create_argument(yyvsp[-4].dival, tp, yyvsp[0].deval->name(), p);
	      (void) s->fe_add_argument(a);
	    }
	  }
	;
    break;}
case 267:
#line 2137 "idl.yy"
{
	  yyval.dcval = idl_global->scopes()->bottom()->lookup_primitive_type(yyvsp[0].etval);
	;
    break;}
case 269:
#line 2142 "idl.yy"
{
	  UTL_Scope	*s = idl_global->scopes()->top_non_null();
	  AST_Decl	*d = NULL;

	  if (s != NULL)
	    d = s->lookup_by_name(yyvsp[0].idlist, I_TRUE);
	  if (d == NULL)
	    idl_global->err()->lookup_error(yyvsp[0].idlist);
	  yyval.dcval = d;
	;
    break;}
case 270:
#line 2156 "idl.yy"
{
	  yyval.dival = AST_Argument::dir_IN;
	;
    break;}
case 271:
#line 2160 "idl.yy"
{
	  yyval.dival = AST_Argument::dir_OUT;
	;
    break;}
case 272:
#line 2164 "idl.yy"
{
	  yyval.dival = AST_Argument::dir_INOUT;
	;
    break;}
case 273:
#line 2171 "idl.yy"
{
	  idl_global->set_parse_state(IDL_GlobalData::PS_OpRaiseSeen);
        ;
    break;}
case 274:
#line 2175 "idl.yy"
{
	  idl_global->set_parse_state(IDL_GlobalData::PS_OpRaiseSqSeen);
        ;
    break;}
case 275:
#line 2180 "idl.yy"
{
	  idl_global->set_parse_state(IDL_GlobalData::PS_OpRaiseQsSeen);
	  yyval.nlval = yyvsp[-1].nlval;
	;
    break;}
case 276:
#line 2185 "idl.yy"
{
	  yyval.nlval = NULL;
	;
    break;}
case 277:
#line 2192 "idl.yy"
{
	  idl_global->set_parse_state(IDL_GlobalData::PS_OpContextSeen);
        ;
    break;}
case 278:
#line 2196 "idl.yy"
{
	  idl_global->set_parse_state(IDL_GlobalData::PS_OpContextSqSeen);
        ;
    break;}
case 279:
#line 2201 "idl.yy"
{
	  idl_global->set_parse_state(IDL_GlobalData::PS_OpContextQsSeen);
	  yyval.slval = yyvsp[-1].slval;
	;
    break;}
case 280:
#line 2206 "idl.yy"
{
	  yyval.slval = NULL;
	;
    break;}
case 281:
#line 2213 "idl.yy"
{
	  yyval.slval = new UTL_StrList(yyvsp[-1].sval, yyvsp[0].slval);
	;
    break;}
case 282:
#line 2221 "idl.yy"
{
	  idl_global->set_parse_state(IDL_GlobalData::PS_OpContextCommaSeen);
        ;
    break;}
case 283:
#line 2225 "idl.yy"
{
	  if (yyvsp[-3].slval == NULL)
	    yyval.slval = new UTL_StrList(yyvsp[0].sval, NULL);
	  else {
	    yyvsp[-3].slval->nconc(new UTL_StrList(yyvsp[0].sval, NULL));
	    yyval.slval = yyvsp[-3].slval;
	  }
	;
    break;}
case 284:
#line 2234 "idl.yy"
{
	  yyval.slval = NULL;
	;
    break;}
}
   /* the action file gets copied in in place of this dollarsign */
#line 498 "/project/mambo/gokhale/share/bison.simple"

  yyvsp -= yylen;
  yyssp -= yylen;
#ifdef YYLSP_NEEDED
  yylsp -= yylen;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

  *++yyvsp = yyval;

#ifdef YYLSP_NEEDED
  yylsp++;
  if (yylen == 0)
    {
      yylsp->first_line = yylloc.first_line;
      yylsp->first_column = yylloc.first_column;
      yylsp->last_line = (yylsp-1)->last_line;
      yylsp->last_column = (yylsp-1)->last_column;
      yylsp->text = 0;
    }
  else
    {
      yylsp->last_line = (yylsp+yylen-1)->last_line;
      yylsp->last_column = (yylsp+yylen-1)->last_column;
    }
#endif

  /* Now "shift" the result of the reduction.
     Determine what state that goes to,
     based on the state we popped back to
     and the rule number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTBASE] + *yyssp;
  if (yystate >= 0 && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTBASE];

  goto yynewstate;

yyerrlab:   /* here on detecting error */

  if (! yyerrstatus)
    /* If not already recovering from an error, report this error.  */
    {
      ++yynerrs;

#ifdef YYERROR_VERBOSE
      yyn = yypact[yystate];

      if (yyn > YYFLAG && yyn < YYLAST)
	{
	  int size = 0;
	  char *msg;
	  int x, count;

	  count = 0;
	  /* Start X at -yyn if nec to avoid negative indexes in yycheck.  */
	  for (x = (yyn < 0 ? -yyn : 0);
	       x < (sizeof(yytname) / sizeof(char *)); x++)
	    if (yycheck[x + yyn] == x)
	      size += strlen(yytname[x]) + 15, count++;
	  msg = (char *) malloc(size + 15);
	  if (msg != 0)
	    {
	      strcpy(msg, "parse error");

	      if (count < 5)
		{
		  count = 0;
		  for (x = (yyn < 0 ? -yyn : 0);
		       x < (sizeof(yytname) / sizeof(char *)); x++)
		    if (yycheck[x + yyn] == x)
		      {
			strcat(msg, count == 0 ? ", expecting `" : " or `");
			strcat(msg, yytname[x]);
			strcat(msg, "'");
			count++;
		      }
		}
	      yyerror(msg);
	      free(msg);
	    }
	  else
	    yyerror ("parse error; also virtual memory exceeded");
	}
      else
#endif /* YYERROR_VERBOSE */
	yyerror("parse error");
    }

  goto yyerrlab1;
yyerrlab1:   /* here on error raised explicitly by an action */

  if (yyerrstatus == 3)
    {
      /* if just tried and failed to reuse lookahead token after an error, discard it.  */

      /* return failure if at end of input */
      if (yychar == YYEOF)
	YYABORT;

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Discarding token %d (%s).\n", yychar, yytname[yychar1]);
#endif

      yychar = YYEMPTY;
    }

  /* Else will try to reuse lookahead token
     after shifting the error token.  */

  yyerrstatus = 3;		/* Each real token shifted decrements this */

  goto yyerrhandle;

yyerrdefault:  /* current state does not do anything special for the error token. */

#if 0
  /* This is wrong; only states that explicitly want error tokens
     should shift them.  */
  yyn = yydefact[yystate];  /* If its default is to accept any token, ok.  Otherwise pop it.*/
  if (yyn) goto yydefault;
#endif

yyerrpop:   /* pop the current state because it cannot handle the error token */

  if (yyssp == yyss) YYABORT;
  yyvsp--;
  yystate = *--yyssp;
#ifdef YYLSP_NEEDED
  yylsp--;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "Error: state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

yyerrhandle:

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yyerrdefault;

  yyn += YYTERROR;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != YYTERROR)
    goto yyerrdefault;

  yyn = yytable[yyn];
  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrpop;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrpop;

  if (yyn == YYFINAL)
    YYACCEPT;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting error token, ");
#endif

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  yystate = yyn;
  goto yynewstate;
}
#line 2239 "idl.yy"

/* programs */

/*
 * ???
 */
int
yywrap()
{
  return 1;
}

/*
 * Report an error situation discovered in a production
 *
 * This does not do anything since we report all error situations through
 * idl_global->err() operations
 */
void
yyerror(char *)
{
}
