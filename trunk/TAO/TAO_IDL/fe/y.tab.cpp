// $Id$
#ifndef lint
char tao_yysccsid[] = "@(#)yaccpar	1.4 (Berkeley) 02/25/90 \n\
 Modified 5/2/90 by J. Roskind to support graphic debugging modes";
#endif
#include "ast_argument.h"
#include "ast_array.h"
#include "ast_attribute.h"
#include "ast_field.h"
#include "ast_expression.h"
#include "ast_operation.h"
#include "ast_generator.h"
#include "ast_module.h"
#include "ast_valuetype.h"
#include "ast_valuetype_fwd.h"
#include "ast_eventtype.h"
#include "ast_eventtype_fwd.h"
#include "ast_component.h"
#include "ast_component_fwd.h"
#include "ast_home.h"
#include "ast_constant.h"
#include "ast_union.h"
#include "ast_union_fwd.h"
#include "ast_structure_fwd.h"
#include "ast_extern.h"
#include "ast_enum.h"
#include "ast_root.h"
#include "ast_sequence.h"
#include "ast_string.h"
#include "ast_factory.h"
#include "ast_exception.h"
#include "fe_declarator.h"
#include "fe_interface_header.h"
#include "utl_identifier.h"
#include "utl_err.h"
#include "utl_string.h"
#include "utl_strlist.h"
#include "utl_namelist.h"
#include "utl_exprlist.h"
#include "utl_labellist.h"
#include "utl_decllist.h"
#include "global_extern.h"
#include "nr_extern.h"

#if (defined(apollo) || defined(hpux)) && defined(__cplusplus)
extern  "C" int tao_yywrap();
#endif  /* (defined(apollo) || defined(hpux)) && defined(__cplusplus)*/


void tao_yyerror (const char *);
int tao_yylex (void);
extern "C" int tao_yywrap (void);
extern char tao_yytext[];
extern int tao_yyleng;
AST_Decl *tao_enum_constant_decl = 0;
#define TAO_YYDEBUG_LEXER_TEXT (tao_yytext[tao_yyleng] = '\0', tao_yytext)
/* Force the pretty debugging code to compile.*/
#define TAO_YYDEBUG 1
typedef union {
  AST_Decl                      *dcval;         /* Decl value           */
  UTL_StrList                   *slval;         /* String list          */
  UTL_NameList                  *nlval;         /* Name list            */
  UTL_ExprList                  *elval;         /* Expression list      */
  UTL_LabelList                 *llval;         /* Label list           */
  UTL_DeclList                  *dlval;         /* Declaration list     */
  FE_InterfaceHeader            *ihval;         /* Interface header     */
  FE_OBVHeader                  *vhval;         /* Valuetype header     */
  FE_EventHeader                *ehval;         /* Event header         */
  FE_ComponentHeader            *chval;         /* Component header     */
  FE_HomeHeader                 *hhval;         /* Home header          */
  AST_Expression                *exval;         /* Expression value     */
  AST_UnionLabel                *ulval;         /* Union label          */
  AST_Field                     *ffval;         /* Field value          */
  AST_Field::Visibility         vival;          /* N/A, pub or priv     */
  AST_Expression::ExprType      etval;          /* Expression type      */
  AST_Argument::Direction       dival;          /* Argument direction   */
  AST_Operation::Flags          ofval;          /* Operation flags      */
  FE_Declarator                 *deval;         /* Declarator value     */
  idl_bool                      bval;           /* Boolean value        */
  long                          ival;           /* Long value           */
  unsigned long                 uival;          /* Unsigned long value  */
  double                        dval;           /* Double value         */
  float                         fval;           /* Float value          */
  char                          cval;           /* Char value           */
  ACE_CDR::WChar                wcval;          /* WChar value          */
  UTL_String                    *sval;          /* String value         */
  char                          *wsval;         /* WString value        */
  char                          *strval;        /* char * value         */
  Identifier                    *idval;         /* Identifier           */
  UTL_IdList                    *idlist;        /* Identifier list      */
} TAO_YYSTYPE;
#define IDENTIFIER 257
#define IDL_CONST 258
#define IDL_MODULE 259
#define IDL_INTERFACE 260
#define IDL_TYPEDEF 261
#define IDL_LONG 262
#define IDL_SHORT 263
#define IDL_UNSIGNED 264
#define IDL_DOUBLE 265
#define IDL_FLOAT 266
#define IDL_CHAR 267
#define IDL_WCHAR 268
#define IDL_OCTET 269
#define IDL_BOOLEAN 270
#define IDL_FIXED 271
#define IDL_ANY 272
#define IDL_OBJECT 273
#define IDL_STRUCT 274
#define IDL_UNION 275
#define IDL_SWITCH 276
#define IDL_ENUM 277
#define IDL_SEQUENCE 278
#define IDL_STRING 279
#define IDL_WSTRING 280
#define IDL_EXCEPTION 281
#define IDL_CASE 282
#define IDL_DEFAULT 283
#define IDL_READONLY 284
#define IDL_ATTRIBUTE 285
#define IDL_ONEWAY 286
#define IDL_IDEMPOTENT 287
#define IDL_VOID 288
#define IDL_IN 289
#define IDL_OUT 290
#define IDL_INOUT 291
#define IDL_RAISES 292
#define IDL_CONTEXT 293
#define IDL_NATIVE 294
#define IDL_LOCAL 295
#define IDL_ABSTRACT 296
#define IDL_CUSTOM 297
#define IDL_FACTORY 298
#define IDL_PRIVATE 299
#define IDL_PUBLIC 300
#define IDL_SUPPORTS 301
#define IDL_TRUNCATABLE 302
#define IDL_VALUETYPE 303
#define IDL_COMPONENT 304
#define IDL_CONSUMES 305
#define IDL_EMITS 306
#define IDL_EVENTTYPE 307
#define IDL_FINDER 308
#define IDL_GETRAISES 309
#define IDL_HOME 310
#define IDL_IMPORT 311
#define IDL_MULTIPLE 312
#define IDL_PRIMARYKEY 313
#define IDL_PROVIDES 314
#define IDL_PUBLISHES 315
#define IDL_SETRAISES 316
#define IDL_TYPEID 317
#define IDL_TYPEPREFIX 318
#define IDL_USES 319
#define IDL_MANAGES 320
#define IDL_INTEGER_LITERAL 321
#define IDL_UINTEGER_LITERAL 322
#define IDL_STRING_LITERAL 323
#define IDL_CHARACTER_LITERAL 324
#define IDL_FLOATING_PT_LITERAL 325
#define IDL_TRUETOK 326
#define IDL_FALSETOK 327
#define IDL_SCOPE_DELIMITOR 328
#define IDL_LEFT_SHIFT 329
#define IDL_RIGHT_SHIFT 330
#define IDL_WCHAR_LITERAL 331
#define IDL_WSTRING_LITERAL 332
#define TAO_YYERRCODE 256
short tao_yylhs[] = {                                        -1,
    0,   88,   88,   90,   89,   92,   89,   94,   89,   96,
   89,   98,   89,  100,   89,  102,   89,  104,   89,  106,
   89,  108,   89,  110,   89,  111,   89,  112,  113,  114,
  115,  101,   99,   99,  118,  120,  121,  116,  122,   78,
   39,   39,   39,  123,   26,   26,  103,  103,  103,  103,
  124,  124,  129,  131,  132,  128,  133,  134,  135,  125,
  136,   40,  137,   79,   76,   76,   30,   30,  126,  126,
  127,  130,  130,  138,  138,  138,  143,  139,  144,  139,
  119,  119,  145,  140,  146,  140,  147,  140,  148,  140,
  149,  140,  151,  140,  153,  140,  154,  140,   24,  155,
   25,   25,   16,  156,   16,  157,   16,   82,  117,  117,
  117,  158,  159,  160,  161,   95,   59,   59,   59,   59,
   59,   59,   59,   59,   59,   44,   45,   46,   46,   47,
   47,   48,   48,   49,   49,   49,   50,   50,   50,   51,
   51,   51,   51,   52,   52,   52,   52,   53,   53,   53,
   54,   54,   54,   54,   54,   54,   54,   54,   54,   55,
  163,   87,   87,   87,   87,   87,   87,  165,  162,    1,
    1,    2,    2,    2,   68,   68,   68,   68,   68,   68,
   68,   68,    4,    4,    4,    3,    3,    3,  164,  164,
   35,  168,   36,   36,   73,   73,   37,  169,   38,   38,
   74,   75,   60,   60,   66,   66,   66,   67,   67,   67,
   63,   63,   63,   64,   61,   61,   69,   62,   65,   70,
  170,   81,  171,  173,  174,    7,  172,  176,  176,  177,
  175,  178,  179,  142,  180,  142,  181,   80,  182,  183,
  184,  185,  187,  188,   10,    9,    9,    9,    9,    9,
    9,  186,  190,  190,  191,  192,  189,  193,  189,   33,
   34,   34,  194,   57,  195,  196,   57,  197,   58,  166,
  167,  198,  199,  201,  202,    8,  200,  205,  204,  204,
  203,  206,  207,    5,    5,  208,  209,   13,  211,  212,
    6,    6,  210,  214,  215,   14,   14,  213,  216,   11,
   31,   32,   32,  217,  218,   56,  150,  150,  221,  222,
  223,  224,  219,  225,  226,  227,  228,  220,  229,  230,
  231,  232,   97,  233,  235,  236,  237,  152,   72,   72,
   72,   12,   12,  238,  240,  141,  241,  239,  243,  239,
  242,  246,  245,  245,  247,  248,  244,  249,  234,  251,
  234,  250,  254,  253,  253,  255,  256,  252,   15,   15,
   15,   15,   71,   71,   71,  257,  258,   27,   27,  259,
  260,   28,   28,  261,  262,   29,   29,  263,  264,   21,
   21,   22,  265,   23,   23,   91,   93,  105,  105,  267,
  268,  270,  271,  266,  272,  273,   41,  274,   18,   18,
  269,  269,  277,  275,  279,  275,  281,  275,  283,  275,
  285,  275,  286,  275,  276,   17,   17,  278,   77,   77,
  280,  282,  284,  288,  107,  289,  290,  291,  292,  293,
  294,   42,  295,   19,   19,   20,   20,  297,  298,  287,
  296,  296,  299,  301,  299,  303,  299,  304,  305,  300,
  306,  307,  302,  109,  109,  109,  310,  310,  312,  311,
  313,  314,  315,  309,   86,   85,   84,  316,   43,  317,
  318,  319,  308,   83,   83,
};
short tao_yylen[] = {                                         2,
    1,    2,    0,    0,    3,    0,    3,    0,    3,    0,
    3,    0,    3,    0,    3,    0,    3,    0,    3,    0,
    3,    0,    3,    0,    3,    0,    3,    0,    0,    0,
    0,    9,    1,    1,    0,    0,    0,    7,    0,    3,
    2,    3,    3,    0,    3,    0,    1,    1,    1,    1,
    2,    1,    0,    0,    0,    7,    0,    0,    0,    8,
    0,    5,    0,    3,    1,    0,    2,    0,    2,    1,
    2,    2,    0,    1,    1,    2,    0,    3,    0,    3,
    2,    0,    0,    3,    0,    3,    0,    3,    0,    3,
    0,    3,    0,    3,    0,    3,    0,    3,    2,    0,
    4,    0,    1,    0,    3,    0,    4,    1,    1,    2,
    2,    0,    0,    0,    0,    9,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    3,    1,
    3,    1,    3,    1,    3,    3,    1,    3,    3,    1,
    3,    3,    3,    1,    2,    2,    2,    1,    1,    3,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    0,    3,    1,    1,    1,    2,    1,    0,    3,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    2,    0,    4,    0,    1,    1,    2,    0,    4,    0,
    1,    1,    1,    1,    1,    2,    1,    2,    3,    2,
    1,    1,    2,    1,    1,    1,    1,    1,    1,    1,
    0,    3,    0,    0,    0,    7,    2,    2,    0,    0,
    2,    0,    0,    5,    0,    3,    0,    3,    0,    0,
    0,    0,    0,    0,   14,    1,    1,    1,    1,    1,
    1,    2,    2,    0,    0,    0,    5,    0,    3,    2,
    2,    0,    0,    3,    0,    0,    5,    0,    3,    1,
    1,    0,    0,    0,    0,    9,    2,    0,    4,    0,
    1,    0,    0,    6,    2,    0,    0,    5,    0,    0,
    6,    1,    1,    0,    0,    6,    1,    1,    0,    3,
    2,    2,    0,    0,    0,    5,    1,    1,    0,    0,
    0,    0,    9,    0,    0,    0,    0,    9,    0,    0,
    0,    0,    9,    0,    0,    0,    0,   10,    1,    1,
    0,    1,    1,    0,    0,    5,    0,    3,    0,    4,
    2,    0,    4,    0,    0,    0,    5,    0,    3,    0,
    4,    2,    0,    4,    0,    0,    0,    5,    1,    1,
    1,    1,    1,    1,    1,    0,    0,    6,    0,    0,
    0,    6,    0,    0,    0,    6,    0,    0,    0,    6,
    0,    2,    0,    4,    0,    3,    3,    1,    1,    2,
    0,    0,    0,    7,    0,    0,    6,    0,    3,    0,
    2,    0,    0,    3,    0,    3,    0,    3,    0,    3,
    0,    3,    0,    3,    3,    1,    1,    4,    1,    0,
    3,    3,    3,    0,    3,    0,    0,    0,    0,    0,
    0,   13,    0,    3,    0,    2,    0,    0,    0,    5,
    2,    0,    1,    0,    3,    0,    3,    0,    0,    6,
    0,    0,    6,    1,    1,    1,    1,    1,    2,    3,
    0,    0,    0,    8,    3,    3,    2,    0,    4,    0,
    0,    0,    8,    1,    1,
};
short tao_yydefred[] = {                                      3,
    0,    0,   26,  112,   28,   39,  161,  221,  237,  272,
  319,    0,    0,    0,    0,   63,    0,    0,  426,    0,
    0,  163,  165,  164,   35,   53,  391,  424,    0,    0,
    0,    0,    0,  475,  474,    0,    4,    2,    6,    8,
   10,   12,   14,   16,   18,   20,   22,   24,   33,   34,
   47,   48,   49,   50,   52,  167,  189,  190,  388,  389,
  454,  455,  456,  457,  458,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  108,  166,  201,    0,    0,   57,
    0,    0,    0,    0,   51,    0,    0,    0,    0,  104,
    0,  103,    0,    0,    0,    0,    0,   44,   41,    0,
  207,    0,  211,  212,  215,  216,  217,  218,  214,  219,
  220,  286,  293,  298,   65,   71,  170,  171,  173,  183,
  184,  186,  188,  187,    0,  185,    0,  175,  177,  178,
  176,  180,  181,  203,  204,  172,  179,  182,    0,    0,
  223,    0,    0,  239,    0,  470,    0,  461,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,   27,
  123,  124,    0,  113,  117,  118,  120,  121,  122,  119,
   29,   40,  168,  162,  222,  238,  273,  320,   42,    0,
    0,   43,  466,   64,    0,  427,    0,  386,  106,  387,
   36,   54,  392,  438,  425,    0,  206,  213,    0,  210,
    0,  282,  285,   61,  289,  294,    0,  224,    0,  468,
    0,    5,    7,    9,   11,   13,   15,   17,   19,   21,
   23,   25,    0,    0,    0,    0,    0,   58,  398,  396,
    0,  105,    0,   82,   73,  402,  442,    0,   45,  209,
  287,    0,    0,    0,    0,  240,  230,  471,    0,  462,
  114,   30,  202,  169,  194,  195,  196,    0,  274,  321,
   82,    0,    0,  433,  428,  107,    0,    0,    0,    0,
    0,    0,  151,  152,  153,  155,  157,  158,  159,  156,
  154,    0,    0,    0,    0,    0,  160,    0,    0,    0,
    0,    0,    0,  140,  144,  149,  283,    0,   62,  290,
  295,    0,  225,  229,    0,   73,  469,   82,    0,    3,
    0,    0,    0,  229,    0,    0,  397,    0,    0,   97,
  309,  314,  329,  330,    0,   83,   85,   87,   89,   91,
    0,   81,   93,   95,  307,  308,  334,   79,   77,    0,
   72,   74,   75,    0,    0,    0,    0,    0,    0,  413,
    0,  401,  403,  405,  407,  409,  411,    0,    0,  443,
    0,  441,  444,  446,  100,  288,  145,  146,  147,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,   67,    0,    0,    0,  250,  241,    0,  246,  247,
  249,  248,    0,    0,  235,  232,  231,    0,    0,  115,
    0,  192,  304,  300,  303,  281,  275,  280,    0,    0,
    0,  429,    0,    0,    0,  333,  360,  324,  361,  332,
    0,  359,    0,    0,    0,    0,    0,   38,    0,    0,
    0,    0,    0,   56,   76,    0,    0,  417,    0,    0,
    0,  419,    0,    0,  394,    0,    0,    0,    0,    0,
  448,  451,  440,    0,    0,    0,  150,    0,    0,    0,
    0,    0,    0,    0,  141,  142,  143,  284,  291,  296,
    0,  226,  228,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,   60,    0,   98,  310,  315,
    0,   84,   86,   88,   90,   92,   94,   96,  335,   80,
   78,  423,  421,  415,  422,    0,  414,  404,  406,  408,
  410,  412,    0,    0,  445,  447,    0,  242,  236,  233,
  473,  464,  116,  126,   32,  193,  305,  302,  276,  278,
  323,  430,    0,    0,  325,    0,  418,    0,  449,  452,
    0,    0,    0,    0,    0,  311,  316,  200,    0,  336,
    0,    0,    0,    0,  243,  234,  306,  279,    0,    0,
    0,    0,    0,  326,  338,  345,    0,  344,  366,  450,
  453,    0,    0,  312,  370,  317,  198,    0,    0,    0,
    0,  340,    0,    0,  258,  265,  263,  255,  262,  244,
  254,    0,  432,    0,    0,    0,    0,  349,  363,  364,
  365,  356,    0,  355,  327,  346,  342,  367,    0,    0,
    0,    0,    0,    0,    0,    0,  313,  371,  374,  318,
  199,    0,  351,    0,    0,    0,    0,    0,  259,  266,
  264,  268,  256,  261,  245,  253,    0,    0,  357,  353,
  378,  328,  347,  343,    0,    0,    0,    0,    0,  375,
    0,    0,    0,  368,  267,  269,  257,  372,    0,  358,
  354,  379,    0,    0,  376,  385,    0,    0,  380,  383,
    0,  384,
};
short tao_yydgoto[] = {                                       1,
  396,  117,  118,  119,  120,  121,   22,   23,  387,   24,
  253,  418,  125,  126,  420,  286,  440,  230,  265,  593,
  642,  667,  668,  239,  271,   99,  570,  576,  620,  299,
  404,  482,  588,  613,  254,  311,  547,  562,   25,   26,
   27,   28,  146,  523,  287,  288,  289,  290,  291,  292,
  293,  294,  295,  296,  297,  405,  589,  633,  164,  128,
  129,  130,  131,  132,  133,  134,  135,  136,  137,  138,
  602,  325,  255,  256,  257,  139,  443,   29,   30,   31,
   32,   92,   33,   34,   35,   36,  326,    2,   38,  149,
  327,  150,  328,  151,  329,  152,  330,  153,   43,  154,
   44,  155,   45,  156,   46,  157,   47,  158,   48,  159,
   66,   68,  224,  310,  479,   49,   50,   94,  267,  234,
  331,   69,  196,   51,   52,   53,   54,   55,   95,  268,
  235,  340,  181,  261,  410,  243,   86,  341,  342,  332,
  344,  397,  433,  432,  423,  424,  425,  426,  427,  333,
  429,  334,  430,  413,  456,  187,  233,   67,  223,  309,
  478,  174,   70,   56,  225,   57,   58,  480,  597,   71,
  145,  303,  247,  393,  473,  394,  305,  475,  542,  474,
   72,  207,  302,  471,  541,  590,  572,  614,  591,  615,
  612,  648,  609,  611,  610,  646,  647,   73,  226,  407,
  313,  483,  408,  484,  544,  242,  381,  201,  272,  142,
  244,  383,  143,  245,  384,  312,  481,  543,  335,  336,
  414,  533,  560,  594,  415,  534,  561,  596,   74,  227,
  314,  485,  491,  564,  549,  580,  625,  431,  539,  536,
  551,  567,  552,  568,  583,  627,  581,  626,  578,  603,
  579,  604,  624,  652,  622,  651,  584,  628,  595,  637,
  638,  659,  653,  664,  671,   59,   60,   96,  269,  236,
  351,  185,  263,  262,  352,  353,  446,  354,  447,  355,
  448,  356,  449,  357,  450,  444,  195,   97,   89,  231,
  319,  487,  545,  573,  318,  270,  237,  361,  362,  363,
  454,  364,  455,  513,  553,  514,  554,   61,   62,   63,
   64,   65,  211,  308,  477,  249,  209,  306,  476,
};
short tao_yysindex[] = {                                      0,
    0,  793,    0,    0,    0,    0,    0,    0,    0,    0,
    0, -156, -133,  -38, -136,    0, -156, -156,    0, -200,
 -200,    0,    0,    0,    0,    0,    0,    0,   74,  625,
  -97,    0, -108,    0,    0, -108,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  122,  237,  -22, -156,  644,
 -156, -156, -156, -156,    0,    0,    0,   74, -156,    0,
   74, -108, -156, -108,    0, -156,    0,    0, -156,    0,
 -279,    0, -275,  114,  116,  126,  132,    0,    0,  -92,
    0,   -3,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   96,    0,  -53,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   74,  -97,
    0,  160,  206,    0,  157,    0,   74,    0,  227,  231,
  243,  245,  251,  259,  261,  272,  275,  279,  283,    0,
    0,    0,  -53,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  221,    0,    0,    0,  289,    0, -156,    0,    0,    0,
    0,    0,    0,    0,    0, -200,    0,    0,   89,    0,
  303,    0,    0,    0,    0,    0,  335,    0,  254,    0,
  266,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0, -156,  288, -156,  306,  309,    0,    0,    0,
  377,    0, -156,    0,    0,    0,    0,  -53,    0,    0,
    0,   60,  140,   60,   60,    0,    0,    0,  140,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0, -200,  140,    0,    0,    0,  893,  843,   31,  878,
  413,  676,    0,    0,    0,    0,    0,    0,    0,    0,
    0,   75,   75,   75,   60,  -53,    0,  359,  375,  446,
  -33,   47,  329,    0,    0,    0,    0, -200,    0,    0,
    0,  778,    0,    0,  606,    0,    0,    0,  426,    0,
  447,  399,  235,    0,  893,  -53,    0, -200,  140,    0,
    0,    0,    0,    0,  730,    0,    0,    0,    0,    0,
  368,    0,    0,    0,    0,    0,    0,    0,    0,  370,
    0,    0,    0,  438, -200, -200, -189, -200,  186,    0,
  385,    0,    0,    0,    0,    0,    0, -156, -156,    0,
  386,    0,    0,    0,    0,    0,    0,    0,    0,  471,
   60,   60,   60,   60,   60,   60,   60,   60,   60,   60,
  452,    0,  456,  479,  284,    0,    0,  -53,    0,    0,
    0,    0,  422,    0,    0,    0,    0,  843,  893,    0,
  793,    0,    0,    0,    0,    0,    0,    0,    0,  423,
  -53,    0,  490,  268,  757,    0,    0,    0,    0,    0,
  -53,    0,  495,  496,  499,  500,  503,    0,  504,  507,
  310,  606,  606,    0,    0, -182, -182,    0,  -53, -156,
 -182,    0, -189,  509,    0,  510,  511,  512,  514,  517,
    0,    0,    0,  518,  520, -200,    0,  375,  446,  -33,
   47,   47,  329,  329,    0,    0,    0,    0,    0,    0,
  540,    0,    0,  521, -156,  457,  459,   60,  461, -156,
   60,  399,  465,  547,  470,    0,  281,    0,    0,    0,
  342,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0, -156,    0,    0,    0,    0,
    0,    0,  563,  563,    0,    0,  -53,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  757, -156,    0,  563,    0,    0,    0,    0,
  481,  546,  513,  235, -200,    0,    0,    0,  567,    0,
  570,  323,  321,  321,    0,    0,    0,    0,  -53, -156,
  312,  575,    0,    0,    0,    0,  581,    0,    0,    0,
    0,   85,  311,    0,    0,    0,    0,  582,  173,  321,
  757,    0,  594,  604,    0,    0,    0,    0,    0,    0,
    0, -200,    0,  321,  605,  330, -156,    0,    0,    0,
    0,    0,  607,    0,    0,    0,    0,    0,  608,   60,
  610,  644,   73,  541,   85,  -53,    0,    0,    0,    0,
    0,  757,    0,  621,  378, -156,  323, -200,    0,    0,
    0,    0,    0,    0,    0,    0, -200,  632,    0,    0,
    0,    0,    0,    0,  633,  615, -156,  616,  635,    0,
 -156,  173,  637,    0,    0,    0,    0,    0, -200,    0,
    0,    0,  638,  358,    0,    0,  641,  639,    0,    0,
  361,    0,
};
short tao_yyrindex[] = {                                      0,
    0,  685,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    8,   38,
  627,   12,    2,    0,    0,    2,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,   78,    0,    0,
   98,   61,    0,    2,    0,    0,   64,    7,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,   62,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   67,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  -84,    0,
    0,  121,  185,    0,    0,    0,  -84,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  430,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,   59,
    0,    0,    0,    0,  -83,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   97,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
 -246,    0,    0,    0,    0,    0,    0,  -13,    0,    0,
    0,    0,  566,    0,    0,    0,    0,    0,  566,    0,
    0,    0,    0,    0,    0,    0,    0,  192,    0,    0,
    0,    0,  566,    0,    0,    0,  363,  390,  565,  431,
   -7,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,   40,    0,  271,  427,  556,
  722,  137,   50,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  646,    0,    0,    0,  458,  -82,    0,    0,  372,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0, -121,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  665,    0,    0,  666,    0,    0,
    0,    0,    0,  181,    0,    0,    0,  485,  539,    0,
  583,    0,    0,    0,    0,    0,    0,    0,  265,    0,
  -63,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  455,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  460,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  516,  731,  729,
  147,  152,  104,  110,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,   45,    0,  584,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   -9,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  -17,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  654,  654,    0,    0,    0,    0,  -81,    0,
  -37,  -39,   10,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  591,    0,    0,    0,    0,    0,    0,  -29,
    0,    0,  675,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  654,    0,  673,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  711,    0,  609,  612,    0,    0,    0,    0,
    0,    0,    0,  692,  677,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  698,    0,    0,
    0,    0,
};
short tao_yygindex[] = {                                      0,
  -27,  468,    0,    0,    0,  -62,  -24,  -18,    0,  -16,
    0,    0,    0,  -58, -379,  -20,  298,    0,    0,    0,
    0,    0,    0, -285,    0,  111, -259,    0,    0, -169,
    0,    0,    0,    0,  269,    0,  183,    0,    0,  747,
    0,    0,  709,    0, -270,    0,  391,  394,  395,  -52,
   -4,   94,  196,    0, -207,  287,  158,    0,    0,  -48,
  -46,  -40,  707,  708,    0,    0,    0, -308,  -34,    0,
    0,    0, -435,   -8,    0,  191,    0,  345,  379,  -14,
  -12,  -10,    0,    0,    0,    0,    9,  466,    0,    0,
   21,    0,   23,    0,   24,    0,   27,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0, -148,    0,
    0,    0,    0,    0,    0,    0,    0,  762,    0,  472,
    0,    0,    0,    0,    0,    0,    0,    0,    0, -198,
    0,  -28,    0,    0,    0,    0,    0,    0,    0,  523,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  532,  469,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  167,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  241,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0, -288,    0,
    0,    0,    0,  168,    0,    0,    0,    0,    0,    0,
    0,  142,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,
};
#define TAO_YYTABLESIZE 1211
short tao_yytable[] = {                                      91,
   93,   77,  116,   76,  161,  122,   87,   88,  162,  127,
   37,  123,  382,  124,  370,  140,  422,  141,  165,  197,
  166,  373,   39,  337,   40,   41,  167,  102,   42,  369,
  102,  101,  170,   99,  101,  490,  300,  301,   46,  400,
  399,  431,  173,  188,  526,  122,  163,  190,  189,  127,
  348,  123,  189,  124,  435,  140,   75,  141,  172,   66,
  175,  176,  177,  178,  467,  459,  109,   75,  180,  343,
  270,  360,  183,  435,   75,  184,  148,  148,  186,  307,
  148,  148,  148,  438,  148,  301,  148,  137,  301,  376,
  137,  377,  137,  317,  137,   66,   70,  148,  148,  285,
   75,  148,  282,  301,  283,  205,  422,  137,  137,  102,
  174,  137,  315,  101,  285,   99,  465,  460,   66,   69,
  205,  395,  390,  205,   66,  174,    6,   90,  174,  467,
   46,   98,  148,  148,  223,  420,  110,  208,   90,  202,
  208,  138,  137,  137,  138,  189,  138,  139,  138,  412,
  139,  420,  139,  546,  139,  208,  111,  203,  208,  399,
   66,  138,  138,  148,  292,  138,   16,  139,  139,  197,
   83,  139,  198,  137,  134,  238,  232,  134,  144,  292,
  160,  465,  292,   66,  135,  284,  395,  135,  179,  136,
  643,  182,  136,  115,  134,  134,  138,  138,  134,  343,
   46,  606,  139,  139,  135,  135,  420,  524,  135,  136,
  136,  656,  251,  136,  258,  660,   46,  400,  399,  205,
   46,    6,  266,  147,  422,  540,  147,  138,  297,  134,
  134,  431,  201,  139,  171,  201,  191,  434,  192,  135,
  135,  316,  639,  297,  136,  136,  297,  550,  193,  204,
  201,  127,  197,  389,  194,  390,  434,  210,  199,  200,
  134,  391,  417,  369,   16,  206,  419,  392,   79,  197,
  135,  339,  422,  527,  189,  136,  197,  238,  373,  208,
  122,  388,  299,  386,  127,  212,  123,  102,  124,  213,
  140,  101,  141,   99,  571,  374,  375,  411,  350,  350,
  350,  214,   66,  215,  421,  227,  102,  467,  467,  216,
  101,  127,   99,  422,  321,  322,   75,  217,  205,  218,
  605,  461,  462,  174,  436,  437,  439,  441,  127,  127,
  219,   75,  127,  220,  617,  345,  346,  221,   66,  630,
  585,  222,  645,  228,  347,  348,  229,  451,  452,  349,
  240,  649,  417,  208,  586,  587,  419,   78,   81,  465,
  465,   66,  241,  127,  395,  380,  586,  587,  148,  148,
  378,  463,  464,  663,  246,  379,  248,  292,  137,  137,
  273,  274,  275,  276,  277,  278,  279,   90,  250,  322,
  280,  281,   82,   84,  421,  273,  274,  275,  276,  277,
  278,  279,   90,  500,  501,  280,  281,  122,  122,   37,
  252,  127,  127,  123,  123,  124,  124,  140,  140,  141,
  141,   39,  439,   40,   41,  502,  503,   42,  259,  504,
  505,  260,  138,  138,  264,  517,  230,  230,  139,  139,
  298,  297,  230,  230,  230,  230,  230,  230,  230,  230,
  230,  230,  230,  230,  230,  230,  365,  230,  230,  230,
  230,  599,  600,  601,  258,  134,  134,  128,  372,  258,
  417,  465,  466,  467,  419,  135,  135,  367,  368,  369,
  136,  136,  371,  373,  128,  128,  400,   37,  128,  403,
  402,  406,  428,   75,  434,  537,  435,  442,  100,  101,
  102,  103,  104,  105,  106,  107,  108,  109,  230,  445,
  453,  457,  421,  468,   55,  113,  114,  469,  417,  128,
  230,  230,  419,   77,  559,  548,  230,  230,  230,  230,
  230,  230,  230,  230,  230,  230,  230,  230,  230,  230,
  470,  230,  230,  230,  230,  197,  472,  486,  488,   77,
  128,  548,  489,  492,  493,  439,  129,  494,  495,  417,
  421,  496,  497,  419,   90,  498,  499,  507,  508,  509,
  510,  616,  511,  129,  129,  512,  515,  129,  516,  519,
  518,  521,   59,  522,  632,  525,   77,  122,  621,  529,
  530,  127,  230,  123,  531,  124,  130,  140,  535,  141,
  532,  421,  538,  555,  556,  557,  563,  238,  129,  472,
  565,  566,  569,  130,  130,  258,  238,  130,  577,  331,
  575,  582,  598,  592,  331,  331,  331,  331,  331,  331,
  331,  331,  331,  331,  331,  331,  258,  607,  238,  129,
  258,  331,  331,  608,  618,  619,  331,  623,  130,  130,
  331,  331,  331,  331,  331,  331,  331,  331,  331,  331,
  331,  331,  331,  463,  640,  635,  629,  631,  331,  331,
  641,  650,  655,  654,  657,  658,  662,  331,  665,  130,
  666,  669,  670,  672,    1,  271,  125,  331,   68,  393,
  331,   68,  331,  331,  331,  331,  331,  331,  331,  331,
  331,  331,  331,  331,  191,  205,  251,   31,  277,  331,
  331,  362,  369,  437,  331,  341,  416,  331,  331,  331,
  331,  331,  331,  331,  331,  331,  331,  331,  331,  331,
  331,  377,  352,  252,  436,  381,  331,  331,  382,  366,
  506,  331,  574,  520,  148,  331,  331,  331,  331,  331,
  331,  331,  331,  331,  331,  331,  331,  331,  331,  132,
   80,  458,  132,  331,  331,  459,  133,  460,  528,  133,
  634,  131,  331,  168,  169,  401,   85,  398,  304,  132,
  132,  636,  409,  132,  558,  331,  133,  133,  131,  131,
  133,  350,  131,  661,  644,  331,    0,    0,    0,    0,
  331,  331,  331,  331,  331,  331,  331,  331,  331,  331,
  331,  331,  331,    0,  132,  132,    0,  331,  331,    0,
    0,  133,  133,  131,  131,    0,  331,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  132,    0,    0,    0,    0,
    0,    0,  133,    0,  131,    0,    0,    0,    0,    0,
    0,  395,   75,    0,    0,    0,  331,  100,  101,  102,
  103,  104,  105,  106,  107,  108,  109,  110,  111,    8,
    9,   75,   10,  112,  113,  114,  100,  101,  102,  103,
  104,  105,  106,  107,  108,  109,  110,  111,    8,    9,
   75,   10,  112,  113,  114,  100,  101,  102,  103,  104,
  105,  106,  107,  108,  109,  110,  111,    8,    9,    0,
   10,  112,  113,  114,    0,    0,  115,    0,    0,    0,
    0,    0,   75,   90,    0,    0,    0,  100,  101,  102,
  103,  104,  105,  106,  107,  108,  109,  110,  111,    0,
    0,    0,   90,  112,  113,  114,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  260,    0,    0,
    0,   90,  260,  260,  260,  260,  260,  260,  260,  260,
  260,  260,  260,  260,  260,  260,   75,  260,  260,  260,
  260,  100,  101,  102,  103,  104,  105,  106,  107,  108,
  109,  110,  111,   90,    0,    0,    0,    0,  113,  114,
    0,    0,    0,   75,    0,    0,    0,  416,  100,  101,
  102,  103,  104,  105,  106,  107,  108,  109,  110,  111,
    0,    0,    0,    0,   75,  113,  114,    0,  260,  385,
  101,  102,    0,    0,  105,  106,  107,  108,    3,    0,
    4,    5,    6,    7,   10,    0,    0,   90,    0,    0,
    0,    0,    0,    0,    0,    0,    8,    9,    0,   10,
    0,    0,    0,   11,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   90,    0,   12,   13,   14,   15,
    0,    0,    0,    0,    0,   16,   17,    0,  320,   18,
    4,    0,   19,    7,    0,   90,    0,    0,    0,   20,
   21,    0,    0,    0,    0,    0,    8,    9,    0,   10,
    0,    0,    0,   11,    0,    0,  321,  322,  323,  324,
    0,    0,    0,  320,    0,    4,   12,    0,    7,    0,
  337,  338,  339,    0,    0,    0,    0,    0,  320,    0,
    4,    8,    9,    7,   10,    0,    0,    0,   11,   20,
   21,  321,  322,  323,  324,    0,    8,    9,    0,   10,
    0,   12,    0,   11,    0,  358,  321,  322,  323,  324,
    0,    0,    0,    0,    0,  359,   12,    0,    0,    0,
    0,    0,    0,    0,   20,   21,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,   20,
   21,
};
short tao_yycheck[] = {                                      20,
   21,   12,   30,   12,   67,   30,   17,   18,   67,   30,
    2,   30,  298,   30,  285,   30,  325,   30,   67,   59,
   67,   59,    2,   41,    2,    2,   67,   41,    2,   59,
   44,   41,   67,   41,   44,  415,  244,  245,  123,  123,
  123,  123,   70,  323,  480,   70,   67,  323,  328,   70,
   41,   70,  328,   70,  301,   70,  257,   70,   69,   58,
   71,   72,   73,   74,   58,   59,   59,  257,   79,  268,
   59,  270,   83,  320,  257,   86,   37,   38,   89,  249,
   41,   42,   43,  273,   45,   41,   47,   38,   44,   43,
   41,   45,   43,  263,   45,   58,   59,   58,   59,   40,
  257,   62,   43,   59,   45,   44,  415,   58,   59,  123,
   44,   62,  261,  123,   40,  123,   58,   59,   58,   59,
   59,   58,   59,   62,  123,   59,  260,  328,   62,  123,
  123,   58,   93,   94,  123,  257,   59,   41,  328,   44,
   44,   38,   93,   94,   41,  328,   43,   38,   45,  319,
   41,  273,   43,  533,   45,   59,   59,   62,   62,  308,
  123,   58,   59,  124,   44,   62,  303,   58,   59,  262,
  307,   62,  265,  124,   38,  196,  187,   41,  276,   59,
   59,  123,   62,  123,   38,  126,  123,   41,   78,   38,
  626,   81,   41,  302,   58,   59,   93,   94,   62,  398,
  123,  581,   93,   94,   58,   59,  328,  478,   62,   58,
   59,  647,  223,   62,  225,  651,  301,  301,  301,   60,
  123,  260,  233,   33,  533,  514,   36,  124,   44,   93,
   94,  313,   41,  124,  257,   44,  123,  301,  123,   93,
   94,  262,  622,   59,   93,   94,   62,  536,  123,  139,
   59,  272,  292,  302,  123,  302,  320,  147,  262,  263,
  124,  302,  325,  293,  303,   60,  325,  302,  307,  309,
  124,  289,  581,  481,  328,  124,  316,  298,  316,  123,
  305,  302,   91,  302,  305,   59,  305,  301,  305,   59,
  305,  301,  305,  301,  554,  329,  330,  318,  289,  290,
  291,   59,  301,   59,  325,  125,  320,  301,  302,   59,
  320,   41,  320,  622,  284,  285,  257,   59,  257,   59,
  580,  374,  375,  257,  345,  346,  347,  348,   58,   59,
   59,  257,   62,   59,  594,  305,  306,   59,  301,  610,
  256,   59,  628,  123,  314,  315,   58,  358,  359,  319,
  262,  637,  415,  257,  282,  283,  415,   13,   14,  301,
  302,  301,   60,   93,  301,   37,  282,  283,  329,  330,
   42,  376,  377,  659,   40,   47,  123,  257,  329,  330,
  321,  322,  323,  324,  325,  326,  327,  328,  123,  125,
  331,  332,   14,   15,  415,  321,  322,  323,  324,  325,
  326,  327,  328,  432,  433,  331,  332,  432,  433,  401,
  123,  432,  433,  432,  433,  432,  433,  432,  433,  432,
  433,  401,  443,  401,  401,  436,  437,  401,  123,  440,
  441,  123,  329,  330,   58,  456,  256,  257,  329,  330,
  301,  257,  262,  263,  264,  265,  266,  267,  268,  269,
  270,  271,  272,  273,  274,  275,   44,  277,  278,  279,
  280,  289,  290,  291,  475,  329,  330,   41,   94,  480,
  533,  378,  379,  380,  533,  329,  330,  282,  283,  284,
  329,  330,  124,   38,   58,   59,   61,  125,   62,   91,
   44,  257,  125,  257,  125,  506,   59,  312,  262,  263,
  264,  265,  266,  267,  268,  269,  270,  271,  328,  125,
  125,   41,  533,   62,  125,  279,  280,   62,  581,   93,
  256,  257,  581,  534,  545,  534,  262,  263,  264,  265,
  266,  267,  268,  269,  270,  271,  272,  273,  274,  275,
   62,  277,  278,  279,  280,  262,  125,  125,   59,  560,
  124,  560,  285,   59,   59,  125,   41,   59,   59,  622,
  581,   59,   59,  622,  328,   59,  257,   59,   59,   59,
   59,  592,   59,   58,   59,   59,   59,   62,   59,   59,
   41,  125,  125,  125,  612,  125,  597,  612,  597,  125,
   44,  612,  328,  612,  125,  612,   41,  612,  257,  612,
  320,  622,   40,  123,   59,   93,   40,  628,   93,  125,
   41,  289,  292,   58,   59,  626,  637,   62,   44,  257,
  309,   41,   41,  313,  262,  263,  264,  265,  266,  267,
  268,  269,  270,  271,  272,  273,  647,   44,  659,  124,
  651,  279,  280,   40,   40,  316,  257,   41,   93,   94,
  288,  262,  263,  264,  265,  266,  267,  268,  269,  270,
  271,  272,  273,  125,   44,  125,   59,   58,  279,  280,
  293,   40,   58,   41,   59,   41,   40,  288,   41,  124,
  323,   41,   44,  323,    0,   59,  257,  257,  123,  125,
  328,  320,  262,  263,  264,  265,  266,  267,  268,  269,
  270,  271,  272,  273,   59,   41,   41,  125,  125,  279,
  280,  257,   59,  123,  257,   41,  257,  328,  288,  262,
  263,  264,  265,  266,  267,  268,  269,  270,  271,  272,
  273,   59,   41,  125,  123,   59,  279,  280,   41,  272,
  443,  257,  560,  475,   36,  288,  262,  263,  264,  265,
  266,  267,  268,  269,  270,  271,  272,  273,  328,   38,
   14,  371,   41,  279,  280,  372,   38,  373,  482,   41,
  613,   41,  288,   67,   67,  310,   15,  306,  247,   58,
   59,  615,  314,   62,  544,  328,   58,   59,   58,   59,
   62,  269,   62,  652,  627,  257,   -1,   -1,   -1,   -1,
  262,  263,  264,  265,  266,  267,  268,  269,  270,  271,
  272,  273,  328,   -1,   93,   94,   -1,  279,  280,   -1,
   -1,   93,   94,   93,   94,   -1,  288,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  124,   -1,   -1,   -1,   -1,
   -1,   -1,  124,   -1,  124,   -1,   -1,   -1,   -1,   -1,
   -1,  256,  257,   -1,   -1,   -1,  328,  262,  263,  264,
  265,  266,  267,  268,  269,  270,  271,  272,  273,  274,
  275,  257,  277,  278,  279,  280,  262,  263,  264,  265,
  266,  267,  268,  269,  270,  271,  272,  273,  274,  275,
  257,  277,  278,  279,  280,  262,  263,  264,  265,  266,
  267,  268,  269,  270,  271,  272,  273,  274,  275,   -1,
  277,  278,  279,  280,   -1,   -1,  302,   -1,   -1,   -1,
   -1,   -1,  257,  328,   -1,   -1,   -1,  262,  263,  264,
  265,  266,  267,  268,  269,  270,  271,  272,  273,   -1,
   -1,   -1,  328,  278,  279,  280,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  257,   -1,   -1,
   -1,  328,  262,  263,  264,  265,  266,  267,  268,  269,
  270,  271,  272,  273,  274,  275,  257,  277,  278,  279,
  280,  262,  263,  264,  265,  266,  267,  268,  269,  270,
  271,  272,  273,  328,   -1,   -1,   -1,   -1,  279,  280,
   -1,   -1,   -1,  257,   -1,   -1,   -1,  288,  262,  263,
  264,  265,  266,  267,  268,  269,  270,  271,  272,  273,
   -1,   -1,   -1,   -1,  257,  279,  280,   -1,  328,  262,
  263,  264,   -1,   -1,  267,  268,  269,  270,  256,   -1,
  258,  259,  260,  261,  277,   -1,   -1,  328,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  274,  275,   -1,  277,
   -1,   -1,   -1,  281,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  328,   -1,  294,  295,  296,  297,
   -1,   -1,   -1,   -1,   -1,  303,  304,   -1,  256,  307,
  258,   -1,  310,  261,   -1,  328,   -1,   -1,   -1,  317,
  318,   -1,   -1,   -1,   -1,   -1,  274,  275,   -1,  277,
   -1,   -1,   -1,  281,   -1,   -1,  284,  285,  286,  287,
   -1,   -1,   -1,  256,   -1,  258,  294,   -1,  261,   -1,
  298,  299,  300,   -1,   -1,   -1,   -1,   -1,  256,   -1,
  258,  274,  275,  261,  277,   -1,   -1,   -1,  281,  317,
  318,  284,  285,  286,  287,   -1,  274,  275,   -1,  277,
   -1,  294,   -1,  281,   -1,  298,  284,  285,  286,  287,
   -1,   -1,   -1,   -1,   -1,  308,  294,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  317,  318,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  317,
  318,
};
#define TAO_YYFINAL 1
#ifndef TAO_YYDEBUG
#define TAO_YYDEBUG 0
#endif
#define TAO_YYMAXTOKEN 332
#if TAO_YYDEBUG
const char *tao_yyname[] = {
"end-of-file",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,"'%'","'&'",0,"'('","')'","'*'","'+'","','","'-'",0,"'/'",0,0,0,0,0,0,0,0,
0,0,"':'","';'","'<'","'='","'>'",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,"'['",0,"']'","'^'",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,"'{'","'|'","'}'","'~'",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,"IDENTIFIER","IDL_CONST",
"IDL_MODULE","IDL_INTERFACE","IDL_TYPEDEF","IDL_LONG","IDL_SHORT",
"IDL_UNSIGNED","IDL_DOUBLE","IDL_FLOAT","IDL_CHAR","IDL_WCHAR","IDL_OCTET",
"IDL_BOOLEAN","IDL_FIXED","IDL_ANY","IDL_OBJECT","IDL_STRUCT","IDL_UNION",
"IDL_SWITCH","IDL_ENUM","IDL_SEQUENCE","IDL_STRING","IDL_WSTRING",
"IDL_EXCEPTION","IDL_CASE","IDL_DEFAULT","IDL_READONLY","IDL_ATTRIBUTE",
"IDL_ONEWAY","IDL_IDEMPOTENT","IDL_VOID","IDL_IN","IDL_OUT","IDL_INOUT",
"IDL_RAISES","IDL_CONTEXT","IDL_NATIVE","IDL_LOCAL","IDL_ABSTRACT","IDL_CUSTOM",
"IDL_FACTORY","IDL_PRIVATE","IDL_PUBLIC","IDL_SUPPORTS","IDL_TRUNCATABLE",
"IDL_VALUETYPE","IDL_COMPONENT","IDL_CONSUMES","IDL_EMITS","IDL_EVENTTYPE",
"IDL_FINDER","IDL_GETRAISES","IDL_HOME","IDL_IMPORT","IDL_MULTIPLE",
"IDL_PRIMARYKEY","IDL_PROVIDES","IDL_PUBLISHES","IDL_SETRAISES","IDL_TYPEID",
"IDL_TYPEPREFIX","IDL_USES","IDL_MANAGES","IDL_INTEGER_LITERAL",
"IDL_UINTEGER_LITERAL","IDL_STRING_LITERAL","IDL_CHARACTER_LITERAL",
"IDL_FLOATING_PT_LITERAL","IDL_TRUETOK","IDL_FALSETOK","IDL_SCOPE_DELIMITOR",
"IDL_LEFT_SHIFT","IDL_RIGHT_SHIFT","IDL_WCHAR_LITERAL","IDL_WSTRING_LITERAL",
};
const char *tao_yyrule[] = {
"$accept : start",
"start : definitions",
"definitions : definitions definition",
"definitions :",
"$$1 :",
"definition : type_dcl $$1 ';'",
"$$2 :",
"definition : typeid_dcl $$2 ';'",
"$$3 :",
"definition : typeprefix_dcl $$3 ';'",
"$$4 :",
"definition : const_dcl $$4 ';'",
"$$5 :",
"definition : exception $$5 ';'",
"$$6 :",
"definition : interface_def $$6 ';'",
"$$7 :",
"definition : module $$7 ';'",
"$$8 :",
"definition : value_def $$8 ';'",
"$$9 :",
"definition : component $$9 ';'",
"$$10 :",
"definition : home_decl $$10 ';'",
"$$11 :",
"definition : event $$11 ';'",
"$$12 :",
"definition : error $$12 ';'",
"$$13 :",
"$$14 :",
"$$15 :",
"$$16 :",
"module : IDL_MODULE $$13 IDENTIFIER $$14 '{' $$15 definitions $$16 '}'",
"interface_def : interface",
"interface_def : interface_forward",
"$$17 :",
"$$18 :",
"$$19 :",
"interface : interface_header $$17 '{' $$18 exports $$19 '}'",
"$$20 :",
"interface_decl : IDL_INTERFACE $$20 id",
"interface_header : interface_decl inheritance_spec",
"interface_header : IDL_LOCAL interface_decl inheritance_spec",
"interface_header : IDL_ABSTRACT interface_decl inheritance_spec",
"$$21 :",
"inheritance_spec : ':' $$21 at_least_one_scoped_name",
"inheritance_spec :",
"value_def : valuetype",
"value_def : value_abs_decl",
"value_def : value_forward_decl",
"value_def : value_box_decl",
"valuetype : IDL_CUSTOM value_concrete_decl",
"valuetype : value_concrete_decl",
"$$22 :",
"$$23 :",
"$$24 :",
"value_concrete_decl : value_header $$22 '{' $$23 value_elements $$24 '}'",
"$$25 :",
"$$26 :",
"$$27 :",
"value_abs_decl : IDL_ABSTRACT value_header $$25 '{' $$26 exports $$27 '}'",
"$$28 :",
"value_header : value_decl opt_truncatable inheritance_spec $$28 supports_spec",
"$$29 :",
"value_decl : IDL_VALUETYPE $$29 id",
"opt_truncatable : IDL_TRUNCATABLE",
"opt_truncatable :",
"supports_spec : IDL_SUPPORTS at_least_one_scoped_name",
"supports_spec :",
"value_forward_decl : IDL_ABSTRACT value_decl",
"value_forward_decl : value_decl",
"value_box_decl : value_decl type_spec",
"value_elements : value_elements value_element",
"value_elements :",
"value_element : state_member",
"value_element : export",
"value_element : init_decl ';'",
"$$30 :",
"state_member : IDL_PUBLIC $$30 member_i",
"$$31 :",
"state_member : IDL_PRIVATE $$31 member_i",
"exports : exports export",
"exports :",
"$$32 :",
"export : type_dcl $$32 ';'",
"$$33 :",
"export : typeid_dcl $$33 ';'",
"$$34 :",
"export : typeprefix_dcl $$34 ';'",
"$$35 :",
"export : const_dcl $$35 ';'",
"$$36 :",
"export : exception $$36 ';'",
"$$37 :",
"export : attribute $$37 ';'",
"$$38 :",
"export : operation $$38 ';'",
"$$39 :",
"export : error $$39 ';'",
"at_least_one_scoped_name : scoped_name scoped_names",
"$$40 :",
"scoped_names : scoped_names ',' $$40 scoped_name",
"scoped_names :",
"scoped_name : id",
"$$41 :",
"scoped_name : IDL_SCOPE_DELIMITOR $$41 id",
"$$42 :",
"scoped_name : scoped_name IDL_SCOPE_DELIMITOR $$42 id",
"id : IDENTIFIER",
"interface_forward : interface_decl",
"interface_forward : IDL_LOCAL interface_decl",
"interface_forward : IDL_ABSTRACT interface_decl",
"$$43 :",
"$$44 :",
"$$45 :",
"$$46 :",
"const_dcl : IDL_CONST $$43 const_type $$44 id $$45 '=' $$46 expression",
"const_type : integer_type",
"const_type : char_type",
"const_type : octet_type",
"const_type : boolean_type",
"const_type : floating_pt_type",
"const_type : fixed_type",
"const_type : string_type_spec",
"const_type : wstring_type_spec",
"const_type : scoped_name",
"expression : const_expr",
"const_expr : or_expr",
"or_expr : xor_expr",
"or_expr : or_expr '|' xor_expr",
"xor_expr : and_expr",
"xor_expr : xor_expr '^' and_expr",
"and_expr : shift_expr",
"and_expr : and_expr '&' shift_expr",
"shift_expr : add_expr",
"shift_expr : shift_expr IDL_LEFT_SHIFT add_expr",
"shift_expr : shift_expr IDL_RIGHT_SHIFT add_expr",
"add_expr : mult_expr",
"add_expr : add_expr '+' mult_expr",
"add_expr : add_expr '-' mult_expr",
"mult_expr : unary_expr",
"mult_expr : mult_expr '*' unary_expr",
"mult_expr : mult_expr '/' unary_expr",
"mult_expr : mult_expr '%' unary_expr",
"unary_expr : primary_expr",
"unary_expr : '+' primary_expr",
"unary_expr : '-' primary_expr",
"unary_expr : '~' primary_expr",
"primary_expr : scoped_name",
"primary_expr : literal",
"primary_expr : '(' const_expr ')'",
"literal : IDL_INTEGER_LITERAL",
"literal : IDL_UINTEGER_LITERAL",
"literal : IDL_STRING_LITERAL",
"literal : IDL_WSTRING_LITERAL",
"literal : IDL_CHARACTER_LITERAL",
"literal : IDL_WCHAR_LITERAL",
"literal : IDL_FLOATING_PT_LITERAL",
"literal : IDL_TRUETOK",
"literal : IDL_FALSETOK",
"positive_int_expr : const_expr",
"$$47 :",
"type_dcl : IDL_TYPEDEF $$47 type_declarator",
"type_dcl : struct_type",
"type_dcl : union_type",
"type_dcl : enum_type",
"type_dcl : IDL_NATIVE simple_declarator",
"type_dcl : constructed_forward_type_spec",
"$$48 :",
"type_declarator : type_spec $$48 at_least_one_declarator",
"type_spec : simple_type_spec",
"type_spec : constructed_type_spec",
"simple_type_spec : base_type_spec",
"simple_type_spec : template_type_spec",
"simple_type_spec : scoped_name",
"base_type_spec : integer_type",
"base_type_spec : floating_pt_type",
"base_type_spec : char_type",
"base_type_spec : boolean_type",
"base_type_spec : octet_type",
"base_type_spec : fixed_type",
"base_type_spec : any_type",
"base_type_spec : object_type",
"template_type_spec : sequence_type_spec",
"template_type_spec : string_type_spec",
"template_type_spec : wstring_type_spec",
"constructed_type_spec : struct_type",
"constructed_type_spec : union_type",
"constructed_type_spec : enum_type",
"constructed_forward_type_spec : struct_forward_type",
"constructed_forward_type_spec : union_forward_type",
"at_least_one_declarator : declarator declarators",
"$$49 :",
"declarators : declarators ',' $$49 declarator",
"declarators :",
"declarator : simple_declarator",
"declarator : complex_declarator",
"at_least_one_simple_declarator : simple_declarator simple_declarators",
"$$50 :",
"simple_declarators : simple_declarators ',' $$50 simple_declarator",
"simple_declarators :",
"simple_declarator : id",
"complex_declarator : array_declarator",
"integer_type : signed_int",
"integer_type : unsigned_int",
"signed_int : IDL_LONG",
"signed_int : IDL_LONG IDL_LONG",
"signed_int : IDL_SHORT",
"unsigned_int : IDL_UNSIGNED IDL_LONG",
"unsigned_int : IDL_UNSIGNED IDL_LONG IDL_LONG",
"unsigned_int : IDL_UNSIGNED IDL_SHORT",
"floating_pt_type : IDL_DOUBLE",
"floating_pt_type : IDL_FLOAT",
"floating_pt_type : IDL_LONG IDL_DOUBLE",
"fixed_type : IDL_FIXED",
"char_type : IDL_CHAR",
"char_type : IDL_WCHAR",
"octet_type : IDL_OCTET",
"boolean_type : IDL_BOOLEAN",
"any_type : IDL_ANY",
"object_type : IDL_OBJECT",
"$$51 :",
"struct_decl : IDL_STRUCT $$51 id",
"$$52 :",
"$$53 :",
"$$54 :",
"struct_type : struct_decl $$52 '{' $$53 at_least_one_member $$54 '}'",
"at_least_one_member : member members",
"members : members member",
"members :",
"$$55 :",
"member : $$55 member_i",
"$$56 :",
"$$57 :",
"member_i : type_spec $$56 at_least_one_declarator $$57 ';'",
"$$58 :",
"member_i : error $$58 ';'",
"$$59 :",
"union_decl : IDL_UNION $$59 id",
"$$60 :",
"$$61 :",
"$$62 :",
"$$63 :",
"$$64 :",
"$$65 :",
"union_type : union_decl IDL_SWITCH $$60 '(' $$61 switch_type_spec $$62 ')' $$63 '{' $$64 at_least_one_case_branch $$65 '}'",
"switch_type_spec : integer_type",
"switch_type_spec : char_type",
"switch_type_spec : octet_type",
"switch_type_spec : boolean_type",
"switch_type_spec : enum_type",
"switch_type_spec : scoped_name",
"at_least_one_case_branch : case_branch case_branches",
"case_branches : case_branches case_branch",
"case_branches :",
"$$66 :",
"$$67 :",
"case_branch : at_least_one_case_label $$66 element_spec $$67 ';'",
"$$68 :",
"case_branch : error $$68 ';'",
"at_least_one_case_label : case_label case_labels",
"case_labels : case_labels case_label",
"case_labels :",
"$$69 :",
"case_label : IDL_DEFAULT $$69 ':'",
"$$70 :",
"$$71 :",
"case_label : IDL_CASE $$70 const_expr $$71 ':'",
"$$72 :",
"element_spec : type_spec $$72 declarator",
"struct_forward_type : struct_decl",
"union_forward_type : union_decl",
"$$73 :",
"$$74 :",
"$$75 :",
"$$76 :",
"enum_type : IDL_ENUM $$73 id $$74 '{' $$75 at_least_one_enumerator $$76 '}'",
"at_least_one_enumerator : enumerator enumerators",
"$$77 :",
"enumerators : enumerators ',' $$77 enumerator",
"enumerators :",
"enumerator : IDENTIFIER",
"$$78 :",
"$$79 :",
"sequence_type_spec : seq_head ',' $$78 positive_int_expr $$79 '>'",
"sequence_type_spec : seq_head '>'",
"$$80 :",
"$$81 :",
"seq_head : IDL_SEQUENCE $$80 '<' $$81 simple_type_spec",
"$$82 :",
"$$83 :",
"string_type_spec : string_head '<' $$82 positive_int_expr $$83 '>'",
"string_type_spec : string_head",
"string_head : IDL_STRING",
"$$84 :",
"$$85 :",
"wstring_type_spec : wstring_head '<' $$84 positive_int_expr $$85 '>'",
"wstring_type_spec : wstring_head",
"wstring_head : IDL_WSTRING",
"$$86 :",
"array_declarator : id $$86 at_least_one_array_dim",
"at_least_one_array_dim : array_dim array_dims",
"array_dims : array_dims array_dim",
"array_dims :",
"$$87 :",
"$$88 :",
"array_dim : '[' $$87 positive_int_expr $$88 ']'",
"attribute : attribute_readonly",
"attribute : attribute_readwrite",
"$$89 :",
"$$90 :",
"$$91 :",
"$$92 :",
"attribute_readonly : IDL_READONLY $$89 IDL_ATTRIBUTE $$90 param_type_spec $$91 at_least_one_simple_declarator $$92 opt_raises",
"$$93 :",
"$$94 :",
"$$95 :",
"$$96 :",
"attribute_readwrite : IDL_ATTRIBUTE $$93 param_type_spec $$94 at_least_one_simple_declarator $$95 opt_getraises $$96 opt_setraises",
"$$97 :",
"$$98 :",
"$$99 :",
"$$100 :",
"exception : IDL_EXCEPTION $$97 id $$98 '{' $$99 members $$100 '}'",
"$$101 :",
"$$102 :",
"$$103 :",
"$$104 :",
"operation : opt_op_attribute op_type_spec $$101 IDENTIFIER $$102 parameter_list $$103 opt_raises $$104 opt_context",
"opt_op_attribute : IDL_ONEWAY",
"opt_op_attribute : IDL_IDEMPOTENT",
"opt_op_attribute :",
"op_type_spec : param_type_spec",
"op_type_spec : IDL_VOID",
"$$105 :",
"$$106 :",
"init_decl : IDL_FACTORY $$105 IDENTIFIER $$106 init_parameter_list",
"$$107 :",
"init_parameter_list : '(' $$107 ')'",
"$$108 :",
"init_parameter_list : '(' $$108 at_least_one_in_parameter ')'",
"at_least_one_in_parameter : in_parameter in_parameters",
"$$109 :",
"in_parameters : in_parameters ',' $$109 in_parameter",
"in_parameters :",
"$$110 :",
"$$111 :",
"in_parameter : IDL_IN $$110 param_type_spec $$111 declarator",
"$$112 :",
"parameter_list : '(' $$112 ')'",
"$$113 :",
"parameter_list : '(' $$113 at_least_one_parameter ')'",
"at_least_one_parameter : parameter parameters",
"$$114 :",
"parameters : parameters ',' $$114 parameter",
"parameters :",
"$$115 :",
"$$116 :",
"parameter : direction $$115 param_type_spec $$116 declarator",
"param_type_spec : base_type_spec",
"param_type_spec : string_type_spec",
"param_type_spec : wstring_type_spec",
"param_type_spec : scoped_name",
"direction : IDL_IN",
"direction : IDL_OUT",
"direction : IDL_INOUT",
"$$117 :",
"$$118 :",
"opt_raises : IDL_RAISES $$117 '(' $$118 at_least_one_scoped_name ')'",
"opt_raises :",
"$$119 :",
"$$120 :",
"opt_getraises : IDL_GETRAISES $$119 '(' $$120 at_least_one_scoped_name ')'",
"opt_getraises :",
"$$121 :",
"$$122 :",
"opt_setraises : IDL_SETRAISES $$121 '(' $$122 at_least_one_scoped_name ')'",
"opt_setraises :",
"$$123 :",
"$$124 :",
"opt_context : IDL_CONTEXT $$123 '(' $$124 at_least_one_string_literal ')'",
"opt_context :",
"at_least_one_string_literal : IDL_STRING_LITERAL string_literals",
"$$125 :",
"string_literals : string_literals ',' $$125 IDL_STRING_LITERAL",
"string_literals :",
"typeid_dcl : IDL_TYPEID scoped_name IDL_STRING_LITERAL",
"typeprefix_dcl : IDL_TYPEPREFIX scoped_name IDL_STRING_LITERAL",
"component : component_decl",
"component : component_forward_decl",
"component_forward_decl : IDL_COMPONENT id",
"$$126 :",
"$$127 :",
"$$128 :",
"component_decl : component_header $$126 '{' $$127 component_exports $$128 '}'",
"$$129 :",
"$$130 :",
"component_header : IDL_COMPONENT id $$129 component_inheritance_spec $$130 supports_spec",
"$$131 :",
"component_inheritance_spec : ':' $$131 scoped_name",
"component_inheritance_spec :",
"component_exports : component_exports component_export",
"component_exports :",
"$$132 :",
"component_export : provides_decl $$132 ';'",
"$$133 :",
"component_export : uses_decl $$133 ';'",
"$$134 :",
"component_export : emits_decl $$134 ';'",
"$$135 :",
"component_export : publishes_decl $$135 ';'",
"$$136 :",
"component_export : consumes_decl $$136 ';'",
"$$137 :",
"component_export : attribute $$137 ';'",
"provides_decl : IDL_PROVIDES interface_type id",
"interface_type : scoped_name",
"interface_type : IDL_OBJECT",
"uses_decl : IDL_USES opt_multiple interface_type id",
"opt_multiple : IDL_MULTIPLE",
"opt_multiple :",
"emits_decl : IDL_EMITS scoped_name id",
"publishes_decl : IDL_PUBLISHES scoped_name id",
"consumes_decl : IDL_CONSUMES scoped_name id",
"$$138 :",
"home_decl : home_header $$138 home_body",
"$$139 :",
"$$140 :",
"$$141 :",
"$$142 :",
"$$143 :",
"$$144 :",
"home_header : IDL_HOME $$139 id $$140 home_inheritance_spec $$141 supports_spec $$142 IDL_MANAGES $$143 scoped_name $$144 primary_key_spec",
"$$145 :",
"home_inheritance_spec : ':' $$145 scoped_name",
"home_inheritance_spec :",
"primary_key_spec : IDL_PRIMARYKEY scoped_name",
"primary_key_spec :",
"$$146 :",
"$$147 :",
"home_body : '{' $$146 home_exports $$147 '}'",
"home_exports : home_exports home_export",
"home_exports :",
"home_export : export",
"$$148 :",
"home_export : factory_decl $$148 ';'",
"$$149 :",
"home_export : finder_decl $$149 ';'",
"$$150 :",
"$$151 :",
"factory_decl : IDL_FACTORY id $$150 init_parameter_list $$151 opt_raises",
"$$152 :",
"$$153 :",
"finder_decl : IDL_FINDER id $$152 init_parameter_list $$153 opt_raises",
"event : event_decl",
"event : event_abs_decl",
"event : event_forward_decl",
"event_forward_decl : event_abs_forward_decl",
"event_forward_decl : event_concrete_forward_decl",
"event_concrete_forward_decl : IDL_EVENTTYPE id",
"event_abs_forward_decl : IDL_ABSTRACT IDL_EVENTTYPE id",
"$$154 :",
"$$155 :",
"$$156 :",
"event_abs_decl : event_abs_header event_rest_of_header $$154 '{' $$155 exports $$156 '}'",
"event_abs_header : IDL_ABSTRACT IDL_EVENTTYPE id",
"event_custom_header : IDL_CUSTOM IDL_EVENTTYPE id",
"event_plain_header : IDL_EVENTTYPE id",
"$$157 :",
"event_rest_of_header : opt_truncatable inheritance_spec $$157 supports_spec",
"$$158 :",
"$$159 :",
"$$160 :",
"event_decl : event_header event_rest_of_header $$158 '{' $$159 value_elements $$160 '}'",
"event_header : event_custom_header",
"event_header : event_plain_header",
};
#endif
#define tao_yyclearin (tao_yychar=(-1))
#define tao_yyerrok (tao_yyerrflag=0)
#ifndef TAO_YYSTACKSIZE
#ifdef TAO_YYMAXDEPTH
#define TAO_YYSTACKSIZE TAO_YYMAXDEPTH
#else
#define TAO_YYSTACKSIZE 10000
#endif
#endif
int tao_yydebug;
int tao_yynerrs;
int tao_yyerrflag;
int tao_yychar;
short *tao_yyssp;
TAO_YYSTYPE *tao_yyvsp;
TAO_YYSTYPE tao_yyval;
TAO_YYSTYPE tao_yylval;
#define tao_yystacksize TAO_YYSTACKSIZE
short tao_yyss[TAO_YYSTACKSIZE];
TAO_YYSTYPE tao_yyvs[TAO_YYSTACKSIZE];
/* programs */

/*
 * ???
 */
int
tao_yywrap (void)
{
  return 1;
}

/*
 * Report an error situation discovered in a production
 */
void
tao_yyerror (const char *msg)
{
  ACE_ERROR ((LM_ERROR,
              "%s\n",
              msg));
}
#define TAO_YYABORT goto tao_yyabort
#define TAO_YYACCEPT goto tao_yyaccept
#define TAO_YYERROR goto tao_yyerrlab
#ifdef TAO_YYDEBUG
#ifndef TAO_YYDEBUG_LEXER_TEXT /* pointer to the text isolated by the lexer*/
#define TAO_YYDEBUG_LEXER_TEXT "TAO_YYDEBUG_LEXER_TEXT not defined"
#endif
#ifndef TAO_YYDEBUG_INDENT_STRING
#define TAO_YYDEBUG_INDENT_STRING  "|       "
#endif
#ifndef TAO_YYDEBUG_REDUCE_STRING
#define TAO_YYDEBUG_REDUCE_STRING  "+-------"
#endif
#ifndef TAO_YYDEBUG_INDENT
#ifdef __cplusplus
void TAO_YYDEBUG_INDENT(int tao_yyindent)
#else
TAO_YYDEBUG_INDENT(tao_yyindent)
int tao_yyindent;
#endif
{
    while(tao_yyindent-- > 0)
        printf("%s", TAO_YYDEBUG_INDENT_STRING);
}
#endif /* TAO_YYDEBUG_INDENT */
#ifndef TAO_YYDEBUG_REDUCE
#ifdef __cplusplus
void TAO_YYDEBUG_REDUCE(int, int, const char *tao_yyrule_string, int tao_yynew_indent, int tao_yyrhs_count)
#else
TAO_YYDEBUG_REDUCE(tao_yynew_state, tao_yyrule_num, tao_yyrule_string, tao_yynew_indent, tao_yyrhs_count)
int tao_yynew_state;
int tao_yyrule_num;
char * tao_yyrule_string;
int tao_yynew_indent;
int tao_yyrhs_count;
#endif
{
    if (1 < tao_yyrhs_count)
    {  /* draw the graphics for the reduction */
        TAO_YYDEBUG_INDENT(tao_yynew_indent);
        while(1 < tao_yyrhs_count--)
            printf("%s", TAO_YYDEBUG_REDUCE_STRING);
        putchar('+'); /* left rotated L would look nice */
        putchar('\n');
        TAO_YYDEBUG_INDENT(tao_yynew_indent);
        putchar('|'); /* down arrow would look nice */
        putchar('\n');
    }
    TAO_YYDEBUG_INDENT(tao_yynew_indent);
    /* Only print the resulting token name */
    while (*tao_yyrule_string)
        putchar(*tao_yyrule_string++);
    putchar('\n');
}
#endif /* TAO_YYDEBUG_REDUCE */
#ifndef TAO_YYDEBUG_SHIFT_LEXEME
#ifdef __cplusplus
void TAO_YYDEBUG_SHIFT_LEXEME(int, int, const char *tao_yytoken_string, int tao_yynew_indent)
#else
TAO_YYDEBUG_SHIFT_LEXEME(tao_yyold_state, tao_yynew_state, tao_yytoken_string, tao_yynew_indent)
int tao_yyold_state;
int tao_yynew_state;
char * tao_yytoken_string;
int tao_yynew_indent;
#endif
{
    TAO_YYDEBUG_INDENT(tao_yynew_indent);
    printf("%s <-- `%s'\n", tao_yytoken_string, TAO_YYDEBUG_LEXER_TEXT);
}
#endif /*  TAO_YYDEBUG_SHIFT_LEXEME */
#ifndef TAO_YYDEBUG_LOOK_AHEAD
#ifdef __cplusplus
void TAO_YYDEBUG_LOOK_AHEAD(int, int tao_yytoken_num, const char *tao_yytoken_string, int tao_yyindent)
#else
TAO_YYDEBUG_LOOK_AHEAD(tao_yynew_state, tao_yytoken_num, tao_yytoken_string, tao_yyindent)
int tao_yynew_state;
int tao_yytoken_num;
char * tao_yytoken_string;
int tao_yyindent;
#endif
{
    TAO_YYDEBUG_INDENT(tao_yyindent);
    printf("          .... look ahead at %s   `%s'\n",
           tao_yytoken_string,
           (0 == tao_yytoken_num)? "\0": TAO_YYDEBUG_LEXER_TEXT);
}
#endif /* TAO_YYDEBUG_LOOK_AHEAD */
#ifndef TAO_YYDEBUG_DISCARD_STATE
#ifdef __cplusplus
void TAO_YYDEBUG_DISCARD_STATE(int, int tao_yyindent)
#else
TAO_YYDEBUG_DISCARD_STATE(tao_yynew_state, tao_yyindent)
int tao_yynew_state;
int tao_yyindent;
#endif
{
    if (0 < tao_yyindent)
    {  /* draw the graphics for the reduction */
        TAO_YYDEBUG_INDENT(tao_yyindent-1);
        printf("%s", TAO_YYDEBUG_REDUCE_STRING);
        putchar('+'); /* left rotated L would look nice */
        printf("  discarding state\n");
        TAO_YYDEBUG_INDENT(tao_yyindent-1);
        putchar('|'); /* down arrow would look nice */
        putchar('\n');
    }
    else
    {
        if (0 == tao_yyindent)
            printf("discarding state\n");
        else
            printf("no more states to discard: parser will abort\n");
    }
}
#endif /* TAO_YYDEBUG_DISCARD_STATE */
#ifndef TAO_YYDEBUG_DISCARD_TOKEN
#ifdef __cplusplus
void TAO_YYDEBUG_DISCARD_TOKEN(int, int, const char *tao_yytoken_string, int tao_yyindent)
#else
TAO_YYDEBUG_DISCARD_TOKEN(tao_yynew_state, tao_yytoken_num, tao_yytoken_string, tao_yyindent)
int tao_yynew_state;
int tao_yytoken_num;
char * tao_yytoken_string;
int tao_yyindent;
#endif
{
    TAO_YYDEBUG_INDENT(tao_yyindent);
    printf("discarding token %s\n", tao_yytoken_string);
}
#endif /* TAO_YYDEBUG_DISCARD_TOKEN */
#ifndef TAO_YYDEBUG_SHIFT_ERROR_LEXEME
#ifdef __cplusplus
void TAO_YYDEBUG_SHIFT_ERROR_LEXEME(int, int, int tao_yyindent)
#else
TAO_YYDEBUG_SHIFT_ERROR_LEXEME(tao_yyold_state, tao_yynew_state, tao_yyindent)
int tao_yyold_state;
int tao_yynew_state;
int tao_yyindent;
#endif
{
    TAO_YYDEBUG_INDENT(tao_yyindent);
    printf("error\n");
}
#endif /* TAO_YYDEBUG_SHIFT_ERROR_LEXEME */
#endif /* TAO_YYDEBUG */
#ifdef __cplusplus
extern "C" { extern char *ace_foo(const char *); }
#endif
int
tao_yyparse()
{
    register int tao_yym, tao_yyn, tao_yystate;
#if TAO_YYDEBUG
    register const char *tao_yys;
#ifndef __cplusplus
    extern char *ace_foo();
#endif

    if ((tao_yys = ACE_OS::getenv("TAO_YYDEBUG")))
    {
        tao_yyn = *tao_yys;
        if (tao_yyn >= '0' && tao_yyn <= '9')
            tao_yydebug = tao_yyn - '0';
    }
#endif

    tao_yynerrs = 0;
    tao_yyerrflag = 0;
    tao_yychar = (-1);

    tao_yyssp = tao_yyss;
    tao_yyvsp = tao_yyvs;
    *tao_yyssp = tao_yystate = 0;

tao_yyloop:
    if ((tao_yyn = tao_yydefred[tao_yystate])) goto tao_yyreduce;
    if (tao_yychar < 0)
    {
        if ((tao_yychar = tao_yylex()) < 0) tao_yychar = 0;
#if TAO_YYDEBUG
        if (tao_yydebug)
        {
            tao_yys = 0;
            if (tao_yychar <= TAO_YYMAXTOKEN) tao_yys = tao_yyname[tao_yychar];
            if (!tao_yys) tao_yys = "illegal-symbol";
            if (5 < tao_yydebug)
                printf("tao_yydebug: state %d, reading %d (%s)\n", tao_yystate,
                        tao_yychar, tao_yys);
            else
                TAO_YYDEBUG_LOOK_AHEAD(tao_yystate, tao_yychar, tao_yys, tao_yyssp-tao_yyss);
        }
#endif
    }
    if ((tao_yyn = tao_yysindex[tao_yystate]) && (tao_yyn += tao_yychar) >= 0 &&
            tao_yyn <= TAO_YYTABLESIZE && tao_yycheck[tao_yyn] == tao_yychar)
    {
#if TAO_YYDEBUG
        if (tao_yydebug)
            if (5 < tao_yydebug)
                printf("tao_yydebug: state %d, shifting to state %d\n",
                        tao_yystate, tao_yytable[tao_yyn]);
            else
                TAO_YYDEBUG_SHIFT_LEXEME(tao_yystate, tao_yytable[tao_yyn], tao_yys, tao_yyssp-tao_yyss);
#endif
        if (tao_yyssp >= tao_yyss + tao_yystacksize - 1)
        {
            goto tao_yyoverflow;
        }
        *++tao_yyssp = tao_yystate = tao_yytable[tao_yyn];
        *++tao_yyvsp = tao_yylval;
        tao_yychar = (-1);
        if (tao_yyerrflag > 0)  --tao_yyerrflag;
        goto tao_yyloop;
    }
    if ((tao_yyn = tao_yyrindex[tao_yystate]) && (tao_yyn += tao_yychar) >= 0 &&
            tao_yyn <= TAO_YYTABLESIZE && tao_yycheck[tao_yyn] == tao_yychar)
    {
        tao_yyn = tao_yytable[tao_yyn];
        goto tao_yyreduce;
    }
    if (tao_yyerrflag) goto tao_yyinrecovery;
#ifdef lint
    goto tao_yynewerror;
#endif

//    tao_yyerror("syntax error");
#ifdef lint
    goto tao_yyerrlab;
#endif
    ++tao_yynerrs;
tao_yyinrecovery:
    if (tao_yyerrflag < 3)
    {
        tao_yyerrflag = 3;
        for (;;)
        {
            if ((tao_yyn = tao_yysindex[*tao_yyssp]) && (tao_yyn += TAO_YYERRCODE) >= 0 &&
                    tao_yyn <= TAO_YYTABLESIZE && tao_yycheck[tao_yyn] == TAO_YYERRCODE)
            {
#if TAO_YYDEBUG
                if (tao_yydebug)
                    if (5 < tao_yydebug)
                        printf("tao_yydebug: state %d, error recovery shifting\
 to state %d\n", *tao_yyssp, tao_yytable[tao_yyn]);
                    else
                        TAO_YYDEBUG_SHIFT_ERROR_LEXEME(*tao_yyssp, tao_yytable[tao_yyn], tao_yyssp-tao_yyss);
#endif
                if (tao_yyssp >= tao_yyss + tao_yystacksize - 1)
                {
                    goto tao_yyoverflow;
                }
                *++tao_yyssp = tao_yystate = tao_yytable[tao_yyn];
                *++tao_yyvsp = tao_yylval;
                goto tao_yyloop;
            }
            else
            {
#if TAO_YYDEBUG
                if (tao_yydebug)
                    if (5 < tao_yydebug)
                        printf("tao_yydebug: error recovery discarding state %d\
",
                            *tao_yyssp);
                    else
                        TAO_YYDEBUG_DISCARD_STATE(*tao_yyssp, tao_yyssp-tao_yyss-1);
#endif
                if (tao_yyssp <= tao_yyss) goto tao_yyabort;
                --tao_yyssp;
                --tao_yyvsp;
            }
        }
    }
    else
    {
        if (tao_yychar == 0) goto tao_yyabort;
#if TAO_YYDEBUG
        if (tao_yydebug)
        {
            tao_yys = 0;
            if (tao_yychar <= TAO_YYMAXTOKEN) tao_yys = tao_yyname[tao_yychar];
            if (!tao_yys) tao_yys = "illegal-symbol";
            if (5 < tao_yydebug)
                printf("tao_yydebug: state %d, error recovery discards token %d (%s)\n",
                    tao_yystate, tao_yychar, tao_yys);
            else 
                TAO_YYDEBUG_DISCARD_TOKEN(tao_yystate, tao_yychar, tao_yys, tao_yyssp-tao_yyss);
        }
#endif
        tao_yychar = (-1);
        goto tao_yyloop;
    }
tao_yyreduce:
    tao_yym = tao_yylen[tao_yyn];
    tao_yyval = tao_yyvsp[1-tao_yym];
#if TAO_YYDEBUG
    if (tao_yydebug)
        if (5 < tao_yydebug)
            printf("tao_yydebug: state %d, reducing by rule %d (%s)\n",
                    tao_yystate, tao_yyn, tao_yyrule[tao_yyn]);
        else
            TAO_YYDEBUG_REDUCE(tao_yystate, tao_yyn, tao_yyrule[tao_yyn], tao_yyssp-tao_yyss-tao_yym, tao_yym);
#endif
    switch (tao_yyn)
    {
case 4:
{
/* definition : type_dcl*/
          idl_global->set_parse_state (IDL_GlobalData::PS_TypeDeclSeen);
        }
break;
case 5:
{
/*      ';'*/
          idl_global->set_parse_state (IDL_GlobalData::PS_NoState);
        }
break;
case 6:
{
/*      | typeid_dcl*/
          idl_global->set_parse_state (IDL_GlobalData::PS_TypeIdDeclSeen);
        }
break;
case 7:
{
/*      ';'*/
          idl_global->set_parse_state (IDL_GlobalData::PS_NoState);
        }
break;
case 8:
{
/*      | typeprefix_dcl*/
          idl_global->set_parse_state (IDL_GlobalData::PS_TypePrefixDeclSeen);
        }
break;
case 9:
{
/*      ';'*/
          idl_global->set_parse_state (IDL_GlobalData::PS_NoState);
        }
break;
case 10:
{
/*      | const_dcl*/
          idl_global->set_parse_state (IDL_GlobalData::PS_ConstDeclSeen);
        }
break;
case 11:
{
/*      ';'*/
          idl_global->set_parse_state (IDL_GlobalData::PS_NoState);
        }
break;
case 12:
{
/*      | exception*/
          idl_global->set_parse_state (IDL_GlobalData::PS_ExceptDeclSeen);
        }
break;
case 13:
{
/*      ';'*/
        idl_global->set_parse_state (IDL_GlobalData::PS_NoState);
        }
break;
case 14:
{
/*      | interface_def*/
          idl_global->set_parse_state (IDL_GlobalData::PS_InterfaceDeclSeen);
        }
break;
case 15:
{
/*      ';'*/
          idl_global->set_parse_state (IDL_GlobalData::PS_NoState);
        }
break;
case 16:
{
/*      | module*/
          idl_global->set_parse_state (IDL_GlobalData::PS_ModuleDeclSeen);
        }
break;
case 17:
{
/*      ';'*/
          idl_global->set_parse_state (IDL_GlobalData::PS_NoState);
        }
break;
case 18:
{
/*      | value_def*/
          idl_global->set_parse_state (IDL_GlobalData::PS_ValueTypeDeclSeen);
        }
break;
case 19:
{
/*      ';'*/
          idl_global->set_parse_state (IDL_GlobalData::PS_NoState);
        }
break;
case 20:
{
/*      | component*/
          idl_global->set_parse_state (IDL_GlobalData::PS_ComponentDeclSeen);
        }
break;
case 21:
{
/*      ';'*/
          idl_global->set_parse_state (IDL_GlobalData::PS_NoState);
        }
break;
case 22:
{
/*      | home_decl*/
          idl_global->set_parse_state (IDL_GlobalData::PS_HomeDeclSeen);
        }
break;
case 23:
{
/*      ';'*/
          idl_global->set_parse_state (IDL_GlobalData::PS_NoState);
        }
break;
case 24:
{
/*      | event*/
          idl_global->set_parse_state (IDL_GlobalData::PS_EventDeclSeen);
        }
break;
case 25:
{
/*      ';'*/
          idl_global->set_parse_state (IDL_GlobalData::PS_NoState);
        }
break;
case 26:
{
/*      | error*/
          idl_global->err()->syntax_error (idl_global->parse_state());
        }
break;
case 27:
{
/*      ';'*/
          idl_global->set_parse_state (IDL_GlobalData::PS_NoState);
          tao_yyerrok;
        }
break;
case 28:
{
/* module  : IDL_MODULE*/
            idl_global->set_parse_state (IDL_GlobalData::PS_ModuleSeen);
          }
break;
case 29:
{
/*        IDENTIFIER*/
            Identifier id (tao_yyvsp[0].strval);
            UTL_ScopedName n (&id, 
                              0);
            AST_Module *m = 0;
            UTL_Scope *s = idl_global->scopes ().top_non_null ();

            idl_global->set_parse_state (IDL_GlobalData::PS_ModuleIDSeen);
            /*
             * Make a new module and add it to the enclosing scope
             */
            if (s != 0) 
              {
                m = idl_global->gen ()->create_module (s, 
                                                       &n);
                (void) s->fe_add_module (m);
              }
            /*
             * Push it on the stack
             */
            idl_global->scopes ().push (m);
          }
break;
case 30:
{
/*        '{'*/
            idl_global->set_parse_state (IDL_GlobalData::PS_ModuleSqSeen);
          }
break;
case 31:
{
/*        definitions*/
            idl_global->set_parse_state (IDL_GlobalData::PS_ModuleBodySeen);
          }
break;
case 32:
{
/*        '}'*/
            idl_global->set_parse_state (IDL_GlobalData::PS_ModuleQsSeen);
            /*
             * Finished with this module - pop it from the scope stack.
             */
            idl_global->scopes ().pop ();
          }
break;
case 35:
{
/* interface : interface_header          */
          UTL_Scope *s = idl_global->scopes ().top_non_null ();
          AST_Interface *i = 0;

          /*
           * Make a new interface node and add it to its enclosing scope.
           */
          if (s != 0 && tao_yyvsp[0].ihval != 0) 
            {
              i = 
                idl_global->gen ()->create_interface (
                                        tao_yyvsp[0].ihval->name (),
                                        tao_yyvsp[0].ihval->inherits (),
                                        tao_yyvsp[0].ihval->n_inherits (),
                                        tao_yyvsp[0].ihval->inherits_flat (),
                                        tao_yyvsp[0].ihval->n_inherits_flat (),
                                        tao_yyvsp[0].ihval->is_local (),
                                        tao_yyvsp[0].ihval->is_abstract ()
                                      );
              AST_Interface::fwd_redefinition_helper (i, 
                                                      s);
              /*
               * Add the interface to its definition scope.
               */
              (void) s->fe_add_interface (i);

              /* This FE_InterfaceHeader class isn't destroyed with the AST.*/
              tao_yyvsp[0].ihval->name ()->destroy ();
              delete tao_yyvsp[0].ihval;
              tao_yyvsp[0].ihval = 0;
            }

          /*
           * Push it on the scope stack.
           */
          idl_global->scopes ().push (i);
        }
break;
case 36:
{
/*      '{'*/
          idl_global->set_parse_state (IDL_GlobalData::PS_InterfaceSqSeen);
        }
break;
case 37:
{
/*      exports*/
          idl_global->set_parse_state (IDL_GlobalData::PS_InterfaceBodySeen);
        }
break;
case 38:
{
/*      '}'*/
          idl_global->set_parse_state (IDL_GlobalData::PS_InterfaceQsSeen);

          /*
           * Done with this interface - pop it off the scopes stack
           */
          idl_global->scopes ().pop ();
        }
break;
case 39:
{
/* interface_decl : IDL_INTERFACE*/
           idl_global->set_parse_state (IDL_GlobalData::PS_InterfaceSeen);
         }
break;
case 40:
{
/*       id*/
           idl_global->set_parse_state (IDL_GlobalData::PS_InterfaceIDSeen);
           tao_yyval.idval = tao_yyvsp[0].idval;
         }
break;
case 41:
{
/* interface_header : interface_decl inheritance_spec*/
          idl_global->set_parse_state (IDL_GlobalData::PS_InheritSpecSeen);

          /*
           * Create an AST representation of the information in the header
           * part of an interface - this representation contains a computed
           * list of all interfaces which this interface inherits from,
           * recursively
           */
          UTL_ScopedName n (tao_yyvsp[-1].idval, 
                            0);
          ACE_NEW_RETURN (tao_yyval.ihval,
                          FE_InterfaceHeader (&n,
                                              tao_yyvsp[0].nlval,
                                              I_FALSE,
                                              I_FALSE,
                                              I_TRUE),
                          1);
        }
break;
case 42:
{
/*      | IDL_LOCAL interface_decl inheritance_spec*/
          idl_global->set_parse_state (IDL_GlobalData::PS_InheritSpecSeen);

          /*
           * Create an AST representation of the information in the header
           * part of an interface - this representation contains a computed
           * list of all interfaces which this interface inherits from,
           * recursively
           */
          UTL_ScopedName n (tao_yyvsp[-1].idval, 
                            0);
          ACE_NEW_RETURN (tao_yyval.ihval,
                          FE_InterfaceHeader (&n, 
                                              tao_yyvsp[0].nlval,
                                              I_TRUE,
                                              I_FALSE,
                                              I_TRUE),
                          1);
        }
break;
case 43:
{
/*      | IDL_ABSTRACT interface_decl inheritance_spec*/
          idl_global->set_parse_state (IDL_GlobalData::PS_InheritSpecSeen);

          /*
           * Create an AST representation of the information in the header
           * part of an interface - this representation contains a computed
           * list of all interfaces which this interface inherits from,
           * recursively
           */
          UTL_ScopedName n (tao_yyvsp[-1].idval, 
                            0);
          ACE_NEW_RETURN (tao_yyval.ihval,
                          FE_InterfaceHeader (&n, 
                                              tao_yyvsp[0].nlval,
                                              I_FALSE,
                                              I_TRUE,
                                              I_TRUE),
                          1);
        }
break;
case 44:
{
/* inheritance_spec : ':'*/
          idl_global->set_parse_state (IDL_GlobalData::PS_InheritColonSeen);
        }
break;
case 45:
{
/*      at_least_one_scoped_name*/
          tao_yyval.nlval = tao_yyvsp[0].nlval;
        }
break;
case 46:
{
/*      |  EMPTY */
          tao_yyval.nlval = 0;
        }
break;
case 51:
{
/* valuetype : IDL_CUSTOM value_concrete_decl*/
           ACE_DEBUG ((LM_DEBUG,
                       ACE_TEXT ("error in %s line %d\n"),
                       idl_global->filename ()->get_string (),
                       idl_global->lineno ()));
           ACE_DEBUG ((LM_DEBUG,
                       ACE_TEXT ("Sorry, I (TAO_IDL) can't handle")
                       ACE_TEXT (" custom yet\n")));
        }
break;
case 53:
{
/* value_concrete_decl : value_header*/
          UTL_Scope *s = idl_global->scopes ().top_non_null ();
          AST_ValueType *v = 0;
          AST_Interface *i = 0;

          if (s != 0 && tao_yyvsp[0].vhval != 0) 
            {
              v = 
                idl_global->gen ()->create_valuetype (
                    tao_yyvsp[0].vhval->name (),
                    tao_yyvsp[0].vhval->inherits (),
                    tao_yyvsp[0].vhval->n_inherits (),
                    tao_yyvsp[0].vhval->inherits_concrete (),
                    tao_yyvsp[0].vhval->inherits_flat (),
                    tao_yyvsp[0].vhval->n_inherits_flat (),
                    tao_yyvsp[0].vhval->supports (),
                    tao_yyvsp[0].vhval->n_supports (),
                    tao_yyvsp[0].vhval->supports_concrete (),
                    I_FALSE,
                    tao_yyvsp[0].vhval->truncatable ()
                  );
              i = AST_Interface::narrow_from_decl (v);
              AST_Interface::fwd_redefinition_helper (i, 
                                                      s);
              /*
               * Add the valuetype to its definition scope
               */
              v = AST_ValueType::narrow_from_decl (i);
              (void) s->fe_add_valuetype (v);
            }

          /*
           * Push it on the scope stack
           */
          idl_global->scopes ().push (v);
        }
break;
case 54:
{
/*      '{'*/
          idl_global->set_parse_state (IDL_GlobalData::PS_ValueTypeSqSeen);
        }
break;
case 55:
{
/*      value_elements*/
          idl_global->set_parse_state (IDL_GlobalData::PS_ValueTypeBodySeen);
        }
break;
case 56:
{
/*      '}'*/
          idl_global->set_parse_state (IDL_GlobalData::PS_ValueTypeQsSeen);

          /*
           * Done with this value type - pop it off the scopes stack
           */
          idl_global->scopes ().pop ();
        }
break;
case 57:
{
/* value_abs_decl : IDL_ABSTRACT value_header*/
          UTL_Scope *s = idl_global->scopes ().top_non_null ();
          AST_ValueType *v = 0;
          AST_Interface *i = 0;

          if (s != 0 && tao_yyvsp[0].vhval != 0) 
            {
              v = 
                idl_global->gen ()->create_valuetype (
                    tao_yyvsp[0].vhval->name (),
                    tao_yyvsp[0].vhval->inherits (),
                    tao_yyvsp[0].vhval->n_inherits (),
                    tao_yyvsp[0].vhval->inherits_concrete (),
                    tao_yyvsp[0].vhval->inherits_flat (),
                    tao_yyvsp[0].vhval->n_inherits_flat (),
                    tao_yyvsp[0].vhval->supports (),
                    tao_yyvsp[0].vhval->n_supports (),
                    tao_yyvsp[0].vhval->supports_concrete (),
                    I_TRUE,
                    I_FALSE
                  );
              i = AST_Interface::narrow_from_decl (v);
              AST_Interface::fwd_redefinition_helper (i, 
                                                      s);
              /*
               * Add the valuetype to its definition scope
               */
              v = AST_ValueType::narrow_from_decl (i);
              (void) s->fe_add_valuetype (v);
            }

          /*
           * Push it on the scope stack.
           */
          idl_global->scopes ().push (v);
        }
break;
case 58:
{
/*      '{'*/
          idl_global->set_parse_state (IDL_GlobalData::PS_ValueTypeSqSeen);
        }
break;
case 59:
{
/*      exports*/
          idl_global->set_parse_state (IDL_GlobalData::PS_ValueTypeBodySeen);
        }
break;
case 60:
{
/*      '}'*/
          idl_global->set_parse_state (IDL_GlobalData::PS_ValueTypeQsSeen);

          /*
           * Done with this valuetype - pop it off the scopes stack.
           */
          idl_global->scopes ().pop ();
        }
break;
case 61:
{
/* value_header : value_decl opt_truncatable inheritance_spec */
          idl_global->set_parse_state (IDL_GlobalData::PS_InheritSpecSeen);
        }
break;
case 62:
{
/*      supports_spec*/
          idl_global->set_parse_state (IDL_GlobalData::PS_SupportSpecSeen);

          UTL_ScopedName *sn = 0;
          ACE_NEW_RETURN (sn,
                          UTL_ScopedName (tao_yyvsp[-4].idval, 
                                          0),
                          1);
          ACE_NEW_RETURN (tao_yyval.vhval,
                          FE_OBVHeader (sn,
                                        tao_yyvsp[-2].nlval,
                                        tao_yyvsp[0].nlval,
                                        tao_yyvsp[-3].bval),
                          1);      
        }
break;
case 63:
{
/* value_decl : IDL_VALUETYPE*/
           idl_global->set_parse_state (IDL_GlobalData::PS_ValueTypeSeen);
        }
break;
case 64:
{
/*      id*/
          idl_global->set_parse_state (IDL_GlobalData::PS_ValueTypeIDSeen);
          tao_yyval.idval = tao_yyvsp[0].idval;
        }
break;
case 65:
{
/* opt_truncatable : IDL_TRUNCATABLE*/
          ACE_DEBUG ((LM_DEBUG,
                      ACE_TEXT ("warning in %s line %d\n"),
                      idl_global->filename ()->get_string (),
                      idl_global->lineno ()));
          ACE_DEBUG ((LM_DEBUG,
                      ACE_TEXT ("truncatable modifier not supported ")
                      ACE_TEXT ("and is ignored\n")));
          tao_yyval.bval = I_FALSE;
        }
break;
case 66:
{
/*      |  EMPTY */
          tao_yyval.bval = I_FALSE;
        }
break;
case 67:
{
/* supports_spec : IDL_SUPPORTS at_least_one_scoped_name*/
          tao_yyval.nlval = tao_yyvsp[0].nlval;
        }
break;
case 68:
{
/*      |    EMPTY */
          tao_yyval.nlval = 0;
        }
break;
case 69:
{
/* value_forward_decl : IDL_ABSTRACT value_decl*/
          UTL_Scope *s = idl_global->scopes ().top_non_null ();
          UTL_ScopedName n (tao_yyvsp[0].idval, 
                            0);
          AST_ValueTypeFwd *f = 0;
          idl_global->set_parse_state (IDL_GlobalData::PS_ValueTypeForwardSeen);

          /*
           * Create a node representing a forward declaration of an
           * valuetype. Store it in the enclosing scope
           */
          if (s != 0) 
            {
              f = idl_global->gen ()->create_valuetype_fwd (&n,
                                                           I_TRUE);
              (void) s->fe_add_valuetype_fwd (f);
            }
        }
break;
case 70:
{
/*      | value_decl*/
          UTL_Scope *s = idl_global->scopes ().top_non_null ();
          UTL_ScopedName n (tao_yyvsp[0].idval, 
                            0);
          AST_ValueTypeFwd *f = 0;
          idl_global->set_parse_state (IDL_GlobalData::PS_ValueTypeForwardSeen);

          /*
           * Create a node representing a forward declaration of an
           * valuetype. Store it in the enclosing scope
           */
          if (s != 0) 
            {
              f = idl_global->gen ()->create_valuetype_fwd (&n,
                                                            I_FALSE);
              (void) s->fe_add_valuetype_fwd (f);
            }
        }
break;
case 71:
{
/* value_box_decl : value_decl type_spec*/
          ACE_DEBUG ((LM_DEBUG,
                      ACE_TEXT ("error in %s line %d\n"),
                      idl_global->filename ()->get_string (),
                      idl_global->lineno ()));
          ACE_DEBUG ((LM_DEBUG,
                      ACE_TEXT ("Sorry, I (TAO_IDL) can't handle")
                      ACE_TEXT (" boxes yet\n")));
        }
break;
case 77:
{
/* state_member : IDL_PUBLIC*/
          /* is $0 to member_i */
          tao_yyval.vival = AST_Field::vis_PUBLIC;
        }
break;
case 79:
{
/*      IDL_PRIVATE*/
          /* is $0 to member_i */
          tao_yyval.vival = AST_Field::vis_PRIVATE;
        }
break;
case 83:
{
/* export : type_dcl*/
          idl_global->set_parse_state (IDL_GlobalData::PS_TypeDeclSeen);
        }
break;
case 84:
{
/*      ';'*/
          idl_global->set_parse_state (IDL_GlobalData::PS_NoState);
        }
break;
case 85:
{
/*      | typeid_dcl*/
          idl_global->set_parse_state (IDL_GlobalData::PS_TypeIdDeclSeen);
        }
break;
case 86:
{
/*      ';'*/
          idl_global->set_parse_state (IDL_GlobalData::PS_NoState);
        }
break;
case 87:
{
/*      | typeprefix_dcl*/
          idl_global->set_parse_state (IDL_GlobalData::PS_TypePrefixDeclSeen);
        }
break;
case 88:
{
/*      ';'*/
          idl_global->set_parse_state (IDL_GlobalData::PS_NoState);
        }
break;
case 89:
{
/*      | const_dcl*/
          idl_global->set_parse_state (IDL_GlobalData::PS_ConstDeclSeen);
        }
break;
case 90:
{
/*      ';'*/
          idl_global->set_parse_state(IDL_GlobalData::PS_NoState);
        }
break;
case 91:
{
/*      | exception*/
          idl_global->set_parse_state (IDL_GlobalData::PS_ExceptDeclSeen);
        }
break;
case 92:
{
/*      ';'*/
          idl_global->set_parse_state (IDL_GlobalData::PS_NoState);
        }
break;
case 93:
{
/*      | attribute*/
          idl_global->set_parse_state (IDL_GlobalData::PS_AttrDeclSeen);
        }
break;
case 94:
{
/*      ';'*/
          idl_global->set_parse_state (IDL_GlobalData::PS_NoState);
        }
break;
case 95:
{
/*      | operation*/
          idl_global->set_parse_state (IDL_GlobalData::PS_OpDeclSeen);
        }
break;
case 96:
{
/*      ';'*/
          idl_global->set_parse_state (IDL_GlobalData::PS_NoState);
        }
break;
case 97:
{
/*      | error*/
          idl_global->err()->syntax_error (idl_global->parse_state());
        }
break;
case 98:
{
/*      ';'*/
          idl_global->set_parse_state (IDL_GlobalData::PS_NoState);
          tao_yyerrok;
        }
break;
case 99:
{
/* at_least_one_scoped_name : scoped_name scoped_names*/
          ACE_NEW_RETURN (tao_yyval.nlval,
                          UTL_NameList (tao_yyvsp[-1].idlist, 
                                        tao_yyvsp[0].nlval),
                          1);
        }
break;
case 100:
{
/* scoped_names : scoped_names ','*/
          idl_global->set_parse_state (IDL_GlobalData::PS_SNListCommaSeen);
        }
break;
case 101:
{
/*      scoped_name*/
          idl_global->set_parse_state (IDL_GlobalData::PS_ScopedNameSeen);

          if (tao_yyvsp[-3].nlval == 0)
            {
              ACE_NEW_RETURN (tao_yyval.nlval,
                              UTL_NameList (tao_yyvsp[0].idlist, 
                                            0),
                              1);
            }
          else 
            {
              UTL_NameList *nl = 0;
              ACE_NEW_RETURN (nl,
                              UTL_NameList (tao_yyvsp[0].idlist, 
                                            0),
                              1);
              tao_yyvsp[-3].nlval->nconc (nl);
              tao_yyval.nlval = tao_yyvsp[-3].nlval;
            }
        }
break;
case 102:
{
/*      |  EMPTY */
          tao_yyval.nlval = 0;
        }
break;
case 103:
{
/* scoped_name : id*/
          idl_global->set_parse_state (IDL_GlobalData::PS_SN_IDSeen);

          ACE_NEW_RETURN (tao_yyval.idlist,
                          UTL_IdList (tao_yyvsp[0].idval,
                                      0),
                          1);
        }
break;
case 104:
{
/*      | IDL_SCOPE_DELIMITOR*/
          idl_global->set_parse_state (IDL_GlobalData::PS_ScopeDelimSeen);
        }
break;
case 105:
{
/*      id*/
          idl_global->set_parse_state (IDL_GlobalData::PS_SN_IDSeen);

          Identifier *id = 0;
          ACE_NEW_RETURN (id,
                          Identifier (tao_yyvsp[-2].strval),
                          1);
          UTL_IdList *sn = 0;
          ACE_NEW_RETURN (sn,
                          UTL_IdList (tao_yyvsp[0].idval,
                                      0),
                          1);
          ACE_NEW_RETURN (tao_yyval.idlist,
                          UTL_IdList (id,
                                      sn),
                          1);
        }
break;
case 106:
{
/*      | scoped_name IDL_SCOPE_DELIMITOR*/
          idl_global->set_parse_state (IDL_GlobalData::PS_ScopeDelimSeen);
        }
break;
case 107:
{
/*      id*/
          idl_global->set_parse_state (IDL_GlobalData::PS_SN_IDSeen);

          UTL_IdList *sn = 0;
          ACE_NEW_RETURN (sn,
                          UTL_IdList (tao_yyvsp[0].idval,
                                      0),
                          1);
          tao_yyvsp[-3].idlist->nconc (sn);
          tao_yyval.idlist = tao_yyvsp[-3].idlist;
        }
break;
case 108:
{
/* id: IDENTIFIER*/
          ACE_NEW_RETURN (tao_yyval.idval,
                          Identifier (tao_yyvsp[0].strval),
                          1);
          ACE_OS::free (tao_yyvsp[0].strval);
        }
break;
case 109:
{
/* interface_forward : interface_decl*/
          UTL_Scope *s = idl_global->scopes ().top_non_null ();
          UTL_ScopedName n (tao_yyvsp[0].idval, 
                            0);
          AST_InterfaceFwd *f = 0;
          idl_global->set_parse_state (IDL_GlobalData::PS_InterfaceForwardSeen);

          /*
           * Create a node representing a forward declaration of an
           * interface. Store it in the enclosing scope
           */
          if (s != 0) 
            {
              f = idl_global->gen ()->create_interface_fwd (&n, 
                                                            0,
                                                            0);
              (void) s->fe_add_interface_fwd (f);
            }
        }
break;
case 110:
{
/*      | IDL_LOCAL interface_decl*/
          UTL_Scope *s = idl_global->scopes ().top_non_null ();
          UTL_ScopedName n (tao_yyvsp[0].idval, 
                            0);
          AST_InterfaceFwd *f = 0;
          idl_global->set_parse_state (
                          IDL_GlobalData::PS_InterfaceForwardSeen
                        );

          /*
           * Create a node representing a forward declaration of an
           * interface. Store it in the enclosing scope
           */
          if (s != 0) 
            {
              f = idl_global->gen ()->create_interface_fwd (&n, 
                                                            1, 
                                                            0);
              (void) s->fe_add_interface_fwd (f);
            }
        }
break;
case 111:
{
/*      | IDL_ABSTRACT interface_decl*/
          UTL_Scope *s = idl_global->scopes ().top_non_null ();
          UTL_ScopedName n (tao_yyvsp[0].idval, 
                            0);
          AST_InterfaceFwd *f = 0;
          idl_global->set_parse_state (
                          IDL_GlobalData::PS_InterfaceForwardSeen
                        );

          /*
           * Create a node representing a forward declaration of an
           * interface. Store it in the enclosing scope
           */
          if (s != 0) 
            {
              f = idl_global->gen ()->create_interface_fwd (&n, 
                                                            0, 
                                                            1);
              (void) s->fe_add_interface_fwd (f);
            }
        }
break;
case 112:
{
/* const_dcl : IDL_CONST*/
          idl_global->set_parse_state (IDL_GlobalData::PS_ConstSeen);
        }
break;
case 113:
{
/*      const_type*/
          idl_global->set_parse_state (IDL_GlobalData::PS_ConstTypeSeen);
        }
break;
case 114:
{
/*      id*/
          idl_global->set_parse_state (IDL_GlobalData::PS_ConstIDSeen);
        }
break;
case 115:
{
/*      '='*/
          idl_global->set_parse_state (IDL_GlobalData::PS_ConstAssignSeen);
        }
break;
case 116:
{
/*      expression*/
          UTL_ScopedName n (tao_yyvsp[-4].idval, 
                            0);
          UTL_Scope *s = idl_global->scopes ().top_non_null ();
          AST_Constant *c = 0;
          idl_global->set_parse_state (IDL_GlobalData::PS_ConstExprSeen);

          /*
           * Create a node representing a constant declaration. Store
           * it in the enclosing scope.
           */
          if (tao_yyvsp[0].exval != 0 && s != 0) 
            {
              AST_Expression::AST_ExprValue *result = 
                tao_yyvsp[0].exval->check_and_coerce (tao_yyvsp[-6].etval,
                                      tao_enum_constant_decl);
              tao_enum_constant_decl = 0;

              if (result == 0)
                {
                  idl_global->err ()->coercion_error (tao_yyvsp[0].exval, 
                                                      tao_yyvsp[-6].etval);
                }
              else 
                {
                  c = 
                    idl_global->gen ()->create_constant (
                                            tao_yyvsp[-6].etval,
                                            tao_yyvsp[0].exval, 
                                            &n
                                          );
                  (void) s->fe_add_constant (c);
                  delete result;
                }
              
              tao_yyvsp[-4].idval->destroy ();
              delete tao_yyvsp[-4].idval;
              tao_yyvsp[-4].idval = 0;
            }
        }
break;
case 123:
{
/* const_type*/
/*      : integer_type*/
/*      | char_type*/
/*      | octet_type*/
/*      | boolean_type*/
/*      | floating_pt_type*/
/*      | fixed_type*/
/*      | string_type_spec*/
          tao_yyval.etval = AST_Expression::EV_string;
        }
break;
case 124:
{
/*      | wstring_type_spec*/
          tao_yyval.etval = AST_Expression::EV_wstring;
        }
break;
case 125:
{
/*      | scoped_name*/
          UTL_Scope *s = idl_global->scopes ().top_non_null ();
          AST_PredefinedType *c = 0;
          AST_Typedef *t = 0;

          /*
           * If the constant's type is a scoped name, it must resolve
           * to a scalar constant type
           */
          AST_Decl *d = 
            s->lookup_by_name (tao_yyvsp[0].idlist, 
                               I_TRUE);

          if (s != 0  && d != 0) 
            {
              tao_enum_constant_decl = d;

              /*
               * Look through typedefs.
               */
              while (d->node_type () == AST_Decl::NT_typedef) 
                {
                  t = AST_Typedef::narrow_from_decl (d);

                  if (t == 0)
                    {
                      break;
                    }

                  d = t->base_type ();
                }

              if (d == 0)
                {
                  tao_yyval.etval = AST_Expression::EV_enum;
                }
              else if (d->node_type () == AST_Decl::NT_pre_defined) 
                {
                  c = AST_PredefinedType::narrow_from_decl (d);

                  if (c != 0) 
                    {
                      tao_yyval.etval = idl_global->PredefinedTypeToExprType (c->pt ());
                    } 
                  else 
                    {
                      tao_yyval.etval = AST_Expression::EV_enum;
                    }
                } 
              else if (d->node_type () == AST_Decl::NT_string) 
                {
                  tao_yyval.etval = AST_Expression::EV_string;
                } 
              else if (d->node_type () == AST_Decl::NT_wstring) 
                {
                  tao_yyval.etval = AST_Expression::EV_wstring;
                } 
              else
                {
                  tao_yyval.etval = AST_Expression::EV_enum;
                }
            } 
          else
            {
              tao_yyval.etval = AST_Expression::EV_enum;
            }
        }
break;
case 129:
{
/* or_expr : xor_expr*/
/*      | or_expr '|' xor_expr*/
          tao_yyval.exval = 
            idl_global->gen ()->create_expr (
                                    AST_Expression::EC_or, 
                                    tao_yyvsp[-2].exval, 
                                    tao_yyvsp[0].exval
                                  );
        }
break;
case 131:
{
/* xor_expr : and_expr*/
/*      | xor_expr '^' and_expr*/
          tao_yyval.exval = 
            idl_global->gen ()->create_expr (
                                    AST_Expression::EC_xor, 
                                    tao_yyvsp[-2].exval, 
                                    tao_yyvsp[0].exval
                                  );
        }
break;
case 133:
{
/* and_expr : shift_expr | and_expr '&' shift_expr*/
          tao_yyval.exval = 
            idl_global->gen ()->create_expr (
                                    AST_Expression::EC_and, 
                                    tao_yyvsp[-2].exval, 
                                    tao_yyvsp[0].exval
                                  );
        }
break;
case 135:
{
/* shift_expr : add_expr | shift_expr IDL_LEFT_SHIFT add_expr*/
          tao_yyval.exval = 
            idl_global->gen ()->create_expr (
                                    AST_Expression::EC_left, 
                                    tao_yyvsp[-2].exval, 
                                    tao_yyvsp[0].exval
                                  );
        }
break;
case 136:
{
/*      | shift_expr IDL_RIGHT_SHIFT add_expr*/
          tao_yyval.exval = 
            idl_global->gen ()->create_expr (
                                    AST_Expression::EC_right, 
                                    tao_yyvsp[-2].exval, 
                                    tao_yyvsp[0].exval
                                  );
        }
break;
case 138:
{
/* add_expr : mult_expr | add_expr '+' mult_expr*/
          tao_yyval.exval = 
            idl_global->gen ()->create_expr (
                                    AST_Expression::EC_add, 
                                    tao_yyvsp[-2].exval, 
                                    tao_yyvsp[0].exval
                                  );
        }
break;
case 139:
{
/*      | add_expr '-' mult_expr*/
          tao_yyval.exval = 
            idl_global->gen ()->create_expr (
                                    AST_Expression::EC_minus, 
                                    tao_yyvsp[-2].exval, 
                                    tao_yyvsp[0].exval
                                  );
        }
break;
case 141:
{
/* mult_expr : unary_expr | mult_expr '*' unary_expr*/
          tao_yyval.exval = 
            idl_global->gen ()->create_expr (
                                    AST_Expression::EC_mul, 
                                    tao_yyvsp[-2].exval, 
                                    tao_yyvsp[0].exval
                                  );
        }
break;
case 142:
{
/*      | mult_expr '/' unary_expr*/
          tao_yyval.exval = 
            idl_global->gen ()->create_expr (
                                    AST_Expression::EC_div, 
                                    tao_yyvsp[-2].exval, 
                                    tao_yyvsp[0].exval
                                  );
        }
break;
case 143:
{
/*      | mult_expr '%' unary_expr*/
          tao_yyval.exval = 
            idl_global->gen ()->create_expr (
                                    AST_Expression::EC_mod, 
                                    tao_yyvsp[-2].exval, 
                                    tao_yyvsp[0].exval
                                  );
        }
break;
case 145:
{
/* unary_expr : primary_expr | '+' primary_expr*/
          tao_yyval.exval = 
            idl_global->gen ()->create_expr (
                                    AST_Expression::EC_u_plus,
                                    tao_yyvsp[0].exval,
                                    0
                                  );
        }
break;
case 146:
{
/*      | '-' primary_expr*/
          tao_yyval.exval = 
            idl_global->gen()->create_expr (
                                   AST_Expression::EC_u_minus,
                                   tao_yyvsp[0].exval,
                                   0
                                 );
        }
break;
case 147:
{
/*      | '~' primary_expr*/
          tao_yyval.exval = 
            idl_global->gen()->create_expr (
                                   AST_Expression::EC_bit_neg,
                                   tao_yyvsp[0].exval,
                                   0
                                 );
        }
break;
case 148:
{
/* primary_expr : scoped_name*/
          /*
           * An expression which is a scoped name is not resolved now,
           * but only when it is evaluated (such as when it is assigned
           * as a constant value).
           */
          UTL_Scope *s = idl_global->scopes ().top_non_null ();
          AST_Decl *d = s->lookup_by_name (tao_yyvsp[0].idlist,
                                            I_TRUE);

          /*
           * If the scoped name is an IDL constant, it may be used in an
           * array dim, a string bound, or a sequence bound. If so, it 
           * must be unsigned and > 0. We assign the constant's value
           * and type to the expression created here so we can check 
           * them later.
           */
          if (d != 0 && d->node_type () == AST_Decl::NT_const)
            {
              AST_Constant *c = AST_Constant::narrow_from_decl (d);
              tao_yyval.exval = idl_global->gen ()->create_expr (c->constant_value (),
                                                    c->et ());
            }
          else
            {
              tao_yyval.exval = idl_global->gen ()->create_expr (tao_yyvsp[0].idlist);
            }
        }
break;
case 150:
{
/*      | literal*/
/*      | '(' const_expr ')'*/
          tao_yyval.exval = tao_yyvsp[-1].exval;
        }
break;
case 151:
{
/* literal : IDL_INTEGER_LITERAL*/
          tao_yyval.exval = idl_global->gen ()->create_expr (tao_yyvsp[0].ival);
        }
break;
case 152:
{
/*      | IDL_UINTEGER_LITERAL*/
          tao_yyval.exval = idl_global->gen ()->create_expr (tao_yyvsp[0].uival);
        }
break;
case 153:
{
/*      | IDL_STRING_LITERAL*/
          tao_yyval.exval = idl_global->gen ()->create_expr (tao_yyvsp[0].sval);
        }
break;
case 154:
{
/*      | IDL_WSTRING_LITERAL*/
          tao_yyval.exval = idl_global->gen ()->create_expr (tao_yyvsp[0].wsval);
        }
break;
case 155:
{
/*      | IDL_CHARACTER_LITERAL*/
          tao_yyval.exval = idl_global->gen ()->create_expr (tao_yyvsp[0].cval);
        }
break;
case 156:
{
/*      | IDL_WCHAR_LITERAL*/
          ACE_OutputCDR::from_wchar wc (tao_yyvsp[0].wcval);
          tao_yyval.exval = idl_global->gen ()->create_expr (wc);
        }
break;
case 157:
{
/*      | IDL_FLOATING_PT_LITERAL*/
          tao_yyval.exval = idl_global->gen ()->create_expr (tao_yyvsp[0].dval);
        }
break;
case 158:
{
/*      | IDL_TRUETOK*/
          tao_yyval.exval = idl_global->gen ()->create_expr ((idl_bool) I_TRUE,
                                                AST_Expression::EV_bool);
        }
break;
case 159:
{
/*      | IDL_FALSETOK*/
          tao_yyval.exval = idl_global->gen ()->create_expr ((idl_bool) I_FALSE,
                                                AST_Expression::EV_bool);
        }
break;
case 160:
{
/* positive_int_expr : const_expr*/
          int good_expression = 1;
          tao_yyvsp[0].exval->evaluate (AST_Expression::EK_positive_int);
          AST_Expression::AST_ExprValue *ev = tao_yyvsp[0].exval->ev ();

          /*
           * If const_expr is an enum value (AST_EnumVal inherits from
           * AST_Constant), the AST_ExprValue will probably not be set,
           * but there's no need to check anyway
           */
          if (ev != 0)
            {
              switch (ev->et)
              {
                case AST_Expression::EV_ushort:
                  if (ev->u.usval == 0)
                    {
                      good_expression = 0;
                    }

                  break;
                case AST_Expression::EV_ulong:
                  if (ev->u.ulval == 0)
                    {
                      good_expression = 0;
                    }

                  break;
                case AST_Expression::EV_ulonglong:
                  if (ev->u.ullval == 0)
                    {
                      good_expression = 0;
                    }

                  break;
                case AST_Expression::EV_octet:
                  if (ev->u.oval == 0)
                    {
                      good_expression = 0;
                    }

                  break;
                case AST_Expression::EV_bool:
                  if (ev->u.bval == 0)
                    {
                      good_expression = 0;
                    }

                  break;
                default:
                  good_expression = 0;
                  break;
              }
            }

          if (good_expression)
            {
              tao_yyval.exval = 
                idl_global->gen()->create_expr (tao_yyvsp[0].exval, 
                                                AST_Expression::EV_ulong);
            }
          else
            {
              idl_global->err ()->syntax_error (idl_global->parse_state ());
            }
        }
break;
case 161:
{
/* type_dcl : IDL_TYPEDEF*/
          idl_global->set_parse_state (IDL_GlobalData::PS_TypedefSeen);
        }
break;
case 162:
{ 
/*      type_declarator */
          tao_yyval.ival = 0; 
        }
break;
case 163:
{ 
/*      | struct_type */
          tao_yyval.ival = 0;
        }
break;
case 164:
{ 
/*      | union_type */
          tao_yyval.ival = 0;
        }
break;
case 165:
{ 
/*      | enum_type */
          tao_yyval.ival = 0;
        }
break;
case 166:
{
/*      | IDL_NATIVE simple_declarator*/
          UTL_Scope *s = idl_global->scopes ().top_non_null ();
          AST_Native *node = 0;
          idl_global->set_parse_state (IDL_GlobalData::PS_NativeSeen);

          /*
           * Create a node representing a Native and add it to its
           * enclosing scope
           */
          if (s != 0) 
            {
              node = 
                idl_global->gen ()->create_native (
                                        tao_yyvsp[0].deval->name ()
                                      );
              /*
               * Add it to its defining scope
               */
              (void) s->fe_add_native (node);
            }
        }
break;
case 167:
{
/*      | constructed_forward_type_spec*/
          tao_yyval.ival = 0;
        }
break;
case 168:
{
/* type_declarator : type_spec*/
          idl_global->set_parse_state (IDL_GlobalData::PS_TypeSpecSeen);
        }
break;
case 169:
{
/*      at_least_one_declarator*/
          UTL_Scope *s = idl_global->scopes ().top_non_null ();
          FE_Declarator *d = 0;
          AST_Typedef *t = 0;
          idl_global->set_parse_state (IDL_GlobalData::PS_DeclaratorsSeen);

          /*
           * Create a list of type renamings. Add them to the
           * enclosing scope
           */
          if (s != 0 && tao_yyvsp[-2].dcval != 0 && tao_yyvsp[0].dlval != 0) 
            {
              for (UTL_DecllistActiveIterator l (tao_yyvsp[0].dlval); 
                   !l.is_done (); 
                   l.next ()) 
                {
                  d = l.item ();

                  if (d == 0)
                    {
                      continue;
                    }

                  AST_Type * tp = d->compose (tao_yyvsp[-2].dcval);

                  if (tp == 0)
                    {
                      continue;
                    }

                  t = idl_global->gen ()->create_typedef (tp, 
                                                          d->name (),
                                                          s->is_local (),
                                                          s->is_abstract ());
                  (void) s->fe_add_typedef (t);
                }

              /* This FE_Declarator class isn't destroyed with the AST.*/
              tao_yyvsp[0].dlval->destroy ();
              delete tao_yyvsp[0].dlval;
              tao_yyvsp[0].dlval = 0;
            }
        }
break;
case 172:
{
/* simple_type_spec : base_type_spec*/
          tao_yyval.dcval = 
            idl_global->scopes ().bottom ()->lookup_primitive_type (
                                                 tao_yyvsp[0].etval
                                               );
        }
break;
case 174:
{
/*      | template_type_spec*/
/*      | scoped_name*/
          UTL_Scope *s = idl_global->scopes ().top_non_null ();
          AST_Decl *d = 0;

          if (s != 0)
            {
              d = s->lookup_by_name (tao_yyvsp[0].idlist, 
                                     I_TRUE);
            }

          if (d == 0)
            {
              idl_global->err ()->lookup_error (tao_yyvsp[0].idlist);
            }
          else
            {
              d->last_referenced_as (tao_yyvsp[0].idlist);
            }


          tao_yyval.dcval = d;
        }
break;
case 191:
{
/* at_least_one_declarator : declarator declarators*/
          ACE_NEW_RETURN (tao_yyval.dlval,
                          UTL_DeclList (tao_yyvsp[-1].deval,
                                        tao_yyvsp[0].dlval),
                          1);
        }
break;
case 192:
{
/* declarators : declarators ','*/
          idl_global->set_parse_state (IDL_GlobalData::PS_DeclsCommaSeen);
        }
break;
case 193:
{
/*      declarator*/
          idl_global->set_parse_state (IDL_GlobalData::PS_DeclsDeclSeen);

          if (tao_yyvsp[-3].dlval == 0)
            {
              ACE_NEW_RETURN (tao_yyval.dlval,
                              UTL_DeclList (tao_yyvsp[0].deval,
                                            0),
                              1);               
            }
          else 
            {
              UTL_DeclList *dl = 0;
              ACE_NEW_RETURN (dl,
                              UTL_DeclList (tao_yyvsp[0].deval,
                                            0),
                              1);
              tao_yyvsp[-3].dlval->nconc (dl);
              tao_yyval.dlval = tao_yyvsp[-3].dlval;
            }
        }
break;
case 194:
{
/*      |  EMPTY */
          tao_yyval.dlval = 0;
        }
break;
case 197:
{
/* at_least_one_simple_declarator : simple_declarator simple_declarators*/
          ACE_NEW_RETURN (tao_yyval.dlval,
                          UTL_DeclList (tao_yyvsp[-1].deval,
                                        tao_yyvsp[0].dlval),
                          1);
        }
break;
case 198:
{
/* simple_declarators : simple_declarators ','*/
          idl_global->set_parse_state (IDL_GlobalData::PS_DeclsCommaSeen);
        }
break;
case 199:
{
/*      simple_declarator*/
          idl_global->set_parse_state (IDL_GlobalData::PS_DeclsDeclSeen);

          if (tao_yyvsp[-3].dlval == 0)
            {
              ACE_NEW_RETURN (tao_yyval.dlval,
                              UTL_DeclList (tao_yyvsp[0].deval,
                                            0),
                              1);
            }
          else 
            {
              UTL_DeclList *dl = 0;
              ACE_NEW_RETURN (dl,
                              UTL_DeclList (tao_yyvsp[0].deval,
                                            0),
                              1);
              tao_yyvsp[-3].dlval->nconc (dl);
              tao_yyval.dlval = tao_yyvsp[-3].dlval;
            }
        }
break;
case 200:
{
/*      |  EMPTY */
          tao_yyval.dlval = 0;
        }
break;
case 201:
{
/* simple_declarator : id*/
          UTL_ScopedName *sn = 0;
          ACE_NEW_RETURN (sn,
                          UTL_ScopedName (tao_yyvsp[0].idval,
                                          0),
                          1);
          ACE_NEW_RETURN (tao_yyval.deval,
                          FE_Declarator (sn,
                                         FE_Declarator::FD_simple,
                                         0),
                          1);
        }
break;
case 202:
{
/* complex_declarator : array_declarator*/
          UTL_ScopedName *sn = 0;
          ACE_NEW_RETURN (sn,
                          UTL_ScopedName (
                              tao_yyvsp[0].dcval->local_name ()->copy (),
                              0
                            ),
                          1);
          ACE_NEW_RETURN (tao_yyval.deval,
                          FE_Declarator (sn,
                                         FE_Declarator::FD_complex,
                                         tao_yyvsp[0].dcval),
                          1);
        }
break;
case 205:
{
/* signed_int : IDL_LONG*/
          tao_yyval.etval = AST_Expression::EV_long;
        }
break;
case 206:
{
/*      | IDL_LONG IDL_LONG*/
          tao_yyval.etval = AST_Expression::EV_longlong;
        }
break;
case 207:
{
/*      | IDL_SHORT*/
          tao_yyval.etval = AST_Expression::EV_short;
        }
break;
case 208:
{
/* unsigned_int : IDL_UNSIGNED IDL_LONG*/
          tao_yyval.etval = AST_Expression::EV_ulong;
        }
break;
case 209:
{
/*      | IDL_UNSIGNED IDL_LONG IDL_LONG*/
          tao_yyval.etval = AST_Expression::EV_ulonglong;
        }
break;
case 210:
{
/*      | IDL_UNSIGNED IDL_SHORT*/
          tao_yyval.etval = AST_Expression::EV_ushort;
        }
break;
case 211:
{
/* floating_pt_type : IDL_DOUBLE*/
          tao_yyval.etval = AST_Expression::EV_double;
        }
break;
case 212:
{
/*      | IDL_FLOAT*/
          tao_yyval.etval = AST_Expression::EV_float;
        }
break;
case 213:
{
/*      | IDL_LONG IDL_DOUBLE*/
          tao_yyval.etval = AST_Expression::EV_longdouble;
        }
break;
case 214:
{
/* fixed_type : IDL_FIXED*/
          ACE_DEBUG ((LM_DEBUG,
                      ACE_TEXT ("error in %s line %d\n"),
                      idl_global->filename ()->get_string (),
                      idl_global->lineno ()));
          ACE_DEBUG ((LM_DEBUG,
                      ACE_TEXT ("Sorry, I (TAO_IDL) can't handle")
                      ACE_TEXT (" fixed types yet\n")));
        }
break;
case 215:
{
/* char_type : IDL_CHAR*/
          tao_yyval.etval = AST_Expression::EV_char;
        }
break;
case 216:
{
/*      | IDL_WCHAR*/
          tao_yyval.etval = AST_Expression::EV_wchar;
        }
break;
case 217:
{
/* octet_type : IDL_OCTET*/
          tao_yyval.etval = AST_Expression::EV_octet;
        }
break;
case 218:
{
/* boolean_type : IDL_BOOLEAN*/
          tao_yyval.etval = AST_Expression::EV_bool;
        }
break;
case 219:
{
/* any_type : IDL_ANY*/
          tao_yyval.etval = AST_Expression::EV_any;
        }
break;
case 220:
{
/* object_type : IDL_OBJECT*/
          tao_yyval.etval = AST_Expression::EV_object;
        }
break;
case 221:
{
/* struct_decl : IDL_STRUCT*/
          idl_global->set_parse_state (IDL_GlobalData::PS_StructSeen);
        }
break;
case 222:
{
/*      id*/
          idl_global->set_parse_state (IDL_GlobalData::PS_StructIDSeen);
          tao_yyval.idval = tao_yyvsp[0].idval;
        }
break;
case 223:
{
/* struct_type : struct_header*/
          UTL_Scope *s = idl_global->scopes ().top_non_null ();
          UTL_ScopedName n (tao_yyvsp[0].idval, 
                            0);
          AST_Structure *d = 0;

          /*
           * Create a node representing a struct declaration. Add it
           * to the enclosing scope
           */
          if (s != 0) 
            {
              d = 
                idl_global->gen ()->create_structure (
                                        &n,
                                        s->is_local (),
                                        s->is_abstract ()
                                      );
              AST_Structure::fwd_redefinition_helper (d, 
                                                      s);
              (void) s->fe_add_structure (d);
            }

          /*
           * Push the scope of the struct on the scopes stack.
           */
          idl_global->scopes ().push (d);
        }
break;
case 224:
{
/*      '{'*/
          idl_global->set_parse_state (IDL_GlobalData::PS_StructSqSeen);
        }
break;
case 225:
{
/*      at_least_one_member*/
          idl_global->set_parse_state (IDL_GlobalData::PS_StructBodySeen);
        }
break;
case 226:
{
/*      '}'*/
          idl_global->set_parse_state (IDL_GlobalData::PS_StructQsSeen);

          /*
           * Done with this struct. Pop its scope off the scopes stack.
           */
          tao_yyval.dcval = AST_Structure::narrow_from_scope (
                   idl_global->scopes ().top_non_null ()
                 );
          idl_global->scopes ().pop ();
        }
break;
case 230:
{
/* member  :*/
          /* is $0 to member_i */
          tao_yyval.vival = AST_Field::vis_NA;
        }
break;
case 232:
{
/* member_i : type_spec*/
          idl_global->set_parse_state (IDL_GlobalData::PS_MemberTypeSeen);
        }
break;
case 233:
{
/*      at_least_one_declarator*/
          idl_global->set_parse_state (IDL_GlobalData::PS_MemberDeclsSeen);
        }
break;
case 234:
{
/*      ';'*/
          UTL_Scope *s = idl_global->scopes ().top_non_null ();
          FE_Declarator *d = 0;
          AST_Field *f = 0;
          idl_global->set_parse_state (IDL_GlobalData::PS_MemberDeclsCompleted);

          /*
           * Check for illegal recursive use of type.
           */
          if (tao_yyvsp[-4].dcval != 0 
              && AST_illegal_recursive_type (tao_yyvsp[-4].dcval))
            {
              idl_global->err ()->error1 (UTL_Error::EIDL_RECURSIVE_TYPE, 
                                          tao_yyvsp[-4].dcval);
            }
          /*
           * Create a node representing a struct or exception member
           * Add it to the enclosing scope.
           */
          else if (s != 0 
                   && tao_yyvsp[-4].dcval != 0 
                   && tao_yyvsp[-2].dlval != 0) 
            {
              for (UTL_DecllistActiveIterator l (tao_yyvsp[-2].dlval); 
                   !l.is_done (); 
                   l.next ()) 
                {
                  d = l.item ();

                  if (d == 0)
                    {
                      continue;
                    }

                  AST_Type *tp = d->compose (tao_yyvsp[-4].dcval);

                  if (tp == 0)
                    {
                      continue;
                    }

                  /* $0 denotes Visibility, must be on yacc reduction stack. */
                  f = 
                    idl_global->gen ()->create_field (
                                            tp, 
                                            d->name (), 
                                            tao_yyvsp[-5].vival
                                          );
                  (void) s->fe_add_field (f);
                }
            }
        }
break;
case 235:
{
/*      | error*/
          idl_global->err()->syntax_error (idl_global->parse_state ());
        }
break;
case 236:
{
/*      ';'*/
          idl_global->set_parse_state (IDL_GlobalData::PS_NoState);
          tao_yyerrok;
        }
break;
case 237:
{
/* union_decl : IDL_UNION*/
          idl_global->set_parse_state (IDL_GlobalData::PS_UnionSeen);
        }
break;
case 238:
{
/*      id*/
          idl_global->set_parse_state (IDL_GlobalData::PS_UnionIDSeen);
          tao_yyval.idval = tao_yyvsp[0].idval;
        }
break;
case 239:
{
/* union_type : union_decl IDL_SWITCH*/
          idl_global->set_parse_state (IDL_GlobalData::PS_SwitchSeen);
        }
break;
case 240:
{
/*      '('*/
          idl_global->set_parse_state (IDL_GlobalData::PS_SwitchOpenParSeen);
        }
break;
case 241:
{
/*      switch_type_spec*/
          idl_global->set_parse_state (IDL_GlobalData::PS_SwitchTypeSeen);
        }
break;
case 242:
{
/*      ')'*/
          UTL_Scope *s = idl_global->scopes ().top_non_null ();
          UTL_ScopedName n (tao_yyvsp[-7].idval, 
                            0);
          AST_Union *u = 0;
          idl_global->set_parse_state (IDL_GlobalData::PS_SwitchCloseParSeen);

          /*
           * Create a node representing a union. Add it to its enclosing
           * scope.
           */
          if (tao_yyvsp[-2].dcval != 0 
              && s != 0) 
            {
              AST_ConcreteType *tp = 
                AST_ConcreteType::narrow_from_decl (tao_yyvsp[-2].dcval);

              if (tp == 0) 
                {
                  idl_global->err ()->not_a_type (tao_yyvsp[-2].dcval);
                } 
              else 
                {
                  u = idl_global->gen ()->create_union (tp,
                                                        &n,
                                                        s->is_local (),
                                                        s->is_abstract ());
                }

              AST_Structure *i = AST_Structure::narrow_from_decl (u);
              AST_Structure::fwd_redefinition_helper (i, 
                                                      s);
              u = AST_Union::narrow_from_decl (i);
              (void) s->fe_add_union (u);
            }

          /*
           * Push the scope of the union on the scopes stack
           */
          idl_global->scopes ().push (u);
        }
break;
case 243:
{
/*      '{'*/
          idl_global->set_parse_state (IDL_GlobalData::PS_UnionSqSeen);
        }
break;
case 244:
{
/*      at_least_one_case_branch*/
          idl_global->set_parse_state (IDL_GlobalData::PS_UnionBodySeen);
        }
break;
case 245:
{
/*      '}'*/
          idl_global->set_parse_state (IDL_GlobalData::PS_UnionQsSeen);

          /*
           * Done with this union. Pop its scope from the scopes stack.
           */
          tao_yyval.dcval = AST_Union::narrow_from_scope (
                   idl_global->scopes ().top_non_null ()
                 );

          if (tao_yyval.dcval != 0)
            {
              idl_global->scopes ().pop ();
            }
        }
break;
case 246:
{
/* switch_type_spec : integer_type*/
          tao_yyval.dcval = 
            idl_global->scopes ().bottom ()->lookup_primitive_type (
                                                 tao_yyvsp[0].etval
                                               );
        }
break;
case 247:
{
/*      | char_type*/
          /* wchars are not allowed. */
          if (tao_yyvsp[0].etval == AST_Expression::EV_wchar)
            {
              idl_global->err ()->error0 (UTL_Error::EIDL_DISC_TYPE);
            }

          tao_yyval.dcval = 
            idl_global->scopes ().bottom ()->lookup_primitive_type (
                                                 tao_yyvsp[0].etval
                                               );
        }
break;
case 248:
{
/*      | octet_type*/
          /* octets are not allowed. */
          idl_global->err ()->error0 (UTL_Error::EIDL_DISC_TYPE);
          tao_yyval.dcval = 
            idl_global->scopes ().bottom ()->lookup_primitive_type (
                                                 tao_yyvsp[0].etval
                                               );
        }
break;
case 249:
{
/*      | boolean_type*/
          tao_yyval.dcval = 
            idl_global->scopes ().bottom ()->lookup_primitive_type (
                                                 tao_yyvsp[0].etval
                                               );
        }
break;
case 251:
{
/*      | enum_type*/
/*      | scoped_name*/
          UTL_Scope *s = idl_global->scopes ().top_non_null ();
          AST_Decl *d = 0;
          AST_PredefinedType *p = 0;
          AST_Typedef *t = 0;
          idl_bool found = I_FALSE;

          /*
           * The discriminator is a scoped name. Try to resolve to
           * one of the scalar types or to an enum. Thread through
           * typedef's to arrive at the base type at the end of the
           * chain.
           */
          d = s->lookup_by_name (tao_yyvsp[0].idlist, 
                                 I_TRUE);

          if (s != 0 && d != 0) 
            {
              while (!found) 
                {
                  switch (d->node_type ()) 
                  {
                    case AST_Decl::NT_enum:
                      tao_yyval.dcval = d;
                      found = I_TRUE;
                      break;
                    case AST_Decl::NT_pre_defined:
                      p = AST_PredefinedType::narrow_from_decl (d);

                      if (p != 0) 
                        {
                          switch (p->pt ()) 
                          {
                            case AST_PredefinedType::PT_long:
                            case AST_PredefinedType::PT_ulong:
                            case AST_PredefinedType::PT_longlong:
                            case AST_PredefinedType::PT_ulonglong:
                            case AST_PredefinedType::PT_short:
                            case AST_PredefinedType::PT_ushort:
                            case AST_PredefinedType::PT_char:
                            case AST_PredefinedType::PT_boolean:
                              tao_yyval.dcval = p;
                              found = I_TRUE;
                              break;
                            case AST_PredefinedType::PT_wchar:
                            case AST_PredefinedType::PT_octet:
                              /* octets and wchars are not allowed */
                              idl_global->err ()->error0 (
                                  UTL_Error::EIDL_DISC_TYPE
                                );
                              tao_yyval.dcval = 0;
                              found = I_TRUE;
                              break;
                            default:
                              tao_yyval.dcval = 0;
                              found = I_TRUE;
                              break;
                          }
                        } 
                      else
                        {
                          tao_yyval.dcval = 0;
                          found = I_TRUE;
                        }

                      break;
                    case AST_Decl::NT_typedef:
                      t = AST_Typedef::narrow_from_decl (d);

                      if (t != 0) 
                        {
                          d = t->base_type ();
                        }

                      break;
                    default:
                      tao_yyval.dcval = 0;
                      found = I_TRUE;
                      break;
                  }
                }
            } 
          else
            {
              tao_yyval.dcval = 0;
            }

          if (tao_yyval.dcval == 0)
            {
              idl_global->err ()->lookup_error (tao_yyvsp[0].idlist);
            }
        }
break;
case 255:
{
/* case_branch : at_least_one_case_label*/
          idl_global->set_parse_state (IDL_GlobalData::PS_UnionLabelSeen);
        }
break;
case 256:
{
/*      element_spec*/
          idl_global->set_parse_state (IDL_GlobalData::PS_UnionElemSeen);
        }
break;
case 257:
{
/*      ';'*/
          UTL_Scope *s = idl_global->scopes ().top_non_null ();
          AST_UnionBranch *b = 0;
          AST_Field *f = tao_yyvsp[-2].ffval;
          idl_global->set_parse_state (IDL_GlobalData::PS_UnionElemCompleted);

          /*
           * Create several nodes representing branches of a union.
           * Add them to the enclosing scope (the union scope)
           */
          if (s != 0 
              &&  tao_yyvsp[-4].llval != 0 
              && tao_yyvsp[-2].ffval != 0) 
            {
              b = 
                idl_global->gen ()->create_union_branch (
                                        tao_yyvsp[-4].llval,
                                        f->field_type (),
                                        f->name ()
                                      );
              (void) s->fe_add_union_branch (b);
            }
        }
break;
case 258:
{
/*      | error*/
          idl_global->err()->syntax_error (idl_global->parse_state());
        }
break;
case 259:
{
/*      ';'*/
          idl_global->set_parse_state (IDL_GlobalData::PS_NoState);
          tao_yyerrok;
        }
break;
case 260:
{
/* at_least_one_case_label : case_label case_labels*/
          ACE_NEW_RETURN (tao_yyval.llval,
                          UTL_LabelList (tao_yyvsp[-1].ulval, 
                                         tao_yyvsp[0].llval),
                          1);
        }
break;
case 261:
{
/* case_labels : case_labels case_label*/
          if (tao_yyvsp[-1].llval == 0)
            {
              ACE_NEW_RETURN (tao_yyval.llval,
                              UTL_LabelList (tao_yyvsp[0].ulval,
                                             0),
                              1);
            }
          else 
            {
              UTL_LabelList *ll = 0;
              ACE_NEW_RETURN (ll,
                              UTL_LabelList (tao_yyvsp[0].ulval,
                                             0),
                              1);
              tao_yyvsp[-1].llval->nconc (ll);
              tao_yyval.llval = tao_yyvsp[-1].llval;
            }
        }
break;
case 262:
{
/*      |  EMPTY */
          tao_yyval.llval = 0;
        }
break;
case 263:
{
/* case_label : IDL_DEFAULT*/
          idl_global->set_parse_state (IDL_GlobalData::PS_DefaultSeen);
        }
break;
case 264:
{
/*      ':'*/
          idl_global->set_parse_state (IDL_GlobalData::PS_LabelColonSeen);

          tao_yyval.ulval = idl_global->gen ()->create_union_label (
                                       AST_UnionLabel::UL_default,
                                       0
                                     );
        }
break;
case 265:
{
/*      | IDL_CASE*/
          idl_global->set_parse_state (IDL_GlobalData::PS_CaseSeen);
        }
break;
case 266:
{
          idl_global->set_parse_state (IDL_GlobalData::PS_LabelExprSeen);
        }
break;
case 267:
{
/*      const_expr*/
          idl_global->set_parse_state (IDL_GlobalData::PS_LabelColonSeen);

          tao_yyval.ulval = idl_global->gen()->create_union_label (
                                      AST_UnionLabel::UL_label,
                                      tao_yyvsp[-2].exval
                                    );
        }
break;
case 268:
{
/* element_spec : type_spec*/
          idl_global->set_parse_state (IDL_GlobalData::PS_UnionElemTypeSeen);
        }
break;
case 269:
{
/*      declarator*/
          idl_global->set_parse_state (IDL_GlobalData::PS_UnionElemDeclSeen);

          /*
           * Check for illegal recursive use of type
           */
          if (tao_yyvsp[-2].dcval != 0 
              && AST_illegal_recursive_type (tao_yyvsp[-2].dcval))
            {
            idl_global->err()->error1 (UTL_Error::EIDL_RECURSIVE_TYPE, 
                                       tao_yyvsp[-2].dcval);
            }
          /*
           * Create a field in a union branch
           */
          else if (tao_yyvsp[-2].dcval == 0 
                   || tao_yyvsp[0].deval == 0)
            {
              tao_yyval.ffval = 0;
            }
          else 
            {
              AST_Type *tp = tao_yyvsp[0].deval->compose (tao_yyvsp[-2].dcval);

              if (tp == 0)
                {
                  tao_yyval.ffval = 0;
                }
              else
                {
                  tao_yyval.ffval = idl_global->gen ()->create_field (
                                               tp,
                                               tao_yyvsp[0].deval->name ()
                                             );
                }
            }
        }
break;
case 270:
{
/* struct_forward_type : struct_decl*/
          UTL_Scope *s = idl_global->scopes ().top_non_null ();
          UTL_ScopedName n (tao_yyvsp[0].idval, 
                            0);
          AST_StructureFwd *d = 0;

          /*
           * Create a node representing a forward declaration of a struct.
           */
          if (s != 0) 
            {
              d = idl_global->gen ()->create_structure_fwd (&n);
              (void) s->fe_add_structure_fwd (d);
            }
        }
break;
case 271:
{
/* union_forward_type : union_decl*/
          UTL_Scope *s = idl_global->scopes ().top_non_null ();
          UTL_ScopedName n (tao_yyvsp[0].idval, 
                            0);
          AST_UnionFwd *u = 0;

          /*
           * Create a node representing a forward declaration of a union.
           */
          if (s != 0) 
            {
              u = idl_global->gen ()->create_union_fwd (&n);
              (void) s->fe_add_union_fwd (u);
            }
        }
break;
case 272:
{
/* enum_type : IDL_ENUM*/
          idl_global->set_parse_state (IDL_GlobalData::PS_EnumSeen);
        }
break;
case 273:
{
/*      id*/
          UTL_Scope *s = idl_global->scopes ().top_non_null ();
          UTL_ScopedName n (tao_yyvsp[0].idval, 
                             0);
          AST_Enum *e = 0;
          idl_global->set_parse_state (IDL_GlobalData::PS_EnumIDSeen);

          /*
           * Create a node representing an enum and add it to its
           * enclosing scope.
           */
          if (s != 0) 
            {
              e = idl_global->gen ()->create_enum (&n,
                                                   s->is_local (),
                                                   s->is_abstract ());
              /*
               * Add it to its defining scope
               */
              (void) s->fe_add_enum (e);
            }

          /*
           * Push the enum scope on the scopes stack.
           */
          idl_global->scopes ().push (e);
        }
break;
case 274:
{
/*      '{'*/
          idl_global->set_parse_state (IDL_GlobalData::PS_EnumSqSeen);
        }
break;
case 275:
{
/*      at_least_one_enumerator*/
          idl_global->set_parse_state (IDL_GlobalData::PS_EnumBodySeen);
        }
break;
case 276:
{
/*      '}'*/
          idl_global->set_parse_state (IDL_GlobalData::PS_EnumQsSeen);

          /*
           * Done with this enum. Pop its scope from the scopes stack.
           */
          if (idl_global->scopes ().top () == 0)
            {
              tao_yyval.dcval = 0;
            }
          else 
            {
              tao_yyval.dcval = AST_Enum::narrow_from_scope (
                       idl_global->scopes ().top_non_null ()
                     );
              idl_global->scopes ().pop ();
            }
        }
break;
case 278:
{
/* enumerators : enumerators ','*/
          idl_global->set_parse_state (IDL_GlobalData::PS_EnumCommaSeen);
        }
break;
case 281:
{
/* enumerator : IDENTIFIER*/
          UTL_Scope *s = idl_global->scopes ().top_non_null ();
          Identifier id (tao_yyvsp[0].strval);
          UTL_ScopedName n (&id, 
                            0);
          AST_EnumVal *e = 0;
          AST_Enum *c = 0;

          /*
           * Create a node representing one enumerator in an enum
           * Add it to the enclosing scope (the enum scope)
           */
          if (s != 0 
              && s->scope_node_type () == AST_Decl::NT_enum) 
            {
              c = AST_Enum::narrow_from_scope (s);

              if (c != 0)
                {
                  e = idl_global->gen ()->create_enum_val (
                                              c->next_enum_val (), 
                                              &n
                                            );
                }

              (void) s->fe_add_enum_val (e);
            }
        }
break;
case 282:
{
/* sequence_type_spec : seq_head ','*/
          idl_global->set_parse_state (IDL_GlobalData::PS_SequenceCommaSeen);
        }
break;
case 283:
{
/*      positive_int_expr*/
          idl_global->set_parse_state (IDL_GlobalData::PS_SequenceExprSeen);
        }
break;
case 284:
{
/*      '>'*/
          idl_global->set_parse_state (IDL_GlobalData::PS_SequenceQsSeen);

          /*
           * Remove sequence marker from scopes stack.
           */
          if (idl_global->scopes ().top() == 0)
            {
              idl_global->scopes ().pop ();
            }

          UTL_Scope *s = idl_global->scopes ().top_non_null ();

          /*
           * Create a node representing a sequence
           */
          if (tao_yyvsp[-2].exval == 0 || tao_yyvsp[-2].exval->coerce (AST_Expression::EV_ulong) == 0) 
            {
              idl_global->err ()->coercion_error (tao_yyvsp[-2].exval, 
                                                  AST_Expression::EV_ulong);
              tao_yyval.dcval = 0;
            } 
          else if (tao_yyvsp[-5].dcval == 0) 
            {
              tao_yyval.dcval = 0;
            } 
          else 
            {
              AST_Type *tp = AST_Type::narrow_from_decl (tao_yyvsp[-5].dcval);

              if (tp == 0)
                {
                  ; /* Error will be caught in FE_Declarator.*/
                }
              else 
                {
                  Identifier id ("sequence");
                  UTL_ScopedName sn (&id,
                                     0);

                  tao_yyval.dcval = 
                    idl_global->gen ()->create_sequence (
                                            tao_yyvsp[-2].exval,
                                            tp,
                                            &sn,
                                            s->is_local (),
                                            s->is_abstract ()
                                          );
                }
            }
        }
break;
case 285:
{
/*      | seq_head '>'*/
          idl_global->set_parse_state (IDL_GlobalData::PS_SequenceQsSeen);

          /*
           * Remove sequence marker from scopes stack.
           */
          if (idl_global->scopes ().top () == 0)
            {
             idl_global->scopes ().pop ();
            }

          UTL_Scope *s = idl_global->scopes ().top_non_null ();

          /*
           * Create a node representing a sequence.
           */
          if (tao_yyvsp[-1].dcval == 0)
            {
              tao_yyval.dcval = 0;
            }
          else 
            {
              AST_Type *tp = AST_Type::narrow_from_decl (tao_yyvsp[-1].dcval);
                
              if (tp == 0)
                {
                  ; /* Error will be caught in FE_Declarator.*/
                }
              else 
                {
                  Identifier id ("sequence");
                  UTL_ScopedName sn (&id,
                                     0);

                  tao_yyval.dcval =
                    idl_global->gen ()->create_sequence (
                        idl_global->gen ()->create_expr ((unsigned long) 0),
                        tp,
                        &sn,
                        s->is_local (),
                        s->is_abstract ()
                      );
                }
            }
        }
break;
case 286:
{
/* seq_head : IDL_SEQUENCE*/
          idl_global->set_parse_state (IDL_GlobalData::PS_SequenceSeen);

          /*
           * Push a sequence marker on scopes stack.
           */
          idl_global->scopes ().push (0);
        }
break;
case 287:
{
/*      '<'*/
          idl_global->set_parse_state (IDL_GlobalData::PS_SequenceSqSeen);
        }
break;
case 288:
{
/*      simple_type_spec*/
          idl_global->set_parse_state (IDL_GlobalData::PS_SequenceTypeSeen);
          tao_yyval.dcval = tao_yyvsp[0].dcval;
        }
break;
case 289:
{
/* string_type_spec : string_head '<'*/
          idl_global->set_parse_state (IDL_GlobalData::PS_StringSqSeen);
        }
break;
case 290:
{
/*      positive_int_expr*/
           idl_global->set_parse_state (IDL_GlobalData::PS_StringExprSeen);
        }
break;
case 291:
{
/*      '>'*/
          idl_global->set_parse_state (IDL_GlobalData::PS_StringQsSeen);

          /*
           * Create a node representing a string.
           */
          if (tao_yyvsp[-2].exval == 0 
              || tao_yyvsp[-2].exval->coerce (AST_Expression::EV_ulong) == 0) 
            {
              idl_global->err ()->coercion_error (tao_yyvsp[-2].exval, 
                                                  AST_Expression::EV_ulong);
              tao_yyval.dcval = 0;
            } 
          else 
            {
              tao_yyval.dcval = idl_global->gen ()->create_string (tao_yyvsp[-2].exval);
              /*
               * Add this AST_String to the types defined in the global scope.
               */
              (void) idl_global->root ()->fe_add_string (
                                              AST_String::narrow_from_decl (
                                                  tao_yyval.dcval
                                                )
                                            );
            }
        }
break;
case 292:
{
/*      | string_head*/
          idl_global->set_parse_state (IDL_GlobalData::PS_StringCompleted);
          /*
           * Create a node representing a string.
           */
          tao_yyval.dcval =
            idl_global->gen ()->create_string (
                idl_global->gen ()->create_expr ((unsigned long) 0)
              );
          /*
           * Add this AST_String to the types defined in the global scope.
           */
          (void) idl_global->root ()->fe_add_string (
                                          AST_String::narrow_from_decl (
                                              tao_yyval.dcval
                                            )
                                        );
        }
break;
case 293:
{
/* string_head : IDL_STRING*/
          idl_global->set_parse_state (IDL_GlobalData::PS_StringSeen);
        }
break;
case 294:
{
/* wstring_type_spec : wstring_head '<'*/
          idl_global->set_parse_state (IDL_GlobalData::PS_StringSqSeen);
        }
break;
case 295:
{
/*      positive_int_expr*/
           idl_global->set_parse_state (IDL_GlobalData::PS_StringExprSeen);
        }
break;
case 296:
{
/*      '>'*/
          idl_global->set_parse_state (IDL_GlobalData::PS_StringQsSeen);

          /*
           * Create a node representing a string.
           */
          if (tao_yyvsp[-2].exval == 0 
              || tao_yyvsp[-2].exval->coerce (AST_Expression::EV_ulong) == 0) 
            {
              idl_global->err ()->coercion_error (tao_yyvsp[-2].exval, 
                                                  AST_Expression::EV_ulong);
              tao_yyval.dcval = 0;
            } 
          else 
            {
              tao_yyval.dcval = idl_global->gen ()->create_wstring (tao_yyvsp[-2].exval);
              /*
               * Add this AST_String to the types defined in the global scope.
               */
              (void) idl_global->root ()->fe_add_string (
                                              AST_String::narrow_from_decl (tao_yyval.dcval)
                                            );
            }
        }
break;
case 297:
{
/*      | wstring_head*/
          idl_global->set_parse_state (IDL_GlobalData::PS_StringCompleted);

          /*
           * Create a node representing a wstring.
           */
          tao_yyval.dcval =
            idl_global->gen ()->create_wstring (
                idl_global->gen ()->create_expr ((unsigned long) 0)
              );
          /*
           * Add this AST_String to the types defined in the global scope.
           */
          (void) idl_global->root ()->fe_add_string (
                                          AST_String::narrow_from_decl (tao_yyval.dcval)
                                        );
        }
break;
case 298:
{
/* wstring_head : IDL_WSTRING*/
          idl_global->set_parse_state (IDL_GlobalData::PS_StringSeen);
        }
break;
case 299:
{
/* array_declarator : id*/
          idl_global->set_parse_state (IDL_GlobalData::PS_ArrayIDSeen);
        }
break;
case 300:
{
/*      at_least_one_array_dim*/
          idl_global->set_parse_state (IDL_GlobalData::PS_ArrayCompleted);

          /*
           * Create a node representing an array.
           */
          if (tao_yyvsp[0].elval != 0) 
            {
              UTL_ScopedName sn (tao_yyvsp[-2].idval,
                                 0);
              tao_yyval.dcval = 
                idl_global->gen ()->create_array (
                                        &sn,
                                        tao_yyvsp[0].elval->length (), 
                                        tao_yyvsp[0].elval, 
                                        0, 
                                        0
                                      );
            }
        }
break;
case 301:
{
/* at_least_one_array_dim : array_dim array_dims*/
          ACE_NEW_RETURN (tao_yyval.elval,
                          UTL_ExprList (tao_yyvsp[-1].exval,
                                        tao_yyvsp[0].elval),
                          1);
        }
break;
case 302:
{
/* array_dims : array_dims array_dim*/
          if (tao_yyvsp[-1].elval == 0)
            {
              ACE_NEW_RETURN (tao_yyval.elval,
                              UTL_ExprList (tao_yyvsp[0].exval,
                                            0),
                              1);
            }
          else 
            {
              UTL_ExprList *el = 0;
              ACE_NEW_RETURN (el,
                              UTL_ExprList (tao_yyvsp[0].exval,
                                            0),
                              1);
              tao_yyvsp[-1].elval->nconc (el);
              tao_yyval.elval = tao_yyvsp[-1].elval;
            }
        }
break;
case 303:
{
/*      |  EMPTY */
          tao_yyval.elval = 0;
        }
break;
case 304:
{
/* array_dim : '['*/
          idl_global->set_parse_state (IDL_GlobalData::PS_DimSqSeen);
        }
break;
case 305:
{
/*      positive_int_expr*/
          idl_global->set_parse_state (IDL_GlobalData::PS_DimExprSeen);
        }
break;
case 306:
{
/*      ']'*/
          idl_global->set_parse_state (IDL_GlobalData::PS_DimQsSeen);

          /*
           * Array dimensions are expressions which must be coerced to
           * positive integers.
           */
          if (tao_yyvsp[-2].exval == 0 
              || tao_yyvsp[-2].exval->coerce (AST_Expression::EV_ulong) == 0) 
            {
              idl_global->err ()->coercion_error (tao_yyvsp[-2].exval, 
                                                  AST_Expression::EV_ulong);
              tao_yyval.exval = 0;
            } 
          else
            {
              tao_yyval.exval = tao_yyvsp[-2].exval;
            }
        }
break;
case 309:
{
/* attribute_readonly : IDL_READONLY*/
          idl_global->set_parse_state (IDL_GlobalData::PS_AttrROSeen);
        }
break;
case 310:
{
/*      IDL_ATTRIBUTE*/
          idl_global->set_parse_state (IDL_GlobalData::PS_AttrSeen);
        }
break;
case 311:
{
/*      param_type_spec*/
          idl_global->set_parse_state (IDL_GlobalData::PS_AttrTypeSeen);
        }
break;
case 312:
{
/*      at_least_one_simple_declarator*/
          idl_global->set_parse_state (IDL_GlobalData::PS_AttrDeclsSeen);
        }
break;
case 313:
{
/*      opt_raises*/
          UTL_Scope *s = idl_global->scopes ().top_non_null ();
          AST_Attribute *a = 0;
          FE_Declarator *d = 0;

          idl_global->set_parse_state (IDL_GlobalData::PS_OpRaiseCompleted);

          /*
           * Create nodes representing attributes and add them to the
           * enclosing scope.
           */
          if (s != 0 
              && tao_yyvsp[-4].dcval != 0 
              && tao_yyvsp[-2].dlval != 0) 
            {
              for (UTL_DecllistActiveIterator l (tao_yyvsp[-2].dlval); 
                   !l.is_done (); 
                   l.next ()) 
                {
                  d = l.item ();

                  if (d == 0)
                    {
                      continue;
                    }

                  AST_Type *tp = d->compose (tao_yyvsp[-4].dcval);

                  if (tp == 0)
                    {
                      continue;
                    }

                  a = 
                    idl_global->gen ()->create_attribute (
                                            I_TRUE,
                                            tp,
                                            (UTL_IdList *) d->name ()->copy (),
                                            s->is_local (),
                                            s->is_abstract ()
                                          );

                  if (tao_yyvsp[0].nlval != 0)
                    {
                      (void) a->fe_add_get_exceptions (tao_yyvsp[0].nlval);
                    }

                  (void) s->fe_add_attribute (a);
                }
            }
        }
break;
case 314:
{
/* attribute_readonly : IDL_ATTRIBUTE*/
          idl_global->set_parse_state (IDL_GlobalData::PS_AttrSeen);
        }
break;
case 315:
{
/*      param_type_spec*/
          idl_global->set_parse_state (IDL_GlobalData::PS_AttrTypeSeen);
        }
break;
case 316:
{
/*      at_least_one_simple_declarator*/
          idl_global->set_parse_state (IDL_GlobalData::PS_AttrDeclsSeen);
        }
break;
case 317:
{
/*      opt_getraises*/
          idl_global->set_parse_state (IDL_GlobalData::PS_OpGetRaiseCompleted);
        }
break;
case 318:
{
/*      opt_setraises*/
          UTL_Scope *s = idl_global->scopes ().top_non_null ();
          AST_Attribute *a = 0;
          FE_Declarator *d = 0;

          idl_global->set_parse_state (IDL_GlobalData::PS_OpSetRaiseCompleted);

          /*
           * Create nodes representing attributes and add them to the
           * enclosing scope.
           */
          if (s != 0 
              && tao_yyvsp[-6].dcval != 0 
              && tao_yyvsp[-4].dlval != 0) 
            {
              for (UTL_DecllistActiveIterator l (tao_yyvsp[-4].dlval); 
                   !l.is_done (); 
                   l.next ()) 
                {
                  d = l.item ();

                  if (d == 0)
                    {
                      continue;
                    }

                  AST_Type *tp = d->compose (tao_yyvsp[-6].dcval);

                  if (tp == 0)
                    {
                      continue;
                    }

                  a = 
                    idl_global->gen ()->create_attribute (
                                            I_FALSE,
                                            tp,
                                            (UTL_IdList *) d->name ()->copy (),
                                            s->is_local (),
                                            s->is_abstract ()
                                          );

                  if (tao_yyvsp[-2].nlval != 0)
                    {
                      (void) a->fe_add_get_exceptions (tao_yyvsp[0].nlval);
                    }

                  if (tao_yyvsp[0].nlval != 0)
                    {
                      (void) a->fe_add_set_exceptions (tao_yyvsp[0].nlval);
                    }

                  (void) s->fe_add_attribute (a);
                }
            }
        }
break;
case 319:
{
/* exception : IDL_EXCEPTION*/
          idl_global->set_parse_state (IDL_GlobalData::PS_ExceptSeen);
        }
break;
case 320:
{
/*      id*/
          UTL_Scope *s = idl_global->scopes ().top_non_null ();
          UTL_ScopedName n (tao_yyvsp[0].idval, 
                            0);
          AST_Exception *e = 0;
          idl_global->set_parse_state (IDL_GlobalData::PS_ExceptIDSeen);

          /*
           * Create a node representing an exception and add it to
           * the enclosing scope.
           */
          if (s != 0) 
            {
              e = idl_global->gen ()->create_exception (&n,
                                                        s->is_local (),
                                                        s->is_abstract ());
              (void) s->fe_add_exception (e);
            }

          /*
           * Push the exception scope on the scope stack.
           */
          idl_global->scopes ().push (e);
        }
break;
case 321:
{
/*       '{'*/
          idl_global->set_parse_state (IDL_GlobalData::PS_ExceptSqSeen);
        }
break;
case 322:
{
/*      members*/
          idl_global->set_parse_state (IDL_GlobalData::PS_ExceptBodySeen);
        }
break;
case 323:
{
/*      '}'*/
          idl_global->set_parse_state (IDL_GlobalData::PS_ExceptQsSeen);
          /*
           * Done with this exception. Pop its scope from the scope stack.
           */
          idl_global->scopes ().pop ();
        }
break;
case 324:
{
/* operation : opt_op_attribute op_type_spec*/
          idl_global->set_parse_state (IDL_GlobalData::PS_OpTypeSeen);
        }
break;
case 325:
{
/*      IDENTIFIER*/
          UTL_Scope *s = idl_global->scopes ().top_non_null ();
          Identifier id (tao_yyvsp[0].strval);
          UTL_ScopedName n (&id, 
                            0);
          AST_Operation *o = 0;
          idl_global->set_parse_state (IDL_GlobalData::PS_OpIDSeen);

          /*
           * Create a node representing an operation on an interface
           * and add it to its enclosing scope.
           */
          if (s != 0 && tao_yyvsp[-2].dcval != 0) 
            {
              AST_Type *tp = 
                AST_Type::narrow_from_decl (tao_yyvsp[-2].dcval);

              if (tp == 0) 
                {
                  idl_global->err ()->not_a_type (tao_yyvsp[-2].dcval);
                } 
              else if (tp->node_type () == AST_Decl::NT_except) 
                {
                  idl_global->err ()->not_a_type (tao_yyvsp[-2].dcval);
                } 
              else 
                {
                  o = 
                    idl_global->gen ()->create_operation (tp,
                                                          tao_yyvsp[-3].ofval,
                                                          &n,
                                                          s->is_local (),
                                                          s->is_abstract ());
                  (void) s->fe_add_operation (o);
                }
            }

           ACE_OS::free (tao_yyvsp[0].strval);
           tao_yyvsp[0].strval = 0;

          /*
           * Push the operation scope onto the scopes stack.
           */
          idl_global->scopes ().push (o);
        }
break;
case 326:
{
/*      parameter_list*/
          idl_global->set_parse_state (IDL_GlobalData::PS_OpParsCompleted);
        }
break;
case 327:
{
/*      opt_raises*/
          idl_global->set_parse_state (IDL_GlobalData::PS_OpRaiseCompleted);
        }
break;
case 328:
{
/*      opt_context*/
          UTL_Scope *s = idl_global->scopes ().top_non_null ();
          AST_Operation *o = 0;
          idl_global->set_parse_state (IDL_GlobalData::PS_OpCompleted);

          /*
           * Add exceptions and context to the operation.
           */
          if (s != 0 && s->scope_node_type () == AST_Decl::NT_op) 
            {
              o = AST_Operation::narrow_from_scope (s);

              if (tao_yyvsp[-2].nlval != 0 && o != 0)
                {
                  (void) o->fe_add_exceptions (tao_yyvsp[-2].nlval);
                }

              if (tao_yyvsp[0].slval != 0)
                {
                  (void) o->fe_add_context (tao_yyvsp[0].slval);
                }
            }

          /*
           * Done with this operation. Pop its scope from the scopes stack.
           */
          idl_global->scopes ().pop ();
        }
break;
case 329:
{
/* opt_op_attribute : IDL_ONEWAY*/
          idl_global->set_parse_state (IDL_GlobalData::PS_OpAttrSeen);
          tao_yyval.ofval = AST_Operation::OP_oneway;
        }
break;
case 330:
{
/*      | IDL_IDEMPOTENT*/
          idl_global->set_parse_state (IDL_GlobalData::PS_OpAttrSeen);
          tao_yyval.ofval = AST_Operation::OP_idempotent;
        }
break;
case 331:
{
/*      |  EMPTY */
          tao_yyval.ofval = AST_Operation::OP_noflags;
        }
break;
case 333:
{
/* op_type_spec : param_type_spec | IDL_VOID*/
          tao_yyval.dcval =
            idl_global->scopes ().bottom ()->lookup_primitive_type (
                                                  AST_Expression::EV_void
                                                );
        }
break;
case 334:
{
/* init_decl : IDL_FACTORY */
          /*@@ PS_FactorySeen?*/
          idl_global->set_parse_state (IDL_GlobalData::PS_OpTypeSeen);
        }
break;
case 335:
{
/*      IDENTIFIER */
          UTL_Scope *s = idl_global->scopes ().top_non_null ();

          if (s->is_abstract ())
            {
              /*@@ Fire error*/
              ACE_ERROR ((LM_ERROR,
                          ACE_TEXT ("error in %s line %d:\n")
                          ACE_TEXT ("Abstract valuetype can't have a ")
                          ACE_TEXT ("factory construct.\n"),
                          idl_global->filename ()->get_string (),
                          idl_global->lineno ()));
            }   
            
          Identifier id (tao_yyvsp[0].strval);  
          UTL_ScopedName n (&id, 
                            0);
          AST_Factory *factory = 0;
          idl_global->set_parse_state (IDL_GlobalData::PS_OpIDSeen);

          /*
           * Create a node representing an factory construct
           * and add it to its enclosing scope
           */
          if (s != 0)
            {
              factory = idl_global->gen ()->create_factory (&n);
              (void) s->fe_add_factory (factory);
            }

          /*
           * Push the operation scope onto the scopes stack.
           */
          idl_global->scopes ().push (factory);
        }
break;
case 336:
{
/*      init_parameter_list*/
        /* TODO: replace parameter_list with rule that accepts only IN args */

          idl_global->set_parse_state (IDL_GlobalData::PS_OpParsCompleted);
          idl_global->scopes ().pop ();
        }
break;
case 337:
{
/* init_parameter_list : '('*/
          idl_global->set_parse_state (IDL_GlobalData::PS_OpSqSeen);
        }
break;
case 338:
{
/*      ')'*/
          idl_global->set_parse_state (IDL_GlobalData::PS_OpQsSeen);
        }
break;
case 339:
{
/*      | '('*/
          idl_global->set_parse_state (IDL_GlobalData::PS_OpSqSeen);
        }
break;
case 340:
{
/*      at_least_one_in_parameter ')'*/
          idl_global->set_parse_state (IDL_GlobalData::PS_OpQsSeen);
        }
break;
case 342:
{
/* in_parameters : in_parameters ','*/
          idl_global->set_parse_state (IDL_GlobalData::PS_OpParCommaSeen);
        }
break;
case 345:
{
/* in_parameter : IDL_IN*/
          idl_global->set_parse_state (IDL_GlobalData::PS_OpParDirSeen);
        }
break;
case 346:
{
/*      param_type_spec*/
          idl_global->set_parse_state (IDL_GlobalData::PS_OpParTypeSeen);
        }
break;
case 347:
{
/*      declarator*/
          UTL_Scope *s = idl_global->scopes ().top_non_null ();
          AST_Argument *a = 0;
          idl_global->set_parse_state (IDL_GlobalData::PS_OpParDeclSeen);

          /*
           * Create a node representing an argument to an operation
           * Add it to the enclosing scope (the operation scope).
           */
          if (tao_yyvsp[-2].dcval != 0 
              && tao_yyvsp[0].deval != 0 && 
              s != 0) 
            {
              AST_Type *tp = tao_yyvsp[0].deval->compose (tao_yyvsp[-2].dcval);

              if (tp != 0) 
                {
                  a = idl_global->gen ()->create_argument (
                          AST_Argument::dir_IN, 
                          tp, 
                          (UTL_IdList *) tao_yyvsp[0].deval->name ()->copy ()
                        );

                  (void) s->fe_add_argument (a);
                }
            }
        }
break;
case 348:
{
/* parameter_list : '('*/
          idl_global->set_parse_state (IDL_GlobalData::PS_OpSqSeen);
        }
break;
case 349:
{
/*      ')'*/
          idl_global->set_parse_state (IDL_GlobalData::PS_OpQsSeen);
        }
break;
case 350:
{
/*      | '('*/
          idl_global->set_parse_state (IDL_GlobalData::PS_OpSqSeen);
        }
break;
case 351:
{
/*      at_least_one_parameter ')'*/
          idl_global->set_parse_state (IDL_GlobalData::PS_OpQsSeen);
        }
break;
case 353:
{
/* parameters : parameters ','*/
          idl_global->set_parse_state (IDL_GlobalData::PS_OpParCommaSeen);
        }
break;
case 356:
{
/* parameter : direction*/
          idl_global->set_parse_state (IDL_GlobalData::PS_OpParDirSeen);
        }
break;
case 357:
{
/*      param_type_spec*/
          idl_global->set_parse_state (IDL_GlobalData::PS_OpParTypeSeen);
        }
break;
case 358:
{
/*      declarator*/
          UTL_Scope *s = idl_global->scopes ().top_non_null ();
          AST_Argument *a = 0;
          idl_global->set_parse_state (IDL_GlobalData::PS_OpParDeclSeen);

          /*
           * Create a node representing an argument to an operation
           * Add it to the enclosing scope (the operation scope).
           */
          if (tao_yyvsp[-2].dcval != 0 
              && tao_yyvsp[0].deval != 0 
              && s != 0) 
            {
              AST_Type *tp = tao_yyvsp[0].deval->compose (tao_yyvsp[-2].dcval);

              if (tp != 0) 
                {
                  if (!s->is_local () && tp->is_local ())
                    {
                      ACE_DEBUG ((LM_DEBUG,
                                  ACE_TEXT ("error in %s line %d\n"),
                                  idl_global->filename ()->get_string (),
                                  idl_global->lineno ()));
                      ACE_DEBUG ((LM_DEBUG,
                                  ACE_TEXT ("Cannot use a local type as an ")
                                  ACE_TEXT ("argument of a remote ")
                                  ACE_TEXT ("operation\n")));
                    }
                  else
                    {
                      a = 
                        idl_global->gen ()->create_argument (
                            tao_yyvsp[-4].dival, 
                            tp, 
                            (UTL_IdList *) tao_yyvsp[0].deval->name ()->copy ()
                          );
                      (void) s->fe_add_argument (a);
                    }
                }
            }
        }
break;
case 359:
{
/* param_type_spec : base_type_spec*/
          tao_yyval.dcval = 
            idl_global->scopes ().bottom ()->lookup_primitive_type (
                                                 tao_yyvsp[0].etval
                                               );
        }
break;
case 362:
{
/*      | string_type_spec*/
/*      | wstring_type_spec*/
/*      | scoped_name*/
          UTL_Scope *s = idl_global->scopes ().top_non_null ();
          AST_Decl *d = 0;

          if (s != 0)
            {
              d = s->lookup_by_name (tao_yyvsp[0].idlist, 
                                     I_TRUE);
            }

          if (d == 0)
            {
              idl_global->err ()->lookup_error (tao_yyvsp[0].idlist);
            }
          else
            {
              AST_Decl::NodeType nt = d->node_type ();

              if (nt == AST_Decl::NT_struct_fwd 
                  || nt == AST_Decl::NT_union_fwd)
                {
                  if (! AST_Type::narrow_from_decl (d)->is_defined ())
                    {
                      idl_global->err ()->error1 (UTL_Error::EIDL_ILLEGAL_ADD,
                                                  d);

                      /* If we don't return here, we'll crash later.*/
                      return 1;
                    }
                }
            }


          tao_yyval.dcval = d;
        }
break;
case 363:
{
/* direction : IDL_IN*/
          tao_yyval.dival = AST_Argument::dir_IN;
        }
break;
case 364:
{
/*      | IDL_OUT*/
          tao_yyval.dival = AST_Argument::dir_OUT;
        }
break;
case 365:
{
/*      | IDL_INOUT*/
          tao_yyval.dival = AST_Argument::dir_INOUT;
        }
break;
case 366:
{
/* opt_raises : IDL_RAISES*/
          idl_global->set_parse_state (IDL_GlobalData::PS_OpRaiseSeen);
        }
break;
case 367:
{
/*      '('*/
          idl_global->set_parse_state (IDL_GlobalData::PS_OpRaiseSqSeen);
        }
break;
case 368:
{
/*      at_least_one_scoped_name ')'*/
          idl_global->set_parse_state (IDL_GlobalData::PS_OpRaiseQsSeen);
          tao_yyval.nlval = tao_yyvsp[-1].nlval;
        }
break;
case 369:
{
          tao_yyval.nlval = 0;
/*      |  EMPTY */
        }
break;
case 370:
{
/* opt_getraises : IDL_GETRAISES*/
          idl_global->set_parse_state (IDL_GlobalData::PS_OpGetRaiseSeen);
        }
break;
case 371:
{
/*      '('*/
          idl_global->set_parse_state (IDL_GlobalData::PS_OpGetRaiseSqSeen);
        }
break;
case 372:
{
/*      at_least_one_scoped_name ')'*/
          idl_global->set_parse_state (IDL_GlobalData::PS_OpGetRaiseQsSeen);
          tao_yyval.nlval = tao_yyvsp[-1].nlval;
        }
break;
case 373:
{
          tao_yyval.nlval = 0;
/*      |  EMPTY */
        }
break;
case 374:
{
/* opt_setraises : IDL_SETRAISES*/
          idl_global->set_parse_state (IDL_GlobalData::PS_OpSetRaiseSeen);
        }
break;
case 375:
{
/*      '('*/
          idl_global->set_parse_state (IDL_GlobalData::PS_OpSetRaiseSqSeen);
        }
break;
case 376:
{
/*      at_least_one_scoped_name ')'*/
          idl_global->set_parse_state (IDL_GlobalData::PS_OpSetRaiseQsSeen);
          tao_yyval.nlval = tao_yyvsp[-1].nlval;
        }
break;
case 377:
{
          tao_yyval.nlval = 0;
/*      |  EMPTY */
        }
break;
case 378:
{
/* opt_context : IDL_CONTEXT*/
          idl_global->set_parse_state (IDL_GlobalData::PS_OpContextSeen);
        }
break;
case 379:
{
          idl_global->set_parse_state (IDL_GlobalData::PS_OpContextSqSeen);
/*      '('*/
        }
break;
case 380:
{
/*      at_least_one_string_literal ')'*/
          idl_global->set_parse_state (IDL_GlobalData::PS_OpContextQsSeen);
          tao_yyval.slval = tao_yyvsp[-1].slval;
        }
break;
case 381:
{
/*      |  EMPTY */
          tao_yyval.slval = 0;
        }
break;
case 382:
{
/* at_least_one_string_literal : IDL_STRING_LITERAL string_literals*/
          ACE_NEW_RETURN (tao_yyval.slval,
                         UTL_StrList (tao_yyvsp[-1].sval,
                                      tao_yyvsp[0].slval),
                         1);
        }
break;
case 383:
{
/* string_literals : string_literals ','*/
          idl_global->set_parse_state (IDL_GlobalData::PS_OpContextCommaSeen);
        }
break;
case 384:
{
/*      IDL_STRING_LITERAL*/
          if (tao_yyvsp[-3].slval == 0)
            {
              ACE_NEW_RETURN (tao_yyval.slval,
                              UTL_StrList (tao_yyvsp[0].sval,
                                           0),
                              1);
            }
          else 
            {
              UTL_StrList *sl = 0;
              ACE_NEW_RETURN (sl,
                              UTL_StrList (tao_yyvsp[0].sval,
                                           0),
                              1);
              tao_yyvsp[-3].slval->nconc (sl);
              tao_yyval.slval = tao_yyvsp[-3].slval;
            }
        }
break;
case 385:
{
/*      |  EMPTY */
          tao_yyval.slval = 0;
        }
break;
case 386:
{
/* typeid_dcl : IDL_TYPEID scoped_name IDL_STRING_LITERAL*/
          UTL_Scope *s = idl_global->scopes ().top_non_null ();
          AST_Decl *d = s->lookup_by_name (tao_yyvsp[-1].idlist, 
                                           I_TRUE);

          if (d == 0)
            {
              idl_global->err ()->lookup_error (tao_yyvsp[-1].idlist);
            }
          else
            {
              d->set_id_with_typeid (
                     tao_yyvsp[0].sval->get_string ()
                   );
            }
        }
break;
case 387:
{
/* typeprefix_dcl : IDL_TYPEPREFIX scoped_name IDL_STRING_LITERAL*/
          UTL_Scope *s = idl_global->scopes ().top_non_null ();
          AST_Decl *d = s->lookup_by_name (tao_yyvsp[-1].idlist, 
                                           I_TRUE);

          if (d == 0)
            {
              idl_global->err ()->lookup_error (tao_yyvsp[-1].idlist);
            }
          else
            {
              d->set_prefix_with_typeprefix (
                     tao_yyvsp[0].sval->get_string ()
                   );
            }
        }
break;
case 390:
{
/* component_forward_decl : IDL_COMPONENT id*/
          UTL_Scope *s = idl_global->scopes ().top_non_null ();
          UTL_ScopedName n (tao_yyvsp[0].idval, 
                            0);
          AST_ComponentFwd *f = 0;
          idl_global->set_parse_state (
                          IDL_GlobalData::PS_ComponentForwardSeen
                        );

          /*
           * Create a node representing a forward declaration of a
           * component. Store it in the enclosing scope.
           */
          if (s != 0) 
            {
              f = idl_global->gen ()->create_component_fwd (&n);
              (void) s->fe_add_component_fwd (f);
            }
        }
break;
case 391:
{
/* component_decl : component_header          */
          UTL_Scope *s = idl_global->scopes ().top_non_null ();
          AST_Component *c = 0;

          /*
           * Make a new component node and add it to the enclosing scope.
           */
          if (s != 0 && tao_yyvsp[0].chval != 0) 
            {
              c = 
                idl_global->gen ()->create_component (
                                        tao_yyvsp[0].chval->name (),
                                        tao_yyvsp[0].chval->base_component (),
                                        tao_yyvsp[0].chval->supports (),
                                        tao_yyvsp[0].chval->n_supports (),
                                        tao_yyvsp[0].chval->supports_flat (),
                                        tao_yyvsp[0].chval->n_supports_flat ()
                                      );
              AST_Interface *i = AST_Interface::narrow_from_decl (c);
              AST_Interface::fwd_redefinition_helper (i, 
                                                      s);
              /*
               * Add the component to its definition scope.
               */
              c = AST_Component::narrow_from_decl (i);
              (void) s->fe_add_component (c);

              /* This FE_ComponentHeader class isn't destroyed with the AST.*/
              tao_yyvsp[0].chval->name ()->destroy ();
              delete tao_yyvsp[0].chval;
              tao_yyvsp[0].chval = 0;
            }

          /*
           * Push it on the scope stack.
           */
          idl_global->scopes ().push (c);
        }
break;
case 392:
{
/*      '{'*/
          idl_global->set_parse_state (IDL_GlobalData::PS_ComponentSqSeen);
        }
break;
case 393:
{
/*      component_exports*/
          idl_global->set_parse_state (IDL_GlobalData::PS_ComponentBodySeen);
        }
break;
case 394:
{
/*      '}'*/
          idl_global->set_parse_state (IDL_GlobalData::PS_ComponentQsSeen);

          /*
           * Done with this component - pop it off the scopes stack.
           */
          idl_global->scopes ().pop ();
        }
break;
case 395:
{
/*      id*/
          idl_global->set_parse_state (IDL_GlobalData::PS_ComponentIDSeen);
        }
break;
case 396:
{
/*      component_inheritance_spec*/
          idl_global->set_parse_state (IDL_GlobalData::PS_InheritSpecSeen);
        }
break;
case 397:
{
/*      supports_spec*/
          idl_global->set_parse_state (IDL_GlobalData::PS_SupportSpecSeen);

          /*
           * Create an AST representation of the information in the header
           * part of a component.
           */
          UTL_ScopedName n (tao_yyvsp[-4].idval, 
                            0);
          ACE_NEW_RETURN (tao_yyval.chval,
                          FE_ComponentHeader (&n,
                                              tao_yyvsp[-2].idlist,
                                              tao_yyvsp[0].nlval,
                                              I_FALSE),
                          1);
        }
break;
case 398:
{
/* component_inheritance_spec : ':'*/
          idl_global->set_parse_state (IDL_GlobalData::PS_InheritColonSeen);
        }
break;
case 399:
{
/*      scoped_name*/
          tao_yyval.idlist = tao_yyvsp[0].idlist;
        }
break;
case 400:
{
/*      |  EMPTY */
          tao_yyval.idlist = 0;
        }
break;
case 403:
{
/* component_export : provides_decl*/
          idl_global->set_parse_state (IDL_GlobalData::PS_ProvidesDeclSeen);
        }
break;
case 404:
{
/*        ';'*/
          idl_global->set_parse_state (IDL_GlobalData::PS_NoState);
        }
break;
case 405:
{
/*      | uses_decl*/
          idl_global->set_parse_state (IDL_GlobalData::PS_UsesDeclSeen);
        }
break;
case 406:
{
/*        ';'*/
          idl_global->set_parse_state (IDL_GlobalData::PS_NoState);
        }
break;
case 407:
{
/*      | emits_decl*/
          idl_global->set_parse_state (IDL_GlobalData::PS_EmitsDeclSeen);
        }
break;
case 408:
{
/*        ';'*/
          idl_global->set_parse_state (IDL_GlobalData::PS_NoState);
        }
break;
case 409:
{
/*      | publishes_decl*/
          idl_global->set_parse_state (IDL_GlobalData::PS_PublishesDeclSeen);
        }
break;
case 410:
{
/*        ';'*/
          idl_global->set_parse_state (IDL_GlobalData::PS_NoState);
        }
break;
case 411:
{
/*      | consumes_decl*/
          idl_global->set_parse_state (IDL_GlobalData::PS_ConsumesDeclSeen);
        }
break;
case 412:
{
/*        ';'*/
          idl_global->set_parse_state (IDL_GlobalData::PS_NoState);
        }
break;
case 413:
{
/*      | attribute*/
          idl_global->set_parse_state (IDL_GlobalData::PS_AttrDeclSeen);
        }
break;
case 414:
{
/*        ';'*/
          idl_global->set_parse_state (IDL_GlobalData::PS_NoState);
        }
break;
case 415:
{
/* provides_decl : IDL_PROVIDES interface_type id*/
          UTL_Scope *s = idl_global->scopes ().top_non_null ();
          AST_Component *c = AST_Component::narrow_from_scope (s);
          
          if (c != 0)
            {
              AST_Decl *d = s->lookup_by_name (tao_yyvsp[-1].idlist,
                                               I_TRUE);

              if (d == 0)
                {
                  idl_global->err ()->lookup_error (tao_yyvsp[-1].idlist);
                }
              else if (d->node_type () != AST_Decl::NT_interface)
                {
                  idl_global->err ()->interface_expected (d);
                }
              else
                {
                  AST_Type *interface_type =
                    AST_Interface::narrow_from_decl (d);

                  AST_Component::port_description pd;
                  pd.id = tao_yyvsp[0].idval;
                  pd.impl = interface_type;
                  c->provides ().enqueue_tail (pd);
                }
            }  
        }
break;
case 416:
{
/* interface_type : scoped_name*/
          UTL_Scope *s = idl_global->scopes ().top_non_null ();
          AST_Decl *d = s->lookup_by_name (tao_yyvsp[0].idlist,
                                           I_TRUE);

          if (d == 0)
            {
              idl_global->err ()->lookup_error (tao_yyvsp[0].idlist);
            }
          else if (d->node_type () != AST_Decl::NT_interface)
            {
              idl_global->err ()->interface_expected (d);
            }

          tao_yyval.idlist = tao_yyvsp[0].idlist;
        }
break;
case 417:
{
/*      | IDL_OBJECT*/
          Identifier *corba_id = 0;
          ACE_NEW_RETURN (corba_id,
                          Identifier ("Object"),
                          1);
          UTL_IdList *conc_name = 0;
          ACE_NEW_RETURN (conc_name,
                          UTL_IdList (corba_id,
                                      0),
                          1);
          ACE_NEW_RETURN (corba_id,
                          Identifier ("CORBA"),
                          1);
          UTL_IdList *corba_name = 0;
          ACE_NEW_RETURN (corba_name,
                          UTL_IdList (corba_id,
                                      conc_name),
                          1);
          tao_yyval.idlist = corba_name;
        }
break;
case 418:
{
/* uses_decl : IDL_USES opt_multiple interface_type id*/
          UTL_Scope *s = idl_global->scopes ().top_non_null ();
          AST_Decl *d = s->lookup_by_name (tao_yyvsp[-1].idlist,
                                           I_TRUE);

          if (d == 0)
            {
              idl_global->err ()->lookup_error (tao_yyvsp[-1].idlist);
            }
          else if (d->node_type () != AST_Decl::NT_interface)
            {
              idl_global->err ()->interface_expected (d);
            }
          else
            {
              AST_Type *interface_type = AST_Type::narrow_from_decl (d);
              AST_Component *c = AST_Component::narrow_from_scope (s);
          
              if (c != 0)
                {
                  AST_Component::port_description ud;
                  ud.id = tao_yyvsp[0].idval;
                  ud.impl = interface_type;
                  ud.is_multiple = tao_yyvsp[-2].bval;
                  c->uses ().enqueue_tail (ud);
                }
            }
        }
break;
case 419:
{
/* opt_multiple : IDL_MULTIPLE*/
          tao_yyval.bval = I_TRUE;
        }
break;
case 420:
{
/*      |  EMPTY */
          tao_yyval.bval = I_FALSE;
        }
break;
case 421:
{
/* emits_decl : IDL_EMITS scoped_name id*/
          UTL_Scope *s = idl_global->scopes ().top_non_null ();
          AST_Decl *d = s->lookup_by_name (tao_yyvsp[-1].idlist,
                                           I_TRUE);

          if (d == 0)
            {
              idl_global->err ()->lookup_error (tao_yyvsp[-1].idlist);
            }
          else if (d->node_type () != AST_Decl::NT_eventtype)
            {
              idl_global->err ()->eventtype_expected (d);
            }
          else
            {
              AST_Type *event_type = AST_Type::narrow_from_decl (d);
              AST_Component *c = AST_Component::narrow_from_scope (s);
          
              if (c != 0)
                {
                  AST_Component::port_description pd;
                  pd.id = tao_yyvsp[0].idval;
                  pd.impl = event_type;
                  c->emits ().enqueue_tail (pd);
                }
            }
        }
break;
case 422:
{
/* publishes_decl : IDL_PUBLISHES scoped_name id*/
          UTL_Scope *s = idl_global->scopes ().top_non_null ();
          AST_Decl *d = s->lookup_by_name (tao_yyvsp[-1].idlist,
                                           I_TRUE);

          if (d == 0)
            {
              idl_global->err ()->lookup_error (tao_yyvsp[-1].idlist);
            }
          else if (d->node_type () != AST_Decl::NT_eventtype)
            {
              idl_global->err ()->eventtype_expected (d);
            }
          else
            {
              AST_Type *event_type = AST_Type::narrow_from_decl (d);
              AST_Component *c = AST_Component::narrow_from_scope (s);
          
              if (c != 0)
                {
                  AST_Component::port_description pd;
                  pd.id = tao_yyvsp[0].idval;
                  pd.impl = event_type;
                  c->publishes ().enqueue_tail (pd);
                }
            }
        }
break;
case 423:
{
/* consumes_decl : IDL_CONSUMES scoped_name id*/
          UTL_Scope *s = idl_global->scopes ().top_non_null ();
          AST_Decl *d = s->lookup_by_name (tao_yyvsp[-1].idlist,
                                           I_TRUE);

          if (d == 0)
            {
              idl_global->err ()->lookup_error (tao_yyvsp[-1].idlist);
            }
          else if (d->node_type () != AST_Decl::NT_eventtype)
            {
              idl_global->err ()->eventtype_expected (d);
            }
          else
            {
              AST_Type *event_type = AST_Type::narrow_from_decl (d);
              AST_Component *c = AST_Component::narrow_from_scope (s);
          
              if (c != 0)
                {
                  AST_Component::port_description pd;
                  pd.id = tao_yyvsp[0].idval;
                  pd.impl = event_type;
                  c->consumes ().enqueue_tail (pd);
                }
            }
        }
break;
case 424:
{
/* home_decl : home_header */
          UTL_Scope *s = idl_global->scopes ().top_non_null ();
          AST_Home *h = 0;

          /*
           * Make a new home node and add it to the enclosing scope.
           */
          if (s != 0 && tao_yyvsp[0].hhval != 0) 
            {
              h = 
                idl_global->gen ()->create_home (
                                        tao_yyvsp[0].hhval->name (),
                                        tao_yyvsp[0].hhval->base_home (),
                                        tao_yyvsp[0].hhval->managed_component (),
                                        tao_yyvsp[0].hhval->primary_key (),
                                        tao_yyvsp[0].hhval->supports (),
                                        tao_yyvsp[0].hhval->n_supports (),
                                        tao_yyvsp[0].hhval->supports_flat (),
                                        tao_yyvsp[0].hhval->n_supports_flat ()
                                      );
              /*
               * Add the home to its definition scope.
               */
              (void) s->fe_add_home (h);

              /* This FE_HomeHeader class isn't destroyed with the AST.*/
              tao_yyvsp[0].hhval->name ()->destroy ();
              delete tao_yyvsp[0].hhval;
              tao_yyvsp[0].hhval = 0;
            }

          /*
           * Push it on the scope stack.
           */
          idl_global->scopes ().push (h);
        }
break;
case 425:
{
/*      home_body*/
          /*
           * Done with this component - pop it off the scopes stack.
           */
          idl_global->scopes ().pop ();
        }
break;
case 426:
{
/* home_header : IDL_HOME*/
          idl_global->set_parse_state (IDL_GlobalData::PS_HomeSeen);    
        }
break;
case 427:
{
/*      id*/
          idl_global->set_parse_state (IDL_GlobalData::PS_HomeIDSeen);    
        }
break;
case 428:
{
/*      home_inheritance_spec*/
          idl_global->set_parse_state (IDL_GlobalData::PS_InheritSpecSeen);    
        }
break;
case 429:
{
/*      supports_spec*/
          idl_global->set_parse_state (IDL_GlobalData::PS_SupportSpecSeen);    
        }
break;
case 430:
{
/*      IDL_MANAGES*/
          idl_global->set_parse_state (IDL_GlobalData::PS_ManagesSeen);    
        }
break;
case 431:
{
/*      scoped_name*/
          idl_global->set_parse_state (IDL_GlobalData::PS_ManagesIDSeen);    
        }
break;
case 432:
{
/*      primary_key_spec*/
          idl_global->set_parse_state (IDL_GlobalData::PS_PrimaryKeySpecSeen);

          /*
           * Create an AST representation of the information in the header
           * part of a component home.
           */
          UTL_ScopedName n (tao_yyvsp[-10].idval, 
                            0);
          ACE_NEW_RETURN (tao_yyval.hhval,
                          FE_HomeHeader (&n,
                                         tao_yyvsp[-8].idlist,
                                         tao_yyvsp[-6].nlval,
                                         tao_yyvsp[-2].idlist,
                                         tao_yyvsp[0].idlist),
                          1);
        }
break;
case 433:
{
/* home_inheritance_spec ':' */
          idl_global->set_parse_state (IDL_GlobalData::PS_InheritColonSeen);    
        }
break;
case 434:
{
/*      scoped_name*/
          tao_yyval.idlist = tao_yyvsp[0].idlist;
        }
break;
case 435:
{
/*      |  EMPTY */
          tao_yyval.idlist = 0;
        }
break;
case 436:
{
/* primary_key_spec : IDL_PRIMARYKEY scoped_name*/
          tao_yyval.idlist = tao_yyvsp[0].idlist;
        }
break;
case 437:
{
/*      |  EMPTY */
          tao_yyval.idlist = 0;
        }
break;
case 438:
{
/* home_body : '{'*/
          idl_global->set_parse_state (IDL_GlobalData::PS_HomeSqSeen);
        }
break;
case 439:
{
/*      home_exports*/
          idl_global->set_parse_state (IDL_GlobalData::PS_HomeBodySeen);
        }
break;
case 440:
{
/*      '}'*/
          idl_global->set_parse_state (IDL_GlobalData::PS_HomeQsSeen);
        }
break;
case 444:
{
/* home_export : factory_decl*/
          idl_global->set_parse_state (IDL_GlobalData::PS_FactoryDeclSeen);
        }
break;
case 445:
{
/*      | ';'*/
          idl_global->set_parse_state (IDL_GlobalData::PS_NoState);
        }
break;
case 446:
{
/*      | finder_decl*/
          idl_global->set_parse_state (IDL_GlobalData::PS_FinderDeclSeen);
        }
break;
case 447:
{
/*      | ';'*/
          idl_global->set_parse_state (IDL_GlobalData::PS_NoState);
        }
break;
case 448:
{
/* factory_decl : IDL_FACTORY id*/
          UTL_Scope *s = idl_global->scopes ().top_non_null ();
          UTL_ScopedName n (tao_yyvsp[0].idval, 
                            0);
          AST_Operation *o = 0;
          idl_global->set_parse_state (IDL_GlobalData::PS_OpIDSeen);

          /*
           * Create a node representing a factory operation
           * and add it to the enclosing scope.
           */
          if (s != 0) 
            {
              AST_Home *home = AST_Home::narrow_from_scope (s);
              o = 
                idl_global->gen ()->create_operation (
                                        home->managed_component (),
                                        AST_Operation::OP_noflags,
                                        &n,
                                        I_FALSE,
                                        I_FALSE
                                      );
              home->factories ().enqueue_tail (o);
            }

           ACE_OS::free (tao_yyvsp[0].idval);
           tao_yyvsp[0].idval = 0;

          /*
           * Push the operation scope onto the scopes stack.
           */
          idl_global->scopes ().push (o);
        }
break;
case 449:
{
/*      init_parameter_list*/
          idl_global->set_parse_state (IDL_GlobalData::PS_OpParsCompleted);
        }
break;
case 450:
{
/*      opt_raises*/
          UTL_Scope *s = idl_global->scopes ().top_non_null ();
          AST_Operation *o = 0;
          idl_global->set_parse_state (IDL_GlobalData::PS_OpRaiseCompleted);

          /*
           * Add exceptions and context to the operation.
           */
          if (s != 0 && s->scope_node_type () == AST_Decl::NT_op)
            {
              o = AST_Operation::narrow_from_scope (s);

              if (tao_yyvsp[0].nlval != 0 && o != 0)
                {
                  (void) o->fe_add_exceptions (tao_yyvsp[0].nlval);
                }
            }

          /*
           * Done with this operation. Pop its scope from the scopes stack.
           */
          idl_global->scopes ().pop ();
        }
break;
case 451:
{
/* finder_decl : IDL_FINDER id*/
          UTL_Scope *s = idl_global->scopes ().top_non_null ();
          UTL_ScopedName n (tao_yyvsp[0].idval, 
                            0);
          AST_Operation *o = 0;
          idl_global->set_parse_state (IDL_GlobalData::PS_OpIDSeen);

          /*
           * Create a node representing a finder operation
           * and add it to the enclosing scope.
           */
          if (s != 0) 
            {
              AST_Home *home = AST_Home::narrow_from_scope (s);
              o = 
                idl_global->gen ()->create_operation (
                                        home->managed_component (),
                                        AST_Operation::OP_noflags,
                                        &n,
                                        I_FALSE,
                                        I_FALSE
                                      );
              home->finders ().enqueue_tail (o);
            }

           ACE_OS::free (tao_yyvsp[0].idval);
           tao_yyvsp[0].idval = 0;

          /*
           * Push the operation scope onto the scopes stack.
           */
          idl_global->scopes ().push (o);
        }
break;
case 452:
{
/*      init_parameter_list*/
          idl_global->set_parse_state (IDL_GlobalData::PS_OpParsCompleted);
        }
break;
case 453:
{
/*      opt_raises*/
          UTL_Scope *s = idl_global->scopes ().top_non_null ();
          AST_Operation *o = 0;
          idl_global->set_parse_state (IDL_GlobalData::PS_OpRaiseCompleted);

          /*
           * Add exceptions and context to the operation.
           */
          if (s != 0 && s->scope_node_type () == AST_Decl::NT_op)
            {
              o = AST_Operation::narrow_from_scope (s);

              if (tao_yyvsp[0].nlval != 0 && o != 0)
                {
                  (void) o->fe_add_exceptions (tao_yyvsp[0].nlval);
                }
            }

          /*
           * Done with this operation. Pop its scope from the scopes stack.
           */
          idl_global->scopes ().pop ();
        }
break;
case 459:
{
/* event_concrete_forward_decl : IDL_EVENTTYPE id*/
          UTL_Scope *s = idl_global->scopes ().top_non_null ();
          UTL_ScopedName n (tao_yyvsp[0].idval, 
                            0);
          AST_EventTypeFwd *f = 0;
          idl_global->set_parse_state (IDL_GlobalData::PS_EventTypeForwardSeen);

          /*
           * Create a node representing a forward declaration of an
           * eventtype. Store it in the enclosing scope
           */
          if (s != 0) 
            {
              f = idl_global->gen ()->create_eventtype_fwd (&n,
                                                            I_FALSE);
              (void) s->fe_add_valuetype_fwd (f);
            }
        }
break;
case 460:
{
/* event_abs_forward_decl : IDL_ABSTRACT IDL_EVENTTYPE id*/
          UTL_Scope *s = idl_global->scopes ().top_non_null ();
          UTL_ScopedName n (tao_yyvsp[0].idval, 
                            0);
          AST_EventTypeFwd *f = 0;
          idl_global->set_parse_state (IDL_GlobalData::PS_EventTypeForwardSeen);

          /*
           * Create a node representing a forward declaration of an
           * eventtype. Store it in the enclosing scope
           */
          if (s != 0) 
            {
              f = idl_global->gen ()->create_eventtype_fwd (&n,
                                                            I_TRUE);
              (void) s->fe_add_valuetype_fwd (f);
            }
        }
break;
case 461:
{
/* event_abs_decl : event_abs_header event_rest_of_header*/
          UTL_Scope *s = idl_global->scopes ().top_non_null ();
          AST_EventType *e = 0;
          AST_Interface *i = 0;

          if (s != 0 && tao_yyvsp[-1].idval != 0) 
            {
              UTL_ScopedName sn (tao_yyvsp[-1].idval,
                                 0);
              e = 
                idl_global->gen ()->create_eventtype (
                    &sn,
                    tao_yyvsp[0].ehval->inherits (),
                    tao_yyvsp[0].ehval->n_inherits (),
                    tao_yyvsp[0].ehval->inherits_concrete (),
                    tao_yyvsp[0].ehval->inherits_flat (),
                    tao_yyvsp[0].ehval->n_inherits_flat (),
                    tao_yyvsp[0].ehval->supports (),
                    tao_yyvsp[0].ehval->n_supports (),
                    tao_yyvsp[0].ehval->supports_concrete (),
                    I_TRUE,
                    I_FALSE
                  );
              i = AST_Interface::narrow_from_decl (e);
              AST_Interface::fwd_redefinition_helper (i, 
                                                      s);
              /*
               * Add the eventetype to its definition scope
               */
              e = AST_EventType::narrow_from_decl (i);
              (void) s->fe_add_eventtype (e);
            }

          /*
           * Push it on the scope stack.
           */
          idl_global->scopes ().push (e);
        }
break;
case 462:
{
/*      '{'*/
          idl_global->set_parse_state (IDL_GlobalData::PS_EventTypeSqSeen);
        }
break;
case 463:
{
/*      exports*/
          idl_global->set_parse_state (IDL_GlobalData::PS_EventTypeBodySeen);
        }
break;
case 464:
{
/*      '}'*/
          idl_global->set_parse_state (IDL_GlobalData::PS_EventTypeQsSeen);

          /*
           * Done with this eventtype - pop it off the scopes stack.
           */
          idl_global->scopes ().pop ();
        }
break;
case 465:
{
/* event_abs_header : IDL_ABSTRACT IDL_EVENTTYPE id*/
          tao_yyval.idval = tao_yyvsp[0].idval;
        }
break;
case 466:
{
/*      id*/
          idl_global->set_parse_state (IDL_GlobalData::PS_EventTypeIDSeen);

          ACE_DEBUG ((LM_DEBUG,
                      ACE_TEXT ("error in %s line %d\n"),
                      idl_global->filename ()->get_string (),
                      idl_global->lineno ()));
          ACE_DEBUG ((LM_DEBUG,
                      ACE_TEXT ("Sorry, I (TAO_IDL) can't handle")
                      ACE_TEXT (" custom yet\n")));
          tao_yyval.idval = 0;
        }
break;
case 467:
{
/*      id*/
          idl_global->set_parse_state (IDL_GlobalData::PS_EventTypeIDSeen);

          tao_yyval.idval = tao_yyvsp[0].idval;
        }
break;
case 468:
{
/* event_rest_of_header : opt_truncatable inheritance_spec*/
          idl_global->set_parse_state (IDL_GlobalData::PS_InheritSpecSeen);
        }
break;
case 469:
{
/*      supports_spec*/
          idl_global->set_parse_state (IDL_GlobalData::PS_SupportSpecSeen);

          ACE_NEW_RETURN (tao_yyval.ehval,
                          FE_EventHeader (0,
                                          tao_yyvsp[-2].nlval,
                                          tao_yyvsp[0].nlval,
                                          tao_yyvsp[-3].bval),
                          1);
        }
break;
case 470:
{
/* event_decl : event_header event_rest_of_header*/
          UTL_Scope *s = idl_global->scopes ().top_non_null ();
          AST_EventType *e = 0;
          AST_Interface *i = 0;

          if (s != 0 && tao_yyvsp[-1].idval != 0) 
            {
              UTL_ScopedName sn (tao_yyvsp[-1].idval,
                                 0);
              e = 
                idl_global->gen ()->create_eventtype (
                    &sn,
                    tao_yyvsp[0].ehval->inherits (),
                    tao_yyvsp[0].ehval->n_inherits (),
                    tao_yyvsp[0].ehval->inherits_concrete (),
                    tao_yyvsp[0].ehval->inherits_flat (),
                    tao_yyvsp[0].ehval->n_inherits_flat (),
                    tao_yyvsp[0].ehval->supports (),
                    tao_yyvsp[0].ehval->n_supports (),
                    tao_yyvsp[0].ehval->supports_concrete (),
                    I_FALSE,
                    tao_yyvsp[0].ehval->truncatable ()
                  );
              i = AST_Interface::narrow_from_decl (e);
              AST_Interface::fwd_redefinition_helper (i, 
                                                      s);
              /*
               * Add the eventetype to its definition scope
               */
              e = AST_EventType::narrow_from_decl (i);
              (void) s->fe_add_eventtype (e);
            }

          /*
           * Push it on the scope stack.
           */
          idl_global->scopes ().push (e);
        }
break;
case 471:
{
/*      '{'*/
          idl_global->set_parse_state (IDL_GlobalData::PS_EventTypeSqSeen);
        }
break;
case 472:
{
/*      value_elements*/
          idl_global->set_parse_state (IDL_GlobalData::PS_EventTypeBodySeen);
        }
break;
case 473:
{
/*      '}'*/
          idl_global->set_parse_state (IDL_GlobalData::PS_EventTypeQsSeen);

          /*
           * Done with this eventtype - pop it off the scopes stack.
           */
          idl_global->scopes ().pop ();
        }
break;
case 474:
{
/* event_header : event_custom_header*/
          tao_yyval.idval = tao_yyvsp[0].idval;
        }
break;
case 475:
{
/* event_header : event_plain_header*/
          tao_yyval.idval = tao_yyvsp[0].idval;
        }
break;
    }
    tao_yyssp -= tao_yym;
    tao_yystate = *tao_yyssp;
    tao_yyvsp -= tao_yym;
    tao_yym = tao_yylhs[tao_yyn];
    if (tao_yystate == 0 && tao_yym == 0)
    {
#ifdef TAO_YYDEBUG
        if (5 < tao_yydebug)
            printf("tao_yydebug: after reduction, shifting from state 0 to\
 state %d\n", TAO_YYFINAL);
#endif
        tao_yystate = TAO_YYFINAL;
        *++tao_yyssp = TAO_YYFINAL;
        *++tao_yyvsp = tao_yyval;
        if (tao_yychar < 0)
        {
            if ((tao_yychar = tao_yylex()) < 0) tao_yychar = 0;
#if TAO_YYDEBUG
            if (tao_yydebug)
            {
                tao_yys = 0;
                if (tao_yychar <= TAO_YYMAXTOKEN) tao_yys = tao_yyname[tao_yychar];
                if (!tao_yys) tao_yys = "illegal-symbol";
                if (5 < tao_yydebug)
                    printf("tao_yydebug: state %d, reading %d (%s)\n",
                        TAO_YYFINAL, tao_yychar, tao_yys);
                else
                    TAO_YYDEBUG_LOOK_AHEAD(TAO_YYFINAL, tao_yychar, tao_yys, tao_yyssp-tao_yyss);
            }
#endif
        }
        if (tao_yychar == 0) goto tao_yyaccept;
        goto tao_yyloop;
    }
    if ((tao_yyn = tao_yygindex[tao_yym]) && (tao_yyn += tao_yystate) >= 0 &&
            tao_yyn <= TAO_YYTABLESIZE && tao_yycheck[tao_yyn] == tao_yystate)
        tao_yystate = tao_yytable[tao_yyn];
    else
        tao_yystate = tao_yydgoto[tao_yym];
#ifdef TAO_YYDEBUG
    if (5 < tao_yydebug)
        printf("tao_yydebug: after reduction, shifting from state %d \
to state %d\n", *tao_yyssp, tao_yystate);
#endif
    if (tao_yyssp >= tao_yyss + tao_yystacksize - 1)
    {
        goto tao_yyoverflow;
    }
    *++tao_yyssp = tao_yystate;
    *++tao_yyvsp = tao_yyval;
    goto tao_yyloop;
tao_yyoverflow:
    tao_yyerror("yacc stack overflow");
tao_yyabort:
    return (1);
tao_yyaccept:
    return (0);
}
