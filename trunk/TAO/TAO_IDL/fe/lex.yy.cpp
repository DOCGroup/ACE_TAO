/* A lexical scanner generated by flex */

/* Scanner skeleton version:
 * $Header: /home/daffy/u0/vern/flex/flex-2.4.7/RCS/flex.skl,v 1.2 94/08/03 11:13:24 vern Exp $
 */

#define FLEX_SCANNER

#include /**/ <stdio.h>


/* cfront 1.2 defines "c_plusplus" instead of "__cplusplus" */
#ifdef c_plusplus
#ifndef __cplusplus
#define __cplusplus
#endif
#endif


#ifdef __cplusplus

#include /**/ <stdlib.h>
#include /**/ <stdio.h>

/* Use prototypes in function declarations. */
#define YY_USE_PROTOS

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#ifdef __STDC__

#define YY_USE_PROTOS
#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */


#ifdef __TURBOC__
#define YY_USE_CONST
#endif


#ifndef YY_USE_CONST
#ifndef const
#define const
#endif
#endif


#ifdef YY_USE_PROTOS
#define YY_PROTO(proto) proto
#else
#define YY_PROTO(proto) ()
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.
 */
#define YY_START ((yy_start - 1) / 2)

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file".  Now included
 * only for backward compatibility with previous versions of flex.
 */
#define YY_NEW_FILE yyrestart( yyin )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#define YY_BUF_SIZE 16384

typedef struct yy_buffer_state *YY_BUFFER_STATE;

extern int yyleng;
extern FILE *yyin, *yyout;

#ifdef __cplusplus
extern "C" {
#endif
	extern int yywrap YY_PROTO(( void ));
#ifdef __cplusplus
	}
#endif

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

/* The funky do-while in the following #define is used to turn the definition
 * int a single C statement (which needs a semi-colon terminator).  This
 * avoids problems with code like:
 *
 * 	if ( condition_holds )
 *		yyless( 5 );
 *	else
 *		do_something_else();
 *
 * Prior to using the do-while the compiler would get upset at the
 * "else" because it interpreted the "if" statement as being all
 * done when it reached the ';' after the yyless() call.
 */

/* Return all but the first 'n' matched characters back to the input stream. */

#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		*yy_cp = yy_hold_char; \
		yy_c_buf_p = yy_cp = yy_bp + n - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yytext_ptr )


struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;
#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2
	};

static YY_BUFFER_STATE yy_current_buffer = 0;

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 */
#define YY_CURRENT_BUFFER yy_current_buffer


/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;

static int yy_n_chars;		/* number of characters read into yy_ch_buf */


int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 1;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

static void yyunput YY_PROTO(( int c, char *buf_ptr ));
void yyrestart YY_PROTO(( FILE *input_file ));
void yy_switch_to_buffer YY_PROTO(( YY_BUFFER_STATE new_buffer ));
void yy_load_buffer_state YY_PROTO(( void ));
YY_BUFFER_STATE yy_create_buffer YY_PROTO(( FILE *file, int size ));
void yy_delete_buffer YY_PROTO(( YY_BUFFER_STATE b ));
void yy_init_buffer YY_PROTO(( YY_BUFFER_STATE b, FILE *file ));

static int yy_start_stack_ptr = 0;
static int yy_start_stack_depth = 0;
static int *yy_start_stack = 0;
static void yy_push_state YY_PROTO(( int new_state ));
static void yy_pop_state YY_PROTO(( void ));
static int yy_top_state YY_PROTO(( void ));

static void *yy_flex_alloc YY_PROTO(( unsigned int ));
static void *yy_flex_realloc YY_PROTO(( void *, unsigned int ));
static void yy_flex_free YY_PROTO(( void * ));

#define yy_new_buffer yy_create_buffer

#define INITIAL 0
typedef unsigned char YY_CHAR;
typedef int yy_state_type;
FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;
extern char yytext[];


#ifndef yytext_ptr
static void yy_flex_strncpy YY_PROTO(( char *, const char *, int ));
#endif

#ifdef __cplusplus
static int yyinput YY_PROTO(( void ));
#else
static int input YY_PROTO(( void ));
#endif

static yy_state_type yy_get_previous_state YY_PROTO(( void ));
static yy_state_type yy_try_NUL_trans YY_PROTO(( yy_state_type current_state ));
static int yy_get_next_buffer YY_PROTO(( void ));
static void yy_fatal_error YY_PROTO(( const char msg[] ));

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yytext_ptr = yy_bp; \
	yyleng = yy_cp - yy_bp; \
	yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	if ( yyleng >= YYLMAX ) \
		YY_FATAL_ERROR( "token too large, exceeds YYLMAX" ); \
	yy_flex_strncpy( yytext, yytext_ptr, yyleng + 1 ); \
	yy_c_buf_p = yy_cp;

#define YY_END_OF_BUFFER 61
static const short int yy_accept[278] =
    {   0,
       57,   57,   61,   59,   57,   58,   59,   59,   59,   59,
       44,   42,   59,   59,   59,   39,   39,   39,   39,   39,
       39,   39,   39,   39,   39,   39,   39,   39,   39,   39,
       39,   39,   39,   39,   59,   57,    0,   45,    0,    0,
       44,   42,   56,    0,   40,   44,    0,    0,    0,   42,
       38,   36,   37,   39,   39,   39,   39,   39,   39,   39,
       39,   39,   39,   39,   39,   39,   39,   33,   39,   39,
       39,   39,   39,   39,   39,   39,   39,   39,   39,   39,
       39,   39,   39,   39,    0,   53,    0,    0,    0,    0,
        0,   46,    0,   46,    0,    0,   55,   40,    0,   40,

        0,   41,   43,   39,   39,    1,   39,   39,   39,   39,
       39,   39,   39,   39,   39,   39,   39,   39,   39,   39,
       39,   39,   34,   39,   39,   39,   39,   39,   39,   39,
       39,   39,   39,   39,   39,    0,    0,    0,    0,    0,
       48,   47,    0,    0,   40,   41,   39,   30,   39,   39,
       18,   25,   39,   39,   39,   39,   12,   39,   39,   39,
       39,   22,   39,   39,   39,   39,   39,   39,   39,   39,
       39,   39,   39,   39,   39,   29,   39,   39,    0,    0,
        0,    0,    0,   47,    0,   31,   39,   39,    9,   39,
       39,   39,   39,   20,   32,   39,   39,   28,   39,   39,

       39,   39,   23,   39,   39,   39,   39,   16,   39,   39,
       39,   51,    0,    0,    0,    0,   39,   39,   39,   39,
       21,   39,   39,    2,   35,    3,   39,   39,   13,   11,
       17,   39,   39,   39,   39,   50,    0,    0,    0,    0,
        0,    0,   39,   27,    7,   19,   39,   39,   39,   39,
       10,   39,   26,   39,    0,   54,    0,    0,    0,   39,
       39,   39,    4,   15,   24,   39,    0,    0,    0,    5,
        6,    8,   14,   52,    0,   49,    0
    } ;

static const int yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    4,    1,    5,    6,    1,    1,    1,    7,    1,
        1,    8,    9,    1,   10,   11,   12,   13,   14,   14,
       14,   14,   14,   14,   14,   15,   15,   16,    1,   17,
        1,   18,    1,    1,   19,   20,   20,   20,   21,   22,
       23,   23,   23,   23,   23,   24,   23,   23,   23,   23,
       23,   25,   26,   27,   28,   23,   23,   29,   23,   23,
        1,   30,    1,    1,   31,    1,   32,   33,   34,   35,

       36,   37,   38,   39,   40,   23,   23,   41,   42,   43,
       44,   45,   46,   47,   48,   49,   50,   51,   52,   53,
       54,   23,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static const int yy_meta[55] =
    {   0,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    3,    3,    3,    1,    1,    1,    3,    3,
        3,    3,    4,    4,    4,    4,    4,    4,    4,    1,
        4,    3,    3,    3,    3,    3,    3,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4
    } ;

static const short int yy_base[288] =
    {   0,
        0,  439,  444,  446,   53,  446,  438,  412,   45,   53,
       53,   58,  425,  423,  421,    0,  419,  412,   13,  392,
       31,   40,   34,  394,  391,  389,  388,   47,   56,   44,
      377,  387,  385,   51,  105,   96,  423,  446,  420,   88,
      100,  111,  446,  423,  141,  128,  155,  170,    0,  160,
      446,  446,  446,    0,  401,  396,  369,  373,  377,  372,
      387,  375,  380,  366,  365,  380,  369,   42,  369,  376,
      361,  373,  359,  367,  374,  359,  360,  356,  362,  356,
       64,  360,  360,  349,  184,  446,  111,  189,  362,  356,
      348,  446,  387,  386,  120,  389,  446,    0,  196,  446,

      144,  199,    0,  365,  369,    0,  342,  347,  351,  339,
       82,  353,  351,  341,  346,  349,  330,  343,  340,  327,
      340,  323,    0,  326,  338,  322,  324,   88,  321,  333,
      324,  327,  331,  333,  317,  358,  357,  325,  317,  327,
      446,  446,  187,  202,  213,  446,  337,    0,  317,  320,
        0,    0,  306,  318,  303,  311,    0,  306,  301,  300,
      301,    0,  306,  297,  313,  308,  299,  306,  292,  297,
      305,  304,  302,  293,  297,    0,  287,  293,  327,  157,
      288,  294,  291,  446,  321,    0,  294,  294,    0,  272,
      283,  287,  273,    0,    0,  284,  284,    0,  265,  270,

      274,  273,    0,  277,  265,  274,  276,    0,  268,  279,
      266,  446,  205,  259,  228,  265,  256,  262,  255,  254,
        0,  262,  269,    0,    0,    0,  237,  238,    0,    0,
        0,  220,  215,  199,  201,  446,  231,  235,  245,  251,
      248,  201,  182,    0,    0,    0,  181,  188,  153,  159,
        0,  155,    0,  158,  169,  446,  162,  146,  101,  112,
      101,  104,    0,    0,    0,   88,  130,  120,  114,    0,
        0,    0,    0,  446,  107,  446,  446,  266,  270,  272,
      276,  280,   75,  284,  288,  292,  296
    } ;

static const short int yy_def[288] =
    {   0,
      277,    1,  277,  277,  277,  277,  278,  279,  277,  277,
      277,  277,  277,  277,  277,  280,  280,  280,  280,  280,
      280,  280,  280,  280,  280,  280,  280,  280,  280,  280,
      280,  280,  280,  280,  277,  277,  278,  277,  277,  281,
      277,  277,  277,  282,  277,  277,  277,  277,  283,  277,
      277,  277,  277,  280,  280,  280,  280,  280,  280,  280,
      280,  280,  280,  280,  280,  280,  280,  280,  280,  280,
      280,  280,  280,  280,  280,  280,  280,  280,  280,  280,
      280,  280,  280,  280,  277,  277,   35,  277,  277,  277,
      277,  277,  277,  277,  277,  282,  277,   45,  277,  277,

      277,  277,  283,  280,  280,  280,  280,  280,  280,  280,
      280,  280,  280,  280,  280,  280,  280,  280,  280,  280,
      280,  280,  280,  280,  280,  280,  280,  280,  280,  280,
      280,  280,  280,  280,  280,  284,  277,  277,  277,  277,
      277,  277,  277,  277,  277,  277,  280,  280,  280,  280,
      280,  280,  280,  280,  280,  280,  280,  280,  280,  280,
      280,  280,  280,  280,  280,  280,  280,  280,  280,  280,
      280,  280,  280,  280,  280,  280,  280,  280,  284,  277,
      277,  277,  277,  277,  277,  280,  280,  280,  280,  280,
      280,  280,  280,  280,  280,  280,  280,  280,  280,  280,

      280,  280,  280,  280,  280,  280,  280,  280,  280,  280,
      280,  277,  277,  277,  277,  277,  280,  280,  280,  280,
      280,  280,  280,  280,  280,  280,  280,  280,  280,  280,
      280,  280,  280,  280,  280,  277,  277,  285,  277,  277,
      277,  277,  280,  280,  280,  280,  280,  280,  280,  280,
      280,  280,  280,  280,  285,  277,  286,  277,  277,  280,
      280,  280,  280,  280,  280,  280,  286,  277,  287,  280,
      280,  280,  280,  277,  287,  277,    0,  277,  277,  277,
      277,  277,  277,  277,  277,  277,  277
    } ;

static const short int yy_nxt[501] =
    {   0,
        4,    5,    6,    5,    7,    4,    8,    4,    4,    9,
        4,   10,   11,   12,   12,   13,   14,   15,   16,   16,
       16,   17,   16,   16,   16,   16,   18,   16,   16,    4,
        4,   19,   20,   21,   22,   23,   24,   16,   16,   25,
       26,   27,   16,   28,   16,   16,   29,   30,   31,   32,
       33,   34,   16,   16,   36,   57,   36,   41,   42,   42,
       43,   58,   60,   45,   44,   46,   46,   47,   45,   61,
       50,   50,   50,   48,   62,   63,   65,  103,   48,   76,
       71,   49,   77,   64,   83,  117,   66,   74,   48,   72,
      118,   75,   78,   48,   94,   79,   73,   36,   84,   36,

       95,   95,  269,  131,  269,   49,   85,   86,   87,  276,
       45,  132,   46,   46,   47,  136,  276,   88,   88,   88,
       48,   45,  274,   50,   50,   50,  142,  170,   49,  153,
      154,   48,  143,  143,  268,   48,  273,  171,   45,  272,
       46,   46,   47,  271,   89,   90,   48,  270,   48,   91,
      257,  277,   49,   98,   98,   98,  102,  102,  102,  212,
      213,   99,  100,   48,  100,   45,  268,   47,   47,   47,
       45,  256,   50,   50,   50,   48,   99,  100,  101,  101,
       48,  100,  102,  102,  102,   85,   86,   87,  266,  265,
       48,   86,  137,  184,  264,   48,   88,   88,   88,  185,

      185,   88,   88,   88,  144,  144,  263,  236,  145,  145,
      145,  102,  102,  102,  145,  145,  145,  237,  237,  237,
      146,  262,  146,   89,  261,  145,  145,  145,   91,  239,
      260,  240,  259,  236,  100,  146,  100,  256,  254,  146,
      241,  241,  241,  237,  237,  237,  239,  253,  240,  100,
      252,  258,  239,  100,  240,  257,  251,  241,  241,  241,
      241,  241,  241,  241,  241,  241,   37,   37,   37,   37,
       39,  250,   39,   39,   54,   54,   93,  249,   93,   93,
       96,   96,   96,   96,  179,  179,  179,  179,  255,  255,
      255,  255,  267,  267,  267,  267,  275,  275,  275,  275,

      248,  247,  246,  245,  244,  243,  242,  238,  235,  234,
      233,  232,  231,  230,  229,  228,  227,  226,  225,  224,
      223,  222,  221,  220,  219,  218,  217,  184,  216,  215,
      214,  180,  211,  210,  209,  208,  207,  206,  205,  204,
      203,  202,  201,  200,  199,  198,  197,  196,  195,  194,
      193,  192,  191,  190,  189,  188,  187,  186,  183,  182,
      181,  136,  180,  178,  177,  176,  175,  174,  173,  172,
      169,  168,  167,  166,  165,  164,  163,  162,  161,  160,
      159,  158,  157,  156,  155,  152,  151,  150,  149,  148,
      147,   97,  141,  141,  140,  139,  138,  135,  134,  133,

      130,  129,  128,  127,  126,  125,  124,  123,  122,  121,
      120,  119,  116,  115,  114,  113,  112,  111,  110,  109,
      108,  107,  106,  105,  104,   97,   92,   38,   82,   81,
       80,   70,   69,   68,   67,   59,   56,   55,   53,   52,
       51,   40,   38,  277,   35,    3,  277,  277,  277,  277,
      277,  277,  277,  277,  277,  277,  277,  277,  277,  277,
      277,  277,  277,  277,  277,  277,  277,  277,  277,  277,
      277,  277,  277,  277,  277,  277,  277,  277,  277,  277,
      277,  277,  277,  277,  277,  277,  277,  277,  277,  277,
      277,  277,  277,  277,  277,  277,  277,  277,  277,  277

    } ;

static const short int yy_chk[501] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    5,   19,    5,    9,    9,    9,
       10,   19,   21,   11,   10,   11,   11,   11,   12,   21,
       12,   12,   12,   11,   21,   22,   23,  283,   12,   30,
       28,   11,   30,   22,   34,   68,   23,   29,   11,   28,
       68,   29,   30,   12,   40,   30,   28,   36,   34,   36,

       40,   40,  259,   81,  259,   11,   35,   35,   35,  275,
       41,   81,   41,   41,   41,   87,  269,   35,   35,   35,
       41,   42,  268,   42,   42,   42,   95,  128,   41,  111,
      111,   42,   95,   95,  267,   41,  266,  128,   46,  262,
       46,   46,   46,  261,   35,   35,   42,  260,   46,   35,
      258,   87,   41,   45,   45,   45,  101,  101,  101,  180,
      180,   45,   45,   46,   45,   47,  257,   47,   47,   47,
       50,  255,   50,   50,   50,   47,   45,   45,   48,   48,
       50,   45,   48,   48,   48,   85,   85,   85,  254,  252,
       47,   88,   88,  143,  250,   50,   85,   85,   85,  143,

      143,   88,   88,   88,   99,   99,  249,  213,   99,   99,
       99,  102,  102,  102,  144,  144,  144,  213,  213,  213,
      102,  248,  102,   85,  247,  145,  145,  145,   85,  215,
      243,  215,  242,  237,  145,  102,  145,  238,  235,  102,
      215,  215,  215,  237,  237,  237,  239,  234,  239,  145,
      233,  241,  240,  145,  240,  240,  232,  239,  239,  239,
      241,  241,  241,  240,  240,  240,  278,  278,  278,  278,
      279,  228,  279,  279,  280,  280,  281,  227,  281,  281,
      282,  282,  282,  282,  284,  284,  284,  284,  285,  285,
      285,  285,  286,  286,  286,  286,  287,  287,  287,  287,

      223,  222,  220,  219,  218,  217,  216,  214,  211,  210,
      209,  207,  206,  205,  204,  202,  201,  200,  199,  197,
      196,  193,  192,  191,  190,  188,  187,  185,  183,  182,
      181,  179,  178,  177,  175,  174,  173,  172,  171,  170,
      169,  168,  167,  166,  165,  164,  163,  161,  160,  159,
      158,  156,  155,  154,  153,  150,  149,  147,  140,  139,
      138,  137,  136,  135,  134,  133,  132,  131,  130,  129,
      127,  126,  125,  124,  122,  121,  120,  119,  118,  117,
      116,  115,  114,  113,  112,  110,  109,  108,  107,  105,
      104,   96,   94,   93,   91,   90,   89,   84,   83,   82,

       80,   79,   78,   77,   76,   75,   74,   73,   72,   71,
       70,   69,   67,   66,   65,   64,   63,   62,   61,   60,
       59,   58,   57,   56,   55,   44,   39,   37,   33,   32,
       31,   27,   26,   25,   24,   20,   18,   17,   15,   14,
       13,    8,    7,    3,    2,  277,  277,  277,  277,  277,
      277,  277,  277,  277,  277,  277,  277,  277,  277,  277,
      277,  277,  277,  277,  277,  277,  277,  277,  277,  277,
      277,  277,  277,  277,  277,  277,  277,  277,  277,  277,
      277,  277,  277,  277,  277,  277,  277,  277,  277,  277,
      277,  277,  277,  277,  277,  277,  277,  277,  277,  277

    } ;

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#ifndef YYLMAX
#define YYLMAX 8192
#endif

char yytext[YYLMAX];
char *yytext_ptr;
# line 1 "idl.ll"
# line 3 "idl.ll"
/*

COPYRIGHT

Copyright 1992, 1993, 1994 Sun Microsystems, Inc.  Printed in the United
States of America.  All Rights Reserved.

This product is protected by copyright and distributed under the following
license restricting its use.

The Interface Definition Language Compiler Front End (CFE) is made
available for your use provided that you include this license and copyright
notice on all media and documentation and the software program in which
this product is incorporated in whole or part. You may copy and extend
functionality (but may not remove functionality) of the Interface
Definition Language CFE without charge, but you are not authorized to
license or distribute it to anyone else except as part of a product or
program developed by you or with the express written consent of Sun
Microsystems, Inc. ("Sun").

The names of Sun Microsystems, Inc. and any of its subsidiaries or
affiliates may not be used in advertising or publicity pertaining to
distribution of Interface Definition Language CFE as permitted herein.

This license is effective until terminated by Sun for failure to comply
with this license.  Upon termination, you shall destroy or return all code
and documentation for the Interface Definition Language CFE.

IDL_INTERFACE DEFINITION LANGUAGE CFE IS PROVIDED AS IS WITH NO WARRANTIES OF
IDL_ANY KIND INCLUDING THE WARRANTIES OF DESIGN, MERCHANTIBILITY AND FITNESS
FOR A PARTICULAR PURPOSE, NONINFRINGEMENT, OR ARISING FROM A COURSE OF
DEALING, USAGE OR TRADE PRACTICE.

IDL_INTERFACE DEFINITION LANGUAGE CFE IS PROVIDED WITH NO SUPPORT AND WITHOUT
IDL_ANY OBLIGATION ON THE PART OF Sun OR IDL_ANY OF ITS SUBSIDIARIES OR AFFILIATES
TO ASSIST IDL_IN ITS USE, CORRECTION, MODIFICATION OR ENHANCEMENT.

SUN OR IDL_ANY OF ITS SUBSIDIARIES OR AFFILIATES SHALL HAVE NO LIABILITY WITH
RESPECT TO THE INFRINGEMENT OF COPYRIGHTS, TRADE SECRETS OR IDL_ANY PATENTS BY
IDL_INTERFACE DEFINITION LANGUAGE CFE OR IDL_ANY PART THEREOF.

IDL_IN NO EVENT WILL SUN OR IDL_ANY OF ITS SUBSIDIARIES OR AFFILIATES BE LIABLE FOR
IDL_ANY LOST REVENUE OR PROFITS OR OTHER SPECIAL, INDIRECT AND CONSEQUENTIAL
DAMAGES, EVEN IF SUN HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.

Use, duplication, or disclosure by the government is subject to
restrictions as set forth in subparagraph (c)(1)(ii) of the Rights in
Technical Data and Computer Software clause at DFARS 252.227-7013 and FAR
52.227-19.

Sun, Sun Microsystems and the Sun logo are trademarks or registered
trademarks of Sun Microsystems, Inc.

SunSoft, Inc.
2550 Garcia Avenue
Mountain View, California  94043

NOTE:

SunOS, SunSoft, Sun, Solaris, Sun Microsystems or the Sun logo are
trademarks or registered trademarks of Sun Microsystems, Inc.

 */

/*
 * idl.ll - Lexical scanner for IDL 1.1
 */

#include "idl.h"
#include "idl_extern.h"
#include "fe_private.h"
#include "y.tab.h"
#include /**/ <string.h>

static char	idl_escape_reader(char *);
static double	idl_atof(char *);
static long	idl_atoi(char *, long);
static void	idl_parse_line_and_file(char *);
static void	idl_store_pragma(char *);

#if defined (HPUX)
// HPUX has yytext typed to unsigned char *. We make sure here that
// we'll always use char * static char* __yytext = (char*) yytext;
// NOTE: This will not work under flex(1) were yytext is not a fixed
// buffer, but a dynamically allocated one. This function should do
// the trick for us.
inline char *__yytext()
{
  return (char *) yytext;
}
#define ace_yytext __yytext()
#else
#define ace_yytext yytext
#endif /* 0 */

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifdef YY_MALLOC_DECL
YY_MALLOC_DECL
#else
#if __STDC__
#ifndef __cplusplus
#include /**/ <stdlib.h>
#endif
#else
/* Just try to get by without declaring the routines.  This will fail
 * miserably on non-ANSI systems for which sizeof(size_t) != sizeof(int)
 * or sizeof(void*) != sizeof(int).
 */
#endif
#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */

#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO (void) fwrite( yytext, yyleng, 1, yyout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( yy_current_buffer->yy_is_interactive ) \
		{ \
		int c = getc( yyin ); \
		result = c == EOF ? 0 : 1; \
		buf[0] = (char) c; \
		} \
	else if ( ((result = fread( buf, 1, max_size, yyin )) == 0) \
		  && ferror( yyin ) ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );
#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL int yylex YY_PROTO(( void ))
#endif

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

YY_DECL
	{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;

# line 101 "idl.ll"



	if ( yy_init )
		{
#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yy_start )
			yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( yy_current_buffer )
			yy_init_buffer( yy_current_buffer, yyin );
		else
			yy_current_buffer =
				yy_create_buffer( yyin, YY_BUF_SIZE );

		yy_load_buffer_state();

		yy_init = 0;
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yy_start;
		if ( yy_bp[-1] == '\n' )
			++yy_current_state;
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				yy_last_accepting_state = yy_current_state;
				yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 278 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 446 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;


do_action:	/* This label is used only to access EOF actions. */


		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yy_hold_char;
			yy_cp = yy_last_accepting_cpos;
			yy_current_state = yy_last_accepting_state;
			goto yy_find_action;

case 1:
YY_USER_ACTION
# line 103 "idl.ll"
return IDL_ANY;
	YY_BREAK
case 2:
YY_USER_ACTION
# line 104 "idl.ll"
return IDL_MODULE;
	YY_BREAK
case 3:
YY_USER_ACTION
# line 105 "idl.ll"
return IDL_RAISES;
	YY_BREAK
case 4:
YY_USER_ACTION
# line 106 "idl.ll"
return IDL_READONLY;
	YY_BREAK
case 5:
YY_USER_ACTION
# line 107 "idl.ll"
return IDL_ATTRIBUTE;
	YY_BREAK
case 6:
YY_USER_ACTION
# line 108 "idl.ll"
return IDL_EXCEPTION;
	YY_BREAK
case 7:
YY_USER_ACTION
# line 109 "idl.ll"
return IDL_CONTEXT;
	YY_BREAK
case 8:
YY_USER_ACTION
# line 110 "idl.ll"
return IDL_INTERFACE;
	YY_BREAK
case 9:
YY_USER_ACTION
# line 111 "idl.ll"
return IDL_CONST;
	YY_BREAK
case 10:
YY_USER_ACTION
# line 112 "idl.ll"
return IDL_TYPEDEF;
	YY_BREAK
case 11:
YY_USER_ACTION
# line 113 "idl.ll"
return IDL_STRUCT;
	YY_BREAK
case 12:
YY_USER_ACTION
# line 114 "idl.ll"
return IDL_ENUM;
	YY_BREAK
case 13:
YY_USER_ACTION
# line 115 "idl.ll"
return IDL_STRING;
	YY_BREAK
case 14:
YY_USER_ACTION
# line 116 "idl.ll"
return IDL_WSTRING;
	YY_BREAK
case 15:
YY_USER_ACTION
# line 117 "idl.ll"
return IDL_SEQUENCE;
	YY_BREAK
case 16:
YY_USER_ACTION
# line 118 "idl.ll"
return IDL_UNION;
	YY_BREAK
case 17:
YY_USER_ACTION
# line 119 "idl.ll"
return IDL_SWITCH;
	YY_BREAK
case 18:
YY_USER_ACTION
# line 120 "idl.ll"
return IDL_CASE;
	YY_BREAK
case 19:
YY_USER_ACTION
# line 121 "idl.ll"
return IDL_DEFAULT;
	YY_BREAK
case 20:
YY_USER_ACTION
# line 122 "idl.ll"
return IDL_FLOAT;
	YY_BREAK
case 21:
YY_USER_ACTION
# line 123 "idl.ll"
return IDL_DOUBLE;
	YY_BREAK
case 22:
YY_USER_ACTION
# line 124 "idl.ll"
return IDL_LONG;
	YY_BREAK
case 23:
YY_USER_ACTION
# line 125 "idl.ll"
return IDL_SHORT;
	YY_BREAK
case 24:
YY_USER_ACTION
# line 126 "idl.ll"
return IDL_UNSIGNED;
	YY_BREAK
case 25:
YY_USER_ACTION
# line 127 "idl.ll"
return IDL_CHAR;
	YY_BREAK
case 26:
YY_USER_ACTION
# line 128 "idl.ll"
return IDL_WCHAR;
	YY_BREAK
case 27:
YY_USER_ACTION
# line 129 "idl.ll"
return IDL_BOOLEAN;
	YY_BREAK
case 28:
YY_USER_ACTION
# line 130 "idl.ll"
return IDL_OCTET;
	YY_BREAK
case 29:
YY_USER_ACTION
# line 131 "idl.ll"
return IDL_VOID;
	YY_BREAK
case 30:
YY_USER_ACTION
# line 133 "idl.ll"
return IDL_TRUETOK;
	YY_BREAK
case 31:
YY_USER_ACTION
# line 134 "idl.ll"
return IDL_FALSETOK;
	YY_BREAK
case 32:
YY_USER_ACTION
# line 136 "idl.ll"
return IDL_INOUT;
	YY_BREAK
case 33:
YY_USER_ACTION
# line 137 "idl.ll"
return IDL_IN;
	YY_BREAK
case 34:
YY_USER_ACTION
# line 138 "idl.ll"
return IDL_OUT;
	YY_BREAK
case 35:
YY_USER_ACTION
# line 139 "idl.ll"
return IDL_ONEWAY;
	YY_BREAK
case 36:
YY_USER_ACTION
# line 141 "idl.ll"
return IDL_LEFT_SHIFT;
	YY_BREAK
case 37:
YY_USER_ACTION
# line 142 "idl.ll"
return IDL_RIGHT_SHIFT;
	YY_BREAK
case 38:
YY_USER_ACTION
# line 143 "idl.ll"
{
		  yylval.strval = "::";
		  return IDL_SCOPE_DELIMITOR;
		}
	YY_BREAK
case 39:
YY_USER_ACTION
# line 148 "idl.ll"
{
    char *z = (char *) malloc(strlen(ace_yytext) + 1);
    strcpy(z, ace_yytext);
    yylval.strval = z;
    return IDENTIFIER;
}
	YY_BREAK
case 40:
YY_USER_ACTION
# line 155 "idl.ll"
{
                  yylval.dval = idl_atof(ace_yytext);
                  return IDL_FLOATING_PT_LITERAL;
                }
	YY_BREAK
case 41:
YY_USER_ACTION
# line 159 "idl.ll"
{
                  yylval.dval = idl_atof(ace_yytext);
                  return IDL_FLOATING_PT_LITERAL;
                }
	YY_BREAK
case 42:
YY_USER_ACTION
# line 164 "idl.ll"
{
		  yylval.ival = idl_atoi(ace_yytext, 10);
		  return IDL_INTEGER_LITERAL;
	        }
	YY_BREAK
case 43:
YY_USER_ACTION
# line 168 "idl.ll"
{
		  yylval.ival = idl_atoi(ace_yytext, 16);
		  return IDL_INTEGER_LITERAL;
	        }
	YY_BREAK
case 44:
YY_USER_ACTION
# line 172 "idl.ll"
{
		  yylval.ival = idl_atoi(ace_yytext, 8);
		  return IDL_INTEGER_LITERAL;
	      	}
	YY_BREAK
case 45:
YY_USER_ACTION
# line 177 "idl.ll"
{
		  /* Skip the quotes */
		  char *tmp = ace_yytext;
		  tmp[strlen(tmp)-1] = '\0';
		  yylval.sval = new String(tmp + 1);
		  return IDL_STRING_LITERAL;
	      	}
	YY_BREAK
case 46:
YY_USER_ACTION
# line 184 "idl.ll"
{
		  yylval.cval = ace_yytext [1];
		  return IDL_CHARACTER_LITERAL;
	      	}
	YY_BREAK
case 47:
YY_USER_ACTION
# line 188 "idl.ll"
{
		  // octal character constant
		  yylval.cval = idl_escape_reader(ace_yytext + 1);
		  return IDL_CHARACTER_LITERAL;
		}
	YY_BREAK
case 48:
YY_USER_ACTION
# line 193 "idl.ll"
{
		  yylval.cval = idl_escape_reader(ace_yytext + 1);
		  return IDL_CHARACTER_LITERAL;
		}
	YY_BREAK
case 49:
YY_USER_ACTION
# line 197 "idl.ll"
{/* remember pragma */
  		  idl_global->set_lineno(idl_global->lineno() + 1);
		  idl_store_pragma(ace_yytext);
		}
	YY_BREAK
case 50:
YY_USER_ACTION
# line 201 "idl.ll"
{
		  idl_parse_line_and_file(ace_yytext);
		}
	YY_BREAK
case 51:
YY_USER_ACTION
# line 204 "idl.ll"
{
		  idl_parse_line_and_file(ace_yytext);
		}
	YY_BREAK
case 52:
YY_USER_ACTION
# line 207 "idl.ll"
{
		  idl_parse_line_and_file(ace_yytext);
		}
	YY_BREAK
case 53:
YY_USER_ACTION
# line 210 "idl.ll"
{
		  idl_parse_line_and_file(ace_yytext);
	        }
	YY_BREAK
case 54:
YY_USER_ACTION
# line 213 "idl.ll"
{
		  /* ignore cpp ident */
  		  idl_global->set_lineno(idl_global->lineno() + 1);
		}
	YY_BREAK
case 55:
YY_USER_ACTION
# line 217 "idl.ll"
{
		  /* ignore comments */
  		  idl_global->set_lineno(idl_global->lineno() + 1);
		}
	YY_BREAK
case 56:
YY_USER_ACTION
# line 221 "idl.ll"
{
		  for(;;) {
		    char c = yyinput();
		    if (c == '*') {
		      char next = yyinput();
		      if (next == '/')
			break;
		      else
			yyunput(c, NULL);
	              if (c == '\n')
		        idl_global->set_lineno(idl_global->lineno() + 1);
		    }
	          }
	        }
	YY_BREAK
case 57:
YY_USER_ACTION
# line 235 "idl.ll"
;
	YY_BREAK
case 58:
YY_USER_ACTION
# line 236 "idl.ll"
{
  		  idl_global->set_lineno(idl_global->lineno() + 1);
		}
	YY_BREAK
case 59:
YY_USER_ACTION
# line 239 "idl.ll"
return ace_yytext [0];
	YY_BREAK
case 60:
YY_USER_ACTION
# line 241 "idl.ll"
ECHO;
	YY_BREAK
case YY_STATE_EOF(INITIAL):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = yy_cp - yytext_ptr - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yy_hold_char;

		if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between yy_current_buffer and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yy_n_chars = yy_current_buffer->yy_n_chars;
			yy_current_buffer->yy_input_file = yyin;
			yy_current_buffer->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yy_c_buf_p <= &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yy_c_buf_p = yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state();

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
							yy_cp = yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer() )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yy_did_buffer_switch_on_eof = 0;

				if ( yywrap() )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yy_c_buf_p = yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yy_c_buf_p =
					yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yy_c_buf_p =
				&yy_current_buffer->yy_ch_buf[yy_n_chars];

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of yylex */


/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */

static int yy_get_next_buffer()
	{
	register char *dest = yy_current_buffer->yy_ch_buf;
	register char *source = yytext_ptr - 1; /* copy prev. char, too */
	register int number_to_move, i;
	int ret_val;

	if ( yy_c_buf_p > &yy_current_buffer->yy_ch_buf[yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( yy_current_buffer->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yy_c_buf_p - yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a singled characater, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = yy_c_buf_p - yytext_ptr;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		yy_n_chars = 0;

	else
		{
		int num_to_read =
			yy_current_buffer->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */
#ifdef YY_USES_REJECT
			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );
#else

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = yy_current_buffer;

			int yy_c_buf_p_offset = yy_c_buf_p - b->yy_ch_buf;

			b->yy_buf_size *= 2;
			b->yy_ch_buf = (char *)
				yy_flex_realloc( (void *) b->yy_ch_buf,
						 b->yy_buf_size );

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = yy_current_buffer->yy_buf_size -
						number_to_move - 1;
#endif
			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&yy_current_buffer->yy_ch_buf[number_to_move]),
			yy_n_chars, num_to_read );
		}

	if ( yy_n_chars == 0 )
		{
		if ( number_to_move - YY_MORE_ADJ == 1 )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			yy_current_buffer->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	yy_n_chars += number_to_move;
	yy_current_buffer->yy_ch_buf[yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	yy_current_buffer->yy_ch_buf[yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	/* yytext begins at the second character in yy_ch_buf; the first
	 * character is the one which preceded it before reading in the latest
	 * buffer; it needs to be kept around in case it's a newline, so
	 * yy_get_previous_state() will have with '^' rules active.
	 */

	yytext_ptr = &yy_current_buffer->yy_ch_buf[1];

	return ret_val;
	}


/* yy_get_previous_state - get the state just before the EOB char was reached */

static yy_state_type yy_get_previous_state()
	{
	register yy_state_type yy_current_state;
	register char *yy_cp;

	register char *yy_bp = yytext_ptr;

	yy_current_state = yy_start;
	if ( yy_bp[-1] == '\n' )
		++yy_current_state;

	for ( yy_cp = yytext_ptr + YY_MORE_ADJ; yy_cp < yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yy_last_accepting_state = yy_current_state;
			yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 278 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
	}


/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */

#ifdef YY_USE_PROTOS
static yy_state_type yy_try_NUL_trans( yy_state_type yy_current_state )
#else
static yy_state_type yy_try_NUL_trans( yy_current_state )
yy_state_type yy_current_state;
#endif
	{
	register int yy_is_jam;
	register char *yy_cp = yy_c_buf_p;

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yy_last_accepting_state = yy_current_state;
		yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 278 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 277);

	return yy_is_jam ? 0 : yy_current_state;
	}


#ifdef YY_USE_PROTOS
static void yyunput( int c, register char *yy_bp )
#else
static void yyunput( c, yy_bp )
int c;
register char *yy_bp;
#endif
	{
	register char *yy_cp = yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yy_hold_char;

	if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = yy_n_chars + 2;
		register char *dest = &yy_current_buffer->yy_ch_buf[
					yy_current_buffer->yy_buf_size + 2];
		register char *source =
				&yy_current_buffer->yy_ch_buf[number_to_move];

		while ( source > yy_current_buffer->yy_ch_buf )
			*--dest = *--source;

		yy_cp += dest - source;
		yy_bp += dest - source;
		yy_n_chars = yy_current_buffer->yy_buf_size;

		if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	if ( yy_cp > yy_bp && yy_cp[-1] == '\n' )
		yy_cp[-2] = '\n';

	*--yy_cp = (char) c;


	/* Note: the formal parameter *must* be called "yy_bp" for this
	 * macro to now work correctly.
	 */
	YY_DO_BEFORE_ACTION; /* set up yytext again */
	}


#ifdef __cplusplus
static int yyinput()
#else
static int input()
#endif
	{
	int c;

	*yy_c_buf_p = yy_hold_char;

	if ( *yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yy_c_buf_p < &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			/* This was really a NUL. */
			*yy_c_buf_p = '\0';

		else
			{ /* need more input */
			yytext_ptr = yy_c_buf_p;
			++yy_c_buf_p;

			switch ( yy_get_next_buffer() )
				{
				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap() )
						{
						yy_c_buf_p =
						yytext_ptr + YY_MORE_ADJ;
						return EOF;
						}

					YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yy_c_buf_p = yytext_ptr + YY_MORE_ADJ;
					break;

				case EOB_ACT_LAST_MATCH:
#ifdef __cplusplus
					YY_FATAL_ERROR(
					"unexpected last match in yyinput()" );
#else
					YY_FATAL_ERROR(
					"unexpected last match in input()" );
#endif
				}
			}
		}

	c = *(unsigned char *) yy_c_buf_p;	/* cast for 8-bit char's */
	*yy_c_buf_p = '\0';	/* preserve yytext */
	yy_hold_char = *++yy_c_buf_p;

	return c;
	}


#ifdef YY_USE_PROTOS
void yyrestart( FILE *input_file )
#else
void yyrestart( input_file )
FILE *input_file;
#endif
	{
	if ( ! yy_current_buffer )
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE );

	yy_init_buffer( yy_current_buffer, input_file );
	yy_load_buffer_state();
	}


#ifdef YY_USE_PROTOS
void yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
#else
void yy_switch_to_buffer( new_buffer )
YY_BUFFER_STATE new_buffer;
#endif
	{
	if ( yy_current_buffer == new_buffer )
		return;

	if ( yy_current_buffer )
		{
		/* Flush out information for old buffer. */
		*yy_c_buf_p = yy_hold_char;
		yy_current_buffer->yy_buf_pos = yy_c_buf_p;
		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	yy_current_buffer = new_buffer;
	yy_load_buffer_state();

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yy_did_buffer_switch_on_eof = 1;
	}


#ifdef YY_USE_PROTOS
void yy_load_buffer_state( void )
#else
void yy_load_buffer_state()
#endif
	{
	yy_n_chars = yy_current_buffer->yy_n_chars;
	yytext_ptr = yy_c_buf_p = yy_current_buffer->yy_buf_pos;
	yyin = yy_current_buffer->yy_input_file;
	yy_hold_char = *yy_c_buf_p;
	}


#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_create_buffer( FILE *file, int size )
#else
YY_BUFFER_STATE yy_create_buffer( file, size )
FILE *file;
int size;
#endif
	{
	YY_BUFFER_STATE b;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );

	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yy_flex_alloc( b->yy_buf_size + 2 );

	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	yy_init_buffer( b, file );

	return b;
	}


#ifdef YY_USE_PROTOS
void yy_delete_buffer( YY_BUFFER_STATE b )
#else
void yy_delete_buffer( b )
YY_BUFFER_STATE b;
#endif
	{
	if ( b == yy_current_buffer )
		yy_current_buffer = (YY_BUFFER_STATE) 0;

	yy_flex_free( (void *) b->yy_ch_buf );
	yy_flex_free( (void *) b );
	}


#ifdef YY_USE_PROTOS
void yy_init_buffer( YY_BUFFER_STATE b, FILE *file )
#else
void yy_init_buffer( b, file )
YY_BUFFER_STATE b;
FILE *file;
#endif
	{
	b->yy_input_file = file;

	/* We put in the '\n' and start reading from [1] so that an
	 * initial match-at-newline will be true.
	 */

	b->yy_ch_buf[0] = '\n';
	b->yy_n_chars = 1;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[2] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[1];

	b->yy_is_interactive = file ? isatty( fileno(file) ) : 0;

	b->yy_fill_buffer = 1;

	b->yy_buffer_status = YY_BUFFER_NEW;
	}


#ifdef YY_USE_PROTOS
static void yy_push_state( int new_state )
#else
static void yy_push_state( new_state )
int new_state;
#endif
	{
	if ( yy_start_stack_ptr >= yy_start_stack_depth )
		{
		int new_size;

		yy_start_stack_depth += YY_START_STACK_INCR;
		new_size = yy_start_stack_depth * sizeof( int );

		if ( ! yy_start_stack )
			yy_start_stack = (int *) yy_flex_alloc( new_size );

		else
			yy_start_stack = (int *) yy_flex_realloc(
					(void *) yy_start_stack, new_size );

		if ( ! yy_start_stack )
			YY_FATAL_ERROR(
			"out of memory expanding start-condition stack" );
		}

	yy_start_stack[yy_start_stack_ptr++] = YY_START;

	BEGIN(new_state);
	}


static void yy_pop_state()
	{
	if ( --yy_start_stack_ptr < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN(yy_start_stack[yy_start_stack_ptr]);
	}


static int yy_top_state()
	{
	return yy_start_stack[yy_start_stack_ptr - 1];
	}


#ifdef YY_USE_PROTOS
static void yy_fatal_error( const char msg[] )
#else
static void yy_fatal_error( msg )
char msg[];
#endif
	{
	(void) fprintf( stderr, "%s\n", msg );
	exit( 1 );
	}



/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		yytext[yyleng] = yy_hold_char; \
		yy_c_buf_p = yytext + n - YY_MORE_ADJ; \
		yy_hold_char = *yy_c_buf_p; \
		*yy_c_buf_p = '\0'; \
		yyleng = n; \
		} \
	while ( 0 )


/* Internal utility routines. */

#ifndef yytext_ptr
#ifdef YY_USE_PROTOS
static void yy_flex_strncpy( char *s1, const char *s2, int n )
#else
static void yy_flex_strncpy( s1, s2, n )
char *s1;
const char *s2;
int n;
#endif
	{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
	}
#endif


#ifdef YY_USE_PROTOS
static void *yy_flex_alloc( unsigned int size )
#else
static void *yy_flex_alloc( size )
unsigned int size;
#endif
	{
	return (void *) malloc( size );
	}

#ifdef YY_USE_PROTOS
static void *yy_flex_realloc( void *ptr, unsigned int size )
#else
static void *yy_flex_realloc( ptr, size )
void *ptr;
unsigned int size;
#endif
	{
	return (void *) realloc( ptr, size );
	}

#ifdef YY_USE_PROTOS
static void yy_flex_free( void *ptr )
#else
static void yy_flex_free( ptr )
void *ptr;
#endif
	{
	free( ptr );
	}
# line 241 "idl.ll"

	/* subroutines */

/*
 * Strip down a name to the last component, i.e. everything after the last
 * '/' character
 */
static char *
stripped_name(UTL_String *fn)
{
    char	*n = fn->get_string();
    long	l;

    if (n == NULL)
	return NULL;
    l = strlen(n);
    for (n += l; l > 0 && *n != '/'; l--, n--);
    if (*n == '/') n++;
    return n;
}

/*
 * Parse a #line statement generated by the C preprocessor
 */
static void
idl_parse_line_and_file(char *buf)
{
  char		*r = buf;
  char 		*h;
  UTL_String	*nm;

  /* Skip initial '#' */
  if (*r != '#') 
    return;
  else
    r++;

  /* Check to see if we're running under the screwy Microsoft scheme
  /* of putting #line num instead of #num. */ 

  if (ACE_OS::strncmp (r, "line", 4) == 0)
    r += 5;

  /* Find line number */
  while (*r == ' ' || *r == '\t')
    r++;
  h = r;
  for (; *r != '\0' && *r != ' ' && *r != '\t'; r++)
    continue;
  *r++ = 0;
  idl_global->set_lineno(idl_atoi(h, 10));

  /* Find file name, if present */
  for (; *r != '"'; r++) 
    if (*r == '\n' || *r == '\0')
      return;

  h = ++r;
  for (; *r != '"'; r++)
    continue;
  *r = 0;
  if (*h == '\0')
    idl_global->set_filename(new String("standard input"));
  else
    {
      long i;
      long j;

      // Put Microsoft-style pathnames into a canonical form.
      for (i = 0, j = 0; h[j] != '\0'; i++, j++)
        {
          if (h[j] == '\\' && h[j + 1] == '\\')
            j++;

          h[i] = h[j];
        }
      h[i] = '\0';
      idl_global->set_filename(new String(h));
    }
  idl_global->set_in_main_file(
    (idl_global->filename()->compare(idl_global->real_filename())) ?
    I_TRUE :
    I_FALSE
  );
  /*
   * If it's an import file store the stripped name for the BE to use
   */
  if (!(idl_global->in_main_file()) && idl_global->import()) {
    nm = new UTL_String(stripped_name(idl_global->filename()));
    idl_global->store_include_file_name(nm);
  }
}

/*
 * Store a #pragma line into the list of pragmas
 */
static void
idl_store_pragma(char *buf)
{
  char *cp = buf + 1;
  while(*cp != 'p')
    cp++;
  while(*cp != ' ' && *cp != '\t')
    cp++;
  while(*cp == ' ' || *cp == '\t')
    cp++;
  char pragma[80];
  char *pp = pragma;
  while(*cp != '\n') {
    *pp++ = *cp++;
  }
  *pp = 0;
  if (strcmp(pragma, "import") == 0) {
    idl_global->set_import(I_TRUE);
    return;
  }
  if (strcmp(pragma, "include") == 0) {
    idl_global->set_import(I_FALSE);
    return;
  }
  UTL_StrList *p = idl_global->pragmas();
  if (p == NULL)
    idl_global->set_pragmas(new UTL_StrList(new String(buf), NULL));
  else {
    p->nconc(new UTL_StrList(new String(buf), NULL));
    idl_global->set_pragmas(p);
  }
}

/*
 * idl_atoi - Convert a string of digits into an integer according to base b
 */
static long
idl_atoi(char *s, long b)
{
	long	r = 0;
	long	negative = 0;

	if (*s == '-') {
	  negative = 1;
	  s++;
	}
	if (b == 8 && *s == '0')
	  s++;
	else if (b == 16 && *s == '0' && (*(s + 1) == 'x' || *(s + 1) == 'X'))
	  s += 2;

	for (; *s; s++)
	  if (*s <= '9' && *s >= '0')
	    r = (r * b) + (*s - '0');
	  else if (b > 10 && *s <= 'f' && *s >= 'a')
	    r = (r * b) + (*s - 'a' + 10);
	  else if (b > 10 && *s <= 'F' && *s >= 'A')
	    r = (r * b) + (*s - 'A' + 10);
	  else
	    break;

	if (negative)
	  r *= -1;

	return r;
}

/*
 * Convert a string to a float; atof doesn't seem to work, always.
 */
static double
idl_atof(char *s)
{
	char    *h = s;
	double	d = 0.0;
	double	f = 0.0;
	double	e, k;
	long	neg = 0, negexp = 0;

	ACE_UNUSED_ARG (f);
	ACE_UNUSED_ARG (h);

	if (*s == '-') {
	  neg = 1;
	  s++;
	}
	while (*s >= '0' && *s <= '9') {
		d = (d * 10) + *s - '0';
		s++;
	}
	if (*s == '.') {
		s++;
		e = 10;
		while (*s >= '0' && *s <= '9') {
			d += (*s - '0') / (e * 1.0);
			e *= 10;
			s++;
		}
	}
	if (*s == 'e' || *s == 'E') {
		s++;
		if (*s == '-') {
			negexp = 1;
			s++;
		} else if (*s == '+')
			s++;
		e = 0;
		while (*s >= '0' && *s <= '9') {
			e = (e * 10) + *s - '0';
			s++;
		}
		if (e > 0) {
			for (k = 1; e > 0; k *= 10, e--);
			if (negexp)
				d /= k;
			else
				d *= k;
		}
	}

	if (neg) d *= -1.0;

	return d;
}

/*
 * Convert (some) escaped characters into their ascii values
 */
static char
idl_escape_reader(
    char *str
)
{
    if (str[0] != '\\') {
	return str[0];
    }

    switch (str[1]) {
      case 'n':
	return '\n';
      case 't':
	return '\t';
      case 'v':
	return '\v';
      case 'b':
	return '\b';
      case 'r':
	return '\r';
      case 'f':
	return '\f';
      case 'a':
	return '\a';
      case '\\':
	return '\\';
      case '\?':
	return '?';
      case '\'':
	return '\'';
      case '"':
	return '"';
      case 'x':
	{
	    // hex value
	    for (int i = 2; str[i] != '\0' && isxdigit(str[i]); i++) {
		continue;
	    }
	    char save = str[i];
	    str[i] = '\0';
	    char out = (char)idl_atoi(&str[2], 16);
	    str[i] = save;
	    return out;
	}
	break;
      default:
	// check for octal value
	if (str[1] >= '0' && str[1] <= '7') {
	    for (int i = 1; str[i] >= '0' && str[i] <= '7'; i++) {
		continue;
	    }
	    char save = str[i];
	    str[i] = '\0';
	    char out = (char)idl_atoi(&str[1], 8);
	    str[i] = save;
	    return out;
	} else {
	  return str[1] - 'a';
	}
	break;
    }
}
