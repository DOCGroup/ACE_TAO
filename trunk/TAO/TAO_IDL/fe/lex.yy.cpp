/* A lexical scanner generated by flex */

/* Scanner skeleton version:
 * $Id$
 */

#define FLEX_SCANNER
#define TAO_YY_FLEX_MAJOR_VERSION 2
#define TAO_YY_FLEX_MINOR_VERSION 5



/* cfront 1.2 defines "c_plusplus" instead of "__cplusplus" */
#ifdef c_plusplus
#ifndef __cplusplus
#define __cplusplus
#endif
#endif


#ifdef __cplusplus

#include "ace/OS.h"

/* Use prototypes in function declarations. */
#define TAO_YY_USE_PROTOS

/* The "const" storage-class-modifier is valid. */
#define TAO_YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define TAO_YY_USE_PROTOS
#define TAO_YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef __TURBOC__
 #pragma warn -rch
 #pragma warn -use
#define TAO_YY_USE_CONST
#define TAO_YY_USE_PROTOS
#endif

#ifdef TAO_YY_USE_CONST
#define tao_yyconst const
#else
#define tao_yyconst
#endif


#ifdef TAO_YY_USE_PROTOS
#define TAO_YY_PROTO(proto) proto
#else
#define TAO_YY_PROTO(proto) ()
#endif

/* Returned upon end-of-file. */
#define TAO_YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define TAO_YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN tao_yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The TAO_YYSTATE alias is for lex
 * compatibility.
 */
#define TAO_YY_START ((tao_yy_start - 1) / 2)
#define TAO_YYSTATE TAO_YY_START

/* Action number for EOF rule of a given start state. */
#define TAO_YY_STATE_EOF(state) (TAO_YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define TAO_YY_NEW_FILE tao_yyrestart( tao_yyin )

#define TAO_YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#define TAO_YY_BUF_SIZE 16384

typedef struct tao_yy_buffer_state *TAO_YY_BUFFER_STATE;

extern int tao_yyleng;
extern FILE *tao_yyin, *tao_yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

/* The funky do-while in the following #define is used to turn the definition
 * int a single C statement (which needs a semi-colon terminator).  This
 * avoids problems with code like:
 *
 * 	if ( condition_holds )
 *		tao_yyless( 5 );
 *	else
 *		do_something_else();
 *
 * Prior to using the do-while the compiler would get upset at the
 * "else" because it interpreted the "if" statement as being all
 * done when it reached the ';' after the tao_yyless() call.
 */

/* Return all but the first 'n' matched characters back to the input stream. */

#define tao_yyless(n) \
	do \
		{ \
		/* Undo effects of setting up tao_yytext. */ \
		*tao_yy_cp = tao_yy_hold_char; \
		TAO_YY_RESTORE_TAO_YY_MORE_OFFSET \
		tao_yy_c_buf_p = tao_yy_cp = tao_yy_bp + n - TAO_YY_MORE_ADJ; \
		TAO_YY_DO_BEFORE_ACTION; /* set up tao_yytext again */ \
		} \
	while ( 0 )

#define unput(c) tao_yyunput( c, tao_yytext_ptr )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */
typedef unsigned int tao_yy_size_t;


struct tao_yy_buffer_state
	{
	FILE *tao_yy_input_file;

	char *tao_yy_ch_buf;		/* input buffer */
	char *tao_yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	tao_yy_size_t tao_yy_buf_size;

	/* Number of characters read into tao_yy_ch_buf, not including EOB
	 * characters.
	 */
	int tao_yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int tao_yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int tao_yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int tao_yy_at_bol;

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int tao_yy_fill_buffer;

	int tao_yy_buffer_status;
#define TAO_YY_BUFFER_NEW 0
#define TAO_YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as TAO_YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via tao_yyrestart()), so that the user can continue scanning by
	 * just pointing tao_yyin at a new input file.
	 */
#define TAO_YY_BUFFER_EOF_PENDING 2
	};

static TAO_YY_BUFFER_STATE tao_yy_current_buffer = 0;

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 */
#define TAO_YY_CURRENT_BUFFER tao_yy_current_buffer


/* tao_yy_hold_char holds the character lost when tao_yytext is formed. */
static char tao_yy_hold_char;

static int tao_yy_n_chars;		/* number of characters read into tao_yy_ch_buf */


int tao_yyleng;

/* Points to current character in buffer. */
static char *tao_yy_c_buf_p = (char *) 0;
static int tao_yy_init = 1;		/* whether we need to initialize */
static int tao_yy_start = 0;	/* start state number */

/* Flag which is used to allow tao_yywrap()'s to do buffer switches
 * instead of setting up a fresh tao_yyin.  A bit of a hack ...
 */
static int tao_yy_did_buffer_switch_on_eof;

void tao_yyrestart TAO_YY_PROTO(( FILE *input_file ));

void tao_yy_switch_to_buffer TAO_YY_PROTO(( TAO_YY_BUFFER_STATE new_buffer ));
void tao_yy_load_buffer_state TAO_YY_PROTO(( void ));
TAO_YY_BUFFER_STATE tao_yy_create_buffer TAO_YY_PROTO(( FILE *file, int size ));
void tao_yy_delete_buffer TAO_YY_PROTO(( TAO_YY_BUFFER_STATE b ));
void tao_yy_init_buffer TAO_YY_PROTO(( TAO_YY_BUFFER_STATE b, FILE *file ));
void tao_yy_flush_buffer TAO_YY_PROTO(( TAO_YY_BUFFER_STATE b ));
#define TAO_YY_FLUSH_BUFFER tao_yy_flush_buffer( tao_yy_current_buffer )

TAO_YY_BUFFER_STATE tao_yy_scan_buffer TAO_YY_PROTO(( char *base, tao_yy_size_t size ));
TAO_YY_BUFFER_STATE tao_yy_scan_string TAO_YY_PROTO(( tao_yyconst char *tao_yy_str ));
TAO_YY_BUFFER_STATE tao_yy_scan_bytes TAO_YY_PROTO(( tao_yyconst char *bytes, int len ));

static void *tao_yy_flex_alloc TAO_YY_PROTO(( tao_yy_size_t ));
static void *tao_yy_flex_realloc TAO_YY_PROTO(( void *, tao_yy_size_t ));
static void tao_yy_flex_free TAO_YY_PROTO(( void * ));

#define tao_yy_new_buffer tao_yy_create_buffer

#define tao_yy_set_interactive(is_interactive) \
	{ \
	if ( ! tao_yy_current_buffer ) \
		tao_yy_current_buffer = tao_yy_create_buffer( tao_yyin, TAO_YY_BUF_SIZE ); \
	tao_yy_current_buffer->tao_yy_is_interactive = is_interactive; \
	}

#define tao_yy_set_bol(at_bol) \
	{ \
	if ( ! tao_yy_current_buffer ) \
		tao_yy_current_buffer = tao_yy_create_buffer( tao_yyin, TAO_YY_BUF_SIZE ); \
	tao_yy_current_buffer->tao_yy_at_bol = at_bol; \
	}

#define TAO_YY_AT_BOL() (tao_yy_current_buffer->tao_yy_at_bol)

typedef unsigned char TAO_YY_CHAR;
FILE *tao_yyin = (FILE *) 0, *tao_yyout = (FILE *) 0;
typedef int tao_yy_state_type;
extern char tao_yytext[];


static tao_yy_state_type tao_yy_get_previous_state TAO_YY_PROTO(( void ));
static tao_yy_state_type tao_yy_try_NUL_trans TAO_YY_PROTO(( tao_yy_state_type current_state ));
static int tao_yy_get_next_buffer TAO_YY_PROTO(( void ));
static void tao_yy_fatal_error TAO_YY_PROTO(( tao_yyconst char msg[] ));

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up tao_yytext.
 */
#define TAO_YY_DO_BEFORE_ACTION \
	tao_yytext_ptr = tao_yy_bp; \
	tao_yyleng = (int) (tao_yy_cp - tao_yy_bp); \
	tao_yy_hold_char = *tao_yy_cp; \
	*tao_yy_cp = '\0'; \
	if ( tao_yyleng >= TAO_YYLMAX ) \
		TAO_YY_FATAL_ERROR( "token too large, exceeds TAO_YYLMAX" ); \
	tao_yy_flex_strncpy( tao_yytext, tao_yytext_ptr, tao_yyleng + 1 ); \
	tao_yy_c_buf_p = tao_yy_cp;

#define TAO_YY_NUM_RULES 86
#define TAO_YY_END_OF_BUFFER 87
static tao_yyconst short int tao_yy_accept[441] =
    {   0,
       83,   83,   87,   85,   83,   84,   84,   85,   85,   85,
       85,   85,   58,   54,   85,   85,   85,   50,   50,   50,
       50,   50,   50,   50,   50,   50,   50,   50,   50,   50,
       50,   50,   50,   50,   50,   50,   50,   50,   50,   85,
       84,   83,    0,   59,    0,    0,    0,    0,   57,   53,
       51,   82,    0,   51,   58,    0,    0,    0,   54,   49,
       47,   48,   50,   50,    0,    0,   50,   50,   50,   50,
       50,   50,   50,   50,   50,   50,   50,   50,   50,   50,
       50,   44,   50,   50,   50,   50,   50,   50,   50,   50,
       50,   50,   50,   50,   50,   50,   50,   50,   50,   50,

       50,   50,   50,   50,    0,   77,    0,    0,    0,    0,
        0,    0,    0,    0,   61,    0,   61,    0,    0,   57,
        0,   53,    0,   51,    0,   81,   81,   51,    0,   52,
       56,   50,    0,   60,    0,    0,    0,   50,   50,    1,
       50,   50,   50,   50,   50,   50,   50,   50,   50,   50,
       50,   50,   50,   50,   50,   50,   50,   50,   50,   50,
       50,   45,   50,   50,   50,   50,   50,   50,   50,   50,
       50,   50,   50,   50,   50,   50,   50,   50,   50,    0,
        0,    0,    0,    0,    0,    0,   64,   62,    0,    0,
       55,    0,   51,   52,   50,    0,   65,    0,   41,   50,

       50,   50,   19,   26,   50,   50,   50,   50,   50,   12,
       50,   50,   50,   35,   50,   50,   50,   23,   50,   50,
       50,   50,   50,   50,   50,   50,   50,   50,   50,   50,
       50,   50,   50,   50,   50,   50,   50,   30,   50,   50,
        0,    0,    0,    0,    0,    0,    0,   78,    0,    0,
        0,    0,    0,    0,   62,    0,   63,    0,   42,    0,
        0,   50,   50,   50,    9,   50,   50,   50,   50,   50,
       17,   21,   43,   50,   32,   50,   50,   29,   50,   50,
       50,   50,   50,   50,   24,   50,   50,   50,   50,   50,
       50,   16,   50,   50,   27,   50,   73,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,   66,
        0,   50,   50,   50,   50,   34,   50,   22,   50,   50,
        2,   31,   46,   50,   37,    3,   50,   50,   13,   11,
       50,   18,   50,   50,   50,   50,   50,    0,   71,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,   50,   50,   28,    7,   20,   50,   50,
       36,   50,   50,   50,   50,   10,   50,   50,   14,    0,
        0,   69,   69,    0,    0,   75,    0,    0,   74,    0,
        0,    0,    0,    0,    0,    0,   33,   50,   50,   50,
        4,   15,   38,   50,   25,   50,    0,   79,   79,    0,

        0,    0,    0,   72,    0,    0,    0,    0,    0,    0,
        0,    5,    6,    8,   50,   40,    0,   67,   67,    0,
        0,   70,   70,    0,    0,    0,    0,   50,    0,   80,
       80,    0,    0,    0,   39,   76,    0,   68,   68,    0
    } ;

static tao_yyconst int tao_yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    5,    1,    6,    7,    1,    1,    1,    8,    1,
        1,    9,   10,    1,   11,   12,   13,   14,   15,   15,
       15,   15,   15,   15,   15,   16,   16,   17,    1,   18,
       19,   20,   21,    1,   22,   23,   23,   23,   24,   25,
       26,   26,   26,   26,   26,   27,   26,   26,   26,   26,
       26,   28,   29,   30,   31,   26,   26,   32,   26,   26,
        1,   33,    1,    1,   26,    1,   34,   35,   36,   37,

       38,   39,   40,   41,   42,   26,   26,   43,   44,   45,
       46,   47,   48,   49,   50,   51,   52,   53,   54,   55,
       56,   26,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static tao_yyconst int tao_yy_meta[57] =
    {   0,
        1,    1,    2,    1,    1,    3,    1,    4,    1,    1,
        1,    1,    1,    5,    5,    5,    1,    1,    1,    1,
        3,    5,    5,    5,    5,    6,    6,    6,    6,    6,
        6,    6,    3,    7,    7,    5,    5,    5,    7,    6,
        6,    6,    6,    6,    8,    6,    6,    6,    8,    6,
        8,    6,    8,    6,    6,    6
    } ;

static tao_yyconst short int tao_yy_base[468] =
    {   0,
        0,   50,  918,  919,   56,  919,  919,   53,  884,   48,
       51,   59,   61,   66,  899,  897,  894,    0,  891,   81,
      884,   49,  865,   57,   50,   24,   59,  865,  863,  862,
      873,   61,   43,   36,   67,   58,  861,   76,   75,  124,
      884,  110,  111,  919,    0,  896,  122,  117,  136,  141,
      178,  919,  120,  166,  171,  184,  196,    0,  211,  919,
      919,  919,    0,  876,  114,  869,  870,  850,  843,  847,
      851,  846,  861,  849,  843,  853,  839,  838,  853,  833,
      841,  127,   98,  849,  834,  833,  845,  831,  839,  845,
      837,  844,  829,  830,  826,  827,  831,  820,  824,  120,

      827,  827,  827,  816,  823,  919,  129,  215,  823,  827,
      821,  813,  842,  143,  919,  852,  851,  224,  850,  228,
        0,  239,  246,  919,  243,  919,  255,    0,  174,  253,
        0,  828,  191,  919,  804,  847,  176,  830,  802,    0,
      803,  808,  812,  800,  108,  797,  813,  811,  801,  806,
      805,  808,  790,  788,  801,  804,  797,  784,  793,  796,
      779,    0,  779,  788,  780,  792,  776,  778,  162,  779,
      774,  779,  785,  776,  779,  768,  782,  784,  768,  810,
      809,  771,  775,  767,  777,  295,  919,  919,  257,  802,
        0,  259,  279,  919,  785,    0,  919,    0,    0,  759,

      765,  768,    0,    0,  754,  766,  757,  750,  758,    0,
      753,  762,  747,    0,  746,  747,  752,    0,  751,  740,
      741,  757,  756,  747,  750,  741,  748,  734,  739,  747,
      736,  745,  744,  742,  733,  737,  738,    0,  726,  732,
      767,  280,  734,  726,  732,  729,  725,  919,  158,  309,
      725,  729,  723,  715,  919,  755,  919,  754,    0,  337,
      753,  726,  724,  724,    0,  702,  712,  712,  716,  702,
        0,    0,    0,  656,    0,  645,  633,    0,  611,  613,
      625,  599,  601,  592,    0,  586,  559,  557,  564,  558,
      543,    0,  534,  527,    0,  531,  919,  342,  232,  524,

      334,  530,  567,  566,  528,  532,  524,  534,  363,  919,
      558,  521,  503,  508,  500,    0,  481,    0,  487,  485,
        0,    0,    0,  473,    0,    0,  467,  468,    0,    0,
      442,    0,  429,  417,  416,  397,  404,  389,  919,  404,
      284,  243,  412,  427,  390,  410,  286,  377,  366,  352,
      349,  435,  375,  330,  329,    0,    0,    0,  323,  332,
        0,  299,  316,  291,  306,    0,  296,  280,    0,  431,
      299,  919,  361,  363,  434,  919,  315,  277,  919,  461,
      324,  268,  476,  273,  275,  307,    0,  248,  225,  212,
        0,    0,    0,  206,    0,  195,  392,  919,  458,  209,

      464,  480,  484,  919,  492,  499,  326,  507,  512,  407,
      179,    0,    0,    0,  132,    0,  512,  919,  521,  531,
      527,  919,  533,  535,  155,  140,  330,  104,  537,  919,
      540,   77,  546,  556,    0,  919,  559,  919,  561,  919,
      582,  590,  594,  600,  608,  616,  620,  627,  635,  640,
      643,  650,  655,  658,  661,  665,  672,  677,  684,  689,
      696,  704,  712,  720,  728,  736,  744
    } ;

static tao_yyconst short int tao_yy_def[468] =
    {   0,
      440,    1,  440,  440,  440,  440,  440,  441,  442,  440,
      440,  440,  440,  440,  440,  440,  440,  443,  443,  443,
      443,  443,  443,  443,  443,  443,  443,  443,  443,  443,
      443,  443,  443,  443,  443,  443,  443,  443,  443,  440,
      440,  440,  441,  440,  444,  440,  445,  440,  440,  440,
      440,  440,  446,   51,  440,  440,  440,  447,  440,  440,
      440,  440,  443,  443,  448,  449,  443,  443,  443,  443,
      443,  443,  443,  443,  443,  443,  443,  443,  443,  443,
      443,  443,  443,  443,  443,  443,  443,  443,  443,  443,
      443,  443,  443,  443,  443,  443,  443,  443,  443,  443,

      443,  443,  443,  443,   40,  440,   40,  440,  440,  440,
      440,  440,  440,  441,  440,  440,  440,  440,  450,  440,
      451,  440,  440,  440,  446,  440,  446,   54,  440,  440,
      447,  443,  448,  440,  440,  440,  440,  443,  443,  443,
      443,  443,  443,  443,  443,  443,  443,  443,  443,  443,
      443,  443,  443,  443,  443,  443,  443,  443,  443,  443,
      443,  443,  443,  443,  443,  443,  443,  443,  443,  443,
      443,  443,  443,  443,  443,  443,  443,  443,  443,  452,
      440,  440,  440,  440,  440,  440,  440,  440,  440,  453,
      451,  440,  440,  440,  443,  454,  440,  455,  443,  443,

      443,  443,  443,  443,  443,  443,  443,  443,  443,  443,
      443,  443,  443,  443,  443,  443,  443,  443,  443,  443,
      443,  443,  443,  443,  443,  443,  443,  443,  443,  443,
      443,  443,  443,  443,  443,  443,  443,  443,  443,  443,
      452,  440,  440,  440,  440,  440,  186,  440,  186,  440,
      440,  440,  440,  440,  440,  440,  440,  440,  443,  448,
      456,  443,  443,  443,  443,  443,  443,  443,  443,  443,
      443,  443,  443,  443,  443,  443,  443,  443,  443,  443,
      443,  443,  443,  443,  443,  443,  443,  443,  443,  443,
      443,  443,  443,  443,  443,  443,  440,  440,  440,  440,

      440,  440,  457,  440,  440,  440,  440,  440,  260,  440,
      458,  443,  443,  443,  443,  443,  443,  443,  443,  443,
      443,  443,  443,  443,  443,  443,  443,  443,  443,  443,
      443,  443,  443,  443,  443,  443,  443,  440,  440,  440,
      459,  440,  440,  440,  440,  457,  440,  440,  440,  440,
      440,  260,  460,  443,  443,  443,  443,  443,  443,  443,
      443,  443,  443,  443,  443,  443,  443,  443,  443,  440,
      459,  440,  459,  461,  440,  440,  462,  440,  440,  440,
      440,  440,  440,  440,  448,  440,  443,  443,  443,  443,
      443,  443,  443,  443,  443,  443,  461,  440,  461,  462,

      440,  463,  440,  440,  440,  464,  440,  440,  440,  440,
      440,  443,  443,  443,  443,  443,  463,  440,  463,  440,
      464,  440,  464,  465,  466,  440,  440,  443,  465,  440,
      465,  466,  440,  467,  443,  440,  467,  440,  467,    0,
      440,  440,  440,  440,  440,  440,  440,  440,  440,  440,
      440,  440,  440,  440,  440,  440,  440,  440,  440,  440,
      440,  440,  440,  440,  440,  440,  440
    } ;

static tao_yyconst short int tao_yy_nxt[976] =
    {   0,
        4,    5,    6,    7,    5,    8,    4,    9,    4,    4,
       10,   11,   12,   13,   14,   14,   15,   16,    4,   17,
        7,   18,   18,   18,   19,   18,   20,   18,   18,   21,
       18,   18,    4,   22,   23,   24,   25,   26,   27,   18,
       18,   28,   29,   30,   31,   32,   33,   18,   34,   35,
       36,   37,   38,   39,   18,   18,   40,   42,   44,   48,
       42,   49,   50,   50,   51,   51,   51,   52,   78,   91,
       41,   53,   54,   92,   55,   55,   56,   54,   79,   59,
       59,   59,  433,   68,   57,   45,   65,   76,   66,   57,
       72,   89,   58,   69,   90,   77,   86,   73,   57,   70,

       80,   81,   74,   57,   93,   87,   98,   94,   75,  101,
      103,   42,   88,   99,   42,   58,   44,   95,   96,  134,
       97,  102,  126,  127,  104,  105,  106,  106,  107,  117,
       51,   51,   51,  156,  180,  118,  118,  108,  108,  108,
      127,  435,  157,   45,  106,  425,  135,   54,   44,  120,
      120,   56,   54,  119,  122,  122,  122,  205,  206,   57,
      433,  174,  109,  303,   57,  110,  111,  121,  153,  175,
      112,  440,  154,   57,  428,   45,  119,  155,   57,  128,
      128,  128,   54,  197,   55,   55,   56,  130,  130,  130,
      121,   51,   51,   51,   57,   54,  134,   56,   56,   56,

      440,  123,  124,  229,  124,  129,  129,   57,   57,  130,
      130,  130,  427,  230,  401,  123,  124,  106,  106,  181,
      124,   57,   54,  135,   59,   59,   59,  198,  108,  108,
      108,  188,  416,  341,   57,  106,  341,  189,  189,   54,
      415,  120,  120,   56,  374,  126,  127,  374,   57,  414,
       54,   57,  122,  122,  122,  192,  192,  126,  127,  193,
      193,  193,   57,  127,  255,   57,  130,  130,  130,  413,
      256,  256,  193,  193,  193,  127,   57,  194,  402,  194,
      134,  402,  297,  297,  298,  412,  372,  373,  379,  379,
      380,  194,  193,  193,  193,  194,  247,  248,  248,  249,

      297,  372,  373,  124,  373,  124,  379,  135,  250,  250,
      250,  248,  248,  304,  310,  248,  411,  124,  407,  373,
      401,  124,  250,  250,  250,  406,  396,  424,  406,  248,
      424,  434,  395,  251,  434,  343,  252,  253,  343,  394,
      393,  254,  134,  338,  339,  339,  338,  344,  344,  344,
      309,  309,  309,  392,  391,  340,  340,  340,  309,  309,
      309,  309,  339,  372,  373,  398,  399,  390,  389,  135,
      309,  309,  309,  309,  309,  309,  352,  352,  352,  388,
      387,  373,  310,  399,  352,  352,  352,  352,  384,  383,
      338,  339,  339,  338,  398,  399,  352,  352,  352,  352,

      352,  352,  370,  370,  370,  338,  339,  339,  338,  339,
      382,  426,  399,  343,  381,  347,  343,  340,  340,  340,
      410,  410,  410,  378,  339,  344,  344,  344,  375,  376,
      376,  375,  377,  339,  339,  375,  376,  376,  375,  377,
      344,  344,  344,  369,  370,  370,  370,  376,  385,  385,
      385,  339,  368,  367,  376,  366,  385,  385,  385,  385,
      398,  399,  403,  404,  404,  403,  376,  376,  385,  385,
      385,  385,  385,  385,  405,  405,  405,  408,  399,  365,
      409,  404,  418,  419,  376,  403,  404,  404,  403,  410,
      410,  410,  364,  403,  404,  404,  403,  420,  420,  420,

      419,  422,  423,  363,  404,  405,  405,  405,  408,  362,
      361,  409,  404,  408,  418,  419,  409,  425,  360,  423,
      410,  410,  410,  418,  419,  410,  410,  410,  359,  422,
      423,  358,  419,  404,  404,  422,  423,  430,  431,  430,
      431,  419,  430,  431,  420,  420,  420,  423,  436,  436,
      357,  404,  356,  423,  355,  431,  354,  431,  438,  439,
      431,  438,  439,  438,  439,  310,  436,  351,  350,  349,
      348,  303,  347,  345,  342,  337,  439,  336,  335,  439,
      334,  439,   43,   43,   43,   43,   43,   43,   43,   43,
       46,  333,   46,   46,   46,   46,   46,   46,   63,   63,

       63,   63,  114,  114,  332,  331,  114,  114,  116,  330,
      116,  116,  116,  116,  116,  116,  125,  125,  125,  125,
      125,  125,  125,  125,  131,  329,  131,  133,  133,  133,
      133,  133,  133,  133,  133,  136,  328,  136,  136,  136,
      136,  136,  136,  190,  190,  327,  190,  191,  326,  191,
      241,  241,  241,  241,  241,  241,  241,  241,  258,  258,
      325,  258,  260,  324,  260,  261,  323,  261,  311,  311,
      322,  311,  346,  346,  346,  346,  346,  346,  346,  346,
      353,  353,  321,  353,  371,  371,  371,  371,  371,  371,
      371,  371,  386,  386,  320,  386,  397,  397,  397,  397,

      397,  397,  397,  397,  400,  400,  400,  400,  400,  400,
      400,  400,  417,  417,  417,  417,  417,  417,  417,  417,
      421,  421,  421,  421,  421,  421,  421,  421,  429,  429,
      429,  429,  429,  429,  429,  429,  432,  432,  432,  432,
      432,  432,  432,  432,  437,  437,  437,  437,  437,  437,
      437,  437,  319,  318,  317,  316,  315,  314,  313,  312,
      310,  257,  255,  308,  307,  306,  305,  440,  302,  301,
      300,  299,  242,  296,  295,  294,  293,  292,  291,  290,
      289,  288,  287,  286,  285,  284,  283,  282,  281,  280,
      279,  278,  277,  276,  275,  274,  273,  272,  271,  270,

      269,  268,  267,  266,  265,  264,  263,  262,  259,  257,
      246,  245,  244,  243,  180,  242,  240,  239,  238,  237,
      236,  235,  234,  233,  232,  231,  228,  227,  226,  225,
      224,  223,  222,  221,  220,  219,  218,  217,  216,  215,
      214,  213,  212,  211,  210,  209,  208,  207,  204,  203,
      202,  201,  200,  199,  197,  196,  195,  187,  187,  187,
      186,  185,  184,  183,  182,  440,  179,  178,  177,  176,
      173,  172,  171,  170,  169,  168,  167,  166,  165,  164,
      163,  162,  161,  160,  159,  158,  152,  151,  150,  149,
      148,  147,  146,  145,  144,  143,  142,  141,  140,  139,

      138,  137,  132,  115,  113,  100,   85,   84,   83,   82,
       71,   67,   64,   62,   61,   60,   47,  440,    3,  440,
      440,  440,  440,  440,  440,  440,  440,  440,  440,  440,
      440,  440,  440,  440,  440,  440,  440,  440,  440,  440,
      440,  440,  440,  440,  440,  440,  440,  440,  440,  440,
      440,  440,  440,  440,  440,  440,  440,  440,  440,  440,
      440,  440,  440,  440,  440,  440,  440,  440,  440,  440,
      440,  440,  440,  440,  440
    } ;

static tao_yyconst short int tao_yy_chk[976] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    2,    5,    8,   10,
        5,   10,   10,   10,   11,   11,   11,   12,   26,   34,
        2,   12,   13,   34,   13,   13,   13,   14,   26,   14,
       14,   14,  432,   22,   13,    8,   20,   25,   20,   14,
       24,   33,   13,   22,   33,   25,   32,   24,   13,   22,

       27,   27,   24,   14,   35,   32,   36,   35,   24,   38,
       39,   42,   32,   36,   42,   13,   43,   35,   35,   65,
       35,   38,   53,   53,   39,   40,   40,   40,   40,   47,
       48,   48,   48,   83,  107,   47,   47,   40,   40,   40,
       53,  428,   83,   43,   40,  426,   65,   49,  114,   49,
       49,   49,   50,   47,   50,   50,   50,  145,  145,   49,
      425,  100,   40,  249,   50,   40,   40,   49,   82,  100,
       40,  107,   82,   49,  415,  114,   47,   82,   50,   54,
       54,   54,   55,  137,   55,   55,   55,  129,  129,  129,
       49,   51,   51,   51,   55,   56,  133,   56,   56,   56,

      249,   51,   51,  169,   51,   57,   57,   56,   55,   57,
       57,   57,  411,  169,  400,   51,   51,  108,  108,  108,
       51,   56,   59,  133,   59,   59,   59,  137,  108,  108,
      108,  118,  396,  299,   59,  108,  299,  118,  118,  120,
      394,  120,  120,  120,  342,  125,  125,  342,   59,  390,
      122,  120,  122,  122,  122,  123,  123,  127,  127,  123,
      123,  123,  122,  125,  189,  120,  130,  130,  130,  389,
      189,  189,  192,  192,  192,  127,  122,  130,  378,  130,
      385,  378,  242,  242,  242,  388,  341,  341,  347,  347,
      347,  130,  193,  193,  193,  130,  186,  186,  186,  186,

      242,  371,  371,  193,  341,  193,  347,  385,  186,  186,
      186,  250,  250,  250,  386,  186,  384,  193,  382,  371,
      377,  193,  250,  250,  250,  381,  368,  407,  381,  250,
      407,  427,  367,  186,  427,  301,  186,  186,  301,  365,
      364,  186,  260,  298,  298,  298,  298,  301,  301,  301,
      260,  260,  260,  363,  362,  298,  298,  298,  260,  260,
      260,  260,  298,  373,  373,  374,  374,  360,  359,  260,
      260,  260,  260,  260,  260,  260,  309,  309,  309,  355,
      354,  373,  353,  374,  309,  309,  309,  309,  351,  350,
      338,  338,  338,  338,  397,  397,  309,  309,  309,  309,

      309,  309,  338,  338,  338,  340,  340,  340,  340,  338,
      349,  410,  397,  343,  348,  346,  343,  340,  340,  340,
      410,  410,  410,  345,  340,  343,  343,  343,  344,  344,
      344,  344,  344,  370,  370,  375,  375,  375,  375,  375,
      344,  344,  344,  337,  370,  370,  370,  344,  352,  352,
      352,  370,  336,  335,  375,  334,  352,  352,  352,  352,
      399,  399,  380,  380,  380,  380,  401,  401,  352,  352,
      352,  352,  352,  352,  380,  380,  380,  383,  399,  333,
      383,  380,  402,  402,  401,  403,  403,  403,  403,  383,
      383,  383,  331,  405,  405,  405,  405,  403,  403,  403,

      402,  406,  406,  328,  403,  405,  405,  405,  408,  327,
      324,  408,  405,  409,  417,  417,  409,  409,  320,  406,
      408,  408,  408,  419,  419,  409,  409,  409,  319,  421,
      421,  317,  417,  420,  420,  423,  423,  424,  424,  429,
      429,  419,  431,  431,  420,  420,  420,  421,  433,  433,
      315,  420,  314,  423,  313,  424,  312,  429,  434,  434,
      431,  437,  437,  439,  439,  311,  433,  308,  307,  306,
      305,  304,  303,  302,  300,  296,  434,  294,  293,  437,
      291,  439,  441,  441,  441,  441,  441,  441,  441,  441,
      442,  290,  442,  442,  442,  442,  442,  442,  443,  443,

      443,  443,  444,  444,  289,  288,  444,  444,  445,  287,
      445,  445,  445,  445,  445,  445,  446,  446,  446,  446,
      446,  446,  446,  446,  447,  286,  447,  448,  448,  448,
      448,  448,  448,  448,  448,  449,  284,  449,  449,  449,
      449,  449,  449,  450,  450,  283,  450,  451,  282,  451,
      452,  452,  452,  452,  452,  452,  452,  452,  453,  453,
      281,  453,  454,  280,  454,  455,  279,  455,  456,  456,
      277,  456,  457,  457,  457,  457,  457,  457,  457,  457,
      458,  458,  276,  458,  459,  459,  459,  459,  459,  459,
      459,  459,  460,  460,  274,  460,  461,  461,  461,  461,

      461,  461,  461,  461,  462,  462,  462,  462,  462,  462,
      462,  462,  463,  463,  463,  463,  463,  463,  463,  463,
      464,  464,  464,  464,  464,  464,  464,  464,  465,  465,
      465,  465,  465,  465,  465,  465,  466,  466,  466,  466,
      466,  466,  466,  466,  467,  467,  467,  467,  467,  467,
      467,  467,  270,  269,  268,  267,  266,  264,  263,  262,
      261,  258,  256,  254,  253,  252,  251,  247,  246,  245,
      244,  243,  241,  240,  239,  237,  236,  235,  234,  233,
      232,  231,  230,  229,  228,  227,  226,  225,  224,  223,
      222,  221,  220,  219,  217,  216,  215,  213,  212,  211,

      209,  208,  207,  206,  205,  202,  201,  200,  195,  190,
      185,  184,  183,  182,  181,  180,  179,  178,  177,  176,
      175,  174,  173,  172,  171,  170,  168,  167,  166,  165,
      164,  163,  161,  160,  159,  158,  157,  156,  155,  154,
      153,  152,  151,  150,  149,  148,  147,  146,  144,  143,
      142,  141,  139,  138,  136,  135,  132,  119,  117,  116,
      113,  112,  111,  110,  109,  105,  104,  103,  102,  101,
       99,   98,   97,   96,   95,   94,   93,   92,   91,   90,
       89,   88,   87,   86,   85,   84,   81,   80,   79,   78,
       77,   76,   75,   74,   73,   72,   71,   70,   69,   68,

       67,   66,   64,   46,   41,   37,   31,   30,   29,   28,
       23,   21,   19,   17,   16,   15,    9,    3,  440,  440,
      440,  440,  440,  440,  440,  440,  440,  440,  440,  440,
      440,  440,  440,  440,  440,  440,  440,  440,  440,  440,
      440,  440,  440,  440,  440,  440,  440,  440,  440,  440,
      440,  440,  440,  440,  440,  440,  440,  440,  440,  440,
      440,  440,  440,  440,  440,  440,  440,  440,  440,  440,
      440,  440,  440,  440,  440
    } ;

static tao_yy_state_type tao_yy_last_accepting_state;
static char *tao_yy_last_accepting_cpos;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define tao_yymore() tao_yymore_used_but_not_detected
#define TAO_YY_MORE_ADJ 0
#define TAO_YY_RESTORE_TAO_YY_MORE_OFFSET
#ifndef TAO_YYLMAX
#define TAO_YYLMAX 8192
#endif

char tao_yytext[TAO_YYLMAX];
char *tao_yytext_ptr;
#line 1 "fe/idl.ll"
#define INITIAL 0
#line 2 "fe/idl.ll"
/*  $Id: idl.ll,v 1.52 2001/01/24 22:41:00 parsons Exp $

COPYRIGHT

Copyright 1992, 1993, 1994 Sun Microsystems, Inc.  Printed in the United
States of America.  All Rights Reserved.

This product is protected by copyright and distributed under the following
license restricting its use.

The Interface Definition Language Compiler Front End (CFE) is made
available for your use provided that you include this license and copyright
notice on all media and documentation and the software program in which
this product is incorporated in whole or part. You may copy and extend
functionality (but may not remove functionality) of the Interface
Definition Language CFE without charge, but you are not authorized to
license or distribute it to anyone else except as part of a product or
program developed by you or with the express written consent of Sun
Microsystems, Inc. ("Sun").

The names of Sun Microsystems, Inc. and any of its subsidiaries or
affiliates may not be used in advertising or publicity pertaining to
distribution of Interface Definition Language CFE as permitted herein.

This license is effective until terminated by Sun for failure to comply
with this license.  Upon termination, you shall destroy or return all code
and documentation for the Interface Definition Language CFE.

IDL_INTERFACE DEFINITION LANGUAGE CFE IS PROVIDED AS IS WITH NO WARRANTIES OF
IDL_ANY KIND INCLUDING THE WARRANTIES OF DESIGN, MERCHANTIBILITY AND FITNESS
FOR A PARTICULAR PURPOSE, NONINFRINGEMENT, OR ARISING FROM A COURSE OF
DEALING, USAGE OR TRADE PRACTICE.

IDL_INTERFACE DEFINITION LANGUAGE CFE IS PROVIDED WITH NO SUPPORT AND WITHOUT
IDL_ANY OBLIGATION ON THE PART OF Sun OR IDL_ANY OF ITS SUBSIDIARIES OR AFFILIATES
TO ASSIST IDL_IN ITS USE, CORRECTION, MODIFICATION OR ENHANCEMENT.

SUN OR IDL_ANY OF ITS SUBSIDIARIES OR AFFILIATES SHALL HAVE NO LIABILITY WITH
RESPECT TO THE INFRINGEMENT OF COPYRIGHTS, TRADE SECRETS OR IDL_ANY PATENTS BY
IDL_INTERFACE DEFINITION LANGUAGE CFE OR IDL_ANY PART THEREOF.

IDL_IN NO EVENT WILL SUN OR IDL_ANY OF ITS SUBSIDIARIES OR AFFILIATES BE LIABLE FOR
IDL_ANY LOST REVENUE OR PROFITS OR OTHER SPECIAL, INDIRECT AND CONSEQUENTIAL
DAMAGES, EVEN IF SUN HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.

Use, duplication, or disclosure by the government is subject to
restrictions as set forth in subparagraph (c)(1)(ii) of the Rights in
Technical Data and Computer Software clause at DFARS 252.227-7013 and FAR
52.227-19.

Sun, Sun Microsystems and the Sun logo are trademarks or registered
trademarks of Sun Microsystems, Inc.

SunSoft, Inc.
2550 Garcia Avenue
Mountain View, California  94043

NOTE:

SunOS, SunSoft, Sun, Solaris, Sun Microsystems or the Sun logo are
trademarks or registered trademarks of Sun Microsystems, Inc.

 */

/*
 * idl.ll - Lexical scanner for IDL 1.1
 */

#include "idl.h"
#include "idl_extern.h"
#include "fe_private.h"
#include "y.tab.h"

static char *		idl_wstring_escape_reader(char *);
static ACE_CDR::WChar	idl_wchar_escape_reader(char *);
static char		idl_escape_reader(char *);
static double		idl_atof(char *);
static long		idl_atoi(char *, long);
static unsigned long	idl_atoui(char *, long);
static void		idl_parse_line_and_file(char *);
static void		idl_store_pragma(char *);

#if 0 /* defined (HPUX) */
// HPUX has tao_yytext typed to unsigned char *. We make sure here that
// we'll always use char * static char* __tao_yytext = (char*) tao_yytext;
// NOTE: This will not work under flex(1) were tao_yytext is not a fixed
// buffer, but a dynamically allocated one. This function should do
// the trick for us.
inline char *__tao_yytext()
{
  return (char *) tao_yytext;
}
#define ace_tao_yytext __tao_yytext()
#else
#define ace_tao_yytext tao_yytext
#endif /* 0 */

static int scan_obv_token (int token)
{
#ifdef IDL_HAS_VALUETYPE
    if (idl_global->obv_support ())
      {
        return token;
      }
#endif /* IDL_HAS_VALUETYPE */
    TAO_IDL_CPP_Keyword_Table cpp_key_tbl;
    const TAO_IDL_CPP_Keyword_Entry *entry =
      cpp_key_tbl.lookup (ace_tao_yytext,
                          ACE_OS::strlen (ace_tao_yytext));
    if (entry)
      tao_yylval.strval = ACE_OS::strdup (entry->mapping_);
    else
      tao_yylval.strval = ACE_OS::strdup (ace_tao_yytext);
    return IDENTIFIER;
}

/* SO we don't choke on files that use \r\n */
#define TAO_YY_NEVER_INTERACTIVE 1

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef TAO_YY_SKIP_TAO_YYWRAP
#ifdef __cplusplus
extern "C" int tao_yywrap TAO_YY_PROTO(( void ));
#else
extern int tao_yywrap TAO_YY_PROTO(( void ));
#endif
#endif

#ifndef TAO_YY_NO_UNPUT
static void tao_yyunput TAO_YY_PROTO(( int c, char *buf_ptr ));
#endif

#ifndef tao_yytext_ptr
static void tao_yy_flex_strncpy TAO_YY_PROTO(( char *, tao_yyconst char *, int ));
#endif

#ifdef TAO_YY_NEED_STRLEN
static int tao_yy_flex_strlen TAO_YY_PROTO(( tao_yyconst char * ));
#endif

#ifndef TAO_YY_NO_INPUT
#ifdef __cplusplus
static int tao_yyinput TAO_YY_PROTO(( void ));
#else
static int input TAO_YY_PROTO(( void ));
#endif
#endif

#if TAO_YY_STACK_USED
static int tao_yy_start_stack_ptr = 0;
static int tao_yy_start_stack_depth = 0;
static int *tao_yy_start_stack = 0;
#ifndef TAO_YY_NO_PUSH_STATE
static void tao_yy_push_state TAO_YY_PROTO(( int new_state ));
#endif
#ifndef TAO_YY_NO_POP_STATE
static void tao_yy_pop_state TAO_YY_PROTO(( void ));
#endif
#ifndef TAO_YY_NO_TOP_STATE
static int tao_yy_top_state TAO_YY_PROTO(( void ));
#endif

#else
#define TAO_YY_NO_PUSH_STATE 1
#define TAO_YY_NO_POP_STATE 1
#define TAO_YY_NO_TOP_STATE 1
#endif

#ifdef TAO_YY_MALLOC_DECL
TAO_YY_MALLOC_DECL
#else
#if __STDC__
#ifndef __cplusplus
#endif
#else
/* Just try to get by without declaring the routines.  This will fail
 * miserably on non-ANSI systems for which sizeof(size_t) != sizeof(int)
 * or sizeof(void*) != sizeof(int).
 */
#endif
#endif

/* Amount of stuff to slurp up with each read. */
#ifndef TAO_YY_READ_BUF_SIZE
#define TAO_YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */

#ifndef TAO_YY_ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define TAO_YY_ECHO (void) fwrite( tao_yytext, tao_yyleng, 1, tao_yyout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or TAO_YY_NULL,
 * is returned in "result".
 */
#ifndef TAO_YY_INPUT
#define TAO_YY_INPUT(buf,result,max_size) \
	if ( tao_yy_current_buffer->tao_yy_is_interactive ) \
		{ \
		int c = '*', n; \
		for ( n = 0; n < max_size && \
			     (c = getc( tao_yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( tao_yyin ) ) \
			TAO_YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else if ( ((result = fread( buf, 1, max_size, tao_yyin )) == 0) \
		  && ferror( tao_yyin ) ) \
		TAO_YY_FATAL_ERROR( "input in flex scanner failed" );
#endif

/* No semi-colon after return; correct usage is to write "tao_yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef tao_yyterminate
#define tao_yyterminate() return TAO_YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef TAO_YY_START_STACK_INCR
#define TAO_YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef TAO_YY_FATAL_ERROR
#define TAO_YY_FATAL_ERROR(msg) tao_yy_fatal_error( msg )
#endif

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef TAO_YY_DECL
#define TAO_YY_DECL int tao_yylex TAO_YY_PROTO(( void ))
#endif

/* Code executed at the beginning of each rule, after tao_yytext and tao_yyleng
 * have been set up.
 */
#ifndef TAO_YY_USER_ACTION
#define TAO_YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef TAO_YY_BREAK
#define TAO_YY_BREAK ACE_NOTREACHED (break;)
#endif

#define TAO_YY_RULE_SETUP \
	if ( tao_yyleng > 0 ) \
		tao_yy_current_buffer->tao_yy_at_bol = \
				(tao_yytext[tao_yyleng - 1] == '\n'); \
	TAO_YY_USER_ACTION

TAO_YY_DECL
	{
	register tao_yy_state_type tao_yy_current_state;
	register char *tao_yy_cp = 0, *tao_yy_bp = 0;
	register int tao_yy_act;

#line 126 "fe/idl.ll"



	if ( tao_yy_init )
		{
		tao_yy_init = 0;

#ifdef TAO_YY_USER_INIT
		TAO_YY_USER_INIT;
#endif

		if ( ! tao_yy_start )
			tao_yy_start = 1;	/* first start state */

		if ( ! tao_yyin )
			tao_yyin = stdin;

		if ( ! tao_yyout )
			tao_yyout = stdout;

		if ( ! tao_yy_current_buffer )
			tao_yy_current_buffer =
				tao_yy_create_buffer( tao_yyin, TAO_YY_BUF_SIZE );

		tao_yy_load_buffer_state();
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		tao_yy_cp = tao_yy_c_buf_p;

		/* Support of tao_yytext. */
		*tao_yy_cp = tao_yy_hold_char;

		/* tao_yy_bp points to the position in tao_yy_ch_buf of the start of
		 * the current run.
		 */
		tao_yy_bp = tao_yy_cp;

		tao_yy_current_state = tao_yy_start;
		tao_yy_current_state += TAO_YY_AT_BOL();
tao_yy_match:
		do
			{
			register TAO_YY_CHAR tao_yy_c = tao_yy_ec[TAO_YY_SC_TO_UI(*tao_yy_cp)];
			if ( tao_yy_accept[tao_yy_current_state] )
				{
				tao_yy_last_accepting_state = tao_yy_current_state;
				tao_yy_last_accepting_cpos = tao_yy_cp;
				}
			while ( tao_yy_chk[tao_yy_base[tao_yy_current_state] + tao_yy_c] != tao_yy_current_state )
				{
				tao_yy_current_state = (int) tao_yy_def[tao_yy_current_state];
				if ( tao_yy_current_state >= 441 )
					tao_yy_c = tao_yy_meta[(unsigned int) tao_yy_c];
				}
			tao_yy_current_state = tao_yy_nxt[tao_yy_base[tao_yy_current_state] + (unsigned int) tao_yy_c];
			++tao_yy_cp;
			}
		while ( tao_yy_base[tao_yy_current_state] != 919 );

tao_yy_find_action:
		tao_yy_act = tao_yy_accept[tao_yy_current_state];
		if ( tao_yy_act == 0 )
			{ /* have to back up */
			tao_yy_cp = tao_yy_last_accepting_cpos;
			tao_yy_current_state = tao_yy_last_accepting_state;
			tao_yy_act = tao_yy_accept[tao_yy_current_state];
			}

		TAO_YY_DO_BEFORE_ACTION;


do_action:	/* This label is used only to access EOF actions. */


		switch ( tao_yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of TAO_YY_DO_BEFORE_ACTION */
			*tao_yy_cp = tao_yy_hold_char;
			tao_yy_cp = tao_yy_last_accepting_cpos;
			tao_yy_current_state = tao_yy_last_accepting_state;
			goto tao_yy_find_action;

case 1:
TAO_YY_RULE_SETUP
#line 128 "fe/idl.ll"
return IDL_ANY;
	TAO_YY_BREAK
case 2:
TAO_YY_RULE_SETUP
#line 129 "fe/idl.ll"
return IDL_MODULE;
	TAO_YY_BREAK
case 3:
TAO_YY_RULE_SETUP
#line 130 "fe/idl.ll"
return IDL_RAISES;
	TAO_YY_BREAK
case 4:
TAO_YY_RULE_SETUP
#line 131 "fe/idl.ll"
return IDL_READONLY;
	TAO_YY_BREAK
case 5:
TAO_YY_RULE_SETUP
#line 132 "fe/idl.ll"
return IDL_ATTRIBUTE;
	TAO_YY_BREAK
case 6:
TAO_YY_RULE_SETUP
#line 133 "fe/idl.ll"
return IDL_EXCEPTION;
	TAO_YY_BREAK
case 7:
TAO_YY_RULE_SETUP
#line 134 "fe/idl.ll"
return IDL_CONTEXT;
	TAO_YY_BREAK
case 8:
TAO_YY_RULE_SETUP
#line 135 "fe/idl.ll"
return IDL_INTERFACE;
	TAO_YY_BREAK
case 9:
TAO_YY_RULE_SETUP
#line 136 "fe/idl.ll"
return IDL_CONST;
	TAO_YY_BREAK
case 10:
TAO_YY_RULE_SETUP
#line 137 "fe/idl.ll"
return IDL_TYPEDEF;
	TAO_YY_BREAK
case 11:
TAO_YY_RULE_SETUP
#line 138 "fe/idl.ll"
return IDL_STRUCT;
	TAO_YY_BREAK
case 12:
TAO_YY_RULE_SETUP
#line 139 "fe/idl.ll"
return IDL_ENUM;
	TAO_YY_BREAK
case 13:
TAO_YY_RULE_SETUP
#line 140 "fe/idl.ll"
return IDL_STRING;
	TAO_YY_BREAK
case 14:
TAO_YY_RULE_SETUP
#line 141 "fe/idl.ll"
return IDL_WSTRING;
	TAO_YY_BREAK
case 15:
TAO_YY_RULE_SETUP
#line 142 "fe/idl.ll"
return IDL_SEQUENCE;
	TAO_YY_BREAK
case 16:
TAO_YY_RULE_SETUP
#line 143 "fe/idl.ll"
return IDL_UNION;
	TAO_YY_BREAK
case 17:
TAO_YY_RULE_SETUP
#line 144 "fe/idl.ll"
return IDL_FIXED;
	TAO_YY_BREAK
case 18:
TAO_YY_RULE_SETUP
#line 145 "fe/idl.ll"
return IDL_SWITCH;
	TAO_YY_BREAK
case 19:
TAO_YY_RULE_SETUP
#line 146 "fe/idl.ll"
return IDL_CASE;
	TAO_YY_BREAK
case 20:
TAO_YY_RULE_SETUP
#line 147 "fe/idl.ll"
return IDL_DEFAULT;
	TAO_YY_BREAK
case 21:
TAO_YY_RULE_SETUP
#line 148 "fe/idl.ll"
return IDL_FLOAT;
	TAO_YY_BREAK
case 22:
TAO_YY_RULE_SETUP
#line 149 "fe/idl.ll"
return IDL_DOUBLE;
	TAO_YY_BREAK
case 23:
TAO_YY_RULE_SETUP
#line 150 "fe/idl.ll"
return IDL_LONG;
	TAO_YY_BREAK
case 24:
TAO_YY_RULE_SETUP
#line 151 "fe/idl.ll"
return IDL_SHORT;
	TAO_YY_BREAK
case 25:
TAO_YY_RULE_SETUP
#line 152 "fe/idl.ll"
return IDL_UNSIGNED;
	TAO_YY_BREAK
case 26:
TAO_YY_RULE_SETUP
#line 153 "fe/idl.ll"
return IDL_CHAR;
	TAO_YY_BREAK
case 27:
TAO_YY_RULE_SETUP
#line 154 "fe/idl.ll"
return IDL_WCHAR;
	TAO_YY_BREAK
case 28:
TAO_YY_RULE_SETUP
#line 155 "fe/idl.ll"
return IDL_BOOLEAN;
	TAO_YY_BREAK
case 29:
TAO_YY_RULE_SETUP
#line 156 "fe/idl.ll"
return IDL_OCTET;
	TAO_YY_BREAK
case 30:
TAO_YY_RULE_SETUP
#line 157 "fe/idl.ll"
return IDL_VOID;
	TAO_YY_BREAK
case 31:
TAO_YY_RULE_SETUP
#line 158 "fe/idl.ll"
return IDL_NATIVE;
	TAO_YY_BREAK
case 32:
TAO_YY_RULE_SETUP
#line 159 "fe/idl.ll"
return IDL_LOCAL;
	TAO_YY_BREAK
case 33:
TAO_YY_RULE_SETUP
#line 160 "fe/idl.ll"
return scan_obv_token (IDL_ABSTRACT);
	TAO_YY_BREAK
case 34:
TAO_YY_RULE_SETUP
#line 161 "fe/idl.ll"
return scan_obv_token (IDL_CUSTOM);
	TAO_YY_BREAK
case 35:
TAO_YY_RULE_SETUP
#line 162 "fe/idl.ll"
return scan_obv_token (IDL_INIT);
	TAO_YY_BREAK
case 36:
TAO_YY_RULE_SETUP
#line 163 "fe/idl.ll"
return scan_obv_token (IDL_PRIVATE);
	TAO_YY_BREAK
case 37:
TAO_YY_RULE_SETUP
#line 164 "fe/idl.ll"
return scan_obv_token (IDL_PUBLIC);
	TAO_YY_BREAK
case 38:
TAO_YY_RULE_SETUP
#line 165 "fe/idl.ll"
return scan_obv_token (IDL_SUPPORTS);
	TAO_YY_BREAK
case 39:
TAO_YY_RULE_SETUP
#line 166 "fe/idl.ll"
return scan_obv_token (IDL_TRUNCATABLE);
	TAO_YY_BREAK
case 40:
TAO_YY_RULE_SETUP
#line 167 "fe/idl.ll"
return scan_obv_token (IDL_VALUETYPE);
	TAO_YY_BREAK
case 41:
TAO_YY_RULE_SETUP
#line 169 "fe/idl.ll"
return IDL_TRUETOK;
	TAO_YY_BREAK
case 42:
TAO_YY_RULE_SETUP
#line 170 "fe/idl.ll"
return IDL_FALSETOK;
	TAO_YY_BREAK
case 43:
TAO_YY_RULE_SETUP
#line 172 "fe/idl.ll"
return IDL_INOUT;
	TAO_YY_BREAK
case 44:
TAO_YY_RULE_SETUP
#line 173 "fe/idl.ll"
return IDL_IN;
	TAO_YY_BREAK
case 45:
TAO_YY_RULE_SETUP
#line 174 "fe/idl.ll"
return IDL_OUT;
	TAO_YY_BREAK
case 46:
TAO_YY_RULE_SETUP
#line 175 "fe/idl.ll"
return IDL_ONEWAY;
	TAO_YY_BREAK
case 47:
TAO_YY_RULE_SETUP
#line 177 "fe/idl.ll"
return IDL_LEFT_SHIFT;
	TAO_YY_BREAK
case 48:
TAO_YY_RULE_SETUP
#line 178 "fe/idl.ll"
return IDL_RIGHT_SHIFT;
	TAO_YY_BREAK
case 49:
TAO_YY_RULE_SETUP
#line 179 "fe/idl.ll"
{
		  tao_yylval.strval = (char *) "::";
		  return IDL_SCOPE_DELIMITOR;
		}
	TAO_YY_BREAK
case 50:
TAO_YY_RULE_SETUP
#line 184 "fe/idl.ll"
{
  // Make sure that this identifier is not a C++ keyword. If it is,
  // prepend it with a _cxx_. Lookup in the perfect hash table for C++
  // keyword and grab the mapping.  BTW, the reason for the odd
  // regular expression is to handle EBCDIC, as well as ASCII.

  TAO_IDL_CPP_Keyword_Table cpp_key_tbl;
  const TAO_IDL_CPP_Keyword_Entry *entry =
    cpp_key_tbl.lookup (ace_tao_yytext,
                        ACE_OS::strlen (ace_tao_yytext));
  if (entry)
    tao_yylval.strval = ACE_OS::strdup (entry->mapping_);
  else
    tao_yylval.strval = ACE_OS::strdup (ace_tao_yytext);

  return IDENTIFIER;
}
	TAO_YY_BREAK
case 51:
TAO_YY_RULE_SETUP
#line 202 "fe/idl.ll"
{
                  tao_yylval.dval = idl_atof(ace_tao_yytext);
                  return IDL_FLOATING_PT_LITERAL;
                }
	TAO_YY_BREAK
case 52:
TAO_YY_RULE_SETUP
#line 206 "fe/idl.ll"
{
                  tao_yylval.dval = idl_atof(ace_tao_yytext);
                  return IDL_FLOATING_PT_LITERAL;
                }
	TAO_YY_BREAK
case 53:
TAO_YY_RULE_SETUP
#line 211 "fe/idl.ll"
{
		  tao_yylval.ival = idl_atoi(ace_tao_yytext, 10);
		  return IDL_INTEGER_LITERAL;
	        }
	TAO_YY_BREAK
case 54:
TAO_YY_RULE_SETUP
#line 215 "fe/idl.ll"
{
		  tao_yylval.uival = idl_atoui(ace_tao_yytext, 10);
		  return IDL_UINTEGER_LITERAL;
		}
	TAO_YY_BREAK
case 55:
TAO_YY_RULE_SETUP
#line 219 "fe/idl.ll"
{
		  tao_yylval.ival = idl_atoi(ace_tao_yytext, 16);
		  return IDL_INTEGER_LITERAL;
	        }
	TAO_YY_BREAK
case 56:
TAO_YY_RULE_SETUP
#line 223 "fe/idl.ll"
{
                  tao_yylval.uival = idl_atoui(ace_tao_yytext, 16);
		  return IDL_UINTEGER_LITERAL;
		}
	TAO_YY_BREAK
case 57:
TAO_YY_RULE_SETUP
#line 227 "fe/idl.ll"
{
		  tao_yylval.ival = idl_atoi(ace_tao_yytext, 8);
		  return IDL_INTEGER_LITERAL;
	      	}
	TAO_YY_BREAK
case 58:
TAO_YY_RULE_SETUP
#line 231 "fe/idl.ll"
{
		  tao_yylval.uival = idl_atoui(ace_tao_yytext, 8);
		  return IDL_UINTEGER_LITERAL;
	      	}
	TAO_YY_BREAK
case 59:
TAO_YY_RULE_SETUP
#line 236 "fe/idl.ll"
{
		  /* Skip the quotes */
		  char *tmp = ace_tao_yytext;
		  tmp[strlen(tmp)-1] = '\0';
		  tao_yylval.sval = new UTL_String(tmp + 1);
		  return IDL_STRING_LITERAL;
	      	}
	TAO_YY_BREAK
case 60:
TAO_YY_RULE_SETUP
#line 243 "fe/idl.ll"
{
		  /* Skip the bookends */
		  char *tmp = ACE_OS::strdup (ace_tao_yytext);
		  tmp[strlen (tmp) - 1] = '\0';
		  tao_yylval.wsval = idl_wstring_escape_reader(tmp + 2);
		  return IDL_WSTRING_LITERAL;
		}
	TAO_YY_BREAK
case 61:
TAO_YY_RULE_SETUP
#line 250 "fe/idl.ll"
{
		  tao_yylval.cval = ace_tao_yytext [1];
		  return IDL_CHARACTER_LITERAL;
	      	}
	TAO_YY_BREAK
case 62:
TAO_YY_RULE_SETUP
#line 254 "fe/idl.ll"
{
		  // octal character constant
		  tao_yylval.cval = idl_escape_reader(ace_tao_yytext + 1);
		  return IDL_CHARACTER_LITERAL;
		}
	TAO_YY_BREAK
case 63:
TAO_YY_RULE_SETUP
#line 259 "fe/idl.ll"
{
		  // hexadecimal character constant
		  tao_yylval.cval = idl_escape_reader(ace_tao_yytext + 1);
		  return IDL_CHARACTER_LITERAL;
		}
	TAO_YY_BREAK
case 64:
TAO_YY_RULE_SETUP
#line 264 "fe/idl.ll"
{
		  tao_yylval.cval = idl_escape_reader(ace_tao_yytext + 1);
		  return IDL_CHARACTER_LITERAL;
		}
	TAO_YY_BREAK
case 65:
TAO_YY_RULE_SETUP
#line 268 "fe/idl.ll"
{
		  // wide character constant
		  tao_yylval.wcval = ace_tao_yytext [2];
		  return IDL_WCHAR_LITERAL;
		}
	TAO_YY_BREAK
case 66:
TAO_YY_RULE_SETUP
#line 273 "fe/idl.ll"
{
		  // hexadecimal wide character constant
		  tao_yylval.wcval = idl_wchar_escape_reader(ace_tao_yytext + 2);
		  return IDL_WCHAR_LITERAL;
		}
	TAO_YY_BREAK
case 67:
#line 279 "fe/idl.ll"
case 68:
TAO_YY_RULE_SETUP
#line 279 "fe/idl.ll"
{/* remember pragma */
  		  idl_global->set_lineno(idl_global->lineno() + 1);
		  idl_store_pragma(ace_tao_yytext);
		}
	break;
case 69:
#line 284 "fe/idl.ll"
case 70:
TAO_YY_RULE_SETUP
#line 284 "fe/idl.ll"
{/* ignore file */
  		  idl_global->set_lineno(idl_global->lineno() + 1);
		}
	TAO_YY_BREAK
case 71:
#line 288 "fe/idl.ll"
case 72:
TAO_YY_RULE_SETUP
#line 288 "fe/idl.ll"
{
		  idl_parse_line_and_file(ace_tao_yytext);
		}
	break;
case 73:
#line 292 "fe/idl.ll"
case 74:
TAO_YY_RULE_SETUP
#line 292 "fe/idl.ll"
{
		  idl_parse_line_and_file(ace_tao_yytext);
		}
	break;
case 75:
#line 296 "fe/idl.ll"
case 76:
TAO_YY_RULE_SETUP
#line 296 "fe/idl.ll"
{
		  idl_parse_line_and_file(ace_tao_yytext);
		}
	break;
case 77:
#line 300 "fe/idl.ll"
case 78:
TAO_YY_RULE_SETUP
#line 300 "fe/idl.ll"
{
		  idl_parse_line_and_file(ace_tao_yytext);
	        }
	break;
case 79:
#line 304 "fe/idl.ll"
case 80:
TAO_YY_RULE_SETUP
#line 304 "fe/idl.ll"
{
		  /* ignore cpp ident */
  		  idl_global->set_lineno(idl_global->lineno() + 1);
		}
	TAO_YY_BREAK
case 81:
TAO_YY_RULE_SETUP
#line 308 "fe/idl.ll"
{
		  /* ignore comments */
  		  idl_global->set_lineno(idl_global->lineno() + 1);
		}
	break;
case 82:
TAO_YY_RULE_SETUP
#line 312 "fe/idl.ll"
{
		  for(;;) {
		    char c = tao_yyinput();
		    if (c == '*') {
		      char next = tao_yyinput();
		      if (next == '/')
			break;
		      else
			tao_yyunput(c, NULL);
	              if (c == '\n')
		        idl_global->set_lineno(idl_global->lineno() + 1);
		    }
	          }
	        }
	break;
case 83:
TAO_YY_RULE_SETUP
#line 326 "fe/idl.ll"
;
	break;
case 84:
TAO_YY_RULE_SETUP
#line 327 "fe/idl.ll"
{
  		  idl_global->set_lineno(idl_global->lineno() + 1);
		}
	break;
case 85:
TAO_YY_RULE_SETUP
#line 330 "fe/idl.ll"
return ace_tao_yytext [0];
	TAO_YY_BREAK
case 86:
TAO_YY_RULE_SETUP
#line 332 "fe/idl.ll"
TAO_YY_ECHO;
	break;
case TAO_YY_STATE_EOF(INITIAL):
	tao_yyterminate();

	case TAO_YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int tao_yy_amount_of_matched_text = (int) (tao_yy_cp - tao_yytext_ptr) - 1;

		/* Undo the effects of TAO_YY_DO_BEFORE_ACTION. */
		*tao_yy_cp = tao_yy_hold_char;
		TAO_YY_RESTORE_TAO_YY_MORE_OFFSET

		if ( tao_yy_current_buffer->tao_yy_buffer_status == TAO_YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed tao_yyin at a new source and called
			 * tao_yylex().  If so, then we have to assure
			 * consistency between tao_yy_current_buffer and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			tao_yy_n_chars = tao_yy_current_buffer->tao_yy_n_chars;
			tao_yy_current_buffer->tao_yy_input_file = tao_yyin;
			tao_yy_current_buffer->tao_yy_buffer_status = TAO_YY_BUFFER_NORMAL;
			}

		/* Note that here we test for tao_yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since tao_yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( tao_yy_c_buf_p <= &tao_yy_current_buffer->tao_yy_ch_buf[tao_yy_n_chars] )
			{ /* This was really a NUL. */
			tao_yy_state_type tao_yy_next_state;

			tao_yy_c_buf_p = tao_yytext_ptr + tao_yy_amount_of_matched_text;

			tao_yy_current_state = tao_yy_get_previous_state();

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * tao_yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			tao_yy_next_state = tao_yy_try_NUL_trans( tao_yy_current_state );

			tao_yy_bp = tao_yytext_ptr + TAO_YY_MORE_ADJ;

			if ( tao_yy_next_state )
				{
				/* Consume the NUL. */
				tao_yy_cp = ++tao_yy_c_buf_p;
				tao_yy_current_state = tao_yy_next_state;
				goto tao_yy_match;
				}

			else
				{
				tao_yy_cp = tao_yy_c_buf_p;
				goto tao_yy_find_action;
				}
			}

		else switch ( tao_yy_get_next_buffer() )
			{
			case EOB_ACT_END_OF_FILE:
				{
				tao_yy_did_buffer_switch_on_eof = 0;

				if ( tao_yywrap() )
					{
					/* Note: because we've taken care in
					 * tao_yy_get_next_buffer() to have set up
					 * tao_yytext, we can now set up
					 * tao_yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * TAO_YY_NULL, it'll still work - another
					 * TAO_YY_NULL will get returned.
					 */
					tao_yy_c_buf_p = tao_yytext_ptr + TAO_YY_MORE_ADJ;

					tao_yy_act = TAO_YY_STATE_EOF(TAO_YY_START);
					goto do_action;
					}

				else
					{
					if ( ! tao_yy_did_buffer_switch_on_eof )
						TAO_YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				tao_yy_c_buf_p =
					tao_yytext_ptr + tao_yy_amount_of_matched_text;

				tao_yy_current_state = tao_yy_get_previous_state();

				tao_yy_cp = tao_yy_c_buf_p;
				tao_yy_bp = tao_yytext_ptr + TAO_YY_MORE_ADJ;
				goto tao_yy_match;

			case EOB_ACT_LAST_MATCH:
				tao_yy_c_buf_p =
				&tao_yy_current_buffer->tao_yy_ch_buf[tao_yy_n_chars];

				tao_yy_current_state = tao_yy_get_previous_state();

				tao_yy_cp = tao_yy_c_buf_p;
				tao_yy_bp = tao_yytext_ptr + TAO_YY_MORE_ADJ;
				goto tao_yy_find_action;
			}
		break;
		}

	default:
		TAO_YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of tao_yylex */


/* tao_yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */

static int tao_yy_get_next_buffer()
	{
	register char *dest = tao_yy_current_buffer->tao_yy_ch_buf;
	register char *source = tao_yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( tao_yy_c_buf_p > &tao_yy_current_buffer->tao_yy_ch_buf[tao_yy_n_chars + 1] )
		TAO_YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( tao_yy_current_buffer->tao_yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( tao_yy_c_buf_p - tao_yytext_ptr - TAO_YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (tao_yy_c_buf_p - tao_yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( tao_yy_current_buffer->tao_yy_buffer_status == TAO_YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		tao_yy_current_buffer->tao_yy_n_chars = tao_yy_n_chars = 0;

	else
		{
		int num_to_read =
			tao_yy_current_buffer->tao_yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */
#ifdef TAO_YY_USES_REJECT
			TAO_YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );
#else

			/* just a shorter name for the current buffer */
			TAO_YY_BUFFER_STATE b = tao_yy_current_buffer;

			int tao_yy_c_buf_p_offset =
				(int) (tao_yy_c_buf_p - b->tao_yy_ch_buf);

			if ( b->tao_yy_is_our_buffer )
				{
				int new_size = b->tao_yy_buf_size * 2;

				if ( new_size <= 0 )
					b->tao_yy_buf_size += b->tao_yy_buf_size / 8;
				else
					b->tao_yy_buf_size *= 2;

				b->tao_yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					tao_yy_flex_realloc( (void *) b->tao_yy_ch_buf,
							 b->tao_yy_buf_size + 2 );
				}
			else
				/* Can't grow it, we don't own it. */
				b->tao_yy_ch_buf = 0;

			if ( ! b->tao_yy_ch_buf )
				TAO_YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			tao_yy_c_buf_p = &b->tao_yy_ch_buf[tao_yy_c_buf_p_offset];

			num_to_read = tao_yy_current_buffer->tao_yy_buf_size -
						number_to_move - 1;
#endif
			}

		if ( num_to_read > TAO_YY_READ_BUF_SIZE )
			num_to_read = TAO_YY_READ_BUF_SIZE;

		/* Read in more data. */
		TAO_YY_INPUT( (&tao_yy_current_buffer->tao_yy_ch_buf[number_to_move]),
			tao_yy_n_chars, num_to_read );

		tao_yy_current_buffer->tao_yy_n_chars = tao_yy_n_chars;
		}

	if ( tao_yy_n_chars == 0 )
		{
		if ( number_to_move == TAO_YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			tao_yyrestart( tao_yyin );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			tao_yy_current_buffer->tao_yy_buffer_status =
				TAO_YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	tao_yy_n_chars += number_to_move;
	tao_yy_current_buffer->tao_yy_ch_buf[tao_yy_n_chars] = TAO_YY_END_OF_BUFFER_CHAR;
	tao_yy_current_buffer->tao_yy_ch_buf[tao_yy_n_chars + 1] = TAO_YY_END_OF_BUFFER_CHAR;

	tao_yytext_ptr = &tao_yy_current_buffer->tao_yy_ch_buf[0];

	return ret_val;
	}


/* tao_yy_get_previous_state - get the state just before the EOB char was reached */

static tao_yy_state_type tao_yy_get_previous_state()
	{
	register tao_yy_state_type tao_yy_current_state;
	register char *tao_yy_cp;

	tao_yy_current_state = tao_yy_start;
	tao_yy_current_state += TAO_YY_AT_BOL();

	for ( tao_yy_cp = tao_yytext_ptr + TAO_YY_MORE_ADJ; tao_yy_cp < tao_yy_c_buf_p; ++tao_yy_cp )
		{
		register TAO_YY_CHAR tao_yy_c = (*tao_yy_cp ? tao_yy_ec[TAO_YY_SC_TO_UI(*tao_yy_cp)] : 1);
		if ( tao_yy_accept[tao_yy_current_state] )
			{
			tao_yy_last_accepting_state = tao_yy_current_state;
			tao_yy_last_accepting_cpos = tao_yy_cp;
			}
		while ( tao_yy_chk[tao_yy_base[tao_yy_current_state] + tao_yy_c] != tao_yy_current_state )
			{
			tao_yy_current_state = (int) tao_yy_def[tao_yy_current_state];
			if ( tao_yy_current_state >= 441 )
				tao_yy_c = tao_yy_meta[(unsigned int) tao_yy_c];
			}
		tao_yy_current_state = tao_yy_nxt[tao_yy_base[tao_yy_current_state] + (unsigned int) tao_yy_c];
		}

	return tao_yy_current_state;
	}


/* tao_yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = tao_yy_try_NUL_trans( current_state );
 */

#ifdef TAO_YY_USE_PROTOS
static tao_yy_state_type tao_yy_try_NUL_trans( tao_yy_state_type tao_yy_current_state )
#else
static tao_yy_state_type tao_yy_try_NUL_trans( tao_yy_current_state )
tao_yy_state_type tao_yy_current_state;
#endif
	{
	register int tao_yy_is_jam;
	register char *tao_yy_cp = tao_yy_c_buf_p;

	register TAO_YY_CHAR tao_yy_c = 1;
	if ( tao_yy_accept[tao_yy_current_state] )
		{
		tao_yy_last_accepting_state = tao_yy_current_state;
		tao_yy_last_accepting_cpos = tao_yy_cp;
		}
	while ( tao_yy_chk[tao_yy_base[tao_yy_current_state] + tao_yy_c] != tao_yy_current_state )
		{
		tao_yy_current_state = (int) tao_yy_def[tao_yy_current_state];
		if ( tao_yy_current_state >= 441 )
			tao_yy_c = tao_yy_meta[(unsigned int) tao_yy_c];
		}
	tao_yy_current_state = tao_yy_nxt[tao_yy_base[tao_yy_current_state] + (unsigned int) tao_yy_c];
	tao_yy_is_jam = (tao_yy_current_state == 440);

	return tao_yy_is_jam ? 0 : tao_yy_current_state;
	}


#ifndef TAO_YY_NO_UNPUT
#ifdef TAO_YY_USE_PROTOS
static void tao_yyunput( int c, register char *tao_yy_bp )
#else
static void tao_yyunput( c, tao_yy_bp )
int c;
register char *tao_yy_bp;
#endif
	{
	register char *tao_yy_cp = tao_yy_c_buf_p;

	/* undo effects of setting up tao_yytext */
	*tao_yy_cp = tao_yy_hold_char;

	if ( tao_yy_cp < tao_yy_current_buffer->tao_yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = tao_yy_n_chars + 2;
		register char *dest = &tao_yy_current_buffer->tao_yy_ch_buf[
					tao_yy_current_buffer->tao_yy_buf_size + 2];
		register char *source =
				&tao_yy_current_buffer->tao_yy_ch_buf[number_to_move];

		while ( source > tao_yy_current_buffer->tao_yy_ch_buf )
			*--dest = *--source;

		tao_yy_cp += (int) (dest - source);
		tao_yy_bp += (int) (dest - source);
		tao_yy_current_buffer->tao_yy_n_chars =
			tao_yy_n_chars = tao_yy_current_buffer->tao_yy_buf_size;

		if ( tao_yy_cp < tao_yy_current_buffer->tao_yy_ch_buf + 2 )
			TAO_YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--tao_yy_cp = (char) c;


	tao_yytext_ptr = tao_yy_bp;
	tao_yy_hold_char = *tao_yy_cp;
	tao_yy_c_buf_p = tao_yy_cp;
	}
#endif	/* ifndef TAO_YY_NO_UNPUT */


#ifdef __cplusplus
static int tao_yyinput()
#else
static int input()
#endif
	{
	int c;

	*tao_yy_c_buf_p = tao_yy_hold_char;

	if ( *tao_yy_c_buf_p == TAO_YY_END_OF_BUFFER_CHAR )
		{
		/* tao_yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( tao_yy_c_buf_p < &tao_yy_current_buffer->tao_yy_ch_buf[tao_yy_n_chars] )
			/* This was really a NUL. */
			*tao_yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = tao_yy_c_buf_p - tao_yytext_ptr;
			++tao_yy_c_buf_p;

			switch ( tao_yy_get_next_buffer() )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because tao_yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					tao_yyrestart( tao_yyin );

					/* fall through */

				case EOB_ACT_END_OF_FILE:
					{
					if ( tao_yywrap() )
						return EOF;

					if ( ! tao_yy_did_buffer_switch_on_eof )
						TAO_YY_NEW_FILE;
#ifdef __cplusplus
					return tao_yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					tao_yy_c_buf_p = tao_yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) tao_yy_c_buf_p;	/* cast for 8-bit char's */
	*tao_yy_c_buf_p = '\0';	/* preserve tao_yytext */
	tao_yy_hold_char = *++tao_yy_c_buf_p;

	tao_yy_current_buffer->tao_yy_at_bol = (c == '\n');

	return c;
	}


#ifdef TAO_YY_USE_PROTOS
void tao_yyrestart( FILE *input_file )
#else
void tao_yyrestart( input_file )
FILE *input_file;
#endif
	{
	if ( ! tao_yy_current_buffer )
		tao_yy_current_buffer = tao_yy_create_buffer( tao_yyin, TAO_YY_BUF_SIZE );

	tao_yy_init_buffer( tao_yy_current_buffer, input_file );
	tao_yy_load_buffer_state();
	}


#ifdef TAO_YY_USE_PROTOS
void tao_yy_switch_to_buffer( TAO_YY_BUFFER_STATE new_buffer )
#else
void tao_yy_switch_to_buffer( new_buffer )
TAO_YY_BUFFER_STATE new_buffer;
#endif
	{
	if ( tao_yy_current_buffer == new_buffer )
		return;

	if ( tao_yy_current_buffer )
		{
		/* Flush out information for old buffer. */
		*tao_yy_c_buf_p = tao_yy_hold_char;
		tao_yy_current_buffer->tao_yy_buf_pos = tao_yy_c_buf_p;
		tao_yy_current_buffer->tao_yy_n_chars = tao_yy_n_chars;
		}

	tao_yy_current_buffer = new_buffer;
	tao_yy_load_buffer_state();

	/* We don't actually know whether we did this switch during
	 * EOF (tao_yywrap()) processing, but the only time this flag
	 * is looked at is after tao_yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	tao_yy_did_buffer_switch_on_eof = 1;
	}


#ifdef TAO_YY_USE_PROTOS
void tao_yy_load_buffer_state( void )
#else
void tao_yy_load_buffer_state()
#endif
	{
	tao_yy_n_chars = tao_yy_current_buffer->tao_yy_n_chars;
	tao_yytext_ptr = tao_yy_c_buf_p = tao_yy_current_buffer->tao_yy_buf_pos;
	tao_yyin = tao_yy_current_buffer->tao_yy_input_file;
	tao_yy_hold_char = *tao_yy_c_buf_p;
	}


#ifdef TAO_YY_USE_PROTOS
TAO_YY_BUFFER_STATE tao_yy_create_buffer( FILE *file, int size )
#else
TAO_YY_BUFFER_STATE tao_yy_create_buffer( file, size )
FILE *file;
int size;
#endif
	{
	TAO_YY_BUFFER_STATE b;

	b = (TAO_YY_BUFFER_STATE) tao_yy_flex_alloc( sizeof( struct tao_yy_buffer_state ) );
	if ( ! b )
		TAO_YY_FATAL_ERROR( "out of dynamic memory in tao_yy_create_buffer()" );

	b->tao_yy_buf_size = size;

	/* tao_yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->tao_yy_ch_buf = (char *) tao_yy_flex_alloc( b->tao_yy_buf_size + 2 );
	if ( ! b->tao_yy_ch_buf )
		TAO_YY_FATAL_ERROR( "out of dynamic memory in tao_yy_create_buffer()" );

	b->tao_yy_is_our_buffer = 1;

	tao_yy_init_buffer( b, file );

	return b;
	}


#ifdef TAO_YY_USE_PROTOS
void tao_yy_delete_buffer( TAO_YY_BUFFER_STATE b )
#else
void tao_yy_delete_buffer( b )
TAO_YY_BUFFER_STATE b;
#endif
	{
	if ( ! b )
		return;

	if ( b == tao_yy_current_buffer )
		tao_yy_current_buffer = (TAO_YY_BUFFER_STATE) 0;

	if ( b->tao_yy_is_our_buffer )
		tao_yy_flex_free( (void *) b->tao_yy_ch_buf );

	tao_yy_flex_free( (void *) b );
	}


#ifndef TAO_YY_ALWAYS_INTERACTIVE
#ifndef TAO_YY_NEVER_INTERACTIVE
extern int isatty TAO_YY_PROTO(( int ));
#endif
#endif

#ifdef TAO_YY_USE_PROTOS
void tao_yy_init_buffer( TAO_YY_BUFFER_STATE b, FILE *file )
#else
void tao_yy_init_buffer( b, file )
TAO_YY_BUFFER_STATE b;
FILE *file;
#endif


	{
	tao_yy_flush_buffer( b );

	b->tao_yy_input_file = file;
	b->tao_yy_fill_buffer = 1;

#if TAO_YY_ALWAYS_INTERACTIVE
	b->tao_yy_is_interactive = 1;
#else
#if TAO_YY_NEVER_INTERACTIVE
	b->tao_yy_is_interactive = 0;
#else
	b->tao_yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
#endif
#endif
	}


#ifdef TAO_YY_USE_PROTOS
void tao_yy_flush_buffer( TAO_YY_BUFFER_STATE b )
#else
void tao_yy_flush_buffer( b )
TAO_YY_BUFFER_STATE b;
#endif

	{
	if ( ! b )
		return;

	b->tao_yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->tao_yy_ch_buf[0] = TAO_YY_END_OF_BUFFER_CHAR;
	b->tao_yy_ch_buf[1] = TAO_YY_END_OF_BUFFER_CHAR;

	b->tao_yy_buf_pos = &b->tao_yy_ch_buf[0];

	b->tao_yy_at_bol = 1;
	b->tao_yy_buffer_status = TAO_YY_BUFFER_NEW;

	if ( b == tao_yy_current_buffer )
		tao_yy_load_buffer_state();
	}


#ifndef TAO_YY_NO_SCAN_BUFFER
#ifdef TAO_YY_USE_PROTOS
TAO_YY_BUFFER_STATE tao_yy_scan_buffer( char *base, tao_yy_size_t size )
#else
TAO_YY_BUFFER_STATE tao_yy_scan_buffer( base, size )
char *base;
tao_yy_size_t size;
#endif
	{
	TAO_YY_BUFFER_STATE b;

	if ( size < 2 ||
	     base[size-2] != TAO_YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != TAO_YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (TAO_YY_BUFFER_STATE) tao_yy_flex_alloc( sizeof( struct tao_yy_buffer_state ) );
	if ( ! b )
		TAO_YY_FATAL_ERROR( "out of dynamic memory in tao_yy_scan_buffer()" );

	b->tao_yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->tao_yy_buf_pos = b->tao_yy_ch_buf = base;
	b->tao_yy_is_our_buffer = 0;
	b->tao_yy_input_file = 0;
	b->tao_yy_n_chars = b->tao_yy_buf_size;
	b->tao_yy_is_interactive = 0;
	b->tao_yy_at_bol = 1;
	b->tao_yy_fill_buffer = 0;
	b->tao_yy_buffer_status = TAO_YY_BUFFER_NEW;

	tao_yy_switch_to_buffer( b );

	return b;
	}
#endif


#ifndef TAO_YY_NO_SCAN_STRING
#ifdef TAO_YY_USE_PROTOS
TAO_YY_BUFFER_STATE tao_yy_scan_string( tao_yyconst char *tao_yy_str )
#else
TAO_YY_BUFFER_STATE tao_yy_scan_string( tao_yy_str )
tao_yyconst char *tao_yy_str;
#endif
	{
	int len;
	for ( len = 0; tao_yy_str[len]; ++len )
		;

	return tao_yy_scan_bytes( tao_yy_str, len );
	}
#endif


#ifndef TAO_YY_NO_SCAN_BYTES
#ifdef TAO_YY_USE_PROTOS
TAO_YY_BUFFER_STATE tao_yy_scan_bytes( tao_yyconst char *bytes, int len )
#else
TAO_YY_BUFFER_STATE tao_yy_scan_bytes( bytes, len )
tao_yyconst char *bytes;
int len;
#endif
	{
	TAO_YY_BUFFER_STATE b;
	char *buf;
	tao_yy_size_t n;
	int i;

	/* Get memory for full buffer, including space for trailing EOB's. */
	n = len + 2;
	buf = (char *) tao_yy_flex_alloc( n );
	if ( ! buf )
		TAO_YY_FATAL_ERROR( "out of dynamic memory in tao_yy_scan_bytes()" );

	for ( i = 0; i < len; ++i )
		buf[i] = bytes[i];

	buf[len] = buf[len+1] = TAO_YY_END_OF_BUFFER_CHAR;

	b = tao_yy_scan_buffer( buf, n );
	if ( ! b )
		TAO_YY_FATAL_ERROR( "bad buffer in tao_yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->tao_yy_is_our_buffer = 1;

	return b;
	}
#endif


#ifndef TAO_YY_NO_PUSH_STATE
#ifdef TAO_YY_USE_PROTOS
static void tao_yy_push_state( int new_state )
#else
static void tao_yy_push_state( new_state )
int new_state;
#endif
	{
	if ( tao_yy_start_stack_ptr >= tao_yy_start_stack_depth )
		{
		tao_yy_size_t new_size;

		tao_yy_start_stack_depth += TAO_YY_START_STACK_INCR;
		new_size = tao_yy_start_stack_depth * sizeof( int );

		if ( ! tao_yy_start_stack )
			tao_yy_start_stack = (int *) tao_yy_flex_alloc( new_size );

		else
			tao_yy_start_stack = (int *) tao_yy_flex_realloc(
					(void *) tao_yy_start_stack, new_size );

		if ( ! tao_yy_start_stack )
			TAO_YY_FATAL_ERROR(
			"out of memory expanding start-condition stack" );
		}

	tao_yy_start_stack[tao_yy_start_stack_ptr++] = TAO_YY_START;

	BEGIN(new_state);
	}
#endif


#ifndef TAO_YY_NO_POP_STATE
static void tao_yy_pop_state()
	{
	if ( --tao_yy_start_stack_ptr < 0 )
		TAO_YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN(tao_yy_start_stack[tao_yy_start_stack_ptr]);
	}
#endif


#ifndef TAO_YY_NO_TOP_STATE
static int tao_yy_top_state()
	{
	return tao_yy_start_stack[tao_yy_start_stack_ptr - 1];
	}
#endif

#ifndef TAO_YY_EXIT_FAILURE
#define TAO_YY_EXIT_FAILURE 2
#endif

#ifdef TAO_YY_USE_PROTOS
static void tao_yy_fatal_error( tao_yyconst char msg[] )
#else
static void tao_yy_fatal_error( msg )
char msg[];
#endif
	{
	(void) fprintf( stderr, "%s\n", msg );
	exit( TAO_YY_EXIT_FAILURE );
	}



/* Redefine tao_yyless() so it works in section 3 code. */

#undef tao_yyless
#define tao_yyless(n) \
	do \
		{ \
		/* Undo effects of setting up tao_yytext. */ \
		tao_yytext[tao_yyleng] = tao_yy_hold_char; \
		tao_yy_c_buf_p = tao_yytext + n; \
		tao_yy_hold_char = *tao_yy_c_buf_p; \
		*tao_yy_c_buf_p = '\0'; \
		tao_yyleng = n; \
		} \
	while ( 0 )


/* Internal utility routines. */

#ifndef tao_yytext_ptr
#ifdef TAO_YY_USE_PROTOS
static void tao_yy_flex_strncpy( char *s1, tao_yyconst char *s2, int n )
#else
static void tao_yy_flex_strncpy( s1, s2, n )
char *s1;
tao_yyconst char *s2;
int n;
#endif
	{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
	}
#endif

#ifdef TAO_YY_NEED_STRLEN
#ifdef TAO_YY_USE_PROTOS
static int tao_yy_flex_strlen( tao_yyconst char *s )
#else
static int tao_yy_flex_strlen( s )
tao_yyconst char *s;
#endif
	{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
	}
#endif


#ifdef TAO_YY_USE_PROTOS
static void *tao_yy_flex_alloc( tao_yy_size_t size )
#else
static void *tao_yy_flex_alloc( size )
tao_yy_size_t size;
#endif
	{
	return (void *) malloc( size );
	}

#ifdef TAO_YY_USE_PROTOS
static void *tao_yy_flex_realloc( void *ptr, tao_yy_size_t size )
#else
static void *tao_yy_flex_realloc( ptr, size )
void *ptr;
tao_yy_size_t size;
#endif
	{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
	}

#ifdef TAO_YY_USE_PROTOS
static void tao_yy_flex_free( void *ptr )
#else
static void tao_yy_flex_free( ptr )
void *ptr;
#endif
	{
	free( ptr );
	}

#if TAO_YY_MAIN
int main()
	{
	tao_yylex();
	return 0;
	}
#endif
#line 332 "fe/idl.ll"

	/* subroutines */

/*
 * Strip down a name to the last component, i.e. everything after the last
 * '/' character
 */
static char *
stripped_name(UTL_String *fn)
{
    char	*n = fn->get_string();
    long	l;

    if (n == NULL)
	return NULL;
    l = strlen(n);
    for (n += l; l > 0 && *n != '/'; l--, n--);
    if (*n == '/') n++;
    return n;
}

/*
 * Parse a #line statement generated by the C preprocessor
 */
static void
idl_parse_line_and_file(char *buf)
{
  char		*r = buf;
  char 		*h;
  UTL_String	*nm;

  /* Skip initial '#' */
  if (*r != '#')
    return;
  else
    r++;

  /* Check to see if we're running under the screwy Microsoft scheme */
  /* of putting #line num instead of #num. */

  if (ACE_OS::strncmp (r, "line", 4) == 0)
    r += 5;

  /* Find line number */
  while (*r == ' ' || *r == '\t')
    r++;
  h = r;
  for (; *r != '\0' && *r != ' ' && *r != '\t'; r++)
    continue;
  *r++ = 0;
  idl_global->set_lineno(idl_atoui(h, 10));

  /* Find file name, if present */
  for (; *r != '"'; r++)
    if (*r == '\n' || *r == '\0')
      return;

  h = ++r;
  for (; *r != '"'; r++)
    continue;
  *r = 0;
  if (*h == '\0')
    idl_global->set_filename(new UTL_String("standard input"));
  else
    {
      long i;
      long j;

      // Put Microsoft-style pathnames into a canonical form.
      for (i = 0, j = 0; h[j] != '\0'; i++, j++)
        {
          if (h[j] == '\\' && h[j + 1] == '\\')
	    j++;

	  h[i] = h[j];
        }
      h[i] = '\0';
      idl_global->set_filename(new UTL_String(h));
    }
  int in_main_file = I_FALSE;
  if (idl_global->filename()->compare(idl_global->real_filename())
      || idl_global->filename()->compare(idl_global->main_filename()))
    in_main_file = I_TRUE;
  idl_global->set_in_main_file(in_main_file);
  /*
   * If it's an import file store the stripped name for the BE to use
   */
  if (!(idl_global->in_main_file()) && idl_global->import()) {
    nm = new UTL_String(stripped_name(idl_global->filename()));
    idl_global->store_include_file_name(nm);
  }
}

/*
 * Store a #pragma line into the list of pragmas
 */
static void
idl_store_pragma(char *buf)
{
  char *sp = buf + 1;
  // Remove all the blanks between the '#' and the 'pragma'
  if (*sp != 'p')
    {
      while (*sp != 'p')
        ++sp;
      char *tp = buf + 1;
      while (*sp != '\n')
        {
          *tp = *sp;
	  ++tp; ++sp;
        }
    }

  if (ACE_OS::strstr(buf + 8, "import") != 0) {
    idl_global->set_import(I_TRUE);
    return;
  }
  if (ACE_OS::strstr(buf + 8, "include") != 0) {
    idl_global->set_import(I_FALSE);
    return;
  }
  // Remove the final '\n'
  while (*sp != '\n')
    ++sp;
  *sp = '\0';
  if (ACE_OS::strstr(buf + 8, "ident") != 0) {
    idl_global->ident_string(buf + 8);
    return;
  }
  UTL_StrList *p = idl_global->pragmas();
  if (p == NULL)
    idl_global->set_pragmas(new UTL_StrList(new UTL_String(buf), NULL));
  else {
    p->nconc(new UTL_StrList(new UTL_String(buf), NULL));
    idl_global->set_pragmas(p);
  }
}

/*
 * idl_atoi - Convert a string of digits into a negative integer according to base b
 */
static long
idl_atoi(char *s, long b)
{
	long	r = 0;
	s++;

	if (b == 8 && *s == '0')
	  s++;
	else if (b == 16 && *s == '0' && (*(s + 1) == 'x' || *(s + 1) == 'X'))
	  s += 2;

	for (; *s; s++)
	  if (*s <= '9' && *s >= '0')
	    r = (r * b) + (*s - '0');
	  else if (b > 10 && *s <= 'f' && *s >= 'a')
	    r = (r * b) + (*s - 'a' + 10);
	  else if (b > 10 && *s <= 'F' && *s >= 'A')
	    r = (r * b) + (*s - 'A' + 10);
	  else
	    break;

	return -r;
}

/*
 * idl_atoui - Convert a string of digits into an unsigned integer according to base b
 */
static unsigned long
idl_atoui(char *s, long b)
{
	long	r = 0;

	if (b == 8 && *s == '0')
	  s++;
	else if (b == 16 && *s == '0' && (*(s + 1) == 'x' || *(s + 1) == 'X'))
	  s += 2;

	for (; *s; s++)
	  if (*s <= '9' && *s >= '0')
	    r = (r * b) + (*s - '0');
	  else if (b > 10 && *s <= 'f' && *s >= 'a')
	    r = (r * b) + (*s - 'a' + 10);
	  else if (b > 10 && *s <= 'F' && *s >= 'A')
	    r = (r * b) + (*s - 'A' + 10);
	  else
	    break;

	return r;
}

/*
 * Convert a string to a float; atof doesn't seem to work, always.
 */
static double
idl_atof(char *s)
{
	char    *h = s;
	double	d = 0.0;
	double	f = 0.0;
	double	e, k;
	long	neg = 0, negexp = 0;

	ACE_UNUSED_ARG (f);
	ACE_UNUSED_ARG (h);

	if (*s == '-') {
	  neg = 1;
	  s++;
	}
	while (*s >= '0' && *s <= '9') {
		d = (d * 10) + *s - '0';
		s++;
	}
	if (*s == '.') {
		s++;
		e = 10;
		while (*s >= '0' && *s <= '9') {
			d += (*s - '0') / (e * 1.0);
			e *= 10;
			s++;
		}
	}
	if (*s == 'e' || *s == 'E') {
		s++;
		if (*s == '-') {
			negexp = 1;
			s++;
		} else if (*s == '+')
			s++;
		e = 0;
		while (*s >= '0' && *s <= '9') {
			e = (e * 10) + *s - '0';
			s++;
		}
		if (e > 0) {
			for (k = 1; e > 0; k *= 10, e--);
			if (negexp)
				d /= k;
			else
				d *= k;
		}
	}

	if (neg) d *= -1.0;

	return d;
}

/*
 * Convert (some) escaped characters into their ascii values
 */
static char
idl_escape_reader(
    char *str
)
{
    if (str[0] != '\\') {
	return str[0];
    }

    switch (str[1]) {
      case 'n':
	return '\n';
      case 't':
	return '\t';
      case 'v':
	return '\v';
      case 'b':
	return '\b';
      case 'r':
	return '\r';
      case 'f':
	return '\f';
      case 'a':
	return '\a';
      case '\\':
	return '\\';
      case '\?':
	return '?';
      case '\'':
	return '\'';
      case '"':
	return '"';
      case 'x':
	{
	    int i;
	    // hex value
	    for (i = 2; str[i] != '\0' && isxdigit(str[i]); i++) {
		continue;
	    }
	    char save = str[i];
	    str[i] = '\0';
	    char out = (char)idl_atoui(&str[2], 16);
	    str[i] = save;
	    return out;
	}
	ACE_NOTREACHED (break;)
      default:
	// check for octal value
	if (str[1] >= '0' && str[1] <= '7') {
 	    int i;
	    for (i = 1; str[i] >= '0' && str[i] <= '7'; i++) {
		continue;
	    }
	    char save = str[i];
	    str[i] = '\0';
	    char out = (char)idl_atoui(&str[1], 8);
	    str[i] = save;
	    return out;
	} else {
	  return str[1] - 'a';
	}
	ACE_NOTREACHED  (break;)
    }
}
/*
 * Convert escaped hex digits into a wchar
 */
static ACE_CDR::WChar
idl_wchar_escape_reader (char *str)
{
  if (str[0] != '\\' || str[1] != 'u')
    {
      return 0;
    }

  int i;
  // get the hex digits
  for (i = 2; str[i] != '\0' && isxdigit (str[i]); i++)
    {
      continue;
    }
  char save = str[i];
  str[i] = '\0';
  ACE_CDR::WChar out = (ACE_CDR::WChar) idl_atoui (&str[2], 16);
  str[i] = save;
  return out;
}

/*
 * Checks wstring for validity
 */
static char *
idl_wstring_escape_reader (char *str)
{
  return str;
}
