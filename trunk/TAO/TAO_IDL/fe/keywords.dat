struct TAO_IDL_CPP_Keyword_Entry { const char *keyword_ ; const char *mapping_; };
%%
and, "_cxx_and"
and_eq, "_cxx_and_eq"
asm, "_cxx_asm"
auto, "_cxx_auto"
bitand, "_cxx_bitand"
bitor, "_cxx_bitor"
bool, "_cxx_bool"
break, "_cxx_break"
case, "_cxx_case"
catch, "_cxx_catch"
char, "_cxx_char"
class, "_cxx_class"
compl, "_cxx_compl"
const, "_cxx_const"
const_cast, "_cxx_const_cast"
continue, "_cxx_continue"
default, "_cxx_default"
delete, "_cxx_delete"
do, "_cxx_do"
double, "_cxx_double"
dynamic_cast, "_cxx_dynamic_cast"
else, "_cxx_else"
enum, "_cxx_enum"
explicit, "_cxx_explicit"
export, "_cxx_export"
extern, "_cxx_extern"
false, "_cxx_false"
float, "_cxx_float"
for, "_cxx_for"
friend, "_cxx_friend"
goto, "_cxx_goto"
if, "_cxx_if"
inline, "_cxx_inline"
int, "_cxx_int"
long, "_cxx_long"
mutable, "_cxx_mutable"
namespace, "_cxx_namespace"
new, "_cxx_new"
not, "_cxx_not"
not_eq, "_cxx_not_eq"
operator, "_cxx_operator"
or, "_cxx_or"
or_eq, "_cxx_or_eq"
private, "_cxx_private"
protected, "_cxx_protected"
public, "_cxx_public"
register, "_cxx_register"
reinterpret_cast, "_cxx_reinterpret_cast"
return, "_cxx_return"
short, "_cxx_short"
signed, "_cxx_signed"
sizeof, "_cxx_sizeof"
static, "_cxx_static"
static_cast, "_cxx_static_cast"
struct, "_cxx_struct"
switch, "_cxx_switch"
template, "_cxx_template"
this, "_cxx_this"
throw, "_cxx_throw"
true, "_cxx_true"
try, "_cxx_try"
typedef, "_cxx_typedef"
typeid, "_cxx_typeid"
typename, "_cxx_typename"
union, "_cxx_union"
unsigned, "_cxx_unsigned"
using, "_cxx_using"
virtual, "_cxx_virtual"
void, "_cxx_void"
volatile, "_cxx_volatile"
wchar_t, "_cxx_wchar_t"
while, "_cxx_while"
xor, "_cxx_xor"
xor_eq, "_cxx_xor_eq"
