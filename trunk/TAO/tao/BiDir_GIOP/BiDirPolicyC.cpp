// -*- C++ -*-
//
// $Id$

// ****  Code generated by the The ACE ORB (TAO) IDL Compiler ****
// TAO and the TAO IDL Compiler have been developed by:
//       Center for Distributed Object Computing
//       Washington University
//       St. Louis, MO
//       USA
//       http://www.cs.wustl.edu/~schmidt/doc-center.html
// and
//       Distributed Object Computing Laboratory
//       University of California at Irvine
//       Irvine, CA
//       USA
//       http://doc.ece.uci.edu/
//
// Information about TAO is available at:
//     http://www.cs.wustl.edu/~schmidt/TAO.html

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_codegen.cpp:314


#include "BiDirGIOP.h"
#include "tao/Typecode.h"

#if defined (__BORLANDC__)
#pragma option -w-rvl -w-rch -w-ccc -w-aus -w-sig
#endif /* __BORLANDC__ */

#if !defined (__ACE_INLINE__)
#include "BiDirPolicyC.i"
#endif /* !defined INLINE */

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_typecode/typecode_defn.cpp:284

static const CORBA::Long _oc_BiDirPolicy_BidirectionalPolicyValue[] =
{
    TAO_ENCAP_BYTE_ORDER, // byte order
  53,
  ACE_NTOHL (0x49444c3a), 
  ACE_NTOHL (0x6f6d672e), 
  ACE_NTOHL (0x6f72672f), 
  ACE_NTOHL (0x42694469), 
  ACE_NTOHL (0x72506f6c), 
  ACE_NTOHL (0x6963792f), 
  ACE_NTOHL (0x42696469), 
  ACE_NTOHL (0x72656374), 
  ACE_NTOHL (0x696f6e61), 
  ACE_NTOHL (0x6c506f6c), 
  ACE_NTOHL (0x69637956), 
  ACE_NTOHL (0x616c7565), 
  ACE_NTOHL (0x3a312e30), 
  ACE_NTOHL (0x0),  // repository ID = IDL:omg.org/BiDirPolicy/BidirectionalPolicyValue:1.0
    25,
  ACE_NTOHL (0x42696469), 
  ACE_NTOHL (0x72656374), 
  ACE_NTOHL (0x696f6e61), 
  ACE_NTOHL (0x6c506f6c), 
  ACE_NTOHL (0x69637956), 
  ACE_NTOHL (0x616c7565), 
  ACE_NTOHL (0x0),  // name = BidirectionalPolicyValue
    CORBA::tk_ushort,

};

static CORBA::TypeCode _tc_TAO_tc_BiDirPolicy_BidirectionalPolicyValue (
    CORBA::tk_alias,
    sizeof (_oc_BiDirPolicy_BidirectionalPolicyValue),
    (char *) &_oc_BiDirPolicy_BidirectionalPolicyValue,
    0,
    sizeof (BiDirPolicy::BidirectionalPolicyValue)
  );

TAO_NAMESPACE_TYPE (CORBA::TypeCode_ptr)
TAO_NAMESPACE_BEGIN (BiDirPolicy)
TAO_NAMESPACE_DEFINE (
    ::CORBA::TypeCode_ptr,
    _tc_BidirectionalPolicyValue,
    &_tc_TAO_tc_BiDirPolicy_BidirectionalPolicyValue
  )
TAO_NAMESPACE_END

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/interface_cs.cpp:61

int BiDirPolicy::BidirectionalPolicy::_tao_class_id = 0;

BiDirPolicy::BidirectionalPolicy_ptr
BiDirPolicy::tao_BidirectionalPolicy_life::tao_duplicate (
    BiDirPolicy::BidirectionalPolicy_ptr p
  )
{
  return BiDirPolicy::BidirectionalPolicy::_duplicate (p);
}

void
BiDirPolicy::tao_BidirectionalPolicy_life::tao_release (
    BiDirPolicy::BidirectionalPolicy_ptr p
  )
{
  CORBA::release (p);
}

BiDirPolicy::BidirectionalPolicy_ptr
BiDirPolicy::tao_BidirectionalPolicy_life::tao_nil (
    void
  )
{
  return BiDirPolicy::BidirectionalPolicy::_nil ();
}

CORBA::Boolean
BiDirPolicy::tao_BidirectionalPolicy_life::tao_marshal (
    BiDirPolicy::BidirectionalPolicy_ptr p,
    TAO_OutputCDR &cdr
  )
{
  return p->marshal (cdr);
}

BiDirPolicy::BidirectionalPolicy_ptr
BiDirPolicy::tao_BidirectionalPolicy_cast::tao_narrow (
    CORBA::Object *p
    ACE_ENV_ARG_DECL
  )
{
  return BiDirPolicy::BidirectionalPolicy::_narrow (p ACE_ENV_ARG_PARAMETER);
}

CORBA::Object *
BiDirPolicy::tao_BidirectionalPolicy_cast::tao_upcast (
    void *src
  )
{
  BiDirPolicy::BidirectionalPolicy **tmp =
    ACE_static_cast (BiDirPolicy::BidirectionalPolicy **, src);
  return *tmp;
}

#if defined (ACE_HAS_EXPLICIT_TEMPLATE_INSTANTIATION)
  template class
    TAO_Objref_Var_T<
        BiDirPolicy::BidirectionalPolicy,
        BiDirPolicy::tao_BidirectionalPolicy_life
      >;
  template class
    TAO_Objref_Out_T<
        BiDirPolicy::BidirectionalPolicy,
        BiDirPolicy::tao_BidirectionalPolicy_life
      >;
#elif defined (ACE_HAS_TEMPLATE_INSTANTIATION_PRAGMA)
# pragma instantiate \
    TAO_Objref_Var_T< \
        BiDirPolicy::BidirectionalPolicy, \
        BiDirPolicy::tao_BidirectionalPolicy_life \
      >
# pragma instantiate \
    TAO_Objref_Out_T< \
        BiDirPolicy::BidirectionalPolicy, \
        BiDirPolicy::tao_BidirectionalPolicy_life \
      >
#endif /* ACE_HAS_EXPLICIT_TEMPLATE_INSTANTIATION */

// TAO_IDL - Generated from 
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/interface_cs.cpp:232

BiDirPolicy::BidirectionalPolicy::BidirectionalPolicy (void)
{}

BiDirPolicy::BidirectionalPolicy::~BidirectionalPolicy (void)
{}

BiDirPolicy::BidirectionalPolicy_ptr
BiDirPolicy::BidirectionalPolicy::_narrow (
    CORBA::Object_ptr obj
    ACE_ENV_ARG_DECL
  )
{
  return BidirectionalPolicy::_unchecked_narrow (obj ACE_ENV_ARG_PARAMETER);
}

BiDirPolicy::BidirectionalPolicy_ptr 
BiDirPolicy::BidirectionalPolicy::_unchecked_narrow (
    CORBA::Object_ptr obj
    ACE_ENV_ARG_DECL_NOT_USED
  )
{
  if (CORBA::is_nil (obj))
    {
      return BidirectionalPolicy::_nil ();
    }
  
  return
      ACE_reinterpret_cast (
          BidirectionalPolicy_ptr,
          obj->_tao_QueryInterface (
              ACE_reinterpret_cast (
                  ptrdiff_t,
                  &BidirectionalPolicy::_tao_class_id
                )
            )
        );
}

BiDirPolicy::BidirectionalPolicy_ptr
BiDirPolicy::BidirectionalPolicy::_duplicate (BidirectionalPolicy_ptr obj)
{
  if (! CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  
  return obj;
}

void *BiDirPolicy::BidirectionalPolicy::_tao_QueryInterface (ptrdiff_t type)
{
  void *retv = 0;
  
  if (type == ACE_reinterpret_cast (
              ptrdiff_t,
              &ACE_NESTED_CLASS (::BiDirPolicy, BidirectionalPolicy)::_tao_class_id)
            )
    {
      retv = ACE_reinterpret_cast (void*, this);
    }
  else if (type == ACE_reinterpret_cast (
              ptrdiff_t,
              &::CORBA::Policy::_tao_class_id)
            )
    {
      retv =
        ACE_reinterpret_cast (
            void *,
            ACE_static_cast (
                CORBA::Policy_ptr,
                this
              )
          );
    }
  else if (type == ACE_reinterpret_cast (
               ptrdiff_t,
               &CORBA::Object::_tao_class_id)
             )
    {
      retv =
        ACE_reinterpret_cast (
            void *,
            ACE_static_cast (CORBA::Object_ptr, this)
          );
    }
  
  if (retv != 0)
    {
      this->_add_ref ();
    }
  
  return retv;
}

const char* BiDirPolicy::BidirectionalPolicy::_interface_repository_id (void) const
{
  return "IDL:omg.org/BiDirPolicy/BidirectionalPolicy:1.0";
}

CORBA::Boolean
BiDirPolicy::BidirectionalPolicy::marshal (TAO_OutputCDR &)
{
  return 0;
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_typecode/typecode_defn.cpp:284

static const CORBA::Long _oc_BiDirPolicy_BidirectionalPolicy[] =
{
    TAO_ENCAP_BYTE_ORDER, // byte order
  48,
  ACE_NTOHL (0x49444c3a), 
  ACE_NTOHL (0x6f6d672e), 
  ACE_NTOHL (0x6f72672f), 
  ACE_NTOHL (0x42694469), 
  ACE_NTOHL (0x72506f6c), 
  ACE_NTOHL (0x6963792f), 
  ACE_NTOHL (0x42696469), 
  ACE_NTOHL (0x72656374), 
  ACE_NTOHL (0x696f6e61), 
  ACE_NTOHL (0x6c506f6c), 
  ACE_NTOHL (0x6963793a), 
  ACE_NTOHL (0x312e3000),  // repository ID = IDL:omg.org/BiDirPolicy/BidirectionalPolicy:1.0
    20,
  ACE_NTOHL (0x42696469), 
  ACE_NTOHL (0x72656374), 
  ACE_NTOHL (0x696f6e61), 
  ACE_NTOHL (0x6c506f6c), 
  ACE_NTOHL (0x69637900),  // name = BidirectionalPolicy
  };

static CORBA::TypeCode _tc_TAO_tc_BiDirPolicy_BidirectionalPolicy (
    CORBA::tk_objref,
    sizeof (_oc_BiDirPolicy_BidirectionalPolicy),
    (char *) &_oc_BiDirPolicy_BidirectionalPolicy,
    0,
    sizeof (BiDirPolicy::BidirectionalPolicy)
  );

TAO_NAMESPACE_TYPE (CORBA::TypeCode_ptr)
TAO_NAMESPACE_BEGIN (BiDirPolicy)
TAO_NAMESPACE_DEFINE (
    ::CORBA::TypeCode_ptr,
    _tc_BidirectionalPolicy,
    &_tc_TAO_tc_BiDirPolicy_BidirectionalPolicy
  )
TAO_NAMESPACE_END

