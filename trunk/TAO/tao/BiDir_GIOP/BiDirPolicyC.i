// -*- C++ -*-
//
// $Id$

// ****  Code generated by the The ACE ORB (TAO) IDL Compiler ****
// TAO and the TAO IDL Compiler have been developed by:
//       Center for Distributed Object Computing
//       Washington University
//       St. Louis, MO
//       USA
//       http://www.cs.wustl.edu/~schmidt/doc-center.html
// and
//       Distributed Object Computing Laboratory
//       University of California at Irvine
//       Irvine, CA
//       USA
//       http://doc.ece.uci.edu/
//
// Information about TAO is available at:
//     http://www.cs.wustl.edu/~schmidt/TAO.html


#if !defined (_BIDIRPOLICY_BIDIRECTIONALPOLICY___VAR_CI_)
#define _BIDIRPOLICY_BIDIRECTIONALPOLICY___VAR_CI_

// *************************************************************
// Inline operations for class BiDirPolicy::BidirectionalPolicy_var
// *************************************************************

ACE_INLINE
BiDirPolicy::BidirectionalPolicy_var::BidirectionalPolicy_var (void) // default constructor
  : ptr_ (BidirectionalPolicy::_nil ())
{}

ACE_INLINE ::BiDirPolicy::BidirectionalPolicy_ptr
BiDirPolicy::BidirectionalPolicy_var::ptr (void) const
{
  return this->ptr_;
}

ACE_INLINE
BiDirPolicy::BidirectionalPolicy_var::BidirectionalPolicy_var (const ::BiDirPolicy::BidirectionalPolicy_var &p) // copy constructor
  : TAO_Base_var (),
    ptr_ (BidirectionalPolicy::_duplicate (p.ptr ()))
{}

ACE_INLINE
BiDirPolicy::BidirectionalPolicy_var::~BidirectionalPolicy_var (void) // destructor
{
  CORBA::release (this->ptr_);
}

ACE_INLINE BiDirPolicy::BidirectionalPolicy_var &
BiDirPolicy::BidirectionalPolicy_var::operator= (BidirectionalPolicy_ptr p)
{
  CORBA::release (this->ptr_);
  this->ptr_ = p;
  return *this;
}

ACE_INLINE BiDirPolicy::BidirectionalPolicy_var &
BiDirPolicy::BidirectionalPolicy_var::operator= (const ::BiDirPolicy::BidirectionalPolicy_var &p)
{
  if (this != &p)
  {
    CORBA::release (this->ptr_);
    this->ptr_ = ::BiDirPolicy::BidirectionalPolicy::_duplicate (p.ptr ());
  }
  return *this;
}

ACE_INLINE 
BiDirPolicy::BidirectionalPolicy_var::operator const ::BiDirPolicy::BidirectionalPolicy_ptr &() const // cast
{
  return this->ptr_;
}

ACE_INLINE 
BiDirPolicy::BidirectionalPolicy_var::operator ::BiDirPolicy::BidirectionalPolicy_ptr &() // cast 
{
  return this->ptr_;
}

ACE_INLINE ::BiDirPolicy::BidirectionalPolicy_ptr
BiDirPolicy::BidirectionalPolicy_var::operator-> (void) const
{
  return this->ptr_;
}

ACE_INLINE ::BiDirPolicy::BidirectionalPolicy_ptr
BiDirPolicy::BidirectionalPolicy_var::in (void) const
{
  return this->ptr_;
}

ACE_INLINE ::BiDirPolicy::BidirectionalPolicy_ptr &
BiDirPolicy::BidirectionalPolicy_var::inout (void)
{
  return this->ptr_;
}

ACE_INLINE ::BiDirPolicy::BidirectionalPolicy_ptr &
BiDirPolicy::BidirectionalPolicy_var::out (void)
{
  CORBA::release (this->ptr_);
  this->ptr_ = ::BiDirPolicy::BidirectionalPolicy::_nil ();
  return this->ptr_;
}

ACE_INLINE ::BiDirPolicy::BidirectionalPolicy_ptr
BiDirPolicy::BidirectionalPolicy_var::_retn (void)
{
  // yield ownership of managed obj reference
  ::BiDirPolicy::BidirectionalPolicy_ptr val = this->ptr_;
  this->ptr_ = ::BiDirPolicy::BidirectionalPolicy::_nil ();
  return val;
}


#endif /* end #if !defined */


#if !defined (_BIDIRPOLICY_BIDIRECTIONALPOLICY___OUT_CI_)
#define _BIDIRPOLICY_BIDIRECTIONALPOLICY___OUT_CI_

// *************************************************************
// Inline operations for class BiDirPolicy::BidirectionalPolicy_out
// *************************************************************

ACE_INLINE
BiDirPolicy::BidirectionalPolicy_out::BidirectionalPolicy_out (BidirectionalPolicy_ptr &p)
  : ptr_ (p)
{
  this->ptr_ = ::BiDirPolicy::BidirectionalPolicy::_nil ();
}

ACE_INLINE
BiDirPolicy::BidirectionalPolicy_out::BidirectionalPolicy_out (BidirectionalPolicy_var &p) // constructor from _var
  : ptr_ (p.out ())
{
  CORBA::release (this->ptr_);
  this->ptr_ = ::BiDirPolicy::BidirectionalPolicy::_nil ();
}

ACE_INLINE
BiDirPolicy::BidirectionalPolicy_out::BidirectionalPolicy_out (const ::BiDirPolicy::BidirectionalPolicy_out &p) // copy constructor
  : ptr_ (ACE_const_cast (BidirectionalPolicy_out &, p).ptr_)
{}

ACE_INLINE ::BiDirPolicy::BidirectionalPolicy_out &
BiDirPolicy::BidirectionalPolicy_out::operator= (const ::BiDirPolicy::BidirectionalPolicy_out &p)
{
  this->ptr_ = ACE_const_cast (BidirectionalPolicy_out&, p).ptr_;
  return *this;
}

ACE_INLINE BiDirPolicy::BidirectionalPolicy_out &
BiDirPolicy::BidirectionalPolicy_out::operator= (const ::BiDirPolicy::BidirectionalPolicy_var &p)
{
  this->ptr_ = ::BiDirPolicy::BidirectionalPolicy::_duplicate (p.ptr ());
  return *this;
}

ACE_INLINE BiDirPolicy::BidirectionalPolicy_out &
BiDirPolicy::BidirectionalPolicy_out::operator= (BidirectionalPolicy_ptr p)
{
  this->ptr_ = p;
  return *this;
}

ACE_INLINE 
BiDirPolicy::BidirectionalPolicy_out::operator ::BiDirPolicy::BidirectionalPolicy_ptr &() // cast
{
  return this->ptr_;
}

ACE_INLINE ::BiDirPolicy::BidirectionalPolicy_ptr &
BiDirPolicy::BidirectionalPolicy_out::ptr (void) // ptr
{
  return this->ptr_;
}

ACE_INLINE ::BiDirPolicy::BidirectionalPolicy_ptr
BiDirPolicy::BidirectionalPolicy_out::operator-> (void)
{
  return this->ptr_;
}


#endif /* end #if !defined */

