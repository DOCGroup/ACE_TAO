// -*- C++ -*-
//
// $Id$

// ****  Code generated by the The ACE ORB (TAO) IDL Compiler ****
// TAO and the TAO IDL Compiler have been developed by:
//       Center for Distributed Object Computing
//       Washington University
//       St. Louis, MO
//       USA
//       http://www.cs.wustl.edu/~schmidt/doc-center.html
// and
//       Distributed Object Computing Laboratory
//       University of California at Irvine
//       Irvine, CA
//       USA
//       http://doc.ece.uci.edu/
// and
//       Institute for Software Integrated Systems
//       Vanderbilt University
//       Nashville, TN
//       USA
//       http://www.isis.vanderbilt.edu/
//
// Information about TAO is available at:
//     http://www.cs.wustl.edu/~schmidt/TAO.html

#include "RTScheduler.h"
#include "tao/Null_RefCount_Policy.h"
#include "tao/TypeCode_Constants.h"
#include "tao/Alias_TypeCode.h"
#include "tao/TypeCode_Enumerator.h"
#include "tao/Enum_TypeCode.h"
#include "tao/Objref_TypeCode.h"
#include "tao/Sequence_TypeCode.h"
#include "tao/String_TypeCode.h"
#include "tao/Struct_TypeCode.h"

// TAO_IDL - Generated from
// be\be_visitor_typecode/objref_typecode.cpp:73

static TAO::TypeCode::Objref<char const *,
                             CORBA::tk_local_interface,
                             TAO::Null_RefCount_Policy>
  _tao_tc_RTScheduling_ThreadAction (
    "IDL:RTScheduling/ThreadAction:1.0",
    "ThreadAction");
  
namespace RTScheduling
{
  ::CORBA::TypeCode_ptr const _tc_ThreadAction =
    &_tao_tc_RTScheduling_ThreadAction;
}



// TAO_IDL - Generated from
// be\be_visitor_typecode/enum_typecode.cpp:34

static TAO::TypeCode::Enumerator<char const *> const _tao_enumerators_RTScheduling_DistributableThread_DT_State[] =
  {
    { "ACTIVE" },
    { "CANCELLED" }
    
  };

static TAO::TypeCode::Enum<char const *,
                           TAO::TypeCode::Enumerator<char const *> const *,
                           TAO::Null_RefCount_Policy>
  _tao_tc_RTScheduling_DistributableThread_DT_State (
    "IDL:RTScheduling/DistributableThread/DT_State:1.0",
    "DT_State",
    _tao_enumerators_RTScheduling_DistributableThread_DT_State,
    2);
  
::CORBA::TypeCode_ptr const RTScheduling::DistributableThread::_tc_DT_State =
  &_tao_tc_RTScheduling_DistributableThread_DT_State;

// TAO_IDL - Generated from
// be\be_visitor_typecode/objref_typecode.cpp:73

static TAO::TypeCode::Objref<char const *,
                             CORBA::tk_local_interface,
                             TAO::Null_RefCount_Policy>
  _tao_tc_RTScheduling_DistributableThread (
    "IDL:RTScheduling/DistributableThread:1.0",
    "DistributableThread");
  
namespace RTScheduling
{
  ::CORBA::TypeCode_ptr const _tc_DistributableThread =
    &_tao_tc_RTScheduling_DistributableThread;
}



// TAO_IDL - Generated from
// be\be_visitor_typecode/struct_typecode.cpp:34

static TAO::TypeCode::Struct_Field<char const *> const * const _tao_fields_RTScheduling_Current_UNSUPPORTED_SCHEDULING_DISCIPLINE = 0;
static TAO::TypeCode::Struct<char const *,
                             TAO::TypeCode::Struct_Field<char const *> const *,
                             CORBA::tk_except,
                             TAO::Null_RefCount_Policy>
  _tao_tc_RTScheduling_Current_UNSUPPORTED_SCHEDULING_DISCIPLINE (
    "IDL:RTScheduling/Current/UNSUPPORTED_SCHEDULING_DISCIPLINE:1.0",
    "UNSUPPORTED_SCHEDULING_DISCIPLINE",
    _tao_fields_RTScheduling_Current_UNSUPPORTED_SCHEDULING_DISCIPLINE,
    0);
  
::CORBA::TypeCode_ptr const RTScheduling::Current::_tc_UNSUPPORTED_SCHEDULING_DISCIPLINE =
  &_tao_tc_RTScheduling_Current_UNSUPPORTED_SCHEDULING_DISCIPLINE;

// TAO_IDL - Generated from
// be\be_visitor_typecode/alias_typecode.cpp:31



// TAO_IDL - Generated from
// be\be_visitor_typecode/typecode_defn.cpp:808

namespace TAO
{
  namespace TypeCode
  {
    TAO::TypeCode::Sequence<TAO::Null_RefCount_Policy>
      RTScheduling_Current_IdType_0 (
        CORBA::tk_sequence,
        &CORBA::_tc_octet,
        0U);
      
    ::CORBA::TypeCode_ptr const tc_RTScheduling_Current_IdType_0 =
      &RTScheduling_Current_IdType_0;
    
  }
}

static TAO::TypeCode::Alias<char const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_RTScheduling_Current_IdType (
    "IDL:RTScheduling/Current/IdType:1.0",
    "IdType",
    &TAO::TypeCode::tc_RTScheduling_Current_IdType_0);
  
::CORBA::TypeCode_ptr const RTScheduling::Current::_tc_IdType =
  &_tao_tc_RTScheduling_Current_IdType;

// TAO_IDL - Generated from
// be\be_visitor_typecode/alias_typecode.cpp:31



// TAO_IDL - Generated from
// be\be_visitor_typecode/typecode_defn.cpp:808

namespace TAO
{
  namespace TypeCode
  {
    TAO::TypeCode::Sequence<TAO::Null_RefCount_Policy>
      RTScheduling_Current_NameList_0 (
        CORBA::tk_sequence,
        &CORBA::_tc_string,
        0U);
      
    ::CORBA::TypeCode_ptr const tc_RTScheduling_Current_NameList_0 =
      &RTScheduling_Current_NameList_0;
    
  }
}

static TAO::TypeCode::Alias<char const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_RTScheduling_Current_NameList (
    "IDL:RTScheduling/Current/NameList:1.0",
    "NameList",
    &TAO::TypeCode::tc_RTScheduling_Current_NameList_0);
  
::CORBA::TypeCode_ptr const RTScheduling::Current::_tc_NameList =
  &_tao_tc_RTScheduling_Current_NameList;

// TAO_IDL - Generated from
// be\be_visitor_typecode/objref_typecode.cpp:73

static TAO::TypeCode::Objref<char const *,
                             CORBA::tk_local_interface,
                             TAO::Null_RefCount_Policy>
  _tao_tc_RTScheduling_Current (
    "IDL:RTScheduling/Current:1.0",
    "Current");
  
namespace RTScheduling
{
  ::CORBA::TypeCode_ptr const _tc_Current =
    &_tao_tc_RTScheduling_Current;
}



// TAO_IDL - Generated from
// be\be_visitor_typecode/objref_typecode.cpp:73

static TAO::TypeCode::Objref<char const *,
                             CORBA::tk_local_interface,
                             TAO::Null_RefCount_Policy>
  _tao_tc_RTScheduling_ResourceManager (
    "IDL:RTScheduling/ResourceManager:1.0",
    "ResourceManager");
  
namespace RTScheduling
{
  ::CORBA::TypeCode_ptr const _tc_ResourceManager =
    &_tao_tc_RTScheduling_ResourceManager;
}



// TAO_IDL - Generated from
// be\be_visitor_typecode/struct_typecode.cpp:34

static TAO::TypeCode::Struct_Field<char const *> const * const _tao_fields_RTScheduling_Scheduler_INCOMPATIBLE_SCHEDULING_DISCIPLINES = 0;
static TAO::TypeCode::Struct<char const *,
                             TAO::TypeCode::Struct_Field<char const *> const *,
                             CORBA::tk_except,
                             TAO::Null_RefCount_Policy>
  _tao_tc_RTScheduling_Scheduler_INCOMPATIBLE_SCHEDULING_DISCIPLINES (
    "IDL:RTScheduling/Scheduler/INCOMPATIBLE_SCHEDULING_DISCIPLINES:1.0",
    "INCOMPATIBLE_SCHEDULING_DISCIPLINES",
    _tao_fields_RTScheduling_Scheduler_INCOMPATIBLE_SCHEDULING_DISCIPLINES,
    0);
  
::CORBA::TypeCode_ptr const RTScheduling::Scheduler::_tc_INCOMPATIBLE_SCHEDULING_DISCIPLINES =
  &_tao_tc_RTScheduling_Scheduler_INCOMPATIBLE_SCHEDULING_DISCIPLINES;

// TAO_IDL - Generated from
// be\be_visitor_typecode/objref_typecode.cpp:73

static TAO::TypeCode::Objref<char const *,
                             CORBA::tk_local_interface,
                             TAO::Null_RefCount_Policy>
  _tao_tc_RTScheduling_Scheduler (
    "IDL:RTScheduling/Scheduler:1.0",
    "Scheduler");
  
namespace RTScheduling
{
  ::CORBA::TypeCode_ptr const _tc_Scheduler =
    &_tao_tc_RTScheduling_Scheduler;
}



#if defined (ACE_HAS_EXPLICIT_TEMPLATE_INSTANTIATION)

#elif defined (ACE_HAS_TEMPLATE_INSTANTIATION_PRAGMA)

#endif /* !ACE_HAS_EXPLICIT_TEMPLATE_INSTANTIATION */ 
