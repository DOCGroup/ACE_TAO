/* -*- C++ -*- $Id$ */

// ******  Code generated by the The ACE ORB (TAO) IDL Compiler *******
// TAO and the TAO IDL Compiler have been developed by the Center for
// Distributed Object Computing at Washington University, St. Louis.
//
// Information about TAO is available at:
//                 http://www.cs.wustl.edu/~schmidt/TAO.html

// *************************************************************
// Inline operations for class TAO::PrioritySpecification_var
// *************************************************************

ACE_INLINE
TAO::PrioritySpecification_var::PrioritySpecification_var (void) // default constructor
  : ptr_ (0)
{}

ACE_INLINE
TAO::PrioritySpecification_var::PrioritySpecification_var (TAO::PrioritySpecification *p)
  : ptr_ (p)
{}

ACE_INLINE
TAO::PrioritySpecification_var::PrioritySpecification_var (const TAO::PrioritySpecification_var &p) // copy constructor
{
  if (p.ptr_)
    ACE_NEW (this->ptr_, TAO::PrioritySpecification (*p.ptr_));
  else
    this->ptr_ = 0;
}

ACE_INLINE
TAO::PrioritySpecification_var::~PrioritySpecification_var (void) // destructor
{
  delete this->ptr_;
}

ACE_INLINE TAO::PrioritySpecification_var &
TAO::PrioritySpecification_var::operator= (TAO::PrioritySpecification *p)
{
  delete this->ptr_;
  this->ptr_ = p;
  return *this;
}

ACE_INLINE TAO::PrioritySpecification_var &
TAO::PrioritySpecification_var::operator= (const TAO::PrioritySpecification_var &p)
{
  if (this != &p)
  {
    delete this->ptr_;
    ACE_NEW_RETURN (this->ptr_, TAO::PrioritySpecification (*p.ptr_), *this);
  }
  return *this;
}

ACE_INLINE const TAO::PrioritySpecification *
TAO::PrioritySpecification_var::operator-> (void) const
{
  return this->ptr_;
}

ACE_INLINE TAO::PrioritySpecification *
TAO::PrioritySpecification_var::operator-> (void)
{
  return this->ptr_;
}

ACE_INLINE 
TAO::PrioritySpecification_var::operator const TAO::PrioritySpecification &() const // cast
{
  return *this->ptr_;
}

ACE_INLINE 
TAO::PrioritySpecification_var::operator TAO::PrioritySpecification &() // cast 
{
  return *this->ptr_;
}

ACE_INLINE 
TAO::PrioritySpecification_var::operator TAO::PrioritySpecification &() const// cast 
{
  return *this->ptr_;
}

ACE_INLINE const TAO::PrioritySpecification &
TAO::PrioritySpecification_var::in (void) const
{
  return *this->ptr_;
}

ACE_INLINE TAO::PrioritySpecification &
TAO::PrioritySpecification_var::inout (void)
{
  return *this->ptr_;
}

// mapping for fixed size 
ACE_INLINE TAO::PrioritySpecification &
TAO::PrioritySpecification_var::out (void)
{
  return *this->ptr_;
}

ACE_INLINE TAO::PrioritySpecification
TAO::PrioritySpecification_var::_retn (void)
{
  return *this->ptr_;
}

ACE_INLINE TAO::PrioritySpecification *
TAO::PrioritySpecification_var::ptr (void) const
{
  return this->ptr_;
}

ACE_INLINE
TAO::ClientPriorityPolicy::ClientPriorityPolicy (void) // default constructor
{}

ACE_INLINE
TAO::ClientPriorityPolicy::ClientPriorityPolicy (TAO_Stub *objref, TAO_ServantBase *_tao_servant, CORBA::Boolean _tao_collocated) // constructor
  : CORBA_Object (objref, _tao_servant, _tao_collocated)
{}

ACE_INLINE
TAO::ClientPriorityPolicy::~ClientPriorityPolicy (void) // destructor
{}


#if !defined (_TAO_CLIENTPRIORITYPOLICY___VAR_CI_)
#define _TAO_CLIENTPRIORITYPOLICY___VAR_CI_

// *************************************************************
// Inline operations for class TAO::ClientPriorityPolicy_var
// *************************************************************

ACE_INLINE
TAO::ClientPriorityPolicy_var::ClientPriorityPolicy_var (void) // default constructor
  : ptr_ (TAO::ClientPriorityPolicy::_nil ())
{}

ACE_INLINE
TAO::ClientPriorityPolicy_var::ClientPriorityPolicy_var (TAO::ClientPriorityPolicy_ptr p)
  : ptr_ (p)
{}

ACE_INLINE TAO::ClientPriorityPolicy_ptr 
TAO::ClientPriorityPolicy_var::ptr (void) const
{
  return this->ptr_;
}

ACE_INLINE
TAO::ClientPriorityPolicy_var::ClientPriorityPolicy_var (const TAO::ClientPriorityPolicy_var &p) // copy constructor
  : ptr_ (TAO::ClientPriorityPolicy::_duplicate (p.ptr ()))
{}

ACE_INLINE
TAO::ClientPriorityPolicy_var::~ClientPriorityPolicy_var (void) // destructor
{
  CORBA::release (this->ptr_);
}

ACE_INLINE TAO::ClientPriorityPolicy_var &
TAO::ClientPriorityPolicy_var::operator= (TAO::ClientPriorityPolicy_ptr p)
{
  CORBA::release (this->ptr_);
  this->ptr_ = p;
  return *this;
}

ACE_INLINE TAO::ClientPriorityPolicy_var &
TAO::ClientPriorityPolicy_var::operator= (const TAO::ClientPriorityPolicy_var &p)
{
  if (this != &p)
  {
    CORBA::release (this->ptr_);
    this->ptr_ = TAO::ClientPriorityPolicy::_duplicate (p.ptr ());
  }
  return *this;
}

ACE_INLINE 
TAO::ClientPriorityPolicy_var::operator const TAO::ClientPriorityPolicy_ptr &() const // cast
{
  return this->ptr_;
}

ACE_INLINE 
TAO::ClientPriorityPolicy_var::operator TAO::ClientPriorityPolicy_ptr &() // cast 
{
  return this->ptr_;
}

ACE_INLINE TAO::ClientPriorityPolicy_ptr 
TAO::ClientPriorityPolicy_var::operator-> (void) const
{
  return this->ptr_;
}

ACE_INLINE TAO::ClientPriorityPolicy_ptr
TAO::ClientPriorityPolicy_var::in (void) const
{
  return this->ptr_;
}

ACE_INLINE TAO::ClientPriorityPolicy_ptr &
TAO::ClientPriorityPolicy_var::inout (void)
{
  return this->ptr_;
}

ACE_INLINE TAO::ClientPriorityPolicy_ptr &
TAO::ClientPriorityPolicy_var::out (void)
{
  CORBA::release (this->ptr_);
  this->ptr_ = TAO::ClientPriorityPolicy::_nil ();
  return this->ptr_;
}

ACE_INLINE TAO::ClientPriorityPolicy_ptr 
TAO::ClientPriorityPolicy_var::_retn (void)
{
  // yield ownership of managed obj reference
  TAO::ClientPriorityPolicy_ptr val = this->ptr_;
  this->ptr_ = TAO::ClientPriorityPolicy::_nil ();
  return val;
}


#endif /* end #if !defined */


#if !defined (_TAO_CLIENTPRIORITYPOLICY___OUT_CI_)
#define _TAO_CLIENTPRIORITYPOLICY___OUT_CI_

// *************************************************************
// Inline operations for class TAO::ClientPriorityPolicy_out
// *************************************************************

ACE_INLINE
TAO::ClientPriorityPolicy_out::ClientPriorityPolicy_out (TAO::ClientPriorityPolicy_ptr &p)
  : ptr_ (p)
{
  this->ptr_ = TAO::ClientPriorityPolicy::_nil ();
}

ACE_INLINE
TAO::ClientPriorityPolicy_out::ClientPriorityPolicy_out (TAO::ClientPriorityPolicy_var &p) // constructor from _var
  : ptr_ (p.out ())
{
  CORBA::release (this->ptr_);
  this->ptr_ = TAO::ClientPriorityPolicy::_nil ();
}

ACE_INLINE
TAO::ClientPriorityPolicy_out::ClientPriorityPolicy_out (const TAO::ClientPriorityPolicy_out &p) // copy constructor
  : ptr_ (ACE_const_cast (TAO::ClientPriorityPolicy_out&,p).ptr_)
{}

ACE_INLINE TAO::ClientPriorityPolicy_out &
TAO::ClientPriorityPolicy_out::operator= (const TAO::ClientPriorityPolicy_out &p)
{
  this->ptr_ = ACE_const_cast (TAO::ClientPriorityPolicy_out&,p).ptr_;
  return *this;
}

ACE_INLINE TAO::ClientPriorityPolicy_out &
TAO::ClientPriorityPolicy_out::operator= (const TAO::ClientPriorityPolicy_var &p)
{
  this->ptr_ = TAO::ClientPriorityPolicy::_duplicate (p.ptr ());
  return *this;
}

ACE_INLINE TAO::ClientPriorityPolicy_out &
TAO::ClientPriorityPolicy_out::operator= (TAO::ClientPriorityPolicy_ptr p)
{
  this->ptr_ = p;
  return *this;
}

ACE_INLINE 
TAO::ClientPriorityPolicy_out::operator TAO::ClientPriorityPolicy_ptr &() // cast
{
  return this->ptr_;
}

ACE_INLINE TAO::ClientPriorityPolicy_ptr &
TAO::ClientPriorityPolicy_out::ptr (void) // ptr
{
  return this->ptr_;
}

ACE_INLINE TAO::ClientPriorityPolicy_ptr 
TAO::ClientPriorityPolicy_out::operator-> (void)
{
  return this->ptr_;
}


#endif /* end #if !defined */

ACE_INLINE CORBA::Boolean operator<< (TAO_OutputCDR &strm, const TAO::PrioritySpecification &_tao_aggregate)
{
  if (
    (strm << _tao_aggregate.mode) &&
    (strm << _tao_aggregate.min_priority) &&
    (strm << _tao_aggregate.max_priority)
  )
    return 1;
  else
    return 0;
  
}

ACE_INLINE CORBA::Boolean operator>> (TAO_InputCDR &strm, TAO::PrioritySpecification &_tao_aggregate)
{
  if (
    (strm >> _tao_aggregate.mode) &&
    (strm >> _tao_aggregate.min_priority) &&
    (strm >> _tao_aggregate.max_priority)
  )
    return 1;
  else
    return 0;
  
}

