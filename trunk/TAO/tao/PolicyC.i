/* -*- C++ -*- $Id$ */

// ******  Code generated by the The ACE ORB (TAO) IDL Compiler *******
// TAO and the TAO IDL Compiler have been developed by the Center for
// Distributed Object Computing at Washington University, St. Louis.
//
// Information about TAO is available at:
//                 http://www.cs.wustl.edu/~schmidt/TAO.html

// *************************************************************
// Inline operations for exception CORBA_PolicyError
// *************************************************************

// *************************************************************
// Inline operations for exception CORBA_InvalidPolicies
// *************************************************************


#if !defined (TAO_USE_SEQUENCE_TEMPLATES)
  
#if !defined (__TAO_UNBOUNDED_SEQUENCE_CORBA_INVALIDPOLICIES__TAO_SEQ_USHORT_CI_)
#define __TAO_UNBOUNDED_SEQUENCE_CORBA_INVALIDPOLICIES__TAO_SEQ_USHORT_CI_

  // = Static operations.
  ACE_INLINE CORBA::UShort *
  CORBA_InvalidPolicies::_TAO_Unbounded_Sequence_CORBA_InvalidPolicies__tao_seq_UShort::allocbuf (CORBA::ULong size)
  // Allocate storage for the sequence.
  {
    CORBA::UShort *retval = 0;
    ACE_NEW_RETURN (retval, CORBA::UShort[size], 0);
    return retval;
  }
  
  ACE_INLINE void CORBA_InvalidPolicies::_TAO_Unbounded_Sequence_CORBA_InvalidPolicies__tao_seq_UShort::freebuf (CORBA::UShort *buffer)
  // Free the sequence.
  {
    delete [] buffer;
  }
  
  ACE_INLINE
  CORBA_InvalidPolicies::_TAO_Unbounded_Sequence_CORBA_InvalidPolicies__tao_seq_UShort::_TAO_Unbounded_Sequence_CORBA_InvalidPolicies__tao_seq_UShort (void) // Default constructor.
  {
  }
  
  ACE_INLINE
  CORBA_InvalidPolicies::_TAO_Unbounded_Sequence_CORBA_InvalidPolicies__tao_seq_UShort::_TAO_Unbounded_Sequence_CORBA_InvalidPolicies__tao_seq_UShort (CORBA::ULong maximum) // Constructor using a maximum length value.
    : TAO_Unbounded_Base_Sequence (maximum, _TAO_Unbounded_Sequence_CORBA_InvalidPolicies__tao_seq_UShort::allocbuf (maximum))
  {
  }
  
  ACE_INLINE
  CORBA_InvalidPolicies::_TAO_Unbounded_Sequence_CORBA_InvalidPolicies__tao_seq_UShort::_TAO_Unbounded_Sequence_CORBA_InvalidPolicies__tao_seq_UShort (CORBA::ULong maximum,
    CORBA::ULong length,
    CORBA::UShort *data,
    CORBA::Boolean release)
  : TAO_Unbounded_Base_Sequence (maximum, length, data, release)
  {
  }
  
  ACE_INLINE
  CORBA_InvalidPolicies::_TAO_Unbounded_Sequence_CORBA_InvalidPolicies__tao_seq_UShort::_TAO_Unbounded_Sequence_CORBA_InvalidPolicies__tao_seq_UShort (const _TAO_Unbounded_Sequence_CORBA_InvalidPolicies__tao_seq_UShort &rhs)
  // Copy constructor.
    : TAO_Unbounded_Base_Sequence (rhs)
  {
    if (rhs.buffer_ != 0)
    {
      CORBA::UShort *tmp1 = _TAO_Unbounded_Sequence_CORBA_InvalidPolicies__tao_seq_UShort::allocbuf (this->maximum_);
      CORBA::UShort * const tmp2 = ACE_reinterpret_cast (CORBA::UShort * ACE_CAST_CONST, rhs.buffer_);
      
      for (CORBA::ULong i = 0; i < this->length_; ++i)
        tmp1[i] = tmp2[i];
      
      this->buffer_ = tmp1;
    }
    else
    {
      this->buffer_ = 0;
    }
  }
  
  ACE_INLINE CORBA_InvalidPolicies::_TAO_Unbounded_Sequence_CORBA_InvalidPolicies__tao_seq_UShort &
  CORBA_InvalidPolicies::_TAO_Unbounded_Sequence_CORBA_InvalidPolicies__tao_seq_UShort::operator= (const _TAO_Unbounded_Sequence_CORBA_InvalidPolicies__tao_seq_UShort &rhs)
  // Assignment operator.
  {
    if (this == &rhs)
      return *this;
    
    if (this->release_)
    {
      if (this->maximum_ < rhs.maximum_)
      {
        // free the old buffer
        CORBA::UShort *tmp = ACE_reinterpret_cast (CORBA::UShort *, this->buffer_);
        _TAO_Unbounded_Sequence_CORBA_InvalidPolicies__tao_seq_UShort::freebuf (tmp);
        this->buffer_ = _TAO_Unbounded_Sequence_CORBA_InvalidPolicies__tao_seq_UShort::allocbuf (rhs.maximum_);
      }
    }
    else
      this->buffer_ = _TAO_Unbounded_Sequence_CORBA_InvalidPolicies__tao_seq_UShort::allocbuf (rhs.maximum_);
    
    TAO_Unbounded_Base_Sequence::operator= (rhs);
    
    CORBA::UShort *tmp1 = ACE_reinterpret_cast (CORBA::UShort *, this->buffer_);
    CORBA::UShort * const tmp2 = ACE_reinterpret_cast (CORBA::UShort * ACE_CAST_CONST, rhs.buffer_);
    
    for (CORBA::ULong i = 0; i < this->length_; ++i)
      tmp1[i] = tmp2[i];
    
    return *this;
  }
  
  // = Accessors.
  ACE_INLINE CORBA::UShort &
  CORBA_InvalidPolicies::_TAO_Unbounded_Sequence_CORBA_InvalidPolicies__tao_seq_UShort::operator[] (CORBA::ULong i)
  // operator []
  {
    ACE_ASSERT (i < this->maximum_);
    CORBA::UShort* tmp = ACE_reinterpret_cast(CORBA::UShort*,this->buffer_);
    return tmp[i];
  }
  
  ACE_INLINE const CORBA::UShort &
  CORBA_InvalidPolicies::_TAO_Unbounded_Sequence_CORBA_InvalidPolicies__tao_seq_UShort::operator[] (CORBA::ULong i) const
  // operator []
  {
    ACE_ASSERT (i < this->maximum_);
    CORBA::UShort * const tmp = ACE_reinterpret_cast (CORBA::UShort* ACE_CAST_CONST, this->buffer_);
    return tmp[i];
  }
  
  // Implement the TAO_Base_Sequence methods (see Sequence.h)
  
  ACE_INLINE CORBA::UShort *
  CORBA_InvalidPolicies::_TAO_Unbounded_Sequence_CORBA_InvalidPolicies__tao_seq_UShort::get_buffer (CORBA::Boolean orphan)
  {
    CORBA::UShort *result = 0;
    if (orphan == 0)
    {
      // We retain ownership.
      if (this->buffer_ == 0)
      {
        result = _TAO_Unbounded_Sequence_CORBA_InvalidPolicies__tao_seq_UShort::allocbuf (this->length_);
        this->buffer_ = result;
      }
      else
      {
        result = ACE_reinterpret_cast (CORBA::UShort*, this->buffer_);
      }
    }
    else // if (orphan == 1)
    {
      if (this->release_ != 0)
      {
        // We set the state back to default and relinquish
        // ownership.
        result = ACE_reinterpret_cast(CORBA::UShort*,this->buffer_);
        this->maximum_ = 0;
        this->length_ = 0;
        this->buffer_ = 0;
        this->release_ = 0;
      }
    }
    return result;
  }
  
  ACE_INLINE const CORBA::UShort *
  CORBA_InvalidPolicies::_TAO_Unbounded_Sequence_CORBA_InvalidPolicies__tao_seq_UShort::get_buffer (void) const
  {
    return ACE_reinterpret_cast(const CORBA::UShort * ACE_CAST_CONST, this->buffer_);
  }
  
  ACE_INLINE void
  CORBA_InvalidPolicies::_TAO_Unbounded_Sequence_CORBA_InvalidPolicies__tao_seq_UShort::replace (CORBA::ULong max,
  CORBA::ULong length,
  CORBA::UShort *data,
  CORBA::Boolean release)
  {
    this->maximum_ = max;
    this->length_ = length;
    if (this->buffer_ && this->release_ == 1)
    {
      CORBA::UShort *tmp = ACE_reinterpret_cast(CORBA::UShort*,this->buffer_);
      _TAO_Unbounded_Sequence_CORBA_InvalidPolicies__tao_seq_UShort::freebuf (tmp);
    }
    this->buffer_ = data;
    this->release_ = release;
  }
  
#endif /* end #if !defined */


#endif /* !TAO_USE_SEQUENCE_TEMPLATES */ 

#if !defined (_CORBA_INVALIDPOLICIES__TAO_SEQ_USHORT_CI_)
#define _CORBA_INVALIDPOLICIES__TAO_SEQ_USHORT_CI_

// *************************************************************
// Inline operations for class CORBA_InvalidPolicies::_tao_seq_UShort_var
// *************************************************************

ACE_INLINE
CORBA_InvalidPolicies::_tao_seq_UShort_var::_tao_seq_UShort_var (void) // default constructor
  : ptr_ (0)
{}

ACE_INLINE
CORBA_InvalidPolicies::_tao_seq_UShort_var::_tao_seq_UShort_var (_tao_seq_UShort *p)
  : ptr_ (p)
{}

ACE_INLINE
CORBA_InvalidPolicies::_tao_seq_UShort_var::_tao_seq_UShort_var (const ::CORBA_InvalidPolicies::_tao_seq_UShort_var &p) // copy constructor
{
  if (p.ptr_)
    ACE_NEW (this->ptr_, ::CORBA_InvalidPolicies::_tao_seq_UShort (*p.ptr_));
  else
    this->ptr_ = 0;
}

// fixed-size base types only
ACE_INLINE
CORBA_InvalidPolicies::_tao_seq_UShort_var::_tao_seq_UShort_var (const ::CORBA_InvalidPolicies::_tao_seq_UShort &p)
{
  ACE_NEW (this->ptr_, ::CORBA_InvalidPolicies::_tao_seq_UShort (p));
}

ACE_INLINE
CORBA_InvalidPolicies::_tao_seq_UShort_var::~_tao_seq_UShort_var (void) // destructor
{
  delete this->ptr_;
}

ACE_INLINE CORBA_InvalidPolicies::_tao_seq_UShort_var &
CORBA_InvalidPolicies::_tao_seq_UShort_var::operator= (_tao_seq_UShort *p)
{
  delete this->ptr_;
  this->ptr_ = p;
  return *this;
}

ACE_INLINE CORBA_InvalidPolicies::_tao_seq_UShort_var &
CORBA_InvalidPolicies::_tao_seq_UShort_var::operator= (const ::CORBA_InvalidPolicies::_tao_seq_UShort_var &p) // deep copy
{
  if (this != &p)
  {
    delete this->ptr_;
    ACE_NEW_RETURN (this->ptr_, ::CORBA_InvalidPolicies::_tao_seq_UShort (*p.ptr_), *this);
  }
  return *this;
}

// fixed-size types only
ACE_INLINE ::CORBA_InvalidPolicies::_tao_seq_UShort_var &
CORBA_InvalidPolicies::_tao_seq_UShort_var::operator= (const ::CORBA_InvalidPolicies::_tao_seq_UShort &p)
{
  if (this->ptr_ != &p)
  {
    delete this->ptr_;
    ACE_NEW_RETURN (this->ptr_, ::CORBA_InvalidPolicies::_tao_seq_UShort (p), *this);
  }
  return *this;
}

ACE_INLINE const ::CORBA_InvalidPolicies::_tao_seq_UShort *
CORBA_InvalidPolicies::_tao_seq_UShort_var::operator-> (void) const
{
  return this->ptr_;
}

ACE_INLINE ::CORBA_InvalidPolicies::_tao_seq_UShort *
CORBA_InvalidPolicies::_tao_seq_UShort_var::operator-> (void)
{
  return this->ptr_;
}

ACE_INLINE 
CORBA_InvalidPolicies::_tao_seq_UShort_var::operator const ::CORBA_InvalidPolicies::_tao_seq_UShort &() const // cast
{
  return *this->ptr_;
}

ACE_INLINE 
CORBA_InvalidPolicies::_tao_seq_UShort_var::operator ::CORBA_InvalidPolicies::_tao_seq_UShort &() // cast 
{
  return *this->ptr_;
}

ACE_INLINE 
CORBA_InvalidPolicies::_tao_seq_UShort_var::operator ::CORBA_InvalidPolicies::_tao_seq_UShort &() const // cast 
{
  return *this->ptr_;
}

ACE_INLINE CORBA::UShort &
CORBA_InvalidPolicies::_tao_seq_UShort_var::operator[] (CORBA::ULong index)
{
  return this->ptr_->operator[] (index);
}

ACE_INLINE const ::CORBA_InvalidPolicies::_tao_seq_UShort &
CORBA_InvalidPolicies::_tao_seq_UShort_var::in (void) const
{
  return *this->ptr_;
}

ACE_INLINE ::CORBA_InvalidPolicies::_tao_seq_UShort &
CORBA_InvalidPolicies::_tao_seq_UShort_var::inout (void)
{
  return *this->ptr_;
}

// mapping for variable size 
ACE_INLINE ::CORBA_InvalidPolicies::_tao_seq_UShort *&
CORBA_InvalidPolicies::_tao_seq_UShort_var::out (void)
{
  delete this->ptr_;
  this->ptr_ = 0;
  return this->ptr_;
}

ACE_INLINE ::CORBA_InvalidPolicies::_tao_seq_UShort *
CORBA_InvalidPolicies::_tao_seq_UShort_var::_retn (void)
{
  ::CORBA_InvalidPolicies::_tao_seq_UShort *tmp = this->ptr_;
  this->ptr_ = 0;
  return tmp;
}

ACE_INLINE ::CORBA_InvalidPolicies::_tao_seq_UShort *
CORBA_InvalidPolicies::_tao_seq_UShort_var::ptr (void) const
{
  return this->ptr_;
}

// *************************************************************
// Inline operations for class CORBA_InvalidPolicies::_tao_seq_UShort_out
// *************************************************************

ACE_INLINE
CORBA_InvalidPolicies::_tao_seq_UShort_out::_tao_seq_UShort_out (_tao_seq_UShort *&p)
  : ptr_ (p)
{
  this->ptr_ = 0;
}

ACE_INLINE
CORBA_InvalidPolicies::_tao_seq_UShort_out::_tao_seq_UShort_out (_tao_seq_UShort_var &p) // constructor from _var
  : ptr_ (p.out ())
{
  delete this->ptr_;
  this->ptr_ = 0;
}

ACE_INLINE
CORBA_InvalidPolicies::_tao_seq_UShort_out::_tao_seq_UShort_out (const ::CORBA_InvalidPolicies::_tao_seq_UShort_out &p) // copy constructor
  : ptr_ (ACE_const_cast (_tao_seq_UShort_out&, p).ptr_)
{}

ACE_INLINE ::CORBA_InvalidPolicies::_tao_seq_UShort_out &
CORBA_InvalidPolicies::_tao_seq_UShort_out::operator= (const ::CORBA_InvalidPolicies::_tao_seq_UShort_out &p)
{
  this->ptr_ = ACE_const_cast (_tao_seq_UShort_out&, p).ptr_;
  return *this;
}

ACE_INLINE ::CORBA_InvalidPolicies::_tao_seq_UShort_out &
CORBA_InvalidPolicies::_tao_seq_UShort_out::operator= (_tao_seq_UShort *p)
{
  this->ptr_ = p;
  return *this;
}

ACE_INLINE 
CORBA_InvalidPolicies::_tao_seq_UShort_out::operator ::CORBA_InvalidPolicies::_tao_seq_UShort *&() // cast
{
  return this->ptr_;
}

ACE_INLINE ::CORBA_InvalidPolicies::_tao_seq_UShort *&
CORBA_InvalidPolicies::_tao_seq_UShort_out::ptr (void) // ptr
{
  return this->ptr_;
}

ACE_INLINE ::CORBA_InvalidPolicies::_tao_seq_UShort *
CORBA_InvalidPolicies::_tao_seq_UShort_out::operator-> (void)
{
  return this->ptr_;
}

ACE_INLINE CORBA::UShort &
CORBA_InvalidPolicies::_tao_seq_UShort_out::operator[] (CORBA::ULong index)
{
  return this->ptr_->operator[] (index);
}


#endif /* end #if !defined */

ACE_INLINE
CORBA_Policy::CORBA_Policy (TAO_Stub *objref, TAO_ServantBase *_tao_servant, CORBA::Boolean _tao_collocated) // constructor
  : CORBA_Object (objref, _tao_servant, _tao_collocated)
{}


#if !defined (_CORBA_POLICY___VAR_CI_)
#define _CORBA_POLICY___VAR_CI_

// *************************************************************
// Inline operations for class CORBA_Policy_var
// *************************************************************

ACE_INLINE
CORBA_Policy_var::CORBA_Policy_var (void) // default constructor
  : ptr_ (CORBA_Policy::_nil ())
{}

ACE_INLINE ::CORBA_Policy_ptr
CORBA_Policy_var::ptr (void) const
{
  return this->ptr_;
}

ACE_INLINE
CORBA_Policy_var::CORBA_Policy_var (const ::CORBA_Policy_var &p) // copy constructor
  : TAO_Base_var (),
    ptr_ (CORBA_Policy::_duplicate (p.ptr ()))
{}

ACE_INLINE
CORBA_Policy_var::~CORBA_Policy_var (void) // destructor
{
  CORBA::release (this->ptr_);
}

ACE_INLINE CORBA_Policy_var &
CORBA_Policy_var::operator= (CORBA_Policy_ptr p)
{
  CORBA::release (this->ptr_);
  this->ptr_ = p;
  return *this;
}

ACE_INLINE CORBA_Policy_var &
CORBA_Policy_var::operator= (const ::CORBA_Policy_var &p)
{
  if (this != &p)
  {
    CORBA::release (this->ptr_);
    this->ptr_ = ::CORBA_Policy::_duplicate (p.ptr ());
  }
  return *this;
}

ACE_INLINE 
CORBA_Policy_var::operator const ::CORBA_Policy_ptr &() const // cast
{
  return this->ptr_;
}

ACE_INLINE 
CORBA_Policy_var::operator ::CORBA_Policy_ptr &() // cast 
{
  return this->ptr_;
}

ACE_INLINE ::CORBA_Policy_ptr
CORBA_Policy_var::operator-> (void) const
{
  return this->ptr_;
}

ACE_INLINE ::CORBA_Policy_ptr
CORBA_Policy_var::in (void) const
{
  return this->ptr_;
}

ACE_INLINE ::CORBA_Policy_ptr &
CORBA_Policy_var::inout (void)
{
  return this->ptr_;
}

ACE_INLINE ::CORBA_Policy_ptr &
CORBA_Policy_var::out (void)
{
  CORBA::release (this->ptr_);
  this->ptr_ = ::CORBA_Policy::_nil ();
  return this->ptr_;
}

ACE_INLINE ::CORBA_Policy_ptr
CORBA_Policy_var::_retn (void)
{
  // yield ownership of managed obj reference
  ::CORBA_Policy_ptr val = this->ptr_;
  this->ptr_ = ::CORBA_Policy::_nil ();
  return val;
}


#endif /* end #if !defined */


#if !defined (_CORBA_POLICY___OUT_CI_)
#define _CORBA_POLICY___OUT_CI_

// *************************************************************
// Inline operations for class CORBA_Policy_out
// *************************************************************

ACE_INLINE
CORBA_Policy_out::CORBA_Policy_out (CORBA_Policy_ptr &p)
  : ptr_ (p)
{
  this->ptr_ = ::CORBA_Policy::_nil ();
}

ACE_INLINE
CORBA_Policy_out::CORBA_Policy_out (CORBA_Policy_var &p) // constructor from _var
  : ptr_ (p.out ())
{
  CORBA::release (this->ptr_);
  this->ptr_ = ::CORBA_Policy::_nil ();
}

ACE_INLINE
CORBA_Policy_out::CORBA_Policy_out (const ::CORBA_Policy_out &p) // copy constructor
  : ptr_ (ACE_const_cast (CORBA_Policy_out &, p).ptr_)
{}

ACE_INLINE ::CORBA_Policy_out &
CORBA_Policy_out::operator= (const ::CORBA_Policy_out &p)
{
  this->ptr_ = ACE_const_cast (CORBA_Policy_out&, p).ptr_;
  return *this;
}

ACE_INLINE CORBA_Policy_out &
CORBA_Policy_out::operator= (const ::CORBA_Policy_var &p)
{
  this->ptr_ = ::CORBA_Policy::_duplicate (p.ptr ());
  return *this;
}

ACE_INLINE CORBA_Policy_out &
CORBA_Policy_out::operator= (CORBA_Policy_ptr p)
{
  this->ptr_ = p;
  return *this;
}

ACE_INLINE 
CORBA_Policy_out::operator ::CORBA_Policy_ptr &() // cast
{
  return this->ptr_;
}

ACE_INLINE ::CORBA_Policy_ptr &
CORBA_Policy_out::ptr (void) // ptr
{
  return this->ptr_;
}

ACE_INLINE ::CORBA_Policy_ptr
CORBA_Policy_out::operator-> (void)
{
  return this->ptr_;
}


#endif /* end #if !defined */


#if !defined (TAO_USE_SEQUENCE_TEMPLATES)
  
#if !defined (__TAO_UNBOUNDED_OBJECT_SEQUENCE_CORBA_POLICYLIST_CI_)
#define __TAO_UNBOUNDED_OBJECT_SEQUENCE_CORBA_POLICYLIST_CI_

  ACE_INLINE CORBA_Policy **
  _TAO_Unbounded_Object_Sequence_CORBA_PolicyList::allocbuf (CORBA::ULong nelems)
  {
    CORBA_Policy **buf = 0;
    
    ACE_NEW_RETURN (buf, CORBA_Policy*[nelems], 0);
    
    for (CORBA::ULong i = 0; i < nelems; i++)
      buf[i] = CORBA_Policy::_nil ();
    
    return buf;
  }
  
  ACE_INLINE void 
  _TAO_Unbounded_Object_Sequence_CORBA_PolicyList::freebuf (CORBA_Policy **buffer)
  {
    if (buffer == 0)
      return;
    delete[] buffer;
  }
  
  ACE_INLINE
  _TAO_Unbounded_Object_Sequence_CORBA_PolicyList::_TAO_Unbounded_Object_Sequence_CORBA_PolicyList (void)
  {
  }
  
  ACE_INLINE
  _TAO_Unbounded_Object_Sequence_CORBA_PolicyList::_TAO_Unbounded_Object_Sequence_CORBA_PolicyList (CORBA::ULong maximum)
    : TAO_Unbounded_Base_Sequence (maximum, _TAO_Unbounded_Object_Sequence_CORBA_PolicyList::allocbuf (maximum))
  {
  }
  
  ACE_INLINE
  _TAO_Unbounded_Object_Sequence_CORBA_PolicyList::_TAO_Unbounded_Object_Sequence_CORBA_PolicyList (CORBA::ULong maximum,
    CORBA::ULong length,
    CORBA_Policy* *value,
    CORBA::Boolean release)
  : TAO_Unbounded_Base_Sequence (maximum, length, value, release)
  {
  }
  
  ACE_INLINE
  _TAO_Unbounded_Object_Sequence_CORBA_PolicyList::_TAO_Unbounded_Object_Sequence_CORBA_PolicyList(const _TAO_Unbounded_Object_Sequence_CORBA_PolicyList &rhs)
    : TAO_Unbounded_Base_Sequence (rhs)
  {
    if (rhs.buffer_ != 0)
    {
      CORBA_Policy **tmp1 = _TAO_Unbounded_Object_Sequence_CORBA_PolicyList::allocbuf (this->maximum_);
      CORBA_Policy ** const tmp2 = ACE_reinterpret_cast (CORBA_Policy ** ACE_CAST_CONST, rhs.buffer_);
      
      for (CORBA::ULong i = 0; i < rhs.length_; ++i)
        tmp1[i] = CORBA_Policy::_duplicate (tmp2[i]);
      
      this->buffer_ = tmp1;
    }
    else
    {
      this->buffer_ = 0;
    }
  }
  
  ACE_INLINE _TAO_Unbounded_Object_Sequence_CORBA_PolicyList &
  _TAO_Unbounded_Object_Sequence_CORBA_PolicyList::operator= (const _TAO_Unbounded_Object_Sequence_CORBA_PolicyList &rhs)
  {
    if (this == &rhs)
      return *this;
    
    if (this->release_)
    {
      CORBA_Policy **tmp = ACE_reinterpret_cast (CORBA_Policy **, this->buffer_);
      
      for (CORBA::ULong i = 0; i < this->length_; ++i)
      {
        CORBA::release (tmp[i]);
        tmp[i] = CORBA_Policy::_nil ();
      }
      if (this->maximum_ < rhs.maximum_)
      {
        _TAO_Unbounded_Object_Sequence_CORBA_PolicyList::freebuf (tmp);
        this->buffer_ = _TAO_Unbounded_Object_Sequence_CORBA_PolicyList::allocbuf (rhs.maximum_);
      }
    }
    else
      this->buffer_ = _TAO_Unbounded_Object_Sequence_CORBA_PolicyList::allocbuf (rhs.maximum_);
    
    TAO_Unbounded_Base_Sequence::operator= (rhs);
    
    CORBA_Policy **tmp1 = ACE_reinterpret_cast (CORBA_Policy **, this->buffer_);
    CORBA_Policy ** const tmp2 = ACE_reinterpret_cast (CORBA_Policy ** ACE_CAST_CONST, rhs.buffer_);
    
    for (CORBA::ULong i = 0; i < rhs.length_; ++i)
      tmp1[i] = CORBA_Policy::_duplicate (tmp2[i]);
    
    return *this;
  }
  
  ACE_INLINE TAO_Object_Manager<CORBA_Policy,CORBA_Policy_var>
  _TAO_Unbounded_Object_Sequence_CORBA_PolicyList::operator[] (CORBA::ULong index) const
  // read-write accessor
  {
    ACE_ASSERT (index < this->maximum_);
    CORBA_Policy ** const tmp = ACE_reinterpret_cast (CORBA_Policy ** ACE_CAST_CONST, this->buffer_);
    return TAO_Object_Manager<CORBA_Policy,CORBA_Policy_var> (tmp + index, this->release_);
  }
  
  ACE_INLINE CORBA_Policy* *
  _TAO_Unbounded_Object_Sequence_CORBA_PolicyList::get_buffer (CORBA::Boolean orphan)
  {
    CORBA_Policy **result = 0;
    if (orphan == 0)
    {
      // We retain ownership.
      if (this->buffer_ == 0)
      {
        result = _TAO_Unbounded_Object_Sequence_CORBA_PolicyList::allocbuf (this->maximum_);
        this->buffer_ = result;
      }
      else
      {
        result = ACE_reinterpret_cast (CORBA_Policy**, this->buffer_);
      }
    }
    else // if (orphan == 1)
    {
      if (this->release_ != 0)
      {
        // We set the state back to default and relinquish
        // ownership.
        result = ACE_reinterpret_cast(CORBA_Policy**,this->buffer_);
        this->maximum_ = 0;
        this->length_ = 0;
        this->buffer_ = 0;
        this->release_ = 0;
      }
    }
    return result;
  }
  
  ACE_INLINE const CORBA_Policy* *
  _TAO_Unbounded_Object_Sequence_CORBA_PolicyList::get_buffer (void) const
  {
    return ACE_reinterpret_cast(const CORBA_Policy ** ACE_CAST_CONST, this->buffer_);
  }
  
  
#endif /* end #if !defined */


#endif /* !TAO_USE_SEQUENCE_TEMPLATES */ 

#if !defined (_CORBA_POLICYLIST_CI_)
#define _CORBA_POLICYLIST_CI_

// *************************************************************
// Inline operations for class CORBA_PolicyList_var
// *************************************************************

ACE_INLINE
CORBA_PolicyList_var::CORBA_PolicyList_var (void) // default constructor
  : ptr_ (0)
{}

ACE_INLINE
CORBA_PolicyList_var::CORBA_PolicyList_var (CORBA_PolicyList *p)
  : ptr_ (p)
{}

ACE_INLINE
CORBA_PolicyList_var::CORBA_PolicyList_var (const ::CORBA_PolicyList_var &p) // copy constructor
{
  if (p.ptr_)
    ACE_NEW (this->ptr_, ::CORBA_PolicyList (*p.ptr_));
  else
    this->ptr_ = 0;
}

ACE_INLINE
CORBA_PolicyList_var::~CORBA_PolicyList_var (void) // destructor
{
  delete this->ptr_;
}

ACE_INLINE CORBA_PolicyList_var &
CORBA_PolicyList_var::operator= (CORBA_PolicyList *p)
{
  delete this->ptr_;
  this->ptr_ = p;
  return *this;
}

ACE_INLINE CORBA_PolicyList_var &
CORBA_PolicyList_var::operator= (const ::CORBA_PolicyList_var &p) // deep copy
{
  if (this != &p)
  {
    delete this->ptr_;
    ACE_NEW_RETURN (this->ptr_, ::CORBA_PolicyList (*p.ptr_), *this);
  }
  return *this;
}

ACE_INLINE const ::CORBA_PolicyList *
CORBA_PolicyList_var::operator-> (void) const
{
  return this->ptr_;
}

ACE_INLINE ::CORBA_PolicyList *
CORBA_PolicyList_var::operator-> (void)
{
  return this->ptr_;
}

ACE_INLINE 
CORBA_PolicyList_var::operator const ::CORBA_PolicyList &() const // cast
{
  return *this->ptr_;
}

ACE_INLINE 
CORBA_PolicyList_var::operator ::CORBA_PolicyList &() // cast 
{
  return *this->ptr_;
}

ACE_INLINE 
CORBA_PolicyList_var::operator ::CORBA_PolicyList &() const // cast 
{
  return *this->ptr_;
}

// variable-size types only
ACE_INLINE
CORBA_PolicyList_var::operator ::CORBA_PolicyList *&() // cast 
{
  return this->ptr_;
}

ACE_INLINE TAO_Object_Manager<CORBA_Policy, CORBA_Policy_var> 
CORBA_PolicyList_var::operator[] (CORBA::ULong index)
{
  return this->ptr_->operator[] (index);
}

ACE_INLINE const ::CORBA_PolicyList &
CORBA_PolicyList_var::in (void) const
{
  return *this->ptr_;
}

ACE_INLINE ::CORBA_PolicyList &
CORBA_PolicyList_var::inout (void)
{
  return *this->ptr_;
}

// mapping for variable size 
ACE_INLINE ::CORBA_PolicyList *&
CORBA_PolicyList_var::out (void)
{
  delete this->ptr_;
  this->ptr_ = 0;
  return this->ptr_;
}

ACE_INLINE ::CORBA_PolicyList *
CORBA_PolicyList_var::_retn (void)
{
  ::CORBA_PolicyList *tmp = this->ptr_;
  this->ptr_ = 0;
  return tmp;
}

ACE_INLINE ::CORBA_PolicyList *
CORBA_PolicyList_var::ptr (void) const
{
  return this->ptr_;
}

// *************************************************************
// Inline operations for class CORBA_PolicyList_out
// *************************************************************

ACE_INLINE
CORBA_PolicyList_out::CORBA_PolicyList_out (CORBA_PolicyList *&p)
  : ptr_ (p)
{
  this->ptr_ = 0;
}

ACE_INLINE
CORBA_PolicyList_out::CORBA_PolicyList_out (CORBA_PolicyList_var &p) // constructor from _var
  : ptr_ (p.out ())
{
  delete this->ptr_;
  this->ptr_ = 0;
}

ACE_INLINE
CORBA_PolicyList_out::CORBA_PolicyList_out (const ::CORBA_PolicyList_out &p) // copy constructor
  : ptr_ (ACE_const_cast (CORBA_PolicyList_out&, p).ptr_)
{}

ACE_INLINE ::CORBA_PolicyList_out &
CORBA_PolicyList_out::operator= (const ::CORBA_PolicyList_out &p)
{
  this->ptr_ = ACE_const_cast (CORBA_PolicyList_out&, p).ptr_;
  return *this;
}

ACE_INLINE ::CORBA_PolicyList_out &
CORBA_PolicyList_out::operator= (CORBA_PolicyList *p)
{
  this->ptr_ = p;
  return *this;
}

ACE_INLINE 
CORBA_PolicyList_out::operator ::CORBA_PolicyList *&() // cast
{
  return this->ptr_;
}

ACE_INLINE ::CORBA_PolicyList *&
CORBA_PolicyList_out::ptr (void) // ptr
{
  return this->ptr_;
}

ACE_INLINE ::CORBA_PolicyList *
CORBA_PolicyList_out::operator-> (void)
{
  return this->ptr_;
}

ACE_INLINE TAO_Object_Manager<CORBA_Policy, CORBA_Policy_var> 
CORBA_PolicyList_out::operator[] (CORBA::ULong index)
{
  return this->ptr_->operator[] (index);
}


#endif /* end #if !defined */


#if !defined (TAO_USE_SEQUENCE_TEMPLATES)
  
#if !defined (__TAO_UNBOUNDED_SEQUENCE_CORBA_POLICYTYPESEQ_CI_)
#define __TAO_UNBOUNDED_SEQUENCE_CORBA_POLICYTYPESEQ_CI_

  // = Static operations.
  ACE_INLINE CORBA::ULong *
  _TAO_Unbounded_Sequence_CORBA_PolicyTypeSeq::allocbuf (CORBA::ULong size)
  // Allocate storage for the sequence.
  {
    CORBA::ULong *retval = 0;
    ACE_NEW_RETURN (retval, CORBA::ULong[size], 0);
    return retval;
  }
  
  ACE_INLINE void _TAO_Unbounded_Sequence_CORBA_PolicyTypeSeq::freebuf (CORBA::ULong *buffer)
  // Free the sequence.
  {
    delete [] buffer;
  }
  
  ACE_INLINE
  _TAO_Unbounded_Sequence_CORBA_PolicyTypeSeq::_TAO_Unbounded_Sequence_CORBA_PolicyTypeSeq (void) // Default constructor.
  {
  }
  
  ACE_INLINE
  _TAO_Unbounded_Sequence_CORBA_PolicyTypeSeq::_TAO_Unbounded_Sequence_CORBA_PolicyTypeSeq (CORBA::ULong maximum) // Constructor using a maximum length value.
    : TAO_Unbounded_Base_Sequence (maximum, _TAO_Unbounded_Sequence_CORBA_PolicyTypeSeq::allocbuf (maximum))
  {
  }
  
  ACE_INLINE
  _TAO_Unbounded_Sequence_CORBA_PolicyTypeSeq::_TAO_Unbounded_Sequence_CORBA_PolicyTypeSeq (CORBA::ULong maximum,
    CORBA::ULong length,
    CORBA::ULong *data,
    CORBA::Boolean release)
  : TAO_Unbounded_Base_Sequence (maximum, length, data, release)
  {
  }
  
  ACE_INLINE
  _TAO_Unbounded_Sequence_CORBA_PolicyTypeSeq::_TAO_Unbounded_Sequence_CORBA_PolicyTypeSeq (const _TAO_Unbounded_Sequence_CORBA_PolicyTypeSeq &rhs)
  // Copy constructor.
    : TAO_Unbounded_Base_Sequence (rhs)
  {
    if (rhs.buffer_ != 0)
    {
      CORBA::ULong *tmp1 = _TAO_Unbounded_Sequence_CORBA_PolicyTypeSeq::allocbuf (this->maximum_);
      CORBA::ULong * const tmp2 = ACE_reinterpret_cast (CORBA::ULong * ACE_CAST_CONST, rhs.buffer_);
      
      for (CORBA::ULong i = 0; i < this->length_; ++i)
        tmp1[i] = tmp2[i];
      
      this->buffer_ = tmp1;
    }
    else
    {
      this->buffer_ = 0;
    }
  }
  
  ACE_INLINE _TAO_Unbounded_Sequence_CORBA_PolicyTypeSeq &
  _TAO_Unbounded_Sequence_CORBA_PolicyTypeSeq::operator= (const _TAO_Unbounded_Sequence_CORBA_PolicyTypeSeq &rhs)
  // Assignment operator.
  {
    if (this == &rhs)
      return *this;
    
    if (this->release_)
    {
      if (this->maximum_ < rhs.maximum_)
      {
        // free the old buffer
        CORBA::ULong *tmp = ACE_reinterpret_cast (CORBA::ULong *, this->buffer_);
        _TAO_Unbounded_Sequence_CORBA_PolicyTypeSeq::freebuf (tmp);
        this->buffer_ = _TAO_Unbounded_Sequence_CORBA_PolicyTypeSeq::allocbuf (rhs.maximum_);
      }
    }
    else
      this->buffer_ = _TAO_Unbounded_Sequence_CORBA_PolicyTypeSeq::allocbuf (rhs.maximum_);
    
    TAO_Unbounded_Base_Sequence::operator= (rhs);
    
    CORBA::ULong *tmp1 = ACE_reinterpret_cast (CORBA::ULong *, this->buffer_);
    CORBA::ULong * const tmp2 = ACE_reinterpret_cast (CORBA::ULong * ACE_CAST_CONST, rhs.buffer_);
    
    for (CORBA::ULong i = 0; i < this->length_; ++i)
      tmp1[i] = tmp2[i];
    
    return *this;
  }
  
  // = Accessors.
  ACE_INLINE CORBA::ULong &
  _TAO_Unbounded_Sequence_CORBA_PolicyTypeSeq::operator[] (CORBA::ULong i)
  // operator []
  {
    ACE_ASSERT (i < this->maximum_);
    CORBA::ULong* tmp = ACE_reinterpret_cast(CORBA::ULong*,this->buffer_);
    return tmp[i];
  }
  
  ACE_INLINE const CORBA::ULong &
  _TAO_Unbounded_Sequence_CORBA_PolicyTypeSeq::operator[] (CORBA::ULong i) const
  // operator []
  {
    ACE_ASSERT (i < this->maximum_);
    CORBA::ULong * const tmp = ACE_reinterpret_cast (CORBA::ULong* ACE_CAST_CONST, this->buffer_);
    return tmp[i];
  }
  
  // Implement the TAO_Base_Sequence methods (see Sequence.h)
  
  ACE_INLINE CORBA::ULong *
  _TAO_Unbounded_Sequence_CORBA_PolicyTypeSeq::get_buffer (CORBA::Boolean orphan)
  {
    CORBA::ULong *result = 0;
    if (orphan == 0)
    {
      // We retain ownership.
      if (this->buffer_ == 0)
      {
        result = _TAO_Unbounded_Sequence_CORBA_PolicyTypeSeq::allocbuf (this->length_);
        this->buffer_ = result;
      }
      else
      {
        result = ACE_reinterpret_cast (CORBA::ULong*, this->buffer_);
      }
    }
    else // if (orphan == 1)
    {
      if (this->release_ != 0)
      {
        // We set the state back to default and relinquish
        // ownership.
        result = ACE_reinterpret_cast(CORBA::ULong*,this->buffer_);
        this->maximum_ = 0;
        this->length_ = 0;
        this->buffer_ = 0;
        this->release_ = 0;
      }
    }
    return result;
  }
  
  ACE_INLINE const CORBA::ULong *
  _TAO_Unbounded_Sequence_CORBA_PolicyTypeSeq::get_buffer (void) const
  {
    return ACE_reinterpret_cast(const CORBA::ULong * ACE_CAST_CONST, this->buffer_);
  }
  
  ACE_INLINE void
  _TAO_Unbounded_Sequence_CORBA_PolicyTypeSeq::replace (CORBA::ULong max,
  CORBA::ULong length,
  CORBA::ULong *data,
  CORBA::Boolean release)
  {
    this->maximum_ = max;
    this->length_ = length;
    if (this->buffer_ && this->release_ == 1)
    {
      CORBA::ULong *tmp = ACE_reinterpret_cast(CORBA::ULong*,this->buffer_);
      _TAO_Unbounded_Sequence_CORBA_PolicyTypeSeq::freebuf (tmp);
    }
    this->buffer_ = data;
    this->release_ = release;
  }
  
#endif /* end #if !defined */


#endif /* !TAO_USE_SEQUENCE_TEMPLATES */ 

#if !defined (_CORBA_POLICYTYPESEQ_CI_)
#define _CORBA_POLICYTYPESEQ_CI_

// *************************************************************
// Inline operations for class CORBA_PolicyTypeSeq_var
// *************************************************************

ACE_INLINE
CORBA_PolicyTypeSeq_var::CORBA_PolicyTypeSeq_var (void) // default constructor
  : ptr_ (0)
{}

ACE_INLINE
CORBA_PolicyTypeSeq_var::CORBA_PolicyTypeSeq_var (CORBA_PolicyTypeSeq *p)
  : ptr_ (p)
{}

ACE_INLINE
CORBA_PolicyTypeSeq_var::CORBA_PolicyTypeSeq_var (const ::CORBA_PolicyTypeSeq_var &p) // copy constructor
{
  if (p.ptr_)
    ACE_NEW (this->ptr_, ::CORBA_PolicyTypeSeq (*p.ptr_));
  else
    this->ptr_ = 0;
}

// fixed-size base types only
ACE_INLINE
CORBA_PolicyTypeSeq_var::CORBA_PolicyTypeSeq_var (const ::CORBA_PolicyTypeSeq &p)
{
  ACE_NEW (this->ptr_, ::CORBA_PolicyTypeSeq (p));
}

ACE_INLINE
CORBA_PolicyTypeSeq_var::~CORBA_PolicyTypeSeq_var (void) // destructor
{
  delete this->ptr_;
}

ACE_INLINE CORBA_PolicyTypeSeq_var &
CORBA_PolicyTypeSeq_var::operator= (CORBA_PolicyTypeSeq *p)
{
  delete this->ptr_;
  this->ptr_ = p;
  return *this;
}

ACE_INLINE CORBA_PolicyTypeSeq_var &
CORBA_PolicyTypeSeq_var::operator= (const ::CORBA_PolicyTypeSeq_var &p) // deep copy
{
  if (this != &p)
  {
    delete this->ptr_;
    ACE_NEW_RETURN (this->ptr_, ::CORBA_PolicyTypeSeq (*p.ptr_), *this);
  }
  return *this;
}

// fixed-size types only
ACE_INLINE ::CORBA_PolicyTypeSeq_var &
CORBA_PolicyTypeSeq_var::operator= (const ::CORBA_PolicyTypeSeq &p)
{
  if (this->ptr_ != &p)
  {
    delete this->ptr_;
    ACE_NEW_RETURN (this->ptr_, ::CORBA_PolicyTypeSeq (p), *this);
  }
  return *this;
}

ACE_INLINE const ::CORBA_PolicyTypeSeq *
CORBA_PolicyTypeSeq_var::operator-> (void) const
{
  return this->ptr_;
}

ACE_INLINE ::CORBA_PolicyTypeSeq *
CORBA_PolicyTypeSeq_var::operator-> (void)
{
  return this->ptr_;
}

ACE_INLINE 
CORBA_PolicyTypeSeq_var::operator const ::CORBA_PolicyTypeSeq &() const // cast
{
  return *this->ptr_;
}

ACE_INLINE 
CORBA_PolicyTypeSeq_var::operator ::CORBA_PolicyTypeSeq &() // cast 
{
  return *this->ptr_;
}

ACE_INLINE 
CORBA_PolicyTypeSeq_var::operator ::CORBA_PolicyTypeSeq &() const // cast 
{
  return *this->ptr_;
}

ACE_INLINE CORBA::PolicyType &
CORBA_PolicyTypeSeq_var::operator[] (CORBA::ULong index)
{
  return this->ptr_->operator[] (index);
}

ACE_INLINE const ::CORBA_PolicyTypeSeq &
CORBA_PolicyTypeSeq_var::in (void) const
{
  return *this->ptr_;
}

ACE_INLINE ::CORBA_PolicyTypeSeq &
CORBA_PolicyTypeSeq_var::inout (void)
{
  return *this->ptr_;
}

// mapping for variable size 
ACE_INLINE ::CORBA_PolicyTypeSeq *&
CORBA_PolicyTypeSeq_var::out (void)
{
  delete this->ptr_;
  this->ptr_ = 0;
  return this->ptr_;
}

ACE_INLINE ::CORBA_PolicyTypeSeq *
CORBA_PolicyTypeSeq_var::_retn (void)
{
  ::CORBA_PolicyTypeSeq *tmp = this->ptr_;
  this->ptr_ = 0;
  return tmp;
}

ACE_INLINE ::CORBA_PolicyTypeSeq *
CORBA_PolicyTypeSeq_var::ptr (void) const
{
  return this->ptr_;
}

// *************************************************************
// Inline operations for class CORBA_PolicyTypeSeq_out
// *************************************************************

ACE_INLINE
CORBA_PolicyTypeSeq_out::CORBA_PolicyTypeSeq_out (CORBA_PolicyTypeSeq *&p)
  : ptr_ (p)
{
  this->ptr_ = 0;
}

ACE_INLINE
CORBA_PolicyTypeSeq_out::CORBA_PolicyTypeSeq_out (CORBA_PolicyTypeSeq_var &p) // constructor from _var
  : ptr_ (p.out ())
{
  delete this->ptr_;
  this->ptr_ = 0;
}

ACE_INLINE
CORBA_PolicyTypeSeq_out::CORBA_PolicyTypeSeq_out (const ::CORBA_PolicyTypeSeq_out &p) // copy constructor
  : ptr_ (ACE_const_cast (CORBA_PolicyTypeSeq_out&, p).ptr_)
{}

ACE_INLINE ::CORBA_PolicyTypeSeq_out &
CORBA_PolicyTypeSeq_out::operator= (const ::CORBA_PolicyTypeSeq_out &p)
{
  this->ptr_ = ACE_const_cast (CORBA_PolicyTypeSeq_out&, p).ptr_;
  return *this;
}

ACE_INLINE ::CORBA_PolicyTypeSeq_out &
CORBA_PolicyTypeSeq_out::operator= (CORBA_PolicyTypeSeq *p)
{
  this->ptr_ = p;
  return *this;
}

ACE_INLINE 
CORBA_PolicyTypeSeq_out::operator ::CORBA_PolicyTypeSeq *&() // cast
{
  return this->ptr_;
}

ACE_INLINE ::CORBA_PolicyTypeSeq *&
CORBA_PolicyTypeSeq_out::ptr (void) // ptr
{
  return this->ptr_;
}

ACE_INLINE ::CORBA_PolicyTypeSeq *
CORBA_PolicyTypeSeq_out::operator-> (void)
{
  return this->ptr_;
}

ACE_INLINE CORBA::PolicyType &
CORBA_PolicyTypeSeq_out::operator[] (CORBA::ULong index)
{
  return this->ptr_->operator[] (index);
}


#endif /* end #if !defined */


#if !defined (_CORBA_POLICYMANAGER___VAR_CI_)
#define _CORBA_POLICYMANAGER___VAR_CI_

// *************************************************************
// Inline operations for class CORBA_PolicyManager_var
// *************************************************************

ACE_INLINE
CORBA_PolicyManager_var::CORBA_PolicyManager_var (void) // default constructor
  : ptr_ (CORBA_PolicyManager::_nil ())
{}

ACE_INLINE ::CORBA_PolicyManager_ptr
CORBA_PolicyManager_var::ptr (void) const
{
  return this->ptr_;
}

ACE_INLINE
CORBA_PolicyManager_var::CORBA_PolicyManager_var (const ::CORBA_PolicyManager_var &p) // copy constructor
  : TAO_Base_var (),
    ptr_ (CORBA_PolicyManager::_duplicate (p.ptr ()))
{}

ACE_INLINE
CORBA_PolicyManager_var::~CORBA_PolicyManager_var (void) // destructor
{
  CORBA::release (this->ptr_);
}

ACE_INLINE CORBA_PolicyManager_var &
CORBA_PolicyManager_var::operator= (CORBA_PolicyManager_ptr p)
{
  CORBA::release (this->ptr_);
  this->ptr_ = p;
  return *this;
}

ACE_INLINE CORBA_PolicyManager_var &
CORBA_PolicyManager_var::operator= (const ::CORBA_PolicyManager_var &p)
{
  if (this != &p)
  {
    CORBA::release (this->ptr_);
    this->ptr_ = ::CORBA_PolicyManager::_duplicate (p.ptr ());
  }
  return *this;
}

ACE_INLINE 
CORBA_PolicyManager_var::operator const ::CORBA_PolicyManager_ptr &() const // cast
{
  return this->ptr_;
}

ACE_INLINE 
CORBA_PolicyManager_var::operator ::CORBA_PolicyManager_ptr &() // cast 
{
  return this->ptr_;
}

ACE_INLINE ::CORBA_PolicyManager_ptr
CORBA_PolicyManager_var::operator-> (void) const
{
  return this->ptr_;
}

ACE_INLINE ::CORBA_PolicyManager_ptr
CORBA_PolicyManager_var::in (void) const
{
  return this->ptr_;
}

ACE_INLINE ::CORBA_PolicyManager_ptr &
CORBA_PolicyManager_var::inout (void)
{
  return this->ptr_;
}

ACE_INLINE ::CORBA_PolicyManager_ptr &
CORBA_PolicyManager_var::out (void)
{
  CORBA::release (this->ptr_);
  this->ptr_ = ::CORBA_PolicyManager::_nil ();
  return this->ptr_;
}

ACE_INLINE ::CORBA_PolicyManager_ptr
CORBA_PolicyManager_var::_retn (void)
{
  // yield ownership of managed obj reference
  ::CORBA_PolicyManager_ptr val = this->ptr_;
  this->ptr_ = ::CORBA_PolicyManager::_nil ();
  return val;
}


#endif /* end #if !defined */


#if !defined (_CORBA_POLICYMANAGER___OUT_CI_)
#define _CORBA_POLICYMANAGER___OUT_CI_

// *************************************************************
// Inline operations for class CORBA_PolicyManager_out
// *************************************************************

ACE_INLINE
CORBA_PolicyManager_out::CORBA_PolicyManager_out (CORBA_PolicyManager_ptr &p)
  : ptr_ (p)
{
  this->ptr_ = ::CORBA_PolicyManager::_nil ();
}

ACE_INLINE
CORBA_PolicyManager_out::CORBA_PolicyManager_out (CORBA_PolicyManager_var &p) // constructor from _var
  : ptr_ (p.out ())
{
  CORBA::release (this->ptr_);
  this->ptr_ = ::CORBA_PolicyManager::_nil ();
}

ACE_INLINE
CORBA_PolicyManager_out::CORBA_PolicyManager_out (const ::CORBA_PolicyManager_out &p) // copy constructor
  : ptr_ (ACE_const_cast (CORBA_PolicyManager_out &, p).ptr_)
{}

ACE_INLINE ::CORBA_PolicyManager_out &
CORBA_PolicyManager_out::operator= (const ::CORBA_PolicyManager_out &p)
{
  this->ptr_ = ACE_const_cast (CORBA_PolicyManager_out&, p).ptr_;
  return *this;
}

ACE_INLINE CORBA_PolicyManager_out &
CORBA_PolicyManager_out::operator= (const ::CORBA_PolicyManager_var &p)
{
  this->ptr_ = ::CORBA_PolicyManager::_duplicate (p.ptr ());
  return *this;
}

ACE_INLINE CORBA_PolicyManager_out &
CORBA_PolicyManager_out::operator= (CORBA_PolicyManager_ptr p)
{
  this->ptr_ = p;
  return *this;
}

ACE_INLINE 
CORBA_PolicyManager_out::operator ::CORBA_PolicyManager_ptr &() // cast
{
  return this->ptr_;
}

ACE_INLINE ::CORBA_PolicyManager_ptr &
CORBA_PolicyManager_out::ptr (void) // ptr
{
  return this->ptr_;
}

ACE_INLINE ::CORBA_PolicyManager_ptr
CORBA_PolicyManager_out::operator-> (void)
{
  return this->ptr_;
}


#endif /* end #if !defined */


#if !defined (_CORBA_POLICYCURRENT___VAR_CI_)
#define _CORBA_POLICYCURRENT___VAR_CI_

// *************************************************************
// Inline operations for class CORBA_PolicyCurrent_var
// *************************************************************

ACE_INLINE
CORBA_PolicyCurrent_var::CORBA_PolicyCurrent_var (void) // default constructor
  : ptr_ (CORBA_PolicyCurrent::_nil ())
{}

ACE_INLINE ::CORBA_PolicyCurrent_ptr
CORBA_PolicyCurrent_var::ptr (void) const
{
  return this->ptr_;
}

ACE_INLINE
CORBA_PolicyCurrent_var::CORBA_PolicyCurrent_var (const ::CORBA_PolicyCurrent_var &p) // copy constructor
  : TAO_Base_var (),
    ptr_ (CORBA_PolicyCurrent::_duplicate (p.ptr ()))
{}

ACE_INLINE
CORBA_PolicyCurrent_var::~CORBA_PolicyCurrent_var (void) // destructor
{
  CORBA::release (this->ptr_);
}

ACE_INLINE CORBA_PolicyCurrent_var &
CORBA_PolicyCurrent_var::operator= (CORBA_PolicyCurrent_ptr p)
{
  CORBA::release (this->ptr_);
  this->ptr_ = p;
  return *this;
}

ACE_INLINE CORBA_PolicyCurrent_var &
CORBA_PolicyCurrent_var::operator= (const ::CORBA_PolicyCurrent_var &p)
{
  if (this != &p)
  {
    CORBA::release (this->ptr_);
    this->ptr_ = ::CORBA_PolicyCurrent::_duplicate (p.ptr ());
  }
  return *this;
}

ACE_INLINE 
CORBA_PolicyCurrent_var::operator const ::CORBA_PolicyCurrent_ptr &() const // cast
{
  return this->ptr_;
}

ACE_INLINE 
CORBA_PolicyCurrent_var::operator ::CORBA_PolicyCurrent_ptr &() // cast 
{
  return this->ptr_;
}

ACE_INLINE ::CORBA_PolicyCurrent_ptr
CORBA_PolicyCurrent_var::operator-> (void) const
{
  return this->ptr_;
}

ACE_INLINE ::CORBA_PolicyCurrent_ptr
CORBA_PolicyCurrent_var::in (void) const
{
  return this->ptr_;
}

ACE_INLINE ::CORBA_PolicyCurrent_ptr &
CORBA_PolicyCurrent_var::inout (void)
{
  return this->ptr_;
}

ACE_INLINE ::CORBA_PolicyCurrent_ptr &
CORBA_PolicyCurrent_var::out (void)
{
  CORBA::release (this->ptr_);
  this->ptr_ = ::CORBA_PolicyCurrent::_nil ();
  return this->ptr_;
}

ACE_INLINE ::CORBA_PolicyCurrent_ptr
CORBA_PolicyCurrent_var::_retn (void)
{
  // yield ownership of managed obj reference
  ::CORBA_PolicyCurrent_ptr val = this->ptr_;
  this->ptr_ = ::CORBA_PolicyCurrent::_nil ();
  return val;
}


#endif /* end #if !defined */


#if !defined (_CORBA_POLICYCURRENT___OUT_CI_)
#define _CORBA_POLICYCURRENT___OUT_CI_

// *************************************************************
// Inline operations for class CORBA_PolicyCurrent_out
// *************************************************************

ACE_INLINE
CORBA_PolicyCurrent_out::CORBA_PolicyCurrent_out (CORBA_PolicyCurrent_ptr &p)
  : ptr_ (p)
{
  this->ptr_ = ::CORBA_PolicyCurrent::_nil ();
}

ACE_INLINE
CORBA_PolicyCurrent_out::CORBA_PolicyCurrent_out (CORBA_PolicyCurrent_var &p) // constructor from _var
  : ptr_ (p.out ())
{
  CORBA::release (this->ptr_);
  this->ptr_ = ::CORBA_PolicyCurrent::_nil ();
}

ACE_INLINE
CORBA_PolicyCurrent_out::CORBA_PolicyCurrent_out (const ::CORBA_PolicyCurrent_out &p) // copy constructor
  : ptr_ (ACE_const_cast (CORBA_PolicyCurrent_out &, p).ptr_)
{}

ACE_INLINE ::CORBA_PolicyCurrent_out &
CORBA_PolicyCurrent_out::operator= (const ::CORBA_PolicyCurrent_out &p)
{
  this->ptr_ = ACE_const_cast (CORBA_PolicyCurrent_out&, p).ptr_;
  return *this;
}

ACE_INLINE CORBA_PolicyCurrent_out &
CORBA_PolicyCurrent_out::operator= (const ::CORBA_PolicyCurrent_var &p)
{
  this->ptr_ = ::CORBA_PolicyCurrent::_duplicate (p.ptr ());
  return *this;
}

ACE_INLINE CORBA_PolicyCurrent_out &
CORBA_PolicyCurrent_out::operator= (CORBA_PolicyCurrent_ptr p)
{
  this->ptr_ = p;
  return *this;
}

ACE_INLINE 
CORBA_PolicyCurrent_out::operator ::CORBA_PolicyCurrent_ptr &() // cast
{
  return this->ptr_;
}

ACE_INLINE ::CORBA_PolicyCurrent_ptr &
CORBA_PolicyCurrent_out::ptr (void) // ptr
{
  return this->ptr_;
}

ACE_INLINE ::CORBA_PolicyCurrent_ptr
CORBA_PolicyCurrent_out::operator-> (void)
{
  return this->ptr_;
}


#endif /* end #if !defined */

ACE_INLINE CORBA::Boolean operator<< (TAO_OutputCDR &strm, const CORBA::SetOverrideType &_tao_enumval)
{
  return strm.write_ulong ((CORBA::ULong) _tao_enumval);
}

ACE_INLINE CORBA::Boolean operator>> (TAO_InputCDR &strm, CORBA::SetOverrideType &_tao_enumval)
{
  CORBA::ULong _tao_temp;
  if (strm.read_ulong (_tao_temp))
  {
    ACE_OS::memcpy (&_tao_enumval, &_tao_temp, sizeof (CORBA::ULong));
    return 1;
  }
  else
    return 0;
}

ACE_INLINE CORBA::Boolean operator<< (TAO_OutputCDR &strm, const CORBA_PolicyError &_tao_aggregate)
{
  // first marshal the repository ID
  if (strm << _tao_aggregate._id ())
  {
    // now marshal the members (if any)
    if (
      (strm << _tao_aggregate.reason)
    )
      return 1;
    else
      return 0;
  }
  else
    return 0;
}

ACE_INLINE CORBA::Boolean operator>> (TAO_InputCDR &strm,CORBA_PolicyError &_tao_aggregate)
{
  // now marshal the members
  if (
    (strm >> _tao_aggregate.reason)
  )
    return 1;
  else
    return 0;
}

#if !defined (ACE_LACKS_IOSTREAM_TOTALLY)

ACE_INLINE
ostream & operator<< (ostream &os, const CORBA_PolicyError &_tao_aggregate)
{
  CORBA::TypeCode_ptr tc = _tao_aggregate._type ();
  if (tc)
    {
      os << tc->name () << " (";
    }
  os << _tao_aggregate._id ();
  if (tc)
    {
      os << ")";
    }
  return os;
}

#endif /* ACE_LACKS_IOSTREAM_TOTALLY */


#if !defined _TAO_CDR_OP_CORBA_InvalidPolicies__tao_seq_UShort_I_
#define _TAO_CDR_OP_CORBA_InvalidPolicies__tao_seq_UShort_I_

CORBA::Boolean TAO_Export operator<< (
    TAO_OutputCDR &,
    const CORBA_InvalidPolicies::_tao_seq_UShort &
  );
CORBA::Boolean TAO_Export operator>> (
    TAO_InputCDR &,
    CORBA_InvalidPolicies::_tao_seq_UShort &
  );

#endif /* _TAO_CDR_OP_CORBA_InvalidPolicies__tao_seq_UShort_I_ */

ACE_INLINE CORBA::Boolean operator<< (TAO_OutputCDR &strm, const CORBA_InvalidPolicies &_tao_aggregate)
{
  // first marshal the repository ID
  if (strm << _tao_aggregate._id ())
  {
    // now marshal the members (if any)
    if (
      (strm << _tao_aggregate.indices)
    )
      return 1;
    else
      return 0;
  }
  else
    return 0;
}

ACE_INLINE CORBA::Boolean operator>> (TAO_InputCDR &strm,CORBA_InvalidPolicies &_tao_aggregate)
{
  // now marshal the members
  if (
    (strm >> _tao_aggregate.indices)
  )
    return 1;
  else
    return 0;
}

#if !defined (ACE_LACKS_IOSTREAM_TOTALLY)

ACE_INLINE
ostream & operator<< (ostream &os, const CORBA_InvalidPolicies &_tao_aggregate)
{
  CORBA::TypeCode_ptr tc = _tao_aggregate._type ();
  if (tc)
    {
      os << tc->name () << " (";
    }
  os << _tao_aggregate._id ();
  if (tc)
    {
      os << ")";
    }
  return os;
}

#endif /* ACE_LACKS_IOSTREAM_TOTALLY */

ACE_INLINE CORBA::Boolean
operator<< (
    TAO_OutputCDR &,
    const CORBA_Policy_ptr
  );
ACE_INLINE CORBA::Boolean
operator>> (
    TAO_InputCDR &,
    CORBA_Policy_ptr &
  );

ACE_INLINE CORBA::Boolean
operator<< (
    TAO_OutputCDR &strm,
    const CORBA_Policy_ptr _tao_objref
  )
{
  CORBA::Object_ptr _tao_corba_obj = _tao_objref;
  return (strm << _tao_corba_obj);
}

ACE_INLINE CORBA::Boolean
operator>> (
    TAO_InputCDR &strm,
    CORBA_Policy_ptr &_tao_objref
  )
{
  ACE_TRY_NEW_ENV
  {
    CORBA::Object_var obj;
    if ((strm >> obj.inout ()) == 0)
      return 0;
    // narrow to the right type
    _tao_objref =
      CORBA_Policy::_unchecked_narrow (
          obj.in (),
          ACE_TRY_ENV
        );
    ACE_TRY_CHECK;
    return 1;
  }
  ACE_CATCHANY
  {
    // do nothing
  }
  ACE_ENDTRY;
  return 0;
}


#if !defined _TAO_CDR_OP_CORBA_PolicyList_I_
#define _TAO_CDR_OP_CORBA_PolicyList_I_

CORBA::Boolean TAO_Export operator<< (
    TAO_OutputCDR &,
    const CORBA_PolicyList &
  );
CORBA::Boolean TAO_Export operator>> (
    TAO_InputCDR &,
    CORBA_PolicyList &
  );

#endif /* _TAO_CDR_OP_CORBA_PolicyList_I_ */


#if !defined _TAO_CDR_OP_CORBA_PolicyTypeSeq_I_
#define _TAO_CDR_OP_CORBA_PolicyTypeSeq_I_

CORBA::Boolean TAO_Export operator<< (
    TAO_OutputCDR &,
    const CORBA_PolicyTypeSeq &
  );
CORBA::Boolean TAO_Export operator>> (
    TAO_InputCDR &,
    CORBA_PolicyTypeSeq &
  );

#endif /* _TAO_CDR_OP_CORBA_PolicyTypeSeq_I_ */

