/* -*- C++ -*- $Id$ */

// ******  Code generated by the The ACE ORB (TAO) IDL Compiler *******
// TAO and the TAO IDL Compiler have been developed by the Center for
// Distributed Object Computing at Washington University, St. Louis.
//
// Information about TAO is available at:
//                 http://www.cs.wustl.edu/~schmidt/TAO.html

ACE_INLINE
CORBA_Pollable::CORBA_Pollable (void) // default constructor
{}

ACE_INLINE
CORBA_Pollable::~CORBA_Pollable (void) // destructor
{}


#if !defined (_CORBA_POLLABLE___VAR_CI_)
#define _CORBA_POLLABLE___VAR_CI_

// *************************************************************
// Inline operations for class CORBA_Pollable_var
// *************************************************************

ACE_INLINE
CORBA_Pollable_var::CORBA_Pollable_var (void) // default constructor
  : ptr_ (CORBA_Pollable::_nil ())
{}

ACE_INLINE
CORBA_Pollable_var::CORBA_Pollable_var (CORBA_Pollable_ptr p)
  : ptr_ (p)
{}

ACE_INLINE ::CORBA_Pollable_ptr
CORBA_Pollable_var::ptr (void) const
{
  return this->ptr_;
}

ACE_INLINE
CORBA_Pollable_var::CORBA_Pollable_var (const ::CORBA_Pollable_var &p) // copy constructor
  : TAO_Base_var (),
    ptr_ (CORBA_Pollable::_duplicate (p.ptr ()))
{}

ACE_INLINE
CORBA_Pollable_var::~CORBA_Pollable_var (void) // destructor
{
  CORBA::release (this->ptr_);
}

ACE_INLINE CORBA_Pollable_var &
CORBA_Pollable_var::operator= (CORBA_Pollable_ptr p)
{
  CORBA::release (this->ptr_);
  this->ptr_ = p;
  return *this;
}

ACE_INLINE CORBA_Pollable_var &
CORBA_Pollable_var::operator= (const ::CORBA_Pollable_var &p)
{
  if (this != &p)
  {
    CORBA::release (this->ptr_);
    this->ptr_ = ::CORBA_Pollable::_duplicate (p.ptr ());
  }
  return *this;
}

ACE_INLINE
CORBA_Pollable_var::operator const ::CORBA_Pollable_ptr &() const // cast
{
  return this->ptr_;
}

ACE_INLINE
CORBA_Pollable_var::operator ::CORBA_Pollable_ptr &() // cast
{
  return this->ptr_;
}

ACE_INLINE ::CORBA_Pollable_ptr
CORBA_Pollable_var::operator-> (void) const
{
  return this->ptr_;
}

ACE_INLINE ::CORBA_Pollable_ptr
CORBA_Pollable_var::in (void) const
{
  return this->ptr_;
}

ACE_INLINE ::CORBA_Pollable_ptr &
CORBA_Pollable_var::inout (void)
{
  return this->ptr_;
}

ACE_INLINE ::CORBA_Pollable_ptr &
CORBA_Pollable_var::out (void)
{
  CORBA::release (this->ptr_);
  this->ptr_ = ::CORBA_Pollable::_nil ();
  return this->ptr_;
}

ACE_INLINE ::CORBA_Pollable_ptr
CORBA_Pollable_var::_retn (void)
{
  // yield ownership of managed obj reference
  ::CORBA_Pollable_ptr val = this->ptr_;
  this->ptr_ = ::CORBA_Pollable::_nil ();
  return val;
}


#endif /* end #if !defined */


#if !defined (_CORBA_POLLABLE___OUT_CI_)
#define _CORBA_POLLABLE___OUT_CI_

// *************************************************************
// Inline operations for class CORBA_Pollable_out
// *************************************************************

ACE_INLINE
CORBA_Pollable_out::CORBA_Pollable_out (CORBA_Pollable_ptr &p)
  : ptr_ (p)
{
  this->ptr_ = ::CORBA_Pollable::_nil ();
}

ACE_INLINE
CORBA_Pollable_out::CORBA_Pollable_out (CORBA_Pollable_var &p) // constructor from _var
  : ptr_ (p.out ())
{
  CORBA::release (this->ptr_);
  this->ptr_ = ::CORBA_Pollable::_nil ();
}

ACE_INLINE
CORBA_Pollable_out::CORBA_Pollable_out (const ::CORBA_Pollable_out &p) // copy constructor
  : ptr_ (ACE_const_cast (CORBA_Pollable_out &, p).ptr_)
{}

ACE_INLINE ::CORBA_Pollable_out &
CORBA_Pollable_out::operator= (const ::CORBA_Pollable_out &p)
{
  this->ptr_ = ACE_const_cast (CORBA_Pollable_out&, p).ptr_;
  return *this;
}

ACE_INLINE CORBA_Pollable_out &
CORBA_Pollable_out::operator= (const ::CORBA_Pollable_var &p)
{
  this->ptr_ = ::CORBA_Pollable::_duplicate (p.ptr ());
  return *this;
}

ACE_INLINE CORBA_Pollable_out &
CORBA_Pollable_out::operator= (CORBA_Pollable_ptr p)
{
  this->ptr_ = p;
  return *this;
}

ACE_INLINE
CORBA_Pollable_out::operator ::CORBA_Pollable_ptr &() // cast
{
  return this->ptr_;
}

ACE_INLINE ::CORBA_Pollable_ptr &
CORBA_Pollable_out::ptr (void) // ptr
{
  return this->ptr_;
}

ACE_INLINE ::CORBA_Pollable_ptr
CORBA_Pollable_out::operator-> (void)
{
  return this->ptr_;
}


#endif /* end #if !defined */

ACE_INLINE
CORBA_DIIPollable::CORBA_DIIPollable (void) // default constructor
{}

ACE_INLINE
CORBA_DIIPollable::~CORBA_DIIPollable (void) // destructor
{}


#if !defined (_CORBA_DIIPOLLABLE___VAR_CI_)
#define _CORBA_DIIPOLLABLE___VAR_CI_

// *************************************************************
// Inline operations for class CORBA_DIIPollable_var
// *************************************************************

ACE_INLINE
CORBA_DIIPollable_var::CORBA_DIIPollable_var (void) // default constructor
  : ptr_ (CORBA_DIIPollable::_nil ())
{}

ACE_INLINE
CORBA_DIIPollable_var::CORBA_DIIPollable_var (CORBA_DIIPollable_ptr p)
  : ptr_ (p)
{}

ACE_INLINE ::CORBA_DIIPollable_ptr
CORBA_DIIPollable_var::ptr (void) const
{
  return this->ptr_;
}

ACE_INLINE
CORBA_DIIPollable_var::CORBA_DIIPollable_var (const ::CORBA_DIIPollable_var &p) // copy constructor
  : TAO_Base_var (),
    ptr_ (CORBA_DIIPollable::_duplicate (p.ptr ()))
{}

ACE_INLINE
CORBA_DIIPollable_var::~CORBA_DIIPollable_var (void) // destructor
{
  CORBA::release (this->ptr_);
}

ACE_INLINE CORBA_DIIPollable_var &
CORBA_DIIPollable_var::operator= (CORBA_DIIPollable_ptr p)
{
  CORBA::release (this->ptr_);
  this->ptr_ = p;
  return *this;
}

ACE_INLINE CORBA_DIIPollable_var &
CORBA_DIIPollable_var::operator= (const ::CORBA_DIIPollable_var &p)
{
  if (this != &p)
  {
    CORBA::release (this->ptr_);
    this->ptr_ = ::CORBA_DIIPollable::_duplicate (p.ptr ());
  }
  return *this;
}

ACE_INLINE
CORBA_DIIPollable_var::operator const ::CORBA_DIIPollable_ptr &() const // cast
{
  return this->ptr_;
}

ACE_INLINE
CORBA_DIIPollable_var::operator ::CORBA_DIIPollable_ptr &() // cast
{
  return this->ptr_;
}

ACE_INLINE ::CORBA_DIIPollable_ptr
CORBA_DIIPollable_var::operator-> (void) const
{
  return this->ptr_;
}

ACE_INLINE ::CORBA_DIIPollable_ptr
CORBA_DIIPollable_var::in (void) const
{
  return this->ptr_;
}

ACE_INLINE ::CORBA_DIIPollable_ptr &
CORBA_DIIPollable_var::inout (void)
{
  return this->ptr_;
}

ACE_INLINE ::CORBA_DIIPollable_ptr &
CORBA_DIIPollable_var::out (void)
{
  CORBA::release (this->ptr_);
  this->ptr_ = ::CORBA_DIIPollable::_nil ();
  return this->ptr_;
}

ACE_INLINE ::CORBA_DIIPollable_ptr
CORBA_DIIPollable_var::_retn (void)
{
  // yield ownership of managed obj reference
  ::CORBA_DIIPollable_ptr val = this->ptr_;
  this->ptr_ = ::CORBA_DIIPollable::_nil ();
  return val;
}


#endif /* end #if !defined */


#if !defined (_CORBA_DIIPOLLABLE___OUT_CI_)
#define _CORBA_DIIPOLLABLE___OUT_CI_

// *************************************************************
// Inline operations for class CORBA_DIIPollable_out
// *************************************************************

ACE_INLINE
CORBA_DIIPollable_out::CORBA_DIIPollable_out (CORBA_DIIPollable_ptr &p)
  : ptr_ (p)
{
  this->ptr_ = ::CORBA_DIIPollable::_nil ();
}

ACE_INLINE
CORBA_DIIPollable_out::CORBA_DIIPollable_out (CORBA_DIIPollable_var &p) // constructor from _var
  : ptr_ (p.out ())
{
  CORBA::release (this->ptr_);
  this->ptr_ = ::CORBA_DIIPollable::_nil ();
}

ACE_INLINE
CORBA_DIIPollable_out::CORBA_DIIPollable_out (const ::CORBA_DIIPollable_out &p) // copy constructor
  : ptr_ (ACE_const_cast (CORBA_DIIPollable_out &, p).ptr_)
{}

ACE_INLINE ::CORBA_DIIPollable_out &
CORBA_DIIPollable_out::operator= (const ::CORBA_DIIPollable_out &p)
{
  this->ptr_ = ACE_const_cast (CORBA_DIIPollable_out&, p).ptr_;
  return *this;
}

ACE_INLINE CORBA_DIIPollable_out &
CORBA_DIIPollable_out::operator= (const ::CORBA_DIIPollable_var &p)
{
  this->ptr_ = ::CORBA_DIIPollable::_duplicate (p.ptr ());
  return *this;
}

ACE_INLINE CORBA_DIIPollable_out &
CORBA_DIIPollable_out::operator= (CORBA_DIIPollable_ptr p)
{
  this->ptr_ = p;
  return *this;
}

ACE_INLINE
CORBA_DIIPollable_out::operator ::CORBA_DIIPollable_ptr &() // cast
{
  return this->ptr_;
}

ACE_INLINE ::CORBA_DIIPollable_ptr &
CORBA_DIIPollable_out::ptr (void) // ptr
{
  return this->ptr_;
}

ACE_INLINE ::CORBA_DIIPollable_ptr
CORBA_DIIPollable_out::operator-> (void)
{
  return this->ptr_;
}


#endif /* end #if !defined */

ACE_INLINE
CORBA_PollableSet::CORBA_PollableSet (void) // default constructor
{}

ACE_INLINE
CORBA_PollableSet::~CORBA_PollableSet (void) // destructor
{}


#if !defined (_CORBA_POLLABLESET___VAR_CI_)
#define _CORBA_POLLABLESET___VAR_CI_

// *************************************************************
// Inline operations for class CORBA_PollableSet_var
// *************************************************************

ACE_INLINE
CORBA_PollableSet_var::CORBA_PollableSet_var (void) // default constructor
  : ptr_ (CORBA_PollableSet::_nil ())
{}

ACE_INLINE
CORBA_PollableSet_var::CORBA_PollableSet_var (CORBA_PollableSet_ptr p)
  : ptr_ (p)
{}

ACE_INLINE ::CORBA_PollableSet_ptr
CORBA_PollableSet_var::ptr (void) const
{
  return this->ptr_;
}

ACE_INLINE
CORBA_PollableSet_var::CORBA_PollableSet_var (const ::CORBA_PollableSet_var &p) // copy constructor
  : TAO_Base_var (),
    ptr_ (CORBA_PollableSet::_duplicate (p.ptr ()))
{}

ACE_INLINE
CORBA_PollableSet_var::~CORBA_PollableSet_var (void) // destructor
{
  CORBA::release (this->ptr_);
}

ACE_INLINE CORBA_PollableSet_var &
CORBA_PollableSet_var::operator= (CORBA_PollableSet_ptr p)
{
  CORBA::release (this->ptr_);
  this->ptr_ = p;
  return *this;
}

ACE_INLINE CORBA_PollableSet_var &
CORBA_PollableSet_var::operator= (const ::CORBA_PollableSet_var &p)
{
  if (this != &p)
  {
    CORBA::release (this->ptr_);
    this->ptr_ = ::CORBA_PollableSet::_duplicate (p.ptr ());
  }
  return *this;
}

ACE_INLINE
CORBA_PollableSet_var::operator const ::CORBA_PollableSet_ptr &() const // cast
{
  return this->ptr_;
}

ACE_INLINE
CORBA_PollableSet_var::operator ::CORBA_PollableSet_ptr &() // cast
{
  return this->ptr_;
}

ACE_INLINE ::CORBA_PollableSet_ptr
CORBA_PollableSet_var::operator-> (void) const
{
  return this->ptr_;
}

ACE_INLINE ::CORBA_PollableSet_ptr
CORBA_PollableSet_var::in (void) const
{
  return this->ptr_;
}

ACE_INLINE ::CORBA_PollableSet_ptr &
CORBA_PollableSet_var::inout (void)
{
  return this->ptr_;
}

ACE_INLINE ::CORBA_PollableSet_ptr &
CORBA_PollableSet_var::out (void)
{
  CORBA::release (this->ptr_);
  this->ptr_ = ::CORBA_PollableSet::_nil ();
  return this->ptr_;
}

ACE_INLINE ::CORBA_PollableSet_ptr
CORBA_PollableSet_var::_retn (void)
{
  // yield ownership of managed obj reference
  ::CORBA_PollableSet_ptr val = this->ptr_;
  this->ptr_ = ::CORBA_PollableSet::_nil ();
  return val;
}


#endif /* end #if !defined */


#if !defined (_CORBA_POLLABLESET___OUT_CI_)
#define _CORBA_POLLABLESET___OUT_CI_

// *************************************************************
// Inline operations for class CORBA_PollableSet_out
// *************************************************************

ACE_INLINE
CORBA_PollableSet_out::CORBA_PollableSet_out (CORBA_PollableSet_ptr &p)
  : ptr_ (p)
{
  this->ptr_ = ::CORBA_PollableSet::_nil ();
}

ACE_INLINE
CORBA_PollableSet_out::CORBA_PollableSet_out (CORBA_PollableSet_var &p) // constructor from _var
  : ptr_ (p.out ())
{
  CORBA::release (this->ptr_);
  this->ptr_ = ::CORBA_PollableSet::_nil ();
}

ACE_INLINE
CORBA_PollableSet_out::CORBA_PollableSet_out (const ::CORBA_PollableSet_out &p) // copy constructor
  : ptr_ (ACE_const_cast (CORBA_PollableSet_out &, p).ptr_)
{}

ACE_INLINE ::CORBA_PollableSet_out &
CORBA_PollableSet_out::operator= (const ::CORBA_PollableSet_out &p)
{
  this->ptr_ = ACE_const_cast (CORBA_PollableSet_out&, p).ptr_;
  return *this;
}

ACE_INLINE CORBA_PollableSet_out &
CORBA_PollableSet_out::operator= (const ::CORBA_PollableSet_var &p)
{
  this->ptr_ = ::CORBA_PollableSet::_duplicate (p.ptr ());
  return *this;
}

ACE_INLINE CORBA_PollableSet_out &
CORBA_PollableSet_out::operator= (CORBA_PollableSet_ptr p)
{
  this->ptr_ = p;
  return *this;
}

ACE_INLINE
CORBA_PollableSet_out::operator ::CORBA_PollableSet_ptr &() // cast
{
  return this->ptr_;
}

ACE_INLINE ::CORBA_PollableSet_ptr &
CORBA_PollableSet_out::ptr (void) // ptr
{
  return this->ptr_;
}

ACE_INLINE ::CORBA_PollableSet_ptr
CORBA_PollableSet_out::operator-> (void)
{
  return this->ptr_;
}


#endif /* end #if !defined */

// *************************************************************
// Inline operations for exception CORBA_PollableSet::NoPossiblePollable
// *************************************************************

// *************************************************************
// Inline operations for exception CORBA_PollableSet::UnknownPollable
// *************************************************************

ACE_INLINE CORBA::Boolean
operator<< (
    TAO_OutputCDR &,
    const CORBA_PollableSet_ptr
  );
ACE_INLINE CORBA::Boolean
operator>> (
    TAO_InputCDR &,
    CORBA_PollableSet_ptr &
  );
