// -*- C++ -*-
//
// $Id$

// ****  Code generated by the The ACE ORB (TAO) IDL Compiler ****
// TAO and the TAO IDL Compiler have been developed by:
//       Center for Distributed Object Computing
//       Washington University
//       St. Louis, MO
//       USA
//       http://www.cs.wustl.edu/~schmidt/doc-center.html
// and
//       Distributed Object Computing Laboratory
//       University of California at Irvine
//       Irvine, CA
//       USA
//       http://doc.ece.uci.edu/
// and
//       Institute for Software Integrated Systems
//       Vanderbilt University
//       Nashville, TN
//       USA
//       http://www.isis.vanderbilt.edu/
//
// Information about TAO is available at:
//     http://www.cs.wustl.edu/~schmidt/TAO.html

// TAO_IDL - Generated from
// be/be_codegen.cpp:302


#include "IFR_ComponentsC.h"
#include "tao/Exception_Data.h"
#include "tao/Invocation_Adapter.h"
#include "tao/Object_T.h"
#include "tao/Any_Impl_T.h"
#include "tao/Any_Dual_Impl_T.h"
#include "tao/Basic_Arguments.h"
#include "tao/Object_Argument_T.h"
#include "tao/Special_Basic_Arguments.h"
#include "tao/UB_String_Arguments.h"
#include "tao/Var_Size_Argument_T.h"

#if defined (__BORLANDC__)
#pragma option -w-rvl -w-rch -w-ccc -w-aus -w-sig
#endif /* __BORLANDC__ */

#if !defined (__ACE_INLINE__)
#include "IFR_ComponentsC.i"
#endif /* !defined INLINE */

// TAO_IDL - Generated from
// be/be_visitor_arg_traits.cpp:60

// Arg traits specializations.
namespace TAO
{

#if !defined (_CORBA_INTERFACEDEF__ARG_TRAITS_CS_)
#define _CORBA_INTERFACEDEF__ARG_TRAITS_CS_
  
  ACE_TEMPLATE_SPECIALIZATION
  class TAO_IFR_Client_Export Arg_Traits<CORBA::InterfaceDef>
    : public
        Object_Arg_Traits_T<
            CORBA::InterfaceDef_ptr,
            CORBA::InterfaceDef_var,
            CORBA::InterfaceDef_out,
            TAO::Objref_Traits<CORBA::InterfaceDef>
          >
  {
  };

#endif /* end #if !defined */
  
  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:263

#if !defined (_CORBA_INTERFACEDEFSEQ__ARG_TRAITS_CS_)
#define _CORBA_INTERFACEDEFSEQ__ARG_TRAITS_CS_
  
  ACE_TEMPLATE_SPECIALIZATION
  class TAO_IFR_Client_Export Arg_Traits<CORBA::InterfaceDefSeq>
    : public
        Var_Size_Arg_Traits_T<
            CORBA::InterfaceDefSeq,
            CORBA::InterfaceDefSeq_var,
            CORBA::InterfaceDefSeq_out
          >
  {
  };

#endif /* end #if !defined */

#if !defined (_CORBA_VALUEDEF__ARG_TRAITS_CS_)
#define _CORBA_VALUEDEF__ARG_TRAITS_CS_
  
  ACE_TEMPLATE_SPECIALIZATION
  class TAO_IFR_Client_Export Arg_Traits<CORBA::ValueDef>
    : public
        Object_Arg_Traits_T<
            CORBA::ValueDef_ptr,
            CORBA::ValueDef_var,
            CORBA::ValueDef_out,
            TAO::Objref_Traits<CORBA::ValueDef>
          >
  {
  };

#endif /* end #if !defined */
  
  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:263

#if !defined (_CORBA_VALUEDEFSEQ__ARG_TRAITS_CS_)
#define _CORBA_VALUEDEFSEQ__ARG_TRAITS_CS_
  
  ACE_TEMPLATE_SPECIALIZATION
  class TAO_IFR_Client_Export Arg_Traits<CORBA::ValueDefSeq>
    : public
        Var_Size_Arg_Traits_T<
            CORBA::ValueDefSeq,
            CORBA::ValueDefSeq_var,
            CORBA::ValueDefSeq_out
          >
  {
  };

#endif /* end #if !defined */
  
  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:263

#if !defined (_CORBA_EXTINITIALIZERSEQ__ARG_TRAITS_CS_)
#define _CORBA_EXTINITIALIZERSEQ__ARG_TRAITS_CS_
  
  ACE_TEMPLATE_SPECIALIZATION
  class TAO_IFR_Client_Export Arg_Traits<CORBA::ExtInitializerSeq>
    : public
        Var_Size_Arg_Traits_T<
            CORBA::ExtInitializerSeq,
            CORBA::ExtInitializerSeq_var,
            CORBA::ExtInitializerSeq_out
          >
  {
  };

#endif /* end #if !defined */
  
  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:263

#if !defined (_CORBA_EXCEPTIONDEFSEQ__ARG_TRAITS_CS_)
#define _CORBA_EXCEPTIONDEFSEQ__ARG_TRAITS_CS_
  
  ACE_TEMPLATE_SPECIALIZATION
  class TAO_IFR_Client_Export Arg_Traits<CORBA::ExceptionDefSeq>
    : public
        Var_Size_Arg_Traits_T<
            CORBA::ExceptionDefSeq,
            CORBA::ExceptionDefSeq_var,
            CORBA::ExceptionDefSeq_out
          >
  {
  };

#endif /* end #if !defined */
  
  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:263

#if !defined (_CORBA_PARDESCRIPTIONSEQ__ARG_TRAITS_CS_)
#define _CORBA_PARDESCRIPTIONSEQ__ARG_TRAITS_CS_
  
  ACE_TEMPLATE_SPECIALIZATION
  class TAO_IFR_Client_Export Arg_Traits<CORBA::ParDescriptionSeq>
    : public
        Var_Size_Arg_Traits_T<
            CORBA::ParDescriptionSeq,
            CORBA::ParDescriptionSeq_var,
            CORBA::ParDescriptionSeq_out
          >
  {
  };

#endif /* end #if !defined */

#if !defined (_CORBA_COMPONENTIR_COMPONENTDEF__ARG_TRAITS_CS_)
#define _CORBA_COMPONENTIR_COMPONENTDEF__ARG_TRAITS_CS_
  
  ACE_TEMPLATE_SPECIALIZATION
  class TAO_IFR_Client_Export Arg_Traits<CORBA::ComponentIR::ComponentDef>
    : public
        Object_Arg_Traits_T<
            CORBA::ComponentIR::ComponentDef_ptr,
            CORBA::ComponentIR::ComponentDef_var,
            CORBA::ComponentIR::ComponentDef_out,
            TAO::Objref_Traits<CORBA::ComponentIR::ComponentDef>
          >
  {
  };

#endif /* end #if !defined */

#if !defined (_CORBA_COMPONENTIR_HOMEDEF__ARG_TRAITS_CS_)
#define _CORBA_COMPONENTIR_HOMEDEF__ARG_TRAITS_CS_
  
  ACE_TEMPLATE_SPECIALIZATION
  class TAO_IFR_Client_Export Arg_Traits<CORBA::ComponentIR::HomeDef>
    : public
        Object_Arg_Traits_T<
            CORBA::ComponentIR::HomeDef_ptr,
            CORBA::ComponentIR::HomeDef_var,
            CORBA::ComponentIR::HomeDef_out,
            TAO::Objref_Traits<CORBA::ComponentIR::HomeDef>
          >
  {
  };

#endif /* end #if !defined */

#if !defined (_CORBA_COMPONENTIR_EVENTDEF__ARG_TRAITS_CS_)
#define _CORBA_COMPONENTIR_EVENTDEF__ARG_TRAITS_CS_
  
  ACE_TEMPLATE_SPECIALIZATION
  class TAO_IFR_Client_Export Arg_Traits<CORBA::ComponentIR::EventDef>
    : public
        Object_Arg_Traits_T<
            CORBA::ComponentIR::EventDef_ptr,
            CORBA::ComponentIR::EventDef_var,
            CORBA::ComponentIR::EventDef_out,
            TAO::Objref_Traits<CORBA::ComponentIR::EventDef>
          >
  {
  };

#endif /* end #if !defined */

#if !defined (_CORBA_COMPONENTIR_PROVIDESDEF__ARG_TRAITS_CS_)
#define _CORBA_COMPONENTIR_PROVIDESDEF__ARG_TRAITS_CS_
  
  ACE_TEMPLATE_SPECIALIZATION
  class TAO_IFR_Client_Export Arg_Traits<CORBA::ComponentIR::ProvidesDef>
    : public
        Object_Arg_Traits_T<
            CORBA::ComponentIR::ProvidesDef_ptr,
            CORBA::ComponentIR::ProvidesDef_var,
            CORBA::ComponentIR::ProvidesDef_out,
            TAO::Objref_Traits<CORBA::ComponentIR::ProvidesDef>
          >
  {
  };

#endif /* end #if !defined */

#if !defined (_CORBA_COMPONENTIR_USESDEF__ARG_TRAITS_CS_)
#define _CORBA_COMPONENTIR_USESDEF__ARG_TRAITS_CS_
  
  ACE_TEMPLATE_SPECIALIZATION
  class TAO_IFR_Client_Export Arg_Traits<CORBA::ComponentIR::UsesDef>
    : public
        Object_Arg_Traits_T<
            CORBA::ComponentIR::UsesDef_ptr,
            CORBA::ComponentIR::UsesDef_var,
            CORBA::ComponentIR::UsesDef_out,
            TAO::Objref_Traits<CORBA::ComponentIR::UsesDef>
          >
  {
  };

#endif /* end #if !defined */

#if !defined (_CORBA_COMPONENTIR_EMITSDEF__ARG_TRAITS_CS_)
#define _CORBA_COMPONENTIR_EMITSDEF__ARG_TRAITS_CS_
  
  ACE_TEMPLATE_SPECIALIZATION
  class TAO_IFR_Client_Export Arg_Traits<CORBA::ComponentIR::EmitsDef>
    : public
        Object_Arg_Traits_T<
            CORBA::ComponentIR::EmitsDef_ptr,
            CORBA::ComponentIR::EmitsDef_var,
            CORBA::ComponentIR::EmitsDef_out,
            TAO::Objref_Traits<CORBA::ComponentIR::EmitsDef>
          >
  {
  };

#endif /* end #if !defined */

#if !defined (_CORBA_COMPONENTIR_PUBLISHESDEF__ARG_TRAITS_CS_)
#define _CORBA_COMPONENTIR_PUBLISHESDEF__ARG_TRAITS_CS_
  
  ACE_TEMPLATE_SPECIALIZATION
  class TAO_IFR_Client_Export Arg_Traits<CORBA::ComponentIR::PublishesDef>
    : public
        Object_Arg_Traits_T<
            CORBA::ComponentIR::PublishesDef_ptr,
            CORBA::ComponentIR::PublishesDef_var,
            CORBA::ComponentIR::PublishesDef_out,
            TAO::Objref_Traits<CORBA::ComponentIR::PublishesDef>
          >
  {
  };

#endif /* end #if !defined */

#if !defined (_CORBA_COMPONENTIR_CONSUMESDEF__ARG_TRAITS_CS_)
#define _CORBA_COMPONENTIR_CONSUMESDEF__ARG_TRAITS_CS_
  
  ACE_TEMPLATE_SPECIALIZATION
  class TAO_IFR_Client_Export Arg_Traits<CORBA::ComponentIR::ConsumesDef>
    : public
        Object_Arg_Traits_T<
            CORBA::ComponentIR::ConsumesDef_ptr,
            CORBA::ComponentIR::ConsumesDef_var,
            CORBA::ComponentIR::ConsumesDef_out,
            TAO::Objref_Traits<CORBA::ComponentIR::ConsumesDef>
          >
  {
  };

#endif /* end #if !defined */

#if !defined (_CORBA_COMPONENTIR_FACTORYDEF__ARG_TRAITS_CS_)
#define _CORBA_COMPONENTIR_FACTORYDEF__ARG_TRAITS_CS_
  
  ACE_TEMPLATE_SPECIALIZATION
  class TAO_IFR_Client_Export Arg_Traits<CORBA::ComponentIR::FactoryDef>
    : public
        Object_Arg_Traits_T<
            CORBA::ComponentIR::FactoryDef_ptr,
            CORBA::ComponentIR::FactoryDef_var,
            CORBA::ComponentIR::FactoryDef_out,
            TAO::Objref_Traits<CORBA::ComponentIR::FactoryDef>
          >
  {
  };

#endif /* end #if !defined */

#if !defined (_CORBA_COMPONENTIR_FINDERDEF__ARG_TRAITS_CS_)
#define _CORBA_COMPONENTIR_FINDERDEF__ARG_TRAITS_CS_
  
  ACE_TEMPLATE_SPECIALIZATION
  class TAO_IFR_Client_Export Arg_Traits<CORBA::ComponentIR::FinderDef>
    : public
        Object_Arg_Traits_T<
            CORBA::ComponentIR::FinderDef_ptr,
            CORBA::ComponentIR::FinderDef_var,
            CORBA::ComponentIR::FinderDef_out,
            TAO::Objref_Traits<CORBA::ComponentIR::FinderDef>
          >
  {
  };

#endif /* end #if !defined */
};

// TAO_IDL - Generated from
// be/be_visitor_interface/interface_cs.cpp:60

// Traits specializations for CORBA::ComponentIR::EventDef.

CORBA::ComponentIR::EventDef_ptr
TAO::Objref_Traits<CORBA::ComponentIR::EventDef>::tao_duplicate (
    CORBA::ComponentIR::EventDef_ptr p
  )
{
  return CORBA::ComponentIR::EventDef::_duplicate (p);
}

void
TAO::Objref_Traits<CORBA::ComponentIR::EventDef>::tao_release (
    CORBA::ComponentIR::EventDef_ptr p
  )
{
  CORBA::release (p);
}

CORBA::ComponentIR::EventDef_ptr
TAO::Objref_Traits<CORBA::ComponentIR::EventDef>::tao_nil (void)
{
  return CORBA::ComponentIR::EventDef::_nil ();
}

CORBA::Boolean
TAO::Objref_Traits<CORBA::ComponentIR::EventDef>::tao_marshal (
    CORBA::ComponentIR::EventDef_ptr p,
    TAO_OutputCDR & cdr
  )
{
  return p->marshal (cdr);
}

// Function pointer for collocation factory initialization.
TAO::Collocation_Proxy_Broker * 
(*CORBA_ComponentIR__TAO_EventDef_Proxy_Broker_Factory_function_pointer) (
    CORBA::Object_ptr obj
  ) = 0;

CORBA::ComponentIR::EventDef::EventDef (int collocated)
 : the_TAO_EventDef_Proxy_Broker_ (0)
{
  this->CORBA_ComponentIR_EventDef_setup_collocation (collocated);
}

void
CORBA::ComponentIR::EventDef::CORBA_ComponentIR_EventDef_setup_collocation (int collocated)
{
  if (collocated)
    {
      this->the_TAO_EventDef_Proxy_Broker_ =
        ::CORBA_ComponentIR__TAO_EventDef_Proxy_Broker_Factory_function_pointer (this);
    }
  
  this->CORBA_ExtValueDef_setup_collocation (collocated);
}

CORBA::ComponentIR::EventDef::~EventDef (void)
{}

void 
CORBA::ComponentIR::EventDef::_tao_any_destructor (void *_tao_void_pointer)
{
  EventDef *_tao_tmp_pointer =
    ACE_static_cast (EventDef *, _tao_void_pointer);
  CORBA::release (_tao_tmp_pointer);
}

CORBA::ComponentIR::EventDef_ptr
CORBA::ComponentIR::EventDef::_narrow (
    CORBA::Object_ptr _tao_objref
    ACE_ENV_ARG_DECL
  )
{
  return
    TAO::Narrow_Utils<EventDef>::narrow (
        _tao_objref,
        "IDL:omg.org/CORBA/ComponentIR/EventDef:1.0",
        CORBA_ComponentIR__TAO_EventDef_Proxy_Broker_Factory_function_pointer
        ACE_ENV_ARG_PARAMETER
      );
}

CORBA::ComponentIR::EventDef_ptr
CORBA::ComponentIR::EventDef::_duplicate (EventDef_ptr obj)
{
  if (! CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  
  return obj;
}

CORBA::Boolean
CORBA::ComponentIR::EventDef::_is_a (
    const char *value
    ACE_ENV_ARG_DECL
  )
{
  if (
      !ACE_OS::strcmp (
          (char *)value,
          "IDL:omg.org/CORBA/IRObject:1.0"
        ) ||
      !ACE_OS::strcmp (
          (char *)value,
          "IDL:omg.org/CORBA/Container:1.0"
        ) ||
      !ACE_OS::strcmp (
          (char *)value,
          "IDL:omg.org/CORBA/Contained:1.0"
        ) ||
      !ACE_OS::strcmp (
          (char *)value,
          "IDL:omg.org/CORBA/IDLType:1.0"
        ) ||
      !ACE_OS::strcmp (
          (char *)value,
          "IDL:omg.org/CORBA/ValueDef:1.0"
        ) ||
      !ACE_OS::strcmp (
          (char *)value,
          "IDL:omg.org/CORBA/ExtValueDef:1.0"
        ) ||
      !ACE_OS::strcmp (
          (char *)value,
          "IDL:omg.org/CORBA/ComponentIR/EventDef:1.0"
        ) ||
      !ACE_OS::strcmp (
          (char *)value,
          "IDL:omg.org/CORBA/Object:1.0"
        )
     )
    {
      return 1; // success using local knowledge
    }
  else
    {
      return this->ACE_NESTED_CLASS (CORBA, Object)::_is_a (
          value
          ACE_ENV_ARG_PARAMETER
        );
    }
}

const char* CORBA::ComponentIR::EventDef::_interface_repository_id (void) const
{
  return "IDL:omg.org/CORBA/ComponentIR/EventDef:1.0";
}

CORBA::Boolean
CORBA::ComponentIR::EventDef::marshal (TAO_OutputCDR &cdr)
{
  return (cdr << this);
}

// TAO_IDL - Generated from
// be/be_visitor_typecode/typecode_defn.cpp:284

static const CORBA::Long _oc_CORBA_ComponentIR_EventDef[] =
{
    TAO_ENCAP_BYTE_ORDER, // byte order
  43,
  ACE_NTOHL (0x49444c3a), 
  ACE_NTOHL (0x6f6d672e), 
  ACE_NTOHL (0x6f72672f), 
  ACE_NTOHL (0x434f5242), 
  ACE_NTOHL (0x412f436f), 
  ACE_NTOHL (0x6d706f6e), 
  ACE_NTOHL (0x656e7449), 
  ACE_NTOHL (0x522f4576), 
  ACE_NTOHL (0x656e7444), 
  ACE_NTOHL (0x65663a31), 
  ACE_NTOHL (0x2e300000),  // repository ID = IDL:omg.org/CORBA/ComponentIR/EventDef:1.0
    9,
  ACE_NTOHL (0x4576656e), 
  ACE_NTOHL (0x74446566), 
  ACE_NTOHL (0x0),  // name = EventDef
  };

static CORBA::TypeCode _tc_TAO_tc_CORBA_ComponentIR_EventDef (
    CORBA::tk_objref,
    sizeof (_oc_CORBA_ComponentIR_EventDef),
    (char *) &_oc_CORBA_ComponentIR_EventDef,
    0,
    sizeof (CORBA::ComponentIR::EventDef)
  );

namespace CORBA
{
  namespace ComponentIR
  {
    ::CORBA::TypeCode_ptr _tc_EventDef =
      &_tc_TAO_tc_CORBA_ComponentIR_EventDef;
  }
  }
  
  // TAO_IDL - Generated from
  // be/be_visitor_interface/interface_cs.cpp:60
  
  // Traits specializations for CORBA::ComponentIR::Container.
  
  CORBA::ComponentIR::Container_ptr
  TAO::Objref_Traits<CORBA::ComponentIR::Container>::tao_duplicate (
      CORBA::ComponentIR::Container_ptr p
    )
  {
    return CORBA::ComponentIR::Container::_duplicate (p);
  }
  
  void
  TAO::Objref_Traits<CORBA::ComponentIR::Container>::tao_release (
      CORBA::ComponentIR::Container_ptr p
    )
  {
    CORBA::release (p);
  }
  
  CORBA::ComponentIR::Container_ptr
  TAO::Objref_Traits<CORBA::ComponentIR::Container>::tao_nil (void)
  {
    return CORBA::ComponentIR::Container::_nil ();
  }
  
  CORBA::Boolean
  TAO::Objref_Traits<CORBA::ComponentIR::Container>::tao_marshal (
      CORBA::ComponentIR::Container_ptr p,
      TAO_OutputCDR & cdr
    )
  {
    return p->marshal (cdr);
  }
  
  // Function pointer for collocation factory initialization.
  TAO::Collocation_Proxy_Broker * 
  (*CORBA_ComponentIR__TAO_Container_Proxy_Broker_Factory_function_pointer) (
      CORBA::Object_ptr obj
    ) = 0;
  
  // TAO_IDL - Generated from
  // be/be_visitor_operation/operation_cs.cpp:78
  
  ::CORBA::ComponentIR::ComponentDef_ptr CORBA::ComponentIR::Container::create_component (
      const char * id,
      const char * name,
      const char * version,
      CORBA::ComponentIR::ComponentDef_ptr base_component,
      const CORBA::InterfaceDefSeq & supports_interfaces
      ACE_ENV_ARG_DECL
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ))
  {
    if (!this->is_evaluated ())
      {
        ACE_NESTED_CLASS (CORBA, Object)::tao_object_initialize (this);
      }
    
    if (this->the_TAO_Container_Proxy_Broker_ == 0)
      {
        CORBA_ComponentIR_Container_setup_collocation (
            this->ACE_NESTED_CLASS (CORBA, Object)::_is_collocated ()
          );
      }
    
    TAO::Arg_Traits<CORBA::ComponentIR::ComponentDef>::ret_val _tao_retval;
    TAO::Arg_Traits<CORBA::RepositoryId>::in_arg_val _tao_id (id);
    TAO::Arg_Traits<CORBA::Identifier>::in_arg_val _tao_name (name);
    TAO::Arg_Traits<CORBA::VersionSpec>::in_arg_val _tao_version (version);
    TAO::Arg_Traits<CORBA::ComponentIR::ComponentDef>::in_arg_val _tao_base_component (base_component);
    TAO::Arg_Traits<CORBA::InterfaceDefSeq>::in_arg_val _tao_supports_interfaces (supports_interfaces);
    
    TAO::Argument *_tao_signature [] =
      {
        &_tao_retval,
        &_tao_id,
        &_tao_name,
        &_tao_version,
        &_tao_base_component,
        &_tao_supports_interfaces
      };
    
    TAO::Invocation_Adapter _tao_call (
        this,
        _tao_signature,
        6,
        "create_component",
        16,
        this->the_TAO_Container_Proxy_Broker_
      );
    
    _tao_call.invoke (0, 0 ACE_ENV_ARG_PARAMETER);
    ACE_CHECK_RETURN (_tao_retval.excp ());
    
    return _tao_retval.retn ();
  }
  
  // TAO_IDL - Generated from
  // be/be_visitor_operation/operation_cs.cpp:78
  
  ::CORBA::ComponentIR::HomeDef_ptr CORBA::ComponentIR::Container::create_home (
      const char * id,
      const char * name,
      const char * version,
      CORBA::ComponentIR::HomeDef_ptr base_home,
      CORBA::ComponentIR::ComponentDef_ptr managed_component,
      const CORBA::InterfaceDefSeq & supports_interfaces,
      CORBA::ValueDef_ptr primary_key
      ACE_ENV_ARG_DECL
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ))
  {
    if (!this->is_evaluated ())
      {
        ACE_NESTED_CLASS (CORBA, Object)::tao_object_initialize (this);
      }
    
    if (this->the_TAO_Container_Proxy_Broker_ == 0)
      {
        CORBA_ComponentIR_Container_setup_collocation (
            this->ACE_NESTED_CLASS (CORBA, Object)::_is_collocated ()
          );
      }
    
    TAO::Arg_Traits<CORBA::ComponentIR::HomeDef>::ret_val _tao_retval;
    TAO::Arg_Traits<CORBA::RepositoryId>::in_arg_val _tao_id (id);
    TAO::Arg_Traits<CORBA::Identifier>::in_arg_val _tao_name (name);
    TAO::Arg_Traits<CORBA::VersionSpec>::in_arg_val _tao_version (version);
    TAO::Arg_Traits<CORBA::ComponentIR::HomeDef>::in_arg_val _tao_base_home (base_home);
    TAO::Arg_Traits<CORBA::ComponentIR::ComponentDef>::in_arg_val _tao_managed_component (managed_component);
    TAO::Arg_Traits<CORBA::InterfaceDefSeq>::in_arg_val _tao_supports_interfaces (supports_interfaces);
    TAO::Arg_Traits<CORBA::ValueDef>::in_arg_val _tao_primary_key (primary_key);
    
    TAO::Argument *_tao_signature [] =
      {
        &_tao_retval,
        &_tao_id,
        &_tao_name,
        &_tao_version,
        &_tao_base_home,
        &_tao_managed_component,
        &_tao_supports_interfaces,
        &_tao_primary_key
      };
    
    TAO::Invocation_Adapter _tao_call (
        this,
        _tao_signature,
        8,
        "create_home",
        11,
        this->the_TAO_Container_Proxy_Broker_
      );
    
    _tao_call.invoke (0, 0 ACE_ENV_ARG_PARAMETER);
    ACE_CHECK_RETURN (_tao_retval.excp ());
    
    return _tao_retval.retn ();
  }
  
  // TAO_IDL - Generated from
  // be/be_visitor_operation/operation_cs.cpp:78
  
  ::CORBA::ComponentIR::EventDef_ptr CORBA::ComponentIR::Container::create_event (
      const char * id,
      const char * name,
      const char * version,
      CORBA::Boolean is_custom,
      CORBA::Boolean is_abstract,
      CORBA::ValueDef_ptr base_value,
      CORBA::Boolean is_truncatable,
      const CORBA::ValueDefSeq & abstract_base_values,
      const CORBA::InterfaceDefSeq & supported_interfaces,
      const CORBA::ExtInitializerSeq & initializers
      ACE_ENV_ARG_DECL
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ))
  {
    if (!this->is_evaluated ())
      {
        ACE_NESTED_CLASS (CORBA, Object)::tao_object_initialize (this);
      }
    
    if (this->the_TAO_Container_Proxy_Broker_ == 0)
      {
        CORBA_ComponentIR_Container_setup_collocation (
            this->ACE_NESTED_CLASS (CORBA, Object)::_is_collocated ()
          );
      }
    
    TAO::Arg_Traits<CORBA::ComponentIR::EventDef>::ret_val _tao_retval;
    TAO::Arg_Traits<CORBA::RepositoryId>::in_arg_val _tao_id (id);
    TAO::Arg_Traits<CORBA::Identifier>::in_arg_val _tao_name (name);
    TAO::Arg_Traits<CORBA::VersionSpec>::in_arg_val _tao_version (version);
    TAO::Arg_Traits<ACE_InputCDR::to_boolean>::in_arg_val _tao_is_custom (is_custom);
    TAO::Arg_Traits<ACE_InputCDR::to_boolean>::in_arg_val _tao_is_abstract (is_abstract);
    TAO::Arg_Traits<CORBA::ValueDef>::in_arg_val _tao_base_value (base_value);
    TAO::Arg_Traits<ACE_InputCDR::to_boolean>::in_arg_val _tao_is_truncatable (is_truncatable);
    TAO::Arg_Traits<CORBA::ValueDefSeq>::in_arg_val _tao_abstract_base_values (abstract_base_values);
    TAO::Arg_Traits<CORBA::InterfaceDefSeq>::in_arg_val _tao_supported_interfaces (supported_interfaces);
    TAO::Arg_Traits<CORBA::ExtInitializerSeq>::in_arg_val _tao_initializers (initializers);
    
    TAO::Argument *_tao_signature [] =
      {
        &_tao_retval,
        &_tao_id,
        &_tao_name,
        &_tao_version,
        &_tao_is_custom,
        &_tao_is_abstract,
        &_tao_base_value,
        &_tao_is_truncatable,
        &_tao_abstract_base_values,
        &_tao_supported_interfaces,
        &_tao_initializers
      };
    
    TAO::Invocation_Adapter _tao_call (
        this,
        _tao_signature,
        11,
        "create_event",
        12,
        this->the_TAO_Container_Proxy_Broker_
      );
    
    _tao_call.invoke (0, 0 ACE_ENV_ARG_PARAMETER);
    ACE_CHECK_RETURN (_tao_retval.excp ());
    
    return _tao_retval.retn ();
  }
  
  CORBA::ComponentIR::Container::Container (int collocated)
   : the_TAO_Container_Proxy_Broker_ (0)
  {
    this->CORBA_ComponentIR_Container_setup_collocation (collocated);
  }

void
CORBA::ComponentIR::Container::CORBA_ComponentIR_Container_setup_collocation (int collocated)
{
  if (collocated)
    {
      this->the_TAO_Container_Proxy_Broker_ =
        ::CORBA_ComponentIR__TAO_Container_Proxy_Broker_Factory_function_pointer (this);
    }
  
  this->CORBA_Container_setup_collocation (collocated);
}

CORBA::ComponentIR::Container::~Container (void)
{}

void 
CORBA::ComponentIR::Container::_tao_any_destructor (void *_tao_void_pointer)
{
  Container *_tao_tmp_pointer =
    ACE_static_cast (Container *, _tao_void_pointer);
  CORBA::release (_tao_tmp_pointer);
}

CORBA::ComponentIR::Container_ptr
CORBA::ComponentIR::Container::_narrow (
    CORBA::Object_ptr _tao_objref
    ACE_ENV_ARG_DECL
  )
{
  return
    TAO::Narrow_Utils<Container>::narrow (
        _tao_objref,
        "IDL:omg.org/CORBA/ComponentIR/Container:1.0",
        CORBA_ComponentIR__TAO_Container_Proxy_Broker_Factory_function_pointer
        ACE_ENV_ARG_PARAMETER
      );
}

CORBA::ComponentIR::Container_ptr
CORBA::ComponentIR::Container::_duplicate (Container_ptr obj)
{
  if (! CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  
  return obj;
}

CORBA::Boolean
CORBA::ComponentIR::Container::_is_a (
    const char *value
    ACE_ENV_ARG_DECL
  )
{
  if (
      !ACE_OS::strcmp (
          (char *)value,
          "IDL:omg.org/CORBA/IRObject:1.0"
        ) ||
      !ACE_OS::strcmp (
          (char *)value,
          "IDL:omg.org/CORBA/Container:1.0"
        ) ||
      !ACE_OS::strcmp (
          (char *)value,
          "IDL:omg.org/CORBA/ComponentIR/Container:1.0"
        ) ||
      !ACE_OS::strcmp (
          (char *)value,
          "IDL:omg.org/CORBA/Object:1.0"
        )
     )
    {
      return 1; // success using local knowledge
    }
  else
    {
      return this->ACE_NESTED_CLASS (CORBA, Object)::_is_a (
          value
          ACE_ENV_ARG_PARAMETER
        );
    }
}

const char* CORBA::ComponentIR::Container::_interface_repository_id (void) const
{
  return "IDL:omg.org/CORBA/ComponentIR/Container:1.0";
}

CORBA::Boolean
CORBA::ComponentIR::Container::marshal (TAO_OutputCDR &cdr)
{
  return (cdr << this);
}

// TAO_IDL - Generated from
// be/be_visitor_typecode/typecode_defn.cpp:284

static const CORBA::Long _oc_CORBA_ComponentIR_Container[] =
{
    TAO_ENCAP_BYTE_ORDER, // byte order
  44,
  ACE_NTOHL (0x49444c3a), 
  ACE_NTOHL (0x6f6d672e), 
  ACE_NTOHL (0x6f72672f), 
  ACE_NTOHL (0x434f5242), 
  ACE_NTOHL (0x412f436f), 
  ACE_NTOHL (0x6d706f6e), 
  ACE_NTOHL (0x656e7449), 
  ACE_NTOHL (0x522f436f), 
  ACE_NTOHL (0x6e746169), 
  ACE_NTOHL (0x6e65723a), 
  ACE_NTOHL (0x312e3000),  // repository ID = IDL:omg.org/CORBA/ComponentIR/Container:1.0
    10,
  ACE_NTOHL (0x436f6e74), 
  ACE_NTOHL (0x61696e65), 
  ACE_NTOHL (0x72000000),  // name = Container
  };

static CORBA::TypeCode _tc_TAO_tc_CORBA_ComponentIR_Container (
    CORBA::tk_objref,
    sizeof (_oc_CORBA_ComponentIR_Container),
    (char *) &_oc_CORBA_ComponentIR_Container,
    0,
    sizeof (CORBA::ComponentIR::Container)
  );

namespace CORBA
{
  namespace ComponentIR
  {
    ::CORBA::TypeCode_ptr _tc_Container =
      &_tc_TAO_tc_CORBA_ComponentIR_Container;
  }
  }
  
  // TAO_IDL - Generated from
  // be/be_visitor_interface/interface_cs.cpp:60
  
  // Traits specializations for CORBA::ComponentIR::ModuleDef.
  
  CORBA::ComponentIR::ModuleDef_ptr
  TAO::Objref_Traits<CORBA::ComponentIR::ModuleDef>::tao_duplicate (
      CORBA::ComponentIR::ModuleDef_ptr p
    )
  {
    return CORBA::ComponentIR::ModuleDef::_duplicate (p);
  }
  
  void
  TAO::Objref_Traits<CORBA::ComponentIR::ModuleDef>::tao_release (
      CORBA::ComponentIR::ModuleDef_ptr p
    )
  {
    CORBA::release (p);
  }
  
  CORBA::ComponentIR::ModuleDef_ptr
  TAO::Objref_Traits<CORBA::ComponentIR::ModuleDef>::tao_nil (void)
  {
    return CORBA::ComponentIR::ModuleDef::_nil ();
  }
  
  CORBA::Boolean
  TAO::Objref_Traits<CORBA::ComponentIR::ModuleDef>::tao_marshal (
      CORBA::ComponentIR::ModuleDef_ptr p,
      TAO_OutputCDR & cdr
    )
  {
    return p->marshal (cdr);
  }
  
  // Function pointer for collocation factory initialization.
  TAO::Collocation_Proxy_Broker * 
  (*CORBA_ComponentIR__TAO_ModuleDef_Proxy_Broker_Factory_function_pointer) (
      CORBA::Object_ptr obj
    ) = 0;
  
  CORBA::ComponentIR::ModuleDef::ModuleDef (int collocated)
   : the_TAO_ModuleDef_Proxy_Broker_ (0)
  {
    this->CORBA_ComponentIR_ModuleDef_setup_collocation (collocated);
  }

void
CORBA::ComponentIR::ModuleDef::CORBA_ComponentIR_ModuleDef_setup_collocation (int collocated)
{
  if (collocated)
    {
      this->the_TAO_ModuleDef_Proxy_Broker_ =
        ::CORBA_ComponentIR__TAO_ModuleDef_Proxy_Broker_Factory_function_pointer (this);
    }
  
  this->CORBA_ModuleDef_setup_collocation (collocated);
  this->CORBA_ComponentIR_Container_setup_collocation (collocated);
}

CORBA::ComponentIR::ModuleDef::~ModuleDef (void)
{}

void 
CORBA::ComponentIR::ModuleDef::_tao_any_destructor (void *_tao_void_pointer)
{
  ModuleDef *_tao_tmp_pointer =
    ACE_static_cast (ModuleDef *, _tao_void_pointer);
  CORBA::release (_tao_tmp_pointer);
}

CORBA::ComponentIR::ModuleDef_ptr
CORBA::ComponentIR::ModuleDef::_narrow (
    CORBA::Object_ptr _tao_objref
    ACE_ENV_ARG_DECL
  )
{
  return
    TAO::Narrow_Utils<ModuleDef>::narrow (
        _tao_objref,
        "IDL:omg.org/CORBA/ComponentIR/ModuleDef:1.0",
        CORBA_ComponentIR__TAO_ModuleDef_Proxy_Broker_Factory_function_pointer
        ACE_ENV_ARG_PARAMETER
      );
}

CORBA::ComponentIR::ModuleDef_ptr
CORBA::ComponentIR::ModuleDef::_duplicate (ModuleDef_ptr obj)
{
  if (! CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  
  return obj;
}

CORBA::Boolean
CORBA::ComponentIR::ModuleDef::_is_a (
    const char *value
    ACE_ENV_ARG_DECL
  )
{
  if (
      !ACE_OS::strcmp (
          (char *)value,
          "IDL:omg.org/CORBA/IRObject:1.0"
        ) ||
      !ACE_OS::strcmp (
          (char *)value,
          "IDL:omg.org/CORBA/Container:1.0"
        ) ||
      !ACE_OS::strcmp (
          (char *)value,
          "IDL:omg.org/CORBA/Contained:1.0"
        ) ||
      !ACE_OS::strcmp (
          (char *)value,
          "IDL:omg.org/CORBA/ModuleDef:1.0"
        ) ||
      !ACE_OS::strcmp (
          (char *)value,
          "IDL:omg.org/CORBA/ComponentIR/Container:1.0"
        ) ||
      !ACE_OS::strcmp (
          (char *)value,
          "IDL:omg.org/CORBA/ComponentIR/ModuleDef:1.0"
        ) ||
      !ACE_OS::strcmp (
          (char *)value,
          "IDL:omg.org/CORBA/Object:1.0"
        )
     )
    {
      return 1; // success using local knowledge
    }
  else
    {
      return this->ACE_NESTED_CLASS (CORBA, Object)::_is_a (
          value
          ACE_ENV_ARG_PARAMETER
        );
    }
}

const char* CORBA::ComponentIR::ModuleDef::_interface_repository_id (void) const
{
  return "IDL:omg.org/CORBA/ComponentIR/ModuleDef:1.0";
}

CORBA::Boolean
CORBA::ComponentIR::ModuleDef::marshal (TAO_OutputCDR &cdr)
{
  return (cdr << this);
}

// TAO_IDL - Generated from
// be/be_visitor_typecode/typecode_defn.cpp:284

static const CORBA::Long _oc_CORBA_ComponentIR_ModuleDef[] =
{
    TAO_ENCAP_BYTE_ORDER, // byte order
  44,
  ACE_NTOHL (0x49444c3a), 
  ACE_NTOHL (0x6f6d672e), 
  ACE_NTOHL (0x6f72672f), 
  ACE_NTOHL (0x434f5242), 
  ACE_NTOHL (0x412f436f), 
  ACE_NTOHL (0x6d706f6e), 
  ACE_NTOHL (0x656e7449), 
  ACE_NTOHL (0x522f4d6f), 
  ACE_NTOHL (0x64756c65), 
  ACE_NTOHL (0x4465663a), 
  ACE_NTOHL (0x312e3000),  // repository ID = IDL:omg.org/CORBA/ComponentIR/ModuleDef:1.0
    10,
  ACE_NTOHL (0x4d6f6475), 
  ACE_NTOHL (0x6c654465), 
  ACE_NTOHL (0x66000000),  // name = ModuleDef
  };

static CORBA::TypeCode _tc_TAO_tc_CORBA_ComponentIR_ModuleDef (
    CORBA::tk_objref,
    sizeof (_oc_CORBA_ComponentIR_ModuleDef),
    (char *) &_oc_CORBA_ComponentIR_ModuleDef,
    0,
    sizeof (CORBA::ComponentIR::ModuleDef)
  );

namespace CORBA
{
  namespace ComponentIR
  {
    ::CORBA::TypeCode_ptr _tc_ModuleDef =
      &_tc_TAO_tc_CORBA_ComponentIR_ModuleDef;
  }
  }
  
  // TAO_IDL - Generated from
  // be/be_visitor_interface/interface_cs.cpp:60
  
  // Traits specializations for CORBA::ComponentIR::Repository.
  
  CORBA::ComponentIR::Repository_ptr
  TAO::Objref_Traits<CORBA::ComponentIR::Repository>::tao_duplicate (
      CORBA::ComponentIR::Repository_ptr p
    )
  {
    return CORBA::ComponentIR::Repository::_duplicate (p);
  }
  
  void
  TAO::Objref_Traits<CORBA::ComponentIR::Repository>::tao_release (
      CORBA::ComponentIR::Repository_ptr p
    )
  {
    CORBA::release (p);
  }
  
  CORBA::ComponentIR::Repository_ptr
  TAO::Objref_Traits<CORBA::ComponentIR::Repository>::tao_nil (void)
  {
    return CORBA::ComponentIR::Repository::_nil ();
  }
  
  CORBA::Boolean
  TAO::Objref_Traits<CORBA::ComponentIR::Repository>::tao_marshal (
      CORBA::ComponentIR::Repository_ptr p,
      TAO_OutputCDR & cdr
    )
  {
    return p->marshal (cdr);
  }
  
  // Function pointer for collocation factory initialization.
  TAO::Collocation_Proxy_Broker * 
  (*CORBA_ComponentIR__TAO_Repository_Proxy_Broker_Factory_function_pointer) (
      CORBA::Object_ptr obj
    ) = 0;
  
  CORBA::ComponentIR::Repository::Repository (int collocated)
   : the_TAO_Repository_Proxy_Broker_ (0)
  {
    this->CORBA_ComponentIR_Repository_setup_collocation (collocated);
  }

void
CORBA::ComponentIR::Repository::CORBA_ComponentIR_Repository_setup_collocation (int collocated)
{
  if (collocated)
    {
      this->the_TAO_Repository_Proxy_Broker_ =
        ::CORBA_ComponentIR__TAO_Repository_Proxy_Broker_Factory_function_pointer (this);
    }
  
  this->CORBA_Repository_setup_collocation (collocated);
  this->CORBA_ComponentIR_Container_setup_collocation (collocated);
}

CORBA::ComponentIR::Repository::~Repository (void)
{}

void 
CORBA::ComponentIR::Repository::_tao_any_destructor (void *_tao_void_pointer)
{
  Repository *_tao_tmp_pointer =
    ACE_static_cast (Repository *, _tao_void_pointer);
  CORBA::release (_tao_tmp_pointer);
}

CORBA::ComponentIR::Repository_ptr
CORBA::ComponentIR::Repository::_narrow (
    CORBA::Object_ptr _tao_objref
    ACE_ENV_ARG_DECL
  )
{
  return
    TAO::Narrow_Utils<Repository>::narrow (
        _tao_objref,
        "IDL:omg.org/CORBA/ComponentIR/Repository:1.0",
        CORBA_ComponentIR__TAO_Repository_Proxy_Broker_Factory_function_pointer
        ACE_ENV_ARG_PARAMETER
      );
}

CORBA::ComponentIR::Repository_ptr
CORBA::ComponentIR::Repository::_duplicate (Repository_ptr obj)
{
  if (! CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  
  return obj;
}

CORBA::Boolean
CORBA::ComponentIR::Repository::_is_a (
    const char *value
    ACE_ENV_ARG_DECL
  )
{
  if (
      !ACE_OS::strcmp (
          (char *)value,
          "IDL:omg.org/CORBA/IRObject:1.0"
        ) ||
      !ACE_OS::strcmp (
          (char *)value,
          "IDL:omg.org/CORBA/Container:1.0"
        ) ||
      !ACE_OS::strcmp (
          (char *)value,
          "IDL:omg.org/CORBA/Repository:1.0"
        ) ||
      !ACE_OS::strcmp (
          (char *)value,
          "IDL:omg.org/CORBA/ComponentIR/Container:1.0"
        ) ||
      !ACE_OS::strcmp (
          (char *)value,
          "IDL:omg.org/CORBA/ComponentIR/Repository:1.0"
        ) ||
      !ACE_OS::strcmp (
          (char *)value,
          "IDL:omg.org/CORBA/Object:1.0"
        )
     )
    {
      return 1; // success using local knowledge
    }
  else
    {
      return this->ACE_NESTED_CLASS (CORBA, Object)::_is_a (
          value
          ACE_ENV_ARG_PARAMETER
        );
    }
}

const char* CORBA::ComponentIR::Repository::_interface_repository_id (void) const
{
  return "IDL:omg.org/CORBA/ComponentIR/Repository:1.0";
}

CORBA::Boolean
CORBA::ComponentIR::Repository::marshal (TAO_OutputCDR &cdr)
{
  return (cdr << this);
}

// TAO_IDL - Generated from
// be/be_visitor_typecode/typecode_defn.cpp:284

static const CORBA::Long _oc_CORBA_ComponentIR_Repository[] =
{
    TAO_ENCAP_BYTE_ORDER, // byte order
  45,
  ACE_NTOHL (0x49444c3a), 
  ACE_NTOHL (0x6f6d672e), 
  ACE_NTOHL (0x6f72672f), 
  ACE_NTOHL (0x434f5242), 
  ACE_NTOHL (0x412f436f), 
  ACE_NTOHL (0x6d706f6e), 
  ACE_NTOHL (0x656e7449), 
  ACE_NTOHL (0x522f5265), 
  ACE_NTOHL (0x706f7369), 
  ACE_NTOHL (0x746f7279), 
  ACE_NTOHL (0x3a312e30), 
  ACE_NTOHL (0x0),  // repository ID = IDL:omg.org/CORBA/ComponentIR/Repository:1.0
    11,
  ACE_NTOHL (0x5265706f), 
  ACE_NTOHL (0x7369746f), 
  ACE_NTOHL (0x72790000),  // name = Repository
  };

static CORBA::TypeCode _tc_TAO_tc_CORBA_ComponentIR_Repository (
    CORBA::tk_objref,
    sizeof (_oc_CORBA_ComponentIR_Repository),
    (char *) &_oc_CORBA_ComponentIR_Repository,
    0,
    sizeof (CORBA::ComponentIR::Repository)
  );

namespace CORBA
{
  namespace ComponentIR
  {
    ::CORBA::TypeCode_ptr _tc_Repository =
      &_tc_TAO_tc_CORBA_ComponentIR_Repository;
  }
  }
  
  // TAO_IDL - Generated from
  // be/be_visitor_interface/interface_cs.cpp:60
  
  // Traits specializations for CORBA::ComponentIR::ProvidesDef.
  
  CORBA::ComponentIR::ProvidesDef_ptr
  TAO::Objref_Traits<CORBA::ComponentIR::ProvidesDef>::tao_duplicate (
      CORBA::ComponentIR::ProvidesDef_ptr p
    )
  {
    return CORBA::ComponentIR::ProvidesDef::_duplicate (p);
  }
  
  void
  TAO::Objref_Traits<CORBA::ComponentIR::ProvidesDef>::tao_release (
      CORBA::ComponentIR::ProvidesDef_ptr p
    )
  {
    CORBA::release (p);
  }
  
  CORBA::ComponentIR::ProvidesDef_ptr
  TAO::Objref_Traits<CORBA::ComponentIR::ProvidesDef>::tao_nil (void)
  {
    return CORBA::ComponentIR::ProvidesDef::_nil ();
  }
  
  CORBA::Boolean
  TAO::Objref_Traits<CORBA::ComponentIR::ProvidesDef>::tao_marshal (
      CORBA::ComponentIR::ProvidesDef_ptr p,
      TAO_OutputCDR & cdr
    )
  {
    return p->marshal (cdr);
  }
  
  // Function pointer for collocation factory initialization.
  TAO::Collocation_Proxy_Broker * 
  (*CORBA_ComponentIR__TAO_ProvidesDef_Proxy_Broker_Factory_function_pointer) (
      CORBA::Object_ptr obj
    ) = 0;
  
  // TAO_IDL - Generated from
  // be/be_visitor_operation/operation_cs.cpp:78
  
  ::CORBA::InterfaceDef_ptr CORBA::ComponentIR::ProvidesDef::interface_type (
      ACE_ENV_SINGLE_ARG_DECL
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ))
  {
    if (!this->is_evaluated ())
      {
        ACE_NESTED_CLASS (CORBA, Object)::tao_object_initialize (this);
      }
    
    if (this->the_TAO_ProvidesDef_Proxy_Broker_ == 0)
      {
        CORBA_ComponentIR_ProvidesDef_setup_collocation (
            this->ACE_NESTED_CLASS (CORBA, Object)::_is_collocated ()
          );
      }
    
    TAO::Arg_Traits<CORBA::InterfaceDef>::ret_val _tao_retval;
    
    TAO::Argument *_tao_signature [] =
      {
        &_tao_retval
      };
    
    TAO::Invocation_Adapter _tao_call (
        this,
        _tao_signature,
        1,
        "_get_interface_type",
        19,
        this->the_TAO_ProvidesDef_Proxy_Broker_
      );
    
    _tao_call.invoke (0, 0 ACE_ENV_ARG_PARAMETER);
    ACE_CHECK_RETURN (_tao_retval.excp ());
    
    return _tao_retval.retn ();
  }
  
  // TAO_IDL - Generated from
  // be/be_visitor_operation/operation_cs.cpp:78
  
  void CORBA::ComponentIR::ProvidesDef::interface_type (
      CORBA::InterfaceDef_ptr interface_type
      ACE_ENV_ARG_DECL
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ))
  {
    if (!this->is_evaluated ())
      {
        ACE_NESTED_CLASS (CORBA, Object)::tao_object_initialize (this);
      }
    
    if (this->the_TAO_ProvidesDef_Proxy_Broker_ == 0)
      {
        CORBA_ComponentIR_ProvidesDef_setup_collocation (
            this->ACE_NESTED_CLASS (CORBA, Object)::_is_collocated ()
          );
      }
    
    TAO::Arg_Traits<void>::ret_val _tao_retval;
    TAO::Arg_Traits<CORBA::InterfaceDef>::in_arg_val _tao_interface_type (interface_type);
    
    TAO::Argument *_tao_signature [] =
      {
        &_tao_retval,
        &_tao_interface_type
      };
    
    TAO::Invocation_Adapter _tao_call (
        this,
        _tao_signature,
        2,
        "_set_interface_type",
        19,
        this->the_TAO_ProvidesDef_Proxy_Broker_
      );
    
    _tao_call.invoke (0, 0 ACE_ENV_ARG_PARAMETER);
    ACE_CHECK;
  }
  
  CORBA::ComponentIR::ProvidesDef::ProvidesDef (int collocated)
   : the_TAO_ProvidesDef_Proxy_Broker_ (0)
  {
    this->CORBA_ComponentIR_ProvidesDef_setup_collocation (collocated);
  }

void
CORBA::ComponentIR::ProvidesDef::CORBA_ComponentIR_ProvidesDef_setup_collocation (int collocated)
{
  if (collocated)
    {
      this->the_TAO_ProvidesDef_Proxy_Broker_ =
        ::CORBA_ComponentIR__TAO_ProvidesDef_Proxy_Broker_Factory_function_pointer (this);
    }
  
  this->CORBA_Contained_setup_collocation (collocated);
}

CORBA::ComponentIR::ProvidesDef::~ProvidesDef (void)
{}

void 
CORBA::ComponentIR::ProvidesDef::_tao_any_destructor (void *_tao_void_pointer)
{
  ProvidesDef *_tao_tmp_pointer =
    ACE_static_cast (ProvidesDef *, _tao_void_pointer);
  CORBA::release (_tao_tmp_pointer);
}

CORBA::ComponentIR::ProvidesDef_ptr
CORBA::ComponentIR::ProvidesDef::_narrow (
    CORBA::Object_ptr _tao_objref
    ACE_ENV_ARG_DECL
  )
{
  return
    TAO::Narrow_Utils<ProvidesDef>::narrow (
        _tao_objref,
        "IDL:omg.org/CORBA/ComponentIR/ProvidesDef:1.0",
        CORBA_ComponentIR__TAO_ProvidesDef_Proxy_Broker_Factory_function_pointer
        ACE_ENV_ARG_PARAMETER
      );
}

CORBA::ComponentIR::ProvidesDef_ptr
CORBA::ComponentIR::ProvidesDef::_duplicate (ProvidesDef_ptr obj)
{
  if (! CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  
  return obj;
}

CORBA::Boolean
CORBA::ComponentIR::ProvidesDef::_is_a (
    const char *value
    ACE_ENV_ARG_DECL
  )
{
  if (
      !ACE_OS::strcmp (
          (char *)value,
          "IDL:omg.org/CORBA/IRObject:1.0"
        ) ||
      !ACE_OS::strcmp (
          (char *)value,
          "IDL:omg.org/CORBA/Contained:1.0"
        ) ||
      !ACE_OS::strcmp (
          (char *)value,
          "IDL:omg.org/CORBA/ComponentIR/ProvidesDef:1.0"
        ) ||
      !ACE_OS::strcmp (
          (char *)value,
          "IDL:omg.org/CORBA/Object:1.0"
        )
     )
    {
      return 1; // success using local knowledge
    }
  else
    {
      return this->ACE_NESTED_CLASS (CORBA, Object)::_is_a (
          value
          ACE_ENV_ARG_PARAMETER
        );
    }
}

const char* CORBA::ComponentIR::ProvidesDef::_interface_repository_id (void) const
{
  return "IDL:omg.org/CORBA/ComponentIR/ProvidesDef:1.0";
}

CORBA::Boolean
CORBA::ComponentIR::ProvidesDef::marshal (TAO_OutputCDR &cdr)
{
  return (cdr << this);
}

// TAO_IDL - Generated from
// be/be_visitor_typecode/typecode_defn.cpp:284

static const CORBA::Long _oc_CORBA_ComponentIR_ProvidesDef[] =
{
    TAO_ENCAP_BYTE_ORDER, // byte order
  46,
  ACE_NTOHL (0x49444c3a), 
  ACE_NTOHL (0x6f6d672e), 
  ACE_NTOHL (0x6f72672f), 
  ACE_NTOHL (0x434f5242), 
  ACE_NTOHL (0x412f436f), 
  ACE_NTOHL (0x6d706f6e), 
  ACE_NTOHL (0x656e7449), 
  ACE_NTOHL (0x522f5072), 
  ACE_NTOHL (0x6f766964), 
  ACE_NTOHL (0x65734465), 
  ACE_NTOHL (0x663a312e), 
  ACE_NTOHL (0x30000000),  // repository ID = IDL:omg.org/CORBA/ComponentIR/ProvidesDef:1.0
    12,
  ACE_NTOHL (0x50726f76), 
  ACE_NTOHL (0x69646573), 
  ACE_NTOHL (0x44656600),  // name = ProvidesDef
  };

static CORBA::TypeCode _tc_TAO_tc_CORBA_ComponentIR_ProvidesDef (
    CORBA::tk_objref,
    sizeof (_oc_CORBA_ComponentIR_ProvidesDef),
    (char *) &_oc_CORBA_ComponentIR_ProvidesDef,
    0,
    sizeof (CORBA::ComponentIR::ProvidesDef)
  );

namespace CORBA
{
  namespace ComponentIR
  {
    ::CORBA::TypeCode_ptr _tc_ProvidesDef =
      &_tc_TAO_tc_CORBA_ComponentIR_ProvidesDef;
  }
  }
  
  // TAO_IDL - Generated from
  // be/be_visitor_typecode/typecode_defn.cpp:284
  
  static const CORBA::Long _oc_CORBA_ComponentIR_ProvidesDescription[] =
  {
        TAO_ENCAP_BYTE_ORDER, // byte order
    54,
    ACE_NTOHL (0x49444c3a), 
    ACE_NTOHL (0x6f6d672e), 
    ACE_NTOHL (0x6f72672f), 
    ACE_NTOHL (0x434f5242), 
    ACE_NTOHL (0x412f436f), 
    ACE_NTOHL (0x6d706f6e), 
    ACE_NTOHL (0x656e7449), 
    ACE_NTOHL (0x522f5072), 
    ACE_NTOHL (0x6f766964), 
    ACE_NTOHL (0x65734465), 
    ACE_NTOHL (0x73637269), 
    ACE_NTOHL (0x7074696f), 
    ACE_NTOHL (0x6e3a312e), 
    ACE_NTOHL (0x30000000),  // repository ID = IDL:omg.org/CORBA/ComponentIR/ProvidesDescription:1.0
        20,
    ACE_NTOHL (0x50726f76), 
    ACE_NTOHL (0x69646573), 
    ACE_NTOHL (0x44657363), 
    ACE_NTOHL (0x72697074), 
    ACE_NTOHL (0x696f6e00),  // name = ProvidesDescription
    5, // member count
        5,
    ACE_NTOHL (0x6e616d65), 
    ACE_NTOHL (0x0),  // name = name
        CORBA::tk_alias, // typecode kind for typedefs
    68, // encapsulation length
      TAO_ENCAP_BYTE_ORDER, // byte order
      33,
      ACE_NTOHL (0x49444c3a), 
      ACE_NTOHL (0x6f6d672e), 
      ACE_NTOHL (0x6f72672f), 
      ACE_NTOHL (0x434f5242), 
      ACE_NTOHL (0x412f4964), 
      ACE_NTOHL (0x656e7469), 
      ACE_NTOHL (0x66696572), 
      ACE_NTOHL (0x3a312e30), 
      ACE_NTOHL (0x0),  // repository ID = IDL:omg.org/CORBA/Identifier:1.0
            11,
      ACE_NTOHL (0x4964656e), 
      ACE_NTOHL (0x74696669), 
      ACE_NTOHL (0x65720000),  // name = Identifier
            CORBA::tk_string, 
      0U, // string length

    3,
    ACE_NTOHL (0x69640000),  // name = id
        CORBA::tk_alias, // typecode kind for typedefs
    72, // encapsulation length
      TAO_ENCAP_BYTE_ORDER, // byte order
      35,
      ACE_NTOHL (0x49444c3a), 
      ACE_NTOHL (0x6f6d672e), 
      ACE_NTOHL (0x6f72672f), 
      ACE_NTOHL (0x434f5242), 
      ACE_NTOHL (0x412f5265), 
      ACE_NTOHL (0x706f7369), 
      ACE_NTOHL (0x746f7279), 
      ACE_NTOHL (0x49643a31), 
      ACE_NTOHL (0x2e300000),  // repository ID = IDL:omg.org/CORBA/RepositoryId:1.0
            13,
      ACE_NTOHL (0x5265706f), 
      ACE_NTOHL (0x7369746f), 
      ACE_NTOHL (0x72794964), 
      ACE_NTOHL (0x0),  // name = RepositoryId
            CORBA::tk_string, 
      0U, // string length

    11,
    ACE_NTOHL (0x64656669), 
    ACE_NTOHL (0x6e65645f), 
    ACE_NTOHL (0x696e0000),  // name = defined_in
        CORBA::tk_alias, // typecode kind for typedefs
    72, // encapsulation length
      TAO_ENCAP_BYTE_ORDER, // byte order
      35,
      ACE_NTOHL (0x49444c3a), 
      ACE_NTOHL (0x6f6d672e), 
      ACE_NTOHL (0x6f72672f), 
      ACE_NTOHL (0x434f5242), 
      ACE_NTOHL (0x412f5265), 
      ACE_NTOHL (0x706f7369), 
      ACE_NTOHL (0x746f7279), 
      ACE_NTOHL (0x49643a31), 
      ACE_NTOHL (0x2e300000),  // repository ID = IDL:omg.org/CORBA/RepositoryId:1.0
            13,
      ACE_NTOHL (0x5265706f), 
      ACE_NTOHL (0x7369746f), 
      ACE_NTOHL (0x72794964), 
      ACE_NTOHL (0x0),  // name = RepositoryId
            CORBA::tk_string, 
      0U, // string length

    8,
    ACE_NTOHL (0x76657273), 
    ACE_NTOHL (0x696f6e00),  // name = version
        CORBA::tk_alias, // typecode kind for typedefs
    68, // encapsulation length
      TAO_ENCAP_BYTE_ORDER, // byte order
      34,
      ACE_NTOHL (0x49444c3a), 
      ACE_NTOHL (0x6f6d672e), 
      ACE_NTOHL (0x6f72672f), 
      ACE_NTOHL (0x434f5242), 
      ACE_NTOHL (0x412f5665), 
      ACE_NTOHL (0x7273696f), 
      ACE_NTOHL (0x6e537065), 
      ACE_NTOHL (0x633a312e), 
      ACE_NTOHL (0x30000000),  // repository ID = IDL:omg.org/CORBA/VersionSpec:1.0
            12,
      ACE_NTOHL (0x56657273), 
      ACE_NTOHL (0x696f6e53), 
      ACE_NTOHL (0x70656300),  // name = VersionSpec
            CORBA::tk_string, 
      0U, // string length

    15,
    ACE_NTOHL (0x696e7465), 
    ACE_NTOHL (0x72666163), 
    ACE_NTOHL (0x655f7479), 
    ACE_NTOHL (0x70650000),  // name = interface_type
        CORBA::tk_alias, // typecode kind for typedefs
    72, // encapsulation length
      TAO_ENCAP_BYTE_ORDER, // byte order
      35,
      ACE_NTOHL (0x49444c3a), 
      ACE_NTOHL (0x6f6d672e), 
      ACE_NTOHL (0x6f72672f), 
      ACE_NTOHL (0x434f5242), 
      ACE_NTOHL (0x412f5265), 
      ACE_NTOHL (0x706f7369), 
      ACE_NTOHL (0x746f7279), 
      ACE_NTOHL (0x49643a31), 
      ACE_NTOHL (0x2e300000),  // repository ID = IDL:omg.org/CORBA/RepositoryId:1.0
            13,
      ACE_NTOHL (0x5265706f), 
      ACE_NTOHL (0x7369746f), 
      ACE_NTOHL (0x72794964), 
      ACE_NTOHL (0x0),  // name = RepositoryId
            CORBA::tk_string, 
      0U, // string length

};
  
  static CORBA::TypeCode _tc_TAO_tc_CORBA_ComponentIR_ProvidesDescription (
      CORBA::tk_struct,
      sizeof (_oc_CORBA_ComponentIR_ProvidesDescription),
      (char *) &_oc_CORBA_ComponentIR_ProvidesDescription,
      0,
      sizeof (CORBA::ComponentIR::ProvidesDescription)
    );
  
  namespace CORBA
  {
    namespace ComponentIR
    {
      ::CORBA::TypeCode_ptr _tc_ProvidesDescription =
        &_tc_TAO_tc_CORBA_ComponentIR_ProvidesDescription;
    }
    }
    
    // TAO_IDL - Generated from 
    // be/be_visitor_structure/structure_cs.cpp:66
    
    void 
    CORBA::ComponentIR::ProvidesDescription::_tao_any_destructor (
        void *_tao_void_pointer
      )
    {
      ProvidesDescription *_tao_tmp_pointer =
        ACE_static_cast (ProvidesDescription *, _tao_void_pointer);
      delete _tao_tmp_pointer;
    }
    
    // TAO_IDL - Generated from
    // be/be_visitor_interface/interface_cs.cpp:60
    
    // Traits specializations for CORBA::ComponentIR::UsesDef.
    
    CORBA::ComponentIR::UsesDef_ptr
    TAO::Objref_Traits<CORBA::ComponentIR::UsesDef>::tao_duplicate (
        CORBA::ComponentIR::UsesDef_ptr p
      )
    {
      return CORBA::ComponentIR::UsesDef::_duplicate (p);
    }
    
    void
    TAO::Objref_Traits<CORBA::ComponentIR::UsesDef>::tao_release (
        CORBA::ComponentIR::UsesDef_ptr p
      )
    {
      CORBA::release (p);
    }
    
    CORBA::ComponentIR::UsesDef_ptr
    TAO::Objref_Traits<CORBA::ComponentIR::UsesDef>::tao_nil (void)
    {
      return CORBA::ComponentIR::UsesDef::_nil ();
    }
    
    CORBA::Boolean
    TAO::Objref_Traits<CORBA::ComponentIR::UsesDef>::tao_marshal (
        CORBA::ComponentIR::UsesDef_ptr p,
        TAO_OutputCDR & cdr
      )
    {
      return p->marshal (cdr);
    }
    
    // Function pointer for collocation factory initialization.
    TAO::Collocation_Proxy_Broker * 
    (*CORBA_ComponentIR__TAO_UsesDef_Proxy_Broker_Factory_function_pointer) (
        CORBA::Object_ptr obj
      ) = 0;
    
    // TAO_IDL - Generated from
    // be/be_visitor_operation/operation_cs.cpp:78
    
    ::CORBA::InterfaceDef_ptr CORBA::ComponentIR::UsesDef::interface_type (
        ACE_ENV_SINGLE_ARG_DECL
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ))
    {
      if (!this->is_evaluated ())
        {
          ACE_NESTED_CLASS (CORBA, Object)::tao_object_initialize (this);
        }
      
      if (this->the_TAO_UsesDef_Proxy_Broker_ == 0)
        {
          CORBA_ComponentIR_UsesDef_setup_collocation (
              this->ACE_NESTED_CLASS (CORBA, Object)::_is_collocated ()
            );
        }
      
      TAO::Arg_Traits<CORBA::InterfaceDef>::ret_val _tao_retval;
      
      TAO::Argument *_tao_signature [] =
        {
          &_tao_retval
        };
      
      TAO::Invocation_Adapter _tao_call (
          this,
          _tao_signature,
          1,
          "_get_interface_type",
          19,
          this->the_TAO_UsesDef_Proxy_Broker_
        );
      
      _tao_call.invoke (0, 0 ACE_ENV_ARG_PARAMETER);
      ACE_CHECK_RETURN (_tao_retval.excp ());
      
      return _tao_retval.retn ();
    }
    
    // TAO_IDL - Generated from
    // be/be_visitor_operation/operation_cs.cpp:78
    
    void CORBA::ComponentIR::UsesDef::interface_type (
        CORBA::InterfaceDef_ptr interface_type
        ACE_ENV_ARG_DECL
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ))
    {
      if (!this->is_evaluated ())
        {
          ACE_NESTED_CLASS (CORBA, Object)::tao_object_initialize (this);
        }
      
      if (this->the_TAO_UsesDef_Proxy_Broker_ == 0)
        {
          CORBA_ComponentIR_UsesDef_setup_collocation (
              this->ACE_NESTED_CLASS (CORBA, Object)::_is_collocated ()
            );
        }
      
      TAO::Arg_Traits<void>::ret_val _tao_retval;
      TAO::Arg_Traits<CORBA::InterfaceDef>::in_arg_val _tao_interface_type (interface_type);
      
      TAO::Argument *_tao_signature [] =
        {
          &_tao_retval,
          &_tao_interface_type
        };
      
      TAO::Invocation_Adapter _tao_call (
          this,
          _tao_signature,
          2,
          "_set_interface_type",
          19,
          this->the_TAO_UsesDef_Proxy_Broker_
        );
      
      _tao_call.invoke (0, 0 ACE_ENV_ARG_PARAMETER);
      ACE_CHECK;
    }
    
    // TAO_IDL - Generated from
    // be/be_visitor_operation/operation_cs.cpp:78
    
    CORBA::Boolean CORBA::ComponentIR::UsesDef::is_multiple (
        ACE_ENV_SINGLE_ARG_DECL
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ))
    {
      if (!this->is_evaluated ())
        {
          ACE_NESTED_CLASS (CORBA, Object)::tao_object_initialize (this);
        }
      
      if (this->the_TAO_UsesDef_Proxy_Broker_ == 0)
        {
          CORBA_ComponentIR_UsesDef_setup_collocation (
              this->ACE_NESTED_CLASS (CORBA, Object)::_is_collocated ()
            );
        }
      
      TAO::Arg_Traits<ACE_InputCDR::to_boolean>::ret_val _tao_retval;
      
      TAO::Argument *_tao_signature [] =
        {
          &_tao_retval
        };
      
      TAO::Invocation_Adapter _tao_call (
          this,
          _tao_signature,
          1,
          "_get_is_multiple",
          16,
          this->the_TAO_UsesDef_Proxy_Broker_
        );
      
      _tao_call.invoke (0, 0 ACE_ENV_ARG_PARAMETER);
      ACE_CHECK_RETURN (_tao_retval.excp ());
      
      return _tao_retval.retn ();
    }
    
    // TAO_IDL - Generated from
    // be/be_visitor_operation/operation_cs.cpp:78
    
    void CORBA::ComponentIR::UsesDef::is_multiple (
        CORBA::Boolean is_multiple
        ACE_ENV_ARG_DECL
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ))
    {
      if (!this->is_evaluated ())
        {
          ACE_NESTED_CLASS (CORBA, Object)::tao_object_initialize (this);
        }
      
      if (this->the_TAO_UsesDef_Proxy_Broker_ == 0)
        {
          CORBA_ComponentIR_UsesDef_setup_collocation (
              this->ACE_NESTED_CLASS (CORBA, Object)::_is_collocated ()
            );
        }
      
      TAO::Arg_Traits<void>::ret_val _tao_retval;
      TAO::Arg_Traits<ACE_InputCDR::to_boolean>::in_arg_val _tao_is_multiple (is_multiple);
      
      TAO::Argument *_tao_signature [] =
        {
          &_tao_retval,
          &_tao_is_multiple
        };
      
      TAO::Invocation_Adapter _tao_call (
          this,
          _tao_signature,
          2,
          "_set_is_multiple",
          16,
          this->the_TAO_UsesDef_Proxy_Broker_
        );
      
      _tao_call.invoke (0, 0 ACE_ENV_ARG_PARAMETER);
      ACE_CHECK;
    }
    
    CORBA::ComponentIR::UsesDef::UsesDef (int collocated)
     : the_TAO_UsesDef_Proxy_Broker_ (0)
    {
      this->CORBA_ComponentIR_UsesDef_setup_collocation (collocated);
    }
  
  void
  CORBA::ComponentIR::UsesDef::CORBA_ComponentIR_UsesDef_setup_collocation (int collocated)
  {
    if (collocated)
      {
        this->the_TAO_UsesDef_Proxy_Broker_ =
          ::CORBA_ComponentIR__TAO_UsesDef_Proxy_Broker_Factory_function_pointer (this);
      }
    
    this->CORBA_Contained_setup_collocation (collocated);
  }
  
  CORBA::ComponentIR::UsesDef::~UsesDef (void)
  {}
  
  void 
  CORBA::ComponentIR::UsesDef::_tao_any_destructor (void *_tao_void_pointer)
  {
    UsesDef *_tao_tmp_pointer =
      ACE_static_cast (UsesDef *, _tao_void_pointer);
    CORBA::release (_tao_tmp_pointer);
  }
  
  CORBA::ComponentIR::UsesDef_ptr
  CORBA::ComponentIR::UsesDef::_narrow (
      CORBA::Object_ptr _tao_objref
      ACE_ENV_ARG_DECL
    )
  {
    return
      TAO::Narrow_Utils<UsesDef>::narrow (
          _tao_objref,
          "IDL:omg.org/CORBA/ComponentIR/UsesDef:1.0",
          CORBA_ComponentIR__TAO_UsesDef_Proxy_Broker_Factory_function_pointer
          ACE_ENV_ARG_PARAMETER
        );
  }
  
  CORBA::ComponentIR::UsesDef_ptr
  CORBA::ComponentIR::UsesDef::_duplicate (UsesDef_ptr obj)
  {
    if (! CORBA::is_nil (obj))
      {
        obj->_add_ref ();
      }
    
    return obj;
  }
  
  CORBA::Boolean
  CORBA::ComponentIR::UsesDef::_is_a (
      const char *value
      ACE_ENV_ARG_DECL
    )
  {
    if (
        !ACE_OS::strcmp (
            (char *)value,
            "IDL:omg.org/CORBA/IRObject:1.0"
          ) ||
        !ACE_OS::strcmp (
            (char *)value,
            "IDL:omg.org/CORBA/Contained:1.0"
          ) ||
        !ACE_OS::strcmp (
            (char *)value,
            "IDL:omg.org/CORBA/ComponentIR/UsesDef:1.0"
          ) ||
        !ACE_OS::strcmp (
            (char *)value,
            "IDL:omg.org/CORBA/Object:1.0"
          )
       )
      {
        return 1; // success using local knowledge
      }
    else
      {
        return this->ACE_NESTED_CLASS (CORBA, Object)::_is_a (
            value
            ACE_ENV_ARG_PARAMETER
          );
      }
  }
  
  const char* CORBA::ComponentIR::UsesDef::_interface_repository_id (void) const
  {
    return "IDL:omg.org/CORBA/ComponentIR/UsesDef:1.0";
  }
  
  CORBA::Boolean
  CORBA::ComponentIR::UsesDef::marshal (TAO_OutputCDR &cdr)
  {
    return (cdr << this);
  }
  
  // TAO_IDL - Generated from
  // be/be_visitor_typecode/typecode_defn.cpp:284
  
  static const CORBA::Long _oc_CORBA_ComponentIR_UsesDef[] =
  {
        TAO_ENCAP_BYTE_ORDER, // byte order
    42,
    ACE_NTOHL (0x49444c3a), 
    ACE_NTOHL (0x6f6d672e), 
    ACE_NTOHL (0x6f72672f), 
    ACE_NTOHL (0x434f5242), 
    ACE_NTOHL (0x412f436f), 
    ACE_NTOHL (0x6d706f6e), 
    ACE_NTOHL (0x656e7449), 
    ACE_NTOHL (0x522f5573), 
    ACE_NTOHL (0x65734465), 
    ACE_NTOHL (0x663a312e), 
    ACE_NTOHL (0x30000000),  // repository ID = IDL:omg.org/CORBA/ComponentIR/UsesDef:1.0
        8,
    ACE_NTOHL (0x55736573), 
    ACE_NTOHL (0x44656600),  // name = UsesDef
    };
  
  static CORBA::TypeCode _tc_TAO_tc_CORBA_ComponentIR_UsesDef (
      CORBA::tk_objref,
      sizeof (_oc_CORBA_ComponentIR_UsesDef),
      (char *) &_oc_CORBA_ComponentIR_UsesDef,
      0,
      sizeof (CORBA::ComponentIR::UsesDef)
    );
  
  namespace CORBA
  {
    namespace ComponentIR
    {
      ::CORBA::TypeCode_ptr _tc_UsesDef =
        &_tc_TAO_tc_CORBA_ComponentIR_UsesDef;
    }
    }
    
    // TAO_IDL - Generated from
    // be/be_visitor_typecode/typecode_defn.cpp:284
    
    static const CORBA::Long _oc_CORBA_ComponentIR_UsesDescription[] =
    {
            TAO_ENCAP_BYTE_ORDER, // byte order
      50,
      ACE_NTOHL (0x49444c3a), 
      ACE_NTOHL (0x6f6d672e), 
      ACE_NTOHL (0x6f72672f), 
      ACE_NTOHL (0x434f5242), 
      ACE_NTOHL (0x412f436f), 
      ACE_NTOHL (0x6d706f6e), 
      ACE_NTOHL (0x656e7449), 
      ACE_NTOHL (0x522f5573), 
      ACE_NTOHL (0x65734465), 
      ACE_NTOHL (0x73637269), 
      ACE_NTOHL (0x7074696f), 
      ACE_NTOHL (0x6e3a312e), 
      ACE_NTOHL (0x30000000),  // repository ID = IDL:omg.org/CORBA/ComponentIR/UsesDescription:1.0
            16,
      ACE_NTOHL (0x55736573), 
      ACE_NTOHL (0x44657363), 
      ACE_NTOHL (0x72697074), 
      ACE_NTOHL (0x696f6e00),  // name = UsesDescription
      6, // member count
            5,
      ACE_NTOHL (0x6e616d65), 
      ACE_NTOHL (0x0),  // name = name
            CORBA::tk_alias, // typecode kind for typedefs
      68, // encapsulation length
        TAO_ENCAP_BYTE_ORDER, // byte order
        33,
        ACE_NTOHL (0x49444c3a), 
        ACE_NTOHL (0x6f6d672e), 
        ACE_NTOHL (0x6f72672f), 
        ACE_NTOHL (0x434f5242), 
        ACE_NTOHL (0x412f4964), 
        ACE_NTOHL (0x656e7469), 
        ACE_NTOHL (0x66696572), 
        ACE_NTOHL (0x3a312e30), 
        ACE_NTOHL (0x0),  // repository ID = IDL:omg.org/CORBA/Identifier:1.0
                11,
        ACE_NTOHL (0x4964656e), 
        ACE_NTOHL (0x74696669), 
        ACE_NTOHL (0x65720000),  // name = Identifier
                CORBA::tk_string, 
        0U, // string length

      3,
      ACE_NTOHL (0x69640000),  // name = id
            CORBA::tk_alias, // typecode kind for typedefs
      72, // encapsulation length
        TAO_ENCAP_BYTE_ORDER, // byte order
        35,
        ACE_NTOHL (0x49444c3a), 
        ACE_NTOHL (0x6f6d672e), 
        ACE_NTOHL (0x6f72672f), 
        ACE_NTOHL (0x434f5242), 
        ACE_NTOHL (0x412f5265), 
        ACE_NTOHL (0x706f7369), 
        ACE_NTOHL (0x746f7279), 
        ACE_NTOHL (0x49643a31), 
        ACE_NTOHL (0x2e300000),  // repository ID = IDL:omg.org/CORBA/RepositoryId:1.0
                13,
        ACE_NTOHL (0x5265706f), 
        ACE_NTOHL (0x7369746f), 
        ACE_NTOHL (0x72794964), 
        ACE_NTOHL (0x0),  // name = RepositoryId
                CORBA::tk_string, 
        0U, // string length

      11,
      ACE_NTOHL (0x64656669), 
      ACE_NTOHL (0x6e65645f), 
      ACE_NTOHL (0x696e0000),  // name = defined_in
            CORBA::tk_alias, // typecode kind for typedefs
      72, // encapsulation length
        TAO_ENCAP_BYTE_ORDER, // byte order
        35,
        ACE_NTOHL (0x49444c3a), 
        ACE_NTOHL (0x6f6d672e), 
        ACE_NTOHL (0x6f72672f), 
        ACE_NTOHL (0x434f5242), 
        ACE_NTOHL (0x412f5265), 
        ACE_NTOHL (0x706f7369), 
        ACE_NTOHL (0x746f7279), 
        ACE_NTOHL (0x49643a31), 
        ACE_NTOHL (0x2e300000),  // repository ID = IDL:omg.org/CORBA/RepositoryId:1.0
                13,
        ACE_NTOHL (0x5265706f), 
        ACE_NTOHL (0x7369746f), 
        ACE_NTOHL (0x72794964), 
        ACE_NTOHL (0x0),  // name = RepositoryId
                CORBA::tk_string, 
        0U, // string length

      8,
      ACE_NTOHL (0x76657273), 
      ACE_NTOHL (0x696f6e00),  // name = version
            CORBA::tk_alias, // typecode kind for typedefs
      68, // encapsulation length
        TAO_ENCAP_BYTE_ORDER, // byte order
        34,
        ACE_NTOHL (0x49444c3a), 
        ACE_NTOHL (0x6f6d672e), 
        ACE_NTOHL (0x6f72672f), 
        ACE_NTOHL (0x434f5242), 
        ACE_NTOHL (0x412f5665), 
        ACE_NTOHL (0x7273696f), 
        ACE_NTOHL (0x6e537065), 
        ACE_NTOHL (0x633a312e), 
        ACE_NTOHL (0x30000000),  // repository ID = IDL:omg.org/CORBA/VersionSpec:1.0
                12,
        ACE_NTOHL (0x56657273), 
        ACE_NTOHL (0x696f6e53), 
        ACE_NTOHL (0x70656300),  // name = VersionSpec
                CORBA::tk_string, 
        0U, // string length

      15,
      ACE_NTOHL (0x696e7465), 
      ACE_NTOHL (0x72666163), 
      ACE_NTOHL (0x655f7479), 
      ACE_NTOHL (0x70650000),  // name = interface_type
            CORBA::tk_alias, // typecode kind for typedefs
      72, // encapsulation length
        TAO_ENCAP_BYTE_ORDER, // byte order
        35,
        ACE_NTOHL (0x49444c3a), 
        ACE_NTOHL (0x6f6d672e), 
        ACE_NTOHL (0x6f72672f), 
        ACE_NTOHL (0x434f5242), 
        ACE_NTOHL (0x412f5265), 
        ACE_NTOHL (0x706f7369), 
        ACE_NTOHL (0x746f7279), 
        ACE_NTOHL (0x49643a31), 
        ACE_NTOHL (0x2e300000),  // repository ID = IDL:omg.org/CORBA/RepositoryId:1.0
                13,
        ACE_NTOHL (0x5265706f), 
        ACE_NTOHL (0x7369746f), 
        ACE_NTOHL (0x72794964), 
        ACE_NTOHL (0x0),  // name = RepositoryId
                CORBA::tk_string, 
        0U, // string length

      12,
      ACE_NTOHL (0x69735f6d), 
      ACE_NTOHL (0x756c7469), 
      ACE_NTOHL (0x706c6500),  // name = is_multiple
            CORBA::tk_boolean,

};
    
    static CORBA::TypeCode _tc_TAO_tc_CORBA_ComponentIR_UsesDescription (
        CORBA::tk_struct,
        sizeof (_oc_CORBA_ComponentIR_UsesDescription),
        (char *) &_oc_CORBA_ComponentIR_UsesDescription,
        0,
        sizeof (CORBA::ComponentIR::UsesDescription)
      );
    
    namespace CORBA
    {
      namespace ComponentIR
      {
        ::CORBA::TypeCode_ptr _tc_UsesDescription =
          &_tc_TAO_tc_CORBA_ComponentIR_UsesDescription;
      }
      }
      
      // TAO_IDL - Generated from 
      // be/be_visitor_structure/structure_cs.cpp:66
      
      void 
      CORBA::ComponentIR::UsesDescription::_tao_any_destructor (
          void *_tao_void_pointer
        )
      {
        UsesDescription *_tao_tmp_pointer =
          ACE_static_cast (UsesDescription *, _tao_void_pointer);
        delete _tao_tmp_pointer;
      }
      
      // TAO_IDL - Generated from
      // be/be_visitor_interface/interface_cs.cpp:60
      
      // Traits specializations for CORBA::ComponentIR::EventPortDef.
      
      CORBA::ComponentIR::EventPortDef_ptr
      TAO::Objref_Traits<CORBA::ComponentIR::EventPortDef>::tao_duplicate (
          CORBA::ComponentIR::EventPortDef_ptr p
        )
      {
        return CORBA::ComponentIR::EventPortDef::_duplicate (p);
      }
      
      void
      TAO::Objref_Traits<CORBA::ComponentIR::EventPortDef>::tao_release (
          CORBA::ComponentIR::EventPortDef_ptr p
        )
      {
        CORBA::release (p);
      }
      
      CORBA::ComponentIR::EventPortDef_ptr
      TAO::Objref_Traits<CORBA::ComponentIR::EventPortDef>::tao_nil (void)
      {
        return CORBA::ComponentIR::EventPortDef::_nil ();
      }
      
      CORBA::Boolean
      TAO::Objref_Traits<CORBA::ComponentIR::EventPortDef>::tao_marshal (
          CORBA::ComponentIR::EventPortDef_ptr p,
          TAO_OutputCDR & cdr
        )
      {
        return p->marshal (cdr);
      }
      
      // Function pointer for collocation factory initialization.
      TAO::Collocation_Proxy_Broker * 
      (*CORBA_ComponentIR__TAO_EventPortDef_Proxy_Broker_Factory_function_pointer) (
          CORBA::Object_ptr obj
        ) = 0;
      
      // TAO_IDL - Generated from
      // be/be_visitor_operation/operation_cs.cpp:78
      
      ::CORBA::ComponentIR::EventDef_ptr CORBA::ComponentIR::EventPortDef::event (
          ACE_ENV_SINGLE_ARG_DECL
        )
        ACE_THROW_SPEC ((
          CORBA::SystemException
        ))
      {
        if (!this->is_evaluated ())
          {
            ACE_NESTED_CLASS (CORBA, Object)::tao_object_initialize (this);
          }
        
        if (this->the_TAO_EventPortDef_Proxy_Broker_ == 0)
          {
            CORBA_ComponentIR_EventPortDef_setup_collocation (
                this->ACE_NESTED_CLASS (CORBA, Object)::_is_collocated ()
              );
          }
        
        TAO::Arg_Traits<CORBA::ComponentIR::EventDef>::ret_val _tao_retval;
        
        TAO::Argument *_tao_signature [] =
          {
            &_tao_retval
          };
        
        TAO::Invocation_Adapter _tao_call (
            this,
            _tao_signature,
            1,
            "_get_event",
            10,
            this->the_TAO_EventPortDef_Proxy_Broker_
          );
        
        _tao_call.invoke (0, 0 ACE_ENV_ARG_PARAMETER);
        ACE_CHECK_RETURN (_tao_retval.excp ());
        
        return _tao_retval.retn ();
      }
      
      // TAO_IDL - Generated from
      // be/be_visitor_operation/operation_cs.cpp:78
      
      void CORBA::ComponentIR::EventPortDef::event (
          CORBA::ComponentIR::EventDef_ptr event
          ACE_ENV_ARG_DECL
        )
        ACE_THROW_SPEC ((
          CORBA::SystemException
        ))
      {
        if (!this->is_evaluated ())
          {
            ACE_NESTED_CLASS (CORBA, Object)::tao_object_initialize (this);
          }
        
        if (this->the_TAO_EventPortDef_Proxy_Broker_ == 0)
          {
            CORBA_ComponentIR_EventPortDef_setup_collocation (
                this->ACE_NESTED_CLASS (CORBA, Object)::_is_collocated ()
              );
          }
        
        TAO::Arg_Traits<void>::ret_val _tao_retval;
        TAO::Arg_Traits<CORBA::ComponentIR::EventDef>::in_arg_val _tao_event (event);
        
        TAO::Argument *_tao_signature [] =
          {
            &_tao_retval,
            &_tao_event
          };
        
        TAO::Invocation_Adapter _tao_call (
            this,
            _tao_signature,
            2,
            "_set_event",
            10,
            this->the_TAO_EventPortDef_Proxy_Broker_
          );
        
        _tao_call.invoke (0, 0 ACE_ENV_ARG_PARAMETER);
        ACE_CHECK;
      }
      
      // TAO_IDL - Generated from
      // be/be_visitor_operation/operation_cs.cpp:78
      
      CORBA::Boolean CORBA::ComponentIR::EventPortDef::is_a (
          const char * event_id
          ACE_ENV_ARG_DECL
        )
        ACE_THROW_SPEC ((
          CORBA::SystemException
        ))
      {
        if (!this->is_evaluated ())
          {
            ACE_NESTED_CLASS (CORBA, Object)::tao_object_initialize (this);
          }
        
        if (this->the_TAO_EventPortDef_Proxy_Broker_ == 0)
          {
            CORBA_ComponentIR_EventPortDef_setup_collocation (
                this->ACE_NESTED_CLASS (CORBA, Object)::_is_collocated ()
              );
          }
        
        TAO::Arg_Traits<ACE_InputCDR::to_boolean>::ret_val _tao_retval;
        TAO::Arg_Traits<CORBA::RepositoryId>::in_arg_val _tao_event_id (event_id);
        
        TAO::Argument *_tao_signature [] =
          {
            &_tao_retval,
            &_tao_event_id
          };
        
        TAO::Invocation_Adapter _tao_call (
            this,
            _tao_signature,
            2,
            "is_a",
            4,
            this->the_TAO_EventPortDef_Proxy_Broker_
          );
        
        _tao_call.invoke (0, 0 ACE_ENV_ARG_PARAMETER);
        ACE_CHECK_RETURN (_tao_retval.excp ());
        
        return _tao_retval.retn ();
      }
      
      CORBA::ComponentIR::EventPortDef::EventPortDef (int collocated)
       : the_TAO_EventPortDef_Proxy_Broker_ (0)
      {
        this->CORBA_ComponentIR_EventPortDef_setup_collocation (collocated);
      }
    
    void
    CORBA::ComponentIR::EventPortDef::CORBA_ComponentIR_EventPortDef_setup_collocation (int collocated)
    {
      if (collocated)
        {
          this->the_TAO_EventPortDef_Proxy_Broker_ =
            ::CORBA_ComponentIR__TAO_EventPortDef_Proxy_Broker_Factory_function_pointer (this);
        }
      
      this->CORBA_Contained_setup_collocation (collocated);
    }
    
    CORBA::ComponentIR::EventPortDef::~EventPortDef (void)
    {}
    
    void 
    CORBA::ComponentIR::EventPortDef::_tao_any_destructor (void *_tao_void_pointer)
    {
      EventPortDef *_tao_tmp_pointer =
        ACE_static_cast (EventPortDef *, _tao_void_pointer);
      CORBA::release (_tao_tmp_pointer);
    }
    
    CORBA::ComponentIR::EventPortDef_ptr
    CORBA::ComponentIR::EventPortDef::_narrow (
        CORBA::Object_ptr _tao_objref
        ACE_ENV_ARG_DECL
      )
    {
      return
        TAO::Narrow_Utils<EventPortDef>::narrow (
            _tao_objref,
            "IDL:omg.org/CORBA/ComponentIR/EventPortDef:1.0",
            CORBA_ComponentIR__TAO_EventPortDef_Proxy_Broker_Factory_function_pointer
            ACE_ENV_ARG_PARAMETER
          );
    }
    
    CORBA::ComponentIR::EventPortDef_ptr
    CORBA::ComponentIR::EventPortDef::_duplicate (EventPortDef_ptr obj)
    {
      if (! CORBA::is_nil (obj))
        {
          obj->_add_ref ();
        }
      
      return obj;
    }
    
    CORBA::Boolean
    CORBA::ComponentIR::EventPortDef::_is_a (
        const char *value
        ACE_ENV_ARG_DECL
      )
    {
      if (
          !ACE_OS::strcmp (
              (char *)value,
              "IDL:omg.org/CORBA/IRObject:1.0"
            ) ||
          !ACE_OS::strcmp (
              (char *)value,
              "IDL:omg.org/CORBA/Contained:1.0"
            ) ||
          !ACE_OS::strcmp (
              (char *)value,
              "IDL:omg.org/CORBA/ComponentIR/EventPortDef:1.0"
            ) ||
          !ACE_OS::strcmp (
              (char *)value,
              "IDL:omg.org/CORBA/Object:1.0"
            )
         )
        {
          return 1; // success using local knowledge
        }
      else
        {
          return this->ACE_NESTED_CLASS (CORBA, Object)::_is_a (
              value
              ACE_ENV_ARG_PARAMETER
            );
        }
    }
    
    const char* CORBA::ComponentIR::EventPortDef::_interface_repository_id (void) const
    {
      return "IDL:omg.org/CORBA/ComponentIR/EventPortDef:1.0";
    }
    
    CORBA::Boolean
    CORBA::ComponentIR::EventPortDef::marshal (TAO_OutputCDR &cdr)
    {
      return (cdr << this);
    }
    
    // TAO_IDL - Generated from
    // be/be_visitor_typecode/typecode_defn.cpp:284
    
    static const CORBA::Long _oc_CORBA_ComponentIR_EventPortDef[] =
    {
            TAO_ENCAP_BYTE_ORDER, // byte order
      47,
      ACE_NTOHL (0x49444c3a), 
      ACE_NTOHL (0x6f6d672e), 
      ACE_NTOHL (0x6f72672f), 
      ACE_NTOHL (0x434f5242), 
      ACE_NTOHL (0x412f436f), 
      ACE_NTOHL (0x6d706f6e), 
      ACE_NTOHL (0x656e7449), 
      ACE_NTOHL (0x522f4576), 
      ACE_NTOHL (0x656e7450), 
      ACE_NTOHL (0x6f727444), 
      ACE_NTOHL (0x65663a31), 
      ACE_NTOHL (0x2e300000),  // repository ID = IDL:omg.org/CORBA/ComponentIR/EventPortDef:1.0
            13,
      ACE_NTOHL (0x4576656e), 
      ACE_NTOHL (0x74506f72), 
      ACE_NTOHL (0x74446566), 
      ACE_NTOHL (0x0),  // name = EventPortDef
      };
    
    static CORBA::TypeCode _tc_TAO_tc_CORBA_ComponentIR_EventPortDef (
        CORBA::tk_objref,
        sizeof (_oc_CORBA_ComponentIR_EventPortDef),
        (char *) &_oc_CORBA_ComponentIR_EventPortDef,
        0,
        sizeof (CORBA::ComponentIR::EventPortDef)
      );
    
    namespace CORBA
    {
      namespace ComponentIR
      {
        ::CORBA::TypeCode_ptr _tc_EventPortDef =
          &_tc_TAO_tc_CORBA_ComponentIR_EventPortDef;
      }
      }
      
      // TAO_IDL - Generated from
      // be/be_visitor_typecode/typecode_defn.cpp:284
      
      static const CORBA::Long _oc_CORBA_ComponentIR_EventPortDescription[] =
      {
                TAO_ENCAP_BYTE_ORDER, // byte order
        55,
        ACE_NTOHL (0x49444c3a), 
        ACE_NTOHL (0x6f6d672e), 
        ACE_NTOHL (0x6f72672f), 
        ACE_NTOHL (0x434f5242), 
        ACE_NTOHL (0x412f436f), 
        ACE_NTOHL (0x6d706f6e), 
        ACE_NTOHL (0x656e7449), 
        ACE_NTOHL (0x522f4576), 
        ACE_NTOHL (0x656e7450), 
        ACE_NTOHL (0x6f727444), 
        ACE_NTOHL (0x65736372), 
        ACE_NTOHL (0x69707469), 
        ACE_NTOHL (0x6f6e3a31), 
        ACE_NTOHL (0x2e300000),  // repository ID = IDL:omg.org/CORBA/ComponentIR/EventPortDescription:1.0
                21,
        ACE_NTOHL (0x4576656e), 
        ACE_NTOHL (0x74506f72), 
        ACE_NTOHL (0x74446573), 
        ACE_NTOHL (0x63726970), 
        ACE_NTOHL (0x74696f6e), 
        ACE_NTOHL (0x0),  // name = EventPortDescription
        5, // member count
                5,
        ACE_NTOHL (0x6e616d65), 
        ACE_NTOHL (0x0),  // name = name
                CORBA::tk_alias, // typecode kind for typedefs
        68, // encapsulation length
          TAO_ENCAP_BYTE_ORDER, // byte order
          33,
          ACE_NTOHL (0x49444c3a), 
          ACE_NTOHL (0x6f6d672e), 
          ACE_NTOHL (0x6f72672f), 
          ACE_NTOHL (0x434f5242), 
          ACE_NTOHL (0x412f4964), 
          ACE_NTOHL (0x656e7469), 
          ACE_NTOHL (0x66696572), 
          ACE_NTOHL (0x3a312e30), 
          ACE_NTOHL (0x0),  // repository ID = IDL:omg.org/CORBA/Identifier:1.0
                    11,
          ACE_NTOHL (0x4964656e), 
          ACE_NTOHL (0x74696669), 
          ACE_NTOHL (0x65720000),  // name = Identifier
                    CORBA::tk_string, 
          0U, // string length

        3,
        ACE_NTOHL (0x69640000),  // name = id
                CORBA::tk_alias, // typecode kind for typedefs
        72, // encapsulation length
          TAO_ENCAP_BYTE_ORDER, // byte order
          35,
          ACE_NTOHL (0x49444c3a), 
          ACE_NTOHL (0x6f6d672e), 
          ACE_NTOHL (0x6f72672f), 
          ACE_NTOHL (0x434f5242), 
          ACE_NTOHL (0x412f5265), 
          ACE_NTOHL (0x706f7369), 
          ACE_NTOHL (0x746f7279), 
          ACE_NTOHL (0x49643a31), 
          ACE_NTOHL (0x2e300000),  // repository ID = IDL:omg.org/CORBA/RepositoryId:1.0
                    13,
          ACE_NTOHL (0x5265706f), 
          ACE_NTOHL (0x7369746f), 
          ACE_NTOHL (0x72794964), 
          ACE_NTOHL (0x0),  // name = RepositoryId
                    CORBA::tk_string, 
          0U, // string length

        11,
        ACE_NTOHL (0x64656669), 
        ACE_NTOHL (0x6e65645f), 
        ACE_NTOHL (0x696e0000),  // name = defined_in
                CORBA::tk_alias, // typecode kind for typedefs
        72, // encapsulation length
          TAO_ENCAP_BYTE_ORDER, // byte order
          35,
          ACE_NTOHL (0x49444c3a), 
          ACE_NTOHL (0x6f6d672e), 
          ACE_NTOHL (0x6f72672f), 
          ACE_NTOHL (0x434f5242), 
          ACE_NTOHL (0x412f5265), 
          ACE_NTOHL (0x706f7369), 
          ACE_NTOHL (0x746f7279), 
          ACE_NTOHL (0x49643a31), 
          ACE_NTOHL (0x2e300000),  // repository ID = IDL:omg.org/CORBA/RepositoryId:1.0
                    13,
          ACE_NTOHL (0x5265706f), 
          ACE_NTOHL (0x7369746f), 
          ACE_NTOHL (0x72794964), 
          ACE_NTOHL (0x0),  // name = RepositoryId
                    CORBA::tk_string, 
          0U, // string length

        8,
        ACE_NTOHL (0x76657273), 
        ACE_NTOHL (0x696f6e00),  // name = version
                CORBA::tk_alias, // typecode kind for typedefs
        68, // encapsulation length
          TAO_ENCAP_BYTE_ORDER, // byte order
          34,
          ACE_NTOHL (0x49444c3a), 
          ACE_NTOHL (0x6f6d672e), 
          ACE_NTOHL (0x6f72672f), 
          ACE_NTOHL (0x434f5242), 
          ACE_NTOHL (0x412f5665), 
          ACE_NTOHL (0x7273696f), 
          ACE_NTOHL (0x6e537065), 
          ACE_NTOHL (0x633a312e), 
          ACE_NTOHL (0x30000000),  // repository ID = IDL:omg.org/CORBA/VersionSpec:1.0
                    12,
          ACE_NTOHL (0x56657273), 
          ACE_NTOHL (0x696f6e53), 
          ACE_NTOHL (0x70656300),  // name = VersionSpec
                    CORBA::tk_string, 
          0U, // string length

        6,
        ACE_NTOHL (0x6576656e), 
        ACE_NTOHL (0x74000000),  // name = event
                CORBA::tk_alias, // typecode kind for typedefs
        72, // encapsulation length
          TAO_ENCAP_BYTE_ORDER, // byte order
          35,
          ACE_NTOHL (0x49444c3a), 
          ACE_NTOHL (0x6f6d672e), 
          ACE_NTOHL (0x6f72672f), 
          ACE_NTOHL (0x434f5242), 
          ACE_NTOHL (0x412f5265), 
          ACE_NTOHL (0x706f7369), 
          ACE_NTOHL (0x746f7279), 
          ACE_NTOHL (0x49643a31), 
          ACE_NTOHL (0x2e300000),  // repository ID = IDL:omg.org/CORBA/RepositoryId:1.0
                    13,
          ACE_NTOHL (0x5265706f), 
          ACE_NTOHL (0x7369746f), 
          ACE_NTOHL (0x72794964), 
          ACE_NTOHL (0x0),  // name = RepositoryId
                    CORBA::tk_string, 
          0U, // string length

};
      
      static CORBA::TypeCode _tc_TAO_tc_CORBA_ComponentIR_EventPortDescription (
          CORBA::tk_struct,
          sizeof (_oc_CORBA_ComponentIR_EventPortDescription),
          (char *) &_oc_CORBA_ComponentIR_EventPortDescription,
          0,
          sizeof (CORBA::ComponentIR::EventPortDescription)
        );
      
      namespace CORBA
      {
        namespace ComponentIR
        {
          ::CORBA::TypeCode_ptr _tc_EventPortDescription =
            &_tc_TAO_tc_CORBA_ComponentIR_EventPortDescription;
        }
        }
        
        // TAO_IDL - Generated from 
        // be/be_visitor_structure/structure_cs.cpp:66
        
        void 
        CORBA::ComponentIR::EventPortDescription::_tao_any_destructor (
            void *_tao_void_pointer
          )
        {
          EventPortDescription *_tao_tmp_pointer =
            ACE_static_cast (EventPortDescription *, _tao_void_pointer);
          delete _tao_tmp_pointer;
        }
        
        // TAO_IDL - Generated from
        // be/be_visitor_interface/interface_cs.cpp:60
        
        // Traits specializations for CORBA::ComponentIR::EmitsDef.
        
        CORBA::ComponentIR::EmitsDef_ptr
        TAO::Objref_Traits<CORBA::ComponentIR::EmitsDef>::tao_duplicate (
            CORBA::ComponentIR::EmitsDef_ptr p
          )
        {
          return CORBA::ComponentIR::EmitsDef::_duplicate (p);
        }
        
        void
        TAO::Objref_Traits<CORBA::ComponentIR::EmitsDef>::tao_release (
            CORBA::ComponentIR::EmitsDef_ptr p
          )
        {
          CORBA::release (p);
        }
        
        CORBA::ComponentIR::EmitsDef_ptr
        TAO::Objref_Traits<CORBA::ComponentIR::EmitsDef>::tao_nil (void)
        {
          return CORBA::ComponentIR::EmitsDef::_nil ();
        }
        
        CORBA::Boolean
        TAO::Objref_Traits<CORBA::ComponentIR::EmitsDef>::tao_marshal (
            CORBA::ComponentIR::EmitsDef_ptr p,
            TAO_OutputCDR & cdr
          )
        {
          return p->marshal (cdr);
        }
        
        // Function pointer for collocation factory initialization.
        TAO::Collocation_Proxy_Broker * 
        (*CORBA_ComponentIR__TAO_EmitsDef_Proxy_Broker_Factory_function_pointer) (
            CORBA::Object_ptr obj
          ) = 0;
        
        CORBA::ComponentIR::EmitsDef::EmitsDef (int collocated)
         : the_TAO_EmitsDef_Proxy_Broker_ (0)
        {
          this->CORBA_ComponentIR_EmitsDef_setup_collocation (collocated);
        }
      
      void
      CORBA::ComponentIR::EmitsDef::CORBA_ComponentIR_EmitsDef_setup_collocation (int collocated)
      {
        if (collocated)
          {
            this->the_TAO_EmitsDef_Proxy_Broker_ =
              ::CORBA_ComponentIR__TAO_EmitsDef_Proxy_Broker_Factory_function_pointer (this);
          }
        
        this->CORBA_ComponentIR_EventPortDef_setup_collocation (collocated);
      }
      
      CORBA::ComponentIR::EmitsDef::~EmitsDef (void)
      {}
      
      void 
      CORBA::ComponentIR::EmitsDef::_tao_any_destructor (void *_tao_void_pointer)
      {
        EmitsDef *_tao_tmp_pointer =
          ACE_static_cast (EmitsDef *, _tao_void_pointer);
        CORBA::release (_tao_tmp_pointer);
      }
      
      CORBA::ComponentIR::EmitsDef_ptr
      CORBA::ComponentIR::EmitsDef::_narrow (
          CORBA::Object_ptr _tao_objref
          ACE_ENV_ARG_DECL
        )
      {
        return
          TAO::Narrow_Utils<EmitsDef>::narrow (
              _tao_objref,
              "IDL:omg.org/CORBA/ComponentIR/EmitsDef:1.0",
              CORBA_ComponentIR__TAO_EmitsDef_Proxy_Broker_Factory_function_pointer
              ACE_ENV_ARG_PARAMETER
            );
      }
      
      CORBA::ComponentIR::EmitsDef_ptr
      CORBA::ComponentIR::EmitsDef::_duplicate (EmitsDef_ptr obj)
      {
        if (! CORBA::is_nil (obj))
          {
            obj->_add_ref ();
          }
        
        return obj;
      }
      
      CORBA::Boolean
      CORBA::ComponentIR::EmitsDef::_is_a (
          const char *value
          ACE_ENV_ARG_DECL
        )
      {
        if (
            !ACE_OS::strcmp (
                (char *)value,
                "IDL:omg.org/CORBA/IRObject:1.0"
              ) ||
            !ACE_OS::strcmp (
                (char *)value,
                "IDL:omg.org/CORBA/Contained:1.0"
              ) ||
            !ACE_OS::strcmp (
                (char *)value,
                "IDL:omg.org/CORBA/ComponentIR/EventPortDef:1.0"
              ) ||
            !ACE_OS::strcmp (
                (char *)value,
                "IDL:omg.org/CORBA/ComponentIR/EmitsDef:1.0"
              ) ||
            !ACE_OS::strcmp (
                (char *)value,
                "IDL:omg.org/CORBA/Object:1.0"
              )
           )
          {
            return 1; // success using local knowledge
          }
        else
          {
            return this->ACE_NESTED_CLASS (CORBA, Object)::_is_a (
                value
                ACE_ENV_ARG_PARAMETER
              );
          }
      }
      
      const char* CORBA::ComponentIR::EmitsDef::_interface_repository_id (void) const
      {
        return "IDL:omg.org/CORBA/ComponentIR/EmitsDef:1.0";
      }
      
      CORBA::Boolean
      CORBA::ComponentIR::EmitsDef::marshal (TAO_OutputCDR &cdr)
      {
        return (cdr << this);
      }
      
      // TAO_IDL - Generated from
      // be/be_visitor_typecode/typecode_defn.cpp:284
      
      static const CORBA::Long _oc_CORBA_ComponentIR_EmitsDef[] =
      {
                TAO_ENCAP_BYTE_ORDER, // byte order
        43,
        ACE_NTOHL (0x49444c3a), 
        ACE_NTOHL (0x6f6d672e), 
        ACE_NTOHL (0x6f72672f), 
        ACE_NTOHL (0x434f5242), 
        ACE_NTOHL (0x412f436f), 
        ACE_NTOHL (0x6d706f6e), 
        ACE_NTOHL (0x656e7449), 
        ACE_NTOHL (0x522f456d), 
        ACE_NTOHL (0x69747344), 
        ACE_NTOHL (0x65663a31), 
        ACE_NTOHL (0x2e300000),  // repository ID = IDL:omg.org/CORBA/ComponentIR/EmitsDef:1.0
                9,
        ACE_NTOHL (0x456d6974), 
        ACE_NTOHL (0x73446566), 
        ACE_NTOHL (0x0),  // name = EmitsDef
        };
      
      static CORBA::TypeCode _tc_TAO_tc_CORBA_ComponentIR_EmitsDef (
          CORBA::tk_objref,
          sizeof (_oc_CORBA_ComponentIR_EmitsDef),
          (char *) &_oc_CORBA_ComponentIR_EmitsDef,
          0,
          sizeof (CORBA::ComponentIR::EmitsDef)
        );
      
      namespace CORBA
      {
        namespace ComponentIR
        {
          ::CORBA::TypeCode_ptr _tc_EmitsDef =
            &_tc_TAO_tc_CORBA_ComponentIR_EmitsDef;
        }
        }
        
        // TAO_IDL - Generated from
        // be/be_visitor_interface/interface_cs.cpp:60
        
        // Traits specializations for CORBA::ComponentIR::PublishesDef.
        
        CORBA::ComponentIR::PublishesDef_ptr
        TAO::Objref_Traits<CORBA::ComponentIR::PublishesDef>::tao_duplicate (
            CORBA::ComponentIR::PublishesDef_ptr p
          )
        {
          return CORBA::ComponentIR::PublishesDef::_duplicate (p);
        }
        
        void
        TAO::Objref_Traits<CORBA::ComponentIR::PublishesDef>::tao_release (
            CORBA::ComponentIR::PublishesDef_ptr p
          )
        {
          CORBA::release (p);
        }
        
        CORBA::ComponentIR::PublishesDef_ptr
        TAO::Objref_Traits<CORBA::ComponentIR::PublishesDef>::tao_nil (void)
        {
          return CORBA::ComponentIR::PublishesDef::_nil ();
        }
        
        CORBA::Boolean
        TAO::Objref_Traits<CORBA::ComponentIR::PublishesDef>::tao_marshal (
            CORBA::ComponentIR::PublishesDef_ptr p,
            TAO_OutputCDR & cdr
          )
        {
          return p->marshal (cdr);
        }
        
        // Function pointer for collocation factory initialization.
        TAO::Collocation_Proxy_Broker * 
        (*CORBA_ComponentIR__TAO_PublishesDef_Proxy_Broker_Factory_function_pointer) (
            CORBA::Object_ptr obj
          ) = 0;
        
        CORBA::ComponentIR::PublishesDef::PublishesDef (int collocated)
         : the_TAO_PublishesDef_Proxy_Broker_ (0)
        {
          this->CORBA_ComponentIR_PublishesDef_setup_collocation (collocated);
        }
      
      void
      CORBA::ComponentIR::PublishesDef::CORBA_ComponentIR_PublishesDef_setup_collocation (int collocated)
      {
        if (collocated)
          {
            this->the_TAO_PublishesDef_Proxy_Broker_ =
              ::CORBA_ComponentIR__TAO_PublishesDef_Proxy_Broker_Factory_function_pointer (this);
          }
        
        this->CORBA_ComponentIR_EventPortDef_setup_collocation (collocated);
      }
      
      CORBA::ComponentIR::PublishesDef::~PublishesDef (void)
      {}
      
      void 
      CORBA::ComponentIR::PublishesDef::_tao_any_destructor (void *_tao_void_pointer)
      {
        PublishesDef *_tao_tmp_pointer =
          ACE_static_cast (PublishesDef *, _tao_void_pointer);
        CORBA::release (_tao_tmp_pointer);
      }
      
      CORBA::ComponentIR::PublishesDef_ptr
      CORBA::ComponentIR::PublishesDef::_narrow (
          CORBA::Object_ptr _tao_objref
          ACE_ENV_ARG_DECL
        )
      {
        return
          TAO::Narrow_Utils<PublishesDef>::narrow (
              _tao_objref,
              "IDL:omg.org/CORBA/ComponentIR/PublishesDef:1.0",
              CORBA_ComponentIR__TAO_PublishesDef_Proxy_Broker_Factory_function_pointer
              ACE_ENV_ARG_PARAMETER
            );
      }
      
      CORBA::ComponentIR::PublishesDef_ptr
      CORBA::ComponentIR::PublishesDef::_duplicate (PublishesDef_ptr obj)
      {
        if (! CORBA::is_nil (obj))
          {
            obj->_add_ref ();
          }
        
        return obj;
      }
      
      CORBA::Boolean
      CORBA::ComponentIR::PublishesDef::_is_a (
          const char *value
          ACE_ENV_ARG_DECL
        )
      {
        if (
            !ACE_OS::strcmp (
                (char *)value,
                "IDL:omg.org/CORBA/IRObject:1.0"
              ) ||
            !ACE_OS::strcmp (
                (char *)value,
                "IDL:omg.org/CORBA/Contained:1.0"
              ) ||
            !ACE_OS::strcmp (
                (char *)value,
                "IDL:omg.org/CORBA/ComponentIR/EventPortDef:1.0"
              ) ||
            !ACE_OS::strcmp (
                (char *)value,
                "IDL:omg.org/CORBA/ComponentIR/PublishesDef:1.0"
              ) ||
            !ACE_OS::strcmp (
                (char *)value,
                "IDL:omg.org/CORBA/Object:1.0"
              )
           )
          {
            return 1; // success using local knowledge
          }
        else
          {
            return this->ACE_NESTED_CLASS (CORBA, Object)::_is_a (
                value
                ACE_ENV_ARG_PARAMETER
              );
          }
      }
      
      const char* CORBA::ComponentIR::PublishesDef::_interface_repository_id (void) const
      {
        return "IDL:omg.org/CORBA/ComponentIR/PublishesDef:1.0";
      }
      
      CORBA::Boolean
      CORBA::ComponentIR::PublishesDef::marshal (TAO_OutputCDR &cdr)
      {
        return (cdr << this);
      }
      
      // TAO_IDL - Generated from
      // be/be_visitor_typecode/typecode_defn.cpp:284
      
      static const CORBA::Long _oc_CORBA_ComponentIR_PublishesDef[] =
      {
                TAO_ENCAP_BYTE_ORDER, // byte order
        47,
        ACE_NTOHL (0x49444c3a), 
        ACE_NTOHL (0x6f6d672e), 
        ACE_NTOHL (0x6f72672f), 
        ACE_NTOHL (0x434f5242), 
        ACE_NTOHL (0x412f436f), 
        ACE_NTOHL (0x6d706f6e), 
        ACE_NTOHL (0x656e7449), 
        ACE_NTOHL (0x522f5075), 
        ACE_NTOHL (0x626c6973), 
        ACE_NTOHL (0x68657344), 
        ACE_NTOHL (0x65663a31), 
        ACE_NTOHL (0x2e300000),  // repository ID = IDL:omg.org/CORBA/ComponentIR/PublishesDef:1.0
                13,
        ACE_NTOHL (0x5075626c), 
        ACE_NTOHL (0x69736865), 
        ACE_NTOHL (0x73446566), 
        ACE_NTOHL (0x0),  // name = PublishesDef
        };
      
      static CORBA::TypeCode _tc_TAO_tc_CORBA_ComponentIR_PublishesDef (
          CORBA::tk_objref,
          sizeof (_oc_CORBA_ComponentIR_PublishesDef),
          (char *) &_oc_CORBA_ComponentIR_PublishesDef,
          0,
          sizeof (CORBA::ComponentIR::PublishesDef)
        );
      
      namespace CORBA
      {
        namespace ComponentIR
        {
          ::CORBA::TypeCode_ptr _tc_PublishesDef =
            &_tc_TAO_tc_CORBA_ComponentIR_PublishesDef;
        }
        }
        
        // TAO_IDL - Generated from
        // be/be_visitor_interface/interface_cs.cpp:60
        
        // Traits specializations for CORBA::ComponentIR::ConsumesDef.
        
        CORBA::ComponentIR::ConsumesDef_ptr
        TAO::Objref_Traits<CORBA::ComponentIR::ConsumesDef>::tao_duplicate (
            CORBA::ComponentIR::ConsumesDef_ptr p
          )
        {
          return CORBA::ComponentIR::ConsumesDef::_duplicate (p);
        }
        
        void
        TAO::Objref_Traits<CORBA::ComponentIR::ConsumesDef>::tao_release (
            CORBA::ComponentIR::ConsumesDef_ptr p
          )
        {
          CORBA::release (p);
        }
        
        CORBA::ComponentIR::ConsumesDef_ptr
        TAO::Objref_Traits<CORBA::ComponentIR::ConsumesDef>::tao_nil (void)
        {
          return CORBA::ComponentIR::ConsumesDef::_nil ();
        }
        
        CORBA::Boolean
        TAO::Objref_Traits<CORBA::ComponentIR::ConsumesDef>::tao_marshal (
            CORBA::ComponentIR::ConsumesDef_ptr p,
            TAO_OutputCDR & cdr
          )
        {
          return p->marshal (cdr);
        }
        
        // Function pointer for collocation factory initialization.
        TAO::Collocation_Proxy_Broker * 
        (*CORBA_ComponentIR__TAO_ConsumesDef_Proxy_Broker_Factory_function_pointer) (
            CORBA::Object_ptr obj
          ) = 0;
        
        CORBA::ComponentIR::ConsumesDef::ConsumesDef (int collocated)
         : the_TAO_ConsumesDef_Proxy_Broker_ (0)
        {
          this->CORBA_ComponentIR_ConsumesDef_setup_collocation (collocated);
        }
      
      void
      CORBA::ComponentIR::ConsumesDef::CORBA_ComponentIR_ConsumesDef_setup_collocation (int collocated)
      {
        if (collocated)
          {
            this->the_TAO_ConsumesDef_Proxy_Broker_ =
              ::CORBA_ComponentIR__TAO_ConsumesDef_Proxy_Broker_Factory_function_pointer (this);
          }
        
        this->CORBA_ComponentIR_EventPortDef_setup_collocation (collocated);
      }
      
      CORBA::ComponentIR::ConsumesDef::~ConsumesDef (void)
      {}
      
      void 
      CORBA::ComponentIR::ConsumesDef::_tao_any_destructor (void *_tao_void_pointer)
      {
        ConsumesDef *_tao_tmp_pointer =
          ACE_static_cast (ConsumesDef *, _tao_void_pointer);
        CORBA::release (_tao_tmp_pointer);
      }
      
      CORBA::ComponentIR::ConsumesDef_ptr
      CORBA::ComponentIR::ConsumesDef::_narrow (
          CORBA::Object_ptr _tao_objref
          ACE_ENV_ARG_DECL
        )
      {
        return
          TAO::Narrow_Utils<ConsumesDef>::narrow (
              _tao_objref,
              "IDL:omg.org/CORBA/ComponentIR/ConsumesDef:1.0",
              CORBA_ComponentIR__TAO_ConsumesDef_Proxy_Broker_Factory_function_pointer
              ACE_ENV_ARG_PARAMETER
            );
      }
      
      CORBA::ComponentIR::ConsumesDef_ptr
      CORBA::ComponentIR::ConsumesDef::_duplicate (ConsumesDef_ptr obj)
      {
        if (! CORBA::is_nil (obj))
          {
            obj->_add_ref ();
          }
        
        return obj;
      }
      
      CORBA::Boolean
      CORBA::ComponentIR::ConsumesDef::_is_a (
          const char *value
          ACE_ENV_ARG_DECL
        )
      {
        if (
            !ACE_OS::strcmp (
                (char *)value,
                "IDL:omg.org/CORBA/IRObject:1.0"
              ) ||
            !ACE_OS::strcmp (
                (char *)value,
                "IDL:omg.org/CORBA/Contained:1.0"
              ) ||
            !ACE_OS::strcmp (
                (char *)value,
                "IDL:omg.org/CORBA/ComponentIR/EventPortDef:1.0"
              ) ||
            !ACE_OS::strcmp (
                (char *)value,
                "IDL:omg.org/CORBA/ComponentIR/ConsumesDef:1.0"
              ) ||
            !ACE_OS::strcmp (
                (char *)value,
                "IDL:omg.org/CORBA/Object:1.0"
              )
           )
          {
            return 1; // success using local knowledge
          }
        else
          {
            return this->ACE_NESTED_CLASS (CORBA, Object)::_is_a (
                value
                ACE_ENV_ARG_PARAMETER
              );
          }
      }
      
      const char* CORBA::ComponentIR::ConsumesDef::_interface_repository_id (void) const
      {
        return "IDL:omg.org/CORBA/ComponentIR/ConsumesDef:1.0";
      }
      
      CORBA::Boolean
      CORBA::ComponentIR::ConsumesDef::marshal (TAO_OutputCDR &cdr)
      {
        return (cdr << this);
      }
      
      // TAO_IDL - Generated from
      // be/be_visitor_typecode/typecode_defn.cpp:284
      
      static const CORBA::Long _oc_CORBA_ComponentIR_ConsumesDef[] =
      {
                TAO_ENCAP_BYTE_ORDER, // byte order
        46,
        ACE_NTOHL (0x49444c3a), 
        ACE_NTOHL (0x6f6d672e), 
        ACE_NTOHL (0x6f72672f), 
        ACE_NTOHL (0x434f5242), 
        ACE_NTOHL (0x412f436f), 
        ACE_NTOHL (0x6d706f6e), 
        ACE_NTOHL (0x656e7449), 
        ACE_NTOHL (0x522f436f), 
        ACE_NTOHL (0x6e73756d), 
        ACE_NTOHL (0x65734465), 
        ACE_NTOHL (0x663a312e), 
        ACE_NTOHL (0x30000000),  // repository ID = IDL:omg.org/CORBA/ComponentIR/ConsumesDef:1.0
                12,
        ACE_NTOHL (0x436f6e73), 
        ACE_NTOHL (0x756d6573), 
        ACE_NTOHL (0x44656600),  // name = ConsumesDef
        };
      
      static CORBA::TypeCode _tc_TAO_tc_CORBA_ComponentIR_ConsumesDef (
          CORBA::tk_objref,
          sizeof (_oc_CORBA_ComponentIR_ConsumesDef),
          (char *) &_oc_CORBA_ComponentIR_ConsumesDef,
          0,
          sizeof (CORBA::ComponentIR::ConsumesDef)
        );
      
      namespace CORBA
      {
        namespace ComponentIR
        {
          ::CORBA::TypeCode_ptr _tc_ConsumesDef =
            &_tc_TAO_tc_CORBA_ComponentIR_ConsumesDef;
        }
        }
        
        // TAO_IDL - Generated from
        // be/be_visitor_interface/interface_cs.cpp:60
        
        // Traits specializations for CORBA::ComponentIR::ComponentDef.
        
        CORBA::ComponentIR::ComponentDef_ptr
        TAO::Objref_Traits<CORBA::ComponentIR::ComponentDef>::tao_duplicate (
            CORBA::ComponentIR::ComponentDef_ptr p
          )
        {
          return CORBA::ComponentIR::ComponentDef::_duplicate (p);
        }
        
        void
        TAO::Objref_Traits<CORBA::ComponentIR::ComponentDef>::tao_release (
            CORBA::ComponentIR::ComponentDef_ptr p
          )
        {
          CORBA::release (p);
        }
        
        CORBA::ComponentIR::ComponentDef_ptr
        TAO::Objref_Traits<CORBA::ComponentIR::ComponentDef>::tao_nil (void)
        {
          return CORBA::ComponentIR::ComponentDef::_nil ();
        }
        
        CORBA::Boolean
        TAO::Objref_Traits<CORBA::ComponentIR::ComponentDef>::tao_marshal (
            CORBA::ComponentIR::ComponentDef_ptr p,
            TAO_OutputCDR & cdr
          )
        {
          return p->marshal (cdr);
        }
        
        // Function pointer for collocation factory initialization.
        TAO::Collocation_Proxy_Broker * 
        (*CORBA_ComponentIR__TAO_ComponentDef_Proxy_Broker_Factory_function_pointer) (
            CORBA::Object_ptr obj
          ) = 0;
        
        // TAO_IDL - Generated from
        // be/be_visitor_operation/operation_cs.cpp:78
        
        ::CORBA::ComponentIR::ComponentDef_ptr CORBA::ComponentIR::ComponentDef::base_component (
            ACE_ENV_SINGLE_ARG_DECL
          )
          ACE_THROW_SPEC ((
            CORBA::SystemException
          ))
        {
          if (!this->is_evaluated ())
            {
              ACE_NESTED_CLASS (CORBA, Object)::tao_object_initialize (this);
            }
          
          if (this->the_TAO_ComponentDef_Proxy_Broker_ == 0)
            {
              CORBA_ComponentIR_ComponentDef_setup_collocation (
                  this->ACE_NESTED_CLASS (CORBA, Object)::_is_collocated ()
                );
            }
          
          TAO::Arg_Traits<CORBA::ComponentIR::ComponentDef>::ret_val _tao_retval;
          
          TAO::Argument *_tao_signature [] =
            {
              &_tao_retval
            };
          
          TAO::Invocation_Adapter _tao_call (
              this,
              _tao_signature,
              1,
              "_get_base_component",
              19,
              this->the_TAO_ComponentDef_Proxy_Broker_
            );
          
          _tao_call.invoke (0, 0 ACE_ENV_ARG_PARAMETER);
          ACE_CHECK_RETURN (_tao_retval.excp ());
          
          return _tao_retval.retn ();
        }
        
        // TAO_IDL - Generated from
        // be/be_visitor_operation/operation_cs.cpp:78
        
        void CORBA::ComponentIR::ComponentDef::base_component (
            CORBA::ComponentIR::ComponentDef_ptr base_component
            ACE_ENV_ARG_DECL
          )
          ACE_THROW_SPEC ((
            CORBA::SystemException
          ))
        {
          if (!this->is_evaluated ())
            {
              ACE_NESTED_CLASS (CORBA, Object)::tao_object_initialize (this);
            }
          
          if (this->the_TAO_ComponentDef_Proxy_Broker_ == 0)
            {
              CORBA_ComponentIR_ComponentDef_setup_collocation (
                  this->ACE_NESTED_CLASS (CORBA, Object)::_is_collocated ()
                );
            }
          
          TAO::Arg_Traits<void>::ret_val _tao_retval;
          TAO::Arg_Traits<CORBA::ComponentIR::ComponentDef>::in_arg_val _tao_base_component (base_component);
          
          TAO::Argument *_tao_signature [] =
            {
              &_tao_retval,
              &_tao_base_component
            };
          
          TAO::Invocation_Adapter _tao_call (
              this,
              _tao_signature,
              2,
              "_set_base_component",
              19,
              this->the_TAO_ComponentDef_Proxy_Broker_
            );
          
          _tao_call.invoke (0, 0 ACE_ENV_ARG_PARAMETER);
          ACE_CHECK;
        }
        
        // TAO_IDL - Generated from
        // be/be_visitor_operation/operation_cs.cpp:78
        
        ::CORBA::InterfaceDefSeq * CORBA::ComponentIR::ComponentDef::supported_interfaces (
            ACE_ENV_SINGLE_ARG_DECL
          )
          ACE_THROW_SPEC ((
            CORBA::SystemException
          ))
        {
          if (!this->is_evaluated ())
            {
              ACE_NESTED_CLASS (CORBA, Object)::tao_object_initialize (this);
            }
          
          if (this->the_TAO_ComponentDef_Proxy_Broker_ == 0)
            {
              CORBA_ComponentIR_ComponentDef_setup_collocation (
                  this->ACE_NESTED_CLASS (CORBA, Object)::_is_collocated ()
                );
            }
          
          TAO::Arg_Traits<CORBA::InterfaceDefSeq>::ret_val _tao_retval;
          
          TAO::Argument *_tao_signature [] =
            {
              &_tao_retval
            };
          
          TAO::Invocation_Adapter _tao_call (
              this,
              _tao_signature,
              1,
              "_get_supported_interfaces",
              25,
              this->the_TAO_ComponentDef_Proxy_Broker_
            );
          
          _tao_call.invoke (0, 0 ACE_ENV_ARG_PARAMETER);
          ACE_CHECK_RETURN (_tao_retval.excp ());
          
          return _tao_retval.retn ();
        }
        
        // TAO_IDL - Generated from
        // be/be_visitor_operation/operation_cs.cpp:78
        
        void CORBA::ComponentIR::ComponentDef::supported_interfaces (
            const CORBA::InterfaceDefSeq & supported_interfaces
            ACE_ENV_ARG_DECL
          )
          ACE_THROW_SPEC ((
            CORBA::SystemException
          ))
        {
          if (!this->is_evaluated ())
            {
              ACE_NESTED_CLASS (CORBA, Object)::tao_object_initialize (this);
            }
          
          if (this->the_TAO_ComponentDef_Proxy_Broker_ == 0)
            {
              CORBA_ComponentIR_ComponentDef_setup_collocation (
                  this->ACE_NESTED_CLASS (CORBA, Object)::_is_collocated ()
                );
            }
          
          TAO::Arg_Traits<void>::ret_val _tao_retval;
          TAO::Arg_Traits<CORBA::InterfaceDefSeq>::in_arg_val _tao_supported_interfaces (supported_interfaces);
          
          TAO::Argument *_tao_signature [] =
            {
              &_tao_retval,
              &_tao_supported_interfaces
            };
          
          TAO::Invocation_Adapter _tao_call (
              this,
              _tao_signature,
              2,
              "_set_supported_interfaces",
              25,
              this->the_TAO_ComponentDef_Proxy_Broker_
            );
          
          _tao_call.invoke (0, 0 ACE_ENV_ARG_PARAMETER);
          ACE_CHECK;
        }
        
        // TAO_IDL - Generated from
        // be/be_visitor_operation/operation_cs.cpp:78
        
        ::CORBA::ComponentIR::ProvidesDef_ptr CORBA::ComponentIR::ComponentDef::create_provides (
            const char * id,
            const char * name,
            const char * version,
            CORBA::InterfaceDef_ptr interface_type
            ACE_ENV_ARG_DECL
          )
          ACE_THROW_SPEC ((
            CORBA::SystemException
          ))
        {
          if (!this->is_evaluated ())
            {
              ACE_NESTED_CLASS (CORBA, Object)::tao_object_initialize (this);
            }
          
          if (this->the_TAO_ComponentDef_Proxy_Broker_ == 0)
            {
              CORBA_ComponentIR_ComponentDef_setup_collocation (
                  this->ACE_NESTED_CLASS (CORBA, Object)::_is_collocated ()
                );
            }
          
          TAO::Arg_Traits<CORBA::ComponentIR::ProvidesDef>::ret_val _tao_retval;
          TAO::Arg_Traits<CORBA::RepositoryId>::in_arg_val _tao_id (id);
          TAO::Arg_Traits<CORBA::Identifier>::in_arg_val _tao_name (name);
          TAO::Arg_Traits<CORBA::VersionSpec>::in_arg_val _tao_version (version);
          TAO::Arg_Traits<CORBA::InterfaceDef>::in_arg_val _tao_interface_type (interface_type);
          
          TAO::Argument *_tao_signature [] =
            {
              &_tao_retval,
              &_tao_id,
              &_tao_name,
              &_tao_version,
              &_tao_interface_type
            };
          
          TAO::Invocation_Adapter _tao_call (
              this,
              _tao_signature,
              5,
              "create_provides",
              15,
              this->the_TAO_ComponentDef_Proxy_Broker_
            );
          
          _tao_call.invoke (0, 0 ACE_ENV_ARG_PARAMETER);
          ACE_CHECK_RETURN (_tao_retval.excp ());
          
          return _tao_retval.retn ();
        }
        
        // TAO_IDL - Generated from
        // be/be_visitor_operation/operation_cs.cpp:78
        
        ::CORBA::ComponentIR::UsesDef_ptr CORBA::ComponentIR::ComponentDef::create_uses (
            const char * id,
            const char * name,
            const char * version,
            CORBA::InterfaceDef_ptr interface_type,
            CORBA::Boolean is_multiple
            ACE_ENV_ARG_DECL
          )
          ACE_THROW_SPEC ((
            CORBA::SystemException
          ))
        {
          if (!this->is_evaluated ())
            {
              ACE_NESTED_CLASS (CORBA, Object)::tao_object_initialize (this);
            }
          
          if (this->the_TAO_ComponentDef_Proxy_Broker_ == 0)
            {
              CORBA_ComponentIR_ComponentDef_setup_collocation (
                  this->ACE_NESTED_CLASS (CORBA, Object)::_is_collocated ()
                );
            }
          
          TAO::Arg_Traits<CORBA::ComponentIR::UsesDef>::ret_val _tao_retval;
          TAO::Arg_Traits<CORBA::RepositoryId>::in_arg_val _tao_id (id);
          TAO::Arg_Traits<CORBA::Identifier>::in_arg_val _tao_name (name);
          TAO::Arg_Traits<CORBA::VersionSpec>::in_arg_val _tao_version (version);
          TAO::Arg_Traits<CORBA::InterfaceDef>::in_arg_val _tao_interface_type (interface_type);
          TAO::Arg_Traits<ACE_InputCDR::to_boolean>::in_arg_val _tao_is_multiple (is_multiple);
          
          TAO::Argument *_tao_signature [] =
            {
              &_tao_retval,
              &_tao_id,
              &_tao_name,
              &_tao_version,
              &_tao_interface_type,
              &_tao_is_multiple
            };
          
          TAO::Invocation_Adapter _tao_call (
              this,
              _tao_signature,
              6,
              "create_uses",
              11,
              this->the_TAO_ComponentDef_Proxy_Broker_
            );
          
          _tao_call.invoke (0, 0 ACE_ENV_ARG_PARAMETER);
          ACE_CHECK_RETURN (_tao_retval.excp ());
          
          return _tao_retval.retn ();
        }
        
        // TAO_IDL - Generated from
        // be/be_visitor_operation/operation_cs.cpp:78
        
        ::CORBA::ComponentIR::EmitsDef_ptr CORBA::ComponentIR::ComponentDef::create_emits (
            const char * id,
            const char * name,
            const char * version,
            CORBA::ComponentIR::EventDef_ptr event
            ACE_ENV_ARG_DECL
          )
          ACE_THROW_SPEC ((
            CORBA::SystemException
          ))
        {
          if (!this->is_evaluated ())
            {
              ACE_NESTED_CLASS (CORBA, Object)::tao_object_initialize (this);
            }
          
          if (this->the_TAO_ComponentDef_Proxy_Broker_ == 0)
            {
              CORBA_ComponentIR_ComponentDef_setup_collocation (
                  this->ACE_NESTED_CLASS (CORBA, Object)::_is_collocated ()
                );
            }
          
          TAO::Arg_Traits<CORBA::ComponentIR::EmitsDef>::ret_val _tao_retval;
          TAO::Arg_Traits<CORBA::RepositoryId>::in_arg_val _tao_id (id);
          TAO::Arg_Traits<CORBA::Identifier>::in_arg_val _tao_name (name);
          TAO::Arg_Traits<CORBA::VersionSpec>::in_arg_val _tao_version (version);
          TAO::Arg_Traits<CORBA::ComponentIR::EventDef>::in_arg_val _tao_event (event);
          
          TAO::Argument *_tao_signature [] =
            {
              &_tao_retval,
              &_tao_id,
              &_tao_name,
              &_tao_version,
              &_tao_event
            };
          
          TAO::Invocation_Adapter _tao_call (
              this,
              _tao_signature,
              5,
              "create_emits",
              12,
              this->the_TAO_ComponentDef_Proxy_Broker_
            );
          
          _tao_call.invoke (0, 0 ACE_ENV_ARG_PARAMETER);
          ACE_CHECK_RETURN (_tao_retval.excp ());
          
          return _tao_retval.retn ();
        }
        
        // TAO_IDL - Generated from
        // be/be_visitor_operation/operation_cs.cpp:78
        
        ::CORBA::ComponentIR::PublishesDef_ptr CORBA::ComponentIR::ComponentDef::create_publishes (
            const char * id,
            const char * name,
            const char * version,
            CORBA::ComponentIR::EventDef_ptr event
            ACE_ENV_ARG_DECL
          )
          ACE_THROW_SPEC ((
            CORBA::SystemException
          ))
        {
          if (!this->is_evaluated ())
            {
              ACE_NESTED_CLASS (CORBA, Object)::tao_object_initialize (this);
            }
          
          if (this->the_TAO_ComponentDef_Proxy_Broker_ == 0)
            {
              CORBA_ComponentIR_ComponentDef_setup_collocation (
                  this->ACE_NESTED_CLASS (CORBA, Object)::_is_collocated ()
                );
            }
          
          TAO::Arg_Traits<CORBA::ComponentIR::PublishesDef>::ret_val _tao_retval;
          TAO::Arg_Traits<CORBA::RepositoryId>::in_arg_val _tao_id (id);
          TAO::Arg_Traits<CORBA::Identifier>::in_arg_val _tao_name (name);
          TAO::Arg_Traits<CORBA::VersionSpec>::in_arg_val _tao_version (version);
          TAO::Arg_Traits<CORBA::ComponentIR::EventDef>::in_arg_val _tao_event (event);
          
          TAO::Argument *_tao_signature [] =
            {
              &_tao_retval,
              &_tao_id,
              &_tao_name,
              &_tao_version,
              &_tao_event
            };
          
          TAO::Invocation_Adapter _tao_call (
              this,
              _tao_signature,
              5,
              "create_publishes",
              16,
              this->the_TAO_ComponentDef_Proxy_Broker_
            );
          
          _tao_call.invoke (0, 0 ACE_ENV_ARG_PARAMETER);
          ACE_CHECK_RETURN (_tao_retval.excp ());
          
          return _tao_retval.retn ();
        }
        
        // TAO_IDL - Generated from
        // be/be_visitor_operation/operation_cs.cpp:78
        
        ::CORBA::ComponentIR::ConsumesDef_ptr CORBA::ComponentIR::ComponentDef::create_consumes (
            const char * id,
            const char * name,
            const char * version,
            CORBA::ComponentIR::EventDef_ptr event
            ACE_ENV_ARG_DECL
          )
          ACE_THROW_SPEC ((
            CORBA::SystemException
          ))
        {
          if (!this->is_evaluated ())
            {
              ACE_NESTED_CLASS (CORBA, Object)::tao_object_initialize (this);
            }
          
          if (this->the_TAO_ComponentDef_Proxy_Broker_ == 0)
            {
              CORBA_ComponentIR_ComponentDef_setup_collocation (
                  this->ACE_NESTED_CLASS (CORBA, Object)::_is_collocated ()
                );
            }
          
          TAO::Arg_Traits<CORBA::ComponentIR::ConsumesDef>::ret_val _tao_retval;
          TAO::Arg_Traits<CORBA::RepositoryId>::in_arg_val _tao_id (id);
          TAO::Arg_Traits<CORBA::Identifier>::in_arg_val _tao_name (name);
          TAO::Arg_Traits<CORBA::VersionSpec>::in_arg_val _tao_version (version);
          TAO::Arg_Traits<CORBA::ComponentIR::EventDef>::in_arg_val _tao_event (event);
          
          TAO::Argument *_tao_signature [] =
            {
              &_tao_retval,
              &_tao_id,
              &_tao_name,
              &_tao_version,
              &_tao_event
            };
          
          TAO::Invocation_Adapter _tao_call (
              this,
              _tao_signature,
              5,
              "create_consumes",
              15,
              this->the_TAO_ComponentDef_Proxy_Broker_
            );
          
          _tao_call.invoke (0, 0 ACE_ENV_ARG_PARAMETER);
          ACE_CHECK_RETURN (_tao_retval.excp ());
          
          return _tao_retval.retn ();
        }
        
        CORBA::ComponentIR::ComponentDef::ComponentDef (int collocated)
         : the_TAO_ComponentDef_Proxy_Broker_ (0)
        {
          this->CORBA_ComponentIR_ComponentDef_setup_collocation (collocated);
        }
      
      void
      CORBA::ComponentIR::ComponentDef::CORBA_ComponentIR_ComponentDef_setup_collocation (int collocated)
      {
        if (collocated)
          {
            this->the_TAO_ComponentDef_Proxy_Broker_ =
              ::CORBA_ComponentIR__TAO_ComponentDef_Proxy_Broker_Factory_function_pointer (this);
          }
        
        this->CORBA_ExtInterfaceDef_setup_collocation (collocated);
      }
      
      CORBA::ComponentIR::ComponentDef::~ComponentDef (void)
      {}
      
      void 
      CORBA::ComponentIR::ComponentDef::_tao_any_destructor (void *_tao_void_pointer)
      {
        ComponentDef *_tao_tmp_pointer =
          ACE_static_cast (ComponentDef *, _tao_void_pointer);
        CORBA::release (_tao_tmp_pointer);
      }
      
      CORBA::ComponentIR::ComponentDef_ptr
      CORBA::ComponentIR::ComponentDef::_narrow (
          CORBA::Object_ptr _tao_objref
          ACE_ENV_ARG_DECL
        )
      {
        return
          TAO::Narrow_Utils<ComponentDef>::narrow (
              _tao_objref,
              "IDL:omg.org/CORBA/ComponentIR/ComponentDef:1.0",
              CORBA_ComponentIR__TAO_ComponentDef_Proxy_Broker_Factory_function_pointer
              ACE_ENV_ARG_PARAMETER
            );
      }
      
      CORBA::ComponentIR::ComponentDef_ptr
      CORBA::ComponentIR::ComponentDef::_duplicate (ComponentDef_ptr obj)
      {
        if (! CORBA::is_nil (obj))
          {
            obj->_add_ref ();
          }
        
        return obj;
      }
      
      CORBA::Boolean
      CORBA::ComponentIR::ComponentDef::_is_a (
          const char *value
          ACE_ENV_ARG_DECL
        )
      {
        if (
            !ACE_OS::strcmp (
                (char *)value,
                "IDL:omg.org/CORBA/IRObject:1.0"
              ) ||
            !ACE_OS::strcmp (
                (char *)value,
                "IDL:omg.org/CORBA/Container:1.0"
              ) ||
            !ACE_OS::strcmp (
                (char *)value,
                "IDL:omg.org/CORBA/Contained:1.0"
              ) ||
            !ACE_OS::strcmp (
                (char *)value,
                "IDL:omg.org/CORBA/IDLType:1.0"
              ) ||
            !ACE_OS::strcmp (
                (char *)value,
                "IDL:omg.org/CORBA/InterfaceDef:1.0"
              ) ||
            !ACE_OS::strcmp (
                (char *)value,
                "IDL:omg.org/CORBA/InterfaceAttrExtension:1.0"
              ) ||
            !ACE_OS::strcmp (
                (char *)value,
                "IDL:omg.org/CORBA/ExtInterfaceDef:1.0"
              ) ||
            !ACE_OS::strcmp (
                (char *)value,
                "IDL:omg.org/CORBA/ComponentIR/ComponentDef:1.0"
              ) ||
            !ACE_OS::strcmp (
                (char *)value,
                "IDL:omg.org/CORBA/Object:1.0"
              )
           )
          {
            return 1; // success using local knowledge
          }
        else
          {
            return this->ACE_NESTED_CLASS (CORBA, Object)::_is_a (
                value
                ACE_ENV_ARG_PARAMETER
              );
          }
      }
      
      const char* CORBA::ComponentIR::ComponentDef::_interface_repository_id (void) const
      {
        return "IDL:omg.org/CORBA/ComponentIR/ComponentDef:1.0";
      }
      
      CORBA::Boolean
      CORBA::ComponentIR::ComponentDef::marshal (TAO_OutputCDR &cdr)
      {
        return (cdr << this);
      }
      
      // TAO_IDL - Generated from
      // be/be_visitor_typecode/typecode_defn.cpp:284
      
      static const CORBA::Long _oc_CORBA_ComponentIR_ComponentDef[] =
      {
                TAO_ENCAP_BYTE_ORDER, // byte order
        47,
        ACE_NTOHL (0x49444c3a), 
        ACE_NTOHL (0x6f6d672e), 
        ACE_NTOHL (0x6f72672f), 
        ACE_NTOHL (0x434f5242), 
        ACE_NTOHL (0x412f436f), 
        ACE_NTOHL (0x6d706f6e), 
        ACE_NTOHL (0x656e7449), 
        ACE_NTOHL (0x522f436f), 
        ACE_NTOHL (0x6d706f6e), 
        ACE_NTOHL (0x656e7444), 
        ACE_NTOHL (0x65663a31), 
        ACE_NTOHL (0x2e300000),  // repository ID = IDL:omg.org/CORBA/ComponentIR/ComponentDef:1.0
                13,
        ACE_NTOHL (0x436f6d70), 
        ACE_NTOHL (0x6f6e656e), 
        ACE_NTOHL (0x74446566), 
        ACE_NTOHL (0x0),  // name = ComponentDef
        };
      
      static CORBA::TypeCode _tc_TAO_tc_CORBA_ComponentIR_ComponentDef (
          CORBA::tk_objref,
          sizeof (_oc_CORBA_ComponentIR_ComponentDef),
          (char *) &_oc_CORBA_ComponentIR_ComponentDef,
          0,
          sizeof (CORBA::ComponentIR::ComponentDef)
        );
      
      namespace CORBA
      {
        namespace ComponentIR
        {
          ::CORBA::TypeCode_ptr _tc_ComponentDef =
            &_tc_TAO_tc_CORBA_ComponentIR_ComponentDef;
        }
        }
        
        // TAO_IDL - Generated from 
        // be/be_visitor_sequence/sequence_cs.cpp:65

#if !defined (_CORBA_COMPONENTIR_PROVIDESDESCRIPTIONSEQ_CS_)
#define _CORBA_COMPONENTIR_PROVIDESDESCRIPTIONSEQ_CS_
        
        CORBA::ComponentIR::ProvidesDescriptionSeq::ProvidesDescriptionSeq (void)
        {}
        
        CORBA::ComponentIR::ProvidesDescriptionSeq::ProvidesDescriptionSeq (
            CORBA::ULong max
          )
          : TAO_Unbounded_Sequence<
                CORBA::ComponentIR::ProvidesDescription
              >
            (max)
        {}
        
        CORBA::ComponentIR::ProvidesDescriptionSeq::ProvidesDescriptionSeq (
            CORBA::ULong max,
            CORBA::ULong length,
            CORBA::ComponentIR::ProvidesDescription * buffer,
            CORBA::Boolean release
          )
          : TAO_Unbounded_Sequence<
                CORBA::ComponentIR::ProvidesDescription
              >
            (max, length, buffer, release)
        {}
        
        CORBA::ComponentIR::ProvidesDescriptionSeq::ProvidesDescriptionSeq (
            const ProvidesDescriptionSeq &seq
          )
          : TAO_Unbounded_Sequence<
                CORBA::ComponentIR::ProvidesDescription
              >
            (seq)
        {}
        
        CORBA::ComponentIR::ProvidesDescriptionSeq::~ProvidesDescriptionSeq (void)
        {}
        
        void CORBA::ComponentIR::ProvidesDescriptionSeq::_tao_any_destructor (
            void * _tao_void_pointer
          )
        {
          ProvidesDescriptionSeq * _tao_tmp_pointer =
            ACE_static_cast (ProvidesDescriptionSeq *, _tao_void_pointer);
          delete _tao_tmp_pointer;
        }

#endif /* end #if !defined */
        
        // TAO_IDL - Generated from
        // be/be_visitor_typecode/typecode_defn.cpp:284
        
        static const CORBA::Long _oc_CORBA_ComponentIR_ProvidesDescriptionSeq[] =
        {
                    TAO_ENCAP_BYTE_ORDER, // byte order
          57,
          ACE_NTOHL (0x49444c3a), 
          ACE_NTOHL (0x6f6d672e), 
          ACE_NTOHL (0x6f72672f), 
          ACE_NTOHL (0x434f5242), 
          ACE_NTOHL (0x412f436f), 
          ACE_NTOHL (0x6d706f6e), 
          ACE_NTOHL (0x656e7449), 
          ACE_NTOHL (0x522f5072), 
          ACE_NTOHL (0x6f766964), 
          ACE_NTOHL (0x65734465), 
          ACE_NTOHL (0x73637269), 
          ACE_NTOHL (0x7074696f), 
          ACE_NTOHL (0x6e536571), 
          ACE_NTOHL (0x3a312e30), 
          ACE_NTOHL (0x0),  // repository ID = IDL:omg.org/CORBA/ComponentIR/ProvidesDescriptionSeq:1.0
                    23,
          ACE_NTOHL (0x50726f76), 
          ACE_NTOHL (0x69646573), 
          ACE_NTOHL (0x44657363), 
          ACE_NTOHL (0x72697074), 
          ACE_NTOHL (0x696f6e53), 
          ACE_NTOHL (0x65710000),  // name = ProvidesDescriptionSeq
                    CORBA::tk_sequence, // typecode kind
          568, // encapsulation length
            TAO_ENCAP_BYTE_ORDER, // byte order
            CORBA::tk_struct, // typecode kind
            552, // encapsulation length
              TAO_ENCAP_BYTE_ORDER, // byte order
              54,
              ACE_NTOHL (0x49444c3a), 
              ACE_NTOHL (0x6f6d672e), 
              ACE_NTOHL (0x6f72672f), 
              ACE_NTOHL (0x434f5242), 
              ACE_NTOHL (0x412f436f), 
              ACE_NTOHL (0x6d706f6e), 
              ACE_NTOHL (0x656e7449), 
              ACE_NTOHL (0x522f5072), 
              ACE_NTOHL (0x6f766964), 
              ACE_NTOHL (0x65734465), 
              ACE_NTOHL (0x73637269), 
              ACE_NTOHL (0x7074696f), 
              ACE_NTOHL (0x6e3a312e), 
              ACE_NTOHL (0x30000000),  // repository ID = IDL:omg.org/CORBA/ComponentIR/ProvidesDescription:1.0
                            20,
              ACE_NTOHL (0x50726f76), 
              ACE_NTOHL (0x69646573), 
              ACE_NTOHL (0x44657363), 
              ACE_NTOHL (0x72697074), 
              ACE_NTOHL (0x696f6e00),  // name = ProvidesDescription
              5, // member count
                            5,
              ACE_NTOHL (0x6e616d65), 
              ACE_NTOHL (0x0),  // name = name
                            CORBA::tk_alias, // typecode kind for typedefs
              68, // encapsulation length
                TAO_ENCAP_BYTE_ORDER, // byte order
                33,
                ACE_NTOHL (0x49444c3a), 
                ACE_NTOHL (0x6f6d672e), 
                ACE_NTOHL (0x6f72672f), 
                ACE_NTOHL (0x434f5242), 
                ACE_NTOHL (0x412f4964), 
                ACE_NTOHL (0x656e7469), 
                ACE_NTOHL (0x66696572), 
                ACE_NTOHL (0x3a312e30), 
                ACE_NTOHL (0x0),  // repository ID = IDL:omg.org/CORBA/Identifier:1.0
                                11,
                ACE_NTOHL (0x4964656e), 
                ACE_NTOHL (0x74696669), 
                ACE_NTOHL (0x65720000),  // name = Identifier
                                CORBA::tk_string, 
                0U, // string length

              3,
              ACE_NTOHL (0x69640000),  // name = id
                            CORBA::tk_alias, // typecode kind for typedefs
              72, // encapsulation length
                TAO_ENCAP_BYTE_ORDER, // byte order
                35,
                ACE_NTOHL (0x49444c3a), 
                ACE_NTOHL (0x6f6d672e), 
                ACE_NTOHL (0x6f72672f), 
                ACE_NTOHL (0x434f5242), 
                ACE_NTOHL (0x412f5265), 
                ACE_NTOHL (0x706f7369), 
                ACE_NTOHL (0x746f7279), 
                ACE_NTOHL (0x49643a31), 
                ACE_NTOHL (0x2e300000),  // repository ID = IDL:omg.org/CORBA/RepositoryId:1.0
                                13,
                ACE_NTOHL (0x5265706f), 
                ACE_NTOHL (0x7369746f), 
                ACE_NTOHL (0x72794964), 
                ACE_NTOHL (0x0),  // name = RepositoryId
                                CORBA::tk_string, 
                0U, // string length

              11,
              ACE_NTOHL (0x64656669), 
              ACE_NTOHL (0x6e65645f), 
              ACE_NTOHL (0x696e0000),  // name = defined_in
                            CORBA::tk_alias, // typecode kind for typedefs
              72, // encapsulation length
                TAO_ENCAP_BYTE_ORDER, // byte order
                35,
                ACE_NTOHL (0x49444c3a), 
                ACE_NTOHL (0x6f6d672e), 
                ACE_NTOHL (0x6f72672f), 
                ACE_NTOHL (0x434f5242), 
                ACE_NTOHL (0x412f5265), 
                ACE_NTOHL (0x706f7369), 
                ACE_NTOHL (0x746f7279), 
                ACE_NTOHL (0x49643a31), 
                ACE_NTOHL (0x2e300000),  // repository ID = IDL:omg.org/CORBA/RepositoryId:1.0
                                13,
                ACE_NTOHL (0x5265706f), 
                ACE_NTOHL (0x7369746f), 
                ACE_NTOHL (0x72794964), 
                ACE_NTOHL (0x0),  // name = RepositoryId
                                CORBA::tk_string, 
                0U, // string length

              8,
              ACE_NTOHL (0x76657273), 
              ACE_NTOHL (0x696f6e00),  // name = version
                            CORBA::tk_alias, // typecode kind for typedefs
              68, // encapsulation length
                TAO_ENCAP_BYTE_ORDER, // byte order
                34,
                ACE_NTOHL (0x49444c3a), 
                ACE_NTOHL (0x6f6d672e), 
                ACE_NTOHL (0x6f72672f), 
                ACE_NTOHL (0x434f5242), 
                ACE_NTOHL (0x412f5665), 
                ACE_NTOHL (0x7273696f), 
                ACE_NTOHL (0x6e537065), 
                ACE_NTOHL (0x633a312e), 
                ACE_NTOHL (0x30000000),  // repository ID = IDL:omg.org/CORBA/VersionSpec:1.0
                                12,
                ACE_NTOHL (0x56657273), 
                ACE_NTOHL (0x696f6e53), 
                ACE_NTOHL (0x70656300),  // name = VersionSpec
                                CORBA::tk_string, 
                0U, // string length

              15,
              ACE_NTOHL (0x696e7465), 
              ACE_NTOHL (0x72666163), 
              ACE_NTOHL (0x655f7479), 
              ACE_NTOHL (0x70650000),  // name = interface_type
                            CORBA::tk_alias, // typecode kind for typedefs
              72, // encapsulation length
                TAO_ENCAP_BYTE_ORDER, // byte order
                35,
                ACE_NTOHL (0x49444c3a), 
                ACE_NTOHL (0x6f6d672e), 
                ACE_NTOHL (0x6f72672f), 
                ACE_NTOHL (0x434f5242), 
                ACE_NTOHL (0x412f5265), 
                ACE_NTOHL (0x706f7369), 
                ACE_NTOHL (0x746f7279), 
                ACE_NTOHL (0x49643a31), 
                ACE_NTOHL (0x2e300000),  // repository ID = IDL:omg.org/CORBA/RepositoryId:1.0
                                13,
                ACE_NTOHL (0x5265706f), 
                ACE_NTOHL (0x7369746f), 
                ACE_NTOHL (0x72794964), 
                ACE_NTOHL (0x0),  // name = RepositoryId
                                CORBA::tk_string, 
                0U, // string length


            0U,

};
        
        static CORBA::TypeCode _tc_TAO_tc_CORBA_ComponentIR_ProvidesDescriptionSeq (
            CORBA::tk_alias,
            sizeof (_oc_CORBA_ComponentIR_ProvidesDescriptionSeq),
            (char *) &_oc_CORBA_ComponentIR_ProvidesDescriptionSeq,
            0,
            sizeof (CORBA::ComponentIR::ProvidesDescriptionSeq)
          );
        
        namespace CORBA
        {
          namespace ComponentIR
          {
            ::CORBA::TypeCode_ptr _tc_ProvidesDescriptionSeq =
              &_tc_TAO_tc_CORBA_ComponentIR_ProvidesDescriptionSeq;
          }
          }
          
          // TAO_IDL - Generated from 
          // be/be_visitor_sequence/sequence_cs.cpp:65

#if !defined (_CORBA_COMPONENTIR_USESDESCRIPTIONSEQ_CS_)
#define _CORBA_COMPONENTIR_USESDESCRIPTIONSEQ_CS_
          
          CORBA::ComponentIR::UsesDescriptionSeq::UsesDescriptionSeq (void)
          {}
          
          CORBA::ComponentIR::UsesDescriptionSeq::UsesDescriptionSeq (
              CORBA::ULong max
            )
            : TAO_Unbounded_Sequence<
                  CORBA::ComponentIR::UsesDescription
                >
              (max)
          {}
          
          CORBA::ComponentIR::UsesDescriptionSeq::UsesDescriptionSeq (
              CORBA::ULong max,
              CORBA::ULong length,
              CORBA::ComponentIR::UsesDescription * buffer,
              CORBA::Boolean release
            )
            : TAO_Unbounded_Sequence<
                  CORBA::ComponentIR::UsesDescription
                >
              (max, length, buffer, release)
          {}
          
          CORBA::ComponentIR::UsesDescriptionSeq::UsesDescriptionSeq (
              const UsesDescriptionSeq &seq
            )
            : TAO_Unbounded_Sequence<
                  CORBA::ComponentIR::UsesDescription
                >
              (seq)
          {}
          
          CORBA::ComponentIR::UsesDescriptionSeq::~UsesDescriptionSeq (void)
          {}
          
          void CORBA::ComponentIR::UsesDescriptionSeq::_tao_any_destructor (
              void * _tao_void_pointer
            )
          {
            UsesDescriptionSeq * _tao_tmp_pointer =
              ACE_static_cast (UsesDescriptionSeq *, _tao_void_pointer);
            delete _tao_tmp_pointer;
          }

#endif /* end #if !defined */
          
          // TAO_IDL - Generated from
          // be/be_visitor_typecode/typecode_defn.cpp:284
          
          static const CORBA::Long _oc_CORBA_ComponentIR_UsesDescriptionSeq[] =
          {
                        TAO_ENCAP_BYTE_ORDER, // byte order
            53,
            ACE_NTOHL (0x49444c3a), 
            ACE_NTOHL (0x6f6d672e), 
            ACE_NTOHL (0x6f72672f), 
            ACE_NTOHL (0x434f5242), 
            ACE_NTOHL (0x412f436f), 
            ACE_NTOHL (0x6d706f6e), 
            ACE_NTOHL (0x656e7449), 
            ACE_NTOHL (0x522f5573), 
            ACE_NTOHL (0x65734465), 
            ACE_NTOHL (0x73637269), 
            ACE_NTOHL (0x7074696f), 
            ACE_NTOHL (0x6e536571), 
            ACE_NTOHL (0x3a312e30), 
            ACE_NTOHL (0x0),  // repository ID = IDL:omg.org/CORBA/ComponentIR/UsesDescriptionSeq:1.0
                        19,
            ACE_NTOHL (0x55736573), 
            ACE_NTOHL (0x44657363), 
            ACE_NTOHL (0x72697074), 
            ACE_NTOHL (0x696f6e53), 
            ACE_NTOHL (0x65710000),  // name = UsesDescriptionSeq
                        CORBA::tk_sequence, // typecode kind
            580, // encapsulation length
              TAO_ENCAP_BYTE_ORDER, // byte order
              CORBA::tk_struct, // typecode kind
              564, // encapsulation length
                TAO_ENCAP_BYTE_ORDER, // byte order
                50,
                ACE_NTOHL (0x49444c3a), 
                ACE_NTOHL (0x6f6d672e), 
                ACE_NTOHL (0x6f72672f), 
                ACE_NTOHL (0x434f5242), 
                ACE_NTOHL (0x412f436f), 
                ACE_NTOHL (0x6d706f6e), 
                ACE_NTOHL (0x656e7449), 
                ACE_NTOHL (0x522f5573), 
                ACE_NTOHL (0x65734465), 
                ACE_NTOHL (0x73637269), 
                ACE_NTOHL (0x7074696f), 
                ACE_NTOHL (0x6e3a312e), 
                ACE_NTOHL (0x30000000),  // repository ID = IDL:omg.org/CORBA/ComponentIR/UsesDescription:1.0
                                16,
                ACE_NTOHL (0x55736573), 
                ACE_NTOHL (0x44657363), 
                ACE_NTOHL (0x72697074), 
                ACE_NTOHL (0x696f6e00),  // name = UsesDescription
                6, // member count
                                5,
                ACE_NTOHL (0x6e616d65), 
                ACE_NTOHL (0x0),  // name = name
                                CORBA::tk_alias, // typecode kind for typedefs
                68, // encapsulation length
                  TAO_ENCAP_BYTE_ORDER, // byte order
                  33,
                  ACE_NTOHL (0x49444c3a), 
                  ACE_NTOHL (0x6f6d672e), 
                  ACE_NTOHL (0x6f72672f), 
                  ACE_NTOHL (0x434f5242), 
                  ACE_NTOHL (0x412f4964), 
                  ACE_NTOHL (0x656e7469), 
                  ACE_NTOHL (0x66696572), 
                  ACE_NTOHL (0x3a312e30), 
                  ACE_NTOHL (0x0),  // repository ID = IDL:omg.org/CORBA/Identifier:1.0
                                    11,
                  ACE_NTOHL (0x4964656e), 
                  ACE_NTOHL (0x74696669), 
                  ACE_NTOHL (0x65720000),  // name = Identifier
                                    CORBA::tk_string, 
                  0U, // string length

                3,
                ACE_NTOHL (0x69640000),  // name = id
                                CORBA::tk_alias, // typecode kind for typedefs
                72, // encapsulation length
                  TAO_ENCAP_BYTE_ORDER, // byte order
                  35,
                  ACE_NTOHL (0x49444c3a), 
                  ACE_NTOHL (0x6f6d672e), 
                  ACE_NTOHL (0x6f72672f), 
                  ACE_NTOHL (0x434f5242), 
                  ACE_NTOHL (0x412f5265), 
                  ACE_NTOHL (0x706f7369), 
                  ACE_NTOHL (0x746f7279), 
                  ACE_NTOHL (0x49643a31), 
                  ACE_NTOHL (0x2e300000),  // repository ID = IDL:omg.org/CORBA/RepositoryId:1.0
                                    13,
                  ACE_NTOHL (0x5265706f), 
                  ACE_NTOHL (0x7369746f), 
                  ACE_NTOHL (0x72794964), 
                  ACE_NTOHL (0x0),  // name = RepositoryId
                                    CORBA::tk_string, 
                  0U, // string length

                11,
                ACE_NTOHL (0x64656669), 
                ACE_NTOHL (0x6e65645f), 
                ACE_NTOHL (0x696e0000),  // name = defined_in
                                CORBA::tk_alias, // typecode kind for typedefs
                72, // encapsulation length
                  TAO_ENCAP_BYTE_ORDER, // byte order
                  35,
                  ACE_NTOHL (0x49444c3a), 
                  ACE_NTOHL (0x6f6d672e), 
                  ACE_NTOHL (0x6f72672f), 
                  ACE_NTOHL (0x434f5242), 
                  ACE_NTOHL (0x412f5265), 
                  ACE_NTOHL (0x706f7369), 
                  ACE_NTOHL (0x746f7279), 
                  ACE_NTOHL (0x49643a31), 
                  ACE_NTOHL (0x2e300000),  // repository ID = IDL:omg.org/CORBA/RepositoryId:1.0
                                    13,
                  ACE_NTOHL (0x5265706f), 
                  ACE_NTOHL (0x7369746f), 
                  ACE_NTOHL (0x72794964), 
                  ACE_NTOHL (0x0),  // name = RepositoryId
                                    CORBA::tk_string, 
                  0U, // string length

                8,
                ACE_NTOHL (0x76657273), 
                ACE_NTOHL (0x696f6e00),  // name = version
                                CORBA::tk_alias, // typecode kind for typedefs
                68, // encapsulation length
                  TAO_ENCAP_BYTE_ORDER, // byte order
                  34,
                  ACE_NTOHL (0x49444c3a), 
                  ACE_NTOHL (0x6f6d672e), 
                  ACE_NTOHL (0x6f72672f), 
                  ACE_NTOHL (0x434f5242), 
                  ACE_NTOHL (0x412f5665), 
                  ACE_NTOHL (0x7273696f), 
                  ACE_NTOHL (0x6e537065), 
                  ACE_NTOHL (0x633a312e), 
                  ACE_NTOHL (0x30000000),  // repository ID = IDL:omg.org/CORBA/VersionSpec:1.0
                                    12,
                  ACE_NTOHL (0x56657273), 
                  ACE_NTOHL (0x696f6e53), 
                  ACE_NTOHL (0x70656300),  // name = VersionSpec
                                    CORBA::tk_string, 
                  0U, // string length

                15,
                ACE_NTOHL (0x696e7465), 
                ACE_NTOHL (0x72666163), 
                ACE_NTOHL (0x655f7479), 
                ACE_NTOHL (0x70650000),  // name = interface_type
                                CORBA::tk_alias, // typecode kind for typedefs
                72, // encapsulation length
                  TAO_ENCAP_BYTE_ORDER, // byte order
                  35,
                  ACE_NTOHL (0x49444c3a), 
                  ACE_NTOHL (0x6f6d672e), 
                  ACE_NTOHL (0x6f72672f), 
                  ACE_NTOHL (0x434f5242), 
                  ACE_NTOHL (0x412f5265), 
                  ACE_NTOHL (0x706f7369), 
                  ACE_NTOHL (0x746f7279), 
                  ACE_NTOHL (0x49643a31), 
                  ACE_NTOHL (0x2e300000),  // repository ID = IDL:omg.org/CORBA/RepositoryId:1.0
                                    13,
                  ACE_NTOHL (0x5265706f), 
                  ACE_NTOHL (0x7369746f), 
                  ACE_NTOHL (0x72794964), 
                  ACE_NTOHL (0x0),  // name = RepositoryId
                                    CORBA::tk_string, 
                  0U, // string length

                12,
                ACE_NTOHL (0x69735f6d), 
                ACE_NTOHL (0x756c7469), 
                ACE_NTOHL (0x706c6500),  // name = is_multiple
                                CORBA::tk_boolean,


              0U,

};
          
          static CORBA::TypeCode _tc_TAO_tc_CORBA_ComponentIR_UsesDescriptionSeq (
              CORBA::tk_alias,
              sizeof (_oc_CORBA_ComponentIR_UsesDescriptionSeq),
              (char *) &_oc_CORBA_ComponentIR_UsesDescriptionSeq,
              0,
              sizeof (CORBA::ComponentIR::UsesDescriptionSeq)
            );
          
          namespace CORBA
          {
            namespace ComponentIR
            {
              ::CORBA::TypeCode_ptr _tc_UsesDescriptionSeq =
                &_tc_TAO_tc_CORBA_ComponentIR_UsesDescriptionSeq;
            }
            }
            
            // TAO_IDL - Generated from 
            // be/be_visitor_sequence/sequence_cs.cpp:65

#if !defined (_CORBA_COMPONENTIR_EVENTPORTDESCRIPTIONSEQ_CS_)
#define _CORBA_COMPONENTIR_EVENTPORTDESCRIPTIONSEQ_CS_
            
            CORBA::ComponentIR::EventPortDescriptionSeq::EventPortDescriptionSeq (void)
            {}
            
            CORBA::ComponentIR::EventPortDescriptionSeq::EventPortDescriptionSeq (
                CORBA::ULong max
              )
              : TAO_Unbounded_Sequence<
                    CORBA::ComponentIR::EventPortDescription
                  >
                (max)
            {}
            
            CORBA::ComponentIR::EventPortDescriptionSeq::EventPortDescriptionSeq (
                CORBA::ULong max,
                CORBA::ULong length,
                CORBA::ComponentIR::EventPortDescription * buffer,
                CORBA::Boolean release
              )
              : TAO_Unbounded_Sequence<
                    CORBA::ComponentIR::EventPortDescription
                  >
                (max, length, buffer, release)
            {}
            
            CORBA::ComponentIR::EventPortDescriptionSeq::EventPortDescriptionSeq (
                const EventPortDescriptionSeq &seq
              )
              : TAO_Unbounded_Sequence<
                    CORBA::ComponentIR::EventPortDescription
                  >
                (seq)
            {}
            
            CORBA::ComponentIR::EventPortDescriptionSeq::~EventPortDescriptionSeq (void)
            {}
            
            void CORBA::ComponentIR::EventPortDescriptionSeq::_tao_any_destructor (
                void * _tao_void_pointer
              )
            {
              EventPortDescriptionSeq * _tao_tmp_pointer =
                ACE_static_cast (EventPortDescriptionSeq *, _tao_void_pointer);
              delete _tao_tmp_pointer;
            }

#endif /* end #if !defined */
            
            // TAO_IDL - Generated from
            // be/be_visitor_typecode/typecode_defn.cpp:284
            
            static const CORBA::Long _oc_CORBA_ComponentIR_EventPortDescriptionSeq[] =
            {
                            TAO_ENCAP_BYTE_ORDER, // byte order
              58,
              ACE_NTOHL (0x49444c3a), 
              ACE_NTOHL (0x6f6d672e), 
              ACE_NTOHL (0x6f72672f), 
              ACE_NTOHL (0x434f5242), 
              ACE_NTOHL (0x412f436f), 
              ACE_NTOHL (0x6d706f6e), 
              ACE_NTOHL (0x656e7449), 
              ACE_NTOHL (0x522f4576), 
              ACE_NTOHL (0x656e7450), 
              ACE_NTOHL (0x6f727444), 
              ACE_NTOHL (0x65736372), 
              ACE_NTOHL (0x69707469), 
              ACE_NTOHL (0x6f6e5365), 
              ACE_NTOHL (0x713a312e), 
              ACE_NTOHL (0x30000000),  // repository ID = IDL:omg.org/CORBA/ComponentIR/EventPortDescriptionSeq:1.0
                            24,
              ACE_NTOHL (0x4576656e), 
              ACE_NTOHL (0x74506f72), 
              ACE_NTOHL (0x74446573), 
              ACE_NTOHL (0x63726970), 
              ACE_NTOHL (0x74696f6e), 
              ACE_NTOHL (0x53657100),  // name = EventPortDescriptionSeq
                            CORBA::tk_sequence, // typecode kind
              564, // encapsulation length
                TAO_ENCAP_BYTE_ORDER, // byte order
                CORBA::tk_struct, // typecode kind
                548, // encapsulation length
                  TAO_ENCAP_BYTE_ORDER, // byte order
                  55,
                  ACE_NTOHL (0x49444c3a), 
                  ACE_NTOHL (0x6f6d672e), 
                  ACE_NTOHL (0x6f72672f), 
                  ACE_NTOHL (0x434f5242), 
                  ACE_NTOHL (0x412f436f), 
                  ACE_NTOHL (0x6d706f6e), 
                  ACE_NTOHL (0x656e7449), 
                  ACE_NTOHL (0x522f4576), 
                  ACE_NTOHL (0x656e7450), 
                  ACE_NTOHL (0x6f727444), 
                  ACE_NTOHL (0x65736372), 
                  ACE_NTOHL (0x69707469), 
                  ACE_NTOHL (0x6f6e3a31), 
                  ACE_NTOHL (0x2e300000),  // repository ID = IDL:omg.org/CORBA/ComponentIR/EventPortDescription:1.0
                                    21,
                  ACE_NTOHL (0x4576656e), 
                  ACE_NTOHL (0x74506f72), 
                  ACE_NTOHL (0x74446573), 
                  ACE_NTOHL (0x63726970), 
                  ACE_NTOHL (0x74696f6e), 
                  ACE_NTOHL (0x0),  // name = EventPortDescription
                  5, // member count
                                    5,
                  ACE_NTOHL (0x6e616d65), 
                  ACE_NTOHL (0x0),  // name = name
                                    CORBA::tk_alias, // typecode kind for typedefs
                  68, // encapsulation length
                    TAO_ENCAP_BYTE_ORDER, // byte order
                    33,
                    ACE_NTOHL (0x49444c3a), 
                    ACE_NTOHL (0x6f6d672e), 
                    ACE_NTOHL (0x6f72672f), 
                    ACE_NTOHL (0x434f5242), 
                    ACE_NTOHL (0x412f4964), 
                    ACE_NTOHL (0x656e7469), 
                    ACE_NTOHL (0x66696572), 
                    ACE_NTOHL (0x3a312e30), 
                    ACE_NTOHL (0x0),  // repository ID = IDL:omg.org/CORBA/Identifier:1.0
                                        11,
                    ACE_NTOHL (0x4964656e), 
                    ACE_NTOHL (0x74696669), 
                    ACE_NTOHL (0x65720000),  // name = Identifier
                                        CORBA::tk_string, 
                    0U, // string length

                  3,
                  ACE_NTOHL (0x69640000),  // name = id
                                    CORBA::tk_alias, // typecode kind for typedefs
                  72, // encapsulation length
                    TAO_ENCAP_BYTE_ORDER, // byte order
                    35,
                    ACE_NTOHL (0x49444c3a), 
                    ACE_NTOHL (0x6f6d672e), 
                    ACE_NTOHL (0x6f72672f), 
                    ACE_NTOHL (0x434f5242), 
                    ACE_NTOHL (0x412f5265), 
                    ACE_NTOHL (0x706f7369), 
                    ACE_NTOHL (0x746f7279), 
                    ACE_NTOHL (0x49643a31), 
                    ACE_NTOHL (0x2e300000),  // repository ID = IDL:omg.org/CORBA/RepositoryId:1.0
                                        13,
                    ACE_NTOHL (0x5265706f), 
                    ACE_NTOHL (0x7369746f), 
                    ACE_NTOHL (0x72794964), 
                    ACE_NTOHL (0x0),  // name = RepositoryId
                                        CORBA::tk_string, 
                    0U, // string length

                  11,
                  ACE_NTOHL (0x64656669), 
                  ACE_NTOHL (0x6e65645f), 
                  ACE_NTOHL (0x696e0000),  // name = defined_in
                                    CORBA::tk_alias, // typecode kind for typedefs
                  72, // encapsulation length
                    TAO_ENCAP_BYTE_ORDER, // byte order
                    35,
                    ACE_NTOHL (0x49444c3a), 
                    ACE_NTOHL (0x6f6d672e), 
                    ACE_NTOHL (0x6f72672f), 
                    ACE_NTOHL (0x434f5242), 
                    ACE_NTOHL (0x412f5265), 
                    ACE_NTOHL (0x706f7369), 
                    ACE_NTOHL (0x746f7279), 
                    ACE_NTOHL (0x49643a31), 
                    ACE_NTOHL (0x2e300000),  // repository ID = IDL:omg.org/CORBA/RepositoryId:1.0
                                        13,
                    ACE_NTOHL (0x5265706f), 
                    ACE_NTOHL (0x7369746f), 
                    ACE_NTOHL (0x72794964), 
                    ACE_NTOHL (0x0),  // name = RepositoryId
                                        CORBA::tk_string, 
                    0U, // string length

                  8,
                  ACE_NTOHL (0x76657273), 
                  ACE_NTOHL (0x696f6e00),  // name = version
                                    CORBA::tk_alias, // typecode kind for typedefs
                  68, // encapsulation length
                    TAO_ENCAP_BYTE_ORDER, // byte order
                    34,
                    ACE_NTOHL (0x49444c3a), 
                    ACE_NTOHL (0x6f6d672e), 
                    ACE_NTOHL (0x6f72672f), 
                    ACE_NTOHL (0x434f5242), 
                    ACE_NTOHL (0x412f5665), 
                    ACE_NTOHL (0x7273696f), 
                    ACE_NTOHL (0x6e537065), 
                    ACE_NTOHL (0x633a312e), 
                    ACE_NTOHL (0x30000000),  // repository ID = IDL:omg.org/CORBA/VersionSpec:1.0
                                        12,
                    ACE_NTOHL (0x56657273), 
                    ACE_NTOHL (0x696f6e53), 
                    ACE_NTOHL (0x70656300),  // name = VersionSpec
                                        CORBA::tk_string, 
                    0U, // string length

                  6,
                  ACE_NTOHL (0x6576656e), 
                  ACE_NTOHL (0x74000000),  // name = event
                                    CORBA::tk_alias, // typecode kind for typedefs
                  72, // encapsulation length
                    TAO_ENCAP_BYTE_ORDER, // byte order
                    35,
                    ACE_NTOHL (0x49444c3a), 
                    ACE_NTOHL (0x6f6d672e), 
                    ACE_NTOHL (0x6f72672f), 
                    ACE_NTOHL (0x434f5242), 
                    ACE_NTOHL (0x412f5265), 
                    ACE_NTOHL (0x706f7369), 
                    ACE_NTOHL (0x746f7279), 
                    ACE_NTOHL (0x49643a31), 
                    ACE_NTOHL (0x2e300000),  // repository ID = IDL:omg.org/CORBA/RepositoryId:1.0
                                        13,
                    ACE_NTOHL (0x5265706f), 
                    ACE_NTOHL (0x7369746f), 
                    ACE_NTOHL (0x72794964), 
                    ACE_NTOHL (0x0),  // name = RepositoryId
                                        CORBA::tk_string, 
                    0U, // string length


                0U,

};
            
            static CORBA::TypeCode _tc_TAO_tc_CORBA_ComponentIR_EventPortDescriptionSeq (
                CORBA::tk_alias,
                sizeof (_oc_CORBA_ComponentIR_EventPortDescriptionSeq),
                (char *) &_oc_CORBA_ComponentIR_EventPortDescriptionSeq,
                0,
                sizeof (CORBA::ComponentIR::EventPortDescriptionSeq)
              );
            
            namespace CORBA
            {
              namespace ComponentIR
              {
                ::CORBA::TypeCode_ptr _tc_EventPortDescriptionSeq =
                  &_tc_TAO_tc_CORBA_ComponentIR_EventPortDescriptionSeq;
              }
              }
              
              // TAO_IDL - Generated from
              // be/be_visitor_typecode/typecode_defn.cpp:284
              
              static const CORBA::Long _oc_CORBA_ComponentIR_ComponentDescription[] =
              {
                                TAO_ENCAP_BYTE_ORDER, // byte order
                55,
                ACE_NTOHL (0x49444c3a), 
                ACE_NTOHL (0x6f6d672e), 
                ACE_NTOHL (0x6f72672f), 
                ACE_NTOHL (0x434f5242), 
                ACE_NTOHL (0x412f436f), 
                ACE_NTOHL (0x6d706f6e), 
                ACE_NTOHL (0x656e7449), 
                ACE_NTOHL (0x522f436f), 
                ACE_NTOHL (0x6d706f6e), 
                ACE_NTOHL (0x656e7444), 
                ACE_NTOHL (0x65736372), 
                ACE_NTOHL (0x69707469), 
                ACE_NTOHL (0x6f6e3a31), 
                ACE_NTOHL (0x2e300000),  // repository ID = IDL:omg.org/CORBA/ComponentIR/ComponentDescription:1.0
                                21,
                ACE_NTOHL (0x436f6d70), 
                ACE_NTOHL (0x6f6e656e), 
                ACE_NTOHL (0x74446573), 
                ACE_NTOHL (0x63726970), 
                ACE_NTOHL (0x74696f6e), 
                ACE_NTOHL (0x0),  // name = ComponentDescription
                13, // member count
                                5,
                ACE_NTOHL (0x6e616d65), 
                ACE_NTOHL (0x0),  // name = name
                                CORBA::tk_alias, // typecode kind for typedefs
                68, // encapsulation length
                  TAO_ENCAP_BYTE_ORDER, // byte order
                  33,
                  ACE_NTOHL (0x49444c3a), 
                  ACE_NTOHL (0x6f6d672e), 
                  ACE_NTOHL (0x6f72672f), 
                  ACE_NTOHL (0x434f5242), 
                  ACE_NTOHL (0x412f4964), 
                  ACE_NTOHL (0x656e7469), 
                  ACE_NTOHL (0x66696572), 
                  ACE_NTOHL (0x3a312e30), 
                  ACE_NTOHL (0x0),  // repository ID = IDL:omg.org/CORBA/Identifier:1.0
                                    11,
                  ACE_NTOHL (0x4964656e), 
                  ACE_NTOHL (0x74696669), 
                  ACE_NTOHL (0x65720000),  // name = Identifier
                                    CORBA::tk_string, 
                  0U, // string length

                3,
                ACE_NTOHL (0x69640000),  // name = id
                                CORBA::tk_alias, // typecode kind for typedefs
                72, // encapsulation length
                  TAO_ENCAP_BYTE_ORDER, // byte order
                  35,
                  ACE_NTOHL (0x49444c3a), 
                  ACE_NTOHL (0x6f6d672e), 
                  ACE_NTOHL (0x6f72672f), 
                  ACE_NTOHL (0x434f5242), 
                  ACE_NTOHL (0x412f5265), 
                  ACE_NTOHL (0x706f7369), 
                  ACE_NTOHL (0x746f7279), 
                  ACE_NTOHL (0x49643a31), 
                  ACE_NTOHL (0x2e300000),  // repository ID = IDL:omg.org/CORBA/RepositoryId:1.0
                                    13,
                  ACE_NTOHL (0x5265706f), 
                  ACE_NTOHL (0x7369746f), 
                  ACE_NTOHL (0x72794964), 
                  ACE_NTOHL (0x0),  // name = RepositoryId
                                    CORBA::tk_string, 
                  0U, // string length

                11,
                ACE_NTOHL (0x64656669), 
                ACE_NTOHL (0x6e65645f), 
                ACE_NTOHL (0x696e0000),  // name = defined_in
                                CORBA::tk_alias, // typecode kind for typedefs
                72, // encapsulation length
                  TAO_ENCAP_BYTE_ORDER, // byte order
                  35,
                  ACE_NTOHL (0x49444c3a), 
                  ACE_NTOHL (0x6f6d672e), 
                  ACE_NTOHL (0x6f72672f), 
                  ACE_NTOHL (0x434f5242), 
                  ACE_NTOHL (0x412f5265), 
                  ACE_NTOHL (0x706f7369), 
                  ACE_NTOHL (0x746f7279), 
                  ACE_NTOHL (0x49643a31), 
                  ACE_NTOHL (0x2e300000),  // repository ID = IDL:omg.org/CORBA/RepositoryId:1.0
                                    13,
                  ACE_NTOHL (0x5265706f), 
                  ACE_NTOHL (0x7369746f), 
                  ACE_NTOHL (0x72794964), 
                  ACE_NTOHL (0x0),  // name = RepositoryId
                                    CORBA::tk_string, 
                  0U, // string length

                8,
                ACE_NTOHL (0x76657273), 
                ACE_NTOHL (0x696f6e00),  // name = version
                                CORBA::tk_alias, // typecode kind for typedefs
                68, // encapsulation length
                  TAO_ENCAP_BYTE_ORDER, // byte order
                  34,
                  ACE_NTOHL (0x49444c3a), 
                  ACE_NTOHL (0x6f6d672e), 
                  ACE_NTOHL (0x6f72672f), 
                  ACE_NTOHL (0x434f5242), 
                  ACE_NTOHL (0x412f5665), 
                  ACE_NTOHL (0x7273696f), 
                  ACE_NTOHL (0x6e537065), 
                  ACE_NTOHL (0x633a312e), 
                  ACE_NTOHL (0x30000000),  // repository ID = IDL:omg.org/CORBA/VersionSpec:1.0
                                    12,
                  ACE_NTOHL (0x56657273), 
                  ACE_NTOHL (0x696f6e53), 
                  ACE_NTOHL (0x70656300),  // name = VersionSpec
                                    CORBA::tk_string, 
                  0U, // string length

                15,
                ACE_NTOHL (0x62617365), 
                ACE_NTOHL (0x5f636f6d), 
                ACE_NTOHL (0x706f6e65), 
                ACE_NTOHL (0x6e740000),  // name = base_component
                                CORBA::tk_alias, // typecode kind for typedefs
                72, // encapsulation length
                  TAO_ENCAP_BYTE_ORDER, // byte order
                  35,
                  ACE_NTOHL (0x49444c3a), 
                  ACE_NTOHL (0x6f6d672e), 
                  ACE_NTOHL (0x6f72672f), 
                  ACE_NTOHL (0x434f5242), 
                  ACE_NTOHL (0x412f5265), 
                  ACE_NTOHL (0x706f7369), 
                  ACE_NTOHL (0x746f7279), 
                  ACE_NTOHL (0x49643a31), 
                  ACE_NTOHL (0x2e300000),  // repository ID = IDL:omg.org/CORBA/RepositoryId:1.0
                                    13,
                  ACE_NTOHL (0x5265706f), 
                  ACE_NTOHL (0x7369746f), 
                  ACE_NTOHL (0x72794964), 
                  ACE_NTOHL (0x0),  // name = RepositoryId
                                    CORBA::tk_string, 
                  0U, // string length

                21,
                ACE_NTOHL (0x73757070), 
                ACE_NTOHL (0x6f727465), 
                ACE_NTOHL (0x645f696e), 
                ACE_NTOHL (0x74657266), 
                ACE_NTOHL (0x61636573), 
                ACE_NTOHL (0x0),  // name = supported_interfaces
                                CORBA::tk_alias, // typecode kind for typedefs
                164, // encapsulation length
                  TAO_ENCAP_BYTE_ORDER, // byte order
                  38,
                  ACE_NTOHL (0x49444c3a), 
                  ACE_NTOHL (0x6f6d672e), 
                  ACE_NTOHL (0x6f72672f), 
                  ACE_NTOHL (0x434f5242), 
                  ACE_NTOHL (0x412f5265), 
                  ACE_NTOHL (0x706f7369), 
                  ACE_NTOHL (0x746f7279), 
                  ACE_NTOHL (0x49645365), 
                  ACE_NTOHL (0x713a312e), 
                  ACE_NTOHL (0x30000000),  // repository ID = IDL:omg.org/CORBA/RepositoryIdSeq:1.0
                                    16,
                  ACE_NTOHL (0x5265706f), 
                  ACE_NTOHL (0x7369746f), 
                  ACE_NTOHL (0x72794964), 
                  ACE_NTOHL (0x53657100),  // name = RepositoryIdSeq
                                    CORBA::tk_sequence, // typecode kind
                  88, // encapsulation length
                    TAO_ENCAP_BYTE_ORDER, // byte order
                    CORBA::tk_alias, // typecode kind for typedefs
                    72, // encapsulation length
                      TAO_ENCAP_BYTE_ORDER, // byte order
                      35,
                      ACE_NTOHL (0x49444c3a), 
                      ACE_NTOHL (0x6f6d672e), 
                      ACE_NTOHL (0x6f72672f), 
                      ACE_NTOHL (0x434f5242), 
                      ACE_NTOHL (0x412f5265), 
                      ACE_NTOHL (0x706f7369), 
                      ACE_NTOHL (0x746f7279), 
                      ACE_NTOHL (0x49643a31), 
                      ACE_NTOHL (0x2e300000),  // repository ID = IDL:omg.org/CORBA/RepositoryId:1.0
                                            13,
                      ACE_NTOHL (0x5265706f), 
                      ACE_NTOHL (0x7369746f), 
                      ACE_NTOHL (0x72794964), 
                      ACE_NTOHL (0x0),  // name = RepositoryId
                                            CORBA::tk_string, 
                      0U, // string length

                    0U,


                20,
                ACE_NTOHL (0x70726f76), 
                ACE_NTOHL (0x69646564), 
                ACE_NTOHL (0x5f696e74), 
                ACE_NTOHL (0x65726661), 
                ACE_NTOHL (0x63657300),  // name = provided_interfaces
                                CORBA::tk_alias, // typecode kind for typedefs
                672, // encapsulation length
                  TAO_ENCAP_BYTE_ORDER, // byte order
                  57,
                  ACE_NTOHL (0x49444c3a), 
                  ACE_NTOHL (0x6f6d672e), 
                  ACE_NTOHL (0x6f72672f), 
                  ACE_NTOHL (0x434f5242), 
                  ACE_NTOHL (0x412f436f), 
                  ACE_NTOHL (0x6d706f6e), 
                  ACE_NTOHL (0x656e7449), 
                  ACE_NTOHL (0x522f5072), 
                  ACE_NTOHL (0x6f766964), 
                  ACE_NTOHL (0x65734465), 
                  ACE_NTOHL (0x73637269), 
                  ACE_NTOHL (0x7074696f), 
                  ACE_NTOHL (0x6e536571), 
                  ACE_NTOHL (0x3a312e30), 
                  ACE_NTOHL (0x0),  // repository ID = IDL:omg.org/CORBA/ComponentIR/ProvidesDescriptionSeq:1.0
                                    23,
                  ACE_NTOHL (0x50726f76), 
                  ACE_NTOHL (0x69646573), 
                  ACE_NTOHL (0x44657363), 
                  ACE_NTOHL (0x72697074), 
                  ACE_NTOHL (0x696f6e53), 
                  ACE_NTOHL (0x65710000),  // name = ProvidesDescriptionSeq
                                    CORBA::tk_sequence, // typecode kind
                  568, // encapsulation length
                    TAO_ENCAP_BYTE_ORDER, // byte order
                    CORBA::tk_struct, // typecode kind
                    552, // encapsulation length
                      TAO_ENCAP_BYTE_ORDER, // byte order
                      54,
                      ACE_NTOHL (0x49444c3a), 
                      ACE_NTOHL (0x6f6d672e), 
                      ACE_NTOHL (0x6f72672f), 
                      ACE_NTOHL (0x434f5242), 
                      ACE_NTOHL (0x412f436f), 
                      ACE_NTOHL (0x6d706f6e), 
                      ACE_NTOHL (0x656e7449), 
                      ACE_NTOHL (0x522f5072), 
                      ACE_NTOHL (0x6f766964), 
                      ACE_NTOHL (0x65734465), 
                      ACE_NTOHL (0x73637269), 
                      ACE_NTOHL (0x7074696f), 
                      ACE_NTOHL (0x6e3a312e), 
                      ACE_NTOHL (0x30000000),  // repository ID = IDL:omg.org/CORBA/ComponentIR/ProvidesDescription:1.0
                                            20,
                      ACE_NTOHL (0x50726f76), 
                      ACE_NTOHL (0x69646573), 
                      ACE_NTOHL (0x44657363), 
                      ACE_NTOHL (0x72697074), 
                      ACE_NTOHL (0x696f6e00),  // name = ProvidesDescription
                      5, // member count
                                            5,
                      ACE_NTOHL (0x6e616d65), 
                      ACE_NTOHL (0x0),  // name = name
                                            CORBA::tk_alias, // typecode kind for typedefs
                      68, // encapsulation length
                        TAO_ENCAP_BYTE_ORDER, // byte order
                        33,
                        ACE_NTOHL (0x49444c3a), 
                        ACE_NTOHL (0x6f6d672e), 
                        ACE_NTOHL (0x6f72672f), 
                        ACE_NTOHL (0x434f5242), 
                        ACE_NTOHL (0x412f4964), 
                        ACE_NTOHL (0x656e7469), 
                        ACE_NTOHL (0x66696572), 
                        ACE_NTOHL (0x3a312e30), 
                        ACE_NTOHL (0x0),  // repository ID = IDL:omg.org/CORBA/Identifier:1.0
                                                11,
                        ACE_NTOHL (0x4964656e), 
                        ACE_NTOHL (0x74696669), 
                        ACE_NTOHL (0x65720000),  // name = Identifier
                                                CORBA::tk_string, 
                        0U, // string length

                      3,
                      ACE_NTOHL (0x69640000),  // name = id
                                            CORBA::tk_alias, // typecode kind for typedefs
                      72, // encapsulation length
                        TAO_ENCAP_BYTE_ORDER, // byte order
                        35,
                        ACE_NTOHL (0x49444c3a), 
                        ACE_NTOHL (0x6f6d672e), 
                        ACE_NTOHL (0x6f72672f), 
                        ACE_NTOHL (0x434f5242), 
                        ACE_NTOHL (0x412f5265), 
                        ACE_NTOHL (0x706f7369), 
                        ACE_NTOHL (0x746f7279), 
                        ACE_NTOHL (0x49643a31), 
                        ACE_NTOHL (0x2e300000),  // repository ID = IDL:omg.org/CORBA/RepositoryId:1.0
                                                13,
                        ACE_NTOHL (0x5265706f), 
                        ACE_NTOHL (0x7369746f), 
                        ACE_NTOHL (0x72794964), 
                        ACE_NTOHL (0x0),  // name = RepositoryId
                                                CORBA::tk_string, 
                        0U, // string length

                      11,
                      ACE_NTOHL (0x64656669), 
                      ACE_NTOHL (0x6e65645f), 
                      ACE_NTOHL (0x696e0000),  // name = defined_in
                                            CORBA::tk_alias, // typecode kind for typedefs
                      72, // encapsulation length
                        TAO_ENCAP_BYTE_ORDER, // byte order
                        35,
                        ACE_NTOHL (0x49444c3a), 
                        ACE_NTOHL (0x6f6d672e), 
                        ACE_NTOHL (0x6f72672f), 
                        ACE_NTOHL (0x434f5242), 
                        ACE_NTOHL (0x412f5265), 
                        ACE_NTOHL (0x706f7369), 
                        ACE_NTOHL (0x746f7279), 
                        ACE_NTOHL (0x49643a31), 
                        ACE_NTOHL (0x2e300000),  // repository ID = IDL:omg.org/CORBA/RepositoryId:1.0
                                                13,
                        ACE_NTOHL (0x5265706f), 
                        ACE_NTOHL (0x7369746f), 
                        ACE_NTOHL (0x72794964), 
                        ACE_NTOHL (0x0),  // name = RepositoryId
                                                CORBA::tk_string, 
                        0U, // string length

                      8,
                      ACE_NTOHL (0x76657273), 
                      ACE_NTOHL (0x696f6e00),  // name = version
                                            CORBA::tk_alias, // typecode kind for typedefs
                      68, // encapsulation length
                        TAO_ENCAP_BYTE_ORDER, // byte order
                        34,
                        ACE_NTOHL (0x49444c3a), 
                        ACE_NTOHL (0x6f6d672e), 
                        ACE_NTOHL (0x6f72672f), 
                        ACE_NTOHL (0x434f5242), 
                        ACE_NTOHL (0x412f5665), 
                        ACE_NTOHL (0x7273696f), 
                        ACE_NTOHL (0x6e537065), 
                        ACE_NTOHL (0x633a312e), 
                        ACE_NTOHL (0x30000000),  // repository ID = IDL:omg.org/CORBA/VersionSpec:1.0
                                                12,
                        ACE_NTOHL (0x56657273), 
                        ACE_NTOHL (0x696f6e53), 
                        ACE_NTOHL (0x70656300),  // name = VersionSpec
                                                CORBA::tk_string, 
                        0U, // string length

                      15,
                      ACE_NTOHL (0x696e7465), 
                      ACE_NTOHL (0x72666163), 
                      ACE_NTOHL (0x655f7479), 
                      ACE_NTOHL (0x70650000),  // name = interface_type
                                            CORBA::tk_alias, // typecode kind for typedefs
                      72, // encapsulation length
                        TAO_ENCAP_BYTE_ORDER, // byte order
                        35,
                        ACE_NTOHL (0x49444c3a), 
                        ACE_NTOHL (0x6f6d672e), 
                        ACE_NTOHL (0x6f72672f), 
                        ACE_NTOHL (0x434f5242), 
                        ACE_NTOHL (0x412f5265), 
                        ACE_NTOHL (0x706f7369), 
                        ACE_NTOHL (0x746f7279), 
                        ACE_NTOHL (0x49643a31), 
                        ACE_NTOHL (0x2e300000),  // repository ID = IDL:omg.org/CORBA/RepositoryId:1.0
                                                13,
                        ACE_NTOHL (0x5265706f), 
                        ACE_NTOHL (0x7369746f), 
                        ACE_NTOHL (0x72794964), 
                        ACE_NTOHL (0x0),  // name = RepositoryId
                                                CORBA::tk_string, 
                        0U, // string length


                    0U,


                16,
                ACE_NTOHL (0x75736564), 
                ACE_NTOHL (0x5f696e74), 
                ACE_NTOHL (0x65726661), 
                ACE_NTOHL (0x63657300),  // name = used_interfaces
                                CORBA::tk_alias, // typecode kind for typedefs
                676, // encapsulation length
                  TAO_ENCAP_BYTE_ORDER, // byte order
                  53,
                  ACE_NTOHL (0x49444c3a), 
                  ACE_NTOHL (0x6f6d672e), 
                  ACE_NTOHL (0x6f72672f), 
                  ACE_NTOHL (0x434f5242), 
                  ACE_NTOHL (0x412f436f), 
                  ACE_NTOHL (0x6d706f6e), 
                  ACE_NTOHL (0x656e7449), 
                  ACE_NTOHL (0x522f5573), 
                  ACE_NTOHL (0x65734465), 
                  ACE_NTOHL (0x73637269), 
                  ACE_NTOHL (0x7074696f), 
                  ACE_NTOHL (0x6e536571), 
                  ACE_NTOHL (0x3a312e30), 
                  ACE_NTOHL (0x0),  // repository ID = IDL:omg.org/CORBA/ComponentIR/UsesDescriptionSeq:1.0
                                    19,
                  ACE_NTOHL (0x55736573), 
                  ACE_NTOHL (0x44657363), 
                  ACE_NTOHL (0x72697074), 
                  ACE_NTOHL (0x696f6e53), 
                  ACE_NTOHL (0x65710000),  // name = UsesDescriptionSeq
                                    CORBA::tk_sequence, // typecode kind
                  580, // encapsulation length
                    TAO_ENCAP_BYTE_ORDER, // byte order
                    CORBA::tk_struct, // typecode kind
                    564, // encapsulation length
                      TAO_ENCAP_BYTE_ORDER, // byte order
                      50,
                      ACE_NTOHL (0x49444c3a), 
                      ACE_NTOHL (0x6f6d672e), 
                      ACE_NTOHL (0x6f72672f), 
                      ACE_NTOHL (0x434f5242), 
                      ACE_NTOHL (0x412f436f), 
                      ACE_NTOHL (0x6d706f6e), 
                      ACE_NTOHL (0x656e7449), 
                      ACE_NTOHL (0x522f5573), 
                      ACE_NTOHL (0x65734465), 
                      ACE_NTOHL (0x73637269), 
                      ACE_NTOHL (0x7074696f), 
                      ACE_NTOHL (0x6e3a312e), 
                      ACE_NTOHL (0x30000000),  // repository ID = IDL:omg.org/CORBA/ComponentIR/UsesDescription:1.0
                                            16,
                      ACE_NTOHL (0x55736573), 
                      ACE_NTOHL (0x44657363), 
                      ACE_NTOHL (0x72697074), 
                      ACE_NTOHL (0x696f6e00),  // name = UsesDescription
                      6, // member count
                                            5,
                      ACE_NTOHL (0x6e616d65), 
                      ACE_NTOHL (0x0),  // name = name
                                            CORBA::tk_alias, // typecode kind for typedefs
                      68, // encapsulation length
                        TAO_ENCAP_BYTE_ORDER, // byte order
                        33,
                        ACE_NTOHL (0x49444c3a), 
                        ACE_NTOHL (0x6f6d672e), 
                        ACE_NTOHL (0x6f72672f), 
                        ACE_NTOHL (0x434f5242), 
                        ACE_NTOHL (0x412f4964), 
                        ACE_NTOHL (0x656e7469), 
                        ACE_NTOHL (0x66696572), 
                        ACE_NTOHL (0x3a312e30), 
                        ACE_NTOHL (0x0),  // repository ID = IDL:omg.org/CORBA/Identifier:1.0
                                                11,
                        ACE_NTOHL (0x4964656e), 
                        ACE_NTOHL (0x74696669), 
                        ACE_NTOHL (0x65720000),  // name = Identifier
                                                CORBA::tk_string, 
                        0U, // string length

                      3,
                      ACE_NTOHL (0x69640000),  // name = id
                                            CORBA::tk_alias, // typecode kind for typedefs
                      72, // encapsulation length
                        TAO_ENCAP_BYTE_ORDER, // byte order
                        35,
                        ACE_NTOHL (0x49444c3a), 
                        ACE_NTOHL (0x6f6d672e), 
                        ACE_NTOHL (0x6f72672f), 
                        ACE_NTOHL (0x434f5242), 
                        ACE_NTOHL (0x412f5265), 
                        ACE_NTOHL (0x706f7369), 
                        ACE_NTOHL (0x746f7279), 
                        ACE_NTOHL (0x49643a31), 
                        ACE_NTOHL (0x2e300000),  // repository ID = IDL:omg.org/CORBA/RepositoryId:1.0
                                                13,
                        ACE_NTOHL (0x5265706f), 
                        ACE_NTOHL (0x7369746f), 
                        ACE_NTOHL (0x72794964), 
                        ACE_NTOHL (0x0),  // name = RepositoryId
                                                CORBA::tk_string, 
                        0U, // string length

                      11,
                      ACE_NTOHL (0x64656669), 
                      ACE_NTOHL (0x6e65645f), 
                      ACE_NTOHL (0x696e0000),  // name = defined_in
                                            CORBA::tk_alias, // typecode kind for typedefs
                      72, // encapsulation length
                        TAO_ENCAP_BYTE_ORDER, // byte order
                        35,
                        ACE_NTOHL (0x49444c3a), 
                        ACE_NTOHL (0x6f6d672e), 
                        ACE_NTOHL (0x6f72672f), 
                        ACE_NTOHL (0x434f5242), 
                        ACE_NTOHL (0x412f5265), 
                        ACE_NTOHL (0x706f7369), 
                        ACE_NTOHL (0x746f7279), 
                        ACE_NTOHL (0x49643a31), 
                        ACE_NTOHL (0x2e300000),  // repository ID = IDL:omg.org/CORBA/RepositoryId:1.0
                                                13,
                        ACE_NTOHL (0x5265706f), 
                        ACE_NTOHL (0x7369746f), 
                        ACE_NTOHL (0x72794964), 
                        ACE_NTOHL (0x0),  // name = RepositoryId
                                                CORBA::tk_string, 
                        0U, // string length

                      8,
                      ACE_NTOHL (0x76657273), 
                      ACE_NTOHL (0x696f6e00),  // name = version
                                            CORBA::tk_alias, // typecode kind for typedefs
                      68, // encapsulation length
                        TAO_ENCAP_BYTE_ORDER, // byte order
                        34,
                        ACE_NTOHL (0x49444c3a), 
                        ACE_NTOHL (0x6f6d672e), 
                        ACE_NTOHL (0x6f72672f), 
                        ACE_NTOHL (0x434f5242), 
                        ACE_NTOHL (0x412f5665), 
                        ACE_NTOHL (0x7273696f), 
                        ACE_NTOHL (0x6e537065), 
                        ACE_NTOHL (0x633a312e), 
                        ACE_NTOHL (0x30000000),  // repository ID = IDL:omg.org/CORBA/VersionSpec:1.0
                                                12,
                        ACE_NTOHL (0x56657273), 
                        ACE_NTOHL (0x696f6e53), 
                        ACE_NTOHL (0x70656300),  // name = VersionSpec
                                                CORBA::tk_string, 
                        0U, // string length

                      15,
                      ACE_NTOHL (0x696e7465), 
                      ACE_NTOHL (0x72666163), 
                      ACE_NTOHL (0x655f7479), 
                      ACE_NTOHL (0x70650000),  // name = interface_type
                                            CORBA::tk_alias, // typecode kind for typedefs
                      72, // encapsulation length
                        TAO_ENCAP_BYTE_ORDER, // byte order
                        35,
                        ACE_NTOHL (0x49444c3a), 
                        ACE_NTOHL (0x6f6d672e), 
                        ACE_NTOHL (0x6f72672f), 
                        ACE_NTOHL (0x434f5242), 
                        ACE_NTOHL (0x412f5265), 
                        ACE_NTOHL (0x706f7369), 
                        ACE_NTOHL (0x746f7279), 
                        ACE_NTOHL (0x49643a31), 
                        ACE_NTOHL (0x2e300000),  // repository ID = IDL:omg.org/CORBA/RepositoryId:1.0
                                                13,
                        ACE_NTOHL (0x5265706f), 
                        ACE_NTOHL (0x7369746f), 
                        ACE_NTOHL (0x72794964), 
                        ACE_NTOHL (0x0),  // name = RepositoryId
                                                CORBA::tk_string, 
                        0U, // string length

                      12,
                      ACE_NTOHL (0x69735f6d), 
                      ACE_NTOHL (0x756c7469), 
                      ACE_NTOHL (0x706c6500),  // name = is_multiple
                                            CORBA::tk_boolean,


                    0U,


                13,
                ACE_NTOHL (0x656d6974), 
                ACE_NTOHL (0x735f6576), 
                ACE_NTOHL (0x656e7473), 
                ACE_NTOHL (0x0),  // name = emits_events
                                CORBA::tk_alias, // typecode kind for typedefs
                668, // encapsulation length
                  TAO_ENCAP_BYTE_ORDER, // byte order
                  58,
                  ACE_NTOHL (0x49444c3a), 
                  ACE_NTOHL (0x6f6d672e), 
                  ACE_NTOHL (0x6f72672f), 
                  ACE_NTOHL (0x434f5242), 
                  ACE_NTOHL (0x412f436f), 
                  ACE_NTOHL (0x6d706f6e), 
                  ACE_NTOHL (0x656e7449), 
                  ACE_NTOHL (0x522f4576), 
                  ACE_NTOHL (0x656e7450), 
                  ACE_NTOHL (0x6f727444), 
                  ACE_NTOHL (0x65736372), 
                  ACE_NTOHL (0x69707469), 
                  ACE_NTOHL (0x6f6e5365), 
                  ACE_NTOHL (0x713a312e), 
                  ACE_NTOHL (0x30000000),  // repository ID = IDL:omg.org/CORBA/ComponentIR/EventPortDescriptionSeq:1.0
                                    24,
                  ACE_NTOHL (0x4576656e), 
                  ACE_NTOHL (0x74506f72), 
                  ACE_NTOHL (0x74446573), 
                  ACE_NTOHL (0x63726970), 
                  ACE_NTOHL (0x74696f6e), 
                  ACE_NTOHL (0x53657100),  // name = EventPortDescriptionSeq
                                    CORBA::tk_sequence, // typecode kind
                  564, // encapsulation length
                    TAO_ENCAP_BYTE_ORDER, // byte order
                    CORBA::tk_struct, // typecode kind
                    548, // encapsulation length
                      TAO_ENCAP_BYTE_ORDER, // byte order
                      55,
                      ACE_NTOHL (0x49444c3a), 
                      ACE_NTOHL (0x6f6d672e), 
                      ACE_NTOHL (0x6f72672f), 
                      ACE_NTOHL (0x434f5242), 
                      ACE_NTOHL (0x412f436f), 
                      ACE_NTOHL (0x6d706f6e), 
                      ACE_NTOHL (0x656e7449), 
                      ACE_NTOHL (0x522f4576), 
                      ACE_NTOHL (0x656e7450), 
                      ACE_NTOHL (0x6f727444), 
                      ACE_NTOHL (0x65736372), 
                      ACE_NTOHL (0x69707469), 
                      ACE_NTOHL (0x6f6e3a31), 
                      ACE_NTOHL (0x2e300000),  // repository ID = IDL:omg.org/CORBA/ComponentIR/EventPortDescription:1.0
                                            21,
                      ACE_NTOHL (0x4576656e), 
                      ACE_NTOHL (0x74506f72), 
                      ACE_NTOHL (0x74446573), 
                      ACE_NTOHL (0x63726970), 
                      ACE_NTOHL (0x74696f6e), 
                      ACE_NTOHL (0x0),  // name = EventPortDescription
                      5, // member count
                                            5,
                      ACE_NTOHL (0x6e616d65), 
                      ACE_NTOHL (0x0),  // name = name
                                            CORBA::tk_alias, // typecode kind for typedefs
                      68, // encapsulation length
                        TAO_ENCAP_BYTE_ORDER, // byte order
                        33,
                        ACE_NTOHL (0x49444c3a), 
                        ACE_NTOHL (0x6f6d672e), 
                        ACE_NTOHL (0x6f72672f), 
                        ACE_NTOHL (0x434f5242), 
                        ACE_NTOHL (0x412f4964), 
                        ACE_NTOHL (0x656e7469), 
                        ACE_NTOHL (0x66696572), 
                        ACE_NTOHL (0x3a312e30), 
                        ACE_NTOHL (0x0),  // repository ID = IDL:omg.org/CORBA/Identifier:1.0
                                                11,
                        ACE_NTOHL (0x4964656e), 
                        ACE_NTOHL (0x74696669), 
                        ACE_NTOHL (0x65720000),  // name = Identifier
                                                CORBA::tk_string, 
                        0U, // string length

                      3,
                      ACE_NTOHL (0x69640000),  // name = id
                                            CORBA::tk_alias, // typecode kind for typedefs
                      72, // encapsulation length
                        TAO_ENCAP_BYTE_ORDER, // byte order
                        35,
                        ACE_NTOHL (0x49444c3a), 
                        ACE_NTOHL (0x6f6d672e), 
                        ACE_NTOHL (0x6f72672f), 
                        ACE_NTOHL (0x434f5242), 
                        ACE_NTOHL (0x412f5265), 
                        ACE_NTOHL (0x706f7369), 
                        ACE_NTOHL (0x746f7279), 
                        ACE_NTOHL (0x49643a31), 
                        ACE_NTOHL (0x2e300000),  // repository ID = IDL:omg.org/CORBA/RepositoryId:1.0
                                                13,
                        ACE_NTOHL (0x5265706f), 
                        ACE_NTOHL (0x7369746f), 
                        ACE_NTOHL (0x72794964), 
                        ACE_NTOHL (0x0),  // name = RepositoryId
                                                CORBA::tk_string, 
                        0U, // string length

                      11,
                      ACE_NTOHL (0x64656669), 
                      ACE_NTOHL (0x6e65645f), 
                      ACE_NTOHL (0x696e0000),  // name = defined_in
                                            CORBA::tk_alias, // typecode kind for typedefs
                      72, // encapsulation length
                        TAO_ENCAP_BYTE_ORDER, // byte order
                        35,
                        ACE_NTOHL (0x49444c3a), 
                        ACE_NTOHL (0x6f6d672e), 
                        ACE_NTOHL (0x6f72672f), 
                        ACE_NTOHL (0x434f5242), 
                        ACE_NTOHL (0x412f5265), 
                        ACE_NTOHL (0x706f7369), 
                        ACE_NTOHL (0x746f7279), 
                        ACE_NTOHL (0x49643a31), 
                        ACE_NTOHL (0x2e300000),  // repository ID = IDL:omg.org/CORBA/RepositoryId:1.0
                                                13,
                        ACE_NTOHL (0x5265706f), 
                        ACE_NTOHL (0x7369746f), 
                        ACE_NTOHL (0x72794964), 
                        ACE_NTOHL (0x0),  // name = RepositoryId
                                                CORBA::tk_string, 
                        0U, // string length

                      8,
                      ACE_NTOHL (0x76657273), 
                      ACE_NTOHL (0x696f6e00),  // name = version
                                            CORBA::tk_alias, // typecode kind for typedefs
                      68, // encapsulation length
                        TAO_ENCAP_BYTE_ORDER, // byte order
                        34,
                        ACE_NTOHL (0x49444c3a), 
                        ACE_NTOHL (0x6f6d672e), 
                        ACE_NTOHL (0x6f72672f), 
                        ACE_NTOHL (0x434f5242), 
                        ACE_NTOHL (0x412f5665), 
                        ACE_NTOHL (0x7273696f), 
                        ACE_NTOHL (0x6e537065), 
                        ACE_NTOHL (0x633a312e), 
                        ACE_NTOHL (0x30000000),  // repository ID = IDL:omg.org/CORBA/VersionSpec:1.0
                                                12,
                        ACE_NTOHL (0x56657273), 
                        ACE_NTOHL (0x696f6e53), 
                        ACE_NTOHL (0x70656300),  // name = VersionSpec
                                                CORBA::tk_string, 
                        0U, // string length

                      6,
                      ACE_NTOHL (0x6576656e), 
                      ACE_NTOHL (0x74000000),  // name = event
                                            CORBA::tk_alias, // typecode kind for typedefs
                      72, // encapsulation length
                        TAO_ENCAP_BYTE_ORDER, // byte order
                        35,
                        ACE_NTOHL (0x49444c3a), 
                        ACE_NTOHL (0x6f6d672e), 
                        ACE_NTOHL (0x6f72672f), 
                        ACE_NTOHL (0x434f5242), 
                        ACE_NTOHL (0x412f5265), 
                        ACE_NTOHL (0x706f7369), 
                        ACE_NTOHL (0x746f7279), 
                        ACE_NTOHL (0x49643a31), 
                        ACE_NTOHL (0x2e300000),  // repository ID = IDL:omg.org/CORBA/RepositoryId:1.0
                                                13,
                        ACE_NTOHL (0x5265706f), 
                        ACE_NTOHL (0x7369746f), 
                        ACE_NTOHL (0x72794964), 
                        ACE_NTOHL (0x0),  // name = RepositoryId
                                                CORBA::tk_string, 
                        0U, // string length


                    0U,


                17,
                ACE_NTOHL (0x7075626c), 
                ACE_NTOHL (0x69736865), 
                ACE_NTOHL (0x735f6576), 
                ACE_NTOHL (0x656e7473), 
                ACE_NTOHL (0x0),  // name = publishes_events
                                CORBA::tk_alias, // typecode kind for typedefs
                668, // encapsulation length
                  TAO_ENCAP_BYTE_ORDER, // byte order
                  58,
                  ACE_NTOHL (0x49444c3a), 
                  ACE_NTOHL (0x6f6d672e), 
                  ACE_NTOHL (0x6f72672f), 
                  ACE_NTOHL (0x434f5242), 
                  ACE_NTOHL (0x412f436f), 
                  ACE_NTOHL (0x6d706f6e), 
                  ACE_NTOHL (0x656e7449), 
                  ACE_NTOHL (0x522f4576), 
                  ACE_NTOHL (0x656e7450), 
                  ACE_NTOHL (0x6f727444), 
                  ACE_NTOHL (0x65736372), 
                  ACE_NTOHL (0x69707469), 
                  ACE_NTOHL (0x6f6e5365), 
                  ACE_NTOHL (0x713a312e), 
                  ACE_NTOHL (0x30000000),  // repository ID = IDL:omg.org/CORBA/ComponentIR/EventPortDescriptionSeq:1.0
                                    24,
                  ACE_NTOHL (0x4576656e), 
                  ACE_NTOHL (0x74506f72), 
                  ACE_NTOHL (0x74446573), 
                  ACE_NTOHL (0x63726970), 
                  ACE_NTOHL (0x74696f6e), 
                  ACE_NTOHL (0x53657100),  // name = EventPortDescriptionSeq
                                    CORBA::tk_sequence, // typecode kind
                  564, // encapsulation length
                    TAO_ENCAP_BYTE_ORDER, // byte order
                    CORBA::tk_struct, // typecode kind
                    548, // encapsulation length
                      TAO_ENCAP_BYTE_ORDER, // byte order
                      55,
                      ACE_NTOHL (0x49444c3a), 
                      ACE_NTOHL (0x6f6d672e), 
                      ACE_NTOHL (0x6f72672f), 
                      ACE_NTOHL (0x434f5242), 
                      ACE_NTOHL (0x412f436f), 
                      ACE_NTOHL (0x6d706f6e), 
                      ACE_NTOHL (0x656e7449), 
                      ACE_NTOHL (0x522f4576), 
                      ACE_NTOHL (0x656e7450), 
                      ACE_NTOHL (0x6f727444), 
                      ACE_NTOHL (0x65736372), 
                      ACE_NTOHL (0x69707469), 
                      ACE_NTOHL (0x6f6e3a31), 
                      ACE_NTOHL (0x2e300000),  // repository ID = IDL:omg.org/CORBA/ComponentIR/EventPortDescription:1.0
                                            21,
                      ACE_NTOHL (0x4576656e), 
                      ACE_NTOHL (0x74506f72), 
                      ACE_NTOHL (0x74446573), 
                      ACE_NTOHL (0x63726970), 
                      ACE_NTOHL (0x74696f6e), 
                      ACE_NTOHL (0x0),  // name = EventPortDescription
                      5, // member count
                                            5,
                      ACE_NTOHL (0x6e616d65), 
                      ACE_NTOHL (0x0),  // name = name
                                            CORBA::tk_alias, // typecode kind for typedefs
                      68, // encapsulation length
                        TAO_ENCAP_BYTE_ORDER, // byte order
                        33,
                        ACE_NTOHL (0x49444c3a), 
                        ACE_NTOHL (0x6f6d672e), 
                        ACE_NTOHL (0x6f72672f), 
                        ACE_NTOHL (0x434f5242), 
                        ACE_NTOHL (0x412f4964), 
                        ACE_NTOHL (0x656e7469), 
                        ACE_NTOHL (0x66696572), 
                        ACE_NTOHL (0x3a312e30), 
                        ACE_NTOHL (0x0),  // repository ID = IDL:omg.org/CORBA/Identifier:1.0
                                                11,
                        ACE_NTOHL (0x4964656e), 
                        ACE_NTOHL (0x74696669), 
                        ACE_NTOHL (0x65720000),  // name = Identifier
                                                CORBA::tk_string, 
                        0U, // string length

                      3,
                      ACE_NTOHL (0x69640000),  // name = id
                                            CORBA::tk_alias, // typecode kind for typedefs
                      72, // encapsulation length
                        TAO_ENCAP_BYTE_ORDER, // byte order
                        35,
                        ACE_NTOHL (0x49444c3a), 
                        ACE_NTOHL (0x6f6d672e), 
                        ACE_NTOHL (0x6f72672f), 
                        ACE_NTOHL (0x434f5242), 
                        ACE_NTOHL (0x412f5265), 
                        ACE_NTOHL (0x706f7369), 
                        ACE_NTOHL (0x746f7279), 
                        ACE_NTOHL (0x49643a31), 
                        ACE_NTOHL (0x2e300000),  // repository ID = IDL:omg.org/CORBA/RepositoryId:1.0
                                                13,
                        ACE_NTOHL (0x5265706f), 
                        ACE_NTOHL (0x7369746f), 
                        ACE_NTOHL (0x72794964), 
                        ACE_NTOHL (0x0),  // name = RepositoryId
                                                CORBA::tk_string, 
                        0U, // string length

                      11,
                      ACE_NTOHL (0x64656669), 
                      ACE_NTOHL (0x6e65645f), 
                      ACE_NTOHL (0x696e0000),  // name = defined_in
                                            CORBA::tk_alias, // typecode kind for typedefs
                      72, // encapsulation length
                        TAO_ENCAP_BYTE_ORDER, // byte order
                        35,
                        ACE_NTOHL (0x49444c3a), 
                        ACE_NTOHL (0x6f6d672e), 
                        ACE_NTOHL (0x6f72672f), 
                        ACE_NTOHL (0x434f5242), 
                        ACE_NTOHL (0x412f5265), 
                        ACE_NTOHL (0x706f7369), 
                        ACE_NTOHL (0x746f7279), 
                        ACE_NTOHL (0x49643a31), 
                        ACE_NTOHL (0x2e300000),  // repository ID = IDL:omg.org/CORBA/RepositoryId:1.0
                                                13,
                        ACE_NTOHL (0x5265706f), 
                        ACE_NTOHL (0x7369746f), 
                        ACE_NTOHL (0x72794964), 
                        ACE_NTOHL (0x0),  // name = RepositoryId
                                                CORBA::tk_string, 
                        0U, // string length

                      8,
                      ACE_NTOHL (0x76657273), 
                      ACE_NTOHL (0x696f6e00),  // name = version
                                            CORBA::tk_alias, // typecode kind for typedefs
                      68, // encapsulation length
                        TAO_ENCAP_BYTE_ORDER, // byte order
                        34,
                        ACE_NTOHL (0x49444c3a), 
                        ACE_NTOHL (0x6f6d672e), 
                        ACE_NTOHL (0x6f72672f), 
                        ACE_NTOHL (0x434f5242), 
                        ACE_NTOHL (0x412f5665), 
                        ACE_NTOHL (0x7273696f), 
                        ACE_NTOHL (0x6e537065), 
                        ACE_NTOHL (0x633a312e), 
                        ACE_NTOHL (0x30000000),  // repository ID = IDL:omg.org/CORBA/VersionSpec:1.0
                                                12,
                        ACE_NTOHL (0x56657273), 
                        ACE_NTOHL (0x696f6e53), 
                        ACE_NTOHL (0x70656300),  // name = VersionSpec
                                                CORBA::tk_string, 
                        0U, // string length

                      6,
                      ACE_NTOHL (0x6576656e), 
                      ACE_NTOHL (0x74000000),  // name = event
                                            CORBA::tk_alias, // typecode kind for typedefs
                      72, // encapsulation length
                        TAO_ENCAP_BYTE_ORDER, // byte order
                        35,
                        ACE_NTOHL (0x49444c3a), 
                        ACE_NTOHL (0x6f6d672e), 
                        ACE_NTOHL (0x6f72672f), 
                        ACE_NTOHL (0x434f5242), 
                        ACE_NTOHL (0x412f5265), 
                        ACE_NTOHL (0x706f7369), 
                        ACE_NTOHL (0x746f7279), 
                        ACE_NTOHL (0x49643a31), 
                        ACE_NTOHL (0x2e300000),  // repository ID = IDL:omg.org/CORBA/RepositoryId:1.0
                                                13,
                        ACE_NTOHL (0x5265706f), 
                        ACE_NTOHL (0x7369746f), 
                        ACE_NTOHL (0x72794964), 
                        ACE_NTOHL (0x0),  // name = RepositoryId
                                                CORBA::tk_string, 
                        0U, // string length


                    0U,


                16,
                ACE_NTOHL (0x636f6e73), 
                ACE_NTOHL (0x756d6573), 
                ACE_NTOHL (0x5f657665), 
                ACE_NTOHL (0x6e747300),  // name = consumes_events
                                CORBA::tk_alias, // typecode kind for typedefs
                668, // encapsulation length
                  TAO_ENCAP_BYTE_ORDER, // byte order
                  58,
                  ACE_NTOHL (0x49444c3a), 
                  ACE_NTOHL (0x6f6d672e), 
                  ACE_NTOHL (0x6f72672f), 
                  ACE_NTOHL (0x434f5242), 
                  ACE_NTOHL (0x412f436f), 
                  ACE_NTOHL (0x6d706f6e), 
                  ACE_NTOHL (0x656e7449), 
                  ACE_NTOHL (0x522f4576), 
                  ACE_NTOHL (0x656e7450), 
                  ACE_NTOHL (0x6f727444), 
                  ACE_NTOHL (0x65736372), 
                  ACE_NTOHL (0x69707469), 
                  ACE_NTOHL (0x6f6e5365), 
                  ACE_NTOHL (0x713a312e), 
                  ACE_NTOHL (0x30000000),  // repository ID = IDL:omg.org/CORBA/ComponentIR/EventPortDescriptionSeq:1.0
                                    24,
                  ACE_NTOHL (0x4576656e), 
                  ACE_NTOHL (0x74506f72), 
                  ACE_NTOHL (0x74446573), 
                  ACE_NTOHL (0x63726970), 
                  ACE_NTOHL (0x74696f6e), 
                  ACE_NTOHL (0x53657100),  // name = EventPortDescriptionSeq
                                    CORBA::tk_sequence, // typecode kind
                  564, // encapsulation length
                    TAO_ENCAP_BYTE_ORDER, // byte order
                    CORBA::tk_struct, // typecode kind
                    548, // encapsulation length
                      TAO_ENCAP_BYTE_ORDER, // byte order
                      55,
                      ACE_NTOHL (0x49444c3a), 
                      ACE_NTOHL (0x6f6d672e), 
                      ACE_NTOHL (0x6f72672f), 
                      ACE_NTOHL (0x434f5242), 
                      ACE_NTOHL (0x412f436f), 
                      ACE_NTOHL (0x6d706f6e), 
                      ACE_NTOHL (0x656e7449), 
                      ACE_NTOHL (0x522f4576), 
                      ACE_NTOHL (0x656e7450), 
                      ACE_NTOHL (0x6f727444), 
                      ACE_NTOHL (0x65736372), 
                      ACE_NTOHL (0x69707469), 
                      ACE_NTOHL (0x6f6e3a31), 
                      ACE_NTOHL (0x2e300000),  // repository ID = IDL:omg.org/CORBA/ComponentIR/EventPortDescription:1.0
                                            21,
                      ACE_NTOHL (0x4576656e), 
                      ACE_NTOHL (0x74506f72), 
                      ACE_NTOHL (0x74446573), 
                      ACE_NTOHL (0x63726970), 
                      ACE_NTOHL (0x74696f6e), 
                      ACE_NTOHL (0x0),  // name = EventPortDescription
                      5, // member count
                                            5,
                      ACE_NTOHL (0x6e616d65), 
                      ACE_NTOHL (0x0),  // name = name
                                            CORBA::tk_alias, // typecode kind for typedefs
                      68, // encapsulation length
                        TAO_ENCAP_BYTE_ORDER, // byte order
                        33,
                        ACE_NTOHL (0x49444c3a), 
                        ACE_NTOHL (0x6f6d672e), 
                        ACE_NTOHL (0x6f72672f), 
                        ACE_NTOHL (0x434f5242), 
                        ACE_NTOHL (0x412f4964), 
                        ACE_NTOHL (0x656e7469), 
                        ACE_NTOHL (0x66696572), 
                        ACE_NTOHL (0x3a312e30), 
                        ACE_NTOHL (0x0),  // repository ID = IDL:omg.org/CORBA/Identifier:1.0
                                                11,
                        ACE_NTOHL (0x4964656e), 
                        ACE_NTOHL (0x74696669), 
                        ACE_NTOHL (0x65720000),  // name = Identifier
                                                CORBA::tk_string, 
                        0U, // string length

                      3,
                      ACE_NTOHL (0x69640000),  // name = id
                                            CORBA::tk_alias, // typecode kind for typedefs
                      72, // encapsulation length
                        TAO_ENCAP_BYTE_ORDER, // byte order
                        35,
                        ACE_NTOHL (0x49444c3a), 
                        ACE_NTOHL (0x6f6d672e), 
                        ACE_NTOHL (0x6f72672f), 
                        ACE_NTOHL (0x434f5242), 
                        ACE_NTOHL (0x412f5265), 
                        ACE_NTOHL (0x706f7369), 
                        ACE_NTOHL (0x746f7279), 
                        ACE_NTOHL (0x49643a31), 
                        ACE_NTOHL (0x2e300000),  // repository ID = IDL:omg.org/CORBA/RepositoryId:1.0
                                                13,
                        ACE_NTOHL (0x5265706f), 
                        ACE_NTOHL (0x7369746f), 
                        ACE_NTOHL (0x72794964), 
                        ACE_NTOHL (0x0),  // name = RepositoryId
                                                CORBA::tk_string, 
                        0U, // string length

                      11,
                      ACE_NTOHL (0x64656669), 
                      ACE_NTOHL (0x6e65645f), 
                      ACE_NTOHL (0x696e0000),  // name = defined_in
                                            CORBA::tk_alias, // typecode kind for typedefs
                      72, // encapsulation length
                        TAO_ENCAP_BYTE_ORDER, // byte order
                        35,
                        ACE_NTOHL (0x49444c3a), 
                        ACE_NTOHL (0x6f6d672e), 
                        ACE_NTOHL (0x6f72672f), 
                        ACE_NTOHL (0x434f5242), 
                        ACE_NTOHL (0x412f5265), 
                        ACE_NTOHL (0x706f7369), 
                        ACE_NTOHL (0x746f7279), 
                        ACE_NTOHL (0x49643a31), 
                        ACE_NTOHL (0x2e300000),  // repository ID = IDL:omg.org/CORBA/RepositoryId:1.0
                                                13,
                        ACE_NTOHL (0x5265706f), 
                        ACE_NTOHL (0x7369746f), 
                        ACE_NTOHL (0x72794964), 
                        ACE_NTOHL (0x0),  // name = RepositoryId
                                                CORBA::tk_string, 
                        0U, // string length

                      8,
                      ACE_NTOHL (0x76657273), 
                      ACE_NTOHL (0x696f6e00),  // name = version
                                            CORBA::tk_alias, // typecode kind for typedefs
                      68, // encapsulation length
                        TAO_ENCAP_BYTE_ORDER, // byte order
                        34,
                        ACE_NTOHL (0x49444c3a), 
                        ACE_NTOHL (0x6f6d672e), 
                        ACE_NTOHL (0x6f72672f), 
                        ACE_NTOHL (0x434f5242), 
                        ACE_NTOHL (0x412f5665), 
                        ACE_NTOHL (0x7273696f), 
                        ACE_NTOHL (0x6e537065), 
                        ACE_NTOHL (0x633a312e), 
                        ACE_NTOHL (0x30000000),  // repository ID = IDL:omg.org/CORBA/VersionSpec:1.0
                                                12,
                        ACE_NTOHL (0x56657273), 
                        ACE_NTOHL (0x696f6e53), 
                        ACE_NTOHL (0x70656300),  // name = VersionSpec
                                                CORBA::tk_string, 
                        0U, // string length

                      6,
                      ACE_NTOHL (0x6576656e), 
                      ACE_NTOHL (0x74000000),  // name = event
                                            CORBA::tk_alias, // typecode kind for typedefs
                      72, // encapsulation length
                        TAO_ENCAP_BYTE_ORDER, // byte order
                        35,
                        ACE_NTOHL (0x49444c3a), 
                        ACE_NTOHL (0x6f6d672e), 
                        ACE_NTOHL (0x6f72672f), 
                        ACE_NTOHL (0x434f5242), 
                        ACE_NTOHL (0x412f5265), 
                        ACE_NTOHL (0x706f7369), 
                        ACE_NTOHL (0x746f7279), 
                        ACE_NTOHL (0x49643a31), 
                        ACE_NTOHL (0x2e300000),  // repository ID = IDL:omg.org/CORBA/RepositoryId:1.0
                                                13,
                        ACE_NTOHL (0x5265706f), 
                        ACE_NTOHL (0x7369746f), 
                        ACE_NTOHL (0x72794964), 
                        ACE_NTOHL (0x0),  // name = RepositoryId
                                                CORBA::tk_string, 
                        0U, // string length


                    0U,


                11,
                ACE_NTOHL (0x61747472), 
                ACE_NTOHL (0x69627574), 
                ACE_NTOHL (0x65730000),  // name = attributes
                                CORBA::tk_alias, // typecode kind for typedefs
                1860, // encapsulation length
                  TAO_ENCAP_BYTE_ORDER, // byte order
                  44,
                  ACE_NTOHL (0x49444c3a), 
                  ACE_NTOHL (0x6f6d672e), 
                  ACE_NTOHL (0x6f72672f), 
                  ACE_NTOHL (0x434f5242), 
                  ACE_NTOHL (0x412f4578), 
                  ACE_NTOHL (0x74417474), 
                  ACE_NTOHL (0x72446573), 
                  ACE_NTOHL (0x63726970), 
                  ACE_NTOHL (0x74696f6e), 
                  ACE_NTOHL (0x5365713a), 
                  ACE_NTOHL (0x312e3000),  // repository ID = IDL:omg.org/CORBA/ExtAttrDescriptionSeq:1.0
                                    22,
                  ACE_NTOHL (0x45787441), 
                  ACE_NTOHL (0x74747244), 
                  ACE_NTOHL (0x65736372), 
                  ACE_NTOHL (0x69707469), 
                  ACE_NTOHL (0x6f6e5365), 
                  ACE_NTOHL (0x71000000),  // name = ExtAttrDescriptionSeq
                                    CORBA::tk_sequence, // typecode kind
                  1772, // encapsulation length
                    TAO_ENCAP_BYTE_ORDER, // byte order
                    CORBA::tk_struct, // typecode kind
                    1756, // encapsulation length
                      TAO_ENCAP_BYTE_ORDER, // byte order
                      46,
                      ACE_NTOHL (0x49444c3a), 
                      ACE_NTOHL (0x6f6d672e), 
                      ACE_NTOHL (0x6f72672f), 
                      ACE_NTOHL (0x434f5242), 
                      ACE_NTOHL (0x412f4578), 
                      ACE_NTOHL (0x74417474), 
                      ACE_NTOHL (0x72696275), 
                      ACE_NTOHL (0x74654465), 
                      ACE_NTOHL (0x73637269), 
                      ACE_NTOHL (0x7074696f), 
                      ACE_NTOHL (0x6e3a312e), 
                      ACE_NTOHL (0x30000000),  // repository ID = IDL:omg.org/CORBA/ExtAttributeDescription:1.0
                                            24,
                      ACE_NTOHL (0x45787441), 
                      ACE_NTOHL (0x74747269), 
                      ACE_NTOHL (0x62757465), 
                      ACE_NTOHL (0x44657363), 
                      ACE_NTOHL (0x72697074), 
                      ACE_NTOHL (0x696f6e00),  // name = ExtAttributeDescription
                      8, // member count
                                            5,
                      ACE_NTOHL (0x6e616d65), 
                      ACE_NTOHL (0x0),  // name = name
                                            CORBA::tk_alias, // typecode kind for typedefs
                      68, // encapsulation length
                        TAO_ENCAP_BYTE_ORDER, // byte order
                        33,
                        ACE_NTOHL (0x49444c3a), 
                        ACE_NTOHL (0x6f6d672e), 
                        ACE_NTOHL (0x6f72672f), 
                        ACE_NTOHL (0x434f5242), 
                        ACE_NTOHL (0x412f4964), 
                        ACE_NTOHL (0x656e7469), 
                        ACE_NTOHL (0x66696572), 
                        ACE_NTOHL (0x3a312e30), 
                        ACE_NTOHL (0x0),  // repository ID = IDL:omg.org/CORBA/Identifier:1.0
                                                11,
                        ACE_NTOHL (0x4964656e), 
                        ACE_NTOHL (0x74696669), 
                        ACE_NTOHL (0x65720000),  // name = Identifier
                                                CORBA::tk_string, 
                        0U, // string length

                      3,
                      ACE_NTOHL (0x69640000),  // name = id
                                            CORBA::tk_alias, // typecode kind for typedefs
                      72, // encapsulation length
                        TAO_ENCAP_BYTE_ORDER, // byte order
                        35,
                        ACE_NTOHL (0x49444c3a), 
                        ACE_NTOHL (0x6f6d672e), 
                        ACE_NTOHL (0x6f72672f), 
                        ACE_NTOHL (0x434f5242), 
                        ACE_NTOHL (0x412f5265), 
                        ACE_NTOHL (0x706f7369), 
                        ACE_NTOHL (0x746f7279), 
                        ACE_NTOHL (0x49643a31), 
                        ACE_NTOHL (0x2e300000),  // repository ID = IDL:omg.org/CORBA/RepositoryId:1.0
                                                13,
                        ACE_NTOHL (0x5265706f), 
                        ACE_NTOHL (0x7369746f), 
                        ACE_NTOHL (0x72794964), 
                        ACE_NTOHL (0x0),  // name = RepositoryId
                                                CORBA::tk_string, 
                        0U, // string length

                      11,
                      ACE_NTOHL (0x64656669), 
                      ACE_NTOHL (0x6e65645f), 
                      ACE_NTOHL (0x696e0000),  // name = defined_in
                                            CORBA::tk_alias, // typecode kind for typedefs
                      72, // encapsulation length
                        TAO_ENCAP_BYTE_ORDER, // byte order
                        35,
                        ACE_NTOHL (0x49444c3a), 
                        ACE_NTOHL (0x6f6d672e), 
                        ACE_NTOHL (0x6f72672f), 
                        ACE_NTOHL (0x434f5242), 
                        ACE_NTOHL (0x412f5265), 
                        ACE_NTOHL (0x706f7369), 
                        ACE_NTOHL (0x746f7279), 
                        ACE_NTOHL (0x49643a31), 
                        ACE_NTOHL (0x2e300000),  // repository ID = IDL:omg.org/CORBA/RepositoryId:1.0
                                                13,
                        ACE_NTOHL (0x5265706f), 
                        ACE_NTOHL (0x7369746f), 
                        ACE_NTOHL (0x72794964), 
                        ACE_NTOHL (0x0),  // name = RepositoryId
                                                CORBA::tk_string, 
                        0U, // string length

                      8,
                      ACE_NTOHL (0x76657273), 
                      ACE_NTOHL (0x696f6e00),  // name = version
                                            CORBA::tk_alias, // typecode kind for typedefs
                      68, // encapsulation length
                        TAO_ENCAP_BYTE_ORDER, // byte order
                        34,
                        ACE_NTOHL (0x49444c3a), 
                        ACE_NTOHL (0x6f6d672e), 
                        ACE_NTOHL (0x6f72672f), 
                        ACE_NTOHL (0x434f5242), 
                        ACE_NTOHL (0x412f5665), 
                        ACE_NTOHL (0x7273696f), 
                        ACE_NTOHL (0x6e537065), 
                        ACE_NTOHL (0x633a312e), 
                        ACE_NTOHL (0x30000000),  // repository ID = IDL:omg.org/CORBA/VersionSpec:1.0
                                                12,
                        ACE_NTOHL (0x56657273), 
                        ACE_NTOHL (0x696f6e53), 
                        ACE_NTOHL (0x70656300),  // name = VersionSpec
                                                CORBA::tk_string, 
                        0U, // string length

                      5,
                      ACE_NTOHL (0x74797065), 
                      ACE_NTOHL (0x0),  // name = type
                                            CORBA::tk_TypeCode,

                      5,
                      ACE_NTOHL (0x6d6f6465), 
                      ACE_NTOHL (0x0),  // name = mode
                                            CORBA::tk_enum, // typecode kind
                      104, // encapsulation length
TAO_ENCAP_BYTE_ORDER, // byte order
                        36,
                        ACE_NTOHL (0x49444c3a), 
                        ACE_NTOHL (0x6f6d672e), 
                        ACE_NTOHL (0x6f72672f), 
                        ACE_NTOHL (0x434f5242), 
                        ACE_NTOHL (0x412f4174), 
                        ACE_NTOHL (0x74726962), 
                        ACE_NTOHL (0x7574654d), 
                        ACE_NTOHL (0x6f64653a), 
                        ACE_NTOHL (0x312e3000),  // repository ID = IDL:omg.org/CORBA/AttributeMode:1.0
                        14,
                        ACE_NTOHL (0x41747472), 
                        ACE_NTOHL (0x69627574), 
                        ACE_NTOHL (0x654d6f64), 
                        ACE_NTOHL (0x65000000),  // name = AttributeMode
                        2, // member count
                        12,
                        ACE_NTOHL (0x41545452), 
                        ACE_NTOHL (0x5f4e4f52), 
                        ACE_NTOHL (0x4d414c00),  // name = ATTR_NORMAL
                        14,
                        ACE_NTOHL (0x41545452), 
                        ACE_NTOHL (0x5f524541), 
                        ACE_NTOHL (0x444f4e4c), 
                        ACE_NTOHL (0x59000000),  // name = ATTR_READONLY
                        
                      15,
                      ACE_NTOHL (0x6765745f), 
                      ACE_NTOHL (0x65786365), 
                      ACE_NTOHL (0x7074696f), 
                      ACE_NTOHL (0x6e730000),  // name = get_exceptions
                                            CORBA::tk_alias, // typecode kind for typedefs
                      556, // encapsulation length
                        TAO_ENCAP_BYTE_ORDER, // byte order
                        40,
                        ACE_NTOHL (0x49444c3a), 
                        ACE_NTOHL (0x6f6d672e), 
                        ACE_NTOHL (0x6f72672f), 
                        ACE_NTOHL (0x434f5242), 
                        ACE_NTOHL (0x412f4578), 
                        ACE_NTOHL (0x63446573), 
                        ACE_NTOHL (0x63726970), 
                        ACE_NTOHL (0x74696f6e), 
                        ACE_NTOHL (0x5365713a), 
                        ACE_NTOHL (0x312e3000),  // repository ID = IDL:omg.org/CORBA/ExcDescriptionSeq:1.0
                                                18,
                        ACE_NTOHL (0x45786344), 
                        ACE_NTOHL (0x65736372), 
                        ACE_NTOHL (0x69707469), 
                        ACE_NTOHL (0x6f6e5365), 
                        ACE_NTOHL (0x71000000),  // name = ExcDescriptionSeq
                                                CORBA::tk_sequence, // typecode kind
                        476, // encapsulation length
                          TAO_ENCAP_BYTE_ORDER, // byte order
                          CORBA::tk_struct, // typecode kind
                          460, // encapsulation length
                            TAO_ENCAP_BYTE_ORDER, // byte order
                            43,
                            ACE_NTOHL (0x49444c3a), 
                            ACE_NTOHL (0x6f6d672e), 
                            ACE_NTOHL (0x6f72672f), 
                            ACE_NTOHL (0x434f5242), 
                            ACE_NTOHL (0x412f4578), 
                            ACE_NTOHL (0x63657074), 
                            ACE_NTOHL (0x696f6e44), 
                            ACE_NTOHL (0x65736372), 
                            ACE_NTOHL (0x69707469), 
                            ACE_NTOHL (0x6f6e3a31), 
                            ACE_NTOHL (0x2e300000),  // repository ID = IDL:omg.org/CORBA/ExceptionDescription:1.0
                                                        21,
                            ACE_NTOHL (0x45786365), 
                            ACE_NTOHL (0x7074696f), 
                            ACE_NTOHL (0x6e446573), 
                            ACE_NTOHL (0x63726970), 
                            ACE_NTOHL (0x74696f6e), 
                            ACE_NTOHL (0x0),  // name = ExceptionDescription
                            5, // member count
                                                        5,
                            ACE_NTOHL (0x6e616d65), 
                            ACE_NTOHL (0x0),  // name = name
                                                        CORBA::tk_alias, // typecode kind for typedefs
                            68, // encapsulation length
                              TAO_ENCAP_BYTE_ORDER, // byte order
                              33,
                              ACE_NTOHL (0x49444c3a), 
                              ACE_NTOHL (0x6f6d672e), 
                              ACE_NTOHL (0x6f72672f), 
                              ACE_NTOHL (0x434f5242), 
                              ACE_NTOHL (0x412f4964), 
                              ACE_NTOHL (0x656e7469), 
                              ACE_NTOHL (0x66696572), 
                              ACE_NTOHL (0x3a312e30), 
                              ACE_NTOHL (0x0),  // repository ID = IDL:omg.org/CORBA/Identifier:1.0
                                                            11,
                              ACE_NTOHL (0x4964656e), 
                              ACE_NTOHL (0x74696669), 
                              ACE_NTOHL (0x65720000),  // name = Identifier
                                                            CORBA::tk_string, 
                              0U, // string length

                            3,
                            ACE_NTOHL (0x69640000),  // name = id
                                                        CORBA::tk_alias, // typecode kind for typedefs
                            72, // encapsulation length
                              TAO_ENCAP_BYTE_ORDER, // byte order
                              35,
                              ACE_NTOHL (0x49444c3a), 
                              ACE_NTOHL (0x6f6d672e), 
                              ACE_NTOHL (0x6f72672f), 
                              ACE_NTOHL (0x434f5242), 
                              ACE_NTOHL (0x412f5265), 
                              ACE_NTOHL (0x706f7369), 
                              ACE_NTOHL (0x746f7279), 
                              ACE_NTOHL (0x49643a31), 
                              ACE_NTOHL (0x2e300000),  // repository ID = IDL:omg.org/CORBA/RepositoryId:1.0
                                                            13,
                              ACE_NTOHL (0x5265706f), 
                              ACE_NTOHL (0x7369746f), 
                              ACE_NTOHL (0x72794964), 
                              ACE_NTOHL (0x0),  // name = RepositoryId
                                                            CORBA::tk_string, 
                              0U, // string length

                            11,
                            ACE_NTOHL (0x64656669), 
                            ACE_NTOHL (0x6e65645f), 
                            ACE_NTOHL (0x696e0000),  // name = defined_in
                                                        CORBA::tk_alias, // typecode kind for typedefs
                            72, // encapsulation length
                              TAO_ENCAP_BYTE_ORDER, // byte order
                              35,
                              ACE_NTOHL (0x49444c3a), 
                              ACE_NTOHL (0x6f6d672e), 
                              ACE_NTOHL (0x6f72672f), 
                              ACE_NTOHL (0x434f5242), 
                              ACE_NTOHL (0x412f5265), 
                              ACE_NTOHL (0x706f7369), 
                              ACE_NTOHL (0x746f7279), 
                              ACE_NTOHL (0x49643a31), 
                              ACE_NTOHL (0x2e300000),  // repository ID = IDL:omg.org/CORBA/RepositoryId:1.0
                                                            13,
                              ACE_NTOHL (0x5265706f), 
                              ACE_NTOHL (0x7369746f), 
                              ACE_NTOHL (0x72794964), 
                              ACE_NTOHL (0x0),  // name = RepositoryId
                                                            CORBA::tk_string, 
                              0U, // string length

                            8,
                            ACE_NTOHL (0x76657273), 
                            ACE_NTOHL (0x696f6e00),  // name = version
                                                        CORBA::tk_alias, // typecode kind for typedefs
                            68, // encapsulation length
                              TAO_ENCAP_BYTE_ORDER, // byte order
                              34,
                              ACE_NTOHL (0x49444c3a), 
                              ACE_NTOHL (0x6f6d672e), 
                              ACE_NTOHL (0x6f72672f), 
                              ACE_NTOHL (0x434f5242), 
                              ACE_NTOHL (0x412f5665), 
                              ACE_NTOHL (0x7273696f), 
                              ACE_NTOHL (0x6e537065), 
                              ACE_NTOHL (0x633a312e), 
                              ACE_NTOHL (0x30000000),  // repository ID = IDL:omg.org/CORBA/VersionSpec:1.0
                                                            12,
                              ACE_NTOHL (0x56657273), 
                              ACE_NTOHL (0x696f6e53), 
                              ACE_NTOHL (0x70656300),  // name = VersionSpec
                                                            CORBA::tk_string, 
                              0U, // string length

                            5,
                            ACE_NTOHL (0x74797065), 
                            ACE_NTOHL (0x0),  // name = type
                                                        CORBA::tk_TypeCode,


                          0U,


                      15,
                      ACE_NTOHL (0x7075745f), 
                      ACE_NTOHL (0x65786365), 
                      ACE_NTOHL (0x7074696f), 
                      ACE_NTOHL (0x6e730000),  // name = put_exceptions
                                            CORBA::tk_alias, // typecode kind for typedefs
                      556, // encapsulation length
                        TAO_ENCAP_BYTE_ORDER, // byte order
                        40,
                        ACE_NTOHL (0x49444c3a), 
                        ACE_NTOHL (0x6f6d672e), 
                        ACE_NTOHL (0x6f72672f), 
                        ACE_NTOHL (0x434f5242), 
                        ACE_NTOHL (0x412f4578), 
                        ACE_NTOHL (0x63446573), 
                        ACE_NTOHL (0x63726970), 
                        ACE_NTOHL (0x74696f6e), 
                        ACE_NTOHL (0x5365713a), 
                        ACE_NTOHL (0x312e3000),  // repository ID = IDL:omg.org/CORBA/ExcDescriptionSeq:1.0
                                                18,
                        ACE_NTOHL (0x45786344), 
                        ACE_NTOHL (0x65736372), 
                        ACE_NTOHL (0x69707469), 
                        ACE_NTOHL (0x6f6e5365), 
                        ACE_NTOHL (0x71000000),  // name = ExcDescriptionSeq
                                                CORBA::tk_sequence, // typecode kind
                        476, // encapsulation length
                          TAO_ENCAP_BYTE_ORDER, // byte order
                          CORBA::tk_struct, // typecode kind
                          460, // encapsulation length
                            TAO_ENCAP_BYTE_ORDER, // byte order
                            43,
                            ACE_NTOHL (0x49444c3a), 
                            ACE_NTOHL (0x6f6d672e), 
                            ACE_NTOHL (0x6f72672f), 
                            ACE_NTOHL (0x434f5242), 
                            ACE_NTOHL (0x412f4578), 
                            ACE_NTOHL (0x63657074), 
                            ACE_NTOHL (0x696f6e44), 
                            ACE_NTOHL (0x65736372), 
                            ACE_NTOHL (0x69707469), 
                            ACE_NTOHL (0x6f6e3a31), 
                            ACE_NTOHL (0x2e300000),  // repository ID = IDL:omg.org/CORBA/ExceptionDescription:1.0
                                                        21,
                            ACE_NTOHL (0x45786365), 
                            ACE_NTOHL (0x7074696f), 
                            ACE_NTOHL (0x6e446573), 
                            ACE_NTOHL (0x63726970), 
                            ACE_NTOHL (0x74696f6e), 
                            ACE_NTOHL (0x0),  // name = ExceptionDescription
                            5, // member count
                                                        5,
                            ACE_NTOHL (0x6e616d65), 
                            ACE_NTOHL (0x0),  // name = name
                                                        CORBA::tk_alias, // typecode kind for typedefs
                            68, // encapsulation length
                              TAO_ENCAP_BYTE_ORDER, // byte order
                              33,
                              ACE_NTOHL (0x49444c3a), 
                              ACE_NTOHL (0x6f6d672e), 
                              ACE_NTOHL (0x6f72672f), 
                              ACE_NTOHL (0x434f5242), 
                              ACE_NTOHL (0x412f4964), 
                              ACE_NTOHL (0x656e7469), 
                              ACE_NTOHL (0x66696572), 
                              ACE_NTOHL (0x3a312e30), 
                              ACE_NTOHL (0x0),  // repository ID = IDL:omg.org/CORBA/Identifier:1.0
                                                            11,
                              ACE_NTOHL (0x4964656e), 
                              ACE_NTOHL (0x74696669), 
                              ACE_NTOHL (0x65720000),  // name = Identifier
                                                            CORBA::tk_string, 
                              0U, // string length

                            3,
                            ACE_NTOHL (0x69640000),  // name = id
                                                        CORBA::tk_alias, // typecode kind for typedefs
                            72, // encapsulation length
                              TAO_ENCAP_BYTE_ORDER, // byte order
                              35,
                              ACE_NTOHL (0x49444c3a), 
                              ACE_NTOHL (0x6f6d672e), 
                              ACE_NTOHL (0x6f72672f), 
                              ACE_NTOHL (0x434f5242), 
                              ACE_NTOHL (0x412f5265), 
                              ACE_NTOHL (0x706f7369), 
                              ACE_NTOHL (0x746f7279), 
                              ACE_NTOHL (0x49643a31), 
                              ACE_NTOHL (0x2e300000),  // repository ID = IDL:omg.org/CORBA/RepositoryId:1.0
                                                            13,
                              ACE_NTOHL (0x5265706f), 
                              ACE_NTOHL (0x7369746f), 
                              ACE_NTOHL (0x72794964), 
                              ACE_NTOHL (0x0),  // name = RepositoryId
                                                            CORBA::tk_string, 
                              0U, // string length

                            11,
                            ACE_NTOHL (0x64656669), 
                            ACE_NTOHL (0x6e65645f), 
                            ACE_NTOHL (0x696e0000),  // name = defined_in
                                                        CORBA::tk_alias, // typecode kind for typedefs
                            72, // encapsulation length
                              TAO_ENCAP_BYTE_ORDER, // byte order
                              35,
                              ACE_NTOHL (0x49444c3a), 
                              ACE_NTOHL (0x6f6d672e), 
                              ACE_NTOHL (0x6f72672f), 
                              ACE_NTOHL (0x434f5242), 
                              ACE_NTOHL (0x412f5265), 
                              ACE_NTOHL (0x706f7369), 
                              ACE_NTOHL (0x746f7279), 
                              ACE_NTOHL (0x49643a31), 
                              ACE_NTOHL (0x2e300000),  // repository ID = IDL:omg.org/CORBA/RepositoryId:1.0
                                                            13,
                              ACE_NTOHL (0x5265706f), 
                              ACE_NTOHL (0x7369746f), 
                              ACE_NTOHL (0x72794964), 
                              ACE_NTOHL (0x0),  // name = RepositoryId
                                                            CORBA::tk_string, 
                              0U, // string length

                            8,
                            ACE_NTOHL (0x76657273), 
                            ACE_NTOHL (0x696f6e00),  // name = version
                                                        CORBA::tk_alias, // typecode kind for typedefs
                            68, // encapsulation length
                              TAO_ENCAP_BYTE_ORDER, // byte order
                              34,
                              ACE_NTOHL (0x49444c3a), 
                              ACE_NTOHL (0x6f6d672e), 
                              ACE_NTOHL (0x6f72672f), 
                              ACE_NTOHL (0x434f5242), 
                              ACE_NTOHL (0x412f5665), 
                              ACE_NTOHL (0x7273696f), 
                              ACE_NTOHL (0x6e537065), 
                              ACE_NTOHL (0x633a312e), 
                              ACE_NTOHL (0x30000000),  // repository ID = IDL:omg.org/CORBA/VersionSpec:1.0
                                                            12,
                              ACE_NTOHL (0x56657273), 
                              ACE_NTOHL (0x696f6e53), 
                              ACE_NTOHL (0x70656300),  // name = VersionSpec
                                                            CORBA::tk_string, 
                              0U, // string length

                            5,
                            ACE_NTOHL (0x74797065), 
                            ACE_NTOHL (0x0),  // name = type
                                                        CORBA::tk_TypeCode,


                          0U,



                    0U,


                5,
                ACE_NTOHL (0x74797065), 
                ACE_NTOHL (0x0),  // name = type
                                CORBA::tk_TypeCode,

};
              
              static CORBA::TypeCode _tc_TAO_tc_CORBA_ComponentIR_ComponentDescription (
                  CORBA::tk_struct,
                  sizeof (_oc_CORBA_ComponentIR_ComponentDescription),
                  (char *) &_oc_CORBA_ComponentIR_ComponentDescription,
                  0,
                  sizeof (CORBA::ComponentIR::ComponentDescription)
                );
              
              namespace CORBA
              {
                namespace ComponentIR
                {
                  ::CORBA::TypeCode_ptr _tc_ComponentDescription =
                    &_tc_TAO_tc_CORBA_ComponentIR_ComponentDescription;
                }
                }
                
                // TAO_IDL - Generated from 
                // be/be_visitor_structure/structure_cs.cpp:66
                
                void 
                CORBA::ComponentIR::ComponentDescription::_tao_any_destructor (
                    void *_tao_void_pointer
                  )
                {
                  ComponentDescription *_tao_tmp_pointer =
                    ACE_static_cast (ComponentDescription *, _tao_void_pointer);
                  delete _tao_tmp_pointer;
                }
                
                // TAO_IDL - Generated from
                // be/be_visitor_interface/interface_cs.cpp:60
                
                // Traits specializations for CORBA::ComponentIR::FactoryDef.
                
                CORBA::ComponentIR::FactoryDef_ptr
                TAO::Objref_Traits<CORBA::ComponentIR::FactoryDef>::tao_duplicate (
                    CORBA::ComponentIR::FactoryDef_ptr p
                  )
                {
                  return CORBA::ComponentIR::FactoryDef::_duplicate (p);
                }
                
                void
                TAO::Objref_Traits<CORBA::ComponentIR::FactoryDef>::tao_release (
                    CORBA::ComponentIR::FactoryDef_ptr p
                  )
                {
                  CORBA::release (p);
                }
                
                CORBA::ComponentIR::FactoryDef_ptr
                TAO::Objref_Traits<CORBA::ComponentIR::FactoryDef>::tao_nil (void)
                {
                  return CORBA::ComponentIR::FactoryDef::_nil ();
                }
                
                CORBA::Boolean
                TAO::Objref_Traits<CORBA::ComponentIR::FactoryDef>::tao_marshal (
                    CORBA::ComponentIR::FactoryDef_ptr p,
                    TAO_OutputCDR & cdr
                  )
                {
                  return p->marshal (cdr);
                }
                
                // Function pointer for collocation factory initialization.
                TAO::Collocation_Proxy_Broker * 
                (*CORBA_ComponentIR__TAO_FactoryDef_Proxy_Broker_Factory_function_pointer) (
                    CORBA::Object_ptr obj
                  ) = 0;
                
                CORBA::ComponentIR::FactoryDef::FactoryDef (int collocated)
                 : the_TAO_FactoryDef_Proxy_Broker_ (0)
                {
                  this->CORBA_ComponentIR_FactoryDef_setup_collocation (collocated);
                }
              
              void
              CORBA::ComponentIR::FactoryDef::CORBA_ComponentIR_FactoryDef_setup_collocation (int collocated)
              {
                if (collocated)
                  {
                    this->the_TAO_FactoryDef_Proxy_Broker_ =
                      ::CORBA_ComponentIR__TAO_FactoryDef_Proxy_Broker_Factory_function_pointer (this);
                  }
                
                this->CORBA_OperationDef_setup_collocation (collocated);
              }
              
              CORBA::ComponentIR::FactoryDef::~FactoryDef (void)
              {}
              
              void 
              CORBA::ComponentIR::FactoryDef::_tao_any_destructor (void *_tao_void_pointer)
              {
                FactoryDef *_tao_tmp_pointer =
                  ACE_static_cast (FactoryDef *, _tao_void_pointer);
                CORBA::release (_tao_tmp_pointer);
              }
              
              CORBA::ComponentIR::FactoryDef_ptr
              CORBA::ComponentIR::FactoryDef::_narrow (
                  CORBA::Object_ptr _tao_objref
                  ACE_ENV_ARG_DECL
                )
              {
                return
                  TAO::Narrow_Utils<FactoryDef>::narrow (
                      _tao_objref,
                      "IDL:omg.org/CORBA/ComponentIR/FactoryDef:1.0",
                      CORBA_ComponentIR__TAO_FactoryDef_Proxy_Broker_Factory_function_pointer
                      ACE_ENV_ARG_PARAMETER
                    );
              }
              
              CORBA::ComponentIR::FactoryDef_ptr
              CORBA::ComponentIR::FactoryDef::_duplicate (FactoryDef_ptr obj)
              {
                if (! CORBA::is_nil (obj))
                  {
                    obj->_add_ref ();
                  }
                
                return obj;
              }
              
              CORBA::Boolean
              CORBA::ComponentIR::FactoryDef::_is_a (
                  const char *value
                  ACE_ENV_ARG_DECL
                )
              {
                if (
                    !ACE_OS::strcmp (
                        (char *)value,
                        "IDL:omg.org/CORBA/IRObject:1.0"
                      ) ||
                    !ACE_OS::strcmp (
                        (char *)value,
                        "IDL:omg.org/CORBA/Contained:1.0"
                      ) ||
                    !ACE_OS::strcmp (
                        (char *)value,
                        "IDL:omg.org/CORBA/OperationDef:1.0"
                      ) ||
                    !ACE_OS::strcmp (
                        (char *)value,
                        "IDL:omg.org/CORBA/ComponentIR/FactoryDef:1.0"
                      ) ||
                    !ACE_OS::strcmp (
                        (char *)value,
                        "IDL:omg.org/CORBA/Object:1.0"
                      )
                   )
                  {
                    return 1; // success using local knowledge
                  }
                else
                  {
                    return this->ACE_NESTED_CLASS (CORBA, Object)::_is_a (
                        value
                        ACE_ENV_ARG_PARAMETER
                      );
                  }
              }
              
              const char* CORBA::ComponentIR::FactoryDef::_interface_repository_id (void) const
              {
                return "IDL:omg.org/CORBA/ComponentIR/FactoryDef:1.0";
              }
              
              CORBA::Boolean
              CORBA::ComponentIR::FactoryDef::marshal (TAO_OutputCDR &cdr)
              {
                return (cdr << this);
              }
              
              // TAO_IDL - Generated from
              // be/be_visitor_typecode/typecode_defn.cpp:284
              
              static const CORBA::Long _oc_CORBA_ComponentIR_FactoryDef[] =
              {
                                TAO_ENCAP_BYTE_ORDER, // byte order
                45,
                ACE_NTOHL (0x49444c3a), 
                ACE_NTOHL (0x6f6d672e), 
                ACE_NTOHL (0x6f72672f), 
                ACE_NTOHL (0x434f5242), 
                ACE_NTOHL (0x412f436f), 
                ACE_NTOHL (0x6d706f6e), 
                ACE_NTOHL (0x656e7449), 
                ACE_NTOHL (0x522f4661), 
                ACE_NTOHL (0x63746f72), 
                ACE_NTOHL (0x79446566), 
                ACE_NTOHL (0x3a312e30), 
                ACE_NTOHL (0x0),  // repository ID = IDL:omg.org/CORBA/ComponentIR/FactoryDef:1.0
                                11,
                ACE_NTOHL (0x46616374), 
                ACE_NTOHL (0x6f727944), 
                ACE_NTOHL (0x65660000),  // name = FactoryDef
                };
              
              static CORBA::TypeCode _tc_TAO_tc_CORBA_ComponentIR_FactoryDef (
                  CORBA::tk_objref,
                  sizeof (_oc_CORBA_ComponentIR_FactoryDef),
                  (char *) &_oc_CORBA_ComponentIR_FactoryDef,
                  0,
                  sizeof (CORBA::ComponentIR::FactoryDef)
                );
              
              namespace CORBA
              {
                namespace ComponentIR
                {
                  ::CORBA::TypeCode_ptr _tc_FactoryDef =
                    &_tc_TAO_tc_CORBA_ComponentIR_FactoryDef;
                }
                }
                
                // TAO_IDL - Generated from
                // be/be_visitor_interface/interface_cs.cpp:60
                
                // Traits specializations for CORBA::ComponentIR::FinderDef.
                
                CORBA::ComponentIR::FinderDef_ptr
                TAO::Objref_Traits<CORBA::ComponentIR::FinderDef>::tao_duplicate (
                    CORBA::ComponentIR::FinderDef_ptr p
                  )
                {
                  return CORBA::ComponentIR::FinderDef::_duplicate (p);
                }
                
                void
                TAO::Objref_Traits<CORBA::ComponentIR::FinderDef>::tao_release (
                    CORBA::ComponentIR::FinderDef_ptr p
                  )
                {
                  CORBA::release (p);
                }
                
                CORBA::ComponentIR::FinderDef_ptr
                TAO::Objref_Traits<CORBA::ComponentIR::FinderDef>::tao_nil (void)
                {
                  return CORBA::ComponentIR::FinderDef::_nil ();
                }
                
                CORBA::Boolean
                TAO::Objref_Traits<CORBA::ComponentIR::FinderDef>::tao_marshal (
                    CORBA::ComponentIR::FinderDef_ptr p,
                    TAO_OutputCDR & cdr
                  )
                {
                  return p->marshal (cdr);
                }
                
                // Function pointer for collocation factory initialization.
                TAO::Collocation_Proxy_Broker * 
                (*CORBA_ComponentIR__TAO_FinderDef_Proxy_Broker_Factory_function_pointer) (
                    CORBA::Object_ptr obj
                  ) = 0;
                
                CORBA::ComponentIR::FinderDef::FinderDef (int collocated)
                 : the_TAO_FinderDef_Proxy_Broker_ (0)
                {
                  this->CORBA_ComponentIR_FinderDef_setup_collocation (collocated);
                }
              
              void
              CORBA::ComponentIR::FinderDef::CORBA_ComponentIR_FinderDef_setup_collocation (int collocated)
              {
                if (collocated)
                  {
                    this->the_TAO_FinderDef_Proxy_Broker_ =
                      ::CORBA_ComponentIR__TAO_FinderDef_Proxy_Broker_Factory_function_pointer (this);
                  }
                
                this->CORBA_OperationDef_setup_collocation (collocated);
              }
              
              CORBA::ComponentIR::FinderDef::~FinderDef (void)
              {}
              
              void 
              CORBA::ComponentIR::FinderDef::_tao_any_destructor (void *_tao_void_pointer)
              {
                FinderDef *_tao_tmp_pointer =
                  ACE_static_cast (FinderDef *, _tao_void_pointer);
                CORBA::release (_tao_tmp_pointer);
              }
              
              CORBA::ComponentIR::FinderDef_ptr
              CORBA::ComponentIR::FinderDef::_narrow (
                  CORBA::Object_ptr _tao_objref
                  ACE_ENV_ARG_DECL
                )
              {
                return
                  TAO::Narrow_Utils<FinderDef>::narrow (
                      _tao_objref,
                      "IDL:omg.org/CORBA/ComponentIR/FinderDef:1.0",
                      CORBA_ComponentIR__TAO_FinderDef_Proxy_Broker_Factory_function_pointer
                      ACE_ENV_ARG_PARAMETER
                    );
              }
              
              CORBA::ComponentIR::FinderDef_ptr
              CORBA::ComponentIR::FinderDef::_duplicate (FinderDef_ptr obj)
              {
                if (! CORBA::is_nil (obj))
                  {
                    obj->_add_ref ();
                  }
                
                return obj;
              }
              
              CORBA::Boolean
              CORBA::ComponentIR::FinderDef::_is_a (
                  const char *value
                  ACE_ENV_ARG_DECL
                )
              {
                if (
                    !ACE_OS::strcmp (
                        (char *)value,
                        "IDL:omg.org/CORBA/IRObject:1.0"
                      ) ||
                    !ACE_OS::strcmp (
                        (char *)value,
                        "IDL:omg.org/CORBA/Contained:1.0"
                      ) ||
                    !ACE_OS::strcmp (
                        (char *)value,
                        "IDL:omg.org/CORBA/OperationDef:1.0"
                      ) ||
                    !ACE_OS::strcmp (
                        (char *)value,
                        "IDL:omg.org/CORBA/ComponentIR/FinderDef:1.0"
                      ) ||
                    !ACE_OS::strcmp (
                        (char *)value,
                        "IDL:omg.org/CORBA/Object:1.0"
                      )
                   )
                  {
                    return 1; // success using local knowledge
                  }
                else
                  {
                    return this->ACE_NESTED_CLASS (CORBA, Object)::_is_a (
                        value
                        ACE_ENV_ARG_PARAMETER
                      );
                  }
              }
              
              const char* CORBA::ComponentIR::FinderDef::_interface_repository_id (void) const
              {
                return "IDL:omg.org/CORBA/ComponentIR/FinderDef:1.0";
              }
              
              CORBA::Boolean
              CORBA::ComponentIR::FinderDef::marshal (TAO_OutputCDR &cdr)
              {
                return (cdr << this);
              }
              
              // TAO_IDL - Generated from
              // be/be_visitor_typecode/typecode_defn.cpp:284
              
              static const CORBA::Long _oc_CORBA_ComponentIR_FinderDef[] =
              {
                                TAO_ENCAP_BYTE_ORDER, // byte order
                44,
                ACE_NTOHL (0x49444c3a), 
                ACE_NTOHL (0x6f6d672e), 
                ACE_NTOHL (0x6f72672f), 
                ACE_NTOHL (0x434f5242), 
                ACE_NTOHL (0x412f436f), 
                ACE_NTOHL (0x6d706f6e), 
                ACE_NTOHL (0x656e7449), 
                ACE_NTOHL (0x522f4669), 
                ACE_NTOHL (0x6e646572), 
                ACE_NTOHL (0x4465663a), 
                ACE_NTOHL (0x312e3000),  // repository ID = IDL:omg.org/CORBA/ComponentIR/FinderDef:1.0
                                10,
                ACE_NTOHL (0x46696e64), 
                ACE_NTOHL (0x65724465), 
                ACE_NTOHL (0x66000000),  // name = FinderDef
                };
              
              static CORBA::TypeCode _tc_TAO_tc_CORBA_ComponentIR_FinderDef (
                  CORBA::tk_objref,
                  sizeof (_oc_CORBA_ComponentIR_FinderDef),
                  (char *) &_oc_CORBA_ComponentIR_FinderDef,
                  0,
                  sizeof (CORBA::ComponentIR::FinderDef)
                );
              
              namespace CORBA
              {
                namespace ComponentIR
                {
                  ::CORBA::TypeCode_ptr _tc_FinderDef =
                    &_tc_TAO_tc_CORBA_ComponentIR_FinderDef;
                }
                }
                
                // TAO_IDL - Generated from
                // be/be_visitor_interface/interface_cs.cpp:60
                
                // Traits specializations for CORBA::ComponentIR::HomeDef.
                
                CORBA::ComponentIR::HomeDef_ptr
                TAO::Objref_Traits<CORBA::ComponentIR::HomeDef>::tao_duplicate (
                    CORBA::ComponentIR::HomeDef_ptr p
                  )
                {
                  return CORBA::ComponentIR::HomeDef::_duplicate (p);
                }
                
                void
                TAO::Objref_Traits<CORBA::ComponentIR::HomeDef>::tao_release (
                    CORBA::ComponentIR::HomeDef_ptr p
                  )
                {
                  CORBA::release (p);
                }
                
                CORBA::ComponentIR::HomeDef_ptr
                TAO::Objref_Traits<CORBA::ComponentIR::HomeDef>::tao_nil (void)
                {
                  return CORBA::ComponentIR::HomeDef::_nil ();
                }
                
                CORBA::Boolean
                TAO::Objref_Traits<CORBA::ComponentIR::HomeDef>::tao_marshal (
                    CORBA::ComponentIR::HomeDef_ptr p,
                    TAO_OutputCDR & cdr
                  )
                {
                  return p->marshal (cdr);
                }
                
                // Function pointer for collocation factory initialization.
                TAO::Collocation_Proxy_Broker * 
                (*CORBA_ComponentIR__TAO_HomeDef_Proxy_Broker_Factory_function_pointer) (
                    CORBA::Object_ptr obj
                  ) = 0;
                
                // TAO_IDL - Generated from
                // be/be_visitor_operation/operation_cs.cpp:78
                
                ::CORBA::ComponentIR::HomeDef_ptr CORBA::ComponentIR::HomeDef::base_home (
                    ACE_ENV_SINGLE_ARG_DECL
                  )
                  ACE_THROW_SPEC ((
                    CORBA::SystemException
                  ))
                {
                  if (!this->is_evaluated ())
                    {
                      ACE_NESTED_CLASS (CORBA, Object)::tao_object_initialize (this);
                    }
                  
                  if (this->the_TAO_HomeDef_Proxy_Broker_ == 0)
                    {
                      CORBA_ComponentIR_HomeDef_setup_collocation (
                          this->ACE_NESTED_CLASS (CORBA, Object)::_is_collocated ()
                        );
                    }
                  
                  TAO::Arg_Traits<CORBA::ComponentIR::HomeDef>::ret_val _tao_retval;
                  
                  TAO::Argument *_tao_signature [] =
                    {
                      &_tao_retval
                    };
                  
                  TAO::Invocation_Adapter _tao_call (
                      this,
                      _tao_signature,
                      1,
                      "_get_base_home",
                      14,
                      this->the_TAO_HomeDef_Proxy_Broker_
                    );
                  
                  _tao_call.invoke (0, 0 ACE_ENV_ARG_PARAMETER);
                  ACE_CHECK_RETURN (_tao_retval.excp ());
                  
                  return _tao_retval.retn ();
                }
                
                // TAO_IDL - Generated from
                // be/be_visitor_operation/operation_cs.cpp:78
                
                void CORBA::ComponentIR::HomeDef::base_home (
                    CORBA::ComponentIR::HomeDef_ptr base_home
                    ACE_ENV_ARG_DECL
                  )
                  ACE_THROW_SPEC ((
                    CORBA::SystemException
                  ))
                {
                  if (!this->is_evaluated ())
                    {
                      ACE_NESTED_CLASS (CORBA, Object)::tao_object_initialize (this);
                    }
                  
                  if (this->the_TAO_HomeDef_Proxy_Broker_ == 0)
                    {
                      CORBA_ComponentIR_HomeDef_setup_collocation (
                          this->ACE_NESTED_CLASS (CORBA, Object)::_is_collocated ()
                        );
                    }
                  
                  TAO::Arg_Traits<void>::ret_val _tao_retval;
                  TAO::Arg_Traits<CORBA::ComponentIR::HomeDef>::in_arg_val _tao_base_home (base_home);
                  
                  TAO::Argument *_tao_signature [] =
                    {
                      &_tao_retval,
                      &_tao_base_home
                    };
                  
                  TAO::Invocation_Adapter _tao_call (
                      this,
                      _tao_signature,
                      2,
                      "_set_base_home",
                      14,
                      this->the_TAO_HomeDef_Proxy_Broker_
                    );
                  
                  _tao_call.invoke (0, 0 ACE_ENV_ARG_PARAMETER);
                  ACE_CHECK;
                }
                
                // TAO_IDL - Generated from
                // be/be_visitor_operation/operation_cs.cpp:78
                
                ::CORBA::InterfaceDefSeq * CORBA::ComponentIR::HomeDef::supported_interfaces (
                    ACE_ENV_SINGLE_ARG_DECL
                  )
                  ACE_THROW_SPEC ((
                    CORBA::SystemException
                  ))
                {
                  if (!this->is_evaluated ())
                    {
                      ACE_NESTED_CLASS (CORBA, Object)::tao_object_initialize (this);
                    }
                  
                  if (this->the_TAO_HomeDef_Proxy_Broker_ == 0)
                    {
                      CORBA_ComponentIR_HomeDef_setup_collocation (
                          this->ACE_NESTED_CLASS (CORBA, Object)::_is_collocated ()
                        );
                    }
                  
                  TAO::Arg_Traits<CORBA::InterfaceDefSeq>::ret_val _tao_retval;
                  
                  TAO::Argument *_tao_signature [] =
                    {
                      &_tao_retval
                    };
                  
                  TAO::Invocation_Adapter _tao_call (
                      this,
                      _tao_signature,
                      1,
                      "_get_supported_interfaces",
                      25,
                      this->the_TAO_HomeDef_Proxy_Broker_
                    );
                  
                  _tao_call.invoke (0, 0 ACE_ENV_ARG_PARAMETER);
                  ACE_CHECK_RETURN (_tao_retval.excp ());
                  
                  return _tao_retval.retn ();
                }
                
                // TAO_IDL - Generated from
                // be/be_visitor_operation/operation_cs.cpp:78
                
                void CORBA::ComponentIR::HomeDef::supported_interfaces (
                    const CORBA::InterfaceDefSeq & supported_interfaces
                    ACE_ENV_ARG_DECL
                  )
                  ACE_THROW_SPEC ((
                    CORBA::SystemException
                  ))
                {
                  if (!this->is_evaluated ())
                    {
                      ACE_NESTED_CLASS (CORBA, Object)::tao_object_initialize (this);
                    }
                  
                  if (this->the_TAO_HomeDef_Proxy_Broker_ == 0)
                    {
                      CORBA_ComponentIR_HomeDef_setup_collocation (
                          this->ACE_NESTED_CLASS (CORBA, Object)::_is_collocated ()
                        );
                    }
                  
                  TAO::Arg_Traits<void>::ret_val _tao_retval;
                  TAO::Arg_Traits<CORBA::InterfaceDefSeq>::in_arg_val _tao_supported_interfaces (supported_interfaces);
                  
                  TAO::Argument *_tao_signature [] =
                    {
                      &_tao_retval,
                      &_tao_supported_interfaces
                    };
                  
                  TAO::Invocation_Adapter _tao_call (
                      this,
                      _tao_signature,
                      2,
                      "_set_supported_interfaces",
                      25,
                      this->the_TAO_HomeDef_Proxy_Broker_
                    );
                  
                  _tao_call.invoke (0, 0 ACE_ENV_ARG_PARAMETER);
                  ACE_CHECK;
                }
                
                // TAO_IDL - Generated from
                // be/be_visitor_operation/operation_cs.cpp:78
                
                ::CORBA::ComponentIR::ComponentDef_ptr CORBA::ComponentIR::HomeDef::managed_component (
                    ACE_ENV_SINGLE_ARG_DECL
                  )
                  ACE_THROW_SPEC ((
                    CORBA::SystemException
                  ))
                {
                  if (!this->is_evaluated ())
                    {
                      ACE_NESTED_CLASS (CORBA, Object)::tao_object_initialize (this);
                    }
                  
                  if (this->the_TAO_HomeDef_Proxy_Broker_ == 0)
                    {
                      CORBA_ComponentIR_HomeDef_setup_collocation (
                          this->ACE_NESTED_CLASS (CORBA, Object)::_is_collocated ()
                        );
                    }
                  
                  TAO::Arg_Traits<CORBA::ComponentIR::ComponentDef>::ret_val _tao_retval;
                  
                  TAO::Argument *_tao_signature [] =
                    {
                      &_tao_retval
                    };
                  
                  TAO::Invocation_Adapter _tao_call (
                      this,
                      _tao_signature,
                      1,
                      "_get_managed_component",
                      22,
                      this->the_TAO_HomeDef_Proxy_Broker_
                    );
                  
                  _tao_call.invoke (0, 0 ACE_ENV_ARG_PARAMETER);
                  ACE_CHECK_RETURN (_tao_retval.excp ());
                  
                  return _tao_retval.retn ();
                }
                
                // TAO_IDL - Generated from
                // be/be_visitor_operation/operation_cs.cpp:78
                
                void CORBA::ComponentIR::HomeDef::managed_component (
                    CORBA::ComponentIR::ComponentDef_ptr managed_component
                    ACE_ENV_ARG_DECL
                  )
                  ACE_THROW_SPEC ((
                    CORBA::SystemException
                  ))
                {
                  if (!this->is_evaluated ())
                    {
                      ACE_NESTED_CLASS (CORBA, Object)::tao_object_initialize (this);
                    }
                  
                  if (this->the_TAO_HomeDef_Proxy_Broker_ == 0)
                    {
                      CORBA_ComponentIR_HomeDef_setup_collocation (
                          this->ACE_NESTED_CLASS (CORBA, Object)::_is_collocated ()
                        );
                    }
                  
                  TAO::Arg_Traits<void>::ret_val _tao_retval;
                  TAO::Arg_Traits<CORBA::ComponentIR::ComponentDef>::in_arg_val _tao_managed_component (managed_component);
                  
                  TAO::Argument *_tao_signature [] =
                    {
                      &_tao_retval,
                      &_tao_managed_component
                    };
                  
                  TAO::Invocation_Adapter _tao_call (
                      this,
                      _tao_signature,
                      2,
                      "_set_managed_component",
                      22,
                      this->the_TAO_HomeDef_Proxy_Broker_
                    );
                  
                  _tao_call.invoke (0, 0 ACE_ENV_ARG_PARAMETER);
                  ACE_CHECK;
                }
                
                // TAO_IDL - Generated from
                // be/be_visitor_operation/operation_cs.cpp:78
                
                ::CORBA::ValueDef_ptr CORBA::ComponentIR::HomeDef::primary_key (
                    ACE_ENV_SINGLE_ARG_DECL
                  )
                  ACE_THROW_SPEC ((
                    CORBA::SystemException
                  ))
                {
                  if (!this->is_evaluated ())
                    {
                      ACE_NESTED_CLASS (CORBA, Object)::tao_object_initialize (this);
                    }
                  
                  if (this->the_TAO_HomeDef_Proxy_Broker_ == 0)
                    {
                      CORBA_ComponentIR_HomeDef_setup_collocation (
                          this->ACE_NESTED_CLASS (CORBA, Object)::_is_collocated ()
                        );
                    }
                  
                  TAO::Arg_Traits<CORBA::ValueDef>::ret_val _tao_retval;
                  
                  TAO::Argument *_tao_signature [] =
                    {
                      &_tao_retval
                    };
                  
                  TAO::Invocation_Adapter _tao_call (
                      this,
                      _tao_signature,
                      1,
                      "_get_primary_key",
                      16,
                      this->the_TAO_HomeDef_Proxy_Broker_
                    );
                  
                  _tao_call.invoke (0, 0 ACE_ENV_ARG_PARAMETER);
                  ACE_CHECK_RETURN (_tao_retval.excp ());
                  
                  return _tao_retval.retn ();
                }
                
                // TAO_IDL - Generated from
                // be/be_visitor_operation/operation_cs.cpp:78
                
                void CORBA::ComponentIR::HomeDef::primary_key (
                    CORBA::ValueDef_ptr primary_key
                    ACE_ENV_ARG_DECL
                  )
                  ACE_THROW_SPEC ((
                    CORBA::SystemException
                  ))
                {
                  if (!this->is_evaluated ())
                    {
                      ACE_NESTED_CLASS (CORBA, Object)::tao_object_initialize (this);
                    }
                  
                  if (this->the_TAO_HomeDef_Proxy_Broker_ == 0)
                    {
                      CORBA_ComponentIR_HomeDef_setup_collocation (
                          this->ACE_NESTED_CLASS (CORBA, Object)::_is_collocated ()
                        );
                    }
                  
                  TAO::Arg_Traits<void>::ret_val _tao_retval;
                  TAO::Arg_Traits<CORBA::ValueDef>::in_arg_val _tao_primary_key (primary_key);
                  
                  TAO::Argument *_tao_signature [] =
                    {
                      &_tao_retval,
                      &_tao_primary_key
                    };
                  
                  TAO::Invocation_Adapter _tao_call (
                      this,
                      _tao_signature,
                      2,
                      "_set_primary_key",
                      16,
                      this->the_TAO_HomeDef_Proxy_Broker_
                    );
                  
                  _tao_call.invoke (0, 0 ACE_ENV_ARG_PARAMETER);
                  ACE_CHECK;
                }
                
                // TAO_IDL - Generated from
                // be/be_visitor_operation/operation_cs.cpp:78
                
                ::CORBA::ComponentIR::FactoryDef_ptr CORBA::ComponentIR::HomeDef::create_factory (
                    const char * id,
                    const char * name,
                    const char * version,
                    const CORBA::ParDescriptionSeq & params,
                    const CORBA::ExceptionDefSeq & exceptions
                    ACE_ENV_ARG_DECL
                  )
                  ACE_THROW_SPEC ((
                    CORBA::SystemException
                  ))
                {
                  if (!this->is_evaluated ())
                    {
                      ACE_NESTED_CLASS (CORBA, Object)::tao_object_initialize (this);
                    }
                  
                  if (this->the_TAO_HomeDef_Proxy_Broker_ == 0)
                    {
                      CORBA_ComponentIR_HomeDef_setup_collocation (
                          this->ACE_NESTED_CLASS (CORBA, Object)::_is_collocated ()
                        );
                    }
                  
                  TAO::Arg_Traits<CORBA::ComponentIR::FactoryDef>::ret_val _tao_retval;
                  TAO::Arg_Traits<CORBA::RepositoryId>::in_arg_val _tao_id (id);
                  TAO::Arg_Traits<CORBA::Identifier>::in_arg_val _tao_name (name);
                  TAO::Arg_Traits<CORBA::VersionSpec>::in_arg_val _tao_version (version);
                  TAO::Arg_Traits<CORBA::ParDescriptionSeq>::in_arg_val _tao_params (params);
                  TAO::Arg_Traits<CORBA::ExceptionDefSeq>::in_arg_val _tao_exceptions (exceptions);
                  
                  TAO::Argument *_tao_signature [] =
                    {
                      &_tao_retval,
                      &_tao_id,
                      &_tao_name,
                      &_tao_version,
                      &_tao_params,
                      &_tao_exceptions
                    };
                  
                  TAO::Invocation_Adapter _tao_call (
                      this,
                      _tao_signature,
                      6,
                      "create_factory",
                      14,
                      this->the_TAO_HomeDef_Proxy_Broker_
                    );
                  
                  _tao_call.invoke (0, 0 ACE_ENV_ARG_PARAMETER);
                  ACE_CHECK_RETURN (_tao_retval.excp ());
                  
                  return _tao_retval.retn ();
                }
                
                // TAO_IDL - Generated from
                // be/be_visitor_operation/operation_cs.cpp:78
                
                ::CORBA::ComponentIR::FinderDef_ptr CORBA::ComponentIR::HomeDef::create_finder (
                    const char * id,
                    const char * name,
                    const char * version,
                    const CORBA::ParDescriptionSeq & params,
                    const CORBA::ExceptionDefSeq & exceptions
                    ACE_ENV_ARG_DECL
                  )
                  ACE_THROW_SPEC ((
                    CORBA::SystemException
                  ))
                {
                  if (!this->is_evaluated ())
                    {
                      ACE_NESTED_CLASS (CORBA, Object)::tao_object_initialize (this);
                    }
                  
                  if (this->the_TAO_HomeDef_Proxy_Broker_ == 0)
                    {
                      CORBA_ComponentIR_HomeDef_setup_collocation (
                          this->ACE_NESTED_CLASS (CORBA, Object)::_is_collocated ()
                        );
                    }
                  
                  TAO::Arg_Traits<CORBA::ComponentIR::FinderDef>::ret_val _tao_retval;
                  TAO::Arg_Traits<CORBA::RepositoryId>::in_arg_val _tao_id (id);
                  TAO::Arg_Traits<CORBA::Identifier>::in_arg_val _tao_name (name);
                  TAO::Arg_Traits<CORBA::VersionSpec>::in_arg_val _tao_version (version);
                  TAO::Arg_Traits<CORBA::ParDescriptionSeq>::in_arg_val _tao_params (params);
                  TAO::Arg_Traits<CORBA::ExceptionDefSeq>::in_arg_val _tao_exceptions (exceptions);
                  
                  TAO::Argument *_tao_signature [] =
                    {
                      &_tao_retval,
                      &_tao_id,
                      &_tao_name,
                      &_tao_version,
                      &_tao_params,
                      &_tao_exceptions
                    };
                  
                  TAO::Invocation_Adapter _tao_call (
                      this,
                      _tao_signature,
                      6,
                      "create_finder",
                      13,
                      this->the_TAO_HomeDef_Proxy_Broker_
                    );
                  
                  _tao_call.invoke (0, 0 ACE_ENV_ARG_PARAMETER);
                  ACE_CHECK_RETURN (_tao_retval.excp ());
                  
                  return _tao_retval.retn ();
                }
                
                CORBA::ComponentIR::HomeDef::HomeDef (int collocated)
                 : the_TAO_HomeDef_Proxy_Broker_ (0)
                {
                  this->CORBA_ComponentIR_HomeDef_setup_collocation (collocated);
                }
              
              void
              CORBA::ComponentIR::HomeDef::CORBA_ComponentIR_HomeDef_setup_collocation (int collocated)
              {
                if (collocated)
                  {
                    this->the_TAO_HomeDef_Proxy_Broker_ =
                      ::CORBA_ComponentIR__TAO_HomeDef_Proxy_Broker_Factory_function_pointer (this);
                  }
                
                this->CORBA_ExtInterfaceDef_setup_collocation (collocated);
              }
              
              CORBA::ComponentIR::HomeDef::~HomeDef (void)
              {}
              
              void 
              CORBA::ComponentIR::HomeDef::_tao_any_destructor (void *_tao_void_pointer)
              {
                HomeDef *_tao_tmp_pointer =
                  ACE_static_cast (HomeDef *, _tao_void_pointer);
                CORBA::release (_tao_tmp_pointer);
              }
              
              CORBA::ComponentIR::HomeDef_ptr
              CORBA::ComponentIR::HomeDef::_narrow (
                  CORBA::Object_ptr _tao_objref
                  ACE_ENV_ARG_DECL
                )
              {
                return
                  TAO::Narrow_Utils<HomeDef>::narrow (
                      _tao_objref,
                      "IDL:omg.org/CORBA/ComponentIR/HomeDef:1.0",
                      CORBA_ComponentIR__TAO_HomeDef_Proxy_Broker_Factory_function_pointer
                      ACE_ENV_ARG_PARAMETER
                    );
              }
              
              CORBA::ComponentIR::HomeDef_ptr
              CORBA::ComponentIR::HomeDef::_duplicate (HomeDef_ptr obj)
              {
                if (! CORBA::is_nil (obj))
                  {
                    obj->_add_ref ();
                  }
                
                return obj;
              }
              
              CORBA::Boolean
              CORBA::ComponentIR::HomeDef::_is_a (
                  const char *value
                  ACE_ENV_ARG_DECL
                )
              {
                if (
                    !ACE_OS::strcmp (
                        (char *)value,
                        "IDL:omg.org/CORBA/IRObject:1.0"
                      ) ||
                    !ACE_OS::strcmp (
                        (char *)value,
                        "IDL:omg.org/CORBA/Container:1.0"
                      ) ||
                    !ACE_OS::strcmp (
                        (char *)value,
                        "IDL:omg.org/CORBA/Contained:1.0"
                      ) ||
                    !ACE_OS::strcmp (
                        (char *)value,
                        "IDL:omg.org/CORBA/IDLType:1.0"
                      ) ||
                    !ACE_OS::strcmp (
                        (char *)value,
                        "IDL:omg.org/CORBA/InterfaceDef:1.0"
                      ) ||
                    !ACE_OS::strcmp (
                        (char *)value,
                        "IDL:omg.org/CORBA/InterfaceAttrExtension:1.0"
                      ) ||
                    !ACE_OS::strcmp (
                        (char *)value,
                        "IDL:omg.org/CORBA/ExtInterfaceDef:1.0"
                      ) ||
                    !ACE_OS::strcmp (
                        (char *)value,
                        "IDL:omg.org/CORBA/ComponentIR/HomeDef:1.0"
                      ) ||
                    !ACE_OS::strcmp (
                        (char *)value,
                        "IDL:omg.org/CORBA/Object:1.0"
                      )
                   )
                  {
                    return 1; // success using local knowledge
                  }
                else
                  {
                    return this->ACE_NESTED_CLASS (CORBA, Object)::_is_a (
                        value
                        ACE_ENV_ARG_PARAMETER
                      );
                  }
              }
              
              const char* CORBA::ComponentIR::HomeDef::_interface_repository_id (void) const
              {
                return "IDL:omg.org/CORBA/ComponentIR/HomeDef:1.0";
              }
              
              CORBA::Boolean
              CORBA::ComponentIR::HomeDef::marshal (TAO_OutputCDR &cdr)
              {
                return (cdr << this);
              }
              
              // TAO_IDL - Generated from
              // be/be_visitor_typecode/typecode_defn.cpp:284
              
              static const CORBA::Long _oc_CORBA_ComponentIR_HomeDef[] =
              {
                                TAO_ENCAP_BYTE_ORDER, // byte order
                42,
                ACE_NTOHL (0x49444c3a), 
                ACE_NTOHL (0x6f6d672e), 
                ACE_NTOHL (0x6f72672f), 
                ACE_NTOHL (0x434f5242), 
                ACE_NTOHL (0x412f436f), 
                ACE_NTOHL (0x6d706f6e), 
                ACE_NTOHL (0x656e7449), 
                ACE_NTOHL (0x522f486f), 
                ACE_NTOHL (0x6d654465), 
                ACE_NTOHL (0x663a312e), 
                ACE_NTOHL (0x30000000),  // repository ID = IDL:omg.org/CORBA/ComponentIR/HomeDef:1.0
                                8,
                ACE_NTOHL (0x486f6d65), 
                ACE_NTOHL (0x44656600),  // name = HomeDef
                };
              
              static CORBA::TypeCode _tc_TAO_tc_CORBA_ComponentIR_HomeDef (
                  CORBA::tk_objref,
                  sizeof (_oc_CORBA_ComponentIR_HomeDef),
                  (char *) &_oc_CORBA_ComponentIR_HomeDef,
                  0,
                  sizeof (CORBA::ComponentIR::HomeDef)
                );
              
              namespace CORBA
              {
                namespace ComponentIR
                {
                  ::CORBA::TypeCode_ptr _tc_HomeDef =
                    &_tc_TAO_tc_CORBA_ComponentIR_HomeDef;
                }
                }
                
                // TAO_IDL - Generated from
                // be/be_visitor_typecode/typecode_defn.cpp:284
                
                static const CORBA::Long _oc_CORBA_ComponentIR_HomeDescription[] =
                {
                                    TAO_ENCAP_BYTE_ORDER, // byte order
                  50,
                  ACE_NTOHL (0x49444c3a), 
                  ACE_NTOHL (0x6f6d672e), 
                  ACE_NTOHL (0x6f72672f), 
                  ACE_NTOHL (0x434f5242), 
                  ACE_NTOHL (0x412f436f), 
                  ACE_NTOHL (0x6d706f6e), 
                  ACE_NTOHL (0x656e7449), 
                  ACE_NTOHL (0x522f486f), 
                  ACE_NTOHL (0x6d654465), 
                  ACE_NTOHL (0x73637269), 
                  ACE_NTOHL (0x7074696f), 
                  ACE_NTOHL (0x6e3a312e), 
                  ACE_NTOHL (0x30000000),  // repository ID = IDL:omg.org/CORBA/ComponentIR/HomeDescription:1.0
                                    16,
                  ACE_NTOHL (0x486f6d65), 
                  ACE_NTOHL (0x44657363), 
                  ACE_NTOHL (0x72697074), 
                  ACE_NTOHL (0x696f6e00),  // name = HomeDescription
                  12, // member count
                                    5,
                  ACE_NTOHL (0x6e616d65), 
                  ACE_NTOHL (0x0),  // name = name
                                    CORBA::tk_alias, // typecode kind for typedefs
                  68, // encapsulation length
                    TAO_ENCAP_BYTE_ORDER, // byte order
                    33,
                    ACE_NTOHL (0x49444c3a), 
                    ACE_NTOHL (0x6f6d672e), 
                    ACE_NTOHL (0x6f72672f), 
                    ACE_NTOHL (0x434f5242), 
                    ACE_NTOHL (0x412f4964), 
                    ACE_NTOHL (0x656e7469), 
                    ACE_NTOHL (0x66696572), 
                    ACE_NTOHL (0x3a312e30), 
                    ACE_NTOHL (0x0),  // repository ID = IDL:omg.org/CORBA/Identifier:1.0
                                        11,
                    ACE_NTOHL (0x4964656e), 
                    ACE_NTOHL (0x74696669), 
                    ACE_NTOHL (0x65720000),  // name = Identifier
                                        CORBA::tk_string, 
                    0U, // string length

                  3,
                  ACE_NTOHL (0x69640000),  // name = id
                                    CORBA::tk_alias, // typecode kind for typedefs
                  72, // encapsulation length
                    TAO_ENCAP_BYTE_ORDER, // byte order
                    35,
                    ACE_NTOHL (0x49444c3a), 
                    ACE_NTOHL (0x6f6d672e), 
                    ACE_NTOHL (0x6f72672f), 
                    ACE_NTOHL (0x434f5242), 
                    ACE_NTOHL (0x412f5265), 
                    ACE_NTOHL (0x706f7369), 
                    ACE_NTOHL (0x746f7279), 
                    ACE_NTOHL (0x49643a31), 
                    ACE_NTOHL (0x2e300000),  // repository ID = IDL:omg.org/CORBA/RepositoryId:1.0
                                        13,
                    ACE_NTOHL (0x5265706f), 
                    ACE_NTOHL (0x7369746f), 
                    ACE_NTOHL (0x72794964), 
                    ACE_NTOHL (0x0),  // name = RepositoryId
                                        CORBA::tk_string, 
                    0U, // string length

                  11,
                  ACE_NTOHL (0x64656669), 
                  ACE_NTOHL (0x6e65645f), 
                  ACE_NTOHL (0x696e0000),  // name = defined_in
                                    CORBA::tk_alias, // typecode kind for typedefs
                  72, // encapsulation length
                    TAO_ENCAP_BYTE_ORDER, // byte order
                    35,
                    ACE_NTOHL (0x49444c3a), 
                    ACE_NTOHL (0x6f6d672e), 
                    ACE_NTOHL (0x6f72672f), 
                    ACE_NTOHL (0x434f5242), 
                    ACE_NTOHL (0x412f5265), 
                    ACE_NTOHL (0x706f7369), 
                    ACE_NTOHL (0x746f7279), 
                    ACE_NTOHL (0x49643a31), 
                    ACE_NTOHL (0x2e300000),  // repository ID = IDL:omg.org/CORBA/RepositoryId:1.0
                                        13,
                    ACE_NTOHL (0x5265706f), 
                    ACE_NTOHL (0x7369746f), 
                    ACE_NTOHL (0x72794964), 
                    ACE_NTOHL (0x0),  // name = RepositoryId
                                        CORBA::tk_string, 
                    0U, // string length

                  8,
                  ACE_NTOHL (0x76657273), 
                  ACE_NTOHL (0x696f6e00),  // name = version
                                    CORBA::tk_alias, // typecode kind for typedefs
                  68, // encapsulation length
                    TAO_ENCAP_BYTE_ORDER, // byte order
                    34,
                    ACE_NTOHL (0x49444c3a), 
                    ACE_NTOHL (0x6f6d672e), 
                    ACE_NTOHL (0x6f72672f), 
                    ACE_NTOHL (0x434f5242), 
                    ACE_NTOHL (0x412f5665), 
                    ACE_NTOHL (0x7273696f), 
                    ACE_NTOHL (0x6e537065), 
                    ACE_NTOHL (0x633a312e), 
                    ACE_NTOHL (0x30000000),  // repository ID = IDL:omg.org/CORBA/VersionSpec:1.0
                                        12,
                    ACE_NTOHL (0x56657273), 
                    ACE_NTOHL (0x696f6e53), 
                    ACE_NTOHL (0x70656300),  // name = VersionSpec
                                        CORBA::tk_string, 
                    0U, // string length

                  10,
                  ACE_NTOHL (0x62617365), 
                  ACE_NTOHL (0x5f686f6d), 
                  ACE_NTOHL (0x65000000),  // name = base_home
                                    CORBA::tk_alias, // typecode kind for typedefs
                  72, // encapsulation length
                    TAO_ENCAP_BYTE_ORDER, // byte order
                    35,
                    ACE_NTOHL (0x49444c3a), 
                    ACE_NTOHL (0x6f6d672e), 
                    ACE_NTOHL (0x6f72672f), 
                    ACE_NTOHL (0x434f5242), 
                    ACE_NTOHL (0x412f5265), 
                    ACE_NTOHL (0x706f7369), 
                    ACE_NTOHL (0x746f7279), 
                    ACE_NTOHL (0x49643a31), 
                    ACE_NTOHL (0x2e300000),  // repository ID = IDL:omg.org/CORBA/RepositoryId:1.0
                                        13,
                    ACE_NTOHL (0x5265706f), 
                    ACE_NTOHL (0x7369746f), 
                    ACE_NTOHL (0x72794964), 
                    ACE_NTOHL (0x0),  // name = RepositoryId
                                        CORBA::tk_string, 
                    0U, // string length

                  18,
                  ACE_NTOHL (0x6d616e61), 
                  ACE_NTOHL (0x6765645f), 
                  ACE_NTOHL (0x636f6d70), 
                  ACE_NTOHL (0x6f6e656e), 
                  ACE_NTOHL (0x74000000),  // name = managed_component
                                    CORBA::tk_alias, // typecode kind for typedefs
                  72, // encapsulation length
                    TAO_ENCAP_BYTE_ORDER, // byte order
                    35,
                    ACE_NTOHL (0x49444c3a), 
                    ACE_NTOHL (0x6f6d672e), 
                    ACE_NTOHL (0x6f72672f), 
                    ACE_NTOHL (0x434f5242), 
                    ACE_NTOHL (0x412f5265), 
                    ACE_NTOHL (0x706f7369), 
                    ACE_NTOHL (0x746f7279), 
                    ACE_NTOHL (0x49643a31), 
                    ACE_NTOHL (0x2e300000),  // repository ID = IDL:omg.org/CORBA/RepositoryId:1.0
                                        13,
                    ACE_NTOHL (0x5265706f), 
                    ACE_NTOHL (0x7369746f), 
                    ACE_NTOHL (0x72794964), 
                    ACE_NTOHL (0x0),  // name = RepositoryId
                                        CORBA::tk_string, 
                    0U, // string length

                  12,
                  ACE_NTOHL (0x7072696d), 
                  ACE_NTOHL (0x6172795f), 
                  ACE_NTOHL (0x6b657900),  // name = primary_key
                                    CORBA::tk_struct, // typecode kind
                  996, // encapsulation length
                    TAO_ENCAP_BYTE_ORDER, // byte order
                    39,
                    ACE_NTOHL (0x49444c3a), 
                    ACE_NTOHL (0x6f6d672e), 
                    ACE_NTOHL (0x6f72672f), 
                    ACE_NTOHL (0x434f5242), 
                    ACE_NTOHL (0x412f5661), 
                    ACE_NTOHL (0x6c756544), 
                    ACE_NTOHL (0x65736372), 
                    ACE_NTOHL (0x69707469), 
                    ACE_NTOHL (0x6f6e3a31), 
                    ACE_NTOHL (0x2e300000),  // repository ID = IDL:omg.org/CORBA/ValueDescription:1.0
                                        17,
                    ACE_NTOHL (0x56616c75), 
                    ACE_NTOHL (0x65446573), 
                    ACE_NTOHL (0x63726970), 
                    ACE_NTOHL (0x74696f6e), 
                    ACE_NTOHL (0x0),  // name = ValueDescription
                    10, // member count
                                        5,
                    ACE_NTOHL (0x6e616d65), 
                    ACE_NTOHL (0x0),  // name = name
                                        CORBA::tk_alias, // typecode kind for typedefs
                    68, // encapsulation length
                      TAO_ENCAP_BYTE_ORDER, // byte order
                      33,
                      ACE_NTOHL (0x49444c3a), 
                      ACE_NTOHL (0x6f6d672e), 
                      ACE_NTOHL (0x6f72672f), 
                      ACE_NTOHL (0x434f5242), 
                      ACE_NTOHL (0x412f4964), 
                      ACE_NTOHL (0x656e7469), 
                      ACE_NTOHL (0x66696572), 
                      ACE_NTOHL (0x3a312e30), 
                      ACE_NTOHL (0x0),  // repository ID = IDL:omg.org/CORBA/Identifier:1.0
                                            11,
                      ACE_NTOHL (0x4964656e), 
                      ACE_NTOHL (0x74696669), 
                      ACE_NTOHL (0x65720000),  // name = Identifier
                                            CORBA::tk_string, 
                      0U, // string length

                    3,
                    ACE_NTOHL (0x69640000),  // name = id
                                        CORBA::tk_alias, // typecode kind for typedefs
                    72, // encapsulation length
                      TAO_ENCAP_BYTE_ORDER, // byte order
                      35,
                      ACE_NTOHL (0x49444c3a), 
                      ACE_NTOHL (0x6f6d672e), 
                      ACE_NTOHL (0x6f72672f), 
                      ACE_NTOHL (0x434f5242), 
                      ACE_NTOHL (0x412f5265), 
                      ACE_NTOHL (0x706f7369), 
                      ACE_NTOHL (0x746f7279), 
                      ACE_NTOHL (0x49643a31), 
                      ACE_NTOHL (0x2e300000),  // repository ID = IDL:omg.org/CORBA/RepositoryId:1.0
                                            13,
                      ACE_NTOHL (0x5265706f), 
                      ACE_NTOHL (0x7369746f), 
                      ACE_NTOHL (0x72794964), 
                      ACE_NTOHL (0x0),  // name = RepositoryId
                                            CORBA::tk_string, 
                      0U, // string length

                    12,
                    ACE_NTOHL (0x69735f61), 
                    ACE_NTOHL (0x62737472), 
                    ACE_NTOHL (0x61637400),  // name = is_abstract
                                        CORBA::tk_boolean,

                    10,
                    ACE_NTOHL (0x69735f63), 
                    ACE_NTOHL (0x7573746f), 
                    ACE_NTOHL (0x6d000000),  // name = is_custom
                                        CORBA::tk_boolean,

                    11,
                    ACE_NTOHL (0x64656669), 
                    ACE_NTOHL (0x6e65645f), 
                    ACE_NTOHL (0x696e0000),  // name = defined_in
                                        CORBA::tk_alias, // typecode kind for typedefs
                    72, // encapsulation length
                      TAO_ENCAP_BYTE_ORDER, // byte order
                      35,
                      ACE_NTOHL (0x49444c3a), 
                      ACE_NTOHL (0x6f6d672e), 
                      ACE_NTOHL (0x6f72672f), 
                      ACE_NTOHL (0x434f5242), 
                      ACE_NTOHL (0x412f5265), 
                      ACE_NTOHL (0x706f7369), 
                      ACE_NTOHL (0x746f7279), 
                      ACE_NTOHL (0x49643a31), 
                      ACE_NTOHL (0x2e300000),  // repository ID = IDL:omg.org/CORBA/RepositoryId:1.0
                                            13,
                      ACE_NTOHL (0x5265706f), 
                      ACE_NTOHL (0x7369746f), 
                      ACE_NTOHL (0x72794964), 
                      ACE_NTOHL (0x0),  // name = RepositoryId
                                            CORBA::tk_string, 
                      0U, // string length

                    8,
                    ACE_NTOHL (0x76657273), 
                    ACE_NTOHL (0x696f6e00),  // name = version
                                        CORBA::tk_alias, // typecode kind for typedefs
                    68, // encapsulation length
                      TAO_ENCAP_BYTE_ORDER, // byte order
                      34,
                      ACE_NTOHL (0x49444c3a), 
                      ACE_NTOHL (0x6f6d672e), 
                      ACE_NTOHL (0x6f72672f), 
                      ACE_NTOHL (0x434f5242), 
                      ACE_NTOHL (0x412f5665), 
                      ACE_NTOHL (0x7273696f), 
                      ACE_NTOHL (0x6e537065), 
                      ACE_NTOHL (0x633a312e), 
                      ACE_NTOHL (0x30000000),  // repository ID = IDL:omg.org/CORBA/VersionSpec:1.0
                                            12,
                      ACE_NTOHL (0x56657273), 
                      ACE_NTOHL (0x696f6e53), 
                      ACE_NTOHL (0x70656300),  // name = VersionSpec
                                            CORBA::tk_string, 
                      0U, // string length

                    21,
                    ACE_NTOHL (0x73757070), 
                    ACE_NTOHL (0x6f727465), 
                    ACE_NTOHL (0x645f696e), 
                    ACE_NTOHL (0x74657266), 
                    ACE_NTOHL (0x61636573), 
                    ACE_NTOHL (0x0),  // name = supported_interfaces
                                        CORBA::tk_alias, // typecode kind for typedefs
                    164, // encapsulation length
                      TAO_ENCAP_BYTE_ORDER, // byte order
                      38,
                      ACE_NTOHL (0x49444c3a), 
                      ACE_NTOHL (0x6f6d672e), 
                      ACE_NTOHL (0x6f72672f), 
                      ACE_NTOHL (0x434f5242), 
                      ACE_NTOHL (0x412f5265), 
                      ACE_NTOHL (0x706f7369), 
                      ACE_NTOHL (0x746f7279), 
                      ACE_NTOHL (0x49645365), 
                      ACE_NTOHL (0x713a312e), 
                      ACE_NTOHL (0x30000000),  // repository ID = IDL:omg.org/CORBA/RepositoryIdSeq:1.0
                                            16,
                      ACE_NTOHL (0x5265706f), 
                      ACE_NTOHL (0x7369746f), 
                      ACE_NTOHL (0x72794964), 
                      ACE_NTOHL (0x53657100),  // name = RepositoryIdSeq
                                            CORBA::tk_sequence, // typecode kind
                      88, // encapsulation length
                        TAO_ENCAP_BYTE_ORDER, // byte order
                        CORBA::tk_alias, // typecode kind for typedefs
                        72, // encapsulation length
                          TAO_ENCAP_BYTE_ORDER, // byte order
                          35,
                          ACE_NTOHL (0x49444c3a), 
                          ACE_NTOHL (0x6f6d672e), 
                          ACE_NTOHL (0x6f72672f), 
                          ACE_NTOHL (0x434f5242), 
                          ACE_NTOHL (0x412f5265), 
                          ACE_NTOHL (0x706f7369), 
                          ACE_NTOHL (0x746f7279), 
                          ACE_NTOHL (0x49643a31), 
                          ACE_NTOHL (0x2e300000),  // repository ID = IDL:omg.org/CORBA/RepositoryId:1.0
                                                    13,
                          ACE_NTOHL (0x5265706f), 
                          ACE_NTOHL (0x7369746f), 
                          ACE_NTOHL (0x72794964), 
                          ACE_NTOHL (0x0),  // name = RepositoryId
                                                    CORBA::tk_string, 
                          0U, // string length

                        0U,


                    21,
                    ACE_NTOHL (0x61627374), 
                    ACE_NTOHL (0x72616374), 
                    ACE_NTOHL (0x5f626173), 
                    ACE_NTOHL (0x655f7661), 
                    ACE_NTOHL (0x6c756573), 
                    ACE_NTOHL (0x0),  // name = abstract_base_values
                                        CORBA::tk_alias, // typecode kind for typedefs
                    164, // encapsulation length
                      TAO_ENCAP_BYTE_ORDER, // byte order
                      38,
                      ACE_NTOHL (0x49444c3a), 
                      ACE_NTOHL (0x6f6d672e), 
                      ACE_NTOHL (0x6f72672f), 
                      ACE_NTOHL (0x434f5242), 
                      ACE_NTOHL (0x412f5265), 
                      ACE_NTOHL (0x706f7369), 
                      ACE_NTOHL (0x746f7279), 
                      ACE_NTOHL (0x49645365), 
                      ACE_NTOHL (0x713a312e), 
                      ACE_NTOHL (0x30000000),  // repository ID = IDL:omg.org/CORBA/RepositoryIdSeq:1.0
                                            16,
                      ACE_NTOHL (0x5265706f), 
                      ACE_NTOHL (0x7369746f), 
                      ACE_NTOHL (0x72794964), 
                      ACE_NTOHL (0x53657100),  // name = RepositoryIdSeq
                                            CORBA::tk_sequence, // typecode kind
                      88, // encapsulation length
                        TAO_ENCAP_BYTE_ORDER, // byte order
                        CORBA::tk_alias, // typecode kind for typedefs
                        72, // encapsulation length
                          TAO_ENCAP_BYTE_ORDER, // byte order
                          35,
                          ACE_NTOHL (0x49444c3a), 
                          ACE_NTOHL (0x6f6d672e), 
                          ACE_NTOHL (0x6f72672f), 
                          ACE_NTOHL (0x434f5242), 
                          ACE_NTOHL (0x412f5265), 
                          ACE_NTOHL (0x706f7369), 
                          ACE_NTOHL (0x746f7279), 
                          ACE_NTOHL (0x49643a31), 
                          ACE_NTOHL (0x2e300000),  // repository ID = IDL:omg.org/CORBA/RepositoryId:1.0
                                                    13,
                          ACE_NTOHL (0x5265706f), 
                          ACE_NTOHL (0x7369746f), 
                          ACE_NTOHL (0x72794964), 
                          ACE_NTOHL (0x0),  // name = RepositoryId
                                                    CORBA::tk_string, 
                          0U, // string length

                        0U,


                    15,
                    ACE_NTOHL (0x69735f74), 
                    ACE_NTOHL (0x72756e63), 
                    ACE_NTOHL (0x61746162), 
                    ACE_NTOHL (0x6c650000),  // name = is_truncatable
                                        CORBA::tk_boolean,

                    11,
                    ACE_NTOHL (0x62617365), 
                    ACE_NTOHL (0x5f76616c), 
                    ACE_NTOHL (0x75650000),  // name = base_value
                                        CORBA::tk_alias, // typecode kind for typedefs
                    72, // encapsulation length
                      TAO_ENCAP_BYTE_ORDER, // byte order
                      35,
                      ACE_NTOHL (0x49444c3a), 
                      ACE_NTOHL (0x6f6d672e), 
                      ACE_NTOHL (0x6f72672f), 
                      ACE_NTOHL (0x434f5242), 
                      ACE_NTOHL (0x412f5265), 
                      ACE_NTOHL (0x706f7369), 
                      ACE_NTOHL (0x746f7279), 
                      ACE_NTOHL (0x49643a31), 
                      ACE_NTOHL (0x2e300000),  // repository ID = IDL:omg.org/CORBA/RepositoryId:1.0
                                            13,
                      ACE_NTOHL (0x5265706f), 
                      ACE_NTOHL (0x7369746f), 
                      ACE_NTOHL (0x72794964), 
                      ACE_NTOHL (0x0),  // name = RepositoryId
                                            CORBA::tk_string, 
                      0U, // string length


                  10,
                  ACE_NTOHL (0x66616374), 
                  ACE_NTOHL (0x6f726965), 
                  ACE_NTOHL (0x73000000),  // name = factories
                                    CORBA::tk_alias, // typecode kind for typedefs
                  2036, // encapsulation length
                    TAO_ENCAP_BYTE_ORDER, // byte order
                    39,
                    ACE_NTOHL (0x49444c3a), 
                    ACE_NTOHL (0x6f6d672e), 
                    ACE_NTOHL (0x6f72672f), 
                    ACE_NTOHL (0x434f5242), 
                    ACE_NTOHL (0x412f4f70), 
                    ACE_NTOHL (0x44657363), 
                    ACE_NTOHL (0x72697074), 
                    ACE_NTOHL (0x696f6e53), 
                    ACE_NTOHL (0x65713a31), 
                    ACE_NTOHL (0x2e300000),  // repository ID = IDL:omg.org/CORBA/OpDescriptionSeq:1.0
                                        17,
                    ACE_NTOHL (0x4f704465), 
                    ACE_NTOHL (0x73637269), 
                    ACE_NTOHL (0x7074696f), 
                    ACE_NTOHL (0x6e536571), 
                    ACE_NTOHL (0x0),  // name = OpDescriptionSeq
                                        CORBA::tk_sequence, // typecode kind
                    1956, // encapsulation length
                      TAO_ENCAP_BYTE_ORDER, // byte order
                      CORBA::tk_struct, // typecode kind
                      1940, // encapsulation length
                        TAO_ENCAP_BYTE_ORDER, // byte order
                        43,
                        ACE_NTOHL (0x49444c3a), 
                        ACE_NTOHL (0x6f6d672e), 
                        ACE_NTOHL (0x6f72672f), 
                        ACE_NTOHL (0x434f5242), 
                        ACE_NTOHL (0x412f4f70), 
                        ACE_NTOHL (0x65726174), 
                        ACE_NTOHL (0x696f6e44), 
                        ACE_NTOHL (0x65736372), 
                        ACE_NTOHL (0x69707469), 
                        ACE_NTOHL (0x6f6e3a31), 
                        ACE_NTOHL (0x2e300000),  // repository ID = IDL:omg.org/CORBA/OperationDescription:1.0
                                                21,
                        ACE_NTOHL (0x4f706572), 
                        ACE_NTOHL (0x6174696f), 
                        ACE_NTOHL (0x6e446573), 
                        ACE_NTOHL (0x63726970), 
                        ACE_NTOHL (0x74696f6e), 
                        ACE_NTOHL (0x0),  // name = OperationDescription
                        9, // member count
                                                5,
                        ACE_NTOHL (0x6e616d65), 
                        ACE_NTOHL (0x0),  // name = name
                                                CORBA::tk_alias, // typecode kind for typedefs
                        68, // encapsulation length
                          TAO_ENCAP_BYTE_ORDER, // byte order
                          33,
                          ACE_NTOHL (0x49444c3a), 
                          ACE_NTOHL (0x6f6d672e), 
                          ACE_NTOHL (0x6f72672f), 
                          ACE_NTOHL (0x434f5242), 
                          ACE_NTOHL (0x412f4964), 
                          ACE_NTOHL (0x656e7469), 
                          ACE_NTOHL (0x66696572), 
                          ACE_NTOHL (0x3a312e30), 
                          ACE_NTOHL (0x0),  // repository ID = IDL:omg.org/CORBA/Identifier:1.0
                                                    11,
                          ACE_NTOHL (0x4964656e), 
                          ACE_NTOHL (0x74696669), 
                          ACE_NTOHL (0x65720000),  // name = Identifier
                                                    CORBA::tk_string, 
                          0U, // string length

                        3,
                        ACE_NTOHL (0x69640000),  // name = id
                                                CORBA::tk_alias, // typecode kind for typedefs
                        72, // encapsulation length
                          TAO_ENCAP_BYTE_ORDER, // byte order
                          35,
                          ACE_NTOHL (0x49444c3a), 
                          ACE_NTOHL (0x6f6d672e), 
                          ACE_NTOHL (0x6f72672f), 
                          ACE_NTOHL (0x434f5242), 
                          ACE_NTOHL (0x412f5265), 
                          ACE_NTOHL (0x706f7369), 
                          ACE_NTOHL (0x746f7279), 
                          ACE_NTOHL (0x49643a31), 
                          ACE_NTOHL (0x2e300000),  // repository ID = IDL:omg.org/CORBA/RepositoryId:1.0
                                                    13,
                          ACE_NTOHL (0x5265706f), 
                          ACE_NTOHL (0x7369746f), 
                          ACE_NTOHL (0x72794964), 
                          ACE_NTOHL (0x0),  // name = RepositoryId
                                                    CORBA::tk_string, 
                          0U, // string length

                        11,
                        ACE_NTOHL (0x64656669), 
                        ACE_NTOHL (0x6e65645f), 
                        ACE_NTOHL (0x696e0000),  // name = defined_in
                                                CORBA::tk_alias, // typecode kind for typedefs
                        72, // encapsulation length
                          TAO_ENCAP_BYTE_ORDER, // byte order
                          35,
                          ACE_NTOHL (0x49444c3a), 
                          ACE_NTOHL (0x6f6d672e), 
                          ACE_NTOHL (0x6f72672f), 
                          ACE_NTOHL (0x434f5242), 
                          ACE_NTOHL (0x412f5265), 
                          ACE_NTOHL (0x706f7369), 
                          ACE_NTOHL (0x746f7279), 
                          ACE_NTOHL (0x49643a31), 
                          ACE_NTOHL (0x2e300000),  // repository ID = IDL:omg.org/CORBA/RepositoryId:1.0
                                                    13,
                          ACE_NTOHL (0x5265706f), 
                          ACE_NTOHL (0x7369746f), 
                          ACE_NTOHL (0x72794964), 
                          ACE_NTOHL (0x0),  // name = RepositoryId
                                                    CORBA::tk_string, 
                          0U, // string length

                        8,
                        ACE_NTOHL (0x76657273), 
                        ACE_NTOHL (0x696f6e00),  // name = version
                                                CORBA::tk_alias, // typecode kind for typedefs
                        68, // encapsulation length
                          TAO_ENCAP_BYTE_ORDER, // byte order
                          34,
                          ACE_NTOHL (0x49444c3a), 
                          ACE_NTOHL (0x6f6d672e), 
                          ACE_NTOHL (0x6f72672f), 
                          ACE_NTOHL (0x434f5242), 
                          ACE_NTOHL (0x412f5665), 
                          ACE_NTOHL (0x7273696f), 
                          ACE_NTOHL (0x6e537065), 
                          ACE_NTOHL (0x633a312e), 
                          ACE_NTOHL (0x30000000),  // repository ID = IDL:omg.org/CORBA/VersionSpec:1.0
                                                    12,
                          ACE_NTOHL (0x56657273), 
                          ACE_NTOHL (0x696f6e53), 
                          ACE_NTOHL (0x70656300),  // name = VersionSpec
                                                    CORBA::tk_string, 
                          0U, // string length

                        7,
                        ACE_NTOHL (0x72657375), 
                        ACE_NTOHL (0x6c740000),  // name = result
                                                CORBA::tk_TypeCode,

                        5,
                        ACE_NTOHL (0x6d6f6465), 
                        ACE_NTOHL (0x0),  // name = mode
                                                CORBA::tk_enum, // typecode kind
                        100, // encapsulation length
TAO_ENCAP_BYTE_ORDER, // byte order
                          36,
                          ACE_NTOHL (0x49444c3a), 
                          ACE_NTOHL (0x6f6d672e), 
                          ACE_NTOHL (0x6f72672f), 
                          ACE_NTOHL (0x434f5242), 
                          ACE_NTOHL (0x412f4f70), 
                          ACE_NTOHL (0x65726174), 
                          ACE_NTOHL (0x696f6e4d), 
                          ACE_NTOHL (0x6f64653a), 
                          ACE_NTOHL (0x312e3000),  // repository ID = IDL:omg.org/CORBA/OperationMode:1.0
                          14,
                          ACE_NTOHL (0x4f706572), 
                          ACE_NTOHL (0x6174696f), 
                          ACE_NTOHL (0x6e4d6f64), 
                          ACE_NTOHL (0x65000000),  // name = OperationMode
                          2, // member count
                          10,
                          ACE_NTOHL (0x4f505f4e), 
                          ACE_NTOHL (0x4f524d41), 
                          ACE_NTOHL (0x4c000000),  // name = OP_NORMAL
                          10,
                          ACE_NTOHL (0x4f505f4f), 
                          ACE_NTOHL (0x4e455741), 
                          ACE_NTOHL (0x59000000),  // name = OP_ONEWAY
                          
                        9,
                        ACE_NTOHL (0x636f6e74), 
                        ACE_NTOHL (0x65787473), 
                        ACE_NTOHL (0x0),  // name = contexts
                                                CORBA::tk_alias, // typecode kind for typedefs
                        236, // encapsulation length
                          TAO_ENCAP_BYTE_ORDER, // byte order
                          35,
                          ACE_NTOHL (0x49444c3a), 
                          ACE_NTOHL (0x6f6d672e), 
                          ACE_NTOHL (0x6f72672f), 
                          ACE_NTOHL (0x434f5242), 
                          ACE_NTOHL (0x412f436f), 
                          ACE_NTOHL (0x6e746578), 
                          ACE_NTOHL (0x74496453), 
                          ACE_NTOHL (0x65713a31), 
                          ACE_NTOHL (0x2e300000),  // repository ID = IDL:omg.org/CORBA/ContextIdSeq:1.0
                                                    13,
                          ACE_NTOHL (0x436f6e74), 
                          ACE_NTOHL (0x65787449), 
                          ACE_NTOHL (0x64536571), 
                          ACE_NTOHL (0x0),  // name = ContextIdSeq
                                                    CORBA::tk_sequence, // typecode kind
                          164, // encapsulation length
                            TAO_ENCAP_BYTE_ORDER, // byte order
                            CORBA::tk_alias, // typecode kind for typedefs
                            148, // encapsulation length
                              TAO_ENCAP_BYTE_ORDER, // byte order
                              40,
                              ACE_NTOHL (0x49444c3a), 
                              ACE_NTOHL (0x6f6d672e), 
                              ACE_NTOHL (0x6f72672f), 
                              ACE_NTOHL (0x434f5242), 
                              ACE_NTOHL (0x412f436f), 
                              ACE_NTOHL (0x6e746578), 
                              ACE_NTOHL (0x74496465), 
                              ACE_NTOHL (0x6e746966), 
                              ACE_NTOHL (0x6965723a), 
                              ACE_NTOHL (0x312e3000),  // repository ID = IDL:omg.org/CORBA/ContextIdentifier:1.0
                                                            18,
                              ACE_NTOHL (0x436f6e74), 
                              ACE_NTOHL (0x65787449), 
                              ACE_NTOHL (0x64656e74), 
                              ACE_NTOHL (0x69666965), 
                              ACE_NTOHL (0x72000000),  // name = ContextIdentifier
                                                            CORBA::tk_alias, // typecode kind for typedefs
                              68, // encapsulation length
                                TAO_ENCAP_BYTE_ORDER, // byte order
                                33,
                                ACE_NTOHL (0x49444c3a), 
                                ACE_NTOHL (0x6f6d672e), 
                                ACE_NTOHL (0x6f72672f), 
                                ACE_NTOHL (0x434f5242), 
                                ACE_NTOHL (0x412f4964), 
                                ACE_NTOHL (0x656e7469), 
                                ACE_NTOHL (0x66696572), 
                                ACE_NTOHL (0x3a312e30), 
                                ACE_NTOHL (0x0),  // repository ID = IDL:omg.org/CORBA/Identifier:1.0
                                                                11,
                                ACE_NTOHL (0x4964656e), 
                                ACE_NTOHL (0x74696669), 
                                ACE_NTOHL (0x65720000),  // name = Identifier
                                                                CORBA::tk_string, 
                                0U, // string length


                            0U,


                        11,
                        ACE_NTOHL (0x70617261), 
                        ACE_NTOHL (0x6d657465), 
                        ACE_NTOHL (0x72730000),  // name = parameters
                                                CORBA::tk_alias, // typecode kind for typedefs
                        496, // encapsulation length
                          TAO_ENCAP_BYTE_ORDER, // byte order
                          40,
                          ACE_NTOHL (0x49444c3a), 
                          ACE_NTOHL (0x6f6d672e), 
                          ACE_NTOHL (0x6f72672f), 
                          ACE_NTOHL (0x434f5242), 
                          ACE_NTOHL (0x412f5061), 
                          ACE_NTOHL (0x72446573), 
                          ACE_NTOHL (0x63726970), 
                          ACE_NTOHL (0x74696f6e), 
                          ACE_NTOHL (0x5365713a), 
                          ACE_NTOHL (0x312e3000),  // repository ID = IDL:omg.org/CORBA/ParDescriptionSeq:1.0
                                                    18,
                          ACE_NTOHL (0x50617244), 
                          ACE_NTOHL (0x65736372), 
                          ACE_NTOHL (0x69707469), 
                          ACE_NTOHL (0x6f6e5365), 
                          ACE_NTOHL (0x71000000),  // name = ParDescriptionSeq
                                                    CORBA::tk_sequence, // typecode kind
                          416, // encapsulation length
                            TAO_ENCAP_BYTE_ORDER, // byte order
                            CORBA::tk_struct, // typecode kind
                            400, // encapsulation length
                              TAO_ENCAP_BYTE_ORDER, // byte order
                              43,
                              ACE_NTOHL (0x49444c3a), 
                              ACE_NTOHL (0x6f6d672e), 
                              ACE_NTOHL (0x6f72672f), 
                              ACE_NTOHL (0x434f5242), 
                              ACE_NTOHL (0x412f5061), 
                              ACE_NTOHL (0x72616d65), 
                              ACE_NTOHL (0x74657244), 
                              ACE_NTOHL (0x65736372), 
                              ACE_NTOHL (0x69707469), 
                              ACE_NTOHL (0x6f6e3a31), 
                              ACE_NTOHL (0x2e300000),  // repository ID = IDL:omg.org/CORBA/ParameterDescription:1.0
                                                            21,
                              ACE_NTOHL (0x50617261), 
                              ACE_NTOHL (0x6d657465), 
                              ACE_NTOHL (0x72446573), 
                              ACE_NTOHL (0x63726970), 
                              ACE_NTOHL (0x74696f6e), 
                              ACE_NTOHL (0x0),  // name = ParameterDescription
                              4, // member count
                                                            5,
                              ACE_NTOHL (0x6e616d65), 
                              ACE_NTOHL (0x0),  // name = name
                                                            CORBA::tk_alias, // typecode kind for typedefs
                              68, // encapsulation length
                                TAO_ENCAP_BYTE_ORDER, // byte order
                                33,
                                ACE_NTOHL (0x49444c3a), 
                                ACE_NTOHL (0x6f6d672e), 
                                ACE_NTOHL (0x6f72672f), 
                                ACE_NTOHL (0x434f5242), 
                                ACE_NTOHL (0x412f4964), 
                                ACE_NTOHL (0x656e7469), 
                                ACE_NTOHL (0x66696572), 
                                ACE_NTOHL (0x3a312e30), 
                                ACE_NTOHL (0x0),  // repository ID = IDL:omg.org/CORBA/Identifier:1.0
                                                                11,
                                ACE_NTOHL (0x4964656e), 
                                ACE_NTOHL (0x74696669), 
                                ACE_NTOHL (0x65720000),  // name = Identifier
                                                                CORBA::tk_string, 
                                0U, // string length

                              5,
                              ACE_NTOHL (0x74797065), 
                              ACE_NTOHL (0x0),  // name = type
                                                            CORBA::tk_TypeCode,

                              9,
                              ACE_NTOHL (0x74797065), 
                              ACE_NTOHL (0x5f646566), 
                              ACE_NTOHL (0x0),  // name = type_def
                                                            CORBA::tk_objref, // typecode kind
                              52, // encapsulation length
                                TAO_ENCAP_BYTE_ORDER, // byte order
                                30,
                                ACE_NTOHL (0x49444c3a), 
                                ACE_NTOHL (0x6f6d672e), 
                                ACE_NTOHL (0x6f72672f), 
                                ACE_NTOHL (0x434f5242), 
                                ACE_NTOHL (0x412f4944), 
                                ACE_NTOHL (0x4c547970), 
                                ACE_NTOHL (0x653a312e), 
                                ACE_NTOHL (0x30000000),  // repository ID = IDL:omg.org/CORBA/IDLType:1.0
                                                                8,
                                ACE_NTOHL (0x49444c54), 
                                ACE_NTOHL (0x79706500),  // name = IDLType
                                
                              5,
                              ACE_NTOHL (0x6d6f6465), 
                              ACE_NTOHL (0x0),  // name = mode
                                                            CORBA::tk_enum, // typecode kind
                              116, // encapsulation length
TAO_ENCAP_BYTE_ORDER, // byte order
                                36,
                                ACE_NTOHL (0x49444c3a), 
                                ACE_NTOHL (0x6f6d672e), 
                                ACE_NTOHL (0x6f72672f), 
                                ACE_NTOHL (0x434f5242), 
                                ACE_NTOHL (0x412f5061), 
                                ACE_NTOHL (0x72616d65), 
                                ACE_NTOHL (0x7465724d), 
                                ACE_NTOHL (0x6f64653a), 
                                ACE_NTOHL (0x312e3000),  // repository ID = IDL:omg.org/CORBA/ParameterMode:1.0
                                14,
                                ACE_NTOHL (0x50617261), 
                                ACE_NTOHL (0x6d657465), 
                                ACE_NTOHL (0x724d6f64), 
                                ACE_NTOHL (0x65000000),  // name = ParameterMode
                                3, // member count
                                9,
                                ACE_NTOHL (0x50415241), 
                                ACE_NTOHL (0x4d5f494e), 
                                ACE_NTOHL (0x0),  // name = PARAM_IN
                                10,
                                ACE_NTOHL (0x50415241), 
                                ACE_NTOHL (0x4d5f4f55), 
                                ACE_NTOHL (0x54000000),  // name = PARAM_OUT
                                12,
                                ACE_NTOHL (0x50415241), 
                                ACE_NTOHL (0x4d5f494e), 
                                ACE_NTOHL (0x4f555400),  // name = PARAM_INOUT
                                

                            0U,


                        11,
                        ACE_NTOHL (0x65786365), 
                        ACE_NTOHL (0x7074696f), 
                        ACE_NTOHL (0x6e730000),  // name = exceptions
                                                CORBA::tk_alias, // typecode kind for typedefs
                        556, // encapsulation length
                          TAO_ENCAP_BYTE_ORDER, // byte order
                          40,
                          ACE_NTOHL (0x49444c3a), 
                          ACE_NTOHL (0x6f6d672e), 
                          ACE_NTOHL (0x6f72672f), 
                          ACE_NTOHL (0x434f5242), 
                          ACE_NTOHL (0x412f4578), 
                          ACE_NTOHL (0x63446573), 
                          ACE_NTOHL (0x63726970), 
                          ACE_NTOHL (0x74696f6e), 
                          ACE_NTOHL (0x5365713a), 
                          ACE_NTOHL (0x312e3000),  // repository ID = IDL:omg.org/CORBA/ExcDescriptionSeq:1.0
                                                    18,
                          ACE_NTOHL (0x45786344), 
                          ACE_NTOHL (0x65736372), 
                          ACE_NTOHL (0x69707469), 
                          ACE_NTOHL (0x6f6e5365), 
                          ACE_NTOHL (0x71000000),  // name = ExcDescriptionSeq
                                                    CORBA::tk_sequence, // typecode kind
                          476, // encapsulation length
                            TAO_ENCAP_BYTE_ORDER, // byte order
                            CORBA::tk_struct, // typecode kind
                            460, // encapsulation length
                              TAO_ENCAP_BYTE_ORDER, // byte order
                              43,
                              ACE_NTOHL (0x49444c3a), 
                              ACE_NTOHL (0x6f6d672e), 
                              ACE_NTOHL (0x6f72672f), 
                              ACE_NTOHL (0x434f5242), 
                              ACE_NTOHL (0x412f4578), 
                              ACE_NTOHL (0x63657074), 
                              ACE_NTOHL (0x696f6e44), 
                              ACE_NTOHL (0x65736372), 
                              ACE_NTOHL (0x69707469), 
                              ACE_NTOHL (0x6f6e3a31), 
                              ACE_NTOHL (0x2e300000),  // repository ID = IDL:omg.org/CORBA/ExceptionDescription:1.0
                                                            21,
                              ACE_NTOHL (0x45786365), 
                              ACE_NTOHL (0x7074696f), 
                              ACE_NTOHL (0x6e446573), 
                              ACE_NTOHL (0x63726970), 
                              ACE_NTOHL (0x74696f6e), 
                              ACE_NTOHL (0x0),  // name = ExceptionDescription
                              5, // member count
                                                            5,
                              ACE_NTOHL (0x6e616d65), 
                              ACE_NTOHL (0x0),  // name = name
                                                            CORBA::tk_alias, // typecode kind for typedefs
                              68, // encapsulation length
                                TAO_ENCAP_BYTE_ORDER, // byte order
                                33,
                                ACE_NTOHL (0x49444c3a), 
                                ACE_NTOHL (0x6f6d672e), 
                                ACE_NTOHL (0x6f72672f), 
                                ACE_NTOHL (0x434f5242), 
                                ACE_NTOHL (0x412f4964), 
                                ACE_NTOHL (0x656e7469), 
                                ACE_NTOHL (0x66696572), 
                                ACE_NTOHL (0x3a312e30), 
                                ACE_NTOHL (0x0),  // repository ID = IDL:omg.org/CORBA/Identifier:1.0
                                                                11,
                                ACE_NTOHL (0x4964656e), 
                                ACE_NTOHL (0x74696669), 
                                ACE_NTOHL (0x65720000),  // name = Identifier
                                                                CORBA::tk_string, 
                                0U, // string length

                              3,
                              ACE_NTOHL (0x69640000),  // name = id
                                                            CORBA::tk_alias, // typecode kind for typedefs
                              72, // encapsulation length
                                TAO_ENCAP_BYTE_ORDER, // byte order
                                35,
                                ACE_NTOHL (0x49444c3a), 
                                ACE_NTOHL (0x6f6d672e), 
                                ACE_NTOHL (0x6f72672f), 
                                ACE_NTOHL (0x434f5242), 
                                ACE_NTOHL (0x412f5265), 
                                ACE_NTOHL (0x706f7369), 
                                ACE_NTOHL (0x746f7279), 
                                ACE_NTOHL (0x49643a31), 
                                ACE_NTOHL (0x2e300000),  // repository ID = IDL:omg.org/CORBA/RepositoryId:1.0
                                                                13,
                                ACE_NTOHL (0x5265706f), 
                                ACE_NTOHL (0x7369746f), 
                                ACE_NTOHL (0x72794964), 
                                ACE_NTOHL (0x0),  // name = RepositoryId
                                                                CORBA::tk_string, 
                                0U, // string length

                              11,
                              ACE_NTOHL (0x64656669), 
                              ACE_NTOHL (0x6e65645f), 
                              ACE_NTOHL (0x696e0000),  // name = defined_in
                                                            CORBA::tk_alias, // typecode kind for typedefs
                              72, // encapsulation length
                                TAO_ENCAP_BYTE_ORDER, // byte order
                                35,
                                ACE_NTOHL (0x49444c3a), 
                                ACE_NTOHL (0x6f6d672e), 
                                ACE_NTOHL (0x6f72672f), 
                                ACE_NTOHL (0x434f5242), 
                                ACE_NTOHL (0x412f5265), 
                                ACE_NTOHL (0x706f7369), 
                                ACE_NTOHL (0x746f7279), 
                                ACE_NTOHL (0x49643a31), 
                                ACE_NTOHL (0x2e300000),  // repository ID = IDL:omg.org/CORBA/RepositoryId:1.0
                                                                13,
                                ACE_NTOHL (0x5265706f), 
                                ACE_NTOHL (0x7369746f), 
                                ACE_NTOHL (0x72794964), 
                                ACE_NTOHL (0x0),  // name = RepositoryId
                                                                CORBA::tk_string, 
                                0U, // string length

                              8,
                              ACE_NTOHL (0x76657273), 
                              ACE_NTOHL (0x696f6e00),  // name = version
                                                            CORBA::tk_alias, // typecode kind for typedefs
                              68, // encapsulation length
                                TAO_ENCAP_BYTE_ORDER, // byte order
                                34,
                                ACE_NTOHL (0x49444c3a), 
                                ACE_NTOHL (0x6f6d672e), 
                                ACE_NTOHL (0x6f72672f), 
                                ACE_NTOHL (0x434f5242), 
                                ACE_NTOHL (0x412f5665), 
                                ACE_NTOHL (0x7273696f), 
                                ACE_NTOHL (0x6e537065), 
                                ACE_NTOHL (0x633a312e), 
                                ACE_NTOHL (0x30000000),  // repository ID = IDL:omg.org/CORBA/VersionSpec:1.0
                                                                12,
                                ACE_NTOHL (0x56657273), 
                                ACE_NTOHL (0x696f6e53), 
                                ACE_NTOHL (0x70656300),  // name = VersionSpec
                                                                CORBA::tk_string, 
                                0U, // string length

                              5,
                              ACE_NTOHL (0x74797065), 
                              ACE_NTOHL (0x0),  // name = type
                                                            CORBA::tk_TypeCode,


                            0U,



                      0U,


                  8,
                  ACE_NTOHL (0x66696e64), 
                  ACE_NTOHL (0x65727300),  // name = finders
                                    CORBA::tk_alias, // typecode kind for typedefs
                  2036, // encapsulation length
                    TAO_ENCAP_BYTE_ORDER, // byte order
                    39,
                    ACE_NTOHL (0x49444c3a), 
                    ACE_NTOHL (0x6f6d672e), 
                    ACE_NTOHL (0x6f72672f), 
                    ACE_NTOHL (0x434f5242), 
                    ACE_NTOHL (0x412f4f70), 
                    ACE_NTOHL (0x44657363), 
                    ACE_NTOHL (0x72697074), 
                    ACE_NTOHL (0x696f6e53), 
                    ACE_NTOHL (0x65713a31), 
                    ACE_NTOHL (0x2e300000),  // repository ID = IDL:omg.org/CORBA/OpDescriptionSeq:1.0
                                        17,
                    ACE_NTOHL (0x4f704465), 
                    ACE_NTOHL (0x73637269), 
                    ACE_NTOHL (0x7074696f), 
                    ACE_NTOHL (0x6e536571), 
                    ACE_NTOHL (0x0),  // name = OpDescriptionSeq
                                        CORBA::tk_sequence, // typecode kind
                    1956, // encapsulation length
                      TAO_ENCAP_BYTE_ORDER, // byte order
                      CORBA::tk_struct, // typecode kind
                      1940, // encapsulation length
                        TAO_ENCAP_BYTE_ORDER, // byte order
                        43,
                        ACE_NTOHL (0x49444c3a), 
                        ACE_NTOHL (0x6f6d672e), 
                        ACE_NTOHL (0x6f72672f), 
                        ACE_NTOHL (0x434f5242), 
                        ACE_NTOHL (0x412f4f70), 
                        ACE_NTOHL (0x65726174), 
                        ACE_NTOHL (0x696f6e44), 
                        ACE_NTOHL (0x65736372), 
                        ACE_NTOHL (0x69707469), 
                        ACE_NTOHL (0x6f6e3a31), 
                        ACE_NTOHL (0x2e300000),  // repository ID = IDL:omg.org/CORBA/OperationDescription:1.0
                                                21,
                        ACE_NTOHL (0x4f706572), 
                        ACE_NTOHL (0x6174696f), 
                        ACE_NTOHL (0x6e446573), 
                        ACE_NTOHL (0x63726970), 
                        ACE_NTOHL (0x74696f6e), 
                        ACE_NTOHL (0x0),  // name = OperationDescription
                        9, // member count
                                                5,
                        ACE_NTOHL (0x6e616d65), 
                        ACE_NTOHL (0x0),  // name = name
                                                CORBA::tk_alias, // typecode kind for typedefs
                        68, // encapsulation length
                          TAO_ENCAP_BYTE_ORDER, // byte order
                          33,
                          ACE_NTOHL (0x49444c3a), 
                          ACE_NTOHL (0x6f6d672e), 
                          ACE_NTOHL (0x6f72672f), 
                          ACE_NTOHL (0x434f5242), 
                          ACE_NTOHL (0x412f4964), 
                          ACE_NTOHL (0x656e7469), 
                          ACE_NTOHL (0x66696572), 
                          ACE_NTOHL (0x3a312e30), 
                          ACE_NTOHL (0x0),  // repository ID = IDL:omg.org/CORBA/Identifier:1.0
                                                    11,
                          ACE_NTOHL (0x4964656e), 
                          ACE_NTOHL (0x74696669), 
                          ACE_NTOHL (0x65720000),  // name = Identifier
                                                    CORBA::tk_string, 
                          0U, // string length

                        3,
                        ACE_NTOHL (0x69640000),  // name = id
                                                CORBA::tk_alias, // typecode kind for typedefs
                        72, // encapsulation length
                          TAO_ENCAP_BYTE_ORDER, // byte order
                          35,
                          ACE_NTOHL (0x49444c3a), 
                          ACE_NTOHL (0x6f6d672e), 
                          ACE_NTOHL (0x6f72672f), 
                          ACE_NTOHL (0x434f5242), 
                          ACE_NTOHL (0x412f5265), 
                          ACE_NTOHL (0x706f7369), 
                          ACE_NTOHL (0x746f7279), 
                          ACE_NTOHL (0x49643a31), 
                          ACE_NTOHL (0x2e300000),  // repository ID = IDL:omg.org/CORBA/RepositoryId:1.0
                                                    13,
                          ACE_NTOHL (0x5265706f), 
                          ACE_NTOHL (0x7369746f), 
                          ACE_NTOHL (0x72794964), 
                          ACE_NTOHL (0x0),  // name = RepositoryId
                                                    CORBA::tk_string, 
                          0U, // string length

                        11,
                        ACE_NTOHL (0x64656669), 
                        ACE_NTOHL (0x6e65645f), 
                        ACE_NTOHL (0x696e0000),  // name = defined_in
                                                CORBA::tk_alias, // typecode kind for typedefs
                        72, // encapsulation length
                          TAO_ENCAP_BYTE_ORDER, // byte order
                          35,
                          ACE_NTOHL (0x49444c3a), 
                          ACE_NTOHL (0x6f6d672e), 
                          ACE_NTOHL (0x6f72672f), 
                          ACE_NTOHL (0x434f5242), 
                          ACE_NTOHL (0x412f5265), 
                          ACE_NTOHL (0x706f7369), 
                          ACE_NTOHL (0x746f7279), 
                          ACE_NTOHL (0x49643a31), 
                          ACE_NTOHL (0x2e300000),  // repository ID = IDL:omg.org/CORBA/RepositoryId:1.0
                                                    13,
                          ACE_NTOHL (0x5265706f), 
                          ACE_NTOHL (0x7369746f), 
                          ACE_NTOHL (0x72794964), 
                          ACE_NTOHL (0x0),  // name = RepositoryId
                                                    CORBA::tk_string, 
                          0U, // string length

                        8,
                        ACE_NTOHL (0x76657273), 
                        ACE_NTOHL (0x696f6e00),  // name = version
                                                CORBA::tk_alias, // typecode kind for typedefs
                        68, // encapsulation length
                          TAO_ENCAP_BYTE_ORDER, // byte order
                          34,
                          ACE_NTOHL (0x49444c3a), 
                          ACE_NTOHL (0x6f6d672e), 
                          ACE_NTOHL (0x6f72672f), 
                          ACE_NTOHL (0x434f5242), 
                          ACE_NTOHL (0x412f5665), 
                          ACE_NTOHL (0x7273696f), 
                          ACE_NTOHL (0x6e537065), 
                          ACE_NTOHL (0x633a312e), 
                          ACE_NTOHL (0x30000000),  // repository ID = IDL:omg.org/CORBA/VersionSpec:1.0
                                                    12,
                          ACE_NTOHL (0x56657273), 
                          ACE_NTOHL (0x696f6e53), 
                          ACE_NTOHL (0x70656300),  // name = VersionSpec
                                                    CORBA::tk_string, 
                          0U, // string length

                        7,
                        ACE_NTOHL (0x72657375), 
                        ACE_NTOHL (0x6c740000),  // name = result
                                                CORBA::tk_TypeCode,

                        5,
                        ACE_NTOHL (0x6d6f6465), 
                        ACE_NTOHL (0x0),  // name = mode
                                                CORBA::tk_enum, // typecode kind
                        100, // encapsulation length
TAO_ENCAP_BYTE_ORDER, // byte order
                          36,
                          ACE_NTOHL (0x49444c3a), 
                          ACE_NTOHL (0x6f6d672e), 
                          ACE_NTOHL (0x6f72672f), 
                          ACE_NTOHL (0x434f5242), 
                          ACE_NTOHL (0x412f4f70), 
                          ACE_NTOHL (0x65726174), 
                          ACE_NTOHL (0x696f6e4d), 
                          ACE_NTOHL (0x6f64653a), 
                          ACE_NTOHL (0x312e3000),  // repository ID = IDL:omg.org/CORBA/OperationMode:1.0
                          14,
                          ACE_NTOHL (0x4f706572), 
                          ACE_NTOHL (0x6174696f), 
                          ACE_NTOHL (0x6e4d6f64), 
                          ACE_NTOHL (0x65000000),  // name = OperationMode
                          2, // member count
                          10,
                          ACE_NTOHL (0x4f505f4e), 
                          ACE_NTOHL (0x4f524d41), 
                          ACE_NTOHL (0x4c000000),  // name = OP_NORMAL
                          10,
                          ACE_NTOHL (0x4f505f4f), 
                          ACE_NTOHL (0x4e455741), 
                          ACE_NTOHL (0x59000000),  // name = OP_ONEWAY
                          
                        9,
                        ACE_NTOHL (0x636f6e74), 
                        ACE_NTOHL (0x65787473), 
                        ACE_NTOHL (0x0),  // name = contexts
                                                CORBA::tk_alias, // typecode kind for typedefs
                        236, // encapsulation length
                          TAO_ENCAP_BYTE_ORDER, // byte order
                          35,
                          ACE_NTOHL (0x49444c3a), 
                          ACE_NTOHL (0x6f6d672e), 
                          ACE_NTOHL (0x6f72672f), 
                          ACE_NTOHL (0x434f5242), 
                          ACE_NTOHL (0x412f436f), 
                          ACE_NTOHL (0x6e746578), 
                          ACE_NTOHL (0x74496453), 
                          ACE_NTOHL (0x65713a31), 
                          ACE_NTOHL (0x2e300000),  // repository ID = IDL:omg.org/CORBA/ContextIdSeq:1.0
                                                    13,
                          ACE_NTOHL (0x436f6e74), 
                          ACE_NTOHL (0x65787449), 
                          ACE_NTOHL (0x64536571), 
                          ACE_NTOHL (0x0),  // name = ContextIdSeq
                                                    CORBA::tk_sequence, // typecode kind
                          164, // encapsulation length
                            TAO_ENCAP_BYTE_ORDER, // byte order
                            CORBA::tk_alias, // typecode kind for typedefs
                            148, // encapsulation length
                              TAO_ENCAP_BYTE_ORDER, // byte order
                              40,
                              ACE_NTOHL (0x49444c3a), 
                              ACE_NTOHL (0x6f6d672e), 
                              ACE_NTOHL (0x6f72672f), 
                              ACE_NTOHL (0x434f5242), 
                              ACE_NTOHL (0x412f436f), 
                              ACE_NTOHL (0x6e746578), 
                              ACE_NTOHL (0x74496465), 
                              ACE_NTOHL (0x6e746966), 
                              ACE_NTOHL (0x6965723a), 
                              ACE_NTOHL (0x312e3000),  // repository ID = IDL:omg.org/CORBA/ContextIdentifier:1.0
                                                            18,
                              ACE_NTOHL (0x436f6e74), 
                              ACE_NTOHL (0x65787449), 
                              ACE_NTOHL (0x64656e74), 
                              ACE_NTOHL (0x69666965), 
                              ACE_NTOHL (0x72000000),  // name = ContextIdentifier
                                                            CORBA::tk_alias, // typecode kind for typedefs
                              68, // encapsulation length
                                TAO_ENCAP_BYTE_ORDER, // byte order
                                33,
                                ACE_NTOHL (0x49444c3a), 
                                ACE_NTOHL (0x6f6d672e), 
                                ACE_NTOHL (0x6f72672f), 
                                ACE_NTOHL (0x434f5242), 
                                ACE_NTOHL (0x412f4964), 
                                ACE_NTOHL (0x656e7469), 
                                ACE_NTOHL (0x66696572), 
                                ACE_NTOHL (0x3a312e30), 
                                ACE_NTOHL (0x0),  // repository ID = IDL:omg.org/CORBA/Identifier:1.0
                                                                11,
                                ACE_NTOHL (0x4964656e), 
                                ACE_NTOHL (0x74696669), 
                                ACE_NTOHL (0x65720000),  // name = Identifier
                                                                CORBA::tk_string, 
                                0U, // string length


                            0U,


                        11,
                        ACE_NTOHL (0x70617261), 
                        ACE_NTOHL (0x6d657465), 
                        ACE_NTOHL (0x72730000),  // name = parameters
                                                CORBA::tk_alias, // typecode kind for typedefs
                        496, // encapsulation length
                          TAO_ENCAP_BYTE_ORDER, // byte order
                          40,
                          ACE_NTOHL (0x49444c3a), 
                          ACE_NTOHL (0x6f6d672e), 
                          ACE_NTOHL (0x6f72672f), 
                          ACE_NTOHL (0x434f5242), 
                          ACE_NTOHL (0x412f5061), 
                          ACE_NTOHL (0x72446573), 
                          ACE_NTOHL (0x63726970), 
                          ACE_NTOHL (0x74696f6e), 
                          ACE_NTOHL (0x5365713a), 
                          ACE_NTOHL (0x312e3000),  // repository ID = IDL:omg.org/CORBA/ParDescriptionSeq:1.0
                                                    18,
                          ACE_NTOHL (0x50617244), 
                          ACE_NTOHL (0x65736372), 
                          ACE_NTOHL (0x69707469), 
                          ACE_NTOHL (0x6f6e5365), 
                          ACE_NTOHL (0x71000000),  // name = ParDescriptionSeq
                                                    CORBA::tk_sequence, // typecode kind
                          416, // encapsulation length
                            TAO_ENCAP_BYTE_ORDER, // byte order
                            CORBA::tk_struct, // typecode kind
                            400, // encapsulation length
                              TAO_ENCAP_BYTE_ORDER, // byte order
                              43,
                              ACE_NTOHL (0x49444c3a), 
                              ACE_NTOHL (0x6f6d672e), 
                              ACE_NTOHL (0x6f72672f), 
                              ACE_NTOHL (0x434f5242), 
                              ACE_NTOHL (0x412f5061), 
                              ACE_NTOHL (0x72616d65), 
                              ACE_NTOHL (0x74657244), 
                              ACE_NTOHL (0x65736372), 
                              ACE_NTOHL (0x69707469), 
                              ACE_NTOHL (0x6f6e3a31), 
                              ACE_NTOHL (0x2e300000),  // repository ID = IDL:omg.org/CORBA/ParameterDescription:1.0
                                                            21,
                              ACE_NTOHL (0x50617261), 
                              ACE_NTOHL (0x6d657465), 
                              ACE_NTOHL (0x72446573), 
                              ACE_NTOHL (0x63726970), 
                              ACE_NTOHL (0x74696f6e), 
                              ACE_NTOHL (0x0),  // name = ParameterDescription
                              4, // member count
                                                            5,
                              ACE_NTOHL (0x6e616d65), 
                              ACE_NTOHL (0x0),  // name = name
                                                            CORBA::tk_alias, // typecode kind for typedefs
                              68, // encapsulation length
                                TAO_ENCAP_BYTE_ORDER, // byte order
                                33,
                                ACE_NTOHL (0x49444c3a), 
                                ACE_NTOHL (0x6f6d672e), 
                                ACE_NTOHL (0x6f72672f), 
                                ACE_NTOHL (0x434f5242), 
                                ACE_NTOHL (0x412f4964), 
                                ACE_NTOHL (0x656e7469), 
                                ACE_NTOHL (0x66696572), 
                                ACE_NTOHL (0x3a312e30), 
                                ACE_NTOHL (0x0),  // repository ID = IDL:omg.org/CORBA/Identifier:1.0
                                                                11,
                                ACE_NTOHL (0x4964656e), 
                                ACE_NTOHL (0x74696669), 
                                ACE_NTOHL (0x65720000),  // name = Identifier
                                                                CORBA::tk_string, 
                                0U, // string length

                              5,
                              ACE_NTOHL (0x74797065), 
                              ACE_NTOHL (0x0),  // name = type
                                                            CORBA::tk_TypeCode,

                              9,
                              ACE_NTOHL (0x74797065), 
                              ACE_NTOHL (0x5f646566), 
                              ACE_NTOHL (0x0),  // name = type_def
                                                            CORBA::tk_objref, // typecode kind
                              52, // encapsulation length
                                TAO_ENCAP_BYTE_ORDER, // byte order
                                30,
                                ACE_NTOHL (0x49444c3a), 
                                ACE_NTOHL (0x6f6d672e), 
                                ACE_NTOHL (0x6f72672f), 
                                ACE_NTOHL (0x434f5242), 
                                ACE_NTOHL (0x412f4944), 
                                ACE_NTOHL (0x4c547970), 
                                ACE_NTOHL (0x653a312e), 
                                ACE_NTOHL (0x30000000),  // repository ID = IDL:omg.org/CORBA/IDLType:1.0
                                                                8,
                                ACE_NTOHL (0x49444c54), 
                                ACE_NTOHL (0x79706500),  // name = IDLType
                                
                              5,
                              ACE_NTOHL (0x6d6f6465), 
                              ACE_NTOHL (0x0),  // name = mode
                                                            CORBA::tk_enum, // typecode kind
                              116, // encapsulation length
TAO_ENCAP_BYTE_ORDER, // byte order
                                36,
                                ACE_NTOHL (0x49444c3a), 
                                ACE_NTOHL (0x6f6d672e), 
                                ACE_NTOHL (0x6f72672f), 
                                ACE_NTOHL (0x434f5242), 
                                ACE_NTOHL (0x412f5061), 
                                ACE_NTOHL (0x72616d65), 
                                ACE_NTOHL (0x7465724d), 
                                ACE_NTOHL (0x6f64653a), 
                                ACE_NTOHL (0x312e3000),  // repository ID = IDL:omg.org/CORBA/ParameterMode:1.0
                                14,
                                ACE_NTOHL (0x50617261), 
                                ACE_NTOHL (0x6d657465), 
                                ACE_NTOHL (0x724d6f64), 
                                ACE_NTOHL (0x65000000),  // name = ParameterMode
                                3, // member count
                                9,
                                ACE_NTOHL (0x50415241), 
                                ACE_NTOHL (0x4d5f494e), 
                                ACE_NTOHL (0x0),  // name = PARAM_IN
                                10,
                                ACE_NTOHL (0x50415241), 
                                ACE_NTOHL (0x4d5f4f55), 
                                ACE_NTOHL (0x54000000),  // name = PARAM_OUT
                                12,
                                ACE_NTOHL (0x50415241), 
                                ACE_NTOHL (0x4d5f494e), 
                                ACE_NTOHL (0x4f555400),  // name = PARAM_INOUT
                                

                            0U,


                        11,
                        ACE_NTOHL (0x65786365), 
                        ACE_NTOHL (0x7074696f), 
                        ACE_NTOHL (0x6e730000),  // name = exceptions
                                                CORBA::tk_alias, // typecode kind for typedefs
                        556, // encapsulation length
                          TAO_ENCAP_BYTE_ORDER, // byte order
                          40,
                          ACE_NTOHL (0x49444c3a), 
                          ACE_NTOHL (0x6f6d672e), 
                          ACE_NTOHL (0x6f72672f), 
                          ACE_NTOHL (0x434f5242), 
                          ACE_NTOHL (0x412f4578), 
                          ACE_NTOHL (0x63446573), 
                          ACE_NTOHL (0x63726970), 
                          ACE_NTOHL (0x74696f6e), 
                          ACE_NTOHL (0x5365713a), 
                          ACE_NTOHL (0x312e3000),  // repository ID = IDL:omg.org/CORBA/ExcDescriptionSeq:1.0
                                                    18,
                          ACE_NTOHL (0x45786344), 
                          ACE_NTOHL (0x65736372), 
                          ACE_NTOHL (0x69707469), 
                          ACE_NTOHL (0x6f6e5365), 
                          ACE_NTOHL (0x71000000),  // name = ExcDescriptionSeq
                                                    CORBA::tk_sequence, // typecode kind
                          476, // encapsulation length
                            TAO_ENCAP_BYTE_ORDER, // byte order
                            CORBA::tk_struct, // typecode kind
                            460, // encapsulation length
                              TAO_ENCAP_BYTE_ORDER, // byte order
                              43,
                              ACE_NTOHL (0x49444c3a), 
                              ACE_NTOHL (0x6f6d672e), 
                              ACE_NTOHL (0x6f72672f), 
                              ACE_NTOHL (0x434f5242), 
                              ACE_NTOHL (0x412f4578), 
                              ACE_NTOHL (0x63657074), 
                              ACE_NTOHL (0x696f6e44), 
                              ACE_NTOHL (0x65736372), 
                              ACE_NTOHL (0x69707469), 
                              ACE_NTOHL (0x6f6e3a31), 
                              ACE_NTOHL (0x2e300000),  // repository ID = IDL:omg.org/CORBA/ExceptionDescription:1.0
                                                            21,
                              ACE_NTOHL (0x45786365), 
                              ACE_NTOHL (0x7074696f), 
                              ACE_NTOHL (0x6e446573), 
                              ACE_NTOHL (0x63726970), 
                              ACE_NTOHL (0x74696f6e), 
                              ACE_NTOHL (0x0),  // name = ExceptionDescription
                              5, // member count
                                                            5,
                              ACE_NTOHL (0x6e616d65), 
                              ACE_NTOHL (0x0),  // name = name
                                                            CORBA::tk_alias, // typecode kind for typedefs
                              68, // encapsulation length
                                TAO_ENCAP_BYTE_ORDER, // byte order
                                33,
                                ACE_NTOHL (0x49444c3a), 
                                ACE_NTOHL (0x6f6d672e), 
                                ACE_NTOHL (0x6f72672f), 
                                ACE_NTOHL (0x434f5242), 
                                ACE_NTOHL (0x412f4964), 
                                ACE_NTOHL (0x656e7469), 
                                ACE_NTOHL (0x66696572), 
                                ACE_NTOHL (0x3a312e30), 
                                ACE_NTOHL (0x0),  // repository ID = IDL:omg.org/CORBA/Identifier:1.0
                                                                11,
                                ACE_NTOHL (0x4964656e), 
                                ACE_NTOHL (0x74696669), 
                                ACE_NTOHL (0x65720000),  // name = Identifier
                                                                CORBA::tk_string, 
                                0U, // string length

                              3,
                              ACE_NTOHL (0x69640000),  // name = id
                                                            CORBA::tk_alias, // typecode kind for typedefs
                              72, // encapsulation length
                                TAO_ENCAP_BYTE_ORDER, // byte order
                                35,
                                ACE_NTOHL (0x49444c3a), 
                                ACE_NTOHL (0x6f6d672e), 
                                ACE_NTOHL (0x6f72672f), 
                                ACE_NTOHL (0x434f5242), 
                                ACE_NTOHL (0x412f5265), 
                                ACE_NTOHL (0x706f7369), 
                                ACE_NTOHL (0x746f7279), 
                                ACE_NTOHL (0x49643a31), 
                                ACE_NTOHL (0x2e300000),  // repository ID = IDL:omg.org/CORBA/RepositoryId:1.0
                                                                13,
                                ACE_NTOHL (0x5265706f), 
                                ACE_NTOHL (0x7369746f), 
                                ACE_NTOHL (0x72794964), 
                                ACE_NTOHL (0x0),  // name = RepositoryId
                                                                CORBA::tk_string, 
                                0U, // string length

                              11,
                              ACE_NTOHL (0x64656669), 
                              ACE_NTOHL (0x6e65645f), 
                              ACE_NTOHL (0x696e0000),  // name = defined_in
                                                            CORBA::tk_alias, // typecode kind for typedefs
                              72, // encapsulation length
                                TAO_ENCAP_BYTE_ORDER, // byte order
                                35,
                                ACE_NTOHL (0x49444c3a), 
                                ACE_NTOHL (0x6f6d672e), 
                                ACE_NTOHL (0x6f72672f), 
                                ACE_NTOHL (0x434f5242), 
                                ACE_NTOHL (0x412f5265), 
                                ACE_NTOHL (0x706f7369), 
                                ACE_NTOHL (0x746f7279), 
                                ACE_NTOHL (0x49643a31), 
                                ACE_NTOHL (0x2e300000),  // repository ID = IDL:omg.org/CORBA/RepositoryId:1.0
                                                                13,
                                ACE_NTOHL (0x5265706f), 
                                ACE_NTOHL (0x7369746f), 
                                ACE_NTOHL (0x72794964), 
                                ACE_NTOHL (0x0),  // name = RepositoryId
                                                                CORBA::tk_string, 
                                0U, // string length

                              8,
                              ACE_NTOHL (0x76657273), 
                              ACE_NTOHL (0x696f6e00),  // name = version
                                                            CORBA::tk_alias, // typecode kind for typedefs
                              68, // encapsulation length
                                TAO_ENCAP_BYTE_ORDER, // byte order
                                34,
                                ACE_NTOHL (0x49444c3a), 
                                ACE_NTOHL (0x6f6d672e), 
                                ACE_NTOHL (0x6f72672f), 
                                ACE_NTOHL (0x434f5242), 
                                ACE_NTOHL (0x412f5665), 
                                ACE_NTOHL (0x7273696f), 
                                ACE_NTOHL (0x6e537065), 
                                ACE_NTOHL (0x633a312e), 
                                ACE_NTOHL (0x30000000),  // repository ID = IDL:omg.org/CORBA/VersionSpec:1.0
                                                                12,
                                ACE_NTOHL (0x56657273), 
                                ACE_NTOHL (0x696f6e53), 
                                ACE_NTOHL (0x70656300),  // name = VersionSpec
                                                                CORBA::tk_string, 
                                0U, // string length

                              5,
                              ACE_NTOHL (0x74797065), 
                              ACE_NTOHL (0x0),  // name = type
                                                            CORBA::tk_TypeCode,


                            0U,



                      0U,


                  11,
                  ACE_NTOHL (0x6f706572), 
                  ACE_NTOHL (0x6174696f), 
                  ACE_NTOHL (0x6e730000),  // name = operations
                                    CORBA::tk_alias, // typecode kind for typedefs
                  2036, // encapsulation length
                    TAO_ENCAP_BYTE_ORDER, // byte order
                    39,
                    ACE_NTOHL (0x49444c3a), 
                    ACE_NTOHL (0x6f6d672e), 
                    ACE_NTOHL (0x6f72672f), 
                    ACE_NTOHL (0x434f5242), 
                    ACE_NTOHL (0x412f4f70), 
                    ACE_NTOHL (0x44657363), 
                    ACE_NTOHL (0x72697074), 
                    ACE_NTOHL (0x696f6e53), 
                    ACE_NTOHL (0x65713a31), 
                    ACE_NTOHL (0x2e300000),  // repository ID = IDL:omg.org/CORBA/OpDescriptionSeq:1.0
                                        17,
                    ACE_NTOHL (0x4f704465), 
                    ACE_NTOHL (0x73637269), 
                    ACE_NTOHL (0x7074696f), 
                    ACE_NTOHL (0x6e536571), 
                    ACE_NTOHL (0x0),  // name = OpDescriptionSeq
                                        CORBA::tk_sequence, // typecode kind
                    1956, // encapsulation length
                      TAO_ENCAP_BYTE_ORDER, // byte order
                      CORBA::tk_struct, // typecode kind
                      1940, // encapsulation length
                        TAO_ENCAP_BYTE_ORDER, // byte order
                        43,
                        ACE_NTOHL (0x49444c3a), 
                        ACE_NTOHL (0x6f6d672e), 
                        ACE_NTOHL (0x6f72672f), 
                        ACE_NTOHL (0x434f5242), 
                        ACE_NTOHL (0x412f4f70), 
                        ACE_NTOHL (0x65726174), 
                        ACE_NTOHL (0x696f6e44), 
                        ACE_NTOHL (0x65736372), 
                        ACE_NTOHL (0x69707469), 
                        ACE_NTOHL (0x6f6e3a31), 
                        ACE_NTOHL (0x2e300000),  // repository ID = IDL:omg.org/CORBA/OperationDescription:1.0
                                                21,
                        ACE_NTOHL (0x4f706572), 
                        ACE_NTOHL (0x6174696f), 
                        ACE_NTOHL (0x6e446573), 
                        ACE_NTOHL (0x63726970), 
                        ACE_NTOHL (0x74696f6e), 
                        ACE_NTOHL (0x0),  // name = OperationDescription
                        9, // member count
                                                5,
                        ACE_NTOHL (0x6e616d65), 
                        ACE_NTOHL (0x0),  // name = name
                                                CORBA::tk_alias, // typecode kind for typedefs
                        68, // encapsulation length
                          TAO_ENCAP_BYTE_ORDER, // byte order
                          33,
                          ACE_NTOHL (0x49444c3a), 
                          ACE_NTOHL (0x6f6d672e), 
                          ACE_NTOHL (0x6f72672f), 
                          ACE_NTOHL (0x434f5242), 
                          ACE_NTOHL (0x412f4964), 
                          ACE_NTOHL (0x656e7469), 
                          ACE_NTOHL (0x66696572), 
                          ACE_NTOHL (0x3a312e30), 
                          ACE_NTOHL (0x0),  // repository ID = IDL:omg.org/CORBA/Identifier:1.0
                                                    11,
                          ACE_NTOHL (0x4964656e), 
                          ACE_NTOHL (0x74696669), 
                          ACE_NTOHL (0x65720000),  // name = Identifier
                                                    CORBA::tk_string, 
                          0U, // string length

                        3,
                        ACE_NTOHL (0x69640000),  // name = id
                                                CORBA::tk_alias, // typecode kind for typedefs
                        72, // encapsulation length
                          TAO_ENCAP_BYTE_ORDER, // byte order
                          35,
                          ACE_NTOHL (0x49444c3a), 
                          ACE_NTOHL (0x6f6d672e), 
                          ACE_NTOHL (0x6f72672f), 
                          ACE_NTOHL (0x434f5242), 
                          ACE_NTOHL (0x412f5265), 
                          ACE_NTOHL (0x706f7369), 
                          ACE_NTOHL (0x746f7279), 
                          ACE_NTOHL (0x49643a31), 
                          ACE_NTOHL (0x2e300000),  // repository ID = IDL:omg.org/CORBA/RepositoryId:1.0
                                                    13,
                          ACE_NTOHL (0x5265706f), 
                          ACE_NTOHL (0x7369746f), 
                          ACE_NTOHL (0x72794964), 
                          ACE_NTOHL (0x0),  // name = RepositoryId
                                                    CORBA::tk_string, 
                          0U, // string length

                        11,
                        ACE_NTOHL (0x64656669), 
                        ACE_NTOHL (0x6e65645f), 
                        ACE_NTOHL (0x696e0000),  // name = defined_in
                                                CORBA::tk_alias, // typecode kind for typedefs
                        72, // encapsulation length
                          TAO_ENCAP_BYTE_ORDER, // byte order
                          35,
                          ACE_NTOHL (0x49444c3a), 
                          ACE_NTOHL (0x6f6d672e), 
                          ACE_NTOHL (0x6f72672f), 
                          ACE_NTOHL (0x434f5242), 
                          ACE_NTOHL (0x412f5265), 
                          ACE_NTOHL (0x706f7369), 
                          ACE_NTOHL (0x746f7279), 
                          ACE_NTOHL (0x49643a31), 
                          ACE_NTOHL (0x2e300000),  // repository ID = IDL:omg.org/CORBA/RepositoryId:1.0
                                                    13,
                          ACE_NTOHL (0x5265706f), 
                          ACE_NTOHL (0x7369746f), 
                          ACE_NTOHL (0x72794964), 
                          ACE_NTOHL (0x0),  // name = RepositoryId
                                                    CORBA::tk_string, 
                          0U, // string length

                        8,
                        ACE_NTOHL (0x76657273), 
                        ACE_NTOHL (0x696f6e00),  // name = version
                                                CORBA::tk_alias, // typecode kind for typedefs
                        68, // encapsulation length
                          TAO_ENCAP_BYTE_ORDER, // byte order
                          34,
                          ACE_NTOHL (0x49444c3a), 
                          ACE_NTOHL (0x6f6d672e), 
                          ACE_NTOHL (0x6f72672f), 
                          ACE_NTOHL (0x434f5242), 
                          ACE_NTOHL (0x412f5665), 
                          ACE_NTOHL (0x7273696f), 
                          ACE_NTOHL (0x6e537065), 
                          ACE_NTOHL (0x633a312e), 
                          ACE_NTOHL (0x30000000),  // repository ID = IDL:omg.org/CORBA/VersionSpec:1.0
                                                    12,
                          ACE_NTOHL (0x56657273), 
                          ACE_NTOHL (0x696f6e53), 
                          ACE_NTOHL (0x70656300),  // name = VersionSpec
                                                    CORBA::tk_string, 
                          0U, // string length

                        7,
                        ACE_NTOHL (0x72657375), 
                        ACE_NTOHL (0x6c740000),  // name = result
                                                CORBA::tk_TypeCode,

                        5,
                        ACE_NTOHL (0x6d6f6465), 
                        ACE_NTOHL (0x0),  // name = mode
                                                CORBA::tk_enum, // typecode kind
                        100, // encapsulation length
TAO_ENCAP_BYTE_ORDER, // byte order
                          36,
                          ACE_NTOHL (0x49444c3a), 
                          ACE_NTOHL (0x6f6d672e), 
                          ACE_NTOHL (0x6f72672f), 
                          ACE_NTOHL (0x434f5242), 
                          ACE_NTOHL (0x412f4f70), 
                          ACE_NTOHL (0x65726174), 
                          ACE_NTOHL (0x696f6e4d), 
                          ACE_NTOHL (0x6f64653a), 
                          ACE_NTOHL (0x312e3000),  // repository ID = IDL:omg.org/CORBA/OperationMode:1.0
                          14,
                          ACE_NTOHL (0x4f706572), 
                          ACE_NTOHL (0x6174696f), 
                          ACE_NTOHL (0x6e4d6f64), 
                          ACE_NTOHL (0x65000000),  // name = OperationMode
                          2, // member count
                          10,
                          ACE_NTOHL (0x4f505f4e), 
                          ACE_NTOHL (0x4f524d41), 
                          ACE_NTOHL (0x4c000000),  // name = OP_NORMAL
                          10,
                          ACE_NTOHL (0x4f505f4f), 
                          ACE_NTOHL (0x4e455741), 
                          ACE_NTOHL (0x59000000),  // name = OP_ONEWAY
                          
                        9,
                        ACE_NTOHL (0x636f6e74), 
                        ACE_NTOHL (0x65787473), 
                        ACE_NTOHL (0x0),  // name = contexts
                                                CORBA::tk_alias, // typecode kind for typedefs
                        236, // encapsulation length
                          TAO_ENCAP_BYTE_ORDER, // byte order
                          35,
                          ACE_NTOHL (0x49444c3a), 
                          ACE_NTOHL (0x6f6d672e), 
                          ACE_NTOHL (0x6f72672f), 
                          ACE_NTOHL (0x434f5242), 
                          ACE_NTOHL (0x412f436f), 
                          ACE_NTOHL (0x6e746578), 
                          ACE_NTOHL (0x74496453), 
                          ACE_NTOHL (0x65713a31), 
                          ACE_NTOHL (0x2e300000),  // repository ID = IDL:omg.org/CORBA/ContextIdSeq:1.0
                                                    13,
                          ACE_NTOHL (0x436f6e74), 
                          ACE_NTOHL (0x65787449), 
                          ACE_NTOHL (0x64536571), 
                          ACE_NTOHL (0x0),  // name = ContextIdSeq
                                                    CORBA::tk_sequence, // typecode kind
                          164, // encapsulation length
                            TAO_ENCAP_BYTE_ORDER, // byte order
                            CORBA::tk_alias, // typecode kind for typedefs
                            148, // encapsulation length
                              TAO_ENCAP_BYTE_ORDER, // byte order
                              40,
                              ACE_NTOHL (0x49444c3a), 
                              ACE_NTOHL (0x6f6d672e), 
                              ACE_NTOHL (0x6f72672f), 
                              ACE_NTOHL (0x434f5242), 
                              ACE_NTOHL (0x412f436f), 
                              ACE_NTOHL (0x6e746578), 
                              ACE_NTOHL (0x74496465), 
                              ACE_NTOHL (0x6e746966), 
                              ACE_NTOHL (0x6965723a), 
                              ACE_NTOHL (0x312e3000),  // repository ID = IDL:omg.org/CORBA/ContextIdentifier:1.0
                                                            18,
                              ACE_NTOHL (0x436f6e74), 
                              ACE_NTOHL (0x65787449), 
                              ACE_NTOHL (0x64656e74), 
                              ACE_NTOHL (0x69666965), 
                              ACE_NTOHL (0x72000000),  // name = ContextIdentifier
                                                            CORBA::tk_alias, // typecode kind for typedefs
                              68, // encapsulation length
                                TAO_ENCAP_BYTE_ORDER, // byte order
                                33,
                                ACE_NTOHL (0x49444c3a), 
                                ACE_NTOHL (0x6f6d672e), 
                                ACE_NTOHL (0x6f72672f), 
                                ACE_NTOHL (0x434f5242), 
                                ACE_NTOHL (0x412f4964), 
                                ACE_NTOHL (0x656e7469), 
                                ACE_NTOHL (0x66696572), 
                                ACE_NTOHL (0x3a312e30), 
                                ACE_NTOHL (0x0),  // repository ID = IDL:omg.org/CORBA/Identifier:1.0
                                                                11,
                                ACE_NTOHL (0x4964656e), 
                                ACE_NTOHL (0x74696669), 
                                ACE_NTOHL (0x65720000),  // name = Identifier
                                                                CORBA::tk_string, 
                                0U, // string length


                            0U,


                        11,
                        ACE_NTOHL (0x70617261), 
                        ACE_NTOHL (0x6d657465), 
                        ACE_NTOHL (0x72730000),  // name = parameters
                                                CORBA::tk_alias, // typecode kind for typedefs
                        496, // encapsulation length
                          TAO_ENCAP_BYTE_ORDER, // byte order
                          40,
                          ACE_NTOHL (0x49444c3a), 
                          ACE_NTOHL (0x6f6d672e), 
                          ACE_NTOHL (0x6f72672f), 
                          ACE_NTOHL (0x434f5242), 
                          ACE_NTOHL (0x412f5061), 
                          ACE_NTOHL (0x72446573), 
                          ACE_NTOHL (0x63726970), 
                          ACE_NTOHL (0x74696f6e), 
                          ACE_NTOHL (0x5365713a), 
                          ACE_NTOHL (0x312e3000),  // repository ID = IDL:omg.org/CORBA/ParDescriptionSeq:1.0
                                                    18,
                          ACE_NTOHL (0x50617244), 
                          ACE_NTOHL (0x65736372), 
                          ACE_NTOHL (0x69707469), 
                          ACE_NTOHL (0x6f6e5365), 
                          ACE_NTOHL (0x71000000),  // name = ParDescriptionSeq
                                                    CORBA::tk_sequence, // typecode kind
                          416, // encapsulation length
                            TAO_ENCAP_BYTE_ORDER, // byte order
                            CORBA::tk_struct, // typecode kind
                            400, // encapsulation length
                              TAO_ENCAP_BYTE_ORDER, // byte order
                              43,
                              ACE_NTOHL (0x49444c3a), 
                              ACE_NTOHL (0x6f6d672e), 
                              ACE_NTOHL (0x6f72672f), 
                              ACE_NTOHL (0x434f5242), 
                              ACE_NTOHL (0x412f5061), 
                              ACE_NTOHL (0x72616d65), 
                              ACE_NTOHL (0x74657244), 
                              ACE_NTOHL (0x65736372), 
                              ACE_NTOHL (0x69707469), 
                              ACE_NTOHL (0x6f6e3a31), 
                              ACE_NTOHL (0x2e300000),  // repository ID = IDL:omg.org/CORBA/ParameterDescription:1.0
                                                            21,
                              ACE_NTOHL (0x50617261), 
                              ACE_NTOHL (0x6d657465), 
                              ACE_NTOHL (0x72446573), 
                              ACE_NTOHL (0x63726970), 
                              ACE_NTOHL (0x74696f6e), 
                              ACE_NTOHL (0x0),  // name = ParameterDescription
                              4, // member count
                                                            5,
                              ACE_NTOHL (0x6e616d65), 
                              ACE_NTOHL (0x0),  // name = name
                                                            CORBA::tk_alias, // typecode kind for typedefs
                              68, // encapsulation length
                                TAO_ENCAP_BYTE_ORDER, // byte order
                                33,
                                ACE_NTOHL (0x49444c3a), 
                                ACE_NTOHL (0x6f6d672e), 
                                ACE_NTOHL (0x6f72672f), 
                                ACE_NTOHL (0x434f5242), 
                                ACE_NTOHL (0x412f4964), 
                                ACE_NTOHL (0x656e7469), 
                                ACE_NTOHL (0x66696572), 
                                ACE_NTOHL (0x3a312e30), 
                                ACE_NTOHL (0x0),  // repository ID = IDL:omg.org/CORBA/Identifier:1.0
                                                                11,
                                ACE_NTOHL (0x4964656e), 
                                ACE_NTOHL (0x74696669), 
                                ACE_NTOHL (0x65720000),  // name = Identifier
                                                                CORBA::tk_string, 
                                0U, // string length

                              5,
                              ACE_NTOHL (0x74797065), 
                              ACE_NTOHL (0x0),  // name = type
                                                            CORBA::tk_TypeCode,

                              9,
                              ACE_NTOHL (0x74797065), 
                              ACE_NTOHL (0x5f646566), 
                              ACE_NTOHL (0x0),  // name = type_def
                                                            CORBA::tk_objref, // typecode kind
                              52, // encapsulation length
                                TAO_ENCAP_BYTE_ORDER, // byte order
                                30,
                                ACE_NTOHL (0x49444c3a), 
                                ACE_NTOHL (0x6f6d672e), 
                                ACE_NTOHL (0x6f72672f), 
                                ACE_NTOHL (0x434f5242), 
                                ACE_NTOHL (0x412f4944), 
                                ACE_NTOHL (0x4c547970), 
                                ACE_NTOHL (0x653a312e), 
                                ACE_NTOHL (0x30000000),  // repository ID = IDL:omg.org/CORBA/IDLType:1.0
                                                                8,
                                ACE_NTOHL (0x49444c54), 
                                ACE_NTOHL (0x79706500),  // name = IDLType
                                
                              5,
                              ACE_NTOHL (0x6d6f6465), 
                              ACE_NTOHL (0x0),  // name = mode
                                                            CORBA::tk_enum, // typecode kind
                              116, // encapsulation length
TAO_ENCAP_BYTE_ORDER, // byte order
                                36,
                                ACE_NTOHL (0x49444c3a), 
                                ACE_NTOHL (0x6f6d672e), 
                                ACE_NTOHL (0x6f72672f), 
                                ACE_NTOHL (0x434f5242), 
                                ACE_NTOHL (0x412f5061), 
                                ACE_NTOHL (0x72616d65), 
                                ACE_NTOHL (0x7465724d), 
                                ACE_NTOHL (0x6f64653a), 
                                ACE_NTOHL (0x312e3000),  // repository ID = IDL:omg.org/CORBA/ParameterMode:1.0
                                14,
                                ACE_NTOHL (0x50617261), 
                                ACE_NTOHL (0x6d657465), 
                                ACE_NTOHL (0x724d6f64), 
                                ACE_NTOHL (0x65000000),  // name = ParameterMode
                                3, // member count
                                9,
                                ACE_NTOHL (0x50415241), 
                                ACE_NTOHL (0x4d5f494e), 
                                ACE_NTOHL (0x0),  // name = PARAM_IN
                                10,
                                ACE_NTOHL (0x50415241), 
                                ACE_NTOHL (0x4d5f4f55), 
                                ACE_NTOHL (0x54000000),  // name = PARAM_OUT
                                12,
                                ACE_NTOHL (0x50415241), 
                                ACE_NTOHL (0x4d5f494e), 
                                ACE_NTOHL (0x4f555400),  // name = PARAM_INOUT
                                

                            0U,


                        11,
                        ACE_NTOHL (0x65786365), 
                        ACE_NTOHL (0x7074696f), 
                        ACE_NTOHL (0x6e730000),  // name = exceptions
                                                CORBA::tk_alias, // typecode kind for typedefs
                        556, // encapsulation length
                          TAO_ENCAP_BYTE_ORDER, // byte order
                          40,
                          ACE_NTOHL (0x49444c3a), 
                          ACE_NTOHL (0x6f6d672e), 
                          ACE_NTOHL (0x6f72672f), 
                          ACE_NTOHL (0x434f5242), 
                          ACE_NTOHL (0x412f4578), 
                          ACE_NTOHL (0x63446573), 
                          ACE_NTOHL (0x63726970), 
                          ACE_NTOHL (0x74696f6e), 
                          ACE_NTOHL (0x5365713a), 
                          ACE_NTOHL (0x312e3000),  // repository ID = IDL:omg.org/CORBA/ExcDescriptionSeq:1.0
                                                    18,
                          ACE_NTOHL (0x45786344), 
                          ACE_NTOHL (0x65736372), 
                          ACE_NTOHL (0x69707469), 
                          ACE_NTOHL (0x6f6e5365), 
                          ACE_NTOHL (0x71000000),  // name = ExcDescriptionSeq
                                                    CORBA::tk_sequence, // typecode kind
                          476, // encapsulation length
                            TAO_ENCAP_BYTE_ORDER, // byte order
                            CORBA::tk_struct, // typecode kind
                            460, // encapsulation length
                              TAO_ENCAP_BYTE_ORDER, // byte order
                              43,
                              ACE_NTOHL (0x49444c3a), 
                              ACE_NTOHL (0x6f6d672e), 
                              ACE_NTOHL (0x6f72672f), 
                              ACE_NTOHL (0x434f5242), 
                              ACE_NTOHL (0x412f4578), 
                              ACE_NTOHL (0x63657074), 
                              ACE_NTOHL (0x696f6e44), 
                              ACE_NTOHL (0x65736372), 
                              ACE_NTOHL (0x69707469), 
                              ACE_NTOHL (0x6f6e3a31), 
                              ACE_NTOHL (0x2e300000),  // repository ID = IDL:omg.org/CORBA/ExceptionDescription:1.0
                                                            21,
                              ACE_NTOHL (0x45786365), 
                              ACE_NTOHL (0x7074696f), 
                              ACE_NTOHL (0x6e446573), 
                              ACE_NTOHL (0x63726970), 
                              ACE_NTOHL (0x74696f6e), 
                              ACE_NTOHL (0x0),  // name = ExceptionDescription
                              5, // member count
                                                            5,
                              ACE_NTOHL (0x6e616d65), 
                              ACE_NTOHL (0x0),  // name = name
                                                            CORBA::tk_alias, // typecode kind for typedefs
                              68, // encapsulation length
                                TAO_ENCAP_BYTE_ORDER, // byte order
                                33,
                                ACE_NTOHL (0x49444c3a), 
                                ACE_NTOHL (0x6f6d672e), 
                                ACE_NTOHL (0x6f72672f), 
                                ACE_NTOHL (0x434f5242), 
                                ACE_NTOHL (0x412f4964), 
                                ACE_NTOHL (0x656e7469), 
                                ACE_NTOHL (0x66696572), 
                                ACE_NTOHL (0x3a312e30), 
                                ACE_NTOHL (0x0),  // repository ID = IDL:omg.org/CORBA/Identifier:1.0
                                                                11,
                                ACE_NTOHL (0x4964656e), 
                                ACE_NTOHL (0x74696669), 
                                ACE_NTOHL (0x65720000),  // name = Identifier
                                                                CORBA::tk_string, 
                                0U, // string length

                              3,
                              ACE_NTOHL (0x69640000),  // name = id
                                                            CORBA::tk_alias, // typecode kind for typedefs
                              72, // encapsulation length
                                TAO_ENCAP_BYTE_ORDER, // byte order
                                35,
                                ACE_NTOHL (0x49444c3a), 
                                ACE_NTOHL (0x6f6d672e), 
                                ACE_NTOHL (0x6f72672f), 
                                ACE_NTOHL (0x434f5242), 
                                ACE_NTOHL (0x412f5265), 
                                ACE_NTOHL (0x706f7369), 
                                ACE_NTOHL (0x746f7279), 
                                ACE_NTOHL (0x49643a31), 
                                ACE_NTOHL (0x2e300000),  // repository ID = IDL:omg.org/CORBA/RepositoryId:1.0
                                                                13,
                                ACE_NTOHL (0x5265706f), 
                                ACE_NTOHL (0x7369746f), 
                                ACE_NTOHL (0x72794964), 
                                ACE_NTOHL (0x0),  // name = RepositoryId
                                                                CORBA::tk_string, 
                                0U, // string length

                              11,
                              ACE_NTOHL (0x64656669), 
                              ACE_NTOHL (0x6e65645f), 
                              ACE_NTOHL (0x696e0000),  // name = defined_in
                                                            CORBA::tk_alias, // typecode kind for typedefs
                              72, // encapsulation length
                                TAO_ENCAP_BYTE_ORDER, // byte order
                                35,
                                ACE_NTOHL (0x49444c3a), 
                                ACE_NTOHL (0x6f6d672e), 
                                ACE_NTOHL (0x6f72672f), 
                                ACE_NTOHL (0x434f5242), 
                                ACE_NTOHL (0x412f5265), 
                                ACE_NTOHL (0x706f7369), 
                                ACE_NTOHL (0x746f7279), 
                                ACE_NTOHL (0x49643a31), 
                                ACE_NTOHL (0x2e300000),  // repository ID = IDL:omg.org/CORBA/RepositoryId:1.0
                                                                13,
                                ACE_NTOHL (0x5265706f), 
                                ACE_NTOHL (0x7369746f), 
                                ACE_NTOHL (0x72794964), 
                                ACE_NTOHL (0x0),  // name = RepositoryId
                                                                CORBA::tk_string, 
                                0U, // string length

                              8,
                              ACE_NTOHL (0x76657273), 
                              ACE_NTOHL (0x696f6e00),  // name = version
                                                            CORBA::tk_alias, // typecode kind for typedefs
                              68, // encapsulation length
                                TAO_ENCAP_BYTE_ORDER, // byte order
                                34,
                                ACE_NTOHL (0x49444c3a), 
                                ACE_NTOHL (0x6f6d672e), 
                                ACE_NTOHL (0x6f72672f), 
                                ACE_NTOHL (0x434f5242), 
                                ACE_NTOHL (0x412f5665), 
                                ACE_NTOHL (0x7273696f), 
                                ACE_NTOHL (0x6e537065), 
                                ACE_NTOHL (0x633a312e), 
                                ACE_NTOHL (0x30000000),  // repository ID = IDL:omg.org/CORBA/VersionSpec:1.0
                                                                12,
                                ACE_NTOHL (0x56657273), 
                                ACE_NTOHL (0x696f6e53), 
                                ACE_NTOHL (0x70656300),  // name = VersionSpec
                                                                CORBA::tk_string, 
                                0U, // string length

                              5,
                              ACE_NTOHL (0x74797065), 
                              ACE_NTOHL (0x0),  // name = type
                                                            CORBA::tk_TypeCode,


                            0U,



                      0U,


                  11,
                  ACE_NTOHL (0x61747472), 
                  ACE_NTOHL (0x69627574), 
                  ACE_NTOHL (0x65730000),  // name = attributes
                                    CORBA::tk_alias, // typecode kind for typedefs
                  1860, // encapsulation length
                    TAO_ENCAP_BYTE_ORDER, // byte order
                    44,
                    ACE_NTOHL (0x49444c3a), 
                    ACE_NTOHL (0x6f6d672e), 
                    ACE_NTOHL (0x6f72672f), 
                    ACE_NTOHL (0x434f5242), 
                    ACE_NTOHL (0x412f4578), 
                    ACE_NTOHL (0x74417474), 
                    ACE_NTOHL (0x72446573), 
                    ACE_NTOHL (0x63726970), 
                    ACE_NTOHL (0x74696f6e), 
                    ACE_NTOHL (0x5365713a), 
                    ACE_NTOHL (0x312e3000),  // repository ID = IDL:omg.org/CORBA/ExtAttrDescriptionSeq:1.0
                                        22,
                    ACE_NTOHL (0x45787441), 
                    ACE_NTOHL (0x74747244), 
                    ACE_NTOHL (0x65736372), 
                    ACE_NTOHL (0x69707469), 
                    ACE_NTOHL (0x6f6e5365), 
                    ACE_NTOHL (0x71000000),  // name = ExtAttrDescriptionSeq
                                        CORBA::tk_sequence, // typecode kind
                    1772, // encapsulation length
                      TAO_ENCAP_BYTE_ORDER, // byte order
                      CORBA::tk_struct, // typecode kind
                      1756, // encapsulation length
                        TAO_ENCAP_BYTE_ORDER, // byte order
                        46,
                        ACE_NTOHL (0x49444c3a), 
                        ACE_NTOHL (0x6f6d672e), 
                        ACE_NTOHL (0x6f72672f), 
                        ACE_NTOHL (0x434f5242), 
                        ACE_NTOHL (0x412f4578), 
                        ACE_NTOHL (0x74417474), 
                        ACE_NTOHL (0x72696275), 
                        ACE_NTOHL (0x74654465), 
                        ACE_NTOHL (0x73637269), 
                        ACE_NTOHL (0x7074696f), 
                        ACE_NTOHL (0x6e3a312e), 
                        ACE_NTOHL (0x30000000),  // repository ID = IDL:omg.org/CORBA/ExtAttributeDescription:1.0
                                                24,
                        ACE_NTOHL (0x45787441), 
                        ACE_NTOHL (0x74747269), 
                        ACE_NTOHL (0x62757465), 
                        ACE_NTOHL (0x44657363), 
                        ACE_NTOHL (0x72697074), 
                        ACE_NTOHL (0x696f6e00),  // name = ExtAttributeDescription
                        8, // member count
                                                5,
                        ACE_NTOHL (0x6e616d65), 
                        ACE_NTOHL (0x0),  // name = name
                                                CORBA::tk_alias, // typecode kind for typedefs
                        68, // encapsulation length
                          TAO_ENCAP_BYTE_ORDER, // byte order
                          33,
                          ACE_NTOHL (0x49444c3a), 
                          ACE_NTOHL (0x6f6d672e), 
                          ACE_NTOHL (0x6f72672f), 
                          ACE_NTOHL (0x434f5242), 
                          ACE_NTOHL (0x412f4964), 
                          ACE_NTOHL (0x656e7469), 
                          ACE_NTOHL (0x66696572), 
                          ACE_NTOHL (0x3a312e30), 
                          ACE_NTOHL (0x0),  // repository ID = IDL:omg.org/CORBA/Identifier:1.0
                                                    11,
                          ACE_NTOHL (0x4964656e), 
                          ACE_NTOHL (0x74696669), 
                          ACE_NTOHL (0x65720000),  // name = Identifier
                                                    CORBA::tk_string, 
                          0U, // string length

                        3,
                        ACE_NTOHL (0x69640000),  // name = id
                                                CORBA::tk_alias, // typecode kind for typedefs
                        72, // encapsulation length
                          TAO_ENCAP_BYTE_ORDER, // byte order
                          35,
                          ACE_NTOHL (0x49444c3a), 
                          ACE_NTOHL (0x6f6d672e), 
                          ACE_NTOHL (0x6f72672f), 
                          ACE_NTOHL (0x434f5242), 
                          ACE_NTOHL (0x412f5265), 
                          ACE_NTOHL (0x706f7369), 
                          ACE_NTOHL (0x746f7279), 
                          ACE_NTOHL (0x49643a31), 
                          ACE_NTOHL (0x2e300000),  // repository ID = IDL:omg.org/CORBA/RepositoryId:1.0
                                                    13,
                          ACE_NTOHL (0x5265706f), 
                          ACE_NTOHL (0x7369746f), 
                          ACE_NTOHL (0x72794964), 
                          ACE_NTOHL (0x0),  // name = RepositoryId
                                                    CORBA::tk_string, 
                          0U, // string length

                        11,
                        ACE_NTOHL (0x64656669), 
                        ACE_NTOHL (0x6e65645f), 
                        ACE_NTOHL (0x696e0000),  // name = defined_in
                                                CORBA::tk_alias, // typecode kind for typedefs
                        72, // encapsulation length
                          TAO_ENCAP_BYTE_ORDER, // byte order
                          35,
                          ACE_NTOHL (0x49444c3a), 
                          ACE_NTOHL (0x6f6d672e), 
                          ACE_NTOHL (0x6f72672f), 
                          ACE_NTOHL (0x434f5242), 
                          ACE_NTOHL (0x412f5265), 
                          ACE_NTOHL (0x706f7369), 
                          ACE_NTOHL (0x746f7279), 
                          ACE_NTOHL (0x49643a31), 
                          ACE_NTOHL (0x2e300000),  // repository ID = IDL:omg.org/CORBA/RepositoryId:1.0
                                                    13,
                          ACE_NTOHL (0x5265706f), 
                          ACE_NTOHL (0x7369746f), 
                          ACE_NTOHL (0x72794964), 
                          ACE_NTOHL (0x0),  // name = RepositoryId
                                                    CORBA::tk_string, 
                          0U, // string length

                        8,
                        ACE_NTOHL (0x76657273), 
                        ACE_NTOHL (0x696f6e00),  // name = version
                                                CORBA::tk_alias, // typecode kind for typedefs
                        68, // encapsulation length
                          TAO_ENCAP_BYTE_ORDER, // byte order
                          34,
                          ACE_NTOHL (0x49444c3a), 
                          ACE_NTOHL (0x6f6d672e), 
                          ACE_NTOHL (0x6f72672f), 
                          ACE_NTOHL (0x434f5242), 
                          ACE_NTOHL (0x412f5665), 
                          ACE_NTOHL (0x7273696f), 
                          ACE_NTOHL (0x6e537065), 
                          ACE_NTOHL (0x633a312e), 
                          ACE_NTOHL (0x30000000),  // repository ID = IDL:omg.org/CORBA/VersionSpec:1.0
                                                    12,
                          ACE_NTOHL (0x56657273), 
                          ACE_NTOHL (0x696f6e53), 
                          ACE_NTOHL (0x70656300),  // name = VersionSpec
                                                    CORBA::tk_string, 
                          0U, // string length

                        5,
                        ACE_NTOHL (0x74797065), 
                        ACE_NTOHL (0x0),  // name = type
                                                CORBA::tk_TypeCode,

                        5,
                        ACE_NTOHL (0x6d6f6465), 
                        ACE_NTOHL (0x0),  // name = mode
                                                CORBA::tk_enum, // typecode kind
                        104, // encapsulation length
TAO_ENCAP_BYTE_ORDER, // byte order
                          36,
                          ACE_NTOHL (0x49444c3a), 
                          ACE_NTOHL (0x6f6d672e), 
                          ACE_NTOHL (0x6f72672f), 
                          ACE_NTOHL (0x434f5242), 
                          ACE_NTOHL (0x412f4174), 
                          ACE_NTOHL (0x74726962), 
                          ACE_NTOHL (0x7574654d), 
                          ACE_NTOHL (0x6f64653a), 
                          ACE_NTOHL (0x312e3000),  // repository ID = IDL:omg.org/CORBA/AttributeMode:1.0
                          14,
                          ACE_NTOHL (0x41747472), 
                          ACE_NTOHL (0x69627574), 
                          ACE_NTOHL (0x654d6f64), 
                          ACE_NTOHL (0x65000000),  // name = AttributeMode
                          2, // member count
                          12,
                          ACE_NTOHL (0x41545452), 
                          ACE_NTOHL (0x5f4e4f52), 
                          ACE_NTOHL (0x4d414c00),  // name = ATTR_NORMAL
                          14,
                          ACE_NTOHL (0x41545452), 
                          ACE_NTOHL (0x5f524541), 
                          ACE_NTOHL (0x444f4e4c), 
                          ACE_NTOHL (0x59000000),  // name = ATTR_READONLY
                          
                        15,
                        ACE_NTOHL (0x6765745f), 
                        ACE_NTOHL (0x65786365), 
                        ACE_NTOHL (0x7074696f), 
                        ACE_NTOHL (0x6e730000),  // name = get_exceptions
                                                CORBA::tk_alias, // typecode kind for typedefs
                        556, // encapsulation length
                          TAO_ENCAP_BYTE_ORDER, // byte order
                          40,
                          ACE_NTOHL (0x49444c3a), 
                          ACE_NTOHL (0x6f6d672e), 
                          ACE_NTOHL (0x6f72672f), 
                          ACE_NTOHL (0x434f5242), 
                          ACE_NTOHL (0x412f4578), 
                          ACE_NTOHL (0x63446573), 
                          ACE_NTOHL (0x63726970), 
                          ACE_NTOHL (0x74696f6e), 
                          ACE_NTOHL (0x5365713a), 
                          ACE_NTOHL (0x312e3000),  // repository ID = IDL:omg.org/CORBA/ExcDescriptionSeq:1.0
                                                    18,
                          ACE_NTOHL (0x45786344), 
                          ACE_NTOHL (0x65736372), 
                          ACE_NTOHL (0x69707469), 
                          ACE_NTOHL (0x6f6e5365), 
                          ACE_NTOHL (0x71000000),  // name = ExcDescriptionSeq
                                                    CORBA::tk_sequence, // typecode kind
                          476, // encapsulation length
                            TAO_ENCAP_BYTE_ORDER, // byte order
                            CORBA::tk_struct, // typecode kind
                            460, // encapsulation length
                              TAO_ENCAP_BYTE_ORDER, // byte order
                              43,
                              ACE_NTOHL (0x49444c3a), 
                              ACE_NTOHL (0x6f6d672e), 
                              ACE_NTOHL (0x6f72672f), 
                              ACE_NTOHL (0x434f5242), 
                              ACE_NTOHL (0x412f4578), 
                              ACE_NTOHL (0x63657074), 
                              ACE_NTOHL (0x696f6e44), 
                              ACE_NTOHL (0x65736372), 
                              ACE_NTOHL (0x69707469), 
                              ACE_NTOHL (0x6f6e3a31), 
                              ACE_NTOHL (0x2e300000),  // repository ID = IDL:omg.org/CORBA/ExceptionDescription:1.0
                                                            21,
                              ACE_NTOHL (0x45786365), 
                              ACE_NTOHL (0x7074696f), 
                              ACE_NTOHL (0x6e446573), 
                              ACE_NTOHL (0x63726970), 
                              ACE_NTOHL (0x74696f6e), 
                              ACE_NTOHL (0x0),  // name = ExceptionDescription
                              5, // member count
                                                            5,
                              ACE_NTOHL (0x6e616d65), 
                              ACE_NTOHL (0x0),  // name = name
                                                            CORBA::tk_alias, // typecode kind for typedefs
                              68, // encapsulation length
                                TAO_ENCAP_BYTE_ORDER, // byte order
                                33,
                                ACE_NTOHL (0x49444c3a), 
                                ACE_NTOHL (0x6f6d672e), 
                                ACE_NTOHL (0x6f72672f), 
                                ACE_NTOHL (0x434f5242), 
                                ACE_NTOHL (0x412f4964), 
                                ACE_NTOHL (0x656e7469), 
                                ACE_NTOHL (0x66696572), 
                                ACE_NTOHL (0x3a312e30), 
                                ACE_NTOHL (0x0),  // repository ID = IDL:omg.org/CORBA/Identifier:1.0
                                                                11,
                                ACE_NTOHL (0x4964656e), 
                                ACE_NTOHL (0x74696669), 
                                ACE_NTOHL (0x65720000),  // name = Identifier
                                                                CORBA::tk_string, 
                                0U, // string length

                              3,
                              ACE_NTOHL (0x69640000),  // name = id
                                                            CORBA::tk_alias, // typecode kind for typedefs
                              72, // encapsulation length
                                TAO_ENCAP_BYTE_ORDER, // byte order
                                35,
                                ACE_NTOHL (0x49444c3a), 
                                ACE_NTOHL (0x6f6d672e), 
                                ACE_NTOHL (0x6f72672f), 
                                ACE_NTOHL (0x434f5242), 
                                ACE_NTOHL (0x412f5265), 
                                ACE_NTOHL (0x706f7369), 
                                ACE_NTOHL (0x746f7279), 
                                ACE_NTOHL (0x49643a31), 
                                ACE_NTOHL (0x2e300000),  // repository ID = IDL:omg.org/CORBA/RepositoryId:1.0
                                                                13,
                                ACE_NTOHL (0x5265706f), 
                                ACE_NTOHL (0x7369746f), 
                                ACE_NTOHL (0x72794964), 
                                ACE_NTOHL (0x0),  // name = RepositoryId
                                                                CORBA::tk_string, 
                                0U, // string length

                              11,
                              ACE_NTOHL (0x64656669), 
                              ACE_NTOHL (0x6e65645f), 
                              ACE_NTOHL (0x696e0000),  // name = defined_in
                                                            CORBA::tk_alias, // typecode kind for typedefs
                              72, // encapsulation length
                                TAO_ENCAP_BYTE_ORDER, // byte order
                                35,
                                ACE_NTOHL (0x49444c3a), 
                                ACE_NTOHL (0x6f6d672e), 
                                ACE_NTOHL (0x6f72672f), 
                                ACE_NTOHL (0x434f5242), 
                                ACE_NTOHL (0x412f5265), 
                                ACE_NTOHL (0x706f7369), 
                                ACE_NTOHL (0x746f7279), 
                                ACE_NTOHL (0x49643a31), 
                                ACE_NTOHL (0x2e300000),  // repository ID = IDL:omg.org/CORBA/RepositoryId:1.0
                                                                13,
                                ACE_NTOHL (0x5265706f), 
                                ACE_NTOHL (0x7369746f), 
                                ACE_NTOHL (0x72794964), 
                                ACE_NTOHL (0x0),  // name = RepositoryId
                                                                CORBA::tk_string, 
                                0U, // string length

                              8,
                              ACE_NTOHL (0x76657273), 
                              ACE_NTOHL (0x696f6e00),  // name = version
                                                            CORBA::tk_alias, // typecode kind for typedefs
                              68, // encapsulation length
                                TAO_ENCAP_BYTE_ORDER, // byte order
                                34,
                                ACE_NTOHL (0x49444c3a), 
                                ACE_NTOHL (0x6f6d672e), 
                                ACE_NTOHL (0x6f72672f), 
                                ACE_NTOHL (0x434f5242), 
                                ACE_NTOHL (0x412f5665), 
                                ACE_NTOHL (0x7273696f), 
                                ACE_NTOHL (0x6e537065), 
                                ACE_NTOHL (0x633a312e), 
                                ACE_NTOHL (0x30000000),  // repository ID = IDL:omg.org/CORBA/VersionSpec:1.0
                                                                12,
                                ACE_NTOHL (0x56657273), 
                                ACE_NTOHL (0x696f6e53), 
                                ACE_NTOHL (0x70656300),  // name = VersionSpec
                                                                CORBA::tk_string, 
                                0U, // string length

                              5,
                              ACE_NTOHL (0x74797065), 
                              ACE_NTOHL (0x0),  // name = type
                                                            CORBA::tk_TypeCode,


                            0U,


                        15,
                        ACE_NTOHL (0x7075745f), 
                        ACE_NTOHL (0x65786365), 
                        ACE_NTOHL (0x7074696f), 
                        ACE_NTOHL (0x6e730000),  // name = put_exceptions
                                                CORBA::tk_alias, // typecode kind for typedefs
                        556, // encapsulation length
                          TAO_ENCAP_BYTE_ORDER, // byte order
                          40,
                          ACE_NTOHL (0x49444c3a), 
                          ACE_NTOHL (0x6f6d672e), 
                          ACE_NTOHL (0x6f72672f), 
                          ACE_NTOHL (0x434f5242), 
                          ACE_NTOHL (0x412f4578), 
                          ACE_NTOHL (0x63446573), 
                          ACE_NTOHL (0x63726970), 
                          ACE_NTOHL (0x74696f6e), 
                          ACE_NTOHL (0x5365713a), 
                          ACE_NTOHL (0x312e3000),  // repository ID = IDL:omg.org/CORBA/ExcDescriptionSeq:1.0
                                                    18,
                          ACE_NTOHL (0x45786344), 
                          ACE_NTOHL (0x65736372), 
                          ACE_NTOHL (0x69707469), 
                          ACE_NTOHL (0x6f6e5365), 
                          ACE_NTOHL (0x71000000),  // name = ExcDescriptionSeq
                                                    CORBA::tk_sequence, // typecode kind
                          476, // encapsulation length
                            TAO_ENCAP_BYTE_ORDER, // byte order
                            CORBA::tk_struct, // typecode kind
                            460, // encapsulation length
                              TAO_ENCAP_BYTE_ORDER, // byte order
                              43,
                              ACE_NTOHL (0x49444c3a), 
                              ACE_NTOHL (0x6f6d672e), 
                              ACE_NTOHL (0x6f72672f), 
                              ACE_NTOHL (0x434f5242), 
                              ACE_NTOHL (0x412f4578), 
                              ACE_NTOHL (0x63657074), 
                              ACE_NTOHL (0x696f6e44), 
                              ACE_NTOHL (0x65736372), 
                              ACE_NTOHL (0x69707469), 
                              ACE_NTOHL (0x6f6e3a31), 
                              ACE_NTOHL (0x2e300000),  // repository ID = IDL:omg.org/CORBA/ExceptionDescription:1.0
                                                            21,
                              ACE_NTOHL (0x45786365), 
                              ACE_NTOHL (0x7074696f), 
                              ACE_NTOHL (0x6e446573), 
                              ACE_NTOHL (0x63726970), 
                              ACE_NTOHL (0x74696f6e), 
                              ACE_NTOHL (0x0),  // name = ExceptionDescription
                              5, // member count
                                                            5,
                              ACE_NTOHL (0x6e616d65), 
                              ACE_NTOHL (0x0),  // name = name
                                                            CORBA::tk_alias, // typecode kind for typedefs
                              68, // encapsulation length
                                TAO_ENCAP_BYTE_ORDER, // byte order
                                33,
                                ACE_NTOHL (0x49444c3a), 
                                ACE_NTOHL (0x6f6d672e), 
                                ACE_NTOHL (0x6f72672f), 
                                ACE_NTOHL (0x434f5242), 
                                ACE_NTOHL (0x412f4964), 
                                ACE_NTOHL (0x656e7469), 
                                ACE_NTOHL (0x66696572), 
                                ACE_NTOHL (0x3a312e30), 
                                ACE_NTOHL (0x0),  // repository ID = IDL:omg.org/CORBA/Identifier:1.0
                                                                11,
                                ACE_NTOHL (0x4964656e), 
                                ACE_NTOHL (0x74696669), 
                                ACE_NTOHL (0x65720000),  // name = Identifier
                                                                CORBA::tk_string, 
                                0U, // string length

                              3,
                              ACE_NTOHL (0x69640000),  // name = id
                                                            CORBA::tk_alias, // typecode kind for typedefs
                              72, // encapsulation length
                                TAO_ENCAP_BYTE_ORDER, // byte order
                                35,
                                ACE_NTOHL (0x49444c3a), 
                                ACE_NTOHL (0x6f6d672e), 
                                ACE_NTOHL (0x6f72672f), 
                                ACE_NTOHL (0x434f5242), 
                                ACE_NTOHL (0x412f5265), 
                                ACE_NTOHL (0x706f7369), 
                                ACE_NTOHL (0x746f7279), 
                                ACE_NTOHL (0x49643a31), 
                                ACE_NTOHL (0x2e300000),  // repository ID = IDL:omg.org/CORBA/RepositoryId:1.0
                                                                13,
                                ACE_NTOHL (0x5265706f), 
                                ACE_NTOHL (0x7369746f), 
                                ACE_NTOHL (0x72794964), 
                                ACE_NTOHL (0x0),  // name = RepositoryId
                                                                CORBA::tk_string, 
                                0U, // string length

                              11,
                              ACE_NTOHL (0x64656669), 
                              ACE_NTOHL (0x6e65645f), 
                              ACE_NTOHL (0x696e0000),  // name = defined_in
                                                            CORBA::tk_alias, // typecode kind for typedefs
                              72, // encapsulation length
                                TAO_ENCAP_BYTE_ORDER, // byte order
                                35,
                                ACE_NTOHL (0x49444c3a), 
                                ACE_NTOHL (0x6f6d672e), 
                                ACE_NTOHL (0x6f72672f), 
                                ACE_NTOHL (0x434f5242), 
                                ACE_NTOHL (0x412f5265), 
                                ACE_NTOHL (0x706f7369), 
                                ACE_NTOHL (0x746f7279), 
                                ACE_NTOHL (0x49643a31), 
                                ACE_NTOHL (0x2e300000),  // repository ID = IDL:omg.org/CORBA/RepositoryId:1.0
                                                                13,
                                ACE_NTOHL (0x5265706f), 
                                ACE_NTOHL (0x7369746f), 
                                ACE_NTOHL (0x72794964), 
                                ACE_NTOHL (0x0),  // name = RepositoryId
                                                                CORBA::tk_string, 
                                0U, // string length

                              8,
                              ACE_NTOHL (0x76657273), 
                              ACE_NTOHL (0x696f6e00),  // name = version
                                                            CORBA::tk_alias, // typecode kind for typedefs
                              68, // encapsulation length
                                TAO_ENCAP_BYTE_ORDER, // byte order
                                34,
                                ACE_NTOHL (0x49444c3a), 
                                ACE_NTOHL (0x6f6d672e), 
                                ACE_NTOHL (0x6f72672f), 
                                ACE_NTOHL (0x434f5242), 
                                ACE_NTOHL (0x412f5665), 
                                ACE_NTOHL (0x7273696f), 
                                ACE_NTOHL (0x6e537065), 
                                ACE_NTOHL (0x633a312e), 
                                ACE_NTOHL (0x30000000),  // repository ID = IDL:omg.org/CORBA/VersionSpec:1.0
                                                                12,
                                ACE_NTOHL (0x56657273), 
                                ACE_NTOHL (0x696f6e53), 
                                ACE_NTOHL (0x70656300),  // name = VersionSpec
                                                                CORBA::tk_string, 
                                0U, // string length

                              5,
                              ACE_NTOHL (0x74797065), 
                              ACE_NTOHL (0x0),  // name = type
                                                            CORBA::tk_TypeCode,


                            0U,



                      0U,


                  5,
                  ACE_NTOHL (0x74797065), 
                  ACE_NTOHL (0x0),  // name = type
                                    CORBA::tk_TypeCode,

};
                
                static CORBA::TypeCode _tc_TAO_tc_CORBA_ComponentIR_HomeDescription (
                    CORBA::tk_struct,
                    sizeof (_oc_CORBA_ComponentIR_HomeDescription),
                    (char *) &_oc_CORBA_ComponentIR_HomeDescription,
                    0,
                    sizeof (CORBA::ComponentIR::HomeDescription)
                  );
                
                namespace CORBA
                {
                  namespace ComponentIR
                  {
                    ::CORBA::TypeCode_ptr _tc_HomeDescription =
                      &_tc_TAO_tc_CORBA_ComponentIR_HomeDescription;
                  }
                  }
                  
                  // TAO_IDL - Generated from 
                  // be/be_visitor_structure/structure_cs.cpp:66
                  
                  void 
                  CORBA::ComponentIR::HomeDescription::_tao_any_destructor (
                      void *_tao_void_pointer
                    )
                  {
                    HomeDescription *_tao_tmp_pointer =
                      ACE_static_cast (HomeDescription *, _tao_void_pointer);
                    delete _tao_tmp_pointer;
                  }
                  
                  // TAO_IDL - Generated from
                  // be/be_visitor_interface/any_op_cs.cpp:50
                  
                  ACE_TEMPLATE_SPECIALIZATION
                  CORBA::Boolean
                  TAO::Any_Impl_T<CORBA::ComponentIR::EventDef>::to_object (
                      CORBA::Object_ptr &_tao_elem
                    ) const
                  {
                    _tao_elem = CORBA::Object::_duplicate (this->value_);
                    return 1;
                  }
                  
                  // Copying insertion.
                  void
                  operator<<= (
                      CORBA::Any &_tao_any,
                      CORBA::ComponentIR::EventDef_ptr _tao_elem
                    )
                  {
                    CORBA::ComponentIR::EventDef_ptr _tao_objptr =
                      CORBA::ComponentIR::EventDef::_duplicate (_tao_elem);
                    _tao_any <<= &_tao_objptr;
                  }
                  
                  // Non-copying insertion.
                  void
                  operator<<= (
                      CORBA::Any &_tao_any,
                      CORBA::ComponentIR::EventDef_ptr *_tao_elem
                    )
                  {
                    TAO::Any_Impl_T<CORBA::ComponentIR::EventDef>::insert (
                        _tao_any,
                        CORBA::ComponentIR::EventDef::_tao_any_destructor,
                        CORBA::ComponentIR::_tc_EventDef,
                        *_tao_elem
                      );
                  }
                  
                  CORBA::Boolean
                  operator>>= (
                      const CORBA::Any &_tao_any,
                      CORBA::ComponentIR::EventDef_ptr &_tao_elem
                    )
                  {
                    return
                      TAO::Any_Impl_T<CORBA::ComponentIR::EventDef>::extract (
                          _tao_any,
                          CORBA::ComponentIR::EventDef::_tao_any_destructor,
                          CORBA::ComponentIR::_tc_EventDef,
                          _tao_elem
                        );
                  }
                  
                  // TAO_IDL - Generated from
                  // be/be_visitor_interface/any_op_cs.cpp:50
                  
                  ACE_TEMPLATE_SPECIALIZATION
                  CORBA::Boolean
                  TAO::Any_Impl_T<CORBA::ComponentIR::Container>::to_object (
                      CORBA::Object_ptr &_tao_elem
                    ) const
                  {
                    _tao_elem = CORBA::Object::_duplicate (this->value_);
                    return 1;
                  }
                  
                  // Copying insertion.
                  void
                  operator<<= (
                      CORBA::Any &_tao_any,
                      CORBA::ComponentIR::Container_ptr _tao_elem
                    )
                  {
                    CORBA::ComponentIR::Container_ptr _tao_objptr =
                      CORBA::ComponentIR::Container::_duplicate (_tao_elem);
                    _tao_any <<= &_tao_objptr;
                  }
                  
                  // Non-copying insertion.
                  void
                  operator<<= (
                      CORBA::Any &_tao_any,
                      CORBA::ComponentIR::Container_ptr *_tao_elem
                    )
                  {
                    TAO::Any_Impl_T<CORBA::ComponentIR::Container>::insert (
                        _tao_any,
                        CORBA::ComponentIR::Container::_tao_any_destructor,
                        CORBA::ComponentIR::_tc_Container,
                        *_tao_elem
                      );
                  }
                  
                  CORBA::Boolean
                  operator>>= (
                      const CORBA::Any &_tao_any,
                      CORBA::ComponentIR::Container_ptr &_tao_elem
                    )
                  {
                    return
                      TAO::Any_Impl_T<CORBA::ComponentIR::Container>::extract (
                          _tao_any,
                          CORBA::ComponentIR::Container::_tao_any_destructor,
                          CORBA::ComponentIR::_tc_Container,
                          _tao_elem
                        );
                  }
                  
                  // TAO_IDL - Generated from
                  // be/be_visitor_interface/any_op_cs.cpp:50
                  
                  ACE_TEMPLATE_SPECIALIZATION
                  CORBA::Boolean
                  TAO::Any_Impl_T<CORBA::ComponentIR::ModuleDef>::to_object (
                      CORBA::Object_ptr &_tao_elem
                    ) const
                  {
                    _tao_elem = CORBA::Object::_duplicate (this->value_);
                    return 1;
                  }
                  
                  // Copying insertion.
                  void
                  operator<<= (
                      CORBA::Any &_tao_any,
                      CORBA::ComponentIR::ModuleDef_ptr _tao_elem
                    )
                  {
                    CORBA::ComponentIR::ModuleDef_ptr _tao_objptr =
                      CORBA::ComponentIR::ModuleDef::_duplicate (_tao_elem);
                    _tao_any <<= &_tao_objptr;
                  }
                  
                  // Non-copying insertion.
                  void
                  operator<<= (
                      CORBA::Any &_tao_any,
                      CORBA::ComponentIR::ModuleDef_ptr *_tao_elem
                    )
                  {
                    TAO::Any_Impl_T<CORBA::ComponentIR::ModuleDef>::insert (
                        _tao_any,
                        CORBA::ComponentIR::ModuleDef::_tao_any_destructor,
                        CORBA::ComponentIR::_tc_ModuleDef,
                        *_tao_elem
                      );
                  }
                  
                  CORBA::Boolean
                  operator>>= (
                      const CORBA::Any &_tao_any,
                      CORBA::ComponentIR::ModuleDef_ptr &_tao_elem
                    )
                  {
                    return
                      TAO::Any_Impl_T<CORBA::ComponentIR::ModuleDef>::extract (
                          _tao_any,
                          CORBA::ComponentIR::ModuleDef::_tao_any_destructor,
                          CORBA::ComponentIR::_tc_ModuleDef,
                          _tao_elem
                        );
                  }
                  
                  // TAO_IDL - Generated from
                  // be/be_visitor_interface/any_op_cs.cpp:50
                  
                  ACE_TEMPLATE_SPECIALIZATION
                  CORBA::Boolean
                  TAO::Any_Impl_T<CORBA::ComponentIR::Repository>::to_object (
                      CORBA::Object_ptr &_tao_elem
                    ) const
                  {
                    _tao_elem = CORBA::Object::_duplicate (this->value_);
                    return 1;
                  }
                  
                  // Copying insertion.
                  void
                  operator<<= (
                      CORBA::Any &_tao_any,
                      CORBA::ComponentIR::Repository_ptr _tao_elem
                    )
                  {
                    CORBA::ComponentIR::Repository_ptr _tao_objptr =
                      CORBA::ComponentIR::Repository::_duplicate (_tao_elem);
                    _tao_any <<= &_tao_objptr;
                  }
                  
                  // Non-copying insertion.
                  void
                  operator<<= (
                      CORBA::Any &_tao_any,
                      CORBA::ComponentIR::Repository_ptr *_tao_elem
                    )
                  {
                    TAO::Any_Impl_T<CORBA::ComponentIR::Repository>::insert (
                        _tao_any,
                        CORBA::ComponentIR::Repository::_tao_any_destructor,
                        CORBA::ComponentIR::_tc_Repository,
                        *_tao_elem
                      );
                  }
                  
                  CORBA::Boolean
                  operator>>= (
                      const CORBA::Any &_tao_any,
                      CORBA::ComponentIR::Repository_ptr &_tao_elem
                    )
                  {
                    return
                      TAO::Any_Impl_T<CORBA::ComponentIR::Repository>::extract (
                          _tao_any,
                          CORBA::ComponentIR::Repository::_tao_any_destructor,
                          CORBA::ComponentIR::_tc_Repository,
                          _tao_elem
                        );
                  }
                  
                  // TAO_IDL - Generated from
                  // be/be_visitor_interface/any_op_cs.cpp:50
                  
                  ACE_TEMPLATE_SPECIALIZATION
                  CORBA::Boolean
                  TAO::Any_Impl_T<CORBA::ComponentIR::ProvidesDef>::to_object (
                      CORBA::Object_ptr &_tao_elem
                    ) const
                  {
                    _tao_elem = CORBA::Object::_duplicate (this->value_);
                    return 1;
                  }
                  
                  // Copying insertion.
                  void
                  operator<<= (
                      CORBA::Any &_tao_any,
                      CORBA::ComponentIR::ProvidesDef_ptr _tao_elem
                    )
                  {
                    CORBA::ComponentIR::ProvidesDef_ptr _tao_objptr =
                      CORBA::ComponentIR::ProvidesDef::_duplicate (_tao_elem);
                    _tao_any <<= &_tao_objptr;
                  }
                  
                  // Non-copying insertion.
                  void
                  operator<<= (
                      CORBA::Any &_tao_any,
                      CORBA::ComponentIR::ProvidesDef_ptr *_tao_elem
                    )
                  {
                    TAO::Any_Impl_T<CORBA::ComponentIR::ProvidesDef>::insert (
                        _tao_any,
                        CORBA::ComponentIR::ProvidesDef::_tao_any_destructor,
                        CORBA::ComponentIR::_tc_ProvidesDef,
                        *_tao_elem
                      );
                  }
                  
                  CORBA::Boolean
                  operator>>= (
                      const CORBA::Any &_tao_any,
                      CORBA::ComponentIR::ProvidesDef_ptr &_tao_elem
                    )
                  {
                    return
                      TAO::Any_Impl_T<CORBA::ComponentIR::ProvidesDef>::extract (
                          _tao_any,
                          CORBA::ComponentIR::ProvidesDef::_tao_any_destructor,
                          CORBA::ComponentIR::_tc_ProvidesDef,
                          _tao_elem
                        );
                  }
                  
                  // TAO_IDL - Generated from 
                  // be/be_visitor_structure/any_op_cs.cpp:54
                  
                  // Copying insertion.
                  void operator<<= (
                      CORBA::Any &_tao_any,
                      const CORBA::ComponentIR::ProvidesDescription &_tao_elem
                    )
                  {
                    TAO::Any_Dual_Impl_T<CORBA::ComponentIR::ProvidesDescription>::insert_copy (
                        _tao_any,
                        CORBA::ComponentIR::ProvidesDescription::_tao_any_destructor,
                        CORBA::ComponentIR::_tc_ProvidesDescription,
                        _tao_elem
                      );
                  }
                  
                  // Non-copying insertion.
                  void operator<<= (
                      CORBA::Any &_tao_any,
                      CORBA::ComponentIR::ProvidesDescription *_tao_elem
                    )
                  {
                    TAO::Any_Dual_Impl_T<CORBA::ComponentIR::ProvidesDescription>::insert (
                        _tao_any,
                        CORBA::ComponentIR::ProvidesDescription::_tao_any_destructor,
                        CORBA::ComponentIR::_tc_ProvidesDescription,
                        _tao_elem
                      );
                  }
                  
                  // Extraction to non-const pointer (deprecated).
                  CORBA::Boolean operator>>= (
                      const CORBA::Any &_tao_any,
                      CORBA::ComponentIR::ProvidesDescription *&_tao_elem
                    )
                  {
                    return _tao_any >>= ACE_const_cast (
                        const CORBA::ComponentIR::ProvidesDescription *&,
                        _tao_elem
                      );
                  }
                  
                  // Extraction to const pointer.
                  CORBA::Boolean operator>>= (
                      const CORBA::Any &_tao_any,
                      const CORBA::ComponentIR::ProvidesDescription *&_tao_elem
                    )
                  {
                    return
                      TAO::Any_Dual_Impl_T<CORBA::ComponentIR::ProvidesDescription>::extract (
                          _tao_any,
                          CORBA::ComponentIR::ProvidesDescription::_tao_any_destructor,
                          CORBA::ComponentIR::_tc_ProvidesDescription,
                          _tao_elem
                        );
                  }
                  
                  // TAO_IDL - Generated from
                  // be/be_visitor_interface/any_op_cs.cpp:50
                  
                  ACE_TEMPLATE_SPECIALIZATION
                  CORBA::Boolean
                  TAO::Any_Impl_T<CORBA::ComponentIR::UsesDef>::to_object (
                      CORBA::Object_ptr &_tao_elem
                    ) const
                  {
                    _tao_elem = CORBA::Object::_duplicate (this->value_);
                    return 1;
                  }
                  
                  // Copying insertion.
                  void
                  operator<<= (
                      CORBA::Any &_tao_any,
                      CORBA::ComponentIR::UsesDef_ptr _tao_elem
                    )
                  {
                    CORBA::ComponentIR::UsesDef_ptr _tao_objptr =
                      CORBA::ComponentIR::UsesDef::_duplicate (_tao_elem);
                    _tao_any <<= &_tao_objptr;
                  }
                  
                  // Non-copying insertion.
                  void
                  operator<<= (
                      CORBA::Any &_tao_any,
                      CORBA::ComponentIR::UsesDef_ptr *_tao_elem
                    )
                  {
                    TAO::Any_Impl_T<CORBA::ComponentIR::UsesDef>::insert (
                        _tao_any,
                        CORBA::ComponentIR::UsesDef::_tao_any_destructor,
                        CORBA::ComponentIR::_tc_UsesDef,
                        *_tao_elem
                      );
                  }
                  
                  CORBA::Boolean
                  operator>>= (
                      const CORBA::Any &_tao_any,
                      CORBA::ComponentIR::UsesDef_ptr &_tao_elem
                    )
                  {
                    return
                      TAO::Any_Impl_T<CORBA::ComponentIR::UsesDef>::extract (
                          _tao_any,
                          CORBA::ComponentIR::UsesDef::_tao_any_destructor,
                          CORBA::ComponentIR::_tc_UsesDef,
                          _tao_elem
                        );
                  }
                  
                  // TAO_IDL - Generated from 
                  // be/be_visitor_structure/any_op_cs.cpp:54
                  
                  // Copying insertion.
                  void operator<<= (
                      CORBA::Any &_tao_any,
                      const CORBA::ComponentIR::UsesDescription &_tao_elem
                    )
                  {
                    TAO::Any_Dual_Impl_T<CORBA::ComponentIR::UsesDescription>::insert_copy (
                        _tao_any,
                        CORBA::ComponentIR::UsesDescription::_tao_any_destructor,
                        CORBA::ComponentIR::_tc_UsesDescription,
                        _tao_elem
                      );
                  }
                  
                  // Non-copying insertion.
                  void operator<<= (
                      CORBA::Any &_tao_any,
                      CORBA::ComponentIR::UsesDescription *_tao_elem
                    )
                  {
                    TAO::Any_Dual_Impl_T<CORBA::ComponentIR::UsesDescription>::insert (
                        _tao_any,
                        CORBA::ComponentIR::UsesDescription::_tao_any_destructor,
                        CORBA::ComponentIR::_tc_UsesDescription,
                        _tao_elem
                      );
                  }
                  
                  // Extraction to non-const pointer (deprecated).
                  CORBA::Boolean operator>>= (
                      const CORBA::Any &_tao_any,
                      CORBA::ComponentIR::UsesDescription *&_tao_elem
                    )
                  {
                    return _tao_any >>= ACE_const_cast (
                        const CORBA::ComponentIR::UsesDescription *&,
                        _tao_elem
                      );
                  }
                  
                  // Extraction to const pointer.
                  CORBA::Boolean operator>>= (
                      const CORBA::Any &_tao_any,
                      const CORBA::ComponentIR::UsesDescription *&_tao_elem
                    )
                  {
                    return
                      TAO::Any_Dual_Impl_T<CORBA::ComponentIR::UsesDescription>::extract (
                          _tao_any,
                          CORBA::ComponentIR::UsesDescription::_tao_any_destructor,
                          CORBA::ComponentIR::_tc_UsesDescription,
                          _tao_elem
                        );
                  }
                  
                  // TAO_IDL - Generated from
                  // be/be_visitor_interface/any_op_cs.cpp:50
                  
                  ACE_TEMPLATE_SPECIALIZATION
                  CORBA::Boolean
                  TAO::Any_Impl_T<CORBA::ComponentIR::EventPortDef>::to_object (
                      CORBA::Object_ptr &_tao_elem
                    ) const
                  {
                    _tao_elem = CORBA::Object::_duplicate (this->value_);
                    return 1;
                  }
                  
                  // Copying insertion.
                  void
                  operator<<= (
                      CORBA::Any &_tao_any,
                      CORBA::ComponentIR::EventPortDef_ptr _tao_elem
                    )
                  {
                    CORBA::ComponentIR::EventPortDef_ptr _tao_objptr =
                      CORBA::ComponentIR::EventPortDef::_duplicate (_tao_elem);
                    _tao_any <<= &_tao_objptr;
                  }
                  
                  // Non-copying insertion.
                  void
                  operator<<= (
                      CORBA::Any &_tao_any,
                      CORBA::ComponentIR::EventPortDef_ptr *_tao_elem
                    )
                  {
                    TAO::Any_Impl_T<CORBA::ComponentIR::EventPortDef>::insert (
                        _tao_any,
                        CORBA::ComponentIR::EventPortDef::_tao_any_destructor,
                        CORBA::ComponentIR::_tc_EventPortDef,
                        *_tao_elem
                      );
                  }
                  
                  CORBA::Boolean
                  operator>>= (
                      const CORBA::Any &_tao_any,
                      CORBA::ComponentIR::EventPortDef_ptr &_tao_elem
                    )
                  {
                    return
                      TAO::Any_Impl_T<CORBA::ComponentIR::EventPortDef>::extract (
                          _tao_any,
                          CORBA::ComponentIR::EventPortDef::_tao_any_destructor,
                          CORBA::ComponentIR::_tc_EventPortDef,
                          _tao_elem
                        );
                  }
                  
                  // TAO_IDL - Generated from 
                  // be/be_visitor_structure/any_op_cs.cpp:54
                  
                  // Copying insertion.
                  void operator<<= (
                      CORBA::Any &_tao_any,
                      const CORBA::ComponentIR::EventPortDescription &_tao_elem
                    )
                  {
                    TAO::Any_Dual_Impl_T<CORBA::ComponentIR::EventPortDescription>::insert_copy (
                        _tao_any,
                        CORBA::ComponentIR::EventPortDescription::_tao_any_destructor,
                        CORBA::ComponentIR::_tc_EventPortDescription,
                        _tao_elem
                      );
                  }
                  
                  // Non-copying insertion.
                  void operator<<= (
                      CORBA::Any &_tao_any,
                      CORBA::ComponentIR::EventPortDescription *_tao_elem
                    )
                  {
                    TAO::Any_Dual_Impl_T<CORBA::ComponentIR::EventPortDescription>::insert (
                        _tao_any,
                        CORBA::ComponentIR::EventPortDescription::_tao_any_destructor,
                        CORBA::ComponentIR::_tc_EventPortDescription,
                        _tao_elem
                      );
                  }
                  
                  // Extraction to non-const pointer (deprecated).
                  CORBA::Boolean operator>>= (
                      const CORBA::Any &_tao_any,
                      CORBA::ComponentIR::EventPortDescription *&_tao_elem
                    )
                  {
                    return _tao_any >>= ACE_const_cast (
                        const CORBA::ComponentIR::EventPortDescription *&,
                        _tao_elem
                      );
                  }
                  
                  // Extraction to const pointer.
                  CORBA::Boolean operator>>= (
                      const CORBA::Any &_tao_any,
                      const CORBA::ComponentIR::EventPortDescription *&_tao_elem
                    )
                  {
                    return
                      TAO::Any_Dual_Impl_T<CORBA::ComponentIR::EventPortDescription>::extract (
                          _tao_any,
                          CORBA::ComponentIR::EventPortDescription::_tao_any_destructor,
                          CORBA::ComponentIR::_tc_EventPortDescription,
                          _tao_elem
                        );
                  }
                  
                  // TAO_IDL - Generated from
                  // be/be_visitor_interface/any_op_cs.cpp:50
                  
                  ACE_TEMPLATE_SPECIALIZATION
                  CORBA::Boolean
                  TAO::Any_Impl_T<CORBA::ComponentIR::EmitsDef>::to_object (
                      CORBA::Object_ptr &_tao_elem
                    ) const
                  {
                    _tao_elem = CORBA::Object::_duplicate (this->value_);
                    return 1;
                  }
                  
                  // Copying insertion.
                  void
                  operator<<= (
                      CORBA::Any &_tao_any,
                      CORBA::ComponentIR::EmitsDef_ptr _tao_elem
                    )
                  {
                    CORBA::ComponentIR::EmitsDef_ptr _tao_objptr =
                      CORBA::ComponentIR::EmitsDef::_duplicate (_tao_elem);
                    _tao_any <<= &_tao_objptr;
                  }
                  
                  // Non-copying insertion.
                  void
                  operator<<= (
                      CORBA::Any &_tao_any,
                      CORBA::ComponentIR::EmitsDef_ptr *_tao_elem
                    )
                  {
                    TAO::Any_Impl_T<CORBA::ComponentIR::EmitsDef>::insert (
                        _tao_any,
                        CORBA::ComponentIR::EmitsDef::_tao_any_destructor,
                        CORBA::ComponentIR::_tc_EmitsDef,
                        *_tao_elem
                      );
                  }
                  
                  CORBA::Boolean
                  operator>>= (
                      const CORBA::Any &_tao_any,
                      CORBA::ComponentIR::EmitsDef_ptr &_tao_elem
                    )
                  {
                    return
                      TAO::Any_Impl_T<CORBA::ComponentIR::EmitsDef>::extract (
                          _tao_any,
                          CORBA::ComponentIR::EmitsDef::_tao_any_destructor,
                          CORBA::ComponentIR::_tc_EmitsDef,
                          _tao_elem
                        );
                  }
                  
                  // TAO_IDL - Generated from
                  // be/be_visitor_interface/any_op_cs.cpp:50
                  
                  ACE_TEMPLATE_SPECIALIZATION
                  CORBA::Boolean
                  TAO::Any_Impl_T<CORBA::ComponentIR::PublishesDef>::to_object (
                      CORBA::Object_ptr &_tao_elem
                    ) const
                  {
                    _tao_elem = CORBA::Object::_duplicate (this->value_);
                    return 1;
                  }
                  
                  // Copying insertion.
                  void
                  operator<<= (
                      CORBA::Any &_tao_any,
                      CORBA::ComponentIR::PublishesDef_ptr _tao_elem
                    )
                  {
                    CORBA::ComponentIR::PublishesDef_ptr _tao_objptr =
                      CORBA::ComponentIR::PublishesDef::_duplicate (_tao_elem);
                    _tao_any <<= &_tao_objptr;
                  }
                  
                  // Non-copying insertion.
                  void
                  operator<<= (
                      CORBA::Any &_tao_any,
                      CORBA::ComponentIR::PublishesDef_ptr *_tao_elem
                    )
                  {
                    TAO::Any_Impl_T<CORBA::ComponentIR::PublishesDef>::insert (
                        _tao_any,
                        CORBA::ComponentIR::PublishesDef::_tao_any_destructor,
                        CORBA::ComponentIR::_tc_PublishesDef,
                        *_tao_elem
                      );
                  }
                  
                  CORBA::Boolean
                  operator>>= (
                      const CORBA::Any &_tao_any,
                      CORBA::ComponentIR::PublishesDef_ptr &_tao_elem
                    )
                  {
                    return
                      TAO::Any_Impl_T<CORBA::ComponentIR::PublishesDef>::extract (
                          _tao_any,
                          CORBA::ComponentIR::PublishesDef::_tao_any_destructor,
                          CORBA::ComponentIR::_tc_PublishesDef,
                          _tao_elem
                        );
                  }
                  
                  // TAO_IDL - Generated from
                  // be/be_visitor_interface/any_op_cs.cpp:50
                  
                  ACE_TEMPLATE_SPECIALIZATION
                  CORBA::Boolean
                  TAO::Any_Impl_T<CORBA::ComponentIR::ConsumesDef>::to_object (
                      CORBA::Object_ptr &_tao_elem
                    ) const
                  {
                    _tao_elem = CORBA::Object::_duplicate (this->value_);
                    return 1;
                  }
                  
                  // Copying insertion.
                  void
                  operator<<= (
                      CORBA::Any &_tao_any,
                      CORBA::ComponentIR::ConsumesDef_ptr _tao_elem
                    )
                  {
                    CORBA::ComponentIR::ConsumesDef_ptr _tao_objptr =
                      CORBA::ComponentIR::ConsumesDef::_duplicate (_tao_elem);
                    _tao_any <<= &_tao_objptr;
                  }
                  
                  // Non-copying insertion.
                  void
                  operator<<= (
                      CORBA::Any &_tao_any,
                      CORBA::ComponentIR::ConsumesDef_ptr *_tao_elem
                    )
                  {
                    TAO::Any_Impl_T<CORBA::ComponentIR::ConsumesDef>::insert (
                        _tao_any,
                        CORBA::ComponentIR::ConsumesDef::_tao_any_destructor,
                        CORBA::ComponentIR::_tc_ConsumesDef,
                        *_tao_elem
                      );
                  }
                  
                  CORBA::Boolean
                  operator>>= (
                      const CORBA::Any &_tao_any,
                      CORBA::ComponentIR::ConsumesDef_ptr &_tao_elem
                    )
                  {
                    return
                      TAO::Any_Impl_T<CORBA::ComponentIR::ConsumesDef>::extract (
                          _tao_any,
                          CORBA::ComponentIR::ConsumesDef::_tao_any_destructor,
                          CORBA::ComponentIR::_tc_ConsumesDef,
                          _tao_elem
                        );
                  }
                  
                  // TAO_IDL - Generated from
                  // be/be_visitor_interface/any_op_cs.cpp:50
                  
                  ACE_TEMPLATE_SPECIALIZATION
                  CORBA::Boolean
                  TAO::Any_Impl_T<CORBA::ComponentIR::ComponentDef>::to_object (
                      CORBA::Object_ptr &_tao_elem
                    ) const
                  {
                    _tao_elem = CORBA::Object::_duplicate (this->value_);
                    return 1;
                  }
                  
                  // Copying insertion.
                  void
                  operator<<= (
                      CORBA::Any &_tao_any,
                      CORBA::ComponentIR::ComponentDef_ptr _tao_elem
                    )
                  {
                    CORBA::ComponentIR::ComponentDef_ptr _tao_objptr =
                      CORBA::ComponentIR::ComponentDef::_duplicate (_tao_elem);
                    _tao_any <<= &_tao_objptr;
                  }
                  
                  // Non-copying insertion.
                  void
                  operator<<= (
                      CORBA::Any &_tao_any,
                      CORBA::ComponentIR::ComponentDef_ptr *_tao_elem
                    )
                  {
                    TAO::Any_Impl_T<CORBA::ComponentIR::ComponentDef>::insert (
                        _tao_any,
                        CORBA::ComponentIR::ComponentDef::_tao_any_destructor,
                        CORBA::ComponentIR::_tc_ComponentDef,
                        *_tao_elem
                      );
                  }
                  
                  CORBA::Boolean
                  operator>>= (
                      const CORBA::Any &_tao_any,
                      CORBA::ComponentIR::ComponentDef_ptr &_tao_elem
                    )
                  {
                    return
                      TAO::Any_Impl_T<CORBA::ComponentIR::ComponentDef>::extract (
                          _tao_any,
                          CORBA::ComponentIR::ComponentDef::_tao_any_destructor,
                          CORBA::ComponentIR::_tc_ComponentDef,
                          _tao_elem
                        );
                  }                  
                  
                  // TAO_IDL - Generated from 
                  // be/be_visitor_sequence/any_op_cs.cpp:54
                  
                  // Copying insertion.
                  void operator<<= (
                      CORBA::Any &_tao_any,
                      const CORBA::ComponentIR::ProvidesDescriptionSeq &_tao_elem
                    )
                  {
                    TAO::Any_Dual_Impl_T<CORBA::ComponentIR::ProvidesDescriptionSeq>::insert_copy (
                        _tao_any,
                        CORBA::ComponentIR::ProvidesDescriptionSeq::_tao_any_destructor,
                        CORBA::ComponentIR::_tc_ProvidesDescriptionSeq,
                        _tao_elem
                      );
                  }
                  
                  // Non-copying insertion.
                  void operator<<= (
                      CORBA::Any &_tao_any,
                      CORBA::ComponentIR::ProvidesDescriptionSeq *_tao_elem
                    )
                  {
                    TAO::Any_Dual_Impl_T<CORBA::ComponentIR::ProvidesDescriptionSeq>::insert (
                        _tao_any,
                        CORBA::ComponentIR::ProvidesDescriptionSeq::_tao_any_destructor,
                        CORBA::ComponentIR::_tc_ProvidesDescriptionSeq,
                        _tao_elem
                      );
                  }
                  
                  // Extraction to non-const pointer (deprecated).
                  CORBA::Boolean operator>>= (
                      const CORBA::Any &_tao_any,
                      CORBA::ComponentIR::ProvidesDescriptionSeq *&_tao_elem
                    )
                  {
                    return _tao_any >>= ACE_const_cast (
                        const CORBA::ComponentIR::ProvidesDescriptionSeq *&,
                        _tao_elem
                      );
                  }
                  
                  // Extraction to const pointer.
                  CORBA::Boolean operator>>= (
                      const CORBA::Any &_tao_any,
                      const CORBA::ComponentIR::ProvidesDescriptionSeq *&_tao_elem
                    )
                  {
                    return
                      TAO::Any_Dual_Impl_T<CORBA::ComponentIR::ProvidesDescriptionSeq>::extract (
                          _tao_any,
                          CORBA::ComponentIR::ProvidesDescriptionSeq::_tao_any_destructor,
                          CORBA::ComponentIR::_tc_ProvidesDescriptionSeq,
                          _tao_elem
                        );
                  }                  
                  
                  // TAO_IDL - Generated from 
                  // be/be_visitor_sequence/any_op_cs.cpp:54
                  
                  // Copying insertion.
                  void operator<<= (
                      CORBA::Any &_tao_any,
                      const CORBA::ComponentIR::UsesDescriptionSeq &_tao_elem
                    )
                  {
                    TAO::Any_Dual_Impl_T<CORBA::ComponentIR::UsesDescriptionSeq>::insert_copy (
                        _tao_any,
                        CORBA::ComponentIR::UsesDescriptionSeq::_tao_any_destructor,
                        CORBA::ComponentIR::_tc_UsesDescriptionSeq,
                        _tao_elem
                      );
                  }
                  
                  // Non-copying insertion.
                  void operator<<= (
                      CORBA::Any &_tao_any,
                      CORBA::ComponentIR::UsesDescriptionSeq *_tao_elem
                    )
                  {
                    TAO::Any_Dual_Impl_T<CORBA::ComponentIR::UsesDescriptionSeq>::insert (
                        _tao_any,
                        CORBA::ComponentIR::UsesDescriptionSeq::_tao_any_destructor,
                        CORBA::ComponentIR::_tc_UsesDescriptionSeq,
                        _tao_elem
                      );
                  }
                  
                  // Extraction to non-const pointer (deprecated).
                  CORBA::Boolean operator>>= (
                      const CORBA::Any &_tao_any,
                      CORBA::ComponentIR::UsesDescriptionSeq *&_tao_elem
                    )
                  {
                    return _tao_any >>= ACE_const_cast (
                        const CORBA::ComponentIR::UsesDescriptionSeq *&,
                        _tao_elem
                      );
                  }
                  
                  // Extraction to const pointer.
                  CORBA::Boolean operator>>= (
                      const CORBA::Any &_tao_any,
                      const CORBA::ComponentIR::UsesDescriptionSeq *&_tao_elem
                    )
                  {
                    return
                      TAO::Any_Dual_Impl_T<CORBA::ComponentIR::UsesDescriptionSeq>::extract (
                          _tao_any,
                          CORBA::ComponentIR::UsesDescriptionSeq::_tao_any_destructor,
                          CORBA::ComponentIR::_tc_UsesDescriptionSeq,
                          _tao_elem
                        );
                  }                  
                  
                  // TAO_IDL - Generated from 
                  // be/be_visitor_sequence/any_op_cs.cpp:54
                  
                  // Copying insertion.
                  void operator<<= (
                      CORBA::Any &_tao_any,
                      const CORBA::ComponentIR::EventPortDescriptionSeq &_tao_elem
                    )
                  {
                    TAO::Any_Dual_Impl_T<CORBA::ComponentIR::EventPortDescriptionSeq>::insert_copy (
                        _tao_any,
                        CORBA::ComponentIR::EventPortDescriptionSeq::_tao_any_destructor,
                        CORBA::ComponentIR::_tc_EventPortDescriptionSeq,
                        _tao_elem
                      );
                  }
                  
                  // Non-copying insertion.
                  void operator<<= (
                      CORBA::Any &_tao_any,
                      CORBA::ComponentIR::EventPortDescriptionSeq *_tao_elem
                    )
                  {
                    TAO::Any_Dual_Impl_T<CORBA::ComponentIR::EventPortDescriptionSeq>::insert (
                        _tao_any,
                        CORBA::ComponentIR::EventPortDescriptionSeq::_tao_any_destructor,
                        CORBA::ComponentIR::_tc_EventPortDescriptionSeq,
                        _tao_elem
                      );
                  }
                  
                  // Extraction to non-const pointer (deprecated).
                  CORBA::Boolean operator>>= (
                      const CORBA::Any &_tao_any,
                      CORBA::ComponentIR::EventPortDescriptionSeq *&_tao_elem
                    )
                  {
                    return _tao_any >>= ACE_const_cast (
                        const CORBA::ComponentIR::EventPortDescriptionSeq *&,
                        _tao_elem
                      );
                  }
                  
                  // Extraction to const pointer.
                  CORBA::Boolean operator>>= (
                      const CORBA::Any &_tao_any,
                      const CORBA::ComponentIR::EventPortDescriptionSeq *&_tao_elem
                    )
                  {
                    return
                      TAO::Any_Dual_Impl_T<CORBA::ComponentIR::EventPortDescriptionSeq>::extract (
                          _tao_any,
                          CORBA::ComponentIR::EventPortDescriptionSeq::_tao_any_destructor,
                          CORBA::ComponentIR::_tc_EventPortDescriptionSeq,
                          _tao_elem
                        );
                  }
                  
                  // TAO_IDL - Generated from 
                  // be/be_visitor_structure/any_op_cs.cpp:54
                  
                  // Copying insertion.
                  void operator<<= (
                      CORBA::Any &_tao_any,
                      const CORBA::ComponentIR::ComponentDescription &_tao_elem
                    )
                  {
                    TAO::Any_Dual_Impl_T<CORBA::ComponentIR::ComponentDescription>::insert_copy (
                        _tao_any,
                        CORBA::ComponentIR::ComponentDescription::_tao_any_destructor,
                        CORBA::ComponentIR::_tc_ComponentDescription,
                        _tao_elem
                      );
                  }
                  
                  // Non-copying insertion.
                  void operator<<= (
                      CORBA::Any &_tao_any,
                      CORBA::ComponentIR::ComponentDescription *_tao_elem
                    )
                  {
                    TAO::Any_Dual_Impl_T<CORBA::ComponentIR::ComponentDescription>::insert (
                        _tao_any,
                        CORBA::ComponentIR::ComponentDescription::_tao_any_destructor,
                        CORBA::ComponentIR::_tc_ComponentDescription,
                        _tao_elem
                      );
                  }
                  
                  // Extraction to non-const pointer (deprecated).
                  CORBA::Boolean operator>>= (
                      const CORBA::Any &_tao_any,
                      CORBA::ComponentIR::ComponentDescription *&_tao_elem
                    )
                  {
                    return _tao_any >>= ACE_const_cast (
                        const CORBA::ComponentIR::ComponentDescription *&,
                        _tao_elem
                      );
                  }
                  
                  // Extraction to const pointer.
                  CORBA::Boolean operator>>= (
                      const CORBA::Any &_tao_any,
                      const CORBA::ComponentIR::ComponentDescription *&_tao_elem
                    )
                  {
                    return
                      TAO::Any_Dual_Impl_T<CORBA::ComponentIR::ComponentDescription>::extract (
                          _tao_any,
                          CORBA::ComponentIR::ComponentDescription::_tao_any_destructor,
                          CORBA::ComponentIR::_tc_ComponentDescription,
                          _tao_elem
                        );
                  }
                  
                  // TAO_IDL - Generated from
                  // be/be_visitor_interface/any_op_cs.cpp:50
                  
                  ACE_TEMPLATE_SPECIALIZATION
                  CORBA::Boolean
                  TAO::Any_Impl_T<CORBA::ComponentIR::FactoryDef>::to_object (
                      CORBA::Object_ptr &_tao_elem
                    ) const
                  {
                    _tao_elem = CORBA::Object::_duplicate (this->value_);
                    return 1;
                  }
                  
                  // Copying insertion.
                  void
                  operator<<= (
                      CORBA::Any &_tao_any,
                      CORBA::ComponentIR::FactoryDef_ptr _tao_elem
                    )
                  {
                    CORBA::ComponentIR::FactoryDef_ptr _tao_objptr =
                      CORBA::ComponentIR::FactoryDef::_duplicate (_tao_elem);
                    _tao_any <<= &_tao_objptr;
                  }
                  
                  // Non-copying insertion.
                  void
                  operator<<= (
                      CORBA::Any &_tao_any,
                      CORBA::ComponentIR::FactoryDef_ptr *_tao_elem
                    )
                  {
                    TAO::Any_Impl_T<CORBA::ComponentIR::FactoryDef>::insert (
                        _tao_any,
                        CORBA::ComponentIR::FactoryDef::_tao_any_destructor,
                        CORBA::ComponentIR::_tc_FactoryDef,
                        *_tao_elem
                      );
                  }
                  
                  CORBA::Boolean
                  operator>>= (
                      const CORBA::Any &_tao_any,
                      CORBA::ComponentIR::FactoryDef_ptr &_tao_elem
                    )
                  {
                    return
                      TAO::Any_Impl_T<CORBA::ComponentIR::FactoryDef>::extract (
                          _tao_any,
                          CORBA::ComponentIR::FactoryDef::_tao_any_destructor,
                          CORBA::ComponentIR::_tc_FactoryDef,
                          _tao_elem
                        );
                  }
                  
                  // TAO_IDL - Generated from
                  // be/be_visitor_interface/any_op_cs.cpp:50
                  
                  ACE_TEMPLATE_SPECIALIZATION
                  CORBA::Boolean
                  TAO::Any_Impl_T<CORBA::ComponentIR::FinderDef>::to_object (
                      CORBA::Object_ptr &_tao_elem
                    ) const
                  {
                    _tao_elem = CORBA::Object::_duplicate (this->value_);
                    return 1;
                  }
                  
                  // Copying insertion.
                  void
                  operator<<= (
                      CORBA::Any &_tao_any,
                      CORBA::ComponentIR::FinderDef_ptr _tao_elem
                    )
                  {
                    CORBA::ComponentIR::FinderDef_ptr _tao_objptr =
                      CORBA::ComponentIR::FinderDef::_duplicate (_tao_elem);
                    _tao_any <<= &_tao_objptr;
                  }
                  
                  // Non-copying insertion.
                  void
                  operator<<= (
                      CORBA::Any &_tao_any,
                      CORBA::ComponentIR::FinderDef_ptr *_tao_elem
                    )
                  {
                    TAO::Any_Impl_T<CORBA::ComponentIR::FinderDef>::insert (
                        _tao_any,
                        CORBA::ComponentIR::FinderDef::_tao_any_destructor,
                        CORBA::ComponentIR::_tc_FinderDef,
                        *_tao_elem
                      );
                  }
                  
                  CORBA::Boolean
                  operator>>= (
                      const CORBA::Any &_tao_any,
                      CORBA::ComponentIR::FinderDef_ptr &_tao_elem
                    )
                  {
                    return
                      TAO::Any_Impl_T<CORBA::ComponentIR::FinderDef>::extract (
                          _tao_any,
                          CORBA::ComponentIR::FinderDef::_tao_any_destructor,
                          CORBA::ComponentIR::_tc_FinderDef,
                          _tao_elem
                        );
                  }
                  
                  // TAO_IDL - Generated from
                  // be/be_visitor_interface/any_op_cs.cpp:50
                  
                  ACE_TEMPLATE_SPECIALIZATION
                  CORBA::Boolean
                  TAO::Any_Impl_T<CORBA::ComponentIR::HomeDef>::to_object (
                      CORBA::Object_ptr &_tao_elem
                    ) const
                  {
                    _tao_elem = CORBA::Object::_duplicate (this->value_);
                    return 1;
                  }
                  
                  // Copying insertion.
                  void
                  operator<<= (
                      CORBA::Any &_tao_any,
                      CORBA::ComponentIR::HomeDef_ptr _tao_elem
                    )
                  {
                    CORBA::ComponentIR::HomeDef_ptr _tao_objptr =
                      CORBA::ComponentIR::HomeDef::_duplicate (_tao_elem);
                    _tao_any <<= &_tao_objptr;
                  }
                  
                  // Non-copying insertion.
                  void
                  operator<<= (
                      CORBA::Any &_tao_any,
                      CORBA::ComponentIR::HomeDef_ptr *_tao_elem
                    )
                  {
                    TAO::Any_Impl_T<CORBA::ComponentIR::HomeDef>::insert (
                        _tao_any,
                        CORBA::ComponentIR::HomeDef::_tao_any_destructor,
                        CORBA::ComponentIR::_tc_HomeDef,
                        *_tao_elem
                      );
                  }
                  
                  CORBA::Boolean
                  operator>>= (
                      const CORBA::Any &_tao_any,
                      CORBA::ComponentIR::HomeDef_ptr &_tao_elem
                    )
                  {
                    return
                      TAO::Any_Impl_T<CORBA::ComponentIR::HomeDef>::extract (
                          _tao_any,
                          CORBA::ComponentIR::HomeDef::_tao_any_destructor,
                          CORBA::ComponentIR::_tc_HomeDef,
                          _tao_elem
                        );
                  }
                  
                  // TAO_IDL - Generated from 
                  // be/be_visitor_structure/any_op_cs.cpp:54
                  
                  // Copying insertion.
                  void operator<<= (
                      CORBA::Any &_tao_any,
                      const CORBA::ComponentIR::HomeDescription &_tao_elem
                    )
                  {
                    TAO::Any_Dual_Impl_T<CORBA::ComponentIR::HomeDescription>::insert_copy (
                        _tao_any,
                        CORBA::ComponentIR::HomeDescription::_tao_any_destructor,
                        CORBA::ComponentIR::_tc_HomeDescription,
                        _tao_elem
                      );
                  }
                  
                  // Non-copying insertion.
                  void operator<<= (
                      CORBA::Any &_tao_any,
                      CORBA::ComponentIR::HomeDescription *_tao_elem
                    )
                  {
                    TAO::Any_Dual_Impl_T<CORBA::ComponentIR::HomeDescription>::insert (
                        _tao_any,
                        CORBA::ComponentIR::HomeDescription::_tao_any_destructor,
                        CORBA::ComponentIR::_tc_HomeDescription,
                        _tao_elem
                      );
                  }
                  
                  // Extraction to non-const pointer (deprecated).
                  CORBA::Boolean operator>>= (
                      const CORBA::Any &_tao_any,
                      CORBA::ComponentIR::HomeDescription *&_tao_elem
                    )
                  {
                    return _tao_any >>= ACE_const_cast (
                        const CORBA::ComponentIR::HomeDescription *&,
                        _tao_elem
                      );
                  }
                  
                  // Extraction to const pointer.
                  CORBA::Boolean operator>>= (
                      const CORBA::Any &_tao_any,
                      const CORBA::ComponentIR::HomeDescription *&_tao_elem
                    )
                  {
                    return
                      TAO::Any_Dual_Impl_T<CORBA::ComponentIR::HomeDescription>::extract (
                          _tao_any,
                          CORBA::ComponentIR::HomeDescription::_tao_any_destructor,
                          CORBA::ComponentIR::_tc_HomeDescription,
                          _tao_elem
                        );
                  }
                  
                  // TAO_IDL - Generated from
                  // be/be_visitor_interface/cdr_op_cs.cpp:63
                  
                  CORBA::Boolean operator<< (
                      TAO_OutputCDR &strm,
                      const CORBA::ComponentIR::EventDef_ptr _tao_objref
                    )
                  {
                    CORBA::Object_ptr _tao_corba_obj = _tao_objref;
                    return (strm << _tao_corba_obj);
                  }
                  
                  CORBA::Boolean operator>> (
                      TAO_InputCDR &strm,
                      CORBA::ComponentIR::EventDef_ptr &_tao_objref
                    )
                  {
                    CORBA::Object_var obj;
                    
                    if ((strm >> obj.inout ()) == 0)
                      {
                        return 0;
                      }
                    
                    typedef ::CORBA::ComponentIR::EventDef RHS_SCOPED_NAME;
                    
                    // Narrow to the right type.
                    _tao_objref =
                      TAO::Narrow_Utils<RHS_SCOPED_NAME>::unchecked_narrow (
                          obj.in (),
                          CORBA_ComponentIR__TAO_EventDef_Proxy_Broker_Factory_function_pointer
                        );
                      
                    return 1;
                  }
                  
                  // TAO_IDL - Generated from
                  // be/be_visitor_interface/cdr_op_cs.cpp:63
                  
                  CORBA::Boolean operator<< (
                      TAO_OutputCDR &strm,
                      const CORBA::ComponentIR::Container_ptr _tao_objref
                    )
                  {
                    CORBA::Object_ptr _tao_corba_obj = _tao_objref;
                    return (strm << _tao_corba_obj);
                  }
                  
                  CORBA::Boolean operator>> (
                      TAO_InputCDR &strm,
                      CORBA::ComponentIR::Container_ptr &_tao_objref
                    )
                  {
                    CORBA::Object_var obj;
                    
                    if ((strm >> obj.inout ()) == 0)
                      {
                        return 0;
                      }
                    
                    typedef ::CORBA::ComponentIR::Container RHS_SCOPED_NAME;
                    
                    // Narrow to the right type.
                    _tao_objref =
                      TAO::Narrow_Utils<RHS_SCOPED_NAME>::unchecked_narrow (
                          obj.in (),
                          CORBA_ComponentIR__TAO_Container_Proxy_Broker_Factory_function_pointer
                        );
                      
                    return 1;
                  }
                  
                  // TAO_IDL - Generated from
                  // be/be_visitor_interface/cdr_op_cs.cpp:63
                  
                  CORBA::Boolean operator<< (
                      TAO_OutputCDR &strm,
                      const CORBA::ComponentIR::ModuleDef_ptr _tao_objref
                    )
                  {
                    CORBA::Object_ptr _tao_corba_obj = _tao_objref;
                    return (strm << _tao_corba_obj);
                  }
                  
                  CORBA::Boolean operator>> (
                      TAO_InputCDR &strm,
                      CORBA::ComponentIR::ModuleDef_ptr &_tao_objref
                    )
                  {
                    CORBA::Object_var obj;
                    
                    if ((strm >> obj.inout ()) == 0)
                      {
                        return 0;
                      }
                    
                    typedef ::CORBA::ComponentIR::ModuleDef RHS_SCOPED_NAME;
                    
                    // Narrow to the right type.
                    _tao_objref =
                      TAO::Narrow_Utils<RHS_SCOPED_NAME>::unchecked_narrow (
                          obj.in (),
                          CORBA_ComponentIR__TAO_ModuleDef_Proxy_Broker_Factory_function_pointer
                        );
                      
                    return 1;
                  }
                  
                  // TAO_IDL - Generated from
                  // be/be_visitor_interface/cdr_op_cs.cpp:63
                  
                  CORBA::Boolean operator<< (
                      TAO_OutputCDR &strm,
                      const CORBA::ComponentIR::Repository_ptr _tao_objref
                    )
                  {
                    CORBA::Object_ptr _tao_corba_obj = _tao_objref;
                    return (strm << _tao_corba_obj);
                  }
                  
                  CORBA::Boolean operator>> (
                      TAO_InputCDR &strm,
                      CORBA::ComponentIR::Repository_ptr &_tao_objref
                    )
                  {
                    CORBA::Object_var obj;
                    
                    if ((strm >> obj.inout ()) == 0)
                      {
                        return 0;
                      }
                    
                    typedef ::CORBA::ComponentIR::Repository RHS_SCOPED_NAME;
                    
                    // Narrow to the right type.
                    _tao_objref =
                      TAO::Narrow_Utils<RHS_SCOPED_NAME>::unchecked_narrow (
                          obj.in (),
                          CORBA_ComponentIR__TAO_Repository_Proxy_Broker_Factory_function_pointer
                        );
                      
                    return 1;
                  }
                  
                  // TAO_IDL - Generated from
                  // be/be_visitor_interface/cdr_op_cs.cpp:63
                  
                  CORBA::Boolean operator<< (
                      TAO_OutputCDR &strm,
                      const CORBA::ComponentIR::ProvidesDef_ptr _tao_objref
                    )
                  {
                    CORBA::Object_ptr _tao_corba_obj = _tao_objref;
                    return (strm << _tao_corba_obj);
                  }
                  
                  CORBA::Boolean operator>> (
                      TAO_InputCDR &strm,
                      CORBA::ComponentIR::ProvidesDef_ptr &_tao_objref
                    )
                  {
                    CORBA::Object_var obj;
                    
                    if ((strm >> obj.inout ()) == 0)
                      {
                        return 0;
                      }
                    
                    typedef ::CORBA::ComponentIR::ProvidesDef RHS_SCOPED_NAME;
                    
                    // Narrow to the right type.
                    _tao_objref =
                      TAO::Narrow_Utils<RHS_SCOPED_NAME>::unchecked_narrow (
                          obj.in (),
                          CORBA_ComponentIR__TAO_ProvidesDef_Proxy_Broker_Factory_function_pointer
                        );
                      
                    return 1;
                  }
                  
                  // TAO_IDL - Generated from
                  // be/be_visitor_interface/cdr_op_cs.cpp:63
                  
                  CORBA::Boolean operator<< (
                      TAO_OutputCDR &strm,
                      const CORBA::ComponentIR::UsesDef_ptr _tao_objref
                    )
                  {
                    CORBA::Object_ptr _tao_corba_obj = _tao_objref;
                    return (strm << _tao_corba_obj);
                  }
                  
                  CORBA::Boolean operator>> (
                      TAO_InputCDR &strm,
                      CORBA::ComponentIR::UsesDef_ptr &_tao_objref
                    )
                  {
                    CORBA::Object_var obj;
                    
                    if ((strm >> obj.inout ()) == 0)
                      {
                        return 0;
                      }
                    
                    typedef ::CORBA::ComponentIR::UsesDef RHS_SCOPED_NAME;
                    
                    // Narrow to the right type.
                    _tao_objref =
                      TAO::Narrow_Utils<RHS_SCOPED_NAME>::unchecked_narrow (
                          obj.in (),
                          CORBA_ComponentIR__TAO_UsesDef_Proxy_Broker_Factory_function_pointer
                        );
                      
                    return 1;
                  }
                  
                  // TAO_IDL - Generated from
                  // be/be_visitor_interface/cdr_op_cs.cpp:63
                  
                  CORBA::Boolean operator<< (
                      TAO_OutputCDR &strm,
                      const CORBA::ComponentIR::EventPortDef_ptr _tao_objref
                    )
                  {
                    CORBA::Object_ptr _tao_corba_obj = _tao_objref;
                    return (strm << _tao_corba_obj);
                  }
                  
                  CORBA::Boolean operator>> (
                      TAO_InputCDR &strm,
                      CORBA::ComponentIR::EventPortDef_ptr &_tao_objref
                    )
                  {
                    CORBA::Object_var obj;
                    
                    if ((strm >> obj.inout ()) == 0)
                      {
                        return 0;
                      }
                    
                    typedef ::CORBA::ComponentIR::EventPortDef RHS_SCOPED_NAME;
                    
                    // Narrow to the right type.
                    _tao_objref =
                      TAO::Narrow_Utils<RHS_SCOPED_NAME>::unchecked_narrow (
                          obj.in (),
                          CORBA_ComponentIR__TAO_EventPortDef_Proxy_Broker_Factory_function_pointer
                        );
                      
                    return 1;
                  }
                  
                  // TAO_IDL - Generated from
                  // be/be_visitor_interface/cdr_op_cs.cpp:63
                  
                  CORBA::Boolean operator<< (
                      TAO_OutputCDR &strm,
                      const CORBA::ComponentIR::EmitsDef_ptr _tao_objref
                    )
                  {
                    CORBA::Object_ptr _tao_corba_obj = _tao_objref;
                    return (strm << _tao_corba_obj);
                  }
                  
                  CORBA::Boolean operator>> (
                      TAO_InputCDR &strm,
                      CORBA::ComponentIR::EmitsDef_ptr &_tao_objref
                    )
                  {
                    CORBA::Object_var obj;
                    
                    if ((strm >> obj.inout ()) == 0)
                      {
                        return 0;
                      }
                    
                    typedef ::CORBA::ComponentIR::EmitsDef RHS_SCOPED_NAME;
                    
                    // Narrow to the right type.
                    _tao_objref =
                      TAO::Narrow_Utils<RHS_SCOPED_NAME>::unchecked_narrow (
                          obj.in (),
                          CORBA_ComponentIR__TAO_EmitsDef_Proxy_Broker_Factory_function_pointer
                        );
                      
                    return 1;
                  }
                  
                  // TAO_IDL - Generated from
                  // be/be_visitor_interface/cdr_op_cs.cpp:63
                  
                  CORBA::Boolean operator<< (
                      TAO_OutputCDR &strm,
                      const CORBA::ComponentIR::PublishesDef_ptr _tao_objref
                    )
                  {
                    CORBA::Object_ptr _tao_corba_obj = _tao_objref;
                    return (strm << _tao_corba_obj);
                  }
                  
                  CORBA::Boolean operator>> (
                      TAO_InputCDR &strm,
                      CORBA::ComponentIR::PublishesDef_ptr &_tao_objref
                    )
                  {
                    CORBA::Object_var obj;
                    
                    if ((strm >> obj.inout ()) == 0)
                      {
                        return 0;
                      }
                    
                    typedef ::CORBA::ComponentIR::PublishesDef RHS_SCOPED_NAME;
                    
                    // Narrow to the right type.
                    _tao_objref =
                      TAO::Narrow_Utils<RHS_SCOPED_NAME>::unchecked_narrow (
                          obj.in (),
                          CORBA_ComponentIR__TAO_PublishesDef_Proxy_Broker_Factory_function_pointer
                        );
                      
                    return 1;
                  }
                  
                  // TAO_IDL - Generated from
                  // be/be_visitor_interface/cdr_op_cs.cpp:63
                  
                  CORBA::Boolean operator<< (
                      TAO_OutputCDR &strm,
                      const CORBA::ComponentIR::ConsumesDef_ptr _tao_objref
                    )
                  {
                    CORBA::Object_ptr _tao_corba_obj = _tao_objref;
                    return (strm << _tao_corba_obj);
                  }
                  
                  CORBA::Boolean operator>> (
                      TAO_InputCDR &strm,
                      CORBA::ComponentIR::ConsumesDef_ptr &_tao_objref
                    )
                  {
                    CORBA::Object_var obj;
                    
                    if ((strm >> obj.inout ()) == 0)
                      {
                        return 0;
                      }
                    
                    typedef ::CORBA::ComponentIR::ConsumesDef RHS_SCOPED_NAME;
                    
                    // Narrow to the right type.
                    _tao_objref =
                      TAO::Narrow_Utils<RHS_SCOPED_NAME>::unchecked_narrow (
                          obj.in (),
                          CORBA_ComponentIR__TAO_ConsumesDef_Proxy_Broker_Factory_function_pointer
                        );
                      
                    return 1;
                  }
                  
                  // TAO_IDL - Generated from
                  // be/be_visitor_interface/cdr_op_cs.cpp:63
                  
                  CORBA::Boolean operator<< (
                      TAO_OutputCDR &strm,
                      const CORBA::ComponentIR::ComponentDef_ptr _tao_objref
                    )
                  {
                    CORBA::Object_ptr _tao_corba_obj = _tao_objref;
                    return (strm << _tao_corba_obj);
                  }
                  
                  CORBA::Boolean operator>> (
                      TAO_InputCDR &strm,
                      CORBA::ComponentIR::ComponentDef_ptr &_tao_objref
                    )
                  {
                    CORBA::Object_var obj;
                    
                    if ((strm >> obj.inout ()) == 0)
                      {
                        return 0;
                      }
                    
                    typedef ::CORBA::ComponentIR::ComponentDef RHS_SCOPED_NAME;
                    
                    // Narrow to the right type.
                    _tao_objref =
                      TAO::Narrow_Utils<RHS_SCOPED_NAME>::unchecked_narrow (
                          obj.in (),
                          CORBA_ComponentIR__TAO_ComponentDef_Proxy_Broker_Factory_function_pointer
                        );
                      
                    return 1;
                  }
                  
                  // TAO_IDL - Generated from
                  // be/be_visitor_sequence/cdr_op_cs.cpp:95
                  
                  #if !defined _TAO_CDR_OP_CORBA_ComponentIR_ProvidesDescriptionSeq_CPP_
                  #define _TAO_CDR_OP_CORBA_ComponentIR_ProvidesDescriptionSeq_CPP_
                  
                  CORBA::Boolean operator<< (
                      TAO_OutputCDR &strm,
                      const CORBA::ComponentIR::ProvidesDescriptionSeq &_tao_sequence
                    )
                  {
                    CORBA::ULong _tao_seq_len = _tao_sequence.length ();
                    
                    if (strm << _tao_seq_len)
                      {
                        // Encode all elements.
                        CORBA::Boolean _tao_marshal_flag = 1;
                        
                        for (CORBA::ULong i = 0; i < _tao_seq_len && _tao_marshal_flag; ++i)
                          {
                            _tao_marshal_flag = (strm << _tao_sequence[i]);
                          }
                        
                        return _tao_marshal_flag;
                      }
                    
                    return 0;
                  }
                  
                  CORBA::Boolean operator>> (
                      TAO_InputCDR &strm,
                      CORBA::ComponentIR::ProvidesDescriptionSeq &_tao_sequence
                    )
                  {
                    CORBA::ULong _tao_seq_len;
                    
                    if (strm >> _tao_seq_len)
                      {
                        // Add a check to the length of the sequence
                        // to make sure it does not exceed the length
                        // of the stream. (See bug 58.)
                        if (_tao_seq_len > strm.length ())
                          {
                            return 0;
                          }
                        
                        // Set the length of the sequence.
                        _tao_sequence.length (_tao_seq_len);
                        
                        // If length is 0 we return true.
                        if (0 >= _tao_seq_len) 
                          {
                            return 1;
                          }
                        
                        // Retrieve all the elements.
                        CORBA::Boolean _tao_marshal_flag = 1;
                        
                        for (CORBA::ULong i = 0; i < _tao_seq_len && _tao_marshal_flag; ++i)
                          {
                            _tao_marshal_flag = (strm >> _tao_sequence[i]);
                          }
                        
                        return _tao_marshal_flag;
                      
                      }
                    
                    return 0;
                  }
                  
                  #endif /* _TAO_CDR_OP_CORBA_ComponentIR_ProvidesDescriptionSeq_CPP_ */
                  
                  // TAO_IDL - Generated from
                  // be/be_visitor_sequence/cdr_op_cs.cpp:95
                  
                  #if !defined _TAO_CDR_OP_CORBA_ComponentIR_UsesDescriptionSeq_CPP_
                  #define _TAO_CDR_OP_CORBA_ComponentIR_UsesDescriptionSeq_CPP_
                  
                  CORBA::Boolean operator<< (
                      TAO_OutputCDR &strm,
                      const CORBA::ComponentIR::UsesDescriptionSeq &_tao_sequence
                    )
                  {
                    CORBA::ULong _tao_seq_len = _tao_sequence.length ();
                    
                    if (strm << _tao_seq_len)
                      {
                        // Encode all elements.
                        CORBA::Boolean _tao_marshal_flag = 1;
                        
                        for (CORBA::ULong i = 0; i < _tao_seq_len && _tao_marshal_flag; ++i)
                          {
                            _tao_marshal_flag = (strm << _tao_sequence[i]);
                          }
                        
                        return _tao_marshal_flag;
                      }
                    
                    return 0;
                  }
                  
                  CORBA::Boolean operator>> (
                      TAO_InputCDR &strm,
                      CORBA::ComponentIR::UsesDescriptionSeq &_tao_sequence
                    )
                  {
                    CORBA::ULong _tao_seq_len;
                    
                    if (strm >> _tao_seq_len)
                      {
                        // Add a check to the length of the sequence
                        // to make sure it does not exceed the length
                        // of the stream. (See bug 58.)
                        if (_tao_seq_len > strm.length ())
                          {
                            return 0;
                          }
                        
                        // Set the length of the sequence.
                        _tao_sequence.length (_tao_seq_len);
                        
                        // If length is 0 we return true.
                        if (0 >= _tao_seq_len) 
                          {
                            return 1;
                          }
                        
                        // Retrieve all the elements.
                        CORBA::Boolean _tao_marshal_flag = 1;
                        
                        for (CORBA::ULong i = 0; i < _tao_seq_len && _tao_marshal_flag; ++i)
                          {
                            _tao_marshal_flag = (strm >> _tao_sequence[i]);
                          }
                        
                        return _tao_marshal_flag;
                      
                      }
                    
                    return 0;
                  }
                  
                  #endif /* _TAO_CDR_OP_CORBA_ComponentIR_UsesDescriptionSeq_CPP_ */
                  
                  // TAO_IDL - Generated from
                  // be/be_visitor_sequence/cdr_op_cs.cpp:95
                  
                  #if !defined _TAO_CDR_OP_CORBA_ComponentIR_EventPortDescriptionSeq_CPP_
                  #define _TAO_CDR_OP_CORBA_ComponentIR_EventPortDescriptionSeq_CPP_
                  
                  CORBA::Boolean operator<< (
                      TAO_OutputCDR &strm,
                      const CORBA::ComponentIR::EventPortDescriptionSeq &_tao_sequence
                    )
                  {
                    CORBA::ULong _tao_seq_len = _tao_sequence.length ();
                    
                    if (strm << _tao_seq_len)
                      {
                        // Encode all elements.
                        CORBA::Boolean _tao_marshal_flag = 1;
                        
                        for (CORBA::ULong i = 0; i < _tao_seq_len && _tao_marshal_flag; ++i)
                          {
                            _tao_marshal_flag = (strm << _tao_sequence[i]);
                          }
                        
                        return _tao_marshal_flag;
                      }
                    
                    return 0;
                  }
                  
                  CORBA::Boolean operator>> (
                      TAO_InputCDR &strm,
                      CORBA::ComponentIR::EventPortDescriptionSeq &_tao_sequence
                    )
                  {
                    CORBA::ULong _tao_seq_len;
                    
                    if (strm >> _tao_seq_len)
                      {
                        // Add a check to the length of the sequence
                        // to make sure it does not exceed the length
                        // of the stream. (See bug 58.)
                        if (_tao_seq_len > strm.length ())
                          {
                            return 0;
                          }
                        
                        // Set the length of the sequence.
                        _tao_sequence.length (_tao_seq_len);
                        
                        // If length is 0 we return true.
                        if (0 >= _tao_seq_len) 
                          {
                            return 1;
                          }
                        
                        // Retrieve all the elements.
                        CORBA::Boolean _tao_marshal_flag = 1;
                        
                        for (CORBA::ULong i = 0; i < _tao_seq_len && _tao_marshal_flag; ++i)
                          {
                            _tao_marshal_flag = (strm >> _tao_sequence[i]);
                          }
                        
                        return _tao_marshal_flag;
                      
                      }
                    
                    return 0;
                  }
                  
                  #endif /* _TAO_CDR_OP_CORBA_ComponentIR_EventPortDescriptionSeq_CPP_ */
                  
                  // TAO_IDL - Generated from
                  // be/be_visitor_interface/cdr_op_cs.cpp:63
                  
                  CORBA::Boolean operator<< (
                      TAO_OutputCDR &strm,
                      const CORBA::ComponentIR::FactoryDef_ptr _tao_objref
                    )
                  {
                    CORBA::Object_ptr _tao_corba_obj = _tao_objref;
                    return (strm << _tao_corba_obj);
                  }
                  
                  CORBA::Boolean operator>> (
                      TAO_InputCDR &strm,
                      CORBA::ComponentIR::FactoryDef_ptr &_tao_objref
                    )
                  {
                    CORBA::Object_var obj;
                    
                    if ((strm >> obj.inout ()) == 0)
                      {
                        return 0;
                      }
                    
                    typedef ::CORBA::ComponentIR::FactoryDef RHS_SCOPED_NAME;
                    
                    // Narrow to the right type.
                    _tao_objref =
                      TAO::Narrow_Utils<RHS_SCOPED_NAME>::unchecked_narrow (
                          obj.in (),
                          CORBA_ComponentIR__TAO_FactoryDef_Proxy_Broker_Factory_function_pointer
                        );
                      
                    return 1;
                  }
                  
                  // TAO_IDL - Generated from
                  // be/be_visitor_interface/cdr_op_cs.cpp:63
                  
                  CORBA::Boolean operator<< (
                      TAO_OutputCDR &strm,
                      const CORBA::ComponentIR::FinderDef_ptr _tao_objref
                    )
                  {
                    CORBA::Object_ptr _tao_corba_obj = _tao_objref;
                    return (strm << _tao_corba_obj);
                  }
                  
                  CORBA::Boolean operator>> (
                      TAO_InputCDR &strm,
                      CORBA::ComponentIR::FinderDef_ptr &_tao_objref
                    )
                  {
                    CORBA::Object_var obj;
                    
                    if ((strm >> obj.inout ()) == 0)
                      {
                        return 0;
                      }
                    
                    typedef ::CORBA::ComponentIR::FinderDef RHS_SCOPED_NAME;
                    
                    // Narrow to the right type.
                    _tao_objref =
                      TAO::Narrow_Utils<RHS_SCOPED_NAME>::unchecked_narrow (
                          obj.in (),
                          CORBA_ComponentIR__TAO_FinderDef_Proxy_Broker_Factory_function_pointer
                        );
                      
                    return 1;
                  }
                  
                  // TAO_IDL - Generated from
                  // be/be_visitor_interface/cdr_op_cs.cpp:63
                  
                  CORBA::Boolean operator<< (
                      TAO_OutputCDR &strm,
                      const CORBA::ComponentIR::HomeDef_ptr _tao_objref
                    )
                  {
                    CORBA::Object_ptr _tao_corba_obj = _tao_objref;
                    return (strm << _tao_corba_obj);
                  }
                  
                  CORBA::Boolean operator>> (
                      TAO_InputCDR &strm,
                      CORBA::ComponentIR::HomeDef_ptr &_tao_objref
                    )
                  {
                    CORBA::Object_var obj;
                    
                    if ((strm >> obj.inout ()) == 0)
                      {
                        return 0;
                      }
                    
                    typedef ::CORBA::ComponentIR::HomeDef RHS_SCOPED_NAME;
                    
                    // Narrow to the right type.
                    _tao_objref =
                      TAO::Narrow_Utils<RHS_SCOPED_NAME>::unchecked_narrow (
                          obj.in (),
                          CORBA_ComponentIR__TAO_HomeDef_Proxy_Broker_Factory_function_pointer
                        );
                      
                    return 1;
                  }
                  
                  // TAO_IDL - Generated from
                  // be/be_visitor_root/root.cpp:1702

#if defined (ACE_HAS_EXPLICIT_TEMPLATE_INSTANTIATION)

#if !defined (_CORBA_INTERFACEDEF__ARG_TRAITS_TMPLINST_CS_)
#define _CORBA_INTERFACEDEF__ARG_TRAITS_TMPLINST_CS_
                  
                    template class
                      TAO::Arg_Traits<
                          CORBA::InterfaceDef
                        >;
                  
                    template class
                      TAO::Object_Arg_Traits_T<
                          CORBA::InterfaceDef_ptr,
                          CORBA::InterfaceDef_var,
                          CORBA::InterfaceDef_out,
                          TAO::Objref_Traits<CORBA::InterfaceDef>
                        >;

#endif /* end #if !defined */

#if !defined (_CORBA_SEQUENCE__ARG_TRAITS_TMPLINST_CS_)
#define _CORBA_SEQUENCE__ARG_TRAITS_TMPLINST_CS_
                  
                    template class TAO::Arg_Traits<CORBA::InterfaceDefSeq>;
                  
                    template class
                      TAO::Var_Size_Arg_Traits_T<
                          CORBA::InterfaceDefSeq,
                          CORBA::InterfaceDefSeq_var,
                          CORBA::InterfaceDefSeq_out
                        >;

#endif /* end #if !defined */

#if !defined (_CORBA_VALUEDEF__ARG_TRAITS_TMPLINST_CS_)
#define _CORBA_VALUEDEF__ARG_TRAITS_TMPLINST_CS_
                  
                    template class
                      TAO::Arg_Traits<
                          CORBA::ValueDef
                        >;
                  
                    template class
                      TAO::Object_Arg_Traits_T<
                          CORBA::ValueDef_ptr,
                          CORBA::ValueDef_var,
                          CORBA::ValueDef_out,
                          TAO::Objref_Traits<CORBA::ValueDef>
                        >;

#endif /* end #if !defined */

#if !defined (_CORBA_SEQUENCE__ARG_TRAITS_TMPLINST_CS_)
#define _CORBA_SEQUENCE__ARG_TRAITS_TMPLINST_CS_
                  
                    template class TAO::Arg_Traits<CORBA::ValueDefSeq>;
                  
                    template class
                      TAO::Var_Size_Arg_Traits_T<
                          CORBA::ValueDefSeq,
                          CORBA::ValueDefSeq_var,
                          CORBA::ValueDefSeq_out
                        >;

#endif /* end #if !defined */

#if !defined (_CORBA_SEQUENCE__ARG_TRAITS_TMPLINST_CS_)
#define _CORBA_SEQUENCE__ARG_TRAITS_TMPLINST_CS_
                  
                    template class TAO::Arg_Traits<CORBA::ExtInitializerSeq>;
                  
                    template class
                      TAO::Var_Size_Arg_Traits_T<
                          CORBA::ExtInitializerSeq,
                          CORBA::ExtInitializerSeq_var,
                          CORBA::ExtInitializerSeq_out
                        >;

#endif /* end #if !defined */

#if !defined (_CORBA_SEQUENCE__ARG_TRAITS_TMPLINST_CS_)
#define _CORBA_SEQUENCE__ARG_TRAITS_TMPLINST_CS_
                  
                    template class TAO::Arg_Traits<CORBA::ExceptionDefSeq>;
                  
                    template class
                      TAO::Var_Size_Arg_Traits_T<
                          CORBA::ExceptionDefSeq,
                          CORBA::ExceptionDefSeq_var,
                          CORBA::ExceptionDefSeq_out
                        >;

#endif /* end #if !defined */

#if !defined (_CORBA_SEQUENCE__ARG_TRAITS_TMPLINST_CS_)
#define _CORBA_SEQUENCE__ARG_TRAITS_TMPLINST_CS_
                  
                    template class TAO::Arg_Traits<CORBA::ParDescriptionSeq>;
                  
                    template class
                      TAO::Var_Size_Arg_Traits_T<
                          CORBA::ParDescriptionSeq,
                          CORBA::ParDescriptionSeq_var,
                          CORBA::ParDescriptionSeq_out
                        >;

#endif /* end #if !defined */

#if !defined (_CORBA_COMPONENTIR_COMPONENTDEF__ARG_TRAITS_TMPLINST_CS_)
#define _CORBA_COMPONENTIR_COMPONENTDEF__ARG_TRAITS_TMPLINST_CS_
                  
                    template class
                      TAO::Arg_Traits<
                          CORBA::ComponentIR::ComponentDef
                        >;
                  
                    template class
                      TAO::Object_Arg_Traits_T<
                          CORBA::ComponentIR::ComponentDef_ptr,
                          CORBA::ComponentIR::ComponentDef_var,
                          CORBA::ComponentIR::ComponentDef_out,
                          TAO::Objref_Traits<CORBA::ComponentIR::ComponentDef>
                        >;

#endif /* end #if !defined */
                  
                    template class
                      TAO::Ret_Object_Argument_T<
                          CORBA::ComponentIR::ComponentDef_ptr,
                          CORBA::ComponentIR::ComponentDef_var
                        >;
                  
                    template class
                      TAO::In_Object_Argument_T<
                          CORBA::ComponentIR::ComponentDef_ptr
                        >;
                  
                    template class
                      TAO::Ret_Var_Size_Argument_T<
                          CORBA::InterfaceDefSeq,
                          CORBA::InterfaceDefSeq_var
                        >;
                  
                    template class
                      TAO::In_Var_Size_Argument_T<
                          CORBA::InterfaceDefSeq
                        >;
                  
                    template class
                      TAO::Ret_Object_Argument_T<
                          CORBA::ComponentIR::ProvidesDef_ptr,
                          CORBA::ComponentIR::ProvidesDef_var
                        >;
                  
                    template class
                      TAO::In_Object_Argument_T<
                          CORBA::InterfaceDef_ptr
                        >;
                  
                    template class
                      TAO::Ret_Object_Argument_T<
                          CORBA::ComponentIR::UsesDef_ptr,
                          CORBA::ComponentIR::UsesDef_var
                        >;
                  
                    template class
                      TAO::Ret_Object_Argument_T<
                          CORBA::ComponentIR::EmitsDef_ptr,
                          CORBA::ComponentIR::EmitsDef_var
                        >;
                  
                    template class
                      TAO::In_Object_Argument_T<
                          CORBA::ComponentIR::EventDef_ptr
                        >;
                  
                    template class
                      TAO::Ret_Object_Argument_T<
                          CORBA::ComponentIR::PublishesDef_ptr,
                          CORBA::ComponentIR::PublishesDef_var
                        >;
                  
                    template class
                      TAO::Ret_Object_Argument_T<
                          CORBA::ComponentIR::ConsumesDef_ptr,
                          CORBA::ComponentIR::ConsumesDef_var
                        >;
                  
                    template class
                      TAO::Objref_Traits<
                          CORBA::ComponentIR::ComponentDef
                        >;
                  
                    template class
                      TAO_Objref_Var_T<
                          CORBA::ComponentIR::ComponentDef
                        >;
                    
                    template class
                      TAO_Objref_Out_T<
                          CORBA::ComponentIR::ComponentDef
                        >;
                  
                    template class
                      TAO::Narrow_Utils<
                          CORBA::ComponentIR::ComponentDef
                        >;
                  
                    template class
                      TAO::Any_Impl_T<
                          CORBA::ComponentIR::ComponentDef
                        >;

#if !defined (_CORBA_COMPONENTIR_HOMEDEF__ARG_TRAITS_TMPLINST_CS_)
#define _CORBA_COMPONENTIR_HOMEDEF__ARG_TRAITS_TMPLINST_CS_
                  
                    template class
                      TAO::Arg_Traits<
                          CORBA::ComponentIR::HomeDef
                        >;
                  
                    template class
                      TAO::Object_Arg_Traits_T<
                          CORBA::ComponentIR::HomeDef_ptr,
                          CORBA::ComponentIR::HomeDef_var,
                          CORBA::ComponentIR::HomeDef_out,
                          TAO::Objref_Traits<CORBA::ComponentIR::HomeDef>
                        >;

#endif /* end #if !defined */
                  
                    template class
                      TAO::Ret_Object_Argument_T<
                          CORBA::ComponentIR::HomeDef_ptr,
                          CORBA::ComponentIR::HomeDef_var
                        >;
                  
                    template class
                      TAO::In_Object_Argument_T<
                          CORBA::ComponentIR::HomeDef_ptr
                        >;
                  
                    template class
                      TAO::Ret_Object_Argument_T<
                          CORBA::ValueDef_ptr,
                          CORBA::ValueDef_var
                        >;
                  
                    template class
                      TAO::In_Object_Argument_T<
                          CORBA::ValueDef_ptr
                        >;
                  
                    template class
                      TAO::Ret_Object_Argument_T<
                          CORBA::ComponentIR::FactoryDef_ptr,
                          CORBA::ComponentIR::FactoryDef_var
                        >;
                  
                    template class
                      TAO::In_Var_Size_Argument_T<
                          CORBA::ParDescriptionSeq
                        >;
                  
                    template class
                      TAO::In_Var_Size_Argument_T<
                          CORBA::ExceptionDefSeq
                        >;
                  
                    template class
                      TAO::Ret_Object_Argument_T<
                          CORBA::ComponentIR::FinderDef_ptr,
                          CORBA::ComponentIR::FinderDef_var
                        >;
                  
                    template class
                      TAO::Objref_Traits<
                          CORBA::ComponentIR::HomeDef
                        >;
                  
                    template class
                      TAO_Objref_Var_T<
                          CORBA::ComponentIR::HomeDef
                        >;
                    
                    template class
                      TAO_Objref_Out_T<
                          CORBA::ComponentIR::HomeDef
                        >;
                  
                    template class
                      TAO::Narrow_Utils<
                          CORBA::ComponentIR::HomeDef
                        >;
                  
                    template class
                      TAO::Any_Impl_T<
                          CORBA::ComponentIR::HomeDef
                        >;

#if !defined (_CORBA_COMPONENTIR_EVENTDEF__ARG_TRAITS_TMPLINST_CS_)
#define _CORBA_COMPONENTIR_EVENTDEF__ARG_TRAITS_TMPLINST_CS_
                  
                    template class
                      TAO::Arg_Traits<
                          CORBA::ComponentIR::EventDef
                        >;
                  
                    template class
                      TAO::Object_Arg_Traits_T<
                          CORBA::ComponentIR::EventDef_ptr,
                          CORBA::ComponentIR::EventDef_var,
                          CORBA::ComponentIR::EventDef_out,
                          TAO::Objref_Traits<CORBA::ComponentIR::EventDef>
                        >;

#endif /* end #if !defined */
                  
                    template class
                      TAO::Objref_Traits<
                          CORBA::ComponentIR::EventDef
                        >;
                  
                    template class
                      TAO_Objref_Var_T<
                          CORBA::ComponentIR::EventDef
                        >;
                    
                    template class
                      TAO_Objref_Out_T<
                          CORBA::ComponentIR::EventDef
                        >;
                  
                    template class
                      TAO::Narrow_Utils<
                          CORBA::ComponentIR::EventDef
                        >;
                  
                    template class
                      TAO::Any_Impl_T<
                          CORBA::ComponentIR::EventDef
                        >;
                  
                    template class
                      TAO::Ret_Object_Argument_T<
                          CORBA::ComponentIR::EventDef_ptr,
                          CORBA::ComponentIR::EventDef_var
                        >;
                  
                    template class
                      TAO::In_Var_Size_Argument_T<
                          CORBA::ValueDefSeq
                        >;
                  
                    template class
                      TAO::In_Var_Size_Argument_T<
                          CORBA::ExtInitializerSeq
                        >;
                  
                    template class
                      TAO::Objref_Traits<
                          CORBA::ComponentIR::Container
                        >;
                  
                    template class
                      TAO_Objref_Var_T<
                          CORBA::ComponentIR::Container
                        >;
                    
                    template class
                      TAO_Objref_Out_T<
                          CORBA::ComponentIR::Container
                        >;
                  
                    template class
                      TAO::Narrow_Utils<
                          CORBA::ComponentIR::Container
                        >;
                  
                    template class
                      TAO::Any_Impl_T<
                          CORBA::ComponentIR::Container
                        >;
                  
                    template class
                      TAO::Objref_Traits<
                          CORBA::ComponentIR::ModuleDef
                        >;
                  
                    template class
                      TAO_Objref_Var_T<
                          CORBA::ComponentIR::ModuleDef
                        >;
                    
                    template class
                      TAO_Objref_Out_T<
                          CORBA::ComponentIR::ModuleDef
                        >;
                  
                    template class
                      TAO::Narrow_Utils<
                          CORBA::ComponentIR::ModuleDef
                        >;
                  
                    template class
                      TAO::Any_Impl_T<
                          CORBA::ComponentIR::ModuleDef
                        >;
                  
                    template class
                      TAO::Objref_Traits<
                          CORBA::ComponentIR::Repository
                        >;
                  
                    template class
                      TAO_Objref_Var_T<
                          CORBA::ComponentIR::Repository
                        >;
                    
                    template class
                      TAO_Objref_Out_T<
                          CORBA::ComponentIR::Repository
                        >;
                  
                    template class
                      TAO::Narrow_Utils<
                          CORBA::ComponentIR::Repository
                        >;
                  
                    template class
                      TAO::Any_Impl_T<
                          CORBA::ComponentIR::Repository
                        >;

#if !defined (_CORBA_COMPONENTIR_PROVIDESDEF__ARG_TRAITS_TMPLINST_CS_)
#define _CORBA_COMPONENTIR_PROVIDESDEF__ARG_TRAITS_TMPLINST_CS_
                  
                    template class
                      TAO::Arg_Traits<
                          CORBA::ComponentIR::ProvidesDef
                        >;
                  
                    template class
                      TAO::Object_Arg_Traits_T<
                          CORBA::ComponentIR::ProvidesDef_ptr,
                          CORBA::ComponentIR::ProvidesDef_var,
                          CORBA::ComponentIR::ProvidesDef_out,
                          TAO::Objref_Traits<CORBA::ComponentIR::ProvidesDef>
                        >;

#endif /* end #if !defined */
                  
                    template class
                      TAO::Ret_Object_Argument_T<
                          CORBA::InterfaceDef_ptr,
                          CORBA::InterfaceDef_var
                        >;
                  
                    template class
                      TAO::Objref_Traits<
                          CORBA::ComponentIR::ProvidesDef
                        >;
                  
                    template class
                      TAO_Objref_Var_T<
                          CORBA::ComponentIR::ProvidesDef
                        >;
                    
                    template class
                      TAO_Objref_Out_T<
                          CORBA::ComponentIR::ProvidesDef
                        >;
                  
                    template class
                      TAO::Narrow_Utils<
                          CORBA::ComponentIR::ProvidesDef
                        >;
                  
                    template class
                      TAO::Any_Impl_T<
                          CORBA::ComponentIR::ProvidesDef
                        >;
                  
                    template class
                      TAO_Var_Var_T<
                          CORBA::ComponentIR::ProvidesDescription
                        >;
                  
                    template class
                      TAO_Var_Base_T<
                          CORBA::ComponentIR::ProvidesDescription
                        >;
                  
                    template class
                      TAO_Out_T<
                          CORBA::ComponentIR::ProvidesDescription,
                          CORBA::ComponentIR::ProvidesDescription_var
                        >;
                  
                    template class
                      TAO::Any_Dual_Impl_T<
                          CORBA::ComponentIR::ProvidesDescription
                        >;

#if !defined (_CORBA_COMPONENTIR_USESDEF__ARG_TRAITS_TMPLINST_CS_)
#define _CORBA_COMPONENTIR_USESDEF__ARG_TRAITS_TMPLINST_CS_
                  
                    template class
                      TAO::Arg_Traits<
                          CORBA::ComponentIR::UsesDef
                        >;
                  
                    template class
                      TAO::Object_Arg_Traits_T<
                          CORBA::ComponentIR::UsesDef_ptr,
                          CORBA::ComponentIR::UsesDef_var,
                          CORBA::ComponentIR::UsesDef_out,
                          TAO::Objref_Traits<CORBA::ComponentIR::UsesDef>
                        >;

#endif /* end #if !defined */
                  
                    template class
                      TAO::Objref_Traits<
                          CORBA::ComponentIR::UsesDef
                        >;
                  
                    template class
                      TAO_Objref_Var_T<
                          CORBA::ComponentIR::UsesDef
                        >;
                    
                    template class
                      TAO_Objref_Out_T<
                          CORBA::ComponentIR::UsesDef
                        >;
                  
                    template class
                      TAO::Narrow_Utils<
                          CORBA::ComponentIR::UsesDef
                        >;
                  
                    template class
                      TAO::Any_Impl_T<
                          CORBA::ComponentIR::UsesDef
                        >;
                  
                    template class
                      TAO_Var_Var_T<
                          CORBA::ComponentIR::UsesDescription
                        >;
                  
                    template class
                      TAO_Var_Base_T<
                          CORBA::ComponentIR::UsesDescription
                        >;
                  
                    template class
                      TAO_Out_T<
                          CORBA::ComponentIR::UsesDescription,
                          CORBA::ComponentIR::UsesDescription_var
                        >;
                  
                    template class
                      TAO::Any_Dual_Impl_T<
                          CORBA::ComponentIR::UsesDescription
                        >;
                  
                    template class
                      TAO::Objref_Traits<
                          CORBA::ComponentIR::EventPortDef
                        >;
                  
                    template class
                      TAO_Objref_Var_T<
                          CORBA::ComponentIR::EventPortDef
                        >;
                    
                    template class
                      TAO_Objref_Out_T<
                          CORBA::ComponentIR::EventPortDef
                        >;
                  
                    template class
                      TAO::Narrow_Utils<
                          CORBA::ComponentIR::EventPortDef
                        >;
                  
                    template class
                      TAO::Any_Impl_T<
                          CORBA::ComponentIR::EventPortDef
                        >;
                  
                    template class
                      TAO_Var_Var_T<
                          CORBA::ComponentIR::EventPortDescription
                        >;
                  
                    template class
                      TAO_Var_Base_T<
                          CORBA::ComponentIR::EventPortDescription
                        >;
                  
                    template class
                      TAO_Out_T<
                          CORBA::ComponentIR::EventPortDescription,
                          CORBA::ComponentIR::EventPortDescription_var
                        >;
                  
                    template class
                      TAO::Any_Dual_Impl_T<
                          CORBA::ComponentIR::EventPortDescription
                        >;

#if !defined (_CORBA_COMPONENTIR_EMITSDEF__ARG_TRAITS_TMPLINST_CS_)
#define _CORBA_COMPONENTIR_EMITSDEF__ARG_TRAITS_TMPLINST_CS_
                  
                    template class
                      TAO::Arg_Traits<
                          CORBA::ComponentIR::EmitsDef
                        >;
                  
                    template class
                      TAO::Object_Arg_Traits_T<
                          CORBA::ComponentIR::EmitsDef_ptr,
                          CORBA::ComponentIR::EmitsDef_var,
                          CORBA::ComponentIR::EmitsDef_out,
                          TAO::Objref_Traits<CORBA::ComponentIR::EmitsDef>
                        >;

#endif /* end #if !defined */
                  
                    template class
                      TAO::Objref_Traits<
                          CORBA::ComponentIR::EmitsDef
                        >;
                  
                    template class
                      TAO_Objref_Var_T<
                          CORBA::ComponentIR::EmitsDef
                        >;
                    
                    template class
                      TAO_Objref_Out_T<
                          CORBA::ComponentIR::EmitsDef
                        >;
                  
                    template class
                      TAO::Narrow_Utils<
                          CORBA::ComponentIR::EmitsDef
                        >;
                  
                    template class
                      TAO::Any_Impl_T<
                          CORBA::ComponentIR::EmitsDef
                        >;

#if !defined (_CORBA_COMPONENTIR_PUBLISHESDEF__ARG_TRAITS_TMPLINST_CS_)
#define _CORBA_COMPONENTIR_PUBLISHESDEF__ARG_TRAITS_TMPLINST_CS_
                  
                    template class
                      TAO::Arg_Traits<
                          CORBA::ComponentIR::PublishesDef
                        >;
                  
                    template class
                      TAO::Object_Arg_Traits_T<
                          CORBA::ComponentIR::PublishesDef_ptr,
                          CORBA::ComponentIR::PublishesDef_var,
                          CORBA::ComponentIR::PublishesDef_out,
                          TAO::Objref_Traits<CORBA::ComponentIR::PublishesDef>
                        >;

#endif /* end #if !defined */
                  
                    template class
                      TAO::Objref_Traits<
                          CORBA::ComponentIR::PublishesDef
                        >;
                  
                    template class
                      TAO_Objref_Var_T<
                          CORBA::ComponentIR::PublishesDef
                        >;
                    
                    template class
                      TAO_Objref_Out_T<
                          CORBA::ComponentIR::PublishesDef
                        >;
                  
                    template class
                      TAO::Narrow_Utils<
                          CORBA::ComponentIR::PublishesDef
                        >;
                  
                    template class
                      TAO::Any_Impl_T<
                          CORBA::ComponentIR::PublishesDef
                        >;

#if !defined (_CORBA_COMPONENTIR_CONSUMESDEF__ARG_TRAITS_TMPLINST_CS_)
#define _CORBA_COMPONENTIR_CONSUMESDEF__ARG_TRAITS_TMPLINST_CS_
                  
                    template class
                      TAO::Arg_Traits<
                          CORBA::ComponentIR::ConsumesDef
                        >;
                  
                    template class
                      TAO::Object_Arg_Traits_T<
                          CORBA::ComponentIR::ConsumesDef_ptr,
                          CORBA::ComponentIR::ConsumesDef_var,
                          CORBA::ComponentIR::ConsumesDef_out,
                          TAO::Objref_Traits<CORBA::ComponentIR::ConsumesDef>
                        >;

#endif /* end #if !defined */
                  
                    template class
                      TAO::Objref_Traits<
                          CORBA::ComponentIR::ConsumesDef
                        >;
                  
                    template class
                      TAO_Objref_Var_T<
                          CORBA::ComponentIR::ConsumesDef
                        >;
                    
                    template class
                      TAO_Objref_Out_T<
                          CORBA::ComponentIR::ConsumesDef
                        >;
                  
                    template class
                      TAO::Narrow_Utils<
                          CORBA::ComponentIR::ConsumesDef
                        >;
                  
                    template class
                      TAO::Any_Impl_T<
                          CORBA::ComponentIR::ConsumesDef
                        >;
                  
                    template class
                      TAO_VarSeq_Var_T<
                          CORBA::ComponentIR::ProvidesDescriptionSeq,
                          CORBA::ComponentIR::ProvidesDescription
                        >;
                  
                    template class
                      TAO_Seq_Var_Base_T<
                          CORBA::ComponentIR::ProvidesDescriptionSeq,
                          CORBA::ComponentIR::ProvidesDescription
                        >;
                  
                    template class
                      TAO_Seq_Out_T<
                          CORBA::ComponentIR::ProvidesDescriptionSeq,
                          CORBA::ComponentIR::ProvidesDescriptionSeq_var,
                          CORBA::ComponentIR::ProvidesDescription
                        >;

#if !defined (_CORBA_COMPONENTIR_PROVIDESDESCRIPTION__EXPLICIT_CS_)
#define _CORBA_COMPONENTIR_PROVIDESDESCRIPTION__EXPLICIT_CS_
                  
                    template class
                      TAO_Unbounded_Sequence<
                          CORBA::ComponentIR::ProvidesDescription
                        >;

#endif /* end #if !defined */
                  
                    template class
                      TAO::Any_Dual_Impl_T<
                          CORBA::ComponentIR::ProvidesDescriptionSeq
                        >;
                  
                    template class
                      TAO_VarSeq_Var_T<
                          CORBA::ComponentIR::UsesDescriptionSeq,
                          CORBA::ComponentIR::UsesDescription
                        >;
                  
                    template class
                      TAO_Seq_Var_Base_T<
                          CORBA::ComponentIR::UsesDescriptionSeq,
                          CORBA::ComponentIR::UsesDescription
                        >;
                  
                    template class
                      TAO_Seq_Out_T<
                          CORBA::ComponentIR::UsesDescriptionSeq,
                          CORBA::ComponentIR::UsesDescriptionSeq_var,
                          CORBA::ComponentIR::UsesDescription
                        >;

#if !defined (_CORBA_COMPONENTIR_USESDESCRIPTION__EXPLICIT_CS_)
#define _CORBA_COMPONENTIR_USESDESCRIPTION__EXPLICIT_CS_
                  
                    template class
                      TAO_Unbounded_Sequence<
                          CORBA::ComponentIR::UsesDescription
                        >;

#endif /* end #if !defined */
                  
                    template class
                      TAO::Any_Dual_Impl_T<
                          CORBA::ComponentIR::UsesDescriptionSeq
                        >;
                  
                    template class
                      TAO_VarSeq_Var_T<
                          CORBA::ComponentIR::EventPortDescriptionSeq,
                          CORBA::ComponentIR::EventPortDescription
                        >;
                  
                    template class
                      TAO_Seq_Var_Base_T<
                          CORBA::ComponentIR::EventPortDescriptionSeq,
                          CORBA::ComponentIR::EventPortDescription
                        >;
                  
                    template class
                      TAO_Seq_Out_T<
                          CORBA::ComponentIR::EventPortDescriptionSeq,
                          CORBA::ComponentIR::EventPortDescriptionSeq_var,
                          CORBA::ComponentIR::EventPortDescription
                        >;

#if !defined (_CORBA_COMPONENTIR_EVENTPORTDESCRIPTION__EXPLICIT_CS_)
#define _CORBA_COMPONENTIR_EVENTPORTDESCRIPTION__EXPLICIT_CS_
                  
                    template class
                      TAO_Unbounded_Sequence<
                          CORBA::ComponentIR::EventPortDescription
                        >;

#endif /* end #if !defined */
                  
                    template class
                      TAO::Any_Dual_Impl_T<
                          CORBA::ComponentIR::EventPortDescriptionSeq
                        >;
                  
                    template class
                      TAO_Var_Var_T<
                          CORBA::ComponentIR::ComponentDescription
                        >;
                  
                    template class
                      TAO_Var_Base_T<
                          CORBA::ComponentIR::ComponentDescription
                        >;
                  
                    template class
                      TAO_Out_T<
                          CORBA::ComponentIR::ComponentDescription,
                          CORBA::ComponentIR::ComponentDescription_var
                        >;
                  
                    template class
                      TAO::Any_Dual_Impl_T<
                          CORBA::ComponentIR::ComponentDescription
                        >;

#if !defined (_CORBA_COMPONENTIR_FACTORYDEF__ARG_TRAITS_TMPLINST_CS_)
#define _CORBA_COMPONENTIR_FACTORYDEF__ARG_TRAITS_TMPLINST_CS_
                  
                    template class
                      TAO::Arg_Traits<
                          CORBA::ComponentIR::FactoryDef
                        >;
                  
                    template class
                      TAO::Object_Arg_Traits_T<
                          CORBA::ComponentIR::FactoryDef_ptr,
                          CORBA::ComponentIR::FactoryDef_var,
                          CORBA::ComponentIR::FactoryDef_out,
                          TAO::Objref_Traits<CORBA::ComponentIR::FactoryDef>
                        >;

#endif /* end #if !defined */
                  
                    template class
                      TAO::Objref_Traits<
                          CORBA::ComponentIR::FactoryDef
                        >;
                  
                    template class
                      TAO_Objref_Var_T<
                          CORBA::ComponentIR::FactoryDef
                        >;
                    
                    template class
                      TAO_Objref_Out_T<
                          CORBA::ComponentIR::FactoryDef
                        >;
                  
                    template class
                      TAO::Narrow_Utils<
                          CORBA::ComponentIR::FactoryDef
                        >;
                  
                    template class
                      TAO::Any_Impl_T<
                          CORBA::ComponentIR::FactoryDef
                        >;

#if !defined (_CORBA_COMPONENTIR_FINDERDEF__ARG_TRAITS_TMPLINST_CS_)
#define _CORBA_COMPONENTIR_FINDERDEF__ARG_TRAITS_TMPLINST_CS_
                  
                    template class
                      TAO::Arg_Traits<
                          CORBA::ComponentIR::FinderDef
                        >;
                  
                    template class
                      TAO::Object_Arg_Traits_T<
                          CORBA::ComponentIR::FinderDef_ptr,
                          CORBA::ComponentIR::FinderDef_var,
                          CORBA::ComponentIR::FinderDef_out,
                          TAO::Objref_Traits<CORBA::ComponentIR::FinderDef>
                        >;

#endif /* end #if !defined */
                  
                    template class
                      TAO::Objref_Traits<
                          CORBA::ComponentIR::FinderDef
                        >;
                  
                    template class
                      TAO_Objref_Var_T<
                          CORBA::ComponentIR::FinderDef
                        >;
                    
                    template class
                      TAO_Objref_Out_T<
                          CORBA::ComponentIR::FinderDef
                        >;
                  
                    template class
                      TAO::Narrow_Utils<
                          CORBA::ComponentIR::FinderDef
                        >;
                  
                    template class
                      TAO::Any_Impl_T<
                          CORBA::ComponentIR::FinderDef
                        >;
                  
                    template class
                      TAO_Var_Var_T<
                          CORBA::ComponentIR::HomeDescription
                        >;
                  
                    template class
                      TAO_Var_Base_T<
                          CORBA::ComponentIR::HomeDescription
                        >;
                  
                    template class
                      TAO_Out_T<
                          CORBA::ComponentIR::HomeDescription,
                          CORBA::ComponentIR::HomeDescription_var
                        >;
                  
                    template class
                      TAO::Any_Dual_Impl_T<
                          CORBA::ComponentIR::HomeDescription
                        >;

#elif defined (ACE_HAS_TEMPLATE_INSTANTIATION_PRAGMA)

#if !defined (_CORBA_INTERFACEDEF__ARG_TRAITS_TMPLINST_CS_)
#define _CORBA_INTERFACEDEF__ARG_TRAITS_TMPLINST_CS_
                  
                  # pragma instantiate \
                      TAO::Arg_Traits< \
                          CORBA::InterfaceDef \
                        >
                  
                  # pragma instantiate \
                      TAO::Object_Arg_Traits_T< \
                          CORBA::InterfaceDef_ptr, \
                          CORBA::InterfaceDef_var, \
                          CORBA::InterfaceDef_out, \
                          TAO::Objref_Traits<CORBA::InterfaceDef> \
                        >

#endif /* end #if !defined */

#if !defined (_CORBA_SEQUENCE__ARG_TRAITS_TMPLINST_CS_)
#define _CORBA_SEQUENCE__ARG_TRAITS_TMPLINST_CS_
                  
                  # pragma instantiate TAO::Arg_Traits<CORBA::InterfaceDefSeq>
                  
                  # pragma instantiate \
                      TAO::Var_Size_Arg_Traits_T< \
                          CORBA::InterfaceDefSeq, \
                          CORBA::InterfaceDefSeq_var, \
                          CORBA::InterfaceDefSeq_out \
                        >

#endif /* end #if !defined */

#if !defined (_CORBA_VALUEDEF__ARG_TRAITS_TMPLINST_CS_)
#define _CORBA_VALUEDEF__ARG_TRAITS_TMPLINST_CS_
                  
                  # pragma instantiate \
                      TAO::Arg_Traits< \
                          CORBA::ValueDef \
                        >
                  
                  # pragma instantiate \
                      TAO::Object_Arg_Traits_T< \
                          CORBA::ValueDef_ptr, \
                          CORBA::ValueDef_var, \
                          CORBA::ValueDef_out, \
                          TAO::Objref_Traits<CORBA::ValueDef> \
                        >

#endif /* end #if !defined */

#if !defined (_CORBA_SEQUENCE__ARG_TRAITS_TMPLINST_CS_)
#define _CORBA_SEQUENCE__ARG_TRAITS_TMPLINST_CS_
                  
                  # pragma instantiate TAO::Arg_Traits<CORBA::ValueDefSeq>
                  
                  # pragma instantiate \
                      TAO::Var_Size_Arg_Traits_T< \
                          CORBA::ValueDefSeq, \
                          CORBA::ValueDefSeq_var, \
                          CORBA::ValueDefSeq_out \
                        >

#endif /* end #if !defined */

#if !defined (_CORBA_SEQUENCE__ARG_TRAITS_TMPLINST_CS_)
#define _CORBA_SEQUENCE__ARG_TRAITS_TMPLINST_CS_
                  
                  # pragma instantiate TAO::Arg_Traits<CORBA::ExtInitializerSeq>
                  
                  # pragma instantiate \
                      TAO::Var_Size_Arg_Traits_T< \
                          CORBA::ExtInitializerSeq, \
                          CORBA::ExtInitializerSeq_var, \
                          CORBA::ExtInitializerSeq_out \
                        >

#endif /* end #if !defined */

#if !defined (_CORBA_SEQUENCE__ARG_TRAITS_TMPLINST_CS_)
#define _CORBA_SEQUENCE__ARG_TRAITS_TMPLINST_CS_
                  
                  # pragma instantiate TAO::Arg_Traits<CORBA::ExceptionDefSeq>
                  
                  # pragma instantiate \
                      TAO::Var_Size_Arg_Traits_T< \
                          CORBA::ExceptionDefSeq, \
                          CORBA::ExceptionDefSeq_var, \
                          CORBA::ExceptionDefSeq_out \
                        >

#endif /* end #if !defined */

#if !defined (_CORBA_SEQUENCE__ARG_TRAITS_TMPLINST_CS_)
#define _CORBA_SEQUENCE__ARG_TRAITS_TMPLINST_CS_
                  
                  # pragma instantiate TAO::Arg_Traits<CORBA::ParDescriptionSeq>
                  
                  # pragma instantiate \
                      TAO::Var_Size_Arg_Traits_T< \
                          CORBA::ParDescriptionSeq, \
                          CORBA::ParDescriptionSeq_var, \
                          CORBA::ParDescriptionSeq_out \
                        >

#endif /* end #if !defined */

#if !defined (_CORBA_COMPONENTIR_COMPONENTDEF__ARG_TRAITS_TMPLINST_CS_)
#define _CORBA_COMPONENTIR_COMPONENTDEF__ARG_TRAITS_TMPLINST_CS_
                  
                  # pragma instantiate \
                      TAO::Arg_Traits< \
                          CORBA::ComponentIR::ComponentDef \
                        >
                  
                  # pragma instantiate \
                      TAO::Object_Arg_Traits_T< \
                          CORBA::ComponentIR::ComponentDef_ptr, \
                          CORBA::ComponentIR::ComponentDef_var, \
                          CORBA::ComponentIR::ComponentDef_out, \
                          TAO::Objref_Traits<CORBA::ComponentIR::ComponentDef> \
                        >

#endif /* end #if !defined */
                  
                  # pragma instantiate \
                      TAO::In_Object_Argument_T< \
                          CORBA::ComponentIR::ComponentDef_ptr \
                        >
                  
                  # pragma instantiate \
                      TAO::In_Var_Size_Argument_T< \
                          CORBA::InterfaceDefSeq \
                        >
                  
                  # pragma instantiate \
                      TAO::In_Object_Argument_T< \
                          CORBA::InterfaceDef_ptr \
                        >
                  
                  # pragma instantiate \
                      TAO::In_Object_Argument_T< \
                          CORBA::ComponentIR::EventDef_ptr \
                        >
                  
                  # pragma instantiate \
                      TAO::Objref_Traits< \
                          CORBA::ComponentIR::ComponentDef \
                        >
                  
                  # pragma instantiate \
                      TAO_Objref_Var_T< \
                          CORBA::ComponentIR::ComponentDef
                        >
                    
                  # pragma instantiate \
                      TAO_Objref_Out_T< \
                          CORBA::ComponentIR::ComponentDef
                        >
                  
                  # pragma instantiate \
                      TAO::Narrow_Utils< \
                          CORBA::ComponentIR::ComponentDef \
                        >
                  
                  # pragma instantiate \
                      TAO::Any_Impl_T< \
                          CORBA::ComponentIR::ComponentDef \
                        >

#if !defined (_CORBA_COMPONENTIR_HOMEDEF__ARG_TRAITS_TMPLINST_CS_)
#define _CORBA_COMPONENTIR_HOMEDEF__ARG_TRAITS_TMPLINST_CS_
                  
                  # pragma instantiate \
                      TAO::Arg_Traits< \
                          CORBA::ComponentIR::HomeDef \
                        >
                  
                  # pragma instantiate \
                      TAO::Object_Arg_Traits_T< \
                          CORBA::ComponentIR::HomeDef_ptr, \
                          CORBA::ComponentIR::HomeDef_var, \
                          CORBA::ComponentIR::HomeDef_out, \
                          TAO::Objref_Traits<CORBA::ComponentIR::HomeDef> \
                        >

#endif /* end #if !defined */
                  
                  # pragma instantiate \
                      TAO::In_Object_Argument_T< \
                          CORBA::ComponentIR::HomeDef_ptr \
                        >
                  
                  # pragma instantiate \
                      TAO::In_Object_Argument_T< \
                          CORBA::ValueDef_ptr \
                        >
                  
                  # pragma instantiate \
                      TAO::In_Var_Size_Argument_T< \
                          CORBA::ParDescriptionSeq \
                        >
                  
                  # pragma instantiate \
                      TAO::In_Var_Size_Argument_T< \
                          CORBA::ExceptionDefSeq \
                        >
                  
                  # pragma instantiate \
                      TAO::Objref_Traits< \
                          CORBA::ComponentIR::HomeDef \
                        >
                  
                  # pragma instantiate \
                      TAO_Objref_Var_T< \
                          CORBA::ComponentIR::HomeDef
                        >
                    
                  # pragma instantiate \
                      TAO_Objref_Out_T< \
                          CORBA::ComponentIR::HomeDef
                        >
                  
                  # pragma instantiate \
                      TAO::Narrow_Utils< \
                          CORBA::ComponentIR::HomeDef \
                        >
                  
                  # pragma instantiate \
                      TAO::Any_Impl_T< \
                          CORBA::ComponentIR::HomeDef \
                        >

#if !defined (_CORBA_COMPONENTIR_EVENTDEF__ARG_TRAITS_TMPLINST_CS_)
#define _CORBA_COMPONENTIR_EVENTDEF__ARG_TRAITS_TMPLINST_CS_
                  
                  # pragma instantiate \
                      TAO::Arg_Traits< \
                          CORBA::ComponentIR::EventDef \
                        >
                  
                  # pragma instantiate \
                      TAO::Object_Arg_Traits_T< \
                          CORBA::ComponentIR::EventDef_ptr, \
                          CORBA::ComponentIR::EventDef_var, \
                          CORBA::ComponentIR::EventDef_out, \
                          TAO::Objref_Traits<CORBA::ComponentIR::EventDef> \
                        >

#endif /* end #if !defined */
                  
                  # pragma instantiate \
                      TAO::Objref_Traits< \
                          CORBA::ComponentIR::EventDef \
                        >
                  
                  # pragma instantiate \
                      TAO_Objref_Var_T< \
                          CORBA::ComponentIR::EventDef
                        >
                    
                  # pragma instantiate \
                      TAO_Objref_Out_T< \
                          CORBA::ComponentIR::EventDef
                        >
                  
                  # pragma instantiate \
                      TAO::Narrow_Utils< \
                          CORBA::ComponentIR::EventDef \
                        >
                  
                  # pragma instantiate \
                      TAO::Any_Impl_T< \
                          CORBA::ComponentIR::EventDef \
                        >
                  
                  # pragma instantiate \
                      TAO::In_Var_Size_Argument_T< \
                          CORBA::ValueDefSeq \
                        >
                  
                  # pragma instantiate \
                      TAO::In_Var_Size_Argument_T< \
                          CORBA::ExtInitializerSeq \
                        >
                  
                  # pragma instantiate \
                      TAO::Objref_Traits< \
                          CORBA::ComponentIR::Container \
                        >
                  
                  # pragma instantiate \
                      TAO_Objref_Var_T< \
                          CORBA::ComponentIR::Container
                        >
                    
                  # pragma instantiate \
                      TAO_Objref_Out_T< \
                          CORBA::ComponentIR::Container
                        >
                  
                  # pragma instantiate \
                      TAO::Narrow_Utils< \
                          CORBA::ComponentIR::Container \
                        >
                  
                  # pragma instantiate \
                      TAO::Any_Impl_T< \
                          CORBA::ComponentIR::Container \
                        >
                  
                  # pragma instantiate \
                      TAO::Objref_Traits< \
                          CORBA::ComponentIR::ModuleDef \
                        >
                  
                  # pragma instantiate \
                      TAO_Objref_Var_T< \
                          CORBA::ComponentIR::ModuleDef
                        >
                    
                  # pragma instantiate \
                      TAO_Objref_Out_T< \
                          CORBA::ComponentIR::ModuleDef
                        >
                  
                  # pragma instantiate \
                      TAO::Narrow_Utils< \
                          CORBA::ComponentIR::ModuleDef \
                        >
                  
                  # pragma instantiate \
                      TAO::Any_Impl_T< \
                          CORBA::ComponentIR::ModuleDef \
                        >
                  
                  # pragma instantiate \
                      TAO::Objref_Traits< \
                          CORBA::ComponentIR::Repository \
                        >
                  
                  # pragma instantiate \
                      TAO_Objref_Var_T< \
                          CORBA::ComponentIR::Repository
                        >
                    
                  # pragma instantiate \
                      TAO_Objref_Out_T< \
                          CORBA::ComponentIR::Repository
                        >
                  
                  # pragma instantiate \
                      TAO::Narrow_Utils< \
                          CORBA::ComponentIR::Repository \
                        >
                  
                  # pragma instantiate \
                      TAO::Any_Impl_T< \
                          CORBA::ComponentIR::Repository \
                        >

#if !defined (_CORBA_COMPONENTIR_PROVIDESDEF__ARG_TRAITS_TMPLINST_CS_)
#define _CORBA_COMPONENTIR_PROVIDESDEF__ARG_TRAITS_TMPLINST_CS_
                  
                  # pragma instantiate \
                      TAO::Arg_Traits< \
                          CORBA::ComponentIR::ProvidesDef \
                        >
                  
                  # pragma instantiate \
                      TAO::Object_Arg_Traits_T< \
                          CORBA::ComponentIR::ProvidesDef_ptr, \
                          CORBA::ComponentIR::ProvidesDef_var, \
                          CORBA::ComponentIR::ProvidesDef_out, \
                          TAO::Objref_Traits<CORBA::ComponentIR::ProvidesDef> \
                        >

#endif /* end #if !defined */
                  
                  # pragma instantiate \
                      TAO::Objref_Traits< \
                          CORBA::ComponentIR::ProvidesDef \
                        >
                  
                  # pragma instantiate \
                      TAO_Objref_Var_T< \
                          CORBA::ComponentIR::ProvidesDef
                        >
                    
                  # pragma instantiate \
                      TAO_Objref_Out_T< \
                          CORBA::ComponentIR::ProvidesDef
                        >
                  
                  # pragma instantiate \
                      TAO::Narrow_Utils< \
                          CORBA::ComponentIR::ProvidesDef \
                        >
                  
                  # pragma instantiate \
                      TAO::Any_Impl_T< \
                          CORBA::ComponentIR::ProvidesDef \
                        >
                  
                  # pragma instantiate \
                      TAO_Var_Var_T< \
                          CORBA::ComponentIR::ProvidesDescription \
                        >
                  
                  # pragma instantiate \
                      TAO_Var_Base_T< \
                          CORBA::ComponentIR::ProvidesDescription \
                        >
                  
                  # pragma instantiate \
                      TAO_Out_T< \
                          CORBA::ComponentIR::ProvidesDescription, \
                          CORBA::ComponentIR::ProvidesDescription_var \
                        >
                  
                  # pragma instantiate \
                      TAO::Any_Dual_Impl_T< \
                          CORBA::ComponentIR::ProvidesDescription \
                        >

#if !defined (_CORBA_COMPONENTIR_USESDEF__ARG_TRAITS_TMPLINST_CS_)
#define _CORBA_COMPONENTIR_USESDEF__ARG_TRAITS_TMPLINST_CS_
                  
                  # pragma instantiate \
                      TAO::Arg_Traits< \
                          CORBA::ComponentIR::UsesDef \
                        >
                  
                  # pragma instantiate \
                      TAO::Object_Arg_Traits_T< \
                          CORBA::ComponentIR::UsesDef_ptr, \
                          CORBA::ComponentIR::UsesDef_var, \
                          CORBA::ComponentIR::UsesDef_out, \
                          TAO::Objref_Traits<CORBA::ComponentIR::UsesDef> \
                        >

#endif /* end #if !defined */
                  
                  # pragma instantiate \
                      TAO::Objref_Traits< \
                          CORBA::ComponentIR::UsesDef \
                        >
                  
                  # pragma instantiate \
                      TAO_Objref_Var_T< \
                          CORBA::ComponentIR::UsesDef
                        >
                    
                  # pragma instantiate \
                      TAO_Objref_Out_T< \
                          CORBA::ComponentIR::UsesDef
                        >
                  
                  # pragma instantiate \
                      TAO::Narrow_Utils< \
                          CORBA::ComponentIR::UsesDef \
                        >
                  
                  # pragma instantiate \
                      TAO::Any_Impl_T< \
                          CORBA::ComponentIR::UsesDef \
                        >
                  
                  # pragma instantiate \
                      TAO_Var_Var_T< \
                          CORBA::ComponentIR::UsesDescription \
                        >
                  
                  # pragma instantiate \
                      TAO_Var_Base_T< \
                          CORBA::ComponentIR::UsesDescription \
                        >
                  
                  # pragma instantiate \
                      TAO_Out_T< \
                          CORBA::ComponentIR::UsesDescription, \
                          CORBA::ComponentIR::UsesDescription_var \
                        >
                  
                  # pragma instantiate \
                      TAO::Any_Dual_Impl_T< \
                          CORBA::ComponentIR::UsesDescription \
                        >
                  
                  # pragma instantiate \
                      TAO::Objref_Traits< \
                          CORBA::ComponentIR::EventPortDef \
                        >
                  
                  # pragma instantiate \
                      TAO_Objref_Var_T< \
                          CORBA::ComponentIR::EventPortDef
                        >
                    
                  # pragma instantiate \
                      TAO_Objref_Out_T< \
                          CORBA::ComponentIR::EventPortDef
                        >
                  
                  # pragma instantiate \
                      TAO::Narrow_Utils< \
                          CORBA::ComponentIR::EventPortDef \
                        >
                  
                  # pragma instantiate \
                      TAO::Any_Impl_T< \
                          CORBA::ComponentIR::EventPortDef \
                        >
                  
                  # pragma instantiate \
                      TAO_Var_Var_T< \
                          CORBA::ComponentIR::EventPortDescription \
                        >
                  
                  # pragma instantiate \
                      TAO_Var_Base_T< \
                          CORBA::ComponentIR::EventPortDescription \
                        >
                  
                  # pragma instantiate \
                      TAO_Out_T< \
                          CORBA::ComponentIR::EventPortDescription, \
                          CORBA::ComponentIR::EventPortDescription_var \
                        >
                  
                  # pragma instantiate \
                      TAO::Any_Dual_Impl_T< \
                          CORBA::ComponentIR::EventPortDescription \
                        >

#if !defined (_CORBA_COMPONENTIR_EMITSDEF__ARG_TRAITS_TMPLINST_CS_)
#define _CORBA_COMPONENTIR_EMITSDEF__ARG_TRAITS_TMPLINST_CS_
                  
                  # pragma instantiate \
                      TAO::Arg_Traits< \
                          CORBA::ComponentIR::EmitsDef \
                        >
                  
                  # pragma instantiate \
                      TAO::Object_Arg_Traits_T< \
                          CORBA::ComponentIR::EmitsDef_ptr, \
                          CORBA::ComponentIR::EmitsDef_var, \
                          CORBA::ComponentIR::EmitsDef_out, \
                          TAO::Objref_Traits<CORBA::ComponentIR::EmitsDef> \
                        >

#endif /* end #if !defined */
                  
                  # pragma instantiate \
                      TAO::Objref_Traits< \
                          CORBA::ComponentIR::EmitsDef \
                        >
                  
                  # pragma instantiate \
                      TAO_Objref_Var_T< \
                          CORBA::ComponentIR::EmitsDef
                        >
                    
                  # pragma instantiate \
                      TAO_Objref_Out_T< \
                          CORBA::ComponentIR::EmitsDef
                        >
                  
                  # pragma instantiate \
                      TAO::Narrow_Utils< \
                          CORBA::ComponentIR::EmitsDef \
                        >
                  
                  # pragma instantiate \
                      TAO::Any_Impl_T< \
                          CORBA::ComponentIR::EmitsDef \
                        >

#if !defined (_CORBA_COMPONENTIR_PUBLISHESDEF__ARG_TRAITS_TMPLINST_CS_)
#define _CORBA_COMPONENTIR_PUBLISHESDEF__ARG_TRAITS_TMPLINST_CS_
                  
                  # pragma instantiate \
                      TAO::Arg_Traits< \
                          CORBA::ComponentIR::PublishesDef \
                        >
                  
                  # pragma instantiate \
                      TAO::Object_Arg_Traits_T< \
                          CORBA::ComponentIR::PublishesDef_ptr, \
                          CORBA::ComponentIR::PublishesDef_var, \
                          CORBA::ComponentIR::PublishesDef_out, \
                          TAO::Objref_Traits<CORBA::ComponentIR::PublishesDef> \
                        >

#endif /* end #if !defined */
                  
                  # pragma instantiate \
                      TAO::Objref_Traits< \
                          CORBA::ComponentIR::PublishesDef \
                        >
                  
                  # pragma instantiate \
                      TAO_Objref_Var_T< \
                          CORBA::ComponentIR::PublishesDef
                        >
                    
                  # pragma instantiate \
                      TAO_Objref_Out_T< \
                          CORBA::ComponentIR::PublishesDef
                        >
                  
                  # pragma instantiate \
                      TAO::Narrow_Utils< \
                          CORBA::ComponentIR::PublishesDef \
                        >
                  
                  # pragma instantiate \
                      TAO::Any_Impl_T< \
                          CORBA::ComponentIR::PublishesDef \
                        >

#if !defined (_CORBA_COMPONENTIR_CONSUMESDEF__ARG_TRAITS_TMPLINST_CS_)
#define _CORBA_COMPONENTIR_CONSUMESDEF__ARG_TRAITS_TMPLINST_CS_
                  
                  # pragma instantiate \
                      TAO::Arg_Traits< \
                          CORBA::ComponentIR::ConsumesDef \
                        >
                  
                  # pragma instantiate \
                      TAO::Object_Arg_Traits_T< \
                          CORBA::ComponentIR::ConsumesDef_ptr, \
                          CORBA::ComponentIR::ConsumesDef_var, \
                          CORBA::ComponentIR::ConsumesDef_out, \
                          TAO::Objref_Traits<CORBA::ComponentIR::ConsumesDef> \
                        >

#endif /* end #if !defined */
                  
                  # pragma instantiate \
                      TAO::Objref_Traits< \
                          CORBA::ComponentIR::ConsumesDef \
                        >
                  
                  # pragma instantiate \
                      TAO_Objref_Var_T< \
                          CORBA::ComponentIR::ConsumesDef
                        >
                    
                  # pragma instantiate \
                      TAO_Objref_Out_T< \
                          CORBA::ComponentIR::ConsumesDef
                        >
                  
                  # pragma instantiate \
                      TAO::Narrow_Utils< \
                          CORBA::ComponentIR::ConsumesDef \
                        >
                  
                  # pragma instantiate \
                      TAO::Any_Impl_T< \
                          CORBA::ComponentIR::ConsumesDef \
                        >
                  
                  # pragma instantiate \
                      TAO_VarSeq_Var_T< \
                          CORBA::ComponentIR::ProvidesDescriptionSeq, \
                          CORBA::ComponentIR::ProvidesDescription \
                        >
                  
                  # pragma instantiate \
                      TAO_Seq_Var_Base_T< \
                          CORBA::ComponentIR::ProvidesDescriptionSeq, \
                          CORBA::ComponentIR::ProvidesDescription \
                        >
                  
                  # pragma instantiate \
                      TAO_Seq_Out_T< \
                          CORBA::ComponentIR::ProvidesDescriptionSeq, \
                          CORBA::ComponentIR::ProvidesDescriptionSeq_var, \
                          CORBA::ComponentIR::ProvidesDescription \
                        >

#if !defined (_CORBA_COMPONENTIR_PROVIDESDESCRIPTION__EXPLICIT_CS_)
#define _CORBA_COMPONENTIR_PROVIDESDESCRIPTION__EXPLICIT_CS_
                  
                  # pragma instantiate \
                      TAO_Unbounded_Sequence< \
                          CORBA::ComponentIR::ProvidesDescription \
                        >

#endif /* end #if !defined */
                  
                  # pragma instantiate \
                      TAO::Any_Dual_Impl_T< \
                          CORBA::ComponentIR::ProvidesDescriptionSeq \
                        >
                  
                  # pragma instantiate \
                      TAO_VarSeq_Var_T< \
                          CORBA::ComponentIR::UsesDescriptionSeq, \
                          CORBA::ComponentIR::UsesDescription \
                        >
                  
                  # pragma instantiate \
                      TAO_Seq_Var_Base_T< \
                          CORBA::ComponentIR::UsesDescriptionSeq, \
                          CORBA::ComponentIR::UsesDescription \
                        >
                  
                  # pragma instantiate \
                      TAO_Seq_Out_T< \
                          CORBA::ComponentIR::UsesDescriptionSeq, \
                          CORBA::ComponentIR::UsesDescriptionSeq_var, \
                          CORBA::ComponentIR::UsesDescription \
                        >

#if !defined (_CORBA_COMPONENTIR_USESDESCRIPTION__EXPLICIT_CS_)
#define _CORBA_COMPONENTIR_USESDESCRIPTION__EXPLICIT_CS_
                  
                  # pragma instantiate \
                      TAO_Unbounded_Sequence< \
                          CORBA::ComponentIR::UsesDescription \
                        >

#endif /* end #if !defined */
                  
                  # pragma instantiate \
                      TAO::Any_Dual_Impl_T< \
                          CORBA::ComponentIR::UsesDescriptionSeq \
                        >
                  
                  # pragma instantiate \
                      TAO_VarSeq_Var_T< \
                          CORBA::ComponentIR::EventPortDescriptionSeq, \
                          CORBA::ComponentIR::EventPortDescription \
                        >
                  
                  # pragma instantiate \
                      TAO_Seq_Var_Base_T< \
                          CORBA::ComponentIR::EventPortDescriptionSeq, \
                          CORBA::ComponentIR::EventPortDescription \
                        >
                  
                  # pragma instantiate \
                      TAO_Seq_Out_T< \
                          CORBA::ComponentIR::EventPortDescriptionSeq, \
                          CORBA::ComponentIR::EventPortDescriptionSeq_var, \
                          CORBA::ComponentIR::EventPortDescription \
                        >

#if !defined (_CORBA_COMPONENTIR_EVENTPORTDESCRIPTION__EXPLICIT_CS_)
#define _CORBA_COMPONENTIR_EVENTPORTDESCRIPTION__EXPLICIT_CS_
                  
                  # pragma instantiate \
                      TAO_Unbounded_Sequence< \
                          CORBA::ComponentIR::EventPortDescription \
                        >

#endif /* end #if !defined */
                  
                  # pragma instantiate \
                      TAO::Any_Dual_Impl_T< \
                          CORBA::ComponentIR::EventPortDescriptionSeq \
                        >
                  
                  # pragma instantiate \
                      TAO_Var_Var_T< \
                          CORBA::ComponentIR::ComponentDescription \
                        >
                  
                  # pragma instantiate \
                      TAO_Var_Base_T< \
                          CORBA::ComponentIR::ComponentDescription \
                        >
                  
                  # pragma instantiate \
                      TAO_Out_T< \
                          CORBA::ComponentIR::ComponentDescription, \
                          CORBA::ComponentIR::ComponentDescription_var \
                        >
                  
                  # pragma instantiate \
                      TAO::Any_Dual_Impl_T< \
                          CORBA::ComponentIR::ComponentDescription \
                        >

#if !defined (_CORBA_COMPONENTIR_FACTORYDEF__ARG_TRAITS_TMPLINST_CS_)
#define _CORBA_COMPONENTIR_FACTORYDEF__ARG_TRAITS_TMPLINST_CS_
                  
                  # pragma instantiate \
                      TAO::Arg_Traits< \
                          CORBA::ComponentIR::FactoryDef \
                        >
                  
                  # pragma instantiate \
                      TAO::Object_Arg_Traits_T< \
                          CORBA::ComponentIR::FactoryDef_ptr, \
                          CORBA::ComponentIR::FactoryDef_var, \
                          CORBA::ComponentIR::FactoryDef_out, \
                          TAO::Objref_Traits<CORBA::ComponentIR::FactoryDef> \
                        >

#endif /* end #if !defined */
                  
                  # pragma instantiate \
                      TAO::Objref_Traits< \
                          CORBA::ComponentIR::FactoryDef \
                        >
                  
                  # pragma instantiate \
                      TAO_Objref_Var_T< \
                          CORBA::ComponentIR::FactoryDef
                        >
                    
                  # pragma instantiate \
                      TAO_Objref_Out_T< \
                          CORBA::ComponentIR::FactoryDef
                        >
                  
                  # pragma instantiate \
                      TAO::Narrow_Utils< \
                          CORBA::ComponentIR::FactoryDef \
                        >
                  
                  # pragma instantiate \
                      TAO::Any_Impl_T< \
                          CORBA::ComponentIR::FactoryDef \
                        >

#if !defined (_CORBA_COMPONENTIR_FINDERDEF__ARG_TRAITS_TMPLINST_CS_)
#define _CORBA_COMPONENTIR_FINDERDEF__ARG_TRAITS_TMPLINST_CS_
                  
                  # pragma instantiate \
                      TAO::Arg_Traits< \
                          CORBA::ComponentIR::FinderDef \
                        >
                  
                  # pragma instantiate \
                      TAO::Object_Arg_Traits_T< \
                          CORBA::ComponentIR::FinderDef_ptr, \
                          CORBA::ComponentIR::FinderDef_var, \
                          CORBA::ComponentIR::FinderDef_out, \
                          TAO::Objref_Traits<CORBA::ComponentIR::FinderDef> \
                        >

#endif /* end #if !defined */
                  
                  # pragma instantiate \
                      TAO::Objref_Traits< \
                          CORBA::ComponentIR::FinderDef \
                        >
                  
                  # pragma instantiate \
                      TAO_Objref_Var_T< \
                          CORBA::ComponentIR::FinderDef
                        >
                    
                  # pragma instantiate \
                      TAO_Objref_Out_T< \
                          CORBA::ComponentIR::FinderDef
                        >
                  
                  # pragma instantiate \
                      TAO::Narrow_Utils< \
                          CORBA::ComponentIR::FinderDef \
                        >
                  
                  # pragma instantiate \
                      TAO::Any_Impl_T< \
                          CORBA::ComponentIR::FinderDef \
                        >
                  
                  # pragma instantiate \
                      TAO_Var_Var_T< \
                          CORBA::ComponentIR::HomeDescription \
                        >
                  
                  # pragma instantiate \
                      TAO_Var_Base_T< \
                          CORBA::ComponentIR::HomeDescription \
                        >
                  
                  # pragma instantiate \
                      TAO_Out_T< \
                          CORBA::ComponentIR::HomeDescription, \
                          CORBA::ComponentIR::HomeDescription_var \
                        >
                  
                  # pragma instantiate \
                      TAO::Any_Dual_Impl_T< \
                          CORBA::ComponentIR::HomeDescription \
                        >

#endif /* !ACE_HAS_EXPLICIT_TEMPLATE_INSTANTIATION */ 

