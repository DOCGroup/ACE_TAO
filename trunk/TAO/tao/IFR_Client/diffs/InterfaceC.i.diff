--- orig/InterfaceC.i	Fri Mar 09 00:47:29 2001
+++ InterfaceC.i	Thu Mar 01 15:34:00 2001
@@ -1,6 +1,6 @@
 // -*- C++ -*-
 //
-// $Id$
+//$Id$
 
 // ****  Code generated by the The ACE ORB (TAO) IDL Compiler ****
 // TAO and the TAO IDL Compiler have been developed by:
@@ -19,12 +19,8 @@
 // Information about TAO is available at:
 //     http://www.cs.wustl.edu/~schmidt/TAO.html
 
-
-#if !defined (_CORBA_IROBJECT___CI_)
-#define _CORBA_IROBJECT___CI_
-
 ACE_INLINE
-CORBA::IRObject::IRObject (
+CORBA_IRObject::CORBA_IRObject (
     TAO_Stub *objref,
     CORBA::Boolean _tao_collocated,
     TAO_Abstract_ServantBase *servant
@@ -34,184 +30,164 @@
   this->CORBA_IRObject_setup_collocation (_tao_collocated);
 }
 
-#endif /* end #if !defined */
-
-
-#if !defined (_CORBA_IROBJECT___VAR_CI_)
-#define _CORBA_IROBJECT___VAR_CI_
-
 // *************************************************************
-// Inline operations for class CORBA::IRObject_var
+// Inline operations for class CORBA_IRObject_var
 // *************************************************************
 
 ACE_INLINE
-CORBA::IRObject_var::IRObject_var (void) // default constructor
-  : ptr_ (IRObject::_nil ())
+CORBA_IRObject_var::CORBA_IRObject_var (void) // default constructor
+  : ptr_ (CORBA_IRObject::_nil ())
 {}
 
-ACE_INLINE ::CORBA::IRObject_ptr
-CORBA::IRObject_var::ptr (void) const
+ACE_INLINE ::CORBA_IRObject_ptr
+CORBA_IRObject_var::ptr (void) const
 {
   return this->ptr_;
 }
 
 ACE_INLINE
-CORBA::IRObject_var::IRObject_var (const ::CORBA::IRObject_var &p) // copy constructor
+CORBA_IRObject_var::CORBA_IRObject_var (const ::CORBA_IRObject_var &p) // copy constructor
   : TAO_Base_var (),
-    ptr_ (IRObject::_duplicate (p.ptr ()))
+    ptr_ (CORBA_IRObject::_duplicate (p.ptr ()))
 {}
 
 ACE_INLINE
-CORBA::IRObject_var::~IRObject_var (void) // destructor
+CORBA_IRObject_var::~CORBA_IRObject_var (void) // destructor
 {
   CORBA::release (this->ptr_);
 }
 
-ACE_INLINE CORBA::IRObject_var &
-CORBA::IRObject_var::operator= (IRObject_ptr p)
+ACE_INLINE CORBA_IRObject_var &
+CORBA_IRObject_var::operator= (CORBA_IRObject_ptr p)
 {
   CORBA::release (this->ptr_);
   this->ptr_ = p;
   return *this;
 }
 
-ACE_INLINE CORBA::IRObject_var &
-CORBA::IRObject_var::operator= (const ::CORBA::IRObject_var &p)
+ACE_INLINE CORBA_IRObject_var &
+CORBA_IRObject_var::operator= (const CORBA_IRObject_var &p)
 {
   if (this != &p)
   {
     CORBA::release (this->ptr_);
-    this->ptr_ = ::CORBA::IRObject::_duplicate (p.ptr ());
+    this->ptr_ = ::CORBA_IRObject::_duplicate (p.ptr ());
   }
   return *this;
 }
 
 ACE_INLINE 
-CORBA::IRObject_var::operator const ::CORBA::IRObject_ptr &() const // cast
+CORBA_IRObject_var::operator const ::CORBA_IRObject_ptr &() const // cast
 {
   return this->ptr_;
 }
 
 ACE_INLINE 
-CORBA::IRObject_var::operator ::CORBA::IRObject_ptr &() // cast 
+CORBA_IRObject_var::operator ::CORBA_IRObject_ptr &() // cast 
 {
   return this->ptr_;
 }
 
-ACE_INLINE ::CORBA::IRObject_ptr
-CORBA::IRObject_var::operator-> (void) const
+ACE_INLINE ::CORBA_IRObject_ptr
+CORBA_IRObject_var::operator-> (void) const
 {
   return this->ptr_;
 }
 
-ACE_INLINE ::CORBA::IRObject_ptr
-CORBA::IRObject_var::in (void) const
+ACE_INLINE ::CORBA_IRObject_ptr
+CORBA_IRObject_var::in (void) const
 {
   return this->ptr_;
 }
 
-ACE_INLINE ::CORBA::IRObject_ptr &
-CORBA::IRObject_var::inout (void)
+ACE_INLINE ::CORBA_IRObject_ptr &
+CORBA_IRObject_var::inout (void)
 {
   return this->ptr_;
 }
 
-ACE_INLINE ::CORBA::IRObject_ptr &
-CORBA::IRObject_var::out (void)
+ACE_INLINE ::CORBA_IRObject_ptr &
+CORBA_IRObject_var::out (void)
 {
   CORBA::release (this->ptr_);
-  this->ptr_ = ::CORBA::IRObject::_nil ();
+  this->ptr_ = ::CORBA_IRObject::_nil ();
   return this->ptr_;
 }
 
-ACE_INLINE ::CORBA::IRObject_ptr
-CORBA::IRObject_var::_retn (void)
+ACE_INLINE ::CORBA_IRObject_ptr
+CORBA_IRObject_var::_retn (void)
 {
   // yield ownership of managed obj reference
-  ::CORBA::IRObject_ptr val = this->ptr_;
-  this->ptr_ = ::CORBA::IRObject::_nil ();
+  ::CORBA_IRObject_ptr val = this->ptr_;
+  this->ptr_ = ::CORBA_IRObject::_nil ();
   return val;
 }
 
-
-#endif /* end #if !defined */
-
-
-#if !defined (_CORBA_IROBJECT___OUT_CI_)
-#define _CORBA_IROBJECT___OUT_CI_
-
 // *************************************************************
-// Inline operations for class CORBA::IRObject_out
+// Inline operations for class CORBA_IRObject_out
 // *************************************************************
 
 ACE_INLINE
-CORBA::IRObject_out::IRObject_out (IRObject_ptr &p)
+CORBA_IRObject_out::CORBA_IRObject_out (CORBA_IRObject_ptr &p)
   : ptr_ (p)
 {
-  this->ptr_ = ::CORBA::IRObject::_nil ();
+  this->ptr_ = ::CORBA_IRObject::_nil ();
 }
 
 ACE_INLINE
-CORBA::IRObject_out::IRObject_out (IRObject_var &p) // constructor from _var
+CORBA_IRObject_out::CORBA_IRObject_out (CORBA_IRObject_var &p) // constructor from _var
   : ptr_ (p.out ())
 {
   CORBA::release (this->ptr_);
-  this->ptr_ = ::CORBA::IRObject::_nil ();
+  this->ptr_ = ::CORBA_IRObject::_nil ();
 }
 
 ACE_INLINE
-CORBA::IRObject_out::IRObject_out (const ::CORBA::IRObject_out &p) // copy constructor
-  : ptr_ (ACE_const_cast (IRObject_out &, p).ptr_)
+CORBA_IRObject_out::CORBA_IRObject_out (const ::CORBA_IRObject_out &p) // copy constructor
+  : ptr_ (ACE_const_cast (CORBA_IRObject_out &, p).ptr_)
 {}
 
-ACE_INLINE ::CORBA::IRObject_out &
-CORBA::IRObject_out::operator= (const ::CORBA::IRObject_out &p)
+ACE_INLINE ::CORBA_IRObject_out &
+CORBA_IRObject_out::operator= (const CORBA_IRObject_out &p)
 {
-  this->ptr_ = ACE_const_cast (IRObject_out&, p).ptr_;
+  this->ptr_ = ACE_const_cast (CORBA_IRObject_out&, p).ptr_;
   return *this;
 }
 
-ACE_INLINE CORBA::IRObject_out &
-CORBA::IRObject_out::operator= (const ::CORBA::IRObject_var &p)
+ACE_INLINE CORBA_IRObject_out &
+CORBA_IRObject_out::operator= (const CORBA_IRObject_var &p)
 {
-  this->ptr_ = ::CORBA::IRObject::_duplicate (p.ptr ());
+  this->ptr_ = ::CORBA_IRObject::_duplicate (p.ptr ());
   return *this;
 }
 
-ACE_INLINE CORBA::IRObject_out &
-CORBA::IRObject_out::operator= (IRObject_ptr p)
+ACE_INLINE CORBA_IRObject_out &
+CORBA_IRObject_out::operator= (CORBA_IRObject_ptr p)
 {
   this->ptr_ = p;
   return *this;
 }
 
 ACE_INLINE 
-CORBA::IRObject_out::operator ::CORBA::IRObject_ptr &() // cast
+CORBA_IRObject_out::operator ::CORBA_IRObject_ptr &() // cast
 {
   return this->ptr_;
 }
 
-ACE_INLINE ::CORBA::IRObject_ptr &
-CORBA::IRObject_out::ptr (void) // ptr
+ACE_INLINE ::CORBA_IRObject_ptr &
+CORBA_IRObject_out::ptr (void) // ptr
 {
   return this->ptr_;
 }
 
-ACE_INLINE ::CORBA::IRObject_ptr
-CORBA::IRObject_out::operator-> (void)
+ACE_INLINE ::CORBA_IRObject_ptr
+CORBA_IRObject_out::operator-> (void)
 {
   return this->ptr_;
 }
 
-
-#endif /* end #if !defined */
-
-
-#if !defined (_IR_CONTAINED___CI_)
-#define _IR_CONTAINED___CI_
-
 ACE_INLINE
-IR::Contained::Contained (
+IR_Contained::IR_Contained (
     TAO_Stub *objref,
     CORBA::Boolean _tao_collocated,
     TAO_Abstract_ServantBase *servant
@@ -221,185 +197,164 @@
   this->IR_Contained_setup_collocation (_tao_collocated);
 }
 
-
-#endif /* end #if !defined */
-
-
-#if !defined (_IR_CONTAINED___VAR_CI_)
-#define _IR_CONTAINED___VAR_CI_
-
 // *************************************************************
-// Inline operations for class IR::Contained_var
+// Inline operations for class IR_Contained_var
 // *************************************************************
 
 ACE_INLINE
-IR::Contained_var::Contained_var (void) // default constructor
-  : ptr_ (IR::Contained::_nil ())
+IR_Contained_var::IR_Contained_var (void) // default constructor
+  : ptr_ (IR_Contained::_nil ())
 {}
 
-ACE_INLINE IR::Contained_ptr 
-IR::Contained_var::ptr (void) const
+ACE_INLINE IR_Contained_ptr 
+IR_Contained_var::ptr (void) const
 {
   return this->ptr_;
 }
 
 ACE_INLINE
-IR::Contained_var::Contained_var (const IR::Contained_var &p) // copy constructor
+IR_Contained_var::IR_Contained_var (const IR_Contained_var &p) // copy constructor
   : TAO_Base_var (),
-    ptr_ (Contained::_duplicate (p.ptr ()))
+    ptr_ (IR_Contained::_duplicate (p.ptr ()))
 {}
 
 ACE_INLINE
-IR::Contained_var::~Contained_var (void) // destructor
+IR_Contained_var::~IR_Contained_var (void) // destructor
 {
   CORBA::release (this->ptr_);
 }
 
-ACE_INLINE IR::Contained_var &
-IR::Contained_var::operator= (IR::Contained_ptr p)
+ACE_INLINE IR_Contained_var &
+IR_Contained_var::operator= (IR_Contained_ptr p)
 {
   CORBA::release (this->ptr_);
   this->ptr_ = p;
   return *this;
 }
 
-ACE_INLINE IR::Contained_var &
-IR::Contained_var::operator= (const IR::Contained_var &p)
+ACE_INLINE IR_Contained_var &
+IR_Contained_var::operator= (const IR_Contained_var &p)
 {
   if (this != &p)
   {
     CORBA::release (this->ptr_);
-    this->ptr_ = IR::Contained::_duplicate (p.ptr ());
+    this->ptr_ = IR_Contained::_duplicate (p.ptr ());
   }
   return *this;
 }
 
 ACE_INLINE 
-IR::Contained_var::operator const IR::Contained_ptr &() const // cast
+IR_Contained_var::operator const IR_Contained_ptr &() const // cast
 {
   return this->ptr_;
 }
 
 ACE_INLINE 
-IR::Contained_var::operator IR::Contained_ptr &() // cast 
+IR_Contained_var::operator IR_Contained_ptr &() // cast 
 {
   return this->ptr_;
 }
 
-ACE_INLINE IR::Contained_ptr 
-IR::Contained_var::operator-> (void) const
+ACE_INLINE IR_Contained_ptr 
+IR_Contained_var::operator-> (void) const
 {
   return this->ptr_;
 }
 
-ACE_INLINE IR::Contained_ptr
-IR::Contained_var::in (void) const
+ACE_INLINE IR_Contained_ptr
+IR_Contained_var::in (void) const
 {
   return this->ptr_;
 }
 
-ACE_INLINE IR::Contained_ptr &
-IR::Contained_var::inout (void)
+ACE_INLINE IR_Contained_ptr &
+IR_Contained_var::inout (void)
 {
   return this->ptr_;
 }
 
-ACE_INLINE IR::Contained_ptr &
-IR::Contained_var::out (void)
+ACE_INLINE IR_Contained_ptr &
+IR_Contained_var::out (void)
 {
   CORBA::release (this->ptr_);
-  this->ptr_ = IR::Contained::_nil ();
+  this->ptr_ = IR_Contained::_nil ();
   return this->ptr_;
 }
 
-ACE_INLINE IR::Contained_ptr 
-IR::Contained_var::_retn (void)
+ACE_INLINE IR_Contained_ptr 
+IR_Contained_var::_retn (void)
 {
   // yield ownership of managed obj reference
-  IR::Contained_ptr val = this->ptr_;
-  this->ptr_ = IR::Contained::_nil ();
+  IR_Contained_ptr val = this->ptr_;
+  this->ptr_ = IR_Contained::_nil ();
   return val;
 }
 
-
-#endif /* end #if !defined */
-
-
-#if !defined (_IR_CONTAINED___OUT_CI_)
-#define _IR_CONTAINED___OUT_CI_
-
 // *************************************************************
-// Inline operations for class IR::Contained_out
+// Inline operations for class IR_Contained_out
 // *************************************************************
 
 ACE_INLINE
-IR::Contained_out::Contained_out (IR::Contained_ptr &p)
+IR_Contained_out::IR_Contained_out (IR_Contained_ptr &p)
   : ptr_ (p)
 {
-  this->ptr_ = IR::Contained::_nil ();
+  this->ptr_ = IR_Contained::_nil ();
 }
 
 ACE_INLINE
-IR::Contained_out::Contained_out (IR::Contained_var &p) // constructor from _var
+IR_Contained_out::IR_Contained_out (IR_Contained_var &p) // constructor from _var
   : ptr_ (p.out ())
 {
   CORBA::release (this->ptr_);
-  this->ptr_ = IR::Contained::_nil ();
+  this->ptr_ = IR_Contained::_nil ();
 }
 
 ACE_INLINE
-IR::Contained_out::Contained_out (const IR::Contained_out &p) // copy constructor
-  : ptr_ (ACE_const_cast (IR::Contained_out&,p).ptr_)
+IR_Contained_out::IR_Contained_out (const IR_Contained_out &p) // copy constructor
+  : ptr_ (ACE_const_cast (IR_Contained_out&,p).ptr_)
 {}
 
-ACE_INLINE IR::Contained_out &
-IR::Contained_out::operator= (const IR::Contained_out &p)
+ACE_INLINE IR_Contained_out &
+IR_Contained_out::operator= (const IR_Contained_out &p)
 {
-  this->ptr_ = ACE_const_cast (IR::Contained_out&,p).ptr_;
+  this->ptr_ = ACE_const_cast (IR_Contained_out&,p).ptr_;
   return *this;
 }
 
-ACE_INLINE IR::Contained_out &
-IR::Contained_out::operator= (const IR::Contained_var &p)
+ACE_INLINE IR_Contained_out &
+IR_Contained_out::operator= (const IR_Contained_var &p)
 {
-  this->ptr_ = IR::Contained::_duplicate (p.ptr ());
+  this->ptr_ = IR_Contained::_duplicate (p.ptr ());
   return *this;
 }
 
-ACE_INLINE IR::Contained_out &
-IR::Contained_out::operator= (IR::Contained_ptr p)
+ACE_INLINE IR_Contained_out &
+IR_Contained_out::operator= (IR_Contained_ptr p)
 {
   this->ptr_ = p;
   return *this;
 }
 
 ACE_INLINE 
-IR::Contained_out::operator IR::Contained_ptr &() // cast
+IR_Contained_out::operator IR_Contained_ptr &() // cast
 {
   return this->ptr_;
 }
 
-ACE_INLINE IR::Contained_ptr &
-IR::Contained_out::ptr (void) // ptr
+ACE_INLINE IR_Contained_ptr &
+IR_Contained_out::ptr (void) // ptr
 {
   return this->ptr_;
 }
 
-ACE_INLINE IR::Contained_ptr 
-IR::Contained_out::operator-> (void)
+ACE_INLINE IR_Contained_ptr 
+IR_Contained_out::operator-> (void)
 {
   return this->ptr_;
 }
 
-
-#endif /* end #if !defined */
-
-
-#if !defined (_IR_REPOSITORY___CI_)
-#define _IR_REPOSITORY___CI_
-
 ACE_INLINE
-IR::Repository::Repository (
+IR_Repository::IR_Repository (
     TAO_Stub *objref,
     CORBA::Boolean _tao_collocated,
     TAO_Abstract_ServantBase *servant
@@ -409,185 +364,164 @@
   this->IR_Repository_setup_collocation (_tao_collocated);
 }
 
-
-#endif /* end #if !defined */
-
-
-#if !defined (_IR_REPOSITORY___VAR_CI_)
-#define _IR_REPOSITORY___VAR_CI_
-
 // *************************************************************
-// Inline operations for class IR::Repository_var
+// Inline operations for class IR_Repository_var
 // *************************************************************
 
 ACE_INLINE
-IR::Repository_var::Repository_var (void) // default constructor
-  : ptr_ (IR::Repository::_nil ())
+IR_Repository_var::IR_Repository_var (void) // default constructor
+  : ptr_ (IR_Repository::_nil ())
 {}
 
-ACE_INLINE IR::Repository_ptr 
-IR::Repository_var::ptr (void) const
+ACE_INLINE IR_Repository_ptr 
+IR_Repository_var::ptr (void) const
 {
   return this->ptr_;
 }
 
 ACE_INLINE
-IR::Repository_var::Repository_var (const IR::Repository_var &p) // copy constructor
+IR_Repository_var::IR_Repository_var (const IR_Repository_var &p) // copy constructor
   : TAO_Base_var (),
-    ptr_ (Repository::_duplicate (p.ptr ()))
+    ptr_ (IR_Repository::_duplicate (p.ptr ()))
 {}
 
 ACE_INLINE
-IR::Repository_var::~Repository_var (void) // destructor
+IR_Repository_var::~IR_Repository_var (void) // destructor
 {
   CORBA::release (this->ptr_);
 }
 
-ACE_INLINE IR::Repository_var &
-IR::Repository_var::operator= (IR::Repository_ptr p)
+ACE_INLINE IR_Repository_var &
+IR_Repository_var::operator= (IR_Repository_ptr p)
 {
   CORBA::release (this->ptr_);
   this->ptr_ = p;
   return *this;
 }
 
-ACE_INLINE IR::Repository_var &
-IR::Repository_var::operator= (const IR::Repository_var &p)
+ACE_INLINE IR_Repository_var &
+IR_Repository_var::operator= (const IR_Repository_var &p)
 {
   if (this != &p)
   {
     CORBA::release (this->ptr_);
-    this->ptr_ = IR::Repository::_duplicate (p.ptr ());
+    this->ptr_ = IR_Repository::_duplicate (p.ptr ());
   }
   return *this;
 }
 
 ACE_INLINE 
-IR::Repository_var::operator const IR::Repository_ptr &() const // cast
+IR_Repository_var::operator const IR_Repository_ptr &() const // cast
 {
   return this->ptr_;
 }
 
 ACE_INLINE 
-IR::Repository_var::operator IR::Repository_ptr &() // cast 
+IR_Repository_var::operator IR_Repository_ptr &() // cast 
 {
   return this->ptr_;
 }
 
-ACE_INLINE IR::Repository_ptr 
-IR::Repository_var::operator-> (void) const
+ACE_INLINE IR_Repository_ptr 
+IR_Repository_var::operator-> (void) const
 {
   return this->ptr_;
 }
 
-ACE_INLINE IR::Repository_ptr
-IR::Repository_var::in (void) const
+ACE_INLINE IR_Repository_ptr
+IR_Repository_var::in (void) const
 {
   return this->ptr_;
 }
 
-ACE_INLINE IR::Repository_ptr &
-IR::Repository_var::inout (void)
+ACE_INLINE IR_Repository_ptr &
+IR_Repository_var::inout (void)
 {
   return this->ptr_;
 }
 
-ACE_INLINE IR::Repository_ptr &
-IR::Repository_var::out (void)
+ACE_INLINE IR_Repository_ptr &
+IR_Repository_var::out (void)
 {
   CORBA::release (this->ptr_);
-  this->ptr_ = IR::Repository::_nil ();
+  this->ptr_ = IR_Repository::_nil ();
   return this->ptr_;
 }
 
-ACE_INLINE IR::Repository_ptr 
-IR::Repository_var::_retn (void)
+ACE_INLINE IR_Repository_ptr 
+IR_Repository_var::_retn (void)
 {
   // yield ownership of managed obj reference
-  IR::Repository_ptr val = this->ptr_;
-  this->ptr_ = IR::Repository::_nil ();
+  IR_Repository_ptr val = this->ptr_;
+  this->ptr_ = IR_Repository::_nil ();
   return val;
 }
 
-
-#endif /* end #if !defined */
-
-
-#if !defined (_IR_REPOSITORY___OUT_CI_)
-#define _IR_REPOSITORY___OUT_CI_
-
 // *************************************************************
-// Inline operations for class IR::Repository_out
+// Inline operations for class IR_Repository_out
 // *************************************************************
 
 ACE_INLINE
-IR::Repository_out::Repository_out (IR::Repository_ptr &p)
+IR_Repository_out::IR_Repository_out (IR_Repository_ptr &p)
   : ptr_ (p)
 {
-  this->ptr_ = IR::Repository::_nil ();
+  this->ptr_ = IR_Repository::_nil ();
 }
 
 ACE_INLINE
-IR::Repository_out::Repository_out (IR::Repository_var &p) // constructor from _var
+IR_Repository_out::IR_Repository_out (IR_Repository_var &p) // constructor from _var
   : ptr_ (p.out ())
 {
   CORBA::release (this->ptr_);
-  this->ptr_ = IR::Repository::_nil ();
+  this->ptr_ = IR_Repository::_nil ();
 }
 
 ACE_INLINE
-IR::Repository_out::Repository_out (const IR::Repository_out &p) // copy constructor
-  : ptr_ (ACE_const_cast (IR::Repository_out&,p).ptr_)
+IR_Repository_out::IR_Repository_out (const IR_Repository_out &p) // copy constructor
+  : ptr_ (ACE_const_cast (IR_Repository_out&,p).ptr_)
 {}
 
-ACE_INLINE IR::Repository_out &
-IR::Repository_out::operator= (const IR::Repository_out &p)
+ACE_INLINE IR_Repository_out &
+IR_Repository_out::operator= (const IR_Repository_out &p)
 {
-  this->ptr_ = ACE_const_cast (IR::Repository_out&,p).ptr_;
+  this->ptr_ = ACE_const_cast (IR_Repository_out&,p).ptr_;
   return *this;
 }
 
-ACE_INLINE IR::Repository_out &
-IR::Repository_out::operator= (const IR::Repository_var &p)
+ACE_INLINE IR_Repository_out &
+IR_Repository_out::operator= (const IR_Repository_var &p)
 {
-  this->ptr_ = IR::Repository::_duplicate (p.ptr ());
+  this->ptr_ = IR_Repository::_duplicate (p.ptr ());
   return *this;
 }
 
-ACE_INLINE IR::Repository_out &
-IR::Repository_out::operator= (IR::Repository_ptr p)
+ACE_INLINE IR_Repository_out &
+IR_Repository_out::operator= (IR_Repository_ptr p)
 {
   this->ptr_ = p;
   return *this;
 }
 
 ACE_INLINE 
-IR::Repository_out::operator IR::Repository_ptr &() // cast
+IR_Repository_out::operator IR_Repository_ptr &() // cast
 {
   return this->ptr_;
 }
 
-ACE_INLINE IR::Repository_ptr &
-IR::Repository_out::ptr (void) // ptr
+ACE_INLINE IR_Repository_ptr &
+IR_Repository_out::ptr (void) // ptr
 {
   return this->ptr_;
 }
 
-ACE_INLINE IR::Repository_ptr 
-IR::Repository_out::operator-> (void)
+ACE_INLINE IR_Repository_ptr 
+IR_Repository_out::operator-> (void)
 {
   return this->ptr_;
 }
 
-
-#endif /* end #if !defined */
-
-
-#if !defined (_IR_CONTAINER___CI_)
-#define _IR_CONTAINER___CI_
-
 ACE_INLINE
-IR::Container::Container (
+IR_Container::IR_Container (
     TAO_Stub *objref,
     CORBA::Boolean _tao_collocated,
     TAO_Abstract_ServantBase *servant
@@ -597,218 +531,201 @@
   this->IR_Container_setup_collocation (_tao_collocated);
 }
 
-
-#endif /* end #if !defined */
-
-
-#if !defined (_IR_CONTAINER___VAR_CI_)
-#define _IR_CONTAINER___VAR_CI_
-
 // *************************************************************
-// Inline operations for class IR::Container_var
+// Inline operations for class IR_Container_var
 // *************************************************************
 
 ACE_INLINE
-IR::Container_var::Container_var (void) // default constructor
-  : ptr_ (IR::Container::_nil ())
+IR_Container_var::IR_Container_var (void) // default constructor
+  : ptr_ (IR_Container::_nil ())
 {}
 
-ACE_INLINE IR::Container_ptr 
-IR::Container_var::ptr (void) const
+ACE_INLINE IR_Container_ptr 
+IR_Container_var::ptr (void) const
 {
   return this->ptr_;
 }
 
 ACE_INLINE
-IR::Container_var::Container_var (const IR::Container_var &p) // copy constructor
+IR_Container_var::IR_Container_var (const IR_Container_var &p) // copy constructor
   : TAO_Base_var (),
-    ptr_ (Container::_duplicate (p.ptr ()))
+    ptr_ (IR_Container::_duplicate (p.ptr ()))
 {}
 
 ACE_INLINE
-IR::Container_var::~Container_var (void) // destructor
+IR_Container_var::~IR_Container_var (void) // destructor
 {
   CORBA::release (this->ptr_);
 }
 
-ACE_INLINE IR::Container_var &
-IR::Container_var::operator= (IR::Container_ptr p)
+ACE_INLINE IR_Container_var &
+IR_Container_var::operator= (IR_Container_ptr p)
 {
   CORBA::release (this->ptr_);
   this->ptr_ = p;
   return *this;
 }
 
-ACE_INLINE IR::Container_var &
-IR::Container_var::operator= (const IR::Container_var &p)
+ACE_INLINE IR_Container_var &
+IR_Container_var::operator= (const IR_Container_var &p)
 {
   if (this != &p)
   {
     CORBA::release (this->ptr_);
-    this->ptr_ = IR::Container::_duplicate (p.ptr ());
+    this->ptr_ = IR_Container::_duplicate (p.ptr ());
   }
   return *this;
 }
 
 ACE_INLINE 
-IR::Container_var::operator const IR::Container_ptr &() const // cast
+IR_Container_var::operator const IR_Container_ptr &() const // cast
 {
   return this->ptr_;
 }
 
 ACE_INLINE 
-IR::Container_var::operator IR::Container_ptr &() // cast 
+IR_Container_var::operator IR_Container_ptr &() // cast 
 {
   return this->ptr_;
 }
 
-ACE_INLINE IR::Container_ptr 
-IR::Container_var::operator-> (void) const
+ACE_INLINE IR_Container_ptr 
+IR_Container_var::operator-> (void) const
 {
   return this->ptr_;
 }
 
-ACE_INLINE IR::Container_ptr
-IR::Container_var::in (void) const
+ACE_INLINE IR_Container_ptr
+IR_Container_var::in (void) const
 {
   return this->ptr_;
 }
 
-ACE_INLINE IR::Container_ptr &
-IR::Container_var::inout (void)
+ACE_INLINE IR_Container_ptr &
+IR_Container_var::inout (void)
 {
   return this->ptr_;
 }
 
-ACE_INLINE IR::Container_ptr &
-IR::Container_var::out (void)
+ACE_INLINE IR_Container_ptr &
+IR_Container_var::out (void)
 {
   CORBA::release (this->ptr_);
-  this->ptr_ = IR::Container::_nil ();
+  this->ptr_ = IR_Container::_nil ();
   return this->ptr_;
 }
 
-ACE_INLINE IR::Container_ptr 
-IR::Container_var::_retn (void)
+ACE_INLINE IR_Container_ptr 
+IR_Container_var::_retn (void)
 {
   // yield ownership of managed obj reference
-  IR::Container_ptr val = this->ptr_;
-  this->ptr_ = IR::Container::_nil ();
+  IR_Container_ptr val = this->ptr_;
+  this->ptr_ = IR_Container::_nil ();
   return val;
 }
 
-
-#endif /* end #if !defined */
-
-
-#if !defined (_IR_CONTAINER___OUT_CI_)
-#define _IR_CONTAINER___OUT_CI_
-
 // *************************************************************
-// Inline operations for class IR::Container_out
+// Inline operations for class IR_Container_out
 // *************************************************************
 
 ACE_INLINE
-IR::Container_out::Container_out (IR::Container_ptr &p)
+IR_Container_out::IR_Container_out (IR_Container_ptr &p)
   : ptr_ (p)
 {
-  this->ptr_ = IR::Container::_nil ();
+  this->ptr_ = IR_Container::_nil ();
 }
 
 ACE_INLINE
-IR::Container_out::Container_out (IR::Container_var &p) // constructor from _var
+IR_Container_out::IR_Container_out (IR_Container_var &p) // constructor from _var
   : ptr_ (p.out ())
 {
   CORBA::release (this->ptr_);
-  this->ptr_ = IR::Container::_nil ();
+  this->ptr_ = IR_Container::_nil ();
 }
 
 ACE_INLINE
-IR::Container_out::Container_out (const IR::Container_out &p) // copy constructor
-  : ptr_ (ACE_const_cast (IR::Container_out&,p).ptr_)
+IR_Container_out::IR_Container_out (const IR_Container_out &p) // copy constructor
+  : ptr_ (ACE_const_cast (IR_Container_out&,p).ptr_)
 {}
 
-ACE_INLINE IR::Container_out &
-IR::Container_out::operator= (const IR::Container_out &p)
+ACE_INLINE IR_Container_out &
+IR_Container_out::operator= (const IR_Container_out &p)
 {
-  this->ptr_ = ACE_const_cast (IR::Container_out&,p).ptr_;
+  this->ptr_ = ACE_const_cast (IR_Container_out&,p).ptr_;
   return *this;
 }
 
-ACE_INLINE IR::Container_out &
-IR::Container_out::operator= (const IR::Container_var &p)
+ACE_INLINE IR_Container_out &
+IR_Container_out::operator= (const IR_Container_var &p)
 {
-  this->ptr_ = IR::Container::_duplicate (p.ptr ());
+  this->ptr_ = IR_Container::_duplicate (p.ptr ());
   return *this;
 }
 
-ACE_INLINE IR::Container_out &
-IR::Container_out::operator= (IR::Container_ptr p)
+ACE_INLINE IR_Container_out &
+IR_Container_out::operator= (IR_Container_ptr p)
 {
   this->ptr_ = p;
   return *this;
 }
 
 ACE_INLINE 
-IR::Container_out::operator IR::Container_ptr &() // cast
+IR_Container_out::operator IR_Container_ptr &() // cast
 {
   return this->ptr_;
 }
 
-ACE_INLINE IR::Container_ptr &
-IR::Container_out::ptr (void) // ptr
+ACE_INLINE IR_Container_ptr &
+IR_Container_out::ptr (void) // ptr
 {
   return this->ptr_;
 }
 
-ACE_INLINE IR::Container_ptr 
-IR::Container_out::operator-> (void)
+ACE_INLINE IR_Container_ptr 
+IR_Container_out::operator-> (void)
 {
   return this->ptr_;
 }
 
-
-#endif /* end #if !defined */
-
 // *************************************************************
-// Inline operations for class IR::Contained::Description_var
+// Inline operations for class IR_Contained::Description_var
 // *************************************************************
 
 ACE_INLINE
-IR::Contained::Description_var::Description_var (void) // default constructor
+IR_Contained::Description_var::Description_var (void) // default constructor
   : ptr_ (0)
 {}
 
 ACE_INLINE
-IR::Contained::Description_var::Description_var (Description *p)
+IR_Contained::Description_var::Description_var (Description *p)
   : ptr_ (p)
 {}
 
 ACE_INLINE
-IR::Contained::Description_var::Description_var (const ::IR::Contained::Description_var &p) // copy constructor
+IR_Contained::Description_var::Description_var (const ::IR_Contained::Description_var &p) // copy constructor
 {
   if (p.ptr_)
-    ACE_NEW (this->ptr_, ::IR::Contained::Description (*p.ptr_));
+    ACE_NEW (this->ptr_, ::IR_Contained::Description (*p.ptr_));
   else
     this->ptr_ = 0;
 }
 
 ACE_INLINE
-IR::Contained::Description_var::~Description_var (void) // destructor
+IR_Contained::Description_var::~Description_var (void) // destructor
 {
   delete this->ptr_;
 }
 
-ACE_INLINE IR::Contained::Description_var &
-IR::Contained::Description_var::operator= (Description *p)
+ACE_INLINE IR_Contained::Description_var &
+IR_Contained::Description_var::operator= (Description *p)
 {
   delete this->ptr_;
   this->ptr_ = p;
   return *this;
 }
 
-ACE_INLINE ::IR::Contained::Description_var &
-IR::Contained::Description_var::operator= (const ::IR::Contained::Description_var &p)
+ACE_INLINE ::IR_Contained::Description_var &
+IR_Contained::Description_var::operator= (const ::IR_Contained::Description_var &p)
 {
   if (this != &p)
     {
@@ -819,12 +736,12 @@
         }
       else
         {
-          Description *deep_copy =
-            new Description (*p.ptr_);
+          IR_Contained::Description *deep_copy = 
+            new IR_Contained::Description (*p.ptr_);
           
           if (deep_copy != 0)
             {
-              Description *tmp = deep_copy;
+              IR_Contained::Description *tmp = deep_copy;
               deep_copy = this->ptr_;
               this->ptr_ = tmp;
               delete deep_copy;
@@ -835,91 +752,91 @@
   return *this;
 }
 
-ACE_INLINE const ::IR::Contained::Description *
-IR::Contained::Description_var::operator-> (void) const
+ACE_INLINE const ::IR_Contained::Description *
+IR_Contained::Description_var::operator-> (void) const
 {
   return this->ptr_;
 }
 
-ACE_INLINE ::IR::Contained::Description *
-IR::Contained::Description_var::operator-> (void)
+ACE_INLINE ::IR_Contained::Description *
+IR_Contained::Description_var::operator-> (void)
 {
   return this->ptr_;
 }
 
 ACE_INLINE
-IR::Contained::Description_var::operator const ::IR::Contained::Description &() const // cast
+IR_Contained::Description_var::operator const ::IR_Contained::Description &() const // cast
 {
   return *this->ptr_;
 }
 
 ACE_INLINE
-IR::Contained::Description_var::operator ::IR::Contained::Description &() // cast 
+IR_Contained::Description_var::operator ::IR_Contained::Description &() // cast 
 {
   return *this->ptr_;
 }
 
 ACE_INLINE
-IR::Contained::Description_var::operator ::IR::Contained::Description &() const // cast 
+IR_Contained::Description_var::operator ::IR_Contained::Description &() const // cast 
 {
   return *this->ptr_;
 }
 
 // variable-size types only
 ACE_INLINE
-IR::Contained::Description_var::operator ::IR::Contained::Description *&() // cast 
+IR_Contained::Description_var::operator ::IR_Contained::Description *&() // cast 
 {
   return this->ptr_;
 }
 
-ACE_INLINE const ::IR::Contained::Description &
-IR::Contained::Description_var::in (void) const
+ACE_INLINE const ::IR_Contained::Description &
+IR_Contained::Description_var::in (void) const
 {
   return *this->ptr_;
 }
 
-ACE_INLINE ::IR::Contained::Description &
-IR::Contained::Description_var::inout (void)
+ACE_INLINE ::IR_Contained::Description &
+IR_Contained::Description_var::inout (void)
 {
   return *this->ptr_;
 }
 
 // mapping for variable size 
-ACE_INLINE ::IR::Contained::Description *&
-IR::Contained::Description_var::out (void)
+ACE_INLINE ::IR_Contained::Description *&
+IR_Contained::Description_var::out (void)
 {
   delete this->ptr_;
   this->ptr_ = 0;
   return this->ptr_;
 }
 
-ACE_INLINE ::IR::Contained::Description *
-IR::Contained::Description_var::_retn (void)
+ACE_INLINE ::IR_Contained::Description *
+IR_Contained::Description_var::_retn (void)
 {
-  ::IR::Contained::Description *tmp = this->ptr_;
+  ::IR_Contained::Description *tmp = this->ptr_;
   this->ptr_ = 0;
   return tmp;
 }
 
-ACE_INLINE ::IR::Contained::Description *
-IR::Contained::Description_var::ptr (void) const
+ACE_INLINE ::IR_Contained::Description *
+IR_Contained::Description_var::ptr (void) const
 {
   return this->ptr_;
 }
 
 // *************************************************************
-// Inline operations for class IR::Contained::Description_out
+// Inline operations for class IR_Contained::Description_out
 // *************************************************************
 
 ACE_INLINE
-IR::Contained::Description_out::Description_out (::IR::Contained::Description *&p)
+IR_Contained::Description_out::Description_out (::IR_Contained::Description *&p)
   : ptr_ (p)
 {
   this->ptr_ = 0;
 }
 
 ACE_INLINE
-IR::Contained::Description_out::Description_out (Description_var &p) // constructor from _var
+IR_Contained::Description_out::Description_out (Description_var &p) // constructor from _var
   : ptr_ (p.out ())
 {
   delete this->ptr_;
@@ -927,48 +844,44 @@
 }
 
 ACE_INLINE
-IR::Contained::Description_out::Description_out (const ::IR::Contained::Description_out &p) // copy constructor
+IR_Contained::Description_out::Description_out (const ::IR_Contained::Description_out &p) // copy constructor
   : ptr_ (ACE_const_cast (Description_out&, p).ptr_)
 {}
 
-ACE_INLINE IR::Contained::Description_out &
-IR::Contained::Description_out::operator= (const ::IR::Contained::Description_out &p)
+ACE_INLINE IR_Contained::Description_out &
+IR_Contained::Description_out::operator= (const ::IR_Contained::Description_out &p)
 {
   this->ptr_ = ACE_const_cast (Description_out&, p).ptr_;
   return *this;
 }
 
-ACE_INLINE IR::Contained::Description_out &
-IR::Contained::Description_out::operator= (Description *p)
+ACE_INLINE IR_Contained::Description_out &
+IR_Contained::Description_out::operator= (Description *p)
 {
   this->ptr_ = p;
   return *this;
 }
 
 ACE_INLINE 
-IR::Contained::Description_out::operator ::IR::Contained::Description *&() // cast
+IR_Contained::Description_out::operator ::IR_Contained::Description *&() // cast
 {
   return this->ptr_;
 }
 
-ACE_INLINE ::IR::Contained::Description *&
-IR::Contained::Description_out::ptr (void) // ptr
+ACE_INLINE ::IR_Contained::Description *&
+IR_Contained::Description_out::ptr (void) // ptr
 {
   return this->ptr_;
 }
 
-ACE_INLINE ::IR::Contained::Description *
-IR::Contained::Description_out::operator-> (void)
+ACE_INLINE ::IR_Contained::Description *
+IR_Contained::Description_out::operator-> (void)
 {
   return this->ptr_;
 }
 
-
-#if !defined (_IR_MODULEDEF___CI_)
-#define _IR_MODULEDEF___CI_
-
 ACE_INLINE
-IR::ModuleDef::ModuleDef (
+IR_ModuleDef::IR_ModuleDef (
     TAO_Stub *objref,
     CORBA::Boolean _tao_collocated,
     TAO_Abstract_ServantBase *servant
@@ -978,185 +891,164 @@
   this->IR_ModuleDef_setup_collocation (_tao_collocated);
 }
 
-
-#endif /* end #if !defined */
-
-
-#if !defined (_IR_MODULEDEF___VAR_CI_)
-#define _IR_MODULEDEF___VAR_CI_
-
 // *************************************************************
-// Inline operations for class IR::ModuleDef_var
+// Inline operations for class IR_ModuleDef_var
 // *************************************************************
 
 ACE_INLINE
-IR::ModuleDef_var::ModuleDef_var (void) // default constructor
-  : ptr_ (IR::ModuleDef::_nil ())
+IR_ModuleDef_var::IR_ModuleDef_var (void) // default constructor
+  : ptr_ (IR_ModuleDef::_nil ())
 {}
 
-ACE_INLINE IR::ModuleDef_ptr 
-IR::ModuleDef_var::ptr (void) const
+ACE_INLINE IR_ModuleDef_ptr 
+IR_ModuleDef_var::ptr (void) const
 {
   return this->ptr_;
 }
 
 ACE_INLINE
-IR::ModuleDef_var::ModuleDef_var (const IR::ModuleDef_var &p) // copy constructor
+IR_ModuleDef_var::IR_ModuleDef_var (const IR_ModuleDef_var &p) // copy constructor
   : TAO_Base_var (),
-    ptr_ (ModuleDef::_duplicate (p.ptr ()))
+    ptr_ (IR_ModuleDef::_duplicate (p.ptr ()))
 {}
 
 ACE_INLINE
-IR::ModuleDef_var::~ModuleDef_var (void) // destructor
+IR_ModuleDef_var::~IR_ModuleDef_var (void) // destructor
 {
   CORBA::release (this->ptr_);
 }
 
-ACE_INLINE IR::ModuleDef_var &
-IR::ModuleDef_var::operator= (IR::ModuleDef_ptr p)
+ACE_INLINE IR_ModuleDef_var &
+IR_ModuleDef_var::operator= (IR_ModuleDef_ptr p)
 {
   CORBA::release (this->ptr_);
   this->ptr_ = p;
   return *this;
 }
 
-ACE_INLINE IR::ModuleDef_var &
-IR::ModuleDef_var::operator= (const IR::ModuleDef_var &p)
+ACE_INLINE IR_ModuleDef_var &
+IR_ModuleDef_var::operator= (const IR_ModuleDef_var &p)
 {
   if (this != &p)
   {
     CORBA::release (this->ptr_);
-    this->ptr_ = IR::ModuleDef::_duplicate (p.ptr ());
+    this->ptr_ = IR_ModuleDef::_duplicate (p.ptr ());
   }
   return *this;
 }
 
 ACE_INLINE 
-IR::ModuleDef_var::operator const IR::ModuleDef_ptr &() const // cast
+IR_ModuleDef_var::operator const IR_ModuleDef_ptr &() const // cast
 {
   return this->ptr_;
 }
 
 ACE_INLINE 
-IR::ModuleDef_var::operator IR::ModuleDef_ptr &() // cast 
+IR_ModuleDef_var::operator IR_ModuleDef_ptr &() // cast 
 {
   return this->ptr_;
 }
 
-ACE_INLINE IR::ModuleDef_ptr 
-IR::ModuleDef_var::operator-> (void) const
+ACE_INLINE IR_ModuleDef_ptr 
+IR_ModuleDef_var::operator-> (void) const
 {
   return this->ptr_;
 }
 
-ACE_INLINE IR::ModuleDef_ptr
-IR::ModuleDef_var::in (void) const
+ACE_INLINE IR_ModuleDef_ptr
+IR_ModuleDef_var::in (void) const
 {
   return this->ptr_;
 }
 
-ACE_INLINE IR::ModuleDef_ptr &
-IR::ModuleDef_var::inout (void)
+ACE_INLINE IR_ModuleDef_ptr &
+IR_ModuleDef_var::inout (void)
 {
   return this->ptr_;
 }
 
-ACE_INLINE IR::ModuleDef_ptr &
-IR::ModuleDef_var::out (void)
+ACE_INLINE IR_ModuleDef_ptr &
+IR_ModuleDef_var::out (void)
 {
   CORBA::release (this->ptr_);
-  this->ptr_ = IR::ModuleDef::_nil ();
+  this->ptr_ = IR_ModuleDef::_nil ();
   return this->ptr_;
 }
 
-ACE_INLINE IR::ModuleDef_ptr 
-IR::ModuleDef_var::_retn (void)
+ACE_INLINE IR_ModuleDef_ptr 
+IR_ModuleDef_var::_retn (void)
 {
   // yield ownership of managed obj reference
-  IR::ModuleDef_ptr val = this->ptr_;
-  this->ptr_ = IR::ModuleDef::_nil ();
+  IR_ModuleDef_ptr val = this->ptr_;
+  this->ptr_ = IR_ModuleDef::_nil ();
   return val;
 }
 
-
-#endif /* end #if !defined */
-
-
-#if !defined (_IR_MODULEDEF___OUT_CI_)
-#define _IR_MODULEDEF___OUT_CI_
-
 // *************************************************************
-// Inline operations for class IR::ModuleDef_out
+// Inline operations for class IR_ModuleDef_out
 // *************************************************************
 
 ACE_INLINE
-IR::ModuleDef_out::ModuleDef_out (IR::ModuleDef_ptr &p)
+IR_ModuleDef_out::IR_ModuleDef_out (IR_ModuleDef_ptr &p)
   : ptr_ (p)
 {
-  this->ptr_ = IR::ModuleDef::_nil ();
+  this->ptr_ = IR_ModuleDef::_nil ();
 }
 
 ACE_INLINE
-IR::ModuleDef_out::ModuleDef_out (IR::ModuleDef_var &p) // constructor from _var
+IR_ModuleDef_out::IR_ModuleDef_out (IR_ModuleDef_var &p) // constructor from _var
   : ptr_ (p.out ())
 {
   CORBA::release (this->ptr_);
-  this->ptr_ = IR::ModuleDef::_nil ();
+  this->ptr_ = IR_ModuleDef::_nil ();
 }
 
 ACE_INLINE
-IR::ModuleDef_out::ModuleDef_out (const IR::ModuleDef_out &p) // copy constructor
-  : ptr_ (ACE_const_cast (IR::ModuleDef_out&,p).ptr_)
+IR_ModuleDef_out::IR_ModuleDef_out (const IR_ModuleDef_out &p) // copy constructor
+  : ptr_ (ACE_const_cast (IR_ModuleDef_out&,p).ptr_)
 {}
 
-ACE_INLINE IR::ModuleDef_out &
-IR::ModuleDef_out::operator= (const IR::ModuleDef_out &p)
+ACE_INLINE IR_ModuleDef_out &
+IR_ModuleDef_out::operator= (const IR_ModuleDef_out &p)
 {
-  this->ptr_ = ACE_const_cast (IR::ModuleDef_out&,p).ptr_;
+  this->ptr_ = ACE_const_cast (IR_ModuleDef_out&,p).ptr_;
   return *this;
 }
 
-ACE_INLINE IR::ModuleDef_out &
-IR::ModuleDef_out::operator= (const IR::ModuleDef_var &p)
+ACE_INLINE IR_ModuleDef_out &
+IR_ModuleDef_out::operator= (const IR_ModuleDef_var &p)
 {
-  this->ptr_ = IR::ModuleDef::_duplicate (p.ptr ());
+  this->ptr_ = IR_ModuleDef::_duplicate (p.ptr ());
   return *this;
 }
 
-ACE_INLINE IR::ModuleDef_out &
-IR::ModuleDef_out::operator= (IR::ModuleDef_ptr p)
+ACE_INLINE IR_ModuleDef_out &
+IR_ModuleDef_out::operator= (IR_ModuleDef_ptr p)
 {
   this->ptr_ = p;
   return *this;
 }
 
 ACE_INLINE 
-IR::ModuleDef_out::operator IR::ModuleDef_ptr &() // cast
+IR_ModuleDef_out::operator IR_ModuleDef_ptr &() // cast
 {
   return this->ptr_;
 }
 
-ACE_INLINE IR::ModuleDef_ptr &
-IR::ModuleDef_out::ptr (void) // ptr
+ACE_INLINE IR_ModuleDef_ptr &
+IR_ModuleDef_out::ptr (void) // ptr
 {
   return this->ptr_;
 }
 
-ACE_INLINE IR::ModuleDef_ptr 
-IR::ModuleDef_out::operator-> (void)
+ACE_INLINE IR_ModuleDef_ptr 
+IR_ModuleDef_out::operator-> (void)
 {
   return this->ptr_;
 }
 
-
-#endif /* end #if !defined */
-
-
-#if !defined (_IR_CONSTANTDEF___CI_)
-#define _IR_CONSTANTDEF___CI_
-
 ACE_INLINE
-IR::ConstantDef::ConstantDef (
+IR_ConstantDef::IR_ConstantDef (
     TAO_Stub *objref,
     CORBA::Boolean _tao_collocated,
     TAO_Abstract_ServantBase *servant
@@ -1166,185 +1058,164 @@
   this->IR_ConstantDef_setup_collocation (_tao_collocated);
 }
 
-
-#endif /* end #if !defined */
-
-
-#if !defined (_IR_CONSTANTDEF___VAR_CI_)
-#define _IR_CONSTANTDEF___VAR_CI_
-
 // *************************************************************
-// Inline operations for class IR::ConstantDef_var
+// Inline operations for class IR_ConstantDef_var
 // *************************************************************
 
 ACE_INLINE
-IR::ConstantDef_var::ConstantDef_var (void) // default constructor
-  : ptr_ (IR::ConstantDef::_nil ())
+IR_ConstantDef_var::IR_ConstantDef_var (void) // default constructor
+  : ptr_ (IR_ConstantDef::_nil ())
 {}
 
-ACE_INLINE IR::ConstantDef_ptr 
-IR::ConstantDef_var::ptr (void) const
+ACE_INLINE IR_ConstantDef_ptr 
+IR_ConstantDef_var::ptr (void) const
 {
   return this->ptr_;
 }
 
 ACE_INLINE
-IR::ConstantDef_var::ConstantDef_var (const IR::ConstantDef_var &p) // copy constructor
+IR_ConstantDef_var::IR_ConstantDef_var (const IR_ConstantDef_var &p) // copy constructor
   : TAO_Base_var (),
-    ptr_ (ConstantDef::_duplicate (p.ptr ()))
+    ptr_ (IR_ConstantDef::_duplicate (p.ptr ()))
 {}
 
 ACE_INLINE
-IR::ConstantDef_var::~ConstantDef_var (void) // destructor
+IR_ConstantDef_var::~IR_ConstantDef_var (void) // destructor
 {
   CORBA::release (this->ptr_);
 }
 
-ACE_INLINE IR::ConstantDef_var &
-IR::ConstantDef_var::operator= (IR::ConstantDef_ptr p)
+ACE_INLINE IR_ConstantDef_var &
+IR_ConstantDef_var::operator= (IR_ConstantDef_ptr p)
 {
   CORBA::release (this->ptr_);
   this->ptr_ = p;
   return *this;
 }
 
-ACE_INLINE IR::ConstantDef_var &
-IR::ConstantDef_var::operator= (const IR::ConstantDef_var &p)
+ACE_INLINE IR_ConstantDef_var &
+IR_ConstantDef_var::operator= (const IR_ConstantDef_var &p)
 {
   if (this != &p)
   {
     CORBA::release (this->ptr_);
-    this->ptr_ = IR::ConstantDef::_duplicate (p.ptr ());
+    this->ptr_ = IR_ConstantDef::_duplicate (p.ptr ());
   }
   return *this;
 }
 
 ACE_INLINE 
-IR::ConstantDef_var::operator const IR::ConstantDef_ptr &() const // cast
+IR_ConstantDef_var::operator const IR_ConstantDef_ptr &() const // cast
 {
   return this->ptr_;
 }
 
 ACE_INLINE 
-IR::ConstantDef_var::operator IR::ConstantDef_ptr &() // cast 
+IR_ConstantDef_var::operator IR_ConstantDef_ptr &() // cast 
 {
   return this->ptr_;
 }
 
-ACE_INLINE IR::ConstantDef_ptr 
-IR::ConstantDef_var::operator-> (void) const
+ACE_INLINE IR_ConstantDef_ptr 
+IR_ConstantDef_var::operator-> (void) const
 {
   return this->ptr_;
 }
 
-ACE_INLINE IR::ConstantDef_ptr
-IR::ConstantDef_var::in (void) const
+ACE_INLINE IR_ConstantDef_ptr
+IR_ConstantDef_var::in (void) const
 {
   return this->ptr_;
 }
 
-ACE_INLINE IR::ConstantDef_ptr &
-IR::ConstantDef_var::inout (void)
+ACE_INLINE IR_ConstantDef_ptr &
+IR_ConstantDef_var::inout (void)
 {
   return this->ptr_;
 }
 
-ACE_INLINE IR::ConstantDef_ptr &
-IR::ConstantDef_var::out (void)
+ACE_INLINE IR_ConstantDef_ptr &
+IR_ConstantDef_var::out (void)
 {
   CORBA::release (this->ptr_);
-  this->ptr_ = IR::ConstantDef::_nil ();
+  this->ptr_ = IR_ConstantDef::_nil ();
   return this->ptr_;
 }
 
-ACE_INLINE IR::ConstantDef_ptr 
-IR::ConstantDef_var::_retn (void)
+ACE_INLINE IR_ConstantDef_ptr 
+IR_ConstantDef_var::_retn (void)
 {
   // yield ownership of managed obj reference
-  IR::ConstantDef_ptr val = this->ptr_;
-  this->ptr_ = IR::ConstantDef::_nil ();
+  IR_ConstantDef_ptr val = this->ptr_;
+  this->ptr_ = IR_ConstantDef::_nil ();
   return val;
 }
 
-
-#endif /* end #if !defined */
-
-
-#if !defined (_IR_CONSTANTDEF___OUT_CI_)
-#define _IR_CONSTANTDEF___OUT_CI_
-
 // *************************************************************
-// Inline operations for class IR::ConstantDef_out
+// Inline operations for class IR_ConstantDef_out
 // *************************************************************
 
 ACE_INLINE
-IR::ConstantDef_out::ConstantDef_out (IR::ConstantDef_ptr &p)
+IR_ConstantDef_out::IR_ConstantDef_out (IR_ConstantDef_ptr &p)
   : ptr_ (p)
 {
-  this->ptr_ = IR::ConstantDef::_nil ();
+  this->ptr_ = IR_ConstantDef::_nil ();
 }
 
 ACE_INLINE
-IR::ConstantDef_out::ConstantDef_out (IR::ConstantDef_var &p) // constructor from _var
+IR_ConstantDef_out::IR_ConstantDef_out (IR_ConstantDef_var &p) // constructor from _var
   : ptr_ (p.out ())
 {
   CORBA::release (this->ptr_);
-  this->ptr_ = IR::ConstantDef::_nil ();
+  this->ptr_ = IR_ConstantDef::_nil ();
 }
 
 ACE_INLINE
-IR::ConstantDef_out::ConstantDef_out (const IR::ConstantDef_out &p) // copy constructor
-  : ptr_ (ACE_const_cast (IR::ConstantDef_out&,p).ptr_)
+IR_ConstantDef_out::IR_ConstantDef_out (const IR_ConstantDef_out &p) // copy constructor
+  : ptr_ (ACE_const_cast (IR_ConstantDef_out&,p).ptr_)
 {}
 
-ACE_INLINE IR::ConstantDef_out &
-IR::ConstantDef_out::operator= (const IR::ConstantDef_out &p)
+ACE_INLINE IR_ConstantDef_out &
+IR_ConstantDef_out::operator= (const IR_ConstantDef_out &p)
 {
-  this->ptr_ = ACE_const_cast (IR::ConstantDef_out&,p).ptr_;
+  this->ptr_ = ACE_const_cast (IR_ConstantDef_out&,p).ptr_;
   return *this;
 }
 
-ACE_INLINE IR::ConstantDef_out &
-IR::ConstantDef_out::operator= (const IR::ConstantDef_var &p)
+ACE_INLINE IR_ConstantDef_out &
+IR_ConstantDef_out::operator= (const IR_ConstantDef_var &p)
 {
-  this->ptr_ = IR::ConstantDef::_duplicate (p.ptr ());
+  this->ptr_ = IR_ConstantDef::_duplicate (p.ptr ());
   return *this;
 }
 
-ACE_INLINE IR::ConstantDef_out &
-IR::ConstantDef_out::operator= (IR::ConstantDef_ptr p)
+ACE_INLINE IR_ConstantDef_out &
+IR_ConstantDef_out::operator= (IR_ConstantDef_ptr p)
 {
   this->ptr_ = p;
   return *this;
 }
 
 ACE_INLINE 
-IR::ConstantDef_out::operator IR::ConstantDef_ptr &() // cast
+IR_ConstantDef_out::operator IR_ConstantDef_ptr &() // cast
 {
   return this->ptr_;
 }
 
-ACE_INLINE IR::ConstantDef_ptr &
-IR::ConstantDef_out::ptr (void) // ptr
+ACE_INLINE IR_ConstantDef_ptr &
+IR_ConstantDef_out::ptr (void) // ptr
 {
   return this->ptr_;
 }
 
-ACE_INLINE IR::ConstantDef_ptr 
-IR::ConstantDef_out::operator-> (void)
+ACE_INLINE IR_ConstantDef_ptr 
+IR_ConstantDef_out::operator-> (void)
 {
   return this->ptr_;
 }
 
-
-#endif /* end #if !defined */
-
-
-#if !defined (_IR_IDLTYPE___CI_)
-#define _IR_IDLTYPE___CI_
-
 ACE_INLINE
-IR::IDLType::IDLType (
+IR_IDLType::IR_IDLType (
     TAO_Stub *objref,
     CORBA::Boolean _tao_collocated,
     TAO_Abstract_ServantBase *servant
@@ -1354,185 +1225,164 @@
   this->IR_IDLType_setup_collocation (_tao_collocated);
 }
 
-
-#endif /* end #if !defined */
-
-
-#if !defined (_IR_IDLTYPE___VAR_CI_)
-#define _IR_IDLTYPE___VAR_CI_
-
 // *************************************************************
-// Inline operations for class IR::IDLType_var
+// Inline operations for class IR_IDLType_var
 // *************************************************************
 
 ACE_INLINE
-IR::IDLType_var::IDLType_var (void) // default constructor
-  : ptr_ (IR::IDLType::_nil ())
+IR_IDLType_var::IR_IDLType_var (void) // default constructor
+  : ptr_ (IR_IDLType::_nil ())
 {}
 
-ACE_INLINE IR::IDLType_ptr 
-IR::IDLType_var::ptr (void) const
+ACE_INLINE IR_IDLType_ptr 
+IR_IDLType_var::ptr (void) const
 {
   return this->ptr_;
 }
 
 ACE_INLINE
-IR::IDLType_var::IDLType_var (const IR::IDLType_var &p) // copy constructor
+IR_IDLType_var::IR_IDLType_var (const IR_IDLType_var &p) // copy constructor
   : TAO_Base_var (),
-    ptr_ (IDLType::_duplicate (p.ptr ()))
+    ptr_ (IR_IDLType::_duplicate (p.ptr ()))
 {}
 
 ACE_INLINE
-IR::IDLType_var::~IDLType_var (void) // destructor
+IR_IDLType_var::~IR_IDLType_var (void) // destructor
 {
   CORBA::release (this->ptr_);
 }
 
-ACE_INLINE IR::IDLType_var &
-IR::IDLType_var::operator= (IR::IDLType_ptr p)
+ACE_INLINE IR_IDLType_var &
+IR_IDLType_var::operator= (IR_IDLType_ptr p)
 {
   CORBA::release (this->ptr_);
   this->ptr_ = p;
   return *this;
 }
 
-ACE_INLINE IR::IDLType_var &
-IR::IDLType_var::operator= (const IR::IDLType_var &p)
+ACE_INLINE IR_IDLType_var &
+IR_IDLType_var::operator= (const IR_IDLType_var &p)
 {
   if (this != &p)
   {
     CORBA::release (this->ptr_);
-    this->ptr_ = IR::IDLType::_duplicate (p.ptr ());
+    this->ptr_ = IR_IDLType::_duplicate (p.ptr ());
   }
   return *this;
 }
 
 ACE_INLINE 
-IR::IDLType_var::operator const IR::IDLType_ptr &() const // cast
+IR_IDLType_var::operator const IR_IDLType_ptr &() const // cast
 {
   return this->ptr_;
 }
 
 ACE_INLINE 
-IR::IDLType_var::operator IR::IDLType_ptr &() // cast 
+IR_IDLType_var::operator IR_IDLType_ptr &() // cast 
 {
   return this->ptr_;
 }
 
-ACE_INLINE IR::IDLType_ptr 
-IR::IDLType_var::operator-> (void) const
+ACE_INLINE IR_IDLType_ptr 
+IR_IDLType_var::operator-> (void) const
 {
   return this->ptr_;
 }
 
-ACE_INLINE IR::IDLType_ptr
-IR::IDLType_var::in (void) const
+ACE_INLINE IR_IDLType_ptr
+IR_IDLType_var::in (void) const
 {
   return this->ptr_;
 }
 
-ACE_INLINE IR::IDLType_ptr &
-IR::IDLType_var::inout (void)
+ACE_INLINE IR_IDLType_ptr &
+IR_IDLType_var::inout (void)
 {
   return this->ptr_;
 }
 
-ACE_INLINE IR::IDLType_ptr &
-IR::IDLType_var::out (void)
+ACE_INLINE IR_IDLType_ptr &
+IR_IDLType_var::out (void)
 {
   CORBA::release (this->ptr_);
-  this->ptr_ = IR::IDLType::_nil ();
+  this->ptr_ = IR_IDLType::_nil ();
   return this->ptr_;
 }
 
-ACE_INLINE IR::IDLType_ptr 
-IR::IDLType_var::_retn (void)
+ACE_INLINE IR_IDLType_ptr 
+IR_IDLType_var::_retn (void)
 {
   // yield ownership of managed obj reference
-  IR::IDLType_ptr val = this->ptr_;
-  this->ptr_ = IR::IDLType::_nil ();
+  IR_IDLType_ptr val = this->ptr_;
+  this->ptr_ = IR_IDLType::_nil ();
   return val;
 }
 
-
-#endif /* end #if !defined */
-
-
-#if !defined (_IR_IDLTYPE___OUT_CI_)
-#define _IR_IDLTYPE___OUT_CI_
-
 // *************************************************************
-// Inline operations for class IR::IDLType_out
+// Inline operations for class IR_IDLType_out
 // *************************************************************
 
 ACE_INLINE
-IR::IDLType_out::IDLType_out (IR::IDLType_ptr &p)
+IR_IDLType_out::IR_IDLType_out (IR_IDLType_ptr &p)
   : ptr_ (p)
 {
-  this->ptr_ = IR::IDLType::_nil ();
+  this->ptr_ = IR_IDLType::_nil ();
 }
 
 ACE_INLINE
-IR::IDLType_out::IDLType_out (IR::IDLType_var &p) // constructor from _var
+IR_IDLType_out::IR_IDLType_out (IR_IDLType_var &p) // constructor from _var
   : ptr_ (p.out ())
 {
   CORBA::release (this->ptr_);
-  this->ptr_ = IR::IDLType::_nil ();
+  this->ptr_ = IR_IDLType::_nil ();
 }
 
 ACE_INLINE
-IR::IDLType_out::IDLType_out (const IR::IDLType_out &p) // copy constructor
-  : ptr_ (ACE_const_cast (IR::IDLType_out&,p).ptr_)
+IR_IDLType_out::IR_IDLType_out (const IR_IDLType_out &p) // copy constructor
+  : ptr_ (ACE_const_cast (IR_IDLType_out&,p).ptr_)
 {}
 
-ACE_INLINE IR::IDLType_out &
-IR::IDLType_out::operator= (const IR::IDLType_out &p)
+ACE_INLINE IR_IDLType_out &
+IR_IDLType_out::operator= (const IR_IDLType_out &p)
 {
-  this->ptr_ = ACE_const_cast (IR::IDLType_out&,p).ptr_;
+  this->ptr_ = ACE_const_cast (IR_IDLType_out&,p).ptr_;
   return *this;
 }
 
-ACE_INLINE IR::IDLType_out &
-IR::IDLType_out::operator= (const IR::IDLType_var &p)
+ACE_INLINE IR_IDLType_out &
+IR_IDLType_out::operator= (const IR_IDLType_var &p)
 {
-  this->ptr_ = IR::IDLType::_duplicate (p.ptr ());
+  this->ptr_ = IR_IDLType::_duplicate (p.ptr ());
   return *this;
 }
 
-ACE_INLINE IR::IDLType_out &
-IR::IDLType_out::operator= (IR::IDLType_ptr p)
+ACE_INLINE IR_IDLType_out &
+IR_IDLType_out::operator= (IR_IDLType_ptr p)
 {
   this->ptr_ = p;
   return *this;
 }
 
 ACE_INLINE 
-IR::IDLType_out::operator IR::IDLType_ptr &() // cast
+IR_IDLType_out::operator IR_IDLType_ptr &() // cast
 {
   return this->ptr_;
 }
 
-ACE_INLINE IR::IDLType_ptr &
-IR::IDLType_out::ptr (void) // ptr
+ACE_INLINE IR_IDLType_ptr &
+IR_IDLType_out::ptr (void) // ptr
 {
   return this->ptr_;
 }
 
-ACE_INLINE IR::IDLType_ptr 
-IR::IDLType_out::operator-> (void)
+ACE_INLINE IR_IDLType_ptr 
+IR_IDLType_out::operator-> (void)
 {
   return this->ptr_;
 }
 
-
-#endif /* end #if !defined */
-
-
-#if !defined (_IR_STRUCTDEF___CI_)
-#define _IR_STRUCTDEF___CI_
-
 ACE_INLINE
-IR::StructDef::StructDef (
+IR_StructDef::IR_StructDef (
     TAO_Stub *objref,
     CORBA::Boolean _tao_collocated,
     TAO_Abstract_ServantBase *servant
@@ -1542,185 +1392,164 @@
   this->IR_StructDef_setup_collocation (_tao_collocated);
 }
 
-
-#endif /* end #if !defined */
-
-
-#if !defined (_IR_STRUCTDEF___VAR_CI_)
-#define _IR_STRUCTDEF___VAR_CI_
-
 // *************************************************************
-// Inline operations for class IR::StructDef_var
+// Inline operations for class IR_StructDef_var
 // *************************************************************
 
 ACE_INLINE
-IR::StructDef_var::StructDef_var (void) // default constructor
-  : ptr_ (IR::StructDef::_nil ())
+IR_StructDef_var::IR_StructDef_var (void) // default constructor
+  : ptr_ (IR_StructDef::_nil ())
 {}
 
-ACE_INLINE IR::StructDef_ptr 
-IR::StructDef_var::ptr (void) const
+ACE_INLINE IR_StructDef_ptr 
+IR_StructDef_var::ptr (void) const
 {
   return this->ptr_;
 }
 
 ACE_INLINE
-IR::StructDef_var::StructDef_var (const IR::StructDef_var &p) // copy constructor
+IR_StructDef_var::IR_StructDef_var (const IR_StructDef_var &p) // copy constructor
   : TAO_Base_var (),
-    ptr_ (StructDef::_duplicate (p.ptr ()))
+    ptr_ (IR_StructDef::_duplicate (p.ptr ()))
 {}
 
 ACE_INLINE
-IR::StructDef_var::~StructDef_var (void) // destructor
+IR_StructDef_var::~IR_StructDef_var (void) // destructor
 {
   CORBA::release (this->ptr_);
 }
 
-ACE_INLINE IR::StructDef_var &
-IR::StructDef_var::operator= (IR::StructDef_ptr p)
+ACE_INLINE IR_StructDef_var &
+IR_StructDef_var::operator= (IR_StructDef_ptr p)
 {
   CORBA::release (this->ptr_);
   this->ptr_ = p;
   return *this;
 }
 
-ACE_INLINE IR::StructDef_var &
-IR::StructDef_var::operator= (const IR::StructDef_var &p)
+ACE_INLINE IR_StructDef_var &
+IR_StructDef_var::operator= (const IR_StructDef_var &p)
 {
   if (this != &p)
   {
     CORBA::release (this->ptr_);
-    this->ptr_ = IR::StructDef::_duplicate (p.ptr ());
+    this->ptr_ = IR_StructDef::_duplicate (p.ptr ());
   }
   return *this;
 }
 
 ACE_INLINE 
-IR::StructDef_var::operator const IR::StructDef_ptr &() const // cast
+IR_StructDef_var::operator const IR_StructDef_ptr &() const // cast
 {
   return this->ptr_;
 }
 
 ACE_INLINE 
-IR::StructDef_var::operator IR::StructDef_ptr &() // cast 
+IR_StructDef_var::operator IR_StructDef_ptr &() // cast 
 {
   return this->ptr_;
 }
 
-ACE_INLINE IR::StructDef_ptr 
-IR::StructDef_var::operator-> (void) const
+ACE_INLINE IR_StructDef_ptr 
+IR_StructDef_var::operator-> (void) const
 {
   return this->ptr_;
 }
 
-ACE_INLINE IR::StructDef_ptr
-IR::StructDef_var::in (void) const
+ACE_INLINE IR_StructDef_ptr
+IR_StructDef_var::in (void) const
 {
   return this->ptr_;
 }
 
-ACE_INLINE IR::StructDef_ptr &
-IR::StructDef_var::inout (void)
+ACE_INLINE IR_StructDef_ptr &
+IR_StructDef_var::inout (void)
 {
   return this->ptr_;
 }
 
-ACE_INLINE IR::StructDef_ptr &
-IR::StructDef_var::out (void)
+ACE_INLINE IR_StructDef_ptr &
+IR_StructDef_var::out (void)
 {
   CORBA::release (this->ptr_);
-  this->ptr_ = IR::StructDef::_nil ();
+  this->ptr_ = IR_StructDef::_nil ();
   return this->ptr_;
 }
 
-ACE_INLINE IR::StructDef_ptr 
-IR::StructDef_var::_retn (void)
+ACE_INLINE IR_StructDef_ptr 
+IR_StructDef_var::_retn (void)
 {
   // yield ownership of managed obj reference
-  IR::StructDef_ptr val = this->ptr_;
-  this->ptr_ = IR::StructDef::_nil ();
+  IR_StructDef_ptr val = this->ptr_;
+  this->ptr_ = IR_StructDef::_nil ();
   return val;
 }
 
-
-#endif /* end #if !defined */
-
-
-#if !defined (_IR_STRUCTDEF___OUT_CI_)
-#define _IR_STRUCTDEF___OUT_CI_
-
 // *************************************************************
-// Inline operations for class IR::StructDef_out
+// Inline operations for class IR_StructDef_out
 // *************************************************************
 
 ACE_INLINE
-IR::StructDef_out::StructDef_out (IR::StructDef_ptr &p)
+IR_StructDef_out::IR_StructDef_out (IR_StructDef_ptr &p)
   : ptr_ (p)
 {
-  this->ptr_ = IR::StructDef::_nil ();
+  this->ptr_ = IR_StructDef::_nil ();
 }
 
 ACE_INLINE
-IR::StructDef_out::StructDef_out (IR::StructDef_var &p) // constructor from _var
+IR_StructDef_out::IR_StructDef_out (IR_StructDef_var &p) // constructor from _var
   : ptr_ (p.out ())
 {
   CORBA::release (this->ptr_);
-  this->ptr_ = IR::StructDef::_nil ();
+  this->ptr_ = IR_StructDef::_nil ();
 }
 
 ACE_INLINE
-IR::StructDef_out::StructDef_out (const IR::StructDef_out &p) // copy constructor
-  : ptr_ (ACE_const_cast (IR::StructDef_out&,p).ptr_)
+IR_StructDef_out::IR_StructDef_out (const IR_StructDef_out &p) // copy constructor
+  : ptr_ (ACE_const_cast (IR_StructDef_out&,p).ptr_)
 {}
 
-ACE_INLINE IR::StructDef_out &
-IR::StructDef_out::operator= (const IR::StructDef_out &p)
+ACE_INLINE IR_StructDef_out &
+IR_StructDef_out::operator= (const IR_StructDef_out &p)
 {
-  this->ptr_ = ACE_const_cast (IR::StructDef_out&,p).ptr_;
+  this->ptr_ = ACE_const_cast (IR_StructDef_out&,p).ptr_;
   return *this;
 }
 
-ACE_INLINE IR::StructDef_out &
-IR::StructDef_out::operator= (const IR::StructDef_var &p)
+ACE_INLINE IR_StructDef_out &
+IR_StructDef_out::operator= (const IR_StructDef_var &p)
 {
-  this->ptr_ = IR::StructDef::_duplicate (p.ptr ());
+  this->ptr_ = IR_StructDef::_duplicate (p.ptr ());
   return *this;
 }
 
-ACE_INLINE IR::StructDef_out &
-IR::StructDef_out::operator= (IR::StructDef_ptr p)
+ACE_INLINE IR_StructDef_out &
+IR_StructDef_out::operator= (IR_StructDef_ptr p)
 {
   this->ptr_ = p;
   return *this;
 }
 
 ACE_INLINE 
-IR::StructDef_out::operator IR::StructDef_ptr &() // cast
+IR_StructDef_out::operator IR_StructDef_ptr &() // cast
 {
   return this->ptr_;
 }
 
-ACE_INLINE IR::StructDef_ptr &
-IR::StructDef_out::ptr (void) // ptr
+ACE_INLINE IR_StructDef_ptr &
+IR_StructDef_out::ptr (void) // ptr
 {
   return this->ptr_;
 }
 
-ACE_INLINE IR::StructDef_ptr 
-IR::StructDef_out::operator-> (void)
+ACE_INLINE IR_StructDef_ptr 
+IR_StructDef_out::operator-> (void)
 {
   return this->ptr_;
 }
 
-
-#endif /* end #if !defined */
-
-
-#if !defined (_IR_UNIONDEF___CI_)
-#define _IR_UNIONDEF___CI_
-
 ACE_INLINE
-IR::UnionDef::UnionDef (
+IR_UnionDef::IR_UnionDef (
     TAO_Stub *objref,
     CORBA::Boolean _tao_collocated,
     TAO_Abstract_ServantBase *servant
@@ -1730,185 +1559,164 @@
   this->IR_UnionDef_setup_collocation (_tao_collocated);
 }
 
-
-#endif /* end #if !defined */
-
-
-#if !defined (_IR_UNIONDEF___VAR_CI_)
-#define _IR_UNIONDEF___VAR_CI_
-
 // *************************************************************
-// Inline operations for class IR::UnionDef_var
+// Inline operations for class IR_UnionDef_var
 // *************************************************************
 
 ACE_INLINE
-IR::UnionDef_var::UnionDef_var (void) // default constructor
-  : ptr_ (IR::UnionDef::_nil ())
+IR_UnionDef_var::IR_UnionDef_var (void) // default constructor
+  : ptr_ (IR_UnionDef::_nil ())
 {}
 
-ACE_INLINE IR::UnionDef_ptr 
-IR::UnionDef_var::ptr (void) const
+ACE_INLINE IR_UnionDef_ptr 
+IR_UnionDef_var::ptr (void) const
 {
   return this->ptr_;
 }
 
 ACE_INLINE
-IR::UnionDef_var::UnionDef_var (const IR::UnionDef_var &p) // copy constructor
+IR_UnionDef_var::IR_UnionDef_var (const IR_UnionDef_var &p) // copy constructor
   : TAO_Base_var (),
-    ptr_ (UnionDef::_duplicate (p.ptr ()))
+    ptr_ (IR_UnionDef::_duplicate (p.ptr ()))
 {}
 
 ACE_INLINE
-IR::UnionDef_var::~UnionDef_var (void) // destructor
+IR_UnionDef_var::~IR_UnionDef_var (void) // destructor
 {
   CORBA::release (this->ptr_);
 }
 
-ACE_INLINE IR::UnionDef_var &
-IR::UnionDef_var::operator= (IR::UnionDef_ptr p)
+ACE_INLINE IR_UnionDef_var &
+IR_UnionDef_var::operator= (IR_UnionDef_ptr p)
 {
   CORBA::release (this->ptr_);
   this->ptr_ = p;
   return *this;
 }
 
-ACE_INLINE IR::UnionDef_var &
-IR::UnionDef_var::operator= (const IR::UnionDef_var &p)
+ACE_INLINE IR_UnionDef_var &
+IR_UnionDef_var::operator= (const IR_UnionDef_var &p)
 {
   if (this != &p)
   {
     CORBA::release (this->ptr_);
-    this->ptr_ = IR::UnionDef::_duplicate (p.ptr ());
+    this->ptr_ = IR_UnionDef::_duplicate (p.ptr ());
   }
   return *this;
 }
 
 ACE_INLINE 
-IR::UnionDef_var::operator const IR::UnionDef_ptr &() const // cast
+IR_UnionDef_var::operator const IR_UnionDef_ptr &() const // cast
 {
   return this->ptr_;
 }
 
 ACE_INLINE 
-IR::UnionDef_var::operator IR::UnionDef_ptr &() // cast 
+IR_UnionDef_var::operator IR_UnionDef_ptr &() // cast 
 {
   return this->ptr_;
 }
 
-ACE_INLINE IR::UnionDef_ptr 
-IR::UnionDef_var::operator-> (void) const
+ACE_INLINE IR_UnionDef_ptr 
+IR_UnionDef_var::operator-> (void) const
 {
   return this->ptr_;
 }
 
-ACE_INLINE IR::UnionDef_ptr
-IR::UnionDef_var::in (void) const
+ACE_INLINE IR_UnionDef_ptr
+IR_UnionDef_var::in (void) const
 {
   return this->ptr_;
 }
 
-ACE_INLINE IR::UnionDef_ptr &
-IR::UnionDef_var::inout (void)
+ACE_INLINE IR_UnionDef_ptr &
+IR_UnionDef_var::inout (void)
 {
   return this->ptr_;
 }
 
-ACE_INLINE IR::UnionDef_ptr &
-IR::UnionDef_var::out (void)
+ACE_INLINE IR_UnionDef_ptr &
+IR_UnionDef_var::out (void)
 {
   CORBA::release (this->ptr_);
-  this->ptr_ = IR::UnionDef::_nil ();
+  this->ptr_ = IR_UnionDef::_nil ();
   return this->ptr_;
 }
 
-ACE_INLINE IR::UnionDef_ptr 
-IR::UnionDef_var::_retn (void)
+ACE_INLINE IR_UnionDef_ptr 
+IR_UnionDef_var::_retn (void)
 {
   // yield ownership of managed obj reference
-  IR::UnionDef_ptr val = this->ptr_;
-  this->ptr_ = IR::UnionDef::_nil ();
+  IR_UnionDef_ptr val = this->ptr_;
+  this->ptr_ = IR_UnionDef::_nil ();
   return val;
 }
 
-
-#endif /* end #if !defined */
-
-
-#if !defined (_IR_UNIONDEF___OUT_CI_)
-#define _IR_UNIONDEF___OUT_CI_
-
 // *************************************************************
-// Inline operations for class IR::UnionDef_out
+// Inline operations for class IR_UnionDef_out
 // *************************************************************
 
 ACE_INLINE
-IR::UnionDef_out::UnionDef_out (IR::UnionDef_ptr &p)
+IR_UnionDef_out::IR_UnionDef_out (IR_UnionDef_ptr &p)
   : ptr_ (p)
 {
-  this->ptr_ = IR::UnionDef::_nil ();
+  this->ptr_ = IR_UnionDef::_nil ();
 }
 
 ACE_INLINE
-IR::UnionDef_out::UnionDef_out (IR::UnionDef_var &p) // constructor from _var
+IR_UnionDef_out::IR_UnionDef_out (IR_UnionDef_var &p) // constructor from _var
   : ptr_ (p.out ())
 {
   CORBA::release (this->ptr_);
-  this->ptr_ = IR::UnionDef::_nil ();
+  this->ptr_ = IR_UnionDef::_nil ();
 }
 
 ACE_INLINE
-IR::UnionDef_out::UnionDef_out (const IR::UnionDef_out &p) // copy constructor
-  : ptr_ (ACE_const_cast (IR::UnionDef_out&,p).ptr_)
+IR_UnionDef_out::IR_UnionDef_out (const IR_UnionDef_out &p) // copy constructor
+  : ptr_ (ACE_const_cast (IR_UnionDef_out&,p).ptr_)
 {}
 
-ACE_INLINE IR::UnionDef_out &
-IR::UnionDef_out::operator= (const IR::UnionDef_out &p)
+ACE_INLINE IR_UnionDef_out &
+IR_UnionDef_out::operator= (const IR_UnionDef_out &p)
 {
-  this->ptr_ = ACE_const_cast (IR::UnionDef_out&,p).ptr_;
+  this->ptr_ = ACE_const_cast (IR_UnionDef_out&,p).ptr_;
   return *this;
 }
 
-ACE_INLINE IR::UnionDef_out &
-IR::UnionDef_out::operator= (const IR::UnionDef_var &p)
+ACE_INLINE IR_UnionDef_out &
+IR_UnionDef_out::operator= (const IR_UnionDef_var &p)
 {
-  this->ptr_ = IR::UnionDef::_duplicate (p.ptr ());
+  this->ptr_ = IR_UnionDef::_duplicate (p.ptr ());
   return *this;
 }
 
-ACE_INLINE IR::UnionDef_out &
-IR::UnionDef_out::operator= (IR::UnionDef_ptr p)
+ACE_INLINE IR_UnionDef_out &
+IR_UnionDef_out::operator= (IR_UnionDef_ptr p)
 {
   this->ptr_ = p;
   return *this;
 }
 
 ACE_INLINE 
-IR::UnionDef_out::operator IR::UnionDef_ptr &() // cast
+IR_UnionDef_out::operator IR_UnionDef_ptr &() // cast
 {
   return this->ptr_;
 }
 
-ACE_INLINE IR::UnionDef_ptr &
-IR::UnionDef_out::ptr (void) // ptr
+ACE_INLINE IR_UnionDef_ptr &
+IR_UnionDef_out::ptr (void) // ptr
 {
   return this->ptr_;
 }
 
-ACE_INLINE IR::UnionDef_ptr 
-IR::UnionDef_out::operator-> (void)
+ACE_INLINE IR_UnionDef_ptr 
+IR_UnionDef_out::operator-> (void)
 {
   return this->ptr_;
 }
 
-
-#endif /* end #if !defined */
-
-
-#if !defined (_IR_ENUMDEF___CI_)
-#define _IR_ENUMDEF___CI_
-
 ACE_INLINE
-IR::EnumDef::EnumDef (
+IR_EnumDef::IR_EnumDef (
     TAO_Stub *objref,
     CORBA::Boolean _tao_collocated,
     TAO_Abstract_ServantBase *servant
@@ -1918,185 +1726,164 @@
   this->IR_EnumDef_setup_collocation (_tao_collocated);
 }
 
-
-#endif /* end #if !defined */
-
-
-#if !defined (_IR_ENUMDEF___VAR_CI_)
-#define _IR_ENUMDEF___VAR_CI_
-
 // *************************************************************
-// Inline operations for class IR::EnumDef_var
+// Inline operations for class IR_EnumDef_var
 // *************************************************************
 
 ACE_INLINE
-IR::EnumDef_var::EnumDef_var (void) // default constructor
-  : ptr_ (IR::EnumDef::_nil ())
+IR_EnumDef_var::IR_EnumDef_var (void) // default constructor
+  : ptr_ (IR_EnumDef::_nil ())
 {}
 
-ACE_INLINE IR::EnumDef_ptr 
-IR::EnumDef_var::ptr (void) const
+ACE_INLINE IR_EnumDef_ptr 
+IR_EnumDef_var::ptr (void) const
 {
   return this->ptr_;
 }
 
 ACE_INLINE
-IR::EnumDef_var::EnumDef_var (const IR::EnumDef_var &p) // copy constructor
+IR_EnumDef_var::IR_EnumDef_var (const IR_EnumDef_var &p) // copy constructor
   : TAO_Base_var (),
-    ptr_ (EnumDef::_duplicate (p.ptr ()))
+    ptr_ (IR_EnumDef::_duplicate (p.ptr ()))
 {}
 
 ACE_INLINE
-IR::EnumDef_var::~EnumDef_var (void) // destructor
+IR_EnumDef_var::~IR_EnumDef_var (void) // destructor
 {
   CORBA::release (this->ptr_);
 }
 
-ACE_INLINE IR::EnumDef_var &
-IR::EnumDef_var::operator= (IR::EnumDef_ptr p)
+ACE_INLINE IR_EnumDef_var &
+IR_EnumDef_var::operator= (IR_EnumDef_ptr p)
 {
   CORBA::release (this->ptr_);
   this->ptr_ = p;
   return *this;
 }
 
-ACE_INLINE IR::EnumDef_var &
-IR::EnumDef_var::operator= (const IR::EnumDef_var &p)
+ACE_INLINE IR_EnumDef_var &
+IR_EnumDef_var::operator= (const IR_EnumDef_var &p)
 {
   if (this != &p)
   {
     CORBA::release (this->ptr_);
-    this->ptr_ = IR::EnumDef::_duplicate (p.ptr ());
+    this->ptr_ = IR_EnumDef::_duplicate (p.ptr ());
   }
   return *this;
 }
 
 ACE_INLINE 
-IR::EnumDef_var::operator const IR::EnumDef_ptr &() const // cast
+IR_EnumDef_var::operator const IR_EnumDef_ptr &() const // cast
 {
   return this->ptr_;
 }
 
 ACE_INLINE 
-IR::EnumDef_var::operator IR::EnumDef_ptr &() // cast 
+IR_EnumDef_var::operator IR_EnumDef_ptr &() // cast 
 {
   return this->ptr_;
 }
 
-ACE_INLINE IR::EnumDef_ptr 
-IR::EnumDef_var::operator-> (void) const
+ACE_INLINE IR_EnumDef_ptr 
+IR_EnumDef_var::operator-> (void) const
 {
   return this->ptr_;
 }
 
-ACE_INLINE IR::EnumDef_ptr
-IR::EnumDef_var::in (void) const
+ACE_INLINE IR_EnumDef_ptr
+IR_EnumDef_var::in (void) const
 {
   return this->ptr_;
 }
 
-ACE_INLINE IR::EnumDef_ptr &
-IR::EnumDef_var::inout (void)
+ACE_INLINE IR_EnumDef_ptr &
+IR_EnumDef_var::inout (void)
 {
   return this->ptr_;
 }
 
-ACE_INLINE IR::EnumDef_ptr &
-IR::EnumDef_var::out (void)
+ACE_INLINE IR_EnumDef_ptr &
+IR_EnumDef_var::out (void)
 {
   CORBA::release (this->ptr_);
-  this->ptr_ = IR::EnumDef::_nil ();
+  this->ptr_ = IR_EnumDef::_nil ();
   return this->ptr_;
 }
 
-ACE_INLINE IR::EnumDef_ptr 
-IR::EnumDef_var::_retn (void)
+ACE_INLINE IR_EnumDef_ptr 
+IR_EnumDef_var::_retn (void)
 {
   // yield ownership of managed obj reference
-  IR::EnumDef_ptr val = this->ptr_;
-  this->ptr_ = IR::EnumDef::_nil ();
+  IR_EnumDef_ptr val = this->ptr_;
+  this->ptr_ = IR_EnumDef::_nil ();
   return val;
 }
 
-
-#endif /* end #if !defined */
-
-
-#if !defined (_IR_ENUMDEF___OUT_CI_)
-#define _IR_ENUMDEF___OUT_CI_
-
 // *************************************************************
-// Inline operations for class IR::EnumDef_out
+// Inline operations for class IR_EnumDef_out
 // *************************************************************
 
 ACE_INLINE
-IR::EnumDef_out::EnumDef_out (IR::EnumDef_ptr &p)
+IR_EnumDef_out::IR_EnumDef_out (IR_EnumDef_ptr &p)
   : ptr_ (p)
 {
-  this->ptr_ = IR::EnumDef::_nil ();
+  this->ptr_ = IR_EnumDef::_nil ();
 }
 
 ACE_INLINE
-IR::EnumDef_out::EnumDef_out (IR::EnumDef_var &p) // constructor from _var
+IR_EnumDef_out::IR_EnumDef_out (IR_EnumDef_var &p) // constructor from _var
   : ptr_ (p.out ())
 {
   CORBA::release (this->ptr_);
-  this->ptr_ = IR::EnumDef::_nil ();
+  this->ptr_ = IR_EnumDef::_nil ();
 }
 
 ACE_INLINE
-IR::EnumDef_out::EnumDef_out (const IR::EnumDef_out &p) // copy constructor
-  : ptr_ (ACE_const_cast (IR::EnumDef_out&,p).ptr_)
+IR_EnumDef_out::IR_EnumDef_out (const IR_EnumDef_out &p) // copy constructor
+  : ptr_ (ACE_const_cast (IR_EnumDef_out&,p).ptr_)
 {}
 
-ACE_INLINE IR::EnumDef_out &
-IR::EnumDef_out::operator= (const IR::EnumDef_out &p)
+ACE_INLINE IR_EnumDef_out &
+IR_EnumDef_out::operator= (const IR_EnumDef_out &p)
 {
-  this->ptr_ = ACE_const_cast (IR::EnumDef_out&,p).ptr_;
+  this->ptr_ = ACE_const_cast (IR_EnumDef_out&,p).ptr_;
   return *this;
 }
 
-ACE_INLINE IR::EnumDef_out &
-IR::EnumDef_out::operator= (const IR::EnumDef_var &p)
+ACE_INLINE IR_EnumDef_out &
+IR_EnumDef_out::operator= (const IR_EnumDef_var &p)
 {
-  this->ptr_ = IR::EnumDef::_duplicate (p.ptr ());
+  this->ptr_ = IR_EnumDef::_duplicate (p.ptr ());
   return *this;
 }
 
-ACE_INLINE IR::EnumDef_out &
-IR::EnumDef_out::operator= (IR::EnumDef_ptr p)
+ACE_INLINE IR_EnumDef_out &
+IR_EnumDef_out::operator= (IR_EnumDef_ptr p)
 {
   this->ptr_ = p;
   return *this;
 }
 
 ACE_INLINE 
-IR::EnumDef_out::operator IR::EnumDef_ptr &() // cast
+IR_EnumDef_out::operator IR_EnumDef_ptr &() // cast
 {
   return this->ptr_;
 }
 
-ACE_INLINE IR::EnumDef_ptr &
-IR::EnumDef_out::ptr (void) // ptr
+ACE_INLINE IR_EnumDef_ptr &
+IR_EnumDef_out::ptr (void) // ptr
 {
   return this->ptr_;
 }
 
-ACE_INLINE IR::EnumDef_ptr 
-IR::EnumDef_out::operator-> (void)
+ACE_INLINE IR_EnumDef_ptr 
+IR_EnumDef_out::operator-> (void)
 {
   return this->ptr_;
 }
 
-
-#endif /* end #if !defined */
-
-
-#if !defined (_IR_ALIASDEF___CI_)
-#define _IR_ALIASDEF___CI_
-
 ACE_INLINE
-IR::AliasDef::AliasDef (
+IR_AliasDef::IR_AliasDef (
     TAO_Stub *objref,
     CORBA::Boolean _tao_collocated,
     TAO_Abstract_ServantBase *servant
@@ -2106,185 +1893,164 @@
   this->IR_AliasDef_setup_collocation (_tao_collocated);
 }
 
-
-#endif /* end #if !defined */
-
-
-#if !defined (_IR_ALIASDEF___VAR_CI_)
-#define _IR_ALIASDEF___VAR_CI_
-
 // *************************************************************
-// Inline operations for class IR::AliasDef_var
+// Inline operations for class IR_AliasDef_var
 // *************************************************************
 
 ACE_INLINE
-IR::AliasDef_var::AliasDef_var (void) // default constructor
-  : ptr_ (IR::AliasDef::_nil ())
+IR_AliasDef_var::IR_AliasDef_var (void) // default constructor
+  : ptr_ (IR_AliasDef::_nil ())
 {}
 
-ACE_INLINE IR::AliasDef_ptr 
-IR::AliasDef_var::ptr (void) const
+ACE_INLINE IR_AliasDef_ptr 
+IR_AliasDef_var::ptr (void) const
 {
   return this->ptr_;
 }
 
 ACE_INLINE
-IR::AliasDef_var::AliasDef_var (const IR::AliasDef_var &p) // copy constructor
+IR_AliasDef_var::IR_AliasDef_var (const IR_AliasDef_var &p) // copy constructor
   : TAO_Base_var (),
-    ptr_ (AliasDef::_duplicate (p.ptr ()))
+    ptr_ (IR_AliasDef::_duplicate (p.ptr ()))
 {}
 
 ACE_INLINE
-IR::AliasDef_var::~AliasDef_var (void) // destructor
+IR_AliasDef_var::~IR_AliasDef_var (void) // destructor
 {
   CORBA::release (this->ptr_);
 }
 
-ACE_INLINE IR::AliasDef_var &
-IR::AliasDef_var::operator= (IR::AliasDef_ptr p)
+ACE_INLINE IR_AliasDef_var &
+IR_AliasDef_var::operator= (IR_AliasDef_ptr p)
 {
   CORBA::release (this->ptr_);
   this->ptr_ = p;
   return *this;
 }
 
-ACE_INLINE IR::AliasDef_var &
-IR::AliasDef_var::operator= (const IR::AliasDef_var &p)
+ACE_INLINE IR_AliasDef_var &
+IR_AliasDef_var::operator= (const IR_AliasDef_var &p)
 {
   if (this != &p)
   {
     CORBA::release (this->ptr_);
-    this->ptr_ = IR::AliasDef::_duplicate (p.ptr ());
+    this->ptr_ = IR_AliasDef::_duplicate (p.ptr ());
   }
   return *this;
 }
 
 ACE_INLINE 
-IR::AliasDef_var::operator const IR::AliasDef_ptr &() const // cast
+IR_AliasDef_var::operator const IR_AliasDef_ptr &() const // cast
 {
   return this->ptr_;
 }
 
 ACE_INLINE 
-IR::AliasDef_var::operator IR::AliasDef_ptr &() // cast 
+IR_AliasDef_var::operator IR_AliasDef_ptr &() // cast 
 {
   return this->ptr_;
 }
 
-ACE_INLINE IR::AliasDef_ptr 
-IR::AliasDef_var::operator-> (void) const
+ACE_INLINE IR_AliasDef_ptr 
+IR_AliasDef_var::operator-> (void) const
 {
   return this->ptr_;
 }
 
-ACE_INLINE IR::AliasDef_ptr
-IR::AliasDef_var::in (void) const
+ACE_INLINE IR_AliasDef_ptr
+IR_AliasDef_var::in (void) const
 {
   return this->ptr_;
 }
 
-ACE_INLINE IR::AliasDef_ptr &
-IR::AliasDef_var::inout (void)
+ACE_INLINE IR_AliasDef_ptr &
+IR_AliasDef_var::inout (void)
 {
   return this->ptr_;
 }
 
-ACE_INLINE IR::AliasDef_ptr &
-IR::AliasDef_var::out (void)
+ACE_INLINE IR_AliasDef_ptr &
+IR_AliasDef_var::out (void)
 {
   CORBA::release (this->ptr_);
-  this->ptr_ = IR::AliasDef::_nil ();
+  this->ptr_ = IR_AliasDef::_nil ();
   return this->ptr_;
 }
 
-ACE_INLINE IR::AliasDef_ptr 
-IR::AliasDef_var::_retn (void)
+ACE_INLINE IR_AliasDef_ptr 
+IR_AliasDef_var::_retn (void)
 {
   // yield ownership of managed obj reference
-  IR::AliasDef_ptr val = this->ptr_;
-  this->ptr_ = IR::AliasDef::_nil ();
+  IR_AliasDef_ptr val = this->ptr_;
+  this->ptr_ = IR_AliasDef::_nil ();
   return val;
 }
 
-
-#endif /* end #if !defined */
-
-
-#if !defined (_IR_ALIASDEF___OUT_CI_)
-#define _IR_ALIASDEF___OUT_CI_
-
 // *************************************************************
-// Inline operations for class IR::AliasDef_out
+// Inline operations for class IR_AliasDef_out
 // *************************************************************
 
 ACE_INLINE
-IR::AliasDef_out::AliasDef_out (IR::AliasDef_ptr &p)
+IR_AliasDef_out::IR_AliasDef_out (IR_AliasDef_ptr &p)
   : ptr_ (p)
 {
-  this->ptr_ = IR::AliasDef::_nil ();
+  this->ptr_ = IR_AliasDef::_nil ();
 }
 
 ACE_INLINE
-IR::AliasDef_out::AliasDef_out (IR::AliasDef_var &p) // constructor from _var
+IR_AliasDef_out::IR_AliasDef_out (IR_AliasDef_var &p) // constructor from _var
   : ptr_ (p.out ())
 {
   CORBA::release (this->ptr_);
-  this->ptr_ = IR::AliasDef::_nil ();
+  this->ptr_ = IR_AliasDef::_nil ();
 }
 
 ACE_INLINE
-IR::AliasDef_out::AliasDef_out (const IR::AliasDef_out &p) // copy constructor
-  : ptr_ (ACE_const_cast (IR::AliasDef_out&,p).ptr_)
+IR_AliasDef_out::IR_AliasDef_out (const IR_AliasDef_out &p) // copy constructor
+  : ptr_ (ACE_const_cast (IR_AliasDef_out&,p).ptr_)
 {}
 
-ACE_INLINE IR::AliasDef_out &
-IR::AliasDef_out::operator= (const IR::AliasDef_out &p)
+ACE_INLINE IR_AliasDef_out &
+IR_AliasDef_out::operator= (const IR_AliasDef_out &p)
 {
-  this->ptr_ = ACE_const_cast (IR::AliasDef_out&,p).ptr_;
+  this->ptr_ = ACE_const_cast (IR_AliasDef_out&,p).ptr_;
   return *this;
 }
 
-ACE_INLINE IR::AliasDef_out &
-IR::AliasDef_out::operator= (const IR::AliasDef_var &p)
+ACE_INLINE IR_AliasDef_out &
+IR_AliasDef_out::operator= (const IR_AliasDef_var &p)
 {
-  this->ptr_ = IR::AliasDef::_duplicate (p.ptr ());
+  this->ptr_ = IR_AliasDef::_duplicate (p.ptr ());
   return *this;
 }
 
-ACE_INLINE IR::AliasDef_out &
-IR::AliasDef_out::operator= (IR::AliasDef_ptr p)
+ACE_INLINE IR_AliasDef_out &
+IR_AliasDef_out::operator= (IR_AliasDef_ptr p)
 {
   this->ptr_ = p;
   return *this;
 }
 
 ACE_INLINE 
-IR::AliasDef_out::operator IR::AliasDef_ptr &() // cast
+IR_AliasDef_out::operator IR_AliasDef_ptr &() // cast
 {
   return this->ptr_;
 }
 
-ACE_INLINE IR::AliasDef_ptr &
-IR::AliasDef_out::ptr (void) // ptr
+ACE_INLINE IR_AliasDef_ptr &
+IR_AliasDef_out::ptr (void) // ptr
 {
   return this->ptr_;
 }
 
-ACE_INLINE IR::AliasDef_ptr 
-IR::AliasDef_out::operator-> (void)
+ACE_INLINE IR_AliasDef_ptr 
+IR_AliasDef_out::operator-> (void)
 {
   return this->ptr_;
 }
 
-
-#endif /* end #if !defined */
-
-
-#if !defined (_IR_INTERFACEDEF___CI_)
-#define _IR_INTERFACEDEF___CI_
-
 ACE_INLINE
-IR::InterfaceDef::InterfaceDef (
+IR_InterfaceDef::IR_InterfaceDef (
     TAO_Stub *objref,
     CORBA::Boolean _tao_collocated,
     TAO_Abstract_ServantBase *servant
@@ -2294,185 +2060,164 @@
   this->IR_InterfaceDef_setup_collocation (_tao_collocated);
 }
 
-
-#endif /* end #if !defined */
-
-
-#if !defined (_IR_INTERFACEDEF___VAR_CI_)
-#define _IR_INTERFACEDEF___VAR_CI_
-
 // *************************************************************
-// Inline operations for class IR::InterfaceDef_var
+// Inline operations for class IR_InterfaceDef_var
 // *************************************************************
 
 ACE_INLINE
-IR::InterfaceDef_var::InterfaceDef_var (void) // default constructor
-  : ptr_ (IR::InterfaceDef::_nil ())
+IR_InterfaceDef_var::IR_InterfaceDef_var (void) // default constructor
+  : ptr_ (IR_InterfaceDef::_nil ())
 {}
 
-ACE_INLINE IR::InterfaceDef_ptr 
-IR::InterfaceDef_var::ptr (void) const
+ACE_INLINE IR_InterfaceDef_ptr 
+IR_InterfaceDef_var::ptr (void) const
 {
   return this->ptr_;
 }
 
 ACE_INLINE
-IR::InterfaceDef_var::InterfaceDef_var (const IR::InterfaceDef_var &p) // copy constructor
+IR_InterfaceDef_var::IR_InterfaceDef_var (const IR_InterfaceDef_var &p) // copy constructor
   : TAO_Base_var (),
-    ptr_ (InterfaceDef::_duplicate (p.ptr ()))
+    ptr_ (IR_InterfaceDef::_duplicate (p.ptr ()))
 {}
 
 ACE_INLINE
-IR::InterfaceDef_var::~InterfaceDef_var (void) // destructor
+IR_InterfaceDef_var::~IR_InterfaceDef_var (void) // destructor
 {
   CORBA::release (this->ptr_);
 }
 
-ACE_INLINE IR::InterfaceDef_var &
-IR::InterfaceDef_var::operator= (IR::InterfaceDef_ptr p)
+ACE_INLINE IR_InterfaceDef_var &
+IR_InterfaceDef_var::operator= (IR_InterfaceDef_ptr p)
 {
   CORBA::release (this->ptr_);
   this->ptr_ = p;
   return *this;
 }
 
-ACE_INLINE IR::InterfaceDef_var &
-IR::InterfaceDef_var::operator= (const IR::InterfaceDef_var &p)
+ACE_INLINE IR_InterfaceDef_var &
+IR_InterfaceDef_var::operator= (const IR_InterfaceDef_var &p)
 {
   if (this != &p)
   {
     CORBA::release (this->ptr_);
-    this->ptr_ = IR::InterfaceDef::_duplicate (p.ptr ());
+    this->ptr_ = IR_InterfaceDef::_duplicate (p.ptr ());
   }
   return *this;
 }
 
 ACE_INLINE 
-IR::InterfaceDef_var::operator const IR::InterfaceDef_ptr &() const // cast
+IR_InterfaceDef_var::operator const IR_InterfaceDef_ptr &() const // cast
 {
   return this->ptr_;
 }
 
 ACE_INLINE 
-IR::InterfaceDef_var::operator IR::InterfaceDef_ptr &() // cast 
+IR_InterfaceDef_var::operator IR_InterfaceDef_ptr &() // cast 
 {
   return this->ptr_;
 }
 
-ACE_INLINE IR::InterfaceDef_ptr 
-IR::InterfaceDef_var::operator-> (void) const
+ACE_INLINE IR_InterfaceDef_ptr 
+IR_InterfaceDef_var::operator-> (void) const
 {
   return this->ptr_;
 }
 
-ACE_INLINE IR::InterfaceDef_ptr
-IR::InterfaceDef_var::in (void) const
+ACE_INLINE IR_InterfaceDef_ptr
+IR_InterfaceDef_var::in (void) const
 {
   return this->ptr_;
 }
 
-ACE_INLINE IR::InterfaceDef_ptr &
-IR::InterfaceDef_var::inout (void)
+ACE_INLINE IR_InterfaceDef_ptr &
+IR_InterfaceDef_var::inout (void)
 {
   return this->ptr_;
 }
 
-ACE_INLINE IR::InterfaceDef_ptr &
-IR::InterfaceDef_var::out (void)
+ACE_INLINE IR_InterfaceDef_ptr &
+IR_InterfaceDef_var::out (void)
 {
   CORBA::release (this->ptr_);
-  this->ptr_ = IR::InterfaceDef::_nil ();
+  this->ptr_ = IR_InterfaceDef::_nil ();
   return this->ptr_;
 }
 
-ACE_INLINE IR::InterfaceDef_ptr 
-IR::InterfaceDef_var::_retn (void)
+ACE_INLINE IR_InterfaceDef_ptr 
+IR_InterfaceDef_var::_retn (void)
 {
   // yield ownership of managed obj reference
-  IR::InterfaceDef_ptr val = this->ptr_;
-  this->ptr_ = IR::InterfaceDef::_nil ();
+  IR_InterfaceDef_ptr val = this->ptr_;
+  this->ptr_ = IR_InterfaceDef::_nil ();
   return val;
 }
 
-
-#endif /* end #if !defined */
-
-
-#if !defined (_IR_INTERFACEDEF___OUT_CI_)
-#define _IR_INTERFACEDEF___OUT_CI_
-
 // *************************************************************
-// Inline operations for class IR::InterfaceDef_out
+// Inline operations for class IR_InterfaceDef_out
 // *************************************************************
 
 ACE_INLINE
-IR::InterfaceDef_out::InterfaceDef_out (IR::InterfaceDef_ptr &p)
+IR_InterfaceDef_out::IR_InterfaceDef_out (IR_InterfaceDef_ptr &p)
   : ptr_ (p)
 {
-  this->ptr_ = IR::InterfaceDef::_nil ();
+  this->ptr_ = IR_InterfaceDef::_nil ();
 }
 
 ACE_INLINE
-IR::InterfaceDef_out::InterfaceDef_out (IR::InterfaceDef_var &p) // constructor from _var
+IR_InterfaceDef_out::IR_InterfaceDef_out (IR_InterfaceDef_var &p) // constructor from _var
   : ptr_ (p.out ())
 {
   CORBA::release (this->ptr_);
-  this->ptr_ = IR::InterfaceDef::_nil ();
+  this->ptr_ = IR_InterfaceDef::_nil ();
 }
 
 ACE_INLINE
-IR::InterfaceDef_out::InterfaceDef_out (const IR::InterfaceDef_out &p) // copy constructor
-  : ptr_ (ACE_const_cast (IR::InterfaceDef_out&,p).ptr_)
+IR_InterfaceDef_out::IR_InterfaceDef_out (const IR_InterfaceDef_out &p) // copy constructor
+  : ptr_ (ACE_const_cast (IR_InterfaceDef_out&,p).ptr_)
 {}
 
-ACE_INLINE IR::InterfaceDef_out &
-IR::InterfaceDef_out::operator= (const IR::InterfaceDef_out &p)
+ACE_INLINE IR_InterfaceDef_out &
+IR_InterfaceDef_out::operator= (const IR_InterfaceDef_out &p)
 {
-  this->ptr_ = ACE_const_cast (IR::InterfaceDef_out&,p).ptr_;
+  this->ptr_ = ACE_const_cast (IR_InterfaceDef_out&,p).ptr_;
   return *this;
 }
 
-ACE_INLINE IR::InterfaceDef_out &
-IR::InterfaceDef_out::operator= (const IR::InterfaceDef_var &p)
+ACE_INLINE IR_InterfaceDef_out &
+IR_InterfaceDef_out::operator= (const IR_InterfaceDef_var &p)
 {
-  this->ptr_ = IR::InterfaceDef::_duplicate (p.ptr ());
+  this->ptr_ = IR_InterfaceDef::_duplicate (p.ptr ());
   return *this;
 }
 
-ACE_INLINE IR::InterfaceDef_out &
-IR::InterfaceDef_out::operator= (IR::InterfaceDef_ptr p)
+ACE_INLINE IR_InterfaceDef_out &
+IR_InterfaceDef_out::operator= (IR_InterfaceDef_ptr p)
 {
   this->ptr_ = p;
   return *this;
 }
 
 ACE_INLINE 
-IR::InterfaceDef_out::operator IR::InterfaceDef_ptr &() // cast
+IR_InterfaceDef_out::operator IR_InterfaceDef_ptr &() // cast
 {
   return this->ptr_;
 }
 
-ACE_INLINE IR::InterfaceDef_ptr &
-IR::InterfaceDef_out::ptr (void) // ptr
+ACE_INLINE IR_InterfaceDef_ptr &
+IR_InterfaceDef_out::ptr (void) // ptr
 {
   return this->ptr_;
 }
 
-ACE_INLINE IR::InterfaceDef_ptr 
-IR::InterfaceDef_out::operator-> (void)
+ACE_INLINE IR_InterfaceDef_ptr 
+IR_InterfaceDef_out::operator-> (void)
 {
   return this->ptr_;
 }
 
-
-#endif /* end #if !defined */
-
-
-#if !defined (_IR_EXCEPTIONDEF___CI_)
-#define _IR_EXCEPTIONDEF___CI_
-
 ACE_INLINE
-IR::ExceptionDef::ExceptionDef (
+IR_ExceptionDef::IR_ExceptionDef (
     TAO_Stub *objref,
     CORBA::Boolean _tao_collocated,
     TAO_Abstract_ServantBase *servant
@@ -2482,185 +2227,164 @@
   this->IR_ExceptionDef_setup_collocation (_tao_collocated);
 }
 
-
-#endif /* end #if !defined */
-
-
-#if !defined (_IR_EXCEPTIONDEF___VAR_CI_)
-#define _IR_EXCEPTIONDEF___VAR_CI_
-
 // *************************************************************
-// Inline operations for class IR::ExceptionDef_var
+// Inline operations for class IR_ExceptionDef_var
 // *************************************************************
 
 ACE_INLINE
-IR::ExceptionDef_var::ExceptionDef_var (void) // default constructor
-  : ptr_ (IR::ExceptionDef::_nil ())
+IR_ExceptionDef_var::IR_ExceptionDef_var (void) // default constructor
+  : ptr_ (IR_ExceptionDef::_nil ())
 {}
 
-ACE_INLINE IR::ExceptionDef_ptr 
-IR::ExceptionDef_var::ptr (void) const
+ACE_INLINE IR_ExceptionDef_ptr 
+IR_ExceptionDef_var::ptr (void) const
 {
   return this->ptr_;
 }
 
 ACE_INLINE
-IR::ExceptionDef_var::ExceptionDef_var (const IR::ExceptionDef_var &p) // copy constructor
+IR_ExceptionDef_var::IR_ExceptionDef_var (const IR_ExceptionDef_var &p) // copy constructor
   : TAO_Base_var (),
-    ptr_ (ExceptionDef::_duplicate (p.ptr ()))
+    ptr_ (IR_ExceptionDef::_duplicate (p.ptr ()))
 {}
 
 ACE_INLINE
-IR::ExceptionDef_var::~ExceptionDef_var (void) // destructor
+IR_ExceptionDef_var::~IR_ExceptionDef_var (void) // destructor
 {
   CORBA::release (this->ptr_);
 }
 
-ACE_INLINE IR::ExceptionDef_var &
-IR::ExceptionDef_var::operator= (IR::ExceptionDef_ptr p)
+ACE_INLINE IR_ExceptionDef_var &
+IR_ExceptionDef_var::operator= (IR_ExceptionDef_ptr p)
 {
   CORBA::release (this->ptr_);
   this->ptr_ = p;
   return *this;
 }
 
-ACE_INLINE IR::ExceptionDef_var &
-IR::ExceptionDef_var::operator= (const IR::ExceptionDef_var &p)
+ACE_INLINE IR_ExceptionDef_var &
+IR_ExceptionDef_var::operator= (const IR_ExceptionDef_var &p)
 {
   if (this != &p)
   {
     CORBA::release (this->ptr_);
-    this->ptr_ = IR::ExceptionDef::_duplicate (p.ptr ());
+    this->ptr_ = IR_ExceptionDef::_duplicate (p.ptr ());
   }
   return *this;
 }
 
 ACE_INLINE 
-IR::ExceptionDef_var::operator const IR::ExceptionDef_ptr &() const // cast
+IR_ExceptionDef_var::operator const IR_ExceptionDef_ptr &() const // cast
 {
   return this->ptr_;
 }
 
 ACE_INLINE 
-IR::ExceptionDef_var::operator IR::ExceptionDef_ptr &() // cast 
+IR_ExceptionDef_var::operator IR_ExceptionDef_ptr &() // cast 
 {
   return this->ptr_;
 }
 
-ACE_INLINE IR::ExceptionDef_ptr 
-IR::ExceptionDef_var::operator-> (void) const
+ACE_INLINE IR_ExceptionDef_ptr 
+IR_ExceptionDef_var::operator-> (void) const
 {
   return this->ptr_;
 }
 
-ACE_INLINE IR::ExceptionDef_ptr
-IR::ExceptionDef_var::in (void) const
+ACE_INLINE IR_ExceptionDef_ptr
+IR_ExceptionDef_var::in (void) const
 {
   return this->ptr_;
 }
 
-ACE_INLINE IR::ExceptionDef_ptr &
-IR::ExceptionDef_var::inout (void)
+ACE_INLINE IR_ExceptionDef_ptr &
+IR_ExceptionDef_var::inout (void)
 {
   return this->ptr_;
 }
 
-ACE_INLINE IR::ExceptionDef_ptr &
-IR::ExceptionDef_var::out (void)
+ACE_INLINE IR_ExceptionDef_ptr &
+IR_ExceptionDef_var::out (void)
 {
   CORBA::release (this->ptr_);
-  this->ptr_ = IR::ExceptionDef::_nil ();
+  this->ptr_ = IR_ExceptionDef::_nil ();
   return this->ptr_;
 }
 
-ACE_INLINE IR::ExceptionDef_ptr 
-IR::ExceptionDef_var::_retn (void)
+ACE_INLINE IR_ExceptionDef_ptr 
+IR_ExceptionDef_var::_retn (void)
 {
   // yield ownership of managed obj reference
-  IR::ExceptionDef_ptr val = this->ptr_;
-  this->ptr_ = IR::ExceptionDef::_nil ();
+  IR_ExceptionDef_ptr val = this->ptr_;
+  this->ptr_ = IR_ExceptionDef::_nil ();
   return val;
 }
 
-
-#endif /* end #if !defined */
-
-
-#if !defined (_IR_EXCEPTIONDEF___OUT_CI_)
-#define _IR_EXCEPTIONDEF___OUT_CI_
-
 // *************************************************************
-// Inline operations for class IR::ExceptionDef_out
+// Inline operations for class IR_ExceptionDef_out
 // *************************************************************
 
 ACE_INLINE
-IR::ExceptionDef_out::ExceptionDef_out (IR::ExceptionDef_ptr &p)
+IR_ExceptionDef_out::IR_ExceptionDef_out (IR_ExceptionDef_ptr &p)
   : ptr_ (p)
 {
-  this->ptr_ = IR::ExceptionDef::_nil ();
+  this->ptr_ = IR_ExceptionDef::_nil ();
 }
 
 ACE_INLINE
-IR::ExceptionDef_out::ExceptionDef_out (IR::ExceptionDef_var &p) // constructor from _var
+IR_ExceptionDef_out::IR_ExceptionDef_out (IR_ExceptionDef_var &p) // constructor from _var
   : ptr_ (p.out ())
 {
   CORBA::release (this->ptr_);
-  this->ptr_ = IR::ExceptionDef::_nil ();
+  this->ptr_ = IR_ExceptionDef::_nil ();
 }
 
 ACE_INLINE
-IR::ExceptionDef_out::ExceptionDef_out (const IR::ExceptionDef_out &p) // copy constructor
-  : ptr_ (ACE_const_cast (IR::ExceptionDef_out&,p).ptr_)
+IR_ExceptionDef_out::IR_ExceptionDef_out (const IR_ExceptionDef_out &p) // copy constructor
+  : ptr_ (ACE_const_cast (IR_ExceptionDef_out&,p).ptr_)
 {}
 
-ACE_INLINE IR::ExceptionDef_out &
-IR::ExceptionDef_out::operator= (const IR::ExceptionDef_out &p)
+ACE_INLINE IR_ExceptionDef_out &
+IR_ExceptionDef_out::operator= (const IR_ExceptionDef_out &p)
 {
-  this->ptr_ = ACE_const_cast (IR::ExceptionDef_out&,p).ptr_;
+  this->ptr_ = ACE_const_cast (IR_ExceptionDef_out&,p).ptr_;
   return *this;
 }
 
-ACE_INLINE IR::ExceptionDef_out &
-IR::ExceptionDef_out::operator= (const IR::ExceptionDef_var &p)
+ACE_INLINE IR_ExceptionDef_out &
+IR_ExceptionDef_out::operator= (const IR_ExceptionDef_var &p)
 {
-  this->ptr_ = IR::ExceptionDef::_duplicate (p.ptr ());
+  this->ptr_ = IR_ExceptionDef::_duplicate (p.ptr ());
   return *this;
 }
 
-ACE_INLINE IR::ExceptionDef_out &
-IR::ExceptionDef_out::operator= (IR::ExceptionDef_ptr p)
+ACE_INLINE IR_ExceptionDef_out &
+IR_ExceptionDef_out::operator= (IR_ExceptionDef_ptr p)
 {
   this->ptr_ = p;
   return *this;
 }
 
 ACE_INLINE 
-IR::ExceptionDef_out::operator IR::ExceptionDef_ptr &() // cast
+IR_ExceptionDef_out::operator IR_ExceptionDef_ptr &() // cast
 {
   return this->ptr_;
 }
 
-ACE_INLINE IR::ExceptionDef_ptr &
-IR::ExceptionDef_out::ptr (void) // ptr
+ACE_INLINE IR_ExceptionDef_ptr &
+IR_ExceptionDef_out::ptr (void) // ptr
 {
   return this->ptr_;
 }
 
-ACE_INLINE IR::ExceptionDef_ptr 
-IR::ExceptionDef_out::operator-> (void)
+ACE_INLINE IR_ExceptionDef_ptr 
+IR_ExceptionDef_out::operator-> (void)
 {
   return this->ptr_;
 }
 
-
-#endif /* end #if !defined */
-
-
-#if !defined (_IR_NATIVEDEF___CI_)
-#define _IR_NATIVEDEF___CI_
-
 ACE_INLINE
-IR::NativeDef::NativeDef (
+IR_NativeDef::IR_NativeDef (
     TAO_Stub *objref,
     CORBA::Boolean _tao_collocated,
     TAO_Abstract_ServantBase *servant
@@ -2670,200 +2394,179 @@
   this->IR_NativeDef_setup_collocation (_tao_collocated);
 }
 
-
-#endif /* end #if !defined */
-
-
-#if !defined (_IR_NATIVEDEF___VAR_CI_)
-#define _IR_NATIVEDEF___VAR_CI_
-
 // *************************************************************
-// Inline operations for class IR::NativeDef_var
+// Inline operations for class IR_NativeDef_var
 // *************************************************************
 
 ACE_INLINE
-IR::NativeDef_var::NativeDef_var (void) // default constructor
-  : ptr_ (IR::NativeDef::_nil ())
+IR_NativeDef_var::IR_NativeDef_var (void) // default constructor
+  : ptr_ (IR_NativeDef::_nil ())
 {}
 
-ACE_INLINE IR::NativeDef_ptr 
-IR::NativeDef_var::ptr (void) const
+ACE_INLINE IR_NativeDef_ptr 
+IR_NativeDef_var::ptr (void) const
 {
   return this->ptr_;
 }
 
 ACE_INLINE
-IR::NativeDef_var::NativeDef_var (const IR::NativeDef_var &p) // copy constructor
+IR_NativeDef_var::IR_NativeDef_var (const IR_NativeDef_var &p) // copy constructor
   : TAO_Base_var (),
-    ptr_ (NativeDef::_duplicate (p.ptr ()))
+    ptr_ (IR_NativeDef::_duplicate (p.ptr ()))
 {}
 
 ACE_INLINE
-IR::NativeDef_var::~NativeDef_var (void) // destructor
+IR_NativeDef_var::~IR_NativeDef_var (void) // destructor
 {
   CORBA::release (this->ptr_);
 }
 
-ACE_INLINE IR::NativeDef_var &
-IR::NativeDef_var::operator= (IR::NativeDef_ptr p)
+ACE_INLINE IR_NativeDef_var &
+IR_NativeDef_var::operator= (IR_NativeDef_ptr p)
 {
   CORBA::release (this->ptr_);
   this->ptr_ = p;
   return *this;
 }
 
-ACE_INLINE IR::NativeDef_var &
-IR::NativeDef_var::operator= (const IR::NativeDef_var &p)
+ACE_INLINE IR_NativeDef_var &
+IR_NativeDef_var::operator= (const IR_NativeDef_var &p)
 {
   if (this != &p)
   {
     CORBA::release (this->ptr_);
-    this->ptr_ = IR::NativeDef::_duplicate (p.ptr ());
+    this->ptr_ = IR_NativeDef::_duplicate (p.ptr ());
   }
   return *this;
 }
 
 ACE_INLINE 
-IR::NativeDef_var::operator const IR::NativeDef_ptr &() const // cast
+IR_NativeDef_var::operator const IR_NativeDef_ptr &() const // cast
 {
   return this->ptr_;
 }
 
 ACE_INLINE 
-IR::NativeDef_var::operator IR::NativeDef_ptr &() // cast 
+IR_NativeDef_var::operator IR_NativeDef_ptr &() // cast 
 {
   return this->ptr_;
 }
 
-ACE_INLINE IR::NativeDef_ptr 
-IR::NativeDef_var::operator-> (void) const
+ACE_INLINE IR_NativeDef_ptr 
+IR_NativeDef_var::operator-> (void) const
 {
   return this->ptr_;
 }
 
-ACE_INLINE IR::NativeDef_ptr
-IR::NativeDef_var::in (void) const
+ACE_INLINE IR_NativeDef_ptr
+IR_NativeDef_var::in (void) const
 {
   return this->ptr_;
 }
 
-ACE_INLINE IR::NativeDef_ptr &
-IR::NativeDef_var::inout (void)
+ACE_INLINE IR_NativeDef_ptr &
+IR_NativeDef_var::inout (void)
 {
   return this->ptr_;
 }
 
-ACE_INLINE IR::NativeDef_ptr &
-IR::NativeDef_var::out (void)
+ACE_INLINE IR_NativeDef_ptr &
+IR_NativeDef_var::out (void)
 {
   CORBA::release (this->ptr_);
-  this->ptr_ = IR::NativeDef::_nil ();
+  this->ptr_ = IR_NativeDef::_nil ();
   return this->ptr_;
 }
 
-ACE_INLINE IR::NativeDef_ptr 
-IR::NativeDef_var::_retn (void)
+ACE_INLINE IR_NativeDef_ptr 
+IR_NativeDef_var::_retn (void)
 {
   // yield ownership of managed obj reference
-  IR::NativeDef_ptr val = this->ptr_;
-  this->ptr_ = IR::NativeDef::_nil ();
+  IR_NativeDef_ptr val = this->ptr_;
+  this->ptr_ = IR_NativeDef::_nil ();
   return val;
 }
 
-
-#endif /* end #if !defined */
-
-
-#if !defined (_IR_NATIVEDEF___OUT_CI_)
-#define _IR_NATIVEDEF___OUT_CI_
-
 // *************************************************************
-// Inline operations for class IR::NativeDef_out
+// Inline operations for class IR_NativeDef_out
 // *************************************************************
 
 ACE_INLINE
-IR::NativeDef_out::NativeDef_out (IR::NativeDef_ptr &p)
+IR_NativeDef_out::IR_NativeDef_out (IR_NativeDef_ptr &p)
   : ptr_ (p)
 {
-  this->ptr_ = IR::NativeDef::_nil ();
+  this->ptr_ = IR_NativeDef::_nil ();
 }
 
 ACE_INLINE
-IR::NativeDef_out::NativeDef_out (IR::NativeDef_var &p) // constructor from _var
+IR_NativeDef_out::IR_NativeDef_out (IR_NativeDef_var &p) // constructor from _var
   : ptr_ (p.out ())
 {
   CORBA::release (this->ptr_);
-  this->ptr_ = IR::NativeDef::_nil ();
+  this->ptr_ = IR_NativeDef::_nil ();
 }
 
 ACE_INLINE
-IR::NativeDef_out::NativeDef_out (const IR::NativeDef_out &p) // copy constructor
-  : ptr_ (ACE_const_cast (IR::NativeDef_out&,p).ptr_)
+IR_NativeDef_out::IR_NativeDef_out (const IR_NativeDef_out &p) // copy constructor
+  : ptr_ (ACE_const_cast (IR_NativeDef_out&,p).ptr_)
 {}
 
-ACE_INLINE IR::NativeDef_out &
-IR::NativeDef_out::operator= (const IR::NativeDef_out &p)
+ACE_INLINE IR_NativeDef_out &
+IR_NativeDef_out::operator= (const IR_NativeDef_out &p)
 {
-  this->ptr_ = ACE_const_cast (IR::NativeDef_out&,p).ptr_;
+  this->ptr_ = ACE_const_cast (IR_NativeDef_out&,p).ptr_;
   return *this;
 }
 
-ACE_INLINE IR::NativeDef_out &
-IR::NativeDef_out::operator= (const IR::NativeDef_var &p)
+ACE_INLINE IR_NativeDef_out &
+IR_NativeDef_out::operator= (const IR_NativeDef_var &p)
 {
-  this->ptr_ = IR::NativeDef::_duplicate (p.ptr ());
+  this->ptr_ = IR_NativeDef::_duplicate (p.ptr ());
   return *this;
 }
 
-ACE_INLINE IR::NativeDef_out &
-IR::NativeDef_out::operator= (IR::NativeDef_ptr p)
+ACE_INLINE IR_NativeDef_out &
+IR_NativeDef_out::operator= (IR_NativeDef_ptr p)
 {
   this->ptr_ = p;
   return *this;
 }
 
 ACE_INLINE 
-IR::NativeDef_out::operator IR::NativeDef_ptr &() // cast
+IR_NativeDef_out::operator IR_NativeDef_ptr &() // cast
 {
   return this->ptr_;
 }
 
-ACE_INLINE IR::NativeDef_ptr &
-IR::NativeDef_out::ptr (void) // ptr
+ACE_INLINE IR_NativeDef_ptr &
+IR_NativeDef_out::ptr (void) // ptr
 {
   return this->ptr_;
 }
 
-ACE_INLINE IR::NativeDef_ptr 
-IR::NativeDef_out::operator-> (void)
+ACE_INLINE IR_NativeDef_ptr 
+IR_NativeDef_out::operator-> (void)
 {
   return this->ptr_;
 }
 
-
-#endif /* end #if !defined */
-
-
 #if !defined (TAO_USE_SEQUENCE_TEMPLATES)
   
-#if !defined (__TAO_UNBOUNDED_OBJECT_SEQUENCE_IR_INTERFACEDEFSEQ_CI_)
-#define __TAO_UNBOUNDED_OBJECT_SEQUENCE_IR_INTERFACEDEFSEQ_CI_
-
-  ACE_INLINE IR::InterfaceDef **
-  IR::_TAO_Unbounded_Object_Sequence_IR_InterfaceDefSeq::allocbuf (CORBA::ULong nelems)
+  ACE_INLINE IR_InterfaceDef **
+  _TAO_Unbounded_Object_Sequence_IR_InterfaceDefSeq::allocbuf (CORBA::ULong nelems)
   {
-    IR::InterfaceDef **buf = 0;
+    IR_InterfaceDef **buf = 0;
     
-    ACE_NEW_RETURN (buf, IR::InterfaceDef*[nelems], 0);
+    ACE_NEW_RETURN (buf, IR_InterfaceDef*[nelems], 0);
     
     for (CORBA::ULong i = 0; i < nelems; i++)
-      buf[i] = IR::InterfaceDef::_nil ();
+      buf[i] = IR_InterfaceDef::_nil ();
     
     return buf;
   }
   
   ACE_INLINE void 
-  IR::_TAO_Unbounded_Object_Sequence_IR_InterfaceDefSeq::freebuf (IR::InterfaceDef **buffer)
+  _TAO_Unbounded_Object_Sequence_IR_InterfaceDefSeq::freebuf (IR_InterfaceDef **buffer)
   {
     if (buffer == 0)
       return;
@@ -2871,36 +2574,36 @@
   }
   
   ACE_INLINE
-  IR::_TAO_Unbounded_Object_Sequence_IR_InterfaceDefSeq::_TAO_Unbounded_Object_Sequence_IR_InterfaceDefSeq (void)
+  _TAO_Unbounded_Object_Sequence_IR_InterfaceDefSeq::_TAO_Unbounded_Object_Sequence_IR_InterfaceDefSeq (void)
   {
   }
   
   ACE_INLINE
-  IR::_TAO_Unbounded_Object_Sequence_IR_InterfaceDefSeq::_TAO_Unbounded_Object_Sequence_IR_InterfaceDefSeq (CORBA::ULong maximum)
+  _TAO_Unbounded_Object_Sequence_IR_InterfaceDefSeq::_TAO_Unbounded_Object_Sequence_IR_InterfaceDefSeq (CORBA::ULong maximum)
     : TAO_Unbounded_Base_Sequence (maximum, _TAO_Unbounded_Object_Sequence_IR_InterfaceDefSeq::allocbuf (maximum))
   {
   }
   
   ACE_INLINE
-  IR::_TAO_Unbounded_Object_Sequence_IR_InterfaceDefSeq::_TAO_Unbounded_Object_Sequence_IR_InterfaceDefSeq (CORBA::ULong maximum,
+  _TAO_Unbounded_Object_Sequence_IR_InterfaceDefSeq::_TAO_Unbounded_Object_Sequence_IR_InterfaceDefSeq (CORBA::ULong maximum,
     CORBA::ULong length,
-    IR::InterfaceDef* *value,
+    IR_InterfaceDef* *value,
     CORBA::Boolean release)
   : TAO_Unbounded_Base_Sequence (maximum, length, value, release)
   {
   }
   
   ACE_INLINE
-  IR::_TAO_Unbounded_Object_Sequence_IR_InterfaceDefSeq::_TAO_Unbounded_Object_Sequence_IR_InterfaceDefSeq(const _TAO_Unbounded_Object_Sequence_IR_InterfaceDefSeq &rhs)
+  _TAO_Unbounded_Object_Sequence_IR_InterfaceDefSeq::_TAO_Unbounded_Object_Sequence_IR_InterfaceDefSeq(const _TAO_Unbounded_Object_Sequence_IR_InterfaceDefSeq &rhs)
     : TAO_Unbounded_Base_Sequence (rhs)
   {
     if (rhs.buffer_ != 0)
     {
-      IR::InterfaceDef **tmp1 = _TAO_Unbounded_Object_Sequence_IR_InterfaceDefSeq::allocbuf (this->maximum_);
-      IR::InterfaceDef ** const tmp2 = ACE_reinterpret_cast (IR::InterfaceDef ** ACE_CAST_CONST, rhs.buffer_);
+      IR_InterfaceDef **tmp1 = _TAO_Unbounded_Object_Sequence_IR_InterfaceDefSeq::allocbuf (this->maximum_);
+      IR_InterfaceDef ** const tmp2 = ACE_reinterpret_cast (IR_InterfaceDef ** ACE_CAST_CONST, rhs.buffer_);
       
       for (CORBA::ULong i = 0; i < rhs.length_; ++i)
-        tmp1[i] = IR::InterfaceDef::_duplicate (tmp2[i]);
+        tmp1[i] = IR_InterfaceDef::_duplicate (tmp2[i]);
       
       this->buffer_ = tmp1;
     }
@@ -2910,20 +2613,20 @@
     }
   }
   
-  ACE_INLINE IR::_TAO_Unbounded_Object_Sequence_IR_InterfaceDefSeq &
-  IR::_TAO_Unbounded_Object_Sequence_IR_InterfaceDefSeq::operator= (const _TAO_Unbounded_Object_Sequence_IR_InterfaceDefSeq &rhs)
+  ACE_INLINE _TAO_Unbounded_Object_Sequence_IR_InterfaceDefSeq &
+  _TAO_Unbounded_Object_Sequence_IR_InterfaceDefSeq::operator= (const _TAO_Unbounded_Object_Sequence_IR_InterfaceDefSeq &rhs)
   {
     if (this == &rhs)
       return *this;
     
     if (this->release_)
     {
-      IR::InterfaceDef **tmp = ACE_reinterpret_cast (IR::InterfaceDef **, this->buffer_);
+      IR_InterfaceDef **tmp = ACE_reinterpret_cast (IR_InterfaceDef **, this->buffer_);
       
       for (CORBA::ULong i = 0; i < this->length_; ++i)
       {
         CORBA::release (tmp[i]);
-        tmp[i] = IR::InterfaceDef::_nil ();
+        tmp[i] = IR_InterfaceDef::_nil ();
       }
       if (this->maximum_ < rhs.maximum_)
       {
@@ -2936,28 +2639,28 @@
     
     TAO_Unbounded_Base_Sequence::operator= (rhs);
     
-    IR::InterfaceDef **tmp1 = ACE_reinterpret_cast (IR::InterfaceDef **, this->buffer_);
-    IR::InterfaceDef ** const tmp2 = ACE_reinterpret_cast (IR::InterfaceDef ** ACE_CAST_CONST, rhs.buffer_);
+    IR_InterfaceDef **tmp1 = ACE_reinterpret_cast (IR_InterfaceDef **, this->buffer_);
+    IR_InterfaceDef ** const tmp2 = ACE_reinterpret_cast (IR_InterfaceDef ** ACE_CAST_CONST, rhs.buffer_);
     
     for (CORBA::ULong i = 0; i < rhs.length_; ++i)
-      tmp1[i] = IR::InterfaceDef::_duplicate (tmp2[i]);
+      tmp1[i] = IR_InterfaceDef::_duplicate (tmp2[i]);
     
     return *this;
   }
   
-  ACE_INLINE TAO_Object_Manager<IR::InterfaceDef,IR::InterfaceDef_var>
-  IR::_TAO_Unbounded_Object_Sequence_IR_InterfaceDefSeq::operator[] (CORBA::ULong index) const
+  ACE_INLINE TAO_Object_Manager<IR_InterfaceDef,IR_InterfaceDef_var>
+  _TAO_Unbounded_Object_Sequence_IR_InterfaceDefSeq::operator[] (CORBA::ULong index) const
   // read-write accessor
   {
     ACE_ASSERT (index < this->maximum_);
-    IR::InterfaceDef ** const tmp = ACE_reinterpret_cast (IR::InterfaceDef ** ACE_CAST_CONST, this->buffer_);
-    return TAO_Object_Manager<IR::InterfaceDef,IR::InterfaceDef_var> (tmp + index, this->release_);
+    IR_InterfaceDef ** const tmp = ACE_reinterpret_cast (IR_InterfaceDef ** ACE_CAST_CONST, this->buffer_);
+    return TAO_Object_Manager<IR_InterfaceDef,IR_InterfaceDef_var> (tmp + index, this->release_);
   }
   
-  ACE_INLINE IR::InterfaceDef* *
-  IR::_TAO_Unbounded_Object_Sequence_IR_InterfaceDefSeq::get_buffer (CORBA::Boolean orphan)
+  ACE_INLINE IR_InterfaceDef* *
+  _TAO_Unbounded_Object_Sequence_IR_InterfaceDefSeq::get_buffer (CORBA::Boolean orphan)
   {
-    IR::InterfaceDef **result = 0;
+    IR_InterfaceDef **result = 0;
     if (orphan == 0)
     {
       // We retain ownership.
@@ -2969,7 +2672,7 @@
       }
       else
       {
-        result = ACE_reinterpret_cast (IR::InterfaceDef**, this->buffer_);
+        result = ACE_reinterpret_cast (IR_InterfaceDef**, this->buffer_);
       }
     }
     else // if (orphan == 1)
@@ -2978,7 +2681,7 @@
       {
         // We set the state back to default and relinquish
         // ownership.
-        result = ACE_reinterpret_cast(IR::InterfaceDef**,this->buffer_);
+        result = ACE_reinterpret_cast(IR_InterfaceDef**,this->buffer_);
         this->maximum_ = 0;
         this->length_ = 0;
         this->buffer_ = 0;
@@ -2988,60 +2691,53 @@
     return result;
   }
   
-  ACE_INLINE const IR::InterfaceDef* *
-  IR::_TAO_Unbounded_Object_Sequence_IR_InterfaceDefSeq::get_buffer (void) const
+  ACE_INLINE const IR_InterfaceDef* *
+  _TAO_Unbounded_Object_Sequence_IR_InterfaceDefSeq::get_buffer (void) const
   {
-    return ACE_reinterpret_cast(const IR::InterfaceDef ** ACE_CAST_CONST, this->buffer_);
+    return ACE_reinterpret_cast(const IR_InterfaceDef ** ACE_CAST_CONST, this->buffer_);
   }
   
-  
-#endif /* end #if !defined */
-
-
 #endif /* !TAO_USE_SEQUENCE_TEMPLATES */ 
 
-#if !defined (_IR_INTERFACEDEFSEQ_CI_)
-#define _IR_INTERFACEDEFSEQ_CI_
-
 // *************************************************************
-// Inline operations for class IR::InterfaceDefSeq_var
+// Inline operations for class IR_InterfaceDefSeq_var
 // *************************************************************
 
 ACE_INLINE
-IR::InterfaceDefSeq_var::InterfaceDefSeq_var (void) // default constructor
+IR_InterfaceDefSeq_var::IR_InterfaceDefSeq_var (void) // default constructor
   : ptr_ (0)
 {}
 
 ACE_INLINE
-IR::InterfaceDefSeq_var::InterfaceDefSeq_var (InterfaceDefSeq *p)
+IR_InterfaceDefSeq_var::IR_InterfaceDefSeq_var (IR_InterfaceDefSeq *p)
   : ptr_ (p)
 {}
 
 ACE_INLINE
-IR::InterfaceDefSeq_var::InterfaceDefSeq_var (const ::IR::InterfaceDefSeq_var &p) // copy constructor
+IR_InterfaceDefSeq_var::IR_InterfaceDefSeq_var (const ::IR_InterfaceDefSeq_var &p) // copy constructor
 {
   if (p.ptr_)
-    ACE_NEW (this->ptr_, ::IR::InterfaceDefSeq (*p.ptr_));
+    ACE_NEW (this->ptr_, ::IR_InterfaceDefSeq (*p.ptr_));
   else
     this->ptr_ = 0;
 }
 
 ACE_INLINE
-IR::InterfaceDefSeq_var::~InterfaceDefSeq_var (void) // destructor
+IR_InterfaceDefSeq_var::~IR_InterfaceDefSeq_var (void) // destructor
 {
   delete this->ptr_;
 }
 
-ACE_INLINE IR::InterfaceDefSeq_var &
-IR::InterfaceDefSeq_var::operator= (InterfaceDefSeq *p)
+ACE_INLINE IR_InterfaceDefSeq_var &
+IR_InterfaceDefSeq_var::operator= (IR_InterfaceDefSeq *p)
 {
   delete this->ptr_;
   this->ptr_ = p;
   return *this;
 }
 
-ACE_INLINE ::IR::InterfaceDefSeq_var &
-IR::InterfaceDefSeq_var::operator= (const ::IR::InterfaceDefSeq_var &p)
+ACE_INLINE IR_InterfaceDefSeq_var &
+IR_InterfaceDefSeq_var::operator= (const ::IR_InterfaceDefSeq_var &p) // deep copy
 {
   if (this != &p)
     {
@@ -3052,12 +2748,12 @@
         }
       else
         {
-          InterfaceDefSeq *deep_copy =
-            new InterfaceDefSeq (*p.ptr_);
+          IR_InterfaceDefSeq *deep_copy = 
+            new IR_InterfaceDefSeq (*p.ptr_);
           
           if (deep_copy != 0)
             {
-              InterfaceDefSeq *tmp = deep_copy;
+              IR_InterfaceDefSeq *tmp = deep_copy;
               deep_copy = this->ptr_;
               this->ptr_ = tmp;
               delete deep_copy;
@@ -3068,97 +2764,97 @@
   return *this;
 }
 
-ACE_INLINE const ::IR::InterfaceDefSeq *
-IR::InterfaceDefSeq_var::operator-> (void) const
+ACE_INLINE const ::IR_InterfaceDefSeq *
+IR_InterfaceDefSeq_var::operator-> (void) const
 {
   return this->ptr_;
 }
 
-ACE_INLINE ::IR::InterfaceDefSeq *
-IR::InterfaceDefSeq_var::operator-> (void)
+ACE_INLINE ::IR_InterfaceDefSeq *
+IR_InterfaceDefSeq_var::operator-> (void)
 {
   return this->ptr_;
 }
 
 ACE_INLINE 
-IR::InterfaceDefSeq_var::operator const ::IR::InterfaceDefSeq &() const // cast
+IR_InterfaceDefSeq_var::operator const ::IR_InterfaceDefSeq &() const // cast
 {
   return *this->ptr_;
 }
 
 ACE_INLINE 
-IR::InterfaceDefSeq_var::operator ::IR::InterfaceDefSeq &() // cast 
+IR_InterfaceDefSeq_var::operator ::IR_InterfaceDefSeq &() // cast 
 {
   return *this->ptr_;
 }
 
 ACE_INLINE 
-IR::InterfaceDefSeq_var::operator ::IR::InterfaceDefSeq &() const // cast 
+IR_InterfaceDefSeq_var::operator ::IR_InterfaceDefSeq &() const // cast 
 {
   return *this->ptr_;
 }
 
 // variable-size types only
 ACE_INLINE
-IR::InterfaceDefSeq_var::operator ::IR::InterfaceDefSeq *&() // cast 
+IR_InterfaceDefSeq_var::operator ::IR_InterfaceDefSeq *&() // cast 
 {
   return this->ptr_;
 }
 
-ACE_INLINE TAO_Object_Manager<IR::InterfaceDef, IR::InterfaceDef_var>
-IR::InterfaceDefSeq_var::operator[] (CORBA::ULong index)
+ACE_INLINE TAO_Object_Manager<IR_InterfaceDef, IR_InterfaceDef_var>
+IR_InterfaceDefSeq_var::operator[] (CORBA::ULong index)
 {
   return this->ptr_->operator[] (index);
 }
 
-ACE_INLINE const ::IR::InterfaceDefSeq &
-IR::InterfaceDefSeq_var::in (void) const
+ACE_INLINE const ::IR_InterfaceDefSeq &
+IR_InterfaceDefSeq_var::in (void) const
 {
   return *this->ptr_;
 }
 
-ACE_INLINE ::IR::InterfaceDefSeq &
-IR::InterfaceDefSeq_var::inout (void)
+ACE_INLINE ::IR_InterfaceDefSeq &
+IR_InterfaceDefSeq_var::inout (void)
 {
   return *this->ptr_;
 }
 
 // mapping for variable size 
-ACE_INLINE ::IR::InterfaceDefSeq *&
-IR::InterfaceDefSeq_var::out (void)
+ACE_INLINE ::IR_InterfaceDefSeq *&
+IR_InterfaceDefSeq_var::out (void)
 {
   delete this->ptr_;
   this->ptr_ = 0;
   return this->ptr_;
 }
 
-ACE_INLINE ::IR::InterfaceDefSeq *
-IR::InterfaceDefSeq_var::_retn (void)
+ACE_INLINE ::IR_InterfaceDefSeq *
+IR_InterfaceDefSeq_var::_retn (void)
 {
-  ::IR::InterfaceDefSeq *tmp = this->ptr_;
+  ::IR_InterfaceDefSeq *tmp = this->ptr_;
   this->ptr_ = 0;
   return tmp;
 }
 
-ACE_INLINE ::IR::InterfaceDefSeq *
-IR::InterfaceDefSeq_var::ptr (void) const
+ACE_INLINE ::IR_InterfaceDefSeq *
+IR_InterfaceDefSeq_var::ptr (void) const
 {
   return this->ptr_;
 }
 
 // *************************************************************
-// Inline operations for class IR::InterfaceDefSeq_out
+// Inline operations for class IR_InterfaceDefSeq_out
 // *************************************************************
 
 ACE_INLINE
-IR::InterfaceDefSeq_out::InterfaceDefSeq_out (InterfaceDefSeq *&p)
+IR_InterfaceDefSeq_out::IR_InterfaceDefSeq_out (IR_InterfaceDefSeq *&p)
   : ptr_ (p)
 {
   this->ptr_ = 0;
 }
 
 ACE_INLINE
-IR::InterfaceDefSeq_out::InterfaceDefSeq_out (InterfaceDefSeq_var &p) // constructor from _var
+IR_InterfaceDefSeq_out::IR_InterfaceDefSeq_out (IR_InterfaceDefSeq_var &p) // constructor from _var
   : ptr_ (p.out ())
 {
   delete this->ptr_;
@@ -3166,57 +2862,50 @@
 }
 
 ACE_INLINE
-IR::InterfaceDefSeq_out::InterfaceDefSeq_out (const ::IR::InterfaceDefSeq_out &p) // copy constructor
-  : ptr_ (ACE_const_cast (InterfaceDefSeq_out&, p).ptr_)
+IR_InterfaceDefSeq_out::IR_InterfaceDefSeq_out (const ::IR_InterfaceDefSeq_out &p) // copy constructor
+  : ptr_ (ACE_const_cast (IR_InterfaceDefSeq_out&, p).ptr_)
 {}
 
-ACE_INLINE ::IR::InterfaceDefSeq_out &
-IR::InterfaceDefSeq_out::operator= (const ::IR::InterfaceDefSeq_out &p)
+ACE_INLINE ::IR_InterfaceDefSeq_out &
+IR_InterfaceDefSeq_out::operator= (const ::IR_InterfaceDefSeq_out &p)
 {
-  this->ptr_ = ACE_const_cast (InterfaceDefSeq_out&, p).ptr_;
+  this->ptr_ = ACE_const_cast (IR_InterfaceDefSeq_out&, p).ptr_;
   return *this;
 }
 
-ACE_INLINE ::IR::InterfaceDefSeq_out &
-IR::InterfaceDefSeq_out::operator= (InterfaceDefSeq *p)
+ACE_INLINE ::IR_InterfaceDefSeq_out &
+IR_InterfaceDefSeq_out::operator= (IR_InterfaceDefSeq *p)
 {
   this->ptr_ = p;
   return *this;
 }
 
 ACE_INLINE 
-IR::InterfaceDefSeq_out::operator ::IR::InterfaceDefSeq *&() // cast
+IR_InterfaceDefSeq_out::operator ::IR_InterfaceDefSeq *&() // cast
 {
   return this->ptr_;
 }
 
-ACE_INLINE ::IR::InterfaceDefSeq *&
-IR::InterfaceDefSeq_out::ptr (void) // ptr
+ACE_INLINE ::IR_InterfaceDefSeq *&
+IR_InterfaceDefSeq_out::ptr (void) // ptr
 {
   return this->ptr_;
 }
 
-ACE_INLINE ::IR::InterfaceDefSeq *
-IR::InterfaceDefSeq_out::operator-> (void)
+ACE_INLINE ::IR_InterfaceDefSeq *
+IR_InterfaceDefSeq_out::operator-> (void)
 {
   return this->ptr_;
 }
 
-ACE_INLINE TAO_Object_Manager<IR::InterfaceDef, IR::InterfaceDef_var>
-IR::InterfaceDefSeq_out::operator[] (CORBA::ULong index)
+ACE_INLINE TAO_Object_Manager<IR_InterfaceDef, IR_InterfaceDef_var>
+IR_InterfaceDefSeq_out::operator[] (CORBA::ULong index)
 {
   return this->ptr_->operator[] (index);
 }
 
-
-#endif /* end #if !defined */
-
-
-#if !defined (_IR_VALUEDEF___CI_)
-#define _IR_VALUEDEF___CI_
-
 ACE_INLINE
-IR::ValueDef::ValueDef (
+IR_ValueDef::IR_ValueDef (
     TAO_Stub *objref,
     CORBA::Boolean _tao_collocated,
     TAO_Abstract_ServantBase *servant
@@ -3226,200 +2915,179 @@
   this->IR_ValueDef_setup_collocation (_tao_collocated);
 }
 
-
-#endif /* end #if !defined */
-
-
-#if !defined (_IR_VALUEDEF___VAR_CI_)
-#define _IR_VALUEDEF___VAR_CI_
-
 // *************************************************************
-// Inline operations for class IR::ValueDef_var
+// Inline operations for class IR_ValueDef_var
 // *************************************************************
 
 ACE_INLINE
-IR::ValueDef_var::ValueDef_var (void) // default constructor
-  : ptr_ (IR::ValueDef::_nil ())
+IR_ValueDef_var::IR_ValueDef_var (void) // default constructor
+  : ptr_ (IR_ValueDef::_nil ())
 {}
 
-ACE_INLINE IR::ValueDef_ptr 
-IR::ValueDef_var::ptr (void) const
+ACE_INLINE IR_ValueDef_ptr 
+IR_ValueDef_var::ptr (void) const
 {
   return this->ptr_;
 }
 
 ACE_INLINE
-IR::ValueDef_var::ValueDef_var (const IR::ValueDef_var &p) // copy constructor
+IR_ValueDef_var::IR_ValueDef_var (const IR_ValueDef_var &p) // copy constructor
   : TAO_Base_var (),
-    ptr_ (ValueDef::_duplicate (p.ptr ()))
+    ptr_ (IR_ValueDef::_duplicate (p.ptr ()))
 {}
 
 ACE_INLINE
-IR::ValueDef_var::~ValueDef_var (void) // destructor
+IR_ValueDef_var::~IR_ValueDef_var (void) // destructor
 {
   CORBA::release (this->ptr_);
 }
 
-ACE_INLINE IR::ValueDef_var &
-IR::ValueDef_var::operator= (IR::ValueDef_ptr p)
+ACE_INLINE IR_ValueDef_var &
+IR_ValueDef_var::operator= (IR_ValueDef_ptr p)
 {
   CORBA::release (this->ptr_);
   this->ptr_ = p;
   return *this;
 }
 
-ACE_INLINE IR::ValueDef_var &
-IR::ValueDef_var::operator= (const IR::ValueDef_var &p)
+ACE_INLINE IR_ValueDef_var &
+IR_ValueDef_var::operator= (const IR_ValueDef_var &p)
 {
   if (this != &p)
   {
     CORBA::release (this->ptr_);
-    this->ptr_ = IR::ValueDef::_duplicate (p.ptr ());
+    this->ptr_ = IR_ValueDef::_duplicate (p.ptr ());
   }
   return *this;
 }
 
 ACE_INLINE 
-IR::ValueDef_var::operator const IR::ValueDef_ptr &() const // cast
+IR_ValueDef_var::operator const IR_ValueDef_ptr &() const // cast
 {
   return this->ptr_;
 }
 
 ACE_INLINE 
-IR::ValueDef_var::operator IR::ValueDef_ptr &() // cast 
+IR_ValueDef_var::operator IR_ValueDef_ptr &() // cast 
 {
   return this->ptr_;
 }
 
-ACE_INLINE IR::ValueDef_ptr 
-IR::ValueDef_var::operator-> (void) const
+ACE_INLINE IR_ValueDef_ptr 
+IR_ValueDef_var::operator-> (void) const
 {
   return this->ptr_;
 }
 
-ACE_INLINE IR::ValueDef_ptr
-IR::ValueDef_var::in (void) const
+ACE_INLINE IR_ValueDef_ptr
+IR_ValueDef_var::in (void) const
 {
   return this->ptr_;
 }
 
-ACE_INLINE IR::ValueDef_ptr &
-IR::ValueDef_var::inout (void)
+ACE_INLINE IR_ValueDef_ptr &
+IR_ValueDef_var::inout (void)
 {
   return this->ptr_;
 }
 
-ACE_INLINE IR::ValueDef_ptr &
-IR::ValueDef_var::out (void)
+ACE_INLINE IR_ValueDef_ptr &
+IR_ValueDef_var::out (void)
 {
   CORBA::release (this->ptr_);
-  this->ptr_ = IR::ValueDef::_nil ();
+  this->ptr_ = IR_ValueDef::_nil ();
   return this->ptr_;
 }
 
-ACE_INLINE IR::ValueDef_ptr 
-IR::ValueDef_var::_retn (void)
+ACE_INLINE IR_ValueDef_ptr 
+IR_ValueDef_var::_retn (void)
 {
   // yield ownership of managed obj reference
-  IR::ValueDef_ptr val = this->ptr_;
-  this->ptr_ = IR::ValueDef::_nil ();
+  IR_ValueDef_ptr val = this->ptr_;
+  this->ptr_ = IR_ValueDef::_nil ();
   return val;
 }
 
-
-#endif /* end #if !defined */
-
-
-#if !defined (_IR_VALUEDEF___OUT_CI_)
-#define _IR_VALUEDEF___OUT_CI_
-
 // *************************************************************
-// Inline operations for class IR::ValueDef_out
+// Inline operations for class IR_ValueDef_out
 // *************************************************************
 
 ACE_INLINE
-IR::ValueDef_out::ValueDef_out (IR::ValueDef_ptr &p)
+IR_ValueDef_out::IR_ValueDef_out (IR_ValueDef_ptr &p)
   : ptr_ (p)
 {
-  this->ptr_ = IR::ValueDef::_nil ();
+  this->ptr_ = IR_ValueDef::_nil ();
 }
 
 ACE_INLINE
-IR::ValueDef_out::ValueDef_out (IR::ValueDef_var &p) // constructor from _var
+IR_ValueDef_out::IR_ValueDef_out (IR_ValueDef_var &p) // constructor from _var
   : ptr_ (p.out ())
 {
   CORBA::release (this->ptr_);
-  this->ptr_ = IR::ValueDef::_nil ();
+  this->ptr_ = IR_ValueDef::_nil ();
 }
 
 ACE_INLINE
-IR::ValueDef_out::ValueDef_out (const IR::ValueDef_out &p) // copy constructor
-  : ptr_ (ACE_const_cast (IR::ValueDef_out&,p).ptr_)
+IR_ValueDef_out::IR_ValueDef_out (const IR_ValueDef_out &p) // copy constructor
+  : ptr_ (ACE_const_cast (IR_ValueDef_out&,p).ptr_)
 {}
 
-ACE_INLINE IR::ValueDef_out &
-IR::ValueDef_out::operator= (const IR::ValueDef_out &p)
+ACE_INLINE IR_ValueDef_out &
+IR_ValueDef_out::operator= (const IR_ValueDef_out &p)
 {
-  this->ptr_ = ACE_const_cast (IR::ValueDef_out&,p).ptr_;
+  this->ptr_ = ACE_const_cast (IR_ValueDef_out&,p).ptr_;
   return *this;
 }
 
-ACE_INLINE IR::ValueDef_out &
-IR::ValueDef_out::operator= (const IR::ValueDef_var &p)
+ACE_INLINE IR_ValueDef_out &
+IR_ValueDef_out::operator= (const IR_ValueDef_var &p)
 {
-  this->ptr_ = IR::ValueDef::_duplicate (p.ptr ());
+  this->ptr_ = IR_ValueDef::_duplicate (p.ptr ());
   return *this;
 }
 
-ACE_INLINE IR::ValueDef_out &
-IR::ValueDef_out::operator= (IR::ValueDef_ptr p)
+ACE_INLINE IR_ValueDef_out &
+IR_ValueDef_out::operator= (IR_ValueDef_ptr p)
 {
   this->ptr_ = p;
   return *this;
 }
 
 ACE_INLINE 
-IR::ValueDef_out::operator IR::ValueDef_ptr &() // cast
+IR_ValueDef_out::operator IR_ValueDef_ptr &() // cast
 {
   return this->ptr_;
 }
 
-ACE_INLINE IR::ValueDef_ptr &
-IR::ValueDef_out::ptr (void) // ptr
+ACE_INLINE IR_ValueDef_ptr &
+IR_ValueDef_out::ptr (void) // ptr
 {
   return this->ptr_;
 }
 
-ACE_INLINE IR::ValueDef_ptr 
-IR::ValueDef_out::operator-> (void)
+ACE_INLINE IR_ValueDef_ptr 
+IR_ValueDef_out::operator-> (void)
 {
   return this->ptr_;
 }
 
-
-#endif /* end #if !defined */
-
-
 #if !defined (TAO_USE_SEQUENCE_TEMPLATES)
   
-#if !defined (__TAO_UNBOUNDED_OBJECT_SEQUENCE_IR_VALUEDEFSEQ_CI_)
-#define __TAO_UNBOUNDED_OBJECT_SEQUENCE_IR_VALUEDEFSEQ_CI_
-
-  ACE_INLINE IR::ValueDef **
-  IR::_TAO_Unbounded_Object_Sequence_IR_ValueDefSeq::allocbuf (CORBA::ULong nelems)
+  ACE_INLINE IR_ValueDef **
+  _TAO_Unbounded_Object_Sequence_IR_ValueDefSeq::allocbuf (CORBA::ULong nelems)
   {
-    IR::ValueDef **buf = 0;
+    IR_ValueDef **buf = 0;
     
-    ACE_NEW_RETURN (buf, IR::ValueDef*[nelems], 0);
+    ACE_NEW_RETURN (buf, IR_ValueDef*[nelems], 0);
     
     for (CORBA::ULong i = 0; i < nelems; i++)
-      buf[i] = IR::ValueDef::_nil ();
+      buf[i] = IR_ValueDef::_nil ();
     
     return buf;
   }
   
   ACE_INLINE void 
-  IR::_TAO_Unbounded_Object_Sequence_IR_ValueDefSeq::freebuf (IR::ValueDef **buffer)
+  _TAO_Unbounded_Object_Sequence_IR_ValueDefSeq::freebuf (IR_ValueDef **buffer)
   {
     if (buffer == 0)
       return;
@@ -3427,36 +3095,36 @@
   }
   
   ACE_INLINE
-  IR::_TAO_Unbounded_Object_Sequence_IR_ValueDefSeq::_TAO_Unbounded_Object_Sequence_IR_ValueDefSeq (void)
+  _TAO_Unbounded_Object_Sequence_IR_ValueDefSeq::_TAO_Unbounded_Object_Sequence_IR_ValueDefSeq (void)
   {
   }
   
   ACE_INLINE
-  IR::_TAO_Unbounded_Object_Sequence_IR_ValueDefSeq::_TAO_Unbounded_Object_Sequence_IR_ValueDefSeq (CORBA::ULong maximum)
+  _TAO_Unbounded_Object_Sequence_IR_ValueDefSeq::_TAO_Unbounded_Object_Sequence_IR_ValueDefSeq (CORBA::ULong maximum)
     : TAO_Unbounded_Base_Sequence (maximum, _TAO_Unbounded_Object_Sequence_IR_ValueDefSeq::allocbuf (maximum))
   {
   }
   
   ACE_INLINE
-  IR::_TAO_Unbounded_Object_Sequence_IR_ValueDefSeq::_TAO_Unbounded_Object_Sequence_IR_ValueDefSeq (CORBA::ULong maximum,
+  _TAO_Unbounded_Object_Sequence_IR_ValueDefSeq::_TAO_Unbounded_Object_Sequence_IR_ValueDefSeq (CORBA::ULong maximum,
     CORBA::ULong length,
-    IR::ValueDef* *value,
+    IR_ValueDef* *value,
     CORBA::Boolean release)
   : TAO_Unbounded_Base_Sequence (maximum, length, value, release)
   {
   }
   
   ACE_INLINE
-  IR::_TAO_Unbounded_Object_Sequence_IR_ValueDefSeq::_TAO_Unbounded_Object_Sequence_IR_ValueDefSeq(const _TAO_Unbounded_Object_Sequence_IR_ValueDefSeq &rhs)
+  _TAO_Unbounded_Object_Sequence_IR_ValueDefSeq::_TAO_Unbounded_Object_Sequence_IR_ValueDefSeq(const _TAO_Unbounded_Object_Sequence_IR_ValueDefSeq &rhs)
     : TAO_Unbounded_Base_Sequence (rhs)
   {
     if (rhs.buffer_ != 0)
     {
-      IR::ValueDef **tmp1 = _TAO_Unbounded_Object_Sequence_IR_ValueDefSeq::allocbuf (this->maximum_);
-      IR::ValueDef ** const tmp2 = ACE_reinterpret_cast (IR::ValueDef ** ACE_CAST_CONST, rhs.buffer_);
+      IR_ValueDef **tmp1 = _TAO_Unbounded_Object_Sequence_IR_ValueDefSeq::allocbuf (this->maximum_);
+      IR_ValueDef ** const tmp2 = ACE_reinterpret_cast (IR_ValueDef ** ACE_CAST_CONST, rhs.buffer_);
       
       for (CORBA::ULong i = 0; i < rhs.length_; ++i)
-        tmp1[i] = IR::ValueDef::_duplicate (tmp2[i]);
+        tmp1[i] = IR_ValueDef::_duplicate (tmp2[i]);
       
       this->buffer_ = tmp1;
     }
@@ -3466,20 +3134,20 @@
     }
   }
   
-  ACE_INLINE IR::_TAO_Unbounded_Object_Sequence_IR_ValueDefSeq &
-  IR::_TAO_Unbounded_Object_Sequence_IR_ValueDefSeq::operator= (const _TAO_Unbounded_Object_Sequence_IR_ValueDefSeq &rhs)
+  ACE_INLINE _TAO_Unbounded_Object_Sequence_IR_ValueDefSeq &
+  _TAO_Unbounded_Object_Sequence_IR_ValueDefSeq::operator= (const _TAO_Unbounded_Object_Sequence_IR_ValueDefSeq &rhs)
   {
     if (this == &rhs)
       return *this;
     
     if (this->release_)
     {
-      IR::ValueDef **tmp = ACE_reinterpret_cast (IR::ValueDef **, this->buffer_);
+      IR_ValueDef **tmp = ACE_reinterpret_cast (IR_ValueDef **, this->buffer_);
       
       for (CORBA::ULong i = 0; i < this->length_; ++i)
       {
         CORBA::release (tmp[i]);
-        tmp[i] = IR::ValueDef::_nil ();
+        tmp[i] = IR_ValueDef::_nil ();
       }
       if (this->maximum_ < rhs.maximum_)
       {
@@ -3492,28 +3160,28 @@
     
     TAO_Unbounded_Base_Sequence::operator= (rhs);
     
-    IR::ValueDef **tmp1 = ACE_reinterpret_cast (IR::ValueDef **, this->buffer_);
-    IR::ValueDef ** const tmp2 = ACE_reinterpret_cast (IR::ValueDef ** ACE_CAST_CONST, rhs.buffer_);
+    IR_ValueDef **tmp1 = ACE_reinterpret_cast (IR_ValueDef **, this->buffer_);
+    IR_ValueDef ** const tmp2 = ACE_reinterpret_cast (IR_ValueDef ** ACE_CAST_CONST, rhs.buffer_);
     
     for (CORBA::ULong i = 0; i < rhs.length_; ++i)
-      tmp1[i] = IR::ValueDef::_duplicate (tmp2[i]);
+      tmp1[i] = IR_ValueDef::_duplicate (tmp2[i]);
     
     return *this;
   }
   
-  ACE_INLINE TAO_Object_Manager<IR::ValueDef,IR::ValueDef_var>
-  IR::_TAO_Unbounded_Object_Sequence_IR_ValueDefSeq::operator[] (CORBA::ULong index) const
+  ACE_INLINE TAO_Object_Manager<IR_ValueDef,IR_ValueDef_var>
+  _TAO_Unbounded_Object_Sequence_IR_ValueDefSeq::operator[] (CORBA::ULong index) const
   // read-write accessor
   {
     ACE_ASSERT (index < this->maximum_);
-    IR::ValueDef ** const tmp = ACE_reinterpret_cast (IR::ValueDef ** ACE_CAST_CONST, this->buffer_);
-    return TAO_Object_Manager<IR::ValueDef,IR::ValueDef_var> (tmp + index, this->release_);
+    IR_ValueDef ** const tmp = ACE_reinterpret_cast (IR_ValueDef ** ACE_CAST_CONST, this->buffer_);
+    return TAO_Object_Manager<IR_ValueDef,IR_ValueDef_var> (tmp + index, this->release_);
   }
   
-  ACE_INLINE IR::ValueDef* *
-  IR::_TAO_Unbounded_Object_Sequence_IR_ValueDefSeq::get_buffer (CORBA::Boolean orphan)
+  ACE_INLINE IR_ValueDef* *
+  _TAO_Unbounded_Object_Sequence_IR_ValueDefSeq::get_buffer (CORBA::Boolean orphan)
   {
-    IR::ValueDef **result = 0;
+    IR_ValueDef **result = 0;
     if (orphan == 0)
     {
       // We retain ownership.
@@ -3525,7 +3193,7 @@
       }
       else
       {
-        result = ACE_reinterpret_cast (IR::ValueDef**, this->buffer_);
+        result = ACE_reinterpret_cast (IR_ValueDef**, this->buffer_);
       }
     }
     else // if (orphan == 1)
@@ -3534,7 +3202,7 @@
       {
         // We set the state back to default and relinquish
         // ownership.
-        result = ACE_reinterpret_cast(IR::ValueDef**,this->buffer_);
+        result = ACE_reinterpret_cast(IR_ValueDef**,this->buffer_);
         this->maximum_ = 0;
         this->length_ = 0;
         this->buffer_ = 0;
@@ -3544,60 +3212,53 @@
     return result;
   }
   
-  ACE_INLINE const IR::ValueDef* *
-  IR::_TAO_Unbounded_Object_Sequence_IR_ValueDefSeq::get_buffer (void) const
+  ACE_INLINE const IR_ValueDef* *
+  _TAO_Unbounded_Object_Sequence_IR_ValueDefSeq::get_buffer (void) const
   {
-    return ACE_reinterpret_cast(const IR::ValueDef ** ACE_CAST_CONST, this->buffer_);
+    return ACE_reinterpret_cast(const IR_ValueDef ** ACE_CAST_CONST, this->buffer_);
   }
   
-  
-#endif /* end #if !defined */
-
-
 #endif /* !TAO_USE_SEQUENCE_TEMPLATES */ 
 
-#if !defined (_IR_VALUEDEFSEQ_CI_)
-#define _IR_VALUEDEFSEQ_CI_
-
 // *************************************************************
-// Inline operations for class IR::ValueDefSeq_var
+// Inline operations for class IR_ValueDefSeq_var
 // *************************************************************
 
 ACE_INLINE
-IR::ValueDefSeq_var::ValueDefSeq_var (void) // default constructor
+IR_ValueDefSeq_var::IR_ValueDefSeq_var (void) // default constructor
   : ptr_ (0)
 {}
 
 ACE_INLINE
-IR::ValueDefSeq_var::ValueDefSeq_var (ValueDefSeq *p)
+IR_ValueDefSeq_var::IR_ValueDefSeq_var (IR_ValueDefSeq *p)
   : ptr_ (p)
 {}
 
 ACE_INLINE
-IR::ValueDefSeq_var::ValueDefSeq_var (const ::IR::ValueDefSeq_var &p) // copy constructor
+IR_ValueDefSeq_var::IR_ValueDefSeq_var (const ::IR_ValueDefSeq_var &p) // copy constructor
 {
   if (p.ptr_)
-    ACE_NEW (this->ptr_, ::IR::ValueDefSeq (*p.ptr_));
+    ACE_NEW (this->ptr_, ::IR_ValueDefSeq (*p.ptr_));
   else
     this->ptr_ = 0;
 }
 
 ACE_INLINE
-IR::ValueDefSeq_var::~ValueDefSeq_var (void) // destructor
+IR_ValueDefSeq_var::~IR_ValueDefSeq_var (void) // destructor
 {
   delete this->ptr_;
 }
 
-ACE_INLINE IR::ValueDefSeq_var &
-IR::ValueDefSeq_var::operator= (ValueDefSeq *p)
+ACE_INLINE IR_ValueDefSeq_var &
+IR_ValueDefSeq_var::operator= (IR_ValueDefSeq *p)
 {
   delete this->ptr_;
   this->ptr_ = p;
   return *this;
 }
 
-ACE_INLINE ::IR::ValueDefSeq_var &
-IR::ValueDefSeq_var::operator= (const ::IR::ValueDefSeq_var &p)
+ACE_INLINE IR_ValueDefSeq_var &
+IR_ValueDefSeq_var::operator= (const ::IR_ValueDefSeq_var &p) // deep copy
 {
   if (this != &p)
     {
@@ -3608,12 +3269,12 @@
         }
       else
         {
-          ValueDefSeq *deep_copy =
-            new ValueDefSeq (*p.ptr_);
+          IR_ValueDefSeq *deep_copy = 
+            new IR_ValueDefSeq (*p.ptr_);
           
           if (deep_copy != 0)
             {
-              ValueDefSeq *tmp = deep_copy;
+              IR_ValueDefSeq *tmp = deep_copy;
               deep_copy = this->ptr_;
               this->ptr_ = tmp;
               delete deep_copy;
@@ -3624,97 +3285,97 @@
   return *this;
 }
 
-ACE_INLINE const ::IR::ValueDefSeq *
-IR::ValueDefSeq_var::operator-> (void) const
+ACE_INLINE const ::IR_ValueDefSeq *
+IR_ValueDefSeq_var::operator-> (void) const
 {
   return this->ptr_;
 }
 
-ACE_INLINE ::IR::ValueDefSeq *
-IR::ValueDefSeq_var::operator-> (void)
+ACE_INLINE ::IR_ValueDefSeq *
+IR_ValueDefSeq_var::operator-> (void)
 {
   return this->ptr_;
 }
 
 ACE_INLINE 
-IR::ValueDefSeq_var::operator const ::IR::ValueDefSeq &() const // cast
+IR_ValueDefSeq_var::operator const ::IR_ValueDefSeq &() const // cast
 {
   return *this->ptr_;
 }
 
 ACE_INLINE 
-IR::ValueDefSeq_var::operator ::IR::ValueDefSeq &() // cast 
+IR_ValueDefSeq_var::operator ::IR_ValueDefSeq &() // cast 
 {
   return *this->ptr_;
 }
 
 ACE_INLINE 
-IR::ValueDefSeq_var::operator ::IR::ValueDefSeq &() const // cast 
+IR_ValueDefSeq_var::operator ::IR_ValueDefSeq &() const // cast 
 {
   return *this->ptr_;
 }
 
 // variable-size types only
 ACE_INLINE
-IR::ValueDefSeq_var::operator ::IR::ValueDefSeq *&() // cast 
+IR_ValueDefSeq_var::operator ::IR_ValueDefSeq *&() // cast 
 {
   return this->ptr_;
 }
 
-ACE_INLINE TAO_Object_Manager<IR::ValueDef, IR::ValueDef_var>
-IR::ValueDefSeq_var::operator[] (CORBA::ULong index)
+ACE_INLINE TAO_Object_Manager<IR_ValueDef, IR_ValueDef_var>
+IR_ValueDefSeq_var::operator[] (CORBA::ULong index)
 {
   return this->ptr_->operator[] (index);
 }
 
-ACE_INLINE const ::IR::ValueDefSeq &
-IR::ValueDefSeq_var::in (void) const
+ACE_INLINE const ::IR_ValueDefSeq &
+IR_ValueDefSeq_var::in (void) const
 {
   return *this->ptr_;
 }
 
-ACE_INLINE ::IR::ValueDefSeq &
-IR::ValueDefSeq_var::inout (void)
+ACE_INLINE ::IR_ValueDefSeq &
+IR_ValueDefSeq_var::inout (void)
 {
   return *this->ptr_;
 }
 
 // mapping for variable size 
-ACE_INLINE ::IR::ValueDefSeq *&
-IR::ValueDefSeq_var::out (void)
+ACE_INLINE ::IR_ValueDefSeq *&
+IR_ValueDefSeq_var::out (void)
 {
   delete this->ptr_;
   this->ptr_ = 0;
   return this->ptr_;
 }
 
-ACE_INLINE ::IR::ValueDefSeq *
-IR::ValueDefSeq_var::_retn (void)
+ACE_INLINE ::IR_ValueDefSeq *
+IR_ValueDefSeq_var::_retn (void)
 {
-  ::IR::ValueDefSeq *tmp = this->ptr_;
+  ::IR_ValueDefSeq *tmp = this->ptr_;
   this->ptr_ = 0;
   return tmp;
 }
 
-ACE_INLINE ::IR::ValueDefSeq *
-IR::ValueDefSeq_var::ptr (void) const
+ACE_INLINE ::IR_ValueDefSeq *
+IR_ValueDefSeq_var::ptr (void) const
 {
   return this->ptr_;
 }
 
 // *************************************************************
-// Inline operations for class IR::ValueDefSeq_out
+// Inline operations for class IR_ValueDefSeq_out
 // *************************************************************
 
 ACE_INLINE
-IR::ValueDefSeq_out::ValueDefSeq_out (ValueDefSeq *&p)
+IR_ValueDefSeq_out::IR_ValueDefSeq_out (IR_ValueDefSeq *&p)
   : ptr_ (p)
 {
   this->ptr_ = 0;
 }
 
 ACE_INLINE
-IR::ValueDefSeq_out::ValueDefSeq_out (ValueDefSeq_var &p) // constructor from _var
+IR_ValueDefSeq_out::IR_ValueDefSeq_out (IR_ValueDefSeq_var &p) // constructor from _var
   : ptr_ (p.out ())
 {
   delete this->ptr_;
@@ -3722,57 +3383,50 @@
 }
 
 ACE_INLINE
-IR::ValueDefSeq_out::ValueDefSeq_out (const ::IR::ValueDefSeq_out &p) // copy constructor
-  : ptr_ (ACE_const_cast (ValueDefSeq_out&, p).ptr_)
+IR_ValueDefSeq_out::IR_ValueDefSeq_out (const ::IR_ValueDefSeq_out &p) // copy constructor
+  : ptr_ (ACE_const_cast (IR_ValueDefSeq_out&, p).ptr_)
 {}
 
-ACE_INLINE ::IR::ValueDefSeq_out &
-IR::ValueDefSeq_out::operator= (const ::IR::ValueDefSeq_out &p)
+ACE_INLINE ::IR_ValueDefSeq_out &
+IR_ValueDefSeq_out::operator= (const ::IR_ValueDefSeq_out &p)
 {
-  this->ptr_ = ACE_const_cast (ValueDefSeq_out&, p).ptr_;
+  this->ptr_ = ACE_const_cast (IR_ValueDefSeq_out&, p).ptr_;
   return *this;
 }
 
-ACE_INLINE ::IR::ValueDefSeq_out &
-IR::ValueDefSeq_out::operator= (ValueDefSeq *p)
+ACE_INLINE ::IR_ValueDefSeq_out &
+IR_ValueDefSeq_out::operator= (IR_ValueDefSeq *p)
 {
   this->ptr_ = p;
   return *this;
 }
 
 ACE_INLINE 
-IR::ValueDefSeq_out::operator ::IR::ValueDefSeq *&() // cast
+IR_ValueDefSeq_out::operator ::IR_ValueDefSeq *&() // cast
 {
   return this->ptr_;
 }
 
-ACE_INLINE ::IR::ValueDefSeq *&
-IR::ValueDefSeq_out::ptr (void) // ptr
+ACE_INLINE ::IR_ValueDefSeq *&
+IR_ValueDefSeq_out::ptr (void) // ptr
 {
   return this->ptr_;
 }
 
-ACE_INLINE ::IR::ValueDefSeq *
-IR::ValueDefSeq_out::operator-> (void)
+ACE_INLINE ::IR_ValueDefSeq *
+IR_ValueDefSeq_out::operator-> (void)
 {
   return this->ptr_;
 }
 
-ACE_INLINE TAO_Object_Manager<IR::ValueDef, IR::ValueDef_var>
-IR::ValueDefSeq_out::operator[] (CORBA::ULong index)
+ACE_INLINE TAO_Object_Manager<IR_ValueDef, IR_ValueDef_var>
+IR_ValueDefSeq_out::operator[] (CORBA::ULong index)
 {
   return this->ptr_->operator[] (index);
 }
 
-
-#endif /* end #if !defined */
-
-
-#if !defined (_IR_VALUEBOXDEF___CI_)
-#define _IR_VALUEBOXDEF___CI_
-
 ACE_INLINE
-IR::ValueBoxDef::ValueBoxDef (
+IR_ValueBoxDef::IR_ValueBoxDef (
     TAO_Stub *objref,
     CORBA::Boolean _tao_collocated,
     TAO_Abstract_ServantBase *servant
@@ -3782,185 +3436,164 @@
   this->IR_ValueBoxDef_setup_collocation (_tao_collocated);
 }
 
-
-#endif /* end #if !defined */
-
-
-#if !defined (_IR_VALUEBOXDEF___VAR_CI_)
-#define _IR_VALUEBOXDEF___VAR_CI_
-
 // *************************************************************
-// Inline operations for class IR::ValueBoxDef_var
+// Inline operations for class IR_ValueBoxDef_var
 // *************************************************************
 
 ACE_INLINE
-IR::ValueBoxDef_var::ValueBoxDef_var (void) // default constructor
-  : ptr_ (IR::ValueBoxDef::_nil ())
+IR_ValueBoxDef_var::IR_ValueBoxDef_var (void) // default constructor
+  : ptr_ (IR_ValueBoxDef::_nil ())
 {}
 
-ACE_INLINE IR::ValueBoxDef_ptr 
-IR::ValueBoxDef_var::ptr (void) const
+ACE_INLINE IR_ValueBoxDef_ptr 
+IR_ValueBoxDef_var::ptr (void) const
 {
   return this->ptr_;
 }
 
 ACE_INLINE
-IR::ValueBoxDef_var::ValueBoxDef_var (const IR::ValueBoxDef_var &p) // copy constructor
+IR_ValueBoxDef_var::IR_ValueBoxDef_var (const IR_ValueBoxDef_var &p) // copy constructor
   : TAO_Base_var (),
-    ptr_ (ValueBoxDef::_duplicate (p.ptr ()))
+    ptr_ (IR_ValueBoxDef::_duplicate (p.ptr ()))
 {}
 
 ACE_INLINE
-IR::ValueBoxDef_var::~ValueBoxDef_var (void) // destructor
+IR_ValueBoxDef_var::~IR_ValueBoxDef_var (void) // destructor
 {
   CORBA::release (this->ptr_);
 }
 
-ACE_INLINE IR::ValueBoxDef_var &
-IR::ValueBoxDef_var::operator= (IR::ValueBoxDef_ptr p)
+ACE_INLINE IR_ValueBoxDef_var &
+IR_ValueBoxDef_var::operator= (IR_ValueBoxDef_ptr p)
 {
   CORBA::release (this->ptr_);
   this->ptr_ = p;
   return *this;
 }
 
-ACE_INLINE IR::ValueBoxDef_var &
-IR::ValueBoxDef_var::operator= (const IR::ValueBoxDef_var &p)
+ACE_INLINE IR_ValueBoxDef_var &
+IR_ValueBoxDef_var::operator= (const IR_ValueBoxDef_var &p)
 {
   if (this != &p)
   {
     CORBA::release (this->ptr_);
-    this->ptr_ = IR::ValueBoxDef::_duplicate (p.ptr ());
+    this->ptr_ = IR_ValueBoxDef::_duplicate (p.ptr ());
   }
   return *this;
 }
 
 ACE_INLINE 
-IR::ValueBoxDef_var::operator const IR::ValueBoxDef_ptr &() const // cast
+IR_ValueBoxDef_var::operator const IR_ValueBoxDef_ptr &() const // cast
 {
   return this->ptr_;
 }
 
 ACE_INLINE 
-IR::ValueBoxDef_var::operator IR::ValueBoxDef_ptr &() // cast 
+IR_ValueBoxDef_var::operator IR_ValueBoxDef_ptr &() // cast 
 {
   return this->ptr_;
 }
 
-ACE_INLINE IR::ValueBoxDef_ptr 
-IR::ValueBoxDef_var::operator-> (void) const
+ACE_INLINE IR_ValueBoxDef_ptr 
+IR_ValueBoxDef_var::operator-> (void) const
 {
   return this->ptr_;
 }
 
-ACE_INLINE IR::ValueBoxDef_ptr
-IR::ValueBoxDef_var::in (void) const
+ACE_INLINE IR_ValueBoxDef_ptr
+IR_ValueBoxDef_var::in (void) const
 {
   return this->ptr_;
 }
 
-ACE_INLINE IR::ValueBoxDef_ptr &
-IR::ValueBoxDef_var::inout (void)
+ACE_INLINE IR_ValueBoxDef_ptr &
+IR_ValueBoxDef_var::inout (void)
 {
   return this->ptr_;
 }
 
-ACE_INLINE IR::ValueBoxDef_ptr &
-IR::ValueBoxDef_var::out (void)
+ACE_INLINE IR_ValueBoxDef_ptr &
+IR_ValueBoxDef_var::out (void)
 {
   CORBA::release (this->ptr_);
-  this->ptr_ = IR::ValueBoxDef::_nil ();
+  this->ptr_ = IR_ValueBoxDef::_nil ();
   return this->ptr_;
 }
 
-ACE_INLINE IR::ValueBoxDef_ptr 
-IR::ValueBoxDef_var::_retn (void)
+ACE_INLINE IR_ValueBoxDef_ptr 
+IR_ValueBoxDef_var::_retn (void)
 {
   // yield ownership of managed obj reference
-  IR::ValueBoxDef_ptr val = this->ptr_;
-  this->ptr_ = IR::ValueBoxDef::_nil ();
+  IR_ValueBoxDef_ptr val = this->ptr_;
+  this->ptr_ = IR_ValueBoxDef::_nil ();
   return val;
 }
 
-
-#endif /* end #if !defined */
-
-
-#if !defined (_IR_VALUEBOXDEF___OUT_CI_)
-#define _IR_VALUEBOXDEF___OUT_CI_
-
 // *************************************************************
-// Inline operations for class IR::ValueBoxDef_out
+// Inline operations for class IR_ValueBoxDef_out
 // *************************************************************
 
 ACE_INLINE
-IR::ValueBoxDef_out::ValueBoxDef_out (IR::ValueBoxDef_ptr &p)
+IR_ValueBoxDef_out::IR_ValueBoxDef_out (IR_ValueBoxDef_ptr &p)
   : ptr_ (p)
 {
-  this->ptr_ = IR::ValueBoxDef::_nil ();
+  this->ptr_ = IR_ValueBoxDef::_nil ();
 }
 
 ACE_INLINE
-IR::ValueBoxDef_out::ValueBoxDef_out (IR::ValueBoxDef_var &p) // constructor from _var
+IR_ValueBoxDef_out::IR_ValueBoxDef_out (IR_ValueBoxDef_var &p) // constructor from _var
   : ptr_ (p.out ())
 {
   CORBA::release (this->ptr_);
-  this->ptr_ = IR::ValueBoxDef::_nil ();
+  this->ptr_ = IR_ValueBoxDef::_nil ();
 }
 
 ACE_INLINE
-IR::ValueBoxDef_out::ValueBoxDef_out (const IR::ValueBoxDef_out &p) // copy constructor
-  : ptr_ (ACE_const_cast (IR::ValueBoxDef_out&,p).ptr_)
+IR_ValueBoxDef_out::IR_ValueBoxDef_out (const IR_ValueBoxDef_out &p) // copy constructor
+  : ptr_ (ACE_const_cast (IR_ValueBoxDef_out&,p).ptr_)
 {}
 
-ACE_INLINE IR::ValueBoxDef_out &
-IR::ValueBoxDef_out::operator= (const IR::ValueBoxDef_out &p)
+ACE_INLINE IR_ValueBoxDef_out &
+IR_ValueBoxDef_out::operator= (const IR_ValueBoxDef_out &p)
 {
-  this->ptr_ = ACE_const_cast (IR::ValueBoxDef_out&,p).ptr_;
+  this->ptr_ = ACE_const_cast (IR_ValueBoxDef_out&,p).ptr_;
   return *this;
 }
 
-ACE_INLINE IR::ValueBoxDef_out &
-IR::ValueBoxDef_out::operator= (const IR::ValueBoxDef_var &p)
+ACE_INLINE IR_ValueBoxDef_out &
+IR_ValueBoxDef_out::operator= (const IR_ValueBoxDef_var &p)
 {
-  this->ptr_ = IR::ValueBoxDef::_duplicate (p.ptr ());
+  this->ptr_ = IR_ValueBoxDef::_duplicate (p.ptr ());
   return *this;
 }
 
-ACE_INLINE IR::ValueBoxDef_out &
-IR::ValueBoxDef_out::operator= (IR::ValueBoxDef_ptr p)
+ACE_INLINE IR_ValueBoxDef_out &
+IR_ValueBoxDef_out::operator= (IR_ValueBoxDef_ptr p)
 {
   this->ptr_ = p;
   return *this;
 }
 
 ACE_INLINE 
-IR::ValueBoxDef_out::operator IR::ValueBoxDef_ptr &() // cast
+IR_ValueBoxDef_out::operator IR_ValueBoxDef_ptr &() // cast
 {
   return this->ptr_;
 }
 
-ACE_INLINE IR::ValueBoxDef_ptr &
-IR::ValueBoxDef_out::ptr (void) // ptr
+ACE_INLINE IR_ValueBoxDef_ptr &
+IR_ValueBoxDef_out::ptr (void) // ptr
 {
   return this->ptr_;
 }
 
-ACE_INLINE IR::ValueBoxDef_ptr 
-IR::ValueBoxDef_out::operator-> (void)
+ACE_INLINE IR_ValueBoxDef_ptr 
+IR_ValueBoxDef_out::operator-> (void)
 {
   return this->ptr_;
 }
 
-
-#endif /* end #if !defined */
-
-
-#if !defined (_IR_COMPONENTDEF___CI_)
-#define _IR_COMPONENTDEF___CI_
-
 ACE_INLINE
-IR::ComponentDef::ComponentDef (
+IR_ComponentDef::IR_ComponentDef (
     TAO_Stub *objref,
     CORBA::Boolean _tao_collocated,
     TAO_Abstract_ServantBase *servant
@@ -3970,200 +3603,179 @@
   this->IR_ComponentDef_setup_collocation (_tao_collocated);
 }
 
-
-#endif /* end #if !defined */
-
-
-#if !defined (_IR_COMPONENTDEF___VAR_CI_)
-#define _IR_COMPONENTDEF___VAR_CI_
-
 // *************************************************************
-// Inline operations for class IR::ComponentDef_var
+// Inline operations for class IR_ComponentDef_var
 // *************************************************************
 
 ACE_INLINE
-IR::ComponentDef_var::ComponentDef_var (void) // default constructor
-  : ptr_ (IR::ComponentDef::_nil ())
+IR_ComponentDef_var::IR_ComponentDef_var (void) // default constructor
+  : ptr_ (IR_ComponentDef::_nil ())
 {}
 
-ACE_INLINE IR::ComponentDef_ptr 
-IR::ComponentDef_var::ptr (void) const
+ACE_INLINE IR_ComponentDef_ptr 
+IR_ComponentDef_var::ptr (void) const
 {
   return this->ptr_;
 }
 
 ACE_INLINE
-IR::ComponentDef_var::ComponentDef_var (const IR::ComponentDef_var &p) // copy constructor
+IR_ComponentDef_var::IR_ComponentDef_var (const IR_ComponentDef_var &p) // copy constructor
   : TAO_Base_var (),
-    ptr_ (ComponentDef::_duplicate (p.ptr ()))
+    ptr_ (IR_ComponentDef::_duplicate (p.ptr ()))
 {}
 
 ACE_INLINE
-IR::ComponentDef_var::~ComponentDef_var (void) // destructor
+IR_ComponentDef_var::~IR_ComponentDef_var (void) // destructor
 {
   CORBA::release (this->ptr_);
 }
 
-ACE_INLINE IR::ComponentDef_var &
-IR::ComponentDef_var::operator= (IR::ComponentDef_ptr p)
+ACE_INLINE IR_ComponentDef_var &
+IR_ComponentDef_var::operator= (IR_ComponentDef_ptr p)
 {
   CORBA::release (this->ptr_);
   this->ptr_ = p;
   return *this;
 }
 
-ACE_INLINE IR::ComponentDef_var &
-IR::ComponentDef_var::operator= (const IR::ComponentDef_var &p)
+ACE_INLINE IR_ComponentDef_var &
+IR_ComponentDef_var::operator= (const IR_ComponentDef_var &p)
 {
   if (this != &p)
   {
     CORBA::release (this->ptr_);
-    this->ptr_ = IR::ComponentDef::_duplicate (p.ptr ());
+    this->ptr_ = IR_ComponentDef::_duplicate (p.ptr ());
   }
   return *this;
 }
 
 ACE_INLINE 
-IR::ComponentDef_var::operator const IR::ComponentDef_ptr &() const // cast
+IR_ComponentDef_var::operator const IR_ComponentDef_ptr &() const // cast
 {
   return this->ptr_;
 }
 
 ACE_INLINE 
-IR::ComponentDef_var::operator IR::ComponentDef_ptr &() // cast 
+IR_ComponentDef_var::operator IR_ComponentDef_ptr &() // cast 
 {
   return this->ptr_;
 }
 
-ACE_INLINE IR::ComponentDef_ptr 
-IR::ComponentDef_var::operator-> (void) const
+ACE_INLINE IR_ComponentDef_ptr 
+IR_ComponentDef_var::operator-> (void) const
 {
   return this->ptr_;
 }
 
-ACE_INLINE IR::ComponentDef_ptr
-IR::ComponentDef_var::in (void) const
+ACE_INLINE IR_ComponentDef_ptr
+IR_ComponentDef_var::in (void) const
 {
   return this->ptr_;
 }
 
-ACE_INLINE IR::ComponentDef_ptr &
-IR::ComponentDef_var::inout (void)
+ACE_INLINE IR_ComponentDef_ptr &
+IR_ComponentDef_var::inout (void)
 {
   return this->ptr_;
 }
 
-ACE_INLINE IR::ComponentDef_ptr &
-IR::ComponentDef_var::out (void)
+ACE_INLINE IR_ComponentDef_ptr &
+IR_ComponentDef_var::out (void)
 {
   CORBA::release (this->ptr_);
-  this->ptr_ = IR::ComponentDef::_nil ();
+  this->ptr_ = IR_ComponentDef::_nil ();
   return this->ptr_;
 }
 
-ACE_INLINE IR::ComponentDef_ptr 
-IR::ComponentDef_var::_retn (void)
+ACE_INLINE IR_ComponentDef_ptr 
+IR_ComponentDef_var::_retn (void)
 {
   // yield ownership of managed obj reference
-  IR::ComponentDef_ptr val = this->ptr_;
-  this->ptr_ = IR::ComponentDef::_nil ();
+  IR_ComponentDef_ptr val = this->ptr_;
+  this->ptr_ = IR_ComponentDef::_nil ();
   return val;
 }
 
-
-#endif /* end #if !defined */
-
-
-#if !defined (_IR_COMPONENTDEF___OUT_CI_)
-#define _IR_COMPONENTDEF___OUT_CI_
-
 // *************************************************************
-// Inline operations for class IR::ComponentDef_out
+// Inline operations for class IR_ComponentDef_out
 // *************************************************************
 
 ACE_INLINE
-IR::ComponentDef_out::ComponentDef_out (IR::ComponentDef_ptr &p)
+IR_ComponentDef_out::IR_ComponentDef_out (IR_ComponentDef_ptr &p)
   : ptr_ (p)
 {
-  this->ptr_ = IR::ComponentDef::_nil ();
+  this->ptr_ = IR_ComponentDef::_nil ();
 }
 
 ACE_INLINE
-IR::ComponentDef_out::ComponentDef_out (IR::ComponentDef_var &p) // constructor from _var
+IR_ComponentDef_out::IR_ComponentDef_out (IR_ComponentDef_var &p) // constructor from _var
   : ptr_ (p.out ())
 {
   CORBA::release (this->ptr_);
-  this->ptr_ = IR::ComponentDef::_nil ();
+  this->ptr_ = IR_ComponentDef::_nil ();
 }
 
 ACE_INLINE
-IR::ComponentDef_out::ComponentDef_out (const IR::ComponentDef_out &p) // copy constructor
-  : ptr_ (ACE_const_cast (IR::ComponentDef_out&,p).ptr_)
+IR_ComponentDef_out::IR_ComponentDef_out (const IR_ComponentDef_out &p) // copy constructor
+  : ptr_ (ACE_const_cast (IR_ComponentDef_out&,p).ptr_)
 {}
 
-ACE_INLINE IR::ComponentDef_out &
-IR::ComponentDef_out::operator= (const IR::ComponentDef_out &p)
+ACE_INLINE IR_ComponentDef_out &
+IR_ComponentDef_out::operator= (const IR_ComponentDef_out &p)
 {
-  this->ptr_ = ACE_const_cast (IR::ComponentDef_out&,p).ptr_;
+  this->ptr_ = ACE_const_cast (IR_ComponentDef_out&,p).ptr_;
   return *this;
 }
 
-ACE_INLINE IR::ComponentDef_out &
-IR::ComponentDef_out::operator= (const IR::ComponentDef_var &p)
+ACE_INLINE IR_ComponentDef_out &
+IR_ComponentDef_out::operator= (const IR_ComponentDef_var &p)
 {
-  this->ptr_ = IR::ComponentDef::_duplicate (p.ptr ());
+  this->ptr_ = IR_ComponentDef::_duplicate (p.ptr ());
   return *this;
 }
 
-ACE_INLINE IR::ComponentDef_out &
-IR::ComponentDef_out::operator= (IR::ComponentDef_ptr p)
+ACE_INLINE IR_ComponentDef_out &
+IR_ComponentDef_out::operator= (IR_ComponentDef_ptr p)
 {
   this->ptr_ = p;
   return *this;
 }
 
 ACE_INLINE 
-IR::ComponentDef_out::operator IR::ComponentDef_ptr &() // cast
+IR_ComponentDef_out::operator IR_ComponentDef_ptr &() // cast
 {
   return this->ptr_;
 }
 
-ACE_INLINE IR::ComponentDef_ptr &
-IR::ComponentDef_out::ptr (void) // ptr
+ACE_INLINE IR_ComponentDef_ptr &
+IR_ComponentDef_out::ptr (void) // ptr
 {
   return this->ptr_;
 }
 
-ACE_INLINE IR::ComponentDef_ptr 
-IR::ComponentDef_out::operator-> (void)
+ACE_INLINE IR_ComponentDef_ptr 
+IR_ComponentDef_out::operator-> (void)
 {
   return this->ptr_;
 }
 
-
-#endif /* end #if !defined */
-
-
 #if !defined (TAO_USE_SEQUENCE_TEMPLATES)
   
-#if !defined (__TAO_UNBOUNDED_OBJECT_SEQUENCE_IR_COMPONENTDEFSEQ_CI_)
-#define __TAO_UNBOUNDED_OBJECT_SEQUENCE_IR_COMPONENTDEFSEQ_CI_
-
-  ACE_INLINE IR::ComponentDef **
-  IR::_TAO_Unbounded_Object_Sequence_IR_ComponentDefSeq::allocbuf (CORBA::ULong nelems)
+  ACE_INLINE IR_ComponentDef **
+  _TAO_Unbounded_Object_Sequence_IR_ComponentDefSeq::allocbuf (CORBA::ULong nelems)
   {
-    IR::ComponentDef **buf = 0;
+    IR_ComponentDef **buf = 0;
     
-    ACE_NEW_RETURN (buf, IR::ComponentDef*[nelems], 0);
+    ACE_NEW_RETURN (buf, IR_ComponentDef*[nelems], 0);
     
     for (CORBA::ULong i = 0; i < nelems; i++)
-      buf[i] = IR::ComponentDef::_nil ();
+      buf[i] = IR_ComponentDef::_nil ();
     
     return buf;
   }
   
   ACE_INLINE void 
-  IR::_TAO_Unbounded_Object_Sequence_IR_ComponentDefSeq::freebuf (IR::ComponentDef **buffer)
+  _TAO_Unbounded_Object_Sequence_IR_ComponentDefSeq::freebuf (IR_ComponentDef **buffer)
   {
     if (buffer == 0)
       return;
@@ -4171,36 +3783,36 @@
   }
   
   ACE_INLINE
-  IR::_TAO_Unbounded_Object_Sequence_IR_ComponentDefSeq::_TAO_Unbounded_Object_Sequence_IR_ComponentDefSeq (void)
+  _TAO_Unbounded_Object_Sequence_IR_ComponentDefSeq::_TAO_Unbounded_Object_Sequence_IR_ComponentDefSeq (void)
   {
   }
   
   ACE_INLINE
-  IR::_TAO_Unbounded_Object_Sequence_IR_ComponentDefSeq::_TAO_Unbounded_Object_Sequence_IR_ComponentDefSeq (CORBA::ULong maximum)
+  _TAO_Unbounded_Object_Sequence_IR_ComponentDefSeq::_TAO_Unbounded_Object_Sequence_IR_ComponentDefSeq (CORBA::ULong maximum)
     : TAO_Unbounded_Base_Sequence (maximum, _TAO_Unbounded_Object_Sequence_IR_ComponentDefSeq::allocbuf (maximum))
   {
   }
   
   ACE_INLINE
-  IR::_TAO_Unbounded_Object_Sequence_IR_ComponentDefSeq::_TAO_Unbounded_Object_Sequence_IR_ComponentDefSeq (CORBA::ULong maximum,
+  _TAO_Unbounded_Object_Sequence_IR_ComponentDefSeq::_TAO_Unbounded_Object_Sequence_IR_ComponentDefSeq (CORBA::ULong maximum,
     CORBA::ULong length,
-    IR::ComponentDef* *value,
+    IR_ComponentDef* *value,
     CORBA::Boolean release)
   : TAO_Unbounded_Base_Sequence (maximum, length, value, release)
   {
   }
   
   ACE_INLINE
-  IR::_TAO_Unbounded_Object_Sequence_IR_ComponentDefSeq::_TAO_Unbounded_Object_Sequence_IR_ComponentDefSeq(const _TAO_Unbounded_Object_Sequence_IR_ComponentDefSeq &rhs)
+  _TAO_Unbounded_Object_Sequence_IR_ComponentDefSeq::_TAO_Unbounded_Object_Sequence_IR_ComponentDefSeq(const _TAO_Unbounded_Object_Sequence_IR_ComponentDefSeq &rhs)
     : TAO_Unbounded_Base_Sequence (rhs)
   {
     if (rhs.buffer_ != 0)
     {
-      IR::ComponentDef **tmp1 = _TAO_Unbounded_Object_Sequence_IR_ComponentDefSeq::allocbuf (this->maximum_);
-      IR::ComponentDef ** const tmp2 = ACE_reinterpret_cast (IR::ComponentDef ** ACE_CAST_CONST, rhs.buffer_);
+      IR_ComponentDef **tmp1 = _TAO_Unbounded_Object_Sequence_IR_ComponentDefSeq::allocbuf (this->maximum_);
+      IR_ComponentDef ** const tmp2 = ACE_reinterpret_cast (IR_ComponentDef ** ACE_CAST_CONST, rhs.buffer_);
       
       for (CORBA::ULong i = 0; i < rhs.length_; ++i)
-        tmp1[i] = IR::ComponentDef::_duplicate (tmp2[i]);
+        tmp1[i] = IR_ComponentDef::_duplicate (tmp2[i]);
       
       this->buffer_ = tmp1;
     }
@@ -4210,20 +3822,20 @@
     }
   }
   
-  ACE_INLINE IR::_TAO_Unbounded_Object_Sequence_IR_ComponentDefSeq &
-  IR::_TAO_Unbounded_Object_Sequence_IR_ComponentDefSeq::operator= (const _TAO_Unbounded_Object_Sequence_IR_ComponentDefSeq &rhs)
+  ACE_INLINE _TAO_Unbounded_Object_Sequence_IR_ComponentDefSeq &
+  _TAO_Unbounded_Object_Sequence_IR_ComponentDefSeq::operator= (const _TAO_Unbounded_Object_Sequence_IR_ComponentDefSeq &rhs)
   {
     if (this == &rhs)
       return *this;
     
     if (this->release_)
     {
-      IR::ComponentDef **tmp = ACE_reinterpret_cast (IR::ComponentDef **, this->buffer_);
+      IR_ComponentDef **tmp = ACE_reinterpret_cast (IR_ComponentDef **, this->buffer_);
       
       for (CORBA::ULong i = 0; i < this->length_; ++i)
       {
         CORBA::release (tmp[i]);
-        tmp[i] = IR::ComponentDef::_nil ();
+        tmp[i] = IR_ComponentDef::_nil ();
       }
       if (this->maximum_ < rhs.maximum_)
       {
@@ -4236,28 +3848,28 @@
     
     TAO_Unbounded_Base_Sequence::operator= (rhs);
     
-    IR::ComponentDef **tmp1 = ACE_reinterpret_cast (IR::ComponentDef **, this->buffer_);
-    IR::ComponentDef ** const tmp2 = ACE_reinterpret_cast (IR::ComponentDef ** ACE_CAST_CONST, rhs.buffer_);
+    IR_ComponentDef **tmp1 = ACE_reinterpret_cast (IR_ComponentDef **, this->buffer_);
+    IR_ComponentDef ** const tmp2 = ACE_reinterpret_cast (IR_ComponentDef ** ACE_CAST_CONST, rhs.buffer_);
     
     for (CORBA::ULong i = 0; i < rhs.length_; ++i)
-      tmp1[i] = IR::ComponentDef::_duplicate (tmp2[i]);
+      tmp1[i] = IR_ComponentDef::_duplicate (tmp2[i]);
     
     return *this;
   }
   
-  ACE_INLINE TAO_Object_Manager<IR::ComponentDef,IR::ComponentDef_var>
-  IR::_TAO_Unbounded_Object_Sequence_IR_ComponentDefSeq::operator[] (CORBA::ULong index) const
+  ACE_INLINE TAO_Object_Manager<IR_ComponentDef,IR_ComponentDef_var>
+  _TAO_Unbounded_Object_Sequence_IR_ComponentDefSeq::operator[] (CORBA::ULong index) const
   // read-write accessor
   {
     ACE_ASSERT (index < this->maximum_);
-    IR::ComponentDef ** const tmp = ACE_reinterpret_cast (IR::ComponentDef ** ACE_CAST_CONST, this->buffer_);
-    return TAO_Object_Manager<IR::ComponentDef,IR::ComponentDef_var> (tmp + index, this->release_);
+    IR_ComponentDef ** const tmp = ACE_reinterpret_cast (IR_ComponentDef ** ACE_CAST_CONST, this->buffer_);
+    return TAO_Object_Manager<IR_ComponentDef,IR_ComponentDef_var> (tmp + index, this->release_);
   }
   
-  ACE_INLINE IR::ComponentDef* *
-  IR::_TAO_Unbounded_Object_Sequence_IR_ComponentDefSeq::get_buffer (CORBA::Boolean orphan)
+  ACE_INLINE IR_ComponentDef* *
+  _TAO_Unbounded_Object_Sequence_IR_ComponentDefSeq::get_buffer (CORBA::Boolean orphan)
   {
-    IR::ComponentDef **result = 0;
+    IR_ComponentDef **result = 0;
     if (orphan == 0)
     {
       // We retain ownership.
@@ -4269,7 +3881,7 @@
       }
       else
       {
-        result = ACE_reinterpret_cast (IR::ComponentDef**, this->buffer_);
+        result = ACE_reinterpret_cast (IR_ComponentDef**, this->buffer_);
       }
     }
     else // if (orphan == 1)
@@ -4278,7 +3890,7 @@
       {
         // We set the state back to default and relinquish
         // ownership.
-        result = ACE_reinterpret_cast(IR::ComponentDef**,this->buffer_);
+        result = ACE_reinterpret_cast(IR_ComponentDef**,this->buffer_);
         this->maximum_ = 0;
         this->length_ = 0;
         this->buffer_ = 0;
@@ -4288,60 +3900,53 @@
     return result;
   }
   
-  ACE_INLINE const IR::ComponentDef* *
-  IR::_TAO_Unbounded_Object_Sequence_IR_ComponentDefSeq::get_buffer (void) const
+  ACE_INLINE const IR_ComponentDef* *
+  _TAO_Unbounded_Object_Sequence_IR_ComponentDefSeq::get_buffer (void) const
   {
-    return ACE_reinterpret_cast(const IR::ComponentDef ** ACE_CAST_CONST, this->buffer_);
+    return ACE_reinterpret_cast(const IR_ComponentDef ** ACE_CAST_CONST, this->buffer_);
   }
   
-  
-#endif /* end #if !defined */
-
-
 #endif /* !TAO_USE_SEQUENCE_TEMPLATES */ 
 
-#if !defined (_IR_COMPONENTDEFSEQ_CI_)
-#define _IR_COMPONENTDEFSEQ_CI_
-
 // *************************************************************
-// Inline operations for class IR::ComponentDefSeq_var
+// Inline operations for class IR_ComponentDefSeq_var
 // *************************************************************
 
 ACE_INLINE
-IR::ComponentDefSeq_var::ComponentDefSeq_var (void) // default constructor
+IR_ComponentDefSeq_var::IR_ComponentDefSeq_var (void) // default constructor
   : ptr_ (0)
 {}
 
 ACE_INLINE
-IR::ComponentDefSeq_var::ComponentDefSeq_var (ComponentDefSeq *p)
+IR_ComponentDefSeq_var::IR_ComponentDefSeq_var (IR_ComponentDefSeq *p)
   : ptr_ (p)
 {}
 
 ACE_INLINE
-IR::ComponentDefSeq_var::ComponentDefSeq_var (const ::IR::ComponentDefSeq_var &p) // copy constructor
+IR_ComponentDefSeq_var::IR_ComponentDefSeq_var (const ::IR_ComponentDefSeq_var &p) // copy constructor
 {
   if (p.ptr_)
-    ACE_NEW (this->ptr_, ::IR::ComponentDefSeq (*p.ptr_));
+    ACE_NEW (this->ptr_, ::IR_ComponentDefSeq (*p.ptr_));
   else
     this->ptr_ = 0;
 }
 
 ACE_INLINE
-IR::ComponentDefSeq_var::~ComponentDefSeq_var (void) // destructor
+IR_ComponentDefSeq_var::~IR_ComponentDefSeq_var (void) // destructor
 {
   delete this->ptr_;
 }
 
-ACE_INLINE IR::ComponentDefSeq_var &
-IR::ComponentDefSeq_var::operator= (ComponentDefSeq *p)
+ACE_INLINE IR_ComponentDefSeq_var &
+IR_ComponentDefSeq_var::operator= (IR_ComponentDefSeq *p)
 {
   delete this->ptr_;
   this->ptr_ = p;
   return *this;
 }
 
-ACE_INLINE ::IR::ComponentDefSeq_var &
-IR::ComponentDefSeq_var::operator= (const ::IR::ComponentDefSeq_var &p)
+ACE_INLINE IR_ComponentDefSeq_var &
+IR_ComponentDefSeq_var::operator= (const ::IR_ComponentDefSeq_var &p) // deep copy
 {
   if (this != &p)
     {
@@ -4352,12 +3957,12 @@
         }
       else
         {
-          ComponentDefSeq *deep_copy =
-            new ComponentDefSeq (*p.ptr_);
+          IR_ComponentDefSeq *deep_copy = 
+            new IR_ComponentDefSeq (*p.ptr_);
           
           if (deep_copy != 0)
             {
-              ComponentDefSeq *tmp = deep_copy;
+              IR_ComponentDefSeq *tmp = deep_copy;
               deep_copy = this->ptr_;
               this->ptr_ = tmp;
               delete deep_copy;
@@ -4368,97 +3973,97 @@
   return *this;
 }
 
-ACE_INLINE const ::IR::ComponentDefSeq *
-IR::ComponentDefSeq_var::operator-> (void) const
+ACE_INLINE const ::IR_ComponentDefSeq *
+IR_ComponentDefSeq_var::operator-> (void) const
 {
   return this->ptr_;
 }
 
-ACE_INLINE ::IR::ComponentDefSeq *
-IR::ComponentDefSeq_var::operator-> (void)
+ACE_INLINE ::IR_ComponentDefSeq *
+IR_ComponentDefSeq_var::operator-> (void)
 {
   return this->ptr_;
 }
 
 ACE_INLINE 
-IR::ComponentDefSeq_var::operator const ::IR::ComponentDefSeq &() const // cast
+IR_ComponentDefSeq_var::operator const ::IR_ComponentDefSeq &() const // cast
 {
   return *this->ptr_;
 }
 
 ACE_INLINE 
-IR::ComponentDefSeq_var::operator ::IR::ComponentDefSeq &() // cast 
+IR_ComponentDefSeq_var::operator ::IR_ComponentDefSeq &() // cast 
 {
   return *this->ptr_;
 }
 
 ACE_INLINE 
-IR::ComponentDefSeq_var::operator ::IR::ComponentDefSeq &() const // cast 
+IR_ComponentDefSeq_var::operator ::IR_ComponentDefSeq &() const // cast 
 {
   return *this->ptr_;
 }
 
 // variable-size types only
 ACE_INLINE
-IR::ComponentDefSeq_var::operator ::IR::ComponentDefSeq *&() // cast 
+IR_ComponentDefSeq_var::operator ::IR_ComponentDefSeq *&() // cast 
 {
   return this->ptr_;
 }
 
-ACE_INLINE TAO_Object_Manager<IR::ComponentDef, IR::ComponentDef_var>
-IR::ComponentDefSeq_var::operator[] (CORBA::ULong index)
+ACE_INLINE TAO_Object_Manager<IR_ComponentDef, IR_ComponentDef_var>
+IR_ComponentDefSeq_var::operator[] (CORBA::ULong index)
 {
   return this->ptr_->operator[] (index);
 }
 
-ACE_INLINE const ::IR::ComponentDefSeq &
-IR::ComponentDefSeq_var::in (void) const
+ACE_INLINE const ::IR_ComponentDefSeq &
+IR_ComponentDefSeq_var::in (void) const
 {
   return *this->ptr_;
 }
 
-ACE_INLINE ::IR::ComponentDefSeq &
-IR::ComponentDefSeq_var::inout (void)
+ACE_INLINE ::IR_ComponentDefSeq &
+IR_ComponentDefSeq_var::inout (void)
 {
   return *this->ptr_;
 }
 
 // mapping for variable size 
-ACE_INLINE ::IR::ComponentDefSeq *&
-IR::ComponentDefSeq_var::out (void)
+ACE_INLINE ::IR_ComponentDefSeq *&
+IR_ComponentDefSeq_var::out (void)
 {
   delete this->ptr_;
   this->ptr_ = 0;
   return this->ptr_;
 }
 
-ACE_INLINE ::IR::ComponentDefSeq *
-IR::ComponentDefSeq_var::_retn (void)
+ACE_INLINE ::IR_ComponentDefSeq *
+IR_ComponentDefSeq_var::_retn (void)
 {
-  ::IR::ComponentDefSeq *tmp = this->ptr_;
+  ::IR_ComponentDefSeq *tmp = this->ptr_;
   this->ptr_ = 0;
   return tmp;
 }
 
-ACE_INLINE ::IR::ComponentDefSeq *
-IR::ComponentDefSeq_var::ptr (void) const
+ACE_INLINE ::IR_ComponentDefSeq *
+IR_ComponentDefSeq_var::ptr (void) const
 {
   return this->ptr_;
 }
 
 // *************************************************************
-// Inline operations for class IR::ComponentDefSeq_out
+// Inline operations for class IR_ComponentDefSeq_out
 // *************************************************************
 
 ACE_INLINE
-IR::ComponentDefSeq_out::ComponentDefSeq_out (ComponentDefSeq *&p)
+IR_ComponentDefSeq_out::IR_ComponentDefSeq_out (IR_ComponentDefSeq *&p)
   : ptr_ (p)
 {
   this->ptr_ = 0;
 }
 
 ACE_INLINE
-IR::ComponentDefSeq_out::ComponentDefSeq_out (ComponentDefSeq_var &p) // constructor from _var
+IR_ComponentDefSeq_out::IR_ComponentDefSeq_out (IR_ComponentDefSeq_var &p) // constructor from _var
   : ptr_ (p.out ())
 {
   delete this->ptr_;
@@ -4466,57 +4071,50 @@
 }
 
 ACE_INLINE
-IR::ComponentDefSeq_out::ComponentDefSeq_out (const ::IR::ComponentDefSeq_out &p) // copy constructor
-  : ptr_ (ACE_const_cast (ComponentDefSeq_out&, p).ptr_)
+IR_ComponentDefSeq_out::IR_ComponentDefSeq_out (const ::IR_ComponentDefSeq_out &p) // copy constructor
+  : ptr_ (ACE_const_cast (IR_ComponentDefSeq_out&, p).ptr_)
 {}
 
-ACE_INLINE ::IR::ComponentDefSeq_out &
-IR::ComponentDefSeq_out::operator= (const ::IR::ComponentDefSeq_out &p)
+ACE_INLINE ::IR_ComponentDefSeq_out &
+IR_ComponentDefSeq_out::operator= (const ::IR_ComponentDefSeq_out &p)
 {
-  this->ptr_ = ACE_const_cast (ComponentDefSeq_out&, p).ptr_;
+  this->ptr_ = ACE_const_cast (IR_ComponentDefSeq_out&, p).ptr_;
   return *this;
 }
 
-ACE_INLINE ::IR::ComponentDefSeq_out &
-IR::ComponentDefSeq_out::operator= (ComponentDefSeq *p)
+ACE_INLINE ::IR_ComponentDefSeq_out &
+IR_ComponentDefSeq_out::operator= (IR_ComponentDefSeq *p)
 {
   this->ptr_ = p;
   return *this;
 }
 
 ACE_INLINE 
-IR::ComponentDefSeq_out::operator ::IR::ComponentDefSeq *&() // cast
+IR_ComponentDefSeq_out::operator ::IR_ComponentDefSeq *&() // cast
 {
   return this->ptr_;
 }
 
-ACE_INLINE ::IR::ComponentDefSeq *&
-IR::ComponentDefSeq_out::ptr (void) // ptr
+ACE_INLINE ::IR_ComponentDefSeq *&
+IR_ComponentDefSeq_out::ptr (void) // ptr
 {
   return this->ptr_;
 }
 
-ACE_INLINE ::IR::ComponentDefSeq *
-IR::ComponentDefSeq_out::operator-> (void)
+ACE_INLINE ::IR_ComponentDefSeq *
+IR_ComponentDefSeq_out::operator-> (void)
 {
   return this->ptr_;
 }
 
-ACE_INLINE TAO_Object_Manager<IR::ComponentDef, IR::ComponentDef_var>
-IR::ComponentDefSeq_out::operator[] (CORBA::ULong index)
+ACE_INLINE TAO_Object_Manager<IR_ComponentDef, IR_ComponentDef_var>
+IR_ComponentDefSeq_out::operator[] (CORBA::ULong index)
 {
   return this->ptr_->operator[] (index);
 }
 
-
-#endif /* end #if !defined */
-
-
-#if !defined (_IR_PROVIDESDEF___CI_)
-#define _IR_PROVIDESDEF___CI_
-
 ACE_INLINE
-IR::ProvidesDef::ProvidesDef (
+IR_ProvidesDef::IR_ProvidesDef (
     TAO_Stub *objref,
     CORBA::Boolean _tao_collocated,
     TAO_Abstract_ServantBase *servant
@@ -4526,200 +4124,179 @@
   this->IR_ProvidesDef_setup_collocation (_tao_collocated);
 }
 
-
-#endif /* end #if !defined */
-
-
-#if !defined (_IR_PROVIDESDEF___VAR_CI_)
-#define _IR_PROVIDESDEF___VAR_CI_
-
 // *************************************************************
-// Inline operations for class IR::ProvidesDef_var
+// Inline operations for class IR_ProvidesDef_var
 // *************************************************************
 
 ACE_INLINE
-IR::ProvidesDef_var::ProvidesDef_var (void) // default constructor
-  : ptr_ (IR::ProvidesDef::_nil ())
+IR_ProvidesDef_var::IR_ProvidesDef_var (void) // default constructor
+  : ptr_ (IR_ProvidesDef::_nil ())
 {}
 
-ACE_INLINE IR::ProvidesDef_ptr 
-IR::ProvidesDef_var::ptr (void) const
+ACE_INLINE IR_ProvidesDef_ptr 
+IR_ProvidesDef_var::ptr (void) const
 {
   return this->ptr_;
 }
 
 ACE_INLINE
-IR::ProvidesDef_var::ProvidesDef_var (const IR::ProvidesDef_var &p) // copy constructor
+IR_ProvidesDef_var::IR_ProvidesDef_var (const IR_ProvidesDef_var &p) // copy constructor
   : TAO_Base_var (),
-    ptr_ (ProvidesDef::_duplicate (p.ptr ()))
+    ptr_ (IR_ProvidesDef::_duplicate (p.ptr ()))
 {}
 
 ACE_INLINE
-IR::ProvidesDef_var::~ProvidesDef_var (void) // destructor
+IR_ProvidesDef_var::~IR_ProvidesDef_var (void) // destructor
 {
   CORBA::release (this->ptr_);
 }
 
-ACE_INLINE IR::ProvidesDef_var &
-IR::ProvidesDef_var::operator= (IR::ProvidesDef_ptr p)
+ACE_INLINE IR_ProvidesDef_var &
+IR_ProvidesDef_var::operator= (IR_ProvidesDef_ptr p)
 {
   CORBA::release (this->ptr_);
   this->ptr_ = p;
   return *this;
 }
 
-ACE_INLINE IR::ProvidesDef_var &
-IR::ProvidesDef_var::operator= (const IR::ProvidesDef_var &p)
+ACE_INLINE IR_ProvidesDef_var &
+IR_ProvidesDef_var::operator= (const IR_ProvidesDef_var &p)
 {
   if (this != &p)
   {
     CORBA::release (this->ptr_);
-    this->ptr_ = IR::ProvidesDef::_duplicate (p.ptr ());
+    this->ptr_ = IR_ProvidesDef::_duplicate (p.ptr ());
   }
   return *this;
 }
 
 ACE_INLINE 
-IR::ProvidesDef_var::operator const IR::ProvidesDef_ptr &() const // cast
+IR_ProvidesDef_var::operator const IR_ProvidesDef_ptr &() const // cast
 {
   return this->ptr_;
 }
 
 ACE_INLINE 
-IR::ProvidesDef_var::operator IR::ProvidesDef_ptr &() // cast 
+IR_ProvidesDef_var::operator IR_ProvidesDef_ptr &() // cast 
 {
   return this->ptr_;
 }
 
-ACE_INLINE IR::ProvidesDef_ptr 
-IR::ProvidesDef_var::operator-> (void) const
+ACE_INLINE IR_ProvidesDef_ptr 
+IR_ProvidesDef_var::operator-> (void) const
 {
   return this->ptr_;
 }
 
-ACE_INLINE IR::ProvidesDef_ptr
-IR::ProvidesDef_var::in (void) const
+ACE_INLINE IR_ProvidesDef_ptr
+IR_ProvidesDef_var::in (void) const
 {
   return this->ptr_;
 }
 
-ACE_INLINE IR::ProvidesDef_ptr &
-IR::ProvidesDef_var::inout (void)
+ACE_INLINE IR_ProvidesDef_ptr &
+IR_ProvidesDef_var::inout (void)
 {
   return this->ptr_;
 }
 
-ACE_INLINE IR::ProvidesDef_ptr &
-IR::ProvidesDef_var::out (void)
+ACE_INLINE IR_ProvidesDef_ptr &
+IR_ProvidesDef_var::out (void)
 {
   CORBA::release (this->ptr_);
-  this->ptr_ = IR::ProvidesDef::_nil ();
+  this->ptr_ = IR_ProvidesDef::_nil ();
   return this->ptr_;
 }
 
-ACE_INLINE IR::ProvidesDef_ptr 
-IR::ProvidesDef_var::_retn (void)
+ACE_INLINE IR_ProvidesDef_ptr 
+IR_ProvidesDef_var::_retn (void)
 {
   // yield ownership of managed obj reference
-  IR::ProvidesDef_ptr val = this->ptr_;
-  this->ptr_ = IR::ProvidesDef::_nil ();
+  IR_ProvidesDef_ptr val = this->ptr_;
+  this->ptr_ = IR_ProvidesDef::_nil ();
   return val;
 }
 
-
-#endif /* end #if !defined */
-
-
-#if !defined (_IR_PROVIDESDEF___OUT_CI_)
-#define _IR_PROVIDESDEF___OUT_CI_
-
 // *************************************************************
-// Inline operations for class IR::ProvidesDef_out
+// Inline operations for class IR_ProvidesDef_out
 // *************************************************************
 
 ACE_INLINE
-IR::ProvidesDef_out::ProvidesDef_out (IR::ProvidesDef_ptr &p)
+IR_ProvidesDef_out::IR_ProvidesDef_out (IR_ProvidesDef_ptr &p)
   : ptr_ (p)
 {
-  this->ptr_ = IR::ProvidesDef::_nil ();
+  this->ptr_ = IR_ProvidesDef::_nil ();
 }
 
 ACE_INLINE
-IR::ProvidesDef_out::ProvidesDef_out (IR::ProvidesDef_var &p) // constructor from _var
+IR_ProvidesDef_out::IR_ProvidesDef_out (IR_ProvidesDef_var &p) // constructor from _var
   : ptr_ (p.out ())
 {
   CORBA::release (this->ptr_);
-  this->ptr_ = IR::ProvidesDef::_nil ();
+  this->ptr_ = IR_ProvidesDef::_nil ();
 }
 
 ACE_INLINE
-IR::ProvidesDef_out::ProvidesDef_out (const IR::ProvidesDef_out &p) // copy constructor
-  : ptr_ (ACE_const_cast (IR::ProvidesDef_out&,p).ptr_)
+IR_ProvidesDef_out::IR_ProvidesDef_out (const IR_ProvidesDef_out &p) // copy constructor
+  : ptr_ (ACE_const_cast (IR_ProvidesDef_out&,p).ptr_)
 {}
 
-ACE_INLINE IR::ProvidesDef_out &
-IR::ProvidesDef_out::operator= (const IR::ProvidesDef_out &p)
+ACE_INLINE IR_ProvidesDef_out &
+IR_ProvidesDef_out::operator= (const IR_ProvidesDef_out &p)
 {
-  this->ptr_ = ACE_const_cast (IR::ProvidesDef_out&,p).ptr_;
+  this->ptr_ = ACE_const_cast (IR_ProvidesDef_out&,p).ptr_;
   return *this;
 }
 
-ACE_INLINE IR::ProvidesDef_out &
-IR::ProvidesDef_out::operator= (const IR::ProvidesDef_var &p)
+ACE_INLINE IR_ProvidesDef_out &
+IR_ProvidesDef_out::operator= (const IR_ProvidesDef_var &p)
 {
-  this->ptr_ = IR::ProvidesDef::_duplicate (p.ptr ());
+  this->ptr_ = IR_ProvidesDef::_duplicate (p.ptr ());
   return *this;
 }
 
-ACE_INLINE IR::ProvidesDef_out &
-IR::ProvidesDef_out::operator= (IR::ProvidesDef_ptr p)
+ACE_INLINE IR_ProvidesDef_out &
+IR_ProvidesDef_out::operator= (IR_ProvidesDef_ptr p)
 {
   this->ptr_ = p;
   return *this;
 }
 
 ACE_INLINE 
-IR::ProvidesDef_out::operator IR::ProvidesDef_ptr &() // cast
+IR_ProvidesDef_out::operator IR_ProvidesDef_ptr &() // cast
 {
   return this->ptr_;
 }
 
-ACE_INLINE IR::ProvidesDef_ptr &
-IR::ProvidesDef_out::ptr (void) // ptr
+ACE_INLINE IR_ProvidesDef_ptr &
+IR_ProvidesDef_out::ptr (void) // ptr
 {
   return this->ptr_;
 }
 
-ACE_INLINE IR::ProvidesDef_ptr 
-IR::ProvidesDef_out::operator-> (void)
+ACE_INLINE IR_ProvidesDef_ptr 
+IR_ProvidesDef_out::operator-> (void)
 {
   return this->ptr_;
 }
 
-
-#endif /* end #if !defined */
-
-
 #if !defined (TAO_USE_SEQUENCE_TEMPLATES)
   
-#if !defined (__TAO_UNBOUNDED_OBJECT_SEQUENCE_IR_PROVIDESDEFSEQ_CI_)
-#define __TAO_UNBOUNDED_OBJECT_SEQUENCE_IR_PROVIDESDEFSEQ_CI_
-
-  ACE_INLINE IR::ProvidesDef **
-  IR::_TAO_Unbounded_Object_Sequence_IR_ProvidesDefSeq::allocbuf (CORBA::ULong nelems)
+  ACE_INLINE IR_ProvidesDef **
+  _TAO_Unbounded_Object_Sequence_IR_ProvidesDefSeq::allocbuf (CORBA::ULong nelems)
   {
-    IR::ProvidesDef **buf = 0;
+    IR_ProvidesDef **buf = 0;
     
-    ACE_NEW_RETURN (buf, IR::ProvidesDef*[nelems], 0);
+    ACE_NEW_RETURN (buf, IR_ProvidesDef*[nelems], 0);
     
     for (CORBA::ULong i = 0; i < nelems; i++)
-      buf[i] = IR::ProvidesDef::_nil ();
+      buf[i] = IR_ProvidesDef::_nil ();
     
     return buf;
   }
   
   ACE_INLINE void 
-  IR::_TAO_Unbounded_Object_Sequence_IR_ProvidesDefSeq::freebuf (IR::ProvidesDef **buffer)
+  _TAO_Unbounded_Object_Sequence_IR_ProvidesDefSeq::freebuf (IR_ProvidesDef **buffer)
   {
     if (buffer == 0)
       return;
@@ -4727,36 +4304,36 @@
   }
   
   ACE_INLINE
-  IR::_TAO_Unbounded_Object_Sequence_IR_ProvidesDefSeq::_TAO_Unbounded_Object_Sequence_IR_ProvidesDefSeq (void)
+  _TAO_Unbounded_Object_Sequence_IR_ProvidesDefSeq::_TAO_Unbounded_Object_Sequence_IR_ProvidesDefSeq (void)
   {
   }
   
   ACE_INLINE
-  IR::_TAO_Unbounded_Object_Sequence_IR_ProvidesDefSeq::_TAO_Unbounded_Object_Sequence_IR_ProvidesDefSeq (CORBA::ULong maximum)
+  _TAO_Unbounded_Object_Sequence_IR_ProvidesDefSeq::_TAO_Unbounded_Object_Sequence_IR_ProvidesDefSeq (CORBA::ULong maximum)
     : TAO_Unbounded_Base_Sequence (maximum, _TAO_Unbounded_Object_Sequence_IR_ProvidesDefSeq::allocbuf (maximum))
   {
   }
   
   ACE_INLINE
-  IR::_TAO_Unbounded_Object_Sequence_IR_ProvidesDefSeq::_TAO_Unbounded_Object_Sequence_IR_ProvidesDefSeq (CORBA::ULong maximum,
+  _TAO_Unbounded_Object_Sequence_IR_ProvidesDefSeq::_TAO_Unbounded_Object_Sequence_IR_ProvidesDefSeq (CORBA::ULong maximum,
     CORBA::ULong length,
-    IR::ProvidesDef* *value,
+    IR_ProvidesDef* *value,
     CORBA::Boolean release)
   : TAO_Unbounded_Base_Sequence (maximum, length, value, release)
   {
   }
   
   ACE_INLINE
-  IR::_TAO_Unbounded_Object_Sequence_IR_ProvidesDefSeq::_TAO_Unbounded_Object_Sequence_IR_ProvidesDefSeq(const _TAO_Unbounded_Object_Sequence_IR_ProvidesDefSeq &rhs)
+  _TAO_Unbounded_Object_Sequence_IR_ProvidesDefSeq::_TAO_Unbounded_Object_Sequence_IR_ProvidesDefSeq(const _TAO_Unbounded_Object_Sequence_IR_ProvidesDefSeq &rhs)
     : TAO_Unbounded_Base_Sequence (rhs)
   {
     if (rhs.buffer_ != 0)
     {
-      IR::ProvidesDef **tmp1 = _TAO_Unbounded_Object_Sequence_IR_ProvidesDefSeq::allocbuf (this->maximum_);
-      IR::ProvidesDef ** const tmp2 = ACE_reinterpret_cast (IR::ProvidesDef ** ACE_CAST_CONST, rhs.buffer_);
+      IR_ProvidesDef **tmp1 = _TAO_Unbounded_Object_Sequence_IR_ProvidesDefSeq::allocbuf (this->maximum_);
+      IR_ProvidesDef ** const tmp2 = ACE_reinterpret_cast (IR_ProvidesDef ** ACE_CAST_CONST, rhs.buffer_);
       
       for (CORBA::ULong i = 0; i < rhs.length_; ++i)
-        tmp1[i] = IR::ProvidesDef::_duplicate (tmp2[i]);
+        tmp1[i] = IR_ProvidesDef::_duplicate (tmp2[i]);
       
       this->buffer_ = tmp1;
     }
@@ -4766,20 +4343,20 @@
     }
   }
   
-  ACE_INLINE IR::_TAO_Unbounded_Object_Sequence_IR_ProvidesDefSeq &
-  IR::_TAO_Unbounded_Object_Sequence_IR_ProvidesDefSeq::operator= (const _TAO_Unbounded_Object_Sequence_IR_ProvidesDefSeq &rhs)
+  ACE_INLINE _TAO_Unbounded_Object_Sequence_IR_ProvidesDefSeq &
+  _TAO_Unbounded_Object_Sequence_IR_ProvidesDefSeq::operator= (const _TAO_Unbounded_Object_Sequence_IR_ProvidesDefSeq &rhs)
   {
     if (this == &rhs)
       return *this;
     
     if (this->release_)
     {
-      IR::ProvidesDef **tmp = ACE_reinterpret_cast (IR::ProvidesDef **, this->buffer_);
+      IR_ProvidesDef **tmp = ACE_reinterpret_cast (IR_ProvidesDef **, this->buffer_);
       
       for (CORBA::ULong i = 0; i < this->length_; ++i)
       {
         CORBA::release (tmp[i]);
-        tmp[i] = IR::ProvidesDef::_nil ();
+        tmp[i] = IR_ProvidesDef::_nil ();
       }
       if (this->maximum_ < rhs.maximum_)
       {
@@ -4792,28 +4369,28 @@
     
     TAO_Unbounded_Base_Sequence::operator= (rhs);
     
-    IR::ProvidesDef **tmp1 = ACE_reinterpret_cast (IR::ProvidesDef **, this->buffer_);
-    IR::ProvidesDef ** const tmp2 = ACE_reinterpret_cast (IR::ProvidesDef ** ACE_CAST_CONST, rhs.buffer_);
+    IR_ProvidesDef **tmp1 = ACE_reinterpret_cast (IR_ProvidesDef **, this->buffer_);
+    IR_ProvidesDef ** const tmp2 = ACE_reinterpret_cast (IR_ProvidesDef ** ACE_CAST_CONST, rhs.buffer_);
     
     for (CORBA::ULong i = 0; i < rhs.length_; ++i)
-      tmp1[i] = IR::ProvidesDef::_duplicate (tmp2[i]);
+      tmp1[i] = IR_ProvidesDef::_duplicate (tmp2[i]);
     
     return *this;
   }
   
-  ACE_INLINE TAO_Object_Manager<IR::ProvidesDef,IR::ProvidesDef_var>
-  IR::_TAO_Unbounded_Object_Sequence_IR_ProvidesDefSeq::operator[] (CORBA::ULong index) const
+  ACE_INLINE TAO_Object_Manager<IR_ProvidesDef,IR_ProvidesDef_var>
+  _TAO_Unbounded_Object_Sequence_IR_ProvidesDefSeq::operator[] (CORBA::ULong index) const
   // read-write accessor
   {
     ACE_ASSERT (index < this->maximum_);
-    IR::ProvidesDef ** const tmp = ACE_reinterpret_cast (IR::ProvidesDef ** ACE_CAST_CONST, this->buffer_);
-    return TAO_Object_Manager<IR::ProvidesDef,IR::ProvidesDef_var> (tmp + index, this->release_);
+    IR_ProvidesDef ** const tmp = ACE_reinterpret_cast (IR_ProvidesDef ** ACE_CAST_CONST, this->buffer_);
+    return TAO_Object_Manager<IR_ProvidesDef,IR_ProvidesDef_var> (tmp + index, this->release_);
   }
   
-  ACE_INLINE IR::ProvidesDef* *
-  IR::_TAO_Unbounded_Object_Sequence_IR_ProvidesDefSeq::get_buffer (CORBA::Boolean orphan)
+  ACE_INLINE IR_ProvidesDef* *
+  _TAO_Unbounded_Object_Sequence_IR_ProvidesDefSeq::get_buffer (CORBA::Boolean orphan)
   {
-    IR::ProvidesDef **result = 0;
+    IR_ProvidesDef **result = 0;
     if (orphan == 0)
     {
       // We retain ownership.
@@ -4825,7 +4402,7 @@
       }
       else
       {
-        result = ACE_reinterpret_cast (IR::ProvidesDef**, this->buffer_);
+        result = ACE_reinterpret_cast (IR_ProvidesDef**, this->buffer_);
       }
     }
     else // if (orphan == 1)
@@ -4834,7 +4411,7 @@
       {
         // We set the state back to default and relinquish
         // ownership.
-        result = ACE_reinterpret_cast(IR::ProvidesDef**,this->buffer_);
+        result = ACE_reinterpret_cast(IR_ProvidesDef**,this->buffer_);
         this->maximum_ = 0;
         this->length_ = 0;
         this->buffer_ = 0;
@@ -4844,60 +4421,53 @@
     return result;
   }
   
-  ACE_INLINE const IR::ProvidesDef* *
-  IR::_TAO_Unbounded_Object_Sequence_IR_ProvidesDefSeq::get_buffer (void) const
+  ACE_INLINE const IR_ProvidesDef* *
+  _TAO_Unbounded_Object_Sequence_IR_ProvidesDefSeq::get_buffer (void) const
   {
-    return ACE_reinterpret_cast(const IR::ProvidesDef ** ACE_CAST_CONST, this->buffer_);
+    return ACE_reinterpret_cast(const IR_ProvidesDef ** ACE_CAST_CONST, this->buffer_);
   }
   
-  
-#endif /* end #if !defined */
-
-
 #endif /* !TAO_USE_SEQUENCE_TEMPLATES */ 
 
-#if !defined (_IR_PROVIDESDEFSEQ_CI_)
-#define _IR_PROVIDESDEFSEQ_CI_
-
 // *************************************************************
-// Inline operations for class IR::ProvidesDefSeq_var
+// Inline operations for class IR_ProvidesDefSeq_var
 // *************************************************************
 
 ACE_INLINE
-IR::ProvidesDefSeq_var::ProvidesDefSeq_var (void) // default constructor
+IR_ProvidesDefSeq_var::IR_ProvidesDefSeq_var (void) // default constructor
   : ptr_ (0)
 {}
 
 ACE_INLINE
-IR::ProvidesDefSeq_var::ProvidesDefSeq_var (ProvidesDefSeq *p)
+IR_ProvidesDefSeq_var::IR_ProvidesDefSeq_var (IR_ProvidesDefSeq *p)
   : ptr_ (p)
 {}
 
 ACE_INLINE
-IR::ProvidesDefSeq_var::ProvidesDefSeq_var (const ::IR::ProvidesDefSeq_var &p) // copy constructor
+IR_ProvidesDefSeq_var::IR_ProvidesDefSeq_var (const ::IR_ProvidesDefSeq_var &p) // copy constructor
 {
   if (p.ptr_)
-    ACE_NEW (this->ptr_, ::IR::ProvidesDefSeq (*p.ptr_));
+    ACE_NEW (this->ptr_, ::IR_ProvidesDefSeq (*p.ptr_));
   else
     this->ptr_ = 0;
 }
 
 ACE_INLINE
-IR::ProvidesDefSeq_var::~ProvidesDefSeq_var (void) // destructor
+IR_ProvidesDefSeq_var::~IR_ProvidesDefSeq_var (void) // destructor
 {
   delete this->ptr_;
 }
 
-ACE_INLINE IR::ProvidesDefSeq_var &
-IR::ProvidesDefSeq_var::operator= (ProvidesDefSeq *p)
+ACE_INLINE IR_ProvidesDefSeq_var &
+IR_ProvidesDefSeq_var::operator= (IR_ProvidesDefSeq *p)
 {
   delete this->ptr_;
   this->ptr_ = p;
   return *this;
 }
 
-ACE_INLINE ::IR::ProvidesDefSeq_var &
-IR::ProvidesDefSeq_var::operator= (const ::IR::ProvidesDefSeq_var &p)
+ACE_INLINE IR_ProvidesDefSeq_var &
+IR_ProvidesDefSeq_var::operator= (const ::IR_ProvidesDefSeq_var &p) // deep copy
 {
   if (this != &p)
     {
@@ -4908,12 +4478,12 @@
         }
       else
         {
-          ProvidesDefSeq *deep_copy =
-            new ProvidesDefSeq (*p.ptr_);
+          IR_ProvidesDefSeq *deep_copy = 
+            new IR_ProvidesDefSeq (*p.ptr_);
           
           if (deep_copy != 0)
             {
-              ProvidesDefSeq *tmp = deep_copy;
+              IR_ProvidesDefSeq *tmp = deep_copy;
               deep_copy = this->ptr_;
               this->ptr_ = tmp;
               delete deep_copy;
@@ -4924,97 +4494,97 @@
   return *this;
 }
 
-ACE_INLINE const ::IR::ProvidesDefSeq *
-IR::ProvidesDefSeq_var::operator-> (void) const
+ACE_INLINE const ::IR_ProvidesDefSeq *
+IR_ProvidesDefSeq_var::operator-> (void) const
 {
   return this->ptr_;
 }
 
-ACE_INLINE ::IR::ProvidesDefSeq *
-IR::ProvidesDefSeq_var::operator-> (void)
+ACE_INLINE ::IR_ProvidesDefSeq *
+IR_ProvidesDefSeq_var::operator-> (void)
 {
   return this->ptr_;
 }
 
 ACE_INLINE 
-IR::ProvidesDefSeq_var::operator const ::IR::ProvidesDefSeq &() const // cast
+IR_ProvidesDefSeq_var::operator const ::IR_ProvidesDefSeq &() const // cast
 {
   return *this->ptr_;
 }
 
 ACE_INLINE 
-IR::ProvidesDefSeq_var::operator ::IR::ProvidesDefSeq &() // cast 
+IR_ProvidesDefSeq_var::operator ::IR_ProvidesDefSeq &() // cast 
 {
   return *this->ptr_;
 }
 
 ACE_INLINE 
-IR::ProvidesDefSeq_var::operator ::IR::ProvidesDefSeq &() const // cast 
+IR_ProvidesDefSeq_var::operator ::IR_ProvidesDefSeq &() const // cast 
 {
   return *this->ptr_;
 }
 
 // variable-size types only
 ACE_INLINE
-IR::ProvidesDefSeq_var::operator ::IR::ProvidesDefSeq *&() // cast 
+IR_ProvidesDefSeq_var::operator ::IR_ProvidesDefSeq *&() // cast 
 {
   return this->ptr_;
 }
 
-ACE_INLINE TAO_Object_Manager<IR::ProvidesDef, IR::ProvidesDef_var>
-IR::ProvidesDefSeq_var::operator[] (CORBA::ULong index)
+ACE_INLINE TAO_Object_Manager<IR_ProvidesDef, IR_ProvidesDef_var>
+IR_ProvidesDefSeq_var::operator[] (CORBA::ULong index)
 {
   return this->ptr_->operator[] (index);
 }
 
-ACE_INLINE const ::IR::ProvidesDefSeq &
-IR::ProvidesDefSeq_var::in (void) const
+ACE_INLINE const ::IR_ProvidesDefSeq &
+IR_ProvidesDefSeq_var::in (void) const
 {
   return *this->ptr_;
 }
 
-ACE_INLINE ::IR::ProvidesDefSeq &
-IR::ProvidesDefSeq_var::inout (void)
+ACE_INLINE ::IR_ProvidesDefSeq &
+IR_ProvidesDefSeq_var::inout (void)
 {
   return *this->ptr_;
 }
 
 // mapping for variable size 
-ACE_INLINE ::IR::ProvidesDefSeq *&
-IR::ProvidesDefSeq_var::out (void)
+ACE_INLINE ::IR_ProvidesDefSeq *&
+IR_ProvidesDefSeq_var::out (void)
 {
   delete this->ptr_;
   this->ptr_ = 0;
   return this->ptr_;
 }
 
-ACE_INLINE ::IR::ProvidesDefSeq *
-IR::ProvidesDefSeq_var::_retn (void)
+ACE_INLINE ::IR_ProvidesDefSeq *
+IR_ProvidesDefSeq_var::_retn (void)
 {
-  ::IR::ProvidesDefSeq *tmp = this->ptr_;
+  ::IR_ProvidesDefSeq *tmp = this->ptr_;
   this->ptr_ = 0;
   return tmp;
 }
 
-ACE_INLINE ::IR::ProvidesDefSeq *
-IR::ProvidesDefSeq_var::ptr (void) const
+ACE_INLINE ::IR_ProvidesDefSeq *
+IR_ProvidesDefSeq_var::ptr (void) const
 {
   return this->ptr_;
 }
 
 // *************************************************************
-// Inline operations for class IR::ProvidesDefSeq_out
+// Inline operations for class IR_ProvidesDefSeq_out
 // *************************************************************
 
 ACE_INLINE
-IR::ProvidesDefSeq_out::ProvidesDefSeq_out (ProvidesDefSeq *&p)
+IR_ProvidesDefSeq_out::IR_ProvidesDefSeq_out (IR_ProvidesDefSeq *&p)
   : ptr_ (p)
 {
   this->ptr_ = 0;
 }
 
 ACE_INLINE
-IR::ProvidesDefSeq_out::ProvidesDefSeq_out (ProvidesDefSeq_var &p) // constructor from _var
+IR_ProvidesDefSeq_out::IR_ProvidesDefSeq_out (IR_ProvidesDefSeq_var &p) // constructor from _var
   : ptr_ (p.out ())
 {
   delete this->ptr_;
@@ -5022,57 +4592,50 @@
 }
 
 ACE_INLINE
-IR::ProvidesDefSeq_out::ProvidesDefSeq_out (const ::IR::ProvidesDefSeq_out &p) // copy constructor
-  : ptr_ (ACE_const_cast (ProvidesDefSeq_out&, p).ptr_)
+IR_ProvidesDefSeq_out::IR_ProvidesDefSeq_out (const ::IR_ProvidesDefSeq_out &p) // copy constructor
+  : ptr_ (ACE_const_cast (IR_ProvidesDefSeq_out&, p).ptr_)
 {}
 
-ACE_INLINE ::IR::ProvidesDefSeq_out &
-IR::ProvidesDefSeq_out::operator= (const ::IR::ProvidesDefSeq_out &p)
+ACE_INLINE ::IR_ProvidesDefSeq_out &
+IR_ProvidesDefSeq_out::operator= (const ::IR_ProvidesDefSeq_out &p)
 {
-  this->ptr_ = ACE_const_cast (ProvidesDefSeq_out&, p).ptr_;
+  this->ptr_ = ACE_const_cast (IR_ProvidesDefSeq_out&, p).ptr_;
   return *this;
 }
 
-ACE_INLINE ::IR::ProvidesDefSeq_out &
-IR::ProvidesDefSeq_out::operator= (ProvidesDefSeq *p)
+ACE_INLINE ::IR_ProvidesDefSeq_out &
+IR_ProvidesDefSeq_out::operator= (IR_ProvidesDefSeq *p)
 {
   this->ptr_ = p;
   return *this;
 }
 
 ACE_INLINE 
-IR::ProvidesDefSeq_out::operator ::IR::ProvidesDefSeq *&() // cast
+IR_ProvidesDefSeq_out::operator ::IR_ProvidesDefSeq *&() // cast
 {
   return this->ptr_;
 }
 
-ACE_INLINE ::IR::ProvidesDefSeq *&
-IR::ProvidesDefSeq_out::ptr (void) // ptr
+ACE_INLINE ::IR_ProvidesDefSeq *&
+IR_ProvidesDefSeq_out::ptr (void) // ptr
 {
   return this->ptr_;
 }
 
-ACE_INLINE ::IR::ProvidesDefSeq *
-IR::ProvidesDefSeq_out::operator-> (void)
+ACE_INLINE ::IR_ProvidesDefSeq *
+IR_ProvidesDefSeq_out::operator-> (void)
 {
   return this->ptr_;
 }
 
-ACE_INLINE TAO_Object_Manager<IR::ProvidesDef, IR::ProvidesDef_var>
-IR::ProvidesDefSeq_out::operator[] (CORBA::ULong index)
+ACE_INLINE TAO_Object_Manager<IR_ProvidesDef, IR_ProvidesDef_var>
+IR_ProvidesDefSeq_out::operator[] (CORBA::ULong index)
 {
   return this->ptr_->operator[] (index);
 }
 
-
-#endif /* end #if !defined */
-
-
-#if !defined (_IR_USESDEF___CI_)
-#define _IR_USESDEF___CI_
-
 ACE_INLINE
-IR::UsesDef::UsesDef (
+IR_UsesDef::IR_UsesDef (
     TAO_Stub *objref,
     CORBA::Boolean _tao_collocated,
     TAO_Abstract_ServantBase *servant
@@ -5082,200 +4645,179 @@
   this->IR_UsesDef_setup_collocation (_tao_collocated);
 }
 
-
-#endif /* end #if !defined */
-
-
-#if !defined (_IR_USESDEF___VAR_CI_)
-#define _IR_USESDEF___VAR_CI_
-
 // *************************************************************
-// Inline operations for class IR::UsesDef_var
+// Inline operations for class IR_UsesDef_var
 // *************************************************************
 
 ACE_INLINE
-IR::UsesDef_var::UsesDef_var (void) // default constructor
-  : ptr_ (IR::UsesDef::_nil ())
+IR_UsesDef_var::IR_UsesDef_var (void) // default constructor
+  : ptr_ (IR_UsesDef::_nil ())
 {}
 
-ACE_INLINE IR::UsesDef_ptr 
-IR::UsesDef_var::ptr (void) const
+ACE_INLINE IR_UsesDef_ptr 
+IR_UsesDef_var::ptr (void) const
 {
   return this->ptr_;
 }
 
 ACE_INLINE
-IR::UsesDef_var::UsesDef_var (const IR::UsesDef_var &p) // copy constructor
+IR_UsesDef_var::IR_UsesDef_var (const IR_UsesDef_var &p) // copy constructor
   : TAO_Base_var (),
-    ptr_ (UsesDef::_duplicate (p.ptr ()))
+    ptr_ (IR_UsesDef::_duplicate (p.ptr ()))
 {}
 
 ACE_INLINE
-IR::UsesDef_var::~UsesDef_var (void) // destructor
+IR_UsesDef_var::~IR_UsesDef_var (void) // destructor
 {
   CORBA::release (this->ptr_);
 }
 
-ACE_INLINE IR::UsesDef_var &
-IR::UsesDef_var::operator= (IR::UsesDef_ptr p)
+ACE_INLINE IR_UsesDef_var &
+IR_UsesDef_var::operator= (IR_UsesDef_ptr p)
 {
   CORBA::release (this->ptr_);
   this->ptr_ = p;
   return *this;
 }
 
-ACE_INLINE IR::UsesDef_var &
-IR::UsesDef_var::operator= (const IR::UsesDef_var &p)
+ACE_INLINE IR_UsesDef_var &
+IR_UsesDef_var::operator= (const IR_UsesDef_var &p)
 {
   if (this != &p)
   {
     CORBA::release (this->ptr_);
-    this->ptr_ = IR::UsesDef::_duplicate (p.ptr ());
+    this->ptr_ = IR_UsesDef::_duplicate (p.ptr ());
   }
   return *this;
 }
 
 ACE_INLINE 
-IR::UsesDef_var::operator const IR::UsesDef_ptr &() const // cast
+IR_UsesDef_var::operator const IR_UsesDef_ptr &() const // cast
 {
   return this->ptr_;
 }
 
 ACE_INLINE 
-IR::UsesDef_var::operator IR::UsesDef_ptr &() // cast 
+IR_UsesDef_var::operator IR_UsesDef_ptr &() // cast 
 {
   return this->ptr_;
 }
 
-ACE_INLINE IR::UsesDef_ptr 
-IR::UsesDef_var::operator-> (void) const
+ACE_INLINE IR_UsesDef_ptr 
+IR_UsesDef_var::operator-> (void) const
 {
   return this->ptr_;
 }
 
-ACE_INLINE IR::UsesDef_ptr
-IR::UsesDef_var::in (void) const
+ACE_INLINE IR_UsesDef_ptr
+IR_UsesDef_var::in (void) const
 {
   return this->ptr_;
 }
 
-ACE_INLINE IR::UsesDef_ptr &
-IR::UsesDef_var::inout (void)
+ACE_INLINE IR_UsesDef_ptr &
+IR_UsesDef_var::inout (void)
 {
   return this->ptr_;
 }
 
-ACE_INLINE IR::UsesDef_ptr &
-IR::UsesDef_var::out (void)
+ACE_INLINE IR_UsesDef_ptr &
+IR_UsesDef_var::out (void)
 {
   CORBA::release (this->ptr_);
-  this->ptr_ = IR::UsesDef::_nil ();
+  this->ptr_ = IR_UsesDef::_nil ();
   return this->ptr_;
 }
 
-ACE_INLINE IR::UsesDef_ptr 
-IR::UsesDef_var::_retn (void)
+ACE_INLINE IR_UsesDef_ptr 
+IR_UsesDef_var::_retn (void)
 {
   // yield ownership of managed obj reference
-  IR::UsesDef_ptr val = this->ptr_;
-  this->ptr_ = IR::UsesDef::_nil ();
+  IR_UsesDef_ptr val = this->ptr_;
+  this->ptr_ = IR_UsesDef::_nil ();
   return val;
 }
 
-
-#endif /* end #if !defined */
-
-
-#if !defined (_IR_USESDEF___OUT_CI_)
-#define _IR_USESDEF___OUT_CI_
-
-// *************************************************************
-// Inline operations for class IR::UsesDef_out
-// *************************************************************
+// *************************************************************
+// Inline operations for class IR_UsesDef_out
+// *************************************************************
 
 ACE_INLINE
-IR::UsesDef_out::UsesDef_out (IR::UsesDef_ptr &p)
+IR_UsesDef_out::IR_UsesDef_out (IR_UsesDef_ptr &p)
   : ptr_ (p)
 {
-  this->ptr_ = IR::UsesDef::_nil ();
+  this->ptr_ = IR_UsesDef::_nil ();
 }
 
 ACE_INLINE
-IR::UsesDef_out::UsesDef_out (IR::UsesDef_var &p) // constructor from _var
+IR_UsesDef_out::IR_UsesDef_out (IR_UsesDef_var &p) // constructor from _var
   : ptr_ (p.out ())
 {
   CORBA::release (this->ptr_);
-  this->ptr_ = IR::UsesDef::_nil ();
+  this->ptr_ = IR_UsesDef::_nil ();
 }
 
 ACE_INLINE
-IR::UsesDef_out::UsesDef_out (const IR::UsesDef_out &p) // copy constructor
-  : ptr_ (ACE_const_cast (IR::UsesDef_out&,p).ptr_)
+IR_UsesDef_out::IR_UsesDef_out (const IR_UsesDef_out &p) // copy constructor
+  : ptr_ (ACE_const_cast (IR_UsesDef_out&,p).ptr_)
 {}
 
-ACE_INLINE IR::UsesDef_out &
-IR::UsesDef_out::operator= (const IR::UsesDef_out &p)
+ACE_INLINE IR_UsesDef_out &
+IR_UsesDef_out::operator= (const IR_UsesDef_out &p)
 {
-  this->ptr_ = ACE_const_cast (IR::UsesDef_out&,p).ptr_;
+  this->ptr_ = ACE_const_cast (IR_UsesDef_out&,p).ptr_;
   return *this;
 }
 
-ACE_INLINE IR::UsesDef_out &
-IR::UsesDef_out::operator= (const IR::UsesDef_var &p)
+ACE_INLINE IR_UsesDef_out &
+IR_UsesDef_out::operator= (const IR_UsesDef_var &p)
 {
-  this->ptr_ = IR::UsesDef::_duplicate (p.ptr ());
+  this->ptr_ = IR_UsesDef::_duplicate (p.ptr ());
   return *this;
 }
 
-ACE_INLINE IR::UsesDef_out &
-IR::UsesDef_out::operator= (IR::UsesDef_ptr p)
+ACE_INLINE IR_UsesDef_out &
+IR_UsesDef_out::operator= (IR_UsesDef_ptr p)
 {
   this->ptr_ = p;
   return *this;
 }
 
 ACE_INLINE 
-IR::UsesDef_out::operator IR::UsesDef_ptr &() // cast
+IR_UsesDef_out::operator IR_UsesDef_ptr &() // cast
 {
   return this->ptr_;
 }
 
-ACE_INLINE IR::UsesDef_ptr &
-IR::UsesDef_out::ptr (void) // ptr
+ACE_INLINE IR_UsesDef_ptr &
+IR_UsesDef_out::ptr (void) // ptr
 {
   return this->ptr_;
 }
 
-ACE_INLINE IR::UsesDef_ptr 
-IR::UsesDef_out::operator-> (void)
+ACE_INLINE IR_UsesDef_ptr 
+IR_UsesDef_out::operator-> (void)
 {
   return this->ptr_;
 }
 
-
-#endif /* end #if !defined */
-
-
 #if !defined (TAO_USE_SEQUENCE_TEMPLATES)
   
-#if !defined (__TAO_UNBOUNDED_OBJECT_SEQUENCE_IR_USESDEFSEQ_CI_)
-#define __TAO_UNBOUNDED_OBJECT_SEQUENCE_IR_USESDEFSEQ_CI_
-
-  ACE_INLINE IR::UsesDef **
-  IR::_TAO_Unbounded_Object_Sequence_IR_UsesDefSeq::allocbuf (CORBA::ULong nelems)
+  ACE_INLINE IR_UsesDef **
+  _TAO_Unbounded_Object_Sequence_IR_UsesDefSeq::allocbuf (CORBA::ULong nelems)
   {
-    IR::UsesDef **buf = 0;
+    IR_UsesDef **buf = 0;
     
-    ACE_NEW_RETURN (buf, IR::UsesDef*[nelems], 0);
+    ACE_NEW_RETURN (buf, IR_UsesDef*[nelems], 0);
     
     for (CORBA::ULong i = 0; i < nelems; i++)
-      buf[i] = IR::UsesDef::_nil ();
+      buf[i] = IR_UsesDef::_nil ();
     
     return buf;
   }
   
   ACE_INLINE void 
-  IR::_TAO_Unbounded_Object_Sequence_IR_UsesDefSeq::freebuf (IR::UsesDef **buffer)
+  _TAO_Unbounded_Object_Sequence_IR_UsesDefSeq::freebuf (IR_UsesDef **buffer)
   {
     if (buffer == 0)
       return;
@@ -5283,36 +4825,36 @@
   }
   
   ACE_INLINE
-  IR::_TAO_Unbounded_Object_Sequence_IR_UsesDefSeq::_TAO_Unbounded_Object_Sequence_IR_UsesDefSeq (void)
+  _TAO_Unbounded_Object_Sequence_IR_UsesDefSeq::_TAO_Unbounded_Object_Sequence_IR_UsesDefSeq (void)
   {
   }
   
   ACE_INLINE
-  IR::_TAO_Unbounded_Object_Sequence_IR_UsesDefSeq::_TAO_Unbounded_Object_Sequence_IR_UsesDefSeq (CORBA::ULong maximum)
+  _TAO_Unbounded_Object_Sequence_IR_UsesDefSeq::_TAO_Unbounded_Object_Sequence_IR_UsesDefSeq (CORBA::ULong maximum)
     : TAO_Unbounded_Base_Sequence (maximum, _TAO_Unbounded_Object_Sequence_IR_UsesDefSeq::allocbuf (maximum))
   {
   }
   
   ACE_INLINE
-  IR::_TAO_Unbounded_Object_Sequence_IR_UsesDefSeq::_TAO_Unbounded_Object_Sequence_IR_UsesDefSeq (CORBA::ULong maximum,
+  _TAO_Unbounded_Object_Sequence_IR_UsesDefSeq::_TAO_Unbounded_Object_Sequence_IR_UsesDefSeq (CORBA::ULong maximum,
     CORBA::ULong length,
-    IR::UsesDef* *value,
+    IR_UsesDef* *value,
     CORBA::Boolean release)
   : TAO_Unbounded_Base_Sequence (maximum, length, value, release)
   {
   }
   
   ACE_INLINE
-  IR::_TAO_Unbounded_Object_Sequence_IR_UsesDefSeq::_TAO_Unbounded_Object_Sequence_IR_UsesDefSeq(const _TAO_Unbounded_Object_Sequence_IR_UsesDefSeq &rhs)
+  _TAO_Unbounded_Object_Sequence_IR_UsesDefSeq::_TAO_Unbounded_Object_Sequence_IR_UsesDefSeq(const _TAO_Unbounded_Object_Sequence_IR_UsesDefSeq &rhs)
     : TAO_Unbounded_Base_Sequence (rhs)
   {
     if (rhs.buffer_ != 0)
     {
-      IR::UsesDef **tmp1 = _TAO_Unbounded_Object_Sequence_IR_UsesDefSeq::allocbuf (this->maximum_);
-      IR::UsesDef ** const tmp2 = ACE_reinterpret_cast (IR::UsesDef ** ACE_CAST_CONST, rhs.buffer_);
+      IR_UsesDef **tmp1 = _TAO_Unbounded_Object_Sequence_IR_UsesDefSeq::allocbuf (this->maximum_);
+      IR_UsesDef ** const tmp2 = ACE_reinterpret_cast (IR_UsesDef ** ACE_CAST_CONST, rhs.buffer_);
       
       for (CORBA::ULong i = 0; i < rhs.length_; ++i)
-        tmp1[i] = IR::UsesDef::_duplicate (tmp2[i]);
+        tmp1[i] = IR_UsesDef::_duplicate (tmp2[i]);
       
       this->buffer_ = tmp1;
     }
@@ -5322,20 +4864,20 @@
     }
   }
   
-  ACE_INLINE IR::_TAO_Unbounded_Object_Sequence_IR_UsesDefSeq &
-  IR::_TAO_Unbounded_Object_Sequence_IR_UsesDefSeq::operator= (const _TAO_Unbounded_Object_Sequence_IR_UsesDefSeq &rhs)
+  ACE_INLINE _TAO_Unbounded_Object_Sequence_IR_UsesDefSeq &
+  _TAO_Unbounded_Object_Sequence_IR_UsesDefSeq::operator= (const _TAO_Unbounded_Object_Sequence_IR_UsesDefSeq &rhs)
   {
     if (this == &rhs)
       return *this;
     
     if (this->release_)
     {
-      IR::UsesDef **tmp = ACE_reinterpret_cast (IR::UsesDef **, this->buffer_);
+      IR_UsesDef **tmp = ACE_reinterpret_cast (IR_UsesDef **, this->buffer_);
       
       for (CORBA::ULong i = 0; i < this->length_; ++i)
       {
         CORBA::release (tmp[i]);
-        tmp[i] = IR::UsesDef::_nil ();
+        tmp[i] = IR_UsesDef::_nil ();
       }
       if (this->maximum_ < rhs.maximum_)
       {
@@ -5348,28 +4890,28 @@
     
     TAO_Unbounded_Base_Sequence::operator= (rhs);
     
-    IR::UsesDef **tmp1 = ACE_reinterpret_cast (IR::UsesDef **, this->buffer_);
-    IR::UsesDef ** const tmp2 = ACE_reinterpret_cast (IR::UsesDef ** ACE_CAST_CONST, rhs.buffer_);
+    IR_UsesDef **tmp1 = ACE_reinterpret_cast (IR_UsesDef **, this->buffer_);
+    IR_UsesDef ** const tmp2 = ACE_reinterpret_cast (IR_UsesDef ** ACE_CAST_CONST, rhs.buffer_);
     
     for (CORBA::ULong i = 0; i < rhs.length_; ++i)
-      tmp1[i] = IR::UsesDef::_duplicate (tmp2[i]);
+      tmp1[i] = IR_UsesDef::_duplicate (tmp2[i]);
     
     return *this;
   }
   
-  ACE_INLINE TAO_Object_Manager<IR::UsesDef,IR::UsesDef_var>
-  IR::_TAO_Unbounded_Object_Sequence_IR_UsesDefSeq::operator[] (CORBA::ULong index) const
+  ACE_INLINE TAO_Object_Manager<IR_UsesDef,IR_UsesDef_var>
+  _TAO_Unbounded_Object_Sequence_IR_UsesDefSeq::operator[] (CORBA::ULong index) const
   // read-write accessor
   {
     ACE_ASSERT (index < this->maximum_);
-    IR::UsesDef ** const tmp = ACE_reinterpret_cast (IR::UsesDef ** ACE_CAST_CONST, this->buffer_);
-    return TAO_Object_Manager<IR::UsesDef,IR::UsesDef_var> (tmp + index, this->release_);
+    IR_UsesDef ** const tmp = ACE_reinterpret_cast (IR_UsesDef ** ACE_CAST_CONST, this->buffer_);
+    return TAO_Object_Manager<IR_UsesDef,IR_UsesDef_var> (tmp + index, this->release_);
   }
   
-  ACE_INLINE IR::UsesDef* *
-  IR::_TAO_Unbounded_Object_Sequence_IR_UsesDefSeq::get_buffer (CORBA::Boolean orphan)
+  ACE_INLINE IR_UsesDef* *
+  _TAO_Unbounded_Object_Sequence_IR_UsesDefSeq::get_buffer (CORBA::Boolean orphan)
   {
-    IR::UsesDef **result = 0;
+    IR_UsesDef **result = 0;
     if (orphan == 0)
     {
       // We retain ownership.
@@ -5381,7 +4923,7 @@
       }
       else
       {
-        result = ACE_reinterpret_cast (IR::UsesDef**, this->buffer_);
+        result = ACE_reinterpret_cast (IR_UsesDef**, this->buffer_);
       }
     }
     else // if (orphan == 1)
@@ -5390,7 +4932,7 @@
       {
         // We set the state back to default and relinquish
         // ownership.
-        result = ACE_reinterpret_cast(IR::UsesDef**,this->buffer_);
+        result = ACE_reinterpret_cast(IR_UsesDef**,this->buffer_);
         this->maximum_ = 0;
         this->length_ = 0;
         this->buffer_ = 0;
@@ -5400,60 +4942,53 @@
     return result;
   }
   
-  ACE_INLINE const IR::UsesDef* *
-  IR::_TAO_Unbounded_Object_Sequence_IR_UsesDefSeq::get_buffer (void) const
+  ACE_INLINE const IR_UsesDef* *
+  _TAO_Unbounded_Object_Sequence_IR_UsesDefSeq::get_buffer (void) const
   {
-    return ACE_reinterpret_cast(const IR::UsesDef ** ACE_CAST_CONST, this->buffer_);
+    return ACE_reinterpret_cast(const IR_UsesDef ** ACE_CAST_CONST, this->buffer_);
   }
   
-  
-#endif /* end #if !defined */
-
-
 #endif /* !TAO_USE_SEQUENCE_TEMPLATES */ 
 
-#if !defined (_IR_USESDEFSEQ_CI_)
-#define _IR_USESDEFSEQ_CI_
-
 // *************************************************************
-// Inline operations for class IR::UsesDefSeq_var
+// Inline operations for class IR_UsesDefSeq_var
 // *************************************************************
 
 ACE_INLINE
-IR::UsesDefSeq_var::UsesDefSeq_var (void) // default constructor
+IR_UsesDefSeq_var::IR_UsesDefSeq_var (void) // default constructor
   : ptr_ (0)
 {}
 
 ACE_INLINE
-IR::UsesDefSeq_var::UsesDefSeq_var (UsesDefSeq *p)
+IR_UsesDefSeq_var::IR_UsesDefSeq_var (IR_UsesDefSeq *p)
   : ptr_ (p)
 {}
 
 ACE_INLINE
-IR::UsesDefSeq_var::UsesDefSeq_var (const ::IR::UsesDefSeq_var &p) // copy constructor
+IR_UsesDefSeq_var::IR_UsesDefSeq_var (const ::IR_UsesDefSeq_var &p) // copy constructor
 {
   if (p.ptr_)
-    ACE_NEW (this->ptr_, ::IR::UsesDefSeq (*p.ptr_));
+    ACE_NEW (this->ptr_, ::IR_UsesDefSeq (*p.ptr_));
   else
     this->ptr_ = 0;
 }
 
 ACE_INLINE
-IR::UsesDefSeq_var::~UsesDefSeq_var (void) // destructor
+IR_UsesDefSeq_var::~IR_UsesDefSeq_var (void) // destructor
 {
   delete this->ptr_;
 }
 
-ACE_INLINE IR::UsesDefSeq_var &
-IR::UsesDefSeq_var::operator= (UsesDefSeq *p)
+ACE_INLINE IR_UsesDefSeq_var &
+IR_UsesDefSeq_var::operator= (IR_UsesDefSeq *p)
 {
   delete this->ptr_;
   this->ptr_ = p;
   return *this;
 }
 
-ACE_INLINE ::IR::UsesDefSeq_var &
-IR::UsesDefSeq_var::operator= (const ::IR::UsesDefSeq_var &p)
+ACE_INLINE IR_UsesDefSeq_var &
+IR_UsesDefSeq_var::operator= (const ::IR_UsesDefSeq_var &p) // deep copy
 {
   if (this != &p)
     {
@@ -5464,12 +4999,12 @@
         }
       else
         {
-          UsesDefSeq *deep_copy =
-            new UsesDefSeq (*p.ptr_);
+          IR_UsesDefSeq *deep_copy = 
+            new IR_UsesDefSeq (*p.ptr_);
           
           if (deep_copy != 0)
             {
-              UsesDefSeq *tmp = deep_copy;
+              IR_UsesDefSeq *tmp = deep_copy;
               deep_copy = this->ptr_;
               this->ptr_ = tmp;
               delete deep_copy;
@@ -5480,97 +5015,97 @@
   return *this;
 }
 
-ACE_INLINE const ::IR::UsesDefSeq *
-IR::UsesDefSeq_var::operator-> (void) const
+ACE_INLINE const ::IR_UsesDefSeq *
+IR_UsesDefSeq_var::operator-> (void) const
 {
   return this->ptr_;
 }
 
-ACE_INLINE ::IR::UsesDefSeq *
-IR::UsesDefSeq_var::operator-> (void)
+ACE_INLINE ::IR_UsesDefSeq *
+IR_UsesDefSeq_var::operator-> (void)
 {
   return this->ptr_;
 }
 
 ACE_INLINE 
-IR::UsesDefSeq_var::operator const ::IR::UsesDefSeq &() const // cast
+IR_UsesDefSeq_var::operator const ::IR_UsesDefSeq &() const // cast
 {
   return *this->ptr_;
 }
 
 ACE_INLINE 
-IR::UsesDefSeq_var::operator ::IR::UsesDefSeq &() // cast 
+IR_UsesDefSeq_var::operator ::IR_UsesDefSeq &() // cast 
 {
   return *this->ptr_;
 }
 
 ACE_INLINE 
-IR::UsesDefSeq_var::operator ::IR::UsesDefSeq &() const // cast 
+IR_UsesDefSeq_var::operator ::IR_UsesDefSeq &() const // cast 
 {
   return *this->ptr_;
 }
 
 // variable-size types only
 ACE_INLINE
-IR::UsesDefSeq_var::operator ::IR::UsesDefSeq *&() // cast 
+IR_UsesDefSeq_var::operator ::IR_UsesDefSeq *&() // cast 
 {
   return this->ptr_;
 }
 
-ACE_INLINE TAO_Object_Manager<IR::UsesDef, IR::UsesDef_var>
-IR::UsesDefSeq_var::operator[] (CORBA::ULong index)
+ACE_INLINE TAO_Object_Manager<IR_UsesDef, IR_UsesDef_var>
+IR_UsesDefSeq_var::operator[] (CORBA::ULong index)
 {
   return this->ptr_->operator[] (index);
 }
 
-ACE_INLINE const ::IR::UsesDefSeq &
-IR::UsesDefSeq_var::in (void) const
+ACE_INLINE const ::IR_UsesDefSeq &
+IR_UsesDefSeq_var::in (void) const
 {
   return *this->ptr_;
 }
 
-ACE_INLINE ::IR::UsesDefSeq &
-IR::UsesDefSeq_var::inout (void)
+ACE_INLINE ::IR_UsesDefSeq &
+IR_UsesDefSeq_var::inout (void)
 {
   return *this->ptr_;
 }
 
 // mapping for variable size 
-ACE_INLINE ::IR::UsesDefSeq *&
-IR::UsesDefSeq_var::out (void)
+ACE_INLINE ::IR_UsesDefSeq *&
+IR_UsesDefSeq_var::out (void)
 {
   delete this->ptr_;
   this->ptr_ = 0;
   return this->ptr_;
 }
 
-ACE_INLINE ::IR::UsesDefSeq *
-IR::UsesDefSeq_var::_retn (void)
+ACE_INLINE ::IR_UsesDefSeq *
+IR_UsesDefSeq_var::_retn (void)
 {
-  ::IR::UsesDefSeq *tmp = this->ptr_;
+  ::IR_UsesDefSeq *tmp = this->ptr_;
   this->ptr_ = 0;
   return tmp;
 }
 
-ACE_INLINE ::IR::UsesDefSeq *
-IR::UsesDefSeq_var::ptr (void) const
+ACE_INLINE ::IR_UsesDefSeq *
+IR_UsesDefSeq_var::ptr (void) const
 {
   return this->ptr_;
 }
 
 // *************************************************************
-// Inline operations for class IR::UsesDefSeq_out
+// Inline operations for class IR_UsesDefSeq_out
 // *************************************************************
 
 ACE_INLINE
-IR::UsesDefSeq_out::UsesDefSeq_out (UsesDefSeq *&p)
+IR_UsesDefSeq_out::IR_UsesDefSeq_out (IR_UsesDefSeq *&p)
   : ptr_ (p)
 {
   this->ptr_ = 0;
 }
 
 ACE_INLINE
-IR::UsesDefSeq_out::UsesDefSeq_out (UsesDefSeq_var &p) // constructor from _var
+IR_UsesDefSeq_out::IR_UsesDefSeq_out (IR_UsesDefSeq_var &p) // constructor from _var
   : ptr_ (p.out ())
 {
   delete this->ptr_;
@@ -5578,57 +5113,50 @@
 }
 
 ACE_INLINE
-IR::UsesDefSeq_out::UsesDefSeq_out (const ::IR::UsesDefSeq_out &p) // copy constructor
-  : ptr_ (ACE_const_cast (UsesDefSeq_out&, p).ptr_)
+IR_UsesDefSeq_out::IR_UsesDefSeq_out (const ::IR_UsesDefSeq_out &p) // copy constructor
+  : ptr_ (ACE_const_cast (IR_UsesDefSeq_out&, p).ptr_)
 {}
 
-ACE_INLINE ::IR::UsesDefSeq_out &
-IR::UsesDefSeq_out::operator= (const ::IR::UsesDefSeq_out &p)
+ACE_INLINE ::IR_UsesDefSeq_out &
+IR_UsesDefSeq_out::operator= (const ::IR_UsesDefSeq_out &p)
 {
-  this->ptr_ = ACE_const_cast (UsesDefSeq_out&, p).ptr_;
+  this->ptr_ = ACE_const_cast (IR_UsesDefSeq_out&, p).ptr_;
   return *this;
 }
 
-ACE_INLINE ::IR::UsesDefSeq_out &
-IR::UsesDefSeq_out::operator= (UsesDefSeq *p)
+ACE_INLINE ::IR_UsesDefSeq_out &
+IR_UsesDefSeq_out::operator= (IR_UsesDefSeq *p)
 {
   this->ptr_ = p;
   return *this;
 }
 
 ACE_INLINE 
-IR::UsesDefSeq_out::operator ::IR::UsesDefSeq *&() // cast
+IR_UsesDefSeq_out::operator ::IR_UsesDefSeq *&() // cast
 {
   return this->ptr_;
 }
 
-ACE_INLINE ::IR::UsesDefSeq *&
-IR::UsesDefSeq_out::ptr (void) // ptr
+ACE_INLINE ::IR_UsesDefSeq *&
+IR_UsesDefSeq_out::ptr (void) // ptr
 {
   return this->ptr_;
 }
 
-ACE_INLINE ::IR::UsesDefSeq *
-IR::UsesDefSeq_out::operator-> (void)
+ACE_INLINE ::IR_UsesDefSeq *
+IR_UsesDefSeq_out::operator-> (void)
 {
   return this->ptr_;
 }
 
-ACE_INLINE TAO_Object_Manager<IR::UsesDef, IR::UsesDef_var>
-IR::UsesDefSeq_out::operator[] (CORBA::ULong index)
+ACE_INLINE TAO_Object_Manager<IR_UsesDef, IR_UsesDef_var>
+IR_UsesDefSeq_out::operator[] (CORBA::ULong index)
 {
   return this->ptr_->operator[] (index);
 }
 
-
-#endif /* end #if !defined */
-
-
-#if !defined (_IR_HOMEDEF___CI_)
-#define _IR_HOMEDEF___CI_
-
 ACE_INLINE
-IR::HomeDef::HomeDef (
+IR_HomeDef::IR_HomeDef (
     TAO_Stub *objref,
     CORBA::Boolean _tao_collocated,
     TAO_Abstract_ServantBase *servant
@@ -5638,200 +5166,179 @@
   this->IR_HomeDef_setup_collocation (_tao_collocated);
 }
 
-
-#endif /* end #if !defined */
-
-
-#if !defined (_IR_HOMEDEF___VAR_CI_)
-#define _IR_HOMEDEF___VAR_CI_
-
 // *************************************************************
-// Inline operations for class IR::HomeDef_var
+// Inline operations for class IR_HomeDef_var
 // *************************************************************
 
 ACE_INLINE
-IR::HomeDef_var::HomeDef_var (void) // default constructor
-  : ptr_ (IR::HomeDef::_nil ())
+IR_HomeDef_var::IR_HomeDef_var (void) // default constructor
+  : ptr_ (IR_HomeDef::_nil ())
 {}
 
-ACE_INLINE IR::HomeDef_ptr 
-IR::HomeDef_var::ptr (void) const
+ACE_INLINE IR_HomeDef_ptr 
+IR_HomeDef_var::ptr (void) const
 {
   return this->ptr_;
 }
 
 ACE_INLINE
-IR::HomeDef_var::HomeDef_var (const IR::HomeDef_var &p) // copy constructor
+IR_HomeDef_var::IR_HomeDef_var (const IR_HomeDef_var &p) // copy constructor
   : TAO_Base_var (),
-    ptr_ (HomeDef::_duplicate (p.ptr ()))
+    ptr_ (IR_HomeDef::_duplicate (p.ptr ()))
 {}
 
 ACE_INLINE
-IR::HomeDef_var::~HomeDef_var (void) // destructor
+IR_HomeDef_var::~IR_HomeDef_var (void) // destructor
 {
   CORBA::release (this->ptr_);
 }
 
-ACE_INLINE IR::HomeDef_var &
-IR::HomeDef_var::operator= (IR::HomeDef_ptr p)
+ACE_INLINE IR_HomeDef_var &
+IR_HomeDef_var::operator= (IR_HomeDef_ptr p)
 {
   CORBA::release (this->ptr_);
   this->ptr_ = p;
   return *this;
 }
 
-ACE_INLINE IR::HomeDef_var &
-IR::HomeDef_var::operator= (const IR::HomeDef_var &p)
+ACE_INLINE IR_HomeDef_var &
+IR_HomeDef_var::operator= (const IR_HomeDef_var &p)
 {
   if (this != &p)
   {
     CORBA::release (this->ptr_);
-    this->ptr_ = IR::HomeDef::_duplicate (p.ptr ());
+    this->ptr_ = IR_HomeDef::_duplicate (p.ptr ());
   }
   return *this;
 }
 
 ACE_INLINE 
-IR::HomeDef_var::operator const IR::HomeDef_ptr &() const // cast
+IR_HomeDef_var::operator const IR_HomeDef_ptr &() const // cast
 {
   return this->ptr_;
 }
 
 ACE_INLINE 
-IR::HomeDef_var::operator IR::HomeDef_ptr &() // cast 
+IR_HomeDef_var::operator IR_HomeDef_ptr &() // cast 
 {
   return this->ptr_;
 }
 
-ACE_INLINE IR::HomeDef_ptr 
-IR::HomeDef_var::operator-> (void) const
+ACE_INLINE IR_HomeDef_ptr 
+IR_HomeDef_var::operator-> (void) const
 {
   return this->ptr_;
 }
 
-ACE_INLINE IR::HomeDef_ptr
-IR::HomeDef_var::in (void) const
+ACE_INLINE IR_HomeDef_ptr
+IR_HomeDef_var::in (void) const
 {
   return this->ptr_;
 }
 
-ACE_INLINE IR::HomeDef_ptr &
-IR::HomeDef_var::inout (void)
+ACE_INLINE IR_HomeDef_ptr &
+IR_HomeDef_var::inout (void)
 {
   return this->ptr_;
 }
 
-ACE_INLINE IR::HomeDef_ptr &
-IR::HomeDef_var::out (void)
+ACE_INLINE IR_HomeDef_ptr &
+IR_HomeDef_var::out (void)
 {
   CORBA::release (this->ptr_);
-  this->ptr_ = IR::HomeDef::_nil ();
+  this->ptr_ = IR_HomeDef::_nil ();
   return this->ptr_;
 }
 
-ACE_INLINE IR::HomeDef_ptr 
-IR::HomeDef_var::_retn (void)
+ACE_INLINE IR_HomeDef_ptr 
+IR_HomeDef_var::_retn (void)
 {
   // yield ownership of managed obj reference
-  IR::HomeDef_ptr val = this->ptr_;
-  this->ptr_ = IR::HomeDef::_nil ();
+  IR_HomeDef_ptr val = this->ptr_;
+  this->ptr_ = IR_HomeDef::_nil ();
   return val;
 }
 
-
-#endif /* end #if !defined */
-
-
-#if !defined (_IR_HOMEDEF___OUT_CI_)
-#define _IR_HOMEDEF___OUT_CI_
-
 // *************************************************************
-// Inline operations for class IR::HomeDef_out
+// Inline operations for class IR_HomeDef_out
 // *************************************************************
 
 ACE_INLINE
-IR::HomeDef_out::HomeDef_out (IR::HomeDef_ptr &p)
+IR_HomeDef_out::IR_HomeDef_out (IR_HomeDef_ptr &p)
   : ptr_ (p)
 {
-  this->ptr_ = IR::HomeDef::_nil ();
+  this->ptr_ = IR_HomeDef::_nil ();
 }
 
 ACE_INLINE
-IR::HomeDef_out::HomeDef_out (IR::HomeDef_var &p) // constructor from _var
+IR_HomeDef_out::IR_HomeDef_out (IR_HomeDef_var &p) // constructor from _var
   : ptr_ (p.out ())
 {
   CORBA::release (this->ptr_);
-  this->ptr_ = IR::HomeDef::_nil ();
+  this->ptr_ = IR_HomeDef::_nil ();
 }
 
 ACE_INLINE
-IR::HomeDef_out::HomeDef_out (const IR::HomeDef_out &p) // copy constructor
-  : ptr_ (ACE_const_cast (IR::HomeDef_out&,p).ptr_)
+IR_HomeDef_out::IR_HomeDef_out (const IR_HomeDef_out &p) // copy constructor
+  : ptr_ (ACE_const_cast (IR_HomeDef_out&,p).ptr_)
 {}
 
-ACE_INLINE IR::HomeDef_out &
-IR::HomeDef_out::operator= (const IR::HomeDef_out &p)
+ACE_INLINE IR_HomeDef_out &
+IR_HomeDef_out::operator= (const IR_HomeDef_out &p)
 {
-  this->ptr_ = ACE_const_cast (IR::HomeDef_out&,p).ptr_;
+  this->ptr_ = ACE_const_cast (IR_HomeDef_out&,p).ptr_;
   return *this;
 }
 
-ACE_INLINE IR::HomeDef_out &
-IR::HomeDef_out::operator= (const IR::HomeDef_var &p)
+ACE_INLINE IR_HomeDef_out &
+IR_HomeDef_out::operator= (const IR_HomeDef_var &p)
 {
-  this->ptr_ = IR::HomeDef::_duplicate (p.ptr ());
+  this->ptr_ = IR_HomeDef::_duplicate (p.ptr ());
   return *this;
 }
 
-ACE_INLINE IR::HomeDef_out &
-IR::HomeDef_out::operator= (IR::HomeDef_ptr p)
+ACE_INLINE IR_HomeDef_out &
+IR_HomeDef_out::operator= (IR_HomeDef_ptr p)
 {
   this->ptr_ = p;
   return *this;
 }
 
 ACE_INLINE 
-IR::HomeDef_out::operator IR::HomeDef_ptr &() // cast
+IR_HomeDef_out::operator IR_HomeDef_ptr &() // cast
 {
   return this->ptr_;
 }
 
-ACE_INLINE IR::HomeDef_ptr &
-IR::HomeDef_out::ptr (void) // ptr
+ACE_INLINE IR_HomeDef_ptr &
+IR_HomeDef_out::ptr (void) // ptr
 {
   return this->ptr_;
 }
 
-ACE_INLINE IR::HomeDef_ptr 
-IR::HomeDef_out::operator-> (void)
+ACE_INLINE IR_HomeDef_ptr 
+IR_HomeDef_out::operator-> (void)
 {
   return this->ptr_;
 }
 
-
-#endif /* end #if !defined */
-
-
 #if !defined (TAO_USE_SEQUENCE_TEMPLATES)
   
-#if !defined (__TAO_UNBOUNDED_OBJECT_SEQUENCE_IR_HOMEDEFSEQ_CI_)
-#define __TAO_UNBOUNDED_OBJECT_SEQUENCE_IR_HOMEDEFSEQ_CI_
-
-  ACE_INLINE IR::HomeDef **
-  IR::_TAO_Unbounded_Object_Sequence_IR_HomeDefSeq::allocbuf (CORBA::ULong nelems)
+  ACE_INLINE IR_HomeDef **
+  _TAO_Unbounded_Object_Sequence_IR_HomeDefSeq::allocbuf (CORBA::ULong nelems)
   {
-    IR::HomeDef **buf = 0;
+    IR_HomeDef **buf = 0;
     
-    ACE_NEW_RETURN (buf, IR::HomeDef*[nelems], 0);
+    ACE_NEW_RETURN (buf, IR_HomeDef*[nelems], 0);
     
     for (CORBA::ULong i = 0; i < nelems; i++)
-      buf[i] = IR::HomeDef::_nil ();
+      buf[i] = IR_HomeDef::_nil ();
     
     return buf;
   }
   
   ACE_INLINE void 
-  IR::_TAO_Unbounded_Object_Sequence_IR_HomeDefSeq::freebuf (IR::HomeDef **buffer)
+  _TAO_Unbounded_Object_Sequence_IR_HomeDefSeq::freebuf (IR_HomeDef **buffer)
   {
     if (buffer == 0)
       return;
@@ -5839,36 +5346,36 @@
   }
   
   ACE_INLINE
-  IR::_TAO_Unbounded_Object_Sequence_IR_HomeDefSeq::_TAO_Unbounded_Object_Sequence_IR_HomeDefSeq (void)
+  _TAO_Unbounded_Object_Sequence_IR_HomeDefSeq::_TAO_Unbounded_Object_Sequence_IR_HomeDefSeq (void)
   {
   }
   
   ACE_INLINE
-  IR::_TAO_Unbounded_Object_Sequence_IR_HomeDefSeq::_TAO_Unbounded_Object_Sequence_IR_HomeDefSeq (CORBA::ULong maximum)
+  _TAO_Unbounded_Object_Sequence_IR_HomeDefSeq::_TAO_Unbounded_Object_Sequence_IR_HomeDefSeq (CORBA::ULong maximum)
     : TAO_Unbounded_Base_Sequence (maximum, _TAO_Unbounded_Object_Sequence_IR_HomeDefSeq::allocbuf (maximum))
   {
   }
   
   ACE_INLINE
-  IR::_TAO_Unbounded_Object_Sequence_IR_HomeDefSeq::_TAO_Unbounded_Object_Sequence_IR_HomeDefSeq (CORBA::ULong maximum,
+  _TAO_Unbounded_Object_Sequence_IR_HomeDefSeq::_TAO_Unbounded_Object_Sequence_IR_HomeDefSeq (CORBA::ULong maximum,
     CORBA::ULong length,
-    IR::HomeDef* *value,
+    IR_HomeDef* *value,
     CORBA::Boolean release)
   : TAO_Unbounded_Base_Sequence (maximum, length, value, release)
   {
   }
   
   ACE_INLINE
-  IR::_TAO_Unbounded_Object_Sequence_IR_HomeDefSeq::_TAO_Unbounded_Object_Sequence_IR_HomeDefSeq(const _TAO_Unbounded_Object_Sequence_IR_HomeDefSeq &rhs)
+  _TAO_Unbounded_Object_Sequence_IR_HomeDefSeq::_TAO_Unbounded_Object_Sequence_IR_HomeDefSeq(const _TAO_Unbounded_Object_Sequence_IR_HomeDefSeq &rhs)
     : TAO_Unbounded_Base_Sequence (rhs)
   {
     if (rhs.buffer_ != 0)
     {
-      IR::HomeDef **tmp1 = _TAO_Unbounded_Object_Sequence_IR_HomeDefSeq::allocbuf (this->maximum_);
-      IR::HomeDef ** const tmp2 = ACE_reinterpret_cast (IR::HomeDef ** ACE_CAST_CONST, rhs.buffer_);
+      IR_HomeDef **tmp1 = _TAO_Unbounded_Object_Sequence_IR_HomeDefSeq::allocbuf (this->maximum_);
+      IR_HomeDef ** const tmp2 = ACE_reinterpret_cast (IR_HomeDef ** ACE_CAST_CONST, rhs.buffer_);
       
       for (CORBA::ULong i = 0; i < rhs.length_; ++i)
-        tmp1[i] = IR::HomeDef::_duplicate (tmp2[i]);
+        tmp1[i] = IR_HomeDef::_duplicate (tmp2[i]);
       
       this->buffer_ = tmp1;
     }
@@ -5878,20 +5385,20 @@
     }
   }
   
-  ACE_INLINE IR::_TAO_Unbounded_Object_Sequence_IR_HomeDefSeq &
-  IR::_TAO_Unbounded_Object_Sequence_IR_HomeDefSeq::operator= (const _TAO_Unbounded_Object_Sequence_IR_HomeDefSeq &rhs)
+  ACE_INLINE _TAO_Unbounded_Object_Sequence_IR_HomeDefSeq &
+  _TAO_Unbounded_Object_Sequence_IR_HomeDefSeq::operator= (const _TAO_Unbounded_Object_Sequence_IR_HomeDefSeq &rhs)
   {
     if (this == &rhs)
       return *this;
     
     if (this->release_)
     {
-      IR::HomeDef **tmp = ACE_reinterpret_cast (IR::HomeDef **, this->buffer_);
+      IR_HomeDef **tmp = ACE_reinterpret_cast (IR_HomeDef **, this->buffer_);
       
       for (CORBA::ULong i = 0; i < this->length_; ++i)
       {
         CORBA::release (tmp[i]);
-        tmp[i] = IR::HomeDef::_nil ();
+        tmp[i] = IR_HomeDef::_nil ();
       }
       if (this->maximum_ < rhs.maximum_)
       {
@@ -5904,28 +5411,28 @@
     
     TAO_Unbounded_Base_Sequence::operator= (rhs);
     
-    IR::HomeDef **tmp1 = ACE_reinterpret_cast (IR::HomeDef **, this->buffer_);
-    IR::HomeDef ** const tmp2 = ACE_reinterpret_cast (IR::HomeDef ** ACE_CAST_CONST, rhs.buffer_);
+    IR_HomeDef **tmp1 = ACE_reinterpret_cast (IR_HomeDef **, this->buffer_);
+    IR_HomeDef ** const tmp2 = ACE_reinterpret_cast (IR_HomeDef ** ACE_CAST_CONST, rhs.buffer_);
     
     for (CORBA::ULong i = 0; i < rhs.length_; ++i)
-      tmp1[i] = IR::HomeDef::_duplicate (tmp2[i]);
+      tmp1[i] = IR_HomeDef::_duplicate (tmp2[i]);
     
     return *this;
   }
   
-  ACE_INLINE TAO_Object_Manager<IR::HomeDef,IR::HomeDef_var>
-  IR::_TAO_Unbounded_Object_Sequence_IR_HomeDefSeq::operator[] (CORBA::ULong index) const
+  ACE_INLINE TAO_Object_Manager<IR_HomeDef,IR_HomeDef_var>
+  _TAO_Unbounded_Object_Sequence_IR_HomeDefSeq::operator[] (CORBA::ULong index) const
   // read-write accessor
   {
     ACE_ASSERT (index < this->maximum_);
-    IR::HomeDef ** const tmp = ACE_reinterpret_cast (IR::HomeDef ** ACE_CAST_CONST, this->buffer_);
-    return TAO_Object_Manager<IR::HomeDef,IR::HomeDef_var> (tmp + index, this->release_);
+    IR_HomeDef ** const tmp = ACE_reinterpret_cast (IR_HomeDef ** ACE_CAST_CONST, this->buffer_);
+    return TAO_Object_Manager<IR_HomeDef,IR_HomeDef_var> (tmp + index, this->release_);
   }
   
-  ACE_INLINE IR::HomeDef* *
-  IR::_TAO_Unbounded_Object_Sequence_IR_HomeDefSeq::get_buffer (CORBA::Boolean orphan)
+  ACE_INLINE IR_HomeDef* *
+  _TAO_Unbounded_Object_Sequence_IR_HomeDefSeq::get_buffer (CORBA::Boolean orphan)
   {
-    IR::HomeDef **result = 0;
+    IR_HomeDef **result = 0;
     if (orphan == 0)
     {
       // We retain ownership.
@@ -5937,7 +5444,7 @@
       }
       else
       {
-        result = ACE_reinterpret_cast (IR::HomeDef**, this->buffer_);
+        result = ACE_reinterpret_cast (IR_HomeDef**, this->buffer_);
       }
     }
     else // if (orphan == 1)
@@ -5946,7 +5453,7 @@
       {
         // We set the state back to default and relinquish
         // ownership.
-        result = ACE_reinterpret_cast(IR::HomeDef**,this->buffer_);
+        result = ACE_reinterpret_cast(IR_HomeDef**,this->buffer_);
         this->maximum_ = 0;
         this->length_ = 0;
         this->buffer_ = 0;
@@ -5956,60 +5463,53 @@
     return result;
   }
   
-  ACE_INLINE const IR::HomeDef* *
-  IR::_TAO_Unbounded_Object_Sequence_IR_HomeDefSeq::get_buffer (void) const
+  ACE_INLINE const IR_HomeDef* *
+  _TAO_Unbounded_Object_Sequence_IR_HomeDefSeq::get_buffer (void) const
   {
-    return ACE_reinterpret_cast(const IR::HomeDef ** ACE_CAST_CONST, this->buffer_);
+    return ACE_reinterpret_cast(const IR_HomeDef ** ACE_CAST_CONST, this->buffer_);
   }
   
-  
-#endif /* end #if !defined */
-
-
 #endif /* !TAO_USE_SEQUENCE_TEMPLATES */ 
 
-#if !defined (_IR_HOMEDEFSEQ_CI_)
-#define _IR_HOMEDEFSEQ_CI_
-
 // *************************************************************
-// Inline operations for class IR::HomeDefSeq_var
+// Inline operations for class IR_HomeDefSeq_var
 // *************************************************************
 
 ACE_INLINE
-IR::HomeDefSeq_var::HomeDefSeq_var (void) // default constructor
+IR_HomeDefSeq_var::IR_HomeDefSeq_var (void) // default constructor
   : ptr_ (0)
 {}
 
 ACE_INLINE
-IR::HomeDefSeq_var::HomeDefSeq_var (HomeDefSeq *p)
+IR_HomeDefSeq_var::IR_HomeDefSeq_var (IR_HomeDefSeq *p)
   : ptr_ (p)
 {}
 
 ACE_INLINE
-IR::HomeDefSeq_var::HomeDefSeq_var (const ::IR::HomeDefSeq_var &p) // copy constructor
+IR_HomeDefSeq_var::IR_HomeDefSeq_var (const ::IR_HomeDefSeq_var &p) // copy constructor
 {
   if (p.ptr_)
-    ACE_NEW (this->ptr_, ::IR::HomeDefSeq (*p.ptr_));
+    ACE_NEW (this->ptr_, ::IR_HomeDefSeq (*p.ptr_));
   else
     this->ptr_ = 0;
 }
 
 ACE_INLINE
-IR::HomeDefSeq_var::~HomeDefSeq_var (void) // destructor
+IR_HomeDefSeq_var::~IR_HomeDefSeq_var (void) // destructor
 {
   delete this->ptr_;
 }
 
-ACE_INLINE IR::HomeDefSeq_var &
-IR::HomeDefSeq_var::operator= (HomeDefSeq *p)
+ACE_INLINE IR_HomeDefSeq_var &
+IR_HomeDefSeq_var::operator= (IR_HomeDefSeq *p)
 {
   delete this->ptr_;
   this->ptr_ = p;
   return *this;
 }
 
-ACE_INLINE ::IR::HomeDefSeq_var &
-IR::HomeDefSeq_var::operator= (const ::IR::HomeDefSeq_var &p)
+ACE_INLINE IR_HomeDefSeq_var &
+IR_HomeDefSeq_var::operator= (const ::IR_HomeDefSeq_var &p) // deep copy
 {
   if (this != &p)
     {
@@ -6020,12 +5520,12 @@
         }
       else
         {
-          HomeDefSeq *deep_copy =
-            new HomeDefSeq (*p.ptr_);
+          IR_HomeDefSeq *deep_copy = 
+            new IR_HomeDefSeq (*p.ptr_);
           
           if (deep_copy != 0)
             {
-              HomeDefSeq *tmp = deep_copy;
+              IR_HomeDefSeq *tmp = deep_copy;
               deep_copy = this->ptr_;
               this->ptr_ = tmp;
               delete deep_copy;
@@ -6036,97 +5536,97 @@
   return *this;
 }
 
-ACE_INLINE const ::IR::HomeDefSeq *
-IR::HomeDefSeq_var::operator-> (void) const
+ACE_INLINE const ::IR_HomeDefSeq *
+IR_HomeDefSeq_var::operator-> (void) const
 {
   return this->ptr_;
 }
 
-ACE_INLINE ::IR::HomeDefSeq *
-IR::HomeDefSeq_var::operator-> (void)
+ACE_INLINE ::IR_HomeDefSeq *
+IR_HomeDefSeq_var::operator-> (void)
 {
   return this->ptr_;
 }
 
 ACE_INLINE 
-IR::HomeDefSeq_var::operator const ::IR::HomeDefSeq &() const // cast
+IR_HomeDefSeq_var::operator const ::IR_HomeDefSeq &() const // cast
 {
   return *this->ptr_;
 }
 
 ACE_INLINE 
-IR::HomeDefSeq_var::operator ::IR::HomeDefSeq &() // cast 
+IR_HomeDefSeq_var::operator ::IR_HomeDefSeq &() // cast 
 {
   return *this->ptr_;
 }
 
 ACE_INLINE 
-IR::HomeDefSeq_var::operator ::IR::HomeDefSeq &() const // cast 
+IR_HomeDefSeq_var::operator ::IR_HomeDefSeq &() const // cast 
 {
   return *this->ptr_;
 }
 
 // variable-size types only
 ACE_INLINE
-IR::HomeDefSeq_var::operator ::IR::HomeDefSeq *&() // cast 
+IR_HomeDefSeq_var::operator ::IR_HomeDefSeq *&() // cast 
 {
   return this->ptr_;
 }
 
-ACE_INLINE TAO_Object_Manager<IR::HomeDef, IR::HomeDef_var>
-IR::HomeDefSeq_var::operator[] (CORBA::ULong index)
+ACE_INLINE TAO_Object_Manager<IR_HomeDef, IR_HomeDef_var>
+IR_HomeDefSeq_var::operator[] (CORBA::ULong index)
 {
   return this->ptr_->operator[] (index);
 }
 
-ACE_INLINE const ::IR::HomeDefSeq &
-IR::HomeDefSeq_var::in (void) const
+ACE_INLINE const ::IR_HomeDefSeq &
+IR_HomeDefSeq_var::in (void) const
 {
   return *this->ptr_;
 }
 
-ACE_INLINE ::IR::HomeDefSeq &
-IR::HomeDefSeq_var::inout (void)
+ACE_INLINE ::IR_HomeDefSeq &
+IR_HomeDefSeq_var::inout (void)
 {
   return *this->ptr_;
 }
 
 // mapping for variable size 
-ACE_INLINE ::IR::HomeDefSeq *&
-IR::HomeDefSeq_var::out (void)
+ACE_INLINE ::IR_HomeDefSeq *&
+IR_HomeDefSeq_var::out (void)
 {
   delete this->ptr_;
   this->ptr_ = 0;
   return this->ptr_;
 }
 
-ACE_INLINE ::IR::HomeDefSeq *
-IR::HomeDefSeq_var::_retn (void)
+ACE_INLINE ::IR_HomeDefSeq *
+IR_HomeDefSeq_var::_retn (void)
 {
-  ::IR::HomeDefSeq *tmp = this->ptr_;
+  ::IR_HomeDefSeq *tmp = this->ptr_;
   this->ptr_ = 0;
   return tmp;
 }
 
-ACE_INLINE ::IR::HomeDefSeq *
-IR::HomeDefSeq_var::ptr (void) const
+ACE_INLINE ::IR_HomeDefSeq *
+IR_HomeDefSeq_var::ptr (void) const
 {
   return this->ptr_;
 }
 
 // *************************************************************
-// Inline operations for class IR::HomeDefSeq_out
+// Inline operations for class IR_HomeDefSeq_out
 // *************************************************************
 
 ACE_INLINE
-IR::HomeDefSeq_out::HomeDefSeq_out (HomeDefSeq *&p)
+IR_HomeDefSeq_out::IR_HomeDefSeq_out (IR_HomeDefSeq *&p)
   : ptr_ (p)
 {
   this->ptr_ = 0;
 }
 
 ACE_INLINE
-IR::HomeDefSeq_out::HomeDefSeq_out (HomeDefSeq_var &p) // constructor from _var
+IR_HomeDefSeq_out::IR_HomeDefSeq_out (IR_HomeDefSeq_var &p) // constructor from _var
   : ptr_ (p.out ())
 {
   delete this->ptr_;
@@ -6134,57 +5634,50 @@
 }
 
 ACE_INLINE
-IR::HomeDefSeq_out::HomeDefSeq_out (const ::IR::HomeDefSeq_out &p) // copy constructor
-  : ptr_ (ACE_const_cast (HomeDefSeq_out&, p).ptr_)
+IR_HomeDefSeq_out::IR_HomeDefSeq_out (const ::IR_HomeDefSeq_out &p) // copy constructor
+  : ptr_ (ACE_const_cast (IR_HomeDefSeq_out&, p).ptr_)
 {}
 
-ACE_INLINE ::IR::HomeDefSeq_out &
-IR::HomeDefSeq_out::operator= (const ::IR::HomeDefSeq_out &p)
+ACE_INLINE ::IR_HomeDefSeq_out &
+IR_HomeDefSeq_out::operator= (const ::IR_HomeDefSeq_out &p)
 {
-  this->ptr_ = ACE_const_cast (HomeDefSeq_out&, p).ptr_;
+  this->ptr_ = ACE_const_cast (IR_HomeDefSeq_out&, p).ptr_;
   return *this;
 }
 
-ACE_INLINE ::IR::HomeDefSeq_out &
-IR::HomeDefSeq_out::operator= (HomeDefSeq *p)
+ACE_INLINE ::IR_HomeDefSeq_out &
+IR_HomeDefSeq_out::operator= (IR_HomeDefSeq *p)
 {
   this->ptr_ = p;
   return *this;
 }
 
 ACE_INLINE 
-IR::HomeDefSeq_out::operator ::IR::HomeDefSeq *&() // cast
+IR_HomeDefSeq_out::operator ::IR_HomeDefSeq *&() // cast
 {
   return this->ptr_;
 }
 
-ACE_INLINE ::IR::HomeDefSeq *&
-IR::HomeDefSeq_out::ptr (void) // ptr
+ACE_INLINE ::IR_HomeDefSeq *&
+IR_HomeDefSeq_out::ptr (void) // ptr
 {
   return this->ptr_;
 }
 
-ACE_INLINE ::IR::HomeDefSeq *
-IR::HomeDefSeq_out::operator-> (void)
+ACE_INLINE ::IR_HomeDefSeq *
+IR_HomeDefSeq_out::operator-> (void)
 {
   return this->ptr_;
 }
 
-ACE_INLINE TAO_Object_Manager<IR::HomeDef, IR::HomeDef_var>
-IR::HomeDefSeq_out::operator[] (CORBA::ULong index)
+ACE_INLINE TAO_Object_Manager<IR_HomeDef, IR_HomeDef_var>
+IR_HomeDefSeq_out::operator[] (CORBA::ULong index)
 {
   return this->ptr_->operator[] (index);
 }
 
-
-#endif /* end #if !defined */
-
-
-#if !defined (_IR_EVENTDEF___CI_)
-#define _IR_EVENTDEF___CI_
-
 ACE_INLINE
-IR::EventDef::EventDef (
+IR_EventDef::IR_EventDef (
     TAO_Stub *objref,
     CORBA::Boolean _tao_collocated,
     TAO_Abstract_ServantBase *servant
@@ -6194,185 +5687,164 @@
   this->IR_EventDef_setup_collocation (_tao_collocated);
 }
 
-
-#endif /* end #if !defined */
-
-
-#if !defined (_IR_EVENTDEF___VAR_CI_)
-#define _IR_EVENTDEF___VAR_CI_
-
 // *************************************************************
-// Inline operations for class IR::EventDef_var
+// Inline operations for class IR_EventDef_var
 // *************************************************************
 
 ACE_INLINE
-IR::EventDef_var::EventDef_var (void) // default constructor
-  : ptr_ (IR::EventDef::_nil ())
+IR_EventDef_var::IR_EventDef_var (void) // default constructor
+  : ptr_ (IR_EventDef::_nil ())
 {}
 
-ACE_INLINE IR::EventDef_ptr 
-IR::EventDef_var::ptr (void) const
+ACE_INLINE IR_EventDef_ptr 
+IR_EventDef_var::ptr (void) const
 {
   return this->ptr_;
 }
 
 ACE_INLINE
-IR::EventDef_var::EventDef_var (const IR::EventDef_var &p) // copy constructor
+IR_EventDef_var::IR_EventDef_var (const IR_EventDef_var &p) // copy constructor
   : TAO_Base_var (),
-    ptr_ (EventDef::_duplicate (p.ptr ()))
+    ptr_ (IR_EventDef::_duplicate (p.ptr ()))
 {}
 
 ACE_INLINE
-IR::EventDef_var::~EventDef_var (void) // destructor
+IR_EventDef_var::~IR_EventDef_var (void) // destructor
 {
   CORBA::release (this->ptr_);
 }
 
-ACE_INLINE IR::EventDef_var &
-IR::EventDef_var::operator= (IR::EventDef_ptr p)
+ACE_INLINE IR_EventDef_var &
+IR_EventDef_var::operator= (IR_EventDef_ptr p)
 {
   CORBA::release (this->ptr_);
   this->ptr_ = p;
   return *this;
 }
 
-ACE_INLINE IR::EventDef_var &
-IR::EventDef_var::operator= (const IR::EventDef_var &p)
+ACE_INLINE IR_EventDef_var &
+IR_EventDef_var::operator= (const IR_EventDef_var &p)
 {
   if (this != &p)
   {
     CORBA::release (this->ptr_);
-    this->ptr_ = IR::EventDef::_duplicate (p.ptr ());
+    this->ptr_ = IR_EventDef::_duplicate (p.ptr ());
   }
   return *this;
 }
 
 ACE_INLINE 
-IR::EventDef_var::operator const IR::EventDef_ptr &() const // cast
+IR_EventDef_var::operator const IR_EventDef_ptr &() const // cast
 {
   return this->ptr_;
 }
 
 ACE_INLINE 
-IR::EventDef_var::operator IR::EventDef_ptr &() // cast 
+IR_EventDef_var::operator IR_EventDef_ptr &() // cast 
 {
   return this->ptr_;
 }
 
-ACE_INLINE IR::EventDef_ptr 
-IR::EventDef_var::operator-> (void) const
+ACE_INLINE IR_EventDef_ptr 
+IR_EventDef_var::operator-> (void) const
 {
   return this->ptr_;
 }
 
-ACE_INLINE IR::EventDef_ptr
-IR::EventDef_var::in (void) const
+ACE_INLINE IR_EventDef_ptr
+IR_EventDef_var::in (void) const
 {
   return this->ptr_;
 }
 
-ACE_INLINE IR::EventDef_ptr &
-IR::EventDef_var::inout (void)
+ACE_INLINE IR_EventDef_ptr &
+IR_EventDef_var::inout (void)
 {
   return this->ptr_;
 }
 
-ACE_INLINE IR::EventDef_ptr &
-IR::EventDef_var::out (void)
+ACE_INLINE IR_EventDef_ptr &
+IR_EventDef_var::out (void)
 {
   CORBA::release (this->ptr_);
-  this->ptr_ = IR::EventDef::_nil ();
+  this->ptr_ = IR_EventDef::_nil ();
   return this->ptr_;
 }
 
-ACE_INLINE IR::EventDef_ptr 
-IR::EventDef_var::_retn (void)
+ACE_INLINE IR_EventDef_ptr 
+IR_EventDef_var::_retn (void)
 {
   // yield ownership of managed obj reference
-  IR::EventDef_ptr val = this->ptr_;
-  this->ptr_ = IR::EventDef::_nil ();
+  IR_EventDef_ptr val = this->ptr_;
+  this->ptr_ = IR_EventDef::_nil ();
   return val;
 }
 
-
-#endif /* end #if !defined */
-
-
-#if !defined (_IR_EVENTDEF___OUT_CI_)
-#define _IR_EVENTDEF___OUT_CI_
-
 // *************************************************************
-// Inline operations for class IR::EventDef_out
+// Inline operations for class IR_EventDef_out
 // *************************************************************
 
 ACE_INLINE
-IR::EventDef_out::EventDef_out (IR::EventDef_ptr &p)
+IR_EventDef_out::IR_EventDef_out (IR_EventDef_ptr &p)
   : ptr_ (p)
 {
-  this->ptr_ = IR::EventDef::_nil ();
+  this->ptr_ = IR_EventDef::_nil ();
 }
 
 ACE_INLINE
-IR::EventDef_out::EventDef_out (IR::EventDef_var &p) // constructor from _var
+IR_EventDef_out::IR_EventDef_out (IR_EventDef_var &p) // constructor from _var
   : ptr_ (p.out ())
 {
   CORBA::release (this->ptr_);
-  this->ptr_ = IR::EventDef::_nil ();
+  this->ptr_ = IR_EventDef::_nil ();
 }
 
 ACE_INLINE
-IR::EventDef_out::EventDef_out (const IR::EventDef_out &p) // copy constructor
-  : ptr_ (ACE_const_cast (IR::EventDef_out&,p).ptr_)
+IR_EventDef_out::IR_EventDef_out (const IR_EventDef_out &p) // copy constructor
+  : ptr_ (ACE_const_cast (IR_EventDef_out&,p).ptr_)
 {}
 
-ACE_INLINE IR::EventDef_out &
-IR::EventDef_out::operator= (const IR::EventDef_out &p)
+ACE_INLINE IR_EventDef_out &
+IR_EventDef_out::operator= (const IR_EventDef_out &p)
 {
-  this->ptr_ = ACE_const_cast (IR::EventDef_out&,p).ptr_;
+  this->ptr_ = ACE_const_cast (IR_EventDef_out&,p).ptr_;
   return *this;
 }
 
-ACE_INLINE IR::EventDef_out &
-IR::EventDef_out::operator= (const IR::EventDef_var &p)
+ACE_INLINE IR_EventDef_out &
+IR_EventDef_out::operator= (const IR_EventDef_var &p)
 {
-  this->ptr_ = IR::EventDef::_duplicate (p.ptr ());
+  this->ptr_ = IR_EventDef::_duplicate (p.ptr ());
   return *this;
 }
 
-ACE_INLINE IR::EventDef_out &
-IR::EventDef_out::operator= (IR::EventDef_ptr p)
+ACE_INLINE IR_EventDef_out &
+IR_EventDef_out::operator= (IR_EventDef_ptr p)
 {
   this->ptr_ = p;
   return *this;
 }
 
 ACE_INLINE 
-IR::EventDef_out::operator IR::EventDef_ptr &() // cast
+IR_EventDef_out::operator IR_EventDef_ptr &() // cast
 {
   return this->ptr_;
 }
 
-ACE_INLINE IR::EventDef_ptr &
-IR::EventDef_out::ptr (void) // ptr
+ACE_INLINE IR_EventDef_ptr &
+IR_EventDef_out::ptr (void) // ptr
 {
   return this->ptr_;
 }
 
-ACE_INLINE IR::EventDef_ptr 
-IR::EventDef_out::operator-> (void)
+ACE_INLINE IR_EventDef_ptr 
+IR_EventDef_out::operator-> (void)
 {
   return this->ptr_;
 }
 
-
-#endif /* end #if !defined */
-
-
-#if !defined (_IR_EMITSDEF___CI_)
-#define _IR_EMITSDEF___CI_
-
 ACE_INLINE
-IR::EmitsDef::EmitsDef (
+IR_EmitsDef::IR_EmitsDef (
     TAO_Stub *objref,
     CORBA::Boolean _tao_collocated,
     TAO_Abstract_ServantBase *servant
@@ -6382,200 +5854,179 @@
   this->IR_EmitsDef_setup_collocation (_tao_collocated);
 }
 
-
-#endif /* end #if !defined */
-
-
-#if !defined (_IR_EMITSDEF___VAR_CI_)
-#define _IR_EMITSDEF___VAR_CI_
-
 // *************************************************************
-// Inline operations for class IR::EmitsDef_var
+// Inline operations for class IR_EmitsDef_var
 // *************************************************************
 
 ACE_INLINE
-IR::EmitsDef_var::EmitsDef_var (void) // default constructor
-  : ptr_ (IR::EmitsDef::_nil ())
+IR_EmitsDef_var::IR_EmitsDef_var (void) // default constructor
+  : ptr_ (IR_EmitsDef::_nil ())
 {}
 
-ACE_INLINE IR::EmitsDef_ptr 
-IR::EmitsDef_var::ptr (void) const
+ACE_INLINE IR_EmitsDef_ptr 
+IR_EmitsDef_var::ptr (void) const
 {
   return this->ptr_;
 }
 
 ACE_INLINE
-IR::EmitsDef_var::EmitsDef_var (const IR::EmitsDef_var &p) // copy constructor
+IR_EmitsDef_var::IR_EmitsDef_var (const IR_EmitsDef_var &p) // copy constructor
   : TAO_Base_var (),
-    ptr_ (EmitsDef::_duplicate (p.ptr ()))
+    ptr_ (IR_EmitsDef::_duplicate (p.ptr ()))
 {}
 
 ACE_INLINE
-IR::EmitsDef_var::~EmitsDef_var (void) // destructor
+IR_EmitsDef_var::~IR_EmitsDef_var (void) // destructor
 {
   CORBA::release (this->ptr_);
 }
 
-ACE_INLINE IR::EmitsDef_var &
-IR::EmitsDef_var::operator= (IR::EmitsDef_ptr p)
+ACE_INLINE IR_EmitsDef_var &
+IR_EmitsDef_var::operator= (IR_EmitsDef_ptr p)
 {
   CORBA::release (this->ptr_);
   this->ptr_ = p;
   return *this;
 }
 
-ACE_INLINE IR::EmitsDef_var &
-IR::EmitsDef_var::operator= (const IR::EmitsDef_var &p)
+ACE_INLINE IR_EmitsDef_var &
+IR_EmitsDef_var::operator= (const IR_EmitsDef_var &p)
 {
   if (this != &p)
   {
     CORBA::release (this->ptr_);
-    this->ptr_ = IR::EmitsDef::_duplicate (p.ptr ());
+    this->ptr_ = IR_EmitsDef::_duplicate (p.ptr ());
   }
   return *this;
 }
 
 ACE_INLINE 
-IR::EmitsDef_var::operator const IR::EmitsDef_ptr &() const // cast
+IR_EmitsDef_var::operator const IR_EmitsDef_ptr &() const // cast
 {
   return this->ptr_;
 }
 
 ACE_INLINE 
-IR::EmitsDef_var::operator IR::EmitsDef_ptr &() // cast 
+IR_EmitsDef_var::operator IR_EmitsDef_ptr &() // cast 
 {
   return this->ptr_;
 }
 
-ACE_INLINE IR::EmitsDef_ptr 
-IR::EmitsDef_var::operator-> (void) const
+ACE_INLINE IR_EmitsDef_ptr 
+IR_EmitsDef_var::operator-> (void) const
 {
   return this->ptr_;
 }
 
-ACE_INLINE IR::EmitsDef_ptr
-IR::EmitsDef_var::in (void) const
+ACE_INLINE IR_EmitsDef_ptr
+IR_EmitsDef_var::in (void) const
 {
   return this->ptr_;
 }
 
-ACE_INLINE IR::EmitsDef_ptr &
-IR::EmitsDef_var::inout (void)
+ACE_INLINE IR_EmitsDef_ptr &
+IR_EmitsDef_var::inout (void)
 {
   return this->ptr_;
 }
 
-ACE_INLINE IR::EmitsDef_ptr &
-IR::EmitsDef_var::out (void)
+ACE_INLINE IR_EmitsDef_ptr &
+IR_EmitsDef_var::out (void)
 {
   CORBA::release (this->ptr_);
-  this->ptr_ = IR::EmitsDef::_nil ();
+  this->ptr_ = IR_EmitsDef::_nil ();
   return this->ptr_;
 }
 
-ACE_INLINE IR::EmitsDef_ptr 
-IR::EmitsDef_var::_retn (void)
+ACE_INLINE IR_EmitsDef_ptr 
+IR_EmitsDef_var::_retn (void)
 {
   // yield ownership of managed obj reference
-  IR::EmitsDef_ptr val = this->ptr_;
-  this->ptr_ = IR::EmitsDef::_nil ();
+  IR_EmitsDef_ptr val = this->ptr_;
+  this->ptr_ = IR_EmitsDef::_nil ();
   return val;
 }
 
-
-#endif /* end #if !defined */
-
-
-#if !defined (_IR_EMITSDEF___OUT_CI_)
-#define _IR_EMITSDEF___OUT_CI_
-
 // *************************************************************
-// Inline operations for class IR::EmitsDef_out
+// Inline operations for class IR_EmitsDef_out
 // *************************************************************
 
 ACE_INLINE
-IR::EmitsDef_out::EmitsDef_out (IR::EmitsDef_ptr &p)
+IR_EmitsDef_out::IR_EmitsDef_out (IR_EmitsDef_ptr &p)
   : ptr_ (p)
 {
-  this->ptr_ = IR::EmitsDef::_nil ();
+  this->ptr_ = IR_EmitsDef::_nil ();
 }
 
 ACE_INLINE
-IR::EmitsDef_out::EmitsDef_out (IR::EmitsDef_var &p) // constructor from _var
+IR_EmitsDef_out::IR_EmitsDef_out (IR_EmitsDef_var &p) // constructor from _var
   : ptr_ (p.out ())
 {
   CORBA::release (this->ptr_);
-  this->ptr_ = IR::EmitsDef::_nil ();
+  this->ptr_ = IR_EmitsDef::_nil ();
 }
 
 ACE_INLINE
-IR::EmitsDef_out::EmitsDef_out (const IR::EmitsDef_out &p) // copy constructor
-  : ptr_ (ACE_const_cast (IR::EmitsDef_out&,p).ptr_)
+IR_EmitsDef_out::IR_EmitsDef_out (const IR_EmitsDef_out &p) // copy constructor
+  : ptr_ (ACE_const_cast (IR_EmitsDef_out&,p).ptr_)
 {}
 
-ACE_INLINE IR::EmitsDef_out &
-IR::EmitsDef_out::operator= (const IR::EmitsDef_out &p)
+ACE_INLINE IR_EmitsDef_out &
+IR_EmitsDef_out::operator= (const IR_EmitsDef_out &p)
 {
-  this->ptr_ = ACE_const_cast (IR::EmitsDef_out&,p).ptr_;
+  this->ptr_ = ACE_const_cast (IR_EmitsDef_out&,p).ptr_;
   return *this;
 }
 
-ACE_INLINE IR::EmitsDef_out &
-IR::EmitsDef_out::operator= (const IR::EmitsDef_var &p)
+ACE_INLINE IR_EmitsDef_out &
+IR_EmitsDef_out::operator= (const IR_EmitsDef_var &p)
 {
-  this->ptr_ = IR::EmitsDef::_duplicate (p.ptr ());
+  this->ptr_ = IR_EmitsDef::_duplicate (p.ptr ());
   return *this;
 }
 
-ACE_INLINE IR::EmitsDef_out &
-IR::EmitsDef_out::operator= (IR::EmitsDef_ptr p)
+ACE_INLINE IR_EmitsDef_out &
+IR_EmitsDef_out::operator= (IR_EmitsDef_ptr p)
 {
   this->ptr_ = p;
   return *this;
 }
 
 ACE_INLINE 
-IR::EmitsDef_out::operator IR::EmitsDef_ptr &() // cast
+IR_EmitsDef_out::operator IR_EmitsDef_ptr &() // cast
 {
   return this->ptr_;
 }
 
-ACE_INLINE IR::EmitsDef_ptr &
-IR::EmitsDef_out::ptr (void) // ptr
+ACE_INLINE IR_EmitsDef_ptr &
+IR_EmitsDef_out::ptr (void) // ptr
 {
   return this->ptr_;
 }
 
-ACE_INLINE IR::EmitsDef_ptr 
-IR::EmitsDef_out::operator-> (void)
+ACE_INLINE IR_EmitsDef_ptr 
+IR_EmitsDef_out::operator-> (void)
 {
   return this->ptr_;
 }
 
-
-#endif /* end #if !defined */
-
-
 #if !defined (TAO_USE_SEQUENCE_TEMPLATES)
   
-#if !defined (__TAO_UNBOUNDED_OBJECT_SEQUENCE_IR_EMITSDEFSEQ_CI_)
-#define __TAO_UNBOUNDED_OBJECT_SEQUENCE_IR_EMITSDEFSEQ_CI_
-
-  ACE_INLINE IR::EmitsDef **
-  IR::_TAO_Unbounded_Object_Sequence_IR_EmitsDefSeq::allocbuf (CORBA::ULong nelems)
+  ACE_INLINE IR_EmitsDef **
+  _TAO_Unbounded_Object_Sequence_IR_EmitsDefSeq::allocbuf (CORBA::ULong nelems)
   {
-    IR::EmitsDef **buf = 0;
+    IR_EmitsDef **buf = 0;
     
-    ACE_NEW_RETURN (buf, IR::EmitsDef*[nelems], 0);
+    ACE_NEW_RETURN (buf, IR_EmitsDef*[nelems], 0);
     
     for (CORBA::ULong i = 0; i < nelems; i++)
-      buf[i] = IR::EmitsDef::_nil ();
+      buf[i] = IR_EmitsDef::_nil ();
     
     return buf;
   }
   
   ACE_INLINE void 
-  IR::_TAO_Unbounded_Object_Sequence_IR_EmitsDefSeq::freebuf (IR::EmitsDef **buffer)
+  _TAO_Unbounded_Object_Sequence_IR_EmitsDefSeq::freebuf (IR_EmitsDef **buffer)
   {
     if (buffer == 0)
       return;
@@ -6583,36 +6034,36 @@
   }
   
   ACE_INLINE
-  IR::_TAO_Unbounded_Object_Sequence_IR_EmitsDefSeq::_TAO_Unbounded_Object_Sequence_IR_EmitsDefSeq (void)
+  _TAO_Unbounded_Object_Sequence_IR_EmitsDefSeq::_TAO_Unbounded_Object_Sequence_IR_EmitsDefSeq (void)
   {
   }
   
   ACE_INLINE
-  IR::_TAO_Unbounded_Object_Sequence_IR_EmitsDefSeq::_TAO_Unbounded_Object_Sequence_IR_EmitsDefSeq (CORBA::ULong maximum)
+  _TAO_Unbounded_Object_Sequence_IR_EmitsDefSeq::_TAO_Unbounded_Object_Sequence_IR_EmitsDefSeq (CORBA::ULong maximum)
     : TAO_Unbounded_Base_Sequence (maximum, _TAO_Unbounded_Object_Sequence_IR_EmitsDefSeq::allocbuf (maximum))
   {
   }
   
   ACE_INLINE
-  IR::_TAO_Unbounded_Object_Sequence_IR_EmitsDefSeq::_TAO_Unbounded_Object_Sequence_IR_EmitsDefSeq (CORBA::ULong maximum,
+  _TAO_Unbounded_Object_Sequence_IR_EmitsDefSeq::_TAO_Unbounded_Object_Sequence_IR_EmitsDefSeq (CORBA::ULong maximum,
     CORBA::ULong length,
-    IR::EmitsDef* *value,
+    IR_EmitsDef* *value,
     CORBA::Boolean release)
   : TAO_Unbounded_Base_Sequence (maximum, length, value, release)
   {
   }
   
   ACE_INLINE
-  IR::_TAO_Unbounded_Object_Sequence_IR_EmitsDefSeq::_TAO_Unbounded_Object_Sequence_IR_EmitsDefSeq(const _TAO_Unbounded_Object_Sequence_IR_EmitsDefSeq &rhs)
+  _TAO_Unbounded_Object_Sequence_IR_EmitsDefSeq::_TAO_Unbounded_Object_Sequence_IR_EmitsDefSeq(const _TAO_Unbounded_Object_Sequence_IR_EmitsDefSeq &rhs)
     : TAO_Unbounded_Base_Sequence (rhs)
   {
     if (rhs.buffer_ != 0)
     {
-      IR::EmitsDef **tmp1 = _TAO_Unbounded_Object_Sequence_IR_EmitsDefSeq::allocbuf (this->maximum_);
-      IR::EmitsDef ** const tmp2 = ACE_reinterpret_cast (IR::EmitsDef ** ACE_CAST_CONST, rhs.buffer_);
+      IR_EmitsDef **tmp1 = _TAO_Unbounded_Object_Sequence_IR_EmitsDefSeq::allocbuf (this->maximum_);
+      IR_EmitsDef ** const tmp2 = ACE_reinterpret_cast (IR_EmitsDef ** ACE_CAST_CONST, rhs.buffer_);
       
       for (CORBA::ULong i = 0; i < rhs.length_; ++i)
-        tmp1[i] = IR::EmitsDef::_duplicate (tmp2[i]);
+        tmp1[i] = IR_EmitsDef::_duplicate (tmp2[i]);
       
       this->buffer_ = tmp1;
     }
@@ -6622,20 +6073,20 @@
     }
   }
   
-  ACE_INLINE IR::_TAO_Unbounded_Object_Sequence_IR_EmitsDefSeq &
-  IR::_TAO_Unbounded_Object_Sequence_IR_EmitsDefSeq::operator= (const _TAO_Unbounded_Object_Sequence_IR_EmitsDefSeq &rhs)
+  ACE_INLINE _TAO_Unbounded_Object_Sequence_IR_EmitsDefSeq &
+  _TAO_Unbounded_Object_Sequence_IR_EmitsDefSeq::operator= (const _TAO_Unbounded_Object_Sequence_IR_EmitsDefSeq &rhs)
   {
     if (this == &rhs)
       return *this;
     
     if (this->release_)
     {
-      IR::EmitsDef **tmp = ACE_reinterpret_cast (IR::EmitsDef **, this->buffer_);
+      IR_EmitsDef **tmp = ACE_reinterpret_cast (IR_EmitsDef **, this->buffer_);
       
       for (CORBA::ULong i = 0; i < this->length_; ++i)
       {
         CORBA::release (tmp[i]);
-        tmp[i] = IR::EmitsDef::_nil ();
+        tmp[i] = IR_EmitsDef::_nil ();
       }
       if (this->maximum_ < rhs.maximum_)
       {
@@ -6648,28 +6099,28 @@
     
     TAO_Unbounded_Base_Sequence::operator= (rhs);
     
-    IR::EmitsDef **tmp1 = ACE_reinterpret_cast (IR::EmitsDef **, this->buffer_);
-    IR::EmitsDef ** const tmp2 = ACE_reinterpret_cast (IR::EmitsDef ** ACE_CAST_CONST, rhs.buffer_);
+    IR_EmitsDef **tmp1 = ACE_reinterpret_cast (IR_EmitsDef **, this->buffer_);
+    IR_EmitsDef ** const tmp2 = ACE_reinterpret_cast (IR_EmitsDef ** ACE_CAST_CONST, rhs.buffer_);
     
     for (CORBA::ULong i = 0; i < rhs.length_; ++i)
-      tmp1[i] = IR::EmitsDef::_duplicate (tmp2[i]);
+      tmp1[i] = IR_EmitsDef::_duplicate (tmp2[i]);
     
     return *this;
   }
   
-  ACE_INLINE TAO_Object_Manager<IR::EmitsDef,IR::EmitsDef_var>
-  IR::_TAO_Unbounded_Object_Sequence_IR_EmitsDefSeq::operator[] (CORBA::ULong index) const
+  ACE_INLINE TAO_Object_Manager<IR_EmitsDef,IR_EmitsDef_var>
+  _TAO_Unbounded_Object_Sequence_IR_EmitsDefSeq::operator[] (CORBA::ULong index) const
   // read-write accessor
   {
     ACE_ASSERT (index < this->maximum_);
-    IR::EmitsDef ** const tmp = ACE_reinterpret_cast (IR::EmitsDef ** ACE_CAST_CONST, this->buffer_);
-    return TAO_Object_Manager<IR::EmitsDef,IR::EmitsDef_var> (tmp + index, this->release_);
+    IR_EmitsDef ** const tmp = ACE_reinterpret_cast (IR_EmitsDef ** ACE_CAST_CONST, this->buffer_);
+    return TAO_Object_Manager<IR_EmitsDef,IR_EmitsDef_var> (tmp + index, this->release_);
   }
   
-  ACE_INLINE IR::EmitsDef* *
-  IR::_TAO_Unbounded_Object_Sequence_IR_EmitsDefSeq::get_buffer (CORBA::Boolean orphan)
+  ACE_INLINE IR_EmitsDef* *
+  _TAO_Unbounded_Object_Sequence_IR_EmitsDefSeq::get_buffer (CORBA::Boolean orphan)
   {
-    IR::EmitsDef **result = 0;
+    IR_EmitsDef **result = 0;
     if (orphan == 0)
     {
       // We retain ownership.
@@ -6681,7 +6132,7 @@
       }
       else
       {
-        result = ACE_reinterpret_cast (IR::EmitsDef**, this->buffer_);
+        result = ACE_reinterpret_cast (IR_EmitsDef**, this->buffer_);
       }
     }
     else // if (orphan == 1)
@@ -6690,7 +6141,7 @@
       {
         // We set the state back to default and relinquish
         // ownership.
-        result = ACE_reinterpret_cast(IR::EmitsDef**,this->buffer_);
+        result = ACE_reinterpret_cast(IR_EmitsDef**,this->buffer_);
         this->maximum_ = 0;
         this->length_ = 0;
         this->buffer_ = 0;
@@ -6700,60 +6151,53 @@
     return result;
   }
   
-  ACE_INLINE const IR::EmitsDef* *
-  IR::_TAO_Unbounded_Object_Sequence_IR_EmitsDefSeq::get_buffer (void) const
+  ACE_INLINE const IR_EmitsDef* *
+  _TAO_Unbounded_Object_Sequence_IR_EmitsDefSeq::get_buffer (void) const
   {
-    return ACE_reinterpret_cast(const IR::EmitsDef ** ACE_CAST_CONST, this->buffer_);
+    return ACE_reinterpret_cast(const IR_EmitsDef ** ACE_CAST_CONST, this->buffer_);
   }
   
-  
-#endif /* end #if !defined */
-
-
 #endif /* !TAO_USE_SEQUENCE_TEMPLATES */ 
 
-#if !defined (_IR_EMITSDEFSEQ_CI_)
-#define _IR_EMITSDEFSEQ_CI_
-
 // *************************************************************
-// Inline operations for class IR::EmitsDefSeq_var
+// Inline operations for class IR_EmitsDefSeq_var
 // *************************************************************
 
 ACE_INLINE
-IR::EmitsDefSeq_var::EmitsDefSeq_var (void) // default constructor
+IR_EmitsDefSeq_var::IR_EmitsDefSeq_var (void) // default constructor
   : ptr_ (0)
 {}
 
 ACE_INLINE
-IR::EmitsDefSeq_var::EmitsDefSeq_var (EmitsDefSeq *p)
+IR_EmitsDefSeq_var::IR_EmitsDefSeq_var (IR_EmitsDefSeq *p)
   : ptr_ (p)
 {}
 
 ACE_INLINE
-IR::EmitsDefSeq_var::EmitsDefSeq_var (const ::IR::EmitsDefSeq_var &p) // copy constructor
+IR_EmitsDefSeq_var::IR_EmitsDefSeq_var (const ::IR_EmitsDefSeq_var &p) // copy constructor
 {
   if (p.ptr_)
-    ACE_NEW (this->ptr_, ::IR::EmitsDefSeq (*p.ptr_));
+    ACE_NEW (this->ptr_, ::IR_EmitsDefSeq (*p.ptr_));
   else
     this->ptr_ = 0;
 }
 
 ACE_INLINE
-IR::EmitsDefSeq_var::~EmitsDefSeq_var (void) // destructor
+IR_EmitsDefSeq_var::~IR_EmitsDefSeq_var (void) // destructor
 {
   delete this->ptr_;
 }
 
-ACE_INLINE IR::EmitsDefSeq_var &
-IR::EmitsDefSeq_var::operator= (EmitsDefSeq *p)
+ACE_INLINE IR_EmitsDefSeq_var &
+IR_EmitsDefSeq_var::operator= (IR_EmitsDefSeq *p)
 {
   delete this->ptr_;
   this->ptr_ = p;
   return *this;
 }
 
-ACE_INLINE ::IR::EmitsDefSeq_var &
-IR::EmitsDefSeq_var::operator= (const ::IR::EmitsDefSeq_var &p)
+ACE_INLINE IR_EmitsDefSeq_var &
+IR_EmitsDefSeq_var::operator= (const ::IR_EmitsDefSeq_var &p) // deep copy
 {
   if (this != &p)
     {
@@ -6764,12 +6208,12 @@
         }
       else
         {
-          EmitsDefSeq *deep_copy =
-            new EmitsDefSeq (*p.ptr_);
+          IR_EmitsDefSeq *deep_copy = 
+            new IR_EmitsDefSeq (*p.ptr_);
           
           if (deep_copy != 0)
             {
-              EmitsDefSeq *tmp = deep_copy;
+              IR_EmitsDefSeq *tmp = deep_copy;
               deep_copy = this->ptr_;
               this->ptr_ = tmp;
               delete deep_copy;
@@ -6780,97 +6224,97 @@
   return *this;
 }
 
-ACE_INLINE const ::IR::EmitsDefSeq *
-IR::EmitsDefSeq_var::operator-> (void) const
+ACE_INLINE const ::IR_EmitsDefSeq *
+IR_EmitsDefSeq_var::operator-> (void) const
 {
   return this->ptr_;
 }
 
-ACE_INLINE ::IR::EmitsDefSeq *
-IR::EmitsDefSeq_var::operator-> (void)
+ACE_INLINE ::IR_EmitsDefSeq *
+IR_EmitsDefSeq_var::operator-> (void)
 {
   return this->ptr_;
 }
 
 ACE_INLINE 
-IR::EmitsDefSeq_var::operator const ::IR::EmitsDefSeq &() const // cast
+IR_EmitsDefSeq_var::operator const ::IR_EmitsDefSeq &() const // cast
 {
   return *this->ptr_;
 }
 
 ACE_INLINE 
-IR::EmitsDefSeq_var::operator ::IR::EmitsDefSeq &() // cast 
+IR_EmitsDefSeq_var::operator ::IR_EmitsDefSeq &() // cast 
 {
   return *this->ptr_;
 }
 
 ACE_INLINE 
-IR::EmitsDefSeq_var::operator ::IR::EmitsDefSeq &() const // cast 
+IR_EmitsDefSeq_var::operator ::IR_EmitsDefSeq &() const // cast 
 {
   return *this->ptr_;
 }
 
 // variable-size types only
 ACE_INLINE
-IR::EmitsDefSeq_var::operator ::IR::EmitsDefSeq *&() // cast 
+IR_EmitsDefSeq_var::operator ::IR_EmitsDefSeq *&() // cast 
 {
   return this->ptr_;
 }
 
-ACE_INLINE TAO_Object_Manager<IR::EmitsDef, IR::EmitsDef_var>
-IR::EmitsDefSeq_var::operator[] (CORBA::ULong index)
+ACE_INLINE TAO_Object_Manager<IR_EmitsDef, IR_EmitsDef_var>
+IR_EmitsDefSeq_var::operator[] (CORBA::ULong index)
 {
   return this->ptr_->operator[] (index);
 }
 
-ACE_INLINE const ::IR::EmitsDefSeq &
-IR::EmitsDefSeq_var::in (void) const
+ACE_INLINE const ::IR_EmitsDefSeq &
+IR_EmitsDefSeq_var::in (void) const
 {
   return *this->ptr_;
 }
 
-ACE_INLINE ::IR::EmitsDefSeq &
-IR::EmitsDefSeq_var::inout (void)
+ACE_INLINE ::IR_EmitsDefSeq &
+IR_EmitsDefSeq_var::inout (void)
 {
   return *this->ptr_;
 }
 
 // mapping for variable size 
-ACE_INLINE ::IR::EmitsDefSeq *&
-IR::EmitsDefSeq_var::out (void)
+ACE_INLINE ::IR_EmitsDefSeq *&
+IR_EmitsDefSeq_var::out (void)
 {
   delete this->ptr_;
   this->ptr_ = 0;
   return this->ptr_;
 }
 
-ACE_INLINE ::IR::EmitsDefSeq *
-IR::EmitsDefSeq_var::_retn (void)
+ACE_INLINE ::IR_EmitsDefSeq *
+IR_EmitsDefSeq_var::_retn (void)
 {
-  ::IR::EmitsDefSeq *tmp = this->ptr_;
+  ::IR_EmitsDefSeq *tmp = this->ptr_;
   this->ptr_ = 0;
   return tmp;
 }
 
-ACE_INLINE ::IR::EmitsDefSeq *
-IR::EmitsDefSeq_var::ptr (void) const
+ACE_INLINE ::IR_EmitsDefSeq *
+IR_EmitsDefSeq_var::ptr (void) const
 {
   return this->ptr_;
 }
 
 // *************************************************************
-// Inline operations for class IR::EmitsDefSeq_out
+// Inline operations for class IR_EmitsDefSeq_out
 // *************************************************************
 
 ACE_INLINE
-IR::EmitsDefSeq_out::EmitsDefSeq_out (EmitsDefSeq *&p)
+IR_EmitsDefSeq_out::IR_EmitsDefSeq_out (IR_EmitsDefSeq *&p)
   : ptr_ (p)
 {
   this->ptr_ = 0;
 }
 
 ACE_INLINE
-IR::EmitsDefSeq_out::EmitsDefSeq_out (EmitsDefSeq_var &p) // constructor from _var
+IR_EmitsDefSeq_out::IR_EmitsDefSeq_out (IR_EmitsDefSeq_var &p) // constructor from _var
   : ptr_ (p.out ())
 {
   delete this->ptr_;
@@ -6878,57 +6322,50 @@
 }
 
 ACE_INLINE
-IR::EmitsDefSeq_out::EmitsDefSeq_out (const ::IR::EmitsDefSeq_out &p) // copy constructor
-  : ptr_ (ACE_const_cast (EmitsDefSeq_out&, p).ptr_)
+IR_EmitsDefSeq_out::IR_EmitsDefSeq_out (const ::IR_EmitsDefSeq_out &p) // copy constructor
+  : ptr_ (ACE_const_cast (IR_EmitsDefSeq_out&, p).ptr_)
 {}
 
-ACE_INLINE ::IR::EmitsDefSeq_out &
-IR::EmitsDefSeq_out::operator= (const ::IR::EmitsDefSeq_out &p)
+ACE_INLINE ::IR_EmitsDefSeq_out &
+IR_EmitsDefSeq_out::operator= (const ::IR_EmitsDefSeq_out &p)
 {
-  this->ptr_ = ACE_const_cast (EmitsDefSeq_out&, p).ptr_;
+  this->ptr_ = ACE_const_cast (IR_EmitsDefSeq_out&, p).ptr_;
   return *this;
 }
 
-ACE_INLINE ::IR::EmitsDefSeq_out &
-IR::EmitsDefSeq_out::operator= (EmitsDefSeq *p)
+ACE_INLINE ::IR_EmitsDefSeq_out &
+IR_EmitsDefSeq_out::operator= (IR_EmitsDefSeq *p)
 {
   this->ptr_ = p;
   return *this;
 }
 
 ACE_INLINE 
-IR::EmitsDefSeq_out::operator ::IR::EmitsDefSeq *&() // cast
+IR_EmitsDefSeq_out::operator ::IR_EmitsDefSeq *&() // cast
 {
   return this->ptr_;
 }
 
-ACE_INLINE ::IR::EmitsDefSeq *&
-IR::EmitsDefSeq_out::ptr (void) // ptr
+ACE_INLINE ::IR_EmitsDefSeq *&
+IR_EmitsDefSeq_out::ptr (void) // ptr
 {
   return this->ptr_;
 }
 
-ACE_INLINE ::IR::EmitsDefSeq *
-IR::EmitsDefSeq_out::operator-> (void)
+ACE_INLINE ::IR_EmitsDefSeq *
+IR_EmitsDefSeq_out::operator-> (void)
 {
   return this->ptr_;
 }
 
-ACE_INLINE TAO_Object_Manager<IR::EmitsDef, IR::EmitsDef_var>
-IR::EmitsDefSeq_out::operator[] (CORBA::ULong index)
+ACE_INLINE TAO_Object_Manager<IR_EmitsDef, IR_EmitsDef_var>
+IR_EmitsDefSeq_out::operator[] (CORBA::ULong index)
 {
   return this->ptr_->operator[] (index);
 }
 
-
-#endif /* end #if !defined */
-
-
-#if !defined (_IR_PUBLISHESDEF___CI_)
-#define _IR_PUBLISHESDEF___CI_
-
 ACE_INLINE
-IR::PublishesDef::PublishesDef (
+IR_PublishesDef::IR_PublishesDef (
     TAO_Stub *objref,
     CORBA::Boolean _tao_collocated,
     TAO_Abstract_ServantBase *servant
@@ -6938,200 +6375,179 @@
   this->IR_PublishesDef_setup_collocation (_tao_collocated);
 }
 
-
-#endif /* end #if !defined */
-
-
-#if !defined (_IR_PUBLISHESDEF___VAR_CI_)
-#define _IR_PUBLISHESDEF___VAR_CI_
-
 // *************************************************************
-// Inline operations for class IR::PublishesDef_var
+// Inline operations for class IR_PublishesDef_var
 // *************************************************************
 
 ACE_INLINE
-IR::PublishesDef_var::PublishesDef_var (void) // default constructor
-  : ptr_ (IR::PublishesDef::_nil ())
+IR_PublishesDef_var::IR_PublishesDef_var (void) // default constructor
+  : ptr_ (IR_PublishesDef::_nil ())
 {}
 
-ACE_INLINE IR::PublishesDef_ptr 
-IR::PublishesDef_var::ptr (void) const
+ACE_INLINE IR_PublishesDef_ptr 
+IR_PublishesDef_var::ptr (void) const
 {
   return this->ptr_;
 }
 
 ACE_INLINE
-IR::PublishesDef_var::PublishesDef_var (const IR::PublishesDef_var &p) // copy constructor
+IR_PublishesDef_var::IR_PublishesDef_var (const IR_PublishesDef_var &p) // copy constructor
   : TAO_Base_var (),
-    ptr_ (PublishesDef::_duplicate (p.ptr ()))
+    ptr_ (IR_PublishesDef::_duplicate (p.ptr ()))
 {}
 
 ACE_INLINE
-IR::PublishesDef_var::~PublishesDef_var (void) // destructor
+IR_PublishesDef_var::~IR_PublishesDef_var (void) // destructor
 {
   CORBA::release (this->ptr_);
 }
 
-ACE_INLINE IR::PublishesDef_var &
-IR::PublishesDef_var::operator= (IR::PublishesDef_ptr p)
+ACE_INLINE IR_PublishesDef_var &
+IR_PublishesDef_var::operator= (IR_PublishesDef_ptr p)
 {
   CORBA::release (this->ptr_);
   this->ptr_ = p;
   return *this;
 }
 
-ACE_INLINE IR::PublishesDef_var &
-IR::PublishesDef_var::operator= (const IR::PublishesDef_var &p)
+ACE_INLINE IR_PublishesDef_var &
+IR_PublishesDef_var::operator= (const IR_PublishesDef_var &p)
 {
   if (this != &p)
   {
     CORBA::release (this->ptr_);
-    this->ptr_ = IR::PublishesDef::_duplicate (p.ptr ());
+    this->ptr_ = IR_PublishesDef::_duplicate (p.ptr ());
   }
   return *this;
 }
 
 ACE_INLINE 
-IR::PublishesDef_var::operator const IR::PublishesDef_ptr &() const // cast
+IR_PublishesDef_var::operator const IR_PublishesDef_ptr &() const // cast
 {
   return this->ptr_;
 }
 
 ACE_INLINE 
-IR::PublishesDef_var::operator IR::PublishesDef_ptr &() // cast 
+IR_PublishesDef_var::operator IR_PublishesDef_ptr &() // cast 
 {
   return this->ptr_;
 }
 
-ACE_INLINE IR::PublishesDef_ptr 
-IR::PublishesDef_var::operator-> (void) const
+ACE_INLINE IR_PublishesDef_ptr 
+IR_PublishesDef_var::operator-> (void) const
 {
   return this->ptr_;
 }
 
-ACE_INLINE IR::PublishesDef_ptr
-IR::PublishesDef_var::in (void) const
+ACE_INLINE IR_PublishesDef_ptr
+IR_PublishesDef_var::in (void) const
 {
   return this->ptr_;
 }
 
-ACE_INLINE IR::PublishesDef_ptr &
-IR::PublishesDef_var::inout (void)
+ACE_INLINE IR_PublishesDef_ptr &
+IR_PublishesDef_var::inout (void)
 {
   return this->ptr_;
 }
 
-ACE_INLINE IR::PublishesDef_ptr &
-IR::PublishesDef_var::out (void)
+ACE_INLINE IR_PublishesDef_ptr &
+IR_PublishesDef_var::out (void)
 {
   CORBA::release (this->ptr_);
-  this->ptr_ = IR::PublishesDef::_nil ();
+  this->ptr_ = IR_PublishesDef::_nil ();
   return this->ptr_;
 }
 
-ACE_INLINE IR::PublishesDef_ptr 
-IR::PublishesDef_var::_retn (void)
+ACE_INLINE IR_PublishesDef_ptr 
+IR_PublishesDef_var::_retn (void)
 {
   // yield ownership of managed obj reference
-  IR::PublishesDef_ptr val = this->ptr_;
-  this->ptr_ = IR::PublishesDef::_nil ();
+  IR_PublishesDef_ptr val = this->ptr_;
+  this->ptr_ = IR_PublishesDef::_nil ();
   return val;
 }
 
-
-#endif /* end #if !defined */
-
-
-#if !defined (_IR_PUBLISHESDEF___OUT_CI_)
-#define _IR_PUBLISHESDEF___OUT_CI_
-
 // *************************************************************
-// Inline operations for class IR::PublishesDef_out
+// Inline operations for class IR_PublishesDef_out
 // *************************************************************
 
 ACE_INLINE
-IR::PublishesDef_out::PublishesDef_out (IR::PublishesDef_ptr &p)
+IR_PublishesDef_out::IR_PublishesDef_out (IR_PublishesDef_ptr &p)
   : ptr_ (p)
 {
-  this->ptr_ = IR::PublishesDef::_nil ();
+  this->ptr_ = IR_PublishesDef::_nil ();
 }
 
 ACE_INLINE
-IR::PublishesDef_out::PublishesDef_out (IR::PublishesDef_var &p) // constructor from _var
+IR_PublishesDef_out::IR_PublishesDef_out (IR_PublishesDef_var &p) // constructor from _var
   : ptr_ (p.out ())
 {
   CORBA::release (this->ptr_);
-  this->ptr_ = IR::PublishesDef::_nil ();
+  this->ptr_ = IR_PublishesDef::_nil ();
 }
 
 ACE_INLINE
-IR::PublishesDef_out::PublishesDef_out (const IR::PublishesDef_out &p) // copy constructor
-  : ptr_ (ACE_const_cast (IR::PublishesDef_out&,p).ptr_)
+IR_PublishesDef_out::IR_PublishesDef_out (const IR_PublishesDef_out &p) // copy constructor
+  : ptr_ (ACE_const_cast (IR_PublishesDef_out&,p).ptr_)
 {}
 
-ACE_INLINE IR::PublishesDef_out &
-IR::PublishesDef_out::operator= (const IR::PublishesDef_out &p)
+ACE_INLINE IR_PublishesDef_out &
+IR_PublishesDef_out::operator= (const IR_PublishesDef_out &p)
 {
-  this->ptr_ = ACE_const_cast (IR::PublishesDef_out&,p).ptr_;
+  this->ptr_ = ACE_const_cast (IR_PublishesDef_out&,p).ptr_;
   return *this;
 }
 
-ACE_INLINE IR::PublishesDef_out &
-IR::PublishesDef_out::operator= (const IR::PublishesDef_var &p)
+ACE_INLINE IR_PublishesDef_out &
+IR_PublishesDef_out::operator= (const IR_PublishesDef_var &p)
 {
-  this->ptr_ = IR::PublishesDef::_duplicate (p.ptr ());
+  this->ptr_ = IR_PublishesDef::_duplicate (p.ptr ());
   return *this;
 }
 
-ACE_INLINE IR::PublishesDef_out &
-IR::PublishesDef_out::operator= (IR::PublishesDef_ptr p)
+ACE_INLINE IR_PublishesDef_out &
+IR_PublishesDef_out::operator= (IR_PublishesDef_ptr p)
 {
   this->ptr_ = p;
   return *this;
 }
 
 ACE_INLINE 
-IR::PublishesDef_out::operator IR::PublishesDef_ptr &() // cast
+IR_PublishesDef_out::operator IR_PublishesDef_ptr &() // cast
 {
   return this->ptr_;
 }
 
-ACE_INLINE IR::PublishesDef_ptr &
-IR::PublishesDef_out::ptr (void) // ptr
+ACE_INLINE IR_PublishesDef_ptr &
+IR_PublishesDef_out::ptr (void) // ptr
 {
   return this->ptr_;
 }
 
-ACE_INLINE IR::PublishesDef_ptr 
-IR::PublishesDef_out::operator-> (void)
+ACE_INLINE IR_PublishesDef_ptr 
+IR_PublishesDef_out::operator-> (void)
 {
   return this->ptr_;
 }
 
-
-#endif /* end #if !defined */
-
-
 #if !defined (TAO_USE_SEQUENCE_TEMPLATES)
   
-#if !defined (__TAO_UNBOUNDED_OBJECT_SEQUENCE_IR_PUBLISHESDEFSEQ_CI_)
-#define __TAO_UNBOUNDED_OBJECT_SEQUENCE_IR_PUBLISHESDEFSEQ_CI_
-
-  ACE_INLINE IR::PublishesDef **
-  IR::_TAO_Unbounded_Object_Sequence_IR_PublishesDefSeq::allocbuf (CORBA::ULong nelems)
+  ACE_INLINE IR_PublishesDef **
+  _TAO_Unbounded_Object_Sequence_IR_PublishesDefSeq::allocbuf (CORBA::ULong nelems)
   {
-    IR::PublishesDef **buf = 0;
+    IR_PublishesDef **buf = 0;
     
-    ACE_NEW_RETURN (buf, IR::PublishesDef*[nelems], 0);
+    ACE_NEW_RETURN (buf, IR_PublishesDef*[nelems], 0);
     
     for (CORBA::ULong i = 0; i < nelems; i++)
-      buf[i] = IR::PublishesDef::_nil ();
+      buf[i] = IR_PublishesDef::_nil ();
     
     return buf;
   }
   
   ACE_INLINE void 
-  IR::_TAO_Unbounded_Object_Sequence_IR_PublishesDefSeq::freebuf (IR::PublishesDef **buffer)
+  _TAO_Unbounded_Object_Sequence_IR_PublishesDefSeq::freebuf (IR_PublishesDef **buffer)
   {
     if (buffer == 0)
       return;
@@ -7139,36 +6555,36 @@
   }
   
   ACE_INLINE
-  IR::_TAO_Unbounded_Object_Sequence_IR_PublishesDefSeq::_TAO_Unbounded_Object_Sequence_IR_PublishesDefSeq (void)
+  _TAO_Unbounded_Object_Sequence_IR_PublishesDefSeq::_TAO_Unbounded_Object_Sequence_IR_PublishesDefSeq (void)
   {
   }
   
   ACE_INLINE
-  IR::_TAO_Unbounded_Object_Sequence_IR_PublishesDefSeq::_TAO_Unbounded_Object_Sequence_IR_PublishesDefSeq (CORBA::ULong maximum)
+  _TAO_Unbounded_Object_Sequence_IR_PublishesDefSeq::_TAO_Unbounded_Object_Sequence_IR_PublishesDefSeq (CORBA::ULong maximum)
     : TAO_Unbounded_Base_Sequence (maximum, _TAO_Unbounded_Object_Sequence_IR_PublishesDefSeq::allocbuf (maximum))
   {
   }
   
   ACE_INLINE
-  IR::_TAO_Unbounded_Object_Sequence_IR_PublishesDefSeq::_TAO_Unbounded_Object_Sequence_IR_PublishesDefSeq (CORBA::ULong maximum,
+  _TAO_Unbounded_Object_Sequence_IR_PublishesDefSeq::_TAO_Unbounded_Object_Sequence_IR_PublishesDefSeq (CORBA::ULong maximum,
     CORBA::ULong length,
-    IR::PublishesDef* *value,
+    IR_PublishesDef* *value,
     CORBA::Boolean release)
   : TAO_Unbounded_Base_Sequence (maximum, length, value, release)
   {
   }
   
   ACE_INLINE
-  IR::_TAO_Unbounded_Object_Sequence_IR_PublishesDefSeq::_TAO_Unbounded_Object_Sequence_IR_PublishesDefSeq(const _TAO_Unbounded_Object_Sequence_IR_PublishesDefSeq &rhs)
+  _TAO_Unbounded_Object_Sequence_IR_PublishesDefSeq::_TAO_Unbounded_Object_Sequence_IR_PublishesDefSeq(const _TAO_Unbounded_Object_Sequence_IR_PublishesDefSeq &rhs)
     : TAO_Unbounded_Base_Sequence (rhs)
   {
     if (rhs.buffer_ != 0)
     {
-      IR::PublishesDef **tmp1 = _TAO_Unbounded_Object_Sequence_IR_PublishesDefSeq::allocbuf (this->maximum_);
-      IR::PublishesDef ** const tmp2 = ACE_reinterpret_cast (IR::PublishesDef ** ACE_CAST_CONST, rhs.buffer_);
+      IR_PublishesDef **tmp1 = _TAO_Unbounded_Object_Sequence_IR_PublishesDefSeq::allocbuf (this->maximum_);
+      IR_PublishesDef ** const tmp2 = ACE_reinterpret_cast (IR_PublishesDef ** ACE_CAST_CONST, rhs.buffer_);
       
       for (CORBA::ULong i = 0; i < rhs.length_; ++i)
-        tmp1[i] = IR::PublishesDef::_duplicate (tmp2[i]);
+        tmp1[i] = IR_PublishesDef::_duplicate (tmp2[i]);
       
       this->buffer_ = tmp1;
     }
@@ -7178,20 +6594,20 @@
     }
   }
   
-  ACE_INLINE IR::_TAO_Unbounded_Object_Sequence_IR_PublishesDefSeq &
-  IR::_TAO_Unbounded_Object_Sequence_IR_PublishesDefSeq::operator= (const _TAO_Unbounded_Object_Sequence_IR_PublishesDefSeq &rhs)
+  ACE_INLINE _TAO_Unbounded_Object_Sequence_IR_PublishesDefSeq &
+  _TAO_Unbounded_Object_Sequence_IR_PublishesDefSeq::operator= (const _TAO_Unbounded_Object_Sequence_IR_PublishesDefSeq &rhs)
   {
     if (this == &rhs)
       return *this;
     
     if (this->release_)
     {
-      IR::PublishesDef **tmp = ACE_reinterpret_cast (IR::PublishesDef **, this->buffer_);
+      IR_PublishesDef **tmp = ACE_reinterpret_cast (IR_PublishesDef **, this->buffer_);
       
       for (CORBA::ULong i = 0; i < this->length_; ++i)
       {
         CORBA::release (tmp[i]);
-        tmp[i] = IR::PublishesDef::_nil ();
+        tmp[i] = IR_PublishesDef::_nil ();
       }
       if (this->maximum_ < rhs.maximum_)
       {
@@ -7204,28 +6620,28 @@
     
     TAO_Unbounded_Base_Sequence::operator= (rhs);
     
-    IR::PublishesDef **tmp1 = ACE_reinterpret_cast (IR::PublishesDef **, this->buffer_);
-    IR::PublishesDef ** const tmp2 = ACE_reinterpret_cast (IR::PublishesDef ** ACE_CAST_CONST, rhs.buffer_);
+    IR_PublishesDef **tmp1 = ACE_reinterpret_cast (IR_PublishesDef **, this->buffer_);
+    IR_PublishesDef ** const tmp2 = ACE_reinterpret_cast (IR_PublishesDef ** ACE_CAST_CONST, rhs.buffer_);
     
     for (CORBA::ULong i = 0; i < rhs.length_; ++i)
-      tmp1[i] = IR::PublishesDef::_duplicate (tmp2[i]);
+      tmp1[i] = IR_PublishesDef::_duplicate (tmp2[i]);
     
     return *this;
   }
   
-  ACE_INLINE TAO_Object_Manager<IR::PublishesDef,IR::PublishesDef_var>
-  IR::_TAO_Unbounded_Object_Sequence_IR_PublishesDefSeq::operator[] (CORBA::ULong index) const
+  ACE_INLINE TAO_Object_Manager<IR_PublishesDef,IR_PublishesDef_var>
+  _TAO_Unbounded_Object_Sequence_IR_PublishesDefSeq::operator[] (CORBA::ULong index) const
   // read-write accessor
   {
     ACE_ASSERT (index < this->maximum_);
-    IR::PublishesDef ** const tmp = ACE_reinterpret_cast (IR::PublishesDef ** ACE_CAST_CONST, this->buffer_);
-    return TAO_Object_Manager<IR::PublishesDef,IR::PublishesDef_var> (tmp + index, this->release_);
+    IR_PublishesDef ** const tmp = ACE_reinterpret_cast (IR_PublishesDef ** ACE_CAST_CONST, this->buffer_);
+    return TAO_Object_Manager<IR_PublishesDef,IR_PublishesDef_var> (tmp + index, this->release_);
   }
   
-  ACE_INLINE IR::PublishesDef* *
-  IR::_TAO_Unbounded_Object_Sequence_IR_PublishesDefSeq::get_buffer (CORBA::Boolean orphan)
+  ACE_INLINE IR_PublishesDef* *
+  _TAO_Unbounded_Object_Sequence_IR_PublishesDefSeq::get_buffer (CORBA::Boolean orphan)
   {
-    IR::PublishesDef **result = 0;
+    IR_PublishesDef **result = 0;
     if (orphan == 0)
     {
       // We retain ownership.
@@ -7237,7 +6653,7 @@
       }
       else
       {
-        result = ACE_reinterpret_cast (IR::PublishesDef**, this->buffer_);
+        result = ACE_reinterpret_cast (IR_PublishesDef**, this->buffer_);
       }
     }
     else // if (orphan == 1)
@@ -7246,7 +6662,7 @@
       {
         // We set the state back to default and relinquish
         // ownership.
-        result = ACE_reinterpret_cast(IR::PublishesDef**,this->buffer_);
+        result = ACE_reinterpret_cast(IR_PublishesDef**,this->buffer_);
         this->maximum_ = 0;
         this->length_ = 0;
         this->buffer_ = 0;
@@ -7256,60 +6672,53 @@
     return result;
   }
   
-  ACE_INLINE const IR::PublishesDef* *
-  IR::_TAO_Unbounded_Object_Sequence_IR_PublishesDefSeq::get_buffer (void) const
+  ACE_INLINE const IR_PublishesDef* *
+  _TAO_Unbounded_Object_Sequence_IR_PublishesDefSeq::get_buffer (void) const
   {
-    return ACE_reinterpret_cast(const IR::PublishesDef ** ACE_CAST_CONST, this->buffer_);
+    return ACE_reinterpret_cast(const IR_PublishesDef ** ACE_CAST_CONST, this->buffer_);
   }
   
-  
-#endif /* end #if !defined */
-
-
 #endif /* !TAO_USE_SEQUENCE_TEMPLATES */ 
 
-#if !defined (_IR_PUBLISHESDEFSEQ_CI_)
-#define _IR_PUBLISHESDEFSEQ_CI_
-
 // *************************************************************
-// Inline operations for class IR::PublishesDefSeq_var
+// Inline operations for class IR_PublishesDefSeq_var
 // *************************************************************
 
 ACE_INLINE
-IR::PublishesDefSeq_var::PublishesDefSeq_var (void) // default constructor
+IR_PublishesDefSeq_var::IR_PublishesDefSeq_var (void) // default constructor
   : ptr_ (0)
 {}
 
 ACE_INLINE
-IR::PublishesDefSeq_var::PublishesDefSeq_var (PublishesDefSeq *p)
+IR_PublishesDefSeq_var::IR_PublishesDefSeq_var (IR_PublishesDefSeq *p)
   : ptr_ (p)
 {}
 
 ACE_INLINE
-IR::PublishesDefSeq_var::PublishesDefSeq_var (const ::IR::PublishesDefSeq_var &p) // copy constructor
+IR_PublishesDefSeq_var::IR_PublishesDefSeq_var (const ::IR_PublishesDefSeq_var &p) // copy constructor
 {
   if (p.ptr_)
-    ACE_NEW (this->ptr_, ::IR::PublishesDefSeq (*p.ptr_));
+    ACE_NEW (this->ptr_, ::IR_PublishesDefSeq (*p.ptr_));
   else
     this->ptr_ = 0;
 }
 
 ACE_INLINE
-IR::PublishesDefSeq_var::~PublishesDefSeq_var (void) // destructor
+IR_PublishesDefSeq_var::~IR_PublishesDefSeq_var (void) // destructor
 {
   delete this->ptr_;
 }
 
-ACE_INLINE IR::PublishesDefSeq_var &
-IR::PublishesDefSeq_var::operator= (PublishesDefSeq *p)
+ACE_INLINE IR_PublishesDefSeq_var &
+IR_PublishesDefSeq_var::operator= (IR_PublishesDefSeq *p)
 {
   delete this->ptr_;
   this->ptr_ = p;
   return *this;
 }
 
-ACE_INLINE ::IR::PublishesDefSeq_var &
-IR::PublishesDefSeq_var::operator= (const ::IR::PublishesDefSeq_var &p)
+ACE_INLINE IR_PublishesDefSeq_var &
+IR_PublishesDefSeq_var::operator= (const ::IR_PublishesDefSeq_var &p) // deep copy
 {
   if (this != &p)
     {
@@ -7320,12 +6729,12 @@
         }
       else
         {
-          PublishesDefSeq *deep_copy =
-            new PublishesDefSeq (*p.ptr_);
+          IR_PublishesDefSeq *deep_copy = 
+            new IR_PublishesDefSeq (*p.ptr_);
           
           if (deep_copy != 0)
             {
-              PublishesDefSeq *tmp = deep_copy;
+              IR_PublishesDefSeq *tmp = deep_copy;
               deep_copy = this->ptr_;
               this->ptr_ = tmp;
               delete deep_copy;
@@ -7336,97 +6745,97 @@
   return *this;
 }
 
-ACE_INLINE const ::IR::PublishesDefSeq *
-IR::PublishesDefSeq_var::operator-> (void) const
+ACE_INLINE const ::IR_PublishesDefSeq *
+IR_PublishesDefSeq_var::operator-> (void) const
 {
   return this->ptr_;
 }
 
-ACE_INLINE ::IR::PublishesDefSeq *
-IR::PublishesDefSeq_var::operator-> (void)
+ACE_INLINE ::IR_PublishesDefSeq *
+IR_PublishesDefSeq_var::operator-> (void)
 {
   return this->ptr_;
 }
 
 ACE_INLINE 
-IR::PublishesDefSeq_var::operator const ::IR::PublishesDefSeq &() const // cast
+IR_PublishesDefSeq_var::operator const ::IR_PublishesDefSeq &() const // cast
 {
   return *this->ptr_;
 }
 
 ACE_INLINE 
-IR::PublishesDefSeq_var::operator ::IR::PublishesDefSeq &() // cast 
+IR_PublishesDefSeq_var::operator ::IR_PublishesDefSeq &() // cast 
 {
   return *this->ptr_;
 }
 
 ACE_INLINE 
-IR::PublishesDefSeq_var::operator ::IR::PublishesDefSeq &() const // cast 
+IR_PublishesDefSeq_var::operator ::IR_PublishesDefSeq &() const // cast 
 {
   return *this->ptr_;
 }
 
 // variable-size types only
 ACE_INLINE
-IR::PublishesDefSeq_var::operator ::IR::PublishesDefSeq *&() // cast 
+IR_PublishesDefSeq_var::operator ::IR_PublishesDefSeq *&() // cast 
 {
   return this->ptr_;
 }
 
-ACE_INLINE TAO_Object_Manager<IR::PublishesDef, IR::PublishesDef_var>
-IR::PublishesDefSeq_var::operator[] (CORBA::ULong index)
+ACE_INLINE TAO_Object_Manager<IR_PublishesDef, IR_PublishesDef_var>
+IR_PublishesDefSeq_var::operator[] (CORBA::ULong index)
 {
   return this->ptr_->operator[] (index);
 }
 
-ACE_INLINE const ::IR::PublishesDefSeq &
-IR::PublishesDefSeq_var::in (void) const
+ACE_INLINE const ::IR_PublishesDefSeq &
+IR_PublishesDefSeq_var::in (void) const
 {
   return *this->ptr_;
 }
 
-ACE_INLINE ::IR::PublishesDefSeq &
-IR::PublishesDefSeq_var::inout (void)
+ACE_INLINE ::IR_PublishesDefSeq &
+IR_PublishesDefSeq_var::inout (void)
 {
   return *this->ptr_;
 }
 
 // mapping for variable size 
-ACE_INLINE ::IR::PublishesDefSeq *&
-IR::PublishesDefSeq_var::out (void)
+ACE_INLINE ::IR_PublishesDefSeq *&
+IR_PublishesDefSeq_var::out (void)
 {
   delete this->ptr_;
   this->ptr_ = 0;
   return this->ptr_;
 }
 
-ACE_INLINE ::IR::PublishesDefSeq *
-IR::PublishesDefSeq_var::_retn (void)
+ACE_INLINE ::IR_PublishesDefSeq *
+IR_PublishesDefSeq_var::_retn (void)
 {
-  ::IR::PublishesDefSeq *tmp = this->ptr_;
+  ::IR_PublishesDefSeq *tmp = this->ptr_;
   this->ptr_ = 0;
   return tmp;
 }
 
-ACE_INLINE ::IR::PublishesDefSeq *
-IR::PublishesDefSeq_var::ptr (void) const
+ACE_INLINE ::IR_PublishesDefSeq *
+IR_PublishesDefSeq_var::ptr (void) const
 {
   return this->ptr_;
 }
 
 // *************************************************************
-// Inline operations for class IR::PublishesDefSeq_out
+// Inline operations for class IR_PublishesDefSeq_out
 // *************************************************************
 
 ACE_INLINE
-IR::PublishesDefSeq_out::PublishesDefSeq_out (PublishesDefSeq *&p)
+IR_PublishesDefSeq_out::IR_PublishesDefSeq_out (IR_PublishesDefSeq *&p)
   : ptr_ (p)
 {
   this->ptr_ = 0;
 }
 
 ACE_INLINE
-IR::PublishesDefSeq_out::PublishesDefSeq_out (PublishesDefSeq_var &p) // constructor from _var
+IR_PublishesDefSeq_out::IR_PublishesDefSeq_out (IR_PublishesDefSeq_var &p) // constructor from _var
   : ptr_ (p.out ())
 {
   delete this->ptr_;
@@ -7434,57 +6843,50 @@
 }
 
 ACE_INLINE
-IR::PublishesDefSeq_out::PublishesDefSeq_out (const ::IR::PublishesDefSeq_out &p) // copy constructor
-  : ptr_ (ACE_const_cast (PublishesDefSeq_out&, p).ptr_)
+IR_PublishesDefSeq_out::IR_PublishesDefSeq_out (const ::IR_PublishesDefSeq_out &p) // copy constructor
+  : ptr_ (ACE_const_cast (IR_PublishesDefSeq_out&, p).ptr_)
 {}
 
-ACE_INLINE ::IR::PublishesDefSeq_out &
-IR::PublishesDefSeq_out::operator= (const ::IR::PublishesDefSeq_out &p)
+ACE_INLINE ::IR_PublishesDefSeq_out &
+IR_PublishesDefSeq_out::operator= (const ::IR_PublishesDefSeq_out &p)
 {
-  this->ptr_ = ACE_const_cast (PublishesDefSeq_out&, p).ptr_;
+  this->ptr_ = ACE_const_cast (IR_PublishesDefSeq_out&, p).ptr_;
   return *this;
 }
 
-ACE_INLINE ::IR::PublishesDefSeq_out &
-IR::PublishesDefSeq_out::operator= (PublishesDefSeq *p)
+ACE_INLINE ::IR_PublishesDefSeq_out &
+IR_PublishesDefSeq_out::operator= (IR_PublishesDefSeq *p)
 {
   this->ptr_ = p;
   return *this;
 }
 
 ACE_INLINE 
-IR::PublishesDefSeq_out::operator ::IR::PublishesDefSeq *&() // cast
+IR_PublishesDefSeq_out::operator ::IR_PublishesDefSeq *&() // cast
 {
   return this->ptr_;
 }
 
-ACE_INLINE ::IR::PublishesDefSeq *&
-IR::PublishesDefSeq_out::ptr (void) // ptr
+ACE_INLINE ::IR_PublishesDefSeq *&
+IR_PublishesDefSeq_out::ptr (void) // ptr
 {
   return this->ptr_;
 }
 
-ACE_INLINE ::IR::PublishesDefSeq *
-IR::PublishesDefSeq_out::operator-> (void)
+ACE_INLINE ::IR_PublishesDefSeq *
+IR_PublishesDefSeq_out::operator-> (void)
 {
   return this->ptr_;
 }
 
-ACE_INLINE TAO_Object_Manager<IR::PublishesDef, IR::PublishesDef_var>
-IR::PublishesDefSeq_out::operator[] (CORBA::ULong index)
+ACE_INLINE TAO_Object_Manager<IR_PublishesDef, IR_PublishesDef_var>
+IR_PublishesDefSeq_out::operator[] (CORBA::ULong index)
 {
   return this->ptr_->operator[] (index);
 }
 
-
-#endif /* end #if !defined */
-
-
-#if !defined (_IR_CONSUMESDEF___CI_)
-#define _IR_CONSUMESDEF___CI_
-
 ACE_INLINE
-IR::ConsumesDef::ConsumesDef (
+IR_ConsumesDef::IR_ConsumesDef (
     TAO_Stub *objref,
     CORBA::Boolean _tao_collocated,
     TAO_Abstract_ServantBase *servant
@@ -7494,200 +6896,179 @@
   this->IR_ConsumesDef_setup_collocation (_tao_collocated);
 }
 
-
-#endif /* end #if !defined */
-
-
-#if !defined (_IR_CONSUMESDEF___VAR_CI_)
-#define _IR_CONSUMESDEF___VAR_CI_
-
 // *************************************************************
-// Inline operations for class IR::ConsumesDef_var
+// Inline operations for class IR_ConsumesDef_var
 // *************************************************************
 
 ACE_INLINE
-IR::ConsumesDef_var::ConsumesDef_var (void) // default constructor
-  : ptr_ (IR::ConsumesDef::_nil ())
+IR_ConsumesDef_var::IR_ConsumesDef_var (void) // default constructor
+  : ptr_ (IR_ConsumesDef::_nil ())
 {}
 
-ACE_INLINE IR::ConsumesDef_ptr 
-IR::ConsumesDef_var::ptr (void) const
+ACE_INLINE IR_ConsumesDef_ptr 
+IR_ConsumesDef_var::ptr (void) const
 {
   return this->ptr_;
 }
 
 ACE_INLINE
-IR::ConsumesDef_var::ConsumesDef_var (const IR::ConsumesDef_var &p) // copy constructor
+IR_ConsumesDef_var::IR_ConsumesDef_var (const IR_ConsumesDef_var &p) // copy constructor
   : TAO_Base_var (),
-    ptr_ (ConsumesDef::_duplicate (p.ptr ()))
+    ptr_ (IR_ConsumesDef::_duplicate (p.ptr ()))
 {}
 
 ACE_INLINE
-IR::ConsumesDef_var::~ConsumesDef_var (void) // destructor
+IR_ConsumesDef_var::~IR_ConsumesDef_var (void) // destructor
 {
   CORBA::release (this->ptr_);
 }
 
-ACE_INLINE IR::ConsumesDef_var &
-IR::ConsumesDef_var::operator= (IR::ConsumesDef_ptr p)
+ACE_INLINE IR_ConsumesDef_var &
+IR_ConsumesDef_var::operator= (IR_ConsumesDef_ptr p)
 {
   CORBA::release (this->ptr_);
   this->ptr_ = p;
   return *this;
 }
 
-ACE_INLINE IR::ConsumesDef_var &
-IR::ConsumesDef_var::operator= (const IR::ConsumesDef_var &p)
+ACE_INLINE IR_ConsumesDef_var &
+IR_ConsumesDef_var::operator= (const IR_ConsumesDef_var &p)
 {
   if (this != &p)
   {
     CORBA::release (this->ptr_);
-    this->ptr_ = IR::ConsumesDef::_duplicate (p.ptr ());
+    this->ptr_ = IR_ConsumesDef::_duplicate (p.ptr ());
   }
   return *this;
 }
 
 ACE_INLINE 
-IR::ConsumesDef_var::operator const IR::ConsumesDef_ptr &() const // cast
+IR_ConsumesDef_var::operator const IR_ConsumesDef_ptr &() const // cast
 {
   return this->ptr_;
 }
 
 ACE_INLINE 
-IR::ConsumesDef_var::operator IR::ConsumesDef_ptr &() // cast 
+IR_ConsumesDef_var::operator IR_ConsumesDef_ptr &() // cast 
 {
   return this->ptr_;
 }
 
-ACE_INLINE IR::ConsumesDef_ptr 
-IR::ConsumesDef_var::operator-> (void) const
+ACE_INLINE IR_ConsumesDef_ptr 
+IR_ConsumesDef_var::operator-> (void) const
 {
   return this->ptr_;
 }
 
-ACE_INLINE IR::ConsumesDef_ptr
-IR::ConsumesDef_var::in (void) const
+ACE_INLINE IR_ConsumesDef_ptr
+IR_ConsumesDef_var::in (void) const
 {
   return this->ptr_;
 }
 
-ACE_INLINE IR::ConsumesDef_ptr &
-IR::ConsumesDef_var::inout (void)
+ACE_INLINE IR_ConsumesDef_ptr &
+IR_ConsumesDef_var::inout (void)
 {
   return this->ptr_;
 }
 
-ACE_INLINE IR::ConsumesDef_ptr &
-IR::ConsumesDef_var::out (void)
+ACE_INLINE IR_ConsumesDef_ptr &
+IR_ConsumesDef_var::out (void)
 {
   CORBA::release (this->ptr_);
-  this->ptr_ = IR::ConsumesDef::_nil ();
+  this->ptr_ = IR_ConsumesDef::_nil ();
   return this->ptr_;
 }
 
-ACE_INLINE IR::ConsumesDef_ptr 
-IR::ConsumesDef_var::_retn (void)
+ACE_INLINE IR_ConsumesDef_ptr 
+IR_ConsumesDef_var::_retn (void)
 {
   // yield ownership of managed obj reference
-  IR::ConsumesDef_ptr val = this->ptr_;
-  this->ptr_ = IR::ConsumesDef::_nil ();
+  IR_ConsumesDef_ptr val = this->ptr_;
+  this->ptr_ = IR_ConsumesDef::_nil ();
   return val;
 }
 
-
-#endif /* end #if !defined */
-
-
-#if !defined (_IR_CONSUMESDEF___OUT_CI_)
-#define _IR_CONSUMESDEF___OUT_CI_
-
 // *************************************************************
-// Inline operations for class IR::ConsumesDef_out
+// Inline operations for class IR_ConsumesDef_out
 // *************************************************************
 
 ACE_INLINE
-IR::ConsumesDef_out::ConsumesDef_out (IR::ConsumesDef_ptr &p)
+IR_ConsumesDef_out::IR_ConsumesDef_out (IR_ConsumesDef_ptr &p)
   : ptr_ (p)
 {
-  this->ptr_ = IR::ConsumesDef::_nil ();
+  this->ptr_ = IR_ConsumesDef::_nil ();
 }
 
 ACE_INLINE
-IR::ConsumesDef_out::ConsumesDef_out (IR::ConsumesDef_var &p) // constructor from _var
+IR_ConsumesDef_out::IR_ConsumesDef_out (IR_ConsumesDef_var &p) // constructor from _var
   : ptr_ (p.out ())
 {
   CORBA::release (this->ptr_);
-  this->ptr_ = IR::ConsumesDef::_nil ();
+  this->ptr_ = IR_ConsumesDef::_nil ();
 }
 
 ACE_INLINE
-IR::ConsumesDef_out::ConsumesDef_out (const IR::ConsumesDef_out &p) // copy constructor
-  : ptr_ (ACE_const_cast (IR::ConsumesDef_out&,p).ptr_)
+IR_ConsumesDef_out::IR_ConsumesDef_out (const IR_ConsumesDef_out &p) // copy constructor
+  : ptr_ (ACE_const_cast (IR_ConsumesDef_out&,p).ptr_)
 {}
 
-ACE_INLINE IR::ConsumesDef_out &
-IR::ConsumesDef_out::operator= (const IR::ConsumesDef_out &p)
+ACE_INLINE IR_ConsumesDef_out &
+IR_ConsumesDef_out::operator= (const IR_ConsumesDef_out &p)
 {
-  this->ptr_ = ACE_const_cast (IR::ConsumesDef_out&,p).ptr_;
+  this->ptr_ = ACE_const_cast (IR_ConsumesDef_out&,p).ptr_;
   return *this;
 }
 
-ACE_INLINE IR::ConsumesDef_out &
-IR::ConsumesDef_out::operator= (const IR::ConsumesDef_var &p)
+ACE_INLINE IR_ConsumesDef_out &
+IR_ConsumesDef_out::operator= (const IR_ConsumesDef_var &p)
 {
-  this->ptr_ = IR::ConsumesDef::_duplicate (p.ptr ());
+  this->ptr_ = IR_ConsumesDef::_duplicate (p.ptr ());
   return *this;
 }
 
-ACE_INLINE IR::ConsumesDef_out &
-IR::ConsumesDef_out::operator= (IR::ConsumesDef_ptr p)
+ACE_INLINE IR_ConsumesDef_out &
+IR_ConsumesDef_out::operator= (IR_ConsumesDef_ptr p)
 {
   this->ptr_ = p;
   return *this;
 }
 
 ACE_INLINE 
-IR::ConsumesDef_out::operator IR::ConsumesDef_ptr &() // cast
+IR_ConsumesDef_out::operator IR_ConsumesDef_ptr &() // cast
 {
   return this->ptr_;
 }
 
-ACE_INLINE IR::ConsumesDef_ptr &
-IR::ConsumesDef_out::ptr (void) // ptr
+ACE_INLINE IR_ConsumesDef_ptr &
+IR_ConsumesDef_out::ptr (void) // ptr
 {
   return this->ptr_;
 }
 
-ACE_INLINE IR::ConsumesDef_ptr 
-IR::ConsumesDef_out::operator-> (void)
+ACE_INLINE IR_ConsumesDef_ptr 
+IR_ConsumesDef_out::operator-> (void)
 {
   return this->ptr_;
 }
 
-
-#endif /* end #if !defined */
-
-
 #if !defined (TAO_USE_SEQUENCE_TEMPLATES)
   
-#if !defined (__TAO_UNBOUNDED_OBJECT_SEQUENCE_IR_CONSUMESDEFSEQ_CI_)
-#define __TAO_UNBOUNDED_OBJECT_SEQUENCE_IR_CONSUMESDEFSEQ_CI_
-
-  ACE_INLINE IR::ConsumesDef **
-  IR::_TAO_Unbounded_Object_Sequence_IR_ConsumesDefSeq::allocbuf (CORBA::ULong nelems)
+  ACE_INLINE IR_ConsumesDef **
+  _TAO_Unbounded_Object_Sequence_IR_ConsumesDefSeq::allocbuf (CORBA::ULong nelems)
   {
-    IR::ConsumesDef **buf = 0;
+    IR_ConsumesDef **buf = 0;
     
-    ACE_NEW_RETURN (buf, IR::ConsumesDef*[nelems], 0);
+    ACE_NEW_RETURN (buf, IR_ConsumesDef*[nelems], 0);
     
     for (CORBA::ULong i = 0; i < nelems; i++)
-      buf[i] = IR::ConsumesDef::_nil ();
+      buf[i] = IR_ConsumesDef::_nil ();
     
     return buf;
   }
   
   ACE_INLINE void 
-  IR::_TAO_Unbounded_Object_Sequence_IR_ConsumesDefSeq::freebuf (IR::ConsumesDef **buffer)
+  _TAO_Unbounded_Object_Sequence_IR_ConsumesDefSeq::freebuf (IR_ConsumesDef **buffer)
   {
     if (buffer == 0)
       return;
@@ -7695,36 +7076,36 @@
   }
   
   ACE_INLINE
-  IR::_TAO_Unbounded_Object_Sequence_IR_ConsumesDefSeq::_TAO_Unbounded_Object_Sequence_IR_ConsumesDefSeq (void)
+  _TAO_Unbounded_Object_Sequence_IR_ConsumesDefSeq::_TAO_Unbounded_Object_Sequence_IR_ConsumesDefSeq (void)
   {
   }
   
   ACE_INLINE
-  IR::_TAO_Unbounded_Object_Sequence_IR_ConsumesDefSeq::_TAO_Unbounded_Object_Sequence_IR_ConsumesDefSeq (CORBA::ULong maximum)
+  _TAO_Unbounded_Object_Sequence_IR_ConsumesDefSeq::_TAO_Unbounded_Object_Sequence_IR_ConsumesDefSeq (CORBA::ULong maximum)
     : TAO_Unbounded_Base_Sequence (maximum, _TAO_Unbounded_Object_Sequence_IR_ConsumesDefSeq::allocbuf (maximum))
   {
   }
   
   ACE_INLINE
-  IR::_TAO_Unbounded_Object_Sequence_IR_ConsumesDefSeq::_TAO_Unbounded_Object_Sequence_IR_ConsumesDefSeq (CORBA::ULong maximum,
+  _TAO_Unbounded_Object_Sequence_IR_ConsumesDefSeq::_TAO_Unbounded_Object_Sequence_IR_ConsumesDefSeq (CORBA::ULong maximum,
     CORBA::ULong length,
-    IR::ConsumesDef* *value,
+    IR_ConsumesDef* *value,
     CORBA::Boolean release)
   : TAO_Unbounded_Base_Sequence (maximum, length, value, release)
   {
   }
   
   ACE_INLINE
-  IR::_TAO_Unbounded_Object_Sequence_IR_ConsumesDefSeq::_TAO_Unbounded_Object_Sequence_IR_ConsumesDefSeq(const _TAO_Unbounded_Object_Sequence_IR_ConsumesDefSeq &rhs)
+  _TAO_Unbounded_Object_Sequence_IR_ConsumesDefSeq::_TAO_Unbounded_Object_Sequence_IR_ConsumesDefSeq(const _TAO_Unbounded_Object_Sequence_IR_ConsumesDefSeq &rhs)
     : TAO_Unbounded_Base_Sequence (rhs)
   {
     if (rhs.buffer_ != 0)
     {
-      IR::ConsumesDef **tmp1 = _TAO_Unbounded_Object_Sequence_IR_ConsumesDefSeq::allocbuf (this->maximum_);
-      IR::ConsumesDef ** const tmp2 = ACE_reinterpret_cast (IR::ConsumesDef ** ACE_CAST_CONST, rhs.buffer_);
+      IR_ConsumesDef **tmp1 = _TAO_Unbounded_Object_Sequence_IR_ConsumesDefSeq::allocbuf (this->maximum_);
+      IR_ConsumesDef ** const tmp2 = ACE_reinterpret_cast (IR_ConsumesDef ** ACE_CAST_CONST, rhs.buffer_);
       
       for (CORBA::ULong i = 0; i < rhs.length_; ++i)
-        tmp1[i] = IR::ConsumesDef::_duplicate (tmp2[i]);
+        tmp1[i] = IR_ConsumesDef::_duplicate (tmp2[i]);
       
       this->buffer_ = tmp1;
     }
@@ -7734,20 +7115,20 @@
     }
   }
   
-  ACE_INLINE IR::_TAO_Unbounded_Object_Sequence_IR_ConsumesDefSeq &
-  IR::_TAO_Unbounded_Object_Sequence_IR_ConsumesDefSeq::operator= (const _TAO_Unbounded_Object_Sequence_IR_ConsumesDefSeq &rhs)
+  ACE_INLINE _TAO_Unbounded_Object_Sequence_IR_ConsumesDefSeq &
+  _TAO_Unbounded_Object_Sequence_IR_ConsumesDefSeq::operator= (const _TAO_Unbounded_Object_Sequence_IR_ConsumesDefSeq &rhs)
   {
     if (this == &rhs)
       return *this;
     
     if (this->release_)
     {
-      IR::ConsumesDef **tmp = ACE_reinterpret_cast (IR::ConsumesDef **, this->buffer_);
+      IR_ConsumesDef **tmp = ACE_reinterpret_cast (IR_ConsumesDef **, this->buffer_);
       
       for (CORBA::ULong i = 0; i < this->length_; ++i)
       {
         CORBA::release (tmp[i]);
-        tmp[i] = IR::ConsumesDef::_nil ();
+        tmp[i] = IR_ConsumesDef::_nil ();
       }
       if (this->maximum_ < rhs.maximum_)
       {
@@ -7760,28 +7141,28 @@
     
     TAO_Unbounded_Base_Sequence::operator= (rhs);
     
-    IR::ConsumesDef **tmp1 = ACE_reinterpret_cast (IR::ConsumesDef **, this->buffer_);
-    IR::ConsumesDef ** const tmp2 = ACE_reinterpret_cast (IR::ConsumesDef ** ACE_CAST_CONST, rhs.buffer_);
+    IR_ConsumesDef **tmp1 = ACE_reinterpret_cast (IR_ConsumesDef **, this->buffer_);
+    IR_ConsumesDef ** const tmp2 = ACE_reinterpret_cast (IR_ConsumesDef ** ACE_CAST_CONST, rhs.buffer_);
     
     for (CORBA::ULong i = 0; i < rhs.length_; ++i)
-      tmp1[i] = IR::ConsumesDef::_duplicate (tmp2[i]);
+      tmp1[i] = IR_ConsumesDef::_duplicate (tmp2[i]);
     
     return *this;
   }
   
-  ACE_INLINE TAO_Object_Manager<IR::ConsumesDef,IR::ConsumesDef_var>
-  IR::_TAO_Unbounded_Object_Sequence_IR_ConsumesDefSeq::operator[] (CORBA::ULong index) const
+  ACE_INLINE TAO_Object_Manager<IR_ConsumesDef,IR_ConsumesDef_var>
+  _TAO_Unbounded_Object_Sequence_IR_ConsumesDefSeq::operator[] (CORBA::ULong index) const
   // read-write accessor
   {
     ACE_ASSERT (index < this->maximum_);
-    IR::ConsumesDef ** const tmp = ACE_reinterpret_cast (IR::ConsumesDef ** ACE_CAST_CONST, this->buffer_);
-    return TAO_Object_Manager<IR::ConsumesDef,IR::ConsumesDef_var> (tmp + index, this->release_);
+    IR_ConsumesDef ** const tmp = ACE_reinterpret_cast (IR_ConsumesDef ** ACE_CAST_CONST, this->buffer_);
+    return TAO_Object_Manager<IR_ConsumesDef,IR_ConsumesDef_var> (tmp + index, this->release_);
   }
   
-  ACE_INLINE IR::ConsumesDef* *
-  IR::_TAO_Unbounded_Object_Sequence_IR_ConsumesDefSeq::get_buffer (CORBA::Boolean orphan)
+  ACE_INLINE IR_ConsumesDef* *
+  _TAO_Unbounded_Object_Sequence_IR_ConsumesDefSeq::get_buffer (CORBA::Boolean orphan)
   {
-    IR::ConsumesDef **result = 0;
+    IR_ConsumesDef **result = 0;
     if (orphan == 0)
     {
       // We retain ownership.
@@ -7793,7 +7174,7 @@
       }
       else
       {
-        result = ACE_reinterpret_cast (IR::ConsumesDef**, this->buffer_);
+        result = ACE_reinterpret_cast (IR_ConsumesDef**, this->buffer_);
       }
     }
     else // if (orphan == 1)
@@ -7802,7 +7183,7 @@
       {
         // We set the state back to default and relinquish
         // ownership.
-        result = ACE_reinterpret_cast(IR::ConsumesDef**,this->buffer_);
+        result = ACE_reinterpret_cast(IR_ConsumesDef**,this->buffer_);
         this->maximum_ = 0;
         this->length_ = 0;
         this->buffer_ = 0;
@@ -7812,60 +7193,53 @@
     return result;
   }
   
-  ACE_INLINE const IR::ConsumesDef* *
-  IR::_TAO_Unbounded_Object_Sequence_IR_ConsumesDefSeq::get_buffer (void) const
+  ACE_INLINE const IR_ConsumesDef* *
+  _TAO_Unbounded_Object_Sequence_IR_ConsumesDefSeq::get_buffer (void) const
   {
-    return ACE_reinterpret_cast(const IR::ConsumesDef ** ACE_CAST_CONST, this->buffer_);
+    return ACE_reinterpret_cast(const IR_ConsumesDef ** ACE_CAST_CONST, this->buffer_);
   }
   
-  
-#endif /* end #if !defined */
-
-
 #endif /* !TAO_USE_SEQUENCE_TEMPLATES */ 
 
-#if !defined (_IR_CONSUMESDEFSEQ_CI_)
-#define _IR_CONSUMESDEFSEQ_CI_
-
 // *************************************************************
-// Inline operations for class IR::ConsumesDefSeq_var
+// Inline operations for class IR_ConsumesDefSeq_var
 // *************************************************************
 
 ACE_INLINE
-IR::ConsumesDefSeq_var::ConsumesDefSeq_var (void) // default constructor
+IR_ConsumesDefSeq_var::IR_ConsumesDefSeq_var (void) // default constructor
   : ptr_ (0)
 {}
 
 ACE_INLINE
-IR::ConsumesDefSeq_var::ConsumesDefSeq_var (ConsumesDefSeq *p)
+IR_ConsumesDefSeq_var::IR_ConsumesDefSeq_var (IR_ConsumesDefSeq *p)
   : ptr_ (p)
 {}
 
 ACE_INLINE
-IR::ConsumesDefSeq_var::ConsumesDefSeq_var (const ::IR::ConsumesDefSeq_var &p) // copy constructor
+IR_ConsumesDefSeq_var::IR_ConsumesDefSeq_var (const ::IR_ConsumesDefSeq_var &p) // copy constructor
 {
   if (p.ptr_)
-    ACE_NEW (this->ptr_, ::IR::ConsumesDefSeq (*p.ptr_));
+    ACE_NEW (this->ptr_, ::IR_ConsumesDefSeq (*p.ptr_));
   else
     this->ptr_ = 0;
 }
 
 ACE_INLINE
-IR::ConsumesDefSeq_var::~ConsumesDefSeq_var (void) // destructor
+IR_ConsumesDefSeq_var::~IR_ConsumesDefSeq_var (void) // destructor
 {
   delete this->ptr_;
 }
 
-ACE_INLINE IR::ConsumesDefSeq_var &
-IR::ConsumesDefSeq_var::operator= (ConsumesDefSeq *p)
+ACE_INLINE IR_ConsumesDefSeq_var &
+IR_ConsumesDefSeq_var::operator= (IR_ConsumesDefSeq *p)
 {
   delete this->ptr_;
   this->ptr_ = p;
   return *this;
 }
 
-ACE_INLINE ::IR::ConsumesDefSeq_var &
-IR::ConsumesDefSeq_var::operator= (const ::IR::ConsumesDefSeq_var &p)
+ACE_INLINE IR_ConsumesDefSeq_var &
+IR_ConsumesDefSeq_var::operator= (const ::IR_ConsumesDefSeq_var &p) // deep copy
 {
   if (this != &p)
     {
@@ -7876,12 +7250,12 @@
         }
       else
         {
-          ConsumesDefSeq *deep_copy =
-            new ConsumesDefSeq (*p.ptr_);
+          IR_ConsumesDefSeq *deep_copy = 
+            new IR_ConsumesDefSeq (*p.ptr_);
           
           if (deep_copy != 0)
             {
-              ConsumesDefSeq *tmp = deep_copy;
+              IR_ConsumesDefSeq *tmp = deep_copy;
               deep_copy = this->ptr_;
               this->ptr_ = tmp;
               delete deep_copy;
@@ -7892,97 +7266,97 @@
   return *this;
 }
 
-ACE_INLINE const ::IR::ConsumesDefSeq *
-IR::ConsumesDefSeq_var::operator-> (void) const
+ACE_INLINE const ::IR_ConsumesDefSeq *
+IR_ConsumesDefSeq_var::operator-> (void) const
 {
   return this->ptr_;
 }
 
-ACE_INLINE ::IR::ConsumesDefSeq *
-IR::ConsumesDefSeq_var::operator-> (void)
+ACE_INLINE ::IR_ConsumesDefSeq *
+IR_ConsumesDefSeq_var::operator-> (void)
 {
   return this->ptr_;
 }
 
 ACE_INLINE 
-IR::ConsumesDefSeq_var::operator const ::IR::ConsumesDefSeq &() const // cast
+IR_ConsumesDefSeq_var::operator const ::IR_ConsumesDefSeq &() const // cast
 {
   return *this->ptr_;
 }
 
 ACE_INLINE 
-IR::ConsumesDefSeq_var::operator ::IR::ConsumesDefSeq &() // cast 
+IR_ConsumesDefSeq_var::operator ::IR_ConsumesDefSeq &() // cast 
 {
   return *this->ptr_;
 }
 
 ACE_INLINE 
-IR::ConsumesDefSeq_var::operator ::IR::ConsumesDefSeq &() const // cast 
+IR_ConsumesDefSeq_var::operator ::IR_ConsumesDefSeq &() const // cast 
 {
   return *this->ptr_;
 }
 
 // variable-size types only
 ACE_INLINE
-IR::ConsumesDefSeq_var::operator ::IR::ConsumesDefSeq *&() // cast 
+IR_ConsumesDefSeq_var::operator ::IR_ConsumesDefSeq *&() // cast 
 {
   return this->ptr_;
 }
 
-ACE_INLINE TAO_Object_Manager<IR::ConsumesDef, IR::ConsumesDef_var>
-IR::ConsumesDefSeq_var::operator[] (CORBA::ULong index)
+ACE_INLINE TAO_Object_Manager<IR_ConsumesDef, IR_ConsumesDef_var>
+IR_ConsumesDefSeq_var::operator[] (CORBA::ULong index)
 {
   return this->ptr_->operator[] (index);
 }
 
-ACE_INLINE const ::IR::ConsumesDefSeq &
-IR::ConsumesDefSeq_var::in (void) const
+ACE_INLINE const ::IR_ConsumesDefSeq &
+IR_ConsumesDefSeq_var::in (void) const
 {
   return *this->ptr_;
 }
 
-ACE_INLINE ::IR::ConsumesDefSeq &
-IR::ConsumesDefSeq_var::inout (void)
+ACE_INLINE ::IR_ConsumesDefSeq &
+IR_ConsumesDefSeq_var::inout (void)
 {
   return *this->ptr_;
 }
 
 // mapping for variable size 
-ACE_INLINE ::IR::ConsumesDefSeq *&
-IR::ConsumesDefSeq_var::out (void)
+ACE_INLINE ::IR_ConsumesDefSeq *&
+IR_ConsumesDefSeq_var::out (void)
 {
   delete this->ptr_;
   this->ptr_ = 0;
   return this->ptr_;
 }
 
-ACE_INLINE ::IR::ConsumesDefSeq *
-IR::ConsumesDefSeq_var::_retn (void)
+ACE_INLINE ::IR_ConsumesDefSeq *
+IR_ConsumesDefSeq_var::_retn (void)
 {
-  ::IR::ConsumesDefSeq *tmp = this->ptr_;
+  ::IR_ConsumesDefSeq *tmp = this->ptr_;
   this->ptr_ = 0;
   return tmp;
 }
 
-ACE_INLINE ::IR::ConsumesDefSeq *
-IR::ConsumesDefSeq_var::ptr (void) const
+ACE_INLINE ::IR_ConsumesDefSeq *
+IR_ConsumesDefSeq_var::ptr (void) const
 {
   return this->ptr_;
 }
 
 // *************************************************************
-// Inline operations for class IR::ConsumesDefSeq_out
+// Inline operations for class IR_ConsumesDefSeq_out
 // *************************************************************
 
 ACE_INLINE
-IR::ConsumesDefSeq_out::ConsumesDefSeq_out (ConsumesDefSeq *&p)
+IR_ConsumesDefSeq_out::IR_ConsumesDefSeq_out (IR_ConsumesDefSeq *&p)
   : ptr_ (p)
 {
   this->ptr_ = 0;
 }
 
 ACE_INLINE
-IR::ConsumesDefSeq_out::ConsumesDefSeq_out (ConsumesDefSeq_var &p) // constructor from _var
+IR_ConsumesDefSeq_out::IR_ConsumesDefSeq_out (IR_ConsumesDefSeq_var &p) // constructor from _var
   : ptr_ (p.out ())
 {
   delete this->ptr_;
@@ -7990,57 +7364,50 @@
 }
 
 ACE_INLINE
-IR::ConsumesDefSeq_out::ConsumesDefSeq_out (const ::IR::ConsumesDefSeq_out &p) // copy constructor
-  : ptr_ (ACE_const_cast (ConsumesDefSeq_out&, p).ptr_)
+IR_ConsumesDefSeq_out::IR_ConsumesDefSeq_out (const ::IR_ConsumesDefSeq_out &p) // copy constructor
+  : ptr_ (ACE_const_cast (IR_ConsumesDefSeq_out&, p).ptr_)
 {}
 
-ACE_INLINE ::IR::ConsumesDefSeq_out &
-IR::ConsumesDefSeq_out::operator= (const ::IR::ConsumesDefSeq_out &p)
+ACE_INLINE ::IR_ConsumesDefSeq_out &
+IR_ConsumesDefSeq_out::operator= (const ::IR_ConsumesDefSeq_out &p)
 {
-  this->ptr_ = ACE_const_cast (ConsumesDefSeq_out&, p).ptr_;
+  this->ptr_ = ACE_const_cast (IR_ConsumesDefSeq_out&, p).ptr_;
   return *this;
 }
 
-ACE_INLINE ::IR::ConsumesDefSeq_out &
-IR::ConsumesDefSeq_out::operator= (ConsumesDefSeq *p)
+ACE_INLINE ::IR_ConsumesDefSeq_out &
+IR_ConsumesDefSeq_out::operator= (IR_ConsumesDefSeq *p)
 {
   this->ptr_ = p;
   return *this;
 }
 
 ACE_INLINE 
-IR::ConsumesDefSeq_out::operator ::IR::ConsumesDefSeq *&() // cast
+IR_ConsumesDefSeq_out::operator ::IR_ConsumesDefSeq *&() // cast
 {
   return this->ptr_;
 }
 
-ACE_INLINE ::IR::ConsumesDefSeq *&
-IR::ConsumesDefSeq_out::ptr (void) // ptr
+ACE_INLINE ::IR_ConsumesDefSeq *&
+IR_ConsumesDefSeq_out::ptr (void) // ptr
 {
   return this->ptr_;
 }
 
-ACE_INLINE ::IR::ConsumesDefSeq *
-IR::ConsumesDefSeq_out::operator-> (void)
+ACE_INLINE ::IR_ConsumesDefSeq *
+IR_ConsumesDefSeq_out::operator-> (void)
 {
   return this->ptr_;
 }
 
-ACE_INLINE TAO_Object_Manager<IR::ConsumesDef, IR::ConsumesDef_var>
-IR::ConsumesDefSeq_out::operator[] (CORBA::ULong index)
+ACE_INLINE TAO_Object_Manager<IR_ConsumesDef, IR_ConsumesDef_var>
+IR_ConsumesDefSeq_out::operator[] (CORBA::ULong index)
 {
   return this->ptr_->operator[] (index);
 }
 
-
-#endif /* end #if !defined */
-
-
-#if !defined (_IR_FACTORYDEF___CI_)
-#define _IR_FACTORYDEF___CI_
-
 ACE_INLINE
-IR::FactoryDef::FactoryDef (
+IR_FactoryDef::IR_FactoryDef (
     TAO_Stub *objref,
     CORBA::Boolean _tao_collocated,
     TAO_Abstract_ServantBase *servant
@@ -8050,200 +7417,179 @@
   this->IR_FactoryDef_setup_collocation (_tao_collocated);
 }
 
-
-#endif /* end #if !defined */
-
-
-#if !defined (_IR_FACTORYDEF___VAR_CI_)
-#define _IR_FACTORYDEF___VAR_CI_
-
 // *************************************************************
-// Inline operations for class IR::FactoryDef_var
+// Inline operations for class IR_FactoryDef_var
 // *************************************************************
 
 ACE_INLINE
-IR::FactoryDef_var::FactoryDef_var (void) // default constructor
-  : ptr_ (IR::FactoryDef::_nil ())
+IR_FactoryDef_var::IR_FactoryDef_var (void) // default constructor
+  : ptr_ (IR_FactoryDef::_nil ())
 {}
 
-ACE_INLINE IR::FactoryDef_ptr 
-IR::FactoryDef_var::ptr (void) const
+ACE_INLINE IR_FactoryDef_ptr 
+IR_FactoryDef_var::ptr (void) const
 {
   return this->ptr_;
 }
 
 ACE_INLINE
-IR::FactoryDef_var::FactoryDef_var (const IR::FactoryDef_var &p) // copy constructor
+IR_FactoryDef_var::IR_FactoryDef_var (const IR_FactoryDef_var &p) // copy constructor
   : TAO_Base_var (),
-    ptr_ (FactoryDef::_duplicate (p.ptr ()))
+    ptr_ (IR_FactoryDef::_duplicate (p.ptr ()))
 {}
 
 ACE_INLINE
-IR::FactoryDef_var::~FactoryDef_var (void) // destructor
+IR_FactoryDef_var::~IR_FactoryDef_var (void) // destructor
 {
   CORBA::release (this->ptr_);
 }
 
-ACE_INLINE IR::FactoryDef_var &
-IR::FactoryDef_var::operator= (IR::FactoryDef_ptr p)
+ACE_INLINE IR_FactoryDef_var &
+IR_FactoryDef_var::operator= (IR_FactoryDef_ptr p)
 {
   CORBA::release (this->ptr_);
   this->ptr_ = p;
   return *this;
 }
 
-ACE_INLINE IR::FactoryDef_var &
-IR::FactoryDef_var::operator= (const IR::FactoryDef_var &p)
+ACE_INLINE IR_FactoryDef_var &
+IR_FactoryDef_var::operator= (const IR_FactoryDef_var &p)
 {
   if (this != &p)
   {
     CORBA::release (this->ptr_);
-    this->ptr_ = IR::FactoryDef::_duplicate (p.ptr ());
+    this->ptr_ = IR_FactoryDef::_duplicate (p.ptr ());
   }
   return *this;
 }
 
 ACE_INLINE 
-IR::FactoryDef_var::operator const IR::FactoryDef_ptr &() const // cast
+IR_FactoryDef_var::operator const IR_FactoryDef_ptr &() const // cast
 {
   return this->ptr_;
 }
 
 ACE_INLINE 
-IR::FactoryDef_var::operator IR::FactoryDef_ptr &() // cast 
+IR_FactoryDef_var::operator IR_FactoryDef_ptr &() // cast 
 {
   return this->ptr_;
 }
 
-ACE_INLINE IR::FactoryDef_ptr 
-IR::FactoryDef_var::operator-> (void) const
+ACE_INLINE IR_FactoryDef_ptr 
+IR_FactoryDef_var::operator-> (void) const
 {
   return this->ptr_;
 }
 
-ACE_INLINE IR::FactoryDef_ptr
-IR::FactoryDef_var::in (void) const
+ACE_INLINE IR_FactoryDef_ptr
+IR_FactoryDef_var::in (void) const
 {
   return this->ptr_;
 }
 
-ACE_INLINE IR::FactoryDef_ptr &
-IR::FactoryDef_var::inout (void)
+ACE_INLINE IR_FactoryDef_ptr &
+IR_FactoryDef_var::inout (void)
 {
   return this->ptr_;
 }
 
-ACE_INLINE IR::FactoryDef_ptr &
-IR::FactoryDef_var::out (void)
+ACE_INLINE IR_FactoryDef_ptr &
+IR_FactoryDef_var::out (void)
 {
   CORBA::release (this->ptr_);
-  this->ptr_ = IR::FactoryDef::_nil ();
+  this->ptr_ = IR_FactoryDef::_nil ();
   return this->ptr_;
 }
 
-ACE_INLINE IR::FactoryDef_ptr 
-IR::FactoryDef_var::_retn (void)
+ACE_INLINE IR_FactoryDef_ptr 
+IR_FactoryDef_var::_retn (void)
 {
   // yield ownership of managed obj reference
-  IR::FactoryDef_ptr val = this->ptr_;
-  this->ptr_ = IR::FactoryDef::_nil ();
+  IR_FactoryDef_ptr val = this->ptr_;
+  this->ptr_ = IR_FactoryDef::_nil ();
   return val;
 }
 
-
-#endif /* end #if !defined */
-
-
-#if !defined (_IR_FACTORYDEF___OUT_CI_)
-#define _IR_FACTORYDEF___OUT_CI_
-
 // *************************************************************
-// Inline operations for class IR::FactoryDef_out
+// Inline operations for class IR_FactoryDef_out
 // *************************************************************
 
 ACE_INLINE
-IR::FactoryDef_out::FactoryDef_out (IR::FactoryDef_ptr &p)
+IR_FactoryDef_out::IR_FactoryDef_out (IR_FactoryDef_ptr &p)
   : ptr_ (p)
 {
-  this->ptr_ = IR::FactoryDef::_nil ();
+  this->ptr_ = IR_FactoryDef::_nil ();
 }
 
 ACE_INLINE
-IR::FactoryDef_out::FactoryDef_out (IR::FactoryDef_var &p) // constructor from _var
+IR_FactoryDef_out::IR_FactoryDef_out (IR_FactoryDef_var &p) // constructor from _var
   : ptr_ (p.out ())
 {
   CORBA::release (this->ptr_);
-  this->ptr_ = IR::FactoryDef::_nil ();
+  this->ptr_ = IR_FactoryDef::_nil ();
 }
 
 ACE_INLINE
-IR::FactoryDef_out::FactoryDef_out (const IR::FactoryDef_out &p) // copy constructor
-  : ptr_ (ACE_const_cast (IR::FactoryDef_out&,p).ptr_)
+IR_FactoryDef_out::IR_FactoryDef_out (const IR_FactoryDef_out &p) // copy constructor
+  : ptr_ (ACE_const_cast (IR_FactoryDef_out&,p).ptr_)
 {}
 
-ACE_INLINE IR::FactoryDef_out &
-IR::FactoryDef_out::operator= (const IR::FactoryDef_out &p)
+ACE_INLINE IR_FactoryDef_out &
+IR_FactoryDef_out::operator= (const IR_FactoryDef_out &p)
 {
-  this->ptr_ = ACE_const_cast (IR::FactoryDef_out&,p).ptr_;
+  this->ptr_ = ACE_const_cast (IR_FactoryDef_out&,p).ptr_;
   return *this;
 }
 
-ACE_INLINE IR::FactoryDef_out &
-IR::FactoryDef_out::operator= (const IR::FactoryDef_var &p)
+ACE_INLINE IR_FactoryDef_out &
+IR_FactoryDef_out::operator= (const IR_FactoryDef_var &p)
 {
-  this->ptr_ = IR::FactoryDef::_duplicate (p.ptr ());
+  this->ptr_ = IR_FactoryDef::_duplicate (p.ptr ());
   return *this;
 }
 
-ACE_INLINE IR::FactoryDef_out &
-IR::FactoryDef_out::operator= (IR::FactoryDef_ptr p)
+ACE_INLINE IR_FactoryDef_out &
+IR_FactoryDef_out::operator= (IR_FactoryDef_ptr p)
 {
   this->ptr_ = p;
   return *this;
 }
 
 ACE_INLINE 
-IR::FactoryDef_out::operator IR::FactoryDef_ptr &() // cast
+IR_FactoryDef_out::operator IR_FactoryDef_ptr &() // cast
 {
   return this->ptr_;
 }
 
-ACE_INLINE IR::FactoryDef_ptr &
-IR::FactoryDef_out::ptr (void) // ptr
+ACE_INLINE IR_FactoryDef_ptr &
+IR_FactoryDef_out::ptr (void) // ptr
 {
   return this->ptr_;
 }
 
-ACE_INLINE IR::FactoryDef_ptr 
-IR::FactoryDef_out::operator-> (void)
+ACE_INLINE IR_FactoryDef_ptr 
+IR_FactoryDef_out::operator-> (void)
 {
   return this->ptr_;
 }
 
-
-#endif /* end #if !defined */
-
-
 #if !defined (TAO_USE_SEQUENCE_TEMPLATES)
   
-#if !defined (__TAO_UNBOUNDED_OBJECT_SEQUENCE_IR_FACTORYDEFSEQ_CI_)
-#define __TAO_UNBOUNDED_OBJECT_SEQUENCE_IR_FACTORYDEFSEQ_CI_
-
-  ACE_INLINE IR::FactoryDef **
-  IR::_TAO_Unbounded_Object_Sequence_IR_FactoryDefSeq::allocbuf (CORBA::ULong nelems)
+  ACE_INLINE IR_FactoryDef **
+  _TAO_Unbounded_Object_Sequence_IR_FactoryDefSeq::allocbuf (CORBA::ULong nelems)
   {
-    IR::FactoryDef **buf = 0;
+    IR_FactoryDef **buf = 0;
     
-    ACE_NEW_RETURN (buf, IR::FactoryDef*[nelems], 0);
+    ACE_NEW_RETURN (buf, IR_FactoryDef*[nelems], 0);
     
     for (CORBA::ULong i = 0; i < nelems; i++)
-      buf[i] = IR::FactoryDef::_nil ();
+      buf[i] = IR_FactoryDef::_nil ();
     
     return buf;
   }
   
   ACE_INLINE void 
-  IR::_TAO_Unbounded_Object_Sequence_IR_FactoryDefSeq::freebuf (IR::FactoryDef **buffer)
+  _TAO_Unbounded_Object_Sequence_IR_FactoryDefSeq::freebuf (IR_FactoryDef **buffer)
   {
     if (buffer == 0)
       return;
@@ -8251,36 +7597,36 @@
   }
   
   ACE_INLINE
-  IR::_TAO_Unbounded_Object_Sequence_IR_FactoryDefSeq::_TAO_Unbounded_Object_Sequence_IR_FactoryDefSeq (void)
+  _TAO_Unbounded_Object_Sequence_IR_FactoryDefSeq::_TAO_Unbounded_Object_Sequence_IR_FactoryDefSeq (void)
   {
   }
   
   ACE_INLINE
-  IR::_TAO_Unbounded_Object_Sequence_IR_FactoryDefSeq::_TAO_Unbounded_Object_Sequence_IR_FactoryDefSeq (CORBA::ULong maximum)
+  _TAO_Unbounded_Object_Sequence_IR_FactoryDefSeq::_TAO_Unbounded_Object_Sequence_IR_FactoryDefSeq (CORBA::ULong maximum)
     : TAO_Unbounded_Base_Sequence (maximum, _TAO_Unbounded_Object_Sequence_IR_FactoryDefSeq::allocbuf (maximum))
   {
   }
   
   ACE_INLINE
-  IR::_TAO_Unbounded_Object_Sequence_IR_FactoryDefSeq::_TAO_Unbounded_Object_Sequence_IR_FactoryDefSeq (CORBA::ULong maximum,
+  _TAO_Unbounded_Object_Sequence_IR_FactoryDefSeq::_TAO_Unbounded_Object_Sequence_IR_FactoryDefSeq (CORBA::ULong maximum,
     CORBA::ULong length,
-    IR::FactoryDef* *value,
+    IR_FactoryDef* *value,
     CORBA::Boolean release)
   : TAO_Unbounded_Base_Sequence (maximum, length, value, release)
   {
   }
   
   ACE_INLINE
-  IR::_TAO_Unbounded_Object_Sequence_IR_FactoryDefSeq::_TAO_Unbounded_Object_Sequence_IR_FactoryDefSeq(const _TAO_Unbounded_Object_Sequence_IR_FactoryDefSeq &rhs)
+  _TAO_Unbounded_Object_Sequence_IR_FactoryDefSeq::_TAO_Unbounded_Object_Sequence_IR_FactoryDefSeq(const _TAO_Unbounded_Object_Sequence_IR_FactoryDefSeq &rhs)
     : TAO_Unbounded_Base_Sequence (rhs)
   {
     if (rhs.buffer_ != 0)
     {
-      IR::FactoryDef **tmp1 = _TAO_Unbounded_Object_Sequence_IR_FactoryDefSeq::allocbuf (this->maximum_);
-      IR::FactoryDef ** const tmp2 = ACE_reinterpret_cast (IR::FactoryDef ** ACE_CAST_CONST, rhs.buffer_);
+      IR_FactoryDef **tmp1 = _TAO_Unbounded_Object_Sequence_IR_FactoryDefSeq::allocbuf (this->maximum_);
+      IR_FactoryDef ** const tmp2 = ACE_reinterpret_cast (IR_FactoryDef ** ACE_CAST_CONST, rhs.buffer_);
       
       for (CORBA::ULong i = 0; i < rhs.length_; ++i)
-        tmp1[i] = IR::FactoryDef::_duplicate (tmp2[i]);
+        tmp1[i] = IR_FactoryDef::_duplicate (tmp2[i]);
       
       this->buffer_ = tmp1;
     }
@@ -8290,20 +7636,20 @@
     }
   }
   
-  ACE_INLINE IR::_TAO_Unbounded_Object_Sequence_IR_FactoryDefSeq &
-  IR::_TAO_Unbounded_Object_Sequence_IR_FactoryDefSeq::operator= (const _TAO_Unbounded_Object_Sequence_IR_FactoryDefSeq &rhs)
+  ACE_INLINE _TAO_Unbounded_Object_Sequence_IR_FactoryDefSeq &
+  _TAO_Unbounded_Object_Sequence_IR_FactoryDefSeq::operator= (const _TAO_Unbounded_Object_Sequence_IR_FactoryDefSeq &rhs)
   {
     if (this == &rhs)
       return *this;
     
     if (this->release_)
     {
-      IR::FactoryDef **tmp = ACE_reinterpret_cast (IR::FactoryDef **, this->buffer_);
+      IR_FactoryDef **tmp = ACE_reinterpret_cast (IR_FactoryDef **, this->buffer_);
       
       for (CORBA::ULong i = 0; i < this->length_; ++i)
       {
         CORBA::release (tmp[i]);
-        tmp[i] = IR::FactoryDef::_nil ();
+        tmp[i] = IR_FactoryDef::_nil ();
       }
       if (this->maximum_ < rhs.maximum_)
       {
@@ -8316,28 +7662,28 @@
     
     TAO_Unbounded_Base_Sequence::operator= (rhs);
     
-    IR::FactoryDef **tmp1 = ACE_reinterpret_cast (IR::FactoryDef **, this->buffer_);
-    IR::FactoryDef ** const tmp2 = ACE_reinterpret_cast (IR::FactoryDef ** ACE_CAST_CONST, rhs.buffer_);
+    IR_FactoryDef **tmp1 = ACE_reinterpret_cast (IR_FactoryDef **, this->buffer_);
+    IR_FactoryDef ** const tmp2 = ACE_reinterpret_cast (IR_FactoryDef ** ACE_CAST_CONST, rhs.buffer_);
     
     for (CORBA::ULong i = 0; i < rhs.length_; ++i)
-      tmp1[i] = IR::FactoryDef::_duplicate (tmp2[i]);
+      tmp1[i] = IR_FactoryDef::_duplicate (tmp2[i]);
     
     return *this;
   }
   
-  ACE_INLINE TAO_Object_Manager<IR::FactoryDef,IR::FactoryDef_var>
-  IR::_TAO_Unbounded_Object_Sequence_IR_FactoryDefSeq::operator[] (CORBA::ULong index) const
+  ACE_INLINE TAO_Object_Manager<IR_FactoryDef,IR_FactoryDef_var>
+  _TAO_Unbounded_Object_Sequence_IR_FactoryDefSeq::operator[] (CORBA::ULong index) const
   // read-write accessor
   {
     ACE_ASSERT (index < this->maximum_);
-    IR::FactoryDef ** const tmp = ACE_reinterpret_cast (IR::FactoryDef ** ACE_CAST_CONST, this->buffer_);
-    return TAO_Object_Manager<IR::FactoryDef,IR::FactoryDef_var> (tmp + index, this->release_);
+    IR_FactoryDef ** const tmp = ACE_reinterpret_cast (IR_FactoryDef ** ACE_CAST_CONST, this->buffer_);
+    return TAO_Object_Manager<IR_FactoryDef,IR_FactoryDef_var> (tmp + index, this->release_);
   }
   
-  ACE_INLINE IR::FactoryDef* *
-  IR::_TAO_Unbounded_Object_Sequence_IR_FactoryDefSeq::get_buffer (CORBA::Boolean orphan)
+  ACE_INLINE IR_FactoryDef* *
+  _TAO_Unbounded_Object_Sequence_IR_FactoryDefSeq::get_buffer (CORBA::Boolean orphan)
   {
-    IR::FactoryDef **result = 0;
+    IR_FactoryDef **result = 0;
     if (orphan == 0)
     {
       // We retain ownership.
@@ -8349,7 +7695,7 @@
       }
       else
       {
-        result = ACE_reinterpret_cast (IR::FactoryDef**, this->buffer_);
+        result = ACE_reinterpret_cast (IR_FactoryDef**, this->buffer_);
       }
     }
     else // if (orphan == 1)
@@ -8358,7 +7704,7 @@
       {
         // We set the state back to default and relinquish
         // ownership.
-        result = ACE_reinterpret_cast(IR::FactoryDef**,this->buffer_);
+        result = ACE_reinterpret_cast(IR_FactoryDef**,this->buffer_);
         this->maximum_ = 0;
         this->length_ = 0;
         this->buffer_ = 0;
@@ -8368,60 +7714,53 @@
     return result;
   }
   
-  ACE_INLINE const IR::FactoryDef* *
-  IR::_TAO_Unbounded_Object_Sequence_IR_FactoryDefSeq::get_buffer (void) const
+  ACE_INLINE const IR_FactoryDef* *
+  _TAO_Unbounded_Object_Sequence_IR_FactoryDefSeq::get_buffer (void) const
   {
-    return ACE_reinterpret_cast(const IR::FactoryDef ** ACE_CAST_CONST, this->buffer_);
+    return ACE_reinterpret_cast(const IR_FactoryDef ** ACE_CAST_CONST, this->buffer_);
   }
   
-  
-#endif /* end #if !defined */
-
-
 #endif /* !TAO_USE_SEQUENCE_TEMPLATES */ 
 
-#if !defined (_IR_FACTORYDEFSEQ_CI_)
-#define _IR_FACTORYDEFSEQ_CI_
-
 // *************************************************************
-// Inline operations for class IR::FactoryDefSeq_var
+// Inline operations for class IR_FactoryDefSeq_var
 // *************************************************************
 
 ACE_INLINE
-IR::FactoryDefSeq_var::FactoryDefSeq_var (void) // default constructor
+IR_FactoryDefSeq_var::IR_FactoryDefSeq_var (void) // default constructor
   : ptr_ (0)
 {}
 
 ACE_INLINE
-IR::FactoryDefSeq_var::FactoryDefSeq_var (FactoryDefSeq *p)
+IR_FactoryDefSeq_var::IR_FactoryDefSeq_var (IR_FactoryDefSeq *p)
   : ptr_ (p)
 {}
 
 ACE_INLINE
-IR::FactoryDefSeq_var::FactoryDefSeq_var (const ::IR::FactoryDefSeq_var &p) // copy constructor
+IR_FactoryDefSeq_var::IR_FactoryDefSeq_var (const ::IR_FactoryDefSeq_var &p) // copy constructor
 {
   if (p.ptr_)
-    ACE_NEW (this->ptr_, ::IR::FactoryDefSeq (*p.ptr_));
+    ACE_NEW (this->ptr_, ::IR_FactoryDefSeq (*p.ptr_));
   else
     this->ptr_ = 0;
 }
 
 ACE_INLINE
-IR::FactoryDefSeq_var::~FactoryDefSeq_var (void) // destructor
+IR_FactoryDefSeq_var::~IR_FactoryDefSeq_var (void) // destructor
 {
   delete this->ptr_;
 }
 
-ACE_INLINE IR::FactoryDefSeq_var &
-IR::FactoryDefSeq_var::operator= (FactoryDefSeq *p)
+ACE_INLINE IR_FactoryDefSeq_var &
+IR_FactoryDefSeq_var::operator= (IR_FactoryDefSeq *p)
 {
   delete this->ptr_;
   this->ptr_ = p;
   return *this;
 }
 
-ACE_INLINE ::IR::FactoryDefSeq_var &
-IR::FactoryDefSeq_var::operator= (const ::IR::FactoryDefSeq_var &p)
+ACE_INLINE IR_FactoryDefSeq_var &
+IR_FactoryDefSeq_var::operator= (const ::IR_FactoryDefSeq_var &p) // deep copy
 {
   if (this != &p)
     {
@@ -8432,12 +7771,12 @@
         }
       else
         {
-          FactoryDefSeq *deep_copy =
-            new FactoryDefSeq (*p.ptr_);
+          IR_FactoryDefSeq *deep_copy = 
+            new IR_FactoryDefSeq (*p.ptr_);
           
           if (deep_copy != 0)
             {
-              FactoryDefSeq *tmp = deep_copy;
+              IR_FactoryDefSeq *tmp = deep_copy;
               deep_copy = this->ptr_;
               this->ptr_ = tmp;
               delete deep_copy;
@@ -8448,97 +7787,97 @@
   return *this;
 }
 
-ACE_INLINE const ::IR::FactoryDefSeq *
-IR::FactoryDefSeq_var::operator-> (void) const
+ACE_INLINE const ::IR_FactoryDefSeq *
+IR_FactoryDefSeq_var::operator-> (void) const
 {
   return this->ptr_;
 }
 
-ACE_INLINE ::IR::FactoryDefSeq *
-IR::FactoryDefSeq_var::operator-> (void)
+ACE_INLINE ::IR_FactoryDefSeq *
+IR_FactoryDefSeq_var::operator-> (void)
 {
   return this->ptr_;
 }
 
 ACE_INLINE 
-IR::FactoryDefSeq_var::operator const ::IR::FactoryDefSeq &() const // cast
+IR_FactoryDefSeq_var::operator const ::IR_FactoryDefSeq &() const // cast
 {
   return *this->ptr_;
 }
 
 ACE_INLINE 
-IR::FactoryDefSeq_var::operator ::IR::FactoryDefSeq &() // cast 
+IR_FactoryDefSeq_var::operator ::IR_FactoryDefSeq &() // cast 
 {
   return *this->ptr_;
 }
 
 ACE_INLINE 
-IR::FactoryDefSeq_var::operator ::IR::FactoryDefSeq &() const // cast 
+IR_FactoryDefSeq_var::operator ::IR_FactoryDefSeq &() const // cast 
 {
   return *this->ptr_;
 }
 
 // variable-size types only
 ACE_INLINE
-IR::FactoryDefSeq_var::operator ::IR::FactoryDefSeq *&() // cast 
+IR_FactoryDefSeq_var::operator ::IR_FactoryDefSeq *&() // cast 
 {
   return this->ptr_;
 }
 
-ACE_INLINE TAO_Object_Manager<IR::FactoryDef, IR::FactoryDef_var>
-IR::FactoryDefSeq_var::operator[] (CORBA::ULong index)
+ACE_INLINE TAO_Object_Manager<IR_FactoryDef, IR_FactoryDef_var>
+IR_FactoryDefSeq_var::operator[] (CORBA::ULong index)
 {
   return this->ptr_->operator[] (index);
 }
 
-ACE_INLINE const ::IR::FactoryDefSeq &
-IR::FactoryDefSeq_var::in (void) const
+ACE_INLINE const ::IR_FactoryDefSeq &
+IR_FactoryDefSeq_var::in (void) const
 {
   return *this->ptr_;
 }
 
-ACE_INLINE ::IR::FactoryDefSeq &
-IR::FactoryDefSeq_var::inout (void)
+ACE_INLINE ::IR_FactoryDefSeq &
+IR_FactoryDefSeq_var::inout (void)
 {
   return *this->ptr_;
 }
 
 // mapping for variable size 
-ACE_INLINE ::IR::FactoryDefSeq *&
-IR::FactoryDefSeq_var::out (void)
+ACE_INLINE ::IR_FactoryDefSeq *&
+IR_FactoryDefSeq_var::out (void)
 {
   delete this->ptr_;
   this->ptr_ = 0;
   return this->ptr_;
 }
 
-ACE_INLINE ::IR::FactoryDefSeq *
-IR::FactoryDefSeq_var::_retn (void)
+ACE_INLINE ::IR_FactoryDefSeq *
+IR_FactoryDefSeq_var::_retn (void)
 {
-  ::IR::FactoryDefSeq *tmp = this->ptr_;
+  ::IR_FactoryDefSeq *tmp = this->ptr_;
   this->ptr_ = 0;
   return tmp;
 }
 
-ACE_INLINE ::IR::FactoryDefSeq *
-IR::FactoryDefSeq_var::ptr (void) const
+ACE_INLINE ::IR_FactoryDefSeq *
+IR_FactoryDefSeq_var::ptr (void) const
 {
   return this->ptr_;
 }
 
 // *************************************************************
-// Inline operations for class IR::FactoryDefSeq_out
+// Inline operations for class IR_FactoryDefSeq_out
 // *************************************************************
 
 ACE_INLINE
-IR::FactoryDefSeq_out::FactoryDefSeq_out (FactoryDefSeq *&p)
+IR_FactoryDefSeq_out::IR_FactoryDefSeq_out (IR_FactoryDefSeq *&p)
   : ptr_ (p)
 {
   this->ptr_ = 0;
 }
 
 ACE_INLINE
-IR::FactoryDefSeq_out::FactoryDefSeq_out (FactoryDefSeq_var &p) // constructor from _var
+IR_FactoryDefSeq_out::IR_FactoryDefSeq_out (IR_FactoryDefSeq_var &p) // constructor from _var
   : ptr_ (p.out ())
 {
   delete this->ptr_;
@@ -8546,57 +7885,50 @@
 }
 
 ACE_INLINE
-IR::FactoryDefSeq_out::FactoryDefSeq_out (const ::IR::FactoryDefSeq_out &p) // copy constructor
-  : ptr_ (ACE_const_cast (FactoryDefSeq_out&, p).ptr_)
+IR_FactoryDefSeq_out::IR_FactoryDefSeq_out (const ::IR_FactoryDefSeq_out &p) // copy constructor
+  : ptr_ (ACE_const_cast (IR_FactoryDefSeq_out&, p).ptr_)
 {}
 
-ACE_INLINE ::IR::FactoryDefSeq_out &
-IR::FactoryDefSeq_out::operator= (const ::IR::FactoryDefSeq_out &p)
+ACE_INLINE ::IR_FactoryDefSeq_out &
+IR_FactoryDefSeq_out::operator= (const ::IR_FactoryDefSeq_out &p)
 {
-  this->ptr_ = ACE_const_cast (FactoryDefSeq_out&, p).ptr_;
+  this->ptr_ = ACE_const_cast (IR_FactoryDefSeq_out&, p).ptr_;
   return *this;
 }
 
-ACE_INLINE ::IR::FactoryDefSeq_out &
-IR::FactoryDefSeq_out::operator= (FactoryDefSeq *p)
+ACE_INLINE ::IR_FactoryDefSeq_out &
+IR_FactoryDefSeq_out::operator= (IR_FactoryDefSeq *p)
 {
   this->ptr_ = p;
   return *this;
 }
 
 ACE_INLINE 
-IR::FactoryDefSeq_out::operator ::IR::FactoryDefSeq *&() // cast
+IR_FactoryDefSeq_out::operator ::IR_FactoryDefSeq *&() // cast
 {
   return this->ptr_;
 }
 
-ACE_INLINE ::IR::FactoryDefSeq *&
-IR::FactoryDefSeq_out::ptr (void) // ptr
+ACE_INLINE ::IR_FactoryDefSeq *&
+IR_FactoryDefSeq_out::ptr (void) // ptr
 {
   return this->ptr_;
 }
 
-ACE_INLINE ::IR::FactoryDefSeq *
-IR::FactoryDefSeq_out::operator-> (void)
+ACE_INLINE ::IR_FactoryDefSeq *
+IR_FactoryDefSeq_out::operator-> (void)
 {
   return this->ptr_;
 }
 
-ACE_INLINE TAO_Object_Manager<IR::FactoryDef, IR::FactoryDef_var>
-IR::FactoryDefSeq_out::operator[] (CORBA::ULong index)
+ACE_INLINE TAO_Object_Manager<IR_FactoryDef, IR_FactoryDef_var>
+IR_FactoryDefSeq_out::operator[] (CORBA::ULong index)
 {
   return this->ptr_->operator[] (index);
 }
 
-
-#endif /* end #if !defined */
-
-
-#if !defined (_IR_FINDERDEF___CI_)
-#define _IR_FINDERDEF___CI_
-
 ACE_INLINE
-IR::FinderDef::FinderDef (
+IR_FinderDef::IR_FinderDef (
     TAO_Stub *objref,
     CORBA::Boolean _tao_collocated,
     TAO_Abstract_ServantBase *servant
@@ -8606,200 +7938,179 @@
   this->IR_FinderDef_setup_collocation (_tao_collocated);
 }
 
-
-#endif /* end #if !defined */
-
-
-#if !defined (_IR_FINDERDEF___VAR_CI_)
-#define _IR_FINDERDEF___VAR_CI_
-
 // *************************************************************
-// Inline operations for class IR::FinderDef_var
+// Inline operations for class IR_FinderDef_var
 // *************************************************************
 
 ACE_INLINE
-IR::FinderDef_var::FinderDef_var (void) // default constructor
-  : ptr_ (IR::FinderDef::_nil ())
+IR_FinderDef_var::IR_FinderDef_var (void) // default constructor
+  : ptr_ (IR_FinderDef::_nil ())
 {}
 
-ACE_INLINE IR::FinderDef_ptr 
-IR::FinderDef_var::ptr (void) const
+ACE_INLINE IR_FinderDef_ptr 
+IR_FinderDef_var::ptr (void) const
 {
   return this->ptr_;
 }
 
 ACE_INLINE
-IR::FinderDef_var::FinderDef_var (const IR::FinderDef_var &p) // copy constructor
+IR_FinderDef_var::IR_FinderDef_var (const IR_FinderDef_var &p) // copy constructor
   : TAO_Base_var (),
-    ptr_ (FinderDef::_duplicate (p.ptr ()))
+    ptr_ (IR_FinderDef::_duplicate (p.ptr ()))
 {}
 
 ACE_INLINE
-IR::FinderDef_var::~FinderDef_var (void) // destructor
+IR_FinderDef_var::~IR_FinderDef_var (void) // destructor
 {
   CORBA::release (this->ptr_);
 }
 
-ACE_INLINE IR::FinderDef_var &
-IR::FinderDef_var::operator= (IR::FinderDef_ptr p)
+ACE_INLINE IR_FinderDef_var &
+IR_FinderDef_var::operator= (IR_FinderDef_ptr p)
 {
   CORBA::release (this->ptr_);
   this->ptr_ = p;
   return *this;
 }
 
-ACE_INLINE IR::FinderDef_var &
-IR::FinderDef_var::operator= (const IR::FinderDef_var &p)
+ACE_INLINE IR_FinderDef_var &
+IR_FinderDef_var::operator= (const IR_FinderDef_var &p)
 {
   if (this != &p)
   {
     CORBA::release (this->ptr_);
-    this->ptr_ = IR::FinderDef::_duplicate (p.ptr ());
+    this->ptr_ = IR_FinderDef::_duplicate (p.ptr ());
   }
   return *this;
 }
 
 ACE_INLINE 
-IR::FinderDef_var::operator const IR::FinderDef_ptr &() const // cast
+IR_FinderDef_var::operator const IR_FinderDef_ptr &() const // cast
 {
   return this->ptr_;
 }
 
 ACE_INLINE 
-IR::FinderDef_var::operator IR::FinderDef_ptr &() // cast 
+IR_FinderDef_var::operator IR_FinderDef_ptr &() // cast 
 {
   return this->ptr_;
 }
 
-ACE_INLINE IR::FinderDef_ptr 
-IR::FinderDef_var::operator-> (void) const
+ACE_INLINE IR_FinderDef_ptr 
+IR_FinderDef_var::operator-> (void) const
 {
   return this->ptr_;
 }
 
-ACE_INLINE IR::FinderDef_ptr
-IR::FinderDef_var::in (void) const
+ACE_INLINE IR_FinderDef_ptr
+IR_FinderDef_var::in (void) const
 {
   return this->ptr_;
 }
 
-ACE_INLINE IR::FinderDef_ptr &
-IR::FinderDef_var::inout (void)
+ACE_INLINE IR_FinderDef_ptr &
+IR_FinderDef_var::inout (void)
 {
   return this->ptr_;
 }
 
-ACE_INLINE IR::FinderDef_ptr &
-IR::FinderDef_var::out (void)
+ACE_INLINE IR_FinderDef_ptr &
+IR_FinderDef_var::out (void)
 {
   CORBA::release (this->ptr_);
-  this->ptr_ = IR::FinderDef::_nil ();
+  this->ptr_ = IR_FinderDef::_nil ();
   return this->ptr_;
 }
 
-ACE_INLINE IR::FinderDef_ptr 
-IR::FinderDef_var::_retn (void)
+ACE_INLINE IR_FinderDef_ptr 
+IR_FinderDef_var::_retn (void)
 {
   // yield ownership of managed obj reference
-  IR::FinderDef_ptr val = this->ptr_;
-  this->ptr_ = IR::FinderDef::_nil ();
+  IR_FinderDef_ptr val = this->ptr_;
+  this->ptr_ = IR_FinderDef::_nil ();
   return val;
 }
 
-
-#endif /* end #if !defined */
-
-
-#if !defined (_IR_FINDERDEF___OUT_CI_)
-#define _IR_FINDERDEF___OUT_CI_
-
 // *************************************************************
-// Inline operations for class IR::FinderDef_out
+// Inline operations for class IR_FinderDef_out
 // *************************************************************
 
 ACE_INLINE
-IR::FinderDef_out::FinderDef_out (IR::FinderDef_ptr &p)
+IR_FinderDef_out::IR_FinderDef_out (IR_FinderDef_ptr &p)
   : ptr_ (p)
 {
-  this->ptr_ = IR::FinderDef::_nil ();
+  this->ptr_ = IR_FinderDef::_nil ();
 }
 
 ACE_INLINE
-IR::FinderDef_out::FinderDef_out (IR::FinderDef_var &p) // constructor from _var
+IR_FinderDef_out::IR_FinderDef_out (IR_FinderDef_var &p) // constructor from _var
   : ptr_ (p.out ())
 {
   CORBA::release (this->ptr_);
-  this->ptr_ = IR::FinderDef::_nil ();
+  this->ptr_ = IR_FinderDef::_nil ();
 }
 
 ACE_INLINE
-IR::FinderDef_out::FinderDef_out (const IR::FinderDef_out &p) // copy constructor
-  : ptr_ (ACE_const_cast (IR::FinderDef_out&,p).ptr_)
+IR_FinderDef_out::IR_FinderDef_out (const IR_FinderDef_out &p) // copy constructor
+  : ptr_ (ACE_const_cast (IR_FinderDef_out&,p).ptr_)
 {}
 
-ACE_INLINE IR::FinderDef_out &
-IR::FinderDef_out::operator= (const IR::FinderDef_out &p)
+ACE_INLINE IR_FinderDef_out &
+IR_FinderDef_out::operator= (const IR_FinderDef_out &p)
 {
-  this->ptr_ = ACE_const_cast (IR::FinderDef_out&,p).ptr_;
+  this->ptr_ = ACE_const_cast (IR_FinderDef_out&,p).ptr_;
   return *this;
 }
 
-ACE_INLINE IR::FinderDef_out &
-IR::FinderDef_out::operator= (const IR::FinderDef_var &p)
+ACE_INLINE IR_FinderDef_out &
+IR_FinderDef_out::operator= (const IR_FinderDef_var &p)
 {
-  this->ptr_ = IR::FinderDef::_duplicate (p.ptr ());
+  this->ptr_ = IR_FinderDef::_duplicate (p.ptr ());
   return *this;
 }
 
-ACE_INLINE IR::FinderDef_out &
-IR::FinderDef_out::operator= (IR::FinderDef_ptr p)
+ACE_INLINE IR_FinderDef_out &
+IR_FinderDef_out::operator= (IR_FinderDef_ptr p)
 {
   this->ptr_ = p;
   return *this;
 }
 
 ACE_INLINE 
-IR::FinderDef_out::operator IR::FinderDef_ptr &() // cast
+IR_FinderDef_out::operator IR_FinderDef_ptr &() // cast
 {
   return this->ptr_;
 }
 
-ACE_INLINE IR::FinderDef_ptr &
-IR::FinderDef_out::ptr (void) // ptr
+ACE_INLINE IR_FinderDef_ptr &
+IR_FinderDef_out::ptr (void) // ptr
 {
   return this->ptr_;
 }
 
-ACE_INLINE IR::FinderDef_ptr 
-IR::FinderDef_out::operator-> (void)
+ACE_INLINE IR_FinderDef_ptr 
+IR_FinderDef_out::operator-> (void)
 {
   return this->ptr_;
 }
 
-
-#endif /* end #if !defined */
-
-
 #if !defined (TAO_USE_SEQUENCE_TEMPLATES)
   
-#if !defined (__TAO_UNBOUNDED_OBJECT_SEQUENCE_IR_FINDERDEFSEQ_CI_)
-#define __TAO_UNBOUNDED_OBJECT_SEQUENCE_IR_FINDERDEFSEQ_CI_
-
-  ACE_INLINE IR::FinderDef **
-  IR::_TAO_Unbounded_Object_Sequence_IR_FinderDefSeq::allocbuf (CORBA::ULong nelems)
+  ACE_INLINE IR_FinderDef **
+  _TAO_Unbounded_Object_Sequence_IR_FinderDefSeq::allocbuf (CORBA::ULong nelems)
   {
-    IR::FinderDef **buf = 0;
+    IR_FinderDef **buf = 0;
     
-    ACE_NEW_RETURN (buf, IR::FinderDef*[nelems], 0);
+    ACE_NEW_RETURN (buf, IR_FinderDef*[nelems], 0);
     
     for (CORBA::ULong i = 0; i < nelems; i++)
-      buf[i] = IR::FinderDef::_nil ();
+      buf[i] = IR_FinderDef::_nil ();
     
     return buf;
   }
   
   ACE_INLINE void 
-  IR::_TAO_Unbounded_Object_Sequence_IR_FinderDefSeq::freebuf (IR::FinderDef **buffer)
+  _TAO_Unbounded_Object_Sequence_IR_FinderDefSeq::freebuf (IR_FinderDef **buffer)
   {
     if (buffer == 0)
       return;
@@ -8807,36 +8118,36 @@
   }
   
   ACE_INLINE
-  IR::_TAO_Unbounded_Object_Sequence_IR_FinderDefSeq::_TAO_Unbounded_Object_Sequence_IR_FinderDefSeq (void)
+  _TAO_Unbounded_Object_Sequence_IR_FinderDefSeq::_TAO_Unbounded_Object_Sequence_IR_FinderDefSeq (void)
   {
   }
   
   ACE_INLINE
-  IR::_TAO_Unbounded_Object_Sequence_IR_FinderDefSeq::_TAO_Unbounded_Object_Sequence_IR_FinderDefSeq (CORBA::ULong maximum)
+  _TAO_Unbounded_Object_Sequence_IR_FinderDefSeq::_TAO_Unbounded_Object_Sequence_IR_FinderDefSeq (CORBA::ULong maximum)
     : TAO_Unbounded_Base_Sequence (maximum, _TAO_Unbounded_Object_Sequence_IR_FinderDefSeq::allocbuf (maximum))
   {
   }
   
   ACE_INLINE
-  IR::_TAO_Unbounded_Object_Sequence_IR_FinderDefSeq::_TAO_Unbounded_Object_Sequence_IR_FinderDefSeq (CORBA::ULong maximum,
+  _TAO_Unbounded_Object_Sequence_IR_FinderDefSeq::_TAO_Unbounded_Object_Sequence_IR_FinderDefSeq (CORBA::ULong maximum,
     CORBA::ULong length,
-    IR::FinderDef* *value,
+    IR_FinderDef* *value,
     CORBA::Boolean release)
   : TAO_Unbounded_Base_Sequence (maximum, length, value, release)
   {
   }
   
   ACE_INLINE
-  IR::_TAO_Unbounded_Object_Sequence_IR_FinderDefSeq::_TAO_Unbounded_Object_Sequence_IR_FinderDefSeq(const _TAO_Unbounded_Object_Sequence_IR_FinderDefSeq &rhs)
+  _TAO_Unbounded_Object_Sequence_IR_FinderDefSeq::_TAO_Unbounded_Object_Sequence_IR_FinderDefSeq(const _TAO_Unbounded_Object_Sequence_IR_FinderDefSeq &rhs)
     : TAO_Unbounded_Base_Sequence (rhs)
   {
     if (rhs.buffer_ != 0)
     {
-      IR::FinderDef **tmp1 = _TAO_Unbounded_Object_Sequence_IR_FinderDefSeq::allocbuf (this->maximum_);
-      IR::FinderDef ** const tmp2 = ACE_reinterpret_cast (IR::FinderDef ** ACE_CAST_CONST, rhs.buffer_);
+      IR_FinderDef **tmp1 = _TAO_Unbounded_Object_Sequence_IR_FinderDefSeq::allocbuf (this->maximum_);
+      IR_FinderDef ** const tmp2 = ACE_reinterpret_cast (IR_FinderDef ** ACE_CAST_CONST, rhs.buffer_);
       
       for (CORBA::ULong i = 0; i < rhs.length_; ++i)
-        tmp1[i] = IR::FinderDef::_duplicate (tmp2[i]);
+        tmp1[i] = IR_FinderDef::_duplicate (tmp2[i]);
       
       this->buffer_ = tmp1;
     }
@@ -8846,20 +8157,20 @@
     }
   }
   
-  ACE_INLINE IR::_TAO_Unbounded_Object_Sequence_IR_FinderDefSeq &
-  IR::_TAO_Unbounded_Object_Sequence_IR_FinderDefSeq::operator= (const _TAO_Unbounded_Object_Sequence_IR_FinderDefSeq &rhs)
+  ACE_INLINE _TAO_Unbounded_Object_Sequence_IR_FinderDefSeq &
+  _TAO_Unbounded_Object_Sequence_IR_FinderDefSeq::operator= (const _TAO_Unbounded_Object_Sequence_IR_FinderDefSeq &rhs)
   {
     if (this == &rhs)
       return *this;
     
     if (this->release_)
     {
-      IR::FinderDef **tmp = ACE_reinterpret_cast (IR::FinderDef **, this->buffer_);
+      IR_FinderDef **tmp = ACE_reinterpret_cast (IR_FinderDef **, this->buffer_);
       
       for (CORBA::ULong i = 0; i < this->length_; ++i)
       {
         CORBA::release (tmp[i]);
-        tmp[i] = IR::FinderDef::_nil ();
+        tmp[i] = IR_FinderDef::_nil ();
       }
       if (this->maximum_ < rhs.maximum_)
       {
@@ -8872,28 +8183,28 @@
     
     TAO_Unbounded_Base_Sequence::operator= (rhs);
     
-    IR::FinderDef **tmp1 = ACE_reinterpret_cast (IR::FinderDef **, this->buffer_);
-    IR::FinderDef ** const tmp2 = ACE_reinterpret_cast (IR::FinderDef ** ACE_CAST_CONST, rhs.buffer_);
+    IR_FinderDef **tmp1 = ACE_reinterpret_cast (IR_FinderDef **, this->buffer_);
+    IR_FinderDef ** const tmp2 = ACE_reinterpret_cast (IR_FinderDef ** ACE_CAST_CONST, rhs.buffer_);
     
     for (CORBA::ULong i = 0; i < rhs.length_; ++i)
-      tmp1[i] = IR::FinderDef::_duplicate (tmp2[i]);
+      tmp1[i] = IR_FinderDef::_duplicate (tmp2[i]);
     
     return *this;
   }
   
-  ACE_INLINE TAO_Object_Manager<IR::FinderDef,IR::FinderDef_var>
-  IR::_TAO_Unbounded_Object_Sequence_IR_FinderDefSeq::operator[] (CORBA::ULong index) const
+  ACE_INLINE TAO_Object_Manager<IR_FinderDef,IR_FinderDef_var>
+  _TAO_Unbounded_Object_Sequence_IR_FinderDefSeq::operator[] (CORBA::ULong index) const
   // read-write accessor
   {
     ACE_ASSERT (index < this->maximum_);
-    IR::FinderDef ** const tmp = ACE_reinterpret_cast (IR::FinderDef ** ACE_CAST_CONST, this->buffer_);
-    return TAO_Object_Manager<IR::FinderDef,IR::FinderDef_var> (tmp + index, this->release_);
+    IR_FinderDef ** const tmp = ACE_reinterpret_cast (IR_FinderDef ** ACE_CAST_CONST, this->buffer_);
+    return TAO_Object_Manager<IR_FinderDef,IR_FinderDef_var> (tmp + index, this->release_);
   }
   
-  ACE_INLINE IR::FinderDef* *
-  IR::_TAO_Unbounded_Object_Sequence_IR_FinderDefSeq::get_buffer (CORBA::Boolean orphan)
+  ACE_INLINE IR_FinderDef* *
+  _TAO_Unbounded_Object_Sequence_IR_FinderDefSeq::get_buffer (CORBA::Boolean orphan)
   {
-    IR::FinderDef **result = 0;
+    IR_FinderDef **result = 0;
     if (orphan == 0)
     {
       // We retain ownership.
@@ -8905,7 +8216,7 @@
       }
       else
       {
-        result = ACE_reinterpret_cast (IR::FinderDef**, this->buffer_);
+        result = ACE_reinterpret_cast (IR_FinderDef**, this->buffer_);
       }
     }
     else // if (orphan == 1)
@@ -8914,7 +8225,7 @@
       {
         // We set the state back to default and relinquish
         // ownership.
-        result = ACE_reinterpret_cast(IR::FinderDef**,this->buffer_);
+        result = ACE_reinterpret_cast(IR_FinderDef**,this->buffer_);
         this->maximum_ = 0;
         this->length_ = 0;
         this->buffer_ = 0;
@@ -8924,60 +8235,53 @@
     return result;
   }
   
-  ACE_INLINE const IR::FinderDef* *
-  IR::_TAO_Unbounded_Object_Sequence_IR_FinderDefSeq::get_buffer (void) const
+  ACE_INLINE const IR_FinderDef* *
+  _TAO_Unbounded_Object_Sequence_IR_FinderDefSeq::get_buffer (void) const
   {
-    return ACE_reinterpret_cast(const IR::FinderDef ** ACE_CAST_CONST, this->buffer_);
+    return ACE_reinterpret_cast(const IR_FinderDef ** ACE_CAST_CONST, this->buffer_);
   }
   
-  
-#endif /* end #if !defined */
-
-
 #endif /* !TAO_USE_SEQUENCE_TEMPLATES */ 
 
-#if !defined (_IR_FINDERDEFSEQ_CI_)
-#define _IR_FINDERDEFSEQ_CI_
-
 // *************************************************************
-// Inline operations for class IR::FinderDefSeq_var
+// Inline operations for class IR_FinderDefSeq_var
 // *************************************************************
 
 ACE_INLINE
-IR::FinderDefSeq_var::FinderDefSeq_var (void) // default constructor
+IR_FinderDefSeq_var::IR_FinderDefSeq_var (void) // default constructor
   : ptr_ (0)
 {}
 
 ACE_INLINE
-IR::FinderDefSeq_var::FinderDefSeq_var (FinderDefSeq *p)
+IR_FinderDefSeq_var::IR_FinderDefSeq_var (IR_FinderDefSeq *p)
   : ptr_ (p)
 {}
 
 ACE_INLINE
-IR::FinderDefSeq_var::FinderDefSeq_var (const ::IR::FinderDefSeq_var &p) // copy constructor
+IR_FinderDefSeq_var::IR_FinderDefSeq_var (const ::IR_FinderDefSeq_var &p) // copy constructor
 {
   if (p.ptr_)
-    ACE_NEW (this->ptr_, ::IR::FinderDefSeq (*p.ptr_));
+    ACE_NEW (this->ptr_, ::IR_FinderDefSeq (*p.ptr_));
   else
     this->ptr_ = 0;
 }
 
 ACE_INLINE
-IR::FinderDefSeq_var::~FinderDefSeq_var (void) // destructor
+IR_FinderDefSeq_var::~IR_FinderDefSeq_var (void) // destructor
 {
   delete this->ptr_;
 }
 
-ACE_INLINE IR::FinderDefSeq_var &
-IR::FinderDefSeq_var::operator= (FinderDefSeq *p)
+ACE_INLINE IR_FinderDefSeq_var &
+IR_FinderDefSeq_var::operator= (IR_FinderDefSeq *p)
 {
   delete this->ptr_;
   this->ptr_ = p;
   return *this;
 }
 
-ACE_INLINE ::IR::FinderDefSeq_var &
-IR::FinderDefSeq_var::operator= (const ::IR::FinderDefSeq_var &p)
+ACE_INLINE IR_FinderDefSeq_var &
+IR_FinderDefSeq_var::operator= (const ::IR_FinderDefSeq_var &p) // deep copy
 {
   if (this != &p)
     {
@@ -8988,12 +8292,12 @@
         }
       else
         {
-          FinderDefSeq *deep_copy =
-            new FinderDefSeq (*p.ptr_);
+          IR_FinderDefSeq *deep_copy = 
+            new IR_FinderDefSeq (*p.ptr_);
           
           if (deep_copy != 0)
             {
-              FinderDefSeq *tmp = deep_copy;
+              IR_FinderDefSeq *tmp = deep_copy;
               deep_copy = this->ptr_;
               this->ptr_ = tmp;
               delete deep_copy;
@@ -9004,97 +8308,97 @@
   return *this;
 }
 
-ACE_INLINE const ::IR::FinderDefSeq *
-IR::FinderDefSeq_var::operator-> (void) const
+ACE_INLINE const ::IR_FinderDefSeq *
+IR_FinderDefSeq_var::operator-> (void) const
 {
   return this->ptr_;
 }
 
-ACE_INLINE ::IR::FinderDefSeq *
-IR::FinderDefSeq_var::operator-> (void)
+ACE_INLINE ::IR_FinderDefSeq *
+IR_FinderDefSeq_var::operator-> (void)
 {
   return this->ptr_;
 }
 
 ACE_INLINE 
-IR::FinderDefSeq_var::operator const ::IR::FinderDefSeq &() const // cast
+IR_FinderDefSeq_var::operator const ::IR_FinderDefSeq &() const // cast
 {
   return *this->ptr_;
 }
 
 ACE_INLINE 
-IR::FinderDefSeq_var::operator ::IR::FinderDefSeq &() // cast 
+IR_FinderDefSeq_var::operator ::IR_FinderDefSeq &() // cast 
 {
   return *this->ptr_;
 }
 
 ACE_INLINE 
-IR::FinderDefSeq_var::operator ::IR::FinderDefSeq &() const // cast 
+IR_FinderDefSeq_var::operator ::IR_FinderDefSeq &() const // cast 
 {
   return *this->ptr_;
 }
 
 // variable-size types only
 ACE_INLINE
-IR::FinderDefSeq_var::operator ::IR::FinderDefSeq *&() // cast 
+IR_FinderDefSeq_var::operator ::IR_FinderDefSeq *&() // cast 
 {
   return this->ptr_;
 }
 
-ACE_INLINE TAO_Object_Manager<IR::FinderDef, IR::FinderDef_var>
-IR::FinderDefSeq_var::operator[] (CORBA::ULong index)
+ACE_INLINE TAO_Object_Manager<IR_FinderDef, IR_FinderDef_var>
+IR_FinderDefSeq_var::operator[] (CORBA::ULong index)
 {
   return this->ptr_->operator[] (index);
 }
 
-ACE_INLINE const ::IR::FinderDefSeq &
-IR::FinderDefSeq_var::in (void) const
+ACE_INLINE const ::IR_FinderDefSeq &
+IR_FinderDefSeq_var::in (void) const
 {
   return *this->ptr_;
 }
 
-ACE_INLINE ::IR::FinderDefSeq &
-IR::FinderDefSeq_var::inout (void)
+ACE_INLINE ::IR_FinderDefSeq &
+IR_FinderDefSeq_var::inout (void)
 {
   return *this->ptr_;
 }
 
 // mapping for variable size 
-ACE_INLINE ::IR::FinderDefSeq *&
-IR::FinderDefSeq_var::out (void)
+ACE_INLINE ::IR_FinderDefSeq *&
+IR_FinderDefSeq_var::out (void)
 {
   delete this->ptr_;
   this->ptr_ = 0;
   return this->ptr_;
 }
 
-ACE_INLINE ::IR::FinderDefSeq *
-IR::FinderDefSeq_var::_retn (void)
+ACE_INLINE ::IR_FinderDefSeq *
+IR_FinderDefSeq_var::_retn (void)
 {
-  ::IR::FinderDefSeq *tmp = this->ptr_;
+  ::IR_FinderDefSeq *tmp = this->ptr_;
   this->ptr_ = 0;
   return tmp;
 }
 
-ACE_INLINE ::IR::FinderDefSeq *
-IR::FinderDefSeq_var::ptr (void) const
+ACE_INLINE ::IR_FinderDefSeq *
+IR_FinderDefSeq_var::ptr (void) const
 {
   return this->ptr_;
 }
 
 // *************************************************************
-// Inline operations for class IR::FinderDefSeq_out
+// Inline operations for class IR_FinderDefSeq_out
 // *************************************************************
 
 ACE_INLINE
-IR::FinderDefSeq_out::FinderDefSeq_out (FinderDefSeq *&p)
+IR_FinderDefSeq_out::IR_FinderDefSeq_out (IR_FinderDefSeq *&p)
   : ptr_ (p)
 {
   this->ptr_ = 0;
 }
 
 ACE_INLINE
-IR::FinderDefSeq_out::FinderDefSeq_out (FinderDefSeq_var &p) // constructor from _var
+IR_FinderDefSeq_out::IR_FinderDefSeq_out (IR_FinderDefSeq_var &p) // constructor from _var
   : ptr_ (p.out ())
 {
   delete this->ptr_;
@@ -9102,57 +8406,50 @@
 }
 
 ACE_INLINE
-IR::FinderDefSeq_out::FinderDefSeq_out (const ::IR::FinderDefSeq_out &p) // copy constructor
-  : ptr_ (ACE_const_cast (FinderDefSeq_out&, p).ptr_)
+IR_FinderDefSeq_out::IR_FinderDefSeq_out (const ::IR_FinderDefSeq_out &p) // copy constructor
+  : ptr_ (ACE_const_cast (IR_FinderDefSeq_out&, p).ptr_)
 {}
 
-ACE_INLINE ::IR::FinderDefSeq_out &
-IR::FinderDefSeq_out::operator= (const ::IR::FinderDefSeq_out &p)
+ACE_INLINE ::IR_FinderDefSeq_out &
+IR_FinderDefSeq_out::operator= (const ::IR_FinderDefSeq_out &p)
 {
-  this->ptr_ = ACE_const_cast (FinderDefSeq_out&, p).ptr_;
+  this->ptr_ = ACE_const_cast (IR_FinderDefSeq_out&, p).ptr_;
   return *this;
 }
 
-ACE_INLINE ::IR::FinderDefSeq_out &
-IR::FinderDefSeq_out::operator= (FinderDefSeq *p)
+ACE_INLINE ::IR_FinderDefSeq_out &
+IR_FinderDefSeq_out::operator= (IR_FinderDefSeq *p)
 {
   this->ptr_ = p;
   return *this;
 }
 
 ACE_INLINE 
-IR::FinderDefSeq_out::operator ::IR::FinderDefSeq *&() // cast
+IR_FinderDefSeq_out::operator ::IR_FinderDefSeq *&() // cast
 {
   return this->ptr_;
 }
 
-ACE_INLINE ::IR::FinderDefSeq *&
-IR::FinderDefSeq_out::ptr (void) // ptr
+ACE_INLINE ::IR_FinderDefSeq *&
+IR_FinderDefSeq_out::ptr (void) // ptr
 {
   return this->ptr_;
 }
 
-ACE_INLINE ::IR::FinderDefSeq *
-IR::FinderDefSeq_out::operator-> (void)
+ACE_INLINE ::IR_FinderDefSeq *
+IR_FinderDefSeq_out::operator-> (void)
 {
   return this->ptr_;
 }
 
-ACE_INLINE TAO_Object_Manager<IR::FinderDef, IR::FinderDef_var>
-IR::FinderDefSeq_out::operator[] (CORBA::ULong index)
+ACE_INLINE TAO_Object_Manager<IR_FinderDef, IR_FinderDef_var>
+IR_FinderDefSeq_out::operator[] (CORBA::ULong index)
 {
   return this->ptr_->operator[] (index);
 }
 
-
-#endif /* end #if !defined */
-
-
-#if !defined (_IR_PRIMARYKEYDEF___CI_)
-#define _IR_PRIMARYKEYDEF___CI_
-
 ACE_INLINE
-IR::PrimaryKeyDef::PrimaryKeyDef (
+IR_PrimaryKeyDef::IR_PrimaryKeyDef (
     TAO_Stub *objref,
     CORBA::Boolean _tao_collocated,
     TAO_Abstract_ServantBase *servant
@@ -9162,200 +8459,179 @@
   this->IR_PrimaryKeyDef_setup_collocation (_tao_collocated);
 }
 
-
-#endif /* end #if !defined */
-
-
-#if !defined (_IR_PRIMARYKEYDEF___VAR_CI_)
-#define _IR_PRIMARYKEYDEF___VAR_CI_
-
 // *************************************************************
-// Inline operations for class IR::PrimaryKeyDef_var
+// Inline operations for class IR_PrimaryKeyDef_var
 // *************************************************************
 
 ACE_INLINE
-IR::PrimaryKeyDef_var::PrimaryKeyDef_var (void) // default constructor
-  : ptr_ (IR::PrimaryKeyDef::_nil ())
+IR_PrimaryKeyDef_var::IR_PrimaryKeyDef_var (void) // default constructor
+  : ptr_ (IR_PrimaryKeyDef::_nil ())
 {}
 
-ACE_INLINE IR::PrimaryKeyDef_ptr 
-IR::PrimaryKeyDef_var::ptr (void) const
+ACE_INLINE IR_PrimaryKeyDef_ptr 
+IR_PrimaryKeyDef_var::ptr (void) const
 {
   return this->ptr_;
 }
 
 ACE_INLINE
-IR::PrimaryKeyDef_var::PrimaryKeyDef_var (const IR::PrimaryKeyDef_var &p) // copy constructor
+IR_PrimaryKeyDef_var::IR_PrimaryKeyDef_var (const IR_PrimaryKeyDef_var &p) // copy constructor
   : TAO_Base_var (),
-    ptr_ (PrimaryKeyDef::_duplicate (p.ptr ()))
+    ptr_ (IR_PrimaryKeyDef::_duplicate (p.ptr ()))
 {}
 
 ACE_INLINE
-IR::PrimaryKeyDef_var::~PrimaryKeyDef_var (void) // destructor
+IR_PrimaryKeyDef_var::~IR_PrimaryKeyDef_var (void) // destructor
 {
   CORBA::release (this->ptr_);
 }
 
-ACE_INLINE IR::PrimaryKeyDef_var &
-IR::PrimaryKeyDef_var::operator= (IR::PrimaryKeyDef_ptr p)
+ACE_INLINE IR_PrimaryKeyDef_var &
+IR_PrimaryKeyDef_var::operator= (IR_PrimaryKeyDef_ptr p)
 {
   CORBA::release (this->ptr_);
   this->ptr_ = p;
   return *this;
 }
 
-ACE_INLINE IR::PrimaryKeyDef_var &
-IR::PrimaryKeyDef_var::operator= (const IR::PrimaryKeyDef_var &p)
+ACE_INLINE IR_PrimaryKeyDef_var &
+IR_PrimaryKeyDef_var::operator= (const IR_PrimaryKeyDef_var &p)
 {
   if (this != &p)
   {
     CORBA::release (this->ptr_);
-    this->ptr_ = IR::PrimaryKeyDef::_duplicate (p.ptr ());
+    this->ptr_ = IR_PrimaryKeyDef::_duplicate (p.ptr ());
   }
   return *this;
 }
 
 ACE_INLINE 
-IR::PrimaryKeyDef_var::operator const IR::PrimaryKeyDef_ptr &() const // cast
+IR_PrimaryKeyDef_var::operator const IR_PrimaryKeyDef_ptr &() const // cast
 {
   return this->ptr_;
 }
 
 ACE_INLINE 
-IR::PrimaryKeyDef_var::operator IR::PrimaryKeyDef_ptr &() // cast 
+IR_PrimaryKeyDef_var::operator IR_PrimaryKeyDef_ptr &() // cast 
 {
   return this->ptr_;
 }
 
-ACE_INLINE IR::PrimaryKeyDef_ptr 
-IR::PrimaryKeyDef_var::operator-> (void) const
+ACE_INLINE IR_PrimaryKeyDef_ptr 
+IR_PrimaryKeyDef_var::operator-> (void) const
 {
   return this->ptr_;
 }
 
-ACE_INLINE IR::PrimaryKeyDef_ptr
-IR::PrimaryKeyDef_var::in (void) const
+ACE_INLINE IR_PrimaryKeyDef_ptr
+IR_PrimaryKeyDef_var::in (void) const
 {
   return this->ptr_;
 }
 
-ACE_INLINE IR::PrimaryKeyDef_ptr &
-IR::PrimaryKeyDef_var::inout (void)
+ACE_INLINE IR_PrimaryKeyDef_ptr &
+IR_PrimaryKeyDef_var::inout (void)
 {
   return this->ptr_;
 }
 
-ACE_INLINE IR::PrimaryKeyDef_ptr &
-IR::PrimaryKeyDef_var::out (void)
+ACE_INLINE IR_PrimaryKeyDef_ptr &
+IR_PrimaryKeyDef_var::out (void)
 {
   CORBA::release (this->ptr_);
-  this->ptr_ = IR::PrimaryKeyDef::_nil ();
+  this->ptr_ = IR_PrimaryKeyDef::_nil ();
   return this->ptr_;
 }
 
-ACE_INLINE IR::PrimaryKeyDef_ptr 
-IR::PrimaryKeyDef_var::_retn (void)
+ACE_INLINE IR_PrimaryKeyDef_ptr 
+IR_PrimaryKeyDef_var::_retn (void)
 {
   // yield ownership of managed obj reference
-  IR::PrimaryKeyDef_ptr val = this->ptr_;
-  this->ptr_ = IR::PrimaryKeyDef::_nil ();
+  IR_PrimaryKeyDef_ptr val = this->ptr_;
+  this->ptr_ = IR_PrimaryKeyDef::_nil ();
   return val;
 }
 
-
-#endif /* end #if !defined */
-
-
-#if !defined (_IR_PRIMARYKEYDEF___OUT_CI_)
-#define _IR_PRIMARYKEYDEF___OUT_CI_
-
 // *************************************************************
-// Inline operations for class IR::PrimaryKeyDef_out
+// Inline operations for class IR_PrimaryKeyDef_out
 // *************************************************************
 
 ACE_INLINE
-IR::PrimaryKeyDef_out::PrimaryKeyDef_out (IR::PrimaryKeyDef_ptr &p)
+IR_PrimaryKeyDef_out::IR_PrimaryKeyDef_out (IR_PrimaryKeyDef_ptr &p)
   : ptr_ (p)
 {
-  this->ptr_ = IR::PrimaryKeyDef::_nil ();
+  this->ptr_ = IR_PrimaryKeyDef::_nil ();
 }
 
 ACE_INLINE
-IR::PrimaryKeyDef_out::PrimaryKeyDef_out (IR::PrimaryKeyDef_var &p) // constructor from _var
+IR_PrimaryKeyDef_out::IR_PrimaryKeyDef_out (IR_PrimaryKeyDef_var &p) // constructor from _var
   : ptr_ (p.out ())
 {
   CORBA::release (this->ptr_);
-  this->ptr_ = IR::PrimaryKeyDef::_nil ();
+  this->ptr_ = IR_PrimaryKeyDef::_nil ();
 }
 
 ACE_INLINE
-IR::PrimaryKeyDef_out::PrimaryKeyDef_out (const IR::PrimaryKeyDef_out &p) // copy constructor
-  : ptr_ (ACE_const_cast (IR::PrimaryKeyDef_out&,p).ptr_)
+IR_PrimaryKeyDef_out::IR_PrimaryKeyDef_out (const IR_PrimaryKeyDef_out &p) // copy constructor
+  : ptr_ (ACE_const_cast (IR_PrimaryKeyDef_out&,p).ptr_)
 {}
 
-ACE_INLINE IR::PrimaryKeyDef_out &
-IR::PrimaryKeyDef_out::operator= (const IR::PrimaryKeyDef_out &p)
+ACE_INLINE IR_PrimaryKeyDef_out &
+IR_PrimaryKeyDef_out::operator= (const IR_PrimaryKeyDef_out &p)
 {
-  this->ptr_ = ACE_const_cast (IR::PrimaryKeyDef_out&,p).ptr_;
+  this->ptr_ = ACE_const_cast (IR_PrimaryKeyDef_out&,p).ptr_;
   return *this;
 }
 
-ACE_INLINE IR::PrimaryKeyDef_out &
-IR::PrimaryKeyDef_out::operator= (const IR::PrimaryKeyDef_var &p)
+ACE_INLINE IR_PrimaryKeyDef_out &
+IR_PrimaryKeyDef_out::operator= (const IR_PrimaryKeyDef_var &p)
 {
-  this->ptr_ = IR::PrimaryKeyDef::_duplicate (p.ptr ());
+  this->ptr_ = IR_PrimaryKeyDef::_duplicate (p.ptr ());
   return *this;
 }
 
-ACE_INLINE IR::PrimaryKeyDef_out &
-IR::PrimaryKeyDef_out::operator= (IR::PrimaryKeyDef_ptr p)
+ACE_INLINE IR_PrimaryKeyDef_out &
+IR_PrimaryKeyDef_out::operator= (IR_PrimaryKeyDef_ptr p)
 {
   this->ptr_ = p;
   return *this;
 }
 
 ACE_INLINE 
-IR::PrimaryKeyDef_out::operator IR::PrimaryKeyDef_ptr &() // cast
+IR_PrimaryKeyDef_out::operator IR_PrimaryKeyDef_ptr &() // cast
 {
   return this->ptr_;
 }
 
-ACE_INLINE IR::PrimaryKeyDef_ptr &
-IR::PrimaryKeyDef_out::ptr (void) // ptr
+ACE_INLINE IR_PrimaryKeyDef_ptr &
+IR_PrimaryKeyDef_out::ptr (void) // ptr
 {
   return this->ptr_;
 }
 
-ACE_INLINE IR::PrimaryKeyDef_ptr 
-IR::PrimaryKeyDef_out::operator-> (void)
+ACE_INLINE IR_PrimaryKeyDef_ptr 
+IR_PrimaryKeyDef_out::operator-> (void)
 {
   return this->ptr_;
 }
 
-
-#endif /* end #if !defined */
-
-
 #if !defined (TAO_USE_SEQUENCE_TEMPLATES)
   
-#if !defined (__TAO_UNBOUNDED_OBJECT_SEQUENCE_IR_CONTAINEDSEQ_CI_)
-#define __TAO_UNBOUNDED_OBJECT_SEQUENCE_IR_CONTAINEDSEQ_CI_
-
-  ACE_INLINE IR::Contained **
-  IR::_TAO_Unbounded_Object_Sequence_IR_ContainedSeq::allocbuf (CORBA::ULong nelems)
+  ACE_INLINE IR_Contained **
+  _TAO_Unbounded_Object_Sequence_IR_ContainedSeq::allocbuf (CORBA::ULong nelems)
   {
-    IR::Contained **buf = 0;
+    IR_Contained **buf = 0;
     
-    ACE_NEW_RETURN (buf, IR::Contained*[nelems], 0);
+    ACE_NEW_RETURN (buf, IR_Contained*[nelems], 0);
     
     for (CORBA::ULong i = 0; i < nelems; i++)
-      buf[i] = IR::Contained::_nil ();
+      buf[i] = IR_Contained::_nil ();
     
     return buf;
   }
   
   ACE_INLINE void 
-  IR::_TAO_Unbounded_Object_Sequence_IR_ContainedSeq::freebuf (IR::Contained **buffer)
+  _TAO_Unbounded_Object_Sequence_IR_ContainedSeq::freebuf (IR_Contained **buffer)
   {
     if (buffer == 0)
       return;
@@ -9363,36 +8639,36 @@
   }
   
   ACE_INLINE
-  IR::_TAO_Unbounded_Object_Sequence_IR_ContainedSeq::_TAO_Unbounded_Object_Sequence_IR_ContainedSeq (void)
+  _TAO_Unbounded_Object_Sequence_IR_ContainedSeq::_TAO_Unbounded_Object_Sequence_IR_ContainedSeq (void)
   {
   }
   
   ACE_INLINE
-  IR::_TAO_Unbounded_Object_Sequence_IR_ContainedSeq::_TAO_Unbounded_Object_Sequence_IR_ContainedSeq (CORBA::ULong maximum)
+  _TAO_Unbounded_Object_Sequence_IR_ContainedSeq::_TAO_Unbounded_Object_Sequence_IR_ContainedSeq (CORBA::ULong maximum)
     : TAO_Unbounded_Base_Sequence (maximum, _TAO_Unbounded_Object_Sequence_IR_ContainedSeq::allocbuf (maximum))
   {
   }
   
   ACE_INLINE
-  IR::_TAO_Unbounded_Object_Sequence_IR_ContainedSeq::_TAO_Unbounded_Object_Sequence_IR_ContainedSeq (CORBA::ULong maximum,
+  _TAO_Unbounded_Object_Sequence_IR_ContainedSeq::_TAO_Unbounded_Object_Sequence_IR_ContainedSeq (CORBA::ULong maximum,
     CORBA::ULong length,
-    IR::Contained* *value,
+    IR_Contained* *value,
     CORBA::Boolean release)
   : TAO_Unbounded_Base_Sequence (maximum, length, value, release)
   {
   }
   
   ACE_INLINE
-  IR::_TAO_Unbounded_Object_Sequence_IR_ContainedSeq::_TAO_Unbounded_Object_Sequence_IR_ContainedSeq(const _TAO_Unbounded_Object_Sequence_IR_ContainedSeq &rhs)
+  _TAO_Unbounded_Object_Sequence_IR_ContainedSeq::_TAO_Unbounded_Object_Sequence_IR_ContainedSeq(const _TAO_Unbounded_Object_Sequence_IR_ContainedSeq &rhs)
     : TAO_Unbounded_Base_Sequence (rhs)
   {
     if (rhs.buffer_ != 0)
     {
-      IR::Contained **tmp1 = _TAO_Unbounded_Object_Sequence_IR_ContainedSeq::allocbuf (this->maximum_);
-      IR::Contained ** const tmp2 = ACE_reinterpret_cast (IR::Contained ** ACE_CAST_CONST, rhs.buffer_);
+      IR_Contained **tmp1 = _TAO_Unbounded_Object_Sequence_IR_ContainedSeq::allocbuf (this->maximum_);
+      IR_Contained ** const tmp2 = ACE_reinterpret_cast (IR_Contained ** ACE_CAST_CONST, rhs.buffer_);
       
       for (CORBA::ULong i = 0; i < rhs.length_; ++i)
-        tmp1[i] = IR::Contained::_duplicate (tmp2[i]);
+        tmp1[i] = IR_Contained::_duplicate (tmp2[i]);
       
       this->buffer_ = tmp1;
     }
@@ -9402,20 +8678,20 @@
     }
   }
   
-  ACE_INLINE IR::_TAO_Unbounded_Object_Sequence_IR_ContainedSeq &
-  IR::_TAO_Unbounded_Object_Sequence_IR_ContainedSeq::operator= (const _TAO_Unbounded_Object_Sequence_IR_ContainedSeq &rhs)
+  ACE_INLINE _TAO_Unbounded_Object_Sequence_IR_ContainedSeq &
+  _TAO_Unbounded_Object_Sequence_IR_ContainedSeq::operator= (const _TAO_Unbounded_Object_Sequence_IR_ContainedSeq &rhs)
   {
     if (this == &rhs)
       return *this;
     
     if (this->release_)
     {
-      IR::Contained **tmp = ACE_reinterpret_cast (IR::Contained **, this->buffer_);
+      IR_Contained **tmp = ACE_reinterpret_cast (IR_Contained **, this->buffer_);
       
       for (CORBA::ULong i = 0; i < this->length_; ++i)
       {
         CORBA::release (tmp[i]);
-        tmp[i] = IR::Contained::_nil ();
+        tmp[i] = IR_Contained::_nil ();
       }
       if (this->maximum_ < rhs.maximum_)
       {
@@ -9428,28 +8704,28 @@
     
     TAO_Unbounded_Base_Sequence::operator= (rhs);
     
-    IR::Contained **tmp1 = ACE_reinterpret_cast (IR::Contained **, this->buffer_);
-    IR::Contained ** const tmp2 = ACE_reinterpret_cast (IR::Contained ** ACE_CAST_CONST, rhs.buffer_);
+    IR_Contained **tmp1 = ACE_reinterpret_cast (IR_Contained **, this->buffer_);
+    IR_Contained ** const tmp2 = ACE_reinterpret_cast (IR_Contained ** ACE_CAST_CONST, rhs.buffer_);
     
     for (CORBA::ULong i = 0; i < rhs.length_; ++i)
-      tmp1[i] = IR::Contained::_duplicate (tmp2[i]);
+      tmp1[i] = IR_Contained::_duplicate (tmp2[i]);
     
     return *this;
   }
   
-  ACE_INLINE TAO_Object_Manager<IR::Contained,IR::Contained_var>
-  IR::_TAO_Unbounded_Object_Sequence_IR_ContainedSeq::operator[] (CORBA::ULong index) const
+  ACE_INLINE TAO_Object_Manager<IR_Contained,IR_Contained_var>
+  _TAO_Unbounded_Object_Sequence_IR_ContainedSeq::operator[] (CORBA::ULong index) const
   // read-write accessor
   {
     ACE_ASSERT (index < this->maximum_);
-    IR::Contained ** const tmp = ACE_reinterpret_cast (IR::Contained ** ACE_CAST_CONST, this->buffer_);
-    return TAO_Object_Manager<IR::Contained,IR::Contained_var> (tmp + index, this->release_);
+    IR_Contained ** const tmp = ACE_reinterpret_cast (IR_Contained ** ACE_CAST_CONST, this->buffer_);
+    return TAO_Object_Manager<IR_Contained,IR_Contained_var> (tmp + index, this->release_);
   }
   
-  ACE_INLINE IR::Contained* *
-  IR::_TAO_Unbounded_Object_Sequence_IR_ContainedSeq::get_buffer (CORBA::Boolean orphan)
+  ACE_INLINE IR_Contained* *
+  _TAO_Unbounded_Object_Sequence_IR_ContainedSeq::get_buffer (CORBA::Boolean orphan)
   {
-    IR::Contained **result = 0;
+    IR_Contained **result = 0;
     if (orphan == 0)
     {
       // We retain ownership.
@@ -9461,7 +8737,7 @@
       }
       else
       {
-        result = ACE_reinterpret_cast (IR::Contained**, this->buffer_);
+        result = ACE_reinterpret_cast (IR_Contained**, this->buffer_);
       }
     }
     else // if (orphan == 1)
@@ -9470,7 +8746,7 @@
       {
         // We set the state back to default and relinquish
         // ownership.
-        result = ACE_reinterpret_cast(IR::Contained**,this->buffer_);
+        result = ACE_reinterpret_cast(IR_Contained**,this->buffer_);
         this->maximum_ = 0;
         this->length_ = 0;
         this->buffer_ = 0;
@@ -9480,60 +8756,53 @@
     return result;
   }
   
-  ACE_INLINE const IR::Contained* *
-  IR::_TAO_Unbounded_Object_Sequence_IR_ContainedSeq::get_buffer (void) const
+  ACE_INLINE const IR_Contained* *
+  _TAO_Unbounded_Object_Sequence_IR_ContainedSeq::get_buffer (void) const
   {
-    return ACE_reinterpret_cast(const IR::Contained ** ACE_CAST_CONST, this->buffer_);
+    return ACE_reinterpret_cast(const IR_Contained ** ACE_CAST_CONST, this->buffer_);
   }
   
-  
-#endif /* end #if !defined */
-
-
 #endif /* !TAO_USE_SEQUENCE_TEMPLATES */ 
 
-#if !defined (_IR_CONTAINEDSEQ_CI_)
-#define _IR_CONTAINEDSEQ_CI_
-
 // *************************************************************
-// Inline operations for class IR::ContainedSeq_var
+// Inline operations for class IR_ContainedSeq_var
 // *************************************************************
 
 ACE_INLINE
-IR::ContainedSeq_var::ContainedSeq_var (void) // default constructor
+IR_ContainedSeq_var::IR_ContainedSeq_var (void) // default constructor
   : ptr_ (0)
 {}
 
 ACE_INLINE
-IR::ContainedSeq_var::ContainedSeq_var (ContainedSeq *p)
+IR_ContainedSeq_var::IR_ContainedSeq_var (IR_ContainedSeq *p)
   : ptr_ (p)
 {}
 
 ACE_INLINE
-IR::ContainedSeq_var::ContainedSeq_var (const ::IR::ContainedSeq_var &p) // copy constructor
+IR_ContainedSeq_var::IR_ContainedSeq_var (const ::IR_ContainedSeq_var &p) // copy constructor
 {
   if (p.ptr_)
-    ACE_NEW (this->ptr_, ::IR::ContainedSeq (*p.ptr_));
+    ACE_NEW (this->ptr_, ::IR_ContainedSeq (*p.ptr_));
   else
     this->ptr_ = 0;
 }
 
 ACE_INLINE
-IR::ContainedSeq_var::~ContainedSeq_var (void) // destructor
+IR_ContainedSeq_var::~IR_ContainedSeq_var (void) // destructor
 {
   delete this->ptr_;
 }
 
-ACE_INLINE IR::ContainedSeq_var &
-IR::ContainedSeq_var::operator= (ContainedSeq *p)
+ACE_INLINE IR_ContainedSeq_var &
+IR_ContainedSeq_var::operator= (IR_ContainedSeq *p)
 {
   delete this->ptr_;
   this->ptr_ = p;
   return *this;
 }
 
-ACE_INLINE ::IR::ContainedSeq_var &
-IR::ContainedSeq_var::operator= (const ::IR::ContainedSeq_var &p)
+ACE_INLINE IR_ContainedSeq_var &
+IR_ContainedSeq_var::operator= (const ::IR_ContainedSeq_var &p) // deep copy
 {
   if (this != &p)
     {
@@ -9544,12 +8813,12 @@
         }
       else
         {
-          ContainedSeq *deep_copy =
-            new ContainedSeq (*p.ptr_);
+          IR_ContainedSeq *deep_copy = 
+            new IR_ContainedSeq (*p.ptr_);
           
           if (deep_copy != 0)
             {
-              ContainedSeq *tmp = deep_copy;
+              IR_ContainedSeq *tmp = deep_copy;
               deep_copy = this->ptr_;
               this->ptr_ = tmp;
               delete deep_copy;
@@ -9560,97 +8829,97 @@
   return *this;
 }
 
-ACE_INLINE const ::IR::ContainedSeq *
-IR::ContainedSeq_var::operator-> (void) const
+ACE_INLINE const ::IR_ContainedSeq *
+IR_ContainedSeq_var::operator-> (void) const
 {
   return this->ptr_;
 }
 
-ACE_INLINE ::IR::ContainedSeq *
-IR::ContainedSeq_var::operator-> (void)
+ACE_INLINE ::IR_ContainedSeq *
+IR_ContainedSeq_var::operator-> (void)
 {
   return this->ptr_;
 }
 
 ACE_INLINE 
-IR::ContainedSeq_var::operator const ::IR::ContainedSeq &() const // cast
+IR_ContainedSeq_var::operator const ::IR_ContainedSeq &() const // cast
 {
   return *this->ptr_;
 }
 
 ACE_INLINE 
-IR::ContainedSeq_var::operator ::IR::ContainedSeq &() // cast 
+IR_ContainedSeq_var::operator ::IR_ContainedSeq &() // cast 
 {
   return *this->ptr_;
 }
 
 ACE_INLINE 
-IR::ContainedSeq_var::operator ::IR::ContainedSeq &() const // cast 
+IR_ContainedSeq_var::operator ::IR_ContainedSeq &() const // cast 
 {
   return *this->ptr_;
 }
 
 // variable-size types only
 ACE_INLINE
-IR::ContainedSeq_var::operator ::IR::ContainedSeq *&() // cast 
+IR_ContainedSeq_var::operator ::IR_ContainedSeq *&() // cast 
 {
   return this->ptr_;
 }
 
-ACE_INLINE TAO_Object_Manager<IR::Contained, IR::Contained_var>
-IR::ContainedSeq_var::operator[] (CORBA::ULong index)
+ACE_INLINE TAO_Object_Manager<IR_Contained, IR_Contained_var>
+IR_ContainedSeq_var::operator[] (CORBA::ULong index)
 {
   return this->ptr_->operator[] (index);
 }
 
-ACE_INLINE const ::IR::ContainedSeq &
-IR::ContainedSeq_var::in (void) const
+ACE_INLINE const ::IR_ContainedSeq &
+IR_ContainedSeq_var::in (void) const
 {
   return *this->ptr_;
 }
 
-ACE_INLINE ::IR::ContainedSeq &
-IR::ContainedSeq_var::inout (void)
+ACE_INLINE ::IR_ContainedSeq &
+IR_ContainedSeq_var::inout (void)
 {
   return *this->ptr_;
 }
 
 // mapping for variable size 
-ACE_INLINE ::IR::ContainedSeq *&
-IR::ContainedSeq_var::out (void)
+ACE_INLINE ::IR_ContainedSeq *&
+IR_ContainedSeq_var::out (void)
 {
   delete this->ptr_;
   this->ptr_ = 0;
   return this->ptr_;
 }
 
-ACE_INLINE ::IR::ContainedSeq *
-IR::ContainedSeq_var::_retn (void)
+ACE_INLINE ::IR_ContainedSeq *
+IR_ContainedSeq_var::_retn (void)
 {
-  ::IR::ContainedSeq *tmp = this->ptr_;
+  ::IR_ContainedSeq *tmp = this->ptr_;
   this->ptr_ = 0;
   return tmp;
 }
 
-ACE_INLINE ::IR::ContainedSeq *
-IR::ContainedSeq_var::ptr (void) const
+ACE_INLINE ::IR_ContainedSeq *
+IR_ContainedSeq_var::ptr (void) const
 {
   return this->ptr_;
 }
 
 // *************************************************************
-// Inline operations for class IR::ContainedSeq_out
+// Inline operations for class IR_ContainedSeq_out
 // *************************************************************
 
 ACE_INLINE
-IR::ContainedSeq_out::ContainedSeq_out (ContainedSeq *&p)
+IR_ContainedSeq_out::IR_ContainedSeq_out (IR_ContainedSeq *&p)
   : ptr_ (p)
 {
   this->ptr_ = 0;
 }
 
 ACE_INLINE
-IR::ContainedSeq_out::ContainedSeq_out (ContainedSeq_var &p) // constructor from _var
+IR_ContainedSeq_out::IR_ContainedSeq_out (IR_ContainedSeq_var &p) // constructor from _var
   : ptr_ (p.out ())
 {
   delete this->ptr_;
@@ -9658,90 +8927,87 @@
 }
 
 ACE_INLINE
-IR::ContainedSeq_out::ContainedSeq_out (const ::IR::ContainedSeq_out &p) // copy constructor
-  : ptr_ (ACE_const_cast (ContainedSeq_out&, p).ptr_)
+IR_ContainedSeq_out::IR_ContainedSeq_out (const ::IR_ContainedSeq_out &p) // copy constructor
+  : ptr_ (ACE_const_cast (IR_ContainedSeq_out&, p).ptr_)
 {}
 
-ACE_INLINE ::IR::ContainedSeq_out &
-IR::ContainedSeq_out::operator= (const ::IR::ContainedSeq_out &p)
+ACE_INLINE ::IR_ContainedSeq_out &
+IR_ContainedSeq_out::operator= (const ::IR_ContainedSeq_out &p)
 {
-  this->ptr_ = ACE_const_cast (ContainedSeq_out&, p).ptr_;
+  this->ptr_ = ACE_const_cast (IR_ContainedSeq_out&, p).ptr_;
   return *this;
 }
 
-ACE_INLINE ::IR::ContainedSeq_out &
-IR::ContainedSeq_out::operator= (ContainedSeq *p)
+ACE_INLINE ::IR_ContainedSeq_out &
+IR_ContainedSeq_out::operator= (IR_ContainedSeq *p)
 {
   this->ptr_ = p;
   return *this;
 }
 
 ACE_INLINE 
-IR::ContainedSeq_out::operator ::IR::ContainedSeq *&() // cast
+IR_ContainedSeq_out::operator ::IR_ContainedSeq *&() // cast
 {
   return this->ptr_;
 }
 
-ACE_INLINE ::IR::ContainedSeq *&
-IR::ContainedSeq_out::ptr (void) // ptr
+ACE_INLINE ::IR_ContainedSeq *&
+IR_ContainedSeq_out::ptr (void) // ptr
 {
   return this->ptr_;
 }
 
-ACE_INLINE ::IR::ContainedSeq *
-IR::ContainedSeq_out::operator-> (void)
+ACE_INLINE ::IR_ContainedSeq *
+IR_ContainedSeq_out::operator-> (void)
 {
   return this->ptr_;
 }
 
-ACE_INLINE TAO_Object_Manager<IR::Contained, IR::Contained_var>
-IR::ContainedSeq_out::operator[] (CORBA::ULong index)
+ACE_INLINE TAO_Object_Manager<IR_Contained, IR_Contained_var>
+IR_ContainedSeq_out::operator[] (CORBA::ULong index)
 {
   return this->ptr_->operator[] (index);
 }
 
-
-#endif /* end #if !defined */
-
 // *************************************************************
-// Inline operations for class IR::StructMember_var
+// Inline operations for class IR_StructMember_var
 // *************************************************************
 
 ACE_INLINE
-IR::StructMember_var::StructMember_var (void) // default constructor
+IR_StructMember_var::IR_StructMember_var (void) // default constructor
   : ptr_ (0)
 {}
 
 ACE_INLINE
-IR::StructMember_var::StructMember_var (StructMember *p)
+IR_StructMember_var::IR_StructMember_var (IR_StructMember *p)
   : ptr_ (p)
 {}
 
 ACE_INLINE
-IR::StructMember_var::StructMember_var (const ::IR::StructMember_var &p) // copy constructor
+IR_StructMember_var::IR_StructMember_var (const ::IR_StructMember_var &p) // copy constructor
 {
   if (p.ptr_)
-    ACE_NEW (this->ptr_, ::IR::StructMember (*p.ptr_));
+    ACE_NEW (this->ptr_, ::IR_StructMember (*p.ptr_));
   else
     this->ptr_ = 0;
 }
 
 ACE_INLINE
-IR::StructMember_var::~StructMember_var (void) // destructor
+IR_StructMember_var::~IR_StructMember_var (void) // destructor
 {
   delete this->ptr_;
 }
 
-ACE_INLINE IR::StructMember_var &
-IR::StructMember_var::operator= (StructMember *p)
+ACE_INLINE IR_StructMember_var &
+IR_StructMember_var::operator= (IR_StructMember *p)
 {
   delete this->ptr_;
   this->ptr_ = p;
   return *this;
 }
 
-ACE_INLINE ::IR::StructMember_var &
-IR::StructMember_var::operator= (const ::IR::StructMember_var &p)
+ACE_INLINE ::IR_StructMember_var &
+IR_StructMember_var::operator= (const ::IR_StructMember_var &p)
 {
   if (this != &p)
     {
@@ -9752,12 +9018,12 @@
         }
       else
         {
-          StructMember *deep_copy =
-            new StructMember (*p.ptr_);
+          IR_StructMember *deep_copy = 
+            new IR_StructMember (*p.ptr_);
           
           if (deep_copy != 0)
             {
-              StructMember *tmp = deep_copy;
+              IR_StructMember *tmp = deep_copy;
               deep_copy = this->ptr_;
               this->ptr_ = tmp;
               delete deep_copy;
@@ -9768,91 +9034,91 @@
   return *this;
 }
 
-ACE_INLINE const ::IR::StructMember *
-IR::StructMember_var::operator-> (void) const
+ACE_INLINE const ::IR_StructMember *
+IR_StructMember_var::operator-> (void) const
 {
   return this->ptr_;
 }
 
-ACE_INLINE ::IR::StructMember *
-IR::StructMember_var::operator-> (void)
+ACE_INLINE ::IR_StructMember *
+IR_StructMember_var::operator-> (void)
 {
   return this->ptr_;
 }
 
 ACE_INLINE
-IR::StructMember_var::operator const ::IR::StructMember &() const // cast
+IR_StructMember_var::operator const ::IR_StructMember &() const // cast
 {
   return *this->ptr_;
 }
 
 ACE_INLINE
-IR::StructMember_var::operator ::IR::StructMember &() // cast 
+IR_StructMember_var::operator ::IR_StructMember &() // cast 
 {
   return *this->ptr_;
 }
 
 ACE_INLINE
-IR::StructMember_var::operator ::IR::StructMember &() const // cast 
+IR_StructMember_var::operator ::IR_StructMember &() const // cast 
 {
   return *this->ptr_;
 }
 
 // variable-size types only
 ACE_INLINE
-IR::StructMember_var::operator ::IR::StructMember *&() // cast 
+IR_StructMember_var::operator ::IR_StructMember *&() // cast 
 {
   return this->ptr_;
 }
 
-ACE_INLINE const ::IR::StructMember &
-IR::StructMember_var::in (void) const
+ACE_INLINE const ::IR_StructMember &
+IR_StructMember_var::in (void) const
 {
   return *this->ptr_;
 }
 
-ACE_INLINE ::IR::StructMember &
-IR::StructMember_var::inout (void)
+ACE_INLINE ::IR_StructMember &
+IR_StructMember_var::inout (void)
 {
   return *this->ptr_;
 }
 
 // mapping for variable size 
-ACE_INLINE ::IR::StructMember *&
-IR::StructMember_var::out (void)
+ACE_INLINE ::IR_StructMember *&
+IR_StructMember_var::out (void)
 {
   delete this->ptr_;
   this->ptr_ = 0;
   return this->ptr_;
 }
 
-ACE_INLINE ::IR::StructMember *
-IR::StructMember_var::_retn (void)
+ACE_INLINE ::IR_StructMember *
+IR_StructMember_var::_retn (void)
 {
-  ::IR::StructMember *tmp = this->ptr_;
+  ::IR_StructMember *tmp = this->ptr_;
   this->ptr_ = 0;
   return tmp;
 }
 
-ACE_INLINE ::IR::StructMember *
-IR::StructMember_var::ptr (void) const
+ACE_INLINE ::IR_StructMember *
+IR_StructMember_var::ptr (void) const
 {
   return this->ptr_;
 }
 
 // *************************************************************
-// Inline operations for class IR::StructMember_out
+// Inline operations for class IR_StructMember_out
 // *************************************************************
 
 ACE_INLINE
-IR::StructMember_out::StructMember_out (::IR::StructMember *&p)
+IR_StructMember_out::IR_StructMember_out (::IR_StructMember *&p)
   : ptr_ (p)
 {
   this->ptr_ = 0;
 }
 
 ACE_INLINE
-IR::StructMember_out::StructMember_out (StructMember_var &p) // constructor from _var
+IR_StructMember_out::IR_StructMember_out (IR_StructMember_var &p) // constructor from _var
   : ptr_ (p.out ())
 {
   delete this->ptr_;
@@ -9860,38 +9126,38 @@
 }
 
 ACE_INLINE
-IR::StructMember_out::StructMember_out (const ::IR::StructMember_out &p) // copy constructor
-  : ptr_ (ACE_const_cast (StructMember_out&, p).ptr_)
+IR_StructMember_out::IR_StructMember_out (const ::IR_StructMember_out &p) // copy constructor
+  : ptr_ (ACE_const_cast (IR_StructMember_out&, p).ptr_)
 {}
 
-ACE_INLINE IR::StructMember_out &
-IR::StructMember_out::operator= (const ::IR::StructMember_out &p)
+ACE_INLINE IR_StructMember_out &
+IR_StructMember_out::operator= (const ::IR_StructMember_out &p)
 {
-  this->ptr_ = ACE_const_cast (StructMember_out&, p).ptr_;
+  this->ptr_ = ACE_const_cast (IR_StructMember_out&, p).ptr_;
   return *this;
 }
 
-ACE_INLINE IR::StructMember_out &
-IR::StructMember_out::operator= (StructMember *p)
+ACE_INLINE IR_StructMember_out &
+IR_StructMember_out::operator= (IR_StructMember *p)
 {
   this->ptr_ = p;
   return *this;
 }
 
 ACE_INLINE 
-IR::StructMember_out::operator ::IR::StructMember *&() // cast
+IR_StructMember_out::operator ::IR_StructMember *&() // cast
 {
   return this->ptr_;
 }
 
-ACE_INLINE ::IR::StructMember *&
-IR::StructMember_out::ptr (void) // ptr
+ACE_INLINE ::IR_StructMember *&
+IR_StructMember_out::ptr (void) // ptr
 {
   return this->ptr_;
 }
 
-ACE_INLINE ::IR::StructMember *
-IR::StructMember_out::operator-> (void)
+ACE_INLINE ::IR_StructMember *
+IR_StructMember_out::operator-> (void)
 {
   return this->ptr_;
 }
@@ -9899,54 +9165,51 @@
 
 #if !defined (TAO_USE_SEQUENCE_TEMPLATES)
   
-#if !defined (__TAO_UNBOUNDED_SEQUENCE_IR_STRUCTMEMBERSEQ_CI_)
-#define __TAO_UNBOUNDED_SEQUENCE_IR_STRUCTMEMBERSEQ_CI_
-
   // = Static operations.
-  ACE_INLINE IR::StructMember *
-  IR::_TAO_Unbounded_Sequence_IR_StructMemberSeq::allocbuf (CORBA::ULong size)
+  ACE_INLINE IR_StructMember *
+  _TAO_Unbounded_Sequence_IR_StructMemberSeq::allocbuf (CORBA::ULong size)
   // Allocate storage for the sequence.
   {
-    IR::StructMember *retval = 0;
-    ACE_NEW_RETURN (retval, IR::StructMember[size], 0);
+    IR_StructMember *retval = 0;
+    ACE_NEW_RETURN (retval, IR_StructMember[size], 0);
     return retval;
   }
   
-  ACE_INLINE void IR::_TAO_Unbounded_Sequence_IR_StructMemberSeq::freebuf (IR::StructMember *buffer)
+  ACE_INLINE void _TAO_Unbounded_Sequence_IR_StructMemberSeq::freebuf (IR_StructMember *buffer)
   // Free the sequence.
   {
     delete [] buffer;
   }
   
   ACE_INLINE
-  IR::_TAO_Unbounded_Sequence_IR_StructMemberSeq::_TAO_Unbounded_Sequence_IR_StructMemberSeq (void) // Default constructor.
+  _TAO_Unbounded_Sequence_IR_StructMemberSeq::_TAO_Unbounded_Sequence_IR_StructMemberSeq (void) // Default constructor.
   {
   }
   
   ACE_INLINE
-  IR::_TAO_Unbounded_Sequence_IR_StructMemberSeq::_TAO_Unbounded_Sequence_IR_StructMemberSeq (CORBA::ULong maximum) // Constructor using a maximum length value.
+  _TAO_Unbounded_Sequence_IR_StructMemberSeq::_TAO_Unbounded_Sequence_IR_StructMemberSeq (CORBA::ULong maximum) // Constructor using a maximum length value.
     : TAO_Unbounded_Base_Sequence (maximum, _TAO_Unbounded_Sequence_IR_StructMemberSeq::allocbuf (maximum))
   {
   }
   
   ACE_INLINE
-  IR::_TAO_Unbounded_Sequence_IR_StructMemberSeq::_TAO_Unbounded_Sequence_IR_StructMemberSeq (CORBA::ULong maximum,
+  _TAO_Unbounded_Sequence_IR_StructMemberSeq::_TAO_Unbounded_Sequence_IR_StructMemberSeq (CORBA::ULong maximum,
     CORBA::ULong length,
-    IR::StructMember *data,
+    IR_StructMember *data,
     CORBA::Boolean release)
   : TAO_Unbounded_Base_Sequence (maximum, length, data, release)
   {
   }
   
   ACE_INLINE
-  IR::_TAO_Unbounded_Sequence_IR_StructMemberSeq::_TAO_Unbounded_Sequence_IR_StructMemberSeq (const _TAO_Unbounded_Sequence_IR_StructMemberSeq &rhs)
+  _TAO_Unbounded_Sequence_IR_StructMemberSeq::_TAO_Unbounded_Sequence_IR_StructMemberSeq (const _TAO_Unbounded_Sequence_IR_StructMemberSeq &rhs)
   // Copy constructor.
     : TAO_Unbounded_Base_Sequence (rhs)
   {
     if (rhs.buffer_ != 0)
     {
-      IR::StructMember *tmp1 = _TAO_Unbounded_Sequence_IR_StructMemberSeq::allocbuf (this->maximum_);
-      IR::StructMember * const tmp2 = ACE_reinterpret_cast (IR::StructMember * ACE_CAST_CONST, rhs.buffer_);
+      IR_StructMember *tmp1 = _TAO_Unbounded_Sequence_IR_StructMemberSeq::allocbuf (this->maximum_);
+      IR_StructMember * const tmp2 = ACE_reinterpret_cast (IR_StructMember * ACE_CAST_CONST, rhs.buffer_);
       
       for (CORBA::ULong i = 0; i < this->length_; ++i)
         tmp1[i] = tmp2[i];
@@ -9959,8 +9222,8 @@
     }
   }
   
-  ACE_INLINE IR::_TAO_Unbounded_Sequence_IR_StructMemberSeq &
-  IR::_TAO_Unbounded_Sequence_IR_StructMemberSeq::operator= (const _TAO_Unbounded_Sequence_IR_StructMemberSeq &rhs)
+  ACE_INLINE _TAO_Unbounded_Sequence_IR_StructMemberSeq &
+  _TAO_Unbounded_Sequence_IR_StructMemberSeq::operator= (const _TAO_Unbounded_Sequence_IR_StructMemberSeq &rhs)
   // Assignment operator.
   {
     if (this == &rhs)
@@ -9971,7 +9234,7 @@
       if (this->maximum_ < rhs.maximum_)
       {
         // free the old buffer
-        IR::StructMember *tmp = ACE_reinterpret_cast (IR::StructMember *, this->buffer_);
+        IR_StructMember *tmp = ACE_reinterpret_cast (IR_StructMember *, this->buffer_);
         _TAO_Unbounded_Sequence_IR_StructMemberSeq::freebuf (tmp);
         this->buffer_ = _TAO_Unbounded_Sequence_IR_StructMemberSeq::allocbuf (rhs.maximum_);
       }
@@ -9981,8 +9244,8 @@
     
     TAO_Unbounded_Base_Sequence::operator= (rhs);
     
-    IR::StructMember *tmp1 = ACE_reinterpret_cast (IR::StructMember *, this->buffer_);
-    IR::StructMember * const tmp2 = ACE_reinterpret_cast (IR::StructMember * ACE_CAST_CONST, rhs.buffer_);
+    IR_StructMember *tmp1 = ACE_reinterpret_cast (IR_StructMember *, this->buffer_);
+    IR_StructMember * const tmp2 = ACE_reinterpret_cast (IR_StructMember * ACE_CAST_CONST, rhs.buffer_);
     
     for (CORBA::ULong i = 0; i < this->length_; ++i)
       tmp1[i] = tmp2[i];
@@ -9991,30 +9254,30 @@
   }
   
   // = Accessors.
-  ACE_INLINE IR::StructMember &
-  IR::_TAO_Unbounded_Sequence_IR_StructMemberSeq::operator[] (CORBA::ULong i)
+  ACE_INLINE IR_StructMember &
+  _TAO_Unbounded_Sequence_IR_StructMemberSeq::operator[] (CORBA::ULong i)
   // operator []
   {
     ACE_ASSERT (i < this->maximum_);
-    IR::StructMember* tmp = ACE_reinterpret_cast(IR::StructMember*,this->buffer_);
+    IR_StructMember* tmp = ACE_reinterpret_cast(IR_StructMember*,this->buffer_);
     return tmp[i];
   }
   
-  ACE_INLINE const IR::StructMember &
-  IR::_TAO_Unbounded_Sequence_IR_StructMemberSeq::operator[] (CORBA::ULong i) const
+  ACE_INLINE const IR_StructMember &
+  _TAO_Unbounded_Sequence_IR_StructMemberSeq::operator[] (CORBA::ULong i) const
   // operator []
   {
     ACE_ASSERT (i < this->maximum_);
-    IR::StructMember * const tmp = ACE_reinterpret_cast (IR::StructMember* ACE_CAST_CONST, this->buffer_);
+    IR_StructMember * const tmp = ACE_reinterpret_cast (IR_StructMember* ACE_CAST_CONST, this->buffer_);
     return tmp[i];
   }
   
   // Implement the TAO_Base_Sequence methods (see Sequence.h)
   
-  ACE_INLINE IR::StructMember *
-  IR::_TAO_Unbounded_Sequence_IR_StructMemberSeq::get_buffer (CORBA::Boolean orphan)
+  ACE_INLINE IR_StructMember *
+  _TAO_Unbounded_Sequence_IR_StructMemberSeq::get_buffer (CORBA::Boolean orphan)
   {
-    IR::StructMember *result = 0;
+    IR_StructMember *result = 0;
     if (orphan == 0)
     {
       // We retain ownership.
@@ -10026,7 +9289,7 @@
       }
       else
       {
-        result = ACE_reinterpret_cast (IR::StructMember*, this->buffer_);
+        result = ACE_reinterpret_cast (IR_StructMember*, this->buffer_);
       }
     }
     else // if (orphan == 1)
@@ -10035,7 +9298,7 @@
       {
         // We set the state back to default and relinquish
         // ownership.
-        result = ACE_reinterpret_cast(IR::StructMember*,this->buffer_);
+        result = ACE_reinterpret_cast(IR_StructMember*,this->buffer_);
         this->maximum_ = 0;
         this->length_ = 0;
         this->buffer_ = 0;
@@ -10045,76 +9308,70 @@
     return result;
   }
   
-  ACE_INLINE const IR::StructMember *
-  IR::_TAO_Unbounded_Sequence_IR_StructMemberSeq::get_buffer (void) const
+  ACE_INLINE const IR_StructMember *
+  _TAO_Unbounded_Sequence_IR_StructMemberSeq::get_buffer (void) const
   {
-    return ACE_reinterpret_cast(const IR::StructMember * ACE_CAST_CONST, this->buffer_);
+    return ACE_reinterpret_cast(const IR_StructMember * ACE_CAST_CONST, this->buffer_);
   }
   
   ACE_INLINE void
-  IR::_TAO_Unbounded_Sequence_IR_StructMemberSeq::replace (CORBA::ULong max,
+  _TAO_Unbounded_Sequence_IR_StructMemberSeq::replace (CORBA::ULong max,
   CORBA::ULong length,
-  IR::StructMember *data,
+  IR_StructMember *data,
   CORBA::Boolean release)
   {
     this->maximum_ = max;
     this->length_ = length;
     if (this->buffer_ && this->release_ == 1)
     {
-      IR::StructMember *tmp = ACE_reinterpret_cast(IR::StructMember*,this->buffer_);
+      IR_StructMember *tmp = ACE_reinterpret_cast(IR_StructMember*,this->buffer_);
       _TAO_Unbounded_Sequence_IR_StructMemberSeq::freebuf (tmp);
     }
     this->buffer_ = data;
     this->release_ = release;
   }
   
-#endif /* end #if !defined */
-
-
 #endif /* !TAO_USE_SEQUENCE_TEMPLATES */ 
 
-#if !defined (_IR_STRUCTMEMBERSEQ_CI_)
-#define _IR_STRUCTMEMBERSEQ_CI_
-
 // *************************************************************
-// Inline operations for class IR::StructMemberSeq_var
+// Inline operations for class IR_StructMemberSeq_var
 // *************************************************************
 
 ACE_INLINE
-IR::StructMemberSeq_var::StructMemberSeq_var (void) // default constructor
+IR_StructMemberSeq_var::IR_StructMemberSeq_var (void) // default constructor
   : ptr_ (0)
 {}
 
 ACE_INLINE
-IR::StructMemberSeq_var::StructMemberSeq_var (StructMemberSeq *p)
+IR_StructMemberSeq_var::IR_StructMemberSeq_var (IR_StructMemberSeq *p)
   : ptr_ (p)
 {}
 
 ACE_INLINE
-IR::StructMemberSeq_var::StructMemberSeq_var (const ::IR::StructMemberSeq_var &p) // copy constructor
+IR_StructMemberSeq_var::IR_StructMemberSeq_var (const ::IR_StructMemberSeq_var &p) // copy constructor
 {
   if (p.ptr_)
-    ACE_NEW (this->ptr_, ::IR::StructMemberSeq (*p.ptr_));
+    ACE_NEW (this->ptr_, ::IR_StructMemberSeq (*p.ptr_));
   else
     this->ptr_ = 0;
 }
 
 ACE_INLINE
-IR::StructMemberSeq_var::~StructMemberSeq_var (void) // destructor
+IR_StructMemberSeq_var::~IR_StructMemberSeq_var (void) // destructor
 {
   delete this->ptr_;
 }
 
-ACE_INLINE IR::StructMemberSeq_var &
-IR::StructMemberSeq_var::operator= (StructMemberSeq *p)
+ACE_INLINE IR_StructMemberSeq_var &
+IR_StructMemberSeq_var::operator= (IR_StructMemberSeq *p)
 {
   delete this->ptr_;
   this->ptr_ = p;
   return *this;
 }
 
-ACE_INLINE ::IR::StructMemberSeq_var &
-IR::StructMemberSeq_var::operator= (const ::IR::StructMemberSeq_var &p)
+ACE_INLINE IR_StructMemberSeq_var &
+IR_StructMemberSeq_var::operator= (const ::IR_StructMemberSeq_var &p) // deep copy
 {
   if (this != &p)
     {
@@ -10125,12 +9382,12 @@
         }
       else
         {
-          StructMemberSeq *deep_copy =
-            new StructMemberSeq (*p.ptr_);
+          IR_StructMemberSeq *deep_copy = 
+            new IR_StructMemberSeq (*p.ptr_);
           
           if (deep_copy != 0)
             {
-              StructMemberSeq *tmp = deep_copy;
+              IR_StructMemberSeq *tmp = deep_copy;
               deep_copy = this->ptr_;
               this->ptr_ = tmp;
               delete deep_copy;
@@ -10141,103 +9398,103 @@
   return *this;
 }
 
-ACE_INLINE const ::IR::StructMemberSeq *
-IR::StructMemberSeq_var::operator-> (void) const
+ACE_INLINE const ::IR_StructMemberSeq *
+IR_StructMemberSeq_var::operator-> (void) const
 {
   return this->ptr_;
 }
 
-ACE_INLINE ::IR::StructMemberSeq *
-IR::StructMemberSeq_var::operator-> (void)
+ACE_INLINE ::IR_StructMemberSeq *
+IR_StructMemberSeq_var::operator-> (void)
 {
   return this->ptr_;
 }
 
 ACE_INLINE 
-IR::StructMemberSeq_var::operator const ::IR::StructMemberSeq &() const // cast
+IR_StructMemberSeq_var::operator const ::IR_StructMemberSeq &() const // cast
 {
   return *this->ptr_;
 }
 
 ACE_INLINE 
-IR::StructMemberSeq_var::operator ::IR::StructMemberSeq &() // cast 
+IR_StructMemberSeq_var::operator ::IR_StructMemberSeq &() // cast 
 {
   return *this->ptr_;
 }
 
 ACE_INLINE 
-IR::StructMemberSeq_var::operator ::IR::StructMemberSeq &() const // cast 
+IR_StructMemberSeq_var::operator ::IR_StructMemberSeq &() const // cast 
 {
   return *this->ptr_;
 }
 
 // variable-size types only
 ACE_INLINE
-IR::StructMemberSeq_var::operator ::IR::StructMemberSeq *&() // cast 
+IR_StructMemberSeq_var::operator ::IR_StructMemberSeq *&() // cast 
 {
   return this->ptr_;
 }
 
-ACE_INLINE IR::StructMember &
-IR::StructMemberSeq_var::operator[] (CORBA::ULong index)
+ACE_INLINE IR_StructMember &
+IR_StructMemberSeq_var::operator[] (CORBA::ULong index)
 {
   return this->ptr_->operator[] (index);
 }
 
-ACE_INLINE const IR::StructMember &
-IR::StructMemberSeq_var::operator[] (CORBA::ULong index) const
+ACE_INLINE const IR_StructMember &
+IR_StructMemberSeq_var::operator[] (CORBA::ULong index) const
 {
-  return ACE_const_cast (const IR::StructMember &, this->ptr_->operator[] (index));
+  return ACE_const_cast (const IR_StructMember &, this->ptr_->operator[] (index));
 }
 
-ACE_INLINE const ::IR::StructMemberSeq &
-IR::StructMemberSeq_var::in (void) const
+ACE_INLINE const ::IR_StructMemberSeq &
+IR_StructMemberSeq_var::in (void) const
 {
   return *this->ptr_;
 }
 
-ACE_INLINE ::IR::StructMemberSeq &
-IR::StructMemberSeq_var::inout (void)
+ACE_INLINE ::IR_StructMemberSeq &
+IR_StructMemberSeq_var::inout (void)
 {
   return *this->ptr_;
 }
 
 // mapping for variable size 
-ACE_INLINE ::IR::StructMemberSeq *&
-IR::StructMemberSeq_var::out (void)
+ACE_INLINE ::IR_StructMemberSeq *&
+IR_StructMemberSeq_var::out (void)
 {
   delete this->ptr_;
   this->ptr_ = 0;
   return this->ptr_;
 }
 
-ACE_INLINE ::IR::StructMemberSeq *
-IR::StructMemberSeq_var::_retn (void)
+ACE_INLINE ::IR_StructMemberSeq *
+IR_StructMemberSeq_var::_retn (void)
 {
-  ::IR::StructMemberSeq *tmp = this->ptr_;
+  ::IR_StructMemberSeq *tmp = this->ptr_;
   this->ptr_ = 0;
   return tmp;
 }
 
-ACE_INLINE ::IR::StructMemberSeq *
-IR::StructMemberSeq_var::ptr (void) const
+ACE_INLINE ::IR_StructMemberSeq *
+IR_StructMemberSeq_var::ptr (void) const
 {
   return this->ptr_;
 }
 
 // *************************************************************
-// Inline operations for class IR::StructMemberSeq_out
+// Inline operations for class IR_StructMemberSeq_out
 // *************************************************************
 
 ACE_INLINE
-IR::StructMemberSeq_out::StructMemberSeq_out (StructMemberSeq *&p)
+IR_StructMemberSeq_out::IR_StructMemberSeq_out (IR_StructMemberSeq *&p)
   : ptr_ (p)
 {
   this->ptr_ = 0;
 }
 
 ACE_INLINE
-IR::StructMemberSeq_out::StructMemberSeq_out (StructMemberSeq_var &p) // constructor from _var
+IR_StructMemberSeq_out::IR_StructMemberSeq_out (IR_StructMemberSeq_var &p) // constructor from _var
   : ptr_ (p.out ())
 {
   delete this->ptr_;
@@ -10245,90 +9502,87 @@
 }
 
 ACE_INLINE
-IR::StructMemberSeq_out::StructMemberSeq_out (const ::IR::StructMemberSeq_out &p) // copy constructor
-  : ptr_ (ACE_const_cast (StructMemberSeq_out&, p).ptr_)
+IR_StructMemberSeq_out::IR_StructMemberSeq_out (const ::IR_StructMemberSeq_out &p) // copy constructor
+  : ptr_ (ACE_const_cast (IR_StructMemberSeq_out&, p).ptr_)
 {}
 
-ACE_INLINE ::IR::StructMemberSeq_out &
-IR::StructMemberSeq_out::operator= (const ::IR::StructMemberSeq_out &p)
+ACE_INLINE ::IR_StructMemberSeq_out &
+IR_StructMemberSeq_out::operator= (const ::IR_StructMemberSeq_out &p)
 {
-  this->ptr_ = ACE_const_cast (StructMemberSeq_out&, p).ptr_;
+  this->ptr_ = ACE_const_cast (IR_StructMemberSeq_out&, p).ptr_;
   return *this;
 }
 
-ACE_INLINE ::IR::StructMemberSeq_out &
-IR::StructMemberSeq_out::operator= (StructMemberSeq *p)
+ACE_INLINE ::IR_StructMemberSeq_out &
+IR_StructMemberSeq_out::operator= (IR_StructMemberSeq *p)
 {
   this->ptr_ = p;
   return *this;
 }
 
 ACE_INLINE 
-IR::StructMemberSeq_out::operator ::IR::StructMemberSeq *&() // cast
+IR_StructMemberSeq_out::operator ::IR_StructMemberSeq *&() // cast
 {
   return this->ptr_;
 }
 
-ACE_INLINE ::IR::StructMemberSeq *&
-IR::StructMemberSeq_out::ptr (void) // ptr
+ACE_INLINE ::IR_StructMemberSeq *&
+IR_StructMemberSeq_out::ptr (void) // ptr
 {
   return this->ptr_;
 }
 
-ACE_INLINE ::IR::StructMemberSeq *
-IR::StructMemberSeq_out::operator-> (void)
+ACE_INLINE ::IR_StructMemberSeq *
+IR_StructMemberSeq_out::operator-> (void)
 {
   return this->ptr_;
 }
 
-ACE_INLINE IR::StructMember &
-IR::StructMemberSeq_out::operator[] (CORBA::ULong index)
+ACE_INLINE IR_StructMember &
+IR_StructMemberSeq_out::operator[] (CORBA::ULong index)
 {
   return this->ptr_->operator[] (index);
 }
 
-
-#endif /* end #if !defined */
-
 // *************************************************************
-// Inline operations for class IR::Initializer_var
+// Inline operations for class IR_Initializer_var
 // *************************************************************
 
 ACE_INLINE
-IR::Initializer_var::Initializer_var (void) // default constructor
+IR_Initializer_var::IR_Initializer_var (void) // default constructor
   : ptr_ (0)
 {}
 
 ACE_INLINE
-IR::Initializer_var::Initializer_var (Initializer *p)
+IR_Initializer_var::IR_Initializer_var (IR_Initializer *p)
   : ptr_ (p)
 {}
 
 ACE_INLINE
-IR::Initializer_var::Initializer_var (const ::IR::Initializer_var &p) // copy constructor
+IR_Initializer_var::IR_Initializer_var (const ::IR_Initializer_var &p) // copy constructor
 {
   if (p.ptr_)
-    ACE_NEW (this->ptr_, ::IR::Initializer (*p.ptr_));
+    ACE_NEW (this->ptr_, ::IR_Initializer (*p.ptr_));
   else
     this->ptr_ = 0;
 }
 
 ACE_INLINE
-IR::Initializer_var::~Initializer_var (void) // destructor
+IR_Initializer_var::~IR_Initializer_var (void) // destructor
 {
   delete this->ptr_;
 }
 
-ACE_INLINE IR::Initializer_var &
-IR::Initializer_var::operator= (Initializer *p)
+ACE_INLINE IR_Initializer_var &
+IR_Initializer_var::operator= (IR_Initializer *p)
 {
   delete this->ptr_;
   this->ptr_ = p;
   return *this;
 }
 
-ACE_INLINE ::IR::Initializer_var &
-IR::Initializer_var::operator= (const ::IR::Initializer_var &p)
+ACE_INLINE ::IR_Initializer_var &
+IR_Initializer_var::operator= (const ::IR_Initializer_var &p)
 {
   if (this != &p)
     {
@@ -10339,12 +9593,12 @@
         }
       else
         {
-          Initializer *deep_copy =
-            new Initializer (*p.ptr_);
+          IR_Initializer *deep_copy = 
+            new IR_Initializer (*p.ptr_);
           
           if (deep_copy != 0)
             {
-              Initializer *tmp = deep_copy;
+              IR_Initializer *tmp = deep_copy;
               deep_copy = this->ptr_;
               this->ptr_ = tmp;
               delete deep_copy;
@@ -10355,91 +9609,91 @@
   return *this;
 }
 
-ACE_INLINE const ::IR::Initializer *
-IR::Initializer_var::operator-> (void) const
+ACE_INLINE const ::IR_Initializer *
+IR_Initializer_var::operator-> (void) const
 {
   return this->ptr_;
 }
 
-ACE_INLINE ::IR::Initializer *
-IR::Initializer_var::operator-> (void)
+ACE_INLINE ::IR_Initializer *
+IR_Initializer_var::operator-> (void)
 {
   return this->ptr_;
 }
 
 ACE_INLINE
-IR::Initializer_var::operator const ::IR::Initializer &() const // cast
+IR_Initializer_var::operator const ::IR_Initializer &() const // cast
 {
   return *this->ptr_;
 }
 
 ACE_INLINE
-IR::Initializer_var::operator ::IR::Initializer &() // cast 
+IR_Initializer_var::operator ::IR_Initializer &() // cast 
 {
   return *this->ptr_;
 }
 
 ACE_INLINE
-IR::Initializer_var::operator ::IR::Initializer &() const // cast 
+IR_Initializer_var::operator ::IR_Initializer &() const // cast 
 {
   return *this->ptr_;
 }
 
 // variable-size types only
 ACE_INLINE
-IR::Initializer_var::operator ::IR::Initializer *&() // cast 
+IR_Initializer_var::operator ::IR_Initializer *&() // cast 
 {
   return this->ptr_;
 }
 
-ACE_INLINE const ::IR::Initializer &
-IR::Initializer_var::in (void) const
+ACE_INLINE const ::IR_Initializer &
+IR_Initializer_var::in (void) const
 {
   return *this->ptr_;
 }
 
-ACE_INLINE ::IR::Initializer &
-IR::Initializer_var::inout (void)
+ACE_INLINE ::IR_Initializer &
+IR_Initializer_var::inout (void)
 {
   return *this->ptr_;
 }
 
 // mapping for variable size 
-ACE_INLINE ::IR::Initializer *&
-IR::Initializer_var::out (void)
+ACE_INLINE ::IR_Initializer *&
+IR_Initializer_var::out (void)
 {
   delete this->ptr_;
   this->ptr_ = 0;
   return this->ptr_;
 }
 
-ACE_INLINE ::IR::Initializer *
-IR::Initializer_var::_retn (void)
+ACE_INLINE ::IR_Initializer *
+IR_Initializer_var::_retn (void)
 {
-  ::IR::Initializer *tmp = this->ptr_;
+  ::IR_Initializer *tmp = this->ptr_;
   this->ptr_ = 0;
   return tmp;
 }
 
-ACE_INLINE ::IR::Initializer *
-IR::Initializer_var::ptr (void) const
+ACE_INLINE ::IR_Initializer *
+IR_Initializer_var::ptr (void) const
 {
   return this->ptr_;
 }
 
 // *************************************************************
-// Inline operations for class IR::Initializer_out
+// Inline operations for class IR_Initializer_out
 // *************************************************************
 
 ACE_INLINE
-IR::Initializer_out::Initializer_out (::IR::Initializer *&p)
+IR_Initializer_out::IR_Initializer_out (::IR_Initializer *&p)
   : ptr_ (p)
 {
   this->ptr_ = 0;
 }
 
 ACE_INLINE
-IR::Initializer_out::Initializer_out (Initializer_var &p) // constructor from _var
+IR_Initializer_out::IR_Initializer_out (IR_Initializer_var &p) // constructor from _var
   : ptr_ (p.out ())
 {
   delete this->ptr_;
@@ -10447,93 +9701,89 @@
 }
 
 ACE_INLINE
-IR::Initializer_out::Initializer_out (const ::IR::Initializer_out &p) // copy constructor
-  : ptr_ (ACE_const_cast (Initializer_out&, p).ptr_)
+IR_Initializer_out::IR_Initializer_out (const ::IR_Initializer_out &p) // copy constructor
+  : ptr_ (ACE_const_cast (IR_Initializer_out&, p).ptr_)
 {}
 
-ACE_INLINE IR::Initializer_out &
-IR::Initializer_out::operator= (const ::IR::Initializer_out &p)
+ACE_INLINE IR_Initializer_out &
+IR_Initializer_out::operator= (const ::IR_Initializer_out &p)
 {
-  this->ptr_ = ACE_const_cast (Initializer_out&, p).ptr_;
+  this->ptr_ = ACE_const_cast (IR_Initializer_out&, p).ptr_;
   return *this;
 }
 
-ACE_INLINE IR::Initializer_out &
-IR::Initializer_out::operator= (Initializer *p)
+ACE_INLINE IR_Initializer_out &
+IR_Initializer_out::operator= (IR_Initializer *p)
 {
   this->ptr_ = p;
   return *this;
 }
 
 ACE_INLINE 
-IR::Initializer_out::operator ::IR::Initializer *&() // cast
+IR_Initializer_out::operator ::IR_Initializer *&() // cast
 {
   return this->ptr_;
 }
 
-ACE_INLINE ::IR::Initializer *&
-IR::Initializer_out::ptr (void) // ptr
+ACE_INLINE ::IR_Initializer *&
+IR_Initializer_out::ptr (void) // ptr
 {
   return this->ptr_;
 }
 
-ACE_INLINE ::IR::Initializer *
-IR::Initializer_out::operator-> (void)
+ACE_INLINE ::IR_Initializer *
+IR_Initializer_out::operator-> (void)
 {
   return this->ptr_;
 }
 
-
 #if !defined (TAO_USE_SEQUENCE_TEMPLATES)
   
-#if !defined (__TAO_UNBOUNDED_SEQUENCE_IR_INITIALIZERSEQ_CI_)
-#define __TAO_UNBOUNDED_SEQUENCE_IR_INITIALIZERSEQ_CI_
-
   // = Static operations.
-  ACE_INLINE IR::Initializer *
-  IR::_TAO_Unbounded_Sequence_IR_InitializerSeq::allocbuf (CORBA::ULong size)
+  ACE_INLINE IR_Initializer *
+  _TAO_Unbounded_Sequence_IR_InitializerSeq::allocbuf (CORBA::ULong size)
   // Allocate storage for the sequence.
   {
-    IR::Initializer *retval = 0;
-    ACE_NEW_RETURN (retval, IR::Initializer[size], 0);
+    IR_Initializer *retval = 0;
+    ACE_NEW_RETURN (retval, IR_Initializer[size], 0);
     return retval;
   }
   
-  ACE_INLINE void IR::_TAO_Unbounded_Sequence_IR_InitializerSeq::freebuf (IR::Initializer *buffer)
+  ACE_INLINE void _TAO_Unbounded_Sequence_IR_InitializerSeq::freebuf (IR_Initializer *buffer)
   // Free the sequence.
   {
     delete [] buffer;
   }
   
   ACE_INLINE
-  IR::_TAO_Unbounded_Sequence_IR_InitializerSeq::_TAO_Unbounded_Sequence_IR_InitializerSeq (void) // Default constructor.
+  _TAO_Unbounded_Sequence_IR_InitializerSeq::_TAO_Unbounded_Sequence_IR_InitializerSeq (void) // Default constructor.
   {
   }
   
   ACE_INLINE
-  IR::_TAO_Unbounded_Sequence_IR_InitializerSeq::_TAO_Unbounded_Sequence_IR_InitializerSeq (CORBA::ULong maximum) // Constructor using a maximum length value.
+  _TAO_Unbounded_Sequence_IR_InitializerSeq::_TAO_Unbounded_Sequence_IR_InitializerSeq (CORBA::ULong maximum) // Constructor using a maximum length value.
     : TAO_Unbounded_Base_Sequence (maximum, _TAO_Unbounded_Sequence_IR_InitializerSeq::allocbuf (maximum))
   {
   }
   
   ACE_INLINE
-  IR::_TAO_Unbounded_Sequence_IR_InitializerSeq::_TAO_Unbounded_Sequence_IR_InitializerSeq (CORBA::ULong maximum,
+  _TAO_Unbounded_Sequence_IR_InitializerSeq::_TAO_Unbounded_Sequence_IR_InitializerSeq (CORBA::ULong maximum,
     CORBA::ULong length,
-    IR::Initializer *data,
+    IR_Initializer *data,
     CORBA::Boolean release)
   : TAO_Unbounded_Base_Sequence (maximum, length, data, release)
   {
   }
   
   ACE_INLINE
-  IR::_TAO_Unbounded_Sequence_IR_InitializerSeq::_TAO_Unbounded_Sequence_IR_InitializerSeq (const _TAO_Unbounded_Sequence_IR_InitializerSeq &rhs)
+  _TAO_Unbounded_Sequence_IR_InitializerSeq::_TAO_Unbounded_Sequence_IR_InitializerSeq (const _TAO_Unbounded_Sequence_IR_InitializerSeq &rhs)
   // Copy constructor.
     : TAO_Unbounded_Base_Sequence (rhs)
   {
     if (rhs.buffer_ != 0)
     {
-      IR::Initializer *tmp1 = _TAO_Unbounded_Sequence_IR_InitializerSeq::allocbuf (this->maximum_);
-      IR::Initializer * const tmp2 = ACE_reinterpret_cast (IR::Initializer * ACE_CAST_CONST, rhs.buffer_);
+      IR_Initializer *tmp1 = _TAO_Unbounded_Sequence_IR_InitializerSeq::allocbuf (this->maximum_);
+      IR_Initializer * const tmp2 = ACE_reinterpret_cast (IR_Initializer * ACE_CAST_CONST, rhs.buffer_);
       
       for (CORBA::ULong i = 0; i < this->length_; ++i)
         tmp1[i] = tmp2[i];
@@ -10546,8 +9796,8 @@
     }
   }
   
-  ACE_INLINE IR::_TAO_Unbounded_Sequence_IR_InitializerSeq &
-  IR::_TAO_Unbounded_Sequence_IR_InitializerSeq::operator= (const _TAO_Unbounded_Sequence_IR_InitializerSeq &rhs)
+  ACE_INLINE _TAO_Unbounded_Sequence_IR_InitializerSeq &
+  _TAO_Unbounded_Sequence_IR_InitializerSeq::operator= (const _TAO_Unbounded_Sequence_IR_InitializerSeq &rhs)
   // Assignment operator.
   {
     if (this == &rhs)
@@ -10558,7 +9808,7 @@
       if (this->maximum_ < rhs.maximum_)
       {
         // free the old buffer
-        IR::Initializer *tmp = ACE_reinterpret_cast (IR::Initializer *, this->buffer_);
+        IR_Initializer *tmp = ACE_reinterpret_cast (IR_Initializer *, this->buffer_);
         _TAO_Unbounded_Sequence_IR_InitializerSeq::freebuf (tmp);
         this->buffer_ = _TAO_Unbounded_Sequence_IR_InitializerSeq::allocbuf (rhs.maximum_);
       }
@@ -10568,8 +9818,8 @@
     
     TAO_Unbounded_Base_Sequence::operator= (rhs);
     
-    IR::Initializer *tmp1 = ACE_reinterpret_cast (IR::Initializer *, this->buffer_);
-    IR::Initializer * const tmp2 = ACE_reinterpret_cast (IR::Initializer * ACE_CAST_CONST, rhs.buffer_);
+    IR_Initializer *tmp1 = ACE_reinterpret_cast (IR_Initializer *, this->buffer_);
+    IR_Initializer * const tmp2 = ACE_reinterpret_cast (IR_Initializer * ACE_CAST_CONST, rhs.buffer_);
     
     for (CORBA::ULong i = 0; i < this->length_; ++i)
       tmp1[i] = tmp2[i];
@@ -10578,30 +9828,30 @@
   }
   
   // = Accessors.
-  ACE_INLINE IR::Initializer &
-  IR::_TAO_Unbounded_Sequence_IR_InitializerSeq::operator[] (CORBA::ULong i)
+  ACE_INLINE IR_Initializer &
+  _TAO_Unbounded_Sequence_IR_InitializerSeq::operator[] (CORBA::ULong i)
   // operator []
   {
     ACE_ASSERT (i < this->maximum_);
-    IR::Initializer* tmp = ACE_reinterpret_cast(IR::Initializer*,this->buffer_);
+    IR_Initializer* tmp = ACE_reinterpret_cast(IR_Initializer*,this->buffer_);
     return tmp[i];
   }
   
-  ACE_INLINE const IR::Initializer &
-  IR::_TAO_Unbounded_Sequence_IR_InitializerSeq::operator[] (CORBA::ULong i) const
+  ACE_INLINE const IR_Initializer &
+  _TAO_Unbounded_Sequence_IR_InitializerSeq::operator[] (CORBA::ULong i) const
   // operator []
   {
     ACE_ASSERT (i < this->maximum_);
-    IR::Initializer * const tmp = ACE_reinterpret_cast (IR::Initializer* ACE_CAST_CONST, this->buffer_);
+    IR_Initializer * const tmp = ACE_reinterpret_cast (IR_Initializer* ACE_CAST_CONST, this->buffer_);
     return tmp[i];
   }
   
   // Implement the TAO_Base_Sequence methods (see Sequence.h)
   
-  ACE_INLINE IR::Initializer *
-  IR::_TAO_Unbounded_Sequence_IR_InitializerSeq::get_buffer (CORBA::Boolean orphan)
+  ACE_INLINE IR_Initializer *
+  _TAO_Unbounded_Sequence_IR_InitializerSeq::get_buffer (CORBA::Boolean orphan)
   {
-    IR::Initializer *result = 0;
+    IR_Initializer *result = 0;
     if (orphan == 0)
     {
       // We retain ownership.
@@ -10613,7 +9863,7 @@
       }
       else
       {
-        result = ACE_reinterpret_cast (IR::Initializer*, this->buffer_);
+        result = ACE_reinterpret_cast (IR_Initializer*, this->buffer_);
       }
     }
     else // if (orphan == 1)
@@ -10622,7 +9872,7 @@
       {
         // We set the state back to default and relinquish
         // ownership.
-        result = ACE_reinterpret_cast(IR::Initializer*,this->buffer_);
+        result = ACE_reinterpret_cast(IR_Initializer*,this->buffer_);
         this->maximum_ = 0;
         this->length_ = 0;
         this->buffer_ = 0;
@@ -10632,76 +9882,70 @@
     return result;
   }
   
-  ACE_INLINE const IR::Initializer *
-  IR::_TAO_Unbounded_Sequence_IR_InitializerSeq::get_buffer (void) const
+  ACE_INLINE const IR_Initializer *
+  _TAO_Unbounded_Sequence_IR_InitializerSeq::get_buffer (void) const
   {
-    return ACE_reinterpret_cast(const IR::Initializer * ACE_CAST_CONST, this->buffer_);
+    return ACE_reinterpret_cast(const IR_Initializer * ACE_CAST_CONST, this->buffer_);
   }
   
   ACE_INLINE void
-  IR::_TAO_Unbounded_Sequence_IR_InitializerSeq::replace (CORBA::ULong max,
+  _TAO_Unbounded_Sequence_IR_InitializerSeq::replace (CORBA::ULong max,
   CORBA::ULong length,
-  IR::Initializer *data,
+  IR_Initializer *data,
   CORBA::Boolean release)
   {
     this->maximum_ = max;
     this->length_ = length;
     if (this->buffer_ && this->release_ == 1)
     {
-      IR::Initializer *tmp = ACE_reinterpret_cast(IR::Initializer*,this->buffer_);
+      IR_Initializer *tmp = ACE_reinterpret_cast(IR_Initializer*,this->buffer_);
       _TAO_Unbounded_Sequence_IR_InitializerSeq::freebuf (tmp);
     }
     this->buffer_ = data;
     this->release_ = release;
   }
   
-#endif /* end #if !defined */
-
-
 #endif /* !TAO_USE_SEQUENCE_TEMPLATES */ 
 
-#if !defined (_IR_INITIALIZERSEQ_CI_)
-#define _IR_INITIALIZERSEQ_CI_
-
 // *************************************************************
-// Inline operations for class IR::InitializerSeq_var
+// Inline operations for class IR_InitializerSeq_var
 // *************************************************************
 
 ACE_INLINE
-IR::InitializerSeq_var::InitializerSeq_var (void) // default constructor
+IR_InitializerSeq_var::IR_InitializerSeq_var (void) // default constructor
   : ptr_ (0)
 {}
 
 ACE_INLINE
-IR::InitializerSeq_var::InitializerSeq_var (InitializerSeq *p)
+IR_InitializerSeq_var::IR_InitializerSeq_var (IR_InitializerSeq *p)
   : ptr_ (p)
 {}
 
 ACE_INLINE
-IR::InitializerSeq_var::InitializerSeq_var (const ::IR::InitializerSeq_var &p) // copy constructor
+IR_InitializerSeq_var::IR_InitializerSeq_var (const ::IR_InitializerSeq_var &p) // copy constructor
 {
   if (p.ptr_)
-    ACE_NEW (this->ptr_, ::IR::InitializerSeq (*p.ptr_));
+    ACE_NEW (this->ptr_, ::IR_InitializerSeq (*p.ptr_));
   else
     this->ptr_ = 0;
 }
 
 ACE_INLINE
-IR::InitializerSeq_var::~InitializerSeq_var (void) // destructor
+IR_InitializerSeq_var::~IR_InitializerSeq_var (void) // destructor
 {
   delete this->ptr_;
 }
 
-ACE_INLINE IR::InitializerSeq_var &
-IR::InitializerSeq_var::operator= (InitializerSeq *p)
+ACE_INLINE IR_InitializerSeq_var &
+IR_InitializerSeq_var::operator= (IR_InitializerSeq *p)
 {
   delete this->ptr_;
   this->ptr_ = p;
   return *this;
 }
 
-ACE_INLINE ::IR::InitializerSeq_var &
-IR::InitializerSeq_var::operator= (const ::IR::InitializerSeq_var &p)
+ACE_INLINE IR_InitializerSeq_var &
+IR_InitializerSeq_var::operator= (const ::IR_InitializerSeq_var &p) // deep copy
 {
   if (this != &p)
     {
@@ -10712,12 +9956,12 @@
         }
       else
         {
-          InitializerSeq *deep_copy =
-            new InitializerSeq (*p.ptr_);
+          IR_InitializerSeq *deep_copy = 
+            new IR_InitializerSeq (*p.ptr_);
           
           if (deep_copy != 0)
             {
-              InitializerSeq *tmp = deep_copy;
+              IR_InitializerSeq *tmp = deep_copy;
               deep_copy = this->ptr_;
               this->ptr_ = tmp;
               delete deep_copy;
@@ -10728,103 +9972,103 @@
   return *this;
 }
 
-ACE_INLINE const ::IR::InitializerSeq *
-IR::InitializerSeq_var::operator-> (void) const
+ACE_INLINE const ::IR_InitializerSeq *
+IR_InitializerSeq_var::operator-> (void) const
 {
   return this->ptr_;
 }
 
-ACE_INLINE ::IR::InitializerSeq *
-IR::InitializerSeq_var::operator-> (void)
+ACE_INLINE ::IR_InitializerSeq *
+IR_InitializerSeq_var::operator-> (void)
 {
   return this->ptr_;
 }
 
 ACE_INLINE 
-IR::InitializerSeq_var::operator const ::IR::InitializerSeq &() const // cast
+IR_InitializerSeq_var::operator const ::IR_InitializerSeq &() const // cast
 {
   return *this->ptr_;
 }
 
 ACE_INLINE 
-IR::InitializerSeq_var::operator ::IR::InitializerSeq &() // cast 
+IR_InitializerSeq_var::operator ::IR_InitializerSeq &() // cast 
 {
   return *this->ptr_;
 }
 
 ACE_INLINE 
-IR::InitializerSeq_var::operator ::IR::InitializerSeq &() const // cast 
+IR_InitializerSeq_var::operator ::IR_InitializerSeq &() const // cast 
 {
   return *this->ptr_;
 }
 
 // variable-size types only
 ACE_INLINE
-IR::InitializerSeq_var::operator ::IR::InitializerSeq *&() // cast 
+IR_InitializerSeq_var::operator ::IR_InitializerSeq *&() // cast 
 {
   return this->ptr_;
 }
 
-ACE_INLINE IR::Initializer &
-IR::InitializerSeq_var::operator[] (CORBA::ULong index)
+ACE_INLINE IR_Initializer &
+IR_InitializerSeq_var::operator[] (CORBA::ULong index)
 {
   return this->ptr_->operator[] (index);
 }
 
-ACE_INLINE const IR::Initializer &
-IR::InitializerSeq_var::operator[] (CORBA::ULong index) const
+ACE_INLINE const IR_Initializer &
+IR_InitializerSeq_var::operator[] (CORBA::ULong index) const
 {
-  return ACE_const_cast (const IR::Initializer &, this->ptr_->operator[] (index));
+  return ACE_const_cast (const IR_Initializer &, this->ptr_->operator[] (index));
 }
 
-ACE_INLINE const ::IR::InitializerSeq &
-IR::InitializerSeq_var::in (void) const
+ACE_INLINE const ::IR_InitializerSeq &
+IR_InitializerSeq_var::in (void) const
 {
   return *this->ptr_;
 }
 
-ACE_INLINE ::IR::InitializerSeq &
-IR::InitializerSeq_var::inout (void)
+ACE_INLINE ::IR_InitializerSeq &
+IR_InitializerSeq_var::inout (void)
 {
   return *this->ptr_;
 }
 
 // mapping for variable size 
-ACE_INLINE ::IR::InitializerSeq *&
-IR::InitializerSeq_var::out (void)
+ACE_INLINE ::IR_InitializerSeq *&
+IR_InitializerSeq_var::out (void)
 {
   delete this->ptr_;
   this->ptr_ = 0;
   return this->ptr_;
 }
 
-ACE_INLINE ::IR::InitializerSeq *
-IR::InitializerSeq_var::_retn (void)
+ACE_INLINE ::IR_InitializerSeq *
+IR_InitializerSeq_var::_retn (void)
 {
-  ::IR::InitializerSeq *tmp = this->ptr_;
+  ::IR_InitializerSeq *tmp = this->ptr_;
   this->ptr_ = 0;
   return tmp;
 }
 
-ACE_INLINE ::IR::InitializerSeq *
-IR::InitializerSeq_var::ptr (void) const
+ACE_INLINE ::IR_InitializerSeq *
+IR_InitializerSeq_var::ptr (void) const
 {
   return this->ptr_;
 }
 
 // *************************************************************
-// Inline operations for class IR::InitializerSeq_out
+// Inline operations for class IR_InitializerSeq_out
 // *************************************************************
 
 ACE_INLINE
-IR::InitializerSeq_out::InitializerSeq_out (InitializerSeq *&p)
+IR_InitializerSeq_out::IR_InitializerSeq_out (IR_InitializerSeq *&p)
   : ptr_ (p)
 {
   this->ptr_ = 0;
 }
 
 ACE_INLINE
-IR::InitializerSeq_out::InitializerSeq_out (InitializerSeq_var &p) // constructor from _var
+IR_InitializerSeq_out::IR_InitializerSeq_out (IR_InitializerSeq_var &p) // constructor from _var
   : ptr_ (p.out ())
 {
   delete this->ptr_;
@@ -10832,90 +10076,87 @@
 }
 
 ACE_INLINE
-IR::InitializerSeq_out::InitializerSeq_out (const ::IR::InitializerSeq_out &p) // copy constructor
-  : ptr_ (ACE_const_cast (InitializerSeq_out&, p).ptr_)
+IR_InitializerSeq_out::IR_InitializerSeq_out (const ::IR_InitializerSeq_out &p) // copy constructor
+  : ptr_ (ACE_const_cast (IR_InitializerSeq_out&, p).ptr_)
 {}
 
-ACE_INLINE ::IR::InitializerSeq_out &
-IR::InitializerSeq_out::operator= (const ::IR::InitializerSeq_out &p)
+ACE_INLINE ::IR_InitializerSeq_out &
+IR_InitializerSeq_out::operator= (const ::IR_InitializerSeq_out &p)
 {
-  this->ptr_ = ACE_const_cast (InitializerSeq_out&, p).ptr_;
+  this->ptr_ = ACE_const_cast (IR_InitializerSeq_out&, p).ptr_;
   return *this;
 }
 
-ACE_INLINE ::IR::InitializerSeq_out &
-IR::InitializerSeq_out::operator= (InitializerSeq *p)
+ACE_INLINE ::IR_InitializerSeq_out &
+IR_InitializerSeq_out::operator= (IR_InitializerSeq *p)
 {
   this->ptr_ = p;
   return *this;
 }
 
 ACE_INLINE 
-IR::InitializerSeq_out::operator ::IR::InitializerSeq *&() // cast
+IR_InitializerSeq_out::operator ::IR_InitializerSeq *&() // cast
 {
   return this->ptr_;
 }
 
-ACE_INLINE ::IR::InitializerSeq *&
-IR::InitializerSeq_out::ptr (void) // ptr
+ACE_INLINE ::IR_InitializerSeq *&
+IR_InitializerSeq_out::ptr (void) // ptr
 {
   return this->ptr_;
 }
 
-ACE_INLINE ::IR::InitializerSeq *
-IR::InitializerSeq_out::operator-> (void)
+ACE_INLINE ::IR_InitializerSeq *
+IR_InitializerSeq_out::operator-> (void)
 {
   return this->ptr_;
 }
 
-ACE_INLINE IR::Initializer &
-IR::InitializerSeq_out::operator[] (CORBA::ULong index)
+ACE_INLINE IR_Initializer &
+IR_InitializerSeq_out::operator[] (CORBA::ULong index)
 {
   return this->ptr_->operator[] (index);
 }
 
-
-#endif /* end #if !defined */
-
 // *************************************************************
-// Inline operations for class IR::UnionMember_var
+// Inline operations for class IR_UnionMember_var
 // *************************************************************
 
 ACE_INLINE
-IR::UnionMember_var::UnionMember_var (void) // default constructor
+IR_UnionMember_var::IR_UnionMember_var (void) // default constructor
   : ptr_ (0)
 {}
 
 ACE_INLINE
-IR::UnionMember_var::UnionMember_var (UnionMember *p)
+IR_UnionMember_var::IR_UnionMember_var (IR_UnionMember *p)
   : ptr_ (p)
 {}
 
 ACE_INLINE
-IR::UnionMember_var::UnionMember_var (const ::IR::UnionMember_var &p) // copy constructor
+IR_UnionMember_var::IR_UnionMember_var (const ::IR_UnionMember_var &p) // copy constructor
 {
   if (p.ptr_)
-    ACE_NEW (this->ptr_, ::IR::UnionMember (*p.ptr_));
+    ACE_NEW (this->ptr_, ::IR_UnionMember (*p.ptr_));
   else
     this->ptr_ = 0;
 }
 
 ACE_INLINE
-IR::UnionMember_var::~UnionMember_var (void) // destructor
+IR_UnionMember_var::~IR_UnionMember_var (void) // destructor
 {
   delete this->ptr_;
 }
 
-ACE_INLINE IR::UnionMember_var &
-IR::UnionMember_var::operator= (UnionMember *p)
+ACE_INLINE IR_UnionMember_var &
+IR_UnionMember_var::operator= (IR_UnionMember *p)
 {
   delete this->ptr_;
   this->ptr_ = p;
   return *this;
 }
 
-ACE_INLINE ::IR::UnionMember_var &
-IR::UnionMember_var::operator= (const ::IR::UnionMember_var &p)
+ACE_INLINE ::IR_UnionMember_var &
+IR_UnionMember_var::operator= (const ::IR_UnionMember_var &p)
 {
   if (this != &p)
     {
@@ -10926,12 +10167,12 @@
         }
       else
         {
-          UnionMember *deep_copy =
-            new UnionMember (*p.ptr_);
+          IR_UnionMember *deep_copy = 
+            new IR_UnionMember (*p.ptr_);
           
           if (deep_copy != 0)
             {
-              UnionMember *tmp = deep_copy;
+              IR_UnionMember *tmp = deep_copy;
               deep_copy = this->ptr_;
               this->ptr_ = tmp;
               delete deep_copy;
@@ -10942,91 +10183,91 @@
   return *this;
 }
 
-ACE_INLINE const ::IR::UnionMember *
-IR::UnionMember_var::operator-> (void) const
+ACE_INLINE const ::IR_UnionMember *
+IR_UnionMember_var::operator-> (void) const
 {
   return this->ptr_;
 }
 
-ACE_INLINE ::IR::UnionMember *
-IR::UnionMember_var::operator-> (void)
+ACE_INLINE ::IR_UnionMember *
+IR_UnionMember_var::operator-> (void)
 {
   return this->ptr_;
 }
 
 ACE_INLINE
-IR::UnionMember_var::operator const ::IR::UnionMember &() const // cast
+IR_UnionMember_var::operator const ::IR_UnionMember &() const // cast
 {
   return *this->ptr_;
 }
 
 ACE_INLINE
-IR::UnionMember_var::operator ::IR::UnionMember &() // cast 
+IR_UnionMember_var::operator ::IR_UnionMember &() // cast 
 {
   return *this->ptr_;
 }
 
 ACE_INLINE
-IR::UnionMember_var::operator ::IR::UnionMember &() const // cast 
+IR_UnionMember_var::operator ::IR_UnionMember &() const // cast 
 {
   return *this->ptr_;
 }
 
 // variable-size types only
 ACE_INLINE
-IR::UnionMember_var::operator ::IR::UnionMember *&() // cast 
+IR_UnionMember_var::operator ::IR_UnionMember *&() // cast 
 {
   return this->ptr_;
 }
 
-ACE_INLINE const ::IR::UnionMember &
-IR::UnionMember_var::in (void) const
+ACE_INLINE const ::IR_UnionMember &
+IR_UnionMember_var::in (void) const
 {
   return *this->ptr_;
 }
 
-ACE_INLINE ::IR::UnionMember &
-IR::UnionMember_var::inout (void)
+ACE_INLINE ::IR_UnionMember &
+IR_UnionMember_var::inout (void)
 {
   return *this->ptr_;
 }
 
 // mapping for variable size 
-ACE_INLINE ::IR::UnionMember *&
-IR::UnionMember_var::out (void)
+ACE_INLINE ::IR_UnionMember *&
+IR_UnionMember_var::out (void)
 {
   delete this->ptr_;
   this->ptr_ = 0;
   return this->ptr_;
 }
 
-ACE_INLINE ::IR::UnionMember *
-IR::UnionMember_var::_retn (void)
+ACE_INLINE ::IR_UnionMember *
+IR_UnionMember_var::_retn (void)
 {
-  ::IR::UnionMember *tmp = this->ptr_;
+  ::IR_UnionMember *tmp = this->ptr_;
   this->ptr_ = 0;
   return tmp;
 }
 
-ACE_INLINE ::IR::UnionMember *
-IR::UnionMember_var::ptr (void) const
+ACE_INLINE ::IR_UnionMember *
+IR_UnionMember_var::ptr (void) const
 {
   return this->ptr_;
 }
 
 // *************************************************************
-// Inline operations for class IR::UnionMember_out
+// Inline operations for class IR_UnionMember_out
 // *************************************************************
 
 ACE_INLINE
-IR::UnionMember_out::UnionMember_out (::IR::UnionMember *&p)
+IR_UnionMember_out::IR_UnionMember_out (::IR_UnionMember *&p)
   : ptr_ (p)
 {
   this->ptr_ = 0;
 }
 
 ACE_INLINE
-IR::UnionMember_out::UnionMember_out (UnionMember_var &p) // constructor from _var
+IR_UnionMember_out::IR_UnionMember_out (IR_UnionMember_var &p) // constructor from _var
   : ptr_ (p.out ())
 {
   delete this->ptr_;
@@ -11034,93 +10275,89 @@
 }
 
 ACE_INLINE
-IR::UnionMember_out::UnionMember_out (const ::IR::UnionMember_out &p) // copy constructor
-  : ptr_ (ACE_const_cast (UnionMember_out&, p).ptr_)
+IR_UnionMember_out::IR_UnionMember_out (const ::IR_UnionMember_out &p) // copy constructor
+  : ptr_ (ACE_const_cast (IR_UnionMember_out&, p).ptr_)
 {}
 
-ACE_INLINE IR::UnionMember_out &
-IR::UnionMember_out::operator= (const ::IR::UnionMember_out &p)
+ACE_INLINE IR_UnionMember_out &
+IR_UnionMember_out::operator= (const ::IR_UnionMember_out &p)
 {
-  this->ptr_ = ACE_const_cast (UnionMember_out&, p).ptr_;
+  this->ptr_ = ACE_const_cast (IR_UnionMember_out&, p).ptr_;
   return *this;
 }
 
-ACE_INLINE IR::UnionMember_out &
-IR::UnionMember_out::operator= (UnionMember *p)
+ACE_INLINE IR_UnionMember_out &
+IR_UnionMember_out::operator= (IR_UnionMember *p)
 {
   this->ptr_ = p;
   return *this;
 }
 
 ACE_INLINE 
-IR::UnionMember_out::operator ::IR::UnionMember *&() // cast
+IR_UnionMember_out::operator ::IR_UnionMember *&() // cast
 {
   return this->ptr_;
 }
 
-ACE_INLINE ::IR::UnionMember *&
-IR::UnionMember_out::ptr (void) // ptr
+ACE_INLINE ::IR_UnionMember *&
+IR_UnionMember_out::ptr (void) // ptr
 {
   return this->ptr_;
 }
 
-ACE_INLINE ::IR::UnionMember *
-IR::UnionMember_out::operator-> (void)
+ACE_INLINE ::IR_UnionMember *
+IR_UnionMember_out::operator-> (void)
 {
   return this->ptr_;
 }
 
-
 #if !defined (TAO_USE_SEQUENCE_TEMPLATES)
   
-#if !defined (__TAO_UNBOUNDED_SEQUENCE_IR_UNIONMEMBERSEQ_CI_)
-#define __TAO_UNBOUNDED_SEQUENCE_IR_UNIONMEMBERSEQ_CI_
-
   // = Static operations.
-  ACE_INLINE IR::UnionMember *
-  IR::_TAO_Unbounded_Sequence_IR_UnionMemberSeq::allocbuf (CORBA::ULong size)
+  ACE_INLINE IR_UnionMember *
+  _TAO_Unbounded_Sequence_IR_UnionMemberSeq::allocbuf (CORBA::ULong size)
   // Allocate storage for the sequence.
   {
-    IR::UnionMember *retval = 0;
-    ACE_NEW_RETURN (retval, IR::UnionMember[size], 0);
+    IR_UnionMember *retval = 0;
+    ACE_NEW_RETURN (retval, IR_UnionMember[size], 0);
     return retval;
   }
   
-  ACE_INLINE void IR::_TAO_Unbounded_Sequence_IR_UnionMemberSeq::freebuf (IR::UnionMember *buffer)
+  ACE_INLINE void _TAO_Unbounded_Sequence_IR_UnionMemberSeq::freebuf (IR_UnionMember *buffer)
   // Free the sequence.
   {
     delete [] buffer;
   }
   
   ACE_INLINE
-  IR::_TAO_Unbounded_Sequence_IR_UnionMemberSeq::_TAO_Unbounded_Sequence_IR_UnionMemberSeq (void) // Default constructor.
+  _TAO_Unbounded_Sequence_IR_UnionMemberSeq::_TAO_Unbounded_Sequence_IR_UnionMemberSeq (void) // Default constructor.
   {
   }
   
   ACE_INLINE
-  IR::_TAO_Unbounded_Sequence_IR_UnionMemberSeq::_TAO_Unbounded_Sequence_IR_UnionMemberSeq (CORBA::ULong maximum) // Constructor using a maximum length value.
+  _TAO_Unbounded_Sequence_IR_UnionMemberSeq::_TAO_Unbounded_Sequence_IR_UnionMemberSeq (CORBA::ULong maximum) // Constructor using a maximum length value.
     : TAO_Unbounded_Base_Sequence (maximum, _TAO_Unbounded_Sequence_IR_UnionMemberSeq::allocbuf (maximum))
   {
   }
   
   ACE_INLINE
-  IR::_TAO_Unbounded_Sequence_IR_UnionMemberSeq::_TAO_Unbounded_Sequence_IR_UnionMemberSeq (CORBA::ULong maximum,
+  _TAO_Unbounded_Sequence_IR_UnionMemberSeq::_TAO_Unbounded_Sequence_IR_UnionMemberSeq (CORBA::ULong maximum,
     CORBA::ULong length,
-    IR::UnionMember *data,
+    IR_UnionMember *data,
     CORBA::Boolean release)
   : TAO_Unbounded_Base_Sequence (maximum, length, data, release)
   {
   }
   
   ACE_INLINE
-  IR::_TAO_Unbounded_Sequence_IR_UnionMemberSeq::_TAO_Unbounded_Sequence_IR_UnionMemberSeq (const _TAO_Unbounded_Sequence_IR_UnionMemberSeq &rhs)
+  _TAO_Unbounded_Sequence_IR_UnionMemberSeq::_TAO_Unbounded_Sequence_IR_UnionMemberSeq (const _TAO_Unbounded_Sequence_IR_UnionMemberSeq &rhs)
   // Copy constructor.
     : TAO_Unbounded_Base_Sequence (rhs)
   {
     if (rhs.buffer_ != 0)
     {
-      IR::UnionMember *tmp1 = _TAO_Unbounded_Sequence_IR_UnionMemberSeq::allocbuf (this->maximum_);
-      IR::UnionMember * const tmp2 = ACE_reinterpret_cast (IR::UnionMember * ACE_CAST_CONST, rhs.buffer_);
+      IR_UnionMember *tmp1 = _TAO_Unbounded_Sequence_IR_UnionMemberSeq::allocbuf (this->maximum_);
+      IR_UnionMember * const tmp2 = ACE_reinterpret_cast (IR_UnionMember * ACE_CAST_CONST, rhs.buffer_);
       
       for (CORBA::ULong i = 0; i < this->length_; ++i)
         tmp1[i] = tmp2[i];
@@ -11133,8 +10370,8 @@
     }
   }
   
-  ACE_INLINE IR::_TAO_Unbounded_Sequence_IR_UnionMemberSeq &
-  IR::_TAO_Unbounded_Sequence_IR_UnionMemberSeq::operator= (const _TAO_Unbounded_Sequence_IR_UnionMemberSeq &rhs)
+  ACE_INLINE _TAO_Unbounded_Sequence_IR_UnionMemberSeq &
+  _TAO_Unbounded_Sequence_IR_UnionMemberSeq::operator= (const _TAO_Unbounded_Sequence_IR_UnionMemberSeq &rhs)
   // Assignment operator.
   {
     if (this == &rhs)
@@ -11145,7 +10382,7 @@
       if (this->maximum_ < rhs.maximum_)
       {
         // free the old buffer
-        IR::UnionMember *tmp = ACE_reinterpret_cast (IR::UnionMember *, this->buffer_);
+        IR_UnionMember *tmp = ACE_reinterpret_cast (IR_UnionMember *, this->buffer_);
         _TAO_Unbounded_Sequence_IR_UnionMemberSeq::freebuf (tmp);
         this->buffer_ = _TAO_Unbounded_Sequence_IR_UnionMemberSeq::allocbuf (rhs.maximum_);
       }
@@ -11155,8 +10392,8 @@
     
     TAO_Unbounded_Base_Sequence::operator= (rhs);
     
-    IR::UnionMember *tmp1 = ACE_reinterpret_cast (IR::UnionMember *, this->buffer_);
-    IR::UnionMember * const tmp2 = ACE_reinterpret_cast (IR::UnionMember * ACE_CAST_CONST, rhs.buffer_);
+    IR_UnionMember *tmp1 = ACE_reinterpret_cast (IR_UnionMember *, this->buffer_);
+    IR_UnionMember * const tmp2 = ACE_reinterpret_cast (IR_UnionMember * ACE_CAST_CONST, rhs.buffer_);
     
     for (CORBA::ULong i = 0; i < this->length_; ++i)
       tmp1[i] = tmp2[i];
@@ -11165,30 +10402,30 @@
   }
   
   // = Accessors.
-  ACE_INLINE IR::UnionMember &
-  IR::_TAO_Unbounded_Sequence_IR_UnionMemberSeq::operator[] (CORBA::ULong i)
+  ACE_INLINE IR_UnionMember &
+  _TAO_Unbounded_Sequence_IR_UnionMemberSeq::operator[] (CORBA::ULong i)
   // operator []
   {
     ACE_ASSERT (i < this->maximum_);
-    IR::UnionMember* tmp = ACE_reinterpret_cast(IR::UnionMember*,this->buffer_);
+    IR_UnionMember* tmp = ACE_reinterpret_cast(IR_UnionMember*,this->buffer_);
     return tmp[i];
   }
   
-  ACE_INLINE const IR::UnionMember &
-  IR::_TAO_Unbounded_Sequence_IR_UnionMemberSeq::operator[] (CORBA::ULong i) const
+  ACE_INLINE const IR_UnionMember &
+  _TAO_Unbounded_Sequence_IR_UnionMemberSeq::operator[] (CORBA::ULong i) const
   // operator []
   {
     ACE_ASSERT (i < this->maximum_);
-    IR::UnionMember * const tmp = ACE_reinterpret_cast (IR::UnionMember* ACE_CAST_CONST, this->buffer_);
+    IR_UnionMember * const tmp = ACE_reinterpret_cast (IR_UnionMember* ACE_CAST_CONST, this->buffer_);
     return tmp[i];
   }
   
   // Implement the TAO_Base_Sequence methods (see Sequence.h)
   
-  ACE_INLINE IR::UnionMember *
-  IR::_TAO_Unbounded_Sequence_IR_UnionMemberSeq::get_buffer (CORBA::Boolean orphan)
+  ACE_INLINE IR_UnionMember *
+  _TAO_Unbounded_Sequence_IR_UnionMemberSeq::get_buffer (CORBA::Boolean orphan)
   {
-    IR::UnionMember *result = 0;
+    IR_UnionMember *result = 0;
     if (orphan == 0)
     {
       // We retain ownership.
@@ -11200,7 +10437,7 @@
       }
       else
       {
-        result = ACE_reinterpret_cast (IR::UnionMember*, this->buffer_);
+        result = ACE_reinterpret_cast (IR_UnionMember*, this->buffer_);
       }
     }
     else // if (orphan == 1)
@@ -11209,7 +10446,7 @@
       {
         // We set the state back to default and relinquish
         // ownership.
-        result = ACE_reinterpret_cast(IR::UnionMember*,this->buffer_);
+        result = ACE_reinterpret_cast(IR_UnionMember*,this->buffer_);
         this->maximum_ = 0;
         this->length_ = 0;
         this->buffer_ = 0;
@@ -11219,76 +10456,70 @@
     return result;
   }
   
-  ACE_INLINE const IR::UnionMember *
-  IR::_TAO_Unbounded_Sequence_IR_UnionMemberSeq::get_buffer (void) const
+  ACE_INLINE const IR_UnionMember *
+  _TAO_Unbounded_Sequence_IR_UnionMemberSeq::get_buffer (void) const
   {
-    return ACE_reinterpret_cast(const IR::UnionMember * ACE_CAST_CONST, this->buffer_);
+    return ACE_reinterpret_cast(const IR_UnionMember * ACE_CAST_CONST, this->buffer_);
   }
   
   ACE_INLINE void
-  IR::_TAO_Unbounded_Sequence_IR_UnionMemberSeq::replace (CORBA::ULong max,
+  _TAO_Unbounded_Sequence_IR_UnionMemberSeq::replace (CORBA::ULong max,
   CORBA::ULong length,
-  IR::UnionMember *data,
+  IR_UnionMember *data,
   CORBA::Boolean release)
   {
     this->maximum_ = max;
     this->length_ = length;
     if (this->buffer_ && this->release_ == 1)
     {
-      IR::UnionMember *tmp = ACE_reinterpret_cast(IR::UnionMember*,this->buffer_);
+      IR_UnionMember *tmp = ACE_reinterpret_cast(IR_UnionMember*,this->buffer_);
       _TAO_Unbounded_Sequence_IR_UnionMemberSeq::freebuf (tmp);
     }
     this->buffer_ = data;
     this->release_ = release;
   }
   
-#endif /* end #if !defined */
-
-
 #endif /* !TAO_USE_SEQUENCE_TEMPLATES */ 
 
-#if !defined (_IR_UNIONMEMBERSEQ_CI_)
-#define _IR_UNIONMEMBERSEQ_CI_
-
 // *************************************************************
-// Inline operations for class IR::UnionMemberSeq_var
+// Inline operations for class IR_UnionMemberSeq_var
 // *************************************************************
 
 ACE_INLINE
-IR::UnionMemberSeq_var::UnionMemberSeq_var (void) // default constructor
+IR_UnionMemberSeq_var::IR_UnionMemberSeq_var (void) // default constructor
   : ptr_ (0)
 {}
 
 ACE_INLINE
-IR::UnionMemberSeq_var::UnionMemberSeq_var (UnionMemberSeq *p)
+IR_UnionMemberSeq_var::IR_UnionMemberSeq_var (IR_UnionMemberSeq *p)
   : ptr_ (p)
 {}
 
 ACE_INLINE
-IR::UnionMemberSeq_var::UnionMemberSeq_var (const ::IR::UnionMemberSeq_var &p) // copy constructor
+IR_UnionMemberSeq_var::IR_UnionMemberSeq_var (const ::IR_UnionMemberSeq_var &p) // copy constructor
 {
   if (p.ptr_)
-    ACE_NEW (this->ptr_, ::IR::UnionMemberSeq (*p.ptr_));
+    ACE_NEW (this->ptr_, ::IR_UnionMemberSeq (*p.ptr_));
   else
     this->ptr_ = 0;
 }
 
 ACE_INLINE
-IR::UnionMemberSeq_var::~UnionMemberSeq_var (void) // destructor
+IR_UnionMemberSeq_var::~IR_UnionMemberSeq_var (void) // destructor
 {
   delete this->ptr_;
 }
 
-ACE_INLINE IR::UnionMemberSeq_var &
-IR::UnionMemberSeq_var::operator= (UnionMemberSeq *p)
+ACE_INLINE IR_UnionMemberSeq_var &
+IR_UnionMemberSeq_var::operator= (IR_UnionMemberSeq *p)
 {
   delete this->ptr_;
   this->ptr_ = p;
   return *this;
 }
 
-ACE_INLINE ::IR::UnionMemberSeq_var &
-IR::UnionMemberSeq_var::operator= (const ::IR::UnionMemberSeq_var &p)
+ACE_INLINE IR_UnionMemberSeq_var &
+IR_UnionMemberSeq_var::operator= (const ::IR_UnionMemberSeq_var &p) // deep copy
 {
   if (this != &p)
     {
@@ -11299,12 +10530,12 @@
         }
       else
         {
-          UnionMemberSeq *deep_copy =
-            new UnionMemberSeq (*p.ptr_);
+          IR_UnionMemberSeq *deep_copy = 
+            new IR_UnionMemberSeq (*p.ptr_);
           
           if (deep_copy != 0)
             {
-              UnionMemberSeq *tmp = deep_copy;
+              IR_UnionMemberSeq *tmp = deep_copy;
               deep_copy = this->ptr_;
               this->ptr_ = tmp;
               delete deep_copy;
@@ -11315,103 +10546,103 @@
   return *this;
 }
 
-ACE_INLINE const ::IR::UnionMemberSeq *
-IR::UnionMemberSeq_var::operator-> (void) const
+ACE_INLINE const ::IR_UnionMemberSeq *
+IR_UnionMemberSeq_var::operator-> (void) const
 {
   return this->ptr_;
 }
 
-ACE_INLINE ::IR::UnionMemberSeq *
-IR::UnionMemberSeq_var::operator-> (void)
+ACE_INLINE ::IR_UnionMemberSeq *
+IR_UnionMemberSeq_var::operator-> (void)
 {
   return this->ptr_;
 }
 
 ACE_INLINE 
-IR::UnionMemberSeq_var::operator const ::IR::UnionMemberSeq &() const // cast
+IR_UnionMemberSeq_var::operator const ::IR_UnionMemberSeq &() const // cast
 {
   return *this->ptr_;
 }
 
 ACE_INLINE 
-IR::UnionMemberSeq_var::operator ::IR::UnionMemberSeq &() // cast 
+IR_UnionMemberSeq_var::operator ::IR_UnionMemberSeq &() // cast 
 {
   return *this->ptr_;
 }
 
 ACE_INLINE 
-IR::UnionMemberSeq_var::operator ::IR::UnionMemberSeq &() const // cast 
+IR_UnionMemberSeq_var::operator ::IR_UnionMemberSeq &() const // cast 
 {
   return *this->ptr_;
 }
 
 // variable-size types only
 ACE_INLINE
-IR::UnionMemberSeq_var::operator ::IR::UnionMemberSeq *&() // cast 
+IR_UnionMemberSeq_var::operator ::IR_UnionMemberSeq *&() // cast 
 {
   return this->ptr_;
 }
 
-ACE_INLINE IR::UnionMember &
-IR::UnionMemberSeq_var::operator[] (CORBA::ULong index)
+ACE_INLINE IR_UnionMember &
+IR_UnionMemberSeq_var::operator[] (CORBA::ULong index)
 {
   return this->ptr_->operator[] (index);
 }
 
-ACE_INLINE const IR::UnionMember &
-IR::UnionMemberSeq_var::operator[] (CORBA::ULong index) const
+ACE_INLINE const IR_UnionMember &
+IR_UnionMemberSeq_var::operator[] (CORBA::ULong index) const
 {
-  return ACE_const_cast (const IR::UnionMember &, this->ptr_->operator[] (index));
+  return ACE_const_cast (const IR_UnionMember &, this->ptr_->operator[] (index));
 }
 
-ACE_INLINE const ::IR::UnionMemberSeq &
-IR::UnionMemberSeq_var::in (void) const
+ACE_INLINE const ::IR_UnionMemberSeq &
+IR_UnionMemberSeq_var::in (void) const
 {
   return *this->ptr_;
 }
 
-ACE_INLINE ::IR::UnionMemberSeq &
-IR::UnionMemberSeq_var::inout (void)
+ACE_INLINE ::IR_UnionMemberSeq &
+IR_UnionMemberSeq_var::inout (void)
 {
   return *this->ptr_;
 }
 
 // mapping for variable size 
-ACE_INLINE ::IR::UnionMemberSeq *&
-IR::UnionMemberSeq_var::out (void)
+ACE_INLINE ::IR_UnionMemberSeq *&
+IR_UnionMemberSeq_var::out (void)
 {
   delete this->ptr_;
   this->ptr_ = 0;
   return this->ptr_;
 }
 
-ACE_INLINE ::IR::UnionMemberSeq *
-IR::UnionMemberSeq_var::_retn (void)
+ACE_INLINE ::IR_UnionMemberSeq *
+IR_UnionMemberSeq_var::_retn (void)
 {
-  ::IR::UnionMemberSeq *tmp = this->ptr_;
+  ::IR_UnionMemberSeq *tmp = this->ptr_;
   this->ptr_ = 0;
   return tmp;
 }
 
-ACE_INLINE ::IR::UnionMemberSeq *
-IR::UnionMemberSeq_var::ptr (void) const
+ACE_INLINE ::IR_UnionMemberSeq *
+IR_UnionMemberSeq_var::ptr (void) const
 {
   return this->ptr_;
 }
 
 // *************************************************************
-// Inline operations for class IR::UnionMemberSeq_out
+// Inline operations for class IR_UnionMemberSeq_out
 // *************************************************************
 
 ACE_INLINE
-IR::UnionMemberSeq_out::UnionMemberSeq_out (UnionMemberSeq *&p)
+IR_UnionMemberSeq_out::IR_UnionMemberSeq_out (IR_UnionMemberSeq *&p)
   : ptr_ (p)
 {
   this->ptr_ = 0;
 }
 
 ACE_INLINE
-IR::UnionMemberSeq_out::UnionMemberSeq_out (UnionMemberSeq_var &p) // constructor from _var
+IR_UnionMemberSeq_out::IR_UnionMemberSeq_out (IR_UnionMemberSeq_var &p) // constructor from _var
   : ptr_ (p.out ())
 {
   delete this->ptr_;
@@ -11419,94 +10650,87 @@
 }
 
 ACE_INLINE
-IR::UnionMemberSeq_out::UnionMemberSeq_out (const ::IR::UnionMemberSeq_out &p) // copy constructor
-  : ptr_ (ACE_const_cast (UnionMemberSeq_out&, p).ptr_)
+IR_UnionMemberSeq_out::IR_UnionMemberSeq_out (const ::IR_UnionMemberSeq_out &p) // copy constructor
+  : ptr_ (ACE_const_cast (IR_UnionMemberSeq_out&, p).ptr_)
 {}
 
-ACE_INLINE ::IR::UnionMemberSeq_out &
-IR::UnionMemberSeq_out::operator= (const ::IR::UnionMemberSeq_out &p)
+ACE_INLINE ::IR_UnionMemberSeq_out &
+IR_UnionMemberSeq_out::operator= (const ::IR_UnionMemberSeq_out &p)
 {
-  this->ptr_ = ACE_const_cast (UnionMemberSeq_out&, p).ptr_;
+  this->ptr_ = ACE_const_cast (IR_UnionMemberSeq_out&, p).ptr_;
   return *this;
 }
 
-ACE_INLINE ::IR::UnionMemberSeq_out &
-IR::UnionMemberSeq_out::operator= (UnionMemberSeq *p)
+ACE_INLINE ::IR_UnionMemberSeq_out &
+IR_UnionMemberSeq_out::operator= (IR_UnionMemberSeq *p)
 {
   this->ptr_ = p;
   return *this;
 }
 
 ACE_INLINE 
-IR::UnionMemberSeq_out::operator ::IR::UnionMemberSeq *&() // cast
+IR_UnionMemberSeq_out::operator ::IR_UnionMemberSeq *&() // cast
 {
   return this->ptr_;
 }
 
-ACE_INLINE ::IR::UnionMemberSeq *&
-IR::UnionMemberSeq_out::ptr (void) // ptr
+ACE_INLINE ::IR_UnionMemberSeq *&
+IR_UnionMemberSeq_out::ptr (void) // ptr
 {
   return this->ptr_;
 }
 
-ACE_INLINE ::IR::UnionMemberSeq *
-IR::UnionMemberSeq_out::operator-> (void)
+ACE_INLINE ::IR_UnionMemberSeq *
+IR_UnionMemberSeq_out::operator-> (void)
 {
   return this->ptr_;
 }
 
-ACE_INLINE IR::UnionMember &
-IR::UnionMemberSeq_out::operator[] (CORBA::ULong index)
+ACE_INLINE IR_UnionMember &
+IR_UnionMemberSeq_out::operator[] (CORBA::ULong index)
 {
   return this->ptr_->operator[] (index);
 }
 
-
-#endif /* end #if !defined */
-
-
-#if !defined (_IR_ENUMMEMBERSEQ_CI_)
-#define _IR_ENUMMEMBERSEQ_CI_
-
 // *************************************************************
-// Inline operations for class IR::EnumMemberSeq_var
+// Inline operations for class IR_EnumMemberSeq_var
 // *************************************************************
 
 ACE_INLINE
-IR::EnumMemberSeq_var::EnumMemberSeq_var (void) // default constructor
+IR_EnumMemberSeq_var::IR_EnumMemberSeq_var (void) // default constructor
   : ptr_ (0)
 {}
 
 ACE_INLINE
-IR::EnumMemberSeq_var::EnumMemberSeq_var (EnumMemberSeq *p)
+IR_EnumMemberSeq_var::IR_EnumMemberSeq_var (IR_EnumMemberSeq *p)
   : ptr_ (p)
 {}
 
 ACE_INLINE
-IR::EnumMemberSeq_var::EnumMemberSeq_var (const ::IR::EnumMemberSeq_var &p) // copy constructor
+IR_EnumMemberSeq_var::IR_EnumMemberSeq_var (const ::IR_EnumMemberSeq_var &p) // copy constructor
 {
   if (p.ptr_)
-    ACE_NEW (this->ptr_, ::IR::EnumMemberSeq (*p.ptr_));
+    ACE_NEW (this->ptr_, ::IR_EnumMemberSeq (*p.ptr_));
   else
     this->ptr_ = 0;
 }
 
 ACE_INLINE
-IR::EnumMemberSeq_var::~EnumMemberSeq_var (void) // destructor
+IR_EnumMemberSeq_var::~IR_EnumMemberSeq_var (void) // destructor
 {
   delete this->ptr_;
 }
 
-ACE_INLINE IR::EnumMemberSeq_var &
-IR::EnumMemberSeq_var::operator= (EnumMemberSeq *p)
+ACE_INLINE IR_EnumMemberSeq_var &
+IR_EnumMemberSeq_var::operator= (IR_EnumMemberSeq *p)
 {
   delete this->ptr_;
   this->ptr_ = p;
   return *this;
 }
 
-ACE_INLINE ::IR::EnumMemberSeq_var &
-IR::EnumMemberSeq_var::operator= (const ::IR::EnumMemberSeq_var &p)
+ACE_INLINE IR_EnumMemberSeq_var &
+IR_EnumMemberSeq_var::operator= (const ::IR_EnumMemberSeq_var &p) // deep copy
 {
   if (this != &p)
     {
@@ -11517,12 +10741,12 @@
         }
       else
         {
-          EnumMemberSeq *deep_copy =
-            new EnumMemberSeq (*p.ptr_);
+          IR_EnumMemberSeq *deep_copy = 
+            new IR_EnumMemberSeq (*p.ptr_);
           
           if (deep_copy != 0)
             {
-              EnumMemberSeq *tmp = deep_copy;
+              IR_EnumMemberSeq *tmp = deep_copy;
               deep_copy = this->ptr_;
               this->ptr_ = tmp;
               delete deep_copy;
@@ -11533,97 +10757,97 @@
   return *this;
 }
 
-ACE_INLINE const ::IR::EnumMemberSeq *
-IR::EnumMemberSeq_var::operator-> (void) const
+ACE_INLINE const ::IR_EnumMemberSeq *
+IR_EnumMemberSeq_var::operator-> (void) const
 {
   return this->ptr_;
 }
 
-ACE_INLINE ::IR::EnumMemberSeq *
-IR::EnumMemberSeq_var::operator-> (void)
+ACE_INLINE ::IR_EnumMemberSeq *
+IR_EnumMemberSeq_var::operator-> (void)
 {
   return this->ptr_;
 }
 
 ACE_INLINE 
-IR::EnumMemberSeq_var::operator const ::IR::EnumMemberSeq &() const // cast
+IR_EnumMemberSeq_var::operator const ::IR_EnumMemberSeq &() const // cast
 {
   return *this->ptr_;
 }
 
 ACE_INLINE 
-IR::EnumMemberSeq_var::operator ::IR::EnumMemberSeq &() // cast 
+IR_EnumMemberSeq_var::operator ::IR_EnumMemberSeq &() // cast 
 {
   return *this->ptr_;
 }
 
 ACE_INLINE 
-IR::EnumMemberSeq_var::operator ::IR::EnumMemberSeq &() const // cast 
+IR_EnumMemberSeq_var::operator ::IR_EnumMemberSeq &() const // cast 
 {
   return *this->ptr_;
 }
 
 // variable-size types only
 ACE_INLINE
-IR::EnumMemberSeq_var::operator ::IR::EnumMemberSeq *&() // cast 
+IR_EnumMemberSeq_var::operator ::IR_EnumMemberSeq *&() // cast 
 {
   return this->ptr_;
 }
 
 ACE_INLINE TAO_SeqElem_String_Manager
-IR::EnumMemberSeq_var::operator[] (CORBA::ULong index)
+IR_EnumMemberSeq_var::operator[] (CORBA::ULong index)
 {
   return this->ptr_->operator[] (index);
 }
 
-ACE_INLINE const ::IR::EnumMemberSeq &
-IR::EnumMemberSeq_var::in (void) const
+ACE_INLINE const ::IR_EnumMemberSeq &
+IR_EnumMemberSeq_var::in (void) const
 {
   return *this->ptr_;
 }
 
-ACE_INLINE ::IR::EnumMemberSeq &
-IR::EnumMemberSeq_var::inout (void)
+ACE_INLINE ::IR_EnumMemberSeq &
+IR_EnumMemberSeq_var::inout (void)
 {
   return *this->ptr_;
 }
 
 // mapping for variable size 
-ACE_INLINE ::IR::EnumMemberSeq *&
-IR::EnumMemberSeq_var::out (void)
+ACE_INLINE ::IR_EnumMemberSeq *&
+IR_EnumMemberSeq_var::out (void)
 {
   delete this->ptr_;
   this->ptr_ = 0;
   return this->ptr_;
 }
 
-ACE_INLINE ::IR::EnumMemberSeq *
-IR::EnumMemberSeq_var::_retn (void)
+ACE_INLINE ::IR_EnumMemberSeq *
+IR_EnumMemberSeq_var::_retn (void)
 {
-  ::IR::EnumMemberSeq *tmp = this->ptr_;
+  ::IR_EnumMemberSeq *tmp = this->ptr_;
   this->ptr_ = 0;
   return tmp;
 }
 
-ACE_INLINE ::IR::EnumMemberSeq *
-IR::EnumMemberSeq_var::ptr (void) const
+ACE_INLINE ::IR_EnumMemberSeq *
+IR_EnumMemberSeq_var::ptr (void) const
 {
   return this->ptr_;
 }
 
 // *************************************************************
-// Inline operations for class IR::EnumMemberSeq_out
+// Inline operations for class IR_EnumMemberSeq_out
 // *************************************************************
 
 ACE_INLINE
-IR::EnumMemberSeq_out::EnumMemberSeq_out (EnumMemberSeq *&p)
+IR_EnumMemberSeq_out::IR_EnumMemberSeq_out (IR_EnumMemberSeq *&p)
   : ptr_ (p)
 {
   this->ptr_ = 0;
 }
 
 ACE_INLINE
-IR::EnumMemberSeq_out::EnumMemberSeq_out (EnumMemberSeq_var &p) // constructor from _var
+IR_EnumMemberSeq_out::IR_EnumMemberSeq_out (IR_EnumMemberSeq_var &p) // constructor from _var
   : ptr_ (p.out ())
 {
   delete this->ptr_;
@@ -11631,90 +10855,87 @@
 }
 
 ACE_INLINE
-IR::EnumMemberSeq_out::EnumMemberSeq_out (const ::IR::EnumMemberSeq_out &p) // copy constructor
-  : ptr_ (ACE_const_cast (EnumMemberSeq_out&, p).ptr_)
+IR_EnumMemberSeq_out::IR_EnumMemberSeq_out (const ::IR_EnumMemberSeq_out &p) // copy constructor
+  : ptr_ (ACE_const_cast (IR_EnumMemberSeq_out&, p).ptr_)
 {}
 
-ACE_INLINE ::IR::EnumMemberSeq_out &
-IR::EnumMemberSeq_out::operator= (const ::IR::EnumMemberSeq_out &p)
+ACE_INLINE ::IR_EnumMemberSeq_out &
+IR_EnumMemberSeq_out::operator= (const ::IR_EnumMemberSeq_out &p)
 {
-  this->ptr_ = ACE_const_cast (EnumMemberSeq_out&, p).ptr_;
+  this->ptr_ = ACE_const_cast (IR_EnumMemberSeq_out&, p).ptr_;
   return *this;
 }
 
-ACE_INLINE ::IR::EnumMemberSeq_out &
-IR::EnumMemberSeq_out::operator= (EnumMemberSeq *p)
+ACE_INLINE ::IR_EnumMemberSeq_out &
+IR_EnumMemberSeq_out::operator= (IR_EnumMemberSeq *p)
 {
   this->ptr_ = p;
   return *this;
 }
 
 ACE_INLINE 
-IR::EnumMemberSeq_out::operator ::IR::EnumMemberSeq *&() // cast
+IR_EnumMemberSeq_out::operator ::IR_EnumMemberSeq *&() // cast
 {
   return this->ptr_;
 }
 
-ACE_INLINE ::IR::EnumMemberSeq *&
-IR::EnumMemberSeq_out::ptr (void) // ptr
+ACE_INLINE ::IR_EnumMemberSeq *&
+IR_EnumMemberSeq_out::ptr (void) // ptr
 {
   return this->ptr_;
 }
 
-ACE_INLINE ::IR::EnumMemberSeq *
-IR::EnumMemberSeq_out::operator-> (void)
+ACE_INLINE ::IR_EnumMemberSeq *
+IR_EnumMemberSeq_out::operator-> (void)
 {
   return this->ptr_;
 }
 
 ACE_INLINE TAO_SeqElem_String_Manager
-IR::EnumMemberSeq_out::operator[] (CORBA::ULong index)
+IR_EnumMemberSeq_out::operator[] (CORBA::ULong index)
 {
   return this->ptr_->operator[] (index);
 }
 
-
-#endif /* end #if !defined */
-
 // *************************************************************
-// Inline operations for class IR::Container::Description_var
+// Inline operations for class IR_Container::Description_var
 // *************************************************************
 
 ACE_INLINE
-IR::Container::Description_var::Description_var (void) // default constructor
+IR_Container::Description_var::Description_var (void) // default constructor
   : ptr_ (0)
 {}
 
 ACE_INLINE
-IR::Container::Description_var::Description_var (Description *p)
+IR_Container::Description_var::Description_var (Description *p)
   : ptr_ (p)
 {}
 
 ACE_INLINE
-IR::Container::Description_var::Description_var (const ::IR::Container::Description_var &p) // copy constructor
+IR_Container::Description_var::Description_var (const ::IR_Container::Description_var &p) // copy constructor
 {
   if (p.ptr_)
-    ACE_NEW (this->ptr_, ::IR::Container::Description (*p.ptr_));
+    ACE_NEW (this->ptr_, ::IR_Container::Description (*p.ptr_));
   else
     this->ptr_ = 0;
 }
 
 ACE_INLINE
-IR::Container::Description_var::~Description_var (void) // destructor
+IR_Container::Description_var::~Description_var (void) // destructor
 {
   delete this->ptr_;
 }
 
-ACE_INLINE IR::Container::Description_var &
-IR::Container::Description_var::operator= (Description *p)
+ACE_INLINE IR_Container::Description_var &
+IR_Container::Description_var::operator= (Description *p)
 {
   delete this->ptr_;
   this->ptr_ = p;
   return *this;
 }
 
-ACE_INLINE ::IR::Container::Description_var &
-IR::Container::Description_var::operator= (const ::IR::Container::Description_var &p)
+ACE_INLINE ::IR_Container::Description_var &
+IR_Container::Description_var::operator= (const ::IR_Container::Description_var &p)
 {
   if (this != &p)
     {
@@ -11725,12 +10946,12 @@
         }
       else
         {
-          Description *deep_copy =
-            new Description (*p.ptr_);
+          IR_Container::Description *deep_copy = 
+            new IR_Container::Description (*p.ptr_);
           
           if (deep_copy != 0)
             {
-              Description *tmp = deep_copy;
+              IR_Container::Description *tmp = deep_copy;
               deep_copy = this->ptr_;
               this->ptr_ = tmp;
               delete deep_copy;
@@ -11741,91 +10962,91 @@
   return *this;
 }
 
-ACE_INLINE const ::IR::Container::Description *
-IR::Container::Description_var::operator-> (void) const
+ACE_INLINE const ::IR_Container::Description *
+IR_Container::Description_var::operator-> (void) const
 {
   return this->ptr_;
 }
 
-ACE_INLINE ::IR::Container::Description *
-IR::Container::Description_var::operator-> (void)
+ACE_INLINE ::IR_Container::Description *
+IR_Container::Description_var::operator-> (void)
 {
   return this->ptr_;
 }
 
 ACE_INLINE
-IR::Container::Description_var::operator const ::IR::Container::Description &() const // cast
+IR_Container::Description_var::operator const ::IR_Container::Description &() const // cast
 {
   return *this->ptr_;
 }
 
 ACE_INLINE
-IR::Container::Description_var::operator ::IR::Container::Description &() // cast 
+IR_Container::Description_var::operator ::IR_Container::Description &() // cast 
 {
   return *this->ptr_;
 }
 
 ACE_INLINE
-IR::Container::Description_var::operator ::IR::Container::Description &() const // cast 
+IR_Container::Description_var::operator ::IR_Container::Description &() const // cast 
 {
   return *this->ptr_;
 }
 
 // variable-size types only
 ACE_INLINE
-IR::Container::Description_var::operator ::IR::Container::Description *&() // cast 
+IR_Container::Description_var::operator ::IR_Container::Description *&() // cast 
 {
   return this->ptr_;
 }
 
-ACE_INLINE const ::IR::Container::Description &
-IR::Container::Description_var::in (void) const
+ACE_INLINE const ::IR_Container::Description &
+IR_Container::Description_var::in (void) const
 {
   return *this->ptr_;
 }
 
-ACE_INLINE ::IR::Container::Description &
-IR::Container::Description_var::inout (void)
+ACE_INLINE ::IR_Container::Description &
+IR_Container::Description_var::inout (void)
 {
   return *this->ptr_;
 }
 
 // mapping for variable size 
-ACE_INLINE ::IR::Container::Description *&
-IR::Container::Description_var::out (void)
+ACE_INLINE ::IR_Container::Description *&
+IR_Container::Description_var::out (void)
 {
   delete this->ptr_;
   this->ptr_ = 0;
   return this->ptr_;
 }
 
-ACE_INLINE ::IR::Container::Description *
-IR::Container::Description_var::_retn (void)
+ACE_INLINE ::IR_Container::Description *
+IR_Container::Description_var::_retn (void)
 {
-  ::IR::Container::Description *tmp = this->ptr_;
+  ::IR_Container::Description *tmp = this->ptr_;
   this->ptr_ = 0;
   return tmp;
 }
 
-ACE_INLINE ::IR::Container::Description *
-IR::Container::Description_var::ptr (void) const
+ACE_INLINE ::IR_Container::Description *
+IR_Container::Description_var::ptr (void) const
 {
   return this->ptr_;
 }
 
 // *************************************************************
-// Inline operations for class IR::Container::Description_out
+// Inline operations for class IR_Container::Description_out
 // *************************************************************
 
 ACE_INLINE
-IR::Container::Description_out::Description_out (::IR::Container::Description *&p)
+IR_Container::Description_out::Description_out (::IR_Container::Description *&p)
   : ptr_ (p)
 {
   this->ptr_ = 0;
 }
 
 ACE_INLINE
-IR::Container::Description_out::Description_out (Description_var &p) // constructor from _var
+IR_Container::Description_out::Description_out (Description_var &p) // constructor from _var
   : ptr_ (p.out ())
 {
   delete this->ptr_;
@@ -11833,93 +11054,89 @@
 }
 
 ACE_INLINE
-IR::Container::Description_out::Description_out (const ::IR::Container::Description_out &p) // copy constructor
+IR_Container::Description_out::Description_out (const ::IR_Container::Description_out &p) // copy constructor
   : ptr_ (ACE_const_cast (Description_out&, p).ptr_)
 {}
 
-ACE_INLINE IR::Container::Description_out &
-IR::Container::Description_out::operator= (const ::IR::Container::Description_out &p)
+ACE_INLINE IR_Container::Description_out &
+IR_Container::Description_out::operator= (const ::IR_Container::Description_out &p)
 {
   this->ptr_ = ACE_const_cast (Description_out&, p).ptr_;
   return *this;
 }
 
-ACE_INLINE IR::Container::Description_out &
-IR::Container::Description_out::operator= (Description *p)
+ACE_INLINE IR_Container::Description_out &
+IR_Container::Description_out::operator= (Description *p)
 {
   this->ptr_ = p;
   return *this;
 }
 
 ACE_INLINE 
-IR::Container::Description_out::operator ::IR::Container::Description *&() // cast
+IR_Container::Description_out::operator ::IR_Container::Description *&() // cast
 {
   return this->ptr_;
 }
 
-ACE_INLINE ::IR::Container::Description *&
-IR::Container::Description_out::ptr (void) // ptr
+ACE_INLINE ::IR_Container::Description *&
+IR_Container::Description_out::ptr (void) // ptr
 {
   return this->ptr_;
 }
 
-ACE_INLINE ::IR::Container::Description *
-IR::Container::Description_out::operator-> (void)
+ACE_INLINE ::IR_Container::Description *
+IR_Container::Description_out::operator-> (void)
 {
   return this->ptr_;
 }
 
-
 #if !defined (TAO_USE_SEQUENCE_TEMPLATES)
   
-#if !defined (__TAO_UNBOUNDED_SEQUENCE_IR_CONTAINER_DESCRIPTIONSEQ_CI_)
-#define __TAO_UNBOUNDED_SEQUENCE_IR_CONTAINER_DESCRIPTIONSEQ_CI_
-
   // = Static operations.
-  ACE_INLINE IR::Container::Description *
-  IR::Container::_TAO_Unbounded_Sequence_IR_Container_DescriptionSeq::allocbuf (CORBA::ULong size)
+  ACE_INLINE IR_Container::Description *
+  IR_Container::_TAO_Unbounded_Sequence_IR_Container_DescriptionSeq::allocbuf (CORBA::ULong size)
   // Allocate storage for the sequence.
   {
-    IR::Container::Description *retval = 0;
-    ACE_NEW_RETURN (retval, IR::Container::Description[size], 0);
+    IR_Container::Description *retval = 0;
+    ACE_NEW_RETURN (retval, IR_Container::Description[size], 0);
     return retval;
   }
   
-  ACE_INLINE void IR::Container::_TAO_Unbounded_Sequence_IR_Container_DescriptionSeq::freebuf (IR::Container::Description *buffer)
+  ACE_INLINE void IR_Container::_TAO_Unbounded_Sequence_IR_Container_DescriptionSeq::freebuf (IR_Container::Description *buffer)
   // Free the sequence.
   {
     delete [] buffer;
   }
   
   ACE_INLINE
-  IR::Container::_TAO_Unbounded_Sequence_IR_Container_DescriptionSeq::_TAO_Unbounded_Sequence_IR_Container_DescriptionSeq (void) // Default constructor.
+  IR_Container::_TAO_Unbounded_Sequence_IR_Container_DescriptionSeq::_TAO_Unbounded_Sequence_IR_Container_DescriptionSeq (void) // Default constructor.
   {
   }
   
   ACE_INLINE
-  IR::Container::_TAO_Unbounded_Sequence_IR_Container_DescriptionSeq::_TAO_Unbounded_Sequence_IR_Container_DescriptionSeq (CORBA::ULong maximum) // Constructor using a maximum length value.
+  IR_Container::_TAO_Unbounded_Sequence_IR_Container_DescriptionSeq::_TAO_Unbounded_Sequence_IR_Container_DescriptionSeq (CORBA::ULong maximum) // Constructor using a maximum length value.
     : TAO_Unbounded_Base_Sequence (maximum, _TAO_Unbounded_Sequence_IR_Container_DescriptionSeq::allocbuf (maximum))
   {
   }
   
   ACE_INLINE
-  IR::Container::_TAO_Unbounded_Sequence_IR_Container_DescriptionSeq::_TAO_Unbounded_Sequence_IR_Container_DescriptionSeq (CORBA::ULong maximum,
+  IR_Container::_TAO_Unbounded_Sequence_IR_Container_DescriptionSeq::_TAO_Unbounded_Sequence_IR_Container_DescriptionSeq (CORBA::ULong maximum,
     CORBA::ULong length,
-    IR::Container::Description *data,
+    IR_Container::Description *data,
     CORBA::Boolean release)
   : TAO_Unbounded_Base_Sequence (maximum, length, data, release)
   {
   }
   
   ACE_INLINE
-  IR::Container::_TAO_Unbounded_Sequence_IR_Container_DescriptionSeq::_TAO_Unbounded_Sequence_IR_Container_DescriptionSeq (const _TAO_Unbounded_Sequence_IR_Container_DescriptionSeq &rhs)
+  IR_Container::_TAO_Unbounded_Sequence_IR_Container_DescriptionSeq::_TAO_Unbounded_Sequence_IR_Container_DescriptionSeq (const _TAO_Unbounded_Sequence_IR_Container_DescriptionSeq &rhs)
   // Copy constructor.
     : TAO_Unbounded_Base_Sequence (rhs)
   {
     if (rhs.buffer_ != 0)
     {
-      IR::Container::Description *tmp1 = _TAO_Unbounded_Sequence_IR_Container_DescriptionSeq::allocbuf (this->maximum_);
-      IR::Container::Description * const tmp2 = ACE_reinterpret_cast (IR::Container::Description * ACE_CAST_CONST, rhs.buffer_);
+      IR_Container::Description *tmp1 = _TAO_Unbounded_Sequence_IR_Container_DescriptionSeq::allocbuf (this->maximum_);
+      IR_Container::Description * const tmp2 = ACE_reinterpret_cast (IR_Container::Description * ACE_CAST_CONST, rhs.buffer_);
       
       for (CORBA::ULong i = 0; i < this->length_; ++i)
         tmp1[i] = tmp2[i];
@@ -11932,8 +11149,8 @@
     }
   }
   
-  ACE_INLINE IR::Container::_TAO_Unbounded_Sequence_IR_Container_DescriptionSeq &
-  IR::Container::_TAO_Unbounded_Sequence_IR_Container_DescriptionSeq::operator= (const _TAO_Unbounded_Sequence_IR_Container_DescriptionSeq &rhs)
+  ACE_INLINE IR_Container::_TAO_Unbounded_Sequence_IR_Container_DescriptionSeq &
+  IR_Container::_TAO_Unbounded_Sequence_IR_Container_DescriptionSeq::operator= (const _TAO_Unbounded_Sequence_IR_Container_DescriptionSeq &rhs)
   // Assignment operator.
   {
     if (this == &rhs)
@@ -11944,7 +11161,7 @@
       if (this->maximum_ < rhs.maximum_)
       {
         // free the old buffer
-        IR::Container::Description *tmp = ACE_reinterpret_cast (IR::Container::Description *, this->buffer_);
+        IR_Container::Description *tmp = ACE_reinterpret_cast (IR_Container::Description *, this->buffer_);
         _TAO_Unbounded_Sequence_IR_Container_DescriptionSeq::freebuf (tmp);
         this->buffer_ = _TAO_Unbounded_Sequence_IR_Container_DescriptionSeq::allocbuf (rhs.maximum_);
       }
@@ -11954,8 +11171,8 @@
     
     TAO_Unbounded_Base_Sequence::operator= (rhs);
     
-    IR::Container::Description *tmp1 = ACE_reinterpret_cast (IR::Container::Description *, this->buffer_);
-    IR::Container::Description * const tmp2 = ACE_reinterpret_cast (IR::Container::Description * ACE_CAST_CONST, rhs.buffer_);
+    IR_Container::Description *tmp1 = ACE_reinterpret_cast (IR_Container::Description *, this->buffer_);
+    IR_Container::Description * const tmp2 = ACE_reinterpret_cast (IR_Container::Description * ACE_CAST_CONST, rhs.buffer_);
     
     for (CORBA::ULong i = 0; i < this->length_; ++i)
       tmp1[i] = tmp2[i];
@@ -11964,30 +11181,30 @@
   }
   
   // = Accessors.
-  ACE_INLINE IR::Container::Description &
-  IR::Container::_TAO_Unbounded_Sequence_IR_Container_DescriptionSeq::operator[] (CORBA::ULong i)
+  ACE_INLINE IR_Container::Description &
+  IR_Container::_TAO_Unbounded_Sequence_IR_Container_DescriptionSeq::operator[] (CORBA::ULong i)
   // operator []
   {
     ACE_ASSERT (i < this->maximum_);
-    IR::Container::Description* tmp = ACE_reinterpret_cast(IR::Container::Description*,this->buffer_);
+    IR_Container::Description* tmp = ACE_reinterpret_cast(IR_Container::Description*,this->buffer_);
     return tmp[i];
   }
   
-  ACE_INLINE const IR::Container::Description &
-  IR::Container::_TAO_Unbounded_Sequence_IR_Container_DescriptionSeq::operator[] (CORBA::ULong i) const
+  ACE_INLINE const IR_Container::Description &
+  IR_Container::_TAO_Unbounded_Sequence_IR_Container_DescriptionSeq::operator[] (CORBA::ULong i) const
   // operator []
   {
     ACE_ASSERT (i < this->maximum_);
-    IR::Container::Description * const tmp = ACE_reinterpret_cast (IR::Container::Description* ACE_CAST_CONST, this->buffer_);
+    IR_Container::Description * const tmp = ACE_reinterpret_cast (IR_Container::Description* ACE_CAST_CONST, this->buffer_);
     return tmp[i];
   }
   
   // Implement the TAO_Base_Sequence methods (see Sequence.h)
   
-  ACE_INLINE IR::Container::Description *
-  IR::Container::_TAO_Unbounded_Sequence_IR_Container_DescriptionSeq::get_buffer (CORBA::Boolean orphan)
+  ACE_INLINE IR_Container::Description *
+  IR_Container::_TAO_Unbounded_Sequence_IR_Container_DescriptionSeq::get_buffer (CORBA::Boolean orphan)
   {
-    IR::Container::Description *result = 0;
+    IR_Container::Description *result = 0;
     if (orphan == 0)
     {
       // We retain ownership.
@@ -11999,7 +11216,7 @@
       }
       else
       {
-        result = ACE_reinterpret_cast (IR::Container::Description*, this->buffer_);
+        result = ACE_reinterpret_cast (IR_Container::Description*, this->buffer_);
       }
     }
     else // if (orphan == 1)
@@ -12008,7 +11225,7 @@
       {
         // We set the state back to default and relinquish
         // ownership.
-        result = ACE_reinterpret_cast(IR::Container::Description*,this->buffer_);
+        result = ACE_reinterpret_cast(IR_Container::Description*,this->buffer_);
         this->maximum_ = 0;
         this->length_ = 0;
         this->buffer_ = 0;
@@ -12018,76 +11235,70 @@
     return result;
   }
   
-  ACE_INLINE const IR::Container::Description *
-  IR::Container::_TAO_Unbounded_Sequence_IR_Container_DescriptionSeq::get_buffer (void) const
+  ACE_INLINE const IR_Container::Description *
+  IR_Container::_TAO_Unbounded_Sequence_IR_Container_DescriptionSeq::get_buffer (void) const
   {
-    return ACE_reinterpret_cast(const IR::Container::Description * ACE_CAST_CONST, this->buffer_);
+    return ACE_reinterpret_cast(const IR_Container::Description * ACE_CAST_CONST, this->buffer_);
   }
   
   ACE_INLINE void
-  IR::Container::_TAO_Unbounded_Sequence_IR_Container_DescriptionSeq::replace (CORBA::ULong max,
+  IR_Container::_TAO_Unbounded_Sequence_IR_Container_DescriptionSeq::replace (CORBA::ULong max,
   CORBA::ULong length,
-  IR::Container::Description *data,
+  IR_Container::Description *data,
   CORBA::Boolean release)
   {
     this->maximum_ = max;
     this->length_ = length;
     if (this->buffer_ && this->release_ == 1)
     {
-      IR::Container::Description *tmp = ACE_reinterpret_cast(IR::Container::Description*,this->buffer_);
+      IR_Container::Description *tmp = ACE_reinterpret_cast(IR_Container::Description*,this->buffer_);
       _TAO_Unbounded_Sequence_IR_Container_DescriptionSeq::freebuf (tmp);
     }
     this->buffer_ = data;
     this->release_ = release;
   }
   
-#endif /* end #if !defined */
-
-
 #endif /* !TAO_USE_SEQUENCE_TEMPLATES */ 
 
-#if !defined (_IR_CONTAINER_DESCRIPTIONSEQ_CI_)
-#define _IR_CONTAINER_DESCRIPTIONSEQ_CI_
-
 // *************************************************************
-// Inline operations for class IR::Container::DescriptionSeq_var
+// Inline operations for class IR_Container::DescriptionSeq_var
 // *************************************************************
 
 ACE_INLINE
-IR::Container::DescriptionSeq_var::DescriptionSeq_var (void) // default constructor
+IR_Container::DescriptionSeq_var::DescriptionSeq_var (void) // default constructor
   : ptr_ (0)
 {}
 
 ACE_INLINE
-IR::Container::DescriptionSeq_var::DescriptionSeq_var (DescriptionSeq *p)
+IR_Container::DescriptionSeq_var::DescriptionSeq_var (DescriptionSeq *p)
   : ptr_ (p)
 {}
 
 ACE_INLINE
-IR::Container::DescriptionSeq_var::DescriptionSeq_var (const ::IR::Container::DescriptionSeq_var &p) // copy constructor
+IR_Container::DescriptionSeq_var::DescriptionSeq_var (const ::IR_Container::DescriptionSeq_var &p) // copy constructor
 {
   if (p.ptr_)
-    ACE_NEW (this->ptr_, ::IR::Container::DescriptionSeq (*p.ptr_));
+    ACE_NEW (this->ptr_, ::IR_Container::DescriptionSeq (*p.ptr_));
   else
     this->ptr_ = 0;
 }
 
 ACE_INLINE
-IR::Container::DescriptionSeq_var::~DescriptionSeq_var (void) // destructor
+IR_Container::DescriptionSeq_var::~DescriptionSeq_var (void) // destructor
 {
   delete this->ptr_;
 }
 
-ACE_INLINE IR::Container::DescriptionSeq_var &
-IR::Container::DescriptionSeq_var::operator= (DescriptionSeq *p)
+ACE_INLINE IR_Container::DescriptionSeq_var &
+IR_Container::DescriptionSeq_var::operator= (DescriptionSeq *p)
 {
   delete this->ptr_;
   this->ptr_ = p;
   return *this;
 }
 
-ACE_INLINE ::IR::Container::DescriptionSeq_var &
-IR::Container::DescriptionSeq_var::operator= (const ::IR::Container::DescriptionSeq_var &p)
+ACE_INLINE IR_Container::DescriptionSeq_var &
+IR_Container::DescriptionSeq_var::operator= (const ::IR_Container::DescriptionSeq_var &p) // deep copy
 {
   if (this != &p)
     {
@@ -12098,12 +11309,12 @@
         }
       else
         {
-          DescriptionSeq *deep_copy =
-            new DescriptionSeq (*p.ptr_);
+          IR_Container::DescriptionSeq *deep_copy = 
+            new IR_Container::DescriptionSeq (*p.ptr_);
           
           if (deep_copy != 0)
             {
-              DescriptionSeq *tmp = deep_copy;
+              IR_Container::DescriptionSeq *tmp = deep_copy;
               deep_copy = this->ptr_;
               this->ptr_ = tmp;
               delete deep_copy;
@@ -12114,103 +11325,103 @@
   return *this;
 }
 
-ACE_INLINE const ::IR::Container::DescriptionSeq *
-IR::Container::DescriptionSeq_var::operator-> (void) const
+ACE_INLINE const ::IR_Container::DescriptionSeq *
+IR_Container::DescriptionSeq_var::operator-> (void) const
 {
   return this->ptr_;
 }
 
-ACE_INLINE ::IR::Container::DescriptionSeq *
-IR::Container::DescriptionSeq_var::operator-> (void)
+ACE_INLINE ::IR_Container::DescriptionSeq *
+IR_Container::DescriptionSeq_var::operator-> (void)
 {
   return this->ptr_;
 }
 
 ACE_INLINE 
-IR::Container::DescriptionSeq_var::operator const ::IR::Container::DescriptionSeq &() const // cast
+IR_Container::DescriptionSeq_var::operator const ::IR_Container::DescriptionSeq &() const // cast
 {
   return *this->ptr_;
 }
 
 ACE_INLINE 
-IR::Container::DescriptionSeq_var::operator ::IR::Container::DescriptionSeq &() // cast 
+IR_Container::DescriptionSeq_var::operator ::IR_Container::DescriptionSeq &() // cast 
 {
   return *this->ptr_;
 }
 
 ACE_INLINE 
-IR::Container::DescriptionSeq_var::operator ::IR::Container::DescriptionSeq &() const // cast 
+IR_Container::DescriptionSeq_var::operator ::IR_Container::DescriptionSeq &() const // cast 
 {
   return *this->ptr_;
 }
 
 // variable-size types only
 ACE_INLINE
-IR::Container::DescriptionSeq_var::operator ::IR::Container::DescriptionSeq *&() // cast 
+IR_Container::DescriptionSeq_var::operator ::IR_Container::DescriptionSeq *&() // cast 
 {
   return this->ptr_;
 }
 
-ACE_INLINE IR::Container::Description &
-IR::Container::DescriptionSeq_var::operator[] (CORBA::ULong index)
+ACE_INLINE IR_Container::Description &
+IR_Container::DescriptionSeq_var::operator[] (CORBA::ULong index)
 {
   return this->ptr_->operator[] (index);
 }
 
-ACE_INLINE const IR::Container::Description &
-IR::Container::DescriptionSeq_var::operator[] (CORBA::ULong index) const
+ACE_INLINE const IR_Container::Description &
+IR_Container::DescriptionSeq_var::operator[] (CORBA::ULong index) const
 {
-  return ACE_const_cast (const IR::Container::Description &, this->ptr_->operator[] (index));
+  return ACE_const_cast (const IR_Container::Description &, this->ptr_->operator[] (index));
 }
 
-ACE_INLINE const ::IR::Container::DescriptionSeq &
-IR::Container::DescriptionSeq_var::in (void) const
+ACE_INLINE const ::IR_Container::DescriptionSeq &
+IR_Container::DescriptionSeq_var::in (void) const
 {
   return *this->ptr_;
 }
 
-ACE_INLINE ::IR::Container::DescriptionSeq &
-IR::Container::DescriptionSeq_var::inout (void)
+ACE_INLINE ::IR_Container::DescriptionSeq &
+IR_Container::DescriptionSeq_var::inout (void)
 {
   return *this->ptr_;
 }
 
 // mapping for variable size 
-ACE_INLINE ::IR::Container::DescriptionSeq *&
-IR::Container::DescriptionSeq_var::out (void)
+ACE_INLINE ::IR_Container::DescriptionSeq *&
+IR_Container::DescriptionSeq_var::out (void)
 {
   delete this->ptr_;
   this->ptr_ = 0;
   return this->ptr_;
 }
 
-ACE_INLINE ::IR::Container::DescriptionSeq *
-IR::Container::DescriptionSeq_var::_retn (void)
+ACE_INLINE ::IR_Container::DescriptionSeq *
+IR_Container::DescriptionSeq_var::_retn (void)
 {
-  ::IR::Container::DescriptionSeq *tmp = this->ptr_;
+  ::IR_Container::DescriptionSeq *tmp = this->ptr_;
   this->ptr_ = 0;
   return tmp;
 }
 
-ACE_INLINE ::IR::Container::DescriptionSeq *
-IR::Container::DescriptionSeq_var::ptr (void) const
+ACE_INLINE ::IR_Container::DescriptionSeq *
+IR_Container::DescriptionSeq_var::ptr (void) const
 {
   return this->ptr_;
 }
 
 // *************************************************************
-// Inline operations for class IR::Container::DescriptionSeq_out
+// Inline operations for class IR_Container::DescriptionSeq_out
 // *************************************************************
 
 ACE_INLINE
-IR::Container::DescriptionSeq_out::DescriptionSeq_out (DescriptionSeq *&p)
+IR_Container::DescriptionSeq_out::DescriptionSeq_out (DescriptionSeq *&p)
   : ptr_ (p)
 {
   this->ptr_ = 0;
 }
 
 ACE_INLINE
-IR::Container::DescriptionSeq_out::DescriptionSeq_out (DescriptionSeq_var &p) // constructor from _var
+IR_Container::DescriptionSeq_out::DescriptionSeq_out (DescriptionSeq_var &p) // constructor from _var
   : ptr_ (p.out ())
 {
   delete this->ptr_;
@@ -12218,57 +11429,50 @@
 }
 
 ACE_INLINE
-IR::Container::DescriptionSeq_out::DescriptionSeq_out (const ::IR::Container::DescriptionSeq_out &p) // copy constructor
+IR_Container::DescriptionSeq_out::DescriptionSeq_out (const ::IR_Container::DescriptionSeq_out &p) // copy constructor
   : ptr_ (ACE_const_cast (DescriptionSeq_out&, p).ptr_)
 {}
 
-ACE_INLINE ::IR::Container::DescriptionSeq_out &
-IR::Container::DescriptionSeq_out::operator= (const ::IR::Container::DescriptionSeq_out &p)
+ACE_INLINE ::IR_Container::DescriptionSeq_out &
+IR_Container::DescriptionSeq_out::operator= (const ::IR_Container::DescriptionSeq_out &p)
 {
   this->ptr_ = ACE_const_cast (DescriptionSeq_out&, p).ptr_;
   return *this;
 }
 
-ACE_INLINE ::IR::Container::DescriptionSeq_out &
-IR::Container::DescriptionSeq_out::operator= (DescriptionSeq *p)
+ACE_INLINE ::IR_Container::DescriptionSeq_out &
+IR_Container::DescriptionSeq_out::operator= (DescriptionSeq *p)
 {
   this->ptr_ = p;
   return *this;
 }
 
 ACE_INLINE 
-IR::Container::DescriptionSeq_out::operator ::IR::Container::DescriptionSeq *&() // cast
+IR_Container::DescriptionSeq_out::operator ::IR_Container::DescriptionSeq *&() // cast
 {
   return this->ptr_;
 }
 
-ACE_INLINE ::IR::Container::DescriptionSeq *&
-IR::Container::DescriptionSeq_out::ptr (void) // ptr
+ACE_INLINE ::IR_Container::DescriptionSeq *&
+IR_Container::DescriptionSeq_out::ptr (void) // ptr
 {
   return this->ptr_;
 }
 
-ACE_INLINE ::IR::Container::DescriptionSeq *
-IR::Container::DescriptionSeq_out::operator-> (void)
+ACE_INLINE ::IR_Container::DescriptionSeq *
+IR_Container::DescriptionSeq_out::operator-> (void)
 {
   return this->ptr_;
 }
 
-ACE_INLINE IR::Container::Description &
-IR::Container::DescriptionSeq_out::operator[] (CORBA::ULong index)
+ACE_INLINE IR_Container::Description &
+IR_Container::DescriptionSeq_out::operator[] (CORBA::ULong index)
 {
   return this->ptr_->operator[] (index);
 }
 
-
-#endif /* end #if !defined */
-
-
-#if !defined (_IR_PRIMITIVEDEF___CI_)
-#define _IR_PRIMITIVEDEF___CI_
-
 ACE_INLINE
-IR::PrimitiveDef::PrimitiveDef (
+IR_PrimitiveDef::IR_PrimitiveDef (
     TAO_Stub *objref,
     CORBA::Boolean _tao_collocated,
     TAO_Abstract_ServantBase *servant
@@ -12278,185 +11482,164 @@
   this->IR_PrimitiveDef_setup_collocation (_tao_collocated);
 }
 
-
-#endif /* end #if !defined */
-
-
-#if !defined (_IR_PRIMITIVEDEF___VAR_CI_)
-#define _IR_PRIMITIVEDEF___VAR_CI_
-
 // *************************************************************
-// Inline operations for class IR::PrimitiveDef_var
+// Inline operations for class IR_PrimitiveDef_var
 // *************************************************************
 
 ACE_INLINE
-IR::PrimitiveDef_var::PrimitiveDef_var (void) // default constructor
-  : ptr_ (IR::PrimitiveDef::_nil ())
+IR_PrimitiveDef_var::IR_PrimitiveDef_var (void) // default constructor
+  : ptr_ (IR_PrimitiveDef::_nil ())
 {}
 
-ACE_INLINE IR::PrimitiveDef_ptr 
-IR::PrimitiveDef_var::ptr (void) const
+ACE_INLINE IR_PrimitiveDef_ptr 
+IR_PrimitiveDef_var::ptr (void) const
 {
   return this->ptr_;
 }
 
 ACE_INLINE
-IR::PrimitiveDef_var::PrimitiveDef_var (const IR::PrimitiveDef_var &p) // copy constructor
+IR_PrimitiveDef_var::IR_PrimitiveDef_var (const IR_PrimitiveDef_var &p) // copy constructor
   : TAO_Base_var (),
-    ptr_ (PrimitiveDef::_duplicate (p.ptr ()))
+    ptr_ (IR_PrimitiveDef::_duplicate (p.ptr ()))
 {}
 
 ACE_INLINE
-IR::PrimitiveDef_var::~PrimitiveDef_var (void) // destructor
+IR_PrimitiveDef_var::~IR_PrimitiveDef_var (void) // destructor
 {
   CORBA::release (this->ptr_);
 }
 
-ACE_INLINE IR::PrimitiveDef_var &
-IR::PrimitiveDef_var::operator= (IR::PrimitiveDef_ptr p)
+ACE_INLINE IR_PrimitiveDef_var &
+IR_PrimitiveDef_var::operator= (IR_PrimitiveDef_ptr p)
 {
   CORBA::release (this->ptr_);
   this->ptr_ = p;
   return *this;
 }
 
-ACE_INLINE IR::PrimitiveDef_var &
-IR::PrimitiveDef_var::operator= (const IR::PrimitiveDef_var &p)
+ACE_INLINE IR_PrimitiveDef_var &
+IR_PrimitiveDef_var::operator= (const IR_PrimitiveDef_var &p)
 {
   if (this != &p)
   {
     CORBA::release (this->ptr_);
-    this->ptr_ = IR::PrimitiveDef::_duplicate (p.ptr ());
+    this->ptr_ = IR_PrimitiveDef::_duplicate (p.ptr ());
   }
   return *this;
 }
 
 ACE_INLINE 
-IR::PrimitiveDef_var::operator const IR::PrimitiveDef_ptr &() const // cast
+IR_PrimitiveDef_var::operator const IR_PrimitiveDef_ptr &() const // cast
 {
   return this->ptr_;
 }
 
 ACE_INLINE 
-IR::PrimitiveDef_var::operator IR::PrimitiveDef_ptr &() // cast 
+IR_PrimitiveDef_var::operator IR_PrimitiveDef_ptr &() // cast 
 {
   return this->ptr_;
 }
 
-ACE_INLINE IR::PrimitiveDef_ptr 
-IR::PrimitiveDef_var::operator-> (void) const
+ACE_INLINE IR_PrimitiveDef_ptr 
+IR_PrimitiveDef_var::operator-> (void) const
 {
   return this->ptr_;
 }
 
-ACE_INLINE IR::PrimitiveDef_ptr
-IR::PrimitiveDef_var::in (void) const
+ACE_INLINE IR_PrimitiveDef_ptr
+IR_PrimitiveDef_var::in (void) const
 {
   return this->ptr_;
 }
 
-ACE_INLINE IR::PrimitiveDef_ptr &
-IR::PrimitiveDef_var::inout (void)
+ACE_INLINE IR_PrimitiveDef_ptr &
+IR_PrimitiveDef_var::inout (void)
 {
   return this->ptr_;
 }
 
-ACE_INLINE IR::PrimitiveDef_ptr &
-IR::PrimitiveDef_var::out (void)
+ACE_INLINE IR_PrimitiveDef_ptr &
+IR_PrimitiveDef_var::out (void)
 {
   CORBA::release (this->ptr_);
-  this->ptr_ = IR::PrimitiveDef::_nil ();
+  this->ptr_ = IR_PrimitiveDef::_nil ();
   return this->ptr_;
 }
 
-ACE_INLINE IR::PrimitiveDef_ptr 
-IR::PrimitiveDef_var::_retn (void)
+ACE_INLINE IR_PrimitiveDef_ptr 
+IR_PrimitiveDef_var::_retn (void)
 {
   // yield ownership of managed obj reference
-  IR::PrimitiveDef_ptr val = this->ptr_;
-  this->ptr_ = IR::PrimitiveDef::_nil ();
+  IR_PrimitiveDef_ptr val = this->ptr_;
+  this->ptr_ = IR_PrimitiveDef::_nil ();
   return val;
 }
 
-
-#endif /* end #if !defined */
-
-
-#if !defined (_IR_PRIMITIVEDEF___OUT_CI_)
-#define _IR_PRIMITIVEDEF___OUT_CI_
-
 // *************************************************************
-// Inline operations for class IR::PrimitiveDef_out
+// Inline operations for class IR_PrimitiveDef_out
 // *************************************************************
 
 ACE_INLINE
-IR::PrimitiveDef_out::PrimitiveDef_out (IR::PrimitiveDef_ptr &p)
+IR_PrimitiveDef_out::IR_PrimitiveDef_out (IR_PrimitiveDef_ptr &p)
   : ptr_ (p)
 {
-  this->ptr_ = IR::PrimitiveDef::_nil ();
+  this->ptr_ = IR_PrimitiveDef::_nil ();
 }
 
 ACE_INLINE
-IR::PrimitiveDef_out::PrimitiveDef_out (IR::PrimitiveDef_var &p) // constructor from _var
+IR_PrimitiveDef_out::IR_PrimitiveDef_out (IR_PrimitiveDef_var &p) // constructor from _var
   : ptr_ (p.out ())
 {
   CORBA::release (this->ptr_);
-  this->ptr_ = IR::PrimitiveDef::_nil ();
+  this->ptr_ = IR_PrimitiveDef::_nil ();
 }
 
 ACE_INLINE
-IR::PrimitiveDef_out::PrimitiveDef_out (const IR::PrimitiveDef_out &p) // copy constructor
-  : ptr_ (ACE_const_cast (IR::PrimitiveDef_out&,p).ptr_)
+IR_PrimitiveDef_out::IR_PrimitiveDef_out (const IR_PrimitiveDef_out &p) // copy constructor
+  : ptr_ (ACE_const_cast (IR_PrimitiveDef_out&,p).ptr_)
 {}
 
-ACE_INLINE IR::PrimitiveDef_out &
-IR::PrimitiveDef_out::operator= (const IR::PrimitiveDef_out &p)
+ACE_INLINE IR_PrimitiveDef_out &
+IR_PrimitiveDef_out::operator= (const IR_PrimitiveDef_out &p)
 {
-  this->ptr_ = ACE_const_cast (IR::PrimitiveDef_out&,p).ptr_;
+  this->ptr_ = ACE_const_cast (IR_PrimitiveDef_out&,p).ptr_;
   return *this;
 }
 
-ACE_INLINE IR::PrimitiveDef_out &
-IR::PrimitiveDef_out::operator= (const IR::PrimitiveDef_var &p)
+ACE_INLINE IR_PrimitiveDef_out &
+IR_PrimitiveDef_out::operator= (const IR_PrimitiveDef_var &p)
 {
-  this->ptr_ = IR::PrimitiveDef::_duplicate (p.ptr ());
+  this->ptr_ = IR_PrimitiveDef::_duplicate (p.ptr ());
   return *this;
 }
 
-ACE_INLINE IR::PrimitiveDef_out &
-IR::PrimitiveDef_out::operator= (IR::PrimitiveDef_ptr p)
+ACE_INLINE IR_PrimitiveDef_out &
+IR_PrimitiveDef_out::operator= (IR_PrimitiveDef_ptr p)
 {
   this->ptr_ = p;
   return *this;
 }
 
 ACE_INLINE 
-IR::PrimitiveDef_out::operator IR::PrimitiveDef_ptr &() // cast
+IR_PrimitiveDef_out::operator IR_PrimitiveDef_ptr &() // cast
 {
   return this->ptr_;
 }
 
-ACE_INLINE IR::PrimitiveDef_ptr &
-IR::PrimitiveDef_out::ptr (void) // ptr
+ACE_INLINE IR_PrimitiveDef_ptr &
+IR_PrimitiveDef_out::ptr (void) // ptr
 {
   return this->ptr_;
 }
 
-ACE_INLINE IR::PrimitiveDef_ptr 
-IR::PrimitiveDef_out::operator-> (void)
+ACE_INLINE IR_PrimitiveDef_ptr 
+IR_PrimitiveDef_out::operator-> (void)
 {
   return this->ptr_;
 }
 
-
-#endif /* end #if !defined */
-
-
-#if !defined (_IR_STRINGDEF___CI_)
-#define _IR_STRINGDEF___CI_
-
 ACE_INLINE
-IR::StringDef::StringDef (
+IR_StringDef::IR_StringDef (
     TAO_Stub *objref,
     CORBA::Boolean _tao_collocated,
     TAO_Abstract_ServantBase *servant
@@ -12466,185 +11649,164 @@
   this->IR_StringDef_setup_collocation (_tao_collocated);
 }
 
-
-#endif /* end #if !defined */
-
-
-#if !defined (_IR_STRINGDEF___VAR_CI_)
-#define _IR_STRINGDEF___VAR_CI_
-
 // *************************************************************
-// Inline operations for class IR::StringDef_var
+// Inline operations for class IR_StringDef_var
 // *************************************************************
 
 ACE_INLINE
-IR::StringDef_var::StringDef_var (void) // default constructor
-  : ptr_ (IR::StringDef::_nil ())
+IR_StringDef_var::IR_StringDef_var (void) // default constructor
+  : ptr_ (IR_StringDef::_nil ())
 {}
 
-ACE_INLINE IR::StringDef_ptr 
-IR::StringDef_var::ptr (void) const
+ACE_INLINE IR_StringDef_ptr 
+IR_StringDef_var::ptr (void) const
 {
   return this->ptr_;
 }
 
 ACE_INLINE
-IR::StringDef_var::StringDef_var (const IR::StringDef_var &p) // copy constructor
+IR_StringDef_var::IR_StringDef_var (const IR_StringDef_var &p) // copy constructor
   : TAO_Base_var (),
-    ptr_ (StringDef::_duplicate (p.ptr ()))
+    ptr_ (IR_StringDef::_duplicate (p.ptr ()))
 {}
 
 ACE_INLINE
-IR::StringDef_var::~StringDef_var (void) // destructor
+IR_StringDef_var::~IR_StringDef_var (void) // destructor
 {
   CORBA::release (this->ptr_);
 }
 
-ACE_INLINE IR::StringDef_var &
-IR::StringDef_var::operator= (IR::StringDef_ptr p)
+ACE_INLINE IR_StringDef_var &
+IR_StringDef_var::operator= (IR_StringDef_ptr p)
 {
   CORBA::release (this->ptr_);
   this->ptr_ = p;
   return *this;
 }
 
-ACE_INLINE IR::StringDef_var &
-IR::StringDef_var::operator= (const IR::StringDef_var &p)
+ACE_INLINE IR_StringDef_var &
+IR_StringDef_var::operator= (const IR_StringDef_var &p)
 {
   if (this != &p)
   {
     CORBA::release (this->ptr_);
-    this->ptr_ = IR::StringDef::_duplicate (p.ptr ());
+    this->ptr_ = IR_StringDef::_duplicate (p.ptr ());
   }
   return *this;
 }
 
 ACE_INLINE 
-IR::StringDef_var::operator const IR::StringDef_ptr &() const // cast
+IR_StringDef_var::operator const IR_StringDef_ptr &() const // cast
 {
   return this->ptr_;
 }
 
 ACE_INLINE 
-IR::StringDef_var::operator IR::StringDef_ptr &() // cast 
+IR_StringDef_var::operator IR_StringDef_ptr &() // cast 
 {
   return this->ptr_;
 }
 
-ACE_INLINE IR::StringDef_ptr 
-IR::StringDef_var::operator-> (void) const
+ACE_INLINE IR_StringDef_ptr 
+IR_StringDef_var::operator-> (void) const
 {
   return this->ptr_;
 }
 
-ACE_INLINE IR::StringDef_ptr
-IR::StringDef_var::in (void) const
+ACE_INLINE IR_StringDef_ptr
+IR_StringDef_var::in (void) const
 {
   return this->ptr_;
 }
 
-ACE_INLINE IR::StringDef_ptr &
-IR::StringDef_var::inout (void)
+ACE_INLINE IR_StringDef_ptr &
+IR_StringDef_var::inout (void)
 {
   return this->ptr_;
 }
 
-ACE_INLINE IR::StringDef_ptr &
-IR::StringDef_var::out (void)
+ACE_INLINE IR_StringDef_ptr &
+IR_StringDef_var::out (void)
 {
   CORBA::release (this->ptr_);
-  this->ptr_ = IR::StringDef::_nil ();
+  this->ptr_ = IR_StringDef::_nil ();
   return this->ptr_;
 }
 
-ACE_INLINE IR::StringDef_ptr 
-IR::StringDef_var::_retn (void)
+ACE_INLINE IR_StringDef_ptr 
+IR_StringDef_var::_retn (void)
 {
   // yield ownership of managed obj reference
-  IR::StringDef_ptr val = this->ptr_;
-  this->ptr_ = IR::StringDef::_nil ();
+  IR_StringDef_ptr val = this->ptr_;
+  this->ptr_ = IR_StringDef::_nil ();
   return val;
 }
 
-
-#endif /* end #if !defined */
-
-
-#if !defined (_IR_STRINGDEF___OUT_CI_)
-#define _IR_STRINGDEF___OUT_CI_
-
 // *************************************************************
-// Inline operations for class IR::StringDef_out
+// Inline operations for class IR_StringDef_out
 // *************************************************************
 
 ACE_INLINE
-IR::StringDef_out::StringDef_out (IR::StringDef_ptr &p)
+IR_StringDef_out::IR_StringDef_out (IR_StringDef_ptr &p)
   : ptr_ (p)
 {
-  this->ptr_ = IR::StringDef::_nil ();
+  this->ptr_ = IR_StringDef::_nil ();
 }
 
 ACE_INLINE
-IR::StringDef_out::StringDef_out (IR::StringDef_var &p) // constructor from _var
+IR_StringDef_out::IR_StringDef_out (IR_StringDef_var &p) // constructor from _var
   : ptr_ (p.out ())
 {
   CORBA::release (this->ptr_);
-  this->ptr_ = IR::StringDef::_nil ();
+  this->ptr_ = IR_StringDef::_nil ();
 }
 
 ACE_INLINE
-IR::StringDef_out::StringDef_out (const IR::StringDef_out &p) // copy constructor
-  : ptr_ (ACE_const_cast (IR::StringDef_out&,p).ptr_)
+IR_StringDef_out::IR_StringDef_out (const IR_StringDef_out &p) // copy constructor
+  : ptr_ (ACE_const_cast (IR_StringDef_out&,p).ptr_)
 {}
 
-ACE_INLINE IR::StringDef_out &
-IR::StringDef_out::operator= (const IR::StringDef_out &p)
+ACE_INLINE IR_StringDef_out &
+IR_StringDef_out::operator= (const IR_StringDef_out &p)
 {
-  this->ptr_ = ACE_const_cast (IR::StringDef_out&,p).ptr_;
+  this->ptr_ = ACE_const_cast (IR_StringDef_out&,p).ptr_;
   return *this;
 }
 
-ACE_INLINE IR::StringDef_out &
-IR::StringDef_out::operator= (const IR::StringDef_var &p)
+ACE_INLINE IR_StringDef_out &
+IR_StringDef_out::operator= (const IR_StringDef_var &p)
 {
-  this->ptr_ = IR::StringDef::_duplicate (p.ptr ());
+  this->ptr_ = IR_StringDef::_duplicate (p.ptr ());
   return *this;
 }
 
-ACE_INLINE IR::StringDef_out &
-IR::StringDef_out::operator= (IR::StringDef_ptr p)
+ACE_INLINE IR_StringDef_out &
+IR_StringDef_out::operator= (IR_StringDef_ptr p)
 {
   this->ptr_ = p;
   return *this;
 }
 
 ACE_INLINE 
-IR::StringDef_out::operator IR::StringDef_ptr &() // cast
+IR_StringDef_out::operator IR_StringDef_ptr &() // cast
 {
   return this->ptr_;
 }
 
-ACE_INLINE IR::StringDef_ptr &
-IR::StringDef_out::ptr (void) // ptr
+ACE_INLINE IR_StringDef_ptr &
+IR_StringDef_out::ptr (void) // ptr
 {
   return this->ptr_;
 }
 
-ACE_INLINE IR::StringDef_ptr 
-IR::StringDef_out::operator-> (void)
+ACE_INLINE IR_StringDef_ptr 
+IR_StringDef_out::operator-> (void)
 {
   return this->ptr_;
 }
 
-
-#endif /* end #if !defined */
-
-
-#if !defined (_IR_SEQUENCEDEF___CI_)
-#define _IR_SEQUENCEDEF___CI_
-
 ACE_INLINE
-IR::SequenceDef::SequenceDef (
+IR_SequenceDef::IR_SequenceDef (
     TAO_Stub *objref,
     CORBA::Boolean _tao_collocated,
     TAO_Abstract_ServantBase *servant
@@ -12654,185 +11816,164 @@
   this->IR_SequenceDef_setup_collocation (_tao_collocated);
 }
 
-
-#endif /* end #if !defined */
-
-
-#if !defined (_IR_SEQUENCEDEF___VAR_CI_)
-#define _IR_SEQUENCEDEF___VAR_CI_
-
 // *************************************************************
-// Inline operations for class IR::SequenceDef_var
+// Inline operations for class IR_SequenceDef_var
 // *************************************************************
 
 ACE_INLINE
-IR::SequenceDef_var::SequenceDef_var (void) // default constructor
-  : ptr_ (IR::SequenceDef::_nil ())
+IR_SequenceDef_var::IR_SequenceDef_var (void) // default constructor
+  : ptr_ (IR_SequenceDef::_nil ())
 {}
 
-ACE_INLINE IR::SequenceDef_ptr 
-IR::SequenceDef_var::ptr (void) const
+ACE_INLINE IR_SequenceDef_ptr 
+IR_SequenceDef_var::ptr (void) const
 {
   return this->ptr_;
 }
 
 ACE_INLINE
-IR::SequenceDef_var::SequenceDef_var (const IR::SequenceDef_var &p) // copy constructor
+IR_SequenceDef_var::IR_SequenceDef_var (const IR_SequenceDef_var &p) // copy constructor
   : TAO_Base_var (),
-    ptr_ (SequenceDef::_duplicate (p.ptr ()))
+    ptr_ (IR_SequenceDef::_duplicate (p.ptr ()))
 {}
 
 ACE_INLINE
-IR::SequenceDef_var::~SequenceDef_var (void) // destructor
+IR_SequenceDef_var::~IR_SequenceDef_var (void) // destructor
 {
   CORBA::release (this->ptr_);
 }
 
-ACE_INLINE IR::SequenceDef_var &
-IR::SequenceDef_var::operator= (IR::SequenceDef_ptr p)
+ACE_INLINE IR_SequenceDef_var &
+IR_SequenceDef_var::operator= (IR_SequenceDef_ptr p)
 {
   CORBA::release (this->ptr_);
   this->ptr_ = p;
   return *this;
 }
 
-ACE_INLINE IR::SequenceDef_var &
-IR::SequenceDef_var::operator= (const IR::SequenceDef_var &p)
+ACE_INLINE IR_SequenceDef_var &
+IR_SequenceDef_var::operator= (const IR_SequenceDef_var &p)
 {
   if (this != &p)
   {
     CORBA::release (this->ptr_);
-    this->ptr_ = IR::SequenceDef::_duplicate (p.ptr ());
+    this->ptr_ = IR_SequenceDef::_duplicate (p.ptr ());
   }
   return *this;
 }
 
 ACE_INLINE 
-IR::SequenceDef_var::operator const IR::SequenceDef_ptr &() const // cast
+IR_SequenceDef_var::operator const IR_SequenceDef_ptr &() const // cast
 {
   return this->ptr_;
 }
 
 ACE_INLINE 
-IR::SequenceDef_var::operator IR::SequenceDef_ptr &() // cast 
+IR_SequenceDef_var::operator IR_SequenceDef_ptr &() // cast 
 {
   return this->ptr_;
 }
 
-ACE_INLINE IR::SequenceDef_ptr 
-IR::SequenceDef_var::operator-> (void) const
+ACE_INLINE IR_SequenceDef_ptr 
+IR_SequenceDef_var::operator-> (void) const
 {
   return this->ptr_;
 }
 
-ACE_INLINE IR::SequenceDef_ptr
-IR::SequenceDef_var::in (void) const
+ACE_INLINE IR_SequenceDef_ptr
+IR_SequenceDef_var::in (void) const
 {
   return this->ptr_;
 }
 
-ACE_INLINE IR::SequenceDef_ptr &
-IR::SequenceDef_var::inout (void)
+ACE_INLINE IR_SequenceDef_ptr &
+IR_SequenceDef_var::inout (void)
 {
   return this->ptr_;
 }
 
-ACE_INLINE IR::SequenceDef_ptr &
-IR::SequenceDef_var::out (void)
+ACE_INLINE IR_SequenceDef_ptr &
+IR_SequenceDef_var::out (void)
 {
   CORBA::release (this->ptr_);
-  this->ptr_ = IR::SequenceDef::_nil ();
+  this->ptr_ = IR_SequenceDef::_nil ();
   return this->ptr_;
 }
 
-ACE_INLINE IR::SequenceDef_ptr 
-IR::SequenceDef_var::_retn (void)
+ACE_INLINE IR_SequenceDef_ptr 
+IR_SequenceDef_var::_retn (void)
 {
   // yield ownership of managed obj reference
-  IR::SequenceDef_ptr val = this->ptr_;
-  this->ptr_ = IR::SequenceDef::_nil ();
+  IR_SequenceDef_ptr val = this->ptr_;
+  this->ptr_ = IR_SequenceDef::_nil ();
   return val;
 }
 
-
-#endif /* end #if !defined */
-
-
-#if !defined (_IR_SEQUENCEDEF___OUT_CI_)
-#define _IR_SEQUENCEDEF___OUT_CI_
-
 // *************************************************************
-// Inline operations for class IR::SequenceDef_out
+// Inline operations for class IR_SequenceDef_out
 // *************************************************************
 
 ACE_INLINE
-IR::SequenceDef_out::SequenceDef_out (IR::SequenceDef_ptr &p)
+IR_SequenceDef_out::IR_SequenceDef_out (IR_SequenceDef_ptr &p)
   : ptr_ (p)
 {
-  this->ptr_ = IR::SequenceDef::_nil ();
+  this->ptr_ = IR_SequenceDef::_nil ();
 }
 
 ACE_INLINE
-IR::SequenceDef_out::SequenceDef_out (IR::SequenceDef_var &p) // constructor from _var
+IR_SequenceDef_out::IR_SequenceDef_out (IR_SequenceDef_var &p) // constructor from _var
   : ptr_ (p.out ())
 {
   CORBA::release (this->ptr_);
-  this->ptr_ = IR::SequenceDef::_nil ();
+  this->ptr_ = IR_SequenceDef::_nil ();
 }
 
 ACE_INLINE
-IR::SequenceDef_out::SequenceDef_out (const IR::SequenceDef_out &p) // copy constructor
-  : ptr_ (ACE_const_cast (IR::SequenceDef_out&,p).ptr_)
+IR_SequenceDef_out::IR_SequenceDef_out (const IR_SequenceDef_out &p) // copy constructor
+  : ptr_ (ACE_const_cast (IR_SequenceDef_out&,p).ptr_)
 {}
 
-ACE_INLINE IR::SequenceDef_out &
-IR::SequenceDef_out::operator= (const IR::SequenceDef_out &p)
+ACE_INLINE IR_SequenceDef_out &
+IR_SequenceDef_out::operator= (const IR_SequenceDef_out &p)
 {
-  this->ptr_ = ACE_const_cast (IR::SequenceDef_out&,p).ptr_;
+  this->ptr_ = ACE_const_cast (IR_SequenceDef_out&,p).ptr_;
   return *this;
 }
 
-ACE_INLINE IR::SequenceDef_out &
-IR::SequenceDef_out::operator= (const IR::SequenceDef_var &p)
+ACE_INLINE IR_SequenceDef_out &
+IR_SequenceDef_out::operator= (const IR_SequenceDef_var &p)
 {
-  this->ptr_ = IR::SequenceDef::_duplicate (p.ptr ());
+  this->ptr_ = IR_SequenceDef::_duplicate (p.ptr ());
   return *this;
 }
 
-ACE_INLINE IR::SequenceDef_out &
-IR::SequenceDef_out::operator= (IR::SequenceDef_ptr p)
+ACE_INLINE IR_SequenceDef_out &
+IR_SequenceDef_out::operator= (IR_SequenceDef_ptr p)
 {
   this->ptr_ = p;
   return *this;
 }
 
 ACE_INLINE 
-IR::SequenceDef_out::operator IR::SequenceDef_ptr &() // cast
+IR_SequenceDef_out::operator IR_SequenceDef_ptr &() // cast
 {
   return this->ptr_;
 }
 
-ACE_INLINE IR::SequenceDef_ptr &
-IR::SequenceDef_out::ptr (void) // ptr
+ACE_INLINE IR_SequenceDef_ptr &
+IR_SequenceDef_out::ptr (void) // ptr
 {
   return this->ptr_;
 }
 
-ACE_INLINE IR::SequenceDef_ptr 
-IR::SequenceDef_out::operator-> (void)
+ACE_INLINE IR_SequenceDef_ptr 
+IR_SequenceDef_out::operator-> (void)
 {
   return this->ptr_;
 }
 
-
-#endif /* end #if !defined */
-
-
-#if !defined (_IR_ARRAYDEF___CI_)
-#define _IR_ARRAYDEF___CI_
-
 ACE_INLINE
-IR::ArrayDef::ArrayDef (
+IR_ArrayDef::IR_ArrayDef (
     TAO_Stub *objref,
     CORBA::Boolean _tao_collocated,
     TAO_Abstract_ServantBase *servant
@@ -12842,185 +11983,164 @@
   this->IR_ArrayDef_setup_collocation (_tao_collocated);
 }
 
-
-#endif /* end #if !defined */
-
-
-#if !defined (_IR_ARRAYDEF___VAR_CI_)
-#define _IR_ARRAYDEF___VAR_CI_
-
 // *************************************************************
-// Inline operations for class IR::ArrayDef_var
+// Inline operations for class IR_ArrayDef_var
 // *************************************************************
 
 ACE_INLINE
-IR::ArrayDef_var::ArrayDef_var (void) // default constructor
-  : ptr_ (IR::ArrayDef::_nil ())
+IR_ArrayDef_var::IR_ArrayDef_var (void) // default constructor
+  : ptr_ (IR_ArrayDef::_nil ())
 {}
 
-ACE_INLINE IR::ArrayDef_ptr 
-IR::ArrayDef_var::ptr (void) const
+ACE_INLINE IR_ArrayDef_ptr 
+IR_ArrayDef_var::ptr (void) const
 {
   return this->ptr_;
 }
 
 ACE_INLINE
-IR::ArrayDef_var::ArrayDef_var (const IR::ArrayDef_var &p) // copy constructor
+IR_ArrayDef_var::IR_ArrayDef_var (const IR_ArrayDef_var &p) // copy constructor
   : TAO_Base_var (),
-    ptr_ (ArrayDef::_duplicate (p.ptr ()))
+    ptr_ (IR_ArrayDef::_duplicate (p.ptr ()))
 {}
 
 ACE_INLINE
-IR::ArrayDef_var::~ArrayDef_var (void) // destructor
+IR_ArrayDef_var::~IR_ArrayDef_var (void) // destructor
 {
   CORBA::release (this->ptr_);
 }
 
-ACE_INLINE IR::ArrayDef_var &
-IR::ArrayDef_var::operator= (IR::ArrayDef_ptr p)
+ACE_INLINE IR_ArrayDef_var &
+IR_ArrayDef_var::operator= (IR_ArrayDef_ptr p)
 {
   CORBA::release (this->ptr_);
   this->ptr_ = p;
   return *this;
 }
 
-ACE_INLINE IR::ArrayDef_var &
-IR::ArrayDef_var::operator= (const IR::ArrayDef_var &p)
+ACE_INLINE IR_ArrayDef_var &
+IR_ArrayDef_var::operator= (const IR_ArrayDef_var &p)
 {
   if (this != &p)
   {
     CORBA::release (this->ptr_);
-    this->ptr_ = IR::ArrayDef::_duplicate (p.ptr ());
+    this->ptr_ = IR_ArrayDef::_duplicate (p.ptr ());
   }
   return *this;
 }
 
 ACE_INLINE 
-IR::ArrayDef_var::operator const IR::ArrayDef_ptr &() const // cast
+IR_ArrayDef_var::operator const IR_ArrayDef_ptr &() const // cast
 {
   return this->ptr_;
 }
 
 ACE_INLINE 
-IR::ArrayDef_var::operator IR::ArrayDef_ptr &() // cast 
+IR_ArrayDef_var::operator IR_ArrayDef_ptr &() // cast 
 {
   return this->ptr_;
 }
 
-ACE_INLINE IR::ArrayDef_ptr 
-IR::ArrayDef_var::operator-> (void) const
+ACE_INLINE IR_ArrayDef_ptr 
+IR_ArrayDef_var::operator-> (void) const
 {
   return this->ptr_;
 }
 
-ACE_INLINE IR::ArrayDef_ptr
-IR::ArrayDef_var::in (void) const
+ACE_INLINE IR_ArrayDef_ptr
+IR_ArrayDef_var::in (void) const
 {
   return this->ptr_;
 }
 
-ACE_INLINE IR::ArrayDef_ptr &
-IR::ArrayDef_var::inout (void)
+ACE_INLINE IR_ArrayDef_ptr &
+IR_ArrayDef_var::inout (void)
 {
   return this->ptr_;
 }
 
-ACE_INLINE IR::ArrayDef_ptr &
-IR::ArrayDef_var::out (void)
+ACE_INLINE IR_ArrayDef_ptr &
+IR_ArrayDef_var::out (void)
 {
   CORBA::release (this->ptr_);
-  this->ptr_ = IR::ArrayDef::_nil ();
+  this->ptr_ = IR_ArrayDef::_nil ();
   return this->ptr_;
 }
 
-ACE_INLINE IR::ArrayDef_ptr 
-IR::ArrayDef_var::_retn (void)
+ACE_INLINE IR_ArrayDef_ptr 
+IR_ArrayDef_var::_retn (void)
 {
   // yield ownership of managed obj reference
-  IR::ArrayDef_ptr val = this->ptr_;
-  this->ptr_ = IR::ArrayDef::_nil ();
+  IR_ArrayDef_ptr val = this->ptr_;
+  this->ptr_ = IR_ArrayDef::_nil ();
   return val;
 }
 
-
-#endif /* end #if !defined */
-
-
-#if !defined (_IR_ARRAYDEF___OUT_CI_)
-#define _IR_ARRAYDEF___OUT_CI_
-
 // *************************************************************
-// Inline operations for class IR::ArrayDef_out
+// Inline operations for class IR_ArrayDef_out
 // *************************************************************
 
 ACE_INLINE
-IR::ArrayDef_out::ArrayDef_out (IR::ArrayDef_ptr &p)
+IR_ArrayDef_out::IR_ArrayDef_out (IR_ArrayDef_ptr &p)
   : ptr_ (p)
 {
-  this->ptr_ = IR::ArrayDef::_nil ();
+  this->ptr_ = IR_ArrayDef::_nil ();
 }
 
 ACE_INLINE
-IR::ArrayDef_out::ArrayDef_out (IR::ArrayDef_var &p) // constructor from _var
+IR_ArrayDef_out::IR_ArrayDef_out (IR_ArrayDef_var &p) // constructor from _var
   : ptr_ (p.out ())
 {
   CORBA::release (this->ptr_);
-  this->ptr_ = IR::ArrayDef::_nil ();
+  this->ptr_ = IR_ArrayDef::_nil ();
 }
 
 ACE_INLINE
-IR::ArrayDef_out::ArrayDef_out (const IR::ArrayDef_out &p) // copy constructor
-  : ptr_ (ACE_const_cast (IR::ArrayDef_out&,p).ptr_)
+IR_ArrayDef_out::IR_ArrayDef_out (const IR_ArrayDef_out &p) // copy constructor
+  : ptr_ (ACE_const_cast (IR_ArrayDef_out&,p).ptr_)
 {}
 
-ACE_INLINE IR::ArrayDef_out &
-IR::ArrayDef_out::operator= (const IR::ArrayDef_out &p)
+ACE_INLINE IR_ArrayDef_out &
+IR_ArrayDef_out::operator= (const IR_ArrayDef_out &p)
 {
-  this->ptr_ = ACE_const_cast (IR::ArrayDef_out&,p).ptr_;
+  this->ptr_ = ACE_const_cast (IR_ArrayDef_out&,p).ptr_;
   return *this;
 }
 
-ACE_INLINE IR::ArrayDef_out &
-IR::ArrayDef_out::operator= (const IR::ArrayDef_var &p)
+ACE_INLINE IR_ArrayDef_out &
+IR_ArrayDef_out::operator= (const IR_ArrayDef_var &p)
 {
-  this->ptr_ = IR::ArrayDef::_duplicate (p.ptr ());
+  this->ptr_ = IR_ArrayDef::_duplicate (p.ptr ());
   return *this;
 }
 
-ACE_INLINE IR::ArrayDef_out &
-IR::ArrayDef_out::operator= (IR::ArrayDef_ptr p)
+ACE_INLINE IR_ArrayDef_out &
+IR_ArrayDef_out::operator= (IR_ArrayDef_ptr p)
 {
   this->ptr_ = p;
   return *this;
 }
 
 ACE_INLINE 
-IR::ArrayDef_out::operator IR::ArrayDef_ptr &() // cast
+IR_ArrayDef_out::operator IR_ArrayDef_ptr &() // cast
 {
   return this->ptr_;
 }
 
-ACE_INLINE IR::ArrayDef_ptr &
-IR::ArrayDef_out::ptr (void) // ptr
+ACE_INLINE IR_ArrayDef_ptr &
+IR_ArrayDef_out::ptr (void) // ptr
 {
   return this->ptr_;
 }
 
-ACE_INLINE IR::ArrayDef_ptr 
-IR::ArrayDef_out::operator-> (void)
+ACE_INLINE IR_ArrayDef_ptr 
+IR_ArrayDef_out::operator-> (void)
 {
   return this->ptr_;
 }
 
-
-#endif /* end #if !defined */
-
-
-#if !defined (_IR_WSTRINGDEF___CI_)
-#define _IR_WSTRINGDEF___CI_
-
 ACE_INLINE
-IR::WstringDef::WstringDef (
+IR_WstringDef::IR_WstringDef (
     TAO_Stub *objref,
     CORBA::Boolean _tao_collocated,
     TAO_Abstract_ServantBase *servant
@@ -13030,185 +12150,164 @@
   this->IR_WstringDef_setup_collocation (_tao_collocated);
 }
 
-
-#endif /* end #if !defined */
-
-
-#if !defined (_IR_WSTRINGDEF___VAR_CI_)
-#define _IR_WSTRINGDEF___VAR_CI_
-
 // *************************************************************
-// Inline operations for class IR::WstringDef_var
+// Inline operations for class IR_WstringDef_var
 // *************************************************************
 
 ACE_INLINE
-IR::WstringDef_var::WstringDef_var (void) // default constructor
-  : ptr_ (IR::WstringDef::_nil ())
+IR_WstringDef_var::IR_WstringDef_var (void) // default constructor
+  : ptr_ (IR_WstringDef::_nil ())
 {}
 
-ACE_INLINE IR::WstringDef_ptr 
-IR::WstringDef_var::ptr (void) const
+ACE_INLINE IR_WstringDef_ptr 
+IR_WstringDef_var::ptr (void) const
 {
   return this->ptr_;
 }
 
 ACE_INLINE
-IR::WstringDef_var::WstringDef_var (const IR::WstringDef_var &p) // copy constructor
+IR_WstringDef_var::IR_WstringDef_var (const IR_WstringDef_var &p) // copy constructor
   : TAO_Base_var (),
-    ptr_ (WstringDef::_duplicate (p.ptr ()))
+    ptr_ (IR_WstringDef::_duplicate (p.ptr ()))
 {}
 
 ACE_INLINE
-IR::WstringDef_var::~WstringDef_var (void) // destructor
+IR_WstringDef_var::~IR_WstringDef_var (void) // destructor
 {
   CORBA::release (this->ptr_);
 }
 
-ACE_INLINE IR::WstringDef_var &
-IR::WstringDef_var::operator= (IR::WstringDef_ptr p)
+ACE_INLINE IR_WstringDef_var &
+IR_WstringDef_var::operator= (IR_WstringDef_ptr p)
 {
   CORBA::release (this->ptr_);
   this->ptr_ = p;
   return *this;
 }
 
-ACE_INLINE IR::WstringDef_var &
-IR::WstringDef_var::operator= (const IR::WstringDef_var &p)
+ACE_INLINE IR_WstringDef_var &
+IR_WstringDef_var::operator= (const IR_WstringDef_var &p)
 {
   if (this != &p)
   {
     CORBA::release (this->ptr_);
-    this->ptr_ = IR::WstringDef::_duplicate (p.ptr ());
+    this->ptr_ = IR_WstringDef::_duplicate (p.ptr ());
   }
   return *this;
 }
 
 ACE_INLINE 
-IR::WstringDef_var::operator const IR::WstringDef_ptr &() const // cast
+IR_WstringDef_var::operator const IR_WstringDef_ptr &() const // cast
 {
   return this->ptr_;
 }
 
 ACE_INLINE 
-IR::WstringDef_var::operator IR::WstringDef_ptr &() // cast 
+IR_WstringDef_var::operator IR_WstringDef_ptr &() // cast 
 {
   return this->ptr_;
 }
 
-ACE_INLINE IR::WstringDef_ptr 
-IR::WstringDef_var::operator-> (void) const
+ACE_INLINE IR_WstringDef_ptr 
+IR_WstringDef_var::operator-> (void) const
 {
   return this->ptr_;
 }
 
-ACE_INLINE IR::WstringDef_ptr
-IR::WstringDef_var::in (void) const
+ACE_INLINE IR_WstringDef_ptr
+IR_WstringDef_var::in (void) const
 {
   return this->ptr_;
 }
 
-ACE_INLINE IR::WstringDef_ptr &
-IR::WstringDef_var::inout (void)
+ACE_INLINE IR_WstringDef_ptr &
+IR_WstringDef_var::inout (void)
 {
   return this->ptr_;
 }
 
-ACE_INLINE IR::WstringDef_ptr &
-IR::WstringDef_var::out (void)
+ACE_INLINE IR_WstringDef_ptr &
+IR_WstringDef_var::out (void)
 {
   CORBA::release (this->ptr_);
-  this->ptr_ = IR::WstringDef::_nil ();
+  this->ptr_ = IR_WstringDef::_nil ();
   return this->ptr_;
 }
 
-ACE_INLINE IR::WstringDef_ptr 
-IR::WstringDef_var::_retn (void)
+ACE_INLINE IR_WstringDef_ptr 
+IR_WstringDef_var::_retn (void)
 {
   // yield ownership of managed obj reference
-  IR::WstringDef_ptr val = this->ptr_;
-  this->ptr_ = IR::WstringDef::_nil ();
+  IR_WstringDef_ptr val = this->ptr_;
+  this->ptr_ = IR_WstringDef::_nil ();
   return val;
 }
 
-
-#endif /* end #if !defined */
-
-
-#if !defined (_IR_WSTRINGDEF___OUT_CI_)
-#define _IR_WSTRINGDEF___OUT_CI_
-
 // *************************************************************
-// Inline operations for class IR::WstringDef_out
+// Inline operations for class IR_WstringDef_out
 // *************************************************************
 
 ACE_INLINE
-IR::WstringDef_out::WstringDef_out (IR::WstringDef_ptr &p)
+IR_WstringDef_out::IR_WstringDef_out (IR_WstringDef_ptr &p)
   : ptr_ (p)
 {
-  this->ptr_ = IR::WstringDef::_nil ();
+  this->ptr_ = IR_WstringDef::_nil ();
 }
 
 ACE_INLINE
-IR::WstringDef_out::WstringDef_out (IR::WstringDef_var &p) // constructor from _var
+IR_WstringDef_out::IR_WstringDef_out (IR_WstringDef_var &p) // constructor from _var
   : ptr_ (p.out ())
 {
   CORBA::release (this->ptr_);
-  this->ptr_ = IR::WstringDef::_nil ();
+  this->ptr_ = IR_WstringDef::_nil ();
 }
 
 ACE_INLINE
-IR::WstringDef_out::WstringDef_out (const IR::WstringDef_out &p) // copy constructor
-  : ptr_ (ACE_const_cast (IR::WstringDef_out&,p).ptr_)
+IR_WstringDef_out::IR_WstringDef_out (const IR_WstringDef_out &p) // copy constructor
+  : ptr_ (ACE_const_cast (IR_WstringDef_out&,p).ptr_)
 {}
 
-ACE_INLINE IR::WstringDef_out &
-IR::WstringDef_out::operator= (const IR::WstringDef_out &p)
+ACE_INLINE IR_WstringDef_out &
+IR_WstringDef_out::operator= (const IR_WstringDef_out &p)
 {
-  this->ptr_ = ACE_const_cast (IR::WstringDef_out&,p).ptr_;
+  this->ptr_ = ACE_const_cast (IR_WstringDef_out&,p).ptr_;
   return *this;
 }
 
-ACE_INLINE IR::WstringDef_out &
-IR::WstringDef_out::operator= (const IR::WstringDef_var &p)
+ACE_INLINE IR_WstringDef_out &
+IR_WstringDef_out::operator= (const IR_WstringDef_var &p)
 {
-  this->ptr_ = IR::WstringDef::_duplicate (p.ptr ());
+  this->ptr_ = IR_WstringDef::_duplicate (p.ptr ());
   return *this;
 }
 
-ACE_INLINE IR::WstringDef_out &
-IR::WstringDef_out::operator= (IR::WstringDef_ptr p)
+ACE_INLINE IR_WstringDef_out &
+IR_WstringDef_out::operator= (IR_WstringDef_ptr p)
 {
   this->ptr_ = p;
   return *this;
 }
 
 ACE_INLINE 
-IR::WstringDef_out::operator IR::WstringDef_ptr &() // cast
+IR_WstringDef_out::operator IR_WstringDef_ptr &() // cast
 {
   return this->ptr_;
 }
 
-ACE_INLINE IR::WstringDef_ptr &
-IR::WstringDef_out::ptr (void) // ptr
+ACE_INLINE IR_WstringDef_ptr &
+IR_WstringDef_out::ptr (void) // ptr
 {
   return this->ptr_;
 }
 
-ACE_INLINE IR::WstringDef_ptr 
-IR::WstringDef_out::operator-> (void)
+ACE_INLINE IR_WstringDef_ptr 
+IR_WstringDef_out::operator-> (void)
 {
   return this->ptr_;
 }
 
-
-#endif /* end #if !defined */
-
-
-#if !defined (_IR_FIXEDDEF___CI_)
-#define _IR_FIXEDDEF___CI_
-
 ACE_INLINE
-IR::FixedDef::FixedDef (
+IR_FixedDef::IR_FixedDef (
     TAO_Stub *objref,
     CORBA::Boolean _tao_collocated,
     TAO_Abstract_ServantBase *servant
@@ -13218,185 +12317,164 @@
   this->IR_FixedDef_setup_collocation (_tao_collocated);
 }
 
-
-#endif /* end #if !defined */
-
-
-#if !defined (_IR_FIXEDDEF___VAR_CI_)
-#define _IR_FIXEDDEF___VAR_CI_
-
 // *************************************************************
-// Inline operations for class IR::FixedDef_var
+// Inline operations for class IR_FixedDef_var
 // *************************************************************
 
 ACE_INLINE
-IR::FixedDef_var::FixedDef_var (void) // default constructor
-  : ptr_ (IR::FixedDef::_nil ())
+IR_FixedDef_var::IR_FixedDef_var (void) // default constructor
+  : ptr_ (IR_FixedDef::_nil ())
 {}
 
-ACE_INLINE IR::FixedDef_ptr 
-IR::FixedDef_var::ptr (void) const
+ACE_INLINE IR_FixedDef_ptr 
+IR_FixedDef_var::ptr (void) const
 {
   return this->ptr_;
 }
 
 ACE_INLINE
-IR::FixedDef_var::FixedDef_var (const IR::FixedDef_var &p) // copy constructor
+IR_FixedDef_var::IR_FixedDef_var (const IR_FixedDef_var &p) // copy constructor
   : TAO_Base_var (),
-    ptr_ (FixedDef::_duplicate (p.ptr ()))
+    ptr_ (IR_FixedDef::_duplicate (p.ptr ()))
 {}
 
 ACE_INLINE
-IR::FixedDef_var::~FixedDef_var (void) // destructor
+IR_FixedDef_var::~IR_FixedDef_var (void) // destructor
 {
   CORBA::release (this->ptr_);
 }
 
-ACE_INLINE IR::FixedDef_var &
-IR::FixedDef_var::operator= (IR::FixedDef_ptr p)
+ACE_INLINE IR_FixedDef_var &
+IR_FixedDef_var::operator= (IR_FixedDef_ptr p)
 {
   CORBA::release (this->ptr_);
   this->ptr_ = p;
   return *this;
 }
 
-ACE_INLINE IR::FixedDef_var &
-IR::FixedDef_var::operator= (const IR::FixedDef_var &p)
+ACE_INLINE IR_FixedDef_var &
+IR_FixedDef_var::operator= (const IR_FixedDef_var &p)
 {
   if (this != &p)
   {
     CORBA::release (this->ptr_);
-    this->ptr_ = IR::FixedDef::_duplicate (p.ptr ());
+    this->ptr_ = IR_FixedDef::_duplicate (p.ptr ());
   }
   return *this;
 }
 
 ACE_INLINE 
-IR::FixedDef_var::operator const IR::FixedDef_ptr &() const // cast
+IR_FixedDef_var::operator const IR_FixedDef_ptr &() const // cast
 {
   return this->ptr_;
 }
 
 ACE_INLINE 
-IR::FixedDef_var::operator IR::FixedDef_ptr &() // cast 
+IR_FixedDef_var::operator IR_FixedDef_ptr &() // cast 
 {
   return this->ptr_;
 }
 
-ACE_INLINE IR::FixedDef_ptr 
-IR::FixedDef_var::operator-> (void) const
+ACE_INLINE IR_FixedDef_ptr 
+IR_FixedDef_var::operator-> (void) const
 {
   return this->ptr_;
 }
 
-ACE_INLINE IR::FixedDef_ptr
-IR::FixedDef_var::in (void) const
+ACE_INLINE IR_FixedDef_ptr
+IR_FixedDef_var::in (void) const
 {
   return this->ptr_;
 }
 
-ACE_INLINE IR::FixedDef_ptr &
-IR::FixedDef_var::inout (void)
+ACE_INLINE IR_FixedDef_ptr &
+IR_FixedDef_var::inout (void)
 {
   return this->ptr_;
 }
 
-ACE_INLINE IR::FixedDef_ptr &
-IR::FixedDef_var::out (void)
+ACE_INLINE IR_FixedDef_ptr &
+IR_FixedDef_var::out (void)
 {
   CORBA::release (this->ptr_);
-  this->ptr_ = IR::FixedDef::_nil ();
+  this->ptr_ = IR_FixedDef::_nil ();
   return this->ptr_;
 }
 
-ACE_INLINE IR::FixedDef_ptr 
-IR::FixedDef_var::_retn (void)
+ACE_INLINE IR_FixedDef_ptr 
+IR_FixedDef_var::_retn (void)
 {
   // yield ownership of managed obj reference
-  IR::FixedDef_ptr val = this->ptr_;
-  this->ptr_ = IR::FixedDef::_nil ();
+  IR_FixedDef_ptr val = this->ptr_;
+  this->ptr_ = IR_FixedDef::_nil ();
   return val;
 }
 
-
-#endif /* end #if !defined */
-
-
-#if !defined (_IR_FIXEDDEF___OUT_CI_)
-#define _IR_FIXEDDEF___OUT_CI_
-
 // *************************************************************
-// Inline operations for class IR::FixedDef_out
+// Inline operations for class IR_FixedDef_out
 // *************************************************************
 
 ACE_INLINE
-IR::FixedDef_out::FixedDef_out (IR::FixedDef_ptr &p)
+IR_FixedDef_out::IR_FixedDef_out (IR_FixedDef_ptr &p)
   : ptr_ (p)
 {
-  this->ptr_ = IR::FixedDef::_nil ();
+  this->ptr_ = IR_FixedDef::_nil ();
 }
 
 ACE_INLINE
-IR::FixedDef_out::FixedDef_out (IR::FixedDef_var &p) // constructor from _var
+IR_FixedDef_out::IR_FixedDef_out (IR_FixedDef_var &p) // constructor from _var
   : ptr_ (p.out ())
 {
   CORBA::release (this->ptr_);
-  this->ptr_ = IR::FixedDef::_nil ();
+  this->ptr_ = IR_FixedDef::_nil ();
 }
 
 ACE_INLINE
-IR::FixedDef_out::FixedDef_out (const IR::FixedDef_out &p) // copy constructor
-  : ptr_ (ACE_const_cast (IR::FixedDef_out&,p).ptr_)
+IR_FixedDef_out::IR_FixedDef_out (const IR_FixedDef_out &p) // copy constructor
+  : ptr_ (ACE_const_cast (IR_FixedDef_out&,p).ptr_)
 {}
 
-ACE_INLINE IR::FixedDef_out &
-IR::FixedDef_out::operator= (const IR::FixedDef_out &p)
+ACE_INLINE IR_FixedDef_out &
+IR_FixedDef_out::operator= (const IR_FixedDef_out &p)
 {
-  this->ptr_ = ACE_const_cast (IR::FixedDef_out&,p).ptr_;
+  this->ptr_ = ACE_const_cast (IR_FixedDef_out&,p).ptr_;
   return *this;
 }
 
-ACE_INLINE IR::FixedDef_out &
-IR::FixedDef_out::operator= (const IR::FixedDef_var &p)
+ACE_INLINE IR_FixedDef_out &
+IR_FixedDef_out::operator= (const IR_FixedDef_var &p)
 {
-  this->ptr_ = IR::FixedDef::_duplicate (p.ptr ());
+  this->ptr_ = IR_FixedDef::_duplicate (p.ptr ());
   return *this;
 }
 
-ACE_INLINE IR::FixedDef_out &
-IR::FixedDef_out::operator= (IR::FixedDef_ptr p)
+ACE_INLINE IR_FixedDef_out &
+IR_FixedDef_out::operator= (IR_FixedDef_ptr p)
 {
   this->ptr_ = p;
   return *this;
 }
 
 ACE_INLINE 
-IR::FixedDef_out::operator IR::FixedDef_ptr &() // cast
+IR_FixedDef_out::operator IR_FixedDef_ptr &() // cast
 {
   return this->ptr_;
 }
 
-ACE_INLINE IR::FixedDef_ptr &
-IR::FixedDef_out::ptr (void) // ptr
+ACE_INLINE IR_FixedDef_ptr &
+IR_FixedDef_out::ptr (void) // ptr
 {
   return this->ptr_;
 }
 
-ACE_INLINE IR::FixedDef_ptr 
-IR::FixedDef_out::operator-> (void)
+ACE_INLINE IR_FixedDef_ptr 
+IR_FixedDef_out::operator-> (void)
 {
   return this->ptr_;
 }
 
-
-#endif /* end #if !defined */
-
-
-#if !defined (_IR_COMPONENTREPOSITORY___CI_)
-#define _IR_COMPONENTREPOSITORY___CI_
-
 ACE_INLINE
-IR::ComponentRepository::ComponentRepository (
+IR_ComponentRepository::IR_ComponentRepository (
     TAO_Stub *objref,
     CORBA::Boolean _tao_collocated,
     TAO_Abstract_ServantBase *servant
@@ -13406,217 +12484,201 @@
   this->IR_ComponentRepository_setup_collocation (_tao_collocated);
 }
 
-#endif /* end #if !defined */
-
-
-#if !defined (_IR_COMPONENTREPOSITORY___VAR_CI_)
-#define _IR_COMPONENTREPOSITORY___VAR_CI_
-
 // *************************************************************
-// Inline operations for class IR::ComponentRepository_var
+// Inline operations for class IR_ComponentRepository_var
 // *************************************************************
 
 ACE_INLINE
-IR::ComponentRepository_var::ComponentRepository_var (void) // default constructor
-  : ptr_ (ComponentRepository::_nil ())
+IR_ComponentRepository_var::IR_ComponentRepository_var (void) // default constructor
+  : ptr_ (IR_ComponentRepository::_nil ())
 {}
 
-ACE_INLINE ::IR::ComponentRepository_ptr
-IR::ComponentRepository_var::ptr (void) const
+ACE_INLINE ::IR_ComponentRepository_ptr
+IR_ComponentRepository_var::ptr (void) const
 {
   return this->ptr_;
 }
 
 ACE_INLINE
-IR::ComponentRepository_var::ComponentRepository_var (const ::IR::ComponentRepository_var &p) // copy constructor
+IR_ComponentRepository_var::IR_ComponentRepository_var (const ::IR_ComponentRepository_var &p) // copy constructor
   : TAO_Base_var (),
-    ptr_ (ComponentRepository::_duplicate (p.ptr ()))
+    ptr_ (IR_ComponentRepository::_duplicate (p.ptr ()))
 {}
 
 ACE_INLINE
-IR::ComponentRepository_var::~ComponentRepository_var (void) // destructor
+IR_ComponentRepository_var::~IR_ComponentRepository_var (void) // destructor
 {
   CORBA::release (this->ptr_);
 }
 
-ACE_INLINE IR::ComponentRepository_var &
-IR::ComponentRepository_var::operator= (ComponentRepository_ptr p)
+ACE_INLINE IR_ComponentRepository_var &
+IR_ComponentRepository_var::operator= (IR_ComponentRepository_ptr p)
 {
   CORBA::release (this->ptr_);
   this->ptr_ = p;
   return *this;
 }
 
-ACE_INLINE IR::ComponentRepository_var &
-IR::ComponentRepository_var::operator= (const ::IR::ComponentRepository_var &p)
+ACE_INLINE IR_ComponentRepository_var &
+IR_ComponentRepository_var::operator= (const ::IR_ComponentRepository_var &p)
 {
   if (this != &p)
   {
     CORBA::release (this->ptr_);
-    this->ptr_ = ::IR::ComponentRepository::_duplicate (p.ptr ());
+    this->ptr_ = ::IR_ComponentRepository::_duplicate (p.ptr ());
   }
   return *this;
 }
 
 ACE_INLINE 
-IR::ComponentRepository_var::operator const ::IR::ComponentRepository_ptr &() const // cast
+IR_ComponentRepository_var::operator const ::IR_ComponentRepository_ptr &() const // cast
 {
   return this->ptr_;
 }
 
 ACE_INLINE 
-IR::ComponentRepository_var::operator ::IR::ComponentRepository_ptr &() // cast 
+IR_ComponentRepository_var::operator ::IR_ComponentRepository_ptr &() // cast 
 {
   return this->ptr_;
 }
 
-ACE_INLINE ::IR::ComponentRepository_ptr
-IR::ComponentRepository_var::operator-> (void) const
+ACE_INLINE ::IR_ComponentRepository_ptr
+IR_ComponentRepository_var::operator-> (void) const
 {
   return this->ptr_;
 }
 
-ACE_INLINE ::IR::ComponentRepository_ptr
-IR::ComponentRepository_var::in (void) const
+ACE_INLINE ::IR_ComponentRepository_ptr
+IR_ComponentRepository_var::in (void) const
 {
   return this->ptr_;
 }
 
-ACE_INLINE ::IR::ComponentRepository_ptr &
-IR::ComponentRepository_var::inout (void)
+ACE_INLINE ::IR_ComponentRepository_ptr &
+IR_ComponentRepository_var::inout (void)
 {
   return this->ptr_;
 }
 
-ACE_INLINE ::IR::ComponentRepository_ptr &
-IR::ComponentRepository_var::out (void)
+ACE_INLINE ::IR_ComponentRepository_ptr &
+IR_ComponentRepository_var::out (void)
 {
   CORBA::release (this->ptr_);
-  this->ptr_ = ::IR::ComponentRepository::_nil ();
+  this->ptr_ = ::IR_ComponentRepository::_nil ();
   return this->ptr_;
 }
 
-ACE_INLINE ::IR::ComponentRepository_ptr
-IR::ComponentRepository_var::_retn (void)
+ACE_INLINE ::IR_ComponentRepository_ptr
+IR_ComponentRepository_var::_retn (void)
 {
   // yield ownership of managed obj reference
-  ::IR::ComponentRepository_ptr val = this->ptr_;
-  this->ptr_ = ::IR::ComponentRepository::_nil ();
+  ::IR_ComponentRepository_ptr val = this->ptr_;
+  this->ptr_ = ::IR_ComponentRepository::_nil ();
   return val;
 }
 
-
-#endif /* end #if !defined */
-
-
-#if !defined (_IR_COMPONENTREPOSITORY___OUT_CI_)
-#define _IR_COMPONENTREPOSITORY___OUT_CI_
-
 // *************************************************************
-// Inline operations for class IR::ComponentRepository_out
+// Inline operations for class IR_ComponentRepository_out
 // *************************************************************
 
 ACE_INLINE
-IR::ComponentRepository_out::ComponentRepository_out (ComponentRepository_ptr &p)
+IR_ComponentRepository_out::IR_ComponentRepository_out (IR_ComponentRepository_ptr &p)
   : ptr_ (p)
 {
-  this->ptr_ = ::IR::ComponentRepository::_nil ();
+  this->ptr_ = ::IR_ComponentRepository::_nil ();
 }
 
 ACE_INLINE
-IR::ComponentRepository_out::ComponentRepository_out (ComponentRepository_var &p) // constructor from _var
+IR_ComponentRepository_out::IR_ComponentRepository_out (IR_ComponentRepository_var &p) // constructor from _var
   : ptr_ (p.out ())
 {
   CORBA::release (this->ptr_);
-  this->ptr_ = ::IR::ComponentRepository::_nil ();
+  this->ptr_ = ::IR_ComponentRepository::_nil ();
 }
 
 ACE_INLINE
-IR::ComponentRepository_out::ComponentRepository_out (const ::IR::ComponentRepository_out &p) // copy constructor
-  : ptr_ (ACE_const_cast (ComponentRepository_out &, p).ptr_)
+IR_ComponentRepository_out::IR_ComponentRepository_out (const ::IR_ComponentRepository_out &p) // copy constructor
+  : ptr_ (ACE_const_cast (IR_ComponentRepository_out &, p).ptr_)
 {}
 
-ACE_INLINE ::IR::ComponentRepository_out &
-IR::ComponentRepository_out::operator= (const ::IR::ComponentRepository_out &p)
+ACE_INLINE ::IR_ComponentRepository_out &
+IR_ComponentRepository_out::operator= (const ::IR_ComponentRepository_out &p)
 {
-  this->ptr_ = ACE_const_cast (ComponentRepository_out&, p).ptr_;
+  this->ptr_ = ACE_const_cast (IR_ComponentRepository_out&, p).ptr_;
   return *this;
 }
 
-ACE_INLINE IR::ComponentRepository_out &
-IR::ComponentRepository_out::operator= (const ::IR::ComponentRepository_var &p)
+ACE_INLINE IR_ComponentRepository_out &
+IR_ComponentRepository_out::operator= (const ::IR_ComponentRepository_var &p)
 {
-  this->ptr_ = ::IR::ComponentRepository::_duplicate (p.ptr ());
+  this->ptr_ = ::IR_ComponentRepository::_duplicate (p.ptr ());
   return *this;
 }
 
-ACE_INLINE IR::ComponentRepository_out &
-IR::ComponentRepository_out::operator= (ComponentRepository_ptr p)
+ACE_INLINE IR_ComponentRepository_out &
+IR_ComponentRepository_out::operator= (IR_ComponentRepository_ptr p)
 {
   this->ptr_ = p;
   return *this;
 }
 
 ACE_INLINE 
-IR::ComponentRepository_out::operator ::IR::ComponentRepository_ptr &() // cast
+IR_ComponentRepository_out::operator ::IR_ComponentRepository_ptr &() // cast
 {
   return this->ptr_;
 }
 
-ACE_INLINE ::IR::ComponentRepository_ptr &
-IR::ComponentRepository_out::ptr (void) // ptr
+ACE_INLINE ::IR_ComponentRepository_ptr &
+IR_ComponentRepository_out::ptr (void) // ptr
 {
   return this->ptr_;
 }
 
-ACE_INLINE ::IR::ComponentRepository_ptr
-IR::ComponentRepository_out::operator-> (void)
+ACE_INLINE ::IR_ComponentRepository_ptr
+IR_ComponentRepository_out::operator-> (void)
 {
   return this->ptr_;
 }
 
-
-#endif /* end #if !defined */
-
 // *************************************************************
-// Inline operations for class IR::ModuleDescription_var
+// Inline operations for class IR_ModuleDescription_var
 // *************************************************************
 
 ACE_INLINE
-IR::ModuleDescription_var::ModuleDescription_var (void) // default constructor
+IR_ModuleDescription_var::IR_ModuleDescription_var (void) // default constructor
   : ptr_ (0)
 {}
 
 ACE_INLINE
-IR::ModuleDescription_var::ModuleDescription_var (ModuleDescription *p)
+IR_ModuleDescription_var::IR_ModuleDescription_var (IR_ModuleDescription *p)
   : ptr_ (p)
 {}
 
 ACE_INLINE
-IR::ModuleDescription_var::ModuleDescription_var (const ::IR::ModuleDescription_var &p) // copy constructor
+IR_ModuleDescription_var::IR_ModuleDescription_var (const ::IR_ModuleDescription_var &p) // copy constructor
 {
   if (p.ptr_)
-    ACE_NEW (this->ptr_, ::IR::ModuleDescription (*p.ptr_));
+    ACE_NEW (this->ptr_, ::IR_ModuleDescription (*p.ptr_));
   else
     this->ptr_ = 0;
 }
 
 ACE_INLINE
-IR::ModuleDescription_var::~ModuleDescription_var (void) // destructor
+IR_ModuleDescription_var::~IR_ModuleDescription_var (void) // destructor
 {
   delete this->ptr_;
 }
 
-ACE_INLINE IR::ModuleDescription_var &
-IR::ModuleDescription_var::operator= (ModuleDescription *p)
+ACE_INLINE IR_ModuleDescription_var &
+IR_ModuleDescription_var::operator= (IR_ModuleDescription *p)
 {
   delete this->ptr_;
   this->ptr_ = p;
   return *this;
 }
 
-ACE_INLINE ::IR::ModuleDescription_var &
-IR::ModuleDescription_var::operator= (const ::IR::ModuleDescription_var &p)
+ACE_INLINE ::IR_ModuleDescription_var &
+IR_ModuleDescription_var::operator= (const ::IR_ModuleDescription_var &p)
 {
   if (this != &p)
     {
@@ -13627,12 +12689,12 @@
         }
       else
         {
-          ModuleDescription *deep_copy =
-            new ModuleDescription (*p.ptr_);
+          IR_ModuleDescription *deep_copy = 
+            new IR_ModuleDescription (*p.ptr_);
           
           if (deep_copy != 0)
             {
-              ModuleDescription *tmp = deep_copy;
+              IR_ModuleDescription *tmp = deep_copy;
               deep_copy = this->ptr_;
               this->ptr_ = tmp;
               delete deep_copy;
@@ -13643,91 +12705,91 @@
   return *this;
 }
 
-ACE_INLINE const ::IR::ModuleDescription *
-IR::ModuleDescription_var::operator-> (void) const
+ACE_INLINE const ::IR_ModuleDescription *
+IR_ModuleDescription_var::operator-> (void) const
 {
   return this->ptr_;
 }
 
-ACE_INLINE ::IR::ModuleDescription *
-IR::ModuleDescription_var::operator-> (void)
+ACE_INLINE ::IR_ModuleDescription *
+IR_ModuleDescription_var::operator-> (void)
 {
   return this->ptr_;
 }
 
 ACE_INLINE
-IR::ModuleDescription_var::operator const ::IR::ModuleDescription &() const // cast
+IR_ModuleDescription_var::operator const ::IR_ModuleDescription &() const // cast
 {
   return *this->ptr_;
 }
 
 ACE_INLINE
-IR::ModuleDescription_var::operator ::IR::ModuleDescription &() // cast 
+IR_ModuleDescription_var::operator ::IR_ModuleDescription &() // cast 
 {
   return *this->ptr_;
 }
 
 ACE_INLINE
-IR::ModuleDescription_var::operator ::IR::ModuleDescription &() const // cast 
+IR_ModuleDescription_var::operator ::IR_ModuleDescription &() const // cast 
 {
   return *this->ptr_;
 }
 
 // variable-size types only
 ACE_INLINE
-IR::ModuleDescription_var::operator ::IR::ModuleDescription *&() // cast 
+IR_ModuleDescription_var::operator ::IR_ModuleDescription *&() // cast 
 {
   return this->ptr_;
 }
 
-ACE_INLINE const ::IR::ModuleDescription &
-IR::ModuleDescription_var::in (void) const
+ACE_INLINE const ::IR_ModuleDescription &
+IR_ModuleDescription_var::in (void) const
 {
   return *this->ptr_;
 }
 
-ACE_INLINE ::IR::ModuleDescription &
-IR::ModuleDescription_var::inout (void)
+ACE_INLINE ::IR_ModuleDescription &
+IR_ModuleDescription_var::inout (void)
 {
   return *this->ptr_;
 }
 
 // mapping for variable size 
-ACE_INLINE ::IR::ModuleDescription *&
-IR::ModuleDescription_var::out (void)
+ACE_INLINE ::IR_ModuleDescription *&
+IR_ModuleDescription_var::out (void)
 {
   delete this->ptr_;
   this->ptr_ = 0;
   return this->ptr_;
 }
 
-ACE_INLINE ::IR::ModuleDescription *
-IR::ModuleDescription_var::_retn (void)
+ACE_INLINE ::IR_ModuleDescription *
+IR_ModuleDescription_var::_retn (void)
 {
-  ::IR::ModuleDescription *tmp = this->ptr_;
+  ::IR_ModuleDescription *tmp = this->ptr_;
   this->ptr_ = 0;
   return tmp;
 }
 
-ACE_INLINE ::IR::ModuleDescription *
-IR::ModuleDescription_var::ptr (void) const
+ACE_INLINE ::IR_ModuleDescription *
+IR_ModuleDescription_var::ptr (void) const
 {
   return this->ptr_;
 }
 
 // *************************************************************
-// Inline operations for class IR::ModuleDescription_out
+// Inline operations for class IR_ModuleDescription_out
 // *************************************************************
 
 ACE_INLINE
-IR::ModuleDescription_out::ModuleDescription_out (::IR::ModuleDescription *&p)
+IR_ModuleDescription_out::IR_ModuleDescription_out (::IR_ModuleDescription *&p)
   : ptr_ (p)
 {
   this->ptr_ = 0;
 }
 
 ACE_INLINE
-IR::ModuleDescription_out::ModuleDescription_out (ModuleDescription_var &p) // constructor from _var
+IR_ModuleDescription_out::IR_ModuleDescription_out (IR_ModuleDescription_var &p) // constructor from _var
   : ptr_ (p.out ())
 {
   delete this->ptr_;
@@ -13735,81 +12797,81 @@
 }
 
 ACE_INLINE
-IR::ModuleDescription_out::ModuleDescription_out (const ::IR::ModuleDescription_out &p) // copy constructor
-  : ptr_ (ACE_const_cast (ModuleDescription_out&, p).ptr_)
+IR_ModuleDescription_out::IR_ModuleDescription_out (const ::IR_ModuleDescription_out &p) // copy constructor
+  : ptr_ (ACE_const_cast (IR_ModuleDescription_out&, p).ptr_)
 {}
 
-ACE_INLINE IR::ModuleDescription_out &
-IR::ModuleDescription_out::operator= (const ::IR::ModuleDescription_out &p)
+ACE_INLINE IR_ModuleDescription_out &
+IR_ModuleDescription_out::operator= (const ::IR_ModuleDescription_out &p)
 {
-  this->ptr_ = ACE_const_cast (ModuleDescription_out&, p).ptr_;
+  this->ptr_ = ACE_const_cast (IR_ModuleDescription_out&, p).ptr_;
   return *this;
 }
 
-ACE_INLINE IR::ModuleDescription_out &
-IR::ModuleDescription_out::operator= (ModuleDescription *p)
+ACE_INLINE IR_ModuleDescription_out &
+IR_ModuleDescription_out::operator= (IR_ModuleDescription *p)
 {
   this->ptr_ = p;
   return *this;
 }
 
 ACE_INLINE 
-IR::ModuleDescription_out::operator ::IR::ModuleDescription *&() // cast
+IR_ModuleDescription_out::operator ::IR_ModuleDescription *&() // cast
 {
   return this->ptr_;
 }
 
-ACE_INLINE ::IR::ModuleDescription *&
-IR::ModuleDescription_out::ptr (void) // ptr
+ACE_INLINE ::IR_ModuleDescription *&
+IR_ModuleDescription_out::ptr (void) // ptr
 {
   return this->ptr_;
 }
 
-ACE_INLINE ::IR::ModuleDescription *
-IR::ModuleDescription_out::operator-> (void)
+ACE_INLINE ::IR_ModuleDescription *
+IR_ModuleDescription_out::operator-> (void)
 {
   return this->ptr_;
 }
 
 // *************************************************************
-// Inline operations for class IR::ConstantDescription_var
+// Inline operations for class IR_ConstantDescription_var
 // *************************************************************
 
 ACE_INLINE
-IR::ConstantDescription_var::ConstantDescription_var (void) // default constructor
+IR_ConstantDescription_var::IR_ConstantDescription_var (void) // default constructor
   : ptr_ (0)
 {}
 
 ACE_INLINE
-IR::ConstantDescription_var::ConstantDescription_var (ConstantDescription *p)
+IR_ConstantDescription_var::IR_ConstantDescription_var (IR_ConstantDescription *p)
   : ptr_ (p)
 {}
 
 ACE_INLINE
-IR::ConstantDescription_var::ConstantDescription_var (const ::IR::ConstantDescription_var &p) // copy constructor
+IR_ConstantDescription_var::IR_ConstantDescription_var (const ::IR_ConstantDescription_var &p) // copy constructor
 {
   if (p.ptr_)
-    ACE_NEW (this->ptr_, ::IR::ConstantDescription (*p.ptr_));
+    ACE_NEW (this->ptr_, ::IR_ConstantDescription (*p.ptr_));
   else
     this->ptr_ = 0;
 }
 
 ACE_INLINE
-IR::ConstantDescription_var::~ConstantDescription_var (void) // destructor
+IR_ConstantDescription_var::~IR_ConstantDescription_var (void) // destructor
 {
   delete this->ptr_;
 }
 
-ACE_INLINE IR::ConstantDescription_var &
-IR::ConstantDescription_var::operator= (ConstantDescription *p)
+ACE_INLINE IR_ConstantDescription_var &
+IR_ConstantDescription_var::operator= (IR_ConstantDescription *p)
 {
   delete this->ptr_;
   this->ptr_ = p;
   return *this;
 }
 
-ACE_INLINE ::IR::ConstantDescription_var &
-IR::ConstantDescription_var::operator= (const ::IR::ConstantDescription_var &p)
+ACE_INLINE ::IR_ConstantDescription_var &
+IR_ConstantDescription_var::operator= (const ::IR_ConstantDescription_var &p)
 {
   if (this != &p)
     {
@@ -13820,12 +12882,12 @@
         }
       else
         {
-          ConstantDescription *deep_copy =
-            new ConstantDescription (*p.ptr_);
+          IR_ConstantDescription *deep_copy = 
+            new IR_ConstantDescription (*p.ptr_);
           
           if (deep_copy != 0)
             {
-              ConstantDescription *tmp = deep_copy;
+              IR_ConstantDescription *tmp = deep_copy;
               deep_copy = this->ptr_;
               this->ptr_ = tmp;
               delete deep_copy;
@@ -13836,91 +12898,91 @@
   return *this;
 }
 
-ACE_INLINE const ::IR::ConstantDescription *
-IR::ConstantDescription_var::operator-> (void) const
+ACE_INLINE const ::IR_ConstantDescription *
+IR_ConstantDescription_var::operator-> (void) const
 {
   return this->ptr_;
 }
 
-ACE_INLINE ::IR::ConstantDescription *
-IR::ConstantDescription_var::operator-> (void)
+ACE_INLINE ::IR_ConstantDescription *
+IR_ConstantDescription_var::operator-> (void)
 {
   return this->ptr_;
 }
 
 ACE_INLINE
-IR::ConstantDescription_var::operator const ::IR::ConstantDescription &() const // cast
+IR_ConstantDescription_var::operator const ::IR_ConstantDescription &() const // cast
 {
   return *this->ptr_;
 }
 
 ACE_INLINE
-IR::ConstantDescription_var::operator ::IR::ConstantDescription &() // cast 
+IR_ConstantDescription_var::operator ::IR_ConstantDescription &() // cast 
 {
   return *this->ptr_;
 }
 
 ACE_INLINE
-IR::ConstantDescription_var::operator ::IR::ConstantDescription &() const // cast 
+IR_ConstantDescription_var::operator ::IR_ConstantDescription &() const // cast 
 {
   return *this->ptr_;
 }
 
 // variable-size types only
 ACE_INLINE
-IR::ConstantDescription_var::operator ::IR::ConstantDescription *&() // cast 
+IR_ConstantDescription_var::operator ::IR_ConstantDescription *&() // cast 
 {
   return this->ptr_;
 }
 
-ACE_INLINE const ::IR::ConstantDescription &
-IR::ConstantDescription_var::in (void) const
+ACE_INLINE const ::IR_ConstantDescription &
+IR_ConstantDescription_var::in (void) const
 {
   return *this->ptr_;
 }
 
-ACE_INLINE ::IR::ConstantDescription &
-IR::ConstantDescription_var::inout (void)
+ACE_INLINE ::IR_ConstantDescription &
+IR_ConstantDescription_var::inout (void)
 {
   return *this->ptr_;
 }
 
 // mapping for variable size 
-ACE_INLINE ::IR::ConstantDescription *&
-IR::ConstantDescription_var::out (void)
+ACE_INLINE ::IR_ConstantDescription *&
+IR_ConstantDescription_var::out (void)
 {
   delete this->ptr_;
   this->ptr_ = 0;
   return this->ptr_;
 }
 
-ACE_INLINE ::IR::ConstantDescription *
-IR::ConstantDescription_var::_retn (void)
+ACE_INLINE ::IR_ConstantDescription *
+IR_ConstantDescription_var::_retn (void)
 {
-  ::IR::ConstantDescription *tmp = this->ptr_;
+  ::IR_ConstantDescription *tmp = this->ptr_;
   this->ptr_ = 0;
   return tmp;
 }
 
-ACE_INLINE ::IR::ConstantDescription *
-IR::ConstantDescription_var::ptr (void) const
+ACE_INLINE ::IR_ConstantDescription *
+IR_ConstantDescription_var::ptr (void) const
 {
   return this->ptr_;
 }
 
 // *************************************************************
-// Inline operations for class IR::ConstantDescription_out
+// Inline operations for class IR_ConstantDescription_out
 // *************************************************************
 
 ACE_INLINE
-IR::ConstantDescription_out::ConstantDescription_out (::IR::ConstantDescription *&p)
+IR_ConstantDescription_out::IR_ConstantDescription_out (::IR_ConstantDescription *&p)
   : ptr_ (p)
 {
   this->ptr_ = 0;
 }
 
 ACE_INLINE
-IR::ConstantDescription_out::ConstantDescription_out (ConstantDescription_var &p) // constructor from _var
+IR_ConstantDescription_out::IR_ConstantDescription_out (IR_ConstantDescription_var &p) // constructor from _var
   : ptr_ (p.out ())
 {
   delete this->ptr_;
@@ -13928,48 +12990,44 @@
 }
 
 ACE_INLINE
-IR::ConstantDescription_out::ConstantDescription_out (const ::IR::ConstantDescription_out &p) // copy constructor
-  : ptr_ (ACE_const_cast (ConstantDescription_out&, p).ptr_)
+IR_ConstantDescription_out::IR_ConstantDescription_out (const ::IR_ConstantDescription_out &p) // copy constructor
+  : ptr_ (ACE_const_cast (IR_ConstantDescription_out&, p).ptr_)
 {}
 
-ACE_INLINE IR::ConstantDescription_out &
-IR::ConstantDescription_out::operator= (const ::IR::ConstantDescription_out &p)
+ACE_INLINE IR_ConstantDescription_out &
+IR_ConstantDescription_out::operator= (const ::IR_ConstantDescription_out &p)
 {
-  this->ptr_ = ACE_const_cast (ConstantDescription_out&, p).ptr_;
+  this->ptr_ = ACE_const_cast (IR_ConstantDescription_out&, p).ptr_;
   return *this;
 }
 
-ACE_INLINE IR::ConstantDescription_out &
-IR::ConstantDescription_out::operator= (ConstantDescription *p)
+ACE_INLINE IR_ConstantDescription_out &
+IR_ConstantDescription_out::operator= (IR_ConstantDescription *p)
 {
   this->ptr_ = p;
   return *this;
 }
 
 ACE_INLINE 
-IR::ConstantDescription_out::operator ::IR::ConstantDescription *&() // cast
+IR_ConstantDescription_out::operator ::IR_ConstantDescription *&() // cast
 {
   return this->ptr_;
 }
 
-ACE_INLINE ::IR::ConstantDescription *&
-IR::ConstantDescription_out::ptr (void) // ptr
+ACE_INLINE ::IR_ConstantDescription *&
+IR_ConstantDescription_out::ptr (void) // ptr
 {
   return this->ptr_;
 }
 
-ACE_INLINE ::IR::ConstantDescription *
-IR::ConstantDescription_out::operator-> (void)
+ACE_INLINE ::IR_ConstantDescription *
+IR_ConstantDescription_out::operator-> (void)
 {
   return this->ptr_;
 }
 
-
-#if !defined (_IR_TYPEDEFDEF___CI_)
-#define _IR_TYPEDEFDEF___CI_
-
 ACE_INLINE
-IR::TypedefDef::TypedefDef (
+IR_TypedefDef::IR_TypedefDef (
     TAO_Stub *objref,
     CORBA::Boolean _tao_collocated,
     TAO_Abstract_ServantBase *servant
@@ -13979,217 +13037,201 @@
   this->IR_TypedefDef_setup_collocation (_tao_collocated);
 }
 
-#endif /* end #if !defined */
-
-
-#if !defined (_IR_TYPEDEFDEF___VAR_CI_)
-#define _IR_TYPEDEFDEF___VAR_CI_
-
 // *************************************************************
-// Inline operations for class IR::TypedefDef_var
+// Inline operations for class IR_TypedefDef_var
 // *************************************************************
 
 ACE_INLINE
-IR::TypedefDef_var::TypedefDef_var (void) // default constructor
-  : ptr_ (TypedefDef::_nil ())
+IR_TypedefDef_var::IR_TypedefDef_var (void) // default constructor
+  : ptr_ (IR_TypedefDef::_nil ())
 {}
 
-ACE_INLINE ::IR::TypedefDef_ptr
-IR::TypedefDef_var::ptr (void) const
+ACE_INLINE ::IR_TypedefDef_ptr
+IR_TypedefDef_var::ptr (void) const
 {
   return this->ptr_;
 }
 
 ACE_INLINE
-IR::TypedefDef_var::TypedefDef_var (const ::IR::TypedefDef_var &p) // copy constructor
+IR_TypedefDef_var::IR_TypedefDef_var (const ::IR_TypedefDef_var &p) // copy constructor
   : TAO_Base_var (),
-    ptr_ (TypedefDef::_duplicate (p.ptr ()))
+    ptr_ (IR_TypedefDef::_duplicate (p.ptr ()))
 {}
 
 ACE_INLINE
-IR::TypedefDef_var::~TypedefDef_var (void) // destructor
+IR_TypedefDef_var::~IR_TypedefDef_var (void) // destructor
 {
   CORBA::release (this->ptr_);
 }
 
-ACE_INLINE IR::TypedefDef_var &
-IR::TypedefDef_var::operator= (TypedefDef_ptr p)
+ACE_INLINE IR_TypedefDef_var &
+IR_TypedefDef_var::operator= (IR_TypedefDef_ptr p)
 {
   CORBA::release (this->ptr_);
   this->ptr_ = p;
   return *this;
 }
 
-ACE_INLINE IR::TypedefDef_var &
-IR::TypedefDef_var::operator= (const ::IR::TypedefDef_var &p)
+ACE_INLINE IR_TypedefDef_var &
+IR_TypedefDef_var::operator= (const ::IR_TypedefDef_var &p)
 {
   if (this != &p)
   {
     CORBA::release (this->ptr_);
-    this->ptr_ = ::IR::TypedefDef::_duplicate (p.ptr ());
+    this->ptr_ = ::IR_TypedefDef::_duplicate (p.ptr ());
   }
   return *this;
 }
 
 ACE_INLINE 
-IR::TypedefDef_var::operator const ::IR::TypedefDef_ptr &() const // cast
+IR_TypedefDef_var::operator const ::IR_TypedefDef_ptr &() const // cast
 {
   return this->ptr_;
 }
 
 ACE_INLINE 
-IR::TypedefDef_var::operator ::IR::TypedefDef_ptr &() // cast 
+IR_TypedefDef_var::operator ::IR_TypedefDef_ptr &() // cast 
 {
   return this->ptr_;
 }
 
-ACE_INLINE ::IR::TypedefDef_ptr
-IR::TypedefDef_var::operator-> (void) const
+ACE_INLINE ::IR_TypedefDef_ptr
+IR_TypedefDef_var::operator-> (void) const
 {
   return this->ptr_;
 }
 
-ACE_INLINE ::IR::TypedefDef_ptr
-IR::TypedefDef_var::in (void) const
+ACE_INLINE ::IR_TypedefDef_ptr
+IR_TypedefDef_var::in (void) const
 {
   return this->ptr_;
 }
 
-ACE_INLINE ::IR::TypedefDef_ptr &
-IR::TypedefDef_var::inout (void)
+ACE_INLINE ::IR_TypedefDef_ptr &
+IR_TypedefDef_var::inout (void)
 {
   return this->ptr_;
 }
 
-ACE_INLINE ::IR::TypedefDef_ptr &
-IR::TypedefDef_var::out (void)
+ACE_INLINE ::IR_TypedefDef_ptr &
+IR_TypedefDef_var::out (void)
 {
   CORBA::release (this->ptr_);
-  this->ptr_ = ::IR::TypedefDef::_nil ();
+  this->ptr_ = ::IR_TypedefDef::_nil ();
   return this->ptr_;
 }
 
-ACE_INLINE ::IR::TypedefDef_ptr
-IR::TypedefDef_var::_retn (void)
+ACE_INLINE ::IR_TypedefDef_ptr
+IR_TypedefDef_var::_retn (void)
 {
   // yield ownership of managed obj reference
-  ::IR::TypedefDef_ptr val = this->ptr_;
-  this->ptr_ = ::IR::TypedefDef::_nil ();
+  ::IR_TypedefDef_ptr val = this->ptr_;
+  this->ptr_ = ::IR_TypedefDef::_nil ();
   return val;
 }
 
-
-#endif /* end #if !defined */
-
-
-#if !defined (_IR_TYPEDEFDEF___OUT_CI_)
-#define _IR_TYPEDEFDEF___OUT_CI_
-
 // *************************************************************
-// Inline operations for class IR::TypedefDef_out
+// Inline operations for class IR_TypedefDef_out
 // *************************************************************
 
 ACE_INLINE
-IR::TypedefDef_out::TypedefDef_out (TypedefDef_ptr &p)
+IR_TypedefDef_out::IR_TypedefDef_out (IR_TypedefDef_ptr &p)
   : ptr_ (p)
 {
-  this->ptr_ = ::IR::TypedefDef::_nil ();
+  this->ptr_ = ::IR_TypedefDef::_nil ();
 }
 
 ACE_INLINE
-IR::TypedefDef_out::TypedefDef_out (TypedefDef_var &p) // constructor from _var
+IR_TypedefDef_out::IR_TypedefDef_out (IR_TypedefDef_var &p) // constructor from _var
   : ptr_ (p.out ())
 {
   CORBA::release (this->ptr_);
-  this->ptr_ = ::IR::TypedefDef::_nil ();
+  this->ptr_ = ::IR_TypedefDef::_nil ();
 }
 
 ACE_INLINE
-IR::TypedefDef_out::TypedefDef_out (const ::IR::TypedefDef_out &p) // copy constructor
-  : ptr_ (ACE_const_cast (TypedefDef_out &, p).ptr_)
+IR_TypedefDef_out::IR_TypedefDef_out (const ::IR_TypedefDef_out &p) // copy constructor
+  : ptr_ (ACE_const_cast (IR_TypedefDef_out &, p).ptr_)
 {}
 
-ACE_INLINE ::IR::TypedefDef_out &
-IR::TypedefDef_out::operator= (const ::IR::TypedefDef_out &p)
+ACE_INLINE ::IR_TypedefDef_out &
+IR_TypedefDef_out::operator= (const ::IR_TypedefDef_out &p)
 {
-  this->ptr_ = ACE_const_cast (TypedefDef_out&, p).ptr_;
+  this->ptr_ = ACE_const_cast (IR_TypedefDef_out&, p).ptr_;
   return *this;
 }
 
-ACE_INLINE IR::TypedefDef_out &
-IR::TypedefDef_out::operator= (const ::IR::TypedefDef_var &p)
+ACE_INLINE IR_TypedefDef_out &
+IR_TypedefDef_out::operator= (const ::IR_TypedefDef_var &p)
 {
-  this->ptr_ = ::IR::TypedefDef::_duplicate (p.ptr ());
+  this->ptr_ = ::IR_TypedefDef::_duplicate (p.ptr ());
   return *this;
 }
 
-ACE_INLINE IR::TypedefDef_out &
-IR::TypedefDef_out::operator= (TypedefDef_ptr p)
+ACE_INLINE IR_TypedefDef_out &
+IR_TypedefDef_out::operator= (IR_TypedefDef_ptr p)
 {
   this->ptr_ = p;
   return *this;
 }
 
 ACE_INLINE 
-IR::TypedefDef_out::operator ::IR::TypedefDef_ptr &() // cast
+IR_TypedefDef_out::operator ::IR_TypedefDef_ptr &() // cast
 {
   return this->ptr_;
 }
 
-ACE_INLINE ::IR::TypedefDef_ptr &
-IR::TypedefDef_out::ptr (void) // ptr
+ACE_INLINE ::IR_TypedefDef_ptr &
+IR_TypedefDef_out::ptr (void) // ptr
 {
   return this->ptr_;
 }
 
-ACE_INLINE ::IR::TypedefDef_ptr
-IR::TypedefDef_out::operator-> (void)
+ACE_INLINE ::IR_TypedefDef_ptr
+IR_TypedefDef_out::operator-> (void)
 {
   return this->ptr_;
 }
 
-
-#endif /* end #if !defined */
-
 // *************************************************************
-// Inline operations for class IR::TypeDescription_var
+// Inline operations for class IR_TypeDescription_var
 // *************************************************************
 
 ACE_INLINE
-IR::TypeDescription_var::TypeDescription_var (void) // default constructor
+IR_TypeDescription_var::IR_TypeDescription_var (void) // default constructor
   : ptr_ (0)
 {}
 
 ACE_INLINE
-IR::TypeDescription_var::TypeDescription_var (TypeDescription *p)
+IR_TypeDescription_var::IR_TypeDescription_var (IR_TypeDescription *p)
   : ptr_ (p)
 {}
 
 ACE_INLINE
-IR::TypeDescription_var::TypeDescription_var (const ::IR::TypeDescription_var &p) // copy constructor
+IR_TypeDescription_var::IR_TypeDescription_var (const ::IR_TypeDescription_var &p) // copy constructor
 {
   if (p.ptr_)
-    ACE_NEW (this->ptr_, ::IR::TypeDescription (*p.ptr_));
+    ACE_NEW (this->ptr_, ::IR_TypeDescription (*p.ptr_));
   else
     this->ptr_ = 0;
 }
 
 ACE_INLINE
-IR::TypeDescription_var::~TypeDescription_var (void) // destructor
+IR_TypeDescription_var::~IR_TypeDescription_var (void) // destructor
 {
   delete this->ptr_;
 }
 
-ACE_INLINE IR::TypeDescription_var &
-IR::TypeDescription_var::operator= (TypeDescription *p)
+ACE_INLINE IR_TypeDescription_var &
+IR_TypeDescription_var::operator= (IR_TypeDescription *p)
 {
   delete this->ptr_;
   this->ptr_ = p;
   return *this;
 }
 
-ACE_INLINE ::IR::TypeDescription_var &
-IR::TypeDescription_var::operator= (const ::IR::TypeDescription_var &p)
+ACE_INLINE ::IR_TypeDescription_var &
+IR_TypeDescription_var::operator= (const ::IR_TypeDescription_var &p)
 {
   if (this != &p)
     {
@@ -14200,12 +13242,12 @@
         }
       else
         {
-          TypeDescription *deep_copy =
-            new TypeDescription (*p.ptr_);
+          IR_TypeDescription *deep_copy = 
+            new IR_TypeDescription (*p.ptr_);
           
           if (deep_copy != 0)
             {
-              TypeDescription *tmp = deep_copy;
+              IR_TypeDescription *tmp = deep_copy;
               deep_copy = this->ptr_;
               this->ptr_ = tmp;
               delete deep_copy;
@@ -14216,91 +13258,91 @@
   return *this;
 }
 
-ACE_INLINE const ::IR::TypeDescription *
-IR::TypeDescription_var::operator-> (void) const
+ACE_INLINE const ::IR_TypeDescription *
+IR_TypeDescription_var::operator-> (void) const
 {
   return this->ptr_;
 }
 
-ACE_INLINE ::IR::TypeDescription *
-IR::TypeDescription_var::operator-> (void)
+ACE_INLINE ::IR_TypeDescription *
+IR_TypeDescription_var::operator-> (void)
 {
   return this->ptr_;
 }
 
 ACE_INLINE
-IR::TypeDescription_var::operator const ::IR::TypeDescription &() const // cast
+IR_TypeDescription_var::operator const ::IR_TypeDescription &() const // cast
 {
   return *this->ptr_;
 }
 
 ACE_INLINE
-IR::TypeDescription_var::operator ::IR::TypeDescription &() // cast 
+IR_TypeDescription_var::operator ::IR_TypeDescription &() // cast 
 {
   return *this->ptr_;
 }
 
 ACE_INLINE
-IR::TypeDescription_var::operator ::IR::TypeDescription &() const // cast 
+IR_TypeDescription_var::operator ::IR_TypeDescription &() const // cast 
 {
   return *this->ptr_;
 }
 
 // variable-size types only
 ACE_INLINE
-IR::TypeDescription_var::operator ::IR::TypeDescription *&() // cast 
+IR_TypeDescription_var::operator ::IR_TypeDescription *&() // cast 
 {
   return this->ptr_;
 }
 
-ACE_INLINE const ::IR::TypeDescription &
-IR::TypeDescription_var::in (void) const
+ACE_INLINE const ::IR_TypeDescription &
+IR_TypeDescription_var::in (void) const
 {
   return *this->ptr_;
 }
 
-ACE_INLINE ::IR::TypeDescription &
-IR::TypeDescription_var::inout (void)
+ACE_INLINE ::IR_TypeDescription &
+IR_TypeDescription_var::inout (void)
 {
   return *this->ptr_;
 }
 
 // mapping for variable size 
-ACE_INLINE ::IR::TypeDescription *&
-IR::TypeDescription_var::out (void)
+ACE_INLINE ::IR_TypeDescription *&
+IR_TypeDescription_var::out (void)
 {
   delete this->ptr_;
   this->ptr_ = 0;
   return this->ptr_;
 }
 
-ACE_INLINE ::IR::TypeDescription *
-IR::TypeDescription_var::_retn (void)
+ACE_INLINE ::IR_TypeDescription *
+IR_TypeDescription_var::_retn (void)
 {
-  ::IR::TypeDescription *tmp = this->ptr_;
+  ::IR_TypeDescription *tmp = this->ptr_;
   this->ptr_ = 0;
   return tmp;
 }
 
-ACE_INLINE ::IR::TypeDescription *
-IR::TypeDescription_var::ptr (void) const
+ACE_INLINE ::IR_TypeDescription *
+IR_TypeDescription_var::ptr (void) const
 {
   return this->ptr_;
 }
 
 // *************************************************************
-// Inline operations for class IR::TypeDescription_out
+// Inline operations for class IR_TypeDescription_out
 // *************************************************************
 
 ACE_INLINE
-IR::TypeDescription_out::TypeDescription_out (::IR::TypeDescription *&p)
+IR_TypeDescription_out::IR_TypeDescription_out (::IR_TypeDescription *&p)
   : ptr_ (p)
 {
   this->ptr_ = 0;
 }
 
 ACE_INLINE
-IR::TypeDescription_out::TypeDescription_out (TypeDescription_var &p) // constructor from _var
+IR_TypeDescription_out::IR_TypeDescription_out (IR_TypeDescription_var &p) // constructor from _var
   : ptr_ (p.out ())
 {
   delete this->ptr_;
@@ -14308,81 +13350,81 @@
 }
 
 ACE_INLINE
-IR::TypeDescription_out::TypeDescription_out (const ::IR::TypeDescription_out &p) // copy constructor
-  : ptr_ (ACE_const_cast (TypeDescription_out&, p).ptr_)
+IR_TypeDescription_out::IR_TypeDescription_out (const ::IR_TypeDescription_out &p) // copy constructor
+  : ptr_ (ACE_const_cast (IR_TypeDescription_out&, p).ptr_)
 {}
 
-ACE_INLINE IR::TypeDescription_out &
-IR::TypeDescription_out::operator= (const ::IR::TypeDescription_out &p)
+ACE_INLINE IR_TypeDescription_out &
+IR_TypeDescription_out::operator= (const ::IR_TypeDescription_out &p)
 {
-  this->ptr_ = ACE_const_cast (TypeDescription_out&, p).ptr_;
+  this->ptr_ = ACE_const_cast (IR_TypeDescription_out&, p).ptr_;
   return *this;
 }
 
-ACE_INLINE IR::TypeDescription_out &
-IR::TypeDescription_out::operator= (TypeDescription *p)
+ACE_INLINE IR_TypeDescription_out &
+IR_TypeDescription_out::operator= (IR_TypeDescription *p)
 {
   this->ptr_ = p;
   return *this;
 }
 
 ACE_INLINE 
-IR::TypeDescription_out::operator ::IR::TypeDescription *&() // cast
+IR_TypeDescription_out::operator ::IR_TypeDescription *&() // cast
 {
   return this->ptr_;
 }
 
-ACE_INLINE ::IR::TypeDescription *&
-IR::TypeDescription_out::ptr (void) // ptr
+ACE_INLINE ::IR_TypeDescription *&
+IR_TypeDescription_out::ptr (void) // ptr
 {
   return this->ptr_;
 }
 
-ACE_INLINE ::IR::TypeDescription *
-IR::TypeDescription_out::operator-> (void)
+ACE_INLINE ::IR_TypeDescription *
+IR_TypeDescription_out::operator-> (void)
 {
   return this->ptr_;
 }
 
 // *************************************************************
-// Inline operations for class IR::ExceptionDescription_var
+// Inline operations for class IR_ExceptionDescription_var
 // *************************************************************
 
 ACE_INLINE
-IR::ExceptionDescription_var::ExceptionDescription_var (void) // default constructor
+IR_ExceptionDescription_var::IR_ExceptionDescription_var (void) // default constructor
   : ptr_ (0)
 {}
 
 ACE_INLINE
-IR::ExceptionDescription_var::ExceptionDescription_var (ExceptionDescription *p)
+IR_ExceptionDescription_var::IR_ExceptionDescription_var (IR_ExceptionDescription *p)
   : ptr_ (p)
 {}
 
 ACE_INLINE
-IR::ExceptionDescription_var::ExceptionDescription_var (const ::IR::ExceptionDescription_var &p) // copy constructor
+IR_ExceptionDescription_var::IR_ExceptionDescription_var (const ::IR_ExceptionDescription_var &p) // copy constructor
 {
   if (p.ptr_)
-    ACE_NEW (this->ptr_, ::IR::ExceptionDescription (*p.ptr_));
+    ACE_NEW (this->ptr_, ::IR_ExceptionDescription (*p.ptr_));
   else
     this->ptr_ = 0;
 }
 
 ACE_INLINE
-IR::ExceptionDescription_var::~ExceptionDescription_var (void) // destructor
+IR_ExceptionDescription_var::~IR_ExceptionDescription_var (void) // destructor
 {
   delete this->ptr_;
 }
 
-ACE_INLINE IR::ExceptionDescription_var &
-IR::ExceptionDescription_var::operator= (ExceptionDescription *p)
+ACE_INLINE IR_ExceptionDescription_var &
+IR_ExceptionDescription_var::operator= (IR_ExceptionDescription *p)
 {
   delete this->ptr_;
   this->ptr_ = p;
   return *this;
 }
 
-ACE_INLINE ::IR::ExceptionDescription_var &
-IR::ExceptionDescription_var::operator= (const ::IR::ExceptionDescription_var &p)
+ACE_INLINE ::IR_ExceptionDescription_var &
+IR_ExceptionDescription_var::operator= (const ::IR_ExceptionDescription_var &p)
 {
   if (this != &p)
     {
@@ -14393,12 +13435,12 @@
         }
       else
         {
-          ExceptionDescription *deep_copy =
-            new ExceptionDescription (*p.ptr_);
+          IR_ExceptionDescription *deep_copy = 
+            new IR_ExceptionDescription (*p.ptr_);
           
           if (deep_copy != 0)
             {
-              ExceptionDescription *tmp = deep_copy;
+              IR_ExceptionDescription *tmp = deep_copy;
               deep_copy = this->ptr_;
               this->ptr_ = tmp;
               delete deep_copy;
@@ -14409,91 +13451,91 @@
   return *this;
 }
 
-ACE_INLINE const ::IR::ExceptionDescription *
-IR::ExceptionDescription_var::operator-> (void) const
+ACE_INLINE const ::IR_ExceptionDescription *
+IR_ExceptionDescription_var::operator-> (void) const
 {
   return this->ptr_;
 }
 
-ACE_INLINE ::IR::ExceptionDescription *
-IR::ExceptionDescription_var::operator-> (void)
+ACE_INLINE ::IR_ExceptionDescription *
+IR_ExceptionDescription_var::operator-> (void)
 {
   return this->ptr_;
 }
 
 ACE_INLINE
-IR::ExceptionDescription_var::operator const ::IR::ExceptionDescription &() const // cast
+IR_ExceptionDescription_var::operator const ::IR_ExceptionDescription &() const // cast
 {
   return *this->ptr_;
 }
 
 ACE_INLINE
-IR::ExceptionDescription_var::operator ::IR::ExceptionDescription &() // cast 
+IR_ExceptionDescription_var::operator ::IR_ExceptionDescription &() // cast 
 {
   return *this->ptr_;
 }
 
 ACE_INLINE
-IR::ExceptionDescription_var::operator ::IR::ExceptionDescription &() const // cast 
+IR_ExceptionDescription_var::operator ::IR_ExceptionDescription &() const // cast 
 {
   return *this->ptr_;
 }
 
 // variable-size types only
 ACE_INLINE
-IR::ExceptionDescription_var::operator ::IR::ExceptionDescription *&() // cast 
+IR_ExceptionDescription_var::operator ::IR_ExceptionDescription *&() // cast 
 {
   return this->ptr_;
 }
 
-ACE_INLINE const ::IR::ExceptionDescription &
-IR::ExceptionDescription_var::in (void) const
+ACE_INLINE const ::IR_ExceptionDescription &
+IR_ExceptionDescription_var::in (void) const
 {
   return *this->ptr_;
 }
 
-ACE_INLINE ::IR::ExceptionDescription &
-IR::ExceptionDescription_var::inout (void)
+ACE_INLINE ::IR_ExceptionDescription &
+IR_ExceptionDescription_var::inout (void)
 {
   return *this->ptr_;
 }
 
 // mapping for variable size 
-ACE_INLINE ::IR::ExceptionDescription *&
-IR::ExceptionDescription_var::out (void)
+ACE_INLINE ::IR_ExceptionDescription *&
+IR_ExceptionDescription_var::out (void)
 {
   delete this->ptr_;
   this->ptr_ = 0;
   return this->ptr_;
 }
 
-ACE_INLINE ::IR::ExceptionDescription *
-IR::ExceptionDescription_var::_retn (void)
+ACE_INLINE ::IR_ExceptionDescription *
+IR_ExceptionDescription_var::_retn (void)
 {
-  ::IR::ExceptionDescription *tmp = this->ptr_;
+  ::IR_ExceptionDescription *tmp = this->ptr_;
   this->ptr_ = 0;
   return tmp;
 }
 
-ACE_INLINE ::IR::ExceptionDescription *
-IR::ExceptionDescription_var::ptr (void) const
+ACE_INLINE ::IR_ExceptionDescription *
+IR_ExceptionDescription_var::ptr (void) const
 {
   return this->ptr_;
 }
 
 // *************************************************************
-// Inline operations for class IR::ExceptionDescription_out
+// Inline operations for class IR_ExceptionDescription_out
 // *************************************************************
 
 ACE_INLINE
-IR::ExceptionDescription_out::ExceptionDescription_out (::IR::ExceptionDescription *&p)
+IR_ExceptionDescription_out::IR_ExceptionDescription_out (::IR_ExceptionDescription *&p)
   : ptr_ (p)
 {
   this->ptr_ = 0;
 }
 
 ACE_INLINE
-IR::ExceptionDescription_out::ExceptionDescription_out (ExceptionDescription_var &p) // constructor from _var
+IR_ExceptionDescription_out::IR_ExceptionDescription_out (IR_ExceptionDescription_var &p) // constructor from _var
   : ptr_ (p.out ())
 {
   delete this->ptr_;
@@ -14501,63 +13543,59 @@
 }
 
 ACE_INLINE
-IR::ExceptionDescription_out::ExceptionDescription_out (const ::IR::ExceptionDescription_out &p) // copy constructor
-  : ptr_ (ACE_const_cast (ExceptionDescription_out&, p).ptr_)
+IR_ExceptionDescription_out::IR_ExceptionDescription_out (const ::IR_ExceptionDescription_out &p) // copy constructor
+  : ptr_ (ACE_const_cast (IR_ExceptionDescription_out&, p).ptr_)
 {}
 
-ACE_INLINE IR::ExceptionDescription_out &
-IR::ExceptionDescription_out::operator= (const ::IR::ExceptionDescription_out &p)
+ACE_INLINE IR_ExceptionDescription_out &
+IR_ExceptionDescription_out::operator= (const ::IR_ExceptionDescription_out &p)
 {
-  this->ptr_ = ACE_const_cast (ExceptionDescription_out&, p).ptr_;
+  this->ptr_ = ACE_const_cast (IR_ExceptionDescription_out&, p).ptr_;
   return *this;
 }
 
-ACE_INLINE IR::ExceptionDescription_out &
-IR::ExceptionDescription_out::operator= (ExceptionDescription *p)
+ACE_INLINE IR_ExceptionDescription_out &
+IR_ExceptionDescription_out::operator= (IR_ExceptionDescription *p)
 {
   this->ptr_ = p;
   return *this;
 }
 
 ACE_INLINE 
-IR::ExceptionDescription_out::operator ::IR::ExceptionDescription *&() // cast
+IR_ExceptionDescription_out::operator ::IR_ExceptionDescription *&() // cast
 {
   return this->ptr_;
 }
 
-ACE_INLINE ::IR::ExceptionDescription *&
-IR::ExceptionDescription_out::ptr (void) // ptr
+ACE_INLINE ::IR_ExceptionDescription *&
+IR_ExceptionDescription_out::ptr (void) // ptr
 {
   return this->ptr_;
 }
 
-ACE_INLINE ::IR::ExceptionDescription *
-IR::ExceptionDescription_out::operator-> (void)
+ACE_INLINE ::IR_ExceptionDescription *
+IR_ExceptionDescription_out::operator-> (void)
 {
   return this->ptr_;
 }
 
-
 #if !defined (TAO_USE_SEQUENCE_TEMPLATES)
   
-#if !defined (__TAO_UNBOUNDED_OBJECT_SEQUENCE_IR_EXCEPTIONDEFSEQ_CI_)
-#define __TAO_UNBOUNDED_OBJECT_SEQUENCE_IR_EXCEPTIONDEFSEQ_CI_
-
-  ACE_INLINE IR::ExceptionDef **
-  IR::_TAO_Unbounded_Object_Sequence_IR_ExceptionDefSeq::allocbuf (CORBA::ULong nelems)
+  ACE_INLINE IR_ExceptionDef **
+  _TAO_Unbounded_Object_Sequence_IR_ExceptionDefSeq::allocbuf (CORBA::ULong nelems)
   {
-    IR::ExceptionDef **buf = 0;
+    IR_ExceptionDef **buf = 0;
     
-    ACE_NEW_RETURN (buf, IR::ExceptionDef*[nelems], 0);
+    ACE_NEW_RETURN (buf, IR_ExceptionDef*[nelems], 0);
     
     for (CORBA::ULong i = 0; i < nelems; i++)
-      buf[i] = IR::ExceptionDef::_nil ();
+      buf[i] = IR_ExceptionDef::_nil ();
     
     return buf;
   }
   
   ACE_INLINE void 
-  IR::_TAO_Unbounded_Object_Sequence_IR_ExceptionDefSeq::freebuf (IR::ExceptionDef **buffer)
+  _TAO_Unbounded_Object_Sequence_IR_ExceptionDefSeq::freebuf (IR_ExceptionDef **buffer)
   {
     if (buffer == 0)
       return;
@@ -14565,36 +13603,36 @@
   }
   
   ACE_INLINE
-  IR::_TAO_Unbounded_Object_Sequence_IR_ExceptionDefSeq::_TAO_Unbounded_Object_Sequence_IR_ExceptionDefSeq (void)
+  _TAO_Unbounded_Object_Sequence_IR_ExceptionDefSeq::_TAO_Unbounded_Object_Sequence_IR_ExceptionDefSeq (void)
   {
   }
   
   ACE_INLINE
-  IR::_TAO_Unbounded_Object_Sequence_IR_ExceptionDefSeq::_TAO_Unbounded_Object_Sequence_IR_ExceptionDefSeq (CORBA::ULong maximum)
+  _TAO_Unbounded_Object_Sequence_IR_ExceptionDefSeq::_TAO_Unbounded_Object_Sequence_IR_ExceptionDefSeq (CORBA::ULong maximum)
     : TAO_Unbounded_Base_Sequence (maximum, _TAO_Unbounded_Object_Sequence_IR_ExceptionDefSeq::allocbuf (maximum))
   {
   }
   
   ACE_INLINE
-  IR::_TAO_Unbounded_Object_Sequence_IR_ExceptionDefSeq::_TAO_Unbounded_Object_Sequence_IR_ExceptionDefSeq (CORBA::ULong maximum,
+  _TAO_Unbounded_Object_Sequence_IR_ExceptionDefSeq::_TAO_Unbounded_Object_Sequence_IR_ExceptionDefSeq (CORBA::ULong maximum,
     CORBA::ULong length,
-    IR::ExceptionDef* *value,
+    IR_ExceptionDef* *value,
     CORBA::Boolean release)
   : TAO_Unbounded_Base_Sequence (maximum, length, value, release)
   {
   }
   
   ACE_INLINE
-  IR::_TAO_Unbounded_Object_Sequence_IR_ExceptionDefSeq::_TAO_Unbounded_Object_Sequence_IR_ExceptionDefSeq(const _TAO_Unbounded_Object_Sequence_IR_ExceptionDefSeq &rhs)
+  _TAO_Unbounded_Object_Sequence_IR_ExceptionDefSeq::_TAO_Unbounded_Object_Sequence_IR_ExceptionDefSeq(const _TAO_Unbounded_Object_Sequence_IR_ExceptionDefSeq &rhs)
     : TAO_Unbounded_Base_Sequence (rhs)
   {
     if (rhs.buffer_ != 0)
     {
-      IR::ExceptionDef **tmp1 = _TAO_Unbounded_Object_Sequence_IR_ExceptionDefSeq::allocbuf (this->maximum_);
-      IR::ExceptionDef ** const tmp2 = ACE_reinterpret_cast (IR::ExceptionDef ** ACE_CAST_CONST, rhs.buffer_);
+      IR_ExceptionDef **tmp1 = _TAO_Unbounded_Object_Sequence_IR_ExceptionDefSeq::allocbuf (this->maximum_);
+      IR_ExceptionDef ** const tmp2 = ACE_reinterpret_cast (IR_ExceptionDef ** ACE_CAST_CONST, rhs.buffer_);
       
       for (CORBA::ULong i = 0; i < rhs.length_; ++i)
-        tmp1[i] = IR::ExceptionDef::_duplicate (tmp2[i]);
+        tmp1[i] = IR_ExceptionDef::_duplicate (tmp2[i]);
       
       this->buffer_ = tmp1;
     }
@@ -14604,20 +13642,20 @@
     }
   }
   
-  ACE_INLINE IR::_TAO_Unbounded_Object_Sequence_IR_ExceptionDefSeq &
-  IR::_TAO_Unbounded_Object_Sequence_IR_ExceptionDefSeq::operator= (const _TAO_Unbounded_Object_Sequence_IR_ExceptionDefSeq &rhs)
+  ACE_INLINE _TAO_Unbounded_Object_Sequence_IR_ExceptionDefSeq &
+  _TAO_Unbounded_Object_Sequence_IR_ExceptionDefSeq::operator= (const _TAO_Unbounded_Object_Sequence_IR_ExceptionDefSeq &rhs)
   {
     if (this == &rhs)
       return *this;
     
     if (this->release_)
     {
-      IR::ExceptionDef **tmp = ACE_reinterpret_cast (IR::ExceptionDef **, this->buffer_);
+      IR_ExceptionDef **tmp = ACE_reinterpret_cast (IR_ExceptionDef **, this->buffer_);
       
       for (CORBA::ULong i = 0; i < this->length_; ++i)
       {
         CORBA::release (tmp[i]);
-        tmp[i] = IR::ExceptionDef::_nil ();
+        tmp[i] = IR_ExceptionDef::_nil ();
       }
       if (this->maximum_ < rhs.maximum_)
       {
@@ -14630,28 +13668,28 @@
     
     TAO_Unbounded_Base_Sequence::operator= (rhs);
     
-    IR::ExceptionDef **tmp1 = ACE_reinterpret_cast (IR::ExceptionDef **, this->buffer_);
-    IR::ExceptionDef ** const tmp2 = ACE_reinterpret_cast (IR::ExceptionDef ** ACE_CAST_CONST, rhs.buffer_);
+    IR_ExceptionDef **tmp1 = ACE_reinterpret_cast (IR_ExceptionDef **, this->buffer_);
+    IR_ExceptionDef ** const tmp2 = ACE_reinterpret_cast (IR_ExceptionDef ** ACE_CAST_CONST, rhs.buffer_);
     
     for (CORBA::ULong i = 0; i < rhs.length_; ++i)
-      tmp1[i] = IR::ExceptionDef::_duplicate (tmp2[i]);
+      tmp1[i] = IR_ExceptionDef::_duplicate (tmp2[i]);
     
     return *this;
   }
   
-  ACE_INLINE TAO_Object_Manager<IR::ExceptionDef,IR::ExceptionDef_var>
-  IR::_TAO_Unbounded_Object_Sequence_IR_ExceptionDefSeq::operator[] (CORBA::ULong index) const
+  ACE_INLINE TAO_Object_Manager<IR_ExceptionDef,IR_ExceptionDef_var>
+  _TAO_Unbounded_Object_Sequence_IR_ExceptionDefSeq::operator[] (CORBA::ULong index) const
   // read-write accessor
   {
     ACE_ASSERT (index < this->maximum_);
-    IR::ExceptionDef ** const tmp = ACE_reinterpret_cast (IR::ExceptionDef ** ACE_CAST_CONST, this->buffer_);
-    return TAO_Object_Manager<IR::ExceptionDef,IR::ExceptionDef_var> (tmp + index, this->release_);
+    IR_ExceptionDef ** const tmp = ACE_reinterpret_cast (IR_ExceptionDef ** ACE_CAST_CONST, this->buffer_);
+    return TAO_Object_Manager<IR_ExceptionDef,IR_ExceptionDef_var> (tmp + index, this->release_);
   }
   
-  ACE_INLINE IR::ExceptionDef* *
-  IR::_TAO_Unbounded_Object_Sequence_IR_ExceptionDefSeq::get_buffer (CORBA::Boolean orphan)
+  ACE_INLINE IR_ExceptionDef* *
+  _TAO_Unbounded_Object_Sequence_IR_ExceptionDefSeq::get_buffer (CORBA::Boolean orphan)
   {
-    IR::ExceptionDef **result = 0;
+    IR_ExceptionDef **result = 0;
     if (orphan == 0)
     {
       // We retain ownership.
@@ -14663,7 +13701,7 @@
       }
       else
       {
-        result = ACE_reinterpret_cast (IR::ExceptionDef**, this->buffer_);
+        result = ACE_reinterpret_cast (IR_ExceptionDef**, this->buffer_);
       }
     }
     else // if (orphan == 1)
@@ -14672,7 +13710,7 @@
       {
         // We set the state back to default and relinquish
         // ownership.
-        result = ACE_reinterpret_cast(IR::ExceptionDef**,this->buffer_);
+        result = ACE_reinterpret_cast(IR_ExceptionDef**,this->buffer_);
         this->maximum_ = 0;
         this->length_ = 0;
         this->buffer_ = 0;
@@ -14682,60 +13720,53 @@
     return result;
   }
   
-  ACE_INLINE const IR::ExceptionDef* *
-  IR::_TAO_Unbounded_Object_Sequence_IR_ExceptionDefSeq::get_buffer (void) const
+  ACE_INLINE const IR_ExceptionDef* *
+  _TAO_Unbounded_Object_Sequence_IR_ExceptionDefSeq::get_buffer (void) const
   {
-    return ACE_reinterpret_cast(const IR::ExceptionDef ** ACE_CAST_CONST, this->buffer_);
+    return ACE_reinterpret_cast(const IR_ExceptionDef ** ACE_CAST_CONST, this->buffer_);
   }
   
-  
-#endif /* end #if !defined */
-
-
 #endif /* !TAO_USE_SEQUENCE_TEMPLATES */ 
 
-#if !defined (_IR_EXCEPTIONDEFSEQ_CI_)
-#define _IR_EXCEPTIONDEFSEQ_CI_
-
 // *************************************************************
-// Inline operations for class IR::ExceptionDefSeq_var
+// Inline operations for class IR_ExceptionDefSeq_var
 // *************************************************************
 
 ACE_INLINE
-IR::ExceptionDefSeq_var::ExceptionDefSeq_var (void) // default constructor
+IR_ExceptionDefSeq_var::IR_ExceptionDefSeq_var (void) // default constructor
   : ptr_ (0)
 {}
 
 ACE_INLINE
-IR::ExceptionDefSeq_var::ExceptionDefSeq_var (ExceptionDefSeq *p)
+IR_ExceptionDefSeq_var::IR_ExceptionDefSeq_var (IR_ExceptionDefSeq *p)
   : ptr_ (p)
 {}
 
 ACE_INLINE
-IR::ExceptionDefSeq_var::ExceptionDefSeq_var (const ::IR::ExceptionDefSeq_var &p) // copy constructor
+IR_ExceptionDefSeq_var::IR_ExceptionDefSeq_var (const ::IR_ExceptionDefSeq_var &p) // copy constructor
 {
   if (p.ptr_)
-    ACE_NEW (this->ptr_, ::IR::ExceptionDefSeq (*p.ptr_));
+    ACE_NEW (this->ptr_, ::IR_ExceptionDefSeq (*p.ptr_));
   else
     this->ptr_ = 0;
 }
 
 ACE_INLINE
-IR::ExceptionDefSeq_var::~ExceptionDefSeq_var (void) // destructor
+IR_ExceptionDefSeq_var::~IR_ExceptionDefSeq_var (void) // destructor
 {
   delete this->ptr_;
 }
 
-ACE_INLINE IR::ExceptionDefSeq_var &
-IR::ExceptionDefSeq_var::operator= (ExceptionDefSeq *p)
+ACE_INLINE IR_ExceptionDefSeq_var &
+IR_ExceptionDefSeq_var::operator= (IR_ExceptionDefSeq *p)
 {
   delete this->ptr_;
   this->ptr_ = p;
   return *this;
 }
 
-ACE_INLINE ::IR::ExceptionDefSeq_var &
-IR::ExceptionDefSeq_var::operator= (const ::IR::ExceptionDefSeq_var &p)
+ACE_INLINE IR_ExceptionDefSeq_var &
+IR_ExceptionDefSeq_var::operator= (const ::IR_ExceptionDefSeq_var &p) // deep copy
 {
   if (this != &p)
     {
@@ -14746,12 +13777,12 @@
         }
       else
         {
-          ExceptionDefSeq *deep_copy =
-            new ExceptionDefSeq (*p.ptr_);
+          IR_ExceptionDefSeq *deep_copy = 
+            new IR_ExceptionDefSeq (*p.ptr_);
           
           if (deep_copy != 0)
             {
-              ExceptionDefSeq *tmp = deep_copy;
+              IR_ExceptionDefSeq *tmp = deep_copy;
               deep_copy = this->ptr_;
               this->ptr_ = tmp;
               delete deep_copy;
@@ -14762,97 +13793,97 @@
   return *this;
 }
 
-ACE_INLINE const ::IR::ExceptionDefSeq *
-IR::ExceptionDefSeq_var::operator-> (void) const
+ACE_INLINE const ::IR_ExceptionDefSeq *
+IR_ExceptionDefSeq_var::operator-> (void) const
 {
   return this->ptr_;
 }
 
-ACE_INLINE ::IR::ExceptionDefSeq *
-IR::ExceptionDefSeq_var::operator-> (void)
+ACE_INLINE ::IR_ExceptionDefSeq *
+IR_ExceptionDefSeq_var::operator-> (void)
 {
   return this->ptr_;
 }
 
 ACE_INLINE 
-IR::ExceptionDefSeq_var::operator const ::IR::ExceptionDefSeq &() const // cast
+IR_ExceptionDefSeq_var::operator const ::IR_ExceptionDefSeq &() const // cast
 {
   return *this->ptr_;
 }
 
 ACE_INLINE 
-IR::ExceptionDefSeq_var::operator ::IR::ExceptionDefSeq &() // cast 
+IR_ExceptionDefSeq_var::operator ::IR_ExceptionDefSeq &() // cast 
 {
   return *this->ptr_;
 }
 
 ACE_INLINE 
-IR::ExceptionDefSeq_var::operator ::IR::ExceptionDefSeq &() const // cast 
+IR_ExceptionDefSeq_var::operator ::IR_ExceptionDefSeq &() const // cast 
 {
   return *this->ptr_;
 }
 
 // variable-size types only
 ACE_INLINE
-IR::ExceptionDefSeq_var::operator ::IR::ExceptionDefSeq *&() // cast 
+IR_ExceptionDefSeq_var::operator ::IR_ExceptionDefSeq *&() // cast 
 {
   return this->ptr_;
 }
 
-ACE_INLINE TAO_Object_Manager<IR::ExceptionDef, IR::ExceptionDef_var>
-IR::ExceptionDefSeq_var::operator[] (CORBA::ULong index)
+ACE_INLINE TAO_Object_Manager<IR_ExceptionDef, IR_ExceptionDef_var>
+IR_ExceptionDefSeq_var::operator[] (CORBA::ULong index)
 {
   return this->ptr_->operator[] (index);
 }
 
-ACE_INLINE const ::IR::ExceptionDefSeq &
-IR::ExceptionDefSeq_var::in (void) const
+ACE_INLINE const ::IR_ExceptionDefSeq &
+IR_ExceptionDefSeq_var::in (void) const
 {
   return *this->ptr_;
 }
 
-ACE_INLINE ::IR::ExceptionDefSeq &
-IR::ExceptionDefSeq_var::inout (void)
+ACE_INLINE ::IR_ExceptionDefSeq &
+IR_ExceptionDefSeq_var::inout (void)
 {
   return *this->ptr_;
 }
 
 // mapping for variable size 
-ACE_INLINE ::IR::ExceptionDefSeq *&
-IR::ExceptionDefSeq_var::out (void)
+ACE_INLINE ::IR_ExceptionDefSeq *&
+IR_ExceptionDefSeq_var::out (void)
 {
   delete this->ptr_;
   this->ptr_ = 0;
   return this->ptr_;
 }
 
-ACE_INLINE ::IR::ExceptionDefSeq *
-IR::ExceptionDefSeq_var::_retn (void)
+ACE_INLINE ::IR_ExceptionDefSeq *
+IR_ExceptionDefSeq_var::_retn (void)
 {
-  ::IR::ExceptionDefSeq *tmp = this->ptr_;
+  ::IR_ExceptionDefSeq *tmp = this->ptr_;
   this->ptr_ = 0;
   return tmp;
 }
 
-ACE_INLINE ::IR::ExceptionDefSeq *
-IR::ExceptionDefSeq_var::ptr (void) const
+ACE_INLINE ::IR_ExceptionDefSeq *
+IR_ExceptionDefSeq_var::ptr (void) const
 {
   return this->ptr_;
 }
 
 // *************************************************************
-// Inline operations for class IR::ExceptionDefSeq_out
+// Inline operations for class IR_ExceptionDefSeq_out
 // *************************************************************
 
 ACE_INLINE
-IR::ExceptionDefSeq_out::ExceptionDefSeq_out (ExceptionDefSeq *&p)
+IR_ExceptionDefSeq_out::IR_ExceptionDefSeq_out (IR_ExceptionDefSeq *&p)
   : ptr_ (p)
 {
   this->ptr_ = 0;
 }
 
 ACE_INLINE
-IR::ExceptionDefSeq_out::ExceptionDefSeq_out (ExceptionDefSeq_var &p) // constructor from _var
+IR_ExceptionDefSeq_out::IR_ExceptionDefSeq_out (IR_ExceptionDefSeq_var &p) // constructor from _var
   : ptr_ (p.out ())
 {
   delete this->ptr_;
@@ -14860,102 +13891,95 @@
 }
 
 ACE_INLINE
-IR::ExceptionDefSeq_out::ExceptionDefSeq_out (const ::IR::ExceptionDefSeq_out &p) // copy constructor
-  : ptr_ (ACE_const_cast (ExceptionDefSeq_out&, p).ptr_)
+IR_ExceptionDefSeq_out::IR_ExceptionDefSeq_out (const ::IR_ExceptionDefSeq_out &p) // copy constructor
+  : ptr_ (ACE_const_cast (IR_ExceptionDefSeq_out&, p).ptr_)
 {}
 
-ACE_INLINE ::IR::ExceptionDefSeq_out &
-IR::ExceptionDefSeq_out::operator= (const ::IR::ExceptionDefSeq_out &p)
+ACE_INLINE ::IR_ExceptionDefSeq_out &
+IR_ExceptionDefSeq_out::operator= (const ::IR_ExceptionDefSeq_out &p)
 {
-  this->ptr_ = ACE_const_cast (ExceptionDefSeq_out&, p).ptr_;
+  this->ptr_ = ACE_const_cast (IR_ExceptionDefSeq_out&, p).ptr_;
   return *this;
 }
 
-ACE_INLINE ::IR::ExceptionDefSeq_out &
-IR::ExceptionDefSeq_out::operator= (ExceptionDefSeq *p)
+ACE_INLINE ::IR_ExceptionDefSeq_out &
+IR_ExceptionDefSeq_out::operator= (IR_ExceptionDefSeq *p)
 {
   this->ptr_ = p;
   return *this;
 }
 
 ACE_INLINE 
-IR::ExceptionDefSeq_out::operator ::IR::ExceptionDefSeq *&() // cast
+IR_ExceptionDefSeq_out::operator ::IR_ExceptionDefSeq *&() // cast
 {
   return this->ptr_;
 }
 
-ACE_INLINE ::IR::ExceptionDefSeq *&
-IR::ExceptionDefSeq_out::ptr (void) // ptr
+ACE_INLINE ::IR_ExceptionDefSeq *&
+IR_ExceptionDefSeq_out::ptr (void) // ptr
 {
   return this->ptr_;
 }
 
-ACE_INLINE ::IR::ExceptionDefSeq *
-IR::ExceptionDefSeq_out::operator-> (void)
+ACE_INLINE ::IR_ExceptionDefSeq *
+IR_ExceptionDefSeq_out::operator-> (void)
 {
   return this->ptr_;
 }
 
-ACE_INLINE TAO_Object_Manager<IR::ExceptionDef, IR::ExceptionDef_var>
-IR::ExceptionDefSeq_out::operator[] (CORBA::ULong index)
+ACE_INLINE TAO_Object_Manager<IR_ExceptionDef, IR_ExceptionDef_var>
+IR_ExceptionDefSeq_out::operator[] (CORBA::ULong index)
 {
   return this->ptr_->operator[] (index);
 }
 
-
-#endif /* end #if !defined */
-
-
 #if !defined (TAO_USE_SEQUENCE_TEMPLATES)
   
-#if !defined (__TAO_UNBOUNDED_SEQUENCE_IR_EXCDESCRIPTIONSEQ_CI_)
-#define __TAO_UNBOUNDED_SEQUENCE_IR_EXCDESCRIPTIONSEQ_CI_
-
   // = Static operations.
-  ACE_INLINE IR::ExceptionDescription *
-  IR::_TAO_Unbounded_Sequence_IR_ExcDescriptionSeq::allocbuf (CORBA::ULong size)
+  ACE_INLINE IR_ExceptionDescription *
+  _TAO_Unbounded_Sequence_IR_ExcDescriptionSeq::allocbuf (CORBA::ULong size)
   // Allocate storage for the sequence.
   {
-    IR::ExceptionDescription *retval = 0;
-    ACE_NEW_RETURN (retval, IR::ExceptionDescription[size], 0);
+    IR_ExceptionDescription *retval = 0;
+    ACE_NEW_RETURN (retval, IR_ExceptionDescription[size], 0);
     return retval;
   }
   
-  ACE_INLINE void IR::_TAO_Unbounded_Sequence_IR_ExcDescriptionSeq::freebuf (IR::ExceptionDescription *buffer)
+  ACE_INLINE void _TAO_Unbounded_Sequence_IR_ExcDescriptionSeq::freebuf (IR_ExceptionDescription *buffer)
   // Free the sequence.
   {
     delete [] buffer;
   }
   
   ACE_INLINE
-  IR::_TAO_Unbounded_Sequence_IR_ExcDescriptionSeq::_TAO_Unbounded_Sequence_IR_ExcDescriptionSeq (void) // Default constructor.
+  _TAO_Unbounded_Sequence_IR_ExcDescriptionSeq::_TAO_Unbounded_Sequence_IR_ExcDescriptionSeq (void) // Default constructor.
   {
   }
   
   ACE_INLINE
-  IR::_TAO_Unbounded_Sequence_IR_ExcDescriptionSeq::_TAO_Unbounded_Sequence_IR_ExcDescriptionSeq (CORBA::ULong maximum) // Constructor using a maximum length value.
+  _TAO_Unbounded_Sequence_IR_ExcDescriptionSeq::_TAO_Unbounded_Sequence_IR_ExcDescriptionSeq (CORBA::ULong maximum) // Constructor using a maximum length value.
     : TAO_Unbounded_Base_Sequence (maximum, _TAO_Unbounded_Sequence_IR_ExcDescriptionSeq::allocbuf (maximum))
   {
   }
   
   ACE_INLINE
-  IR::_TAO_Unbounded_Sequence_IR_ExcDescriptionSeq::_TAO_Unbounded_Sequence_IR_ExcDescriptionSeq (CORBA::ULong maximum,
+  _TAO_Unbounded_Sequence_IR_ExcDescriptionSeq::_TAO_Unbounded_Sequence_IR_ExcDescriptionSeq (CORBA::ULong maximum,
     CORBA::ULong length,
-    IR::ExceptionDescription *data,
+    IR_ExceptionDescription *data,
     CORBA::Boolean release)
   : TAO_Unbounded_Base_Sequence (maximum, length, data, release)
   {
   }
   
   ACE_INLINE
-  IR::_TAO_Unbounded_Sequence_IR_ExcDescriptionSeq::_TAO_Unbounded_Sequence_IR_ExcDescriptionSeq (const _TAO_Unbounded_Sequence_IR_ExcDescriptionSeq &rhs)
+  _TAO_Unbounded_Sequence_IR_ExcDescriptionSeq::_TAO_Unbounded_Sequence_IR_ExcDescriptionSeq (const _TAO_Unbounded_Sequence_IR_ExcDescriptionSeq &rhs)
   // Copy constructor.
     : TAO_Unbounded_Base_Sequence (rhs)
   {
     if (rhs.buffer_ != 0)
     {
-      IR::ExceptionDescription *tmp1 = _TAO_Unbounded_Sequence_IR_ExcDescriptionSeq::allocbuf (this->maximum_);
-      IR::ExceptionDescription * const tmp2 = ACE_reinterpret_cast (IR::ExceptionDescription * ACE_CAST_CONST, rhs.buffer_);
+      IR_ExceptionDescription *tmp1 = _TAO_Unbounded_Sequence_IR_ExcDescriptionSeq::allocbuf (this->maximum_);
+      IR_ExceptionDescription * const tmp2 = ACE_reinterpret_cast (IR_ExceptionDescription * ACE_CAST_CONST, rhs.buffer_);
       
       for (CORBA::ULong i = 0; i < this->length_; ++i)
         tmp1[i] = tmp2[i];
@@ -14968,8 +13992,8 @@
     }
   }
   
-  ACE_INLINE IR::_TAO_Unbounded_Sequence_IR_ExcDescriptionSeq &
-  IR::_TAO_Unbounded_Sequence_IR_ExcDescriptionSeq::operator= (const _TAO_Unbounded_Sequence_IR_ExcDescriptionSeq &rhs)
+  ACE_INLINE _TAO_Unbounded_Sequence_IR_ExcDescriptionSeq &
+  _TAO_Unbounded_Sequence_IR_ExcDescriptionSeq::operator= (const _TAO_Unbounded_Sequence_IR_ExcDescriptionSeq &rhs)
   // Assignment operator.
   {
     if (this == &rhs)
@@ -14980,7 +14004,7 @@
       if (this->maximum_ < rhs.maximum_)
       {
         // free the old buffer
-        IR::ExceptionDescription *tmp = ACE_reinterpret_cast (IR::ExceptionDescription *, this->buffer_);
+        IR_ExceptionDescription *tmp = ACE_reinterpret_cast (IR_ExceptionDescription *, this->buffer_);
         _TAO_Unbounded_Sequence_IR_ExcDescriptionSeq::freebuf (tmp);
         this->buffer_ = _TAO_Unbounded_Sequence_IR_ExcDescriptionSeq::allocbuf (rhs.maximum_);
       }
@@ -14990,8 +14014,8 @@
     
     TAO_Unbounded_Base_Sequence::operator= (rhs);
     
-    IR::ExceptionDescription *tmp1 = ACE_reinterpret_cast (IR::ExceptionDescription *, this->buffer_);
-    IR::ExceptionDescription * const tmp2 = ACE_reinterpret_cast (IR::ExceptionDescription * ACE_CAST_CONST, rhs.buffer_);
+    IR_ExceptionDescription *tmp1 = ACE_reinterpret_cast (IR_ExceptionDescription *, this->buffer_);
+    IR_ExceptionDescription * const tmp2 = ACE_reinterpret_cast (IR_ExceptionDescription * ACE_CAST_CONST, rhs.buffer_);
     
     for (CORBA::ULong i = 0; i < this->length_; ++i)
       tmp1[i] = tmp2[i];
@@ -15000,30 +14024,30 @@
   }
   
   // = Accessors.
-  ACE_INLINE IR::ExceptionDescription &
-  IR::_TAO_Unbounded_Sequence_IR_ExcDescriptionSeq::operator[] (CORBA::ULong i)
+  ACE_INLINE IR_ExceptionDescription &
+  _TAO_Unbounded_Sequence_IR_ExcDescriptionSeq::operator[] (CORBA::ULong i)
   // operator []
   {
     ACE_ASSERT (i < this->maximum_);
-    IR::ExceptionDescription* tmp = ACE_reinterpret_cast(IR::ExceptionDescription*,this->buffer_);
+    IR_ExceptionDescription* tmp = ACE_reinterpret_cast(IR_ExceptionDescription*,this->buffer_);
     return tmp[i];
   }
   
-  ACE_INLINE const IR::ExceptionDescription &
-  IR::_TAO_Unbounded_Sequence_IR_ExcDescriptionSeq::operator[] (CORBA::ULong i) const
+  ACE_INLINE const IR_ExceptionDescription &
+  _TAO_Unbounded_Sequence_IR_ExcDescriptionSeq::operator[] (CORBA::ULong i) const
   // operator []
   {
     ACE_ASSERT (i < this->maximum_);
-    IR::ExceptionDescription * const tmp = ACE_reinterpret_cast (IR::ExceptionDescription* ACE_CAST_CONST, this->buffer_);
+    IR_ExceptionDescription * const tmp = ACE_reinterpret_cast (IR_ExceptionDescription* ACE_CAST_CONST, this->buffer_);
     return tmp[i];
   }
   
   // Implement the TAO_Base_Sequence methods (see Sequence.h)
   
-  ACE_INLINE IR::ExceptionDescription *
-  IR::_TAO_Unbounded_Sequence_IR_ExcDescriptionSeq::get_buffer (CORBA::Boolean orphan)
+  ACE_INLINE IR_ExceptionDescription *
+  _TAO_Unbounded_Sequence_IR_ExcDescriptionSeq::get_buffer (CORBA::Boolean orphan)
   {
-    IR::ExceptionDescription *result = 0;
+    IR_ExceptionDescription *result = 0;
     if (orphan == 0)
     {
       // We retain ownership.
@@ -15035,7 +14059,7 @@
       }
       else
       {
-        result = ACE_reinterpret_cast (IR::ExceptionDescription*, this->buffer_);
+        result = ACE_reinterpret_cast (IR_ExceptionDescription*, this->buffer_);
       }
     }
     else // if (orphan == 1)
@@ -15044,7 +14068,7 @@
       {
         // We set the state back to default and relinquish
         // ownership.
-        result = ACE_reinterpret_cast(IR::ExceptionDescription*,this->buffer_);
+        result = ACE_reinterpret_cast(IR_ExceptionDescription*,this->buffer_);
         this->maximum_ = 0;
         this->length_ = 0;
         this->buffer_ = 0;
@@ -15054,76 +14078,70 @@
     return result;
   }
   
-  ACE_INLINE const IR::ExceptionDescription *
-  IR::_TAO_Unbounded_Sequence_IR_ExcDescriptionSeq::get_buffer (void) const
+  ACE_INLINE const IR_ExceptionDescription *
+  _TAO_Unbounded_Sequence_IR_ExcDescriptionSeq::get_buffer (void) const
   {
-    return ACE_reinterpret_cast(const IR::ExceptionDescription * ACE_CAST_CONST, this->buffer_);
+    return ACE_reinterpret_cast(const IR_ExceptionDescription * ACE_CAST_CONST, this->buffer_);
   }
   
   ACE_INLINE void
-  IR::_TAO_Unbounded_Sequence_IR_ExcDescriptionSeq::replace (CORBA::ULong max,
+  _TAO_Unbounded_Sequence_IR_ExcDescriptionSeq::replace (CORBA::ULong max,
   CORBA::ULong length,
-  IR::ExceptionDescription *data,
+  IR_ExceptionDescription *data,
   CORBA::Boolean release)
   {
     this->maximum_ = max;
     this->length_ = length;
     if (this->buffer_ && this->release_ == 1)
     {
-      IR::ExceptionDescription *tmp = ACE_reinterpret_cast(IR::ExceptionDescription*,this->buffer_);
+      IR_ExceptionDescription *tmp = ACE_reinterpret_cast(IR_ExceptionDescription*,this->buffer_);
       _TAO_Unbounded_Sequence_IR_ExcDescriptionSeq::freebuf (tmp);
     }
     this->buffer_ = data;
     this->release_ = release;
   }
   
-#endif /* end #if !defined */
-
-
 #endif /* !TAO_USE_SEQUENCE_TEMPLATES */ 
 
-#if !defined (_IR_EXCDESCRIPTIONSEQ_CI_)
-#define _IR_EXCDESCRIPTIONSEQ_CI_
-
 // *************************************************************
-// Inline operations for class IR::ExcDescriptionSeq_var
+// Inline operations for class IR_ExcDescriptionSeq_var
 // *************************************************************
 
 ACE_INLINE
-IR::ExcDescriptionSeq_var::ExcDescriptionSeq_var (void) // default constructor
+IR_ExcDescriptionSeq_var::IR_ExcDescriptionSeq_var (void) // default constructor
   : ptr_ (0)
 {}
 
 ACE_INLINE
-IR::ExcDescriptionSeq_var::ExcDescriptionSeq_var (ExcDescriptionSeq *p)
+IR_ExcDescriptionSeq_var::IR_ExcDescriptionSeq_var (IR_ExcDescriptionSeq *p)
   : ptr_ (p)
 {}
 
 ACE_INLINE
-IR::ExcDescriptionSeq_var::ExcDescriptionSeq_var (const ::IR::ExcDescriptionSeq_var &p) // copy constructor
+IR_ExcDescriptionSeq_var::IR_ExcDescriptionSeq_var (const ::IR_ExcDescriptionSeq_var &p) // copy constructor
 {
   if (p.ptr_)
-    ACE_NEW (this->ptr_, ::IR::ExcDescriptionSeq (*p.ptr_));
+    ACE_NEW (this->ptr_, ::IR_ExcDescriptionSeq (*p.ptr_));
   else
     this->ptr_ = 0;
 }
 
 ACE_INLINE
-IR::ExcDescriptionSeq_var::~ExcDescriptionSeq_var (void) // destructor
+IR_ExcDescriptionSeq_var::~IR_ExcDescriptionSeq_var (void) // destructor
 {
   delete this->ptr_;
 }
 
-ACE_INLINE IR::ExcDescriptionSeq_var &
-IR::ExcDescriptionSeq_var::operator= (ExcDescriptionSeq *p)
+ACE_INLINE IR_ExcDescriptionSeq_var &
+IR_ExcDescriptionSeq_var::operator= (IR_ExcDescriptionSeq *p)
 {
   delete this->ptr_;
   this->ptr_ = p;
   return *this;
 }
 
-ACE_INLINE ::IR::ExcDescriptionSeq_var &
-IR::ExcDescriptionSeq_var::operator= (const ::IR::ExcDescriptionSeq_var &p)
+ACE_INLINE IR_ExcDescriptionSeq_var &
+IR_ExcDescriptionSeq_var::operator= (const ::IR_ExcDescriptionSeq_var &p) // deep copy
 {
   if (this != &p)
     {
@@ -15134,12 +14152,12 @@
         }
       else
         {
-          ExcDescriptionSeq *deep_copy =
-            new ExcDescriptionSeq (*p.ptr_);
+          IR_ExcDescriptionSeq *deep_copy = 
+            new IR_ExcDescriptionSeq (*p.ptr_);
           
           if (deep_copy != 0)
             {
-              ExcDescriptionSeq *tmp = deep_copy;
+              IR_ExcDescriptionSeq *tmp = deep_copy;
               deep_copy = this->ptr_;
               this->ptr_ = tmp;
               delete deep_copy;
@@ -15150,103 +14168,103 @@
   return *this;
 }
 
-ACE_INLINE const ::IR::ExcDescriptionSeq *
-IR::ExcDescriptionSeq_var::operator-> (void) const
+ACE_INLINE const ::IR_ExcDescriptionSeq *
+IR_ExcDescriptionSeq_var::operator-> (void) const
 {
   return this->ptr_;
 }
 
-ACE_INLINE ::IR::ExcDescriptionSeq *
-IR::ExcDescriptionSeq_var::operator-> (void)
+ACE_INLINE ::IR_ExcDescriptionSeq *
+IR_ExcDescriptionSeq_var::operator-> (void)
 {
   return this->ptr_;
 }
 
 ACE_INLINE 
-IR::ExcDescriptionSeq_var::operator const ::IR::ExcDescriptionSeq &() const // cast
+IR_ExcDescriptionSeq_var::operator const ::IR_ExcDescriptionSeq &() const // cast
 {
   return *this->ptr_;
 }
 
 ACE_INLINE 
-IR::ExcDescriptionSeq_var::operator ::IR::ExcDescriptionSeq &() // cast 
+IR_ExcDescriptionSeq_var::operator ::IR_ExcDescriptionSeq &() // cast 
 {
   return *this->ptr_;
 }
 
 ACE_INLINE 
-IR::ExcDescriptionSeq_var::operator ::IR::ExcDescriptionSeq &() const // cast 
+IR_ExcDescriptionSeq_var::operator ::IR_ExcDescriptionSeq &() const // cast 
 {
   return *this->ptr_;
 }
 
 // variable-size types only
 ACE_INLINE
-IR::ExcDescriptionSeq_var::operator ::IR::ExcDescriptionSeq *&() // cast 
+IR_ExcDescriptionSeq_var::operator ::IR_ExcDescriptionSeq *&() // cast 
 {
   return this->ptr_;
 }
 
-ACE_INLINE IR::ExceptionDescription &
-IR::ExcDescriptionSeq_var::operator[] (CORBA::ULong index)
+ACE_INLINE IR_ExceptionDescription &
+IR_ExcDescriptionSeq_var::operator[] (CORBA::ULong index)
 {
   return this->ptr_->operator[] (index);
 }
 
-ACE_INLINE const IR::ExceptionDescription &
-IR::ExcDescriptionSeq_var::operator[] (CORBA::ULong index) const
+ACE_INLINE const IR_ExceptionDescription &
+IR_ExcDescriptionSeq_var::operator[] (CORBA::ULong index) const
 {
-  return ACE_const_cast (const IR::ExceptionDescription &, this->ptr_->operator[] (index));
+  return ACE_const_cast (const IR_ExceptionDescription &, this->ptr_->operator[] (index));
 }
 
-ACE_INLINE const ::IR::ExcDescriptionSeq &
-IR::ExcDescriptionSeq_var::in (void) const
+ACE_INLINE const ::IR_ExcDescriptionSeq &
+IR_ExcDescriptionSeq_var::in (void) const
 {
   return *this->ptr_;
 }
 
-ACE_INLINE ::IR::ExcDescriptionSeq &
-IR::ExcDescriptionSeq_var::inout (void)
+ACE_INLINE ::IR_ExcDescriptionSeq &
+IR_ExcDescriptionSeq_var::inout (void)
 {
   return *this->ptr_;
 }
 
 // mapping for variable size 
-ACE_INLINE ::IR::ExcDescriptionSeq *&
-IR::ExcDescriptionSeq_var::out (void)
+ACE_INLINE ::IR_ExcDescriptionSeq *&
+IR_ExcDescriptionSeq_var::out (void)
 {
   delete this->ptr_;
   this->ptr_ = 0;
   return this->ptr_;
 }
 
-ACE_INLINE ::IR::ExcDescriptionSeq *
-IR::ExcDescriptionSeq_var::_retn (void)
+ACE_INLINE ::IR_ExcDescriptionSeq *
+IR_ExcDescriptionSeq_var::_retn (void)
 {
-  ::IR::ExcDescriptionSeq *tmp = this->ptr_;
+  ::IR_ExcDescriptionSeq *tmp = this->ptr_;
   this->ptr_ = 0;
   return tmp;
 }
 
-ACE_INLINE ::IR::ExcDescriptionSeq *
-IR::ExcDescriptionSeq_var::ptr (void) const
+ACE_INLINE ::IR_ExcDescriptionSeq *
+IR_ExcDescriptionSeq_var::ptr (void) const
 {
   return this->ptr_;
 }
 
 // *************************************************************
-// Inline operations for class IR::ExcDescriptionSeq_out
+// Inline operations for class IR_ExcDescriptionSeq_out
 // *************************************************************
 
 ACE_INLINE
-IR::ExcDescriptionSeq_out::ExcDescriptionSeq_out (ExcDescriptionSeq *&p)
+IR_ExcDescriptionSeq_out::IR_ExcDescriptionSeq_out (IR_ExcDescriptionSeq *&p)
   : ptr_ (p)
 {
   this->ptr_ = 0;
 }
 
 ACE_INLINE
-IR::ExcDescriptionSeq_out::ExcDescriptionSeq_out (ExcDescriptionSeq_var &p) // constructor from _var
+IR_ExcDescriptionSeq_out::IR_ExcDescriptionSeq_out (IR_ExcDescriptionSeq_var &p) // constructor from _var
   : ptr_ (p.out ())
 {
   delete this->ptr_;
@@ -15254,57 +14272,50 @@
 }
 
 ACE_INLINE
-IR::ExcDescriptionSeq_out::ExcDescriptionSeq_out (const ::IR::ExcDescriptionSeq_out &p) // copy constructor
-  : ptr_ (ACE_const_cast (ExcDescriptionSeq_out&, p).ptr_)
+IR_ExcDescriptionSeq_out::IR_ExcDescriptionSeq_out (const ::IR_ExcDescriptionSeq_out &p) // copy constructor
+  : ptr_ (ACE_const_cast (IR_ExcDescriptionSeq_out&, p).ptr_)
 {}
 
-ACE_INLINE ::IR::ExcDescriptionSeq_out &
-IR::ExcDescriptionSeq_out::operator= (const ::IR::ExcDescriptionSeq_out &p)
+ACE_INLINE ::IR_ExcDescriptionSeq_out &
+IR_ExcDescriptionSeq_out::operator= (const ::IR_ExcDescriptionSeq_out &p)
 {
-  this->ptr_ = ACE_const_cast (ExcDescriptionSeq_out&, p).ptr_;
+  this->ptr_ = ACE_const_cast (IR_ExcDescriptionSeq_out&, p).ptr_;
   return *this;
 }
 
-ACE_INLINE ::IR::ExcDescriptionSeq_out &
-IR::ExcDescriptionSeq_out::operator= (ExcDescriptionSeq *p)
+ACE_INLINE ::IR_ExcDescriptionSeq_out &
+IR_ExcDescriptionSeq_out::operator= (IR_ExcDescriptionSeq *p)
 {
   this->ptr_ = p;
   return *this;
 }
 
 ACE_INLINE 
-IR::ExcDescriptionSeq_out::operator ::IR::ExcDescriptionSeq *&() // cast
+IR_ExcDescriptionSeq_out::operator ::IR_ExcDescriptionSeq *&() // cast
 {
   return this->ptr_;
 }
 
-ACE_INLINE ::IR::ExcDescriptionSeq *&
-IR::ExcDescriptionSeq_out::ptr (void) // ptr
+ACE_INLINE ::IR_ExcDescriptionSeq *&
+IR_ExcDescriptionSeq_out::ptr (void) // ptr
 {
   return this->ptr_;
 }
 
-ACE_INLINE ::IR::ExcDescriptionSeq *
-IR::ExcDescriptionSeq_out::operator-> (void)
+ACE_INLINE ::IR_ExcDescriptionSeq *
+IR_ExcDescriptionSeq_out::operator-> (void)
 {
   return this->ptr_;
 }
 
-ACE_INLINE IR::ExceptionDescription &
-IR::ExcDescriptionSeq_out::operator[] (CORBA::ULong index)
+ACE_INLINE IR_ExceptionDescription &
+IR_ExcDescriptionSeq_out::operator[] (CORBA::ULong index)
 {
   return this->ptr_->operator[] (index);
 }
 
-
-#endif /* end #if !defined */
-
-
-#if !defined (_IR_ATTRIBUTEDEF___CI_)
-#define _IR_ATTRIBUTEDEF___CI_
-
 ACE_INLINE
-IR::AttributeDef::AttributeDef (
+IR_AttributeDef::IR_AttributeDef (
     TAO_Stub *objref,
     CORBA::Boolean _tao_collocated,
     TAO_Abstract_ServantBase *servant
@@ -15314,217 +14325,201 @@
   this->IR_AttributeDef_setup_collocation (_tao_collocated);
 }
 
-#endif /* end #if !defined */
-
-
-#if !defined (_IR_ATTRIBUTEDEF___VAR_CI_)
-#define _IR_ATTRIBUTEDEF___VAR_CI_
-
 // *************************************************************
-// Inline operations for class IR::AttributeDef_var
+// Inline operations for class IR_AttributeDef_var
 // *************************************************************
 
 ACE_INLINE
-IR::AttributeDef_var::AttributeDef_var (void) // default constructor
-  : ptr_ (AttributeDef::_nil ())
+IR_AttributeDef_var::IR_AttributeDef_var (void) // default constructor
+  : ptr_ (IR_AttributeDef::_nil ())
 {}
 
-ACE_INLINE ::IR::AttributeDef_ptr
-IR::AttributeDef_var::ptr (void) const
+ACE_INLINE ::IR_AttributeDef_ptr
+IR_AttributeDef_var::ptr (void) const
 {
   return this->ptr_;
 }
 
 ACE_INLINE
-IR::AttributeDef_var::AttributeDef_var (const ::IR::AttributeDef_var &p) // copy constructor
+IR_AttributeDef_var::IR_AttributeDef_var (const ::IR_AttributeDef_var &p) // copy constructor
   : TAO_Base_var (),
-    ptr_ (AttributeDef::_duplicate (p.ptr ()))
+    ptr_ (IR_AttributeDef::_duplicate (p.ptr ()))
 {}
 
 ACE_INLINE
-IR::AttributeDef_var::~AttributeDef_var (void) // destructor
+IR_AttributeDef_var::~IR_AttributeDef_var (void) // destructor
 {
   CORBA::release (this->ptr_);
 }
 
-ACE_INLINE IR::AttributeDef_var &
-IR::AttributeDef_var::operator= (AttributeDef_ptr p)
+ACE_INLINE IR_AttributeDef_var &
+IR_AttributeDef_var::operator= (IR_AttributeDef_ptr p)
 {
   CORBA::release (this->ptr_);
   this->ptr_ = p;
   return *this;
 }
 
-ACE_INLINE IR::AttributeDef_var &
-IR::AttributeDef_var::operator= (const ::IR::AttributeDef_var &p)
+ACE_INLINE IR_AttributeDef_var &
+IR_AttributeDef_var::operator= (const ::IR_AttributeDef_var &p)
 {
   if (this != &p)
   {
     CORBA::release (this->ptr_);
-    this->ptr_ = ::IR::AttributeDef::_duplicate (p.ptr ());
+    this->ptr_ = ::IR_AttributeDef::_duplicate (p.ptr ());
   }
   return *this;
 }
 
 ACE_INLINE 
-IR::AttributeDef_var::operator const ::IR::AttributeDef_ptr &() const // cast
+IR_AttributeDef_var::operator const ::IR_AttributeDef_ptr &() const // cast
 {
   return this->ptr_;
 }
 
 ACE_INLINE 
-IR::AttributeDef_var::operator ::IR::AttributeDef_ptr &() // cast 
+IR_AttributeDef_var::operator ::IR_AttributeDef_ptr &() // cast 
 {
   return this->ptr_;
 }
 
-ACE_INLINE ::IR::AttributeDef_ptr
-IR::AttributeDef_var::operator-> (void) const
+ACE_INLINE ::IR_AttributeDef_ptr
+IR_AttributeDef_var::operator-> (void) const
 {
   return this->ptr_;
 }
 
-ACE_INLINE ::IR::AttributeDef_ptr
-IR::AttributeDef_var::in (void) const
+ACE_INLINE ::IR_AttributeDef_ptr
+IR_AttributeDef_var::in (void) const
 {
   return this->ptr_;
 }
 
-ACE_INLINE ::IR::AttributeDef_ptr &
-IR::AttributeDef_var::inout (void)
+ACE_INLINE ::IR_AttributeDef_ptr &
+IR_AttributeDef_var::inout (void)
 {
   return this->ptr_;
 }
 
-ACE_INLINE ::IR::AttributeDef_ptr &
-IR::AttributeDef_var::out (void)
+ACE_INLINE ::IR_AttributeDef_ptr &
+IR_AttributeDef_var::out (void)
 {
   CORBA::release (this->ptr_);
-  this->ptr_ = ::IR::AttributeDef::_nil ();
+  this->ptr_ = ::IR_AttributeDef::_nil ();
   return this->ptr_;
 }
 
-ACE_INLINE ::IR::AttributeDef_ptr
-IR::AttributeDef_var::_retn (void)
+ACE_INLINE ::IR_AttributeDef_ptr
+IR_AttributeDef_var::_retn (void)
 {
   // yield ownership of managed obj reference
-  ::IR::AttributeDef_ptr val = this->ptr_;
-  this->ptr_ = ::IR::AttributeDef::_nil ();
+  ::IR_AttributeDef_ptr val = this->ptr_;
+  this->ptr_ = ::IR_AttributeDef::_nil ();
   return val;
 }
 
-
-#endif /* end #if !defined */
-
-
-#if !defined (_IR_ATTRIBUTEDEF___OUT_CI_)
-#define _IR_ATTRIBUTEDEF___OUT_CI_
-
 // *************************************************************
-// Inline operations for class IR::AttributeDef_out
+// Inline operations for class IR_AttributeDef_out
 // *************************************************************
 
 ACE_INLINE
-IR::AttributeDef_out::AttributeDef_out (AttributeDef_ptr &p)
+IR_AttributeDef_out::IR_AttributeDef_out (IR_AttributeDef_ptr &p)
   : ptr_ (p)
 {
-  this->ptr_ = ::IR::AttributeDef::_nil ();
+  this->ptr_ = ::IR_AttributeDef::_nil ();
 }
 
 ACE_INLINE
-IR::AttributeDef_out::AttributeDef_out (AttributeDef_var &p) // constructor from _var
+IR_AttributeDef_out::IR_AttributeDef_out (IR_AttributeDef_var &p) // constructor from _var
   : ptr_ (p.out ())
 {
   CORBA::release (this->ptr_);
-  this->ptr_ = ::IR::AttributeDef::_nil ();
+  this->ptr_ = ::IR_AttributeDef::_nil ();
 }
 
 ACE_INLINE
-IR::AttributeDef_out::AttributeDef_out (const ::IR::AttributeDef_out &p) // copy constructor
-  : ptr_ (ACE_const_cast (AttributeDef_out &, p).ptr_)
+IR_AttributeDef_out::IR_AttributeDef_out (const ::IR_AttributeDef_out &p) // copy constructor
+  : ptr_ (ACE_const_cast (IR_AttributeDef_out &, p).ptr_)
 {}
 
-ACE_INLINE ::IR::AttributeDef_out &
-IR::AttributeDef_out::operator= (const ::IR::AttributeDef_out &p)
+ACE_INLINE ::IR_AttributeDef_out &
+IR_AttributeDef_out::operator= (const ::IR_AttributeDef_out &p)
 {
-  this->ptr_ = ACE_const_cast (AttributeDef_out&, p).ptr_;
+  this->ptr_ = ACE_const_cast (IR_AttributeDef_out&, p).ptr_;
   return *this;
 }
 
-ACE_INLINE IR::AttributeDef_out &
-IR::AttributeDef_out::operator= (const ::IR::AttributeDef_var &p)
+ACE_INLINE IR_AttributeDef_out &
+IR_AttributeDef_out::operator= (const ::IR_AttributeDef_var &p)
 {
-  this->ptr_ = ::IR::AttributeDef::_duplicate (p.ptr ());
+  this->ptr_ = ::IR_AttributeDef::_duplicate (p.ptr ());
   return *this;
 }
 
-ACE_INLINE IR::AttributeDef_out &
-IR::AttributeDef_out::operator= (AttributeDef_ptr p)
+ACE_INLINE IR_AttributeDef_out &
+IR_AttributeDef_out::operator= (IR_AttributeDef_ptr p)
 {
   this->ptr_ = p;
   return *this;
 }
 
 ACE_INLINE 
-IR::AttributeDef_out::operator ::IR::AttributeDef_ptr &() // cast
+IR_AttributeDef_out::operator ::IR_AttributeDef_ptr &() // cast
 {
   return this->ptr_;
 }
 
-ACE_INLINE ::IR::AttributeDef_ptr &
-IR::AttributeDef_out::ptr (void) // ptr
+ACE_INLINE ::IR_AttributeDef_ptr &
+IR_AttributeDef_out::ptr (void) // ptr
 {
   return this->ptr_;
 }
 
-ACE_INLINE ::IR::AttributeDef_ptr
-IR::AttributeDef_out::operator-> (void)
+ACE_INLINE ::IR_AttributeDef_ptr
+IR_AttributeDef_out::operator-> (void)
 {
   return this->ptr_;
 }
 
-
-#endif /* end #if !defined */
-
 // *************************************************************
-// Inline operations for class IR::AttributeDescription_var
+// Inline operations for class IR_AttributeDescription_var
 // *************************************************************
 
 ACE_INLINE
-IR::AttributeDescription_var::AttributeDescription_var (void) // default constructor
+IR_AttributeDescription_var::IR_AttributeDescription_var (void) // default constructor
   : ptr_ (0)
 {}
 
 ACE_INLINE
-IR::AttributeDescription_var::AttributeDescription_var (AttributeDescription *p)
+IR_AttributeDescription_var::IR_AttributeDescription_var (IR_AttributeDescription *p)
   : ptr_ (p)
 {}
 
 ACE_INLINE
-IR::AttributeDescription_var::AttributeDescription_var (const ::IR::AttributeDescription_var &p) // copy constructor
+IR_AttributeDescription_var::IR_AttributeDescription_var (const ::IR_AttributeDescription_var &p) // copy constructor
 {
   if (p.ptr_)
-    ACE_NEW (this->ptr_, ::IR::AttributeDescription (*p.ptr_));
+    ACE_NEW (this->ptr_, ::IR_AttributeDescription (*p.ptr_));
   else
     this->ptr_ = 0;
 }
 
 ACE_INLINE
-IR::AttributeDescription_var::~AttributeDescription_var (void) // destructor
+IR_AttributeDescription_var::~IR_AttributeDescription_var (void) // destructor
 {
   delete this->ptr_;
 }
 
-ACE_INLINE IR::AttributeDescription_var &
-IR::AttributeDescription_var::operator= (AttributeDescription *p)
+ACE_INLINE IR_AttributeDescription_var &
+IR_AttributeDescription_var::operator= (IR_AttributeDescription *p)
 {
   delete this->ptr_;
   this->ptr_ = p;
   return *this;
 }
 
-ACE_INLINE ::IR::AttributeDescription_var &
-IR::AttributeDescription_var::operator= (const ::IR::AttributeDescription_var &p)
+ACE_INLINE ::IR_AttributeDescription_var &
+IR_AttributeDescription_var::operator= (const ::IR_AttributeDescription_var &p)
 {
   if (this != &p)
     {
@@ -15535,12 +14530,12 @@
         }
       else
         {
-          AttributeDescription *deep_copy =
-            new AttributeDescription (*p.ptr_);
+          IR_AttributeDescription *deep_copy = 
+            new IR_AttributeDescription (*p.ptr_);
           
           if (deep_copy != 0)
             {
-              AttributeDescription *tmp = deep_copy;
+              IR_AttributeDescription *tmp = deep_copy;
               deep_copy = this->ptr_;
               this->ptr_ = tmp;
               delete deep_copy;
@@ -15551,91 +14546,91 @@
   return *this;
 }
 
-ACE_INLINE const ::IR::AttributeDescription *
-IR::AttributeDescription_var::operator-> (void) const
+ACE_INLINE const ::IR_AttributeDescription *
+IR_AttributeDescription_var::operator-> (void) const
 {
   return this->ptr_;
 }
 
-ACE_INLINE ::IR::AttributeDescription *
-IR::AttributeDescription_var::operator-> (void)
+ACE_INLINE ::IR_AttributeDescription *
+IR_AttributeDescription_var::operator-> (void)
 {
   return this->ptr_;
 }
 
 ACE_INLINE
-IR::AttributeDescription_var::operator const ::IR::AttributeDescription &() const // cast
+IR_AttributeDescription_var::operator const ::IR_AttributeDescription &() const // cast
 {
   return *this->ptr_;
 }
 
 ACE_INLINE
-IR::AttributeDescription_var::operator ::IR::AttributeDescription &() // cast 
+IR_AttributeDescription_var::operator ::IR_AttributeDescription &() // cast 
 {
   return *this->ptr_;
 }
 
 ACE_INLINE
-IR::AttributeDescription_var::operator ::IR::AttributeDescription &() const // cast 
+IR_AttributeDescription_var::operator ::IR_AttributeDescription &() const // cast 
 {
   return *this->ptr_;
 }
 
 // variable-size types only
 ACE_INLINE
-IR::AttributeDescription_var::operator ::IR::AttributeDescription *&() // cast 
+IR_AttributeDescription_var::operator ::IR_AttributeDescription *&() // cast 
 {
   return this->ptr_;
 }
 
-ACE_INLINE const ::IR::AttributeDescription &
-IR::AttributeDescription_var::in (void) const
+ACE_INLINE const ::IR_AttributeDescription &
+IR_AttributeDescription_var::in (void) const
 {
   return *this->ptr_;
 }
 
-ACE_INLINE ::IR::AttributeDescription &
-IR::AttributeDescription_var::inout (void)
+ACE_INLINE ::IR_AttributeDescription &
+IR_AttributeDescription_var::inout (void)
 {
   return *this->ptr_;
 }
 
 // mapping for variable size 
-ACE_INLINE ::IR::AttributeDescription *&
-IR::AttributeDescription_var::out (void)
+ACE_INLINE ::IR_AttributeDescription *&
+IR_AttributeDescription_var::out (void)
 {
   delete this->ptr_;
   this->ptr_ = 0;
   return this->ptr_;
 }
 
-ACE_INLINE ::IR::AttributeDescription *
-IR::AttributeDescription_var::_retn (void)
+ACE_INLINE ::IR_AttributeDescription *
+IR_AttributeDescription_var::_retn (void)
 {
-  ::IR::AttributeDescription *tmp = this->ptr_;
+  ::IR_AttributeDescription *tmp = this->ptr_;
   this->ptr_ = 0;
   return tmp;
 }
 
-ACE_INLINE ::IR::AttributeDescription *
-IR::AttributeDescription_var::ptr (void) const
+ACE_INLINE ::IR_AttributeDescription *
+IR_AttributeDescription_var::ptr (void) const
 {
   return this->ptr_;
 }
 
 // *************************************************************
-// Inline operations for class IR::AttributeDescription_out
+// Inline operations for class IR_AttributeDescription_out
 // *************************************************************
 
 ACE_INLINE
-IR::AttributeDescription_out::AttributeDescription_out (::IR::AttributeDescription *&p)
+IR_AttributeDescription_out::IR_AttributeDescription_out (::IR_AttributeDescription *&p)
   : ptr_ (p)
 {
   this->ptr_ = 0;
 }
 
 ACE_INLINE
-IR::AttributeDescription_out::AttributeDescription_out (AttributeDescription_var &p) // constructor from _var
+IR_AttributeDescription_out::IR_AttributeDescription_out (IR_AttributeDescription_var &p) // constructor from _var
   : ptr_ (p.out ())
 {
   delete this->ptr_;
@@ -15643,81 +14638,81 @@
 }
 
 ACE_INLINE
-IR::AttributeDescription_out::AttributeDescription_out (const ::IR::AttributeDescription_out &p) // copy constructor
-  : ptr_ (ACE_const_cast (AttributeDescription_out&, p).ptr_)
+IR_AttributeDescription_out::IR_AttributeDescription_out (const ::IR_AttributeDescription_out &p) // copy constructor
+  : ptr_ (ACE_const_cast (IR_AttributeDescription_out&, p).ptr_)
 {}
 
-ACE_INLINE IR::AttributeDescription_out &
-IR::AttributeDescription_out::operator= (const ::IR::AttributeDescription_out &p)
+ACE_INLINE IR_AttributeDescription_out &
+IR_AttributeDescription_out::operator= (const ::IR_AttributeDescription_out &p)
 {
-  this->ptr_ = ACE_const_cast (AttributeDescription_out&, p).ptr_;
+  this->ptr_ = ACE_const_cast (IR_AttributeDescription_out&, p).ptr_;
   return *this;
 }
 
-ACE_INLINE IR::AttributeDescription_out &
-IR::AttributeDescription_out::operator= (AttributeDescription *p)
+ACE_INLINE IR_AttributeDescription_out &
+IR_AttributeDescription_out::operator= (IR_AttributeDescription *p)
 {
   this->ptr_ = p;
   return *this;
 }
 
 ACE_INLINE 
-IR::AttributeDescription_out::operator ::IR::AttributeDescription *&() // cast
+IR_AttributeDescription_out::operator ::IR_AttributeDescription *&() // cast
 {
   return this->ptr_;
 }
 
-ACE_INLINE ::IR::AttributeDescription *&
-IR::AttributeDescription_out::ptr (void) // ptr
+ACE_INLINE ::IR_AttributeDescription *&
+IR_AttributeDescription_out::ptr (void) // ptr
 {
   return this->ptr_;
 }
 
-ACE_INLINE ::IR::AttributeDescription *
-IR::AttributeDescription_out::operator-> (void)
+ACE_INLINE ::IR_AttributeDescription *
+IR_AttributeDescription_out::operator-> (void)
 {
   return this->ptr_;
 }
 
 // *************************************************************
-// Inline operations for class IR::ParameterDescription_var
+// Inline operations for class IR_ParameterDescription_var
 // *************************************************************
 
 ACE_INLINE
-IR::ParameterDescription_var::ParameterDescription_var (void) // default constructor
+IR_ParameterDescription_var::IR_ParameterDescription_var (void) // default constructor
   : ptr_ (0)
 {}
 
 ACE_INLINE
-IR::ParameterDescription_var::ParameterDescription_var (ParameterDescription *p)
+IR_ParameterDescription_var::IR_ParameterDescription_var (IR_ParameterDescription *p)
   : ptr_ (p)
 {}
 
 ACE_INLINE
-IR::ParameterDescription_var::ParameterDescription_var (const ::IR::ParameterDescription_var &p) // copy constructor
+IR_ParameterDescription_var::IR_ParameterDescription_var (const ::IR_ParameterDescription_var &p) // copy constructor
 {
   if (p.ptr_)
-    ACE_NEW (this->ptr_, ::IR::ParameterDescription (*p.ptr_));
+    ACE_NEW (this->ptr_, ::IR_ParameterDescription (*p.ptr_));
   else
     this->ptr_ = 0;
 }
 
 ACE_INLINE
-IR::ParameterDescription_var::~ParameterDescription_var (void) // destructor
+IR_ParameterDescription_var::~IR_ParameterDescription_var (void) // destructor
 {
   delete this->ptr_;
 }
 
-ACE_INLINE IR::ParameterDescription_var &
-IR::ParameterDescription_var::operator= (ParameterDescription *p)
+ACE_INLINE IR_ParameterDescription_var &
+IR_ParameterDescription_var::operator= (IR_ParameterDescription *p)
 {
   delete this->ptr_;
   this->ptr_ = p;
   return *this;
 }
 
-ACE_INLINE ::IR::ParameterDescription_var &
-IR::ParameterDescription_var::operator= (const ::IR::ParameterDescription_var &p)
+ACE_INLINE ::IR_ParameterDescription_var &
+IR_ParameterDescription_var::operator= (const ::IR_ParameterDescription_var &p)
 {
   if (this != &p)
     {
@@ -15728,12 +14723,12 @@
         }
       else
         {
-          ParameterDescription *deep_copy =
-            new ParameterDescription (*p.ptr_);
+          IR_ParameterDescription *deep_copy = 
+            new IR_ParameterDescription (*p.ptr_);
           
           if (deep_copy != 0)
             {
-              ParameterDescription *tmp = deep_copy;
+              IR_ParameterDescription *tmp = deep_copy;
               deep_copy = this->ptr_;
               this->ptr_ = tmp;
               delete deep_copy;
@@ -15744,91 +14739,91 @@
   return *this;
 }
 
-ACE_INLINE const ::IR::ParameterDescription *
-IR::ParameterDescription_var::operator-> (void) const
+ACE_INLINE const ::IR_ParameterDescription *
+IR_ParameterDescription_var::operator-> (void) const
 {
   return this->ptr_;
 }
 
-ACE_INLINE ::IR::ParameterDescription *
-IR::ParameterDescription_var::operator-> (void)
+ACE_INLINE ::IR_ParameterDescription *
+IR_ParameterDescription_var::operator-> (void)
 {
   return this->ptr_;
 }
 
 ACE_INLINE
-IR::ParameterDescription_var::operator const ::IR::ParameterDescription &() const // cast
+IR_ParameterDescription_var::operator const ::IR_ParameterDescription &() const // cast
 {
   return *this->ptr_;
 }
 
 ACE_INLINE
-IR::ParameterDescription_var::operator ::IR::ParameterDescription &() // cast 
+IR_ParameterDescription_var::operator ::IR_ParameterDescription &() // cast 
 {
   return *this->ptr_;
 }
 
 ACE_INLINE
-IR::ParameterDescription_var::operator ::IR::ParameterDescription &() const // cast 
+IR_ParameterDescription_var::operator ::IR_ParameterDescription &() const // cast 
 {
   return *this->ptr_;
 }
 
 // variable-size types only
 ACE_INLINE
-IR::ParameterDescription_var::operator ::IR::ParameterDescription *&() // cast 
+IR_ParameterDescription_var::operator ::IR_ParameterDescription *&() // cast 
 {
   return this->ptr_;
 }
 
-ACE_INLINE const ::IR::ParameterDescription &
-IR::ParameterDescription_var::in (void) const
+ACE_INLINE const ::IR_ParameterDescription &
+IR_ParameterDescription_var::in (void) const
 {
   return *this->ptr_;
 }
 
-ACE_INLINE ::IR::ParameterDescription &
-IR::ParameterDescription_var::inout (void)
+ACE_INLINE ::IR_ParameterDescription &
+IR_ParameterDescription_var::inout (void)
 {
   return *this->ptr_;
 }
 
 // mapping for variable size 
-ACE_INLINE ::IR::ParameterDescription *&
-IR::ParameterDescription_var::out (void)
+ACE_INLINE ::IR_ParameterDescription *&
+IR_ParameterDescription_var::out (void)
 {
   delete this->ptr_;
   this->ptr_ = 0;
   return this->ptr_;
 }
 
-ACE_INLINE ::IR::ParameterDescription *
-IR::ParameterDescription_var::_retn (void)
+ACE_INLINE ::IR_ParameterDescription *
+IR_ParameterDescription_var::_retn (void)
 {
-  ::IR::ParameterDescription *tmp = this->ptr_;
+  ::IR_ParameterDescription *tmp = this->ptr_;
   this->ptr_ = 0;
   return tmp;
 }
 
-ACE_INLINE ::IR::ParameterDescription *
-IR::ParameterDescription_var::ptr (void) const
+ACE_INLINE ::IR_ParameterDescription *
+IR_ParameterDescription_var::ptr (void) const
 {
   return this->ptr_;
 }
 
 // *************************************************************
-// Inline operations for class IR::ParameterDescription_out
+// Inline operations for class IR_ParameterDescription_out
 // *************************************************************
 
 ACE_INLINE
-IR::ParameterDescription_out::ParameterDescription_out (::IR::ParameterDescription *&p)
+IR_ParameterDescription_out::IR_ParameterDescription_out (::IR_ParameterDescription *&p)
   : ptr_ (p)
 {
   this->ptr_ = 0;
 }
 
 ACE_INLINE
-IR::ParameterDescription_out::ParameterDescription_out (ParameterDescription_var &p) // constructor from _var
+IR_ParameterDescription_out::IR_ParameterDescription_out (IR_ParameterDescription_var &p) // constructor from _var
   : ptr_ (p.out ())
 {
   delete this->ptr_;
@@ -15836,93 +14831,89 @@
 }
 
 ACE_INLINE
-IR::ParameterDescription_out::ParameterDescription_out (const ::IR::ParameterDescription_out &p) // copy constructor
-  : ptr_ (ACE_const_cast (ParameterDescription_out&, p).ptr_)
+IR_ParameterDescription_out::IR_ParameterDescription_out (const ::IR_ParameterDescription_out &p) // copy constructor
+  : ptr_ (ACE_const_cast (IR_ParameterDescription_out&, p).ptr_)
 {}
 
-ACE_INLINE IR::ParameterDescription_out &
-IR::ParameterDescription_out::operator= (const ::IR::ParameterDescription_out &p)
+ACE_INLINE IR_ParameterDescription_out &
+IR_ParameterDescription_out::operator= (const ::IR_ParameterDescription_out &p)
 {
-  this->ptr_ = ACE_const_cast (ParameterDescription_out&, p).ptr_;
+  this->ptr_ = ACE_const_cast (IR_ParameterDescription_out&, p).ptr_;
   return *this;
 }
 
-ACE_INLINE IR::ParameterDescription_out &
-IR::ParameterDescription_out::operator= (ParameterDescription *p)
+ACE_INLINE IR_ParameterDescription_out &
+IR_ParameterDescription_out::operator= (IR_ParameterDescription *p)
 {
   this->ptr_ = p;
   return *this;
 }
 
 ACE_INLINE 
-IR::ParameterDescription_out::operator ::IR::ParameterDescription *&() // cast
+IR_ParameterDescription_out::operator ::IR_ParameterDescription *&() // cast
 {
   return this->ptr_;
 }
 
-ACE_INLINE ::IR::ParameterDescription *&
-IR::ParameterDescription_out::ptr (void) // ptr
+ACE_INLINE ::IR_ParameterDescription *&
+IR_ParameterDescription_out::ptr (void) // ptr
 {
   return this->ptr_;
 }
 
-ACE_INLINE ::IR::ParameterDescription *
-IR::ParameterDescription_out::operator-> (void)
+ACE_INLINE ::IR_ParameterDescription *
+IR_ParameterDescription_out::operator-> (void)
 {
   return this->ptr_;
 }
 
-
 #if !defined (TAO_USE_SEQUENCE_TEMPLATES)
   
-#if !defined (__TAO_UNBOUNDED_SEQUENCE_IR_PARDESCRIPTIONSEQ_CI_)
-#define __TAO_UNBOUNDED_SEQUENCE_IR_PARDESCRIPTIONSEQ_CI_
-
   // = Static operations.
-  ACE_INLINE IR::ParameterDescription *
-  IR::_TAO_Unbounded_Sequence_IR_ParDescriptionSeq::allocbuf (CORBA::ULong size)
+  ACE_INLINE IR_ParameterDescription *
+  _TAO_Unbounded_Sequence_IR_ParDescriptionSeq::allocbuf (CORBA::ULong size)
   // Allocate storage for the sequence.
   {
-    IR::ParameterDescription *retval = 0;
-    ACE_NEW_RETURN (retval, IR::ParameterDescription[size], 0);
+    IR_ParameterDescription *retval = 0;
+    ACE_NEW_RETURN (retval, IR_ParameterDescription[size], 0);
     return retval;
   }
   
-  ACE_INLINE void IR::_TAO_Unbounded_Sequence_IR_ParDescriptionSeq::freebuf (IR::ParameterDescription *buffer)
+  ACE_INLINE void _TAO_Unbounded_Sequence_IR_ParDescriptionSeq::freebuf (IR_ParameterDescription *buffer)
   // Free the sequence.
   {
     delete [] buffer;
   }
   
   ACE_INLINE
-  IR::_TAO_Unbounded_Sequence_IR_ParDescriptionSeq::_TAO_Unbounded_Sequence_IR_ParDescriptionSeq (void) // Default constructor.
+  _TAO_Unbounded_Sequence_IR_ParDescriptionSeq::_TAO_Unbounded_Sequence_IR_ParDescriptionSeq (void) // Default constructor.
   {
   }
   
   ACE_INLINE
-  IR::_TAO_Unbounded_Sequence_IR_ParDescriptionSeq::_TAO_Unbounded_Sequence_IR_ParDescriptionSeq (CORBA::ULong maximum) // Constructor using a maximum length value.
+  _TAO_Unbounded_Sequence_IR_ParDescriptionSeq::_TAO_Unbounded_Sequence_IR_ParDescriptionSeq (CORBA::ULong maximum) // Constructor using a maximum length value.
     : TAO_Unbounded_Base_Sequence (maximum, _TAO_Unbounded_Sequence_IR_ParDescriptionSeq::allocbuf (maximum))
   {
   }
   
   ACE_INLINE
-  IR::_TAO_Unbounded_Sequence_IR_ParDescriptionSeq::_TAO_Unbounded_Sequence_IR_ParDescriptionSeq (CORBA::ULong maximum,
+  _TAO_Unbounded_Sequence_IR_ParDescriptionSeq::_TAO_Unbounded_Sequence_IR_ParDescriptionSeq (CORBA::ULong maximum,
     CORBA::ULong length,
-    IR::ParameterDescription *data,
+    IR_ParameterDescription *data,
     CORBA::Boolean release)
   : TAO_Unbounded_Base_Sequence (maximum, length, data, release)
   {
   }
   
   ACE_INLINE
-  IR::_TAO_Unbounded_Sequence_IR_ParDescriptionSeq::_TAO_Unbounded_Sequence_IR_ParDescriptionSeq (const _TAO_Unbounded_Sequence_IR_ParDescriptionSeq &rhs)
+  _TAO_Unbounded_Sequence_IR_ParDescriptionSeq::_TAO_Unbounded_Sequence_IR_ParDescriptionSeq (const _TAO_Unbounded_Sequence_IR_ParDescriptionSeq &rhs)
   // Copy constructor.
     : TAO_Unbounded_Base_Sequence (rhs)
   {
     if (rhs.buffer_ != 0)
     {
-      IR::ParameterDescription *tmp1 = _TAO_Unbounded_Sequence_IR_ParDescriptionSeq::allocbuf (this->maximum_);
-      IR::ParameterDescription * const tmp2 = ACE_reinterpret_cast (IR::ParameterDescription * ACE_CAST_CONST, rhs.buffer_);
+      IR_ParameterDescription *tmp1 = _TAO_Unbounded_Sequence_IR_ParDescriptionSeq::allocbuf (this->maximum_);
+      IR_ParameterDescription * const tmp2 = ACE_reinterpret_cast (IR_ParameterDescription * ACE_CAST_CONST, rhs.buffer_);
       
       for (CORBA::ULong i = 0; i < this->length_; ++i)
         tmp1[i] = tmp2[i];
@@ -15935,8 +14926,8 @@
     }
   }
   
-  ACE_INLINE IR::_TAO_Unbounded_Sequence_IR_ParDescriptionSeq &
-  IR::_TAO_Unbounded_Sequence_IR_ParDescriptionSeq::operator= (const _TAO_Unbounded_Sequence_IR_ParDescriptionSeq &rhs)
+  ACE_INLINE _TAO_Unbounded_Sequence_IR_ParDescriptionSeq &
+  _TAO_Unbounded_Sequence_IR_ParDescriptionSeq::operator= (const _TAO_Unbounded_Sequence_IR_ParDescriptionSeq &rhs)
   // Assignment operator.
   {
     if (this == &rhs)
@@ -15947,7 +14938,7 @@
       if (this->maximum_ < rhs.maximum_)
       {
         // free the old buffer
-        IR::ParameterDescription *tmp = ACE_reinterpret_cast (IR::ParameterDescription *, this->buffer_);
+        IR_ParameterDescription *tmp = ACE_reinterpret_cast (IR_ParameterDescription *, this->buffer_);
         _TAO_Unbounded_Sequence_IR_ParDescriptionSeq::freebuf (tmp);
         this->buffer_ = _TAO_Unbounded_Sequence_IR_ParDescriptionSeq::allocbuf (rhs.maximum_);
       }
@@ -15957,8 +14948,8 @@
     
     TAO_Unbounded_Base_Sequence::operator= (rhs);
     
-    IR::ParameterDescription *tmp1 = ACE_reinterpret_cast (IR::ParameterDescription *, this->buffer_);
-    IR::ParameterDescription * const tmp2 = ACE_reinterpret_cast (IR::ParameterDescription * ACE_CAST_CONST, rhs.buffer_);
+    IR_ParameterDescription *tmp1 = ACE_reinterpret_cast (IR_ParameterDescription *, this->buffer_);
+    IR_ParameterDescription * const tmp2 = ACE_reinterpret_cast (IR_ParameterDescription * ACE_CAST_CONST, rhs.buffer_);
     
     for (CORBA::ULong i = 0; i < this->length_; ++i)
       tmp1[i] = tmp2[i];
@@ -15967,30 +14958,30 @@
   }
   
   // = Accessors.
-  ACE_INLINE IR::ParameterDescription &
-  IR::_TAO_Unbounded_Sequence_IR_ParDescriptionSeq::operator[] (CORBA::ULong i)
+  ACE_INLINE IR_ParameterDescription &
+  _TAO_Unbounded_Sequence_IR_ParDescriptionSeq::operator[] (CORBA::ULong i)
   // operator []
   {
     ACE_ASSERT (i < this->maximum_);
-    IR::ParameterDescription* tmp = ACE_reinterpret_cast(IR::ParameterDescription*,this->buffer_);
+    IR_ParameterDescription* tmp = ACE_reinterpret_cast(IR_ParameterDescription*,this->buffer_);
     return tmp[i];
   }
   
-  ACE_INLINE const IR::ParameterDescription &
-  IR::_TAO_Unbounded_Sequence_IR_ParDescriptionSeq::operator[] (CORBA::ULong i) const
+  ACE_INLINE const IR_ParameterDescription &
+  _TAO_Unbounded_Sequence_IR_ParDescriptionSeq::operator[] (CORBA::ULong i) const
   // operator []
   {
     ACE_ASSERT (i < this->maximum_);
-    IR::ParameterDescription * const tmp = ACE_reinterpret_cast (IR::ParameterDescription* ACE_CAST_CONST, this->buffer_);
+    IR_ParameterDescription * const tmp = ACE_reinterpret_cast (IR_ParameterDescription* ACE_CAST_CONST, this->buffer_);
     return tmp[i];
   }
   
   // Implement the TAO_Base_Sequence methods (see Sequence.h)
   
-  ACE_INLINE IR::ParameterDescription *
-  IR::_TAO_Unbounded_Sequence_IR_ParDescriptionSeq::get_buffer (CORBA::Boolean orphan)
+  ACE_INLINE IR_ParameterDescription *
+  _TAO_Unbounded_Sequence_IR_ParDescriptionSeq::get_buffer (CORBA::Boolean orphan)
   {
-    IR::ParameterDescription *result = 0;
+    IR_ParameterDescription *result = 0;
     if (orphan == 0)
     {
       // We retain ownership.
@@ -16002,7 +14993,7 @@
       }
       else
       {
-        result = ACE_reinterpret_cast (IR::ParameterDescription*, this->buffer_);
+        result = ACE_reinterpret_cast (IR_ParameterDescription*, this->buffer_);
       }
     }
     else // if (orphan == 1)
@@ -16011,7 +15002,7 @@
       {
         // We set the state back to default and relinquish
         // ownership.
-        result = ACE_reinterpret_cast(IR::ParameterDescription*,this->buffer_);
+        result = ACE_reinterpret_cast(IR_ParameterDescription*,this->buffer_);
         this->maximum_ = 0;
         this->length_ = 0;
         this->buffer_ = 0;
@@ -16021,76 +15012,70 @@
     return result;
   }
   
-  ACE_INLINE const IR::ParameterDescription *
-  IR::_TAO_Unbounded_Sequence_IR_ParDescriptionSeq::get_buffer (void) const
+  ACE_INLINE const IR_ParameterDescription *
+  _TAO_Unbounded_Sequence_IR_ParDescriptionSeq::get_buffer (void) const
   {
-    return ACE_reinterpret_cast(const IR::ParameterDescription * ACE_CAST_CONST, this->buffer_);
+    return ACE_reinterpret_cast(const IR_ParameterDescription * ACE_CAST_CONST, this->buffer_);
   }
   
   ACE_INLINE void
-  IR::_TAO_Unbounded_Sequence_IR_ParDescriptionSeq::replace (CORBA::ULong max,
+  _TAO_Unbounded_Sequence_IR_ParDescriptionSeq::replace (CORBA::ULong max,
   CORBA::ULong length,
-  IR::ParameterDescription *data,
+  IR_ParameterDescription *data,
   CORBA::Boolean release)
   {
     this->maximum_ = max;
     this->length_ = length;
     if (this->buffer_ && this->release_ == 1)
     {
-      IR::ParameterDescription *tmp = ACE_reinterpret_cast(IR::ParameterDescription*,this->buffer_);
+      IR_ParameterDescription *tmp = ACE_reinterpret_cast(IR_ParameterDescription*,this->buffer_);
       _TAO_Unbounded_Sequence_IR_ParDescriptionSeq::freebuf (tmp);
     }
     this->buffer_ = data;
     this->release_ = release;
   }
   
-#endif /* end #if !defined */
-
-
 #endif /* !TAO_USE_SEQUENCE_TEMPLATES */ 
 
-#if !defined (_IR_PARDESCRIPTIONSEQ_CI_)
-#define _IR_PARDESCRIPTIONSEQ_CI_
-
 // *************************************************************
-// Inline operations for class IR::ParDescriptionSeq_var
+// Inline operations for class IR_ParDescriptionSeq_var
 // *************************************************************
 
 ACE_INLINE
-IR::ParDescriptionSeq_var::ParDescriptionSeq_var (void) // default constructor
+IR_ParDescriptionSeq_var::IR_ParDescriptionSeq_var (void) // default constructor
   : ptr_ (0)
 {}
 
 ACE_INLINE
-IR::ParDescriptionSeq_var::ParDescriptionSeq_var (ParDescriptionSeq *p)
+IR_ParDescriptionSeq_var::IR_ParDescriptionSeq_var (IR_ParDescriptionSeq *p)
   : ptr_ (p)
 {}
 
 ACE_INLINE
-IR::ParDescriptionSeq_var::ParDescriptionSeq_var (const ::IR::ParDescriptionSeq_var &p) // copy constructor
+IR_ParDescriptionSeq_var::IR_ParDescriptionSeq_var (const ::IR_ParDescriptionSeq_var &p) // copy constructor
 {
   if (p.ptr_)
-    ACE_NEW (this->ptr_, ::IR::ParDescriptionSeq (*p.ptr_));
+    ACE_NEW (this->ptr_, ::IR_ParDescriptionSeq (*p.ptr_));
   else
     this->ptr_ = 0;
 }
 
 ACE_INLINE
-IR::ParDescriptionSeq_var::~ParDescriptionSeq_var (void) // destructor
+IR_ParDescriptionSeq_var::~IR_ParDescriptionSeq_var (void) // destructor
 {
   delete this->ptr_;
 }
 
-ACE_INLINE IR::ParDescriptionSeq_var &
-IR::ParDescriptionSeq_var::operator= (ParDescriptionSeq *p)
+ACE_INLINE IR_ParDescriptionSeq_var &
+IR_ParDescriptionSeq_var::operator= (IR_ParDescriptionSeq *p)
 {
   delete this->ptr_;
   this->ptr_ = p;
   return *this;
 }
 
-ACE_INLINE ::IR::ParDescriptionSeq_var &
-IR::ParDescriptionSeq_var::operator= (const ::IR::ParDescriptionSeq_var &p)
+ACE_INLINE IR_ParDescriptionSeq_var &
+IR_ParDescriptionSeq_var::operator= (const ::IR_ParDescriptionSeq_var &p) // deep copy
 {
   if (this != &p)
     {
@@ -16101,12 +15086,12 @@
         }
       else
         {
-          ParDescriptionSeq *deep_copy =
-            new ParDescriptionSeq (*p.ptr_);
+          IR_ParDescriptionSeq *deep_copy = 
+            new IR_ParDescriptionSeq (*p.ptr_);
           
           if (deep_copy != 0)
             {
-              ParDescriptionSeq *tmp = deep_copy;
+              IR_ParDescriptionSeq *tmp = deep_copy;
               deep_copy = this->ptr_;
               this->ptr_ = tmp;
               delete deep_copy;
@@ -16117,103 +15102,103 @@
   return *this;
 }
 
-ACE_INLINE const ::IR::ParDescriptionSeq *
-IR::ParDescriptionSeq_var::operator-> (void) const
+ACE_INLINE const ::IR_ParDescriptionSeq *
+IR_ParDescriptionSeq_var::operator-> (void) const
 {
   return this->ptr_;
 }
 
-ACE_INLINE ::IR::ParDescriptionSeq *
-IR::ParDescriptionSeq_var::operator-> (void)
+ACE_INLINE ::IR_ParDescriptionSeq *
+IR_ParDescriptionSeq_var::operator-> (void)
 {
   return this->ptr_;
 }
 
 ACE_INLINE 
-IR::ParDescriptionSeq_var::operator const ::IR::ParDescriptionSeq &() const // cast
+IR_ParDescriptionSeq_var::operator const ::IR_ParDescriptionSeq &() const // cast
 {
   return *this->ptr_;
 }
 
 ACE_INLINE 
-IR::ParDescriptionSeq_var::operator ::IR::ParDescriptionSeq &() // cast 
+IR_ParDescriptionSeq_var::operator ::IR_ParDescriptionSeq &() // cast 
 {
   return *this->ptr_;
 }
 
 ACE_INLINE 
-IR::ParDescriptionSeq_var::operator ::IR::ParDescriptionSeq &() const // cast 
+IR_ParDescriptionSeq_var::operator ::IR_ParDescriptionSeq &() const // cast 
 {
   return *this->ptr_;
 }
 
 // variable-size types only
 ACE_INLINE
-IR::ParDescriptionSeq_var::operator ::IR::ParDescriptionSeq *&() // cast 
+IR_ParDescriptionSeq_var::operator ::IR_ParDescriptionSeq *&() // cast 
 {
   return this->ptr_;
 }
 
-ACE_INLINE IR::ParameterDescription &
-IR::ParDescriptionSeq_var::operator[] (CORBA::ULong index)
+ACE_INLINE IR_ParameterDescription &
+IR_ParDescriptionSeq_var::operator[] (CORBA::ULong index)
 {
   return this->ptr_->operator[] (index);
 }
 
-ACE_INLINE const IR::ParameterDescription &
-IR::ParDescriptionSeq_var::operator[] (CORBA::ULong index) const
+ACE_INLINE const IR_ParameterDescription &
+IR_ParDescriptionSeq_var::operator[] (CORBA::ULong index) const
 {
-  return ACE_const_cast (const IR::ParameterDescription &, this->ptr_->operator[] (index));
+  return ACE_const_cast (const IR_ParameterDescription &, this->ptr_->operator[] (index));
 }
 
-ACE_INLINE const ::IR::ParDescriptionSeq &
-IR::ParDescriptionSeq_var::in (void) const
+ACE_INLINE const ::IR_ParDescriptionSeq &
+IR_ParDescriptionSeq_var::in (void) const
 {
   return *this->ptr_;
 }
 
-ACE_INLINE ::IR::ParDescriptionSeq &
-IR::ParDescriptionSeq_var::inout (void)
+ACE_INLINE ::IR_ParDescriptionSeq &
+IR_ParDescriptionSeq_var::inout (void)
 {
   return *this->ptr_;
 }
 
 // mapping for variable size 
-ACE_INLINE ::IR::ParDescriptionSeq *&
-IR::ParDescriptionSeq_var::out (void)
+ACE_INLINE ::IR_ParDescriptionSeq *&
+IR_ParDescriptionSeq_var::out (void)
 {
   delete this->ptr_;
   this->ptr_ = 0;
   return this->ptr_;
 }
 
-ACE_INLINE ::IR::ParDescriptionSeq *
-IR::ParDescriptionSeq_var::_retn (void)
+ACE_INLINE ::IR_ParDescriptionSeq *
+IR_ParDescriptionSeq_var::_retn (void)
 {
-  ::IR::ParDescriptionSeq *tmp = this->ptr_;
+  ::IR_ParDescriptionSeq *tmp = this->ptr_;
   this->ptr_ = 0;
   return tmp;
 }
 
-ACE_INLINE ::IR::ParDescriptionSeq *
-IR::ParDescriptionSeq_var::ptr (void) const
+ACE_INLINE ::IR_ParDescriptionSeq *
+IR_ParDescriptionSeq_var::ptr (void) const
 {
   return this->ptr_;
 }
 
 // *************************************************************
-// Inline operations for class IR::ParDescriptionSeq_out
+// Inline operations for class IR_ParDescriptionSeq_out
 // *************************************************************
 
 ACE_INLINE
-IR::ParDescriptionSeq_out::ParDescriptionSeq_out (ParDescriptionSeq *&p)
+IR_ParDescriptionSeq_out::IR_ParDescriptionSeq_out (IR_ParDescriptionSeq *&p)
   : ptr_ (p)
 {
   this->ptr_ = 0;
 }
 
 ACE_INLINE
-IR::ParDescriptionSeq_out::ParDescriptionSeq_out (ParDescriptionSeq_var &p) // constructor from _var
+IR_ParDescriptionSeq_out::IR_ParDescriptionSeq_out (IR_ParDescriptionSeq_var &p) // constructor from _var
   : ptr_ (p.out ())
 {
   delete this->ptr_;
@@ -16221,94 +15206,87 @@
 }
 
 ACE_INLINE
-IR::ParDescriptionSeq_out::ParDescriptionSeq_out (const ::IR::ParDescriptionSeq_out &p) // copy constructor
-  : ptr_ (ACE_const_cast (ParDescriptionSeq_out&, p).ptr_)
+IR_ParDescriptionSeq_out::IR_ParDescriptionSeq_out (const ::IR_ParDescriptionSeq_out &p) // copy constructor
+  : ptr_ (ACE_const_cast (IR_ParDescriptionSeq_out&, p).ptr_)
 {}
 
-ACE_INLINE ::IR::ParDescriptionSeq_out &
-IR::ParDescriptionSeq_out::operator= (const ::IR::ParDescriptionSeq_out &p)
+ACE_INLINE ::IR_ParDescriptionSeq_out &
+IR_ParDescriptionSeq_out::operator= (const ::IR_ParDescriptionSeq_out &p)
 {
-  this->ptr_ = ACE_const_cast (ParDescriptionSeq_out&, p).ptr_;
+  this->ptr_ = ACE_const_cast (IR_ParDescriptionSeq_out&, p).ptr_;
   return *this;
 }
 
-ACE_INLINE ::IR::ParDescriptionSeq_out &
-IR::ParDescriptionSeq_out::operator= (ParDescriptionSeq *p)
+ACE_INLINE ::IR_ParDescriptionSeq_out &
+IR_ParDescriptionSeq_out::operator= (IR_ParDescriptionSeq *p)
 {
   this->ptr_ = p;
   return *this;
 }
 
 ACE_INLINE 
-IR::ParDescriptionSeq_out::operator ::IR::ParDescriptionSeq *&() // cast
+IR_ParDescriptionSeq_out::operator ::IR_ParDescriptionSeq *&() // cast
 {
   return this->ptr_;
 }
 
-ACE_INLINE ::IR::ParDescriptionSeq *&
-IR::ParDescriptionSeq_out::ptr (void) // ptr
+ACE_INLINE ::IR_ParDescriptionSeq *&
+IR_ParDescriptionSeq_out::ptr (void) // ptr
 {
   return this->ptr_;
 }
 
-ACE_INLINE ::IR::ParDescriptionSeq *
-IR::ParDescriptionSeq_out::operator-> (void)
+ACE_INLINE ::IR_ParDescriptionSeq *
+IR_ParDescriptionSeq_out::operator-> (void)
 {
   return this->ptr_;
 }
 
-ACE_INLINE IR::ParameterDescription &
-IR::ParDescriptionSeq_out::operator[] (CORBA::ULong index)
+ACE_INLINE IR_ParameterDescription &
+IR_ParDescriptionSeq_out::operator[] (CORBA::ULong index)
 {
   return this->ptr_->operator[] (index);
 }
 
-
-#endif /* end #if !defined */
-
-
-#if !defined (_IR_CONTEXTIDSEQ_CI_)
-#define _IR_CONTEXTIDSEQ_CI_
-
 // *************************************************************
-// Inline operations for class IR::ContextIdSeq_var
+// Inline operations for class IR_ContextIdSeq_var
 // *************************************************************
 
 ACE_INLINE
-IR::ContextIdSeq_var::ContextIdSeq_var (void) // default constructor
+IR_ContextIdSeq_var::IR_ContextIdSeq_var (void) // default constructor
   : ptr_ (0)
 {}
 
 ACE_INLINE
-IR::ContextIdSeq_var::ContextIdSeq_var (ContextIdSeq *p)
+IR_ContextIdSeq_var::IR_ContextIdSeq_var (IR_ContextIdSeq *p)
   : ptr_ (p)
 {}
 
 ACE_INLINE
-IR::ContextIdSeq_var::ContextIdSeq_var (const ::IR::ContextIdSeq_var &p) // copy constructor
+IR_ContextIdSeq_var::IR_ContextIdSeq_var (const ::IR_ContextIdSeq_var &p) // copy constructor
 {
   if (p.ptr_)
-    ACE_NEW (this->ptr_, ::IR::ContextIdSeq (*p.ptr_));
+    ACE_NEW (this->ptr_, ::IR_ContextIdSeq (*p.ptr_));
   else
     this->ptr_ = 0;
 }
 
 ACE_INLINE
-IR::ContextIdSeq_var::~ContextIdSeq_var (void) // destructor
+IR_ContextIdSeq_var::~IR_ContextIdSeq_var (void) // destructor
 {
   delete this->ptr_;
 }
 
-ACE_INLINE IR::ContextIdSeq_var &
-IR::ContextIdSeq_var::operator= (ContextIdSeq *p)
+ACE_INLINE IR_ContextIdSeq_var &
+IR_ContextIdSeq_var::operator= (IR_ContextIdSeq *p)
 {
   delete this->ptr_;
   this->ptr_ = p;
   return *this;
 }
 
-ACE_INLINE ::IR::ContextIdSeq_var &
-IR::ContextIdSeq_var::operator= (const ::IR::ContextIdSeq_var &p)
+ACE_INLINE IR_ContextIdSeq_var &
+IR_ContextIdSeq_var::operator= (const ::IR_ContextIdSeq_var &p) // deep copy
 {
   if (this != &p)
     {
@@ -16319,12 +15297,12 @@
         }
       else
         {
-          ContextIdSeq *deep_copy =
-            new ContextIdSeq (*p.ptr_);
+          IR_ContextIdSeq *deep_copy = 
+            new IR_ContextIdSeq (*p.ptr_);
           
           if (deep_copy != 0)
             {
-              ContextIdSeq *tmp = deep_copy;
+              IR_ContextIdSeq *tmp = deep_copy;
               deep_copy = this->ptr_;
               this->ptr_ = tmp;
               delete deep_copy;
@@ -16335,97 +15313,97 @@
   return *this;
 }
 
-ACE_INLINE const ::IR::ContextIdSeq *
-IR::ContextIdSeq_var::operator-> (void) const
+ACE_INLINE const ::IR_ContextIdSeq *
+IR_ContextIdSeq_var::operator-> (void) const
 {
   return this->ptr_;
 }
 
-ACE_INLINE ::IR::ContextIdSeq *
-IR::ContextIdSeq_var::operator-> (void)
+ACE_INLINE ::IR_ContextIdSeq *
+IR_ContextIdSeq_var::operator-> (void)
 {
   return this->ptr_;
 }
 
 ACE_INLINE 
-IR::ContextIdSeq_var::operator const ::IR::ContextIdSeq &() const // cast
+IR_ContextIdSeq_var::operator const ::IR_ContextIdSeq &() const // cast
 {
   return *this->ptr_;
 }
 
 ACE_INLINE 
-IR::ContextIdSeq_var::operator ::IR::ContextIdSeq &() // cast 
+IR_ContextIdSeq_var::operator ::IR_ContextIdSeq &() // cast 
 {
   return *this->ptr_;
 }
 
 ACE_INLINE 
-IR::ContextIdSeq_var::operator ::IR::ContextIdSeq &() const // cast 
+IR_ContextIdSeq_var::operator ::IR_ContextIdSeq &() const // cast 
 {
   return *this->ptr_;
 }
 
 // variable-size types only
 ACE_INLINE
-IR::ContextIdSeq_var::operator ::IR::ContextIdSeq *&() // cast 
+IR_ContextIdSeq_var::operator ::IR_ContextIdSeq *&() // cast 
 {
   return this->ptr_;
 }
 
 ACE_INLINE TAO_SeqElem_String_Manager
-IR::ContextIdSeq_var::operator[] (CORBA::ULong index)
+IR_ContextIdSeq_var::operator[] (CORBA::ULong index)
 {
   return this->ptr_->operator[] (index);
 }
 
-ACE_INLINE const ::IR::ContextIdSeq &
-IR::ContextIdSeq_var::in (void) const
+ACE_INLINE const ::IR_ContextIdSeq &
+IR_ContextIdSeq_var::in (void) const
 {
   return *this->ptr_;
 }
 
-ACE_INLINE ::IR::ContextIdSeq &
-IR::ContextIdSeq_var::inout (void)
+ACE_INLINE ::IR_ContextIdSeq &
+IR_ContextIdSeq_var::inout (void)
 {
   return *this->ptr_;
 }
 
 // mapping for variable size 
-ACE_INLINE ::IR::ContextIdSeq *&
-IR::ContextIdSeq_var::out (void)
+ACE_INLINE ::IR_ContextIdSeq *&
+IR_ContextIdSeq_var::out (void)
 {
   delete this->ptr_;
   this->ptr_ = 0;
   return this->ptr_;
 }
 
-ACE_INLINE ::IR::ContextIdSeq *
-IR::ContextIdSeq_var::_retn (void)
+ACE_INLINE ::IR_ContextIdSeq *
+IR_ContextIdSeq_var::_retn (void)
 {
-  ::IR::ContextIdSeq *tmp = this->ptr_;
+  ::IR_ContextIdSeq *tmp = this->ptr_;
   this->ptr_ = 0;
   return tmp;
 }
 
-ACE_INLINE ::IR::ContextIdSeq *
-IR::ContextIdSeq_var::ptr (void) const
+ACE_INLINE ::IR_ContextIdSeq *
+IR_ContextIdSeq_var::ptr (void) const
 {
   return this->ptr_;
 }
 
 // *************************************************************
-// Inline operations for class IR::ContextIdSeq_out
+// Inline operations for class IR_ContextIdSeq_out
 // *************************************************************
 
 ACE_INLINE
-IR::ContextIdSeq_out::ContextIdSeq_out (ContextIdSeq *&p)
+IR_ContextIdSeq_out::IR_ContextIdSeq_out (IR_ContextIdSeq *&p)
   : ptr_ (p)
 {
   this->ptr_ = 0;
 }
 
 ACE_INLINE
-IR::ContextIdSeq_out::ContextIdSeq_out (ContextIdSeq_var &p) // constructor from _var
+IR_ContextIdSeq_out::IR_ContextIdSeq_out (IR_ContextIdSeq_var &p) // constructor from _var
   : ptr_ (p.out ())
 {
   delete this->ptr_;
@@ -16433,57 +15411,50 @@
 }
 
 ACE_INLINE
-IR::ContextIdSeq_out::ContextIdSeq_out (const ::IR::ContextIdSeq_out &p) // copy constructor
-  : ptr_ (ACE_const_cast (ContextIdSeq_out&, p).ptr_)
+IR_ContextIdSeq_out::IR_ContextIdSeq_out (const ::IR_ContextIdSeq_out &p) // copy constructor
+  : ptr_ (ACE_const_cast (IR_ContextIdSeq_out&, p).ptr_)
 {}
 
-ACE_INLINE ::IR::ContextIdSeq_out &
-IR::ContextIdSeq_out::operator= (const ::IR::ContextIdSeq_out &p)
+ACE_INLINE ::IR_ContextIdSeq_out &
+IR_ContextIdSeq_out::operator= (const ::IR_ContextIdSeq_out &p)
 {
-  this->ptr_ = ACE_const_cast (ContextIdSeq_out&, p).ptr_;
+  this->ptr_ = ACE_const_cast (IR_ContextIdSeq_out&, p).ptr_;
   return *this;
 }
 
-ACE_INLINE ::IR::ContextIdSeq_out &
-IR::ContextIdSeq_out::operator= (ContextIdSeq *p)
+ACE_INLINE ::IR_ContextIdSeq_out &
+IR_ContextIdSeq_out::operator= (IR_ContextIdSeq *p)
 {
   this->ptr_ = p;
   return *this;
 }
 
 ACE_INLINE 
-IR::ContextIdSeq_out::operator ::IR::ContextIdSeq *&() // cast
+IR_ContextIdSeq_out::operator ::IR_ContextIdSeq *&() // cast
 {
   return this->ptr_;
 }
 
-ACE_INLINE ::IR::ContextIdSeq *&
-IR::ContextIdSeq_out::ptr (void) // ptr
+ACE_INLINE ::IR_ContextIdSeq *&
+IR_ContextIdSeq_out::ptr (void) // ptr
 {
   return this->ptr_;
 }
 
-ACE_INLINE ::IR::ContextIdSeq *
-IR::ContextIdSeq_out::operator-> (void)
+ACE_INLINE ::IR_ContextIdSeq *
+IR_ContextIdSeq_out::operator-> (void)
 {
   return this->ptr_;
 }
 
 ACE_INLINE TAO_SeqElem_String_Manager
-IR::ContextIdSeq_out::operator[] (CORBA::ULong index)
+IR_ContextIdSeq_out::operator[] (CORBA::ULong index)
 {
   return this->ptr_->operator[] (index);
 }
 
-
-#endif /* end #if !defined */
-
-
-#if !defined (_IR_OPERATIONDEF___CI_)
-#define _IR_OPERATIONDEF___CI_
-
 ACE_INLINE
-IR::OperationDef::OperationDef (
+IR_OperationDef::IR_OperationDef (
     TAO_Stub *objref,
     CORBA::Boolean _tao_collocated,
     TAO_Abstract_ServantBase *servant
@@ -16493,217 +15464,201 @@
   this->IR_OperationDef_setup_collocation (_tao_collocated);
 }
 
-#endif /* end #if !defined */
-
-
-#if !defined (_IR_OPERATIONDEF___VAR_CI_)
-#define _IR_OPERATIONDEF___VAR_CI_
-
 // *************************************************************
-// Inline operations for class IR::OperationDef_var
+// Inline operations for class IR_OperationDef_var
 // *************************************************************
 
 ACE_INLINE
-IR::OperationDef_var::OperationDef_var (void) // default constructor
-  : ptr_ (OperationDef::_nil ())
+IR_OperationDef_var::IR_OperationDef_var (void) // default constructor
+  : ptr_ (IR_OperationDef::_nil ())
 {}
 
-ACE_INLINE ::IR::OperationDef_ptr
-IR::OperationDef_var::ptr (void) const
+ACE_INLINE ::IR_OperationDef_ptr
+IR_OperationDef_var::ptr (void) const
 {
   return this->ptr_;
 }
 
 ACE_INLINE
-IR::OperationDef_var::OperationDef_var (const ::IR::OperationDef_var &p) // copy constructor
+IR_OperationDef_var::IR_OperationDef_var (const ::IR_OperationDef_var &p) // copy constructor
   : TAO_Base_var (),
-    ptr_ (OperationDef::_duplicate (p.ptr ()))
+    ptr_ (IR_OperationDef::_duplicate (p.ptr ()))
 {}
 
 ACE_INLINE
-IR::OperationDef_var::~OperationDef_var (void) // destructor
+IR_OperationDef_var::~IR_OperationDef_var (void) // destructor
 {
   CORBA::release (this->ptr_);
 }
 
-ACE_INLINE IR::OperationDef_var &
-IR::OperationDef_var::operator= (OperationDef_ptr p)
+ACE_INLINE IR_OperationDef_var &
+IR_OperationDef_var::operator= (IR_OperationDef_ptr p)
 {
   CORBA::release (this->ptr_);
   this->ptr_ = p;
   return *this;
 }
 
-ACE_INLINE IR::OperationDef_var &
-IR::OperationDef_var::operator= (const ::IR::OperationDef_var &p)
+ACE_INLINE IR_OperationDef_var &
+IR_OperationDef_var::operator= (const ::IR_OperationDef_var &p)
 {
   if (this != &p)
   {
     CORBA::release (this->ptr_);
-    this->ptr_ = ::IR::OperationDef::_duplicate (p.ptr ());
+    this->ptr_ = ::IR_OperationDef::_duplicate (p.ptr ());
   }
   return *this;
 }
 
 ACE_INLINE 
-IR::OperationDef_var::operator const ::IR::OperationDef_ptr &() const // cast
+IR_OperationDef_var::operator const ::IR_OperationDef_ptr &() const // cast
 {
   return this->ptr_;
 }
 
 ACE_INLINE 
-IR::OperationDef_var::operator ::IR::OperationDef_ptr &() // cast 
+IR_OperationDef_var::operator ::IR_OperationDef_ptr &() // cast 
 {
   return this->ptr_;
 }
 
-ACE_INLINE ::IR::OperationDef_ptr
-IR::OperationDef_var::operator-> (void) const
+ACE_INLINE ::IR_OperationDef_ptr
+IR_OperationDef_var::operator-> (void) const
 {
   return this->ptr_;
 }
 
-ACE_INLINE ::IR::OperationDef_ptr
-IR::OperationDef_var::in (void) const
+ACE_INLINE ::IR_OperationDef_ptr
+IR_OperationDef_var::in (void) const
 {
   return this->ptr_;
 }
 
-ACE_INLINE ::IR::OperationDef_ptr &
-IR::OperationDef_var::inout (void)
+ACE_INLINE ::IR_OperationDef_ptr &
+IR_OperationDef_var::inout (void)
 {
   return this->ptr_;
 }
 
-ACE_INLINE ::IR::OperationDef_ptr &
-IR::OperationDef_var::out (void)
+ACE_INLINE ::IR_OperationDef_ptr &
+IR_OperationDef_var::out (void)
 {
   CORBA::release (this->ptr_);
-  this->ptr_ = ::IR::OperationDef::_nil ();
+  this->ptr_ = ::IR_OperationDef::_nil ();
   return this->ptr_;
 }
 
-ACE_INLINE ::IR::OperationDef_ptr
-IR::OperationDef_var::_retn (void)
+ACE_INLINE ::IR_OperationDef_ptr
+IR_OperationDef_var::_retn (void)
 {
   // yield ownership of managed obj reference
-  ::IR::OperationDef_ptr val = this->ptr_;
-  this->ptr_ = ::IR::OperationDef::_nil ();
+  ::IR_OperationDef_ptr val = this->ptr_;
+  this->ptr_ = ::IR_OperationDef::_nil ();
   return val;
 }
 
-
-#endif /* end #if !defined */
-
-
-#if !defined (_IR_OPERATIONDEF___OUT_CI_)
-#define _IR_OPERATIONDEF___OUT_CI_
-
 // *************************************************************
-// Inline operations for class IR::OperationDef_out
+// Inline operations for class IR_OperationDef_out
 // *************************************************************
 
 ACE_INLINE
-IR::OperationDef_out::OperationDef_out (OperationDef_ptr &p)
+IR_OperationDef_out::IR_OperationDef_out (IR_OperationDef_ptr &p)
   : ptr_ (p)
 {
-  this->ptr_ = ::IR::OperationDef::_nil ();
+  this->ptr_ = ::IR_OperationDef::_nil ();
 }
 
 ACE_INLINE
-IR::OperationDef_out::OperationDef_out (OperationDef_var &p) // constructor from _var
+IR_OperationDef_out::IR_OperationDef_out (IR_OperationDef_var &p) // constructor from _var
   : ptr_ (p.out ())
 {
   CORBA::release (this->ptr_);
-  this->ptr_ = ::IR::OperationDef::_nil ();
+  this->ptr_ = ::IR_OperationDef::_nil ();
 }
 
 ACE_INLINE
-IR::OperationDef_out::OperationDef_out (const ::IR::OperationDef_out &p) // copy constructor
-  : ptr_ (ACE_const_cast (OperationDef_out &, p).ptr_)
+IR_OperationDef_out::IR_OperationDef_out (const ::IR_OperationDef_out &p) // copy constructor
+  : ptr_ (ACE_const_cast (IR_OperationDef_out &, p).ptr_)
 {}
 
-ACE_INLINE ::IR::OperationDef_out &
-IR::OperationDef_out::operator= (const ::IR::OperationDef_out &p)
+ACE_INLINE ::IR_OperationDef_out &
+IR_OperationDef_out::operator= (const ::IR_OperationDef_out &p)
 {
-  this->ptr_ = ACE_const_cast (OperationDef_out&, p).ptr_;
+  this->ptr_ = ACE_const_cast (IR_OperationDef_out&, p).ptr_;
   return *this;
 }
 
-ACE_INLINE IR::OperationDef_out &
-IR::OperationDef_out::operator= (const ::IR::OperationDef_var &p)
+ACE_INLINE IR_OperationDef_out &
+IR_OperationDef_out::operator= (const ::IR_OperationDef_var &p)
 {
-  this->ptr_ = ::IR::OperationDef::_duplicate (p.ptr ());
+  this->ptr_ = ::IR_OperationDef::_duplicate (p.ptr ());
   return *this;
 }
 
-ACE_INLINE IR::OperationDef_out &
-IR::OperationDef_out::operator= (OperationDef_ptr p)
+ACE_INLINE IR_OperationDef_out &
+IR_OperationDef_out::operator= (IR_OperationDef_ptr p)
 {
   this->ptr_ = p;
   return *this;
 }
 
 ACE_INLINE 
-IR::OperationDef_out::operator ::IR::OperationDef_ptr &() // cast
+IR_OperationDef_out::operator ::IR_OperationDef_ptr &() // cast
 {
   return this->ptr_;
 }
 
-ACE_INLINE ::IR::OperationDef_ptr &
-IR::OperationDef_out::ptr (void) // ptr
+ACE_INLINE ::IR_OperationDef_ptr &
+IR_OperationDef_out::ptr (void) // ptr
 {
   return this->ptr_;
 }
 
-ACE_INLINE ::IR::OperationDef_ptr
-IR::OperationDef_out::operator-> (void)
+ACE_INLINE ::IR_OperationDef_ptr
+IR_OperationDef_out::operator-> (void)
 {
   return this->ptr_;
 }
 
-
-#endif /* end #if !defined */
-
 // *************************************************************
-// Inline operations for class IR::OperationDescription_var
+// Inline operations for class IR_OperationDescription_var
 // *************************************************************
 
 ACE_INLINE
-IR::OperationDescription_var::OperationDescription_var (void) // default constructor
+IR_OperationDescription_var::IR_OperationDescription_var (void) // default constructor
   : ptr_ (0)
 {}
 
 ACE_INLINE
-IR::OperationDescription_var::OperationDescription_var (OperationDescription *p)
+IR_OperationDescription_var::IR_OperationDescription_var (IR_OperationDescription *p)
   : ptr_ (p)
 {}
 
 ACE_INLINE
-IR::OperationDescription_var::OperationDescription_var (const ::IR::OperationDescription_var &p) // copy constructor
+IR_OperationDescription_var::IR_OperationDescription_var (const ::IR_OperationDescription_var &p) // copy constructor
 {
   if (p.ptr_)
-    ACE_NEW (this->ptr_, ::IR::OperationDescription (*p.ptr_));
+    ACE_NEW (this->ptr_, ::IR_OperationDescription (*p.ptr_));
   else
     this->ptr_ = 0;
 }
 
 ACE_INLINE
-IR::OperationDescription_var::~OperationDescription_var (void) // destructor
+IR_OperationDescription_var::~IR_OperationDescription_var (void) // destructor
 {
   delete this->ptr_;
 }
 
-ACE_INLINE IR::OperationDescription_var &
-IR::OperationDescription_var::operator= (OperationDescription *p)
+ACE_INLINE IR_OperationDescription_var &
+IR_OperationDescription_var::operator= (IR_OperationDescription *p)
 {
   delete this->ptr_;
   this->ptr_ = p;
   return *this;
 }
 
-ACE_INLINE ::IR::OperationDescription_var &
-IR::OperationDescription_var::operator= (const ::IR::OperationDescription_var &p)
+ACE_INLINE ::IR_OperationDescription_var &
+IR_OperationDescription_var::operator= (const ::IR_OperationDescription_var &p)
 {
   if (this != &p)
     {
@@ -16714,12 +15669,12 @@
         }
       else
         {
-          OperationDescription *deep_copy =
-            new OperationDescription (*p.ptr_);
+          IR_OperationDescription *deep_copy = 
+            new IR_OperationDescription (*p.ptr_);
           
           if (deep_copy != 0)
             {
-              OperationDescription *tmp = deep_copy;
+              IR_OperationDescription *tmp = deep_copy;
               deep_copy = this->ptr_;
               this->ptr_ = tmp;
               delete deep_copy;
@@ -16730,91 +15685,91 @@
   return *this;
 }
 
-ACE_INLINE const ::IR::OperationDescription *
-IR::OperationDescription_var::operator-> (void) const
+ACE_INLINE const ::IR_OperationDescription *
+IR_OperationDescription_var::operator-> (void) const
 {
   return this->ptr_;
 }
 
-ACE_INLINE ::IR::OperationDescription *
-IR::OperationDescription_var::operator-> (void)
+ACE_INLINE ::IR_OperationDescription *
+IR_OperationDescription_var::operator-> (void)
 {
   return this->ptr_;
 }
 
 ACE_INLINE
-IR::OperationDescription_var::operator const ::IR::OperationDescription &() const // cast
+IR_OperationDescription_var::operator const ::IR_OperationDescription &() const // cast
 {
   return *this->ptr_;
 }
 
 ACE_INLINE
-IR::OperationDescription_var::operator ::IR::OperationDescription &() // cast 
+IR_OperationDescription_var::operator ::IR_OperationDescription &() // cast 
 {
   return *this->ptr_;
 }
 
 ACE_INLINE
-IR::OperationDescription_var::operator ::IR::OperationDescription &() const // cast 
+IR_OperationDescription_var::operator ::IR_OperationDescription &() const // cast 
 {
   return *this->ptr_;
 }
 
 // variable-size types only
 ACE_INLINE
-IR::OperationDescription_var::operator ::IR::OperationDescription *&() // cast 
+IR_OperationDescription_var::operator ::IR_OperationDescription *&() // cast 
 {
   return this->ptr_;
 }
 
-ACE_INLINE const ::IR::OperationDescription &
-IR::OperationDescription_var::in (void) const
+ACE_INLINE const ::IR_OperationDescription &
+IR_OperationDescription_var::in (void) const
 {
   return *this->ptr_;
 }
 
-ACE_INLINE ::IR::OperationDescription &
-IR::OperationDescription_var::inout (void)
+ACE_INLINE ::IR_OperationDescription &
+IR_OperationDescription_var::inout (void)
 {
   return *this->ptr_;
 }
 
 // mapping for variable size 
-ACE_INLINE ::IR::OperationDescription *&
-IR::OperationDescription_var::out (void)
+ACE_INLINE ::IR_OperationDescription *&
+IR_OperationDescription_var::out (void)
 {
   delete this->ptr_;
   this->ptr_ = 0;
   return this->ptr_;
 }
 
-ACE_INLINE ::IR::OperationDescription *
-IR::OperationDescription_var::_retn (void)
+ACE_INLINE ::IR_OperationDescription *
+IR_OperationDescription_var::_retn (void)
 {
-  ::IR::OperationDescription *tmp = this->ptr_;
+  ::IR_OperationDescription *tmp = this->ptr_;
   this->ptr_ = 0;
   return tmp;
 }
 
-ACE_INLINE ::IR::OperationDescription *
-IR::OperationDescription_var::ptr (void) const
+ACE_INLINE ::IR_OperationDescription *
+IR_OperationDescription_var::ptr (void) const
 {
   return this->ptr_;
 }
 
 // *************************************************************
-// Inline operations for class IR::OperationDescription_out
+// Inline operations for class IR_OperationDescription_out
 // *************************************************************
 
 ACE_INLINE
-IR::OperationDescription_out::OperationDescription_out (::IR::OperationDescription *&p)
+IR_OperationDescription_out::IR_OperationDescription_out (::IR_OperationDescription *&p)
   : ptr_ (p)
 {
   this->ptr_ = 0;
 }
 
 ACE_INLINE
-IR::OperationDescription_out::OperationDescription_out (OperationDescription_var &p) // constructor from _var
+IR_OperationDescription_out::IR_OperationDescription_out (IR_OperationDescription_var &p) // constructor from _var
   : ptr_ (p.out ())
 {
   delete this->ptr_;
@@ -16822,85 +15777,81 @@
 }
 
 ACE_INLINE
-IR::OperationDescription_out::OperationDescription_out (const ::IR::OperationDescription_out &p) // copy constructor
-  : ptr_ (ACE_const_cast (OperationDescription_out&, p).ptr_)
+IR_OperationDescription_out::IR_OperationDescription_out (const ::IR_OperationDescription_out &p) // copy constructor
+  : ptr_ (ACE_const_cast (IR_OperationDescription_out&, p).ptr_)
 {}
 
-ACE_INLINE IR::OperationDescription_out &
-IR::OperationDescription_out::operator= (const ::IR::OperationDescription_out &p)
+ACE_INLINE IR_OperationDescription_out &
+IR_OperationDescription_out::operator= (const ::IR_OperationDescription_out &p)
 {
-  this->ptr_ = ACE_const_cast (OperationDescription_out&, p).ptr_;
+  this->ptr_ = ACE_const_cast (IR_OperationDescription_out&, p).ptr_;
   return *this;
 }
 
-ACE_INLINE IR::OperationDescription_out &
-IR::OperationDescription_out::operator= (OperationDescription *p)
+ACE_INLINE IR_OperationDescription_out &
+IR_OperationDescription_out::operator= (IR_OperationDescription *p)
 {
   this->ptr_ = p;
   return *this;
 }
 
 ACE_INLINE 
-IR::OperationDescription_out::operator ::IR::OperationDescription *&() // cast
+IR_OperationDescription_out::operator ::IR_OperationDescription *&() // cast
 {
   return this->ptr_;
 }
 
-ACE_INLINE ::IR::OperationDescription *&
-IR::OperationDescription_out::ptr (void) // ptr
+ACE_INLINE ::IR_OperationDescription *&
+IR_OperationDescription_out::ptr (void) // ptr
 {
   return this->ptr_;
 }
 
-ACE_INLINE ::IR::OperationDescription *
-IR::OperationDescription_out::operator-> (void)
+ACE_INLINE ::IR_OperationDescription *
+IR_OperationDescription_out::operator-> (void)
 {
   return this->ptr_;
 }
 
-
-#if !defined (_IR_REPOSITORYIDSEQ_CI_)
-#define _IR_REPOSITORYIDSEQ_CI_
-
 // *************************************************************
-// Inline operations for class IR::RepositoryIdSeq_var
+// Inline operations for class IR_RepositoryIdSeq_var
 // *************************************************************
 
 ACE_INLINE
-IR::RepositoryIdSeq_var::RepositoryIdSeq_var (void) // default constructor
+IR_RepositoryIdSeq_var::IR_RepositoryIdSeq_var (void) // default constructor
   : ptr_ (0)
 {}
 
 ACE_INLINE
-IR::RepositoryIdSeq_var::RepositoryIdSeq_var (RepositoryIdSeq *p)
+IR_RepositoryIdSeq_var::IR_RepositoryIdSeq_var (IR_RepositoryIdSeq *p)
   : ptr_ (p)
 {}
 
 ACE_INLINE
-IR::RepositoryIdSeq_var::RepositoryIdSeq_var (const ::IR::RepositoryIdSeq_var &p) // copy constructor
+IR_RepositoryIdSeq_var::IR_RepositoryIdSeq_var (const ::IR_RepositoryIdSeq_var &p) // copy constructor
 {
   if (p.ptr_)
-    ACE_NEW (this->ptr_, ::IR::RepositoryIdSeq (*p.ptr_));
+    ACE_NEW (this->ptr_, ::IR_RepositoryIdSeq (*p.ptr_));
   else
     this->ptr_ = 0;
 }
 
 ACE_INLINE
-IR::RepositoryIdSeq_var::~RepositoryIdSeq_var (void) // destructor
+IR_RepositoryIdSeq_var::~IR_RepositoryIdSeq_var (void) // destructor
 {
   delete this->ptr_;
 }
 
-ACE_INLINE IR::RepositoryIdSeq_var &
-IR::RepositoryIdSeq_var::operator= (RepositoryIdSeq *p)
+ACE_INLINE IR_RepositoryIdSeq_var &
+IR_RepositoryIdSeq_var::operator= (IR_RepositoryIdSeq *p)
 {
   delete this->ptr_;
   this->ptr_ = p;
   return *this;
 }
 
-ACE_INLINE ::IR::RepositoryIdSeq_var &
-IR::RepositoryIdSeq_var::operator= (const ::IR::RepositoryIdSeq_var &p)
+ACE_INLINE IR_RepositoryIdSeq_var &
+IR_RepositoryIdSeq_var::operator= (const ::IR_RepositoryIdSeq_var &p) // deep copy
 {
   if (this != &p)
     {
@@ -16911,12 +15862,12 @@
         }
       else
         {
-          RepositoryIdSeq *deep_copy =
-            new RepositoryIdSeq (*p.ptr_);
+          IR_RepositoryIdSeq *deep_copy = 
+            new IR_RepositoryIdSeq (*p.ptr_);
           
           if (deep_copy != 0)
             {
-              RepositoryIdSeq *tmp = deep_copy;
+              IR_RepositoryIdSeq *tmp = deep_copy;
               deep_copy = this->ptr_;
               this->ptr_ = tmp;
               delete deep_copy;
@@ -16927,97 +15878,97 @@
   return *this;
 }
 
-ACE_INLINE const ::IR::RepositoryIdSeq *
-IR::RepositoryIdSeq_var::operator-> (void) const
+ACE_INLINE const ::IR_RepositoryIdSeq *
+IR_RepositoryIdSeq_var::operator-> (void) const
 {
   return this->ptr_;
 }
 
-ACE_INLINE ::IR::RepositoryIdSeq *
-IR::RepositoryIdSeq_var::operator-> (void)
+ACE_INLINE ::IR_RepositoryIdSeq *
+IR_RepositoryIdSeq_var::operator-> (void)
 {
   return this->ptr_;
 }
 
 ACE_INLINE 
-IR::RepositoryIdSeq_var::operator const ::IR::RepositoryIdSeq &() const // cast
+IR_RepositoryIdSeq_var::operator const ::IR_RepositoryIdSeq &() const // cast
 {
   return *this->ptr_;
 }
 
 ACE_INLINE 
-IR::RepositoryIdSeq_var::operator ::IR::RepositoryIdSeq &() // cast 
+IR_RepositoryIdSeq_var::operator ::IR_RepositoryIdSeq &() // cast 
 {
   return *this->ptr_;
 }
 
 ACE_INLINE 
-IR::RepositoryIdSeq_var::operator ::IR::RepositoryIdSeq &() const // cast 
+IR_RepositoryIdSeq_var::operator ::IR_RepositoryIdSeq &() const // cast 
 {
   return *this->ptr_;
 }
 
 // variable-size types only
 ACE_INLINE
-IR::RepositoryIdSeq_var::operator ::IR::RepositoryIdSeq *&() // cast 
+IR_RepositoryIdSeq_var::operator ::IR_RepositoryIdSeq *&() // cast 
 {
   return this->ptr_;
 }
 
 ACE_INLINE TAO_SeqElem_String_Manager
-IR::RepositoryIdSeq_var::operator[] (CORBA::ULong index)
+IR_RepositoryIdSeq_var::operator[] (CORBA::ULong index)
 {
   return this->ptr_->operator[] (index);
 }
 
-ACE_INLINE const ::IR::RepositoryIdSeq &
-IR::RepositoryIdSeq_var::in (void) const
+ACE_INLINE const ::IR_RepositoryIdSeq &
+IR_RepositoryIdSeq_var::in (void) const
 {
   return *this->ptr_;
 }
 
-ACE_INLINE ::IR::RepositoryIdSeq &
-IR::RepositoryIdSeq_var::inout (void)
+ACE_INLINE ::IR_RepositoryIdSeq &
+IR_RepositoryIdSeq_var::inout (void)
 {
   return *this->ptr_;
 }
 
 // mapping for variable size 
-ACE_INLINE ::IR::RepositoryIdSeq *&
-IR::RepositoryIdSeq_var::out (void)
+ACE_INLINE ::IR_RepositoryIdSeq *&
+IR_RepositoryIdSeq_var::out (void)
 {
   delete this->ptr_;
   this->ptr_ = 0;
   return this->ptr_;
 }
 
-ACE_INLINE ::IR::RepositoryIdSeq *
-IR::RepositoryIdSeq_var::_retn (void)
+ACE_INLINE ::IR_RepositoryIdSeq *
+IR_RepositoryIdSeq_var::_retn (void)
 {
-  ::IR::RepositoryIdSeq *tmp = this->ptr_;
+  ::IR_RepositoryIdSeq *tmp = this->ptr_;
   this->ptr_ = 0;
   return tmp;
 }
 
-ACE_INLINE ::IR::RepositoryIdSeq *
-IR::RepositoryIdSeq_var::ptr (void) const
+ACE_INLINE ::IR_RepositoryIdSeq *
+IR_RepositoryIdSeq_var::ptr (void) const
 {
   return this->ptr_;
 }
 
 // *************************************************************
-// Inline operations for class IR::RepositoryIdSeq_out
+// Inline operations for class IR_RepositoryIdSeq_out
 // *************************************************************
 
 ACE_INLINE
-IR::RepositoryIdSeq_out::RepositoryIdSeq_out (RepositoryIdSeq *&p)
+IR_RepositoryIdSeq_out::IR_RepositoryIdSeq_out (IR_RepositoryIdSeq *&p)
   : ptr_ (p)
 {
   this->ptr_ = 0;
 }
 
 ACE_INLINE
-IR::RepositoryIdSeq_out::RepositoryIdSeq_out (RepositoryIdSeq_var &p) // constructor from _var
+IR_RepositoryIdSeq_out::IR_RepositoryIdSeq_out (IR_RepositoryIdSeq_var &p) // constructor from _var
   : ptr_ (p.out ())
 {
   delete this->ptr_;
@@ -17025,102 +15976,95 @@
 }
 
 ACE_INLINE
-IR::RepositoryIdSeq_out::RepositoryIdSeq_out (const ::IR::RepositoryIdSeq_out &p) // copy constructor
-  : ptr_ (ACE_const_cast (RepositoryIdSeq_out&, p).ptr_)
+IR_RepositoryIdSeq_out::IR_RepositoryIdSeq_out (const ::IR_RepositoryIdSeq_out &p) // copy constructor
+  : ptr_ (ACE_const_cast (IR_RepositoryIdSeq_out&, p).ptr_)
 {}
 
-ACE_INLINE ::IR::RepositoryIdSeq_out &
-IR::RepositoryIdSeq_out::operator= (const ::IR::RepositoryIdSeq_out &p)
+ACE_INLINE ::IR_RepositoryIdSeq_out &
+IR_RepositoryIdSeq_out::operator= (const ::IR_RepositoryIdSeq_out &p)
 {
-  this->ptr_ = ACE_const_cast (RepositoryIdSeq_out&, p).ptr_;
+  this->ptr_ = ACE_const_cast (IR_RepositoryIdSeq_out&, p).ptr_;
   return *this;
 }
 
-ACE_INLINE ::IR::RepositoryIdSeq_out &
-IR::RepositoryIdSeq_out::operator= (RepositoryIdSeq *p)
+ACE_INLINE ::IR_RepositoryIdSeq_out &
+IR_RepositoryIdSeq_out::operator= (IR_RepositoryIdSeq *p)
 {
   this->ptr_ = p;
   return *this;
 }
 
 ACE_INLINE 
-IR::RepositoryIdSeq_out::operator ::IR::RepositoryIdSeq *&() // cast
+IR_RepositoryIdSeq_out::operator ::IR_RepositoryIdSeq *&() // cast
 {
   return this->ptr_;
 }
 
-ACE_INLINE ::IR::RepositoryIdSeq *&
-IR::RepositoryIdSeq_out::ptr (void) // ptr
+ACE_INLINE ::IR_RepositoryIdSeq *&
+IR_RepositoryIdSeq_out::ptr (void) // ptr
 {
   return this->ptr_;
 }
 
-ACE_INLINE ::IR::RepositoryIdSeq *
-IR::RepositoryIdSeq_out::operator-> (void)
+ACE_INLINE ::IR_RepositoryIdSeq *
+IR_RepositoryIdSeq_out::operator-> (void)
 {
   return this->ptr_;
 }
 
 ACE_INLINE TAO_SeqElem_String_Manager
-IR::RepositoryIdSeq_out::operator[] (CORBA::ULong index)
+IR_RepositoryIdSeq_out::operator[] (CORBA::ULong index)
 {
   return this->ptr_->operator[] (index);
 }
 
-
-#endif /* end #if !defined */
-
-
 #if !defined (TAO_USE_SEQUENCE_TEMPLATES)
   
-#if !defined (__TAO_UNBOUNDED_SEQUENCE_IR_OPDESCRIPTIONSEQ_CI_)
-#define __TAO_UNBOUNDED_SEQUENCE_IR_OPDESCRIPTIONSEQ_CI_
-
   // = Static operations.
-  ACE_INLINE IR::OperationDescription *
-  IR::_TAO_Unbounded_Sequence_IR_OpDescriptionSeq::allocbuf (CORBA::ULong size)
+  ACE_INLINE IR_OperationDescription *
+  _TAO_Unbounded_Sequence_IR_OpDescriptionSeq::allocbuf (CORBA::ULong size)
   // Allocate storage for the sequence.
   {
-    IR::OperationDescription *retval = 0;
-    ACE_NEW_RETURN (retval, IR::OperationDescription[size], 0);
+    IR_OperationDescription *retval = 0;
+    ACE_NEW_RETURN (retval, IR_OperationDescription[size], 0);
     return retval;
   }
   
-  ACE_INLINE void IR::_TAO_Unbounded_Sequence_IR_OpDescriptionSeq::freebuf (IR::OperationDescription *buffer)
+  ACE_INLINE void _TAO_Unbounded_Sequence_IR_OpDescriptionSeq::freebuf (IR_OperationDescription *buffer)
   // Free the sequence.
   {
     delete [] buffer;
   }
   
   ACE_INLINE
-  IR::_TAO_Unbounded_Sequence_IR_OpDescriptionSeq::_TAO_Unbounded_Sequence_IR_OpDescriptionSeq (void) // Default constructor.
+  _TAO_Unbounded_Sequence_IR_OpDescriptionSeq::_TAO_Unbounded_Sequence_IR_OpDescriptionSeq (void) // Default constructor.
   {
   }
   
   ACE_INLINE
-  IR::_TAO_Unbounded_Sequence_IR_OpDescriptionSeq::_TAO_Unbounded_Sequence_IR_OpDescriptionSeq (CORBA::ULong maximum) // Constructor using a maximum length value.
+  _TAO_Unbounded_Sequence_IR_OpDescriptionSeq::_TAO_Unbounded_Sequence_IR_OpDescriptionSeq (CORBA::ULong maximum) // Constructor using a maximum length value.
     : TAO_Unbounded_Base_Sequence (maximum, _TAO_Unbounded_Sequence_IR_OpDescriptionSeq::allocbuf (maximum))
   {
   }
   
   ACE_INLINE
-  IR::_TAO_Unbounded_Sequence_IR_OpDescriptionSeq::_TAO_Unbounded_Sequence_IR_OpDescriptionSeq (CORBA::ULong maximum,
+  _TAO_Unbounded_Sequence_IR_OpDescriptionSeq::_TAO_Unbounded_Sequence_IR_OpDescriptionSeq (CORBA::ULong maximum,
     CORBA::ULong length,
-    IR::OperationDescription *data,
+    IR_OperationDescription *data,
     CORBA::Boolean release)
   : TAO_Unbounded_Base_Sequence (maximum, length, data, release)
   {
   }
   
   ACE_INLINE
-  IR::_TAO_Unbounded_Sequence_IR_OpDescriptionSeq::_TAO_Unbounded_Sequence_IR_OpDescriptionSeq (const _TAO_Unbounded_Sequence_IR_OpDescriptionSeq &rhs)
+  _TAO_Unbounded_Sequence_IR_OpDescriptionSeq::_TAO_Unbounded_Sequence_IR_OpDescriptionSeq (const _TAO_Unbounded_Sequence_IR_OpDescriptionSeq &rhs)
   // Copy constructor.
     : TAO_Unbounded_Base_Sequence (rhs)
   {
     if (rhs.buffer_ != 0)
     {
-      IR::OperationDescription *tmp1 = _TAO_Unbounded_Sequence_IR_OpDescriptionSeq::allocbuf (this->maximum_);
-      IR::OperationDescription * const tmp2 = ACE_reinterpret_cast (IR::OperationDescription * ACE_CAST_CONST, rhs.buffer_);
+      IR_OperationDescription *tmp1 = _TAO_Unbounded_Sequence_IR_OpDescriptionSeq::allocbuf (this->maximum_);
+      IR_OperationDescription * const tmp2 = ACE_reinterpret_cast (IR_OperationDescription * ACE_CAST_CONST, rhs.buffer_);
       
       for (CORBA::ULong i = 0; i < this->length_; ++i)
         tmp1[i] = tmp2[i];
@@ -17133,8 +16077,8 @@
     }
   }
   
-  ACE_INLINE IR::_TAO_Unbounded_Sequence_IR_OpDescriptionSeq &
-  IR::_TAO_Unbounded_Sequence_IR_OpDescriptionSeq::operator= (const _TAO_Unbounded_Sequence_IR_OpDescriptionSeq &rhs)
+  ACE_INLINE _TAO_Unbounded_Sequence_IR_OpDescriptionSeq &
+  _TAO_Unbounded_Sequence_IR_OpDescriptionSeq::operator= (const _TAO_Unbounded_Sequence_IR_OpDescriptionSeq &rhs)
   // Assignment operator.
   {
     if (this == &rhs)
@@ -17145,7 +16089,7 @@
       if (this->maximum_ < rhs.maximum_)
       {
         // free the old buffer
-        IR::OperationDescription *tmp = ACE_reinterpret_cast (IR::OperationDescription *, this->buffer_);
+        IR_OperationDescription *tmp = ACE_reinterpret_cast (IR_OperationDescription *, this->buffer_);
         _TAO_Unbounded_Sequence_IR_OpDescriptionSeq::freebuf (tmp);
         this->buffer_ = _TAO_Unbounded_Sequence_IR_OpDescriptionSeq::allocbuf (rhs.maximum_);
       }
@@ -17155,8 +16099,8 @@
     
     TAO_Unbounded_Base_Sequence::operator= (rhs);
     
-    IR::OperationDescription *tmp1 = ACE_reinterpret_cast (IR::OperationDescription *, this->buffer_);
-    IR::OperationDescription * const tmp2 = ACE_reinterpret_cast (IR::OperationDescription * ACE_CAST_CONST, rhs.buffer_);
+    IR_OperationDescription *tmp1 = ACE_reinterpret_cast (IR_OperationDescription *, this->buffer_);
+    IR_OperationDescription * const tmp2 = ACE_reinterpret_cast (IR_OperationDescription * ACE_CAST_CONST, rhs.buffer_);
     
     for (CORBA::ULong i = 0; i < this->length_; ++i)
       tmp1[i] = tmp2[i];
@@ -17165,30 +16109,30 @@
   }
   
   // = Accessors.
-  ACE_INLINE IR::OperationDescription &
-  IR::_TAO_Unbounded_Sequence_IR_OpDescriptionSeq::operator[] (CORBA::ULong i)
+  ACE_INLINE IR_OperationDescription &
+  _TAO_Unbounded_Sequence_IR_OpDescriptionSeq::operator[] (CORBA::ULong i)
   // operator []
   {
     ACE_ASSERT (i < this->maximum_);
-    IR::OperationDescription* tmp = ACE_reinterpret_cast(IR::OperationDescription*,this->buffer_);
+    IR_OperationDescription* tmp = ACE_reinterpret_cast(IR_OperationDescription*,this->buffer_);
     return tmp[i];
   }
   
-  ACE_INLINE const IR::OperationDescription &
-  IR::_TAO_Unbounded_Sequence_IR_OpDescriptionSeq::operator[] (CORBA::ULong i) const
+  ACE_INLINE const IR_OperationDescription &
+  _TAO_Unbounded_Sequence_IR_OpDescriptionSeq::operator[] (CORBA::ULong i) const
   // operator []
   {
     ACE_ASSERT (i < this->maximum_);
-    IR::OperationDescription * const tmp = ACE_reinterpret_cast (IR::OperationDescription* ACE_CAST_CONST, this->buffer_);
+    IR_OperationDescription * const tmp = ACE_reinterpret_cast (IR_OperationDescription* ACE_CAST_CONST, this->buffer_);
     return tmp[i];
   }
   
   // Implement the TAO_Base_Sequence methods (see Sequence.h)
   
-  ACE_INLINE IR::OperationDescription *
-  IR::_TAO_Unbounded_Sequence_IR_OpDescriptionSeq::get_buffer (CORBA::Boolean orphan)
+  ACE_INLINE IR_OperationDescription *
+  _TAO_Unbounded_Sequence_IR_OpDescriptionSeq::get_buffer (CORBA::Boolean orphan)
   {
-    IR::OperationDescription *result = 0;
+    IR_OperationDescription *result = 0;
     if (orphan == 0)
     {
       // We retain ownership.
@@ -17200,7 +16144,7 @@
       }
       else
       {
-        result = ACE_reinterpret_cast (IR::OperationDescription*, this->buffer_);
+        result = ACE_reinterpret_cast (IR_OperationDescription*, this->buffer_);
       }
     }
     else // if (orphan == 1)
@@ -17209,7 +16153,7 @@
       {
         // We set the state back to default and relinquish
         // ownership.
-        result = ACE_reinterpret_cast(IR::OperationDescription*,this->buffer_);
+        result = ACE_reinterpret_cast(IR_OperationDescription*,this->buffer_);
         this->maximum_ = 0;
         this->length_ = 0;
         this->buffer_ = 0;
@@ -17219,76 +16163,70 @@
     return result;
   }
   
-  ACE_INLINE const IR::OperationDescription *
-  IR::_TAO_Unbounded_Sequence_IR_OpDescriptionSeq::get_buffer (void) const
+  ACE_INLINE const IR_OperationDescription *
+  _TAO_Unbounded_Sequence_IR_OpDescriptionSeq::get_buffer (void) const
   {
-    return ACE_reinterpret_cast(const IR::OperationDescription * ACE_CAST_CONST, this->buffer_);
+    return ACE_reinterpret_cast(const IR_OperationDescription * ACE_CAST_CONST, this->buffer_);
   }
   
   ACE_INLINE void
-  IR::_TAO_Unbounded_Sequence_IR_OpDescriptionSeq::replace (CORBA::ULong max,
+  _TAO_Unbounded_Sequence_IR_OpDescriptionSeq::replace (CORBA::ULong max,
   CORBA::ULong length,
-  IR::OperationDescription *data,
+  IR_OperationDescription *data,
   CORBA::Boolean release)
   {
     this->maximum_ = max;
     this->length_ = length;
     if (this->buffer_ && this->release_ == 1)
     {
-      IR::OperationDescription *tmp = ACE_reinterpret_cast(IR::OperationDescription*,this->buffer_);
+      IR_OperationDescription *tmp = ACE_reinterpret_cast(IR_OperationDescription*,this->buffer_);
       _TAO_Unbounded_Sequence_IR_OpDescriptionSeq::freebuf (tmp);
     }
     this->buffer_ = data;
     this->release_ = release;
   }
   
-#endif /* end #if !defined */
-
-
 #endif /* !TAO_USE_SEQUENCE_TEMPLATES */ 
 
-#if !defined (_IR_OPDESCRIPTIONSEQ_CI_)
-#define _IR_OPDESCRIPTIONSEQ_CI_
-
 // *************************************************************
-// Inline operations for class IR::OpDescriptionSeq_var
+// Inline operations for class IR_OpDescriptionSeq_var
 // *************************************************************
 
 ACE_INLINE
-IR::OpDescriptionSeq_var::OpDescriptionSeq_var (void) // default constructor
+IR_OpDescriptionSeq_var::IR_OpDescriptionSeq_var (void) // default constructor
   : ptr_ (0)
 {}
 
 ACE_INLINE
-IR::OpDescriptionSeq_var::OpDescriptionSeq_var (OpDescriptionSeq *p)
+IR_OpDescriptionSeq_var::IR_OpDescriptionSeq_var (IR_OpDescriptionSeq *p)
   : ptr_ (p)
 {}
 
 ACE_INLINE
-IR::OpDescriptionSeq_var::OpDescriptionSeq_var (const ::IR::OpDescriptionSeq_var &p) // copy constructor
+IR_OpDescriptionSeq_var::IR_OpDescriptionSeq_var (const ::IR_OpDescriptionSeq_var &p) // copy constructor
 {
   if (p.ptr_)
-    ACE_NEW (this->ptr_, ::IR::OpDescriptionSeq (*p.ptr_));
+    ACE_NEW (this->ptr_, ::IR_OpDescriptionSeq (*p.ptr_));
   else
     this->ptr_ = 0;
 }
 
 ACE_INLINE
-IR::OpDescriptionSeq_var::~OpDescriptionSeq_var (void) // destructor
+IR_OpDescriptionSeq_var::~IR_OpDescriptionSeq_var (void) // destructor
 {
   delete this->ptr_;
 }
 
-ACE_INLINE IR::OpDescriptionSeq_var &
-IR::OpDescriptionSeq_var::operator= (OpDescriptionSeq *p)
+ACE_INLINE IR_OpDescriptionSeq_var &
+IR_OpDescriptionSeq_var::operator= (IR_OpDescriptionSeq *p)
 {
   delete this->ptr_;
   this->ptr_ = p;
   return *this;
 }
 
-ACE_INLINE ::IR::OpDescriptionSeq_var &
-IR::OpDescriptionSeq_var::operator= (const ::IR::OpDescriptionSeq_var &p)
+ACE_INLINE IR_OpDescriptionSeq_var &
+IR_OpDescriptionSeq_var::operator= (const ::IR_OpDescriptionSeq_var &p) // deep copy
 {
   if (this != &p)
     {
@@ -17299,12 +16237,12 @@
         }
       else
         {
-          OpDescriptionSeq *deep_copy =
-            new OpDescriptionSeq (*p.ptr_);
+          IR_OpDescriptionSeq *deep_copy = 
+            new IR_OpDescriptionSeq (*p.ptr_);
           
           if (deep_copy != 0)
             {
-              OpDescriptionSeq *tmp = deep_copy;
+              IR_OpDescriptionSeq *tmp = deep_copy;
               deep_copy = this->ptr_;
               this->ptr_ = tmp;
               delete deep_copy;
@@ -17315,103 +16253,103 @@
   return *this;
 }
 
-ACE_INLINE const ::IR::OpDescriptionSeq *
-IR::OpDescriptionSeq_var::operator-> (void) const
+ACE_INLINE const ::IR_OpDescriptionSeq *
+IR_OpDescriptionSeq_var::operator-> (void) const
 {
   return this->ptr_;
 }
 
-ACE_INLINE ::IR::OpDescriptionSeq *
-IR::OpDescriptionSeq_var::operator-> (void)
+ACE_INLINE ::IR_OpDescriptionSeq *
+IR_OpDescriptionSeq_var::operator-> (void)
 {
   return this->ptr_;
 }
 
 ACE_INLINE 
-IR::OpDescriptionSeq_var::operator const ::IR::OpDescriptionSeq &() const // cast
+IR_OpDescriptionSeq_var::operator const ::IR_OpDescriptionSeq &() const // cast
 {
   return *this->ptr_;
 }
 
 ACE_INLINE 
-IR::OpDescriptionSeq_var::operator ::IR::OpDescriptionSeq &() // cast 
+IR_OpDescriptionSeq_var::operator ::IR_OpDescriptionSeq &() // cast 
 {
   return *this->ptr_;
 }
 
 ACE_INLINE 
-IR::OpDescriptionSeq_var::operator ::IR::OpDescriptionSeq &() const // cast 
+IR_OpDescriptionSeq_var::operator ::IR_OpDescriptionSeq &() const // cast 
 {
   return *this->ptr_;
 }
 
 // variable-size types only
 ACE_INLINE
-IR::OpDescriptionSeq_var::operator ::IR::OpDescriptionSeq *&() // cast 
+IR_OpDescriptionSeq_var::operator ::IR_OpDescriptionSeq *&() // cast 
 {
   return this->ptr_;
 }
 
-ACE_INLINE IR::OperationDescription &
-IR::OpDescriptionSeq_var::operator[] (CORBA::ULong index)
+ACE_INLINE IR_OperationDescription &
+IR_OpDescriptionSeq_var::operator[] (CORBA::ULong index)
 {
   return this->ptr_->operator[] (index);
 }
 
-ACE_INLINE const IR::OperationDescription &
-IR::OpDescriptionSeq_var::operator[] (CORBA::ULong index) const
+ACE_INLINE const IR_OperationDescription &
+IR_OpDescriptionSeq_var::operator[] (CORBA::ULong index) const
 {
-  return ACE_const_cast (const IR::OperationDescription &, this->ptr_->operator[] (index));
+  return ACE_const_cast (const IR_OperationDescription &, this->ptr_->operator[] (index));
 }
 
-ACE_INLINE const ::IR::OpDescriptionSeq &
-IR::OpDescriptionSeq_var::in (void) const
+ACE_INLINE const ::IR_OpDescriptionSeq &
+IR_OpDescriptionSeq_var::in (void) const
 {
   return *this->ptr_;
 }
 
-ACE_INLINE ::IR::OpDescriptionSeq &
-IR::OpDescriptionSeq_var::inout (void)
+ACE_INLINE ::IR_OpDescriptionSeq &
+IR_OpDescriptionSeq_var::inout (void)
 {
   return *this->ptr_;
 }
 
 // mapping for variable size 
-ACE_INLINE ::IR::OpDescriptionSeq *&
-IR::OpDescriptionSeq_var::out (void)
+ACE_INLINE ::IR_OpDescriptionSeq *&
+IR_OpDescriptionSeq_var::out (void)
 {
   delete this->ptr_;
   this->ptr_ = 0;
   return this->ptr_;
 }
 
-ACE_INLINE ::IR::OpDescriptionSeq *
-IR::OpDescriptionSeq_var::_retn (void)
+ACE_INLINE ::IR_OpDescriptionSeq *
+IR_OpDescriptionSeq_var::_retn (void)
 {
-  ::IR::OpDescriptionSeq *tmp = this->ptr_;
+  ::IR_OpDescriptionSeq *tmp = this->ptr_;
   this->ptr_ = 0;
   return tmp;
 }
 
-ACE_INLINE ::IR::OpDescriptionSeq *
-IR::OpDescriptionSeq_var::ptr (void) const
+ACE_INLINE ::IR_OpDescriptionSeq *
+IR_OpDescriptionSeq_var::ptr (void) const
 {
   return this->ptr_;
 }
 
 // *************************************************************
-// Inline operations for class IR::OpDescriptionSeq_out
+// Inline operations for class IR_OpDescriptionSeq_out
 // *************************************************************
 
 ACE_INLINE
-IR::OpDescriptionSeq_out::OpDescriptionSeq_out (OpDescriptionSeq *&p)
+IR_OpDescriptionSeq_out::IR_OpDescriptionSeq_out (IR_OpDescriptionSeq *&p)
   : ptr_ (p)
 {
   this->ptr_ = 0;
 }
 
 ACE_INLINE
-IR::OpDescriptionSeq_out::OpDescriptionSeq_out (OpDescriptionSeq_var &p) // constructor from _var
+IR_OpDescriptionSeq_out::IR_OpDescriptionSeq_out (IR_OpDescriptionSeq_var &p) // constructor from _var
   : ptr_ (p.out ())
 {
   delete this->ptr_;
@@ -17419,102 +16357,95 @@
 }
 
 ACE_INLINE
-IR::OpDescriptionSeq_out::OpDescriptionSeq_out (const ::IR::OpDescriptionSeq_out &p) // copy constructor
-  : ptr_ (ACE_const_cast (OpDescriptionSeq_out&, p).ptr_)
+IR_OpDescriptionSeq_out::IR_OpDescriptionSeq_out (const ::IR_OpDescriptionSeq_out &p) // copy constructor
+  : ptr_ (ACE_const_cast (IR_OpDescriptionSeq_out&, p).ptr_)
 {}
 
-ACE_INLINE ::IR::OpDescriptionSeq_out &
-IR::OpDescriptionSeq_out::operator= (const ::IR::OpDescriptionSeq_out &p)
+ACE_INLINE ::IR_OpDescriptionSeq_out &
+IR_OpDescriptionSeq_out::operator= (const ::IR_OpDescriptionSeq_out &p)
 {
-  this->ptr_ = ACE_const_cast (OpDescriptionSeq_out&, p).ptr_;
+  this->ptr_ = ACE_const_cast (IR_OpDescriptionSeq_out&, p).ptr_;
   return *this;
 }
 
-ACE_INLINE ::IR::OpDescriptionSeq_out &
-IR::OpDescriptionSeq_out::operator= (OpDescriptionSeq *p)
+ACE_INLINE ::IR_OpDescriptionSeq_out &
+IR_OpDescriptionSeq_out::operator= (IR_OpDescriptionSeq *p)
 {
   this->ptr_ = p;
   return *this;
 }
 
 ACE_INLINE 
-IR::OpDescriptionSeq_out::operator ::IR::OpDescriptionSeq *&() // cast
+IR_OpDescriptionSeq_out::operator ::IR_OpDescriptionSeq *&() // cast
 {
   return this->ptr_;
 }
 
-ACE_INLINE ::IR::OpDescriptionSeq *&
-IR::OpDescriptionSeq_out::ptr (void) // ptr
+ACE_INLINE ::IR_OpDescriptionSeq *&
+IR_OpDescriptionSeq_out::ptr (void) // ptr
 {
   return this->ptr_;
 }
 
-ACE_INLINE ::IR::OpDescriptionSeq *
-IR::OpDescriptionSeq_out::operator-> (void)
+ACE_INLINE ::IR_OpDescriptionSeq *
+IR_OpDescriptionSeq_out::operator-> (void)
 {
   return this->ptr_;
 }
 
-ACE_INLINE IR::OperationDescription &
-IR::OpDescriptionSeq_out::operator[] (CORBA::ULong index)
+ACE_INLINE IR_OperationDescription &
+IR_OpDescriptionSeq_out::operator[] (CORBA::ULong index)
 {
   return this->ptr_->operator[] (index);
 }
 
-
-#endif /* end #if !defined */
-
-
 #if !defined (TAO_USE_SEQUENCE_TEMPLATES)
   
-#if !defined (__TAO_UNBOUNDED_SEQUENCE_IR_ATTRDESCRIPTIONSEQ_CI_)
-#define __TAO_UNBOUNDED_SEQUENCE_IR_ATTRDESCRIPTIONSEQ_CI_
-
   // = Static operations.
-  ACE_INLINE IR::AttributeDescription *
-  IR::_TAO_Unbounded_Sequence_IR_AttrDescriptionSeq::allocbuf (CORBA::ULong size)
+  ACE_INLINE IR_AttributeDescription *
+  _TAO_Unbounded_Sequence_IR_AttrDescriptionSeq::allocbuf (CORBA::ULong size)
   // Allocate storage for the sequence.
   {
-    IR::AttributeDescription *retval = 0;
-    ACE_NEW_RETURN (retval, IR::AttributeDescription[size], 0);
+    IR_AttributeDescription *retval = 0;
+    ACE_NEW_RETURN (retval, IR_AttributeDescription[size], 0);
     return retval;
   }
   
-  ACE_INLINE void IR::_TAO_Unbounded_Sequence_IR_AttrDescriptionSeq::freebuf (IR::AttributeDescription *buffer)
+  ACE_INLINE void _TAO_Unbounded_Sequence_IR_AttrDescriptionSeq::freebuf (IR_AttributeDescription *buffer)
   // Free the sequence.
   {
     delete [] buffer;
   }
   
   ACE_INLINE
-  IR::_TAO_Unbounded_Sequence_IR_AttrDescriptionSeq::_TAO_Unbounded_Sequence_IR_AttrDescriptionSeq (void) // Default constructor.
+  _TAO_Unbounded_Sequence_IR_AttrDescriptionSeq::_TAO_Unbounded_Sequence_IR_AttrDescriptionSeq (void) // Default constructor.
   {
   }
   
   ACE_INLINE
-  IR::_TAO_Unbounded_Sequence_IR_AttrDescriptionSeq::_TAO_Unbounded_Sequence_IR_AttrDescriptionSeq (CORBA::ULong maximum) // Constructor using a maximum length value.
+  _TAO_Unbounded_Sequence_IR_AttrDescriptionSeq::_TAO_Unbounded_Sequence_IR_AttrDescriptionSeq (CORBA::ULong maximum) // Constructor using a maximum length value.
     : TAO_Unbounded_Base_Sequence (maximum, _TAO_Unbounded_Sequence_IR_AttrDescriptionSeq::allocbuf (maximum))
   {
   }
   
   ACE_INLINE
-  IR::_TAO_Unbounded_Sequence_IR_AttrDescriptionSeq::_TAO_Unbounded_Sequence_IR_AttrDescriptionSeq (CORBA::ULong maximum,
+  _TAO_Unbounded_Sequence_IR_AttrDescriptionSeq::_TAO_Unbounded_Sequence_IR_AttrDescriptionSeq (CORBA::ULong maximum,
     CORBA::ULong length,
-    IR::AttributeDescription *data,
+    IR_AttributeDescription *data,
     CORBA::Boolean release)
   : TAO_Unbounded_Base_Sequence (maximum, length, data, release)
   {
   }
   
   ACE_INLINE
-  IR::_TAO_Unbounded_Sequence_IR_AttrDescriptionSeq::_TAO_Unbounded_Sequence_IR_AttrDescriptionSeq (const _TAO_Unbounded_Sequence_IR_AttrDescriptionSeq &rhs)
+  _TAO_Unbounded_Sequence_IR_AttrDescriptionSeq::_TAO_Unbounded_Sequence_IR_AttrDescriptionSeq (const _TAO_Unbounded_Sequence_IR_AttrDescriptionSeq &rhs)
   // Copy constructor.
     : TAO_Unbounded_Base_Sequence (rhs)
   {
     if (rhs.buffer_ != 0)
     {
-      IR::AttributeDescription *tmp1 = _TAO_Unbounded_Sequence_IR_AttrDescriptionSeq::allocbuf (this->maximum_);
-      IR::AttributeDescription * const tmp2 = ACE_reinterpret_cast (IR::AttributeDescription * ACE_CAST_CONST, rhs.buffer_);
+      IR_AttributeDescription *tmp1 = _TAO_Unbounded_Sequence_IR_AttrDescriptionSeq::allocbuf (this->maximum_);
+      IR_AttributeDescription * const tmp2 = ACE_reinterpret_cast (IR_AttributeDescription * ACE_CAST_CONST, rhs.buffer_);
       
       for (CORBA::ULong i = 0; i < this->length_; ++i)
         tmp1[i] = tmp2[i];
@@ -17527,8 +16458,8 @@
     }
   }
   
-  ACE_INLINE IR::_TAO_Unbounded_Sequence_IR_AttrDescriptionSeq &
-  IR::_TAO_Unbounded_Sequence_IR_AttrDescriptionSeq::operator= (const _TAO_Unbounded_Sequence_IR_AttrDescriptionSeq &rhs)
+  ACE_INLINE _TAO_Unbounded_Sequence_IR_AttrDescriptionSeq &
+  _TAO_Unbounded_Sequence_IR_AttrDescriptionSeq::operator= (const _TAO_Unbounded_Sequence_IR_AttrDescriptionSeq &rhs)
   // Assignment operator.
   {
     if (this == &rhs)
@@ -17539,7 +16470,7 @@
       if (this->maximum_ < rhs.maximum_)
       {
         // free the old buffer
-        IR::AttributeDescription *tmp = ACE_reinterpret_cast (IR::AttributeDescription *, this->buffer_);
+        IR_AttributeDescription *tmp = ACE_reinterpret_cast (IR_AttributeDescription *, this->buffer_);
         _TAO_Unbounded_Sequence_IR_AttrDescriptionSeq::freebuf (tmp);
         this->buffer_ = _TAO_Unbounded_Sequence_IR_AttrDescriptionSeq::allocbuf (rhs.maximum_);
       }
@@ -17549,8 +16480,8 @@
     
     TAO_Unbounded_Base_Sequence::operator= (rhs);
     
-    IR::AttributeDescription *tmp1 = ACE_reinterpret_cast (IR::AttributeDescription *, this->buffer_);
-    IR::AttributeDescription * const tmp2 = ACE_reinterpret_cast (IR::AttributeDescription * ACE_CAST_CONST, rhs.buffer_);
+    IR_AttributeDescription *tmp1 = ACE_reinterpret_cast (IR_AttributeDescription *, this->buffer_);
+    IR_AttributeDescription * const tmp2 = ACE_reinterpret_cast (IR_AttributeDescription * ACE_CAST_CONST, rhs.buffer_);
     
     for (CORBA::ULong i = 0; i < this->length_; ++i)
       tmp1[i] = tmp2[i];
@@ -17559,30 +16490,30 @@
   }
   
   // = Accessors.
-  ACE_INLINE IR::AttributeDescription &
-  IR::_TAO_Unbounded_Sequence_IR_AttrDescriptionSeq::operator[] (CORBA::ULong i)
+  ACE_INLINE IR_AttributeDescription &
+  _TAO_Unbounded_Sequence_IR_AttrDescriptionSeq::operator[] (CORBA::ULong i)
   // operator []
   {
     ACE_ASSERT (i < this->maximum_);
-    IR::AttributeDescription* tmp = ACE_reinterpret_cast(IR::AttributeDescription*,this->buffer_);
+    IR_AttributeDescription* tmp = ACE_reinterpret_cast(IR_AttributeDescription*,this->buffer_);
     return tmp[i];
   }
   
-  ACE_INLINE const IR::AttributeDescription &
-  IR::_TAO_Unbounded_Sequence_IR_AttrDescriptionSeq::operator[] (CORBA::ULong i) const
+  ACE_INLINE const IR_AttributeDescription &
+  _TAO_Unbounded_Sequence_IR_AttrDescriptionSeq::operator[] (CORBA::ULong i) const
   // operator []
   {
     ACE_ASSERT (i < this->maximum_);
-    IR::AttributeDescription * const tmp = ACE_reinterpret_cast (IR::AttributeDescription* ACE_CAST_CONST, this->buffer_);
+    IR_AttributeDescription * const tmp = ACE_reinterpret_cast (IR_AttributeDescription* ACE_CAST_CONST, this->buffer_);
     return tmp[i];
   }
   
   // Implement the TAO_Base_Sequence methods (see Sequence.h)
   
-  ACE_INLINE IR::AttributeDescription *
-  IR::_TAO_Unbounded_Sequence_IR_AttrDescriptionSeq::get_buffer (CORBA::Boolean orphan)
+  ACE_INLINE IR_AttributeDescription *
+  _TAO_Unbounded_Sequence_IR_AttrDescriptionSeq::get_buffer (CORBA::Boolean orphan)
   {
-    IR::AttributeDescription *result = 0;
+    IR_AttributeDescription *result = 0;
     if (orphan == 0)
     {
       // We retain ownership.
@@ -17594,7 +16525,7 @@
       }
       else
       {
-        result = ACE_reinterpret_cast (IR::AttributeDescription*, this->buffer_);
+        result = ACE_reinterpret_cast (IR_AttributeDescription*, this->buffer_);
       }
     }
     else // if (orphan == 1)
@@ -17603,7 +16534,7 @@
       {
         // We set the state back to default and relinquish
         // ownership.
-        result = ACE_reinterpret_cast(IR::AttributeDescription*,this->buffer_);
+        result = ACE_reinterpret_cast(IR_AttributeDescription*,this->buffer_);
         this->maximum_ = 0;
         this->length_ = 0;
         this->buffer_ = 0;
@@ -17613,76 +16544,70 @@
     return result;
   }
   
-  ACE_INLINE const IR::AttributeDescription *
-  IR::_TAO_Unbounded_Sequence_IR_AttrDescriptionSeq::get_buffer (void) const
+  ACE_INLINE const IR_AttributeDescription *
+  _TAO_Unbounded_Sequence_IR_AttrDescriptionSeq::get_buffer (void) const
   {
-    return ACE_reinterpret_cast(const IR::AttributeDescription * ACE_CAST_CONST, this->buffer_);
+    return ACE_reinterpret_cast(const IR_AttributeDescription * ACE_CAST_CONST, this->buffer_);
   }
   
   ACE_INLINE void
-  IR::_TAO_Unbounded_Sequence_IR_AttrDescriptionSeq::replace (CORBA::ULong max,
+  _TAO_Unbounded_Sequence_IR_AttrDescriptionSeq::replace (CORBA::ULong max,
   CORBA::ULong length,
-  IR::AttributeDescription *data,
+  IR_AttributeDescription *data,
   CORBA::Boolean release)
   {
     this->maximum_ = max;
     this->length_ = length;
     if (this->buffer_ && this->release_ == 1)
     {
-      IR::AttributeDescription *tmp = ACE_reinterpret_cast(IR::AttributeDescription*,this->buffer_);
+      IR_AttributeDescription *tmp = ACE_reinterpret_cast(IR_AttributeDescription*,this->buffer_);
       _TAO_Unbounded_Sequence_IR_AttrDescriptionSeq::freebuf (tmp);
     }
     this->buffer_ = data;
     this->release_ = release;
   }
   
-#endif /* end #if !defined */
-
-
 #endif /* !TAO_USE_SEQUENCE_TEMPLATES */ 
 
-#if !defined (_IR_ATTRDESCRIPTIONSEQ_CI_)
-#define _IR_ATTRDESCRIPTIONSEQ_CI_
-
 // *************************************************************
-// Inline operations for class IR::AttrDescriptionSeq_var
+// Inline operations for class IR_AttrDescriptionSeq_var
 // *************************************************************
 
 ACE_INLINE
-IR::AttrDescriptionSeq_var::AttrDescriptionSeq_var (void) // default constructor
+IR_AttrDescriptionSeq_var::IR_AttrDescriptionSeq_var (void) // default constructor
   : ptr_ (0)
 {}
 
 ACE_INLINE
-IR::AttrDescriptionSeq_var::AttrDescriptionSeq_var (AttrDescriptionSeq *p)
+IR_AttrDescriptionSeq_var::IR_AttrDescriptionSeq_var (IR_AttrDescriptionSeq *p)
   : ptr_ (p)
 {}
 
 ACE_INLINE
-IR::AttrDescriptionSeq_var::AttrDescriptionSeq_var (const ::IR::AttrDescriptionSeq_var &p) // copy constructor
+IR_AttrDescriptionSeq_var::IR_AttrDescriptionSeq_var (const ::IR_AttrDescriptionSeq_var &p) // copy constructor
 {
   if (p.ptr_)
-    ACE_NEW (this->ptr_, ::IR::AttrDescriptionSeq (*p.ptr_));
+    ACE_NEW (this->ptr_, ::IR_AttrDescriptionSeq (*p.ptr_));
   else
     this->ptr_ = 0;
 }
 
 ACE_INLINE
-IR::AttrDescriptionSeq_var::~AttrDescriptionSeq_var (void) // destructor
+IR_AttrDescriptionSeq_var::~IR_AttrDescriptionSeq_var (void) // destructor
 {
   delete this->ptr_;
 }
 
-ACE_INLINE IR::AttrDescriptionSeq_var &
-IR::AttrDescriptionSeq_var::operator= (AttrDescriptionSeq *p)
+ACE_INLINE IR_AttrDescriptionSeq_var &
+IR_AttrDescriptionSeq_var::operator= (IR_AttrDescriptionSeq *p)
 {
   delete this->ptr_;
   this->ptr_ = p;
   return *this;
 }
 
-ACE_INLINE ::IR::AttrDescriptionSeq_var &
-IR::AttrDescriptionSeq_var::operator= (const ::IR::AttrDescriptionSeq_var &p)
+ACE_INLINE IR_AttrDescriptionSeq_var &
+IR_AttrDescriptionSeq_var::operator= (const ::IR_AttrDescriptionSeq_var &p) // deep copy
 {
   if (this != &p)
     {
@@ -17693,12 +16618,12 @@
         }
       else
         {
-          AttrDescriptionSeq *deep_copy =
-            new AttrDescriptionSeq (*p.ptr_);
+          IR_AttrDescriptionSeq *deep_copy = 
+            new IR_AttrDescriptionSeq (*p.ptr_);
           
           if (deep_copy != 0)
             {
-              AttrDescriptionSeq *tmp = deep_copy;
+              IR_AttrDescriptionSeq *tmp = deep_copy;
               deep_copy = this->ptr_;
               this->ptr_ = tmp;
               delete deep_copy;
@@ -17709,103 +16634,103 @@
   return *this;
 }
 
-ACE_INLINE const ::IR::AttrDescriptionSeq *
-IR::AttrDescriptionSeq_var::operator-> (void) const
+ACE_INLINE const ::IR_AttrDescriptionSeq *
+IR_AttrDescriptionSeq_var::operator-> (void) const
 {
   return this->ptr_;
 }
 
-ACE_INLINE ::IR::AttrDescriptionSeq *
-IR::AttrDescriptionSeq_var::operator-> (void)
+ACE_INLINE ::IR_AttrDescriptionSeq *
+IR_AttrDescriptionSeq_var::operator-> (void)
 {
   return this->ptr_;
 }
 
 ACE_INLINE 
-IR::AttrDescriptionSeq_var::operator const ::IR::AttrDescriptionSeq &() const // cast
+IR_AttrDescriptionSeq_var::operator const ::IR_AttrDescriptionSeq &() const // cast
 {
   return *this->ptr_;
 }
 
 ACE_INLINE 
-IR::AttrDescriptionSeq_var::operator ::IR::AttrDescriptionSeq &() // cast 
+IR_AttrDescriptionSeq_var::operator ::IR_AttrDescriptionSeq &() // cast 
 {
   return *this->ptr_;
 }
 
 ACE_INLINE 
-IR::AttrDescriptionSeq_var::operator ::IR::AttrDescriptionSeq &() const // cast 
+IR_AttrDescriptionSeq_var::operator ::IR_AttrDescriptionSeq &() const // cast 
 {
   return *this->ptr_;
 }
 
 // variable-size types only
 ACE_INLINE
-IR::AttrDescriptionSeq_var::operator ::IR::AttrDescriptionSeq *&() // cast 
+IR_AttrDescriptionSeq_var::operator ::IR_AttrDescriptionSeq *&() // cast 
 {
   return this->ptr_;
 }
 
-ACE_INLINE IR::AttributeDescription &
-IR::AttrDescriptionSeq_var::operator[] (CORBA::ULong index)
+ACE_INLINE IR_AttributeDescription &
+IR_AttrDescriptionSeq_var::operator[] (CORBA::ULong index)
 {
   return this->ptr_->operator[] (index);
 }
 
-ACE_INLINE const IR::AttributeDescription &
-IR::AttrDescriptionSeq_var::operator[] (CORBA::ULong index) const
+ACE_INLINE const IR_AttributeDescription &
+IR_AttrDescriptionSeq_var::operator[] (CORBA::ULong index) const
 {
-  return ACE_const_cast (const IR::AttributeDescription &, this->ptr_->operator[] (index));
+  return ACE_const_cast (const IR_AttributeDescription &, this->ptr_->operator[] (index));
 }
 
-ACE_INLINE const ::IR::AttrDescriptionSeq &
-IR::AttrDescriptionSeq_var::in (void) const
+ACE_INLINE const ::IR_AttrDescriptionSeq &
+IR_AttrDescriptionSeq_var::in (void) const
 {
   return *this->ptr_;
 }
 
-ACE_INLINE ::IR::AttrDescriptionSeq &
-IR::AttrDescriptionSeq_var::inout (void)
+ACE_INLINE ::IR_AttrDescriptionSeq &
+IR_AttrDescriptionSeq_var::inout (void)
 {
   return *this->ptr_;
 }
 
 // mapping for variable size 
-ACE_INLINE ::IR::AttrDescriptionSeq *&
-IR::AttrDescriptionSeq_var::out (void)
+ACE_INLINE ::IR_AttrDescriptionSeq *&
+IR_AttrDescriptionSeq_var::out (void)
 {
   delete this->ptr_;
   this->ptr_ = 0;
   return this->ptr_;
 }
 
-ACE_INLINE ::IR::AttrDescriptionSeq *
-IR::AttrDescriptionSeq_var::_retn (void)
+ACE_INLINE ::IR_AttrDescriptionSeq *
+IR_AttrDescriptionSeq_var::_retn (void)
 {
-  ::IR::AttrDescriptionSeq *tmp = this->ptr_;
+  ::IR_AttrDescriptionSeq *tmp = this->ptr_;
   this->ptr_ = 0;
   return tmp;
 }
 
-ACE_INLINE ::IR::AttrDescriptionSeq *
-IR::AttrDescriptionSeq_var::ptr (void) const
+ACE_INLINE ::IR_AttrDescriptionSeq *
+IR_AttrDescriptionSeq_var::ptr (void) const
 {
   return this->ptr_;
 }
 
 // *************************************************************
-// Inline operations for class IR::AttrDescriptionSeq_out
+// Inline operations for class IR_AttrDescriptionSeq_out
 // *************************************************************
 
 ACE_INLINE
-IR::AttrDescriptionSeq_out::AttrDescriptionSeq_out (AttrDescriptionSeq *&p)
+IR_AttrDescriptionSeq_out::IR_AttrDescriptionSeq_out (IR_AttrDescriptionSeq *&p)
   : ptr_ (p)
 {
   this->ptr_ = 0;
 }
 
 ACE_INLINE
-IR::AttrDescriptionSeq_out::AttrDescriptionSeq_out (AttrDescriptionSeq_var &p) // constructor from _var
+IR_AttrDescriptionSeq_out::IR_AttrDescriptionSeq_out (IR_AttrDescriptionSeq_var &p) // constructor from _var
   : ptr_ (p.out ())
 {
   delete this->ptr_;
@@ -17813,90 +16738,87 @@
 }
 
 ACE_INLINE
-IR::AttrDescriptionSeq_out::AttrDescriptionSeq_out (const ::IR::AttrDescriptionSeq_out &p) // copy constructor
-  : ptr_ (ACE_const_cast (AttrDescriptionSeq_out&, p).ptr_)
+IR_AttrDescriptionSeq_out::IR_AttrDescriptionSeq_out (const ::IR_AttrDescriptionSeq_out &p) // copy constructor
+  : ptr_ (ACE_const_cast (IR_AttrDescriptionSeq_out&, p).ptr_)
 {}
 
-ACE_INLINE ::IR::AttrDescriptionSeq_out &
-IR::AttrDescriptionSeq_out::operator= (const ::IR::AttrDescriptionSeq_out &p)
+ACE_INLINE ::IR_AttrDescriptionSeq_out &
+IR_AttrDescriptionSeq_out::operator= (const ::IR_AttrDescriptionSeq_out &p)
 {
-  this->ptr_ = ACE_const_cast (AttrDescriptionSeq_out&, p).ptr_;
+  this->ptr_ = ACE_const_cast (IR_AttrDescriptionSeq_out&, p).ptr_;
   return *this;
 }
 
-ACE_INLINE ::IR::AttrDescriptionSeq_out &
-IR::AttrDescriptionSeq_out::operator= (AttrDescriptionSeq *p)
+ACE_INLINE ::IR_AttrDescriptionSeq_out &
+IR_AttrDescriptionSeq_out::operator= (IR_AttrDescriptionSeq *p)
 {
   this->ptr_ = p;
   return *this;
 }
 
 ACE_INLINE 
-IR::AttrDescriptionSeq_out::operator ::IR::AttrDescriptionSeq *&() // cast
+IR_AttrDescriptionSeq_out::operator ::IR_AttrDescriptionSeq *&() // cast
 {
   return this->ptr_;
 }
 
-ACE_INLINE ::IR::AttrDescriptionSeq *&
-IR::AttrDescriptionSeq_out::ptr (void) // ptr
+ACE_INLINE ::IR_AttrDescriptionSeq *&
+IR_AttrDescriptionSeq_out::ptr (void) // ptr
 {
   return this->ptr_;
 }
 
-ACE_INLINE ::IR::AttrDescriptionSeq *
-IR::AttrDescriptionSeq_out::operator-> (void)
+ACE_INLINE ::IR_AttrDescriptionSeq *
+IR_AttrDescriptionSeq_out::operator-> (void)
 {
   return this->ptr_;
 }
 
-ACE_INLINE IR::AttributeDescription &
-IR::AttrDescriptionSeq_out::operator[] (CORBA::ULong index)
+ACE_INLINE IR_AttributeDescription &
+IR_AttrDescriptionSeq_out::operator[] (CORBA::ULong index)
 {
   return this->ptr_->operator[] (index);
 }
 
-
-#endif /* end #if !defined */
-
 // *************************************************************
-// Inline operations for class IR::InterfaceDescription_var
+// Inline operations for class IR_InterfaceDescription_var
 // *************************************************************
 
 ACE_INLINE
-IR::InterfaceDescription_var::InterfaceDescription_var (void) // default constructor
+IR_InterfaceDescription_var::IR_InterfaceDescription_var (void) // default constructor
   : ptr_ (0)
 {}
 
 ACE_INLINE
-IR::InterfaceDescription_var::InterfaceDescription_var (InterfaceDescription *p)
+IR_InterfaceDescription_var::IR_InterfaceDescription_var (IR_InterfaceDescription *p)
   : ptr_ (p)
 {}
 
 ACE_INLINE
-IR::InterfaceDescription_var::InterfaceDescription_var (const ::IR::InterfaceDescription_var &p) // copy constructor
+IR_InterfaceDescription_var::IR_InterfaceDescription_var (const ::IR_InterfaceDescription_var &p) // copy constructor
 {
   if (p.ptr_)
-    ACE_NEW (this->ptr_, ::IR::InterfaceDescription (*p.ptr_));
+    ACE_NEW (this->ptr_, ::IR_InterfaceDescription (*p.ptr_));
   else
     this->ptr_ = 0;
 }
 
 ACE_INLINE
-IR::InterfaceDescription_var::~InterfaceDescription_var (void) // destructor
+IR_InterfaceDescription_var::~IR_InterfaceDescription_var (void) // destructor
 {
   delete this->ptr_;
 }
 
-ACE_INLINE IR::InterfaceDescription_var &
-IR::InterfaceDescription_var::operator= (InterfaceDescription *p)
+ACE_INLINE IR_InterfaceDescription_var &
+IR_InterfaceDescription_var::operator= (IR_InterfaceDescription *p)
 {
   delete this->ptr_;
   this->ptr_ = p;
   return *this;
 }
 
-ACE_INLINE ::IR::InterfaceDescription_var &
-IR::InterfaceDescription_var::operator= (const ::IR::InterfaceDescription_var &p)
+ACE_INLINE ::IR_InterfaceDescription_var &
+IR_InterfaceDescription_var::operator= (const ::IR_InterfaceDescription_var &p)
 {
   if (this != &p)
     {
@@ -17907,12 +16829,12 @@
         }
       else
         {
-          InterfaceDescription *deep_copy =
-            new InterfaceDescription (*p.ptr_);
+          IR_InterfaceDescription *deep_copy = 
+            new IR_InterfaceDescription (*p.ptr_);
           
           if (deep_copy != 0)
             {
-              InterfaceDescription *tmp = deep_copy;
+              IR_InterfaceDescription *tmp = deep_copy;
               deep_copy = this->ptr_;
               this->ptr_ = tmp;
               delete deep_copy;
@@ -17923,91 +16845,91 @@
   return *this;
 }
 
-ACE_INLINE const ::IR::InterfaceDescription *
-IR::InterfaceDescription_var::operator-> (void) const
+ACE_INLINE const ::IR_InterfaceDescription *
+IR_InterfaceDescription_var::operator-> (void) const
 {
   return this->ptr_;
 }
 
-ACE_INLINE ::IR::InterfaceDescription *
-IR::InterfaceDescription_var::operator-> (void)
+ACE_INLINE ::IR_InterfaceDescription *
+IR_InterfaceDescription_var::operator-> (void)
 {
   return this->ptr_;
 }
 
 ACE_INLINE
-IR::InterfaceDescription_var::operator const ::IR::InterfaceDescription &() const // cast
+IR_InterfaceDescription_var::operator const ::IR_InterfaceDescription &() const // cast
 {
   return *this->ptr_;
 }
 
 ACE_INLINE
-IR::InterfaceDescription_var::operator ::IR::InterfaceDescription &() // cast 
+IR_InterfaceDescription_var::operator ::IR_InterfaceDescription &() // cast 
 {
   return *this->ptr_;
 }
 
 ACE_INLINE
-IR::InterfaceDescription_var::operator ::IR::InterfaceDescription &() const // cast 
+IR_InterfaceDescription_var::operator ::IR_InterfaceDescription &() const // cast 
 {
   return *this->ptr_;
 }
 
 // variable-size types only
 ACE_INLINE
-IR::InterfaceDescription_var::operator ::IR::InterfaceDescription *&() // cast 
+IR_InterfaceDescription_var::operator ::IR_InterfaceDescription *&() // cast 
 {
   return this->ptr_;
 }
 
-ACE_INLINE const ::IR::InterfaceDescription &
-IR::InterfaceDescription_var::in (void) const
+ACE_INLINE const ::IR_InterfaceDescription &
+IR_InterfaceDescription_var::in (void) const
 {
   return *this->ptr_;
 }
 
-ACE_INLINE ::IR::InterfaceDescription &
-IR::InterfaceDescription_var::inout (void)
+ACE_INLINE ::IR_InterfaceDescription &
+IR_InterfaceDescription_var::inout (void)
 {
   return *this->ptr_;
 }
 
 // mapping for variable size 
-ACE_INLINE ::IR::InterfaceDescription *&
-IR::InterfaceDescription_var::out (void)
+ACE_INLINE ::IR_InterfaceDescription *&
+IR_InterfaceDescription_var::out (void)
 {
   delete this->ptr_;
   this->ptr_ = 0;
   return this->ptr_;
 }
 
-ACE_INLINE ::IR::InterfaceDescription *
-IR::InterfaceDescription_var::_retn (void)
+ACE_INLINE ::IR_InterfaceDescription *
+IR_InterfaceDescription_var::_retn (void)
 {
-  ::IR::InterfaceDescription *tmp = this->ptr_;
+  ::IR_InterfaceDescription *tmp = this->ptr_;
   this->ptr_ = 0;
   return tmp;
 }
 
-ACE_INLINE ::IR::InterfaceDescription *
-IR::InterfaceDescription_var::ptr (void) const
+ACE_INLINE ::IR_InterfaceDescription *
+IR_InterfaceDescription_var::ptr (void) const
 {
   return this->ptr_;
 }
 
 // *************************************************************
-// Inline operations for class IR::InterfaceDescription_out
+// Inline operations for class IR_InterfaceDescription_out
 // *************************************************************
 
 ACE_INLINE
-IR::InterfaceDescription_out::InterfaceDescription_out (::IR::InterfaceDescription *&p)
+IR_InterfaceDescription_out::IR_InterfaceDescription_out (::IR_InterfaceDescription *&p)
   : ptr_ (p)
 {
   this->ptr_ = 0;
 }
 
 ACE_INLINE
-IR::InterfaceDescription_out::InterfaceDescription_out (InterfaceDescription_var &p) // constructor from _var
+IR_InterfaceDescription_out::IR_InterfaceDescription_out (IR_InterfaceDescription_var &p) // constructor from _var
   : ptr_ (p.out ())
 {
   delete this->ptr_;
@@ -18015,81 +16937,81 @@
 }
 
 ACE_INLINE
-IR::InterfaceDescription_out::InterfaceDescription_out (const ::IR::InterfaceDescription_out &p) // copy constructor
-  : ptr_ (ACE_const_cast (InterfaceDescription_out&, p).ptr_)
+IR_InterfaceDescription_out::IR_InterfaceDescription_out (const ::IR_InterfaceDescription_out &p) // copy constructor
+  : ptr_ (ACE_const_cast (IR_InterfaceDescription_out&, p).ptr_)
 {}
 
-ACE_INLINE IR::InterfaceDescription_out &
-IR::InterfaceDescription_out::operator= (const ::IR::InterfaceDescription_out &p)
+ACE_INLINE IR_InterfaceDescription_out &
+IR_InterfaceDescription_out::operator= (const ::IR_InterfaceDescription_out &p)
 {
-  this->ptr_ = ACE_const_cast (InterfaceDescription_out&, p).ptr_;
+  this->ptr_ = ACE_const_cast (IR_InterfaceDescription_out&, p).ptr_;
   return *this;
 }
 
-ACE_INLINE IR::InterfaceDescription_out &
-IR::InterfaceDescription_out::operator= (InterfaceDescription *p)
+ACE_INLINE IR_InterfaceDescription_out &
+IR_InterfaceDescription_out::operator= (IR_InterfaceDescription *p)
 {
   this->ptr_ = p;
   return *this;
 }
 
 ACE_INLINE 
-IR::InterfaceDescription_out::operator ::IR::InterfaceDescription *&() // cast
+IR_InterfaceDescription_out::operator ::IR_InterfaceDescription *&() // cast
 {
   return this->ptr_;
 }
 
-ACE_INLINE ::IR::InterfaceDescription *&
-IR::InterfaceDescription_out::ptr (void) // ptr
+ACE_INLINE ::IR_InterfaceDescription *&
+IR_InterfaceDescription_out::ptr (void) // ptr
 {
   return this->ptr_;
 }
 
-ACE_INLINE ::IR::InterfaceDescription *
-IR::InterfaceDescription_out::operator-> (void)
+ACE_INLINE ::IR_InterfaceDescription *
+IR_InterfaceDescription_out::operator-> (void)
 {
   return this->ptr_;
 }
 
 // *************************************************************
-// Inline operations for class IR::ValueMember_var
+// Inline operations for class IR_ValueMember_var
 // *************************************************************
 
 ACE_INLINE
-IR::ValueMember_var::ValueMember_var (void) // default constructor
+IR_ValueMember_var::IR_ValueMember_var (void) // default constructor
   : ptr_ (0)
 {}
 
 ACE_INLINE
-IR::ValueMember_var::ValueMember_var (ValueMember *p)
+IR_ValueMember_var::IR_ValueMember_var (IR_ValueMember *p)
   : ptr_ (p)
 {}
 
 ACE_INLINE
-IR::ValueMember_var::ValueMember_var (const ::IR::ValueMember_var &p) // copy constructor
+IR_ValueMember_var::IR_ValueMember_var (const ::IR_ValueMember_var &p) // copy constructor
 {
   if (p.ptr_)
-    ACE_NEW (this->ptr_, ::IR::ValueMember (*p.ptr_));
+    ACE_NEW (this->ptr_, ::IR_ValueMember (*p.ptr_));
   else
     this->ptr_ = 0;
 }
 
 ACE_INLINE
-IR::ValueMember_var::~ValueMember_var (void) // destructor
+IR_ValueMember_var::~IR_ValueMember_var (void) // destructor
 {
   delete this->ptr_;
 }
 
-ACE_INLINE IR::ValueMember_var &
-IR::ValueMember_var::operator= (ValueMember *p)
+ACE_INLINE IR_ValueMember_var &
+IR_ValueMember_var::operator= (IR_ValueMember *p)
 {
   delete this->ptr_;
   this->ptr_ = p;
   return *this;
 }
 
-ACE_INLINE ::IR::ValueMember_var &
-IR::ValueMember_var::operator= (const ::IR::ValueMember_var &p)
+ACE_INLINE ::IR_ValueMember_var &
+IR_ValueMember_var::operator= (const ::IR_ValueMember_var &p)
 {
   if (this != &p)
     {
@@ -18100,12 +17022,12 @@
         }
       else
         {
-          ValueMember *deep_copy =
-            new ValueMember (*p.ptr_);
+          IR_ValueMember *deep_copy = 
+            new IR_ValueMember (*p.ptr_);
           
           if (deep_copy != 0)
             {
-              ValueMember *tmp = deep_copy;
+              IR_ValueMember *tmp = deep_copy;
               deep_copy = this->ptr_;
               this->ptr_ = tmp;
               delete deep_copy;
@@ -18116,91 +17038,91 @@
   return *this;
 }
 
-ACE_INLINE const ::IR::ValueMember *
-IR::ValueMember_var::operator-> (void) const
+ACE_INLINE const ::IR_ValueMember *
+IR_ValueMember_var::operator-> (void) const
 {
   return this->ptr_;
 }
 
-ACE_INLINE ::IR::ValueMember *
-IR::ValueMember_var::operator-> (void)
+ACE_INLINE ::IR_ValueMember *
+IR_ValueMember_var::operator-> (void)
 {
   return this->ptr_;
 }
 
 ACE_INLINE
-IR::ValueMember_var::operator const ::IR::ValueMember &() const // cast
+IR_ValueMember_var::operator const ::IR_ValueMember &() const // cast
 {
   return *this->ptr_;
 }
 
 ACE_INLINE
-IR::ValueMember_var::operator ::IR::ValueMember &() // cast 
+IR_ValueMember_var::operator ::IR_ValueMember &() // cast 
 {
   return *this->ptr_;
 }
 
 ACE_INLINE
-IR::ValueMember_var::operator ::IR::ValueMember &() const // cast 
+IR_ValueMember_var::operator ::IR_ValueMember &() const // cast 
 {
   return *this->ptr_;
 }
 
 // variable-size types only
 ACE_INLINE
-IR::ValueMember_var::operator ::IR::ValueMember *&() // cast 
+IR_ValueMember_var::operator ::IR_ValueMember *&() // cast 
 {
   return this->ptr_;
 }
 
-ACE_INLINE const ::IR::ValueMember &
-IR::ValueMember_var::in (void) const
+ACE_INLINE const ::IR_ValueMember &
+IR_ValueMember_var::in (void) const
 {
   return *this->ptr_;
 }
 
-ACE_INLINE ::IR::ValueMember &
-IR::ValueMember_var::inout (void)
+ACE_INLINE ::IR_ValueMember &
+IR_ValueMember_var::inout (void)
 {
   return *this->ptr_;
 }
 
 // mapping for variable size 
-ACE_INLINE ::IR::ValueMember *&
-IR::ValueMember_var::out (void)
+ACE_INLINE ::IR_ValueMember *&
+IR_ValueMember_var::out (void)
 {
   delete this->ptr_;
   this->ptr_ = 0;
   return this->ptr_;
 }
 
-ACE_INLINE ::IR::ValueMember *
-IR::ValueMember_var::_retn (void)
+ACE_INLINE ::IR_ValueMember *
+IR_ValueMember_var::_retn (void)
 {
-  ::IR::ValueMember *tmp = this->ptr_;
+  ::IR_ValueMember *tmp = this->ptr_;
   this->ptr_ = 0;
   return tmp;
 }
 
-ACE_INLINE ::IR::ValueMember *
-IR::ValueMember_var::ptr (void) const
+ACE_INLINE ::IR_ValueMember *
+IR_ValueMember_var::ptr (void) const
 {
   return this->ptr_;
 }
 
 // *************************************************************
-// Inline operations for class IR::ValueMember_out
+// Inline operations for class IR_ValueMember_out
 // *************************************************************
 
 ACE_INLINE
-IR::ValueMember_out::ValueMember_out (::IR::ValueMember *&p)
+IR_ValueMember_out::IR_ValueMember_out (::IR_ValueMember *&p)
   : ptr_ (p)
 {
   this->ptr_ = 0;
 }
 
 ACE_INLINE
-IR::ValueMember_out::ValueMember_out (ValueMember_var &p) // constructor from _var
+IR_ValueMember_out::IR_ValueMember_out (IR_ValueMember_var &p) // constructor from _var
   : ptr_ (p.out ())
 {
   delete this->ptr_;
@@ -18208,93 +17130,89 @@
 }
 
 ACE_INLINE
-IR::ValueMember_out::ValueMember_out (const ::IR::ValueMember_out &p) // copy constructor
-  : ptr_ (ACE_const_cast (ValueMember_out&, p).ptr_)
+IR_ValueMember_out::IR_ValueMember_out (const ::IR_ValueMember_out &p) // copy constructor
+  : ptr_ (ACE_const_cast (IR_ValueMember_out&, p).ptr_)
 {}
 
-ACE_INLINE IR::ValueMember_out &
-IR::ValueMember_out::operator= (const ::IR::ValueMember_out &p)
+ACE_INLINE IR_ValueMember_out &
+IR_ValueMember_out::operator= (const ::IR_ValueMember_out &p)
 {
-  this->ptr_ = ACE_const_cast (ValueMember_out&, p).ptr_;
+  this->ptr_ = ACE_const_cast (IR_ValueMember_out&, p).ptr_;
   return *this;
 }
 
-ACE_INLINE IR::ValueMember_out &
-IR::ValueMember_out::operator= (ValueMember *p)
+ACE_INLINE IR_ValueMember_out &
+IR_ValueMember_out::operator= (IR_ValueMember *p)
 {
   this->ptr_ = p;
   return *this;
 }
 
 ACE_INLINE 
-IR::ValueMember_out::operator ::IR::ValueMember *&() // cast
+IR_ValueMember_out::operator ::IR_ValueMember *&() // cast
 {
   return this->ptr_;
 }
 
-ACE_INLINE ::IR::ValueMember *&
-IR::ValueMember_out::ptr (void) // ptr
+ACE_INLINE ::IR_ValueMember *&
+IR_ValueMember_out::ptr (void) // ptr
 {
   return this->ptr_;
 }
 
-ACE_INLINE ::IR::ValueMember *
-IR::ValueMember_out::operator-> (void)
+ACE_INLINE ::IR_ValueMember *
+IR_ValueMember_out::operator-> (void)
 {
   return this->ptr_;
 }
 
-
 #if !defined (TAO_USE_SEQUENCE_TEMPLATES)
   
-#if !defined (__TAO_UNBOUNDED_SEQUENCE_IR_VALUEMEMBERSEQ_CI_)
-#define __TAO_UNBOUNDED_SEQUENCE_IR_VALUEMEMBERSEQ_CI_
-
   // = Static operations.
-  ACE_INLINE IR::ValueMember *
-  IR::_TAO_Unbounded_Sequence_IR_ValueMemberSeq::allocbuf (CORBA::ULong size)
+  ACE_INLINE IR_ValueMember *
+  _TAO_Unbounded_Sequence_IR_ValueMemberSeq::allocbuf (CORBA::ULong size)
   // Allocate storage for the sequence.
   {
-    IR::ValueMember *retval = 0;
-    ACE_NEW_RETURN (retval, IR::ValueMember[size], 0);
+    IR_ValueMember *retval = 0;
+    ACE_NEW_RETURN (retval, IR_ValueMember[size], 0);
     return retval;
   }
   
-  ACE_INLINE void IR::_TAO_Unbounded_Sequence_IR_ValueMemberSeq::freebuf (IR::ValueMember *buffer)
+  ACE_INLINE void _TAO_Unbounded_Sequence_IR_ValueMemberSeq::freebuf (IR_ValueMember *buffer)
   // Free the sequence.
   {
     delete [] buffer;
   }
   
   ACE_INLINE
-  IR::_TAO_Unbounded_Sequence_IR_ValueMemberSeq::_TAO_Unbounded_Sequence_IR_ValueMemberSeq (void) // Default constructor.
+  _TAO_Unbounded_Sequence_IR_ValueMemberSeq::_TAO_Unbounded_Sequence_IR_ValueMemberSeq (void) // Default constructor.
   {
   }
   
   ACE_INLINE
-  IR::_TAO_Unbounded_Sequence_IR_ValueMemberSeq::_TAO_Unbounded_Sequence_IR_ValueMemberSeq (CORBA::ULong maximum) // Constructor using a maximum length value.
+  _TAO_Unbounded_Sequence_IR_ValueMemberSeq::_TAO_Unbounded_Sequence_IR_ValueMemberSeq (CORBA::ULong maximum) // Constructor using a maximum length value.
     : TAO_Unbounded_Base_Sequence (maximum, _TAO_Unbounded_Sequence_IR_ValueMemberSeq::allocbuf (maximum))
   {
   }
   
   ACE_INLINE
-  IR::_TAO_Unbounded_Sequence_IR_ValueMemberSeq::_TAO_Unbounded_Sequence_IR_ValueMemberSeq (CORBA::ULong maximum,
+  _TAO_Unbounded_Sequence_IR_ValueMemberSeq::_TAO_Unbounded_Sequence_IR_ValueMemberSeq (CORBA::ULong maximum,
     CORBA::ULong length,
-    IR::ValueMember *data,
+    IR_ValueMember *data,
     CORBA::Boolean release)
   : TAO_Unbounded_Base_Sequence (maximum, length, data, release)
   {
   }
   
   ACE_INLINE
-  IR::_TAO_Unbounded_Sequence_IR_ValueMemberSeq::_TAO_Unbounded_Sequence_IR_ValueMemberSeq (const _TAO_Unbounded_Sequence_IR_ValueMemberSeq &rhs)
+  _TAO_Unbounded_Sequence_IR_ValueMemberSeq::_TAO_Unbounded_Sequence_IR_ValueMemberSeq (const _TAO_Unbounded_Sequence_IR_ValueMemberSeq &rhs)
   // Copy constructor.
     : TAO_Unbounded_Base_Sequence (rhs)
   {
     if (rhs.buffer_ != 0)
     {
-      IR::ValueMember *tmp1 = _TAO_Unbounded_Sequence_IR_ValueMemberSeq::allocbuf (this->maximum_);
-      IR::ValueMember * const tmp2 = ACE_reinterpret_cast (IR::ValueMember * ACE_CAST_CONST, rhs.buffer_);
+      IR_ValueMember *tmp1 = _TAO_Unbounded_Sequence_IR_ValueMemberSeq::allocbuf (this->maximum_);
+      IR_ValueMember * const tmp2 = ACE_reinterpret_cast (IR_ValueMember * ACE_CAST_CONST, rhs.buffer_);
       
       for (CORBA::ULong i = 0; i < this->length_; ++i)
         tmp1[i] = tmp2[i];
@@ -18307,8 +17225,8 @@
     }
   }
   
-  ACE_INLINE IR::_TAO_Unbounded_Sequence_IR_ValueMemberSeq &
-  IR::_TAO_Unbounded_Sequence_IR_ValueMemberSeq::operator= (const _TAO_Unbounded_Sequence_IR_ValueMemberSeq &rhs)
+  ACE_INLINE _TAO_Unbounded_Sequence_IR_ValueMemberSeq &
+  _TAO_Unbounded_Sequence_IR_ValueMemberSeq::operator= (const _TAO_Unbounded_Sequence_IR_ValueMemberSeq &rhs)
   // Assignment operator.
   {
     if (this == &rhs)
@@ -18319,7 +17237,7 @@
       if (this->maximum_ < rhs.maximum_)
       {
         // free the old buffer
-        IR::ValueMember *tmp = ACE_reinterpret_cast (IR::ValueMember *, this->buffer_);
+        IR_ValueMember *tmp = ACE_reinterpret_cast (IR_ValueMember *, this->buffer_);
         _TAO_Unbounded_Sequence_IR_ValueMemberSeq::freebuf (tmp);
         this->buffer_ = _TAO_Unbounded_Sequence_IR_ValueMemberSeq::allocbuf (rhs.maximum_);
       }
@@ -18329,8 +17247,8 @@
     
     TAO_Unbounded_Base_Sequence::operator= (rhs);
     
-    IR::ValueMember *tmp1 = ACE_reinterpret_cast (IR::ValueMember *, this->buffer_);
-    IR::ValueMember * const tmp2 = ACE_reinterpret_cast (IR::ValueMember * ACE_CAST_CONST, rhs.buffer_);
+    IR_ValueMember *tmp1 = ACE_reinterpret_cast (IR_ValueMember *, this->buffer_);
+    IR_ValueMember * const tmp2 = ACE_reinterpret_cast (IR_ValueMember * ACE_CAST_CONST, rhs.buffer_);
     
     for (CORBA::ULong i = 0; i < this->length_; ++i)
       tmp1[i] = tmp2[i];
@@ -18339,30 +17257,30 @@
   }
   
   // = Accessors.
-  ACE_INLINE IR::ValueMember &
-  IR::_TAO_Unbounded_Sequence_IR_ValueMemberSeq::operator[] (CORBA::ULong i)
+  ACE_INLINE IR_ValueMember &
+  _TAO_Unbounded_Sequence_IR_ValueMemberSeq::operator[] (CORBA::ULong i)
   // operator []
   {
     ACE_ASSERT (i < this->maximum_);
-    IR::ValueMember* tmp = ACE_reinterpret_cast(IR::ValueMember*,this->buffer_);
+    IR_ValueMember* tmp = ACE_reinterpret_cast(IR_ValueMember*,this->buffer_);
     return tmp[i];
   }
   
-  ACE_INLINE const IR::ValueMember &
-  IR::_TAO_Unbounded_Sequence_IR_ValueMemberSeq::operator[] (CORBA::ULong i) const
+  ACE_INLINE const IR_ValueMember &
+  _TAO_Unbounded_Sequence_IR_ValueMemberSeq::operator[] (CORBA::ULong i) const
   // operator []
   {
     ACE_ASSERT (i < this->maximum_);
-    IR::ValueMember * const tmp = ACE_reinterpret_cast (IR::ValueMember* ACE_CAST_CONST, this->buffer_);
+    IR_ValueMember * const tmp = ACE_reinterpret_cast (IR_ValueMember* ACE_CAST_CONST, this->buffer_);
     return tmp[i];
   }
   
   // Implement the TAO_Base_Sequence methods (see Sequence.h)
   
-  ACE_INLINE IR::ValueMember *
-  IR::_TAO_Unbounded_Sequence_IR_ValueMemberSeq::get_buffer (CORBA::Boolean orphan)
+  ACE_INLINE IR_ValueMember *
+  _TAO_Unbounded_Sequence_IR_ValueMemberSeq::get_buffer (CORBA::Boolean orphan)
   {
-    IR::ValueMember *result = 0;
+    IR_ValueMember *result = 0;
     if (orphan == 0)
     {
       // We retain ownership.
@@ -18374,7 +17292,7 @@
       }
       else
       {
-        result = ACE_reinterpret_cast (IR::ValueMember*, this->buffer_);
+        result = ACE_reinterpret_cast (IR_ValueMember*, this->buffer_);
       }
     }
     else // if (orphan == 1)
@@ -18383,7 +17301,7 @@
       {
         // We set the state back to default and relinquish
         // ownership.
-        result = ACE_reinterpret_cast(IR::ValueMember*,this->buffer_);
+        result = ACE_reinterpret_cast(IR_ValueMember*,this->buffer_);
         this->maximum_ = 0;
         this->length_ = 0;
         this->buffer_ = 0;
@@ -18393,76 +17311,70 @@
     return result;
   }
   
-  ACE_INLINE const IR::ValueMember *
-  IR::_TAO_Unbounded_Sequence_IR_ValueMemberSeq::get_buffer (void) const
+  ACE_INLINE const IR_ValueMember *
+  _TAO_Unbounded_Sequence_IR_ValueMemberSeq::get_buffer (void) const
   {
-    return ACE_reinterpret_cast(const IR::ValueMember * ACE_CAST_CONST, this->buffer_);
+    return ACE_reinterpret_cast(const IR_ValueMember * ACE_CAST_CONST, this->buffer_);
   }
   
   ACE_INLINE void
-  IR::_TAO_Unbounded_Sequence_IR_ValueMemberSeq::replace (CORBA::ULong max,
+  _TAO_Unbounded_Sequence_IR_ValueMemberSeq::replace (CORBA::ULong max,
   CORBA::ULong length,
-  IR::ValueMember *data,
+  IR_ValueMember *data,
   CORBA::Boolean release)
   {
     this->maximum_ = max;
     this->length_ = length;
     if (this->buffer_ && this->release_ == 1)
     {
-      IR::ValueMember *tmp = ACE_reinterpret_cast(IR::ValueMember*,this->buffer_);
+      IR_ValueMember *tmp = ACE_reinterpret_cast(IR_ValueMember*,this->buffer_);
       _TAO_Unbounded_Sequence_IR_ValueMemberSeq::freebuf (tmp);
     }
     this->buffer_ = data;
     this->release_ = release;
   }
   
-#endif /* end #if !defined */
-
-
 #endif /* !TAO_USE_SEQUENCE_TEMPLATES */ 
 
-#if !defined (_IR_VALUEMEMBERSEQ_CI_)
-#define _IR_VALUEMEMBERSEQ_CI_
-
 // *************************************************************
-// Inline operations for class IR::ValueMemberSeq_var
+// Inline operations for class IR_ValueMemberSeq_var
 // *************************************************************
 
 ACE_INLINE
-IR::ValueMemberSeq_var::ValueMemberSeq_var (void) // default constructor
+IR_ValueMemberSeq_var::IR_ValueMemberSeq_var (void) // default constructor
   : ptr_ (0)
 {}
 
 ACE_INLINE
-IR::ValueMemberSeq_var::ValueMemberSeq_var (ValueMemberSeq *p)
+IR_ValueMemberSeq_var::IR_ValueMemberSeq_var (IR_ValueMemberSeq *p)
   : ptr_ (p)
 {}
 
 ACE_INLINE
-IR::ValueMemberSeq_var::ValueMemberSeq_var (const ::IR::ValueMemberSeq_var &p) // copy constructor
+IR_ValueMemberSeq_var::IR_ValueMemberSeq_var (const ::IR_ValueMemberSeq_var &p) // copy constructor
 {
   if (p.ptr_)
-    ACE_NEW (this->ptr_, ::IR::ValueMemberSeq (*p.ptr_));
+    ACE_NEW (this->ptr_, ::IR_ValueMemberSeq (*p.ptr_));
   else
     this->ptr_ = 0;
 }
 
 ACE_INLINE
-IR::ValueMemberSeq_var::~ValueMemberSeq_var (void) // destructor
+IR_ValueMemberSeq_var::~IR_ValueMemberSeq_var (void) // destructor
 {
   delete this->ptr_;
 }
 
-ACE_INLINE IR::ValueMemberSeq_var &
-IR::ValueMemberSeq_var::operator= (ValueMemberSeq *p)
+ACE_INLINE IR_ValueMemberSeq_var &
+IR_ValueMemberSeq_var::operator= (IR_ValueMemberSeq *p)
 {
   delete this->ptr_;
   this->ptr_ = p;
   return *this;
 }
 
-ACE_INLINE ::IR::ValueMemberSeq_var &
-IR::ValueMemberSeq_var::operator= (const ::IR::ValueMemberSeq_var &p)
+ACE_INLINE IR_ValueMemberSeq_var &
+IR_ValueMemberSeq_var::operator= (const ::IR_ValueMemberSeq_var &p) // deep copy
 {
   if (this != &p)
     {
@@ -18473,12 +17385,12 @@
         }
       else
         {
-          ValueMemberSeq *deep_copy =
-            new ValueMemberSeq (*p.ptr_);
+          IR_ValueMemberSeq *deep_copy = 
+            new IR_ValueMemberSeq (*p.ptr_);
           
           if (deep_copy != 0)
             {
-              ValueMemberSeq *tmp = deep_copy;
+              IR_ValueMemberSeq *tmp = deep_copy;
               deep_copy = this->ptr_;
               this->ptr_ = tmp;
               delete deep_copy;
@@ -18489,103 +17401,103 @@
   return *this;
 }
 
-ACE_INLINE const ::IR::ValueMemberSeq *
-IR::ValueMemberSeq_var::operator-> (void) const
+ACE_INLINE const ::IR_ValueMemberSeq *
+IR_ValueMemberSeq_var::operator-> (void) const
 {
   return this->ptr_;
 }
 
-ACE_INLINE ::IR::ValueMemberSeq *
-IR::ValueMemberSeq_var::operator-> (void)
+ACE_INLINE ::IR_ValueMemberSeq *
+IR_ValueMemberSeq_var::operator-> (void)
 {
   return this->ptr_;
 }
 
 ACE_INLINE 
-IR::ValueMemberSeq_var::operator const ::IR::ValueMemberSeq &() const // cast
+IR_ValueMemberSeq_var::operator const ::IR_ValueMemberSeq &() const // cast
 {
   return *this->ptr_;
 }
 
 ACE_INLINE 
-IR::ValueMemberSeq_var::operator ::IR::ValueMemberSeq &() // cast 
+IR_ValueMemberSeq_var::operator ::IR_ValueMemberSeq &() // cast 
 {
   return *this->ptr_;
 }
 
 ACE_INLINE 
-IR::ValueMemberSeq_var::operator ::IR::ValueMemberSeq &() const // cast 
+IR_ValueMemberSeq_var::operator ::IR_ValueMemberSeq &() const // cast 
 {
   return *this->ptr_;
 }
 
 // variable-size types only
 ACE_INLINE
-IR::ValueMemberSeq_var::operator ::IR::ValueMemberSeq *&() // cast 
+IR_ValueMemberSeq_var::operator ::IR_ValueMemberSeq *&() // cast 
 {
   return this->ptr_;
 }
 
-ACE_INLINE IR::ValueMember &
-IR::ValueMemberSeq_var::operator[] (CORBA::ULong index)
+ACE_INLINE IR_ValueMember &
+IR_ValueMemberSeq_var::operator[] (CORBA::ULong index)
 {
   return this->ptr_->operator[] (index);
 }
 
-ACE_INLINE const IR::ValueMember &
-IR::ValueMemberSeq_var::operator[] (CORBA::ULong index) const
+ACE_INLINE const IR_ValueMember &
+IR_ValueMemberSeq_var::operator[] (CORBA::ULong index) const
 {
-  return ACE_const_cast (const IR::ValueMember &, this->ptr_->operator[] (index));
+  return ACE_const_cast (const IR_ValueMember &, this->ptr_->operator[] (index));
 }
 
-ACE_INLINE const ::IR::ValueMemberSeq &
-IR::ValueMemberSeq_var::in (void) const
+ACE_INLINE const ::IR_ValueMemberSeq &
+IR_ValueMemberSeq_var::in (void) const
 {
   return *this->ptr_;
 }
 
-ACE_INLINE ::IR::ValueMemberSeq &
-IR::ValueMemberSeq_var::inout (void)
+ACE_INLINE ::IR_ValueMemberSeq &
+IR_ValueMemberSeq_var::inout (void)
 {
   return *this->ptr_;
 }
 
 // mapping for variable size 
-ACE_INLINE ::IR::ValueMemberSeq *&
-IR::ValueMemberSeq_var::out (void)
+ACE_INLINE ::IR_ValueMemberSeq *&
+IR_ValueMemberSeq_var::out (void)
 {
   delete this->ptr_;
   this->ptr_ = 0;
   return this->ptr_;
 }
 
-ACE_INLINE ::IR::ValueMemberSeq *
-IR::ValueMemberSeq_var::_retn (void)
+ACE_INLINE ::IR_ValueMemberSeq *
+IR_ValueMemberSeq_var::_retn (void)
 {
-  ::IR::ValueMemberSeq *tmp = this->ptr_;
+  ::IR_ValueMemberSeq *tmp = this->ptr_;
   this->ptr_ = 0;
   return tmp;
 }
 
-ACE_INLINE ::IR::ValueMemberSeq *
-IR::ValueMemberSeq_var::ptr (void) const
+ACE_INLINE ::IR_ValueMemberSeq *
+IR_ValueMemberSeq_var::ptr (void) const
 {
   return this->ptr_;
 }
 
 // *************************************************************
-// Inline operations for class IR::ValueMemberSeq_out
+// Inline operations for class IR_ValueMemberSeq_out
 // *************************************************************
 
 ACE_INLINE
-IR::ValueMemberSeq_out::ValueMemberSeq_out (ValueMemberSeq *&p)
+IR_ValueMemberSeq_out::IR_ValueMemberSeq_out (IR_ValueMemberSeq *&p)
   : ptr_ (p)
 {
   this->ptr_ = 0;
 }
 
 ACE_INLINE
-IR::ValueMemberSeq_out::ValueMemberSeq_out (ValueMemberSeq_var &p) // constructor from _var
+IR_ValueMemberSeq_out::IR_ValueMemberSeq_out (IR_ValueMemberSeq_var &p) // constructor from _var
   : ptr_ (p.out ())
 {
   delete this->ptr_;
@@ -18593,57 +17505,50 @@
 }
 
 ACE_INLINE
-IR::ValueMemberSeq_out::ValueMemberSeq_out (const ::IR::ValueMemberSeq_out &p) // copy constructor
-  : ptr_ (ACE_const_cast (ValueMemberSeq_out&, p).ptr_)
+IR_ValueMemberSeq_out::IR_ValueMemberSeq_out (const ::IR_ValueMemberSeq_out &p) // copy constructor
+  : ptr_ (ACE_const_cast (IR_ValueMemberSeq_out&, p).ptr_)
 {}
 
-ACE_INLINE ::IR::ValueMemberSeq_out &
-IR::ValueMemberSeq_out::operator= (const ::IR::ValueMemberSeq_out &p)
+ACE_INLINE ::IR_ValueMemberSeq_out &
+IR_ValueMemberSeq_out::operator= (const ::IR_ValueMemberSeq_out &p)
 {
-  this->ptr_ = ACE_const_cast (ValueMemberSeq_out&, p).ptr_;
+  this->ptr_ = ACE_const_cast (IR_ValueMemberSeq_out&, p).ptr_;
   return *this;
 }
 
-ACE_INLINE ::IR::ValueMemberSeq_out &
-IR::ValueMemberSeq_out::operator= (ValueMemberSeq *p)
+ACE_INLINE ::IR_ValueMemberSeq_out &
+IR_ValueMemberSeq_out::operator= (IR_ValueMemberSeq *p)
 {
   this->ptr_ = p;
   return *this;
 }
 
 ACE_INLINE 
-IR::ValueMemberSeq_out::operator ::IR::ValueMemberSeq *&() // cast
+IR_ValueMemberSeq_out::operator ::IR_ValueMemberSeq *&() // cast
 {
   return this->ptr_;
 }
 
-ACE_INLINE ::IR::ValueMemberSeq *&
-IR::ValueMemberSeq_out::ptr (void) // ptr
+ACE_INLINE ::IR_ValueMemberSeq *&
+IR_ValueMemberSeq_out::ptr (void) // ptr
 {
   return this->ptr_;
 }
 
-ACE_INLINE ::IR::ValueMemberSeq *
-IR::ValueMemberSeq_out::operator-> (void)
+ACE_INLINE ::IR_ValueMemberSeq *
+IR_ValueMemberSeq_out::operator-> (void)
 {
   return this->ptr_;
 }
 
-ACE_INLINE IR::ValueMember &
-IR::ValueMemberSeq_out::operator[] (CORBA::ULong index)
+ACE_INLINE IR_ValueMember &
+IR_ValueMemberSeq_out::operator[] (CORBA::ULong index)
 {
   return this->ptr_->operator[] (index);
 }
 
-
-#endif /* end #if !defined */
-
-
-#if !defined (_IR_VALUEMEMBERDEF___CI_)
-#define _IR_VALUEMEMBERDEF___CI_
-
 ACE_INLINE
-IR::ValueMemberDef::ValueMemberDef (
+IR_ValueMemberDef::IR_ValueMemberDef (
     TAO_Stub *objref,
     CORBA::Boolean _tao_collocated,
     TAO_Abstract_ServantBase *servant
@@ -18653,217 +17558,201 @@
   this->IR_ValueMemberDef_setup_collocation (_tao_collocated);
 }
 
-#endif /* end #if !defined */
-
-
-#if !defined (_IR_VALUEMEMBERDEF___VAR_CI_)
-#define _IR_VALUEMEMBERDEF___VAR_CI_
-
 // *************************************************************
-// Inline operations for class IR::ValueMemberDef_var
+// Inline operations for class IR_ValueMemberDef_var
 // *************************************************************
 
 ACE_INLINE
-IR::ValueMemberDef_var::ValueMemberDef_var (void) // default constructor
-  : ptr_ (ValueMemberDef::_nil ())
+IR_ValueMemberDef_var::IR_ValueMemberDef_var (void) // default constructor
+  : ptr_ (IR_ValueMemberDef::_nil ())
 {}
 
-ACE_INLINE ::IR::ValueMemberDef_ptr
-IR::ValueMemberDef_var::ptr (void) const
+ACE_INLINE ::IR_ValueMemberDef_ptr
+IR_ValueMemberDef_var::ptr (void) const
 {
   return this->ptr_;
 }
 
 ACE_INLINE
-IR::ValueMemberDef_var::ValueMemberDef_var (const ::IR::ValueMemberDef_var &p) // copy constructor
+IR_ValueMemberDef_var::IR_ValueMemberDef_var (const ::IR_ValueMemberDef_var &p) // copy constructor
   : TAO_Base_var (),
-    ptr_ (ValueMemberDef::_duplicate (p.ptr ()))
+    ptr_ (IR_ValueMemberDef::_duplicate (p.ptr ()))
 {}
 
 ACE_INLINE
-IR::ValueMemberDef_var::~ValueMemberDef_var (void) // destructor
+IR_ValueMemberDef_var::~IR_ValueMemberDef_var (void) // destructor
 {
   CORBA::release (this->ptr_);
 }
 
-ACE_INLINE IR::ValueMemberDef_var &
-IR::ValueMemberDef_var::operator= (ValueMemberDef_ptr p)
+ACE_INLINE IR_ValueMemberDef_var &
+IR_ValueMemberDef_var::operator= (IR_ValueMemberDef_ptr p)
 {
   CORBA::release (this->ptr_);
   this->ptr_ = p;
   return *this;
 }
 
-ACE_INLINE IR::ValueMemberDef_var &
-IR::ValueMemberDef_var::operator= (const ::IR::ValueMemberDef_var &p)
+ACE_INLINE IR_ValueMemberDef_var &
+IR_ValueMemberDef_var::operator= (const ::IR_ValueMemberDef_var &p)
 {
   if (this != &p)
   {
     CORBA::release (this->ptr_);
-    this->ptr_ = ::IR::ValueMemberDef::_duplicate (p.ptr ());
+    this->ptr_ = ::IR_ValueMemberDef::_duplicate (p.ptr ());
   }
   return *this;
 }
 
 ACE_INLINE 
-IR::ValueMemberDef_var::operator const ::IR::ValueMemberDef_ptr &() const // cast
+IR_ValueMemberDef_var::operator const ::IR_ValueMemberDef_ptr &() const // cast
 {
   return this->ptr_;
 }
 
 ACE_INLINE 
-IR::ValueMemberDef_var::operator ::IR::ValueMemberDef_ptr &() // cast 
+IR_ValueMemberDef_var::operator ::IR_ValueMemberDef_ptr &() // cast 
 {
   return this->ptr_;
 }
 
-ACE_INLINE ::IR::ValueMemberDef_ptr
-IR::ValueMemberDef_var::operator-> (void) const
+ACE_INLINE ::IR_ValueMemberDef_ptr
+IR_ValueMemberDef_var::operator-> (void) const
 {
   return this->ptr_;
 }
 
-ACE_INLINE ::IR::ValueMemberDef_ptr
-IR::ValueMemberDef_var::in (void) const
+ACE_INLINE ::IR_ValueMemberDef_ptr
+IR_ValueMemberDef_var::in (void) const
 {
   return this->ptr_;
 }
 
-ACE_INLINE ::IR::ValueMemberDef_ptr &
-IR::ValueMemberDef_var::inout (void)
+ACE_INLINE ::IR_ValueMemberDef_ptr &
+IR_ValueMemberDef_var::inout (void)
 {
   return this->ptr_;
 }
 
-ACE_INLINE ::IR::ValueMemberDef_ptr &
-IR::ValueMemberDef_var::out (void)
+ACE_INLINE ::IR_ValueMemberDef_ptr &
+IR_ValueMemberDef_var::out (void)
 {
   CORBA::release (this->ptr_);
-  this->ptr_ = ::IR::ValueMemberDef::_nil ();
+  this->ptr_ = ::IR_ValueMemberDef::_nil ();
   return this->ptr_;
 }
 
-ACE_INLINE ::IR::ValueMemberDef_ptr
-IR::ValueMemberDef_var::_retn (void)
+ACE_INLINE ::IR_ValueMemberDef_ptr
+IR_ValueMemberDef_var::_retn (void)
 {
   // yield ownership of managed obj reference
-  ::IR::ValueMemberDef_ptr val = this->ptr_;
-  this->ptr_ = ::IR::ValueMemberDef::_nil ();
+  ::IR_ValueMemberDef_ptr val = this->ptr_;
+  this->ptr_ = ::IR_ValueMemberDef::_nil ();
   return val;
 }
 
-
-#endif /* end #if !defined */
-
-
-#if !defined (_IR_VALUEMEMBERDEF___OUT_CI_)
-#define _IR_VALUEMEMBERDEF___OUT_CI_
-
 // *************************************************************
-// Inline operations for class IR::ValueMemberDef_out
+// Inline operations for class IR_ValueMemberDef_out
 // *************************************************************
 
 ACE_INLINE
-IR::ValueMemberDef_out::ValueMemberDef_out (ValueMemberDef_ptr &p)
+IR_ValueMemberDef_out::IR_ValueMemberDef_out (IR_ValueMemberDef_ptr &p)
   : ptr_ (p)
 {
-  this->ptr_ = ::IR::ValueMemberDef::_nil ();
+  this->ptr_ = ::IR_ValueMemberDef::_nil ();
 }
 
 ACE_INLINE
-IR::ValueMemberDef_out::ValueMemberDef_out (ValueMemberDef_var &p) // constructor from _var
+IR_ValueMemberDef_out::IR_ValueMemberDef_out (IR_ValueMemberDef_var &p) // constructor from _var
   : ptr_ (p.out ())
 {
   CORBA::release (this->ptr_);
-  this->ptr_ = ::IR::ValueMemberDef::_nil ();
+  this->ptr_ = ::IR_ValueMemberDef::_nil ();
 }
 
 ACE_INLINE
-IR::ValueMemberDef_out::ValueMemberDef_out (const ::IR::ValueMemberDef_out &p) // copy constructor
-  : ptr_ (ACE_const_cast (ValueMemberDef_out &, p).ptr_)
+IR_ValueMemberDef_out::IR_ValueMemberDef_out (const ::IR_ValueMemberDef_out &p) // copy constructor
+  : ptr_ (ACE_const_cast (IR_ValueMemberDef_out &, p).ptr_)
 {}
 
-ACE_INLINE ::IR::ValueMemberDef_out &
-IR::ValueMemberDef_out::operator= (const ::IR::ValueMemberDef_out &p)
+ACE_INLINE ::IR_ValueMemberDef_out &
+IR_ValueMemberDef_out::operator= (const ::IR_ValueMemberDef_out &p)
 {
-  this->ptr_ = ACE_const_cast (ValueMemberDef_out&, p).ptr_;
+  this->ptr_ = ACE_const_cast (IR_ValueMemberDef_out&, p).ptr_;
   return *this;
 }
 
-ACE_INLINE IR::ValueMemberDef_out &
-IR::ValueMemberDef_out::operator= (const ::IR::ValueMemberDef_var &p)
+ACE_INLINE IR_ValueMemberDef_out &
+IR_ValueMemberDef_out::operator= (const ::IR_ValueMemberDef_var &p)
 {
-  this->ptr_ = ::IR::ValueMemberDef::_duplicate (p.ptr ());
+  this->ptr_ = ::IR_ValueMemberDef::_duplicate (p.ptr ());
   return *this;
 }
 
-ACE_INLINE IR::ValueMemberDef_out &
-IR::ValueMemberDef_out::operator= (ValueMemberDef_ptr p)
+ACE_INLINE IR_ValueMemberDef_out &
+IR_ValueMemberDef_out::operator= (IR_ValueMemberDef_ptr p)
 {
   this->ptr_ = p;
   return *this;
 }
 
 ACE_INLINE 
-IR::ValueMemberDef_out::operator ::IR::ValueMemberDef_ptr &() // cast
+IR_ValueMemberDef_out::operator ::IR_ValueMemberDef_ptr &() // cast
 {
   return this->ptr_;
 }
 
-ACE_INLINE ::IR::ValueMemberDef_ptr &
-IR::ValueMemberDef_out::ptr (void) // ptr
+ACE_INLINE ::IR_ValueMemberDef_ptr &
+IR_ValueMemberDef_out::ptr (void) // ptr
 {
   return this->ptr_;
 }
 
-ACE_INLINE ::IR::ValueMemberDef_ptr
-IR::ValueMemberDef_out::operator-> (void)
+ACE_INLINE ::IR_ValueMemberDef_ptr
+IR_ValueMemberDef_out::operator-> (void)
 {
   return this->ptr_;
 }
 
-
-#endif /* end #if !defined */
-
 // *************************************************************
-// Inline operations for class IR::ValueDescription_var
+// Inline operations for class IR_ValueDescription_var
 // *************************************************************
 
 ACE_INLINE
-IR::ValueDescription_var::ValueDescription_var (void) // default constructor
+IR_ValueDescription_var::IR_ValueDescription_var (void) // default constructor
   : ptr_ (0)
 {}
 
 ACE_INLINE
-IR::ValueDescription_var::ValueDescription_var (ValueDescription *p)
+IR_ValueDescription_var::IR_ValueDescription_var (IR_ValueDescription *p)
   : ptr_ (p)
 {}
 
 ACE_INLINE
-IR::ValueDescription_var::ValueDescription_var (const ::IR::ValueDescription_var &p) // copy constructor
+IR_ValueDescription_var::IR_ValueDescription_var (const ::IR_ValueDescription_var &p) // copy constructor
 {
   if (p.ptr_)
-    ACE_NEW (this->ptr_, ::IR::ValueDescription (*p.ptr_));
+    ACE_NEW (this->ptr_, ::IR_ValueDescription (*p.ptr_));
   else
     this->ptr_ = 0;
 }
 
 ACE_INLINE
-IR::ValueDescription_var::~ValueDescription_var (void) // destructor
+IR_ValueDescription_var::~IR_ValueDescription_var (void) // destructor
 {
   delete this->ptr_;
 }
 
-ACE_INLINE IR::ValueDescription_var &
-IR::ValueDescription_var::operator= (ValueDescription *p)
+ACE_INLINE IR_ValueDescription_var &
+IR_ValueDescription_var::operator= (IR_ValueDescription *p)
 {
   delete this->ptr_;
   this->ptr_ = p;
   return *this;
 }
 
-ACE_INLINE ::IR::ValueDescription_var &
-IR::ValueDescription_var::operator= (const ::IR::ValueDescription_var &p)
+ACE_INLINE ::IR_ValueDescription_var &
+IR_ValueDescription_var::operator= (const ::IR_ValueDescription_var &p)
 {
   if (this != &p)
     {
@@ -18874,12 +17763,12 @@
         }
       else
         {
-          ValueDescription *deep_copy =
-            new ValueDescription (*p.ptr_);
+          IR_ValueDescription *deep_copy = 
+            new IR_ValueDescription (*p.ptr_);
           
           if (deep_copy != 0)
             {
-              ValueDescription *tmp = deep_copy;
+              IR_ValueDescription *tmp = deep_copy;
               deep_copy = this->ptr_;
               this->ptr_ = tmp;
               delete deep_copy;
@@ -18890,91 +17779,91 @@
   return *this;
 }
 
-ACE_INLINE const ::IR::ValueDescription *
-IR::ValueDescription_var::operator-> (void) const
+ACE_INLINE const ::IR_ValueDescription *
+IR_ValueDescription_var::operator-> (void) const
 {
   return this->ptr_;
 }
 
-ACE_INLINE ::IR::ValueDescription *
-IR::ValueDescription_var::operator-> (void)
+ACE_INLINE ::IR_ValueDescription *
+IR_ValueDescription_var::operator-> (void)
 {
   return this->ptr_;
 }
 
 ACE_INLINE
-IR::ValueDescription_var::operator const ::IR::ValueDescription &() const // cast
+IR_ValueDescription_var::operator const ::IR_ValueDescription &() const // cast
 {
   return *this->ptr_;
 }
 
 ACE_INLINE
-IR::ValueDescription_var::operator ::IR::ValueDescription &() // cast 
+IR_ValueDescription_var::operator ::IR_ValueDescription &() // cast 
 {
   return *this->ptr_;
 }
 
 ACE_INLINE
-IR::ValueDescription_var::operator ::IR::ValueDescription &() const // cast 
+IR_ValueDescription_var::operator ::IR_ValueDescription &() const // cast 
 {
   return *this->ptr_;
 }
 
 // variable-size types only
 ACE_INLINE
-IR::ValueDescription_var::operator ::IR::ValueDescription *&() // cast 
+IR_ValueDescription_var::operator ::IR_ValueDescription *&() // cast 
 {
   return this->ptr_;
 }
 
-ACE_INLINE const ::IR::ValueDescription &
-IR::ValueDescription_var::in (void) const
+ACE_INLINE const ::IR_ValueDescription &
+IR_ValueDescription_var::in (void) const
 {
   return *this->ptr_;
 }
 
-ACE_INLINE ::IR::ValueDescription &
-IR::ValueDescription_var::inout (void)
+ACE_INLINE ::IR_ValueDescription &
+IR_ValueDescription_var::inout (void)
 {
   return *this->ptr_;
 }
 
 // mapping for variable size 
-ACE_INLINE ::IR::ValueDescription *&
-IR::ValueDescription_var::out (void)
+ACE_INLINE ::IR_ValueDescription *&
+IR_ValueDescription_var::out (void)
 {
   delete this->ptr_;
   this->ptr_ = 0;
   return this->ptr_;
 }
 
-ACE_INLINE ::IR::ValueDescription *
-IR::ValueDescription_var::_retn (void)
+ACE_INLINE ::IR_ValueDescription *
+IR_ValueDescription_var::_retn (void)
 {
-  ::IR::ValueDescription *tmp = this->ptr_;
+  ::IR_ValueDescription *tmp = this->ptr_;
   this->ptr_ = 0;
   return tmp;
 }
 
-ACE_INLINE ::IR::ValueDescription *
-IR::ValueDescription_var::ptr (void) const
+ACE_INLINE ::IR_ValueDescription *
+IR_ValueDescription_var::ptr (void) const
 {
   return this->ptr_;
 }
 
 // *************************************************************
-// Inline operations for class IR::ValueDescription_out
+// Inline operations for class IR_ValueDescription_out
 // *************************************************************
 
 ACE_INLINE
-IR::ValueDescription_out::ValueDescription_out (::IR::ValueDescription *&p)
+IR_ValueDescription_out::IR_ValueDescription_out (::IR_ValueDescription *&p)
   : ptr_ (p)
 {
   this->ptr_ = 0;
 }
 
 ACE_INLINE
-IR::ValueDescription_out::ValueDescription_out (ValueDescription_var &p) // constructor from _var
+IR_ValueDescription_out::IR_ValueDescription_out (IR_ValueDescription_var &p) // constructor from _var
   : ptr_ (p.out ())
 {
   delete this->ptr_;
@@ -18982,81 +17871,81 @@
 }
 
 ACE_INLINE
-IR::ValueDescription_out::ValueDescription_out (const ::IR::ValueDescription_out &p) // copy constructor
-  : ptr_ (ACE_const_cast (ValueDescription_out&, p).ptr_)
+IR_ValueDescription_out::IR_ValueDescription_out (const ::IR_ValueDescription_out &p) // copy constructor
+  : ptr_ (ACE_const_cast (IR_ValueDescription_out&, p).ptr_)
 {}
 
-ACE_INLINE IR::ValueDescription_out &
-IR::ValueDescription_out::operator= (const ::IR::ValueDescription_out &p)
+ACE_INLINE IR_ValueDescription_out &
+IR_ValueDescription_out::operator= (const ::IR_ValueDescription_out &p)
 {
-  this->ptr_ = ACE_const_cast (ValueDescription_out&, p).ptr_;
+  this->ptr_ = ACE_const_cast (IR_ValueDescription_out&, p).ptr_;
   return *this;
 }
 
-ACE_INLINE IR::ValueDescription_out &
-IR::ValueDescription_out::operator= (ValueDescription *p)
+ACE_INLINE IR_ValueDescription_out &
+IR_ValueDescription_out::operator= (IR_ValueDescription *p)
 {
   this->ptr_ = p;
   return *this;
 }
 
 ACE_INLINE 
-IR::ValueDescription_out::operator ::IR::ValueDescription *&() // cast
+IR_ValueDescription_out::operator ::IR_ValueDescription *&() // cast
 {
   return this->ptr_;
 }
 
-ACE_INLINE ::IR::ValueDescription *&
-IR::ValueDescription_out::ptr (void) // ptr
+ACE_INLINE ::IR_ValueDescription *&
+IR_ValueDescription_out::ptr (void) // ptr
 {
   return this->ptr_;
 }
 
-ACE_INLINE ::IR::ValueDescription *
-IR::ValueDescription_out::operator-> (void)
+ACE_INLINE ::IR_ValueDescription *
+IR_ValueDescription_out::operator-> (void)
 {
   return this->ptr_;
 }
 
 // *************************************************************
-// Inline operations for class IR::ProvidesDescription_var
+// Inline operations for class IR_ProvidesDescription_var
 // *************************************************************
 
 ACE_INLINE
-IR::ProvidesDescription_var::ProvidesDescription_var (void) // default constructor
+IR_ProvidesDescription_var::IR_ProvidesDescription_var (void) // default constructor
   : ptr_ (0)
 {}
 
 ACE_INLINE
-IR::ProvidesDescription_var::ProvidesDescription_var (ProvidesDescription *p)
+IR_ProvidesDescription_var::IR_ProvidesDescription_var (IR_ProvidesDescription *p)
   : ptr_ (p)
 {}
 
 ACE_INLINE
-IR::ProvidesDescription_var::ProvidesDescription_var (const ::IR::ProvidesDescription_var &p) // copy constructor
+IR_ProvidesDescription_var::IR_ProvidesDescription_var (const ::IR_ProvidesDescription_var &p) // copy constructor
 {
   if (p.ptr_)
-    ACE_NEW (this->ptr_, ::IR::ProvidesDescription (*p.ptr_));
+    ACE_NEW (this->ptr_, ::IR_ProvidesDescription (*p.ptr_));
   else
     this->ptr_ = 0;
 }
 
 ACE_INLINE
-IR::ProvidesDescription_var::~ProvidesDescription_var (void) // destructor
+IR_ProvidesDescription_var::~IR_ProvidesDescription_var (void) // destructor
 {
   delete this->ptr_;
 }
 
-ACE_INLINE IR::ProvidesDescription_var &
-IR::ProvidesDescription_var::operator= (ProvidesDescription *p)
+ACE_INLINE IR_ProvidesDescription_var &
+IR_ProvidesDescription_var::operator= (IR_ProvidesDescription *p)
 {
   delete this->ptr_;
   this->ptr_ = p;
   return *this;
 }
 
-ACE_INLINE ::IR::ProvidesDescription_var &
-IR::ProvidesDescription_var::operator= (const ::IR::ProvidesDescription_var &p)
+ACE_INLINE ::IR_ProvidesDescription_var &
+IR_ProvidesDescription_var::operator= (const ::IR_ProvidesDescription_var &p)
 {
   if (this != &p)
     {
@@ -19067,12 +17956,12 @@
         }
       else
         {
-          ProvidesDescription *deep_copy =
-            new ProvidesDescription (*p.ptr_);
+          IR_ProvidesDescription *deep_copy = 
+            new IR_ProvidesDescription (*p.ptr_);
           
           if (deep_copy != 0)
             {
-              ProvidesDescription *tmp = deep_copy;
+              IR_ProvidesDescription *tmp = deep_copy;
               deep_copy = this->ptr_;
               this->ptr_ = tmp;
               delete deep_copy;
@@ -19083,91 +17972,91 @@
   return *this;
 }
 
-ACE_INLINE const ::IR::ProvidesDescription *
-IR::ProvidesDescription_var::operator-> (void) const
+ACE_INLINE const ::IR_ProvidesDescription *
+IR_ProvidesDescription_var::operator-> (void) const
 {
   return this->ptr_;
 }
 
-ACE_INLINE ::IR::ProvidesDescription *
-IR::ProvidesDescription_var::operator-> (void)
+ACE_INLINE ::IR_ProvidesDescription *
+IR_ProvidesDescription_var::operator-> (void)
 {
   return this->ptr_;
 }
 
 ACE_INLINE
-IR::ProvidesDescription_var::operator const ::IR::ProvidesDescription &() const // cast
+IR_ProvidesDescription_var::operator const ::IR_ProvidesDescription &() const // cast
 {
   return *this->ptr_;
 }
 
 ACE_INLINE
-IR::ProvidesDescription_var::operator ::IR::ProvidesDescription &() // cast 
+IR_ProvidesDescription_var::operator ::IR_ProvidesDescription &() // cast 
 {
   return *this->ptr_;
 }
 
 ACE_INLINE
-IR::ProvidesDescription_var::operator ::IR::ProvidesDescription &() const // cast 
+IR_ProvidesDescription_var::operator ::IR_ProvidesDescription &() const // cast 
 {
   return *this->ptr_;
 }
 
 // variable-size types only
 ACE_INLINE
-IR::ProvidesDescription_var::operator ::IR::ProvidesDescription *&() // cast 
+IR_ProvidesDescription_var::operator ::IR_ProvidesDescription *&() // cast 
 {
   return this->ptr_;
 }
 
-ACE_INLINE const ::IR::ProvidesDescription &
-IR::ProvidesDescription_var::in (void) const
+ACE_INLINE const ::IR_ProvidesDescription &
+IR_ProvidesDescription_var::in (void) const
 {
   return *this->ptr_;
 }
 
-ACE_INLINE ::IR::ProvidesDescription &
-IR::ProvidesDescription_var::inout (void)
+ACE_INLINE ::IR_ProvidesDescription &
+IR_ProvidesDescription_var::inout (void)
 {
   return *this->ptr_;
 }
 
 // mapping for variable size 
-ACE_INLINE ::IR::ProvidesDescription *&
-IR::ProvidesDescription_var::out (void)
+ACE_INLINE ::IR_ProvidesDescription *&
+IR_ProvidesDescription_var::out (void)
 {
   delete this->ptr_;
   this->ptr_ = 0;
   return this->ptr_;
 }
 
-ACE_INLINE ::IR::ProvidesDescription *
-IR::ProvidesDescription_var::_retn (void)
+ACE_INLINE ::IR_ProvidesDescription *
+IR_ProvidesDescription_var::_retn (void)
 {
-  ::IR::ProvidesDescription *tmp = this->ptr_;
+  ::IR_ProvidesDescription *tmp = this->ptr_;
   this->ptr_ = 0;
   return tmp;
 }
 
-ACE_INLINE ::IR::ProvidesDescription *
-IR::ProvidesDescription_var::ptr (void) const
+ACE_INLINE ::IR_ProvidesDescription *
+IR_ProvidesDescription_var::ptr (void) const
 {
   return this->ptr_;
 }
 
 // *************************************************************
-// Inline operations for class IR::ProvidesDescription_out
+// Inline operations for class IR_ProvidesDescription_out
 // *************************************************************
 
 ACE_INLINE
-IR::ProvidesDescription_out::ProvidesDescription_out (::IR::ProvidesDescription *&p)
+IR_ProvidesDescription_out::IR_ProvidesDescription_out (::IR_ProvidesDescription *&p)
   : ptr_ (p)
 {
   this->ptr_ = 0;
 }
 
 ACE_INLINE
-IR::ProvidesDescription_out::ProvidesDescription_out (ProvidesDescription_var &p) // constructor from _var
+IR_ProvidesDescription_out::IR_ProvidesDescription_out (IR_ProvidesDescription_var &p) // constructor from _var
   : ptr_ (p.out ())
 {
   delete this->ptr_;
@@ -19175,81 +18064,81 @@
 }
 
 ACE_INLINE
-IR::ProvidesDescription_out::ProvidesDescription_out (const ::IR::ProvidesDescription_out &p) // copy constructor
-  : ptr_ (ACE_const_cast (ProvidesDescription_out&, p).ptr_)
+IR_ProvidesDescription_out::IR_ProvidesDescription_out (const ::IR_ProvidesDescription_out &p) // copy constructor
+  : ptr_ (ACE_const_cast (IR_ProvidesDescription_out&, p).ptr_)
 {}
 
-ACE_INLINE IR::ProvidesDescription_out &
-IR::ProvidesDescription_out::operator= (const ::IR::ProvidesDescription_out &p)
+ACE_INLINE IR_ProvidesDescription_out &
+IR_ProvidesDescription_out::operator= (const ::IR_ProvidesDescription_out &p)
 {
-  this->ptr_ = ACE_const_cast (ProvidesDescription_out&, p).ptr_;
+  this->ptr_ = ACE_const_cast (IR_ProvidesDescription_out&, p).ptr_;
   return *this;
 }
 
-ACE_INLINE IR::ProvidesDescription_out &
-IR::ProvidesDescription_out::operator= (ProvidesDescription *p)
+ACE_INLINE IR_ProvidesDescription_out &
+IR_ProvidesDescription_out::operator= (IR_ProvidesDescription *p)
 {
   this->ptr_ = p;
   return *this;
 }
 
 ACE_INLINE 
-IR::ProvidesDescription_out::operator ::IR::ProvidesDescription *&() // cast
+IR_ProvidesDescription_out::operator ::IR_ProvidesDescription *&() // cast
 {
   return this->ptr_;
 }
 
-ACE_INLINE ::IR::ProvidesDescription *&
-IR::ProvidesDescription_out::ptr (void) // ptr
+ACE_INLINE ::IR_ProvidesDescription *&
+IR_ProvidesDescription_out::ptr (void) // ptr
 {
   return this->ptr_;
 }
 
-ACE_INLINE ::IR::ProvidesDescription *
-IR::ProvidesDescription_out::operator-> (void)
+ACE_INLINE ::IR_ProvidesDescription *
+IR_ProvidesDescription_out::operator-> (void)
 {
   return this->ptr_;
 }
 
 // *************************************************************
-// Inline operations for class IR::UsesDescription_var
+// Inline operations for class IR_UsesDescription_var
 // *************************************************************
 
 ACE_INLINE
-IR::UsesDescription_var::UsesDescription_var (void) // default constructor
+IR_UsesDescription_var::IR_UsesDescription_var (void) // default constructor
   : ptr_ (0)
 {}
 
 ACE_INLINE
-IR::UsesDescription_var::UsesDescription_var (UsesDescription *p)
+IR_UsesDescription_var::IR_UsesDescription_var (IR_UsesDescription *p)
   : ptr_ (p)
 {}
 
 ACE_INLINE
-IR::UsesDescription_var::UsesDescription_var (const ::IR::UsesDescription_var &p) // copy constructor
+IR_UsesDescription_var::IR_UsesDescription_var (const ::IR_UsesDescription_var &p) // copy constructor
 {
   if (p.ptr_)
-    ACE_NEW (this->ptr_, ::IR::UsesDescription (*p.ptr_));
+    ACE_NEW (this->ptr_, ::IR_UsesDescription (*p.ptr_));
   else
     this->ptr_ = 0;
 }
 
 ACE_INLINE
-IR::UsesDescription_var::~UsesDescription_var (void) // destructor
+IR_UsesDescription_var::~IR_UsesDescription_var (void) // destructor
 {
   delete this->ptr_;
 }
 
-ACE_INLINE IR::UsesDescription_var &
-IR::UsesDescription_var::operator= (UsesDescription *p)
+ACE_INLINE IR_UsesDescription_var &
+IR_UsesDescription_var::operator= (IR_UsesDescription *p)
 {
   delete this->ptr_;
   this->ptr_ = p;
   return *this;
 }
 
-ACE_INLINE ::IR::UsesDescription_var &
-IR::UsesDescription_var::operator= (const ::IR::UsesDescription_var &p)
+ACE_INLINE ::IR_UsesDescription_var &
+IR_UsesDescription_var::operator= (const ::IR_UsesDescription_var &p)
 {
   if (this != &p)
     {
@@ -19260,12 +18149,12 @@
         }
       else
         {
-          UsesDescription *deep_copy =
-            new UsesDescription (*p.ptr_);
+          IR_UsesDescription *deep_copy = 
+            new IR_UsesDescription (*p.ptr_);
           
           if (deep_copy != 0)
             {
-              UsesDescription *tmp = deep_copy;
+              IR_UsesDescription *tmp = deep_copy;
               deep_copy = this->ptr_;
               this->ptr_ = tmp;
               delete deep_copy;
@@ -19276,91 +18165,91 @@
   return *this;
 }
 
-ACE_INLINE const ::IR::UsesDescription *
-IR::UsesDescription_var::operator-> (void) const
+ACE_INLINE const ::IR_UsesDescription *
+IR_UsesDescription_var::operator-> (void) const
 {
   return this->ptr_;
 }
 
-ACE_INLINE ::IR::UsesDescription *
-IR::UsesDescription_var::operator-> (void)
+ACE_INLINE ::IR_UsesDescription *
+IR_UsesDescription_var::operator-> (void)
 {
   return this->ptr_;
 }
 
 ACE_INLINE
-IR::UsesDescription_var::operator const ::IR::UsesDescription &() const // cast
+IR_UsesDescription_var::operator const ::IR_UsesDescription &() const // cast
 {
   return *this->ptr_;
 }
 
 ACE_INLINE
-IR::UsesDescription_var::operator ::IR::UsesDescription &() // cast 
+IR_UsesDescription_var::operator ::IR_UsesDescription &() // cast 
 {
   return *this->ptr_;
 }
 
 ACE_INLINE
-IR::UsesDescription_var::operator ::IR::UsesDescription &() const // cast 
+IR_UsesDescription_var::operator ::IR_UsesDescription &() const // cast 
 {
   return *this->ptr_;
 }
 
 // variable-size types only
 ACE_INLINE
-IR::UsesDescription_var::operator ::IR::UsesDescription *&() // cast 
+IR_UsesDescription_var::operator ::IR_UsesDescription *&() // cast 
 {
   return this->ptr_;
 }
 
-ACE_INLINE const ::IR::UsesDescription &
-IR::UsesDescription_var::in (void) const
+ACE_INLINE const ::IR_UsesDescription &
+IR_UsesDescription_var::in (void) const
 {
   return *this->ptr_;
 }
 
-ACE_INLINE ::IR::UsesDescription &
-IR::UsesDescription_var::inout (void)
+ACE_INLINE ::IR_UsesDescription &
+IR_UsesDescription_var::inout (void)
 {
   return *this->ptr_;
 }
 
 // mapping for variable size 
-ACE_INLINE ::IR::UsesDescription *&
-IR::UsesDescription_var::out (void)
+ACE_INLINE ::IR_UsesDescription *&
+IR_UsesDescription_var::out (void)
 {
   delete this->ptr_;
   this->ptr_ = 0;
   return this->ptr_;
 }
 
-ACE_INLINE ::IR::UsesDescription *
-IR::UsesDescription_var::_retn (void)
+ACE_INLINE ::IR_UsesDescription *
+IR_UsesDescription_var::_retn (void)
 {
-  ::IR::UsesDescription *tmp = this->ptr_;
+  ::IR_UsesDescription *tmp = this->ptr_;
   this->ptr_ = 0;
   return tmp;
 }
 
-ACE_INLINE ::IR::UsesDescription *
-IR::UsesDescription_var::ptr (void) const
+ACE_INLINE ::IR_UsesDescription *
+IR_UsesDescription_var::ptr (void) const
 {
   return this->ptr_;
 }
 
 // *************************************************************
-// Inline operations for class IR::UsesDescription_out
+// Inline operations for class IR_UsesDescription_out
 // *************************************************************
 
 ACE_INLINE
-IR::UsesDescription_out::UsesDescription_out (::IR::UsesDescription *&p)
+IR_UsesDescription_out::IR_UsesDescription_out (::IR_UsesDescription *&p)
   : ptr_ (p)
 {
   this->ptr_ = 0;
 }
 
 ACE_INLINE
-IR::UsesDescription_out::UsesDescription_out (UsesDescription_var &p) // constructor from _var
+IR_UsesDescription_out::IR_UsesDescription_out (IR_UsesDescription_var &p) // constructor from _var
   : ptr_ (p.out ())
 {
   delete this->ptr_;
@@ -19368,93 +18257,89 @@
 }
 
 ACE_INLINE
-IR::UsesDescription_out::UsesDescription_out (const ::IR::UsesDescription_out &p) // copy constructor
-  : ptr_ (ACE_const_cast (UsesDescription_out&, p).ptr_)
+IR_UsesDescription_out::IR_UsesDescription_out (const ::IR_UsesDescription_out &p) // copy constructor
+  : ptr_ (ACE_const_cast (IR_UsesDescription_out&, p).ptr_)
 {}
 
-ACE_INLINE IR::UsesDescription_out &
-IR::UsesDescription_out::operator= (const ::IR::UsesDescription_out &p)
+ACE_INLINE IR_UsesDescription_out &
+IR_UsesDescription_out::operator= (const ::IR_UsesDescription_out &p)
 {
-  this->ptr_ = ACE_const_cast (UsesDescription_out&, p).ptr_;
+  this->ptr_ = ACE_const_cast (IR_UsesDescription_out&, p).ptr_;
   return *this;
 }
 
-ACE_INLINE IR::UsesDescription_out &
-IR::UsesDescription_out::operator= (UsesDescription *p)
+ACE_INLINE IR_UsesDescription_out &
+IR_UsesDescription_out::operator= (IR_UsesDescription *p)
 {
   this->ptr_ = p;
   return *this;
 }
 
 ACE_INLINE 
-IR::UsesDescription_out::operator ::IR::UsesDescription *&() // cast
+IR_UsesDescription_out::operator ::IR_UsesDescription *&() // cast
 {
   return this->ptr_;
 }
 
-ACE_INLINE ::IR::UsesDescription *&
-IR::UsesDescription_out::ptr (void) // ptr
+ACE_INLINE ::IR_UsesDescription *&
+IR_UsesDescription_out::ptr (void) // ptr
 {
   return this->ptr_;
 }
 
-ACE_INLINE ::IR::UsesDescription *
-IR::UsesDescription_out::operator-> (void)
+ACE_INLINE ::IR_UsesDescription *
+IR_UsesDescription_out::operator-> (void)
 {
   return this->ptr_;
 }
 
-
 #if !defined (TAO_USE_SEQUENCE_TEMPLATES)
   
-#if !defined (__TAO_UNBOUNDED_SEQUENCE_IR_PROVIDESDESCSEQ_CI_)
-#define __TAO_UNBOUNDED_SEQUENCE_IR_PROVIDESDESCSEQ_CI_
-
   // = Static operations.
-  ACE_INLINE IR::ProvidesDescription *
-  IR::_TAO_Unbounded_Sequence_IR_ProvidesDescSeq::allocbuf (CORBA::ULong size)
+  ACE_INLINE IR_ProvidesDescription *
+  _TAO_Unbounded_Sequence_IR_ProvidesDescSeq::allocbuf (CORBA::ULong size)
   // Allocate storage for the sequence.
   {
-    IR::ProvidesDescription *retval = 0;
-    ACE_NEW_RETURN (retval, IR::ProvidesDescription[size], 0);
+    IR_ProvidesDescription *retval = 0;
+    ACE_NEW_RETURN (retval, IR_ProvidesDescription[size], 0);
     return retval;
   }
   
-  ACE_INLINE void IR::_TAO_Unbounded_Sequence_IR_ProvidesDescSeq::freebuf (IR::ProvidesDescription *buffer)
+  ACE_INLINE void _TAO_Unbounded_Sequence_IR_ProvidesDescSeq::freebuf (IR_ProvidesDescription *buffer)
   // Free the sequence.
   {
     delete [] buffer;
   }
   
   ACE_INLINE
-  IR::_TAO_Unbounded_Sequence_IR_ProvidesDescSeq::_TAO_Unbounded_Sequence_IR_ProvidesDescSeq (void) // Default constructor.
+  _TAO_Unbounded_Sequence_IR_ProvidesDescSeq::_TAO_Unbounded_Sequence_IR_ProvidesDescSeq (void) // Default constructor.
   {
   }
   
   ACE_INLINE
-  IR::_TAO_Unbounded_Sequence_IR_ProvidesDescSeq::_TAO_Unbounded_Sequence_IR_ProvidesDescSeq (CORBA::ULong maximum) // Constructor using a maximum length value.
+  _TAO_Unbounded_Sequence_IR_ProvidesDescSeq::_TAO_Unbounded_Sequence_IR_ProvidesDescSeq (CORBA::ULong maximum) // Constructor using a maximum length value.
     : TAO_Unbounded_Base_Sequence (maximum, _TAO_Unbounded_Sequence_IR_ProvidesDescSeq::allocbuf (maximum))
   {
   }
   
   ACE_INLINE
-  IR::_TAO_Unbounded_Sequence_IR_ProvidesDescSeq::_TAO_Unbounded_Sequence_IR_ProvidesDescSeq (CORBA::ULong maximum,
+  _TAO_Unbounded_Sequence_IR_ProvidesDescSeq::_TAO_Unbounded_Sequence_IR_ProvidesDescSeq (CORBA::ULong maximum,
     CORBA::ULong length,
-    IR::ProvidesDescription *data,
+    IR_ProvidesDescription *data,
     CORBA::Boolean release)
   : TAO_Unbounded_Base_Sequence (maximum, length, data, release)
   {
   }
   
   ACE_INLINE
-  IR::_TAO_Unbounded_Sequence_IR_ProvidesDescSeq::_TAO_Unbounded_Sequence_IR_ProvidesDescSeq (const _TAO_Unbounded_Sequence_IR_ProvidesDescSeq &rhs)
+  _TAO_Unbounded_Sequence_IR_ProvidesDescSeq::_TAO_Unbounded_Sequence_IR_ProvidesDescSeq (const _TAO_Unbounded_Sequence_IR_ProvidesDescSeq &rhs)
   // Copy constructor.
     : TAO_Unbounded_Base_Sequence (rhs)
   {
     if (rhs.buffer_ != 0)
     {
-      IR::ProvidesDescription *tmp1 = _TAO_Unbounded_Sequence_IR_ProvidesDescSeq::allocbuf (this->maximum_);
-      IR::ProvidesDescription * const tmp2 = ACE_reinterpret_cast (IR::ProvidesDescription * ACE_CAST_CONST, rhs.buffer_);
+      IR_ProvidesDescription *tmp1 = _TAO_Unbounded_Sequence_IR_ProvidesDescSeq::allocbuf (this->maximum_);
+      IR_ProvidesDescription * const tmp2 = ACE_reinterpret_cast (IR_ProvidesDescription * ACE_CAST_CONST, rhs.buffer_);
       
       for (CORBA::ULong i = 0; i < this->length_; ++i)
         tmp1[i] = tmp2[i];
@@ -19467,8 +18352,8 @@
     }
   }
   
-  ACE_INLINE IR::_TAO_Unbounded_Sequence_IR_ProvidesDescSeq &
-  IR::_TAO_Unbounded_Sequence_IR_ProvidesDescSeq::operator= (const _TAO_Unbounded_Sequence_IR_ProvidesDescSeq &rhs)
+  ACE_INLINE _TAO_Unbounded_Sequence_IR_ProvidesDescSeq &
+  _TAO_Unbounded_Sequence_IR_ProvidesDescSeq::operator= (const _TAO_Unbounded_Sequence_IR_ProvidesDescSeq &rhs)
   // Assignment operator.
   {
     if (this == &rhs)
@@ -19479,7 +18364,7 @@
       if (this->maximum_ < rhs.maximum_)
       {
         // free the old buffer
-        IR::ProvidesDescription *tmp = ACE_reinterpret_cast (IR::ProvidesDescription *, this->buffer_);
+        IR_ProvidesDescription *tmp = ACE_reinterpret_cast (IR_ProvidesDescription *, this->buffer_);
         _TAO_Unbounded_Sequence_IR_ProvidesDescSeq::freebuf (tmp);
         this->buffer_ = _TAO_Unbounded_Sequence_IR_ProvidesDescSeq::allocbuf (rhs.maximum_);
       }
@@ -19489,8 +18374,8 @@
     
     TAO_Unbounded_Base_Sequence::operator= (rhs);
     
-    IR::ProvidesDescription *tmp1 = ACE_reinterpret_cast (IR::ProvidesDescription *, this->buffer_);
-    IR::ProvidesDescription * const tmp2 = ACE_reinterpret_cast (IR::ProvidesDescription * ACE_CAST_CONST, rhs.buffer_);
+    IR_ProvidesDescription *tmp1 = ACE_reinterpret_cast (IR_ProvidesDescription *, this->buffer_);
+    IR_ProvidesDescription * const tmp2 = ACE_reinterpret_cast (IR_ProvidesDescription * ACE_CAST_CONST, rhs.buffer_);
     
     for (CORBA::ULong i = 0; i < this->length_; ++i)
       tmp1[i] = tmp2[i];
@@ -19499,30 +18384,30 @@
   }
   
   // = Accessors.
-  ACE_INLINE IR::ProvidesDescription &
-  IR::_TAO_Unbounded_Sequence_IR_ProvidesDescSeq::operator[] (CORBA::ULong i)
+  ACE_INLINE IR_ProvidesDescription &
+  _TAO_Unbounded_Sequence_IR_ProvidesDescSeq::operator[] (CORBA::ULong i)
   // operator []
   {
     ACE_ASSERT (i < this->maximum_);
-    IR::ProvidesDescription* tmp = ACE_reinterpret_cast(IR::ProvidesDescription*,this->buffer_);
+    IR_ProvidesDescription* tmp = ACE_reinterpret_cast(IR_ProvidesDescription*,this->buffer_);
     return tmp[i];
   }
   
-  ACE_INLINE const IR::ProvidesDescription &
-  IR::_TAO_Unbounded_Sequence_IR_ProvidesDescSeq::operator[] (CORBA::ULong i) const
+  ACE_INLINE const IR_ProvidesDescription &
+  _TAO_Unbounded_Sequence_IR_ProvidesDescSeq::operator[] (CORBA::ULong i) const
   // operator []
   {
     ACE_ASSERT (i < this->maximum_);
-    IR::ProvidesDescription * const tmp = ACE_reinterpret_cast (IR::ProvidesDescription* ACE_CAST_CONST, this->buffer_);
+    IR_ProvidesDescription * const tmp = ACE_reinterpret_cast (IR_ProvidesDescription* ACE_CAST_CONST, this->buffer_);
     return tmp[i];
   }
   
   // Implement the TAO_Base_Sequence methods (see Sequence.h)
   
-  ACE_INLINE IR::ProvidesDescription *
-  IR::_TAO_Unbounded_Sequence_IR_ProvidesDescSeq::get_buffer (CORBA::Boolean orphan)
+  ACE_INLINE IR_ProvidesDescription *
+  _TAO_Unbounded_Sequence_IR_ProvidesDescSeq::get_buffer (CORBA::Boolean orphan)
   {
-    IR::ProvidesDescription *result = 0;
+    IR_ProvidesDescription *result = 0;
     if (orphan == 0)
     {
       // We retain ownership.
@@ -19534,7 +18419,7 @@
       }
       else
       {
-        result = ACE_reinterpret_cast (IR::ProvidesDescription*, this->buffer_);
+        result = ACE_reinterpret_cast (IR_ProvidesDescription*, this->buffer_);
       }
     }
     else // if (orphan == 1)
@@ -19543,7 +18428,7 @@
       {
         // We set the state back to default and relinquish
         // ownership.
-        result = ACE_reinterpret_cast(IR::ProvidesDescription*,this->buffer_);
+        result = ACE_reinterpret_cast(IR_ProvidesDescription*,this->buffer_);
         this->maximum_ = 0;
         this->length_ = 0;
         this->buffer_ = 0;
@@ -19553,76 +18438,70 @@
     return result;
   }
   
-  ACE_INLINE const IR::ProvidesDescription *
-  IR::_TAO_Unbounded_Sequence_IR_ProvidesDescSeq::get_buffer (void) const
+  ACE_INLINE const IR_ProvidesDescription *
+  _TAO_Unbounded_Sequence_IR_ProvidesDescSeq::get_buffer (void) const
   {
-    return ACE_reinterpret_cast(const IR::ProvidesDescription * ACE_CAST_CONST, this->buffer_);
+    return ACE_reinterpret_cast(const IR_ProvidesDescription * ACE_CAST_CONST, this->buffer_);
   }
   
   ACE_INLINE void
-  IR::_TAO_Unbounded_Sequence_IR_ProvidesDescSeq::replace (CORBA::ULong max,
+  _TAO_Unbounded_Sequence_IR_ProvidesDescSeq::replace (CORBA::ULong max,
   CORBA::ULong length,
-  IR::ProvidesDescription *data,
+  IR_ProvidesDescription *data,
   CORBA::Boolean release)
   {
     this->maximum_ = max;
     this->length_ = length;
     if (this->buffer_ && this->release_ == 1)
     {
-      IR::ProvidesDescription *tmp = ACE_reinterpret_cast(IR::ProvidesDescription*,this->buffer_);
+      IR_ProvidesDescription *tmp = ACE_reinterpret_cast(IR_ProvidesDescription*,this->buffer_);
       _TAO_Unbounded_Sequence_IR_ProvidesDescSeq::freebuf (tmp);
     }
     this->buffer_ = data;
     this->release_ = release;
   }
   
-#endif /* end #if !defined */
-
-
 #endif /* !TAO_USE_SEQUENCE_TEMPLATES */ 
 
-#if !defined (_IR_PROVIDESDESCSEQ_CI_)
-#define _IR_PROVIDESDESCSEQ_CI_
-
 // *************************************************************
-// Inline operations for class IR::ProvidesDescSeq_var
+// Inline operations for class IR_ProvidesDescSeq_var
 // *************************************************************
 
 ACE_INLINE
-IR::ProvidesDescSeq_var::ProvidesDescSeq_var (void) // default constructor
+IR_ProvidesDescSeq_var::IR_ProvidesDescSeq_var (void) // default constructor
   : ptr_ (0)
 {}
 
 ACE_INLINE
-IR::ProvidesDescSeq_var::ProvidesDescSeq_var (ProvidesDescSeq *p)
+IR_ProvidesDescSeq_var::IR_ProvidesDescSeq_var (IR_ProvidesDescSeq *p)
   : ptr_ (p)
 {}
 
 ACE_INLINE
-IR::ProvidesDescSeq_var::ProvidesDescSeq_var (const ::IR::ProvidesDescSeq_var &p) // copy constructor
+IR_ProvidesDescSeq_var::IR_ProvidesDescSeq_var (const ::IR_ProvidesDescSeq_var &p) // copy constructor
 {
   if (p.ptr_)
-    ACE_NEW (this->ptr_, ::IR::ProvidesDescSeq (*p.ptr_));
+    ACE_NEW (this->ptr_, ::IR_ProvidesDescSeq (*p.ptr_));
   else
     this->ptr_ = 0;
 }
 
 ACE_INLINE
-IR::ProvidesDescSeq_var::~ProvidesDescSeq_var (void) // destructor
+IR_ProvidesDescSeq_var::~IR_ProvidesDescSeq_var (void) // destructor
 {
   delete this->ptr_;
 }
 
-ACE_INLINE IR::ProvidesDescSeq_var &
-IR::ProvidesDescSeq_var::operator= (ProvidesDescSeq *p)
+ACE_INLINE IR_ProvidesDescSeq_var &
+IR_ProvidesDescSeq_var::operator= (IR_ProvidesDescSeq *p)
 {
   delete this->ptr_;
   this->ptr_ = p;
   return *this;
 }
 
-ACE_INLINE ::IR::ProvidesDescSeq_var &
-IR::ProvidesDescSeq_var::operator= (const ::IR::ProvidesDescSeq_var &p)
+ACE_INLINE IR_ProvidesDescSeq_var &
+IR_ProvidesDescSeq_var::operator= (const ::IR_ProvidesDescSeq_var &p) // deep copy
 {
   if (this != &p)
     {
@@ -19633,12 +18512,12 @@
         }
       else
         {
-          ProvidesDescSeq *deep_copy =
-            new ProvidesDescSeq (*p.ptr_);
+          IR_ProvidesDescSeq *deep_copy = 
+            new IR_ProvidesDescSeq (*p.ptr_);
           
           if (deep_copy != 0)
             {
-              ProvidesDescSeq *tmp = deep_copy;
+              IR_ProvidesDescSeq *tmp = deep_copy;
               deep_copy = this->ptr_;
               this->ptr_ = tmp;
               delete deep_copy;
@@ -19649,103 +18528,103 @@
   return *this;
 }
 
-ACE_INLINE const ::IR::ProvidesDescSeq *
-IR::ProvidesDescSeq_var::operator-> (void) const
+ACE_INLINE const ::IR_ProvidesDescSeq *
+IR_ProvidesDescSeq_var::operator-> (void) const
 {
   return this->ptr_;
 }
 
-ACE_INLINE ::IR::ProvidesDescSeq *
-IR::ProvidesDescSeq_var::operator-> (void)
+ACE_INLINE ::IR_ProvidesDescSeq *
+IR_ProvidesDescSeq_var::operator-> (void)
 {
   return this->ptr_;
 }
 
 ACE_INLINE 
-IR::ProvidesDescSeq_var::operator const ::IR::ProvidesDescSeq &() const // cast
+IR_ProvidesDescSeq_var::operator const ::IR_ProvidesDescSeq &() const // cast
 {
   return *this->ptr_;
 }
 
 ACE_INLINE 
-IR::ProvidesDescSeq_var::operator ::IR::ProvidesDescSeq &() // cast 
+IR_ProvidesDescSeq_var::operator ::IR_ProvidesDescSeq &() // cast 
 {
   return *this->ptr_;
 }
 
 ACE_INLINE 
-IR::ProvidesDescSeq_var::operator ::IR::ProvidesDescSeq &() const // cast 
+IR_ProvidesDescSeq_var::operator ::IR_ProvidesDescSeq &() const // cast 
 {
   return *this->ptr_;
 }
 
 // variable-size types only
 ACE_INLINE
-IR::ProvidesDescSeq_var::operator ::IR::ProvidesDescSeq *&() // cast 
+IR_ProvidesDescSeq_var::operator ::IR_ProvidesDescSeq *&() // cast 
 {
   return this->ptr_;
 }
 
-ACE_INLINE IR::ProvidesDescription &
-IR::ProvidesDescSeq_var::operator[] (CORBA::ULong index)
+ACE_INLINE IR_ProvidesDescription &
+IR_ProvidesDescSeq_var::operator[] (CORBA::ULong index)
 {
   return this->ptr_->operator[] (index);
 }
 
-ACE_INLINE const IR::ProvidesDescription &
-IR::ProvidesDescSeq_var::operator[] (CORBA::ULong index) const
+ACE_INLINE const IR_ProvidesDescription &
+IR_ProvidesDescSeq_var::operator[] (CORBA::ULong index) const
 {
-  return ACE_const_cast (const IR::ProvidesDescription &, this->ptr_->operator[] (index));
+  return ACE_const_cast (const IR_ProvidesDescription &, this->ptr_->operator[] (index));
 }
 
-ACE_INLINE const ::IR::ProvidesDescSeq &
-IR::ProvidesDescSeq_var::in (void) const
+ACE_INLINE const ::IR_ProvidesDescSeq &
+IR_ProvidesDescSeq_var::in (void) const
 {
   return *this->ptr_;
 }
 
-ACE_INLINE ::IR::ProvidesDescSeq &
-IR::ProvidesDescSeq_var::inout (void)
+ACE_INLINE ::IR_ProvidesDescSeq &
+IR_ProvidesDescSeq_var::inout (void)
 {
   return *this->ptr_;
 }
 
 // mapping for variable size 
-ACE_INLINE ::IR::ProvidesDescSeq *&
-IR::ProvidesDescSeq_var::out (void)
+ACE_INLINE ::IR_ProvidesDescSeq *&
+IR_ProvidesDescSeq_var::out (void)
 {
   delete this->ptr_;
   this->ptr_ = 0;
   return this->ptr_;
 }
 
-ACE_INLINE ::IR::ProvidesDescSeq *
-IR::ProvidesDescSeq_var::_retn (void)
+ACE_INLINE ::IR_ProvidesDescSeq *
+IR_ProvidesDescSeq_var::_retn (void)
 {
-  ::IR::ProvidesDescSeq *tmp = this->ptr_;
+  ::IR_ProvidesDescSeq *tmp = this->ptr_;
   this->ptr_ = 0;
   return tmp;
 }
 
-ACE_INLINE ::IR::ProvidesDescSeq *
-IR::ProvidesDescSeq_var::ptr (void) const
+ACE_INLINE ::IR_ProvidesDescSeq *
+IR_ProvidesDescSeq_var::ptr (void) const
 {
   return this->ptr_;
 }
 
 // *************************************************************
-// Inline operations for class IR::ProvidesDescSeq_out
+// Inline operations for class IR_ProvidesDescSeq_out
 // *************************************************************
 
 ACE_INLINE
-IR::ProvidesDescSeq_out::ProvidesDescSeq_out (ProvidesDescSeq *&p)
+IR_ProvidesDescSeq_out::IR_ProvidesDescSeq_out (IR_ProvidesDescSeq *&p)
   : ptr_ (p)
 {
   this->ptr_ = 0;
 }
 
 ACE_INLINE
-IR::ProvidesDescSeq_out::ProvidesDescSeq_out (ProvidesDescSeq_var &p) // constructor from _var
+IR_ProvidesDescSeq_out::IR_ProvidesDescSeq_out (IR_ProvidesDescSeq_var &p) // constructor from _var
   : ptr_ (p.out ())
 {
   delete this->ptr_;
@@ -19753,102 +18632,95 @@
 }
 
 ACE_INLINE
-IR::ProvidesDescSeq_out::ProvidesDescSeq_out (const ::IR::ProvidesDescSeq_out &p) // copy constructor
-  : ptr_ (ACE_const_cast (ProvidesDescSeq_out&, p).ptr_)
+IR_ProvidesDescSeq_out::IR_ProvidesDescSeq_out (const ::IR_ProvidesDescSeq_out &p) // copy constructor
+  : ptr_ (ACE_const_cast (IR_ProvidesDescSeq_out&, p).ptr_)
 {}
 
-ACE_INLINE ::IR::ProvidesDescSeq_out &
-IR::ProvidesDescSeq_out::operator= (const ::IR::ProvidesDescSeq_out &p)
+ACE_INLINE ::IR_ProvidesDescSeq_out &
+IR_ProvidesDescSeq_out::operator= (const ::IR_ProvidesDescSeq_out &p)
 {
-  this->ptr_ = ACE_const_cast (ProvidesDescSeq_out&, p).ptr_;
+  this->ptr_ = ACE_const_cast (IR_ProvidesDescSeq_out&, p).ptr_;
   return *this;
 }
 
-ACE_INLINE ::IR::ProvidesDescSeq_out &
-IR::ProvidesDescSeq_out::operator= (ProvidesDescSeq *p)
+ACE_INLINE ::IR_ProvidesDescSeq_out &
+IR_ProvidesDescSeq_out::operator= (IR_ProvidesDescSeq *p)
 {
   this->ptr_ = p;
   return *this;
 }
 
 ACE_INLINE 
-IR::ProvidesDescSeq_out::operator ::IR::ProvidesDescSeq *&() // cast
+IR_ProvidesDescSeq_out::operator ::IR_ProvidesDescSeq *&() // cast
 {
   return this->ptr_;
 }
 
-ACE_INLINE ::IR::ProvidesDescSeq *&
-IR::ProvidesDescSeq_out::ptr (void) // ptr
+ACE_INLINE ::IR_ProvidesDescSeq *&
+IR_ProvidesDescSeq_out::ptr (void) // ptr
 {
   return this->ptr_;
 }
 
-ACE_INLINE ::IR::ProvidesDescSeq *
-IR::ProvidesDescSeq_out::operator-> (void)
+ACE_INLINE ::IR_ProvidesDescSeq *
+IR_ProvidesDescSeq_out::operator-> (void)
 {
   return this->ptr_;
 }
 
-ACE_INLINE IR::ProvidesDescription &
-IR::ProvidesDescSeq_out::operator[] (CORBA::ULong index)
+ACE_INLINE IR_ProvidesDescription &
+IR_ProvidesDescSeq_out::operator[] (CORBA::ULong index)
 {
   return this->ptr_->operator[] (index);
 }
 
-
-#endif /* end #if !defined */
-
-
 #if !defined (TAO_USE_SEQUENCE_TEMPLATES)
   
-#if !defined (__TAO_UNBOUNDED_SEQUENCE_IR_USESDESCSEQ_CI_)
-#define __TAO_UNBOUNDED_SEQUENCE_IR_USESDESCSEQ_CI_
-
   // = Static operations.
-  ACE_INLINE IR::UsesDescription *
-  IR::_TAO_Unbounded_Sequence_IR_UsesDescSeq::allocbuf (CORBA::ULong size)
+  ACE_INLINE IR_UsesDescription *
+  _TAO_Unbounded_Sequence_IR_UsesDescSeq::allocbuf (CORBA::ULong size)
   // Allocate storage for the sequence.
   {
-    IR::UsesDescription *retval = 0;
-    ACE_NEW_RETURN (retval, IR::UsesDescription[size], 0);
+    IR_UsesDescription *retval = 0;
+    ACE_NEW_RETURN (retval, IR_UsesDescription[size], 0);
     return retval;
   }
   
-  ACE_INLINE void IR::_TAO_Unbounded_Sequence_IR_UsesDescSeq::freebuf (IR::UsesDescription *buffer)
+  ACE_INLINE void _TAO_Unbounded_Sequence_IR_UsesDescSeq::freebuf (IR_UsesDescription *buffer)
   // Free the sequence.
   {
     delete [] buffer;
   }
   
   ACE_INLINE
-  IR::_TAO_Unbounded_Sequence_IR_UsesDescSeq::_TAO_Unbounded_Sequence_IR_UsesDescSeq (void) // Default constructor.
+  _TAO_Unbounded_Sequence_IR_UsesDescSeq::_TAO_Unbounded_Sequence_IR_UsesDescSeq (void) // Default constructor.
   {
   }
   
   ACE_INLINE
-  IR::_TAO_Unbounded_Sequence_IR_UsesDescSeq::_TAO_Unbounded_Sequence_IR_UsesDescSeq (CORBA::ULong maximum) // Constructor using a maximum length value.
+  _TAO_Unbounded_Sequence_IR_UsesDescSeq::_TAO_Unbounded_Sequence_IR_UsesDescSeq (CORBA::ULong maximum) // Constructor using a maximum length value.
     : TAO_Unbounded_Base_Sequence (maximum, _TAO_Unbounded_Sequence_IR_UsesDescSeq::allocbuf (maximum))
   {
   }
   
   ACE_INLINE
-  IR::_TAO_Unbounded_Sequence_IR_UsesDescSeq::_TAO_Unbounded_Sequence_IR_UsesDescSeq (CORBA::ULong maximum,
+  _TAO_Unbounded_Sequence_IR_UsesDescSeq::_TAO_Unbounded_Sequence_IR_UsesDescSeq (CORBA::ULong maximum,
     CORBA::ULong length,
-    IR::UsesDescription *data,
+    IR_UsesDescription *data,
     CORBA::Boolean release)
   : TAO_Unbounded_Base_Sequence (maximum, length, data, release)
   {
   }
   
   ACE_INLINE
-  IR::_TAO_Unbounded_Sequence_IR_UsesDescSeq::_TAO_Unbounded_Sequence_IR_UsesDescSeq (const _TAO_Unbounded_Sequence_IR_UsesDescSeq &rhs)
+  _TAO_Unbounded_Sequence_IR_UsesDescSeq::_TAO_Unbounded_Sequence_IR_UsesDescSeq (const _TAO_Unbounded_Sequence_IR_UsesDescSeq &rhs)
   // Copy constructor.
     : TAO_Unbounded_Base_Sequence (rhs)
   {
     if (rhs.buffer_ != 0)
     {
-      IR::UsesDescription *tmp1 = _TAO_Unbounded_Sequence_IR_UsesDescSeq::allocbuf (this->maximum_);
-      IR::UsesDescription * const tmp2 = ACE_reinterpret_cast (IR::UsesDescription * ACE_CAST_CONST, rhs.buffer_);
+      IR_UsesDescription *tmp1 = _TAO_Unbounded_Sequence_IR_UsesDescSeq::allocbuf (this->maximum_);
+      IR_UsesDescription * const tmp2 = ACE_reinterpret_cast (IR_UsesDescription * ACE_CAST_CONST, rhs.buffer_);
       
       for (CORBA::ULong i = 0; i < this->length_; ++i)
         tmp1[i] = tmp2[i];
@@ -19861,8 +18733,8 @@
     }
   }
   
-  ACE_INLINE IR::_TAO_Unbounded_Sequence_IR_UsesDescSeq &
-  IR::_TAO_Unbounded_Sequence_IR_UsesDescSeq::operator= (const _TAO_Unbounded_Sequence_IR_UsesDescSeq &rhs)
+  ACE_INLINE _TAO_Unbounded_Sequence_IR_UsesDescSeq &
+  _TAO_Unbounded_Sequence_IR_UsesDescSeq::operator= (const _TAO_Unbounded_Sequence_IR_UsesDescSeq &rhs)
   // Assignment operator.
   {
     if (this == &rhs)
@@ -19873,7 +18745,7 @@
       if (this->maximum_ < rhs.maximum_)
       {
         // free the old buffer
-        IR::UsesDescription *tmp = ACE_reinterpret_cast (IR::UsesDescription *, this->buffer_);
+        IR_UsesDescription *tmp = ACE_reinterpret_cast (IR_UsesDescription *, this->buffer_);
         _TAO_Unbounded_Sequence_IR_UsesDescSeq::freebuf (tmp);
         this->buffer_ = _TAO_Unbounded_Sequence_IR_UsesDescSeq::allocbuf (rhs.maximum_);
       }
@@ -19883,8 +18755,8 @@
     
     TAO_Unbounded_Base_Sequence::operator= (rhs);
     
-    IR::UsesDescription *tmp1 = ACE_reinterpret_cast (IR::UsesDescription *, this->buffer_);
-    IR::UsesDescription * const tmp2 = ACE_reinterpret_cast (IR::UsesDescription * ACE_CAST_CONST, rhs.buffer_);
+    IR_UsesDescription *tmp1 = ACE_reinterpret_cast (IR_UsesDescription *, this->buffer_);
+    IR_UsesDescription * const tmp2 = ACE_reinterpret_cast (IR_UsesDescription * ACE_CAST_CONST, rhs.buffer_);
     
     for (CORBA::ULong i = 0; i < this->length_; ++i)
       tmp1[i] = tmp2[i];
@@ -19893,30 +18765,30 @@
   }
   
   // = Accessors.
-  ACE_INLINE IR::UsesDescription &
-  IR::_TAO_Unbounded_Sequence_IR_UsesDescSeq::operator[] (CORBA::ULong i)
+  ACE_INLINE IR_UsesDescription &
+  _TAO_Unbounded_Sequence_IR_UsesDescSeq::operator[] (CORBA::ULong i)
   // operator []
   {
     ACE_ASSERT (i < this->maximum_);
-    IR::UsesDescription* tmp = ACE_reinterpret_cast(IR::UsesDescription*,this->buffer_);
+    IR_UsesDescription* tmp = ACE_reinterpret_cast(IR_UsesDescription*,this->buffer_);
     return tmp[i];
   }
   
-  ACE_INLINE const IR::UsesDescription &
-  IR::_TAO_Unbounded_Sequence_IR_UsesDescSeq::operator[] (CORBA::ULong i) const
+  ACE_INLINE const IR_UsesDescription &
+  _TAO_Unbounded_Sequence_IR_UsesDescSeq::operator[] (CORBA::ULong i) const
   // operator []
   {
     ACE_ASSERT (i < this->maximum_);
-    IR::UsesDescription * const tmp = ACE_reinterpret_cast (IR::UsesDescription* ACE_CAST_CONST, this->buffer_);
+    IR_UsesDescription * const tmp = ACE_reinterpret_cast (IR_UsesDescription* ACE_CAST_CONST, this->buffer_);
     return tmp[i];
   }
   
   // Implement the TAO_Base_Sequence methods (see Sequence.h)
   
-  ACE_INLINE IR::UsesDescription *
-  IR::_TAO_Unbounded_Sequence_IR_UsesDescSeq::get_buffer (CORBA::Boolean orphan)
+  ACE_INLINE IR_UsesDescription *
+  _TAO_Unbounded_Sequence_IR_UsesDescSeq::get_buffer (CORBA::Boolean orphan)
   {
-    IR::UsesDescription *result = 0;
+    IR_UsesDescription *result = 0;
     if (orphan == 0)
     {
       // We retain ownership.
@@ -19928,7 +18800,7 @@
       }
       else
       {
-        result = ACE_reinterpret_cast (IR::UsesDescription*, this->buffer_);
+        result = ACE_reinterpret_cast (IR_UsesDescription*, this->buffer_);
       }
     }
     else // if (orphan == 1)
@@ -19937,7 +18809,7 @@
       {
         // We set the state back to default and relinquish
         // ownership.
-        result = ACE_reinterpret_cast(IR::UsesDescription*,this->buffer_);
+        result = ACE_reinterpret_cast(IR_UsesDescription*,this->buffer_);
         this->maximum_ = 0;
         this->length_ = 0;
         this->buffer_ = 0;
@@ -19947,76 +18819,70 @@
     return result;
   }
   
-  ACE_INLINE const IR::UsesDescription *
-  IR::_TAO_Unbounded_Sequence_IR_UsesDescSeq::get_buffer (void) const
+  ACE_INLINE const IR_UsesDescription *
+  _TAO_Unbounded_Sequence_IR_UsesDescSeq::get_buffer (void) const
   {
-    return ACE_reinterpret_cast(const IR::UsesDescription * ACE_CAST_CONST, this->buffer_);
+    return ACE_reinterpret_cast(const IR_UsesDescription * ACE_CAST_CONST, this->buffer_);
   }
   
   ACE_INLINE void
-  IR::_TAO_Unbounded_Sequence_IR_UsesDescSeq::replace (CORBA::ULong max,
+  _TAO_Unbounded_Sequence_IR_UsesDescSeq::replace (CORBA::ULong max,
   CORBA::ULong length,
-  IR::UsesDescription *data,
+  IR_UsesDescription *data,
   CORBA::Boolean release)
   {
     this->maximum_ = max;
     this->length_ = length;
     if (this->buffer_ && this->release_ == 1)
     {
-      IR::UsesDescription *tmp = ACE_reinterpret_cast(IR::UsesDescription*,this->buffer_);
+      IR_UsesDescription *tmp = ACE_reinterpret_cast(IR_UsesDescription*,this->buffer_);
       _TAO_Unbounded_Sequence_IR_UsesDescSeq::freebuf (tmp);
     }
     this->buffer_ = data;
     this->release_ = release;
   }
   
-#endif /* end #if !defined */
-
-
 #endif /* !TAO_USE_SEQUENCE_TEMPLATES */ 
 
-#if !defined (_IR_USESDESCSEQ_CI_)
-#define _IR_USESDESCSEQ_CI_
-
 // *************************************************************
-// Inline operations for class IR::UsesDescSeq_var
+// Inline operations for class IR_UsesDescSeq_var
 // *************************************************************
 
 ACE_INLINE
-IR::UsesDescSeq_var::UsesDescSeq_var (void) // default constructor
+IR_UsesDescSeq_var::IR_UsesDescSeq_var (void) // default constructor
   : ptr_ (0)
 {}
 
 ACE_INLINE
-IR::UsesDescSeq_var::UsesDescSeq_var (UsesDescSeq *p)
+IR_UsesDescSeq_var::IR_UsesDescSeq_var (IR_UsesDescSeq *p)
   : ptr_ (p)
 {}
 
 ACE_INLINE
-IR::UsesDescSeq_var::UsesDescSeq_var (const ::IR::UsesDescSeq_var &p) // copy constructor
+IR_UsesDescSeq_var::IR_UsesDescSeq_var (const ::IR_UsesDescSeq_var &p) // copy constructor
 {
   if (p.ptr_)
-    ACE_NEW (this->ptr_, ::IR::UsesDescSeq (*p.ptr_));
+    ACE_NEW (this->ptr_, ::IR_UsesDescSeq (*p.ptr_));
   else
     this->ptr_ = 0;
 }
 
 ACE_INLINE
-IR::UsesDescSeq_var::~UsesDescSeq_var (void) // destructor
+IR_UsesDescSeq_var::~IR_UsesDescSeq_var (void) // destructor
 {
   delete this->ptr_;
 }
 
-ACE_INLINE IR::UsesDescSeq_var &
-IR::UsesDescSeq_var::operator= (UsesDescSeq *p)
+ACE_INLINE IR_UsesDescSeq_var &
+IR_UsesDescSeq_var::operator= (IR_UsesDescSeq *p)
 {
   delete this->ptr_;
   this->ptr_ = p;
   return *this;
 }
 
-ACE_INLINE ::IR::UsesDescSeq_var &
-IR::UsesDescSeq_var::operator= (const ::IR::UsesDescSeq_var &p)
+ACE_INLINE IR_UsesDescSeq_var &
+IR_UsesDescSeq_var::operator= (const ::IR_UsesDescSeq_var &p) // deep copy
 {
   if (this != &p)
     {
@@ -20027,12 +18893,12 @@
         }
       else
         {
-          UsesDescSeq *deep_copy =
-            new UsesDescSeq (*p.ptr_);
+          IR_UsesDescSeq *deep_copy = 
+            new IR_UsesDescSeq (*p.ptr_);
           
           if (deep_copy != 0)
             {
-              UsesDescSeq *tmp = deep_copy;
+              IR_UsesDescSeq *tmp = deep_copy;
               deep_copy = this->ptr_;
               this->ptr_ = tmp;
               delete deep_copy;
@@ -20043,103 +18909,103 @@
   return *this;
 }
 
-ACE_INLINE const ::IR::UsesDescSeq *
-IR::UsesDescSeq_var::operator-> (void) const
+ACE_INLINE const ::IR_UsesDescSeq *
+IR_UsesDescSeq_var::operator-> (void) const
 {
   return this->ptr_;
 }
 
-ACE_INLINE ::IR::UsesDescSeq *
-IR::UsesDescSeq_var::operator-> (void)
+ACE_INLINE ::IR_UsesDescSeq *
+IR_UsesDescSeq_var::operator-> (void)
 {
   return this->ptr_;
 }
 
 ACE_INLINE 
-IR::UsesDescSeq_var::operator const ::IR::UsesDescSeq &() const // cast
+IR_UsesDescSeq_var::operator const ::IR_UsesDescSeq &() const // cast
 {
   return *this->ptr_;
 }
 
 ACE_INLINE 
-IR::UsesDescSeq_var::operator ::IR::UsesDescSeq &() // cast 
+IR_UsesDescSeq_var::operator ::IR_UsesDescSeq &() // cast 
 {
   return *this->ptr_;
 }
 
 ACE_INLINE 
-IR::UsesDescSeq_var::operator ::IR::UsesDescSeq &() const // cast 
+IR_UsesDescSeq_var::operator ::IR_UsesDescSeq &() const // cast 
 {
   return *this->ptr_;
 }
 
 // variable-size types only
 ACE_INLINE
-IR::UsesDescSeq_var::operator ::IR::UsesDescSeq *&() // cast 
+IR_UsesDescSeq_var::operator ::IR_UsesDescSeq *&() // cast 
 {
   return this->ptr_;
 }
 
-ACE_INLINE IR::UsesDescription &
-IR::UsesDescSeq_var::operator[] (CORBA::ULong index)
+ACE_INLINE IR_UsesDescription &
+IR_UsesDescSeq_var::operator[] (CORBA::ULong index)
 {
   return this->ptr_->operator[] (index);
 }
 
-ACE_INLINE const IR::UsesDescription &
-IR::UsesDescSeq_var::operator[] (CORBA::ULong index) const
+ACE_INLINE const IR_UsesDescription &
+IR_UsesDescSeq_var::operator[] (CORBA::ULong index) const
 {
-  return ACE_const_cast (const IR::UsesDescription &, this->ptr_->operator[] (index));
+  return ACE_const_cast (const IR_UsesDescription &, this->ptr_->operator[] (index));
 }
 
-ACE_INLINE const ::IR::UsesDescSeq &
-IR::UsesDescSeq_var::in (void) const
+ACE_INLINE const ::IR_UsesDescSeq &
+IR_UsesDescSeq_var::in (void) const
 {
   return *this->ptr_;
 }
 
-ACE_INLINE ::IR::UsesDescSeq &
-IR::UsesDescSeq_var::inout (void)
+ACE_INLINE ::IR_UsesDescSeq &
+IR_UsesDescSeq_var::inout (void)
 {
   return *this->ptr_;
 }
 
 // mapping for variable size 
-ACE_INLINE ::IR::UsesDescSeq *&
-IR::UsesDescSeq_var::out (void)
+ACE_INLINE ::IR_UsesDescSeq *&
+IR_UsesDescSeq_var::out (void)
 {
   delete this->ptr_;
   this->ptr_ = 0;
   return this->ptr_;
 }
 
-ACE_INLINE ::IR::UsesDescSeq *
-IR::UsesDescSeq_var::_retn (void)
+ACE_INLINE ::IR_UsesDescSeq *
+IR_UsesDescSeq_var::_retn (void)
 {
-  ::IR::UsesDescSeq *tmp = this->ptr_;
+  ::IR_UsesDescSeq *tmp = this->ptr_;
   this->ptr_ = 0;
   return tmp;
 }
 
-ACE_INLINE ::IR::UsesDescSeq *
-IR::UsesDescSeq_var::ptr (void) const
+ACE_INLINE ::IR_UsesDescSeq *
+IR_UsesDescSeq_var::ptr (void) const
 {
   return this->ptr_;
 }
 
 // *************************************************************
-// Inline operations for class IR::UsesDescSeq_out
+// Inline operations for class IR_UsesDescSeq_out
 // *************************************************************
 
 ACE_INLINE
-IR::UsesDescSeq_out::UsesDescSeq_out (UsesDescSeq *&p)
+IR_UsesDescSeq_out::IR_UsesDescSeq_out (IR_UsesDescSeq *&p)
   : ptr_ (p)
 {
   this->ptr_ = 0;
 }
 
 ACE_INLINE
-IR::UsesDescSeq_out::UsesDescSeq_out (UsesDescSeq_var &p) // constructor from _var
+IR_UsesDescSeq_out::IR_UsesDescSeq_out (IR_UsesDescSeq_var &p) // constructor from _var
   : ptr_ (p.out ())
 {
   delete this->ptr_;
@@ -20147,90 +19013,87 @@
 }
 
 ACE_INLINE
-IR::UsesDescSeq_out::UsesDescSeq_out (const ::IR::UsesDescSeq_out &p) // copy constructor
-  : ptr_ (ACE_const_cast (UsesDescSeq_out&, p).ptr_)
+IR_UsesDescSeq_out::IR_UsesDescSeq_out (const ::IR_UsesDescSeq_out &p) // copy constructor
+  : ptr_ (ACE_const_cast (IR_UsesDescSeq_out&, p).ptr_)
 {}
 
-ACE_INLINE ::IR::UsesDescSeq_out &
-IR::UsesDescSeq_out::operator= (const ::IR::UsesDescSeq_out &p)
+ACE_INLINE ::IR_UsesDescSeq_out &
+IR_UsesDescSeq_out::operator= (const ::IR_UsesDescSeq_out &p)
 {
-  this->ptr_ = ACE_const_cast (UsesDescSeq_out&, p).ptr_;
+  this->ptr_ = ACE_const_cast (IR_UsesDescSeq_out&, p).ptr_;
   return *this;
 }
 
-ACE_INLINE ::IR::UsesDescSeq_out &
-IR::UsesDescSeq_out::operator= (UsesDescSeq *p)
+ACE_INLINE ::IR_UsesDescSeq_out &
+IR_UsesDescSeq_out::operator= (IR_UsesDescSeq *p)
 {
   this->ptr_ = p;
   return *this;
 }
 
 ACE_INLINE 
-IR::UsesDescSeq_out::operator ::IR::UsesDescSeq *&() // cast
+IR_UsesDescSeq_out::operator ::IR_UsesDescSeq *&() // cast
 {
   return this->ptr_;
 }
 
-ACE_INLINE ::IR::UsesDescSeq *&
-IR::UsesDescSeq_out::ptr (void) // ptr
+ACE_INLINE ::IR_UsesDescSeq *&
+IR_UsesDescSeq_out::ptr (void) // ptr
 {
   return this->ptr_;
 }
 
-ACE_INLINE ::IR::UsesDescSeq *
-IR::UsesDescSeq_out::operator-> (void)
+ACE_INLINE ::IR_UsesDescSeq *
+IR_UsesDescSeq_out::operator-> (void)
 {
   return this->ptr_;
 }
 
-ACE_INLINE IR::UsesDescription &
-IR::UsesDescSeq_out::operator[] (CORBA::ULong index)
+ACE_INLINE IR_UsesDescription &
+IR_UsesDescSeq_out::operator[] (CORBA::ULong index)
 {
   return this->ptr_->operator[] (index);
 }
 
-
-#endif /* end #if !defined */
-
 // *************************************************************
-// Inline operations for class IR::EventDescription_var
+// Inline operations for class IR_EventDescription_var
 // *************************************************************
 
 ACE_INLINE
-IR::EventDescription_var::EventDescription_var (void) // default constructor
+IR_EventDescription_var::IR_EventDescription_var (void) // default constructor
   : ptr_ (0)
 {}
 
 ACE_INLINE
-IR::EventDescription_var::EventDescription_var (EventDescription *p)
+IR_EventDescription_var::IR_EventDescription_var (IR_EventDescription *p)
   : ptr_ (p)
 {}
 
 ACE_INLINE
-IR::EventDescription_var::EventDescription_var (const ::IR::EventDescription_var &p) // copy constructor
+IR_EventDescription_var::IR_EventDescription_var (const ::IR_EventDescription_var &p) // copy constructor
 {
   if (p.ptr_)
-    ACE_NEW (this->ptr_, ::IR::EventDescription (*p.ptr_));
+    ACE_NEW (this->ptr_, ::IR_EventDescription (*p.ptr_));
   else
     this->ptr_ = 0;
 }
 
 ACE_INLINE
-IR::EventDescription_var::~EventDescription_var (void) // destructor
+IR_EventDescription_var::~IR_EventDescription_var (void) // destructor
 {
   delete this->ptr_;
 }
 
-ACE_INLINE IR::EventDescription_var &
-IR::EventDescription_var::operator= (EventDescription *p)
+ACE_INLINE IR_EventDescription_var &
+IR_EventDescription_var::operator= (IR_EventDescription *p)
 {
   delete this->ptr_;
   this->ptr_ = p;
   return *this;
 }
 
-ACE_INLINE ::IR::EventDescription_var &
-IR::EventDescription_var::operator= (const ::IR::EventDescription_var &p)
+ACE_INLINE ::IR_EventDescription_var &
+IR_EventDescription_var::operator= (const ::IR_EventDescription_var &p)
 {
   if (this != &p)
     {
@@ -20241,12 +19104,12 @@
         }
       else
         {
-          EventDescription *deep_copy =
-            new EventDescription (*p.ptr_);
+          IR_EventDescription *deep_copy = 
+            new IR_EventDescription (*p.ptr_);
           
           if (deep_copy != 0)
             {
-              EventDescription *tmp = deep_copy;
+              IR_EventDescription *tmp = deep_copy;
               deep_copy = this->ptr_;
               this->ptr_ = tmp;
               delete deep_copy;
@@ -20257,91 +19120,91 @@
   return *this;
 }
 
-ACE_INLINE const ::IR::EventDescription *
-IR::EventDescription_var::operator-> (void) const
+ACE_INLINE const ::IR_EventDescription *
+IR_EventDescription_var::operator-> (void) const
 {
   return this->ptr_;
 }
 
-ACE_INLINE ::IR::EventDescription *
-IR::EventDescription_var::operator-> (void)
+ACE_INLINE ::IR_EventDescription *
+IR_EventDescription_var::operator-> (void)
 {
   return this->ptr_;
 }
 
 ACE_INLINE
-IR::EventDescription_var::operator const ::IR::EventDescription &() const // cast
+IR_EventDescription_var::operator const ::IR_EventDescription &() const // cast
 {
   return *this->ptr_;
 }
 
 ACE_INLINE
-IR::EventDescription_var::operator ::IR::EventDescription &() // cast 
+IR_EventDescription_var::operator ::IR_EventDescription &() // cast 
 {
   return *this->ptr_;
 }
 
 ACE_INLINE
-IR::EventDescription_var::operator ::IR::EventDescription &() const // cast 
+IR_EventDescription_var::operator ::IR_EventDescription &() const // cast 
 {
   return *this->ptr_;
 }
 
 // variable-size types only
 ACE_INLINE
-IR::EventDescription_var::operator ::IR::EventDescription *&() // cast 
+IR_EventDescription_var::operator ::IR_EventDescription *&() // cast 
 {
   return this->ptr_;
 }
 
-ACE_INLINE const ::IR::EventDescription &
-IR::EventDescription_var::in (void) const
+ACE_INLINE const ::IR_EventDescription &
+IR_EventDescription_var::in (void) const
 {
   return *this->ptr_;
 }
 
-ACE_INLINE ::IR::EventDescription &
-IR::EventDescription_var::inout (void)
+ACE_INLINE ::IR_EventDescription &
+IR_EventDescription_var::inout (void)
 {
   return *this->ptr_;
 }
 
 // mapping for variable size 
-ACE_INLINE ::IR::EventDescription *&
-IR::EventDescription_var::out (void)
+ACE_INLINE ::IR_EventDescription *&
+IR_EventDescription_var::out (void)
 {
   delete this->ptr_;
   this->ptr_ = 0;
   return this->ptr_;
 }
 
-ACE_INLINE ::IR::EventDescription *
-IR::EventDescription_var::_retn (void)
+ACE_INLINE ::IR_EventDescription *
+IR_EventDescription_var::_retn (void)
 {
-  ::IR::EventDescription *tmp = this->ptr_;
+  ::IR_EventDescription *tmp = this->ptr_;
   this->ptr_ = 0;
   return tmp;
 }
 
-ACE_INLINE ::IR::EventDescription *
-IR::EventDescription_var::ptr (void) const
+ACE_INLINE ::IR_EventDescription *
+IR_EventDescription_var::ptr (void) const
 {
   return this->ptr_;
 }
 
 // *************************************************************
-// Inline operations for class IR::EventDescription_out
+// Inline operations for class IR_EventDescription_out
 // *************************************************************
 
 ACE_INLINE
-IR::EventDescription_out::EventDescription_out (::IR::EventDescription *&p)
+IR_EventDescription_out::IR_EventDescription_out (::IR_EventDescription *&p)
   : ptr_ (p)
 {
   this->ptr_ = 0;
 }
 
 ACE_INLINE
-IR::EventDescription_out::EventDescription_out (EventDescription_var &p) // constructor from _var
+IR_EventDescription_out::IR_EventDescription_out (IR_EventDescription_var &p) // constructor from _var
   : ptr_ (p.out ())
 {
   delete this->ptr_;
@@ -20349,81 +19212,81 @@
 }
 
 ACE_INLINE
-IR::EventDescription_out::EventDescription_out (const ::IR::EventDescription_out &p) // copy constructor
-  : ptr_ (ACE_const_cast (EventDescription_out&, p).ptr_)
+IR_EventDescription_out::IR_EventDescription_out (const ::IR_EventDescription_out &p) // copy constructor
+  : ptr_ (ACE_const_cast (IR_EventDescription_out&, p).ptr_)
 {}
 
-ACE_INLINE IR::EventDescription_out &
-IR::EventDescription_out::operator= (const ::IR::EventDescription_out &p)
+ACE_INLINE IR_EventDescription_out &
+IR_EventDescription_out::operator= (const ::IR_EventDescription_out &p)
 {
-  this->ptr_ = ACE_const_cast (EventDescription_out&, p).ptr_;
+  this->ptr_ = ACE_const_cast (IR_EventDescription_out&, p).ptr_;
   return *this;
 }
 
-ACE_INLINE IR::EventDescription_out &
-IR::EventDescription_out::operator= (EventDescription *p)
+ACE_INLINE IR_EventDescription_out &
+IR_EventDescription_out::operator= (IR_EventDescription *p)
 {
   this->ptr_ = p;
   return *this;
 }
 
 ACE_INLINE 
-IR::EventDescription_out::operator ::IR::EventDescription *&() // cast
+IR_EventDescription_out::operator ::IR_EventDescription *&() // cast
 {
   return this->ptr_;
 }
 
-ACE_INLINE ::IR::EventDescription *&
-IR::EventDescription_out::ptr (void) // ptr
+ACE_INLINE ::IR_EventDescription *&
+IR_EventDescription_out::ptr (void) // ptr
 {
   return this->ptr_;
 }
 
-ACE_INLINE ::IR::EventDescription *
-IR::EventDescription_out::operator-> (void)
+ACE_INLINE ::IR_EventDescription *
+IR_EventDescription_out::operator-> (void)
 {
   return this->ptr_;
 }
 
 // *************************************************************
-// Inline operations for class IR::ComponentDescription_var
+// Inline operations for class IR_ComponentDescription_var
 // *************************************************************
 
 ACE_INLINE
-IR::ComponentDescription_var::ComponentDescription_var (void) // default constructor
+IR_ComponentDescription_var::IR_ComponentDescription_var (void) // default constructor
   : ptr_ (0)
 {}
 
 ACE_INLINE
-IR::ComponentDescription_var::ComponentDescription_var (ComponentDescription *p)
+IR_ComponentDescription_var::IR_ComponentDescription_var (IR_ComponentDescription *p)
   : ptr_ (p)
 {}
 
 ACE_INLINE
-IR::ComponentDescription_var::ComponentDescription_var (const ::IR::ComponentDescription_var &p) // copy constructor
+IR_ComponentDescription_var::IR_ComponentDescription_var (const ::IR_ComponentDescription_var &p) // copy constructor
 {
   if (p.ptr_)
-    ACE_NEW (this->ptr_, ::IR::ComponentDescription (*p.ptr_));
+    ACE_NEW (this->ptr_, ::IR_ComponentDescription (*p.ptr_));
   else
     this->ptr_ = 0;
 }
 
 ACE_INLINE
-IR::ComponentDescription_var::~ComponentDescription_var (void) // destructor
+IR_ComponentDescription_var::~IR_ComponentDescription_var (void) // destructor
 {
   delete this->ptr_;
 }
 
-ACE_INLINE IR::ComponentDescription_var &
-IR::ComponentDescription_var::operator= (ComponentDescription *p)
+ACE_INLINE IR_ComponentDescription_var &
+IR_ComponentDescription_var::operator= (IR_ComponentDescription *p)
 {
   delete this->ptr_;
   this->ptr_ = p;
   return *this;
 }
 
-ACE_INLINE ::IR::ComponentDescription_var &
-IR::ComponentDescription_var::operator= (const ::IR::ComponentDescription_var &p)
+ACE_INLINE ::IR_ComponentDescription_var &
+IR_ComponentDescription_var::operator= (const ::IR_ComponentDescription_var &p)
 {
   if (this != &p)
     {
@@ -20434,12 +19297,12 @@
         }
       else
         {
-          ComponentDescription *deep_copy =
-            new ComponentDescription (*p.ptr_);
+          IR_ComponentDescription *deep_copy = 
+            new IR_ComponentDescription (*p.ptr_);
           
           if (deep_copy != 0)
             {
-              ComponentDescription *tmp = deep_copy;
+              IR_ComponentDescription *tmp = deep_copy;
               deep_copy = this->ptr_;
               this->ptr_ = tmp;
               delete deep_copy;
@@ -20450,91 +19313,91 @@
   return *this;
 }
 
-ACE_INLINE const ::IR::ComponentDescription *
-IR::ComponentDescription_var::operator-> (void) const
+ACE_INLINE const ::IR_ComponentDescription *
+IR_ComponentDescription_var::operator-> (void) const
 {
   return this->ptr_;
 }
 
-ACE_INLINE ::IR::ComponentDescription *
-IR::ComponentDescription_var::operator-> (void)
+ACE_INLINE ::IR_ComponentDescription *
+IR_ComponentDescription_var::operator-> (void)
 {
   return this->ptr_;
 }
 
 ACE_INLINE
-IR::ComponentDescription_var::operator const ::IR::ComponentDescription &() const // cast
+IR_ComponentDescription_var::operator const ::IR_ComponentDescription &() const // cast
 {
   return *this->ptr_;
 }
 
 ACE_INLINE
-IR::ComponentDescription_var::operator ::IR::ComponentDescription &() // cast 
+IR_ComponentDescription_var::operator ::IR_ComponentDescription &() // cast 
 {
   return *this->ptr_;
 }
 
 ACE_INLINE
-IR::ComponentDescription_var::operator ::IR::ComponentDescription &() const // cast 
+IR_ComponentDescription_var::operator ::IR_ComponentDescription &() const // cast 
 {
   return *this->ptr_;
 }
 
 // variable-size types only
 ACE_INLINE
-IR::ComponentDescription_var::operator ::IR::ComponentDescription *&() // cast 
+IR_ComponentDescription_var::operator ::IR_ComponentDescription *&() // cast 
 {
   return this->ptr_;
 }
 
-ACE_INLINE const ::IR::ComponentDescription &
-IR::ComponentDescription_var::in (void) const
+ACE_INLINE const ::IR_ComponentDescription &
+IR_ComponentDescription_var::in (void) const
 {
   return *this->ptr_;
 }
 
-ACE_INLINE ::IR::ComponentDescription &
-IR::ComponentDescription_var::inout (void)
+ACE_INLINE ::IR_ComponentDescription &
+IR_ComponentDescription_var::inout (void)
 {
   return *this->ptr_;
 }
 
 // mapping for variable size 
-ACE_INLINE ::IR::ComponentDescription *&
-IR::ComponentDescription_var::out (void)
+ACE_INLINE ::IR_ComponentDescription *&
+IR_ComponentDescription_var::out (void)
 {
   delete this->ptr_;
   this->ptr_ = 0;
   return this->ptr_;
 }
 
-ACE_INLINE ::IR::ComponentDescription *
-IR::ComponentDescription_var::_retn (void)
+ACE_INLINE ::IR_ComponentDescription *
+IR_ComponentDescription_var::_retn (void)
 {
-  ::IR::ComponentDescription *tmp = this->ptr_;
+  ::IR_ComponentDescription *tmp = this->ptr_;
   this->ptr_ = 0;
   return tmp;
 }
 
-ACE_INLINE ::IR::ComponentDescription *
-IR::ComponentDescription_var::ptr (void) const
+ACE_INLINE ::IR_ComponentDescription *
+IR_ComponentDescription_var::ptr (void) const
 {
   return this->ptr_;
 }
 
 // *************************************************************
-// Inline operations for class IR::ComponentDescription_out
+// Inline operations for class IR_ComponentDescription_out
 // *************************************************************
 
 ACE_INLINE
-IR::ComponentDescription_out::ComponentDescription_out (::IR::ComponentDescription *&p)
+IR_ComponentDescription_out::IR_ComponentDescription_out (::IR_ComponentDescription *&p)
   : ptr_ (p)
 {
   this->ptr_ = 0;
 }
 
 ACE_INLINE
-IR::ComponentDescription_out::ComponentDescription_out (ComponentDescription_var &p) // constructor from _var
+IR_ComponentDescription_out::IR_ComponentDescription_out (IR_ComponentDescription_var &p) // constructor from _var
   : ptr_ (p.out ())
 {
   delete this->ptr_;
@@ -20542,81 +19405,81 @@
 }
 
 ACE_INLINE
-IR::ComponentDescription_out::ComponentDescription_out (const ::IR::ComponentDescription_out &p) // copy constructor
-  : ptr_ (ACE_const_cast (ComponentDescription_out&, p).ptr_)
+IR_ComponentDescription_out::IR_ComponentDescription_out (const ::IR_ComponentDescription_out &p) // copy constructor
+  : ptr_ (ACE_const_cast (IR_ComponentDescription_out&, p).ptr_)
 {}
 
-ACE_INLINE IR::ComponentDescription_out &
-IR::ComponentDescription_out::operator= (const ::IR::ComponentDescription_out &p)
+ACE_INLINE IR_ComponentDescription_out &
+IR_ComponentDescription_out::operator= (const ::IR_ComponentDescription_out &p)
 {
-  this->ptr_ = ACE_const_cast (ComponentDescription_out&, p).ptr_;
+  this->ptr_ = ACE_const_cast (IR_ComponentDescription_out&, p).ptr_;
   return *this;
 }
 
-ACE_INLINE IR::ComponentDescription_out &
-IR::ComponentDescription_out::operator= (ComponentDescription *p)
+ACE_INLINE IR_ComponentDescription_out &
+IR_ComponentDescription_out::operator= (IR_ComponentDescription *p)
 {
   this->ptr_ = p;
   return *this;
 }
 
 ACE_INLINE 
-IR::ComponentDescription_out::operator ::IR::ComponentDescription *&() // cast
+IR_ComponentDescription_out::operator ::IR_ComponentDescription *&() // cast
 {
   return this->ptr_;
 }
 
-ACE_INLINE ::IR::ComponentDescription *&
-IR::ComponentDescription_out::ptr (void) // ptr
+ACE_INLINE ::IR_ComponentDescription *&
+IR_ComponentDescription_out::ptr (void) // ptr
 {
   return this->ptr_;
 }
 
-ACE_INLINE ::IR::ComponentDescription *
-IR::ComponentDescription_out::operator-> (void)
+ACE_INLINE ::IR_ComponentDescription *
+IR_ComponentDescription_out::operator-> (void)
 {
   return this->ptr_;
 }
 
 // *************************************************************
-// Inline operations for class IR::PrimaryKeyDescription_var
+// Inline operations for class IR_PrimaryKeyDescription_var
 // *************************************************************
 
 ACE_INLINE
-IR::PrimaryKeyDescription_var::PrimaryKeyDescription_var (void) // default constructor
+IR_PrimaryKeyDescription_var::IR_PrimaryKeyDescription_var (void) // default constructor
   : ptr_ (0)
 {}
 
 ACE_INLINE
-IR::PrimaryKeyDescription_var::PrimaryKeyDescription_var (PrimaryKeyDescription *p)
+IR_PrimaryKeyDescription_var::IR_PrimaryKeyDescription_var (IR_PrimaryKeyDescription *p)
   : ptr_ (p)
 {}
 
 ACE_INLINE
-IR::PrimaryKeyDescription_var::PrimaryKeyDescription_var (const ::IR::PrimaryKeyDescription_var &p) // copy constructor
+IR_PrimaryKeyDescription_var::IR_PrimaryKeyDescription_var (const ::IR_PrimaryKeyDescription_var &p) // copy constructor
 {
   if (p.ptr_)
-    ACE_NEW (this->ptr_, ::IR::PrimaryKeyDescription (*p.ptr_));
+    ACE_NEW (this->ptr_, ::IR_PrimaryKeyDescription (*p.ptr_));
   else
     this->ptr_ = 0;
 }
 
 ACE_INLINE
-IR::PrimaryKeyDescription_var::~PrimaryKeyDescription_var (void) // destructor
+IR_PrimaryKeyDescription_var::~IR_PrimaryKeyDescription_var (void) // destructor
 {
   delete this->ptr_;
 }
 
-ACE_INLINE IR::PrimaryKeyDescription_var &
-IR::PrimaryKeyDescription_var::operator= (PrimaryKeyDescription *p)
+ACE_INLINE IR_PrimaryKeyDescription_var &
+IR_PrimaryKeyDescription_var::operator= (IR_PrimaryKeyDescription *p)
 {
   delete this->ptr_;
   this->ptr_ = p;
   return *this;
 }
 
-ACE_INLINE ::IR::PrimaryKeyDescription_var &
-IR::PrimaryKeyDescription_var::operator= (const ::IR::PrimaryKeyDescription_var &p)
+ACE_INLINE ::IR_PrimaryKeyDescription_var &
+IR_PrimaryKeyDescription_var::operator= (const ::IR_PrimaryKeyDescription_var &p)
 {
   if (this != &p)
     {
@@ -20627,12 +19490,12 @@
         }
       else
         {
-          PrimaryKeyDescription *deep_copy =
-            new PrimaryKeyDescription (*p.ptr_);
+          IR_PrimaryKeyDescription *deep_copy = 
+            new IR_PrimaryKeyDescription (*p.ptr_);
           
           if (deep_copy != 0)
             {
-              PrimaryKeyDescription *tmp = deep_copy;
+              IR_PrimaryKeyDescription *tmp = deep_copy;
               deep_copy = this->ptr_;
               this->ptr_ = tmp;
               delete deep_copy;
@@ -20643,91 +19506,91 @@
   return *this;
 }
 
-ACE_INLINE const ::IR::PrimaryKeyDescription *
-IR::PrimaryKeyDescription_var::operator-> (void) const
+ACE_INLINE const ::IR_PrimaryKeyDescription *
+IR_PrimaryKeyDescription_var::operator-> (void) const
 {
   return this->ptr_;
 }
 
-ACE_INLINE ::IR::PrimaryKeyDescription *
-IR::PrimaryKeyDescription_var::operator-> (void)
+ACE_INLINE ::IR_PrimaryKeyDescription *
+IR_PrimaryKeyDescription_var::operator-> (void)
 {
   return this->ptr_;
 }
 
 ACE_INLINE
-IR::PrimaryKeyDescription_var::operator const ::IR::PrimaryKeyDescription &() const // cast
+IR_PrimaryKeyDescription_var::operator const ::IR_PrimaryKeyDescription &() const // cast
 {
   return *this->ptr_;
 }
 
 ACE_INLINE
-IR::PrimaryKeyDescription_var::operator ::IR::PrimaryKeyDescription &() // cast 
+IR_PrimaryKeyDescription_var::operator ::IR_PrimaryKeyDescription &() // cast 
 {
   return *this->ptr_;
 }
 
 ACE_INLINE
-IR::PrimaryKeyDescription_var::operator ::IR::PrimaryKeyDescription &() const // cast 
+IR_PrimaryKeyDescription_var::operator ::IR_PrimaryKeyDescription &() const // cast 
 {
   return *this->ptr_;
 }
 
 // variable-size types only
 ACE_INLINE
-IR::PrimaryKeyDescription_var::operator ::IR::PrimaryKeyDescription *&() // cast 
+IR_PrimaryKeyDescription_var::operator ::IR_PrimaryKeyDescription *&() // cast 
 {
   return this->ptr_;
 }
 
-ACE_INLINE const ::IR::PrimaryKeyDescription &
-IR::PrimaryKeyDescription_var::in (void) const
+ACE_INLINE const ::IR_PrimaryKeyDescription &
+IR_PrimaryKeyDescription_var::in (void) const
 {
   return *this->ptr_;
 }
 
-ACE_INLINE ::IR::PrimaryKeyDescription &
-IR::PrimaryKeyDescription_var::inout (void)
+ACE_INLINE ::IR_PrimaryKeyDescription &
+IR_PrimaryKeyDescription_var::inout (void)
 {
   return *this->ptr_;
 }
 
 // mapping for variable size 
-ACE_INLINE ::IR::PrimaryKeyDescription *&
-IR::PrimaryKeyDescription_var::out (void)
+ACE_INLINE ::IR_PrimaryKeyDescription *&
+IR_PrimaryKeyDescription_var::out (void)
 {
   delete this->ptr_;
   this->ptr_ = 0;
   return this->ptr_;
 }
 
-ACE_INLINE ::IR::PrimaryKeyDescription *
-IR::PrimaryKeyDescription_var::_retn (void)
+ACE_INLINE ::IR_PrimaryKeyDescription *
+IR_PrimaryKeyDescription_var::_retn (void)
 {
-  ::IR::PrimaryKeyDescription *tmp = this->ptr_;
+  ::IR_PrimaryKeyDescription *tmp = this->ptr_;
   this->ptr_ = 0;
   return tmp;
 }
 
-ACE_INLINE ::IR::PrimaryKeyDescription *
-IR::PrimaryKeyDescription_var::ptr (void) const
+ACE_INLINE ::IR_PrimaryKeyDescription *
+IR_PrimaryKeyDescription_var::ptr (void) const
 {
   return this->ptr_;
 }
 
 // *************************************************************
-// Inline operations for class IR::PrimaryKeyDescription_out
+// Inline operations for class IR_PrimaryKeyDescription_out
 // *************************************************************
 
 ACE_INLINE
-IR::PrimaryKeyDescription_out::PrimaryKeyDescription_out (::IR::PrimaryKeyDescription *&p)
+IR_PrimaryKeyDescription_out::IR_PrimaryKeyDescription_out (::IR_PrimaryKeyDescription *&p)
   : ptr_ (p)
 {
   this->ptr_ = 0;
 }
 
 ACE_INLINE
-IR::PrimaryKeyDescription_out::PrimaryKeyDescription_out (PrimaryKeyDescription_var &p) // constructor from _var
+IR_PrimaryKeyDescription_out::IR_PrimaryKeyDescription_out (IR_PrimaryKeyDescription_var &p) // constructor from _var
   : ptr_ (p.out ())
 {
   delete this->ptr_;
@@ -20735,81 +19598,81 @@
 }
 
 ACE_INLINE
-IR::PrimaryKeyDescription_out::PrimaryKeyDescription_out (const ::IR::PrimaryKeyDescription_out &p) // copy constructor
-  : ptr_ (ACE_const_cast (PrimaryKeyDescription_out&, p).ptr_)
+IR_PrimaryKeyDescription_out::IR_PrimaryKeyDescription_out (const ::IR_PrimaryKeyDescription_out &p) // copy constructor
+  : ptr_ (ACE_const_cast (IR_PrimaryKeyDescription_out&, p).ptr_)
 {}
 
-ACE_INLINE IR::PrimaryKeyDescription_out &
-IR::PrimaryKeyDescription_out::operator= (const ::IR::PrimaryKeyDescription_out &p)
+ACE_INLINE IR_PrimaryKeyDescription_out &
+IR_PrimaryKeyDescription_out::operator= (const ::IR_PrimaryKeyDescription_out &p)
 {
-  this->ptr_ = ACE_const_cast (PrimaryKeyDescription_out&, p).ptr_;
+  this->ptr_ = ACE_const_cast (IR_PrimaryKeyDescription_out&, p).ptr_;
   return *this;
 }
 
-ACE_INLINE IR::PrimaryKeyDescription_out &
-IR::PrimaryKeyDescription_out::operator= (PrimaryKeyDescription *p)
+ACE_INLINE IR_PrimaryKeyDescription_out &
+IR_PrimaryKeyDescription_out::operator= (IR_PrimaryKeyDescription *p)
 {
   this->ptr_ = p;
   return *this;
 }
 
 ACE_INLINE 
-IR::PrimaryKeyDescription_out::operator ::IR::PrimaryKeyDescription *&() // cast
+IR_PrimaryKeyDescription_out::operator ::IR_PrimaryKeyDescription *&() // cast
 {
   return this->ptr_;
 }
 
-ACE_INLINE ::IR::PrimaryKeyDescription *&
-IR::PrimaryKeyDescription_out::ptr (void) // ptr
+ACE_INLINE ::IR_PrimaryKeyDescription *&
+IR_PrimaryKeyDescription_out::ptr (void) // ptr
 {
   return this->ptr_;
 }
 
-ACE_INLINE ::IR::PrimaryKeyDescription *
-IR::PrimaryKeyDescription_out::operator-> (void)
+ACE_INLINE ::IR_PrimaryKeyDescription *
+IR_PrimaryKeyDescription_out::operator-> (void)
 {
   return this->ptr_;
 }
 
 // *************************************************************
-// Inline operations for class IR::HomeDescription_var
+// Inline operations for class IR_HomeDescription_var
 // *************************************************************
 
 ACE_INLINE
-IR::HomeDescription_var::HomeDescription_var (void) // default constructor
+IR_HomeDescription_var::IR_HomeDescription_var (void) // default constructor
   : ptr_ (0)
 {}
 
 ACE_INLINE
-IR::HomeDescription_var::HomeDescription_var (HomeDescription *p)
+IR_HomeDescription_var::IR_HomeDescription_var (IR_HomeDescription *p)
   : ptr_ (p)
 {}
 
 ACE_INLINE
-IR::HomeDescription_var::HomeDescription_var (const ::IR::HomeDescription_var &p) // copy constructor
+IR_HomeDescription_var::IR_HomeDescription_var (const ::IR_HomeDescription_var &p) // copy constructor
 {
   if (p.ptr_)
-    ACE_NEW (this->ptr_, ::IR::HomeDescription (*p.ptr_));
+    ACE_NEW (this->ptr_, ::IR_HomeDescription (*p.ptr_));
   else
     this->ptr_ = 0;
 }
 
 ACE_INLINE
-IR::HomeDescription_var::~HomeDescription_var (void) // destructor
+IR_HomeDescription_var::~IR_HomeDescription_var (void) // destructor
 {
   delete this->ptr_;
 }
 
-ACE_INLINE IR::HomeDescription_var &
-IR::HomeDescription_var::operator= (HomeDescription *p)
+ACE_INLINE IR_HomeDescription_var &
+IR_HomeDescription_var::operator= (IR_HomeDescription *p)
 {
   delete this->ptr_;
   this->ptr_ = p;
   return *this;
 }
 
-ACE_INLINE ::IR::HomeDescription_var &
-IR::HomeDescription_var::operator= (const ::IR::HomeDescription_var &p)
+ACE_INLINE ::IR_HomeDescription_var &
+IR_HomeDescription_var::operator= (const ::IR_HomeDescription_var &p)
 {
   if (this != &p)
     {
@@ -20820,12 +19683,12 @@
         }
       else
         {
-          HomeDescription *deep_copy =
-            new HomeDescription (*p.ptr_);
+          IR_HomeDescription *deep_copy = 
+            new IR_HomeDescription (*p.ptr_);
           
           if (deep_copy != 0)
             {
-              HomeDescription *tmp = deep_copy;
+              IR_HomeDescription *tmp = deep_copy;
               deep_copy = this->ptr_;
               this->ptr_ = tmp;
               delete deep_copy;
@@ -20836,91 +19699,91 @@
   return *this;
 }
 
-ACE_INLINE const ::IR::HomeDescription *
-IR::HomeDescription_var::operator-> (void) const
+ACE_INLINE const ::IR_HomeDescription *
+IR_HomeDescription_var::operator-> (void) const
 {
   return this->ptr_;
 }
 
-ACE_INLINE ::IR::HomeDescription *
-IR::HomeDescription_var::operator-> (void)
+ACE_INLINE ::IR_HomeDescription *
+IR_HomeDescription_var::operator-> (void)
 {
   return this->ptr_;
 }
 
 ACE_INLINE
-IR::HomeDescription_var::operator const ::IR::HomeDescription &() const // cast
+IR_HomeDescription_var::operator const ::IR_HomeDescription &() const // cast
 {
   return *this->ptr_;
 }
 
 ACE_INLINE
-IR::HomeDescription_var::operator ::IR::HomeDescription &() // cast 
+IR_HomeDescription_var::operator ::IR_HomeDescription &() // cast 
 {
   return *this->ptr_;
 }
 
 ACE_INLINE
-IR::HomeDescription_var::operator ::IR::HomeDescription &() const // cast 
+IR_HomeDescription_var::operator ::IR_HomeDescription &() const // cast 
 {
   return *this->ptr_;
 }
 
 // variable-size types only
 ACE_INLINE
-IR::HomeDescription_var::operator ::IR::HomeDescription *&() // cast 
+IR_HomeDescription_var::operator ::IR_HomeDescription *&() // cast 
 {
   return this->ptr_;
 }
 
-ACE_INLINE const ::IR::HomeDescription &
-IR::HomeDescription_var::in (void) const
+ACE_INLINE const ::IR_HomeDescription &
+IR_HomeDescription_var::in (void) const
 {
   return *this->ptr_;
 }
 
-ACE_INLINE ::IR::HomeDescription &
-IR::HomeDescription_var::inout (void)
+ACE_INLINE ::IR_HomeDescription &
+IR_HomeDescription_var::inout (void)
 {
   return *this->ptr_;
 }
 
 // mapping for variable size 
-ACE_INLINE ::IR::HomeDescription *&
-IR::HomeDescription_var::out (void)
+ACE_INLINE ::IR_HomeDescription *&
+IR_HomeDescription_var::out (void)
 {
   delete this->ptr_;
   this->ptr_ = 0;
   return this->ptr_;
 }
 
-ACE_INLINE ::IR::HomeDescription *
-IR::HomeDescription_var::_retn (void)
+ACE_INLINE ::IR_HomeDescription *
+IR_HomeDescription_var::_retn (void)
 {
-  ::IR::HomeDescription *tmp = this->ptr_;
+  ::IR_HomeDescription *tmp = this->ptr_;
   this->ptr_ = 0;
   return tmp;
 }
 
-ACE_INLINE ::IR::HomeDescription *
-IR::HomeDescription_var::ptr (void) const
+ACE_INLINE ::IR_HomeDescription *
+IR_HomeDescription_var::ptr (void) const
 {
   return this->ptr_;
 }
 
 // *************************************************************
-// Inline operations for class IR::HomeDescription_out
+// Inline operations for class IR_HomeDescription_out
 // *************************************************************
 
 ACE_INLINE
-IR::HomeDescription_out::HomeDescription_out (::IR::HomeDescription *&p)
+IR_HomeDescription_out::IR_HomeDescription_out (::IR_HomeDescription *&p)
   : ptr_ (p)
 {
   this->ptr_ = 0;
 }
 
 ACE_INLINE
-IR::HomeDescription_out::HomeDescription_out (HomeDescription_var &p) // constructor from _var
+IR_HomeDescription_out::IR_HomeDescription_out (IR_HomeDescription_var &p) // constructor from _var
   : ptr_ (p.out ())
 {
   delete this->ptr_;
@@ -20928,56 +19791,56 @@
 }
 
 ACE_INLINE
-IR::HomeDescription_out::HomeDescription_out (const ::IR::HomeDescription_out &p) // copy constructor
-  : ptr_ (ACE_const_cast (HomeDescription_out&, p).ptr_)
+IR_HomeDescription_out::IR_HomeDescription_out (const ::IR_HomeDescription_out &p) // copy constructor
+  : ptr_ (ACE_const_cast (IR_HomeDescription_out&, p).ptr_)
 {}
 
-ACE_INLINE IR::HomeDescription_out &
-IR::HomeDescription_out::operator= (const ::IR::HomeDescription_out &p)
+ACE_INLINE IR_HomeDescription_out &
+IR_HomeDescription_out::operator= (const ::IR_HomeDescription_out &p)
 {
-  this->ptr_ = ACE_const_cast (HomeDescription_out&, p).ptr_;
+  this->ptr_ = ACE_const_cast (IR_HomeDescription_out&, p).ptr_;
   return *this;
 }
 
-ACE_INLINE IR::HomeDescription_out &
-IR::HomeDescription_out::operator= (HomeDescription *p)
+ACE_INLINE IR_HomeDescription_out &
+IR_HomeDescription_out::operator= (IR_HomeDescription *p)
 {
   this->ptr_ = p;
   return *this;
 }
 
 ACE_INLINE 
-IR::HomeDescription_out::operator ::IR::HomeDescription *&() // cast
+IR_HomeDescription_out::operator ::IR_HomeDescription *&() // cast
 {
   return this->ptr_;
 }
 
-ACE_INLINE ::IR::HomeDescription *&
-IR::HomeDescription_out::ptr (void) // ptr
+ACE_INLINE ::IR_HomeDescription *&
+IR_HomeDescription_out::ptr (void) // ptr
 {
   return this->ptr_;
 }
 
-ACE_INLINE ::IR::HomeDescription *
-IR::HomeDescription_out::operator-> (void)
+ACE_INLINE ::IR_HomeDescription *
+IR_HomeDescription_out::operator-> (void)
 {
   return this->ptr_;
 }
 
-ACE_INLINE CORBA::Boolean operator<< (TAO_OutputCDR &strm, const IR::DefinitionKind &_tao_enumval)
+ACE_INLINE CORBA::Boolean operator<< (TAO_OutputCDR &strm, const IR_DefinitionKind &_tao_enumval)
 {
   CORBA::ULong _tao_temp = _tao_enumval;
   return strm << _tao_temp;
 }
 
-ACE_INLINE CORBA::Boolean operator>> (TAO_InputCDR &strm, IR::DefinitionKind &_tao_enumval)
+ACE_INLINE CORBA::Boolean operator>> (TAO_InputCDR &strm, IR_DefinitionKind &_tao_enumval)
 {
   CORBA::ULong _tao_temp = 0;
   CORBA::Boolean _tao_result = strm >> _tao_temp;
   
   if (_tao_result == 1)
     {
-      _tao_enumval = ACE_static_cast (IR::DefinitionKind, _tao_temp);
+      _tao_enumval = ACE_static_cast (IR_DefinitionKind, _tao_temp);
     }
   
   return _tao_result;
@@ -20985,19 +19848,8 @@
 
 ACE_INLINE CORBA::Boolean
 operator<< (
-    TAO_OutputCDR &,
-    const CORBA::IRObject_ptr
-  );
-ACE_INLINE CORBA::Boolean
-operator>> (
-    TAO_InputCDR &,
-    CORBA::IRObject_ptr &
-  );
-
-ACE_INLINE CORBA::Boolean
-operator<< (
     TAO_OutputCDR &strm,
-    const CORBA::IRObject_ptr _tao_objref
+    const CORBA_IRObject_ptr _tao_objref
   )
 {
   CORBA::Object_ptr _tao_corba_obj = _tao_objref;
@@ -21007,7 +19859,7 @@
 ACE_INLINE CORBA::Boolean
 operator>> (
     TAO_InputCDR &strm,
-    CORBA::IRObject_ptr &_tao_objref
+    CORBA_IRObject_ptr &_tao_objref
   )
 {
   ACE_TRY_NEW_ENV
@@ -21017,7 +19869,7 @@
       return 0;
     // narrow to the right type
     _tao_objref =
-      CORBA::IRObject::_unchecked_narrow (
+      CORBA_IRObject::_unchecked_narrow (
           obj.in (),
           ACE_TRY_ENV
         );
@@ -21032,48 +19884,7 @@
   return 0;
 }
 
-ACE_INLINE CORBA::Boolean
-operator<< (
-    TAO_OutputCDR &,
-    const IR::Contained_ptr
-  );
-ACE_INLINE CORBA::Boolean
-operator>> (
-    TAO_InputCDR &,
-    IR::Contained_ptr &
-  );
-ACE_INLINE CORBA::Boolean
-operator<< (
-    TAO_OutputCDR &,
-    const IR::Repository_ptr
-  );
-ACE_INLINE CORBA::Boolean
-operator>> (
-    TAO_InputCDR &,
-    IR::Repository_ptr &
-  );
-ACE_INLINE CORBA::Boolean
-operator<< (
-    TAO_OutputCDR &,
-    const IR::Container_ptr
-  );
-ACE_INLINE CORBA::Boolean
-operator>> (
-    TAO_InputCDR &,
-    IR::Container_ptr &
-  );
-ACE_INLINE CORBA::Boolean
-operator<< (
-    TAO_OutputCDR &,
-    const IR::Contained_ptr
-  );
-ACE_INLINE CORBA::Boolean
-operator>> (
-    TAO_InputCDR &,
-    IR::Contained_ptr &
-  );
-
-ACE_INLINE CORBA::Boolean operator<< (TAO_OutputCDR &strm, const IR::Contained::Description &_tao_aggregate)
+ACE_INLINE CORBA::Boolean operator<< (TAO_OutputCDR &strm, const IR_Contained::Description &_tao_aggregate)
 {
   if (
     (strm << _tao_aggregate.kind) &&
@@ -21085,7 +19896,7 @@
   
 }
 
-ACE_INLINE CORBA::Boolean operator>> (TAO_InputCDR &strm, IR::Contained::Description &_tao_aggregate)
+ACE_INLINE CORBA::Boolean operator>> (TAO_InputCDR &strm, IR_Contained::Description &_tao_aggregate)
 {
   if (
     (strm >> _tao_aggregate.kind) &&
@@ -21100,7 +19911,7 @@
 ACE_INLINE CORBA::Boolean
 operator<< (
     TAO_OutputCDR &strm,
-    const IR::Contained_ptr _tao_objref
+    const IR_Contained_ptr _tao_objref
   )
 {
   CORBA::Object_ptr _tao_corba_obj = _tao_objref;
@@ -21110,7 +19921,7 @@
 ACE_INLINE CORBA::Boolean
 operator>> (
     TAO_InputCDR &strm,
-    IR::Contained_ptr &_tao_objref
+    IR_Contained_ptr &_tao_objref
   )
 {
   ACE_TRY_NEW_ENV
@@ -21120,7 +19931,7 @@
       return 0;
     // narrow to the right type
     _tao_objref =
-      IR::Contained::_unchecked_narrow (
+      IR_Contained::_unchecked_narrow (
           obj.in (),
           ACE_TRY_ENV
         );
@@ -21135,417 +19946,133 @@
   return 0;
 }
 
-ACE_INLINE CORBA::Boolean
-operator<< (
+CORBA::Boolean TAO_IFR_Client_Export operator<< (
     TAO_OutputCDR &,
-    const IR::ModuleDef_ptr
+    const IR_InterfaceDefSeq &
   );
-ACE_INLINE CORBA::Boolean
-operator>> (
+
+CORBA::Boolean TAO_IFR_Client_Export operator>> (
     TAO_InputCDR &,
-    IR::ModuleDef_ptr &
+    IR_InterfaceDefSeq &
   );
-ACE_INLINE CORBA::Boolean
-operator<< (
+
+CORBA::Boolean TAO_IFR_Client_Export operator<< (
     TAO_OutputCDR &,
-    const IR::ConstantDef_ptr
+    const IR_ValueDefSeq &
   );
-ACE_INLINE CORBA::Boolean
-operator>> (
+
+CORBA::Boolean TAO_IFR_Client_Export operator>> (
     TAO_InputCDR &,
-    IR::ConstantDef_ptr &
+    IR_ValueDefSeq &
   );
-ACE_INLINE CORBA::Boolean
-operator<< (
+
+CORBA::Boolean TAO_IFR_Client_Export operator<< (
     TAO_OutputCDR &,
-    const IR::IDLType_ptr
+    const IR_ComponentDefSeq &
   );
-ACE_INLINE CORBA::Boolean
-operator>> (
+
+CORBA::Boolean TAO_IFR_Client_Export operator>> (
     TAO_InputCDR &,
-    IR::IDLType_ptr &
+    IR_ComponentDefSeq &
   );
-ACE_INLINE CORBA::Boolean
-operator<< (
+
+CORBA::Boolean TAO_IFR_Client_Export operator<< (
     TAO_OutputCDR &,
-    const IR::StructDef_ptr
+    const IR_ProvidesDefSeq &
   );
-ACE_INLINE CORBA::Boolean
-operator>> (
+
+CORBA::Boolean TAO_IFR_Client_Export operator>> (
     TAO_InputCDR &,
-    IR::StructDef_ptr &
+    IR_ProvidesDefSeq &
   );
-ACE_INLINE CORBA::Boolean
-operator<< (
+
+CORBA::Boolean TAO_IFR_Client_Export operator<< (
     TAO_OutputCDR &,
-    const IR::UnionDef_ptr
+    const IR_UsesDefSeq &
   );
-ACE_INLINE CORBA::Boolean
-operator>> (
+
+CORBA::Boolean TAO_IFR_Client_Export operator>> (
     TAO_InputCDR &,
-    IR::UnionDef_ptr &
+    IR_UsesDefSeq &
   );
-ACE_INLINE CORBA::Boolean
-operator<< (
+
+CORBA::Boolean TAO_IFR_Client_Export operator<< (
     TAO_OutputCDR &,
-    const IR::EnumDef_ptr
+    const IR_HomeDefSeq &
   );
-ACE_INLINE CORBA::Boolean
-operator>> (
+
+CORBA::Boolean TAO_IFR_Client_Export operator>> (
     TAO_InputCDR &,
-    IR::EnumDef_ptr &
+    IR_HomeDefSeq &
   );
-ACE_INLINE CORBA::Boolean
-operator<< (
+
+CORBA::Boolean TAO_IFR_Client_Export operator<< (
     TAO_OutputCDR &,
-    const IR::AliasDef_ptr
+    const IR_EmitsDefSeq &
   );
-ACE_INLINE CORBA::Boolean
-operator>> (
+CORBA::Boolean TAO_IFR_Client_Export operator>> (
     TAO_InputCDR &,
-    IR::AliasDef_ptr &
+    IR_EmitsDefSeq &
   );
-ACE_INLINE CORBA::Boolean
-operator<< (
+
+CORBA::Boolean TAO_IFR_Client_Export operator<< (
     TAO_OutputCDR &,
-    const IR::InterfaceDef_ptr
+    const IR_PublishesDefSeq &
   );
-ACE_INLINE CORBA::Boolean
-operator>> (
+CORBA::Boolean TAO_IFR_Client_Export operator>> (
     TAO_InputCDR &,
-    IR::InterfaceDef_ptr &
+    IR_PublishesDefSeq &
   );
-ACE_INLINE CORBA::Boolean
-operator<< (
+
+CORBA::Boolean TAO_IFR_Client_Export operator<< (
     TAO_OutputCDR &,
-    const IR::ExceptionDef_ptr
+    const IR_ConsumesDefSeq &
   );
-ACE_INLINE CORBA::Boolean
-operator>> (
+CORBA::Boolean TAO_IFR_Client_Export operator>> (
     TAO_InputCDR &,
-    IR::ExceptionDef_ptr &
+    IR_ConsumesDefSeq &
   );
-ACE_INLINE CORBA::Boolean
-operator<< (
+
+CORBA::Boolean TAO_IFR_Client_Export operator<< (
     TAO_OutputCDR &,
-    const IR::NativeDef_ptr
+    const IR_FactoryDefSeq &
   );
-ACE_INLINE CORBA::Boolean
-operator>> (
+CORBA::Boolean TAO_IFR_Client_Export operator>> (
     TAO_InputCDR &,
-    IR::NativeDef_ptr &
+    IR_FactoryDefSeq &
   );
 
-#if !defined _TAO_CDR_OP_IR_InterfaceDefSeq_I_
-#define _TAO_CDR_OP_IR_InterfaceDefSeq_I_
-
 CORBA::Boolean TAO_IFR_Client_Export operator<< (
     TAO_OutputCDR &,
-    const IR::InterfaceDefSeq &
+    const IR_FinderDefSeq &
   );
 CORBA::Boolean TAO_IFR_Client_Export operator>> (
     TAO_InputCDR &,
-    IR::InterfaceDefSeq &
+    IR_FinderDefSeq &
   );
 
-#endif /* _TAO_CDR_OP_IR_InterfaceDefSeq_I_ */
-
-ACE_INLINE CORBA::Boolean
-operator<< (
+CORBA::Boolean TAO_IFR_Client_Export operator<< (
     TAO_OutputCDR &,
-    const IR::ValueDef_ptr
-  );
-ACE_INLINE CORBA::Boolean
-operator>> (
-    TAO_InputCDR &,
-    IR::ValueDef_ptr &
-  );
-
-#if !defined _TAO_CDR_OP_IR_ValueDefSeq_I_
-#define _TAO_CDR_OP_IR_ValueDefSeq_I_
-
-CORBA::Boolean TAO_IFR_Client_Export operator<< (
-    TAO_OutputCDR &,
-    const IR::ValueDefSeq &
-  );
-CORBA::Boolean TAO_IFR_Client_Export operator>> (
-    TAO_InputCDR &,
-    IR::ValueDefSeq &
-  );
-
-#endif /* _TAO_CDR_OP_IR_ValueDefSeq_I_ */
-
-ACE_INLINE CORBA::Boolean
-operator<< (
-    TAO_OutputCDR &,
-    const IR::ValueBoxDef_ptr
-  );
-ACE_INLINE CORBA::Boolean
-operator>> (
-    TAO_InputCDR &,
-    IR::ValueBoxDef_ptr &
-  );
-ACE_INLINE CORBA::Boolean
-operator<< (
-    TAO_OutputCDR &,
-    const IR::ComponentDef_ptr
-  );
-ACE_INLINE CORBA::Boolean
-operator>> (
-    TAO_InputCDR &,
-    IR::ComponentDef_ptr &
-  );
-
-#if !defined _TAO_CDR_OP_IR_ComponentDefSeq_I_
-#define _TAO_CDR_OP_IR_ComponentDefSeq_I_
-
-CORBA::Boolean TAO_IFR_Client_Export operator<< (
-    TAO_OutputCDR &,
-    const IR::ComponentDefSeq &
-  );
-CORBA::Boolean TAO_IFR_Client_Export operator>> (
-    TAO_InputCDR &,
-    IR::ComponentDefSeq &
-  );
-
-#endif /* _TAO_CDR_OP_IR_ComponentDefSeq_I_ */
-
-ACE_INLINE CORBA::Boolean
-operator<< (
-    TAO_OutputCDR &,
-    const IR::ProvidesDef_ptr
-  );
-ACE_INLINE CORBA::Boolean
-operator>> (
-    TAO_InputCDR &,
-    IR::ProvidesDef_ptr &
-  );
-
-#if !defined _TAO_CDR_OP_IR_ProvidesDefSeq_I_
-#define _TAO_CDR_OP_IR_ProvidesDefSeq_I_
-
-CORBA::Boolean TAO_IFR_Client_Export operator<< (
-    TAO_OutputCDR &,
-    const IR::ProvidesDefSeq &
-  );
-CORBA::Boolean TAO_IFR_Client_Export operator>> (
-    TAO_InputCDR &,
-    IR::ProvidesDefSeq &
-  );
-
-#endif /* _TAO_CDR_OP_IR_ProvidesDefSeq_I_ */
-
-ACE_INLINE CORBA::Boolean
-operator<< (
-    TAO_OutputCDR &,
-    const IR::UsesDef_ptr
-  );
-ACE_INLINE CORBA::Boolean
-operator>> (
-    TAO_InputCDR &,
-    IR::UsesDef_ptr &
-  );
-
-#if !defined _TAO_CDR_OP_IR_UsesDefSeq_I_
-#define _TAO_CDR_OP_IR_UsesDefSeq_I_
-
-CORBA::Boolean TAO_IFR_Client_Export operator<< (
-    TAO_OutputCDR &,
-    const IR::UsesDefSeq &
-  );
-CORBA::Boolean TAO_IFR_Client_Export operator>> (
-    TAO_InputCDR &,
-    IR::UsesDefSeq &
-  );
-
-#endif /* _TAO_CDR_OP_IR_UsesDefSeq_I_ */
-
-ACE_INLINE CORBA::Boolean
-operator<< (
-    TAO_OutputCDR &,
-    const IR::HomeDef_ptr
-  );
-ACE_INLINE CORBA::Boolean
-operator>> (
-    TAO_InputCDR &,
-    IR::HomeDef_ptr &
-  );
-
-#if !defined _TAO_CDR_OP_IR_HomeDefSeq_I_
-#define _TAO_CDR_OP_IR_HomeDefSeq_I_
-
-CORBA::Boolean TAO_IFR_Client_Export operator<< (
-    TAO_OutputCDR &,
-    const IR::HomeDefSeq &
-  );
-CORBA::Boolean TAO_IFR_Client_Export operator>> (
-    TAO_InputCDR &,
-    IR::HomeDefSeq &
-  );
-
-#endif /* _TAO_CDR_OP_IR_HomeDefSeq_I_ */
-
-ACE_INLINE CORBA::Boolean
-operator<< (
-    TAO_OutputCDR &,
-    const IR::EventDef_ptr
-  );
-ACE_INLINE CORBA::Boolean
-operator>> (
-    TAO_InputCDR &,
-    IR::EventDef_ptr &
-  );
-ACE_INLINE CORBA::Boolean
-operator<< (
-    TAO_OutputCDR &,
-    const IR::EmitsDef_ptr
-  );
-ACE_INLINE CORBA::Boolean
-operator>> (
-    TAO_InputCDR &,
-    IR::EmitsDef_ptr &
-  );
-
-#if !defined _TAO_CDR_OP_IR_EmitsDefSeq_I_
-#define _TAO_CDR_OP_IR_EmitsDefSeq_I_
-
-CORBA::Boolean TAO_IFR_Client_Export operator<< (
-    TAO_OutputCDR &,
-    const IR::EmitsDefSeq &
-  );
-CORBA::Boolean TAO_IFR_Client_Export operator>> (
-    TAO_InputCDR &,
-    IR::EmitsDefSeq &
-  );
-
-#endif /* _TAO_CDR_OP_IR_EmitsDefSeq_I_ */
-
-ACE_INLINE CORBA::Boolean
-operator<< (
-    TAO_OutputCDR &,
-    const IR::PublishesDef_ptr
-  );
-ACE_INLINE CORBA::Boolean
-operator>> (
-    TAO_InputCDR &,
-    IR::PublishesDef_ptr &
-  );
-
-#if !defined _TAO_CDR_OP_IR_PublishesDefSeq_I_
-#define _TAO_CDR_OP_IR_PublishesDefSeq_I_
-
-CORBA::Boolean TAO_IFR_Client_Export operator<< (
-    TAO_OutputCDR &,
-    const IR::PublishesDefSeq &
-  );
-CORBA::Boolean TAO_IFR_Client_Export operator>> (
-    TAO_InputCDR &,
-    IR::PublishesDefSeq &
-  );
-
-#endif /* _TAO_CDR_OP_IR_PublishesDefSeq_I_ */
-
-ACE_INLINE CORBA::Boolean
-operator<< (
-    TAO_OutputCDR &,
-    const IR::ConsumesDef_ptr
-  );
-ACE_INLINE CORBA::Boolean
-operator>> (
-    TAO_InputCDR &,
-    IR::ConsumesDef_ptr &
-  );
-
-#if !defined _TAO_CDR_OP_IR_ConsumesDefSeq_I_
-#define _TAO_CDR_OP_IR_ConsumesDefSeq_I_
-
-CORBA::Boolean TAO_IFR_Client_Export operator<< (
-    TAO_OutputCDR &,
-    const IR::ConsumesDefSeq &
+    const IR_ContainedSeq &
   );
 CORBA::Boolean TAO_IFR_Client_Export operator>> (
     TAO_InputCDR &,
-    IR::ConsumesDefSeq &
+    IR_ContainedSeq &
   );
 
-#endif /* _TAO_CDR_OP_IR_ConsumesDefSeq_I_ */
-
 ACE_INLINE CORBA::Boolean
 operator<< (
     TAO_OutputCDR &,
-    const IR::FactoryDef_ptr
-  );
-ACE_INLINE CORBA::Boolean
-operator>> (
-    TAO_InputCDR &,
-    IR::FactoryDef_ptr &
+    const IR_IDLType_ptr
   );
 
-#if !defined _TAO_CDR_OP_IR_FactoryDefSeq_I_
-#define _TAO_CDR_OP_IR_FactoryDefSeq_I_
-
-CORBA::Boolean TAO_IFR_Client_Export operator<< (
-    TAO_OutputCDR &,
-    const IR::FactoryDefSeq &
-  );
-CORBA::Boolean TAO_IFR_Client_Export operator>> (
-    TAO_InputCDR &,
-    IR::FactoryDefSeq &
-  );
-
-#endif /* _TAO_CDR_OP_IR_FactoryDefSeq_I_ */
-
-ACE_INLINE CORBA::Boolean
-operator<< (
-    TAO_OutputCDR &,
-    const IR::FinderDef_ptr
-  );
 ACE_INLINE CORBA::Boolean
 operator>> (
     TAO_InputCDR &,
-    IR::FinderDef_ptr &
+    IR_IDLType_ptr &
   );
 
-#if !defined _TAO_CDR_OP_IR_FinderDefSeq_I_
-#define _TAO_CDR_OP_IR_FinderDefSeq_I_
-
-CORBA::Boolean TAO_IFR_Client_Export operator<< (
-    TAO_OutputCDR &,
-    const IR::FinderDefSeq &
-  );
-CORBA::Boolean TAO_IFR_Client_Export operator>> (
-    TAO_InputCDR &,
-    IR::FinderDefSeq &
-  );
-
-#endif /* _TAO_CDR_OP_IR_FinderDefSeq_I_ */
-
-ACE_INLINE CORBA::Boolean
-operator<< (
-    TAO_OutputCDR &,
-    const IR::PrimaryKeyDef_ptr
-  );
-ACE_INLINE CORBA::Boolean
-operator>> (
-    TAO_InputCDR &,
-    IR::PrimaryKeyDef_ptr &
-  );
-
-#if !defined _TAO_CDR_OP_IR_ContainedSeq_I_
-#define _TAO_CDR_OP_IR_ContainedSeq_I_
-
-CORBA::Boolean TAO_IFR_Client_Export operator<< (
-    TAO_OutputCDR &,
-    const IR::ContainedSeq &
-  );
-CORBA::Boolean TAO_IFR_Client_Export operator>> (
-    TAO_InputCDR &,
-    IR::ContainedSeq &
-  );
-
-#endif /* _TAO_CDR_OP_IR_ContainedSeq_I_ */
-
-ACE_INLINE CORBA::Boolean operator<< (TAO_OutputCDR &strm, const IR::StructMember &_tao_aggregate)
+ACE_INLINE CORBA::Boolean operator<< (TAO_OutputCDR &strm, const IR_StructMember &_tao_aggregate)
 {
   if (
     (strm << _tao_aggregate.name.in ()) &&
@@ -21558,7 +20085,7 @@
   
 }
 
-ACE_INLINE CORBA::Boolean operator>> (TAO_InputCDR &strm, IR::StructMember &_tao_aggregate)
+ACE_INLINE CORBA::Boolean operator>> (TAO_InputCDR &strm, IR_StructMember &_tao_aggregate)
 {
   if (
     (strm >> _tao_aggregate.name.out ()) &&
@@ -21571,22 +20098,16 @@
   
 }
 
-
-#if !defined _TAO_CDR_OP_IR_StructMemberSeq_I_
-#define _TAO_CDR_OP_IR_StructMemberSeq_I_
-
 CORBA::Boolean TAO_IFR_Client_Export operator<< (
     TAO_OutputCDR &,
-    const IR::StructMemberSeq &
+    const IR_StructMemberSeq &
   );
 CORBA::Boolean TAO_IFR_Client_Export operator>> (
     TAO_InputCDR &,
-    IR::StructMemberSeq &
+    IR_StructMemberSeq &
   );
 
-#endif /* _TAO_CDR_OP_IR_StructMemberSeq_I_ */
-
-ACE_INLINE CORBA::Boolean operator<< (TAO_OutputCDR &strm, const IR::Initializer &_tao_aggregate)
+ACE_INLINE CORBA::Boolean operator<< (TAO_OutputCDR &strm, const IR_Initializer &_tao_aggregate)
 {
   if (
     (strm << _tao_aggregate.members) &&
@@ -21598,7 +20119,7 @@
   
 }
 
-ACE_INLINE CORBA::Boolean operator>> (TAO_InputCDR &strm, IR::Initializer &_tao_aggregate)
+ACE_INLINE CORBA::Boolean operator>> (TAO_InputCDR &strm, IR_Initializer &_tao_aggregate)
 {
   if (
     (strm >> _tao_aggregate.members) &&
@@ -21610,22 +20131,16 @@
   
 }
 
-
-#if !defined _TAO_CDR_OP_IR_InitializerSeq_I_
-#define _TAO_CDR_OP_IR_InitializerSeq_I_
-
 CORBA::Boolean TAO_IFR_Client_Export operator<< (
     TAO_OutputCDR &,
-    const IR::InitializerSeq &
+    const IR_InitializerSeq &
   );
 CORBA::Boolean TAO_IFR_Client_Export operator>> (
     TAO_InputCDR &,
-    IR::InitializerSeq &
+    IR_InitializerSeq &
   );
 
-#endif /* _TAO_CDR_OP_IR_InitializerSeq_I_ */
-
-ACE_INLINE CORBA::Boolean operator<< (TAO_OutputCDR &strm, const IR::UnionMember &_tao_aggregate)
+ACE_INLINE CORBA::Boolean operator<< (TAO_OutputCDR &strm, const IR_UnionMember &_tao_aggregate)
 {
   if (
     (strm << _tao_aggregate.name.in ()) &&
@@ -21639,7 +20154,7 @@
   
 }
 
-ACE_INLINE CORBA::Boolean operator>> (TAO_InputCDR &strm, IR::UnionMember &_tao_aggregate)
+ACE_INLINE CORBA::Boolean operator>> (TAO_InputCDR &strm, IR_UnionMember &_tao_aggregate)
 {
   if (
     (strm >> _tao_aggregate.name.out ()) &&
@@ -21653,48 +20168,25 @@
   
 }
 
-
-#if !defined _TAO_CDR_OP_IR_UnionMemberSeq_I_
-#define _TAO_CDR_OP_IR_UnionMemberSeq_I_
-
 CORBA::Boolean TAO_IFR_Client_Export operator<< (
     TAO_OutputCDR &,
-    const IR::UnionMemberSeq &
+    const IR_UnionMemberSeq &
   );
 CORBA::Boolean TAO_IFR_Client_Export operator>> (
     TAO_InputCDR &,
-    IR::UnionMemberSeq &
+    IR_UnionMemberSeq &
   );
 
-#endif /* _TAO_CDR_OP_IR_UnionMemberSeq_I_ */
-
-
-#if !defined _TAO_CDR_OP_IR_EnumMemberSeq_I_
-#define _TAO_CDR_OP_IR_EnumMemberSeq_I_
-
 CORBA::Boolean TAO_IFR_Client_Export operator<< (
     TAO_OutputCDR &,
-    const IR::EnumMemberSeq &
+    const IR_EnumMemberSeq &
   );
 CORBA::Boolean TAO_IFR_Client_Export operator>> (
     TAO_InputCDR &,
-    IR::EnumMemberSeq &
-  );
-
-#endif /* _TAO_CDR_OP_IR_EnumMemberSeq_I_ */
-
-ACE_INLINE CORBA::Boolean
-operator<< (
-    TAO_OutputCDR &,
-    const IR::Container_ptr
-  );
-ACE_INLINE CORBA::Boolean
-operator>> (
-    TAO_InputCDR &,
-    IR::Container_ptr &
+    IR_EnumMemberSeq &
   );
 
-ACE_INLINE CORBA::Boolean operator<< (TAO_OutputCDR &strm, const IR::Container::Description &_tao_aggregate)
+ACE_INLINE CORBA::Boolean operator<< (TAO_OutputCDR &strm, const IR_Container::Description &_tao_aggregate)
 {
   if (
     (strm << _tao_aggregate.contained_object.in ()) &&
@@ -21707,7 +20199,7 @@
   
 }
 
-ACE_INLINE CORBA::Boolean operator>> (TAO_InputCDR &strm, IR::Container::Description &_tao_aggregate)
+ACE_INLINE CORBA::Boolean operator>> (TAO_InputCDR &strm, IR_Container::Description &_tao_aggregate)
 {
   if (
     (strm >> _tao_aggregate.contained_object.out ()) &&
@@ -21720,25 +20212,19 @@
   
 }
 
-
-#if !defined _TAO_CDR_OP_IR_Container_DescriptionSeq_I_
-#define _TAO_CDR_OP_IR_Container_DescriptionSeq_I_
-
 CORBA::Boolean TAO_IFR_Client_Export operator<< (
     TAO_OutputCDR &,
-    const IR::Container::DescriptionSeq &
+    const IR_Container::DescriptionSeq &
   );
 CORBA::Boolean TAO_IFR_Client_Export operator>> (
     TAO_InputCDR &,
-    IR::Container::DescriptionSeq &
+    IR_Container::DescriptionSeq &
   );
 
-#endif /* _TAO_CDR_OP_IR_Container_DescriptionSeq_I_ */
-
 ACE_INLINE CORBA::Boolean
 operator<< (
     TAO_OutputCDR &strm,
-    const IR::Container_ptr _tao_objref
+    const IR_Container_ptr _tao_objref
   )
 {
   CORBA::Object_ptr _tao_corba_obj = _tao_objref;
@@ -21748,7 +20234,7 @@
 ACE_INLINE CORBA::Boolean
 operator>> (
     TAO_InputCDR &strm,
-    IR::Container_ptr &_tao_objref
+    IR_Container_ptr &_tao_objref
   )
 {
   ACE_TRY_NEW_ENV
@@ -21758,7 +20244,7 @@
       return 0;
     // narrow to the right type
     _tao_objref =
-      IR::Container::_unchecked_narrow (
+      IR_Container::_unchecked_narrow (
           obj.in (),
           ACE_TRY_ENV
         );
@@ -21775,19 +20261,8 @@
 
 ACE_INLINE CORBA::Boolean
 operator<< (
-    TAO_OutputCDR &,
-    const IR::IDLType_ptr
-  );
-ACE_INLINE CORBA::Boolean
-operator>> (
-    TAO_InputCDR &,
-    IR::IDLType_ptr &
-  );
-
-ACE_INLINE CORBA::Boolean
-operator<< (
     TAO_OutputCDR &strm,
-    const IR::IDLType_ptr _tao_objref
+    const IR_IDLType_ptr _tao_objref
   )
 {
   CORBA::Object_ptr _tao_corba_obj = _tao_objref;
@@ -21797,7 +20272,7 @@
 ACE_INLINE CORBA::Boolean
 operator>> (
     TAO_InputCDR &strm,
-    IR::IDLType_ptr &_tao_objref
+    IR_IDLType_ptr &_tao_objref
   )
 {
   ACE_TRY_NEW_ENV
@@ -21807,7 +20282,7 @@
       return 0;
     // narrow to the right type
     _tao_objref =
-      IR::IDLType::_unchecked_narrow (
+      IR_IDLType::_unchecked_narrow (
           obj.in (),
           ACE_TRY_ENV
         );
@@ -21822,80 +20297,20 @@
   return 0;
 }
 
-ACE_INLINE CORBA::Boolean
-operator<< (
-    TAO_OutputCDR &,
-    const IR::PrimitiveDef_ptr
-  );
-ACE_INLINE CORBA::Boolean
-operator>> (
-    TAO_InputCDR &,
-    IR::PrimitiveDef_ptr &
-  );
-ACE_INLINE CORBA::Boolean
-operator<< (
-    TAO_OutputCDR &,
-    const IR::StringDef_ptr
-  );
-ACE_INLINE CORBA::Boolean
-operator>> (
-    TAO_InputCDR &,
-    IR::StringDef_ptr &
-  );
-ACE_INLINE CORBA::Boolean
-operator<< (
-    TAO_OutputCDR &,
-    const IR::SequenceDef_ptr
-  );
-ACE_INLINE CORBA::Boolean
-operator>> (
-    TAO_InputCDR &,
-    IR::SequenceDef_ptr &
-  );
-ACE_INLINE CORBA::Boolean
-operator<< (
-    TAO_OutputCDR &,
-    const IR::ArrayDef_ptr
-  );
-ACE_INLINE CORBA::Boolean
-operator>> (
-    TAO_InputCDR &,
-    IR::ArrayDef_ptr &
-  );
-ACE_INLINE CORBA::Boolean
-operator<< (
-    TAO_OutputCDR &,
-    const IR::WstringDef_ptr
-  );
-ACE_INLINE CORBA::Boolean
-operator>> (
-    TAO_InputCDR &,
-    IR::WstringDef_ptr &
-  );
-ACE_INLINE CORBA::Boolean
-operator<< (
-    TAO_OutputCDR &,
-    const IR::FixedDef_ptr
-  );
-ACE_INLINE CORBA::Boolean
-operator>> (
-    TAO_InputCDR &,
-    IR::FixedDef_ptr &
-  );
-ACE_INLINE CORBA::Boolean operator<< (TAO_OutputCDR &strm, const IR::PrimitiveKind &_tao_enumval)
+ACE_INLINE CORBA::Boolean operator<< (TAO_OutputCDR &strm, const IR_PrimitiveKind &_tao_enumval)
 {
   CORBA::ULong _tao_temp = _tao_enumval;
   return strm << _tao_temp;
 }
 
-ACE_INLINE CORBA::Boolean operator>> (TAO_InputCDR &strm, IR::PrimitiveKind &_tao_enumval)
+ACE_INLINE CORBA::Boolean operator>> (TAO_InputCDR &strm, IR_PrimitiveKind &_tao_enumval)
 {
   CORBA::ULong _tao_temp = 0;
   CORBA::Boolean _tao_result = strm >> _tao_temp;
   
   if (_tao_result == 1)
     {
-      _tao_enumval = ACE_static_cast (IR::PrimitiveKind, _tao_temp);
+      _tao_enumval = ACE_static_cast (IR_PrimitiveKind, _tao_temp);
     }
   
   return _tao_result;
@@ -21903,19 +20318,8 @@
 
 ACE_INLINE CORBA::Boolean
 operator<< (
-    TAO_OutputCDR &,
-    const IR::Repository_ptr
-  );
-ACE_INLINE CORBA::Boolean
-operator>> (
-    TAO_InputCDR &,
-    IR::Repository_ptr &
-  );
-
-ACE_INLINE CORBA::Boolean
-operator<< (
     TAO_OutputCDR &strm,
-    const IR::Repository_ptr _tao_objref
+    const IR_Repository_ptr _tao_objref
   )
 {
   CORBA::Object_ptr _tao_corba_obj = _tao_objref;
@@ -21925,7 +20329,7 @@
 ACE_INLINE CORBA::Boolean
 operator>> (
     TAO_InputCDR &strm,
-    IR::Repository_ptr &_tao_objref
+    IR_Repository_ptr &_tao_objref
   )
 {
   ACE_TRY_NEW_ENV
@@ -21935,7 +20339,7 @@
       return 0;
     // narrow to the right type
     _tao_objref =
-      IR::Repository::_unchecked_narrow (
+      IR_Repository::_unchecked_narrow (
           obj.in (),
           ACE_TRY_ENV
         );
@@ -21952,19 +20356,8 @@
 
 ACE_INLINE CORBA::Boolean
 operator<< (
-    TAO_OutputCDR &,
-    const IR::ComponentRepository_ptr
-  );
-ACE_INLINE CORBA::Boolean
-operator>> (
-    TAO_InputCDR &,
-    IR::ComponentRepository_ptr &
-  );
-
-ACE_INLINE CORBA::Boolean
-operator<< (
     TAO_OutputCDR &strm,
-    const IR::ComponentRepository_ptr _tao_objref
+    const IR_ComponentRepository_ptr _tao_objref
   )
 {
   CORBA::Object_ptr _tao_corba_obj = _tao_objref;
@@ -21974,7 +20367,7 @@
 ACE_INLINE CORBA::Boolean
 operator>> (
     TAO_InputCDR &strm,
-    IR::ComponentRepository_ptr &_tao_objref
+    IR_ComponentRepository_ptr &_tao_objref
   )
 {
   ACE_TRY_NEW_ENV
@@ -21984,7 +20377,7 @@
       return 0;
     // narrow to the right type
     _tao_objref =
-      IR::ComponentRepository::_unchecked_narrow (
+      IR_ComponentRepository::_unchecked_narrow (
           obj.in (),
           ACE_TRY_ENV
         );
@@ -22001,19 +20394,8 @@
 
 ACE_INLINE CORBA::Boolean
 operator<< (
-    TAO_OutputCDR &,
-    const IR::ModuleDef_ptr
-  );
-ACE_INLINE CORBA::Boolean
-operator>> (
-    TAO_InputCDR &,
-    IR::ModuleDef_ptr &
-  );
-
-ACE_INLINE CORBA::Boolean
-operator<< (
     TAO_OutputCDR &strm,
-    const IR::ModuleDef_ptr _tao_objref
+    const IR_ModuleDef_ptr _tao_objref
   )
 {
   CORBA::Object_ptr _tao_corba_obj = _tao_objref;
@@ -22023,7 +20405,7 @@
 ACE_INLINE CORBA::Boolean
 operator>> (
     TAO_InputCDR &strm,
-    IR::ModuleDef_ptr &_tao_objref
+    IR_ModuleDef_ptr &_tao_objref
   )
 {
   ACE_TRY_NEW_ENV
@@ -22033,7 +20415,7 @@
       return 0;
     // narrow to the right type
     _tao_objref =
-      IR::ModuleDef::_unchecked_narrow (
+      IR_ModuleDef::_unchecked_narrow (
           obj.in (),
           ACE_TRY_ENV
         );
@@ -22048,7 +20430,7 @@
   return 0;
 }
 
-ACE_INLINE CORBA::Boolean operator<< (TAO_OutputCDR &strm, const IR::ModuleDescription &_tao_aggregate)
+ACE_INLINE CORBA::Boolean operator<< (TAO_OutputCDR &strm, const IR_ModuleDescription &_tao_aggregate)
 {
   if (
     (strm << _tao_aggregate.name.in ()) &&
@@ -22062,7 +20444,7 @@
   
 }
 
-ACE_INLINE CORBA::Boolean operator>> (TAO_InputCDR &strm, IR::ModuleDescription &_tao_aggregate)
+ACE_INLINE CORBA::Boolean operator>> (TAO_InputCDR &strm, IR_ModuleDescription &_tao_aggregate)
 {
   if (
     (strm >> _tao_aggregate.name.out ()) &&
@@ -22078,19 +20460,8 @@
 
 ACE_INLINE CORBA::Boolean
 operator<< (
-    TAO_OutputCDR &,
-    const IR::ConstantDef_ptr
-  );
-ACE_INLINE CORBA::Boolean
-operator>> (
-    TAO_InputCDR &,
-    IR::ConstantDef_ptr &
-  );
-
-ACE_INLINE CORBA::Boolean
-operator<< (
     TAO_OutputCDR &strm,
-    const IR::ConstantDef_ptr _tao_objref
+    const IR_ConstantDef_ptr _tao_objref
   )
 {
   CORBA::Object_ptr _tao_corba_obj = _tao_objref;
@@ -22100,7 +20471,7 @@
 ACE_INLINE CORBA::Boolean
 operator>> (
     TAO_InputCDR &strm,
-    IR::ConstantDef_ptr &_tao_objref
+    IR_ConstantDef_ptr &_tao_objref
   )
 {
   ACE_TRY_NEW_ENV
@@ -22110,7 +20481,7 @@
       return 0;
     // narrow to the right type
     _tao_objref =
-      IR::ConstantDef::_unchecked_narrow (
+      IR_ConstantDef::_unchecked_narrow (
           obj.in (),
           ACE_TRY_ENV
         );
@@ -22125,7 +20496,7 @@
   return 0;
 }
 
-ACE_INLINE CORBA::Boolean operator<< (TAO_OutputCDR &strm, const IR::ConstantDescription &_tao_aggregate)
+ACE_INLINE CORBA::Boolean operator<< (TAO_OutputCDR &strm, const IR_ConstantDescription &_tao_aggregate)
 {
   if (
     (strm << _tao_aggregate.name.in ()) &&
@@ -22141,7 +20512,7 @@
   
 }
 
-ACE_INLINE CORBA::Boolean operator>> (TAO_InputCDR &strm, IR::ConstantDescription &_tao_aggregate)
+ACE_INLINE CORBA::Boolean operator>> (TAO_InputCDR &strm, IR_ConstantDescription &_tao_aggregate)
 {
   if (
     (strm >> _tao_aggregate.name.out ()) &&
@@ -22159,19 +20530,8 @@
 
 ACE_INLINE CORBA::Boolean
 operator<< (
-    TAO_OutputCDR &,
-    const IR::TypedefDef_ptr
-  );
-ACE_INLINE CORBA::Boolean
-operator>> (
-    TAO_InputCDR &,
-    IR::TypedefDef_ptr &
-  );
-
-ACE_INLINE CORBA::Boolean
-operator<< (
     TAO_OutputCDR &strm,
-    const IR::TypedefDef_ptr _tao_objref
+    const IR_TypedefDef_ptr _tao_objref
   )
 {
   CORBA::Object_ptr _tao_corba_obj = _tao_objref;
@@ -22181,7 +20541,7 @@
 ACE_INLINE CORBA::Boolean
 operator>> (
     TAO_InputCDR &strm,
-    IR::TypedefDef_ptr &_tao_objref
+    IR_TypedefDef_ptr &_tao_objref
   )
 {
   ACE_TRY_NEW_ENV
@@ -22191,7 +20551,7 @@
       return 0;
     // narrow to the right type
     _tao_objref =
-      IR::TypedefDef::_unchecked_narrow (
+      IR_TypedefDef::_unchecked_narrow (
           obj.in (),
           ACE_TRY_ENV
         );
@@ -22206,7 +20566,7 @@
   return 0;
 }
 
-ACE_INLINE CORBA::Boolean operator<< (TAO_OutputCDR &strm, const IR::TypeDescription &_tao_aggregate)
+ACE_INLINE CORBA::Boolean operator<< (TAO_OutputCDR &strm, const IR_TypeDescription &_tao_aggregate)
 {
   if (
     (strm << _tao_aggregate.name.in ()) &&
@@ -22221,7 +20581,7 @@
   
 }
 
-ACE_INLINE CORBA::Boolean operator>> (TAO_InputCDR &strm, IR::TypeDescription &_tao_aggregate)
+ACE_INLINE CORBA::Boolean operator>> (TAO_InputCDR &strm, IR_TypeDescription &_tao_aggregate)
 {
   if (
     (strm >> _tao_aggregate.name.out ()) &&
@@ -22238,19 +20598,8 @@
 
 ACE_INLINE CORBA::Boolean
 operator<< (
-    TAO_OutputCDR &,
-    const IR::StructDef_ptr
-  );
-ACE_INLINE CORBA::Boolean
-operator>> (
-    TAO_InputCDR &,
-    IR::StructDef_ptr &
-  );
-
-ACE_INLINE CORBA::Boolean
-operator<< (
     TAO_OutputCDR &strm,
-    const IR::StructDef_ptr _tao_objref
+    const IR_StructDef_ptr _tao_objref
   )
 {
   CORBA::Object_ptr _tao_corba_obj = _tao_objref;
@@ -22260,7 +20609,7 @@
 ACE_INLINE CORBA::Boolean
 operator>> (
     TAO_InputCDR &strm,
-    IR::StructDef_ptr &_tao_objref
+    IR_StructDef_ptr &_tao_objref
   )
 {
   ACE_TRY_NEW_ENV
@@ -22270,7 +20619,7 @@
       return 0;
     // narrow to the right type
     _tao_objref =
-      IR::StructDef::_unchecked_narrow (
+      IR_StructDef::_unchecked_narrow (
           obj.in (),
           ACE_TRY_ENV
         );
@@ -22287,19 +20636,8 @@
 
 ACE_INLINE CORBA::Boolean
 operator<< (
-    TAO_OutputCDR &,
-    const IR::UnionDef_ptr
-  );
-ACE_INLINE CORBA::Boolean
-operator>> (
-    TAO_InputCDR &,
-    IR::UnionDef_ptr &
-  );
-
-ACE_INLINE CORBA::Boolean
-operator<< (
     TAO_OutputCDR &strm,
-    const IR::UnionDef_ptr _tao_objref
+    const IR_UnionDef_ptr _tao_objref
   )
 {
   CORBA::Object_ptr _tao_corba_obj = _tao_objref;
@@ -22309,7 +20647,7 @@
 ACE_INLINE CORBA::Boolean
 operator>> (
     TAO_InputCDR &strm,
-    IR::UnionDef_ptr &_tao_objref
+    IR_UnionDef_ptr &_tao_objref
   )
 {
   ACE_TRY_NEW_ENV
@@ -22319,7 +20657,7 @@
       return 0;
     // narrow to the right type
     _tao_objref =
-      IR::UnionDef::_unchecked_narrow (
+      IR_UnionDef::_unchecked_narrow (
           obj.in (),
           ACE_TRY_ENV
         );
@@ -22336,19 +20674,8 @@
 
 ACE_INLINE CORBA::Boolean
 operator<< (
-    TAO_OutputCDR &,
-    const IR::EnumDef_ptr
-  );
-ACE_INLINE CORBA::Boolean
-operator>> (
-    TAO_InputCDR &,
-    IR::EnumDef_ptr &
-  );
-
-ACE_INLINE CORBA::Boolean
-operator<< (
     TAO_OutputCDR &strm,
-    const IR::EnumDef_ptr _tao_objref
+    const IR_EnumDef_ptr _tao_objref
   )
 {
   CORBA::Object_ptr _tao_corba_obj = _tao_objref;
@@ -22358,7 +20685,7 @@
 ACE_INLINE CORBA::Boolean
 operator>> (
     TAO_InputCDR &strm,
-    IR::EnumDef_ptr &_tao_objref
+    IR_EnumDef_ptr &_tao_objref
   )
 {
   ACE_TRY_NEW_ENV
@@ -22368,7 +20695,7 @@
       return 0;
     // narrow to the right type
     _tao_objref =
-      IR::EnumDef::_unchecked_narrow (
+      IR_EnumDef::_unchecked_narrow (
           obj.in (),
           ACE_TRY_ENV
         );
@@ -22381,23 +20708,12 @@
   }
   ACE_ENDTRY;
   return 0;
-}
-
-ACE_INLINE CORBA::Boolean
-operator<< (
-    TAO_OutputCDR &,
-    const IR::AliasDef_ptr
-  );
-ACE_INLINE CORBA::Boolean
-operator>> (
-    TAO_InputCDR &,
-    IR::AliasDef_ptr &
-  );
+}
 
 ACE_INLINE CORBA::Boolean
 operator<< (
     TAO_OutputCDR &strm,
-    const IR::AliasDef_ptr _tao_objref
+    const IR_AliasDef_ptr _tao_objref
   )
 {
   CORBA::Object_ptr _tao_corba_obj = _tao_objref;
@@ -22407,7 +20723,7 @@
 ACE_INLINE CORBA::Boolean
 operator>> (
     TAO_InputCDR &strm,
-    IR::AliasDef_ptr &_tao_objref
+    IR_AliasDef_ptr &_tao_objref
   )
 {
   ACE_TRY_NEW_ENV
@@ -22417,7 +20733,7 @@
       return 0;
     // narrow to the right type
     _tao_objref =
-      IR::AliasDef::_unchecked_narrow (
+      IR_AliasDef::_unchecked_narrow (
           obj.in (),
           ACE_TRY_ENV
         );
@@ -22434,19 +20750,8 @@
 
 ACE_INLINE CORBA::Boolean
 operator<< (
-    TAO_OutputCDR &,
-    const IR::NativeDef_ptr
-  );
-ACE_INLINE CORBA::Boolean
-operator>> (
-    TAO_InputCDR &,
-    IR::NativeDef_ptr &
-  );
-
-ACE_INLINE CORBA::Boolean
-operator<< (
     TAO_OutputCDR &strm,
-    const IR::NativeDef_ptr _tao_objref
+    const IR_NativeDef_ptr _tao_objref
   )
 {
   CORBA::Object_ptr _tao_corba_obj = _tao_objref;
@@ -22456,7 +20761,7 @@
 ACE_INLINE CORBA::Boolean
 operator>> (
     TAO_InputCDR &strm,
-    IR::NativeDef_ptr &_tao_objref
+    IR_NativeDef_ptr &_tao_objref
   )
 {
   ACE_TRY_NEW_ENV
@@ -22466,7 +20771,7 @@
       return 0;
     // narrow to the right type
     _tao_objref =
-      IR::NativeDef::_unchecked_narrow (
+      IR_NativeDef::_unchecked_narrow (
           obj.in (),
           ACE_TRY_ENV
         );
@@ -22483,19 +20788,8 @@
 
 ACE_INLINE CORBA::Boolean
 operator<< (
-    TAO_OutputCDR &,
-    const IR::PrimitiveDef_ptr
-  );
-ACE_INLINE CORBA::Boolean
-operator>> (
-    TAO_InputCDR &,
-    IR::PrimitiveDef_ptr &
-  );
-
-ACE_INLINE CORBA::Boolean
-operator<< (
     TAO_OutputCDR &strm,
-    const IR::PrimitiveDef_ptr _tao_objref
+    const IR_PrimitiveDef_ptr _tao_objref
   )
 {
   CORBA::Object_ptr _tao_corba_obj = _tao_objref;
@@ -22505,7 +20799,7 @@
 ACE_INLINE CORBA::Boolean
 operator>> (
     TAO_InputCDR &strm,
-    IR::PrimitiveDef_ptr &_tao_objref
+    IR_PrimitiveDef_ptr &_tao_objref
   )
 {
   ACE_TRY_NEW_ENV
@@ -22515,7 +20809,7 @@
       return 0;
     // narrow to the right type
     _tao_objref =
-      IR::PrimitiveDef::_unchecked_narrow (
+      IR_PrimitiveDef::_unchecked_narrow (
           obj.in (),
           ACE_TRY_ENV
         );
@@ -22532,19 +20826,8 @@
 
 ACE_INLINE CORBA::Boolean
 operator<< (
-    TAO_OutputCDR &,
-    const IR::StringDef_ptr
-  );
-ACE_INLINE CORBA::Boolean
-operator>> (
-    TAO_InputCDR &,
-    IR::StringDef_ptr &
-  );
-
-ACE_INLINE CORBA::Boolean
-operator<< (
     TAO_OutputCDR &strm,
-    const IR::StringDef_ptr _tao_objref
+    const IR_StringDef_ptr _tao_objref
   )
 {
   CORBA::Object_ptr _tao_corba_obj = _tao_objref;
@@ -22554,7 +20837,7 @@
 ACE_INLINE CORBA::Boolean
 operator>> (
     TAO_InputCDR &strm,
-    IR::StringDef_ptr &_tao_objref
+    IR_StringDef_ptr &_tao_objref
   )
 {
   ACE_TRY_NEW_ENV
@@ -22564,7 +20847,7 @@
       return 0;
     // narrow to the right type
     _tao_objref =
-      IR::StringDef::_unchecked_narrow (
+      IR_StringDef::_unchecked_narrow (
           obj.in (),
           ACE_TRY_ENV
         );
@@ -22581,19 +20864,8 @@
 
 ACE_INLINE CORBA::Boolean
 operator<< (
-    TAO_OutputCDR &,
-    const IR::WstringDef_ptr
-  );
-ACE_INLINE CORBA::Boolean
-operator>> (
-    TAO_InputCDR &,
-    IR::WstringDef_ptr &
-  );
-
-ACE_INLINE CORBA::Boolean
-operator<< (
     TAO_OutputCDR &strm,
-    const IR::WstringDef_ptr _tao_objref
+    const IR_WstringDef_ptr _tao_objref
   )
 {
   CORBA::Object_ptr _tao_corba_obj = _tao_objref;
@@ -22603,7 +20875,7 @@
 ACE_INLINE CORBA::Boolean
 operator>> (
     TAO_InputCDR &strm,
-    IR::WstringDef_ptr &_tao_objref
+    IR_WstringDef_ptr &_tao_objref
   )
 {
   ACE_TRY_NEW_ENV
@@ -22613,7 +20885,7 @@
       return 0;
     // narrow to the right type
     _tao_objref =
-      IR::WstringDef::_unchecked_narrow (
+      IR_WstringDef::_unchecked_narrow (
           obj.in (),
           ACE_TRY_ENV
         );
@@ -22630,19 +20902,8 @@
 
 ACE_INLINE CORBA::Boolean
 operator<< (
-    TAO_OutputCDR &,
-    const IR::FixedDef_ptr
-  );
-ACE_INLINE CORBA::Boolean
-operator>> (
-    TAO_InputCDR &,
-    IR::FixedDef_ptr &
-  );
-
-ACE_INLINE CORBA::Boolean
-operator<< (
     TAO_OutputCDR &strm,
-    const IR::FixedDef_ptr _tao_objref
+    const IR_FixedDef_ptr _tao_objref
   )
 {
   CORBA::Object_ptr _tao_corba_obj = _tao_objref;
@@ -22652,7 +20913,7 @@
 ACE_INLINE CORBA::Boolean
 operator>> (
     TAO_InputCDR &strm,
-    IR::FixedDef_ptr &_tao_objref
+    IR_FixedDef_ptr &_tao_objref
   )
 {
   ACE_TRY_NEW_ENV
@@ -22662,7 +20923,7 @@
       return 0;
     // narrow to the right type
     _tao_objref =
-      IR::FixedDef::_unchecked_narrow (
+      IR_FixedDef::_unchecked_narrow (
           obj.in (),
           ACE_TRY_ENV
         );
@@ -22679,19 +20940,8 @@
 
 ACE_INLINE CORBA::Boolean
 operator<< (
-    TAO_OutputCDR &,
-    const IR::SequenceDef_ptr
-  );
-ACE_INLINE CORBA::Boolean
-operator>> (
-    TAO_InputCDR &,
-    IR::SequenceDef_ptr &
-  );
-
-ACE_INLINE CORBA::Boolean
-operator<< (
     TAO_OutputCDR &strm,
-    const IR::SequenceDef_ptr _tao_objref
+    const IR_SequenceDef_ptr _tao_objref
   )
 {
   CORBA::Object_ptr _tao_corba_obj = _tao_objref;
@@ -22701,7 +20951,7 @@
 ACE_INLINE CORBA::Boolean
 operator>> (
     TAO_InputCDR &strm,
-    IR::SequenceDef_ptr &_tao_objref
+    IR_SequenceDef_ptr &_tao_objref
   )
 {
   ACE_TRY_NEW_ENV
@@ -22711,7 +20961,7 @@
       return 0;
     // narrow to the right type
     _tao_objref =
-      IR::SequenceDef::_unchecked_narrow (
+      IR_SequenceDef::_unchecked_narrow (
           obj.in (),
           ACE_TRY_ENV
         );
@@ -22728,19 +20978,8 @@
 
 ACE_INLINE CORBA::Boolean
 operator<< (
-    TAO_OutputCDR &,
-    const IR::ArrayDef_ptr
-  );
-ACE_INLINE CORBA::Boolean
-operator>> (
-    TAO_InputCDR &,
-    IR::ArrayDef_ptr &
-  );
-
-ACE_INLINE CORBA::Boolean
-operator<< (
     TAO_OutputCDR &strm,
-    const IR::ArrayDef_ptr _tao_objref
+    const IR_ArrayDef_ptr _tao_objref
   )
 {
   CORBA::Object_ptr _tao_corba_obj = _tao_objref;
@@ -22750,7 +20989,7 @@
 ACE_INLINE CORBA::Boolean
 operator>> (
     TAO_InputCDR &strm,
-    IR::ArrayDef_ptr &_tao_objref
+    IR_ArrayDef_ptr &_tao_objref
   )
 {
   ACE_TRY_NEW_ENV
@@ -22760,7 +20999,7 @@
       return 0;
     // narrow to the right type
     _tao_objref =
-      IR::ArrayDef::_unchecked_narrow (
+      IR_ArrayDef::_unchecked_narrow (
           obj.in (),
           ACE_TRY_ENV
         );
@@ -22777,19 +21016,8 @@
 
 ACE_INLINE CORBA::Boolean
 operator<< (
-    TAO_OutputCDR &,
-    const IR::ExceptionDef_ptr
-  );
-ACE_INLINE CORBA::Boolean
-operator>> (
-    TAO_InputCDR &,
-    IR::ExceptionDef_ptr &
-  );
-
-ACE_INLINE CORBA::Boolean
-operator<< (
     TAO_OutputCDR &strm,
-    const IR::ExceptionDef_ptr _tao_objref
+    const IR_ExceptionDef_ptr _tao_objref
   )
 {
   CORBA::Object_ptr _tao_corba_obj = _tao_objref;
@@ -22799,7 +21027,7 @@
 ACE_INLINE CORBA::Boolean
 operator>> (
     TAO_InputCDR &strm,
-    IR::ExceptionDef_ptr &_tao_objref
+    IR_ExceptionDef_ptr &_tao_objref
   )
 {
   ACE_TRY_NEW_ENV
@@ -22809,7 +21037,7 @@
       return 0;
     // narrow to the right type
     _tao_objref =
-      IR::ExceptionDef::_unchecked_narrow (
+      IR_ExceptionDef::_unchecked_narrow (
           obj.in (),
           ACE_TRY_ENV
         );
@@ -22824,7 +21052,7 @@
   return 0;
 }
 
-ACE_INLINE CORBA::Boolean operator<< (TAO_OutputCDR &strm, const IR::ExceptionDescription &_tao_aggregate)
+ACE_INLINE CORBA::Boolean operator<< (TAO_OutputCDR &strm, const IR_ExceptionDescription &_tao_aggregate)
 {
   if (
     (strm << _tao_aggregate.name.in ()) &&
@@ -22839,7 +21067,7 @@
   
 }
 
-ACE_INLINE CORBA::Boolean operator>> (TAO_InputCDR &strm, IR::ExceptionDescription &_tao_aggregate)
+ACE_INLINE CORBA::Boolean operator>> (TAO_InputCDR &strm, IR_ExceptionDescription &_tao_aggregate)
 {
   if (
     (strm >> _tao_aggregate.name.out ()) &&
@@ -22854,50 +21082,38 @@
   
 }
 
-
-#if !defined _TAO_CDR_OP_IR_ExceptionDefSeq_I_
-#define _TAO_CDR_OP_IR_ExceptionDefSeq_I_
-
 CORBA::Boolean TAO_IFR_Client_Export operator<< (
     TAO_OutputCDR &,
-    const IR::ExceptionDefSeq &
+    const IR_ExceptionDefSeq &
   );
 CORBA::Boolean TAO_IFR_Client_Export operator>> (
     TAO_InputCDR &,
-    IR::ExceptionDefSeq &
+    IR_ExceptionDefSeq &
   );
 
-#endif /* _TAO_CDR_OP_IR_ExceptionDefSeq_I_ */
-
-
-#if !defined _TAO_CDR_OP_IR_ExcDescriptionSeq_I_
-#define _TAO_CDR_OP_IR_ExcDescriptionSeq_I_
-
 CORBA::Boolean TAO_IFR_Client_Export operator<< (
     TAO_OutputCDR &,
-    const IR::ExcDescriptionSeq &
+    const IR_ExcDescriptionSeq &
   );
 CORBA::Boolean TAO_IFR_Client_Export operator>> (
     TAO_InputCDR &,
-    IR::ExcDescriptionSeq &
+    IR_ExcDescriptionSeq &
   );
 
-#endif /* _TAO_CDR_OP_IR_ExcDescriptionSeq_I_ */
-
-ACE_INLINE CORBA::Boolean operator<< (TAO_OutputCDR &strm, const IR::AttributeMode &_tao_enumval)
+ACE_INLINE CORBA::Boolean operator<< (TAO_OutputCDR &strm, const IR_AttributeMode &_tao_enumval)
 {
   CORBA::ULong _tao_temp = _tao_enumval;
   return strm << _tao_temp;
 }
 
-ACE_INLINE CORBA::Boolean operator>> (TAO_InputCDR &strm, IR::AttributeMode &_tao_enumval)
+ACE_INLINE CORBA::Boolean operator>> (TAO_InputCDR &strm, IR_AttributeMode &_tao_enumval)
 {
   CORBA::ULong _tao_temp = 0;
   CORBA::Boolean _tao_result = strm >> _tao_temp;
   
   if (_tao_result == 1)
     {
-      _tao_enumval = ACE_static_cast (IR::AttributeMode, _tao_temp);
+      _tao_enumval = ACE_static_cast (IR_AttributeMode, _tao_temp);
     }
   
   return _tao_result;
@@ -22905,19 +21121,8 @@
 
 ACE_INLINE CORBA::Boolean
 operator<< (
-    TAO_OutputCDR &,
-    const IR::AttributeDef_ptr
-  );
-ACE_INLINE CORBA::Boolean
-operator>> (
-    TAO_InputCDR &,
-    IR::AttributeDef_ptr &
-  );
-
-ACE_INLINE CORBA::Boolean
-operator<< (
     TAO_OutputCDR &strm,
-    const IR::AttributeDef_ptr _tao_objref
+    const IR_AttributeDef_ptr _tao_objref
   )
 {
   CORBA::Object_ptr _tao_corba_obj = _tao_objref;
@@ -22927,7 +21132,7 @@
 ACE_INLINE CORBA::Boolean
 operator>> (
     TAO_InputCDR &strm,
-    IR::AttributeDef_ptr &_tao_objref
+    IR_AttributeDef_ptr &_tao_objref
   )
 {
   ACE_TRY_NEW_ENV
@@ -22937,7 +21142,7 @@
       return 0;
     // narrow to the right type
     _tao_objref =
-      IR::AttributeDef::_unchecked_narrow (
+      IR_AttributeDef::_unchecked_narrow (
           obj.in (),
           ACE_TRY_ENV
         );
@@ -22952,7 +21157,7 @@
   return 0;
 }
 
-ACE_INLINE CORBA::Boolean operator<< (TAO_OutputCDR &strm, const IR::AttributeDescription &_tao_aggregate)
+ACE_INLINE CORBA::Boolean operator<< (TAO_OutputCDR &strm, const IR_AttributeDescription &_tao_aggregate)
 {
   if (
     (strm << _tao_aggregate.name.in ()) &&
@@ -22970,7 +21175,7 @@
   
 }
 
-ACE_INLINE CORBA::Boolean operator>> (TAO_InputCDR &strm, IR::AttributeDescription &_tao_aggregate)
+ACE_INLINE CORBA::Boolean operator>> (TAO_InputCDR &strm, IR_AttributeDescription &_tao_aggregate)
 {
   if (
     (strm >> _tao_aggregate.name.out ()) &&
@@ -22988,45 +21193,45 @@
   
 }
 
-ACE_INLINE CORBA::Boolean operator<< (TAO_OutputCDR &strm, const IR::OperationMode &_tao_enumval)
+ACE_INLINE CORBA::Boolean operator<< (TAO_OutputCDR &strm, const IR_OperationMode &_tao_enumval)
 {
   CORBA::ULong _tao_temp = _tao_enumval;
   return strm << _tao_temp;
 }
 
-ACE_INLINE CORBA::Boolean operator>> (TAO_InputCDR &strm, IR::OperationMode &_tao_enumval)
+ACE_INLINE CORBA::Boolean operator>> (TAO_InputCDR &strm, IR_OperationMode &_tao_enumval)
 {
   CORBA::ULong _tao_temp = 0;
   CORBA::Boolean _tao_result = strm >> _tao_temp;
   
   if (_tao_result == 1)
     {
-      _tao_enumval = ACE_static_cast (IR::OperationMode, _tao_temp);
+      _tao_enumval = ACE_static_cast (IR_OperationMode, _tao_temp);
     }
   
   return _tao_result;
 }
 
-ACE_INLINE CORBA::Boolean operator<< (TAO_OutputCDR &strm, const IR::ParameterMode &_tao_enumval)
+ACE_INLINE CORBA::Boolean operator<< (TAO_OutputCDR &strm, const IR_ParameterMode &_tao_enumval)
 {
   CORBA::ULong _tao_temp = _tao_enumval;
   return strm << _tao_temp;
 }
 
-ACE_INLINE CORBA::Boolean operator>> (TAO_InputCDR &strm, IR::ParameterMode &_tao_enumval)
+ACE_INLINE CORBA::Boolean operator>> (TAO_InputCDR &strm, IR_ParameterMode &_tao_enumval)
 {
   CORBA::ULong _tao_temp = 0;
   CORBA::Boolean _tao_result = strm >> _tao_temp;
   
   if (_tao_result == 1)
     {
-      _tao_enumval = ACE_static_cast (IR::ParameterMode, _tao_temp);
+      _tao_enumval = ACE_static_cast (IR_ParameterMode, _tao_temp);
     }
   
   return _tao_result;
 }
 
-ACE_INLINE CORBA::Boolean operator<< (TAO_OutputCDR &strm, const IR::ParameterDescription &_tao_aggregate)
+ACE_INLINE CORBA::Boolean operator<< (TAO_OutputCDR &strm, const IR_ParameterDescription &_tao_aggregate)
 {
   if (
     (strm << _tao_aggregate.name.in ()) &&
@@ -23040,7 +21245,7 @@
   
 }
 
-ACE_INLINE CORBA::Boolean operator>> (TAO_InputCDR &strm, IR::ParameterDescription &_tao_aggregate)
+ACE_INLINE CORBA::Boolean operator>> (TAO_InputCDR &strm, IR_ParameterDescription &_tao_aggregate)
 {
   if (
     (strm >> _tao_aggregate.name.out ()) &&
@@ -23054,51 +21259,28 @@
   
 }
 
-
-#if !defined _TAO_CDR_OP_IR_ParDescriptionSeq_I_
-#define _TAO_CDR_OP_IR_ParDescriptionSeq_I_
-
 CORBA::Boolean TAO_IFR_Client_Export operator<< (
     TAO_OutputCDR &,
-    const IR::ParDescriptionSeq &
+    const IR_ParDescriptionSeq &
   );
 CORBA::Boolean TAO_IFR_Client_Export operator>> (
     TAO_InputCDR &,
-    IR::ParDescriptionSeq &
+    IR_ParDescriptionSeq &
   );
 
-#endif /* _TAO_CDR_OP_IR_ParDescriptionSeq_I_ */
-
-
-#if !defined _TAO_CDR_OP_IR_ContextIdSeq_I_
-#define _TAO_CDR_OP_IR_ContextIdSeq_I_
-
 CORBA::Boolean TAO_IFR_Client_Export operator<< (
     TAO_OutputCDR &,
-    const IR::ContextIdSeq &
+    const IR_ContextIdSeq &
   );
 CORBA::Boolean TAO_IFR_Client_Export operator>> (
     TAO_InputCDR &,
-    IR::ContextIdSeq &
-  );
-
-#endif /* _TAO_CDR_OP_IR_ContextIdSeq_I_ */
-
-ACE_INLINE CORBA::Boolean
-operator<< (
-    TAO_OutputCDR &,
-    const IR::OperationDef_ptr
-  );
-ACE_INLINE CORBA::Boolean
-operator>> (
-    TAO_InputCDR &,
-    IR::OperationDef_ptr &
+    IR_ContextIdSeq &
   );
 
 ACE_INLINE CORBA::Boolean
 operator<< (
     TAO_OutputCDR &strm,
-    const IR::OperationDef_ptr _tao_objref
+    const IR_OperationDef_ptr _tao_objref
   )
 {
   CORBA::Object_ptr _tao_corba_obj = _tao_objref;
@@ -23108,7 +21290,7 @@
 ACE_INLINE CORBA::Boolean
 operator>> (
     TAO_InputCDR &strm,
-    IR::OperationDef_ptr &_tao_objref
+    IR_OperationDef_ptr &_tao_objref
   )
 {
   ACE_TRY_NEW_ENV
@@ -23118,7 +21300,7 @@
       return 0;
     // narrow to the right type
     _tao_objref =
-      IR::OperationDef::_unchecked_narrow (
+      IR_OperationDef::_unchecked_narrow (
           obj.in (),
           ACE_TRY_ENV
         );
@@ -23133,7 +21315,7 @@
   return 0;
 }
 
-ACE_INLINE CORBA::Boolean operator<< (TAO_OutputCDR &strm, const IR::OperationDescription &_tao_aggregate)
+ACE_INLINE CORBA::Boolean operator<< (TAO_OutputCDR &strm, const IR_OperationDescription &_tao_aggregate)
 {
   if (
     (strm << _tao_aggregate.name.in ()) &&
@@ -23152,7 +21334,7 @@
   
 }
 
-ACE_INLINE CORBA::Boolean operator>> (TAO_InputCDR &strm, IR::OperationDescription &_tao_aggregate)
+ACE_INLINE CORBA::Boolean operator>> (TAO_InputCDR &strm, IR_OperationDescription &_tao_aggregate)
 {
   if (
     (strm >> _tao_aggregate.name.out ()) &&
@@ -23171,66 +21353,37 @@
   
 }
 
-
-#if !defined _TAO_CDR_OP_IR_RepositoryIdSeq_I_
-#define _TAO_CDR_OP_IR_RepositoryIdSeq_I_
-
 CORBA::Boolean TAO_IFR_Client_Export operator<< (
     TAO_OutputCDR &,
-    const IR::RepositoryIdSeq &
+    const IR_RepositoryIdSeq &
   );
 CORBA::Boolean TAO_IFR_Client_Export operator>> (
     TAO_InputCDR &,
-    IR::RepositoryIdSeq &
+    IR_RepositoryIdSeq &
   );
 
-#endif /* _TAO_CDR_OP_IR_RepositoryIdSeq_I_ */
-
-
-#if !defined _TAO_CDR_OP_IR_OpDescriptionSeq_I_
-#define _TAO_CDR_OP_IR_OpDescriptionSeq_I_
-
 CORBA::Boolean TAO_IFR_Client_Export operator<< (
     TAO_OutputCDR &,
-    const IR::OpDescriptionSeq &
+    const IR_OpDescriptionSeq &
   );
 CORBA::Boolean TAO_IFR_Client_Export operator>> (
     TAO_InputCDR &,
-    IR::OpDescriptionSeq &
+    IR_OpDescriptionSeq &
   );
 
-#endif /* _TAO_CDR_OP_IR_OpDescriptionSeq_I_ */
-
-
-#if !defined _TAO_CDR_OP_IR_AttrDescriptionSeq_I_
-#define _TAO_CDR_OP_IR_AttrDescriptionSeq_I_
-
 CORBA::Boolean TAO_IFR_Client_Export operator<< (
     TAO_OutputCDR &,
-    const IR::AttrDescriptionSeq &
+    const IR_AttrDescriptionSeq &
   );
 CORBA::Boolean TAO_IFR_Client_Export operator>> (
     TAO_InputCDR &,
-    IR::AttrDescriptionSeq &
-  );
-
-#endif /* _TAO_CDR_OP_IR_AttrDescriptionSeq_I_ */
-
-ACE_INLINE CORBA::Boolean
-operator<< (
-    TAO_OutputCDR &,
-    const IR::InterfaceDef_ptr
-  );
-ACE_INLINE CORBA::Boolean
-operator>> (
-    TAO_InputCDR &,
-    IR::InterfaceDef_ptr &
+    IR_AttrDescriptionSeq &
   );
 
 ACE_INLINE CORBA::Boolean
 operator<< (
     TAO_OutputCDR &strm,
-    const IR::InterfaceDef_ptr _tao_objref
+    const IR_InterfaceDef_ptr _tao_objref
   )
 {
   CORBA::Object_ptr _tao_corba_obj = _tao_objref;
@@ -23240,7 +21393,7 @@
 ACE_INLINE CORBA::Boolean
 operator>> (
     TAO_InputCDR &strm,
-    IR::InterfaceDef_ptr &_tao_objref
+    IR_InterfaceDef_ptr &_tao_objref
   )
 {
   ACE_TRY_NEW_ENV
@@ -23250,7 +21403,7 @@
       return 0;
     // narrow to the right type
     _tao_objref =
-      IR::InterfaceDef::_unchecked_narrow (
+      IR_InterfaceDef::_unchecked_narrow (
           obj.in (),
           ACE_TRY_ENV
         );
@@ -23265,7 +21418,7 @@
   return 0;
 }
 
-ACE_INLINE CORBA::Boolean operator<< (TAO_OutputCDR &strm, const IR::InterfaceDescription &_tao_aggregate)
+ACE_INLINE CORBA::Boolean operator<< (TAO_OutputCDR &strm, const IR_InterfaceDescription &_tao_aggregate)
 {
   if (
     (strm << _tao_aggregate.name.in ()) &&
@@ -23285,7 +21438,7 @@
   
 }
 
-ACE_INLINE CORBA::Boolean operator>> (TAO_InputCDR &strm, IR::InterfaceDescription &_tao_aggregate)
+ACE_INLINE CORBA::Boolean operator>> (TAO_InputCDR &strm, IR_InterfaceDescription &_tao_aggregate)
 {
   if (
     (strm >> _tao_aggregate.name.out ()) &&
@@ -23305,7 +21458,7 @@
   
 }
 
-ACE_INLINE CORBA::Boolean operator<< (TAO_OutputCDR &strm, const IR::ValueMember &_tao_aggregate)
+ACE_INLINE CORBA::Boolean operator<< (TAO_OutputCDR &strm, const IR_ValueMember &_tao_aggregate)
 {
   if (
     (strm << _tao_aggregate.name.in ()) &&
@@ -23322,7 +21475,7 @@
   
 }
 
-ACE_INLINE CORBA::Boolean operator>> (TAO_InputCDR &strm, IR::ValueMember &_tao_aggregate)
+ACE_INLINE CORBA::Boolean operator>> (TAO_InputCDR &strm, IR_ValueMember &_tao_aggregate)
 {
   if (
     (strm >> _tao_aggregate.name.out ()) &&
@@ -23339,36 +21492,19 @@
   
 }
 
-
-#if !defined _TAO_CDR_OP_IR_ValueMemberSeq_I_
-#define _TAO_CDR_OP_IR_ValueMemberSeq_I_
-
 CORBA::Boolean TAO_IFR_Client_Export operator<< (
     TAO_OutputCDR &,
-    const IR::ValueMemberSeq &
+    const IR_ValueMemberSeq &
   );
 CORBA::Boolean TAO_IFR_Client_Export operator>> (
     TAO_InputCDR &,
-    IR::ValueMemberSeq &
-  );
-
-#endif /* _TAO_CDR_OP_IR_ValueMemberSeq_I_ */
-
-ACE_INLINE CORBA::Boolean
-operator<< (
-    TAO_OutputCDR &,
-    const IR::ValueMemberDef_ptr
-  );
-ACE_INLINE CORBA::Boolean
-operator>> (
-    TAO_InputCDR &,
-    IR::ValueMemberDef_ptr &
+    IR_ValueMemberSeq &
   );
 
 ACE_INLINE CORBA::Boolean
 operator<< (
     TAO_OutputCDR &strm,
-    const IR::ValueMemberDef_ptr _tao_objref
+    const IR_ValueMemberDef_ptr _tao_objref
   )
 {
   CORBA::Object_ptr _tao_corba_obj = _tao_objref;
@@ -23378,7 +21514,7 @@
 ACE_INLINE CORBA::Boolean
 operator>> (
     TAO_InputCDR &strm,
-    IR::ValueMemberDef_ptr &_tao_objref
+    IR_ValueMemberDef_ptr &_tao_objref
   )
 {
   ACE_TRY_NEW_ENV
@@ -23388,7 +21524,7 @@
       return 0;
     // narrow to the right type
     _tao_objref =
-      IR::ValueMemberDef::_unchecked_narrow (
+      IR_ValueMemberDef::_unchecked_narrow (
           obj.in (),
           ACE_TRY_ENV
         );
@@ -23405,19 +21541,8 @@
 
 ACE_INLINE CORBA::Boolean
 operator<< (
-    TAO_OutputCDR &,
-    const IR::ValueDef_ptr
-  );
-ACE_INLINE CORBA::Boolean
-operator>> (
-    TAO_InputCDR &,
-    IR::ValueDef_ptr &
-  );
-
-ACE_INLINE CORBA::Boolean
-operator<< (
     TAO_OutputCDR &strm,
-    const IR::ValueDef_ptr _tao_objref
+    const IR_ValueDef_ptr _tao_objref
   )
 {
   CORBA::Object_ptr _tao_corba_obj = _tao_objref;
@@ -23427,7 +21552,7 @@
 ACE_INLINE CORBA::Boolean
 operator>> (
     TAO_InputCDR &strm,
-    IR::ValueDef_ptr &_tao_objref
+    IR_ValueDef_ptr &_tao_objref
   )
 {
   ACE_TRY_NEW_ENV
@@ -23437,7 +21562,7 @@
       return 0;
     // narrow to the right type
     _tao_objref =
-      IR::ValueDef::_unchecked_narrow (
+      IR_ValueDef::_unchecked_narrow (
           obj.in (),
           ACE_TRY_ENV
         );
@@ -23452,7 +21577,7 @@
   return 0;
 }
 
-ACE_INLINE CORBA::Boolean operator<< (TAO_OutputCDR &strm, const IR::ValueDescription &_tao_aggregate)
+ACE_INLINE CORBA::Boolean operator<< (TAO_OutputCDR &strm, const IR_ValueDescription &_tao_aggregate)
 {
   if (
     (strm << _tao_aggregate.name.in ()) &&
@@ -23477,7 +21602,7 @@
   
 }
 
-ACE_INLINE CORBA::Boolean operator>> (TAO_InputCDR &strm, IR::ValueDescription &_tao_aggregate)
+ACE_INLINE CORBA::Boolean operator>> (TAO_InputCDR &strm, IR_ValueDescription &_tao_aggregate)
 {
   if (
     (strm >> _tao_aggregate.name.out ()) &&
@@ -23504,19 +21629,8 @@
 
 ACE_INLINE CORBA::Boolean
 operator<< (
-    TAO_OutputCDR &,
-    const IR::ValueBoxDef_ptr
-  );
-ACE_INLINE CORBA::Boolean
-operator>> (
-    TAO_InputCDR &,
-    IR::ValueBoxDef_ptr &
-  );
-
-ACE_INLINE CORBA::Boolean
-operator<< (
     TAO_OutputCDR &strm,
-    const IR::ValueBoxDef_ptr _tao_objref
+    const IR_ValueBoxDef_ptr _tao_objref
   )
 {
   CORBA::Object_ptr _tao_corba_obj = _tao_objref;
@@ -23526,7 +21640,7 @@
 ACE_INLINE CORBA::Boolean
 operator>> (
     TAO_InputCDR &strm,
-    IR::ValueBoxDef_ptr &_tao_objref
+    IR_ValueBoxDef_ptr &_tao_objref
   )
 {
   ACE_TRY_NEW_ENV
@@ -23536,7 +21650,7 @@
       return 0;
     // narrow to the right type
     _tao_objref =
-      IR::ValueBoxDef::_unchecked_narrow (
+      IR_ValueBoxDef::_unchecked_narrow (
           obj.in (),
           ACE_TRY_ENV
         );
@@ -23553,19 +21667,8 @@
 
 ACE_INLINE CORBA::Boolean
 operator<< (
-    TAO_OutputCDR &,
-    const IR::ProvidesDef_ptr
-  );
-ACE_INLINE CORBA::Boolean
-operator>> (
-    TAO_InputCDR &,
-    IR::ProvidesDef_ptr &
-  );
-
-ACE_INLINE CORBA::Boolean
-operator<< (
     TAO_OutputCDR &strm,
-    const IR::ProvidesDef_ptr _tao_objref
+    const IR_ProvidesDef_ptr _tao_objref
   )
 {
   CORBA::Object_ptr _tao_corba_obj = _tao_objref;
@@ -23575,7 +21678,7 @@
 ACE_INLINE CORBA::Boolean
 operator>> (
     TAO_InputCDR &strm,
-    IR::ProvidesDef_ptr &_tao_objref
+    IR_ProvidesDef_ptr &_tao_objref
   )
 {
   ACE_TRY_NEW_ENV
@@ -23585,7 +21688,7 @@
       return 0;
     // narrow to the right type
     _tao_objref =
-      IR::ProvidesDef::_unchecked_narrow (
+      IR_ProvidesDef::_unchecked_narrow (
           obj.in (),
           ACE_TRY_ENV
         );
@@ -23600,7 +21703,7 @@
   return 0;
 }
 
-ACE_INLINE CORBA::Boolean operator<< (TAO_OutputCDR &strm, const IR::ProvidesDescription &_tao_aggregate)
+ACE_INLINE CORBA::Boolean operator<< (TAO_OutputCDR &strm, const IR_ProvidesDescription &_tao_aggregate)
 {
   if (
     (strm << _tao_aggregate.name.in ()) &&
@@ -23615,7 +21718,7 @@
   
 }
 
-ACE_INLINE CORBA::Boolean operator>> (TAO_InputCDR &strm, IR::ProvidesDescription &_tao_aggregate)
+ACE_INLINE CORBA::Boolean operator>> (TAO_InputCDR &strm, IR_ProvidesDescription &_tao_aggregate)
 {
   if (
     (strm >> _tao_aggregate.name.out ()) &&
@@ -23632,19 +21735,8 @@
 
 ACE_INLINE CORBA::Boolean
 operator<< (
-    TAO_OutputCDR &,
-    const IR::UsesDef_ptr
-  );
-ACE_INLINE CORBA::Boolean
-operator>> (
-    TAO_InputCDR &,
-    IR::UsesDef_ptr &
-  );
-
-ACE_INLINE CORBA::Boolean
-operator<< (
     TAO_OutputCDR &strm,
-    const IR::UsesDef_ptr _tao_objref
+    const IR_UsesDef_ptr _tao_objref
   )
 {
   CORBA::Object_ptr _tao_corba_obj = _tao_objref;
@@ -23654,7 +21746,7 @@
 ACE_INLINE CORBA::Boolean
 operator>> (
     TAO_InputCDR &strm,
-    IR::UsesDef_ptr &_tao_objref
+    IR_UsesDef_ptr &_tao_objref
   )
 {
   ACE_TRY_NEW_ENV
@@ -23664,7 +21756,7 @@
       return 0;
     // narrow to the right type
     _tao_objref =
-      IR::UsesDef::_unchecked_narrow (
+      IR_UsesDef::_unchecked_narrow (
           obj.in (),
           ACE_TRY_ENV
         );
@@ -23679,7 +21771,7 @@
   return 0;
 }
 
-ACE_INLINE CORBA::Boolean operator<< (TAO_OutputCDR &strm, const IR::UsesDescription &_tao_aggregate)
+ACE_INLINE CORBA::Boolean operator<< (TAO_OutputCDR &strm, const IR_UsesDescription &_tao_aggregate)
 {
   if (
     (strm << _tao_aggregate.name.in ()) &&
@@ -23695,7 +21787,7 @@
   
 }
 
-ACE_INLINE CORBA::Boolean operator>> (TAO_InputCDR &strm, IR::UsesDescription &_tao_aggregate)
+ACE_INLINE CORBA::Boolean operator>> (TAO_InputCDR &strm, IR_UsesDescription &_tao_aggregate)
 {
   if (
     (strm >> _tao_aggregate.name.out ()) &&
@@ -23711,51 +21803,28 @@
   
 }
 
-
-#if !defined _TAO_CDR_OP_IR_ProvidesDescSeq_I_
-#define _TAO_CDR_OP_IR_ProvidesDescSeq_I_
-
 CORBA::Boolean TAO_IFR_Client_Export operator<< (
     TAO_OutputCDR &,
-    const IR::ProvidesDescSeq &
+    const IR_ProvidesDescSeq &
   );
 CORBA::Boolean TAO_IFR_Client_Export operator>> (
     TAO_InputCDR &,
-    IR::ProvidesDescSeq &
+    IR_ProvidesDescSeq &
   );
 
-#endif /* _TAO_CDR_OP_IR_ProvidesDescSeq_I_ */
-
-
-#if !defined _TAO_CDR_OP_IR_UsesDescSeq_I_
-#define _TAO_CDR_OP_IR_UsesDescSeq_I_
-
 CORBA::Boolean TAO_IFR_Client_Export operator<< (
     TAO_OutputCDR &,
-    const IR::UsesDescSeq &
+    const IR_UsesDescSeq &
   );
 CORBA::Boolean TAO_IFR_Client_Export operator>> (
     TAO_InputCDR &,
-    IR::UsesDescSeq &
-  );
-
-#endif /* _TAO_CDR_OP_IR_UsesDescSeq_I_ */
-
-ACE_INLINE CORBA::Boolean
-operator<< (
-    TAO_OutputCDR &,
-    const IR::EventDef_ptr
-  );
-ACE_INLINE CORBA::Boolean
-operator>> (
-    TAO_InputCDR &,
-    IR::EventDef_ptr &
+    IR_UsesDescSeq &
   );
 
 ACE_INLINE CORBA::Boolean
 operator<< (
     TAO_OutputCDR &strm,
-    const IR::EventDef_ptr _tao_objref
+    const IR_EventDef_ptr _tao_objref
   )
 {
   CORBA::Object_ptr _tao_corba_obj = _tao_objref;
@@ -23765,7 +21834,7 @@
 ACE_INLINE CORBA::Boolean
 operator>> (
     TAO_InputCDR &strm,
-    IR::EventDef_ptr &_tao_objref
+    IR_EventDef_ptr &_tao_objref
   )
 {
   ACE_TRY_NEW_ENV
@@ -23775,7 +21844,7 @@
       return 0;
     // narrow to the right type
     _tao_objref =
-      IR::EventDef::_unchecked_narrow (
+      IR_EventDef::_unchecked_narrow (
           obj.in (),
           ACE_TRY_ENV
         );
@@ -23790,7 +21859,7 @@
   return 0;
 }
 
-ACE_INLINE CORBA::Boolean operator<< (TAO_OutputCDR &strm, const IR::EventDescription &_tao_aggregate)
+ACE_INLINE CORBA::Boolean operator<< (TAO_OutputCDR &strm, const IR_EventDescription &_tao_aggregate)
 {
   if (
     (strm << _tao_aggregate.name.in ()) &&
@@ -23805,7 +21874,7 @@
   
 }
 
-ACE_INLINE CORBA::Boolean operator>> (TAO_InputCDR &strm, IR::EventDescription &_tao_aggregate)
+ACE_INLINE CORBA::Boolean operator>> (TAO_InputCDR &strm, IR_EventDescription &_tao_aggregate)
 {
   if (
     (strm >> _tao_aggregate.name.out ()) &&
@@ -23822,19 +21891,8 @@
 
 ACE_INLINE CORBA::Boolean
 operator<< (
-    TAO_OutputCDR &,
-    const IR::EmitsDef_ptr
-  );
-ACE_INLINE CORBA::Boolean
-operator>> (
-    TAO_InputCDR &,
-    IR::EmitsDef_ptr &
-  );
-
-ACE_INLINE CORBA::Boolean
-operator<< (
     TAO_OutputCDR &strm,
-    const IR::EmitsDef_ptr _tao_objref
+    const IR_EmitsDef_ptr _tao_objref
   )
 {
   CORBA::Object_ptr _tao_corba_obj = _tao_objref;
@@ -23844,7 +21902,7 @@
 ACE_INLINE CORBA::Boolean
 operator>> (
     TAO_InputCDR &strm,
-    IR::EmitsDef_ptr &_tao_objref
+    IR_EmitsDef_ptr &_tao_objref
   )
 {
   ACE_TRY_NEW_ENV
@@ -23854,7 +21912,7 @@
       return 0;
     // narrow to the right type
     _tao_objref =
-      IR::EmitsDef::_unchecked_narrow (
+      IR_EmitsDef::_unchecked_narrow (
           obj.in (),
           ACE_TRY_ENV
         );
@@ -23871,19 +21929,8 @@
 
 ACE_INLINE CORBA::Boolean
 operator<< (
-    TAO_OutputCDR &,
-    const IR::PublishesDef_ptr
-  );
-ACE_INLINE CORBA::Boolean
-operator>> (
-    TAO_InputCDR &,
-    IR::PublishesDef_ptr &
-  );
-
-ACE_INLINE CORBA::Boolean
-operator<< (
     TAO_OutputCDR &strm,
-    const IR::PublishesDef_ptr _tao_objref
+    const IR_PublishesDef_ptr _tao_objref
   )
 {
   CORBA::Object_ptr _tao_corba_obj = _tao_objref;
@@ -23893,7 +21940,7 @@
 ACE_INLINE CORBA::Boolean
 operator>> (
     TAO_InputCDR &strm,
-    IR::PublishesDef_ptr &_tao_objref
+    IR_PublishesDef_ptr &_tao_objref
   )
 {
   ACE_TRY_NEW_ENV
@@ -23903,7 +21950,7 @@
       return 0;
     // narrow to the right type
     _tao_objref =
-      IR::PublishesDef::_unchecked_narrow (
+      IR_PublishesDef::_unchecked_narrow (
           obj.in (),
           ACE_TRY_ENV
         );
@@ -23920,19 +21967,8 @@
 
 ACE_INLINE CORBA::Boolean
 operator<< (
-    TAO_OutputCDR &,
-    const IR::ConsumesDef_ptr
-  );
-ACE_INLINE CORBA::Boolean
-operator>> (
-    TAO_InputCDR &,
-    IR::ConsumesDef_ptr &
-  );
-
-ACE_INLINE CORBA::Boolean
-operator<< (
     TAO_OutputCDR &strm,
-    const IR::ConsumesDef_ptr _tao_objref
+    const IR_ConsumesDef_ptr _tao_objref
   )
 {
   CORBA::Object_ptr _tao_corba_obj = _tao_objref;
@@ -23942,7 +21978,7 @@
 ACE_INLINE CORBA::Boolean
 operator>> (
     TAO_InputCDR &strm,
-    IR::ConsumesDef_ptr &_tao_objref
+    IR_ConsumesDef_ptr &_tao_objref
   )
 {
   ACE_TRY_NEW_ENV
@@ -23952,7 +21988,7 @@
       return 0;
     // narrow to the right type
     _tao_objref =
-      IR::ConsumesDef::_unchecked_narrow (
+      IR_ConsumesDef::_unchecked_narrow (
           obj.in (),
           ACE_TRY_ENV
         );
@@ -23969,19 +22005,8 @@
 
 ACE_INLINE CORBA::Boolean
 operator<< (
-    TAO_OutputCDR &,
-    const IR::ComponentDef_ptr
-  );
-ACE_INLINE CORBA::Boolean
-operator>> (
-    TAO_InputCDR &,
-    IR::ComponentDef_ptr &
-  );
-
-ACE_INLINE CORBA::Boolean
-operator<< (
     TAO_OutputCDR &strm,
-    const IR::ComponentDef_ptr _tao_objref
+    const IR_ComponentDef_ptr _tao_objref
   )
 {
   CORBA::Object_ptr _tao_corba_obj = _tao_objref;
@@ -23991,7 +22016,7 @@
 ACE_INLINE CORBA::Boolean
 operator>> (
     TAO_InputCDR &strm,
-    IR::ComponentDef_ptr &_tao_objref
+    IR_ComponentDef_ptr &_tao_objref
   )
 {
   ACE_TRY_NEW_ENV
@@ -24001,7 +22026,7 @@
       return 0;
     // narrow to the right type
     _tao_objref =
-      IR::ComponentDef::_unchecked_narrow (
+      IR_ComponentDef::_unchecked_narrow (
           obj.in (),
           ACE_TRY_ENV
         );
@@ -24016,7 +22041,7 @@
   return 0;
 }
 
-ACE_INLINE CORBA::Boolean operator<< (TAO_OutputCDR &strm, const IR::ComponentDescription &_tao_aggregate)
+ACE_INLINE CORBA::Boolean operator<< (TAO_OutputCDR &strm, const IR_ComponentDescription &_tao_aggregate)
 {
   if (
     (strm << _tao_aggregate.name.in ()) &&
@@ -24039,7 +22064,7 @@
   
 }
 
-ACE_INLINE CORBA::Boolean operator>> (TAO_InputCDR &strm, IR::ComponentDescription &_tao_aggregate)
+ACE_INLINE CORBA::Boolean operator>> (TAO_InputCDR &strm, IR_ComponentDescription &_tao_aggregate)
 {
   if (
     (strm >> _tao_aggregate.name.out ()) &&
@@ -24064,19 +22089,8 @@
 
 ACE_INLINE CORBA::Boolean
 operator<< (
-    TAO_OutputCDR &,
-    const IR::PrimaryKeyDef_ptr
-  );
-ACE_INLINE CORBA::Boolean
-operator>> (
-    TAO_InputCDR &,
-    IR::PrimaryKeyDef_ptr &
-  );
-
-ACE_INLINE CORBA::Boolean
-operator<< (
     TAO_OutputCDR &strm,
-    const IR::PrimaryKeyDef_ptr _tao_objref
+    const IR_PrimaryKeyDef_ptr _tao_objref
   )
 {
   CORBA::Object_ptr _tao_corba_obj = _tao_objref;
@@ -24086,7 +22100,7 @@
 ACE_INLINE CORBA::Boolean
 operator>> (
     TAO_InputCDR &strm,
-    IR::PrimaryKeyDef_ptr &_tao_objref
+    IR_PrimaryKeyDef_ptr &_tao_objref
   )
 {
   ACE_TRY_NEW_ENV
@@ -24096,7 +22110,7 @@
       return 0;
     // narrow to the right type
     _tao_objref =
-      IR::PrimaryKeyDef::_unchecked_narrow (
+      IR_PrimaryKeyDef::_unchecked_narrow (
           obj.in (),
           ACE_TRY_ENV
         );
@@ -24111,7 +22125,7 @@
   return 0;
 }
 
-ACE_INLINE CORBA::Boolean operator<< (TAO_OutputCDR &strm, const IR::PrimaryKeyDescription &_tao_aggregate)
+ACE_INLINE CORBA::Boolean operator<< (TAO_OutputCDR &strm, const IR_PrimaryKeyDescription &_tao_aggregate)
 {
   if (
     (strm << _tao_aggregate.name.in ()) &&
@@ -24126,7 +22140,7 @@
   
 }
 
-ACE_INLINE CORBA::Boolean operator>> (TAO_InputCDR &strm, IR::PrimaryKeyDescription &_tao_aggregate)
+ACE_INLINE CORBA::Boolean operator>> (TAO_InputCDR &strm, IR_PrimaryKeyDescription &_tao_aggregate)
 {
   if (
     (strm >> _tao_aggregate.name.out ()) &&
@@ -24143,19 +22157,8 @@
 
 ACE_INLINE CORBA::Boolean
 operator<< (
-    TAO_OutputCDR &,
-    const IR::FactoryDef_ptr
-  );
-ACE_INLINE CORBA::Boolean
-operator>> (
-    TAO_InputCDR &,
-    IR::FactoryDef_ptr &
-  );
-
-ACE_INLINE CORBA::Boolean
-operator<< (
     TAO_OutputCDR &strm,
-    const IR::FactoryDef_ptr _tao_objref
+    const IR_FactoryDef_ptr _tao_objref
   )
 {
   CORBA::Object_ptr _tao_corba_obj = _tao_objref;
@@ -24165,7 +22168,7 @@
 ACE_INLINE CORBA::Boolean
 operator>> (
     TAO_InputCDR &strm,
-    IR::FactoryDef_ptr &_tao_objref
+    IR_FactoryDef_ptr &_tao_objref
   )
 {
   ACE_TRY_NEW_ENV
@@ -24175,7 +22178,7 @@
       return 0;
     // narrow to the right type
     _tao_objref =
-      IR::FactoryDef::_unchecked_narrow (
+      IR_FactoryDef::_unchecked_narrow (
           obj.in (),
           ACE_TRY_ENV
         );
@@ -24192,19 +22195,8 @@
 
 ACE_INLINE CORBA::Boolean
 operator<< (
-    TAO_OutputCDR &,
-    const IR::FinderDef_ptr
-  );
-ACE_INLINE CORBA::Boolean
-operator>> (
-    TAO_InputCDR &,
-    IR::FinderDef_ptr &
-  );
-
-ACE_INLINE CORBA::Boolean
-operator<< (
     TAO_OutputCDR &strm,
-    const IR::FinderDef_ptr _tao_objref
+    const IR_FinderDef_ptr _tao_objref
   )
 {
   CORBA::Object_ptr _tao_corba_obj = _tao_objref;
@@ -24214,7 +22206,7 @@
 ACE_INLINE CORBA::Boolean
 operator>> (
     TAO_InputCDR &strm,
-    IR::FinderDef_ptr &_tao_objref
+    IR_FinderDef_ptr &_tao_objref
   )
 {
   ACE_TRY_NEW_ENV
@@ -24224,7 +22216,7 @@
       return 0;
     // narrow to the right type
     _tao_objref =
-      IR::FinderDef::_unchecked_narrow (
+      IR_FinderDef::_unchecked_narrow (
           obj.in (),
           ACE_TRY_ENV
         );
@@ -24241,19 +22233,8 @@
 
 ACE_INLINE CORBA::Boolean
 operator<< (
-    TAO_OutputCDR &,
-    const IR::HomeDef_ptr
-  );
-ACE_INLINE CORBA::Boolean
-operator>> (
-    TAO_InputCDR &,
-    IR::HomeDef_ptr &
-  );
-
-ACE_INLINE CORBA::Boolean
-operator<< (
     TAO_OutputCDR &strm,
-    const IR::HomeDef_ptr _tao_objref
+    const IR_HomeDef_ptr _tao_objref
   )
 {
   CORBA::Object_ptr _tao_corba_obj = _tao_objref;
@@ -24263,7 +22244,7 @@
 ACE_INLINE CORBA::Boolean
 operator>> (
     TAO_InputCDR &strm,
-    IR::HomeDef_ptr &_tao_objref
+    IR_HomeDef_ptr &_tao_objref
   )
 {
   ACE_TRY_NEW_ENV
@@ -24273,7 +22254,7 @@
       return 0;
     // narrow to the right type
     _tao_objref =
-      IR::HomeDef::_unchecked_narrow (
+      IR_HomeDef::_unchecked_narrow (
           obj.in (),
           ACE_TRY_ENV
         );
@@ -24288,7 +22269,7 @@
   return 0;
 }
 
-ACE_INLINE CORBA::Boolean operator<< (TAO_OutputCDR &strm, const IR::HomeDescription &_tao_aggregate)
+ACE_INLINE CORBA::Boolean operator<< (TAO_OutputCDR &strm, const IR_HomeDescription &_tao_aggregate)
 {
   if (
     (strm << _tao_aggregate.name.in ()) &&
@@ -24310,7 +22291,7 @@
   
 }
 
-ACE_INLINE CORBA::Boolean operator>> (TAO_InputCDR &strm, IR::HomeDescription &_tao_aggregate)
+ACE_INLINE CORBA::Boolean operator>> (TAO_InputCDR &strm, IR_HomeDescription &_tao_aggregate)
 {
   if (
     (strm >> _tao_aggregate.name.out ()) &&
