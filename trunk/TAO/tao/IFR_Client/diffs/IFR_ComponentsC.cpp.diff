--- orig/IFR_ComponentsC.cpp	Tue Apr 24 23:26:05 2001
+++ IFR_ComponentsC.cpp	Tue Apr 24 23:15:18 2001
@@ -1,6 +1,6 @@
 // -*- C++ -*-
 //
-// $Id$
+// $Id$
 
 // ****  Code generated by the The ACE ORB (TAO) IDL Compiler ****
 // TAO and the TAO IDL Compiler have been developed by:
@@ -21,8 +21,6 @@
 
 #include "IFR_ComponentsC.h"
 
-#include "tao/Stub.h"
-#include "tao/Invocation.h"
 #include "tao/ClientRequestInfo.h"
 #if TAO_HAS_INTERCEPTORS == 1
 #include "tao/RequestInfo_Util.h"
@@ -13521,7 +13519,7 @@
   ACE_NTOHL (0x69627574), 
   ACE_NTOHL (0x65730000),  // name = attributes
   CORBA::tk_alias, // typecode kind for typedefs
-  416, // encapsulation length
+  420, // encapsulation length
     TAO_ENCAP_BYTE_ORDER, // byte order
     41,
     ACE_NTOHL (0x49444c3a), 
@@ -13544,10 +13542,10 @@
     ACE_NTOHL (0x6e536571), 
     ACE_NTOHL (0x0),  // name = CORBA_AttrDescriptionSeq
     CORBA::tk_sequence, // typecode kind
-    324, // encapsulation length
+    328, // encapsulation length
       TAO_ENCAP_BYTE_ORDER, // byte order
       CORBA::tk_struct, // typecode kind
-      308, // encapsulation length
+      312, // encapsulation length
         TAO_ENCAP_BYTE_ORDER, // byte order
         43,
         ACE_NTOHL (0x49444c3a), 
@@ -13599,23 +13597,24 @@
         ACE_NTOHL (0x6d6f6465), 
         ACE_NTOHL (0x0),  // name = mode
         CORBA::tk_enum, // typecode kind
-        104, // encapsulation length
+        108, // encapsulation length
           TAO_ENCAP_BYTE_ORDER, // byte order
           36,
           ACE_NTOHL (0x49444c3a), 
           ACE_NTOHL (0x6f6d672e), 
           ACE_NTOHL (0x6f72672f), 
           ACE_NTOHL (0x434f5242), 
-          ACE_NTOHL (0x412f4174), 
+          ACE_NTOHL (0x415f4174), 
           ACE_NTOHL (0x74726962), 
           ACE_NTOHL (0x7574654d), 
           ACE_NTOHL (0x6f64653a), 
-          ACE_NTOHL (0x312e3000),  // repository ID = IDL:omg.org/CORBA/AttributeMode:1.0
-          14,
-          ACE_NTOHL (0x41747472), 
-          ACE_NTOHL (0x69627574), 
-          ACE_NTOHL (0x654d6f64), 
-          ACE_NTOHL (0x65000000),  // name = AttributeMode
+          ACE_NTOHL (0x312e3000),  // repository ID = IDL:omg.org/CORBA_AttributeMode:1.0
+          20,
+          ACE_NTOHL (0x434f5242), 
+          ACE_NTOHL (0x415f4174), 
+          ACE_NTOHL (0x74726962), 
+          ACE_NTOHL (0x7574654d), 
+          ACE_NTOHL (0x6f646500),  // name = CORBA_AttributeMode
           2, // member count
           12,
           ACE_NTOHL (0x41545452), 
@@ -19459,7 +19458,7 @@
   ACE_NTOHL (0x6174696f), 
   ACE_NTOHL (0x6e730000),  // name = operations
   CORBA::tk_alias, // typecode kind for typedefs
-  1296, // encapsulation length
+  1304, // encapsulation length
     TAO_ENCAP_BYTE_ORDER, // byte order
     39,
     ACE_NTOHL (0x49444c3a), 
@@ -19480,10 +19479,10 @@
     ACE_NTOHL (0x696f6e53), 
     ACE_NTOHL (0x65710000),  // name = CORBA_OpDescriptionSeq
     CORBA::tk_sequence, // typecode kind
-    1212, // encapsulation length
+    1220, // encapsulation length
       TAO_ENCAP_BYTE_ORDER, // byte order
       CORBA::tk_struct, // typecode kind
-      1196, // encapsulation length
+      1204, // encapsulation length
         TAO_ENCAP_BYTE_ORDER, // byte order
         43,
         ACE_NTOHL (0x49444c3a), 
@@ -19535,23 +19534,24 @@
         ACE_NTOHL (0x6d6f6465), 
         ACE_NTOHL (0x0),  // name = mode
         CORBA::tk_enum, // typecode kind
-        100, // encapsulation length
+        104, // encapsulation length
           TAO_ENCAP_BYTE_ORDER, // byte order
           36,
           ACE_NTOHL (0x49444c3a), 
           ACE_NTOHL (0x6f6d672e), 
           ACE_NTOHL (0x6f72672f), 
           ACE_NTOHL (0x434f5242), 
-          ACE_NTOHL (0x412f4f70), 
+          ACE_NTOHL (0x415f4f70), 
           ACE_NTOHL (0x65726174), 
           ACE_NTOHL (0x696f6e4d), 
           ACE_NTOHL (0x6f64653a), 
-          ACE_NTOHL (0x312e3000),  // repository ID = IDL:omg.org/CORBA/OperationMode:1.0
-          14,
-          ACE_NTOHL (0x4f706572), 
-          ACE_NTOHL (0x6174696f), 
-          ACE_NTOHL (0x6e4d6f64), 
-          ACE_NTOHL (0x65000000),  // name = OperationMode
+          ACE_NTOHL (0x312e3000),  // repository ID = IDL:omg.org/CORBA_OperationMode:1.0
+          20,
+          ACE_NTOHL (0x434f5242), 
+          ACE_NTOHL (0x415f4f70), 
+          ACE_NTOHL (0x65726174), 
+          ACE_NTOHL (0x696f6e4d), 
+          ACE_NTOHL (0x6f646500),  // name = CORBA_OperationMode
           2, // member count
           10,
           ACE_NTOHL (0x4f505f4e), 
@@ -19598,7 +19598,7 @@
         ACE_NTOHL (0x6d657465), 
         ACE_NTOHL (0x72730000),  // name = parameters
         CORBA::tk_alias, // typecode kind for typedefs
-        444, // encapsulation length
+        448, // encapsulation length
           TAO_ENCAP_BYTE_ORDER, // byte order
           40,
           ACE_NTOHL (0x49444c3a), 
@@ -19619,10 +19619,10 @@
           ACE_NTOHL (0x74696f6e), 
           ACE_NTOHL (0x53657100),  // name = CORBA_ParDescriptionSeq
           CORBA::tk_sequence, // typecode kind
-          360, // encapsulation length
+          364, // encapsulation length
             TAO_ENCAP_BYTE_ORDER, // byte order
             CORBA::tk_struct, // typecode kind
-            344, // encapsulation length
+            348, // encapsulation length
               TAO_ENCAP_BYTE_ORDER, // byte order
               43,
               ACE_NTOHL (0x49444c3a), 
@@ -19681,23 +19681,24 @@
               ACE_NTOHL (0x6d6f6465), 
               ACE_NTOHL (0x0),  // name = mode
               CORBA::tk_enum, // typecode kind
-              116, // encapsulation length
+              120, // encapsulation length
                 TAO_ENCAP_BYTE_ORDER, // byte order
                 36,
                 ACE_NTOHL (0x49444c3a), 
                 ACE_NTOHL (0x6f6d672e), 
                 ACE_NTOHL (0x6f72672f), 
                 ACE_NTOHL (0x434f5242), 
-                ACE_NTOHL (0x412f5061), 
+                ACE_NTOHL (0x415f5061), 
                 ACE_NTOHL (0x72616d65), 
                 ACE_NTOHL (0x7465724d), 
                 ACE_NTOHL (0x6f64653a), 
-                ACE_NTOHL (0x312e3000),  // repository ID = IDL:omg.org/CORBA/ParameterMode:1.0
-                14,
-                ACE_NTOHL (0x50617261), 
-                ACE_NTOHL (0x6d657465), 
-                ACE_NTOHL (0x724d6f64), 
-                ACE_NTOHL (0x65000000),  // name = ParameterMode
+                ACE_NTOHL (0x312e3000),  // repository ID = IDL:omg.org/CORBA_ParameterMode:1.0
+                20,
+                ACE_NTOHL (0x434f5242), 
+                ACE_NTOHL (0x415f5061), 
+                ACE_NTOHL (0x72616d65), 
+                ACE_NTOHL (0x7465724d), 
+                ACE_NTOHL (0x6f646500),  // name = CORBA_ParameterMode
                 3, // member count
                 9,
                 ACE_NTOHL (0x50415241), 
@@ -19806,7 +19807,7 @@
   ACE_NTOHL (0x69627574), 
   ACE_NTOHL (0x65730000),  // name = attributes
   CORBA::tk_alias, // typecode kind for typedefs
-  416, // encapsulation length
+  420, // encapsulation length
     TAO_ENCAP_BYTE_ORDER, // byte order
     41,
     ACE_NTOHL (0x49444c3a), 
@@ -19829,10 +19830,10 @@
     ACE_NTOHL (0x6e536571), 
     ACE_NTOHL (0x0),  // name = CORBA_AttrDescriptionSeq
     CORBA::tk_sequence, // typecode kind
-    324, // encapsulation length
+    328, // encapsulation length
       TAO_ENCAP_BYTE_ORDER, // byte order
       CORBA::tk_struct, // typecode kind
-      308, // encapsulation length
+      312, // encapsulation length
         TAO_ENCAP_BYTE_ORDER, // byte order
         43,
         ACE_NTOHL (0x49444c3a), 
@@ -19884,23 +19885,24 @@
         ACE_NTOHL (0x6d6f6465), 
         ACE_NTOHL (0x0),  // name = mode
         CORBA::tk_enum, // typecode kind
-        104, // encapsulation length
+        108, // encapsulation length
           TAO_ENCAP_BYTE_ORDER, // byte order
           36,
           ACE_NTOHL (0x49444c3a), 
           ACE_NTOHL (0x6f6d672e), 
           ACE_NTOHL (0x6f72672f), 
           ACE_NTOHL (0x434f5242), 
-          ACE_NTOHL (0x412f4174), 
+          ACE_NTOHL (0x415f4174), 
           ACE_NTOHL (0x74726962), 
           ACE_NTOHL (0x7574654d), 
           ACE_NTOHL (0x6f64653a), 
-          ACE_NTOHL (0x312e3000),  // repository ID = IDL:omg.org/CORBA/AttributeMode:1.0
-          14,
-          ACE_NTOHL (0x41747472), 
-          ACE_NTOHL (0x69627574), 
-          ACE_NTOHL (0x654d6f64), 
-          ACE_NTOHL (0x65000000),  // name = AttributeMode
+          ACE_NTOHL (0x312e3000),  // repository ID = IDL:omg.org/CORBA_AttributeMode:1.0
+          20,
+          ACE_NTOHL (0x434f5242), 
+          ACE_NTOHL (0x415f4174), 
+          ACE_NTOHL (0x74726962), 
+          ACE_NTOHL (0x7574654d), 
+          ACE_NTOHL (0x6f646500),  // name = CORBA_AttributeMode
           2, // member count
           12,
           ACE_NTOHL (0x41545452), 
@@ -22296,11 +22298,6 @@
     // If length is 0 we return true.
     if (0 >= _tao_seq_len) 
       return 1;
-    // Add a check to the length of the sequence
-    // to make sure it does not exceed the length
-    // of the stream. (See bug 58.)
-    if (_tao_seq_len > strm.length())
-      return 0;
     // retrieve all the elements
     CORBA::Boolean _tao_marshal_flag = 1;
     for (CORBA::ULong i = 0; i < _tao_sequence.length () && _tao_marshal_flag; i++)
@@ -22343,11 +22340,6 @@
     // If length is 0 we return true.
     if (0 >= _tao_seq_len) 
       return 1;
-    // Add a check to the length of the sequence
-    // to make sure it does not exceed the length
-    // of the stream. (See bug 58.)
-    if (_tao_seq_len > strm.length())
-      return 0;
     // retrieve all the elements
     CORBA::Boolean _tao_marshal_flag = 1;
     for (CORBA::ULong i = 0; i < _tao_sequence.length () && _tao_marshal_flag; i++)
@@ -22390,11 +22382,6 @@
     // If length is 0 we return true.
     if (0 >= _tao_seq_len) 
       return 1;
-    // Add a check to the length of the sequence
-    // to make sure it does not exceed the length
-    // of the stream. (See bug 58.)
-    if (_tao_seq_len > strm.length())
-      return 0;
     // retrieve all the elements
     CORBA::Boolean _tao_marshal_flag = 1;
     for (CORBA::ULong i = 0; i < _tao_sequence.length () && _tao_marshal_flag; i++)
@@ -22437,11 +22424,6 @@
     // If length is 0 we return true.
     if (0 >= _tao_seq_len) 
       return 1;
-    // Add a check to the length of the sequence
-    // to make sure it does not exceed the length
-    // of the stream. (See bug 58.)
-    if (_tao_seq_len > strm.length())
-      return 0;
     // retrieve all the elements
     CORBA::Boolean _tao_marshal_flag = 1;
     for (CORBA::ULong i = 0; i < _tao_sequence.length () && _tao_marshal_flag; i++)
@@ -22484,11 +22466,6 @@
     // If length is 0 we return true.
     if (0 >= _tao_seq_len) 
       return 1;
-    // Add a check to the length of the sequence
-    // to make sure it does not exceed the length
-    // of the stream. (See bug 58.)
-    if (_tao_seq_len > strm.length())
-      return 0;
     // retrieve all the elements
     CORBA::Boolean _tao_marshal_flag = 1;
     for (CORBA::ULong i = 0; i < _tao_sequence.length () && _tao_marshal_flag; i++)
@@ -22531,11 +22508,6 @@
     // If length is 0 we return true.
     if (0 >= _tao_seq_len) 
       return 1;
-    // Add a check to the length of the sequence
-    // to make sure it does not exceed the length
-    // of the stream. (See bug 58.)
-    if (_tao_seq_len > strm.length())
-      return 0;
     // retrieve all the elements
     CORBA::Boolean _tao_marshal_flag = 1;
     for (CORBA::ULong i = 0; i < _tao_sequence.length () && _tao_marshal_flag; i++)
@@ -22578,11 +22550,6 @@
     // If length is 0 we return true.
     if (0 >= _tao_seq_len) 
       return 1;
-    // Add a check to the length of the sequence
-    // to make sure it does not exceed the length
-    // of the stream. (See bug 58.)
-    if (_tao_seq_len > strm.length())
-      return 0;
     // retrieve all the elements
     CORBA::Boolean _tao_marshal_flag = 1;
     for (CORBA::ULong i = 0; i < _tao_sequence.length () && _tao_marshal_flag; i++)
@@ -22625,11 +22592,6 @@
     // If length is 0 we return true.
     if (0 >= _tao_seq_len) 
       return 1;
-    // Add a check to the length of the sequence
-    // to make sure it does not exceed the length
-    // of the stream. (See bug 58.)
-    if (_tao_seq_len > strm.length())
-      return 0;
     // retrieve all the elements
     CORBA::Boolean _tao_marshal_flag = 1;
     for (CORBA::ULong i = 0; i < _tao_sequence.length () && _tao_marshal_flag; i++)
@@ -22672,11 +22634,6 @@
     // If length is 0 we return true.
     if (0 >= _tao_seq_len) 
       return 1;
-    // Add a check to the length of the sequence
-    // to make sure it does not exceed the length
-    // of the stream. (See bug 58.)
-    if (_tao_seq_len > strm.length())
-      return 0;
     // retrieve all the elements
     CORBA::Boolean _tao_marshal_flag = 1;
     for (CORBA::ULong i = 0; i < _tao_sequence.length () && _tao_marshal_flag; i++)
@@ -22719,11 +22676,6 @@
     // If length is 0 we return true.
     if (0 >= _tao_seq_len) 
       return 1;
-    // Add a check to the length of the sequence
-    // to make sure it does not exceed the length
-    // of the stream. (See bug 58.)
-    if (_tao_seq_len > strm.length())
-      return 0;
     // retrieve all the elements
     CORBA::Boolean _tao_marshal_flag = 1;
     for (CORBA::ULong i = 0; i < _tao_sequence.length () && _tao_marshal_flag; i++)
@@ -22874,11 +22826,6 @@
     // If length is 0 we return true.
     if (0 >= _tao_seq_len) 
       return 1;
-    // Add a check to the length of the sequence
-    // to make sure it does not exceed the length
-    // of the stream. (See bug 58.)
-    if (_tao_seq_len > strm.length())
-      return 0;
     // retrieve all the elements
     CORBA::Boolean _tao_marshal_flag = 1;
     for (CORBA::ULong i = 0; i < _tao_sequence.length () && _tao_marshal_flag; i++)
@@ -22921,11 +22868,6 @@
     // If length is 0 we return true.
     if (0 >= _tao_seq_len) 
       return 1;
-    // Add a check to the length of the sequence
-    // to make sure it does not exceed the length
-    // of the stream. (See bug 58.)
-    if (_tao_seq_len > strm.length())
-      return 0;
     // retrieve all the elements
     CORBA::Boolean _tao_marshal_flag = 1;
     for (CORBA::ULong i = 0; i < _tao_sequence.length () && _tao_marshal_flag; i++)
